var translation={}
translation['51.1'] = ""
translation['51.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsc28gSSBhbSBzdXJwcmlzZWQgdGhhdCBteSBvcHBvbmVudHMKICAgICAgICAgICAgICAgICAgICBuZWdsZWN0ZWQgdGhlaXIgc2hpcHMsIGJ1dCB0b29rIGNhcmUgdG8gZ2V0IHRoZWlyIG9yYXRvcnMgcmVhZHk7IGFuZCB0aGV5IHNlZW0KICAgICAgICAgICAgICAgICAgICB0byBtZSB0byBiZSBtaXN0YWtlbiBpbiByZWdhcmQgdG8gdGhlIHdob2xlIGFmZmFpciwgYW5kIHRvIGltYWdpbmUgdGhhdCB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgZ3JhdGVmdWwsIG5vdCB0byB0aG9zZSB3aG8gZG8gdGhlaXIgZHV0eSwgYnV0IHRvIHRob3NlIHdobyBzYXkgdGhleSBkbyBpdDsgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYXZlIGZvcm1lZCBhIHRvdGFsbHkgZGlmZmVyZW50IGVzdGltYXRlIHJlZ2FyZGluZyB5b3UgZnJvbSB0aGF0IHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICBob2xkLiBGb3IgdGhpcyB2ZXJ5IHJlYXNvbiBpdCBpcyByaWdodCB0aGF0IHlvdSBzaG91bGQgZmVlbCBtb3JlIGtpbmRseSBkaXNwb3NlZAogICAgICAgICAgICAgICAgICAgIHRvd2FyZCBtZTsgZm9yIGl0IGlzIHBsYWluIHRoYXQgSSBlbnRlcnRhaW4gYSBoaWdoZXIgb3BpbmlvbiBvZiB5b3UgdGhhbiB0aGV5CiAgICAgICAgICAgICAgICAgICAgZG8uIDwvdHJhbnNsYXRpb24+"
translation['51.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1cmVseSBpdCB3b3VsZCBoYXZlIGJlZW4gcmlnaHQgYW5kIHByb3BlciwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IHRob3NlIHdobyBjbGFpbQogICAgICAgICAgICAgICAgICAgIHRvIHJlY2VpdmUgYSBjcm93biBmcm9tIHlvdSwgc2hvdWxkIHNob3cgdGhhdCB0aGV5IGFyZSB3b3J0aHkgb2YgaXQsIGFuZCBub3QKICAgICAgICAgICAgICAgICAgICBzcGVhayBpbGwgb2YgbWUuIEJ1dCBzaW5jZSB0aGV5IGxlYXZlIG91dCB0aGUgZm9ybWVyIG9mIHRoZXNlIHR3byB0aGluZ3MgYW5kIGRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhdHRlciwgSSBzaGFsbCBzaG93IHRoYXQgdGhleSBhcmUgc3BlYWtpbmcgZmFsc2VseSBib3RoIGluIHRoZWlyIHByYWlzZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgYW5kIGluIHRoZWlyIHNsYW5kZXIgb2YgbWU7IGFuZCBJIHNoYWxsIHByb3ZlIHRoaXMgYnkgdGhlaXIgb3duIGRlZWRzCiAgICAgICAgICAgICAgICAgICAgYW5kIGJ5IG1pbmUuIDwvdHJhbnNsYXRpb24+"
translation['51.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGVuIHlvdSBoYWQgcGFzc2VkIGEgZGVjcmVlIGFuZCBjb25maXJtZWQgaXQsIHRvIHRoZSBlZmZlY3QgdGhhdCB3aG9ldmVyIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBicmluZyBoaXMgc2hpcCBhcm91bmQgdG8gdGhlIHBpZXIgYmVmb3JlIHRoZSBsYXN0IGRheSBvZiB0aGUgbW9udGggc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgcGxhY2VkIHVuZGVyIGFycmVzdCBhbmQgaGFuZGVkIG92ZXIgdG8gdGhlIGNvdXJ0LCBJIGJyb3VnaHQgbXkgc2hpcCB1cCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBwaWVyLCBhbmQgZm9yIHRoaXMgSSByZWNlaXZlZCBhIGNyb3duIGZyb20geW91LCB3aGlsZSB0aGUgb3RoZXJzIGhhZCBub3QgZXZlbgogICAgICAgICAgICAgICAgICAgIGxhdW5jaGVkIHRoZWlyIHNoaXBzOyB0aGV5IHRoZXJlZm9yZSBoYXZlIG1hZGUgdGhlbXNlbHZlcyBsaWFibGUgdG8KICAgICAgICAgICAgICAgICAgICBpbXByaXNvbm1lbnQuIFdvdWxkIGl0IG5vdCwgdGhlbiwgYmUgdGhlIHN0cmFuZ2VzdCBwb3NzaWJsZSBhY3Qgb24geW91ciBwYXJ0LCBpZgogICAgICAgICAgICAgICAgICAgIHlvdSBzaG91bGQgYmUgc2VlbiB0byBjb25mZXIgYSBjcm93biBvbiBwZW9wbGUgd2hvIGhhZCBzdWZmZXJlZCB0aGVtc2VsdmVzIHRvCiAgICAgICAgICAgICAgICAgICAgYmVjb21lIGxpYWJsZSB0byBzbyBncmlldm91cyBhIHBlbmFsdHk/IDwvdHJhbnNsYXRpb24+"
translation['51.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHNoaXAncyBlcXVpcG1lbnQsIG1vcmVvdmVyLCBhbGwsIHRoYXQgaXMsIHdoaWNoIHRoZSBzdGF0ZSBpcyBib3VuZCB0byBzdXBwbHkKICAgICAgICAgICAgICAgICAgICB0byB0aGUgdHJpZXJhcmNocywgSSBwdXJjaGFzZWQgaXQgd2l0aCBteSBvd24gcmVzb3VyY2VzIGFuZCB0b29rIG5vdGhpbmcgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBwdWJsaWMgc3RvcmVzLCB3aGlsZSB0aGVzZSBtZW4gdXNlZCBlcXVpcG1lbnQgb2YgeW91cnMgYW5kIHNwZW50IG5vbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBvd24gbW9uZXkgZm9yIHRoaXMgcHVycG9zZS4gQW5kIHN1cmVseSB0aGV5IGNhbm5vdCBzYXkgZWl0aGVyIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIGdvdCB0aGVpciBzaGlwIHJlYWR5IGZvciB0cmlhbCBiZWZvcmUgSSBkaWQgbWluZTsgZm9yIG1pbmUgd2FzIG1hbm5lZCBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCBzbyBtdWNoIGFzIHRvdWNoZWQgdGhlaXJzLCBhbmQgeW91IGFsbCBzYXcgdGhlIHNoaXAgYmVpbmcgdGVzdGVkLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['51.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1vcmUgdGhhbiB0aGlzLCBJIHNlY3VyZWQgdGhlIHZlcnkgYmVzdAogICAgICAgICAgICAgICAgICAgIHJvd2VycywgZ2l2aW5nIGJ5IGZhciB0aGUgaGlnaGVzdCB3YWdlcy4gSWYgbXkgb3Bwb25lbnRzIGhhZCBoYWQgcm93ZXJzIGluZmVyaW9yCiAgICAgICAgICAgICAgICAgICAgdG8gbWluZSwgaXQgd291bGQgaGF2ZSBiZWVuIG5vdGhpbmcgZGlzZ3JhY2VmdWwsIGJ1dCBpbiBmYWN0IHRoZXkgaGF2ZSBoaXJlZAogICAgICAgICAgICAgICAgICAgIHJvd2VycyBvZiBubyBzb3J0IHdoYXRldmVyLCB0aG91Z2ggdGhleSBsYXkgY2xhaW0gdG8gbGFyZ2VyIG51bWJlcnMuIEFuZCB5ZXQsCiAgICAgICAgICAgICAgICAgICAgaG93IGNhbiBpdCBiZSBmYWlyLCB3aGVuIHRoZXkgbWFubmVkIHRoZWlyIHNoaXAgbGF0ZXIgdGhhbiBJIGRpZCBtaW5lLCBmb3IgdGhlbQogICAgICAgICAgICAgICAgICAgIG5vdyB0byByZWNlaXZlIHRoZSBjcm93biBhcyBoYXZpbmcgYmVlbiB0aGUgZmlyc3QgdG8gZ2V0IHJlYWR5PyA8L3RyYW5zbGF0aW9uPg=="
translation['51.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHRoaW5rIHRoZXJlZm9yZSB0aGF0IGV2ZW4KICAgICAgICAgICAgICAgICAgICB3aXRob3V0IG15IHNheWluZyBhbnl0aGluZyB5b3UgcmVjb2duaXplIHRoYXQgeW91IHdvdWxkIG1vc3QganVzdGx5IGdyYW50IG1lIHRoZQogICAgICAgICAgICAgICAgICAgIGNyb3duLCBidXQgSSB3aXNoIHRvIHNob3cgeW91IHRoYXQgb2YgYWxsIHBlb3BsZSBpbiB0aGUgd29ybGQgdGhlc2UgbWVuIGhhdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVhc3QgY2xhaW0gdG8gaXQuIEhvdyBjYW4gSSBwcm92ZSB0aGlzIG1vc3QgY2xlYXJseT8gQnkgd2hhdCB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGRvbmUuIEZvciB0aGV5IHNvdWdodCBvdXQgdGhlIG1hbiB3aG8gd291bGQgdGFrZSB0aGVpciB0cmllcmFyY2h5IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIGxvd2VzdCB0ZXJtcywgYW5kIGhhdmUgbGV0IHRoZSBzZXJ2aWNlIHRvIGhpbS4gWWV0IGlzIGl0IG5vdCB1bmp1c3QgdG8KICAgICAgICAgICAgICAgICAgICBzaHJpbmsgZnJvbSBtYWtpbmcgdGhlIG91dGxheSwgYW5kIHN0aWxsIHRvIGRlbWFuZCBhIHNoYXJlIGluIHRoZSBob25vcnMKICAgICAgICAgICAgICAgICAgICBhY2NydWluZyBmcm9tIGl0LCBhbmQgd2hpbGUgdGhleSBsYXkgdGhlIGJsYW1lIGZvciBub3QgYnJpbmdpbmcgdGhlaXIgc2hpcCB1cCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBwaWVyIGF0IHRoYXQgdGltZSBvbiB0aGUgbWFuIHRoZXkgaGlyZWQsIHRvIGJpZCB5b3Ugbm93IHJld2FyZCB0aGVtIGZvciBnb29kCiAgICAgICAgICAgICAgICAgICAgc2VydmljZSByZW5kZXJlZD8gPC90cmFuc2xhdGlvbj4="
translation['51.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPllvdSBvdWdodCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdG8gc2VlayBhIGp1c3QgY291cnNlLCBub3Qgb25seSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBsaWdodCBvZiB0aGVzZSBjb25zaWRlcmF0aW9ucywgYnV0IGFsc28gaW4gdGhlIGxpZ2h0IG9mIHlvdXIgb3duIHByZXZpb3VzCiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucyBpbiB0aGUgY2FzZSBvZiBvdGhlcnMgd2hvIGhhdmUgYWN0ZWQgYXMgdGhlc2UgbWVuIGhhdmUgZG9uZS4gRm9yLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgeW91IHdlcmUgd29yc3RlZCBpbiB0aGUgc2VhLWZpZ2h0IGFnYWluc3QgQWxleGFuZGVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BbGV4YW5kZXIgb2YgUGhlcmFlIGhhZCBkZWZlYXRlZCB0aGUgQXRoZW5pYW4gZmxlZXQgYXQKICAgICAgICAgICAgICAgICAgICAgICAgUGVwYXJldGh1cyBpbiA8ZGF0ZSBhdXRobmFtZT0iLTM2MSIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM2MSI+MzYxPC9kYXRlPiBCLkMuPC9ub3RlPiB5b3UgdGhvdWdodCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHRyaWVyYXJjaHMgd2hvIGhhZCBsZXQgb3V0IHRoZWlyIHRyaWVyYXJjaGllcyB3ZXJlIGNoaWVmbHkgcmVzcG9uc2libGUgZm9yIHdoYXQKICAgICAgICAgICAgICAgICAgICBoYWQgaGFwcGVuZWQsIGFuZCB5b3UgZ2F2ZSB0aGVtIG92ZXIgZm9yIGltcHJpc29ubWVudCwgaGF2aW5nIGRlY2lkZWQgYnkgc2hvdyBvZgogICAgICAgICAgICAgICAgICAgIGhhbmRzIHRoYXQgdGhleSBoYWQgYmV0cmF5ZWQgdGhlaXIgc2hpcHMgYW5kIGRlc2VydGVkIHRoZWlyIHBvc3QuIDxkYXRlIGF1dGhuYW1lPSItMzYxIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzYxIj4zNjE8L2RhdGU+IEIuQy48L3RyYW5zbGF0aW9uPg=="
translation['51.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBhY2N1c2F0aW9uIHdhcyBtYWRlIGJ5IEFyaXN0b3Bob24sIGFuZCB5b3Ugd2VyZQogICAgICAgICAgICAgICAgICAgIHRoZSBqdWRnZXM7IGFuZCwgaWYgdGhlIGFuZ2VyIHlvdSBmZWx0IGhhZCBiZWVuIGVxdWFsIHRvIHRoZWlyIGNyaW1lLCBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgY291bGQgaGF2ZSBwcmV2ZW50ZWQgdGhlaXIgYmVpbmcgcHV0IHRvIGRlYXRoLiBNeSBvcHBvbmVudHMsIGFsdGhvdWdoIHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgYXdhcmUgdGhhdCB0aGV5IGhhdmUgZG9uZSBqdXN0IHdoYXQgdGhvc2Ugb3RoZXJzIGRpZCwgaW5zdGVhZCBvZiBzaHVkZGVyaW5nCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHlvdSBhdCB0aGUgdGhvdWdodCBvZiB3aGF0IHRoZXkgb3VnaHQgdG8gc3VmZmVyLCBtYWtlIHNwZWVjaGVzIGF0dGFja2luZwogICAgICAgICAgICAgICAgICAgIG90aGVycywgYW5kIGRlbWFuZCB0aGF0IHRoZXkgdGhlbXNlbHZlcyBiZSBjcm93bmVkLiBBbmQgeWV0LCBjb25zaWRlciB3aGF0IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYmUgdGhvdWdodCBvZiB5b3VyIHdheSBvZiByZWFjaGluZyBkZWNpc2lvbnMsIGlmIHlvdSBhcmUgc2VlbiB0byBoYXZlIGNvbmRlbW5lZAogICAgICAgICAgICAgICAgICAgIHNvbWUgcGVyc29ucyB0byBkZWF0aCBhbmQgdG8gaGF2ZSBjcm93bmVkIG90aGVycyBmb3IgdGhlIHNhbWUgY2F1c2UhIDwvdHJhbnNsYXRpb24+"
translation['51.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeW91IHdvdWxkIGJlIHRob3VnaHQgdG8gYmUgbWFraW5nIGEgbWlzdGFrZSwgbm90CiAgICAgICAgICAgICAgICAgICAgb25seSBpZiB5b3Ugc2hvdWxkIGRvIHRoaXMsIGJ1dCBhbHNvIGlmIHlvdSBzaG91bGQgZmFpbCB0byBwdW5pc2ggdGhvc2Ugd2hvIGRvCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzIG9mIHRoaXMgc29ydCwgd2hlbiB5b3UgaGF2ZSB0aGVtIGluIHlvdXIgcG93ZXIuIEZvciB0aGUgdGltZSB0byBmZWVsCiAgICAgICAgICAgICAgICAgICAgaW5kaWduYXRpb24gaXMgbm90IHdoZW4geW91IGhhdmUgc3VmZmVyZWQgc29tZSBvZiB5b3VyIHBvc3Nlc3Npb25zIHRvIGJlIGxvc3QsCiAgICAgICAgICAgICAgICAgICAgYnV0IHdoaWxlIHRoZXkgYXJlIHNhZmUsIGJ1dCB5b3Ugc2VlIHRob3NlIHBsYWNlZCBpbiBjaGFyZ2Ugb2YgdGhlbSBmYWlsaW5nCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCBhIHNoYW1lZnVsIGxvdmUgb2YgZ2FpbiB0byBtYWtlIGFkZXF1YXRlIHByb3Zpc2lvbiBmb3IgdGhlaXIgc2FmZXR5LiBMZXQKICAgICAgICAgICAgICAgICAgICBubyBvbmUgb2YgeW91IGNvbmRlbW4gbXkgc3BlZWNoIGJlY2F1c2UgaGUgcmVnYXJkcyBpdCBhcyBiaXR0ZXI7IGNvbmRlbW4gcmF0aGVyCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGhhdmUgY29tbWl0dGVkIHRoZSBjcmltZTsgZm9yIGl0IGlzIGJlY2F1c2Ugb2YgdGhlbSB0aGF0IG15IHNwZWVjaCBpcwogICAgICAgICAgICAgICAgICAgIHN1Y2ggYXMgaXQgaXMuIDwvdHJhbnNsYXRpb24+"
translation['51.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5JIGZvciBteSBwYXJ0IHdvbmRlciB3aHkgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgd29ybGQgdGhlc2UgbWVuIHNob3VsZCBpbXByaXNvbiBhbmQgcHVuaXNoIHRob3NlIG9mIHRoZSBzYWlsb3JzIHdobyBkZXNlcnQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBzaGlwc+KAlG1lbiB3aG8gcmVjZWl2ZSBvbmx5IHRoaXJ0eSBkcmFjaG1hZSBhcGllY2Us4oCUd2hpbGUgeW91CiAgICAgICAgICAgICAgICAgICAgZG8gbm90IGRlYWwgaW4gdGhlIHNhbWUgbWFubmVyIHdpdGggdGhvc2Ugb2YgdGhlIHRyaWVyYXJjaHMgd2hvIGRvIG5vdCBzYWlsIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGVpciBzaGlwcyB5ZXQgcmVjZWl2ZSB0aGlydHkgbWluYWUgYXBpZWNlIGZvciBzbyBkb2luZzsgaWYgYSBwb29yIG1hbiB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgc3RyZXNzIG9mIG5lZWQgY29tbWl0cyBhIGZhdWx0LCBpcyBoZSB0byBiZSBsaWFibGUgdG8gdGhlIHNldmVyZXN0IHBlbmFsdGllcywKICAgICAgICAgICAgICAgICAgICB3aGlsZSwgaWYgYSByaWNoIG1hbiBkb2VzIHRoZSBzYW1lIHRoaW5nIHRocm91Z2ggc2hhbWVmdWwgbG92ZSBvZiBnYWluLCBpcyBoZSB0bwogICAgICAgICAgICAgICAgICAgIHdpbiBwYXJkb24/IFdoZXJlLCB0aGVuLCBpcyBlcXVhbGl0eSBmb3IgYWxsIGFuZCBwb3B1bGFyIGdvdmVybm1lbnQsIGlmIHlvdQogICAgICAgICAgICAgICAgICAgIGRlY2lkZSBtYXR0ZXJzIGluIHRoaXMgd2F5PyA8L3RyYW5zbGF0aW9uPg=="
translation['51.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3JlIHRoYW4gdGhpcywgaXQKICAgICAgICAgICAgICAgICAgICBzZWVtcyB0byBtZSB0byBiZSBhYnN1cmQgdGhhdCwgd2hlbiBhIG1hbiBzYXlzIGFueXRoaW5nIGNvbnRyYXJ5IHRvIGxhdywgaGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQsIGlmIGhlIGlzIGNvbnZpY3RlZCwgYmUgZGVwcml2ZWQgb2Ygb25lIHRoaXJkIG9mIGhpcyBwZXJzb25hbAogICAgICAgICAgICAgICAgICAgICAgICByaWdodHMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlByZWNpc2VseSB3aGF0IHRoaXMgcGFydGlhbCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDPhM65zrzhvbfOsTwvZm9yZWlnbj4g77yIZGlzZnJhbmNoaXNlbWVudO+8iQogICAgICAgICAgICAgICAgICAgICAgICB3YXMsIGl0IGlzIGltcG9zc2libGUgdG8gc3RhdGUgZGVmaW5pdGVseS48L25vdGU+IHdoaWxlIHRob3NlIGd1aWx0eSBub3Qgb2YKICAgICAgICAgICAgICAgICAgICB3b3JkcyBidXQgb2YgYWN0cyB0aGF0IGFyZSBpbGxlZ2FsIHNob3VsZCBwYXkgbm8gcGVuYWx0eS4gU3VyZWx5LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4TOuc684b23zrE8L2ZvcmVpZ24+IO+8iGRpc2ZyYW5jaGlzZW1lbnTvvIkKICAgICAgICAgICAgICAgICAgICAgICAgd2FzLCBpdCBpcyBpbXBvc3NpYmxlIHRvIHN0YXRlIGRlZmluaXRlbHkuPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB5b3Ugd291bGQgYWxsIHNheSB0aGF0CiAgICAgICAgICAgICAgICAgICAgbGVuaWVuY3kgaW4gcmVnYXJkIHRvIHN1Y2ggb2ZmZW5jZXMgbWVyZWx5IHRyYWlucyB1cCBvdGhlcnMgdG8gY29tbWl0IHRoZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['51.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoLCBub3cKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgaGF2ZSBlbnRlcmVkIHVwb24gdGhpcyBzdWJqZWN0LCB0byBzZXQgZm9ydGggdG8geW91IGFsc28gdGhlIGNvbnNlcXVlbmNlcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHJlc3VsdCBmcm9tIHN1Y2ggYWN0aW9ucy4gV2hlbiBhIG1hbiB3aG8gaGFzIHRha2VuIHRoZSB0cmllcmFyY2h5IGZvciBoaXJlCiAgICAgICAgICAgICAgICAgICAgc2V0cyBzYWlsLCBoZSBwbHVuZGVycyBhbmQgcGlsbGFnZXMgZXZlcnlib2R5OyB0aGUgcHJvZml0cyBoZSByZWFwcyBmb3IgaGltc2VsZiwKICAgICAgICAgICAgICAgICAgICBidXQgd2hvZXZlciBpdCBtYXkgY2hhbmNlIHRvIGJlIG9mIHlvdSBjaXRpemVucyBwYXlzIHRoZSBkYW1hZ2VzOyBhbmQgeW91IGFsb25lCiAgICAgICAgICAgICAgICAgICAgb2YgYWxsIHBlb3BsZSBhcmUgdW5hYmxlIHRvIHRyYXZlbCBhbnl3aGVyZSB3aXRob3V0IGEgaGVyYWxkJ3Mgc3RhZmYgb2YgdHJ1Y2UKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIG9mIHRoZSBhY3RzIG9mIHRoZXNlIG1lbiBpbiBzZWl6aW5nIGhvc3RhZ2VzIGFuZCBpbiBwcm92b2tpbmcgcmVwcmlzYWxzOwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['51.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5zbyB0aGF0LCBpZiBvbmUgbG9va3MgYXQgdGhlIG1hdHRlcgogICAgICAgICAgICAgICAgICAgIGZyYW5rbHksIGhlIHdpbGwgZmluZCB0aGF0IHRyaXJlbWVzIHN1Y2ggYXMgdGhlc2UgaGF2ZSBzYWlsZWQgZm9ydGgsIG5vdCBmb3IKICAgICAgICAgICAgICAgICAgICB5b3UsIGJ1dCBhZ2FpbnN0IHlvdS4gRm9yIGEgbWFuIHdobyBzZXJ2ZXMgYXMgdHJpZXJhcmNoIGluIHRoZSBpbnRlcmVzdCBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gb3VnaHQgbm90IHRvIGV4cGVjdCB0bwogICAgICAgICAgICAgICAgICAgIGdyb3cgcmljaCBhdCB0aGUgcHVibGljIGV4cGVuc2UsIGJ1dCBvdWdodCBieSBtZWFucyBvZiBoaXMgb3duIHJlc291cmNlcyB0bwogICAgICAgICAgICAgICAgICAgIHJlcGFpciB0aGUgbG9zc2VzIG9mIHRoZSBzdGF0ZSwgaWYgeW91IGFyZSB0byBoYXZlIHRoZSBzZXJ2aWNlIHdoaWNoIHlvdSBuZWVkLgogICAgICAgICAgICAgICAgICAgIEJ1dCBlYWNoIGNvbW1hbmRlciBnb2VzIG91dCBkZXRlcm1pbmVkIHRvIHB1cnN1ZSB0aGUgb3Bwb3NpdGUgY291cnNlLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgbG9zc2VzIHJlc3VsdGluZyBmcm9tIHRoZWlyIG93biBldmlsIHdheXMgYXJlIHJlcGFpcmVkIGJ5IHRoZSBkYW1hZ2VzIHdoaWNoIGZhbGwKICAgICAgICAgICAgICAgICAgICBvbiB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['51.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyBpcyBidXQgbmF0dXJhbC4gRm9yIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgc3VmZmVyZWQgdGhvc2Ugd2hvIGNob29zZSB0byBhY3QgZGlzaG9uZXN0bHksIGlmIHRoZXkgZXNjYXBlIGRpc2NvdmVyeSwgdG8ga2VlcAogICAgICAgICAgICAgICAgICAgIHdoYXQgdGhleSBoYXZlIHN0b2xlbiwgYW5kLCBldmVuIGlmIHRoZXkgYXJlIGNhdWdodCwgdG8gd2luIHBhcmRvbjsgdGhvc2UKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUgd2hvIGhhdmUgbm8gcmVnYXJkIGZvciB0aGVpciByZXB1dGF0aW9uIGhhdmUgYWNxdWlyZWQgbGljZW5jZSB0byBkbyBhcwogICAgICAgICAgICAgICAgICAgIHRoZXkgcGxlYXNlLiBNZW4gaW4gcHJpdmF0ZSBsaWZlIHdobyBsZWFybiBvbmx5IHRocm91Z2ggc3VmZmVyaW5nIHdlIGNhbGwKICAgICAgICAgICAgICAgICAgICBsYWNraW5nIGluIGZvcmVzaWdodDsgd2hhdCwgdGhlbiwgc2hvdWxkIHdlIGNhbGwgeW91LCB3aG8gYXJlIG5vdCBvbiB5b3VyIGd1YXJkCiAgICAgICAgICAgICAgICAgICAgZXZlbiBhZnRlciByZXBlYXRlZCBzdWZmZXJpbmc/IDwvdHJhbnNsYXRpb24+"
translation['51.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgcmlnaHQgdGhhdCBJIHNob3VsZCBzYXkgc29tZXRoaW5nIGFib3V0IHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIGhhdmUgc3Bva2VuIGFzIHRoZWlyIGFkdm9jYXRlcy4gQ2VydGFpbiBwZW9wbGUgYXJlIHNvIGNvbnZpbmNlZCB0aGF0IHRoZXkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHRoZSByaWdodCB0byBkbyBvciBzYXkgd2hhdGV2ZXIgdGhleSBwbGVhc2UgYmVmb3JlIHlvdSwgdGhhdCBzb21lIG9mIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIGpvaW5lZCB3aXRoIEFyaXN0b3Bob248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgdGhlIGNlbGVicmF0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgQXJpc3RvcGhvbiBvZiBBemVuaWEsIHdobyBpcyBzdGF0ZWQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2hpbi4gMy4xOTQiIHZhbGlkPSJ5ZXMiPkFlc2NoaW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjE5NDwvYmlibD4gdG8gaGF2ZSBhdmVycmVkIHRoYXQgaGUgaGFkIGJlZW4gYWNxdWl0dGVkIHNldmVudHktZml2ZQogICAgICAgICAgICAgICAgICAgICAgICB0aW1lcyBvbiB0aGUgY2hhcmdlIG9mIGludHJvZHVjaW5nIGJpbGxzIHRoYXQgd2VyZSBpbGxlZ2FsLjwvbm90ZT4gaW4KICAgICAgICAgICAgICAgICAgICBwcmVmZXJyaW5nIGhpcyBjaGFyZ2VzLCBhbmQgd2VyZSBiaXR0ZXIgYWdhaW5zdCB0aG9zZSB3aG8gbGV0IG91dCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRyaWVyYXJjaGllcywgbm93IGJpZCB5b3UgdG8gY3Jvd24gdGhlc2UgcGVvcGxlIGhlcmU7IGFuZCB0aGV5IHByb3ZlIG9uZSBvciB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBvZiB0d28gdGhpbmdzIGFnYWluc3QgdGhlbXNlbHZlcy4gRWl0aGVyIGluIHRoZSBmb3JtZXIgaW5zdGFuY2UgdGhleQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgZm9yd2FyZCBjaGFyZ2VzIHRoYXQgd2VyZSBiYXNlbGVzcywgb3IgdGhleSBoYXZlIG5vdyBiZWVuIGJyaWJlZCB0bwogICAgICAgICAgICAgICAgICAgIHBsZWFkIHRoZSBjYXVzZSBvZiBteSBvcHBvbmVudHM7IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMTk0IiB2YWxpZD0ieWVzIj5BZXNjaGluLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMy4xOTQ8L2JpYmw+IHRvIGhhdmUgYXZlcnJlZCB0aGF0IGhlIGhhZCBiZWVuIGFjcXVpdHRlZCBzZXZlbnR5LWZpdmUKICAgICAgICAgICAgICAgICAgICAgICAgdGltZXMgb24gdGhlIGNoYXJnZSBvZiBpbnRyb2R1Y2luZyBiaWxscyB0aGF0IHdlcmUgaWxsZWdhbC48L3RyYW5zbGF0aW9uPg=="
translation['51.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhleSBiaWQKICAgICAgICAgICAgICAgICAgICB5b3UgZ3JhbnQgdGhlbSBhIGZhdm9yLCBhcyBpZiB0aGUgYXJndW1lbnQgd2VyZSBhYm91dCBhIGdpZnQgaW5zdGVhZCBvZiBhIHByaXplLAogICAgICAgICAgICAgICAgICAgIG9yIGFzIGlmIHlvdSwgYXQgdGhlIGluc3RhbmNlIG9mIG1lbiBsaWtlIHRoZW0sIHdlcmUgc2Vla2luZyB0byB3aW4gdGhlIGZhdm9yIG9mCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIG5lZ2xlY3QgeW91ciBpbnRlcmVzdHMsIGFuZCBhcyBpZiBpdCB3ZXJlIG5vdCByYXRoZXIgeW91ciBkdXR5LCBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZSBvZiBiZXR0ZXIgbWVuLCB0byBzaG93IGZhdm9yIHRvIHRob3NlIHdobyBzZXJ2ZSB5b3UgYXMgdGhleSBzaG91bGQuCiAgICAgICAgICAgICAgICAgICAgVGhlbiBhZ2FpbiwgdGhleSBjYXJlIHNvIGxpdHRsZSBmb3IgYSBnb29kIHJlcHV0YXRpb24sIGFuZCBhcmUgc28gdGhvcm91Z2hseSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBvcGluaW9uIHRoYXQgZXZlcnl0aGluZyBpcyBvZiBzZWNvbmRhcnkgaW1wb3J0YW5jZSBjb21wYXJlZCB3aXRoIGdhaW4sIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IG5vdCBvbmx5IGhhdmUgdGhlIGF1ZGFjaXR5IHRvIGNvbnRyYWRpY3QgaW4gdGhlaXIgcHVibGljIHNwZWVjaGVzIHdoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIHNhaWQgYmVmb3JlLCBidXQgZXZlbiBub3cgdGhlaXIgc3RhdGVtZW50cyBkbyBub3QgYWdyZWU7IGZvciB0aGV5IGFzc2VydCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHRyaXJlbWUgd2hpY2ggaXMgdG8gd2luIHRoZSBjcm93biBzaG91bGQgaGF2ZSBpdHMgcHJvcGVyIGNyZXcgb24gYm9hcmQsIHlldAogICAgICAgICAgICAgICAgICAgIHRoZXkgYmlkIHlvdSBjcm93biB0aGUgdHJpZXJhcmNocyB3aG8gaGF2ZSBsZXQgdGhlaXIgc2VydmljZSBkZXZvbHZlIHVwb24KICAgICAgICAgICAgICAgICAgICBvdGhlcnMuIDwvdHJhbnNsYXRpb24+"
translation['51.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhleSBzdGF0ZSB0aGF0IG5vIG9uZSBnb3QgaGlzCiAgICAgICAgICAgICAgICAgICAgc2hpcCBpbiByZWFkaW5lc3MgYmVmb3JlIG15IG9wcG9uZW50cyBkaWQsIHlldCB0aGV5IGJpZCB5b3UgY3Jvd24gdXMgam9pbnRseSwKICAgICAgICAgICAgICAgICAgICB3aGljaCBpcyBub3Qgd2hhdCB0aGUgZGVjcmVlIG9yZGVycy4gSSBhbSBhcyBmYXIgZnJvbSBncmFudGluZyB0aGlzIGFzIEkgYW0gZnJvbQogICAgICAgICAgICAgICAgICAgIGhhdmluZyBsZXQgb3V0IG15IHRyaWVyYXJjaHk7IEkgd291bGQgbm90IHN1Ym1pdCB0byB0aGUgb25lLCBub3IgaGF2ZSBJIGRvbmUgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIuIFRoZXkgcHJldGVuZCB0byBiZSBwbGVhZGluZyBpbiB0aGUgaW50ZXJlc3RzIG9mIGp1c3RpY2UsIGJ1dCB0aGV5IHNob3cKICAgICAgICAgICAgICAgICAgICBtb3JlIHplYWwgdGhhbiBhbnkgb25lIG9mIHlvdSB3b3VsZCBkbyB3aXRob3V0IHJld2FyZCwgYXMgdGhvdWdoIHRoZWlyIGR1dHkgd2FzCiAgICAgICAgICAgICAgICAgICAgdG8gZWFybiB0aGVpciBwYXksIG5vdCB0byBnaXZlIGFuIG9waW5pb24uIDwvdHJhbnNsYXRpb24+"
translation['51.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICB0aGVuLCBhcyBpZiB0aGV5IHdlcmUgbm90IG1lbWJlcnMgb2YgYSBmcmVlIHN0YXRlLCBpbiB3aGljaCBiZWNhdXNlIG9mIHRoaXMgZmFjdAogICAgICAgICAgICAgICAgICAgIGFueW9uZSB3aG8gY2hvb3NlcyBoYXMgdGhlIHJpZ2h0IHRvIHNwZWFrLCBidXQgYXMgaWYgdGhleSBwb3NzZXNzZWQgdGhpcyByaWdodAogICAgICAgICAgICAgICAgICAgIGFzIGEgc29ydCBvZiBzYWNyZWQgcHJlcm9nYXRpdmUgb2YgdGhlaXIgb3duLCBpZiBhbnkgbWFuIHNwZWFrcyBpbiB5b3VyIG1pZHN0IGluCiAgICAgICAgICAgICAgICAgICAgZGVmZW5jZSBvZiB3aGF0IGlzIHJpZ2h0LCB0aGV5IGZlZWwgdGhlbXNlbHZlcyBncm9zc2x5IHdyb25nZWQsIGFuZCBzYXkgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGlzIGFuIGltcHVkZW50IGZlbGxvdy4gQW5kIHRoZXkgaGF2ZSBnb25lIHNvIGZhciBpbiB0aGVpciBzZW5zZWxlc3MgZm9sbHksIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IHRoaW5rIHRoYXQsIGlmIHRoZXkgY2FsbCBhIG1hbiBpbXB1ZGVudCB3aG8gaGFzIHNwb2tlbiBidXQgb25jZSwgdGhleSB3aWxsCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBiZSB0aG91Z2h0IGdvb2QgYW5kIHdvcnRoeSBtZW4gYWxsIHRoZWlyIGxpdmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['51.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgaXQgaXMgYmVjYXVzZSBvZiB0aGUgcHVibGljIHNwZWVjaGVzIG9mIHRoZXNlIG1lbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgbWFueSBtYXR0ZXJzIGFyZSBnb2luZyBmcm9tIGJhZCB0byB3b3JzZSwgd2hpbGUgaXQgaXMgb3dpbmcgdG8gdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgaG9uZXN0bHkgb3Bwb3NlIHRoZW0gdGhhdCBub3QgZXZlcnl0aGluZyBpcyBsb3N0LiBTdWNoIGFyZSB0aGUgcGxlYWRlcnMsIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgdGhhdCBteSBvcHBvbmVudHMgaGF2ZSBlbmdhZ2VkIHRvIHNwZWFrIG9uIHRoZWlyIGJlaGFsZiwgYW5kIHNvIHJlYWRpbHkgb3BlbiB0bwogICAgICAgICAgICAgICAgICAgIGF0dGFjayBhcmUgdGhleSB0aGVtc2VsdmVzIGZvciBhbnkgd2hvIHdpc2ggdG8gc3BlYWsgYW55IGlsbCBvZiB0aGVtCiAgICAgICAgICAgICAgICAgICAg77yIYXMgdGhleSB3ZWxsIGtub3fvvIk7IHlldCB0aGV5IGhhdmUgc2VlbiBmaXQgdG8gY29udGVzdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgbWF0dGVyLCBhbmQgdGhleSBoYXZlIGhhZCB0aGUgYXVkYWNpdHkgdG8gc3BlYWsgaWxsIG9mIGFub3RoZXIsIHdoZW4gdGhleSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gd2VsbCBjb250ZW50IHRvIGtlZXAgb3V0IG9mIHRyb3VibGUgdGhlbXNlbHZlcy4gPC90cmFuc2xhdGlvbj4="
translation['51.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIHRoZSB3cm9uZ2RvaW5nIGFuZAogICAgICAgICAgICAgICAgICAgIGluc29sZW5jZSBvZiB0aGVzZSBtZW4gbm9ib2R5IGlzIG1vcmUgdG8gYmxhbWUgdGhhbiB5b3Vyc2VsdmVzOyBmb3IgeW91IGlucXVpcmUKICAgICAgICAgICAgICAgICAgICB3aGF0IHRoZSBjaGFyYWN0ZXIgb2YgZXZlcnkgbWFuIGlzIGZyb20gdGhlIHNwZWFrZXJzIHdobyB5b3Uga25vdyBhcmUgZG9pbmcgd2hhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgZG8gZm9yIHBheTsgeW91IGRvIG5vdCBpbnZlc3RpZ2F0ZSBmb3IgeW91cnNlbHZlcy4gWWV0IGlzIGl0IG5vdCBhYnN1cmQgZm9yCiAgICAgICAgICAgICAgICAgICAgeW91IHRvIGNvbnNpZGVyIHRoZXNlIG9yYXRvcnMgdGhlbXNlbHZlcyB0aGUgYmFzZXN0IG9mIHlvdXIgY2l0aXplbnMsIGJ1dCB0bwogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCB0aG9zZSB3aG9tIHRoZXkgcHJhaXNlIGFzIHdvcnRoeSBtZW4/IDwvdHJhbnNsYXRpb24+"
translation['51.22'] = ""
translation['52.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVyZSBpcyBubwogICAgICAgICAgICAgICAgICAgIHNpdHVhdGlvbiBoYXJkZXIgdG8gZGVhbCB3aXRoLCBtZW4gb2YgdGhlIGp1cnksIHRoYW4gd2hlbiBhIG1hbiBwb3NzZXNzaW5nIGJvdGgKICAgICAgICAgICAgICAgICAgICByZXB1dGF0aW9uIGFuZCBhYmlsaXR5IHRvIHNwZWFrIGlzIGF1ZGFjaW91cyBlbm91Z2ggdG8gbGllIGFuZCBpcyB3ZWxsIHByb3ZpZGVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCB3aXRuZXNzZXMuIEZvciBpdCBiZWNvbWVzIG5lY2Vzc2FyeSBmb3IgdGhlIGRlZmVuZGFudCwgbm8gbG9uZ2VyIHRvIHNwZWFrCiAgICAgICAgICAgICAgICAgICAgbWVyZWx5IGFib3V0IHRoZSBmYWN0cyBvZiB0aGUgY2FzZSwgYnV0IGFib3V0IHRoZSBjaGFyYWN0ZXIgb2YgdGhlIHNwZWFrZXIgYXMKICAgICAgICAgICAgICAgICAgICB3ZWxsLCBhbmQgdG8gc2hvdyB0aGF0IGhlIG91Z2h0IG5vdCB0byBiZSBiZWxpZXZlZCBvbiBhY2NvdW50IG9mIGhpcyByZXB1dGF0aW9uLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['52.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPklmIHlvdSBhcmUgdG8gZXN0YWJsaXNoIHRoZSBjdXN0b20sIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gYXJlIGFibGUgc3BlYWtlcnMgYW5kIHdobyBlbmpveSBhIHJlcHV0YXRpb24gYXJlIG1vcmUgdG8gYmUgYmVsaWV2ZWQKICAgICAgICAgICAgICAgICAgICB0aGFuIG1lbiBvZiBsZXNzIGFiaWxpdHksIGl0IHdpbGwgYmUgYWdhaW5zdCB5b3Vyc2VsdmVzIHRoYXQgeW91IHdpbGwgaGF2ZQogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGVkIHRoaXMgY3VzdG9tLiBJIGJlZyB5b3UgdGhlcmVmb3JlLCBpZiB5b3UgZXZlciBkZWNpZGVkIGFueSBvdGhlciBjYXNlCiAgICAgICAgICAgICAgICAgICAgdXBvbiBpdHMgbWVyaXRzLCB3aXRob3V0IGJlY29taW5nIHBhcnRpc2FucyBvZiBlaXRoZXIgc2lkZSwgd2hldGhlciB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFpbnRpZmYncyBvciB0aGUgZGVmZW5kYW50J3MsIGJ1dCBsb29raW5nIHRvIGp1c3RpY2UgYWxvbmUsIHRvIGRlY2lkZSB0aGUKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IGNhc2UgdXBvbiB0aGVzZSBwcmluY2lwbGVzLiBBbmQgSSBzaGFsbCBzZXQgZm9ydGggdGhlIGZhY3RzIHRvIHlvdSBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIGJlZ2lubmluZy4gPC90cmFuc2xhdGlvbj4="
translation['52.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5MeWNvbiwgdGhlIEhlcmFjbGVvdGUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE4NzY5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTg3NjkiPkhlcmFjbGVhPC9wbGFjZU5hbWU+LCBhIGNvbG9ueSBvZiB0aGUgTWVnYXJpYW5zIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBCb2VvdGlhbnMgb24gdGhlIGNvYXN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjA4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MDgiPkJpdGh5bmlhPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICBvbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjYxOSI+QmxhY2sgU2VhPC9wbGFjZU5hbWU+Ljwvbm90ZT4gbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIG9mIHdob20gdGhlIHBsYWludGlmZiBoaW1zZWxmIG1ha2VzIG1lbnRpb24sIHdhcyBhIGN1c3RvbWVyIG9mIG15IGZhdGhlcidzCiAgICAgICAgICAgICAgICAgICAgYmFuayBsaWtlIHRoZSBvdGhlciBtZXJjaGFudHMsIGEgZ3Vlc3QgZnJpZW5kIG9mIEFyaXN0b25vw7xzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIERlY2VsZWE8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxODc2OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE4NzY5Ij5IZXJhY2xlYTwvcGxhY2VOYW1lPiwgYSBjb2xvbnkgb2YgdGhlIE1lZ2FyaWFucyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgQm9lb3RpYW5zIG9uIHRoZSBjb2FzdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYwOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NjA4Ij5CaXRoeW5pYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgb24gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjE5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MTkiPkJsYWNrIFNlYTwvcGxhY2VOYW1lPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RGVjZWxlYSwgYSBkZW1lIG9mIHRoZSB0cmliZQogICAgICAgICAgICAgICAgICAgICAgICBIaXBwb3Rob250aXMuPC9ub3RlPiBhbmQgQXJjaGViaWFkZXMgb2YgTGFtcHRyYWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxhbXB0cmFlLCBhIGRlbWUgb2YgdGhlIHRyaWJlIEVyZWN0aGXDr3MuPC9ub3RlPiBhbmQKICAgICAgICAgICAgICAgICAgICBhIG1hbiBvZiBwcnVkZW5jZS4gVGhpcyBMeWNvbiwgd2hlbiBoZSB3YXMgYWJvdXQgdG8gc2V0IG91dCBvbiBhIHZveWFnZSB0bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE3MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTcyIj5MaWJ5YTwvcGxhY2VOYW1lPiwgcmVja29uZWQgdXAgaGlzIGFjY291bnQgd2l0aAogICAgICAgICAgICAgICAgICAgIG15IGZhdGhlciBpbiB0aGUgcHJlc2VuY2Ugb2YgQXJjaGViaWFkZXMgYW5kIFBocmFzaWFzLCBhbmQgb3JkZXJlZCBteSBmYXRoZXIgdG8KICAgICAgICAgICAgICAgICAgICBwYXkgdGhlIG1vbmV5IHdoaWNoIGhlIGxlZnQg77yIaXQgd2FzIHNpeHRlZW4gbWluYWUgZm9ydHkgZHJhY2htYWUsIGFzIEkKICAgICAgICAgICAgICAgICAgICBzaGFsbCBzaG93IHlvdSB2ZXJ5IGNsZWFybHnvvIkgdG8gQ2VwaGlzaWFkZXMsIHNheWluZyB0aGF0IHRoaXMKICAgICAgICAgICAgICAgICAgICBDZXBoaXNpYWRlcyB3YXMgYSBwYXJ0bmVyIG9mIGhpcywgYSByZXNpZGVudCBvZiBTY3lyb3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNjeXJvcywgYW4gaXNsYW5kIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc1Ij5BZWdlYW48L3BsYWNlTmFtZT4sIGVhc3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+Ljwvbm90ZT4gYnV0IHdhcyBmb3IgdGhlIHRpbWUgYmVpbmcgYWJyb2FkIG9uIGFub3RoZXIKICAgICAgICAgICAgICAgICAgICBtZXJjYW50aWxlIGVudGVycHJpc2UuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzUiPkFlZ2VhbjwvcGxhY2VOYW1lPiwgZWFzdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4uPC90cmFuc2xhdGlvbj4="
translation['52.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGluc3RydWN0ZWQKICAgICAgICAgICAgICAgICAgICBBcmNoZWJpYWRlcyBhbmQgUGhyYXNpYXMgdG8gcG9pbnQgaGltIG91dCBhbmQgaW50cm9kdWNlIGhpbSB0byBteSBmYXRoZXIsIHdoZW4KICAgICAgICAgICAgICAgICAgICBoZSBzaG91bGQgcmV0dXJuIGZyb20gaGlzIGpvdXJuZXkuIEl0IGlzIHRoZSBjdXN0b20gb2YgYWxsIGJhbmtlcnMsIHdoZW4gYQogICAgICAgICAgICAgICAgICAgIHByaXZhdGUgcGVyc29uIGRlcG9zaXRzIG1vbmV5IGFuZCBkaXJlY3RzIHRoYXQgaXQgYmUgcGFpZCB0byBhIGdpdmVuIHBlcnNvbiwgdG8KICAgICAgICAgICAgICAgICAgICB3cml0ZSBkb3duIGZpcnN0IHRoZSBuYW1lIG9mIHRoZSBwZXJzb24gbWFraW5nIHRoZSBkZXBvc2l0IGFuZCB0aGUgYW1vdW50CiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGVkLCBhbmQgdGhlbiB0byB3cml0ZSBvbiB0aGUgbWFyZ2luIOKAnHRvIGJlIHBhaWQgdG8KICAgICAgICAgICAgICAgICAgICBzby1hbmQtc2/igJ07IGFuZCBpZiB0aGV5IGtub3cgdGhlIGZhY2Ugb2YgdGhlIHBlcnNvbiB0byB3aG9tIHBheW1lbnQgaXMKICAgICAgICAgICAgICAgICAgICB0byBiZSBtYWRlLCB0aGV5IGRvIG1lcmVseSB0aGlzLCB3cml0ZSBkb3duIHdob20gdGhleSBhcmUgdG8gcGF5OyBidXQsIGlmIHRoZXkKICAgICAgICAgICAgICAgICAgICBkbyBub3Qga25vdyBpdCwgaXQgaXMgdGhlaXIgY3VzdG9tIHRvIHdyaXRlIG9uIHRoZSBtYXJnaW4gdGhlIG5hbWUgYWxzbyBvZiBoaW0KICAgICAgICAgICAgICAgICAgICB3aG8gaXMgdG8gaW50cm9kdWNlIGFuZCBwb2ludCBvdXQgdGhlIHBlcnNvbiB3aG8gaXMgdG8gcmVjZWl2ZSB0aGUgbW9uZXkuIEZvciBhCiAgICAgICAgICAgICAgICAgICAgZ3JpZXZvdXMgbWlzZm9ydHVuZSBiZWZlbGwgdGhpcyBMeWNvbi4gPC90cmFuc2xhdGlvbj4="
translation['52.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vCiAgICAgICAgICAgICAgICAgICAgc29vbmVyIGhhZCBoZSBzZXQgb3V0LCBhbmQgd2FzIHNhaWxpbmcgYXJvdW5kIHRoZSBBcmdvbGljIGd1bGYsIHRoYW4gaGlzIHNoaXAKICAgICAgICAgICAgICAgICAgICB3YXMgY2FwdHVyZWQgYnkgcGlyYXRlIHZlc3NlbHMgYW5kIGhpcyBnb29kcyB0YWtlbiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFyZ29zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcmdvcyI+QXJnb3M8L3BsYWNlTmFtZT4sIHdoaWxlIGhlIGhpbXNlbGYgd2FzIHNob3QgZG93biBieSBhbgogICAgICAgICAgICAgICAgICAgIGFycm93LCBhbmQgbWV0IGhpcyBkZWF0aC4gSW1tZWRpYXRlbHkgYWZ0ZXIgdGhpcyBtaXNjaGFuY2UgdGhpcyBtYW4gQ2FsbGlwcHVzCiAgICAgICAgICAgICAgICAgICAgY2FtZSB0byB0aGUgYmFuaywgYW5kIGFza2VkIHdoZXRoZXIgdGhleSBrbmV3IEx5Y29uLCB0aGUgSGVyYWNsZW90ZS4gUGhvcm1pb24sCiAgICAgICAgICAgICAgICAgICAgd2hvIGlzIGhlcmUgcHJlc2VudCwgYW5zd2VyZWQgdGhhdCB0aGV5IGtuZXcgaGltLiDigJxXYXMgaGUgYSBjdXN0b21lcgogICAgICAgICAgICAgICAgICAgIG9mIHlvdXJzP+KAnSDigJxIZSB3YXMs4oCdIHNhaWQgUGhvcm1pb24sIOKAnGJ1dAogICAgICAgICAgICAgICAgICAgIHdoeSBkbyB5b3UgYXNrP+KAnSDigJxXaHk/4oCdIHNhaWQgaGUsIOKAnEkgd2lsbAogICAgICAgICAgICAgICAgICAgIHRlbGwgeW91LiBIZSBpcyBkZWFkLCBhbmQsIGFzIGl0IGhhcHBlbnMsIEkgYW0gcHJveGVub3M8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHByb3hlbm9zIHdhcyBzb3J0IG9mIGNvbnN1bGFyIGFnZW50LCBlbXBvd2VyZWQgdG8gYWN0IGluCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBpbnRlcmVzdCBvZiBoaXMgY291bnRyeSBhbmQgaGlzIGNvdW50cnltYW4gaW4gYSBmb3JlaWduIHN0YXRlLjwvbm90ZT4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUgSGVyYWNsZW90ZXMuIEkgZGVtYW5kIHRoZXJlZm9yZSB0aGF0IHlvdSBzaG93IG1lIHlvdXIgYm9va3MsIHRoYXQgSSBtYXkga25vdwogICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgaGUgaGFzIGxlZnQgYW55IG1vbmV5OyBmb3IgSSBtdXN0IG9mIG5lY2Vzc2l0eSBsb29rIGFmdGVyIHRoZSBhZmZhaXJzIG9mCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDgyOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODI5OSI+SGVyYWNsZWE8L3BsYWNlTmFtZT4u4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['52.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9uIGhlYXJpbmcgdGhpcywgbWVuIG9mIHRoZSBqdXJ5LCBQaG9ybWlvbgogICAgICAgICAgICAgICAgICAgIGltbWVkaWF0ZWx5IHNob3dlZCBoaW0gdGhlIGJvb2tzLCBhbmQsIHdoZW4gaGUgaGFkIGRvbmUgc28sIGFuZCBDYWxsaXBwdXMKICAgICAgICAgICAgICAgICAgICDvvIhpdCB3YXMgaGUgaGltc2VsZiwgYW5kIG5vdCBhbm90aGVy77yJIGhhZCByZWFkIHRoZW0sIGFuZCBoYWQKICAgICAgICAgICAgICAgICAgICBzZWVuIGluIHRoZW0gdGhlIGVudHJ5LCDigJxMeWNvbiwgdGhlIEhlcmFjbGVvdGUsIHNpeHRlZW4gaHVuZHJlZCBhbmQKICAgICAgICAgICAgICAgICAgICBmb3J0eSBkcmFjaG1hZSwgdG8gYmUgcGFpZCB0byBDZXBoaXNpYWRlczsgQXJjaGViaWFkZXMgb2YgTGFtcHRyYWUgd2lsbCBpZGVudGlmeQogICAgICAgICAgICAgICAgICAgIENlcGhpc2lhZGVzLOKAnSBoZSB3ZW50IG9mZiBpbiBzaWxlbmNlIGFuZCBmb3IgbW9yZSB0aGFuIGZpdmUgbW9udGhzCiAgICAgICAgICAgICAgICAgICAgbWFkZSBubyBtZW50aW9uIG9mIHRoZSBtYXR0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['52.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMKICAgICAgICAgICAgICAgICAgICBDZXBoaXNpYWRlcywgaGF2aW5nIHJldHVybmVkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgY2FtZSB0byB0aGUgYmFuayBhbmQgZGVtYW5kZWQgdGhlIG1vbmV5LCBhbmQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2Ugb2YgQXJjaGViaWFkZXMgYW5kIFBocmFzaWFzLCBtZW4gb2YgdGhlIGp1cnksIHRoZSBwZXJzb25zIHdob20gTHljb24KICAgICAgICAgICAgICAgICAgICBoYWQgaW50cm9kdWNlZCB0byBteSBmYXRoZXIsIGFuZCBoYWQgaGlkZGVuIHRvIGlkZW50aWZ5IENlcGhpc2lhZGVzLCB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHJldHVybiBhbmQgaW4gdGhlIHByZXNlbmNlIG9mIG90aGVyIHdpdG5lc3NlcyBhbHNvLCBQaG9ybWlvbiwgd2hvIGlzIGhlcmUKICAgICAgICAgICAgICAgICAgICBpbiBjb3VydCwgY291bnRlZCBvdXQgYW5kIHBhaWQgaGltIHRoZSBzaXh0ZWVuIG1pbmFlIGZvcnR5IGRyYWNobWFlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoLCB0aGUgY2xlcmsgc2hhbGwKICAgICAgICAgICAgICAgICAgICByZWFkIHlvdSB0aGUgZGVwb3NpdGlvbnMgd2hpY2ggYmVhciB1cG9uIGFsbCB0aGVzZSBmYWN0cy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['52.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGF0IGFsbCBJIGhhdmUKICAgICAgICAgICAgICAgICAgICB0b2xkIHlvdSBpcyB0cnVlLCBtZW4gb2YgdGhlIGp1cnksIHlvdSBoYXZlIGxlYXJuZWQgZnJvbSB0aGUgZGVwb3NpdGlvbnMuCiAgICAgICAgICAgICAgICAgICAgSG93ZXZlciwgYSBsb25nIHRpbWUgYWZ0ZXIgdGhpcywgdGhlIHBsYWludGlmZiBDYWxsaXBwdXMgY2FtZSB1cCB0byBteSBmYXRoZXIgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgY2l0eSwgYW5kIGFza2VkIGhpbSBpZiBDZXBoaXNpYWRlcywgdG8gd2hvbSBhY2NvcmRpbmcgdG8gdGhlIGVudHJ5IGluIHRoZQogICAgICAgICAgICAgICAgICAgIGJvb2sgdGhlIG1vbmV5IGxlZnQgYnkgTHljb24gdGhlIEhlcmFjbGVvdGUgd2FzIHRvIGJlIHBhaWQsIGhhZCByZXR1cm5lZCB0bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uIE9uIG15IGZhdGhlcidzIHJlcGx5aW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSB0aG91Z2h0IHNvLCBidXQsIGlmIGhlIHdhbnRlZCB0byBnbyBkb3duIHRvIHRoZSBQZWlyYWV1cywgaGUgd291bGQgZmluZAogICAgICAgICAgICAgICAgICAgIG91dCB0aGUgdHJ1dGgsIENhbGxpcHB1cyBzYWlkIHRvIGhpbSwg4oCcRG8geW91IGtub3csIFBhc2lvbiwgd2hhdCBpdCBpcwogICAgICAgICAgICAgICAgICAgIHRoYXQgSSBhbSBhc2tpbmcgeW91P+KAneKAlCA8L3RyYW5zbGF0aW9uPg=="
translation['52.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPu+8iGFuZCBieSBaZXVzIGFuZCBBcG9sbG8gYW5kIERlbWV0ZXIsIEkgc2hhbGwgbWFrZSBubyBmYWxzZSBzdGF0ZW1lbnQKICAgICAgICAgICAgICAgICAgICB0byB5b3UsIG1lbiBvZiB0aGUganVyeSwgYnV0IHNoYWxsIHJlbGF0ZSB0byB5b3Ugd2hhdCBJIGhlYXJkIGZyb20gbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXLvvInigJTigJxZb3UgaGF2ZSBhIGNoYW5jZSzigJ0gaGUKICAgICAgICAgICAgICAgICAgICBjb250aW51ZWQsIOKAnHRvIGRvIGEgZ29vZCB0dXJuIHRvIG1lLCBhbmQgbm8gaGFybSB0byB5b3Vyc2VsZi4gSXQKICAgICAgICAgICAgICAgICAgICBoYXBwZW5zIHRoYXQgSSBhbSBwcm94ZW5vcyBvZiB0aGUgSGVyYWNsZW90ZXMsIGFuZCB5b3Ugd291bGQgYmUgZ2xhZCwgSSBzaG91bGQKICAgICAgICAgICAgICAgICAgICB0aGluaywgdG8gaGF2ZSBtZSBnZXQgdGhlIG1vbmV5IHJhdGhlciB0aGFuIGFuIGFsaWVuIHdobyByZXNpZGVzIGluIFNjeXJvcywgYW5kCiAgICAgICAgICAgICAgICAgICAgaXMgYSBtYW4gb2Ygbm8gYWNjb3VudC4gTWF0dGVycyBoYXZlIHR1cm5lZCBvdXQgbGlrZSB0aGlzLiBMeWNvbiB3YXMgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLCBhbmQgaGFzIGxlZnQsIGFzIEkgYW0gaW5mb3JtZWQsIG5vIGhlaXIgaW4gaGlzIGhvdXNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['52.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3JlIHRoYW4gdGhpcywgd2hlbiBoZSB3YXMgYnJvdWdodCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFyZ29zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcmdvcyI+QXJnb3M8L3BsYWNlTmFtZT4sIHdvdW5kZWQsIGhlIGdhdmUgdG8gU3RyYW1tZW51cywgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw1MDAxOTkzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDUwMDE5OTMiPkFyZ2l2ZTwvcGxhY2VOYW1lPiBwcm94ZW5vcyBvZiB0aGUgSGVyYWNsZW90ZXMsCiAgICAgICAgICAgICAgICAgICAgdGhlIHByb3BlcnR5IHdoaWNoIHdhcyBicm91Z2h0IGluIHdpdGggaGltLiBJLCB0aGVyZWZvcmUsIGFtIGxpa2V3aXNlIGluIGEKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiB0byBjbGFpbSB0aGUgbW9uZXkgdGhhdCBpcyBoZXJlOyBmb3IgSSB0aGluayBpdCBpcyByaWdodCB0aGF0IEkgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBpdC4gRG8geW91LCB0aGVyZWZvcmUsIGlmIENlcGhpc2lhZGVzIGhhcyBub3QgcmVjb3ZlcmVkIGl0LCBzYXksIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGNvbWUgaGVyZSwgdGhhdCBJIGRpc3B1dGUgaGlzIGNsYWltOyBhbmQgaWYgaGUgaGFzIHJlY292ZXJlZCBpdCwgc2F5IHRoYXQKICAgICAgICAgICAgICAgICAgICBJIGNhbWUgd2l0aCB3aXRuZXNzZXMgYW5kIGRlbWFuZGVkIHRoYXQgdGhlIG1vbmV5IGJlIHByb2R1Y2VkLCBvciB0aGUgcGVyc29uIHdobwogICAgICAgICAgICAgICAgICAgIGhhcyByZWNlaXZlZCBpdDsgYW5kLCBpZiBhbnlvbmUgdHJpZXMgdG8gZGVmcmF1ZCBtZSwgbGV0IGhpbSBrbm93IHRoYXQgaGUgaXMKICAgICAgICAgICAgICAgICAgICBkZWZyYXVkaW5nIGEgcHJveGVub3Mu4oCdIDwvdHJhbnNsYXRpb24+"
translation['52.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBzcG9rZW4gdGh1cywgbXkgZmF0aGVyIGFuc3dlcmVkLCDigJxDYWxsaXBwdXMsIEkgd2FudCB0byBvYmxpZ2UgeW91CiAgICAgICAgICAgICAgICAgICAg77yISSBzaG91bGQgYmUgbWFkLCBpZiBJIGRpZCBub3TvvIksIGJ1dCBvbiB0aGlzIGNvbmRpdGlvbiwgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgbm90IGRhbWFnZSBteSBvd24gcmVwdXRhdGlvbiwgbm9yIHN1ZmZlciBhbnkgbG9zcyB0aHJvdWdoIHRoZSBidXNpbmVzczsgdG8KICAgICAgICAgICAgICAgICAgICBzdWdnZXN0IHdoYXQgeW91IHByb3Bvc2UgdG8gQXJjaGViaWFkZXMgYW5kIEFyaXN0b25vw7xzIGFuZCB0bwogICAgICAgICAgICAgICAgICAgIENlcGhpc2lhZGVzIGhpbXNlbGYsIGNhbiBjYXVzZSBtZSBubyB0cm91YmxlOyBidXQgaWYgdGhleSBkbyBub3QgY2hvb3NlIHRvIGRvIGFzCiAgICAgICAgICAgICAgICAgICAgeW91IHNheSBhdCBteSBzdWdnZXN0aW9uLCB5b3UgbXVzdCB0YWxrIHRvIHRoZW0geW91cnNlbGYu4oCdCiAgICAgICAgICAgICAgICAgICAg4oCcQmUgZWFzeSBpbiB5b3VyIG1pbmQsIFBhc2lvbizigJ0gc2FpZCBoZTsg4oCcaWYgeW91CiAgICAgICAgICAgICAgICAgICAgbGlrZSwgeW91IHdpbGwgZm9yY2UgdGhlbSB0byBkbyB3aGF0IEkgd2FudC7igJ0gPC90cmFuc2xhdGlvbj4="
translation['52.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcywgbWVuIG9mIHRoZSBqdXJ5LCBpcwogICAgICAgICAgICAgICAgICAgIHdoYXQgdGhlIHBsYWludGlmZiBzYWlkIHRvIG15IGZhdGhlciwgYW5kIHdoYXQgbXkgZmF0aGVyIHJlcGVhdGVkIHRvIEFyY2hlYmlhZGVzCiAgICAgICAgICAgICAgICAgICAgYW5kIENlcGhpc2lhZGVzIGF0IHRoZSBwbGFpbnRpZmYncyByZXF1ZXN0IGFuZCBhcyBhIGZhdm9yIHRvIGhpbTsgYW5kIGZyb20gdGhpcywKICAgICAgICAgICAgICAgICAgICBsaXR0bGUgYnkgbGl0dGxlLCB0aGlzIHN1aXQgaGFzIGJlZW4gZ290IHVwLiBJIHdhcyByZWFkeSB0byBzd2VhciBieSB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHNvbGVtbiBvZiBvYXRocywgdGhhdCBJIHZlcmlseSBoZWFyZCB0aGVzZSBzdGF0ZW1lbnRzIGZyb20gbXkgZmF0aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['52.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGxhaW50aWZmLCBob3dldmVyLCB3aG8gZGVtYW5kcyB0aGF0IHlvdSBiZWxpZXZlCiAgICAgICAgICAgICAgICAgICAgaGltIGFzIG9uZSBzcGVha2luZyB0aGUgdHJ1dGgsIHdhaXRlZCBmb3IgdGhyZWUgeWVhcnMgYWZ0ZXIgbXkgZmF0aGVyIGhhZCBzcG9rZW4KICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIGZpcnN0IHRpbWUgdG8gQXJjaGViaWFkZXMgYW5kIHRoZSBvdGhlciBmcmllbmRzIG9mIENlcGhpc2lhZGVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBhZnRlciB0aGV5IGhhZCByZWZ1c2VkIHRvIHBheSBhbnkgYXR0ZW50aW9uIHRvIENhbGxpcHB1cyBvciB0byB3aGF0IGhlIHNhaWQ7CiAgICAgICAgICAgICAgICAgICAgdGhlbiwgd2hlbiBoZSBsZWFybmVkIHRoYXQgbXkgZmF0aGVyIHdhcyBpbiBwb29yIGhlYWx0aCwgYW5kIGhhZCBkaWZmaWN1bHR5IGluCiAgICAgICAgICAgICAgICAgICAgY29taW5nIHVwIHRvIHRoZSBjaXR5LCBhbmQgdGhhdCBoaXMgc2lnaHQgd2FzIGZhaWxpbmcsIDwvdHJhbnNsYXRpb24+"
translation['52.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5oZSBicm91Z2h0IGFuIGFjdGlvbiBhZ2FpbnN0IGhpbSwgbm90IGluZGVlZCBhbiBhY3Rpb24gZm9yCiAgICAgICAgICAgICAgICAgICAgbW9uZXksIGxpa2UgdGhlIHByZXNlbnQgb25lLCBidXQgYW4gYWN0aW9uIGZvciBkYW1hZ2VzLCBkZWNsYXJpbmcgdGhhdCBteSBmYXRoZXIKICAgICAgICAgICAgICAgICAgICBoYWQgd3JvdWdodCBoaW0gaW5qdXJ5IGJ5IHBheWluZyB0byBDZXBoaXNpYWRlcyB0aGUgbW9uZXkgd2hpY2ggTHljb24sIHRoZQogICAgICAgICAgICAgICAgICAgIEhlcmFjbGVvdGUsIGhhZCBsZWZ0IGluIGhpcyBrZWVwaW5nIGFmdGVyIGhhdmluZyBwcm9taXNlZCBub3QgdG8gcGF5IGl0IHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICB0aGUgcGxhaW50aWZmJ3MgY29uc2VudC4gQWZ0ZXIgaGUgaGFkIGJyb3VnaHQgc3VpdCwgaGUgdG9vayBiYWNrIHRoZSBwYXBlcnMgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBwdWJsaWMgYXJiaXRyYXRvciwgYW5kIGNoYWxsZW5nZWQgbXkgZmF0aGVyIHRvIHJlZmVyIHRoZSBjYXNlIHRvCiAgICAgICAgICAgICAgICAgICAgTHlzaXRoZWlkZXMsIGEgZnJpZW5kIG9mIENhbGxpcHB1cyBoaW1zZWxmIGFuZCBvZiBJc29jcmF0ZXMgYW5kIEFwaGFyZXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVzZSB3ZXJlIGRvdWJ0bGVzcyB0aGUgZmFtb3VzIG9yYXRvciBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWdpYyBwb2V0Ljwvbm90ZT4gYW5kIGFuIGFjcXVhaW50YW5jZSBvZiBteSBmYXRoZXIuIDwvdHJhbnNsYXRpb24+"
translation['52.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5NeSBmYXRoZXIgZ2F2ZSBoaXMgY29uc2VudCwgYW5kIGR1cmluZyBoaXMgbGlmZXRpbWUKICAgICAgICAgICAgICAgICAgICBMeXNpdGhlaWRlcyBkZXNwaXRlIGhpcyBpbnRpbWFjeSB3aXRoIHRoZXNlIG1lbiBkaWQgbm90IHZlbnR1cmUgdG8gY29tbWl0IGFueQogICAgICAgICAgICAgICAgICAgIHdyb25nIGFnYWluc3QgdXMuIEFuZCB5ZXQgc29tZSBvZiB0aGUgcGxhaW50aWZmJ3MgZnJpZW5kcyBhcmUgc28gbGFja2luZyBpbgogICAgICAgICAgICAgICAgICAgIHNoYW1lLCB0aGF0IHRoZXkgaGFkIHRoZSBhdWRhY2l0eSB0byBkZXBvc2UgdGhhdCBDYWxsaXBwdXMgY2hhbGxlbmdlZCBteSBmYXRoZXIKICAgICAgICAgICAgICAgICAgICB0byB0YWtlIGFuIG9hdGgsIGFuZCB0aGF0IG15IGZhdGhlciByZWZ1c2VkIHRvIHN3ZWFyIGJlZm9yZSBMeXNpdGhlaWRlczsgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhleSBpbWFnaW5lIHRoYXQgdGhleSBjYW4gY29udmluY2UgeW91IHRoYXQgaW4gdGhhdCBjYXNlIEx5c2l0aGVpZGVzLCBhIGZyaWVuZAogICAgICAgICAgICAgICAgICAgIG9mIENhbGxpcHB1cyBhbmQgdGhlIG9uZSBhY3RpbmcgYXMgYXJiaXRyYXRvciBpbiB0aGUgY2FzZSwgd291bGQgaGF2ZSByZWZyYWluZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIG1ha2luZyBhbiBpbW1lZGlhdGUgYXdhcmQgYWdhaW5zdCBteSBmYXRoZXIsIGVzcGVjaWFsbHkgc2luY2UgbXkgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgdGh1cyByZWZ1c2VkIHRvIG1ha2UgaGltc2VsZiB0aGUganVkZ2Ugb2YgaGlzIG93biBjYXNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CeSByZWZ1c2luZywgdGhhdCBpcywgdG8gdGFrZSB0aGUgb2F0aCBvbiB0aGUgYmFzaXMgb2Ygd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGF3YXJkIHdvdWxkIGhhdmUgYmVlbiBtYWRlLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['52.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBJIGFtCiAgICAgICAgICAgICAgICAgICAgdGVsbGluZyB0aGUgdHJ1dGggYW5kIHRoYXQgdGhlc2UgbWVuIGFyZSBseWluZywgaXMgcHJvdmVkLCBJIGNsYWltLCBieSB0aGUgdmVyeQogICAgICAgICAgICAgICAgICAgIGZhY3QgdGhhdCBMeXNpdGhlaWRlcyB3b3VsZCBoYXZlIG1hZGUgdGhlIGF3YXJkIGFnYWluc3QgbXkgZmF0aGVyLCBhbmQgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIG5vdyBiZSBkZWZlbmRhbnQgaW4gYW4gZWplY3RtZW50IHN1aXQsIGFuZCBub3QgaW4gYW4gYWN0aW9uIGZvciBtb25leTsKICAgICAgICAgICAgICAgICAgICBhbmQsIGJlc2lkZXMgdGhpcywgSSBzaGFsbCBicmluZyBiZWZvcmUgeW91IGFzIHdpdG5lc3NlcyB0aGUgcGVyc29ucyB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgb24gdGhlIHZhcmlvdXMgb2NjYXNpb25zIHdoZW4gSSBtZXQgdGhlIHBsYWludGlmZiBiZWZvcmUKICAgICAgICAgICAgICAgICAgICAgICAgTHlzaXRoZWlkZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['52.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBoZSBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgY2hhbGxlbmdlIG15IGZhdGhlciB0byBhbiBvYXRoIGF0IHRoYXQgdGltZSwgYnV0IG5vdyBtYWxpZ25zIGhpbSBhZnRlciBoaXMKICAgICAgICAgICAgICAgICAgICBkZWF0aCwgYW5kIGJyaW5ncyBmb3J3YXJkIGhpcyBvd24gaW50aW1hdGVzIHdobyByZWNrbGVzc2x5IGJlYXIgZmFsc2Ugd2l0bmVzcwogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgbWUsIHlvdSBjYW4gZWFzaWx5IHNlZSBmcm9tIHRoZSBjaXJjdW1zdGFudGlhbCBldmlkZW5jZSBhbmQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uLiBBbmQgdGhhdCBJIHdhcyByZWFkeSBvbiBteSBmYXRoZXIncyBiZWhhbGYgdG8gdGFrZSB0aGUgb2F0aCB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZSBsYXcgcHJlc2NyaWJlcyB3aGVuIGFuIGhlaXIgaXMgc3VlZCBpbiBjb3VydCBvbiBhIGNoYXJnZSBicm91Z2h0IGFnYWluc3Qgb25lCiAgICAgICAgICAgICAgICAgICAgd2hvIGlzIGRlYWQs4oCUIDwvdHJhbnNsYXRpb24+"
translation['52.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz50aGF0LCBuYW1lbHksIEkKICAgICAgICAgICAgICAgICAgICBiZWxpZXZlZCB0aGF0IG15IGZhdGhlciBuZXZlciBhZ3JlZWQgdG8gcGF5IHRoZSBwbGFpbnRpZmYgdGhlIG1vbmV5IHdoaWNoIEx5Y29uCiAgICAgICAgICAgICAgICAgICAgbGVmdCwgYW5kIHRoYXQgdGhlIHBsYWludGlmZiB3YXMgbm90IGludHJvZHVjZWQgdG8gbXkgZmF0aGVyIGJ5IEx5Y29uOyBhbmQKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvbiB3YXMgcmVhZHkgdG8gc3dlYXIgdGhhdCBpbiB2ZXJ5IHRydXRoIGhlIGhhZCBoaW1zZWxmIHJlY2tvbmVkIHVwIHRoZQogICAgICAgICAgICAgICAgICAgIGFtb3VudCB3aXRoIEx5Y29uIGluIHRoZSBwcmVzZW5jZSBvZiBBcmNoZWJpYWRlcywgYW5kIHRoYXQgaW5zdHJ1Y3Rpb25zIHdlcmUKICAgICAgICAgICAgICAgICAgICBnaXZlbiBoaW0gdG8gcGF5IHRoZSBtb25leSB0byBDZXBoaXNpYWRlcywgYW5kIHRoYXQgQXJjaGViaWFkZXMgaGFkIGlkZW50aWZpZWQKICAgICAgICAgICAgICAgICAgICBDZXBoaXNpYWRlcyBmb3IgaGltOyA8L3RyYW5zbGF0aW9uPg=="
translation['52.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5hbHNvIHRoYXQgd2hlbiBDYWxsaXBwdXMKICAgICAgICAgICAgICAgICAgICBjYW1lIGZvciB0aGUgZmlyc3QgdGltZSB0byB0aGUgYmFuaywgc2F5aW5nIHRoYXQgTHljb24gd2FzIGRlYWQgYW5kIHRoYXQgaGUsCiAgICAgICAgICAgICAgICAgICAgQ2FsbGlwcHVzLCBjbGFpbWVkIHRoZSByaWdodCB0byBpbnNwZWN0IHRoZSBib29rcyB0byBzZWUgd2hldGhlciB0aGUgSGVyYWNsZW90ZQogICAgICAgICAgICAgICAgICAgIGhhZCBsZWZ0IGFueSBtb25leSwgaGUsIFBob3JtaW9uLCBoYWQgYXQgb25jZSBzaG93biBoaW0gdGhlIGJvb2tzLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIENhbGxpcHB1cywgYWZ0ZXIgc2VlaW5nIHRoZSBlbnRyeSB0aGF0IHBheW1lbnQgd2FzIHRvIGJlIG1hZGUgdG8gQ2VwaGlzaWFkZXMsCiAgICAgICAgICAgICAgICAgICAgd2VudCBhd2F5IGluIHNpbGVuY2UsIHdpdGhvdXQgZmlsaW5nIGFueSBjb3VudGVyY2xhaW0gb3IgbWFraW5nIGFueSBwcm90ZXN0IHRvCiAgICAgICAgICAgICAgICAgICAgaGltIGFib3V0IHRoZSBwYXltZW50IG9mIHRoZSBtb25leeKAlGluIHByb29mIG9mIGFsbCB0aGVzZSBtYXR0ZXJzIHRoZQogICAgICAgICAgICAgICAgICAgIGNsZXJrIHNoYWxsIHJlYWQgeW91IHRoZSBkZXBvc2l0aW9ucyB3aGljaCBlc3RhYmxpc2ggYm90aCBmYWN0cywgYW5kIGFsc28gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxhdy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['52.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgSSBzaGFsbCBzaG93IHlvdSB0aGF0IEx5Y29uIGhhZCBubyBkZWFsaW5ncyB3aXRoIENhbGxpcHB1czsgZm9yIEkgdGhpbmsKICAgICAgICAgICAgICAgICAgICB0aGlzIHdpbGwgYmUgc29tZXRoaW5nIHRvIGNvbmZvdW5kIHRoZSBpbXB1ZGVudCBhc3N1cmFuY2Ugb2YgdGhpcyBtYW4sIHdobwogICAgICAgICAgICAgICAgICAgIGFzc2VydHMgdGhhdCB0aGlzIG1vbmV5IHdhcyBnaXZlbiB0byBoaW0gYnkgTHljb24gYXMgYSBwcmVzZW50LiBMeWNvbiBoYWQgbGVudAogICAgICAgICAgICAgICAgICAgIHRvIE1lZ2FjbGVpZGVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRWxldXNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRWxldXNpcyI+RWxldXNpczwvcGxhY2VOYW1lPiBhbmQgaGlzCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciBUaHJhc3lsbHVzIHRoZSBzdW0gb2YgZm9ydHkgbWluYWUgZm9yIGEgdm95YWdlIHRvIEFjw6o8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWPDqiwgYSB0b3duIG9uIHRoZSBjb2FzdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDY4NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDA0Njg3Ij5QaG9lbmljaWE8L3BsYWNlTmFtZT4uPC9ub3RlPiBidXQsIHdoZW4gdGhleSBjaGFuZ2VkCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbWluZHMgYW5kIGRlY2lkZWQgbm90IHRvIHJpc2sgdGhlIHZveWFnZSB0byB0aGF0IHBvaW50LCBMeWNvbiwgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBtYWtpbmcgc29tZSBjb21wbGFpbnRzIGFnYWluc3QgTWVnYWNsZWlkZXMgcmVnYXJkaW5nIHRoZSBpbnRlcmVzdCwgYW5kIGJlbGlldmluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGFkIGJlZW4gZGVjZWl2ZWQsIHF1YXJyZWxsZWQgd2l0aCBoaW0gYW5kIHdlbnQgdG8gbGF3IGZvciB0aGUgcHVycG9zZQogICAgICAgICAgICAgICAgICAgIG9mIHJlY292ZXJpbmcgaGlzIGxvYW4uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0Njg3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ2ODciPlBob2VuaWNpYTwvcGxhY2VOYW1lPi48L3RyYW5zbGF0aW9uPg=="
translation['52.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcHJvY2VlZGluZ3Mgd2VyZQogICAgICAgICAgICAgICAgICAgIHByb2xvbmdlZCwgYXMgc28gbGFyZ2UgYSBzdW0gd2FzIGF0IHN0YWtlLCB5ZXQgTHljb24gbmV2ZXIgYXQgYW55IHRpbWUgY2FsbGVkIGluCiAgICAgICAgICAgICAgICAgICAgQ2FsbGlwcHVzIGZvciBjb25zdWx0YXRpb247IGhlIHNvdWdodCB0aGUgYWlkIG9mIEFyY2hlYmlhZGVzIGFuZCB0aGUgZnJpZW5kcyBvZgogICAgICAgICAgICAgICAgICAgIEFyY2hlYmlhZGVzLCBhbmQgaXQgd2FzIEFyY2hlYmlhZGVzIHdobyBicm91Z2h0IGFib3V0IGEgc2V0dGxlbWVudCBiZXR3ZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZW0uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBhbSBzcGVha2luZyB0aGUgdHJ1dGgsIEkKICAgICAgICAgICAgICAgICAgICBzaGFsbCBicmluZyBiZWZvcmUgeW91IE1lZ2FjbGVpZGVzIGhpbXNlbGYgYXMgYSB3aXRuZXNzIHRvIHRoZXNlIGZhY3RzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['52.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IHNlZSwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIGhvdyBpbnRpbWF0ZSBMeWNvbiB3YXMgd2l0aCBDYWxsaXBwdXMuIEhlIG5laXRoZXIgY2FsbGVkIGhpbSBpbiBmb3IKICAgICAgICAgICAgICAgICAgICBjb25zdWx0YXRpb24gYWJvdXQgaGlzIGFmZmFpcnMsIG5vciBkaWQgaGUgZXZlciBwdXQgdXAgYXQgdGhlIGhvbWUgb2YgQ2FsbGlwcHVzCiAgICAgICAgICAgICAgICAgICAgYXMgYSBndWVzdDsgYW5kIHRoaXMgdmVyeSBmYWN0IGlzIHRoZSBvbmUgdGhpbmcgdG8gd2hpY2ggdGhlIHBsYWludGlmZidzIGZyaWVuZHMKICAgICAgICAgICAgICAgICAgICBoYXZlIG5vdCB2ZW50dXJlZCB0byBkZXBvc2UsIHRoYXQsIG5hbWVseSwgaGUgZXZlciBkaWQgcHV0IHVwIGF0IGhpcyBob3VzZTsgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhleSBrbmV3IHdlbGwgdGhhdCwgaWYgdGhleSB0b2xkIGFueSBzdWNoIGxpZSBhcyB0aGlzLCB0aGV5IHdvdWxkIGF0IG9uY2UgYmUKICAgICAgICAgICAgICAgICAgICBjb252aWN0ZWQgYnkgdGhlIHNsYXZlcyB3aGVuIHRoZXNlIHdlcmUgcHV0IHRvIHRoZSB0b3J0dXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['52.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSSB3aXNoIHRvIG1lbnRpb24gdG8geW91IGEgcGllY2Ugb2YgY2lyY3Vtc3RhbnRpYWwKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSBzbyBzdHJpa2luZywgdGhhdCBpdCB3aWxsLCBJIHRoaW5rLCBjb252aW5jZSB5b3UgdGhhdCBDYWxsaXBwdXMgaGFzCiAgICAgICAgICAgICAgICAgICAgdXR0ZXJlZCBub3RoaW5nIGJ1dCBhIHBhY2sgb2YgbGllcy4gSWYgTHljb24sIG1lbiBvZiB0aGUganVyeSwgaGFkIGJlZW4gYXMgZm9uZAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBwbGFpbnRpZmYgYW5kIGFzIGludGltYXRlIHdpdGggaGltIGFzIHRoZSBwbGFpbnRpZmYgY2xhaW1zLCBhbmQgaGFkCiAgICAgICAgICAgICAgICAgICAgd2lzaGVkIHRvIGdpdmUgaGltIHRoaXMgbW9uZXkgYXMgYSBwcmVzZW50IGluIHRoZSBldmVudCBvZiBhbnl0aGluZyBoYXBwZW5pbmcgdG8KICAgICAgICAgICAgICAgICAgICBoaW1zZWxmLCA8L3RyYW5zbGF0aW9uPg=="
translation['52.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz53b3VsZCBpdCBub3QgaGF2ZSBiZWVuIGJldHRlciB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgbGVmdCB0aGUgbW9uZXkgb3V0cmlnaHQgaW4gdGhlIGN1c3RvZHkgb2YgQ2FsbGlwcHVzLCBpbiB3aGljaCBjYXNlLCBpZiBoZQogICAgICAgICAgICAgICAgICAgIHJldHVybmVkIHNhZmUsIGhlIHdvdWxkIGhhdmUgcmVjb3ZlcmVkIGl0IGR1bHkgYW5kIGp1c3RseSBmcm9tIG9uZSB3aG8gd2FzIGhpcwogICAgICAgICAgICAgICAgICAgIGZyaWVuZCBhbmQgaGlzIHByb3hlbm9zLCBhbmQsIGlmIGFueXRoaW5nIGhhZCBoYXBwZW5lZCB0byBoaW0sIGhlIHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBnaXZlbiB0aGUgbW9uZXkgb3V0cmlnaHQgYXMgaGUgcHVycG9zZWQ/IFdvdWxkIHRoaXMsIEkgYXNrLCBub3QgaGF2ZSBiZWVuIGJldHRlcgogICAgICAgICAgICAgICAgICAgIHRoYW4gbGVhdmluZyBpdCBpbiB0aGUgYmFuaz8gRm9yIG15IHBhcnQsIEkgdGhpbmsgdGhlIGZvcm1lciBjb3Vyc2Ugd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gZmFpcmVyIGFuZCBtb3JlIGhpZ2htaW5kZWQuIEhvd2V2ZXIsIGhlIGlzIHNlZW4gdG8gaGF2ZSBkb25lIG5vdGhpbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAga2luZCwgc28geW91IG11c3QgcmVnYXJkIHRoaXMgYXMgcHJlc3VtcHRpdmUgZXZpZGVuY2U7IG5vOyBoZSBnYXZlIHdyaXR0ZW4gYW5kCiAgICAgICAgICAgICAgICAgICAgb3JhbCBpbnN0cnVjdGlvbnMgdGhhdCBpdCB3YXMgdG8gQ2VwaGlzaWFkZXMgdGhhdCB0aGUgbW9uZXkgd2FzIHRvIGJlIHBhaWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['52.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmUgeW91IHJlZ2FyZCB0aGUgZm9sbG93aW5nIHBvaW50IGFsc28sIG1lbiBvZiB0aGUganVyeS4gQ2FsbGlwcHVzIHdhcyBvbmUgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGNpdGl6ZW5zLCBhIG1hbiBhYmxlIGJvdGggdG8gcmVuZGVyIGEgc2VydmljZSBhbmQgdG8gZG8gYW4gaW5qdXJ5LCB3aGlsZQogICAgICAgICAgICAgICAgICAgIENlcGhpc2lhZGVzIHdhcyBhIHJlc2lkZW50IGFsaWVuIGFuZCBhIHBlcnNvbiB3aXRob3V0IGluZmx1ZW5jZTsgc28gb25lIGNhbm5vdAogICAgICAgICAgICAgICAgICAgIHN1cHBvc2UgdGhhdCBteSBmYXRoZXIgd291bGQgaGF2ZSB0YWtlbiB0aGUgc2lkZSBvZiBDZXBoaXNpYWRlcyBpbiBkZWZpYW5jZSBvZgogICAgICAgICAgICAgICAgICAgIGp1c3RpY2UgcmF0aGVyIHRoYW4gZG8gd2hhdCB3YXMgcmlnaHQgZm9yIHRoZSBwbGFpbnRpZmYuIDwvdHJhbnNsYXRpb24+"
translation['52.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5BaCwgYnV0IGhlIHdpbGwgc2F5IHBlcmhhcHMsIHRoYXQgbXkgZmF0aGVyIGdvdCBzb21lIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBwcm9maXQgb3V0IG9mIHRoZSBtb25leSwgYW5kIHRoZXJlZm9yZSB0b29rIHNpZGVzIHdpdGggQ2VwaGlzaWFkZXMgcmF0aGVyIHRoYW4KICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBwbGFpbnRpZmYuIFRoZW4gd2UgYXJlIHRvIGJlbGlldmUsIGluIHRoZSBmaXJzdCBwbGFjZSwgdGhhdCBoZSB3cm9uZ2VkCiAgICAgICAgICAgICAgICAgICAgYSBtYW4gd2hvIHdvdWxkIGJlIGFibGUgdG8gZG8gaGltIGluanVyeSB0byB0d2ljZSB0aGUgYW1vdW50IG9mIGhpcyBnYWlucywgYW5kCiAgICAgICAgICAgICAgICAgICAgc2Vjb25kbHkgdGhhdCBteSBmYXRoZXIgaW4gdGhpcyBpbnN0YW5jZSB3YXMgYSBiYXNlIGxvdmVyIG9mIGdhaW4sIHdoZXJlYXMgaW4KICAgICAgICAgICAgICAgICAgICByZWdhcmQgdG8gc3BlY2lhbCB0YXhlcyBhbmQgcHVibGljIHNlcnZpY2VzIGFuZCBnaWZ0cyB0byB0aGUgc3RhdGUgaGUgd2FzIG5vdC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['52.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZGlkIGhlLCB3aG8gbmV2ZXIgd3JvbmdlZCBhIHN0cmFuZ2VyLAogICAgICAgICAgICAgICAgICAgIHdyb25nIENhbGxpcHB1cz8gQW5kIGRpZCB0aGUgcGxhaW50aWZmLCBhcyBoZSBhbGxlZ2VzLCB0ZW5kZXIgYW4gb2F0aCB0byBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBhcyB0byBvbmUgd2hvIHdhcyBhIHdvcnRoeSBtYW4gYW5kIHdvdWxkIHRlbGwgbm8gZmFsc2Vob29kLCBhbmQgeWV0IGRvZXMKICAgICAgICAgICAgICAgICAgICBoZSBub3cgc3BlYWsgb2YgaGltIGFzIGEgYmFzZSBmZWxsb3csIHdobyBlcmFzZXMgcmVjb3JkcyBvZiBkZXBvc2l0cz8gQW5kLCBpZiBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciByZWZ1c2VkIHRvIHRha2UgdGhlIG9hdGgsIGFzIHRoZSBwbGFpbnRpZmYgY2xhaW1zLCBvciB0byBtYWtlIHBheW1lbnQsCiAgICAgICAgICAgICAgICAgICAgaG93IGNvdWxkIGhlIGhhdmUgZXNjYXBlZCBpbW1lZGlhdGUgY29uZGVtbmF0aW9uPyBXaG8gY2FuIGJlbGlldmUgdGhpcywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnk/IEkgY2VydGFpbmx5IHRoaW5rIG5vIG9uZSBjYW4uIDwvdHJhbnNsYXRpb24+"
translation['52.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICBoYXMgQXJjaGViaWFkZXMgZm9yc29vdGggc3VuayB0byBzdWNoIGFuIGV4dHJlbWUgb2YgYmFzZW5lc3MgYXMgdG8gdGVzdGlmeQogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgQ2FsbGlwcHVzLCBhIGZlbGxvdy1kZW1lc21hbiBvZiBoaXMgb3duLCBvbmUgaW4gcHVibGljIGxpZmUsIGFuZCBhbgogICAgICAgICAgICAgICAgICAgIG9mZmljaWFsLCBhbmQgdG8gc2F5IHRoYXQgSSBhbSB0ZWxsaW5nIHRoZSB0cnV0aCB3aGlsZSBDYWxsaXBwdXMgaXMgbHlpbmcsIGFuZAogICAgICAgICAgICAgICAgICAgIGFsbCB0aGlzLCB3aGVuIGhlIGtub3dzIHRoYXQsIGlmIENhbGxpcHB1cyBjaG9vc2VzIHRvIHByb2NlZWQgYWdhaW5zdCBoaW0gZm9yCiAgICAgICAgICAgICAgICAgICAgZmFsc2UgdGVzdGltb255LCBvciB0byBkbyBubyBtb3JlIHRoYW4gcHV0IGhpbSBvbiBvYXRoLCBoZSB3aWxsIGJlIGNvbXBlbGxlZCB0bwogICAgICAgICAgICAgICAgICAgIHRha2Ugd2hhdGV2ZXIgb2F0aCBDYWxsaXBwdXMgbWF5IHJlcXVpcmU/IDwvdHJhbnNsYXRpb24+"
translation['52.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICBhZ2FpbiwgY2FuIGFueW9uZSBwZXJzdWFkZSB5b3UgdGhhdCBBcmNoZWJpYWRlcyB3b3VsZCBwZXJqdXJlIGhpbXNlbGYgaW4gb3JkZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IENlcGhpc2lhZGVzLCBhIHJlc2lkZW50IGFsaWVuLCBtaWdodCBnZXQgdGhlIG1vbmV5LCBvciBQaG9ybWlvbiBlaXRoZXIsIGEKICAgICAgICAgICAgICAgICAgICBtYW4gd2hvbSBDYWxsaXBwdXMgY2hhcmdlcyB3aXRoIGhhdmluZyBleHB1bmdlZCBzb21lIHJlY29yZHMgb2YgZGVwb3NpdD8gSXQgaXMKICAgICAgICAgICAgICAgICAgICBub3QgYSBwcm9iYWJsZSB0aGluZywgbWVuIG9mIHRoZSBqdXJ5LiBOb3IgaXMgaXQgcmlnaHQgdG8ganVkZ2UgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgQXJjaGViaWFkZXMgb3IgbXkgZmF0aGVyIGd1aWx0eSBvZiBhbnkgYWN0IG9mIGJhc2VuZXNzOyB5b3Uga25vdyB0aGF0IG15IGZhdGhlcgogICAgICAgICAgICAgICAgICAgIHdhcyB0b28gZW11bG91cyBvZiBob25vciB0byBpbmR1bGdlIGluIGFueSBiYXNlIG9yIHNoYW1lZnVsIHByYWN0aWNlcywgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBoaXMgcmVsYXRpb25zIHdpdGggQ2FsbGlwcHVzIHdlcmUgbm90IHN1Y2ggYXMgdG8gbGVhZCBoaW0gdGhyb3VnaCBjb250ZW1wdCB0byBkbwogICAgICAgICAgICAgICAgICAgIGhpbSBhbiBpbmp1cnkuIDwvdHJhbnNsYXRpb24+"
translation['52.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5DYWxsaXBwdXMgaW5kZWVkIGRvZXMgbm90CiAgICAgICAgICAgICAgICAgICAgYXBwZWFyIHRvIG1lIHRvIGJlIGEgbWFuIG9mIHN1Y2ggc2xpZ2h0IGltcG9ydGFuY2UgYXMgdG8gYmUgdHJlYXRlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgY29udGVtcHTigJRhIG1hbiBvZiBzdWNoIGluZmx1ZW5jZSB0aGF0IGxhc3QgeWVhciwgYWZ0ZXIgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgaW5zdGl0dXRlZCB0aGlzIGFjdGlvbiBhZ2FpbnN0IG1lLCBhbmQgaGFkIGNoYWxsZW5nZWQgbWUgdG8gcmVmZXIgdGhlIG1hdHRlciB0bwogICAgICAgICAgICAgICAgICAgIEx5c2l0aGVpZGVzIGZvciBhcmJpdHJhdGlvbiDvvIhhbmQgSSwgYWx0aG91Z2ggc2Nvcm5lZCBieSBoaW0sIHlldCB0b29rCiAgICAgICAgICAgICAgICAgICAgd2lzZSBjb3Vuc2VsIGluIHRoaXMgYXQgYW55IHJhdGXigJRJIG1hZGUgdGhlIHJlZmVyZW5jZSBpbiBkdWUgbGVnYWwKICAgICAgICAgICAgICAgICAgICBmb3JtLCBhbmQgY2FycmllZCB0aGUgbWF0dGVyIGJlZm9yZSB0aGUgbWFnaXN0cmF0Ze+8iSwgQ2FsbGlwcHVzLCBJIHNheSwKICAgICAgICAgICAgICAgICAgICBpbmR1Y2VkIHRoZSBhcmJpdHJhdG9yLCB3aG8gaGFkIGJlZW4gZGVzaWduYXRlZCBhY2NvcmRpbmcgdG8gdGhlIGxhd3MsIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvbm91bmNlIGhpcyBhd2FyZCB3aXRob3V0IHRha2luZyBvYXRoLCBhbHRob3VnaCBJIHByb3Rlc3RlZCB0aGF0IGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGdpdmUgaXQgb24gb2F0aCBhcyB0aGUgbGF3cyBvcmRhaW4sIGhpcyBwdXJwb3NlIGJlaW5nIHRoYXQgaGUgbWlnaHQgYmUgYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHNheSBiZWZvcmUgeW91LCB0aGF0IEx5c2l0aGVpZGVzLCBhIGdvb2QgYW5kIHdvcnRoeSBtYW4sIGhhZCBhbHJlYWR5IGdpdmVuIGEKICAgICAgICAgICAgICAgICAgICBkZWNpc2lvbiByZWdhcmRpbmcgdGhlIG1hdHRlcnMgYXQgaXNzdWUuIDwvdHJhbnNsYXRpb24+"
translation['52.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5MeXNpdGhlaWRlcywgbWVuIG9mIHRoZSBqdXJ5LCBzbyBsb25nIGFzIG15IGZhdGhlciBsaXZlZCwgd291bGQgcHJvYmFibHkgbm90CiAgICAgICAgICAgICAgICAgICAgaGF2ZSB3cm9uZ2VkIGhpbSBlaXRoZXIgd2l0aCBvciB3aXRob3V0IGFuIG9hdGgsIGZvciBoZSBoYWQgYSByZWdhcmQgZm9yIGhpbTsKICAgICAgICAgICAgICAgICAgICBidXQgZm9yIG1lIGhlIGhhZCBubyByZWdhcmQsIHdoaWxlIG5vdCB1cG9uIGhpcyBvYXRoLCBhbHRob3VnaCBwZXJoYXBzLCBpZiBwdXQKICAgICAgICAgICAgICAgICAgICB1cG9uIGhpcyBvYXRoLCBoZSB3b3VsZCBoYXZlIGFic3RhaW5lZCBmcm9tIHdyb25naW5nIG1lIGluIGhpcyBvd24gaW50ZXJlc3QuCiAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB3aHkgaGUgbWFkZSB0aGUgYXdhcmQgd2l0aG91dCB0YWtpbmcgYW4gb2F0aC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBJIGFtIHNwZWFraW5nIHRoZSB0cnV0aCwgSSBzaGFsbCwgaW4gcmVnYXJkIHRvIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycyBhbHNvLCBicmluZyBmb3J3YXJkIGFzIHdpdG5lc3NlcyB0aG9zZSB3aG8gd2VyZSBwcmVzZW50LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['52.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBDYWxsaXBwdXMKICAgICAgICAgICAgICAgICAgICBpcyBhYmxlIHRvIGFjaGlldmUgaGlzIGVuZHMgY29udHJhcnkgdG8gdGhlIGxhd3MgYW5kIGNvbnRyYXJ5IHRvIGp1c3RpY2UsIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUgaGVhcmQsIG1lbiBvZiB0aGUganVyeSwgZnJvbSB0aGUgZGVwb3NpdGlvbi4gSSwgb24gbXkgcGFydCwgYmVzZWVjaCB5b3Ugb24KICAgICAgICAgICAgICAgICAgICBteSBvd24gYmVoYWxmIGFuZCBvbiBteSBmYXRoZXIncywgdG8gYmVhciBpbiBtaW5kIHRoYXQsIGluIHN1cHBvcnQgb2YgYWxsIHRoYXQgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgc2FpZCwgSSBoYXZlIHByb2R1Y2VkIGJlZm9yZSB5b3Ugd2l0bmVzc2VzIGFuZCBjaXJjdW1zdGFudGlhbCBldmlkZW5jZSBhbmQKICAgICAgICAgICAgICAgICAgICBsYXdzIGFuZCBzd29ybiBzdGF0ZW1lbnRzOyBhbmQgaW4gdGhlIGNhc2Ugb2YgdGhlIHBsYWludGlmZiBJIGhhdmUgc2hvd24gdGhhdCwKICAgICAgICAgICAgICAgICAgICB3aGlsZSwgaWYgaGUgaGFkIGFueSBjbGFpbSB0byB0aGlzIG1vbmV5LCBoZSBtaWdodCBoYXZlIHByb2NlZWRlZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgQ2VwaGlzaWFkZXMsIHdobyBhZG1pdHMgdGhhdCBoZSBjb2xsZWN0ZWQgdGhlIG1vbmV5IGFuZCBoYXMgaXQgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiwgYW5kIHN0aWxsIHRha2UgdGhlc2UgcGxlZGdlcyBmcm9tIG1lLCBoZSBkb2VzIG5vdCBwcm9jZWVkIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICBoaW0sIGFsdGhvdWdoIGhlIGtub3dzIHRoYXQgdGhlIG1vbmV5IGlzIG5vdCBpbiBvdXIgaGFuZHPigJRJIGJlc2VlY2gKICAgICAgICAgICAgICAgICAgICB5b3UgdG8gcmVtZW1iZXIgYWxsIHRoZXNlIGZhY3RzLCBhbmQgdG8gZ2l2ZSBhIHZlcmRpY3QgaW4gbXkgZmF2b3IuIDwvdHJhbnNsYXRpb24+"
translation['52.33'] = ""
translation['53.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIGhhdmUgbm8gZGVzaXJlCiAgICAgICAgICAgICAgICAgICAgdG8gYnJpbmcgYSBiYXNlbGVzcyBhbmQgbWFsaWNpb3VzIGNoYXJnZTsgYnV0IEkgaGF2ZSBmaWxlZCB0aGlzIGludmVudG9yeSBvZgogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IGJlY2F1c2UgSSBoYXZlIHN1ZmZlcmVkIHdyb25nIGFuZCBpbmRpZ25pdHkgZnJvbSB0aGVzZSBtZW4gYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlIHRob3VnaHQgaXQgbXkgZHV0eSB0byBhdmVuZ2UgbXlzZWxmIHVwb24gdGhlbS4gT2YgdGhpcyB5b3Ugd2lsbCBmaW5kCiAgICAgICAgICAgICAgICAgICAgY29udmluY2luZyBwcm9vZiwgbWVuIG9mIHRoZSBqdXJ5LCBpbiB0aGUgYW1vdW50IG9mIHRoZSB2YWx1YXRpb24sIGFuZCBpbiBteQogICAgICAgICAgICAgICAgICAgIGhhdmluZyBmaWxlZCB0aGUgaW5mb3JtYXRpb24gaW4gbXkgb3duIG5hbWUuIEZvciwgSSB0YWtlIGl0LCBpZiBJIGhhZCB3aXNoZWQgdG8KICAgICAgICAgICAgICAgICAgICBicmluZyBhIG1hbGljaW91cyBzdWl0LCBJIHNob3VsZCBub3QgaGF2ZSBsaXN0ZWQgc2xhdmVzIHdvcnRoIHR3byBtaW5hZSBhbmQgYQogICAgICAgICAgICAgICAgICAgIGhhbGYsIHRoZSBzdW0gYXQgd2hpY2ggdGhlIGNsYWltYW50IGhpbXNlbGYgaGFzIGZpeGVkIHRoZWlyIHZhbHVlLCBhbmQgbXlzZWxmCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBydW4gdGhlIHJpc2sgb2YgbG9zaW5nIGEgdGhvdXNhbmQgZHJhY2htYWUsIGFuZCBmb3JmZWl0aW5nIHRoZSByaWdodCBldmVyCiAgICAgICAgICAgICAgICAgICAgYWdhaW4gdG8gaW5kaWN0IGFueW9uZSBvbiBteSBvd24gYmVoYWxmLiBOb3IsIGFnYWluLCB3YXMgSSBzbyBsYWNraW5nIGluCiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzIG9yIGluIGZyaWVuZHMgYXMgdG8gYmUgdW5hYmxlIHRvIGZpbmQgc29tZSBvbmUgdG8gZmlsZSB0aGUKICAgICAgICAgICAgICAgICAgICBpbmZvcm1hdGlvbjsgPC90cmFuc2xhdGlvbj4="
translation['53.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBJIHRob3VnaHQgaXQgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBvdXRyYWdlb3VzIHRoaW5nIGV2ZXIgc2VlbiBhbW9uZyBtZW4sIHRoYXQgSSBzaG91bGQgbXlzZWxmIHN1ZmZlciB0aGUgd3JvbmcsIGJ1dAogICAgICAgICAgICAgICAgICAgIHRoYXQgYW5vdGhlciBzaG91bGQgbGVuZCBoaXMgbmFtZSBvbiBiZWhhbGYgb2YgbWUsIHRoZSBvbmUgd3JvbmdlZDsgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGlzIHdvdWxkIHRoZW4gc2VydmUgYXMgcHJlc3VtcHRpdmUgcHJvb2YgdG8gbXkgYWR2ZXJzYXJpZXMgdGhhdCBJIGFtIGx5aW5nCiAgICAgICAgICAgICAgICAgICAgd2hlbmV2ZXIgSSBzcGVhayB0byB5b3Ugb2Ygb3VyIGVubWl0eTsgZm9yIHRoZXkgd291bGQgc2F5IHRoYXQgbm8gb3RoZXIgbWFuCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGF2ZSBmaWxlZCB0aGUgaW5mb3JtYXRpb24sIGlmIEkgd2VyZSBteXNlbGYgdGhlIG9uZSB3cm9uZ2VkLiBJdCB3YXMgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhpcyByZWFzb24gdGhhdCBJIGZpbGVkIHRoZSBpbmZvcm1hdGlvbi4gQW5kIG5vdyB0aGF0IEkgaGF2ZSBkb25lIHNvLCBpZiBJIGNhbgogICAgICAgICAgICAgICAgICAgIHByb3ZlIHRoYXQgdGhlIHNsYXZlcyBiZWxvbmcgdG8gQXJldGh1c2l1cywgdG8gd2hvbSB0aGV5IGFyZSBzdGF0ZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb24gdG8gYmVsb25nLCBJIHJlbGlucXVpc2ggdG8gdGhlIHN0YXRlIHRoZSB0aHJlZSBmb3VydGhzIHdoaWNoIHVuZGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhdyBhcmUgZ2l2ZW4gdG8gdGhlIHByaXZhdGUgY2l0aXplbiBmaWxpbmcgdGhlIGluZm9ybWF0aW9uOyBmb3IgbXlzZWxmIGl0CiAgICAgICAgICAgICAgICAgICAgaXMgZW5vdWdoIHRvIGhhdmUgdGFrZW4gdmVuZ2VhbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['53.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPklmLCBub3csCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2VyZSB3YXRlciBlbm91Z2ggaW4gdGhlIHdhdGVyLWNsb2NrIHRvIHBlcm1pdCBteSB0ZWxsaW5nIHlvdSBpbiBkZXRhaWwKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBiZWdpbm5pbmcgYWxsIHRoZSBiZW5lZml0cyBJIGhhdmUgY29uZmVycmVkIG9uIHRoZW0gYW5kIGFsbCB0aGUgYWN0cwogICAgICAgICAgICAgICAgICAgIHRoZXkgaGF2ZSBjb21taXR0ZWQgdG93YXJkIG1lLCBJIGFtIHN1cmUgdGhhdCB5b3Ugd291bGQgZmVlbCBtb3JlIGxlbmllbnQgdG93YXJkCiAgICAgICAgICAgICAgICAgICAgbWUgZm9yIG15IHJlc2VudG1lbnQgYWdhaW5zdCB0aGVtLCBhbmQgd291bGQgZGVlbSB0aGVzZSBtZW4gdGhlIG1vc3Qgd2lja2VkIG9mCiAgICAgICAgICAgICAgICAgICAgaHVtYW5raW5kLiBBcyBpdCBpcywgaG93ZXZlciwgZXZlbiBkb3VibGUgdGhlIGFtb3VudCBvZiB3YXRlciB0aGF0IEkgbm93IGhhdmUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBpbnN1ZmZpY2llbnQuIEkgc2hhbGwgdGhlcmVmb3JlIHJlbGF0ZSB0byB5b3UgdGhlIGdyZWF0ZXN0IGFuZCBtb3N0CiAgICAgICAgICAgICAgICAgICAgZmxhZ3JhbnQgb2YgdGhlaXIgd3Jvbmdkb2luZ3MsIGFuZCB0aG9zZSB3aGljaCBnYXZlIHJpc2UgdG8gdGhlIGZpbGluZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBpbmZvcm1hdGlvbjsgdGhlIGJ1bGsgb2YgdGhlbSBJIHNoYWxsIHBhc3Mgb3Zlci4gPC90cmFuc2xhdGlvbj4="
translation['53.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5OaWNvc3RyYXR1cywgd2hvbSB5b3Ugc2VlIGhlcmUgaW4gY291cnQsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIHRoZSBqdXJ5LCB3YXMgYSBuZWlnaGJvciBvZiBtaW5lIGluIHRoZSBjb3VudHJ5LCBhbmQgYSBtYW4gb2YgbXkgb3duIGFnZS4KICAgICAgICAgICAgICAgICAgICBXZSBoYWQgbG9uZyBrbm93biBlYWNoIG90aGVyLCBidXQgYWZ0ZXIgbXkgZmF0aGVyJ3MgZGVhdGgsIHdoZW4gSSB3ZW50IHRvIGxpdmUKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgY291bnRyeSwgd2hlcmUgSSBzdGlsbCBsaXZlLCB3ZSBoYWQgbXVjaCBtb3JlIHRvIGRvIHdpdGggb25lIGFub3RoZXIsCiAgICAgICAgICAgICAgICAgICAgc2luY2Ugd2Ugd2VyZSBuZWlnaGJvcnMgYW5kIG1lbiBvZiB0aGUgc2FtZSBhZ2UuIEFzIHRpbWUgd2VudCBvbiB3ZSBiZWNhbWUgdmVyeQogICAgICAgICAgICAgICAgICAgIGludGltYXRlOyBpbmRlZWQgSSBjYW1lIHRvIGZlZWwgb24gc3VjaCBpbnRpbWF0ZSB0ZXJtcyB3aXRoIGhpbSB0aGF0IGhlIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgZmFpbGVkIHRvIHdpbiBhbnkgZmF2b3IgaGUgYXNrZWQgb2YgbWU7IGFuZCBoZSwgb24gaGlzIHBhcnQsIHdhcyB1c2VmdWwgdG8gbWUgaW4KICAgICAgICAgICAgICAgICAgICBsb29raW5nIGFmdGVyIG15IGFmZmFpcnMgYW5kIG1hbmFnaW5nIHRoZW0sIGFuZCB3aGVuZXZlciBJIHdhcyBhYnJvYWQgb24gcHVibGljCiAgICAgICAgICAgICAgICAgICAgc2VydmljZSBhcyB0cmllcmFyY2gsIG9yIG9uIGFueSBwcml2YXRlIGJ1c2luZXNzIG9mIG15IG93biwgSSB1c2VkIHRvIGxlYXZlIGhpbQogICAgICAgICAgICAgICAgICAgIGluIGNoYXJnZSBvZiBldmVyeXRoaW5nIG9uIHRoZSBmYXJtLiA8L3RyYW5zbGF0aW9uPg=="
translation['53.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0CiAgICAgICAgICAgICAgICAgICAgaGFwcGVuZWQgdGhhdCBJIHdhcyBzZW50IGFzIHRyaWVyYXJjaCByb3VuZCB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcwNzYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzA3NiI+UGVsb3Bvbm5lc3VzPC9wbGFjZU5hbWU+LCBhbmQgZnJvbSB0aGVuY2UgSSBoYWQgdG8gY2FycnkgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+IHRoZSBhbWJhc3NhZG9ycyB3aG9tIHRoZSBwZW9wbGUgaGFkCiAgICAgICAgICAgICAgICAgICAgZWxlY3RlZC4gSSB3YXMgZm9yY2VkIHRvIHNldCBzYWlsIGluIGhhc3RlLCBzbyBJIHdyb3RlIHRvIE5pY29zdHJhdHVzLCB0ZWxsaW5nCiAgICAgICAgICAgICAgICAgICAgaGltIHRoYXQgSSBoYWQgdG8gcHV0IHRvIHNlYSwgYW5kIHRoYXQgSSBzaG91bGQgbm90IGJlIGFibGUgdG8gY29tZSBob21lIGZvcgogICAgICAgICAgICAgICAgICAgIGZlYXIgb2YgZGVsYXlpbmcgdGhlIGFtYmFzc2Fkb3JzOyBhbmQgSSBjaGFyZ2VkIGhpbSB0byBsb29rIGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGFkbWluaXN0cmF0aW9uIG9mIG1hdHRlcnMgYXQgaG9tZSwgYXMgaGUgaGFkIGRvbmUgYmVmb3JlLiA8L3RyYW5zbGF0aW9uPg=="
translation['53.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5EdXJpbmcgbXkgYWJzZW5jZSB0aHJlZQogICAgICAgICAgICAgICAgICAgIGhvdXNlaG9sZCBzbGF2ZXMgb2YgTmljb3N0cmF0dXMgcmFuIGF3YXkgZnJvbSBoaW0gZnJvbSBoaXMgZmFybSwgdHdvIG9mIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvbSBJIGhhZCBnaXZlbiBoaW0sIGFuZCBvbmUgb2YgYSBudW1iZXIgd2hvbSBoZSBoYWQgcHVyY2hhc2VkIGZvciBoaW1zZWxmLiBIZQogICAgICAgICAgICAgICAgICAgIHB1cnN1ZWQgdGhlbSwgYnV0IHdhcyB0YWtlbiBjYXB0aXZlIGJ5IGEgdHJpcmVtZSBhbmQgYnJvdWdodCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTA4NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDg3Ij5BZWdpbmE8L3BsYWNlTmFtZT4sIHdoZXJlIGhlIHdhcyBzb2xkLiBXaGVuIEkgaGFkIGNvbWUKICAgICAgICAgICAgICAgICAgICBob21lIHdpdGggdGhlIHNoaXAgb2Ygd2hpY2ggSSB3YXMgaW4gY29tbWFuZCwgRGVpbm9uLCB0aGlzIG1hbidzIGJyb3RoZXIsIGNhbWUKICAgICAgICAgICAgICAgICAgICB0byBtZSBhbmQgdG9sZCBtZSBvZiBoaXMgbWlzZm9ydHVuZXMsIHN0YXRpbmcgdGhhdCwgYWx0aG91Z2ggTmljb3N0cmF0dXMgaGFkCiAgICAgICAgICAgICAgICAgICAgc2VudCBoaW0gbGV0dGVycywgaGUgaGFkIG5vdCBnb25lIGluIHF1ZXN0IG9mIGhpbSBmb3Igd2FudCBvZiBmdW5kcyBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgam91cm5leSwgYW5kIGhlIHRvbGQgbWUgYWxzbyB0aGF0IGhlIGhlYXJkIHRoYXQgaGlzIGJyb3RoZXIgd2FzIGluIGEgZHJlYWRmdWwKICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['53.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gSSBoZWFyZCB0aGlzIEkgd2FzIHRvdWNoZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIGNvbXBhc3Npb24gZm9yIE5pY29zdHJhdHVzIG9uIGFjY291bnQgb2YgaGlzIGlsbC1mb3J0dW5lLCBhbmQgYXQgb25jZSBzZW50IGhpcwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXIgRGVpbm9uIHRvIGZldGNoIGhpbSwgZ2l2aW5nIGhpbSB0aHJlZSBodW5kcmVkIGRyYWNobWFlIGZvciBoaXMgam91cm5leS4KICAgICAgICAgICAgICAgICAgICBXaGVuIE5pY29zdHJhdHVzIGdvdCBob21lLCBoZSBjYW1lIGF0IG9uY2UgdG8gbWUsIGVtYnJhY2VkIG1lLCB0aGFua2VkIG1lIGZvcgogICAgICAgICAgICAgICAgICAgIGdpdmluZyBoaXMgYnJvdGhlciBtb25leSBmb3IgaGlzIGpvdXJuZXksIGJld2FpbGVkIGhpcyBvd24gdW5oYXBweSBsb3QsIGFuZCwKICAgICAgICAgICAgICAgICAgICB3aGlsZSBjb21wbGFpbmluZyBvZiBoaXMgb3duIHJlbGF0aXZlcywgYmVnZ2VkIG1lIHRvIHN1Y2NvciBoaW0sIGp1c3QgYXMgaW4gdGltZQogICAgICAgICAgICAgICAgICAgIHBhc3QgSSBoYWQgYmVlbiBhIHRydWUgZnJpZW5kIHRvIGhpbS4gVGhlbiBoZSB3ZXB0LCBhbmQgdG9sZCBtZSB0aGF0IGhlIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgcmFuc29tZWQgZm9yIHR3ZW50eS1zaXggbWluYWUsIGFuZCB1cmdlZCBtZSB0byBjb250cmlidXRlIHNvbWV0aGluZyB0b3dhcmQgdGhlCiAgICAgICAgICAgICAgICAgICAgY29zdCBvZiBoaXMgcmVkZW1wdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['53.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5PbiBoZWFyaW5nIHRoaXMgc3RvcnksIEkgZmVsdCBwaXR5IGZvciBoaW0sIGFuZCBtb3Jlb3ZlciBJIHNhdyBpbgogICAgICAgICAgICAgICAgICAgIHdoYXQgd3JldGNoZWQgcGxpZ2h0IGhlIHdhcywgYW5kIGhlIHNob3dlZCBtZSB0aGUgd291bmRzIG9mIHRoZSBmZXR0ZXJzIG9uIGhpcwogICAgICAgICAgICAgICAgICAgIGNhbHZlcyDvvIhoZSBoYXMgdGhlIHNjYXJzIG9mIHRoZW0gc3RpbGwsIGJ1dCwgaWYgeW91IGJpZCBoaW0gc2hvdyB0aGVtCiAgICAgICAgICAgICAgICAgICAgdG8geW91LCBoZSB3aWxsIG5vdCB3aXNoIHRvIGRvIHNv77yJOyBJIHRoZXJlZm9yZSBhbnN3ZXJlZCB0aGF0IGluIHRpbWUKICAgICAgICAgICAgICAgICAgICBwYXN0IEkgaGFkIGJlZW4gYSB0cnVlIGZyaWVuZCB0byBoaW0sIGFuZCB0aGF0IG5vdyBJIHdvdWxkIGhlbHAgaGltIGluIGhpcwogICAgICAgICAgICAgICAgICAgIGRpc3RyZXNzLCB0aGF0IEkgZm9yZ2F2ZSBoaW0gdGhlIHRocmVlIGh1bmRyZWQgZHJhY2htYWUgd2hpY2ggSSBoYWQgZ2l2ZW4gaGlzCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciBmb3IgdGhlIGV4cGVuc2VzIG9mIGhpcyBqb3VybmV5IHRvIGZldGNoIGhpbSwgYW5kIHRoYXQgSSB3b3VsZCBtYWtlIGEKICAgICAgICAgICAgICAgICAgICBjb250cmlidXRpb24gb2Ygb25lIHRob3VzYW5kIGRyYWNobWFlIHRvd2FyZCBoaXMgcmFuc29tLiA8L3RyYW5zbGF0aW9uPg=="
translation['53.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPk5vciBkaWQgSSBtYWtlIHRoaXMgcHJvbWlzZSBpbiB3b3JkcyBvbmx5IGFuZCBmYWlsIHRvCiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybSBpdCBpbiBhY3Q7IGJ1dCwgc2luY2UgSSB3YXMgbm90IHdlbGwgcHJvdmlkZWQgd2l0aCBmdW5kcyBpbiBjb25zZXF1ZW5jZQogICAgICAgICAgICAgICAgICAgIG9mIG15IHF1YXJyZWwgd2l0aCBQaG9ybWlvbiBhbmQgb2YgaGlzIGRlcHJpdmluZyBtZSBvZiB0aGUgZXN0YXRlIHdoaWNoIG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIGxlZnQgbWUsIEkgdG9vayB0byBUaGVvY2xlcywgd2hvIGF0IHRoYXQgdGltZSB3YXMgY2Fycnlpbmcgb24gYSBiYW5raW5nCiAgICAgICAgICAgICAgICAgICAgYnVzaW5lc3MsIHNvbWUgY3VwcyBhbmQgYSBjaGFwbGV0IG9mIGdvbGQsIHdoaWNoIEkgaGFwcGVuZWQgdG8gaGF2ZSBpbiBteSBob3VzZQogICAgICAgICAgICAgICAgICAgIGFzIGEgcGFydCBvZiBteSBhbmNlc3RyYWwgaW5oZXJpdGFuY2UsIGFuZCBiYWRlIGhpbSBnaXZlIE5pY29zdHJhdHVzIGEgdGhvdXNhbmQKICAgICAgICAgICAgICAgICAgICBkcmFjaG1hZTsgYW5kIHRoYXQgc3VtIEkgZ2F2ZSBoaW0gb3V0cmlnaHQgYXMgYSBnaWZ0LCBhbmQgSSBhY2tub3dsZWRnZSB0aGF0IGl0CiAgICAgICAgICAgICAgICAgICAgd2FzIGEgZ2lmdC4gPC90cmFuc2xhdGlvbj4="
translation['53.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5BIGZldyBkYXlzIGFmdGVyd2FyZHMgaGUgY2FtZSB1cAogICAgICAgICAgICAgICAgICAgIHRvIG1lIHdlZXBpbmcsIGFuZCB0b2xkIG1lIHRoYXQgdGhlIHN0cmFuZ2VycyB3aG8gaGFkIGxlbnQgaGltIHRoZSByYW5zb20gbW9uZXkKICAgICAgICAgICAgICAgICAgICB3ZXJlIGRlbWFuZGluZyBwYXltZW50IG9mIHRoZSBiYWxhbmNlLCBhbmQgdGhhdCBpdCB3YXMgc3RpcHVsYXRlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBhZ3JlZW1lbnQgdGhhdCBoZSBzaG91bGQgcGF5IGl0IHdpdGhpbiB0aGlydHkgZGF5cyBvciBiZSBpbmRlYnRlZCBmb3IgZG91YmxlIHRoZQogICAgICAgICAgICAgICAgICAgIGFtb3VudDsgdGhhdCwgbW9yZW92ZXIsIG5vIG9uZSB3b3VsZCBlaXRoZXIgYnV5IG9yIHRha2UgYSBtb3J0Z2FnZSBvbiB0aGUgZmFybQogICAgICAgICAgICAgICAgICAgIGFkam9pbmluZyBtaW5lLCBiZWNhdXNlIGhpcyBicm90aGVyIEFyZXRodXNpdXMsIHdobyBpcyB0aGUgb3duZXIgb2YgdGhlIHNsYXZlcwogICAgICAgICAgICAgICAgICAgIG1lbnRpb25lZCBpbiB0aGUgaW5mb3JtYXRpb24sIHdvdWxkIG5vdCBzdWZmZXIgYW55b25lIHRvIGJ1eSBpdCBvciB0YWtlIGl0IG9uCiAgICAgICAgICAgICAgICAgICAgbW9ydGdhZ2UsIGFsbGVnaW5nIHRoYXQgbW9uZXkgd2FzIG93aW5nIGhpbSBvbiBpdCBhbHJlYWR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['53.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz7igJxEbyB5b3UsIHRoZXJlZm9yZSzigJ0gaGUgc2FpZCwKICAgICAgICAgICAgICAgICAgICDigJxwcm92aWRlIGZvciBtZSB0aGUgYW1vdW50IHdoaWNoIGlzIGxhY2tpbmcgYmVmb3JlIHRoZSB0aGlydHkgZGF5cwogICAgICAgICAgICAgICAgICAgIGhhdmUgcGFzc2VkLCBpbiBvcmRlciB0aGF0IHdoYXQgSSBoYXZlIGFscmVhZHkgcGFpZCwgdGhlIHRob3VzYW5kIGRyYWNobWFlLCBtYXkKICAgICAgICAgICAgICAgICAgICBub3QgYmUgbG9zdCwgYW5kIHRoYXQgSSBteXNlbGYgYmUgbm90IGxpYWJsZSB0byBzZWl6dXJlLiBJIHNoYWxsIG1ha2UgYQogICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24gZnJvbSBteSBmcmllbmRzLOKAnSBoZSBzYWlkLCDigJxhbmQgd2hlbiBJIGhhdmUgZ290CiAgICAgICAgICAgICAgICAgICAgcmlkIG9mIHRoZSBzdHJhbmdlcnMsIEkgc2hhbGwgcGF5IHlvdSBpbiBmdWxsIHdoYXRldmVyIHlvdSBzaGFsbCBoYXZlIGxlbnQgbWUuCiAgICAgICAgICAgICAgICAgICAgWW91IGtub3cs4oCdIGhlIHNhaWQsIOKAnHRoYXQgdGhlIGxhd3MgZW5hY3QgdGhhdCBhIHBlcnNvbgogICAgICAgICAgICAgICAgICAgIHJhbnNvbWVkIGZyb20gdGhlIGVuZW15IHNoYWxsIGJlIHRoZSBwcm9wZXJ0eSBvZiB0aGUgcmFuc29tZXIsIGlmIGhlIGZhaWwgdG8gcGF5CiAgICAgICAgICAgICAgICAgICAgdGhlIHJlZGVtcHRpb24gbW9uZXku4oCdIDwvdHJhbnNsYXRpb24+"
translation['53.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiBJIGhlYXJkIHRoZXNlIHdvcmRzIG9mIE5pY29zdHJhdHVzLCBoYXZpbmcgbm8gaWRlYQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2FzIGx5aW5nLCBJIGFuc3dlcmVkLCBhcyB3YXMgbmF0dXJhbCBmb3IgYSB5b3VuZyBtYW4gd2hvIHdhcyBhbgogICAgICAgICAgICAgICAgICAgIGludGltYXRlIGZyaWVuZCwgYW5kIHdobyB3YXMgZmFyIGZyb20gdGhpbmtpbmcgdGhhdCBoZSB3b3VsZCBiZSBkZWZyYXVkZWQsCiAgICAgICAgICAgICAgICAgICAg4oCcTmljb3N0cmF0dXMsIGluIHRpbWUgcGFzdCBJIHdhcyBhIHRydWUgZnJpZW5kIHRvIHlvdSwgYW5kIG5vdyBpbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgbWlzZm9ydHVuZXMgSSBoYXZlIGhlbHBlZCB5b3UgdG8gdGhlIGZ1bGwgZXh0ZW50IG9mIG15IHBvd2VyLiBCdXQgc2luY2UgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9tZW50IHlvdSBhcmUgdW5hYmxlIHRvIGZpbmQgdGhlIHdob2xlIGFtb3VudCBkdWUsIEkgaW5kZWVkIGhhdmUgbm8gZnVuZHMgb24KICAgICAgICAgICAgICAgICAgICBoYW5kLCBub3IgaGF2ZSBJIG1vbmV5IGFueSBtb3JlIHRoYW4geW91cnNlbGYsIGJ1dCBJIGdyYW50IHlvdSBhIGxvYW4gb2YKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBwYXJ0IG9mIG15IHByb3BlcnR5IHlvdSBjaG9vc2UsIGZvciB5b3UgdG8gbW9ydGdhZ2UgZm9yIHRoZSBiYWxhbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBkZWJ0LCBhbmQgdG8gdXNlIHRoZSBtb25leSB3aXRob3V0IGludGVyZXN0IGZvciBhIHllYXIsIGFuZCB0byBwYXkgb2ZmIHRoZQogICAgICAgICAgICAgICAgICAgIHN0cmFuZ2Vycy4gV2hlbiB5b3UgaGF2ZSBtYWRlIHRoZSBjb2xsZWN0aW9uIGZyb20geW91ciBmcmllbmRzLCBwYXkgb2ZmIG15CiAgICAgICAgICAgICAgICAgICAgbW9ydGdhZ2UsIGFzIHlvdSB5b3Vyc2VsZiBwcm9wb3NlLuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['53.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5IZWFyaW5nIHRoaXMsIE5pY29zdHJhdHVzIHRoYW5rZWQgbWUsIGFuZCBiYWRlIG1lIHRvIHByb2NlZWQgd2l0aCB0aGUgbWF0dGVyCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhbGwgc3BlZWQgYmVmb3JlIHRoZSBleHBpcmF0aW9uIG9mIHRoZSBkYXlzIGluIHRoZSBjb3Vyc2Ugb2Ygd2hpY2ggaGUgc2FpZAogICAgICAgICAgICAgICAgICAgIGhlIG11c3QgcGF5IHRoZSByYW5zb20uIEFjY29yZGluZ2x5IEkgbW9ydGdhZ2VkIG15IGxvZGdpbmctaG91c2UgZm9yIHNpeHRlZW4KICAgICAgICAgICAgICAgICAgICBtaW5hZSwgdG8gQXJjZXNhcyBvZiBQYW1ib3RhZGFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QYW1ib3RhZGFlLCBhCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbWUgb2YgdGhlIHRyaWJlIEVyZWN0aGXDr3MuPC9ub3RlPiB3aG9tIE5pY29zdHJhdHVzIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICBpbnRyb2R1Y2VkIHRvIG1lLCBhbmQgaGUgbGVudCBtZSB0aGUgbW9uZXkgYXQgdGhlIGludGVyZXN0IHJhdGUgb2YgZWlnaHQgb2JvbHMgYQogICAgICAgICAgICAgICAgICAgIG1vbnRoIGZvciBlYWNoIG1pbmEuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGF0IHRoZSByYXRlIG9mIDE2CiAgICAgICAgICAgICAgICAgICAgICAgIHBlciBjZW50Ljwvbm90ZT4gQnV0LCB3aGVuIE5pY29zdHJhdHVzIGhhZCBnb3QgdGhlIG1vbmV5LCBzbyBmYXIgZnJvbQogICAgICAgICAgICAgICAgICAgIHNob3dpbmcgYW55IGdyYXRpdHVkZSBmb3Igd2hhdCBJIGhhZCBkb25lIGZvciBoaW0sIGhlIGltbWVkaWF0ZWx5IGJlZ2FuIHRvIGxheSBhCiAgICAgICAgICAgICAgICAgICAgcGxvdCBhZ2FpbnN0IG1lIHRvIHJvYiBtZSBvZiBteSBtb25leSBhbmQgYmVjb21lIG15IGVuZW15LCBpbiBvcmRlciB0aGF0IEkgbWlnaHQKICAgICAgICAgICAgICAgICAgICBiZSBhdCBhIGxvc3MgaG93IHRvIGRlYWwgd2l0aCB0aGUgbWF0dGVyLCBzaW5jZSBJIHdhcyB5b3VuZyBhbmQgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGV4cGVyaWVuY2UgaW4gYWZmYWlycywgYW5kIG1pZ2h0IG5vdCBleGFjdCBmcm9tIGhpbSB0aGUgc3VtIGZvciB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICBsb2RnaW5nLWhvdXNlIGhhZCBiZWVuIG1vcnRnYWdlZCwgYnV0IG1pZ2h0IGZvcmdpdmUgaGltIHRoZSBkZWJ0LiA8L3RyYW5zbGF0aW9uPg=="
translation['53.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWNjb3JkaW5nbHkgaGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBjb25zcGlyZWQgYWdhaW5zdCBtZSB3aXRoIHNvbWUgcGVyc29ucyB3aXRoIHdob20gSSB3YXMgYXQgbGF3LCBhbmQgYm91bmQgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGJ5IGFuIG9hdGggdG8gc3VwcG9ydCB0aGVtOyB0aGVuLCBhZnRlciBteSBhY3Rpb24gYWdhaW5zdCB0aGVtIGhhZCBjb21tZW5jZWQsIGhlCiAgICAgICAgICAgICAgICAgICAgZGl2dWxnZWQgdG8gdGhlbSBteSBhcmd1bWVudHMsIHdpdGggd2hpY2ggaGUgd2FzIGFjcXVhaW50ZWQsIGFuZCBoZSBlbnRlcmVkIG1lCiAgICAgICAgICAgICAgICAgICAgYXMgYSBkZWJ0b3IgdG8gdGhlIHB1YmxpYyB0cmVhc3VyeSB0byB0aGUgYW1vdW50IG9mIHNpeCBodW5kcmVkIGFuZCB0ZW4KICAgICAgICAgICAgICAgICAgICBkcmFjaG1hZSwgYXMgYSBmaW5lIGZvciBub24tcHJvZHVjdGlvbiBvZiBwcm9wZXJ0eSDvvIhhbHRob3VnaCBubwogICAgICAgICAgICAgICAgICAgIGNpdGF0aW9uIGhhZCBiZWVuIHNlcnZlZCB1cG9uIG1l77yJLCBoYXZpbmcgZ290IHRoZSBjYXNlIGJyb3VnaHQgb24KICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIHRoZSBhZ2VuY3kgb2YgTHljaWRhcyB0aGUgbWlsbGVyLiBBcyB3aXRuZXNzZXMgYWdhaW5zdCBtZSB0byBhdHRlc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0YXRpb24sIGhlIGVudGVyZWQgdGhlIG5hbWUgb2YgaGlzIG93biBicm90aGVyLCB0aGlzIEFyZXRodXNpdXMgdG8gd2hvbSB0aGVzZQogICAgICAgICAgICAgICAgICAgIHNsYXZlcyBiZWxvbmcsIGFuZCBhbm90aGVyIHBlcnNvbjsgYW5kIHRoZXkgd2VyZSBwcmVwYXJlZCwgaW4gdGhlIGV2ZW50IG9mIG15CiAgICAgICAgICAgICAgICAgICAgYnJpbmdpbmcgdG8gYSBwcmVsaW1pbmFyeSBoZWFyaW5nIHRoZSBzdWl0cyB3aGljaCBJIGhhZCBlbnRlcmVkIGFnYWluc3QgbXkKICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSByZWZlcmVuY2UgaXMgdG8gaGlzIGxhdy1zdWl0cwogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIFBob3JtaW9uIGFuZCBTdGVwaGFudXM7IHNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM2IiB2YWxpZD0ieWVzIj5EZW0uIDM2PC9iaWJsPiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0NSIgdmFsaWQ9InllcyI+RGVtLiA0NTwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDYiIHZhbGlkPSJ5ZXMiPkRlbS4gNDY8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICB3aG8gd2VyZSB3cm9uZ2luZyBtZSwgdG8gbGF5IGFuIGluZm9ybWF0aW9uIGFnYWluc3QgbWUsIGFzIGJlaW5nIGEgZGVidG9yIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHRyZWFzdXJ5LCBhbmQgdGhyb3cgbWUgaW50byBwcmlzb24uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzYiIHZhbGlkPSJ5ZXMiPkRlbS4gMzY8L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ1IiB2YWxpZD0ieWVzIj5EZW0uIDQ1PC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0NiIgdmFsaWQ9InllcyI+RGVtLiA0NjwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['53.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbW9yZQogICAgICAgICAgICAgICAgICAgIHRoYW4gYWxsIHRoaXMsIGhlIHdobyBoYWQgc2VjdXJlZCBhIGp1ZGdlbWVudCBhZ2FpbnN0IG1lIGZvciBzaXggaHVuZHJlZCBhbmQgdGVuCiAgICAgICAgICAgICAgICAgICAgZHJhY2htYWUsIHdoZW4gbm8gY2l0YXRpb24gaGFkIGJlZW4gc2VydmVkIHVwb24gbWUsIGFuZCBoYWQgZW50ZXJlZCB0aGUgbmFtZXMgb2YKICAgICAgICAgICAgICAgICAgICBmYWxzZSB3aXRuZXNzZXMgdG8gdGhlIGNpdGF0aW9uLCBtYWRlIGEgZm9yY2libGUgZW50cnkgaW50byBteSBob3VzZSBhbmQgY2FycmllZAogICAgICAgICAgICAgICAgICAgIG9mZiBhbGwgdGhlIGZ1cm5pdHVyZSB0byB0aGUgdmFsdWUgb2YgbW9yZSB0aGFuIHR3ZW50eSBtaW5hZTsgaGUgZGlkIG5vdCBsZWF2ZSBhCiAgICAgICAgICAgICAgICAgICAgdGhpbmcuIEkgdGhvdWdodCBpdCBteSBkdXR5IHRvIGF2ZW5nZSBteXNlbGYsIGFuZCBhZnRlciBwYXlpbmcgdGhlIGRlYnQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgdHJlYXN1cnkgb24gaGVhcmluZyBvZiB0aGUgZmluZSwgSSB3YXMgcHJvY2VlZGluZyB0byBpbmRpY3QgdGhlIG9uZSB3aG8gYWRtaXR0ZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhZCBjaXRlZCBtZSB0byBhcHBlYXIg77yIdGhhdCBpcywgQXJldGh1c2l1c++8iSwgb24gYQogICAgICAgICAgICAgICAgICAgIGNoYXJnZSBvZiBmYWxzZSBjaXRhdGlvbiwgYXMgdGhlIGxhdyBkaXJlY3RzLiBIZSwgaG93ZXZlciwgY2FtZSB0byBteSBmYXJtIGJ5CiAgICAgICAgICAgICAgICAgICAgbmlnaHQsIGN1dCBvZmYgYWxsIHRoZSBjaG9pY2UgZnJ1aXQtZ3JhZnRzIHRoYXQgd2VyZSB0aGVyZSwgYW5kIHRoZSB0cmVlLXZpbmVzCiAgICAgICAgICAgICAgICAgICAgYXMgd2VsbCwgYW5kIGJyb2tlIGRvd24gdGhlIG51cnNlcnktYmVkcyBvZiBvbGl2ZSB0cmVlcyBzZXQgaW4gcm93cyByb3VuZCBhYm91dCwKICAgICAgICAgICAgICAgICAgICBtYWtpbmcgd29yc2UgaGF2b2MgdGhhbiBlbmVtaWVzIGluIHdhciB3b3VsZCBoYXZlIGRvbmUuIDwvdHJhbnNsYXRpb24+"
translation['53.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3JlIHRoYW4gdGhpcywgYXMgdGhleSB3ZXJlIG5laWdoYm9ycyBhbmQgbXkgZmFybSBhZGpvaW5lZAogICAgICAgICAgICAgICAgICAgIHRoZWlycywgdGhleSBzZW50IGludG8gaXQgaW4gdGhlIGRheXRpbWUgYSB5b3VuZyBib3kgd2hvIHdhcyBhbiBBdGhlbmlhbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgcHV0IGhpbSB1cCB0byBwbHVja2luZyBvZmYgdGhlIGZsb3dlcnMgZnJvbSBteSByb3NlLWJlZCwgaW4gb3JkZXIgdGhhdCwgaWYgSQogICAgICAgICAgICAgICAgICAgIGNhdWdodCBoaW0gYW5kIGluIGEgZml0IG9mIGFuZ2VyIHB1dCBoaW0gaW4gYm9uZHMgb3Igc3RydWNrIGhpbSwgYXNzdW1pbmcgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgYSBzbGF2ZSwgdGhleSBtaWdodCBicmluZyBhZ2FpbnN0IG1lIGFuIGluZGljdG1lbnQgZm9yIGFzc2F1bHQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoZW4gdGhleSBmYWlsZWQgaW4gdGhpcywgYW5kIEkgbWVyZWx5IGNhbGxlZCB3aXRuZXNzZXMKICAgICAgICAgICAgICAgICAgICB0byBvYnNlcnZlIHRoZSB3cm9uZyBkb25lIG1lIHdpdGhvdXQgY29tbWl0dGluZyBhbnkgb2ZmZW5jZSBhZ2FpbnN0IHRoZW0gbXlzZWxmLAogICAgICAgICAgICAgICAgICAgIHRoZXkgcGxheWVkIGFnYWluc3QgbWUgdGhlIG1vc3QgZGFzdGFyZGx5IHRyaWNrLiA8L3RyYW5zbGF0aW9uPg=="
translation['53.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgaGFkIG5vdyBicm91Z2h0IG15IGluZGljdG1lbnQgb2YgaGltIGZvciBmYWxzZQogICAgICAgICAgICAgICAgICAgIGNpdGF0aW9uIHRvIHRoZSBwcmVsaW1pbmFyeSBleGFtaW5hdGlvbiBhbmQgd2FzIGFib3V0IHRvIGJyaW5nIHRoZSBjYXNlIGludG8KICAgICAgICAgICAgICAgICAgICBjb3VydCwgTmljb3N0cmF0dXMgbGF5IGluIHdhaXQgZm9yIG1lIG5lYXIgdGhlIHN0b25lIHF1YXJyaWVzLCBhcyBJIHdhcyBjb21pbmcKICAgICAgICAgICAgICAgICAgICBiYWNrIGxhdGUgZnJvbSBQZWlyYWV1cywgYW5kIHN0cnVjayBtZSB3aXRoIGhpcyBmaXN0IGFuZCBzZWl6aW5nIG1lIGFyb3VuZCB0aGUKICAgICAgICAgICAgICAgICAgICB3YWlzdCB3YXMgb24gdGhlIHBvaW50IG9mIHRocm93aW5nIG1lIGludG8gdGhlIHF1YXJyaWVzLCBoYWQgbm90IHNvbWUgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgY29tZSB1cCBhbmQsIGhlYXJpbmcgbXkgY3JpZXMsIHJ1biB0byBteSBhc3Npc3RhbmNlLiBBIGZldyBkYXlzIGxhdGVyLCBJIGNhbWUKICAgICAgICAgICAgICAgICAgICBpbnRvIGNvdXJ0IG9uIGEgZGF5IHRoYXQgd2FzIGRpdmlkZWQgdXAgYW1vbmcgYSBudW1iZXIgb2YgY2FzZXMsIGFuZCBwcm92aW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBoYWQgZmFsc2VseSBhdHRlc3RlZCB0aGUgY2l0YXRpb24gYW5kIHdhcyBndWlsdHkgb2YgYWxsIHRoZSBvdGhlciBjcmltZXMKICAgICAgICAgICAgICAgICAgICB3aGljaCBJIGhhdmUgbWVudGlvbmVkLCBJIHdvbiBhIGNvbnZpY3Rpb24uIDwvdHJhbnNsYXRpb24+"
translation['53.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGl0IGNhbWUgdG8gZml4aW5nIHRoZSBwZW5hbHR5LCB0aGUganVyeW1lbiB3aXNoZWQgdG8gaW1wb3NlIGEgc2VudGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBkZWF0aCB1cG9uIGhpbSwgYnV0IEkgYmVnZ2VkIHRoZW0gdG8gZG8gbm90aGluZyBsaWtlIHRoYXQgb24gYSBwcm9zZWN1dGlvbgogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgYnkgbWUsIGFuZCBJIGFncmVlZCB0byB0aGUgZmluZSBvZiBhIHRhbGVudCB3aGljaCB0aGVzZSBtZW4gdGhlbXNlbHZlcwogICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkLOKAlG5vdCB0aGF0IEkgd2lzaGVkIHRvIHNhdmUgQXJldGh1c2l1cyBmcm9tIHRoZSBkZWF0aCBwZW5hbHR5CiAgICAgICAgICAgICAgICAgICAg77yIZm9yIGhlIGRlc2VydmVkIGRlYXRoIG9uIGFjY291bnQgb2YgdGhlIHdyb25ncyB3aGljaCBoZSBoYWQgY29tbWl0dGVkCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBtZe+8iSwgYnV0IHRoYXQgSSwgUGFzaW9uJ3Mgc29uLCBtYWRlIGEgY2l0aXplbiBieSBhIGRlY3JlZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBwZW9wbGUsIG1pZ2h0IG5vdCBiZSBzYWlkIHRvIGhhdmUgY2F1c2VkIHRoZSBkZWF0aCBvZiBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBoYXZlIHRvbGQgeW91IHRoZQogICAgICAgICAgICAgICAgICAgIHRydXRoLCBJIHNoYWxsIGNhbGwgYmVmb3JlIHlvdSB3aXRuZXNzZXMgdG8gYWxsIHRoZXNlIGZhY3RzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['53.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHdyb25ncyBkb25lCiAgICAgICAgICAgICAgICAgICAgdG8gbWUgYnkgdGhlc2UgcGVvcGxlLCBtZW4gb2YgdGhlIGp1cnksIHdoaWNoIGxlZCBtZSB0byBmaWxlIHRoZSBpbmZvcm1hdGlvbiwgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgbWFkZSBjbGVhciB0byB5b3UuIFRoYXQgdGhlc2Ugc2xhdmVzIGFyZSB0aGUgcHJvcGVydHkgb2YgQXJldGh1c2l1cywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIGxpc3RlZCB0aGVtIGluIHRoZSBpbnZlbnRvcnkgYmVjYXVzZSB0aGV5IGZvcm1lZCBhIHBhcnQgb2YgaGlzIGVzdGF0ZSwgSQogICAgICAgICAgICAgICAgICAgIHNoYWxsIHByb2NlZWQgdG8gc2hvdyB5b3UuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDMyNDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMzI0NjgiPkNlcmRvbjwvcGxhY2VOYW1lPiBoZQogICAgICAgICAgICAgICAgICAgIHJlYXJlZCBmcm9tIGVhcmx5IGNoaWxkaG9vZDsgYW5kIHRvIHByb3ZlIHRoYXQgaGUgYmVsb25nZWQgdG8gQXJldGh1c2l1cywgSQogICAgICAgICAgICAgICAgICAgIHNoYWxsIGJyaW5nIGJlZm9yZSB5b3Ugd2l0bmVzc2VzIHdobyBrbm93IHRoZSBmYWN0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['53.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBzaGFsbCBhbHNvCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgYmVmb3JlIHlvdSB3aXRuZXNzZXMgdG8gcHJvdmUgdGhhdCBBcmV0aHVzaXVzIGdvdCB0aGUgd2FnZXMgb24gaGlzIGFjY291bnQKICAgICAgICAgICAgICAgICAgICBmcm9tIGFsbCB0aGUgcGVyc29ucyB3aXRoIHdob20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMzI0NjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzMjQ2OCI+Q2VyZG9uPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgZXZlciB3b3JrZWQsIGFuZCB0aGF0IGhlIHVzZWQsIGFzIGJlaW5nIGhpcyBtYXN0ZXIsIHRvIHJlY2VpdmUgY29tcGVuc2F0aW9uIG9yCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBpdCwgd2hlbmV2ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMzI0NjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzMjQ2OCI+Q2VyZG9uPC9wbGFjZU5hbWU+IHdyb3VnaHQgYW55CiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXMgZm9yIE1hbmVzOiBBcmV0aHVzaXVzIGxlbnQgc29tZSBtb25leQogICAgICAgICAgICAgICAgICAgIHRvIEFyY2hlcG9saXMgb2YgUGVpcmFldXMsIGFuZCB3aGVuIEFyY2hlcG9saXMgd2FzIHVuYWJsZSB0byBwYXkgZWl0aGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGludGVyZXN0IG9yIHRoZSBwcmluY2lwYWwgaW4gZnVsbCwgaGUgbWFkZSBvdmVyIHRvIGhpbSBNYW5lcyBpbgogICAgICAgICAgICAgICAgICAgICAgICBzZXR0bGVtZW50LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGgsIEkgc2hhbGwgYnJpbmcgYmVmb3JlIHlvdSB3aXRuZXNzZXMgdG8gZXN0YWJsaXNoIHRoZXNlIHN0YXRlbWVudHMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RnVydGhlcm1vcmUsCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgZm9sbG93aW5nIGZhY3RzIGFsc28geW91IHdpbGwgc2VlIHRoYXQgdGhlIG1lbiBiZWxvbmcgdG8gQXJldGh1c2l1cy4KICAgICAgICAgICAgICAgICAgICBGb3Igd2hlbmV2ZXIgdGhleSBib3VnaHQgdXAgdGhlIHByb2R1Y2Ugb2YgYW4gb3JjaGFyZCwgb3IgaGlyZWQgdGhlbXNlbHZlcyBvdXQKICAgICAgICAgICAgICAgICAgICB0byByZWFwIGEgaGFydmVzdCwgb3IgdW5kZXJ0b29rIGFueSBvdGhlciBwaWVjZSBvZiBmYXJtaW5nIHdvcmssIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIEFyZXRodXNpdXMgd2hvIG1hZGUgdGhlIHB1cmNoYXNlIG9yIHBhaWQgdGhlIHdhZ2VzIG9uIHRoZWlyIGJlaGFsZi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBJIGFtIHNwZWFraW5nIHRoZSB0cnV0aCwgSSBzaGFsbCBicmluZwogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB5b3Ugd2l0bmVzc2VzIHRvIGVzdGFibGlzaCB0aGVzZSBzdGF0ZW1lbnRzIGFsc28uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGV2aWRlbmNlIHdoaWNoIEkgaGFkIHRvIG9mZmVyIHRvIHByb3ZlIHRoYXQgdGhlIHNsYXZlcyBiZWxvbmcgdG8gQXJldGh1c2l1cywgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgbGFpZCBiZWZvcmUgeW91LiBJIHdpc2gsIGhvd2V2ZXIsIHRvIHNwZWFrIGFsc28gYWJvdXQgdGhlIGNoYWxsZW5nZSB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiB0ZW5kZXJlZCBtZSwgYW5kIHdoaWNoIEkgYWxzbyB0ZW5kZXJlZCB0aGVtLiBUaGV5IGNoYWxsZW5nZWQgbWUgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlbGltaW5hcnkgaGVhcmluZywgc3RhdGluZyB0aGF0IHRoZXkgd2VyZSByZWFkeSB0byBkZWxpdmVyIHVwIHRoZSBzbGF2ZXMsIHRoYXQKICAgICAgICAgICAgICAgICAgICBJIG15c2VsZiBtaWdodCBwdXQgdGhlbSB0byB0aGUgdG9ydHVyZSwgdGhlaXIgd2lzaCBiZWluZyB0aGF0IHRoaXMgb2ZmZXIgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgc2VydmUgYXMgYSBzb3J0IG9mIGV2aWRlbmNlIGZvciB0aGVpciBzaWRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['53.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5JCiAgICAgICAgICAgICAgICAgICAgYW5zd2VyZWQsIGhvd2V2ZXIsIGluIHRoZSBwcmVzZW5jZSBvZiB3aXRuZXNzZXMsIHRoYXQgSSB3YXMgcmVhZHkgdG8gZ28gd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZW0gdG8gdGhlIHNlbmF0ZSwgYW5kIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIHNlbmF0ZSBvciB0aGUgRWxldmVuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBib2FyZCBvZiBwb2xpY2UgY29tbWlzc2lvbmVycyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uPC9ub3RlPiB0byByZWNlaXZlIHRoZSBzbGF2ZXMKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHRvcnR1cmUsIHRlbGxpbmcgdGhlbSB0aGF0LCBpZiBteSBzdWl0IGFnYWluc3QgdGhlbSBoYWQgYmVlbiBhIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBvbmUsIEkgc2hvdWxkIGhhdmUgYWNjZXB0ZWQgdGhlIHNsYXZlcyBmb3IgdGhlIHRvcnR1cmUsIGlmIHRoZXkgaGFkIG9mZmVyZWQKICAgICAgICAgICAgICAgICAgICB0aGVtLCBidXQgdGhhdCwgYXMgaXQgd2FzLCBib3RoIHRoZSBzbGF2ZXMgYW5kIHRoZSBpbmZvcm1hdGlvbiBiZWxvbmdlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNpbmNlIEFyZXRodXNpdXMgd2FzIGEKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUtZGVidG9yLjwvbm90ZT47IGFuZCB0aGVyZWZvcmUgdGhlIGV4YW1pbmF0aW9uIGJ5IHRoZSB0b3J0dXJlIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGNvbmR1Y3RlZCBieSBhIHB1YmxpYyBvZmZpY2lhbC4gPC90cmFuc2xhdGlvbj4="
translation['53.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5JIHRob3VnaHQgdGhhdAogICAgICAgICAgICAgICAgICAgIGl0IHdhcyBub3QgcHJvcGVyIGZvciBtZSBhcyBhIHByaXZhdGUgaW5kaXZpZHVhbCB0byBwdXQgcHVibGljIHNsYXZlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICB0b3J0dXJlOyBmb3IgSSB3YXMgbm90IGVtcG93ZXJlZCB0byBjb25kdWN0IHRoZSB0b3J0dXJlLCBub3Igd2FzIGl0IHByb3BlciB0aGF0CiAgICAgICAgICAgICAgICAgICAgSSBzaG91bGQgZGVjaWRlIG9uIHRoZSBtZWFuaW5nIG9mIHRoZSBhbnN3ZXJzIGdpdmVuIGJ5IHRoZSBtZW4uIEkgdGhvdWdodCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIEVsZXZlbiwgb3IgcGVyc29ucyBjaG9zZW4gYnkgdGhlIHNlbmF0ZSwgc2hvdWxkIGhhdmUgZXZlcnl0aGluZyB3cml0dGVuCiAgICAgICAgICAgICAgICAgICAgZG93biwgYW5kIHRoZW4sIGhhdmluZyBzZWFsZWQgdXAgdGhlIGV2aWRlbmNlIGV4dG9ydGVkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHRvcnR1cmXigJR0aGUgYW5zd2VycywgdGhhdCBpcywgZ2l2ZW4gYnkgdGhlIG1lbuKAlHNob3VsZAogICAgICAgICAgICAgICAgICAgIHByb2R1Y2UgaXQgaW4gY291cnQsIHRoYXQgeW91IG1pZ2h0IGhlYXIgaXQsIGFuZCBpbiB0aGUgbGlnaHQgb2YgdGhpcyByZWFjaAogICAgICAgICAgICAgICAgICAgIHdoYXRldmVyIHZlcmRpY3QgeW91IG1pZ2h0IHRoaW5rIHJpZ2h0LiA8L3RyYW5zbGF0aW9uPg=="
translation['53.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYKICAgICAgICAgICAgICAgICAgICB0aGUgbWVuIGhhZCBiZWVuIHB1dCB0byB0aGUgdG9ydHVyZSBwcml2YXRlbHkgYnkgbWUsIGV2ZXJ5dGhpbmcgd291bGQgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgZGlzcHV0ZWQgYnkgdGhlc2UgbWVuOyBidXQsIGlmIHB1YmxpY2x5LCB3ZSBzaG91bGQgaGF2ZSBrZXB0IHF1aWV0LCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgb2ZmaWNlcnMgb3IgdGhvc2UgY2hvc2VuIGJ5IHRoZSBzZW5hdGUgd291bGQgaGF2ZSBjYXJyaWVkIG9uIHRoZSB0b3J0dXJlIGFzIGZhcgogICAgICAgICAgICAgICAgICAgIGFzIHRoZXkgc2F3IGZpdC4gV2hlbiBJIG1hZGUgdGhpcyBvZmZlciwgdGhleSBkZWNsYXJlZCB0aGF0IHRoZXkgd291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgZGVsaXZlciB1cCB0aGUgc2xhdmVzIHRvIHRoZSBvZmZpY2lhbHMsIG5vciB3b3VsZCB0aGV5IGdvIHdpdGggbWUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmF0ZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBJIGFtIHNwZWFraW5nIHRoZSB0cnV0aCwKICAgICAgICAgICAgICAgICAgICBjYWxsLCBwbGVhc2UsIHRoZSB3aXRuZXNzZXMgdG8gdGhlc2UgZmFjdHMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlaXIgc2hhbWVsZXNzCiAgICAgICAgICAgICAgICAgICAgaW1wdWRlbmNlIGluIGxheWluZyBjbGFpbSB0byB3aGF0IGlzIHlvdXJzIGFwcGVhcnMgdG8gbWUgbWFuaWZlc3Qgb24gbWFueQogICAgICAgICAgICAgICAgICAgIGdyb3VuZHMsIGJ1dCBJIHNoYWxsIG1ha2UgdGhlaXIgY2hhcmFjdGVyIHRvIGFwcGVhciBtb3N0IGNsZWFybHkgYnkgYSByZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICB0byB5b3VyIGxhd3MuIEZvciB0aGVzZSBtZW4sIHdoZW4gdGhlIGp1cm9ycyB3aXNoZWQgdG8gaW1wb3NlIGEgc2VudGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBkZWF0aCB1cG9uIEFyZXRodXNpdXMsIGJlZ2dlZCB0aGUganVyb3JzIHRvIGltcG9zZSBhIGZpbmUgaW4gbW9uZXksIGFuZCBiZWdnZWQKICAgICAgICAgICAgICAgICAgICBtZSB0byBnaXZlIG15IGFzc2VudCB0byB0aGlzOyBhbmQgdGhleSBhZ3JlZWQgdG8gYmUgam9pbnRseSByZXNwb25zaWJsZSBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcGF5bWVudC4gPC90cmFuc2xhdGlvbj4="
translation['53.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc28gZmFyIGFyZSB0aGV5IGZyb20gbWFraW5nCiAgICAgICAgICAgICAgICAgICAgcGF5bWVudCBhY2NvcmRpbmcgdG8gdGhlaXIgZ3VhcmFudGVlLCB0aGF0IHRoZXkgZXZlbiBsYXkgY2xhaW0gdG8gd2hhdCBpcyB5b3Vycy4KICAgICAgICAgICAgICAgICAgICBBbmQgeWV0IHRoZSBsYXdzIGVuYWN0IHRoYXQgYW55IG1hbidzIGVzdGF0ZSBzaGFsbCBiZSBjb25maXNjYXRlZCB3aG8sIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgZ3VhcmFudGVlaW5nIGFueSBzdW0gZHVlIHRvIHRoZSBzdGF0ZSwgZG9lcyBub3QgbWFrZSBnb29kIGhpcyBndWFyYW50ZWU7IHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgZXZlbiBpZiB0aGUgc2xhdmVzIGJlbG9uZ2VkIHRvIHRoZW0sIHRoZXkgb3VnaHQgdG8gYmUgc3RhdGUtcHJvcGVydHksIGlmCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhd3MgYXJlIG9mIGFueSB1c2UuIDwvdHJhbnNsYXRpb24+"
translation['53.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYmVmb3JlIEFyZXRodXNpdXMKICAgICAgICAgICAgICAgICAgICBiZWNhbWUgYSBkZWJ0b3IgdG8gdGhlIHN0YXRlLCBoZSB3YXMgYWRtaXR0ZWQgdG8gYmUgdGhlIHJpY2hlc3Qgb2YgdGhlIGJyb3RoZXJzLAogICAgICAgICAgICAgICAgICAgIGJ1dCBzaW5jZSB0aGUgbGF3cyBkZWNsYXJlIGhpcyBwcm9wZXJ0eSB0byBiZSB5b3VycywgQXJldGh1c2l1cyBpcyBtYWRlIG91dCB0bwogICAgICAgICAgICAgICAgICAgIGJlIGEgcG9vciBtYW4sIGFuZCBoaXMgbW90aGVyIGxheXMgY2xhaW0gdG8gb25lIHBhcnQgb2YgaGlzIHByb3BlcnR5LCBhbmQgaGlzCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlcnMgdG8gYW5vdGhlci4gSWYgdGhleSBoYWQgd2lzaGVkIHRvIGFjdCBmYWlybHkgdG93YXJkIHlvdSwgdGhleSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBoYXZlIGRpc2Nsb3NlZCB0aGUgZW50aXJlIGVzdGF0ZSBvZiBBcmV0aHVzaXVzLCBhbmQgdGhlbiBoYXZlIGZpbGVkIGEgY2xhaW0sIGlmCiAgICAgICAgICAgICAgICAgICAgYW55IG9mIHRoZWlyIG93biBwcm9wZXJ0eSBoYWQgYmVlbiBpbmNsdWRlZCBpbiB0aGUgaW52ZW50b3J5LiA8L3RyYW5zbGF0aW9uPg=="
translation['53.29'] = ""
translation['54.Intro'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJJbnRybyIgdW5pdD0icGFydCIgLz48L3RyYW5zbGF0aW9uPg=="
translation['54.Narr'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaXRoIGdyb3NzIG91dHJhZ2UgSSBoYXZlIG1ldCwgbWVuIG9mIHRoZSBqdXJ5LCBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBoYW5kcyBvZiB0aGUgZGVmZW5kYW50LCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGFuZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgc3VmZmVyZWQgc3VjaCBib2RpbHkgaW5qdXJ5IHRoYXQgZm9yIGEgdmVyeSBsb25nIHRpbWUgbmVpdGhlciBteSByZWxhdGl2ZXMgbm9yCiAgICAgICAgICAgICAgICAgICAgYW55IG9mIHRoZSBhdHRlbmRpbmcgcGh5c2ljaWFucyB0aG91Z2h0IHRoYXQgSSBzaG91bGQgc3Vydml2ZS4gQ29udHJhcnkgdG8KICAgICAgICAgICAgICAgICAgICBleHBlY3RhdGlvbiwgaG93ZXZlciwgSSBkaWQgcmVjb3ZlciBhbmQgcmVnYWluIG15IHN0cmVuZ3RoLCBhbmQgSSB0aGVuIGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGhpbSB0aGlzIGFjdGlvbiBmb3IgdGhlIGFzc2F1bHQuIEFsbCBteSBmcmllbmRzIGFuZCByZWxhdGl2ZXMsIHdob3NlCiAgICAgICAgICAgICAgICAgICAgYWR2aWNlIEkgYXNrZWQsIGRlY2xhcmVkIHRoYXQgZm9yIHdoYXQgaGUgaGFkIGRvbmUgdGhlIGRlZmVuZGFudCB3YXMgbGlhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgc3VtbWFyeSBzZWl6dXJlIGFzIGEgaGlnaHdheW1hbiwgb3IgdG8gcHVibGljIGluZGljdG1lbnRzIGZvciBjcmltaW5hbAogICAgICAgICAgICAgICAgICAgICAgICBvdXRyYWdlPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BcyBndWlsdHkgb2YgaGlnaHdheSByb2JiZXJ5IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQgaGFkIG1hZGUgaGltc2VsZiBsaWFibGUgdG8gc3VtbWFyeSBhcnJlc3Qg77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4DOsc6zz4nOs+G9tTwvZm9yZWlnbj7vvIksIGFuZCB0aGUgZ3Jhdml0eSBvZiBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgYXNzYXVsdCB3b3VsZCBoYXZlIGp1c3RpZmllZCBhIHB1YmxpYyBpbmRpY3RtZW50IGZvciBjcmltaW5hbCBvdXRyYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvZXOss+BzrXPic+CIM6zz4HOsc+G4b21PC9mb3JlaWduPu+8iSwgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIGVpdGhlciBvZiB3aGljaCBjcmltZXMgaGUgd291bGQsIGlmIGNvbnZpY3RlZCwgaGF2ZSBzdWZmZXJlZCBhIGhlYXZ5CiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmFsdHkuIFRoZSBwcml2YXRlIHN1aXQgZm9yIGFzc2F1bHQgYW5kIGJhdHRlcnkg77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrHhvLDOus614b23zrHPgiDOtOG9t866zrc8L2ZvcmVpZ24+77yJIGVudGFpbGVkIG1lcmVseSBhIGZpbmUKICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgcGFpZCB0byB0aGUgcGxhaW50aWZmLjwvbm90ZT47IGJ1dCB0aGV5IHVyZ2VkIGFuZCBhZHZpc2VkIG1lIG5vdCB0bwogICAgICAgICAgICAgICAgICAgIHRha2UgdXBvbiBteXNlbGYgbWF0dGVycyB3aGljaCBJIHNob3VsZCBub3QgYmUgYWJsZSB0byBjYXJyeSwgb3IgdG8gYXBwZWFyIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgYnJpbmdpbmcgc3VpdCBmb3IgdGhlIG1hbHRyZWF0bWVudCBJIGhhZCByZWNlaXZlZCBpbiBhIG1hbm5lciB0b28gYW1iaXRpb3VzIGZvcgogICAgICAgICAgICAgICAgICAgIG9uZSBzbyB5b3VuZy4gSSB0b29rIHRoaXMgY291cnNlLCB0aGVyZWZvcmUsIGFuZCwgaW4gZGVmZXJlbmNlIHRvIHRoZWlyIGFkdmljZSwKICAgICAgICAgICAgICAgICAgICBoYXZlIGluc3RpdHV0ZWQgYSBwcml2YXRlIHN1aXQsIGFsdGhvdWdoIEkgc2hvdWxkIGhhdmUgYmVlbiB2ZXJ5IGdsYWQsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDPgM6xzrPPic6z4b21PC9mb3JlaWduPu+8iSwgYW5kIHRoZSBncmF2aXR5IG9mIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBhc3NhdWx0IHdvdWxkIGhhdmUganVzdGlmaWVkIGEgcHVibGljIGluZGljdG1lbnQgZm9yIGNyaW1pbmFsIG91dHJhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG9lc6yz4HOtc+Jz4IgzrPPgc6xz4bhvbU8L2ZvcmVpZ24+77yJLCBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgZWl0aGVyIG9mIHdoaWNoIGNyaW1lcyBoZSB3b3VsZCwgaWYgY29udmljdGVkLCBoYXZlIHN1ZmZlcmVkIGEgaGVhdnkKICAgICAgICAgICAgICAgICAgICAgICAgcGVuYWx0eS4gVGhlIHByaXZhdGUgc3VpdCBmb3IgYXNzYXVsdCBhbmQgYmF0dGVyeSDvvIg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OseG8sM66zrXhvbfOsc+CIM604b23zrrOtzwvZm9yZWlnbj7vvIkgZW50YWlsZWQgbWVyZWx5IGEgZmluZQogICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBwYWlkIHRvIHRoZSBwbGFpbnRpZmYuPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0byBwcm9zZWN1dGUgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IG9uIGEgY2FwaXRhbCBjaGFyZ2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmb3IgdGhpcyB5b3UKICAgICAgICAgICAgICAgICAgICB3aWxsIGFsbCBwYXJkb24gbWUsIEkgYW0gc3VyZSwgd2hlbiB5b3UgaGVhciB3aGF0IEkgaGF2ZSBzdWZmZXJlZC4gRm9yLCBncmlldm91cwogICAgICAgICAgICAgICAgICAgIGFzIHdhcyB0aGUgaW5qdXJ5IHdoaWNoIGF0IHRoYXQgdGltZSBmZWxsIHRvIG15IGxvdCwgaXQgd2FzIG5vIG1vcmUgc28gdGhhbiB0aGUKICAgICAgICAgICAgICAgICAgICBzdWJzZXF1ZW50IGluc3VsdHMgb2YgdGhlIGRlZmVuZGFudC4gSSBhc2sgYXMgbXkgcmlnaHQsIHRoZXJlZm9yZSwgYW5kIGltcGxvcmUKICAgICAgICAgICAgICAgICAgICB5b3UgYWxsIHdpdGhvdXQgZGlzdGluY3Rpb24sIHRvIGxpc3RlbiB3aXRoIGdvb2R3aWxsLCB3aGlsZSBJIHRlbGwgeW91IHdoYXQgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgc3VmZmVyZWQsIGFuZCB0aGVuLCBpZiB5b3UgdGhpbmsgdGhhdCBJIGhhdmUgYmVlbiB0aGUgdmljdGltIG9mIHdyb25nZnVsCiAgICAgICAgICAgICAgICAgICAgYW5kIGxhd2xlc3MgYWN0cywgdG8gcmVuZGVyIG1lIHRoZSBhaWQgd2hpY2ggaXMgbXkgZHVlLiBJIHNoYWxsIHN0YXRlIHRvIHlvdQogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGJlZ2lubmluZyBlYWNoIGluY2lkZW50IGFzIGl0IG9jY3VycmVkIGluIHRoZSBmZXdlc3Qgd29yZHMgSSBjYW4uCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJOYXJyIiB1bml0PSJwYXJ0IiAvPjwvdHJhbnNsYXRpb24+"
translation['54.Proof'] = ""
translation['54.Concl'] = ""
translation['55.1'] = ""
translation['55.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dAogICAgICAgICAgICAgICAgICAgIHRoZSBjbGFpbSB3YXMgcHJvdmVkIG1hbmlmZXN0bHkgZmFsc2UsIGFuZCBJIGdvdCB0aGUgYmV0dGVyIG9mIHRoYXQgaW50cmlndWU7CiAgICAgICAgICAgICAgICAgICAgdGhlbiwgYWdhaW4sIGhlIHNlY3VyZWQgdHdvIGF3YXJkcyBhZ2FpbnN0IG1lIGZvciBkZWZhdWx0LCBvbmUgaW4gYW4gYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBpbiBoaXMgb3duIG5hbWUgZm9yIG9uZSB0aG91c2FuZCBkcmFjaG1hZSwgYW5kIGFub3RoZXIgaW4gYW4gYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgcGVyc3VhZGVkIGhpcyBicm90aGVyIENhbGxpY3JhdGVzLCB3aG8gaXMgaGVyZSBpbiBjb3VydCwgdG8gYnJpbmcuIEkKICAgICAgICAgICAgICAgICAgICBiZWcgeW91IGFsbCB0byBsaXN0ZW4gdG8gbWUsIGFuZCB0byBnaXZlIG1lIHlvdXIgYXR0ZW50aW9uLCBub3QgYmVjYXVzZSBJIGFtCiAgICAgICAgICAgICAgICAgICAgZ29pbmcgdG8gc2hvdyBteXNlbGYgYW4gYWJsZSBzcGVha2VyLCBidXQgaW4gb3JkZXIgdGhhdCB5b3UgbWF5IGxlYXJuIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZmFjdHMgdGhlbXNlbHZlcywgdGhhdCBJIGFtIG1hbmlmZXN0bHkgdGhlIHZpY3RpbSBvZiBhIG1hbGljaW91cyBhbmQgYmFzZWxlc3MKICAgICAgICAgICAgICAgICAgICBzdWl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['55.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BIHNpbmdsZQogICAgICAgICAgICAgICAgICAgIHBsZWEsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIEkgYnJpbmcgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgeW91IHRvIGFuc3dlciBhbGwgdGhlIGFyZ3VtZW50cyBvZiB0aGVzZSBtZW4sIGEganVzdCBvbmUuIE15IGZhdGhlciBidWlsdCB0aGUKICAgICAgICAgICAgICAgICAgICB3YWxsIGFyb3VuZCB0aGlzIGxhbmQgYWxtb3N0IGJlZm9yZSBJIHdhcyBib3JuLCB3aGlsZSBDYWxsaXBwaWRlcywgdGhlIGZhdGhlciBvZgogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiB3YXMgc3RpbGwgbGl2aW5nLCBhbmQgd2FzIG15IGZhdGhlcidzIG5laWdoYm9yIO+8iGFuZCBvZiBjb3Vyc2UKICAgICAgICAgICAgICAgICAgICBoZSBrbmV3IHRoZSBmYWN0cyBiZXR0ZXIgdGhhbiB0aGVzZSBtZW4gZG/vvIksIGFuZCB3aGVuLCBtb3Jlb3ZlciwKICAgICAgICAgICAgICAgICAgICBDYWxsaWNsZXMgd2FzIGFscmVhZHkgYSBncm93biBtYW4sIGFuZCB3YXMgbGl2aW5nIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjsgPC90cmFuc2xhdGlvbj4="
translation['55.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBteSBmYXRoZXIgbGl2ZWQgb24gbW9yZSB0aGFuIGZpZnRlZW4geWVhcnMgbG9uZ2VyLCBhbmQgdGhlaXIgZmF0aGVyIGFzCiAgICAgICAgICAgICAgICAgICAgbWFueS4gSW4gYWxsIHRoZXNlIHllYXJzIG5vIG9uZSBldmVyIGNhbWUgdG8gb2JqZWN0IG9yIG1ha2UgY29tcGxhaW50CiAgICAgICAgICAgICAgICAgICAg77yIYW5kIHlldCBvZiBjb3Vyc2UgaXQgb2Z0ZW4gcmFpbmVkIHRoZW4sIGp1c3QgYXMgaXQgZG9lcyBub3fvvIk7CiAgICAgICAgICAgICAgICAgICAgbm8gb25lIG1hZGUgYW55IG9wcG9zaXRpb24gYXQgdGhlIHN0YXJ0LCBhcyBoZSB3b3VsZCBoYXZlIGRvbmUsIGlmIG15IGZhdGhlciBieQogICAgICAgICAgICAgICAgICAgIHdhbGxpbmcgaW4gaGlzIGxhbmQgaGFkIGNhdXNlZCBpbmp1cnkgdG8gYW55b25lOyBub3IgZGlkIGFueW9uZSBmb3JiaWQgaGltLCBvcgogICAgICAgICAgICAgICAgICAgIHByb3Rlc3QgYWdhaW5zdCBoaXMgYWN0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['55.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIENhbGxpY2xlcywKICAgICAgICAgICAgICAgICAgICB3aGVuIHlvdSBzYXcgdGhhdCB0aGUgd2F0ZXJjb3Vyc2Ugd2FzIGJlaW5nIGRhbW1lZCwgeW91IHBlb3BsZSBtaWdodCwgSSBzdXBwb3NlLAogICAgICAgICAgICAgICAgICAgIGhhdmUgZ29uZSBhdCBvbmNlIHRvIG15IGZhdGhlciBhbmQgY29tcGxhaW5lZCBhbmdyaWx5LCBhbmQgc2FpZCB0byBoaW0sCiAgICAgICAgICAgICAgICAgICAg4oCcVGVpc2lhcywgd2hhdCBpcyB0aGlzIHRoYXQgeW91IGFyZSBkb2luZz8gQXJlIHlvdSBkYW1taW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHdhdGVyY291cnNlPyBXaHksIHRoZW4gdGhlIHdhdGVyIHdpbGwgYnVyc3QgdGhyb3VnaCBvbiB0byBvdXIgbGFuZC7igJ0KICAgICAgICAgICAgICAgICAgICBJbiB0aGF0IGNhc2UsIGlmIGhlIGhhZCBzZWVuIGZpdCB0byBkZXNpc3QsIHlvdSBhbmQgSSB3b3VsZCBiZSBoYXZpbmcgbm8gcXVhcnJlbAogICAgICAgICAgICAgICAgICAgIHdpdGggb25lIGFub3RoZXI7IG9yLCBpZiBoZSBwYWlkIG5vIGhlZWQsIGFuZCBhbnkgc3VjaCBtaXNjaGllZiByZXN1bHRlZCwgeW91CiAgICAgICAgICAgICAgICAgICAgd291bGQgaGF2ZSBiZWVuIGFibGUgdG8gYXZhaWwgeW91cnNlbGYgb2YgdGhvc2Ugd2hvIHdlcmUgcHJlc2VudCBhcyB3aXRuZXNzZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['55.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCwgYnkgaGVhdmVuLCB5b3Ugb3VnaHQgdG8gaGF2ZSBzYXRpc2ZpZWQKICAgICAgICAgICAgICAgICAgICBhbGwgbWVuIHRoYXQgdGhlcmUgd2FzIGEgd2F0ZXJjb3Vyc2UsIHRoYXQgeW91IG1pZ2h0IGhhdmUgc2hvd24sIG5vdCBieSB5b3VyCiAgICAgICAgICAgICAgICAgICAgbWVyZSBzdGF0ZW1lbnQsIGFzIGlzIHRoZSBjYXNlIG5vdywgYnV0IG9uIGEgYmFzaXMgb2YgZmFjdCwgdGhhdCBteSBmYXRoZXIgd2FzCiAgICAgICAgICAgICAgICAgICAgZ3VpbHR5IG9mIHdyb25nZG9pbmcuIFlldCBubyBvbmUgb2YgdGhlc2UgbWVuIGV2ZXIgdGhvdWdodCBvZiBkb2luZyBhbnkgc3VjaAogICAgICAgICAgICAgICAgICAgIHRoaW5nLiBGb3IsIGhhZCB5b3UgZG9uZSB0aGlzLCB5b3Ugd291bGQgbm90IGhhdmUgZ290IGFuIGF3YXJkIGZvciBkZWZhdWx0CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBtZSwgYXMgeW91IG5vdyBoYXZlLCBub3Igd291bGQgeW91IGhhdmUgZ2FpbmVkIGFueXRoaW5nIGJ5IHlvdXIKICAgICAgICAgICAgICAgICAgICBtYWxpY2lvdXMgY2hhcmdlczsgPC90cmFuc2xhdGlvbj4="
translation['55.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmZvciBpZiB5b3UgaGFkIGF0IHRoYXQgdGltZQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgYSB3aXRuZXNzIGFuZCBhcHBlYWxlZCB0byBoaXMgdGVzdGltb255LCBoZSB3b3VsZCBub3cgaGF2ZSBwcm92ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIGhpcyBvd24ga25vd2xlZGdlIHByZWNpc2VseSBob3cgdGhlIHNldmVyYWwgbWF0dGVycyBzdG9vZCwgYW5kIHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICByZWZ1dGVkIHRoZXNlIG1lbiB3aG8gYXJlIHNvIGdsaWIgd2l0aCB0aGVpciB0ZXN0aW1vbnkuIEJ1dCwgSSBmYW5jeSwgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBhbGwgY29tZSB0byBkZXNwaXNlIG9uZSBzbyB5b3VuZyBhcyBJIGFtLCBhbmQgc28gaW5leHBlcmllbmNlZCBpbiBhZmZhaXJzLiBCdXQsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgSSBhZGR1Y2UgdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgYWN0cyBhcyB0aGUgc3Ryb25nZXN0IGV2aWRlbmNlIGFnYWluc3QgdGhlbSBhbGw7IGZvciBob3cgaXMgaXQgdGhhdCBub3Qgb25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbSBldmVyIHByb3Rlc3RlZCwgb3IgbG9kZ2VkIGEgY29tcGxhaW50LCBvciBldmVuIHV0dGVyZWQgYSB3b3JkIG9mIGNlbnN1cmUsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZXkgd2VyZSBjb250ZW50IHRvIHN1Ym1pdCB0byB0aGlzIGluanVyeT8gPC90cmFuc2xhdGlvbj4="
translation['55.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XZWxsLCBJIHRoaW5rIHRoYXQgd2hhdCBJIGhhdmUgc2FpZCBpcyBieQogICAgICAgICAgICAgICAgICAgIGl0c2VsZiBhIHN1ZmZpY2llbnQgYW5zd2VyIHRvIHRoZWlyIHNoYW1lbGVzcyBjbGFpbXM7IGJ1dCB0aGF0IHlvdSBtYXkgYmUKICAgICAgICAgICAgICAgICAgICBhc3N1cmVkLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBvbiBvdGhlcgogICAgICAgICAgICAgICAgICAgIGdyb3VuZHMgYXMgd2VsbCB0aGF0IG15IGZhdGhlciBjb21taXR0ZWQgbm8gd3JvbmcgaW4gd2FsbGluZyBpbiB0aGUgbGFuZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGVzZSBtZW4gaGF2ZSB1dHRlcmVkIG5vdGhpbmcgYnV0IGZhbHNlaG9vZHMsIEkgc2hhbGwgdHJ5IHRvIGV4cGxhaW4gdG8KICAgICAgICAgICAgICAgICAgICB5b3UgZXZlbiBtb3JlIGNsZWFybHkuIDwvdHJhbnNsYXRpb24+"
translation['55.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgdGhlIGxhbmQgaXMgb3VyCiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBwcm9wZXJ0eSBpcyBhZG1pdHRlZCBieSB0aGVzZSBtZW4gdGhlbXNlbHZlcywgYW5kIHRoaXMgYmVpbmcgdGhlIGNhc2UsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaWYgeW91IGNvdWxkIHNlZSB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFjZSwgeW91IHdvdWxkIGtub3cgYXQgb25jZSB0aGF0IHRoZWlyIHN1aXQgaXMgZ3JvdW5kbGVzcy4gRm9yIHRoaXMgcmVhc29uIEkKICAgICAgICAgICAgICAgICAgICB3YW50ZWQgdG8gcmVmZXIgdGhlIGNhc2UgdG8gaW1wYXJ0aWFsIHBlcnNvbnMgd2hvIGtub3cgdGhlIGxvY2FsaXR5LCBidXQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtZW4gcmVmdXNlZCwgYWx0aG91Z2ggdGhleSBub3cgdHJ5IHRvIG1haW50YWluIHRoYXQgdGhleSB3aXNoZWQgaXQuIFRoaXMsIHRvbywKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIG1hZGUgY2xlYXIgdG8geW91IGFsbCBpbiBhIG1vbWVudDsgYnV0IGdpdmUgY2xvc2UgaGVlZCwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgSSBiZWcgeW91IGluIHRoZSBuYW1lIG9mCiAgICAgICAgICAgICAgICAgICAgWmV1cyBhbmQgdGhlIGdvZHMhIDwvdHJhbnNsYXRpb24+"
translation['55.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHNwYWNlIGJldHdlZW4gbXkKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSBhbmQgdGhlaXJzIGlzIGEgcm9hZCwgYW5kIGFzIGEgaGlsbHkgY291bnRyeSBlbmNpcmNsZXMgdGhlbSwgdW5sdWNraWx5CiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBmYXJtcywgdGhlIHdhdGVyIHRoYXQgZmxvd3MgZG93biBydW5zLCBhcyBpdCBoYXBwZW5zLCBwYXJ0bHkgaW50byB0aGUKICAgICAgICAgICAgICAgICAgICByb2FkLCBhbmQgcGFydGx5IG9uIHRvIHRoZSBmYXJtcy4gQW5kIGluIHBhcnRpY3VsYXIsIHRoYXQgd2hpY2ggcG91cnMgaW50byB0aGUKICAgICAgICAgICAgICAgICAgICByb2FkLCB3aGVuZXZlciBpdCBoYXMgZnJlZSBjb3Vyc2UsIGZsb3dzIGRvd24gYWxvbmcgdGhlIHJvYWQsIGJ1dCB3aGVuIHRoZXJlIGlzCiAgICAgICAgICAgICAgICAgICAgYW55IHN0b3BwYWdlLCB0aGVuIGl0IG9mIG5lY2Vzc2l0eSBvdmVyZmxvd3MgdXBvbiB0aGUgZmFybXMuIDwvdHJhbnNsYXRpb24+"
translation['55.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhpcyBwYXJ0aWN1bGFyIHBpZWNlIG9mIGxhbmQsIGFzIGl0IGhhcHBlbmVkLCB3YXMKICAgICAgICAgICAgICAgICAgICBpbnVuZGF0ZWQgYWZ0ZXIgYSBoZWF2eSBkb3ducG91ciBoYWQgb2NjdXJyZWQuIEFzIGEgcmVzdWx0IG9mIG5lZ2xlY3QsIHdoZW4gbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgd2FzIG5vdCB5ZXQgaW4gcG9zc2Vzc2lvbiBvZiB0aGUgbGFuZCwgYnV0IGEgbWFuIGhlbGQgaXQgd2hvIHV0dGVybHkKICAgICAgICAgICAgICAgICAgICBkaXNsaWtlZCB0aGUgbmVpZ2hib3Job29kLCBhbmQgcHJlZmVycmVkIHRvIGxpdmUgaW4gdGhlIGNpdHksIHRoZSB3YXRlcgogICAgICAgICAgICAgICAgICAgIG92ZXJmbG93ZWQgdHdvIG9yIHRocmVlIHRpbWVzLCB3cm91Z2h0IGRhbWFnZSB0byB0aGUgbGFuZCwgYW5kIHdhcyBtb3JlIGFuZCBtb3JlCiAgICAgICAgICAgICAgICAgICAgbWFraW5nIGl0c2VsZiBhIHBhdGguIEZvciB0aGlzIHJlYXNvbiBteSBmYXRoZXIsIHdoZW4gaGUgc2F3IGl0IO+8iHNvIEkKICAgICAgICAgICAgICAgICAgICBhbSBpbmZvcm1lZCBieSB0aG9zZSBhY3F1YWludGVkIHdpdGggdGhlIGNpcmN1bXN0YW5jZXPvvIksIGluYXNtdWNoIGFzCiAgICAgICAgICAgICAgICAgICAgdGhlIG5laWdoYm9ycyBhbHNvIGJlZ2FuIHRvIGVuY3JvYWNoIHVwb24gdGhlIHByb3BlcnR5IGFuZCB3YWxrIGFjcm9zcyBpdCwgYnVpbHQKICAgICAgICAgICAgICAgICAgICBhcm91bmQgaXQgdGhpcyBlbmNsb3Npbmcgd2FsbC4gPC90cmFuc2xhdGlvbj4="
translation['55.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5UbyBwcm92ZSB0aGF0IEkKICAgICAgICAgICAgICAgICAgICBhbSBzcGVha2luZyB0aGUgdHJ1dGggaW4gdGhpcywgSSBzaGFsbCBicmluZyBiZWZvcmUgeW91IGFzIHdpdG5lc3NlcyB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBrbm93IHRoZSBmYWN0cywgYW5kIGNpcmN1bXN0YW50aWFsIGV2aWRlbmNlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBmYXIgc3Ryb25nZXIgdGhhbiBhbnkgdGVzdGltb255LgogICAgICAgICAgICAgICAgICAgIENhbGxpY2xlcyBzYXlzIHRoYXQgSSBhbSBkb2luZyBoaW0gYW4gaW5qdXJ5IGJ5IGhhdmluZyB3YWxsZWQgb2ZmIHRoZQogICAgICAgICAgICAgICAgICAgIHdhdGVyY291cnNlOyBidXQgSSBzaGFsbCBzaG93IHRoYXQgdGhpcyBpcyBwcml2YXRlIGxhbmQgYW5kIG5vIHdhdGVyY291cnNlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['55.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5JZiBpdCB3ZXJlIG5vdCBhZG1pdHRlZCB0byBiZSBvdXIgcHJpdmF0ZQogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LCB3ZSBzaG91bGQgcGVyaGFwcyBiZSBndWlsdHkgb2YgdGhpcyB3cm9uZ2RvaW5nLCBpZiB3ZSBoYWQgZmVuY2VkIG9mZiBhCiAgICAgICAgICAgICAgICAgICAgcGllY2Ugb2YgcHVibGljIGxhbmQ7IGJ1dCBhcyBpdCBpcywgdGhleSBkbyBub3QgZGlzcHV0ZSB0aGlzLCBhbmQgb24gdGhlIGxhbmQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBhcmUgdHJlZXMgcGxhbnRlZCwgdmluZXMgYW5kIGZpZ3MuIFlldCB3aG8gd291bGQgdGhpbmsgb2YgcGxhbnRpbmcgdGhlc2UKICAgICAgICAgICAgICAgICAgICBpbiBhIHdhdGVyY291cnNlPyBOb2JvZHksIHN1cmVseS4gQWdhaW4sIHdobyB3b3VsZCB0aGluayBvZiBidXJ5aW5nIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMgdGhlcmU/IE5vIG9uZSwgSSB0aGluaywgd291bGQgZG8gdGhpcyBlaXRoZXIuIDwvdHJhbnNsYXRpb24+"
translation['55.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCBib3RoIHRoZXNlIHRoaW5ncyBoYXZlIGJlZW4gZG9uZS4gRm9yIG5vdCBvbmx5IHdlcmUKICAgICAgICAgICAgICAgICAgICB0aGUgdHJlZXMgcGxhbnRlZCBiZWZvcmUgbXkgZmF0aGVyIGJ1aWx0IHRoZSB3YWxsLCBidXQgdGhlIHRvbWJzIGFyZSBvbGQsIGFuZAogICAgICAgICAgICAgICAgICAgIHdlcmUgYnVpbHQgYmVmb3JlIHdlIGFjcXVpcmVkIHRoZSBwcm9wZXJ0eS4gWWV0LCBzaW5jZSB0aGlzIGlzIHRoZSBjYXNlLCB3aGF0CiAgICAgICAgICAgICAgICAgICAgc3Ryb25nZXIgYXJndW1lbnQgY291bGQgdGhlcmUgYmUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4/IFRoZSBmYWN0cyBhZmZvcmQgbWFuaWZlc3QgcHJvb2YuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBwbGVhc2UgdGFrZSBhbGwgdGhlc2UgZGVwb3NpdGlvbnMsIGFuZCByZWFkIHRoZW0uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['55.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IGhlYXIgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbnMuIERvIHRoZXkgbm90IGFwcGVhciB0byB5b3UgdG8gdGVzdGlmeSBleHByZXNzbHkgdGhhdCBpdCBpcyBhIHBsYWNlCiAgICAgICAgICAgICAgICAgICAgZnVsbCBvZiB0cmVlcywgYW5kIHRoYXQgaXQgY29udGFpbnMgc29tZSB0b21icyBhbmQgb3RoZXIgdGhpbmdzIHdoaWNoIGFyZSB0byBiZQogICAgICAgICAgICAgICAgICAgIGZvdW5kIGluIG1vc3QgcHJpdmF0ZSBwaWVjZXMgb2YgbGFuZD8gRG8gdGhleSBub3QgcHJvdmUgYWxzbyB0aGF0IHRoZSBsYW5kIHdhcwogICAgICAgICAgICAgICAgICAgIHdhbGxlZCBpbiBkdXJpbmcgdGhlIGxpZmV0aW1lIG9mIHRoZWlyIGZhdGhlciB3aXRob3V0IG9wcG9zaXRpb24gYmVpbmcgbWFkZSBieQogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiBvciBhbnkgb3RoZXIgb2YgdGhlIG5laWdoYm9ycz8gPC90cmFuc2xhdGlvbj4="
translation['55.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgd29ydGggeW91ciB3aGlsZSwgbWVuIG9mIHRoZSBqdXJ5LCB0bwogICAgICAgICAgICAgICAgICAgIGhlYXIgc29tZSByZW1hcmtzIGFsc28gYWJvdXQgdGhlIG90aGVyIHN0YXRlbWVudHMgbWFkZSBieSBDYWxsaWNsZXMuIEFuZCBmaXJzdCwKICAgICAgICAgICAgICAgICAgICBjb25zaWRlciB3aGV0aGVyIGFueSBvbmUgb2YgeW91IGhhcyBldmVyIHNlZW4gb3IgaGVhcmQgb2YgYSB3YXRlcmNvdXJzZSBleGlzdGluZwogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBzaWRlIG9mIGEgcm9hZC4gSSB0aGluayB0aGF0IGluIHRoZSB3aG9sZSBjb3VudHJ5IHRoZXJlIGlzIG5vdCBhIHNpbmdsZQogICAgICAgICAgICAgICAgICAgIG9uZS4gRm9yIHdoYXQgY291bGQgaW5kdWNlIGFueSBtYW4gdG8gbWFrZSBhIGNoYW5uZWwgdGhyb3VnaCBoaXMgcHJpdmF0ZSBsYW5kcwogICAgICAgICAgICAgICAgICAgIGZvciB3YXRlciB3aGljaCB3b3VsZCBvdGhlcndpc2UgaGF2ZSBnb25lIHJ1c2hpbmcgZG93biBhIHB1YmxpYyByb2FkPyA8L3RyYW5zbGF0aW9uPg=="
translation['55.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hhdCBvbmUgb2YgeW91LCB3aGV0aGVyIGluIHRoZSBjb3VudHJ5IG9yIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHkgd291bGQgYWxsb3cgd2F0ZXIgcGFzc2luZyBhbG9uZyB0aGUgaGlnaHdheSB0byBmbG93IGludG8gaGlzIGZhcm0gb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgaG91c2U/IE9uIHRoZSBjb250cmFyeSwgd2hlbiBpdCBmb3JjZXMgaXRzIHdheSBpbiwgaXMgaXQgbm90IG91ciBoYWJpdCB0byBkYW0gb3IKICAgICAgICAgICAgICAgICAgICB3YWxsIGl0IG9mZj8gQnV0IHRoZSBwbGFpbnRpZmYgZGVtYW5kcyBvZiBtZSB0aGF0IEkgbGV0IHRoZSB3YXRlciBmcm9tIHRoZSByb2FkCiAgICAgICAgICAgICAgICAgICAgZmxvdyBpbnRvIG15IGxhbmQsIGFuZCwgd2hlbiBpdCBoYXMgcGFzc2VkIGJleW9uZCBoaXMsIHR1cm4gaXQgYmFjayBhZ2FpbiBpbnRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHJvYWQuIFdlbGwgdGhlbiwgdGhlIG5laWdoYm9yIHdobyBmYXJtcyB0aGUgbGFuZCBuZXh0IHRvIGhpcyB3aWxsIG1ha2UKICAgICAgICAgICAgICAgICAgICBjb21wbGFpbnQ7IGZvciBpdCBpcyBwbGFpbiB0aGF0IHRoZXkgdG9vIHdpbGwgaGF2ZSB0aGUgc2FtZSByaWdodCB0byBwcm90ZXN0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgcGxhaW50aWZmIGhhcy4gPC90cmFuc2xhdGlvbj4="
translation['55.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc3VyZWx5LCBpZiBJIGFtCiAgICAgICAgICAgICAgICAgICAgYWZyYWlkIHRvIGRpdmVydCB0aGUgd2F0ZXIgaW50byB0aGUgcm9hZCwgSSBzaG91bGQgYmUgYSByYXNoIG1hbiBpbmRlZWQsIGlmIEkKICAgICAgICAgICAgICAgICAgICB3ZXJlIHRvIHR1cm4gaXQgaW50byBsYW5kLiBGb3Igd2hlbiBJIGFtIGJlaW5nIHN1ZWQgZm9yIHBlbmFsdHkgYmVjYXVzZSB0aGUKICAgICAgICAgICAgICAgICAgICB3YXRlciBmbG93aW5nIGZyb20gdGhlIHJvYWQgc3ByZWFkIG92ZXIgdGhlIHBsYWludGlmZidzIGxhbmQsIHdoYXQgdHJlYXRtZW50IGluCiAgICAgICAgICAgICAgICAgICAgaGVhdmVuJ3MgbmFtZSBtdXN0IEkgZXhwZWN0IHRvIG1lZXQgYXQgdGhlIGhhbmRzIG9mIHRob3NlIHdobyBzdWZmZXIgZGFtYWdlIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgd2F0ZXIgb3ZlcmZsb3dpbmcgZnJvbSBteSBvd24gbGFuZD8gQnV0IGlmLCBvbmNlIEkgaGF2ZSBnb3QgdGhlIHdhdGVyIG9uIG15CiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHksIEkgYW0gbm90IHRvIGJlIGFsbG93ZWQgdG8gZHJhaW4gaXQgb2ZmIGVpdGhlciBpbnRvIHRoZSByb2FkIG9yIG9udG8KICAgICAgICAgICAgICAgICAgICBwcml2YXRlIGxhbmQsIG1lbiBvZiB0aGUganVyeSwgd2hhdCBjb3Vyc2UgaW4gdGhlIG5hbWUgb2YgdGhlIGdvZHMgcmVtYWlucyBmb3IKICAgICAgICAgICAgICAgICAgICBtZT8gSSB0YWtlIGl0LCBDYWxsaWNsZXMgd2lsbCBub3QgZm9yY2UgbWUgdG8gZHJpbmsgaXQgYWxsIHVwISA8L3RyYW5zbGF0aW9uPg=="
translation['55.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIHRoZW4sIGFmdGVyIHN1ZmZlcmluZyB0aGVzZSBhbm5veWFuY2VzIGF0IHRoZWlyIGhhbmRzCiAgICAgICAgICAgICAgICAgICAgYW5kIG1hbnkgb3RoZXIgZ3JpZXZvdXMgb25lcyBhcyB3ZWxsLCBJIG11c3QgYmUgY29udGVudCwgbm90IGluZGVlZCB0byB3aW4gbXkKICAgICAgICAgICAgICAgICAgICBzdWl0LCBidXQgdG8gZXNjYXBlIHBheWluZyBhIGZ1cnRoZXIgcGVuYWx0eSEgSWYsIG1lbiBvZiB0aGUganVyeSwgdGhlcmUgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBhIHdhdGVyY291cnNlIGJlbG93IG1lIHRvIHJlY2VpdmUgdGhlIHdhdGVyLCBJIHNob3VsZCBwZXJoYXBzIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIHdyb25nIGluIG5vdCBsZXR0aW5nIGl0IGluIG9uIG15IGxhbmQsIGp1c3QgYXMgb24gY2VydGFpbiBvdGhlciBmYXJtcyB0aGVyZSBhcmUKICAgICAgICAgICAgICAgICAgICByZWNvZ25pemVkIHdhdGVyY291cnNlcyBpbiB3aGljaCB0aGUgZmlyc3QgbGFuZG93bmVycyBsZXQgdGhlIHdhdGVyIGZsb3cKICAgICAgICAgICAgICAgICAgICDvvIhhcyB0aGV5IGRvIHRoZSBndXR0ZXItZHJhaW5zIGZyb20gdGhlIGhvdXNlc++8iSwgYW5kIG90aGVycwogICAgICAgICAgICAgICAgICAgIGFnYWluIHJlY2VpdmUgaXQgZnJvbSB0aGVtIGluIGxpa2UgbWFubmVyLiBCdXQgb24gdGhlIGxhbmQgaW4gcXVlc3Rpb24gbm8gb25lCiAgICAgICAgICAgICAgICAgICAgZ2l2ZXMgdGhlIHdhdGVyIG92ZXIgdG8gbWUgb3IgcmVjZWl2ZXMgaXQgZnJvbSBtZS4gSG93LCB0aGVuLCBjYW4gaXQgYmUgYQogICAgICAgICAgICAgICAgICAgIHdhdGVyY291cnNlPyA8L3RyYW5zbGF0aW9uPg=="
translation['55.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5BbiBvdmVyZmxvdyBvZiB3YXRlciBoYXMgZXJlIG5vdywKICAgICAgICAgICAgICAgICAgICBJIGltYWdpbmUsIG9mdGVuIGRvbmUgZGFtYWdlIHRvIG1hbnkgd2hvIGhhdmUgbm90IGd1YXJkZWQgYWdhaW5zdCBpdCwganVzdCBhcyBpdAogICAgICAgICAgICAgICAgICAgIGhhcyBpbiB0aGlzIGNhc2UgdG8gdGhlIHBsYWludGlmZi4gQnV0IHRoaXMgaXMgdGhlIHRoaW5nIHRoYXQgaXMgbW9zdCBvdXRyYWdlb3VzCiAgICAgICAgICAgICAgICAgICAgb2YgYWxsLCB0aGF0IENhbGxpY2xlcywgd2hlbiB0aGUgd2F0ZXIgb3ZlcmZsb3dzIG9uIGhpcyBsYW5kLCBicmluZ3MgdXAgaHVnZQogICAgICAgICAgICAgICAgICAgIHN0b25lcyBhbmQgd2FsbHMgaXQgb2ZmLCBidXQgaGFzIGJyb3VnaHQgc3VpdCBmb3IgZGFtYWdlcyBhZ2FpbnN0IG1lIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGdyb3VuZCB0aGF0IG15IGZhdGhlciB3YXMgZ3VpbHR5IG9mIHdyb25nZG9pbmcsIGJlY2F1c2Ugd2hlbiB0aGUgc2FtZSB0aGluZwogICAgICAgICAgICAgICAgICAgIGhhcHBlbmVkIHRvIGhpcyBsYW5kLCBoZSBidWlsdCBhbiBlbmNsb3Npbmcgd2FsbC4gQW5kIHlldCwgaWYgYWxsIHRob3NlIHdobyBoYXZlCiAgICAgICAgICAgICAgICAgICAgc3VmZmVyZWQgbG9zcyBiZWNhdXNlIHdhdGVyIGhhcyBmbG9vZGVkIHRoZWlyIGxhbmRzIGluIHRoaXMgcmVnaW9uIGFyZSB0byBicmluZwogICAgICAgICAgICAgICAgICAgIHN1aXQgYWdhaW5zdCBtZSwgbXkgZm9ydHVuZSwgZXZlbiBpZiBtdWx0aXBsaWVkIG1hbnkgdGltZXMsIHdvdWxkIG5vdCBtZWV0IHRoZQogICAgICAgICAgICAgICAgICAgIGNvc3RzLiA8L3RyYW5zbGF0aW9uPg=="
translation['55.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlc2UgbWVuIGFyZSBzbyBkaWZmZXJlbnQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlcnMsIHRoYXQsIGFsdGhvdWdoIHRoZXkgaGF2ZSBzdWZmZXJlZCBubyBkYW1hZ2UsIGFzIEkgc2hhbGwgcHJlc2VudGx5IG1ha2UKICAgICAgICAgICAgICAgICAgICBjbGVhciB0byB5b3UsIHdoaWxlIG1hbnkgb3RoZXJzIGhhdmUgc3VmZmVyZWQgZGFtYWdlIGluIG1hbnkgZ3JpZXZvdXMgd2F5cywgdGhleQogICAgICAgICAgICAgICAgICAgIGFsb25lIGhhdmUgaGFkIHRoZSBlZmZyb250ZXJ5IHRvIHN1ZSBtZS4gWWV0IGFueW9uZSBlbHNlIHdvdWxkIGhhdmUgaGFkIGJldHRlcgogICAgICAgICAgICAgICAgICAgIHJlYXNvbiB0byBkbyB0aGlzIHRoYW4gdGhleSBoYXZlOyBmb3IgZXZlbiBpZiB0aGV5IGhhdmUgc3VmZmVyZWQgZGFtYWdlLCBpdCBoYXMKICAgICAgICAgICAgICAgICAgICBiZWVuIHRocm91Z2ggdGhlaXIgb3duIGZhdWx0LCB0aG91Z2ggdGhleSBicmluZyBhIG1hbGljaW91cyBzdWl0IGFnYWluc3QgbWU7CiAgICAgICAgICAgICAgICAgICAgd2hlcmVhcyB0aGUgb3RoZXJzLCBub3QgdG8gc3BlYWsgb2YgYW55dGhpbmcgZWxzZSwgYXJlIG9wZW4gdG8gbm8gc3VjaAogICAgICAgICAgICAgICAgICAgICAgICBpbXB1dGF0aW9uLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgdGhhdCBJIG1heSBub3Qgc3BlYWsKICAgICAgICAgICAgICAgICAgICBjb25mdXNlZGx5IG9mIGFsbCBtYXR0ZXJzIGF0IG9uY2UsIHRha2UsIHBsZWFzZSwgdGhlIGRlcG9zaXRpb25zIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['55.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXMgaXQgbm90LAogICAgICAgICAgICAgICAgICAgIHRoZW4sIGFuIG91dHJhZ2VvdXMgdGhpbmcsIG1lbiBvZiB0aGUganVyeSwgdGhhdCwgd2hpbGUgdGhlc2UgcGVvcGxlIGhhdmUgbWFkZQogICAgICAgICAgICAgICAgICAgIG5vIGNvbXBsYWludCBhZ2FpbnN0IG1lLCBhbHRob3VnaCB0aGV5IHN1ZmZlcmVkIHN1Y2ggaGVhdnkgZGFtYWdlcywgbm9yIGhhcwogICAgICAgICAgICAgICAgICAgIGFueW9uZSBlbHNlIG9mIHRob3NlIHdobyBzdWZmZXJlZCBtaXNmb3J0dW5lLCBidXQgdGhleSBoYXZlIGFjY2VwdGVkIHRoZWlyIGxvdCwKICAgICAgICAgICAgICAgICAgICB0aGlzIG1hbiBzaG91bGQgYnJpbmcgYSBtYWxpY2lvdXMgc3VpdD8gQnV0IHRoYXQgaGUgaXMgaGltc2VsZiBhdCBmYXVsdCwgZmlyc3QKICAgICAgICAgICAgICAgICAgICBpbiB0aGF0IGhlIG1hZGUgdGhlIHJvYWQgbmFycm93ZXIgYnkgZXh0ZW5kaW5nIGhpcyB3YWxsIGJleW9uZCB0aGUgcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICBsaW5lLCBpbiBvcmRlciB0byBlbmNsb3NlIHRoZSB0cmVlcyBvZiB0aGUgcm9hZCwgYW5kLCBzZWNvbmRseSwgaW4gdGhhdCBoZSB0aHJldwogICAgICAgICAgICAgICAgICAgIHRoZSBydWJiaXNoIGludG8gaXQsIGZyb20gd2hpY2ggYWN0aW9ucyBpdCByZXN1bHRlZCB0aGF0IGhlIG1hZGUgdGhlIHJvYWQgaGlnaGVyCiAgICAgICAgICAgICAgICAgICAgYXMgd2VsbCBhcyBuYXJyb3dlcuKAlG9mIHRoaXMgeW91IHdpbGwgcHJlc2VudGx5IGdhaW4gY2xlYXJlciBrbm93bGVkZ2UKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBkZXBvc2l0aW9ucy4gPC90cmFuc2xhdGlvbj4="
translation['55.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSSBzaGFsbCBub3cgZW5kZWF2b3IKICAgICAgICAgICAgICAgICAgICB0byBzaG93IHlvdSB0aGF0IGhlIGhhcyBicm91Z2h0IGEgc3VpdCBmb3Igc3VjaCBoZWF2eSBkYW1hZ2VzIGFnYWluc3QgbWUgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBzdWZmZXJlZCBhbnkgbG9zcyBvciBkYW1hZ2Ugd29ydGh5IG9mIG1lbnRpb24uIEJlZm9yZSB0aGV5IHVuZGVydG9vayB0aGlzCiAgICAgICAgICAgICAgICAgICAgbWFsaWNpb3VzIGFjdGlvbiBhZ2FpbnN0IG1lLCBteSBtb3RoZXIgYW5kIHRoZWlycyB3ZXJlIGludGltYXRlIGZyaWVuZHMgYW5kIHVzZWQKICAgICAgICAgICAgICAgICAgICB0byB2aXNpdCBvbmUgYW5vdGhlciwgYXMgd2FzIG5hdHVyYWwsIHNpbmNlIGJvdGggbGl2ZWQgaW4gdGhlIGNvdW50cnkgYW5kIHdlcmUKICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMsIGFuZCBzaW5jZSwgZnVydGhlcm1vcmUsIHRoZWlyIGh1c2JhbmRzIGhhZCBiZWVuIGZyaWVuZHMgd2hpbGUgdGhleQogICAgICAgICAgICAgICAgICAgIGxpdmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['55.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCBteSBtb3RoZXIgd2VudCB0byBzZWUgdGhlaXJzLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgbGF0dGVyIHRvbGQgaGVyIHdpdGggd2VlcGluZyB3aGF0IGhhZCBoYXBwZW5lZCwgYW5kIHNob3dlZCBoZXIgdGhlIGVmZmVjdHM7CiAgICAgICAgICAgICAgICAgICAgdGhpcywgbWVuIG9mIHRoZSBqdXJ5LCBpcyB0aGUgd2F5IGluIHdoaWNoIEkgbGVhcm5lZCBhbGwgdGhlIGZhY3RzLiBBbmQgSSBhbQogICAgICAgICAgICAgICAgICAgIHRlbGxpbmcgeW91IGp1c3Qgd2hhdCBJIGhlYXJkIGZyb20gbXkgbW90aGVyO+KAlGFzIEkgc3BlYWsgdGhlIHRydXRoLCBzbwogICAgICAgICAgICAgICAgICAgIG1heSBtYW55IGJsZXNzaW5ncyBiZSBtaW5lOyBpZiBJIGFtIGx5aW5nLCBtYXkgdGhlIG9wcG9zaXRlIGJlZmFsbCBtZS4gU2hlCiAgICAgICAgICAgICAgICAgICAgYXZlcnJlZCB0aGF0IHNoZSBzYXcsIGFuZCBoZWFyZCBmcm9tIHRoZWlyIG1vdGhlciwgdGhhdCBzb21lIG9mIHRoZSBiYXJsZXkgZ290CiAgICAgICAgICAgICAgICAgICAgd2V0IO+8iHNoZSBzYXcgdGhlbSBkcnlpbmcgaXTvvIksIGJ1dCBub3Qgc28gbXVjaCBhcyB0aHJlZQogICAgICAgICAgICAgICAgICAgICAgICBtZWRpbW5pLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgbWVkaW1udXMgd2FzIGEgc3RhbmRhcmQgbWVhc3VyZQogICAgICAgICAgICAgICAgICAgICAgICBvZiBncmFpbiwgY29udGFpbmluZyBhcHByb3hpbWF0ZWx5IGEgYnVzaGVsIGFuZCBhIGhhbGYuPC9ub3RlPiBhbmQgYWJvdXQKICAgICAgICAgICAgICAgICAgICBoYWxmIGEgbWVkaW1udXMgb2Ygd2hlYXQgZmxvdXI7IGFsc28sIHNoZSBzYWlkLCBhIGphciBvZiBvbGl2ZSBvaWwgaGFkIHRpbHRlZAogICAgICAgICAgICAgICAgICAgIG92ZXIsIGJ1dCBoYWQgbm90IGJlZW4gZGFtYWdlZC4gPC90cmFuc2xhdGlvbj4="
translation['55.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0cml2aWFsLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgd2FzIHRoZSBsb3NzIHRoYXQgYmVmZWxsIHRoZW0sIHlldCBmb3IgdGhpcyBJIGFtIG1hZGUgZGVmZW5kYW50CiAgICAgICAgICAgICAgICAgICAgaW4gYSBzdWl0IHdpdGggZGFtYWdlcyBmaXhlZCBhdCBhIHRob3VzYW5kIGRyYWNobWFlISBJZiBoZSByZXBhaXJlZCBhbiBvbGQgd2FsbCwKICAgICAgICAgICAgICAgICAgICB0aGlzIHN1cmVseSBvdWdodCBub3QgdG8gYmUgY2hhcmdlZCBhZ2FpbnN0IG1l4oCUYSB3YWxsIG1vcmVvdmVyIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgbmVpdGhlciBmZWxsIGRvd24gbm9yIHN1ZmZlcmVkIGFueSBkYW1hZ2UuIFNvLCBpZiBJIHdlcmUgdG8gY29uY2VkZSB0aGF0IEkgd2FzCiAgICAgICAgICAgICAgICAgICAgdG8gYmxhbWUgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBvY2N1cnJlZCwgdGhlIHRoaW5ncyB0aGF0IGdvdCB3ZXQgd2VyZSB0aGVzZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['55.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UgaW4gdGhlIGJlZ2lubmluZyBteSBmYXRoZXIgd2FzCiAgICAgICAgICAgICAgICAgICAgd2l0aGluIGhpcyByaWdodHMgaW4gZW5jbG9zaW5nIHRoZSBsYW5kIGFuZCB0aGVzZSBwZW9wbGUgbmV2ZXIgbWFkZSBhbnkKICAgICAgICAgICAgICAgICAgICBjb21wbGFpbnQgZHVyaW5nIHRoZSBsYXBzZSBvZiBzbyBsb25nIGEgdGltZSwgYW5kIHRoZSBvdGhlcnMgd2hvIHdlcmUgc2V2ZXJlbHkKICAgICAgICAgICAgICAgICAgICBkYW1hZ2VkIG1ha2Ugbm8gY29tcGxhaW50IGFueSBtb3JlIHRoYW4gdGhleTsgYW5kIHNpbmNlIGl0IGlzIHRoZSBjdXN0b20gb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgb2YgeW91IHRvIGRyYWluIHRoZSB3YXRlciBmcm9tIHlvdXIgaG91c2VzIGFuZCBsYW5kcyBpbnRvIHRoZSByb2FkLCBhbmQgbm90LAogICAgICAgICAgICAgICAgICAgIGhlYXZlbiBrbm93cywgdG8gbGV0IGl0IGZsb3cgaW4gZnJvbSB0aGUgcm9hZCwgd2hhdCBuZWVkIGlzIHRoZXJlIHRvIHNheSBtb3JlPwogICAgICAgICAgICAgICAgICAgIFRoZXNlIGZhY3RzIG9mIHRoZW1zZWx2ZXMgbWFrZSBpdCBjbGVhciB0aGF0IHRoZSBzdWl0IGFnYWluc3QgbWUgaXMgYSBiYXNlbGVzcwogICAgICAgICAgICAgICAgICAgIGFuZCBtYWxpY2lvdXMgb25lLCBzaW5jZSBJIGFtIGd1aWx0eSBvZiBubyB3cm9uZywgYW5kIHRoZXkgaGF2ZSBub3Qgc3VmZmVyZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGFtYWdlIHRoZXkgYWxsZWdlLiA8L3RyYW5zbGF0aW9uPg=="
translation['55.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgdG8gcHJvdmUgdG8geW91IHRoYXQgdGhleSBoYXZlIHRocm93biB0aGUgcnViYmlzaCBpbnRvIHRoZQogICAgICAgICAgICAgICAgICAgIHJvYWQsIGFuZCBieSBhZHZhbmNpbmcgdGhlIHdhbGwgaGF2ZSBtYWRlIHRoZSByb2FkIG5hcnJvd2VyOyBhbmQgZnVydGhlcm1vcmUKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgdGVuZGVyZWQgYW4gb2F0aCB0byB0aGVpciBtb3RoZXIsIGFuZCBjaGFsbGVuZ2VkIHRoZW0gdG8gaGF2ZSBteSBtb3RoZXIKICAgICAgICAgICAgICAgICAgICBzd2VhciBpbiB0aGUgc2FtZSB0ZXJtcy4gVGFrZSwgcGxlYXNlLCB0aGUgZGVwb3NpdGlvbnMgYW5kIHRoZSBjaGFsbGVuZ2U8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJDaGFsbGVuZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaGFsbGVuZ2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhbGxlbmdlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['55.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q291bGQgdGhlcmUsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgYmUgcGVvcGxlIG1vcmUgc2hhbWVsZXNzIHRoYW4gdGhlc2UsIG9yIG1vcmUgcGxhaW5seSBtYWxpY2lvdXMKICAgICAgICAgICAgICAgICAgICBwZXR0aWZvZ2dlcnPigJRtZW4gd2hvLCBhZnRlciBhZHZhbmNpbmcgdGhlaXIgb3duIHdhbGwgYW5kIHJhaXNpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgbGV2ZWwgb2YgdGhlIHJvYWQsIGFyZSBzdWluZyBvdGhlcnMgZm9yIGRhbWFnZXMsIGFuZCB0aGF0IHRvbyBmb3IgYSBmaXhlZCBzdW0gb2YKICAgICAgICAgICAgICAgICAgICBhIHRob3VzYW5kIGRyYWNobWFlLCB3aGVuIHRoZXkgaGF2ZSB0aGVtc2VsdmVzIGxvc3QgZmlmdHkgYXQgbW9zdD8gQW5kIHlldAogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyLCBtZW4gb2YgdGhlIGp1cnksIGhvdyBtYW55IHBlb3BsZSBpbiB0aGUgZmFybS1sYW5kcyBoYXZlIHN1ZmZlcmVkIGZyb20KICAgICAgICAgICAgICAgICAgICBmbG9vZHMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFbGV1c2lzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFbGV1c2lzIj5FbGV1c2lzPC9wbGFjZU5hbWU+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRWxldXNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRWxldXNpcyI+RWxldXNpczwvcGxhY2VOYW1lPiwgYSB0b3duCiAgICAgICAgICAgICAgICAgICAgICAgIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiwgZmFtZWQgYXMgYSBjZW50cmFsIHBvaW50CiAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSB3b3JzaGlwIG9mIERlbWV0ZXIsIGFuZCB0aGUgc2NlbmUgb2YgdGhlIGNlbGVicmF0aW9uIG9mIHRoZSBncmVhdAogICAgICAgICAgICAgICAgICAgICAgICBteXN0ZXJpZXMuPC9ub3RlPiBhbmQgaW4gb3RoZXIgcGxhY2VzLiBCdXQsIGdvb2QgaGVhdmVucywgSSB0YWtlIGl0IGVhY2ggb25lCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlc2UgaXMgbm90IGdvaW5nIHRvIGNsYWltIHRoZSByaWdodCB0byByZWNvdmVyIGRhbWFnZXMgZnJvbSBoaXMgbmVpZ2hib3JzLgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVsZXVzaXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEVsZXVzaXMiPkVsZXVzaXM8L3BsYWNlTmFtZT4sIGEgdG93bgogICAgICAgICAgICAgICAgICAgICAgICBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4sIGZhbWVkIGFzIGEgY2VudHJhbCBwb2ludAogICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgd29yc2hpcCBvZiBEZW1ldGVyLCBhbmQgdGhlIHNjZW5lIG9mIHRoZSBjZWxlYnJhdGlvbiBvZiB0aGUgZ3JlYXQKICAgICAgICAgICAgICAgICAgICAgICAgbXlzdGVyaWVzLjwvdHJhbnNsYXRpb24+"
translation['55.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgSSwgd2hvIG1pZ2h0IHdlbGwgYmUgYW5ncnkgYXQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgbWFkZSB0aGUgcm9hZCBuYXJyb3dlciBhbmQgcmFpc2VkIGl0cyBsZXZlbCwga2VlcCBxdWlldCwgd2hpbGUgdGhlc2UgbWVuCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBzdWNoIHN1cGVyYWJ1bmRhbmNlIG9mIGF1ZGFjaXR5LCBpdCBzZWVtcywgdGhhdCB0aGV5IGV2ZW4gYnJpbmcgbWFsaWNpb3VzCiAgICAgICAgICAgICAgICAgICAgc3VpdHMgYWdhaW5zdCB0aG9zZSB3aG9tIHRoZXkgaGF2ZSBpbmp1cmVkISBCdXQgc3VyZWx5LCBDYWxsaWNsZXMsIGlmIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpZ2h0IHRvIGVuY2xvc2UgeW91ciBsYW5kLCB3ZSB0b28gaGFkIHRoZSByaWdodCB0byBlbmNsb3NlIG91cnMuIEFuZCBpZiBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciB3cm9uZ2VkIHlvdSBieSBlbmNsb3NpbmcgaGlzLCB5b3UgYXJlIG5vdyB3cm9uZ2luZyBtZSBieSB0aHVzIGVuY2xvc2luZwogICAgICAgICAgICAgICAgICAgIHlvdXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['55.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgZXZpZGVudCB0aGF0LCBzaW5jZSB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJ1aWx0IHlvdXIgb2JzdHJ1Y3Rpbmcgd2FsbCB3aXRoIGxhcmdlIHN0b25lcywgdGhlIHdhdGVyIHdpbGwgZmxvdyBiYWNrIHVwb24gbXkKICAgICAgICAgICAgICAgICAgICBsYW5kLCBhbmQgd2hlbiBpdCBzbyBjaGFuY2VzLCBtYXkgd2l0aCBhbiB1bmxvb2tlZC1mb3IgcnVzaCB0aHJvdyBkb3duIG15IHdhbGwuCiAgICAgICAgICAgICAgICAgICAgSG93ZXZlciwgSSBkbyBub3Qgb24gdGhpcyBhY2NvdW50IGNsYWltIGRhbWFnZXMgZnJvbSB0aGVzZSBtZW4sIGJ1dCBJIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgc3VibWl0IHRvIHRoZSBtaXNmb3J0dW5lLCBhbmQgc2hhbGwgdHJ5IHRvIHByb3RlY3QgbXkgb3duIHByb3BlcnR5LiBGb3IgSSB0aGluawogICAgICAgICAgICAgICAgICAgIHRoZSBwbGFpbnRpZmYgaXMgYWN0aW5nIHdpc2VseSBpbiB3YWxsaW5nIGluIGhpcyBsYW5kLCBidXQgd2hlbiBoZSBicmluZ3Mgc3VpdAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgbWUsIEkgaG9sZCB0aGF0IGhlIGlzIHRoZSBiYXNlc3Qgb2YgbWVuIGFuZCB0aGF0IHNvbWUgYWlsbWVudCBoYXMKICAgICAgICAgICAgICAgICAgICBpbXBhaXJlZCBoaXMgd2l0cy4gPC90cmFuc2xhdGlvbj4="
translation['55.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RG8gbm90IGJlIHN1cnByaXNlZCwgbWVuIG9mIHRoZSBqdXJ5LCBhdCB0aGUgZWFnZXJuZXNzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHBsYWludGlmZiBvciBldmVuIGF0IGhpcyBoYXZpbmcgZGFyZWQgdG8gYnJpbmcgYSBmYWxzZSBjaGFyZ2UgYWdhaW5zdCBtZSBub3cuCiAgICAgICAgICAgICAgICAgICAgRm9yIGluIGEgcHJldmlvdXMgaW5zdGFuY2UgYWxzbywgd2hlbiBoZSBpbmR1Y2VkIGhpcyBjb3VzaW4gdG8gbGF5IGNsYWltIHRvIG15CiAgICAgICAgICAgICAgICAgICAgbGFuZCwgaGUgcHJvZHVjZWQgYW4gYWdyZWVtZW50IHdoaWNoIGhhZCBuZXZlciBiZWVuIG1hZGUuIEFuZCBub3cgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgb2J0YWluZWQgYW4gYXdhcmQgYWdhaW5zdCBtZSBmb3IgZGVmYXVsdCBpbiBhIHNpbWlsYXIgc3VpdCwgZW50ZXJpbmcgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgaW5kaWN0bWVudCB0aGUgbmFtZSBvZiBDYWxsYXJ1cywgb25lIG9mIG15IHNsYXZlcy4gRm9yIGluIGFkZGl0aW9uIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgcGllY2VzIG9mIHJhc2NhbGl0eSB0aGV5IGhhdmUgZGV2aXNlZCB0aGlzIHNjaGVtZSBhcyB3ZWxs4oCUdGhleQogICAgICAgICAgICAgICAgICAgIGJyaW5nIHRoaXMgc2FtZSBzdWl0IGFnYWluc3QgQ2FsbGFydXMuIDwvdHJhbnNsYXRpb24+"
translation['55.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0CiAgICAgICAgICAgICAgICAgICAgd2hhdCBzbGF2ZSB3b3VsZCB3YWxsIGluIGhpcyBtYXN0ZXIncyBsYW5kIHdpdGhvdXQgb3JkZXJzIGZyb20gaGlzIG1hc3Rlcj8gQnV0CiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIG5vIG90aGVyIGNoYXJnZSB0byBicmluZyBhZ2FpbnN0IENhbGxhcnVzLCB0aGV5IGxvZGdlIHN1aXQgYWdhaW5zdCBoaW0KICAgICAgICAgICAgICAgICAgICByZWdhcmRpbmcgdGhlIHdhbGwgd2hpY2ggbXkgZmF0aGVyIGJ1aWx0IG1vcmUgdGhhbiBmaWZ0ZWVuIHllYXJzIGJlZm9yZSBoaXMKICAgICAgICAgICAgICAgICAgICBkZWF0aC4gQW5kIGlmIEkgZ2l2ZSB1cCBteSBwcm9wZXJ0eSwgZWl0aGVyIGJ5IHNlbGxpbmcgaXQgdG8gdGhlc2UgbWVuIG9yIGJ5CiAgICAgICAgICAgICAgICAgICAgZXhjaGFuZ2luZyBpdCBmb3Igb3RoZXIgbGFuZCwgQ2FsbGFydXMgaXMgZ3VpbHR5IG9mIG5vIHdyb25nLCBidXQgaWYgSSBkbyBub3QKICAgICAgICAgICAgICAgICAgICBjaG9vc2UgdG8gZ2l2ZSBpdCB1cCB0byB0aGVtLCB0aGVuIHRoZXkgYXJlIGJlaW5nIHdyb25nZWQgYnkgQ2FsbGFydXMgaW4gYWxsCiAgICAgICAgICAgICAgICAgICAgbWFubmVyIG9mIGdyaWV2b3VzIHdheXMsIGFuZCB0aGV5IGxvb2sgb3V0IGZvciBhbiBhcmJpdHJhdG9yIHdobyB3aWxsIGFkanVkZ2UKICAgICAgICAgICAgICAgICAgICB0aGUgcHJvcGVydHkgdG8gdGhlbSwgb3IgZm9yIHNvbWUgc29ydCBvZiBjb21wcm9taXNlIGJ5IHdoaWNoIHRoZXkgd2lsbCBnZXQKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uIG9mIGl0ISA8L3RyYW5zbGF0aW9uPg=="
translation['55.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgdGhlIGp1cnksIGlmIHRob3NlIHdobyBsYXkgcGxvdHMgYWdhaW5zdCBvdGhlcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgYmFzZWxlc3Mgc3VpdHMgYXJlIHRvIGhhdmUgdGhlIGJlc3Qgb2YgaXQsIGFsbCB0aGF0IEkgaGF2ZSBzYWlkIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgcHJvdmUgb2Ygbm8gYXZhaWw7IGJ1dCBpZiB5b3UgYWJvbWluYXRlIHBlb3BsZSBvZiB0aGF0IHNvcnQsIGFuZCB2b3RlIGFzIGp1c3RpY2UKICAgICAgICAgICAgICAgICAgICBkZW1hbmRzLCB0aGVuLCBhcyBDYWxsaWNsZXMgaGFzIHN1ZmZlcmVkIG5vIGxvc3MgYW5kIGhhcyBpbiBubyB3YXkgYmVlbiB3cm9uZ2VkCiAgICAgICAgICAgICAgICAgICAgZWl0aGVyIGJ5IENhbGxhcnVzIG9yIGJ5IG15IGZhdGhlciwgSSBkbyBub3Qgc2VlIHdoYXQgbmVlZCB0aGVyZSBpcyBvZiBteSBzYXlpbmcKICAgICAgICAgICAgICAgICAgICBtb3JlLiA8L3RyYW5zbGF0aW9uPg=="
translation['55.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0byB5b3UsIGhvd2V2ZXIsIHRoYXQgcHJldmlvdXNseSBpbiBoaXMgZGVzaWducyB1cG9uIG15IHByb3BlcnR5IGhlIGdvdCB0aGUgaGVscAogICAgICAgICAgICAgICAgICAgIG9mIGhpcyBjb3VzaW4sIGFuZCB0aGF0IGhlIGhhcyBpbiBoaXMgb3duIHBlcnNvbiBvYnRhaW5lZCBhbiBhd2FyZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgQ2FsbGFydXMgaW4gYW5vdGhlciBzdWNoIHN1aXTigJRsb29raW5nIHVwb24gbWUgd2l0aCBkZXNwaXRlIGJlY2F1c2UgSQogICAgICAgICAgICAgICAgICAgIHZhbHVlIHRoZSBtYW4gaGlnaGx5LOKAlGFuZCB0aGF0IGhlIGhhcyBhZ2FpbiBicm91Z2h0IGFub3RoZXIgc3VpdAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgQ2FsbGFydXMs4oCUdG8gcHJvdmUgYWxsIHRoZXNlIHRoaW5ncyB0aGUgY2xlcmsgc2hhbGwgcmVhZCB5b3UKICAgICAgICAgICAgICAgICAgICB0aGUgZGVwb3NpdGlvbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['55.35'] = ""
translation['56.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIGFtIGEgc2hhcmVyIGluCiAgICAgICAgICAgICAgICAgICAgdGhpcyBsb2FuLCBtZW4gb2YgdGhlIGp1cnkuIFdlLCB3aG8gaGF2ZSBlbmdhZ2VkIGluIHRoZSBidXNpbmVzcyBvZiBvdmVyc2VhcwogICAgICAgICAgICAgICAgICAgIHRyYWRlIGFuZCBwdXQgb3VyIG1vbmV5IGluIHRoZSBoYW5kcyBvZiBvdGhlcnMsIGhhdmUgY29tZSB0byBrbm93IG9uZSB0aGluZyB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgY2xlYXJseTogdGhhdCBpbiBhbGwgcmVzcGVjdHMgdGhlIGJvcnJvd2VyIGhhcyB0aGUgYmVzdCBvZiB1cy4gSGUgcmVjZWl2ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9uZXkgaW4gY2FzaCB3aGljaCB3YXMgZHVseSBhY2tub3dsZWRnZWQsIGFuZCBoYXMgbGVmdCB1cyBvbiBhIHNjcmFwIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIG9mIGNvdXJzZSwgcGFweXJ1cy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgYm91Z2h0IGZvciBhIGNvdXBsZSBvZiBjb3BwZXJzLCBoaXMgYWdyZWVtZW50IHRvIGRvIHRoZSByaWdodCB0aGluZy4gV2UKICAgICAgICAgICAgICAgICAgICBvbiBvdXIgcGFydCBkbyBub3QgcHJvbWlzZSB0byBnaXZlIHRoZSBtb25leSwgd2UgZ2l2ZSBpdCBvdXRyaWdodCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBib3Jyb3dlci4gPC90cmFuc2xhdGlvbj4="
translation['56.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoYXQsIHRoZW4sIGRvIHdlIHJlbHkgdXBvbiwgYW5kIHdoYXQKICAgICAgICAgICAgICAgICAgICBzZWN1cml0eSBkbyB3ZSBnZXQgd2hlbiB3ZSByaXNrIG91ciBtb25leT8gV2UgcmVseSB1cG9uIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LAogICAgICAgICAgICAgICAgICAgIGFuZCB1cG9uIHlvdXIgbGF3cywgd2hpY2ggb3JkYWluIHRoYXQgYWxsIGFncmVlbWVudHMgaW50byB3aGljaCBhIG1hbgogICAgICAgICAgICAgICAgICAgIHZvbHVudGFyaWx5IGVudGVycyB3aXRoIGFub3RoZXIgc2hhbGwgYmUgdmFsaWQuIEJ1dCBpbiBteSBvcGluaW9uIHRoZXJlIGlzIG5vCiAgICAgICAgICAgICAgICAgICAgdXNlIGluIHlvdXIgbGF3cyBvciBpbiBhbnkgY29udHJhY3QsIGlmIHRoZSBvbmUgd2hvIHJlY2VpdmVzIHRoZSBtb25leSBpcyBub3QKICAgICAgICAgICAgICAgICAgICB0aG9yb3VnaGx5IHVwcmlnaHQgaW4gY2hhcmFjdGVyLCBhbmQgZG9lcyBub3QgZWl0aGVyIGZlYXIgeW91PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIHRoZSBqdXJ5IGluIHRoZSBsYXctY291cnRzLjwvbm90ZT4gb3IgcmVnYXJkIHRoZQogICAgICAgICAgICAgICAgICAgIHJpZ2h0cyBvZiB0aGUgb25lIG1ha2luZyB0aGUgbG9hbi4gPC90cmFuc2xhdGlvbj4="
translation['56.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdwogICAgICAgICAgICAgICAgICAgIERpb255c29kb3J1cyBoZXJlIGRvZXMgbmVpdGhlciB0aGUgb25lIG5vciB0aGUgb3RoZXIsIGJ1dCBoYXMgY29tZSB0byBzdWNoIGEKICAgICAgICAgICAgICAgICAgICBwaXRjaCBvZiBhdWRhY2l0eSwgdGhhdCBhbHRob3VnaCBoZSBib3Jyb3dlZCBmcm9tIHVzIHRocmVlIHRob3VzYW5kIGRyYWNobWFlCiAgICAgICAgICAgICAgICAgICAgdXBvbiBoaXMgc2hpcCBvbiB0aGUgY29uZGl0aW9uIHRoYXQgaXQgc2hvdWxkIHNhaWwgYmFjayB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCBhbHRob3VnaCB3ZSBvdWdodCB0byBoYXZlIGdvdAogICAgICAgICAgICAgICAgICAgIGJhY2sgb3VyIG1vbmV5IGluIHRoZSBoYXJ2ZXN0LXNlYXNvbiBvZiBsYXN0IHllYXIsIGhlIHRvb2sgaGlzIHNoaXAgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI2NiI+UmhvZGVzPC9wbGFjZU5hbWU+IGFuZCB0aGVyZSB1bmxhZGVkIGhpcyBjYXJnbwogICAgICAgICAgICAgICAgICAgIGFuZCBzb2xkIGl0IGluIGRlZmlhbmNlIG9mIHRoZSBjb250cmFjdCBhbmQgb2YgeW91ciBsYXdzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkF0aGVuaWFuIGRlYWxlcnMgd2VyZSBhbGxvd2VkIHRvIHNoaXAgZ3JhaW4gb25seSB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBub3QgdG8gZm9yZWlnbgogICAgICAgICAgICAgICAgICAgICAgICBwb3J0czsgY2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNTYuMTAiIHZhbGlkPSJ5ZXMiPkRlbS4gNTYuMTAgaW5mcmE8L2JpYmw+Ljwvbm90ZT47IGFuZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgbm90IHRvIGZvcmVpZ24KICAgICAgICAgICAgICAgICAgICAgICAgcG9ydHM7IGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDU2LjEwIiB2YWxpZD0ieWVzIj5EZW0uIDU2LjEwIGluZnJhPC9iaWJsPi48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gYWdhaW4gaGUgZGVzcGF0Y2hlZCBoaXMgc2hpcAogICAgICAgICAgICAgICAgICAgIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+LCBhbmQgZnJvbSB0aGVuY2UgYmFjayB0bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4sIGFuZCB0byB1cyB3aG8gbGVudCBvdXIKICAgICAgICAgICAgICAgICAgICBtb25leSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gaGUgaGFzIHVwIHRvIHRoaXMKICAgICAgICAgICAgICAgICAgICBkYXkgbmVpdGhlciBwYWlkIGJhY2sgb3VyIG1vbmV5IG5vciBwcm9kdWNlZCB0byB1cyBvdXIgc2VjdXJpdHkuIDwvdHJhbnNsYXRpb24+"
translation['56.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5heSwgZm9yIHR3byB5ZWFycyBub3cgaGUgaGFzIGJlZW4gdXNpbmcgb3VyIG1vbmV5IGZvcgogICAgICAgICAgICAgICAgICAgIGhpcyBwcm9maXQsIGtlZXBpbmcgdGhlIGxvYW4gYW5kIHRoZSB0cmFkZSBhbmQgdGhlIHNoaXAgdGhhdCB3YXMgbW9ydGdhZ2VkIHRvCiAgICAgICAgICAgICAgICAgICAgdXMsIGFuZCBub3R3aXRoc3RhbmRpbmcgdGhpcyBoZSBoYXMgY29tZSBpbnRvIHlvdXIgY291cnQsIGludGVuZGluZyBwbGFpbmx5IHRvCiAgICAgICAgICAgICAgICAgICAgZ2V0IHVzIGZpbmVkIHdpdGggdGhlIHNpeHRoIHBhcnQgb2YgdGhlIGRhbWFnZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkZvciB0aGlzIGZpbmUsIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDPgM+JzrLOtc674b23zrE8L2ZvcmVpZ24+LCBpbXBvc2VkIHVwb24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBsYWludGlmZiwgaGUgZmFpbGVkIHRvIG9idGFpbiBhIGZpZnRoIG9mIHRoZSB2b3Rlcywgc2VlIG5vdGUgb24gcC4gNTAKICAgICAgICAgICAgICAgICAgICAgICAgb2Ygdm9sLiAxLjwvbm90ZT4gYW5kIHRvIHB1dCB1cyBpbiBwcmlzb24sPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4DPic6yzrXOu+G9t86xPC9mb3JlaWduPiwgaW1wb3NlZCB1cG9uCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwbGFpbnRpZmYsIGhlIGZhaWxlZCB0byBvYnRhaW4gYSBmaWZ0aCBvZiB0aGUgdm90ZXMsIHNlZSBub3RlIG9uIHAuIDUwCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHZvbC4gMS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UHJvcGVybHkgdGhlIOKAnGxvZGdpbmcu4oCdIFRoZSBzYW1lIGV1cGhlbWlzbSBvY2N1cnMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzIuMjkiIHZhbGlkPSJ5ZXMiPkRlbS4gMzIuMjk8L2JpYmw+Ljwvbm90ZT4gYmVzaWRlcyByb2JiaW5nIHVzIG9mIG91cgogICAgICAgICAgICAgICAgICAgIG1vbmV5LiBXZSB0aGVyZWZvcmUsIG1lbiBvZiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDMyLjI5IiB2YWxpZD0ieWVzIj5EZW0uIDMyLjI5PC9iaWJsPi48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYmVnIGFuZCBpbXBsb3JlIHlvdSBvbmUgYW5kIGFsbCB0byBjb21lIHRvIG91ciBhaWQsIGlmIHlvdSBmaW5kIHRoYXQgd2UgYXJlCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgd3JvbmdlZC4gQnV0IGZpcnN0IEkgd2FudCB0byBleHBsYWluIHRvIHlvdSBob3cgdGhlIGxvYW4gd2FzIGNvbnRyYWN0ZWQ7CiAgICAgICAgICAgICAgICAgICAgZm9yIHRodXMgaXQgd2lsbCBiZSBlYXNpZXN0IGZvciB5b3UgYWxzbyB0byBmb2xsb3cgdGhlIGNhc2UuIDwvdHJhbnNsYXRpb24+"
translation['56.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIERpb255c29kb3J1cywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kIGhpcyBwYXJ0bmVyCiAgICAgICAgICAgICAgICAgICAgUGFybWVuaXNjdXMgY2FtZSB0byB1cyBsYXN0IHllYXIgaW4gdGhlIG1vbnRoIE1ldGFnZWl0bmlvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG1vbnRoIE1ldGFnZWl0bmlvbiBjb3JyZXNwb25kcyB0byB0aGUgbGF0dGVyIGhhbGYgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQXVndXN0IGFuZCB0aGUgcHJpb3IgaGFsZiBvZiBTZXB0ZW1iZXIuPC9ub3RlPiBhbmQgc2FpZCB0aGF0IHRoZXkgZGVzaXJlZCB0bwogICAgICAgICAgICAgICAgICAgIGJvcnJvdyBtb25leSBvbiB0aGVpciBzaGlwIG9uIHRoZSB0ZXJtcyB0aGF0IHNoZSBzaG91bGQgc2FpbCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiBhbmQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gb3IKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgdGhleSBhZ3JlZWQgdG8gcGF5CiAgICAgICAgICAgICAgICAgICAgdGhlIGludGVyZXN0IGZvciB0aGUgdm95YWdlIHRvIGVpdGhlciBvbmUgb2YgdGhlc2UgcG9ydHMuIDwvdHJhbnNsYXRpb24+"
translation['56.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldlIGFuc3dlcmVkLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgd2Ugd291bGQgbm90IGxlbmQgbW9uZXkKICAgICAgICAgICAgICAgICAgICBmb3IgYSB2b3lhZ2UgdG8gYW55IG90aGVyIHBvcnQgdGhhbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCBzbyB0aGV5IGFncmVlZCB0byByZXR1cm4gaGVyZSwgYW5kIHdpdGggdGhpcwogICAgICAgICAgICAgICAgICAgIHVuZGVyc3RhbmRpbmcgdGhleSBib3Jyb3dlZCBmcm9tIHVzIHRocmVlIHRob3VzYW5kIGRyYWNobWFlIG9uIHRoZSBzZWN1cml0eSBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIHNoaXAgZm9yIHRoZSB2b3lhZ2Ugb3V0IGFuZCBob21lOyBhbmQgdGhleSBlbnRlcmVkIGludG8gYSB3cml0dGVuCiAgICAgICAgICAgICAgICAgICAgYWdyZWVtZW50IHRvIHRoZXNlIHRlcm1zLiBJbiB0aGUgY29udHJhY3QgUGFtcGhpbHVzIGhlcmUgd2FzIG5hbWVkIHRoZSBsZW5kZXI7CiAgICAgICAgICAgICAgICAgICAgYnV0IEksIGFsdGhvdWdoIG5vdCBtZW50aW9uZWQsIHdhcyBhIHNoYXJlciBpbiB0aGUgbG9hbi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kIGZpcnN0IHRoZSBjbGVyayBzaGFsbCByZWFkIHRvIHlvdSB0aGUgYWdyZWVtZW50LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkFncmVlbWVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFncmVlbWVudDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ3JlZW1lbnQ8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['56.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiBhY2NvcmRhbmNlCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGlzIGFncmVlbWVudCwgbWVuIG9mIHRoZSBqdXJ5LCBEaW9ueXNvZG9ydXMgaGVyZSBhbmQgaGlzIHBhcnRuZXIKICAgICAgICAgICAgICAgICAgICBQYXJtZW5pc2N1cywgd2hlbiB0aGV5IGhhZCBnb3QgdGhlIG1vbmV5IGZyb20gdXMsIGRlc3BhdGNoZWQgdGhlaXIgc2hpcCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPi4gUGFybWVuaXNjdXMgc2FpbGVkIGluIGNoYXJnZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzaGlwOyBEaW9ueXNvZG9ydXMgcmVtYWluZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBBbGwgdGhlc2UgbWVuLCBJIHdvdWxkIGhhdmUgeW91IGtub3csIG1lbiBvZiB0aGUganVyeSwKICAgICAgICAgICAgICAgICAgICB3ZXJlIHVuZGVybGluZ3MgYW5kIGNvbmZlZGVyYXRlcyBvZiBDbGVvbWVuZXMsIHRoZSBmb3JtZXIgcnVsZXIgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFmdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyBjb25xdWVzdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiBpbiA8ZGF0ZSBhdXRobmFtZT0iLTMzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTMzMSI+MzMxPC9kYXRlPiBCLkMuIEFsZXhhbmRlciBoYWQgbWFkZSBDbGVvbWVuZXMgY29sbGVjdG9yIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHJldmVudWVzIGZvciB0aGF0IHByb3ZpbmNlLjwvbm90ZT4gd2hvIGZyb20gdGhlIHRpbWUgaGUgcmVjZWl2ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ292ZXJubWVudCBkaWQgbm8gc21hbGwgaGFybSB0byB5b3VyIHN0YXRlLCBvciByYXRoZXIgdG8gdGhlIHJlc3Qgb2YgdGhlIEdyZWVrcwogICAgICAgICAgICAgICAgICAgIGFzIHdlbGwsIGJ5IGJ1eWluZyB1cCBncmFpbiBmb3IgcmVzYWxlIGFuZCBmaXhpbmcgaXRzIHByaWNlLCBhbmQgaW4gdGhpcyBoZSBoYWQKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4gYXMgaGlzIGNvbmZlZGVyYXRlcy4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4gaW4gPGRhdGUgYXV0aG5hbWU9Ii0zMzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zMzEiPjMzMTwvZGF0ZT4gQi5DLiBBbGV4YW5kZXIgaGFkIG1hZGUgQ2xlb21lbmVzIGNvbGxlY3RvciBvZgogICAgICAgICAgICAgICAgICAgICAgICByZXZlbnVlcyBmb3IgdGhhdCBwcm92aW5jZS48L3RyYW5zbGF0aW9uPg=="
translation['56.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgb2YgdGhlbQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGRlc3BhdGNoIHRoZSBzdHVmZiBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIG90aGVycyB3b3VsZCBzYWlsIGluIGNoYXJnZSBvZiB0aGUgc2hpcG1lbnRzLCB3aGlsZSBzdGlsbCBvdGhlcnMgd291bGQgcmVtYWluCiAgICAgICAgICAgICAgICAgICAgaGVyZSBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYW5kIGRpc3Bvc2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc2lnbm1lbnRzLiBUaGVuIHRob3NlIHdobyByZW1haW5lZCBoZXJlIHdvdWxkIHNlbmQgbGV0dGVycyB0byB0aG9zZSBhYnJvYWQKICAgICAgICAgICAgICAgICAgICBhZHZpc2luZyB0aGVtIG9mIHRoZSBwcmV2YWlsaW5nIHByaWNlcywgc28gdGhhdCBpZiBncmFpbiB3ZXJlIGRlYXIgaW4geW91cgogICAgICAgICAgICAgICAgICAgIG1hcmtldCwgdGhleSBtaWdodCBicmluZyBpdCBoZXJlLCBhbmQgaWYgdGhlIHByaWNlIHNob3VsZCBmYWxsLCB0aGV5IG1pZ2h0IHB1dAogICAgICAgICAgICAgICAgICAgIGluIHRvIHNvbWUgb3RoZXIgcG9ydC4gVGhpcyB3YXMgdGhlIGNoaWVmIHJlYXNvbiwgbWVuIG9mIHRoZSBqdXJ5LCB3aHkgdGhlIHByaWNlCiAgICAgICAgICAgICAgICAgICAgb2YgZ3JhaW4gYWR2YW5jZWQ7IGl0IHdhcyBkdWUgdG8gc3VjaCBsZXR0ZXJzIGFuZCBjb25zcGlyYWNpZXMuIDwvdHJhbnNsYXRpb24+"
translation['56.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPldlbGwgdGhlbiwgd2hlbiB0aGVzZSBtZW4gZGVzcGF0Y2hlZCB0aGVpciBzaGlwIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGV5IGxlZnQgdGhlIHByaWNlIG9mCiAgICAgICAgICAgICAgICAgICAgZ3JhaW4gaGVyZSBwcmV0dHkgaGlnaCwgYW5kIGZvciB0aGlzIHJlYXNvbiB0aGV5IHN1Ym1pdHRlZCB0byBoYXZlIHRoZSBjbGF1c2UKICAgICAgICAgICAgICAgICAgICB3cml0dGVuIGluIHRoZSBhZ3JlZW1lbnQgYmluZGluZyB0aGVtIHRvIHNhaWwgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCB0byBubyBvdGhlciBwb3J0LiBBZnRlcndhcmRzLCBob3dldmVyLCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgd2hlbiB0aGUgc2hpcHMgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzEyMiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMTIyIj5TaWNpbHk8L3BsYWNlTmFtZT4gaGFkCiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCwgYW5kIHRoZSBwcmljZXMgb2YgZ3JhaW4gaGVyZSB3ZXJlIGZhbGxpbmcsIGFuZCB0aGVpciBzaGlwIGhhZCByZWFjaGVkCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+LCB0aGUgZGVmZW5kYW50IHN0cmFpZ2h0d2F5CiAgICAgICAgICAgICAgICAgICAgc2VudCBhIG1hbiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gdG8gaW5mb3JtIGhpcwogICAgICAgICAgICAgICAgICAgIHBhcnRuZXIgUGFybWVuaXNjdXMgb2YgdGhlIHN0YXRlIG9mIHRoaW5ncyBoZXJlLCB3ZWxsIGtub3dpbmcgdGhhdCBoaXMgc2hpcAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIGZvcmNlZCB0byB0b3VjaCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['56.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgb3V0Y29tZSB3YXMgdGhhdCBQYXJtZW5pc2N1cywgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50J3MgcGFydG5lciwgd2hlbiBoZSBoYWQgcmVjZWl2ZWQgdGhlIGxldHRlciBzZW50IGJ5IGhpbSBhbmQgaGFkIGxlYXJuZWQKICAgICAgICAgICAgICAgICAgICB0aGUgcHJpY2Ugb2YgZ3JhaW4gcHJldmFpbGluZyBoZXJlLCBkaXNjaGFyZ2VkIGhpcyBjYXJnbyBvZiBncmFpbiBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gYW5kIHNvbGQgaXQgdGhlcmUgaW4gZGVmaWFuY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYWdyZWVtZW50LCBtZW4gb2YgdGhlIGp1cnksIGFuZCBvZiB0aGUgcGVuYWx0aWVzIHRvIHdoaWNoIHRoZXkgaGFkIG9mIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIHdpbGwgYm91bmQgdGhlbXNlbHZlcywgaW4gY2FzZSB0aGV5IHNob3VsZCBjb21taXQgYW55IGJyZWFjaCBvZiB0aGUgYWdyZWVtZW50LAogICAgICAgICAgICAgICAgICAgIGFuZCBpbiBjb250ZW1wdCBhbHNvIG9mIHlvdXIgbGF3cyB3aGljaCBvcmRhaW4gdGhhdCBzaGlwb3duZXJzIGFuZCBzdXBlcmNhcmdvZXMKICAgICAgICAgICAgICAgICAgICBzaGFsbCBzYWlsIHRvIHRoZSBwb3J0IHRvIHdoaWNoIHRoZXkgaGF2ZSBhZ3JlZWQgdG8gc2FpbCBvciBlbHNlIGJlIGxpYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBzZXZlcmVzdCBwZW5hbHRpZXMuIDwvdHJhbnNsYXRpb24+"
translation['56.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2Ugb24gb3VyIHBhcnQsIGFzIHNvb24gYXMgd2UgbGVhcm5lZCB3aGF0IGhhZCB0YWtlbiBwbGFjZSwgd2VyZQogICAgICAgICAgICAgICAgICAgIGdyZWF0bHkgZGlzbWF5ZWQgYXQgaGlzIGFjdGlvbiwgYW5kIHdlbnQgdG8gdGhpcyBtYW4sIHdobyB3YXMgdGhlIHByaW1lIG1vdmVyIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIHBsb3QsIGNvbXBsYWluaW5nIGFuZ3JpbHksIGFzIHdhcyBuYXR1cmFsLCB0aGF0IGFsdGhvdWdoIHdlIGhhZAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3NlZGx5IHN0aXB1bGF0ZWQgaW4gdGhlIGFncmVlbWVudCB0aGF0IHRoZSBzaGlwIHNob3VsZCBzYWlsIHRvIG5vIG90aGVyCiAgICAgICAgICAgICAgICAgICAgcG9ydCB0aGFuIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kIGhhZCBsZW50CiAgICAgICAgICAgICAgICAgICAgb3VyIG1vbmV5IG9uIHRoaXMgY29uZGl0aW9uLCBoZSBoYWQgbGVmdCB1cyBvcGVuIHRvIHN1c3BpY2lvbiB3aXRoIHBlb3BsZSB3aG8KICAgICAgICAgICAgICAgICAgICBtaWdodCB3aXNoIHRvIGFjY3VzZSBhbmQgc2F5IHRoYXQgd2UgYWxzbyBoYWQgYmVlbiBwYXJ0bmVycyB0byB0aGUgY29udmV5YW5jZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBncmFpbiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT47IGFuZCBjb21wbGFpbmluZwogICAgICAgICAgICAgICAgICAgIGFsc28gdGhhdCBoZSBhbmQgaGlzIHBhcnRuZXIsIGRlc3BpdGUgdGhlaXIgYWdyZWVtZW50IHRvIGRvIHNvLCBoYWQgbm90IGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICB0aGUgc2hpcCBiYWNrIHRvIHlvdXIgcG9ydC4gPC90cmFuc2xhdGlvbj4="
translation['56.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBob3dldmVyLCB3ZQogICAgICAgICAgICAgICAgICAgIG1hZGUgbm8gaGVhZHdheSBpbiB0YWxraW5nIGFib3V0IHRoZSBhZ3JlZW1lbnQgYW5kIG91ciByaWdodHMsIHdlIGRlbWFuZGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBhdCBhbnkgcmF0ZSBwYXkgdXMgYmFjayB0aGUgYW1vdW50IGxvYW5lZCB3aXRoIHRoZSBpbnRlcmVzdCBhcyBvcmlnaW5hbGx5CiAgICAgICAgICAgICAgICAgICAgYWdyZWVkIHVwb24uIEJ1dCB0aGUgZmVsbG93IHRyZWF0ZWQgdXMgd2l0aCBzdWNoIGluc29sZW5jZSBhcyB0byBkZWNsYXJlIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBub3QgcGF5IHRoZSBpbnRlcmVzdCBzdGlwdWxhdGVkIGluIHRoZSBhZ3JlZW1lbnQuIOKAnElmLAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIs4oCdIGhlIHNhaWQsIOKAnHlvdSBhcmUgd2lsbGluZyB0byBhY2NlcHQgdGhlIGludGVyZXN0CiAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlZCBpbiBwcm9wb3J0aW9uIHRvIHRoZSB2b3lhZ2UgY29tcGxldGVkLCBJIHdpbGwgZ2l2ZSB5b3Us4oCdCiAgICAgICAgICAgICAgICAgICAgc2FpZCBoZSwg4oCcdGhlIGludGVyZXN0IGFzIGZhciBhcyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT47IGJ1dCBtb3JlIEkgd2lsbCBub3QgZ2l2ZS7igJ0gVGh1cyBoZSBtYWRlIGEgbGF3CiAgICAgICAgICAgICAgICAgICAgZm9yIGhpbXNlbGYgYW5kIHJlZnVzZWQgdG8gY29tcGx5IHdpdGggdGhlIGp1c3QgdGVybXMgb2YgdGhlIGFncmVlbWVudC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['56.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiB3ZQogICAgICAgICAgICAgICAgICAgIHNhaWQgdGhhdCB3ZSBjb3VsZCBub3QgYWNxdWllc2NlIGluIGFueXRoaW5nIGxpa2UgdGhpcywgY29uc2lkZXJpbmcgdGhhdCwgd2VyZQogICAgICAgICAgICAgICAgICAgIHdlIHRvIGRvIHNvLCBpdCB3b3VsZCBiZSBhbiBhZG1pc3Npb24gdGhhdCB3ZSB0b28gaGFkIGJlZW4gZW5nYWdlZCBpbiBjb252ZXlpbmcKICAgICAgICAgICAgICAgICAgICBncmFpbiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4sIGhlIGJlY2FtZSBldmVuIG1vcmUKICAgICAgICAgICAgICAgICAgICBpbnNpc3RlbnQsIGFuZCBjYW1lIHVwIHRvIHVzLCBicmluZ2luZyBhIGhvc3Qgb2Ygd2l0bmVzc2VzLCBhc3NlcnRpbmcgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyByZWFkeSB0byBwYXkgdXMgdGhlIHByaW5jaXBhbCB3aXRoIGludGVyZXN0IGFzIGZhciBhcyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT47IG5vdCB0aGF0IGhlIGhhZCBhbnkgbW9yZSBpbnRlbnRpb24gdG8KICAgICAgICAgICAgICAgICAgICBwYXksIG1lbiBvZiB0aGUganVyeSwgYnV0IHN1c3BlY3RpbmcgdGhhdCB3ZSBzaG91bGQgYmUgdW53aWxsaW5nIHRvIGFjY2VwdCB0aGUKICAgICAgICAgICAgICAgICAgICBtb25leSBvbiBhY2NvdW50IG9mIHRoZSBjaGFyZ2VzIHRvIHdoaWNoIG91ciBhY3Rpb24gbWlnaHQgZ2l2ZSByaXNlLiBUaGUgcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgbWFkZSB0aGlzIGNsZWFyLiA8L3RyYW5zbGF0aW9uPg=="
translation['56.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiBzb21lIG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICBjaXRpemVucywgbWVuIG9mIEF0aGVucywgd2hvIGNoYW5jZWQgdG8gYmUgcHJlc2VudCBhZHZpc2VkIHRvIGFjY2VwdCB3aGF0IHdhcwogICAgICAgICAgICAgICAgICAgIG9mZmVyZWQgYW5kIHRvIHN1ZSBmb3IgdGhlIGFtb3VudCB1bmRlciBkaXNwdXRlLCBidXQgbm90IHRvIGFkbWl0IHRoZSByZWNrb25pbmcKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgaW50ZXJlc3QgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI2NiI+UmhvZGVzPC9wbGFjZU5hbWU+IHVudGlsIHRoZQogICAgICAgICAgICAgICAgICAgIGNhc2Ugc2hvdWxkIGJlIHNldHRsZWQgd2UgYWdyZWVkIHRvIHRoaXMuIFdlIHdlcmUgbm90IHVuYXdhcmUsIG1lbiBvZiB0aGUganVyeSwKICAgICAgICAgICAgICAgICAgICBvZiBvdXIgcmlnaHRzIHVuZGVyIHRoZSBhZ3JlZW1lbnQsIGJ1dCB3ZSB0aG91Z2h0IGl0IGJldHRlciB0byBzdWZmZXIgc29tZSBsb3NzCiAgICAgICAgICAgICAgICAgICAgYW5kIHRvIG1ha2UgYSBjb25jZXNzaW9uLCBzbyBhcyBub3QgdG8gYXBwZWFyIGxpdGlnaW91cy4gQnV0IHdoZW4gdGhlIGZlbGxvdyBzYXcKICAgICAgICAgICAgICAgICAgICB0aGF0IHdlIHdlcmUgb24gdGhlIHBvaW50IG9mIGFjY2VwdGluZyBoaXMgb2ZmZXIsIGhlIHNhaWQsIOKAnFdlbGwsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgY2FuY2VsIHRoZSBhZ3JlZW1lbnQu4oCdIOKAnFdlIGNhbmNlbCB0aGUgYWdyZWVtZW50PwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['56.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5JbmRlZWQgd2Ugd2lsbCBub3QuIEhvd2V2ZXIsIGFzIGZhciBhcwogICAgICAgICAgICAgICAgICAgIGNvbmNlcm5zIGFueSBtb25leSB5b3UgbWF5IHBheSB3ZSB3aWxsIGluIHRoZSBwcmVzZW5jZSBvZiB0aGUgYmFua2VyIGFncmVlIHRvCiAgICAgICAgICAgICAgICAgICAgYW5udWwgdGhlIGFncmVlbWVudDsgYnV0IGNhbmNlbCBpdCBpbiBpdHMgZW50aXJldHkgd2Ugd2lsbCBub3QsIHVudGlsIHdlIGdldCBhCiAgICAgICAgICAgICAgICAgICAgdmVyZGljdCBvbiB0aGUgbWF0dGVycyB1bmRlciBkaXNwdXRlLiBGb3Igd2hhdCBqdXN0IHBsZWEgc2hhbGwgd2UgaGF2ZSwgb3Igb24KICAgICAgICAgICAgICAgICAgICB3aGF0IGNhbiB3ZSByZWx5IHdoZW4gd2UgY29tZSB0byBhIGNvbnRlc3QgYXQgbGF3LCB3aGV0aGVyIHdlIGhhdmUgdG8gYXBwZWFyCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGFuIGFyYml0cmF0b3Igb3IgYmVmb3JlIGEgY291cnQsIGlmIHdlIGhhdmUgY2FuY2VsbGVkIHRoZSBhZ3JlZW1lbnQgb24KICAgICAgICAgICAgICAgICAgICB3aGljaCB3ZSByZWx5IGZvciB0aGUgcmVjb3Zlcnkgb2Ygb3VyIHJpZ2h0cz/igJ0gPC90cmFuc2xhdGlvbj4="
translation['56.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIHdhcyBvdXIgYW5zd2VyIHRvIGhpbSwgbWVuIG9mIHRoZSBqdXJ5LCBhbmQgd2UgZGVtYW5kZWQKICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIGZlbGxvdyBEaW9ueXNvZG9ydXMgdGhhdCBoZSBzaG91bGQgbm90IGRpc3R1cmIgb3IgYW5udWwgdGhlIGFncmVlbWVudAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXNlIG1lbiB0aGVtc2VsdmVzIGFkbWl0dGVkIHRvIGJlIGJpbmRpbmcsIGJ1dCB0aGF0IGluIHJlZ2FyZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBhbW91bnQgaGUgc2hvdWxkIHBheSB1cyB3aGF0IGhlIGhpbXNlbGYgYWNrbm93bGVkZ2VkIHRvIGJlIGR1ZSBhbmQgdG8gbGVhdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgc2V0dGxlbWVudCBvZiB0aGUgc3VtIHVuZGVyIGRpc3B1dGUg77yId2l0aCB0aGUgdW5kZXJzdGFuZGluZyB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIG1vbmV5IHdhcyBhdmFpbGFibGXvvIkgdG8gdGhlIGRlY2lzaW9uIG9mIG9uZSBvciBtb3JlIGFyYml0cmF0b3JzLCBhcyBoZQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IHByZWZlciwgdG8gYmUgY2hvc2VuIGZyb20gYW1vbmcgdGhlIG1lcmNoYW50cyBvZiB0aGlzIHBvcnQuIERpb255c29kb3J1cywKICAgICAgICAgICAgICAgICAgICBob3dldmVyLCB3b3VsZCBub3QgbGlzdGVuIHRvIGFueXRoaW5nIG9mIHRoaXMgc29ydCwgYnV0IGJlY2F1c2Ugd2UgcmVmdXNlZCB0bwogICAgICAgICAgICAgICAgICAgIGFjY2VwdCB3aGF0IGhlIGFncmVlZCB0byBwYXkgYW5kIGNhbmNlbCB0aGUgYWdyZWVtZW50IGFsdG9nZXRoZXIsIGhlIGhhcyBmb3IgdHdvCiAgICAgICAgICAgICAgICAgICAgeWVhcnMga2VwdCBhbmQgbWFkZSB1c2Ugb2Ygb3VyIGNhcGl0YWw7IDwvdHJhbnNsYXRpb24+"
translation['56.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQKICAgICAgICAgICAgICAgICAgICB3aGF0IGlzIHRoZSBtb3N0IG91dHJhZ2VvdXMgdGhpbmcgb2YgYWxsLCBtZW4gb2YgdGhlIGp1cnksIHRoZSBmZWxsb3cgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGdldHMgbWFyaXRpbWUgaW50ZXJlc3Q8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TWFyaXRpbWUgbG9hbnMgYXBwZWFyIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgY29tbWFuZGVkIGEgaGlnaGVyIHJhdGUgb2YgaW50ZXJlc3QgdGhhbiB0aG9zZSBzZWN1cmVkIGJ5IHJlYWwgcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBvZiB0aGUgZ3JlYXRlciByaXNrIGludm9sdmVkLiBJbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDUwLjE3IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1MC4xNzwvYmlibD4gd2UgYXJlIHRvbGQgb2YgYSBtYXJpdGltZSBsb2FuIGNvbnRyYWN0ZWQgYXQgMTIgMS8yJSwgYnV0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSByYXRlIG9mIGludGVyZXN0IHZhcmllZC48L25vdGU+IGZyb20gb3RoZXIgcGVvcGxlIGZyb20gb3VyIG1vbmV5LAogICAgICAgICAgICAgICAgICAgIGxlbmRpbmcgaXQsIG5vdCBhdCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDUwLjE3IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1MC4xNzwvYmlibD4gd2UgYXJlIHRvbGQgb2YgYSBtYXJpdGltZSBsb2FuIGNvbnRyYWN0ZWQgYXQgMTIgMS8yJSwgYnV0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSByYXRlIG9mIGludGVyZXN0IHZhcmllZC48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gb3IgZm9yIGEKICAgICAgICAgICAgICAgICAgICB2b3lhZ2UgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBidXQgZm9yIHZveWFnZXMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI2NiI+UmhvZGVzPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiwgd2hpbGUgdG8gdXMgd2hvIGxlbnQgaGltIG1vbmV5IGZvciBhCiAgICAgICAgICAgICAgICAgICAgdm95YWdlIHRvIHlvdXIgcG9ydCBoZSB0aGlua3MgaGUgbmVlZCBkbyBub3RoaW5nIHRoYXQganVzdGljZSBkZW1hbmRzPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBhbSBzcGVha2luZyB0aGUgdHJ1dGgsIHRoZSBjbGVyayBzaGFsbAogICAgICAgICAgICAgICAgICAgIHJlYWQgeW91IHRoZSBjaGFsbGVuZ2Ugd2hpY2ggSSBnYXZlIERpb255c29kb3J1cyBjb25jZXJuaW5nIHRoZXNlIG1hdHRlcnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQ2hhbGxlbmdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhbGxlbmdlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNoYWxsZW5nZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['56.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBjaGFsbGVuZ2UsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgd2UgdGVuZGVyZWQgdG8gdGhpcyBEaW9ueXNvZG9ydXMgYWdhaW4gYW5kIGFnYWluLCBhbmQgd2UgZXhwb3NlZCB0aGUKICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2UgdG8gcHVibGljIHZpZXcgb3ZlciBhIHBlcmlvZCBvZiBtYW55IGRheXMuIEhlLCBob3dldmVyLCBkZWNsYXJlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2UgbXVzdCBiZSBhYnNvbHV0ZSBzaW1wbGV0b25zLCBpZiB3ZSBzdXBwb3NlZCBoaW0gdG8gYmUgc2Vuc2VsZXNzIGVub3VnaCB0byBnbwogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBhbiBhcmJpdHJhdG9y4oCUd2hvIHdvdWxkIG1vc3QgY2VydGFpbmx5IGNvbmRlbW4gaGltIHRvIHBheSB0aGUKICAgICAgICAgICAgICAgICAgICBkZWJ04oCUd2hlbiBoZSBtaWdodCBjb21lIGludG8gY291cnQgYnJpbmdpbmcgdGhlIG1vbmV5IHdpdGggaGltLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVuLCBpZiBoZSBjb3VsZCBob29kd2luayB5b3UgaGUgd291bGQgZ28gYmFjayBrZWVwaW5nIHBvc3Nlc3Npb24gb2Ygd2hhdCB3YXMKICAgICAgICAgICAgICAgICAgICBhbm90aGVyJ3MsIGFuZCBpZiBoZSBjb3VsZCBub3QsIGhlIHdvdWxkIHRoZW4gcGF5IHRoZSBtb25leS4gVGh1cyBoZSBzaG93ZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBubyBjb25maWRlbmNlIGluIHRoZSBqdXN0aWNlIG9mIGhpcyBjYXNlLCBidXQgdGhhdCBoZSB3aXNoZWQgdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIHRyaWFsIG9mIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['56.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQsIHRoZW4sIG1lbiBvZiB0aGUganVyeSwgd2hhdCBEaW9ueXNvZG9ydXMgaGFzIGRvbmU7IGFuZCBhcyB5b3UKICAgICAgICAgICAgICAgICAgICBoYXZlIGhlYXJkIEkgZmFuY3kgeW91IGhhdmUgbG9uZyBiZWVuIGFtYXplZCBhdCBoaXMgYXVkYWNpdHksIGFuZCBoYXZlIHdvbmRlcmVkCiAgICAgICAgICAgICAgICAgICAgdXBvbiB3aGF0IGluIHRoZSB3b3JsZCBoZSByZWxpZXMgaW4gY29taW5nIGludG8gY291cnQuIEZvciBpcyBpdCBub3QgdGhlIGhlaWdodAogICAgICAgICAgICAgICAgICAgIG9mIGF1ZGFjaXR5LCB3aGVuIGEgbWFuIHdobyBoYXMgYm9ycm93ZWQgbW9uZXkgZnJvbSB0aGUgcG9ydCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIDwvdHJhbnNsYXRpb24+"
translation['56.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaGFzIGV4cHJlc3NseSBhZ3JlZWQgaW4gd3JpdGluZyB0aGF0IGhpcyBzaGlwIHNoYWxsIHJldHVybiB0byB5b3VyIHBvcnQsCiAgICAgICAgICAgICAgICAgICAgb3IgdGhhdCwgaWYgc2hlIGRvZXMgbm90LCBoZSBzaGFsbCBwYXkgZG91YmxlIHRoZSBhbW91bnQsIGhhcyBub3QgYnJvdWdodCB0aGUKICAgICAgICAgICAgICAgICAgICBzaGlwIHRvIHRoZSBQZWlyYWV1cyBhbmQgZG9lcyBub3QgcGF5IGhpcyBkZWJ0IHRvIHRoZSBsZW5kZXJzOyBhbmQgYXMgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGdyYWluLCBoYXMgdW5sYWRlZCB0aGF0IGFuZCBzb2xkIGl0IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjY2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyNjYiPlJob2RlczwvcGxhY2VOYW1lPiwgYW5kIHRoZW4gZGVzcGl0ZSBhbGwgdGhpcyBkYXJlcyB0byBsb29rIGludG8geW91cgogICAgICAgICAgICAgICAgICAgIGZhY2VzPyA8L3RyYW5zbGF0aW9uPg=="
translation['56.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGVhciB3aGF0IGhlIHNheXMgaW4gcmVwbHkgdG8gdGhpcy4KICAgICAgICAgICAgICAgICAgICBIZSBhbGxlZ2VzIHRoYXQgdGhlIHNoaXAgd2FzIGRpc2FibGVkIG9uIHRoZSB2b3lhZ2UgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiwgYW5kIHRoYXQgZm9yIHRoaXMgcmVhc29uIGhlIHdhcyBvYmxpZ2VkCiAgICAgICAgICAgICAgICAgICAgdG8gdG91Y2ggYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI2NiI+UmhvZGVzPC9wbGFjZU5hbWU+IGFuZCB1bmxhZGUgdGhlIGdyYWluCiAgICAgICAgICAgICAgICAgICAgdGhlcmUuIEFuZCBhcyBhIHByb29mIG9mIHRoaXMgaGUgc3RhdGVzIHRoYXQgaGUgY2hhcnRlcmVkIHNoaXBzIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI2NiI+UmhvZGVzPC9wbGFjZU5hbWU+IGFuZCBzaGlwcGVkIHNvbWUgb2YgaGlzIGdvb2RzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gVGhpcyBpcyBvbmUgcGFydCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBkZWZlbmNlLCBhbmQgaGVyZSBpcyBhbm90aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['56.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBjbGFpbXMgdGhhdAogICAgICAgICAgICAgICAgICAgIHNvbWUgb3RoZXIgY3JlZGl0b3JzIG9mIGhpcyBoYXZlIGFncmVlZCB0byBhY2NlcHQgZnJvbSBoaW0gaW50ZXJlc3QgYXMgZmFyIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjY2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyNjYiPlJob2RlczwvcGxhY2VOYW1lPiwgYW5kIHRoYXQgaXQgd291bGQgYmUgaGFyZAogICAgICAgICAgICAgICAgICAgIGluZGVlZCBpZiB3ZSBzaG91bGQgbm90IG1ha2UgdGhlIHNhbWUgY29uY2Vzc2lvbiB0aGF0IHRoZXkgaGF2ZSBtYWRlLiBBbmQKICAgICAgICAgICAgICAgICAgICB0aGlyZGx5LCBiZXNpZGVzIGFsbCB0aGlzLCBoZSBkZWNsYXJlcyB0aGF0IHRoZSBhZ3JlZW1lbnQgcmVxdWlyZXMgaGltIHRvIHBheQogICAgICAgICAgICAgICAgICAgIHRoZSBtb25leSBpZiB0aGUgc2hpcCBhcnJpdmVzIHNhZmVseSwgYnV0IHRoYXQgdGhlIHNoaXAgaGFzIG5vdCBhcnJpdmVkIHNhZmVseQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBQZWlyYWV1cy4gVG8gZWFjaCBvZiB0aGVzZSBhcmd1bWVudHMsIG1lbiBvZiB0aGUganVyeSwgaGVhciB0aGUganVzdAogICAgICAgICAgICAgICAgICAgIGFuc3dlciB0aGF0IHdlIG1ha2UuIDwvdHJhbnNsYXRpb24+"
translation['56.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gdGhlIGZpcnN0IHBsYWNlLCB3aGVuIGhlIHNheXMgdGhhdCB0aGUgc2hpcCB3YXMgZGlzYWJsZWQsIEkgdGhpbmsKICAgICAgICAgICAgICAgICAgICBpdCBpcyBwbGFpbiB0byB5b3UgYWxsIHRoYXQgaGUgaXMgbHlpbmcuIEZvciBpZiBoaXMgc2hpcCBoYWQgbWV0IHdpdGggdGhpcwogICAgICAgICAgICAgICAgICAgIG1pc2hhcCwgc2hlIHdvdWxkIG5laXRoZXIgaGF2ZSBnb3Qgc2FmZWx5IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjY2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyNjYiPlJob2RlczwvcGxhY2VOYW1lPiBub3IgaGF2ZSBiZWVuIGZpdCBmb3Igc2FpbGluZyBhZnRlcndhcmRzLiBCdXQgaW4gZmFjdCBpdAogICAgICAgICAgICAgICAgICAgIGlzIHBsYWluIHRoYXQgc2hlIGRpZCBnZXQgc2FmZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gYW5kIHdhcyBzZW50IGJhY2sgZnJvbSB0aGVuY2UgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4sIGFuZCB0aGF0IGF0IHRoZSBwcmVzZW50IHRpbWUgc2hlIGlzCiAgICAgICAgICAgICAgICAgICAgc3RpbGwgc2FpbGluZyBldmVyeXdoZXJlIGV4Y2VwdCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uIEFuZCB5ZXQgaXMgaXQgbm90IG91dHJhZ2VvdXMgdGhhdCwgd2hlbiBoZSBoYXMgdG8gYnJpbmcKICAgICAgICAgICAgICAgICAgICBoaXMgc2hpcCBiYWNrIHRvIHRoZSBwb3J0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBoZSBzYXlzIHNoZSB3YXMgZGlzYWJsZWQsIGJ1dCB3aGVuIGhlIHdhbnRzIHRvIHVubGFkZSBoaXMgZ3JhaW4gYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI2NiI+UmhvZGVzPC9wbGFjZU5hbWU+LCB0aGVuIHRoYXQgc2FtZSBzaGlwIGlzIHNlZW4gdG8gYmUKICAgICAgICAgICAgICAgICAgICBzZWF3b3J0aHk/IDwvdHJhbnNsYXRpb24+"
translation['56.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2h5LAogICAgICAgICAgICAgICAgICAgIHRoZW4sIGhlIHNheXMsIGRpZCBJIGNoYXJ0ZXIgb3RoZXIgc2hpcHMgYW5kIHRyYW5zaGlwIG15IGNhcmdvIGFuZCBkZXNwYXRjaCBpdAogICAgICAgICAgICAgICAgICAgIGhlcmUgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+PyBCZWNhdXNlLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBuZWl0aGVyIHRoZSBkZWZlbmRhbnQKICAgICAgICAgICAgICAgICAgICBub3IgaGlzIHBhcnRuZXIgd2FzIG93bmVyIG9mIHRoZSBlbnRpcmUgY2FyZ28sIGJ1dCwgSSBmYW5jeSwgdGhlIHN1cGVyY2FyZ29lcwogICAgICAgICAgICAgICAgICAgIHdobyB3ZXJlIG9uIGJvYXJkIGRlc3BhdGNoZWQgdGhlaXIgb3duIGdvb2RzIGhpdGhlciwgaW4gb3RoZXIgYm90dG9tcwogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyaWx5LCBzZWVpbmcgdGhhdCB0aGVzZSBtZW4gaGFkIGN1dCBzaG9ydCB0aGUgdm95YWdlIGJlZm9yZSB0aGUgc2hpcAogICAgICAgICAgICAgICAgICAgIHJlYWNoZWQgaGVyIGRlc3RpbmF0aW9uLiBBcyBmb3IgdGhlIGdvb2RzLCBob3dldmVyLCB3aGljaCB3ZXJlIHRoZWlyIG93biwgdGhleQogICAgICAgICAgICAgICAgICAgIGRpZCBub3Qgc2hpcCB0aGVzZSBpbiB0aGVpciBlbnRpcmV0eSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGJ1dCBzb3VnaHQgb3V0IHdoYXQgb25lcyBoYWQgYWR2YW5jZWQgaW4gcHJpY2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['56.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2h5LCBwcmF5LCB3YXMgaXQgdGhhdCwgd2hlbiB5b3UgaGFkCiAgICAgICAgICAgICAgICAgICAgaGlyZWQgb3RoZXIgYm90dG9tcywgYXMgeW91IHNheSwgeW91IGRpZCBub3QgdHJhbnNoaXAgdGhlIGVudGlyZSBjYXJnbyBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgdmVzc2VsLCBidXQgbGVmdCB0aGUgZ3JhaW4gdGhlcmUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI2NiI+UmhvZGVzPC9wbGFjZU5hbWU+PyBCZWNhdXNlLCBtZW4gb2YgdGhlIGp1cnksIGl0IHdhcyB0byB0aGVpciBpbnRlcmVzdCB0bwogICAgICAgICAgICAgICAgICAgIHNlbGwgdGhlIGdyYWluIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjY2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyNjYiPlJob2RlczwvcGxhY2VOYW1lPjsgZm9yIHRoZXkKICAgICAgICAgICAgICAgICAgICBoZWFyZCB0aGF0IHRoZSBwcmljZSBoYWQgZmFsbGVuIGhlcmUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBidXQgdGhleSBzaGlwcGVkIHRvIHlvdSB0aGUgb3RoZXIgZ29vZHMsIGZyb20gd2hpY2gKICAgICAgICAgICAgICAgICAgICB0aGV5IGhvcGVkIHRvIG1ha2UgYSBwcm9maXQuIFdoZW4sIHRoZW4sIERpb255c29kb3J1cywgeW91IHRhbGsgYWJvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgY2hhcnRlcmluZyBvZiB0aGUgdmVzc2VscywgeW91IGdpdmUgcHJvb2YsIG5vdCB0aGF0IHlvdXIgc2hpcCB3YXMgZGlzYWJsZWQsIGJ1dAogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgd2FzIHRvIHlvdXIgYWR2YW50YWdlIHRvIGRvIHNvLiA8L3RyYW5zbGF0aW9uPg=="
translation['56.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q29uY2VybmluZyB0aGVzZSBtYXR0ZXJzLCB0aGVuLCB3aGF0IEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHNhaWQgaXMgc3VmZmljaWVudCwgYnV0IGluIHJlZ2FyZCB0byB0aGUgY3JlZGl0b3JzLCB3aG8sIHRoZXkgc2F5LCBjb25zZW50ZWQgdG8KICAgICAgICAgICAgICAgICAgICBhY2NlcHQgZnJvbSB0aGVtIHRoZSBpbnRlcmVzdCBhcyBmYXIgYXMgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI2NiI+UmhvZGVzPC9wbGFjZU5hbWU+LCB0aGlzIGhhcyBub3RoaW5nIHRvIGRvIHdpdGggdXMuIElmIGFueSBtYW4gaGFzIHJlbWl0dGVkCiAgICAgICAgICAgICAgICAgICAgdG8geW91IGFueSBwYXJ0IG9mIHdoYXQgd2FzIGR1ZSBoaW0sIG5vIHdyb25nIGlzIHN1ZmZlcmVkIGJ5IGVpdGhlciBwYXJ0eSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBhcnJhbmdlbWVudC4gQnV0IHdlIGhhdmUgbm90IHJlbWl0dGVkIGFueXRoaW5nIHRvIHlvdSwgbm9yIGhhdmUgd2UgY29uc2VudGVkIHRvCiAgICAgICAgICAgICAgICAgICAgeW91ciB2b3lhZ2UgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI2NiI+UmhvZGVzPC9wbGFjZU5hbWU+LCBub3IgaW4gb3VyCiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50IGlzIGFueXRoaW5nIG1vcmUgYmluZGluZyB0aGFuIHRoZSBhZ3JlZW1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['56.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgd2hhdCBkb2VzIHRoZSBhZ3JlZW1lbnQgc2F5LCBhbmQgdG8gd2hhdCBwb3J0IGRvZXMgaXQKICAgICAgICAgICAgICAgICAgICByZXF1aXJlIHlvdSB0byBzYWlsPyBGcm9tIEF0aGVucyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiBhbmQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjsgYW5kIGluIGRlZmF1bHQgb2YgeW91ciBzbwogICAgICAgICAgICAgICAgICAgIGRvaW5nLCBpdCByZXF1aXJlcyB5b3UgdG8gcGF5IGRvdWJsZSB0aGUgYW1vdW50LiBJZiB5b3UgaGF2ZSBkb25lIHRoaXMsIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgY29tbWl0dGVkIG5vIHdyb25nOyBidXQgaWYgeW91IGhhdmUgbm90IGRvbmUgaXQsIGFuZCBoYXZlIG5vdCBicm91Z2h0IHlvdXIgc2hpcAogICAgICAgICAgICAgICAgICAgIGJhY2sgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpdCBpcyBwcm9wZXIgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBzaG91bGQgc3VmZmVyIHRoZSBwZW5hbHR5IHByb3ZpZGVkIGJ5IHRoZSBhZ3JlZW1lbnQ7IGZvciB0aGlzIHJlcXVpcmVtZW50CiAgICAgICAgICAgICAgICAgICAgd2FzIGltcG9zZWQgdXBvbiB5b3UsIG5vdCBieSBzb21lIG90aGVyIHBlcnNvbiwgYnV0IGJ5IHlvdXJzZWxmLiBTaG93LCB0aGVuLCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5IG9uZSBvciB0aGUgb3RoZXIgb2YgdHdvIHRoaW5nc+KAlHRoYXQgb3VyIGFncmVlbWVudCBpcyBub3QKICAgICAgICAgICAgICAgICAgICB2YWxpZCwgb3IgdGhhdCB5b3UgYXJlIG5vdCByZXF1aXJlZCB0byBkbyBldmVyeXRoaW5nIGluIGFjY29yZGFuY2Ugd2l0aCBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['56.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5JZiBjZXJ0YWluIHBlb3BsZSBoYXZlIHJlbWl0dGVkIGFueXRoaW5nCiAgICAgICAgICAgICAgICAgICAgaW4geW91ciBmYXZvciwgYW5kIGhhdmUgYmVlbiBpbmR1Y2VkIG9uIG9uZSBncm91bmQgb3IgYW5vdGhlciB0byBhY2NlcHQgaW50ZXJlc3QKICAgICAgICAgICAgICAgICAgICBvbmx5IGFzIGZhciBhcyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4sIGRvZXMgaXQgZm9sbG93CiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3UgYXJlIGRvaW5nIG5vIHdyb25nIHRvIHVzLCB5b3VyIGFncmVlbWVudCB3aXRoIHdob20geW91IGhhdmUgYnJva2VuIGluCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHlvdXIgc2hpcCBwdXQgaW50byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4/IEkgZG8KICAgICAgICAgICAgICAgICAgICBub3QgdGhpbmsgc28uIEZvciB0aGlzIGp1cnkgaXMgbm90IG5vdyBkZWNpZGluZyB1cG9uIGNvbmNlc3Npb25zIG1hZGUgdG8geW91IGJ5CiAgICAgICAgICAgICAgICAgICAgb3RoZXJzLCBidXQgdXBvbiBhbiBhZ3JlZW1lbnQgZW50ZXJlZCBpbnRvIGJ5IHlvdSB5b3Vyc2VsZiB3aXRoIHVzLiBGb3IgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICByZW1pc3Npb24gb2YgdGhlIGludGVyZXN0LCBzdXBwb3NpbmcgdGhhdCBpdCBhY3R1YWxseSB0b29rIHBsYWNlLCBhcyB0aGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICBhbGxlZ2UsIHdhcyB0byB0aGUgYWR2YW50YWdlIG9mIHRoZSBjcmVkaXRvcnMsIGlzIHBsYWluIHRvIGV2ZXJ5IG9uZSBvZiB5b3UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['56.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhvc2Ugd2hvIGxlbnQgdGhlaXIgbW9uZXkgdG8gdGhlc2UKICAgICAgICAgICAgICAgICAgICBtZW4gZm9yIHRoZSBvdXR3YXJkIHZveWFnZSBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aGVuIHRoZXkgcmVhY2hlZAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gYW5kIHRoaXMgbWFuIHB1dCBpbnRvIHRoYXQKICAgICAgICAgICAgICAgICAgICBwb3J0LCBzdWZmZXJlZCBubyBsb3NzLCBJIHRha2UgaXQsIGJ5IHJlbWl0dGluZyB0aGUgaW50ZXJlc3QgYW5kIHJlY2VpdmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBhbW91bnQgb2YgdGhlaXIgbG9hbiBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZW4gcHV0dGluZyB0aGUgbW9uZXkgdG8gd29yayBhZ2FpbiBmb3IgYSB2b3lhZ2UgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4uIE5vOyB0aGlzIHdhcyBtb3JlIHRvIHRoZWlyIGFkdmFudGFnZQogICAgICAgICAgICAgICAgICAgIHRoYW4gdG8gY29udGludWUgdGhlIHZveWFnZSB0byB0aGlzIHBvcnQuIDwvdHJhbnNsYXRpb24+"
translation['56.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IKICAgICAgICAgICAgICAgICAgICB2b3lhZ2luZyBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjY2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyNjYiPlJob2RlczwvcGxhY2VOYW1lPiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiBpcyB1bmludGVycnVwdGVkLCBhbmQgdGhleSBjb3VsZCBwdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBtb25leSB0byB3b3JrIHR3byBvciB0aHJlZSB0aW1lcywgd2hlcmVhcyBoZXJlIHRoZXkgd291bGQgaGF2ZSBoYWQgdG8gcGFzcwogICAgICAgICAgICAgICAgICAgIHRoZSB3aW50ZXIgYW5kIHRvIGF3YWl0IHRoZSBzZWFzb24gZm9yIHNhaWxpbmcuIFRoZXNlIGNyZWRpdG9ycyB0aGVyZWZvcmUgaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlYXBlZCBhbiBhZGRpdGlvbmFsIHByb2ZpdCwgYW5kIGhhdmUgbm90IHJlbWl0dGVkIGFueXRoaW5nIHRvIHRoZXNlIG1lbi4gV2l0aAogICAgICAgICAgICAgICAgICAgIHVzLCBob3dldmVyLCBpdCBpcyBub3QgYSBxdWVzdGlvbiBvZiB0aGUgaW50ZXJlc3QgbWVyZWx5LCBidXQgd2UgYXJlIHVuYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHJlY292ZXIgZXZlbiBvdXIgcHJpbmNpcGFsLiA8L3RyYW5zbGF0aW9uPg=="
translation['56.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RG8gbm90LCB0aGVuLCBsaXN0ZW4gdG8gaGltLCB3aGVuIGhlIHNlZWtzIHRvIGhvb2R3aW5rCiAgICAgICAgICAgICAgICAgICAgeW91LCBhbmQgYnJpbmdzIGJlZm9yZSB5b3UgaGlzIHRyYW5zYWN0aW9ucyB3aXRoIG90aGVyIGNyZWRpdG9ycywgYnV0IHJlZmVyIGhpbQogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBhZ3JlZW1lbnQgYW5kIHRvIHRoZSByaWdodHMgZ3Jvd2luZyBvdXQgb2YgaXQuIEl0IHJlbWFpbnMgZm9yIG1lIHRvCiAgICAgICAgICAgICAgICAgICAgaW50ZXJwcmV0IHRoaXMgbWF0dGVyIGZvciB5b3UsIGFuZCB0aGUgZGVmZW5kYW50IGluc2lzdHMgdXBvbiB0aGlzIHZlcnkgdGhpbmcsCiAgICAgICAgICAgICAgICAgICAgc3RhdGluZyB0aGF0IHRoZSBhZ3JlZW1lbnQgcmVxdWlyZXMgaGltIHRvIHJlcGF5IHRoZSBsb2FuIG9ubHkgaWYgdGhlIHNoaXAKICAgICAgICAgICAgICAgICAgICBhcnJpdmVzIHNhZmUuIFdlIGFsc28gbWFpbnRhaW4gdGhhdCB0aGlzIHNob3VsZCBiZSBzby4gPC90cmFuc2xhdGlvbj4="
translation['56.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSSBzaG91bGQgYmUgZ2xhZCB0byBhc2sgeW91IHlvdXJzZWxmLCBEaW9ueXNvZG9ydXMsCiAgICAgICAgICAgICAgICAgICAgd2hldGhlciB5b3UgYXJlIHNwZWFraW5nIG9mIHRoZSBzaGlwIGFzIGhhdmluZyBiZWVuIGxvc3QsIG9yIGFzIGhhdmluZyBhcnJpdmVkCiAgICAgICAgICAgICAgICAgICAgc2FmZS4gRm9yIGlmIHRoZSBzaGlwIGhhcyBiZWVuIHdyZWNrZWQgYW5kIGlzIGxvc3QsIHdoeSBkbyB5b3Uga2VlcCBvbiBkaXNwdXRpbmcKICAgICAgICAgICAgICAgICAgICBhYm91dCB0aGUgaW50ZXJlc3QgYW5kIGRlbWFuZGluZyB0aGF0IHdlIGFjY2VwdCBpbnRlcmVzdCBhcyBmYXIgYXMgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI2NiI+UmhvZGVzPC9wbGFjZU5hbWU+PyBGb3IgaW4gdGhhdCBjYXNlIHdlIGhhdmUgbm90IHRoZSByaWdodAogICAgICAgICAgICAgICAgICAgIHRvIHJlY292ZXIgZWl0aGVyIGludGVyZXN0IG9yIHByaW5jaXBhbC4gQnV0IGlmIHRoZSBzaGlwIGlzIHNhZmUgYW5kIGhhcyBub3QKICAgICAgICAgICAgICAgICAgICBiZWVuIHdyZWNrZWQsIHdoeSBkbyB5b3Ugbm90IHBheSB1cyB0aGUgbW9uZXkgd2hpY2ggeW91IGFncmVlZCB0byBwYXk/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['56.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB3aGF0IHdheSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgY2FuIHlvdSBiZSBtb3N0IGNvbnZpbmNpbmdseQogICAgICAgICAgICAgICAgICAgIGFzc3VyZWQgdGhhdCB0aGUgc2hpcCBoYXMgcmVhY2hlZCBwb3J0IHNhZmU/IEluIHRoZSBmaXJzdCBpbnN0YW5jZSBieSB0aGUgbWVyZQogICAgICAgICAgICAgICAgICAgIGZhY3QgdGhhdCBzaGUgaXMgbm93IGF0IHNlYSwgYW5kIGxlc3MgY2xlYXJseSBieSB0aGUgc3RhdGVtZW50cyBtYWRlIGJ5IHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuIHRoZW1zZWx2ZXMuIEZvciB0aGV5IGFzayB1cyB0byBhY2NlcHQgcGF5bWVudCBvZiB0aGUgcHJpbmNpcGFsIGFuZCBhIGNlcnRhaW4KICAgICAgICAgICAgICAgICAgICBwb3J0aW9uIG9mIHRoZSBpbnRlcmVzdCwgdGh1cyBpbXBseWluZyB0aGF0IHRoZSBzaGlwIGhhcyByZWFjaGVkIHBvcnQgc2FmZSwgYnV0CiAgICAgICAgICAgICAgICAgICAgaGFzIG5vdCBjb21wbGV0ZWQgaGVyIGVudGlyZSB2b3lhZ2UuIDwvdHJhbnNsYXRpb24+"
translation['56.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cKICAgICAgICAgICAgICAgICAgICBjb25zaWRlciwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hldGhlciBpdAogICAgICAgICAgICAgICAgICAgIGlzIHdlIHdobyBhcmUgYWJpZGluZyBieSB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZSBjb250cmFjdCwgb3Igd2hldGhlciBpdCBpcwogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiwgd2hvIGhhdmUgc2FpbGVkLCBub3QgdG8gdGhlIHBvcnQgYWdyZWVkIHVwb24sIGJ1dCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+LCBhbmQgd2hvLCB3aGVuIHRoZSBzaGlwIGhhcyByZWFjaGVkIHBvcnQgc2FmZSBhbmQgaGFzIG5vdAogICAgICAgICAgICAgICAgICAgIGJlZW4gbG9zdCwgY2xhaW0gdG8gYmUgZW50aXRsZWQgdG8gYW4gYWJhdGVtZW50IG9mIHRoZSBpbnRlcmVzdCwgYWx0aG91Z2ggdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgYnJva2VuIHRoZSBhZ3JlZW1lbnQsIGFuZCBoYXZlIHRoZW1zZWx2ZXMgbWFkZSBhIGxhcmdlIHByb2ZpdCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBjYXJyeWluZyBvZiBncmFpbiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4sIGFuZCBieQogICAgICAgICAgICAgICAgICAgIGtlZXBpbmcgYW5kIG1ha2luZyB1c2Ugb2Ygb3VyIG1vbmV5IGZvciB0d28geWVhcnMuIDwvdHJhbnNsYXRpb24+"
translation['56.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IHRoZXkgYXJlIGRvaW5nIGlzIGluZGVlZCBhbiB1bmhlYXJkLW9mIHRoaW5nLiBUaGV5CiAgICAgICAgICAgICAgICAgICAgb2ZmZXIgdG8gcGF5IHVzIHRoZSBwcmluY2lwYWwgb2Ygb3VyIGxvYW4sIHRodXMgaW1wbHlpbmcgdGhhdCB0aGUgc2hpcCBoYXMKICAgICAgICAgICAgICAgICAgICByZWFjaGVkIHBvcnQgc2FmZSwgYnV0IHRoZXkgY2xhaW0gdGhlIHJpZ2h0IHRvIHJvYiB1cyBvZiBvdXIgaW50ZXJlc3Qgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kIHRoYXQgc2hlIGhhcyBiZWVuIHdyZWNrZWQuIFRoZSBhZ3JlZW1lbnQsIGhvd2V2ZXIsIGRvZXMgbm90IHNheSBvbmUgdGhpbmcKICAgICAgICAgICAgICAgICAgICBhYm91dCB0aGUgaW50ZXJlc3QgYW5kIGFub3RoZXIgYWJvdXQgdGhlIHByaW5jaXBhbCBvZiB0aGUgbG9hbiwgYnV0IG91ciByaWdodHMKICAgICAgICAgICAgICAgICAgICBhcmUgdGhlIHNhbWUgZm9yIGJvdGggYW5kIG91ciBtZWFucyBvZiByZWNvdmVyeSB0aGUgc2FtZS4gPC90cmFuc2xhdGlvbj4="
translation['56.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGxlYXNlIHJlYWQgdGhlIGFncmVlbWVudAogICAgICAgICAgICAgICAgICAgICAgICBhZ2Fpbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJBZ3JlZW1lbnQiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFncmVlbWVudDwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiBhbmQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ3JlZW1lbnQ8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Gcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4gYW5kIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Zb3UgaGVhciwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBJdCBzYXlzIOKAnEZyb20KICAgICAgICAgICAgICAgICAgICBBdGhlbnMgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4gYW5kIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LuKAnTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICByZXN0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkFncmVlbWVudCI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdyZWVtZW50PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kIGlmIHRoZSBzaGlwIGFycml2ZXMgc2FmZSBhdCBQZWlyYWV1cyAuIC4gLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdyZWVtZW50PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kIGlmIHRoZSBzaGlwIGFycml2ZXMgc2FmZSBhdCBQZWlyYWV1cyAuIC4gLjwvdHJhbnNsYXRpb24+"
translation['56.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaXQgaXMgYSB2ZXJ5IHNpbXBsZQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGZvciB5b3UgdG8gcmVhY2ggYSBkZWNpc2lvbiBpbiB0aGlzIHN1aXQsIGFuZCB0aGVyZSBpcyBubyBuZWVkIG9mIG1hbnkKICAgICAgICAgICAgICAgICAgICB3b3Jkcy4gVGhhdCB0aGUgc2hpcCBoYXMgcmVhY2hlZCBwb3J0IHNhZmUsIGFuZCBpcyBzYWZlLCBpcyBhZG1pdHRlZCBieSB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiB0aGVtc2VsdmVzOyBmb3Igb3RoZXJ3aXNlIHRoZXkgd291bGQgbm90IGJlIG9mZmVyaW5nIHRvIHBheSB0aGUgcHJpbmNpcGFsIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGxvYW4gYW5kIGEgcG9ydGlvbiBvZiB0aGUgaW50ZXJlc3QuIFNoZSBoYXMgbm90LCBob3dldmVyLCBiZWVuIGJyb3VnaHQgYmFjawogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBQZWlyYWV1cy4gSXQgaXMgZm9yIHRoaXMgcmVhc29uIHRoYXQgd2UsIHRoZSBjcmVkaXRvcnMsIGNsYWltIHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gd3JvbmdlZCwgYW5kIHJlZ2FyZGluZyB0aGlzIHdlIGFyZSBicmluZ2luZyBzdWl0LCB0aGF0LCBuYW1lbHkgc2hlIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBtYWtlIHRoZSByZXR1cm4gdm95YWdlIHRvIHRoZSBwb3J0IGFncmVlZCB1cG9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['56.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5EaW9ueXNvZG9ydXMsIGhvd2V2ZXIsIGNsYWltcyB0aGF0IGhlIGlzIGRvaW5nIG5vIHdyb25nCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBvZiB0aGlzIHZlcnkgZmFjdCwgc2luY2UgaGUgaXMgbm90IGJvdW5kIHRvIHBheSB0aGUgaW50ZXJlc3QgaW4gaXRzCiAgICAgICAgICAgICAgICAgICAgZW50aXJldHkgaW5hc211Y2ggYXMgdGhlIHNoaXAgZGlkIG5vdCBjb21wbGV0ZSBoZXIgdm95YWdlIHRvIFBlaXJhZXVzLiBCdXQgd2hhdAogICAgICAgICAgICAgICAgICAgIGRvZXMgdGhlIGFncmVlbWVudCBzYXk/IEJ5IFpldXMgaXQgaXMgbm90IGF0IGFsbCB3aGF0IHlvdSBzYXksIERpb255c29kb3J1cy4gTm87CiAgICAgICAgICAgICAgICAgICAgaXQgZGVjbGFyZXMgdGhhdCBpZiB5b3UgZG8gbm90IHBheSBib3RoIHRoZSBwcmluY2lwYWwgYW5kIGludGVyZXN0LCBvciBpZiB5b3UKICAgICAgICAgICAgICAgICAgICBmYWlsIHRvIHByZXNlbnQgdGhlIHNlY3VyaXR5LCBwbGFpbiB0byBzZWUgYW5kIHVuaW1wYWlyZWQsIG9yIGlmIGluIGFueSBvdGhlcgogICAgICAgICAgICAgICAgICAgIHJlc3BlY3QgeW91IHZpb2xhdGUgdGhlIGFncmVlbWVudCwgeW91IGFyZSByZXF1aXJlZCB0byBwYXkgZG91YmxlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQsIHBsZWFzZSwgdGhhdCBjbGF1c2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFncmVlbWVudC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJTdGF0ZW1lbnQiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN0YXRlbWVudDwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZCBpZiB0aGV5IHNoYWxsIG5vdCBwcm9kdWNlIHRoZSBzZWN1cml0eSwgcGxhaW4gdG8KICAgICAgICAgICAgICAgICAgICAgICAgc2VlIGFuZCB1bmltcGFpcmVkLCBvciBpZiBpbiBhbnkgcmVzcGVjdCB0aGV5IHNoYWxsIHZpb2xhdGUgdGhlIGFncmVlbWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgdGhleSBzaGFsbCBwYXkgZG91YmxlIHRoZSBhbW91bnQuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdGF0ZW1lbnQ8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbmQgaWYgdGhleSBzaGFsbCBub3QgcHJvZHVjZSB0aGUgc2VjdXJpdHksIHBsYWluIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHNlZSBhbmQgdW5pbXBhaXJlZCwgb3IgaWYgaW4gYW55IHJlc3BlY3QgdGhleSBzaGFsbCB2aW9sYXRlIHRoZSBhZ3JlZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXkgc2hhbGwgcGF5IGRvdWJsZSB0aGUgYW1vdW50LjwvdHJhbnNsYXRpb24+"
translation['56.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGF2ZSB5b3UsIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgYXQgYW55IHBsYWNlIHdoYXRldmVyIHByb2R1Y2VkIHRoZSBzaGlwIHBsYWluIHRvIHNlZSBzaW5jZSB0aGUgdGltZSB5b3UgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICB0aGUgbW9uZXkgZnJvbSB1cz8gQW5kIHlldCB5b3UgeW91cnNlbGYgYWRtaXQgdGhhdCBzaGUgaXMgc2FmZS4gT3IgaGF2ZSB5b3UgZXZlcgogICAgICAgICAgICAgICAgICAgIHNpbmNlIHRoYXQgdGltZSBicm91Z2h0IGhlciBiYWNrIHRvIHRoZSBwb3J0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhvdWdoIHRoZSBhZ3JlZW1lbnQgZXhwcmVzc2x5IHN0aXB1bGF0ZXMgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBzaGFsbCBicmluZyB5b3VyIHNoaXAgYmFjayB0byB0aGUgUGVpcmFldXMsIGFuZCBwcm9kdWNlIGhlciBwbGFpbiB0byBzZWUgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgdGhlIGxlbmRlcnM/IDwvdHJhbnNsYXRpb24+"
translation['56.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIGFuIGltcG9ydGFudCBwb2ludCwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBKdXN0IG9ic2VydmUgdGhlCiAgICAgICAgICAgICAgICAgICAgZXh0cmF2YWdhbmNlIG9mIGhpcyBzdGF0ZW1lbnQuIFRoZSBzaGlwIHdhcyBkaXNhYmxlZCwgc28gaGUgc2F5cywgYW5kIGZvciB0aGlzCiAgICAgICAgICAgICAgICAgICAgcmVhc29uIGhlIGJyb3VnaHQgaGVyIGludG8gdGhlIHBvcnQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI2NiI+UmhvZGVzPC9wbGFjZU5hbWU+LiBXZWxsLCB0aGVuLCBhZnRlciB0aGF0IHNoZSB3YXMgcmVwYWlyZWQgYW5kIGJlY2FtZSBmaXQKICAgICAgICAgICAgICAgICAgICBmb3Igc2VhLiBXaHksIHRoZW4sIG15IGdvb2QgZmVsbG93LCBkaWQgeW91IHNlbmQgaGVyIG9mZiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiBhbmQgdG8gb3RoZXIgcG9ydHMsIGJ1dCBoYXZlIG5ldmVyIHVwIHRvCiAgICAgICAgICAgICAgICAgICAgdGhpcyBkYXkgc2VudCBoZXIgYmFjayB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRvCiAgICAgICAgICAgICAgICAgICAgdXMgeW91ciBjcmVkaXRvcnMsIHRvIHdob20gdGhlIGFncmVlbWVudCByZXF1aXJlcyB5b3UgdG8gcHJvZHVjZSB0aGUgc2hpcCwgcGxhaW4KICAgICAgICAgICAgICAgICAgICB0byBzZWUgYW5kIHVuaW1wYWlyZWQsIGFuZCB0aGF0IHRvbyBhbHRob3VnaCB3ZSBtYWRlIGRlbWFuZCB1cG9uIHlvdSBhZ2FpbiBhbmQKICAgICAgICAgICAgICAgICAgICBhZ2FpbiBhbmQgY2hhbGxlbmdlZCB5b3UgdG8gZG8gc28/IDwvdHJhbnNsYXRpb24+"
translation['56.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5ObzsgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIHNvIGJvbGQgb3IgcmF0aGVyIHNvIGltcHVkZW50LCB0aGF0LCB3aGlsZSB1bmRlciB0aGUgYWdyZWVtZW50IHlvdSBvd2UgdXMgZG91YmxlCiAgICAgICAgICAgICAgICAgICAgdGhlIGFtb3VudCBvZiBvdXIgbG9hbiwgeW91IGRvIG5vdCBzZWUgZml0IHRvIHBheSB1cyBldmVuIHRoZSBhY2NydWVkIGludGVyZXN0LAogICAgICAgICAgICAgICAgICAgIGJ1dCBiaWQgdXMgYWNjZXB0IGludGVyZXN0IGFzIGZhciBhcyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4sIGFzIGlmIHlvdXIgY29tbWFuZCBvdWdodCB0byBwcm92ZSBvZiBtb3JlIGZvcmNlIHRoYW4KICAgICAgICAgICAgICAgICAgICB0aGUgYWdyZWVtZW50OyBhbmQgeW91IGhhdmUgdGhlIGluc29sZW5jZSB0byBkZWNsYXJlIHRoYXQgdGhlIHZlc3NlbCBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgYXJyaXZlIHNhZmUgYXQgdGhlIFBlaXJhZXVzOyBmb3Igd2hpY2ggeW91IG1pZ2h0IHdpdGgganVzdGljZSBiZSBjb25kZW1uZWQgdG8KICAgICAgICAgICAgICAgICAgICBkZWF0aCBieSB0aGUganVyb3JzLiA8L3RyYW5zbGF0aW9uPg=="
translation['56.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hvIG90aGVyIHRoYW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGZlbGxvdyBpcyB0byBibGFtZSwgbWVuIG9mIHRoZSBqdXJ5LCBpZiB0aGUgc2hpcCBkaWQgbm90IGFycml2ZSBzYWZlIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIFBlaXJhZXVzPyBBcmUgd2UgdG8gYmxhbWUsIHdobyBsZW50IG91ciBtb25leSBleHByZXNzbHkgZm9yIGEgdm95YWdlIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+IGFuZCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIG9yIGlzIGl0IHRoZSBmYXVsdCBvZiB0aGlzIGZlbGxvdwogICAgICAgICAgICAgICAgICAgIGFuZCBoaXMgcGFydG5lciwgd2hvIGFmdGVyIGJvcnJvd2luZyBtb25leSBvbiB0aGVzZSB0ZXJtcywgdGhhdCB0aGUgdmVzc2VsCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHJldHVybiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoZW4gdG9vawogICAgICAgICAgICAgICAgICAgIGhlciB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4/IEFuZCB0aGF0IHRoZXkgZGlkIHRoaXMKICAgICAgICAgICAgICAgICAgICBvZiB0aGVpciBvd24gd2lsbCBhbmQgbm90IG9mIG5lY2Vzc2l0eSBpcyBjbGVhciBvbiBtYW55IGdyb3VuZHMuIDwvdHJhbnNsYXRpb24+"
translation['56.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgd2hhdCBvY2N1cnJlZCB0b29rIHBsYWNlIGFnYWluc3QgdGhlaXIgd2lsbCwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHNoaXAgd2FzIHJlYWxseSBkaXNhYmxlZCwgYWZ0ZXJ3YXJkcywgd2hlbiB0aGV5IGhhZCByZXBhaXJlZCB0aGUgc2hpcCwKICAgICAgICAgICAgICAgICAgICB0aGV5IHdvdWxkIHN1cmVseSBub3QgaGF2ZSBsZXQgaGVyIGZvciBhIHZveWFnZSB0byBvdGhlciBwb3J0cywgYnV0IHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBkZXNwYXRjaGVkIGhlciB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIGFtZW5kcyBmb3IgdGhlIGludm9sdW50YXJ5IGFjY2lkZW50LiBBcyBpdCBpcywgaG93ZXZlciwgdGhleSBoYXZlIG5vdCBvbmx5IG1hZGUKICAgICAgICAgICAgICAgICAgICBubyBhbWVuZHMsIGJ1dCB0byB0aGVpciBvcmlnaW5hbCB3cm9uZ2RvaW5ncyB0aGV5IGhhdmUgYWRkZWQgb3RoZXJzIGdyZWF0ZXIgZmFyLAogICAgICAgICAgICAgICAgICAgIGFuZCBoYXZlIGNvbWUgaGVyZSB0byBjb250ZXN0IHRoZSBzdWl0IGFzIGl0IHdlcmUgaW4gYSBzcGlyaXQgb2YgbW9ja2VyeSwKICAgICAgICAgICAgICAgICAgICBhc3N1bWluZyB0aGF0IGl0IHdpbGwgcmVzdCB3aXRoIHRoZW0sIGlmIHlvdSBnaXZlIGp1ZGdlbWVudCBhZ2FpbnN0IHRoZW0sIG1lcmVseQogICAgICAgICAgICAgICAgICAgIHRvIHBheSB0aGUgcHJpbmNpcGFsIGFuZCBpbnRlcmVzdC4gPC90cmFuc2xhdGlvbj4="
translation['56.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5EbyBub3QgeW91LAogICAgICAgICAgICAgICAgICAgIHRoZW4sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHN1ZmZlciBtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGlzIHN0YW1wIHRvIGhhdmUgdGhlaXIgb3duIHdheSwgbm9yIGFsbG93IHRoZW0gdG8gcmlkZSBvbiB0d28gYW5jaG9ycywgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBob3BlIHRoYXQsIGlmIHRoZXkgYXJlIHN1Y2Nlc3NmdWwsIHRoZXkgd2lsbCByZXRhaW4gd2hhdCBiZWxvbmdzIHRvIG90aGVycywKICAgICAgICAgICAgICAgICAgICBhbmQgaWYgdGhleSBhcmUgbm90IGFibGUgdG8gaG9vZHdpbmsgeW91LCB0aGV5IHdpbGwgbWVyZWx5IHBheSB0aGUgYmFyZSBhbW91bnQKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGV5IG93ZTsgYnV0IGluZmxpY3QgdXBvbiB0aGVtIHRoZSBwZW5hbHRpZXMgcHJvdmlkZWQgaW4gdGhlIGFncmVlbWVudC4KICAgICAgICAgICAgICAgICAgICBGb3IgaXQgd291bGQgYmUgYW4gb3V0cmFnZW91cyB0aGluZywgd2hlbiB0aGVzZSBtZW4gaGF2ZSB0aGVtc2VsdmVzIGluIHdyaXRpbmcKICAgICAgICAgICAgICAgICAgICBpbXBvc2VkIHVwb24gdGhlbXNlbHZlcyBhIHBlbmFsdHkgb2YgZG91YmxlIHRoZSBhbW91bnQsIGlmIHRoZXkgY29tbWl0IGFueQogICAgICAgICAgICAgICAgICAgIGJyZWFjaCBvZiB0aGUgYWdyZWVtZW50LCB0aGF0IHlvdSBzaG91bGQgYmUgbW9yZSBsZW5pZW50IHRvd2FyZCB0aGVtOyBlc3BlY2lhbGx5CiAgICAgICAgICAgICAgICAgICAgd2hlbiB5b3UgaGF2ZSB5b3Vyc2VsdmVzIGJlZW4gd3JvbmdlZCBubyBsZXNzIHRoYW4gd2UuIDwvdHJhbnNsYXRpb24+"
translation['56.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T3VyIGNsYWltcyBpbiB0aGUgbWF0dGVyLAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgYXJlIGZldyBhbmQgZWFzeSB0byBiZSByZW1lbWJlcmVkLiBXZSBsZW50IHRoaXMgZmVsbG93IERpb255c29kb3J1cwogICAgICAgICAgICAgICAgICAgIGFuZCBoaXMgcGFydG5lciB0aHJlZSB0aG91c2FuZCBkcmFjaG1hZSBmb3IgYSB2b3lhZ2UgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4gYW5kIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT47IHdlIGhhdmUgbm90IHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgZWl0aGVyIHByaW5jaXBhbCBvciBpbnRlcmVzdCwgYnV0IHRoZXkgaGF2ZSBrZXB0IG91ciBtb25leSBhbmQgaGFkIHRoZSB1c2Ugb2YgaXQKICAgICAgICAgICAgICAgICAgICBmb3IgdHdvIHllYXJzOyB0aGV5IGhhdmUgbm90IGV2ZW4gdG8gdGhpcyBkYXkgYnJvdWdodCB0aGUgc2hpcCBiYWNrIHRvIHlvdXIKICAgICAgICAgICAgICAgICAgICBwb3J0LCBub3IgcHJvZHVjZWQgaXQgcGxhaW4gdG8gc2VlLiBUaGUgYWdyZWVtZW50LCBob3dldmVyLCBkZWNsYXJlcywgdGhhdCBpZgogICAgICAgICAgICAgICAgICAgIHRoZXkgZmFpbCB0byBkZWxpdmVyIHVwIHRoZSBzaGlwIHBsYWluIHRvIHNlZSB0aGV5IHNoYWxsIHBheSBkb3VibGUgdGhlIGFtb3VudCwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCB0aGUgbW9uZXkgbWF5IGJlIHJlY292ZXJlZCBmcm9tIGVpdGhlciBvbmUgb3IgYm90aCBvZiB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['56.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBhcmUgdGhlIGp1c3QgY2xhaW1zIHdpdGggd2hpY2ggd2UgaGF2ZSBjb21lCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHlvdSBkZW1hbmRpbmcgdG8gcmVjb3ZlciBvdXIgbW9uZXkgdGhyb3VnaCB5b3VyIGhlbHAsIHNpbmNlIHdlIGNhbm5vdCBnZXQKICAgICAgICAgICAgICAgICAgICBpdCBmcm9tIHRoZXNlIG1lbiB0aGVtc2VsdmVzLiBTdWNoIGlzIHRoZSBzdGF0ZW1lbnQgb2Ygb3VyIGNhc2UuIFRoZXNlIG1lbiwKICAgICAgICAgICAgICAgICAgICBob3dldmVyLCB3aGlsZSB0aGV5IGFkbWl0IHRoYXQgdGhleSBib3Jyb3dlZCB0aGUgbW9uZXkgYW5kIGhhdmUgbm90IHBhaWQgaXQKICAgICAgICAgICAgICAgICAgICBiYWNrLCBjb250ZW5kIHRoYXQgdGhleSBhcmUgbm90IGJvdW5kIHRvIHBheSB0aGUgaW50ZXJlc3Qgc3RpcHVsYXRlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBhZ3JlZW1lbnQsIGJ1dCB0aGUgaW50ZXJlc3QgYXMgZmFyIGFzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjY2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyNjYiPlJob2RlczwvcGxhY2VOYW1lPiBvbmx5LCB3aGljaCB0aGV5IG1hZGUgbm8gcGFydCBvZiB0aGVpciBjb250cmFjdCwgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2UgaGF2ZSBub3QgY29uc2VudGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['56.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5QZXJoYXBzLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpZiB3ZSB3ZXJlIHRyeWluZyB0aGUKICAgICAgICAgICAgICAgICAgICBjYXNlIGluIGEgUmhvZGlhbiBjb3VydCwgdGhlc2UgbWVuIG1pZ2h0IGdldCB0aGUgYmV0dGVyIG9mIHVzLCBzZWVpbmcgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSB0YWtlbiBncmFpbiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gYW5kIHNhaWxlZAogICAgICAgICAgICAgICAgICAgIGluIHRoZWlyIHNoaXAgaW50byB0aGF0IHBvcnQ7IGFzIGl0IGlzLCBob3dldmVyLCBzaW5jZSB3ZSBoYXZlIGNvbWUgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zIGFuZCBvdXIgY29udHJhY3QgY2FsbGVkIGZvciBhIHZveWFnZSB0byB5b3VyIHBvcnQsIHdlIGhvbGQgaXQgcmlnaHQKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBzaG91bGQgZ2l2ZSBubyBhZHZhbnRhZ2UgdG8gbWVuIHdobyBoYXZlIHdyb25nZWQgeW91IGFzIHdlbGwgYXMKICAgICAgICAgICAgICAgICAgICBvdXJzZWx2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['56.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QmVzaWRlcyB0aGlzLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB5b3UKICAgICAgICAgICAgICAgICAgICBtdXN0IG5vdCBmb3JnZXQgdGhhdCwgd2hpbGUgeW91IGFyZSB0b2RheSBkZWNpZGluZyBvbmUgY2FzZSBhbG9uZSB5b3UgYXJlIGZpeGluZwogICAgICAgICAgICAgICAgICAgIGEgbGF3IGZvciB0aGUgd2hvbGUgcG9ydCwgYW5kIHRoYXQgbWFueSBvZiB0aG9zZSBlbmdhZ2VkIGluIG92ZXJzZWFzIHRyYWRlIGFyZQogICAgICAgICAgICAgICAgICAgIHN0YW5kaW5nIGhlcmUgYW5kIHdhdGNoaW5nIHlvdSB0byBzZWUgaG93IHlvdSBkZWNpZGUgdGhpcyBxdWVzdGlvbi4gRm9yIGlmIHlvdQogICAgICAgICAgICAgICAgICAgIGhvbGQgdGhhdCBjb250cmFjdHMgYW5kIGFncmVlbWVudHMgbWFkZSBiZXR3ZWVuIG1hbiBhbmQgbWFuIGFyZSB0byBiZSBiaW5kaW5nLAogICAgICAgICAgICAgICAgICAgIGFuZCBzaG93IG5vIGxlbmllbmN5IHRvd2FyZHMgdGhvc2Ugd2hvIHRyYW5zZ3Jlc3MgdGhlbSwgbGVuZGVycyB3aWxsIGJlIG1vcmUKICAgICAgICAgICAgICAgICAgICByZWFkeSB0byByaXNrIHRoZWlyIG1vbmV5LCBhbmQgdGhlIGJ1c2luZXNzIG9mIHlvdXIgcG9ydCB3aWxsIGJlIGluY3JlYXNlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['56.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgc2hpcG93bmVycywgYWZ0ZXIgZW5nYWdpbmcgaW4KICAgICAgICAgICAgICAgICAgICB3cml0dGVuIGNvbnRyYWN0cyB0byBzYWlsIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBhcmUgdG8gYmUgcGVybWl0dGVkIHRvIHB1dCB0aGVpciBzaGlwcyBpbnRvIG90aGVyIHBvcnRzLCBnaXZpbmcgb3V0IHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBkaXNhYmxlZCwgb3IgYWR2YW5jaW5nIG90aGVyIHByZXRleHRzIHN1Y2ggYXMgdGhlc2Ugb2Ygd2hpY2gKICAgICAgICAgICAgICAgICAgICBEaW9ueXNvZG9ydXMgaGFzIGF2YWlsZWQgaGltc2VsZiwgYW5kIHRvIHJlZHVjZSB0aGUgaW50ZXJlc3QgaW4gcHJvcG9ydGlvbiB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBsZW5ndGggb2YgdGhlIHZveWFnZSB3aGljaCB0aGV5IHNheSB0aGV5IGhhdmUgbWFkZSBpbnN0ZWFkIG9mIHBheWluZyBpdAogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byB0aGUgYWdyZWVtZW50LCB0aGVyZSB3aWxsIGJlIG5vdGhpbmcgdG8gcHJldmVudCB0aGUgdm9pZGluZyBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBjb250cmFjdHMuIDwvdHJhbnNsYXRpb24+"
translation['56.50'] = ""
translation['57.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5TaW5jZSBFdWJ1bGlkZXMKICAgICAgICAgICAgICAgICAgICBoYXMgYnJvdWdodCBtYW55IGZhbHNlIGNoYXJnZXMgYWdhaW5zdCBtZSwgYW5kIGhhcyB1dHRlcmVkIHNsYW5kZXJzIHdoaWNoIGFyZQogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgYmVjb21pbmcgbm9yIGp1c3QsIEkgc2hhbGwgdHJ5LCBtZW4gb2YgdGhlIGp1cnksIHRvIHByb3ZlIGJ5IGEgdHJ1ZSBhbmQKICAgICAgICAgICAgICAgICAgICBmYWlyIHN0YXRlbWVudCB0aGF0IEkgYW0gZW50aXRsZWQgdG8gY2l0aXplbnNoaXAsIGFuZCB0aGF0IEkgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgdW53b3J0aGlseSB0cmVhdGVkIGJ5IHRoaXMgZmVsbG93LiBJIGJlZyB5b3UgYWxsLCBtZW4gb2YgdGhlIGp1cnksIGFuZCBpbXBsb3JlCiAgICAgICAgICAgICAgICAgICAgYW5kIGJlc2VlY2ggeW91LCB0aGF0IGluIHZpZXcgb2YgdGhlIGdyZWF0IGltcG9ydGFuY2Ugb2YgdGhlIHByZXNlbnQgdHJpYWwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIHNoYW1lIGFuZCBydWluIHdoaWNoIGNvbnZpY3Rpb24gZW50YWlscywgeW91IHdpbGwgaGVhciBtZSwgYXMgeW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICBteSBvcHBvbmVudCwgaW4gc2lsZW5jZTsgaW5kZWVkIHRoYXQgeW91IHdpbGwgbGlzdGVuIHRvIG1lIHdpdGggZ3JlYXRlcgogICAgICAgICAgICAgICAgICAgIGdvb2R3aWxsLCBpZiBwb3NzaWJsZSwgdGhhbiB5b3UgaGF2ZSBsaXN0ZW5lZCB0byBoaW0g77yIZm9yIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgcmVhc29uYWJsZSB0byBzdXBwb3NlIHRoYXQgeW91IGFyZSBtb3JlIGZhdm9yYWJseSBkaXNwb3NlZCB0byB0aG9zZSB3aG8gc3RhbmQgaW4KICAgICAgICAgICAgICAgICAgICBwZXJpbO+8iSwgYnV0LCBpZiB0aGlzIGNhbm5vdCBiZSwgYXQgbGVhc3Qgd2l0aCBlcXVhbCBnb29kd2lsbC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgaXQgc28KICAgICAgICAgICAgICAgICAgICBoYXBwZW5zLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQsIGFsdGhvdWdoIEkgYW0gb2YgZ29vZCBjaGVlciBzbyBmYXIgYXMgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIGNvbmNlcm5lZCBhbmQgbXkgcmlnaHQgdG8gY2l0aXplbnNoaXAgYW5kIGhhdmUgZ29vZCBob3BlcyBvZiBjb21pbmcgdGhyb3VnaCB0aGlzCiAgICAgICAgICAgICAgICAgICAgdHJpYWwgd2VsbCwgeWV0IHRoZSBvY2Nhc2lvbiBhbGFybXMgbWUgYW5kIHRoZSB0ZW1wZXIgc2hvd24gYnkgdGhlIHN0YXRlIHdoZW4gaXQKICAgICAgICAgICAgICAgICAgICBoYXMgdG8gZGVhbCB3aXRoIGNhc2VzIG9mIGRpc2ZyYW5jaGlzZW1lbnQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SXQKICAgICAgICAgICAgICAgICAgICAgICAgd291bGQgYXBwZWFyIHRoYXQgYXQgdGhlIHRpbWUgd2hlbiB0aGlzIHNwZWVjaCB3YXMgZGVsaXZlcmVkIHRoZXJlIHdhcyBtdWNoCiAgICAgICAgICAgICAgICAgICAgICAgIGFnaXRhdGlvbiBpbiBmYXZvciBvZiBhIHN0cmljdCBwdXJnZSBvZiB0aGUgbGlzdHMsIGFuZCB0aGF0IHRoZSBwZW9wbGUgaGFkCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3duIG11Y2ggcGFzc2lvbiBpbiB0aGUgcHJvY2VkdXJlLjwvbm90ZT47IGZvciB3aGlsZSBtYW55IGhhdmUgd2l0aAogICAgICAgICAgICAgICAgICAgIGp1c3RpY2UgYmVlbiBleHBlbGxlZCBmcm9tIGFsbCB0aGUgZGVtZXMsIHdlIHdobyBoYXZlIGJlZW4gdGhlIHZpY3RpbXMgb2YKICAgICAgICAgICAgICAgICAgICBwb2xpdGljYWwgcml2YWxyeSBhcmUgaW52b2x2ZWQgaW4gdGhlIHByZWp1ZGljZSBmZWx0IHRvd2FyZCB0aGVtIGFuZCBoYXZlIHRvCiAgICAgICAgICAgICAgICAgICAgY29tYmF0IHRoZSBjaGFyZ2UgYnJvdWdodCBhZ2FpbnN0IHRoZW0sIGFuZCBub3QgbWVyZWx5IGRlZmVuZCBlYWNoIGhpcyBvd24gY2FzZTsKICAgICAgICAgICAgICAgICAgICBzbyB0aGF0IG91ciBhbGFybSBpcyBuZWNlc3NhcmlseSBncmVhdC4gPC90cmFuc2xhdGlvbj4="
translation['57.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgZGVzcGl0ZSB0aGVzZSBkaXNhZHZhbnRhZ2VzLCBJIHNoYWxsIGF0IG9uY2UgdGVsbCB5b3Ugd2hhdCBJCiAgICAgICAgICAgICAgICAgICAgaG9sZCB0byBiZSByaWdodCBhbmQganVzdCBhYm91dCB0aGVzZSB2ZXJ5IG1hdHRlcnMuIEluIG15IG9waW5pb24gaXQgaXMgeW91cgogICAgICAgICAgICAgICAgICAgIGR1dHkgdG8gdHJlYXQgd2l0aCBzZXZlcml0eSB0aG9zZSB3aG8gYXJlIHByb3ZlZCB0byBiZSBhbGllbnMsIHdobyB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGVpdGhlciB3b24geW91ciBjb25zZW50IG9yIGFza2VkIGZvciBpdCwgaGF2ZSBieSBzdGVhbHRoIGFuZCB2aW9sZW5jZQogICAgICAgICAgICAgICAgICAgIGNvbWUgdG8gcGFydGljaXBhdGUgaW4geW91ciByZWxpZ2lvdXMgcml0ZXMgYW5kIHlvdXIgY29tbW9uIHByaXZpbGVnZXMsIGJ1dCB0bwogICAgICAgICAgICAgICAgICAgIGJyaW5nIGhlbHAgYW5kIGRlbGl2ZXJhbmNlIHRvIHRob3NlIHdobyBoYXZlIG1ldCB3aXRoIG1pc2ZvcnR1bmUgYW5kIGNhbiBwcm92ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBhcmUgY2l0aXplbnM7IGZvciB5b3Ugc2hvdWxkIGNvbnNpZGVyIGhvdyBwaXRpZnVsIGFib3ZlIGFsbCBvdGhlcnMKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSB0aGUgcGxpZ2h0IG9mIHVzIHdob3NlIHJpZ2h0cyBoYXZlIGJlZW4gZGVuaWVkLCBpZiwgd2hlbiB3ZSBtaWdodAogICAgICAgICAgICAgICAgICAgIHByb3Blcmx5IHNpdCB3aXRoIHlvdSBhcyB0aG9zZSBleGFjdGluZyB0aGUgcGVuYWx0eSwgd2Ugc2hvdWxkIGJlIG51bWJlcmVkIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gcGF5IGl0LCBhbmQgc2hvdWxkIHVuanVzdGx5IGJlIGNvbmRlbW5lZCBhbG9uZyB3aXRoIHRoZW0gYmVjYXVzZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBwYXNzaW9uIHdoaWNoIHRoZSBzdWJqZWN0IGFyb3VzZXMuIDwvdHJhbnNsYXRpb24+"
translation['57.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHNob3VsZCBoYXZlIHRob3VnaHQsIG1lbiBvZiB0aGUganVyeSwKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IHdhcyBmaXR0aW5nIGZvciBFdWJ1bGlkZXMsIGFuZCBmb3IgYWxsIHRob3NlIHdobyBhcmUgbm93IG1ha2luZwogICAgICAgICAgICAgICAgICAgIGFjY3VzYXRpb25zIGluIGNhc2VzIG9mIGRpc2ZyYW5jaGlzZW1lbnQsIHRvIHN0YXRlIG9ubHkgdGhpbmdzIG9mIHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICBoYXZlIGFjY3VyYXRlIGtub3dsZWRnZSBhbmQgdG8gYnJpbmcgZm9yd2FyZCBubyBoZWFyc2F5IGV2aWRlbmNlIGluIGEgdHJpYWwgb2YKICAgICAgICAgICAgICAgICAgICB0aGlzIHNvcnQuIFN1Y2ggYSBwcm9jZWR1cmUgaGFzIGZyb20gdGltZSBpbW1lbW9yaWFsIGJlZW4gcmVjb2duaXplZCBhcyBzbwogICAgICAgICAgICAgICAgICAgIGNsZWFybHkgdW5qdXN0IHRoYXQgdGhlIGxhd3MgZG8gbm90IGFkbWl0IHRoZSBwcm9kdWN0aW9uIG9mIGhlYXJzYXkgdGVzdGltb255CiAgICAgICAgICAgICAgICAgICAgZXZlbiBpbiB0aGUgY2FzZSBvZiB0aGUgbW9zdCB0cmlmbGluZyBjaGFyZ2VzOyBhbmQgd2l0aCBnb29kIHJlYXNvbjsgZm9yIHdoZW4KICAgICAgICAgICAgICAgICAgICBwZXJzb25zIHdobyBjbGFpbSB0byBoYXZlIHN1cmUga25vd2xlZGdlIGhhdmUgZXJlIG5vdyBiZWVuIGNvbnZpY3RlZCBvZgogICAgICAgICAgICAgICAgICAgIGZhbHNlaG9vZCwgaG93IGNhbiBpdCBiZSByaWdodCB0byBnaXZlIGNyZWRlbmNlIGluIG1hdHRlcnMgcmVnYXJkaW5nIHdoaWNoIGV2ZW4KICAgICAgICAgICAgICAgICAgICB0aGUgc3BlYWtlciBoaW1zZWxmIGhhcyBubyBrbm93bGVkZ2U/IDwvdHJhbnNsYXRpb24+"
translation['57.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuCiAgICAgICAgICAgICAgICAgICAgaXQgaXMgbm90IHBlcm1pdHRlZCBhIG1hbiwgZXZlbiB3aGVuIGhlIG1ha2VzIGhpbXNlbGYgcmVzcG9uc2libGUsIHRvIGhhcm0KICAgICAgICAgICAgICAgICAgICBhbm90aGVyIGJ5IGV2aWRlbmNlIHdoaWNoIGhlIGRlY2xhcmVzIGhlIGhhcyBoZWFyZCwgaG93IGNhbiBpdCBiZSByaWdodCBmb3IgeW91CiAgICAgICAgICAgICAgICAgICAgdG8gZ2l2ZSBjcmVkZW5jZSB0byBvbmUgd2hvIHNwZWFrcyB3aXRob3V0IHJlc3BvbnNpYmlsaXR5PyBTaW5jZSx0aGVuLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgZmVsbG93LCB3aG8ga25vd3MgdGhlIGxhd3MsIGFuZCBrbm93cyB0aGVtIGFsbCB0b28gd2VsbCwgaGFzIG1hZGUgaGlzIGNoYXJnZXMKICAgICAgICAgICAgICAgICAgICB3aXRoIGluanVzdGljZSBhbmQgd2l0aCBhIHZpZXcgdG8gc2VsZmlzaCBhZHZhbnRhZ2UsIEkgbXVzdCBmaXJzdCB0ZWxsIHlvdSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBvdXRyYWdlb3VzIHRyZWF0bWVudCB3aGljaCBJIHJlY2VpdmVkIGFtb25nIG15IGZlbGxvdy1kZW1lc21lbi4gPC90cmFuc2xhdGlvbj4="
translation['57.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkkgYmVnIG9mIHlvdSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgbm90IHVudGlsIEkgaGF2ZSBiZWVuIGhlYXJkLCB0byB0YWtlIG15IHJlamVjdGlvbiBieQogICAgICAgICAgICAgICAgICAgIHRoZSBkZW1lc21lbiBhcyBhIHByb29mIHRoYXQgSSBhbSBub3QgZW50aXRsZWQgdG8gY2l0aXplbnNoaXAsIGZvciBpZiB5b3UKICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IHRoYXQgdGhlIGRlbWVzbWVuIHdvdWxkIGJlIGFibGUgdG8gZGVjaWRlIGFsbCBjYXNlcyB3aXRoIHBlcmZlY3QKICAgICAgICAgICAgICAgICAgICBqdXN0aWNlLCB5b3Ugd291bGQgbm90IGhhdmUgYWxsb3dlZCB0aGUgYXBwZWFsIHRvIHlvdXJzZWx2ZXMuIEFzIGl0IGlzLCBob3dldmVyLAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgeW91IHRob3VnaHQgdGhhdCBzb21ldGhpbmcgb2YgdGhpcyBzb3J0IG1pZ2h0IG9jY3VyIHRocm91Z2ggcml2YWxyeSBhbmQKICAgICAgICAgICAgICAgICAgICBtYWxpY2UgYW5kIGVubWl0eSBvciB0aHJvdWdoIHNvbWUgb3RoZXIgcHJldGV4dHMsIHlvdSBtYWRlIHlvdXIgY291cnQgYSBwbGFjZSBvZgogICAgICAgICAgICAgICAgICAgIHJlZnVnZSBmb3IgdGhvc2Ugd2hvIGhhdmUgYmVlbiB3cm9uZ2VkLCBhbmQgdGhyb3VnaCB0aGlzIHJpZ2h0IGFjdGlvbiBvbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgcGFydCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IGhhdmUgc2F2ZWQKICAgICAgICAgICAgICAgICAgICBhbGwgdGhvc2Ugd2hvIGhhdmUgc3VmZmVyZWQgd3JvbmcuIDwvdHJhbnNsYXRpb24+"
translation['57.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZpcnN0LCB0aGVuLAogICAgICAgICAgICAgICAgICAgIEkgd2lsbCBleHBsYWluIHRvIHlvdSBob3cgdGhlIHB1cmdpbmcgb2YgdGhlIGxpc3QgY2FtZSB0byBiZSBtYWRlIGF0IHRoZSBtZWV0aW5nCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGRlbWVzbWVuOyBmb3IgSSB0aGluayBpdCBpcyByZWxldmFudCB0byB0aGUgY2FzZSBiZWZvcmUgeW91IGlmIG9uZSBzaG93cwogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgd3JvbmdzIHRoYXQgb25lIGhhcyBzdWZmZXJlZCBjb250cmFyeSB0byB5b3VyIGRlY3JlZSwgd2hlbiBvdmVyd2hlbG1lZAogICAgICAgICAgICAgICAgICAgIGJ5IHBvbGl0aWNhbCByaXZhbHJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['57.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIG1hbiBFdWJ1bGlkZXMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFzIG1hbnkgb2YgeW91IGtub3csIGluZGljdGVkIHRoZSBzaXN0ZXIgb2YKICAgICAgICAgICAgICAgICAgICBMYWNlZGFlbW9uaXVzIGZvciBpbXBpZXR5LCBidXQgZGlkIG5vdCByZWNlaXZlIGEgZmlmdGggcGFydCBvZiB0aGUgdm90ZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YTwvZW1waD4gb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy42NyIgdmFsaWQ9InllcyI+RGVtLiAyNy42NzwvYmlibD48L25vdGU+IEl0IGlzIGJlY2F1c2UgaW4gdGhhdCB0cmlhbCBJIGdhdmUgdGVzdGltb255CiAgICAgICAgICAgICAgICAgICAgdGhhdCB3YXMgdHJ1ZSBidXQgdW5mYXZvcmFibGUgdG8gaGltIHRoYXQgaGUgaGF0ZXMgbWUgYW5kIG1ha2VzIG1lIHRoZSBvYmplY3Qgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgYXR0YWNrcy4gQmVpbmcgYSBtZW1iZXIgb2YgdGhlIHNlbmF0ZSwgbWVuIG9mIHRoZSBqdXJ5LCB3aXRoIHBvd2VyIHRvCiAgICAgICAgICAgICAgICAgICAgYWRtaW5pc3RlciB0aGUgb2F0aCBhbmQgYmVpbmcgY3VzdG9kaWFuIG9mIHRoZSBkb2N1bWVudHMgb24gdGhlIGJhc2lzIG9mIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgY29udmVuZWQgdGhlIGRlbWVzbWVuLCB3aGF0IGRvZXMgaGUgZG8/IDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YTwvZW1waD4gb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy42NyIgdmFsaWQ9InllcyI+RGVtLiAyNy42NzwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['57.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkluCiAgICAgICAgICAgICAgICAgICAgdGhlIGZpcnN0IHBsYWNlLCBhZnRlciB0aGUgZGVtZXNtZW4gaGFkIGFzc2VtYmxlZCwgaGUgd2FzdGVkIHRoZSB3aG9sZSBkYXkgaW4KICAgICAgICAgICAgICAgICAgICBtYWtpbmcgc3BlZWNoZXMgYW5kIGluIGRyYXdpbmcgdXAgcmVzb2x1dGlvbnMuIFRoaXMgd2FzIG5vdCBkb25lIGJ5IGFjY2lkZW50LAogICAgICAgICAgICAgICAgICAgIGJ1dCB3YXMgYSBwYXJ0IG9mIGhpcyBwbG90IGFnYWluc3QgbWUsIGluIG9yZGVyIHRoYXQgdGhlIHZvdGUgcmVnYXJkaW5nIG1lIG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgdGFrZSBwbGFjZSBhcyBsYXRlIGluIHRoZSBkYXkgYXMgcG9zc2libGU7IGFuZCBoZSBhY2NvbXBsaXNoZWQgdGhpcyBlbmQuIFRob3NlCiAgICAgICAgICAgICAgICAgICAgb2YgdXMgbWVtYmVycyBvZiB0aGUgZGVtZSB3aG8gdG9vayB0aGUgb2F0aCBudW1iZXJlZCBzZXZlbnR5LXRocmVlLCBhbmQgd2UgYmVnYW4KICAgICAgICAgICAgICAgICAgICB2b3RpbmcgbGF0ZSBpbiB0aGUgZXZlbmluZywgd2l0aCB0aGUgcmVzdWx0IHRoYXQsIHdoZW4gbXkgbmFtZSB3YXMgY2FsbGVkLCBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBhbHJlYWR5IGRhcms7IDwvdHJhbnNsYXRpb24+"
translation['57.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgbXkgbmFtZSB3YXMgYWJvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2l4dGlldGgsIGFuZCBJIHdhcyB0aGUgbGFzdCBvZiBhbGwgdGhvc2UgY2FsbGVkIG9uIHRoYXQgZGF5LCB3aGVuIHRoZSBvbGRlcgogICAgICAgICAgICAgICAgICAgIG1lbWJlcnMgb2YgdGhlIGRlbWUgaGFkIGdvbmUgYmFjayB0byB0aGVpciBmYXJtcy4gRm9yIHNpbmNlIG91ciBkZW1lIGlzIGRpc3RhbnQKICAgICAgICAgICAgICAgICAgICB0aGlydHktZml2ZSBzdGFkZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWJvdXQgZm91ciBtaWxlcy48L25vdGU+IGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgY2l0eSBhbmQgbW9zdCBvZiB0aGUgZGVtZXNtZW4gbGl2ZSB0aGVyZSwgdGhlIG1ham9yaXR5IG9mIHRoZW0gaGFkIGdvbmUKICAgICAgICAgICAgICAgICAgICBob21lOyB0aG9zZSB3aG8gcmVtYWluZWQgd2VyZSBub3QgbW9yZSB0aGFuIHRoaXJ0eSBpbiBudW1iZXI7IGFtb25nIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgaG93ZXZlciwgd2VyZSBhbGwgdGhvc2Ugc3Vib3JuZWQgYnkgRXVidWxpZGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['57.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIG15IG5hbWUgd2FzIGNhbGxlZCwgdGhlIGZlbGxvdyBqdW1wZWQgdXAgYW5kIGltbWVkaWF0ZWx5IGJlZ2FuIHRvIHZpbGlmeQogICAgICAgICAgICAgICAgICAgIG1lLCBzcGVha2luZyBhdCBncmVhdCBsZW5ndGggYW5kIHdpdGggYSBsb3VkIHZvaWNlLCBhcyBoZSBkaWQganVzdCBub3cuIEhlCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjZWQgbm8gd2l0bmVzc2VzIGluIHN1cHBvcnQgb2YgaGlzIGNoYXJnZXMsIGVpdGhlciBhIG1lbWJlciBvZiB0aGUgZGVtZSBvcgogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aGUgY2l0aXplbnMgYXQgbGFyZ2UsIGJ1dCB1cmdlZCB0aGUgZGVtZXNtZW4gdG8gcGFzcyBhIHZvdGUgb2YKICAgICAgICAgICAgICAgICAgICBleHB1bHNpb24uIDwvdHJhbnNsYXRpb24+"
translation['57.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5JIGRlbWFuZGVkIHRoYXQgdGhlIHZvdGUgYmUgcHV0IG9mZgogICAgICAgICAgICAgICAgICAgIHVudGlsIHRoZSBmb2xsb3dpbmcgZGF5IG9uIGFjY291bnQgb2YgdGhlIGxhdGVuZXNzIG9mIHRoZSBob3VyIGFuZCBiZWNhdXNlIEkgaGFkCiAgICAgICAgICAgICAgICAgICAgbm8gb25lIHByZXNlbnQgdG8gc3BlYWsgaW4gbXkgYmVoYWxmLCBhbmQgYmVjYXVzZSB0aGUgdGhpbmcgaGFkIGNvbWUgdXBvbiBtZSBzbwogICAgICAgICAgICAgICAgICAgIHN1ZGRlbmx5LCBhbmQgYWxzbyB0aGF0IEV1YnVsaWRlcyBtaWdodCBoYXZlIHRoZSBvcHBvcnR1bml0eSBvZiBtYWtpbmcgYW55CiAgICAgICAgICAgICAgICAgICAgY2hhcmdlcyB0aGF0IGhlIHBsZWFzZWQsIGFuZCBvZiBwcm9kdWNpbmcgYW55IHdpdG5lc3NlcyBoZSBtaWdodCBoYXZlLCB3aGlsZSBJCiAgICAgICAgICAgICAgICAgICAgb24gbXkgcGFydCBtaWdodCBiZSBhYmxlIHRvIGRlZmVuZCBteXNlbGYgYmVmb3JlIGFsbCBteSBmZWxsb3ctZGVtZXNtZW4gYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjZSBteSByZWxhdGl2ZXMgYXMgd2l0bmVzc2VzOyBhbmQgSSBhZ3JlZWQgdG8gYWJpZGUgYnkgd2hhdGV2ZXIgZGVjaXNpb24KICAgICAgICAgICAgICAgICAgICB0aGV5IG1pZ2h0IHJlYWNoIGNvbmNlcm5pbmcgbWUuIDwvdHJhbnNsYXRpb24+"
translation['57.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZmVsbG93LAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIHBhaWQgbm8gaGVlZCBhdCBhbGwgdG8gbXkgcHJvcG9zYWxzLCBidXQgcHJvY2VlZGVkIGF0IG9uY2UgdG8gZ2l2ZQogICAgICAgICAgICAgICAgICAgIGJhbGxvdHMgdG8gdGhlIG1lbWJlcnMgb2YgdGhlIGRlbWUgd2hvIHdlcmUgcHJlc2VudCwgd2l0aG91dCBhbGxvd2luZyBtZSB0byBtYWtlCiAgICAgICAgICAgICAgICAgICAgYW55IGRlZmVuY2Ugb3IgaGltc2VsZiBnaXZpbmcgYW55IGNvbnZpbmNpbmcgcHJvb2Ygb2YgaGlzIGNoYXJnZXMuIFRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHdlcmUgaW4gbGVhZ3VlIHdpdGggaGltIHRoZW4ganVtcGVkIHVwIGFuZCBnYXZlIHRoZWlyIHZvdGVzLiBJdCB3YXMgZGFyaywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhleSByZWNlaXZlZCBmcm9tIGhpbSB0d28gb3IgdGhyZWUgYmFsbG90cyBhcGllY2UsIGFuZCBwdXQgdGhlbSBpbiB0aGUgYm94LgogICAgICAgICAgICAgICAgICAgIEhlcmUgaXMgYSBwcm9vZiBvZiB0aGlzLiBUaG9zZSB3aG8gdm90ZWQgd2VyZSBub3QgbW9yZSB0aGFuIHRoaXJ0eSBpbiBudW1iZXIsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZSBiYWxsb3RzLCB3aGVuIGNvdW50ZWQsIHdlcmUgbW9yZSB0aGFuIHNpeHR5OyBzbyB0aGF0IHdlIHdlcmUgYWxsCiAgICAgICAgICAgICAgICAgICAgYXN0b3VuZGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['57.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8KICAgICAgICAgICAgICAgICAgICBwcm92ZSB0aGF0IEkgYW0gc3RhdGluZyB0aGUgdHJ1dGggaW4gdGhpc+KAlHRoYXQgdGhlIGJhbGxvdHMgd2VyZSBub3QKICAgICAgICAgICAgICAgICAgICBnaXZlbiBvdXQgd2hlbiBhbGwgd2VyZSBwcmVzZW50IGFuZCB0aGF0IHRoZSBiYWxsb3RzIG91dG51bWJlcmVkIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHZvdGVk4oCUSSB3aWxsIGJyaW5nIGJlZm9yZSB5b3Ugd2l0bmVzc2VzLiBJdCBoYXBwZW5zIHRoYXQgSSBoYXZlIGF0CiAgICAgICAgICAgICAgICAgICAgaGFuZCBubyBmcmllbmQgb2YgbXkgb3duIG9yIGFueSBvdGhlciBBdGhlbmlhbiB0byBiZSBteSB3aXRuZXNzIHJlZ2FyZGluZyB0aGVzZQogICAgICAgICAgICAgICAgICAgIGZhY3RzIHNpbmNlIHRoZSBob3VyIHdhcyBzbyBsYXRlIGFuZCBJIGhhZCBub3QgYXNrZWQgYW55b25lIHRvIGJlIHByZXNlbnQsIGJ1dCBJCiAgICAgICAgICAgICAgICAgICAgYW0gZm9yY2VkIHRvIGNhbGwgYXMgd2l0bmVzc2VzIHRoZSB2ZXJ5IG1lbiB3aG8gaGF2ZSB3cm9uZ2VkIG1lLiBJIGhhdmUgdGhlcmVvcmUKICAgICAgICAgICAgICAgICAgICBwdXQgaW4gd3JpdGluZyBmb3IgdGhlbSBzdGF0ZW1lbnRzIHdoaWNoIHRoZXkgd2lsbCBub3QgYmUgYWJsZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBkZW55LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['57.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgaWYgdGhlIEhhbGltdXNpYW5zIGhhZCBiZWVuIGRlY2lkaW5nIG9uIHRoYXQgZGF5IHRoZSBzdGF0dXMgb2YgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIG1lbWJlcnMgb2YgdGhlIGRlbWUsIGl0IHdvdWxkIGhhdmUgYmVlbiByZWFzb25hYmxlIGZvciB0aGVtIHRvIGNvbnRpbnVlIHZvdGluZwogICAgICAgICAgICAgICAgICAgIHVudGlsIGxhdGUsIGluIG9yZGVyIHRoYXQgdGhleSBtaWdodCBoYXZlIGZ1bGZpbGxlZCB0aGUgcmVxdWlyZW1lbnRzIG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICBkZWNyZWUgYmVmb3JlIGRlcGFydGluZyB0byB0aGVpciBob21lcy4gQnV0LCBzZWVpbmcgdGhhdCB0aGVyZSB3ZXJlIG1vcmUgdGhhbgogICAgICAgICAgICAgICAgICAgIHR3ZW50eSBvZiB0aGUgZGVtZXNtZW4gbGVmdCByZWdhcmRpbmcgd2hvbSB0aGV5IGhhZCB0byB2b3RlIG9uIHRoZSBmb2xsb3dpbmcKICAgICAgICAgICAgICAgICAgICBkYXksIGFuZCB0aGF0IHRoZSBtZW1iZXJzIG9mIHRoZSBkZW1lIGhhZCBpbiBhbnkgY2FzZSB0byBiZSBjb252ZW5lZCBhZ2Fpbiwgd2hhdAogICAgICAgICAgICAgICAgICAgIGRpZmZpY3VsdHkgd2FzIHRoZXJlIGZvciBFdWJ1bGlkZXMgdG8gb3JkZXIgYW4gYWRqb3Vybm1lbnQgdW50aWwgdGhlIG1vcnJvdywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlbiBsZXQgdGhlIGRlbWVzbWVuIHZvdGUgdXBvbiBteSBjYXNlIGZpcnN0PyA8L3RyYW5zbGF0aW9uPg=="
translation['57.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVhc29uIHdhcywgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IEV1YnVsaWRlcyBrbmV3IHZlcnkgd2VsbCB0aGF0LCBpZiBhbgogICAgICAgICAgICAgICAgICAgIG9wcG9ydHVuaXR5IG9mIHNwZWFraW5nIHNob3VsZCBiZSBncmFudGVkIG1lIGFuZCBpZiBhbGwgdGhlIG1lbiBvZiB0aGUgZGVtZQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBwcmVzZW50IHRvIHN1cHBvcnQgbWUgYW5kIHRoZSBiYWxsb3RzIGhvbmVzdGx5IGdpdmVuIG91dCwgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgaGFkIGxlYWd1ZWQgdGhlbXNlbHZlcyB3aXRoIGhpbSB3b3VsZCBiZSBub3doZXJlITxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ib3cgdGhlc2UgcGVvcGxlIGNhbWUgdG8gZm9ybSB0aGVpciBjb25zcGlyYWN5IGFnYWluc3QgbWUgSSB3aWxsIHRlbGwgeW91LCBpZgogICAgICAgICAgICAgICAgICAgIHlvdSB3aXNoIHRvIGhlYXIgaXQsIGFzIHNvb24gYXMgSSBzaGFsbCBoYXZlIHNwb2tlbiBhYm91dCBteSBwYXJlbnRhZ2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['57.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgbWVhbnRpbWUgd2hhdCBkbyBJIGhvbGQgdG8gYmUganVzdCwKICAgICAgICAgICAgICAgICAgICBhbmQgd2hhdCBhbSBJIHByZXBhcmVkIHRvIGRvLCBtZW4gb2YgdGhlIGp1cnk/IFRvIHNob3cgeW91IHRoYXQgSSBhbSBhbiBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgIG9uIGJvdGggbXkgZmF0aGVyJ3MgYW5kIG15IG1vdGhlcidzIHNpZGUsIGFuZCB0byBwcm9kdWNlIHRvIHByb3ZlIGl0IHdpdG5lc3NlcwogICAgICAgICAgICAgICAgICAgIHdob3NlIHZlcmFjaXR5IHlvdSB3aWxsIG5vdCBxdWVzdGlvbiwgYW5kIHRvIGJyZWFrIGRvd24gdGhlIGNhbHVtbmllcyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlcyBicm91Z2h0IGFnYWluc3QgbWUuIEl0IHdpbGwgcmVzdCB3aXRoIHlvdSwgd2hlbiB5b3UgaGF2ZSBoZWFyZCBteQogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudHMsIGlmIHlvdSBjb25jbHVkZSB0aGF0IEkgYW0gYSBjaXRpemVuIGFuZCB0aGUgdmljdGltIG9mIGEgY29uc3BpcmFjeSwKICAgICAgICAgICAgICAgICAgICB0byBjb21lIHRvIG15IHJlc2N1ZTsgYnV0IGlmIHlvdSByZWFjaCBhIGRpZmZlcmVudCBjb25jbHVzaW9uLCB0byBhY3QgaW4KICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciB3YXkgeW91ciByZWdhcmQgZm9yIHlvdXIgb2F0aHMgbWF5IGJpZCB5b3UuIEkgd2lsbCBiZWdpbiB3aXRoIHRoaXMKICAgICAgICAgICAgICAgICAgICBwcm9vZi4gPC90cmFuc2xhdGlvbj4="
translation['57.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgbWFsaWNpb3VzbHkgYXNzZXJ0ZWQgdGhhdCBteSBmYXRoZXIgc3Bva2Ugd2l0aCBhIGZvcmVpZ24gYWNjZW50LiBCdXQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIHdhcyB0YWtlbiBwcmlzb25lciBieSB0aGUgZW5lbXkgaW4gdGhlIGNvdXJzZSBvZiB0aGUgRGVjZWxlYW4gd2FyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBsYXR0ZXIgcGVyaW9kIG9mIHRoZSBQZWxvcG9ubmVzaWFuIHdhciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii00MTMvLTQwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItNDEzIiB0bz0iLTQwNCI+NDEzPC9kYXRlUmFuZ2U+LTQwNCBCLkMuLCBpcyBvZnRlbgogICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgdGhlIERlY2VsZWFuIHdhciwgYmVjYXVzZSB0aGUgTGFjZWRhZW1vbmlhbnMsIHdobyBoYWQgYWdhaW4gaW52YWRlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+LCBvY2N1cGllZCB0aGUgdG93biBvZgogICAgICAgICAgICAgICAgICAgICAgICBEZWNlbGVhLCBub3QgZmFyIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgbWFpbnRhaW5lZCBhIGdhcnJpc29uIHRoZXJlLjwvbm90ZT4gYW5kIHdhcyBzb2xkIGludG8gc2xhdmVyeSBhbmQgdGFrZW4KICAgICAgICAgICAgICAgICAgICB0byA8ZGF0ZVJhbmdlIGF1dGhuYW1lPSItNDEzLy00MDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTQxMyIgdG89Ii00MDQiPjQxMzwvZGF0ZVJhbmdlPi00MDQgQi5DLiwgaXMgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVkIHRoZSBEZWNlbGVhbiB3YXIsIGJlY2F1c2UgdGhlIExhY2VkYWVtb25pYW5zLCB3aG8gaGFkIGFnYWluIGludmFkZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiwgb2NjdXBpZWQgdGhlIHRvd24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgRGVjZWxlYSwgbm90IGZhciBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIG1haW50YWluZWQgYSBnYXJyaXNvbiB0aGVyZS48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjcxMiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzEyIj5MZXVjYXM8L3BsYWNlTmFtZT4sIGFuZCB0aGF0IGhlIHRoZXJlIGZlbGwgaW4KICAgICAgICAgICAgICAgICAgICB3aXRoIENsZWFuZGVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgbW9kZXJuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzEyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MTIiPkxldWthczwvcGxhY2VOYW1lPiwgb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3MTIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjcxMiI+U2FudGEgTWF1cmE8L3BsYWNlTmFtZT4sIG9mZiB0aGUgd2VzdCBjb2FzdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc5Ij5BY2FybmFuaWE8L3BsYWNlTmFtZT4uPC9ub3RlPiB0aGUgYWN0b3IsIGFuZCB3YXMKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IGJhY2sgaGVyZSB0byBoaXMga2luc2ZvbGsgYWZ0ZXIgYSBsb25nIGxhcHNlIG9mIHRpbWXigJRhbGwgdGhpcwogICAgICAgICAgICAgICAgICAgIHRoZXkgaGF2ZSBvbWl0dGVkIHRvIHN0YXRlOyBidXQganVzdCBhcyB0aG91Z2ggaXQgd2VyZSByaWdodCB0aGF0IEkgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCB0byBydWluIG9uIGFjY291bnQgb2YgaGlzIG1pc2ZvcnR1bmVzLCB0aGV5IGhhdmUgbWFkZSBoaXMgZm9yZWlnbiBhY2NlbnQKICAgICAgICAgICAgICAgICAgICB0aGUgYmFzaXMgb2YgYSBjaGFyZ2UgYWdhaW5zdCBoaW0uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzEyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MTIiPkxldWthczwvcGxhY2VOYW1lPiwgb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3MTIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjcxMiI+U2FudGEgTWF1cmE8L3BsYWNlTmFtZT4sIG9mZiB0aGUgd2VzdCBjb2FzdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc5Ij5BY2FybmFuaWE8L3BsYWNlTmFtZT4uPC90cmFuc2xhdGlvbj4="
translation['57.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5PbiBteSBwYXJ0LAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIEkgdGhpbmsgdGhhdCB0aGVzZSB2ZXJ5IGZhY3RzIHdpbGwgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UgaGVscCBtZSB0bwogICAgICAgICAgICAgICAgICAgIGRlbW9uc3RyYXRlIHRoYXQgSSBhbSBhbiBBdGhlbmlhbi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgcGxhY2UsIHRvIHByb3ZlIHRoYXQgbXkgZmF0aGVyIHdhcyB0YWtlbiBwcmlzb25lciBhbmQgd2FzIHJhbnNvbWVkLCBJIHdpbGwgYnJpbmcKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMgYmVmb3JlIHlvdTsgdGhlbiwgdGhhdCB3aGVuIGhlIHJlYWNoZWQgaG9tZSBoZSByZWNlaXZlZCBmcm9tIGhpcwogICAgICAgICAgICAgICAgICAgIHVuY2xlcyBoaXMgc2hhcmUgb2YgdGhlIHByb3BlcnR5OyBhbmQgZnVydGhlcm1vcmUsIHRoYXQgbmVpdGhlciBhbW9uZyB0aGUKICAgICAgICAgICAgICAgICAgICBtZW1iZXJzIG9mIHRoZSBkZW1lIG5vciBhbW9uZyB0aG9zZSBvZiB0aGUgY2xhbiBub3IgYW55d2hlcmUgZWxzZSBkaWQgYW55b25lCiAgICAgICAgICAgICAgICAgICAgZXZlciBhY2N1c2UgaGltIO+8iGRlc3BpdGUgaGlzIGZvcmVpZ24gYWNjZW5077yJIHdpdGggYmVpbmcgYQogICAgICAgICAgICAgICAgICAgICAgICBmb3JlaWduZXIuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlBsZWFzZSB0YWtlIHRoZSBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['57.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgb2YgbXkgZmF0aGVyJ3MgYmVpbmcgdGFrZW4gcHJpc29uZXIgYnkgdGhlIGVuZW15IGFuZCBvZiB0aGUgZ29vZCBmb3J0dW5lCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggYnJvdWdodCBoaW0gYmFjayBoZXJlLiBUbyBwcm92ZSBub3cgdGhhdCBoZSB3YXMgeW91ciBmZWxsb3ctY2l0aXplbiwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGp1cnkg77yIZm9yIHRoaXMgeW91IG1heSBkZXBlbmQgdXBvbiBhcyBiZWluZyB0aGUgdmVyaXRhYmxlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGjvvIksIEkgd2lsbCBjYWxsIGFzIHdpdG5lc3NlcyB0aG9zZSBvZiBteSByZWxhdGl2ZXMgb24gbXkgZmF0aGVyJ3MKICAgICAgICAgICAgICAgICAgICBzaWRlIHdobyBhcmUgc3RpbGwgbGl2aW5nLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5DYWxsIGZpcnN0LCBwbGVhc2UsCiAgICAgICAgICAgICAgICAgICAgVGh1Y3JpdGlkZXMgYW5kIENoYXJpc2lhZGVzOyBmb3IgdGhlaXIgZmF0aGVyIENoYXJpc2l1cyB3YXMgYnJvdGhlciB0byBteQogICAgICAgICAgICAgICAgICAgIGdyYW5kZmF0aGVyIFRodWNyaXRpZGVzIGFuZCBteSBncmFuZG1vdGhlciBMeXNhcmV0w6osIGFuZCB1bmNsZSB0byBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciDvvIhmb3IgbXkgZmF0aGVyIGhhZCBtYXJyaWVkIGhpcyBzaXN0ZXIgYm9ybiBvZiBhIGRpZmZlcmVudAogICAgICAgICAgICAgICAgICAgICAgICBtb3RoZXLvvIkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlN1Y2ggbWFycmlhZ2VzIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgcGVybWlzc2libGUgdW5kZXIgQXRoZW5pYW4gbGF3Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['57.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5OZXh0LCBjYWxsIE5pY2lhZGVzOyBmb3IgaGlzIGZhdGhlciBMeXNhbmlhcwogICAgICAgICAgICAgICAgICAgIHdhcyBicm90aGVyIHRvIFRodWNyaXRpZGVzIGFuZCBMeXNhcmV0w6osIGFuZCB1bmNsZSB0byBteSBmYXRoZXIuIEFmdGVyCiAgICAgICAgICAgICAgICAgICAgaGltLCBjYWxsIE5pY29zdHJhdHVzOyBmb3IgaGlzIGZhdGhlciBOaWNpYWRlcyB3YXMgbmVwaGV3IHRvIG15IGdyYW5kZmF0aGVyIGFuZAogICAgICAgICAgICAgICAgICAgIG15IGdyYW5kbW90aGVyLCBhbmQgY291c2luIHRvIG15IGZhdGhlci48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q2FsbCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGVzZSBwZXJzb25zLCBwbGVhc2UuIEFuZCBkbyB5b3UgY2hlY2sgdGhlIHdhdGVyLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['57.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhlIHJlbGF0aXZlcyBvZiBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBvbiB0aGUgbWFsZSBzaWRlIGJvdGggZGVwb3NpbmcgYW5kIHN3ZWFyaW5nIHRoYXQgbXkgZmF0aGVyIHdhcyBhbgogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuIGFuZCB0aGVpciBvd24ga2luc21hbi4gQW5kIHN1cmVseSBub3Qgb25lIG9mIHRoZW0gd291bGQgY29tbWl0IHBlcmp1cnkKICAgICAgICAgICAgICAgICAgICB3aXRoIGltcHJlY2F0aW9ucyBvbiBoaXMgb3duIGhlYWQgaW4gdGhlIHByZXNlbmNlIG9mIHRob3NlIHdobyB3b3VsZCBrbm93IHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSB3YXMgZm9yc3dlYXJpbmcgaGltc2VsZi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRha2UgYWxzbyB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucyBvZiB0aG9zZSByZWxhdGVkIHRvIG15IGZhdGhlciBvbiB0aGUgZmVtYWxlIHNpZGUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2UgcGVyc29ucywKICAgICAgICAgICAgICAgICAgICB0aGVuLCB0aGUgc3Vydml2aW5nIHJlbGF0aXZlcyBvZiBteSBmYXRoZXIsIG9uIGJvdGggdGhlIG1hbGUgYW5kIHRoZSBmZW1hbGUKICAgICAgICAgICAgICAgICAgICBzaWRlLCBoYXZlIHRlc3RpZmllZCB0aGF0IGhlIHdhcyBvbiBib3RoIHNpZGVzIGFuIEF0aGVuaWFuIGFuZCBqdXN0bHkgZW50aXRsZWQKICAgICAgICAgICAgICAgICAgICB0byB0aGUgcmlnaHRzIG9mIGNpdGl6ZW5zaGlwLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgY2FsbCwgcGxlYXNlLAogICAgICAgICAgICAgICAgICAgIHRoZSBjbGFuc21lbiBhbmQgdGhlcmVhZnRlciB0aGUgbWVtYmVycyBvZiB0aGUgZ2Vucy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gdGhlIGVhcmx5IHBlcmlvZCwgYmVmb3JlIHRoZSByZWZvcm1zIG9mIENsZWlzdGhlbmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8ZGF0ZSBhdXRobmFtZT0iLTUwOSIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTUwOSI+NTA5PC9kYXRlPiBCLkMu77yJLCB0aGUgZm91ciB0cmliZXMKICAgICAgICAgICAgICAgICAgICAgICAgaW50byB3aGljaCB0aGUgQXRoZW5pYW5zIHdlcmUgYXQgdGhhdCB0aW1lIGRpdmlkZWQgY29udGFpbmVkIGVhY2ggdGhyZWUKICAgICAgICAgICAgICAgICAgICAgICAgcGhyYXRyaWFlLCBvciBjbGFucywgYW5kIHRoZXNlIGluIHR1cm4gd2VyZSBkaXZpZGVkIGludG8gdGhpcnR5IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6z4b2zzr3OtzwvZm9yZWlnbj4uIEV2ZW4gYWZ0ZXIgQ2xlaXN0aGVuZXMgdGhlIHBocmF0cmlhZSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6z4b2zzr3OtzwvZm9yZWlnbj4gcmV0YWluZWQgYSBwb3NpdGlvbiBvZiByZWxpZ2lvdXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vIGxvbmdlciBwb2xpdGljYWwsIHNpZ25pZmljYW5jZS4gVG8gcmVuZGVyIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6z4b2zzr3Ov8+CPC9mb3JlaWduPiBpbiB0aGlzIHNlbnNlIHdlIGhhdmUgbm8gYmV0dGVyIHdvcmQgdGhhbiB0aGUgTGF0aW4KICAgICAgICAgICAgICAgICAgICAgICAgZ2Vucy48L25vdGU+PGRhdGUgYXV0aG5hbWU9Ii01MDkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii01MDkiPjUwOTwvZGF0ZT4gQi5DLu+8iSwgdGhlIGZvdXIgdHJpYmVzCiAgICAgICAgICAgICAgICAgICAgICAgIGludG8gd2hpY2ggdGhlIEF0aGVuaWFucyB3ZXJlIGF0IHRoYXQgdGltZSBkaXZpZGVkIGNvbnRhaW5lZCBlYWNoIHRocmVlCiAgICAgICAgICAgICAgICAgICAgICAgIHBocmF0cmlhZSwgb3IgY2xhbnMsIGFuZCB0aGVzZSBpbiB0dXJuIHdlcmUgZGl2aWRlZCBpbnRvIHRoaXJ0eSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Os+G9s869zrc8L2ZvcmVpZ24+LiBFdmVuIGFmdGVyIENsZWlzdGhlbmVzIHRoZSBwaHJhdHJpYWUgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Os+G9s869zrc8L2ZvcmVpZ24+IHJldGFpbmVkIGEgcG9zaXRpb24gb2YgcmVsaWdpb3VzLAogICAgICAgICAgICAgICAgICAgICAgICBpZiBubyBsb25nZXIgcG9saXRpY2FsLCBzaWduaWZpY2FuY2UuIFRvIHJlbmRlciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Os+G9s869zr/PgjwvZm9yZWlnbj4gaW4gdGhpcyBzZW5zZSB3ZSBoYXZlIG5vIGJldHRlciB3b3JkIHRoYW4gdGhlIExhdGluCiAgICAgICAgICAgICAgICAgICAgICAgIGdlbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyB0YWtlIHRoZSBkZXBvc2l0aW9ucyBvZiB0aGUgZGVtZXNtZW4KICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIG1lbWJlcnMgb2YgdGhlIGdlbnMgaW4gcmVnYXJkIHRvIHRoZSBjbGFuc21lbiwgdG8gc2hvdyB0aGF0IHRoZXkgZWxlY3RlZAogICAgICAgICAgICAgICAgICAgIG1lIHByZXNpZGVudCBvZiB0aGUgY2xhbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['57.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgdGhlIHRlc3RpbW9ueSBnaXZlbiBieSBteSByZWxhdGl2ZXMgYW5kIGZlbGxvdy1jbGFuc21lbiBhbmQgYnkgdGhlIG1lbWJlcnMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZGVtZSBhbmQgb2YgdGhlIGdlbnMsIHdobyBhcmUgdGhlIHByb3BlciBwZXJzb25zIHRvIGJlIGNhbGxlZCB1cG9uIHRvCiAgICAgICAgICAgICAgICAgICAgdGVzdGlmeS4gQW5kIGZyb20gdGhpcyB5b3UgbWF5IGxlYXJuIHdoZXRoZXIgYSBtYW4gd2hvIGhhcyB0aGlzIHN1cHBvcnQgaXMgYQogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4gb3IgYW4gYWxpZW4uIElmIHdlIHdlcmUgc2Vla2luZyBwcm90ZWN0aW9uIGluIHRoZSB0ZXN0aW1vbnkgb2Ygb25lIG9yCiAgICAgICAgICAgICAgICAgICAgdHdvIHBlb3BsZSBvbmx5LCB3ZSBtaWdodCBiZSBvcGVuIHRvIHRoZSBzdXNwaWNpb24gdGhhdCB3ZSBoYWQgc3Vib3JuZWQgdGhlbTsKICAgICAgICAgICAgICAgICAgICBidXQgaWYgaXQgYXBwZWFycyB0aGF0IG15IGZhdGhlciBpbiBoaXMgbGlmZXRpbWUgYW5kIEkgbXlzZWxmIGF0IHByZXNlbnQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gcHV0IHRvIHRoZSB0ZXN0IGJlZm9yZSBhbGwgdGhlIGdyb3VwcyB0byB3aGljaCBlYWNoIG9uZSBvZiB5b3UgYmVsb25ncwogICAgICAgICAgICAgICAgICAgIO+8iEkgbWVhbiB0aG9zZSBvZiBjbGFuLCBvZiBraW5kcmVkLCBvZiB0aGUgZGVtZSwgYW5kIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGdlbnPvvIksIGhvdyBjYW4gaXQgYmUsIGhvdyBjYW4gaXQgcG9zc2libHkgYmUsIHRoYXQgYWxsIHRoZXNlIHBlcnNvbnMKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gc3Vib3JuZWQgdG8gYXBwZWFyLCB0aGV5IG5vdCBiZWluZyBpbiB0cnV0aCByZWxhdGl2ZXMgb2YgbWluZT8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5JZiBpdCB3ZXJlIHNob3duIHRoYXQgbXkgZmF0aGVyIHdhcyBhIG1hbgogICAgICAgICAgICAgICAgICAgIG9mIHdlYWx0aCBhbmQgaGFkIGdpdmVuIG1vbmV5IHRvIHRoZXNlIHBlb3BsZSB0byBwZXJzdWFkZSB0aGVtIHRvIGFzc2VydCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIGhpcyByZWxhdGl2ZXMsIGl0IHdvdWxkIGhhdmUgYmVlbiByZWFzb25hYmxlIGZvciBhbnlvbmUgdG8gc3VzcGVjdAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2FzIG5vdCBhIGNpdGl6ZW47IGJ1dCBpZiwgcG9vciBhcyBoZSB3YXMsIGhlIGJvdGggcHJvZHVjZWQgdGhlc2Ugc2FtZQogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBhcyBoaXMgcmVsYXRpdmVzIGFuZCBwcm92ZWQgdGhhdCB0aGV5IGhhZCBzaGFyZWQgdGhlaXIgcHJvcGVydHkgd2l0aCBoaW0sCiAgICAgICAgICAgICAgICAgICAgaXMgaXQgbm90IHBlcmZlY3RseSBjbGVhciB0aGF0IGhlIHdhcyBpbmRlZWQgcmVsYXRlZCB0byB0aGVtPyBGb3Igc3VyZWx5LCBpZiBoZQogICAgICAgICAgICAgICAgICAgIHdhcyByZWxhdGVkIHRvIG5vIG9uZSBvZiB0aGVtLCB0aGV5IHdvdWxkIG5vdCBoYXZlIGFkbWl0dGVkIGhpbSB0byBhIHBsYWNlIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGdlbnMgYW5kIGhhdmUgZ2l2ZW4gaGltIG1vbmV5IGJlc2lkZXMuIE5vOyBoZSB3YXMgcmVsYXRlZCB0byB0aGVtLCBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBmYWN0cyBoYXZlIHNob3duLCBhbmQgYXMgd2l0bmVzc2VzIGhhdmUgdGVzdGlmaWVkIHRvIHlvdS4gQW5kIGZ1cnRoZXJtb3JlLCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBjaG9zZW4gdG8gb2ZmaWNlcyBieSBsb3QsIGFuZCBoZSBwYXNzZWQgdGhlIHByb2JhdGlvbmFyeSB0ZXN0LCBhbmQgaGVsZAogICAgICAgICAgICAgICAgICAgICAgICBvZmZpY2UuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2UgdGhlIGRlcG9zaXRpb24sIHBsZWFzZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['57.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGRvZXMgYW55CiAgICAgICAgICAgICAgICAgICAgb25lIG9mIHlvdSBpbWFnaW5lIHRoYXQgdGhlIGRlbWVzbWVuIHdvdWxkIGhhdmUgc3VmZmVyZWQgdGhlIGFsaWVuIGFuZAogICAgICAgICAgICAgICAgICAgIG5vbi1jaXRpemVuIHRvIGhvbGQgb2ZmaWNlIGFtb25nIHRoZW0sIGFuZCB3b3VsZCBub3QgaGF2ZSBwcm9zZWN1dGVkIGhpbT8gV2VsbCwKICAgICAgICAgICAgICAgICAgICBub3QgYSBzaW5nbGUgbWFuIHByb3NlY3V0ZWQgaGltLCBvciBicm91Z2h0IGFueSBjaGFyZ2UgYWdhaW5zdCBoaW0uIE1vcmUgdGhhbgogICAgICAgICAgICAgICAgICAgIHRoYXQsIHRoZSBkZW1lc21lbiBoYWQgb2YgbmVjZXNzaXR5IHRvIHZvdGUgb24gb25lIGFub3RoZXIsIGFmdGVyIGJpbmRpbmcKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGJ5IHNvbGVtbiBvYXRocywgd2hlbiB0aGVpciB2b3RpbmctcmVnaXN0ZXIgd2FzIGxvc3QgZHVyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGFkbWluaXN0cmF0aW9uIGFzIHByZWZlY3Qgb2YgdGhlIGRlbWUgb2YgQW50aXBoaWx1cywgdGhlIGZhdGhlciBvZiBFdWJ1bGlkZXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZXkgZXhwZWxsZWQgc29tZSBvZiB0aGVpciBtZW1iZXJzOyBidXQgbm90IGEgbWFuIG1hZGUgYW55IG1vdGlvbiBhYm91dCBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBvciBicm91Z2h0IGFueSBzdWNoIGNoYXJnZXMgYWdhaW5zdCBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['57.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgZm9yIGFsbCBtZW4gdGhlIGVuZCBvZiBsaWZlIGlzIGRlYXRoPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICBzYW1lIHBocmFzZSBvY2N1cnMgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC45NyIgdmFsaWQ9InllcyI+RGVtLiAxOC45NzwvYmlibD4sIHdpdGggPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DhvbPPgc6xz4I8L2ZvcmVpZ24+IGZvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PhOG9s867zr/PgjwvZm9yZWlnbj4uPC9ub3RlPjsgYW5kIHdpdGggd2hhdHNvZXZlciB3cm9uZ2RvaW5ncyBhIG1hbiBtYXkgYmUKICAgICAgICAgICAgICAgICAgICBjaGFyZ2VkIGR1cmluZyBoaXMgbGlmZXRpbWUsIGl0IGlzIHJpZ2h0IHRoYXQgZm9yIHRoZXNlIGhpcyBjaGlsZHJlbiBzaG91bGQKICAgICAgICAgICAgICAgICAgICBmb3JldmVyIGJlIGhlbGQgYWNjb3VudGFibGU7IGJ1dCBpbiBtYXR0ZXJzIGNvbmNlcm5pbmcgd2hpY2ggbm8gbWFuIGV2ZXIgbWFkZQogICAgICAgICAgICAgICAgICAgIGFjY3VzYXRpb24gYWdhaW5zdCBoaW0gd2hpbGUgaGUgbGl2ZWQsIGlzIGl0IG5vdCBvdXRyYWdlb3VzIHRoYXQgYW55b25lIHNvCiAgICAgICAgICAgICAgICAgICAgd2lzaGluZyBzaG91bGQgYnJpbmcgaGlzIGNoaWxkcmVuIHRvIHRyaWFsPyBJZiwgbm93LCB0aGVyZSBoYWQgYmVlbiBubyBpbnF1aXJ5CiAgICAgICAgICAgICAgICAgICAgaW50byB0aGUgcXVlc3Rpb24sIGxldCB1cyBncmFudCB0aGF0IHRoZSBtYXR0ZXIgaGFzIGVzY2FwZWQgbm90aWNlOyBidXQgaWYKICAgICAgICAgICAgICAgICAgICBpbnF1aXJ5IHdhcyBtYWRlIGFuZCB0aGUgZGVtZXNtZW4gcmV2aWV3ZWQgdGhlaXIgbGlzdHMsIGFuZCBubyBvbmUgZXZlciBtYWRlIGFueQogICAgICAgICAgICAgICAgICAgIGFjY3VzYXRpb24sIG91Z2h0IEkgbm90IGp1c3RseSB0byBiZSByZWdhcmRlZCBhcyBhbiBBdGhlbmlhbiBzbyBmYXIgYXMgbXkgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgaXMgY29uY2VybmVkLCBzZWVpbmcgdGhhdCBoZSBkaWVkIGJlZm9yZSBhbnkgZGlzcHV0ZSByZWdhcmRpbmcgaGlzIGxpbmVhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgYXJvc2U/PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC45NyIgdmFsaWQ9InllcyI+RGVtLiAxOC45NzwvYmlibD4sIHdpdGggPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DhvbPPgc6xz4I8L2ZvcmVpZ24+IGZvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PhOG9s867zr/PgjwvZm9yZWlnbj4uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgdGhlc2Ugc3RhdGVtZW50cyBvZiBtaW5lCiAgICAgICAgICAgICAgICAgICAgYXJlIHRydWUsIEkgd2lsbCBjYWxsIHdpdG5lc3NlcyB3aG8gZGVwb3NlIHRvIHRoZXNlIGZhY3RzIGFsc28uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RnVydGhlcm1vcmUsIG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIGhhZCBmb3VyIHNvbnMgYm9ybiBvZiB0aGUgc2FtZSBtb3RoZXIgYXMgbXlzZWxmLCBhbmQgd2hlbiB0aGV5IGRpZWQgaGUKICAgICAgICAgICAgICAgICAgICBidXJpZWQgdGhlbSBpbiBvdXIgYW5jZXN0cmFsIHRvbWIsIHdoaWNoIGJlbG9uZ3MgaW4gY29tbW9uIHRvIGFsbCBtZW1iZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGdlbnM7IGFuZCBubyBvbmUgb2YgdGhlc2Uga2luc2ZvbGsgZXZlciBtYWRlIHByb3Rlc3Qgb3IgcHJldmVudGVkIGl0IG9yIGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICBzdWl0LiBBbmQgeWV0LCB3aG8gaXMgdGhlcmUgd2hvIHdvdWxkIGhhdmUgcGVybWl0dGVkIHBlcnNvbnMgaGF2aW5nIG5vCiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbiB3aXRoIHRoZSBmYW1pbHkgdG8gYmUgcGxhY2VkIGluIHRoZSBhbmNlc3RyYWwgdG9tYj88bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCB0aGVzZSBzdGF0ZW1lbnRzIG9mIG1pbmUgYWxzbyBhcmUgdHJ1ZSwKICAgICAgICAgICAgICAgICAgICB0YWtlIHRoZSBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['57.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0aCByZWdhcmQgdG8KICAgICAgICAgICAgICAgICAgICBteSBmYXRoZXIsIHRoZW4sIHRoZXNlIGFyZSB0aGUgZ3JvdW5kcyBmb3IgbXkgYXNzZXJ0aW9uIHRoYXQgaGUgd2FzIGFuIEF0aGVuaWFuOwogICAgICAgICAgICAgICAgICAgIGFuZCBJIGhhdmUgYnJvdWdodCBmb3J3YXJkIGFzIHdpdG5lc3NlcyBwZXJzb25zIHdob20gbXkgb3Bwb25lbnRzIHRoZW1zZWx2ZXMKICAgICAgICAgICAgICAgICAgICBoYXZlIHZvdGVkIHRvIGJlIGNpdGl6ZW5zLCBhbmQgd2hvIGRlcG9zZSB0aGF0IG15IGZhdGhlciB3YXMgdGhlaXIgb3duIGNvdXNpbi4KICAgICAgICAgICAgICAgICAgICBJdCBpcyBzaG93biB0aGF0IGhlIGxpdmVkIHN1Y2ggYW5kIHN1Y2ggYSBudW1iZXIgb2YgeWVhcnMgaGVyZSBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4gYW5kIHRoYXQgaGUgd2FzIG5ldmVyIGluIGFueSBwbGFjZQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgdW5kZXIgc2NydXRpbnkgYXMgYmVpbmcgYW4gYWxpZW4sIGJ1dCB0aGF0IGhlIGZvdW5kIGEgcmVmdWdlIHdpdGggdGhlc2UKICAgICAgICAgICAgICAgICAgICBwZXJzb25zIGFzIGhpcyByZWxhdGl2ZXMsIGFuZCB0aGF0IHRoZXkgYm90aCByZWNlaXZlZCBoaW0gYW5kIGdhdmUgaGltIGEgc2hhcmUKICAgICAgICAgICAgICAgICAgICBvZiB0aGVpciBwcm9wZXJ0eSBhcyBiZWluZyBvbmUgb2YgdGhlbXNlbHZlcy4gPC90cmFuc2xhdGlvbj4="
translation['57.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgaXQgaXMgc2hvd24gdGhhdCBoZSB3YXMgYm9ybiBpbiBhIHBlcmlvZCB3aGVuLCBldmVuIGlmIGhlIHdhcyBhbgogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuIG9uIG9uZSBzaWRlIG9ubHksIGhlIHdhcyBlbnRpdGxlZCB0byBjaXRpemVuc2hpcDsgZm9yIGhlIHdhcyBib3JuCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHRoZSBhcmNob25zaGlwIG9mIEh1Y2xlaWRlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFyY2hvbnNoaXAgb2YgRXVjbGVpZGVzIGluIDxkYXRlIGF1dGhuYW1lPSItNDAzIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDAzIj40MDM8L2RhdGU+IEIuQy4sIG9uIHRoZSBtb3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgb2YgQXJpc3RvcGhvbiwgYW4gb2xkIGxhdyBvZiBTb2xvbidzIHdhcyByZXZpdmVkIGFuZCBwdXQgaW50byBlZmZlY3QsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmVkIHRoYXQsIGluIG9yZGVyIHRvIHBvc3Nlc3MgZnVsbCBjaXZpYyByaWdodHMsIGEgbWFuIG11c3QgYmUgYm9ybiBvZgogICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRzIGJvdGggb2Ygd2hvbSB3ZXJlIEF0aGVuaWFucy4gVGhlIGxhdyB3YXMgbmF0dXJhbGx5IG5vdAogICAgICAgICAgICAgICAgICAgICAgICByZXRyb2FjdGl2ZS48L25vdGU+PGRhdGUgYXV0aG5hbWU9Ii00MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MDMiPjQwMzwvZGF0ZT4gQi5DLiwgb24gdGhlIG1vdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBvZiBBcmlzdG9waG9uLCBhbiBvbGQgbGF3IG9mIFNvbG9uJ3Mgd2FzIHJldml2ZWQgYW5kIHB1dCBpbnRvIGVmZmVjdCwgd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgZGVjbGFyZWQgdGhhdCwgaW4gb3JkZXIgdG8gcG9zc2VzcyBmdWxsIGNpdmljIHJpZ2h0cywgYSBtYW4gbXVzdCBiZSBib3JuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMgYm90aCBvZiB3aG9tIHdlcmUgQXRoZW5pYW5zLiBUaGUgbGF3IHdhcyBuYXR1cmFsbHkgbm90CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJvYWN0aXZlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaXRoIHJlZ2FyZCB0byBteSBtb3RoZXIKICAgICAgICAgICAgICAgICAgICDvvIhmb3IgdGhleSBtYWtlIGhlciB0b28gYSByZXByb2FjaCBhZ2FpbnN0IG1l77yJIEkgd2lsbCBzcGVhaywKICAgICAgICAgICAgICAgICAgICBhbmQgd2lsbCBjYWxsIHdpdG5lc3NlcyB0byBzdXBwb3J0IG15IHN0YXRlbWVudHMuIEFuZCB5ZXQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGluIHJlcHJvYWNoaW5nIHVzIHdpdGggc2VydmljZSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBtYXJrZXQgRXVidWxpZGVzIGhhcyBhY3RlZCwgbm90IG9ubHkgY29udHJhcnkgdG8geW91ciBkZWNyZWUsIGJ1dCBhbHNvCiAgICAgICAgICAgICAgICAgICAgY29udHJhcnkgdG8gdGhlIGxhd3Mgd2hpY2ggZGVjbGFyZSB0aGF0IGFueW9uZSB3aG8gbWFrZXMgYnVzaW5lc3MgaW4gdGhlIG1hcmtldAogICAgICAgICAgICAgICAgICAgIGEgcmVwcm9hY2ggYWdhaW5zdCBhbnkgbWFsZSBvciBmZW1hbGUgY2l0aXplbiBzaGFsbCBiZSBsaWFibGUgdG8gdGhlIHBlbmFsdGllcwogICAgICAgICAgICAgICAgICAgIGZvciBldmlsLXNwZWFraW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['57.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5XZSBvbiBvdXIgcGFydCBhY2tub3dsZWRnZQogICAgICAgICAgICAgICAgICAgIHRoYXQgd2Ugc2VsbCByaWJib25zIGFuZCBkbyBub3QgbGl2ZSBpbiB0aGUgbWFubmVyIHdlIGNvdWxkIHdpc2gsIGFuZCBpZiBpbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgZXllcywgRXVidWxpZGVzLCB0aGlzIGlzIGEgc2lnbiB0aGF0IHdlIGFyZSBub3QgQXRoZW5pYW5zLCBJIHNoYWxsIHByb3ZlIHRvIHlvdQogICAgICAgICAgICAgICAgICAgIHRoZSB2ZXJ5IG9wcG9zaXRl4oCUdGhhdCBpdCBpcyBub3QgcGVybWl0dGVkIHRvIGFueSBhbGllbiB0byBkbyBidXNpbmVzcwogICAgICAgICAgICAgICAgICAgIGluIHRoZSBtYXJrZXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIHdpdGhvdXQgcGF5aW5nIGEgc3BlY2lhbAogICAgICAgICAgICAgICAgICAgICAgICByZXNpZGVudC1hbGllbiB0YXgsIGFuZCBiZWluZyByZWdpc3RlcmVkLjwvbm90ZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSBmaXJzdCB0aGUgbGF3IG9mIFNvbG9uIGFuZCByZWFkIGl0LCBwbGVhc2UuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGFrZSBhbHNvIHRoZSBsYXcgb2YgQXJpc3RvcGhvbjsgZm9yLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIFNvbG9uIHdhcyB0aG91Z2h0IHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICBlbmFjdGVkIGluIHRoaXMgaW5zdGFuY2Ugc28gd2lzZSBhbmQgZGVtb2NyYXRpYyBhIGxhdyB0aGF0IHlvdSB2b3RlZCB0byByZS1lbmFjdAogICAgICAgICAgICAgICAgICAgICAgICBpdC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgZml0dGluZyB0aGF0IHlvdSwgdGhlbiwgYWN0aW5nIGluCiAgICAgICAgICAgICAgICAgICAgZGVmZW5jZSBvZiB0aGUgbGF3cywgc2hvdWxkIGhvbGQsIG5vdCB0aGF0IHRob3NlIHdobyBwbHkgYSB0cmFkZSBhcmUgYWxpZW5zLCBidXQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRob3NlIHdobyBicmluZyBtYWxpY2lvdXMgYW5kIGJhc2VsZXNzIHN1aXRzIGFyZSBzY291bmRyZWxzLiBGb3IsCiAgICAgICAgICAgICAgICAgICAgRXVidWxpZGVzLCB0aGVyZSBpcyBhbm90aGVyIGxhdyB0b28gcmVnYXJkaW5nIGlkbGVuZXNzIHRvIHdoaWNoIHlvdSwgd2hvCiAgICAgICAgICAgICAgICAgICAgZGVub3VuY2UgdXMgd2hvIGFyZSB0cmFkZXJzLCBhcmUgYW1lbmFibGUuIDwvdHJhbnNsYXRpb24+"
translation['57.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICB3ZSBhcmUgYXQgdGhlIHByZXNlbnQgdGltZSBpbnZvbHZlZCBpbiBhIG1pc2ZvcnR1bmUgc28gZ3JlYXQgdGhhdCwgd2hlcmVhcyBpdCBpcwogICAgICAgICAgICAgICAgICAgIHBlcm1pdHRlZCB0byB0aGlzIGZlbGxvdyB0byBtYWtlIHNsYW5kZXJvdXMgc3RhdGVtZW50cyB3aGljaCBoYXZlIG5vdGhpbmcgdG8gZG8KICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBjYXNlLCBhbmQgdG8gYXZhaWwgaGltc2VsZiBvZiBldmVyeSBwb3NzaWJsZSBtZWFucyB0byBwcmV2ZW50IG15CiAgICAgICAgICAgICAgICAgICAgb2J0YWluaW5nIG15IHJpZ2h0cyBpbiBhbnkgcGFydGljdWxhciwgeW91IHdpbGwgcGVyaGFwcyByZWJ1a2UgbWUsIGlmIEkgdGVsbCB5b3UKICAgICAgICAgICAgICAgICAgICB3aGF0IHNvcnQgb2YgYSB0cmFkZSB0aGlzIG1hbiBwbGllcyBhcyBoZSBnb2VzIGFib3V0IHRoZSBjaXR5OyBhbmQgeW91IHdvdWxkIGRvCiAgICAgICAgICAgICAgICAgICAgc28gd2l0aCBnb29kIHJlYXNvbiwgZm9yIHdoYXQgbmVlZCBpcyB0aGVyZSBmb3IgbWUgdG8gdGVsbCB5b3Ugd2hhdCB5b3Uga25vdz8KICAgICAgICAgICAgICAgICAgICBCdXQgY29uc2lkZXIuIEl0IHNlZW1zIHRvIG1lIGNlcnRhaW5seSB0aGF0IG91ciBjYXJyeWluZyBvbiBhIHRyYWRlIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcmtldC1wbGFjZSBpcyB0aGUgc3Ryb25nZXN0IHByb29mIHRoYXQgdGhpcyBmZWxsb3cgaXMgYnJpbmdpbmcgYWdhaW5zdCB1cwogICAgICAgICAgICAgICAgICAgIGNoYXJnZXMgd2hpY2ggYXJlIGZhbHNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['57.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBhc3NlcnRzIHRoYXQgbXkKICAgICAgICAgICAgICAgICAgICBtb3RoZXIgaXMgYSB2ZW5kb3Igb2YgcmliYm9ucyBhbmQgdGhhdCBldmVyeWJvZHkgaGFzIHNlZW4gaGVyLiBXZWxsIHRoZW4sIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gYmUgbWFueSB0byB0ZXN0aWZ5IGZyb20ga25vd2xlZGdlIHdobyBzaGUgaXMsIGFuZCBub3QgZnJvbSBoZWFyc2F5CiAgICAgICAgICAgICAgICAgICAgb25seS4gSWYgc2hlIHdhcyBhbiBhbGllbiwgdGhleSBvdWdodCB0byBoYXZlIGV4YW1pbmVkIHRoZSBtYXJrZXQtdG9sbHMsIGFuZAogICAgICAgICAgICAgICAgICAgIGhhdmUgc2hvd24gd2hldGhlciBzaGUgcGFpZCB0aGUgYWxpZW4ncyB0YXgsIGFuZCBmcm9tIHdoYXQgY291bnRyeSBzaGUgY2FtZTsgYW5kCiAgICAgICAgICAgICAgICAgICAgaWYgc2hlIHdlcmUgYSBzbGF2ZSwgdGhlbiB0aGUgb25lIHdobyBoYWQgYm91Z2h0IGhlciBzaG91bGQgYnkgYWxsIG1lYW5zIGhhdmUKICAgICAgICAgICAgICAgICAgICBjb21lIHRvIGdpdmUgZXZpZGVuY2UgYWdhaW5zdCBoZXIsIG9yIHRoZSBvbmUgd2hvIHNvbGQgaGVyLCBvciBpbiBkZWZhdWx0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgc29tZW9uZSBlbHNlIHRvIHByb3ZlIHRoYXQgc2hlIGhhZCBsaXZlZCBhcyBhIHNsYXZlIG9yIGhhZCBiZWVuIHNldCBmcmVlLgogICAgICAgICAgICAgICAgICAgIEJ1dCBhcyBpdCBpcywgRXVidWxpZGVzIGhhcyBwcm92ZWQgbm90IG9uZSBvZiB0aGVzZSB0aGluZ3M7IGhlIGhhcyBtZXJlbHksIGluIG15CiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiwgaW5kdWxnZWQgaW4gZXZlcnkgZm9ybSBvZiBhYnVzZS4gRm9yIHRoaXMgaXMgd2hhdCBhIGJsYWNrbWFpbGVyIGlzOyBoZQogICAgICAgICAgICAgICAgICAgIG1ha2VzIGFsbCBtYW5uZXIgb2YgY2hhcmdlcywgYnV0IHByb3ZlcyBub3RoaW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['57.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGUgaGFzIHNhaWQgdGhpcyB0b28gYWJvdXQgbXkKICAgICAgICAgICAgICAgICAgICBtb3RoZXIsIHRoYXQgc2hlIHNlcnZlZCBhcyBhIG51cnNlLiBXZSwgb24gb3VyIHBhcnQsIGRvIG5vdCBkZW55IHRoYXQgdGhpcyB3YXMKICAgICAgICAgICAgICAgICAgICB0aGUgY2FzZSBpbiB0aGUgdGltZSBvZiB0aGUgY2l0eSdzIG1pc2ZvcnR1bmUsIHdoZW4gYWxsIHBlb3BsZSB3ZXJlIGJhZGx5IG9mZjsKICAgICAgICAgICAgICAgICAgICBidXQgaW4gd2hhdCBtYW5uZXIgYW5kIGZvciB3aGF0IHJlYXNvbnMgc2hlIGJlY2FtZSBhIG51cnNlIEkgd2lsbCB0ZWxsIHlvdQogICAgICAgICAgICAgICAgICAgIHBsYWlubHkuIEFuZCBsZXQgbm8gb25lIG9mIHlvdSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYmUgcHJlanVkaWNlZCBhZ2FpbnN0IHVzIGJlY2F1c2Ugb2YgdGhpczsgZm9yIHlvdSB3aWxsCiAgICAgICAgICAgICAgICAgICAgZmluZCB0b2RheSBtYW55IEF0aGVuaWFuIHdvbWVuIHdobyBhcmUgc2VydmluZyBhcyBudXJzZXM7IEkgd2lsbCBtZW50aW9uIHRoZW0gYnkKICAgICAgICAgICAgICAgICAgICBuYW1lLCBpZiB5b3Ugd2lzaC4gSWYgd2Ugd2VyZSByaWNoIHdlIHNob3VsZCBub3QgYmUgc2VsbGluZyByaWJib25zIG5vciBiZSBpbgogICAgICAgICAgICAgICAgICAgIHdhbnQgaW4gYW55IHdheS4gQnV0IHdoYXQgaGFzIHRoaXMgdG8gZG8gd2l0aCBvdXIgZGVzY2VudD8gTm90aGluZyB3aGF0ZXZlciwgaW4KICAgICAgICAgICAgICAgICAgICBteSBvcGluaW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['57.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5QcmF5LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBkbyBub3Qgc2Nvcm4gdGhlIG5lZWR5CiAgICAgICAgICAgICAgICAgICAg77yIdGhlaXIgcG92ZXJ0eSBpcyBtaXNmb3J0dW5lIGVub3VnaO+8iSwgYW5kIHNjb3JuIHN0aWxsIGxlc3MKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gY2hvb3NlIHRvIGVuZ2FnZSBpbiB0cmFkZSBhbmQgZ2V0IHRoZWlyIGxpdmluZyBieSBob25lc3QgbWVhbnMuIE5vOwogICAgICAgICAgICAgICAgICAgIGxpc3RlbiB0byBteSB3b3JkcywgYW5kIGlmIEkgcHJvdmUgdG8geW91IHRoYXQgbXkgbW90aGVyJ3MgcmVsYXRpdmVzIGFyZSBzdWNoIGFzCiAgICAgICAgICAgICAgICAgICAgZnJlZS1ib3JuIHBlb3BsZSBvdWdodCB0byBiZTsgdGhhdCB0aGV5IGRlbnkgdXBvbiBvYXRoIHRoZSBjYWx1bW5pb3VzIGNoYXJnZXMKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGlzIG1hbiBtYWtlcyByZWdhcmRpbmcgaGVyLCBhbmQgdGVzdGlmeSB0aGF0IHRoZXkga25vdyBoZXIgdG8gYmUgb2YKICAgICAgICAgICAgICAgICAgICBjaXZpYyBiaXJ0aOKAlHRoZXkgb24gdGhlaXIgcGFydCBiZWluZyB3aXRuZXNzZXMgd2hvbSB5b3UgeW91cnNlbHZlcwogICAgICAgICAgICAgICAgICAgIHdpbGwgYWNrbm93bGVkZ2UgdG8gYmUgd29ydGh5IG9mIGNyZWRlbmNl4oCULCB0aGVuLCBhcyB5b3UgYXJlIGJvdW5kIHRvCiAgICAgICAgICAgICAgICAgICAgZG8sIGNhc3QgeW91ciB2b3RlcyBpbiBteSBmYXZvci4gPC90cmFuc2xhdGlvbj4="
translation['57.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TXkgZ3JhbmRmYXRoZXIsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoZSBmYXRoZXIgb2YgbXkgbW90aGVyLCB3YXMgRGFtb3N0cmF0dXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTWVsaXTDqi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TWVsaXTDqiwgYSBkZW1lCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSB0cmliZSBDZWNyb3Bpcy48L25vdGU+IFRvIGhpbSB3ZXJlIGJvcm4gZm91ciBjaGlsZHJlbjsgYnkgaGlzIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgd2lmZSBhIGRhdWdodGVyIGFuZCBhIHNvbiBBbXl0aGVvbiwgYW5kIGJ5IGhpcyBzZWNvbmQgd2lmZQogICAgICAgICAgICAgICAgICAgIENoYWVyZXN0cmF0w6ogbXkgbW90aGVyIGFuZCBUaW1vY3JhdGVzLiBUaGVzZSBhbHNvIGhhZCBjaGlsZHJlbi4KICAgICAgICAgICAgICAgICAgICBBbXl0aGVvbiBoYWQgYSBzb24gRGFtb3N0cmF0dXMsIHdobyBib3JlIHRoZSBzYW1lIG5hbWUgYXMgaGlzIGdyYW5kZmF0aGVyLCBhbmQKICAgICAgICAgICAgICAgICAgICB0d28gb3RoZXJzLCBDYWxsaXN0cmF0dXMgYW5kIERleGl0aGV1cy4gQW15dGhlb24sIG15IG1vdGhlcidzIGJyb3RoZXIsIHdhcyBvbmUKICAgICAgICAgICAgICAgICAgICBvZiB0aG9zZSB3aG8gc2VydmVkIGluIHRoZSBjYW1wYWlnbiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzEyMiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMTIyIj5TaWNpbHk8L3BsYWNlTmFtZT48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGRpc2FzdHJvdXMKICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWRpdGlvbiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzEyMiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMTIyIj5TaWNpbHk8L3BsYWNlTmFtZT4gd2FzIHNlbnQgb3V0CiAgICAgICAgICAgICAgICAgICAgICAgIGluIDxkYXRlIGF1dGhuYW1lPSItNDE1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDE1Ij40MTU8L2RhdGU+IEIuQy48L25vdGU+IGFuZCB3ZXJlIGtpbGxlZCB0aGVyZSwgYW5kIGhlCiAgICAgICAgICAgICAgICAgICAgbGllcyBidXJpZWQgaW4gdGhlIHB1YmxpYyB0b21iLjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiB3YXMgc2VudCBvdXQKICAgICAgICAgICAgICAgICAgICAgICAgaW4gPGRhdGUgYXV0aG5hbWU9Ii00MTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MTUiPjQxNTwvZGF0ZT4gQi5DLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIGNlbm90YXBoLCBvZgogICAgICAgICAgICAgICAgICAgICAgICBjb3Vyc2UuPC9ub3RlPiBUaGVzZSBmYWN0cyB3aWxsIGJlIHByb3ZlZCB0byB5b3UgYnkgdGVzdGltb255LiA8L3RyYW5zbGF0aW9uPg=="
translation['57.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5UbyBBbXl0aGVvbidzIHNpc3Rlciwgd2hvIG1hcnJpZWQgRGlvZG9ydXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDUwMDQyNzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNTAwNDI3MSI+SGFsYWU8L3BsYWNlTmFtZT4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkZvciB0aGUgdHdvIGRlbWVzIG9mIHRoaXMgbmFtZSBzZWUgbm90ZSBhIG9uIHAuIDMzNiBvZiB2b2wuCiAgICAgICAgICAgICAgICAgICAgICAgIGlpLjwvbm90ZT4gd2FzIGJvcm4gYSBzb24gQ3Rlc2liaXVzLCBhbmQgaGUgd2FzIGtpbGxlZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMDAzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAwMDMxIj5BYnlkdXM8L3BsYWNlTmFtZT48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QSB0b3duCiAgICAgICAgICAgICAgICAgICAgICAgIG9uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4uIFRoZSBkYXRlIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgY2FtcGFpZ24gd2FzIDxkYXRlIGF1dGhuYW1lPSItMzg4IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzg4Ij4zODg8L2RhdGU+IEIuQy48L25vdGU+IHdoaWxlIHNlcnZpbmcgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY2FtcGFpZ24gd2l0aCBUaHJhc3lidWx1cy4gT2YgdGhlc2UgcmVsYXRpdmVzIHRoZXJlIGlzIGxpdmluZyBEYW1vc3RyYXR1cywgc29uCiAgICAgICAgICAgICAgICAgICAgb2YgQW15dGhlb24gYW5kIG5lcGhldyBvZiBteSBtb3RoZXIuIFRoZSBzaXN0ZXIgb2YgbXkgZ3JhbmRtb3RoZXIKICAgICAgICAgICAgICAgICAgICBDaGFlcmVzdHJhdMOqIHdhcyBtYXJyaWVkIHRvIEFwb2xsb2RvcnVzIG9mIFBsb3RoZWlhLjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4uIFRoZSBkYXRlIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgY2FtcGFpZ24gd2FzIDxkYXRlIGF1dGhuYW1lPSItMzg4IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzg4Ij4zODg8L2RhdGU+IEIuQy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UGxvdGhlaWEsIGEgZGVtZSBvZiB0aGUgdHJpYmUgQWVnZcOvcy48L25vdGU+IFRoZXkKICAgICAgICAgICAgICAgICAgICBoYWQgYSBzb24gT2x5bXBpY2h1cywgYW5kIE9seW1waWNodXMgYSBzb24gQXBvbGxvZG9ydXMsIHdobyBpcyBzdGlsbAogICAgICAgICAgICAgICAgICAgICAgICBsaXZpbmcuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNhbGwgdGhlc2UgcGVvcGxlLCBwbGVhc2UuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2UKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMsIHRoZW4sIHlvdSBoYXZlIGhlYXJkIGdpdmluZyB0aGVpciB0ZXN0aW1vbnkgYW5kIHRha2luZyB0aGVpciBvYXRocy4gSQogICAgICAgICAgICAgICAgICAgIHdpbGwgY2FsbCBhbHNvIG9uZSB3aG8gaXMgb3VyIGtpbnNtYW4gb24gYm90aCBzaWRlcywgYW5kIGhpcyBzb25zLiBGb3IKICAgICAgICAgICAgICAgICAgICBUaW1vY3JhdGVzLCB3aG8gaXMgbXkgbW90aGVyJ3MgYnJvdGhlciwgYm9ybiBmcm9tIHRoZSBzYW1lIGZhdGhlciBhbmQgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBtb3RoZXIsIGhhZCBhIHNvbiBFdXhpdGhldXMsIGFuZCBFdXhpdGhldXMgaGFkIHRocmVlIHNvbnMuIEFsbCB0aGVzZSBwZXJzb25zIGFyZQogICAgICAgICAgICAgICAgICAgIHN0aWxsIGxpdmluZy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q2FsbCwgcGxlYXNlLCB0aG9zZSBvZiB0aGVtIHdobyBhcmUKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgY2l0eS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['57.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRha2UsCiAgICAgICAgICAgICAgICAgICAgcGxlYXNlLCB0aGUgZGVwb3NpdGlvbnMgb2YgdGhlIG1lbWJlcnMgb2YgdGhlIGNsYW4gYmVsb25naW5nIHRvIHRoZSBzYW1lIGdlbnMgYXMKICAgICAgICAgICAgICAgICAgICBteSBtb3RoZXIsIGFuZCBvZiB0aGUgbWVtYmVycyBvZiB0aGUgZGVtZSwgYW5kIG9mIHRob3NlIHdobyBoYXZlIHRoZSByaWdodCBvZgogICAgICAgICAgICAgICAgICAgIGJ1cmlhbCBpbiB0aGUgc2FtZSB0b21icy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXMgdG8gbXkgbW90aGVyJ3MgbGluZWFnZSwgdGhlbiwgSSBwcm92ZQogICAgICAgICAgICAgICAgICAgIHRvIHlvdSBpbiB0aGlzIHdheSB0aGF0IHNoZSB3YXMgYW4gQXRoZW5pYW4gb24gYm90aCB0aGUgbWFsZSBhbmQgdGhlIGZlbWFsZQogICAgICAgICAgICAgICAgICAgIHNpZGUuIE15IG1vdGhlciwgbWVuIG9mIHRoZSBqdXJ5LCBmaXJzdCBtYXJyaWVkIFByb3RvbWFjaHVzLCB0byB3aG9tIHNoZSB3YXMKICAgICAgICAgICAgICAgICAgICBnaXZlbiBieSBUaW1vY3JhdGVzLCBoZXIgYnJvdGhlciBib3JuIG9mIHRoZSBzYW1lIGZhdGhlciBhbmQgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICAgICAgbW90aGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkluIG9yZGVyIHRoYXQgYSBtYXJyaWFnZSBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICAgICAgbGVnaXRpbWF0ZSBpdCB3YXMgbmVjZXNzYXJ5IHRoYXQgdGhlIHdvbWFuIHNob3VsZCBiZSBnaXZlbiBpbiBtYXJyaWFnZSBieSBhCiAgICAgICAgICAgICAgICAgICAgICAgIG5lYXIgbWFsZSByZWxhdGl2ZeKAlGdlbmVyYWxseSBoZXIgZmF0aGVyIG9yIGhlciBicm90aGVyLCBvciBpbgogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IG9mIHRoZXNlIGJ5IHNvbWVvbmUgYWN0aW5nIGluIHRoZWlyIHN0ZWFkLjwvbm90ZT47IGFuZCBzaGUgaGFkIGJ5CiAgICAgICAgICAgICAgICAgICAgaGltIGEgZGF1Z2h0ZXIuIFRoZW4gc2hlIG1hcnJpZWQgbXkgZmF0aGVyIGFuZCBnYXZlIGJpcnRoIHRvIG1lLiBCdXQgaG93IGl0IHdhcwogICAgICAgICAgICAgICAgICAgIHRoYXQgc2hlIGNhbWUgdG8gbWFycnkgbXkgZmF0aGVyIHlvdSBtdXN0IGhlYXI7IGZvciB0aGUgY2hhcmdlcyB3aGljaCBteQogICAgICAgICAgICAgICAgICAgIG9wcG9uZW50IG1ha2VzIHJlZ2FyZGluZyBDbGVpbmlhcyBhbmQgbXkgbW90aGVyJ3MgaGF2aW5nIHNlcnZlZCBhcwogICAgICAgICAgICAgICAgICAgIG51cnNl4oCUYWxsIHRoaXMgdG9vIEkgd2lsbCBzZXQgZm9ydGggdG8geW91IGNsZWFybHkuIDwvdHJhbnNsYXRpb24+"
translation['57.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5Qcm90b21hY2h1cyB3YXMgYSBwb29yIG1hbiwgYnV0IGJlY29taW5nIGVudGl0bGVkIHRvIGluaGVyaXQKICAgICAgICAgICAgICAgICAgICBhIGxhcmdlIGVzdGF0ZSBieSBtYXJyeWluZyBhbiBoZWlyZXNzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIHdvbWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCBpbmhlcml0IHByb3BlcnR5IGJ1dCBoZXJzZWxmIHBhc3NlZCB3aXRoIHRoZSBlc3RhdGUgdG8gdGhlIG5lYXJlc3QKICAgICAgICAgICAgICAgICAgICAgICAgbWFsZSBoZWlyLiBIZSB3YXMgdGhlbiBlbnRpdGxlZCwgYW5kIG9ibGlnZWQsIHRvIG1hcnJ5IGhlciBvciB0byBnaXZlIGhlciBpbgogICAgICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZS4gSWYgaGUgY2hvc2UgdGhlIGZvcm1lciBhbHRlcm5hdGl2ZSBhbmQgd2FzIGFscmVhZCBtYXJyaWVkLCBoZQogICAgICAgICAgICAgICAgICAgICAgICBuZWNlc3NhcmlseSBkaXZvcmNlZCBoaXMgd2lmZSBvciBnYXZlIGhlciBpbiBtYXJyaWFnZSB0byBhbm90aGVyLjwvbm90ZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgd2lzaGluZyB0byBnaXZlIG15IG1vdGhlciBpbiBtYXJyaWFnZSwgaGUgcGVyc3VhZGVkIG15IGZhdGhlciBUaHVjcml0dXMsIGFuCiAgICAgICAgICAgICAgICAgICAgYWNxdWFpbnRhbmNlIG9mIGhpcywgdG8gdGFrZSBoZXIsIGFuZCBteSBmYXRoZXIgcmVjZWl2ZWQgbXkgbW90aGVyIGluIG1hcnJpYWdlCiAgICAgICAgICAgICAgICAgICAgYXQgdGhlIGhhbmRzIG9mIGhlciBicm90aGVyIFRpbW9jcmF0ZXMgb2YgTWVsaXTDqiwgaW4gdGhlIHByZXNlbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgYm90aCBoaXMgb3duIHVuY2xlcyBhbmQgb3RoZXIgd2l0bmVzc2VzOyBhbmQgb2YgdGhlc2UgYXMgbWFueSBhcyBhcmUgc3RpbGwKICAgICAgICAgICAgICAgICAgICBsaXZpbmcgc2hhbGwgZ2l2ZSB0ZXN0aW1vbnkgYmVmb3JlIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['57.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lCiAgICAgICAgICAgICAgICAgICAgdGltZSBhZnRlciB0aGlzLCB3aGVuIGJ5IG5vdyB0d28gY2hpbGRyZW4gaGFkIGJlZW4gYm9ybiB0byBoZXIsIHNoZSB3YXMKICAgICAgICAgICAgICAgICAgICBjb21wZWxsZWQgYXQgYSB0aW1lIHdoZW4gbXkgZmF0aGVyIHdhcyBhYnNlbnQgb24gbWlsaXRhcnkgc2VydmljZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgVGhyYXN5YnVsdXMgYW5kIHNoZSBoZXJzZWxmIHdhcyBpbiBoYXJkIHN0cmFpdHMsIHRvIHRha2UgQ2xlaW5pYXMsIHRoZSBzb24gb2YKICAgICAgICAgICAgICAgICAgICBDbGVpZGljdXMsIHRvIG51cnNlLiBUaGlzIGFjdCBvZiBoZXJzIHdhcywgSGVhdmVuIGtub3dzLCBub25lIHRvbyBmb3J0dW5hdGUgd2l0aAogICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZSB0byB0aGUgZGFuZ2VyIHdoaWNoIGhhcyBub3cgY29tZSB1cG9uIG1lIO+8iGZvciBpdCB3YXMgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoaXMgbnVyc2luZyB0aGF0IGFsbCB0aGUgc2xhbmRlciBhYm91dCB1cyBoYXMgYXJpc2Vu77yJOyBidXQgaW4gdmlldyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBwb3ZlcnR5IHdpdGggd2hpY2ggc2hlIGhhZCB0byBjb3BlIHNoZSBkaWQgd2hhdCB3YXMgcGVyaGFwcyBib3RoIG5lY2Vzc2FyeQogICAgICAgICAgICAgICAgICAgIGFuZCBmaXR0aW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['57.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaXQgaXMgcGxhaW4sIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgaXQgd2FzIG5vdCBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciB3aG8gZmlyc3QgcmVjZWl2ZWQgbXkgbW90aGVyIGluIG1hcnJpYWdlLiBObzsgaXQgd2FzIFByb3RvbWFjaHVzLGFuZCBoZQogICAgICAgICAgICAgICAgICAgIGhhZCBieSBoZXIgYSBzb24sIGFuZCBhIGRhdWdodGVyIHdob20gaGUgZ2F2ZSBpbiBtYXJyaWFnZS4gQW5kIGhlLCBldmVuIHRob3VnaAogICAgICAgICAgICAgICAgICAgIGRlYWQsIGJlYXJzIHRlc3RpbW9ueSBieSB3aGF0IGhlIGRpZCB0aGF0IG15IG1vdGhlciB3YXMgYW4gQXRoZW5pYW4gYW5kIG9mIGNpdmljCiAgICAgICAgICAgICAgICAgICAgICAgIGJpcnRoLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IHRoZXNlIHN0YXRlbWVudHMgb2YgbWluZQogICAgICAgICAgICAgICAgICAgIGFyZSB0cnVlLCBjYWxsIGZpcnN0LCBwbGVhc2UsIHRoZSBzb25zIG9mIFByb3RvbWFjaHVzLCBhbmQgbmV4dCB0aGUgd2l0bmVzc2VzCiAgICAgICAgICAgICAgICAgICAgd2hvIHdlcmUgcHJlc2VudCB3aGVuIG15IG1vdGhlciB3YXMgYmV0cm90aGVkIHRvIG15IGZhdGhlciwgYW5kIGZyb20gdGhlIG1lbWJlcnMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgY2xhbiB0aGUga2luc2ZvbGsgdG8gd2hvbSBteSBmYXRoZXIgZ2F2ZSB0aGUgbWFycmlhZ2UtZmVhc3QgaW4gaG9ub3Igb2YKICAgICAgICAgICAgICAgICAgICBteSBtb3RoZXIuIEFmdGVyIHRoZW0gY2FsbCBFdW5pY3VzIG9mIENob2xhcmd1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2hvbGFyZ3VzLCBhIGRlbWUgb2YgdGhlIHRyaWJlIEFjYW1hbnRpcy48L25vdGU+IHdobyByZWNlaXZlZCBteSBzaXN0ZXIgaW4KICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZSBmcm9tIFByb3RvbWFjaHVzLCBhbmQgdGhlbiBteSBzaXN0ZXIncyBzb24uIENhbGwgdGhlbS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['57.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V291bGQgbm90IG15CiAgICAgICAgICAgICAgICAgICAgbG90LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBiZSBtb3JlIHBpdGVvdXMKICAgICAgICAgICAgICAgICAgICB0aGFuIHRoYXQgb2YgYW55IG90aGVyLCBpZiwgd2hlbiBhbGwgdGhpcyBob3N0IG9mIHdpdG5lc3NlcyBkZXBvc2VzIGFuZCBzd2VhcnMKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgYXJlIG9mIG15IGtpbiwgYW5kIHdoZW4gbm8gb25lIGRpc3B1dGVzIHRoZSBjaXRpemVuc2hpcCBvZiBhbnkgb25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlc2UsIHlvdSBzaG91bGQgdm90ZSB0aGF0IEkgYW0gYW4gYWxpZW4/PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2UsCiAgICAgICAgICAgICAgICAgICAgcGxlYXNlLCBhbHNvIHRoZSBkZXBvc2l0aW9uIG9mIENsZWluaWFzIGFuZCB0aGF0IG9mIGhpcyByZWxhdGl2ZXM7IGZvciB0aGV5LCBJCiAgICAgICAgICAgICAgICAgICAgcHJlc3VtZSwga25vdyB3aG8gbXkgbW90aGVyIHdhcyB3aG8gb25jZSBzZXJ2ZWQgYXMgaGlzIG51cnNlLiBUaGVpciBvYXRoCiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZXMgdGhlbSB0byBiZWFyIHdpdG5lc3MsIG5vdCB0byB3aGF0IEkgc2F5IHRvZGF5LCBidXQgdG8gd2hhdCB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICBhbHdheXMga25vd24gcmVnYXJkaW5nIGhlciB3aG8gd2FzIHJlcHV0ZWQgdG8gYmUgbXkgbW90aGVyIGFuZCB0aGUgbnVyc2Ugb2YKICAgICAgICAgICAgICAgICAgICBDbGVpbmlhcy4gPC90cmFuc2xhdGlvbj4="
translation['57.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZXZlbiBpZiBhIG51cnNlIGlzIGEgbG93bHkKICAgICAgICAgICAgICAgICAgICB0aGluZywgSSBkbyBub3Qgc2h1biB0aGUgdHJ1dGguIEZvciBpdCBpcyBub3Qgb3VyIGJlaW5nIHBvb3IgdGhhdCB3b3VsZCBtYXJrIHVzCiAgICAgICAgICAgICAgICAgICAgYXMgd3JvbmctZG9lcnMsIGJ1dCBvdXIgbm90IGJlaW5nIGNpdGl6ZW5zOyBhbmQgdGhlIHByZXNlbnQgdHJpYWwgaGFzIHRvIGRvLCBub3QKICAgICAgICAgICAgICAgICAgICB3aXRoIG91ciBmb3J0dW5lIG9yIG91ciBtb25leSwgYnV0IHdpdGggb3VyIGRlc2NlbnQuIE1hbnkgYXJlIHRoZSBzZXJ2aWxlIGFjdHMKICAgICAgICAgICAgICAgICAgICB3aGljaCBmcmVlIG1lbiBhcmUgY29tcGVsbGVkIGJ5IHBvdmVydHkgdG8gcGVyZm9ybSwgYW5kIGZvciB0aGVzZSB0aGV5IHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHBpdGllZCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgcmF0aGVyIHRoYW4KICAgICAgICAgICAgICAgICAgICBiZSBicm91Z2h0IGFsc28gdG8gdXR0ZXIgcnVpbi4gRm9yLCBhcyBJIGFtIGluZm9ybWVkLCBtYW55IHdvbWVuIGhhdmUgYmVjb21lCiAgICAgICAgICAgICAgICAgICAgbnVyc2VzIGFuZCBsYWJvcmVycyBhdCB0aGUgbG9vbSBvciBpbiB0aGUgdmluZXlhcmRzIG93aW5nIHRvIHRoZSBtaXNmb3J0dW5lcyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBjaXR5IGluIHRob3NlIGRheXMsIHdvbWVuIG9mIGNpdmljIGJpcnRoLCB0b287IGFuZCBtYW55IHdobyB3ZXJlIHBvb3IgdGhlbgogICAgICAgICAgICAgICAgICAgIGFyZSBub3cgcmljaC4gSG93ZXZlciwgSSBzaGFsbCBzcGVhayBvZiB0aGVzZSBtYXR0ZXJzIGJ5IGFuZCBieS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIHRoZSBtb21lbnQsIHBsZWFzZSBjYWxsIHRoZSB3aXRuZXNzZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCB0aGVuLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgSSBhbSBhIGNpdGl6ZW4gb24gYm90aCBteSBtb3RoZXIncyBhbmQgbXkgZmF0aGVyJ3Mgc2lkZSB5b3UgaGF2ZSBhbGwgbGVhcm5lZCwKICAgICAgICAgICAgICAgICAgICBwYXJ0bHkgZnJvbSB0aGUgdGVzdGltb255IHdoaWNoIGhhcyBqdXN0IGJlZW4gZ2l2ZW4gYW5kIHBhcnRseSBmcm9tIHRoYXQKICAgICAgICAgICAgICAgICAgICBwcmV2aW91c2x5IGdpdmVuIHJlZ2FyZGluZyBteSBmYXRoZXIuIEl0IHJlbWFpbnMgZm9yIG1lIHRvIHNwZWFrIHRvIHlvdSBhYm91dAogICAgICAgICAgICAgICAgICAgIG15c2VsZuKAlGFuZCBteSBzdGF0ZW1lbnQgaXMsIEkgdGhpbmssIHRoZSBzaW1wbGVzdCBhbmQgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICByZWFzb25hYmxl4oCULCB0aGF0LCBzaW5jZSBJIGFtIG9mIGNpdmljIGJpcnRoIG9uIHRoZSBzaWRlIG9mIGJvdGgKICAgICAgICAgICAgICAgICAgICBwYXJlbnRzIGFuZCBoYXZlIHNoYXJlZCBieSBpbmhlcml0YW5jZSBib3RoIHRoZSBwcm9wZXJ0eSBhbmQgdGhlIGZhbWlseSwgSSBhbSBhCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbi4gTmV2ZXJ0aGVsZXNzIEkgd2lsbCBwcm9kdWNlIHdpdG5lc3NlcyB0byBlc3RhYmxpc2ggYWxzbyBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlcyB3aGljaCBiZWZpdCBhIGNpdGl6ZW7igJR0aGF0IEkgd2FzIGluZHVjdGVkIGludG8gdGhlIGNsYW4sCiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIHdhcyBlbnJvbGxlZCBvbiB0aGUgcmVnaXN0ZXIgb2YgdGhlIGRlbWVzbWVuLCB0aGF0IGJ5IHRoZXNlIG1lbgogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgSSB3YXMgbm9taW5hdGVkIGFtb25nIHRoZSBub2JsZXN0LWJvcm4gdG8gZHJhdyBsb3RzIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBwcmllc3Rob29kIG9mIEhlcmFjbGVzLCBhbmQgdGhhdCBJIHBhc3NlZCB0aGUgc2NydXRpbnkgYW5kIGhlbGQKICAgICAgICAgICAgICAgICAgICAgICAgb2ZmaWNlcy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q2FsbCB0aGVtLCBwbGVhc2UuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXMgaXQgbm90IGFuCiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZSwgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0LCB3aGVyZWFzLCBpZiBJIGhhZCBiZWVuIGNob3NlbiBieSBsb3QgYXMgcHJpZXN0LAogICAgICAgICAgICAgICAgICAgIGV2ZW4gYXMgSSBoYWQgYmVlbiBub21pbmF0ZWQsIGl0IHdvdWxkIGhhdmUgYmVlbiBteSBkdXR5IHRvIG9mZmVyIHNhY3JpZmljZSBvbgogICAgICAgICAgICAgICAgICAgIGJlaGFsZiBvZiB0aGVzZSBwZW9wbGUsIGFuZCBFdWJ1bGlkZXMgd291bGQgaGF2ZSBoYWQgdG8gam9pbiBpbiB0aGUgc2FjcmlmaWNlCiAgICAgICAgICAgICAgICAgICAgd2l0aCBtZSzigJRpcyBpdCBub3QgYW4gb3V0cmFnZSwgSSBhc2ssIHRoYXQgdGhlc2Ugc2FtZSBwZW9wbGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IGFsbG93IG1lIGV2ZW4gdG8gc2hhcmUgaW4gdGhlIHNhY3JpZmljZXMgd2l0aCB0aGVtPyBJdCBpcyBwbGFpbiwgdGhlbiwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IGluIGFsbCBwcmV2aW91cyB0aW1lCiAgICAgICAgICAgICAgICAgICAgSSBoYXZlIGJlZW4gYWNrbm93bGVkZ2VkIGFzIGEgY2l0aXplbiBieSBhbGwgdGhvc2Ugd2hvIG5vdyBhY2N1c2UgbWU7IDwvdHJhbnNsYXRpb24+"
translation['57.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5mb3Igc3VyZWx5IEV1YnVsaWRlcyB3b3VsZCBuZXZlciBoYXZlIHN1ZmZlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIGZvcmVpZ25lciBvciByZXNpZGVudCBhbGllbiwgYXMgaGUgbm93IGNhbGxzIG1lLCBlaXRoZXIgdG8gaG9sZCBvZmZpY2VzIG9yIHRvCiAgICAgICAgICAgICAgICAgICAgZHJhdyBsb3RzIHdpdGggaGltc2VsZiBhcyBhIG5vbWluZWUgZm9yIHRoZSBwcmllc3Rob29kOyBmb3IgaGUgdG9vIHdhcyBvbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgbm9taW5lZXMgd2hvIGRyZXcgbG90cy4gTm9yLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBzZWVpbmcgdGhhdCBoZSBpcyBhbiBvbGQgZW5lbXkgb2YgbWluZSwgd291bGQgaGUgaGF2ZQogICAgICAgICAgICAgICAgICAgIHdhaXRlZCBmb3IgdGhlIHByZXNlbnQgb3Bwb3J0dW5pdHksIHdoaWNoIG5vIG9uZSBjb3VsZCBmb3Jlc2VlLCBpZiBoZSBoYWQga25vd24KICAgICAgICAgICAgICAgICAgICBhbnkgc3VjaCBmYWN0cyByZWdhcmRpbmcgbWUuIEJ1dCBoZSBkaWQgbm90IGtub3cgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['57.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5TbywgdGhlbiwgYWx0aG91Z2ggaGUgY29udGludWVkIHRocm91Z2hvdXQgYWxsIHRoZSBwYXN0IHRvCiAgICAgICAgICAgICAgICAgICAgYWN0IGFzIGEgbWVtYmVyIG9mIHRoZSBkZW1lIGFuZCB0byBkcmF3IGxvdHMgZm9yIG9mZmljZXMgdG9nZXRoZXIgd2l0aCBtZQogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgc2VlaW5nIGFueSBvZiB0aGVzZSBvYmplY3Rpb25zLCB5ZXQsIHdoZW4gdGhlIHdob2xlIGNpdHkgd2FzIHJvdXNlZCB0bwogICAgICAgICAgICAgICAgICAgIHNoYXJwIGluZGlnbmF0aW9uIGFnYWluc3QgdGhvc2Ugd2hvIGhhZCByZWNrbGVzc2x5IGZvcmNlZCB0aGVpciB3YXkgaW50byB0aGUKICAgICAgICAgICAgICAgICAgICBkZW1lcywgdGhlbiwgYW5kIG5vdCB0aWxsIHRoZW4sIGhlIGxhaWQgaGlzIHBsb3RzLiBUaGUgZWFybGllciB0aW1lIHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBzdWl0ZWQgb25lIHdobyB3YXMgY29udmluY2VkIG9mIHRoZSB0cnV0aCBvZiBoaXMgY2hhcmdlczsgYnV0IHRoZSBwcmVzZW50IHN1aXRzCiAgICAgICAgICAgICAgICAgICAgYW4gZW5lbXkgYW5kIG9uZSB3aG8gd2lsbCBzdG9vcCB0byBtYWxpY2lvdXMgcGV0dGlmb2dnZXJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['57.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbXkgb3duIHBhcnQsIG1lbiBvZiB0aGUganVyeSDvvIhhbmQgSSBiZWcgeW91IGJ5CiAgICAgICAgICAgICAgICAgICAgWmV1cyBhbmQgdGhlIGdvZHMsIGxldCBubyBvbmUgbWFrZSBhbiBvdXRjcnkgb3IgYmUgdmV4ZWQgYXQgd2hhdCBJIGFtIGdvaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgc2F577yJLCBJIGhvbGQgbXlzZWxmIHRvIGJlIGFuIEF0aGVuaWFuIG9uIHRoZSBzYW1lIGdyb3VuZHMgb24gd2hpY2ggZWFjaAogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB5b3UgaG9sZHMgaGltc2VsZiB0byBiZSBvbmUsIGhhdmluZyBmcm9tIHRoZSBmaXJzdCByZWdhcmRlZCBhcyBteSBtb3RoZXIKICAgICAgICAgICAgICAgICAgICBoZXIgd2hvbSBJIHJlcHJlc2VudCBhcyBzdWNoIHRvIHlvdSwgYW5kIG5vdCBwcmV0ZW5kaW5nIHRvIGJlIGhlcnMgd2hpbGUgcmVhbGx5CiAgICAgICAgICAgICAgICAgICAgYmVsb25naW5nIHRvIGFub3RoZXI7IGFuZCBpbiByZWdhcmQgdG8gbXkgZmF0aGVyIHRoZSBjYXNlIGlzIHRoZSBzYW1lLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['57.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQsIGlmIGluIHRoZSBjYXNlIG9mIHRob3NlIHdobyBhcmUKICAgICAgICAgICAgICAgICAgICBwcm92ZWQgdG8gaGF2ZSBoaWRkZW4gdGhlaXIgcmVhbCBwYXJlbnRhZ2UgYW5kIGxhaWQgY2xhaW0gdG8gYSBmYWxzZSBvbmUsIHlvdQogICAgICAgICAgICAgICAgICAgIHJpZ2h0bHkgaG9sZCB0aGlzIHRvIGJlIGEgcHJvb2YgdGhhdCB0aGV5IGFyZSBhbGllbnMsIHN1cmVseSBpbiBteSBjYXNlIHRoZQogICAgICAgICAgICAgICAgICAgIG9wcG9zaXRlIHNob3VsZCBwcm92ZSB0aGF0IEkgYW0gYSBjaXRpemVuLiBGb3IgaW4gY2xhaW1pbmcgdGhlIHJpZ2h0cyBvZgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zaGlwIEkgc2hvdWxkIG5ldmVyIGhhdmUgaW5zY3JpYmVkIG15c2VsZiBhcyB0aGUgc29uIG9mIHBhcmVudHMgd2hvIHdlcmUKICAgICAgICAgICAgICAgICAgICBib3RoIGZvcmVpZ25lcnMsIGJ1dCwgaWYgSSBoYWQga25vd24gYW55IHN1Y2ggdGhpbmcsIEkgc2hvdWxkIGhhdmUgc291Z2h0IG91dAogICAgICAgICAgICAgICAgICAgIHBlcnNvbnMgdG8gY2xhaW0gYXMgbXkgcGFyZW50cy4gQnV0IEkga25ldyBub3RoaW5nIG9mIHRoZSBzb3J0LCBhbmQgc28sIGhvbGRpbmcKICAgICAgICAgICAgICAgICAgICBmYXN0IHRvIHRob3NlIHdobyBhcmUgbXkgcmVhbCBwYXJlbnRzLCBJIGNsYWltIEF0aGVuaWFuIGNpdGl6ZW5zaGlwLiA8L3RyYW5zbGF0aW9uPg=="
translation['57.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4sIEkgd2FzIGxlZnQgYW4KICAgICAgICAgICAgICAgICAgICBvcnBoYW47IGFuZCB5ZXQgdGhleSBzYXkgdGhhdCBJIGFtIHJpY2ggYW5kIHRoYXQgc29tZSBvZiB0aGUgd2l0bmVzc2VzIHRlc3RpZnkKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgYXJlIG15IHJlbGF0aXZlcyBiZWNhdXNlIHRoZXkgcmVjZWl2ZSBoZWxwIGZyb20gbWUuIFRoZXkgdGF1bnQgbWUgd2l0aAogICAgICAgICAgICAgICAgICAgIG15IHBvdmVydHkgYW5kIG1ha2UgbXkgYmlydGggYSByZXByb2FjaCwgYnV0IGF0IHRoZSBzYW1lIHRpbWUgdGhleSBhc3NlcnQgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgYW0gcmljaCBlbm91Z2ggdG8gYnV5IGFueXRoaW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['57.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB3aGljaAogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCwgdGhlbiwgaXMgb25lIHRvIGJlbGlldmUgdGhlbT8gSXQgc3VyZWx5IHdvdWxkIGhhdmUgYmVlbiB0aGVpciByaWdodCwKICAgICAgICAgICAgICAgICAgICBpZiBJIGhhZCBiZWVuIGlsbGVnaXRpbWF0ZSBvciBhbiBhbGllbiwgdG8gaW5oZXJpdCBhbGwgbXkgcHJvcGVydHkuIERvIHRoZXkKICAgICAgICAgICAgICAgICAgICBwcmVmZXIsIHRoZW4sIHRvIHRha2UgYSBsaXR0bGUgYW5kIGplb3BhcmRpemUgdGhlbXNlbHZlcyBieSBnaXZpbmcgZmFsc2UKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnkgYW5kIHRvIGNvbW1pdCBwZXJqdXJ5LCByYXRoZXIgdGhhbiB0byB0YWtlIGV2ZXJ5dGhpbmcsIGFuZCB0aGF0IHdpdGgKICAgICAgICAgICAgICAgICAgICBzYWZldHksIHdpdGhvdXQgaGF2aW5nIGludm9rZWQgYSBjdXJzZSB1cG9uIHRoZWlyIG93biBoZWFkcz8gVGhpcyBpcyBub3QgdGhlCiAgICAgICAgICAgICAgICAgICAgY2FzZS4gTm87IGluIG15IG9waW5pb24sIHNlZWluZyB0aGF0IHRoZXkgYXJlIG15IHJlbGF0aXZlcywgdGhleSBhcmUgYnV0IGRvaW5nCiAgICAgICAgICAgICAgICAgICAgd2hhdCBpcyByaWdodCBpbiBhaWRpbmcgb25lIG9mIHRoZW1zZWx2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['57.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBub3QgZG9pbmcgdGhpcyBhdCB0aGlzIHRpbWUgYmVjYXVzZSBJIGhhdmUgaW5kdWNlZCB0aGVtIHRvIGRvIHNvOyBvbgogICAgICAgICAgICAgICAgICAgIHRoZSBjb250cmFyeSwgd2hlbiBJIHdhcyBhIGNoaWxkIHRoZXkgYXQgb25jZSB0b29rIG1lIHRvIHRoZSBjbGFuc21lbiwgdGhleSB0b29rCiAgICAgICAgICAgICAgICAgICAgbWUgdG8gdGhlIHRlbXBsZSBvZiBBcG9sbG8gb3VyIGFuY2VzdHJhbCBnb2QsIGFuZCB0byB0aGUgb3RoZXIgc2FjcmVkIHBsYWNlcy4KICAgICAgICAgICAgICAgICAgICBBbmQgeWV0IEkgcHJlc3VtZSB0aGF0IGFzIGEgY2hpbGQgSSBkaWQgbm90IGluZHVjZSB0aGVzZSBtZW4gdG8gZG8gdGhpcyBieQogICAgICAgICAgICAgICAgICAgIGdpdmluZyB0aGVtIG1vbmV5LiBObzsgbXkgZmF0aGVyIGhpbXNlbGYsIHdoaWxlIGhlIHN0aWxsIGxpdmVkLCBzd29yZSB0aGUKICAgICAgICAgICAgICAgICAgICBjdXN0b21hcnkgb2F0aCBhbmQgaW50cm9kdWNlZCBtZSB0byB0aGUgY2xhbnNtZW4sIGtub3dpbmcgdGhhdCBJIHdhcyBhbgogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuLCBib3JuIG9mIGFuIEF0aGVuaWFuIG1vdGhlciwgbGF3ZnVsbHkgYmV0cm90aGVkIHRvIGhpbXNlbGY7IGFuZCB0aGVzZQogICAgICAgICAgICAgICAgICAgIGZhY3RzIGhhdmUgYmVlbiBlc3RhYmxpc2hlZCBieSB0ZXN0aW1vbnkuIDwvdHJhbnNsYXRpb24+"
translation['57.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW0gSSwgdGhlbiwgYW4gYWxpZW4/IFdoZXJlIGhhdmUgSSBwYWlkIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc2lkZW50IGFsaWVuJ3MgdGF4Pzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BbGllbnMgcmVzaWRlbnQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBwYWlkIGEgdGF4IG9mIDEyCiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWNobWFlIGFubnVhbGx5Ljwvbm90ZT4gT3Igd2hhdCBtZW1iZXIgb2YgbXkgZmFtaWx5IGhhcyBldmVyIHBhaWQgaXQ/IEhhdmUKICAgICAgICAgICAgICAgICAgICBJIGV2ZXIgZ29uZSB0byB0aGUgbWVtYmVycyBvZiBhbm90aGVyIGRlbWUgYW5kLCBiZWNhdXNlIEkgY291bGQgbm90IGluZHVjZSB0aGVtCiAgICAgICAgICAgICAgICAgICAgdG8gYWNjZXB0IG1lLCBnb3QgbXlzZWxmIHJlZ2lzdGVyZWQgaW4gdGhpcyBvbmU/IEhhdmUgSSBkb25lIGFueSBvZiB0aGUgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggYWxsIHRob3NlIHdobyBhcmUgbm90IGdlbnVpbmUgY2l0aXplbnMgYXJlIHByb3ZlZCB0byBoYXZlIGRvbmU/IENlcnRhaW5seQogICAgICAgICAgICAgICAgICAgIG5vdC4gTm87IGluIGEgd29yZCBJIG1hbmlmZXN0bHkgaGF2ZSBsaXZlZCBhcyBhIG1lbWJlciBvZiB0aGUgZGVtZSBhbW9uZyB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIHBlb3BsZSBhbW9uZyB3aG9tIG15IGZhdGhlcidzIGdyYW5kZmF0aGVyLCBteSBvd24gZ3JhbmRmYXRoZXIsIGFuZCBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBoaW1zZWxmIGxpdmVkLiBBbmQgbm93LCBob3cgY291bGQgYW55b25lIHByb3ZlIHRvIHlvdSBtb3JlIGNvbnZpbmNpbmdseQogICAgICAgICAgICAgICAgICAgIHRoYW4gSSBoYXZlIGRvbmUgdGhhdCBoZSBpcyBlbnRpdGxlZCB0byB0aGUgcmlnaHRzIG9mIGNpdGl6ZW5zaGlwPyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gcGFpZCBhIHRheCBvZiAxMgogICAgICAgICAgICAgICAgICAgICAgICBkcmFjaG1hZSBhbm51YWxseS48L3RyYW5zbGF0aW9uPg=="
translation['57.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5MZXQgZWFjaCBvbmUgb2YgeW91IGNvbnNpZGVyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpbiB3aGF0IG90aGVyIHdheSBoZSBjb3VsZCBwcm92ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgcGVvcGxlIGFyZSBoaXMga2luc21lbiB0aGFuIGluIHRoZSB3YXkgaW4gd2hpY2ggSSBoYXZlIHByb3ZlZAogICAgICAgICAgICAgICAgICAgIGl04oCUYnkgaGF2aW5nIHRoZW0gZ2l2ZSB0ZXN0aW1vbnkgdW5kZXIgb2F0aCBhbmQgc2hvd2luZyB0aGF0IHRoZXkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGFsd2F5cyBiZWVuIG15IGtpbnNtZW4gZnJvbSB0aGUgYmVnaW5uaW5nLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBpcwogICAgICAgICAgICAgICAgICAgIGZvciB0aGVzZSByZWFzb25zIHRoYXQgSSBoYXZlIGNvbmZpZGVuY2UgaW4gbXkgY2FzZSBhbmQgaGF2ZSBjb21lIHRvIHlvdSBmb3IKICAgICAgICAgICAgICAgICAgICBwcm90ZWN0aW9uLiBGb3IgSSBzZWUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgdGhlIGRlY2lzaW9ucyBvZiB5b3VyIGNvdXJ0cyBhcmUgbW9yZSB2YWxpZCBub3Qgb25seQogICAgICAgICAgICAgICAgICAgIHRoYW4gdGhvc2Ugb2YgdGhlIEhhbGltdXNpYW5zIHdobyBoYXZlIGV4cGVsbGVkIG1lLCBidXQgbW9yZSB2YWxpZCBldmVuIHRoYW4KICAgICAgICAgICAgICAgICAgICB0aG9zZSBvZiB0aGUgc2VuYXRlIGFuZCB0aGUgcG9wdWxhciBhc3NlbWJseTsgYW5kIGp1c3RseSBzbzsgZm9yIGluIGFsbCByZXNwZWN0cwogICAgICAgICAgICAgICAgICAgIHRoZSB2ZXJkaWN0cyBvZiB5b3VyIGNvdXJ0cyBhcmUgbW9zdCBqdXN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['57.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVmbGVjdCB1cG9uIHRoaXMgYWxzbywgYWxsIHlvdSB3aG8gYmVsb25nCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGxhcmdlIGRlbWVzLCB0aGF0IHlvdSBhcmUgbm90IHdvbnQgdG8gZGVwcml2ZSBhbnkgbWFuIG9mIGhpcyByaWdodCBvZgogICAgICAgICAgICAgICAgICAgIGFjY3VzYXRpb24gYW5kIGRlZmVuY2UuIEFuZCBJIGludm9rZSBtYW55IGJsZXNzaW5ncyB1cG9uIHRoZSBoZWFkcyBvZiBhbGwgb2YgeW91CiAgICAgICAgICAgICAgICAgICAgd2hvIGhhdmUgZGVhbHQgZmFpcmx5IHdpdGggdGhpcyBtYXR0ZXIsIGJlY2F1c2UgeW91IGRpZCBub3QgZGVwcml2ZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0eSB0byBwcmVwYXJlIHRoZWlyIGNhc2UgdGhvc2Ugd2hvIGFza2VkIGZvciBhIGRlbGF5LiBCeSB0YWtpbmcgdGhpcwogICAgICAgICAgICAgICAgICAgIGNvdXJzZSB5b3UgZXhwb3NlZCB0aGUgcGV0dGlmb2dnZXJzIGFuZCB0aG9zZSB3aG8gd2VyZSBtYWxpY2lvdXNseSBzY2hlbWluZwogICAgICAgICAgICAgICAgICAgIGFnYWluc3Qgb3RoZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['57.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgYXJlIGRlc2VydmluZyBvZiBwcmFpc2UKICAgICAgICAgICAgICAgICAgICBmb3IgdGhpcywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjsgYnV0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgYXJlIHRvIGJlIGJsYW1lZCB3aG8gaGF2ZSBtaXN1c2VkIGEgcHJvY2VkdXJlIHRoYXQgd2FzIGJvdGggYWRtaXJhYmxlIGFuZCBqdXN0LgogICAgICAgICAgICAgICAgICAgIEluIG5vIG90aGVyIG9mIHRoZSBkZW1lcyB3aWxsIHlvdSBmaW5kIHRoYXQgbW9yZSBvdXRyYWdlb3VzIHRoaW5ncyBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBkb25lIHRoYW4gaW4gb3Vycy4gT2YgYnJvdGhlcnMgYm9ybiBvZiB0aGUgc2FtZSBtb3RoZXIgYW5kIHRoZSBzYW1lIGZhdGhlciB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBleHBlbGxlZCBzb21lIGFuZCByZXRhaW5lZCBvdGhlcnMsIGFuZCB0aGV5IGhhdmUgZXhwZWxsZWQgZWxkZXJseSBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBzbGVuZGVyIG1lYW5zLCB3aGlsZSB0aGV5IGhhdmUgbGVmdCB0aGVpciBzb25zIG9uIHRoZSBsaXN0IG9mIGRlbWVzbWVuOyBhbmQgdG8KICAgICAgICAgICAgICAgICAgICBwcm92ZSB0aGVzZSB0aGluZ3MgSSB3aWxsIGNhbGwgd2l0bmVzc2VzLCBpZiB5b3Ugd2lzaC4gPC90cmFuc2xhdGlvbj4="
translation['57.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeW91IG11c3QgaGVhciB0aGUgbW9zdCBvdXRyYWdlb3VzIHRoaW5nIHdoaWNoIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgY29uc3BpcmF0b3JzIGhhdmUgZG9uZSDvvIhhbmQgSSBiZWcgeW91IGluIHRoZSBuYW1lIG9mIFpldXMgYW5kIHRoZSBnb2RzLAogICAgICAgICAgICAgICAgICAgIGxldCBubyBvbmUgb2YgeW91IGJlIG9mZmVuZGVkIGlmIEkgc2hvdyB0aGUgcmFzY2FsaXR5IG9mIHRoZXNlIG1lbiB3aG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHdyb25nZWQgbWUuIEZvciBJIGhvbGQgdGhhdCBpbiBzaG93aW5nIHdoYXQgc2NvdW5kcmVscyB0aGV5IGFyZSBJIGFtIHNwZWFraW5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCBwcmVjaXNlIHJlZmVyZW5jZSB0byB0aGUgZXhwZXJpZW5jZSB3aGljaCBoYXMgYmVmYWxsZW4gbWXvvIkuIEZvciwKICAgICAgICAgICAgICAgICAgICB5b3UgbXVzdCBrbm93LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hlbiBjZXJ0YWluIGFsaWVucywgQW5heGltZW5lcyBhbmQgTmljb3N0cmF0dXMsIHdpc2hlZCB0byBiZWNvbWUgY2l0aXplbnMsCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugc2NvdW5kcmVscyBhZG1pdHRlZCB0aGVtIGZvciBhIHN1bSBvZiBtb25leSwgd2hpY2ggdGhleSBkaXZpZGVkIGFtb25nCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcywgcmVjZWl2aW5nIGZpdmUgZHJhY2htYWUgYXBpZWNlLiBFdWJ1bGlkZXMgYW5kIGhpcyBjbGlxdWUgd2lsbCBub3QKICAgICAgICAgICAgICAgICAgICBkZW55IG9uIG9hdGggdGhhdCB0aGV5IGhhdmUga25vd2xlZGdlIG9mIHRoaXM7IGFuZCBub3cgaW4gdGhpcyBsYXN0IHJldmlzaW9uCiAgICAgICAgICAgICAgICAgICAgdGhleSBkaWQgbm90IGV4cGVsIHRoZXNlIG1lbi4gRG8geW91IHRoaW5rLCB0aGVuLCB0aGF0IHRoZXJlIGlzIGFueXRoaW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IHdvdWxkIG5vdCBkbyBpbiBwcml2YXRlLCBzZWVpbmcgdGhhdCBpbiBhIHB1YmxpYyBtYXR0ZXIgdGhleSBkYXJlZCB0aGlzPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['57.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBhcmUgbWFueSBwZW9wbGUgaW5kZWVkLCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgd2hvbSBFdWJ1bGlkZXMgYW5kIGhpcyBjbGlxdWUgaGF2ZSBkZXN0cm95ZWQgb3IgaGF2ZSBzYXZlZCBmb3IgbW9uZXkuIEZvcgogICAgICAgICAgICAgICAgICAgIGV2ZW4gYXQgYW4gZWFybGllciB0aW1lIO+8iGFuZCBteSB3b3JkcyBzaGFsbCBiZWFyIHVwb24gdGhlIG1hdHRlciBpbgogICAgICAgICAgICAgICAgICAgIGhhbmQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT7vvIkKICAgICAgICAgICAgICAgICAgICBBbnRpcGhpbHVzLCB0aGUgZmF0aGVyIG9mIEV1YnVsaWRlcywgd2hlbiBoZSB3YXMgcHJlZmVjdCBvZiB0aGUgZGVtZSwgYXMgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdG9sZCB5b3UsIG1hZGUgdXNlIG9mIHRyaWNrZXJ5IGluIGhpcyBkZXNpcmUgdG8gZ2V0IG1vbmV5IGZyb20gY2VydGFpbiBwZXJzb25zLAogICAgICAgICAgICAgICAgICAgIGFuZCBhc3NlcnRlZCB0aGF0IGhlIGhhZCBsb3N0IHRoZSBwdWJsaWMgcmVnaXN0ZXI7IGFuZCBoZSB0aGVyZWJ5IGluZHVjZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgSGFsaW11c2lhbnMgdG8gcmV2aXNlIHRoZWlyIGxpc3Qgb2YgbWVtYmVycywgZGVub3VuY2VkIHRlbiBvZiB0aGVpciBudW1iZXIsIGFuZAogICAgICAgICAgICAgICAgICAgIGhhZCB0aGVtIGV4cGVsbGVkOyBhbGwgb2Ygd2hvbSB3aXRoIG9uZSBleGNlcHRpb24gdGhlIGNvdXJ0IG9mIGp1c3RpY2UgcmVzdG9yZWQuCiAgICAgICAgICAgICAgICAgICAgVGhlc2UgZmFjdHMgYWxsIHRoZSBvbGRlciBvbmVzIGtub3cuIDwvdHJhbnNsYXRpb24+"
translation['57.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcwogICAgICAgICAgICAgICAgICAgIHVubGlrZWx5IGluZGVlZCB0aGF0IHRoZXkgbGVmdCBvbiB0aGUgbGlzdCBhbnkgd2hvIHdlcmUgbm90IEF0aGVuaWFucywgd2hlbiB0aGV5CiAgICAgICAgICAgICAgICAgICAgY29uc3BpcmVkIHRvIGV4cGVsIGV2ZW4gbWVuIHdobyB3ZXJlIGNpdGl6ZW5zLCB3aG9tIHRoZSBjb3VydCByZXN0b3JlZC4gQW5kCiAgICAgICAgICAgICAgICAgICAgYWx0aG91Z2ggaGUgd2FzIGEgcGVyc29uYWwgZW5lbXkgb2YgbXkgZmF0aGVyIGF0IHRoZSB0aW1lLCBFdWJ1bGlkZXMgbm90IG9ubHkKICAgICAgICAgICAgICAgICAgICBkaWQgbm90IGRlbm91bmNlIGhpbSwgYnV0IGRpZCBub3QgZXZlbiBjYXN0IGhpcyB2b3RlIHRoYXQgaGUgd2FzIG5vdCBhbgogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuLiBIb3cgaXMgdGhpcyBwcm92ZWQ/IEJlY2F1c2UgbXkgZmF0aGVyIHdhcyBkZWNsYXJlZCBieSBhbGwgdGhlIHZvdGVzIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgYSBtZW1iZXIgb2YgdGhlIGRlbWUuIEJ1dCB3aGF0IG5lZWQgaXMgdGhlcmUgdG8gc3BlYWsgb2Ygb3VyIGZhdGhlcnM/CiAgICAgICAgICAgICAgICAgICAgRXVidWxpZGVzIGhpbXNlbGYsIHdoZW4gSSB3YXMgZW50ZXJlZCBvbiB0aGUgcmVnaXN0ZXIgYW5kIGFsbCB0aGUgZGVtZXNtZW4gYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB0YWtpbmcgdGhlIG9hdGggY2FzdCB0aGVpciB2b3RlcyByZWdhcmRpbmcgbWUgYXMgdGhlIGxhdyBwcmVzY3JpYmVzLCBuZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgZGVub3VuY2VkIG1lIG5vciBjYXN0IGhpcyB2b3RlIGFnYWluc3QgbWU7IGZvciBpbiB0aGlzIGNhc2UgYWdhaW4gdGhleSBhbGwgdm90ZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgd2FzIGEgbWVtYmVyIG9mIHRoZSBkZW1lLiBBbmQsIGlmIHRoZXkgc2F5IHRoYXQgSSBhbSBseWluZyBhYm91dCB0aGlzLAogICAgICAgICAgICAgICAgICAgIGxldCBhbnlvbmUgd2hvIHdpc2hlcyBnaXZlIGV2aWRlbmNlIHRvIHRoZSBjb250cmFyeSBpbiB0aGUgdGltZSBhbGxvdHRlZCB0byBtZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgdGhlbiwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgbXkgb3Bwb25lbnRzIHNlZW0gdG8gaGF2ZSBhIHZlcnkKICAgICAgICAgICAgICAgICAgICBzdHJvbmcgYXJndW1lbnQgaW4gdGhlIGZhY3QgdGhhdCBpbiB0aGUgcHJlc2VudCBpbnN0YW5jZSB0aGUgZGVtZXNtZW4gaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlamVjdGVkIG1lLCBJIHBvaW50IG91dCB0byB5b3UgdGhhdCBvbiBmb3VyIHByZXZpb3VzIG9jY2FzaW9ucywgd2hlbiB0aGV5IGdhdmUKICAgICAgICAgICAgICAgICAgICB0aGVpciB2b3RlcyBpbiBhY2NvcmRhbmNlIHdpdGggdGhlaXIgb2F0aHMgd2l0aG91dCBlbnRlcmluZyBpbnRvIGEgY29uc3BpcmFjeSwKICAgICAgICAgICAgICAgICAgICB0aGV5IHZvdGVkIHRoYXQgYm90aCBJIGFuZCBteSBmYXRoZXIgd2VyZSB0aGVpciBmZWxsb3ctZGVtZXNtZW7igJRmaXJzdCwKICAgICAgICAgICAgICAgICAgICB3aGVuIG15IGZhdGhlciBwYXNzZWQgdGhlIHNjcnV0aW55OyBzZWNvbmRseSwgd2hlbiBJIGRpZCBzbzsgdGhlbiwgaW4gdGhlIGZvcm1lcgogICAgICAgICAgICAgICAgICAgIHJldmlzaW9uLCBhZnRlciB0aGVzZSBtZW4gaGFkIG1hZGUgYXdheSB3aXRoIHRoZSByZWdpc3RlcjsgYW5kLCBmaW5hbGx5LCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBub21pbmF0ZWQgbWUgYW1vbmcgdGhlIG5vYmxlc3QtYm9ybiBhbmQgdm90ZWQgdGhhdCBJIHNob3VsZCBkcmF3IGxvdHMgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIHByaWVzdGhvb2Qgb2YgSGVyYWNsZXMuIEFsbCB0aGVzZSBmYWN0cyBoYXZlIGJlZW4gZXN0YWJsaXNoZWQgYnkgdGVzdGltb255LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['57.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgaXQgYmUKICAgICAgICAgICAgICAgICAgICByaWdodCBmb3IgbWUgdG8gc3BlYWsgb2YgbXkgYWRtaW5pc3RyYXRpb24gYXMgcHJlZmVjdCwgYmVjYXVzZSBvZiB3aGljaCBJCiAgICAgICAgICAgICAgICAgICAgaW5jdXJyZWQgdGhlIGFuZ2VyIG9mIG1hbnksIGFuZCBpbiB0aGUgY291cnNlIG9mIHdoaWNoIEkgYmVjYW1lIGludm9sdmVkIGluCiAgICAgICAgICAgICAgICAgICAgcXVhcnJlbHMgYmVjYXVzZSBJIHJlcXVpcmVkIHNvbWUgb2YgdGhlIGRlbWVzbWVuIHRvIHBheSB0aGUgcmVudHMgd2hpY2ggdGhleQogICAgICAgICAgICAgICAgICAgIG93ZWQgZm9yIHNhY3JlZCBsYW5kcyBhbmQgdG8gcmVmdW5kIG90aGVyIHN1bXMgd2hpY2ggdGhleSBoYWQgZW1iZXp6bGVkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgcHVibGljIG1vbmV5cywgSSBzaG91bGQgYmUgdmVyeSBnbGFkIHRvIGhhdmUgeW91IGxpc3RlbiB0byBtZTsgYnV0IHBlcmhhcHMgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBob2xkIHRoYXQgdGhlc2UgbWF0dGVycyBhcmUgZm9yZWlnbiB0byB0aGUgc3ViamVjdCBiZWZvcmUgdXMuIEhvd2V2ZXIsIEkgYW0KICAgICAgICAgICAgICAgICAgICBhYmxlIHRvIHBvaW50IHRvIHRoaXMgYXMgYSBwb3NpdGl2ZSBwcm9vZiBvZiB0aGVpciBjb25zcGlyYWN5LiBGb3IgdGhleSBzdHJ1Y2sKICAgICAgICAgICAgICAgICAgICBvdXQgb2YgdGhlIG9hdGggdGhlIGNsYXVzZSB0aGF0IHRoZXkgd291bGQgdm90ZSBhY2NvcmRpbmcgdG8gdGhlaXIgdW5iaWFzc2VkCiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50IGFuZCB3aXRob3V0IGZhdm9yIG9yIG1hbGljZS4gPC90cmFuc2xhdGlvbj4="
translation['57.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzCiAgICAgICAgICAgICAgICAgICAgYmVjYW1lIGEgbWF0dGVyIG9mIGdlbmVyYWwga25vd2xlZGdlLCBhcyBkaWQgYWxzbyB0aGUgZmFjdCB0aGF0IHRoZSBkZW1lc21lbgogICAgICAgICAgICAgICAgICAgIGZyb20gd2hvbSBJIGhhZCBleGFjdGVkIHJlcGF5bWVudCBvZiB0aGUgcHVibGljIG1vbmV5cyBzd29yZSBhIGNvbnNwaXJhY3kKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IG1lLCBhbmQgYnkgYSBzYWNyaWxlZ2lvdXMgdGhlZnQgc3RvbGUgZnJvbSB0aGUgdGVtcGxlIHRoZSBzaGllbGRzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgSSBoYWQgZGVkaWNhdGVkIHRvIEF0aGVuYSDvvIhmb3IgdGhlIHRydXRoIHNoYWxsIGJlIHRvbGTvvIksIGFuZAogICAgICAgICAgICAgICAgICAgIGNoaXNlbGVkIG91dCB0aGUgZGVjcmVlIHdoaWNoIHRoZSBkZW1lc21lbiBoYWQgcGFzc2VkIGluIG15IGhvbm9yLiBBbmQgdGhleSBoYXZlCiAgICAgICAgICAgICAgICAgICAgY29tZSB0byBzdWNoIGEgcGl0Y2ggb2Ygc2hhbWVsZXNzbmVzcyB0aGF0IHRoZXkgd2VudCBhYm91dCBzYXlpbmcgdGhhdCBJIGhhZAogICAgICAgICAgICAgICAgICAgIGRvbmUgdGhpcyBmb3IgdGhlIHNha2Ugb2YgbXkgZGVmZW5jZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywKICAgICAgICAgICAgICAgICAgICAgICAgYnkgdGhyb3dpbmcgdGhlIG9kaXVtIGZvciB0aGUgYWN0IHVwb24gaGlzIGFkdmVyc2FyaWVzLjwvbm90ZT4gWWV0IHdoYXQgbWFuCiAgICAgICAgICAgICAgICAgICAgYW1vbmcgeW91LCBtZW4gb2YgdGhlIGp1cnksIHdvdWxkIGp1ZGdlIG1lIHNvIHV0dGVybHkgaW5zYW5lIGFzIHRvIGNvbW1pdCBhbiBhY3QKICAgICAgICAgICAgICAgICAgICBwdW5pc2hhYmxlIHdpdGggZGVhdGggaW4gb3JkZXIgdG8gc2VjdXJlIHNvIG1pZ2h0eSBhIGJpdCBvZiBldmlkZW5jZSBmb3IgbXkKICAgICAgICAgICAgICAgICAgICBjYXNlLCBhbmQgdGhlbiBteXNlbGYgdG8gZGVzdHJveSBhbiBpbnNjcmlwdGlvbiB3aGljaCBicm91Z2h0IG1lIGhvbm9yPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['57.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIG1vc3Qgb3V0cmFnZW91cyBhY3Qgb2YgYWxsIEkgZmFuY3kKICAgICAgICAgICAgICAgICAgICB0aGV5IHdvdWxkIGhhcmRseSBzYXkgdGhhdCBJIG15c2VsZiBjb250cml2ZWQuIEZvciBoYXJkbHkgaGFkIG15IG1pc2ZvcnR1bmUgY29tZQogICAgICAgICAgICAgICAgICAgIGFib3V0LCB3aGVuIGltbWVkaWF0ZWx5LCBhcyBpZiBJIHdlcmUgYWxyZWFkeSBhbiBleGlsZSBhbmQgYSBydWluZWQgbWFuLCBzb21lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgcGVvcGxlIHdlbnQgYnkgbmlnaHQgdG8gbXkgY290dGFnZSBpbiB0aGUgY291bnRyeSBhbmQgYXR0ZW1wdGVkIHRvIGNhcnJ5CiAgICAgICAgICAgICAgICAgICAgb2ZmIHdoYXQgd2FzIHRoZXJlOyBzbyB1dHRlciB3YXMgdGhlaXIgY29udGVtcHQgZm9yIHlvdSBhbmQgZm9yIHlvdXIgbGF3cy4gSWYKICAgICAgICAgICAgICAgICAgICB5b3Ugd2lzaCwgSSB3aWxsIGNhbGwgcGVyc29ucyB3aG8ga25vdyB0aGUgZmFjdHMuIDwvdHJhbnNsYXRpb24+"
translation['57.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWFueSBhcmUgdGhlIG90aGVyIGRlZWRzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXJzIHdoaWNoIEkgY291bGQgcG9pbnQgb3V0IGFuZCBtYW55IHRoZSBmYWxzZWhvb2RzIHdoaWNoIHRoZXkgaGF2ZSB0b2xkLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIEkgc2hvdWxkIGJlIGdsYWQgdG8gZW51bWVyYXRlIHRvIHlvdTsgYnV0IGFzIHlvdSBjb25zaWRlciB0aGVzZSBhbGllbiB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBtYXR0ZXIgaW4gaGFuZCwgSSB3aWxsIGxlYXZlIHRoZW0gb3V0LiBCZWFyIGluIG1pbmQsIGhvd2V2ZXIsIHRoZSBmb2xsb3dpbmcKICAgICAgICAgICAgICAgICAgICBwb2ludHMsIGFuZCBzZWUgaG93IG1hbnkganVzdCBhcmd1bWVudHMgSSBoYXZlIGluIGNvbWluZyBiZWZvcmUgeW91LiBGb3IsIGp1c3QKICAgICAgICAgICAgICAgICAgICBhcyB5b3UgcXVlc3Rpb24gdGhlIFRoZXNtb3RoZXRhZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgbm90ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5hPC9lbXBoPiBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDMzLjEiIHZhbGlkPSJ5ZXMiPkRlbS4gMzMuMTwvYmlibD48L25vdGU+IGluIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgc2NydXRpbnksIEkgd2lsbCBpbiB0aGUgc2FtZSBtYW5uZXIgcXVlc3Rpb24gbXlzZWxmIGJlZm9yZSB5b3UuIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YTwvZW1waD4gb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzMy4xIiB2YWxpZD0ieWVzIj5EZW0uIDMzLjE8L2JpYmw+PC90cmFuc2xhdGlvbj4="
translation['57.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz7igJxTaXIsIHdobyB3YXMgeW91ciBmYXRoZXI/4oCdCiAgICAgICAgICAgICAgICAgICAg4oCcTXkgZmF0aGVyPyBUaHVjcml0dXMu4oCdIOKAnERvIGFueSBvZiB5b3VyIHJlbGF0aXZlcwogICAgICAgICAgICAgICAgICAgIGdpdmUgdGVzdGltb255IGluIGhpcyBmYXZvcj/igJ0g4oCcQ2VydGFpbmx5OyBmaXJzdCwgZm91cgogICAgICAgICAgICAgICAgICAgIGNvdXNpbnM7IHRoZW4sIHRoZSBzb24gb2YgYSBjb3VzaW47IHRoZW4sIHRob3NlIHdobyBhcmUgbWFycmllZCB0byB0aGUgZmVtYWxlCiAgICAgICAgICAgICAgICAgICAgY291c2luczsgdGhlbiwgdGhlIGNsYW5zbWVuOyB0aGVuLCB0aG9zZSBvZiB0aGUgZ2VucyB3aG8gd29yc2hpcCBBcG9sbG8sIG91cgogICAgICAgICAgICAgICAgICAgIGFuY2VzdHJhbCBnb2QsIGFuZCBaZXVzLCB0aGUgZ29kIG9mIHRoZSBob3VzZWhvbGQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2FsbGVkIGJ5IHRoaXMgbmFtZSBiZWNhdXNlIGhpcyBzdGF0dWUgc3Rvb2QgaW4gdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8lc+BzrrOv8+CPC9mb3JlaWduPiwgb3IgZW5jbG9zdXJlLjwvbm90ZT47IHRoZW4sIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhlIHJpZ2h0IHRvIHRoZSBzYW1lIHBsYWNlcyBvZiBidXJpYWw7IHRoZW4sIHRoZSBtZW1iZXJzIG9mIHRoZSBkZW1lLCB3aG8KICAgICAgICAgICAgICAgICAgICB0ZXN0aWZ5IHRoYXQgaGUgaGFzIG9mdGVuIHBhc3NlZCB0aGUgc2NydXRpbnkgYW5kIGhlbGQgb2ZmaWNlLCBhbmQgd2hvIGFyZSBzaG93bgogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgdG8gaGF2ZSBjYXN0IHRoZWlyIHZvdGVzIGluIGhpcyBmYXZvci7igJ0gSW4gYWxsIHRoYXQKICAgICAgICAgICAgICAgICAgICBjb25jZXJucyBteSBmYXRoZXIsIHRoZW4sIGhvdyBjb3VsZCBJIHByb3ZlIG15IGNhc2UgdG8geW91IG1vcmUgZmFpcmx5IG9yIG1vcmUKICAgICAgICAgICAgICAgICAgICBjb252aW5jaW5nbHk/IEkgd2lsbCBjYWxsIG15IHJlbGF0aXZlcyBiZWZvcmUgeW91LCBpZiB5b3Ugc28gd2lzaC4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byVz4HOus6/z4I8L2ZvcmVpZ24+LCBvciBlbmNsb3N1cmUuPC90cmFuc2xhdGlvbj4="
translation['57.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaGVhciB0aGUgZmFjdHMgcmVnYXJkaW5nIG15IG1vdGhlci4gTXkgbW90aGVyIGlzCiAgICAgICAgICAgICAgICAgICAgTmljYXJldMOqLCB0aGUgZGF1Z2h0ZXIgb2YgRGFtb3N0cmF0dXMgb2YgTWVsaXTDqi4gV2hvIGFtb25nCiAgICAgICAgICAgICAgICAgICAgaGVyIHJlbGF0aXZlcyBnaXZlIHRlc3RpbW9ueT8gRmlyc3QsIGEgbmVwaGV3OyB0aGVuLCB0d28gc29ucyBvZiBoZXIgb3RoZXIKICAgICAgICAgICAgICAgICAgICBuZXBoZXc7IHRoZW4sIHRoZSBzb24gb2YgYSBjb3VzaW47IHRoZW4gdGhlIHNvbnMgb2YgUHJvdG9tYWNodXMsIHdobyB3YXMgbXkKICAgICAgICAgICAgICAgICAgICBtb3RoZXIncyBmb3JtZXIgaHVzYmFuZDsgdGhlbiwgRXVuaWN1cywgb2YgQ2hvbGFyZ3VzLCB3aG8gbWFycmllZCBteSBzaXN0ZXIsIHRoZQogICAgICAgICAgICAgICAgICAgIGRhdWdodGVyIG9mIFByb3RvbWFjaHVzOyB0aGVuLCBteSBzaXN0ZXIncyBzb24uIDwvdHJhbnNsYXRpb24+"
translation['57.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3JlIHRoYW4gdGhpcywgdGhlIGNsYW5zbWVuIGFuZCB0aGUgZGVtZXNtZW4gb2YgaGVyIHJlbGF0aXZlcyBoYXZlIGdpdmVuIHRoaXMKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnkuIE9mIHdoYXQsIHRoZW4sIGNvdWxkIHlvdSBoYXZlIGZ1cnRoZXIgbmVlZD8gWWV0IGFnYWluLCB0aGF0IG15IGZhdGhlcgogICAgICAgICAgICAgICAgICAgIG1hcnJpZWQgbXkgbW90aGVyIGFjY29yZGluZyB0byB0aGUgbGF3cywgYW5kIHRoYXQgaGUgZ2F2ZSBhIG1hcnJpYWdlLWZlYXN0IHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIG1lbWJlcnMgb2YgdGhlIGNsYW4sIGhhcyBiZWVuIHByb3ZlZCBieSB0ZXN0aW1vbnkuIEFuZCBiZXNpZGVzIGFsbCB0aGlzLCBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBzaG93biB0aGF0IEkgbXlzZWxmIGhhdmUgc2hhcmVkIGluIGFsbCB0aGUgcHJpdmlsZWdlcyB3aGljaCBiZWZpdCBmcmVlIG1lbi4KICAgICAgICAgICAgICAgICAgICBPbiBhbGwgZ3JvdW5kcywgdGhlcmVmb3JlLCB5b3Ugd2lsbCBhY3QgaW4gYWNjb3JkYW5jZSB3aXRoIHlvdXIgb2F0aHMsIGlmIHlvdQogICAgICAgICAgICAgICAgICAgIGdpdmUgeW91ciB2ZXJkaWN0IGluIG15IGZhdm91ciBhcyBqdXN0aWNlIGFuZCByaWdodCBkZW1hbmQuIDwvdHJhbnNsYXRpb24+"
translation['57.70'] = ""
translation['58.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbmFzbXVjaCBhcyBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciwgbWVuIG9mIHRoZSBqdXJ5LCB0aHJvdWdoIHRoaXMgbWFuIFRoZW9jcmluZXMgd2FzIGJyb3VnaHQgdG8gZGlzYXN0ZXIgaW4KICAgICAgICAgICAgICAgICAgICBoaXMgcmVsYXRpb25zIHRvIHRoZSBzdGF0ZSBhbmQgY29uZGVtbmVkIHRvIHBheSBhIGZpbmUgb2YgdGVuIHRhbGVudHMsIGFuZCBhcwogICAgICAgICAgICAgICAgICAgIHRoaXMgZmluZSBoYXMgYmVlbiBkb3VibGVkLCBzbyB0aGF0IHdlIGhhdmUgbm90IHRoZSBzbGlnaHRlc3QgaG9wZSBvZgogICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJhbmNlLCBJIGhhdmUgdGhvdWdodCBpdCBteSBkdXR5IHRvIGxvZGdlIHRoaXMgY3JpbWluYWwgaW5mb3JtYXRpb24gd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgdmlldyB0byB0YWtpbmcgdmVuZ2VhbmNlIHVwb24gdGhlIGRlZmVuZGFudCB3aXRoIHlvdXIgYWlkLCB3aXRob3V0IHRha2luZyBpbnRvCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJhdGlvbiBteSB5b3V0aCBvciBhbnl0aGluZyBlbHNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['58.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciwgbWVuIG9mIHRoZSBqdXJ5LCB3aG9zZSB3aXNoZXMgaGF2ZSBndWlkZWQgbWUgaW4gYWxsIHRoYXQgSSBoYXZlIGRvbmUsCiAgICAgICAgICAgICAgICAgICAgZGVjbGFyZWQgdG8gYWxsIGhpcyBhY3F1YWludGFuY2VzIHdoYXQgYSBtaXNmb3J0dW5lIGl0IHdvdWxkIGJlIGlmIEkgc2hvdWxkIGxldAogICAgICAgICAgICAgICAgICAgIHNsaXAgdGhlIHRpbWUgaW4gd2hpY2gsIHRoYW5rcyB0byBoaXMgYmVpbmcgc3RpbGwgYWxpdmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkluIHRoZSBldmVudCBvZiB0aGUgZmF0aGVyJ3MgZGVhdGggdGhlIHNvbiB3b3VsZCBpbmhlcml0IGhpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4TOuc684b23zrE8L2ZvcmVpZ24+LCBvciBsb3NzIG9mIGNpdmljIHJpZ2h0cywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIGRlYmFycmVkIGZyb20gYnJpbmdpbmcgYWN0aW9uLjwvbm90ZT4gSSBoYXZlIHRoZSByaWdodCB0byBhdmVuZ2UKICAgICAgICAgICAgICAgICAgICBteXNlbGYgb24gdGhpcyBtYW4sIGFuZCBzaG91bGQgbWFrZSBhbiBleGN1c2Ugb2YgbXkgaW5leHBlcmllbmNlIGFuZCBteSB5b3V0aCwKICAgICAgICAgICAgICAgICAgICBhbmQgc28gbG9vayBpZGx5IG9uIHdoaWxlIG15IGZhdGhlciBoYXMgYmVlbiBkZXByaXZlZCBvZiBldmVyeXRoaW5nLCBhbmQgd2hpbGUKICAgICAgICAgICAgICAgICAgICBUaGVvY3JpbmVzIGNvbnRpbnVlcyB0byB3cml0ZSBpbmRpY3RtZW50cyBjb250cmFyeSB0byB0aGUgbGF3cyBhbmQgdG8gaGFyYXNzCiAgICAgICAgICAgICAgICAgICAgbWFueSBjaXRpemVucyB3aXRoIGJhc2VsZXNzIGFuZCBtYWxpY2lvdXMgYWN0aW9ucywgd2hlbiBoZSBoYXMgbm8gcmlnaHQgdG8gZG8KICAgICAgICAgICAgICAgICAgICBzby4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4TOuc684b23zrE8L2ZvcmVpZ24+LCBvciBsb3NzIG9mIGNpdmljIHJpZ2h0cywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIGRlYmFycmVkIGZyb20gYnJpbmdpbmcgYWN0aW9uLjwvdHJhbnNsYXRpb24+"
translation['58.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkksIHRoZXJlZm9yZSwgYmVnIHlvdSBhbGwsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCBiZXNlZWNoIHlvdSB0bwogICAgICAgICAgICAgICAgICAgIGxpc3RlbiB0byBtZSB3aXRoIGdvb2R3aWxsLCBmaXJzdCwgYmVjYXVzZSBJIGFtIGVuZ2FnaW5nIGluIHRoaXMgY29udGVzdCB0byBoZWxwCiAgICAgICAgICAgICAgICAgICAgbXkgZmF0aGVyIGFuZCBpbiBvYmVkaWVuY2UgdG8gaGlzIHdpc2hlczsgYW5kIHNlY29uZGx5LCBiZWNhdXNlIEkgYW0gYm90aCB5b3VuZwogICAgICAgICAgICAgICAgICAgIGFuZCB3aXRob3V0IGV4cGVyaWVuY2UsIHNvIHRoYXQgSSBtdXN0IGNvdW50IG15c2VsZiBmb3J0dW5hdGUgaWYsIGJlY2F1c2UgeW91cgogICAgICAgICAgICAgICAgICAgIGdvb2R3aWxsIGlzIGF0IGhhbmQgdG8gaGVscCBtZSwgSSBzaGFsbCBiZSBhYmxlIHRvIHNob3cgd2hhdCB0aGlzIGZlbGxvdyBoYXMKICAgICAgICAgICAgICAgICAgICBkb25lOyA8L3RyYW5zbGF0aW9uPg=="
translation['58.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbiBhZGRpdGlvbiB0byB0aGVzZSByZWFzb25zLCBzaW5jZQogICAgICAgICAgICAgICAgICAgIEksIG1lbiBvZiB0aGUganVyeSwgaGF2ZSBiZWVuIGJldHJheWVkIO+8iGZvciB0aGUgdHJ1dGggc2hhbGwgYmUgdG9sZAogICAgICAgICAgICAgICAgICAgIHlvde+8iSBieSBwZXJzb25zIGluIHdob20gSSB0cnVzdGVkIGJlY2F1c2Ugb2YgdGhlaXIgZW5taXR5IHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCwgbWVuIHdobyBhZnRlciBoZWFyaW5nIHRoZSBmYWN0cyBhbmQgcHJvbWlzaW5nIHRvIHN0YW5kIGJ5IG1lLCBoYXZlCiAgICAgICAgICAgICAgICAgICAgbm93IGxlZnQgbWUgaW4gdGhlIGx1cmNoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIGlzIGNvbW1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGJlbGlldmVkIHRvIGJlIGEgZmxpbmcgYXQgRGVtb3N0aGVuZXMuPC9ub3RlPiBhbmQgaGF2ZSBjb21lIHRvIHRlcm1zIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgZGVmZW5kYW50IGluIHRoaXMgc3VpdCBvZiBtaW5lOyBzbyB0aGF0IEkgc2hhbGwgaGF2ZSBubyBvbmUgZXZlbiBhcyBhCiAgICAgICAgICAgICAgICAgICAgZmVsbG93LXBsZWFkZXIsIHVubGVzcyBzb21lb25lIGZyb20gYW1vbmcgbXkgb3duIGtpbnNtZW4gc2hhbGwgY29tZSB0byBteSBhaWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIG1hbiB3YXMKICAgICAgICAgICAgICAgICAgICBsaWFibGUgdG8gbWFueSBjcmltaW5hbCBpbmZvcm1hdGlvbnMsIGFuZCBoYXMgdHJhbnNncmVzc2VkIGFsbCB0aGUgbGF3cyB3aGljaAogICAgICAgICAgICAgICAgICAgIGJlYXIgdXBvbiB0aGVzZSBtYXR0ZXJzOyBidXQgdGhlIG1vc3QgdW5oZWFyZCBvZiBhbW9uZyBoaXMgYWN0cyB3ZSBmb3VuZCB0byBiZQogICAgICAgICAgICAgICAgICAgIHRoZSBkZW51bmNpYXRpb24gd2hpY2ggaGUgbG9kZ2VkIGNvbmNlcm5pbmcgdGhlIG1lcmNoYW50IHNoaXA7IHNvIHRoYXQgbXkgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgcHV0IHRoaXMgYXQgdGhlIGhlYWQgb2YgdGhlIGNyaW1pbmFsIGluZm9ybWF0aW9uIHdoaWNoIGhlIGdhdmUgbWUuIEZpcnN0LCB0aGVuLAogICAgICAgICAgICAgICAgICAgIHRoZSBjbGVyayBzaGFsbCByZWFkIHRvIHlvdSB0aGUgbGF3IHJlZ2FyZGluZyB0aG9zZSB3aG8gbG9kZ2UgZGVudW5jaWF0aW9ucyBhbmQKICAgICAgICAgICAgICAgICAgICBkbyBub3QgY2FycnkgdGhlbSB0aHJvdWdoLCBidXQgY29tcHJvbWlzZSBpbiBkZWZpYW5jZSBvZiB0aGUgbGF3cy4gRm9yIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGlzLCBJIHRoaW5rLCB0aGF0IEkgb3VnaHQgdG8gYmVnaW4gbXkgc3BlZWNoLiBUaGVuIHdpbGwgZm9sbG93IHRoZQogICAgICAgICAgICAgICAgICAgIGRlbnVuY2lhdGlvbiBpdHNlbGYgd2hpY2ggdGhlIGRlZmVuZGFudCBsb2RnZWQgYWdhaW5zdCBNaWNvbi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['58.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIGxhdywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIGV4cHJlc3NseSBwcmVzY3JpYmVzIGZvciB0aG9zZSB3aG8gdW5kZXJ0YWtlIGVpdGhlciB0byBwcmVmZXIKICAgICAgICAgICAgICAgICAgICBpbmRpY3RtZW50cyBvciBsb2RnZSBkZW51bmNpYXRpb25zIG9yIGRvIGFueSBvdGhlciBvZiB0aGUgYWN0cyBzcGVjaWZpZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3LCB0aGUgY29uZGl0aW9ucyB1bmRlciB3aGljaCBlYWNoIG9uZSBvZiB0aGVzZSB0aGluZ3MgaXMgdG8gYmUgZG9uZS4gVGhlc2UKICAgICAgICAgICAgICAgICAgICBhcmUsIGFzIHlvdSBoYXZlIGhlYXJkIGZyb20gdGhlIGxhdyBpdHNlbGYsIHRoYXQsIGlmIGEgbWFuIHByb3NlY3V0ZXMgYW5kIGRvZXMKICAgICAgICAgICAgICAgICAgICBub3QgcmVjZWl2ZSB0aGUgZmlmdGggcGFydCBvZiB0aGUgdm90ZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4DPic6yzrXOu+G9t86xPC9mb3JlaWduPu+8iHNlZSBub3RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmE8L2VtcGg+IG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjcuNjciIHZhbGlkPSJ5ZXMiPkRlbS4gMjcuNjc8L2JpYmw+77yJIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBleGFjdGVkIGFsc28gaW4gY3JpbWluYWwgc3VpdHMsIGFuZCB0aGUgcHJvc2VjdXRvciB3aG8gZGlkIG5vdCByZWNlaXZlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBmaWZ0aCBwYXJ0IG9mIHRoZSB2b3RlcyB3YXMgYWxzbyBmaW5lZCBhIHRob3VzYW5kIGRyYWNobWFlLjwvbm90ZT4gaGUgc2hhbGwKICAgICAgICAgICAgICAgICAgICBwYXkgYSBmaW5lIG9mIGEgdGhvdXNhbmQgZHJhY2htYWUsIGFuZCBpZiBoZSBkb2VzIG5vdCBwcm9zZWN1dGUsIFRoZW9jcmluZXMsIGhlCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgcGF5IGFub3RoZXIgdGhvdXNhbmQsIHRvIHRoZSBlbmQgdGhhdCBubyBvbmUgbWF5IGJyaW5nIGZvcndhcmQgYmFzZWxlc3MKICAgICAgICAgICAgICAgICAgICBjaGFyZ2VzLCBvciB3aXRoIGltcHVuaXR5IG1ha2UgcHJvZml0IGZvciBoaW1zZWxmIG9yIGNvbXByb21pc2UgdGhlIGludGVyZXN0cyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBzdGF0ZS48Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDPgM+JzrLOtc674b23zrE8L2ZvcmVpZ24+77yIc2VlIG5vdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YTwvZW1waD4gb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy42NyIgdmFsaWQ9InllcyI+RGVtLiAyNy42NzwvYmlibD7vvIkgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0ZWQgYWxzbyBpbiBjcmltaW5hbCBzdWl0cywgYW5kIHRoZSBwcm9zZWN1dG9yIHdobyBkaWQgbm90IHJlY2VpdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZpZnRoIHBhcnQgb2YgdGhlIHZvdGVzIHdhcyBhbHNvIGZpbmVkIGEgdGhvdXNhbmQgZHJhY2htYWUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgZGVjbGFyZSwgdGhlbiwgdGhhdCBpbiBhY2NvcmRhbmNlCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGlzIGNyaW1pbmFsIGluZm9ybWF0aW9uIFRoZW9jcmluZXMgaXMgbGlhYmxlIGZvciBoYXZpbmcgZGVub3VuY2VkIE1pY29uCiAgICAgICAgICAgICAgICAgICAgb2YgQ2hvbGxlaWRhZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2hvbGxlaWRhZSwgYSBkZW1lIG9mIHRoZSB0cmliZQogICAgICAgICAgICAgICAgICAgICAgICBMZW9udGlzLjwvbm90ZT4gYW5kIHRoZW4gaGF2aW5nIGFjY2VwdGVkIG1vbmV5IGFuZCBzb2xkIHRoZSBjYXNlIGluc3RlYWQgb2YKICAgICAgICAgICAgICAgICAgICBwcm9zZWN1dGluZyBpdC4gPC90cmFuc2xhdGlvbj4="
translation['58.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkkgYmVsaWV2ZSB0aGF0IEkgc2hhbGwgcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGlzIGNsZWFybHkuIEFuZCB5ZXQsIG1lbiBvZiB0aGUganVyeSwgVGhlb2NyaW5lcyBhbmQgaGlzIGNsaXF1ZSBoYXZlIGdvbmUgdG8KICAgICAgICAgICAgICAgICAgICBhbGwgbGVuZ3RocyBpbiB0YW1wZXJpbmcgd2l0aCB0aGUgd2l0bmVzc2VzLCBhbmQgdHJ5aW5nIHRvIGluZHVjZSB0aGVtIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhyZWF0cyBhbmQgYnkgYnJpYmVzIG5vdCB0byBnaXZlIHRlc3RpbW9ueS4gTmV2ZXJ0aGVsZXNzLCBpZiB5b3Ugd2lsbCBnaXZlIG1lCiAgICAgICAgICAgICAgICAgICAgdGhlIGFpZCB3aGljaCB5b3UgYXJlIGJvdW5kIHRvIGdpdmUsIGFuZCB3aWxsIGJpZCB0aGVtLCBvciByYXRoZXIgam9pbiB3aXRoIG1lCiAgICAgICAgICAgICAgICAgICAgaW4gY29tcGVsbGluZyB0aGVtLCBlaXRoZXIgdG8gdGVzdGlmeSwgb3IgdG8gZGlzY2xhaW0ga25vd2xlZGdlIHVuZGVyIG9hdGgsIGFuZAogICAgICAgICAgICAgICAgICAgIHdpbGwgbm90IGFsbG93IHRoZW0gdG8gdGFsayBhdCByYW5kb20sIHRoZSB0cnV0aCB3aWxsIGJlIGJyb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQsIHRoZW4sIGZpcnN0IHRoZSBkZW51bmNpYXRpb24gYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlbiB0aGUgZGVwb3NpdGlvbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVudW5jaWF0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVudW5jaWF0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbnVuY2lhdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['58.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzCiAgICAgICAgICAgICAgICAgICAgZGVudW5jaWF0aW9uLCBtZW4gb2YgdGhlIGp1cnksIHdhcyBsb2RnZWQgYnkgdGhlIGRlZmVuZGFudCBhZnRlciBoZSBoYWQgY2l0ZWQKICAgICAgICAgICAgICAgICAgICBNaWNvbiB0byBhcHBlYXIuIEl0IHdhcyByZWNlaXZlZCBieSBFdXRoeXBoZW11cywgdGhlIHNlY3JldGFyeSBvZiB0aGUgb3ZlcnNlZXJzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHBvcnQsIGFuZCB3YXMgZXhwb3NlZCB0byBwdWJsaWMgdmlldyBmb3IgYSBsb25nIHRpbWUgaW4gZnJvbnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVldGluZy1wbGFjZSBvZiB0aGUgYm9hcmQsIHVudGlsIHRoaXMgZmVsbG93IHdhcyBicmliZWQgdG8gYWxsb3cgaXQgdG8gYmUKICAgICAgICAgICAgICAgICAgICBjcm9zc2VkIG91dCwganVzdCB3aGVuIHRoZSBtYWdpc3RyYXRlcyB3ZXJlIHN1bW1vbmluZyBoaW0gZm9yIHRoZSBwcmVsaW1pbmFyeQogICAgICAgICAgICAgICAgICAgICAgICBoZWFyaW5nLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IHRoZXNlIHN0YXRlbWVudHMgb2YKICAgICAgICAgICAgICAgICAgICBtaW5lIGFyZSB0cnVlLCBjYWxsIGZpcnN0IEV1dGh5cGhlbXVzLCB3aG8gd2FzIHNlY3JldGFyeSBvZiB0aGUgYm9hcmQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['58.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgcmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uIG9mIHRob3NlIHdobyBzYXcgdGhlIGRlbnVuY2lhdGlvbiBleHBvc2VkIHRvIHZpZXcuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNhbGwgbm93IGFsc28gdGhlIG92ZXJzZWVycyBvZiB0aGUgcG9ydAogICAgICAgICAgICAgICAgICAgIGFuZCBNaWNvbiBoaW1zZWxmLCBhZ2FpbnN0IHdob3NlIHNoaXAgVGhlb2NyaW5lcyBsb2RnZWQgdGhlIGRlbnVuY2lhdGlvbjsgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVhZCB0aGVpciBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['58.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGUganVyeSwgdGhhdCBUaGVvY3JpbmVzIGRpZCBsb2RnZSBhIGRlbnVuY2lhdGlvbiBhZ2FpbnN0IHRoZSBzaGlwIG9mIE1pY29uLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IHRoZSBkZW51bmNpYXRpb24gd2FzIGV4cG9zZWQgZm9yIGEgbG9uZyB0aW1lIHRvIHB1YmxpYyB2aWV3LCBhbmQgYWdhaW4KICAgICAgICAgICAgICAgICAgICB0aGF0LCB3aGVuIHN1bW1vbmVkIHRvIHRoZSBwcmVsaW1pbmFyeSBoZWFyaW5nLCBoZSBkaWQgbm90IGFuc3dlciwgbm9yIGRpZCBoZQogICAgICAgICAgICAgICAgICAgIHByb3NlY3V0ZSB0aGUgY2FzZSwgeW91IGhhdmUgaGVhcmQgZnJvbSB3aXRuZXNzZXMgd2hvIHdlcmUgaW4gdGhlIGJlc3QgcG9zaXRpb24KICAgICAgICAgICAgICAgICAgICB0byBrbm93IHRoZSB0cnV0aC4gQW5kIHRoYXQgaGUgaXMgbGlhYmxlLCBub3QgdG8gdGhlIGZpbmUgb2YgYSB0aG91c2FuZCBkcmFjaG1hZQogICAgICAgICAgICAgICAgICAgIG1lcmVseSwgYnV0IGFsc28gdG8gYXJyZXN0IGFuZCB0byB0aGUgb3RoZXIgcHVuaXNobWVudHMgd2hpY2ggdGhlIGxhdyBkZWNsYXJlcwogICAgICAgICAgICAgICAgICAgIHNoYWxsIGJlIGluZmxpY3RlZCB1cG9uIGFueW9uZSB3aG8gcHJlZmVycyBiYXNlbGVzcyBjaGFyZ2VzIGFnYWluc3QgbWVyY2hhbnRzCiAgICAgICAgICAgICAgICAgICAgYW5kIHNoaXAtb3duZXJzLCB5b3Ugd2lsbCByZWFkaWx5IGxlYXJuIGZyb20gdGhlIGxhdyBpdHNlbGYuIDwvdHJhbnNsYXRpb24+"
translation['58.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHByb3Bvc2VyIG9mIHRoaXMgbGF3LCBpbiBoaXMgZGVzaXJlIHRoYXQgdGhvc2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgbWVyY2hhbnRzIHdobyB3ZXJlIGd1aWx0eSBvZiB3cm9uZ2RvaW5nIHNob3VsZCBub3QgZ28gdW5wdW5pc2hlZCwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gd2VyZSBpbm5vY2VudCBzaG91bGQgbm90IGJlIGFubm95ZWQsIGFic29sdXRlbHkgZm9yYmFkZSBhIHBlcnNvbiBvZgogICAgICAgICAgICAgICAgICAgIHRoaXMgc29ydCB0byBtYWtlIGRlbnVuY2lhdGlvbnMgdW5sZXNzIGhlIHdlcmUgY29uZmlkZW50IHRoYXQgaGUgY291bGQgcHJvdmUgaW4KICAgICAgICAgICAgICAgICAgICB5b3VyIGNvdXJ0IHRoYXQgdGhlIHRoaW5ncyBjaGFyZ2VkIGluIGhpcyBkZW51bmNpYXRpb24gaGFkIGFjdHVhbGx5IHRha2VuIHBsYWNlOwogICAgICAgICAgICAgICAgICAgIGJ1dCB0aGF0IGlmIGFueSBvbmUgb2YgdGhvc2Ugd2hvIGJyaW5nIGJhc2VsZXNzIGNoYXJnZXMgc2hvdWxkIHRyYW5zZ3Jlc3MgdGhpcwogICAgICAgICAgICAgICAgICAgIGxhdywgaGUgc2hvdWxkIGJlIGxpYWJsZSB0byBjcmltaW5hbCBpbmZvcm1hdGlvbiBhbmQgYXJyZXN0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ib3dldmVyLCByZWFkIHRoZW0gdGhlIGxhdyBpdHNlbGY7IGZvciBpdCB3aWxsIGV4cGxhaW4KICAgICAgICAgICAgICAgICAgICB0aGUgbWF0dGVyIG1vcmUgY2xlYXJseSB0aGFuIEkgY2FuIGRvLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBqdXJ5LCB0aGUgcGVuYWx0aWVzIHdoaWNoIHRoZSBsYXdzIG9yZGFpbiBmb3IgdGhlIG9uZSB3aG8gYnJpbmdzIGJhc2VsZXNzCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlcy4gV2VsbCB0aGVuLCBpZiBNaWNvbiBoYXMgZG9uZSBhbnkgb2YgdGhlIGFjdHMgd2hpY2ggVGhlb2NyaW5lcyBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBkZW51bmNpYXRpb24gY2hhcmdlZCBoaW0gd2l0aCBkb2luZywgYW5kIFRoZW9jcmluZXMgaGFzIGNvbXByb21pc2VkIHRoZSBtYXR0ZXIKICAgICAgICAgICAgICAgICAgICBhbmQgY29tZSB0byB0ZXJtcyB3aXRoIHRoZSBtYW4sIGhlIGlzIGd1aWx0eSBvZiBhIGNyaW1lIGFnYWluc3QgeW91IGFsbCwgYW5kCiAgICAgICAgICAgICAgICAgICAgd291bGQganVzdGx5IGJlIGZpbmVkIGEgdGhvdXNhbmQgZHJhY2htYWUuIEJ1dCBpZiBNaWNvbiBzYWlsZWQgdG8gYSBwb3J0IHRvCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgbWlnaHQgbGVnaXRpbWF0ZWx5IHNhaWwg77yIbGV0IHRoZSBkZWZlbmRhbnQgY2hvb3NlIGVpdGhlcgogICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aXZl77yJLCBhbmQgVGhlb2NyaW5lcyBub25lIHRoZSBsZXNzIGRlbm91bmNlcyBhbmQgc3VtbW9ucyBoaW0sCiAgICAgICAgICAgICAgICAgICAgaGUgaXMgYnJpbmdpbmcgYSBiYXNlbGVzcyBjaGFyZ2UgYWdhaW5zdCB0aGUgc2hpcC1vd25lcnMsIGFuZCBoYXMgdmlvbGF0ZWQgbm90CiAgICAgICAgICAgICAgICAgICAgb25seSB0aGUgZm9ybWVyIGxhdywgYnV0IGFsc28gdGhlIG9uZSBqdXN0IHJlYWQsIGFuZCBoYXMgY29udmljdGVkIGhpbXNlbGYgb2YKICAgICAgICAgICAgICAgICAgICBkaXNob25lc3R5IGJvdGggaW4gaGlzIHdvcmRzIGFuZCBpbiBoaXMgYWN0aW9ucy4gPC90cmFuc2xhdGlvbj4="
translation['58.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hhdCBtYW4gd291bGQgaGF2ZSBkZXNpc3RlZCBmcm9tIGFuIGhvbmVzdCBjb3Vyc2Ugb2YKICAgICAgICAgICAgICAgICAgICBhY3Rpb24gYnkgd2hpY2ggaGUgd291bGQgaGF2ZSByZWNlaXZlZCB0aGUgc2hhcmUgb2YgdGhlIG1vbmV5IHdoaWNoIHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICBhbGxvd3MsIGFuZCBoYXZlIHJhdGhlciBjaG9zZW4gdG8gbWFrZSBhIHRyaWZsaW5nIGdhaW4gYnkgYSBjb21wcm9taXNlIGFuZAogICAgICAgICAgICAgICAgICAgIHJlbmRlciBoaW1zZWxmIGFtZW5hYmxlIHRvIHRoZXNlIGxhd3MsIHdoZW4sIGFzIEkgc2FpZCBqdXN0IG5vdywgaGUgbWlnaHQgaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIGhhbGYgdGhlIHN1bSBpbnZvbHZlZCBpbiB0aGUgZGVudW5jaWF0aW9uPyBObyBtYW4gaW4gdGhlIHdvcmxkIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBkb25lIHNvLCBtZW4gb2YgdGhlIGp1cnksIHVubGVzcyBoZSB3ZXJlIGNvbnNjaW91cyB0aGF0IGhlIHdhcyBicmluZ2luZwogICAgICAgICAgICAgICAgICAgIGJhc2VsZXNzIGFuZCBtYWxpY2lvdXMgY2hhcmdlcy4gPC90cmFuc2xhdGlvbj4="
translation['58.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2UgYXJlIHR3byBsYXdzLCB0aGVuLCB3aGljaCB0aGlzIG1hbiwgd2hvIGluZGljdHMKICAgICAgICAgICAgICAgICAgICBvdGhlcnMgZm9yIGlsbGVnYWwgYWN0cywgaGFzIGhpbXNlbGYgdmlvbGF0ZWQuIFRoZXJlIGlzIGEgdGhpcmQgbGF3IGFsc28sIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgZW5hY3RzIHRoYXQgYW55IG9uZSBvZiB0aGUgY2l0aXplbnMgd2hvIHBsZWFzZXMgbWF5IGxvZGdlIGNyaW1pbmFsIGluZm9ybWF0aW9ucwogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhvc2Ugd2hvIG93ZSBtb25leSB0byB0aGUgdHJlYXN1cnksIG9yIGlmIGFueSBtYW4gaXMgaW5kZWJ0ZWQgdG8gQXRoZW5hCiAgICAgICAgICAgICAgICAgICAgb3IgdG8gYW55IG9uZSBvZiB0aGUgcmVzdCBvZiB0aGUgZ29kcywgb3Igb2YgdGhlIGVwb255bW91cyBoZXJvZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBsZWdlbmRhcnkgZmlndXJlcyBhZnRlciB3aG9tIHRoZSB2YXJpb3VzCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWJlcyB3ZXJlIG5hbWVkLiBUaGV5IGVhY2ggaGFkIHRoZWlyIHRyaWJhbCBzaHJpbmVzLjwvbm90ZT4gSW4gdGhpcyBjbGFzcwogICAgICAgICAgICAgICAgICAgIHRoZSBkZWZlbmRhbnQgd2lsbCBiZSBzaG93biB0byBiZWxvbmc7IGZvciBoZSBvd2VzLCBhbmQgaGFzIG5vdCBwYWlkLCBzZXZlbgogICAgICAgICAgICAgICAgICAgIGh1bmRyZWQgZHJhY2htYWUsIHdoaWNoIGhlIHdhcyBjb25kZW1uZWQgYXQgdGhlIGF1ZGl0IHRvIHBheSB0byB0aGUgZXBvbnltdXMgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgdHJpYmUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgdGhhdCBwYXJ0IG9mIHRoZSBsYXcuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['58.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3RvcCByZWFkaW5nLgogICAgICAgICAgICAgICAgICAgIERvIHlvdSBoZWFyLCBmZWxsb3csIHdoYXQgaXQgc2F5cz/igJTigJxvciB0byBhbnkgb25lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVwb255bW91cyBoZXJvZXMu4oCdPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgdGhlIGRlcG9zaXRpb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbWVtYmVycyBvZiB0aGUgdHJpYmUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0IGlzIGxpa2VseSBpbmRlZWQsIG1lbiBvZiB0aGUganVyeSwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBkZWZlbmRhbnQgd291bGQgaGF2ZSByZWdhcmQgZm9yIGZldyBwZXJzb25zIGFuZCBmb3IgdGhvc2Ugd2hvIHNwZW5kCiAgICAgICAgICAgICAgICAgICAgbW9zdCBvZiB0aGVpciB0aW1lIGF0IHNlYSwgYXMgTWljb24gZG9lcywgd2hlbiBoZSBmZWx0IG5laXRoZXIgZmVhciBub3Igc2hhbWUgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgcHJlc2VuY2Ugb2YgaGlzIHRyaWJlc21lbiwgaW4gdGhlIGZpcnN0IHBsYWNlLCB3aGVuIGFkbWluaXN0ZXJpbmcgdGhlaXIKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgYnVzaW5lc3MgaW4gc3VjaCBhIHdheSB0aGF0IHRoZXkgY29udmljdGVkIGhpbSBvZiBlbWJlenpsZW1lbnQsIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBzZWNvbmQgcGxhY2UsIGFsdGhvdWdoIGhlIGhhZCBiZWVuIGZpbmVkIGFuZCBrbmV3IHdlbGwgdGhhdCB0aGUgbGF3cyBmb3JiYWRlCiAgICAgICAgICAgICAgICAgICAgaGltIHRvIHByZWZlciBpbmRpY3RtZW50cyB1bnRpbCBoZSBzaG91bGQgcGF5LCB3aGVuIGRlZnlpbmcgdGhlIGxhd3MgYW5kIGhvbGRpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0LCB3aGlsZSBvdGhlciBzdGF0ZS1kZWJ0b3JzIGNvdWxkIGV4ZXJjaXNlIG5vIHB1YmxpYyBmdW5jdGlvbiwgaGUgaGFkIHRoZQogICAgICAgICAgICAgICAgICAgIHJpZ2h0IHRvIGJlIHN1cGVyaW9yIHRvIHRoZSBsYXdzLiA8L3RyYW5zbGF0aW9uPg=="
translation['58.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3aWxsLCB0bwogICAgICAgICAgICAgICAgICAgIGJlIHN1cmUsIGFzc2VydCB0aGF0IGl0IGlzIGhpcyBncmFuZGZhdGhlciBhbmQgbm90IGhpbXNlbGYgd2hvIGlzIGVudGVyZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXIgYXMgYSBkZWJ0b3IgdG8gdGhlIHN0YXRlLCBhbmQgaW4gcmVnYXJkIHRvIHRoaXMgd2lsbCB0YWxrIGF0IGxlbmd0aCB0bwogICAgICAgICAgICAgICAgICAgIHByb3ZlIHRoYXQgaXQgaXMgaGUuIEkgbXlzZWxmIGNhbm5vdCBzYXkgd2l0aCBjZXJ0YWludHkgd2hpY2ggb2YgdGhlIHR3byBpdCBpczsKICAgICAgICAgICAgICAgICAgICBidXQgc3VwcG9zaW5nIGl0IHRvIGJlIGFzIGhlIHdpbGwgY2xhaW0sIEkgdGhpbmsgdGhhdCB5b3Ugd2lsbCBiZSB1bmRlciBmYXIKICAgICAgICAgICAgICAgICAgICBncmVhdGVyIG9ibGlnYXRpb24gdG8gY29udmljdCBoaW0sIGlmIHRoaXMgaXMgdGhlIGNhc2UuIDwvdHJhbnNsYXRpb24+"
translation['58.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgaGlzIGdyYW5kZmF0aGVyIHdhcyBhIHN0YXRlLWRlYnRvciBsb25nIGFnbyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3IG9yZGFpbnMgdGhhdCBoZSBiZSBoaXMgZ3JhbmRmYXRoZXIncyBoZWly4oCUaWYsIHRob3VnaCBoZSBsb25nIGFnbwogICAgICAgICAgICAgICAgICAgIGxvc3QgdGhlIHJpZ2h0IHRvIHByZWZlciBpbmRpY3RtZW50cywgaGUgc3RpbGwgY29udGludWVkIHRvIHByZWZlciB0aGVtOyBhbmQgaWYKICAgICAgICAgICAgICAgICAgICBoZSBpcyBnb2luZyB0byBhc3N1bWUgdGhhdCBoZSBvdWdodCB0byBiZSBhY3F1aXR0ZWQganVzdCBiZWNhdXNlIGhlIGlzIGEKICAgICAgICAgICAgICAgICAgICBzY291bmRyZWwgb2YgdGhlIHRoaXJkIGdlbmVyYXRpb24sIHRoZXJlIHdpbGwgYmUgbm8ganVzdGljZSBpbiBoaXMgcGxlYSwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnkuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgaXQgaXMgYWRtaXR0ZWQgYnkKICAgICAgICAgICAgICAgICAgICBUaGVvY3JpbmVzIGhpbXNlbGYgdGhhdCB0aGlzIGRlYnQgaXMgaGlzIG93biBhbmQgdGhhdCBoZSBhcnJhbmdlZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIG1lbWJlcnMgb2YgdGhlIHRyaWJlIG9uIGJlaGFsZiBvZiBoaXMgYnJvdGhlciBhbmQgaGltc2VsZiBmb3IgaXRzIHBheW1lbnQsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgbm8ganVyeSB3aGljaCBoYXMgcmVnYXJkIHRvIGl0cyBvYXRoIGNvdWxkIGhvbm9yYWJseSBob2xkIHRoYXQgdGhpcwogICAgICAgICAgICAgICAgICAgIGNyaW1pbmFsIGluZm9ybWF0aW9uIGlzIHdpdGhvdXQgZm91bmRhdGlvbiwgdGFrZSwgcGxlYXNlLCB0aGUgYmlsbCB3aGljaAogICAgICAgICAgICAgICAgICAgIFNjaXJvbmlkZXMgaW50cm9kdWNlZCBpbiB0aGUgbWVldGluZyBvZiB0aGUgdHJpYmUuIDwvdHJhbnNsYXRpb24+"
translation['58.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyBtYW4gVGhlb2NyaW5lcyBjYW1lIGZvcndhcmQsIGFkbWl0dGVkIHRoZSBkZWJ0IGFuZAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBwcmVzZW5jZSBvZiB0aGUgbWVtYmVycyBvZiB0aGUgdHJpYmUgcHJvbWlzZWQgdG8gcGF5IGl0LCB3aGVuIGhlIHNhdyB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2Ugd2VyZSBjb21pbmcgdXAgYW5kIHdlcmUgcGxhbm5pbmcgdG8gdGFrZSBhIGNvcHkgb2Ygd2hhdCBzdG9vZCB3cml0dGVuIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICByZWdpc3Rlci48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0aCBtdWNoIGJldHRlciByZWFzb24sIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdvdWxkIHlvdSBjb21tZW5kIHRoZQogICAgICAgICAgICAgICAgICAgIG1lbWJlcnMgb2YgdGhlIHRyaWJlIExlb250aXMsIHdobyBjb21wZWxsZWQgVGhlb2NyaW5lcyB0byBwYXkgdGhlIHNldmVuIG1pbmFlLAogICAgICAgICAgICAgICAgICAgIHRoYW4gdGhpcyBmZWxsb3cgaGltc2VsZi4gPC90cmFuc2xhdGlvbj4="
translation['58.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgaXMgbm93IGEgZm91cnRoIGxhdyDvvIhmb3IgSSBhZG1pdCB0aGF0IEkKICAgICAgICAgICAgICAgICAgICBoYXZlIGxvb2tlZCBjbG9zZWx5IGludG8gbW9zdCBvZiB0aGUgdGhpbmdzIHdoaWNoIHRoZSBkZWZlbmRhbnQgaGFzCiAgICAgICAgICAgICAgICAgICAgZG9uZe+8iSBhY2NvcmRpbmcgdG8gd2hpY2ggdGhpcyBUaGVvY3JpbmVzIG93ZXMgZml2ZSBodW5kcmVkIGRyYWNobWFlLAogICAgICAgICAgICAgICAgICAgIHNpbmNlIGhpcyBmYXRoZXIgaGFkIG5vdCBwYWlkIGEgZmluZSBvZiB0aGF0IGFtb3VudCB0byB3aGljaCBoZSBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIHNlbnRlbmNlZCBmb3IgaGF2aW5nIHNvdWdodCB0byBtYWludGFpbiB0aGF0IHRoZSBtYWlkLXNlcnZhbnQgb2YgQ2VwaGlzb2RvcnVzCiAgICAgICAgICAgICAgICAgICAgd2FzIGEgZnJlZSB3b21hbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gc3VjaCBjYXNlcywgaWYgdGhlIHBhcnRpZXMKICAgICAgICAgICAgICAgICAgICAgICAgY291bGQgbm90IGNvbWUgdG8gYW4gYWdyZWVtZW50IGFzIHRvIHdoZXRoZXIgdGhlIHBlcnNvbiBpbiBxdWVzdGlvbiB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgc2xhdmUgb3IgZnJlZSwgdGhlIG1hdHRlciBjYW1lIGludG8gY291cnQuIEluIHRoZSBwcmVzZW50IGluc3RhbmNlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBmYXRoZXIgb2YgVGhlb2NyaW5lcyBoYWQgZXZpZGVudGx5IG5vdCBiZWVuIGFibGUgdG8gbWFrZSBnb29kIGhpcyBjbGFpbSB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzZXJ2YW50IGluIHF1ZXN0aW9uIHdhcyBhIGZyZWUgd29tYW4sIGFuZCBoYWQgYmVlbiBvcmRlcmVkIHRvIHBheQogICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VzIHRvIGhpcyBhZHZlcnNhcnkgYW5kIGEgbGlrZSBzdW0g77yIaGVuY2UgdGhlIGNvbXBvdW5kIHZlcmIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PgM+Bzr/Pg+G/ts+GzrvOtc69PC9mb3JlaWduPu+8iSBhcyBhIGZpbmUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLiBTZWUgTWVpZXIgYW5kIFNjaG9tYW5uLCAyLiBwcC4gNjU4IGZmLjwvbm90ZT4gTm87IGhlIGZpeGVkIHRoaW5ncwogICAgICAgICAgICAgICAgICAgIHdpdGggQ3Rlc2ljbGVzLCB0aGUgc3BlZWNoLXdyaXRlciwgd2hvIHdhcyBhY3RpbmcgaW4gdGhlIG1hdHRlciBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgb3Bwb25lbnRzLCBpbiBzdWNoIGEgd2F5IHRoYXQgaGUgc2hvdWxkIG5laXRoZXIgcGF5IHRoZSBkYW1hZ2VzIG5vciBiZSBsaXN0ZWQgb24KICAgICAgICAgICAgICAgICAgICB0aGUgYWNyb3BvbGlzIGFzIGEgZGVidG9yIHRvIHRoZSBzdGF0ZS4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DPgc6/z4Phv7bPhs67zrXOvTwvZm9yZWlnbj7vvIkgYXMgYSBmaW5lIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS4gU2VlIE1laWVyIGFuZCBTY2hvbWFubiwgMi4gcHAuIDY1OCBmZi48L3RyYW5zbGF0aW9uPg=="
translation['58.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5EZXNwaXRlIHRoaXMgZmFjdCwgSSBtYWludGFpbiB0aGF0IFRoZW9jcmluZXMgc3RpbGwgb3dlcyB0aGUgbW9uZXkgYWNjb3JkaW5nCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGxhdy4gRm9yIGlmIEN0ZXNpY2xlcywgdGhlIHJlc2lkZW50IGFsaWVuLCBkaWQgbWFrZSBhbiBhZ3JlZW1lbnQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoaXMgZmVsbG93LCBhcyBvbmUgc2NvdW5kcmVsIHdpdGggYW5vdGhlciwgdGhhdCBvbmUgc2VudGVuY2VkIHRvIHBheSB0aGUgZmluZQogICAgICAgICAgICAgICAgICAgIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgbGF3IHNob3VsZCBub3QgYmUgaGFuZGVkIG92ZXIgdG8gdGhlIGNvbGxlY3RvcnMsIHRoZQogICAgICAgICAgICAgICAgICAgIHN0YXRlIHNob3VsZCBub3Qgb24gdGhhdCBhY2NvdW50IGJlIHJvYmJlZCBvZiB0aGUgcGVuYWx0aWVzIGltcG9zZWQgYnkgdGhlIGxhd3MuCiAgICAgICAgICAgICAgICAgICAgTm8gaW5kZWVkOyBpdCBpcyByaWdodCBmb3IgdGhlIHBhcnRpZXMgaW4gYSBzdWl0IHRvIG1ha2Ugd2hhdGV2ZXIgYXJyYW5nZW1lbnQKICAgICAgICAgICAgICAgICAgICB0aGV5IG1heSBtdXR1YWxseSBhZ3JlZSB1cG9uIGluIHByaXZhdGUgYWZmYWlycywgYnV0IGluIG1hdHRlcnMgd2hpY2ggY29uY2VybgogICAgICAgICAgICAgICAgICAgIHRoZSBwdWJsaWMgdGhleSBtdXN0IGFjdCBhcyB0aGUgbGF3IG9yZGFpbnMuIDwvdHJhbnNsYXRpb24+"
translation['58.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCwgcGxlYXNlLCB0aGUgbGF3IHdoaWNoIGRlY2xhcmVzIHRoYXQKICAgICAgICAgICAgICAgICAgICBhbnlvbmUgd2hvIGlzIGFkanVkZ2VkIHRvIGhhdmUgd3JvbmdmdWxseSBhc3NlcnRlZCB0aGUgZnJlZWRvbSBvZiBhIHNsYXZlIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgcGF5IGhhbGYgdGhlIHN1bSBhc3Nlc3NlZCBpbnRvIHRoZSBwdWJsaWMgdHJlYXN1cnksIGFuZCB0aGVuIHJlYWQgYWxzbyB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uIG9mIENlcGhpc29kb3J1cy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHJlYWQgdGhhdCBsYXcgYWxzbywgd2hpY2ggZGVjbGFyZXMKICAgICAgICAgICAgICAgICAgICB0aGF0IGEgbWFuIHNoYWxsIGJlIHJlZ2FyZGVkIGFzIGEgZGVidG9yIGZyb20gdGhlIGRheSBvbiB3aGljaCBoZSBpbmN1cnMgdGhlCiAgICAgICAgICAgICAgICAgICAgZmluZSwgd2hldGhlciBoZSBoYXMgYmVlbiBlbnRlcmVkIG9uIHRoZSBwdWJsaWMgcmVnaXN0ZXIgb3Igbm90LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gd2hhdCBvdGhlcgogICAgICAgICAgICAgICAgICAgIHdheSwgbWVuIG9mIHRoZSBqdXJ5LCBjb3VsZCBhbiBob25lc3QgcHJvc2VjdXRvciBzaG93IHRoYXQgdGhlIGNyaW1pbmFsCiAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb24gaGFzIGJlZW4gcmlnaHRseSBicm91Z2h0IGFnYWluc3QgdGhpcyBUaGVvY3JpbmVzLCBhbmQgdGhhdCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGxpYWJsZSwgbm90IG9ubHkgdG8gdGhlIGZpbmUgb2YgYSB0aG91c2FuZCBkcmFjaG1hZSwgd2hpY2ggZm9ybXMgdGhlIGJhc2lzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGluZm9ybWF0aW9uLCBidXQgdG8gbWFueSBvdGhlciBwZW5hbHRpZXMgYXMgd2VsbD8gVG8gbXkgbWluZCB0aGVyZSBpcyBubwogICAgICAgICAgICAgICAgICAgIG90aGVyIHdheS4gRm9yIHN1cmVseSB5b3UgY2Fubm90IGV4cGVjdCB0aGF0IFRoZW9jcmluZXMgd2lsbCBoaW1zZWxmIGFkbWl0IHRoZQogICAgICAgICAgICAgICAgICAgIGluZGVidGVkbmVzcyB0byB5b3VyIHRyZWFzdXJ5IGFuZCBzYXkgdGhhdCB0aGUgY3JpbWluYWwgaW5mb3JtYXRpb24gaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBsb2RnZWQgYWdhaW5zdCBoaW0gd2l0aCBqdXN0aWNlLiBPbiB0aGUgY29udHJhcnksIGhlIHdpbGwgc2F5IGFueXRoaW5nIHJhdGhlcgogICAgICAgICAgICAgICAgICAgIHRoYW4gdGhpcy4gSGUgd2lsbCBicmluZyBmb3J3YXJkIGFsbCBtYW5uZXIgb2YgY2hhcmdlcywgYWxsZWdpbmcgdGhhdCBhIGNhYmFsIGlzCiAgICAgICAgICAgICAgICAgICAgd29ya2luZyBhZ2FpbnN0IGhpbSwgYW5kIHRoYXQgaGUgaGFzIGNvbWUgaW50byB0aGlzIGRhbmdlciBiZWNhdXNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGluZGljdG1lbnRzIHdoaWNoIGhlIGhhcyBwcmVmZXJyZWQgZm9yIGlsbGVnYWwgYWN0aW9ucy4gPC90cmFuc2xhdGlvbj4="
translation['58.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyBpcyB0aGUgbGFzdCByZXNvdXJjZSBvZiB0aG9zZSBjb252aWN0ZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgZmFjdHMgb2YgdGhlIGNhc2XigJR0byBpbnZlbnQgY2hhcmdlcyBhbmQgZXhjdXNlcyB3aGljaCB3aWxsIG1ha2UgeW91CiAgICAgICAgICAgICAgICAgICAgZm9yZ2V0IHRoZSBxdWVzdGlvbiBiZWZvcmUgeW91IGFuZCBnaXZlIGF0dGVudGlvbiB0byBhcmd1bWVudHMgd2hpY2ggYXJlIGFsaWVuCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGFjY3VzYXRpb24uIEJ1dCBJLCBtZW4gb2YgdGhlIGp1cnksIGlmIEkgaGFkIHNlZW4gaW4gdGhlIGxhd3Mgd2hpY2ggaGF2ZQogICAgICAgICAgICAgICAgICAgIGp1c3QgYmVlbiByZWFkIGEgY2xhdXNlIHRvIHRoaXMgZWZmZWN0OiDigJx0aGVzZSBwcm92aXNpb25zIHJlZ2FyZGluZwogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBicmluZyBtYWxpY2lvdXMgY2hhcmdlcyBzaGFsbCBiZSBpbiBmb3JjZSB1bmxlc3MgVGhlb2NyaW5lcywgYQogICAgICAgICAgICAgICAgICAgIGNyaW1pbmFsIGluZm9ybWF0aW9uIGhhdmluZyBiZWVuIGxhaWQgYWdhaW5zdCBoaW0sIHNoYWxsIHNlZSBmaXQgdG8gZGVub3VuY2UKICAgICAgICAgICAgICAgICAgICAgICAgVGh1Y3lkaWRlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIFRodWN5ZGlkZXMgd2FzIGFuIG9yYXRvciBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgcGFydHkgb2YgRGVtb3N0aGVuZXMuPC9ub3RlPiBvciBEZW1vc3RoZW5lcyBvciBhbnkgb3RoZXIgb2YgdGhlIG1lbiBpbgogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBsaWZlLOKAnSBJIHNob3VsZCBoYXZlIGtlcHQgcXVpZXQ7IGJ1dCBhcyBpdCBpcywgSSBmaW5kIHRoYXQgbm8KICAgICAgICAgICAgICAgICAgICBzdWNoIGV4Y3VzZSBpcyB0YWtlbiBpbnRvIGNvbnNpZGVyYXRpb24gaW4gdGhlIGxhd3MsIG5vciBpcyBpdCBuZXcsIHNvIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aG9zZSBub3cgaGVhcmluZyBpdCBmb3IgdGhlIGZpcnN0IHRpbWUgc2hvdWxkIHBheSBhdHRlbnRpb24gdG8gaXQ7IG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnRyYXJ5IGl0IGhhcyBiZWVuIHVzZWQgdGVuIHRob3VzYW5kIHRpbWVzIGJ5IHBlb3BsZSBvbiB0cmlhbC4gPC90cmFuc2xhdGlvbj4="
translation['58.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5JIGFtIGFsc28gdG9sZCwgbWVuIG9mIHRoZSBqdXJ5LCBieSB0aG9zZSB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgb2xkZXIgdGhhbiBJLCB0aGF0IGl0IGlzIHByb3BlciB0aGF0IGluIG5vIGNhc2Ugd2hhdGV2ZXIgc2hvdWxkIHBhcmRvbiBiZSBzaG93bgogICAgICAgICAgICAgICAgICAgIHRvIG9uZSB3aG8gdHJhbnNncmVzc2VzIHRoZSBsYXdzLCBidXQgaWYgcGFyZG9uIGlzIHRvIGJlIHNob3duLCBpdCBzaG91bGQgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhvc2Ugd2hvIGFyZSBoYWJpdHVhbCBvZmZlbmRlcnMgb3IgdG8gdGhvc2Ugd2hvIGJldHJheSB0aGUgbGF3cyBmb3IgYSBicmliZQogICAgICAgICAgICAgICAgICAgIO+8iHN1cmVseSBub3QgdGhhdCHvvIkgYnV0IHRvIHRob3NlIHdobyB0aHJvdWdoIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIGluZXhwZXJpZW5jZSB1bmludGVudGlvbmFsbHkgdHJhbnNncmVzcyBzb21lIHByb3Zpc2lvbiBvZiB0aGUgbGF3LiBObyBtYW4sIEkKICAgICAgICAgICAgICAgICAgICB0YWtlIGl0LCB3b3VsZCBzYXkgdGhhdCBUaGVvY3JpbmVzIGhlcmUgYmVsb25ncyB0byB0aGlzIGxhdHRlciBjbGFzcywgYnV0IG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnRyYXJ5IHRoYXQgdGhlcmUgaXMgbm8gcHJvdmlzaW9uIG9mIHRoZSBsYXcgd2l0aCB3aGljaCBoZSBpcyBub3QgYWNxdWFpbnRlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['58.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IG11c3QsCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlLCB3YXRjaCBoaW0sIGFuZCBoYXZlIHJlZ2FyZCBuZWl0aGVyIHRvIG15IHdvcmRzIG5vciB0byB0aG9zZSB3aGljaAogICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgc3Bva2VuIGJ5IGhpcyBzaWRlLiBGb3IgaXQgaXMgbm90IHJpZ2h0IHRoYXQgdGhvc2Ugd2hvIHNpdCBoZXJlIHRvCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kIHRoZSBsYXdzIHNob3VsZCBwYXkgYXR0ZW50aW9uIHRvIGxvbmcgc3BlZWNoZXMgYW5kIGFjY3VzYXRpb25zLCBidXQgb25seQogICAgICAgICAgICAgICAgICAgIHRvIHRob3NlIHdoaWNoIHlvdSB3aWxsIGFsbCBlYXNpbHkgZm9sbG93LCBhbmQgYnkgdGhlIGhlbHAgb2Ygd2hpY2ggeW91IHdpbGwgYmUKICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IGJ5IGFsbCB0aGUgY2l0aXplbnMgdG8gaGF2ZSBkZWNpZGVkIHRoaXMgaW5mb3JtYXRpb24gaW4gYSBtYW5uZXIgd29ydGh5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGxhd3MuIFlvdSBzaG91bGQgYXNrIGluIHBsYWluIHRlcm1zLCDigJxXaGF0IGRvIHlvdSBtZWFuLAogICAgICAgICAgICAgICAgICAgIFRoZW9jcmluZXMsIGFuZCBhbGwgeW91IHdobyBmb2xsb3cgdGhlIHNhbWUgcHVyc3VpdHMgYXMgaGUgZG9lcz8gRG8geW91IGRlbWFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgd2Ugd2hvIGhhdmUgc3dvcm4gdGhhdCB3ZSB3aWxsIGdpdmUgb3VyIHZlcmRpY3QgYWNjb3JkaW5nIHRvIHRoZSBsYXdzIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgdm90ZSBjb250cmFyeSB0byB0aGUgbGF3cyBiZWNhdXNlIG9mIHlvdXIgc3BlZWNoZXM/IDwvdHJhbnNsYXRpb24+"
translation['58.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5EbyB5b3UgZGVtYW5kIHRoaXMsIHdoZW4gTWljb24sIGFnYWluc3Qgd2hvbSBUaGVvY3JpbmVzCiAgICAgICAgICAgICAgICAgICAgZmlsZWQgaGlzIGRlbnVuY2lhdGlvbiBidXQgZGlkIG5vdCBwcm9jZWVkIHdpdGggaXQsIGhhcyBnaXZlbiBldmlkZW5jZSBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB1cywgYW5kIGhhcyBtYWRlIGhpbXNlbGYgcmVzcG9uc2libGUgdG8gdGhlc2UganVyb3JzP+KAlHdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2VjcmV0YXJ5IGFja25vd2xlZGdlcyB0aGF0IGhlIHJlY2VpdmVkIHRoZSBkZW51bmNpYXRpb24gZnJvbSB0aGUgZGVmZW5kYW50LCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBtYWRlIHJlc3BvbnNpYmxlIGJ5IHRoZSBkZXBvc2l0aW9uIHdoaWNoIHdhcyByZWFkIGEgbGl0dGxlIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgYWdvP+KAlHdoZW4sIGZ1cnRoZXJtb3JlLCB0aGUgb3ZlcnNlZXJzIG9mIHRoZSBwb3J0IGhhdmUsIHVud2lsbGluZ2x5LAogICAgICAgICAgICAgICAgICAgIHRvIGJlIHN1cmUsIHlldCBuZXZlcnRoZWxlc3MsIGdpdmVuIHRoZSBzYW1lIHRlc3RpbW9ueSBhcyB0aGUgb3RoZXJzPy1hbmQgd2hlbiwKICAgICAgICAgICAgICAgICAgICBpbiBhZGRpdGlvbiB0byBhbGwgdGhpcywgdGVzdGltb255IGlzIGdpdmVuLCBhcyB5b3UgaGVhcmQgYSBsaXR0bGUgd2hpbGUgYWdvLCBieQogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBzYXcgdGhlIGRlbnVuY2lhdGlvbiBleHBvc2VkIHRvIHB1YmxpYyB2aWV3LCBhbmQgd2hvIHdlbnQgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIG1hZ2lzdHJhdGVzP+KAnSBObzsgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IHdvdWxkIG5vdCBiZSByaWdodC4gPC90cmFuc2xhdGlvbj4="
translation['58.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBhbSBzdXJlIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIG9mIHRoZSBkZWZlbmRhbnQgYW5kIGhpcyBtYW5uZXIgb2YgbGlmZSB3aWxsIG5vdCBsZWFkIHlvdSB0byBiZWxpZXZlCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgZGVwb3NpdGlvbnMgd2hpY2ggaGF2ZSBiZWVuIHJlYWQgYXJlIGZhbHNlLiBPbiB0aGUgY29udHJhcnksIGhpcwogICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciBmYXIgbW9yZSBjb252aW5jaW5nbHkgdGhhbiB0aGUgd29yZHMgd2hpY2ggaGF2ZSBiZWVuIHNwb2tlbiBwcm92ZXMKICAgICAgICAgICAgICAgICAgICBUaGVvY3JpbmVzIHRvIGJlIHN1Y2ggYXMgSSBwb3J0cmF5IGhpbS4gRm9yIHdoYXQgaXMgdGhlcmUgdGhhdCBhIHNjb3VuZHJlbCBhbmQgYQogICAgICAgICAgICAgICAgICAgIHBldHRpZm9nZ2VyIHdvdWxkIGRvIHRoYXQgaGUgaGFzIG5vdCBkb25lPyBXYXMgaXQgbm90IGJlY2F1c2Ugb2YgaGlzIGV2aWwKICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgdGhhdCBoaXMgYnJvdGhlciwgd2hvIGhlbGQgdGhlIG9mZmljZSBvZiBqdWRnZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBvbmUgb2YgdGhlIFRoZW1vc3RoZXRhZTsgc2VlIG5vdGUgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5hPC9lbXBoPiBvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzMy4xIiB2YWxpZD0ieWVzIj5EZW0uIDMzLjE8L2JpYmw+PC9ub3RlPiBhbmQgd2hvIHdhcyBndWlkZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50J3MgYWR2aWNlLCB3YXMgYnJvdWdodCBpbnRvIHN1Y2ggYmFkIHJlcHV0ZSB3aXRoIHlvdSwgdGhhdCwgd2hlbiB5b3UKICAgICAgICAgICAgICAgICAgICB2b3RlZCBvbiB0aGUgcXVlc3Rpb24gb2YgcmV0YWluaW5nIHRoZSBtYWdpc3RyYXRlcyw8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmE8L2VtcGg+IG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDMzLjEiIHZhbGlkPSJ5ZXMiPkRlbS4gMzMuMTwvYmlibD48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgZG9uZSBhdCB0aGUgZmlyc3QgYXNzZW1ibHkgaW4gZWFjaCBwcnl0YW55LCBvciB0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgdGltZXMgYSB5ZWFyLiDvvIhGb3IgdGhlIHByeXRhbnkgc2VlIG5vdGUgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5hPC9lbXBoPiBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ3LjQyIiB2YWxpZD0ieWVzIj5EZW0uIDQ3LjQyPC9iaWJsPu+8iTwvbm90ZT4gaGUgd2FzIG5vdCBvbmx5CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiByZWplY3RlZCwgYnV0IGNhdXNlZCB0aGUgcmVqZWN0aW9uIG9mIHRoZSBlbnRpcmUgYm9hcmQ/IEFuZCBoYWQgaXQgbm90CiAgICAgICAgICAgICAgICAgICAgYmVlbiB0aGF0IHRocm91Z2ggdGhlIHByYXllcnMgYW5kIGVudHJlYXRpZXMgb2YgaGlzIGZlbGxvdy1qdWRnZXMgYW5kIHRocm91Z2gKICAgICAgICAgICAgICAgICAgICB0aGVpciBwcm9taXNlIHRoYXQgVGhlb2NyaW5lcyBzaG91bGQgbmV2ZXIgYWdhaW4gY29tZSBuZWFyIHRoZSBib2FyZCB5b3Ugd2VyZQogICAgICAgICAgICAgICAgICAgIHBlcnN1YWRlZCB0byBnaXZlIHRoZW0gYmFjayB0aGVpciBjcm93bnMsPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5hPC9lbXBoPiBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ3LjQyIiB2YWxpZD0ieWVzIj5EZW0uIDQ3LjQyPC9iaWJsPu+8iTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgdGVuIGFyY2hvbnMgd29yZSBjcm93bnMgYXMgYSBiYWRnZSBvZiB0aGVpciBpbnZpb2xhYmlsaXR5Ljwvbm90ZT4gd291bGQgdGhleQogICAgICAgICAgICAgICAgICAgIG5vdCBoYXZlIGluY3VycmVkIHRoZSBkZWVwZXN0IHBvc3NpYmxlIGRpc2dyYWNlPyA8L3RyYW5zbGF0aW9uPg=="
translation['58.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5UbyBwcm92ZSB0aGVzZSBmYWN0cyB0aGVyZSBpcyBubyBuZWVkIG9mIG15IGNhbGxpbmcKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMgYmVmb3JlIHlvdSwgZm9yIHlvdSBhbGwga25vdyB0aGF0IGluIHRoZSBhcmNob25zaGlwIG9mIEx5Y2lzY3VzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGluIDxkYXRlIGF1dGhuYW1lPSItMzQzIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzQzIj4zNDM8L2RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIEIuQy48L25vdGU+IHRoZSBUaGVzbW90aGV0YWUgd2VyZSBkZXBvc2VkIGZyb20gb2ZmaWNlIGJ5IHZvdGUgb2YgdGhlIHBvcHVsYXIKICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSBiZWNhdXNlIG9mIFRoZW9jcmluZXMuIFJlbWVtYmVyaW5nIHRoaXMsIHlvdSBvdWdodCB0byBhc3N1bWUgdGhhdCBoZSBpcwogICAgICAgICAgICAgICAgICAgIG5vIGRpZmZlcmVudCBub3cgZnJvbSB3aGF0IGhlIHdhcyB0aGVuLjxkYXRlIGF1dGhuYW1lPSItMzQzIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzQzIj4zNDM8L2RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIEIuQy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm90IGxvbmcKICAgICAgICAgICAgICAgICAgICBhZnRlciBoZSB3YXMgcmVtb3ZlZCBmcm9tIG9mZmljZSwgd2hlbiBoaXMgYnJvdGhlciBkaWVkIGJ5IGEgdmlvbGVudCBkZWF0aCwKICAgICAgICAgICAgICAgICAgICBUaGVvY3JpbmVzIHNob3dlZCBoaW1zZWxmIHNvIHV0dGVybHkgaGVhcnRsZXNzIHRvd2FyZCBoaW0gdGhhdCwgd2hlbiBoZSBoYWQgbWFkZQogICAgICAgICAgICAgICAgICAgIGlucXVpcnkgY29uY2VybmluZyB0aG9zZSB3aG8gaGFkIGRvbmUgdGhlIGRlZWQsIGFuZCBoYWQgbGVhcm5lZCB3aG8gdGhleSB3ZXJlLAogICAgICAgICAgICAgICAgICAgIGhlIGFjY2VwdGVkIGEgYnJpYmUsIGFuZCBsZXQgdGhlIG1hdHRlciBkcm9wLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBoZSBhY2NlcHRlZCB0aGUgYmxvb2QtcHJpY2UgaW5zdGVhZCBvZiBicmluZ2luZyB0aGUgbXVyZGVyZXJzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGp1c3RpY2UuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgYnJvdGhlciBhdCB0aGUgdGltZSBvZiBoaXMgZGVhdGggaGVsZCB0aGUKICAgICAgICAgICAgICAgICAgICBvZmZpY2Ugb2Ygc2FjcmlmaWNlciwgYW5kIHRoaXMgb2ZmaWNlIFRoZW9jcmluZXMgY29udGludWVkIHRvIGZpbGwgaW4gZGVmaWFuY2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbGF3cywgd2l0aG91dCBoYXZpbmcgYmVlbiBkZXNpZ25hdGVkIGJ5IGxvdCB0byBhc3N1bWUgdGhlIG9mZmljZSBvciB0bwogICAgICAgICAgICAgICAgICAgIGZpbGwgdGhlIHZhY2FuY3kuIEhlIHdlbnQgYXJvdW5kIGJld2FpbGluZyBoaXMgYnJvdGhlcidzIGZhdGUgYW5kIGRlY2xhcmluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgd2FzIGdvaW5nIHRvIHN1bW1vbiBEZW1vY2hhcmVzIGJlZm9yZSB0aGUgQXJlb3BhZ3VzLCB1bnRpbCBoZSBtYWRlIHRlcm1zIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aG9zZSBjaGFyZ2VkIHdpdGggdGhlIGNyaW1lLiBBbiBob25vcmFibGUgbWFuIGlzIGhlIGluZGVlZCwgb25lIHdob20geW91IGNhbgogICAgICAgICAgICAgICAgICAgIHRydXN0LCBhIG1hbiBxdWl0ZSBhYm92ZSB0aGUgYXBwZWFsIG9mIG1vbmV5ISBXaHksIGV2ZW4gaGUgd291bGQgbm90IGNsYWltIHRoYXQuCiAgICAgICAgICAgICAgICAgICAgTWVuIHNheSB0aGF0IHdob2V2ZXIgbWVhbnMgdG8gYWRtaW5pc3RlciBwdWJsaWMgYWZmYWlycyB3aXRoIGp1c3RpY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgbW9kZXJhdGlvbiBzaG91bGQgbm90IGhhdmUgc28gbWFueSB3YW50cywgYnV0IHNob3VsZCBiZSBzdXBlcmlvciB0byBhbGwgdGhvc2UKICAgICAgICAgICAgICAgICAgICB0aGluZ3Mgd2hpY2ggbGVhZCBwZW9wbGUgdG8gc3BlbmQgb24gdGhlbXNlbHZlcyBhbGwgdGhhdCB0aGV5IHJlY2VpdmUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCwgdGhlbiwKICAgICAgICAgICAgICAgICAgICB3YXMgaGlzIGNvbmR1Y3Qgd2hlcmUgaGlzIGJyb3RoZXIgd2FzIGNvbmNlcm5lZDsgYnV0IGl0IGlzIHdvcnRoIHlvdXIgd2hpbGUgdG8KICAgICAgICAgICAgICAgICAgICBoZWFyIGhvdyBoZSBoYXMgbWFuYWdlZCBhZmZhaXJzIHNpbmNlIGhlIGNhbWUgZm9yd2FyZCBpbiBwdWJsaWMgbGlmZQogICAgICAgICAgICAgICAgICAgIO+8iGZvciBoZSBkZWNsYXJlcyB0aGF0IGhlIGxvdmVzIHlvdSBuZXh0IGFmdGVyIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZXPvvIkuIEkgd2lsbCBiZWdpbiB3aXRoIGhpcyBjb25kdWN0IHRvd2FyZCB1cy4gSW4gaGlzIGFjY3VzYXRpb24KICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IG15IGZhdGhlciwgbWVuIG9mIHRoZSBqdXJ5LCB3aGVuIGhlIHdhcyBwcm9zZWN1dGluZyB0aGUgaW5kaWN0bWVudCBmb3IKICAgICAgICAgICAgICAgICAgICBpbGxlZ2FsaXR5IGFnYWluc3QgaGltLCBoZSBzdGF0ZWQgdGhhdCBhIHBsb3QgaGFkIGJlZW4gZm9ybWVkIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGJveSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SXQgYXBwZWFycyB0aGF0IHRoZSBmYXRoZXIgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbnQgc3BlYWtlciBoYWQgcHJvcG9zZWQgYSBkZWNyZWUgZ3JhbnRpbmcgdG8gQ2hhcmlkZW11cywgc29uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmFsIElzY2hvbWFjaHVzLCBtYWludGVuYW5jZSBpbiB0aGUgUHJ5dGFuZXVtIGluIHJlY29nbml0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcyByZW5kZXJlZCB0byB0aGUgc3RhdGUgYnkgaGlzIGZhdGhlci4gQ2hhcmlkZW11cyBoYWQsIGhvd2V2ZXIsIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgYWRvcHRlZCBieSBBZXNjaHlsdXMsIGFuZCwgaWYgaGUgYWNjZXB0ZWQgdGhlIGhvbm9yLCB3b3VsZCBoYXZlIGhhZCB0bwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG8gaGlzIGZhdGhlcidzIGZhbWlseSwgYW5kIGluIHRoYXQgY2FzZSBoZSB3b3VsZCBmb3JmZWl0IGFsbCBjbGFpbQogICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgZXN0YXRlIG9mIGhpcyBhZG9wdGl2ZSBmYXRoZXIsIHdoaWNoIHdhcyBhIGxhcmdlIG9uZTsgdGhvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzcGVha2VyIG1haW50YWlucyB0aGF0IHRoZXJlIHdhcyBubyBsaWtlbGlob29kIG9mIHRoaXMgcmVzdWx0LiBUaGVvY3JpbmVzCiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydGVkIHRoYXQsIGluIG1vdmluZyB0aGUgZGVjcmVlLCBFcGljaGFyZXMgd2FzIGFjdGluZyBpbiBjb2xsdXNpb24gd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBQb2x5ZXVjdHVzLCB3aG8gaGFkIG1hcnJpZWQgdGhlIGJveSdzIG1vdGhlciwgYW5kIHdobyB3YW50ZWQgdG8gZ2V0IGNvbnRyb2wKICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHByb3BlcnR5IGZvciBoaW1zZWxmLiDvvIhUaGlzIGlzIG1vc3QgZWFzaWx5IGV4cGxhaW5lZCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYXNzdW1wdGlvbiB0aGF0IHRoZSBtb3RoZXIgd2FzIGhlcnNlbGYgYSBkYXVnaHRlciBvZiBBZXNjaHlsdXMsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+A4b23zrrOu863z4HOv8+CPC9mb3JlaWduPiwgb3IgaGVpcmVzcy4gSW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBjYXNlIGhlciBodXNiYW5kLCBhcyBoZXIgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrrhvbvPgc65zr/PgjwvZm9yZWlnbj4sIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wgdGhlIHByb3BlcnR5Lu+8iSBUaGUganVyeSBmb3VuZCBhZ2FpbnN0IHRoZSBmYXRoZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgRXBpY2hhcmVzLCBhbmQgaGUgd2FzIGZpbmVkIHRlbiB0YWxlbnRzLjwvbm90ZT4gcmVnYXJkaW5nIHdob20gdGhlIGRlY3JlZQogICAgICAgICAgICAgICAgICAgIHdhcyBkcmF3buKAlHRoZSBkZWNyZWUsIHRoYXQgaXMsIGluIHdoaWNoIG15IGZhdGhlciBtb3ZlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgbWFpbnRlbmFuY2UgaW4gdGhlIFByeXRhbmV1bTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+A4b23zrrOu863z4HOv8+CPC9mb3JlaWduPiwgb3IgaGVpcmVzcy4gSW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBjYXNlIGhlciBodXNiYW5kLCBhcyBoZXIgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrrhvbvPgc65zr/PgjwvZm9yZWlnbj4sIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wgdGhlIHByb3BlcnR5Lu+8iSBUaGUganVyeSBmb3VuZCBhZ2FpbnN0IHRoZSBmYXRoZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgRXBpY2hhcmVzLCBhbmQgaGUgd2FzIGZpbmVkIHRlbiB0YWxlbnRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIGJ1aWxkaW5nIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBzaXR1YXRlZCBpbiBvciBuZWFyIHRoZSBhZ29yYSBvbiB0aGUgbm9ydGgtd2VzdCBzbG9wZSBvZiB0aGUgQWNyb3BvbGlzOyBzZWUKICAgICAgICAgICAgICAgICAgICAgICAgVmFuZGVycG9vbCBpbiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZXNwZXJpYTwvdGl0bGU+IDQuIO+8iDxkYXRlIGF1dGhuYW1lPSIxOTM1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIxOTM1Ij4xOTM1PC9kYXRlPu+8iSwgcC4gNDcxLCBub3RlIDQuIEluIGl0IHdlcmUgbWFpbnRhaW5lZCBhcyBndWVzdHMKICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHN0YXRlIE9seW1waWMgdmljdG9ycyBhbmQgYW55IHdobyBoYWQgcmVuZGVyZWQgZXh0cmFvcmRpbmFyeQogICAgICAgICAgICAgICAgICAgICAgICBiZW5lZmFjdGlvbnMgdG8gdGhlIHN0YXRlLjwvbm90ZT4gc2hvdWxkIGJlIGdyYW50ZWQgdG8gQ2hhcmlkZW11cywgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgSXNjaG9tYWNodXMuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlc3BlcmlhPC90aXRsZT4gNC4g77yIPGRhdGUgYXV0aG5hbWU9IjE5MzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9IjE5MzUiPjE5MzU8L2RhdGU+77yJLCBwLiA0NzEsIG5vdGUgNC4gSW4gaXQgd2VyZSBtYWludGFpbmVkIGFzIGd1ZXN0cwogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc3RhdGUgT2x5bXBpYyB2aWN0b3JzIGFuZCBhbnkgd2hvIGhhZCByZW5kZXJlZCBleHRyYW9yZGluYXJ5CiAgICAgICAgICAgICAgICAgICAgICAgIGJlbmVmYWN0aW9ucyB0byB0aGUgc3RhdGUuPC90cmFuc2xhdGlvbj4="
translation['58.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgVGhlb2NyaW5lcyBhc3NlcnRlZCB0aGF0LCBpZgogICAgICAgICAgICAgICAgICAgIHRoZSBib3kgc2hvdWxkIHJldHVybiB0byBoaXMgZmF0aGVyJ3MgaG91c2UsIGhlIHdvdWxkIGJlIGZvdW5kIHRvIGhhdmUgbG9zdCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgZXN0YXRlIHdoaWNoIEFlc2NoeWx1cywgaGlzIGFkb3B0aXZlIGZhdGhlciwgaGFkIGdpdmVuIGhpbS4gVGhpcyBhc3NlcnRpb24KICAgICAgICAgICAgICAgICAgICB3YXMgZmFsc2UsIGZvciBubyBzdWNoIHRoaW5nLCBtZW4gb2YgdGhlIGp1cnksIGhhcyBldmVyIGhhcHBlbmVkIHRvIGFueSBhZG9wdGVkCiAgICAgICAgICAgICAgICAgICAgcGVyc29uLiBIZSBtYWRlIHRoZSBmdXJ0aGVyIGFzc2VydGlvbiB0aGF0IFBvbHlldWN0dXMsIHRoZSBodXNiYW5kIG9mIHRoZSBib3kncwogICAgICAgICAgICAgICAgICAgIG1vdGhlciwgaGFkIGJlZW4gcmVzcG9uc2libGUgZm9yIHRoZSB3aG9sZSBzY2hlbWUsIHNpbmNlIGhlIHdpc2hlZCB0byByZXRhaW4KICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uIG9mIHRoZSBib3kncyBwcm9wZXJ0eS4gVGhlIGp1cnltZW4gd2VyZSBpbmNlbnNlZCBhdCBoaXMgYXNzZXJ0aW9ucwogICAgICAgICAgICAgICAgICAgIGFuZCBoZWxkIHRoYXQsIHdoaWxlIHRoZSBkZWNyZWUgaXRzZWxmIGFuZCB0aGUgZ3JhbnQgd2VyZSBib3RoIGxlZ2FsLCB0aGUgYm95CiAgICAgICAgICAgICAgICAgICAgd291bGQgaW4gZmFjdCBiZSByb2JiZWQgb2YgaGlzIGVzdGF0ZTsgYW5kIHRoZXkgZmluZWQgbXkgZmF0aGVyIHRlbiB0YWxlbnRzIGFzCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgaW4gdGhlIHNjaGVtZSB3aXRoIFBvbHlldWN0dXMsIGFuZCBnYXZlIGNyZWRlbmNlIHRvIFRoZW9jcmluZXMgYXMgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgY29tZSB0byB0aGUgYm95J3MgZGVmZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['58.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoLCBvcgogICAgICAgICAgICAgICAgICAgIHN1YnN0YW50aWFsbHkgc3VjaCwgd2VyZSB0aGUgcHJvY2VlZGluZ3MgaW4gY291cnQuIEJ1dCB3aGVuIHRoaXMgd29ydGh5IGZlbGxvdwogICAgICAgICAgICAgICAgICAgIHNhdyB0aGF0IHRoZSBwZW9wbGUgd2VyZSBmaWxsZWQgd2l0aCB3cmF0aCwgYW5kIHRoYXQgaGUgaGltc2VsZiBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGJlbGlldmVkLCBhcyBvbmUgd2hvIHdhcyBub3Qgd2hvbGx5IGRlcHJhdmVkLCBoZSBzdW1tb25lZCBQb2x5ZXVjdHVzIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICBhcmNob24gYW5kIGxvZGdlZCBhbiBpbmRpY3RtZW50IGFnYWluc3QgaGltIGZvciBtYWx0cmVhdG1lbnQgb2YgYW4gb3JwaGFuLCBhbmQKICAgICAgICAgICAgICAgICAgICBwdXQgdGhlIGNhc2UgaW4gdGhlIGhhbmRzIG9mIHRoZSBhc3Nlc3NvciBNbmVzYXJjaGlkZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkVhY2ggb2YgdGhlIHRocmVlIGNoaWVmIGFyY2hvbnMg77yIdGhlIEVwb255bXVzLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgS2luZywgYW5kIHRoZSBQb2xlbWFyY2jvvIkgaGFkIHR3byBhc3Nlc3NvcnMgdG8gd2hvbSBoZSBjb3VsZAogICAgICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZSB0aGUgY29uZHVjdCBvZiBidXNpbmVzcyBmb3IgaGltLiBUaGlzIGNhc2Ugd291bGQgYmVsb25nIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBFcG9ueW11cy48L25vdGU+IFdoZW4sIGhvd2V2ZXIsIGhlIGhhZCByZWNlaXZlZCB0d28gaHVuZHJlZCBkcmFjaG1hZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgUG9seWV1Y3R1cyBhbmQgaGFkIHNvbGQgZm9yIGEgdHJpZmxpbmcgc3VtIHRob3NlIGF3ZnVsIGNoYXJnZXMgZm9yIHdoaWNoIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGZpeGVkIHRoZSBkYW1hZ2VzIGluIG15IGZhdGhlcidzIGNhc2UgYXQgdGVuIHRhbGVudHMsIGhlIGRyb3BwZWQgdGhlIG1hdHRlciwKICAgICAgICAgICAgICAgICAgICB3aXRoZHJldyB0aGUgaW5kaWN0bWVudCwgYW5kIGxlZnQgdGhlIG9ycGhhbiBpbiB0aGUgbHVyY2guPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNhbGwsIHBsZWFzZSwgdGhlIHdpdG5lc3NlcyB3aG8gc3VwcG9ydCB0aGVzZSBzdGF0ZW1lbnRzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgbm93IG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIGhhZCBiZWVuIHdlbGwtdG8tZG8sIG1lbiBvZiB0aGUganVyeSwgYW5kIGFibGUgdG8gcHJvdmlkZSBhIHRob3VzYW5kCiAgICAgICAgICAgICAgICAgICAgZHJhY2htYWUsIGhlIHdvdWxkIGhhdmUgZ290IG9mZiBlbnRpcmVseSBmcmVlIGZyb20gdGhlIGluZGljdG1lbnQgZm9yCiAgICAgICAgICAgICAgICAgICAgaWxsZWdhbGl0eTsgZm9yIHRoYXQgd2FzIHRoZSBzdW0gdGhlIGRlZmVuZGFudCBkZW1hbmRlZCBvZiBoaW0uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNhbGwsIHBsZWFzZSwgUGhpbGlwcGlkZXMgb2YgUGFlYW5pYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QYWVhbmlhLCBhIGRlbWUgb2YgdGhlIHRyaWJlIFBhbmRpb25pcy48L25vdGU+IHRvIHdob20gdGhpcwogICAgICAgICAgICAgICAgICAgIGZlbGxvdyBUaGVvY3JpbmVzIG1hZGUgdGhpcyBzdGF0ZW1lbnQsIGFuZCB0aGUgb3RoZXJzIHdobyBrbm93IHRoYXQgaGUgbWFkZQogICAgICAgICAgICAgICAgICAgICAgICBpdC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['58.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdAogICAgICAgICAgICAgICAgICAgIFRoZW9jcmluZXMsIG1lbiBvZiB0aGUganVyeSwgaWYgaGUgaGFkIGJlZW4gb2ZmZXJlZCB0aGUgdGhvdXNhbmQgZHJhY2htYWUsIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB3aXRoZHJhd24gdGhlIGluZGljdG1lbnQgYWdhaW5zdCBteSBmYXRoZXIsIEkgdGhpbmsgdGhhdCB5b3UgYXJlIGFsbAogICAgICAgICAgICAgICAgICAgIGNvbnZpbmNlZCwgZXZlbiBpZiBubyB3aXRuZXNzIGhhZCBzbyB0ZXN0aWZpZWQuIFRvIHByb3ZlLCBob3dldmVyLCB0aGF0IGhlIGhhcwogICAgICAgICAgICAgICAgICAgIHN1bW1vbmVkIG1hbnkgb3RoZXIgcGVvcGxlIGFuZCBwcmVmZXJyZWQgaW5kaWN0bWVudHMgYWdhaW5zdCB0aGVtLCBhbmQgdGhlbiBoYXMKICAgICAgICAgICAgICAgICAgICBjb21wcm9taXNlZCB0aGUgbWF0dGVyLCBhbmQgdGhhdCBoZSBpcyBpbiB0aGUgaGFiaXQgb2YgZGVzaXN0aW5nIGZyb20KICAgICAgICAgICAgICAgICAgICBwcm9zZWN1dGlvbiBvbiByZWNlaXB0IG9mIHNtYWxsIGJyaWJlcywgSSBzaGFsbCBjYWxsIGJlZm9yZSB5b3UgdGhlIHZlcnkgcGVyc29ucwogICAgICAgICAgICAgICAgICAgIHdobyBwYWlkIGhpbSwgaW4gb3JkZXIgdGhhdCB5b3UgbWF5IG5vdCBiZWxpZXZlIGhpbSB3aGVuIGhlIGRlY2xhcmVzIHRoYXQgaXQgaXMKICAgICAgICAgICAgICAgICAgICBoZSB3aG8ga2VlcHMgd2F0Y2ggb3ZlciB0aG9zZSB3aG8gcHJvcG9zZSBpbGxlZ2FsIG1lYXN1cmVzLCBhbmQgdGhhdCB3aGVuCiAgICAgICAgICAgICAgICAgICAgaW5kaWN0bWVudHMgZm9yIGlsbGVnYWxpdHkgYXJlIGRvbmUgYXdheSB3aXRoIGl0IGlzIHRoZSBydWluIG9mIHlvdXIgZGVtb2NyYWN5LgogICAgICAgICAgICAgICAgICAgIO+8iEZvciBpdCBpcyBpbiB0aGlzIHdheSB0aGF0IGFsbCB0aG9zZSB3aG8gc2VsbCBldmVyeXRoaW5nIGZvciBtb25leSBhcmUKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgaGFiaXQgb2YgdGFsa2luZy7vvIkgPC90cmFuc2xhdGlvbj4="
translation['58.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q2FsbCwgcGxlYXNlLCBBcmlzdG9tYWNodXMsIHNvbiBvZiBDcml0b2RlbXVzLCBvZgogICAgICAgICAgICAgICAgICAgICAgICBBbG9wZWPDqiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWxvcGVjw6osIGEgZGVtZQogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgdHJpYmUgQW50aW9jaGlzLjwvbm90ZT4gZm9yIGl0IGlzIGhlIHdobyBwYWlk4oCUb3IgcmF0aGVyIGluCiAgICAgICAgICAgICAgICAgICAgd2hvc2UgaG91c2Ugd2VyZSBwYWlk4oCUdGhlIG1pbmEgYW5kIGEgaGFsZiB0byB0aGlzIG1hbiB3aG8gY2Fubm90IGJlCiAgICAgICAgICAgICAgICAgICAgYnJpYmVkLCBpbiB0aGUgbWF0dGVyIG9mIHRoZSBkZWNyZWUgd2hpY2ggQW50aW1lZG9uIHByb3Bvc2VkIG9uIGJlaGFsZiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUZW5lZG9zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUZW5lZG9zIj5UZW5lZG9zPC9wbGFjZU5hbWU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRlbmVkb3MiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRlbmVkb3MiPlRlbmVkb3M8L3BsYWNlTmFtZT4sIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGlzbGFuZCBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NSI+QWVnZWFuPC9wbGFjZU5hbWU+LCBvZmYgdGhlIHdlc3QKICAgICAgICAgICAgICAgICAgICAgICAgY29hc3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYxMyI+UGhyeWdpYTwvcGxhY2VOYW1lPi48L25vdGU+PHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUZW5lZG9zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUZW5lZG9zIj5UZW5lZG9zPC9wbGFjZU5hbWU+LCBhbgogICAgICAgICAgICAgICAgICAgICAgICBpc2xhbmQgaW4gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzUiPkFlZ2VhbjwvcGxhY2VOYW1lPiwgb2ZmIHRoZSB3ZXN0CiAgICAgICAgICAgICAgICAgICAgICAgIGNvYXN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjEzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MTMiPlBocnlnaWE8L3BsYWNlTmFtZT4uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgYWxzbyBpbiBzZXF1ZW5jZSB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucyBvZiB0aGUgc2FtZSBzb3J0LCBhbmQgdGhhdCBvZiBIeXBlcmVpZGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgcHJvbWluZW50IEF0aGVuaWFuIG9yYXRvciBhbmQgc3RhdGVzbWFuLjwvbm90ZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMuIEZvciB0aGlzIGdvZXMgYmV5b25kIGFsbCBlbHNl4oCUdGhhdCB0aGUgZmVsbG93IHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIG1vc3QgZ2xhZCwgYnkgc2VsbGluZyBpbmRpY3RtZW50cyB0byBnZXQgbW9uZXkgZnJvbSBtZW4sIGZyb20gd2hvbSBubyBvbmUgZWxzZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHRoaW5rIG9mIGRlbWFuZGluZyBpdC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgdGhlc2UgbWVuCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgdG9vIGluZmx1ZW50aWFsIHRvIGZlYXIgYmxhY2ttYWlsIGZyb20gYSBtYW4gbGlrZQogICAgICAgICAgICAgICAgICAgICAgICBUaGVvY3JpbmVzLjwvbm90ZT48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['58.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgaGUgd2lsbAogICAgICAgICAgICAgICAgICAgIHByZXNlbnRseSBzYXkgdGhhdCB0aGUgY3JpbWluYWwgaW5mb3JtYXRpb24gaGFzIGJlZW4gbG9kZ2VkIGFnYWluc3QgaGltIGZvciB0aGlzCiAgICAgICAgICAgICAgICAgICAgcHVycG9zZSwgdGhhdCBoZSBtYXkgbm90IHByb2NlZWQgd2l0aCB0aGUgaW5kaWN0bWVudCB3aGljaCBoZSBwcmVmZXJyZWQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzIG9yIHdpdGggdGhhdCBhZ2FpbnN0IFRodWN5ZGlkZXM7IGZvciBoZSBpcyBhIGNsZXZlciBmZWxsb3cgYXQgbHlpbmcKICAgICAgICAgICAgICAgICAgICBhbmQgYXQgc2F5aW5nIHdoYXQgbGFja3MgYWxsIGZvdW5kYXRpb24uIEkgaGF2ZSBsb29rZWQgaW50byB0aGlzIG1hdHRlciBhbHNvLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgYW5kIHdpbGwgc2hvdyB5b3UgdGhhdCB0aGUgc3RhdGUgc3VmZmVycyBub3QgdGhlIHNsaWdodGVzdAogICAgICAgICAgICAgICAgICAgIGhhcm0sIHdoZXRoZXIgdGhlIGRlY3JlZSBvZiBUaHVjeWRpZGVzIGlzIHJhdGlmaWVkLCBvciB3aGV0aGVyIGl0IGlzIGFubnVsbGVkLgogICAgICAgICAgICAgICAgICAgIEFuZCB5ZXQgaXQgaXMgbm90IHJpZ2h0IHRvIGJyaW5nIHVwIGEgZGVmZW5jZSBvZiB0aGlzIHNvcnQgYmVmb3JlIG1lbiB3aG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHN3b3JuIHRvIGdpdmUgYSB2ZXJkaWN0IGFjY29yZGluZyB0byB0aGUgbGF3cy4gWW91IHdpbGwsIGhvd2V2ZXIsIHByZXNlbnRseQogICAgICAgICAgICAgICAgICAgIGxlYXJuIGZyb20gdGhlIGluZGljdG1lbnQgaXRzZWxmLCB0aGF0IGl0IGlzIG1lcmVseSBhIHByZXRleHQgdG8gb2Zmc2V0IHRoZQogICAgICAgICAgICAgICAgICAgIGNyaW1pbmFsIGluZm9ybWF0aW9uLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZXNlIGluZGljdG1lbnRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVyZSB3ZXJlIHR3byBpbmRpY3RtZW50cywgb25lIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMgYW5kIG9uZSBhZ2FpbnN0IFRodWN5ZGlkZXMuPC9ub3RlPjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkluZGljdG1lbnRzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5kaWN0bWVudHM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5kaWN0bWVudHM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hldGhlciB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNyZWVzIHN0YW5kIGFzIHRoZXkgYXJlLCBtZW4gb2YgdGhlIGp1cnksIG9yIGFyZSBhbm51bGxlZCDvvIhmb3IgaXQKICAgICAgICAgICAgICAgICAgICBtYWtlcyBubyBkaWZmZXJlbmNlIHRvIG1l77yJLCB3aGF0IGRvZXMgdGhlIHN0YXRlIGVpdGhlciBnYWluIG9yIGxvc2U/CiAgICAgICAgICAgICAgICAgICAgTm90aGluZywgaW4gbXkgb3Bpbmlvbi4gVGhleSBzYXkgdGhhdCB0aGUgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzE4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzMTgiPkFlbm9zPC9wbGFjZU5hbWU+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzE4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzMTgiPkFlbm9zPC9wbGFjZU5hbWU+LCBhIHRvd24gb24gdGhlIHNvdXRoIGNvYXN0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4uPC9ub3RlPiBwYXkgbm8gaGVlZCB0bwogICAgICAgICAgICAgICAgICAgIG91ciBzdGF0ZSwgYW5kIHRoYXQgdGhpcyBoYXMgY29tZSBhYm91dCBiZWNhdXNlIG9mIHRoaXMgZmVsbG93IFRoZW9jcmluZXMuIEZvcgogICAgICAgICAgICAgICAgICAgIGJlaW5nIGhhcmFzc2VkIGJ5IHRoZSBmYWxzZSBhbmQgbWFsaWNpb3VzIGNoYXJnZXMgb2YgdGhpcyBtYW4gYXQgdGhlIHRpbWUgd2hlbgogICAgICAgICAgICAgICAgICAgIHNvbWUgb2YgdGhlbSB3ZXJlIHR1cm5pbmcgdG8gUGhpbGlwIGFuZCBvdGhlcnMgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIzMTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjMxOCI+QWVub3M8L3BsYWNlTmFtZT4sIGEgdG93biBvbiB0aGUgc291dGggY29hc3Qgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPi48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCBsZWFybmluZyB0aGF0IHRoZSBkZWNyZWUgd2hpY2gKICAgICAgICAgICAgICAgICAgICBDaGFyaW51cyBoYWQgcHJldmlvdXNseSBpbmRpY3RlZCBoYWQgYWdhaW4gYmVlbiBpbmRpY3RlZCBhcwogICAgICAgICAgICAgICAgICAgIGlsbGVnYWws4oCUdGhlIGRlY3JlZSwgdGhhdCBpcywgd2hpY2ggVGh1Y3lkaWRlcyBwcm9wb3NlZCBhbmQgd2hpY2ggaGFkCiAgICAgICAgICAgICAgICAgICAgdG8gZG8gd2l0aCB0aGVpciBjb250cmlidXRpb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SXQgYXBwZWFycyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBBdGhlbmlhbiBnZW5lcmFsIENoYXJlcyBoYWQgZml4ZWQgdGhlIHRyaWJ1dGUgdG8gYmUgcGFpZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zIGF0IGEgbW9kZXJhdGUgc3VtLCBhbmQgdGhhdCBUaHVjeWRpZGVzIGhhZCBwcm9wb3NlZCBhIGRlY3JlZQogICAgICAgICAgICAgICAgICAgICAgICBhcHByb3ZpbmcgdGhpcyBhY3QuIFRoaXMgZGVjcmVlIHdhcyBpbmRpY3RlZCBhcyBpbGxlZ2FsLCBmaXJzdCBieSBDaGFyaW51cwogICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlbiBieSBUaGVvY3JpbmVzLiBUaGUgcmVzdWx0IHdhcyB0aGF0IHRoZSBBZW5pYW5zIHJldm9sdGVkIGFuZCB3ZW50CiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXIgdG8gdGhlIHNpZGUgb2YgUGhpbGlwLjwvbm90ZT47IGFuZCBsZWFybmluZyBmdXJ0aGVybW9yZSB0aGF0IG5vCiAgICAgICAgICAgICAgICAgICAgY29uY2x1c2lvbiB3YXMgYmVpbmcgcmVhY2hlZCBpbiB0aGUgbWF0dGVyLCA8L3RyYW5zbGF0aW9uPg=="
translation['58.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5idXQgdGhhdCwgd2hpbGUgdGhlIHBlb3BsZSB3ZXJlIHJlYWR5IHRvIGdyYW50IHRoYXQgdGhlIEFlbmlhbnMgc2hvdWxkIHBheSB0aGUKICAgICAgICAgICAgICAgICAgICBjb250cmlidXRpb24gd2hpY2ggdGhleSBoYWQgYWdyZWVkIHVwb24gd2l0aCB0aGUgZ2VuZXJhbCBDaGFyZXMsIHRoaXMgYWJvbWluYWJsZQogICAgICAgICAgICAgICAgICAgIGZlbGxvdyBoYWQgdGFrZW4gdXBvbiBoaW1zZWxmIHRvIGNhcnJ5IG9uIHRoZSBzYW1lIHByYWN0aWNlcyBhcyB0aGUgdHJhaXRvcgogICAgICAgICAgICAgICAgICAgIENoYXJpbnVz4oCUbGVhcm5pbmcgYWxsIHRoaXMsIEkgc2F5LCB0aGV5IHRvb2sgdGhlIGNvdXJzZSB3aGljaAogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2l0eSBmb3JjZWQgdXBvbiB0aGVtLCBhbmQgY2hvc2UgdGhlIGxlYXN0IG9mIHRoZSBldmlscyBiZWZvcmUgdGhlbS4gWWV0CiAgICAgICAgICAgICAgICAgICAgd2hhdCBtdXN0IHdlIGFzc3VtZSB0aGVpciBzdWZmZXJpbmdzIGF0IHRoZSBoYW5kcyBvZiB0aG9zZSB3aG8gd2VyZSBwcmVmZXJyaW5nCiAgICAgICAgICAgICAgICAgICAgaW5kaWN0bWVudHMgaGVyZSB0byBoYXZlIGJlZW4sIHdoZW4gaXQgc2VlbWVkIHRvIHRoZSBBZW5pYW5zIHByZWZlcmFibGUgdG8KICAgICAgICAgICAgICAgICAgICByZXZvbHQgZnJvbSB1cywgdG8gcmVjZWl2ZSBhIGdhcnJpc29uLCBhbmQgdG8gYmUgc3ViamVjdCB0byBiYXJiYXJpYW5zPyBCdXQgeW91CiAgICAgICAgICAgICAgICAgICAgYWxvbmUsIEkgdGhpbmssIGFyZSBhYmxlIHRvIGVuZHVyZSB0aGUgd2lja2VkbmVzcyBvZiB0aGVzZSBtZW4sIHlvdSBhbG9uZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgbm8gb25lIGJlc2lkZXMgYW1vbmcgYWxsIHRoZSBHcmVla3MhIDwvdHJhbnNsYXRpb24+"
translation['58.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB5b3Ugb3VnaHQgbm90LCB0aGVuLCB3aGV0aGVyIG9uCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudCBvZiB0aGUgaW5kaWN0bWVudHMgd2hpY2ggaGF2ZSBiZWVuIHJlYWQsIG9yIGZvciBhbnkgb3RoZXIgcmVhc29uLCB0bwogICAgICAgICAgICAgICAgICAgIGFjcXVpdCBUaGVvY3JpbmVzIGluIGRlZmlhbmNlIG9mIGFsbCB0aGUgbGF3cyBjb25jZXJuaW5nIGNyaW1pbmFsIGluZm9ybWF0aW9ucywKICAgICAgICAgICAgICAgICAgICBpcyByZWFzb25hYmx5IGNsZWFyIGZyb20gd2hhdCBoYXMgYmVlbiBzYWlkLiBJIHRoaW5rLCBob3dldmVyLCBtZW4gb2YgdGhlIGp1cnksCiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3UgYXJlIG5vdCBhd2FyZSBvZiB0aGUgZXhjdXNlcyBvZiB0aGVzZSBtZW4sIG9mIHRoZWlyIGFjY3VzYXRpb25zLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVpciBwcmV0ZW5kZWQgZW5taXRpZXMuIDwvdHJhbnNsYXRpb24+"
translation['58.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgeW91IGhhdmUgbm90CiAgICAgICAgICAgICAgICAgICAgaW5mcmVxdWVudGx5IHNlZW4gdGhlbSBpbiB0aGUgY291cnQtcm9vbXMgYW5kIG9uIHRoZSBwbGF0Zm9ybSwgZGVjbGFyaW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBwZXJzb25hbCBmb2VzIHRvIG9uZSBhbm90aGVyLCBidXQgaW4gcHJpdmF0ZSBmb2xsb3dpbmcgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBwdXJzdWl0cyBhbmQgc2hhcmluZyB0aGUgcHJvZml0czsgYXQgb25lIHRpbWUgcmV2aWxpbmcgYW5kIGFidXNpbmcgb25lIGFub3RoZXIKICAgICAgICAgICAgICAgICAgICBpbiBmb3VsZXN0IHRlcm1zLCBhbmQgYSBsaXR0bGUgbGF0ZXIgYXNzb2NpYXRpbmcgaW4gZmFtaWx5IGZlc3RpdmFscyB3aXRoIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBwZW9wbGUsIGFuZCB0YWtpbmcgcGFydCBpbiB0aGUgc2FtZSBzYWNyaWZpY2VzLiBBbmQgbm90IG9uZSBvZiB0aGVzZSB0aGluZ3MKICAgICAgICAgICAgICAgICAgICBpcyBwZXJoYXBzIHRvIGJlIHdvbmRlcmVkIGF0LiBGb3IgdGhlIG1lbiBhcmUgYnkgbmF0dXJlIGJhc2UsIGFuZCB0aGV5IHNlZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91IGFjY2VwdCBzdWNoIGV4Y3VzZXM7IHNvIHdoYXQgaXMgdG8gcHJldmVudCB0aGVpciB1c2luZyB0aGVtIGFuZCB0cnlpbmcgdG8KICAgICAgICAgICAgICAgICAgICBkZWNlaXZlIHlvdT8gPC90cmFuc2xhdGlvbj4="
translation['58.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbXkgcGFydCBJIGhvbGQgdGhhdCBpdCBpcwogICAgICAgICAgICAgICAgICAgIGFic29sdXRlbHkgeW91ciBkdXR5LCBtZW4gb2YgdGhlIGp1cnksIHRvIGZpeCB5b3VyIGF0dGVudGlvbiBvbiB0aGUgbWF0dGVyIGF0CiAgICAgICAgICAgICAgICAgICAgaXNzdWUgYW5kIG9uIG5vdGhpbmcgZWxzZSwgYW5kIHRoZW4sIGlmIG15IHBsZWEgc2VlbXMgdG8geW91IGp1c3QgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkYW5jZSB3aXRoIGxhdywgdG8gZ2l2ZSBtZSB5b3VyIHN1cHBvcnQsIGNhcmluZyBub3RoaW5nIGZvciB0aGUgZmFjdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaXQgaXMgbm90IERlbW9zdGhlbmVzIHdobyBwcmVmZXJzIHRoZSBjaGFyZ2VzLCBidXQgYSBtZXJlIHN0cmlwbGluZy4gWW91IGFyZQogICAgICAgICAgICAgICAgICAgIGJvdW5kIGFsc28gdG8gaG9sZCB0aGF0IHRoZSBsYXdzIGFyZSBub3QgbW9yZSBiaW5kaW5nIHdoZW4gb25lIHByZXNlbnRzIHRoZW0gdG8KICAgICAgICAgICAgICAgICAgICB5b3UgY2FyZWZ1bGx5IGluIHJoZXRvcmljYWwgbGFuZ3VhZ2UgdGhhbiB3aGVuIHRoZXkgYXJlIHJlY2l0ZWQgaW4gdGhlIHNwZWVjaCBvZgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGRheS4gTm87IHRoZXkgYXJlIHRoZSBzYW1lIGxhd3M7IGFuZCB5b3Ugc2hvdWxkIGFsbCB0aGUgbW9yZSByZWFkaWx5IGdpdmUKICAgICAgICAgICAgICAgICAgICBhaWQgdG8gdGhlIHlvdW5nIGFuZCBpbmV4cGVyaWVuY2VkLCBzaW5jZSB0aGV5IGFyZSBsZXNzIGxpa2VseSB0byBsZWFkIHlvdQogICAgICAgICAgICAgICAgICAgIGFzdHJheS4gPC90cmFuc2xhdGlvbj4="
translation['58.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhhdCB0aGUgY2FzZSBpcyB0aGUgZXhhY3QKICAgICAgICAgICAgICAgICAgICBvcHBvc2l0ZSBvZiB3aGF0IG15IG9wcG9uZW50IGFzc2VydHMs4oCUdGhhdCBpdCBpcyBub3QgaGUsIGJ1dCBJLCB3aG8gYW0KICAgICAgICAgICAgICAgICAgICB0aGUgdmljdGltIG9mIGEgY2FiYWwsIGFuZCB0aGF0LCBhZnRlciBjZXJ0YWluIHBlcnNvbnMgaGFkIGRlY2xhcmVkIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGFpZCBtZSBpbiBteSBzdWl0LCBJIGhhdmUgYmVlbiBiZXRyYXllZCBiZWNhdXNlIG9mIHRoZSBjbGlxdWVzIGZvcm1lZCBieQogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbizigJRhbGwgdGhpcyB3aWxsIGJlIG1hZGUgY2xlYXIgdG8geW91IGluIHRoZSBmb2xsb3dpbmcgd2F5LgogICAgICAgICAgICAgICAgICAgIExldCB0aGUgY3JpZXIgaGVyZSBjYWxsIERlbW9zdGhlbmVzLiBIZSB3aWxsIG5vdCBjb21lIGZvcndhcmQuIFRoZSByZWFzb24gaXMsCiAgICAgICAgICAgICAgICAgICAgbm90IHRoYXQgSSBoYXZlIGJlZW4gaW5kdWNlZCBieSBjZXJ0YWluIHBlcnNvbnMgdG8gbG9kZ2UgY3JpbWluYWwgaW5mb3JtYXRpb24KICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHRoaXMgbWFuLCBidXQgdGhhdCBoZSBhbmQgdGhlIG9uZSBqdXN0IG5vdyBtZW50aW9uZWQgaGF2ZSBjb21lIHRvIHRlcm1zCiAgICAgICAgICAgICAgICAgICAgd2l0aCBvbmUgYW5vdGhlci4gVG8gcHJvdmUgdGhhdCB0aGlzIGlzIHRydWUsIEkgd2lsbCBjb21wZWwgdG8gdGVzdGlmeSBib3RoCiAgICAgICAgICAgICAgICAgICAgQ2xlaW5vbWFjaHVzLCB3aG8gYnJvdWdodCB0aGVtIHRvZ2V0aGVyLCBhbmQgRXVidWxpZGVzLCB3aG8gd2FzIHdpdGggdGhlbSBpbgogICAgICAgICAgICAgICAgICAgICAgICBDeW5vc2FyZ2VzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgZ3ltbmFzaXVtIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB3aGljaCB3YXMgYSBjb21tb24gcGxhY2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGV6dm91cy48L25vdGU+OyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2hpY2ggd2FzIGEgY29tbW9uIHBsYWNlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlenZvdXMuPC90cmFuc2xhdGlvbj4="
translation['58.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgSSB3aWxsIGZ1cnRoZXIKICAgICAgICAgICAgICAgICAgICBwcm9kdWNlIHdoYXQgeW91IHdpbGwgYWxsIGFja25vd2xlZGdlIHdoZW4geW91IGhhdmUgaGVhcmQgaXQsIHRvIGJlLCBub3QgYQogICAgICAgICAgICAgICAgICAgIHdlYWtlciwgYnV0IGEgc3Ryb25nZXIgcHJvb2YgdGhhdCBteSBzdGF0ZW1lbnQgaXMgdHJ1ZS4gRm9yIFRoZW9jcmluZXMgaGVyZSwKICAgICAgICAgICAgICAgICAgICB3aGVuIHByb3NlY3V0aW5nIGZvciBpbGxlZ2FsIGFjdGlvbiB0aGlzIGFib21pbmFibGUgcGVyc29uLCBhcyBoZSB3aWxsIHByZXNlbnRseQogICAgICAgICAgICAgICAgICAgIGNhbGwgaGltLCBhbmQgdGhlIG9uZSB3aG8gaXMgdGhlIGNhdXNlIG9mIGhpcyBwcmVzZW50IHRyb3VibGVzLCBvcGVubHkKICAgICAgICAgICAgICAgICAgICBkaXNjaGFyZ2VkIGhpbSBmcm9tIHRoZSBpbmRpY3RtZW50LCBpbiB3aGljaCBoZSBoYWQgZml4ZWQgdGhlIHBlbmFsdHkgYXQgdGVuCiAgICAgICAgICAgICAgICAgICAgdGFsZW50cy4gSG93PyBCeSBkb2luZyBub3RoaW5nIHN0YXJ0bGluZywgYnV0IHRoZSB2ZXJ5IHRoaW5nIHRoYXQgb3RoZXJzIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIHN0YW1wIGhhdmUgZG9uZS4gV2hlbiB0aGUgaW5kaWN0bWVudCB3YXMgY2FsbGVkLCBzb21lb25lIGZpbGVkIGFuIGFmZmlkYXZpdCBmb3IKICAgICAgICAgICAgICAgICAgICBwb3N0cG9uZW1lbnQsIGRlY2xhcmluZyB0aGF0IERlbW9zdGhlbmVzIHdhcyBpbGzigJREZW1vc3RoZW5lcywgd2hvIHdhcwogICAgICAgICAgICAgICAgICAgIGdvaW5nIGFib3V0IGFuZCBhYnVzaW5nIEFlc2NoaW5lcy4gVGhpcyBlbmVteSBvZiBoaXMsIHRoZW4sIHRoaXMgZmVsbG93IGhhcyBsZXQKICAgICAgICAgICAgICAgICAgICBvZmYsIGFuZCBoZSBuZWl0aGVyIGF0IHRoZSB0aW1lIGZpbGVkIGEgY291bnRlci1hZmZpZGF2aXQsIG5vciBkaWQgaGUKICAgICAgICAgICAgICAgICAgICBzdWJzZXF1ZW50bHkgY2FsbCB0aGUgY2FzZSBmb3IgdHJpYWwuIEFyZSBub3QgdGhlc2UgbWVuIG1hbmlmZXN0bHkgaG9vZHdpbmtpbmcKICAgICAgICAgICAgICAgICAgICB5b3UsIHdoZW4geW91IGVudGVydGFpbiB0aGUgaWRlYSB0aGF0IHRoZXkgYXJlIHBlcnNvbmFsIGZvZXM/PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgdGhlIGRlcG9zaXRpb25zLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgcmlnaHQsIHRoZW4sIG1lbiBvZiB0aGUganVyeSwgdGhhdCB5b3UgYW55IG1vcmUgdGhhbiB3ZSBzaG91bGQgbGlzdGVuIHRvIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIHdpbGwgZGVjbGFyZSB0aGF0IHRoZXkgYXJlIGdvaW5nIHRvIHNwZWFrIGluIHRoZSBpbnRlcmVzdCBvZiBUaGVvY3JpbmVzCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBvZiB0aGVpciBlbm1pdHkgdG8gRGVtb3N0aGVuZXMuIE5vOyBpZiB0aGV5IGFyZSBpbiB0cnV0aCBlbmVtaWVzIG9mCiAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMsIHlvdSBzaG91bGQgYmlkIHRoZW0gYnJpbmcgdGhlaXIgaW5kaWN0bWVudHMgYWdhaW5zdCBoaW0sIGFuZCBub3QKICAgICAgICAgICAgICAgICAgICBwZXJtaXQgaGltIHRvIHByb3Bvc2UgaWxsZWdhbCBkZWNyZWVzLiBUaGVzZSBwZW9wbGUgdG9vIGFyZSBjbGV2ZXIsIGFuZCB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgbW9yZSBhcHQgdG8gZ2l2ZSB0aGVtIGNyZWRlbmNlLiBUaGV5IHdpbGwgbm90LCBob3dldmVyLCB0YWtlIHRoZSBjb3Vyc2Ugd2hpY2ggSQogICAgICAgICAgICAgICAgICAgIG1lbnRpb24uIEZvciB3aGF0IHJlYXNvbj8gQmVjYXVzZSB0aGV5IGNsYWltIHRvIGJlIGF0IHdhciB3aXRoIG9uZSBhbm90aGVyLAogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIHRoZXkgYXJlIG5vdCBhdCB3YXIuIDwvdHJhbnNsYXRpb24+"
translation['58.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0aCByZWZlcmVuY2UgdG8gdGhlIGVubWl0eSBvZiB0aGVzZSBwZW9wbGUgeW91IGNvdWxkCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBtZSBtb3JlIGV4YWN0IGluZm9ybWF0aW9uIHRoYW4gSSBjYW4gZ2l2ZSB5b3UuIEkgc2hvdWxkIGJlIGdsYWQsIGhvd2V2ZXIsCiAgICAgICAgICAgICAgICAgICAgdG8gYXNrIFRoZW9jcmluZXMgaW4geW91ciBwcmVzZW5jZSwgaWYgb25seSBoZSB3b3VsZCBnaXZlIG1lIGFuIGhvbmVzdCBhbnN3ZXIsCiAgICAgICAgICAgICAgICAgICAgd2hhdCBoZSB3b3VsZCBoYXZlIGRvbmXigJRoZSB3aG8gZGVjbGFyZXMgdGhhdCBoZSBoYXMgYmVlbiBhc3NpZ25lZCB0aGUKICAgICAgICAgICAgICAgICAgICBkdXR5IG9mIHB1dHRpbmcgYSBzdG9wIHRvIHRoZSBwcm9wb3NlcnMgb2YgaWxsZWdhbCBkZWNyZWVz4oCUaWYgYW55b25lLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHNwZWFraW5nIHRvIHRoZSB3aG9sZSBib2R5IG9mIGNpdGl6ZW5zIGluIHRoZSBhc3NlbWJseSBhbmQgd2lubmluZyB0aGVpcgogICAgICAgICAgICAgICAgICAgIGFzc2VudCwgaGFkIHByb3Bvc2VkIGEgZGVjcmVlLCBwZXJtaXR0aW5nIHRob3NlIHdobyBoYWQgbG9zdCB0aGVpciBjaXZpYyByaWdodHMKICAgICAgICAgICAgICAgICAgICBhbmQgdGhvc2UgaW5kZWJ0ZWQgdG8gdGhlIHB1YmxpYyB0cmVhc3VyeSB0byBpbmRpY3QsIGRlbm91bmNlLCBhbmQgbG9kZ2UKICAgICAgICAgICAgICAgICAgICBjcmltaW5hbCBpbmZvcm1hdGlvbnPigJRpbiBhIHdvcmQgdG8gZG8gYWxsIHRoZSB0aGluZ3Mgd2hpY2ggdGhlIGxhdyBub3cKICAgICAgICAgICAgICAgICAgICBmb3JiaWRzIHRoZW0gdG8gZG/igJQgPC90cmFuc2xhdGlvbj4="
translation['58.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz53b3VsZCBoZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgaW5kaWN0ZWQgZm9yIGlsbGVnYWxpdHkgdGhlIG9uZSB3aG8gcHJvcG9zZWQgdGhhdCBkZWNyZWUsIG9yIHdvdWxkIGhlIG5vdD8gSWYgaGUKICAgICAgICAgICAgICAgICAgICBzYXlzIGhlIHdvdWxkIG5vdCwgaG93IGNhbiB5b3UgYmVsaWV2ZSBoaW0gd2hlbiBoZSBzdGF0ZXMgdGhhdCBoZSBpcyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICB3YXRjaCBmb3IgdGhvc2Ugd2hvIHByb3Bvc2UgaWxsZWdhbCBkZWNyZWVzPyBBbmQgaWYgaGUgd291bGQgaGF2ZSBicm91Z2h0IGluIGFuCiAgICAgICAgICAgICAgICAgICAgaW5kaWN0bWVudCwgaXMgaXQgbm90IGFuIG91dHJhZ2VvdXMgdGhpbmcsIHRoYXQgd2hlbiBhbm90aGVyIHByb3Bvc2VkIHRoZSBiaWxsLAogICAgICAgICAgICAgICAgICAgIGhlIHNob3VsZCBwcmV2ZW50IGl0cyBiZWluZyBmaW5hbGx5IGVuYWN0ZWQsIHRvIHRoZSBlbmQgdGhhdCBhbGwgc2hvdWxkIG5vdCBoYXZlCiAgICAgICAgICAgICAgICAgICAgdGhpcyBwcml2aWxlZ2UsIGFuZCBzaG91bGQgcHV0IGEgc3RvcCB0byB0aGUgbWF0dGVyIGJ5IHByZWZlcnJpbmcgYW4gaW5kaWN0bWVudCwKICAgICAgICAgICAgICAgICAgICBwbGFpbmx5IHdyaXRpbmcgYnkgaXRzIHNpZGUgdGhlIHdvcmRzIG9mIHRoZSBsYXdzOyA8L3RyYW5zbGF0aW9uPg=="
translation['58.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgeWV0IHNob3VsZCBub3csIHdpdGhvdXQgaGF2aW5nIHdvbiB0aGUgcGVvcGxlJ3MgY29uc2VudAogICAgICAgICAgICAgICAgICAgIG9yIG1hZGUgdGhlIG1hdHRlciBwdWJsaWMsIGhpbXNlbGYgY29udGludWUgdG8gcHJlZmVyIGluZGljdG1lbnRzLCB3aGVuIHRoZSBsYXdzCiAgICAgICAgICAgICAgICAgICAgZm9yYmlkIGhpbSB0byBkbyBzbz8gQW5kIGhlIHdpbGwgc2F5IHByZXNlbnRseSB0aGF0IGhlIGlzIGJlaW5nIGFib21pbmFibHkKICAgICAgICAgICAgICAgICAgICB0cmVhdGVkIGlmIGhlIGlzIG5vdCB0byBiZSBhbGxvd2VkIHRvIGNvbnRpbnVlIHRvIGRvIHRoaXMsIGFuZCB3aWxsIHJlaGVhcnNlIHRoZQogICAgICAgICAgICAgICAgICAgIHBlbmFsdGllcyBwcm92aWRlZCBieSB0aGUgbGF3cywgdG8gd2hpY2ggaGUgd2lsbCBiZSBsaWFibGUsIGlmIGNvbnZpY3RlZC4gSXMgaXQKICAgICAgICAgICAgICAgICAgICBub3QgYW4gb3V0cmFnZSB0aGF0IGhlIHNob3VsZCBmbG91dCB0aGUgbGF3cywgYnV0IGNsYWltIHRoYXQgdGhlcmUgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBncmFudGVkIHRvIGhpbSBieSB5b3UgYSBwcml2aWxlZ2Ugc28gZ3JlYXQgdGhhdCBubyBvbmUgZWxzZSBoYXMgZGFyZWQgZXZlbiB0bwogICAgICAgICAgICAgICAgICAgIGFzayBmb3IgaXQ/IDwvdHJhbnNsYXRpb24+"
translation['58.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBpbiByZWdhcmQgdG8gdGhlIGNyaW1pbmFsIGluZm9ybWF0aW9uLCB0aGVyZWZvcmUsIG5laXRoZXIgVGhlb2NyaW5lcyBub3IKICAgICAgICAgICAgICAgICAgICBhbnlvbmUgb2YgdGhvc2Ugd2hvIHNwZWFrIGluIGhpcyBiZWhhbGYgd2lsbCBoYXZlIGFueSBqdXN0IGFyZ3VtZW50IHRvIGFkdmFuY2UsCiAgICAgICAgICAgICAgICAgICAgSSB0YWtlIGl0IHlvdSBhcmUgYWxsIHByZXR0eSB3ZWxsIGFzc3VyZWQuIEkgZmFuY3ksIGhvd2V2ZXIsIHRoYXQgdGhleSB3aWxsIHRyeQogICAgICAgICAgICAgICAgICAgIHRvIG1haW50YWluIHRoYXQgY3JpbWluYWwgaW5mb3JtYXRpb25zIG1heSBub3QgYmUgbG9kZ2VkIGFnYWluc3QgdGhvc2Ugd2hvIGFyZQogICAgICAgICAgICAgICAgICAgIG5vdCByZWdpc3RlcmVkIG9uIHRoZSBBY3JvcG9saXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBuYW1lcyBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gd2VyZSBkZWJ0b3JzIHRvIHRoZSBzdGF0ZSB3ZXJlIGluc2NyaWJlZCBvbiBwaWxsYXJzIHNldCB1cCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQWNyb3BvbGlzLjwvbm90ZT4gYW5kIHRoYXQgaXQgaXMgbm90IHJpZ2h0IHRvIGNvbnNpZGVyIHRob3NlIGFzIGRlYnRvcnMKICAgICAgICAgICAgICAgICAgICB3aG9zZSBuYW1lcyBubyBvbmUgaGFzIGdpdmVuIG92ZXIgdG8gdGhlIGNvbGxlY3RvcnMsIDwvdHJhbnNsYXRpb24+"
translation['58.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5qdXN0IGFzIHRob3VnaCB5b3Ugd2VyZSB1bmF3YXJlIG9mIHRoZSBsYXcgd2hpY2ggZGVjbGFyZXMgYQogICAgICAgICAgICAgICAgICAgIG1hbiBhIGRlYnRvciBmcm9tIHRoZSBkYXkgb24gd2hpY2ggdGhlIHBlbmFsdHkgaGFzIGJlZW4gaW1wb3NlZCBvciBvbiB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIGhhcyB0cmFuc2dyZXNzZWQgdGhlIGxhdyBvciB0aGUgZGVjcmVlOyBvciBhcyBpZiBpdCB3ZXJlIG5vdCBjbGVhciB0byBldmVyeWJvZHkKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXJlIGFyZSBtYW55IHdheXMgaW4gd2hpY2ggcGVvcGxlIHdobyB3aXNoIHRvIG9iZXkgdGhlIGxhd3MgYmVjb21lCiAgICAgICAgICAgICAgICAgICAgZGVidG9ycyB0byB0aGUgdHJlYXN1cnkgYW5kIG1lZXQgdGhlIG9ibGlnYXRpb24uIFRoaXMgaXMgcGxhaW4gZnJvbSB0aGUgbGF3CiAgICAgICAgICAgICAgICAgICAgICAgIGl0c2VsZi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSB0aGlzIGxhdyBhZ2FpbiwgcGxlYXNlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5EbyB5b3UgaGVhciwgeW91IGFib21pbmFibGUgYmVhc3QsIHdoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgc3RhdHV0ZSBzYXlzPyDigJxGcm9tIHRoZSBkYXkgb24gd2hpY2ggdGhlIHBlbmFsdHkgc2hhbGwgYmUgaW1wb3NlZAogICAgICAgICAgICAgICAgICAgIG9yIG9uIHdoaWNoIGhlIHRyYW5zZ3Jlc3NlcyB0aGUgbGF3LuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['58.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoZWFyIHRoYXQgdGhleSBhcmUgZ29pbmcgdG8gcHJvZHVjZSBhbHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCBsYXcgd2hpY2ggb3JkYWlucyB0aGF0LCBpbiB0aGUgaW50ZXJlc3Qgb2YgdGhvc2Ugd2hvIGFyZSBpbnNjcmliZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXIsIHdoYXRldmVyIHBvcnRpb24gb2YgdGhlIGRlYnQgYmUgcGFpZCBzaGFsbCBiZSBlcmFzZWQsIGFuZCB0aGV5IHdpbGwKICAgICAgICAgICAgICAgICAgICBhc2sgaG93IG1lbiBhcmUgdG8gbWFrZSBlcmFzdXJlcywgd2hlbiB0aGUgZGVidCBoYXMgbm90IGV2ZW4gYmVlbiBlbnRlcmVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyOyBhcyBpZiB5b3UgZGlkIG5vdCBrbm93IHRoYXQgdGhpcyBzdGF0dXRlIGhhcyB0byBkbyB3aXRoIGRlYnRvcnMgd2hvCiAgICAgICAgICAgICAgICAgICAgYXJlIHJlZ2lzdGVyZWQsIHdoaWxlIHRvIHRob3NlIHdobyBhcmUgbm90IHJlZ2lzdGVyZWQgYnV0IG93ZSBtb25leSB0aGF0IG90aGVyCiAgICAgICAgICAgICAgICAgICAgbGF3IGFwcGxpZXMsIHdoaWNoIGRlY2xhcmVzIHRoYXQgb25lIGlzIGEgZGVidG9yIGZyb20gdGhlIGRheSBvbiB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICBwZW5hbHR5IGlzIGluY3VycmVkIG9yIG9uIHdoaWNoIGhlIHRyYW5zZ3Jlc3NlcyB0aGUgbGF3IG9yIHRoZSBkZWNyZWUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5XaHksIHRoZW4sIGhlIHdpbGwgYXNrLCBkbyB5b3Ugbm90IGluZGljdAogICAgICAgICAgICAgICAgICAgIG1lIGZvciBub24taW5zZXJ0aW9uIGluIHRoZSByZWdpc3Rlciwgc2VlaW5nIHRoYXQgSSBhbSBhIGRlYnRvciwgYW5kIG5vdAogICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWQ/IEJlY2F1c2UgdGhlIGxhdyBvcmRhaW5zIHRoYXQgaW5kaWN0bWVudHMgZm9yIG5vbi1pbnNlcnRpb24gc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICBsb2RnZWQsIG5vdCBhZ2FpbnN0IHRob3NlIHdobyBhcmUgZGVidG9ycyBhbmQgbm90IHJlZ2lzdGVyZWQsIGJ1dCBhZ2FpbnN0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvLCBhbHRob3VnaCB0aGV5IGhhdmUgYmVlbiByZWdpc3RlcmVkIGFuZCBoYXZlIG5vdCBwYWlkIHRoZWlyIGRlYnQsCiAgICAgICAgICAgICAgICAgICAgbmV2ZXJ0aGVsZXNzIGhhdmUgdGhlaXIgbmFtZXMgZXJhc2VkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UYWtlIHRoZQogICAgICAgICAgICAgICAgICAgIGxhdywgcGxlYXNlLCBhbmQgcmVhZCBpdC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['58.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3LCBtZW4gb2YgdGhlIGp1cnksIGhlYXIgdGhhdCBpdCBleHByZXNzbHkgZGVjbGFyZXMgdGhhdCwgaWYgYW55IG9uZSBvZiB0aG9zZQogICAgICAgICAgICAgICAgICAgIGluZGVidGVkIHRvIHRoZSB0cmVhc3VyeSBzaGFsbCBoYXZlIGhpcyBuYW1lIGVyYXNlZCB3aXRob3V0IGhhdmluZyBkaXNjaGFyZ2VkCiAgICAgICAgICAgICAgICAgICAgaGlzIGRlYnQgdG8gdGhlIHN0YXRlLCBhbiBpbmRpY3RtZW50IGZvciBub24taW5zZXJ0aW9uIGluIHRoZSByZWdpc3RlciBtYXkgYmUKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IGFnYWluc3QgaGltIGJlZm9yZSB0aGUgVGhlc21vdGhldGFlLCBidXQgbm90IGFnYWluc3QgYSBkZWJ0b3Igd2hvIGhhcwogICAgICAgICAgICAgICAgICAgIG5vdCBiZWVuIHJlZ2lzdGVyZWQuIEFnYWluc3QgcGVyc29ucyBvZiB0aGlzIGNsYXNzIGl0IG9yZGFpbnMgdGhhdCB0aGVyZSBzaGFsbAogICAgICAgICAgICAgICAgICAgIGJlIGEgY3JpbWluYWwgaW5mb3JtYXRpb24gYW5kIG90aGVyIGxlZ2FsIHBlbmFsdGllcy4gQnV0IHdoeSBkbyB5b3UsIFRoZW9jcmluZXMsCiAgICAgICAgICAgICAgICAgICAgdHJ5IHRvIHRlYWNoIG1lIGFsbCB0aGUgd2F5cyBpbiB3aGljaCBvbmUgbWF5IGF2ZW5nZSBvbmVzZWxmIHVwb24gb25lJ3MgZW5lbWllcywKICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIG1ha2luZyBhIGRlZmVuY2UgaW4gdGhlIGFjdGlvbiBpbiB3aGljaCB5b3UgaGF2ZSBjb21lIGludG8gY291cnQ/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9lcm9jbGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5XZSBrbm93IG5vdGhpbmcgbW9yZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBNb2Vyb2NsZXMgYW5kIGhpcyBkZWNyZWUgdGhhbiBpcyB0b2xkIGluIHRoaXMgb3JhdGlvbi48L25vdGU+IG1lbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ5LCB3aG8gcHJvcG9zZWQgdGhlIGRlY3JlZSBhZ2FpbnN0IHRob3NlIHdobyBpbmp1cmUgbWVyY2hhbnRzLCBhbmQgd2hvCiAgICAgICAgICAgICAgICAgICAgcGVyc3VhZGVkLCBub3QgeW91IGFsb25lLCBidXQgeW91ciBhbGxpZXMgYXMgd2VsbCwgdG8gb3JnYW5pemUgYSBzb3J0IG9mIHBvbGljZQogICAgICAgICAgICAgICAgICAgIHRvIHJlcHJlc3MgdGhlIHdyb25nZG9lcnMsIHdpbGwgbm90IGJlIGFzaGFtZWQgcHJlc2VudGx5IG9uIGJlaGFsZiBvZiBUaGVvY3JpbmVzCiAgICAgICAgICAgICAgICAgICAgdG8gc3BlYWsgaW4gb3Bwb3NpdGlvbiB0byBoaXMgb3duIGRlY3JlZS4gPC90cmFuc2xhdGlvbj4="
translation['58.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5PbgogICAgICAgICAgICAgICAgICAgIHRoZSBjb250cmFyeSwgaGUgd2lsbCBoYXZlIHRoZSBhdWRhY2l0eSB0byBhZHZpc2UgeW91IHRoYXQgeW91IG91Z2h0IG5vdCB0bwogICAgICAgICAgICAgICAgICAgIHB1bmlzaCwgYnV0IHRvIGFjcXVpdCwgdGhlIG9uZSB3aG8gaGFzIHRodXMgbWFuaWZlc3RseSBiZWVuIGNvbnZpY3RlZCBvZiBsb2RnaW5nCiAgICAgICAgICAgICAgICAgICAgZmFsc2UgZGVudW5jaWF0aW9ucyBhZ2FpbnN0IHRoZSBtZXJjaGFudHM7IGFzIGlmIGhpcyBtZWFzdXJlcyBmb3IgcHVyZ2luZyB0aGUKICAgICAgICAgICAgICAgICAgICBzZWEgaGFkIG5vIG90aGVyIHB1cnBvc2UgdGhhbiB0aGF0IHZveWFnZXJzIHdobyBoYWQgY29tZSBzYWZlbHkgdGhyb3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICBkYW5nZXJzIG9mIHRoZSBvcGVuIHNlYSBtaWdodCBwYXkgbW9uZXkgdG8gdGhlc2UgcGVvcGxlIGluIHRoZSBoYXJib3I7IG9yIGFzIGlmCiAgICAgICAgICAgICAgICAgICAgaXQgd2VyZSBhbnkgYWR2YW50YWdlIHRvIHRoZSBtZXJjaGFudHMgdGhhdCwgYWZ0ZXIgY29tcGxldGluZyBhIGxvbmcgdm95YWdlCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBtaXNoYXAsIHRoZXkgc2hvdWxkIGZhbGwgaW50byB0aGUgaGFuZHMgb2YgVGhlb2NyaW5lcy4gPC90cmFuc2xhdGlvbj4="
translation['58.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbXkgcGFydCwgSSB0aGluayB0aGF0LCB3aGlsZSB0aGUgZ2VuZXJhbHMgYW5kIHRob3NlIGluCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZCBvZiB5b3VyIHNoaXBzIG9mIHdhciwgYW5kIG5vdCB5b3UsIGFyZSB0byBibGFtZSBmb3IgbWlzaGFwcyB3aGljaCBvY2N1cgogICAgICAgICAgICAgICAgICAgIGR1cmluZyBhIHZveWFnZSwgeWV0IGZvciBtaXNoYXBzIGluIHRoZSBQZWlyYWV1cyBhbmQgYmVmb3JlIHRoZSBtYWdpc3RyYXRlcyB5b3UKICAgICAgICAgICAgICAgICAgICBhcmUgdG8gYmxhbWUsIHNpbmNlIHlvdSBoYXZlIGFsbCB0aGVzZSBwZXJzb25zIHVuZGVyIHlvdXIgY29udHJvbC4gV2hlcmVmb3JlIGl0CiAgICAgICAgICAgICAgICAgICAgaXMgZXZlbiBtb3JlIG5lY2Vzc2FyeSB0byB3YXRjaCB0aG9zZSB3aG8gdHJhbnNncmVzcyB0aGUgbGF3cyBoZXJlIGF0IGhvbWUgdGhhbgogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBmYWlsIHRvIGFiaWRlIGJ5IHlvdXIgZGVjcmVlcyBhYnJvYWQsIGluIG9yZGVyIHRoYXQgeW91IG1heSBub3QKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzIGJlIHRob3VnaHQgdG8gbG9vayB3aXRoIGNvbXBsYWlzYW5jZSB1cG9uIHdoYXQgaXMgZ29pbmcgb24gYW5kIGluIGEKICAgICAgICAgICAgICAgICAgICBtZWFzdXJlIHRvIGNvbm5pdmUgYXQgdGhlIGRvaW5ncyBvZiB0aGVzZSBtZW4uIDwvdHJhbnNsYXRpb24+"
translation['58.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igc3VyZWx5LCBNb2Vyb2NsZXMsIHdlIGFyZSBub3Qgbm93IGdvaW5nIHRvIGV4YWN0IHRlbiB0YWxlbnRzIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIE1lbGlhbnM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA5MjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDkyMiI+TWVsb3M8L3BsYWNlTmFtZT4sIGFuIGlzbGFuZCBpbiB0aGUgc291dGhlcm4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NSI+QWVnZWFuPC9wbGFjZU5hbWU+Ljwvbm90ZT4gaW4gYWNjb3JkYW5jZSB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIHRlcm1zIG9mIHlvdXIgZGVjcmVlLCBiZWNhdXNlIHRoZXkgZ2F2ZSBoYXJib3JhZ2UgdG8gdGhlIHBpcmF0ZXMsIGFuZCB5ZXQgc3VmZmVyCiAgICAgICAgICAgICAgICAgICAgdGhpcyBtYW4gdG8gZ28gZnJlZSB3aG8gaGFzIHRyYW5zZ3Jlc3NlZCBib3RoIHlvdXIgZGVjcmVlIGFuZCB0aGUgbGF3cyB3aGljaAogICAgICAgICAgICAgICAgICAgIG1haW50YWluIG91ciBzdGF0ZS4gQW5kIHNoYWxsIHdlIHByZXZlbnQgZnJvbSB3cm9uZ2RvaW5nIHRoZSBpc2xhbmRlcnMsIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB3aG9tIHdlIG11c3QgbWFuIG91ciBzaGlwcyBpbiBvcmRlciB0byBob2xkIHRoZW0gdG8gdGhlaXIgZHV0eSwgYnV0IHlvdQogICAgICAgICAgICAgICAgICAgIGFib21pbmFibGUgY3JlYXR1cmVzLCB1cG9uIHdob20gdGhlc2UganVyeW1lbiBzaG91bGQgaW5mbGljdCB0aGUgcGVuYWx0eQogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byB0aGUgbGF3cywgd2hpbGUgdGhleSBzaXQgcmlnaHQgaGVyZeKAlHNoYWxsIHdlIGxldCB5b3UgZ28/CiAgICAgICAgICAgICAgICAgICAgWW91IHdpbGwgbm90LCBhdCBsZWFzdCBpZiB5b3UgYXJlIHdpc2UuPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA5MjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDkyMiI+TWVsb3M8L3BsYWNlTmFtZT4sIGFuIGlzbGFuZCBpbiB0aGUgc291dGhlcm4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NSI+QWVnZWFuPC9wbGFjZU5hbWU+LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzdGVsw6ouPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBtYXJibGUgc2xhYiB1cG9uIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkZWNyZWUgd2FzIGluc2NyaWJlZC48L25vdGU+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iU3RlbGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdGVsZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdGVsZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['58.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVnYXJkaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MsIHRoZW4sIGFuZCB0aGUgY2FzZSBiZWZvcmUgeW91IEkgZG8gbm90IGtub3cgd2hhdCBuZWVkIHRoZXJlIGlzIHRvIHNheQogICAgICAgICAgICAgICAgICAgIG1vcmU7IGZvciwgSSB0YWtlIGl0LCB5b3UgaGF2ZSBiZWVuIGFkZXF1YXRlbHkgaW5mb3JtZWQuIEl0IGlzIG15IHB1cnBvc2UsIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgYmVnZ2luZyBqdXN0aWNlIGF0IHlvdXIgaGFuZHMgZm9yIG15IGZhdGhlciBhbmQgbXlzZWxmLCB0byBjb21lIGRvd24gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybSBhbmQgdHJvdWJsZSB5b3Ugbm8gZnVydGhlci4gSSBmZWx0LCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgaXQgd2FzIG15CiAgICAgICAgICAgICAgICAgICAgZHV0eSB0byBjb21lIHRvIG15IGZhdGhlcidzIGFpZCwgYW5kIEkgdGhvdWdodCB0aGF0IHRoaXMgY291cnNlIHdhcyBqdXN0OyBzbyBJCiAgICAgICAgICAgICAgICAgICAgbG9kZ2VkIHRoaXMgY3JpbWluYWwgaW5mb3JtYXRpb24sIGFzIEkgdG9sZCB5b3UgYXQgdGhlIG91dHNldCwgPC90cmFuc2xhdGlvbj4="
translation['58.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5hbHRob3VnaCBJIGtuZXcgd2VsbCB0aGF0IHRob3NlIHdobyB3aXNoZWQgdG8gY2FsdW1uaWF0ZSBtZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGZpbmQgd29yZHMgd2hpY2ggd291bGQgZmxpbmcgcmVwcm9hY2ggdXBvbiBteSB5b3V0aCwgd2hpbGUgb3RoZXJzIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgcHJhaXNlIG1lIGFuZCBob2xkIHRoYXQgSSB3YXMgYWN0aW5nIHdpc2VseSBpbiBzZWVraW5nIHRvIHRha2UgdmVuZ2VhbmNlIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15IG9mIG15IGZhdGhlci4gSG93ZXZlciwgSSBrbmV3IHRoYXQsIHdoaWxlIHRoZSBlZmZlY3Qgb24gbXkgaGVhcmVycyB3b3VsZAogICAgICAgICAgICAgICAgICAgIGJlIGFzIGZvcnR1bmUgbWlnaHQgZGV0ZXJtaW5lLCBJIHdhcyBub25lIHRoZSBsZXNzIGluIGR1dHkgYm91bmQgdG8gY2Fycnkgb3V0CiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbW1hbmQgbGFpZCB1cG9uIG1lIGJ5IG15IGZhdGhlciwgZXNwZWNpYWxseSBhcyBpdCB3YXMgYSBqdXN0IG9uZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['58.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiwgcHJheSwgc2hvdWxkIEkgY29tZSB0byBoaXMgYWlkPwogICAgICAgICAgICAgICAgICAgIFNob3VsZCBpdCBub3QgYmUgbm93LCB3aGVuIHRoZSBvcHBvcnR1bml0eSBvZiBhdmVuZ2luZyBoaW0gaW4gYWNjb3JkYW5jZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhd3MgaXMgb3BlbiB0byBtZSwgd2hlbiBJIG15c2VsZiBzaGFyZSBpbiBteSBmYXRoZXIncyBtaXNmb3J0dW5lLCBhbmQgaGUKICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBsZWZ0IGRlc29sYXRlPyBUaGlzIGlzIHByZWNpc2VseSB3aGF0IGhhcyBub3cgY29tZSBhYm91dC4gRm9yLCBpbgogICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uIHRvIG91ciBvdGhlciBtaXNmb3J0dW5lcywgbWVuIG9mIHRoZSBqdXJ5LCB0aGlzIHRvbyBoYXMgYmVmYWxsZW4gdXM6CiAgICAgICAgICAgICAgICAgICAgZXZlcnlib2R5IHVyZ2VzIHVzIG9uLCBleHByZXNzZXMgc3ltcGF0aHkgZm9yIHdoYXQgaGFzIGhhcHBlbmVkLCBzYXlzIHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gb3V0cmFnZW91c2x5IHRyZWF0ZWQsIGFuZCB0aGF0IHRoZSBkZWZlbmRhbnQgaXMgbGlhYmxlIHRvIHRoZSBjcmltaW5hbAogICAgICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uOyB5ZXQgbm8gb25lIG9mIHRob3NlIHdobyBzYXkgdGhlc2UgdGhpbmdzIGlzIHdpbGxpbmcgdG8gY29vcGVyYXRlCiAgICAgICAgICAgICAgICAgICAgd2l0aCB1cyBvciBkZWNsYXJlcyBoaXMgcmVhZGluZXNzIG9wZW5seSB0byBpbmN1ciB0aGUgZW5taXR5IG9mIFRoZW9jcmluZXMuIFNvCiAgICAgICAgICAgICAgICAgICAgdHJ1ZSBpcyBpdCB0aGF0IHdpdGggc29tZSBwZW9wbGUgdGhlIGxvdmUgb2YgcmlnaHQgaXMgbm90IHN0cm9uZyBlbm91Z2ggdG8gbGVhZAogICAgICAgICAgICAgICAgICAgIHRoZW0gdG8gc3BlYWsgb3V0IGZyYW5rbHkuIDwvdHJhbnNsYXRpb24+"
translation['58.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQsIG1lbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ5LCB3aGlsZSBtYW55IG1pc2ZvcnR1bmVzIGhhdmUgYmVmYWxsZW4gdXMgaW4gYSBzaG9ydCBwZXJpb2Qgb2YgdGltZSBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhpcyBmZWxsb3cgVGhlb2NyaW5lcywgbm8gb25lIG9mIHRoZW0gaXMgbW9yZSBncmlldm91cyB0aGFuIHRoZSBwcmVzZW50IG9uZSwKICAgICAgICAgICAgICAgICAgICB0aGF0LCBuYW1lbHksIG15IGZhdGhlciwgdG8gd2hvbSB0aGUgd3Jvbmcgd2FzIGRvbmUgYW5kIHdobyBjb3VsZCBzZXQgZm9ydGggdG8KICAgICAgICAgICAgICAgICAgICB5b3UgdGhlIGNydWVsIGFuZCBpbGxlZ2FsIGFjdHMgb2YgVGhlb2NyaW5lcywgbXVzdCBrZWVwIHNpbGVudCDvvIhmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3cyBzbyBiaWTvvIksIGFuZCBJLCB3aG8gYW0gdW5lcXVhbCB0byBhbGwgdGhlc2UgdGFza3MsIG11c3QgSSBkbyB0aGUKICAgICAgICAgICAgICAgICAgICB0YWxraW5nOyBhbmQgd2hlcmVhcyBvdGhlciB5b3V0aHMgb2YgbXkgYWdlIGFyZSBhaWRlZCBieSB0aGVpciBmYXRoZXJzLCBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBub3cgcmVzdHMgaGlzIGhvcGVzIG9uIG1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['58.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U2VlaW5nLCB0aGVuLCB0aGF0IHdlIGFyZSBlbmdhZ2VkIGluIHNvIHVuZXF1YWwgYQogICAgICAgICAgICAgICAgICAgIGNvbnRlc3QsIHdlIGJlZyB5b3UgYWxsIHRvIGNvbWUgdG8gb3VyIGFpZCBhbmQgdG8gbWFrZSBpdCBjbGVhciB0byBhbGwgbWVuIHRoYXQsCiAgICAgICAgICAgICAgICAgICAgd2hldGhlciBhIGJveSBvciBhbiBvbGQgbWFuLCBvciBvbmUgb2YgYW55IGFnZSwgY29tZXMgYmVmb3JlIHlvdSBpbiBhY2NvcmRhbmNlCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgbGF3cywgaGUgd2lsbCBvYnRhaW4gY29tcGxldGUganVzdGljZS4gVGhlIGhvbm9yYWJsZSBjb3Vyc2UgZm9yIHlvdSwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgdGhlIGp1cnksIGlzLCBub3QgdG8gcHV0IHRoZSBsYXdzIG9yIHlvdXIgb3duIHNlbHZlcyBpbiB0aGUgcG93ZXIgb2YKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gc3BlYWssIGJ1dCB0byBrZWVwIHRoZSBzcGVha2VycyBpbiB5b3VyIHBvd2VyLCBhbmQgdG8gbWFrZSBhCiAgICAgICAgICAgICAgICAgICAgZGlzdGluY3Rpb24gYmV0d2VlbiB0aG9zZSB3aG8gc3BlYWsgd2VsbCBhbmQgbHVjaWRseSwgYW5kIHRob3NlIHdobyBzcGVhayB3aGF0CiAgICAgICAgICAgICAgICAgICAgaXMganVzdDsgZm9yIGl0IGlzIGNvbmNlcm5pbmcganVzdGljZSB0aGF0IHlvdSBoYXZlIHN3b3JuIHRvIGNhc3QgeW91ciB2b3Rlcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['58.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm8gbWFuIHN1cmVseSB3aWxsIHBlcnN1YWRlIHlvdSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2lsbCBiZSBhbnkgbGFjayBvZiBwb2xpdGljaWFucyBsaWtlIHRoZSBkZWZlbmRhbnQsIG9yIHRoYXQgdGhlIHN0YXRlIHdpbGwKICAgICAgICAgICAgICAgICAgICBiZSBsZXNzIHdlbGwgYWRtaW5pc3RlcmVkIGJlY2F1c2Ugb2YgdGhhdC4gSW5kZWVkIHRoZSBvcHBvc2l0ZSBpcyB0aGUgY2FzZSwgYXMgSQogICAgICAgICAgICAgICAgICAgIGhlYXIgZnJvbSBtZW4gb2xkZXIgdGhhbiBteXNlbGYuIEZvciB0aGV5IHRlbGwgdXMgdGhhdCB0aGUgc3RhdGUgZmFyZWQgYmVzdCB3aGVuCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIG1vZGVyYXRpb24gYW5kIHJlc3RyYWludCB3ZXJlIGluIHB1YmxpYyBsaWZlLiBXb3VsZCBvbmUgZmluZCBUaGVvY3JpbmVzCiAgICAgICAgICAgICAgICAgICAgYW5kIGhpcyBmZWxsb3dzIHRvIGJlIGdvb2QgY291bnNlbGxvcnM/IE5vOyB0aGV5IHNheSBub3QgYSB3b3JkIGluIHRoZSBhc3NlbWJseSwKICAgICAgICAgICAgICAgICAgICBidXQgZ2V0IG1vbmV5IGJ5IGluZGljdGluZyB0aG9zZSB3aG8gZG8gc3BlYWsgdGhlcmUuIDwvdHJhbnNsYXRpb24+"
translation['58.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyBpcyBhbiBleHRyYW9yZGluYXJ5IHRoaW5nOiB0aGV5IG1ha2UgdGhlaXIgbGl2aW5nCiAgICAgICAgICAgICAgICAgICAgYnkgcGV0dGlmb2dnZXJ5LCB5ZXQgdGhleSBzYXkgdGhleSBnZXQgbm90aGluZyBmcm9tIHRoZSBzdGF0ZSwgYW5kLCB3aGlsZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2VkIG5vdGhpbmcgYmVmb3JlIGNvbWluZyB0byB5b3UsIG5vdyB0aGF0IHRoZXkgYXJlIHdlbGwtdG8tZG8gdGhleSBkbyBub3QKICAgICAgICAgICAgICAgICAgICBldmVuIGZlZWwgZ3JhdGVmdWwgdG8geW91LCBidXQgZ28gYWJvdXQgc2F5aW5nIHRoYXQgdGhlIHBlb3BsZSBhcmUgZmlja2xlIGFuZAogICAgICAgICAgICAgICAgICAgIHN1cmx5IGFuZCB0aGFua2xlc3MsIGFzIGlmIHlvdSBwcm9zcGVyZWQgYmVjYXVzZSBvZiB0aGVzZSBtZW4sIGFuZCBub3QgdGhleQogICAgICAgICAgICAgICAgICAgIGJlY2F1c2Ugb2YgdGhlIHBlb3BsZSEgQnV0IGFmdGVyIGFsbCBpdCBpcyBuYXR1cmFsIGZvciB0aGVtIHRvIHNheSB0aGlzLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBzZWUgaG93IGVhc3ktZ29pbmcgeW91IGFyZS4gRm9yIHlvdSBoYXZlIG5ldmVyIHB1bmlzaGVkIGFueSBvbmUgb2YgdGhlbSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSB3YXkgaGlzIHdpY2tlZG5lc3MgZGVzZXJ2ZXMsIGJ1dCB5b3UgcHV0IHVwIHdpdGggdGhlaXIgc2F5aW5nIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FmZXR5IG9mIHRoZSBkZW1vY3JhY3kgY29tZXMgZnJvbSB0aG9zZSB3aG8gYnJpbmcgaW5kaWN0bWVudHMgYW5kIGJhc2VsZXNzCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczsgdGhhbiB3aG9tIG5vIG1vcmUgcGVybmljaW91cyBjbGFzcyBleGlzdHMuIDwvdHJhbnNsYXRpb24+"
translation['58.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gd2hhdCBjb3VsZCBhbnlvbmUgZmluZCB0aGVzZSBwZW9wbGUgdXNlZnVsIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHN0YXRlPyBUaGV5IHB1bmlzaCB3cm9uZ2RvZXJzLCBpdCB3aWxsIGJlIHNhaWQsIGFuZCB0aHJvdWdoIHRoZW0gdGhlIG51bWJlciBvZgogICAgICAgICAgICAgICAgICAgIHdyb25nZG9lcnMgaXMgbGVzc2VuZWQuIE5vdCBzbywgbWVuIG9mIHRoZSBqdXJ5OyBpdCBpcyBldmVuIGluY3JlYXNlZDsgZm9yIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIGFyZSBtaW5kZWQgdG8gZG8gZXZpbCwga25vd2luZyB0aGF0IGEgcG9ydGlvbiBvZiB0aGVpciBnYWlucyBtdXN0IGJlIGdpdmVuCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlc2UgbWVuLCBvZiBuZWNlc3NpdHkgZGV0ZXJtaW5lIHRvIGV4YWN0IG1vcmUgZnJvbSB0aGUgcmVzdCwgdGhhdCB0aGV5IG1heQogICAgICAgICAgICAgICAgICAgIGhhdmUgZW5vdWdoIHRvIHNwZW5kLCBub3Qgb25seSB1cG9uIHRoZW1zZWx2ZXMsIGJ1dCB1cG9uIHRoZXNlIG1lbiBhcyB3ZWxsLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['58.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbnN0IGFsbCBvdGhlcnMgd2hvIGluIHRoZWlyIHdyb25nZG9pbmcKICAgICAgICAgICAgICAgICAgICB3b3JrIGhhcm0gdXBvbiB0aG9zZSB3aG8gY29tZSBpbnRvIGNvbnRhY3Qgd2l0aCB0aGVtIG1lbiBtYXkgcHJvdGVjdCB0aGVtc2VsdmVzLAogICAgICAgICAgICAgICAgICAgIHNvbWUgYnkgc2V0dGluZyBhIGd1YXJkIG92ZXIgdGhlaXIgaG91c2Vob2xkIGVmZmVjdHMsIG90aGVycyBieSBzdGF5aW5nIGF0IGhvbWUKICAgICAgICAgICAgICAgICAgICBhdCBuaWdodCwgc28gYXMgdG8gc3VmZmVyIG5vIGhhcm0sIGFuZCBhZ2FpbiwgYnkgdGFraW5nIHByZWNhdXRpb25zIGluIG9uZSB3YXkKICAgICAgICAgICAgICAgICAgICBvciBhbm90aGVyIG1lbiBjYW4gZ3VhcmQgYWdhaW5zdCB0aGUgcGxvdHMgb2YgdGhvc2Ugd2hvIHdpc2ggdG8gd29yayB0aGVtIGhhcm07CiAgICAgICAgICAgICAgICAgICAgYnV0IGFnYWluc3QgcGV0dGlmb2dnZXJzIGxpa2UgdGhpcyBtYW7igJR3aGl0aGVyIGNhbiBvbmUgZ28gdG8gd2luCiAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHkgZnJvbSB0aGVtPyBUaGUgdGhpbmdzIHdoaWNoIGFyZSBhIG1lYW5zIG9mIGVzY2FwZSBmcm9tIG90aGVyIGNyaW1lcyBhcmUKICAgICAgICAgICAgICAgICAgICB0aGUgc3RvY2staW4tdHJhZGUgb2YgdGhlc2UgbWVu4oCUdGhlIGxhd3MsIHRoYXQgaXMsIHRoZSBjb3VydHMsCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzLCBhc3NlbWJsaWVzLiBJdCBpcyBoZXJlIHRoYXQgdGhleSBzaG93IHRoZWlyIHN0cmVuZ3RoLCBjb3VudGluZyBhcwogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgdGhvc2Ugd2hvIG9mZmVyIHRoZW0gbW9uZXksIGFuZCB0aGUgcXVpZXQgYW5kIHdlYWx0aHkgcGVvcGxlIGFzIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZm9lcy4gPC90cmFuc2xhdGlvbj4="
translation['58.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVtZW1iZXIsCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlLCBtZW4gb2YgdGhlIGp1cnksIHRoZSB3aWNrZWRuZXNzIG9mIHRoZXNlIG1lbiwgYW5kIHJlbWVtYmVyIGFsc28gb3VyCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzLCBvZiB3aG9tIEVwaWNoYXJlcywgbXkgZ3JhbmRmYXRoZXIsIHdhcyB2aWN0b3IgaW4gdGhlIGZvb3QtcmFjZSBmb3IKICAgICAgICAgICAgICAgICAgICBib3lzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bXBpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bXBpYSI+T2x5bXBpYTwvcGxhY2VOYW1lPiBhbmQgd29uIGEgY3Jvd24gZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGNpdHksIGFuZCBlbmpveWVkIGdvb2QgcmVwb3J0IGFtb25nIHlvdXIgYW5jZXN0b3JzIGFzIGxvbmcgYXMgaGUgbGl2ZWQ7CiAgICAgICAgICAgICAgICAgICAgd2hlcmVhcyB3ZSwgdGhhbmtzIHRvIHRoaXMgZ29kLWRldGVzdGVkIGZlbGxvdywgaGF2ZSBiZWVuIGRlcHJpdmVkIG9mIG91cgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zaGlwIGluIHRoYXQgc3RhdGUgPC90cmFuc2xhdGlvbj4="
translation['58.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5pbiBkZWZlbmNlIG9mIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgQXJpc3RvY3JhdGVzLCBzb24gb2YgU2NlbGl1cywgdGhlIHVuY2xlIG9mIG15IGdyYW5kZmF0aGVyIEVwaWNoYXJlcywgd2hvc2UgbmFtZQogICAgICAgICAgICAgICAgICAgIG15IGJyb3RoZXIgaGVyZSBiZWFycywgcGVyZm9ybWVkIG1hbnkgZ2xvcmlvdXMgZGVlZHMsIHdoZW4gb3VyIGNvdW50cnkgd2FzIGF0CiAgICAgICAgICAgICAgICAgICAgd2FyIHdpdGggdGhlIExhY2VkYWVtb25pYW5zLiBIZSByYXplZCB0byB0aGUgZ3JvdW5kIEVldGlvbmVpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgb25lIG9mIHRoZSBmb3J0cyBndWFyZGluZyB0aGUgUGVpcmFldXMuIE9uCiAgICAgICAgICAgICAgICAgICAgICAgIEFyaXN0b2NyYXRlcyBhbmQgaGlzIHN0cnVnZ2xlIHdpdGggdGhlIG9saWdhcmNocywgc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDguODgiIHZhbGlkPSJ5ZXMiPlRodWMuIDguODgtOTI8L2JpYmw+Ljwvbm90ZT4gaW50byB3aGljaCBDcml0aWFzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gOC44OCIgdmFsaWQ9InllcyI+VGh1Yy4gOC44OC05MjwvYmlibD4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNyaXRpYXMgd2FzIG9uZSBvZiB0aGUgbGVhZGVycyBvZiB0aGUgVGhpcnR5IFR5cmFudHMuCiAgICAgICAgICAgICAgICAgICAgICAgIEVwaWNoYXJlcyBpcyBhdCBmYXVsdCBpbiBoaXMgY2hyb25vbG9neS48L25vdGU+IGFuZCBoaXMgZmFjdGlvbiB3ZXJlIGFib3V0CiAgICAgICAgICAgICAgICAgICAgdG8gcmVjZWl2ZSB0aGUgTGFjZWRhZW1vbmlhbnMsIGRlc3Ryb3llZCB0aGUgZm9ydHJlc3MgcmFpc2VkIGFnYWluc3QgdXMsIGFuZAogICAgICAgICAgICAgICAgICAgIHJlc3RvcmVkIHRoZSBwZW9wbGUgdG8gdGhlaXIgY291bnRyeSwgaW5jdXJyaW5nIGhpbXNlbGYgZGFuZ2VycyBub3QgbGlrZSB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdlIGFyZSBpbmN1cnJpbmcsIGJ1dCBkYW5nZXJzIGluIHdoaWNoIGV2ZW4gZGlzYXN0ZXIgaXMgZ2xvcmlvdXM7IGFuZCBoZQogICAgICAgICAgICAgICAgICAgIHB1dCBhIHN0b3AgdG8gdGhvc2Ugd2hvIHdlcmUgcGxvdHRpbmcgYWdhaW5zdCB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['58.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGlzIHNha2UsIGV2ZW4gaWYgd2UgaGFkIGJlZW4gbGlrZSB0aGlzIGZlbGxvdwogICAgICAgICAgICAgICAgICAgIFRoZW9jcmluZXMsIHlvdSB3b3VsZCB3aXRoIGdvb2QgcmlnaHQgaGF2ZSBwcmVzZXJ2ZWQgdXM7IHRvIHNheSBub3RoaW5nIG9mIG91cgogICAgICAgICAgICAgICAgICAgIGJlaW5nIGJldHRlciB0aGFuIGhlIGFuZCBvZiBvdXIgcGxlYWRpbmcgYSBjYXVzZSB3aGljaCBpcyBqdXN0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XZSB3aWxsIG5vdCBidXJkZW4geW91IGJ5IGNvbnN0YW50bHkgcmVwZWF0aW5nIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzLCBmb3IgdGhlIGRlZmVuZGFudCBoYXMgYnJvdWdodCB1cyBpbnRvIHN1Y2ggcGxpZ2h0IHRoYXQsIGFzIEkgc2FpZCBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBvdXRzZXQsIHdlIGhhdmUgbm8gaG9wZSBvZiBzaGFyaW5nIGluIHRoYXQgZnJlZWRvbSBvZiBzcGVlY2ggd2hpY2ggaXMgZ3JhbnRlZAogICAgICAgICAgICAgICAgICAgIGV2ZW4gdG8gYWxpZW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['58.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBvcmRlciwgdGhlcmVmb3JlLCB0aGF0LCBpZgogICAgICAgICAgICAgICAgICAgIHdlIGdldCBub3RoaW5nIGVsc2UsIHdlIG1heSBhdCBsZWFzdCBoYXZlIHRoZSBzYXRpc2ZhY3Rpb24gb2Ygc2VlaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCBhbHNvIHJlZHVjZWQgdG8gc2lsZW5jZSwgY29tZSB0byBvdXIgYWlkOyBoYXZlIHBpdHkgb24gdGhvc2Ugb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgZmFtaWx5IHdobyBoYXZlIGRpZWQgZm9yIHRoZWlyIGNvdW50cnk7IGNvbXBlbCBUaGVvY3JpbmVzIHRvIG1ha2UgaGlzIGRlZmVuY2Ugb24KICAgICAgICAgICAgICAgICAgICB0aGUgcXVlc3Rpb25zIHJhaXNlZCBieSB0aGUgaW5kaWN0bWVudCBpdHNlbGY7IGFuZCBzaG93IHlvdXJzZWx2ZXMgYXMganVkZ2VzIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIHdvcmRzIHN1Y2ggYXMgaGUgc2hvd2VkIGhpbXNlbGYgYXMgb3VyIGFjY3VzZXIuIDwvdHJhbnNsYXRpb24+"
translation['58.70'] = ""
translation['59.speaker'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJzcGVha2VyIiB1bml0PSJwYXJ0IiAvPjwvdHJhbnNsYXRpb24+"
translation['59.speaker'] = ""
translation['60.1'] = ""
translation['60.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGF0IHRoZSBTdGF0ZSBzZXJpb3VzbHkgY29uY2VybnMgaXRzZWxmIHdpdGggdGhvc2Ugd2hvIGRpZSBpbgogICAgICAgICAgICAgICAgICAgIGJhdHRsZSBpdCBpcyBwb3NzaWJsZSB0byBpbmZlciBib3RoIGZyb20gdGhlc2Ugcml0ZXMgaW4gZ2VuZXJhbCBhbmQsIGluCiAgICAgICAgICAgICAgICAgICAgcGFydGljdWxhciwgZnJvbSB0aGlzIGxhdyBpbiBhY2NvcmRhbmNlIHdpdGggd2hpY2ggaXQgY2hvb3NlcyB0aGUgc3BlYWtlciBhdCBvdXIKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgZnVuZXJhbHMuIEZvciBrbm93aW5nIHRoYXQgYW1vbmcgZ29vZCBtZW4gdGhlIGFjcXVpc2l0aW9uIG9mIHdlYWx0aCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgZW5qb3ltZW50IG9mIHRoZSBwbGVhc3VyZXMgdGhhdCBnbyB3aXRoIGxpdmluZyBhcmUgc2Nvcm5lZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QSBjb21tb25wbGFjZSBvZiBmdW5lcmFsIHNwZWVjaGVzOiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAyLjQyLjQiIHZhbGlkPSJ5ZXMiPlRodWMuIDIuNDIuNDwvYmlibD4uPC9ub3RlPiBhbmQgdGhhdCB0aGVpciB3aG9sZSBkZXNpcmUgaXMgZm9yIHZpcnR1ZQogICAgICAgICAgICAgICAgICAgIGFuZCB3b3JkcyBvZiBwcmFpc2UsIHRoZSBjaXRpemVucyB3ZXJlIG9mIHRoZSBvcGluaW9uIHRoYXQgd2Ugb3VnaHQgdG8gaG9ub3IKICAgICAgICAgICAgICAgICAgICB0aGVtIHdpdGggc3VjaCBldWxvZ2llcyBhcyB3b3VsZCBtb3N0IGNlcnRhaW5seSBzZWN1cmUgdGhlbSBpbiBkZWF0aCB0aGUgZ2xvcnkKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCB3b24gd2hpbGUgbGl2aW5nLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAyLjQyLjQiIHZhbGlkPSJ5ZXMiPlRodWMuIDIuNDIuNDwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['60.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaWYgaXQgd2VyZSBteQogICAgICAgICAgICAgICAgICAgIHZpZXcgdGhhdCwgb2YgdGhvc2UgcXVhbGl0aWVzIHRoYXQgY29uc3RpdHV0ZSB2aXJ0dWUsIGNvdXJhZ2UgYWxvbmUgd2FzIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiwgSSBtaWdodCBwcmFpc2UgdGhpcyBhbmQgYmUgZG9uZSB3aXRoIHRoZSBzcGVha2luZywgYnV0IHNpbmNlIGl0IGZlbGwKICAgICAgICAgICAgICAgICAgICB0byB0aGVpciBsb3QgYWxzbyB0byBoYXZlIGJlZW4gbm9ibHkgYm9ybiBhbmQgc3RyaWN0bHkgYnJvdWdodCB1cCBhbmQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGxpdmVkIHdpdGggbG9mdHkgaWRlYWxzLCBiZWNhdXNlIG9mIGFsbCB3aGljaCB0aGV5IGhhZCBldmVyeSByZWFzb24gdG8gYmUgZ29vZAogICAgICAgICAgICAgICAgICAgIG1lbiwgSSBzaG91bGQgYmUgYXNoYW1lZCBpZiBJIHdlcmUgZm91bmQgdG8gaGF2ZSBwYXNzZWQgb3ZlciBhbnkgb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICAgICAgdG9waWNzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CbGFzcyBjZW5zdXJlcyB0aGUgYXV0aG9yIGZvciBub3QKICAgICAgICAgICAgICAgICAgICAgICAgZm9sbG93aW5nIGluIHRoZSBzZXF1ZWwgYSB0aHJlZWZvbGQgZGl2aXNpb24gb2YgaGlzIHRoZW1lLCB3aGljaCBpcyBoZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGltcGxpZWQgYW5kIG1heSBiZSBmb3VuZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBNZW5leC4gMjM3YSIgdmFsaWQ9InllcyI+UGxhdC4gTWVuZXguIDIzNwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS1iPC9iaWJsPjogbm9iaWxpdHkgb2YgYmlydGgsIHVwYnJpbmdpbmcgYW5kIGVkdWNhdGlvbiwgYW5kIGV4cGxvaXRzLgogICAgICAgICAgICAgICAgICAgICAgICBUaGVzZSB0b3BpY3MgYXJlIHRyZWF0ZWQsIGJ1dCBub3QgY29uc2VjdXRpdmVseS4gUGVjdWxpYXIgdG8gdGhpcyBzcGVlY2ggaXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBhc3NhZ2Ugb24gdGhlIHRlbiB0cmliZXMsIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjAuMjciIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgNjAuMjctMzI8L2JpYmw+Ljwvbm90ZT4gSSBzaGFsbCBiZWdpbiBmcm9tIHRoZSBvcmlnaW4gb2YgdGhlaXIgcmFjZS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBNZW5leC4gMjM3YSIgdmFsaWQ9InllcyI+UGxhdC4gTWVuZXguIDIzNwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS1iPC9iaWJsPjogbm9iaWxpdHkgb2YgYmlydGgsIHVwYnJpbmdpbmcgYW5kIGVkdWNhdGlvbiwgYW5kIGV4cGxvaXRzLgogICAgICAgICAgICAgICAgICAgICAgICBUaGVzZSB0b3BpY3MgYXJlIHRyZWF0ZWQsIGJ1dCBub3QgY29uc2VjdXRpdmVseS4gUGVjdWxpYXIgdG8gdGhpcyBzcGVlY2ggaXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBhc3NhZ2Ugb24gdGhlIHRlbiB0cmliZXMsIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjAuMjciIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgNjAuMjctMzI8L2JpYmw+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CbGFzcyBjb21wYXJlcyBJc29jcmF0ZXMsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGVuPC90aXRsZT4xNgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4ThvbTOvSDOvOG9ss69IM6/4b2Wzr0g4byAz4HPh+G9tM69IM+Ezr/hv6YgzrvhvbnOs86/z4Ugz4DOv8654b21z4POv868zrHOuQogICAgICAgICAgICAgICAgICAgICAgICAgICAgz4TOv865zrHhvbvPhM63zr0gz4TOv+G/piDOs+G9s869zr/Phc+CIM6x4b2Qz4Thv4bPgjwvZm9yZWlnbj4sIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Iklzb2MuIDEwLjE2IiB2YWxpZD0ieWVzIj5Jc29jLiAxMC4xNjwvYmlibD7vvIkuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGVuPC90aXRsZT4xNgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4ThvbTOvSDOvOG9ss69IM6/4b2Wzr0g4byAz4HPh+G9tM69IM+Ezr/hv6YgzrvhvbnOs86/z4Ugz4DOv8654b21z4POv868zrHOuQogICAgICAgICAgICAgICAgICAgICAgICAgICAgz4TOv865zrHhvbvPhM63zr0gz4TOv+G/piDOs+G9s869zr/Phc+CIM6x4b2Qz4Thv4bPgjwvZm9yZWlnbj4sIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Iklzb2MuIDEwLjE2IiB2YWxpZD0ieWVzIj5Jc29jLiAxMC4xNjwvYmlibD7vvIkuPC90cmFuc2xhdGlvbj4="
translation['60.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgbm9iaWxpdHkgb2YKICAgICAgICAgICAgICAgICAgICBiaXJ0aCBvZiB0aGVzZSBtZW4gaGFzIGJlZW4gYWNrbm93bGVkZ2VkIGZyb20gdGltZSBpbW1lbW9yaWFsIGJ5IGFsbCBtYW5raW5kLgogICAgICAgICAgICAgICAgICAgIEZvciBpdCBpcyBwb3NzaWJsZSBmb3IgdGhlbSBhbmQgZm9yIGVhY2ggb25lIG9mIHRoZWlyIHJlbW90ZSBhbmNlc3RvcnMgbWFuIGJ5CiAgICAgICAgICAgICAgICAgICAgbWFuIHRvIHRyYWNlIGJhY2sgdGhlaXIgYmVpbmcsIG5vdCBvbmx5IHRvIGEgcGh5c2ljYWwgZmF0aGVyLCBidXQgYWxzbyB0byB0aGlzCiAgICAgICAgICAgICAgICAgICAgbGFuZCBvZiB0aGVpcnMgYXMgYSB3aG9sZSwgYSBjb21tb24gcG9zc2Vzc2lvbiwgb2Ygd2hpY2ggdGhleSBhcmUgYWNrbm93bGVkZ2VkCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgdGhlIGluZGlnZW5vdXMgY2hpbGRyZW4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgdG9waWMKICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFycyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBNZW5leC4gMjM3YiIgdmFsaWQ9InllcyI+UGxhdC4gTWVuZXguIDIzNyBiLWM8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBGb3IgYWxvbmUgb2YgYWxsIG1hbmtpbmQgdGhleSBzZXR0bGVkIHRoZSB2ZXJ5IGxhbmQgZnJvbSB3aGljaCB0aGV5IHdlcmUgYm9ybgogICAgICAgICAgICAgICAgICAgIGFuZCBoYW5kZWQgaXQgZG93biB0byB0aGVpciBkZXNjZW5kYW50cywgc28gdGhhdCBqdXN0bHkgb25lIG1heSBhc3N1bWUgdGhhdAogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBjYW1lIGFzIG1pZ3JhbnRzIGludG8gdGhlaXIgY2l0aWVzIGFuZCBhcmUgZGVub21pbmF0ZWQgY2l0aXplbnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBhcmUgY29tcGFyYWJsZSB0byBhZG9wdGVkIGNoaWxkcmVuOyBidXQgdGhlc2UgbWVuIGFyZSBjaXRpemVucyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIG5hdGl2ZSBsYW5kIGJ5IHJpZ2h0IG9mIGxlZ2l0aW1hdGUgYmlydGguPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTWVuZXguIDIzN2IiIHZhbGlkPSJ5ZXMiPlBsYXQuIE1lbmV4LiAyMzcgYi1jPC9iaWJsPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcwogICAgICAgICAgICAgICAgICAgICAgICB0b3BpYyBhcHBlYXJzIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNi43IiB2YWxpZD0ieWVzIj5IeXAuIEVwaXRhcGguIDc8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDYuNyIgdmFsaWQ9InllcyI+SHlwLiBFcGl0YXBoLiA3PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['60.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIG15IHZpZXcgYWxzbyB0aGUgZmFjdCB0aGF0IHRoZSBmcnVpdHMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZWFydGggYnkgd2hpY2ggbWVuIGxpdmUgd2VyZSBmaXJzdCBtYW5pZmVzdCBhbW9uZyB1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWNjb3JkaW5nIHRvIHRyYWRpdGlvbiB0aGUgb2xpdmUgd2FzIGNyZWF0ZWQgYnkgdGhlIGdvZGRlc3MKICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5hLCB3aGlsZSB0aGUgY3VsdHVyZSBvZiBncmFpbiwgZXNwZWNpYWxseSB3aGVhdCBhbmQgYmFybGV5LCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgZXN0YWJsaXNoZWQgYnkgRGVtZXRlciwgd2hvc2UgbXlzdGVyaWVzIHdlcmUgY2VsZWJyYXRlZCBhdCBFbGV1c2lzIGNsb3NlIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIEF0aGVucy48L25vdGU+IGV2ZW4gYXBhcnQgZnJvbSB0aGVpciBiZWluZyBhIHN1cGVybGF0aXZlIGJvb24gdG8gYWxsIG1lbiwKICAgICAgICAgICAgICAgICAgICBjb25zdGl0dXRlcyBhbiBhY2tub3dsZWRnZWQgcHJvb2YgdGhhdCB0aGlzIGxhbmQgaXMgdGhlIG1vdGhlciBvZiBvdXIgYW5jZXN0b3JzLgogICAgICAgICAgICAgICAgICAgIEZvciBhbGwgdGhpbmdzIHRoYXQgYnJpbmcgZm9ydGggeW91bmcgcHJvZHVjZSBhdCB0aGUgc2FtZSB0aW1lIG51dHJpbWVudCBvdXQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgb3JnYW5pc20gaXRzZWxmPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9yLCDigJxieSBhIGxhdyBvZgogICAgICAgICAgICAgICAgICAgICAgICBuYXR1cmUgaGVyc2VsZi7igJ08L25vdGU+IGZvciB0aG9zZSB0aGF0IGFyZSBib3JuLiBUaGlzIHZlcnkgdGhpbmcKICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBkb25lIGJ5IHRoaXMgbGFuZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB0b3BpYyBpcwogICAgICAgICAgICAgICAgICAgICAgICB0cmVhdGVkIGluIG1vcmUgZGV0YWlsIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIE1lbmV4LiAyMzdlIiB2YWxpZD0ieWVzIj5QbGF0LiBNZW5leC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIzN2UtMjM4YjwvYmlibD4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIE1lbmV4LiAyMzdlIiB2YWxpZD0ieWVzIj5QbGF0LiBNZW5leC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIzN2UtMjM4YjwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['60.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5TdWNoIGlzIHRoZQogICAgICAgICAgICAgICAgICAgIHByaWRlIG9mIGJpcnRoIHRoYXQgYmVsb25ncyB0byB0aGUgYW5jZXN0b3JzIG9mIHRoZXNlIG1lbiB0aHJvdWdob3V0IHRoZSBhZ2VzLgogICAgICAgICAgICAgICAgICAgIEFzIGZvciBDb3VyYWdlIGFuZCB0aGUgb3RoZXIgZWxlbWVudHMgb2YgdmlydHVlLCBJIHNocmluayBmcm9tIHJlaGVhcnNpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgc3RvcnksIGJlaW5nIG9uIG15IGd1YXJkIGZvciBmZWFyIGFuIHVudGltZWx5IGxlbmd0aCBzaGFsbCBhdHRhY2ggdG8gbXkKICAgICAgICAgICAgICAgICAgICBzcGVlY2ggLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Bbm90aGVyIGNvbW1vbnBsYWNlOiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDQiIHZhbGlkPSJ5ZXMiPkh5cC4gNDwvYmlibD4gZXhwcmVzc2VzIGEgc2ltaWxhciBmZWFyLjwvbm90ZT4gYnV0IHN1Y2ggZmFjdHMgYXMgaXQgaXMKICAgICAgICAgICAgICAgICAgICB3b3J0aCB3aGlsZSBldmVuIGZvciB0aG9zZSB3aG8gYXJlIGZhbWlsaWFyIHdpdGggdGhlbSB0byByZWNhbGwgdG8gbWluZCBhbmQgbW9zdAogICAgICAgICAgICAgICAgICAgIHByb2ZpdGFibGUgZm9yIHRoZSBpbmV4cGVyaWVuY2VkIHRvIGhlYXIsPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSHlwLiA0IiB2YWxpZD0ieWVzIj5IeXAuIDQ8L2JpYmw+IGV4cHJlc3NlcyBhIHNpbWlsYXIgZmVhci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMi4zNi40IiB2YWxpZD0ieWVzIj5UaHVjLiAyLjM2LjQ8L2JpYmw+IG1heSBiZSBjb21wYXJlZC48L25vdGU+IGV2ZW50cyBvZgogICAgICAgICAgICAgICAgICAgIGdyZWF0IHBvd2VyIHRvIGluc3BpcmUgYW5kIGNhbGxpbmcgZm9yIG5vIHRlZGlvdXMgbGVuZ3RoIG9mIHNwZWVjaCwgdGhlc2UgSQogICAgICAgICAgICAgICAgICAgIHNoYWxsIGVuZGVhdm9yIHRvIHJlaGVhcnNlIGluIHN1bW1hcnkgZmFzaGlvbi48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAyLjM2LjQiIHZhbGlkPSJ5ZXMiPlRodWMuIDIuMzYuNDwvYmlibD4gbWF5IGJlIGNvbXBhcmVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDUiIHZhbGlkPSJ5ZXMiPkh5cC4gNSA8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+A4b22IM66zrXPhs6xzrvOseG9t86/z4U8L2ZvcmVpZ24+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDUiIHZhbGlkPSJ5ZXMiPkh5cC4gNSA8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+A4b22IM66zrXPhs6xzrvOseG9t86/z4U8L2ZvcmVpZ24+LjwvdHJhbnNsYXRpb24+"
translation['60.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgYW5jZXN0b3JzIG9mIHRoaXMgcHJlc2VudCBnZW5lcmF0aW9uLAogICAgICAgICAgICAgICAgICAgIGJvdGggdGhlaXIgZmF0aGVycyBhbmQgdGhvc2Ugd2hvIGJvcmUgdGhlIG5hbWVzIG9mIHRoZXNlIG1lbiBpbiB0aW1lIHBhc3QsIGJ5CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhleSBhcmUgcmVjb2duaXplZCBieSB0aG9zZSBvZiBvdXIgcmFjZSwgbmV2ZXIgYXQgYW55IHRpbWUgd3JvbmdlZCBhbnkKICAgICAgICAgICAgICAgICAgICBtYW4sIHdoZXRoZXIgR3JlZWsgb3IgYmFyYmFyaWFuLCBidXQgaXQgd2FzIHRoZWlyIHByaWRlLCBpbiBhZGRpdGlvbiB0byBhbGwKICAgICAgICAgICAgICAgICAgICB0aGVpciBvdGhlciBnb29kIHF1YWxpdGllcywgdG8gYmUgdHJ1ZSBnZW50bGVtZW4gYW5kIHN1cHJlbWVseSBqdXN0LCBhbmQgaW4KICAgICAgICAgICAgICAgICAgICBkZWZlbmRpbmcgdGhlbXNlbHZlcyB0aGV5IGFjY29tcGxpc2hlZCBhIGxvbmcgbGlzdCBvZiBub2JsZSBkZWVkcy4gPC90cmFuc2xhdGlvbj4="
translation['60.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgc28gcHJldmFpbGVkIG92ZXIgdGhlIGludmFkaW5nIGhvc3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgQW1hem9ucyBhcyB0byBleHBlbCB0aGVtIGJleW9uZCB0aGUgUGhhc2lzLCBhbmQgdGhlIGhvc3Qgb2YgRXVtb2xwdXMgYW5kIG9mIG1hbnkKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIGZvZW1hbiB0aGV5IGRyb3ZlIG5vdCBvbmx5IG91dCBvZiB0aGVpciBvd24gbGFuZCBidXQgYWxzbyBmcm9tIHRoZSBsYW5kcwogICAgICAgICAgICAgICAgICAgIG9mIGFsbCB0aGUgb3RoZXIgR3JlZWtz4oCUaW52YWRlcnMgd2hvbSBhbGwgdGhvc2UgZHdlbGxpbmcgb24gb3VyIGZyb250CiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHdlc3R3YXJkIG5laXRoZXIgd2l0aHN0b29kIG5vciBwb3NzZXNzZWQgdGhlIHBvd2VyIHRvIGhhbHQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBmZW1hbGUgd2FycmlvcnMga25vd24gYXMgQW1hem9ucyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVsbGVkIGJ5IFRoZXNldXMuIFRoZSBQaGFzaXMgUml2ZXIgaW4gQ29sY2hpcywgbm93IHRoZSBSaW9uLCB3YXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2VuZGFyeSBib3VuZGFyeSBiZXR3ZWVuIEV1cm9wZSBhbmQgQXNpYS4gRXVtb2xwdXMgaW52YWRlZCBHcmVlY2UgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICBUaHJhY2UgYnV0IHdhcyBoYWx0ZWQgYnkgRXJlY2h0aGV1cyBhdCBFbGV1c2lzLiBUaGUgcm91dGUgdG8gYWxsIHBhcnRzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBtYWlubGFuZCBpc3N1ZWQgZnJvbSBBdGhlbnMgb24gdGhlIHdlc3Qgc2lkZS48L25vdGU+IE1vcmVvdmVyLCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBzdHlsZWQgdGhlIHNhdmlvcnMgb2YgdGhlIHNvbnMgb2YgSGVyYWNsZXMsIHdobyBoaW1zZWxmIHdhcyB0aGUgc2F2aW9yIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3Qgb2YgbWFua2luZCwgd2hlbiB0aGV5IGFycml2ZWQgaW4gdGhpcyBsYW5kIGFzIHN1cHBsaWFudHMsIGZsZWVpbmcgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgRXVyeXN0aGV1cy4gSW4gYWRkaXRpb24gdG8gYWxsIHRoZXNlIGFuZCBtYW55IG90aGVyIG5vYmxlIGRlZWRzIHRoZXkgcmVmdXNlZCB0bwogICAgICAgICAgICAgICAgICAgIHN1ZmZlciB0aGUgbGF3ZnVsIHJpdGVzIG9mIHRoZSBkZXBhcnRlZCB0byBiZSB0cmVhdGVkIHdpdGggZGVzcGl0ZSB3aGVuIENyZW9uCiAgICAgICAgICAgICAgICAgICAgZm9yYmFkZSB0aGUgYnVyaWFsIG9mIOKAnHRoZSBzZXZlbiBhZ2FpbnN0IFRoZWJlcy7igJ08bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBwaHJhc2UgYmVjYW1lIHByb3ZlcmJpYWwgYXMgdGhlIHRpdGxlIG9mIGEKICAgICAgICAgICAgICAgICAgICAgICAgZHJhbWEgYnkgQWVzY2h5bHVzLiBUaGVzZXVzLCBraW5nIG9mIEF0aGVucywgZ2F2ZSBhaWQgdG8gdGhlIHN1cHBsaWFudCB3aXZlcwogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgQXJnaXZlIGhlcm9lcyB3aGVuIENyZW9uLCBraW5nIG9mIFRoZWJlcywgcmVmdXNlZCBidXJpYWwgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICAgICAgc2xhaW4gaHVzYmFuZHM6IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkV1ci4gU3VwcC4gMSIgdmFsaWQ9InllcyI+RXVyLiBTdXBwLjwvYmlibD48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBTdXBwLiAxIiB2YWxpZD0ieWVzIj5FdXIuIFN1cHAuPC9iaWJsPjwvdHJhbnNsYXRpb24+"
translation['60.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3csIG9taXR0aW5nCiAgICAgICAgICAgICAgICAgICAgbWVudGlvbiBvZiBtYW55IGV4cGxvaXRzIHRoYXQgYXJlIGNsYXNzZWQgYXMgbXl0aHMsIEkgaGF2ZSByZWNhbGxlZCB0byBtaW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGFib3ZlLW1lbnRpb25lZCwgZWFjaCBvZiB3aGljaCBhZmZvcmRzIHNvIG1hbnkgY2hhcm1pbmcgdGhlbWVzIHRoYXQgb3VyIHdyaXRlcnMKICAgICAgICAgICAgICAgICAgICBvZiBwb2V0cnksIHdoZXRoZXIgcmVjaXRlZCBvciBzdW5nLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGluY3Rpb24gaXMgYmV0d2VlbiBlcGljIGFuZCBkcmFtYXRpYyBwb2V0cnksIHdoaWNoIHdhcyByZWNpdGVkLCBhbmQgb2RlcwogICAgICAgICAgICAgICAgICAgICAgICBzdWNoIGFzIHRob3NlIG9mIFBpbmRhciwgYW5kIGRpdGh5cmFtYnMsIHdoaWNoIHdlcmUgc3VuZyB0byBtdXNpY2FsCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY29tcGFuaW1lbnQuPC9ub3RlPiBhbmQgbWFueSBoaXN0b3JpYW5zLCBoYXZlIG1hZGUgdGhlIGRlZWRzIG9mIHRob3NlIG1lbgogICAgICAgICAgICAgICAgICAgIHRoZSBzdWJqZWN0cyBvZiB0aGVpciByZXNwZWN0aXZlIGFydHM7IGF0IHRoZSBwcmVzZW50IHRpbWUgSSBzaGFsbCBtZW50aW9uIHRoZQogICAgICAgICAgICAgICAgICAgIGZvbGxvd2luZyBkZWVkcywgd2hpY2gsIHRob3VnaCBpbiBwb2ludCBvZiBtZXJpdCB0aGV5IGFyZSBubyB3aGl0IGluZmVyaW9yIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvcm1lciwgc3RpbGwsIHRocm91Z2ggYmVpbmcgY2xvc2VyIGluIHBvaW50IG9mIHRpbWUsIGhhdmUgbm90IHlldCBmb3VuZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHdheSBpbnRvIHBvZXRyeSBvciBldmVuIGJlZW4gZXhhbHRlZCB0byBlcGljIHJhbmsuIDwvdHJhbnNsYXRpb24+"
translation['60.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSBtZW4gc2luZ2xlLWhhbmRlZCB0d2ljZSByZXB1bHNlZCBieSBsYW5kIGFuZCBzZWEgdGhlCiAgICAgICAgICAgICAgICAgICAgZXhwZWRpdGlvbiBhc3NlbWJsZWQgb3V0IG9mIHRoZSB3aG9sZSBvZiBBc2lhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5LaW5nIERhcml1cyBvZiBQZXJzaWEgd2FzIHJlcHVsc2VkIGF0IE1hcmF0aG9uLCA0OTAsIGFuZCBYZXJ4ZXMgYXQgU2FsYW1pcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRlIGF1dGhuYW1lPSItNDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDgwIj40ODA8L2RhdGU+IEIuQy4gVGhlIFBlcnNpYW4gd2FycyBhcmUgZGlzY3Vzc2VkIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBNZW5leC4gMjM5ZCIgdmFsaWQ9InllcyI+UGxhdC4gTWVuZXguIDIzOWQgZmYuPC9iaWJsPgogICAgICAgICAgICAgICAgICAgIDwvbm90ZT4gYW5kIGF0IHRoZWlyIGluZGl2aWR1YWwgcmlza3MgZXN0YWJsaXNoZWQgdGhlbXNlbHZlcyBhcyB0aGUgYXV0aG9ycyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqb2ludCBzYWx2YXRpb24gb2YgYWxsIHRoZSBHcmVla3MuIEFuZCB0aG91Z2ggd2hhdCBJIHNoYWxsIHNheSBuZXh0IGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgc2FpZCBiZWZvcmUgYnkgbWFueSBhbm90aGVyLCBzdGlsbCBldmVuIGF0IHRoaXMgZGF0ZSB0aG9zZSBkZWFkIG11c3Qgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgZGVwcml2ZWQgb2YgdGhlaXIganVzdCBhbmQgZXhjZWxsZW50IHByYWlzZS4gRm9yIEkgc2F5IHRoYXQgd2l0aCBnb29kIHJlYXNvbgogICAgICAgICAgICAgICAgICAgIHRob3NlIG1lbiBtaWdodCBiZSBqdWRnZWQgc28gZmFyIHN1cGVyaW9yIHRvIHRob3NlIHdobyBjYW1wYWlnbmVkIGFnYWluc3QgVHJveSwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBsYXR0ZXIsIHRoZSBmb3JlbW9zdCBwcmluY2VzIG91dCBvZiB0aGUgd2hvbGUgb2YgR3JlZWNlLCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0eSBjYXB0dXJlZCBhIHNpbmdsZSBzdHJvbmdob2xkIG9mIEFzaWEgYWZ0ZXIgYmVzaWVnaW5nIGl0IGZvciB0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgeWVhcnMsPGRhdGUgYXV0aG5hbWU9Ii00ODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00ODAiPjQ4MDwvZGF0ZT4gQi5DLiBUaGUgUGVyc2lhbiB3YXJzIGFyZSBkaXNjdXNzZWQgYXQKICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIE1lbmV4LiAyMzlkIiB2YWxpZD0ieWVzIj5QbGF0LiBNZW5leC4gMjM5ZCBmZi48L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJsYXNzIG5vdGVzIHRoaXMgc2VudGltZW50IGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Iklzb2MuIDQuODMiIHZhbGlkPSJ5ZXMiPklzb2MuIDQuODM8L2JpYmw+LiBJdCBpcyBmb3VuZCBhbHNvIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNi4zNSIgdmFsaWQ9InllcyI+SHlwLiAzNTwvYmlibD4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Iklzb2MuIDQuODMiIHZhbGlkPSJ5ZXMiPklzb2MuIDQuODM8L2JpYmw+LiBJdCBpcyBmb3VuZCBhbHNvIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNi4zNSIgdmFsaWQ9InllcyI+SHlwLiAzNTwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['60.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz53aGVyZWFzIHRob3NlIG1lbiBzaW5nbGUtaGFuZGVkIG5vdCBvbmx5CiAgICAgICAgICAgICAgICAgICAgcmVwdWxzZWQgYSBob3N0IGFzc2VtYmxlZCBmcm9tIGFuIGVudGlyZSBjb250aW5lbnQsIHdoaWNoIGhhZCBhbHJlYWR5IHN1YmR1ZWQKICAgICAgICAgICAgICAgICAgICBhbGwgb3RoZXIgbGFuZHMsIGJ1dCBhbHNvIGluZmxpY3RlZCBwdW5pc2htZW50IGZvciB0aGUgd3JvbmcgZG9uZSB0aGUgcmVzdCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBHcmVla3MuIEZ1cnRoZXJtb3JlLCBjaGVja2luZyBhbGwgYWN0cyBvZiBzZWxmaXNoIGFnZ3JhbmRpc2VtZW50IGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgIEdyZWVrcyB0aGVtc2VsdmVzLCBhc3NpZ25pbmcgdGhlbXNlbHZlcyB0byBlYWNoIHN0YXRpb24gd2hlcmUganVzdGljZSB3YXMKICAgICAgICAgICAgICAgICAgICBhcnJheWVkLCB0aGV5IHdlbnQgb24gYmVhcmluZyB0aGUgYnJ1bnQgb2YgYWxsIGRhbmdlcnMgdGhhdCBjaGFuY2VkIHRvIGFyaXNlCiAgICAgICAgICAgICAgICAgICAgdW50aWwgdGhlIGxhcHNlIG9mIHRpbWUgYnJpbmdzIHVzIHRvIHRoZSBnZW5lcmF0aW9uIG5vdyBsaXZpbmcuIDwvdHJhbnNsYXRpb24+"
translation['60.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TGV0IG5vIG9uZSB0aGluayBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBlbnVtZXJhdGVkIHRoaXMgbGlzdCBvZiBhY2hpZXZlbWVudHMgYmVjYXVzZSBJIGFtIGF0IGEgbG9zcyB3aGF0IHRvIHNheQogICAgICAgICAgICAgICAgICAgIGFib3V0IGVhY2ggb2YgdGhlbTsgZm9yIGlmIEkgd2VyZSB0aGUgbW9zdCBoZWxwbGVzcyBvZiBhbGwgbWVuIGluIGRpc2NvdmVyaW5nCiAgICAgICAgICAgICAgICAgICAgd2hhdCBpdCBiZWNvbWVzIG1lIHRvIHNheSwgdGhlIHNoZWVyIHZpcnR1ZSBvZiB0aG9zZSBkZWFkIHJldmVhbHMgd2hhdAogICAgICAgICAgICAgICAgICAgIHNlbnRpbWVudHMgbGllIHRvIGhhbmQgYW5kIGFyZSBlYXN5IHRvIHJlaGVhcnNlLiBJdCBpcyBteSBpbnRlbnRpb24sIGhvd2V2ZXIsCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgY2FsbGluZyB0byBtaW5kIHRoZWlyIG5vYmxlIGJpcnRoIGFuZCB0aGUgbWFnbmlmaWNlbnQgdGhpbmdzIGRvbmUgYnkgdGhlaXIKICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMsIHdpdGggYWxsIHNwZWVkIHRvIGxpbmsgbXkgc3BlZWNoIHdpdGggdGhlIGRlZWRzIG9mIHRoZXNlIGRlYWQsIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZCB0aGF0LCBqdXN0IGFzIHRoZXkgd2VyZSBha2luIGluIHRoZSBmbGVzaCwgc28gSSBtYXkgbWFrZSB0aGUgd29yZHMgb2YgcHJhaXNlCiAgICAgICAgICAgICAgICAgICAgc3Bva2VuIG92ZXIgdGhlbSB0byBhcHBseSB0byBib3RoIGFsaWtlLiBJIGFzc3VtZSB0aGF0IHRoaXMgd291bGQgYmUgZ3JhdGlmeWluZwogICAgICAgICAgICAgICAgICAgIG5vdCBvbmx5IHRvIHRoZSBhbmNlc3RvcnMgYnV0LCBiZXN0IG9mIGFsbCwgdG8gYm90aCB0aGVtIGFuZCB0aGVzZSBkZWFkLCBpZiB0aGV5CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGNvbWUgdG8gc2hhcmUgb25lIGFub3RoZXIncyBtZXJpdCBub3Qgb25seSBieSB2aXJ0dWUgb2YgYmlydGggYnV0IGFsc28gYnkKICAgICAgICAgICAgICAgICAgICByZWFzb24gb2Ygb3VyIHdvcmRzIG9mIHByYWlzZS4gPC90cmFuc2xhdGlvbj4="
translation['60.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gdGhlIG1lYW50aW1lIGl0IGlzIG5lY2Vzc2FyeSB0byBpbnRlcnJ1cHQgbXkKICAgICAgICAgICAgICAgICAgICBkaXNjb3Vyc2UgZm9yIGEgbW9tZW50LCBiZWZvcmUgZGVjbGFyaW5nIHRoZSBkZWVkcyBvZiB0aGVzZSBtZW4sIHRvIHNvbGljaXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ29vZHdpbGwgb2YgdGhvc2UgYm9ybiBvdXRzaWRlIHRoaXMgcmFjZSB3aG8gaGF2ZSBhY2NvbXBhbmllZCB1cyB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdG9tYi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHdlbGNvbWUgZXh0ZW5kZWQgdG8gYWxpZW5zIGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgZnVuZXJhbHMgaXMgbWVudGlvbmVkIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDIuMzQuNCIgdmFsaWQ9InllcyI+VGh1Yy4gMi4zNC40PC9iaWJsPi4KICAgICAgICAgICAgICAgICAgICAgICAgUGVyaWNsZXMgcmVjb2duaXplcyB0aGVpciBwcmVzZW5jZSwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMzYuNCIgdmFsaWQ9InllcyI+VGh1Yy4KICAgICAgICAgICAgICAgICAgICAgICAgMzYuNDwvYmlibD4uPC9ub3RlPiBGb3IgaWYgSSBoYWQgYmVlbiBhcHBvaW50ZWQgdG8gZG8gaG9ub3IgdG8gdGhpcyBidXJpYWwKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIGV4cGVuZGl0dXJlIG9mIG1vbmV5IG9yIGJ5IHByb3ZpZGluZyBzb21lIGRpZmZlcmVudCBraW5kIG9mIGEgc3BlY3RhY2xlCiAgICAgICAgICAgICAgICAgICAgY29uc2lzdGluZyBvZiBlcXVlc3RyaWFuIG9yIGd5bW5hc3RpYyBjb250ZXN0cywgdGhlIGdyZWF0ZXIgbXkgemVhbCBhbmQgdGhlIG1vcmUKICAgICAgICAgICAgICAgICAgICBsYXZpc2ggbXkgZXhwZW5kaXR1cmUgaW4gcHJlcGFyaW5nIHN1Y2ggc3BlY3RhY2xlcywgdGhlIGJldHRlciBJIHNob3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiB0aG91Z2h0IHRvIGhhdmUgZG9uZSBteSBkdXR5LiBIYXZpbmcgYmVlbiBjaG9zZW4sIGhvd2V2ZXIsIHRvIGV4dG9sIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuIGluIGEgc3BlZWNoLCB1bmxlc3MgSSBoYXZlIHRoZSBzeW1wYXRoeSBvZiBteSBoZWFyZXJzLCBJIGZlYXIgdGhhdCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgb2YgbXkgZWFnZXJuZXNzIEkgbWF5IGVmZmVjdCB0aGUgdmVyeSBvcHBvc2l0ZSBvZiB3aGF0IEkgb3VnaHQuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDIuMzQuNCIgdmFsaWQ9InllcyI+VGh1Yy4gMi4zNC40PC9iaWJsPi4KICAgICAgICAgICAgICAgICAgICAgICAgUGVyaWNsZXMgcmVjb2duaXplcyB0aGVpciBwcmVzZW5jZSwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMzYuNCIgdmFsaWQ9InllcyI+VGh1Yy4KICAgICAgICAgICAgICAgICAgICAgICAgMzYuNDwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['60.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2VhbHRoIGFuZCBzcGVlZCBvZiBmb290IGFuZCBzdHJlbmd0aCBvZiBib2R5IGFuZAogICAgICAgICAgICAgICAgICAgIGFsbCBvdGhlciBzdWNoIHRoaW5ncyBoYXZlIHRoZWlyIHJld2FyZHMgc2VsZi1hc3N1cmVkIHRvIHRoZWlyIHBvc3Nlc3NvcnMsIGFuZAogICAgICAgICAgICAgICAgICAgIGluIHRob3NlIGZpZWxkcyB0aGV5IHdpbiB3aG8gaGF2ZSB0aGUgbHVjaywgZXZlbiBpZiBub3Qgb25lIG9mIHRoZSBvdGhlcnMgd2lzaGVzCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgc3VjY2Vzcy4gT24gdGhlIG90aGVyIGhhbmQsIHRoZSBwZXJzdWFzaXZlbmVzcyBvZiB3b3JkcyBkZXBlbmRzIHVwb24gdGhlCiAgICAgICAgICAgICAgICAgICAgZ29vZHdpbGwgb2YgdGhlIGhlYXJlcnMsIGFuZCB3aXRoIHRoZSBoZWxwIG9mIHRoaXMsIGV2ZW4gaWYgdGhlIGVsb3F1ZW5jZSBiZQogICAgICAgICAgICAgICAgICAgIG1vZGVyYXRlLCBpdCByZWFwcyBnbG9yeSBhbmQgZ2FpbnMgZmF2b3IsIGJ1dCBsYWNraW5nIHRoaXMgaGVscCwgZXZlbiBpZiBpdCBiZQogICAgICAgICAgICAgICAgICAgIHN1cnBhc3NpbmdseSBnb29kLCBpdCBpcyB0aHdhcnRlZCBieSB0aG9zZSB3aG8gaGVhci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Qmxhc3MgY29tcGFyZXMgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yNzciIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMjc3PC9iaWJsPiwgYnV0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwYXJhbGxlbCBpcyBub3QgcHJlY2lzZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yNzciIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMjc3PC9iaWJsPiwgYnV0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwYXJhbGxlbCBpcyBub3QgcHJlY2lzZS48L3RyYW5zbGF0aW9uPg=="
translation['60.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRvIHJlc3VtZQogICAgICAgICAgICAgICAgICAgIG15IHRoZW1lOiB0aG91Z2ggbWFueSBkZWVkcyBvZiB0aGVzZSBtZW4gYXJlIGF0IGhhbmQgYmVjYXVzZSBvZiB3aGljaCB0aGV5IHdpbGwKICAgICAgICAgICAgICAgICAgICBiZSBqdXN0bHkgZXVsb2dpemVkLCBJIGFtIGF0IGEgbG9zcyB3aGF0IHRvIG1lbnRpb24gZmlyc3Qgd2hlbiBJIGNvbWUgZmFjZSB0bwogICAgICAgICAgICAgICAgICAgIGZhY2Ugd2l0aCB0aGUgZmFjdHMuIEZvciB0aHJvbmdpbmcgaW50byBteSBtaW5kIGFzIHRoZXkgZG8sIGFsbCBhdCBvbmUgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgdGltZSwgaXQgYmVjb21lcyBkaWZmaWN1bHQgdG8gbWFrZSBhIGNob2ljZSBhbW9uZyB0aGVtLiBJIHNoYWxsIGVuZGVhdm9yLAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIHRvIG1haW50YWluIHRoZSBzYW1lIG9yZGVyIG9mIHRvcGljcyBpbiBteSBzcGVlY2ggYXMgbWFya2VkIHRoZSBjb3Vyc2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbGl2ZXMgb2YgdGhlc2UgbWVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['60.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIHRoZSBiZWdpbm5pbmcKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4gd2VyZSBvdXRzdGFuZGluZyBpbiBhbGwgdGhlIGFjdGl2aXRpZXMgdGhhdCBmb3JtZWQgdGhlaXIgc2Nob29saW5nLAogICAgICAgICAgICAgICAgICAgIGVuZ2FnaW5nIGluIHRoZSBleGVyY2lzZXMgdGhhdCBiZWNhbWUgZWFjaCBzdGFnZSBvZiBsaWZlLCBjYXVzaW5nIGdyYXRpZmljYXRpb24KICAgICAgICAgICAgICAgICAgICB0byBhbGwgd2hvIGhhZCBjbGFpbSB0byBpdOKAlHBhcmVudHMsIGZyaWVuZHMsIGtpbnNtZW4uIFRoZXJlZm9yZSwganVzdAogICAgICAgICAgICAgICAgICAgIGFzIGlmIHJlY29nbml6aW5nIGZvb3RwcmludHMsIHRoZSBtZW1vcnkgb2YgdGhvc2Ugd2hvIHdlcmUgbmVhciBhbmQgZGVhciB0byB0aGVtCiAgICAgICAgICAgICAgICAgICAgbm93IHR1cm5zIHRvIHRoZXNlIG1lbiBldmVyeSBob3VyIGluIGZvbmQgcmVjb2xsZWN0aW9uLCBmaW5kaW5nIG1hbnkgYSByZW1pbmRlcgogICAgICAgICAgICAgICAgICAgIG9mIG9jY2FzaW9ucyB3aGVuIHRoZXkga25ldyBpbiB0aGVpciBoZWFydHMgdGhhdCB0aGVzZSB3ZXJlIGxhZHMgb2Ygc3VycGFzc2luZwogICAgICAgICAgICAgICAgICAgIHdvcnRoLiA8L3RyYW5zbGF0aW9uPg=="
translation['60.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5BcnJpdmVkIGF0IG1hbmhvb2QgdGhleSByZW5kZXJlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGlubmF0ZSBub2JpbGl0eSBrbm93biwgbm90IG9ubHkgdG8gdGhlaXIgZmVsbG93LWNpdGl6ZW5zLCBidXQgdG8gYWxsIG1lbi4gRm9yIG9mCiAgICAgICAgICAgICAgICAgICAgYWxsIHZpcnR1ZSwgSSBzYXksIGFuZCBJIHJlcGVhdCBpdCwgdGhlIGJlZ2lubmluZyBpcyB1bmRlcnN0YW5kaW5nIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBmdWxmaWxsbWVudCBpcyBjb3VyYWdlOyBieSB0aGUgb25lIGl0IGlzIGp1ZGdlZCB3aGF0IG91Z2h0IHRvIGJlIGRvbmUgYW5kIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIHRoaXMgaXMgY2FycmllZCB0byBzdWNjZXNzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5LZW5uZWR5IGNpdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFNlc3QuIDQwLjg2IiB2YWxpZD0ieWVzIj5DaWNlcm8gUHJvIFNlc3RpbyA0MC44NjwvYmlibD4g4oCcaG9jCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnRpcmUgcHJ1ZGVudGlhZSBlc3QsIGZhY2VyZSBmb3J0aXR1ZGluaXMu4oCdPC9ub3RlPiBJbiBib3RoIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgcXVhbGl0aWVzIHRoZXNlIG1lbiB3ZXJlIGRpc3RpbmN0bHkgc3VwZXJpb3I7IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gU2VzdC4gNDAuODYiIHZhbGlkPSJ5ZXMiPkNpY2VybyBQcm8gU2VzdGlvIDQwLjg2PC9iaWJsPiDigJxob2MKICAgICAgICAgICAgICAgICAgICAgICAgc2VudGlyZSBwcnVkZW50aWFlIGVzdCwgZmFjZXJlIGZvcnRpdHVkaW5pcy7igJ08L3RyYW5zbGF0aW9uPg=="
translation['60.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgaWYgZXZlciBhIGRhbmdlciBhZmZlY3RpbmcgYWxsIHRoZSBHcmVla3Mgd2FzIGJyZXdpbmcsIHRoZXNlIHdlcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgdG8gZm9yZXNlZSBpdCwgYW5kIHRpbWUgYW5kIGFnYWluIHRoZXkgY2hhbGxlbmdlZCB0aGUgcmVzdCB0byBzYXZlIHRoZQogICAgICAgICAgICAgICAgICAgIHNpdHVhdGlvbi4gVGhpcyBhY3Rpb24gaXMgYSBkZW1vbnN0cmF0aW9uIG9mIHNvdW5kIGp1ZGdlbWVudCBqb2luZWQgd2l0aCBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBzcGlyaXQuIEFsdGhvdWdoLCBhZ2FpbiwgdGhlcmUgd2FzIG11Y2ggZm9sbHkgYW1vbmcgdGhlIEdyZWVrcywgbm90IHVubWl4ZWQgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBzbGFja25lc3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJ5CiAgICAgICAgICAgICAgICAgICAgICAgIOKAnHNsYWNrbmVzc+KAnSBpcyBtZWFudCB0aGUgYWNjZXB0YW5jZSBvZiBNYWNlZG9uaWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGJyaWJlcywgbWVudGlvbmVkIGJ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNi4xMCIgdmFsaWQ9InllcyI+SHlwLiAxMDwvYmlibD47IEJsYXNzIGNvbXBhcmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjIwIiB2YWxpZD0ieWVzIj5EZW0uIDE4LjIwPC9iaWJsPiwgd2hlcmUKICAgICAgICAgICAgICAgICAgICAgICAg4oCcZm9sbHnigJ0gaXMgdXNlZCBhcyBhIGV1cGhlbWlzbSBmb3IKICAgICAgICAgICAgICAgICAgICAgICAg4oCcc2xhY2tuZXNzLuKAnTwvbm90ZT4gYSBmb2xseSB3aGljaCBmYWlsZWQgdG8gZm9yZXNlZSBzb21lCiAgICAgICAgICAgICAgICAgICAgZGFuZ2VycyBhbmQgZmVpZ25lZCBub3QgdG8gc2VlIG90aGVycyBhdCBhIHRpbWUgd2hlbiBpdCB3YXMgcG9zc2libGUgdG8gYXZlcnQKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtaXNmb3J0dW5lcyB3aXRob3V0IHNhY3JpZmljaW5nIHNhZmV0eSwgbmV2ZXJ0aGVsZXNzLCB3aGVuIHRoZXkgZGlkCiAgICAgICAgICAgICAgICAgICAgaGVhcmtlbiBhbmQgZXZpbmNlZCB3aWxsaW5nbmVzcyB0byBkbyB0aGVpciBkdXR5LDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNi4xMCIgdmFsaWQ9InllcyI+SHlwLiAxMDwvYmlibD47IEJsYXNzIGNvbXBhcmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjIwIiB2YWxpZD0ieWVzIj5EZW0uIDE4LjIwPC9iaWJsPiwgd2hlcmUKICAgICAgICAgICAgICAgICAgICAgICAg4oCcZm9sbHnigJ0gaXMgdXNlZCBhcyBhIGV1cGhlbWlzbSBmb3IKICAgICAgICAgICAgICAgICAgICAgICAg4oCcc2xhY2tuZXNzLuKAnTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgYXR0aXR1ZGUgb2YgdGhlIEdyZWVrIHN0YXRlcyB0b3dhcmQgdGhlIGFnZ3Jlc3Npb25zIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBoaWxpcCBvZiBNYWNlZG9uIG1heSBiZSBjb21wYXJlZCB0byB0aGF0IG9mIHRoZSBzbWFsbCBkZW1vY3JhdGljIHN0YXRlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBFdXJvcGUgdG93YXJkIEdlcm1hbnkgYmVmb3JlIHRoZSB3YXIgb2YgPGRhdGVSYW5nZSBhdXRobmFtZT0iMTkzOS8xOTQ1IiBjbGFzcz0idHJhbnNsYXRpb24iIGZyb209IjE5MzkiIHRvPSIxOTQ1Ij4xOTM5PC9kYXRlUmFuZ2U+LTE5NDUuIEJ5IGhpcyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PbHludGhpYWNzPC90aXRsZT4g77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxIiB2YWxpZD0ieWVzIj5EZW0uIDEtMzwvYmlibD7vvIkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGlsbGlwcGljczwvdGl0bGU+77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0IiB2YWxpZD0ieWVzIj5EZW0uIDQ8L2JpYmw+LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA2IiB2YWxpZD0ieWVzIj5EZW0uIDY8L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkiIHZhbGlkPSJ5ZXMiPkRlbS4gOTwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTAiIHZhbGlkPSJ5ZXMiPkRlbS4gMTA8L2JpYmw+77yJIERlbW9zdGhlbmVzIHRyaWVkIHRvIGFyb3VzZSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdW5pdGUgdGhlbSBidXQgd2l0aCBsaXR0bGUgc3VjY2VzcywgdW50aWwgdGhlIHllYXIgPGRhdGUgYXV0aG5hbWU9Ii0zMzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zMzgiPjMzODwvZGF0ZT4gQi5DLiwgd2hlbiBoZSBhY2hpZXZlZCBoaXMgZ3JlYXQgZGlwbG9tYXRpYyB0cml1bXBoIGluCiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRpbmcgVGhlYmVzIHdpdGggQXRoZW5zLCBhbmNpZW50IHJpdmFscy48L25vdGU+IHRoZXNlIG1lbiBkaWQgbm90IGJlYXIgYQogICAgICAgICAgICAgICAgICAgIGdydWRnZSBidXQgc3RlcHBpbmcgZm9yd2FyZCBhbmQgZWFnZXJseSBvZmZlcmluZyB0aGVpciBhbGwsIGJvZGllcywgbW9uZXksIGFuZAogICAgICAgICAgICAgICAgICAgIGFsbGllcywgdGhleSBlbnRlcmVkIHVwb24gdGhlIG9yZGVhbCBvZiB0aGUgY29udGVzdCwgaW4gd2hpY2ggdGhleSB3ZXJlIG5vdAogICAgICAgICAgICAgICAgICAgIHNwYXJpbmcgZXZlbiBvZiB0aGVpciBsaXZlcy4gPGRhdGVSYW5nZSBhdXRobmFtZT0iMTkzOS8xOTQ1IiBjbGFzcz0idHJhbnNsYXRpb24iIGZyb209IjE5MzkiIHRvPSIxOTQ1Ij4xOTM5PC9kYXRlUmFuZ2U+LTE5NDUuIEJ5IGhpcyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PbHludGhpYWNzPC90aXRsZT4g77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxIiB2YWxpZD0ieWVzIj5EZW0uIDEtMzwvYmlibD7vvIkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGlsbGlwcGljczwvdGl0bGU+77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0IiB2YWxpZD0ieWVzIj5EZW0uIDQ8L2JpYmw+LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA2IiB2YWxpZD0ieWVzIj5EZW0uIDY8L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkiIHZhbGlkPSJ5ZXMiPkRlbS4gOTwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTAiIHZhbGlkPSJ5ZXMiPkRlbS4gMTA8L2JpYmw+77yJIERlbW9zdGhlbmVzIHRyaWVkIHRvIGFyb3VzZSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdW5pdGUgdGhlbSBidXQgd2l0aCBsaXR0bGUgc3VjY2VzcywgdW50aWwgdGhlIHllYXIgPGRhdGUgYXV0aG5hbWU9Ii0zMzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zMzgiPjMzODwvZGF0ZT4gQi5DLiwgd2hlbiBoZSBhY2hpZXZlZCBoaXMgZ3JlYXQgZGlwbG9tYXRpYyB0cml1bXBoIGluCiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRpbmcgVGhlYmVzIHdpdGggQXRoZW5zLCBhbmNpZW50IHJpdmFscy48L3RyYW5zbGF0aW9uPg=="
translation['60.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T2YgbmVjZXNzaXR5IGl0IGhhcHBlbnMsIHdoZW4gYSBiYXR0bGUgdGFrZXMgcGxhY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBwYXJ0aWN1bGFyIHJlZmVyZW5jZSBpcyB0byB0aGUgYmF0dGxlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIENoYWVyb25lYSwgPGRhdGUgYXV0aG5hbWU9Ii0zMzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zMzgiPjMzODwvZGF0ZT4gQi5DLiwgd2hlcmUgdGhlIEdyZWVrcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVhdGVkIGJ5IFBoaWxpcCBvZiBNYWNlZG9uLjwvbm90ZT4gdGhhdCB0aGUgb25lIHNpZGUgaXMgYmVhdGVuIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciB2aWN0b3Jpb3VzOyBidXQgSSBzaG91bGQgbm90IGhlc2l0YXRlIHRvIGFzc2VydCB0aGF0IGluIG15IGp1ZGdlbWVudCB0aGUKICAgICAgICAgICAgICAgICAgICBtZW4gd2hvIGRpZSBhdCB0aGUgcG9zdCBvZiBkdXR5IG9uIGVpdGhlciBzaWRlIGRvIG5vdCBzaGFyZSB0aGUgZGVmZWF0IGJ1dCBhcmUKICAgICAgICAgICAgICAgICAgICBib3RoIGFsaWtlIHZpY3RvcnMuIEZvciB0aGUgbWFzdGVyeSBhbW9uZyB0aGUgc3Vydml2b3JzIGlzIGRlY2lkZWQgYXMgdGhlIGRlaXR5CiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZXMsIGJ1dCB0aGF0IHdoaWNoIGVhY2ggd2FzIGluIGR1dHkgYm91bmQgdG8gY29udHJpYnV0ZSB0byB0aGlzIGVuZCwgZXZlcnkKICAgICAgICAgICAgICAgICAgICBtYW4gd2hvIGhhcyBrZXB0IGhpcyBwb3N0IGluIGJhdHRsZSBoYXMgZG9uZS4gQnV0IGlmLCBhcyBhIG1vcnRhbCBiZWluZywgaGUKICAgICAgICAgICAgICAgICAgICBtZWV0cyBoaXMgZG9vbSwgd2hhdCBoZSBoYXMgc3VmZmVyZWQgaXMgYW4gaW5jaWRlbnQgY2F1c2VkIGJ5IGNoYW5jZSwgYnV0IGluCiAgICAgICAgICAgICAgICAgICAgc3Bpcml0IGhlIHJlbWFpbnMgdW5jb25xdWVyZWQgYnkgaGlzIG9wcG9uZW50cy48ZGF0ZSBhdXRobmFtZT0iLTMzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTMzOCI+MzM4PC9kYXRlPiBCLkMuLCB3aGVyZSB0aGUgR3JlZWtzIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgZGVmZWF0ZWQgYnkgUGhpbGlwIG9mIE1hY2Vkb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJsYXNzIG5vdGVzIHRoaXMgc2VudGltZW50IGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjA4IiB2YWxpZD0ieWVzIj5EZW0uIDE4LjIwODwvYmlibD4sIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJJc29jLiA0LjkyIiB2YWxpZD0ieWVzIj5Jc29jLiA0LjkyPC9iaWJsPi4gSXQgaXMgc3Vic2lkaWFyeSB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcmVjb2duaXRpb24gb2YgdGhlIHN1cHJlbWFjeSBvZiB0aGUgZGVpdHksIGZhdGUgb3IgZm9ydHVuZSwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4xOTIiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMTkyPC9iaWJsPiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yMDciIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE4LjIwNzwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjA4IiB2YWxpZD0ieWVzIj5EZW0uIDE4LjIwODwvYmlibD4uIFRvIGNvbW1lbW9yYXRlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB2YWxvciBvZiB0aGUgZmFsbGVuIFRoZWJhbnMgYSBtb251bWVudGFsIHNlYXRlZCBsaW9uIHdhcyBlcmVjdGVkIGZhY2luZwogICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBlbmVteS4gSXQgaXMgc3RpbGwgZXh0YW50Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjIwOCIgdmFsaWQ9InllcyI+RGVtLiAxOC4yMDg8L2JpYmw+LCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gNC45MiIgdmFsaWQ9InllcyI+SXNvYy4gNC45MjwvYmlibD4uIEl0IGlzIHN1YnNpZGlhcnkgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29nbml0aW9uIG9mIHRoZSBzdXByZW1hY3kgb2YgdGhlIGRlaXR5LCBmYXRlIG9yIGZvcnR1bmUsIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTkyIiB2YWxpZD0ieWVzIj5EZW0uIDE4LjE5MjwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjA3IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOC4yMDc8L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjIwOCIgdmFsaWQ9InllcyI+RGVtLiAxOC4yMDg8L2JpYmw+LiBUbyBjb21tZW1vcmF0ZQogICAgICAgICAgICAgICAgICAgICAgICB0aGUgdmFsb3Igb2YgdGhlIGZhbGxlbiBUaGViYW5zIGEgbW9udW1lbnRhbCBzZWF0ZWQgbGlvbiB3YXMgZXJlY3RlZCBmYWNpbmcKICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgZW5lbXkuIEl0IGlzIHN0aWxsIGV4dGFudC48L3RyYW5zbGF0aW9uPg=="
translation['60.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBteSBqdWRnZW1lbnQsIHRoZXJlZm9yZSwgdGhhdCB3ZSBoYXZlIHRvCiAgICAgICAgICAgICAgICAgICAgdGhhbmsgdGhlIHZhbG9yIG9mIHRoZXNlIG1lbiwgYWxvbmcgd2l0aCB0aGUgZm9sbHkgb2Ygb3VyIG9wcG9uZW50cywgdGhhdCBvdXIKICAgICAgICAgICAgICAgICAgICBlbmVtaWVzIGRpZCBub3Qgc2V0IGZvb3QgdXBvbiBvdXIgbGFuZDsgYmVjYXVzZSwgZXZlcnkgbWFuIG9mIHRoZW0gaGF2aW5nIGhhZAogICAgICAgICAgICAgICAgICAgIHByb29mIG9mIHRoZWlyIG1ldHRsZSwgdGhvc2Ugd2hvIHRoZXJlIGVuZ2FnZWQgdGhlbSBvbiB0aGF0IG9jY2FzaW9uIGhhZCBubyB3aXNoCiAgICAgICAgICAgICAgICAgICAgdG8gY29uZnJvbnQgaW4gYmF0dGxlIGEgc2Vjb25kIHRpbWUgdGhlIGtpbnNtZW4gb2YgdGhvc2UgbWVuLCBzdXNwZWN0aW5nIHRoYXQsCiAgICAgICAgICAgICAgICAgICAgYWx0aG91Z2ggdGhleSB3b3VsZCBjb25mcm9udCBtZW4gb2YgdGhlIHNhbWUgYnJlZWQsIHRoZXkgd2VyZSBub3QgbGlrZWx5IHRvIGZpbmQKICAgICAgICAgICAgICAgICAgICB0aGUgZm9ydHVuZSBvZiBiYXR0bGUgc28ga2luZC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm90IHRoZSBsZWFzdAogICAgICAgICAgICAgICAgICAgIHJlYXNvbiBmb3IgYmVsaWV2aW5nIHRoYXQgdGhpcyB3YXMgdGhlaXIgc3RhdGUgb2YgbWluZCBpcyBhZmZvcmRlZCBieSB0aGUgcGVhY2UKICAgICAgICAgICAgICAgICAgICB0aGF0IHdhcyBtYWRlOyBmb3IgaXQgaXMgaW1wb3NzaWJsZSB0byBjaXRlIGEgbW9yZSBwbGF1c2libGUgb3IgbW9yZSBjcmVkaXRhYmxlCiAgICAgICAgICAgICAgICAgICAgcmVhc29uIHRoYW4gdGhhdCB0aGUgbWFzdGVyIG9mIG91ciBvcHBvbmVudHMsIGFzdG91bmRlZCBhdCB0aGUgdmFsb3Igb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICB3aG8gZGllZCwgY2hvc2UgcmF0aGVyIHRvIGJlIGZyaWVuZGx5IHRvd2FyZCB0aGVpciBraW5zbWVuIHRoYW4gb25jZSBtb3JlIHRvCiAgICAgICAgICAgICAgICAgICAgYXNzdW1lIHRoZSByaXNrIG9mIGFsbCBoaXMgZm9ydHVuZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBoaWxpcAogICAgICAgICAgICAgICAgICAgICAgICBleGFjdGVkIG5vIHZlbmdlYW5jZSBhZnRlciBoaXMgdmljdG9yeTsgQXR0aWNhIHdhcyBub3QgaW52YWRlZC4gVGhlIEdyZWVrCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlcyByZXRhaW5lZCB0aGUgcmlnaHQgb2Ygc2VsZi1nb3Zlcm5tZW50IGFuZCBiZWNhbWUgYWxsaWVzLCBub3QKICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdHMsIG9mIHRoZSB2aWN0b3IuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['60.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5JIGJlbGlldmUgYWxzbyB0aGF0IGlmIHNvbWVvbmUgd2VyZSB0byBhc2sKICAgICAgICAgICAgICAgICAgICB0aG9zZSBpbiB0aGUgb3Bwb3NpdGUgcmFua3Mgd2hldGhlciB0aGV5IHRob3VnaHQgdGhleSBoYWQgd29uIGJ5IHRoZWlyIG93biBkZWVkcwogICAgICAgICAgICAgICAgICAgIG9mIHZhbG9yIG9yIGJ5IGEgc3RhcnRsaW5nIGFuZCBjcnVlbCB0dXJuIG9mIGZvcnR1bmUgYW5kIGJ5IHRoZSBza2lsbCBhbmQgZGFyaW5nCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlaXIgb3duIGNvbW1hbmRlciwgbm90IG9uZSBvZiB0aGVtIHdvdWxkIGJlIHNvIHNoYW1lbGVzcyBvciBhdWRhY2lvdXMgYXMgdG8KICAgICAgICAgICAgICAgICAgICBjbGFpbSBjcmVkaXQgZm9yIHdoYXQgaGFwcGVuZWQuIEZ1cnRoZXJtb3JlLCBpbiBjb250ZXN0cyBvZiB3aGljaCB0aGUgZGVpdHksIHRoZQogICAgICAgICAgICAgICAgICAgIG1hc3RlciBvZiBhbGwsIGhhcyBkaXNwb3NlZCB0aGUgb3V0Y29tZSBhcyBpdCBjaG9zZSwgaXQgaXMgbmVjZXNzYXJ5IG9mIGNvdXJzZQogICAgICAgICAgICAgICAgICAgIHRvIGFjcXVpdCBhbGwgb3RoZXJzLCBiZWluZyBidXQgaHVtYW4sIG9mIHRoZSBjaGFyZ2Ugb2YgY293YXJkaWNlLCBidXQgd2hlbiBpdAogICAgICAgICAgICAgICAgICAgIGNvbWVzIHRvIHRoZSBtZWFucyBieSB3aGljaCB0aGUgbGVhZGVyIG9mIG91ciBvcHBvbmVudHMgcHJldmFpbGVkIG92ZXIgdGhvc2UKICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQgdG8gdGhlIGNvbW1hbmQgb2Ygb3VyIGFybXksIG5vIG9uZSBjb3VsZCBqdXN0bHkgbG9jYXRlIHRoZSBjYXVzZSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSByYW5rIGFuZCBmaWxlIG9mIGVpdGhlciB0aGUgZW5lbXkgb3Igb3Vyc2VsdmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['60.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYsIGFmdGVyIGFsbCwgdGhlcmUgaXMgYW55IGh1bWFuIGJlaW5nIHdobyBtaWdodAogICAgICAgICAgICAgICAgICAgIHJpZ2h0bHkgbGF5IGEgY2hhcmdlIGNvbmNlcm5pbmcgdGhlIGlzc3VlIG9mIHRoYXQgYmF0dGxlLCBoZSB3b3VsZCB3aXRoIGdvb2QKICAgICAgICAgICAgICAgICAgICByZWFzb24gYWR2YW5jZSBpdCBhZ2FpbnN0IHRob3NlIG9mIHRoZSBUaGViYW5zIHdobyB3ZXJlIGFwcG9pbnRlZCB0byB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBoaWxpcCBzZWVtcyB0byBoYXZlIGRlY2VpdmVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMgYnkgYSBmZWlnbmVkIHJldHJlYXQgd2hpbGUgdGhyb3dpbmcgaGlzIHN0cm9uZ2VzdCB0cm9vcHMgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgVGhlYmFucy4gVGhpcyBzdHJhdGFnZW0gYnJva2UgdGhlIGxpbmUgYW5kIGRlY2lkZWQgdGhlIGJhdHRsZS4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZWJhbiBnZW5lcmFsIFRoZWFnZW5lcyBhbmQgaGlzIGNvbGxlYWd1ZXMgc2VlbSB0byBoYXZlIGJlZW4gbm8gbW9yZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBibGFtZSB0aGFuIHRoZSByZXN0Ljwvbm90ZT4gbm9yIGNvdWxkIGFueW9uZSByaWdodGx5IGxheSBibGFtZSB1cG9uIHRoZSByYW5rCiAgICAgICAgICAgICAgICAgICAgYW5kIGZpbGUgb2YgZWl0aGVyIHRoZSBUaGViYW5zIG9yIG91cnNlbHZlcy4gVGhvc2UgbWVuLCByZWNlaXZpbmcgY29tbWFuZCBvZiBhCiAgICAgICAgICAgICAgICAgICAgbWlsaXRhcnkgZm9yY2UgdGhhdCB3b3VsZCBuZWl0aGVyIGJyb29rIGRlZmVhdCBub3IgbWFrZSBleGN1c2UgYW5kIGhhZCBhbgogICAgICAgICAgICAgICAgICAgIGVtdWxvdXMgemVzdCBmb3IgZ2xvcnksIG1hZGUgdGhlIHJpZ2h0IHVzZSBvZiBub25lIG9mIHRoZXNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['60.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgdGhlIG90aGVyIHF1ZXN0aW9ucyB0b3VjaGluZyB0aGlzIGNhbXBhaWduLCBlYWNoCiAgICAgICAgICAgICAgICAgICAgaW5kaXZpZHVhbCBpcyBhdCBsaWJlcnR5IHRvIGRyYXcgY29uY2x1c2lvbnMgYWNjb3JkaW5nIHRvIGhpcyBqdWRnZW1lbnQsIGJ1dAogICAgICAgICAgICAgICAgICAgIHdoYXQgaGFzIGJlY29tZSBtYW5pZmVzdCB0byBhbGwgbGl2aW5nIG1lbiBhbGlrZSBpcyB0aGlz4oCUdGhhdCwgaW4KICAgICAgICAgICAgICAgICAgICBlZmZlY3QsIHRoZSBmcmVlZG9tIG9mIHRoZSB3aG9sZSBHcmVlayB3b3JsZCB3YXMgYmVpbmcgcHJlc2VydmVkIGluIHRoZSBzb3VscyBvZgogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbi4gQXQgYW55IHJhdGUsIHNpbmNlIGZhdGUgcmVtb3ZlZCB0aGVtLCBub3Qgb25lIG9mIHRob3NlIHJlbWFpbmluZyBoYXMKICAgICAgICAgICAgICAgICAgICBtYWRlIGEgc3RhbmQgYWdhaW5zdCB0aGUgZm9lLiBXaGlsZSBJIGRlc2lyZSB0aGF0IG15IHdvcmRzIG1heSBiZSBmcmVlIGZyb20KICAgICAgICAgICAgICAgICAgICBvZmZlbmNlLCBpdCBzZWVtcyB0byBtZSB0aGF0IGlmIG9uZSBzaG91bGQgZGVjbGFyZSB0aGF0IHRoZSB2YWxvciBvZiB0aGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICB3YXMgdGhlIHZlcnkgbGlmZSBvZiBHcmVlY2UgaGUgd291bGQgc3BlYWsgdGhlIHRydXRoOyA8L3RyYW5zbGF0aW9uPg=="
translation['60.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgYXQgb25lIGFuZCB0aGUgc2FtZSB0aW1lIHRoZWlyIHNwaXJpdHMgd2VyZSBzZXBhcmF0ZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZWlyIGRlYXIgYm9kaWVzIGFuZCB0aGUgc2VsZi1lc3RlZW0gb2YgR3JlZWNlIHdhcyB0YWtlbiBmcm9tIGhlci4gV2UKICAgICAgICAgICAgICAgICAgICBzaGFsbCB0aGVyZWZvcmUgc2VlbSBndWlsdHkgcGVyaGFwcyBvZiBhIGJvbGQgZXhhZ2dlcmF0aW9uLCBidXQgc3RpbGwgaXQgbXVzdCBiZQogICAgICAgICAgICAgICAgICAgIHV0dGVyZWQ6IGZvciBqdXN0IGFzLCBpZiB0aGUgbGlnaHQgb2YgZGF5IHdlcmUgcmVtb3ZlZCBvdXQgb2YgdGhpcyB1bml2ZXJzZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBvdXJzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5LZW5uZWR5IHF1b3RlcyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEFtaWMuIDEzLjQ3ICIgdmFsaWQ9InllcyI+Q2ljZXJvIERlIEFtaWMuIDEzLjQ3PC9iaWJsPiDigJxzb2xlbSBlbmltCiAgICAgICAgICAgICAgICAgICAgICAgIGUgbXVuZG8gdG9sbGVyZSB2aWRlbnR1ciBxdWkgYW1pY2l0aWFtIGUgdml0YSB0b2xsdW50LuKAnSBBY2NvcmRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gUmguIDEuNyIgdmFsaWQ9InllcyI+QXJpc3RvdC4gUmguIDEuNzwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIFJoLiAzLjEwIiB2YWxpZD0ieWVzIj5BcmlzdG90LiAzLjEwPC9iaWJsPiwgUGVyaWNsZXMgaGFkIG9uY2Ugc2FpZCBpbiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmVyYWwgc3BlZWNoIGl0IHdhcyDigJxhcyBpZiB0aGUgc3ByaW5nIGhhZCBiZWVuIHRha2VuIG91dCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgeWVhci7igJ08L25vdGU+IGFsbCB0aGUgcmVtbmFudCBvZiBsaWZlIHdvdWxkIGJlIGhhcnNoIGFuZCBpcmtzb21lLAogICAgICAgICAgICAgICAgICAgIHNvLCBub3cgdGhhdCB0aGVzZSBtZW4gaGF2ZSBiZWVuIHRha2VuIGZyb20gdXMsIGFsbCB0aGUgb2xkLXRpbWUgYW1iaXRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgR3JlZWtzIGlzIHN1bmsgaW4gZ2xvb20gYW5kIHByb2ZvdW5kIG9ic2N1cml0eS4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBbWljLiAxMy40NyAiIHZhbGlkPSJ5ZXMiPkNpY2VybyBEZSBBbWljLiAxMy40NzwvYmlibD4g4oCcc29sZW0gZW5pbQogICAgICAgICAgICAgICAgICAgICAgICBlIG11bmRvIHRvbGxlcmUgdmlkZW50dXIgcXVpIGFtaWNpdGlhbSBlIHZpdGEgdG9sbHVudC7igJ0gQWNjb3JkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIFJoLiAxLjciIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIFJoLiAxLjc8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBSaC4gMy4xMCIgdmFsaWQ9InllcyI+QXJpc3RvdC4gMy4xMDwvYmlibD4sIFBlcmljbGVzIGhhZCBvbmNlIHNhaWQgaW4gYQogICAgICAgICAgICAgICAgICAgICAgICBmdW5lcmFsIHNwZWVjaCBpdCB3YXMg4oCcYXMgaWYgdGhlIHNwcmluZyBoYWQgYmVlbiB0YWtlbiBvdXQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIu4oCdPC90cmFuc2xhdGlvbj4="
translation['60.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hpbGUgaXQgc3RhbmRzIHRvIHJlYXNvbiB0aGF0IG1hbnkKICAgICAgICAgICAgICAgICAgICBpbmZsdWVuY2VzIGhlbHBlZCB0byBtYWtlIHRoZW0gd2hhdCB0aGV5IHdlcmUsIG5vdCBsZWFzdCB3YXMgdGhlaXIgdmlydHVlCiAgICAgICAgICAgICAgICAgICAgYXNjcmliYWJsZSB0byBvdXIgZm9ybSBvZiBnb3Zlcm5tZW50Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHRvcGljCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIHRyZWF0ZWQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTWVuZXguIDIzOGIiIHZhbGlkPSJ5ZXMiPlBsYXQuIE1lbmV4LiAyMzhiLTIzOWQ8L2JpYmw+LgogICAgICAgICAgICAgICAgICAgICAgICBCbGFzcyBjb21wYXJlcyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIwLjEwOCIgdmFsaWQ9InllcyI+RGVtLiAyMC4xMDg8L2JpYmw+LCBidXQgdGhlIHNpbWlsYXJpdHkKICAgICAgICAgICAgICAgICAgICAgICAgaXMgbm90IGltcHJlc3NpdmUuPC9ub3RlPiBGb3IgdGhvdWdoIGFic29sdXRlIGdvdmVybm1lbnRzIGRvbWluYXRlZCBieSBhIGZldwogICAgICAgICAgICAgICAgICAgIGNyZWF0ZSBmZWFyIGluIHRoZWlyIGNpdGl6ZW5zLCB0aGV5IGZhaWwgdG8gYXdha2VuIHRoZSBzZW5zZSBvZiBzaGFtZS4KICAgICAgICAgICAgICAgICAgICBDb25zZXF1ZW50bHksIHdoZW4gdGhlIHRlc3Qgb2Ygd2FyIGNvbWVzLCBldmVyeW9uZSBsaWdodGhlYXJ0ZWRseSBwcm9jZWVkcyB0bwogICAgICAgICAgICAgICAgICAgIHNhdmUgaGltc2VsZiwga25vd2luZyBmdWxsIHdlbGwgdGhhdCBpZiBvbmx5IGhlIHN1Y2NlZWRzIGluIGFwcGVhc2luZyBoaXMKICAgICAgICAgICAgICAgICAgICBtYXN0ZXJzIGJ5IHByZXNlbnRzIG9yIGFueSBvdGhlciBjaXZpbGl0eSB3aGF0c29ldmVyLCBldmVuIHRob3VnaCBoZSBiZWNvbWVzCiAgICAgICAgICAgICAgICAgICAgZ3VpbHR5IG9mIHRoZSBtb3N0IHJldm9sdGluZyBjb25kdWN0LCBvbmx5IHNsaWdodCByZXByb2FjaCB3aWxsIGF0dGFjaCB0byBoaW0KICAgICAgICAgICAgICAgICAgICB0aGVyZWFmdGVyLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBNZW5leC4gMjM4YiIgdmFsaWQ9InllcyI+UGxhdC4gTWVuZXguIDIzOGItMjM5ZDwvYmlibD4uCiAgICAgICAgICAgICAgICAgICAgICAgIEJsYXNzIGNvbXBhcmVzIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuMTA4IiB2YWxpZD0ieWVzIj5EZW0uIDIwLjEwODwvYmlibD4sIGJ1dCB0aGUgc2ltaWxhcml0eQogICAgICAgICAgICAgICAgICAgICAgICBpcyBub3QgaW1wcmVzc2l2ZS48L3RyYW5zbGF0aW9uPg=="
translation['60.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5EZW1vY3JhY2llcywgaG93ZXZlciwgcG9zc2VzcyBtYW55CiAgICAgICAgICAgICAgICAgICAgb3RoZXIganVzdCBhbmQgbm9ibGUgZmVhdHVyZXMsIHRvIHdoaWNoIHJpZ2h0LW1pbmRlZCBtZW4gc2hvdWxkIGhvbGQgZmFzdCwgYW5kCiAgICAgICAgICAgICAgICAgICAgaW4gcGFydGljdWxhciBpdCBpcyBpbXBvc3NpYmxlIHRvIGRldGVyIGZyZWVkb20gb2Ygc3BlZWNoLCB3aGljaCBkZXBlbmRzIHVwb24KICAgICAgICAgICAgICAgICAgICBzcGVha2luZyB0aGUgdHJ1dGgsIGZyb20gZXhwb3NpbmcgdGhlIHRydXRoLiBGb3IgbmVpdGhlciBpcyBpdCBwb3NzaWJsZSBmb3IKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gY29tbWl0IGEgc2hhbWVmdWwgYWN0IHRvIGFwcGVhc2UgYWxsIHRoZSBjaXRpemVucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VW5kZXIgYW4gb2xpZ2FyY2h5LCB0aGUgc3BlYWtlciBtZWFucywgaXQgaXMgcG9zc2libGUgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB3cm9uZ2RvZXIgdG8gc2VhbCB0aGUgbW91dGhzIG9mIHRoZSBzbWFsbCBydWxpbmcgY2xpcXVlIGJ5IG1lYW5zIG9mIGJyaWJlcywKICAgICAgICAgICAgICAgICAgICAgICAgYnV0IHVuZGVyIGEgZGVtb2NyYWN5IGl0IGlzIGltcG9zc2libGUgdG8gYnV5IHRoZSBzaWxlbmNlIG9mIHRob3VzYW5kcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBjaXRpemVucy4gVGhlIHJlZmVyZW5jZSBpcyB0byBvbGlnYXJjaGljIGdvdmVybm1lbnRzIHNldCB1cCBieSB0aGUgU3BhcnRhbnMKICAgICAgICAgICAgICAgICAgICAgICAgaW4gc3ViamVjdCBzdGF0ZXMuIFBlcmljbGVzIHByYWlzZWQgdGhlIEF0aGVuaWFuIGZvcm0gb2YgZ292ZXJubWVudCBhcwogICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHRoZSBTcGFydGFuLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAyLjM3IiB2YWxpZD0ieWVzIj5UaHVjLiAyLjM3LTM5PC9iaWJsPi48L25vdGU+IHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCBldmVuIHRoZSBsb25lIGluZGl2aWR1YWwsIHV0dGVyaW5nIHRoZSBkZXNlcnZlZCByZXByb2FjaCwgbWFrZXMgdGhlIGd1aWx0eQogICAgICAgICAgICAgICAgICAgIHdpbmNlOiBmb3IgZXZlbiB0aG9zZSB3aG8gd291bGQgbmV2ZXIgc3BlYWsgYW4gYWNjdXNpbmcgd29yZCB0aGVtc2VsdmVzIGFyZQogICAgICAgICAgICAgICAgICAgIHBsZWFzZWQgYXQgaGVhcmluZyB0aGUgc2FtZSwgcHJvdmlkZWQgYW5vdGhlciB1dHRlcnMgaXQuIFRocm91Z2ggZmVhciBvZiBzdWNoCiAgICAgICAgICAgICAgICAgICAgY29uZGVtbmF0aW9uLCBhbGwgdGhlc2UgbWVuLCBhcyB3YXMgdG8gYmUgZXhwZWN0ZWQsIGZvciBzaGFtZSBhdCB0aGUgdGhvdWdodCBvZgogICAgICAgICAgICAgICAgICAgIHN1YnNlcXVlbnQgcmVwcm9hY2hlcyw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAyLjM3IiB2YWxpZD0ieWVzIj5UaHVjLiAyLjM3LTM5PC9iaWJsPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGZlYXIgb2YgZXhwb3N1cmUgYXMgYQogICAgICAgICAgICAgICAgICAgICAgICBmYWN0b3IgaW4gZGVtb2NyYXRpYyBnb3Zlcm5tZW50IGlzIG1lbnRpb25lZCBieSBQZXJpY2xlcywgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMi4zNy4zIiB2YWxpZD0ieWVzIj5UaHVjLiAyLjM3LjM8L2JpYmw+LCBhbmQgYnkgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSHlwLiA2LjI1IiB2YWxpZD0ieWVzIj5IeXAuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNTwvYmlibD4uIEJsYXNzIGNvbXBhcmVzIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjIuMzEiIHZhbGlkPSJ5ZXMiPkRlbS4gMjIuMzE8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBtYW5mdWxseSBmYWNlZCB0aGUgdGhyZWF0IGFyaXNpbmcgZnJvbSBvdXIgZm9lcyBhbmQgY2hvc2UgYSBub2JsZSBkZWF0aCBpbgogICAgICAgICAgICAgICAgICAgIHByZWZlcmVuY2UgdG8gbGlmZSBhbmQgZGlzZ3JhY2UuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDIuMzcuMyIgdmFsaWQ9InllcyI+VGh1Yy4gMi4zNy4zPC9iaWJsPiwgYW5kIGJ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNi4yNSIgdmFsaWQ9InllcyI+SHlwLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjU8L2JpYmw+LiBCbGFzcyBjb21wYXJlcyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIyLjMxIiB2YWxpZD0ieWVzIj5EZW0uIDIyLjMxPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['60.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGNvbnNpZGVyYXRpb25zIHRoYXQgYWN0dWF0ZWQgdGhlc2UgbWVuIG9uZSBhbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgdG8gY2hvb3NlIHRvIGRpZSBub2JseSBoYXZlIG5vdyBiZWVuIGVudW1lcmF0ZWQs4oCUYmlydGgsIGVkdWNhdGlvbiwKICAgICAgICAgICAgICAgICAgICBoYWJpdHVhdGlvbiB0byBoaWdoIHN0YW5kYXJkcyBvZiBjb25kdWN0LCBhbmQgdGhlIHVuZGVybHlpbmcgcHJpbmNpcGxlcyBvZiBvdXIKICAgICAgICAgICAgICAgICAgICBmb3JtIG9mIGdvdmVybm1lbnQgaW4gZ2VuZXJhbC4gVGhlIGluY2VudGl2ZXMgdGhhdCBjaGFsbGVuZ2VkIHRoZW0gc2V2ZXJhbGx5IHRvCiAgICAgICAgICAgICAgICAgICAgYmUgdmFsaWFudCBtZW4sIGRlcGVuZGluZyB1cG9uIHRoZSB0cmliZXMgdG8gd2hpY2ggdGhleSBiZWxvbmdlZCwgSSBzaGFsbCBuZXh0CiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGxpc3Qgd2hpY2ggaGVyZSBiZWdpbnMgaXMgb3VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWVmIGF1dGhvcml0eSBmb3IgdGhlIG5hbWVzIGFuZCBvcmRlciBvZiBwcmVjZWRlbmNlIG9mIHRoZSB0ZW4gQXRoZW5pYW4KICAgICAgICAgICAgICAgICAgICAgICAgdHJpYmVzIGFzIGVzdGFibGlzaGVkIGJ5IENsZWlzdGhlbmVzIGluIDxkYXRlIGF1dGhuYW1lPSItNTA4IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNTA4Ij41MDg8L2RhdGU+IEIuQy4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHBhcnRpY3VsYXIgbXl0aHMgdGhhdCBzdWl0IHRoZSBjb250ZXh0LCBob3dldmVyLCBhcmUgZm9yIHRoZSBtb3N0IHBhcnQKICAgICAgICAgICAgICAgICAgICAgICAgb2JzY3VyZSBhbmQgb2YgcmVsYXRpdmVseSByZWNlbnQgb3JpZ2luLiBGb3IgZXhhbXBsZSwgdGhlIG9sZGVyIGxlZ2VuZHMKICAgICAgICAgICAgICAgICAgICAgICAgc3BlYWsgb2YgYnV0IG9uZSBkYXVnaHRlciBvZiBFcmVjaHRoZXVzIGFzIGJlaW5nIHNhY3JpZmljZWQuIFRoZSBsYXRlcgogICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uIGlzIGtub3duIHRvIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gVHVzYy4gMS40OC4xMTYiIHZhbGlkPSJ5ZXMiPkNpY2VybyBUdXNjLiBEaXNwLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS40OC4xMTY8L2JpYmw+Ljwvbm90ZT4gQWxsIHRoZSBFcmVjaHRoZWlkYWUgd2VyZSB3ZWxsIGF3YXJlIHRoYXQKICAgICAgICAgICAgICAgICAgICBFcmVjaHRoZXVzLCBmcm9tIHdob20gdGhleSBoYXZlIHRoZWlyIG5hbWUsIGZvciB0aGUgc2FsdmF0aW9uIG9mIHRoaXMgbGFuZCBnYXZlCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBkYXVnaHRlcnMsIHdob20gdGhleSBjYWxsIEh5YWNpbnRoaWRlcywgdG8gY2VydGFpbiBkZWF0aCwgYW5kIHNvCiAgICAgICAgICAgICAgICAgICAgZXh0aW5ndWlzaGVkIGhpcyByYWNlLiBUaGVyZWZvcmUgdGhleSByZWdhcmRlZCBpdCBhcyBzaGFtZWZ1bCwgYWZ0ZXIgYSBiZWluZwogICAgICAgICAgICAgICAgICAgIGJvcm4gb2YgaW1tb3J0YWwgZ29kcyBoYWQgc2FjcmlmaWNlZCBldmVyeXRoaW5nIGZvciB0aGUgbGliZXJhdGlvbiBvZiBoaXMgbmF0aXZlCiAgICAgICAgICAgICAgICAgICAgbGFuZCwgdGhhdCB0aGV5IHRoZW1zZWx2ZXMgc2hvdWxkIGhhdmUgYmVlbiBmb3VuZCB0byBoYXZlIHBsYWNlZCBhIGhpZ2hlciB2YWx1ZQogICAgICAgICAgICAgICAgICAgIHVwb24gYSBtb3J0YWwgYm9keSB0aGFuIHVwb24gaW1tb3J0YWwgZ2xvcnkuPGRhdGUgYXV0aG5hbWU9Ii01MDgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii01MDgiPjUwODwvZGF0ZT4gQi5DLgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgcGFydGljdWxhciBteXRocyB0aGF0IHN1aXQgdGhlIGNvbnRleHQsIGhvd2V2ZXIsIGFyZSBmb3IgdGhlIG1vc3QgcGFydAogICAgICAgICAgICAgICAgICAgICAgICBvYnNjdXJlIGFuZCBvZiByZWxhdGl2ZWx5IHJlY2VudCBvcmlnaW4uIEZvciBleGFtcGxlLCB0aGUgb2xkZXIgbGVnZW5kcwogICAgICAgICAgICAgICAgICAgICAgICBzcGVhayBvZiBidXQgb25lIGRhdWdodGVyIG9mIEVyZWNodGhldXMgYXMgYmVpbmcgc2FjcmlmaWNlZC4gVGhlIGxhdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gaXMga25vd24gdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBUdXNjLiAxLjQ4LjExNiIgdmFsaWQ9InllcyI+Q2ljZXJvIFR1c2MuIERpc3AuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjQ4LjExNjwvYmlibD4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNi4yNCIgdmFsaWQ9InllcyI+SHlwLiAyNDwvYmlibD4gcmVhZHMgaW4gcGFydCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OuM69zrfPhM6/4b+mIM+D4b29zrzOsc+Ezr/PgiDhvIDOuOG9sc69zrHPhM6/zr0gzrThvbnOvs6xzr0g4byQzrrPhOG9tc+DzrHOvc+Ezr88L2ZvcmVpZ24+LAogICAgICAgICAgICAgICAgICAgICAgICDigJxnYWluZWQgaW1tb3J0YWwgZ2xvcnkgYXQgdGhlIHByaWNlIG9mIGEgbW9ydGFsCiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHku4oCdPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNi4yNCIgdmFsaWQ9InllcyI+SHlwLiAyNDwvYmlibD4gcmVhZHMgaW4gcGFydCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OuM69zrfPhM6/4b+mIM+D4b29zrzOsc+Ezr/PgiDhvIDOuOG9sc69zrHPhM6/zr0gzrThvbnOvs6xzr0g4byQzrrPhOG9tc+DzrHOvc+Ezr88L2ZvcmVpZ24+LAogICAgICAgICAgICAgICAgICAgICAgICDigJxnYWluZWQgaW1tb3J0YWwgZ2xvcnkgYXQgdGhlIHByaWNlIG9mIGEgbW9ydGFsCiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHku4oCdPC90cmFuc2xhdGlvbj4="
translation['60.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5OZWl0aGVyIHdlcmUgdGhlIEFlZ2VpZGFlIGlnbm9yYW50IHRoYXQKICAgICAgICAgICAgICAgICAgICBUaGVzZXVzLCB0aGUgc29uIG9mIEFlZ2V1cywgZm9yIHRoZSBmaXJzdCB0aW1lIGVzdGFibGlzaGVkIGVxdWFsaXR5IGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBTdGF0ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWNjb3JkaW5nIHRvIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZXMuIDI1IiB2YWxpZD0ieWVzIj5QbHV0LiBUaGVzLiAyNTwvYmlibD4sIGl0IHdhcyBlcXVhbGl0eSBiZXR3ZWVuIG5ld2NvbWVycyBhbmQgbmF0aXZlcwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IFRoZXNldXMgZXN0YWJsaXNoZWQ7IHRoZSB3b3JkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8sM+Dzr/Ovc6/zrzhvbfOsTwvZm9yZWlnbj4gdXN1YWxseSBtZWFucyBlcXVhbGl0eSBiZWZvcmUgdGhlIGxhdyBhbmQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgYWxtb3N0IGEgc3lub255bSBmb3IgZGVtb2NyYWN5Ljwvbm90ZT4gVGhleSB0aG91Z2h0IGl0LCB0aGVyZWZvcmUsIGEKICAgICAgICAgICAgICAgICAgICBkcmVhZGZ1bCB0aGluZyB0byBiZSBmYWxzZSB0byB0aGUgcHJpbmNpcGxlcyBvZiB0aGF0IGFuY2VzdG9yLCBhbmQgdGhleQogICAgICAgICAgICAgICAgICAgIHByZWZlcnJlZCB0byBiZSBkZWFkIHJhdGhlciB0aGFuIHRocm91Z2ggbG92ZSBvZiBsaWZlIHRvIHN1cnZpdmUgYW1vbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgR3JlZWtzIHdpdGggdGhpcyBlcXVhbGl0eSBsb3N0LiBUaGUgUGFuZGlvbmlkYWUgaGFkIGluaGVyaXRlZCB0aGUgdHJhZGl0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgUHJvY25lIGFuZCBQaGlsb21lbGEsIHRoZSBkYXVnaHRlcnMgb2YgUGFuZGlvbiwgd2hvIHRvb2sgdmVuZ2VhbmNlIG9uIFRlcmV1cyBmb3IKICAgICAgICAgICAgICAgICAgICBoaXMgY3JpbWUgYWdhaW5zdCB0aGVtc2VsdmVzLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZXMuIDI1IiB2YWxpZD0ieWVzIj5QbHV0LiBUaGVzLiAyNTwvYmlibD4sIGl0IHdhcyBlcXVhbGl0eSBiZXR3ZWVuIG5ld2NvbWVycyBhbmQgbmF0aXZlcwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IFRoZXNldXMgZXN0YWJsaXNoZWQ7IHRoZSB3b3JkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8sM+Dzr/Ovc6/zrzhvbfOsTwvZm9yZWlnbj4gdXN1YWxseSBtZWFucyBlcXVhbGl0eSBiZWZvcmUgdGhlIGxhdyBhbmQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgYWxtb3N0IGEgc3lub255bSBmb3IgZGVtb2NyYWN5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Qcm9jbmUgaXMgc2FpZCB0bwogICAgICAgICAgICAgICAgICAgICAgICBoYXZlIG11cmRlcmVkIGhlciBvd24gc29uIEl0eXMgYW5kIHRvIGhhdmUgc2VydmVkIGhpcyBmbGVzaCB0byBoZXIgaHVzYmFuZAogICAgICAgICAgICAgICAgICAgICAgICBUZXJldXMgaW4gcmV2ZW5nZSBmb3IgaGlzIHRyZWFjaGVyeSB0byBoZXJzZWxmIGFuZCBoaXMgY3J1ZWx0eSB0byBQaGlsb21lbGEuCiAgICAgICAgICAgICAgICAgICAgICAgIEl0IGlzIGN1cmlvdXMgdGhhdCB0aGUgc3BlYWtlciBzZWVtcyBsZXNzIHNob2NrZWQgYnkgdGhpcyBjcmltZSB0aGFuIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBpbm5vY2VudCB0YWxlIG9mIEFsb3BlLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYwLjMxIiB2YWxpZD0ieWVzIj5EZW0uIDYwLjMxPC9iaWJsPiwKICAgICAgICAgICAgICAgICAgICAgICAgYmVsb3cuPC9ub3RlPiBUaGVyZWZvcmUgdGhleSBkZWNpZGVkIHRoYXQgbGlmZSB3YXMgbm90IHdvcnRoIGxpdmluZyB1bmxlc3MKICAgICAgICAgICAgICAgICAgICB0aGV5LCBha2luIGJ5IHJhY2UsIHNob3VsZCBoYXZlIHByb3ZlZCB0aGVtc2VsdmVzIHRvIHBvc3Nlc3MgZXF1YWwgc3Bpcml0IHdpdGgKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3b21lbiwgd2hlbiBjb25mcm9udGVkIGJ5IHRoZSBvdXRyYWdlIHRoZXkgc2F3IGJlaW5nIGNvbW1pdHRlZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgR3JlZWNlLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYwLjMxIiB2YWxpZD0ieWVzIj5EZW0uIDYwLjMxPC9iaWJsPiwKICAgICAgICAgICAgICAgICAgICAgICAgYmVsb3cuPC90cmFuc2xhdGlvbj4="
translation['60.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlCiAgICAgICAgICAgICAgICAgICAgTGVvbnRpZGFlIGhhZCBoZWFyZCB0aGUgc3RvcmllcyByZWxhdGVkIG9mIHRoZSBkYXVnaHRlcnMgb2YgTGVvLCBob3cgdGhleQogICAgICAgICAgICAgICAgICAgIG9mZmVyZWQgdGhlbXNlbHZlcyB0byB0aGUgY2l0aXplbnMgYXMgYSBzYWNyaWZpY2UgZm9yIHRoZWlyIGNvdW50cnkncyBzYWtlLgogICAgICAgICAgICAgICAgICAgIFdoZW4sIHRoZXJlZm9yZSwgc3VjaCBjb3VyYWdlIHdhcyBkaXNwbGF5ZWQgYnkgdGhvc2Ugd29tZW4sIHRoZXkgbG9va2VkIHVwb24gaXQKICAgICAgICAgICAgICAgICAgICBhcyBhIGhlaW5vdXMgdGhpbmcgaWYgdGhleSwgYmVpbmcgbWVuLCBzaG91bGQgaGF2ZSBwcm92ZWQgdG8gcG9zc2VzcyBsZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgbWFuaG9vZC4gVGhlIEFjYW1hbnRpZGFlIGRpZCBub3QgZmFpbCB0byByZWNhbGwgdGhlIGVwaWNzIGluIHdoaWNoIEhvbWVyIHNheXMKICAgICAgICAgICAgICAgICAgICB0aGF0IEFjYW1hcyBzYWlsZWQgZm9yIFRyb3kgZm9yIHRoZSBzYWtlIG9mIGhpcyBtb3RoZXIgQWV0aHJhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BZXRocmEgaXMgbWVudGlvbmVkIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDMuMTQ0IiB2YWxpZD0ieWVzIj5Ib20uIElsLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMy4xNDQ8L2JpYmw+LCBidXQgdGhlIHJlc3Qgb2YgdGhlIHN0b3J5IGlzIG5vdCBIb21lcmljLiBUaGlzIEFjYW1hcyBpcwogICAgICAgICAgICAgICAgICAgICAgICB1bmtub3duIHRvIEhvbWVyLCB0aG91Z2ggaGUgbWVudGlvbnMgdHdvIG90aGVyIGluZGl2aWR1YWxzIG9mIHRoZSBzYW1lIG5hbWUuCiAgICAgICAgICAgICAgICAgICAgICAgIEl0IHdhcyBsYXRlciBteXRocyB0aGF0IHRvbGQgb2YgdGhlIHJlc2N1ZSBvZiBBZXRocmEgYWZ0ZXIgdGhlIGZhbGwgb2YgVHJveQogICAgICAgICAgICAgICAgICAgICAgICBieSBoZXIgdHdvIGdyYW5kc29ucywgbm90IHNvbnMsIEFjYW1hcyBhbmQgRGVtb3Bob24uPC9ub3RlPiBOb3csIHNpbmNlIGhlCiAgICAgICAgICAgICAgICAgICAgYnJhdmVkIGV2ZXJ5IGRhbmdlciBmb3IgdGhlIHNha2Ugb2Ygc2F2aW5nIGhpcyBvd24gbW90aGVyLCBob3cgd2VyZSB0aGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICBub3QgYm91bmQgdG8gZmFjZSBldmVyeSBkYW5nZXIgZm9yIHRoZSBzYWtlIG9mIHNhdmluZyB0aGVpciBwYXJlbnRzIG9uZSBhbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgYXQgaG9tZT8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMy4xNDQiIHZhbGlkPSJ5ZXMiPkhvbS4gSWwuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjE0NDwvYmlibD4sIGJ1dCB0aGUgcmVzdCBvZiB0aGUgc3RvcnkgaXMgbm90IEhvbWVyaWMuIFRoaXMgQWNhbWFzIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHVua25vd24gdG8gSG9tZXIsIHRob3VnaCBoZSBtZW50aW9ucyB0d28gb3RoZXIgaW5kaXZpZHVhbHMgb2YgdGhlIHNhbWUgbmFtZS4KICAgICAgICAgICAgICAgICAgICAgICAgSXQgd2FzIGxhdGVyIG15dGhzIHRoYXQgdG9sZCBvZiB0aGUgcmVzY3VlIG9mIEFldGhyYSBhZnRlciB0aGUgZmFsbCBvZiBUcm95CiAgICAgICAgICAgICAgICAgICAgICAgIGJ5IGhlciB0d28gZ3JhbmRzb25zLCBub3Qgc29ucywgQWNhbWFzIGFuZCBEZW1vcGhvbi48L3RyYW5zbGF0aW9uPg=="
translation['60.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBkaWQgbm90IGVzY2FwZSB0aGUgT2VuZWlkYWUgdGhhdAogICAgICAgICAgICAgICAgICAgIFNlbWVsZSB3YXMgdGhlIGRhdWdodGVyIG9mIENhZG11cywgYW5kIG9mIGhlciB3YXMgYm9ybiBvbmUgd2hvbSBpdCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHNhY3JpbGVnaW91cyB0byBuYW1lIGF0IHRoaXMgdG9tYiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RGlvbnlzdXMsIG9yCiAgICAgICAgICAgICAgICAgICAgICAgIEJhY2NodXMsIGdvZCBvZiB3aW5lLCB3aG8sIGFzIGFuIE9seW1waWFuLCBjb3VsZCBub3QgYXNzb2NpYXRlIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgZGVhdGguPC9ub3RlPiBhbmQgYnkgaGltIE9lbmV1cyB3YXMgYmVnb3R0ZW4sIHdobyB3YXMgY2FsbGVkIHRoZSBmb3VuZGVyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcmFjZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VHdvIGRlbWVzIGluIEF0dGljYSB3ZXJlIG5hbWVkCiAgICAgICAgICAgICAgICAgICAgICAgIE9lbm9lLCB3aGljaCB3YXMgc3VmZmljaWVudCB0byBqdXN0aWZ5IHRoZSBpbnZlbnRpb24gb2YgYSBoZXJvIE9lbmV1cywgYnV0CiAgICAgICAgICAgICAgICAgICAgICAgIGhlIGlzIG5vdCB0byBiZSBjb25mdXNlZCB3aXRoIHRoZSBIb21lcmljIGhlcm8gb2YgdGhpcyBuYW1lIHdobyB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlZCB3aXRoIENhbHlkb24gaW4gQWV0b2xpYSBhbmQgd2l0aCBBcmdvcy4gVGhlIHdvcmQgbWVhbnMKICAgICAgICAgICAgICAgICAgICAgICAg4oCcd2luZW1hbizigJ0gZnJvbTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6/4by2zr3Ov8+CPC9mb3JlaWduPi4KICAgICAgICAgICAgICAgICAgICAgICAgQXQgQXRoZW5zIHRoZSBhbm5pdmVyc2FyeSBvZiB0aGlzIGhlcm8gZmVsbCBpbiB0aGUgbW9udGggR2FtZWxpb24sIGxpa2UgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIExlbmFlYSBvZiBEaW9ueXN1cy4gSXQgd2FzIG5hdHVyYWwsIHRoZXJlZm9yZSwgdG8gY2FsbCBoaW0gdGhlIHNvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZ29kLCBidXQgdGhlIHJlbGF0aW9uc2hpcCBwbGF5cyBubyBwYXJ0IGluIHJlY29yZGVkIG15dGhzLjwvbm90ZT4gU2luY2UgdGhlCiAgICAgICAgICAgICAgICAgICAgZGFuZ2VyIGluIHF1ZXN0aW9uIHdhcyBjb21tb24gdG8gYm90aCBTdGF0ZXMsIG9uIGJlaGFsZiBvZiBib3RoIHRoZXkgdGhvdWdodAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgYm91bmQgdG8gZW5kdXJlIGFueSBBbmd1aXNoIHRvIHRoZSBlbmQuPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zr/hvLbOvc6/z4I8L2ZvcmVpZ24+LgogICAgICAgICAgICAgICAgICAgICAgICBBdCBBdGhlbnMgdGhlIGFubml2ZXJzYXJ5IG9mIHRoaXMgaGVybyBmZWxsIGluIHRoZSBtb250aCBHYW1lbGlvbiwgbGlrZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgTGVuYWVhIG9mIERpb255c3VzLiBJdCB3YXMgbmF0dXJhbCwgdGhlcmVmb3JlLCB0byBjYWxsIGhpbSB0aGUgc29uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBnb2QsIGJ1dCB0aGUgcmVsYXRpb25zaGlwIHBsYXlzIG5vIHBhcnQgaW4gcmVjb3JkZWQgbXl0aHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBzdWdnZXN0aW9uIGlzIHRoYXQgdGhlIE9lbmVpZGFlIHdvdWxkIGhhdmUgZmVsdCBlcXVhbGx5CiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kIHRvIGZpZ2h0IG9uIGJlaGFsZiBvZiBUaGViZXMsIG9mIHdoaWNoIHRoZSBmb3VuZGVyIHdhcyBDYWRtdXMsIGFuZCBvbgogICAgICAgICAgICAgICAgICAgICAgICBiZWhhbGYgb2YgQXRoZW5zLCBvbmUgb2Ygd2hvc2UgaGVyb2VzIHdhcyBPZW5ldXMsIGdyZWF0LWdyYW5kc29uIG9mIENhZG11cy4KICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB0aGUgd2Vha2VzdCBsaW5rIGluIHRoaXMgc2VyaWVzLjwvbm90ZT4gVGhlIENlY3JvcGlkYWUgd2VyZSB3ZWxsCiAgICAgICAgICAgICAgICAgICAgYXdhcmUgdGhhdCB0aGVpciBmb3VuZGVyIHdhcyByZXB1dGVkIHRvIGhhdmUgYmVlbiBwYXJ0IGRyYWdvbiwgcGFydCBodW1hbiwgZm9yCiAgICAgICAgICAgICAgICAgICAgbm8gb3RoZXIgcmVhc29uIHRoYW4gdGhpcywgdGhhdCBpbiB1bmRlcnN0YW5kaW5nIGhlIHdhcyBsaWtlIGEgbWFuLCBpbiBzdHJlbmd0aAogICAgICAgICAgICAgICAgICAgIGxpa2UgYSBkcmFnb24uIFNvIHRoZXkgYXNzdW1lZCB0aGF0IHRoZWlyIGR1dHkgd2FzIHRvIHBlcmZvcm0gZmVhdHMgd29ydGh5IG9mCiAgICAgICAgICAgICAgICAgICAgYm90aC4gPC90cmFuc2xhdGlvbj4="
translation['60.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgSGlwcG90aG9vbnRpZGFlIGJvcmUgaW4gbWluZCB0aGUKICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZSBvZiBBbG9wZSwgZnJvbSB3aGljaCBIaXBwb3Rob29uIHdhcyBib3JuLCBhbmQgdGhleSBrbmV3IGFsc28gd2hvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZm91bmRlciB3YXM7IGFib3V0IHRoZXNlIG1hdHRlcnPigJR0byBhdm9pZCBpbXByb3ByaWV0eSBvbiBhbiBvY2Nhc2lvbgogICAgICAgICAgICAgICAgICAgIGxpa2UgdGhpczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BbG9wZSdzIHNvbiB3YXMgc2FpZCB0byBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgdHdpY2UgZXhwb3NlZCwgYW5kIHR3aWNlIHJlc2N1ZWQgYW5kIHN1Y2tsZWQgYnkgYSBtYXJlLiBUaGUgdXNlIG9mIG1hcmUncwogICAgICAgICAgICAgICAgICAgICAgICBtaWxrIGFzIGEgZm9vZCBwcmV2YWlsZWQgYW1vbmcgdGhlIFNjeXRoaWFucywgYXMgdGhlIEdyZWVrcyBrbmV3IHdlbGwgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICB0aGVpciBjb2xvbmlzdHMgaW4gdGhlIHJlZ2lvbiBvZiB0aGUgQmxhY2sgU2VhLCBpZiBub3QgZnJvbSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDQuMiIgdmFsaWQ9InllcyI+SGR0LiA0LjI8L2JpYmw+OyBHeWxvbiwgZ3JhbmRmYXRoZXIgb2YgRGVtb3N0aGVuZXMsIGhhZAogICAgICAgICAgICAgICAgICAgICAgICBsaXZlZCBpbiB0aGUgQ3JpbWVhIGFuZCB3YXMgc2FpZCB0byBoYXZlIG1hcnJpZWQgYSBUaHJhY2lhbiB3aWZlLiBUaGUgb3JhdG9yCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBzb21ldGltZXMgdHdpdHRlZCBieSBoaXMgb3Bwb25lbnRzIGFib3V0IGhpcyBUaHJhY2lhbiBibG9vZC4gSGUgbWF5IGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgYmVlbiBzZW5zaXRpdmUuIENvbnNlcXVlbnRseSB0aGUgYXR0aXR1ZGUgaGVyZSByZXZlYWxlZCBtaWdodCBiZSBjb25zdHJ1ZWQKICAgICAgICAgICAgICAgICAgICAgICAgYXMgZXZpZGVuY2UgZm9yIHRoZSBnZW51aW5lbmVzcyBvZiB0aGUgc3BlZWNoLjwvbm90ZT4gSSBmb3JiZWFyIHRvIHNwZWFrCiAgICAgICAgICAgICAgICAgICAgcGxhaW5seeKAlHRoZXkgdGhvdWdodCBpdCB3YXMgdGhlaXIgZHV0eSB0byBiZSBzZWVuIHBlcmZvcm1pbmcgZGVlZHMKICAgICAgICAgICAgICAgICAgICB3b3J0aHkgb2YgdGhlc2UgYW5jZXN0b3JzLiBJdCBkaWQgbm90IGVzY2FwZSB0aGUgQWVhbnRpZGFlIHRoYXQgQWpheCwgcm9iYmVkIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHByaXplIG9mIHZhbG9yLCBkaWQgbm90IGNvbnNpZGVyIGhpcyBvd24gbGlmZSB3b3J0aCBsaXZpbmcuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA0LjIiIHZhbGlkPSJ5ZXMiPkhkdC4gNC4yPC9iaWJsPjsgR3lsb24sIGdyYW5kZmF0aGVyIG9mIERlbW9zdGhlbmVzLCBoYWQKICAgICAgICAgICAgICAgICAgICAgICAgbGl2ZWQgaW4gdGhlIENyaW1lYSBhbmQgd2FzIHNhaWQgdG8gaGF2ZSBtYXJyaWVkIGEgVGhyYWNpYW4gd2lmZS4gVGhlIG9yYXRvcgogICAgICAgICAgICAgICAgICAgICAgICB3YXMgc29tZXRpbWVzIHR3aXR0ZWQgYnkgaGlzIG9wcG9uZW50cyBhYm91dCBoaXMgVGhyYWNpYW4gYmxvb2QuIEhlIG1heSBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZW4gc2Vuc2l0aXZlLiBDb25zZXF1ZW50bHkgdGhlIGF0dGl0dWRlIGhlcmUgcmV2ZWFsZWQgbWlnaHQgYmUgY29uc3RydWVkCiAgICAgICAgICAgICAgICAgICAgICAgIGFzIGV2aWRlbmNlIGZvciB0aGUgZ2VudWluZW5lc3Mgb2YgdGhlIHNwZWVjaC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWpheCwgd29yc3RlZCBieSBPZHlzc2V1cyBpbiBhIGNvbnRlc3QgZm9yIHBvc3Nlc3Npb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFybXMgb2YgQWNoaWxsZXMsIHdhcyBzYWlkIHRvIGhhdmUgc2xhaW4gaGltc2VsZjogPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gMTEuNTQxIiB2YWxpZD0ieWVzIj5Ib20uIE9kLiAxMS41NDEtNTY3PC9iaWJsPjsgdGhlIHN0b3J5IG9mIGhpcyBtYWRuZXNzIGFuZCBvZgogICAgICAgICAgICAgICAgICAgICAgICBzbGF1Z2h0ZXJpbmcgZmxvY2tzIGFuZCBoZXJkcyBhcyBpZiB0aGV5IHdlcmUgaGlzIGVuZW1pZXMgaXMgbm90IEhvbWVyaWM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTb3BoLiBBai4gMSIgdmFsaWQ9InllcyI+U29waC4gQWouPC9iaWJsPjwvbm90ZT4gV2hlbiwgdGhlcmVmb3JlLCB0aGUgZ29kCiAgICAgICAgICAgICAgICAgICAgd2FzIGdpdmluZyB0byBhbm90aGVyIHRoZSBwcml6ZSBvZiB2YWxvciwgYXQgb25jZSB0aGV5IHRob3VnaHQgdGhleSBtdXN0IGRpZQogICAgICAgICAgICAgICAgICAgIHRyeWluZyB0byByZXBlbCB0aGVpciBmb2VzIHNvIGFzIHRvIHN1ZmZlciBubyBkaXNncmFjZSB0byB0aGVtc2VsdmVzLiBUaGUKICAgICAgICAgICAgICAgICAgICBBbnRpb2NoaWRhZSB3ZXJlIG5vdCB1bm1pbmRmdWwgdGhhdCBBbnRpb2NodXMgd2FzIHRoZSBzb24gb2YgSGVyYWNsZXMuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gMTEuNTQxIiB2YWxpZD0ieWVzIj5Ib20uIE9kLiAxMS41NDEtNTY3PC9iaWJsPjsgdGhlIHN0b3J5IG9mIGhpcyBtYWRuZXNzIGFuZCBvZgogICAgICAgICAgICAgICAgICAgICAgICBzbGF1Z2h0ZXJpbmcgZmxvY2tzIGFuZCBoZXJkcyBhcyBpZiB0aGV5IHdlcmUgaGlzIGVuZW1pZXMgaXMgbm90IEhvbWVyaWM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTb3BoLiBBai4gMSIgdmFsaWQ9InllcyI+U29waC4gQWouPC9iaWJsPjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgbW90aGVyIG9mIEFudGlvY2h1cyB3YXMgTWVkYSwgZGF1Z2h0ZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGh5bGFzLCBraW5nIG9mIHRoZSBEcnlvcGVzLCBidXQgdGhlIHN0b3J5IHdhcyB1bmltcG9ydGFudCBhbmQgbGl0dGxlCiAgICAgICAgICAgICAgICAgICAgICAgIGtub3duLjwvbm90ZT4gVGhleSBjb25jbHVkZWQgdGhlcmVmb3JlIHRoYXQgdGhleSBtdXN0IGVpdGhlciBsaXZlIHdvcnRoaWx5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlaXIgaGVyaXRhZ2Ugb3IgZGllIG5vYmx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['60.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCB0aG91Z2ggdGhlIGxpdmluZyBraW5zbWVuIG9mIHRoZXNlIGRlYWQgZGVzZXJ2ZSBvdXIKICAgICAgICAgICAgICAgICAgICBzeW1wYXRoeSwgYmVyZWF2ZWQgb2Ygc3VjaCBicmF2ZSBtZW4gYW5kIGRpdm9yY2VkIGZyb20gY2xvc2UgYW5kIGFmZmVjdGlvbmF0ZQogICAgICAgICAgICAgICAgICAgIGFzc29jaWF0aW9uLCBhbmQgdGhvdWdoIHRoZSBsaWZlIG9mIG91ciBuYXRpdmUgbGFuZCBpcyBkZXNvbGF0ZSBhbmQgZmlsbGVkIHdpdGgKICAgICAgICAgICAgICAgICAgICB0ZWFycyBhbmQgbW91cm5pbmcsIG5ldmVydGhlbGVzcyB0aGVzZSBkZWFkIGJ5IGEganVzdCBjYWxjdWxhdGlvbiBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgaGFwcHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNvbXBhcmUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSHlwLiA2LjI0IiB2YWxpZD0ieWVzIj5IeXAuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNDwvYmlibD4g4oCcQXJlIHdlIG5vdCB0byB0aGluayB0aGVtIGZvcnR1bmF0ZSBiZWNhdXNlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbG9yIHdhcyBwcm92ZW4gcmF0aGVyIHRoYW4gdW5mb3J0dW5hdGUgYmVjYXVzZSB0aGVpciBsaXZlcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGxvc3Q/4oCdPC9ub3RlPiBGaXJzdCBvZiBhbGwsIGJhcnRlcmluZyBsaXR0bGUgZm9yIG11Y2gsIGEgYnJpZWYKICAgICAgICAgICAgICAgICAgICB0aW1lIGZvciBhbGwgZXRlcm5pdHksIHRoZXkgbGVhdmUgYmVoaW5kIHRoZW0gYW4gYWdlbGVzcyBmYW1lPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSHlwLiA2LjI0IiB2YWxpZD0ieWVzIj5IeXAuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNDwvYmlibD4g4oCcQXJlIHdlIG5vdCB0byB0aGluayB0aGVtIGZvcnR1bmF0ZSBiZWNhdXNlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbG9yIHdhcyBwcm92ZW4gcmF0aGVyIHRoYW4gdW5mb3J0dW5hdGUgYmVjYXVzZSB0aGVpciBsaXZlcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGxvc3Q/4oCdPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPldpdGggPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrXhvZTOus67zrXOuc6xzr0g4byAzrPhvbXPgc+JPC9mb3JlaWduPgogICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDIuNDMuMiIgdmFsaWQ9InllcyI+VGh1Yy4gMi40My4yPC9iaWJsPgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDOs+G9tc+Bz4nOvSDhvJTPgM6xzrnOvc6/zr08L2ZvcmVpZ24+YW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNi40MiIgdmFsaWQ9InllcyI+SHlwLiA0MjwvYmlibD4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrXhvZDOtM6/zr7hvbfOsc69IOG8gM6z4b21z4HOsc+Ezr/OvTwvZm9yZWlnbj4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs614b2UzrrOu861zrnOsc69IOG8gM6z4b21z4HPiTwvZm9yZWlnbj4KICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAyLjQzLjIiIHZhbGlkPSJ5ZXMiPlRodWMuIDIuNDMuMjwvYmlibD4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAzrPhvbXPgc+Jzr0g4byUz4DOsc65zr3Ov869PC9mb3JlaWduPmFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDYuNDIiIHZhbGlkPSJ5ZXMiPkh5cC4gNDI8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs614b2QzrTOv86+4b23zrHOvSDhvIDOs+G9tc+BzrHPhM6/zr08L2ZvcmVpZ24+LjwvdHJhbnNsYXRpb24+"
translation['60.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB3aGljaCB0aGUgY2hpbGRyZW4gb2YgdGhlc2UgbWVuIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgcmVhcmVkIGluIGhvbm9yIGFuZCB0aGUgcGFyZW50cyBvZiB0aGVzZSBtZW4gc2hhbGwgZW5qb3kgZGlzdGluY3Rpb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB0b3BpYyBpcyB0b3VjaGVkIHVwb24gaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSHlwLiA2LjI3IiB2YWxpZD0ieWVzIj5IeXAuIDI3PC9iaWJsPi48L25vdGU+IGFuZCB0ZW5kZXIgY2FyZSBpbiB0aGVpciBvbGQgYWdlLCBjaGVyaXNoaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGZhbWUgb2YgdGhlc2UgbWVuIGFzIGFuIGFzc3VhZ2VtZW50IG9mIHRoZWlyIHNvcnJvdy48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDYuMjciIHZhbGlkPSJ5ZXMiPkh5cC4gMjc8L2JpYmw+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAyLjQ0LjQiIHZhbGlkPSJ5ZXMiPlRodWMuIDIuNDQuNDwvYmlibD4g4oCcYW5kIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbWZvcnRlZCBieSB0aGUgZmFpciBmYW1lIG9mIHRoZXNlIHlvdXIgc29ucy7igJ08L25vdGU+IEluIHRoZQogICAgICAgICAgICAgICAgICAgIHNlY29uZCBwbGFjZSwgaW1tdW5lIGZyb20gZGlzZWFzZSBvZiBib2R5IGFuZCBiZXlvbmQgdGhlIHJlYWNoIG9mIGFuZ3Vpc2ggb2YKICAgICAgICAgICAgICAgICAgICAgICAgc3Bpcml0LDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDIuNDQuNCIgdmFsaWQ9InllcyI+VGh1Yy4gMi40NC40PC9iaWJsPiDigJxhbmQgYmUKICAgICAgICAgICAgICAgICAgICAgICAgY29tZm9ydGVkIGJ5IHRoZSBmYWlyIGZhbWUgb2YgdGhlc2UgeW91ciBzb25zLuKAnTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDYuNDMiIHZhbGlkPSJ5ZXMiPkh5cC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQzPC9iaWJsPiBtYXkgYmUgZm91bmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4DOt867zrvOsc6zzrzhvbPOvc6/zrkgzrXhvLDPg+G9tgogICAgICAgICAgICAgICAgICAgICAgICAgICAgzr3hvbnPg8+Jzr0gzrrOseG9tiDOu+G9u8+AzrfPgjwvZm9yZWlnbj4sIGFzIEJsYXNzIG9ic2VydmVzLjwvbm90ZT4gc3VjaCBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBsaXZpbmcgbXVzdCBzdWZmZXIgYmVjYXVzZSBvZiB0aGUgbWlzZm9ydHVuZXMgd2hpY2ggaGF2ZSBiZWZhbGxlbiwgdGhleSB0b2RheQogICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgaGlnaCBob25vciBhbmQgaW5zcGlyZSBncmVhdCBlbXVsYXRpb24gd2hpbGUgdGhleSBhcmUgYWNjb3JkZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgY3VzdG9tYXJ5IG9ic2VxdWllcy48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDYuNDMiIHZhbGlkPSJ5ZXMiPkh5cC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQzPC9iaWJsPiBtYXkgYmUgZm91bmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4DOt867zrvOsc6zzrzhvbPOvc6/zrkgzrXhvLDPg+G9tgogICAgICAgICAgICAgICAgICAgICAgICAgICAgzr3hvbnPg8+Jzr0gzrrOseG9tiDOu+G9u8+AzrfPgjwvZm9yZWlnbj4sIGFzIEJsYXNzIG9ic2VydmVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Bbm51YWwgc2FjcmlmaWNlcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmZvcm1lZCBhdCB0aGUgcHVibGljIHNlcHVsY2hyZSBpbiBBdGhlbnMuIFRoZXkgd2VyZSBmb2xsb3dlZCBieSBhdGhsZXRpYwogICAgICAgICAgICAgICAgICAgICAgICBjb250ZXN0cy48L25vdGU+IEhvdywgdGhlbiwgc2luY2UgdGhlIHdob2xlIGNvdW50cnkgdW5pdGVzIGluIGFjY29yZGluZyB0aGVtCiAgICAgICAgICAgICAgICAgICAgYSBwdWJsaWMgYnVyaWFsLCBhbmQgdGhleSBhbG9uZSByZWNlaXZlIHRoZSB3b3JkcyBvZiB1bml2ZXJzYWwgcHJhaXNlLCB3aGlsZQogICAgICAgICAgICAgICAgICAgIHRoZWlyIGtpbnNtZW4gYW5kIGZlbGxvdy1jaXRpemVucyBhcmUgbm90IGFsb25lIGluIG1vdXJuaW5nIHRoZW0sIGJ1dCBldmVyeSBsYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoYXMgdGhlIHJpZ2h0IHRvIGJlIGNhbGxlZCBIZWxsYXMgYW5kIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIHdob2xlIHdvcmxkCiAgICAgICAgICAgICAgICAgICAgbW91cm5zIHdpdGggdGhlbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMi40My4zIiB2YWxpZD0ieWVzIj5UaHVjLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMi40My4zPC9iaWJsPiDigJxmb3IgdGhlIHdob2xlIHdvcmxkIGlzIHRoZSBzZXB1bGNocmUgb2YgZmFtb3VzCiAgICAgICAgICAgICAgICAgICAgICAgIG1lbi7igJ08L25vdGU+IGhvdyBjYW4gd2UgZG8gb3RoZXJ3aXNlIHRoYW4gY29uc2lkZXIgdGhlbSBibGVzc2VkIG9mCiAgICAgICAgICAgICAgICAgICAgZm9ydHVuZT8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMi40My4zIiB2YWxpZD0ieWVzIj5UaHVjLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMi40My4zPC9iaWJsPiDigJxmb3IgdGhlIHdob2xlIHdvcmxkIGlzIHRoZSBzZXB1bGNocmUgb2YgZmFtb3VzCiAgICAgICAgICAgICAgICAgICAgICAgIG1lbi7igJ08L3RyYW5zbGF0aW9uPg=="
translation['60.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIGV4Y2VsbGVudCByZWFzb24gb25lIG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgZGVjbGFyZSB0aGVtIHRvIGJlIG5vdyBzZWF0ZWQgYmVzaWRlIHRoZSBnb2RzIGJlbG93LCBwb3NzZXNzaW5nIHRoZSBzYW1lIHJhbmsgYXMKICAgICAgICAgICAgICAgICAgICB0aGUgYnJhdmUgbWVuIHdobyBoYXZlIHByZWNlZGVkIHRoZW0gaW4gdGhlIGlzbGFuZHMgb2YgdGhlIGJsZXN0LiBGb3IgdGhvdWdoIG5vCiAgICAgICAgICAgICAgICAgICAgbWFuIGhhcyBiZWVuIHRoZXJlIHRvIHNlZSBvciBicm91Z2h0IGJhY2sgdGhpcyByZXBvcnQgY29uY2VybmluZyB0aGVtLCB5ZXQgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG9tIHRoZSBsaXZpbmcgaGF2ZSBhc3N1bWVkIHRvIGJlIHdvcnRoeSBvZiBob25vcnMgaW4gdGhlIHdvcmxkIGFib3ZlLCB0aGVzZSB3ZQogICAgICAgICAgICAgICAgICAgIGJlbGlldmUsIGJhc2luZyBvdXIgc3VybWlzZSBvbiB0aGVpciBmYW1lLCByZWNlaXZlIHRoZSBzYW1lIGhvbm9ycyBhbHNvIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHdvcmxkIGJleW9uZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QSBzaW1pbGFyIHNlbnRpbWVudCBpcyBmb3VuZCBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSHlwLiA2LjQzIiB2YWxpZD0ieWVzIj5IeXAuIDQzPC9iaWJsPi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSHlwLiA2LjQzIiB2YWxpZD0ieWVzIj5IeXAuIDQzPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['60.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hpbGUgaXQgaXMKICAgICAgICAgICAgICAgICAgICBwZXJoYXBzIGRpZmZpY3VsdDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CbGFzcyBjb21wYXJlcyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDYuNDEiIHZhbGlkPSJ5ZXMiPkh5cC4gNDE8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+HzrHOu861z4DhvbjOvSDOvOG9ss69IOG8tM+Dz4nPgiDhvJDPg8+E4b23PC9mb3JlaWduPi48L25vdGU+IHRvCiAgICAgICAgICAgICAgICAgICAgbWl0aWdhdGUgdGhlIHByZXNlbnQgbWlzZm9ydHVuZXMgYnkgdGhlIHNwb2tlbiB3b3JkLCBuZXZlcnRoZWxlc3MgaXQgaXMgb3VyIGR1dHkKICAgICAgICAgICAgICAgICAgICB0byBlbmRlYXZvciB0byB0dXJuIG91ciBtaW5kcyB0byBjb21mb3J0aW5nIHRob3VnaHRzLCByZWZsZWN0aW5nIHRoYXQgaXQgaXMgYQogICAgICAgICAgICAgICAgICAgIGJlYXV0aWZ1bCB0aGluZyBmb3IgcGFyZW50cyB3aG8gaGF2ZSBiZWdvdHRlbiBtZW4gbGlrZSB0aGVzZSwgYW5kIHRoZW1zZWx2ZXMKICAgICAgICAgICAgICAgICAgICB3ZXJlIGJvcm4gb2Ygb3RoZXJzIGxpa2UgdW50byB0aGVtLCB0byBiZSBzZWVuIGVuZHVyaW5nIHRoZWlyIGFmZmxpY3Rpb24gbW9yZQogICAgICAgICAgICAgICAgICAgIGRlY29yb3VzbHkgdGhhbiB0aGUgcmVzdCBvZiBtYW5raW5kLCBhbmQsIG5vIG1hdHRlciB3aGF0IGZvcnR1bmUgYmVmYWxscywgdG8gYmUKICAgICAgICAgICAgICAgICAgICBsaWtlIHRoZW07IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNi40MSIgdmFsaWQ9InllcyI+SHlwLiA0MTwvYmlibD4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4fOsc67zrXPgOG9uM69IM684b2yzr0g4by0z4PPic+CIOG8kM+Dz4Thvbc8L2ZvcmVpZ24+LjwvdHJhbnNsYXRpb24+"
translation['60.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgdG8gdGhlIGRlcGFydGVkIHN1Y2ggY29uZHVjdAogICAgICAgICAgICAgICAgICAgIHdvdWxkIHNlZW0gbW9zdCBiZWNvbWluZyBpbiB5b3UgYW5kIGhvbm9yYWJsZSB0byB0aGVtLCBhbmQgdG8gdGhlIHdob2xlIFN0YXRlCiAgICAgICAgICAgICAgICAgICAgYW5kIHRvIHRoZSBsaXZpbmcgaXQgd291bGQgYnJpbmcgdGhlIGdyZWF0ZXN0IGdsb3J5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHRvcGljIGlzIHRyZWF0ZWQgYXQgZ3JlYXRlciBsZW5ndGggaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTWVuZXguIDI0N2QiIHZhbGlkPSJ5ZXMiPlBsYXRvIE1lbmV4LiAyNDdkLTI0OGM8L2JpYmw+Ljwvbm90ZT4gSXQgaXMgYQogICAgICAgICAgICAgICAgICAgIGdyaWV2b3VzIHRoaW5nIGZvciBmYXRoZXJzIGFuZCBtb3RoZXJzIHRvIGJlIGRlcHJpdmVkIG9mIHRoZWlyIGNoaWxkcmVuIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIG9sZCBhZ2UgdG8gbGFjayB0aGUgY2FyZSBvZiB0aG9zZSB3aG8gYXJlIG5lYXJlc3QgYW5kIGRlYXJlc3QgdG8gdGhlbS4KICAgICAgICAgICAgICAgICAgICBZZXMsIGJ1dCBpdCBpcyBhIHByb3VkIHByaXZpbGVnZSB0byBiZWhvbGQgdGhlbSBwb3NzZXNzb3JzIG9mIGRlYXRobGVzcyBob25vcnMKICAgICAgICAgICAgICAgICAgICBhbmQgYSBtZW1vcmlhbCBvZiB0aGVpciB2YWxvciBlcmVjdGVkIGJ5IHRoZSBTdGF0ZSwgYW5kIGRlZW1lZCBkZXNlcnZpbmcgb2YKICAgICAgICAgICAgICAgICAgICBzYWNyaWZpY2VzIGFuZCBnYW1lcyBmb3IgYWxsIGZ1dHVyZSB0aW1lLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBNZW5leC4gMjQ3ZCIgdmFsaWQ9InllcyI+UGxhdG8gTWVuZXguIDI0N2QtMjQ4YzwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['60.37'] = ""
translation['61.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XZWxsLCBzaW5jZSB5b3UKICAgICAgICAgICAgICAgICAgICB3aXNoIHRvIGhlYXIgdGhlIGVzc2F5LCBJIHNoYWxsIGJyaW5nIGl0IG91dCBhbmQgcmVhZCBpdCBhbG91ZDsgYnV0IGZpcnN0IHlvdQogICAgICAgICAgICAgICAgICAgIG11c3QgdW5kZXJzdGFuZCBpdHMgcHVycG9zZS4gVGhlIHdyaXRlcidzIGRlc2lyZSBpcyB0byBwcmFpc2UgRXBpY3JhdGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JdCB3YXMgYXQgdGhlIGhvdXNlIG9mIGEgY2VydGFpbiBFcGljcmF0ZXMgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBMeXNpYXMgd2FzIHN1cHBvc2VkIHRvIGhhdmUgZGVsaXZlcmVkIGhpcyBsb3ZlLXNwZWVjaDsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUGhhZWRydXMgMjI3YiIgdmFsaWQ9InllcyI+UGxhdC4gUGhhZWRydXMgMjI3YjwvYmlibD4uPC9ub3RlPiB3aG9tIGhlCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0byBiZSB0aGUgbW9zdCBjaGFybWluZyB5b3VuZyBtYW4gaW4gdGhlIGNpdHksIGFsdGhvdWdoIHRoZXJlIHdlcmUgbWFueQogICAgICAgICAgICAgICAgICAgIGZpbmUgZ2VudGxlbWVuIGFtb25nIHRob3NlIG9mIGhpcyBvd24gYWdlLCBhbmQgdG8gc3VycGFzcyBoaW0gbW9yZSBpbgogICAgICAgICAgICAgICAgICAgIHVuZGVyc3RhbmRpbmcgdGhhbiBpbiBiZWF1dHkgb2YgcGVyc29uLiBPYnNlcnZpbmcgYWxzbyB0aGF0LCBnZW5lcmFsbHkgc3BlYWtpbmcsCiAgICAgICAgICAgICAgICAgICAgbW9zdCBlcm90aWMgY29tcG9zaXRpb25zIGF0dGFjaCBzaGFtZSByYXRoZXIgdGhhbiBob25vciB0byB0aG9zZSBhYm91dCB3aG9tIHRoZXkKICAgICAgICAgICAgICAgICAgICBhcmUgd3JpdHRlbiwgaGUgaGFzIHRha2VuIHByZWNhdXRpb25zIHRoYXQgdGhpcyBzaG91bGQgbm90IGhhcHBlbiBpbiBoaXMgY2FzZSwKICAgICAgICAgICAgICAgICAgICBhbmQgaGFzIHdyaXR0ZW4gb25seSB3aGF0IGhlIHNheXMgaGUgaXMgY29udmluY2VkIG9mIGJ5IGhpcyBqdWRnZW1lbnQsIGJlbGlldmluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgYW4gaG9uZXN0IGxvdmVyIHdvdWxkIG5laXRoZXIgZG8gYW55dGhpbmcgc2hhbWVmdWwgbm9yIHJlcXVlc3QgaXQuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUGhhZWRydXMgMjI3YiIgdmFsaWQ9InllcyI+UGxhdC4gUGhhZWRydXMgMjI3YjwvYmlibD4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgdG9waWMgaXMgdHJlYXRlZCBieSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEFtaWMuIDEyIiB2YWxpZD0ieWVzIj5DaWNlcm8gRGUgQW1pYy4gMTI8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEFtaWMuIDEyIiB2YWxpZD0ieWVzIj5DaWNlcm8gRGUgQW1pYy4gMTI8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['61.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhhdCBwYXJ0IG9mIG15IGVzc2F5IHdoaWNoIHlvdSBtYXkgZmluZAogICAgICAgICAgICAgICAgICAgIHRvIGJlIHRoZSBtb3N0IGVyb3RpYywgc28gdG8gc3BlYWssIGlzIG9uIHRoaXMgdG9waWMsIGJ1dCB0aGUgcmVzdCBvZiBpdCBpbiBwYXJ0CiAgICAgICAgICAgICAgICAgICAgcHJhaXNlcyB0aGUgbGFkIGhpbXNlbGYgYW5kIGluIHBhcnQgY291bnNlbHMgYWJvdXQgaGlzIGVkdWNhdGlvbiBhbmQgaGlzIGRlc2lnbgogICAgICAgICAgICAgICAgICAgIGZvciBsaXZpbmcuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBhdXRob3IgcGxhaW5seSBoaW50cyBhdCBhCiAgICAgICAgICAgICAgICAgICAgICAgIHRocmVlZm9sZCBwYXJ0aXRpb24gb2YgaGlzIHRoZW1lOiB0aGUgZXJvdGljIHBhcnQsIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjEuMyIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNjEuMy05PC9iaWJsPiwgZXVsb2d5LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYxLjEwIiB2YWxpZD0ieWVzIj5EZW0uIDYxLjEwLTMyPC9iaWJsPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwcm90cmVwdGljdXMsIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjEuMzYiIHZhbGlkPSJ5ZXMiPkRlbS4gNjEuMzYtNTU8L2JpYmw+LiBCbGFzcyBzZWVzIGEKICAgICAgICAgICAgICAgICAgICAgICAgdHdvZm9sZCBkaXZpc2lvbiBvbmx5LCBldWxvZ3kgYW5kIHByb3RyZXB0aWN1cy4gSW4gZWl0aGVyIGNhc2UgdGhlIHJlbWFpbmluZwogICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9ucyBzZXJ2ZSBhcyBpbnRyb2R1Y3Rpb24sIHRyYW5zaXRpb24gYW5kIGVwaWxvZ3VlLiBFeGhvcnRhdGlvbnMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHN0dWR5IG9mIHBoaWxvc29waHkgd2VyZSBjYWxsZWQg4oCccHJvdHJlcHRpY3Mu4oCdPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIHdob2xlIGVzc2F5IGlzIHdyaXR0ZW4gYXMgb25lIHdvdWxkIHB1dCBpdCBpbnRvIGEgYm9vaywgYmVjYXVzZSBkaXNjb3Vyc2VzCiAgICAgICAgICAgICAgICAgICAgaW50ZW5kZWQgdG8gYmUgZGVsaXZlcmVkIG91Z2h0IHRvIGJlIHdyaXR0ZW4gc2ltcGx5IGFuZCBqdXN0IGFzIG9uZSBtaWdodCBzcGVhawogICAgICAgICAgICAgICAgICAgIG9mZmhhbmQsIHdoaWxlIHRob3NlIG9mIHRoZSBvdGhlciBraW5kLCB3aGljaCBhcmUgcGxhbm5lZCB0byBsYXN0IGxvbmdlciwgYXJlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVybHkgY29tcG9zZWQgaW4gdGhlIG1hbm5lciBvZiBwb2V0cnkgYW5kIG9ybmF0ZWx5LjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjEuMyIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNjEuMy05PC9iaWJsPiwgZXVsb2d5LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYxLjEwIiB2YWxpZD0ieWVzIj5EZW0uIDYxLjEwLTMyPC9iaWJsPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwcm90cmVwdGljdXMsIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjEuMzYiIHZhbGlkPSJ5ZXMiPkRlbS4gNjEuMzYtNTU8L2JpYmw+LiBCbGFzcyBzZWVzIGEKICAgICAgICAgICAgICAgICAgICAgICAgdHdvZm9sZCBkaXZpc2lvbiBvbmx5LCBldWxvZ3kgYW5kIHByb3RyZXB0aWN1cy4gSW4gZWl0aGVyIGNhc2UgdGhlIHJlbWFpbmluZwogICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9ucyBzZXJ2ZSBhcyBpbnRyb2R1Y3Rpb24sIHRyYW5zaXRpb24gYW5kIGVwaWxvZ3VlLiBFeGhvcnRhdGlvbnMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHN0dWR5IG9mIHBoaWxvc29waHkgd2VyZSBjYWxsZWQg4oCccHJvdHJlcHRpY3Mu4oCdPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZXJlIGlzIGEgcmVmZXJlbmNlIHRvIHRoZXNlIHR3byBzdHlsZXMgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gNC4xMSIgdmFsaWQ9InllcyI+SXNvYy4gNC4xMTwvYmlibD4sIGFzIEJsYXNzIG5vdGVzLiBUaGUgZXBpZGVpY3RpYyBpcyBha2luCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIHBvZXRyeSBpbiB0aGUgdXNlIG9mIGZpZ3VyZXMgb2Ygc3BlZWNoIO+8iHNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYxLjExIiB2YWxpZD0ieWVzIj5EZW0uIDYxLjExPC9iaWJsPu+8iTsgdGhlIHJlZmVyZW5jZSBvZgogICAgICAgICAgICAgICAgICAgICAgICDigJxvcm5hdGVseeKAnSBpcyBjaGllZmx5IHRvIHJoeXRobS4gSW4gYm90aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZ1bmVyYWwgU3BlZWNoPC90aXRsZT4g77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA2MCIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICA2MDwvYmlibD7vvIkgYW5kIHRoZSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Fcm90aWMgRXNzYXk8L3RpdGxlPiB0aGVyZSBpcyBjYXJlZnVsCiAgICAgICAgICAgICAgICAgICAgICAgIGF2b2lkYW5jZSBvZiBoaWF0dXM7IHJoeXRobWljYWwgY2xhdXN1bGFlIGFyZSBub3QgaW5mcmVxdWVudDsgR29yZ2lhbmljCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFsbGVsIGNsYXVzdWxhZSBvY2N1ciDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYxLjMyIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDYxLjMyPC9iaWJsPu+8iS48L25vdGU+IEZvciBpdCBpcyB0aGUgZnVuY3Rpb24gb2YgdGhlIGZvcm1lciB0byB3aW4KICAgICAgICAgICAgICAgICAgICBjb252ZXJ0cyBhbmQgb2YgdGhlIGxhdHRlciB0byBkaXNwbGF5IG9uZSdzIHNraWxsLiBBY2NvcmRpbmdseSwgdG8gYXZvaWQKICAgICAgICAgICAgICAgICAgICBzcG9pbGluZyB0aGUgZXNzYXkgZm9yIHlvdSBvciByZWhlYXJzaW5nIG15IG93biBvcGluaW9ucyBhYm91dCB0aGVzZSBxdWVzdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgSSBhc2sgeW91IHRvIGxlbmQgeW91ciBhdHRlbnRpb24sIHNpbmNlIHlvdSBhcmUgaW1tZWRpYXRlbHkgZ29pbmcgdG8gaGVhciB0aGUKICAgICAgICAgICAgICAgICAgICBlc3NheSBpdHNlbGYsIGJlY2F1c2UgRXBpY3JhdGVzIGlzIGFsc28gYXQgaGFuZCwgd2hvbSBJIHdpc2hlZCB0byBoZWFyIGl0LgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJJc29jLiA0LjExIiB2YWxpZD0ieWVzIj5Jc29jLiA0LjExPC9iaWJsPiwgYXMgQmxhc3Mgbm90ZXMuIFRoZSBlcGlkZWljdGljIGlzIGFraW4KICAgICAgICAgICAgICAgICAgICAgICAgdG8gcG9ldHJ5IGluIHRoZSB1c2Ugb2YgZmlndXJlcyBvZiBzcGVlY2gg77yIc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjEuMTEiIHZhbGlkPSJ5ZXMiPkRlbS4gNjEuMTE8L2JpYmw+77yJOyB0aGUgcmVmZXJlbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnG9ybmF0ZWx54oCdIGlzIGNoaWVmbHkgdG8gcmh5dGhtLiBJbiBib3RoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RnVuZXJhbCBTcGVlY2g8L3RpdGxlPiDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYwIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDYwPC9iaWJsPu+8iSBhbmQgdGhlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVyb3RpYyBFc3NheTwvdGl0bGU+IHRoZXJlIGlzIGNhcmVmdWwKICAgICAgICAgICAgICAgICAgICAgICAgYXZvaWRhbmNlIG9mIGhpYXR1czsgcmh5dGhtaWNhbCBjbGF1c3VsYWUgYXJlIG5vdCBpbmZyZXF1ZW50OyBHb3JnaWFuaWMKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYWxsZWwgY2xhdXN1bGFlIG9jY3VyIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjEuMzIiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgNjEuMzI8L2JpYmw+77yJLjwvdHJhbnNsYXRpb24+"
translation['61.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5PYnNlcnZpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IGNlcnRhaW4gb2YgdGhvc2Ugd2hvIGFyZSBsb3ZlZCBhbmQgcG9zc2VzcyB0aGVpciBzaGFyZSBvZiBnb29kIGxvb2tzIG1ha2UKICAgICAgICAgICAgICAgICAgICB0aGUgcmlnaHQgdXNlIG9mIG5laXRoZXIgb25lIG9mIHRoZXNlIGJsZXNzaW5ncywgYnV0IHB1dCBvbiBncmFuZCBhaXJzIGJlY2F1c2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgY29tZWxpbmVzcyBvZiB0aGVpciBhcHBlYXJhbmNlIGFuZCBleGhpYml0IHJlbHVjdGFuY2UgdG8gYXNzb2NpYXRlIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGVpciBhZG1pcmVycyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIEdyZWVrIHdvcmQgbWVhbnMKICAgICAgICAgICAgICAgICAgICAgICAg4oCcbG92ZXLigJ0gb3Ig4oCcc3dlZXRoZWFydCzigJ0gYXBwbGllZCB0bwogICAgICAgICAgICAgICAgICAgICAgICBtZW4gYXMgd2VsbCBhcyB3b21lbi48L25vdGU+IGFuZCBzbyBmYXIgZmFpbCBpbiBqdWRnaW5nIHdoYXQgaXMgYmVzdCB0aGF0LAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2Ugb2YgdGhvc2Ugd2hvIHBlcnZlcnQgdGhlIHRoaW5nLCB0aGV5IGFzc3VtZSBhIHN1cmx5IGF0dGl0dWRlIHRvd2FyZAogICAgICAgICAgICAgICAgICAgIHRob3NlIGFsc28gd2hvIGRlc2lyZSB0byBhc3NvY2lhdGUgd2l0aCB0aGVtIGZyb20gcHVyZSBtb3RpdmVzLCBJIGNvbmNsdWRlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgc3VjaCB5b3VuZyBtZW4gbm90IG9ubHkgZGVmZWF0IHRoZWlyIG93biBpbnRlcmVzdHMgYnV0IGFsc28gZW5nZW5kZXIgZXZpbCBoYWJpdHMKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcmVzdCwgPC90cmFuc2xhdGlvbj4="
translation['61.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IHRoZSBoaWdoLW1pbmRlZCBzaG91bGQKICAgICAgICAgICAgICAgICAgICBub3QgZm9sbG93IHRoZWlyIGZvb2xpc2ggZXhhbXBsZSwgYmVhcmluZyBpbiBtaW5kIHBhcnRpY3VsYXJseSB0aGF0LCBzaW5jZQogICAgICAgICAgICAgICAgICAgIGFjdGlvbnMgYXJlIG5vdCBhYnNvbHV0ZWx5IGVpdGhlciBob25vcmFibGUgb3Igc2hhbWVmdWwgYnV0IGZvciBtb3N0IHBhcnQgdmFyeQogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byB0aGUgcGVyc29ucyBjb25jZXJuZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RpbmN0aW9uIGlzIG1hZGUgaW4gc3lub255bW91cyB0ZXJtcywgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gNi42MCIgdmFsaWQ9InllcyI+SXNvYy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDYuNjA8L2JpYmw+Ljwvbm90ZT4gaXQgaXMgdW5yZWFzb25hYmxlIHRvIGFkb3B0IHRoZSBzYW1lIGF0dGl0dWRlIHRvd2FyZAogICAgICAgICAgICAgICAgICAgIGJvdGggY2xhc3NlcyBvZiBtZW4sIGFuZCBzZWNvbmRseSwgdGhhdCBpdCBpcyB0aGUgaGVpZ2h0IG9mIGFic3VyZGl0eSB0byBlbnZ5CiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGhhdmUgYSBob3N0IG9mIGZpcm0gZnJpZW5kcyBidXQgdG8gcmVwdWxzZSB0aGVpciBhZG1pcmVycywgd2hvIGFyZSBhCiAgICAgICAgICAgICAgICAgICAgc2VwYXJhdGUgZ3JvdXAgYW5kIGFsb25lIGZlZWwgZHJhd24gYnkgbmF0dXJlLCBub3QgdG93YXJkIGFsbCwgYnV0IG9ubHkgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgYmVhdXRpZnVsIGFuZCBtb2Rlc3QuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Iklzb2MuIDYuNjAiIHZhbGlkPSJ5ZXMiPklzb2MuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2LjYwPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['61.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Nb3Jlb3ZlciwgYWx0aG91Z2ggdGhvc2Ugd2hvIGhhdmUgbmV2ZXIgeWV0IHNlZW4gc3VjaCBhIGZyaWVuZHNoaXAKICAgICAgICAgICAgICAgICAgICB0dXJuIG91dCB3ZWxsIG9yIGhhdmUgc2V2ZXJlbHkgY29uZGVtbmVkIHRoZW1zZWx2ZXMgb24gdGhlIGdyb3VuZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBpbmNhcGFibGUgb2YgYXNzb2NpYXRpbmcgaW5ub2NlbnRseSB3aXRoIGNhc3VhbCBhY3F1YWludGFuY2VzLCBpdCBpcwogICAgICAgICAgICAgICAgICAgIHBlcmhhcHMgbm90IHVucmVhc29uYWJsZSB0byBlbnRlcnRhaW4gdGhpcyBwcmVqdWRpY2U8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SGUgbWVhbnMgdGhlIHByZWp1ZGljZSBhZ2FpbnN0IGFueSBjb21wcm9taXNlIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb25zIHRoYXQgbWlnaHQgbGVhZCB0byBob21vc2V4dWFsaXR5LCB2YXJpb3VzbHkga25vd24gYXMgYm95LWxvdmUsCiAgICAgICAgICAgICAgICAgICAgICAgIEdyZWVrIGxvdmUgb3IgRG9yaWMgbG92ZS48L25vdGU+OyBidXQgZm9yIHRob3NlIHNvIGRpc3Bvc2VkIGFzIHlvdXJzZWxmLCB3aG8KICAgICAgICAgICAgICAgICAgICBoYXZlIG5vdCB1dHRlcmx5IHJlZnVzZWQgdG8gaGVhciBob3cgdmVyeSBtYW55IGJlbmVmaXRzIGFjY3J1ZSB0aHJvdWdoIGxvdmUKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IHNoYW1lIGFuZCBoYXZlIGxpdmVkIHRoZSByZXN0IG9mIHRoZWlyIGxpdmVzIHdpdGggdGhlIHV0bW9zdAogICAgICAgICAgICAgICAgICAgIGNpcmN1bXNwZWN0aW9uLCBpdCBpcyBub3QgcmVhc29uYWJsZSB0byBoYXZlIGV2ZW4gYSBzdXNwaWNpb24gdGhhdCB0aGV5IHdvdWxkIGRvCiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcgc2hhbWVmdWwuIDwvdHJhbnNsYXRpb24+"
translation['61.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkNvbnNlcXVlbnRseSBJIGhhdmUgZmVsdCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgbW9yZSBhIG1vdmVkIHRvIHdyaXRlIHRoaXMgZXNzYXksIGZlZWxpbmcgc3VyZSBJIHNob3VsZCBub3QgZmFpbCB0byBzZWN1cmUKICAgICAgICAgICAgICAgICAgICB0d28gbW9zdCBob25vcmFibGUgcmV3YXJkcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHVzZSBvZiB0aGUgZHVhbAogICAgICAgICAgICAgICAgICAgICAgICBzYXZvcnMgb2YgcG9ldHJ5Ljwvbm90ZT4gRm9yIHdoZW4gSSBoYXZlIGRlc2NyaWJlZCB0aGUgZ29vZCBxdWFsaXRpZXMgeW91CiAgICAgICAgICAgICAgICAgICAgcG9zc2VzcywgSSBob3BlIHRoYXQgYXQgb25lIGFuZCB0aGUgc2FtZSB0aW1lIEkgc2hhbGwgcHJvdmUgeW91IHRvIGJlIHdvcnRoeSBvZgogICAgICAgICAgICAgICAgICAgIGFkbWlyYXRpb24gYW5kIG15c2VsZiBub3Qgc2Vuc2VsZXNzIGlmIEkgbG92ZSB5b3UsIGJlaW5nIHdoYXQgeW91IGFyZTsgYW5kCiAgICAgICAgICAgICAgICAgICAgc2Vjb25kbHksIGluIHRlbmRlcmluZyB0aGUgYWR2aWNlIHRoYXQgaXMgbW9zdCB1cmdlbnRseSBuZWVkZWQgSSBiZWxpZXZlIEkgc2hhbGwKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IHByb29mIG9mIG15IG93biBnb29kd2lsbCBhbmQgZnVybmlzaCBhIGJhc2lzIGZvciBvdXIgbXV0dWFsIGZyaWVuZHNoaXAuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['61.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbmQgeWV0IGl0CiAgICAgICAgICAgICAgICAgICAgZG9lcyBub3QgZXNjYXBlIG1lIHRoYXQgaXQgaXMgZGlmZmljdWx0IHRvIGRlc2NyaWJlIHlvdXIgY2hhcmFjdGVyIGluIGtlZXBpbmcKICAgICAgICAgICAgICAgICAgICB3aXRoIHlvdXIgZGVzZXJ0cyBhbmQgdGhhdCBpdCBpcyBtb3JlIGhhemFyZG91cyBzdGlsbCB0byBnaXZlIGFkdmljZSB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIGFkdmlzZXIgaXMgYm91bmQgdG8gbWFrZSBoaW1zZWxmIGFuc3dlcmFibGUgZm9yIGhpcyBhZHZpY2UgdG8gdGhlIG9uZSB3aG8KICAgICAgICAgICAgICAgICAgICBhY2NlcHRzIGl0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CbGFzcyBub3RlcyBhIHBhcmFsbGVsIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTg5IiB2YWxpZD0ieWVzIj5EZW0uIDE4LjE4OTwvYmlibD4sIGJ1dCBpdCBpcyByZW1vdGUuPC9ub3RlPiBJdCBpcyBteQogICAgICAgICAgICAgICAgICAgIGp1ZGdlbWVudCwgaG93ZXZlciwgdGhhdCwgd2hpbGUgaXQgYmVjb21lcyB0aGUgcmVjaXBpZW50cyBvZiBtZXJpdGVkIGV1bG9naWVzIHRvCiAgICAgICAgICAgICAgICAgICAgYmFmZmxlIGJ5IHRoZSBleGNlc3Mgb2YgdGhlaXIgcmVhbCB2aXJ0dWUgdGhlIGFiaWxpdHkgb2YgdGhvc2Ugd2hvIHByYWlzZSB0aGVtLAogICAgICAgICAgICAgICAgICAgIHlldCBpbiBteSBjb3Vuc2VsIEkgc2hhbGwgbm90IG1pc3MgdGhlIG1hcmssIGJlaW5nIHdlbGwgYXdhcmUgdGhhdCBubyBhZHZpY2UKICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSBpbm5vY2VudGx5IGNhcnJpZWQgb3V0IGlmIHByb2ZmZXJlZCBieSBtZW4gd2hvIGFyZSBzZW5zZWxlc3MgYW5kIHF1aXRlCiAgICAgICAgICAgICAgICAgICAgcnVpbmVkIGJ5IGluY29udGluZW5jZSwgbm90IGV2ZW4gaWYgdGhleSBhZHZpc2Ugc3VwcmVtZWx5IHdlbGwsIGJ1dCB0aGF0IG5vdAogICAgICAgICAgICAgICAgICAgIGV2ZW4gdGhlIGFkdmljZSB0aGF0IGlzIG9ubHkgbW9kZXJhdGVseSBwb25kZXJlZCBjYW4gYWx0b2dldGhlciBtaXNzIHRoZSBtYXJrIGlmCiAgICAgICAgICAgICAgICAgICAgdGVuZGVyZWQgYnkgbWVuIHdobyBjaG9vc2UgdG8gbGl2ZSBwdXJlIGFuZCBzZWxmIGRpc2NpcGxpbmVkIGxpdmVzLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjE4OSIgdmFsaWQ9InllcyI+RGVtLiAxOC4xODk8L2JpYmw+LCBidXQgaXQgaXMgcmVtb3RlLjwvdHJhbnNsYXRpb24+"
translation['61.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5DaGVyaXNoaW5nIHN1Y2ggaG9wZXMgSQogICAgICAgICAgICAgICAgICAgIGVudGVyIHVwb24gbXkgdGhlbWUuIEFsbCBtZW4gd291bGQgYWdyZWUgd2l0aCBtZSwgSSBiZWxpZXZlLCB0aGF0IGl0IGlzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHV0bW9zdCBpbXBvcnRhbmNlIGZvciB5b3VuZyBtZW4gb2YgeW91ciBhZ2UgdG8gcG9zc2VzcyBiZWF1dHkgaW4gcmVzcGVjdCBvZgogICAgICAgICAgICAgICAgICAgIHBlcnNvbiwgc2VsZi1kaXNjaXBsaW5lIGluIHJlc3BlY3Qgb2Ygc291bCwgYW5kIG1hbmxpbmVzcyBpbiByZXNwZWN0IG9mIGJvdGgsCiAgICAgICAgICAgICAgICAgICAgYW5kIGNvbnNpc3RlbnRseSB0byBwb3NzZXNzIGNoYXJtIGluIHJlc3BlY3Qgb2Ygc3BlZWNoLiBBcyBmb3IgdGhlc2UgdHdvIGtpbmRzCiAgICAgICAgICAgICAgICAgICAgb2YgcXVhbGl0aWVzLCBuYXR1cmFsIGFuZCBhY3F1aXJlZCwgRm9ydHVuZSBoYXMgc28gZ2VuZXJvdXNseSBibGVzc2VkIHlvdSB3aXRoCiAgICAgICAgICAgICAgICAgICAgbmF0dXJlJ3MgZ2lmdHMgdGhhdCB5b3UgY29uc2lzdGVudGx5IGVuam95IGRpc3RpbmN0aW9uIGFuZCBhZG1pcmF0aW9uLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIga2luZCB5b3UgYXJlIGJyaW5naW5nIHRvIHN1Y2ggcGVyZmVjdGlvbiB0aHJvdWdoIHlvdXIgb3duIGRpbGlnZW5jZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgbm8gZmFpci1taW5kZWQgcGVyc29uIGNvdWxkIGhhdmUgZmF1bHQgdG8gZmluZCB3aXRoIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['61.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgd2hhdCBvdWdodCBoZSB0byBwb3NzZXNzIHdobyBpcyB3b3J0aHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgaGlnaGVzdCBldWxvZ2llcz88bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlc2UgaWRlbnRpY2FsIHdvcmRzIGFyZQogICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJJc29jLiAxNi4zMCIgdmFsaWQ9InllcyI+SXNvYy4gMTYuMzA8L2JpYmw+Ljwvbm90ZT4gTXVzdCBoZSBub3QKICAgICAgICAgICAgICAgICAgICBtYW5pZmVzdGx5IGJlIGxvdmVkIGJ5IHRoZSBnb2RzIGFuZCBhbW9uZyBtZW4gYmUgYWRtaXJlZCwgZm9yIHNvbWUgcXVhbGl0aWVzIG9uCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBhY2NvdW50LCBmb3Igb3RoZXJzIGJlY2F1c2Ugb2YgaGlzIGdvb2QgZm9ydHVuZT8gTm93IHRoZSBsb25nZXIgbGlzdCBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgdmlydHVvdXMgcXVhbGl0aWVzIGl0IHdpbGwgcGVyaGFwcyBiZSBmaXR0aW5nIHRvIGRlc2NyaWJlIHN1bW1hcmlseSBsYXRlcgogICAgICAgICAgICAgICAgICAgIG9uLCBidXQgdGhlIHByYWlzZSBJIGhhdmUgdG8gdXR0ZXIgZm9yIGVhY2ggb2YgdGhlIGdpZnRzIG9mIEZvcnR1bmUgSSBzaGFsbCBub3cKICAgICAgICAgICAgICAgICAgICB0cnkgdG8gZGVjbGFyZSB3aXRoIHRydXRoZnVsbmVzcy4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gMTYuMzAiIHZhbGlkPSJ5ZXMiPklzb2MuIDE2LjMwPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['61.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBzaGFsbCBiZWdpbiBieSBwcmFpc2luZyB0aGF0IHF1YWxpdHkgb2YgeW91cnMgd2hpY2gKICAgICAgICAgICAgICAgICAgICBhbGwgd2hvIHNlZSB5b3Ugd2lsbCByZWNvZ25pemUgZmlyc3QsIHlvdXIgYmVhdXR5LCBhbmQgdGhlIGh1ZSBvZiB5b3VyIGZsZXNoLCBieQogICAgICAgICAgICAgICAgICAgIHZpcnR1ZSBvZiB3aGljaCB5b3VyIGxpbWJzIGFuZCB5b3VyIHdob2xlIGJvZHkgYXJlIHJlbmRlcmVkIHJlc3BsZW5kZW50LgogICAgICAgICAgICAgICAgICAgIFdvbmRlcmluZyB3aGF0IGZpdHRpbmcgY29tcGFyaXNvbiBmb3IgdGhpcyBJIG1heSBvZmZlciwgSSBmaW5kIG5vbmUsIGJ1dCBpdCBpcwogICAgICAgICAgICAgICAgICAgIG15IHByaXZpbGVnZSB0byByZXF1ZXN0IHRob3NlIHdobyByZWFkIHRoaXMgZXNzYXkgdG8gc2VlIHlvdSBhbmQgY29udGVtcGxhdGUKICAgICAgICAgICAgICAgICAgICB5b3UsIHNvIHRoYXQgSSBtYXkgYmUgcGFyZG9uZWQgZm9yIGRlY2xhcmluZyB0aGF0IEkgaGF2ZSBubyBzdWl0YWJsZSBzaW1pbGUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['61.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdG8gd2hhdCBjb3VsZCBhbnlvbmUgbGlrZW4gc29tZXRoaW5nCiAgICAgICAgICAgICAgICAgICAgbW9ydGFsIHdoaWNoIGFyb3VzZXMgaW1tb3J0YWwgbG9uZ2luZyBpbiB0aGUgYmVob2xkZXIsIHRoZSBzaWdodCBvZiB3aGljaCBkb2VzCiAgICAgICAgICAgICAgICAgICAgbm90IHNhdGlhdGUsIGFuZCB3aGVuIHJlbW92ZWQgZnJvbSBzaWdodCBsaW5nZXJzIGluIHRoZSBtZW1vcnksIHdoaWNoIGluIGh1bWFuCiAgICAgICAgICAgICAgICAgICAgZm9ybSBwb3NzZXNzZXMgYSBuYXR1cmFsIGJlYXV0eSB3b3J0aHkgb2YgdGhlIGdvZHMsIGxpa2UgYSBmbG93ZXIgaW4gaXRzCiAgICAgICAgICAgICAgICAgICAgY29tZWxpbmVzcywgYmV5b25kIHN1c3BpY2lvbiBvZiBpbXBlcmZlY3Rpb25zPyBGdXJ0aGVybW9yZSwgaXQgaXMgaW1wb3NzaWJsZSB0bwogICAgICAgICAgICAgICAgICAgIGltcHV0ZSB0byB5b3VyIHBlcnNvbiBldmVuIHRob3NlIGJsZW1pc2hlcyB3aGljaCBpbiB0aGUgcGFzdCBoYXZlIG1hcnJlZCBtYW55CiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciB3aG8gaGFzIHNoYXJlZCBpbiBiZWF1dHkuIDwvdHJhbnNsYXRpb24+"
translation['61.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCB1bmdhaW5saW5lc3Mgb2YgbWllbiB0aGV5IGhhdmUgcnVpbmVkIGFsbCB0aGVpciBuYXR1cmFsIGNvbWVsaW5lc3Mgb3IKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIHNvbWUgdW5mb3J0dW5hdGUgbWFubmVyaXNtIGhhdmUgaW52b2x2ZWQgdGhlaXIgbmF0dXJhbCBhdHRyYWN0aW9ucyBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIGRpc2Zhdm9yLiBCeSBub25lIG9mIHRoZXNlIGNvdWxkIHdlIGZpbmQgeW91ciBwZXJzb24gYWZmbGljdGVkLCBmb3IKICAgICAgICAgICAgICAgICAgICB3aGljaGV2ZXIgb2YgdGhlIGdvZHMgaXQgd2FzIHRoYXQgdG9vayBmb3JldGhvdWdodCBmb3IgeW91ciBwZXJzb24gaGFzIHNvCiAgICAgICAgICAgICAgICAgICAgZGlsaWdlbnRseSBndWFyZGVkIHlvdSBhZ2FpbnN0IGFsbCBzdWNoIG1pc2hhcHMgYXMgdG8gbGVhdmUgbm90aGluZyBjYWxsaW5nIGZvcgogICAgICAgICAgICAgICAgICAgIGNyaXRpY2lzbSBhbmQgdG8gcmVuZGVyIHlvdXIgZ2VuZXJhbCBhcHBlYXJhbmNlIHN1cGVyYi4gPC90cmFuc2xhdGlvbj4="
translation['61.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgc2luY2UgdGhlIGZhY2UgaXMgdGhlIG1vc3QgY29uc3BpY3VvdXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGFydHMgdGhhdCBhcmUgc2VlbiwgYW5kIG9mIHRoZSBmYWNlIGl0c2VsZiB0aGUgZXllcywgZXZlbiBtb3JlIGluIHRoZXNlIGRpZCB0aGUKICAgICAgICAgICAgICAgICAgICBnb2QgcmV2ZWFsIHRoZSBnb29kd2lsbCB0aGF0IGhlIGhhZCB0b3dhcmQgeW91LiBGb3IgaGUgbm90IG9ubHkgZnVybmlzaGVkIHlvdQogICAgICAgICAgICAgICAgICAgIHdpdGggZXllcyBhZGVxdWF0ZSB0byBwZXJmb3JtIHRoZSBuZWNlc3NhcnkgZnVuY3Rpb25zIGJ1dCwgYWx0aG91Z2ggdGhlIHZpcnR1ZQogICAgICAgICAgICAgICAgICAgIG9mIHNvbWUgbWVuIGlzIG5vdCByZWNvZ25pemVkIGV2ZW4gZnJvbSB0aGVpciBhY3Rpb25zLCBvZiB5b3VyIGNoYXJhY3RlciBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBwbGFjZWQgaW4gYSBjbGVhciBsaWdodCB0aGUgZmluZSBxdWFsaXRpZXMgdGhyb3VnaCB0aGUgZXZpZGVuY2Ugb2YgeW91ciBnbGFuY2UsCiAgICAgICAgICAgICAgICAgICAgZGlzcGxheWluZyBpdCBhcyBnZW50bGUgYW5kIGtpbmQgdG93YXJkIHRob3NlIHdobyBsb29rIGF0IHlvdSwgZGlnbmlmaWVkIGFuZAogICAgICAgICAgICAgICAgICAgIHNlcmlvdXMgdG93YXJkIHRob3NlIHdobyBjb252ZXJzZSB3aXRoIHlvdSwgbWFubHkgYW5kIHByb3BlciB0byBhbGwgbWVuLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['61.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kIGhlcmUgaXMKICAgICAgICAgICAgICAgICAgICBhIG1hdHRlciB0aGF0IG1heSBiZSBwYXJ0aWN1bGFybHkgc3VycHJpc2luZy4gRm9yIHdoaWxlIG90aGVyIG1lbiBhcmUgYXNzdW1lZCB0bwogICAgICAgICAgICAgICAgICAgIGJlIG1lYW4tc3Bpcml0ZWQgYmVjYXVzZSB0aGV5IGFyZSBnZW50bGUgYW5kIHRvIGJlIGFycm9nYW50IGJlY2F1c2UgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBkaWduaWZpZWQsIGFuZCBhcmUgdGhvdWdodCBvdmVyYmVhcmluZyBiZWNhdXNlIHRoZXkgYXJlIG1hbmx5LCBhbmQgc3R1cGlkCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGV5IGtlZXAgcXVpZXQsIEZvcnR1bmUgaW4geW91ciBjYXNlIGhhcyB0YWtlbiBxdWFsaXRpZXMgc28gbXV0dWFsbHkKICAgICAgICAgICAgICAgICAgICBjb250cmFkaWN0b3J5IGFuZCBjYXVzZWQgdGhlbSBhbGwgdG8gYmUgcHJvcGVybHkgaGFybW9uaXplZCwgYXMgaWYgZnVsZmlsbGluZyBhCiAgICAgICAgICAgICAgICAgICAgcHJheWVyIG9yIHdpc2hpbmcgdG8gc2V0IGFuIGV4YW1wbGUgZm9yIG90aGVycywgYnV0IG5vdCBmcmFtaW5nIGEgbWVyZSBtb3J0YWwKICAgICAgICAgICAgICAgICAgICBuYXR1cmUsIGFzIHdhcyBoZXIgdXN1YWwgd2F5LiA8L3RyYW5zbGF0aW9uPg=="
translation['61.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGlmIGl0IHdlcmUgcG9zc2libGUgdG8gZG8ganVzdGljZSB0byBzdWNoIGJlYXV0eSBhcwogICAgICAgICAgICAgICAgICAgIHlvdXJzIGluIHdvcmRzLCBvciBpZiB0aGlzIHdlcmUgdGhlIG9ubHkgcXVhbGl0eSBvZiB5b3VycyB3b3J0aHkgb2YgcHJhaXNlLCB3ZQogICAgICAgICAgICAgICAgICAgIHNob3VsZCB0aGluayBpdCBuZWNlc3NhcnkgdG8gb21pdCBwcmFpc2Ugb2Ygbm9uZSBvZiB5b3VyIGdvb2QgcG9pbnRzOyBidXQgYXMKICAgICAgICAgICAgICAgICAgICB0aGluZ3MgYXJlLCBJIGFtIGFmcmFpZCB0aGF0IHdlIG1heSBmaW5kIG91ciBiZWFyZXJzIHJlZnVzaW5nIHRvIGhlYXIgcHJhaXNlIG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBvdGhlciBtZXJpdHMgYW5kIHRoYXQgd2UgbWF5IGRlZmVhdCBvdXJzZWx2ZXMgYnkgaGFycGluZyBvbiB0aGlzIHRoZW1lLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['61.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaG93IGNvdWxkIGFueW9uZSBvdmVyZG8gdGhlIHZlcmJhbAogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uIG9mIHlvdXIgYXBwZWFyYW5jZSwgc2luY2Ugbm90IGV2ZW4gd29ya3Mgb2YgYXJ0IGV4ZWN1dGVkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHNraWxsIG9mIHRoZSBiZXN0IG1hc3RlcnMgY291bGQgZG8gbW9yZSB0aGFuIGp1c3RpY2UgdG8gaXQ/IE5vciBpcyB0aGlzCiAgICAgICAgICAgICAgICAgICAgYXN0b25pc2hpbmc7IGZvciB3b3JrcyBvZiBhcnQgaGF2ZSBhIG1vdGlvbmxlc3MgYXNwZWN0LCBzbyB0aGF0IGl0IGlzIHVuY2VydGFpbgogICAgICAgICAgICAgICAgICAgIHdoYXQgdGhleSB3b3VsZCBsb29rIGxpa2UgaWYgdGhleSBwb3NzZXNzZWQgbGlmZSwgYnV0IHlvdXIgcGVyc29uYWxpdHkgZW5oYW5jZXMKICAgICAgICAgICAgICAgICAgICBpbiB5b3VyIGV2ZXJ5IGFjdGlvbiB0aGUgc3VwZXJiIGNvbWVsaW5lc3Mgb2YgeW91ciBib2R5LiBPbmx5IHRoaXMgbXVjaCwKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIEkgaGF2ZSB0byBzYXkgaW4gcHJhaXNlIG9mIHlvdXIgYmVhdXR5LCBvbWl0dGluZyBhIGdyZWF0IGRlYWwuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['61.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXMgZm9yCiAgICAgICAgICAgICAgICAgICAgZGlzY3JlZXRuZXNzIG9mIGNvbmR1Y3QsIGl0IGlzIG15IHByaXZpbGVnZSB0byBwYXNzIHRoZSBmaW5lc3Qgb2YgY29tcGxpbWVudHMsCiAgICAgICAgICAgICAgICAgICAgbmFtZWx5LCB0aGF0IHRob3VnaCBzdWNoIHlvdXRoZnVsbmVzcyByZWFkaWx5IGludml0ZXMgc2NhbmRhbCwgaXQgaGFzIGJlZW4geW91cgogICAgICAgICAgICAgICAgICAgIGxvdCB0byBiZSBwcmFpc2VkIGluc3RlYWQuIEZvciBzbyBmYXIgZnJvbSBvdmVyc3RlcHBpbmcgdGhlIG1hcmssIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgY2hvc2VuIHRvIGxpdmUgbW9yZSBwcnVkZW50bHkgdGhhbiBpcyBleHBlY3RlZCBvZiB5b3VyIHllYXJzLiBPZiB0aGlzIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgY29udmluY2luZyBldmlkZW5jZSBpcyB5b3VyIGRlcG9ydG1lbnQgdG93YXJkIG90aGVyczsgZm9yIGFsdGhvdWdoIG1hbnkgbWFrZQogICAgICAgICAgICAgICAgICAgIHlvdXIgYWNxdWFpbnRhbmNlLCBhbmQgcmV2ZWFsIGNoYXJhY3RlcnMgb2YgZXZlcnkga2luZCBhbmQgc29ydCwgYW5kIGFsbCBzZWVrIHRvCiAgICAgICAgICAgICAgICAgICAgZW50aWNlIHlvdSBpbnRvIGludGltYWNpZXMsIHlvdSBoYXZlIHNvIG1hbmFnZWQgc3VjaCBwZW9wbGUgdGhhdCBhbGwgYXJlIGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICB0byBmZWVsIGZyaWVuZHNoaXAgZm9yIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['61.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIGFuIGluZGV4CiAgICAgICAgICAgICAgICAgICAgb2YgdGhvc2Ugd2hvc2UgY2hvaWNlIGl0IGlzIHRvIGxpdmUgaW4gdGhlIGVzdGVlbSBhbmQgYWZmZWN0aW9uIG9mIG1lbi4gQW5kIHlldAogICAgICAgICAgICAgICAgICAgIHNvbWUgbWVuIGluIHRoZSBwYXN0IGhhdmUgYmVlbiB3ZWxsIHRob3VnaHQgb2Ygd2hvIGhhdmUgYWR2aXNlZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgd2VsY29taW5nIHRoZSBjb21wYW55IG9mIGFsbCBjb21lcnMsIGFzIGlzIGFsc28gdHJ1ZSBvZiBzb21lIHdobyBoYXZlIHRha2VuCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYWR2aWNlLiBGb3IgdGhleSBjbGFpbSB0aGF0IGl0IGlzIG5lY2Vzc2FyeSBlaXRoZXIgdG8gaHVtb3IgbG93LW1pbmRlZAogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBhbmQgc28gYmUgbWFsaWduZWQgYW1vbmcgdGhlIG11bHRpdHVkZSwgb3IgZWxzZSB0byBiZSBjb25zdGFudGx5IG9uIGd1YXJkCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBzdWNoIHJlcHJvYWNoZXMgYW5kIHNvIGluY3VyIHRoZSBkaXNsaWtlIG9mIHN1Y2ggYWNxdWFpbnRhbmNlcwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['61.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5QZXJzb25hbGx5IEkgdGhpbmsgeW91IGRlc2VydmUgdG8KICAgICAgICAgICAgICAgICAgICBiZSBldWxvZ2l6ZWQgYWxsIHRoZSBtb3JlIGZvciB0aGlzIHJlYXNvbiwgdGhhdCwgd2hpbGUgdGhlIG90aGVyIGxhZHMgdGhpbmsgaXQKICAgICAgICAgICAgICAgICAgICBvbmUgb2YgdGhlIGltcG9zc2libGUgdGhpbmdzIHRvIHBsZWFzZSBtZW4gb2YgZXZlcnkgdHlwZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Qmxhc3MgY2FsbHMgYXR0ZW50aW9uIHRvIHRoaXMgc2FtZSB0aG91Z2h0IGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gTC4gMy4yNyIgdmFsaWQ9InllcyI+RGVtLiBMLiAzLjI3PC9iaWJsPiwgYnV0IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRoZ24uIDIzIj5UaGVvZy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIzLTI2PC9iaWJsPiBzaG93cyBpdCB0byBiZSBhbiBhbmNpZW50IGNvbW1vbnBsYWNlLjwvbm90ZT4geW91IGhhdmUgc28KICAgICAgICAgICAgICAgICAgICBzdXJwYXNzZWQgdGhlc2UgYXMgdG8gaGF2ZSByaXNlbiBzdXBlcmlvciB0byBhbGwgdGhlIGRpZmZpY3VsdCBhbmQgdHJvdWJsZXNvbWUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUsIGFsbG93aW5nIHRoZSBvdGhlcnMgbm8gcmVhc29uIGV2ZW4gZm9yIHN1c3BlY3RpbmcgaW1tb3JhbCByZWxhdGlvbnMgd2l0aAogICAgICAgICAgICAgICAgICAgIGFueSBhbmQgb3ZlcmNvbWluZyB5b3VyIGFubm95YW5jZSB3aXRoIHRoZW0gYnkgdGhlIGFkYXB0YWJpbGl0eSBvZiB5b3VyIG1hbm5lcnMuCiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gTC4gMy4yNyIgdmFsaWQ9InllcyI+RGVtLiBMLiAzLjI3PC9iaWJsPiwgYnV0IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRoZ24uIDIzIj5UaGVvZy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIzLTI2PC9iaWJsPiBzaG93cyBpdCB0byBiZSBhbiBhbmNpZW50IGNvbW1vbnBsYWNlLjwvdHJhbnNsYXRpb24+"
translation['61.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93CiAgICAgICAgICAgICAgICAgICAgdG91Y2hpbmcgeW91ciBhZG1pcmVycywgaWYgaXQgaXMgcmlnaHQgdG8gc3BlYWsgYWxzbyBvZiB0aGVzZSwgeW91IHNlZW0gdG8gbWUgdG8KICAgICAgICAgICAgICAgICAgICBkZXBvcnQgeW91cnNlbGYgc28gYWRtaXJhYmx5IGFuZCBzZW5zaWJseSB0b3dhcmQgdGhlbSwgdGhhdCwgdGhvdWdoIG1vc3Qgb2YgdGhlbQogICAgICAgICAgICAgICAgICAgIGNhbm5vdCBiZSBwYXRpZW50IGV2ZW4gd2l0aCB0aGUgb2JqZWN0IG9mIHRoZWlyIHByZWZlcmVuY2UsIHlvdSBzdWNjZWVkIGluCiAgICAgICAgICAgICAgICAgICAgcGxlYXNpbmcgdGhlbSBhbGwgZXhjZWVkaW5nbHkuIEFuZCB0aGlzIGlzIGEgbW9zdCB1bm1pc3Rha2FibGUgcHJvb2Ygb2YgeW91cgogICAgICAgICAgICAgICAgICAgIGdvb2RuZXNzOyBmb3Igbm90IG9uZSBmaW5kcyBoaW1zZWxmIGRpc2FwcG9pbnRlZCBvZiBmYXZvcnMgZnJvbSB5b3Ugd2hpY2ggaXQgaXMKICAgICAgICAgICAgICAgICAgICBqdXN0IGFuZCBmYWlyIHRvIGFzaywgYnV0IG5vIG9uZSBpcyBwZXJtaXR0ZWQgZXZlbiB0byBob3BlIGZvciBzdWNoIGxpYmVydGllcyBhcwogICAgICAgICAgICAgICAgICAgIGxlYWQgdG8gc2hhbWUuIFNvIGdyZWF0IGlzIHRoZSBsYXRpdHVkZSB5b3VyIGRpc2NyZWV0bmVzcyBwZXJtaXRzIHRvIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhlIGJlc3QgaW50ZW50aW9uczsgc28gZ3JlYXQgaXMgdGhlIGRpc2NvdXJhZ2VtZW50IGl0IHByZXNlbnRzIHRvIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIHdvdWxkIGZsaW5nIG9mZiByZXN0cmFpbnQuIDwvdHJhbnNsYXRpb24+"
translation['61.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwKICAgICAgICAgICAgICAgICAgICB3aGlsZSB0aGUgbWFqb3JpdHkgb2YgbWVuLCB3aGVuIHlvdW5nLCBzZWVrIGEgcmVwdXRhdGlvbiBmb3IgcHJ1ZGVuY2UgYnkga2VlcGluZwogICAgICAgICAgICAgICAgICAgIHNpbGVudCwgeW91IGFyZSBzbyBzdXBlcmlvciB0byB0aGVtIGluIG5hdHVyYWwgZ2lmdHMgdGhhdCB5b3UgZ2FpbiBtZW4ncyBnb29kCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiBvZiB5b3Ugbm90IGxlc3MgYnkgeW91ciBzcGVlY2ggYW5kIGRlbWVhbm9yIGluIGNhc3VhbCBjb21wYW55IHRoYW4gYnkKICAgICAgICAgICAgICAgICAgICBhbGwgeW91ciBvdGhlciBtZXJpdHM7IHNvIGdyZWF0IGlzIHRoZSBncmFjZSBhbmQgY2hhcm0gb2YgeW91ciB3b3JkcyB3aGV0aGVyIGluCiAgICAgICAgICAgICAgICAgICAgamVzdCBvciBpbiBlYXJuZXN0LiBGb3IgeW91IGFyZSBpbmdlbnVvdXMgd2l0aG91dCBkb2luZyB3cm9uZywgY2xldmVyIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBiZWluZyBtYWxpY2lvdXMsIGtpbmRseSB3aXRob3V0IHNhY3JpZmljZSBvZiBpbmRlcGVuZGVuY2UsIGFuZCwgdGFraW5nIGFsbCBpbgogICAgICAgICAgICAgICAgICAgIGFsbCwgbGlrZSBhIGNoaWxkIG9mIFZpcnR1ZSBzaXJlZCBieSBMb3ZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIHRoZSBsYW5ndWFnZSBvZiBwb2V0cnkgYXMgcHJlZGljdGVkIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjEuMiIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNjEuMjwvYmlibD4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjEuMiIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNjEuMjwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['61.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VHVybmluZyBub3cgdG8KICAgICAgICAgICAgICAgICAgICBjb3VyYWdl4oCUZm9yIGl0IHdpbGwgbm90IGRvIHRvIG9taXQgdGhpcyBlaXRoZXIsIG5vdCBiZWNhdXNlIEkgd291bGQKICAgICAgICAgICAgICAgICAgICBpbnRpbWF0ZSB0aGF0IHlvdXIgY2hhcmFjdGVyIGRvZXMgbm90IHN0aWxsIGFkbWl0IG9mIGdyZWF0IGRldmVsb3BtZW50IG5vciB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGZ1dHVyZSB3aWxsIGZhaWwgdG8gZnVybmlzaCByaWNoZXIgbWF0ZXJpYWwgZm9yIGV1bG9neSB0byB0aG9zZSB3aG8gd2lzaCB0bwogICAgICAgICAgICAgICAgICAgIHByYWlzZSB5b3UsIGJ1dCByYXRoZXIgdGhhdCB3b3JkcyBvZiBwcmFpc2UgbWVhbiBtb3N0IGF0IHlvdXIgYWdlIHdoZW4gdG8gZG8gbm8KICAgICAgICAgICAgICAgICAgICB3cm9uZyBpcyB0aGUgYmVzdCBob3BlIGZvciBvdGhlciBsYWRz4oCUeW91ciBjb3VyYWdlIGEgbWFuIG1pZ2h0IGV4dG9sCiAgICAgICAgICAgICAgICAgICAgb24gbWFueSBvdGhlciBncm91bmRzIGJ1dCBlc3BlY2lhbGx5IGJlY2F1c2Ugb2YgeW91ciB0cmFpbmluZyBmb3IgYXRobGV0aWMKICAgICAgICAgICAgICAgICAgICBzcG9ydHMsIG9mIHdoaWNoIHlvdSBoYXZlIGEgbXVsdGl0dWRlIG9mIHdpdG5lc3Nlcy4gPC90cmFuc2xhdGlvbj4="
translation['61.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgcGVyaGFwcyBpdCBpcyBpbiBwbGFjZSBmaXJzdCB0byBzYXkgdGhhdCB5b3UgaGF2ZSBkb25lCiAgICAgICAgICAgICAgICAgICAgd2VsbCBpbiBjaG9vc2luZyB0aGlzIGtpbmQgb2YgY29udGVzdC4gRm9yIHRvIGp1ZGdlIHJpZ2h0bHkgd2hlbiBvbmUgaXMgeW91bmcKICAgICAgICAgICAgICAgICAgICB3aGF0IGxpbmUgb2YgYWN0aW9uIG9uZSBzaG91bGQgcHVyc3VlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJsYXNzCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVzIGEgc2ltaWxhcml0eSBpbiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA2MC4xNyIgdmFsaWQ9InllcyI+RGVtLiA2MC4xNzwvYmlibD47IG5vdAogICAgICAgICAgICAgICAgICAgICAgICBpbXByZXNzaXZlLjwvbm90ZT4gaXMgdGhlIHRva2VuIG9mIGFuIGhvbmVzdCBzb3VsIGFuZCBvZiBzb3VuZCBqdWRnZW1lbnQKICAgICAgICAgICAgICAgICAgICBhbGlrZSwgYW5kIG9uIG5laXRoZXIgZ3JvdW5kIHdvdWxkIGl0IGJlIHJpZ2h0IHRvIG9taXQgcHJhaXNlIG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hvaWNlLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjAuMTciIHZhbGlkPSJ5ZXMiPkRlbS4gNjAuMTc8L2JpYmw+OyBub3QKICAgICAgICAgICAgICAgICAgICAgICAgaW1wcmVzc2l2ZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91LCB0aGVyZWZvcmUsIGJlaW5nIHdlbGwgYXdhcmUgdGhhdAogICAgICAgICAgICAgICAgICAgIHNsYXZlcyBhbmQgYWxpZW5zIHNoYXJlIGluIHRoZSBvdGhlciBzcG9ydHMgYnV0IHRoYXQgZGlzbW91bnRpbmcgaXMgb3BlbiBvbmx5IHRvCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnMgYW5kIHRoYXQgdGhlIGJlc3QgbWVuIGFzcGlyZSBpdCwgaGF2ZSBlYWdlcmx5IGFwcGxpZWQgeW91cnNlbGYgdG8gdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzcG9ydC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGNvbnRlc3RhbnRzIHdlcmUgY2FsbGVkCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnGFwb2JhdGVzLOKAnSBkZXN1bHRvcmVzLCBpLmUuCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnGRpc21vdW50ZXJzLuKAnSBUaGUgZHJpdmVycyBzZWVtIHRvIGhhdmUgZGlzbW91bnRlZCBhdAogICAgICAgICAgICAgICAgICAgICAgICB0aW1lcyBhbmQgcmFjZWQgd2l0aCB0aGUgdGVhbXMuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gNy43MyI+RGlvbi4gSGFsaWNhcm4uIFJvbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbnRpcS4gNy43MzwvYmlibD47IEUuIE5vcm1hbiBHYXJkaW5lciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R3JlZWsgQXRobGV0aWMgU3BvcnRzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmVzdGl2YWxzPC90aXRsZT4sIHBwLiAyMzctMjM5Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuNzMiPkRpb24uIEhhbGljYXJuLiBSb21hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQW50aXEuIDcuNzM8L2JpYmw+OyBFLiBOb3JtYW4gR2FyZGluZXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkdyZWVrIEF0aGxldGljIFNwb3J0cyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZlc3RpdmFsczwvdGl0bGU+LCBwcC4gMjM3LTIzOS48L3RyYW5zbGF0aW9uPg=="
translation['61.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5EaXNjZXJuaW5nLCBtb3Jlb3ZlciwgdGhhdCB0aG9zZSB3aG8gdHJhaW4gZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvb3RyYWNlcyBhZGQgbm90aGluZyB0byB0aGVpciBjb3VyYWdlIG5vciB0byB0aGVpciBtb3JhbGUgZWl0aGVyLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBwcmFjdGljZSBib3hpbmcgYW5kIHRoZSBsaWtlIHJ1aW4gdGhlaXIgbWluZHMgYXMgd2VsbCBhcyB0aGVpciBib2RpZXMsCiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgc2luZ2xlZCBvdXQgdGhlIG5vYmxlc3QgYW5kIGdyYW5kZXN0IG9mIGNvbXBldGl0aXZlIGV4ZXJjaXNlcyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgb25lIG1vc3QgaW4gaGFybW9ueSB3aXRoIHlvdXIgbmF0dXJhbCBnaWZ0cywgb25lIHdoaWNoIGFwcHJveGltYXRlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICByZWFsaXRpZXMgb2Ygd2FyZmFyZSB0aHJvdWdoIHRoZSBoYWJpdHVhdGlvbiB0byBtYXJ0aWFsIHdlYXBvbnMgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGxhYm9yaW91cyBlZmZvcnQgb2YgcnVubmluZywgaW4gdGhlIG1hZ25pZmljZW5jZSBhbmQgbWFqZXN0eSBvZiB0aGUgZXF1aXBtZW50CiAgICAgICAgICAgICAgICAgICAgc2ltdWxhdGVzIHRoZSBtaWdodCBvZiB0aGUgZ29kcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2VydGFpbiBnb2RzCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgcmVwcmVzZW50ZWQgYXMgdXNpbmcgY2hhcmlvdHMsIHBhcnRpY3VsYXJseSBBcmVzIGFuZCBQb3NlaWRvbi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['61.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5wcmVzZW50cyB0aGUgbnVtYmVyIGFuZCB0aGUgZ3JlYXRlc3QgdmFyaWV0eQogICAgICAgICAgICAgICAgICAgIG9mIGZlYXR1cmVzIGFuZCBoYXMgYmVlbiBkZWVtZWQgd29ydGh5IG9mIHRoZSBtb3N0IHZhbHVhYmxlIHByaXplcy4gRm9yLCBhcGFydAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhvc2Ugb2ZmZXJlZCwgZ2V0dGluZyB0aGUgZHJpbGwgYW5kIHByYWN0aWNlIGluIHN1Y2ggZXhlcmNpc2VzIGl0c2VsZiB3aWxsCiAgICAgICAgICAgICAgICAgICAgcG9zc2VzcyBnbGFtb3IgYXMgbm8gcGFsdHJ5IHByaXplIGluIHRoZSBleWVzIG9mIHRob3NlIHdobyBhcmUgZXZlbiBtb2RlcmF0ZWx5CiAgICAgICAgICAgICAgICAgICAgYW1iaXRpb3VzIGZvciBleGNlbGxlbmNlLiBUaGUgYmVzdCBldmlkZW5jZSBmb3IgdGhpcyBtYXkgYmUgZm91bmQgaW4gdGhlIHBvZXRyeQogICAgICAgICAgICAgICAgICAgIG9mIEhvbWVyLCBpbiB3aGljaCBoZSByZXByZXNlbnRzIHRoZSBHcmVla3MgYW5kIGJhcmJhcmlhbnMgd2FycmluZyBhZ2FpbnN0IG9uZQogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgd2l0aCB0aGlzIGVxdWlwbWVudC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SG9tZXJpYyB3YXJyaW9ycwogICAgICAgICAgICAgICAgICAgICAgICBlbXBsb3llZCBjaGFyaW90ZWVycywgZGFzaGVkIHJlY2tsZXNzbHkgYW1vbmcgdGhlIGZvZSB0byBzcHJlYWQgZGlzbWF5LCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSBkaXNtb3VudGVkIHRvIGVuZ2FnZSBpbiBzaW5nbGUgY29tYmF0OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxNi43MTIiIHZhbGlkPSJ5ZXMiPkhvbS4gSWwuIDE2LjcxMi04Njc8L2JpYmw+Ljwvbm90ZT4gSSBtYXkgYWRkIHRoYXQgZXZlbiBub3cgaXQgaXMKICAgICAgICAgICAgICAgICAgICBjdXN0b21hcnkgdG8gZW1wbG95IGl0IGluIGNvbnRlc3RzIGluIEdyZWVrIGNpdGllcywgYW5kIG5vdCBpbiB0aGUgbWVhbmVzdAogICAgICAgICAgICAgICAgICAgIGNpdGllcyBidXQgaW4gdGhlIGdyZWF0ZXN0LjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDE2LjcxMiIgdmFsaWQ9InllcyI+SG9tLiBJbC4gMTYuNzEyLTg2NzwvYmlibD4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkF0aGVucyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgVGhlYmVzLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['61.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U28gYWRtaXJhYmxlIGlzCiAgICAgICAgICAgICAgICAgICAgeW91ciBjaG9pY2Ugb2Ygc3BvcnQgYW5kIHNvIGFwcHJvdmVkIGFtb25nIGFsbCBtZW4uIEJlbGlldmluZyBhbHNvLCBhcyB5b3UgZG8sCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpdCBpcyBmdXRpbGUgdG8gZGVzaXJlIHRoZSB0aGluZ3MgbW9zdCB3b3J0aCB3aGlsZSwgb3IgeWV0IHRvIGJlIHBoeXNpY2FsbHkKICAgICAgICAgICAgICAgICAgICBlbmRvd2VkIGZvciBhbGwgc29ydHMgb2YgZmVhdHMsIHVubGVzcyB0aGUgc291bCBoYXMgYmVlbiBwcmVwYXJlZCBmb3IgYW4KICAgICAgICAgICAgICAgICAgICBhbWJpdGlvdXMgY2FyZWVyLCBhdCB0aGUgdmVyeSBvdXRzZXQgeW91IGV4aGliaXRlZCBkaWxpZ2VuY2UgaW4gdGhlIHRyYWluaW5nCiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kcywgbm9yIGluIHRoZSByZWFsIHRlc3RzIHdlcmUgeW91IGRpc2FwcG9pbnRpbmcsIGJ1dCB5b3UgZ2F2ZQogICAgICAgICAgICAgICAgICAgIGV4dHJhb3JkaW5hcnkgcHJvb2Ygb2YgdGhlIGRpc3RpbmN0aW9uIG9mIHlvdXIgbmF0dXJhbCBnaWZ0cyBhbmQgcGFydGljdWxhcmx5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvdXJhZ2Ugb2YgeW91ciBzb3VsIGluIHRoZSBnYW1lcy4gPC90cmFuc2xhdGlvbj4="
translation['61.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5JCiAgICAgICAgICAgICAgICAgICAgaGVzaXRhdGUgdG8gYmVnaW4gdHJlYXRpbmcgdGhpcyB0b3BpYyBmb3IgZmVhciB3b3JkcyBtYXkgZmFpbCBtZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiBvZiB3aGF0IHRvb2sgcGxhY2Ugb24gdGhhdCBvY2Nhc2lvbiwgYnV0IG5ldmVydGhlbGVzcyBJIHNoYWxsIG5vdAogICAgICAgICAgICAgICAgICAgIHBhc3MgaXQgb3ZlcjsgZm9yIGl0IGlzIGEgc2hhbWUgdG8gcmVmdXNlIGEgcmVwb3J0IG9mIHdoYXQgZW50aHJhbGxzIHVzIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWN0YXRvcnMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldlcmUgSSB0byBkZXNjcmliZSBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgY29udGVzdHMgYW4gdW5zZWVtbHkgbGVuZ3RoIHdvdWxkIHBlcmhhcHMgYWNjcnVlIHRvIHRoaXMgZXNzYXksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJsYXNzIG5vdGVzIHRoZSBleHByZXNzaW9uIG9mIGEgc2ltaWxhciBmZWFyIGluIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYwLjYiIHZhbGlkPSJ5ZXMiPkRlbS4gNjAuNjwvYmlibD4gYW5kIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Iklzb2MuIDQuNjYiIHZhbGlkPSJ5ZXMiPklzb2MuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0LjY2PC9iaWJsPiwgYnV0IHN1cmVseSBpdCBpcyBhIGNvbW1vbnBsYWNlLjwvbm90ZT4gYnV0IGJ5IHJlY2FsbGluZyBhCiAgICAgICAgICAgICAgICAgICAgc2luZ2xlIGV4YW1wbGUgaW4gd2hpY2ggeW91IGVzcGVjaWFsbHkgZGlzdGluZ3Vpc2hlZCB5b3Vyc2VsZiBJIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgZGVtb25zdHJhdGUgdGhlIHNhbWUgdHJ1dGggYW5kIGJlIGZvdW5kIHRvIG1ha2UgYSBtb3JlIHJlYXNvbmFibGUgdXNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHBhdGllbmNlIG9mIG15IGhlYXJlcnMuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjAuNiIgdmFsaWQ9InllcyI+RGVtLiA2MC42PC9iaWJsPiBhbmQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gNC42NiIgdmFsaWQ9InllcyI+SXNvYy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQuNjY8L2JpYmw+LCBidXQgc3VyZWx5IGl0IGlzIGEgY29tbW9ucGxhY2UuPC90cmFuc2xhdGlvbj4="
translation['61.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSB0ZWFtcyBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIHN0YXJ0ZWQgYW5kIHNvbWUgaGFkIGxlYXBlZCB0byB0aGUgZm9yZSBhbmQgc29tZSB3ZXJlIGJlaW5nIHJlaW5lZCBpbiwgeW91LAogICAgICAgICAgICAgICAgICAgIHByZXZhaWxpbmcgb3ZlciBib3RoLCBmaXJzdCBvbmUgYW5kIHRoZW4gdGhlIG90aGVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CbGFzcyBub3RlcyB0aGUgc2FtZSBwaHJhc2UgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gNC43MiIgdmFsaWQ9InllcyI+SXNvYy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQuNzI8L2JpYmw+OyBpdCBtYXkgaGF2ZSBiZWVuIHRlY2huaWNhbCBpbiB0aGUgbGFuZ3VhZ2Ugb2YgYW5jaWVudAogICAgICAgICAgICAgICAgICAgICAgICBzcG9ydC48L25vdGU+IGluIHByb3BlciBzdHlsZSwgc2VpemVkIHRoZSB2aWN0b3J5LCB3aW5uaW5nIHRoYXQgZW52aWVkIGNyb3duCiAgICAgICAgICAgICAgICAgICAgaW4gc3VjaCBmYXNoaW9uIHRoYXQsIGdsb3Jpb3VzIGFzIGl0IHdhcyB0byB3aW4gaXQsIGl0IHNlZW1lZCB0aGUgbW9yZSBnbG9yaW91cwogICAgICAgICAgICAgICAgICAgIGFuZCBhc3RvdW5kaW5nIHRoYXQgeW91IGNhbWUgb2ZmIHNhZmVseS4gRm9yIHdoZW4gdGhlIGNoYXJpb3Qgb2YgeW91ciBvcHBvbmVudHMKICAgICAgICAgICAgICAgICAgICB3YXMgYmVhcmluZyBkb3duIHVwb24geW91IGhlYWQtb24gYW5kIGFsbCB0aG91Z2h0IHRoZSBtb21lbnR1bSBvZiB5b3VyIGhvcnNlcwogICAgICAgICAgICAgICAgICAgIGJleW9uZCBjaGVja2luZywgeW91LCBhd2FyZSB0aGF0IHNvbWUgZHJpdmVycywgdGhvdWdoIG5vIGRhbmdlciBzaG91bGQgdGhyZWF0ZW4sCiAgICAgICAgICAgICAgICAgICAgYmVjb21lIG92ZXJhbnhpb3VzIGZvciB0aGVpciBvd24gc2FmZXR5LCBub3Qgb25seSBkaWQgbm90IGxvc2UgeW91ciBoZWFkIG9yIHlvdXIKICAgICAgICAgICAgICAgICAgICBuZXJ2ZSwgYnV0IGJ5IHlvdXIgY291cmFnZSBnb3QgY29udHJvbCBvZiB0aGUgaW1wZXR1cyBvZiB5b3VyIHRlYW0gYW5kIGJ5IHlvdXIKICAgICAgICAgICAgICAgICAgICBzcGVlZCBwYXNzZWQgZXZlbiB0aG9zZSBjb250ZW5kZXJzIHdob3NlIGx1Y2sgaGFkIHN1ZmZlcmVkIG5vIHNldGJhY2suCiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Iklzb2MuIDQuNzIiIHZhbGlkPSJ5ZXMiPklzb2MuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0LjcyPC9iaWJsPjsgaXQgbWF5IGhhdmUgYmVlbiB0ZWNobmljYWwgaW4gdGhlIGxhbmd1YWdlIG9mIGFuY2llbnQKICAgICAgICAgICAgICAgICAgICAgICAgc3BvcnQuPC90cmFuc2xhdGlvbj4="
translation['61.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGlzIG1vcmUsIHlvdSBjYXVzZWQgc3VjaCBhIHJldm9sdXRpb24KICAgICAgICAgICAgICAgICAgICBpbiBtZW4ncyBtaW5kcyB0aGF0LCB0aG91Z2ggbWFueSBrZWVwIGluc2lzdGluZyB0aGF0IG5vdGhpbmcgaW4gZXF1ZXN0cmlhbgogICAgICAgICAgICAgICAgICAgIGNvbnRlc3RzIGFmZm9yZHMgc3VjaCBkZWxpZ2h0IGFzIGEgY3Jhc2gsIGFuZCBzZWVtIHRvIHNwZWFrIHRoZSB0cnV0aCwgaW4geW91cgogICAgICAgICAgICAgICAgICAgIGNhc2UgYWxsIHRoZSBzcGVjdGF0b3JzLCBvbiB0aGUgY29udHJhcnksIHdlcmUgYWZyYWlkIHRoYXQgc29tZSBzdWNoIGFjY2lkZW50CiAgICAgICAgICAgICAgICAgICAgbWlnaHQgYmVmYWxsIHlvdS4gU3VjaCBnb29kd2lsbCBhbmQgZWFnZXJuZXNzIGZvciB5b3VyIHN1Y2Nlc3MgZGlkIHlvdXIKICAgICAgICAgICAgICAgICAgICBwZXJzb25hbGl0eSBhd2FrZW4gaW4gdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['61.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhleSBoYWQgZ29vZCByZWFzb24gdG8gZmVlbCBzbywgZm9yIHdoaWxlIGl0IGlzIGEKICAgICAgICAgICAgICAgICAgICBzcGxlbmRpZCB0aGluZyB0byBiZWNvbWUgZGlzdGluZ3Vpc2hlZCBmb3Igc29tZSBvbmUgZXhjZWxsZW5jZSwgaXQgaXMgc3RpbGwgbW9yZQogICAgICAgICAgICAgICAgICAgIHNwbGVuZGlkIHRvIGNvbWJpbmUgYWxsIHRoZSBxdWFsaXRpZXMgb2Ygd2hpY2ggYSBtYW4gb2Ygc2Vuc2UgbWlnaHQganVzdGx5IGZlZWwKICAgICAgICAgICAgICAgICAgICBwcm91ZC4gRnJvbSB0aGUgZm9sbG93aW5nIGV4YW1wbGVzIHRoaXMgd2lsbCBiZSBjbGVhcjogd2Ugc2hhbGwgZmluZCB0aGF0IEFlYWN1cwogICAgICAgICAgICAgICAgICAgIGFuZCBSaGFkYW1hbnRoeXMgd2VyZSBiZWxvdmVkIGJ5IHRoZSBnb2RzIGZvciB0aGVpciBkaXNjcmV0aW9uLCBIZXJhY2xlcywgQ2FzdG9yCiAgICAgICAgICAgICAgICAgICAgYW5kIFBvbGx1eCBmb3IgdGhlaXIgY291cmFnZSwgYW5kIEdhbnltZWRlcywgQWRvbmlzLCBhbmQgb3RoZXJzIGxpa2UgdGhlbSBmb3IKICAgICAgICAgICAgICAgICAgICB0aGVpciBiZWF1dHksIHNvIHRoYXQgSSBhdCBhbnkgcmF0ZSBhbSBub3QgYXN0b25pc2hlZCBhdCB0aG9zZSB3aG8gY292ZXQgeW91cgogICAgICAgICAgICAgICAgICAgIGZyaWVuZHNoaXAgYnV0IGF0IHRob3NlIHdobyBhcmUgbm90IHNvIGRpc3Bvc2VkLiBGb3Igd2hlbiBzb21lLCB0aHJvdWdoIHNoYXJpbmcKICAgICAgICAgICAgICAgICAgICBpbiBvbmUgb3IgYW5vdGhlciBvZiB0aGUgcXVhbGl0aWVzIEkgaGF2ZSBtZW50aW9uZWQsIGhhdmUgYmVlbiBkZWVtZWQgd29ydGh5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbXBhbnkgb2YgdGhlIGdvZHMsIHN1cmVseSB0byBhIG1lcmUgbW9ydGFsIGl0IGlzIHRoZSBoZWlnaHRzIG9mIGRlc2lyZSB0bwogICAgICAgICAgICAgICAgICAgIGJlY29tZSB0aGUgZnJpZW5kIG9mIG9uZSB3aG8gaGFzIGJlY29tZSB0aGUgcHJvdWQgcG9zc2Vzc29yIG9mIGFsbCBnb29kCiAgICAgICAgICAgICAgICAgICAgcXVhbGl0aWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['61.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5DZXJ0YWlubHkgeW91ciBmYXRoZXIgYW5kIG1vdGhlcgogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgcmVzdCBvZiB5b3VyIGtpbnNtZW4gYXJlIHJpZ2h0bHkgZW52aWVkIGJlY2F1c2UgeW91IHNvIGZhciBzdXJwYXNzIHRob3NlCiAgICAgICAgICAgICAgICAgICAgb2YgeW91ciBvd24gYWdlIGluIGV4Y2VsbGVuY2UsIGJ1dCBzdGlsbCBtb3JlIGVudmlhYmxlIGFyZSB0aG9zZSB3aG9tIHlvdSwgd2hvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGRlZW1lZCB3b3J0aHkgb2Ygc3VjaCBibGVzc2luZ3MsIHNlbGVjdCBmcm9tIHRoZSB3aG9sZSBudW1iZXIgdG8gYmUKICAgICAgICAgICAgICAgICAgICB5b3VyIGZyaWVuZHMsIGp1ZGdpbmcgdGhlbSB3b3J0aHkgb2YgeW91ciBjb21wYW5pb25zaGlwLiBBbmQgc2luY2UgRm9ydHVuZSBoYXMKICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQgdGhlIGZvcm1lciB0byBzaGFyZSB5b3VyIGFmZmVjdGlvbiwgYnV0IHRoZSBsYXR0ZXIgdGhlaXIgb3duIGZpbmUKICAgICAgICAgICAgICAgICAgICBxdWFsaXRpZXMgaGF2ZSByZWNvbW1lbmRlZCBpbiBhZGRpdGlvbiwgPC90cmFuc2xhdGlvbj4="
translation['61.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5JIGRvCiAgICAgICAgICAgICAgICAgICAgbm90IGtub3cgd2hldGhlciB0byBjYWxsIHRoZXNlIHlvdW5nIG1lbiBhZG1pcmVycyBvciB1bmlxdWUgZm9yIHRoZWlyIHNvdW5kCiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50LiBGb3IsIGFzIEkgdGhpbmssIEZvcnR1bmUsIHNjb3JuaW5nIGJhc2UgbWVuIGFuZCB3aXNoaW5nIHRvIGFyb3VzZSB0aGUKICAgICAgICAgICAgICAgICAgICBtaW5kcyBvZiB0aGUgZ29vZCwgYXQgdGhlIHZlcnkgb3V0c2V0IG1hZGUgeW91ciBuYXR1cmUgYmVhdXRpZnVsLCBub3QgZm9yIGEgbGlmZQogICAgICAgICAgICAgICAgICAgIG9mIHBsZWFzdXJlLCB0byBiZSBiZWd1aWxlZCB0aGVyZXRvLCBidXQgc2VydmljZWFibGUgZm9yIGEgdmlydHVvdXMgbGlmZSwgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGhhcHBpbmVzcyB0aGVyZWluLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHNlbnRlbmNlIGV4aGliaXRzCiAgICAgICAgICAgICAgICAgICAgICAgIHJoeXRobWljYWwgY2xhdXN1bGFlIGFuZCBHb3JnaWFuaWMgcGFyYWxsZWxpc20gb2Ygc3RydWN0dXJlIGFsb25nIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgYXNzb25hbmNlIG9mIHRoZSB2b3dlbCBlLiBJdCBpcyBzdWdnZXN0ZWQgdGhhdCB0aGUgR3JlZWsgdmVyc2lvbiBiZSByZWFkCiAgICAgICAgICAgICAgICAgICAgICAgIGFsb3VkLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['61.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWx0aG91Z2ggSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgc3RpbGwgbXVjaCB0byBzYXkgaW4gcHJhaXNlIG9mIHlvdSwgSSB0aGluayBJIHNoYWxsIGNlYXNlIG15IGV1bG9neSBhdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgcG9pbnQsIGZlYXJpbmcgdGhhdCBJIG1heSBzZWVtIHRvIHBsZWFkIHlvdXIgY2F1c2UgaW4gdGVybXMgZXhjZWVkaW5nIGh1bWFuCiAgICAgICAgICAgICAgICAgICAgbGltaXRhdGlvbnMuIEZvciBzbyBmYXIsIGFzIGl0IHNlZW1zLCBkb2VzIHRoZSBwb3dlciBvZiB3b3JkcyBmYWxsIHNob3J0IG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBvZiB2aXNpb24gdGhhdCwgd2hpbGUgbm9uZSB3b3VsZCB0aGluayBvZiBtaXN0cnVzdGluZyB0aGUgZXZpZGVuY2Ugb2YgaGlzIGV5ZXMsCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHRoaW5rIHRoZSBwcmFpc2Ugb2YgdGhpbmdzIG1lbiBzYXkgdGhleSBoYXZlIHNlZW4sIGV2ZW4gaWYgaXQgZmFsbHMgc2hvcnQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgdHJ1dGgsIHRvIGJlIGluY3JlZGlibGUuIDwvdHJhbnNsYXRpb24+"
translation['61.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgSQogICAgICAgICAgICAgICAgICAgIHNoYWxsIGxlYXZlIHRoaXMgdG9waWMgYW5kIG5vdyBlbmRlYXZvciB0byBjb3Vuc2VsIHlvdSBvbiB0aGUgbWVhbnMgb2YgcmVuZGVyaW5nCiAgICAgICAgICAgICAgICAgICAgeW91ciBsaWZlIHN0aWxsIG1vcmUgd29ydGh5IG9mIGVzdGVlbS4gVG8gdGhlIHdvcmRzIEkgYW0gYWJvdXQgdG8gdXR0ZXIgSSB3b3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBoYXZlIHlvdSBnaXZlIGhlZWQgYXMgdG8gYSBtYXR0ZXIgb2YgdHJpdmlhbCBpbXBvcnRhbmNlLCBub3IgdG8gbGVhcCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjb25jbHVzaW9uIHRoYXQgSSBoYXZlLCBhZnRlciBhbGwsIGFkZHJlc3NlZCB5b3UgdGh1cywgbm90IGZvciB5b3VyIGdvb2QsIGJ1dAogICAgICAgICAgICAgICAgICAgIGZyb20gYSBkZXNpcmUgdG8gZGlzcGxheSBteSBza2lsbDsgb3RoZXJ3aXNlIHlvdSBtYXkgbWlzcyB0aGUgdHJ1dGggYW5kLCBieQogICAgICAgICAgICAgICAgICAgIGNob29zaW5nIGhhcGhhemFyZCBjb3Vuc2VsIGluIHBsYWNlIG9mIHRoZSBiZXN0LCBmYWxsIHNob3J0IG9mIHRoZSBiZXN0IGluCiAgICAgICAgICAgICAgICAgICAganVkZ2luZyB5b3VyIG93biBpbnRlcmVzdHMuIDwvdHJhbnNsYXRpb24+"
translation['61.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2UgZG8gbm90CiAgICAgICAgICAgICAgICAgICAgcmVwcm9hY2ggbWVuIG9mIGh1bWJsZSBhbmQgaW5zaWduaWZpY2FudCBuYXR1cmFsIGdpZnRzIGV2ZW4gd2hlbiB0aGV5IGNvbW1pdCBhCiAgICAgICAgICAgICAgICAgICAgZGlzaG9ub3JhYmxlIGFjdCwgYnV0IHRvIHRob3NlIHdobywgbGlrZSB5b3Vyc2VsZiwgaGF2ZSBhdHRhaW5lZCBkaXN0aW5jdGlvbiwKICAgICAgICAgICAgICAgICAgICBldmVuIGEgYml0IG9mIG5lZ2xpZ2VuY2UgaW4gc29tZSBtYXR0ZXIgb2YgaGlnaCBob25vciBicmluZ3MgZGlzZ3JhY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjEuMzIiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDYxLjMyPC9iaWJsPjwvbm90ZT4gQWdhaW4sIHRob3NlIHdobyBnbyBhc3RyYXkgaW4gb3RoZXIgZG9tYWlucyBmYWlsCiAgICAgICAgICAgICAgICAgICAgbWVyZWx5IHQgbWFrZSB0aGUgYmVzdCBkZWNpc2lvbiBpbiBzb21lIHNpbmdsZSwgaXNvbGF0ZWQgbWF0dGVyLCBidXQgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgbWlzcyB0aGUgcmlnaHQgYWR2aWNlIG9uIHRoZSBjb25kdWN0IG9mIGxpZmUsIG9yIHNjb3JuIGl0LCBoYXZlIHJlbWluZGVycyBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIG93biBmb2xseSB0byBsaXZlIHdpdGggdGhlaXIgd2hvbGUgbGlmZSBsb25nLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYxLjMyIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2MS4zMjwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['61.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHlvdSBtdXN0IG5vdCBmYWxsIGludG8KICAgICAgICAgICAgICAgICAgICBhbnkgb2YgdGhlc2UgZXJyb3JzIGJ1dCByYXRoZXIgc2VlayB0byBkaXNjb3ZlciB3aGF0IGlzIG9mIHN1cHJlbWUgY29uc2VxdWVuY2UKICAgICAgICAgICAgICAgICAgICBpbiBodW1hbiBhZmZhaXJzLCBhbmQgd2hhdCBpdCBpcyB0aGF0IHR1cm5pbmcgb3V0IHdlbGwgd291bGQgZG8gdXMgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBnb29kLCBidXQgdHVybmluZyBvdXQgYmFkbHkgd291bGQgaHVydCB1cyBtb3N0IGFsb25nIGxpZmUncyBwYXRod2F5LiBGb3IgaXQKICAgICAgICAgICAgICAgICAgICByZXF1aXJlcyBubyBwcm9vZiB0aGF0IHVwb24gdGhpcyBmYWN0b3Igd2UgbXVzdCBleHBlbmQgdGhlIGdyZWF0ZXN0IGNhcmUsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UgcG9zc2Vzc2VzIHRoZSBwb3dlciB0byB0aXAgdGhlIHNjYWxlIHRvIG9uZSBzaWRlIG9yIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['61.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgb2YgdGhlIHBvd2VycyByZXNpZGluZyBpbiBodW1hbgogICAgICAgICAgICAgICAgICAgIGJlaW5ncyB3ZSBzaGFsbCBmaW5kIHRoYXQgaW50ZWxsaWdlbmNlIGxlYWRzIGFsbCB0aGUgcmVzdCBhbmQgdGhhdCBwaGlsb3NvcGh5CiAgICAgICAgICAgICAgICAgICAgYWxvbmUgaXMgY2FwYWJsZSBvZiBlZHVjYXRpbmcgdGhpcyByaWdodGx5IGFuZCB0cmFpbmluZyBpdC4gSW4gdGhpcyBzdHVkeSBJCiAgICAgICAgICAgICAgICAgICAgdGhpbmsgeW91IG91Z2h0IHRvIHBhcnRpY2lwYXRlLCBhbmQgbm90IGJhbGsgYXQgb3IgZmxlZSBmcm9tIHRoZSBsYWJvcnMgaW52b2x2ZWQKICAgICAgICAgICAgICAgICAgICBpbiBpdCwgcmVmbGVjdGluZyB0aGF0IHRocm91Z2ggaWRsZW5lc3MgYW5kIGluZG9sZW5jZSBldmVuIHF1aXRlIHN1cGVyZmljaWFsCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzIGJlY29tZSBkaWZmaWN1bHQsIHdoaWxlIHRocm91Z2ggcGVyc2lzdGVuY2UgYW5kIGRpbGlnZW5jZSBub25lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdvcnRod2hpbGUgdGhpbmdzIGlzIHVuYXR0YWluYWJsZSwgPC90cmFuc2xhdGlvbj4="
translation['61.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhhdCBvZgogICAgICAgICAgICAgICAgICAgIGFsbCB0aGluZ3MgdGhlIG1vc3QgaXJyYXRpb25hbCBpcyB0byBiZSBhbWJpdGlvdXMgZm9yIHdlYWx0aCwgYm9kaWx5IHN0cmVuZ3RoLAogICAgICAgICAgICAgICAgICAgIGFuZCBzdWNoIHRoaW5ncywgYW5kIGZvciB0aGVpciBzYWtlcyB0byBzdWJtaXQgdG8gbWFueSBoYXJkc2hpcHMsIGFsbCBvZiB3aGljaAogICAgICAgICAgICAgICAgICAgIHByaXplcyBhcmUgcGVyaXNoYWJsZSBhbmQgdXN1YWxseSBzbGF2ZXMgdG8gaW50ZWxsaWdlbmNlLCBidXQgbm90IHRvIGFpbSBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBpbXByb3ZlbWVudCBvZiB0aGUgbWluZCwgd2hpY2ggaGFzIHN1cGVydmlzaW9uIG92ZXIgYWxsIG90aGVyIHBvd2VycywgYWJpZGVzCiAgICAgICAgICAgICAgICAgICAgY29udGludWFsbHkgd2l0aCB0aG9zZSB3aG8gcG9zc2VzcyBpdCwgYW5kIGd1aWRlcyB0aGUgd2hvbGUgbGlmZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG9sZGVzdCBvZiB0aGUgR3JlZWstbGV0dGVyIGZyYXRlcm5pdGllcyBpbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgdW5pdmVyc2l0aWVzIG9mIHRoZSBVLlMuIO+8iDxkYXRlIGF1dGhuYW1lPSIxNzc2IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIxNzc2Ij4xNzc2PC9kYXRlPu+8iSwgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zqbOks6aPC9mb3JlaWduPiwgdG9vayBpdHMKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSBmcm9tIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+GzrnOu86/z4POv8+G4b23zrEgzrLhvbfOv8+FCiAgICAgICAgICAgICAgICAgICAgICAgIM66z4XOss61z4HOveG9tc+EzrfPgjwvZm9yZWlnbj4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxkYXRlIGF1dGhuYW1lPSIxNzc2IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIxNzc2Ij4xNzc2PC9kYXRlPu+8iSwgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zqbOks6aPC9mb3JlaWduPiwgdG9vayBpdHMKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSBmcm9tIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+GzrnOu86/z4POv8+G4b23zrEgzrLhvbfOv8+FCiAgICAgICAgICAgICAgICAgICAgICAgIM66z4XOss61z4HOveG9tc+EzrfPgjwvZm9yZWlnbj4uPC90cmFuc2xhdGlvbj4="
translation['61.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBhbHRob3VnaCBpdCBpcyBhIGZpbmUgdGhpbmcgdG8gYmUKICAgICAgICAgICAgICAgICAgICBhZG1pcmVkIGFtb25nIGhpZ2gtbWluZGVkIHBlb3BsZSBldmVuIG9uIGFjY291bnQgb2YgZm9ydHVpdG91cyBzdWNjZXNzLCBpdCBpcwogICAgICAgICAgICAgICAgICAgIG11Y2ggZmluZXIgdGhyb3VnaCBjYXJlIGJlc3Rvd2VkIHVwb24gb25lJ3Mgc2VsZiB0byBnYWluIGEgc2hhcmUgaW4gYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGFjY29tcGxpc2htZW50cyB0aGF0IGFyZSBlc3RlZW1lZDsgZm9yIG9mdGVuIGl0IGhhcyBmYWxsZW4gdG8gdGhlIGxvdCBvZiB2dWxnYXIKICAgICAgICAgICAgICAgICAgICBtZW4gdG8gc2hhcmUgaW4gdGhlIGZvcm1lciBidXQgbm9uZSBoYXZlIGEgcGFydCBpbiB0aGUgbGF0dGVyIGV4Y2VwdCB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBleGNlbCBpbiByZWFsIG1hbmxpbmVzcy4gPC90cmFuc2xhdGlvbj4="
translation['61.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgdG91Y2hpbmcgdGhlIHN1YmplY3Qgb2YgcGhpbG9zb3BoeSwgc29tZSBmdXR1cmUKICAgICAgICAgICAgICAgICAgICBvY2Nhc2lvbiB3aWxsIGFmZm9yZCBtZSBtb3JlIHN1aXRhYmxlIG9wcG9ydHVuaXRpZXMgdG8gcmV2aWV3IGNhcmVmdWxseSB0aGUKICAgICAgICAgICAgICAgICAgICBwYXJ0aWN1bGFycywgYnV0IHRoZSBvdXRsaW5lcyBvZiBpdCBub3RoaW5nIHdpbGwgcHJldmVudCBtZSBmcm9tIHJ1bm5pbmcgb3ZlciBhdAogICAgICAgICAgICAgICAgICAgIG9uY2UuIFRoaXMgb25lIHBvaW50LCB0aGVyZWZvcmUsIHlvdSBtdXN0IGdyYXNwIGNsZWFybHkgYXQgdGhlIG91dHNldCwgdGhhdCBhbGwKICAgICAgICAgICAgICAgICAgICBlZHVjYXRpb24gY29uc2lzdHMgaW4gdW5kZXJzdGFuZGluZyBzb21ldGhpbmcgYW5kIHRoZW4gcHV0dGluZyBpdCBpbnRvCiAgICAgICAgICAgICAgICAgICAgICAgIHByYWN0aWNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIGlkZWEgcmVjdXJzIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjEuNDEiIHZhbGlkPSJ5ZXMiPkRlbS4gNjEuNDE8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYxLjQ3IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2MS40NzwvYmlibD4uPC9ub3RlPiBhbmQgdGhpcyBpcyBldmVuIG1vcmUgdHJ1ZSBvZiBwaGlsb3NvcGh5IHRoYW4gb2YKICAgICAgICAgICAgICAgICAgICBhbnkgb3RoZXIgc3R1ZGllcywgZm9yIHRoZSBzeW50aGVzaXMgb2YgbGVhcm5pbmcgYW5kIHByYWN0aWNlIGlzIGxpa2VseSB0byBiZQogICAgICAgICAgICAgICAgICAgIG1vcmUgcGVyZmVjdCBpbiBwcm9wb3J0aW9uIGFzIHRoZSBpbnN0cnVjdG9ycyBhcmUgbW9yZSBjbGVhciBvbiB0aGlzIHBvaW50LgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYxLjQxIiB2YWxpZD0ieWVzIj5EZW0uIDYxLjQxPC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA2MS40NyIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNjEuNDc8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['61.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBzaW5jZSBpbnRlbGxpZ2VuY2UgY29tbWFuZHMgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvdmluY2Ugb2Ygc3BlYWtpbmcgYW5kIGRlbGliZXJhdGluZywgYW5kIHBoaWxvc29waHkgY29uZmVycyBmYWNpbGl0eSBpbiBlYWNoCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlc2UsIHdoYXQgcmVhc29uIGNhbiB0aGVyZSBiZSB3aHkgd2Ugc2hvdWxkIHJlZnVzZSB0byBnZXQgYSBmaXJtIGdyYXNwIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBzdHVkeSwgdGhyb3VnaCB3aGljaCB3ZSBzaGFsbCBiZWNvbWUgbWFzdGVycyBvZiBib3RoIGFsaWtlPyBCZWNhdXNlIGxpZmUKICAgICAgICAgICAgICAgICAgICBtYXkgdGhlbiB0b28gYmUgZXhwZWN0ZWQgdG8gbWFrZSBhIGdyZWF0IGFkdmFuY2UgZm9yIHVzIHdoZW4gd2UgcmVhY2ggb3V0IGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSB0aGluZ3Mgb2Ygc3VwcmVtZSBpbXBvcnRhbmNlIGFuZCBmaW5kIG91cnNlbHZlcyBhYmxlIHRvIHNlY3VyZSBieSBydWxlIGFuZAogICAgICAgICAgICAgICAgICAgIHByZWNlcHQgc3VjaCBhcyBjYW4gYmUgdGF1Z2h0IGFuZCB0aGUgcmVzdCBieSBwcmFjdGljZSBhbmQgaGFiaXR1YXRpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['61.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5JdCBjZXJ0YWlubHkgaXMgbm90IHBlcm1pc3NpYmxlIHRvIG1ha2UKICAgICAgICAgICAgICAgICAgICB0aGUgYXNzZXJ0aW9uIHRoYXQgaXQgaXMgbm90IHRocm91Z2ggYWNxdWlyZWQga25vd2xlZGdlIHRoYXQgd2Ugc3VycGFzcyBvbmUKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIGluIHNvdW5kIGp1ZGdlbWVudDsgZm9yLCBzcGVha2luZyBnZW5lcmFsbHksIGFsbCBuYXR1cmFsIGFiaWxpdHkgaXMKICAgICAgICAgICAgICAgICAgICBpbXByb3ZlZCBieSB0aGUgYWRkaXRpb24gb2YgdGhlIGFwcHJvcHJpYXRlIGVkdWNhdGlvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Qmxhc3MgY29tcGFyZXMgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gMTUuMTg5IiB2YWxpZD0ieWVzIj5Jc29jLgogICAgICAgICAgICAgICAgICAgICAgICAxNS4xODktMTkyPC9iaWJsPiwgd2l0aCB3aGljaCBtYXkgYmUgY29tcGFyZWQgaW4gdHVybiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEFyY2guIDcuMTUiIHZhbGlkPSJ5ZXMiPkNpY2VybyBQcm8gQXJjaGlhIDcuMTU8L2JpYmw+Ljwvbm90ZT4gYW5kIHRoaXMgaXMKICAgICAgICAgICAgICAgICAgICBlc3BlY2lhbGx5IHRydWUgb2YgdGFsZW50cyB3aGljaCBhdCB0aGUgb3V0c2V0IGFyZSBpbmhlcmVudGx5IHN1cGVyaW9yIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3QsIGJlY2F1c2UgdGhlIG9uZSBraW5kIGlzIGNhcGFibGUgb25seSBvZiBpbXByb3ZpbmcgdXBvbiBpdHNlbGYgd2hpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgbWF5IGFsc28gc3VycGFzcyB0aGUgcmVzdC4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gMTUuMTg5IiB2YWxpZD0ieWVzIj5Jc29jLgogICAgICAgICAgICAgICAgICAgICAgICAxNS4xODktMTkyPC9iaWJsPiwgd2l0aCB3aGljaCBtYXkgYmUgY29tcGFyZWQgaW4gdHVybiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEFyY2guIDcuMTUiIHZhbGlkPSJ5ZXMiPkNpY2VybyBQcm8gQXJjaGlhIDcuMTU8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['61.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QmUgd2VsbCBhc3N1cmVkIGFsc28gdGhhdCB0aGUgZmFjaWxpdHkgYWNxdWlyZWQgc29sZWx5CiAgICAgICAgICAgICAgICAgICAgZnJvbSBwcmFjdGljYWwgZXhwZXJpZW5jZSBpcyB0cmVhY2hlcm91cyBhbmQgdXNlbGVzcyBmb3Igc3Vic2VxdWVudCBuZWVkcyBvZgogICAgICAgICAgICAgICAgICAgIGxpZmUsIGJ1dCB0aGUgZWR1Y2F0aW9uIHNlY3VyZWQgdGhyb3VnaCB0aGUgcHVyc3VpdCBvZiBwaGlsb3NvcGh5IGlzIGhhcHBpbHkKICAgICAgICAgICAgICAgICAgICBibGVuZGVkIGluIGFsbCB0aGVzZSBuZWVkcy4gVGhlcmUgaXMgbm8gZGVueWluZywgb2YgY291cnNlLCB0aGF0IGluIHRoZSBwYXN0CiAgICAgICAgICAgICAgICAgICAgc29tZSBtZW4gd2hvIGdvdCBwcmFjdGljYWwgdHJhaW5pbmcganVzdCBieSBnb29kIGx1Y2sgaW4gYWN0aW9uIGhhdmUgd29uCiAgICAgICAgICAgICAgICAgICAgYWRtaXJhdGlvbiwgYnV0IGZvciB5b3UgdGhlIHByb3BlciB0aGluZyBpcyB0byBkaXNyZWdhcmQgdGhlc2UgbWVuIGFuZCB0byB0YWtlCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYgc2VyaW91c2x5IGluIGhhbmQuIEZvciBpbiBtYXR0ZXJzIG9mIHRoZSB1dG1vc3QgaW1wb3J0YW5jZSB5b3Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IGJlIGV4dGVtcG9yaXppbmcgaW5zdGVhZCBvZiByZWFsbHkga25vd2luZyB3aGF0IHRvIGRvIG9yIGluIGVtZXJnZW5jaWVzIGJlCiAgICAgICAgICAgICAgICAgICAgc3R1ZHlpbmcgeW91ciBhcmd1bWVudHMgaW5zdGVhZCBvZiByZWFsbHkga25vd2luZyBob3cgdG8gZGViYXRlIGFuIGlzc3VlIG9uIGl0cwogICAgICAgICAgICAgICAgICAgIG1lcml0cy4gPC90cmFuc2xhdGlvbj4="
translation['61.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QmUKICAgICAgICAgICAgICAgICAgICBjb252aW5jZWQgdG9vIHRoYXQgYWxsIHBoaWxvc29waGljYWwgbGVhcm5pbmcgY29uZmVycyBwcmVjaW91cyBiZW5lZml0cyB1cG9uCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIHRha2UgYWR2YW50YWdlIG9mIGl0LCBidXQgZXNwZWNpYWxseSBpcyB0aGlzIHRydWUgb2YgdGhlIGtub3dsZWRnZQogICAgICAgICAgICAgICAgICAgIHRoYXQgZGVhbHMgd2l0aCBwcmFjdGljYWwgYWZmYWlycyBhbmQgcG9saXRpY2FsIGRpc2N1c3Npb25zLiBObyBkb3VidCBpdCBpcwogICAgICAgICAgICAgICAgICAgIGRpc2dyYWNlZnVsIHRvIGJlIHF1aXRlIGlnbm9yYW50IG9mIGdlb21ldHJ5IGFuZCBvdGhlciBzdWNoIHN1YmplY3RzIG9mIHN0dWR5LAogICAgICAgICAgICAgICAgICAgIGJ1dCB0byBiZWNvbWUgYSB0b3Btb3N0IGNvbnRlbmRlciBpbiB0aGlzIGZpZWxkIGlzIHRvbyBsb3cgYW4gYW1iaXRpb24gZm9yIG1lcml0CiAgICAgICAgICAgICAgICAgICAgbGlrZSB5b3Vycy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Qmxhc3MgY2l0ZXMgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gMTUuMjY3IiB2YWxpZD0ieWVzIj5Jc29jLiAxNS4yNjc8L2JpYmw+LCB3aGVyZSB0aGUgc3RhdGVtZW50IGlzIG1hZGUgdGhhdCBjdWx0dXJhbCBzdHVkaWVzCiAgICAgICAgICAgICAgICAgICAgICAgIGRvIG5vdCBkaXJlY3RseSBwcmVwYXJlIHRoZSBjYW5kaWRhdGUgZm9yIHB1YmxpYyBsaWZlIGJ1dCBkbyBpbmNyZWFzZSBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgcG93ZXIgdG8gbGVhcm4uPC9ub3RlPiBJbiB0aGF0IGtpbmQgb2YgcGhpbG9zb3BoeSwgaG93ZXZlciwgbm90IG9ubHkgaXMgaXQgYQogICAgICAgICAgICAgICAgICAgIHdvcnRoeSBhbWJpdGlvbiB0byBleGNlbCwgYnV0IHRvIHJlbWFpbiBpZ25vcmFudCBpcyBhbHRvZ2V0aGVyIHJpZGljdWxvdXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Iklzb2MuIDE1LjI2NyIgdmFsaWQ9InllcyI+SXNvYy4gMTUuMjY3PC9iaWJsPiwgd2hlcmUgdGhlIHN0YXRlbWVudCBpcyBtYWRlIHRoYXQgY3VsdHVyYWwgc3R1ZGllcwogICAgICAgICAgICAgICAgICAgICAgICBkbyBub3QgZGlyZWN0bHkgcHJlcGFyZSB0aGUgY2FuZGlkYXRlIGZvciBwdWJsaWMgbGlmZSBidXQgZG8gaW5jcmVhc2UgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHBvd2VyIHRvIGxlYXJuLjwvdHJhbnNsYXRpb24+"
translation['61.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IG1heQogICAgICAgICAgICAgICAgICAgIGluZmVyIHRoaXMgdG8gYmUgdHJ1ZSBvbiBtYW55IG90aGVyIGdyb3VuZHMgYW5kIGVzcGVjaWFsbHkgYnkgc2Nhbm5pbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgY2FyZWVycyBvZiB0aG9zZSB3aG8gaGF2ZSBiZWNvbWUgZW1pbmVudCBiZWZvcmUgeW91ciB0aW1lLiBZb3Ugd2lsbCBoZWFyIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBQZXJpY2xlcywgd2hvIGlzIHRob3VnaHQgdG8gaGF2ZSBmYXIgc3VycGFzc2VkIGFsbCBtZW4gb2YgaGlzIGFnZSBpbgogICAgICAgICAgICAgICAgICAgIGludGVsbGVjdHVhbCBncmFzcCwgYWRkcmVzc2VkIGhpbXNlbGYgdG8gQW5heGFnb3JhcyBvZiBDbGF6b21lbmFlIGFuZCBvbmx5IGFmdGVyCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgaGlzIHB1cGlsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJsYXNzIG5vdGVzIHRoZSBzYW1lIGluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Iklzb2MuIDE1LjIzNSIgdmFsaWQ9InllcyI+SXNvYy4gMTUuMjM1PC9iaWJsPi48L25vdGU+IGFjcXVpcmVkIHRoaXMgcG93ZXIgb2YKICAgICAgICAgICAgICAgICAgICBqdWRnZW1lbnQuIFlvdSB3aWxsIG5leHQgZGlzY292ZXIgdGhhdCBBbGNpYmlhZGVzLCB0aG91Z2ggaGlzIG5hdHVyYWwKICAgICAgICAgICAgICAgICAgICBkaXNwb3NpdGlvbiB3YXMgZmFyIGluZmVyaW9yIGluIHJlc3BlY3QgdG8gdmlydHVlIGFuZCBpdCB3YXMgaGlzIHBsZWFzdXJlIHRvCiAgICAgICAgICAgICAgICAgICAgYmVoYXZlIGhpbXNlbGYgbm93IGFycm9nYW50bHksIG5vdyBvYnNlcXVpb3VzbHksPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gMTUuMjM1IiB2YWxpZD0ieWVzIj5Jc29jLiAxNS4yMzU8L2JpYmw+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Jc29jcmF0ZXMgZW1wbG95cyB0aGUgc2FtZSB3b3JkcyBvZiBQZXJzaWFuIHNhdHJhcHMsIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Iklzb2MuIDQuMTUyIiB2YWxpZD0ieWVzIj5Jc29jLiA0LjE1MjwvYmlibD4sIGFzIEJsYXNzIG5vdGVzLjwvbm90ZT4gbm93IGxpY2VudGlvdXNseSwgeWV0LCBhcyBhCiAgICAgICAgICAgICAgICAgICAgZnJ1aXQgb2YgaGlzIGFzc29jaWF0aW9uIHdpdGggU29jcmF0ZXMsIGhlIG1hZGUgY29ycmVjdGlvbiBvZiBtYW55IGVycm9ycyBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBsaWZlIGFuZCBvdmVyIHRoZSByZXN0IGRyZXcgYSB2ZWlsIG9mIG9ibGl2aW9uIGJ5IHRoZSBncmVhdG5lc3Mgb2YgaGlzIGxhdGVyCiAgICAgICAgICAgICAgICAgICAgYWNoaWV2ZW1lbnRzLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJJc29jLiA0LjE1MiIgdmFsaWQ9InllcyI+SXNvYy4gNC4xNTI8L2JpYmw+LCBhcyBCbGFzcyBub3Rlcy48L3RyYW5zbGF0aW9uPg=="
translation['61.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm90IHRvIHNwZW5kIG91ciB0aW1lCiAgICAgICAgICAgICAgICAgICAgcmVoZWFyc2luZyBhbmNpZW50IGV4YW1wbGVzIHdoaWxlIG90aGVycyBhcmUgYXZhaWxhYmxlIGNsb3NlciB0byBvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgcGhyYXNlIOKAnGNsb3NlciB0byBvdXIKICAgICAgICAgICAgICAgICAgICAgICAgb3duIHRpbWVz4oCdIGlzIGRlZmluZWQgYnkgdGhlIG1lbnRpb24gb2YgVGltb3RoZXVzLCB3aG8gZGllZCBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGUgYXV0aG5hbWU9Ii0zNTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNTUiPjM1NTwvZGF0ZT4gQi5DLiwganVzdCBhZnRlciBEZW1vc3RoZW5lcyBlbnRlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgIHB1YmxpYyBsaWZlLiBUaGUgYXV0aG9yLCB3aGV0aGVyIHRoZSBvcmF0b3Igb3IgYSBmb3JnZXIsIGJlbG9uZ3MgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZCBoYWxmIG9mIHRoZSBmb3VydGggY2VudHVyeS48L25vdGU+IHlvdSB3aWxsIGRpc2NvdmVyIHRoYXQgVGltb3RoZXVzCiAgICAgICAgICAgICAgICAgICAgd2FzIGRlZW1lZCB3b3J0aHkgb2YgdGhlIGhpZ2hlc3QgcmVwdXRlIGFuZCBudW1lcm91cyBob25vcnMsIG5vdCBiZWNhdXNlIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGFjdGl2aXRpZXMgYXMgYSB5b3VuZ2VyIG1hbiwgYnV0IGJlY2F1c2Ugb2YgaGlzIHBlcmZvcm1hbmNlcyBhZnRlciBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBzdHVkaWVkIHdpdGggSXNvY3JhdGVzLjxkYXRlIGF1dGhuYW1lPSItMzU1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzU1Ij4zNTU8L2RhdGU+IEIuQy4sIGp1c3QgYWZ0ZXIgRGVtb3N0aGVuZXMgZW50ZXJlZAogICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgbGlmZS4gVGhlIGF1dGhvciwgd2hldGhlciB0aGUgb3JhdG9yIG9yIGEgZm9yZ2VyLCBiZWxvbmdzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmQgaGFsZiBvZiB0aGUgZm91cnRoIGNlbnR1cnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRpbW90aGV1cywgc29uIG9mIENvbm9uLAogICAgICAgICAgICAgICAgICAgICAgICB3YXMgY2FsbGVkIGJ5IENvcm5lbGl1cyBOZXBvcyB0aGUgbGFzdCBBdGhlbmlhbiBnZW5lcmFsIHdvcnRoeSBvZiBtZW50aW9uLgogICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcyByZWd1bGFybHkgc3Bva2Ugb2YgaGltIHdpdGggYWRtaXJhdGlvbi48L25vdGU+IFlvdSB3aWxsIGRpc2NvdmVyCiAgICAgICAgICAgICAgICAgICAgYWxzbyB0aGF0IEFyY2h5dGFzIG9mIFRhcmVudHVtIGJlY2FtZSBydWxlciBvZiBoaXMgY2l0eSBhbmQgbWFuYWdlZCBpdHMgYWZmYWlycwogICAgICAgICAgICAgICAgICAgIHNvIGFkbWlyYWJseSBhbmQgc28gY29uc2lkZXJhdGVseSBhcyB0byBzcHJlYWQgdGhlIHJlY29yZCBvZiB0aGF0IGFjaGlldmVtZW50IHRvCiAgICAgICAgICAgICAgICAgICAgYWxsIG1hbmtpbmQ7IHlldCBhdCBmaXJzdCBoZSB3YXMgZGVzcGlzZWQgYW5kIGhlIG93ZWQgaGlzIHJlbWFya2FibGUgcHJvZ3Jlc3MgdG8KICAgICAgICAgICAgICAgICAgICBzdHVkeWluZyB3aXRoIFBsYXRvLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVyZSBpcyBhIGJyaWVmIGxpZmUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQXJjaHl0YXMgd2hpY2ggbWF5IGJlIGNvbnN1bHRlZCBpbiB0aGUgTG9lYiB0cmFuc2xhdGlvbi4gSXQgaXMgbm90IGtub3duCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aXZlbHkgdGhhdCBoZSB3YXMgYSBwdXBpbCBvZiBQbGF0bywgYnV0IGhlIHdhcyBoaXMgZnJpZW5kOiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMLiA3LjMzOGEiIHZhbGlkPSJ5ZXMiPlBsYXQuIEwuIDcuMzM4YywzNTBhPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTC4gMTMuMzYwYyIgdmFsaWQ9InllcyI+UGxhdC4gTC4gMTMuMzYwYzwvYmlibD4uIEhpcyBhZGhlcmVuY2Ugd2FzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzY2hvb2wgb2YgUHl0aGFnb3Jhcy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTC4gNy4zMzhhIiB2YWxpZD0ieWVzIj5QbGF0LiBMLiA3LjMzOGMsMzUwYTwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIEwuIDEzLjM2MGMiIHZhbGlkPSJ5ZXMiPlBsYXQuIEwuIDEzLjM2MGM8L2JpYmw+LiBIaXMgYWRoZXJlbmNlIHdhcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2Nob29sIG9mIFB5dGhhZ29yYXMuPC90cmFuc2xhdGlvbj4="
translation['61.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5PZiB0aGVzZSBleGFtcGxlcyBub3Qgb25lIHdvcmtlZCBvdXQgY29udHJhcnkKICAgICAgICAgICAgICAgICAgICB0byByZWFzb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+V2l0aCBhIGRpZmZlcmVuY2Ugb2Ygb25lIHdvcmQgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzZW50ZW5jZSBpcyBmb3VuZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJJc29jLiA0LjE1MCIgdmFsaWQ9InllcyI+SXNvYy4gNC4xNTA8L2JpYmw+LCBhcyBCbGFzcwogICAgICAgICAgICAgICAgICAgICAgICBub3Rlcy4gSXQgbG9va3MsIGhvd2V2ZXIsIGxpa2UgYSBjb21tb25wbGFjZS48L25vdGU+OyBmb3IgaXQgd291bGQgYmUgbXVjaAogICAgICAgICAgICAgICAgICAgIHN0cmFuZ2VyIGlmIHdlIHdlcmUgb2JsaWdlZCB0byBhY2hpZXZlIHBhbHRyeSBlbmRzIHRocm91Z2ggYWNxdWlyaW5nIGtub3dsZWRnZQogICAgICAgICAgICAgICAgICAgIGFuZCBwdXR0aW5nIGl0IGludG8gcHJhY3RpY2UsIGJ1dCB3ZXJlIGNhcGFibGUgb2YgYWNjb21wbGlzaGluZyB0aGUgYmlnIHRoaW5ncwogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgdGhpcyBlZmZvcnQuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gNC4xNTAiIHZhbGlkPSJ5ZXMiPklzb2MuIDQuMTUwPC9iaWJsPiwgYXMgQmxhc3MKICAgICAgICAgICAgICAgICAgICAgICAgbm90ZXMuIEl0IGxvb2tzLCBob3dldmVyLCBsaWtlIGEgY29tbW9ucGxhY2UuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBJIGRvIG5vdCBrbm93IHdoYXQgY2FsbAogICAgICAgICAgICAgICAgICAgIHRoZXJlIGlzIHRvIHNheSBtb3JlIG9uIHRoZXNlIHRvcGljcywgZm9yIG5vdCBldmVuIGF0IHRoZSBvdXRzZXQgZGlkIEkgaW50cm9kdWNlCiAgICAgICAgICAgICAgICAgICAgdGhlbSBiZWNhdXNlIEkgYXNzdW1lZCB5b3Ugd2VyZSBhYnNvbHV0ZWx5IGlnbm9yYW50LCBidXQgYmVjYXVzZSBJIHRob3VnaHQgdGhhdAogICAgICAgICAgICAgICAgICAgIHN1Y2ggZXhob3J0YXRpb25zIGJvdGggYXJvdXNlIHRob3NlIHdobyBsYWNrIGtub3dsZWRnZSBhbmQgc3B1ciBvbiB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBwb3NzZXNzIGl0Oy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+V3JpdGluZ3MgdGhhdCB1cmdlZCB5b3VuZyBtZW4gdG8KICAgICAgICAgICAgICAgICAgICAgICAgc3R1ZHkgcGhpbG9zb3BoeSBmb3JtZWQgYSBkaXN0aW5jdCBsaXRlcmFyeSBnZW5yZSBhbW9uZyB0aGUgYW5jaWVudHMgdW5kZXIKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG5hbWUg4oCccHJvdHJlcHRpY3Mu4oCdIFRoZSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcGlzdGxlIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZW5vZWNldXM8L3RpdGxlPiBvZiBFcGljdXJ1cyBpcyBhbiBleHRhbnQgZXhhbXBsZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBpc3RsZSB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVub2VjZXVzPC90aXRsZT4gb2YgRXBpY3VydXMgaXMgYW4gZXh0YW50IGV4YW1wbGUuPC90cmFuc2xhdGlvbj4="
translation['61.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZG8gbm90IG1ha2UgYW55IHN1Y2ggYXNzdW1wdGlvbiBhcyB0aGlzLAogICAgICAgICAgICAgICAgICAgIHRoYXQgaW4gc3BlYWtpbmcgdGhlc2Ugd29yZHMgSSBhbSBwcmVzdW1hYmx5IG9mZmVyaW5nIHRvIHRlYWNoIHlvdSBhbnkgb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICBicmFuY2hlcyBteXNlbGYsIGZvciBJIHNob3VsZCBmZWVsIG5vIHNoYW1lIGluIHNheWluZyB0aGF0IHRoZXJlIGlzIHN0aWxsIG11Y2ggSQogICAgICAgICAgICAgICAgICAgIG5lZWQgbXlzZWxmIHRvIGxlYXJuLCBhbmQgdGhhdCBJIGhhdmUgY2hvc2VuIHJhdGhlciB0byBiZSBhIGNvbnRlbmRlciBpbgogICAgICAgICAgICAgICAgICAgIHBvbGl0aWNhbCBsaWZlIHRoYW4gYSB0ZWFjaGVyIG9mIHRoZSBvdGhlciBhcnRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHNlbGYtY2hhcmFjdGVyaXphdGlvbiBoYXMgYmVlbiB0aG91Z2h0IGJ5IHNvbWUgdG8gcG9pbnQgdG8gQW5kcm90aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIGFzIHRoZSBhdXRob3IsIGJ1dCB0aGUgZ3JvdW5kcyBzZWVtIHNsaWdodCB0byBCbGFzcywgcC4gNDA3IGFuZCBub3RlCiAgICAgICAgICAgICAgICAgICAgICAgIDIuPC9ub3RlPiBOb3QgdGhhdCBpbiBkaXNhdm93aW5nIHRoZXNlIHN1YmplY3RzIG9mIGluc3RydWN0aW9uIEkgYW0KICAgICAgICAgICAgICAgICAgICBpbXB1Z25pbmcgdGhlIHJlcHV0YXRpb24gb2YgdGhvc2Ugd2hvIGhhdmUgY2hvc2VuIHRoZSBwcm9mZXNzaW9uIG9mIHNvcGhpc3QsIGJ1dAogICAgICAgICAgICAgICAgICAgIG15IHJlYXNvbiBpcyB0aGF0IHRoZSB0cnV0aCBvZiB0aGUgbWF0dGVyIGhhcHBlbnMgdG8gYmUgYXMgZm9sbG93czogPC90cmFuc2xhdGlvbj4="
translation['61.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgSSBhbSBhd2FyZSwgb2YgY291cnNlLCB0aGF0IG1hbnkgbWVuIGhhdmUgcmlzZW4KICAgICAgICAgICAgICAgICAgICB0byBlbWluZW5jZSBmcm9tIGh1bWJsZSBhbmQgb2JzY3VyZSBlc3RhdGUgdGhyb3VnaCB0aGUgcHJhY3RpY2Ugb2YgdGhpcyBhcnQsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgU29sb24sIGJvdGggbGl2aW5nIGFuZCBkZWFkLCB3YXMgZGVlbWVkIHdvcnRoeSBvZiB0aGUgaGlnaGVzdCByZW5vd24uIEhlCiAgICAgICAgICAgICAgICAgICAgd2FzIG5vdCBkaXNxdWFsaWZpZWQgZm9yIHRoZSBvdGhlciBob25vcnM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgaGludHMgYXQgdGhlIGxvbmcgY29udGVzdGVkIHF1ZXN0aW9uLCB3aGV0aGVyIHByYWN0aWNhbAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZXNtYW5zaGlwIGNvdWxkIGJlIGNvbWJpbmVkIHdpdGggcGhpbG9zb3BoaWNhbCBpbnNpZ2h0Ljwvbm90ZT4gYnV0IGxlZnQKICAgICAgICAgICAgICAgICAgICBiZWhpbmQgaGltIGEgbWVtb3JpYWwgb2YgaGlzIGNvdXJhZ2UgaW4gdGhlIHRyb3BoeSBvZiB2aWN0b3J5IG92ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgTWVnYXJpYW5zLCA8L3RyYW5zbGF0aW9uPg=="
translation['61.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5vZiBoaXMgYXN0dXRlbmVzcyBpbiB0aGUgcmVjb3ZlcnkKICAgICAgICAgICAgICAgICAgICBvZiBTYWxhbWlzLCBhbmQgb2YgZ2VuZXJhbCBzYWdhY2l0eSBpbiB0aGUgbGF3cyB3aGljaCB0aGUgbWFqb3JpdHkgb2YgdGhlIEdyZWVrcwogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHVzaW5nIHRvIHRoaXMgZGF5LiBZZXQgaW4gc3BpdGUgb2YgdGhlc2UgZ3JlYXQgY2xhaW1zIHRvIGRpc3RpbmN0aW9uIGhlCiAgICAgICAgICAgICAgICAgICAgc2V0IGhpcyBoZWFydCB1cG9uIG5vdGhpbmcgYXMgbXVjaCBhcyBiZWNvbWluZyBvbmUgb2YgdGhlIFNldmVuIFNhZ2VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHN0YXRlbWVudCBpcyBhYnN1cmQuIFRoZSBsZWdlbmQgb2YgdGhlIFNldmVuCiAgICAgICAgICAgICAgICAgICAgICAgIFNhZ2VzIGJlY2FtZSBjdXJyZW50IG9ubHkgaW4gdGhlIGZvdXJ0aCBjZW50dXJ5OiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBQcm90LiAzNDNhIiB2YWxpZD0ieWVzIj5QbGF0LiBQcm90LiAzNDNhPC9iaWJsPi4gSW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gMTUuMjM1IiB2YWxpZD0ieWVzIj5Jc29jLiAxNS4yMzU8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIGFsc28gU29sb24gaXMgY2FsbGVkIOKAnG9uZSBvZiB0aGUgc2V2ZW4gc29waGlzdHMu4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIE9yaWdpbmFsbHkgdGhpcyB0ZXJtIHN1Z2dlc3RlZCBubyBkaXNyZXNwZWN0Ljwvbm90ZT4gYmVsaWV2aW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICBwaGlsb3NvcGh5IHdhcyBubyByZXByb2FjaCBidXQgdGhhdCBpdCBicm91Z2h0IGhvbm9yIHRvIHRob3NlIHdobyBwdXJzdWVkIGl0LAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBiZWVuIG5vIGxlc3Mgd2lzZSBpbiB0aGlzIHZlcnkganVkZ2VtZW50IHRoYW4gaW4gdGhlIG90aGVycyBpbiB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIHNob3dlZCBoaW1zZWxmIHN1cGVyaW9yLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBQcm90LiAzNDNhIiB2YWxpZD0ieWVzIj5QbGF0LiBQcm90LiAzNDNhPC9iaWJsPi4gSW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gMTUuMjM1IiB2YWxpZD0ieWVzIj5Jc29jLiAxNS4yMzU8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIGFsc28gU29sb24gaXMgY2FsbGVkIOKAnG9uZSBvZiB0aGUgc2V2ZW4gc29waGlzdHMu4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIE9yaWdpbmFsbHkgdGhpcyB0ZXJtIHN1Z2dlc3RlZCBubyBkaXNyZXNwZWN0LjwvdHJhbnNsYXRpb24+"
translation['61.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TXkgb3duIGp1ZGdlbWVudCBpcyBub3QgZGlmZmVyZW50IGZyb20gU29sb24ncyBhbmQgSQogICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZCB0byB5b3UgdG8gc3R1ZHkgcGhpbG9zb3BoeSwgYmVhcmluZyBpbiBtaW5kIHRoZSBhZHZhbnRhZ2VzIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2VkIGZyb20gdGhlIGJlZ2lubmluZy4gSW5kZWVkIGl0IHdhcyB3aXRoIHRoaXMgcHVycG9zZSBpbiB2aWV3IEkgcmFuCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCB0aGUgbGlzdCBvZiB0aGVtIG15c2VsZiBpbiB0aGUgZmlyc3QgcGFydCBvZiBteSBlc3NheSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA2MS4xMCIgdmFsaWQ9InllcyI+RGVtLiA2MS4xMC0zMjwvYmlibD4uPC9ub3RlPiBub3QKICAgICAgICAgICAgICAgICAgICBleHBlY3RpbmcgdG8gbWFrZSBhIGNvbnF1ZXN0IG9mIHlvdSBieSBwcmFpc2luZyB5b3VyIG5hdHVyYWwgZ2lmdHMsIGJ1dCB0aGF0IEkKICAgICAgICAgICAgICAgICAgICBtYXkgdGhlIGJldHRlciB1cmdlIHlvdSB0byB0YWtlIHVwIHBoaWxvc29waHkgaWYgeW91IHNoYWxsIGVzY2FwZSB0aGUgZXJyb3Igb2YKICAgICAgICAgICAgICAgICAgICBwdXR0aW5nIGEgbG93IHZhbHVlIG9uIGl0LCBvciwgdGhyb3VnaCBwcmlkZSBpbiB5b3VyIHByZXNlbnQgYWR2YW50YWdlcywgb2YKICAgICAgICAgICAgICAgICAgICB1bmRlci12YWx1aW5nIHRoZSBhZHZhbnRhZ2VzIHlldCB0byBiZSBnYWluZWQuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNjEuMTAiIHZhbGlkPSJ5ZXMiPkRlbS4gNjEuMTAtMzI8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['61.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgZXZlbiBpZiB5b3UgYXJlIGJldHRlciB0aGFuIHRoZSBjb21tb24gcnVuIG9mIG1lbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gOS44MSIgdmFsaWQ9InllcyI+SXNvYy4gOS44MTwvYmlibD4gYmVnaW5zIHdpdGggc2ltaWxhcgogICAgICAgICAgICAgICAgICAgICAgICB3b3JkcywgYXMgQmxhc3Mgbm90ZXM6IOKAnG5vciBtdXN0IHlvdSBiZSBjb250ZW50IGlmIHlvdSBhcmUgYWxyZWFkeQogICAgICAgICAgICAgICAgICAgICAgICBzdXBlcmlvcnMgdG8gdGhvc2Ugd2hvIGFyZSBoZXJlIHByZXNlbnQgLiAuIC7igJ08L25vdGU+IGRvIG5vdCBzZWVrCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgc3VwZXJpb3IgaW4gbm8gcmVzcGVjdCB0byB0aGUgdGFsZW50ZWQgcmVtYWluZGVyLCBidXQgZGVlbSBpdCB0aGUgaGlnaGVzdAogICAgICAgICAgICAgICAgICAgIHB1cnBvc2UgdG8gYmUgZmlyc3QgYW1vbmcgYWxsLCBhbmQgdGhhdCBpdCBpcyBtb3JlIHRvIHlvdXIgYWR2YW50YWdlIHRvIGJlIHNlZW4KICAgICAgICAgICAgICAgICAgICBzdHJpdmluZyBmb3IgdGhpcyB0aGFuIG1lcmVseSBiZWluZyBmb3JlbW9zdCBhbW9uZyB0aGUgcmFuayBhbmQgZmlsZS4gQW5kIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGJyaW5nIHNoYW1lIHVwb24geW91ciBuYXR1cmFsIGdpZnRzIG9yIGNhdXNlIHRvIGJlIGNoZWF0ZWQgb2YgdGhlaXIgaG9wZXMgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gYXJlIHByb3VkIG9mIHlvdSwgYnV0IGVuZGVhdm9yIGJ5IHlvdXIgb3duIGFiaWxpdHkgdG8gc3VycGFzcyB0aGUgZGVzaXJlcyBvZgogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBoYXZlIHlvdXIgaW50ZXJlc3RzIG1vc3QgYXQgaGVhcnQuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Iklzb2MuIDkuODEiIHZhbGlkPSJ5ZXMiPklzb2MuIDkuODE8L2JpYmw+IGJlZ2lucyB3aXRoIHNpbWlsYXIKICAgICAgICAgICAgICAgICAgICAgICAgd29yZHMsIGFzIEJsYXNzIG5vdGVzOiDigJxub3IgbXVzdCB5b3UgYmUgY29udGVudCBpZiB5b3UgYXJlIGFscmVhZHkKICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXJpb3JzIHRvIHRob3NlIHdobyBhcmUgaGVyZSBwcmVzZW50IC4gLiAu4oCdPC90cmFuc2xhdGlvbj4="
translation['61.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYmVhciBpbiBtaW5kIHRoYXQgc3BlZWNoZXMgb2YgdGhlIG90aGVyIGtpbmRzLCB3aGVuIHRoZXkgZnVsZmlsIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcHVycG9zZSwgb25seSBjcm93biB0aGVpciBhdXRob3JzIHdpdGggZ2xvcnksIGJ1dCB0aGF0IGdvb2QgY291bnNlbHMgYXR0YWNoCiAgICAgICAgICAgICAgICAgICAgYmVuZWZpdCBhbmQgaG9ub3IgdG8gdGhvc2Ugd2hvIGhlYXJrZW4gdG8gdGhlbTsgYW5kIHRoYXQgdGhlIGRlY2lzaW9ucyB3ZSBtYWtlCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgYWxsIG90aGVyIG1hdHRlcnMgbWFrZSBwbGFpbiB0aGUgcG93ZXIgb2YgcGVyY2VwdGlvbiB3ZSBwb3NzZXNzLCBidXQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBjaG9pY2VzIHdlIG1ha2Ugb2YgY2FyZWVycyBwdXQgb3VyIHdob2xlIGNoYXJhY3RlciB0byB0aGUgdGVzdC4gQW5kIGFzIHlvdQogICAgICAgICAgICAgICAgICAgIHBhc3MganVkZ2VtZW50IGluIHRoZXNlIG1hdHRlcnMsIGNvdW50IHVwb24gYmVpbmcganVkZ2VkIGF0IHRoZSBzYW1lIHRpbWUKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiBieSBhbGwgbWVuLCBhbmQgZG8gbm90IGZvcmdldCB0aGF0IEksIHdobyBoYXZlIGJlZW4gc28gcmVhZHkgdG8gcHJhaXNlCiAgICAgICAgICAgICAgICAgICAgeW91LCB3aWxsIGFsc28gYmUgaW52b2x2ZWQgaW4gdGhlIGhhemFyZCBvZiB0aGUgdGVzdC4gPC90cmFuc2xhdGlvbj4="
translation['61.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcHJvb2ZzIGJ5IHdoaWNoIHlvdSBtdXN0IGJlIGp1ZGdlZCB3b3J0aHkgb2YgbXkgcHJhaXNlcwogICAgICAgICAgICAgICAgICAgIG11c3QgYWxzbyBhY3F1aXQgbWUgb2YgYWxsIGNlbnN1cmUgZm9yIHRoZSBmcmllbmRzaGlwIEkgYmVhciB5b3UuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgd291bGQgbm90IGJlIHByZXNzaW5nIHlvdSBzbyB1cmdlbnRseSB0byBzdHVkeQogICAgICAgICAgICAgICAgICAgICAgICBwaGlsb3NvcGh5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJsYXNzIG5vdGVzIHRoZSBvY2N1cnJlbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgc2VudGVuY2UgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gNi44NyIgdmFsaWQ9InllcyI+SXNvYy4gNi44NzwvYmlibD4sIHdpdGggPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4DhvbYgz4ThvbjOvSDPgOG9uc67zrXOvM6/zr08L2ZvcmVpZ24+IGluc3RlYWQgb2YgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4DhvbYgz4ThvbTOvSDPhs65zrvOv8+Dzr/PhuG9t86xzr08L2ZvcmVpZ24+Ljwvbm90ZT4gdW5sZXNzIEkgdGhvdWdodAogICAgICAgICAgICAgICAgICAgIHRoYXQgaW4gdGhpcyBJIHdhcyBtYWtpbmcgeW91IGEgbW9zdCBwcmVjaW91cyBjb250cmlidXRpb24gYXMgZXZpZGVuY2Ugb2YgbXkKICAgICAgICAgICAgICAgICAgICBnb29kd2lsbCwgYW5kIHVubGVzcyBJIG9ic2VydmVkIHRoYXQgb3VyIGNpdHkgb2Z0ZW4gbWFrZXMgdXNlIG9mIG9yZGluYXJ5IG1lbgogICAgICAgICAgICAgICAgICAgIGZvciBsYWNrIG9mIG1lbiBvZiB0aGUgYmVzdCB0eXBlLCBhbmQgdGhyb3VnaCB0aGVpciBidW5nbGluZyBpbmN1cnMgdGhlIGdyYXZlc3QKICAgICAgICAgICAgICAgICAgICBtaXNmb3J0dW5lcy4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gNi44NyIgdmFsaWQ9InllcyI+SXNvYy4gNi44NzwvYmlibD4sIHdpdGggPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4DhvbYgz4ThvbjOvSDPgOG9uc67zrXOvM6/zr08L2ZvcmVpZ24+IGluc3RlYWQgb2YgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4DhvbYgz4ThvbTOvSDPhs65zrvOv8+Dzr/PhuG9t86xzr08L2ZvcmVpZ24+LjwvdHJhbnNsYXRpb24+"
translation['61.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5TbywgdGhlbiwgaW4gb3JkZXIgdGhhdCBvdXIgY2l0eQogICAgICAgICAgICAgICAgICAgIG1heSBlbmpveSBhYmlsaXRpZXMgc3VjaCBhcyB5b3VycyBhbmQgeW91IHRoZSBob25vcnMgd2hpY2ggdGhlc2UgYWJpbGl0aWVzCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZSwgSSBoYXZlIHVyZ2VkIHlvdSB3aXRoIHNvbWUgdmVoZW1lbmNlLiBOZWl0aGVyIGRvIEkgdGhpbmsgdGhhdCBpdCB3aWxsCiAgICAgICAgICAgICAgICAgICAgYmUgaW4geW91ciBwb3dlciB0byBsaXZlIGFzIGNoYW5jZSBkZWNyZWVzLCBidXQgdGhhdCB0aGUgQ2l0eSB3aWxsIGFwcG9pbnQgeW91CiAgICAgICAgICAgICAgICAgICAgdG8gYmUgaW4gY2hhcmdlIG9mIHNvbWUgZGVwYXJ0bWVudCBvZiBoZXIgYnVzaW5lc3MsIGFuZCBpbiBwcm9wb3J0aW9uIGFzIHlvdXIKICAgICAgICAgICAgICAgICAgICBuYXR1cmFsIGdpZnRzIGFyZSB0aGUgbW9yZSBjb25zcGljdW91cyBpdCB3aWxsIGp1ZGdlIHlvdSB3b3J0aHkgb2YgZ3JlYXRlcgogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpYmlsaXRpZXMgYW5kIHdpbGwgdGhlIHNvb25lciBkZXNpcmUgdG8gbWFrZSB0cmlhbCBvZiB5b3UuIFRoZSB3aXNlIHBsYW4sCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlIGlzIHRvIHRyYWluIHlvdXIgbWluZCB0aGF0IHlvdSBtYXkgbm90IGZhaWwgd2hlbiB0aGF0IGRheSBjb21lcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['61.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGl0IGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gbXkgcGFydCB0byB0ZWxsIHlvdTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CbGFzcyBub3RlcyBhCiAgICAgICAgICAgICAgICAgICAgICAgIHNpbWlsYXJpdHkgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNvYy4gOS44MCIgdmFsaWQ9InllcyI+SXNvYy4gOS44MDwvYmlibD47IHNlZW1pbmdseSBhCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1vbnBsYWNlIG9mIHRoZSBwcm90cmVwdGljIGdlbnJlLjwvbm90ZT4gd2hhdCBzdHVkaWVzIEkgdGhpbmsgaXQgaXMgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIGFkdmFudGFnZSB0byBoYXZlIHB1cnN1ZWQsIGJ1dCBpdCBpcyB5b3VycyB0byBkZWNpZGUgY29uY2VybmluZyB0aGVtLiBUaGVyZQogICAgICAgICAgICAgICAgICAgIGlzIGFuIG9ibGlnYXRpb24gYWxzbyBvbiB0aGUgcmVzdCwgdGhvc2Ugd2hvIHNlZWsgdG8gYmUgb24gaW50aW1hdGUgdGVybXMgd2l0aAogICAgICAgICAgICAgICAgICAgIHlvdSwgbm90IHRvIGJlIGNvbnRlbnQgd2l0aCBzdXBlcmZpY2lhbCBwbGVhc3VyZXMgYW5kIHBhc3RpbWVzLCBub3IgdG8gc3VtbW9uCiAgICAgICAgICAgICAgICAgICAgeW91IHRvIHRoZXNlLCBidXQgdG8gY29uc2lkZXIgZGlsaWdlbnRseSBob3cgdGhleSBtYXkgcmVuZGVyIHlvdXIgY2FyZWVyIG1vc3QKICAgICAgICAgICAgICAgICAgICBicmlsbGlhbnQuIEJ5IHNvIGRvaW5nIHRoZXkgd291bGQgYnJpbmcgbW9zdCBjcmVkaXQgdG8gdGhlbXNlbHZlcyBhbmQgYmVjb21lCiAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudHMgb2YgdGhlIGdyZWF0ZXN0IHNlcnZpY2UgdG8geW91LiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJJc29jLiA5LjgwIiB2YWxpZD0ieWVzIj5Jc29jLiA5LjgwPC9iaWJsPjsgc2VlbWluZ2x5IGEKICAgICAgICAgICAgICAgICAgICAgICAgY29tbW9ucGxhY2Ugb2YgdGhlIHByb3RyZXB0aWMgZ2VucmUuPC90cmFuc2xhdGlvbj4="
