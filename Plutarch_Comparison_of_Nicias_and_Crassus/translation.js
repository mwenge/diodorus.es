var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBDcmFzc3VzIG9wZW5seSB1dGlsaXplZCB0aGVzZSBvcHBvcnR1bml0aWVzIGFzIG1lbiBkbyBhZ3JpY3VsdHVyZSBhbmQgbW9uZXktbGVuZGluZy4gQW5kIGFzIGZvciB0aGUgcHJhY3RpY2VzIHdoaWNoIGhlIGRlbmllZCB3aGVuIG9uIHRyaWFsLCBuYW1lbHksIHRha2luZyBicmliZXMgZm9yIGhpcyB2b2ljZSBpbiB0aGUgc2VuYXRlLCB3cm9uZ2luZyB0aGUgYWxsaWVzLCBjaXJjdW12ZW50aW5nIHdlYWsgd29tZW4gd2l0aCBoaXMgZmxhdHRlcmllcywgYW5kIGFpZGluZyBiYXNlIG1lbiB0byBjbG9hayB0aGVpciBpbmlxdWl0aWVzLCBubyBzdWNoIGNoYXJnZXMsIGV2ZW4gdGhvdWdoIGZhbHNlLCB3ZXJlIGV2ZXIgbWFkZSBhZ2FpbnN0IE5pY2lhczsgbmF5LCBoZSB3YXMgcmF0aGVyIGxhdWdoZWQgYXQgZm9yIHNwZW5kaW5nIGhpcyBtb25leSBsYXZpc2hseSBvbiBpbmZvcm1lcnMgb3V0IG9mIGNvd2FyZGljZSwgYSBwcmFjdGljZSB1bmJlY29taW5nLCBwZXJoYXBzLCBpbiBhIFBlcmljbGVzIGFuZCBhbiBBcmlzdGlkZXMsIGJ1dCBuZWNlc3NhcnkgZm9yIGhpbSwgc2luY2UgaGUgd2FzIG5vdCB3ZWxsIHN0b2NrZWQgd2l0aCBjb3VyYWdlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmb3IgdGhpcyBwcmFjdGljZSBMeWN1cmd1cyB0aGUgb3JhdG9yLCBpbiBsYXRlciB0aW1lcywgYm9sZGx5IHRvb2sgdG8gaGltc2VsZiBjcmVkaXQgYmVmb3JlIHRoZSBwZW9wbGUsIHdoZW4gYWNjdXNlZCBvZiBidXlpbmcgdXAgb25lIG9mIHRoZXNlIGluZm9ybWVyczsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgYW0gZ2xhZCBpbmRlZWQsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCBhZnRlciBzdWNoIGEgbG9uZyBwb2xpdGljYWwgY2FyZWVyIGFtb25nIHlvdSwgSSBoYXZlIGJlZW4gZGV0ZWN0ZWQgaW4gZ2l2aW5nIHJhdGhlciB0aGFuIHJlY2VpdmluZyBtb25leS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGVpciBvdXRsYXlzIG9mIG1vbmV5LCBOaWNpYXMgd2FzIG1vcmUgcHVibGljIHNwaXJpdGVkIGluIGhpcyBub2JsZSBhbWJpdGlvbiB0byBtYWtlIG9mZmVyaW5ncyB0byB0aGUgZ29kcyBhbmQgcHJvdmlkZSB0aGUgcGVvcGxlIHdpdGggZ3ltbmFzdGljIGV4aGliaXRpb25zIGFuZCB0cmFpbmVkIGNob3J1c2VzOyBhbmQgeWV0IGhpcyB3aG9sZSBlc3RhdGUsIHRvZ2V0aGVyIHdpdGggaGlzIGV4cGVuZGl0dXJlcywgd2FzIG5vdCBhIHRpdGhlIG9mIHdoYXQgQ3Jhc3N1cyBleHBlbmRlZCB3aGVuIGhlIGZlYXN0ZWQgc28gbWFueSBteXJpYWRzIG9mIG1lbiBhdCBvbmNlLCBhbmQgdGhlbiBmdXJuaXNoZWQgdGhlbSB3aXRoIGZvb2QgYWZ0ZXJ3YXJkcy4gSSBhbSB0aGVyZWZvcmUgYW1hemVkIHRoYXQgYW55b25lIHNob3VsZCBmYWlsIHRvIHBlcmNlaXZlIHRoYXQgdmljZSBpcyBhIHNvcnQgb2YgaW5lcXVhbGl0eSBhbmQgaW5jb25ncnVpdHkgb2YgY2hhcmFjdGVyLCB3aGVuIGhlIHNlZXMgbWVuIGFtYXNzaW5nIG1vbmV5IHNoYW1lZnVsbHkgYW5kIHNxdWFuZGVyaW5nIGl0IHVzZWxlc3NseS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGVpciBvdXRsYXlzIG9mIG1vbmV5LCBOaWNpYXMgd2FzIG1vcmUgcHVibGljIHNwaXJpdGVkIGluIGhpcyBub2JsZSBhbWJpdGlvbiB0byBtYWtlIG9mZmVyaW5ncyB0byB0aGUgZ29kcyBhbmQgcHJvdmlkZSB0aGUgcGVvcGxlIHdpdGggZ3ltbmFzdGljIGV4aGliaXRpb25zIGFuZCB0cmFpbmVkIGNob3J1c2VzOyBhbmQgeWV0IGhpcyB3aG9sZSBlc3RhdGUsIHRvZ2V0aGVyIHdpdGggaGlzIGV4cGVuZGl0dXJlcywgd2FzIG5vdCBhIHRpdGhlIG9mIHdoYXQgQ3Jhc3N1cyBleHBlbmRlZCB3aGVuIGhlIGZlYXN0ZWQgc28gbWFueSBteXJpYWRzIG9mIG1lbiBhdCBvbmNlLCBhbmQgdGhlbiBmdXJuaXNoZWQgdGhlbSB3aXRoIGZvb2QgYWZ0ZXJ3YXJkcy4gSSBhbSB0aGVyZWZvcmUgYW1hemVkIHRoYXQgYW55b25lIHNob3VsZCBmYWlsIHRvIHBlcmNlaXZlIHRoYXQgdmljZSBpcyBhIHNvcnQgb2YgaW5lcXVhbGl0eSBhbmQgaW5jb25ncnVpdHkgb2YgY2hhcmFjdGVyLCB3aGVuIGhlIHNlZXMgbWVuIGFtYXNzaW5nIG1vbmV5IHNoYW1lZnVsbHkgYW5kIHNxdWFuZGVyaW5nIGl0IHVzZWxlc3NseS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBtdWNoIHJlZ2FyZGluZyB0aGVpciB3ZWFsdGguIEFuZCBub3cgaW4gdGhlaXIgcG9saXRpY2FsIGNhcmVlcnMsIG5vIGNoaWNhbmVyeSBub3IgaW5qdXN0aWNlLCBubyB2aW9sZW5jZSBub3IgaGFyc2huZXNzIGF0dGFjaGVzIHRvIE5pY2lhcywgYnV0IGhlIHdhcyBkZWNlaXZlZCB0aGUgcmF0aGVyIGJ5IEFsY2liaWFkZXMsIGFuZCBtYWRlIGhpcyBhcHBlYWxzIHRvIHRoZSBwZW9wbGUgd2l0aCB0b28gbXVjaCBjYXV0aW9uLiBXaGVyZWFzIENyYXNzdXMgaXMgYWNjdXNlZCBvZiBtdWNoIHVuZ2VuZXJvdXMgZmFpdGhsZXNzbmVzcyBpbiBoaXMgdmFjaWxsYXRpb25zIGJldHdlZW4gZnJpZW5kcyBhbmQgZW5lbWllczsgYW5kIGFzIGZvciB2aW9sZW5jZSwgaGUgaGltc2VsZiBjb3VsZCBub3QgZGVueSB0aGF0IHdoZW4gaGUgc3Rvb2QgZm9yIHRoZSBjb25zdWxzaGlwLCBoZSBoaXJlZCBtZW4gdG8gbGF5IGhhbmRzIG9uIENhdG8gYW5kIERvbWl0aXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW4gdGhlIGFzc2VtYmx5IHdoaWNoIHZvdGVkIG9uIHRoZSBhbGxvdG1lbnQgb2YgdGhlIHByb3ZpbmNlcywgbWFueSB3ZXJlIHdvdW5kZWQgYW5kIGZvdXIga2lsbGVkOyBhbmQgQ3Jhc3N1cyBoaW1zZWxmIChhIGZhY3Qgd2hpY2ggZXNjYXBlZCB1cyBpbiB0aGUgbmFycmF0aXZlIG9mIGhpcyBsaWZlKSwgd2hlbiBMdWNpdXMgQW5uYWxpdXMsIGEgc2VuYXRvciwgd2FzIHNwZWFraW5nIGluIG9wcG9zaXRpb24sIHNtb3RlIGhpbSBpbiB0aGUgZmFjZSB3aXRoIGhpcyBmaXN0IGFuZCBkcm92ZSBoaW0gYmxlZWRpbmcgZnJvbSB0aGUgZm9ydW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBtdWNoIHJlZ2FyZGluZyB0aGVpciB3ZWFsdGguIEFuZCBub3cgaW4gdGhlaXIgcG9saXRpY2FsIGNhcmVlcnMsIG5vIGNoaWNhbmVyeSBub3IgaW5qdXN0aWNlLCBubyB2aW9sZW5jZSBub3IgaGFyc2huZXNzIGF0dGFjaGVzIHRvIE5pY2lhcywgYnV0IGhlIHdhcyBkZWNlaXZlZCB0aGUgcmF0aGVyIGJ5IEFsY2liaWFkZXMsIGFuZCBtYWRlIGhpcyBhcHBlYWxzIHRvIHRoZSBwZW9wbGUgd2l0aCB0b28gbXVjaCBjYXV0aW9uLiBXaGVyZWFzIENyYXNzdXMgaXMgYWNjdXNlZCBvZiBtdWNoIHVuZ2VuZXJvdXMgZmFpdGhsZXNzbmVzcyBpbiBoaXMgdmFjaWxsYXRpb25zIGJldHdlZW4gZnJpZW5kcyBhbmQgZW5lbWllczsgYW5kIGFzIGZvciB2aW9sZW5jZSwgaGUgaGltc2VsZiBjb3VsZCBub3QgZGVueSB0aGF0IHdoZW4gaGUgc3Rvb2QgZm9yIHRoZSBjb25zdWxzaGlwLCBoZSBoaXJlZCBtZW4gdG8gbGF5IGhhbmRzIG9uIENhdG8gYW5kIERvbWl0aXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGUgYXNzZW1ibHkgd2hpY2ggdm90ZWQgb24gdGhlIGFsbG90bWVudCBvZiB0aGUgcHJvdmluY2VzLCBtYW55IHdlcmUgd291bmRlZCBhbmQgZm91ciBraWxsZWQ7IGFuZCBDcmFzc3VzIGhpbXNlbGYgKGEgZmFjdCB3aGljaCBlc2NhcGVkIHVzIGluIHRoZSBuYXJyYXRpdmUgb2YgaGlzIGxpZmUpLCB3aGVuIEx1Y2l1cyBBbm5hbGl1cywgYSBzZW5hdG9yLCB3YXMgc3BlYWtpbmcgaW4gb3Bwb3NpdGlvbiwgc21vdGUgaGltIGluIHRoZSBmYWNlIHdpdGggaGlzIGZpc3QgYW5kIGRyb3ZlIGhpbSBibGVlZGluZyBmcm9tIHRoZSBmb3J1bS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGlmIENyYXNzdXMgd2FzIHZpb2xlbnQgYW5kIHR5cmFubmljYWwgaW4gdGhlc2UgbWF0dGVycywgTmljaWFzIHdlbnQgdG8gdGhlIG90aGVyIGV4dHJlbWUuIEhpcyB0aW1pZGl0eSBhbmQgY293YXJkaWNlIGluIHRoZSBwdWJsaWMgc2VydmljZSwgYW5kIGhpcyBzdWJzZXJ2aWVuY2UgdG8gdGhlIGJhc2VzdCBtZW4sIGRlc2VydmUgdGhlIHNldmVyZXN0IGNlbnN1cmUuIENyYXNzdXMsIGluZGVlZCwgc2hvd2VkIGEgY2VydGFpbiBsb2Z0aW5lc3MgYW5kIGxhcmdlbmVzcyBvZiBzcGlyaXQgaW4gdGhpcyByZWdhcmQsIGZvciBoZSBjb250ZW5kZWQgbm90IHdpdGggbWVuIGxpa2UgQ2xlb24gYW5kIEh5cGVyYm9sdXMsIGZhciBmcm9tIGl0LCBidXQgYWdhaW5zdCB0aGUgYnJpbGxpYW50IENhZXNhciwgYW5kIGFnYWluc3QgUG9tcGV5IHdpdGggaGlzIHRocmVlIHRyaXVtcGhzOyBhbmQgaGUgZGlkIG5vdCBzaHJpbmsgZnJvbSB0aGVpciBwYXRoLCBidXQgbWFkZSBoaW1zZWxmIGEgbWF0Y2ggZm9yIGVhY2ggaW4gcG93ZXIsIGFuZCBpbiB0aGUgZGlnbml0eSBvZiBoaXMgY2Vuc29yaWFsIG9mZmljZSBhY3R1YWxseSBzdXJwYXNzZWQgUG9tcGV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gdGhlIHN1cHJlbWUgc3RydWdnbGVzIG9mIGEgcG9saXRpY2FsIGNhcmVlciBvbmUgbXVzdCBub3QgYWRvcHQgYSBjb3Vyc2Ugd2hpY2ggYXdha2VucyBubyBlbnZ5LCBidXQgb25lIHdoaWNoIGRhenpsZXMgbWVuLCB0aHJvd2luZyBlbnZ5IGludG8gdGhlIHNoYWRlIGJ5IHRoZSBncmVhdG5lc3Mgb2Ygb25lJ3MgcG93ZXIuIEJ1dCBpZiwgbGlrZSBOaWNpYXMsIHlvdSBzZXQgeW91ciBoZWFydCBhYm92ZSBhbGwgZWxzZSBvbiBzZWN1cml0eSBhbmQgcXVpZXQsIGFuZCBmZWFyIEFsY2liaWFkZXMgb24gdGhlIGJlbWEsIGFuZCB0aGUgTGFjZWRhZW1vbmlhbnMgYXQgUHlsb3MsIGFuZCBQZXJkaWNjYXMgaW4gVGhyYWNlLCB0aGVuIHRoZXJlIGlzIGFtcGxlIHJvb20gaW4gdGhlIGNpdHkgd2hlcmUgeW91IGNhbiBzaXQgYXQgbGVpc3VyZSwgcmVtb3ZlZCBmcm9tIGFsbCBhY3Rpdml0eSwgYW5kIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2VhdmluZyBmb3IgeW91cnNlbGYsPC9xPiBhcyBzdW5kcnkgU29waGlzdHMgc2F5LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmEgY3Jvd24gb2YgdHJhbnF1aWxsaXR5LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgbG92ZSBvZiBwZWFjZSwgaW5kZWVkLCBoYWQgc29tZXRoaW5nIGdvZGxpa2UgYWJvdXQgaXQsIGFuZCBoaXMgcHV0dGluZyBhIHN0b3AgdG8gdGhlIHdhciB3YXMgYSBwb2xpdGljYWwgYWNoaWV2ZW1lbnQgbW9zdCB0cnVseSBIZWxsZW5pYyBpbiBpdHMgc2NvcGUuIEFuZCBiZWNhdXNlIE5pY2lhcyBkaWQgdGhpcywgQ3Jhc3N1cyBpcyBub3Qgd29ydGh5IG9mIGNvbXBhcmlzb24gd2l0aCBoaW0sIG5vciB3b3VsZCBoZSBoYXZlIGJlZW4gZXZlbiB0aG91Z2ggaW4gaGlzIGFyZG91ciBoZSBoYWQgbWFkZSB0aGUgQ2FzcGlhbiBTZWEgb3IgdGhlIEluZGlhbiBPY2VhbiBhIGJvdW5kYXJ5IG9mIHRoZSBSb21hbiBlbXBpcmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiBDcmFzc3VzIHdhcyB2aW9sZW50IGFuZCB0eXJhbm5pY2FsIGluIHRoZXNlIG1hdHRlcnMsIE5pY2lhcyB3ZW50IHRvIHRoZSBvdGhlciBleHRyZW1lLiBIaXMgdGltaWRpdHkgYW5kIGNvd2FyZGljZSBpbiB0aGUgcHVibGljIHNlcnZpY2UsIGFuZCBoaXMgc3Vic2VydmllbmNlIHRvIHRoZSBiYXNlc3QgbWVuLCBkZXNlcnZlIHRoZSBzZXZlcmVzdCBjZW5zdXJlLiBDcmFzc3VzLCBpbmRlZWQsIHNob3dlZCBhIGNlcnRhaW4gbG9mdGluZXNzIGFuZCBsYXJnZW5lc3Mgb2Ygc3Bpcml0IGluIHRoaXMgcmVnYXJkLCBmb3IgaGUgY29udGVuZGVkIG5vdCB3aXRoIG1lbiBsaWtlIENsZW9uIGFuZCBIeXBlcmJvbHVzLCBmYXIgZnJvbSBpdCwgYnV0IGFnYWluc3QgdGhlIGJyaWxsaWFudCBDYWVzYXIsIGFuZCBhZ2FpbnN0IFBvbXBleSB3aXRoIGhpcyB0aHJlZSB0cml1bXBoczsgYW5kIGhlIGRpZCBub3Qgc2hyaW5rIGZyb20gdGhlaXIgcGF0aCwgYnV0IG1hZGUgaGltc2VsZiBhIG1hdGNoIGZvciBlYWNoIGluIHBvd2VyLCBhbmQgaW4gdGhlIGRpZ25pdHkgb2YgaGlzIGNlbnNvcmlhbCBvZmZpY2UgYWN0dWFsbHkgc3VycGFzc2VkIFBvbXBleS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiB0aGUgc3VwcmVtZSBzdHJ1Z2dsZXMgb2YgYSBwb2xpdGljYWwgY2FyZWVyIG9uZSBtdXN0IG5vdCBhZG9wdCBhIGNvdXJzZSB3aGljaCBhd2FrZW5zIG5vIGVudnksIGJ1dCBvbmUgd2hpY2ggZGF6emxlcyBtZW4sIHRocm93aW5nIGVudnkgaW50byB0aGUgc2hhZGUgYnkgdGhlIGdyZWF0bmVzcyBvZiBvbmUncyBwb3dlci4gQnV0IGlmLCBsaWtlIE5pY2lhcywgeW91IHNldCB5b3VyIGhlYXJ0IGFib3ZlIGFsbCBlbHNlIG9uIHNlY3VyaXR5IGFuZCBxdWlldCwgYW5kIGZlYXIgQWxjaWJpYWRlcyBvbiB0aGUgYmVtYSwgYW5kIHRoZSBMYWNlZGFlbW9uaWFucyBhdCBQeWxvcywgYW5kIFBlcmRpY2NhcyBpbiBUaHJhY2UsIHRoZW4gdGhlcmUgaXMgYW1wbGUgcm9vbSBpbiB0aGUgY2l0eSB3aGVyZSB5b3UgY2FuIHNpdCBhdCBsZWlzdXJlLCByZW1vdmVkIGZyb20gYWxsIGFjdGl2aXR5LCBhbmQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndlYXZpbmcgZm9yIHlvdXJzZWxmLDwvcT4gYXMgc3VuZHJ5IFNvcGhpc3RzIHNheSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmEgY3Jvd24gb2YgdHJhbnF1aWxsaXR5LjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBsb3ZlIG9mIHBlYWNlLCBpbmRlZWQsIGhhZCBzb21ldGhpbmcgZ29kbGlrZSBhYm91dCBpdCwgYW5kIGhpcyBwdXR0aW5nIGEgc3RvcCB0byB0aGUgd2FyIHdhcyBhIHBvbGl0aWNhbCBhY2hpZXZlbWVudCBtb3N0IHRydWx5IEhlbGxlbmljIGluIGl0cyBzY29wZS4gQW5kIGJlY2F1c2UgTmljaWFzIGRpZCB0aGlzLCBDcmFzc3VzIGlzIG5vdCB3b3J0aHkgb2YgY29tcGFyaXNvbiB3aXRoIGhpbSwgbm9yIHdvdWxkIGhlIGhhdmUgYmVlbiBldmVuIHRob3VnaCBpbiBoaXMgYXJkb3VyIGhlIGhhZCBtYWRlIHRoZSBDYXNwaWFuIFNlYSBvciB0aGUgSW5kaWFuIE9jZWFuIGEgYm91bmRhcnkgb2YgdGhlIFJvbWFuIGVtcGlyZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBob3dldmVyLCBhIG1hbiB3aWVsZHMgc3VwZXJpb3IgcG93ZXIgaW4gYSBjaXR5IHdoaWNoIGlzIG9wZW4gdG8gdGhlIGFwcGVhbHMgb2YgdmlydHVlLCBoZSBzaG91bGQgbm90IGdpdmUgYSBmb290aW5nIHRvIHRoZSBiYXNlLCBub3IgY29tbWFuZCB0byB0aG9zZSB3aG8gYXJlIG5vIGNvbW1hbmRlcnMgYXQgYWxsLCBub3IgY29uZmlkZW5jZSB0byB0aG9zZSB3aG8gZGVzZXJ2ZSBubyBjb25maWRlbmNlLiBCdXQgdGhpcyBpcyBqdXN0IHdoYXQgTmljaWFzIGRpZCB3aGVuLCBvZiBoaXMgb3duIG1vdGlvbiwgaGUgc2V0IENsZW9uIGluIGNvbW1hbmQgb2YgdGhlIGFybXksIGEgbWFuIHdobyB3YXMgbm90aGluZyBtb3JlIHRvIHRoZSBjaXR5IHRoYW4gYSBzaGFtZWxlc3MgYnJhd2xlciBmcm9tIHRoZSBiZW1hLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JIGRvIG5vdCwgaW5kZWVkLCBjb21tZW5kIENyYXNzdXMsIGluIHRoZSB3YXIgd2l0aCBTcGFydGFjdXMsIGZvciBwcmVzc2luZyBmb3J3YXJkIGludG8gYWN0aW9uIHdpdGggZ3JlYXRlciBzcGVlZCB0aGFuIHNhZmV0eSwgYWx0aG91Z2ggaXQgd2FzIG5hdHVyYWwgZm9yIGEgbWFuIG9mIGhpcyBhbWJpdGlvbiB0byBmZWFyIHRoYXQgUG9tcGV5IHdvdWxkIGNvbWUgYW5kIHJvYiBoaW0gb2YgaGlzIGdsb3J5LCBqdXN0IGFzIE11bW1pdXMgaGFkIHJvYmJlZCBNZXRlbGx1cyBvZiBDb3JpbnRoOyBidXQgdGhlIGNvbmR1Y3Qgb2YgTmljaWFzIHdhcyBhbHRvZ2V0aGVyIHN0cmFuZ2UgYW5kIHRlcnJpYmxlLiBGb3IgaXQgd2FzIG5vdCB3aGlsZSBpdCBhZmZvcmRlZCBoaW0gZ29vZCBob3BlcyBvZiBzdWNjZXNzLCBvciBldmVuIG9mIGVhc2UsIHRoYXQgaGUgcmVub3VuY2VkIGhpcyBhbWJpdGlvbiB0byBob2xkIHRoZSBjb21tYW5kIGluIGZhdm91ciBvZiBoaXMgZW5lbXksIGJ1dCB3aGVuIGhlIHNhdyB0aGF0IGhpcyBnZW5lcmFsc2hpcCBpbnZvbHZlZCBoaW0gaW4gZ3JlYXQgcGVyaWwsIHRoZW4gaGUgd2FzIGNvbnRlbnQgdG8gYmV0cmF5IHRoZSBjb21tb24gZ29vZCBhdCB0aGUgcHJpY2Ugb2YgaGlzIG93biBzYWZldHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgVGhlbWlzdG9jbGVzLCBkdXJpbmcgdGhlIFBlcnNpYW4gd2FycywgdG8gcHJldmVudCBhIHdvcnRobGVzcyBhbmQgc2Vuc2VsZXNzIG1hbiBmcm9tIHJ1aW5pbmcgdGhlIGNpdHkgYXMgb25lIG9mIGl0cyBnZW5lcmFscywgYm91Z2h0IGhpbSBvZmYgZnJvbSB0aGUgb2ZmaWNlOyBhbmQgQ2F0byBzdG9vZCBmb3IgdGhlIHRyaWJ1bmVzaGlwIHdoZW4gaGUgc2F3IHRoYXQgaXQgd291bGQgaW52b2x2ZSBoaW0gaW4gdGhlIGdyZWF0ZXN0IHRvaWwgYW5kIGRhbmdlciBpbiBiZWhhbGYgb2YgdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5pY2lhcywgb24gdGhlIG90aGVyIGhhbmQsIGtlcHQgaGltc2VsZiBpbiB0aGUgY29tbWFuZCBhZ2FpbnN0IE1pbm9hLCBhbmQgQ3l0aGVyYSwgYW5kIHRoZSB3cmV0Y2hlZCBNZWxpYW5zLCBidXQgd2hlbiBpdCB3YXMgbmVjZXNzYXJ5IHRvIGZpZ2h0IHRoZSBMYWNlZGFlbW9uaWFucywgc3RyaXBwZWQgb2ZmIGhpcyBnZW5lcmFsJ3MgY2xvYWssIGhhbmRlZCBvdmVyIHRvIHRoZSBpbmV4cGVyaWVuY2UgYW5kIHJhc2huZXNzIG9mIENsZW9uIHNoaXBzLCBtZW4sIGFybXMsIGFuZCBhIGNvbW1hbmQgcmVxdWlyaW5nIHRoZSB1dG1vc3QgZXhwZXJpZW5jZSwgYW5kIHNvIGJldHJheWVkIG5vdCBvbmx5IGhpcyBvd24gcmVwdXRhdGlvbiwgYnV0IHRoZSBzZWN1cml0eSBhbmQgc2FmZXR5IG9mIGhpcyBvd24gY291bnRyeS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlIGhlIHdhcyBhZnRlcndhcmRzIGZvcmNlZCwgYWdhaW5zdCBoaXMgd2lzaCBhbmQgaW5jbGluYXRpb24sIHRvIHdhZ2Ugd2FyIG9uIFN5cmFjdXNlLCBmb3IgaXQgd2FzIHRob3VnaHQgdG8gYmUgbm8gY2FsY3VsYXRpb24gb2Ygd2hhdCB3YXMgZXhwZWRpZW50LCBidXQgbWVyZWx5IGhpcyBsb3ZlIG9mIGVhc2UgYW5kIGxhY2sgb2Ygc3Bpcml0IHdoaWNoIG1hZGUgaGltIHVzZSBhbGwgaGlzIGVmZm9ydHMgdG8gcm9iIHRoZSBjaXR5IG9mIFNpY2lseS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBob3dldmVyLCBhIG1hbiB3aWVsZHMgc3VwZXJpb3IgcG93ZXIgaW4gYSBjaXR5IHdoaWNoIGlzIG9wZW4gdG8gdGhlIGFwcGVhbHMgb2YgdmlydHVlLCBoZSBzaG91bGQgbm90IGdpdmUgYSBmb290aW5nIHRvIHRoZSBiYXNlLCBub3IgY29tbWFuZCB0byB0aG9zZSB3aG8gYXJlIG5vIGNvbW1hbmRlcnMgYXQgYWxsLCBub3IgY29uZmlkZW5jZSB0byB0aG9zZSB3aG8gZGVzZXJ2ZSBubyBjb25maWRlbmNlLiBCdXQgdGhpcyBpcyBqdXN0IHdoYXQgTmljaWFzIGRpZCB3aGVuLCBvZiBoaXMgb3duIG1vdGlvbiwgaGUgc2V0IENsZW9uIGluIGNvbW1hbmQgb2YgdGhlIGFybXksIGEgbWFuIHdobyB3YXMgbm90aGluZyBtb3JlIHRvIHRoZSBjaXR5IHRoYW4gYSBzaGFtZWxlc3MgYnJhd2xlciBmcm9tIHRoZSBiZW1hLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkkgZG8gbm90LCBpbmRlZWQsIGNvbW1lbmQgQ3Jhc3N1cywgaW4gdGhlIHdhciB3aXRoIFNwYXJ0YWN1cywgZm9yIHByZXNzaW5nIGZvcndhcmQgaW50byBhY3Rpb24gd2l0aCBncmVhdGVyIHNwZWVkIHRoYW4gc2FmZXR5LCBhbHRob3VnaCBpdCB3YXMgbmF0dXJhbCBmb3IgYSBtYW4gb2YgaGlzIGFtYml0aW9uIHRvIGZlYXIgdGhhdCBQb21wZXkgd291bGQgY29tZSBhbmQgcm9iIGhpbSBvZiBoaXMgZ2xvcnksIGp1c3QgYXMgTXVtbWl1cyBoYWQgcm9iYmVkIE1ldGVsbHVzIG9mIENvcmludGg7IGJ1dCB0aGUgY29uZHVjdCBvZiBOaWNpYXMgd2FzIGFsdG9nZXRoZXIgc3RyYW5nZSBhbmQgdGVycmlibGUuIEZvciBpdCB3YXMgbm90IHdoaWxlIGl0IGFmZm9yZGVkIGhpbSBnb29kIGhvcGVzIG9mIHN1Y2Nlc3MsIG9yIGV2ZW4gb2YgZWFzZSwgdGhhdCBoZSByZW5vdW5jZWQgaGlzIGFtYml0aW9uIHRvIGhvbGQgdGhlIGNvbW1hbmQgaW4gZmF2b3VyIG9mIGhpcyBlbmVteSwgYnV0IHdoZW4gaGUgc2F3IHRoYXQgaGlzIGdlbmVyYWxzaGlwIGludm9sdmVkIGhpbSBpbiBncmVhdCBwZXJpbCwgdGhlbiBoZSB3YXMgY29udGVudCB0byBiZXRyYXkgdGhlIGNvbW1vbiBnb29kIGF0IHRoZSBwcmljZSBvZiBoaXMgb3duIHNhZmV0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgVGhlbWlzdG9jbGVzLCBkdXJpbmcgdGhlIFBlcnNpYW4gd2FycywgdG8gcHJldmVudCBhIHdvcnRobGVzcyBhbmQgc2Vuc2VsZXNzIG1hbiBmcm9tIHJ1aW5pbmcgdGhlIGNpdHkgYXMgb25lIG9mIGl0cyBnZW5lcmFscywgYm91Z2h0IGhpbSBvZmYgZnJvbSB0aGUgb2ZmaWNlOyBhbmQgQ2F0byBzdG9vZCBmb3IgdGhlIHRyaWJ1bmVzaGlwIHdoZW4gaGUgc2F3IHRoYXQgaXQgd291bGQgaW52b2x2ZSBoaW0gaW4gdGhlIGdyZWF0ZXN0IHRvaWwgYW5kIGRhbmdlciBpbiBiZWhhbGYgb2YgdGhlIGNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5pY2lhcywgb24gdGhlIG90aGVyIGhhbmQsIGtlcHQgaGltc2VsZiBpbiB0aGUgY29tbWFuZCBhZ2FpbnN0IE1pbm9hLCBhbmQgQ3l0aGVyYSwgYW5kIHRoZSB3cmV0Y2hlZCBNZWxpYW5zLCBidXQgd2hlbiBpdCB3YXMgbmVjZXNzYXJ5IHRvIGZpZ2h0IHRoZSBMYWNlZGFlbW9uaWFucywgc3RyaXBwZWQgb2ZmIGhpcyBnZW5lcmFsJ3MgY2xvYWssIGhhbmRlZCBvdmVyIHRvIHRoZSBpbmV4cGVyaWVuY2UgYW5kIHJhc2huZXNzIG9mIENsZW9uIHNoaXBzLCBtZW4sIGFybXMsIGFuZCBhIGNvbW1hbmQgcmVxdWlyaW5nIHRoZSB1dG1vc3QgZXhwZXJpZW5jZSwgYW5kIHNvIGJldHJheWVkIG5vdCBvbmx5IGhpcyBvd24gcmVwdXRhdGlvbiwgYnV0IHRoZSBzZWN1cml0eSBhbmQgc2FmZXR5IG9mIGhpcyBvd24gY291bnRyeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSBoZSB3YXMgYWZ0ZXJ3YXJkcyBmb3JjZWQsIGFnYWluc3QgaGlzIHdpc2ggYW5kIGluY2xpbmF0aW9uLCB0byB3YWdlIHdhciBvbiBTeXJhY3VzZSwgZm9yIGl0IHdhcyB0aG91Z2h0IHRvIGJlIG5vIGNhbGN1bGF0aW9uIG9mIHdoYXQgd2FzIGV4cGVkaWVudCwgYnV0IG1lcmVseSBoaXMgbG92ZSBvZiBlYXNlIGFuZCBsYWNrIG9mIHNwaXJpdCB3aGljaCBtYWRlIGhpbSB1c2UgYWxsIGhpcyBlZmZvcnRzIHRvIHJvYiB0aGUgY2l0eSBvZiBTaWNpbHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmUgaXMsIGhvd2V2ZXIsIHRoaXMgcHJvb2Ygb2YgaGlzIGdyZWF0IHJlYXNvbmFibGVuZXNzLCBuYW1lbHksIHRoYXQgYWx0aG91Z2ggaGUgd2FzIGFsd2F5cyBhdmVyc2UgdG8gd2FyIGFuZCBhdm9pZGVkIG1pbGl0YXJ5IGNvbW1hbmQsIHRoZSBBdGhlbmlhbnMgY2Vhc2VkIG5vdCB0byBlbGVjdCBoaW0gdG8gaXQsIGJlbGlldmluZyBoaW0gdG8gYmUgdGhlaXIgbW9zdCBleHBlcmllbmNlZCBhbmQgYmVzdCBnZW5lcmFsLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlYXMgQ3Jhc3N1cywgdGhvdWdoIGhlIHdhcyBhbGwgdGhlIHdoaWxlIGVhZ2VyIGZvciBtaWxpdGFyeSBjb21tYW5kLCBkaWQgbm90IHN1Y2NlZWQgaW4gZ2V0dGluZyBpdCBleGNlcHQgaW4gdGhlIHNlcnZpbGUgd2FyLCBhbmQgdGhlbiBvZiBuZWNlc3NpdHksIGJlY2F1c2UgUG9tcGV5IGFuZCBNZXRlbGx1cyBhbmQgYm90aCB0aGUgTHVjdWxsaSB3ZXJlIGF3YXkuIEFuZCB5ZXQgYnkgdGhhdCB0aW1lIGhlIGhhZCBhY3F1aXJlZCB0aGUgZ3JlYXRlc3QgaG9ub3VyIGFuZCBpbmZsdWVuY2UgaW4gdGhlIGNpdHkuIEJ1dCBpdCB3b3VsZCBzZWVtIHRoYXQgZXZlbiBoaXMgYmVzdCBmcmllbmRzIHRob3VnaHQgaGltLCBpbiB0aGUgd29yZHMgb2YgdGhlIGNvbWljIHBvZXQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIGJyYXZlc3Qgd2FycmlvciBldmVyeXdoZXJlIGJ1dCBpbiB0aGUgZmllbGQuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBpYW1iaWMgdHJpbWV0ZXIgb2YgdW5rbm93biBhdXRob3JzaGlwIChLb2NrLCA8dGl0bGU+Q29tLiBBdHQuIEZyYWcuPC90aXRsZT4gaWlpLiBwLiA0OTMpLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IHRoaXMgZGlkIG5vdCBwcmV2ZW50IHRoZSBSb21hbnMgZnJvbSBiZWluZyBvdmVyd2hlbG1lZCBieSBoaXMgYW1iaXRpb3VzIGxvdmUgb2YgY29tbWFuZC4gRm9yIHRoZSBBdGhlbmlhbnMgc2VudCBOaWNpYXMgb3V0IHRvIHRoZSB3YXIgYWdhaW5zdCBoaXMgd2lsbDsgYnV0IHRoZSBSb21hbnMgd2VyZSBsZWQgb3V0IGJ5IENyYXNzdXMgYWdhaW5zdCB0aGVpcnMuIEl0IHdhcyBvd2luZyB0byBDcmFzc3VzIHRoYXQgaGlzIGNpdHksIGJ1dCB0byBoaXMgY2l0eSB0aGF0IE5pY2lhcywgc3VmZmVyZWQgbWlzZm9ydHVuZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlYXMgQ3Jhc3N1cywgdGhvdWdoIGhlIHdhcyBhbGwgdGhlIHdoaWxlIGVhZ2VyIGZvciBtaWxpdGFyeSBjb21tYW5kLCBkaWQgbm90IHN1Y2NlZWQgaW4gZ2V0dGluZyBpdCBleGNlcHQgaW4gdGhlIHNlcnZpbGUgd2FyLCBhbmQgdGhlbiBvZiBuZWNlc3NpdHksIGJlY2F1c2UgUG9tcGV5IGFuZCBNZXRlbGx1cyBhbmQgYm90aCB0aGUgTHVjdWxsaSB3ZXJlIGF3YXkuIEFuZCB5ZXQgYnkgdGhhdCB0aW1lIGhlIGhhZCBhY3F1aXJlZCB0aGUgZ3JlYXRlc3QgaG9ub3VyIGFuZCBpbmZsdWVuY2UgaW4gdGhlIGNpdHkuIEJ1dCBpdCB3b3VsZCBzZWVtIHRoYXQgZXZlbiBoaXMgYmVzdCBmcmllbmRzIHRob3VnaHQgaGltLCBpbiB0aGUgd29yZHMgb2YgdGhlIGNvbWljIHBvZXQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgYnJhdmVzdCB3YXJyaW9yIGV2ZXJ5d2hlcmUgYnV0IGluIHRoZSBmaWVsZC48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gaWFtYmljIHRyaW1ldGVyIG9mIHVua25vd24gYXV0aG9yc2hpcCAoS29jaywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tLiBBdHQuIEZyYWcuPC90aXRsZT4gaWlpLiBwLiA0OTMpLjwvbm90ZT4gCgkJCQkgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbS4gQXR0LiBGcmFnLjwvdGl0bGU+IGlpaS4gcC4gNDkzKS48L3RyYW5zbGF0aW9uPg=="
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhpcyBkaWQgbm90IHByZXZlbnQgdGhlIFJvbWFucyBmcm9tIGJlaW5nIG92ZXJ3aGVsbWVkIGJ5IGhpcyBhbWJpdGlvdXMgbG92ZSBvZiBjb21tYW5kLiBGb3IgdGhlIEF0aGVuaWFucyBzZW50IE5pY2lhcyBvdXQgdG8gdGhlIHdhciBhZ2FpbnN0IGhpcyB3aWxsOyBidXQgdGhlIFJvbWFucyB3ZXJlIGxlZCBvdXQgYnkgQ3Jhc3N1cyBhZ2FpbnN0IHRoZWlycy4gSXQgd2FzIG93aW5nIHRvIENyYXNzdXMgdGhhdCBoaXMgY2l0eSwgYnV0IHRvIGhpcyBjaXR5IHRoYXQgTmljaWFzLCBzdWZmZXJlZCBtaXNmb3J0dW5lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGluIHRoaXMgdGhlcmUgaXMgbW9yZSBncm91bmQgZm9yIHByYWlzaW5nIE5pY2lhcyB0aGFuIGZvciBibGFtaW5nIENyYXNzdXMuIFRoZSBmb3JtZXIgYnJvdWdodCBpbnRvIHBsYXkgdGhlIGV4cGVyaWVuY2UgYW5kIGNhbGN1bGF0aW9uIG9mIGEgd2lzZSBsZWFkZXIsIGFuZCBkaWQgbm90IHNoYXJlIHRoZSBkZWNlaXRmdWwgaG9wZXMgb2YgaGlzIGZlbGxvdy1jaXRpemVucywgYnV0IGluc2lzdGVkIHRoYXQgaXQgd2FzIGJleW9uZCBoaXMgcG93ZXIgdG8gdGFrZSBTaWNpbHk7IHdoZXJlYXMgQ3Jhc3N1cyBtYWRlIHRoZSBtaXN0YWtlIG9mIGVudGVyaW5nIHVwb24gdGhlIFBhcnRoaWFuIHdhciBhcyBhIHZlcnkgZWFzeSB1bmRlcnRha2luZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBoaXMgYWltcyB3ZXJlIGhpZ2g7IHdoaWxlIENhZXNhciB3YXMgc3ViZHVpbmcgdGhlIFdlc3Qs4oCUR2F1bCBhbmQgR2VybWFueSBhbmQgQnJpdGFpbizigJRoZSBpbnNpc3RlZCBvbiBtYXJjaGluZyBhZ2FpbnN0IHRoZSBFYXN0IGFuZCBJbmRpYSwgYW5kIG9uIGNvbXBsZXRpbmcgdGhlIHJlZHVjdGlvbiBvZiBBc2lhIHdoaWNoIGhhZCBiZWVuIGJlZ3VuIGJ5IFBvbXBleSBhbmQgTHVjdWxsdXMuIE5vdyB0aGVzZSB3ZXJlIG1lbiBvZiBnb29kIGludGVudGlvbnMgYW5kIGhvbm91cmFibHkgZGlzcG9zZWQgdG93YXJkcyBhbGwsIGFuZCB5ZXQgdGhleSBlbGVjdGVkIHRoZSBzYW1lIGNvdXJzZSBhcyBDcmFzc3VzLCBhbmQgYWRvcHRlZCB0aGUgc2FtZSBwcmluY2lwbGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgUG9tcGV5IG1ldCB3aXRoIG9wcG9zaXRpb24gZnJvbSB0aGUgc2VuYXRlIHdoZW4gaGlzIHByb3ZpbmNlIHdhcyBhbGxvdHRlZCB0byBoaW0sIGFuZCB3aGVuIENhZXNhciByb3V0ZWQgdGhyZWUgaHVuZHJlZCB0aG91c2FuZCBHZXJtYW5zLCBDYXRvIG1vdmVkIGluIHRoZSBzZW5hdGUgdGhhdCBoZSBzaG91bGQgYmUgZGVsaXZlcmVkIHVwIHRvIHRob3NlIHdob20gaGUgaGFkIHZhbnF1aXNoZWQsIGFuZCBzbyBicmluZyB1cG9uIGhpcyBvd24gaGVhZCB0aGUgcHVuaXNobWVudCBmb3IgaGlzIGJyZWFjaCBvZiBmYWl0aDsgYnV0IHRoZSBwZW9wbGUgdHVybmVkIGNvbnRlbXB0dW91c2x5IGZyb20gQ2F0bywgc2FjcmlmaWNlZCB0byB0aGUgZ29kcyBmb3IgZmlmdGVlbiBkYXlzIGluIGhvbm91ciBvZiBDYWVzYXIncyB2aWN0b3J5LCBhbmQgd2VyZSBmdWxsIG9mIGpveS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCwgdGhlbiwgd291bGQgaGF2ZSBiZWVuIHRoZWlyIGZlZWxpbmdzLCBhbmQgZm9yIGhvdyBtYW55IGRheXMgd291bGQgdGhleSBoYXZlIHNhY3JpZmljZWQgdG8gdGhlIGdvZHMsIGlmIENyYXNzdXMgaGFkIHdyaXR0ZW4gdG8gdGhlbSBmcm9tIEJhYnlsb24gdGhhdCBoZSB3YXMgdmljdG9yaW91cywgYW5kIGhhZCB0aGVuIG92ZXJydW4gTWVkaWEsIFBlcnNpYSwgSHlyY2FuaWEsIFN1c2EsIGFuZCBCYWN0cmlhLCBhbmQgZGVjbGFyZWQgdGhlbSBSb21hbiBwcm92aW5jZXM/IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIGlmIHdyb25nIG11c3QgYmUgZG9uZSw8L3E+IGFzIEV1cmlwaWRlcyBzYXlzLCB3aGVuIG1lbiBjYW5ub3Qga2VlcCBxdWlldCwgYW5kIGtub3cgbm90IGhvdyB0byBlbmpveSBjb250ZW50ZWRseSB0aGUgYmxlc3NpbmdzIHdoaWNoIHRoZXkgYWxyZWFkeSBoYXZlLCB0aGVuIGxldCBpdCBub3QgYmUgaW4gcmFpZGluZyBTY2FuZGVpYSBvciBNZW5kZSwgbm9yIGluIGJlYXRpbmcgdXAgZnVnaXRpdmUgQWVnaW5ldGFucywgd2hvIGhhdmUgZm9yc2FrZW4gdGhlaXIgb3duLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaGlkZGVuIHRoZW1zZWx2ZXMgYXdheSBsaWtlIGJpcmRzIGluIGFub3RoZXIgdGVycml0b3J5LCBidXQgbGV0IGEgaGlnaCBwcmljZSBiZSBkZW1hbmRlZCBmb3IgdGhlIHdyb25nZG9pbmcsIGFuZCBsZXQgbm90IGp1c3RpY2UgYmUgdGhyb3duIHRvIHRoZSB3aW5kcyBsaWdodGx5LCBub3Igb24gdGhlIGZpcnN0IGJlc3QgdGVybXMsIGFzIGlmIGl0IHdlcmUgc29tZSB0cmlmbGluZyBvciBpbnNpZ25pZmljYW50IHRoaW5nLiBUaG9zZSB3aG8gaGF2ZSBwcmFpc2UgZm9yIEFsZXhhbmRlcidzIGV4cGVkaXRpb24sIGJ1dCBibGFtZSBmb3IgdGhhdCBvZiBDcmFzc3VzLCB1bmZhaXJseSBqdWRnZSBvZiBhIGJlZ2lubmluZyBieSBpdHMgZW5kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBpbiB0aGlzIHRoZXJlIGlzIG1vcmUgZ3JvdW5kIGZvciBwcmFpc2luZyBOaWNpYXMgdGhhbiBmb3IgYmxhbWluZyBDcmFzc3VzLiBUaGUgZm9ybWVyIGJyb3VnaHQgaW50byBwbGF5IHRoZSBleHBlcmllbmNlIGFuZCBjYWxjdWxhdGlvbiBvZiBhIHdpc2UgbGVhZGVyLCBhbmQgZGlkIG5vdCBzaGFyZSB0aGUgZGVjZWl0ZnVsIGhvcGVzIG9mIGhpcyBmZWxsb3ctY2l0aXplbnMsIGJ1dCBpbnNpc3RlZCB0aGF0IGl0IHdhcyBiZXlvbmQgaGlzIHBvd2VyIHRvIHRha2UgU2ljaWx5OyB3aGVyZWFzIENyYXNzdXMgbWFkZSB0aGUgbWlzdGFrZSBvZiBlbnRlcmluZyB1cG9uIHRoZSBQYXJ0aGlhbiB3YXIgYXMgYSB2ZXJ5IGVhc3kgdW5kZXJ0YWtpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaGlzIGFpbXMgd2VyZSBoaWdoOyB3aGlsZSBDYWVzYXIgd2FzIHN1YmR1aW5nIHRoZSBXZXN0LOKAlEdhdWwgYW5kIEdlcm1hbnkgYW5kIEJyaXRhaW4s4oCUaGUgaW5zaXN0ZWQgb24gbWFyY2hpbmcgYWdhaW5zdCB0aGUgRWFzdCBhbmQgSW5kaWEsIGFuZCBvbiBjb21wbGV0aW5nIHRoZSByZWR1Y3Rpb24gb2YgQXNpYSB3aGljaCBoYWQgYmVlbiBiZWd1biBieSBQb21wZXkgYW5kIEx1Y3VsbHVzLiBOb3cgdGhlc2Ugd2VyZSBtZW4gb2YgZ29vZCBpbnRlbnRpb25zIGFuZCBob25vdXJhYmx5IGRpc3Bvc2VkIHRvd2FyZHMgYWxsLCBhbmQgeWV0IHRoZXkgZWxlY3RlZCB0aGUgc2FtZSBjb3Vyc2UgYXMgQ3Jhc3N1cywgYW5kIGFkb3B0ZWQgdGhlIHNhbWUgcHJpbmNpcGxlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBQb21wZXkgbWV0IHdpdGggb3Bwb3NpdGlvbiBmcm9tIHRoZSBzZW5hdGUgd2hlbiBoaXMgcHJvdmluY2Ugd2FzIGFsbG90dGVkIHRvIGhpbSwgYW5kIHdoZW4gQ2Flc2FyIHJvdXRlZCB0aHJlZSBodW5kcmVkIHRob3VzYW5kIEdlcm1hbnMsIENhdG8gbW92ZWQgaW4gdGhlIHNlbmF0ZSB0aGF0IGhlIHNob3VsZCBiZSBkZWxpdmVyZWQgdXAgdG8gdGhvc2Ugd2hvbSBoZSBoYWQgdmFucXVpc2hlZCwgYW5kIHNvIGJyaW5nIHVwb24gaGlzIG93biBoZWFkIHRoZSBwdW5pc2htZW50IGZvciBoaXMgYnJlYWNoIG9mIGZhaXRoOyBidXQgdGhlIHBlb3BsZSB0dXJuZWQgY29udGVtcHR1b3VzbHkgZnJvbSBDYXRvLCBzYWNyaWZpY2VkIHRvIHRoZSBnb2RzIGZvciBmaWZ0ZWVuIGRheXMgaW4gaG9ub3VyIG9mIENhZXNhcidzIHZpY3RvcnksIGFuZCB3ZXJlIGZ1bGwgb2Ygam95LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoYXQsIHRoZW4sIHdvdWxkIGhhdmUgYmVlbiB0aGVpciBmZWVsaW5ncywgYW5kIGZvciBob3cgbWFueSBkYXlzIHdvdWxkIHRoZXkgaGF2ZSBzYWNyaWZpY2VkIHRvIHRoZSBnb2RzLCBpZiBDcmFzc3VzIGhhZCB3cml0dGVuIHRvIHRoZW0gZnJvbSBCYWJ5bG9uIHRoYXQgaGUgd2FzIHZpY3RvcmlvdXMsIGFuZCBoYWQgdGhlbiBvdmVycnVuIE1lZGlhLCBQZXJzaWEsIEh5cmNhbmlhLCBTdXNhLCBhbmQgQmFjdHJpYSwgYW5kIGRlY2xhcmVkIHRoZW0gUm9tYW4gcHJvdmluY2VzPyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIGlmIHdyb25nIG11c3QgYmUgZG9uZSw8L3E+IGFzIEV1cmlwaWRlcyBzYXlzLCB3aGVuIG1lbiBjYW5ub3Qga2VlcCBxdWlldCwgYW5kIGtub3cgbm90IGhvdyB0byBlbmpveSBjb250ZW50ZWRseSB0aGUgYmxlc3NpbmdzIHdoaWNoIHRoZXkgYWxyZWFkeSBoYXZlLCB0aGVuIGxldCBpdCBub3QgYmUgaW4gcmFpZGluZyBTY2FuZGVpYSBvciBNZW5kZSwgbm9yIGluIGJlYXRpbmcgdXAgZnVnaXRpdmUgQWVnaW5ldGFucywgd2hvIGhhdmUgZm9yc2FrZW4gdGhlaXIgb3duLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoaWRkZW4gdGhlbXNlbHZlcyBhd2F5IGxpa2UgYmlyZHMgaW4gYW5vdGhlciB0ZXJyaXRvcnksIGJ1dCBsZXQgYSBoaWdoIHByaWNlIGJlIGRlbWFuZGVkIGZvciB0aGUgd3Jvbmdkb2luZywgYW5kIGxldCBub3QganVzdGljZSBiZSB0aHJvd24gdG8gdGhlIHdpbmRzIGxpZ2h0bHksIG5vciBvbiB0aGUgZmlyc3QgYmVzdCB0ZXJtcywgYXMgaWYgaXQgd2VyZSBzb21lIHRyaWZsaW5nIG9yIGluc2lnbmlmaWNhbnQgdGhpbmcuIFRob3NlIHdobyBoYXZlIHByYWlzZSBmb3IgQWxleGFuZGVyJ3MgZXhwZWRpdGlvbiwgYnV0IGJsYW1lIGZvciB0aGF0IG9mIENyYXNzdXMsIHVuZmFpcmx5IGp1ZGdlIG9mIGEgYmVnaW5uaW5nIGJ5IGl0cyBlbmQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgdG8gdGhlIGFjdHVhbCBjb25kdWN0IG9mIHRoZWlyIGV4cGVkaXRpb25zLCBOaWNpYXMgaGFzIG5vdCBhIGxpdHRsZSB0byBoaXMgY3JlZGl0LCBmb3IgaGUgY29ucXVlcmVkIGhpcyBlbmVtaWVzIGluIG1hbnkgYmF0dGxlcywgYW5kIGJhcmVseSBtaXNzZWQgdGFraW5nIFN5cmFjdXNlLCBhbmQgbm90IGFsbCBoaXMgZmFpbHVyZXMgd2VyZSBkdWUgdG8gaGltc2VsZiwgYnV0IHRoZXkgbWlnaHQgYmUgYXNjcmliZWQgdG8gaGlzIGRpc2Vhc2UgYW5kIHRvIHRoZSBqZWFsb3VzeSBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zIGF0IGhvbWU7IGJ1dCBDcmFzc3VzIG1hZGUgc28gbWFueSBibHVuZGVycyB0aGF0IGhlIGdhdmUgZm9ydHVuZSBubyBjaGFuY2UgdG8gZmF2b3VyIGhpbS4gV2UgbWF5IG5vdCB0aGVyZWZvcmUgd29uZGVyIHRoYXQgaGlzIGltYmVjaWxpdHkgc3VjY3VtYmVkIHRvIHRoZSBwb3dlciBvZiB0aGUgUGFydGhpYW5zLCBidXQgcmF0aGVyIHRoYXQgaXQgcHJldmFpbGVkIG92ZXIgdGhlIHVzdWFsIGdvb2QgZm9ydHVuZSBvZiB0aGUgUm9tYW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyB0byB0aGUgYWN0dWFsIGNvbmR1Y3Qgb2YgdGhlaXIgZXhwZWRpdGlvbnMsIE5pY2lhcyBoYXMgbm90IGEgbGl0dGxlIHRvIGhpcyBjcmVkaXQsIGZvciBoZSBjb25xdWVyZWQgaGlzIGVuZW1pZXMgaW4gbWFueSBiYXR0bGVzLCBhbmQgYmFyZWx5IG1pc3NlZCB0YWtpbmcgU3lyYWN1c2UsIGFuZCBub3QgYWxsIGhpcyBmYWlsdXJlcyB3ZXJlIGR1ZSB0byBoaW1zZWxmLCBidXQgdGhleSBtaWdodCBiZSBhc2NyaWJlZCB0byBoaXMgZGlzZWFzZSBhbmQgdG8gdGhlIGplYWxvdXN5IG9mIGhpcyBmZWxsb3ctY2l0aXplbnMgYXQgaG9tZTsgYnV0IENyYXNzdXMgbWFkZSBzbyBtYW55IGJsdW5kZXJzIHRoYXQgaGUgZ2F2ZSBmb3J0dW5lIG5vIGNoYW5jZSB0byBmYXZvdXIgaGltLiBXZSBtYXkgbm90IHRoZXJlZm9yZSB3b25kZXIgdGhhdCBoaXMgaW1iZWNpbGl0eSBzdWNjdW1iZWQgdG8gdGhlIHBvd2VyIG9mIHRoZSBQYXJ0aGlhbnMsIGJ1dCByYXRoZXIgdGhhdCBpdCBwcmV2YWlsZWQgb3ZlciB0aGUgdXN1YWwgZ29vZCBmb3J0dW5lIG9mIHRoZSBSb21hbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIG9uZSBvZiB0aGVtIHdhcyB3aG9sbHkgZ2l2ZW4gdG8gZGl2aW5hdGlvbiwgYW5kIHRoZSBvdGhlciB3aG9sbHkgbmVnbGVjdGVkIGl0LCBhbmQgYm90aCBhbGlrZSBwZXJpc2hlZCwgaXQgaXMgaGFyZCB0byBkcmF3IGEgc2FmZSBjb25jbHVzaW9uIGZyb20gdGhlIHByZW1pc2VzOyBidXQgZmFpbHVyZSBmcm9tIGNhdXRpb24sIGdvaW5nIGhhbmQgaW4gaGFuZCB3aXRoIGFuY2llbnQgYW5kIHByZXZhbGVudCBvcGluaW9uLCBpcyBtb3JlIHJlYXNvbmFibGUgdGhhbiBsYXdsZXNzbmVzcyBhbmQgb2JzdGluYWN5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
