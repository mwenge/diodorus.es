var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRlbGx1cywgd2hvbSBTb2xvbiBwcm9ub3VuY2VkIHRoZSBtb3N0IGJsZXNzZWQgbWFuIGhlIGtuZXcsIGJlY2F1c2Ugb2YgaGlzIGZvcnR1bmF0ZSBsb3QsIGhpcyB2aXJ0dWUsIGFuZCBoaXMgZ29vZGx5IG9mZnNwcmluZywgd2FzIG5vdCBjZWxlYnJhdGVkIGluIFNvbG9uJ3MgcG9lbXMgYXMgYSBnb29kIG1hbiwgbm9yIGRpZCBoaXMgY2hpbGRyZW4gb3IgYW55IG1hZ2lzdHJhY3kgb2YgaGlzIGFjaGlldmUgYSByZXB1dGF0aW9uOyB3aGVyZWFzIFB1YmxpY29sYSwgd2hpbGUgaGUgbGl2ZWQsIHdhcyBmb3JlbW9zdCBhbW9uZyB0aGUgUm9tYW5zIGluZmx1ZW5jZSBhbmQgcmVwdXRlIGZvciB2aXJ0dWUsIGFuZCBzaW5jZSBoaXMgZGVhdGggdGhlIG1vc3QgaWxsdXN0cmlvdXMgZmFtaWx5IGxpbmVzIG9mIG91ciBvd24gZGF5LCBsaWtlIHRoZSBQdWJsaWNvbGFlLCB0aGUgTWVzc2FsYWUsIGFuZCB0aGUgVmFsZXJpaSwgaGF2ZSBmb3Igc2l4IGh1bmRyZWQgeWVhcnMgYXNjcmliZWQgdGhlIGdsb3J5IG9mIHRoZWlyIG5vYmxlIGJpcnRoIHRvIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRlbGx1cywgbW9yZW92ZXIsIHRob3VnaCBoZSBrZXB0IGhpcyBwb3N0IGFuZCBmb3VnaHQgbGlrZSBhIGJyYXZlIG1hbiwgZGllZCBhdCB0aGUgaGFuZHMgb2YgaGlzIGVuZW1pZXM7IHdoZXJlYXMgUHVibGljb2xhIHNsZXcgaGlzIGVuZW1pZXMsIHdoaWNoIGlzIGEgYmV0dGVyIGZvcnR1bmUgdGhhbiB0byBiZSBzbGFpbiBieSB0aGVtLCBzYXcgaGlzIGNvdW50cnkgdmljdG9yaW91cyB0aHJvdWdoIGhpcyBlZmZvcnRzIGFzIGNvbnN1bCBhbmQgZ2VuZXJhbCwgYW5kIGVuam95ZWQgaG9ub3VycyBhbmQgdHJpdW1waHMgYmVmb3JlIGhlIGNhbWUgdG8gdGhlIGVuZCB3aGljaCBTb2xvbiBwcm9ub3VuY2VkIHNvIGVudmlhYmxlIGFuZCBibGVzdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsIGZ1cnRoZXIsIHdoYXQgU29sb24gc2F5cyB0byBNaW1uZXJtdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GcmFnbWVudCAyMSAoQmVyZ2spLjwvbm90ZT4gaW4gYXJndWluZyB3aXRoIGhpbSBvbiB0aGUgcHJvcGVyIGR1cmF0aW9uIG9mIGh1bWFuIGxpZmUsCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXkgbm90IGFuIHVubGFtZW50ZWQgZGVhdGggYmUgbWluZSwgYnV0IHVudG8gZnJpZW5kczwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXQgbWUgYmUgY2F1c2UsIHdoZW4gZGVhZCwgZm9yIHNvcnJvdyBhbmQgZm9yIHNpZ2hpbmcsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPmFyZ3VlcyBQdWJsaWNvbGEgYSBoYXBweSBtYW4uIEZvciB3aGVuIGhlIGRpZWQsIGhpcyBsb3NzIGZpbGxlZCBub3Qgb25seSBmcmllbmRzIGFuZCBraW5kcmVkLCBidXQgdGhlIGVudGlyZSBjaXR5LCBudW1iZXJpbmcgbWFueSB0ZW5zIG9mIHRob3VzYW5kcywgd2l0aCB3ZWVwaW5nIGFuZCB5ZWFybmluZyBhbmQgc29ycm93LiBGb3IgdGhlIHdvbWVuIG9mIFJvbWUgbW91cm5lZCBmb3IgaGltIGFzIHRob3VnaCB0aGV5IGhhZCBsb3N0IGEgc29uLCBvciBhIGJyb3RoZXIsIG9yIGEgY29tbW9uIGZhdGhlci4gCgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPk1heSBub3QgYW4gdW5sYW1lbnRlZCBkZWF0aCBiZSBtaW5lLCBidXQgdW50byBmcmllbmRzPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkxldCBtZSBiZSBjYXVzZSwgd2hlbiBkZWFkLCBmb3Igc29ycm93IGFuZCBmb3Igc2lnaGluZyw8L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlYWx0aCBJIGRlc2lyZSB0byBoYXZlLDwvcT4gc2F5cyBTb2xvbiwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJ1dCB3cm9uZ2Z1bGx5IHRvIGdldCBpdCwgSSBkbyBub3Qgd2lzaCw8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNvbC4gMi4zIiB2YWxpZD0ieWVzIj5Tb2xvbiwgaWkuIDM8L2JpYmw+Ljwvbm90ZT4gYmVsaWV2aW5nIHRoYXQgcHVuaXNobWVudCB3b3VsZCBmb2xsb3cuIEFuZCBQdWJsaWNvbGEncyB3ZWFsdGggd2FzIG5vdCBvbmx5IG5vdCBpbGwgZ290LCBidXQgYWxzbyBub2JseSBzcGVudCBpbiBiZW5lZmFjdGlvbnMgdG8gdGhlIG5lZWR5LiBTbyB0aGF0IGlmIFNvbG9uIHdhcyB0aGUgd2lzZXN0LCBQdWJsaWNvbGEgd2FzIHRoZSBtb3N0IGhhcHB5IG9mIG1lbiwgc2luY2Ugd2hhdCBTb2xvbiBwcmF5ZWQgZm9yIGFzIHRoZSBncmVhdGVzdCBhbmQgZmFpcmVzdCBvZiBibGVzc2luZ3MsIHRoZXNlIFB1YmxpY29sYSB3YXMgcHJpdmlsZWdlZCB0byB3aW4gYW5kIGNvbnRpbnVlIHRvIGVuam95IHVudGlsIHRoZSBlbmQuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNvbC4gMi4zIiB2YWxpZD0ieWVzIj5Tb2xvbiwgaWkuIDM8L2JpYmw+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBkaWQgU29sb24gZW5oYW5jZSB0aGUgZmFtZSBvZiBQdWJsaWNvbGEuIEFuZCBQdWJsaWNvbGEsIHRvbywgaW4gaGlzIHBvbGl0aWNhbCBhY3Rpdml0aWVzLCBlbmhhbmNlZCB0aGUgZmFtZSBvZiBTb2xvbiwgYnkgbWFraW5nIGhpbSB0aGUgZmFpcmVzdCBvZiBleGFtcGxlcyBmb3Igb25lIHdobyB3YXMgYXJyYW5naW5nIGEgZGVtb2NyYWN5LiBGb3IgaGUgdG9vayBhd2F5IHRoZSBhcnJvZ2FudCBwb3dlcnMgb2YgdGhlIGNvbnN1bHNoaXAgYW5kIG1hZGUgaXQgZ3JhY2lvdXMgYW5kIGFjY2VwdGFibGUgdG8gYWxsLCBhbmQgaGUgYWRvcHRlZCBtYW55IG9mIFNvbG9uJ3MgbGF3cy4gRm9yIGluc3RhbmNlLCBoZSBwdXQgdGhlIGFwcG9pbnRtZW50IG9mIHRoZWlyIHJ1bGVycyBpbiB0aGUgcG93ZXIgb2YgdGhlIHBlb3BsZSwgYW5kIGdhdmUgZGVmZW5kYW50cyB0aGUgcmlnaHQgb2YgYXBwZWFsaW5nIHRvIHRoZSBwZW9wbGUsIGFzIFNvbG9uIHRvIHRoZSBqdXJvcnMuIEhlIGRpZCBub3QsIGluZGVlZCwgY3JlYXRlIGEgbmV3IHNlbmF0ZSwgYXMgU29sb24gZGlkLCBidXQgaGUgaW5jcmVhc2VkIHRoZSBvbmUgYWxyZWFkeSBleGlzdGluZyB0byBhbG1vc3QgZG91YmxlIGl0cyBudW1iZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGlzIGFwcG9pbnRtZW50IG9mIHF1YWVzdG9ycyBvdmVyIHRoZSBwdWJsaWMgbW9uZXlzIG1hZCBhIGxpa2Ugb3JpZ2luLiBJdHMgcHVycG9zZSB3YXMgdGhhdCB0aGUgY29uc3VsLCBpZiBhIHdvcnRoeSBvZmZpY2VyLCBtaWdodCBub3QgYmUgd2l0aG91dCBsZWlzdXJlIGZvciBoaXMgbW9yZSBpbXBvcnRhbnQgZHV0aWVzLCBhbmQsIGlmIHVud29ydGh5LCBtaWdodCBub3QgaGF2ZSBncmVhdGVyIG9wcG9ydHVuaXRpZXMgZm9yIGluanVzdGljZSBieSBoYXZpbmcgYm90aCB0aGUgYWRtaW5pc3RyYXRpb24gYW5kIHRoZSB0cmVhc3VyeSBpbiBoaXMgaGFuZHMuIEhhdHJlZCBvZiB0eXJhbm55IHdhcyBtb3JlIGludGVuc2UgaW4gUHVibGljb2xhIHRoYW4gaW4gU29sb24uIEZvciBpbiBjYXNlIGFueSBvbmUgYXR0ZW1wdGVkIHRvIHVzdXJwIHRoZSBwb3dlciwgYnkgU29sb24ncyBsYXcgaGUgY291bGQgYmUgcHVuaXNoZWQgb25seSBhZnRlciBjb252aWN0aW9uLCB3aGVyZWFzIFB1YmxpY29sYSBtYWRlIGl0IGxhd2Z1bCB0byBraWxsIGhpbSBiZWZvcmUgYW55IHRyaWFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgdGhvdWdoIFNvbG9uIHJpZ2h0bHkgYW5kIGp1c3RseSBwbHVtZXMgaGltc2VsZiBvbiByZWplY3RpbmcgYWJzb2x1dGUgcG93ZXIgZXZlbiB3aGVuIGNpcmN1bXN0YW5jZXMgb2ZmZXJlZCBpdCB0byBoaW0gYW5kIGhpcyBmZWxsb3ctY2l0aXplbnMgd2VyZSB3aWxsaW5nIHRoYXQgaGUgc2hvdWxkIHRha2UgaXQsIGl0IHJlZG91bmRzIG5vIGxlc3MgdG8gdGhlIGhvbm91ciBvZiBQdWJsaWNvbGEgdGhhdCwgd2hlbiBoZSBoYWQgcmVjZWl2ZWQgYSB0eXJhbm5pY2FsIHBvd2VyLCBoZSBtYWRlIGl0IG1vcmUgZGVtb2NyYXRpYywgYW5kIGRpZCBub3QgdXNlIGV2ZW4gdGhlIHByZXJvZ2F0aXZlcyB3aGljaCB3ZXJlIGhpcyBieSByaWdodCBvZiBwb3NzZXNzaW9uLiBBbmQgb2YgdGhlIHdpc2RvbSBvZiBzdWNoIGEgY291cnNlIFNvbG9uIHNlZW1zIHRvIGhhdmUgYmVlbiBjb25zY2lvdXMgZXZlbiBiZWZvcmUgUHVibGljb2xhLCB3aGVuIGhlIHNheXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GcmFnbWVudCA2IChCZXJnayk7IGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDEyLjIiIHZhbGlkPSJ5ZXMiPkFyaXN0b3RsZSwgQ29uc3QuIG9mIEF0aGVucywgeGlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGF0IGEgcGVvcGxlCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPnRoZW4gd2lsbCB5aWVsZCB0aGUgYmVzdCBvYmVkaWVuY2UgdG8gaXRzIGd1aWRlczwvbD4KCQkJCQkgICAgICAgICAgPGw+V2hlbiBpdCBpcyBuZWl0aGVyIGh1bW91cmVkIG5vciBvcHByZXNzZWQgdG9vIG11Y2guPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5QZWN1bGlhciB0byBTb2xvbiB3YXMgaGlzIHJlbWlzc2lvbiBvZiBkZWJ0cywgYW5kIGJ5IHRoaXMgbWVhbnMgZXNwZWNpYWxseSBoZSBjb25maXJtZWQgdGhlIGxpYmVydGllcyBvZiB0aGUgY2l0aXplbnMuIEZvciBlcXVhbGl0eSB1bmRlciB0aGUgbGF3cyBpcyBvZiBubyBhdmFpbCBpZiB0aGUgcG9vciBhcmUgcm9iYmVkIG9mIGl0IGJ5IHRoZWlyIGRlYnRzLiBOYXksIGluIHRoZSB2ZXJ5IHBsYWNlcyB3aGVyZSB0aGV5IGFyZSBzdXBwb3NlZCB0byBleGVyY2lzZSB0aGVpciBsaWJlcnRpZXMgbW9zdCwgdGhlcmUgdGhleSBhcmUgbW9zdCBpbiBzdWJqZWN0aW9uIHRvIHRoZSByaWNoLCBzaW5jZSBpbiB0aGUgY291cnRzIG9mIGp1c3RpY2UsIHRoZSBvZmZpY2VzIG9mIHN0YXRlLCBhbmQgaW4gcHVibGljIGRlYmF0ZXMsIHRoZXkgYXJlIHVuZGVyIHRoZWlyIG9yZGVycyBhbmQgZG8gdGhlbSBzZXJ2aWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hhdCBpcyBvZiBncmVhdGVyIG1vbWVudCBoZXJlLCB0aG91Z2ggc2VkaXRpb24gYWx3YXlzIGZvbGxvd3MgYW4gYWJvbGl0aW9uIG9mIGRlYnRzLCBpbiB0aGlzIGNhc2UgYWxvbmUsIGJ5IGVtcGxveWluZyBvcHBvcnR1bml0eSwgYXMgaXQgd2VyZSwgYSBkYW5nZXJvdXMgYnV0IHBvd2VyZnVsIG1lZGljaW5lLCBTb2xvbiBhY3R1YWxseSBwdXQgYW4gZW5kIHRvIHRoZSBzZWRpdGlvbiB0aGF0IHdhcyBhbHJlYWR5IHJpZmUsIGZvciBoaXMgb3duIHZpcnR1ZSBhbmQgaGlnaCByZXB1dGUgcHJldmFpbGVkIG92ZXIgdGhlIGlsbC1yZXB1dGUgYW5kIG9kaXVtIG9mIHRoZSBtZWFzdXJlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGRpZCBTb2xvbiBlbmhhbmNlIHRoZSBmYW1lIG9mIFB1YmxpY29sYS4gQW5kIFB1YmxpY29sYSwgdG9vLCBpbiBoaXMgcG9saXRpY2FsIGFjdGl2aXRpZXMsIGVuaGFuY2VkIHRoZSBmYW1lIG9mIFNvbG9uLCBieSBtYWtpbmcgaGltIHRoZSBmYWlyZXN0IG9mIGV4YW1wbGVzIGZvciBvbmUgd2hvIHdhcyBhcnJhbmdpbmcgYSBkZW1vY3JhY3kuIEZvciBoZSB0b29rIGF3YXkgdGhlIGFycm9nYW50IHBvd2VycyBvZiB0aGUgY29uc3Vsc2hpcCBhbmQgbWFkZSBpdCBncmFjaW91cyBhbmQgYWNjZXB0YWJsZSB0byBhbGwsIGFuZCBoZSBhZG9wdGVkIG1hbnkgb2YgU29sb24ncyBsYXdzLiBGb3IgaW5zdGFuY2UsIGhlIHB1dCB0aGUgYXBwb2ludG1lbnQgb2YgdGhlaXIgcnVsZXJzIGluIHRoZSBwb3dlciBvZiB0aGUgcGVvcGxlLCBhbmQgZ2F2ZSBkZWZlbmRhbnRzIHRoZSByaWdodCBvZiBhcHBlYWxpbmcgdG8gdGhlIHBlb3BsZSwgYXMgU29sb24gdG8gdGhlIGp1cm9ycy4gSGUgZGlkIG5vdCwgaW5kZWVkLCBjcmVhdGUgYSBuZXcgc2VuYXRlLCBhcyBTb2xvbiBkaWQsIGJ1dCBoZSBpbmNyZWFzZWQgdGhlIG9uZSBhbHJlYWR5IGV4aXN0aW5nIHRvIGFsbW9zdCBkb3VibGUgaXRzIG51bWJlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoaXMgYXBwb2ludG1lbnQgb2YgcXVhZXN0b3JzIG92ZXIgdGhlIHB1YmxpYyBtb25leXMgbWFkIGEgbGlrZSBvcmlnaW4uIEl0cyBwdXJwb3NlIHdhcyB0aGF0IHRoZSBjb25zdWwsIGlmIGEgd29ydGh5IG9mZmljZXIsIG1pZ2h0IG5vdCBiZSB3aXRob3V0IGxlaXN1cmUgZm9yIGhpcyBtb3JlIGltcG9ydGFudCBkdXRpZXMsIGFuZCwgaWYgdW53b3J0aHksIG1pZ2h0IG5vdCBoYXZlIGdyZWF0ZXIgb3Bwb3J0dW5pdGllcyBmb3IgaW5qdXN0aWNlIGJ5IGhhdmluZyBib3RoIHRoZSBhZG1pbmlzdHJhdGlvbiBhbmQgdGhlIHRyZWFzdXJ5IGluIGhpcyBoYW5kcy4gSGF0cmVkIG9mIHR5cmFubnkgd2FzIG1vcmUgaW50ZW5zZSBpbiBQdWJsaWNvbGEgdGhhbiBpbiBTb2xvbi4gRm9yIGluIGNhc2UgYW55IG9uZSBhdHRlbXB0ZWQgdG8gdXN1cnAgdGhlIHBvd2VyLCBieSBTb2xvbidzIGxhdyBoZSBjb3VsZCBiZSBwdW5pc2hlZCBvbmx5IGFmdGVyIGNvbnZpY3Rpb24sIHdoZXJlYXMgUHVibGljb2xhIG1hZGUgaXQgbGF3ZnVsIHRvIGtpbGwgaGltIGJlZm9yZSBhbnkgdHJpYWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aG91Z2ggU29sb24gcmlnaHRseSBhbmQganVzdGx5IHBsdW1lcyBoaW1zZWxmIG9uIHJlamVjdGluZyBhYnNvbHV0ZSBwb3dlciBldmVuIHdoZW4gY2lyY3Vtc3RhbmNlcyBvZmZlcmVkIGl0IHRvIGhpbSBhbmQgaGlzIGZlbGxvdy1jaXRpemVucyB3ZXJlIHdpbGxpbmcgdGhhdCBoZSBzaG91bGQgdGFrZSBpdCwgaXQgcmVkb3VuZHMgbm8gbGVzcyB0byB0aGUgaG9ub3VyIG9mIFB1YmxpY29sYSB0aGF0LCB3aGVuIGhlIGhhZCByZWNlaXZlZCBhIHR5cmFubmljYWwgcG93ZXIsIGhlIG1hZGUgaXQgbW9yZSBkZW1vY3JhdGljLCBhbmQgZGlkIG5vdCB1c2UgZXZlbiB0aGUgcHJlcm9nYXRpdmVzIHdoaWNoIHdlcmUgaGlzIGJ5IHJpZ2h0IG9mIHBvc3Nlc3Npb24uIEFuZCBvZiB0aGUgd2lzZG9tIG9mIHN1Y2ggYSBjb3Vyc2UgU29sb24gc2VlbXMgdG8gaGF2ZSBiZWVuIGNvbnNjaW91cyBldmVuIGJlZm9yZSBQdWJsaWNvbGEsIHdoZW4gaGUgc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgNiAoQmVyZ2spOyBjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDEyLjIiIHZhbGlkPSJ5ZXMiPkFyaXN0b3RsZSwgQ29uc3QuIG9mIEF0aGVucywgeGlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGF0IGEgcGVvcGxlCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gMTIuMiIgdmFsaWQ9InllcyI+QXJpc3RvdGxlLCBDb25zdC4gb2YgQXRoZW5zLCB4aWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj50aGVuIHdpbGwgeWllbGQgdGhlIGJlc3Qgb2JlZGllbmNlIHRvIGl0cyBndWlkZXM8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiBpdCBpcyBuZWl0aGVyIGh1bW91cmVkIG5vciBvcHByZXNzZWQgdG9vIG11Y2guPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPnRoZW4gd2lsbCB5aWVsZCB0aGUgYmVzdCBvYmVkaWVuY2UgdG8gaXRzIGd1aWRlczwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVuIGl0IGlzIG5laXRoZXIgaHVtb3VyZWQgbm9yIG9wcHJlc3NlZCB0b28gbXVjaC48L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5QZWN1bGlhciB0byBTb2xvbiB3YXMgaGlzIHJlbWlzc2lvbiBvZiBkZWJ0cywgYW5kIGJ5IHRoaXMgbWVhbnMgZXNwZWNpYWxseSBoZSBjb25maXJtZWQgdGhlIGxpYmVydGllcyBvZiB0aGUgY2l0aXplbnMuIEZvciBlcXVhbGl0eSB1bmRlciB0aGUgbGF3cyBpcyBvZiBubyBhdmFpbCBpZiB0aGUgcG9vciBhcmUgcm9iYmVkIG9mIGl0IGJ5IHRoZWlyIGRlYnRzLiBOYXksIGluIHRoZSB2ZXJ5IHBsYWNlcyB3aGVyZSB0aGV5IGFyZSBzdXBwb3NlZCB0byBleGVyY2lzZSB0aGVpciBsaWJlcnRpZXMgbW9zdCwgdGhlcmUgdGhleSBhcmUgbW9zdCBpbiBzdWJqZWN0aW9uIHRvIHRoZSByaWNoLCBzaW5jZSBpbiB0aGUgY291cnRzIG9mIGp1c3RpY2UsIHRoZSBvZmZpY2VzIG9mIHN0YXRlLCBhbmQgaW4gcHVibGljIGRlYmF0ZXMsIHRoZXkgYXJlIHVuZGVyIHRoZWlyIG9yZGVycyBhbmQgZG8gdGhlbSBzZXJ2aWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGF0IGlzIG9mIGdyZWF0ZXIgbW9tZW50IGhlcmUsIHRob3VnaCBzZWRpdGlvbiBhbHdheXMgZm9sbG93cyBhbiBhYm9saXRpb24gb2YgZGVidHMsIGluIHRoaXMgY2FzZSBhbG9uZSwgYnkgZW1wbG95aW5nIG9wcG9ydHVuaXR5LCBhcyBpdCB3ZXJlLCBhIGRhbmdlcm91cyBidXQgcG93ZXJmdWwgbWVkaWNpbmUsIFNvbG9uIGFjdHVhbGx5IHB1dCBhbiBlbmQgdG8gdGhlIHNlZGl0aW9uIHRoYXQgd2FzIGFscmVhZHkgcmlmZSwgZm9yIGhpcyBvd24gdmlydHVlIGFuZCBoaWdoIHJlcHV0ZSBwcmV2YWlsZWQgb3ZlciB0aGUgaWxsLXJlcHV0ZSBhbmQgb2RpdW0gb2YgdGhlIG1lYXN1cmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXMgcmVnYXJkcyB0aGVpciBwb2xpdGljYWwgY2FyZWVycyBpbiBnZW5lcmFsLCBTb2xvbidzIHdhcyBtb3JlIGJyaWxsaWFudCBpbiB0aGUgYmVnaW5uaW5nLiBGb3IgaGUgbGVkIHRoZSB3YXkgYW5kIGZvbGxvd2VkIG5vIG1hbiwgYW5kIGl0IHdhcyBhbG9uZSBhbmQgd2l0aG91dCBjb2xsZWFndWVzIHRoYXQgaGUgZWZmZWN0ZWQgdGhlIG1vc3QgYW5kIGdyZWF0ZXN0IG9mIGhpcyBwdWJsaWMgbWVhc3VyZXMuIEJ1dCBpbiB0aGUgZW5kaW5nLCB0aGUgb3RoZXIgd2FzIG1vcmUgZm9ydHVuYXRlIGFuZCBlbnZpYWJsZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgU29sb24gbGl2ZWQgdG8gc2VlIHdpdGggaGlzIG93biBleWVzIHRoZSBkaXNzb2x1dGlvbiBvZiBoaXMgcG9saXR5LCB3aGlsZSB0aGF0IG9mIFB1YmxpY29sYSBwcmVzZXJ2ZWQgb3JkZXIgaW4gdGhlIGNpdHkgZG93biB0byB0aGUgY2l2aWwgd2Fycy4gU29sb24sIGFzIHNvb24gYXMgaGUgaGFkIG1hZGUgaGlzIGxhd3MsIGxlZnQgdGhlbSBpbnNjcmliZWQgb24gd29vZGVuIHRhYmxlcyBhbmQgZGVzdGl0dXRlIG9mIGEgZGVmZW5kZXIsIGFuZCBkZXBhcnRlZCBmcm9tIEF0aGVuczsgd2hlcmVhcyBQdWJsaWNvbGEsIGJ5IHJlbWFpbmluZyBpbiB0aGUgY2l0eSwgc2VydmluZyBhcyBjb25zdWwsIGFuZCBidXN5aW5nIGhpbXNlbGYgd2l0aCBwdWJsaWMgYWZmYWlycywgZmlybWx5IGFuZCBzYWZlbHkgZXN0YWJsaXNoZWQgaGlzIGZvcm0gb2YgZ292ZXJubWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGZ1cnRoZXIsIHRob3VnaCBTb2xvbiBrbmV3IGJlZm9yZWhhbmQgb2YgdGhlIGRlc2lnbnMgb2YgUGVpc2lzdHJhdHVzLCBoZSB3YXMgbm90IGFibGUgdG8gaGluZGVyIHRoZW0sIGJ1dCB5aWVsZGVkIHRvIGhpcyB0eXJhbm55IGluIGl0cyBpbmNpcGllbmN5OyB3aGVyZWFzIFB1YmxpY29sYSBzdWJ2ZXJ0ZWQgYW5kIGRyb3ZlIG91dCBhIGtpbmdseSBwb3dlciB3aGljaCB3YXMgc3Ryb25nIHdpdGggdGhlIG1pZ2h0IHdoaWNoIG1hbnkgYWdlcyBicmluZy4gVGh1cywgd2hpbGUgZXhoaWJpdGluZyB2aXJ0dWVzIGVxdWFsIHRvIFNvbG9uJ3MsIGFuZCBhIHB1cnBvc2UgaWRlbnRpY2FsIHdpdGggaGlzLCBoZSBlbmpveWVkIGEgZ29vZCBmb3J0dW5lIGFuZCBhbiBlZmZpY2FjaW91cyBwb3dlciB3aGljaCBzdXBwbGVtZW50ZWQgaGlzIHZpcnR1ZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBTb2xvbiBsaXZlZCB0byBzZWUgd2l0aCBoaXMgb3duIGV5ZXMgdGhlIGRpc3NvbHV0aW9uIG9mIGhpcyBwb2xpdHksIHdoaWxlIHRoYXQgb2YgUHVibGljb2xhIHByZXNlcnZlZCBvcmRlciBpbiB0aGUgY2l0eSBkb3duIHRvIHRoZSBjaXZpbCB3YXJzLiBTb2xvbiwgYXMgc29vbiBhcyBoZSBoYWQgbWFkZSBoaXMgbGF3cywgbGVmdCB0aGVtIGluc2NyaWJlZCBvbiB3b29kZW4gdGFibGVzIGFuZCBkZXN0aXR1dGUgb2YgYSBkZWZlbmRlciwgYW5kIGRlcGFydGVkIGZyb20gQXRoZW5zOyB3aGVyZWFzIFB1YmxpY29sYSwgYnkgcmVtYWluaW5nIGluIHRoZSBjaXR5LCBzZXJ2aW5nIGFzIGNvbnN1bCwgYW5kIGJ1c3lpbmcgaGltc2VsZiB3aXRoIHB1YmxpYyBhZmZhaXJzLCBmaXJtbHkgYW5kIHNhZmVseSBlc3RhYmxpc2hlZCBoaXMgZm9ybSBvZiBnb3Zlcm5tZW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmdXJ0aGVyLCB0aG91Z2ggU29sb24ga25ldyBiZWZvcmVoYW5kIG9mIHRoZSBkZXNpZ25zIG9mIFBlaXNpc3RyYXR1cywgaGUgd2FzIG5vdCBhYmxlIHRvIGhpbmRlciB0aGVtLCBidXQgeWllbGRlZCB0byBoaXMgdHlyYW5ueSBpbiBpdHMgaW5jaXBpZW5jeTsgd2hlcmVhcyBQdWJsaWNvbGEgc3VidmVydGVkIGFuZCBkcm92ZSBvdXQgYSBraW5nbHkgcG93ZXIgd2hpY2ggd2FzIHN0cm9uZyB3aXRoIHRoZSBtaWdodCB3aGljaCBtYW55IGFnZXMgYnJpbmcuIFRodXMsIHdoaWxlIGV4aGliaXRpbmcgdmlydHVlcyBlcXVhbCB0byBTb2xvbidzLCBhbmQgYSBwdXJwb3NlIGlkZW50aWNhbCB3aXRoIGhpcywgaGUgZW5qb3llZCBhIGdvb2QgZm9ydHVuZSBhbmQgYW4gZWZmaWNhY2lvdXMgcG93ZXIgd2hpY2ggc3VwcGxlbWVudGVkIGhpcyB2aXJ0dWVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gd2UgY29uc2lkZXIgdGhlaXIgbWlsaXRhcnkgY2FyZWVycywgbW9yZW92ZXIsIERhw69tYWNpbnVzIG9mIFBsYXRhZWEgZG9lcyBub3QgYWxsb3cgU29sb24gZXZlbiB0aGUgY29uZHVjdCBvZiB0aGUgd2FyIGFnYWluc3QgdGhlIE1lZ2FyaWFucywgYXMgd2UgaGF2ZSBkZXNjcmliZWQgaXQ8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNvbC4gOCIgdmFsaWQ9InllcyI+U29sb24sIHZpaWkuPC9iaWJsPjsgY2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gMTQuMSIgdmFsaWQ9InllcyI+QXJpc3RvdGxlLCBDb25zdC4gb2YgQXRoZW5zLCB4aXYuIDE8L2JpYmw+Ljwvbm90ZT4gYnV0IFB1YmxpY29sYSwgZmlnaHRpbmcgYW5kIGNvbW1hbmRpbmcgaW4gcGVyc29uLCBicm91Z2h0IHRoZSBncmVhdGVzdCBzdHJ1Z2dsZXMgdG8gYSBzdWNjZXNzZnVsIGlzc3VlLiBBbmQgc3RpbGwgZnVydGhlciwgY29tcGFyaW5nIHRoZWlyIHBvbGl0aWNhbCBhY3Rpdml0aWVzLCBTb2xvbiwgaW4gcGxheSwgc28gdG8gc3BlYWssIGFuZCBjb3VudGVyZmVpdGluZyBtYWRuZXNzLCB3ZW50IGZvcnRoIHRvIHBsZWFkIGZvciB0aGUgcmVjb3Zlcnkgb2YgU2FsYW1pczsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IFB1YmxpY29sYSwgd2l0aG91dCBhbnkgc3VidGVyZnVnZXMsIHJhbiB0aGUgZ3JlYXRlc3Qgcmlza3MsIHNldCBoaW1zZWxmIGluIG9wcG9zaXRpb24gdG8gdGhlIHBhcnR5IG9mIHRoZSBUYXJxdWlucywgYW5kIGRldGVjdGVkIHRoZWlyIHRyZWFjaGVyeS4gVGhlbiwgYWZ0ZXIgYmVpbmcgbWFpbmx5IGluc3RydW1lbnRhbCBpbiB0aGUgY2FwdHVyZSBhbmQgcHVuaXNobWVudCBvZiB0aGUgdHJhaXRvcnMsIGhlIG5vdCBvbmx5IGRyb3ZlIHRoZSB0eXJhbnRzIHRoZW1zZWx2ZXMgZnJvbSB0aGUgY2l0eSwgYnV0IGV4dGlycGF0ZWQgdGhlaXIgdmVyeSBob3BlcyBvZiByZXR1cm4uIEFuZCBpZiBoZSB0aHVzIHN0dXJkaWx5IGFuZCByZXNvbHV0ZWx5IGNvbmZyb250ZWQgc2l0dWF0aW9ucyB3aGljaCBjYWxsZWQgZm9yIGFjdGl2ZSBhbmQgc3Bpcml0ZWQgb3Bwb3NpdGlvbiwgc3RpbGwgYmV0dGVyIGRpZCBoZSBkZWFsIHdpdGggdGhvc2Ugd2hpY2ggcmVxdWlyZWQgcGVhY2VhYmxlIGludGVyY291cnNlIGFuZCBnZW50bGUgcGVyc3Vhc2lvbiwgYXMgd2hlbiBoZSB0YWN0ZnVsbHkgd29uIG92ZXIgUG9yc2VuYSwgYW4gaW52aW5jaWJsZSBhbmQgZm9ybWlkYWJsZSBmb2UsIGFuZCBtYWRlIGhpbSBhIGZyaWVuZCBvZiBSb21lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHdlIGNvbnNpZGVyIHRoZWlyIG1pbGl0YXJ5IGNhcmVlcnMsIG1vcmVvdmVyLCBEYcOvbWFjaW51cyBvZiBQbGF0YWVhIGRvZXMgbm90IGFsbG93IFNvbG9uIGV2ZW4gdGhlIGNvbmR1Y3Qgb2YgdGhlIHdhciBhZ2FpbnN0IHRoZSBNZWdhcmlhbnMsIGFzIHdlIGhhdmUgZGVzY3JpYmVkIGl0PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU29sLiA4IiB2YWxpZD0ieWVzIj5Tb2xvbiwgdmlpaS48L2JpYmw+OyBjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDE0LjEiIHZhbGlkPSJ5ZXMiPkFyaXN0b3RsZSwgQ29uc3QuIG9mIEF0aGVucywgeGl2LiAxPC9iaWJsPi48L25vdGU+IGJ1dCBQdWJsaWNvbGEsIGZpZ2h0aW5nIGFuZCBjb21tYW5kaW5nIGluIHBlcnNvbiwgYnJvdWdodCB0aGUgZ3JlYXRlc3Qgc3RydWdnbGVzIHRvIGEgc3VjY2Vzc2Z1bCBpc3N1ZS4gQW5kIHN0aWxsIGZ1cnRoZXIsIGNvbXBhcmluZyB0aGVpciBwb2xpdGljYWwgYWN0aXZpdGllcywgU29sb24sIGluIHBsYXksIHNvIHRvIHNwZWFrLCBhbmQgY291bnRlcmZlaXRpbmcgbWFkbmVzcywgd2VudCBmb3J0aCB0byBwbGVhZCBmb3IgdGhlIHJlY292ZXJ5IG9mIFNhbGFtaXM7IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU29sLiA4IiB2YWxpZD0ieWVzIj5Tb2xvbiwgdmlpaS48L2JpYmw+OyBjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDE0LjEiIHZhbGlkPSJ5ZXMiPkFyaXN0b3RsZSwgQ29uc3QuIG9mIEF0aGVucywgeGl2LiAxPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBQdWJsaWNvbGEsIHdpdGhvdXQgYW55IHN1YnRlcmZ1Z2VzLCByYW4gdGhlIGdyZWF0ZXN0IHJpc2tzLCBzZXQgaGltc2VsZiBpbiBvcHBvc2l0aW9uIHRvIHRoZSBwYXJ0eSBvZiB0aGUgVGFycXVpbnMsIGFuZCBkZXRlY3RlZCB0aGVpciB0cmVhY2hlcnkuIFRoZW4sIGFmdGVyIGJlaW5nIG1haW5seSBpbnN0cnVtZW50YWwgaW4gdGhlIGNhcHR1cmUgYW5kIHB1bmlzaG1lbnQgb2YgdGhlIHRyYWl0b3JzLCBoZSBub3Qgb25seSBkcm92ZSB0aGUgdHlyYW50cyB0aGVtc2VsdmVzIGZyb20gdGhlIGNpdHksIGJ1dCBleHRpcnBhdGVkIHRoZWlyIHZlcnkgaG9wZXMgb2YgcmV0dXJuLiBBbmQgaWYgaGUgdGh1cyBzdHVyZGlseSBhbmQgcmVzb2x1dGVseSBjb25mcm9udGVkIHNpdHVhdGlvbnMgd2hpY2ggY2FsbGVkIGZvciBhY3RpdmUgYW5kIHNwaXJpdGVkIG9wcG9zaXRpb24sIHN0aWxsIGJldHRlciBkaWQgaGUgZGVhbCB3aXRoIHRob3NlIHdoaWNoIHJlcXVpcmVkIHBlYWNlYWJsZSBpbnRlcmNvdXJzZSBhbmQgZ2VudGxlIHBlcnN1YXNpb24sIGFzIHdoZW4gaGUgdGFjdGZ1bGx5IHdvbiBvdmVyIFBvcnNlbmEsIGFuIGludmluY2libGUgYW5kIGZvcm1pZGFibGUgZm9lLCBhbmQgbWFkZSBoaW0gYSBmcmllbmQgb2YgUm9tZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlcmUsIHBlcmhhcHMsIHNvbWUgb25lIHdpbGwgc2F5IHRoYXQgU29sb24gd29uIGJhY2sgU2FsYW1pcyBmb3IgdGhlIEF0aGVuaWFucyB3aGVuIHRoZXkgaGFkIGdpdmVuIGl0IFB1YmxpY29sYSByZWxpbnF1aXNoZWQgdGVycml0b3J5IHdoaWNoIHRoZSBSb21hbnMgaGFkIGFjcXVpcmVkLiBCdXQgd2UgbXVzdCwgdmlldyBtZW4ncyBhY3Rpb25zIGluIHRoZSBsaWdodCBvZiB0aGUgdGltZXMgd2hpY2ggY2FsbCB0aGVtIGZvcnRoLiBUaGUgc3VidGxlIHN0YXRlc21hbiB3aWxsIGhhbmRsZSBlYWNoIGlzc3VlIHRoYXQgYXJpc2VzIGluIHRoZSBtb3N0IGZlYXNpYmxlIG1hbm5lciwgYW5kIG9mdGVuIHNhdmVzIHRoZSB3aG9sZSBieSByZWxpbnF1aXNoaW5nIGEgcGFydCwgYW5kIGJ5IHlpZWxkaW5nIHNtYWxsIGFkdmFudGFnZXMgc2VjdXJlcyBncmVhdGVyIG9uZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBQdWJsaWNvbGEsIGluIHRoYXQgaW5zdGFuY2UsIGJ5IHlpZWxkaW5nIHRoZSB0ZXJyaXRvcnkgd2hpY2ggYmVsb25nZWQgdG8gb3RoZXJzLCBzYXZlZCBhbGwgdGhhdCB3YXMgYXNzdXJlZGx5IGhpcyBvd24sIGFuZCBwcm9jdXJlZCBiZXNpZGVzLCBmb3IgdGhvc2Ugd2hvIHdlcmUgaGFyZCBwdXQgdG8gaXQgdG8gc2F2ZSB0aGVpciBjaXR5LCB0aGUgY2FtcCBvZiB0aGVpciBiZXNpZWdlcnMgd2l0aCBhbGwgaXRzIHN0b3Jlcy4gSGUgbWFkZSBoaXMgYWR2ZXJzYXJ5IGp1ZGdlIGluIHRoZSBjb250cm92ZXJzeSwgd29uIGhpcyBjYXNlLCBhbmQgcmVjZWl2ZWQgYmVzaWRlcyB3aGF0IGhpcyBwZW9wbGUgd291bGQgZ2xhZGx5IGhhdmUgZ2l2ZW4gZm9yIHRoZSB2aWN0b3J5LiBGb3IgUG9yc2VuYSBwdXQgYSBzdG9wIHRvIHRoZSB3YXIsIGFuZCBsZWZ0IHRoZSBSb21hbnMgYWxsIGhpcyBwcm92aXNpb25zIGZvciBjYXJyeWluZyBpdCBvbiwgb3dpbmcgdG8gdGhlIGNvbmZpZGVuY2UgaW4gdGhlaXIgdmlydHVlIGFuZCBub2JpbGl0eSB3aXRoIHdoaWNoIHRoZWlyIGNvbnN1bCBoYWQgaW5zcGlyZWQgaGltLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZXJlLCBwZXJoYXBzLCBzb21lIG9uZSB3aWxsIHNheSB0aGF0IFNvbG9uIHdvbiBiYWNrIFNhbGFtaXMgZm9yIHRoZSBBdGhlbmlhbnMgd2hlbiB0aGV5IGhhZCBnaXZlbiBpdCBQdWJsaWNvbGEgcmVsaW5xdWlzaGVkIHRlcnJpdG9yeSB3aGljaCB0aGUgUm9tYW5zIGhhZCBhY3F1aXJlZC4gQnV0IHdlIG11c3QsIHZpZXcgbWVuJ3MgYWN0aW9ucyBpbiB0aGUgbGlnaHQgb2YgdGhlIHRpbWVzIHdoaWNoIGNhbGwgdGhlbSBmb3J0aC4gVGhlIHN1YnRsZSBzdGF0ZXNtYW4gd2lsbCBoYW5kbGUgZWFjaCBpc3N1ZSB0aGF0IGFyaXNlcyBpbiB0aGUgbW9zdCBmZWFzaWJsZSBtYW5uZXIsIGFuZCBvZnRlbiBzYXZlcyB0aGUgd2hvbGUgYnkgcmVsaW5xdWlzaGluZyBhIHBhcnQsIGFuZCBieSB5aWVsZGluZyBzbWFsbCBhZHZhbnRhZ2VzIHNlY3VyZXMgZ3JlYXRlciBvbmVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
