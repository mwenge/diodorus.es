var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    translatedSection.style.backgroundColor = "";
  }
  translatedSection = document.getElementById(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  translatedSection.style.backgroundColor = "yellow";
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  translatedSection.style.backgroundColor = "";
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = "PHRyYW5zbGF0aW9uPjx0ZXh0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgIDxib2R5IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q0FJVVMgTUFSQ1VTIENPUklPTEFOVVM8L2hlYWQ+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGF0cmljaWFuIGhvdXNlIG9mIHRoZSBNYXJjaWkgYXQgUm9tZSBmdXJuaXNoZWQgbWFueSBtZW4gb2YgZGlzdGluY3Rpb24uIE9uZSBvZiB0aGVtIHdhcyBBbmN1cyBNYXJjaXVzLCB0aGUgZ3JhbmRzb24gb2YgTnVtYSBieSBoaXMgZGF1Z2h0ZXIsIGFuZCB0aGUgc3VjY2Vzc29yIG9mIFR1bGx1cyBIb3N0aWxpdXMgaW4gdGhlIGtpbmdzaGlwLiBUbyB0aGlzIGZhbWlseSBiZWxvbmdlZCBhbHNvIFB1YmxpdXMgYW5kIFF1aW50dXMgTWFyY2l1cywgdGhlIG1lbiB3aG8gYnJvdWdodCBpbnRvIFJvbWUgaXRzIGJlc3QgYW5kIG1vc3QgYWJ1bmRhbnQgc3VwcGx5IG9mIHdhdGVyLiBTbyBsaWtld2lzZSBkaWQgQ2Vuc29yaW51cywgd2hvbSB0aGUgUm9tYW4gcGVvcGxlIHR3aWNlIGFwcG9pbnRlZCBjZW5zb3IsIGFuZCB0aGVuLCBhdCBoaXMgb3duIGluc3RhbmNlLCBtYWRlIGEgbGF3IGJ5IHdoaWNoIGl0IHdhcyBkZWNyZWVkIHRoYXQgbm8gb25lIHNob3VsZCBob2xkIHRoYXQgb2ZmaWNlIHR3aWNlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhaXVzIE1hcmNpdXMsIHdob3NlIGxpZmUgSSBub3cgd3JpdGUsIGxvc3QgaGlzIGZhdGhlciBhdCBhbiBlYXJseSBhZ2UsIGFuZCB3YXMgcmVhcmVkIGJ5IGhpcyB3aWRvd2VkIG1vdGhlci4gSGUgc2hvd2VkLCBob3dldmVyLCB0aGF0IHN1Y2ggbG9zcyBvZiBhIGZhdGhlciwgYWx0aG91Z2ggb3RoZXJ3aXNlIGJhZCBmb3IgYSBib3ksIG5lZWQgbm90IHByZXZlbnQgaGltIGZyb20gYmVjb21pbmcgYSB3b3J0aHkgYW5kIGV4Y2VsbGVudCBtYW4sIGFuZCB0aGF0IGl0IGlzIHdyb25nIGZvciB3b3J0aGxlc3MgbWVuIHRvIGxheSB1cG9uIGl0IHRoZSBibGFtZSBmb3IgdGhlaXIgcGVydmVydGVkIG5hdHVyZXMsIHdoaWNoIGFyZSBkdWUsIGFzIHRoZXkgc2F5LCB0byBlYXJseSBuZWdsZWN0LiBPbiB0aGUgb3RoZXIgaGFuZCwgdGhlIHNhbWUgTWFyY2l1cyBib3JlIHdpdG5lc3MgZm9yIHRob3NlIHdobyBob2xkIHRoYXQgYSBnZW5lcm91cyBhbmQgbm9ibGUgbmF0dXJlLCBpZiBpdCBsYWNrIGRpc2NpcGxpbmUsIGlzIGFwdCB0byBwcm9kdWNlIG11Y2ggdGhhdCBpcyB3b3J0aGxlc3MgYWxvbmcgd2l0aCBpdHMgYmV0dGVyIGZydWl0cywgbGlrZSBhIHJpY2ggc29pbCBkZXByaXZlZCBvZiB0aGUgaHVzYmFuZG1hbidzIGN1bHR1cmUgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoaWxlIHRoZSBmb3JjZSBhbmQgdmlnb3VyIG9mIGhpcyBpbnRlbGxpZ2VuY2UsIHdoaWNoIGtuZXcgbm8gbGltaXRhdGlvbnMsIGxlZCBoaW0gaW50byBncmVhdCB1bmRlcnRha2luZ3MsIGFuZCBzdWNoIGFzIHdlcmUgcHJvZHVjdGl2ZSBvZiB0aGUgaGlnaGVzdCByZXN1bHRzLCBzdGlsbCwgb24gdGhlIG90aGVyIGhhbmQsIHNpbmNlIGhlIGluZHVsZ2VkIGEgdmVoZW1lbnQgdGVtcGVyIGFuZCBkaXNwbGF5ZWQgYW4gdW5zd2VydmluZyBwZXJ0aW5hY2l0eSwgaXQgbWFkZSBoaW0gYSBkaWZmaWN1bHQgYW5kIHVuc3VpdGFibGUgYXNzb2NpYXRlIGZvciBvdGhlcnMuIFRoZXkgZGlkIGluZGVlZCBsb29rIHdpdGggYWRtaXJhdGlvbiB1cG9uIGhpcyBpbnNlbnNpYmlsaXR5IHRvIHBsZWFzdXJlcywgdG9pbHMsIGFuZCBtZXJjZW5hcnkgZ2FpbnMsIHRvIHdoaWNoIHRoZXkgZ2F2ZSB0aGUgbmFtZXMgb2Ygc2VsZi1jb250cm9sLCBmb3J0aXR1ZGUsIGFuZCBqdXN0aWNlOyBidXQgaW4gdGhlaXIgaW50ZXJjb3Vyc2Ugd2l0aCBoaW0gYXMgYSBmZWxsb3ctY2l0aXplbiB0aGV5IHdlcmUgb2ZmZW5kZWQgYnkgaXQgYXMgdW5ncmFjaW91cywgYnVyZGVuc29tZSwgYW5kIGFycm9nYW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5WZXJpbHksIGFtb25nIGFsbCB0aGUgYmVuZWZpdHMgd2hpY2ggbWVuIGRlcml2ZSBmcm9tIHRoZSBmYXZvdXIgb2YgdGhlIE11c2VzLCBub25lIG90aGVyIGlzIHNvIGdyZWF0IGFzIHRoYXQgc29mdGVuaW5nIG9mIHRoZSBuYXR1cmUgd2hpY2ggaXMgcHJvZHVjZWQgYnkgY3VsdHVyZSBhbmQgZGlzY2lwbGluZSwgdGhlIG5hdHVyZSBiZWluZyBpbmR1Y2VkIGJ5IGN1bHR1cmUgdG8gdGFrZSBvbiBtb2RlcmF0aW9uIGFuZCBjYXN0IG9mZiBleGNlc3MuIEl0IGlzIHBlcmZlY3RseSB0cnVlLCBob3dldmVyLCB0aGF0IGluIHRob3NlIGRheXMgUm9tZSBoZWxkIGluIGhpZ2hlc3QgaG9ub3VyIHRoYXQgcGhhc2Ugb2YgdmlydHVlIHdoaWNoIGNvbmNlcm5zIGl0c2VsZiB3aXRoIHdhcmxpa2UgYW5kIG1pbGl0YXJ5IGFjaGlldmVtZW50cywgYW5kIGV2aWRlbmNlIG9mIHRoaXMgbWF5IGJlIGZvdW5kIGluIHRoZSBvbmx5IExhdGluIHdvcmQgZm9yIHZpcnR1ZSwgd2hpY2ggc2lnbmlmaWVzIHJlYWxseSA8ZW1waD5tYW5seSB2YWxvdXI8L2VtcGg+OyB0aGV5IG1hZGUgdmFsb3VyLCBhIHNwZWNpZmljIGZvcm0gb2YgdmlydHVlLCBzdGFuZCBmb3IgdmlydHVlIGluIGdlbmVyYWwuCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUFuZCBzbyBNYXJjaXVzLCB3aG8gd2FzIGJ5IG5hdHVyZSBleGNlZWRpbmdseSBmb25kIG9mIHdhcmxpa2UgZmVhdHMsIGJlZ2FuIGF0IG9uY2UsIGZyb20gaGlzIHZlcnkgYm95aG9vZCwgdG8gaGFuZGxlIGFybXMuIEFuZCBzaW5jZSBoZSB0aG91Z2h0IHRoYXQgYWR2ZW50aXRpb3VzIHdlYXBvbnMgd2VyZSBvZiBsaXR0bGUgYXZhaWwgdG8gc3VjaCBhcyBkaWQgbm90IGhhdmUgdGhlaXIgbmF0dXJhbCBhbmQgbmF0aXZlIGFybW91ciBkZXZlbG9wZWQgYW5kIHByZXBhcmVkIGZvciBzZXJ2aWNlLCBoZSBzbyBwcmFjdGlzZWQgaGltc2VsZiBpbiBldmVyeSBzb3J0IG9mIGNvbWJhdCB0aGF0IGhlIHdhcyBub3Qgb25seSBuaW1ibGUgb2YgZm9vdCwgYnV0IGhhZCBhbHNvIHN1Y2ggYSB3ZWlnaHQgaW4gZ3JhcHBsaW5ncyBhbmQgd3Jlc3RsaW5ncyB0aGF0IGFuIGVuZW15IGZvdW5kIGl0IGhhcmQgdG8gZXh0cmljYXRlIGhpbXNlbGYuIEF0IGFueSByYXRlLCB0aG9zZSB3aG8gZnJvbSB0aW1lIHRvIHRpbWUgY29udGVuZGVkIHdpdGggaGltIGluIGZlYXRzIG9mIGNvdXJhZ2UgYW5kIHZhbG91ciwgbGFpZCB0aGUgYmxhbWUgZm9yIHRoZWlyIGluZmVyaW9yaXR5IHVwb24gaGlzIHN0cmVuZ3RoIG9mIGJvZHksIHdoaWNoIHdhcyBpbmZsZXhpYmxlIGFuZCBzaHJhbmsgZnJvbSBubyBoYXJkc2hpcC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgbWFkZSBoaXMgZmlyc3QgY2FtcGFpZ24gd2hpbGUgeWV0IGEgc3RyaXBsaW5nLCB3aGVuIFRhcnF1aW4sIHdobyBoYWQgYmVlbiBraW5nIG9mIFJvbWUsIGFuZCB0aGVuIGhhZCBiZWVuIGV4cGVsbGVkLCBhZnRlciBtYW55IHVuc3VjY2Vzc2Z1bCBiYXR0bGVzLCBzdGFrZWQgaGlzIGFsbCwgYXMgaXQgd2VyZSwgdXBvbiBhIGZpbmFsIHRocm93LiBNb3N0IG9mIHRoZSBwZW9wbGUgb2YgTGF0aXVtIGFuZCBtYW55IGFsc28gb2YgdGhlIG90aGVyIHBlb3BsZXMgb2YgSXRhbHkgd2VyZSBhc3Npc3RpbmcgaGltIGFuZCBtYXJjaGluZyB3aXRoIGhpbSB1cG9uIFJvbWUsIHRvIHJlaW5zdGF0ZSBoaW0gdGhlcmUsIG5vdCBzbyBtdWNoIGZyb20gYSBkZXNpcmUgdG8gZ3JhdGlmeSBoaW0sIGFzIGJlY2F1c2UgZmVhciBhbmQgZW52eSBsZWQgdGhlbSB0byB0cnkgdG8gb3ZlcnRocm93IHRoZSBncm93aW5nIHBvd2VyIG9mIHRoZSBSb21hbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBlbnN1aW5nIGJhdHRsZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5CeSBMYWtlIFJlZ2lsbHVzLCA0OTggKD8pIEIuQy48L25vdGU+IHdoaWNoIGxvbmcgZmF2b3VyZWQgbm93IHRoaXMgc2lkZSBhbmQgbm93IHRoYXQsIE1hcmNpdXMsIHdobyB3YXMgZmlnaHRpbmcgc3R1cmRpbHkgdW5kZXIgdGhlIGV5ZXMgb2YgdGhlIGRpY3RhdG9yLCBzYXcgYSBSb21hbiBzb2xkaWVyIHN0cnVjayBkb3duIG5lYXIgYnkuIEhlIHJhbiB0byBoaW0gYXQgb25jZSwgc3Rvb2QgaW4gZnJvbnQgb2YgaGltLCBkZWZlbmRlZCBoaW0sIGFuZCBzbGV3IGhpcyBhc3NhaWxhbnQuIEFjY29yZGluZ2x5LCBhZnRlciB0aGUgUm9tYW4gZ2VuZXJhbCBoYWQgd29uIHRoZSBkYXksIGhlIGNyb3duZWQgTWFyY2l1cywgYW1vbmcgdGhlIGZpcnN0LCB3aXRoIGEgZ2FybGFuZCBvZiBvYWsgbGVhdmVzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpcyB0aGUgY2l2aWMgY3Jvd24gd2hpY2ggdGhlIGxhdyBiZXN0b3dzIHVwb24gb25lIHdobyBoYXMgc2F2ZWQgdGhlIGxpZmUgb2YgYSBmZWxsb3ctY2l0aXplbiBpbiBiYXR0bGUsIGVpdGhlciBiZWNhdXNlIHRoZSBvYWsgd2FzIGhlbGQgaW4gc3BlY2lhbCBob25vdXIgZm9yIHRoZSBzYWtlIG9mIHRoZSBBcmNhZGlhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RWFybHkgY29sb25pc3RzIG9mIFJvbWUsIHVuZGVyIEV2YW5kZXIuPC9ub3RlPiB3aG8gd2VyZSBjYWxsZWQgYWNvcm4tZWF0ZXJzIGluIGFuIG9yYWNsZSBvZiBBcG9sbG87PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDEuNjYiIHZhbGlkPSJ5ZXMiPkhlcm9kb3R1cywgaS4gNjYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG9yIGJlY2F1c2UgdGhleSBjb3VsZCBzcGVlZGlseSBmaW5kIGFuIGFidW5kYW5jZSBvZiBvYWsgd2hlcmV2ZXIgdGhleSBmb3VnaHQ7IG9yIGJlY2F1c2UgaXQgd2FzIHRob3VnaHQgdGhhdCB0aGUgZ2FybGFuZCBvZiBvYWsgbGVhdmVzLCBiZWluZyBzYWNyZWQgdG8gSnVwaXRlciwgdGhlIGNpdHkncyBndWFyZGlhbiwgd2FzIGZpdHRpbmdseSBiZXN0b3dlZCB1cG9uIG9uZSB3aG8gc2F2ZWQgdGhlIGxpZmUgb2YgYSBjaXRpemVuLiBUaGUgb2FrLCBtb3Jlb3ZlciwgaGFzIHRoZSBtb3N0IGJlYXV0aWZ1bCBmcnVpdCBvZiBhbGwgd2lsZCB0cmVlcywgYW5kIGlzIHRoZSBzdHVyZGllc3Qgb2YgYWxsIHRyZWVzIHVuZGVyIGN1bHRpdmF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdHMgYWNvcm4gdXNlZCB0byBiZSBmb29kLCBhbmQgdGhlIGhvbmV5IGZvdW5kIGluIGl0IHVzZWQgdG8gYmUgZHJpbms8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc2hhcGUgb2YgbWVhZC48L25vdGU+IGZvciBtZW47IGFuZCBpdCBmdXJuaXNoZWQgdGhlbSB3aXRoIHRoZSBmbGVzaCBvZiBtb3N0IGdyYXppbmcgY3JlYXR1cmVzIGFuZCBiaXJkcywgc2luY2UgaXQgYm9yZSB0aGUgbWlzdGxldG9lLCBmcm9tIHdoaWNoIHRoZXkgbWFkZSBiaXJkLWxpbWUgZm9yIHNuYXJlcy4KCQkJPC9wPgogICAgICAgICA8cD5JbiB0aGUgYmF0dGxlIG9mIHdoaWNoIEkgd2FzIHNwZWFraW5nLCBpdCBpcyBzYWlkIHRoYXQgQ2FzdG9yIGFuZCBQb2xsdXggYXBwZWFyZWQsIGFuZCB0aGF0IGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBiYXR0bGUgdGhleSB3ZXJlIHNlZW4sIHRoZWlyIGhvcnNlcyBhbGwgYS1kcmlwIHdpdGggc3dlYXQsIGluIHRoZSBmb3J1bSwgYW5ub3VuY2luZyB0aGUgdmljdG9yeSwgYnkgdGhlIGZvdW50YWluIHdoZXJlIHRoZWlyIHRlbXBsZSBub3cgc3RhbmRzLgoJCQkJVGhlcmVmb3JlIHRoZSBkYXkgb24gd2hpY2ggdGhpcyB2aWN0b3J5IHdhcyB3b24sIHRoZSBJZGVzIG9mIEp1bHksIHdhcyBjb25zZWNyYXRlZCB0byB0aGUgRGlvc2N1cmkuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdvdWxkIHNlZW0gdGhhdCB3aGVuIGEgeW91bmcgbWFuJ3MgYW1iaXRpb24gaXMgbm8gaW50ZWdyYWwgcGFydCBvZiBoaXMgbmF0dXJlLCBpdCBpcyBhcHQgdG8gYmUgcXVlbmNoZWQgYnkgYW4gaG9ub3VyYWJsZSBkaXN0aW5jdGlvbiB3aGljaCBpcyBhdHRhaW5lZCB0b28gZWFybHkgaW4gbGlmZTsgaGlzIHRoaXJzdCBhbmQgZmFzdGlkaW91cyBhcHBldGl0ZSBhcmUgc3BlZWRpbHkgc2F0aXNmaWVkLiBCdXQgc2VyaW91cyBhbmQgZmlybSBzcGlyaXRzIGFyZSBzdGltdWxhdGVkIGJ5IHRoZSBob25vdXJzIHRoZXkgcmVjZWl2ZSwgYW5kIGdsb3cgYnJpZ2h0bHksIGFzIGlmIHJvdXNlZCBieSBhIG1pZ2h0eSB3aW5kIHRvIGFjaGlldmUgdGhlIG1hbmlmZXN0IGdvb2QuIFRoZXkgZG8gbm90IGZlZWwgdGhhdCB0aGV5IGFyZSByZWNlaXZpbmcgYSByZXdhcmQgZm9yIHdoYXQgdGhleSBoYXZlIGRvbmUsIGJ1dCByYXRoZXIgdGhhdCB0aGV5IGFyZSBnaXZpbmcgcGxlZGdlcyBvZiB3aGF0IHRoZXkgd2lsbCBkbywgYW5kIHRoZXkgYXJlIGFzaGFtZWQgdG8gZmFsbCBiZWhpbmQgdGhlaXIgcmVwdXRhdGlvbiBpbnN0ZWFkIG9mIHN1cnBhc3NpbmcgaXQgYnkgdGhlaXIgYWN0dWFsIGV4cGxvaXRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgaW4gdGhpcyBzcGlyaXQgdGhhdCBNYXJjaXVzIHZpZWQgd2l0aCBoaW1zZWxmIGluIG1hbmx5IHZhbG91ciwgYW5kIGJlaW5nIGV2ZXIgZGVzaXJvdXMgb2YgZnJlc2ggYWNoaWV2ZW1lbnQsIGhlIGZvbGxvd2VkIG9uZSBleHBsb2l0IHdpdGggYW5vdGhlciwgYW5kIGhlYXBlZCBzcG9pbHMgdXBvbiBzcG9pbHMsIHNvIHRoYXQgaGlzIGxhdGVyIGNvbW1hbmRlcnMgd2VyZSBhbHdheXMgc3RyaXZpbmcgd2l0aCB0aGVpciBwcmVkZWNlc3NvcnMgaW4gdGhlaXIgZWZmb3J0cyB0byBkbyBoaW0gaG9ub3VyLCBhbmQgdG8gc3VycGFzcyBpbiB0aGVpciB0ZXN0aW1vbmlhbHMgdG8gaGlzIHByb3dlc3MuIE1hbnkgaW5kZWVkIHdlcmUgdGhlIHdhcnMgYW5kIGNvbmZsaWN0cyB3aGljaCB0aGUgUm9tYW5zIHdhZ2VkIGluIHRob3NlIGRheXMsIGFuZCBmcm9tIG5vbmUgZGlkIGhlIHJldHVybiB3aXRob3V0IGxhdXJlbHMgYW5kIHJld2FyZHMgb2YgdmFsb3VyLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZXJlYXMgb3RoZXIgbWVuIGZvdW5kIGluIGdsb3J5IHRoZSBjaGllZiBlbmQgb2YgdmFsb3VyLCBoZSBmb3VuZCB0aGUgY2hpZWYgZW5kIG9mIGdsb3J5IGluIGhpcyBtb3RoZXIncyBnbGFkbmVzcy4gVGhhdCBzaGUgc2hvdWxkIGhlYXIgaGltIHByYWlzZWQgYW5kIHNlZSBoaW0gY3Jvd25lZCBhbmQgZW1icmFjZSBoaW0gd2l0aCB0ZWFycyBvZiBqb3ksIHRoaXMgd2FzIHdoYXQgZ2F2ZSBoaW0sIGFzIGhlIHRob3VnaHQsIHRoZSBoaWdoZXN0IGhvbm91ciBhbmQgZmVsaWNpdHkuIEFuZCBpdCB3YXMgZG91YnRsZXNzIHRoaXMgZmVlbGluZyB3aGljaCBFcGFtaW5vbmRhcyBhbHNvIGlzIHNhaWQgdG8gaGF2ZSBjb25mZXNzZWQsIGluIGNvbnNpZGVyaW5nIGl0IGhpcyBncmVhdGVzdCBnb29kIGZvcnR1bmUgdGhhdCBoaXMgZmF0aGVyIGFuZCBtb3RoZXIgbGl2ZWQgdG8ga25vdyBvZiBoaXMgZ2VuZXJhbHNoaXAgYW5kIHZpY3RvcnkgYXQgTGV1Y3RyYS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIHdhcyBzbyBibGVzc2VkIGFzIHRvIGhhdmUgYm90aCBoaXMgcGFyZW50cyBzaGFyZSBpbiBoaXMgcGxlYXN1cmUgYW5kIHN1Y2Nlc3MsIHdoZXJlYXMgTWFyY2l1cywgd2hvIHRob3VnaHQgaGUgb3dlZCBoaXMgbW90aGVyIHRoZSBmaWxpYWwgZ3JhdGl0dWRlIGFsc28gd2hpY2ggd291bGQgaGF2ZSBiZWVuIGR1ZSB0byBoaXMgZmF0aGVyLCBjb3VsZCBub3QgZ2V0IGhpcyBmaWxsIG9mIGdsYWRkZW5pbmcgYW5kIGhvbm91cmluZyBWb2x1bW5pYSwgbmF5LCBoZSBldmVuIG1hcnJpZWQgYWNjb3JkaW5nIHRvIGhlciB3aXNoIGFuZCByZXF1ZXN0LCBhbmQgY29udGludWVkIHRvIGxpdmUgaW4gdGhlIHNhbWUgaG91c2Ugd2l0aCBoaXMgbW90aGVyIGFmdGVyIGNoaWxkcmVuIHdlcmUgYm9ybiB0byBoaW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXB1dGF0aW9uIGFuZCBpbmZsdWVuY2UgcHJvY3VyZWQgYnkgaGlzIHZhbG91ciB3ZXJlIGFscmVhZHkgZ3JlYXQgaW4gdGhlIGNpdHksIHdoZW4gdGhlIHNlbmF0ZSwgdGFraW5nIHRoZSBwYXJ0IG9mIHRoZSB3ZWFsdGh5IGNpdGl6ZW5zLCBiZWdhbiB0byBiZSBhdCB2YXJpYW5jZSB3aXRoIHRoZSBjb21tb24gcGVvcGxlLCB3aG8gdGhvdWdodCB0aGV5IHN1ZmZlcmVkIG1hbnkgZ3JpZXZvdXMgaWxscyBhdCB0aGUgaGFuZHMgb2YgdGhlIG1vbmV5LWxlbmRlcnMuIEZvciB0aG9zZSBvZiB0aGVtIHRoYXQgd2VyZSBwb3NzZXNzZWQgb2YgbW9kZXJhdGUgbWVhbnMgd2VyZSBzdHJpcHBlZCBvZiBhbGwgdGhleSBoYWQgYnkgbWVhbnMgb2YgcGxlZGdlcyBhbmQgc2FsZXMsIHdoaWxlIHRob3NlIHdobyB3ZXJlIGFsdG9nZXRoZXIgd2l0aG91dCByZXNvdXJjZXMgd2VyZSBsZWQgYXdheSBpbiBwZXJzb24gYW5kIHB1dCBpbiBwcmlzb24sIGFsdGhvdWdoIHRoZWlyIGJvZGllcyBib3JlIG1hbnkgbWFya3Mgb2Ygd291bmRzIHJlY2VpdmVkIGFuZCBoYXJkc2hpcHMgdW5kZXJnb25lIGluIGNhbXBhaWducyBmb3IgdGhlIGRlZmVuY2Ugb2YgdGhlaXIgY291bnRyeS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGxhc3Qgb2YgdGhlc2UgaGFkIGJlZW4gYWdhaW5zdCB0aGUgU2FiaW5lcywgYW5kIHRoZXkgaGFkIHVuZGVydGFrZW4gaXQgdXBvbiBhIHByb21pc2Ugb2YgdGhlaXIgd2VhbHRoaWVzdCBjcmVkaXRvcnMgdG8gZGVhbCBtb2RlcmF0ZWx5IHdpdGggdGhlbSwgYW5kIGFmdGVyIGEgdm90ZSBvZiB0aGUgc2VuYXRlIHRoYXQgTWFyY3VzIFZhbGVyaXVzLCB0aGUgY29uc3VsLCBzaG91bGQgZ3VhcmFudGVlIHRoZSBwcm9taXNlLiBCdXQgYWZ0ZXIgdGhleSBoYWQgZm91Z2h0IHplYWxvdXNseSBpbiB0aGF0IGJhdHRsZSBhbHNvLCBhbmQgaGFkIGNvbnF1ZXJlZCB0aGUgZW5lbXksIG5vIGNvbnNpZGVyYXRpb24gd2FzIHNob3duIHRoZW0gYnkgdGhlaXIgY3JlZGl0b3JzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlIHNlbmF0ZSBkaWQgbm90IGV2ZW4gcHJldGVuZCB0byByZW1lbWJlciBpdHMgYWdyZWVtZW50cywgYnV0IGFnYWluIHN1ZmZlcmVkIHRoZW0gdG8gYmUgc2VpemVkIGluIHBsZWRnZSBvZiBwYXltZW50cyBhbmQgaGFsZWQgYXdheSB0byBwcmlzb24uIFRoZW4gdGhlcmUgd2VyZSB0dW11bHRzIGFuZCBkaXNvcmRlcmx5IGdhdGhlcmluZ3MgaW4gdGhlIGNpdHksIGFuZCB0aGUgZW5lbXksIG5vdCB1bmF3YXJlIG9mIHRoZSBwb3B1bGFyIGNvbmZ1c2lvbiwgYnVyc3QgaW4gYW5kIHJhdmFnZWQgdGhlIGNvdW50cnksIGFuZCB3aGVuIHRoZSBjb25zdWxzIHN1bW1vbmVkIHRob3NlIG9mIG1pbGl0YXJ5IGFnZSB0byBhcm1zLCBubyBvbmUgcmVzcG9uZGVkLiBJbiB0aGlzIGNyaXNpcywgdGhlIG9waW5pb25zIG9mIHRob3NlIGluIGF1dGhvcml0eSB3ZXJlIGFnYWluIGF0IHZhcmlhbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIHRob3VnaHQgdGhhdCBjb25jZXNzaW9ucyBzaG91bGQgYmUgbWFkZSB0byB0aGUgcGxlYmVpYW5zLCBhbmQgdGhlIGV4Y2Vzc2l2ZSByaWdvciBvZiB0aGUgbGF3IHJlbGF4ZWQ7IGJ1dCBvdGhlcnMgb3Bwb3NlZCB0aGlzLCBhbmQgYW1vbmcgdGhlbSB3YXMgTWFyY2l1cy4gSGUgZGlkIG5vdCByZWdhcmQgdGhlIGZpbmFuY2lhbCBkaWZmaWN1bHRpZXMgYXMgdGhlIG1haW4gcG9pbnQgYXQgaXNzdWUsIGFuZCBleGhvcnRlZCB0aGUgbWFnaXN0cmF0ZXMgdG8gYmUgd2lzZSBlbm91Z2ggdG8gY2hlY2sgYW5kIHF1ZWxsIHRoaXMgaW5jaXBpZW50IGF0dGVtcHQgYXQgYm9sZCBvdXRyYWdlIG9uIHRoZSBwYXJ0IG9mIGEgcG9wdWxhY2UgaW4gcmV2b2x0IGFnYWluc3QgdGhlIGxhd3MuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgbWV0IHRvIGRlYmF0ZSB0aGlzIHF1ZXN0aW9uIG1hbnkgdGltZXMgd2l0aGluIHRoZSBzcGFjZSBvZiBhIGZldyBkYXlzLCBidXQgY2FtZSB0byBubyBkZWZpbml0ZSBjb25jbHVzaW9uLiBUaGUgcGxlYmVpYW5zIHRoZXJlZm9yZSBiYW5kZWQgdG9nZXRoZXIgb24gYSBzdWRkZW4sIGFuZCBhZnRlciBtdXR1YWwgZXhob3J0YXRpb25zIGZvcnNvb2sgdGhlIGNpdHksIGFuZCB0YWtpbmcgcG9zc2Vzc2lvbiBvZiB3aGF0IGlzIG5vdyBjYWxsZWQgdGhlIFNhY3JlZCBNb3VudCwgZXN0YWJsaXNoZWQgdGhlbXNlbHZlcyBiZXNpZGUgdGhlIHJpdmVyIEFuaW8uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhyZWUgbWlsZXMgZnJvbSB0aGUgY2l0eSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zMi4yIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gMzIsIDI8L2JpYmw+KS48L25vdGU+IFRoZXkgY29tbWl0dGVkIG5vIGFjdHMgb2YgdmlvbGVuY2Ugb3Igc2VkaXRpb24sIGJ1dCBvbmx5IGNyaWVkIGFsb3VkIHRoYXQgdGhleSBoYWQgZm9yIGEgbG9uZyB0aW1lIGJlZW4gYmFuaXNoZWQgZnJvbSB0aGUgY2l0eSBieSB0aGUgcmljaCwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoYXQgSXRhbHkgd291bGQgZXZlcnl3aGVyZSBhZmZvcmQgdGhlbSBhaXIsIHdhdGVyLCBhbmQgYSBwbGFjZSBvZiBidXJpYWwsIHdoaWNoIHdhcyBhbGwgdGhleSBoYWQgaWYgdGhleSBkd2VsdCBpbiBSb21lLCBleGNlcHQgZm9yIHRoZSBwcml2aWxlZ2Ugb2Ygd291bmRzIGFuZCBkZWF0aCBpbiBjYW1wYWlnbnMgZm9yIHRoZSBkZWZlbmNlIG9mIHRoZSByaWNoLgoJCQk8L3A+CiAgICAgICAgIDxwPlRoZXNlIHByb2NlZWRpbmdzIGFsYXJtZWQgdGhlIHNlbmF0ZSwgYW5kIGl0IHNlbnQgb3V0IHRob3NlIG9mIGl0cyBvbGRlciBtZW1iZXJzIHdobyB3ZXJlIG1vc3QgcmVhc29uYWJseSBkaXNwb3NlZCB0b3dhcmRzIHRoZSBwZW9wbGUgdG8gdHJlYXQgd2l0aCB0aGVtLiBUaGUgY2hpZWYgc3Bva2VzbWFuIHdhcyBNZW5lbml1cyBBZ3JpcHBhLCBhbmQgYWZ0ZXIgbXVjaCBlbnRyZWF0eSBvZiB0aGUgcGVvcGxlIGFuZCBtdWNoIHBsYWluIHNwZWFraW5nIGluIGJlaGFsZiBvZiB0aGUgc2VuYXRlLCBoZSBjb25jbHVkZWQgaGlzIGRpc2NvdXJzZSB3aXRoIGEgY2VsZWJyYXRlZCBmYWJsZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgc2FpZCwgbmFtZWx5LCB0aGF0IGFsbCB0aGUgb3RoZXIgbWVtYmVycyBvZiBtYW4ncyBib2R5IG9uY2UgcmV2b2x0ZWQgYWdhaW5zdCB0aGUgYmVsbHksIGFuZCBhY2N1c2VkIGl0IG9mIGJlaW5nIHRoZSBvbmx5IG1lbWJlciB0byBzaXQgaWRseSBkb3duIGluIGl0cyBwbGFjZSBhbmQgbWFrZSBubyBjb250cmlidXRpb24gdG8gdGhlIGNvbW1vbiB3ZWxmYXJlLCB3aGlsZSB0aGUgcmVzdCB1bmRlcndlbnQgZ3JlYXQgaGFyZHNoaXBzIGFuZCBwZXJmb3JtZWQgZ3JlYXQgcHVibGljIHNlcnZpY2VzIG9ubHkgdG8gbWluaXN0ZXIgdG8gaXRzIGFwcGV0aXRlczsgYnV0IHRoYXQgdGhlIGJlbGx5IGxhdWdoZWQgYXQgdGhlaXIgc2ltcGxpY2l0eSBpbiBub3Qga25vd2luZyB0aGF0IGl0IHJlY2VpdmVkIGludG8gaXRzZWxmIGFsbCB0aGUgYm9keSdzIG5vdXJpc2htZW50IG9ubHkgdG8gc2VuZCBpdCBiYWNrIGFnYWluIGFuZCBkdWx5IGRpc3RyaWJ1dGUgaXQgYW1vbmcgdGhlIG90aGVyIG1lbWJlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TdWNoLCB0aGVuLDwvcT4gc2FpZCBBZ3JpcHBhLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlzIHRoZSByZWxhdGlvbiBvZiB0aGUgc2VuYXRlLCBteSBmZWxsb3ctY2l0aXplbnMsIHRvIHlvdTsgdGhlIG1hdHRlcnMgZm9yIGRlbGliZXJhdGlvbiB3aGljaCB0aGVyZSByZWNlaXZlIHRoZSBuZWNlc3NhcnkgYXR0ZW50aW9uIGFuZCBkaXNwb3NpdGlvbiBicmluZyB0byB5b3UgYWxsIGFuZCBzZXZlcmFsbHkgd2hhdCBpcyB1c2VmdWwgYW5kIGhlbHBmdWwuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zMi45IiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gMzIsIDktMTE8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA2Ljg2Ij5EaW9ueXNpdXMgSGFsLiwgPHRpdGxlPkFudGlxLiBSb20uPC90aXRsZT4gdmkuIDg2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSByZWNvbmNpbGlhdGlvbiBmb2xsb3dlZCwgYWZ0ZXIgdGhlIHBlb3BsZSBoYWQgYXNrZWQgYW5kIG9idGFpbmVkIGZyb20gdGhlIHNlbmF0ZSB0aGUgcHJpdmlsZWdlIG9mIGVsZWN0aW5nIGZpdmUgbWVuIGFzIHByb3RlY3RvcnMgb2YgdGhvc2Ugd2hvIG5lZWRlZCBzdWNjb3VyLCB0aGUgb2ZmaWNlcnMgbm93IGNhbGxlZCB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLiBBbmQgdGhlIGZpcnN0IHdob20gdGhleSBjaG9zZSB0byB0aGlzIG9mZmljZSB3ZXJlIEp1bml1cyBCcnV0dXMgYW5kIFNpY2luaXVzIFZlbGx1dHVzLCB3aG8gaGFkIGJlZW4gdGhlaXIgbGVhZGVycyBpbiB0aGUgc2VjZXNzaW9uLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjMzLjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzMywgMS0zLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBXaGVuIHRoZSBjaXR5IHdhcyB0aHVzIHVuaXRlZCwgdGhlIGNvbW1vbiBwZW9wbGUgYXQgb25jZSBvZmZlcmVkIHRoZW1zZWx2ZXMgYXMgc29sZGllcnMsIGFuZCB0aGUgY29uc3VscyBmb3VuZCB0aGVtIHJlYWR5IGFuZCBlYWdlciBmb3Igc2VydmljZSBpbiB0aGUgd2FyLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIE1hcmNpdXMsIHRob3VnaCBoZSB3YXMgZGlzcGxlYXNlZCBoaW1zZWxmIHRvIGhhdmUgdGhlIHBlb3BsZSBpbmNyZWFzZSBpbiBwb3dlciBhdCB0aGUgZXhwZW5zZSBvZiB0aGUgYXJpc3RvY3JhY3ksIGFuZCB0aG91Z2ggaGUgc2F3IHRoYXQgbWFueSBvZiB0aGUgb3RoZXIgcGF0cmljaWFucyB3ZXJlIG9mIHRoZSBzYW1lIG1pbmQsIGhlIG5ldmVydGhlbGVzcyBleGhvcnRlZCB0aGVtIG5vdCB0byBmYWxsIGJlaGluZCB0aGUgY29tbW9uIHBlb3BsZSBpbiBjb250ZW5kaW5nIGZvciB0aGVpciBjb3VudHJ5J3Mgd2VsZmFyZSwgYnV0IHRvIHNob3cgdGhhdCB0aGV5IHdlcmUgc3VwZXJpb3IgdG8gdGhlbSBpbiB2YWxvdXIgcmF0aGVyIHRoYW4gaW4gcG9saXRpY2FsIHBvd2VyLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbW9uZyB0aGUgVm9sc2NpYW5zLCB3aXRoIHdob20gdGhlIFJvbWFucyB3ZXJlIGF0IHdhciwgdGhlIGNpdHkgb2YgQ29yaW9saSB0b29rIGhpZ2hlc3QgcmFuay4gV2hlbiwgdGhlcmVmb3JlLCBDb21pbml1cyB0aGUgY29uc3VsIGhhZCBpbnZlc3RlZCB0aGlzIHBsYWNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IGlzIGluIGNvbm5lY3Rpb24gd2l0aCB0aGUgYXR0YWNrIG9uIENvcm9saSB0aGF0IExpdnkgZmlyc3QgbWVudGlvbnMgTWFyY2l1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zMy41IiB2YWxpZD0ieWVzIj5paS4gMzMsIDUtOTwvYmlibD4pOyBhbHNvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDYuOTIiPkRpb255c2l1cyBIYWwuICh2aS4gOTIpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGUgcmVzdCBvZiB0aGUgVm9sc2NpYW5zLCBmZWFyaW5nIGZvciBpdHMgc2FmZXR5LCBjYW1lIHRvIGl0cyBhaWQgYWdhaW5zdCB0aGUgUm9tYW5zIGZyb20gYWxsIHBhcnRzLCBkZXNpZ25pbmcgdG8gZ2l2ZSB0aGVtIGJhdHRsZSBpbiBmcm9udCBvZiB0aGUgY2l0eSBhbmQgdG8gYXR0YWNrIHRoZW0gb24gYm90aCBzaWRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmV1cG9uIENvbWluaXVzIGRpdmlkZWQgaGlzIGZvcmNlcywgZ29pbmcgZm9ydGggaGltc2VsZiB0byBtZWV0IHRoZSBWb2xzY2lhbnMgd2hvIHdlcmUgY29taW5nIHVwIG91dHNpZGUsIGFuZCBsZWF2aW5nIFRpdHVzIExhcnRpdXMsIG9uZSBvZiB0aGUgYnJhdmVzdCBSb21hbnMgb2YgaGlzIGRheSwgaW4gY2hhcmdlIG9mIHRoZSBzaWVnZS4gVGhlbiB0aGUgbWVuIG9mIENvcmlvbGksIGRlc3Bpc2luZyB0aGUgZm9yY2VzIHRoYXQgd2VyZSBsZWZ0LCBzYWxsaWVkIG91dCBhZ2FpbnN0IHRoZW0sIG92ZXJjYW1lIHRoZW0gaW4gYmF0dGxlIGF0IGZpcnN0LCBhbmQgcHVyc3VlZCB0aGUgUm9tYW5zIHRvIHRoZWlyIGNhbXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQgTWFyY2l1cyBkYXJ0ZWQgb3V0IHdpdGggYSBzbWFsbCBiYW5kLCBhbmQgYWZ0ZXIgc2xheWluZyB0aG9zZSB3aG8gY2FtZSB0byBjbG9zZSBxdWFydGVycyBhbmQgYnJpbmdpbmcgdGhlIHJlc3Qgb2YgdGhlIGFzc2FpbGFudHMgdG8gYSBoYWx0LCBjYWxsZWQgdGhlIFJvbWFucyBiYWNrIHRvIHRoZSBmaWdodCB3aXRoIGxvdWQgY3JpZXMuIEZvciBoZSBoYWQsIGFzIENhdG8gdGhvdWdodCBhIHNvbGRpZXIgc2hvdWxkIGhhdmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1hLiAxLjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2F0byB0aGUgRWxkZXI8L3RpdGxlPiwgaS4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbm90IG9ubHkgYSB2aWdvdXIgb2Ygc3Ryb2tlLCBidXQgYSB2b2ljZSBhbmQgbG9vayB3aGljaCBtYWRlIGhpbSBhIGZlYXJmdWwgbWFuIGZvciBhIGZvZSB0byBlbmNvdW50ZXIsIGFuZCBoYXJkIHRvIHdpdGhzdGFuZC4gTWFueSBvZiBoaXMgbWVuIHJhbGxpZWQgdG8gc3VwcG9ydCBoaW0sIGFuZCB0aGUgZW5lbXkgd2l0aGRyZXcgaW4gdGVycm9yLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHRoaXMsIGhvd2V2ZXIsIGhlIHdhcyBub3Qgc2F0aXNmaWVkLCBidXQgZm9sbG93ZWQgaGFyZCB1cG9uIHRoZW0sIGFuZCBkcm92ZSB0aGVtIGF0IGxhc3QgaW4gaGVhZGxvbmcgZmxpZ2h0LCB1cCB0byB0aGUgZ2F0ZSBvZiB0aGVpciBjaXR5LiBUaGVyZSwgYWx0aG91Z2ggaGUgc2F3IHRoZSBSb21hbnMgdHVybmluZyBiYWNrIGZyb20gdGhlIHB1cnN1aXQsIG5vdyB0aGF0IG1hbnkgbWlzc2lsZXMgZnJvbSB0aGUgd2FsbHMgd2VyZSByZWFjaGluZyB0aGVtLCBhbmQgYWx0aG91Z2ggbm90IGEgbWFuIG9mIHRoZW0gZGFyZWQgdG8gdGhpbmsgb2YgYnVyc3RpbmcgaW50byB0aGUgY2l0eSBhbG9uZyB3aXRoIHRoZSBmdWdpdGl2ZXMsIGZ1bGwgYXMgaXQgd2FzIG9mIGVuZW1pZXMgaW4gYXJtcywgaGUgbmV2ZXJ0aGVsZXNzIHRvb2sgaGlzIHN0YW5kLCBhbmQgZXhob3J0ZWQgYW5kIGVuY291cmFnZWQgdGhlbSB0byB0aGUgZXhwbG9pdCwgY3J5aW5nIG91dCB0aGF0IGZvcnR1bmUgaGFkIG9wZW5lZCB0aGUgY2l0eSBmb3IgdGhlIHB1cnN1ZXJzIHJhdGhlciB0aGFuIGZvciB0aGUgcHVyc3VlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+T25seSBhIGZldyB3ZXJlIHdpbGxpbmcgdG8gZm9sbG93IGhpbSwgYnV0IGhlIHB1c2hlZCBoaXMgd2F5IHRocm91Z2ggdGhlIGVuZW15LCBsZWFwZWQgYWdhaW5zdCB0aGUgZ2F0ZSwgYW5kIGJ1cnN0IGluIGFsb25nIHdpdGggdGhlbSwgbm8gbWFuIGRhcmluZyB0byBvcHBvc2UgaGltIGF0IGZpcnN0IG9yIHJlc2lzdCBoaW0uIFRoZW4sIGhvd2V2ZXIsIHdoZW4gdGhlIGNpdGl6ZW5zIHNhdyB0aGF0IGZldyBvZiB0aGUgZW5lbXkgYWxsIHRvbGQgd2VyZSBpbnNpZGUsIHRoZXkgcmFsbGllZCBhbmQgYXR0YWNrZWQgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+RW52ZWxvcGVkIHRodXMgYnkgZnJpZW5kcyBhbmQgZm9lcyBhbGlrZSwgTWFyY2l1cyBpcyBzYWlkIHRvIGhhdmUgd2FnZWQgYSBjb21iYXQgaW4gdGhlIGNpdHkgd2hpY2gsIGZvciBwcm93ZXNzIG9mIGFybSwgc3BlZWQgb2YgZm9vdCwgYW5kIGRhcmluZyBvZiBzb3VsLCBwYXNzZXMgYWxsIGJlbGllZjsgaGUgb3ZlcndoZWxtZWQgYWxsIHdob20gaGUgYXNzYWlsZWQsIGRyaXZpbmcgc29tZSB0byB0aGUgcmVtb3Rlc3QgcGFydHMgb2YgdGhlIGNpdHksIHdoaWxlIG90aGVycyBnYXZlIHVwIHRoZSBzdHJ1Z2dsZSBhbmQgdGhyZXcgZG93biB0aGVpciBhcm1zLiBUaHVzIGhlIG1hZGUgaXQgYWJ1bmRhbnRseSBzYWZlIGZvciBMYXJ0aXVzIHRvIGxlYWQgdXAgdGhlIFJvbWFucyB3aG8gd2VyZSBvdXRzaWRlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY2l0eSBoYXZpbmcgYmVlbiBjYXB0dXJlZCBpbiB0aGlzIG1hbm5lciwgbW9zdCBvZiB0aGUgc29sZGllcnMgZmVsbCB0byBwbHVuZGVyaW5nIGFuZCBwaWxsYWdpbmcgaXQuIEF0IHRoaXMgTWFyY2l1cyB3YXMgaW5kaWduYW50LCBhbmQgY3JpZWQgb3V0IHRoYXQgaGUgdGhvdWdodCBpdCBhIHNoYW1lLCB3aGVuIHRoZWlyIGNvbnN1bCBhbmQgdGhlaXIgZmVsbG93IGNpdGl6ZW5zIHdobyB3ZXJlIHdpdGggaGltIGhhZCBwZXJoYXBzIGZhbGxlbiBpbiB3aXRoIHRoZSBlbmVteSBhbmQgd2VyZSBmaWdodGluZyBhIGJhdHRsZSB3aXRoIHRoZW0sIHRoYXQgdGhleSBvbiB0aGVpciBwYXJ0IHNob3VsZCBiZSBnb2luZyBhYm91dCBhZnRlciBib290eSwgb3IsIHVuZGVyIHByZXRleHQgb2YgZ2V0dGluZyBib290eSwgc2hvdWxkIHJ1biBhd2F5IGZyb20gdGhlIGRhbmdlci4gT25seSBhIGZldyBwYWlkIGFueSBoZWVkIHRvIGhpcyB3b3Jkcywgd2hlcmV1cG9uIGhlIHRvb2sgdGhvc2Ugd2hvIHdlcmUgd2lsbGluZyB0byBmb2xsb3csIGFuZCBzZXQgb3V0IG9uIHRoZSByb2FkIGJ5IHdoaWNoLCBhcyBoZSBsZWFybmVkLCB0aGUgY29uc3VsJ3MgYXJteSBoYWQgbWFyY2hlZCBiZWZvcmUgaGltLCBvZnRlbiB1cmdpbmcgaGlzIGNvbXBhbmlvbnMgb24gYW5kIGJlc2VlY2hpbmcgdGhlbSBub3QgdG8gc2xhY2tlbiB0aGVpciBlZmZvcnRzLCBhbmQgb2Z0ZW4gcHJheWluZyB0aGUgZ29kcyB0aGF0IGhlIG1pZ2h0IG5vdCBiZSB0b28gbGF0ZSBmb3IgdGhlIGJhdHRsZSwgYnV0IG1pZ2h0IGNvbWUgdXAgaW4gc2Vhc29uIHRvIHNoYXJlIGluIHRoZSBzdHJ1Z2dsZXMgYW5kIHBlcmlscyBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPkl0IHdhcyBhIGN1c3RvbSB3aXRoIHRoZSBSb21hbnMgb2YgdGhhdCB0aW1lLCB3aGVuIHRoZXkgd2VyZSBnb2luZyBpbnRvIGFjdGlvbiwgYW5kIHdlcmUgYWJvdXQgdG8gZ2lyZCB1cCB0aGVpciBjbG9ha3MgYW5kIHRha2UgdXAgdGhlaXIgYnVja2xlcnMsIHRvIG1ha2UgYXQgdGhlIHNhbWUgdGltZSBhbiB1bndyaXR0ZW4gd2lsbCwgbmFtaW5nIHRoZWlyIGhlaXJzIGluIHRoZSBoZWFyaW5nIG9mIHRocmVlIG9yIGZvdXIgd2l0bmVzc2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyBqdXN0IHdoYXQgdGhlIHNvbGRpZXJzIHdlcmUgZG9pbmcgd2hlbiBNYXJjaXVzIG92ZXJ0b29rIHRoZW0sIHRoZSBlbmVteSBiZWluZyBub3cgaW4gc2lnaHQuIEF0IGZpcnN0IHNvbWUgb2YgdGhlbSB3ZXJlIGNvbmZvdW5kZWQgd2hlbiB0aGV5IHNhdyB0aGF0IGhlIGhhZCBhIHNtYWxsIGZvbGxvd2luZyBhbmQgd2FzIGNvdmVyZWQgd2l0aCBibG9vZCBhbmQgc3dlYXQ7IGJ1dCB3aGVuIGhlIHJhbiB0byB0aGUgY29uc3VsIHdpdGggYSBnbGFkIGNvdW50ZW5hbmNlLCBnYXZlIGhpbSBoaXMgaGFuZCwgYW5kIGFubm91bmNlZCB0aGUgY2FwdHVyZSBvZiB0aGUgY2l0eSwgYW5kIHdoZW4gQ29taW5pdXMgZW1icmFjZWQgYW5kIGtpc3NlZCBoaW0sIHRoZW4gdGhleSB3ZXJlIGVuY291cmFnZWQsIHNvbWUgaGVhcmluZyBvZiB0aGUgc3VjY2VzcyB3aGljaCBoYWQgYmVlbiBnYWluZWQsIGFuZCBzb21lIGJ1dCBndWVzc2luZyBhdCBpdCwgYW5kIGFsbCBjYWxsZWQgbG91ZGx5IHVwb24gdGhlIGNvbnN1bCB0byBsZWFkIHRoZW0gaW50byBiYXR0bGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNYXJjaXVzIGFza2VkIENvbWluaXVzIGhvdyB0aGUgZW5lbXkgd2VyZSBhcnJheWVkLCBhbmQgd2hlcmUgdGhlaXIgYmVzdCBmaWdodGluZyBtZW4gd2VyZSBwbGFjZWQuIEFuZCB3aGVuIHRoZSBjb25zdWwgdG9sZCBoaW0gaGUgdGhvdWdodCB0aGUgdHJvb3BzIGluIHRoZSBjZW50cmUgd2VyZSB0aG9zZSBvZiB0aGUgQW50aWF0ZXMsIHdobyB3ZXJlIHRoZSBtb3N0IHdhcmxpa2Ugb2YgYWxsIGFuZCB5aWVsZGVkIHRvIG5vbmUgaW4gYnJhdmVyeSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGFzayBhbmQgZGVtYW5kIG9mIHlvdSwgdGhlbiw8L3E+IHNhaWQgTWFyY2l1cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5wb3N0IHVzIG9wcG9zaXRlIHRoZXNlIG1lbi48L3E+IFRoZSBjb25zdWwsIGFjY29yZGluZ2x5LCBncmFudGVkIGhpcyByZXF1ZXN0LCBhc3RvbmlzaGVkIGF0IGhpcyBhcmRvdXIuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIHNwZWFycyBiZWdhbiB0byBmbHksIE1hcmNpdXMgZGFydGVkIG91dCBiZWZvcmUgdGhlIGxpbmUsIGFuZCB0aGUgVm9sc2NpYW5zIHdobyBmYWNlZCBoaW0gY291bGQgbm90IHdpdGhzdGFuZCBoaXMgY2hhcmdlLCBidXQgd2hlcmUgaGUgZmVsbCB1cG9uIHRoZWlyIHJhbmtzIHRoZXkgd2VyZSBzcGVlZGlseSBjdXQgYXN1bmRlci4gVGhvc2Ugb24gZWl0aGVyIHNpZGUsIGhvd2V2ZXIsIHdoZWVsZWQgYWJvdXQgYW5kIGVuY29tcGFzc2VkIGhpbSB3aXRoIHRoZWlyIHdlYXBvbnMsIHNvIHRoYXQgdGhlIGNvbnN1bCwgZmVhcmluZyBmb3IgaGlzIHNhZmV0eSwgc2VudCB0byBoaXMgYWlkIHRoZSBjaG9pY2VzdCBtZW4gaGUgaGFkIGFib3V0IGhpcyBwZXJzb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYSBmaWVyY2UgYmF0dGxlIHJhZ2VkIGFyb3VuZCBNYXJjaXVzLCBhbmQgbWFueSB3ZXJlIHNsYWluIGluIHNob3J0IHNwYWNlIG9mIHRpbWU7IGJ1dCB0aGUgUm9tYW5zIHByZXNzZWQgaGFyZCB1cG9uIHRoZWlyIGVuZW1pZXMgYW5kIHB1dCB0aGVtIHRvIHJvdXQsIGFuZCBhcyB0aGV5IHNldCBvdXQgaW4gcHVyc3VpdCBvZiB0aGVtLCB0aGV5IGluc2lzdGVkIHRoYXQgTWFyY2l1cywgd2hvIHdhcyB3ZWlnaGVkIGRvd24gd2l0aCBmYXRpZ3VlIGFuZCB3b3VuZHMsIHNob3VsZCByZXRpcmUgdG8gdGhlIGNhbXAuIEhlIGFuc3dlcmVkLCBob3dldmVyLCB0aGF0IHdlYXJpbmVzcyB3YXMgbm90IGZvciB2aWN0b3JzLCBhbmQgdG9vayBhZnRlciB0aGUgZmx5aW5nIGZvZS4gVGhlIHJlc3Qgb2YgdGhlaXIgYXJteSBhbHNvIHdhcyBkZWZlYXRlZCwgbWFueSB3ZXJlIHNsYWluLCBhbmQgbWFueSB0YWtlbiBjYXB0aXZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA2Ljk0Ij5EaW9ueXNpdXMgSGFsLiB2aS4gOTQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlPbiB0aGUgZm9sbG93aW5nIGRheSwgd2hlbiBMYXJ0aXVzIGhhZCBjb21lIHVwLCBhbmQgdGhlIHJlc3Qgb2YgdGhlIGFybXkgd2FzIGFzc2VtYmxlZCBiZWZvcmUgdGhlIGNvbnN1bCwgQ29taW5pdXMgbW91bnRlZCB0aGUgcm9zdHJhLCBhbmQgYWZ0ZXIgcmVuZGVyaW5nIHRvIHRoZSBnb2RzIHRoZSBwcmFpc2UgdGhhdCB3YXMgdGhlaXIgZHVlIGZvciBzdWNoIGdyZWF0IHN1Y2Nlc3NlcywgYWRkcmVzc2VkIGhpbXNlbGYgdG8gTWFyY2l1cy4gSW4gdGhlIGZpcnN0IHBsYWNlLCBoZSByZWhlYXJzZWQgd2l0aCBwcmFpc2UgaGlzIGFzdG9uaXNoaW5nIGV4cGxvaXRzLCBzb21lIG9mIHdoaWNoIGhlIGhhZCBoaW1zZWxmIGJlaGVsZCBpbiB0aGUgYmF0dGxlLCB3aGlsZSB0byBvdGhlcnMgTGFydGl1cyBib3JlIHdpdG5lc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIG91dCBvZiB0aGUgYWJ1bmRhbnQgdHJlYXN1cmVzIGFuZCB0aGUgbWFueSBob3JzZXMgYW5kIHByaXNvbmVycyB0aGF0IGhhZCBiZWVuIHRha2VuLCBoZSBvcmRlcmVkIGhpbSB0byBjaG9vc2Ugb3V0IGEgdGVudGgsIGJlZm9yZSBhbnkgZGlzdHJpYnV0aW9uIHRvIHRoZSByZXN0IG9mIHRoZSBhcm15OyBhbmQgYmVzaWRlcyBhbGwgdGhpcywgaGUgcHJlc2VudGVkIGhpbSB3aXRoIGEgaG9yc2UsIGR1bHkgY2FwYXJpc29uZWQsIGFzIGEgcHJpemUgb2YgdmFsb3VyLiBBZnRlciB0aGUgUm9tYW5zIGhhZCBhcHBsYXVkZWQgdGhpcyBzcGVlY2gsIE1hcmNpdXMgY2FtZSBmb3J3YXJkIGFuZCBzYWlkIHRoYXQgaGUgYWNjZXB0ZWQgdGhlIGhvcnNlLCBhbmQgd2FzIGRlbGlnaHRlZCB3aXRoIHRoZSBwcmFpc2VzIG9mIHRoZSBjb25zdWwsIGJ1dCB0aGF0IGhlIGRlY2xpbmVkIHRoZSByZXN0LCBob2xkaW5nIGl0IHRvIGJlIHBheSwgbm90IGhvbm91ciwgYW5kIHdvdWxkIGJlIGNvbnRlbnQgd2l0aCBoaXMgc2luZ2xlIHNoYXJlIG9mIHRoZSBib290eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBJIGRvIGFzayBvbmUgc3BlY2lhbCBmYXZvdXIsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFuZCBiZWcgdGhhdCBJIG1heSByZWNlaXZlIGl0LiBJIGhhZCBhIGd1ZXN0LWZyaWVuZCBhbW9uZyB0aGUgVm9sc2NpYW5zLCBhIG1hbiBvZiBraW5kbGluZXNzIGFuZCBwcm9iaXR5LiBUaGlzIG1hbiBpcyBub3cgYSBwcmlzb25lciwgYW5kIGZyb20gd2VhbHRoIGFuZCBoYXBwaW5lc3MgaXMgcmVkdWNlZCB0byBzdWJqZWN0aW9uLiBTaW5jZSwgdGhlbiwgbWFueSBldmlscyBoYXZlIGJlZmFsbGVuIGhpbSwgbGV0IG1lIGF0IGxlYXN0IGZyZWUgaGltIGZyb20gb25lLCB0aGF0IG9mIGJlaW5nIHNvbGQgaW50byBib25kYWdlLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD5BdCBzdWNoIHdvcmRzIGFzIHRoZXNlIHN0aWxsIGxvdWRlciBzaG91dHMgZ3JlZXRlZCBNYXJjaXVzLCBhbmQgaGUgZm91bmQgbW9yZSBhZG1pcmVycyBvZiBoaXMgc3VwZXJpb3JpdHkgdG8gZ2FpbiB0aGFuIG9mIHRoZSBicmF2ZXJ5IGhlIGhhZCBzaG93biBpbiB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgdmVyeSBvbmVzIHdobyBzZWNyZXRseSBmZWx0IGEgY2VydGFpbiBqZWFsb3VzIGVudnkgb2YgaGltIGZvciBoaXMgY29uc3BpY3VvdXMgaG9ub3Vycywgbm93IHRob3VnaHQgaGltIHdvcnRoeSBvZiBncmVhdCByZXdhcmRzIGJlY2F1c2UgaGUgd291bGQgbm90IHRha2UgdGhlbTsgYW5kIHRoZXkgd2VyZSBtb3JlIGRlbGlnaHRlZCB3aXRoIHRoZSB2aXJ0dWUgd2hpY2ggbGVkIGhpbSB0byBkZXNwaXNlIHN1Y2ggZ3JlYXQgcmV3YXJkcywgdGhhbiB3aXRoIHRoZSBleHBsb2l0cyB3aGljaCBtYWRlIGhpbSB3b3J0aHkgb2YgdGhlbS4gRm9yIHRoZSByaWdodCB1c2Ugb2Ygd2VhbHRoIGlzIGEgZmFpcmVyIHRyYWl0IHRoYW4gZXhjZWxsZW5jZSBpbiBhcm1zOyBidXQgbm90IHRvIG5lZWQgd2VhbHRoIGlzIGxvZnRpZXIgdGhhbiB0byB1c2UgaXQuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBtdWx0aXR1ZGUgaGFkIGNlYXNlZCBzaG91dGluZyB0aGVpciBhcHBsYXVzZSwgQ29taW5pdXMgdG9vayB1cCB0aGUgd29yZCBhZ2FpbiBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZSBjYW5ub3QsIGluZGVlZCwgbXkgZmVsbG93LXNvbGRpZXJzLCBmb3JjZSB0aGVzZSBnaWZ0cyBvZiB5b3VycyB1cG9uIHRoZSBtYW4sIHdoZW4gaGUgZG9lcyBub3QgYWNjZXB0IHRoZW0gYW5kIGlzIHVud2lsbGluZyB0byB0YWtlIHRoZW07IGJ1dCB0aGVyZSBpcyBhIGdpZnQgd2hpY2ggaGUgY2Fubm90IHJlZnVzZSB3aGVuIGl0IGlzIG9mZmVyZWQuIExldCB1cyBnaXZlIGhpbSB0aGlzIGdpZnQsIGFuZCBwYXNzIGEgdm90ZSB0aGF0IGhlIGJlIHN1cm5hbWVkIENvcmlvbGFudXMsIHVubGVzcywgaW5kZWVkLCBiZWZvcmUgc3VjaCBhY3Qgb2Ygb3VycywgaGlzIGV4cGxvaXQgaGFzIGl0c2VsZiBnaXZlbiBoaW0gdGhpcyBuYW1lLjwvcT4gVGhlbmNlIGNhbWUgaGlzIHRoaXJkIG5hbWUgb2YgQ29yaW9sYW51cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuSC4gNi45NCI+RGlvbnlzaXVzIEhhbC4gdmkuIDk0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGlzIGl0IGlzIHBlcmZlY3RseSBjbGVhciB0aGF0IENhaXVzIHdhcyB0aGUgcHJvcGVyIG5hbWU7IHRoYXQgdGhlIHNlY29uZCBuYW1lLCBpbiB0aGlzIGNhc2UgTWFyY2l1cywgd2FzIHRoZSBjb21tb24gbmFtZSBvZiBmYW1pbHkgb3IgY2xhbjsgYW5kIHRoYXQgdGhlIHRoaXJkIG5hbWUgd2FzIGFkb3B0ZWQgc3Vic2VxdWVudGx5LCBhbmQgYmVzdG93ZWQgYmVjYXVzZSBvZiBzb21lIGV4cGxvaXQsIG9yIGZvcnR1bmUsIG9yIGJvZGlseSBmZWF0dXJlLCBvciBzcGVjaWFsIGV4Y2VsbGVuY2UgaW4gYSBtYW4uIFNvIHRoZSBHcmVla3MgdXNlZCB0byBnaXZlIHN1cm5hbWVzIGZyb20gYW4gZXhwbG9pdCwgYXMgZm9yIGluc3RhbmNlLCBTb3Rlcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNvdGVyLCA8ZW1waD5TYXZpb3VyPC9lbXBoPjsgQ2FsbGluaWN1cywgPGVtcGg+T2Ygbm9ibGUgdmljdG9yeTwvZW1waD47IFBoeXNjb24sIDxlbXBoPkZhdC1wYXVuY2g8L2VtcGg+OyBHcnlwdXMsIDxlbXBoPmhvb2stbm9zZWQ8L2VtcGg+OyBFdWVyZ2V0ZXMsIDxlbXBoPkJlbmVmYWN0b3I8L2VtcGg+OyBQaGlsYWRlbHBodXMsIDxlbXBoPlNpc3Rlcm9yIEJyb3RoZXItbG92ZXI8L2VtcGg+OyBFdWRhZW1vbiwgPGVtcGg+UHJvc3Blcm91czwvZW1waD47IERvc29uLCA8ZW1waD5BbHdheXMtcHJvbWlzaW5nPC9lbXBoPjsgTGF0aHlydXMsIDxlbXBoPlZldGNobGluZzwvZW1waD47IFN1bGxhLCA8ZW1waD5CbG90Y2hlczwvZW1waD4gKD8pOyBOaWdlciwgPGVtcGg+QmxhY2s8L2VtcGg+OyBSdWZ1cywgPGVtcGg+UmVkPC9lbXBoPjsgQ2FlY3VzLCA8ZW1waD5CbGluZDwvZW1waD47IENsYXVkaXVzLCA8ZW1waD5MYW1lPC9lbXBoPi48L25vdGU+IGFuZCBDYWxsaW5pY3VzOyBvciBmcm9tIGEgYm9kaWx5IGZlYXR1cmUsIGFzIFBoeXNjb24gYW5kIEdyeXB1czsgb3IgZnJvbSBhIHNwZWNpYWwgZXhjZWxsZW5jZSwgYXMgRXVlcmdldGVzIGFuZCBQaGlsYWRlcGh1czsgb3IgZnJvbSBzb21lIGdvb2QgZm9ydHVuZSwgYXMgRXVkYWVtb24sIHRoZSBzdXJuYW1lIG9mIHRoZSBzZWNvbmQgQmF0dHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc29tZSBvZiB0aGVpciBraW5ncyBoYXZlIGFjdHVhbGx5IGhhZCBzdXJuYW1lcyBnaXZlbiB0aGVtIGluIG1vY2tlcnksIGFzIEFudGlnb251cyBEb3NvbiBhbmQgUHRvbGVteSBMYXRoeXJ1cy4gU3VybmFtZXMgb2YgdGhpcyBzb3J0IHdlcmUgZXZlbiBtb3JlIGNvbW1vbiBhbW9uZyB0aGUgUm9tYW5zLiBGb3IgaW5zdGFuY2UsIG9uZSBvZiB0aGUgTWV0ZWxsaSB3YXMgY2FsbGVkIERpYWRlbWF0dXMsIGJlY2F1c2UgZm9yIGEgbG9uZyB0aW1lIGhlIHN1ZmZlcmVkIGZyb20gYSBydW5uaW5nIHNvcmUgYW5kIHdlbnQgYWJvdXQgd2l0aCBhIGJhbmRhZ2Ugb24gaGlzIGZvcmVoZWFkOyBhbm90aGVyIG1lbWJlciBvZiB0aGlzIGZhbWlseSB3YXMgY2FsbGVkIENlbGVyLCBiZWNhdXNlIGhlIGV4ZXJ0ZWQgaGltc2VsZiB0byBnaXZlIHRoZSBwZW9wbGUgZnVuZXJhbCBnYW1lcyBvZiBnbGFkaWF0b3JzIHdpdGhpbiBhIGZldyBkYXlzIG9mIGhpcyBmYXRoZXIncyBkZWF0aCwgYW5kIHRoZSBzcGVlZCBhbmQgc3dpZnRuZXNzIG9mIGhpcyBwcmVwYXJhdGlvbnMgZXhjaXRlZCBhc3RvbmlzaG1lbnQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDEwLjIiIHZhbGlkPSJ5ZXMiPlJvbXVsdXMsIHguIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGF0IHRoZSBwcmVzZW50IGRheSBzb21lIG9mIHRoZW0gYXJlIG5hbWVkIGZyb20gY2FzdWFsIGluY2lkZW50cyBhdCB0aGVpciBiaXJ0aCwgUHJvY3VsdXMsIGZvciBpbnN0YW5jZSwgaWYgYSBjaGlsZCBpcyBib3JuIHdoZW4gaGlzIGZhdGhlciBpcyBhd2F5IGZyb20gaG9tZTsgb3IgUG9zdHVtdXMsIGlmIGFmdGVyIGhpcyBkZWF0aDsgYW5kIHdoZW4gb25lIG9mIHR3aW4gY2hpbGRyZW4gc3Vydml2ZXMsIHdoaWxlIHRoZSBvdGhlciBkaWVzLCBoZSBpcyBjYWxsZWQgVm9waXNjdXMuIE1vcmVvdmVyLCBmcm9tIGJvZGlseSBmZWF0dXJlcyB0aGV5IG5vdCBvbmx5IGJlc3RvdyBzdWNoIHN1cm5hbWVzIGFzIFN1bGxhLCBOaWdlciwgYW5kIFJ1ZnVzLCBidXQgYWxzbyBzdWNoIGFzIENhZWN1cyBhbmQgQ2xhdWRpdXMuIEFuZCB0aGV5IGRvIHdlbGwgdGh1cyB0byBhY2N1c3RvbSBtZW4gdG8gcmVnYXJkIG5laXRoZXIgYmxpbmRuZXNzIG5vciBhbnkgb3RoZXIgYm9kaWx5IG1pc2ZvcnR1bmUgYXMgYSByZXByb2FjaCBvciBhIGRpc2dyYWNlLCBidXQgdG8gYW5zd2VyIHRvIHN1Y2ggbmFtZXMgYXMgdGhvdWdoIHRoZWlyIG93bi4gVGhpcyB0b3BpYywgaG93ZXZlciwgd291bGQgYmUgbW9yZSBmaXR0aW5nbHkgZGlzY3Vzc2VkIGVsc2V3aGVyZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3YXIgd2FzIG5vIHNvb25lciBvdmVyIHRoYW4gdGhlIHBvcHVsYXIgbGVhZGVycyByZXZpdmVkIHRoZSBpbnRlcm5hbCBkaXNzZW5zaW9ucywgd2l0aG91dCBhbnkgbmV3IGNhdXNlIG9mIGNvbXBsYWludCwgb3IganVzdCBhY2N1c2F0aW9ucywgYnV0IG1ha2luZyB0aGUgdmVyeSBldmlscyB3aGljaCBoYWQgbmVjZXNzYXJpbHkgZm9sbG93ZWQgaW4gdGhlIHdha2Ugb2YgdGhlaXIgcHJldmlvdXMgcXVhcnJlbHMgYW5kIGRpc3R1cmJhbmNlcyBhIHByZXRleHQgZm9yIG9wcG9zaW5nIHRoZSBwYXRyaWNpYW5zLiBGb3IgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgbGFuZCBoYWQgYmVlbiBsZWZ0IHVuc293biBhbmQgdW50aWxsZWQsIGFuZCB0aGUgd2FyIGxlZnQgbm8gb3Bwb3J0dW5pdHkgdG8gYXJyYW5nZSBhbiBpbXBvcnRhdGlvbiBvZiBtYXJrZXQgc3VwcGxpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcywgdGhlcmVmb3JlLCBhIGdyZWF0IHNjYXJjaXR5IG9mIGZvb2QsIGFuZCB3aGVuIHRoZSBwb3B1bGFyIGxlYWRlcnMgc2F3IHRoYXQgdGhlcmUgd2VyZSBubyBtYXJrZXQgc3VwcGxpZXMsIGFuZCB0aGF0IGlmIHRoZXJlIHdlcmUsIHRoZSBwZW9wbGUgaGFkIG5vIG1vbmV5IHRvIGJ1eSB0aGVtLCB0aGV5IGFzc2FpbGVkIHRoZSByaWNoIHdpdGggc2xhbmRlcm91cyBhY2N1c2F0aW9ucyBvZiBwdXJwb3NlbHkgYXJyYXlpbmcgdGhlIGZhbWluZSBhZ2FpbnN0IHRoZW0sIGluIGEgc3Bpcml0IG9mIHJldmVuZ2UuCgkJCTwvcD4KICAgICAgICAgPHA+TW9yZW92ZXIsIHRoZXJlIGNhbWUgYW4gZW1iYXNzeSBmcm9tIHRoZSBwZW9wbGUgb2YgVmVsaXRyYWUsIHdobyBvZmZlcmVkIHRvIGhhbmQgdGhlaXIgY2l0eSBvdmVyIHRvIHRoZSBSb21hbnMsIGFuZCBiZWdnZWQgdGhlbSB0byBzZW5kIG91dCBjb2xvbmlzdHMgZm9yIGl0LiBGb3IgYSBwZXN0aWxlbnRpYWwgZGlzZWFzZSBoYWQgYXNzYWlsZWQgdGhlbSwgYW5kIHdyb3VnaHQgc3VjaCBkZWF0aCBhbmQgZGVzdHJ1Y3Rpb24gYW1vbmcgdGhlaXIgY2l0aXplbnMgdGhhdCBoYXJkbHkgdGhlIHRlbnRoIHBhcnQgb2YgdGhlIHdob2xlIG51bWJlciB3YXMgbGVmdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHN1Y2ggb2YgdGhlIFJvbWFucyBhcyB3ZXJlIHNlbnNpYmxlIHRob3VnaHQgdGhhdCB0aGlzIHJlcXVlc3Qgb2YgdGhlIHBlb3BsZSBvZiBWZWxpdHJhZSBoYWQgY29tZSBhdCBhbiBhZHZhbnRhZ2VvdXMgYW5kIG9wcG9ydHVuZSB0aW1lLCBzaW5jZSB0aGUgc2NhcmNpdHkgb2YgZm9vZCBtYWRlIGl0IG5lZWRmdWwgdG8gZWFzZSB0aGUgY2l0eSBvZiBpdHMgYnVyZGVuc29tZSBudW1iZXJzOyBhdCB0aGUgc2FtZSB0aW1lIHRoZXkgYWxzbyBob3BlZCB0byBkaXNzaXBhdGUgaXRzIHNlZGl0aW9uLCBpZiB0aGUgbW9zdCB0dXJidWxlbnQgZWxlbWVudHMgaW4gaXQsIGFuZCB0aG9zZSB3aGljaCBtYWRlIG1vc3QgcmVzcG9uc2UgdG8gdGhlIGV4Y2l0aW5nIGFwcGVhbHMgb2YgdGhlIHBvcHVsYXIgbGVhZGVycywgc2hvdWxkIGJlIHB1cmdlZCBhd2F5LCBsaWtlIHVuaGVhbHRoeSBhbmQgZGlzdHVyYmluZyByZWZ1c2UgZnJvbSB0aGUgYm9keS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBjaXRpemVucywgdGhlcmVmb3JlLCB0aGUgY29uc3VscyBzZWxlY3RlZCBhcyBjb2xvbmlzdHMgYW5kIG9yZGVyZWQgdGhlbSBmb3J0aCB0byBWZWxpdHJhZS4gVGhleSBhbHNvIGVubGlzdGVkIG90aGVycyBpbiBhIGNhbXBhaWduIGFnYWluc3QgdGhlIFZvbHNjaWFucywgY29udHJpdmluZyB0aHVzIHRoYXQgdGhlcmUgc2hvdWxkIGJlIG5vIGxlaXN1cmUgZm9yIGludGVzdGluZSB0dW11bHRzLCBhbmQgYmVsaWV2aW5nIHRoYXQgd2hlbiByaWNoIGFuZCBwb29yIGFsaWtlLCBwbGViZWlhbnMgYXMgd2VsbCBhcyBwYXRyaWNpYW5zLCB3ZXJlIG9uY2UgbW9yZSB1bml0ZWQgaW4gbWlsaXRhcnkgc2VydmljZSBhbmQgaW4gY29tbW9uIHN0cnVnZ2xlcyBmb3IgdGhlIHB1YmxpYyBnb29kLCB0aGV5IHdvdWxkIGJlIG1vcmUgZ2VudGx5IGFuZCBwbGVhc2FudGx5IGRpc3Bvc2VkIHRvd2FyZHMgb25lIGFub3RoZXIuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHBvcHVsYXIgbGVhZGVycywgU2ljaW5pdXMgYW5kIEJydXR1cywgd2l0aCB0aGVpciBmb2xsb3dpbmcsIGF0IG9uY2Ugcm9zZSB1cCBpbiBvcHBvc2l0aW9uLCBjcnlpbmcgb3V0IHRoYXQgdGhlIGNvbnN1bHMgd2VyZSBkaXNndWlzaW5nIGEgbW9zdCBjcnVlbCBkZWVkIHVuZGVyIHRoYXQgbW9zdCBpbm9mZmVuc2l2ZSBuYW1lLCBhIGNvbG9ueSwgYW5kIHdlcmUgcmVhbGx5IHB1c2hpbmcgcG9vciBtZW4gaW50byBhIHBpdCBvZiBkZWF0aCwgYXMgaXQgd2VyZSwgYnkgc2VuZGluZyB0aGVtIGZvcnRoIGludG8gYSBjaXR5IHdoaWNoIHdhcyBmdWxsIG9mIGRlYWRseSBhaXIgYW5kIHVuYnVyaWVkIGNvcnBzZXMsIHRvIGJlIGFzc29jaWF0ZWQgd2l0aCBhIHN0cmFuZ2UgYW5kIGFib21pbmFibGUgZGVpdHk7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVuLCBhcyBpZiBub3Qgc2F0aXNmaWVkIHdpdGggZGVzdHJveWluZyBzb21lIG9mIHRoZWlyIGZlbGxvdy1jaXRpemVucyBieSBmYW1pbmUsIGFuZCBleHBvc2luZyBvdGhlcnMgdG8gcGVzdGlsZW5jZSwgdGhleSBwcm9jZWVkZWQgZnVydGhlciB0byBicmluZyBvbiBhIHdhciBvZiB0aGVpciBvd24gY2hvb3NpbmcsIHRoYXQgbm8gZXZpbCBtaWdodCBzcGFyZSB0aGUgY2l0eSwgd2hpY2ggaGFkIGJ1dCByZWZ1c2VkIHRvIGNvbnRpbnVlIGluIHNlcnZpdHVkZSB0byB0aGUgcmljaC4gV2l0aCB0aGVpciBlYXJzIGZ1bGwgb2Ygc3VjaCBzcGVlY2hlcyBhcyB0aGVzZSwgdGhlIHBlb3BsZSB3b3VsZCBuZWl0aGVyIGFuc3dlciB0aGUgY29uc3VsYXIgc3VtbW9ucyBmb3IgZW5saXN0bWVudCwgbm9yIGxvb2sgd2l0aCBhbnkgZmF2b3VyIG9uIHRoZSBjb2xvbnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMTMiPkRpb255c2l1cyBIYWwuIHZpaS4gMTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2VuYXRlIHdhcyBpbiBwZXJwbGV4aXR5LiBCdXQgTWFyY2l1cywgd2hvIHdhcyBub3cgZnVsbCBvZiBpbXBvcnRhbmNlLCBhbmQgaGFkIGdyb3duIGxvZnR5IGluIHNwaXJpdCwgYW5kIHdhcyBsb29rZWQgdXBvbiB3aXRoIGFkbWlyYXRpb24gYnkgdGhlIG1vc3QgcG93ZXJmdWwgbWVuIG9mIHRoZSBjaXR5LCBvcGVubHkgdG9vayB0aGUgbGVhZCBpbiByZXNpc3RpbmcgdGhlIHBvcHVsYXIgbGVhZGVycy4gVGhlIGNvbG9ueSB3YXMgc2VudCBvdXQsIHRob3NlIHRoYXQgd2VyZSBjaG9zZW4gZm9yIGl0IGJ5IGxvdCBiZWluZyBjb21wZWxsZWQgdG8gZ28gZm9ydGggdW5kZXIgc2V2ZXJlIHBlbmFsdGllczsgYW5kIHdoZW4gdGhlIHBlb3BsZSB1dHRlcmx5IHJlZnVzZWQgbWlsaXRhcnkgc2VydmljZSwgTWFyY2l1cyBoaW1zZWxmIG11c3RlcmVkIGhpcyBjbGllbnRzIGFuZCBhcyBtYW55IG90aGVycyBhcyBoZSBjb3VsZCBwZXJzdWFkZSwgYW5kIG1hZGUgYW4gaW5jdXJzaW9uIGludG8gdGhlIHRlcnJpdG9yeSBvZiBBbnRpdW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGhlIGZvdW5kIG11Y2ggY29ybiwgYW5kIHNlY3VyZWQgbGFyZ2UgYm9vdHkgaW4gY2F0dGxlIGFuZCBjYXB0aXZlcywgbm8gcGFydCBvZiB3aGljaCBkaWQgaGUgdGFrZSBvdXQgZm9yIGhpbXNlbGY7IGJ1dCBicm91Z2h0IGhpcyBmb2xsb3dlcnMgYmFjayB0byBSb21lIGxhZGVuIHdpdGggbGFyZ2Ugc3BvaWxzIG9mIGV2ZXJ5IHNvcnQuIFRoZSByZXN0IG9mIHRoZSBjaXRpemVucyB0aGVyZWZvcmUgcmVwZW50ZWQgdGhlbXNlbHZlcywgZW52aWVkIHRoZWlyIG1vcmUgZm9ydHVuYXRlIGZlbGxvd3MsIGFuZCB3ZXJlIGZpbGxlZCB3aXRoIGhvc3RpbGl0eSB0byBNYXJjaXVzLCBub3QgYmVpbmcgYWJsZSB0byBlbmR1cmUgdGhlIHJlcHV0YXRpb24gYW5kIHBvd2VyIG9mIHRoZSBtYW4sIHdoaWNoIHdhcyBncm93aW5nLCBhcyB0aGV5IHRob3VnaHQsIHRvIGJlIGRldHJpbWVudGFsIHRvIHRoZSBwZW9wbGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMTkiPkRpb255c2l1cyBIYWwuIHZpaS4gMTkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm90IGxvbmcgYWZ0ZXIsIHdoZW4gTWFyY2l1cyBzdG9vZCBmb3IgdGhlIGNvbnN1bHNoaXAsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlcmUgaXMgbm90aGluZyBvZiB0aGlzIGNhbmRpZGFjeSBmb3IgdGhlIGNvbnN1bHNoaXAgaW4gTGl2eSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zNC43IiB2YWxpZD0ieWVzIj5paS4gMzQsIDctMzU8L2JpYmw+KS4gTWFyY2l1cyB1cmdlcyB0aGUgc2VuYXRlIHRvIHRha2UgYWR2YW50YWdlIG9mIHRoZSBmYW1pbmUgYW5kIGV4YWN0IGZyb20gdGhlIHBsZWJlaWFucyBhIHN1cnJlbmRlciBvZiB0aGVpciB0cmlidW5hdGUuIFRoaXMgc28gZXhhc3BlcmF0ZXMgdGhlIHBlb3BsZSB0aGF0IHRoZXkgdHJ5IE1hcmNpdXMgPGVtcGg+aW4gYWJzZW50aWE8L2VtcGg+IGFuZCBiYW5pc2ggaGltLCB3aGVyZXVwb24gaGUgZ29lcyBvdmVyIHRvIHRoZSBWb2xzY2kuIFBsdXRhcmNoJ3Mgc3RvcnkgKHhpdi4teHguKSBhZ3JlZXMgY2xvc2VseSB3aXRoIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMjEiPkRpb255c2l1cyBIYWwuIHZpaS4gMjEtNjQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoZSBtdWx0aXR1ZGUgcmVsZW50ZWQsIGFuZCB0aGUgcGVvcGxlIGZlbHQgc29tZXdoYXQgYXNoYW1lZCB0byBzbGlnaHQgYW5kIGh1bWJsZSBhIG1hbiB3aG8gd2FzIGZvcmVtb3N0IGluIGJpcnRoIGFuZCB2YWxvdXIgYW5kIGhhZCBwZXJmb3JtZWQgc28gbWFueSBhbmQgc3VjaCBncmVhdCBzZXJ2aWNlcy4gTm93IGl0IHdhcyB0aGUgY3VzdG9tIHdpdGggdGhvc2Ugd2hvIHN0b29kIGZvciB0aGUgb2ZmaWNlIHRvIGdyZWV0IHRoZWlyIGZlbGxvdy1jaXRpemVucyBhbmQgc29saWNpdCB0aGVpciB2b3RlcywgZGVzY2VuZGluZyBpbnRvIHRoZSBmb3J1bSBpbiB0aGVpciB0b2dhLCB3aXRob3V0IGEgdHVuaWMgdW5kZXIgaXQuIFRoaXMgd2FzIGVpdGhlciBiZWNhdXNlIHRoZXkgd2lzaGVkIHRoZSBncmVhdGVyIGh1bWlsaXR5IG9mIHRoZWlyIGdhcmIgdG8gZmF2b3VyIHRoZWlyIHNvbGljaXRhdGlvbnMsIG9yIGJlY2F1c2UgdGhleSB3aXNoZWQgdG8gZGlzcGxheSB0aGUgdG9rZW5zIG9mIHRoZWlyIGJyYXZlcnksIGluIGNhc2UgdGhleSBib3JlIHdvdW5kcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGNlcnRhaW5seSBub3Qgb3dpbmcgdG8gYSBzdXNwaWNpb24gb2YgdGhlIGRpc3BlbnNpbmcgb2YgbW9uZXkgaW4gYnJpYmVyeSB0aGF0IHRoZSBjYW5kaWRhdGUgZm9yIHRoZSB2b3RlcyBvZiB0aGUgY2l0aXplbnMgd2FzIHJlcXVpcmVkIHRvIHByZXNlbnQgaGltc2VsZiBiZWZvcmUgdGhlbSB3aXRob3V0IGEgdHVuaWMgYW5kIHVuZ2lydC4gRm9yIGl0IHdhcyBsb25nIGFmdGVyIHRoaXMgdGltZSB0aGF0IHRoZSBidXlpbmcgYW5kIHNlbGxpbmcgb2Ygdm90ZXMgY3JlcHQgaW4gYW5kIG1vbmV5IGJlY2FtZSBhIGZlYXR1cmUgb2YgdGhlIGVsZWN0aW9ucy4KCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUJ1dCBhZnRlcndhcmRzLCBicmliZXJ5IGFmZmVjdGVkIGV2ZW4gY291cnRzIGFuZCBjYW1wcywgYW5kIGNvbnZlcnRlZCB0aGUgY2l0eSBpbnRvIGEgbW9uYXJjaHksIGJ5IG1ha2luZyBhcm1pZXMgdGhlIHV0dGVyIHNsYXZlcyBvZiBtb25leS4gRm9yIGl0IGhhcyBiZWVuIHdlbGwgc2FpZCB0aGF0IGhlIGZpcnN0IGJyZWFrcyBkb3duIHRoZSBwb3dlciBvZiB0aGUgcGVvcGxlIHdobyBmaXJzdCBmZWFzdHMgYW5kIGJyaWJlcyB0aGVtLiBCdXQgYXQgUm9tZSB0aGUgbWlzY2hpZWYgc2VlbXMgdG8gaGF2ZSBjcmVwdCBpbiBzdGVhbHRoaWx5IGFuZCBncmFkdWFsbHksIGFuZCBub3QgdG8gaGF2ZSBiZWVuIG5vdGljZWQgYXQgb25jZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdlIGRvIG5vdCBrbm93IHdobyB3YXMgdGhlIGZpcnN0IG1hbiB0byBicmliZSBoZXIgcGVvcGxlIG9yIGhlciBjb3VydHMgb2YgbGF3OyB3aGVyZWFzIGF0IEF0aGVucywgQW55dHVzLCB0aGUgc29uIG9mIEFudGhlbWlvbiwgaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGZpcnN0IG1hbiB0byBnaXZlIG1vbmV5IHRvIGp1cm9ycywgd2hlbiBoZSB3YXMgb24gdHJpYWwgZm9yIHRoZSB0cmVhY2hlcm91cyBmYWlsdXJlIHRvIHJlbGlldmUgUHlsb3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBzdHJvbmdob2xkIG9uIHRoZSB3ZXN0ZXJuIGNvYXN0IG9mIE1lc3NlbmlhLCBpbiBQZWxvcG9ubmVzdXMuIEl0IHdhcyBvY2N1cGllZCBhbmQgc3VjY2Vzc2Z1bGx5IGRlZmVuZGVkIGJ5IHRoZSBBdGhlbmlhbnMgaW4gNDI1IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiA0LjIiIHZhbGlkPSJ5ZXMiPlRodWMuIGl2LiAyLTQxPC9iaWJsPikuIEluIDQxMCwgdGhlIExhY2VkYWVtb25pYW5zIGxhaWQgc2llZ2UgdG8gaXRzIE1lc3NlbmlhbiBnYXJyaXNvbiwgd2hpY2ggc3VycmVuZGVyZWQgYWZ0ZXIgYW4gQXRoZW5pYW4gZmxlZXQgaGFkIGZhaWxlZCB0byByZWxpZXZlIGl0ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTMuNjQuNSIgdmFsaWQ9InllcyI+RGlvZG9ydXMsIHhpaWkuIDY0LCA1Zi48L2JpYmw+KS48L25vdGU+IHRvd2FyZCB0aGUgY2xvc2Ugb2YgdGhlIFBlbG9wb25uZXNpYW4gd2FyOyBhIHRpbWUgd2hlbiB0aGUgcHVyZSByYWNlIG9mIHRoZSBnb2xkZW4gYWdlIHN0aWxsIHBvc3Nlc3NlZCB0aGUgUm9tYW4gZm9ydW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyB3aGVuIE1hcmNpdXMgZGlzY2xvc2VkIGhpcyBtYW55IHNjYXJzIGZyb20gbWFueSBjb250ZXN0cywgd2hlcmVpbiBoZSBoYWQgYmVlbiBhIGZvcmVtb3N0IHNvbGRpZXIgZm9yIHNldmVudGVlbiB5ZWFycyB0b2dldGhlciwgdGhlIHBlb3BsZSB3ZXJlIHB1dCBvdXQgb2YgY291bnRlbmFuY2UgYnkgaGlzIHZhbG91ciwgYW5kIGFncmVlZCB3aXRoIG9uZSBhbm90aGVyIHRvIGVsZWN0IGhpbS4gQnV0IHdoZW4gdGhlIGRheSBmb3IgY2FzdGluZyB0aGVpciB2b3RlcyBjYW1lLCBhbmQgTWFyY2l1cyBtYWRlIGEgcG9tcG91cyBlbnRyeSBpbnRvIHRoZSBmb3J1bSBlc2NvcnRlZCBieSB0aGUgc2VuYXRlLCBhbmQgYWxsIHRoZSBwYXRyaWNpYW5zIGFib3V0IGhpbSB3ZXJlIGNsZWFybHkgbW9yZSBiZW50IG9uIHN1Y2Nlc3MgdGhhbiBldmVyIGJlZm9yZSwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+dGhlIG11bHRpdHVkZSBmZWxsIGF3YXkgYWdhaW4gZnJvbSB0aGVpciBnb29kIHdpbGwgdG93YXJkcyBoaW0sIGFuZCBkcmlmdGVkIGludG8gZmVlbGluZ3Mgb2YgcmVzZW50bWVudCBhbmQgZW52eS4gVGhlc2UgZmVlbGluZ3Mgd2VyZSByZWluZm9yY2VkIGJ5IHRoZWlyIGZlYXIgdGhhdCBpZiBhbiBhcmlzdG9jcmF0LCB3aG8gaGFkIHN1Y2ggd2VpZ2h0IHdpdGggdGhlIHBhdHJpY2lhbnMsIHNob3VsZCBiZWNvbWUgc3VwcmVtZSBpbiB0aGUgZ292ZXJubWVudCwgaGUgbWlnaHQgYWx0b2dldGhlciBkZXByaXZlIHRoZSBwZW9wbGUgb2YgdGhlaXIgbGliZXJ0aWVzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28sIGJlaW5nIGluIHN1Y2ggYSBzdGF0ZSBvZiBtaW5kLCB0aGV5IHJlamVjdGVkIE1hcmNpdXMgYW5kIG90aGVycyB3ZXJlIHByb2NsYWltZWQgZWxlY3RlZC4gVGhlIHNlbmF0b3JzIHdlcmUgaW5kaWduYW50LCB0aGlua2luZyB0aGUgaW5zdWx0IGRpcmVjdGVkIHJhdGhlciBhdCB0aGVtIHRoYW4gYXQgTWFyY2l1cywgYW5kIGhlIGhpbXNlbGYgY291bGQgbm90IHRyZWF0IHRoZSBvY2N1cnJlbmNlIHdpdGggcmVzdHJhaW50IG9yIGZvcmJlYXJhbmNlLiBIZSBoYWQgaW5kdWxnZWQgdGhlIHBhc3Npb25hdGUgYW5kIGNvbnRlbnRpb3VzIHNpZGUgb2YgaGlzIG5hdHVyZSwgd2l0aCB0aGUgaWRlYSB0aGF0IHRoZXJlIHdhcyBzb21ldGhpbmcgZ3JlYXQgYW5kIGV4YWx0ZWQgaW4gdGhpcywgYW5kIGhhZCBub3QgYmVlbiBpbWJ1ZWQsIHVuZGVyIHRoZSBpbmZsdWVuY2Ugb2YgcmVhc29uIGFuZCBkaXNjaXBsaW5lLCB3aXRoIHRoYXQgZ3Jhdml0eSBhbmQgbWlsZG5lc3Mgd2hpY2ggYXJlIHRoZSBjaGllZiB2aXJ0dWVzIG9mIGEgc3RhdGVzbWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IgZGlkIGhlIGtub3cgdGhhdCBvbmUgd2hvIHVuZGVydGFrZXMgcHVibGljIGJ1c2luZXNzIG11c3QgYXZvaWQgYWJvdmUgYWxsIHRoaW5ncyB0aGF0IHNlbGYtd2lsbCB3aGljaCwgYXMgUGxhdG8gc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBhIGxldHRlciB0byBEaW8gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMLiA0IiB2YWxpZD0ieWVzIj5FcGlzdC4gaXYuIGFkIGZpbjwvYmlibD4pLjwvbm90ZT4gaXMgdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y29tcGFuaW9uIG9mIHNvbGl0dWRlPC9xPjsgbXVzdCBtaW5nbGUgd2l0aCBtZW4sIGFuZCBiZSBhIGxvdmVyIG9mIHRoYXQgc3VibWlzc2l2ZW5lc3MgdG8gaW5qdXJ5IHdoaWNoIHNvbWUgcGVvcGxlIHJpZGljdWxlIHNvIG11Y2guIEJ1dCBzaW5jZSBoZSB3YXMgZXZlciBhIHN0cmFpZ2h0Zm9yd2FyZCBtYW4gYW5kIG9ic3RpbmF0ZSwgYW5kIHNpbmNlIGhlIHRob3VnaHQgdGhhdCBjb25xdWVzdCBhbmQgbWFzdGVyeSBpbiBhbGwgdGhpbmdzIGFuZCBhdCBhbGwgdGltZXMgd2FzIHRoZSBwcmVyb2dhdGl2ZSBvZiBicmF2ZXJ5LCByYXRoZXIgdGhhbiBvZiBlZmZlbWluYXRlIHdlYWtuZXNzICh3aGljaCBicmVha3Mgb3V0IGluIGFuZ2VyLCBsaWtlIGEgc3dlbGxpbmcgc29yZSwgZnJvbSB0aGUgdHJvdWJsZWQgYW5kIHdvdW5kZWQgc3Bpcml0KSwgaGUgZXZlbnQgYXdheSBmdWxsIG9mIGluZGlnbmF0aW9uIGFuZCBiaXR0ZXJuZXNzIHRvd2FyZHMgdGhlIHBlb3BsZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHlvdW5nZXIgcGF0cmljaWFucywgdG9vLCB0aGF0IGVsZW1lbnQgaW4gdGhlIGNpdHkgd2hpY2ggbWFkZSBtb3N0IHZhdW50IG9mIG5vYmxlIGJpcnRoIGFuZCB3YXMgbW9zdCBzaG93eSwgaGFkIGFsd2F5cyBiZWVuIGFtYXppbmdseSBkZXZvdGVkIHRvIHRoZSBtYW4sIGFuZCwgYWRoZXJpbmcgdG8gaGltIG5vdywgd2hlbiB0aGVpciBwcmVzZW5jZSBkaWQgaGltIG5vIGdvb2QsIGZhbm5lZCBoaXMgYW5nZXIgYnkgdGhlaXIgc3ltcGF0aGV0aWMgdmV4YXRpb24gYW5kIHNvcnJvdy4gRm9yIGhlIHdhcyB0aGVpciBsZWFkZXIgYW5kIHdpbGxpbmcgdGVhY2hlciBvZiB0aGUgYXJ0IG9mIHdhciBpbiB0aGVpciBjYW1wYWlnbnMsIGFuZCBpbnNwaXJlZCB0aGVtIGluIHRoZWlyIHZpY3RvcmllcyB3aXRoIGEgemVhbCBmb3IgdmFsb3VyLCB3aGljaCBoYWQgbm8gdGluZ2Ugb2YgbXV0dWFsIGplYWxvdXN5LgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG1lYW50aW1lIGdyYWluIGNhbWUgdG8gUm9tZSwgYSBncmVhdCBwYXJ0IG9mIGl0IGJvdWdodCBpbiBJdGFseSwgYnV0IGFuIGVxdWFsIGFtb3VudCBzZW50IGFzIGEgcHJlc2VudCBmcm9tIFN5cmFjdXNlLCB3aGVyZSBHZWxvIHdhcyB0eXJhbnQuIE1vc3Qgb2YgdGhlIHBlb3BsZSB3ZXJlIGNvbnNlcXVlbnRseSBpbiBncmVhdCBob3BlLCBleHBlY3RpbmcgdGhhdCB0aGUgY2l0eSB3b3VsZCBiZSBkZWxpdmVyZWQgYm90aCBmcm9tIGl0cyBzY2FyY2l0eSBhbmQgaXRzIGRpc2NvcmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUsIGFjY29yZGluZ2x5LCB3YXMgY29udmVuZWQgYXQgb25jZSwgYW5kIHRoZSBwZW9wbGUsIGZsb2NraW5nIGFib3V0IHRoZSBzZW5hdGUtaG91c2UsIGF3YWl0ZWQgdGhlIHJlc3VsdCBvZiBpdHMgZGVsaWJlcmF0aW9ucy4gVGhleSBleHBlY3RlZCB0aGF0IHRoZSBtYXJrZXQtcHJpY2UgZm9yIGdyYWluIHdvdWxkIG5vdyBiZSBtb2RlcmF0ZSwgYW5kIHRoYXQgd2hhdCBoYWQgYmVlbiBzZW50IGFzIGEgcHJlc2VudCB3b3VsZCBiZSBkaXN0cmlidXRlZCBncmF0aXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3ZXJlIHNvbWUgaW4gdGhlIHNlbmF0ZSB3aG8gc28gYWR2aXNlZCB0aGF0IGJvZHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNYXJjaXVzIHJvc2UgaW4gaGlzIHBsYWNlIGFuZCB2ZWhlbWVudGx5IGF0dGFja2VkIHRob3NlIHdobyBmYXZvdXJlZCB0aGUgbXVsdGl0dWRlLCBjYWxsaW5nIHRoZW0gZGVtYWdvZ3VlcyBhbmQgYmV0cmF5ZXJzIG9mIHRoZSBhcmlzdG9jcmFjeSwgYW5kIGRlY2xhcmluZyB0aGF0IHRoZXkgd2VyZSBub3VyaXNoaW5nLCB0byB0aGVpciBvd24gaGFybSwgdGhlIGV2aWwgc2VlZHMgb2YgYm9sZG5lc3MgYW5kIGluc29sZW5jZSB3aGljaCBoYWQgYmVlbiBzb3duIGFtb25nIHRoZSByYWJibGU7IHRoZXNlIHRoZXkgc2hvdWxkIGhhdmUgY2hva2VkIHdoZW4gdGhleSBmaXJzdCBzcHJhbmcgdXAsIGFuZCBub3QgaGF2ZSBzdHJlbmd0aGVuZWQgdGhlIHBlb3BsZSBieSBzdWNoIGEgcG93ZXJmdWwgbWFnaXN0cmFjeSBhcyB0aGUgdHJpYnVuYXRlLiBCdXQgbm93IHRoZWlyIGJvZHkgd2FzIGZvcm1pZGFibGUsIGJlY2F1c2UgaXQgZ290IGV2ZXJ5dGhpbmcgdGhhdCBpdCBkZXNpcmVkLCBhbGxvd2VkIG5vIGNvbnN0cmFpbnQgdXBvbiBpdHMgd2lsbCwgYW5kIHJlZnVzZWQgdG8gb2JleSB0aGUgY29uc3VscywgYnV0IGhhZCB0aGVpciBvd24gbGVhZGVycyBpbiBhbmFyY2h5LCB3aG9tIHRoZXkgc3R5bGVkIHRoZWlyIHJ1bGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VG8gc2l0IHRoZXJlLCBtb3Jlb3Zlciwgdm90aW5nIHN1Y2ggYSBwZW9wbGUgbGFyZ2Vzc2VzIGFuZCBzdXBwbGllcywgbGlrZSB0aG9zZSBHcmVla3Mgd2hlcmUgZGVtb2NyYWN5IGlzIG1vc3QgZXh0cmVtZSwgaGUgc2FpZCB3YXMgbm90aGluZyBtb3JlIG5vciBsZXNzIHRoYW4gbWFpbnRhaW5pbmcgdGhlbSBpbiB0aGVpciBkaXNvYmVkaWVuY2UsIHRvIHRoZSBjb21tb24gZGVzdHJ1Y3Rpb24gb2YgYWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIHRoZXkgc3VyZWx5IHdpbGwgbm90IHNheSB0aGF0IHRoZXkgYXJlIGdldHRpbmcgdGhlc2UgYXMgYSBncmF0ZWZ1bCByZXR1cm4gZm9yIHRoZSBtaWxpdGFyeSBzZXJ2aWNlcyB3aGljaCB0aGV5IG9taXR0ZWQsIGFuZCB0aGUgc2VjZXNzaW9ucyBieSB3aGljaCB0aGV5IHJlbm91bmNlZCB0aGVpciBjb3VudHJ5LCBhbmQgdGhlIGNhbHVtbmllcyBhZ2FpbnN0IHRoZSBzZW5hdGUgd2hpY2ggdGhleSBoYXZlIGNvdW50ZW5hbmNlZC4gVGhleSB3aWxsIHJhdGhlciBiZSBjb25maWRlbnQgdGhhdCB5b3VyIGZlYXJzIGRyaXZlIHlvdSB0byBzdWJzZXJ2aWVuY3kgYW5kIGZsYXR0ZXJ5IHdoZW4geW91IG1ha2UgdGhlbSB0aGVzZSBnaWZ0cyBhbmQgY29uY2Vzc2lvbnMsIGFuZCB3aWxsIHNldCBubyBsaW1pdCB0byB0aGVpciBkaXNvYmVkaWVuY2UsIG5vciBjZWFzZSBmcm9tIHRoZWlyIHF1YXJyZWxzIGFuZCBzZWRpdGlvbnMuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGFjdGlvbiBvbiBvdXIgcGFydCB3b3VsZCB0aGVyZWZvcmUgYmUgc2hlZXIgbWFkbmVzczsgYnV0IGlmIHdlIGFyZSB3aXNlLCB3ZSBzaGFsbCB0YWtlIHRoZWlyIHRyaWJ1bmF0ZSBhd2F5IGZyb20gdGhlbSwgZm9yIGl0IG1ha2VzIHRoZSBjb25zdWxzaGlwIG51bGwgYW5kIHZvaWQsIGFuZCBkaXZpZGVzIHRoZSBjaXR5LiBUaGlzIGlzIG5vIGxvbmdlciBvbmUsIGFzIGJlZm9yZSwgYnV0IGhhcyBiZWVuIGN1dCBpbiB0d28sIHNvIHRoYXQgd2UgY2FuIG5ldmVyIGdyb3cgdG9nZXRoZXIgYWdhaW4sIG9yIGJlIG9mIG9uZSBtaW5kLCBvciBjZWFzZSBhZmZsaWN0aW5nIGFuZCBjb25mb3VuZGluZyBvbmUgYW5vdGhlci48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlXaXRoIG1hbnkgc3VjaCB3b3JkcyBhcyB0aGVzZSBNYXJjaXVzIHdhcyBiZXlvbmQgbWVhc3VyZSBzdWNjZXNzZnVsIGluIGZpbGxpbmcgdGhlIHlvdW5nZXIgc2VuYXRvcnMsIGFuZCBhbG1vc3QgYWxsIHRoZSB3ZWFsdGh5IG9uZXMsIHdpdGggaGlzIG93biBmaWVyY2UgZW50aHVzaWFzbSwgYW5kIHRoZXkgY3JpZWQgb3V0IHRoYXQgaGUgd2FzIHRoZSBvbmx5IG1hbiBpbiB0aGUgY2l0eSB3aG8gZGlzZGFpbmVkIHN1Ym1pc3Npb24gYW5kIGZsYXR0ZXJ5LiBCdXQgc29tZSBvZiB0aGUgb2xkZXIgc2VuYXRvcnMgb3Bwb3NlZCBoaW0sIHN1c3BlY3RpbmcgdGhlIG91dGNvbWUuIEFuZCB0aGUgb3V0Y29tZSB3YXMgd2hvbGx5IGJhZC4gRm9yIHRoZSB0cmlidW5lcyB3ZXJlIHByZXNlbnQsIGFuZCB3aGVuIHRoZXkgc2F3IHRoYXQgdGhlIHByb3Bvc2FsIG9mIE1hcmNpdXMgd2FzIGxpa2VseSB0byBwcmV2YWlsLCB0aGV5IHJhbiBvdXQgYW1vbmcgdGhlIGNyb3dkIHdpdGggbG91ZCBjcmllcywgY2FsbGluZyB1cG9uIHRoZSBwbGViZWlhbnMgdG8gcmFsbHkgdG8gdGhlaXIgaGVscC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGVyZSB3YXMgYSBzdG9ybXkgc2Vzc2lvbiBvZiB0aGUgYXNzZW1ibHksIGFuZCB3aGVuIHRoZSBzcGVlY2ggb2YgTWFyY2l1cyB3YXMgcmVwb3J0ZWQgdG8gaXQsIHRoZSBwZW9wbGUgd2VyZSBjYXJyaWVkIGF3YXkgd2l0aCBmdXJ5IGFuZCBhbG1vc3QgYnVyc3QgaW4gdXBvbiB0aGUgc2VuYXRlLiBCdXQgdGhlIHRyaWJ1bmVzIG1hZGUgdGhlaXIgZm9ybWFsIGRlbnVuY2lhdGlvbiBvZiBNYXJjaXVzLCBhbmQgc3VtbW9uZWQgaGltIGJ5IG1lc3NlbmdlciB0byBjb21lIGJlZm9yZSB0aGVtIGFuZCBtYWtlIGhpcyBkZWZlbmNlLiBBbmQgd2hlbiBoZSBpbnNvbGVudGx5IGRyb3ZlIGF3YXkgdGhlIG9mZmljZXJzIHdobyBicm91Z2h0IHRoZWlyIG1lc3NhZ2UsIHRoZXkgd2VudCB0aGVtc2VsdmVzLCBhdHRlbmRlZCBieSB0aGUgYWVkaWxlcywgdG8gYnJpbmcgaGltIGJ5IGZvcmNlLCBhbmQgdHJpZWQgdG8gbGF5IGhhbmRzIHVwb24gaGlzIHBlcnNvbi4gQnV0IHRoZSBwYXRyaWNpYW5zLCBiYW5kaW5nIHRvZ2V0aGVyLCBkcm92ZSB0aGUgdHJpYnVuZXMgYXdheSwgYW5kIGFjdHVhbGx5IGJlYXQgdGhlIGFlZGlsZXMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CeSB0aGlzIHRpbWUsIHRoZW4sIGV2ZW5pbmcgaGFkIGZhbGxlbiwgd2hpY2ggcHV0IGFuIGVuZCB0byB0aGUgdHVtdWx0OyBidXQgYXMgc29vbiBhcyBpdCB3YXMgZGF5LCB0aGUgZXhhc3BlcmF0ZWQgcGVvcGxlIGNhbWUgcnVubmluZyB0b2dldGhlciBmcm9tIGFsbCBxdWFydGVycyBpbnRvIHRoZSBmb3J1bS4gV2hlbiB0aGUgY29uc3VscyBzYXcgdGhpcywgdGhleSB3ZXJlIGFsYXJtZWQgZm9yIHRoZSBjaXR5LCBhbmQgY29udmVuaW5nIHRoZSBzZW5hdGUsIHVyZ2VkIHRoZW0gdG8gY29uc2lkZXIgaG93LCBieSByZWFzb25hYmxlIHByb3Bvc2FscyBhbmQgc3VpdGFibGUgcmVzb2x1dGlvbnMsIHRoZXkgbWlnaHQgc29vdGhlIGFuZCBwYWNpZnkgdGhlIG11bHRpdHVkZSwgc2luY2UgaXQgd2FzIG5vdCBhIHRpbWUgZm9yIGFtYml0aW91cyByaXZhbHJ5LCBub3Igd291bGQgdGhleSBiZSB3aXNlIGluIGNvbnRlbmRpbmcgZm9yIHRoZWlyIGRpZ25pdHksIGJ1dCB0aGUgY3Jpc2lzIHdhcyBzZXZlcmUgYW5kIGNyaXRpY2FsLCBhbmQgZGVtYW5kZWQgbWVhc3VyZXMgdGhhdCB3ZXJlIGNvbnNpZGVyYXRlIGFuZCBodW1hbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYWpvcml0eSBvZiB0aGUgc2VuYXRlIGFjY2VkaW5nIHRvIHRoZXNlIHZpZXdzLCB0aGUgY29uc3VscyB3ZW50IG91dCBhbmQgcmVhc29uZWQgd2l0aCB0aGUgcGVvcGxlIGFzIHdlbGwgYXMgdGhleSBjb3VsZCwgYW5kIHRyaWVkIHRvIG1vbGxpZnkgdGhlbSwgYW5zd2VyaW5nIHRoZWlyIGFjY3VzYXRpb25zIGluIGEgcmVhc29uYWJsZSBtYW5uZXIsIGFuZCBtYWtpbmcgb25seSBhIG1vZGVyYXRlIHVzZSBvZiBhZG1vbml0aW9uIGFuZCByZWJ1a2U7IGFzIHJlZ2FyZGVkIHRoZSBwcmljZSBvZiBwcm92aXNpb25zIGFuZCBtYXJrZXQgc3VwcGxpZXMsIHRoZXkgZGVjbGFyZWQgdGhlcmUgc2hvdWxkIGJlIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIHBlb3BsZSBzaG93ZWQgc2lnbnMgb2YgcmVsZW50aW5nLCBhbmQgaXQgd2FzIGV2aWRlbnQsIGZyb20gdGhlaXIgZGVjb3JvdXMgYW5kIHNvYmVyIGF0dGVudGlvbiwgdGhhdCB0aGV5IHdlcmUgb24gdGhlIHdheSB0byBiZSBjb250cm9sbGVkIGFuZCB3b24gb3Zlci4gVGhlbiB0aGUgdHJpYnVuZXMgcm9zZSBhbmQgZGVjbGFyZWQgdGhhdCBzaW5jZSB0aGUgc2VuYXRlIHdhcyBub3cgYWN0aW5nIHNvYmVybHksIHRoZSBwZW9wbGUgaW4gdGhlaXIgdHVybiB3b3VsZCBtYWtlIHN1Y2ggY29uY2Vzc2lvbnMgYXMgd2VyZSBmYWlyIGFuZCBob25vdXJhYmxlLiBUaGV5IGluc2lzdGVkLCBob3dldmVyLCB0aGF0IE1hcmNpdXMgc2hvdWxkIG1ha2UgYW5zd2VyIHRvIHRoZSBmb2xsb3dpbmcgY2hhcmdlczogQ291bGQgaGUgZGVueSB0aGF0IGhlIGhhZCBpbnN0aWdhdGVkIHRoZSBzZW5hdGUgdG8gdmlvbGF0ZSB0aGUgY29uc3RpdHV0aW9uIGFuZCBhYnJvZ2F0ZSB0aGUgcG93ZXJzIG9mIHRoZSBwZW9wbGU/IFdoZW4gc3VtbW9uZWQgdG8gYXBwZWFyIGJlZm9yZSB0aGVtLCBoYWQgaGUgbm90IHJlZnVzZWQ/IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCBieSBpbnN1bHRpbmcgYW5kIGJlYXRpbmcgdGhlIGFlZGlsZXMgaW4gdGhlIGZvcnVtLCBoYWQgaGUgbm90IGRvbmUgYWxsIGluIGhpcyBwb3dlciB0byBpbmNpdGUgdGhlIGNpdGl6ZW5zIHRvIGFybXMgYW5kIGJyaW5nIGFib3V0IGEgY2l2aWwgd2FyPyBUaGV5IG1hZGUgdGhpcyBkZW1hbmQgd2l0aCBhIGRlc2lyZSBlaXRoZXIgdGhhdCBNYXJjaXVzIHNob3VsZCBiZSBwdWJsaWNseSBodW1pbGlhdGVkLCBpZjsgY29udHJhcnkgdG8gaGlzIG5hdHVyZSwgaGUgY3VyYmVkIGhpcyBoYXVnaHR5IHNwaXJpdCBhbmQgc3VlZCBmb3IgdGhlIGZhdm91ciBvZiB0aGUgcGVvcGxlOyBvciwgaWYgaGUgeWllbGRlZCB0byBoaXMgbmF0dXJhbCBwcm9tcHRpbmdzLCB0aGF0IGhlIHNob3VsZCBkbyBzb21ldGhpbmcgd2hpY2ggd291bGQganVzdGlmeSB0aGVpciB3cmF0aCBhZ2FpbnN0IGhpbSBhbmQgbWFrZSBpdCBpbXBsYWNhYmxlLiBUaGUgbGF0dGVyIHdhcyB3aGF0IHRoZXkgdGhlIHJhdGhlciBleHBlY3RlZCwgYW5kIHRoZXkgcmlnaHRseSBlc3RpbWF0ZWQgdGhlIG1hbidzIGNoYXJhY3Rlci4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBjYW1lIGFuZCBzdG9vZCBiZWZvcmUgdGhlbSBhcyBvbmUgd2hvIHdvdWxkIGRlZmVuZCBoaW1zZWxmOyBhbmQgdGhlIHBlb3BsZSB3ZXJlIHF1aWV0IGFuZCBzaWxlbnQgaW4gaGlzIHByZXNlbmNlLiBCdXQgd2hlbiwgaW5zdGVhZCBvZiB0aGUgbW9yZSBvciBsZXNzIGRlcHJlY2F0b3J5IGxhbmd1YWdlIGV4cGVjdGVkIGJ5IGhpcyBhdWRpZW5jZSwgaGUgYmVnYW4gbm90IG9ubHkgdG8gZW1wbG95IGFuIG9mZmVuc2l2ZSBib2xkbmVzcyBvZiBzcGVlY2gsIHdoaWNoIGF0IGxhc3QgYmVjYW1lIGFjdHVhbCBkZW51bmNpYXRpb24sIGJ1dCBhbHNvIHRvIHNob3csIGJ5IHRoZSB0b25lIG9mIGhpcyB2b2ljZSBhbmQgdGhlIGNhc3Qgb2YgaGlzIGNvdW50ZW5hbmNlLCB0aGF0IGhpcyBmZWFybGVzc25lc3Mgd2FzIG5vdCBmYXIgcmVtb3ZlZCBmcm9tIGRpc2RhaW4gYW5kIGNvbnRlbXB0LCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz50aGVuIHRoZSBwZW9wbGUgd2FzIGV4YXNwZXJhdGVkLCBhbmQgZ2F2ZSBldmlkZW50IHNpZ25zIHRoYXQgaGlzIHdvcmRzIHJvdXNlZCB0aGVpciBpbXBhdGllbmNlIGFuZCBpbmRpZ25hdGlvbi4gVXBvbiB0aGlzLCBTaWNpbml1cywgdGhlIGJvbGRlc3Qgb2YgdGhlIHRyaWJ1bmVzLCBhZnRlciBhIGJyaWVmIGNvbmZlcmVuY2Ugd2l0aCBoaXMgY29sbGVhZ3VlcywgbWFkZSBmb3JtYWwgcHJvY2xhbWF0aW9uIHRoYXQgTWFyY2l1cyB3YXMgY29uZGVtbmVkIHRvIGRlYXRoIGJ5IHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCBhbmQgb3JkZXJlZCB0aGUgYWVkaWxlcyB0byB0YWtlIGhpbSB1cCB0byB0aGUgVGFycGVpYW4gcm9jayBhdCBvbmNlLCBhbmQgY2FzdCBoaW0gZG93biB0aGUgY2xpZmYgYmVsb3cuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBhZWRpbGVzIGxhaWQgaG9sZCBvZiBoaXMgcGVyc29uLCBpdCBzZWVtZWQsIGV2ZW4gdG8gbWFueSBvZiB0aGUgcGxlYmVpYW5zLCBhIGhvcnJpYmxlIGFuZCBtb25zdHJvdXMgYWN0OyB0aGUgcGF0cmljaWFucywgbW9yZW92ZXIsIHV0dGVybHkgYmVzaWRlIHRoZW1zZWx2ZXMsIGRpc3RyZXNzZWQgYW5kIGhvcnJvciBzdHJpY2tlbiwgcnVzaGVkIHdpdGggbG91ZCBjcmllcyB0byBoaXMgYWlkLiBTb21lIG9mIHRoZW0gYWN0dWFsbHkgcHVzaGVkIGF3YXkgdGhlIG9mZmljZXJzIG1ha2luZyB0aGUgYXJyZXN0LCBhbmQgZ290IE1hcmNpdXMgYW1vbmcgdGhlbXNlbHZlczsgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+c29tZSBzdHJldGNoZWQgb3V0IHRoZWlyIGhhbmRzIGluIHN1cHBsaWNhdGlvbiBvZiB0aGUgbXVsdGl0dWRlLCBzaW5jZSB3b3JkcyBhbmQgY3JpZXMgd2VyZSBvZiBubyBhdmFpbCBhbWlkIHN1Y2ggZGlzb3JkZXIgYW5kIGNvbmZ1c2lvbi4gQXQgbGFzdCB0aGUgZnJpZW5kcyBhbmQga2luZHJlZCBvZiB0aGUgdHJpYnVuZXMsIHBlcmNlaXZpbmcgdGhhdCBpdCB3YXMgaW1wb3NzaWJsZSwgd2l0aG91dCBzbGF5aW5nIG1hbnkgcGF0cmljaWFucywgdG8gbGVhZCBNYXJjaXVzIGF3YXkgYW5kIHB1bmlzaCBoaW0sIHBlcnN1YWRlZCB0aGVtIHRvIHJlbWl0IHdoYXQgd2FzIHVudXN1YWwgYW5kIG9wcHJlc3NpdmUgaW4gaGlzIHNlbnRlbmNlLCBub3QgdG8gdXNlIHZpb2xlbmNlIGFuZCBwdXQgaGltIHRvIGRlYXRoIHdpdGhvdXQgYSB0cmlhbCwgYnV0IHRvIHN1cnJlbmRlciBoaW0gYW5kIHJlZmVyIGhpcyBjYXNlIHRvIHRoZSBwZW9wbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gU2ljaW5pdXMsIGJlY29taW5nIGNhbG0sIGFza2VkIHRoZSBwYXRyaWNpYW5zIHdoYXQgdGhleSBtZWFudCBieSB0YWtpbmcgTWFyY2l1cyBhd2F5IGZyb20gdGhlIHBlb3BsZSB3aGVuIGl0IHdpc2hlZCB0byBwdW5pc2ggaGltLiBCdXQgdGhlIHBhdHJpY2lhbnMgYXNrZWQgaW4gdGhlaXIgdHVybjogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IHRoZW4gaXMgeW91ciBwdXJwb3NlLCBhbmQgd2hhdCBkbyB5ZSBtZWFuLCBieSB0aHVzIGRyYWdnaW5nIG9uZSBvZiB0aGUgZm9yZW1vc3QgbWVuIG9mIFJvbWUsIHdpdGhvdXQgYSB0cmlhbCwgdG8gYSBzYXZhZ2UgYW5kIGlsbGVnYWwgcHVuaXNobWVudD88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwgdGhlbiw8L3E+IHNhaWQgU2ljaW5pdXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+eWUgc2hhbGwgbm90IGhhdmUgYW55IHN1Y2ggZXhjdXNlIGZvciBmYWN0aW91cyBxdWFycmVsIHdpdGggdGhlIHBlb3BsZTsgZm9yIHRoZXkgZ3JhbnQgeW91ciBkZW1hbmQgdGhhdCB0aGUgbWFuIGhhdmUgYSB0cmlhbC4gQW5kIHdlIGNpdGUgdGhlZSwgTWFyY2l1cywgdG8gYXBwZWFyIGJlZm9yZSB0aGUgY2l0aXplbnMgb24gdGhlIHRoaXJkIG1hcmtldC1kYXkgZW5zdWluZywgYW5kIGNvbnZpbmNlIHRoZW0sIGlmIHlvdSBjYW4sIG9mIHlvdXIgaW5ub2NlbmNlLCBhc3N1cmVkIHRoYXQgdGhleSB3aWxsIGRlY2lkZSB5b3VyIGNhc2UgYnkgdm90ZS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHRpbWUgYmVpbmcsIHRoZW4sIHRoZSBwYXRyaWNpYW5zIHdlcmUgc2F0aXNmaWVkIHdpdGggdGhpcyB0cnVjZSwgYW5kIHdlbnQgYXdheSBpbiBnbGFkIHBvc3Nlc3Npb24gb2YgTWFyY2l1cy4gQnV0IGluIHRoZSB0aW1lIHdoaWNoIGludGVydmVuZWQgYmVmb3JlIHRoZSB0aGlyZCBtYXJrZXQtZGF5IChmb3IgdGhlIFJvbWFucyBob2xkIHRoZWlyIG1hcmtldHMgZXZlcnkgbmludGggZGF5LCBjYWxsaW5nIHRoZW0sIHRoZXJlZm9yZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5udW5kaW5hZTwvcT4pLCBhIGNhbXBhaWduIHdhcyB1bmRlcnRha2VuIGFnYWluc3QgdGhlIGNpdHkgb2YgQW50aXVtLCB3aGljaCBsZWQgdGhlbSB0byBob3BlIHRoYXQgdGhlIGlzc3VlIG1pZ2h0IGJlIGF2b2lkZWQgYWx0b2dldGhlci4gVGhlIGNhbXBhaWduIHdvdWxkIGxhc3QgbG9uZyBlbm91Z2gsIHRoZXkgdGhvdWdodCwgZm9yIHRoZSBwZW9wbGUgdG8gYmVjb21lIHRyYWN0YWJsZSwgYWZ0ZXIgdGhlaXIgcmFnZSBoYWQgbGFuZ3Vpc2hlZCBvciBhbHRvZ2V0aGVyIGRpc2FwcGVhcmVkIGJ5IHJlYXNvbiBvZiB0aGVpciBvY2N1cGF0aW9uIHdpdGggdGhlIHdhci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHByZXNlbnRseSwgd2hlbiB0aGUgY2l0aXplbnMgcmV0dXJuZWQgaG9tZSBhZnRlciBhIHNwZWVkeSBzZXR0bGVtZW50IG9mIHRoZWlyIGRpc3B1dGUgd2l0aCBBbnRpdW0sIHRoZSBwYXRyaWNpYW5zIHdlcmUgaW4gZnJlcXVlbnQgY29uY2xhdmUsIGJlaW5nIGZ1bGwgb2YgZmVhciwgYW5kIGRlbGliZXJhdGluZyBob3cgdGhleSBtaWdodCBub3Qgc3VycmVuZGVyIE1hcmNpdXMsIGFuZCB5ZXQgcHJldmVudCB0aGUgcG9wdWxhciBsZWFkZXJzIGZyb20gdGhyb3dpbmcgdGhlIHBlb3BsZSBhZ2FpbiBpbnRvIHR1bXVsdCBhbmQgZGlzb3JkZXIuIEFwcGl1cyBDbGF1ZGl1cywgaW5kZWVkLCB3aG8gd2FzIGNvdW50ZWQgYW1vbmcgdGhvc2UgbW9zdCBob3N0aWxlIHRvIHRoZSBjbGFpbXMgb2YgdGhlIHBlb3BsZSwgc2FpZCB3aXRoIGFsbCBzb2xlbW5pdHkgdGhhdCB0aGUgc2VuYXRlIHdvdWxkIGRlc3Ryb3kgaXRzZWxmIGFuZCB1dHRlcmx5IGJldHJheSB0aGUgZ292ZXJubWVudCBvZiB0aGUgY2l0eSwgaWYgaXQgc2hvdWxkIHN1ZmZlciB0aGUgcGVvcGxlIHRvIHdpZWxkIHRoZWlyIHZvdGUgaW4ganVkZ2VtZW50IG9uIHRoZSBwYXRyaWNpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIG9sZGVzdCBzZW5hdG9ycywgYW5kIHRob3NlIG1vc3QgaW5jbGluZWQgdG8gZmF2b3VyIHRoZSBwZW9wbGUsIG1haW50YWluZWQgb24gdGhlIGNvbnRyYXJ5IHRoYXQgaXQgd291bGQgbm90IGJlIHJlbmRlcmVkIGhhcnNoIG9yIHNldmVyZSBieSBpdHMgZXhlcmNpc2Ugb2YgdGhpcyBwb3dlciwgYnV0IG1pbGQgYW5kIGh1bWFuZTsgZm9yIHNpbmNlIGl0IGRpZCBub3QgZGVzcGlzZSB0aGUgc2VuYXRlLCBidXQgcmF0aGVyIHRob3VnaHQgaXRzZWxmIGRlc3Bpc2VkIGJ5IHRoYXQgYm9keSwgdGhlIHByZXJvZ2F0aXZlIG9mIHRyeWluZyBhIHNlbmF0b3Igd291bGQgYmUgYSBzb2xhY2UgdG8gaXRzIGZlZWxpbmdzIGFuZCBhIG1hcmsgb2YgaG9ub3VyLCBzbyB0aGF0IGFzIHNvb24gYXMgaXQgcHJvY2VlZGVkIHRvIHZvdGUgaXQgd291bGQgbGF5IGFzaWRlIGl0cyB3cmF0aC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1hcmNpdXMsIHRoZXJlZm9yZSwgc2VlaW5nIHRoYXQgdGhlIHNlbmF0ZSB3YXMgaW4gc3VzcGVuc2UgYmV0d2VlbiBpdHMga2luZGx5IGZlZWxpbmdzIHRvd2FyZHMgaGltIGFuZCBpdHMgZmVhciBvZiB0aGUgcGVvcGxlLCBhc2tlZCB0aGUgdHJpYnVuZXMgd2hhdCB0aGUgYWNjdXNhdGlvbnMgYWdhaW5zdCBoaW0gd2VyZSwgYW5kIG9uIHdoYXQgY2hhcmdlIGhlIHdvdWxkIGJlIHRyaWVkIGlmIHRoZXkgbGVkIGhpbSBiZWZvcmUgdGhlIHBlb3BsZS4gVGhleSByZXBsaWVkIHRoYXQgdGhlIGNoYXJnZSBhZ2FpbnN0IGhpbSB3YXMgdXN1cnBhdGlvbiwgYW5kIHRoYXQgdGhleSB3b3VsZCBwcm92ZSBoaW0gZ3VpbHR5IG9mIHBsYW5uaW5nIGEgdXN1cnBhdGlvbiBvZiB0aGUgZ292ZXJubWVudC4gVGhlcmV1cG9uIGhlIHJvc2Ugb2YgaGlzIG93biBhY2NvcmQgYW5kIHNhaWQgaGUgd2FzIGdvaW5nIGF0IG9uY2UgYmVmb3JlIHRoZSBwZW9wbGUgdG8gbWFrZSBoaXMgZGVmZW5jZSwgYW5kIHdvdWxkIGRlcHJlY2F0ZSBubyBtYW5uZXIgb2YgdHJpYWwsIG5vciwgc2hvdWxkIGhlIGJlIGZvdW5kIGd1aWx0eSwgYW55IGZvcm0gb2YgcHVuaXNobWVudDsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Pbmx5LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zZWUgdGhhdCB5ZSBjb25maW5lIHlvdXJzZWx2ZXMgdG8gdGhlIGNoYXJnZSBtZW50aW9uZWQsIGFuZCBkbyBub3QgcGxheSBmYWxzZSB3aXRoIHRoZSBzZW5hdGUuPC9xPiBUaGUgdHJpYnVuZXMgYWdyZWVkIHRvIHRoaXMsIGFuZCBvbiB0aGVzZSB0ZXJtcyB0aGUgdHJpYWwgd2FzIGhlbGQuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgcGVvcGxlIHdlcmUgY29tZSB0b2dldGhlciwgaW4gdGhlIGZpcnN0IHBsYWNlLCB0aGUgdHJpYnVuZXMgaW5zaXN0ZWQgdGhhdCB0aGUgdm90ZXMgYmUgY2FzdCBub3QgYnkgY2VudHVyaWVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk91dCBvZiB0aGUgMTkzIGNlbnR1cmllcywgdGhlIHJpY2hlc3QgY2xhc3MgYWxvbmUgaGFkIDk4LCBhZ2FpbnN0IDk1IG9mIGFsbCB0aGUgb3RoZXIgZml2ZSBjbGFzc2VzIHB1dCB0b2dldGhlci48L25vdGU+IGJ1dCBieSB0cmliZXMsIHRodXMgbWFraW5nIHRoZSBpbmRpZ2VudCBhbmQgb2ZmaWNpb3VzIHJhYmJsZSwgd2hpY2ggaGFkIG5vIHRob3VnaHQgb2YgaG9ub3VyLCBzdXBlcmlvciBpbiB2b3RpbmcgcG93ZXIgdG8gdGhlIHdlYWx0aHkgYW5kIHdlbGwga25vd24gY2l0aXplbnMgb2YgdGhlIG1pbGl0YXJ5IGNsYXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2Vjb25kIHBsYWNlLCBhYmFuZG9uaW5nIHRoZSBjaGFyZ2Ugb2YgdXN1cnBhdGlvbiwgd2hpY2ggY291bGQgbm90IGJlIHByb3ZlbiwgdGhleSBkd2VsdCBhZ2FpbiB1cG9uIHRoZSBzcGVlY2ggd2hpY2ggTWFyY2l1cyBoYWQgcHJldmlvdXNseSBtYWRlIGluIHRoZSBzZW5hdGUsIHdoZW4gaGUgcHJvdGVzdGVkIGFnYWluc3QgdGhlIGxvd2VyaW5nIG9mIHRoZSBtYXJrZXQtcHJpY2Ugb2YgZ3JhaW4sIGFuZCB1cmdlZCB0aGVtIHRvIHRha2UgdGhlIHRyaWJ1bmF0ZSBhd2F5IGZyb20gdGhlIHBlb3BsZS4gVGhleSBhbHNvIGFkZGVkIGEgZnJlc2ggY2hhcmdlIGFnYWluc3QgaGltLCBuYW1lbHksIGhpcyBkaXN0cmlidXRpb24gb2YgdGhlIHNwb2lscyB3aGljaCBoZSBoYWQgdGFrZW4gZnJvbSB0aGUgY291bnRyeSBvZiBBbnRpdW07IHRoZXNlLCB0aGV5IHNhaWQsIGhlIGhhZCBub3QgdHVybmVkIGludG8gdGhlIHB1YmxpYyB0cmVhc3VyeSwgYnV0IGhhZCBkaXN0cmlidXRlZCB0aGVtIGFtb25nIHRob3NlIHdobyBtYWRlIHRoZSBjYW1wYWlnbiB3aXRoIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnkgdGhpcyBhY2N1c2F0aW9uIE1hcmNpdXMgaXMgc2FpZCB0byBoYXZlIGJlZW4gbW9yZSBkaXN0dXJiZWQgdGhhbiBieSBhbGwgdGhlIHJlc3QuIEZvciBoZSBoYWQgbm90IGV4cGVjdGVkIGl0LCBhbmQgd2FzIG5vdCByZWFkeSBhdCBvbmNlIHdpdGggYW4gYW5zd2VyIHdoaWNoIHdvdWxkIHNhdGlzZnkgdGhlIHBlb3BsZSwgYnV0IGJlZ2FuIHRvIHByYWlzZSB0aG9zZSB3aG8gaGFkIG1hZGUgdGhlIGNhbXBhaWduLCB3aGVyZXVwb24gaGUgd2FzIGNsYW1vcm91c2x5IGludGVycnVwdGVkIGJ5IHRob3NlIHdobyBoYWQgbm90IG1hZGUgaXQsIGFuZCB0aGV5IHdlcmUgdGhlIG1vcmUgbnVtZXJvdXMuIEluIHRoZSBlbmQsIHRoZXJlZm9yZSwgdGhlIHZvdGUgd2FzIHRha2VuIGJ5IHRyaWJlcywgYW5kIGEgbWFqb3JpdHkgb2YgdGhyZWUgY29uZGVtbmVkIGhpbTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA3LjY0Ij5EaW9ueXNpdXMgSGFsLiAodmlpLiA2NCk8L2JpYmw+IHNheXMgdGhhdCBuaW5lIG9mIHRoZSB0d2VudHktb25lIHRyaWJlcyB2b3RlZCB0byBhY3F1aXQgTWFyY2l1cy48L25vdGU+IFRoZSBwZW5hbHR5IGFzc2lnbmVkIHdhcyBwZXJwZXR1YWwgYmFuaXNobWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIHJlc3VsdCB3YXMgYW5ub3VuY2VkLCB0aGUgcGVvcGxlIHdlbnQgb2ZmIGluIGdyZWF0ZXIgZWxhdGlvbiBhbmQgZGVsaWdodCB0aGFuIHRoZXkgaGFkIGV2ZXIgc2hvd24gZm9yIGFueSB2aWN0b3J5IGluIGJhdHRsZSBvdmVyIHRoZWlyIGVuZW1pZXM7IGJ1dCB0aGUgc2VuYXRlIHdhcyBpbiBkaXN0cmVzcyBhbmQgZGlyZSBkZWplY3Rpb24sIHJlcGVudGluZyBub3cgYW5kIHZleGVkIHRvIHRoZSBzb3VsIHRoYXQgdGhleSBoYWQgbm90IGRvbmUgYW5kIHN1ZmZlcmVkIGFsbCB0aGluZ3MgcmF0aGVyIHRoYW4gYWxsb3cgdGhlIHBlb3BsZSB0byBpbnN1bHQgdGhlbSBpbiB0aGUgZXhlcmNpc2Ugb2Ygc3VjaCBncmVhdCBwb3dlcnMuIEFuZCB0aGVyZSB3YXMgbm8gbmVlZCBub3cgb2YgZHJlc3Mgb3Igb3RoZXIgbWFya3Mgb2YgZGlzdGluY3Rpb24gaW4gdGVsbGluZyBvbmUgY2xhc3MgZnJvbSBhbm90aGVyLCBidXQgaXQgd2FzIGNsZWFyIGF0IG9uY2UgdGhhdCBoZSB3aG8gcmVqb2ljZWQgd2FzIGEgcGxlYmVpYW4sIGFuZCBoZSB3aG8gd2FzIHZleGVkLCBhIHBhdHJpY2lhbi4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFsYmVpdCBNYXJjaXVzIGhpbXNlbGY7IHdobyB3YXMgbmVpdGhlciBkYXVudGVkIG5vciBodW1ibGVkLCBidXQgaW4gbWllbiwgcG9ydCwgYW5kIGNvdW50ZW5hbmNlIGZ1bGx5IGNvbXBvc2VkLCBzZWVtZWQgdGhlIG9ubHkgbWFuIGFtb25nIGFsbCB0aGUgZGlzdHJlc3NlZCBwYXRyaWNpYW5zIHdobyB3YXMgbm90IHRvdWNoZWQgYnkgaGlzIGV2aWwgcGxpZ2h0LiBBbmQgdGhpcyB3YXMgbm90IGR1ZSB0byBjYWxjdWxhdGlvbiwgb3IgZ2VudGxlbmVzcywgb3IgdG8gYSBjYWxtIGVuZHVyYW5jZSBvZiBoaXMgZmF0ZSwgYnV0IGhlIHdhcyBzdGlycmVkIGJ5IHJhZ2UgYW5kIGRlZXAgcmVzZW50bWVudCwgYW5kIHRoaXMsIGFsdGhvdWdoIHRoZSBtYW55IGtub3cgaXQgbm90LCBpcyBwYWluLiBGb3Igd2hlbiBwYWluIGlzIHRyYW5zbXV0ZWQgaW50byBhbmdlciwgaXQgaXMgY29uc3VtZWQsIGFzIGl0IHdlcmUsIGJ5IGl0cyBmbGFtZXMsIGFuZCBjYXN0cyBvZmYgaXRzIG93biBodW1pbGl0eSBhbmQgc2xvdGguIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGUgYW5ncnkgbWFuIG1ha2VzIGEgc2hvdyBvZiBhY3Rpdml0eSwgYXMgaGUgd2hvIGhhcyBhIGZldmVyIGlzIGhvdCwgaGlzIHNwaXJpdCBiZWluZywgc28gdG8gc3BlYWssIGFmZmxpY3RlZCB3aXRoIHRocm9iYmluZywgZGlzdGVudGlvbiwgYW5kIGluZmxhdGlvbi4gQW5kIHRoYXQgc3VjaCB3YXMgaGlzIGNvbmRpdGlvbiwgTWFyY2l1cyBzaG93ZWQgcmlnaHQgcXVpY2tseSBieSBoaXMgY29uZHVjdC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdlbnQgaG9tZSwgd2hlcmUgaGlzIG1vdGhlciBhbmQgaGlzIHdpZmUgbWV0IGhpbSB3aXRoIHdhaWxpbmdzIGFuZCBsb3VkIGxhbWVudGF0aW9ucywgYW5kIGFmdGVyIGVtYnJhY2luZyB0aGVtIGFuZCBiaWRkaW5nIHRoZW0gdG8gYmVhciB3aXRoIGVxdWFuaW1pdHkgdGhlIGZhdGUgdGhhdCBoYWQgY29tZSB1cG9uIHRoZW0sIGhlIHN0cmFpZ2h0d2F5IGRlcGFydGVkIGFuZCB3ZW50IHRvIHRoZSBjaXR5IGdhdGUuIFRoaXRoZXIgYWxsIHRoZSBwYXRyaWNpYW5zIGluIGEgYm9keSBlc2NvcnRlZCBoaW0sIGJ1dCB3aXRob3V0IHRha2luZyBhbnl0aGluZyBvciBhc2tpbmcgZm9yIGFueXRoaW5nIGhlIGRlcGFydGVkLCBoYXZpbmcgb25seSB0aHJlZSBvciBmb3VyIG9mIGhpcyBjbGllbnRzIHdpdGggaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYSBmZXcgZGF5cyBoZSByZW1haW5lZCBieSBoaW1zZWxmIGF0IHNvbWUgY291bnRyeSBwbGFjZSwgdG9ybiBieSBtYW55IGNvbmZsaWN0aW5nIGNvdW5zZWxzLCBzdWNoIGFzIGhpcyBhbmdlciBzdWdnZXN0ZWQgdG8gaGltLCBwdXJwb3Npbmcgbm8gZ29vZCBvciBoZWxwZnVsIHRoaW5nIGF0IGFsbCwgYnV0IG9ubHkgaG93IGhlIG1pZ2h0IHRha2UgdmVuZ2VhbmNlIG9uIHRoZSBSb21hbnMuIEF0IGxhc3QgaGUgZGV0ZXJtaW5lZCB0byBpbmNpdGUgc29tZSBuZWlnaGJvdXJpbmcgbmF0aW9uIHRvIGEgZm9ybWlkYWJsZSB3YXIgYWdhaW5zdCB0aGVtLiBBY2NvcmRpbmdseSwgaGUgc2V0IG91dCB0byBtYWtlIHRyaWFsIG9mIHRoZSBWb2xzY2lhbnMgZmlyc3QsIGtub3dpbmcgdGhhdCB0aGV5IHdlcmUgc3RpbGwgYWJ1bmRhbnRseSBzdXBwbGllZCB3aXRoIG1lbiBhbmQgbW9uZXksIGFuZCB0aGlua2luZyB0aGF0IHRoZXkgaGFkIGJlZW4gbm90IHNvIG11Y2ggY3JpcHBsZWQgaW4gcG93ZXIgYnkgdGhlaXIgcmVjZW50IGRlZmVhdHMgYXMgZmlsbGVkIHdpdGggY29udGVudGlvdXMgd3JhdGggYWdhaW5zdCB0aGUgUm9tYW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoZXJlIHdhcyBhIGNlcnRhaW4gbWFuIG9mIEFudGl1bSwgVHVsbHVzIEF1ZmlkaXVzIGJ5IG5hbWUsIHdobywgYnkgcmVhc29uIG9mIGhpcyB3ZWFsdGggYW5kIGJyYXZlcnkgYW5kIGNvbnNwaWN1b3VzIGxpbmVhZ2UsIGhhZCB0aGUgc3RhbmRpbmcgb2YgYSBraW5nIGFtb25nIGFsbCB0aGUgVm9sc2NpYW5zLiBCeSB0aGlzIG1hbiBNYXJjaXVzIGtuZXcgaGltc2VsZiB0byBiZSBoYXRlZCBhcyBubyBvdGhlciBSb21hbiB3YXM7IGZvciB0aGV5IGhhZCBvZnRlbiBleGNoYW5nZWQgdGhyZWF0cyBhbmQgY2hhbGxlbmdlcyBpbiB0aGUgYmF0dGxlcyB3aGljaCB0aGV5IGhhZCBmb3VnaHQsIGFuZCBzdWNoIGVtdWxvdXMgYm9hc3RpbmdzIGFzIHRoZSBhbWJpdGlvdXMgYXJkb3VyIG9mIHlvdXRoZnVsIHdhcnJpb3JzIHByb21wdHMgaGFkIGdpdmVuIHJpc2UgdG8gYSBtdXR1YWwgaGF0cmVkIG9mIHRoZWlyIG93biwgaW4gYWRkaXRpb24gdG8gdGhhdCBvZiB0aGVpciBwZW9wbGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBzaW5jZSBoZSBzYXcgdGhhdCBUdWxsdXMgaGFkIGEgY2VydGFpbiBncmFuZGV1ciBvZiBzcGlyaXQsIGFuZCB0aGF0IGhlLCBtb3JlIHRoYW4gYWxsIG90aGVyIFZvbHNjaWFucywgd2FzIGVhZ2VyIHRvIHJldGFsaWF0ZSB1cG9uIHRoZSBSb21hbnMsIGlmIHRoZXkgZ2F2ZSBoaW0gYW55IG9wcG9ydHVuaXR5LCBNYXJjaXVzIGJvcmUgd2l0bmVzcyB0byB0aGUgdHJ1dGggb2YgaGltIHdobyBzYWlkPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGVyYWNsZXRpdXMsIEZyYWdtZW50IDEwNSAoQnl3YXRlciwgPHRpdGxlPkhlcmFjbGl0aSBFcGhlc2lpIHJlbGlxdWlhZTwvdGl0bGU+LCBwLiA0MSkuPC9ub3RlPjogIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2l0aCBhbmdlciBpdCBpcyBoYXJkIHRvIGZpZ2h0OyBmb3Igd2hhdHNvZSdlciBpdCB3aXNoZXMsIHRoYXQgaXQgYnV5cywgZXZlbiBhdCB0aGUgY29zdCBvZiBsaWZlLjwvcT4gRm9yLCBwdXR0aW5nIG9uIHN1Y2ggY2xvdGhpbmcgYW5kIGF0dGlyZSBhcyB3b3VsZCBtYWtlIGhpbSBzZWVtLCB0byBhbnkgb25lIHdobyBzYXcgaGltLCBsZWFzdCBsaWtlIHRoZSBtYW4gaGUgd2FzLCBsaWtlIE9keXNzZXVzLCAKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+SGUgd2VudCBpbnRvIHRoZSBjaXR5IG9mIGhpcyBkZWFkbHkgZm9lcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDQuMjQ2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPk9keXNzZXk8L3RpdGxlPiwgaXYuIDI0Ni48L2JpYmw+CiAgICAgICAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IFhYSUlJLiBJdCB3YXMgZXZlbmluZywgYW5kIG1hbnkgbWV0IGhpbSwgYnV0IG5vIG1hbiBrbmV3IGhpbS4gSGUgcHJvY2VlZGVkLCB0aGVyZWZvcmUsIHRvIHRoZSBob3VzZSBvZiBUdWxsdXMsIGFuZCBzbGlwcGluZyBpbiB1bmF3YXJlcywgdG9vayBoaXMgc2VhdCBhdCB0aGUgaGVhcnRoPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBzYWNyZWQgcGxhY2Ugb2YgcmVmdWdlIGZvciB0aGUgc3VwcGxpYW50LiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDcuMTUzIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk9keXNzZXk8L3RpdGxlPiwgdmlpLiAxNTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGluIHNpbGVuY2UsIGNvdmVyZWQgaGlzIGhlYWQsIGFuZCByZW1haW5lZCB0aGVyZSBtb3Rpb25sZXNzLiBUaGUgcGVvcGxlIG9mIHRoZSBob3VzZSB3ZXJlIGFtYXplZCwgYW5kIGRpZCBub3QgdmVudHVyZSB0byByYWlzZSBoaW0gdXAsIGZvciBoaXMgbWllbiBhbmQgaGlzIHNpbGVuY2UgZ2F2ZSBoaW0gYSBjZXJ0YWluIGRpZ25pdHk7IGJ1dCB0aGV5IHRvbGQgVHVsbHVzLCB3aG8gd2FzIGF0IHN1cHBlciwgd2hhdCBhIHN0cmFuZ2UgdGhpbmcgaGFkIGhhcHBlbmVkLiBUdWxsdXMgcm9zZSBmcm9tIHRhYmxlIGFuZCBjYW1lIHRvIGhpbSwgYW5kIGFza2VkIGhpbSB3aG8gaGUgd2FzLCBhbmQgd2h5IGhlIHdhcyBjb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzLCB0aGVuLCBNYXJjaXVzIHVuY292ZXJlZCBoaXMgaGVhZCwgYW5kIGFmdGVyIGEgc2xpZ2h0IHBhdXNlLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIHRob3UgZG9zdCBub3QgeWV0IHJlY29nbml6ZSBtZSwgVHVsbHVzLCBidXQgZGlzYmVsaWV2ZXN0IHRoaW5lIGV5ZXMsIEkgbXVzdCBiZSBteSBvd24gYWNjdXNlci4gSSBhbSBDYWl1cyBNYXJjaXVzLCBoZSB3aG8gaGFzIHdyb3VnaHQgdGhlZSBhbmQgdGhlIFZvbHNjaWFucyBtb3N0IGhhcm0sIGFuZCB0aGUgc3VybmFtZSBvZiBDb3Jpb2xhbnVzIHdoaWNoIEkgYmVhciBwZXJtaXRzIG5vIGRlbmlhbCBvZiB0aGlzLiAKCQkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SSBoYXZlIHdvbiBubyBvdGhlciBwcml6ZSBmb3IgYWxsIHRoZSB0b2lscyBhbmQgcGVyaWxzIHdoaWNoIEkgaGF2ZSB1bmRlcmdvbmUgdGhhbiB0aGUgbmFtZSB3aGljaCBpcyBhIGJhZGdlIG9mIG15IGVubWl0eSB0byB5b3VyIHBlb3BsZS4gVGhpcywgaW5kZWVkLCBjYW5ub3QgYmUgdGFrZW4gYXdheSBmcm9tIG1lOyBidXQgb2YgZXZlcnl0aGluZyBlbHNlIEkgaGF2ZSBiZWVuIHN0cmlwcGVkLCB0aHJvdWdoIHRoZSBlbnZ5IGFuZCBpbnNvbGVuY2Ugb2YgdGhlIFJvbWFuIHBlb3BsZSwgYW5kIHRoZSBjb3dhcmRseSB0cmVhY2hlcnkgb2YgdGhlIG1hZ2lzdHJhdGVzIGFuZCB0aG9zZSBvZiBteSBvd24gb3JkZXIuIEkgaGF2ZSBiZWVuIGRyaXZlbiBpbnRvIGV4aWxlLCB0b28sIGFuZCBhbSBiZWNvbWUgYSBzdXBwbGlhbnQgYXQgdGh5IGhlYXJ0aCwgbm90IGZvciB0aGUgc2FrZSBvZiBzZWN1cml0eSBhbmQgc2FmZXR5LOKAlGZvciB3aHkgc2hvdWxkIEkgY29tZSBoaXRoZXIgaWYgSSB3ZXJlIGFmcmFpZCBvZiBkZWF0aCA/4oCUYnV0IHdpdGggYSBkZXNpcmUgdG8gdGFrZSB2ZW5nZWFuY2Ugb24gdGhvc2Ugd2hvIGhhdmUgZHJpdmVuIG1lIGZvcnRoLCB3aGljaCBJIHRha2UgYXQgb25jZSB3aGVuIEkgcHV0IG15c2VsZiBpbiB0aHkgcG93ZXIuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JZjsgdGhlbiwgdGhvdSBhcnQgZWFnZXIgdG8gYXNzYWlsIHRoaW5lIGVuZW1pZXMsIGNvbWUsIGdvb2QgU2lyLCB0YWtlIGFkdmFudGFnZSBvZiBteSBjYWxhbWl0aWVzLCBhbmQgbWFrZSBteSBpbmRpdmlkdWFsIG1pc2ZvcnR1bmUgdGhlIGdvb2QgZm9ydHVuZSBvZiBhbGwgdGhlIFZvbHNjaWFuczsgSSBzaGFsbCBmaWdodCBiZXR0ZXIgZm9yIHlvdSB0aGFuIEkgaGF2ZSBhZ2FpbnN0IHlvdSwgaW4ganVzdCBzbyBmYXIgYXMgdGhvc2Ugd2hvIGtub3cgdGhlIHNlY3JldHMgb2YgdGhlaXIgZW5lbWllcyBmaWdodCBiZXR0ZXIgdGhhbiB0aG9zZSB3aG8gZG8gbm90LiBCdXQgaWYgdGhvdSBoYXN0IGdpdmVuIHVwIGhvcGUsIG5laXRoZXIgZG8gSSB3aXNoIHRvIGxpdmUsIG5vciBpcyBpdCBmb3IgdGhpbmUgYWR2YW50YWdlIHRvIHNwYXJlIG9uZSB3aG8gaGFzIGxvbmcgYmVlbiBhbiBlbmVteSBhbmQgYSBmb2UsIGFuZCBub3cgaXMgdW5wcm9maXRhYmxlIGFuZCB1c2VsZXNzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gVHVsbHVzIGhlYXJkIHRoaXMsIGhlIHdhcyB3b25kZXJmdWxseSBwbGVhc2VkLCBhbmQgZ2l2aW5nIGhpbSBoaXMgcmlnaHQgaGFuZCwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5SaXNlIHVwLCBNYXJjaXVzLCBhbmQgYmUgb2YgZ29vZCBjb3VyYWdlLiBJbiBnaXZpbmcgdGh5c2VsZiB0byB1cywgdGhvdSBicmluZ2VzdCB1cyBhIGdyZWF0IGdvb2QsIGFuZCB0aG91IG1heWVzdCBleHBlY3QgYSBncmVhdGVyIG9uZSBzdGlsbCBmcm9tIHRoZSBWb2xzY2lhbnMuPC9xPiBUaGVuIGhlIGVudGVydGFpbmVkIE1hcmNpdXMgYXQgdGFibGUgd2l0aCBldmVyeSBtYXJrIG9mIGtpbmRuZXNzLCBhbmQgZHVyaW5nIHRoZSBlbnN1aW5nIGRheXMgdGhleSB0b29rIGNvdW5zZWwgdG9nZXRoZXIgY29uY2VybmluZyB0aGUgd2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkxpdnkgc2ltcGx5IHNheXMgdGhhdCBNYXJjaXVzIHdhcyBraW5kbHkgcmVjZWl2ZWQgYnkgdGhlIFZvbHNjaWFucywgYW5kIHRoYXQgaGUgbG9kZ2VkIHdpdGggVHVsbHVzIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzUuNiIgdmFsaWQ9InllcyI+KGlpLiAzNSwgNikuPC9iaWJsPiBDaGFwdGVycyB4eGkuLXh4aWlpLiBhZ3JlZSBjbG9zZWx5IHdpdGggPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuSC4gNy42NyI+RGlvbnlzaXVzIEhhbC4gdmlpLiA2NzwvYmlibD4gYW5kIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMSI+dmlpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCBSb21lLCBvd2luZyB0byB0aGUgaGF0cmVkIG9mIHRoZSBwZW9wbGUgYnkgdGhlIHBhdHJpY2lhbnMsIHdobyB3ZXJlIGVzcGVjaWFsbHkgZW1iaXR0ZXJlZCBieSB0aGUgY29uZGVtbmF0aW9uIG9mIE1hcmNpdXMsIHRoZXJlIHdlcmUgZ3JlYXQgY29tbW90aW9ucywgYW5kIG1hbnkgc2lnbnMgZnJvbSBoZWF2ZW4gd2VyZSByZXBvcnRlZCBieSBzZWVycywgcHJpZXN0cywgYW5kIHByaXZhdGUgcGVyc29ucywgd2hpY2ggY291bGQgbm90IGJlIGlnbm9yZWQuIE9uZSBvZiB0aGVzZSBpcyBzYWlkIHRvIGhhdmUgYmVlbiBhcyBmb2xsb3dzLiBUaGVyZSB3YXMgb25lIFRpdHVzIExhdGludXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHN0b3J5IGlzIGZvdW5kIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzYiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzNjwvYmlibD4sIGFuZCBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iVi4gTWF4LiAxLjcuNCI+VmFsZXJpdXMgTWF4aW11cywgaS4gNywgNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYSBtYW4gb2Ygbm8gZ3JlYXQgcHJvbWluZW5jZSwgYnV0IG9mIHF1aWV0IGFuZCBtb2Rlc3QgbGlmZSBpbiBnZW5lcmFsLCBhbmQgZnJlZSBmcm9tIHN1cGVyc3RpdGlvdXMgZmVhcnMsIGFzIGhlIHdhcyBhbHNvLCBhbmQgeWV0IG1vcmUsIGZyb20gdmFpbiBwcmV0ZW5zaW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBtYW4gZHJlYW1lZCB0aGF0IEp1cGl0ZXIgYXBwZWFyZWQgdG8gaGltLCBhbmQgYmFkZSBoaW0gdGVsbCB0aGUgc2VuYXRlIHRoYXQgdGhlIGRhbmNlciwgd2hvbSB0aGV5IGhhZCBhcHBvaW50ZWQgdG8gaGVhZCBoaXMgcHJvY2Vzc2lvbiwgd2FzIGEgYmFkIG9uZSwgYW5kIGdhdmUgaGltIHRoZSBncmVhdGVzdCBkaXNwbGVhc3VyZS4gQWZ0ZXIgaGF2aW5nIHRoaXMgdmlzaW9uLCBUaXR1cyBzYWlkLCBoZSBnYXZlIGl0IG5vIHRob3VnaHQgYXQgYWxsIGF0IGZpcnN0LCBidXQgYWZ0ZXIgaGUgaGFkIHNlZW4gaXQgYSBzZWNvbmQgYW5kIGEgdGhpcmQgdGltZSwgYW5kIHN0aWxsIG5lZ2xlY3RlZCBpdCwgaGUgaGFkIHN1ZmZlcmVkIHRoZSBsb3NzIG9mIGFuIGV4Y2VsbGVudCBzb24gYnkgZGVhdGgsIGFuZCBoYWQgaGltc2VsZiBiZWNvbWUgc3VkZGVubHkgcGFsc2llZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBzdG9yeSBoZSB0b2xkIGFmdGVyIGhhdmluZyBiZWVuIGJyb3VnaHQgaW50byB0aGUgc2VuYXRlIG9uIGEgbGl0dGVyLCBhbmQgbm8gc29vbmVyIGhhZCBoZSB0b2xkIGl0LCB0aGV5IHNheSwgdGhhbiBoZSBhdCBhdCBvbmNlIGZlbHQgdGhlIHN0cmVuZ3RoIHJldHVybiB0byBoaXMgYm9keSwgYW5kIHJvc2UgdXAsIGFuZCB3ZW50IGF3YXksIHdhbGtpbmcgd2l0aG91dCBhaWQuIEluIGFtYXplbWVudCwgdGhlbiwgdGhlIHNlbmF0b3JzIG1hZGUgYSBjYXJlZnVsIGludmVzdGlnYXRpb24gb2YgdGhlIG1hdHRlci4KCQkJPC9wPgogICAgICAgICA8cD5Ob3csIHdoYXQgaGFkIGhhcHBlbmVkIHdhcyB0aGlzLiBBIGNlcnRhaW4gbWFuIGhhZCBoYW5kZWQgb3ZlciBvbmUgb2YgaGlzIHNsYXZlcyB0byBvdGhlciBzbGF2ZXMsIHdpdGggb3JkZXJzIHRvIHNjb3VyZ2UgaGltIHRocm91Z2ggdGhlIGZvcnVtLCBhbmQgdGhlbiBwdXQgaGltIHRvIGRlYXRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSB0aGV5IHdlcmUgZXhlY3V0aW5nIHRoaXMgY29tbWlzc2lvbiBhbmQgdG9ybWVudGluZyB0aGUgcG9vciB3cmV0Y2gsIHdob3NlIHBhaW4gYW5kIHN1ZmZlcmluZyBtYWRlIGhpbSB3cml0aGUgYW5kIHR3aXN0IGhpbXNlbGYgaG9ycmlibHksIHRoZSBzYWNyZWQgcHJvY2Vzc2lvbiBpbiBob25vdXIgb2YgSnVwaXRlciBjaGFuY2VkIHRvIGNvbWUgdXAgYmVoaW5kLiBNYW55IG9mIHRob3NlIHdobyB0b29rIHBhcnQgaW4gaXQgd2VyZSwgaW5kZWVkLCBzY2FuZGFsaXplZCBhdCB0aGUgam95bGVzcyBzaWdodCBhbmQgdGhlIHVuc2VlbWx5IGNvbnRvcnRpb25zIG9mIHRoZSB2aWN0aW0sIGJ1dCBubyBvbmUgbWFkZSBhbnkgcHJvdGVzdDsgdGhleSBtZXJlbHkgaGVhcGVkIGFidXNlIGFuZCBjdXJzZXMgb24gdGhlIGhlYWQgb2YgdGhlIG1hc3RlciB3aG8gd2FzIGluZmxpY3Rpbmcgc3VjaCBhIGNydWVsIHB1bmlzaG1lbnQuIEZvciBpbiB0aG9zZSBkYXlzIHRoZSBSb21hbnMgdHJlYXRlZCB0aGVpciBzbGF2ZXMgd2l0aCBncmVhdCBraW5kbmVzcywgYmVjYXVzZSB0aGV5IHdvcmtlZCBhbmQgZXZlbiBhdGUgd2l0aCB0aGVtIHRoZW1zZWx2ZXMsIGFuZCB3ZXJlIHRoZXJlZm9yZSBtb3JlIGZhbWlsaWFyIGFuZCBnZW50bGUgd2l0aCB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgd2FzIGEgc2V2ZXJlIHB1bmlzaG1lbnQgZm9yIGEgc2xhdmUgd2hvIGhhZCBjb21taXR0ZWQgYSBmYXVsdCwgaWYgaGUgd2FzIG9ibGlnZWQgdG8gdGFrZSB0aGUgcGllY2Ugb2Ygd29vZCB3aXRoIHdoaWNoIHRoZXkgcHJvcCB1cCB0aGUgcG9sZSBvZiBhIHdhZ2dvbiwgYW5kIGNhcnJ5IGl0IGFyb3VuZCB0aHJvdWdoIHRoZSBuZWlnaGJvdXJob29kLiBGb3IgaGUgd2hvIGhhZCBiZWVuIHNlZW4gdW5kZXJnb2luZyB0aGlzIHB1bmlzaG1lbnQgbm8gbG9uZ2VyIGhhZCBhbnkgY3JlZGl0IGluIGhpcyBvd24gb3IgbmVpZ2hib3VyaW5nIGhvdXNlaG9sZHMuIEFuZCBoZSB3YXMgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZnVyY2lmZXI8L3E+OyBmb3Igd2hhdCB0aGUgR3JlZWtzIGNhbGwgYSA8ZW1waD5wcm9wPC9lbXBoPiwgb3IgPGVtcGg+c3VwcG9ydDwvZW1waD4sIGlzIGNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZ1cmNhPC9xPiBieSB0aGUgUm9tYW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgdGhlcmVmb3JlLCBMYXRpbnVzIGhhZCByZXBvcnRlZCBoaXMgdmlzaW9uIHRvIHRoZSBzZW5hdG9ycywgYW5kIHRoZXkgd2VyZSBhdCBhIGxvc3MgdG8ga25vdyB3aG8gdGhlIHVucGxlYXNhbnQgYW5kIGJhZCBkYW5jZXIgd2FzIHdobyBoYWQgaGVhZGVkIHRoZSBwcm9jZXNzaW9uIHJlZmVycmVkIHRvLCBzb21lIG9mIHRoZW0gd2VyZSBsZWQsIG93aW5nIHRvIHRoZSBleHRyYW9yZGluYXJ5IG5hdHVyZSBvZiBoaXMgcHVuaXNobWVudCwgdG8gdGhpbmsgb2YgdGhlIHNsYXZlIHdobyBoYWQgYmVlbiBzY291cmdlZCB0aHJvdWdoIHRoZSBmb3J1bSBhbmQgdGhlbiBwdXQgdG8gZGVhdGguIEFjY29yZGluZ2x5LCB3aXRoIHRoZSBjb25jdXJyZW5jZSBvZiB0aGUgcHJpZXN0cywgdGhlIG1hc3RlciBvZiB0aGUgc2xhdmUgd2FzIHB1bmlzaGVkLCBhbmQgdGhlIHByb2Nlc3Npb24gYW5kIHNwZWN0YWNsZXMgaW4gaG9ub3VyIG9mIHRoZSBnb2Qgd2VyZSBleGhpYml0ZWQgYW5ldy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gTGl2eSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjM2IiB2YWxpZD0ieWVzIj4oaWkuIDM2IGFuZCAzNyksPC9iaWJsPiBpdCB3YXMgYXQgdGhlIHJlcGV0aXRpb24gb2YgdGhlIGdyZWF0IGdhbWVzLCB3aGljaCB3YXMgbWFkZSBuZWNlc3NhcnkgYnkgdGhlIHByb2ZhbmF0aW9uIG1hZGUga25vd24gYnkgdGhlIGRyZWFtIG9mIExhdGludXMsIHRoYXQgdGhlIFZvbHNjaWFucyB3ZXJlIHNlbnQgb3V0IHRoZSBjaXR5LCBhcyBkZXNjcmliZWQgYnkgUGx1dGFyY2ggaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvci4gMjYuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHZpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGl0IHdvdWxkIHNlZW0gdGhhdCBOdW1hLCB3aG8gaW4gb3RoZXIgcmVzcGVjdHMgYWxzbyB3YXMgYSB2ZXJ5IHdpc2UgZGlyZWN0b3Igb2Ygc2FjcmVkIHJpdGVzLCBoYWQgdmVyeSBwcm9wZXJseSBzb3VnaHQgdG8gc2VjdXJlIHRoZSBwZW9wbGUncyByZXZlcmVudCBhdHRlbnRpb24gYnkgbWVhbnMgb2YgdGhlIGZvbGxvd2luZyBvcmRpbmFuY2UuIFdoZW4sIG5hbWVseSwgbWFnaXN0cmF0ZXMgb3IgcHJpZXN0cyBwZXJmb3JtIGFueSByZWxpZ2lvdXMgZnVuY3Rpb24sIGEgaGVyYWxkIGdvZXMgYmVmb3JlLCBjcnlpbmcgd2l0aCBhIGxvdWQgdm9pY2UsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SG9jIGFnZS48L3E+IFRoZSBtZWFuaW5nIG9mIHRoZSBjcnkgaXMsIDxlbXBoPk1pbmQgdGhpcyE8L2VtcGg+IGFuZCBpdCB3YXJucyB0aGUgcGVvcGxlIHRvIGdpdmUgaGVlZCB0byB0aGUgc2FjcmVkIHJpdGVzLCBhbmQgc3VmZmVyIG5vIHRhc2sgb3IgZGVtYW5kIG9mIGJ1c2luZXNzIHRvIGludGVydmVuZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMTQuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5OdW1hPC90aXRsZT4sIHhpdi4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW1wbHlpbmcgdGhhdCBtZW4gcGVyZm9ybSBtb3N0IG9mIHRoZWlyIGR1dGllcyB1bmRlciBzb21lIHNvcnQgb2YgY29tcHVsc2lvbiBhbmQgYnkgY29uc3RyYWludC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIGN1c3RvbWFyeSBmb3IgdGhlIFJvbWFucyB0byByZW5ldyBzYWNyaWZpY2VzIGFuZCBwcm9jZXNzaW9ucyBhbmQgc3BlY3RhY2xlcywgbm90IG9ubHkgZm9yIHN1Y2ggYSByZWFzb24gYXMgdGhlIGFib3ZlLCBidXQgYWxzbyBmb3IgdHJpdmlhbCByZWFzb25zLiBGb3IgaW5zdGFuY2UsIGlmIG9uZSBvZiB0aGUgaG9yc2VzIGRyYXdpbmcgdGhlIHNhY3JlZCBjaGFyaW90cyBjYWxsZWQgVGVuc2FlIGdpdmVzIG91dDsgb3IgYWdhaW4sIGlmIHRoZSBjaGFyaW90ZWVyIHRha2VzIGhvbGQgb2YgdGhlIHJlaW5zIHdpdGggaGlzIGxlZnQgaGFuZCwgdGhleSBkZWNyZWUgdGhhdCB0aGUgcHJvY2Vzc2lvbiBiZSByZW5ld2VkLiBBbmQgaW4gbGF0ZXIgYWdlcywgYSBzaW5nbGUgc2FjcmlmaWNlIGhhcyBiZWVuIHBlcmZvcm1lZCB0aGlydHkgdGltZXMsIGJlY2F1c2UgYWdhaW4gYW5kIGFnYWluIHNvbWUgZmFpbHVyZSBvciBvZmZlbmNlIHdhcyB0aG91Z2h0IHRvIG9jY3VyLiBTdWNoIGlzIHRoZSByZXZlcmVudCBjYXJlIG9mIHRoZSBSb21hbnMgaW4gcmVsaWdpb3VzIG1hdHRlcnMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTWFyY2l1cyBhbmQgVHVsbHVzIHdlcmUgc2VjcmV0bHkgY29uZmVycmluZyBhdCBBbnRpdW0gd2l0aCB0aGUgY2hpZWYgbWVuLCBhbmQgd2VyZSB1cmdpbmcgdGhlbSB0byBiZWdpbiB0aGUgd2FyIHdoaWxlIHRoZSBSb21hbnMgd2VyZSB0b3JuIGJ5IGludGVybmFsIGRpc3NlbnNpb25zLiBBbmQgd2hlbiBzaGFtZSByZXN0cmFpbmVkIHRoZW0gZnJvbSB0aGlzIGNvdXJzZSwgYmVjYXVzZSB0aGV5IGhhZCBhZ3JlZWQgdG8gYSB0cnVjZSBhbmQgY2Vzc2F0aW9uIG9mIGhvc3RpbGl0aWVzIGZvciB0d28geWVhcnMsIHRoZSBSb21hbnMgdGhlbXNlbHZlcyBmdXJuaXNoZWQgdGhlbSB3aXRoIGEgcHJldGV4dCwgYnkgbWFraW5nIHByb2NsYW1hdGlvbiBhdCB0aGUgc3BlY3RhY2xlcyBhbmQgZ2FtZXMsIGJlY2F1c2Ugb2Ygc29tZSBzdXNwaWNpb24gb3Igc2xhbmRlcm91cyByZXBvcnQsIHRoYXQgdGhlIHZpc2l0aW5nIFZvbHNjaWFucyBtdXN0IGxlYXZlIHRoZSBjaXR5IGJlZm9yZSBzdW5zZXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgc2F5PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSBmb2xsb3dpbmcgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvbXAuQWxjLkNvci4gMi4yIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8dGl0bGU+Q29tcGFyaXNvbjwvdGl0bGU+LCBpaS4gMi48L25vdGU+IHRoYXQgdGhpcyB3YXMgZHVlIHRvIGEgZGVjZWl0ZnVsIHN0cmF0YWdlbSBvZiBNYXJjaXVzLCB3aG8gc2VudCBhIG1hbiB0byB0aGUgY29uc3VscyBpbiBSb21lLCBiZWFyaW5nIHRoZSBmYWxzZSBjaGFyZ2UgdGhhdCB0aGUgVm9sc2NpYW5zIHB1cnBvc2VkIHRvIGZhbGwgdXBvbiB0aGUgUm9tYW5zIGF0IHRoZSBzcGVjdGFjbGVzLCBhbmQgc2V0IHRoZSBjaXR5IG9uIGZpcmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIExpdnkgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zNy4xIiB2YWxpZD0ieWVzIj4oaWkuIDM3LCAxLTcpPC9iaWJsPiwgaXQgd2FzIFR1bGx1cyBoaW1zZWxmIHdobyBjYW1lIHRvIHRoZSBjb25zdWxzLCBhcyBoYWQgYmVlbiBwbGFubmVkIHdpdGggTWFyY2l1cy4gUGx1dGFyY2ggYWdyZWVzIHJhdGhlciB3aXRoIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMyI+RGlvbnlzaXVzIEhhbC4gdmlpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhpcyBwcm9jbGFtYXRpb24gbWFkZSBhbGwgdGhlIFZvbHNjaWFucyBtb3JlIGVtYml0dGVyZWQgYWdhaW5zdCB0aGUgUm9tYW5zOyBhbmQgVHVsbHVzLCBtYWduaWZ5aW5nIHRoZSBpbmNpZGVudCwgYW5kIGdvYWRpbmcgdGhlbSBvbiwgYXQgbGFzdCBwZXJzdWFkZWQgdGhlbSB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIFJvbWU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5MaXZ5IHNwZWFrcyBvbmx5IG9mIGEgcmV2b2x0IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzgiIHZhbGlkPSJ5ZXMiPihpaS4gMzgsIDxlbXBoPmZpbi48L2VtcGg+KS4gPC9iaWJsPiBQbHV0YXJjaCBhZ3JlZXMgd2l0aCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjQiPkRpb255c2l1cyBIYWwuIHZpaWkuIDQtMTAuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBkZW1hbmQgYmFjayB0aGUgdGVycml0b3J5IGFuZCB0aGUgY2l0aWVzIHdoaWNoIGhhZCBiZWVuIHRha2VuIGZyb20gdGhlIFZvbHNjaWFucyBpbiB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgUm9tYW5zLCBhZnRlciBoZWFyaW5nIHRoZSBhbWJhc3NhZG9ycywgd2VyZSBmdWxsIG9mIGluZGlnbmF0aW9uLCBhbmQgcmVwbGllZCB0aGF0IHRoZSBWb2xzY2lhbnMgbWlnaHQgYmUgZmlyc3QgdG8gdGFrZSB1cCBhcm1zLCBidXQgdGhlIFJvbWFucyB3b3VsZCBiZSBsYXN0IHRvIGxheSB0aGVtIGRvd24uIFVwb24gcmVjZWl2aW5nIHRoaXMgYW5zd2VyLCBUdWxsdXMgY2FsbGVkIGEgZ2VuZXJhbCBhc3NlbWJseSBvZiBoaXMgcGVvcGxlLCBhbmQgYWZ0ZXIgdGhleSBoYWQgdm90ZWQgZm9yIHRoZSB3YXIsIGFkdmlzZWQgdGhlbSB0byBjYWxsIGluIE1hcmNpdXMsIGNoZXJpc2hpbmcgbm8gcmVzZW50bWVudCBhZ2FpbnN0IGhpbSwgYnV0IGZpcm1seSBjb252aW5jZWQgdGhhdCBoZSB3b3VsZCBiZSBtb3JlIGhlbHBmdWwgYXMgYW4gYWxseSB0aGFuIGhlIGhhZCBiZWVuIGluanVyaW91cyBhcyBhIGZvZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1hcmNpdXMgd2FzIHRoZXJlZm9yZSBjYWxsZWQgaW4sIGFuZCBoZWxkIGEgY29uZmVyZW5jZSB3aXRoIHRoZSBhc3NlbWJseTsgdGhleSBzYXcgZnJvbSBoaXMgc3BlZWNoIHRoYXQgaGUgd2FzIGFzIGVsb3F1ZW50IGFzIGhpcyBleHBsb2l0cyBpbiBhcm1zIGhhZCB0YXVnaHQgdGhlbSB0aGF0IGhlIHdhcyB3YXJsaWtlLCBhbmQgd2VyZSBjb252aW5jZWQgb2YgaGlzIHN1cnBhc3NpbmcgaW50ZWxsaWdlbmNlIGFuZCBkYXJpbmc7IHNvIHRoZXkgYXBwb2ludGVkIGhpbSBnZW5lcmFsIHdpdGggVHVsbHVzLCBhbmQgZ2F2ZSBoaW0gZnVsbCBwb3dlcnMgdG8gY29uZHVjdCB0aGUgd2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5GZWFyaW5nLCB0aGVuLCB0aGF0IHRoZSB0aW1lIG5lZWRlZCB0byBlcXVpcCBhbmQgbWFyc2hhbCB0aGUgVm9sc2NpYW5zIHdvdWxkIGJlIHNvIGxvbmcgYXMgdG8gcm9iIGhpbSBvZiBoaXMgYmVzdCBvcHBvcnR1bml0eSBmb3IgYWN0aW9uLCBoZSBsZWZ0IG9yZGVycyB3aXRoIHRoZSBtYWdpc3RyYXRlcyBhbmQgY2hpZWYgbWVuIG9mIHRoZSBjaXR5IHRvIGFzc2VtYmxlIGFuZCBwcm92aWRlIHRoZSByZW1haW5pbmcgZm9yY2VzIGFuZCBzdXBwbGllcyB0aGF0IHdlcmUgcmVxdWlzaXRlLCB3aGlsZSBoZSBoaW1zZWxmOyBhZnRlciBwZXJzdWFkaW5nIHRoZSBtb3N0IGFyZGVudCBzcGlyaXRzIHRvIG1hcmNoIGZvcnRoIGFzIHZvbHVudGVlcnMgd2l0aCBoaW0gYW5kIG5vdCBzdG9wIGZvciBmb3JtYWwgZW5yb2xtZW50LCBidXJzdCBpbnRvIHRoZSBSb21hbiB0ZXJyaXRvcnkgb2YgYSBzdWRkZW4sIHdoZW4gbm8gb25lIGV4cGVjdGVkIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Db25zZXF1ZW50bHkgaGUgc2VjdXJlZCBzdWNoIGFidW5kYW5jZSBvZiBib290eSB0aGF0IHRoZSBWb2xzY2lhbnMgaGFkIG1vcmUgdGhhbiB0aGV5IGNvdWxkIHBvc3NpYmx5IGRvIHRvIHVzZSBpdCBpbiB0aGVpciBjYW1wIG9yIGNhcnJ5IGl0IG9mZiBob21lLiBCdXQgdGhlIGFidW5kYW50IHN1cHBsaWVzIHNlY3VyZWQsIGFuZCB0aGUgZ3JlYXQgaW5qdXJ5IGFuZCBkYW1hZ2UgZG9uZSB0byB0aGUgZW5lbXkncyBjb3VudHJ5LCB3ZXJlLCBpbiBoaXMgZXllcywgdGhlIG1vc3QgaW5zaWduaWZpY2FudCByZXN1bHQgb2YgdGhhdCBleHBlZGl0aW9uOyBpdHMgY2hpZWYgcmVzdWx0LCBhbmQgaGlzIG1haW4gb2JqZWN0IGluIG1ha2luZyBpdCwgd2FzIHRvIGZ1cm5pc2ggdGhlIHBlb3BsZSBvZiBSb21lIHdpdGggZnJlc2ggY2hhcmdlcyBhZ2FpbnN0IHRoZSBwYXRyaWNpYW5zLiBGb3Igd2hpbGUgaGUgbWFsdHJlYXRlZCBhbmQgZGVzdHJveWVkIGV2ZXJ5dGhpbmcgZWxzZSwgaGUga2VwdCBhIHZpZ29yb3VzIHdhdGNoIG92ZXIgdGhlIGxhbmRzIG9mIHRoZSBwYXRyaWNpYW5zLCBhbmQgd291bGQgbm90IHN1ZmZlciBhbnlvbmUgdG8gaHVydCB0aGVtIG9yIHRha2UgYW55dGhpbmcgZnJvbSB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGxlZCB0byBzdGlsbCBmdXJ0aGVyIGFjY3VzYXRpb25zIGFuZCBicm9pbHMgYmV0d2VlbiB0aGUgcGFydGllcyBpbiB0aGUgY2l0eTsgdGhlIHBhdHJpY2lhbnMgYWNjdXNlZCB0aGUgcGVvcGxlIG9mIHVuanVzdGx5IGRyaXZpbmcgb3V0IGFuIGluZmx1ZW50aWFsIG1hbiwgYW5kIHRoZSBwZW9wbGUgY2hhcmdlZCB0aGUgcGF0cmljaWFucyB3aXRoIGJyaW5naW5nIE1hcmNpdXMgdXAgYWdhaW5zdCB0aGVtIGluIGEgc3Bpcml0IG9mIHJldmVuZ2UsIGFuZCB0aGVuIGVuam95aW5nIHRoZSBzcGVjdGFjbGUgb2Ygd2hhdCBvdGhlcnMgc3VmZmVyZWQgYnkgdGhlIHdhciwgd2hpbGUgdGhlIHdhciBpdHNlbGYgcHJvdGVjdGVkIHRoZWlyIG93biB3ZWFsdGggYW5kIHByb3BlcnR5IG91dHNpZGUgdGhlIGNpdHkuIEFmdGVyIE1hcmNpdXMgaGFkIGFjY29tcGxpc2hlZCBoaXMgcHVycG9zZXMsIGFuZCBncmVhdGx5IGhlbHBlZCB0aGUgVm9sc2NpYW5zIHRvd2FyZHMgY291cmFnZSBhbmQgc2Nvcm4gb2YgdGhlaXIgZW5lbWllcywgaGUgbGVkIGhpcyBmb3JjZXMgYmFjayBpbiBzYWZldHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlcmUgaXMgbm90aGluZyBvZiB0aGlzIHByZWxpbWluYXJ5IGZvcmF5IGluIExpdnkuIEl0IGlzIG9uIHRoZSBtYWluIGV4cGVkaXRpb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvci4gMjgiIHZhbGlkPSJ5ZXMiPihjaGFwLiB4eHZpaWkuKTwvYmlibD4gdGhhdCB0aGUgcGF0cmljaWFuIGxhbmRzIGFyZSBzcGFyZWQgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zOSIgdmFsaWQ9InllcyI+KGlpLiAzOSkuPC9iaWJsPiBBY2NvcmRpbmcgdG8gRGlvbnlzaXVzIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMTIiPih2aWlpLiAxMiksPC9iaWJsPiBUdWxsdXMgbGVkIG9uZSBkaXZpc2lvbiBpbnRvIHRoZSB0ZXJyaXRvcnkgb2YgdGhlIExhdGlucywgTWFyY2l1cyB0aGUgb3RoZXIgaW50byB0aGF0IG9mIFJvbWUsIGFuZCBib3RoIGJyb3VnaHQgYmFjayBlbm9ybW91cyBib290eS48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZW50aXJlIGZvcmNlIG9mIHRoZSBWb2xzY2lhbnMgd2FzIGFzc2VtYmxlZCB3aXRoIHNwZWVkIGFuZCBhbGFjcml0eSwgYW5kIHdhcyB0aGVuIHNlZW4gdG8gYmUgc28gbGFyZ2UgdGhhdCB0aGV5IGRldGVybWluZWQgdG8gbGVhdmUgYSBwYXJ0IG9mIGl0IGJlaGluZCBmb3IgdGhlIHNlY3VyaXR5IG9mIHRoZWlyIGNpdGllcywgYW5kIHdpdGggdGhlIG90aGVyIHBhcnQgdG8gbWFyY2ggYWdhaW5zdCB0aGUgUm9tYW5zLiBNb3Jlb3ZlciwgTWFyY2l1cyBsZWZ0IGl0IHRvIHRoZSBjaG9pY2Ugb2YgVHVsbHVzIHdoaWNoIG9mIHRoZSB0d28gZGl2aXNpb25zIGhlIHdvdWxkIGNvbW1hbmQuIFRoZW4gVHVsbHVzLCByZW1hcmtpbmcgdGhhdCBNYXJjaXVzIHdhcyBjbGVhcmx5IGluIG5vIHdpc2UgaW5mZXJpb3IgdG8gaGltc2VsZiBpbiB2YWxvdXIsIGFuZCBoYWQgZW5qb3llZCBhIGJldHRlciBmb3J0dW5lIGluIGFsbCBoaXMgYmF0dGxlcywgYmFkZSBoaW0gbGVhZCB0aGUgZGl2aXNpb24gdGhhdCB3YXMgdG8gdGFrZSB0aGUgZmllbGQsIGFuZCBoZSBoaW1zZWxmIHdvdWxkIHJlbWFpbiBiZWhpbmQgdG8gZ3VhcmQgdGhlIGNpdGllcyBhbmQgcHJvdmlkZSB3aGF0IHdhcyByZXF1aXNpdGUgZm9yIHRoZSBhcm15IGFicm9hZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC4xMyI+RGlvbnlzaXVzLCB2aWlpLiAxMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIGEgc3Ryb25nZXIgZm9yY2UgdGhhbiBiZWZvcmUsIHRoZW4sIE1hcmNpdXMgc2V0IG91dCBmaXJzdCBhZ2FpbnN0IENpcmNlaWksIGEgY2l0eSB3aGljaCB3YXMgYSBjb2xvbnkgb2YgUm9tZTsgdGhpcyBzdXJyZW5kZXJlZCB0byBoaW0gb2YgaXRzIG93biBhY2NvcmQsIGFuZCBoZSBkaWQgaXQgbm8gaGFybS4gTmV4dCwgaGUgbGFpZCB3YXN0ZSB0aGUgY291bnRyeSBvZiB0aGUgTGF0aW5zLCB3aGVyZSBoZSBleHBlY3RlZCB0aGF0IHRoZSBSb21hbnMgd291bGQgZW5nYWdlIGhpbSBpbiBkZWZlbmNlIG9mIHRoZSBMYXRpbnMsIHdobyB3ZXJlIHRoZWlyIGFsbGllcyBhbmQgYnkgZnJlcXVlbnQgbWVzc2VuZ2VycyB3ZXJlIGNhbGxpbmcgdXBvbiB0aGVtIGZvciBoZWxwLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGNvbW1vbnMgd2VyZSBpbmRpZmZlcmVudCB0byB0aGUgYXBwZWFsLCB0aGUgY29uc3VscyB3ZXJlIHVud2lsbGluZyB0byByaXNrIGEgY2FtcGFpZ24gZHVyaW5nIHRoZSBzaG9ydCB0aW1lIGxlZnQgb2YgdGhlaXIgdGVybSBvZiBvZmZpY2UsIGFuZCB0aGVyZWZvcmUgdGhlIExhdGluIGVudm95cyB3ZXJlIGRpc21pc3NlZC4gVW5kZXIgdGhlc2UgY2lyY3Vtc3RhbmNlcyBNYXJjaXVzIGxlZCBoaXMgZm9yY2VzIGFnYWluc3QgdGhlaXIgY2l0aWVzLCBhbmQgdGFraW5nIGJ5IGFzc2F1bHQgdGhvc2Ugd2hpY2ggb2ZmZXJlZCByZXNpc3RhbmNlIHRvIGhpbSwgbmFtZWx5LCBUb2xlcml1bSwgTGF2aWN1bSwgUGVkdW0sIGFuZCBsYXRlciBCb2xhLCBoZSBtYWRlIHNsYXZlcyBvZiB0aGUgaW5oYWJpdGFudHMgYW5kIHBsdW5kZXJlZCB0aGVpciBwcm9wZXJ0eS4gQnV0IGZvciB0aG9zZSB3aG8gY2FtZSBvdmVyIHRvIGhpbSBvZiB0aGVpciBvd24gYWNjb3JkIGhlIHNob3dlZCBtdWNoIGNvbmNlcm4sIGFuZCB0aGF0IHRoZXkgbWlnaHQgc3VmZmVyIG5vIGhhcm0sIGV2ZW4gYWdhaW5zdCBoaXMgd2lzaGVzLCBoZSBlbmNhbXBlZCBhcyBmYXIgYXMgaGUgY291bGQgZnJvbSB0aGVtLCBhbmQgaGVsZCBhbG9vZiBmcm9tIHRoZWlyIHRlcnJpdG9yeS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBoZSBoYWQgdGFrZW4gQm9sYSwgYSBjaXR5IG5vdCBtb3JlIHRoYW4gdHdlbHZlIG1pbGVzIGF3YXkgZnJvbSBSb21lLCB3aGVyZSBoZSBnb3QgbXVjaCB0cmVhc3VyZSBhbmQgcHV0IGFsbW9zdCBhbGwgdGhlIGFkdWx0cyB0byB0aGUgc3dvcmQ7IGFuZCBhZnRlciB0aGUgVm9sc2NpYW5zIGV2ZW4gd2hvIGhhZCBiZWVuIG9yZGVyZWQgdG8gcmVtYWluIGluIHRoZWlyIGNpdGllcyBncmV3IGltcGF0aWVudCwgYW5kIGNhbWUgdHJvb3BpbmcgaW4gYXJtcyB0byBNYXJjaXVzLCBkZWNsYXJpbmcgdGhhdCBoZSB3YXMgdGhlIHNvbGUgYW5kIG9ubHkgZ2VuZXJhbCB3aG9tIHRoZXkgd291bGQgcmVjb2duaXplIGFzIHRoZWlyIGxlYWRlciwgdGhlbiBoaXMgbmFtZSB3YXMgZ3JlYXQgdGhyb3VnaG91dCBhbGwgSXRhbHksIGFuZCBtZW4gdGhvdWdodCB3aXRoIGFtYXplbWVudCBob3cgdGhlIHZhbG91ciBvZiBhIHNpbmdsZSBtYW4sIHVwb24gaGlzIGNoYW5naW5nIHNpZGVzLCBoYWQgZWZmZWN0ZWQgc3VjaCBhIG1hcnZlbGxvdXMgdHVybiBpbiBhZmZhaXJzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgUm9tZSwgaG93ZXZlciwgYWxsIHdhcyBkaXNvcmRlcjsgaXRzIGNpdGl6ZW5zIHJlZnVzZWQgdG8gZmlnaHQsIGFuZCBzcGVudCB0aGVpciB3aG9sZSB0aW1lIGluIGNhYmFscyBhbmQgZmFjdGlvdXMgZGlzcHV0ZXMgd2l0aCBvbmUgYW5vdGhlciwgdW50aWwgdGlkaW5ncyBjYW1lIHRoYXQgdGhlIGVuZW15IGhhZCBsYWlkIGNsb3NlIHNpZWdlIHRvIExhdmluaXVtLCB3aGVyZSB0aGUgc2FjcmVkIHN5bWJvbHMgb2YgdGhlIGFuY2VzdHJhbCBnb2RzIG9mIHRoZSBSb21hbnMgd2VyZSBzdG9yZWQgdXAsIGFuZCBmcm9tIHdoaWNoIHRoZWlyIG5hdGlvbiB0b29rIGl0cyBvcmlnaW4sIHNpbmNlIHRoYXQgd2FzIHRoZSBmaXJzdCBjaXR5IHdoaWNoIEFlbmVhcyBmb3VuZGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHByb2R1Y2VkIGFuIGFzdG9uaXNoaW5nIGFuZCB1bml2ZXJzYWwgY2hhbmdlIG9mIG9waW5pb24gaW4gdGhlIGNvbW1vbnMsIGFzIHdlbGwgYXMgb25lIHdoaWNoIHdhcyBhbHRvZ2V0aGVyIHN0cmFuZ2UgYW5kIHVuZXhwZWN0ZWQgaW4gdGhlIHBhdHJpY2lhbnMuIEZvciB0aGUgY29tbW9ucyB3ZXJlIGVhZ2VyIHRvIHJlcGVhbCB0aGUgc2VudGVuY2UgYWdhaW5zdCBNYXJjaXVzIGFuZCBpbnZpdGUgaGltIGJhY2sgdG8gdGhlIGNpdHk7IHdoZXJlYXMgdGhlIHNlbmF0ZSwgb24gYXNzZW1ibGluZyBhbmQgY29uc2lkZXJpbmcgdGhlIHByb3Bvc2l0aW9uLCByZWplY3RlZCBhbmQgdmV0b2VkIGl0OyBlaXRoZXIgYmVjYXVzZSB0aGV5IHdlcmUgYW5ncmlseSBiZW50IG9uIG9wcG9zaW5nIGFsbCB0aGUgcGVvcGxlJ3MgZGVzaXJlczsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+b3IgZWxzZSBiZWNhdXNlIHRoZXkgd2VyZSB1bndpbGxpbmcgdGhhdCBNYXJjaXVzIHNob3VsZCBvd2UgaGlzIHJlc3RvcmF0aW9uIHRvIHRoZSBraW5kbmVzcyBvZiB0aGUgcGVvcGxlOyBvciBiZWNhdXNlIHRoZXkgd2VyZSBub3cgYW5ncnkgYXQgTWFyY2l1cyBoaW1zZWxmOyBzZWVpbmcgdGhhdCBoZSB3YXMgaW5qdXJpbmcgYWxsIGFsaWtlLCBhbHRob3VnaCBoZSBoYWQgbm90IGJlZW4gaWxsLXRyZWF0ZWQgYnkgYWxsLCBhbmQgc2hvd2VkIGhpbXNlbGYgYW4gZW5lbXkgb2YgaGlzIHdob2xlIGNvdW50cnksIGFsdGhvdWdoIGhlIGtuZXcgdGhhdCB0aGUgbW9zdCBpbmZsdWVudGlhbCBhbmQgcG93ZXJmdWwgbWVuIGluIGl0IHN5bXBhdGhpc2VkIHdpdGggaGltIGFuZCBzaGFyZWQgaW4gaGlzIHdyb25ncy4gV2hlbiB0aGlzIGRlY2lzaW9uIG9mIHRoZSBzZW5hdGUgd2FzIG1hZGUgcHVibGljLCB0aGUgcGVvcGxlIHdhcyBwb3dlcmxlc3M7IGl0IGNvdWxkIG5vdCBieSBpdHMgdm90ZSBlbmFjdCBhIGxhdywgd2l0aG91dCBhIHByZXZpb3VzIGRlY3JlZSBvZiB0aGUgc2VuYXRlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE1hcmNpdXMsIHdoZW4gaGUgaGVhcmQgb2YgaXQsIHdhcyB5ZXQgbW9yZSBleGFzcGVyYXRlZCwgYW5kIHJhaXNpbmcgdGhlIHNpZWdlIG9mIExhdmluaXVtLCBtYXJjaGVkIGFnYWluc3QgUm9tZSBpbiB3cmF0aCwgYW5kIGVuY2FtcGVkIGF0IHRoZSBzby1jYWxsZWQgRm9zc2FlIENsdWlsaWFlLCBvbmx5IGZpdmUgbWlsZXMgZGlzdGFudCBmcm9tIHRoZSBjaXR5LiBBbHRob3VnaCB0aGUgc2lnaHQgb2YgaGltIHByb2R1Y2VkIHRlcnJvciBhbmQgZ3JlYXQgY29uZnVzaW9uIHRoZXJlLCBzdGlsbCwgaXQgcHV0IGEgc3RvcCBmb3IgdGhlIHByZXNlbnQgdG8gdGhlaXIgZGlzc2Vuc2lvbnM7IGZvciBubyBvbmUgbG9uZ2VyLCB3aGV0aGVyIGNvbnN1bCBvciBzZW5hdG9yLCBkYXJlZCB0byBvcHBvc2UgdGhlIHBlb3BsZSBpbiB0aGUgbWF0dGVyIG9mIHJlc3RvcmluZyBNYXJjaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgY29udHJhcnksIHdoZW4gdGhleSBzYXcgdGhlIHdvbWVuIHJ1bm5pbmcgZnJhbnRpYyBpbiB0aGUgY2l0eSwgYW5kIHRoZSBhZ2VkIG1lbiByZXNvcnRpbmcgdG8gdGhlIHNhY3JlZCBzaHJpbmVzIHdpdGggc3VwcGxpYW50IHRlYXJzIGFuZCBwcmF5ZXJzLCBhbmQgZXZlcnl3aGVyZSBhbiB1dHRlciBsYWNrIG9mIGNvdXJhZ2UgYW5kIHNhdmluZyBjb3Vuc2VscywgdGhlbiBhbGwgYWdyZWVkIHRoYXQgdGhlIHBlb3BsZSBoYWQgZG9uZSB3ZWxsIHRvIHNlZWsgYSByZWNvbmNpbGlhdGlvbiB3aXRoIE1hcmNpdXMsIGJ1dCB0aGF0IHRoZSBzZW5hdGUgaGFkIG1hZGUgYSB0b3RhbCBtaXN0YWtlIGluIGJlZ2lubmluZyB0aGVuIHRvIGluZHVsZ2UgaXRzIHdyYXRoIGFuZCByZXZlbmdlZnVsIHNwaXJpdCwgd2hlbiBpdCBoYWQgYmVlbiB3ZWxsIHRvIGxheSBzdWNoIGZlZWxpbmdzIGFzaWRlLiBJdCB3YXMsIHRoZXJlZm9yZSwgdW5hbmltb3VzbHkgZGVjaWRlZCB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIE1hcmNpdXMsIG9mZmVyaW5nIGhpbSB0aGUgcHJpdmlsZWdlIG9mIHJldHVybmluZyB0byBoaXMgY291bnRyeSwgYW5kIGJlZ2dpbmcgaGltIHRvIHN0b3AgaGlzIHdhciB1cG9uIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgbWVzc2VuZ2VycyBmcm9tIHRoZSBzZW5hdGUgd2VyZSBraW5zbWVuIGFuZCBmcmllbmRzIG9mIE1hcmNpdXMsIGFuZCBleHBlY3RlZCB0byBiZSB0cmVhdGVkIHdpdGggZ3JlYXQgZnJpZW5kbGluZXNzIGluIHRoZWlyIGZpcnN0IGludGVydmlldyB3aXRoIGEgbWFuIHdobyB3YXMgYSByZWxhdGl2ZSBhbmQgYXNzb2NpYXRlIG9mIHRoZWlycy4gQnV0IG1hdHRlcnMgdHVybmVkIG91dCBxdWl0ZSBvdGhlcndpc2U7IGZvciBhZnRlciBiZWluZyBsZWQgdGhyb3VnaCB0aGUgY2FtcCBvZiB0aGUgZW5lbXksIHRoZXkgZm91bmQgaGltIHNlYXRlZCBpbiBncmVhdCBzdGF0ZSwgYW5kIGxvb2tpbmcgaW5zdWZmZXJhYmx5IHN0ZXJuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TdXJyb3VuZGVkIGJ5IHRoZSBjaGllZiBtZW4gb2YgdGhlIFZvbHNjaWFucywgaGUgYmFkZSB0aGUgUm9tYW5zIGRlY2xhcmUgdGhlaXIgd2lzaGVzLiBUaGV5IGRpZCBzbywgaW4gcmVhc29uYWJsZSBhbmQgY29uc2lkZXJhdGUgbGFuZ3VhZ2UsIGFuZCB3aXRoIGEgbWFubmVyIHN1aXRhYmxlIHRvIHRoZWlyIHBvc2l0aW9uLCBhbmQgd2hlbiB0aGV5IGhhZCBjZWFzZWQsIGhlIG1hZGUgYW4gYW5zd2VyIHdoaWNoLCBzbyBmYXIgYXMgaXQgY29uY2VybmVkIGhpbXNlbGY7IHdhcyBmdWxsIG9mIGJpdHRlcm5lc3MgYW5kIGFuZ2VyIGF0IHRoZWlyIHRyZWF0bWVudCBvZiBoaW0sIGFuZCBpbiBiZWhhbGYgb2YgdGhlIFZvbHNjaWFucywgYXMgdGhlaXIgZ2VuZXJhbCwgaGUgb3JkZXJlZCB0aGUgcmVzdGl0dXRpb24gb2YgdGhlIGNpdGllcyBhbmQgdGVycml0b3J5IHdoaWNoIGhhZCBiZWVuIHRvcm4gZnJvbSB0aGVtIGluIHdhciwgYW5kIHRoZSBwYXNzYWdlIG9mIGEgZGVjcmVlIGdyYW50aW5nIHRoZSBWb2xzY2lhbnMsIGFzIGFsbGllcywgZXF1YWwgY2l2aWMgcmlnaHRzLCBhcyBoYWQgYmVlbiBkb25lIGZvciB0aGUgTGF0aW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm8gcmVzcGl0ZSBmcm9tIHRoZSB3YXIgd291bGQgYmUgc2VjdXJlIGFuZCBsYXN0aW5nLCBoZSBzYWlkLCBleGNlcHQgaXQgYmUgYmFzZWQgb24ganVzdCBhbmQgZXF1YWwgcmlnaHRzLiBNb3Jlb3ZlciwgaGUgZ2F2ZSB0aGVtIHRoaXJ0eSBkYXlzIGZvciBkZWxpYmVyYXRpb24sIGFuZCB3aGVuIHRoZSBhbWJhc3NhZG9ycyB3ZXJlIGdvbmUsIGhlIGltbWVkaWF0ZWx5IHdpdGhkcmV3IGhpcyBmb3JjZXMgZnJvbSB0aGUgY291bnRyeS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVyZSBpcyBub3RoaW5nIG9mIHRoaXMgd2l0aGRyYXdhbCBvZiBmb3JjZXMgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zOSIgdmFsaWQ9InllcyI+TGl2eSAoaWkuIDM5KS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBmaXJzdCBncm91bmQgb2YgY29tcGxhaW50IGFnYWluc3QgaGltIHdoaWNoIHdhcyBsYWlkIGhvbGQgb2YgYnkgdGhvc2Ugb2YgdGhlIFZvbHNjaWFucyB3aG8gaGFkIGxvbmcgYmVlbiBqZWFsb3VzIG9mIGhpbSwgYW5kIHVuZWFzeSBhdCB0aGUgaW5mbHVlbmNlIHdoaWNoIGhlIGhhZCBhY3F1aXJlZC4gQW1vbmcgdGhlc2Ugd2FzIFR1bGx1cyBhbHNvLCBub3QgYmVjYXVzZSBoZSBoYWQgYmVlbiBwZXJzb25hbGx5IHdyb25nZWQgYXQgYWxsIGJ5IE1hcmNpdXMsIGJ1dCBiZWNhdXNlIGhlIHdhcyBvbmx5IHRvbyBodW1hbi4gRm9yIGhlIHdhcyB2ZXhlZCB0byBmaW5kIGhpcyByZXB1dGF0aW9uIHdob2xseSBvYnNjdXJlZCBhbmQgaGltc2VsZiBuZWdsZWN0ZWQgYnkgdGhlIFZvbHNjaWFucywgd2hvIHRob3VnaHQgdGhhdCBNYXJjaXVzIGFsb25lIHdhcyBldmVyeXRoaW5nIHRvIHRoZW0sIGFuZCB0aGF0IHRoZWlyIG90aGVyIGxlYWRlcnMgc2hvdWxkIGJlIGNvbnRlbnQgd2l0aCB3aGF0ZXZlciBzaGFyZSBvZiBpbmZsdWVuY2UgYW5kIGF1dGhvcml0eSBoZSBtaWdodCBiZXN0b3cgdXBvbiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgcmVhc29uIHdoeSB0aGUgZmlyc3Qgc2VlZHMgb2YgZGVudW5jaWF0aW9uIHdlcmUgc293biBpbiBzZWNyZXQsIGFuZCBub3csIGJhbmRpbmcgdG9nZXRoZXIsIHRoZSBtYWxjb250ZW50cyBzaGFyZWQgdGhlaXIgcmVzZW50bWVudCB3aXRoIG9uZSBhbm90aGVyLCBhbmQgY2FsbGVkIHRoZSB3aXRoZHJhd2FsIG9mIE1hcmNpdXMgYSBiZXRyYXlhbCwgbm90IHNvIG11Y2ggb2YgY2l0aWVzIGFuZCBhcm1pZXMsIGFzIG9mIGdvbGRlbiBvcHBvcnR1bml0aWVzLCB3aGljaCBwcm92ZSB0aGUgc2FsdmF0aW9uIG9yIHRoZSBsb3NzIG9mIHRoZXNlIGFzIHdlbGwgYXMgb2YgZXZlcnl0aGluZyBlbHNlOyBmb3IgaGUgaGFkIGdyYW50ZWQgYSByZXNwaXRlIG9mIHRoaXJ0eSBkYXlzIGZyb20gd2FyLCBhbHRob3VnaCBpbiB3YXIgdGhlIGdyZWF0ZXN0IGNoYW5nZXMgbWlnaHQgb2NjdXIgaW4gbXVjaCBsZXNzIHRpbWUgdGhhbiB0aGlzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBNYXJjaXVzIGRpZCBub3Qgc3BlbmQgdGhpcyB0aW1lIGluIGlkbGVuZXNzLCBidXQgZmVsbCB1cG9uIHRoZSBlbmVteSdzIGFsbGllcywgaGFyYXNzZWQgYW5kIHJhdmFnZWQgdGhlaXIgdGVycml0b3JpZXMsIGFuZCBjYXB0dXJlZCBzZXZlbiBvZiB0aGVpciBsYXJnZSBhbmQgcG9wdWxvdXMgY2l0aWVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjM2Ij5EaW9ueXNpdXMsIHZpaWkuIDM2LjwvYmlibD4gQ2hhcHRlcnMgeHh2aWlpLi14eHguIGluIFBsdXRhcmNoIGFncmVlIGNsb3NlbHkgd2l0aCBEaW9ueXNpdXMgdmlpaS4gMTQtMzUuPC9ub3RlPiBBbmQgdGhlIFJvbWFucyBkaWQgbm90IHZlbnR1cmUgdG8gY29tZSB0byB0aGVpciBhaWQsIGJ1dCB0aGVpciBzcGlyaXRzIHdlcmUgZnVsbCBvZiBoZXNpdGF0aW9uLCBhbmQgdGhlaXIgYXR0aXR1ZGUgdG93YXJkIHRoZSB3YXIgd2FzIHRoYXQgb2YgbWVuIHdobyBhcmUgY29tcGxldGVseSBiZW51bWJlZCBhbmQgcGFyYWx5emVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiB0aGUgdGltZSBoYWQgcGFzc2VkLCBhbmQgTWFyY2l1cyB3YXMgYXQgaGFuZCBhZ2FpbiB3aXRoIGhpcyBlbnRpcmUgZm9yY2UsIHRoZXkgc2VudCBvdXQgYW5vdGhlciBlbWJhc3N5IHRvIGVudHJlYXQgaGltIHRvIG1vZGVyYXRlIGhpcyB3cmF0aCwgd2l0aGRyYXcgdGhlIFZvbHNjaWFuIGFybXkgZnJvbSB0aGUgY291bnRyeSwgYW5kIHRoZW4gbWFrZSBzdWNoIHByb3Bvc2FscyBhbmQgc2V0dGxlbWVudHMgYXMgaGUgdGhvdWdodCBiZXN0IGZvciBib3RoIG5hdGlvbnM7IGZvciB0aGUgUm9tYW5zIHdvdWxkIG1ha2Ugbm8gY29uY2Vzc2lvbnMgdGhyb3VnaCBmZWFyLCBidXQgaWYgaGUgdGhvdWdodCB0aGF0IHRoZSBWb2xzY2lhbnMgb3VnaHQgdG8gb2J0YWluIGNlcnRhaW4gZmF2b3VycywgYWxsIHN1Y2ggd291bGQgYmUgZ3JhbnRlZCB0aGVtIGlmIHRoZXkgbGFpZCBkb3duIHRoZWlyIGFybXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hcmNpdXMgcmVwbGllZCB0aGF0LCBhcyBnZW5lcmFsIG9mIHRoZSBWb2xzY2lhbnMsIGhlIHdvdWxkIG1ha2Ugbm8gYW5zd2VyIHRvIHRoaXMsIGJ1dCBhcyBvbmUgd2hvIHdhcyBzdGlsbCBhIGNpdGl6ZW4gb2YgUm9tZSwgaGUgYWR2aXNlZCBhbmQgZXhob3J0ZWQgdGhlbSB0byBhZG9wdCBtb3JlIG1vZGVyYXRlIHZpZXdzIG9mIHdoYXQganVzdGljZSByZXF1aXJlZCwgYW5kIGNvbWUgdG8gaGltIGluIHRocmVlIGRheXMgd2l0aCBhIHJhdGlmaWNhdGlvbiBvZiBoaXMgcHJldmlvdXMgZGVtYW5kczsgYnV0IGlmIHRoZXkgc2hvdWxkIGRlY2lkZSBvdGhlcndpc2UsIHRoZXkgbXVzdCBrbm93IHdlbGwgdGhhdCBpdCB3YXMgbm90IHNhZmUgZm9yIHRoZW0gdG8gY29tZSB3YWxraW5nIGludG8gaGlzIGNhbXAgYWdhaW4gd2l0aCBlbXB0eSBwaHJhc2VzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgZW1iYXNzeSBoYWQgcmV0dXJuZWQgYW5kIHRoZSBzZW5hdGUgaGFkIGhlYXJkIGl0cyByZXBvcnQsIGl0IHdhcyBmZWx0IHRoYXQgdGhlIGNpdHkgd2FzIHRvc3Npbmcgb24gdGhlIGJpbGxvd3Mgb2YgYSBncmVhdCB0ZW1wZXN0LCBhbmQgdGhlcmVmb3JlIHRoZSBsYXN0IGFuZCBzYWNyZWQgYW5jaG9yIHdhcyBsZXQgZG93bi4gQSBkZWNyZWUgd2FzIHBhc3NlZCB0aGF0IGFsbCB0aGUgcHJpZXN0cyBvZiB0aGUgZ29kcywgYW5kIHRoZSBjZWxlYnJhbnRzIG9yIGN1c3RvZGlhbnMgb2YgdGhlIG15c3RlcmllcywgYW5kIHRob3NlIHdobyBwcmFjdGlzZWQgdGhlIGFuY2llbnQgYW5kIGFuY2VzdHJhbCBhcnQgb2YgZGl2aW5hdGlvbiBmcm9tIHRoZSBmbGlnaHQgb2YgYmlyZHMs4oCUdGhhdCBhbGwgdGhlc2Ugc2hvdWxkIGdvIHRvIE1hcmNpdXMsIGFycmF5ZWQgYXMgd2FzIHRoZSBjdXN0b20gb2YgZWFjaCBpbiB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlaXIgc2FjcmVkIHJpdGVzLCBhbmQgc2hvdWxkIHVyZ2UgaGltIGluIHRoZSBzYW1lIG1hbm5lciBhcyBiZWZvcmUgdG8gcHV0IGEgc3RvcCB0byB0aGUgd2FyLCBhbmQgdGhlbiB0byBjb25mZXIgd2l0aCBoaXMgZmVsbG93LWNpdGl6ZW5zIHJlZ2FyZGluZyB0aGUgVm9sc2NpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBkaWQsIGluZGVlZCwgYWRtaXQgdGhpcyBlbWJhc3N5IGludG8gaGlzIGNhbXAsIGJ1dCBtYWRlIG5vIG90aGVyIGNvbmNlc3Npb24sIG5vciBkaWQgaGUgYWN0IG9yIHNwZWFrIG1vcmUgbWlsZGx5LCBidXQgdG9sZCB0aGVtIHRvIG1ha2UgYSBzZXR0bGVtZW50IG9uIGhpcyBmb3JtZXIgdGVybXMsIG9yIGVsc2UgYWNjZXB0IHRoZSB3YXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzkuMTIiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzOSwgMTI7PC9iaWJsPiAKICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC4zOCI+RGlvbnlzaXVzLCB2aWlpLiAzOC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQWNjb3JkaW5nbHksIHdoZW4gdGhlIHByaWVzdHMgaGFkIHJldHVybmVkLCBpdCB3YXMgZGVjaWRlZCB0byByZW1haW4gcXVpZXRseSBpbiB0aGUgY2l0eSwgZ3VhcmRpbmcgaXRzIHdhbGxzLCBhbmQgcmVwdWxzaW5nIHRoZSBlbmVteSwgc2hvdWxkIGhlIG1ha2UgYW4gYXR0YWNrLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHB1dCB0aGVpciBob3BlcyBpbiB0aW1lIGVzcGVjaWFsbHksIGFuZCBpbiB0aGUgdmljaXNzaXR1ZGVzIG9mIGZvcnR1bmUsIHNpbmNlIHRoZXkga25ldyBub3QgaG93IHRvIHNhdmUgdGhlbXNlbHZlcyBieSB0aGVpciBvd24gZWZmb3J0cywgYnV0IHR1cm1vaWwsIHRlcnJvciwgYW5kIHJ1bW91cnMgb2YgZXZpbCBwb3NzZXNzZWQgdGhlIGNpdHkuIEF0IGxhc3Qgc29tZXRoaW5nIGhhcHBlbmVkIHRoYXQgd2FzIGxpa2Ugd2hhdCBIb21lciBvZnRlbiBtZW50aW9ucywgYWx0aG91Z2ggcGVvcGxlIGdlbmVyYWxseSBkbyBub3Qgd2hvbGx5IGJlbGlldmUgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHNvbWUgZ3JlYXQgYW5kIHVudXN1YWwgZGVlZCBpcyB0byBiZSBkb25lLCB0aGF0IHBvZXQgZGVjbGFyZXMgaW4gaGlzIHN0YXRlbHkgbWFubmVyOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5IZSB0aGVuIHdhcyBpbnNwaXJlZCBieSB0aGUgZ29kZGVzcywgZmxhc2hpbmctZXllZCBBdGhlbmU7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxOC4xNTgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+T2R5c3NleTwvdGl0bGU+LCB4dmlpaS4gMTU4PC9iaWJsPiA9IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAyMS4xIiB2YWxpZD0ieWVzIj54eGkuIGkuPC9iaWJsPiAoPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPs+E4b+HIM604oCZIOG8hM+BzrE8L2ZvcmVpZ24+KS48L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4gCgkJCQlhbmQgYWdhaW464oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkJ1dCBzb21lIGltbW9ydGFsIHR1cm5lZCBoaXMgbWluZCBieSBsb2RnaW5nIGluIGhpcyBoZWFydCA8L2w+CgkJCQkJICAgICAgICAgIDxsPkEgZmVhciBvZiB3aGF0IHRoZSBmb2xrIHdvdWxkIHNheTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Ob3QgdG8gYmUgZm91bmQgbm93IGluIEhvbWVyLjwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPiAKCQkJCWFuZCBhZ2FpbjrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+RWl0aGVyIHRocm91Z2ggc29tZSBzdXNwaWNpb24sIG9yIGVsc2UgYSBnb2Qgc28gYmFkZSBoaW0gZG87PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA5LjMzOSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT5PZHlzc2V5PC90aXRsZT4sIGl4LiAzMzkuPC9iaWJsPgogICAgICAgICAgICAgICAgICA8L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCWJ1dCBwZW9wbGUgZGVzcGlzZSBIb21lciBhbmQgc2F5IHRoYXQgd2l0aCBoaXMgaW1wb3NzaWJsZSBleHBsb2l0cyBhbmQgaW5jcmVkaWJsZSB0YWxlcyBoZSBtYWtlcyBpdCBpbXBvc3NpYmxlIHRvIGJlbGlldmUgaW4gZXZlcnkgbWFuJ3MgcG93ZXIgdG8gZGV0ZXJtaW5lIGhpcyBvd24gY2hvaWNlIG9mIGFjdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcywgaG93ZXZlciwgaXMgbm90IHdoYXQgSG9tZXIgZG9lcywgYnV0IHRob3NlIGFjdHMgd2hpY2ggYXJlIG5hdHVyYWwsIGN1c3RvbWFyeSwgYW5kIHRoZSByZXN1bHQgb2YgcmVhc29uaW5nLCBoZSBhdHRyaWJ1dGVzIHRvIG91ciBvd24gdm9saXRpb24sIGFuZCBoZSBjZXJ0YWlubHkgc2F5cyBmcmVxdWVudGx5OuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5CdXQgSSBmb3JtZWQgYSBwbGFuIHdpdGhpbiBteSBsb3JkbHkgaGVhcnQ7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA5LjI5OSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT5PZHlzc2V5PC90aXRsZT4sIGl4LiAyOTkuPC9iaWJsPgogICAgICAgICAgICAgICAgICA8L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCWFuZCBhbHNvOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5TbyBoZSBzcGFrZSwgYW5kIFBlbGV1cycgc29uIHdhcyBzb3JlIGRpc3RyZXNzZWQsIGFuZCBoaXMgaGVhcnQgPC9sPgoJCQkJCSAgICAgICAgICA8bD5XaXRoaW4gaGlzIHNoYWdneSBicmVhc3QgYmV0d2VlbiB0d28gY291cnNlcyB3YXMgZGl2aWRlZDs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDEuMTg4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPklsaWFkPC90aXRsZT4sIGkuIDE4OCBmLjwvYmlibD4KICAgICAgICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICAgICAgICA8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlhbmQgYWdhaW464oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkJ1dCBoaW0gbm8gd2hpdCA8L2w+CgkJCQkJICAgICAgICAgIDxsPkNvdWxkIHNoZSBwZXJzdWFkZSBmcm9tIGhpcyBpbnRlZ3JpdHksIHRoZSBmaWVyeSBoZWFydGVkIEJlbGxlcm9waG9uOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gNi4xNjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgdmkuIDE2MSBmLjwvYmlibD4KICAgICAgICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICAgICAgICA8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCXdoaWxlIGluIGV4cGxvaXRzIG9mIGEgc3RyYW5nZSBhbmQgZXh0cmFvcmRpbmFyeSBuYXR1cmUsIHJlcXVpcmluZyBzb21lIHJ1c2ggb2YgaW5zcGlyYXRpb24sIGFuZCBkZXNwZXJhdGUgY291cmFnZSwgaGUgZG9lcyBub3QgcmVwcmVzZW50IHRoZSBnb2QgYXMgdGFraW5nIGEgd2F5LCBidXQgYXMgcHJvbXB0aW5nLCBhIG1hbidzIGNob2ljZSBvZiBhY3Rpb247IG5vciB5ZXQgYXMgY3JlYXRpbmcgaW1wdWxzZXMgaW4gYSBtYW4sIGJ1dCByYXRoZXIgY29uY2VwdGlvbnMgd2hpY2ggbGVhZCB0byBpbXB1bHNlcywgYW5kIGJ5IHRoZXNlIGhpcyBhY3Rpb24gaXMgbm90IG1hZGUgaW52b2x1bnRhcnksIGJ1dCBoaXMgd2lsbCBpcyBzZXQgaW4gbW90aW9uLCB3aGlsZSBjb3VyYWdlIGFuZCBob3BlIGFyZSBhZGRlZCB0byBzdXN0YWluIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGVpdGhlciB0aGUgaW5mbHVlbmNlIG9mIHRoZSBnb2RzIG11c3QgYmUgd2hvbGx5IGV4Y2x1ZGVkIGZyb20gYWxsIGluaXRpYXRpbmcgcG93ZXIgb3ZlciBvdXIgYWN0aW9ucywgb3IgaW4gd2hhdCBvdGhlciB3YXkgY2FuIHRoZXkgYXNzaXN0IGFuZCBjby1vcGVyYXRlIHdpdGggbWVuPyBUaGV5IGNlcnRhaW5seSBkbyBub3QgbW91bGQgb3VyIGJvZGllcyBieSB0aGVpciBkaXJlY3QgYWdlbmN5LCBub3IgZ2l2ZSB0aGUgcmVxdWlzaXRlIGNoYW5nZSB0byB0aGUgYWN0aW9uIG9mIG91ciBoYW5kcyBhbmQgZmVldCwgYnV0IHJhdGhlciwgYnkgY2VydGFpbiBtb3RpdmVzLCBjb25jZXB0aW9ucywgYW5kIHB1cnBvc2VzLCB0aGV5IHJvdXNlIHRoZSBhY3RpdmUgYW5kIGVsZWN0aXZlIHBvd2VycyBvZiBvdXIgc3Bpcml0cywgb3IsIG9uIHRoZSBvdGhlciBoYW5kLCBkaXZlcnQgYW5kIGNoZWNrIHRoZW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaW4gUm9tZSwgYXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhaywgdmFyaW91cyBncm91cHMgb2Ygd29tZW4gdmlzaXRlZCB0aGUgdmFyaW91cyB0ZW1wbGVzLCBidXQgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGVtLCBhbmQgdGhvc2Ugb2YgaGlnaGVzdCBzdGF0aW9uLCBjYXJyaWVkIHRoZWlyIHN1cHBsaWNhdGlvbnMgdG8gdGhlIGFsdGFyIG9mIEp1cGl0ZXIgQ2FwaXRvbGludXMuIEFtb25nIHRoZXNlIHdhcyBWYWxlcmlhLCBhIHNpc3RlciBvZiB0aGF0IFB1YmxpY29sYSB3aG8gaGFkIGRvbmUgdGhlIFJvbWFucyBzbyBtYW55IGVtaW5lbnQgc2VydmljZXMgYm90aCBhcyB3YXJyaW9yIGFuZCBzdGF0ZXNtYW4uIFB1YmxpY29sYSwgaW5kZWVkLCBoYWQgZGllZCBzb21lIHRpbWUgYmVmb3JlLCBhcyBJIGhhdmUgcmVsYXRlZCBpbiBoaXMgTGlmZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMjMiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeHhpaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ1dCAgVmFsZXJpYSB3YXMgc3RpbGwgZW5qb3lpbmcgaGVyIHJlcHV0ZSBhbmQgaG9ub3VyIGluIHRoZSBjaXR5LCB3aGVyZSBoZXIgbGlmZSB3YXMgdGhvdWdodCB0byBhZG9ybiBoZXIgbGluZWFnZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3b21hbiwgdGhlbiwgc3VkZGVubHkgc2VpemVkIHdpdGggb25lIG9mIHRob3NlIGZlZWxpbmdzIHdoaWNoIEkgaGF2ZSBiZWVuIGRlc2NyaWJpbmcsIGFuZCBsYXlpbmcgaG9sZCBvZiB0aGUgcmlnaHQgZXhwZWRpZW50IHdpdGggYSBwdXJwb3NlIG5vdCB1bmluc3BpcmVkIG9mIGhlYXZlbiwgcm9zZSB1cCBoZXJzZWxmOyBiYWRlIHRoZSBvdGhlciB3b21lbiBhbGwgcmlzZSwgYW5kIGNhbWUgd2l0aCB0aGVtIHRvIHRoZSBob3VzZSBvZiBWb2x1bW5pYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlbiB0aGUgbWF0cm9ucyBjYW1lIGluIGEgYm9keSB0byBWZXR1cmlhLCB0aGUgbW90aGVyIG9mIENvcmlvbGFudXMsIGFuZCBWb2x1bW5pYSwgaGlzIHdpZmUuIFdoZXRoZXIgdGhpcyB3YXMgdGhlIHJlc3VsdCBvZiBwdWJsaWMgY291bnNlbCwgb3Igb2YgdGhlIHdvbWVuJ3MgZmVhciwgSSBjYW5ub3QgYXNjZXJ0YWluLjwvcT7igJQ8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA0MCwgMS48L2JpYmw+IEluIERpb255c2l1cyBhbHNvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMzkuNDAiPih2aWkuIDM5LCA0MCk8L2JpYmw+LCB3aG9tIFBsdXRhcmNoIHNlZW1zIG90aGVyd2lzZSB0byBiZSBmb2xsb3dpbmcsIFZlcnR1cmlhIGlzIHRoZSBtb3RoZXIsIGFuZCBWb2x1bW5pYSB0aGUgd2lmZSwgb2YgTWFyY2l1cy48L25vdGU+IHRoZSBtb3RoZXIgb2YgTWFyY2l1cy4gQWZ0ZXIgZW50ZXJpbmcgYW5kIGZpbmRpbmcgaGVyIHNlYXRlZCB3aXRoIGhlciBkYXVnaHRlci1pbi1sYXcsIGFuZCBob2xkaW5nIHRoZSBjaGlsZHJlbiBvZiBNYXJjaXVzIG9uIGhlciBsYXAsIFZhbGVyaWEgY2FsbGVkIGFib3V0IGhlciB0aGUgd29tZW4gd2hvIGhhZCBmb2xsb3dlZCwgYW5kIHNhaWQ6IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSB3aG9tIHRob3Ugc2Vlc3QgaGVyZSwgVm9sdW1uaWEsIGFuZCB0aG91LCBWZXJnaWxpYSwgYXJlIGNvbWUgYXMgd29tZW4gdG8gd29tZW4sIG9iZXlpbmcgbmVpdGhlciBzZW5hdG9yaWFsIGVkaWN0IG5vciBjb25zdWxhciBjb21tYW5kOyBidXQgb3VyIGdvZCwgYXMgaXQgd291bGQgc2VlbSwgdGFraW5nIHBpdHkgb24gb3VyIHN1cHBsaWNhdGlvbiwgcHV0IGludG8gb3VyIGhlYXJ0cyBhbiBpbXB1bHNlIHRvIGNvbWUgaGl0aGVyIHRvIHlvdSBhbmQgYmVzZWVjaCB5b3UgdG8gZG8gdGhhdCB3aGljaCB3aWxsIG5vdCBvbmx5IGJlIHRoZSBzYWx2YXRpb24gb2YgdXMgb3Vyc2VsdmVzIGFuZCBvZiB0aGUgY2l0aXplbnMgYmVzaWRlcywgYnV0IGFsc28gbGlmdCB5b3Ugd2hvIGNvbnNlbnQgdG8gZG8gaXQgdG8gYSBtb3JlIGNvbnNwaWN1b3VzIGZhbWUgdGhhbiB0aGF0IHdoaWNoIHRoZSBkYXVnaHRlcnMgb2YgdGhlIFNhYmluZXMgd29uLCB3aGVuIHRoZXkgYnJvdWdodCB0aGVpciBmYXRoZXJzIGFuZCBodXNiYW5kcyBvdXQgb2Ygd2FyIGludG8gZnJpZW5kc2hpcCBhbmQgcGVhY2UuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcmlzZSwgY29tZSB3aXRoIHVzIHRvIE1hcmNpdXMsIGFuZCBqb2luIHdpdGggdXMgaW4gc3VwcGxpY2F0aW5nIGhpbSwgYmVhcmluZyB0aGlzIGp1c3QgYW5kIHRydWUgdGVzdGltb255IGluIGJlaGFsZiBvZiB5b3VyIGNvdW50cnksIHRoYXQsIGFsdGhvdWdoIHNoZSBoYXMgc3VmZmVyZWQgbXVjaCB3cm9uZyBhdCBoaXMgaGFuZHMsIHNoZSBoYXMgbmVpdGhlciBkb25lIG5vciB0aG91Z2h0IG9mIGRvaW5nIGhhcm0gdG8geW91LCBpbiBoZXIgYXVnZXIsIGJ1dCByZXN0b3JlcyB5b3UgdG8gaGltLCBldmVuIHRob3VnaCBzaGUgaXMgZGVzdGluZWQgdG8gb2J0YWluIG5vIGVxdWl0YWJsZSB0cmVhdG1lbnQgYXQgaGlzIGhhbmRzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdvcmRzIG9mIFZhbGVyaWEgd2VyZSBzZWNvbmRlZCBieSB0aGUgY3JpZXMgb2YgdGhlIG90aGVyIHdvbWVuIHdpdGggaGVyLCBhbmQgVm9sdW1uaWEgZ2F2ZSB0aGVtIHRoaXMgYW5zd2VyOuKAlAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyB3b21lbiwgbm90IG9ubHkgaGF2ZSB3ZSBhbiBlcXVhbCBzaGFyZSB3aXRoIHlvdSBpbiB0aGUgY29tbW9uIGNhbGFtaXRpZXMsIGJ1dCB3ZSBoYXZlIGFuIGFkZGl0aW9uYWwgbWlzZXJ5IG9mIG91ciBvd24sIGluIHRoYXQgd2UgaGF2ZSBsb3N0IHRoZSBmYW1lIGFuZCB2aXJ0dWUgb2YgTWFyY2l1cywgYW5kIHNlZSBoaXMgcGVyc29uIHByb3RlY3RlZCBpbiBjb21tYW5kLCByYXRoZXIgdGhhbiBwcmVzZXJ2ZWQgZnJvbSBkZWF0aCwgYnkgdGhlIGFybXMgb2Ygb3VyIGVuZW1pZXMuIEFuZCB5ZXQgaXQgaXMgdGhlIGdyZWF0ZXN0IG9mIG91ciBtaXNmb3J0dW5lcyB0aGF0IG91ciBuYXRpdmUgY2l0eSBpcyBiZWNvbWUgc28gdXR0ZXJseSB3ZWFrIGFzIHRvIHBsYWNlIGhlciBob3BlcyBpbiB1cy4gCgkJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBJIGtub3cgbm90IHdoZXRoZXIgdGhlIG1hbiB3aWxsIGhhdmUgYW55IHJlZ2FyZCBmb3IgdXMsIHNpbmNlIGhlIGhhcyBub25lIGZvciBoaXMgY291bnRyeSwgd2hpY2ggaGUgb25jZSBzZXQgYmVmb3JlIG1vdGhlciBhbmQgd2lmZSBhbmQgY2hpbGRyZW4uIEhvd2V2ZXIsIHRha2UgdXMgYW5kIHVzZSB1cyBhbmQgYnJpbmcgdXMgdG8gaGltOyBpZiB3ZSBjYW4gZG8gbm90aGluZyBlbHNlLCB3ZSBjYW4gYXQgbGVhc3QgYnJlYXRoZSBvdXQgb3VyIGxpdmVzIGluIHN1cHBsaWNhdGlvbnMgZm9yIG91ciBjb3VudHJ5LjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHNoZSB0b29rIHRoZSBjaGlsZHJlbiBhbmQgVmVyZ2lsaWEgYW5kIHdlbnQgd2l0aCB0aGUgb3RoZXIgd29tZW4gdG8gdGhlIGNhbXAgb2YgdGhlIFZvbHNjaWFucy4gVGhlIHNpZ2h0IG9mIHRoZW0sIGFuZCB0aGUgcGl0aWZ1bG5lc3Mgb2YgaXQsIHByb2R1Y2VkIGV2ZW4gaW4gdGhlaXIgZW5lbWllcyByZXZlcmVuY2UgYW5kIHNpbGVuY2UuIE5vdyBpdCBjaGFuY2VkIHRoYXQgTWFyY2l1cyB3YXMgc2VhdGVkIG9uIGEgdHJpYnVuYWwgd2l0aCBoaXMgY2hpZWYgb2ZmaWNlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGFjY29yZGluZ2x5LCBoZSBzYXcgdGhlIHdvbWVuIGFwcHJvYWNoaW5nLCBoZSB3YXMgYW1hemVkOyBhbmQgd2hlbiBoZSByZWNvZ25pemVkIGhpcyBtb3RoZXIsIHdobyB3YWxrZWQgYXQgdGhlaXIgaGVhZCwgaGUgd291bGQgZmFpbiBoYXZlIHBlcnNpc3RlZCBpbiBoaXMgcHJldmlvdXMgaW5mbGV4aWJsZSBhbmQgaW1wbGFjYWJsZSBjb3Vyc2UsIGJ1dCwgbWFzdGVyZWQgYnkgaGlzIGZlZWxpbmdzLCBhbmQgY29uZm91bmRlZCBhdCB3aGF0IGhlIHNhdywgaGUgY291bGQgbm90IGVuZHVyZSB0byByZW1haW4gc2VhdGVkIHdoaWxlIHRoZXkgYXBwcm9hY2hlZCBoaW0sIGJ1dCBkZXNjZW5kZWQgcXVpY2tseSBmcm9tIHRoZSB0cmlidW5hbCBhbmQgcmFuIHRvIG1lZXQgdGhlbS4gSGUgc2FsdXRlZCBoaXMgbW90aGVyIGZpcnN0LCBhbmQgaGVsZCBoZXIgYSBsb25nIHRpbWUgaW4gaGlzIGVtYnJhY2UsIGFuZCB0aGVuIGhpcyB3aWZlIGFuZCBjaGlsZHJlbiwgc3BhcmluZyBub3cgbmVpdGhlciB0ZWFycyBub3IgY2FyZXNzZXMsIGJ1dCBzdWZmZXJpbmcgaGltc2VsZiBhcyBpdCB3ZXJlIHRvIGJlIGJvcm5lIGF3YXkgYnkgYSB0b3JyZW50IG9mIGVtb3Rpb24uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBoZSB3YXMgc2F0ZWQgd2l0aCB0aGlzLCBhbmQgcGVyY2VpdmVkIHRoYXQgaGlzIG1vdGhlciBub3cgd2lzaGVkIHRvIHNheSBzb21ldGhpbmcsIGhlIGJyb3VnaHQgdG8gaGlzIHNpZGUgdGhlIGNvdW5jaWxsb3JzIG9mIHRoZSBWb2xzY2lhbnMsIGFuZCBoZWFyZCBWb2x1bW5pYSBzcGVhayBhcyBmb2xsb3dzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3Ugc2Vlc3QsIG15IHNvbiwgZXZlbiBpZiB3ZSBkbyBub3Qgc3BlYWsgb3Vyc2VsdmVzLCBhbmQgY2Fuc3QganVkZ2UgZnJvbSB0aGUgd3JldGNoZWRuZXNzIG9mIG91ciBnYXJiIGFuZCBhc3BlY3QsIHRvIHdoYXQgYSBwaXRpZnVsIHN0YXRlIHRoeSBiYW5pc2htZW50IGhhcyByZWR1Y2VkIHVzLiAKCQkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBiZSBzdXJlIHRoYXQgd2Ugd2hvIGNvbWUgdG8gdGhlZSBhcmUgb2YgYWxsIHdvbWVuIG1vc3QgdW5oYXBweSwgc2luY2UgZm9ydHVuZSBoYXMgbWFkZSB0aGUgc2lnaHQgd2hpY2ggc2hvdWxkIGhhdmUgYmVlbiBtb3N0IHN3ZWV0LCBtb3N0IGRyZWFkZnVsIGZvciB1cywgYXMgSSBiZWhvbGQgbXkgc29uLCBhbmQgdGhpcyB3aWZlIG9mIHRoaW5lIGhlciBodXNiYW5kLCBlbmNhbXBlZCBhZ2FpbnN0IHRoZSB3YWxscyBvZiBvdXIgbmF0aXZlIGNpdHkuIEFuZCB0aGF0IHdoaWNoIGZvciB0aGUgcmVzdCBpcyBhbiBhc3N1YWdlbWVudCBvZiBhbGwgbWlzZm9ydHVuZSBhbmQgbWlzZXJ5LCBuYW1lbHkgcHJheWVyIHRvIHRoZSBnb2RzLCBoYXMgYmVjb21lIGZvciB1cyBtb3N0IGltcHJhY3RpY2FibGU7IGZvciB3ZSBjYW5ub3QgYXNrIGZyb20gdGhlIGdvZHMgYm90aCB2aWN0b3J5IGZvciBvdXIgY291bnRyeSBhbmQgYXQgdGhlIHNhbWUgdGltZSBzYWZldHkgZm9yIHRoZWUsIGJ1dCB0aGF0IHdoaWNoIGFueSBvbmUgb2Ygb3VyIGZvZXMgbWlnaHQgaW1wcmVjYXRlIHVwb24gdXMgYXMgYSBjdXJzZSwgdGhpcyBtdXN0IGJlIHRoZSBidXJkZW4gb2Ygb3VyIHByYXllcnMuIAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGh5IHdpZmUgYW5kIGNoaWxkcmVuIG11c3QgbmVlZHMgYmUgZGVwcml2ZWQgZWl0aGVyIG9mIHRoZWlyIGNvdW50cnkgb3Igb2YgdGhlZS4gQXMgZm9yIG1lLCBJIHdpbGwgbm90IHdhaXQgdG8gaGF2ZSB0aGUgd2FyIGRlY2lkZSB0aGlzIGlzc3VlIGZvciBtZSB3aGlsZSBJIGxpdmUsIGJ1dCB1bmxlc3MgSSBjYW4gcGVyc3VhZGUgdGhlZSB0byBzdWJzdGl0dXRlIGZyaWVuZHNoaXAgYW5kIGNvbmNvcmQgZm9yIGRpc3NlbnNpb24gYW5kIGhvc3RpbGl0eSwgYW5kIHNvIHRvIGJlY29tZSBhIGJlbmVmYWN0b3Igb2YgYm90aCBwYXJ0aWVzIHJhdGhlciB0aGFuIGEgZGVzdHJveWVyIG9mIG9uZSBvZiB0aGVtLCB0aGVuIGNvbnNpZGVyIGFuZCBiZSB3ZWxsIGFzc3VyZWQgdGhhdCB0aG91IGNhbnN0IG5vdCBhc3NhaWwgdGh5IGNvdW50cnkgd2l0aG91dCBmaXJzdCB0cmVhZGluZyB1bmRlcmZvb3QgdGhlIGNvcnBzZSBvZiBoZXIgd2hvIGJvcmUgdGhlZS4gRm9yIGl0IGRvZXMgbm90IGJlaG9vdmUgbWUgdG8gYXdhaXQgdGhhdCBkYXkgb24gd2hpY2ggSSBzaGFsbCBiZWhvbGQgbXkgc29uIGVpdGhlciBsZWQgaW4gdHJpdW1waCBieSBoaXMgZmVsbG93LWNpdGl6ZW5zIG9yIHRyaXVtcGhpbmcgb3ZlciBoaXMgY291bnRyeS4gCgkJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPklmLCB0aGVuLCBJIGFza2VkIHlvdSB0byBzYXZlIHlvdXIgY291bnRyeSBieSBydWluaW5nIHRoZSBWb2xzY2lhbnMsIHRoZSBxdWVzdGlvbiBiZWZvcmUgdGhlZSB3b3VsZCBiZSBhIGdyaWV2b3VzIG9uZSwgbXkgc29uLCBhbmQgaGFyZCB0byBkZWNpZGUsIHNpbmNlIGl0IGlzIG5laXRoZXIgaG9ub3VyYWJsZSBmb3IgYSBtYW4gdG8gZGVzdHJveSBoaXMgZmVsbG93LWNpdGl6ZW5zLCBub3IganVzdCBmb3IgaGltIHRvIGJldHJheSB0aG9zZSB3aG8gaGF2ZSBwdXQgdGhlaXIgdHJ1c3QgaW4gaGltOyBidXQgYXMgaXQgaXMsIHdlIGFzayBvbmx5IGEgcmVsaWVmIGZyb20gZXZpbHMsIHNvbWV0aGluZyB3aGljaCB3b3VsZCBiZSBzYWx1dGFyeSBmb3IgYm90aCBwYXJ0aWVzIGFsaWtlLCBidXQgbW9yZSBjb25kdWNpdmUgdG8gZmFtZSBhbmQgaG9ub3VyIGZvciB0aGUgVm9sc2NpYW5zLCBiZWNhdXNlIHRoZWlyIHN1cGVyaW9yaXR5IGluIGFybXMgd2lsbCBnaXZlIHRoZW0gdGhlIGFwcGVhcmFuY2Ugb2YgYmVzdG93aW5nIHRoZSBncmVhdGVzdCBvZiBibGVzc2luZ3MsIG5hbWVseSBwZWFjZSBhbmQgZnJpZW5kc2hpcCwgYWx0aG91Z2ggdGhleSBnZXQgdGhlc2Ugbm8gbGVzcyB0aGVtc2VsdmVzLiBJZiB0aGVzZSBibGVzc2luZ3MgYXJlIHJlYWxpemVkLCBpdCB3aWxsIGJlIGNoaWVmbHkgZHVlIHRvIHRoZWU7IGlmIHRoZXkgYXJlIG5vdCwgdGhlbiB0aG91IGFsb25lIHdpbHQgYmVhciB0aGUgYmxhbWUgZnJvbSBib3RoIG5hdGlvbnMuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhvdWdoIHRoZSBpc3N1ZXMgb2Ygd2FyIGFyZSBvYnNjdXJlLCB0aGlzIGlzIG1hbmlmZXN0LCB0aGF0IGlmIHZpY3RvcmlvdXMsIHRob3Ugd2lsdCBvbmx5IGJlIHRoeSBjb3VudHJ5J3MgZGVzdHJveWluZyBkZW1vbiwgYW5kIGlmIGRlZmVhdGVkLCB0aGUgd29ybGQgd2lsbCB0aGluayB0aGF0LCB0byBzYXRpc2Z5IHRoeSB3cmF0aCwgdGhvdSBkaWRzdCBicmluZyBkb3duIHRoZSBncmVhdGVzdCBjYWxhbWl0aWVzIHVwb24gbWVuIHdobyB3ZXJlIHRoeSBiZW5lZmFjdG9ycyBhbmQgZnJpZW5kcy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBWb2x1bW5pYSB3YXMgc2F5aW5nIHRoaXMsIE1hcmNpdXMgbGlzdGVuZWQgd2l0aG91dCBtYWtpbmcgYW55IGFuc3dlciwgYW5kIGFmdGVyIHNoZSBoYWQgY2Vhc2VkIGFsc28sIGhlIHN0b29kIGEgbG9uZyB0aW1lIGluIHNpbGVuY2UuIFZvbHVtbmlhIHRoZXJlZm9yZSBiZWdhbiBvbmNlIG1vcmU6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5IGFydCB0aG91IHNpbGVudCwgbXkgc29uPyBJcyBpdCByaWdodCB0byB5aWVsZCBldmVyeXRoaW5nIHRvIHdyYXRoIGFuZCByZXNlbnRtZW50LCBidXQgd3JvbmcgdG8gZ3JhdGlmeSBhIG1vdGhlciBpbiBzdWNoIGEgcHJheWVyIGFzIHRoaXM/IAoJCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PciBpcyB0aGUgcmVtZW1icmFuY2Ugb2YgaGlzIHdyb25ncyBiZWNvbWluZyB0byBhIGdyZWF0IG1hbiwgd2hpbGUgdGhlIHJlbWVtYnJhbmNlLCB3aXRoIHJldmVyZW5jZSBhbmQgaG9ub3VyLCBvZiB0aGUgYmVuZWZpdHMgd2hpY2ggY2hpbGRyZW4gaGF2ZSByZWNlaXZlZCBmcm9tIHRoZWlyIHBhcmVudHMgaXMgbm90IHRoZSBkdXR5IG9mIGEgZ3JlYXQgYW5kIGdvb2QgbWFuPyBTdXJlbHkgZm9yIG5vIG1hbiB3ZXJlIGl0IG1vcmUgc2VlbWx5IHRvIGNoZXJpc2ggZ3JhdGl0dWRlIHRoYW4gZm9yIHRoZWUsIHdobyBkb3N0IHNvIGJpdHRlcmx5IHByb2NlZWQgYWdhaW5zdCBpbmdyYXRpdHVkZS4gCgkJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIGFsdGhvdWdoIHRob3UgaGFzdCBhbHJlYWR5IHB1bmlzaGVkIHRoeSBjb3VudHJ5IHNldmVyZWx5LCB0aG91IGhhc3Qgbm90IHNob3duIHRoeSBtb3RoZXIgYW55IGdyYXRpdHVkZS4gSXQgd2VyZSwgdGhlcmVmb3JlLCBhIG1vc3QgcGlvdXMgdGhpbmcgaW4gdGhlZSB0byBncmFudCBtZSwgd2l0aG91dCBhbnkgY29tcHVsc2lvbiwgc28gd29ydGh5IGFuZCBqdXN0IGEgcmVxdWVzdCBhcyBtaW5lOyBidXQgc2luY2UgSSBjYW5ub3QgcGVyc3VhZGUgdGhlZSwgd2h5IHNob3VsZCBJIHNwYXJlIG15IGxhc3QgcmVzb3VyY2U/PC9xPiBBbmQgd2l0aCB0aGVzZSB3b3JkcyBzaGUgdGhyZXcgaGVyc2VsZiBhdCBoaXMgZmVldCwgdG9nZXRoZXIgd2l0aCBoaXMgd2lmZSBhbmQgY2hpbGRyZW4uCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUaGVuIE1hcmNpdXMsIGNyeWluZyBvdXQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGhhc3QgdGhvdSBkb25lIHRvIG1lLCBteSBtb3RoZXIhPC9xPiBsaWZ0ZWQgaGVyIHVwLCBhbmQgcHJlc3NpbmcgaGVyIHJpZ2h0IGhhbmQgd2FybWx5LCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3UgYXJ0IHZpY3RvcmlvdXMsIGFuZCB0aHkgdmljdG9yeSBtZWFucyBnb29kIGZvcnR1bmUgdG8gbXkgY291bnRyeSwgYnV0IGRlYXRoIHRvIG1lOyBmb3IgSSBzaGFsbCB3aXRoZHJhdyB2YW5xdWlzaGVkLCB0aG91Z2ggYnkgdGhlZSBhbG9uZS48L3E+IFdoZW4gaGUgaGFkIHNhaWQgdGhpcywgYW5kIGhhZCBoZWxkIGEgbGl0dGxlIHByaXZhdGUgY29uZmVyZW5jZSB3aXRoIGhpcyBtb3RoZXIgYW5kIGhpcyB3aWZlLCBoZSBzZW50IHRoZW0gYmFjayBhZ2FpbiB0byBSb21lLCBhcyB0aGV5IGRlc2lyZWQsIGFuZCBvbiB0aGUgbmV4dCBtb3JuaW5nIGxlZCBhd2F5IGhpcyBWb2xzY2lhbnMsIHdobyB3ZXJlIG5vdCBhbGwgYWZmZWN0ZWQgaW4gdGhlIHNhbWUgd2F5IG5vciBlcXVhbGx5IHBsZWFzZWQgYnkgd2hhdCBoYWQgaGFwcGVuZWQuCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHNvbWUgZm91bmQgZmF1bHQgYm90aCB3aXRoIGhpbSBhbmQgd2l0aCB3aGF0IGhlIGhhZCBkb25lOyBidXQgb3RoZXJzLCB3aG8gd2VyZSBmYXZvdXJhYmx5IGRpc3Bvc2VkIHRvd2FyZHMgYSBwZWFjZWZ1bCBzZXR0bGVtZW50IG9mIHRoZSBkaXNwdXRlLCB3aXRoIG5laXRoZXI7IHdoaWxlIHNvbWUsIHRob3VnaCBkaXNwbGVhc2VkIHdpdGggaGlzIHByb2NlZWRpbmdzLCBuZXZlcnRoZWxlc3MgY291bGQgbm90IGxvb2sgdXBvbiBNYXJjaXVzIGFzIGEgYmFkIG1hbiwgYnV0IHRob3VnaHQgaXQgcGFyZG9uYWJsZSBpbiBoaW0gdG8gYmUgYnJva2VuIGRvd24gYnkgc3VjaCBzdHJvbmcgY29tcHVsc2lvbnMuIE5vIG9uZSwgaG93ZXZlciwgb3Bwb3NlZCBoaW0sIGJ1dCBhbGwgZm9sbG93ZWQgaGltIG9iZWRpZW50bHksIHRob3VnaCByYXRoZXIgb3V0IG9mIGFkbWlyYXRpb24gZm9yIGhpcyB2aXJ0dWUgdGhhbiByZWdhcmQgZm9yIGhpcyBhdXRob3JpdHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q29tcGFyZSBMaXZ5J3Mgc3Rvcnkgb2YgdGhpcyBpbnRlcnZpZXcgYW5kIGl0cyByZXN1bHRzIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuNDAuMyIgdmFsaWQ9InllcyI+KGlpLiA0MCwgMy05KS48L2JpYmw+IFBsdXRhcmNoIGFncmVlcyByYXRoZXIgd2l0aCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjM5Ij5EaW9ueXNpdXMsIHZpaWkuIDM5LTU0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBSb21hbiBwZW9wbGUgc2hvd2VkIG1vcmUgcGxhaW5seSwgd2hlbiB0aGV5IHdlcmUgc2V0IGZyZWUgZnJvbSB0aGUgd2FyLCB0aGUgZ3JlYXRuZXNzIG9mIHRoZWlyIGZlYXIgYW5kIHBlcmlsIHdoaWxlIGl0IGxhc3RlZC4gRm9yIGFzIHNvb24gYXMgdGhvc2Ugd2hvIG1hbm5lZCB0aGUgd2FsbHMgZGVzY3JpZWQgdGhlIFZvbHNjaWFucyBkcmF3aW5nIHRoZWlyIGZvcmNlcyBvZmYsIGV2ZXJ5IHRlbXBsZSB3YXMgdGhyb3duIG9wZW4sIGFuZCB0aGUgcGVvcGxlIGNyb3duZWQgdGhlbXNlbHZlcyB3aXRoIGdhcmxhbmRzIGFuZCBvZmZlcmVkIHNhY3JpZmljZXMgYXMgaWYgZm9yIHZpY3RvcnkuIEJ1dCB0aGUgam95IG9mIHRoZSBjaXR5IHdhcyBtb3N0IGFwcGFyZW50IGluIHRoZSBob25vdXIgYW5kIGxvdmluZyBmYXZvdXIgd2hpY2ggYm90aCB0aGUgc2VuYXRlIGFuZCB0aGUgd2hvbGUgcGVvcGxlIGJlc3Rvd2VkIHVwb24gdGhlIHdvbWVuLCBkZWNsYXJpbmcgdGhlaXIgYmVsaWVmIHRoYXQgdGhlIGNpdHkncyBzYWx2YXRpb24gd2FzIG1hbmlmZXN0bHkgZHVlIHRvIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZSBzZW5hdGUgcGFzc2VkIGEgZGVjcmVlIHRoYXQgd2hhdHNvZXZlciB0aGV5IGFza2VkIGZvciB0aGVtc2VsdmVzIGluIHRoZSB3YXkgb2YgaG9ub3VyIG9yIGZhdm91ciwgc2hvdWxkIGJlIGZ1cm5pc2hlZCBhbmQgZG9uZSBmb3IgdGhlbSBieSB0aGUgbWFnaXN0cmF0ZXMsIHRoZXkgYXNrZWQgZm9yIG5vdGhpbmcgZWxzZSBiZXNpZGVzIHRoZSBlcmVjdGlvbiBvZiBhIHRlbXBsZSBvZiBXb21lbidzIEZvcnR1bmUsIHRoZSBleHBlbnNlIG9mIHdoaWNoIHRoZXkgb2ZmZXJlZCB0byBjb250cmlidXRlIG9mIHRoZW1zZWx2ZXMsIGlmIHRoZSBjaXR5IHdvdWxkIHVuZGVydGFrZSB0byBwZXJmb3JtLCBhdCB0aGUgcHVibGljIGNoYXJnZSwgYWxsIHRoZSBzYWNyaWZpY2VzIGFuZCBob25vdXJzLCBzdWNoIGFzIGFyZSBkdWUgdG8gdGhlIGdvZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgY29tbWVuZGVkIHRoZWlyIHB1YmxpYyBzcGlyaXQsIGFuZCBlcmVjdGVkIHRoZSB0ZW1wbGUgYW5kIGl0cyBpbWFnZSBhdCB0aGUgcHVibGljIGNoYXJnZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi48YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjExIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNDAsMTEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ1dCB0aGV5IG5vbmUgdGhlIGxlc3MgY29udHJpYnV0ZWQgbW9uZXkgdGhlbXNlbHZlcyBhbmQgc2V0IHVwIGEgc2Vjb25kIGltYWdlIG9mIHRoZSBnb2RkZXNzLCBhbmQgdGhpcywgdGhlIFJvbWFucyBzYXksIGFzIGl0IHdhcyBwbGFjZWQgaW4gdGhlIHRlbXBsZSwgdXR0ZXJlZCBzb21lIHN1Y2ggd29yZHMgYXMgdGhlc2U6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RGVhciB0byB0aGUgZ29kcywgTyB3b21lbiwgaXMgeW91ciBwaW91cyBnaWZ0IG9mIG1lLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguNTYiPkRpb255c2l1cywgdmlpaS4gNTYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUaGVzZSB3b3JkcyB3ZXJlIGFjdHVhbGx5IHV0dGVyZWQgdHdpY2UsIGFzIHRoZSBzdG9yeSBydW5zLCB3aGljaCB3b3VsZCBoYXZlIHVzIGJlbGlldmUgd2hhdCBpcyBkaWZmaWN1bHQgb2YgYmVsaWVmIGFuZCBwcm9iYWJseSBuZXZlciBoYXBwZW5lZC4gRm9yIHRoYXQgc3RhdHVlcyBoYXZlIGFwcGVhcmVkIHRvIHN3ZWF0LCBhbmQgc2hlZCB0ZWFycywgYW5kIGV4dWRlIHNvbWV0aGluZyBsaWtlIGRyb3BzIG9mIGJsb29kLCBpcyBub3QgaW1wb3NzaWJsZTsgc2luY2Ugd29vZCBhbmQgc3RvbmUgb2Z0ZW4gY29udHJhY3QgYSBtb3VsZCB3aGljaCBpcyBwcm9kdWN0aXZlIG9mIG1vaXN0dXJlLCBhbmQgY292ZXIgdGhlbXNlbHZlcyB3aXRoIG1hbnkgY29sb3VycywgYW5kIHJlY2VpdmUgdGludHMgZnJvbSB0aGUgYXRtb3NwaGVyZTsgYW5kIHRoZXJlIGlzIG5vdGhpbmcgaW4gdGhlIHdheSBvZiBiZWxpZXZpbmcgdGhhdCB0aGUgRGVpdHkgdXNlcyB0aGVzZSBwaGVub21lbmEgc29tZXRpbWVzIGFzIHNpZ25zIGFuZCBwb3J0ZW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgcG9zc2libGUgYWxzbyB0aGF0IHN0YXR1ZXMgbWF5IGVtaXQgYSBub2lzZSBsaWtlIGEgbW9hbiBvciBhIGdyb2FuLCBieSByZWFzb24gb2YgYSBmcmFjdHVyZSBvciBhIHJ1cHR1cmUsIHdoaWNoIGlzIG1vcmUgdmlvbGVudCBpZiBpdCB0YWtlcyBwbGFjZSBpbiB0aGUgaW50ZXJpb3IuIEJ1dCB0aGF0IGFydGljdWxhdGUgc3BlZWNoLCBhbmQgbGFuZ3VhZ2Ugc28gY2xlYXIgYW5kIGFidW5kYW50IGFuZCBwcmVjaXNlLCBzaG91bGQgcHJvY2VlZCBmcm9tIGEgbGlmZWxlc3MgdGhpbmcsIGlzIGFsdG9nZXRoZXIgaW1wb3NzaWJsZTsgc2luY2Ugbm90IGV2ZW4gdGhlIHNvdWwgb2YgbWFuLCBvciB0aGUgRGVpdHksIHdpdGhvdXQgYSBib2R5IGR1bHkgb3JnYW5pemVkIGFuZCBmaXR0ZWQgd2l0aCB2b2NhbCBwYXJ0cywgaGFzIGV2ZXIgc3Bva2VuIGFuZCBjb252ZXJzZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVyZSBoaXN0b3J5IGZvcmNlcyBvdXIgYXNzZW50IHdpdGggbnVtZXJvdXMgYW5kIGNyZWRpYmxlIHdpdG5lc3Nlcywgd2UgbXVzdCBjb25jbHVkZSB0aGF0IGFuIGV4cGVyaWVuY2UgZGlmZmVyZW50IGZyb20gdGhhdCBvZiBzZW5zYXRpb24gYXJpc2VzIGluIHRoZSBpbWFnaW5hdGl2ZSBwYXJ0IG9mIHRoZSBzb3VsLCBhbmQgcGVyc3VhZGVzIG1lbiB0byB0aGluayBpdCBzZW5zYXRpb247IGFzLCBmb3IgaW5zdGFuY2UsIGluIHNsZWVwLCB3aGVuIHdlIHRoaW5rIHdlIHNlZSBhbmQgaGVhciwgYWx0aG91Z2ggd2UgbmVpdGhlciBzZWUgbm9yIGhlYXIuIEhvd2V2ZXIsIHRob3NlIHdobyBjaGVyaXNoIHN0cm9uZyBmZWVsaW5ncyBvZiBnb29kLXdpbGwgYW5kIGFmZmVjdGlvbiBmb3IgdGhlIERlaXR5LCBhbmQgYXJlIHRoZXJlZm9yZSB1bmFibGUgdG8gcmVqZWN0IG9yIGRlbnkgYW55dGhpbmcgb2YgdGhpcyBraW5kLCBoYXZlIGEgc3Ryb25nIGFyZ3VtZW50IGZvciB0aGVpciBmYWl0aCBpbiB0aGUgd29uZGVyZnVsIGFuZCB0cmFuc2NlbmRlbnQgY2hhcmFjdGVyIG9mIHRoZSBkaXZpbmUgcG93ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgRGVpdHkgaGFzIG5vIHJlc2VtYmxhbmNlIHdoYXRldmVyIHRvIG1hbiwgZWl0aGVyIGluIG5hdHVyZSwgYWN0aXZpdHksIHNraWxsLCBvciBzdHJlbmd0aDsgbm9yLCBpZiBIZSBkb2VzIHNvbWV0aGluZyB0aGF0IHdlIGNhbm5vdCBkbywgb3IgY29udHJpdmVzIHNvbWV0aGluZyB0aGF0IHdlIGNhbm5vdCBjb250cml2ZSwgaXMgdGhpcyBjb250cmFyeSB0byByZWFzb247IGJ1dCByYXRoZXIsIHNpbmNlIEhlIGRpZmZlcnMgZnJvbSB1cyBpbiBhbGwgcG9pbnRzLCBpbiBIaXMgd29ya3MgbW9zdCBvZiBhbGwgaXMgSGUgdW5saWtlIHVzIGFuZCBmYXIgcmVtb3ZlZCBmcm9tIHVzLiBCdXQgbW9zdCBvciB0aGUgRGVpdHkncyBwb3dlcnMsIGFzIEhlcmFjbGVpdHVzIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgMTE2IChCeXdhdGVyLCBwLiA0NSk8L25vdGU+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5lc2NhcGUgb3VyIGtub3dsZWRnZSB0aHJvdWdoIGluY3JlZHVsaXR5LjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgTWFyY2l1cywgd2hlbiBoZSBjYW1lIGJhY2sgdG8gQW50aXVtIGZyb20gaGlzIGV4cGVkaXRpb24sIFR1bGx1cywgd2hvIGhhZCBsb25nIGhhdGVkIGhpbSBhbmQgYmVlbiBvcHByZXNzZWQgd2l0aCBqZWFsb3VzeSBvZiBoaW0sIHBsb3R0ZWQgdG8gdGFrZSBoaW0gb2ZmIGF0IG9uY2UsIGJlbGlldmluZyB0aGF0IGlmIGhpcyBlbmVteSBlc2NhcGVkIGhpbSBub3csIGhlIHdvdWxkIG5ldmVyIGdpdmUgaGltIGFub3RoZXIgY2hhbmNlIHRvIHNlaXplIGhpbS4gSGF2aW5nLCB0aGVyZWZvcmUsIGFycmF5ZWQgYSBsYXJnZSBwYXJ0eSBhZ2FpbnN0IGhpbSwgaGUgYmFkZSBoaW0gbGF5IGRvd24gaGlzIGNvbW1hbmQgYW5kIGdpdmUgdGhlIFZvbHNjaWFucyBhbiBhY2NvdW50IG9mIGhpcyBhZG1pbmlzdHJhdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE1hcmNpdXMsIGFmcmFpZCBvZiBiZWluZyByZWR1Y2VkIHRvIHByaXZhdGUgc3RhdGlvbiB3aGVuIFR1bGx1cyB3YXMgaW4gY29tbWFuZCBhbmQgZXhlcmNpc2luZyB0aGUgZ3JlYXRlc3QgaW5mbHVlbmNlIGFtb25nIGhpcyBvd24gY291bnRyeW1lbiwgc2FpZCBoZSB3b3VsZCByZXNpZ24gaGlzIGNvbW1hbmQgdG8gdGhlIFZvbHNjaWFucywgaWYgdGhleSBiYWRlIGhpbSBkbyBzbywgc2luY2UgaXQgd2FzIGF0IHRoZWlyIGdlbmVyYWwgYmlkZGluZyB0aGF0IGhlIGhhZCBhc3N1bWVkIGl0OyBhbmQgdGhhdCBoZSB3YXMgcmVhZHksIGFuZCB3b3VsZCBub3QgcmVmdXNlIGV2ZW4gYmVmb3JlIHRoYXQsIHRvIGdpdmUgYSBmdWxsIGFjY291bnQgb2YgaGlzIGFkbWluaXN0cmF0aW9uIHRvIGFsbCB0aGUgcGVvcGxlIG9mIEFudGl1bSB3aG8gZGVzaXJlZCBpdC4gQW4gYXNzZW1ibHkgd2FzIHRoZXJlZm9yZSBoZWxkLCBhdCB3aGljaCB0aGUgcG9wdWxhciBsZWFkZXJzIHdobyBoYWQgYmVlbiBzZXQgdG8gdGhlIHdvcmsgcm9zZSBhbmQgdHJpZWQgdG8gZW1iaXR0ZXIgdGhlIG11bHRpdHVkZSBhZ2FpbnN0IGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gTWFyY2l1cyByb3NlIHRvIHNwZWFrLCB0aGUgbW9yZSBkaXNvcmRlcmx5IHBhcnQgb2YgaGlzIGF1ZGllbmNlIGdyZXcgcXVpZXQsIG91dCBvZiByZXZlcmVuY2UgZm9yIGhpbSwgYW5kIGdhdmUgaGltIG9wcG9ydHVuaXR5IHRvIHNwZWFrIGZlYXJsZXNzbHksIHdoaWxlIHRoZSBiZXN0IG9mIHRoZSBtZW4gb2YgQW50aXVtLCBhbmQgdGhvc2UgdGhhdCB3ZXJlIGVzcGVjaWFsbHkgcGxlYXNlZCB3aXRoIHBlYWNlLCBtYWRlIGl0IGNsZWFyIHRoYXQgdGhleSB3b3VsZCBsaXN0ZW4gdG8gaGltIHdpdGggZmF2b3VyIGFuZCBnaXZlIGEganVzdCBkZWNpc2lvbi4gVHVsbHVzLCB0aGVyZWZvcmUsIGJlZ2FuIHRvIGZlYXIgdGhlIGVmZmVjdCBvZiB0aGUgbWFuJ3MgcGxlYSBpbiBzZWxmLWRlZmVuY2U7IGZvciBoZSB3YXMgb25lIG9mIHRoZSBtb3N0IHBvd2VyZnVsIHNwZWFrZXJzLCBhbmQgaGlzIGVhcmxpZXIgYWNoaWV2ZW1lbnRzIHNlY3VyZWQgaGltIGEgZ3JhdGl0dWRlIHdoaWNoIG91dHdlaWdoZWQgaGlzIGxhdGVyIGZhdWx0OyBuYXkgbW9yZSwgdGhlIHZlcnkgY2hhcmdlIGFnYWluc3QgaGltIHdhcyBidXQgc28gbXVjaCBwcm9vZiBvZiB0aGUgZ3JlYXQgZ3JhdGl0dWRlIHdoaWNoIHdhcyBoaXMgZHVlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSB3b3VsZCBub3QgaGF2ZSB0aG91Z2h0IHRoZW1zZWx2ZXMgd3JvbmdlZCBpbiBub3QgZ2V0dGluZyBSb21lIGludG8gdGhlaXIgcG93ZXIsIGhhZCBub3QgdGhlIGVmZm9ydHMgb2YgTWFyY2l1cyBicm91Z2h0IHRoZW0gbmVhciB0byB0YWtpbmcgaXQuCgkJCTwvcD4KICAgICAgICAgPHA+QWNjb3JkaW5nbHksIHRoZSBjb25zcGlyYXRvcnMgZGVjaWRlZCB0byBtYWtlIG5vIG1vcmUgZGVsYXksIGFuZCBub3QgdG8gdGVzdCB0aGUgZmVlbGluZ3Mgb2YgdGhlIG11bHRpdHVkZTsgYnV0IHRoZSBib2xkZXN0IG9mIHRoZW0sIGNyeWluZyBvdXQgdGhhdCB0aGUgVm9sc2NpYW5zIG11c3Qgbm90IGxpc3RlbiB0byB0aGUgdHJhaXRvciwgbm9yIHN1ZmZlciBoaW0gdG8gcmV0YWluIGhpcyBjb21tYW5kIGFuZCBwbGF5IHRoZSB0eXJhbnQgYW1vbmcgdGhlbSwgZmVsbCB1cG9uIGhpbSBpbiBhIGJvZHkgYW5kIHNsZXcgaGltLCBhbmQgbm8gbWFuIHByZXNlbnQgb2ZmZXJlZCB0byBkZWZlbmQgaGltLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgoJCQkJICAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVuLCBhZnRlciBoZSBoYWQgd2l0aGRyYXduIGhpcyB0cm9vcHMgZnJvbSB0aGUgUm9tYW4gdGVycml0b3J5LCB0aGV5IHNheSB0aGF0IGhlIHdhcyBvdmVyd2hlbG1lZCB3aXRoIGhhdHJlZCBpbiBjb25zZXF1ZW5jZSwgYW5kIGxvc3QgaGlzIGxpZmUsIGRpZmZlcmVudCB3cml0ZXJzIGdpdmluZyBkaWZmZXJlbnQgZGV0YWlscyBvZiBoaXMgZGVhdGguIEluIEZhYml1cywgd2hvIGlzIGJ5IGZhciB0aGUgbW9zdCBhbmNpZW50IGF1dGhvcml0eSwgSSBmaW5kIHRoYXQgaGUgbGl2ZWQgZXZlbiB0byBvbGQgYWdlPC9xPiAKICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40MC4xMCIgdmFsaWQ9InllcyI+KExpdnksIGlpLiA0MCwgMTApLjwvYmlibD4gQ2hhcHRlciB4eHhpeC4gaW4gUGx1dGFyY2ggYWdyZWVzIGNsb3NlbHkgd2l0aCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjU3Ij5EaW9ueXNpdXMgdmlpaS4gNTctNTk8L2JpYmw+LCB3aG8gc2F5cyB0aGF0IE1hcmNpdXMgd2FzIHN0b25lZCB0byBkZWF0aC48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhhdCB0aGUgZGVlZCB3YXMgbm90IHdyb3VnaHQgd2l0aCB0aGUgYXBwcm92YWwgb2YgdGhlIG1ham9yaXR5IG9mIHRoZSBWb2xzY2lhbnMsIHdhcyBzZWVuIGF0IG9uY2UgZnJvbSB0aGVpciBjb21pbmcgb3V0IG9mIHRoZWlyIGNpdGllcyBpbiBjb25jb3Vyc2UgdG8gaGlzIGJvZHksIHRvIHdoaWNoIHRoZXkgZ2F2ZSBob25vdXJhYmxlIGJ1cmlhbCwgYWRvcm5pbmcgaGlzIHRvbWIgd2l0aCBhcm1zIGFuZCBzcG9pbHMsIGFzIHRoYXQgb2YgYSBjaGllZnRhaW4gYW5kIGdlbmVyYWwuIEJ1dCB3aGVuIHRoZSBSb21hbnMgbGVhcm5lZCBvZiBoaXMgZGVhdGgsIHRoZXkgcGFpZCBoaW0gbm8gb3RoZXIgbWFyayBlaXRoZXIgb2YgaG9ub3VyIG9yIHJlc2VudG1lbnQsIGJ1dCBzaW1wbHkgZ3JhbnRlZCB0aGUgcmVxdWVzdCBvZiB0aGUgd29tZW4gdGhhdCB0aGV5IG1pZ2h0IG1vdXJuIGZvciBoaW0gdGVuIG1vbnRocywgYXMgd2FzIGN1c3RvbWFyeSB3aGVuIGFueSBvbmUgb2YgdGhlbSBsb3N0IGEgZmF0aGVyLCBvciBhIHNvbiwgb3IgYSBicm90aGVyLiBGb3IgdGhpcyB3YXMgdGhlIHBlcmlvZCBmaXhlZCBmb3IgdGhlIGxvbmdlc3QgbW91cm5pbmcsIGFuZCBpdCB3YXMgZml4ZWQgYnkgTnVtYSBQb21waWxpdXMsIGFzIGlzIHdyaXR0ZW4gaW4gaGlzIExpZmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDEyLjIiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeGlpLiAyPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbG9zcyBvZiBNYXJjaXVzIHdhcyBrZWVubHkgZmVsdCBhdCBvbmNlIGJ5IHRoZSBWb2xzY2lhbiBzdGF0ZS4gRm9yLCBpbiB0aGUgZmlyc3QgcGxhY2UsIHRoZXkgcXVhcnJlbGxlZCB3aXRoIHRoZSBBZXF1aWFucywgd2hvIHdlcmUgdGhlaXIgYWxsaWVzIGFuZCBmcmllbmRzLCBvdmVyIHRoZSBzdXByZW1lIGNvbW1hbmQsIGFuZCBjYXJyaWVkIHRoZWlyIHF1YXJyZWwgdG8gdGhlIGxlbmd0aCBvZiBibG9vZHNoZWQgYW5kIHNsYXVnaHRlcjsgaW4gdGhlIHNlY29uZCBwbGFjZSwgdGhleSB3ZXJlIGRlZmVhdGVkIGluIGJhdHRsZSBieSB0aGUgUm9tYW5zLCB3aGVyZWluIFR1bGx1cyB3YXMgc2xhaW4gYW5kIHRoZSB2ZXJ5IGZsb3dlciBvZiB0aGVpciBmb3JjZXMgd2FzIGN1dCB0byBwaWVjZXMsIHNvIHRoYXQgdGhleSB3ZXJlIGdsYWQgdG8gYWNjZXB0IG1vc3QgZGlzZ3JhY2VmdWwgdGVybXMsIGJlY29taW5nIHN1YmplY3RzIG9mIFJvbWUsIGFuZCBwbGVkZ2luZyB0aGVtc2VsdmVzIHRvIG9iZXkgaGVyIGNvbW1hbmRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjEyIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNDAsIDEyIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgPC9ib2R5PgogICA8L3RleHQ+Cjxib2R5IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q0FJVVMgTUFSQ1VTIENPUklPTEFOVVM8L2hlYWQ+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGF0cmljaWFuIGhvdXNlIG9mIHRoZSBNYXJjaWkgYXQgUm9tZSBmdXJuaXNoZWQgbWFueSBtZW4gb2YgZGlzdGluY3Rpb24uIE9uZSBvZiB0aGVtIHdhcyBBbmN1cyBNYXJjaXVzLCB0aGUgZ3JhbmRzb24gb2YgTnVtYSBieSBoaXMgZGF1Z2h0ZXIsIGFuZCB0aGUgc3VjY2Vzc29yIG9mIFR1bGx1cyBIb3N0aWxpdXMgaW4gdGhlIGtpbmdzaGlwLiBUbyB0aGlzIGZhbWlseSBiZWxvbmdlZCBhbHNvIFB1YmxpdXMgYW5kIFF1aW50dXMgTWFyY2l1cywgdGhlIG1lbiB3aG8gYnJvdWdodCBpbnRvIFJvbWUgaXRzIGJlc3QgYW5kIG1vc3QgYWJ1bmRhbnQgc3VwcGx5IG9mIHdhdGVyLiBTbyBsaWtld2lzZSBkaWQgQ2Vuc29yaW51cywgd2hvbSB0aGUgUm9tYW4gcGVvcGxlIHR3aWNlIGFwcG9pbnRlZCBjZW5zb3IsIGFuZCB0aGVuLCBhdCBoaXMgb3duIGluc3RhbmNlLCBtYWRlIGEgbGF3IGJ5IHdoaWNoIGl0IHdhcyBkZWNyZWVkIHRoYXQgbm8gb25lIHNob3VsZCBob2xkIHRoYXQgb2ZmaWNlIHR3aWNlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhaXVzIE1hcmNpdXMsIHdob3NlIGxpZmUgSSBub3cgd3JpdGUsIGxvc3QgaGlzIGZhdGhlciBhdCBhbiBlYXJseSBhZ2UsIGFuZCB3YXMgcmVhcmVkIGJ5IGhpcyB3aWRvd2VkIG1vdGhlci4gSGUgc2hvd2VkLCBob3dldmVyLCB0aGF0IHN1Y2ggbG9zcyBvZiBhIGZhdGhlciwgYWx0aG91Z2ggb3RoZXJ3aXNlIGJhZCBmb3IgYSBib3ksIG5lZWQgbm90IHByZXZlbnQgaGltIGZyb20gYmVjb21pbmcgYSB3b3J0aHkgYW5kIGV4Y2VsbGVudCBtYW4sIGFuZCB0aGF0IGl0IGlzIHdyb25nIGZvciB3b3J0aGxlc3MgbWVuIHRvIGxheSB1cG9uIGl0IHRoZSBibGFtZSBmb3IgdGhlaXIgcGVydmVydGVkIG5hdHVyZXMsIHdoaWNoIGFyZSBkdWUsIGFzIHRoZXkgc2F5LCB0byBlYXJseSBuZWdsZWN0LiBPbiB0aGUgb3RoZXIgaGFuZCwgdGhlIHNhbWUgTWFyY2l1cyBib3JlIHdpdG5lc3MgZm9yIHRob3NlIHdobyBob2xkIHRoYXQgYSBnZW5lcm91cyBhbmQgbm9ibGUgbmF0dXJlLCBpZiBpdCBsYWNrIGRpc2NpcGxpbmUsIGlzIGFwdCB0byBwcm9kdWNlIG11Y2ggdGhhdCBpcyB3b3J0aGxlc3MgYWxvbmcgd2l0aCBpdHMgYmV0dGVyIGZydWl0cywgbGlrZSBhIHJpY2ggc29pbCBkZXByaXZlZCBvZiB0aGUgaHVzYmFuZG1hbidzIGN1bHR1cmUgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoaWxlIHRoZSBmb3JjZSBhbmQgdmlnb3VyIG9mIGhpcyBpbnRlbGxpZ2VuY2UsIHdoaWNoIGtuZXcgbm8gbGltaXRhdGlvbnMsIGxlZCBoaW0gaW50byBncmVhdCB1bmRlcnRha2luZ3MsIGFuZCBzdWNoIGFzIHdlcmUgcHJvZHVjdGl2ZSBvZiB0aGUgaGlnaGVzdCByZXN1bHRzLCBzdGlsbCwgb24gdGhlIG90aGVyIGhhbmQsIHNpbmNlIGhlIGluZHVsZ2VkIGEgdmVoZW1lbnQgdGVtcGVyIGFuZCBkaXNwbGF5ZWQgYW4gdW5zd2VydmluZyBwZXJ0aW5hY2l0eSwgaXQgbWFkZSBoaW0gYSBkaWZmaWN1bHQgYW5kIHVuc3VpdGFibGUgYXNzb2NpYXRlIGZvciBvdGhlcnMuIFRoZXkgZGlkIGluZGVlZCBsb29rIHdpdGggYWRtaXJhdGlvbiB1cG9uIGhpcyBpbnNlbnNpYmlsaXR5IHRvIHBsZWFzdXJlcywgdG9pbHMsIGFuZCBtZXJjZW5hcnkgZ2FpbnMsIHRvIHdoaWNoIHRoZXkgZ2F2ZSB0aGUgbmFtZXMgb2Ygc2VsZi1jb250cm9sLCBmb3J0aXR1ZGUsIGFuZCBqdXN0aWNlOyBidXQgaW4gdGhlaXIgaW50ZXJjb3Vyc2Ugd2l0aCBoaW0gYXMgYSBmZWxsb3ctY2l0aXplbiB0aGV5IHdlcmUgb2ZmZW5kZWQgYnkgaXQgYXMgdW5ncmFjaW91cywgYnVyZGVuc29tZSwgYW5kIGFycm9nYW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5WZXJpbHksIGFtb25nIGFsbCB0aGUgYmVuZWZpdHMgd2hpY2ggbWVuIGRlcml2ZSBmcm9tIHRoZSBmYXZvdXIgb2YgdGhlIE11c2VzLCBub25lIG90aGVyIGlzIHNvIGdyZWF0IGFzIHRoYXQgc29mdGVuaW5nIG9mIHRoZSBuYXR1cmUgd2hpY2ggaXMgcHJvZHVjZWQgYnkgY3VsdHVyZSBhbmQgZGlzY2lwbGluZSwgdGhlIG5hdHVyZSBiZWluZyBpbmR1Y2VkIGJ5IGN1bHR1cmUgdG8gdGFrZSBvbiBtb2RlcmF0aW9uIGFuZCBjYXN0IG9mZiBleGNlc3MuIEl0IGlzIHBlcmZlY3RseSB0cnVlLCBob3dldmVyLCB0aGF0IGluIHRob3NlIGRheXMgUm9tZSBoZWxkIGluIGhpZ2hlc3QgaG9ub3VyIHRoYXQgcGhhc2Ugb2YgdmlydHVlIHdoaWNoIGNvbmNlcm5zIGl0c2VsZiB3aXRoIHdhcmxpa2UgYW5kIG1pbGl0YXJ5IGFjaGlldmVtZW50cywgYW5kIGV2aWRlbmNlIG9mIHRoaXMgbWF5IGJlIGZvdW5kIGluIHRoZSBvbmx5IExhdGluIHdvcmQgZm9yIHZpcnR1ZSwgd2hpY2ggc2lnbmlmaWVzIHJlYWxseSA8ZW1waD5tYW5seSB2YWxvdXI8L2VtcGg+OyB0aGV5IG1hZGUgdmFsb3VyLCBhIHNwZWNpZmljIGZvcm0gb2YgdmlydHVlLCBzdGFuZCBmb3IgdmlydHVlIGluIGdlbmVyYWwuCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUFuZCBzbyBNYXJjaXVzLCB3aG8gd2FzIGJ5IG5hdHVyZSBleGNlZWRpbmdseSBmb25kIG9mIHdhcmxpa2UgZmVhdHMsIGJlZ2FuIGF0IG9uY2UsIGZyb20gaGlzIHZlcnkgYm95aG9vZCwgdG8gaGFuZGxlIGFybXMuIEFuZCBzaW5jZSBoZSB0aG91Z2h0IHRoYXQgYWR2ZW50aXRpb3VzIHdlYXBvbnMgd2VyZSBvZiBsaXR0bGUgYXZhaWwgdG8gc3VjaCBhcyBkaWQgbm90IGhhdmUgdGhlaXIgbmF0dXJhbCBhbmQgbmF0aXZlIGFybW91ciBkZXZlbG9wZWQgYW5kIHByZXBhcmVkIGZvciBzZXJ2aWNlLCBoZSBzbyBwcmFjdGlzZWQgaGltc2VsZiBpbiBldmVyeSBzb3J0IG9mIGNvbWJhdCB0aGF0IGhlIHdhcyBub3Qgb25seSBuaW1ibGUgb2YgZm9vdCwgYnV0IGhhZCBhbHNvIHN1Y2ggYSB3ZWlnaHQgaW4gZ3JhcHBsaW5ncyBhbmQgd3Jlc3RsaW5ncyB0aGF0IGFuIGVuZW15IGZvdW5kIGl0IGhhcmQgdG8gZXh0cmljYXRlIGhpbXNlbGYuIEF0IGFueSByYXRlLCB0aG9zZSB3aG8gZnJvbSB0aW1lIHRvIHRpbWUgY29udGVuZGVkIHdpdGggaGltIGluIGZlYXRzIG9mIGNvdXJhZ2UgYW5kIHZhbG91ciwgbGFpZCB0aGUgYmxhbWUgZm9yIHRoZWlyIGluZmVyaW9yaXR5IHVwb24gaGlzIHN0cmVuZ3RoIG9mIGJvZHksIHdoaWNoIHdhcyBpbmZsZXhpYmxlIGFuZCBzaHJhbmsgZnJvbSBubyBoYXJkc2hpcC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgbWFkZSBoaXMgZmlyc3QgY2FtcGFpZ24gd2hpbGUgeWV0IGEgc3RyaXBsaW5nLCB3aGVuIFRhcnF1aW4sIHdobyBoYWQgYmVlbiBraW5nIG9mIFJvbWUsIGFuZCB0aGVuIGhhZCBiZWVuIGV4cGVsbGVkLCBhZnRlciBtYW55IHVuc3VjY2Vzc2Z1bCBiYXR0bGVzLCBzdGFrZWQgaGlzIGFsbCwgYXMgaXQgd2VyZSwgdXBvbiBhIGZpbmFsIHRocm93LiBNb3N0IG9mIHRoZSBwZW9wbGUgb2YgTGF0aXVtIGFuZCBtYW55IGFsc28gb2YgdGhlIG90aGVyIHBlb3BsZXMgb2YgSXRhbHkgd2VyZSBhc3Npc3RpbmcgaGltIGFuZCBtYXJjaGluZyB3aXRoIGhpbSB1cG9uIFJvbWUsIHRvIHJlaW5zdGF0ZSBoaW0gdGhlcmUsIG5vdCBzbyBtdWNoIGZyb20gYSBkZXNpcmUgdG8gZ3JhdGlmeSBoaW0sIGFzIGJlY2F1c2UgZmVhciBhbmQgZW52eSBsZWQgdGhlbSB0byB0cnkgdG8gb3ZlcnRocm93IHRoZSBncm93aW5nIHBvd2VyIG9mIHRoZSBSb21hbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBlbnN1aW5nIGJhdHRsZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5CeSBMYWtlIFJlZ2lsbHVzLCA0OTggKD8pIEIuQy48L25vdGU+IHdoaWNoIGxvbmcgZmF2b3VyZWQgbm93IHRoaXMgc2lkZSBhbmQgbm93IHRoYXQsIE1hcmNpdXMsIHdobyB3YXMgZmlnaHRpbmcgc3R1cmRpbHkgdW5kZXIgdGhlIGV5ZXMgb2YgdGhlIGRpY3RhdG9yLCBzYXcgYSBSb21hbiBzb2xkaWVyIHN0cnVjayBkb3duIG5lYXIgYnkuIEhlIHJhbiB0byBoaW0gYXQgb25jZSwgc3Rvb2QgaW4gZnJvbnQgb2YgaGltLCBkZWZlbmRlZCBoaW0sIGFuZCBzbGV3IGhpcyBhc3NhaWxhbnQuIEFjY29yZGluZ2x5LCBhZnRlciB0aGUgUm9tYW4gZ2VuZXJhbCBoYWQgd29uIHRoZSBkYXksIGhlIGNyb3duZWQgTWFyY2l1cywgYW1vbmcgdGhlIGZpcnN0LCB3aXRoIGEgZ2FybGFuZCBvZiBvYWsgbGVhdmVzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpcyB0aGUgY2l2aWMgY3Jvd24gd2hpY2ggdGhlIGxhdyBiZXN0b3dzIHVwb24gb25lIHdobyBoYXMgc2F2ZWQgdGhlIGxpZmUgb2YgYSBmZWxsb3ctY2l0aXplbiBpbiBiYXR0bGUsIGVpdGhlciBiZWNhdXNlIHRoZSBvYWsgd2FzIGhlbGQgaW4gc3BlY2lhbCBob25vdXIgZm9yIHRoZSBzYWtlIG9mIHRoZSBBcmNhZGlhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RWFybHkgY29sb25pc3RzIG9mIFJvbWUsIHVuZGVyIEV2YW5kZXIuPC9ub3RlPiB3aG8gd2VyZSBjYWxsZWQgYWNvcm4tZWF0ZXJzIGluIGFuIG9yYWNsZSBvZiBBcG9sbG87PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDEuNjYiIHZhbGlkPSJ5ZXMiPkhlcm9kb3R1cywgaS4gNjYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG9yIGJlY2F1c2UgdGhleSBjb3VsZCBzcGVlZGlseSBmaW5kIGFuIGFidW5kYW5jZSBvZiBvYWsgd2hlcmV2ZXIgdGhleSBmb3VnaHQ7IG9yIGJlY2F1c2UgaXQgd2FzIHRob3VnaHQgdGhhdCB0aGUgZ2FybGFuZCBvZiBvYWsgbGVhdmVzLCBiZWluZyBzYWNyZWQgdG8gSnVwaXRlciwgdGhlIGNpdHkncyBndWFyZGlhbiwgd2FzIGZpdHRpbmdseSBiZXN0b3dlZCB1cG9uIG9uZSB3aG8gc2F2ZWQgdGhlIGxpZmUgb2YgYSBjaXRpemVuLiBUaGUgb2FrLCBtb3Jlb3ZlciwgaGFzIHRoZSBtb3N0IGJlYXV0aWZ1bCBmcnVpdCBvZiBhbGwgd2lsZCB0cmVlcywgYW5kIGlzIHRoZSBzdHVyZGllc3Qgb2YgYWxsIHRyZWVzIHVuZGVyIGN1bHRpdmF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdHMgYWNvcm4gdXNlZCB0byBiZSBmb29kLCBhbmQgdGhlIGhvbmV5IGZvdW5kIGluIGl0IHVzZWQgdG8gYmUgZHJpbms8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc2hhcGUgb2YgbWVhZC48L25vdGU+IGZvciBtZW47IGFuZCBpdCBmdXJuaXNoZWQgdGhlbSB3aXRoIHRoZSBmbGVzaCBvZiBtb3N0IGdyYXppbmcgY3JlYXR1cmVzIGFuZCBiaXJkcywgc2luY2UgaXQgYm9yZSB0aGUgbWlzdGxldG9lLCBmcm9tIHdoaWNoIHRoZXkgbWFkZSBiaXJkLWxpbWUgZm9yIHNuYXJlcy4KCQkJPC9wPgogICAgICAgICA8cD5JbiB0aGUgYmF0dGxlIG9mIHdoaWNoIEkgd2FzIHNwZWFraW5nLCBpdCBpcyBzYWlkIHRoYXQgQ2FzdG9yIGFuZCBQb2xsdXggYXBwZWFyZWQsIGFuZCB0aGF0IGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBiYXR0bGUgdGhleSB3ZXJlIHNlZW4sIHRoZWlyIGhvcnNlcyBhbGwgYS1kcmlwIHdpdGggc3dlYXQsIGluIHRoZSBmb3J1bSwgYW5ub3VuY2luZyB0aGUgdmljdG9yeSwgYnkgdGhlIGZvdW50YWluIHdoZXJlIHRoZWlyIHRlbXBsZSBub3cgc3RhbmRzLgoJCQkJVGhlcmVmb3JlIHRoZSBkYXkgb24gd2hpY2ggdGhpcyB2aWN0b3J5IHdhcyB3b24sIHRoZSBJZGVzIG9mIEp1bHksIHdhcyBjb25zZWNyYXRlZCB0byB0aGUgRGlvc2N1cmkuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdvdWxkIHNlZW0gdGhhdCB3aGVuIGEgeW91bmcgbWFuJ3MgYW1iaXRpb24gaXMgbm8gaW50ZWdyYWwgcGFydCBvZiBoaXMgbmF0dXJlLCBpdCBpcyBhcHQgdG8gYmUgcXVlbmNoZWQgYnkgYW4gaG9ub3VyYWJsZSBkaXN0aW5jdGlvbiB3aGljaCBpcyBhdHRhaW5lZCB0b28gZWFybHkgaW4gbGlmZTsgaGlzIHRoaXJzdCBhbmQgZmFzdGlkaW91cyBhcHBldGl0ZSBhcmUgc3BlZWRpbHkgc2F0aXNmaWVkLiBCdXQgc2VyaW91cyBhbmQgZmlybSBzcGlyaXRzIGFyZSBzdGltdWxhdGVkIGJ5IHRoZSBob25vdXJzIHRoZXkgcmVjZWl2ZSwgYW5kIGdsb3cgYnJpZ2h0bHksIGFzIGlmIHJvdXNlZCBieSBhIG1pZ2h0eSB3aW5kIHRvIGFjaGlldmUgdGhlIG1hbmlmZXN0IGdvb2QuIFRoZXkgZG8gbm90IGZlZWwgdGhhdCB0aGV5IGFyZSByZWNlaXZpbmcgYSByZXdhcmQgZm9yIHdoYXQgdGhleSBoYXZlIGRvbmUsIGJ1dCByYXRoZXIgdGhhdCB0aGV5IGFyZSBnaXZpbmcgcGxlZGdlcyBvZiB3aGF0IHRoZXkgd2lsbCBkbywgYW5kIHRoZXkgYXJlIGFzaGFtZWQgdG8gZmFsbCBiZWhpbmQgdGhlaXIgcmVwdXRhdGlvbiBpbnN0ZWFkIG9mIHN1cnBhc3NpbmcgaXQgYnkgdGhlaXIgYWN0dWFsIGV4cGxvaXRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgaW4gdGhpcyBzcGlyaXQgdGhhdCBNYXJjaXVzIHZpZWQgd2l0aCBoaW1zZWxmIGluIG1hbmx5IHZhbG91ciwgYW5kIGJlaW5nIGV2ZXIgZGVzaXJvdXMgb2YgZnJlc2ggYWNoaWV2ZW1lbnQsIGhlIGZvbGxvd2VkIG9uZSBleHBsb2l0IHdpdGggYW5vdGhlciwgYW5kIGhlYXBlZCBzcG9pbHMgdXBvbiBzcG9pbHMsIHNvIHRoYXQgaGlzIGxhdGVyIGNvbW1hbmRlcnMgd2VyZSBhbHdheXMgc3RyaXZpbmcgd2l0aCB0aGVpciBwcmVkZWNlc3NvcnMgaW4gdGhlaXIgZWZmb3J0cyB0byBkbyBoaW0gaG9ub3VyLCBhbmQgdG8gc3VycGFzcyBpbiB0aGVpciB0ZXN0aW1vbmlhbHMgdG8gaGlzIHByb3dlc3MuIE1hbnkgaW5kZWVkIHdlcmUgdGhlIHdhcnMgYW5kIGNvbmZsaWN0cyB3aGljaCB0aGUgUm9tYW5zIHdhZ2VkIGluIHRob3NlIGRheXMsIGFuZCBmcm9tIG5vbmUgZGlkIGhlIHJldHVybiB3aXRob3V0IGxhdXJlbHMgYW5kIHJld2FyZHMgb2YgdmFsb3VyLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZXJlYXMgb3RoZXIgbWVuIGZvdW5kIGluIGdsb3J5IHRoZSBjaGllZiBlbmQgb2YgdmFsb3VyLCBoZSBmb3VuZCB0aGUgY2hpZWYgZW5kIG9mIGdsb3J5IGluIGhpcyBtb3RoZXIncyBnbGFkbmVzcy4gVGhhdCBzaGUgc2hvdWxkIGhlYXIgaGltIHByYWlzZWQgYW5kIHNlZSBoaW0gY3Jvd25lZCBhbmQgZW1icmFjZSBoaW0gd2l0aCB0ZWFycyBvZiBqb3ksIHRoaXMgd2FzIHdoYXQgZ2F2ZSBoaW0sIGFzIGhlIHRob3VnaHQsIHRoZSBoaWdoZXN0IGhvbm91ciBhbmQgZmVsaWNpdHkuIEFuZCBpdCB3YXMgZG91YnRsZXNzIHRoaXMgZmVlbGluZyB3aGljaCBFcGFtaW5vbmRhcyBhbHNvIGlzIHNhaWQgdG8gaGF2ZSBjb25mZXNzZWQsIGluIGNvbnNpZGVyaW5nIGl0IGhpcyBncmVhdGVzdCBnb29kIGZvcnR1bmUgdGhhdCBoaXMgZmF0aGVyIGFuZCBtb3RoZXIgbGl2ZWQgdG8ga25vdyBvZiBoaXMgZ2VuZXJhbHNoaXAgYW5kIHZpY3RvcnkgYXQgTGV1Y3RyYS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIHdhcyBzbyBibGVzc2VkIGFzIHRvIGhhdmUgYm90aCBoaXMgcGFyZW50cyBzaGFyZSBpbiBoaXMgcGxlYXN1cmUgYW5kIHN1Y2Nlc3MsIHdoZXJlYXMgTWFyY2l1cywgd2hvIHRob3VnaHQgaGUgb3dlZCBoaXMgbW90aGVyIHRoZSBmaWxpYWwgZ3JhdGl0dWRlIGFsc28gd2hpY2ggd291bGQgaGF2ZSBiZWVuIGR1ZSB0byBoaXMgZmF0aGVyLCBjb3VsZCBub3QgZ2V0IGhpcyBmaWxsIG9mIGdsYWRkZW5pbmcgYW5kIGhvbm91cmluZyBWb2x1bW5pYSwgbmF5LCBoZSBldmVuIG1hcnJpZWQgYWNjb3JkaW5nIHRvIGhlciB3aXNoIGFuZCByZXF1ZXN0LCBhbmQgY29udGludWVkIHRvIGxpdmUgaW4gdGhlIHNhbWUgaG91c2Ugd2l0aCBoaXMgbW90aGVyIGFmdGVyIGNoaWxkcmVuIHdlcmUgYm9ybiB0byBoaW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXB1dGF0aW9uIGFuZCBpbmZsdWVuY2UgcHJvY3VyZWQgYnkgaGlzIHZhbG91ciB3ZXJlIGFscmVhZHkgZ3JlYXQgaW4gdGhlIGNpdHksIHdoZW4gdGhlIHNlbmF0ZSwgdGFraW5nIHRoZSBwYXJ0IG9mIHRoZSB3ZWFsdGh5IGNpdGl6ZW5zLCBiZWdhbiB0byBiZSBhdCB2YXJpYW5jZSB3aXRoIHRoZSBjb21tb24gcGVvcGxlLCB3aG8gdGhvdWdodCB0aGV5IHN1ZmZlcmVkIG1hbnkgZ3JpZXZvdXMgaWxscyBhdCB0aGUgaGFuZHMgb2YgdGhlIG1vbmV5LWxlbmRlcnMuIEZvciB0aG9zZSBvZiB0aGVtIHRoYXQgd2VyZSBwb3NzZXNzZWQgb2YgbW9kZXJhdGUgbWVhbnMgd2VyZSBzdHJpcHBlZCBvZiBhbGwgdGhleSBoYWQgYnkgbWVhbnMgb2YgcGxlZGdlcyBhbmQgc2FsZXMsIHdoaWxlIHRob3NlIHdobyB3ZXJlIGFsdG9nZXRoZXIgd2l0aG91dCByZXNvdXJjZXMgd2VyZSBsZWQgYXdheSBpbiBwZXJzb24gYW5kIHB1dCBpbiBwcmlzb24sIGFsdGhvdWdoIHRoZWlyIGJvZGllcyBib3JlIG1hbnkgbWFya3Mgb2Ygd291bmRzIHJlY2VpdmVkIGFuZCBoYXJkc2hpcHMgdW5kZXJnb25lIGluIGNhbXBhaWducyBmb3IgdGhlIGRlZmVuY2Ugb2YgdGhlaXIgY291bnRyeS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGxhc3Qgb2YgdGhlc2UgaGFkIGJlZW4gYWdhaW5zdCB0aGUgU2FiaW5lcywgYW5kIHRoZXkgaGFkIHVuZGVydGFrZW4gaXQgdXBvbiBhIHByb21pc2Ugb2YgdGhlaXIgd2VhbHRoaWVzdCBjcmVkaXRvcnMgdG8gZGVhbCBtb2RlcmF0ZWx5IHdpdGggdGhlbSwgYW5kIGFmdGVyIGEgdm90ZSBvZiB0aGUgc2VuYXRlIHRoYXQgTWFyY3VzIFZhbGVyaXVzLCB0aGUgY29uc3VsLCBzaG91bGQgZ3VhcmFudGVlIHRoZSBwcm9taXNlLiBCdXQgYWZ0ZXIgdGhleSBoYWQgZm91Z2h0IHplYWxvdXNseSBpbiB0aGF0IGJhdHRsZSBhbHNvLCBhbmQgaGFkIGNvbnF1ZXJlZCB0aGUgZW5lbXksIG5vIGNvbnNpZGVyYXRpb24gd2FzIHNob3duIHRoZW0gYnkgdGhlaXIgY3JlZGl0b3JzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlIHNlbmF0ZSBkaWQgbm90IGV2ZW4gcHJldGVuZCB0byByZW1lbWJlciBpdHMgYWdyZWVtZW50cywgYnV0IGFnYWluIHN1ZmZlcmVkIHRoZW0gdG8gYmUgc2VpemVkIGluIHBsZWRnZSBvZiBwYXltZW50cyBhbmQgaGFsZWQgYXdheSB0byBwcmlzb24uIFRoZW4gdGhlcmUgd2VyZSB0dW11bHRzIGFuZCBkaXNvcmRlcmx5IGdhdGhlcmluZ3MgaW4gdGhlIGNpdHksIGFuZCB0aGUgZW5lbXksIG5vdCB1bmF3YXJlIG9mIHRoZSBwb3B1bGFyIGNvbmZ1c2lvbiwgYnVyc3QgaW4gYW5kIHJhdmFnZWQgdGhlIGNvdW50cnksIGFuZCB3aGVuIHRoZSBjb25zdWxzIHN1bW1vbmVkIHRob3NlIG9mIG1pbGl0YXJ5IGFnZSB0byBhcm1zLCBubyBvbmUgcmVzcG9uZGVkLiBJbiB0aGlzIGNyaXNpcywgdGhlIG9waW5pb25zIG9mIHRob3NlIGluIGF1dGhvcml0eSB3ZXJlIGFnYWluIGF0IHZhcmlhbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIHRob3VnaHQgdGhhdCBjb25jZXNzaW9ucyBzaG91bGQgYmUgbWFkZSB0byB0aGUgcGxlYmVpYW5zLCBhbmQgdGhlIGV4Y2Vzc2l2ZSByaWdvciBvZiB0aGUgbGF3IHJlbGF4ZWQ7IGJ1dCBvdGhlcnMgb3Bwb3NlZCB0aGlzLCBhbmQgYW1vbmcgdGhlbSB3YXMgTWFyY2l1cy4gSGUgZGlkIG5vdCByZWdhcmQgdGhlIGZpbmFuY2lhbCBkaWZmaWN1bHRpZXMgYXMgdGhlIG1haW4gcG9pbnQgYXQgaXNzdWUsIGFuZCBleGhvcnRlZCB0aGUgbWFnaXN0cmF0ZXMgdG8gYmUgd2lzZSBlbm91Z2ggdG8gY2hlY2sgYW5kIHF1ZWxsIHRoaXMgaW5jaXBpZW50IGF0dGVtcHQgYXQgYm9sZCBvdXRyYWdlIG9uIHRoZSBwYXJ0IG9mIGEgcG9wdWxhY2UgaW4gcmV2b2x0IGFnYWluc3QgdGhlIGxhd3MuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgbWV0IHRvIGRlYmF0ZSB0aGlzIHF1ZXN0aW9uIG1hbnkgdGltZXMgd2l0aGluIHRoZSBzcGFjZSBvZiBhIGZldyBkYXlzLCBidXQgY2FtZSB0byBubyBkZWZpbml0ZSBjb25jbHVzaW9uLiBUaGUgcGxlYmVpYW5zIHRoZXJlZm9yZSBiYW5kZWQgdG9nZXRoZXIgb24gYSBzdWRkZW4sIGFuZCBhZnRlciBtdXR1YWwgZXhob3J0YXRpb25zIGZvcnNvb2sgdGhlIGNpdHksIGFuZCB0YWtpbmcgcG9zc2Vzc2lvbiBvZiB3aGF0IGlzIG5vdyBjYWxsZWQgdGhlIFNhY3JlZCBNb3VudCwgZXN0YWJsaXNoZWQgdGhlbXNlbHZlcyBiZXNpZGUgdGhlIHJpdmVyIEFuaW8uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhyZWUgbWlsZXMgZnJvbSB0aGUgY2l0eSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zMi4yIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gMzIsIDI8L2JpYmw+KS48L25vdGU+IFRoZXkgY29tbWl0dGVkIG5vIGFjdHMgb2YgdmlvbGVuY2Ugb3Igc2VkaXRpb24sIGJ1dCBvbmx5IGNyaWVkIGFsb3VkIHRoYXQgdGhleSBoYWQgZm9yIGEgbG9uZyB0aW1lIGJlZW4gYmFuaXNoZWQgZnJvbSB0aGUgY2l0eSBieSB0aGUgcmljaCwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoYXQgSXRhbHkgd291bGQgZXZlcnl3aGVyZSBhZmZvcmQgdGhlbSBhaXIsIHdhdGVyLCBhbmQgYSBwbGFjZSBvZiBidXJpYWwsIHdoaWNoIHdhcyBhbGwgdGhleSBoYWQgaWYgdGhleSBkd2VsdCBpbiBSb21lLCBleGNlcHQgZm9yIHRoZSBwcml2aWxlZ2Ugb2Ygd291bmRzIGFuZCBkZWF0aCBpbiBjYW1wYWlnbnMgZm9yIHRoZSBkZWZlbmNlIG9mIHRoZSByaWNoLgoJCQk8L3A+CiAgICAgICAgIDxwPlRoZXNlIHByb2NlZWRpbmdzIGFsYXJtZWQgdGhlIHNlbmF0ZSwgYW5kIGl0IHNlbnQgb3V0IHRob3NlIG9mIGl0cyBvbGRlciBtZW1iZXJzIHdobyB3ZXJlIG1vc3QgcmVhc29uYWJseSBkaXNwb3NlZCB0b3dhcmRzIHRoZSBwZW9wbGUgdG8gdHJlYXQgd2l0aCB0aGVtLiBUaGUgY2hpZWYgc3Bva2VzbWFuIHdhcyBNZW5lbml1cyBBZ3JpcHBhLCBhbmQgYWZ0ZXIgbXVjaCBlbnRyZWF0eSBvZiB0aGUgcGVvcGxlIGFuZCBtdWNoIHBsYWluIHNwZWFraW5nIGluIGJlaGFsZiBvZiB0aGUgc2VuYXRlLCBoZSBjb25jbHVkZWQgaGlzIGRpc2NvdXJzZSB3aXRoIGEgY2VsZWJyYXRlZCBmYWJsZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgc2FpZCwgbmFtZWx5LCB0aGF0IGFsbCB0aGUgb3RoZXIgbWVtYmVycyBvZiBtYW4ncyBib2R5IG9uY2UgcmV2b2x0ZWQgYWdhaW5zdCB0aGUgYmVsbHksIGFuZCBhY2N1c2VkIGl0IG9mIGJlaW5nIHRoZSBvbmx5IG1lbWJlciB0byBzaXQgaWRseSBkb3duIGluIGl0cyBwbGFjZSBhbmQgbWFrZSBubyBjb250cmlidXRpb24gdG8gdGhlIGNvbW1vbiB3ZWxmYXJlLCB3aGlsZSB0aGUgcmVzdCB1bmRlcndlbnQgZ3JlYXQgaGFyZHNoaXBzIGFuZCBwZXJmb3JtZWQgZ3JlYXQgcHVibGljIHNlcnZpY2VzIG9ubHkgdG8gbWluaXN0ZXIgdG8gaXRzIGFwcGV0aXRlczsgYnV0IHRoYXQgdGhlIGJlbGx5IGxhdWdoZWQgYXQgdGhlaXIgc2ltcGxpY2l0eSBpbiBub3Qga25vd2luZyB0aGF0IGl0IHJlY2VpdmVkIGludG8gaXRzZWxmIGFsbCB0aGUgYm9keSdzIG5vdXJpc2htZW50IG9ubHkgdG8gc2VuZCBpdCBiYWNrIGFnYWluIGFuZCBkdWx5IGRpc3RyaWJ1dGUgaXQgYW1vbmcgdGhlIG90aGVyIG1lbWJlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TdWNoLCB0aGVuLDwvcT4gc2FpZCBBZ3JpcHBhLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlzIHRoZSByZWxhdGlvbiBvZiB0aGUgc2VuYXRlLCBteSBmZWxsb3ctY2l0aXplbnMsIHRvIHlvdTsgdGhlIG1hdHRlcnMgZm9yIGRlbGliZXJhdGlvbiB3aGljaCB0aGVyZSByZWNlaXZlIHRoZSBuZWNlc3NhcnkgYXR0ZW50aW9uIGFuZCBkaXNwb3NpdGlvbiBicmluZyB0byB5b3UgYWxsIGFuZCBzZXZlcmFsbHkgd2hhdCBpcyB1c2VmdWwgYW5kIGhlbHBmdWwuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zMi45IiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gMzIsIDktMTE8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA2Ljg2Ij5EaW9ueXNpdXMgSGFsLiwgPHRpdGxlPkFudGlxLiBSb20uPC90aXRsZT4gdmkuIDg2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSByZWNvbmNpbGlhdGlvbiBmb2xsb3dlZCwgYWZ0ZXIgdGhlIHBlb3BsZSBoYWQgYXNrZWQgYW5kIG9idGFpbmVkIGZyb20gdGhlIHNlbmF0ZSB0aGUgcHJpdmlsZWdlIG9mIGVsZWN0aW5nIGZpdmUgbWVuIGFzIHByb3RlY3RvcnMgb2YgdGhvc2Ugd2hvIG5lZWRlZCBzdWNjb3VyLCB0aGUgb2ZmaWNlcnMgbm93IGNhbGxlZCB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLiBBbmQgdGhlIGZpcnN0IHdob20gdGhleSBjaG9zZSB0byB0aGlzIG9mZmljZSB3ZXJlIEp1bml1cyBCcnV0dXMgYW5kIFNpY2luaXVzIFZlbGx1dHVzLCB3aG8gaGFkIGJlZW4gdGhlaXIgbGVhZGVycyBpbiB0aGUgc2VjZXNzaW9uLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjMzLjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzMywgMS0zLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBXaGVuIHRoZSBjaXR5IHdhcyB0aHVzIHVuaXRlZCwgdGhlIGNvbW1vbiBwZW9wbGUgYXQgb25jZSBvZmZlcmVkIHRoZW1zZWx2ZXMgYXMgc29sZGllcnMsIGFuZCB0aGUgY29uc3VscyBmb3VuZCB0aGVtIHJlYWR5IGFuZCBlYWdlciBmb3Igc2VydmljZSBpbiB0aGUgd2FyLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIE1hcmNpdXMsIHRob3VnaCBoZSB3YXMgZGlzcGxlYXNlZCBoaW1zZWxmIHRvIGhhdmUgdGhlIHBlb3BsZSBpbmNyZWFzZSBpbiBwb3dlciBhdCB0aGUgZXhwZW5zZSBvZiB0aGUgYXJpc3RvY3JhY3ksIGFuZCB0aG91Z2ggaGUgc2F3IHRoYXQgbWFueSBvZiB0aGUgb3RoZXIgcGF0cmljaWFucyB3ZXJlIG9mIHRoZSBzYW1lIG1pbmQsIGhlIG5ldmVydGhlbGVzcyBleGhvcnRlZCB0aGVtIG5vdCB0byBmYWxsIGJlaGluZCB0aGUgY29tbW9uIHBlb3BsZSBpbiBjb250ZW5kaW5nIGZvciB0aGVpciBjb3VudHJ5J3Mgd2VsZmFyZSwgYnV0IHRvIHNob3cgdGhhdCB0aGV5IHdlcmUgc3VwZXJpb3IgdG8gdGhlbSBpbiB2YWxvdXIgcmF0aGVyIHRoYW4gaW4gcG9saXRpY2FsIHBvd2VyLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbW9uZyB0aGUgVm9sc2NpYW5zLCB3aXRoIHdob20gdGhlIFJvbWFucyB3ZXJlIGF0IHdhciwgdGhlIGNpdHkgb2YgQ29yaW9saSB0b29rIGhpZ2hlc3QgcmFuay4gV2hlbiwgdGhlcmVmb3JlLCBDb21pbml1cyB0aGUgY29uc3VsIGhhZCBpbnZlc3RlZCB0aGlzIHBsYWNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IGlzIGluIGNvbm5lY3Rpb24gd2l0aCB0aGUgYXR0YWNrIG9uIENvcm9saSB0aGF0IExpdnkgZmlyc3QgbWVudGlvbnMgTWFyY2l1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zMy41IiB2YWxpZD0ieWVzIj5paS4gMzMsIDUtOTwvYmlibD4pOyBhbHNvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDYuOTIiPkRpb255c2l1cyBIYWwuICh2aS4gOTIpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGUgcmVzdCBvZiB0aGUgVm9sc2NpYW5zLCBmZWFyaW5nIGZvciBpdHMgc2FmZXR5LCBjYW1lIHRvIGl0cyBhaWQgYWdhaW5zdCB0aGUgUm9tYW5zIGZyb20gYWxsIHBhcnRzLCBkZXNpZ25pbmcgdG8gZ2l2ZSB0aGVtIGJhdHRsZSBpbiBmcm9udCBvZiB0aGUgY2l0eSBhbmQgdG8gYXR0YWNrIHRoZW0gb24gYm90aCBzaWRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmV1cG9uIENvbWluaXVzIGRpdmlkZWQgaGlzIGZvcmNlcywgZ29pbmcgZm9ydGggaGltc2VsZiB0byBtZWV0IHRoZSBWb2xzY2lhbnMgd2hvIHdlcmUgY29taW5nIHVwIG91dHNpZGUsIGFuZCBsZWF2aW5nIFRpdHVzIExhcnRpdXMsIG9uZSBvZiB0aGUgYnJhdmVzdCBSb21hbnMgb2YgaGlzIGRheSwgaW4gY2hhcmdlIG9mIHRoZSBzaWVnZS4gVGhlbiB0aGUgbWVuIG9mIENvcmlvbGksIGRlc3Bpc2luZyB0aGUgZm9yY2VzIHRoYXQgd2VyZSBsZWZ0LCBzYWxsaWVkIG91dCBhZ2FpbnN0IHRoZW0sIG92ZXJjYW1lIHRoZW0gaW4gYmF0dGxlIGF0IGZpcnN0LCBhbmQgcHVyc3VlZCB0aGUgUm9tYW5zIHRvIHRoZWlyIGNhbXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQgTWFyY2l1cyBkYXJ0ZWQgb3V0IHdpdGggYSBzbWFsbCBiYW5kLCBhbmQgYWZ0ZXIgc2xheWluZyB0aG9zZSB3aG8gY2FtZSB0byBjbG9zZSBxdWFydGVycyBhbmQgYnJpbmdpbmcgdGhlIHJlc3Qgb2YgdGhlIGFzc2FpbGFudHMgdG8gYSBoYWx0LCBjYWxsZWQgdGhlIFJvbWFucyBiYWNrIHRvIHRoZSBmaWdodCB3aXRoIGxvdWQgY3JpZXMuIEZvciBoZSBoYWQsIGFzIENhdG8gdGhvdWdodCBhIHNvbGRpZXIgc2hvdWxkIGhhdmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1hLiAxLjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2F0byB0aGUgRWxkZXI8L3RpdGxlPiwgaS4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbm90IG9ubHkgYSB2aWdvdXIgb2Ygc3Ryb2tlLCBidXQgYSB2b2ljZSBhbmQgbG9vayB3aGljaCBtYWRlIGhpbSBhIGZlYXJmdWwgbWFuIGZvciBhIGZvZSB0byBlbmNvdW50ZXIsIGFuZCBoYXJkIHRvIHdpdGhzdGFuZC4gTWFueSBvZiBoaXMgbWVuIHJhbGxpZWQgdG8gc3VwcG9ydCBoaW0sIGFuZCB0aGUgZW5lbXkgd2l0aGRyZXcgaW4gdGVycm9yLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHRoaXMsIGhvd2V2ZXIsIGhlIHdhcyBub3Qgc2F0aXNmaWVkLCBidXQgZm9sbG93ZWQgaGFyZCB1cG9uIHRoZW0sIGFuZCBkcm92ZSB0aGVtIGF0IGxhc3QgaW4gaGVhZGxvbmcgZmxpZ2h0LCB1cCB0byB0aGUgZ2F0ZSBvZiB0aGVpciBjaXR5LiBUaGVyZSwgYWx0aG91Z2ggaGUgc2F3IHRoZSBSb21hbnMgdHVybmluZyBiYWNrIGZyb20gdGhlIHB1cnN1aXQsIG5vdyB0aGF0IG1hbnkgbWlzc2lsZXMgZnJvbSB0aGUgd2FsbHMgd2VyZSByZWFjaGluZyB0aGVtLCBhbmQgYWx0aG91Z2ggbm90IGEgbWFuIG9mIHRoZW0gZGFyZWQgdG8gdGhpbmsgb2YgYnVyc3RpbmcgaW50byB0aGUgY2l0eSBhbG9uZyB3aXRoIHRoZSBmdWdpdGl2ZXMsIGZ1bGwgYXMgaXQgd2FzIG9mIGVuZW1pZXMgaW4gYXJtcywgaGUgbmV2ZXJ0aGVsZXNzIHRvb2sgaGlzIHN0YW5kLCBhbmQgZXhob3J0ZWQgYW5kIGVuY291cmFnZWQgdGhlbSB0byB0aGUgZXhwbG9pdCwgY3J5aW5nIG91dCB0aGF0IGZvcnR1bmUgaGFkIG9wZW5lZCB0aGUgY2l0eSBmb3IgdGhlIHB1cnN1ZXJzIHJhdGhlciB0aGFuIGZvciB0aGUgcHVyc3VlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+T25seSBhIGZldyB3ZXJlIHdpbGxpbmcgdG8gZm9sbG93IGhpbSwgYnV0IGhlIHB1c2hlZCBoaXMgd2F5IHRocm91Z2ggdGhlIGVuZW15LCBsZWFwZWQgYWdhaW5zdCB0aGUgZ2F0ZSwgYW5kIGJ1cnN0IGluIGFsb25nIHdpdGggdGhlbSwgbm8gbWFuIGRhcmluZyB0byBvcHBvc2UgaGltIGF0IGZpcnN0IG9yIHJlc2lzdCBoaW0uIFRoZW4sIGhvd2V2ZXIsIHdoZW4gdGhlIGNpdGl6ZW5zIHNhdyB0aGF0IGZldyBvZiB0aGUgZW5lbXkgYWxsIHRvbGQgd2VyZSBpbnNpZGUsIHRoZXkgcmFsbGllZCBhbmQgYXR0YWNrZWQgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+RW52ZWxvcGVkIHRodXMgYnkgZnJpZW5kcyBhbmQgZm9lcyBhbGlrZSwgTWFyY2l1cyBpcyBzYWlkIHRvIGhhdmUgd2FnZWQgYSBjb21iYXQgaW4gdGhlIGNpdHkgd2hpY2gsIGZvciBwcm93ZXNzIG9mIGFybSwgc3BlZWQgb2YgZm9vdCwgYW5kIGRhcmluZyBvZiBzb3VsLCBwYXNzZXMgYWxsIGJlbGllZjsgaGUgb3ZlcndoZWxtZWQgYWxsIHdob20gaGUgYXNzYWlsZWQsIGRyaXZpbmcgc29tZSB0byB0aGUgcmVtb3Rlc3QgcGFydHMgb2YgdGhlIGNpdHksIHdoaWxlIG90aGVycyBnYXZlIHVwIHRoZSBzdHJ1Z2dsZSBhbmQgdGhyZXcgZG93biB0aGVpciBhcm1zLiBUaHVzIGhlIG1hZGUgaXQgYWJ1bmRhbnRseSBzYWZlIGZvciBMYXJ0aXVzIHRvIGxlYWQgdXAgdGhlIFJvbWFucyB3aG8gd2VyZSBvdXRzaWRlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY2l0eSBoYXZpbmcgYmVlbiBjYXB0dXJlZCBpbiB0aGlzIG1hbm5lciwgbW9zdCBvZiB0aGUgc29sZGllcnMgZmVsbCB0byBwbHVuZGVyaW5nIGFuZCBwaWxsYWdpbmcgaXQuIEF0IHRoaXMgTWFyY2l1cyB3YXMgaW5kaWduYW50LCBhbmQgY3JpZWQgb3V0IHRoYXQgaGUgdGhvdWdodCBpdCBhIHNoYW1lLCB3aGVuIHRoZWlyIGNvbnN1bCBhbmQgdGhlaXIgZmVsbG93IGNpdGl6ZW5zIHdobyB3ZXJlIHdpdGggaGltIGhhZCBwZXJoYXBzIGZhbGxlbiBpbiB3aXRoIHRoZSBlbmVteSBhbmQgd2VyZSBmaWdodGluZyBhIGJhdHRsZSB3aXRoIHRoZW0sIHRoYXQgdGhleSBvbiB0aGVpciBwYXJ0IHNob3VsZCBiZSBnb2luZyBhYm91dCBhZnRlciBib290eSwgb3IsIHVuZGVyIHByZXRleHQgb2YgZ2V0dGluZyBib290eSwgc2hvdWxkIHJ1biBhd2F5IGZyb20gdGhlIGRhbmdlci4gT25seSBhIGZldyBwYWlkIGFueSBoZWVkIHRvIGhpcyB3b3Jkcywgd2hlcmV1cG9uIGhlIHRvb2sgdGhvc2Ugd2hvIHdlcmUgd2lsbGluZyB0byBmb2xsb3csIGFuZCBzZXQgb3V0IG9uIHRoZSByb2FkIGJ5IHdoaWNoLCBhcyBoZSBsZWFybmVkLCB0aGUgY29uc3VsJ3MgYXJteSBoYWQgbWFyY2hlZCBiZWZvcmUgaGltLCBvZnRlbiB1cmdpbmcgaGlzIGNvbXBhbmlvbnMgb24gYW5kIGJlc2VlY2hpbmcgdGhlbSBub3QgdG8gc2xhY2tlbiB0aGVpciBlZmZvcnRzLCBhbmQgb2Z0ZW4gcHJheWluZyB0aGUgZ29kcyB0aGF0IGhlIG1pZ2h0IG5vdCBiZSB0b28gbGF0ZSBmb3IgdGhlIGJhdHRsZSwgYnV0IG1pZ2h0IGNvbWUgdXAgaW4gc2Vhc29uIHRvIHNoYXJlIGluIHRoZSBzdHJ1Z2dsZXMgYW5kIHBlcmlscyBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPkl0IHdhcyBhIGN1c3RvbSB3aXRoIHRoZSBSb21hbnMgb2YgdGhhdCB0aW1lLCB3aGVuIHRoZXkgd2VyZSBnb2luZyBpbnRvIGFjdGlvbiwgYW5kIHdlcmUgYWJvdXQgdG8gZ2lyZCB1cCB0aGVpciBjbG9ha3MgYW5kIHRha2UgdXAgdGhlaXIgYnVja2xlcnMsIHRvIG1ha2UgYXQgdGhlIHNhbWUgdGltZSBhbiB1bndyaXR0ZW4gd2lsbCwgbmFtaW5nIHRoZWlyIGhlaXJzIGluIHRoZSBoZWFyaW5nIG9mIHRocmVlIG9yIGZvdXIgd2l0bmVzc2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyBqdXN0IHdoYXQgdGhlIHNvbGRpZXJzIHdlcmUgZG9pbmcgd2hlbiBNYXJjaXVzIG92ZXJ0b29rIHRoZW0sIHRoZSBlbmVteSBiZWluZyBub3cgaW4gc2lnaHQuIEF0IGZpcnN0IHNvbWUgb2YgdGhlbSB3ZXJlIGNvbmZvdW5kZWQgd2hlbiB0aGV5IHNhdyB0aGF0IGhlIGhhZCBhIHNtYWxsIGZvbGxvd2luZyBhbmQgd2FzIGNvdmVyZWQgd2l0aCBibG9vZCBhbmQgc3dlYXQ7IGJ1dCB3aGVuIGhlIHJhbiB0byB0aGUgY29uc3VsIHdpdGggYSBnbGFkIGNvdW50ZW5hbmNlLCBnYXZlIGhpbSBoaXMgaGFuZCwgYW5kIGFubm91bmNlZCB0aGUgY2FwdHVyZSBvZiB0aGUgY2l0eSwgYW5kIHdoZW4gQ29taW5pdXMgZW1icmFjZWQgYW5kIGtpc3NlZCBoaW0sIHRoZW4gdGhleSB3ZXJlIGVuY291cmFnZWQsIHNvbWUgaGVhcmluZyBvZiB0aGUgc3VjY2VzcyB3aGljaCBoYWQgYmVlbiBnYWluZWQsIGFuZCBzb21lIGJ1dCBndWVzc2luZyBhdCBpdCwgYW5kIGFsbCBjYWxsZWQgbG91ZGx5IHVwb24gdGhlIGNvbnN1bCB0byBsZWFkIHRoZW0gaW50byBiYXR0bGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNYXJjaXVzIGFza2VkIENvbWluaXVzIGhvdyB0aGUgZW5lbXkgd2VyZSBhcnJheWVkLCBhbmQgd2hlcmUgdGhlaXIgYmVzdCBmaWdodGluZyBtZW4gd2VyZSBwbGFjZWQuIEFuZCB3aGVuIHRoZSBjb25zdWwgdG9sZCBoaW0gaGUgdGhvdWdodCB0aGUgdHJvb3BzIGluIHRoZSBjZW50cmUgd2VyZSB0aG9zZSBvZiB0aGUgQW50aWF0ZXMsIHdobyB3ZXJlIHRoZSBtb3N0IHdhcmxpa2Ugb2YgYWxsIGFuZCB5aWVsZGVkIHRvIG5vbmUgaW4gYnJhdmVyeSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGFzayBhbmQgZGVtYW5kIG9mIHlvdSwgdGhlbiw8L3E+IHNhaWQgTWFyY2l1cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5wb3N0IHVzIG9wcG9zaXRlIHRoZXNlIG1lbi48L3E+IFRoZSBjb25zdWwsIGFjY29yZGluZ2x5LCBncmFudGVkIGhpcyByZXF1ZXN0LCBhc3RvbmlzaGVkIGF0IGhpcyBhcmRvdXIuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIHNwZWFycyBiZWdhbiB0byBmbHksIE1hcmNpdXMgZGFydGVkIG91dCBiZWZvcmUgdGhlIGxpbmUsIGFuZCB0aGUgVm9sc2NpYW5zIHdobyBmYWNlZCBoaW0gY291bGQgbm90IHdpdGhzdGFuZCBoaXMgY2hhcmdlLCBidXQgd2hlcmUgaGUgZmVsbCB1cG9uIHRoZWlyIHJhbmtzIHRoZXkgd2VyZSBzcGVlZGlseSBjdXQgYXN1bmRlci4gVGhvc2Ugb24gZWl0aGVyIHNpZGUsIGhvd2V2ZXIsIHdoZWVsZWQgYWJvdXQgYW5kIGVuY29tcGFzc2VkIGhpbSB3aXRoIHRoZWlyIHdlYXBvbnMsIHNvIHRoYXQgdGhlIGNvbnN1bCwgZmVhcmluZyBmb3IgaGlzIHNhZmV0eSwgc2VudCB0byBoaXMgYWlkIHRoZSBjaG9pY2VzdCBtZW4gaGUgaGFkIGFib3V0IGhpcyBwZXJzb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYSBmaWVyY2UgYmF0dGxlIHJhZ2VkIGFyb3VuZCBNYXJjaXVzLCBhbmQgbWFueSB3ZXJlIHNsYWluIGluIHNob3J0IHNwYWNlIG9mIHRpbWU7IGJ1dCB0aGUgUm9tYW5zIHByZXNzZWQgaGFyZCB1cG9uIHRoZWlyIGVuZW1pZXMgYW5kIHB1dCB0aGVtIHRvIHJvdXQsIGFuZCBhcyB0aGV5IHNldCBvdXQgaW4gcHVyc3VpdCBvZiB0aGVtLCB0aGV5IGluc2lzdGVkIHRoYXQgTWFyY2l1cywgd2hvIHdhcyB3ZWlnaGVkIGRvd24gd2l0aCBmYXRpZ3VlIGFuZCB3b3VuZHMsIHNob3VsZCByZXRpcmUgdG8gdGhlIGNhbXAuIEhlIGFuc3dlcmVkLCBob3dldmVyLCB0aGF0IHdlYXJpbmVzcyB3YXMgbm90IGZvciB2aWN0b3JzLCBhbmQgdG9vayBhZnRlciB0aGUgZmx5aW5nIGZvZS4gVGhlIHJlc3Qgb2YgdGhlaXIgYXJteSBhbHNvIHdhcyBkZWZlYXRlZCwgbWFueSB3ZXJlIHNsYWluLCBhbmQgbWFueSB0YWtlbiBjYXB0aXZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA2Ljk0Ij5EaW9ueXNpdXMgSGFsLiB2aS4gOTQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlPbiB0aGUgZm9sbG93aW5nIGRheSwgd2hlbiBMYXJ0aXVzIGhhZCBjb21lIHVwLCBhbmQgdGhlIHJlc3Qgb2YgdGhlIGFybXkgd2FzIGFzc2VtYmxlZCBiZWZvcmUgdGhlIGNvbnN1bCwgQ29taW5pdXMgbW91bnRlZCB0aGUgcm9zdHJhLCBhbmQgYWZ0ZXIgcmVuZGVyaW5nIHRvIHRoZSBnb2RzIHRoZSBwcmFpc2UgdGhhdCB3YXMgdGhlaXIgZHVlIGZvciBzdWNoIGdyZWF0IHN1Y2Nlc3NlcywgYWRkcmVzc2VkIGhpbXNlbGYgdG8gTWFyY2l1cy4gSW4gdGhlIGZpcnN0IHBsYWNlLCBoZSByZWhlYXJzZWQgd2l0aCBwcmFpc2UgaGlzIGFzdG9uaXNoaW5nIGV4cGxvaXRzLCBzb21lIG9mIHdoaWNoIGhlIGhhZCBoaW1zZWxmIGJlaGVsZCBpbiB0aGUgYmF0dGxlLCB3aGlsZSB0byBvdGhlcnMgTGFydGl1cyBib3JlIHdpdG5lc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIG91dCBvZiB0aGUgYWJ1bmRhbnQgdHJlYXN1cmVzIGFuZCB0aGUgbWFueSBob3JzZXMgYW5kIHByaXNvbmVycyB0aGF0IGhhZCBiZWVuIHRha2VuLCBoZSBvcmRlcmVkIGhpbSB0byBjaG9vc2Ugb3V0IGEgdGVudGgsIGJlZm9yZSBhbnkgZGlzdHJpYnV0aW9uIHRvIHRoZSByZXN0IG9mIHRoZSBhcm15OyBhbmQgYmVzaWRlcyBhbGwgdGhpcywgaGUgcHJlc2VudGVkIGhpbSB3aXRoIGEgaG9yc2UsIGR1bHkgY2FwYXJpc29uZWQsIGFzIGEgcHJpemUgb2YgdmFsb3VyLiBBZnRlciB0aGUgUm9tYW5zIGhhZCBhcHBsYXVkZWQgdGhpcyBzcGVlY2gsIE1hcmNpdXMgY2FtZSBmb3J3YXJkIGFuZCBzYWlkIHRoYXQgaGUgYWNjZXB0ZWQgdGhlIGhvcnNlLCBhbmQgd2FzIGRlbGlnaHRlZCB3aXRoIHRoZSBwcmFpc2VzIG9mIHRoZSBjb25zdWwsIGJ1dCB0aGF0IGhlIGRlY2xpbmVkIHRoZSByZXN0LCBob2xkaW5nIGl0IHRvIGJlIHBheSwgbm90IGhvbm91ciwgYW5kIHdvdWxkIGJlIGNvbnRlbnQgd2l0aCBoaXMgc2luZ2xlIHNoYXJlIG9mIHRoZSBib290eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBJIGRvIGFzayBvbmUgc3BlY2lhbCBmYXZvdXIsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFuZCBiZWcgdGhhdCBJIG1heSByZWNlaXZlIGl0LiBJIGhhZCBhIGd1ZXN0LWZyaWVuZCBhbW9uZyB0aGUgVm9sc2NpYW5zLCBhIG1hbiBvZiBraW5kbGluZXNzIGFuZCBwcm9iaXR5LiBUaGlzIG1hbiBpcyBub3cgYSBwcmlzb25lciwgYW5kIGZyb20gd2VhbHRoIGFuZCBoYXBwaW5lc3MgaXMgcmVkdWNlZCB0byBzdWJqZWN0aW9uLiBTaW5jZSwgdGhlbiwgbWFueSBldmlscyBoYXZlIGJlZmFsbGVuIGhpbSwgbGV0IG1lIGF0IGxlYXN0IGZyZWUgaGltIGZyb20gb25lLCB0aGF0IG9mIGJlaW5nIHNvbGQgaW50byBib25kYWdlLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD5BdCBzdWNoIHdvcmRzIGFzIHRoZXNlIHN0aWxsIGxvdWRlciBzaG91dHMgZ3JlZXRlZCBNYXJjaXVzLCBhbmQgaGUgZm91bmQgbW9yZSBhZG1pcmVycyBvZiBoaXMgc3VwZXJpb3JpdHkgdG8gZ2FpbiB0aGFuIG9mIHRoZSBicmF2ZXJ5IGhlIGhhZCBzaG93biBpbiB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgdmVyeSBvbmVzIHdobyBzZWNyZXRseSBmZWx0IGEgY2VydGFpbiBqZWFsb3VzIGVudnkgb2YgaGltIGZvciBoaXMgY29uc3BpY3VvdXMgaG9ub3Vycywgbm93IHRob3VnaHQgaGltIHdvcnRoeSBvZiBncmVhdCByZXdhcmRzIGJlY2F1c2UgaGUgd291bGQgbm90IHRha2UgdGhlbTsgYW5kIHRoZXkgd2VyZSBtb3JlIGRlbGlnaHRlZCB3aXRoIHRoZSB2aXJ0dWUgd2hpY2ggbGVkIGhpbSB0byBkZXNwaXNlIHN1Y2ggZ3JlYXQgcmV3YXJkcywgdGhhbiB3aXRoIHRoZSBleHBsb2l0cyB3aGljaCBtYWRlIGhpbSB3b3J0aHkgb2YgdGhlbS4gRm9yIHRoZSByaWdodCB1c2Ugb2Ygd2VhbHRoIGlzIGEgZmFpcmVyIHRyYWl0IHRoYW4gZXhjZWxsZW5jZSBpbiBhcm1zOyBidXQgbm90IHRvIG5lZWQgd2VhbHRoIGlzIGxvZnRpZXIgdGhhbiB0byB1c2UgaXQuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBtdWx0aXR1ZGUgaGFkIGNlYXNlZCBzaG91dGluZyB0aGVpciBhcHBsYXVzZSwgQ29taW5pdXMgdG9vayB1cCB0aGUgd29yZCBhZ2FpbiBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZSBjYW5ub3QsIGluZGVlZCwgbXkgZmVsbG93LXNvbGRpZXJzLCBmb3JjZSB0aGVzZSBnaWZ0cyBvZiB5b3VycyB1cG9uIHRoZSBtYW4sIHdoZW4gaGUgZG9lcyBub3QgYWNjZXB0IHRoZW0gYW5kIGlzIHVud2lsbGluZyB0byB0YWtlIHRoZW07IGJ1dCB0aGVyZSBpcyBhIGdpZnQgd2hpY2ggaGUgY2Fubm90IHJlZnVzZSB3aGVuIGl0IGlzIG9mZmVyZWQuIExldCB1cyBnaXZlIGhpbSB0aGlzIGdpZnQsIGFuZCBwYXNzIGEgdm90ZSB0aGF0IGhlIGJlIHN1cm5hbWVkIENvcmlvbGFudXMsIHVubGVzcywgaW5kZWVkLCBiZWZvcmUgc3VjaCBhY3Qgb2Ygb3VycywgaGlzIGV4cGxvaXQgaGFzIGl0c2VsZiBnaXZlbiBoaW0gdGhpcyBuYW1lLjwvcT4gVGhlbmNlIGNhbWUgaGlzIHRoaXJkIG5hbWUgb2YgQ29yaW9sYW51cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuSC4gNi45NCI+RGlvbnlzaXVzIEhhbC4gdmkuIDk0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGlzIGl0IGlzIHBlcmZlY3RseSBjbGVhciB0aGF0IENhaXVzIHdhcyB0aGUgcHJvcGVyIG5hbWU7IHRoYXQgdGhlIHNlY29uZCBuYW1lLCBpbiB0aGlzIGNhc2UgTWFyY2l1cywgd2FzIHRoZSBjb21tb24gbmFtZSBvZiBmYW1pbHkgb3IgY2xhbjsgYW5kIHRoYXQgdGhlIHRoaXJkIG5hbWUgd2FzIGFkb3B0ZWQgc3Vic2VxdWVudGx5LCBhbmQgYmVzdG93ZWQgYmVjYXVzZSBvZiBzb21lIGV4cGxvaXQsIG9yIGZvcnR1bmUsIG9yIGJvZGlseSBmZWF0dXJlLCBvciBzcGVjaWFsIGV4Y2VsbGVuY2UgaW4gYSBtYW4uIFNvIHRoZSBHcmVla3MgdXNlZCB0byBnaXZlIHN1cm5hbWVzIGZyb20gYW4gZXhwbG9pdCwgYXMgZm9yIGluc3RhbmNlLCBTb3Rlcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNvdGVyLCA8ZW1waD5TYXZpb3VyPC9lbXBoPjsgQ2FsbGluaWN1cywgPGVtcGg+T2Ygbm9ibGUgdmljdG9yeTwvZW1waD47IFBoeXNjb24sIDxlbXBoPkZhdC1wYXVuY2g8L2VtcGg+OyBHcnlwdXMsIDxlbXBoPmhvb2stbm9zZWQ8L2VtcGg+OyBFdWVyZ2V0ZXMsIDxlbXBoPkJlbmVmYWN0b3I8L2VtcGg+OyBQaGlsYWRlbHBodXMsIDxlbXBoPlNpc3Rlcm9yIEJyb3RoZXItbG92ZXI8L2VtcGg+OyBFdWRhZW1vbiwgPGVtcGg+UHJvc3Blcm91czwvZW1waD47IERvc29uLCA8ZW1waD5BbHdheXMtcHJvbWlzaW5nPC9lbXBoPjsgTGF0aHlydXMsIDxlbXBoPlZldGNobGluZzwvZW1waD47IFN1bGxhLCA8ZW1waD5CbG90Y2hlczwvZW1waD4gKD8pOyBOaWdlciwgPGVtcGg+QmxhY2s8L2VtcGg+OyBSdWZ1cywgPGVtcGg+UmVkPC9lbXBoPjsgQ2FlY3VzLCA8ZW1waD5CbGluZDwvZW1waD47IENsYXVkaXVzLCA8ZW1waD5MYW1lPC9lbXBoPi48L25vdGU+IGFuZCBDYWxsaW5pY3VzOyBvciBmcm9tIGEgYm9kaWx5IGZlYXR1cmUsIGFzIFBoeXNjb24gYW5kIEdyeXB1czsgb3IgZnJvbSBhIHNwZWNpYWwgZXhjZWxsZW5jZSwgYXMgRXVlcmdldGVzIGFuZCBQaGlsYWRlcGh1czsgb3IgZnJvbSBzb21lIGdvb2QgZm9ydHVuZSwgYXMgRXVkYWVtb24sIHRoZSBzdXJuYW1lIG9mIHRoZSBzZWNvbmQgQmF0dHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc29tZSBvZiB0aGVpciBraW5ncyBoYXZlIGFjdHVhbGx5IGhhZCBzdXJuYW1lcyBnaXZlbiB0aGVtIGluIG1vY2tlcnksIGFzIEFudGlnb251cyBEb3NvbiBhbmQgUHRvbGVteSBMYXRoeXJ1cy4gU3VybmFtZXMgb2YgdGhpcyBzb3J0IHdlcmUgZXZlbiBtb3JlIGNvbW1vbiBhbW9uZyB0aGUgUm9tYW5zLiBGb3IgaW5zdGFuY2UsIG9uZSBvZiB0aGUgTWV0ZWxsaSB3YXMgY2FsbGVkIERpYWRlbWF0dXMsIGJlY2F1c2UgZm9yIGEgbG9uZyB0aW1lIGhlIHN1ZmZlcmVkIGZyb20gYSBydW5uaW5nIHNvcmUgYW5kIHdlbnQgYWJvdXQgd2l0aCBhIGJhbmRhZ2Ugb24gaGlzIGZvcmVoZWFkOyBhbm90aGVyIG1lbWJlciBvZiB0aGlzIGZhbWlseSB3YXMgY2FsbGVkIENlbGVyLCBiZWNhdXNlIGhlIGV4ZXJ0ZWQgaGltc2VsZiB0byBnaXZlIHRoZSBwZW9wbGUgZnVuZXJhbCBnYW1lcyBvZiBnbGFkaWF0b3JzIHdpdGhpbiBhIGZldyBkYXlzIG9mIGhpcyBmYXRoZXIncyBkZWF0aCwgYW5kIHRoZSBzcGVlZCBhbmQgc3dpZnRuZXNzIG9mIGhpcyBwcmVwYXJhdGlvbnMgZXhjaXRlZCBhc3RvbmlzaG1lbnQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDEwLjIiIHZhbGlkPSJ5ZXMiPlJvbXVsdXMsIHguIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGF0IHRoZSBwcmVzZW50IGRheSBzb21lIG9mIHRoZW0gYXJlIG5hbWVkIGZyb20gY2FzdWFsIGluY2lkZW50cyBhdCB0aGVpciBiaXJ0aCwgUHJvY3VsdXMsIGZvciBpbnN0YW5jZSwgaWYgYSBjaGlsZCBpcyBib3JuIHdoZW4gaGlzIGZhdGhlciBpcyBhd2F5IGZyb20gaG9tZTsgb3IgUG9zdHVtdXMsIGlmIGFmdGVyIGhpcyBkZWF0aDsgYW5kIHdoZW4gb25lIG9mIHR3aW4gY2hpbGRyZW4gc3Vydml2ZXMsIHdoaWxlIHRoZSBvdGhlciBkaWVzLCBoZSBpcyBjYWxsZWQgVm9waXNjdXMuIE1vcmVvdmVyLCBmcm9tIGJvZGlseSBmZWF0dXJlcyB0aGV5IG5vdCBvbmx5IGJlc3RvdyBzdWNoIHN1cm5hbWVzIGFzIFN1bGxhLCBOaWdlciwgYW5kIFJ1ZnVzLCBidXQgYWxzbyBzdWNoIGFzIENhZWN1cyBhbmQgQ2xhdWRpdXMuIEFuZCB0aGV5IGRvIHdlbGwgdGh1cyB0byBhY2N1c3RvbSBtZW4gdG8gcmVnYXJkIG5laXRoZXIgYmxpbmRuZXNzIG5vciBhbnkgb3RoZXIgYm9kaWx5IG1pc2ZvcnR1bmUgYXMgYSByZXByb2FjaCBvciBhIGRpc2dyYWNlLCBidXQgdG8gYW5zd2VyIHRvIHN1Y2ggbmFtZXMgYXMgdGhvdWdoIHRoZWlyIG93bi4gVGhpcyB0b3BpYywgaG93ZXZlciwgd291bGQgYmUgbW9yZSBmaXR0aW5nbHkgZGlzY3Vzc2VkIGVsc2V3aGVyZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3YXIgd2FzIG5vIHNvb25lciBvdmVyIHRoYW4gdGhlIHBvcHVsYXIgbGVhZGVycyByZXZpdmVkIHRoZSBpbnRlcm5hbCBkaXNzZW5zaW9ucywgd2l0aG91dCBhbnkgbmV3IGNhdXNlIG9mIGNvbXBsYWludCwgb3IganVzdCBhY2N1c2F0aW9ucywgYnV0IG1ha2luZyB0aGUgdmVyeSBldmlscyB3aGljaCBoYWQgbmVjZXNzYXJpbHkgZm9sbG93ZWQgaW4gdGhlIHdha2Ugb2YgdGhlaXIgcHJldmlvdXMgcXVhcnJlbHMgYW5kIGRpc3R1cmJhbmNlcyBhIHByZXRleHQgZm9yIG9wcG9zaW5nIHRoZSBwYXRyaWNpYW5zLiBGb3IgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgbGFuZCBoYWQgYmVlbiBsZWZ0IHVuc293biBhbmQgdW50aWxsZWQsIGFuZCB0aGUgd2FyIGxlZnQgbm8gb3Bwb3J0dW5pdHkgdG8gYXJyYW5nZSBhbiBpbXBvcnRhdGlvbiBvZiBtYXJrZXQgc3VwcGxpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcywgdGhlcmVmb3JlLCBhIGdyZWF0IHNjYXJjaXR5IG9mIGZvb2QsIGFuZCB3aGVuIHRoZSBwb3B1bGFyIGxlYWRlcnMgc2F3IHRoYXQgdGhlcmUgd2VyZSBubyBtYXJrZXQgc3VwcGxpZXMsIGFuZCB0aGF0IGlmIHRoZXJlIHdlcmUsIHRoZSBwZW9wbGUgaGFkIG5vIG1vbmV5IHRvIGJ1eSB0aGVtLCB0aGV5IGFzc2FpbGVkIHRoZSByaWNoIHdpdGggc2xhbmRlcm91cyBhY2N1c2F0aW9ucyBvZiBwdXJwb3NlbHkgYXJyYXlpbmcgdGhlIGZhbWluZSBhZ2FpbnN0IHRoZW0sIGluIGEgc3Bpcml0IG9mIHJldmVuZ2UuCgkJCTwvcD4KICAgICAgICAgPHA+TW9yZW92ZXIsIHRoZXJlIGNhbWUgYW4gZW1iYXNzeSBmcm9tIHRoZSBwZW9wbGUgb2YgVmVsaXRyYWUsIHdobyBvZmZlcmVkIHRvIGhhbmQgdGhlaXIgY2l0eSBvdmVyIHRvIHRoZSBSb21hbnMsIGFuZCBiZWdnZWQgdGhlbSB0byBzZW5kIG91dCBjb2xvbmlzdHMgZm9yIGl0LiBGb3IgYSBwZXN0aWxlbnRpYWwgZGlzZWFzZSBoYWQgYXNzYWlsZWQgdGhlbSwgYW5kIHdyb3VnaHQgc3VjaCBkZWF0aCBhbmQgZGVzdHJ1Y3Rpb24gYW1vbmcgdGhlaXIgY2l0aXplbnMgdGhhdCBoYXJkbHkgdGhlIHRlbnRoIHBhcnQgb2YgdGhlIHdob2xlIG51bWJlciB3YXMgbGVmdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHN1Y2ggb2YgdGhlIFJvbWFucyBhcyB3ZXJlIHNlbnNpYmxlIHRob3VnaHQgdGhhdCB0aGlzIHJlcXVlc3Qgb2YgdGhlIHBlb3BsZSBvZiBWZWxpdHJhZSBoYWQgY29tZSBhdCBhbiBhZHZhbnRhZ2VvdXMgYW5kIG9wcG9ydHVuZSB0aW1lLCBzaW5jZSB0aGUgc2NhcmNpdHkgb2YgZm9vZCBtYWRlIGl0IG5lZWRmdWwgdG8gZWFzZSB0aGUgY2l0eSBvZiBpdHMgYnVyZGVuc29tZSBudW1iZXJzOyBhdCB0aGUgc2FtZSB0aW1lIHRoZXkgYWxzbyBob3BlZCB0byBkaXNzaXBhdGUgaXRzIHNlZGl0aW9uLCBpZiB0aGUgbW9zdCB0dXJidWxlbnQgZWxlbWVudHMgaW4gaXQsIGFuZCB0aG9zZSB3aGljaCBtYWRlIG1vc3QgcmVzcG9uc2UgdG8gdGhlIGV4Y2l0aW5nIGFwcGVhbHMgb2YgdGhlIHBvcHVsYXIgbGVhZGVycywgc2hvdWxkIGJlIHB1cmdlZCBhd2F5LCBsaWtlIHVuaGVhbHRoeSBhbmQgZGlzdHVyYmluZyByZWZ1c2UgZnJvbSB0aGUgYm9keS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBjaXRpemVucywgdGhlcmVmb3JlLCB0aGUgY29uc3VscyBzZWxlY3RlZCBhcyBjb2xvbmlzdHMgYW5kIG9yZGVyZWQgdGhlbSBmb3J0aCB0byBWZWxpdHJhZS4gVGhleSBhbHNvIGVubGlzdGVkIG90aGVycyBpbiBhIGNhbXBhaWduIGFnYWluc3QgdGhlIFZvbHNjaWFucywgY29udHJpdmluZyB0aHVzIHRoYXQgdGhlcmUgc2hvdWxkIGJlIG5vIGxlaXN1cmUgZm9yIGludGVzdGluZSB0dW11bHRzLCBhbmQgYmVsaWV2aW5nIHRoYXQgd2hlbiByaWNoIGFuZCBwb29yIGFsaWtlLCBwbGViZWlhbnMgYXMgd2VsbCBhcyBwYXRyaWNpYW5zLCB3ZXJlIG9uY2UgbW9yZSB1bml0ZWQgaW4gbWlsaXRhcnkgc2VydmljZSBhbmQgaW4gY29tbW9uIHN0cnVnZ2xlcyBmb3IgdGhlIHB1YmxpYyBnb29kLCB0aGV5IHdvdWxkIGJlIG1vcmUgZ2VudGx5IGFuZCBwbGVhc2FudGx5IGRpc3Bvc2VkIHRvd2FyZHMgb25lIGFub3RoZXIuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHBvcHVsYXIgbGVhZGVycywgU2ljaW5pdXMgYW5kIEJydXR1cywgd2l0aCB0aGVpciBmb2xsb3dpbmcsIGF0IG9uY2Ugcm9zZSB1cCBpbiBvcHBvc2l0aW9uLCBjcnlpbmcgb3V0IHRoYXQgdGhlIGNvbnN1bHMgd2VyZSBkaXNndWlzaW5nIGEgbW9zdCBjcnVlbCBkZWVkIHVuZGVyIHRoYXQgbW9zdCBpbm9mZmVuc2l2ZSBuYW1lLCBhIGNvbG9ueSwgYW5kIHdlcmUgcmVhbGx5IHB1c2hpbmcgcG9vciBtZW4gaW50byBhIHBpdCBvZiBkZWF0aCwgYXMgaXQgd2VyZSwgYnkgc2VuZGluZyB0aGVtIGZvcnRoIGludG8gYSBjaXR5IHdoaWNoIHdhcyBmdWxsIG9mIGRlYWRseSBhaXIgYW5kIHVuYnVyaWVkIGNvcnBzZXMsIHRvIGJlIGFzc29jaWF0ZWQgd2l0aCBhIHN0cmFuZ2UgYW5kIGFib21pbmFibGUgZGVpdHk7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVuLCBhcyBpZiBub3Qgc2F0aXNmaWVkIHdpdGggZGVzdHJveWluZyBzb21lIG9mIHRoZWlyIGZlbGxvdy1jaXRpemVucyBieSBmYW1pbmUsIGFuZCBleHBvc2luZyBvdGhlcnMgdG8gcGVzdGlsZW5jZSwgdGhleSBwcm9jZWVkZWQgZnVydGhlciB0byBicmluZyBvbiBhIHdhciBvZiB0aGVpciBvd24gY2hvb3NpbmcsIHRoYXQgbm8gZXZpbCBtaWdodCBzcGFyZSB0aGUgY2l0eSwgd2hpY2ggaGFkIGJ1dCByZWZ1c2VkIHRvIGNvbnRpbnVlIGluIHNlcnZpdHVkZSB0byB0aGUgcmljaC4gV2l0aCB0aGVpciBlYXJzIGZ1bGwgb2Ygc3VjaCBzcGVlY2hlcyBhcyB0aGVzZSwgdGhlIHBlb3BsZSB3b3VsZCBuZWl0aGVyIGFuc3dlciB0aGUgY29uc3VsYXIgc3VtbW9ucyBmb3IgZW5saXN0bWVudCwgbm9yIGxvb2sgd2l0aCBhbnkgZmF2b3VyIG9uIHRoZSBjb2xvbnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMTMiPkRpb255c2l1cyBIYWwuIHZpaS4gMTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2VuYXRlIHdhcyBpbiBwZXJwbGV4aXR5LiBCdXQgTWFyY2l1cywgd2hvIHdhcyBub3cgZnVsbCBvZiBpbXBvcnRhbmNlLCBhbmQgaGFkIGdyb3duIGxvZnR5IGluIHNwaXJpdCwgYW5kIHdhcyBsb29rZWQgdXBvbiB3aXRoIGFkbWlyYXRpb24gYnkgdGhlIG1vc3QgcG93ZXJmdWwgbWVuIG9mIHRoZSBjaXR5LCBvcGVubHkgdG9vayB0aGUgbGVhZCBpbiByZXNpc3RpbmcgdGhlIHBvcHVsYXIgbGVhZGVycy4gVGhlIGNvbG9ueSB3YXMgc2VudCBvdXQsIHRob3NlIHRoYXQgd2VyZSBjaG9zZW4gZm9yIGl0IGJ5IGxvdCBiZWluZyBjb21wZWxsZWQgdG8gZ28gZm9ydGggdW5kZXIgc2V2ZXJlIHBlbmFsdGllczsgYW5kIHdoZW4gdGhlIHBlb3BsZSB1dHRlcmx5IHJlZnVzZWQgbWlsaXRhcnkgc2VydmljZSwgTWFyY2l1cyBoaW1zZWxmIG11c3RlcmVkIGhpcyBjbGllbnRzIGFuZCBhcyBtYW55IG90aGVycyBhcyBoZSBjb3VsZCBwZXJzdWFkZSwgYW5kIG1hZGUgYW4gaW5jdXJzaW9uIGludG8gdGhlIHRlcnJpdG9yeSBvZiBBbnRpdW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGhlIGZvdW5kIG11Y2ggY29ybiwgYW5kIHNlY3VyZWQgbGFyZ2UgYm9vdHkgaW4gY2F0dGxlIGFuZCBjYXB0aXZlcywgbm8gcGFydCBvZiB3aGljaCBkaWQgaGUgdGFrZSBvdXQgZm9yIGhpbXNlbGY7IGJ1dCBicm91Z2h0IGhpcyBmb2xsb3dlcnMgYmFjayB0byBSb21lIGxhZGVuIHdpdGggbGFyZ2Ugc3BvaWxzIG9mIGV2ZXJ5IHNvcnQuIFRoZSByZXN0IG9mIHRoZSBjaXRpemVucyB0aGVyZWZvcmUgcmVwZW50ZWQgdGhlbXNlbHZlcywgZW52aWVkIHRoZWlyIG1vcmUgZm9ydHVuYXRlIGZlbGxvd3MsIGFuZCB3ZXJlIGZpbGxlZCB3aXRoIGhvc3RpbGl0eSB0byBNYXJjaXVzLCBub3QgYmVpbmcgYWJsZSB0byBlbmR1cmUgdGhlIHJlcHV0YXRpb24gYW5kIHBvd2VyIG9mIHRoZSBtYW4sIHdoaWNoIHdhcyBncm93aW5nLCBhcyB0aGV5IHRob3VnaHQsIHRvIGJlIGRldHJpbWVudGFsIHRvIHRoZSBwZW9wbGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMTkiPkRpb255c2l1cyBIYWwuIHZpaS4gMTkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm90IGxvbmcgYWZ0ZXIsIHdoZW4gTWFyY2l1cyBzdG9vZCBmb3IgdGhlIGNvbnN1bHNoaXAsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlcmUgaXMgbm90aGluZyBvZiB0aGlzIGNhbmRpZGFjeSBmb3IgdGhlIGNvbnN1bHNoaXAgaW4gTGl2eSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zNC43IiB2YWxpZD0ieWVzIj5paS4gMzQsIDctMzU8L2JpYmw+KS4gTWFyY2l1cyB1cmdlcyB0aGUgc2VuYXRlIHRvIHRha2UgYWR2YW50YWdlIG9mIHRoZSBmYW1pbmUgYW5kIGV4YWN0IGZyb20gdGhlIHBsZWJlaWFucyBhIHN1cnJlbmRlciBvZiB0aGVpciB0cmlidW5hdGUuIFRoaXMgc28gZXhhc3BlcmF0ZXMgdGhlIHBlb3BsZSB0aGF0IHRoZXkgdHJ5IE1hcmNpdXMgPGVtcGg+aW4gYWJzZW50aWE8L2VtcGg+IGFuZCBiYW5pc2ggaGltLCB3aGVyZXVwb24gaGUgZ29lcyBvdmVyIHRvIHRoZSBWb2xzY2kuIFBsdXRhcmNoJ3Mgc3RvcnkgKHhpdi4teHguKSBhZ3JlZXMgY2xvc2VseSB3aXRoIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMjEiPkRpb255c2l1cyBIYWwuIHZpaS4gMjEtNjQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoZSBtdWx0aXR1ZGUgcmVsZW50ZWQsIGFuZCB0aGUgcGVvcGxlIGZlbHQgc29tZXdoYXQgYXNoYW1lZCB0byBzbGlnaHQgYW5kIGh1bWJsZSBhIG1hbiB3aG8gd2FzIGZvcmVtb3N0IGluIGJpcnRoIGFuZCB2YWxvdXIgYW5kIGhhZCBwZXJmb3JtZWQgc28gbWFueSBhbmQgc3VjaCBncmVhdCBzZXJ2aWNlcy4gTm93IGl0IHdhcyB0aGUgY3VzdG9tIHdpdGggdGhvc2Ugd2hvIHN0b29kIGZvciB0aGUgb2ZmaWNlIHRvIGdyZWV0IHRoZWlyIGZlbGxvdy1jaXRpemVucyBhbmQgc29saWNpdCB0aGVpciB2b3RlcywgZGVzY2VuZGluZyBpbnRvIHRoZSBmb3J1bSBpbiB0aGVpciB0b2dhLCB3aXRob3V0IGEgdHVuaWMgdW5kZXIgaXQuIFRoaXMgd2FzIGVpdGhlciBiZWNhdXNlIHRoZXkgd2lzaGVkIHRoZSBncmVhdGVyIGh1bWlsaXR5IG9mIHRoZWlyIGdhcmIgdG8gZmF2b3VyIHRoZWlyIHNvbGljaXRhdGlvbnMsIG9yIGJlY2F1c2UgdGhleSB3aXNoZWQgdG8gZGlzcGxheSB0aGUgdG9rZW5zIG9mIHRoZWlyIGJyYXZlcnksIGluIGNhc2UgdGhleSBib3JlIHdvdW5kcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGNlcnRhaW5seSBub3Qgb3dpbmcgdG8gYSBzdXNwaWNpb24gb2YgdGhlIGRpc3BlbnNpbmcgb2YgbW9uZXkgaW4gYnJpYmVyeSB0aGF0IHRoZSBjYW5kaWRhdGUgZm9yIHRoZSB2b3RlcyBvZiB0aGUgY2l0aXplbnMgd2FzIHJlcXVpcmVkIHRvIHByZXNlbnQgaGltc2VsZiBiZWZvcmUgdGhlbSB3aXRob3V0IGEgdHVuaWMgYW5kIHVuZ2lydC4gRm9yIGl0IHdhcyBsb25nIGFmdGVyIHRoaXMgdGltZSB0aGF0IHRoZSBidXlpbmcgYW5kIHNlbGxpbmcgb2Ygdm90ZXMgY3JlcHQgaW4gYW5kIG1vbmV5IGJlY2FtZSBhIGZlYXR1cmUgb2YgdGhlIGVsZWN0aW9ucy4KCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUJ1dCBhZnRlcndhcmRzLCBicmliZXJ5IGFmZmVjdGVkIGV2ZW4gY291cnRzIGFuZCBjYW1wcywgYW5kIGNvbnZlcnRlZCB0aGUgY2l0eSBpbnRvIGEgbW9uYXJjaHksIGJ5IG1ha2luZyBhcm1pZXMgdGhlIHV0dGVyIHNsYXZlcyBvZiBtb25leS4gRm9yIGl0IGhhcyBiZWVuIHdlbGwgc2FpZCB0aGF0IGhlIGZpcnN0IGJyZWFrcyBkb3duIHRoZSBwb3dlciBvZiB0aGUgcGVvcGxlIHdobyBmaXJzdCBmZWFzdHMgYW5kIGJyaWJlcyB0aGVtLiBCdXQgYXQgUm9tZSB0aGUgbWlzY2hpZWYgc2VlbXMgdG8gaGF2ZSBjcmVwdCBpbiBzdGVhbHRoaWx5IGFuZCBncmFkdWFsbHksIGFuZCBub3QgdG8gaGF2ZSBiZWVuIG5vdGljZWQgYXQgb25jZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdlIGRvIG5vdCBrbm93IHdobyB3YXMgdGhlIGZpcnN0IG1hbiB0byBicmliZSBoZXIgcGVvcGxlIG9yIGhlciBjb3VydHMgb2YgbGF3OyB3aGVyZWFzIGF0IEF0aGVucywgQW55dHVzLCB0aGUgc29uIG9mIEFudGhlbWlvbiwgaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGZpcnN0IG1hbiB0byBnaXZlIG1vbmV5IHRvIGp1cm9ycywgd2hlbiBoZSB3YXMgb24gdHJpYWwgZm9yIHRoZSB0cmVhY2hlcm91cyBmYWlsdXJlIHRvIHJlbGlldmUgUHlsb3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBzdHJvbmdob2xkIG9uIHRoZSB3ZXN0ZXJuIGNvYXN0IG9mIE1lc3NlbmlhLCBpbiBQZWxvcG9ubmVzdXMuIEl0IHdhcyBvY2N1cGllZCBhbmQgc3VjY2Vzc2Z1bGx5IGRlZmVuZGVkIGJ5IHRoZSBBdGhlbmlhbnMgaW4gNDI1IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiA0LjIiIHZhbGlkPSJ5ZXMiPlRodWMuIGl2LiAyLTQxPC9iaWJsPikuIEluIDQxMCwgdGhlIExhY2VkYWVtb25pYW5zIGxhaWQgc2llZ2UgdG8gaXRzIE1lc3NlbmlhbiBnYXJyaXNvbiwgd2hpY2ggc3VycmVuZGVyZWQgYWZ0ZXIgYW4gQXRoZW5pYW4gZmxlZXQgaGFkIGZhaWxlZCB0byByZWxpZXZlIGl0ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTMuNjQuNSIgdmFsaWQ9InllcyI+RGlvZG9ydXMsIHhpaWkuIDY0LCA1Zi48L2JpYmw+KS48L25vdGU+IHRvd2FyZCB0aGUgY2xvc2Ugb2YgdGhlIFBlbG9wb25uZXNpYW4gd2FyOyBhIHRpbWUgd2hlbiB0aGUgcHVyZSByYWNlIG9mIHRoZSBnb2xkZW4gYWdlIHN0aWxsIHBvc3Nlc3NlZCB0aGUgUm9tYW4gZm9ydW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyB3aGVuIE1hcmNpdXMgZGlzY2xvc2VkIGhpcyBtYW55IHNjYXJzIGZyb20gbWFueSBjb250ZXN0cywgd2hlcmVpbiBoZSBoYWQgYmVlbiBhIGZvcmVtb3N0IHNvbGRpZXIgZm9yIHNldmVudGVlbiB5ZWFycyB0b2dldGhlciwgdGhlIHBlb3BsZSB3ZXJlIHB1dCBvdXQgb2YgY291bnRlbmFuY2UgYnkgaGlzIHZhbG91ciwgYW5kIGFncmVlZCB3aXRoIG9uZSBhbm90aGVyIHRvIGVsZWN0IGhpbS4gQnV0IHdoZW4gdGhlIGRheSBmb3IgY2FzdGluZyB0aGVpciB2b3RlcyBjYW1lLCBhbmQgTWFyY2l1cyBtYWRlIGEgcG9tcG91cyBlbnRyeSBpbnRvIHRoZSBmb3J1bSBlc2NvcnRlZCBieSB0aGUgc2VuYXRlLCBhbmQgYWxsIHRoZSBwYXRyaWNpYW5zIGFib3V0IGhpbSB3ZXJlIGNsZWFybHkgbW9yZSBiZW50IG9uIHN1Y2Nlc3MgdGhhbiBldmVyIGJlZm9yZSwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+dGhlIG11bHRpdHVkZSBmZWxsIGF3YXkgYWdhaW4gZnJvbSB0aGVpciBnb29kIHdpbGwgdG93YXJkcyBoaW0sIGFuZCBkcmlmdGVkIGludG8gZmVlbGluZ3Mgb2YgcmVzZW50bWVudCBhbmQgZW52eS4gVGhlc2UgZmVlbGluZ3Mgd2VyZSByZWluZm9yY2VkIGJ5IHRoZWlyIGZlYXIgdGhhdCBpZiBhbiBhcmlzdG9jcmF0LCB3aG8gaGFkIHN1Y2ggd2VpZ2h0IHdpdGggdGhlIHBhdHJpY2lhbnMsIHNob3VsZCBiZWNvbWUgc3VwcmVtZSBpbiB0aGUgZ292ZXJubWVudCwgaGUgbWlnaHQgYWx0b2dldGhlciBkZXByaXZlIHRoZSBwZW9wbGUgb2YgdGhlaXIgbGliZXJ0aWVzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28sIGJlaW5nIGluIHN1Y2ggYSBzdGF0ZSBvZiBtaW5kLCB0aGV5IHJlamVjdGVkIE1hcmNpdXMgYW5kIG90aGVycyB3ZXJlIHByb2NsYWltZWQgZWxlY3RlZC4gVGhlIHNlbmF0b3JzIHdlcmUgaW5kaWduYW50LCB0aGlua2luZyB0aGUgaW5zdWx0IGRpcmVjdGVkIHJhdGhlciBhdCB0aGVtIHRoYW4gYXQgTWFyY2l1cywgYW5kIGhlIGhpbXNlbGYgY291bGQgbm90IHRyZWF0IHRoZSBvY2N1cnJlbmNlIHdpdGggcmVzdHJhaW50IG9yIGZvcmJlYXJhbmNlLiBIZSBoYWQgaW5kdWxnZWQgdGhlIHBhc3Npb25hdGUgYW5kIGNvbnRlbnRpb3VzIHNpZGUgb2YgaGlzIG5hdHVyZSwgd2l0aCB0aGUgaWRlYSB0aGF0IHRoZXJlIHdhcyBzb21ldGhpbmcgZ3JlYXQgYW5kIGV4YWx0ZWQgaW4gdGhpcywgYW5kIGhhZCBub3QgYmVlbiBpbWJ1ZWQsIHVuZGVyIHRoZSBpbmZsdWVuY2Ugb2YgcmVhc29uIGFuZCBkaXNjaXBsaW5lLCB3aXRoIHRoYXQgZ3Jhdml0eSBhbmQgbWlsZG5lc3Mgd2hpY2ggYXJlIHRoZSBjaGllZiB2aXJ0dWVzIG9mIGEgc3RhdGVzbWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IgZGlkIGhlIGtub3cgdGhhdCBvbmUgd2hvIHVuZGVydGFrZXMgcHVibGljIGJ1c2luZXNzIG11c3QgYXZvaWQgYWJvdmUgYWxsIHRoaW5ncyB0aGF0IHNlbGYtd2lsbCB3aGljaCwgYXMgUGxhdG8gc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBhIGxldHRlciB0byBEaW8gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMLiA0IiB2YWxpZD0ieWVzIj5FcGlzdC4gaXYuIGFkIGZpbjwvYmlibD4pLjwvbm90ZT4gaXMgdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y29tcGFuaW9uIG9mIHNvbGl0dWRlPC9xPjsgbXVzdCBtaW5nbGUgd2l0aCBtZW4sIGFuZCBiZSBhIGxvdmVyIG9mIHRoYXQgc3VibWlzc2l2ZW5lc3MgdG8gaW5qdXJ5IHdoaWNoIHNvbWUgcGVvcGxlIHJpZGljdWxlIHNvIG11Y2guIEJ1dCBzaW5jZSBoZSB3YXMgZXZlciBhIHN0cmFpZ2h0Zm9yd2FyZCBtYW4gYW5kIG9ic3RpbmF0ZSwgYW5kIHNpbmNlIGhlIHRob3VnaHQgdGhhdCBjb25xdWVzdCBhbmQgbWFzdGVyeSBpbiBhbGwgdGhpbmdzIGFuZCBhdCBhbGwgdGltZXMgd2FzIHRoZSBwcmVyb2dhdGl2ZSBvZiBicmF2ZXJ5LCByYXRoZXIgdGhhbiBvZiBlZmZlbWluYXRlIHdlYWtuZXNzICh3aGljaCBicmVha3Mgb3V0IGluIGFuZ2VyLCBsaWtlIGEgc3dlbGxpbmcgc29yZSwgZnJvbSB0aGUgdHJvdWJsZWQgYW5kIHdvdW5kZWQgc3Bpcml0KSwgaGUgZXZlbnQgYXdheSBmdWxsIG9mIGluZGlnbmF0aW9uIGFuZCBiaXR0ZXJuZXNzIHRvd2FyZHMgdGhlIHBlb3BsZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHlvdW5nZXIgcGF0cmljaWFucywgdG9vLCB0aGF0IGVsZW1lbnQgaW4gdGhlIGNpdHkgd2hpY2ggbWFkZSBtb3N0IHZhdW50IG9mIG5vYmxlIGJpcnRoIGFuZCB3YXMgbW9zdCBzaG93eSwgaGFkIGFsd2F5cyBiZWVuIGFtYXppbmdseSBkZXZvdGVkIHRvIHRoZSBtYW4sIGFuZCwgYWRoZXJpbmcgdG8gaGltIG5vdywgd2hlbiB0aGVpciBwcmVzZW5jZSBkaWQgaGltIG5vIGdvb2QsIGZhbm5lZCBoaXMgYW5nZXIgYnkgdGhlaXIgc3ltcGF0aGV0aWMgdmV4YXRpb24gYW5kIHNvcnJvdy4gRm9yIGhlIHdhcyB0aGVpciBsZWFkZXIgYW5kIHdpbGxpbmcgdGVhY2hlciBvZiB0aGUgYXJ0IG9mIHdhciBpbiB0aGVpciBjYW1wYWlnbnMsIGFuZCBpbnNwaXJlZCB0aGVtIGluIHRoZWlyIHZpY3RvcmllcyB3aXRoIGEgemVhbCBmb3IgdmFsb3VyLCB3aGljaCBoYWQgbm8gdGluZ2Ugb2YgbXV0dWFsIGplYWxvdXN5LgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG1lYW50aW1lIGdyYWluIGNhbWUgdG8gUm9tZSwgYSBncmVhdCBwYXJ0IG9mIGl0IGJvdWdodCBpbiBJdGFseSwgYnV0IGFuIGVxdWFsIGFtb3VudCBzZW50IGFzIGEgcHJlc2VudCBmcm9tIFN5cmFjdXNlLCB3aGVyZSBHZWxvIHdhcyB0eXJhbnQuIE1vc3Qgb2YgdGhlIHBlb3BsZSB3ZXJlIGNvbnNlcXVlbnRseSBpbiBncmVhdCBob3BlLCBleHBlY3RpbmcgdGhhdCB0aGUgY2l0eSB3b3VsZCBiZSBkZWxpdmVyZWQgYm90aCBmcm9tIGl0cyBzY2FyY2l0eSBhbmQgaXRzIGRpc2NvcmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUsIGFjY29yZGluZ2x5LCB3YXMgY29udmVuZWQgYXQgb25jZSwgYW5kIHRoZSBwZW9wbGUsIGZsb2NraW5nIGFib3V0IHRoZSBzZW5hdGUtaG91c2UsIGF3YWl0ZWQgdGhlIHJlc3VsdCBvZiBpdHMgZGVsaWJlcmF0aW9ucy4gVGhleSBleHBlY3RlZCB0aGF0IHRoZSBtYXJrZXQtcHJpY2UgZm9yIGdyYWluIHdvdWxkIG5vdyBiZSBtb2RlcmF0ZSwgYW5kIHRoYXQgd2hhdCBoYWQgYmVlbiBzZW50IGFzIGEgcHJlc2VudCB3b3VsZCBiZSBkaXN0cmlidXRlZCBncmF0aXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3ZXJlIHNvbWUgaW4gdGhlIHNlbmF0ZSB3aG8gc28gYWR2aXNlZCB0aGF0IGJvZHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNYXJjaXVzIHJvc2UgaW4gaGlzIHBsYWNlIGFuZCB2ZWhlbWVudGx5IGF0dGFja2VkIHRob3NlIHdobyBmYXZvdXJlZCB0aGUgbXVsdGl0dWRlLCBjYWxsaW5nIHRoZW0gZGVtYWdvZ3VlcyBhbmQgYmV0cmF5ZXJzIG9mIHRoZSBhcmlzdG9jcmFjeSwgYW5kIGRlY2xhcmluZyB0aGF0IHRoZXkgd2VyZSBub3VyaXNoaW5nLCB0byB0aGVpciBvd24gaGFybSwgdGhlIGV2aWwgc2VlZHMgb2YgYm9sZG5lc3MgYW5kIGluc29sZW5jZSB3aGljaCBoYWQgYmVlbiBzb3duIGFtb25nIHRoZSByYWJibGU7IHRoZXNlIHRoZXkgc2hvdWxkIGhhdmUgY2hva2VkIHdoZW4gdGhleSBmaXJzdCBzcHJhbmcgdXAsIGFuZCBub3QgaGF2ZSBzdHJlbmd0aGVuZWQgdGhlIHBlb3BsZSBieSBzdWNoIGEgcG93ZXJmdWwgbWFnaXN0cmFjeSBhcyB0aGUgdHJpYnVuYXRlLiBCdXQgbm93IHRoZWlyIGJvZHkgd2FzIGZvcm1pZGFibGUsIGJlY2F1c2UgaXQgZ290IGV2ZXJ5dGhpbmcgdGhhdCBpdCBkZXNpcmVkLCBhbGxvd2VkIG5vIGNvbnN0cmFpbnQgdXBvbiBpdHMgd2lsbCwgYW5kIHJlZnVzZWQgdG8gb2JleSB0aGUgY29uc3VscywgYnV0IGhhZCB0aGVpciBvd24gbGVhZGVycyBpbiBhbmFyY2h5LCB3aG9tIHRoZXkgc3R5bGVkIHRoZWlyIHJ1bGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VG8gc2l0IHRoZXJlLCBtb3Jlb3Zlciwgdm90aW5nIHN1Y2ggYSBwZW9wbGUgbGFyZ2Vzc2VzIGFuZCBzdXBwbGllcywgbGlrZSB0aG9zZSBHcmVla3Mgd2hlcmUgZGVtb2NyYWN5IGlzIG1vc3QgZXh0cmVtZSwgaGUgc2FpZCB3YXMgbm90aGluZyBtb3JlIG5vciBsZXNzIHRoYW4gbWFpbnRhaW5pbmcgdGhlbSBpbiB0aGVpciBkaXNvYmVkaWVuY2UsIHRvIHRoZSBjb21tb24gZGVzdHJ1Y3Rpb24gb2YgYWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIHRoZXkgc3VyZWx5IHdpbGwgbm90IHNheSB0aGF0IHRoZXkgYXJlIGdldHRpbmcgdGhlc2UgYXMgYSBncmF0ZWZ1bCByZXR1cm4gZm9yIHRoZSBtaWxpdGFyeSBzZXJ2aWNlcyB3aGljaCB0aGV5IG9taXR0ZWQsIGFuZCB0aGUgc2VjZXNzaW9ucyBieSB3aGljaCB0aGV5IHJlbm91bmNlZCB0aGVpciBjb3VudHJ5LCBhbmQgdGhlIGNhbHVtbmllcyBhZ2FpbnN0IHRoZSBzZW5hdGUgd2hpY2ggdGhleSBoYXZlIGNvdW50ZW5hbmNlZC4gVGhleSB3aWxsIHJhdGhlciBiZSBjb25maWRlbnQgdGhhdCB5b3VyIGZlYXJzIGRyaXZlIHlvdSB0byBzdWJzZXJ2aWVuY3kgYW5kIGZsYXR0ZXJ5IHdoZW4geW91IG1ha2UgdGhlbSB0aGVzZSBnaWZ0cyBhbmQgY29uY2Vzc2lvbnMsIGFuZCB3aWxsIHNldCBubyBsaW1pdCB0byB0aGVpciBkaXNvYmVkaWVuY2UsIG5vciBjZWFzZSBmcm9tIHRoZWlyIHF1YXJyZWxzIGFuZCBzZWRpdGlvbnMuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGFjdGlvbiBvbiBvdXIgcGFydCB3b3VsZCB0aGVyZWZvcmUgYmUgc2hlZXIgbWFkbmVzczsgYnV0IGlmIHdlIGFyZSB3aXNlLCB3ZSBzaGFsbCB0YWtlIHRoZWlyIHRyaWJ1bmF0ZSBhd2F5IGZyb20gdGhlbSwgZm9yIGl0IG1ha2VzIHRoZSBjb25zdWxzaGlwIG51bGwgYW5kIHZvaWQsIGFuZCBkaXZpZGVzIHRoZSBjaXR5LiBUaGlzIGlzIG5vIGxvbmdlciBvbmUsIGFzIGJlZm9yZSwgYnV0IGhhcyBiZWVuIGN1dCBpbiB0d28sIHNvIHRoYXQgd2UgY2FuIG5ldmVyIGdyb3cgdG9nZXRoZXIgYWdhaW4sIG9yIGJlIG9mIG9uZSBtaW5kLCBvciBjZWFzZSBhZmZsaWN0aW5nIGFuZCBjb25mb3VuZGluZyBvbmUgYW5vdGhlci48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlXaXRoIG1hbnkgc3VjaCB3b3JkcyBhcyB0aGVzZSBNYXJjaXVzIHdhcyBiZXlvbmQgbWVhc3VyZSBzdWNjZXNzZnVsIGluIGZpbGxpbmcgdGhlIHlvdW5nZXIgc2VuYXRvcnMsIGFuZCBhbG1vc3QgYWxsIHRoZSB3ZWFsdGh5IG9uZXMsIHdpdGggaGlzIG93biBmaWVyY2UgZW50aHVzaWFzbSwgYW5kIHRoZXkgY3JpZWQgb3V0IHRoYXQgaGUgd2FzIHRoZSBvbmx5IG1hbiBpbiB0aGUgY2l0eSB3aG8gZGlzZGFpbmVkIHN1Ym1pc3Npb24gYW5kIGZsYXR0ZXJ5LiBCdXQgc29tZSBvZiB0aGUgb2xkZXIgc2VuYXRvcnMgb3Bwb3NlZCBoaW0sIHN1c3BlY3RpbmcgdGhlIG91dGNvbWUuIEFuZCB0aGUgb3V0Y29tZSB3YXMgd2hvbGx5IGJhZC4gRm9yIHRoZSB0cmlidW5lcyB3ZXJlIHByZXNlbnQsIGFuZCB3aGVuIHRoZXkgc2F3IHRoYXQgdGhlIHByb3Bvc2FsIG9mIE1hcmNpdXMgd2FzIGxpa2VseSB0byBwcmV2YWlsLCB0aGV5IHJhbiBvdXQgYW1vbmcgdGhlIGNyb3dkIHdpdGggbG91ZCBjcmllcywgY2FsbGluZyB1cG9uIHRoZSBwbGViZWlhbnMgdG8gcmFsbHkgdG8gdGhlaXIgaGVscC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGVyZSB3YXMgYSBzdG9ybXkgc2Vzc2lvbiBvZiB0aGUgYXNzZW1ibHksIGFuZCB3aGVuIHRoZSBzcGVlY2ggb2YgTWFyY2l1cyB3YXMgcmVwb3J0ZWQgdG8gaXQsIHRoZSBwZW9wbGUgd2VyZSBjYXJyaWVkIGF3YXkgd2l0aCBmdXJ5IGFuZCBhbG1vc3QgYnVyc3QgaW4gdXBvbiB0aGUgc2VuYXRlLiBCdXQgdGhlIHRyaWJ1bmVzIG1hZGUgdGhlaXIgZm9ybWFsIGRlbnVuY2lhdGlvbiBvZiBNYXJjaXVzLCBhbmQgc3VtbW9uZWQgaGltIGJ5IG1lc3NlbmdlciB0byBjb21lIGJlZm9yZSB0aGVtIGFuZCBtYWtlIGhpcyBkZWZlbmNlLiBBbmQgd2hlbiBoZSBpbnNvbGVudGx5IGRyb3ZlIGF3YXkgdGhlIG9mZmljZXJzIHdobyBicm91Z2h0IHRoZWlyIG1lc3NhZ2UsIHRoZXkgd2VudCB0aGVtc2VsdmVzLCBhdHRlbmRlZCBieSB0aGUgYWVkaWxlcywgdG8gYnJpbmcgaGltIGJ5IGZvcmNlLCBhbmQgdHJpZWQgdG8gbGF5IGhhbmRzIHVwb24gaGlzIHBlcnNvbi4gQnV0IHRoZSBwYXRyaWNpYW5zLCBiYW5kaW5nIHRvZ2V0aGVyLCBkcm92ZSB0aGUgdHJpYnVuZXMgYXdheSwgYW5kIGFjdHVhbGx5IGJlYXQgdGhlIGFlZGlsZXMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CeSB0aGlzIHRpbWUsIHRoZW4sIGV2ZW5pbmcgaGFkIGZhbGxlbiwgd2hpY2ggcHV0IGFuIGVuZCB0byB0aGUgdHVtdWx0OyBidXQgYXMgc29vbiBhcyBpdCB3YXMgZGF5LCB0aGUgZXhhc3BlcmF0ZWQgcGVvcGxlIGNhbWUgcnVubmluZyB0b2dldGhlciBmcm9tIGFsbCBxdWFydGVycyBpbnRvIHRoZSBmb3J1bS4gV2hlbiB0aGUgY29uc3VscyBzYXcgdGhpcywgdGhleSB3ZXJlIGFsYXJtZWQgZm9yIHRoZSBjaXR5LCBhbmQgY29udmVuaW5nIHRoZSBzZW5hdGUsIHVyZ2VkIHRoZW0gdG8gY29uc2lkZXIgaG93LCBieSByZWFzb25hYmxlIHByb3Bvc2FscyBhbmQgc3VpdGFibGUgcmVzb2x1dGlvbnMsIHRoZXkgbWlnaHQgc29vdGhlIGFuZCBwYWNpZnkgdGhlIG11bHRpdHVkZSwgc2luY2UgaXQgd2FzIG5vdCBhIHRpbWUgZm9yIGFtYml0aW91cyByaXZhbHJ5LCBub3Igd291bGQgdGhleSBiZSB3aXNlIGluIGNvbnRlbmRpbmcgZm9yIHRoZWlyIGRpZ25pdHksIGJ1dCB0aGUgY3Jpc2lzIHdhcyBzZXZlcmUgYW5kIGNyaXRpY2FsLCBhbmQgZGVtYW5kZWQgbWVhc3VyZXMgdGhhdCB3ZXJlIGNvbnNpZGVyYXRlIGFuZCBodW1hbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYWpvcml0eSBvZiB0aGUgc2VuYXRlIGFjY2VkaW5nIHRvIHRoZXNlIHZpZXdzLCB0aGUgY29uc3VscyB3ZW50IG91dCBhbmQgcmVhc29uZWQgd2l0aCB0aGUgcGVvcGxlIGFzIHdlbGwgYXMgdGhleSBjb3VsZCwgYW5kIHRyaWVkIHRvIG1vbGxpZnkgdGhlbSwgYW5zd2VyaW5nIHRoZWlyIGFjY3VzYXRpb25zIGluIGEgcmVhc29uYWJsZSBtYW5uZXIsIGFuZCBtYWtpbmcgb25seSBhIG1vZGVyYXRlIHVzZSBvZiBhZG1vbml0aW9uIGFuZCByZWJ1a2U7IGFzIHJlZ2FyZGVkIHRoZSBwcmljZSBvZiBwcm92aXNpb25zIGFuZCBtYXJrZXQgc3VwcGxpZXMsIHRoZXkgZGVjbGFyZWQgdGhlcmUgc2hvdWxkIGJlIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIHBlb3BsZSBzaG93ZWQgc2lnbnMgb2YgcmVsZW50aW5nLCBhbmQgaXQgd2FzIGV2aWRlbnQsIGZyb20gdGhlaXIgZGVjb3JvdXMgYW5kIHNvYmVyIGF0dGVudGlvbiwgdGhhdCB0aGV5IHdlcmUgb24gdGhlIHdheSB0byBiZSBjb250cm9sbGVkIGFuZCB3b24gb3Zlci4gVGhlbiB0aGUgdHJpYnVuZXMgcm9zZSBhbmQgZGVjbGFyZWQgdGhhdCBzaW5jZSB0aGUgc2VuYXRlIHdhcyBub3cgYWN0aW5nIHNvYmVybHksIHRoZSBwZW9wbGUgaW4gdGhlaXIgdHVybiB3b3VsZCBtYWtlIHN1Y2ggY29uY2Vzc2lvbnMgYXMgd2VyZSBmYWlyIGFuZCBob25vdXJhYmxlLiBUaGV5IGluc2lzdGVkLCBob3dldmVyLCB0aGF0IE1hcmNpdXMgc2hvdWxkIG1ha2UgYW5zd2VyIHRvIHRoZSBmb2xsb3dpbmcgY2hhcmdlczogQ291bGQgaGUgZGVueSB0aGF0IGhlIGhhZCBpbnN0aWdhdGVkIHRoZSBzZW5hdGUgdG8gdmlvbGF0ZSB0aGUgY29uc3RpdHV0aW9uIGFuZCBhYnJvZ2F0ZSB0aGUgcG93ZXJzIG9mIHRoZSBwZW9wbGU/IFdoZW4gc3VtbW9uZWQgdG8gYXBwZWFyIGJlZm9yZSB0aGVtLCBoYWQgaGUgbm90IHJlZnVzZWQ/IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCBieSBpbnN1bHRpbmcgYW5kIGJlYXRpbmcgdGhlIGFlZGlsZXMgaW4gdGhlIGZvcnVtLCBoYWQgaGUgbm90IGRvbmUgYWxsIGluIGhpcyBwb3dlciB0byBpbmNpdGUgdGhlIGNpdGl6ZW5zIHRvIGFybXMgYW5kIGJyaW5nIGFib3V0IGEgY2l2aWwgd2FyPyBUaGV5IG1hZGUgdGhpcyBkZW1hbmQgd2l0aCBhIGRlc2lyZSBlaXRoZXIgdGhhdCBNYXJjaXVzIHNob3VsZCBiZSBwdWJsaWNseSBodW1pbGlhdGVkLCBpZjsgY29udHJhcnkgdG8gaGlzIG5hdHVyZSwgaGUgY3VyYmVkIGhpcyBoYXVnaHR5IHNwaXJpdCBhbmQgc3VlZCBmb3IgdGhlIGZhdm91ciBvZiB0aGUgcGVvcGxlOyBvciwgaWYgaGUgeWllbGRlZCB0byBoaXMgbmF0dXJhbCBwcm9tcHRpbmdzLCB0aGF0IGhlIHNob3VsZCBkbyBzb21ldGhpbmcgd2hpY2ggd291bGQganVzdGlmeSB0aGVpciB3cmF0aCBhZ2FpbnN0IGhpbSBhbmQgbWFrZSBpdCBpbXBsYWNhYmxlLiBUaGUgbGF0dGVyIHdhcyB3aGF0IHRoZXkgdGhlIHJhdGhlciBleHBlY3RlZCwgYW5kIHRoZXkgcmlnaHRseSBlc3RpbWF0ZWQgdGhlIG1hbidzIGNoYXJhY3Rlci4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBjYW1lIGFuZCBzdG9vZCBiZWZvcmUgdGhlbSBhcyBvbmUgd2hvIHdvdWxkIGRlZmVuZCBoaW1zZWxmOyBhbmQgdGhlIHBlb3BsZSB3ZXJlIHF1aWV0IGFuZCBzaWxlbnQgaW4gaGlzIHByZXNlbmNlLiBCdXQgd2hlbiwgaW5zdGVhZCBvZiB0aGUgbW9yZSBvciBsZXNzIGRlcHJlY2F0b3J5IGxhbmd1YWdlIGV4cGVjdGVkIGJ5IGhpcyBhdWRpZW5jZSwgaGUgYmVnYW4gbm90IG9ubHkgdG8gZW1wbG95IGFuIG9mZmVuc2l2ZSBib2xkbmVzcyBvZiBzcGVlY2gsIHdoaWNoIGF0IGxhc3QgYmVjYW1lIGFjdHVhbCBkZW51bmNpYXRpb24sIGJ1dCBhbHNvIHRvIHNob3csIGJ5IHRoZSB0b25lIG9mIGhpcyB2b2ljZSBhbmQgdGhlIGNhc3Qgb2YgaGlzIGNvdW50ZW5hbmNlLCB0aGF0IGhpcyBmZWFybGVzc25lc3Mgd2FzIG5vdCBmYXIgcmVtb3ZlZCBmcm9tIGRpc2RhaW4gYW5kIGNvbnRlbXB0LCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz50aGVuIHRoZSBwZW9wbGUgd2FzIGV4YXNwZXJhdGVkLCBhbmQgZ2F2ZSBldmlkZW50IHNpZ25zIHRoYXQgaGlzIHdvcmRzIHJvdXNlZCB0aGVpciBpbXBhdGllbmNlIGFuZCBpbmRpZ25hdGlvbi4gVXBvbiB0aGlzLCBTaWNpbml1cywgdGhlIGJvbGRlc3Qgb2YgdGhlIHRyaWJ1bmVzLCBhZnRlciBhIGJyaWVmIGNvbmZlcmVuY2Ugd2l0aCBoaXMgY29sbGVhZ3VlcywgbWFkZSBmb3JtYWwgcHJvY2xhbWF0aW9uIHRoYXQgTWFyY2l1cyB3YXMgY29uZGVtbmVkIHRvIGRlYXRoIGJ5IHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCBhbmQgb3JkZXJlZCB0aGUgYWVkaWxlcyB0byB0YWtlIGhpbSB1cCB0byB0aGUgVGFycGVpYW4gcm9jayBhdCBvbmNlLCBhbmQgY2FzdCBoaW0gZG93biB0aGUgY2xpZmYgYmVsb3cuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBhZWRpbGVzIGxhaWQgaG9sZCBvZiBoaXMgcGVyc29uLCBpdCBzZWVtZWQsIGV2ZW4gdG8gbWFueSBvZiB0aGUgcGxlYmVpYW5zLCBhIGhvcnJpYmxlIGFuZCBtb25zdHJvdXMgYWN0OyB0aGUgcGF0cmljaWFucywgbW9yZW92ZXIsIHV0dGVybHkgYmVzaWRlIHRoZW1zZWx2ZXMsIGRpc3RyZXNzZWQgYW5kIGhvcnJvciBzdHJpY2tlbiwgcnVzaGVkIHdpdGggbG91ZCBjcmllcyB0byBoaXMgYWlkLiBTb21lIG9mIHRoZW0gYWN0dWFsbHkgcHVzaGVkIGF3YXkgdGhlIG9mZmljZXJzIG1ha2luZyB0aGUgYXJyZXN0LCBhbmQgZ290IE1hcmNpdXMgYW1vbmcgdGhlbXNlbHZlczsgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+c29tZSBzdHJldGNoZWQgb3V0IHRoZWlyIGhhbmRzIGluIHN1cHBsaWNhdGlvbiBvZiB0aGUgbXVsdGl0dWRlLCBzaW5jZSB3b3JkcyBhbmQgY3JpZXMgd2VyZSBvZiBubyBhdmFpbCBhbWlkIHN1Y2ggZGlzb3JkZXIgYW5kIGNvbmZ1c2lvbi4gQXQgbGFzdCB0aGUgZnJpZW5kcyBhbmQga2luZHJlZCBvZiB0aGUgdHJpYnVuZXMsIHBlcmNlaXZpbmcgdGhhdCBpdCB3YXMgaW1wb3NzaWJsZSwgd2l0aG91dCBzbGF5aW5nIG1hbnkgcGF0cmljaWFucywgdG8gbGVhZCBNYXJjaXVzIGF3YXkgYW5kIHB1bmlzaCBoaW0sIHBlcnN1YWRlZCB0aGVtIHRvIHJlbWl0IHdoYXQgd2FzIHVudXN1YWwgYW5kIG9wcHJlc3NpdmUgaW4gaGlzIHNlbnRlbmNlLCBub3QgdG8gdXNlIHZpb2xlbmNlIGFuZCBwdXQgaGltIHRvIGRlYXRoIHdpdGhvdXQgYSB0cmlhbCwgYnV0IHRvIHN1cnJlbmRlciBoaW0gYW5kIHJlZmVyIGhpcyBjYXNlIHRvIHRoZSBwZW9wbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gU2ljaW5pdXMsIGJlY29taW5nIGNhbG0sIGFza2VkIHRoZSBwYXRyaWNpYW5zIHdoYXQgdGhleSBtZWFudCBieSB0YWtpbmcgTWFyY2l1cyBhd2F5IGZyb20gdGhlIHBlb3BsZSB3aGVuIGl0IHdpc2hlZCB0byBwdW5pc2ggaGltLiBCdXQgdGhlIHBhdHJpY2lhbnMgYXNrZWQgaW4gdGhlaXIgdHVybjogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IHRoZW4gaXMgeW91ciBwdXJwb3NlLCBhbmQgd2hhdCBkbyB5ZSBtZWFuLCBieSB0aHVzIGRyYWdnaW5nIG9uZSBvZiB0aGUgZm9yZW1vc3QgbWVuIG9mIFJvbWUsIHdpdGhvdXQgYSB0cmlhbCwgdG8gYSBzYXZhZ2UgYW5kIGlsbGVnYWwgcHVuaXNobWVudD88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwgdGhlbiw8L3E+IHNhaWQgU2ljaW5pdXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+eWUgc2hhbGwgbm90IGhhdmUgYW55IHN1Y2ggZXhjdXNlIGZvciBmYWN0aW91cyBxdWFycmVsIHdpdGggdGhlIHBlb3BsZTsgZm9yIHRoZXkgZ3JhbnQgeW91ciBkZW1hbmQgdGhhdCB0aGUgbWFuIGhhdmUgYSB0cmlhbC4gQW5kIHdlIGNpdGUgdGhlZSwgTWFyY2l1cywgdG8gYXBwZWFyIGJlZm9yZSB0aGUgY2l0aXplbnMgb24gdGhlIHRoaXJkIG1hcmtldC1kYXkgZW5zdWluZywgYW5kIGNvbnZpbmNlIHRoZW0sIGlmIHlvdSBjYW4sIG9mIHlvdXIgaW5ub2NlbmNlLCBhc3N1cmVkIHRoYXQgdGhleSB3aWxsIGRlY2lkZSB5b3VyIGNhc2UgYnkgdm90ZS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHRpbWUgYmVpbmcsIHRoZW4sIHRoZSBwYXRyaWNpYW5zIHdlcmUgc2F0aXNmaWVkIHdpdGggdGhpcyB0cnVjZSwgYW5kIHdlbnQgYXdheSBpbiBnbGFkIHBvc3Nlc3Npb24gb2YgTWFyY2l1cy4gQnV0IGluIHRoZSB0aW1lIHdoaWNoIGludGVydmVuZWQgYmVmb3JlIHRoZSB0aGlyZCBtYXJrZXQtZGF5IChmb3IgdGhlIFJvbWFucyBob2xkIHRoZWlyIG1hcmtldHMgZXZlcnkgbmludGggZGF5LCBjYWxsaW5nIHRoZW0sIHRoZXJlZm9yZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5udW5kaW5hZTwvcT4pLCBhIGNhbXBhaWduIHdhcyB1bmRlcnRha2VuIGFnYWluc3QgdGhlIGNpdHkgb2YgQW50aXVtLCB3aGljaCBsZWQgdGhlbSB0byBob3BlIHRoYXQgdGhlIGlzc3VlIG1pZ2h0IGJlIGF2b2lkZWQgYWx0b2dldGhlci4gVGhlIGNhbXBhaWduIHdvdWxkIGxhc3QgbG9uZyBlbm91Z2gsIHRoZXkgdGhvdWdodCwgZm9yIHRoZSBwZW9wbGUgdG8gYmVjb21lIHRyYWN0YWJsZSwgYWZ0ZXIgdGhlaXIgcmFnZSBoYWQgbGFuZ3Vpc2hlZCBvciBhbHRvZ2V0aGVyIGRpc2FwcGVhcmVkIGJ5IHJlYXNvbiBvZiB0aGVpciBvY2N1cGF0aW9uIHdpdGggdGhlIHdhci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHByZXNlbnRseSwgd2hlbiB0aGUgY2l0aXplbnMgcmV0dXJuZWQgaG9tZSBhZnRlciBhIHNwZWVkeSBzZXR0bGVtZW50IG9mIHRoZWlyIGRpc3B1dGUgd2l0aCBBbnRpdW0sIHRoZSBwYXRyaWNpYW5zIHdlcmUgaW4gZnJlcXVlbnQgY29uY2xhdmUsIGJlaW5nIGZ1bGwgb2YgZmVhciwgYW5kIGRlbGliZXJhdGluZyBob3cgdGhleSBtaWdodCBub3Qgc3VycmVuZGVyIE1hcmNpdXMsIGFuZCB5ZXQgcHJldmVudCB0aGUgcG9wdWxhciBsZWFkZXJzIGZyb20gdGhyb3dpbmcgdGhlIHBlb3BsZSBhZ2FpbiBpbnRvIHR1bXVsdCBhbmQgZGlzb3JkZXIuIEFwcGl1cyBDbGF1ZGl1cywgaW5kZWVkLCB3aG8gd2FzIGNvdW50ZWQgYW1vbmcgdGhvc2UgbW9zdCBob3N0aWxlIHRvIHRoZSBjbGFpbXMgb2YgdGhlIHBlb3BsZSwgc2FpZCB3aXRoIGFsbCBzb2xlbW5pdHkgdGhhdCB0aGUgc2VuYXRlIHdvdWxkIGRlc3Ryb3kgaXRzZWxmIGFuZCB1dHRlcmx5IGJldHJheSB0aGUgZ292ZXJubWVudCBvZiB0aGUgY2l0eSwgaWYgaXQgc2hvdWxkIHN1ZmZlciB0aGUgcGVvcGxlIHRvIHdpZWxkIHRoZWlyIHZvdGUgaW4ganVkZ2VtZW50IG9uIHRoZSBwYXRyaWNpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIG9sZGVzdCBzZW5hdG9ycywgYW5kIHRob3NlIG1vc3QgaW5jbGluZWQgdG8gZmF2b3VyIHRoZSBwZW9wbGUsIG1haW50YWluZWQgb24gdGhlIGNvbnRyYXJ5IHRoYXQgaXQgd291bGQgbm90IGJlIHJlbmRlcmVkIGhhcnNoIG9yIHNldmVyZSBieSBpdHMgZXhlcmNpc2Ugb2YgdGhpcyBwb3dlciwgYnV0IG1pbGQgYW5kIGh1bWFuZTsgZm9yIHNpbmNlIGl0IGRpZCBub3QgZGVzcGlzZSB0aGUgc2VuYXRlLCBidXQgcmF0aGVyIHRob3VnaHQgaXRzZWxmIGRlc3Bpc2VkIGJ5IHRoYXQgYm9keSwgdGhlIHByZXJvZ2F0aXZlIG9mIHRyeWluZyBhIHNlbmF0b3Igd291bGQgYmUgYSBzb2xhY2UgdG8gaXRzIGZlZWxpbmdzIGFuZCBhIG1hcmsgb2YgaG9ub3VyLCBzbyB0aGF0IGFzIHNvb24gYXMgaXQgcHJvY2VlZGVkIHRvIHZvdGUgaXQgd291bGQgbGF5IGFzaWRlIGl0cyB3cmF0aC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1hcmNpdXMsIHRoZXJlZm9yZSwgc2VlaW5nIHRoYXQgdGhlIHNlbmF0ZSB3YXMgaW4gc3VzcGVuc2UgYmV0d2VlbiBpdHMga2luZGx5IGZlZWxpbmdzIHRvd2FyZHMgaGltIGFuZCBpdHMgZmVhciBvZiB0aGUgcGVvcGxlLCBhc2tlZCB0aGUgdHJpYnVuZXMgd2hhdCB0aGUgYWNjdXNhdGlvbnMgYWdhaW5zdCBoaW0gd2VyZSwgYW5kIG9uIHdoYXQgY2hhcmdlIGhlIHdvdWxkIGJlIHRyaWVkIGlmIHRoZXkgbGVkIGhpbSBiZWZvcmUgdGhlIHBlb3BsZS4gVGhleSByZXBsaWVkIHRoYXQgdGhlIGNoYXJnZSBhZ2FpbnN0IGhpbSB3YXMgdXN1cnBhdGlvbiwgYW5kIHRoYXQgdGhleSB3b3VsZCBwcm92ZSBoaW0gZ3VpbHR5IG9mIHBsYW5uaW5nIGEgdXN1cnBhdGlvbiBvZiB0aGUgZ292ZXJubWVudC4gVGhlcmV1cG9uIGhlIHJvc2Ugb2YgaGlzIG93biBhY2NvcmQgYW5kIHNhaWQgaGUgd2FzIGdvaW5nIGF0IG9uY2UgYmVmb3JlIHRoZSBwZW9wbGUgdG8gbWFrZSBoaXMgZGVmZW5jZSwgYW5kIHdvdWxkIGRlcHJlY2F0ZSBubyBtYW5uZXIgb2YgdHJpYWwsIG5vciwgc2hvdWxkIGhlIGJlIGZvdW5kIGd1aWx0eSwgYW55IGZvcm0gb2YgcHVuaXNobWVudDsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Pbmx5LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zZWUgdGhhdCB5ZSBjb25maW5lIHlvdXJzZWx2ZXMgdG8gdGhlIGNoYXJnZSBtZW50aW9uZWQsIGFuZCBkbyBub3QgcGxheSBmYWxzZSB3aXRoIHRoZSBzZW5hdGUuPC9xPiBUaGUgdHJpYnVuZXMgYWdyZWVkIHRvIHRoaXMsIGFuZCBvbiB0aGVzZSB0ZXJtcyB0aGUgdHJpYWwgd2FzIGhlbGQuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgcGVvcGxlIHdlcmUgY29tZSB0b2dldGhlciwgaW4gdGhlIGZpcnN0IHBsYWNlLCB0aGUgdHJpYnVuZXMgaW5zaXN0ZWQgdGhhdCB0aGUgdm90ZXMgYmUgY2FzdCBub3QgYnkgY2VudHVyaWVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk91dCBvZiB0aGUgMTkzIGNlbnR1cmllcywgdGhlIHJpY2hlc3QgY2xhc3MgYWxvbmUgaGFkIDk4LCBhZ2FpbnN0IDk1IG9mIGFsbCB0aGUgb3RoZXIgZml2ZSBjbGFzc2VzIHB1dCB0b2dldGhlci48L25vdGU+IGJ1dCBieSB0cmliZXMsIHRodXMgbWFraW5nIHRoZSBpbmRpZ2VudCBhbmQgb2ZmaWNpb3VzIHJhYmJsZSwgd2hpY2ggaGFkIG5vIHRob3VnaHQgb2YgaG9ub3VyLCBzdXBlcmlvciBpbiB2b3RpbmcgcG93ZXIgdG8gdGhlIHdlYWx0aHkgYW5kIHdlbGwga25vd24gY2l0aXplbnMgb2YgdGhlIG1pbGl0YXJ5IGNsYXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2Vjb25kIHBsYWNlLCBhYmFuZG9uaW5nIHRoZSBjaGFyZ2Ugb2YgdXN1cnBhdGlvbiwgd2hpY2ggY291bGQgbm90IGJlIHByb3ZlbiwgdGhleSBkd2VsdCBhZ2FpbiB1cG9uIHRoZSBzcGVlY2ggd2hpY2ggTWFyY2l1cyBoYWQgcHJldmlvdXNseSBtYWRlIGluIHRoZSBzZW5hdGUsIHdoZW4gaGUgcHJvdGVzdGVkIGFnYWluc3QgdGhlIGxvd2VyaW5nIG9mIHRoZSBtYXJrZXQtcHJpY2Ugb2YgZ3JhaW4sIGFuZCB1cmdlZCB0aGVtIHRvIHRha2UgdGhlIHRyaWJ1bmF0ZSBhd2F5IGZyb20gdGhlIHBlb3BsZS4gVGhleSBhbHNvIGFkZGVkIGEgZnJlc2ggY2hhcmdlIGFnYWluc3QgaGltLCBuYW1lbHksIGhpcyBkaXN0cmlidXRpb24gb2YgdGhlIHNwb2lscyB3aGljaCBoZSBoYWQgdGFrZW4gZnJvbSB0aGUgY291bnRyeSBvZiBBbnRpdW07IHRoZXNlLCB0aGV5IHNhaWQsIGhlIGhhZCBub3QgdHVybmVkIGludG8gdGhlIHB1YmxpYyB0cmVhc3VyeSwgYnV0IGhhZCBkaXN0cmlidXRlZCB0aGVtIGFtb25nIHRob3NlIHdobyBtYWRlIHRoZSBjYW1wYWlnbiB3aXRoIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnkgdGhpcyBhY2N1c2F0aW9uIE1hcmNpdXMgaXMgc2FpZCB0byBoYXZlIGJlZW4gbW9yZSBkaXN0dXJiZWQgdGhhbiBieSBhbGwgdGhlIHJlc3QuIEZvciBoZSBoYWQgbm90IGV4cGVjdGVkIGl0LCBhbmQgd2FzIG5vdCByZWFkeSBhdCBvbmNlIHdpdGggYW4gYW5zd2VyIHdoaWNoIHdvdWxkIHNhdGlzZnkgdGhlIHBlb3BsZSwgYnV0IGJlZ2FuIHRvIHByYWlzZSB0aG9zZSB3aG8gaGFkIG1hZGUgdGhlIGNhbXBhaWduLCB3aGVyZXVwb24gaGUgd2FzIGNsYW1vcm91c2x5IGludGVycnVwdGVkIGJ5IHRob3NlIHdobyBoYWQgbm90IG1hZGUgaXQsIGFuZCB0aGV5IHdlcmUgdGhlIG1vcmUgbnVtZXJvdXMuIEluIHRoZSBlbmQsIHRoZXJlZm9yZSwgdGhlIHZvdGUgd2FzIHRha2VuIGJ5IHRyaWJlcywgYW5kIGEgbWFqb3JpdHkgb2YgdGhyZWUgY29uZGVtbmVkIGhpbTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA3LjY0Ij5EaW9ueXNpdXMgSGFsLiAodmlpLiA2NCk8L2JpYmw+IHNheXMgdGhhdCBuaW5lIG9mIHRoZSB0d2VudHktb25lIHRyaWJlcyB2b3RlZCB0byBhY3F1aXQgTWFyY2l1cy48L25vdGU+IFRoZSBwZW5hbHR5IGFzc2lnbmVkIHdhcyBwZXJwZXR1YWwgYmFuaXNobWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIHJlc3VsdCB3YXMgYW5ub3VuY2VkLCB0aGUgcGVvcGxlIHdlbnQgb2ZmIGluIGdyZWF0ZXIgZWxhdGlvbiBhbmQgZGVsaWdodCB0aGFuIHRoZXkgaGFkIGV2ZXIgc2hvd24gZm9yIGFueSB2aWN0b3J5IGluIGJhdHRsZSBvdmVyIHRoZWlyIGVuZW1pZXM7IGJ1dCB0aGUgc2VuYXRlIHdhcyBpbiBkaXN0cmVzcyBhbmQgZGlyZSBkZWplY3Rpb24sIHJlcGVudGluZyBub3cgYW5kIHZleGVkIHRvIHRoZSBzb3VsIHRoYXQgdGhleSBoYWQgbm90IGRvbmUgYW5kIHN1ZmZlcmVkIGFsbCB0aGluZ3MgcmF0aGVyIHRoYW4gYWxsb3cgdGhlIHBlb3BsZSB0byBpbnN1bHQgdGhlbSBpbiB0aGUgZXhlcmNpc2Ugb2Ygc3VjaCBncmVhdCBwb3dlcnMuIEFuZCB0aGVyZSB3YXMgbm8gbmVlZCBub3cgb2YgZHJlc3Mgb3Igb3RoZXIgbWFya3Mgb2YgZGlzdGluY3Rpb24gaW4gdGVsbGluZyBvbmUgY2xhc3MgZnJvbSBhbm90aGVyLCBidXQgaXQgd2FzIGNsZWFyIGF0IG9uY2UgdGhhdCBoZSB3aG8gcmVqb2ljZWQgd2FzIGEgcGxlYmVpYW4sIGFuZCBoZSB3aG8gd2FzIHZleGVkLCBhIHBhdHJpY2lhbi4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFsYmVpdCBNYXJjaXVzIGhpbXNlbGY7IHdobyB3YXMgbmVpdGhlciBkYXVudGVkIG5vciBodW1ibGVkLCBidXQgaW4gbWllbiwgcG9ydCwgYW5kIGNvdW50ZW5hbmNlIGZ1bGx5IGNvbXBvc2VkLCBzZWVtZWQgdGhlIG9ubHkgbWFuIGFtb25nIGFsbCB0aGUgZGlzdHJlc3NlZCBwYXRyaWNpYW5zIHdobyB3YXMgbm90IHRvdWNoZWQgYnkgaGlzIGV2aWwgcGxpZ2h0LiBBbmQgdGhpcyB3YXMgbm90IGR1ZSB0byBjYWxjdWxhdGlvbiwgb3IgZ2VudGxlbmVzcywgb3IgdG8gYSBjYWxtIGVuZHVyYW5jZSBvZiBoaXMgZmF0ZSwgYnV0IGhlIHdhcyBzdGlycmVkIGJ5IHJhZ2UgYW5kIGRlZXAgcmVzZW50bWVudCwgYW5kIHRoaXMsIGFsdGhvdWdoIHRoZSBtYW55IGtub3cgaXQgbm90LCBpcyBwYWluLiBGb3Igd2hlbiBwYWluIGlzIHRyYW5zbXV0ZWQgaW50byBhbmdlciwgaXQgaXMgY29uc3VtZWQsIGFzIGl0IHdlcmUsIGJ5IGl0cyBmbGFtZXMsIGFuZCBjYXN0cyBvZmYgaXRzIG93biBodW1pbGl0eSBhbmQgc2xvdGguIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGUgYW5ncnkgbWFuIG1ha2VzIGEgc2hvdyBvZiBhY3Rpdml0eSwgYXMgaGUgd2hvIGhhcyBhIGZldmVyIGlzIGhvdCwgaGlzIHNwaXJpdCBiZWluZywgc28gdG8gc3BlYWssIGFmZmxpY3RlZCB3aXRoIHRocm9iYmluZywgZGlzdGVudGlvbiwgYW5kIGluZmxhdGlvbi4gQW5kIHRoYXQgc3VjaCB3YXMgaGlzIGNvbmRpdGlvbiwgTWFyY2l1cyBzaG93ZWQgcmlnaHQgcXVpY2tseSBieSBoaXMgY29uZHVjdC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdlbnQgaG9tZSwgd2hlcmUgaGlzIG1vdGhlciBhbmQgaGlzIHdpZmUgbWV0IGhpbSB3aXRoIHdhaWxpbmdzIGFuZCBsb3VkIGxhbWVudGF0aW9ucywgYW5kIGFmdGVyIGVtYnJhY2luZyB0aGVtIGFuZCBiaWRkaW5nIHRoZW0gdG8gYmVhciB3aXRoIGVxdWFuaW1pdHkgdGhlIGZhdGUgdGhhdCBoYWQgY29tZSB1cG9uIHRoZW0sIGhlIHN0cmFpZ2h0d2F5IGRlcGFydGVkIGFuZCB3ZW50IHRvIHRoZSBjaXR5IGdhdGUuIFRoaXRoZXIgYWxsIHRoZSBwYXRyaWNpYW5zIGluIGEgYm9keSBlc2NvcnRlZCBoaW0sIGJ1dCB3aXRob3V0IHRha2luZyBhbnl0aGluZyBvciBhc2tpbmcgZm9yIGFueXRoaW5nIGhlIGRlcGFydGVkLCBoYXZpbmcgb25seSB0aHJlZSBvciBmb3VyIG9mIGhpcyBjbGllbnRzIHdpdGggaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYSBmZXcgZGF5cyBoZSByZW1haW5lZCBieSBoaW1zZWxmIGF0IHNvbWUgY291bnRyeSBwbGFjZSwgdG9ybiBieSBtYW55IGNvbmZsaWN0aW5nIGNvdW5zZWxzLCBzdWNoIGFzIGhpcyBhbmdlciBzdWdnZXN0ZWQgdG8gaGltLCBwdXJwb3Npbmcgbm8gZ29vZCBvciBoZWxwZnVsIHRoaW5nIGF0IGFsbCwgYnV0IG9ubHkgaG93IGhlIG1pZ2h0IHRha2UgdmVuZ2VhbmNlIG9uIHRoZSBSb21hbnMuIEF0IGxhc3QgaGUgZGV0ZXJtaW5lZCB0byBpbmNpdGUgc29tZSBuZWlnaGJvdXJpbmcgbmF0aW9uIHRvIGEgZm9ybWlkYWJsZSB3YXIgYWdhaW5zdCB0aGVtLiBBY2NvcmRpbmdseSwgaGUgc2V0IG91dCB0byBtYWtlIHRyaWFsIG9mIHRoZSBWb2xzY2lhbnMgZmlyc3QsIGtub3dpbmcgdGhhdCB0aGV5IHdlcmUgc3RpbGwgYWJ1bmRhbnRseSBzdXBwbGllZCB3aXRoIG1lbiBhbmQgbW9uZXksIGFuZCB0aGlua2luZyB0aGF0IHRoZXkgaGFkIGJlZW4gbm90IHNvIG11Y2ggY3JpcHBsZWQgaW4gcG93ZXIgYnkgdGhlaXIgcmVjZW50IGRlZmVhdHMgYXMgZmlsbGVkIHdpdGggY29udGVudGlvdXMgd3JhdGggYWdhaW5zdCB0aGUgUm9tYW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoZXJlIHdhcyBhIGNlcnRhaW4gbWFuIG9mIEFudGl1bSwgVHVsbHVzIEF1ZmlkaXVzIGJ5IG5hbWUsIHdobywgYnkgcmVhc29uIG9mIGhpcyB3ZWFsdGggYW5kIGJyYXZlcnkgYW5kIGNvbnNwaWN1b3VzIGxpbmVhZ2UsIGhhZCB0aGUgc3RhbmRpbmcgb2YgYSBraW5nIGFtb25nIGFsbCB0aGUgVm9sc2NpYW5zLiBCeSB0aGlzIG1hbiBNYXJjaXVzIGtuZXcgaGltc2VsZiB0byBiZSBoYXRlZCBhcyBubyBvdGhlciBSb21hbiB3YXM7IGZvciB0aGV5IGhhZCBvZnRlbiBleGNoYW5nZWQgdGhyZWF0cyBhbmQgY2hhbGxlbmdlcyBpbiB0aGUgYmF0dGxlcyB3aGljaCB0aGV5IGhhZCBmb3VnaHQsIGFuZCBzdWNoIGVtdWxvdXMgYm9hc3RpbmdzIGFzIHRoZSBhbWJpdGlvdXMgYXJkb3VyIG9mIHlvdXRoZnVsIHdhcnJpb3JzIHByb21wdHMgaGFkIGdpdmVuIHJpc2UgdG8gYSBtdXR1YWwgaGF0cmVkIG9mIHRoZWlyIG93biwgaW4gYWRkaXRpb24gdG8gdGhhdCBvZiB0aGVpciBwZW9wbGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBzaW5jZSBoZSBzYXcgdGhhdCBUdWxsdXMgaGFkIGEgY2VydGFpbiBncmFuZGV1ciBvZiBzcGlyaXQsIGFuZCB0aGF0IGhlLCBtb3JlIHRoYW4gYWxsIG90aGVyIFZvbHNjaWFucywgd2FzIGVhZ2VyIHRvIHJldGFsaWF0ZSB1cG9uIHRoZSBSb21hbnMsIGlmIHRoZXkgZ2F2ZSBoaW0gYW55IG9wcG9ydHVuaXR5LCBNYXJjaXVzIGJvcmUgd2l0bmVzcyB0byB0aGUgdHJ1dGggb2YgaGltIHdobyBzYWlkPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGVyYWNsZXRpdXMsIEZyYWdtZW50IDEwNSAoQnl3YXRlciwgPHRpdGxlPkhlcmFjbGl0aSBFcGhlc2lpIHJlbGlxdWlhZTwvdGl0bGU+LCBwLiA0MSkuPC9ub3RlPjogIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2l0aCBhbmdlciBpdCBpcyBoYXJkIHRvIGZpZ2h0OyBmb3Igd2hhdHNvZSdlciBpdCB3aXNoZXMsIHRoYXQgaXQgYnV5cywgZXZlbiBhdCB0aGUgY29zdCBvZiBsaWZlLjwvcT4gRm9yLCBwdXR0aW5nIG9uIHN1Y2ggY2xvdGhpbmcgYW5kIGF0dGlyZSBhcyB3b3VsZCBtYWtlIGhpbSBzZWVtLCB0byBhbnkgb25lIHdobyBzYXcgaGltLCBsZWFzdCBsaWtlIHRoZSBtYW4gaGUgd2FzLCBsaWtlIE9keXNzZXVzLCAKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+SGUgd2VudCBpbnRvIHRoZSBjaXR5IG9mIGhpcyBkZWFkbHkgZm9lcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDQuMjQ2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPk9keXNzZXk8L3RpdGxlPiwgaXYuIDI0Ni48L2JpYmw+CiAgICAgICAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IFhYSUlJLiBJdCB3YXMgZXZlbmluZywgYW5kIG1hbnkgbWV0IGhpbSwgYnV0IG5vIG1hbiBrbmV3IGhpbS4gSGUgcHJvY2VlZGVkLCB0aGVyZWZvcmUsIHRvIHRoZSBob3VzZSBvZiBUdWxsdXMsIGFuZCBzbGlwcGluZyBpbiB1bmF3YXJlcywgdG9vayBoaXMgc2VhdCBhdCB0aGUgaGVhcnRoPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBzYWNyZWQgcGxhY2Ugb2YgcmVmdWdlIGZvciB0aGUgc3VwcGxpYW50LiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDcuMTUzIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk9keXNzZXk8L3RpdGxlPiwgdmlpLiAxNTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGluIHNpbGVuY2UsIGNvdmVyZWQgaGlzIGhlYWQsIGFuZCByZW1haW5lZCB0aGVyZSBtb3Rpb25sZXNzLiBUaGUgcGVvcGxlIG9mIHRoZSBob3VzZSB3ZXJlIGFtYXplZCwgYW5kIGRpZCBub3QgdmVudHVyZSB0byByYWlzZSBoaW0gdXAsIGZvciBoaXMgbWllbiBhbmQgaGlzIHNpbGVuY2UgZ2F2ZSBoaW0gYSBjZXJ0YWluIGRpZ25pdHk7IGJ1dCB0aGV5IHRvbGQgVHVsbHVzLCB3aG8gd2FzIGF0IHN1cHBlciwgd2hhdCBhIHN0cmFuZ2UgdGhpbmcgaGFkIGhhcHBlbmVkLiBUdWxsdXMgcm9zZSBmcm9tIHRhYmxlIGFuZCBjYW1lIHRvIGhpbSwgYW5kIGFza2VkIGhpbSB3aG8gaGUgd2FzLCBhbmQgd2h5IGhlIHdhcyBjb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzLCB0aGVuLCBNYXJjaXVzIHVuY292ZXJlZCBoaXMgaGVhZCwgYW5kIGFmdGVyIGEgc2xpZ2h0IHBhdXNlLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIHRob3UgZG9zdCBub3QgeWV0IHJlY29nbml6ZSBtZSwgVHVsbHVzLCBidXQgZGlzYmVsaWV2ZXN0IHRoaW5lIGV5ZXMsIEkgbXVzdCBiZSBteSBvd24gYWNjdXNlci4gSSBhbSBDYWl1cyBNYXJjaXVzLCBoZSB3aG8gaGFzIHdyb3VnaHQgdGhlZSBhbmQgdGhlIFZvbHNjaWFucyBtb3N0IGhhcm0sIGFuZCB0aGUgc3VybmFtZSBvZiBDb3Jpb2xhbnVzIHdoaWNoIEkgYmVhciBwZXJtaXRzIG5vIGRlbmlhbCBvZiB0aGlzLiAKCQkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SSBoYXZlIHdvbiBubyBvdGhlciBwcml6ZSBmb3IgYWxsIHRoZSB0b2lscyBhbmQgcGVyaWxzIHdoaWNoIEkgaGF2ZSB1bmRlcmdvbmUgdGhhbiB0aGUgbmFtZSB3aGljaCBpcyBhIGJhZGdlIG9mIG15IGVubWl0eSB0byB5b3VyIHBlb3BsZS4gVGhpcywgaW5kZWVkLCBjYW5ub3QgYmUgdGFrZW4gYXdheSBmcm9tIG1lOyBidXQgb2YgZXZlcnl0aGluZyBlbHNlIEkgaGF2ZSBiZWVuIHN0cmlwcGVkLCB0aHJvdWdoIHRoZSBlbnZ5IGFuZCBpbnNvbGVuY2Ugb2YgdGhlIFJvbWFuIHBlb3BsZSwgYW5kIHRoZSBjb3dhcmRseSB0cmVhY2hlcnkgb2YgdGhlIG1hZ2lzdHJhdGVzIGFuZCB0aG9zZSBvZiBteSBvd24gb3JkZXIuIEkgaGF2ZSBiZWVuIGRyaXZlbiBpbnRvIGV4aWxlLCB0b28sIGFuZCBhbSBiZWNvbWUgYSBzdXBwbGlhbnQgYXQgdGh5IGhlYXJ0aCwgbm90IGZvciB0aGUgc2FrZSBvZiBzZWN1cml0eSBhbmQgc2FmZXR5LOKAlGZvciB3aHkgc2hvdWxkIEkgY29tZSBoaXRoZXIgaWYgSSB3ZXJlIGFmcmFpZCBvZiBkZWF0aCA/4oCUYnV0IHdpdGggYSBkZXNpcmUgdG8gdGFrZSB2ZW5nZWFuY2Ugb24gdGhvc2Ugd2hvIGhhdmUgZHJpdmVuIG1lIGZvcnRoLCB3aGljaCBJIHRha2UgYXQgb25jZSB3aGVuIEkgcHV0IG15c2VsZiBpbiB0aHkgcG93ZXIuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JZjsgdGhlbiwgdGhvdSBhcnQgZWFnZXIgdG8gYXNzYWlsIHRoaW5lIGVuZW1pZXMsIGNvbWUsIGdvb2QgU2lyLCB0YWtlIGFkdmFudGFnZSBvZiBteSBjYWxhbWl0aWVzLCBhbmQgbWFrZSBteSBpbmRpdmlkdWFsIG1pc2ZvcnR1bmUgdGhlIGdvb2QgZm9ydHVuZSBvZiBhbGwgdGhlIFZvbHNjaWFuczsgSSBzaGFsbCBmaWdodCBiZXR0ZXIgZm9yIHlvdSB0aGFuIEkgaGF2ZSBhZ2FpbnN0IHlvdSwgaW4ganVzdCBzbyBmYXIgYXMgdGhvc2Ugd2hvIGtub3cgdGhlIHNlY3JldHMgb2YgdGhlaXIgZW5lbWllcyBmaWdodCBiZXR0ZXIgdGhhbiB0aG9zZSB3aG8gZG8gbm90LiBCdXQgaWYgdGhvdSBoYXN0IGdpdmVuIHVwIGhvcGUsIG5laXRoZXIgZG8gSSB3aXNoIHRvIGxpdmUsIG5vciBpcyBpdCBmb3IgdGhpbmUgYWR2YW50YWdlIHRvIHNwYXJlIG9uZSB3aG8gaGFzIGxvbmcgYmVlbiBhbiBlbmVteSBhbmQgYSBmb2UsIGFuZCBub3cgaXMgdW5wcm9maXRhYmxlIGFuZCB1c2VsZXNzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gVHVsbHVzIGhlYXJkIHRoaXMsIGhlIHdhcyB3b25kZXJmdWxseSBwbGVhc2VkLCBhbmQgZ2l2aW5nIGhpbSBoaXMgcmlnaHQgaGFuZCwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5SaXNlIHVwLCBNYXJjaXVzLCBhbmQgYmUgb2YgZ29vZCBjb3VyYWdlLiBJbiBnaXZpbmcgdGh5c2VsZiB0byB1cywgdGhvdSBicmluZ2VzdCB1cyBhIGdyZWF0IGdvb2QsIGFuZCB0aG91IG1heWVzdCBleHBlY3QgYSBncmVhdGVyIG9uZSBzdGlsbCBmcm9tIHRoZSBWb2xzY2lhbnMuPC9xPiBUaGVuIGhlIGVudGVydGFpbmVkIE1hcmNpdXMgYXQgdGFibGUgd2l0aCBldmVyeSBtYXJrIG9mIGtpbmRuZXNzLCBhbmQgZHVyaW5nIHRoZSBlbnN1aW5nIGRheXMgdGhleSB0b29rIGNvdW5zZWwgdG9nZXRoZXIgY29uY2VybmluZyB0aGUgd2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkxpdnkgc2ltcGx5IHNheXMgdGhhdCBNYXJjaXVzIHdhcyBraW5kbHkgcmVjZWl2ZWQgYnkgdGhlIFZvbHNjaWFucywgYW5kIHRoYXQgaGUgbG9kZ2VkIHdpdGggVHVsbHVzIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzUuNiIgdmFsaWQ9InllcyI+KGlpLiAzNSwgNikuPC9iaWJsPiBDaGFwdGVycyB4eGkuLXh4aWlpLiBhZ3JlZSBjbG9zZWx5IHdpdGggPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuSC4gNy42NyI+RGlvbnlzaXVzIEhhbC4gdmlpLiA2NzwvYmlibD4gYW5kIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMSI+dmlpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCBSb21lLCBvd2luZyB0byB0aGUgaGF0cmVkIG9mIHRoZSBwZW9wbGUgYnkgdGhlIHBhdHJpY2lhbnMsIHdobyB3ZXJlIGVzcGVjaWFsbHkgZW1iaXR0ZXJlZCBieSB0aGUgY29uZGVtbmF0aW9uIG9mIE1hcmNpdXMsIHRoZXJlIHdlcmUgZ3JlYXQgY29tbW90aW9ucywgYW5kIG1hbnkgc2lnbnMgZnJvbSBoZWF2ZW4gd2VyZSByZXBvcnRlZCBieSBzZWVycywgcHJpZXN0cywgYW5kIHByaXZhdGUgcGVyc29ucywgd2hpY2ggY291bGQgbm90IGJlIGlnbm9yZWQuIE9uZSBvZiB0aGVzZSBpcyBzYWlkIHRvIGhhdmUgYmVlbiBhcyBmb2xsb3dzLiBUaGVyZSB3YXMgb25lIFRpdHVzIExhdGludXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHN0b3J5IGlzIGZvdW5kIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzYiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzNjwvYmlibD4sIGFuZCBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iVi4gTWF4LiAxLjcuNCI+VmFsZXJpdXMgTWF4aW11cywgaS4gNywgNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYSBtYW4gb2Ygbm8gZ3JlYXQgcHJvbWluZW5jZSwgYnV0IG9mIHF1aWV0IGFuZCBtb2Rlc3QgbGlmZSBpbiBnZW5lcmFsLCBhbmQgZnJlZSBmcm9tIHN1cGVyc3RpdGlvdXMgZmVhcnMsIGFzIGhlIHdhcyBhbHNvLCBhbmQgeWV0IG1vcmUsIGZyb20gdmFpbiBwcmV0ZW5zaW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBtYW4gZHJlYW1lZCB0aGF0IEp1cGl0ZXIgYXBwZWFyZWQgdG8gaGltLCBhbmQgYmFkZSBoaW0gdGVsbCB0aGUgc2VuYXRlIHRoYXQgdGhlIGRhbmNlciwgd2hvbSB0aGV5IGhhZCBhcHBvaW50ZWQgdG8gaGVhZCBoaXMgcHJvY2Vzc2lvbiwgd2FzIGEgYmFkIG9uZSwgYW5kIGdhdmUgaGltIHRoZSBncmVhdGVzdCBkaXNwbGVhc3VyZS4gQWZ0ZXIgaGF2aW5nIHRoaXMgdmlzaW9uLCBUaXR1cyBzYWlkLCBoZSBnYXZlIGl0IG5vIHRob3VnaHQgYXQgYWxsIGF0IGZpcnN0LCBidXQgYWZ0ZXIgaGUgaGFkIHNlZW4gaXQgYSBzZWNvbmQgYW5kIGEgdGhpcmQgdGltZSwgYW5kIHN0aWxsIG5lZ2xlY3RlZCBpdCwgaGUgaGFkIHN1ZmZlcmVkIHRoZSBsb3NzIG9mIGFuIGV4Y2VsbGVudCBzb24gYnkgZGVhdGgsIGFuZCBoYWQgaGltc2VsZiBiZWNvbWUgc3VkZGVubHkgcGFsc2llZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBzdG9yeSBoZSB0b2xkIGFmdGVyIGhhdmluZyBiZWVuIGJyb3VnaHQgaW50byB0aGUgc2VuYXRlIG9uIGEgbGl0dGVyLCBhbmQgbm8gc29vbmVyIGhhZCBoZSB0b2xkIGl0LCB0aGV5IHNheSwgdGhhbiBoZSBhdCBhdCBvbmNlIGZlbHQgdGhlIHN0cmVuZ3RoIHJldHVybiB0byBoaXMgYm9keSwgYW5kIHJvc2UgdXAsIGFuZCB3ZW50IGF3YXksIHdhbGtpbmcgd2l0aG91dCBhaWQuIEluIGFtYXplbWVudCwgdGhlbiwgdGhlIHNlbmF0b3JzIG1hZGUgYSBjYXJlZnVsIGludmVzdGlnYXRpb24gb2YgdGhlIG1hdHRlci4KCQkJPC9wPgogICAgICAgICA8cD5Ob3csIHdoYXQgaGFkIGhhcHBlbmVkIHdhcyB0aGlzLiBBIGNlcnRhaW4gbWFuIGhhZCBoYW5kZWQgb3ZlciBvbmUgb2YgaGlzIHNsYXZlcyB0byBvdGhlciBzbGF2ZXMsIHdpdGggb3JkZXJzIHRvIHNjb3VyZ2UgaGltIHRocm91Z2ggdGhlIGZvcnVtLCBhbmQgdGhlbiBwdXQgaGltIHRvIGRlYXRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSB0aGV5IHdlcmUgZXhlY3V0aW5nIHRoaXMgY29tbWlzc2lvbiBhbmQgdG9ybWVudGluZyB0aGUgcG9vciB3cmV0Y2gsIHdob3NlIHBhaW4gYW5kIHN1ZmZlcmluZyBtYWRlIGhpbSB3cml0aGUgYW5kIHR3aXN0IGhpbXNlbGYgaG9ycmlibHksIHRoZSBzYWNyZWQgcHJvY2Vzc2lvbiBpbiBob25vdXIgb2YgSnVwaXRlciBjaGFuY2VkIHRvIGNvbWUgdXAgYmVoaW5kLiBNYW55IG9mIHRob3NlIHdobyB0b29rIHBhcnQgaW4gaXQgd2VyZSwgaW5kZWVkLCBzY2FuZGFsaXplZCBhdCB0aGUgam95bGVzcyBzaWdodCBhbmQgdGhlIHVuc2VlbWx5IGNvbnRvcnRpb25zIG9mIHRoZSB2aWN0aW0sIGJ1dCBubyBvbmUgbWFkZSBhbnkgcHJvdGVzdDsgdGhleSBtZXJlbHkgaGVhcGVkIGFidXNlIGFuZCBjdXJzZXMgb24gdGhlIGhlYWQgb2YgdGhlIG1hc3RlciB3aG8gd2FzIGluZmxpY3Rpbmcgc3VjaCBhIGNydWVsIHB1bmlzaG1lbnQuIEZvciBpbiB0aG9zZSBkYXlzIHRoZSBSb21hbnMgdHJlYXRlZCB0aGVpciBzbGF2ZXMgd2l0aCBncmVhdCBraW5kbmVzcywgYmVjYXVzZSB0aGV5IHdvcmtlZCBhbmQgZXZlbiBhdGUgd2l0aCB0aGVtIHRoZW1zZWx2ZXMsIGFuZCB3ZXJlIHRoZXJlZm9yZSBtb3JlIGZhbWlsaWFyIGFuZCBnZW50bGUgd2l0aCB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgd2FzIGEgc2V2ZXJlIHB1bmlzaG1lbnQgZm9yIGEgc2xhdmUgd2hvIGhhZCBjb21taXR0ZWQgYSBmYXVsdCwgaWYgaGUgd2FzIG9ibGlnZWQgdG8gdGFrZSB0aGUgcGllY2Ugb2Ygd29vZCB3aXRoIHdoaWNoIHRoZXkgcHJvcCB1cCB0aGUgcG9sZSBvZiBhIHdhZ2dvbiwgYW5kIGNhcnJ5IGl0IGFyb3VuZCB0aHJvdWdoIHRoZSBuZWlnaGJvdXJob29kLiBGb3IgaGUgd2hvIGhhZCBiZWVuIHNlZW4gdW5kZXJnb2luZyB0aGlzIHB1bmlzaG1lbnQgbm8gbG9uZ2VyIGhhZCBhbnkgY3JlZGl0IGluIGhpcyBvd24gb3IgbmVpZ2hib3VyaW5nIGhvdXNlaG9sZHMuIEFuZCBoZSB3YXMgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZnVyY2lmZXI8L3E+OyBmb3Igd2hhdCB0aGUgR3JlZWtzIGNhbGwgYSA8ZW1waD5wcm9wPC9lbXBoPiwgb3IgPGVtcGg+c3VwcG9ydDwvZW1waD4sIGlzIGNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZ1cmNhPC9xPiBieSB0aGUgUm9tYW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgdGhlcmVmb3JlLCBMYXRpbnVzIGhhZCByZXBvcnRlZCBoaXMgdmlzaW9uIHRvIHRoZSBzZW5hdG9ycywgYW5kIHRoZXkgd2VyZSBhdCBhIGxvc3MgdG8ga25vdyB3aG8gdGhlIHVucGxlYXNhbnQgYW5kIGJhZCBkYW5jZXIgd2FzIHdobyBoYWQgaGVhZGVkIHRoZSBwcm9jZXNzaW9uIHJlZmVycmVkIHRvLCBzb21lIG9mIHRoZW0gd2VyZSBsZWQsIG93aW5nIHRvIHRoZSBleHRyYW9yZGluYXJ5IG5hdHVyZSBvZiBoaXMgcHVuaXNobWVudCwgdG8gdGhpbmsgb2YgdGhlIHNsYXZlIHdobyBoYWQgYmVlbiBzY291cmdlZCB0aHJvdWdoIHRoZSBmb3J1bSBhbmQgdGhlbiBwdXQgdG8gZGVhdGguIEFjY29yZGluZ2x5LCB3aXRoIHRoZSBjb25jdXJyZW5jZSBvZiB0aGUgcHJpZXN0cywgdGhlIG1hc3RlciBvZiB0aGUgc2xhdmUgd2FzIHB1bmlzaGVkLCBhbmQgdGhlIHByb2Nlc3Npb24gYW5kIHNwZWN0YWNsZXMgaW4gaG9ub3VyIG9mIHRoZSBnb2Qgd2VyZSBleGhpYml0ZWQgYW5ldy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gTGl2eSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjM2IiB2YWxpZD0ieWVzIj4oaWkuIDM2IGFuZCAzNyksPC9iaWJsPiBpdCB3YXMgYXQgdGhlIHJlcGV0aXRpb24gb2YgdGhlIGdyZWF0IGdhbWVzLCB3aGljaCB3YXMgbWFkZSBuZWNlc3NhcnkgYnkgdGhlIHByb2ZhbmF0aW9uIG1hZGUga25vd24gYnkgdGhlIGRyZWFtIG9mIExhdGludXMsIHRoYXQgdGhlIFZvbHNjaWFucyB3ZXJlIHNlbnQgb3V0IHRoZSBjaXR5LCBhcyBkZXNjcmliZWQgYnkgUGx1dGFyY2ggaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvci4gMjYuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHZpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGl0IHdvdWxkIHNlZW0gdGhhdCBOdW1hLCB3aG8gaW4gb3RoZXIgcmVzcGVjdHMgYWxzbyB3YXMgYSB2ZXJ5IHdpc2UgZGlyZWN0b3Igb2Ygc2FjcmVkIHJpdGVzLCBoYWQgdmVyeSBwcm9wZXJseSBzb3VnaHQgdG8gc2VjdXJlIHRoZSBwZW9wbGUncyByZXZlcmVudCBhdHRlbnRpb24gYnkgbWVhbnMgb2YgdGhlIGZvbGxvd2luZyBvcmRpbmFuY2UuIFdoZW4sIG5hbWVseSwgbWFnaXN0cmF0ZXMgb3IgcHJpZXN0cyBwZXJmb3JtIGFueSByZWxpZ2lvdXMgZnVuY3Rpb24sIGEgaGVyYWxkIGdvZXMgYmVmb3JlLCBjcnlpbmcgd2l0aCBhIGxvdWQgdm9pY2UsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SG9jIGFnZS48L3E+IFRoZSBtZWFuaW5nIG9mIHRoZSBjcnkgaXMsIDxlbXBoPk1pbmQgdGhpcyE8L2VtcGg+IGFuZCBpdCB3YXJucyB0aGUgcGVvcGxlIHRvIGdpdmUgaGVlZCB0byB0aGUgc2FjcmVkIHJpdGVzLCBhbmQgc3VmZmVyIG5vIHRhc2sgb3IgZGVtYW5kIG9mIGJ1c2luZXNzIHRvIGludGVydmVuZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMTQuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5OdW1hPC90aXRsZT4sIHhpdi4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW1wbHlpbmcgdGhhdCBtZW4gcGVyZm9ybSBtb3N0IG9mIHRoZWlyIGR1dGllcyB1bmRlciBzb21lIHNvcnQgb2YgY29tcHVsc2lvbiBhbmQgYnkgY29uc3RyYWludC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIGN1c3RvbWFyeSBmb3IgdGhlIFJvbWFucyB0byByZW5ldyBzYWNyaWZpY2VzIGFuZCBwcm9jZXNzaW9ucyBhbmQgc3BlY3RhY2xlcywgbm90IG9ubHkgZm9yIHN1Y2ggYSByZWFzb24gYXMgdGhlIGFib3ZlLCBidXQgYWxzbyBmb3IgdHJpdmlhbCByZWFzb25zLiBGb3IgaW5zdGFuY2UsIGlmIG9uZSBvZiB0aGUgaG9yc2VzIGRyYXdpbmcgdGhlIHNhY3JlZCBjaGFyaW90cyBjYWxsZWQgVGVuc2FlIGdpdmVzIG91dDsgb3IgYWdhaW4sIGlmIHRoZSBjaGFyaW90ZWVyIHRha2VzIGhvbGQgb2YgdGhlIHJlaW5zIHdpdGggaGlzIGxlZnQgaGFuZCwgdGhleSBkZWNyZWUgdGhhdCB0aGUgcHJvY2Vzc2lvbiBiZSByZW5ld2VkLiBBbmQgaW4gbGF0ZXIgYWdlcywgYSBzaW5nbGUgc2FjcmlmaWNlIGhhcyBiZWVuIHBlcmZvcm1lZCB0aGlydHkgdGltZXMsIGJlY2F1c2UgYWdhaW4gYW5kIGFnYWluIHNvbWUgZmFpbHVyZSBvciBvZmZlbmNlIHdhcyB0aG91Z2h0IHRvIG9jY3VyLiBTdWNoIGlzIHRoZSByZXZlcmVudCBjYXJlIG9mIHRoZSBSb21hbnMgaW4gcmVsaWdpb3VzIG1hdHRlcnMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTWFyY2l1cyBhbmQgVHVsbHVzIHdlcmUgc2VjcmV0bHkgY29uZmVycmluZyBhdCBBbnRpdW0gd2l0aCB0aGUgY2hpZWYgbWVuLCBhbmQgd2VyZSB1cmdpbmcgdGhlbSB0byBiZWdpbiB0aGUgd2FyIHdoaWxlIHRoZSBSb21hbnMgd2VyZSB0b3JuIGJ5IGludGVybmFsIGRpc3NlbnNpb25zLiBBbmQgd2hlbiBzaGFtZSByZXN0cmFpbmVkIHRoZW0gZnJvbSB0aGlzIGNvdXJzZSwgYmVjYXVzZSB0aGV5IGhhZCBhZ3JlZWQgdG8gYSB0cnVjZSBhbmQgY2Vzc2F0aW9uIG9mIGhvc3RpbGl0aWVzIGZvciB0d28geWVhcnMsIHRoZSBSb21hbnMgdGhlbXNlbHZlcyBmdXJuaXNoZWQgdGhlbSB3aXRoIGEgcHJldGV4dCwgYnkgbWFraW5nIHByb2NsYW1hdGlvbiBhdCB0aGUgc3BlY3RhY2xlcyBhbmQgZ2FtZXMsIGJlY2F1c2Ugb2Ygc29tZSBzdXNwaWNpb24gb3Igc2xhbmRlcm91cyByZXBvcnQsIHRoYXQgdGhlIHZpc2l0aW5nIFZvbHNjaWFucyBtdXN0IGxlYXZlIHRoZSBjaXR5IGJlZm9yZSBzdW5zZXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgc2F5PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSBmb2xsb3dpbmcgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvbXAuQWxjLkNvci4gMi4yIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8dGl0bGU+Q29tcGFyaXNvbjwvdGl0bGU+LCBpaS4gMi48L25vdGU+IHRoYXQgdGhpcyB3YXMgZHVlIHRvIGEgZGVjZWl0ZnVsIHN0cmF0YWdlbSBvZiBNYXJjaXVzLCB3aG8gc2VudCBhIG1hbiB0byB0aGUgY29uc3VscyBpbiBSb21lLCBiZWFyaW5nIHRoZSBmYWxzZSBjaGFyZ2UgdGhhdCB0aGUgVm9sc2NpYW5zIHB1cnBvc2VkIHRvIGZhbGwgdXBvbiB0aGUgUm9tYW5zIGF0IHRoZSBzcGVjdGFjbGVzLCBhbmQgc2V0IHRoZSBjaXR5IG9uIGZpcmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIExpdnkgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zNy4xIiB2YWxpZD0ieWVzIj4oaWkuIDM3LCAxLTcpPC9iaWJsPiwgaXQgd2FzIFR1bGx1cyBoaW1zZWxmIHdobyBjYW1lIHRvIHRoZSBjb25zdWxzLCBhcyBoYWQgYmVlbiBwbGFubmVkIHdpdGggTWFyY2l1cy4gUGx1dGFyY2ggYWdyZWVzIHJhdGhlciB3aXRoIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMyI+RGlvbnlzaXVzIEhhbC4gdmlpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhpcyBwcm9jbGFtYXRpb24gbWFkZSBhbGwgdGhlIFZvbHNjaWFucyBtb3JlIGVtYml0dGVyZWQgYWdhaW5zdCB0aGUgUm9tYW5zOyBhbmQgVHVsbHVzLCBtYWduaWZ5aW5nIHRoZSBpbmNpZGVudCwgYW5kIGdvYWRpbmcgdGhlbSBvbiwgYXQgbGFzdCBwZXJzdWFkZWQgdGhlbSB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIFJvbWU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5MaXZ5IHNwZWFrcyBvbmx5IG9mIGEgcmV2b2x0IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzgiIHZhbGlkPSJ5ZXMiPihpaS4gMzgsIDxlbXBoPmZpbi48L2VtcGg+KS4gPC9iaWJsPiBQbHV0YXJjaCBhZ3JlZXMgd2l0aCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjQiPkRpb255c2l1cyBIYWwuIHZpaWkuIDQtMTAuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBkZW1hbmQgYmFjayB0aGUgdGVycml0b3J5IGFuZCB0aGUgY2l0aWVzIHdoaWNoIGhhZCBiZWVuIHRha2VuIGZyb20gdGhlIFZvbHNjaWFucyBpbiB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgUm9tYW5zLCBhZnRlciBoZWFyaW5nIHRoZSBhbWJhc3NhZG9ycywgd2VyZSBmdWxsIG9mIGluZGlnbmF0aW9uLCBhbmQgcmVwbGllZCB0aGF0IHRoZSBWb2xzY2lhbnMgbWlnaHQgYmUgZmlyc3QgdG8gdGFrZSB1cCBhcm1zLCBidXQgdGhlIFJvbWFucyB3b3VsZCBiZSBsYXN0IHRvIGxheSB0aGVtIGRvd24uIFVwb24gcmVjZWl2aW5nIHRoaXMgYW5zd2VyLCBUdWxsdXMgY2FsbGVkIGEgZ2VuZXJhbCBhc3NlbWJseSBvZiBoaXMgcGVvcGxlLCBhbmQgYWZ0ZXIgdGhleSBoYWQgdm90ZWQgZm9yIHRoZSB3YXIsIGFkdmlzZWQgdGhlbSB0byBjYWxsIGluIE1hcmNpdXMsIGNoZXJpc2hpbmcgbm8gcmVzZW50bWVudCBhZ2FpbnN0IGhpbSwgYnV0IGZpcm1seSBjb252aW5jZWQgdGhhdCBoZSB3b3VsZCBiZSBtb3JlIGhlbHBmdWwgYXMgYW4gYWxseSB0aGFuIGhlIGhhZCBiZWVuIGluanVyaW91cyBhcyBhIGZvZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1hcmNpdXMgd2FzIHRoZXJlZm9yZSBjYWxsZWQgaW4sIGFuZCBoZWxkIGEgY29uZmVyZW5jZSB3aXRoIHRoZSBhc3NlbWJseTsgdGhleSBzYXcgZnJvbSBoaXMgc3BlZWNoIHRoYXQgaGUgd2FzIGFzIGVsb3F1ZW50IGFzIGhpcyBleHBsb2l0cyBpbiBhcm1zIGhhZCB0YXVnaHQgdGhlbSB0aGF0IGhlIHdhcyB3YXJsaWtlLCBhbmQgd2VyZSBjb252aW5jZWQgb2YgaGlzIHN1cnBhc3NpbmcgaW50ZWxsaWdlbmNlIGFuZCBkYXJpbmc7IHNvIHRoZXkgYXBwb2ludGVkIGhpbSBnZW5lcmFsIHdpdGggVHVsbHVzLCBhbmQgZ2F2ZSBoaW0gZnVsbCBwb3dlcnMgdG8gY29uZHVjdCB0aGUgd2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5GZWFyaW5nLCB0aGVuLCB0aGF0IHRoZSB0aW1lIG5lZWRlZCB0byBlcXVpcCBhbmQgbWFyc2hhbCB0aGUgVm9sc2NpYW5zIHdvdWxkIGJlIHNvIGxvbmcgYXMgdG8gcm9iIGhpbSBvZiBoaXMgYmVzdCBvcHBvcnR1bml0eSBmb3IgYWN0aW9uLCBoZSBsZWZ0IG9yZGVycyB3aXRoIHRoZSBtYWdpc3RyYXRlcyBhbmQgY2hpZWYgbWVuIG9mIHRoZSBjaXR5IHRvIGFzc2VtYmxlIGFuZCBwcm92aWRlIHRoZSByZW1haW5pbmcgZm9yY2VzIGFuZCBzdXBwbGllcyB0aGF0IHdlcmUgcmVxdWlzaXRlLCB3aGlsZSBoZSBoaW1zZWxmOyBhZnRlciBwZXJzdWFkaW5nIHRoZSBtb3N0IGFyZGVudCBzcGlyaXRzIHRvIG1hcmNoIGZvcnRoIGFzIHZvbHVudGVlcnMgd2l0aCBoaW0gYW5kIG5vdCBzdG9wIGZvciBmb3JtYWwgZW5yb2xtZW50LCBidXJzdCBpbnRvIHRoZSBSb21hbiB0ZXJyaXRvcnkgb2YgYSBzdWRkZW4sIHdoZW4gbm8gb25lIGV4cGVjdGVkIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Db25zZXF1ZW50bHkgaGUgc2VjdXJlZCBzdWNoIGFidW5kYW5jZSBvZiBib290eSB0aGF0IHRoZSBWb2xzY2lhbnMgaGFkIG1vcmUgdGhhbiB0aGV5IGNvdWxkIHBvc3NpYmx5IGRvIHRvIHVzZSBpdCBpbiB0aGVpciBjYW1wIG9yIGNhcnJ5IGl0IG9mZiBob21lLiBCdXQgdGhlIGFidW5kYW50IHN1cHBsaWVzIHNlY3VyZWQsIGFuZCB0aGUgZ3JlYXQgaW5qdXJ5IGFuZCBkYW1hZ2UgZG9uZSB0byB0aGUgZW5lbXkncyBjb3VudHJ5LCB3ZXJlLCBpbiBoaXMgZXllcywgdGhlIG1vc3QgaW5zaWduaWZpY2FudCByZXN1bHQgb2YgdGhhdCBleHBlZGl0aW9uOyBpdHMgY2hpZWYgcmVzdWx0LCBhbmQgaGlzIG1haW4gb2JqZWN0IGluIG1ha2luZyBpdCwgd2FzIHRvIGZ1cm5pc2ggdGhlIHBlb3BsZSBvZiBSb21lIHdpdGggZnJlc2ggY2hhcmdlcyBhZ2FpbnN0IHRoZSBwYXRyaWNpYW5zLiBGb3Igd2hpbGUgaGUgbWFsdHJlYXRlZCBhbmQgZGVzdHJveWVkIGV2ZXJ5dGhpbmcgZWxzZSwgaGUga2VwdCBhIHZpZ29yb3VzIHdhdGNoIG92ZXIgdGhlIGxhbmRzIG9mIHRoZSBwYXRyaWNpYW5zLCBhbmQgd291bGQgbm90IHN1ZmZlciBhbnlvbmUgdG8gaHVydCB0aGVtIG9yIHRha2UgYW55dGhpbmcgZnJvbSB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGxlZCB0byBzdGlsbCBmdXJ0aGVyIGFjY3VzYXRpb25zIGFuZCBicm9pbHMgYmV0d2VlbiB0aGUgcGFydGllcyBpbiB0aGUgY2l0eTsgdGhlIHBhdHJpY2lhbnMgYWNjdXNlZCB0aGUgcGVvcGxlIG9mIHVuanVzdGx5IGRyaXZpbmcgb3V0IGFuIGluZmx1ZW50aWFsIG1hbiwgYW5kIHRoZSBwZW9wbGUgY2hhcmdlZCB0aGUgcGF0cmljaWFucyB3aXRoIGJyaW5naW5nIE1hcmNpdXMgdXAgYWdhaW5zdCB0aGVtIGluIGEgc3Bpcml0IG9mIHJldmVuZ2UsIGFuZCB0aGVuIGVuam95aW5nIHRoZSBzcGVjdGFjbGUgb2Ygd2hhdCBvdGhlcnMgc3VmZmVyZWQgYnkgdGhlIHdhciwgd2hpbGUgdGhlIHdhciBpdHNlbGYgcHJvdGVjdGVkIHRoZWlyIG93biB3ZWFsdGggYW5kIHByb3BlcnR5IG91dHNpZGUgdGhlIGNpdHkuIEFmdGVyIE1hcmNpdXMgaGFkIGFjY29tcGxpc2hlZCBoaXMgcHVycG9zZXMsIGFuZCBncmVhdGx5IGhlbHBlZCB0aGUgVm9sc2NpYW5zIHRvd2FyZHMgY291cmFnZSBhbmQgc2Nvcm4gb2YgdGhlaXIgZW5lbWllcywgaGUgbGVkIGhpcyBmb3JjZXMgYmFjayBpbiBzYWZldHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlcmUgaXMgbm90aGluZyBvZiB0aGlzIHByZWxpbWluYXJ5IGZvcmF5IGluIExpdnkuIEl0IGlzIG9uIHRoZSBtYWluIGV4cGVkaXRpb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvci4gMjgiIHZhbGlkPSJ5ZXMiPihjaGFwLiB4eHZpaWkuKTwvYmlibD4gdGhhdCB0aGUgcGF0cmljaWFuIGxhbmRzIGFyZSBzcGFyZWQgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zOSIgdmFsaWQ9InllcyI+KGlpLiAzOSkuPC9iaWJsPiBBY2NvcmRpbmcgdG8gRGlvbnlzaXVzIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMTIiPih2aWlpLiAxMiksPC9iaWJsPiBUdWxsdXMgbGVkIG9uZSBkaXZpc2lvbiBpbnRvIHRoZSB0ZXJyaXRvcnkgb2YgdGhlIExhdGlucywgTWFyY2l1cyB0aGUgb3RoZXIgaW50byB0aGF0IG9mIFJvbWUsIGFuZCBib3RoIGJyb3VnaHQgYmFjayBlbm9ybW91cyBib290eS48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZW50aXJlIGZvcmNlIG9mIHRoZSBWb2xzY2lhbnMgd2FzIGFzc2VtYmxlZCB3aXRoIHNwZWVkIGFuZCBhbGFjcml0eSwgYW5kIHdhcyB0aGVuIHNlZW4gdG8gYmUgc28gbGFyZ2UgdGhhdCB0aGV5IGRldGVybWluZWQgdG8gbGVhdmUgYSBwYXJ0IG9mIGl0IGJlaGluZCBmb3IgdGhlIHNlY3VyaXR5IG9mIHRoZWlyIGNpdGllcywgYW5kIHdpdGggdGhlIG90aGVyIHBhcnQgdG8gbWFyY2ggYWdhaW5zdCB0aGUgUm9tYW5zLiBNb3Jlb3ZlciwgTWFyY2l1cyBsZWZ0IGl0IHRvIHRoZSBjaG9pY2Ugb2YgVHVsbHVzIHdoaWNoIG9mIHRoZSB0d28gZGl2aXNpb25zIGhlIHdvdWxkIGNvbW1hbmQuIFRoZW4gVHVsbHVzLCByZW1hcmtpbmcgdGhhdCBNYXJjaXVzIHdhcyBjbGVhcmx5IGluIG5vIHdpc2UgaW5mZXJpb3IgdG8gaGltc2VsZiBpbiB2YWxvdXIsIGFuZCBoYWQgZW5qb3llZCBhIGJldHRlciBmb3J0dW5lIGluIGFsbCBoaXMgYmF0dGxlcywgYmFkZSBoaW0gbGVhZCB0aGUgZGl2aXNpb24gdGhhdCB3YXMgdG8gdGFrZSB0aGUgZmllbGQsIGFuZCBoZSBoaW1zZWxmIHdvdWxkIHJlbWFpbiBiZWhpbmQgdG8gZ3VhcmQgdGhlIGNpdGllcyBhbmQgcHJvdmlkZSB3aGF0IHdhcyByZXF1aXNpdGUgZm9yIHRoZSBhcm15IGFicm9hZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC4xMyI+RGlvbnlzaXVzLCB2aWlpLiAxMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIGEgc3Ryb25nZXIgZm9yY2UgdGhhbiBiZWZvcmUsIHRoZW4sIE1hcmNpdXMgc2V0IG91dCBmaXJzdCBhZ2FpbnN0IENpcmNlaWksIGEgY2l0eSB3aGljaCB3YXMgYSBjb2xvbnkgb2YgUm9tZTsgdGhpcyBzdXJyZW5kZXJlZCB0byBoaW0gb2YgaXRzIG93biBhY2NvcmQsIGFuZCBoZSBkaWQgaXQgbm8gaGFybS4gTmV4dCwgaGUgbGFpZCB3YXN0ZSB0aGUgY291bnRyeSBvZiB0aGUgTGF0aW5zLCB3aGVyZSBoZSBleHBlY3RlZCB0aGF0IHRoZSBSb21hbnMgd291bGQgZW5nYWdlIGhpbSBpbiBkZWZlbmNlIG9mIHRoZSBMYXRpbnMsIHdobyB3ZXJlIHRoZWlyIGFsbGllcyBhbmQgYnkgZnJlcXVlbnQgbWVzc2VuZ2VycyB3ZXJlIGNhbGxpbmcgdXBvbiB0aGVtIGZvciBoZWxwLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGNvbW1vbnMgd2VyZSBpbmRpZmZlcmVudCB0byB0aGUgYXBwZWFsLCB0aGUgY29uc3VscyB3ZXJlIHVud2lsbGluZyB0byByaXNrIGEgY2FtcGFpZ24gZHVyaW5nIHRoZSBzaG9ydCB0aW1lIGxlZnQgb2YgdGhlaXIgdGVybSBvZiBvZmZpY2UsIGFuZCB0aGVyZWZvcmUgdGhlIExhdGluIGVudm95cyB3ZXJlIGRpc21pc3NlZC4gVW5kZXIgdGhlc2UgY2lyY3Vtc3RhbmNlcyBNYXJjaXVzIGxlZCBoaXMgZm9yY2VzIGFnYWluc3QgdGhlaXIgY2l0aWVzLCBhbmQgdGFraW5nIGJ5IGFzc2F1bHQgdGhvc2Ugd2hpY2ggb2ZmZXJlZCByZXNpc3RhbmNlIHRvIGhpbSwgbmFtZWx5LCBUb2xlcml1bSwgTGF2aWN1bSwgUGVkdW0sIGFuZCBsYXRlciBCb2xhLCBoZSBtYWRlIHNsYXZlcyBvZiB0aGUgaW5oYWJpdGFudHMgYW5kIHBsdW5kZXJlZCB0aGVpciBwcm9wZXJ0eS4gQnV0IGZvciB0aG9zZSB3aG8gY2FtZSBvdmVyIHRvIGhpbSBvZiB0aGVpciBvd24gYWNjb3JkIGhlIHNob3dlZCBtdWNoIGNvbmNlcm4sIGFuZCB0aGF0IHRoZXkgbWlnaHQgc3VmZmVyIG5vIGhhcm0sIGV2ZW4gYWdhaW5zdCBoaXMgd2lzaGVzLCBoZSBlbmNhbXBlZCBhcyBmYXIgYXMgaGUgY291bGQgZnJvbSB0aGVtLCBhbmQgaGVsZCBhbG9vZiBmcm9tIHRoZWlyIHRlcnJpdG9yeS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBoZSBoYWQgdGFrZW4gQm9sYSwgYSBjaXR5IG5vdCBtb3JlIHRoYW4gdHdlbHZlIG1pbGVzIGF3YXkgZnJvbSBSb21lLCB3aGVyZSBoZSBnb3QgbXVjaCB0cmVhc3VyZSBhbmQgcHV0IGFsbW9zdCBhbGwgdGhlIGFkdWx0cyB0byB0aGUgc3dvcmQ7IGFuZCBhZnRlciB0aGUgVm9sc2NpYW5zIGV2ZW4gd2hvIGhhZCBiZWVuIG9yZGVyZWQgdG8gcmVtYWluIGluIHRoZWlyIGNpdGllcyBncmV3IGltcGF0aWVudCwgYW5kIGNhbWUgdHJvb3BpbmcgaW4gYXJtcyB0byBNYXJjaXVzLCBkZWNsYXJpbmcgdGhhdCBoZSB3YXMgdGhlIHNvbGUgYW5kIG9ubHkgZ2VuZXJhbCB3aG9tIHRoZXkgd291bGQgcmVjb2duaXplIGFzIHRoZWlyIGxlYWRlciwgdGhlbiBoaXMgbmFtZSB3YXMgZ3JlYXQgdGhyb3VnaG91dCBhbGwgSXRhbHksIGFuZCBtZW4gdGhvdWdodCB3aXRoIGFtYXplbWVudCBob3cgdGhlIHZhbG91ciBvZiBhIHNpbmdsZSBtYW4sIHVwb24gaGlzIGNoYW5naW5nIHNpZGVzLCBoYWQgZWZmZWN0ZWQgc3VjaCBhIG1hcnZlbGxvdXMgdHVybiBpbiBhZmZhaXJzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgUm9tZSwgaG93ZXZlciwgYWxsIHdhcyBkaXNvcmRlcjsgaXRzIGNpdGl6ZW5zIHJlZnVzZWQgdG8gZmlnaHQsIGFuZCBzcGVudCB0aGVpciB3aG9sZSB0aW1lIGluIGNhYmFscyBhbmQgZmFjdGlvdXMgZGlzcHV0ZXMgd2l0aCBvbmUgYW5vdGhlciwgdW50aWwgdGlkaW5ncyBjYW1lIHRoYXQgdGhlIGVuZW15IGhhZCBsYWlkIGNsb3NlIHNpZWdlIHRvIExhdmluaXVtLCB3aGVyZSB0aGUgc2FjcmVkIHN5bWJvbHMgb2YgdGhlIGFuY2VzdHJhbCBnb2RzIG9mIHRoZSBSb21hbnMgd2VyZSBzdG9yZWQgdXAsIGFuZCBmcm9tIHdoaWNoIHRoZWlyIG5hdGlvbiB0b29rIGl0cyBvcmlnaW4sIHNpbmNlIHRoYXQgd2FzIHRoZSBmaXJzdCBjaXR5IHdoaWNoIEFlbmVhcyBmb3VuZGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHByb2R1Y2VkIGFuIGFzdG9uaXNoaW5nIGFuZCB1bml2ZXJzYWwgY2hhbmdlIG9mIG9waW5pb24gaW4gdGhlIGNvbW1vbnMsIGFzIHdlbGwgYXMgb25lIHdoaWNoIHdhcyBhbHRvZ2V0aGVyIHN0cmFuZ2UgYW5kIHVuZXhwZWN0ZWQgaW4gdGhlIHBhdHJpY2lhbnMuIEZvciB0aGUgY29tbW9ucyB3ZXJlIGVhZ2VyIHRvIHJlcGVhbCB0aGUgc2VudGVuY2UgYWdhaW5zdCBNYXJjaXVzIGFuZCBpbnZpdGUgaGltIGJhY2sgdG8gdGhlIGNpdHk7IHdoZXJlYXMgdGhlIHNlbmF0ZSwgb24gYXNzZW1ibGluZyBhbmQgY29uc2lkZXJpbmcgdGhlIHByb3Bvc2l0aW9uLCByZWplY3RlZCBhbmQgdmV0b2VkIGl0OyBlaXRoZXIgYmVjYXVzZSB0aGV5IHdlcmUgYW5ncmlseSBiZW50IG9uIG9wcG9zaW5nIGFsbCB0aGUgcGVvcGxlJ3MgZGVzaXJlczsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+b3IgZWxzZSBiZWNhdXNlIHRoZXkgd2VyZSB1bndpbGxpbmcgdGhhdCBNYXJjaXVzIHNob3VsZCBvd2UgaGlzIHJlc3RvcmF0aW9uIHRvIHRoZSBraW5kbmVzcyBvZiB0aGUgcGVvcGxlOyBvciBiZWNhdXNlIHRoZXkgd2VyZSBub3cgYW5ncnkgYXQgTWFyY2l1cyBoaW1zZWxmOyBzZWVpbmcgdGhhdCBoZSB3YXMgaW5qdXJpbmcgYWxsIGFsaWtlLCBhbHRob3VnaCBoZSBoYWQgbm90IGJlZW4gaWxsLXRyZWF0ZWQgYnkgYWxsLCBhbmQgc2hvd2VkIGhpbXNlbGYgYW4gZW5lbXkgb2YgaGlzIHdob2xlIGNvdW50cnksIGFsdGhvdWdoIGhlIGtuZXcgdGhhdCB0aGUgbW9zdCBpbmZsdWVudGlhbCBhbmQgcG93ZXJmdWwgbWVuIGluIGl0IHN5bXBhdGhpc2VkIHdpdGggaGltIGFuZCBzaGFyZWQgaW4gaGlzIHdyb25ncy4gV2hlbiB0aGlzIGRlY2lzaW9uIG9mIHRoZSBzZW5hdGUgd2FzIG1hZGUgcHVibGljLCB0aGUgcGVvcGxlIHdhcyBwb3dlcmxlc3M7IGl0IGNvdWxkIG5vdCBieSBpdHMgdm90ZSBlbmFjdCBhIGxhdywgd2l0aG91dCBhIHByZXZpb3VzIGRlY3JlZSBvZiB0aGUgc2VuYXRlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE1hcmNpdXMsIHdoZW4gaGUgaGVhcmQgb2YgaXQsIHdhcyB5ZXQgbW9yZSBleGFzcGVyYXRlZCwgYW5kIHJhaXNpbmcgdGhlIHNpZWdlIG9mIExhdmluaXVtLCBtYXJjaGVkIGFnYWluc3QgUm9tZSBpbiB3cmF0aCwgYW5kIGVuY2FtcGVkIGF0IHRoZSBzby1jYWxsZWQgRm9zc2FlIENsdWlsaWFlLCBvbmx5IGZpdmUgbWlsZXMgZGlzdGFudCBmcm9tIHRoZSBjaXR5LiBBbHRob3VnaCB0aGUgc2lnaHQgb2YgaGltIHByb2R1Y2VkIHRlcnJvciBhbmQgZ3JlYXQgY29uZnVzaW9uIHRoZXJlLCBzdGlsbCwgaXQgcHV0IGEgc3RvcCBmb3IgdGhlIHByZXNlbnQgdG8gdGhlaXIgZGlzc2Vuc2lvbnM7IGZvciBubyBvbmUgbG9uZ2VyLCB3aGV0aGVyIGNvbnN1bCBvciBzZW5hdG9yLCBkYXJlZCB0byBvcHBvc2UgdGhlIHBlb3BsZSBpbiB0aGUgbWF0dGVyIG9mIHJlc3RvcmluZyBNYXJjaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgY29udHJhcnksIHdoZW4gdGhleSBzYXcgdGhlIHdvbWVuIHJ1bm5pbmcgZnJhbnRpYyBpbiB0aGUgY2l0eSwgYW5kIHRoZSBhZ2VkIG1lbiByZXNvcnRpbmcgdG8gdGhlIHNhY3JlZCBzaHJpbmVzIHdpdGggc3VwcGxpYW50IHRlYXJzIGFuZCBwcmF5ZXJzLCBhbmQgZXZlcnl3aGVyZSBhbiB1dHRlciBsYWNrIG9mIGNvdXJhZ2UgYW5kIHNhdmluZyBjb3Vuc2VscywgdGhlbiBhbGwgYWdyZWVkIHRoYXQgdGhlIHBlb3BsZSBoYWQgZG9uZSB3ZWxsIHRvIHNlZWsgYSByZWNvbmNpbGlhdGlvbiB3aXRoIE1hcmNpdXMsIGJ1dCB0aGF0IHRoZSBzZW5hdGUgaGFkIG1hZGUgYSB0b3RhbCBtaXN0YWtlIGluIGJlZ2lubmluZyB0aGVuIHRvIGluZHVsZ2UgaXRzIHdyYXRoIGFuZCByZXZlbmdlZnVsIHNwaXJpdCwgd2hlbiBpdCBoYWQgYmVlbiB3ZWxsIHRvIGxheSBzdWNoIGZlZWxpbmdzIGFzaWRlLiBJdCB3YXMsIHRoZXJlZm9yZSwgdW5hbmltb3VzbHkgZGVjaWRlZCB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIE1hcmNpdXMsIG9mZmVyaW5nIGhpbSB0aGUgcHJpdmlsZWdlIG9mIHJldHVybmluZyB0byBoaXMgY291bnRyeSwgYW5kIGJlZ2dpbmcgaGltIHRvIHN0b3AgaGlzIHdhciB1cG9uIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgbWVzc2VuZ2VycyBmcm9tIHRoZSBzZW5hdGUgd2VyZSBraW5zbWVuIGFuZCBmcmllbmRzIG9mIE1hcmNpdXMsIGFuZCBleHBlY3RlZCB0byBiZSB0cmVhdGVkIHdpdGggZ3JlYXQgZnJpZW5kbGluZXNzIGluIHRoZWlyIGZpcnN0IGludGVydmlldyB3aXRoIGEgbWFuIHdobyB3YXMgYSByZWxhdGl2ZSBhbmQgYXNzb2NpYXRlIG9mIHRoZWlycy4gQnV0IG1hdHRlcnMgdHVybmVkIG91dCBxdWl0ZSBvdGhlcndpc2U7IGZvciBhZnRlciBiZWluZyBsZWQgdGhyb3VnaCB0aGUgY2FtcCBvZiB0aGUgZW5lbXksIHRoZXkgZm91bmQgaGltIHNlYXRlZCBpbiBncmVhdCBzdGF0ZSwgYW5kIGxvb2tpbmcgaW5zdWZmZXJhYmx5IHN0ZXJuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TdXJyb3VuZGVkIGJ5IHRoZSBjaGllZiBtZW4gb2YgdGhlIFZvbHNjaWFucywgaGUgYmFkZSB0aGUgUm9tYW5zIGRlY2xhcmUgdGhlaXIgd2lzaGVzLiBUaGV5IGRpZCBzbywgaW4gcmVhc29uYWJsZSBhbmQgY29uc2lkZXJhdGUgbGFuZ3VhZ2UsIGFuZCB3aXRoIGEgbWFubmVyIHN1aXRhYmxlIHRvIHRoZWlyIHBvc2l0aW9uLCBhbmQgd2hlbiB0aGV5IGhhZCBjZWFzZWQsIGhlIG1hZGUgYW4gYW5zd2VyIHdoaWNoLCBzbyBmYXIgYXMgaXQgY29uY2VybmVkIGhpbXNlbGY7IHdhcyBmdWxsIG9mIGJpdHRlcm5lc3MgYW5kIGFuZ2VyIGF0IHRoZWlyIHRyZWF0bWVudCBvZiBoaW0sIGFuZCBpbiBiZWhhbGYgb2YgdGhlIFZvbHNjaWFucywgYXMgdGhlaXIgZ2VuZXJhbCwgaGUgb3JkZXJlZCB0aGUgcmVzdGl0dXRpb24gb2YgdGhlIGNpdGllcyBhbmQgdGVycml0b3J5IHdoaWNoIGhhZCBiZWVuIHRvcm4gZnJvbSB0aGVtIGluIHdhciwgYW5kIHRoZSBwYXNzYWdlIG9mIGEgZGVjcmVlIGdyYW50aW5nIHRoZSBWb2xzY2lhbnMsIGFzIGFsbGllcywgZXF1YWwgY2l2aWMgcmlnaHRzLCBhcyBoYWQgYmVlbiBkb25lIGZvciB0aGUgTGF0aW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm8gcmVzcGl0ZSBmcm9tIHRoZSB3YXIgd291bGQgYmUgc2VjdXJlIGFuZCBsYXN0aW5nLCBoZSBzYWlkLCBleGNlcHQgaXQgYmUgYmFzZWQgb24ganVzdCBhbmQgZXF1YWwgcmlnaHRzLiBNb3Jlb3ZlciwgaGUgZ2F2ZSB0aGVtIHRoaXJ0eSBkYXlzIGZvciBkZWxpYmVyYXRpb24sIGFuZCB3aGVuIHRoZSBhbWJhc3NhZG9ycyB3ZXJlIGdvbmUsIGhlIGltbWVkaWF0ZWx5IHdpdGhkcmV3IGhpcyBmb3JjZXMgZnJvbSB0aGUgY291bnRyeS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVyZSBpcyBub3RoaW5nIG9mIHRoaXMgd2l0aGRyYXdhbCBvZiBmb3JjZXMgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zOSIgdmFsaWQ9InllcyI+TGl2eSAoaWkuIDM5KS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBmaXJzdCBncm91bmQgb2YgY29tcGxhaW50IGFnYWluc3QgaGltIHdoaWNoIHdhcyBsYWlkIGhvbGQgb2YgYnkgdGhvc2Ugb2YgdGhlIFZvbHNjaWFucyB3aG8gaGFkIGxvbmcgYmVlbiBqZWFsb3VzIG9mIGhpbSwgYW5kIHVuZWFzeSBhdCB0aGUgaW5mbHVlbmNlIHdoaWNoIGhlIGhhZCBhY3F1aXJlZC4gQW1vbmcgdGhlc2Ugd2FzIFR1bGx1cyBhbHNvLCBub3QgYmVjYXVzZSBoZSBoYWQgYmVlbiBwZXJzb25hbGx5IHdyb25nZWQgYXQgYWxsIGJ5IE1hcmNpdXMsIGJ1dCBiZWNhdXNlIGhlIHdhcyBvbmx5IHRvbyBodW1hbi4gRm9yIGhlIHdhcyB2ZXhlZCB0byBmaW5kIGhpcyByZXB1dGF0aW9uIHdob2xseSBvYnNjdXJlZCBhbmQgaGltc2VsZiBuZWdsZWN0ZWQgYnkgdGhlIFZvbHNjaWFucywgd2hvIHRob3VnaHQgdGhhdCBNYXJjaXVzIGFsb25lIHdhcyBldmVyeXRoaW5nIHRvIHRoZW0sIGFuZCB0aGF0IHRoZWlyIG90aGVyIGxlYWRlcnMgc2hvdWxkIGJlIGNvbnRlbnQgd2l0aCB3aGF0ZXZlciBzaGFyZSBvZiBpbmZsdWVuY2UgYW5kIGF1dGhvcml0eSBoZSBtaWdodCBiZXN0b3cgdXBvbiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgcmVhc29uIHdoeSB0aGUgZmlyc3Qgc2VlZHMgb2YgZGVudW5jaWF0aW9uIHdlcmUgc293biBpbiBzZWNyZXQsIGFuZCBub3csIGJhbmRpbmcgdG9nZXRoZXIsIHRoZSBtYWxjb250ZW50cyBzaGFyZWQgdGhlaXIgcmVzZW50bWVudCB3aXRoIG9uZSBhbm90aGVyLCBhbmQgY2FsbGVkIHRoZSB3aXRoZHJhd2FsIG9mIE1hcmNpdXMgYSBiZXRyYXlhbCwgbm90IHNvIG11Y2ggb2YgY2l0aWVzIGFuZCBhcm1pZXMsIGFzIG9mIGdvbGRlbiBvcHBvcnR1bml0aWVzLCB3aGljaCBwcm92ZSB0aGUgc2FsdmF0aW9uIG9yIHRoZSBsb3NzIG9mIHRoZXNlIGFzIHdlbGwgYXMgb2YgZXZlcnl0aGluZyBlbHNlOyBmb3IgaGUgaGFkIGdyYW50ZWQgYSByZXNwaXRlIG9mIHRoaXJ0eSBkYXlzIGZyb20gd2FyLCBhbHRob3VnaCBpbiB3YXIgdGhlIGdyZWF0ZXN0IGNoYW5nZXMgbWlnaHQgb2NjdXIgaW4gbXVjaCBsZXNzIHRpbWUgdGhhbiB0aGlzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBNYXJjaXVzIGRpZCBub3Qgc3BlbmQgdGhpcyB0aW1lIGluIGlkbGVuZXNzLCBidXQgZmVsbCB1cG9uIHRoZSBlbmVteSdzIGFsbGllcywgaGFyYXNzZWQgYW5kIHJhdmFnZWQgdGhlaXIgdGVycml0b3JpZXMsIGFuZCBjYXB0dXJlZCBzZXZlbiBvZiB0aGVpciBsYXJnZSBhbmQgcG9wdWxvdXMgY2l0aWVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjM2Ij5EaW9ueXNpdXMsIHZpaWkuIDM2LjwvYmlibD4gQ2hhcHRlcnMgeHh2aWlpLi14eHguIGluIFBsdXRhcmNoIGFncmVlIGNsb3NlbHkgd2l0aCBEaW9ueXNpdXMgdmlpaS4gMTQtMzUuPC9ub3RlPiBBbmQgdGhlIFJvbWFucyBkaWQgbm90IHZlbnR1cmUgdG8gY29tZSB0byB0aGVpciBhaWQsIGJ1dCB0aGVpciBzcGlyaXRzIHdlcmUgZnVsbCBvZiBoZXNpdGF0aW9uLCBhbmQgdGhlaXIgYXR0aXR1ZGUgdG93YXJkIHRoZSB3YXIgd2FzIHRoYXQgb2YgbWVuIHdobyBhcmUgY29tcGxldGVseSBiZW51bWJlZCBhbmQgcGFyYWx5emVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiB0aGUgdGltZSBoYWQgcGFzc2VkLCBhbmQgTWFyY2l1cyB3YXMgYXQgaGFuZCBhZ2FpbiB3aXRoIGhpcyBlbnRpcmUgZm9yY2UsIHRoZXkgc2VudCBvdXQgYW5vdGhlciBlbWJhc3N5IHRvIGVudHJlYXQgaGltIHRvIG1vZGVyYXRlIGhpcyB3cmF0aCwgd2l0aGRyYXcgdGhlIFZvbHNjaWFuIGFybXkgZnJvbSB0aGUgY291bnRyeSwgYW5kIHRoZW4gbWFrZSBzdWNoIHByb3Bvc2FscyBhbmQgc2V0dGxlbWVudHMgYXMgaGUgdGhvdWdodCBiZXN0IGZvciBib3RoIG5hdGlvbnM7IGZvciB0aGUgUm9tYW5zIHdvdWxkIG1ha2Ugbm8gY29uY2Vzc2lvbnMgdGhyb3VnaCBmZWFyLCBidXQgaWYgaGUgdGhvdWdodCB0aGF0IHRoZSBWb2xzY2lhbnMgb3VnaHQgdG8gb2J0YWluIGNlcnRhaW4gZmF2b3VycywgYWxsIHN1Y2ggd291bGQgYmUgZ3JhbnRlZCB0aGVtIGlmIHRoZXkgbGFpZCBkb3duIHRoZWlyIGFybXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hcmNpdXMgcmVwbGllZCB0aGF0LCBhcyBnZW5lcmFsIG9mIHRoZSBWb2xzY2lhbnMsIGhlIHdvdWxkIG1ha2Ugbm8gYW5zd2VyIHRvIHRoaXMsIGJ1dCBhcyBvbmUgd2hvIHdhcyBzdGlsbCBhIGNpdGl6ZW4gb2YgUm9tZSwgaGUgYWR2aXNlZCBhbmQgZXhob3J0ZWQgdGhlbSB0byBhZG9wdCBtb3JlIG1vZGVyYXRlIHZpZXdzIG9mIHdoYXQganVzdGljZSByZXF1aXJlZCwgYW5kIGNvbWUgdG8gaGltIGluIHRocmVlIGRheXMgd2l0aCBhIHJhdGlmaWNhdGlvbiBvZiBoaXMgcHJldmlvdXMgZGVtYW5kczsgYnV0IGlmIHRoZXkgc2hvdWxkIGRlY2lkZSBvdGhlcndpc2UsIHRoZXkgbXVzdCBrbm93IHdlbGwgdGhhdCBpdCB3YXMgbm90IHNhZmUgZm9yIHRoZW0gdG8gY29tZSB3YWxraW5nIGludG8gaGlzIGNhbXAgYWdhaW4gd2l0aCBlbXB0eSBwaHJhc2VzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgZW1iYXNzeSBoYWQgcmV0dXJuZWQgYW5kIHRoZSBzZW5hdGUgaGFkIGhlYXJkIGl0cyByZXBvcnQsIGl0IHdhcyBmZWx0IHRoYXQgdGhlIGNpdHkgd2FzIHRvc3Npbmcgb24gdGhlIGJpbGxvd3Mgb2YgYSBncmVhdCB0ZW1wZXN0LCBhbmQgdGhlcmVmb3JlIHRoZSBsYXN0IGFuZCBzYWNyZWQgYW5jaG9yIHdhcyBsZXQgZG93bi4gQSBkZWNyZWUgd2FzIHBhc3NlZCB0aGF0IGFsbCB0aGUgcHJpZXN0cyBvZiB0aGUgZ29kcywgYW5kIHRoZSBjZWxlYnJhbnRzIG9yIGN1c3RvZGlhbnMgb2YgdGhlIG15c3RlcmllcywgYW5kIHRob3NlIHdobyBwcmFjdGlzZWQgdGhlIGFuY2llbnQgYW5kIGFuY2VzdHJhbCBhcnQgb2YgZGl2aW5hdGlvbiBmcm9tIHRoZSBmbGlnaHQgb2YgYmlyZHMs4oCUdGhhdCBhbGwgdGhlc2Ugc2hvdWxkIGdvIHRvIE1hcmNpdXMsIGFycmF5ZWQgYXMgd2FzIHRoZSBjdXN0b20gb2YgZWFjaCBpbiB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlaXIgc2FjcmVkIHJpdGVzLCBhbmQgc2hvdWxkIHVyZ2UgaGltIGluIHRoZSBzYW1lIG1hbm5lciBhcyBiZWZvcmUgdG8gcHV0IGEgc3RvcCB0byB0aGUgd2FyLCBhbmQgdGhlbiB0byBjb25mZXIgd2l0aCBoaXMgZmVsbG93LWNpdGl6ZW5zIHJlZ2FyZGluZyB0aGUgVm9sc2NpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBkaWQsIGluZGVlZCwgYWRtaXQgdGhpcyBlbWJhc3N5IGludG8gaGlzIGNhbXAsIGJ1dCBtYWRlIG5vIG90aGVyIGNvbmNlc3Npb24sIG5vciBkaWQgaGUgYWN0IG9yIHNwZWFrIG1vcmUgbWlsZGx5LCBidXQgdG9sZCB0aGVtIHRvIG1ha2UgYSBzZXR0bGVtZW50IG9uIGhpcyBmb3JtZXIgdGVybXMsIG9yIGVsc2UgYWNjZXB0IHRoZSB3YXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzkuMTIiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzOSwgMTI7PC9iaWJsPiAKICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC4zOCI+RGlvbnlzaXVzLCB2aWlpLiAzOC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQWNjb3JkaW5nbHksIHdoZW4gdGhlIHByaWVzdHMgaGFkIHJldHVybmVkLCBpdCB3YXMgZGVjaWRlZCB0byByZW1haW4gcXVpZXRseSBpbiB0aGUgY2l0eSwgZ3VhcmRpbmcgaXRzIHdhbGxzLCBhbmQgcmVwdWxzaW5nIHRoZSBlbmVteSwgc2hvdWxkIGhlIG1ha2UgYW4gYXR0YWNrLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHB1dCB0aGVpciBob3BlcyBpbiB0aW1lIGVzcGVjaWFsbHksIGFuZCBpbiB0aGUgdmljaXNzaXR1ZGVzIG9mIGZvcnR1bmUsIHNpbmNlIHRoZXkga25ldyBub3QgaG93IHRvIHNhdmUgdGhlbXNlbHZlcyBieSB0aGVpciBvd24gZWZmb3J0cywgYnV0IHR1cm1vaWwsIHRlcnJvciwgYW5kIHJ1bW91cnMgb2YgZXZpbCBwb3NzZXNzZWQgdGhlIGNpdHkuIEF0IGxhc3Qgc29tZXRoaW5nIGhhcHBlbmVkIHRoYXQgd2FzIGxpa2Ugd2hhdCBIb21lciBvZnRlbiBtZW50aW9ucywgYWx0aG91Z2ggcGVvcGxlIGdlbmVyYWxseSBkbyBub3Qgd2hvbGx5IGJlbGlldmUgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHNvbWUgZ3JlYXQgYW5kIHVudXN1YWwgZGVlZCBpcyB0byBiZSBkb25lLCB0aGF0IHBvZXQgZGVjbGFyZXMgaW4gaGlzIHN0YXRlbHkgbWFubmVyOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5IZSB0aGVuIHdhcyBpbnNwaXJlZCBieSB0aGUgZ29kZGVzcywgZmxhc2hpbmctZXllZCBBdGhlbmU7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxOC4xNTgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+T2R5c3NleTwvdGl0bGU+LCB4dmlpaS4gMTU4PC9iaWJsPiA9IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAyMS4xIiB2YWxpZD0ieWVzIj54eGkuIGkuPC9iaWJsPiAoPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPs+E4b+HIM604oCZIOG8hM+BzrE8L2ZvcmVpZ24+KS48L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4gCgkJCQlhbmQgYWdhaW464oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkJ1dCBzb21lIGltbW9ydGFsIHR1cm5lZCBoaXMgbWluZCBieSBsb2RnaW5nIGluIGhpcyBoZWFydCA8L2w+CgkJCQkJICAgICAgICAgIDxsPkEgZmVhciBvZiB3aGF0IHRoZSBmb2xrIHdvdWxkIHNheTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Ob3QgdG8gYmUgZm91bmQgbm93IGluIEhvbWVyLjwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPiAKCQkJCWFuZCBhZ2FpbjrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+RWl0aGVyIHRocm91Z2ggc29tZSBzdXNwaWNpb24sIG9yIGVsc2UgYSBnb2Qgc28gYmFkZSBoaW0gZG87PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA5LjMzOSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT5PZHlzc2V5PC90aXRsZT4sIGl4LiAzMzkuPC9iaWJsPgogICAgICAgICAgICAgICAgICA8L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCWJ1dCBwZW9wbGUgZGVzcGlzZSBIb21lciBhbmQgc2F5IHRoYXQgd2l0aCBoaXMgaW1wb3NzaWJsZSBleHBsb2l0cyBhbmQgaW5jcmVkaWJsZSB0YWxlcyBoZSBtYWtlcyBpdCBpbXBvc3NpYmxlIHRvIGJlbGlldmUgaW4gZXZlcnkgbWFuJ3MgcG93ZXIgdG8gZGV0ZXJtaW5lIGhpcyBvd24gY2hvaWNlIG9mIGFjdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcywgaG93ZXZlciwgaXMgbm90IHdoYXQgSG9tZXIgZG9lcywgYnV0IHRob3NlIGFjdHMgd2hpY2ggYXJlIG5hdHVyYWwsIGN1c3RvbWFyeSwgYW5kIHRoZSByZXN1bHQgb2YgcmVhc29uaW5nLCBoZSBhdHRyaWJ1dGVzIHRvIG91ciBvd24gdm9saXRpb24sIGFuZCBoZSBjZXJ0YWlubHkgc2F5cyBmcmVxdWVudGx5OuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5CdXQgSSBmb3JtZWQgYSBwbGFuIHdpdGhpbiBteSBsb3JkbHkgaGVhcnQ7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA5LjI5OSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT5PZHlzc2V5PC90aXRsZT4sIGl4LiAyOTkuPC9iaWJsPgogICAgICAgICAgICAgICAgICA8L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCWFuZCBhbHNvOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5TbyBoZSBzcGFrZSwgYW5kIFBlbGV1cycgc29uIHdhcyBzb3JlIGRpc3RyZXNzZWQsIGFuZCBoaXMgaGVhcnQgPC9sPgoJCQkJCSAgICAgICAgICA8bD5XaXRoaW4gaGlzIHNoYWdneSBicmVhc3QgYmV0d2VlbiB0d28gY291cnNlcyB3YXMgZGl2aWRlZDs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDEuMTg4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPklsaWFkPC90aXRsZT4sIGkuIDE4OCBmLjwvYmlibD4KICAgICAgICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICAgICAgICA8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlhbmQgYWdhaW464oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkJ1dCBoaW0gbm8gd2hpdCA8L2w+CgkJCQkJICAgICAgICAgIDxsPkNvdWxkIHNoZSBwZXJzdWFkZSBmcm9tIGhpcyBpbnRlZ3JpdHksIHRoZSBmaWVyeSBoZWFydGVkIEJlbGxlcm9waG9uOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gNi4xNjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgdmkuIDE2MSBmLjwvYmlibD4KICAgICAgICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICAgICAgICA8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCXdoaWxlIGluIGV4cGxvaXRzIG9mIGEgc3RyYW5nZSBhbmQgZXh0cmFvcmRpbmFyeSBuYXR1cmUsIHJlcXVpcmluZyBzb21lIHJ1c2ggb2YgaW5zcGlyYXRpb24sIGFuZCBkZXNwZXJhdGUgY291cmFnZSwgaGUgZG9lcyBub3QgcmVwcmVzZW50IHRoZSBnb2QgYXMgdGFraW5nIGEgd2F5LCBidXQgYXMgcHJvbXB0aW5nLCBhIG1hbidzIGNob2ljZSBvZiBhY3Rpb247IG5vciB5ZXQgYXMgY3JlYXRpbmcgaW1wdWxzZXMgaW4gYSBtYW4sIGJ1dCByYXRoZXIgY29uY2VwdGlvbnMgd2hpY2ggbGVhZCB0byBpbXB1bHNlcywgYW5kIGJ5IHRoZXNlIGhpcyBhY3Rpb24gaXMgbm90IG1hZGUgaW52b2x1bnRhcnksIGJ1dCBoaXMgd2lsbCBpcyBzZXQgaW4gbW90aW9uLCB3aGlsZSBjb3VyYWdlIGFuZCBob3BlIGFyZSBhZGRlZCB0byBzdXN0YWluIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGVpdGhlciB0aGUgaW5mbHVlbmNlIG9mIHRoZSBnb2RzIG11c3QgYmUgd2hvbGx5IGV4Y2x1ZGVkIGZyb20gYWxsIGluaXRpYXRpbmcgcG93ZXIgb3ZlciBvdXIgYWN0aW9ucywgb3IgaW4gd2hhdCBvdGhlciB3YXkgY2FuIHRoZXkgYXNzaXN0IGFuZCBjby1vcGVyYXRlIHdpdGggbWVuPyBUaGV5IGNlcnRhaW5seSBkbyBub3QgbW91bGQgb3VyIGJvZGllcyBieSB0aGVpciBkaXJlY3QgYWdlbmN5LCBub3IgZ2l2ZSB0aGUgcmVxdWlzaXRlIGNoYW5nZSB0byB0aGUgYWN0aW9uIG9mIG91ciBoYW5kcyBhbmQgZmVldCwgYnV0IHJhdGhlciwgYnkgY2VydGFpbiBtb3RpdmVzLCBjb25jZXB0aW9ucywgYW5kIHB1cnBvc2VzLCB0aGV5IHJvdXNlIHRoZSBhY3RpdmUgYW5kIGVsZWN0aXZlIHBvd2VycyBvZiBvdXIgc3Bpcml0cywgb3IsIG9uIHRoZSBvdGhlciBoYW5kLCBkaXZlcnQgYW5kIGNoZWNrIHRoZW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaW4gUm9tZSwgYXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhaywgdmFyaW91cyBncm91cHMgb2Ygd29tZW4gdmlzaXRlZCB0aGUgdmFyaW91cyB0ZW1wbGVzLCBidXQgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGVtLCBhbmQgdGhvc2Ugb2YgaGlnaGVzdCBzdGF0aW9uLCBjYXJyaWVkIHRoZWlyIHN1cHBsaWNhdGlvbnMgdG8gdGhlIGFsdGFyIG9mIEp1cGl0ZXIgQ2FwaXRvbGludXMuIEFtb25nIHRoZXNlIHdhcyBWYWxlcmlhLCBhIHNpc3RlciBvZiB0aGF0IFB1YmxpY29sYSB3aG8gaGFkIGRvbmUgdGhlIFJvbWFucyBzbyBtYW55IGVtaW5lbnQgc2VydmljZXMgYm90aCBhcyB3YXJyaW9yIGFuZCBzdGF0ZXNtYW4uIFB1YmxpY29sYSwgaW5kZWVkLCBoYWQgZGllZCBzb21lIHRpbWUgYmVmb3JlLCBhcyBJIGhhdmUgcmVsYXRlZCBpbiBoaXMgTGlmZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMjMiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeHhpaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ1dCAgVmFsZXJpYSB3YXMgc3RpbGwgZW5qb3lpbmcgaGVyIHJlcHV0ZSBhbmQgaG9ub3VyIGluIHRoZSBjaXR5LCB3aGVyZSBoZXIgbGlmZSB3YXMgdGhvdWdodCB0byBhZG9ybiBoZXIgbGluZWFnZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3b21hbiwgdGhlbiwgc3VkZGVubHkgc2VpemVkIHdpdGggb25lIG9mIHRob3NlIGZlZWxpbmdzIHdoaWNoIEkgaGF2ZSBiZWVuIGRlc2NyaWJpbmcsIGFuZCBsYXlpbmcgaG9sZCBvZiB0aGUgcmlnaHQgZXhwZWRpZW50IHdpdGggYSBwdXJwb3NlIG5vdCB1bmluc3BpcmVkIG9mIGhlYXZlbiwgcm9zZSB1cCBoZXJzZWxmOyBiYWRlIHRoZSBvdGhlciB3b21lbiBhbGwgcmlzZSwgYW5kIGNhbWUgd2l0aCB0aGVtIHRvIHRoZSBob3VzZSBvZiBWb2x1bW5pYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlbiB0aGUgbWF0cm9ucyBjYW1lIGluIGEgYm9keSB0byBWZXR1cmlhLCB0aGUgbW90aGVyIG9mIENvcmlvbGFudXMsIGFuZCBWb2x1bW5pYSwgaGlzIHdpZmUuIFdoZXRoZXIgdGhpcyB3YXMgdGhlIHJlc3VsdCBvZiBwdWJsaWMgY291bnNlbCwgb3Igb2YgdGhlIHdvbWVuJ3MgZmVhciwgSSBjYW5ub3QgYXNjZXJ0YWluLjwvcT7igJQ8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA0MCwgMS48L2JpYmw+IEluIERpb255c2l1cyBhbHNvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMzkuNDAiPih2aWkuIDM5LCA0MCk8L2JpYmw+LCB3aG9tIFBsdXRhcmNoIHNlZW1zIG90aGVyd2lzZSB0byBiZSBmb2xsb3dpbmcsIFZlcnR1cmlhIGlzIHRoZSBtb3RoZXIsIGFuZCBWb2x1bW5pYSB0aGUgd2lmZSwgb2YgTWFyY2l1cy48L25vdGU+IHRoZSBtb3RoZXIgb2YgTWFyY2l1cy4gQWZ0ZXIgZW50ZXJpbmcgYW5kIGZpbmRpbmcgaGVyIHNlYXRlZCB3aXRoIGhlciBkYXVnaHRlci1pbi1sYXcsIGFuZCBob2xkaW5nIHRoZSBjaGlsZHJlbiBvZiBNYXJjaXVzIG9uIGhlciBsYXAsIFZhbGVyaWEgY2FsbGVkIGFib3V0IGhlciB0aGUgd29tZW4gd2hvIGhhZCBmb2xsb3dlZCwgYW5kIHNhaWQ6IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSB3aG9tIHRob3Ugc2Vlc3QgaGVyZSwgVm9sdW1uaWEsIGFuZCB0aG91LCBWZXJnaWxpYSwgYXJlIGNvbWUgYXMgd29tZW4gdG8gd29tZW4sIG9iZXlpbmcgbmVpdGhlciBzZW5hdG9yaWFsIGVkaWN0IG5vciBjb25zdWxhciBjb21tYW5kOyBidXQgb3VyIGdvZCwgYXMgaXQgd291bGQgc2VlbSwgdGFraW5nIHBpdHkgb24gb3VyIHN1cHBsaWNhdGlvbiwgcHV0IGludG8gb3VyIGhlYXJ0cyBhbiBpbXB1bHNlIHRvIGNvbWUgaGl0aGVyIHRvIHlvdSBhbmQgYmVzZWVjaCB5b3UgdG8gZG8gdGhhdCB3aGljaCB3aWxsIG5vdCBvbmx5IGJlIHRoZSBzYWx2YXRpb24gb2YgdXMgb3Vyc2VsdmVzIGFuZCBvZiB0aGUgY2l0aXplbnMgYmVzaWRlcywgYnV0IGFsc28gbGlmdCB5b3Ugd2hvIGNvbnNlbnQgdG8gZG8gaXQgdG8gYSBtb3JlIGNvbnNwaWN1b3VzIGZhbWUgdGhhbiB0aGF0IHdoaWNoIHRoZSBkYXVnaHRlcnMgb2YgdGhlIFNhYmluZXMgd29uLCB3aGVuIHRoZXkgYnJvdWdodCB0aGVpciBmYXRoZXJzIGFuZCBodXNiYW5kcyBvdXQgb2Ygd2FyIGludG8gZnJpZW5kc2hpcCBhbmQgcGVhY2UuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcmlzZSwgY29tZSB3aXRoIHVzIHRvIE1hcmNpdXMsIGFuZCBqb2luIHdpdGggdXMgaW4gc3VwcGxpY2F0aW5nIGhpbSwgYmVhcmluZyB0aGlzIGp1c3QgYW5kIHRydWUgdGVzdGltb255IGluIGJlaGFsZiBvZiB5b3VyIGNvdW50cnksIHRoYXQsIGFsdGhvdWdoIHNoZSBoYXMgc3VmZmVyZWQgbXVjaCB3cm9uZyBhdCBoaXMgaGFuZHMsIHNoZSBoYXMgbmVpdGhlciBkb25lIG5vciB0aG91Z2h0IG9mIGRvaW5nIGhhcm0gdG8geW91LCBpbiBoZXIgYXVnZXIsIGJ1dCByZXN0b3JlcyB5b3UgdG8gaGltLCBldmVuIHRob3VnaCBzaGUgaXMgZGVzdGluZWQgdG8gb2J0YWluIG5vIGVxdWl0YWJsZSB0cmVhdG1lbnQgYXQgaGlzIGhhbmRzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdvcmRzIG9mIFZhbGVyaWEgd2VyZSBzZWNvbmRlZCBieSB0aGUgY3JpZXMgb2YgdGhlIG90aGVyIHdvbWVuIHdpdGggaGVyLCBhbmQgVm9sdW1uaWEgZ2F2ZSB0aGVtIHRoaXMgYW5zd2VyOuKAlAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyB3b21lbiwgbm90IG9ubHkgaGF2ZSB3ZSBhbiBlcXVhbCBzaGFyZSB3aXRoIHlvdSBpbiB0aGUgY29tbW9uIGNhbGFtaXRpZXMsIGJ1dCB3ZSBoYXZlIGFuIGFkZGl0aW9uYWwgbWlzZXJ5IG9mIG91ciBvd24sIGluIHRoYXQgd2UgaGF2ZSBsb3N0IHRoZSBmYW1lIGFuZCB2aXJ0dWUgb2YgTWFyY2l1cywgYW5kIHNlZSBoaXMgcGVyc29uIHByb3RlY3RlZCBpbiBjb21tYW5kLCByYXRoZXIgdGhhbiBwcmVzZXJ2ZWQgZnJvbSBkZWF0aCwgYnkgdGhlIGFybXMgb2Ygb3VyIGVuZW1pZXMuIEFuZCB5ZXQgaXQgaXMgdGhlIGdyZWF0ZXN0IG9mIG91ciBtaXNmb3J0dW5lcyB0aGF0IG91ciBuYXRpdmUgY2l0eSBpcyBiZWNvbWUgc28gdXR0ZXJseSB3ZWFrIGFzIHRvIHBsYWNlIGhlciBob3BlcyBpbiB1cy4gCgkJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBJIGtub3cgbm90IHdoZXRoZXIgdGhlIG1hbiB3aWxsIGhhdmUgYW55IHJlZ2FyZCBmb3IgdXMsIHNpbmNlIGhlIGhhcyBub25lIGZvciBoaXMgY291bnRyeSwgd2hpY2ggaGUgb25jZSBzZXQgYmVmb3JlIG1vdGhlciBhbmQgd2lmZSBhbmQgY2hpbGRyZW4uIEhvd2V2ZXIsIHRha2UgdXMgYW5kIHVzZSB1cyBhbmQgYnJpbmcgdXMgdG8gaGltOyBpZiB3ZSBjYW4gZG8gbm90aGluZyBlbHNlLCB3ZSBjYW4gYXQgbGVhc3QgYnJlYXRoZSBvdXQgb3VyIGxpdmVzIGluIHN1cHBsaWNhdGlvbnMgZm9yIG91ciBjb3VudHJ5LjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHNoZSB0b29rIHRoZSBjaGlsZHJlbiBhbmQgVmVyZ2lsaWEgYW5kIHdlbnQgd2l0aCB0aGUgb3RoZXIgd29tZW4gdG8gdGhlIGNhbXAgb2YgdGhlIFZvbHNjaWFucy4gVGhlIHNpZ2h0IG9mIHRoZW0sIGFuZCB0aGUgcGl0aWZ1bG5lc3Mgb2YgaXQsIHByb2R1Y2VkIGV2ZW4gaW4gdGhlaXIgZW5lbWllcyByZXZlcmVuY2UgYW5kIHNpbGVuY2UuIE5vdyBpdCBjaGFuY2VkIHRoYXQgTWFyY2l1cyB3YXMgc2VhdGVkIG9uIGEgdHJpYnVuYWwgd2l0aCBoaXMgY2hpZWYgb2ZmaWNlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGFjY29yZGluZ2x5LCBoZSBzYXcgdGhlIHdvbWVuIGFwcHJvYWNoaW5nLCBoZSB3YXMgYW1hemVkOyBhbmQgd2hlbiBoZSByZWNvZ25pemVkIGhpcyBtb3RoZXIsIHdobyB3YWxrZWQgYXQgdGhlaXIgaGVhZCwgaGUgd291bGQgZmFpbiBoYXZlIHBlcnNpc3RlZCBpbiBoaXMgcHJldmlvdXMgaW5mbGV4aWJsZSBhbmQgaW1wbGFjYWJsZSBjb3Vyc2UsIGJ1dCwgbWFzdGVyZWQgYnkgaGlzIGZlZWxpbmdzLCBhbmQgY29uZm91bmRlZCBhdCB3aGF0IGhlIHNhdywgaGUgY291bGQgbm90IGVuZHVyZSB0byByZW1haW4gc2VhdGVkIHdoaWxlIHRoZXkgYXBwcm9hY2hlZCBoaW0sIGJ1dCBkZXNjZW5kZWQgcXVpY2tseSBmcm9tIHRoZSB0cmlidW5hbCBhbmQgcmFuIHRvIG1lZXQgdGhlbS4gSGUgc2FsdXRlZCBoaXMgbW90aGVyIGZpcnN0LCBhbmQgaGVsZCBoZXIgYSBsb25nIHRpbWUgaW4gaGlzIGVtYnJhY2UsIGFuZCB0aGVuIGhpcyB3aWZlIGFuZCBjaGlsZHJlbiwgc3BhcmluZyBub3cgbmVpdGhlciB0ZWFycyBub3IgY2FyZXNzZXMsIGJ1dCBzdWZmZXJpbmcgaGltc2VsZiBhcyBpdCB3ZXJlIHRvIGJlIGJvcm5lIGF3YXkgYnkgYSB0b3JyZW50IG9mIGVtb3Rpb24uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBoZSB3YXMgc2F0ZWQgd2l0aCB0aGlzLCBhbmQgcGVyY2VpdmVkIHRoYXQgaGlzIG1vdGhlciBub3cgd2lzaGVkIHRvIHNheSBzb21ldGhpbmcsIGhlIGJyb3VnaHQgdG8gaGlzIHNpZGUgdGhlIGNvdW5jaWxsb3JzIG9mIHRoZSBWb2xzY2lhbnMsIGFuZCBoZWFyZCBWb2x1bW5pYSBzcGVhayBhcyBmb2xsb3dzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3Ugc2Vlc3QsIG15IHNvbiwgZXZlbiBpZiB3ZSBkbyBub3Qgc3BlYWsgb3Vyc2VsdmVzLCBhbmQgY2Fuc3QganVkZ2UgZnJvbSB0aGUgd3JldGNoZWRuZXNzIG9mIG91ciBnYXJiIGFuZCBhc3BlY3QsIHRvIHdoYXQgYSBwaXRpZnVsIHN0YXRlIHRoeSBiYW5pc2htZW50IGhhcyByZWR1Y2VkIHVzLiAKCQkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBiZSBzdXJlIHRoYXQgd2Ugd2hvIGNvbWUgdG8gdGhlZSBhcmUgb2YgYWxsIHdvbWVuIG1vc3QgdW5oYXBweSwgc2luY2UgZm9ydHVuZSBoYXMgbWFkZSB0aGUgc2lnaHQgd2hpY2ggc2hvdWxkIGhhdmUgYmVlbiBtb3N0IHN3ZWV0LCBtb3N0IGRyZWFkZnVsIGZvciB1cywgYXMgSSBiZWhvbGQgbXkgc29uLCBhbmQgdGhpcyB3aWZlIG9mIHRoaW5lIGhlciBodXNiYW5kLCBlbmNhbXBlZCBhZ2FpbnN0IHRoZSB3YWxscyBvZiBvdXIgbmF0aXZlIGNpdHkuIEFuZCB0aGF0IHdoaWNoIGZvciB0aGUgcmVzdCBpcyBhbiBhc3N1YWdlbWVudCBvZiBhbGwgbWlzZm9ydHVuZSBhbmQgbWlzZXJ5LCBuYW1lbHkgcHJheWVyIHRvIHRoZSBnb2RzLCBoYXMgYmVjb21lIGZvciB1cyBtb3N0IGltcHJhY3RpY2FibGU7IGZvciB3ZSBjYW5ub3QgYXNrIGZyb20gdGhlIGdvZHMgYm90aCB2aWN0b3J5IGZvciBvdXIgY291bnRyeSBhbmQgYXQgdGhlIHNhbWUgdGltZSBzYWZldHkgZm9yIHRoZWUsIGJ1dCB0aGF0IHdoaWNoIGFueSBvbmUgb2Ygb3VyIGZvZXMgbWlnaHQgaW1wcmVjYXRlIHVwb24gdXMgYXMgYSBjdXJzZSwgdGhpcyBtdXN0IGJlIHRoZSBidXJkZW4gb2Ygb3VyIHByYXllcnMuIAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGh5IHdpZmUgYW5kIGNoaWxkcmVuIG11c3QgbmVlZHMgYmUgZGVwcml2ZWQgZWl0aGVyIG9mIHRoZWlyIGNvdW50cnkgb3Igb2YgdGhlZS4gQXMgZm9yIG1lLCBJIHdpbGwgbm90IHdhaXQgdG8gaGF2ZSB0aGUgd2FyIGRlY2lkZSB0aGlzIGlzc3VlIGZvciBtZSB3aGlsZSBJIGxpdmUsIGJ1dCB1bmxlc3MgSSBjYW4gcGVyc3VhZGUgdGhlZSB0byBzdWJzdGl0dXRlIGZyaWVuZHNoaXAgYW5kIGNvbmNvcmQgZm9yIGRpc3NlbnNpb24gYW5kIGhvc3RpbGl0eSwgYW5kIHNvIHRvIGJlY29tZSBhIGJlbmVmYWN0b3Igb2YgYm90aCBwYXJ0aWVzIHJhdGhlciB0aGFuIGEgZGVzdHJveWVyIG9mIG9uZSBvZiB0aGVtLCB0aGVuIGNvbnNpZGVyIGFuZCBiZSB3ZWxsIGFzc3VyZWQgdGhhdCB0aG91IGNhbnN0IG5vdCBhc3NhaWwgdGh5IGNvdW50cnkgd2l0aG91dCBmaXJzdCB0cmVhZGluZyB1bmRlcmZvb3QgdGhlIGNvcnBzZSBvZiBoZXIgd2hvIGJvcmUgdGhlZS4gRm9yIGl0IGRvZXMgbm90IGJlaG9vdmUgbWUgdG8gYXdhaXQgdGhhdCBkYXkgb24gd2hpY2ggSSBzaGFsbCBiZWhvbGQgbXkgc29uIGVpdGhlciBsZWQgaW4gdHJpdW1waCBieSBoaXMgZmVsbG93LWNpdGl6ZW5zIG9yIHRyaXVtcGhpbmcgb3ZlciBoaXMgY291bnRyeS4gCgkJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPklmLCB0aGVuLCBJIGFza2VkIHlvdSB0byBzYXZlIHlvdXIgY291bnRyeSBieSBydWluaW5nIHRoZSBWb2xzY2lhbnMsIHRoZSBxdWVzdGlvbiBiZWZvcmUgdGhlZSB3b3VsZCBiZSBhIGdyaWV2b3VzIG9uZSwgbXkgc29uLCBhbmQgaGFyZCB0byBkZWNpZGUsIHNpbmNlIGl0IGlzIG5laXRoZXIgaG9ub3VyYWJsZSBmb3IgYSBtYW4gdG8gZGVzdHJveSBoaXMgZmVsbG93LWNpdGl6ZW5zLCBub3IganVzdCBmb3IgaGltIHRvIGJldHJheSB0aG9zZSB3aG8gaGF2ZSBwdXQgdGhlaXIgdHJ1c3QgaW4gaGltOyBidXQgYXMgaXQgaXMsIHdlIGFzayBvbmx5IGEgcmVsaWVmIGZyb20gZXZpbHMsIHNvbWV0aGluZyB3aGljaCB3b3VsZCBiZSBzYWx1dGFyeSBmb3IgYm90aCBwYXJ0aWVzIGFsaWtlLCBidXQgbW9yZSBjb25kdWNpdmUgdG8gZmFtZSBhbmQgaG9ub3VyIGZvciB0aGUgVm9sc2NpYW5zLCBiZWNhdXNlIHRoZWlyIHN1cGVyaW9yaXR5IGluIGFybXMgd2lsbCBnaXZlIHRoZW0gdGhlIGFwcGVhcmFuY2Ugb2YgYmVzdG93aW5nIHRoZSBncmVhdGVzdCBvZiBibGVzc2luZ3MsIG5hbWVseSBwZWFjZSBhbmQgZnJpZW5kc2hpcCwgYWx0aG91Z2ggdGhleSBnZXQgdGhlc2Ugbm8gbGVzcyB0aGVtc2VsdmVzLiBJZiB0aGVzZSBibGVzc2luZ3MgYXJlIHJlYWxpemVkLCBpdCB3aWxsIGJlIGNoaWVmbHkgZHVlIHRvIHRoZWU7IGlmIHRoZXkgYXJlIG5vdCwgdGhlbiB0aG91IGFsb25lIHdpbHQgYmVhciB0aGUgYmxhbWUgZnJvbSBib3RoIG5hdGlvbnMuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhvdWdoIHRoZSBpc3N1ZXMgb2Ygd2FyIGFyZSBvYnNjdXJlLCB0aGlzIGlzIG1hbmlmZXN0LCB0aGF0IGlmIHZpY3RvcmlvdXMsIHRob3Ugd2lsdCBvbmx5IGJlIHRoeSBjb3VudHJ5J3MgZGVzdHJveWluZyBkZW1vbiwgYW5kIGlmIGRlZmVhdGVkLCB0aGUgd29ybGQgd2lsbCB0aGluayB0aGF0LCB0byBzYXRpc2Z5IHRoeSB3cmF0aCwgdGhvdSBkaWRzdCBicmluZyBkb3duIHRoZSBncmVhdGVzdCBjYWxhbWl0aWVzIHVwb24gbWVuIHdobyB3ZXJlIHRoeSBiZW5lZmFjdG9ycyBhbmQgZnJpZW5kcy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBWb2x1bW5pYSB3YXMgc2F5aW5nIHRoaXMsIE1hcmNpdXMgbGlzdGVuZWQgd2l0aG91dCBtYWtpbmcgYW55IGFuc3dlciwgYW5kIGFmdGVyIHNoZSBoYWQgY2Vhc2VkIGFsc28sIGhlIHN0b29kIGEgbG9uZyB0aW1lIGluIHNpbGVuY2UuIFZvbHVtbmlhIHRoZXJlZm9yZSBiZWdhbiBvbmNlIG1vcmU6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5IGFydCB0aG91IHNpbGVudCwgbXkgc29uPyBJcyBpdCByaWdodCB0byB5aWVsZCBldmVyeXRoaW5nIHRvIHdyYXRoIGFuZCByZXNlbnRtZW50LCBidXQgd3JvbmcgdG8gZ3JhdGlmeSBhIG1vdGhlciBpbiBzdWNoIGEgcHJheWVyIGFzIHRoaXM/IAoJCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PciBpcyB0aGUgcmVtZW1icmFuY2Ugb2YgaGlzIHdyb25ncyBiZWNvbWluZyB0byBhIGdyZWF0IG1hbiwgd2hpbGUgdGhlIHJlbWVtYnJhbmNlLCB3aXRoIHJldmVyZW5jZSBhbmQgaG9ub3VyLCBvZiB0aGUgYmVuZWZpdHMgd2hpY2ggY2hpbGRyZW4gaGF2ZSByZWNlaXZlZCBmcm9tIHRoZWlyIHBhcmVudHMgaXMgbm90IHRoZSBkdXR5IG9mIGEgZ3JlYXQgYW5kIGdvb2QgbWFuPyBTdXJlbHkgZm9yIG5vIG1hbiB3ZXJlIGl0IG1vcmUgc2VlbWx5IHRvIGNoZXJpc2ggZ3JhdGl0dWRlIHRoYW4gZm9yIHRoZWUsIHdobyBkb3N0IHNvIGJpdHRlcmx5IHByb2NlZWQgYWdhaW5zdCBpbmdyYXRpdHVkZS4gCgkJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIGFsdGhvdWdoIHRob3UgaGFzdCBhbHJlYWR5IHB1bmlzaGVkIHRoeSBjb3VudHJ5IHNldmVyZWx5LCB0aG91IGhhc3Qgbm90IHNob3duIHRoeSBtb3RoZXIgYW55IGdyYXRpdHVkZS4gSXQgd2VyZSwgdGhlcmVmb3JlLCBhIG1vc3QgcGlvdXMgdGhpbmcgaW4gdGhlZSB0byBncmFudCBtZSwgd2l0aG91dCBhbnkgY29tcHVsc2lvbiwgc28gd29ydGh5IGFuZCBqdXN0IGEgcmVxdWVzdCBhcyBtaW5lOyBidXQgc2luY2UgSSBjYW5ub3QgcGVyc3VhZGUgdGhlZSwgd2h5IHNob3VsZCBJIHNwYXJlIG15IGxhc3QgcmVzb3VyY2U/PC9xPiBBbmQgd2l0aCB0aGVzZSB3b3JkcyBzaGUgdGhyZXcgaGVyc2VsZiBhdCBoaXMgZmVldCwgdG9nZXRoZXIgd2l0aCBoaXMgd2lmZSBhbmQgY2hpbGRyZW4uCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUaGVuIE1hcmNpdXMsIGNyeWluZyBvdXQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGhhc3QgdGhvdSBkb25lIHRvIG1lLCBteSBtb3RoZXIhPC9xPiBsaWZ0ZWQgaGVyIHVwLCBhbmQgcHJlc3NpbmcgaGVyIHJpZ2h0IGhhbmQgd2FybWx5LCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3UgYXJ0IHZpY3RvcmlvdXMsIGFuZCB0aHkgdmljdG9yeSBtZWFucyBnb29kIGZvcnR1bmUgdG8gbXkgY291bnRyeSwgYnV0IGRlYXRoIHRvIG1lOyBmb3IgSSBzaGFsbCB3aXRoZHJhdyB2YW5xdWlzaGVkLCB0aG91Z2ggYnkgdGhlZSBhbG9uZS48L3E+IFdoZW4gaGUgaGFkIHNhaWQgdGhpcywgYW5kIGhhZCBoZWxkIGEgbGl0dGxlIHByaXZhdGUgY29uZmVyZW5jZSB3aXRoIGhpcyBtb3RoZXIgYW5kIGhpcyB3aWZlLCBoZSBzZW50IHRoZW0gYmFjayBhZ2FpbiB0byBSb21lLCBhcyB0aGV5IGRlc2lyZWQsIGFuZCBvbiB0aGUgbmV4dCBtb3JuaW5nIGxlZCBhd2F5IGhpcyBWb2xzY2lhbnMsIHdobyB3ZXJlIG5vdCBhbGwgYWZmZWN0ZWQgaW4gdGhlIHNhbWUgd2F5IG5vciBlcXVhbGx5IHBsZWFzZWQgYnkgd2hhdCBoYWQgaGFwcGVuZWQuCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHNvbWUgZm91bmQgZmF1bHQgYm90aCB3aXRoIGhpbSBhbmQgd2l0aCB3aGF0IGhlIGhhZCBkb25lOyBidXQgb3RoZXJzLCB3aG8gd2VyZSBmYXZvdXJhYmx5IGRpc3Bvc2VkIHRvd2FyZHMgYSBwZWFjZWZ1bCBzZXR0bGVtZW50IG9mIHRoZSBkaXNwdXRlLCB3aXRoIG5laXRoZXI7IHdoaWxlIHNvbWUsIHRob3VnaCBkaXNwbGVhc2VkIHdpdGggaGlzIHByb2NlZWRpbmdzLCBuZXZlcnRoZWxlc3MgY291bGQgbm90IGxvb2sgdXBvbiBNYXJjaXVzIGFzIGEgYmFkIG1hbiwgYnV0IHRob3VnaHQgaXQgcGFyZG9uYWJsZSBpbiBoaW0gdG8gYmUgYnJva2VuIGRvd24gYnkgc3VjaCBzdHJvbmcgY29tcHVsc2lvbnMuIE5vIG9uZSwgaG93ZXZlciwgb3Bwb3NlZCBoaW0sIGJ1dCBhbGwgZm9sbG93ZWQgaGltIG9iZWRpZW50bHksIHRob3VnaCByYXRoZXIgb3V0IG9mIGFkbWlyYXRpb24gZm9yIGhpcyB2aXJ0dWUgdGhhbiByZWdhcmQgZm9yIGhpcyBhdXRob3JpdHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q29tcGFyZSBMaXZ5J3Mgc3Rvcnkgb2YgdGhpcyBpbnRlcnZpZXcgYW5kIGl0cyByZXN1bHRzIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuNDAuMyIgdmFsaWQ9InllcyI+KGlpLiA0MCwgMy05KS48L2JpYmw+IFBsdXRhcmNoIGFncmVlcyByYXRoZXIgd2l0aCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjM5Ij5EaW9ueXNpdXMsIHZpaWkuIDM5LTU0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBSb21hbiBwZW9wbGUgc2hvd2VkIG1vcmUgcGxhaW5seSwgd2hlbiB0aGV5IHdlcmUgc2V0IGZyZWUgZnJvbSB0aGUgd2FyLCB0aGUgZ3JlYXRuZXNzIG9mIHRoZWlyIGZlYXIgYW5kIHBlcmlsIHdoaWxlIGl0IGxhc3RlZC4gRm9yIGFzIHNvb24gYXMgdGhvc2Ugd2hvIG1hbm5lZCB0aGUgd2FsbHMgZGVzY3JpZWQgdGhlIFZvbHNjaWFucyBkcmF3aW5nIHRoZWlyIGZvcmNlcyBvZmYsIGV2ZXJ5IHRlbXBsZSB3YXMgdGhyb3duIG9wZW4sIGFuZCB0aGUgcGVvcGxlIGNyb3duZWQgdGhlbXNlbHZlcyB3aXRoIGdhcmxhbmRzIGFuZCBvZmZlcmVkIHNhY3JpZmljZXMgYXMgaWYgZm9yIHZpY3RvcnkuIEJ1dCB0aGUgam95IG9mIHRoZSBjaXR5IHdhcyBtb3N0IGFwcGFyZW50IGluIHRoZSBob25vdXIgYW5kIGxvdmluZyBmYXZvdXIgd2hpY2ggYm90aCB0aGUgc2VuYXRlIGFuZCB0aGUgd2hvbGUgcGVvcGxlIGJlc3Rvd2VkIHVwb24gdGhlIHdvbWVuLCBkZWNsYXJpbmcgdGhlaXIgYmVsaWVmIHRoYXQgdGhlIGNpdHkncyBzYWx2YXRpb24gd2FzIG1hbmlmZXN0bHkgZHVlIHRvIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZSBzZW5hdGUgcGFzc2VkIGEgZGVjcmVlIHRoYXQgd2hhdHNvZXZlciB0aGV5IGFza2VkIGZvciB0aGVtc2VsdmVzIGluIHRoZSB3YXkgb2YgaG9ub3VyIG9yIGZhdm91ciwgc2hvdWxkIGJlIGZ1cm5pc2hlZCBhbmQgZG9uZSBmb3IgdGhlbSBieSB0aGUgbWFnaXN0cmF0ZXMsIHRoZXkgYXNrZWQgZm9yIG5vdGhpbmcgZWxzZSBiZXNpZGVzIHRoZSBlcmVjdGlvbiBvZiBhIHRlbXBsZSBvZiBXb21lbidzIEZvcnR1bmUsIHRoZSBleHBlbnNlIG9mIHdoaWNoIHRoZXkgb2ZmZXJlZCB0byBjb250cmlidXRlIG9mIHRoZW1zZWx2ZXMsIGlmIHRoZSBjaXR5IHdvdWxkIHVuZGVydGFrZSB0byBwZXJmb3JtLCBhdCB0aGUgcHVibGljIGNoYXJnZSwgYWxsIHRoZSBzYWNyaWZpY2VzIGFuZCBob25vdXJzLCBzdWNoIGFzIGFyZSBkdWUgdG8gdGhlIGdvZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgY29tbWVuZGVkIHRoZWlyIHB1YmxpYyBzcGlyaXQsIGFuZCBlcmVjdGVkIHRoZSB0ZW1wbGUgYW5kIGl0cyBpbWFnZSBhdCB0aGUgcHVibGljIGNoYXJnZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi48YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjExIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNDAsMTEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ1dCB0aGV5IG5vbmUgdGhlIGxlc3MgY29udHJpYnV0ZWQgbW9uZXkgdGhlbXNlbHZlcyBhbmQgc2V0IHVwIGEgc2Vjb25kIGltYWdlIG9mIHRoZSBnb2RkZXNzLCBhbmQgdGhpcywgdGhlIFJvbWFucyBzYXksIGFzIGl0IHdhcyBwbGFjZWQgaW4gdGhlIHRlbXBsZSwgdXR0ZXJlZCBzb21lIHN1Y2ggd29yZHMgYXMgdGhlc2U6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RGVhciB0byB0aGUgZ29kcywgTyB3b21lbiwgaXMgeW91ciBwaW91cyBnaWZ0IG9mIG1lLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguNTYiPkRpb255c2l1cywgdmlpaS4gNTYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUaGVzZSB3b3JkcyB3ZXJlIGFjdHVhbGx5IHV0dGVyZWQgdHdpY2UsIGFzIHRoZSBzdG9yeSBydW5zLCB3aGljaCB3b3VsZCBoYXZlIHVzIGJlbGlldmUgd2hhdCBpcyBkaWZmaWN1bHQgb2YgYmVsaWVmIGFuZCBwcm9iYWJseSBuZXZlciBoYXBwZW5lZC4gRm9yIHRoYXQgc3RhdHVlcyBoYXZlIGFwcGVhcmVkIHRvIHN3ZWF0LCBhbmQgc2hlZCB0ZWFycywgYW5kIGV4dWRlIHNvbWV0aGluZyBsaWtlIGRyb3BzIG9mIGJsb29kLCBpcyBub3QgaW1wb3NzaWJsZTsgc2luY2Ugd29vZCBhbmQgc3RvbmUgb2Z0ZW4gY29udHJhY3QgYSBtb3VsZCB3aGljaCBpcyBwcm9kdWN0aXZlIG9mIG1vaXN0dXJlLCBhbmQgY292ZXIgdGhlbXNlbHZlcyB3aXRoIG1hbnkgY29sb3VycywgYW5kIHJlY2VpdmUgdGludHMgZnJvbSB0aGUgYXRtb3NwaGVyZTsgYW5kIHRoZXJlIGlzIG5vdGhpbmcgaW4gdGhlIHdheSBvZiBiZWxpZXZpbmcgdGhhdCB0aGUgRGVpdHkgdXNlcyB0aGVzZSBwaGVub21lbmEgc29tZXRpbWVzIGFzIHNpZ25zIGFuZCBwb3J0ZW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgcG9zc2libGUgYWxzbyB0aGF0IHN0YXR1ZXMgbWF5IGVtaXQgYSBub2lzZSBsaWtlIGEgbW9hbiBvciBhIGdyb2FuLCBieSByZWFzb24gb2YgYSBmcmFjdHVyZSBvciBhIHJ1cHR1cmUsIHdoaWNoIGlzIG1vcmUgdmlvbGVudCBpZiBpdCB0YWtlcyBwbGFjZSBpbiB0aGUgaW50ZXJpb3IuIEJ1dCB0aGF0IGFydGljdWxhdGUgc3BlZWNoLCBhbmQgbGFuZ3VhZ2Ugc28gY2xlYXIgYW5kIGFidW5kYW50IGFuZCBwcmVjaXNlLCBzaG91bGQgcHJvY2VlZCBmcm9tIGEgbGlmZWxlc3MgdGhpbmcsIGlzIGFsdG9nZXRoZXIgaW1wb3NzaWJsZTsgc2luY2Ugbm90IGV2ZW4gdGhlIHNvdWwgb2YgbWFuLCBvciB0aGUgRGVpdHksIHdpdGhvdXQgYSBib2R5IGR1bHkgb3JnYW5pemVkIGFuZCBmaXR0ZWQgd2l0aCB2b2NhbCBwYXJ0cywgaGFzIGV2ZXIgc3Bva2VuIGFuZCBjb252ZXJzZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVyZSBoaXN0b3J5IGZvcmNlcyBvdXIgYXNzZW50IHdpdGggbnVtZXJvdXMgYW5kIGNyZWRpYmxlIHdpdG5lc3Nlcywgd2UgbXVzdCBjb25jbHVkZSB0aGF0IGFuIGV4cGVyaWVuY2UgZGlmZmVyZW50IGZyb20gdGhhdCBvZiBzZW5zYXRpb24gYXJpc2VzIGluIHRoZSBpbWFnaW5hdGl2ZSBwYXJ0IG9mIHRoZSBzb3VsLCBhbmQgcGVyc3VhZGVzIG1lbiB0byB0aGluayBpdCBzZW5zYXRpb247IGFzLCBmb3IgaW5zdGFuY2UsIGluIHNsZWVwLCB3aGVuIHdlIHRoaW5rIHdlIHNlZSBhbmQgaGVhciwgYWx0aG91Z2ggd2UgbmVpdGhlciBzZWUgbm9yIGhlYXIuIEhvd2V2ZXIsIHRob3NlIHdobyBjaGVyaXNoIHN0cm9uZyBmZWVsaW5ncyBvZiBnb29kLXdpbGwgYW5kIGFmZmVjdGlvbiBmb3IgdGhlIERlaXR5LCBhbmQgYXJlIHRoZXJlZm9yZSB1bmFibGUgdG8gcmVqZWN0IG9yIGRlbnkgYW55dGhpbmcgb2YgdGhpcyBraW5kLCBoYXZlIGEgc3Ryb25nIGFyZ3VtZW50IGZvciB0aGVpciBmYWl0aCBpbiB0aGUgd29uZGVyZnVsIGFuZCB0cmFuc2NlbmRlbnQgY2hhcmFjdGVyIG9mIHRoZSBkaXZpbmUgcG93ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgRGVpdHkgaGFzIG5vIHJlc2VtYmxhbmNlIHdoYXRldmVyIHRvIG1hbiwgZWl0aGVyIGluIG5hdHVyZSwgYWN0aXZpdHksIHNraWxsLCBvciBzdHJlbmd0aDsgbm9yLCBpZiBIZSBkb2VzIHNvbWV0aGluZyB0aGF0IHdlIGNhbm5vdCBkbywgb3IgY29udHJpdmVzIHNvbWV0aGluZyB0aGF0IHdlIGNhbm5vdCBjb250cml2ZSwgaXMgdGhpcyBjb250cmFyeSB0byByZWFzb247IGJ1dCByYXRoZXIsIHNpbmNlIEhlIGRpZmZlcnMgZnJvbSB1cyBpbiBhbGwgcG9pbnRzLCBpbiBIaXMgd29ya3MgbW9zdCBvZiBhbGwgaXMgSGUgdW5saWtlIHVzIGFuZCBmYXIgcmVtb3ZlZCBmcm9tIHVzLiBCdXQgbW9zdCBvciB0aGUgRGVpdHkncyBwb3dlcnMsIGFzIEhlcmFjbGVpdHVzIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgMTE2IChCeXdhdGVyLCBwLiA0NSk8L25vdGU+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5lc2NhcGUgb3VyIGtub3dsZWRnZSB0aHJvdWdoIGluY3JlZHVsaXR5LjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgTWFyY2l1cywgd2hlbiBoZSBjYW1lIGJhY2sgdG8gQW50aXVtIGZyb20gaGlzIGV4cGVkaXRpb24sIFR1bGx1cywgd2hvIGhhZCBsb25nIGhhdGVkIGhpbSBhbmQgYmVlbiBvcHByZXNzZWQgd2l0aCBqZWFsb3VzeSBvZiBoaW0sIHBsb3R0ZWQgdG8gdGFrZSBoaW0gb2ZmIGF0IG9uY2UsIGJlbGlldmluZyB0aGF0IGlmIGhpcyBlbmVteSBlc2NhcGVkIGhpbSBub3csIGhlIHdvdWxkIG5ldmVyIGdpdmUgaGltIGFub3RoZXIgY2hhbmNlIHRvIHNlaXplIGhpbS4gSGF2aW5nLCB0aGVyZWZvcmUsIGFycmF5ZWQgYSBsYXJnZSBwYXJ0eSBhZ2FpbnN0IGhpbSwgaGUgYmFkZSBoaW0gbGF5IGRvd24gaGlzIGNvbW1hbmQgYW5kIGdpdmUgdGhlIFZvbHNjaWFucyBhbiBhY2NvdW50IG9mIGhpcyBhZG1pbmlzdHJhdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE1hcmNpdXMsIGFmcmFpZCBvZiBiZWluZyByZWR1Y2VkIHRvIHByaXZhdGUgc3RhdGlvbiB3aGVuIFR1bGx1cyB3YXMgaW4gY29tbWFuZCBhbmQgZXhlcmNpc2luZyB0aGUgZ3JlYXRlc3QgaW5mbHVlbmNlIGFtb25nIGhpcyBvd24gY291bnRyeW1lbiwgc2FpZCBoZSB3b3VsZCByZXNpZ24gaGlzIGNvbW1hbmQgdG8gdGhlIFZvbHNjaWFucywgaWYgdGhleSBiYWRlIGhpbSBkbyBzbywgc2luY2UgaXQgd2FzIGF0IHRoZWlyIGdlbmVyYWwgYmlkZGluZyB0aGF0IGhlIGhhZCBhc3N1bWVkIGl0OyBhbmQgdGhhdCBoZSB3YXMgcmVhZHksIGFuZCB3b3VsZCBub3QgcmVmdXNlIGV2ZW4gYmVmb3JlIHRoYXQsIHRvIGdpdmUgYSBmdWxsIGFjY291bnQgb2YgaGlzIGFkbWluaXN0cmF0aW9uIHRvIGFsbCB0aGUgcGVvcGxlIG9mIEFudGl1bSB3aG8gZGVzaXJlZCBpdC4gQW4gYXNzZW1ibHkgd2FzIHRoZXJlZm9yZSBoZWxkLCBhdCB3aGljaCB0aGUgcG9wdWxhciBsZWFkZXJzIHdobyBoYWQgYmVlbiBzZXQgdG8gdGhlIHdvcmsgcm9zZSBhbmQgdHJpZWQgdG8gZW1iaXR0ZXIgdGhlIG11bHRpdHVkZSBhZ2FpbnN0IGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gTWFyY2l1cyByb3NlIHRvIHNwZWFrLCB0aGUgbW9yZSBkaXNvcmRlcmx5IHBhcnQgb2YgaGlzIGF1ZGllbmNlIGdyZXcgcXVpZXQsIG91dCBvZiByZXZlcmVuY2UgZm9yIGhpbSwgYW5kIGdhdmUgaGltIG9wcG9ydHVuaXR5IHRvIHNwZWFrIGZlYXJsZXNzbHksIHdoaWxlIHRoZSBiZXN0IG9mIHRoZSBtZW4gb2YgQW50aXVtLCBhbmQgdGhvc2UgdGhhdCB3ZXJlIGVzcGVjaWFsbHkgcGxlYXNlZCB3aXRoIHBlYWNlLCBtYWRlIGl0IGNsZWFyIHRoYXQgdGhleSB3b3VsZCBsaXN0ZW4gdG8gaGltIHdpdGggZmF2b3VyIGFuZCBnaXZlIGEganVzdCBkZWNpc2lvbi4gVHVsbHVzLCB0aGVyZWZvcmUsIGJlZ2FuIHRvIGZlYXIgdGhlIGVmZmVjdCBvZiB0aGUgbWFuJ3MgcGxlYSBpbiBzZWxmLWRlZmVuY2U7IGZvciBoZSB3YXMgb25lIG9mIHRoZSBtb3N0IHBvd2VyZnVsIHNwZWFrZXJzLCBhbmQgaGlzIGVhcmxpZXIgYWNoaWV2ZW1lbnRzIHNlY3VyZWQgaGltIGEgZ3JhdGl0dWRlIHdoaWNoIG91dHdlaWdoZWQgaGlzIGxhdGVyIGZhdWx0OyBuYXkgbW9yZSwgdGhlIHZlcnkgY2hhcmdlIGFnYWluc3QgaGltIHdhcyBidXQgc28gbXVjaCBwcm9vZiBvZiB0aGUgZ3JlYXQgZ3JhdGl0dWRlIHdoaWNoIHdhcyBoaXMgZHVlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSB3b3VsZCBub3QgaGF2ZSB0aG91Z2h0IHRoZW1zZWx2ZXMgd3JvbmdlZCBpbiBub3QgZ2V0dGluZyBSb21lIGludG8gdGhlaXIgcG93ZXIsIGhhZCBub3QgdGhlIGVmZm9ydHMgb2YgTWFyY2l1cyBicm91Z2h0IHRoZW0gbmVhciB0byB0YWtpbmcgaXQuCgkJCTwvcD4KICAgICAgICAgPHA+QWNjb3JkaW5nbHksIHRoZSBjb25zcGlyYXRvcnMgZGVjaWRlZCB0byBtYWtlIG5vIG1vcmUgZGVsYXksIGFuZCBub3QgdG8gdGVzdCB0aGUgZmVlbGluZ3Mgb2YgdGhlIG11bHRpdHVkZTsgYnV0IHRoZSBib2xkZXN0IG9mIHRoZW0sIGNyeWluZyBvdXQgdGhhdCB0aGUgVm9sc2NpYW5zIG11c3Qgbm90IGxpc3RlbiB0byB0aGUgdHJhaXRvciwgbm9yIHN1ZmZlciBoaW0gdG8gcmV0YWluIGhpcyBjb21tYW5kIGFuZCBwbGF5IHRoZSB0eXJhbnQgYW1vbmcgdGhlbSwgZmVsbCB1cG9uIGhpbSBpbiBhIGJvZHkgYW5kIHNsZXcgaGltLCBhbmQgbm8gbWFuIHByZXNlbnQgb2ZmZXJlZCB0byBkZWZlbmQgaGltLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgoJCQkJICAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVuLCBhZnRlciBoZSBoYWQgd2l0aGRyYXduIGhpcyB0cm9vcHMgZnJvbSB0aGUgUm9tYW4gdGVycml0b3J5LCB0aGV5IHNheSB0aGF0IGhlIHdhcyBvdmVyd2hlbG1lZCB3aXRoIGhhdHJlZCBpbiBjb25zZXF1ZW5jZSwgYW5kIGxvc3QgaGlzIGxpZmUsIGRpZmZlcmVudCB3cml0ZXJzIGdpdmluZyBkaWZmZXJlbnQgZGV0YWlscyBvZiBoaXMgZGVhdGguIEluIEZhYml1cywgd2hvIGlzIGJ5IGZhciB0aGUgbW9zdCBhbmNpZW50IGF1dGhvcml0eSwgSSBmaW5kIHRoYXQgaGUgbGl2ZWQgZXZlbiB0byBvbGQgYWdlPC9xPiAKICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40MC4xMCIgdmFsaWQ9InllcyI+KExpdnksIGlpLiA0MCwgMTApLjwvYmlibD4gQ2hhcHRlciB4eHhpeC4gaW4gUGx1dGFyY2ggYWdyZWVzIGNsb3NlbHkgd2l0aCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjU3Ij5EaW9ueXNpdXMgdmlpaS4gNTctNTk8L2JpYmw+LCB3aG8gc2F5cyB0aGF0IE1hcmNpdXMgd2FzIHN0b25lZCB0byBkZWF0aC48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhhdCB0aGUgZGVlZCB3YXMgbm90IHdyb3VnaHQgd2l0aCB0aGUgYXBwcm92YWwgb2YgdGhlIG1ham9yaXR5IG9mIHRoZSBWb2xzY2lhbnMsIHdhcyBzZWVuIGF0IG9uY2UgZnJvbSB0aGVpciBjb21pbmcgb3V0IG9mIHRoZWlyIGNpdGllcyBpbiBjb25jb3Vyc2UgdG8gaGlzIGJvZHksIHRvIHdoaWNoIHRoZXkgZ2F2ZSBob25vdXJhYmxlIGJ1cmlhbCwgYWRvcm5pbmcgaGlzIHRvbWIgd2l0aCBhcm1zIGFuZCBzcG9pbHMsIGFzIHRoYXQgb2YgYSBjaGllZnRhaW4gYW5kIGdlbmVyYWwuIEJ1dCB3aGVuIHRoZSBSb21hbnMgbGVhcm5lZCBvZiBoaXMgZGVhdGgsIHRoZXkgcGFpZCBoaW0gbm8gb3RoZXIgbWFyayBlaXRoZXIgb2YgaG9ub3VyIG9yIHJlc2VudG1lbnQsIGJ1dCBzaW1wbHkgZ3JhbnRlZCB0aGUgcmVxdWVzdCBvZiB0aGUgd29tZW4gdGhhdCB0aGV5IG1pZ2h0IG1vdXJuIGZvciBoaW0gdGVuIG1vbnRocywgYXMgd2FzIGN1c3RvbWFyeSB3aGVuIGFueSBvbmUgb2YgdGhlbSBsb3N0IGEgZmF0aGVyLCBvciBhIHNvbiwgb3IgYSBicm90aGVyLiBGb3IgdGhpcyB3YXMgdGhlIHBlcmlvZCBmaXhlZCBmb3IgdGhlIGxvbmdlc3QgbW91cm5pbmcsIGFuZCBpdCB3YXMgZml4ZWQgYnkgTnVtYSBQb21waWxpdXMsIGFzIGlzIHdyaXR0ZW4gaW4gaGlzIExpZmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDEyLjIiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeGlpLiAyPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbG9zcyBvZiBNYXJjaXVzIHdhcyBrZWVubHkgZmVsdCBhdCBvbmNlIGJ5IHRoZSBWb2xzY2lhbiBzdGF0ZS4gRm9yLCBpbiB0aGUgZmlyc3QgcGxhY2UsIHRoZXkgcXVhcnJlbGxlZCB3aXRoIHRoZSBBZXF1aWFucywgd2hvIHdlcmUgdGhlaXIgYWxsaWVzIGFuZCBmcmllbmRzLCBvdmVyIHRoZSBzdXByZW1lIGNvbW1hbmQsIGFuZCBjYXJyaWVkIHRoZWlyIHF1YXJyZWwgdG8gdGhlIGxlbmd0aCBvZiBibG9vZHNoZWQgYW5kIHNsYXVnaHRlcjsgaW4gdGhlIHNlY29uZCBwbGFjZSwgdGhleSB3ZXJlIGRlZmVhdGVkIGluIGJhdHRsZSBieSB0aGUgUm9tYW5zLCB3aGVyZWluIFR1bGx1cyB3YXMgc2xhaW4gYW5kIHRoZSB2ZXJ5IGZsb3dlciBvZiB0aGVpciBmb3JjZXMgd2FzIGN1dCB0byBwaWVjZXMsIHNvIHRoYXQgdGhleSB3ZXJlIGdsYWQgdG8gYWNjZXB0IG1vc3QgZGlzZ3JhY2VmdWwgdGVybXMsIGJlY29taW5nIHN1YmplY3RzIG9mIFJvbWUsIGFuZCBwbGVkZ2luZyB0aGVtc2VsdmVzIHRvIG9iZXkgaGVyIGNvbW1hbmRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjEyIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNDAsIDEyIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgPC9ib2R5PgogICA8aGVhZCBjbGFzcz0idHJhbnNsYXRpb24iPkNBSVVTIE1BUkNVUyBDT1JJT0xBTlVTPC9oZWFkPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBhdHJpY2lhbiBob3VzZSBvZiB0aGUgTWFyY2lpIGF0IFJvbWUgZnVybmlzaGVkIG1hbnkgbWVuIG9mIGRpc3RpbmN0aW9uLiBPbmUgb2YgdGhlbSB3YXMgQW5jdXMgTWFyY2l1cywgdGhlIGdyYW5kc29uIG9mIE51bWEgYnkgaGlzIGRhdWdodGVyLCBhbmQgdGhlIHN1Y2Nlc3NvciBvZiBUdWxsdXMgSG9zdGlsaXVzIGluIHRoZSBraW5nc2hpcC4gVG8gdGhpcyBmYW1pbHkgYmVsb25nZWQgYWxzbyBQdWJsaXVzIGFuZCBRdWludHVzIE1hcmNpdXMsIHRoZSBtZW4gd2hvIGJyb3VnaHQgaW50byBSb21lIGl0cyBiZXN0IGFuZCBtb3N0IGFidW5kYW50IHN1cHBseSBvZiB3YXRlci4gU28gbGlrZXdpc2UgZGlkIENlbnNvcmludXMsIHdob20gdGhlIFJvbWFuIHBlb3BsZSB0d2ljZSBhcHBvaW50ZWQgY2Vuc29yLCBhbmQgdGhlbiwgYXQgaGlzIG93biBpbnN0YW5jZSwgbWFkZSBhIGxhdyBieSB3aGljaCBpdCB3YXMgZGVjcmVlZCB0aGF0IG5vIG9uZSBzaG91bGQgaG9sZCB0aGF0IG9mZmljZSB0d2ljZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5DYWl1cyBNYXJjaXVzLCB3aG9zZSBsaWZlIEkgbm93IHdyaXRlLCBsb3N0IGhpcyBmYXRoZXIgYXQgYW4gZWFybHkgYWdlLCBhbmQgd2FzIHJlYXJlZCBieSBoaXMgd2lkb3dlZCBtb3RoZXIuIEhlIHNob3dlZCwgaG93ZXZlciwgdGhhdCBzdWNoIGxvc3Mgb2YgYSBmYXRoZXIsIGFsdGhvdWdoIG90aGVyd2lzZSBiYWQgZm9yIGEgYm95LCBuZWVkIG5vdCBwcmV2ZW50IGhpbSBmcm9tIGJlY29taW5nIGEgd29ydGh5IGFuZCBleGNlbGxlbnQgbWFuLCBhbmQgdGhhdCBpdCBpcyB3cm9uZyBmb3Igd29ydGhsZXNzIG1lbiB0byBsYXkgdXBvbiBpdCB0aGUgYmxhbWUgZm9yIHRoZWlyIHBlcnZlcnRlZCBuYXR1cmVzLCB3aGljaCBhcmUgZHVlLCBhcyB0aGV5IHNheSwgdG8gZWFybHkgbmVnbGVjdC4gT24gdGhlIG90aGVyIGhhbmQsIHRoZSBzYW1lIE1hcmNpdXMgYm9yZSB3aXRuZXNzIGZvciB0aG9zZSB3aG8gaG9sZCB0aGF0IGEgZ2VuZXJvdXMgYW5kIG5vYmxlIG5hdHVyZSwgaWYgaXQgbGFjayBkaXNjaXBsaW5lLCBpcyBhcHQgdG8gcHJvZHVjZSBtdWNoIHRoYXQgaXMgd29ydGhsZXNzIGFsb25nIHdpdGggaXRzIGJldHRlciBmcnVpdHMsIGxpa2UgYSByaWNoIHNvaWwgZGVwcml2ZWQgb2YgdGhlIGh1c2JhbmRtYW4ncyBjdWx0dXJlIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGlsZSB0aGUgZm9yY2UgYW5kIHZpZ291ciBvZiBoaXMgaW50ZWxsaWdlbmNlLCB3aGljaCBrbmV3IG5vIGxpbWl0YXRpb25zLCBsZWQgaGltIGludG8gZ3JlYXQgdW5kZXJ0YWtpbmdzLCBhbmQgc3VjaCBhcyB3ZXJlIHByb2R1Y3RpdmUgb2YgdGhlIGhpZ2hlc3QgcmVzdWx0cywgc3RpbGwsIG9uIHRoZSBvdGhlciBoYW5kLCBzaW5jZSBoZSBpbmR1bGdlZCBhIHZlaGVtZW50IHRlbXBlciBhbmQgZGlzcGxheWVkIGFuIHVuc3dlcnZpbmcgcGVydGluYWNpdHksIGl0IG1hZGUgaGltIGEgZGlmZmljdWx0IGFuZCB1bnN1aXRhYmxlIGFzc29jaWF0ZSBmb3Igb3RoZXJzLiBUaGV5IGRpZCBpbmRlZWQgbG9vayB3aXRoIGFkbWlyYXRpb24gdXBvbiBoaXMgaW5zZW5zaWJpbGl0eSB0byBwbGVhc3VyZXMsIHRvaWxzLCBhbmQgbWVyY2VuYXJ5IGdhaW5zLCB0byB3aGljaCB0aGV5IGdhdmUgdGhlIG5hbWVzIG9mIHNlbGYtY29udHJvbCwgZm9ydGl0dWRlLCBhbmQganVzdGljZTsgYnV0IGluIHRoZWlyIGludGVyY291cnNlIHdpdGggaGltIGFzIGEgZmVsbG93LWNpdGl6ZW4gdGhleSB3ZXJlIG9mZmVuZGVkIGJ5IGl0IGFzIHVuZ3JhY2lvdXMsIGJ1cmRlbnNvbWUsIGFuZCBhcnJvZ2FudC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VmVyaWx5LCBhbW9uZyBhbGwgdGhlIGJlbmVmaXRzIHdoaWNoIG1lbiBkZXJpdmUgZnJvbSB0aGUgZmF2b3VyIG9mIHRoZSBNdXNlcywgbm9uZSBvdGhlciBpcyBzbyBncmVhdCBhcyB0aGF0IHNvZnRlbmluZyBvZiB0aGUgbmF0dXJlIHdoaWNoIGlzIHByb2R1Y2VkIGJ5IGN1bHR1cmUgYW5kIGRpc2NpcGxpbmUsIHRoZSBuYXR1cmUgYmVpbmcgaW5kdWNlZCBieSBjdWx0dXJlIHRvIHRha2Ugb24gbW9kZXJhdGlvbiBhbmQgY2FzdCBvZmYgZXhjZXNzLiBJdCBpcyBwZXJmZWN0bHkgdHJ1ZSwgaG93ZXZlciwgdGhhdCBpbiB0aG9zZSBkYXlzIFJvbWUgaGVsZCBpbiBoaWdoZXN0IGhvbm91ciB0aGF0IHBoYXNlIG9mIHZpcnR1ZSB3aGljaCBjb25jZXJucyBpdHNlbGYgd2l0aCB3YXJsaWtlIGFuZCBtaWxpdGFyeSBhY2hpZXZlbWVudHMsIGFuZCBldmlkZW5jZSBvZiB0aGlzIG1heSBiZSBmb3VuZCBpbiB0aGUgb25seSBMYXRpbiB3b3JkIGZvciB2aXJ0dWUsIHdoaWNoIHNpZ25pZmllcyByZWFsbHkgPGVtcGg+bWFubHkgdmFsb3VyPC9lbXBoPjsgdGhleSBtYWRlIHZhbG91ciwgYSBzcGVjaWZpYyBmb3JtIG9mIHZpcnR1ZSwgc3RhbmQgZm9yIHZpcnR1ZSBpbiBnZW5lcmFsLgoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlBbmQgc28gTWFyY2l1cywgd2hvIHdhcyBieSBuYXR1cmUgZXhjZWVkaW5nbHkgZm9uZCBvZiB3YXJsaWtlIGZlYXRzLCBiZWdhbiBhdCBvbmNlLCBmcm9tIGhpcyB2ZXJ5IGJveWhvb2QsIHRvIGhhbmRsZSBhcm1zLiBBbmQgc2luY2UgaGUgdGhvdWdodCB0aGF0IGFkdmVudGl0aW91cyB3ZWFwb25zIHdlcmUgb2YgbGl0dGxlIGF2YWlsIHRvIHN1Y2ggYXMgZGlkIG5vdCBoYXZlIHRoZWlyIG5hdHVyYWwgYW5kIG5hdGl2ZSBhcm1vdXIgZGV2ZWxvcGVkIGFuZCBwcmVwYXJlZCBmb3Igc2VydmljZSwgaGUgc28gcHJhY3Rpc2VkIGhpbXNlbGYgaW4gZXZlcnkgc29ydCBvZiBjb21iYXQgdGhhdCBoZSB3YXMgbm90IG9ubHkgbmltYmxlIG9mIGZvb3QsIGJ1dCBoYWQgYWxzbyBzdWNoIGEgd2VpZ2h0IGluIGdyYXBwbGluZ3MgYW5kIHdyZXN0bGluZ3MgdGhhdCBhbiBlbmVteSBmb3VuZCBpdCBoYXJkIHRvIGV4dHJpY2F0ZSBoaW1zZWxmLiBBdCBhbnkgcmF0ZSwgdGhvc2Ugd2hvIGZyb20gdGltZSB0byB0aW1lIGNvbnRlbmRlZCB3aXRoIGhpbSBpbiBmZWF0cyBvZiBjb3VyYWdlIGFuZCB2YWxvdXIsIGxhaWQgdGhlIGJsYW1lIGZvciB0aGVpciBpbmZlcmlvcml0eSB1cG9uIGhpcyBzdHJlbmd0aCBvZiBib2R5LCB3aGljaCB3YXMgaW5mbGV4aWJsZSBhbmQgc2hyYW5rIGZyb20gbm8gaGFyZHNoaXAuCgkJCTwvcD4KICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwYXRyaWNpYW4gaG91c2Ugb2YgdGhlIE1hcmNpaSBhdCBSb21lIGZ1cm5pc2hlZCBtYW55IG1lbiBvZiBkaXN0aW5jdGlvbi4gT25lIG9mIHRoZW0gd2FzIEFuY3VzIE1hcmNpdXMsIHRoZSBncmFuZHNvbiBvZiBOdW1hIGJ5IGhpcyBkYXVnaHRlciwgYW5kIHRoZSBzdWNjZXNzb3Igb2YgVHVsbHVzIEhvc3RpbGl1cyBpbiB0aGUga2luZ3NoaXAuIFRvIHRoaXMgZmFtaWx5IGJlbG9uZ2VkIGFsc28gUHVibGl1cyBhbmQgUXVpbnR1cyBNYXJjaXVzLCB0aGUgbWVuIHdobyBicm91Z2h0IGludG8gUm9tZSBpdHMgYmVzdCBhbmQgbW9zdCBhYnVuZGFudCBzdXBwbHkgb2Ygd2F0ZXIuIFNvIGxpa2V3aXNlIGRpZCBDZW5zb3JpbnVzLCB3aG9tIHRoZSBSb21hbiBwZW9wbGUgdHdpY2UgYXBwb2ludGVkIGNlbnNvciwgYW5kIHRoZW4sIGF0IGhpcyBvd24gaW5zdGFuY2UsIG1hZGUgYSBsYXcgYnkgd2hpY2ggaXQgd2FzIGRlY3JlZWQgdGhhdCBubyBvbmUgc2hvdWxkIGhvbGQgdGhhdCBvZmZpY2UgdHdpY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhaXVzIE1hcmNpdXMsIHdob3NlIGxpZmUgSSBub3cgd3JpdGUsIGxvc3QgaGlzIGZhdGhlciBhdCBhbiBlYXJseSBhZ2UsIGFuZCB3YXMgcmVhcmVkIGJ5IGhpcyB3aWRvd2VkIG1vdGhlci4gSGUgc2hvd2VkLCBob3dldmVyLCB0aGF0IHN1Y2ggbG9zcyBvZiBhIGZhdGhlciwgYWx0aG91Z2ggb3RoZXJ3aXNlIGJhZCBmb3IgYSBib3ksIG5lZWQgbm90IHByZXZlbnQgaGltIGZyb20gYmVjb21pbmcgYSB3b3J0aHkgYW5kIGV4Y2VsbGVudCBtYW4sIGFuZCB0aGF0IGl0IGlzIHdyb25nIGZvciB3b3J0aGxlc3MgbWVuIHRvIGxheSB1cG9uIGl0IHRoZSBibGFtZSBmb3IgdGhlaXIgcGVydmVydGVkIG5hdHVyZXMsIHdoaWNoIGFyZSBkdWUsIGFzIHRoZXkgc2F5LCB0byBlYXJseSBuZWdsZWN0LiBPbiB0aGUgb3RoZXIgaGFuZCwgdGhlIHNhbWUgTWFyY2l1cyBib3JlIHdpdG5lc3MgZm9yIHRob3NlIHdobyBob2xkIHRoYXQgYSBnZW5lcm91cyBhbmQgbm9ibGUgbmF0dXJlLCBpZiBpdCBsYWNrIGRpc2NpcGxpbmUsIGlzIGFwdCB0byBwcm9kdWNlIG11Y2ggdGhhdCBpcyB3b3J0aGxlc3MgYWxvbmcgd2l0aCBpdHMgYmV0dGVyIGZydWl0cywgbGlrZSBhIHJpY2ggc29pbCBkZXByaXZlZCBvZiB0aGUgaHVzYmFuZG1hbidzIGN1bHR1cmUgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGlsZSB0aGUgZm9yY2UgYW5kIHZpZ291ciBvZiBoaXMgaW50ZWxsaWdlbmNlLCB3aGljaCBrbmV3IG5vIGxpbWl0YXRpb25zLCBsZWQgaGltIGludG8gZ3JlYXQgdW5kZXJ0YWtpbmdzLCBhbmQgc3VjaCBhcyB3ZXJlIHByb2R1Y3RpdmUgb2YgdGhlIGhpZ2hlc3QgcmVzdWx0cywgc3RpbGwsIG9uIHRoZSBvdGhlciBoYW5kLCBzaW5jZSBoZSBpbmR1bGdlZCBhIHZlaGVtZW50IHRlbXBlciBhbmQgZGlzcGxheWVkIGFuIHVuc3dlcnZpbmcgcGVydGluYWNpdHksIGl0IG1hZGUgaGltIGEgZGlmZmljdWx0IGFuZCB1bnN1aXRhYmxlIGFzc29jaWF0ZSBmb3Igb3RoZXJzLiBUaGV5IGRpZCBpbmRlZWQgbG9vayB3aXRoIGFkbWlyYXRpb24gdXBvbiBoaXMgaW5zZW5zaWJpbGl0eSB0byBwbGVhc3VyZXMsIHRvaWxzLCBhbmQgbWVyY2VuYXJ5IGdhaW5zLCB0byB3aGljaCB0aGV5IGdhdmUgdGhlIG5hbWVzIG9mIHNlbGYtY29udHJvbCwgZm9ydGl0dWRlLCBhbmQganVzdGljZTsgYnV0IGluIHRoZWlyIGludGVyY291cnNlIHdpdGggaGltIGFzIGEgZmVsbG93LWNpdGl6ZW4gdGhleSB3ZXJlIG9mZmVuZGVkIGJ5IGl0IGFzIHVuZ3JhY2lvdXMsIGJ1cmRlbnNvbWUsIGFuZCBhcnJvZ2FudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlZlcmlseSwgYW1vbmcgYWxsIHRoZSBiZW5lZml0cyB3aGljaCBtZW4gZGVyaXZlIGZyb20gdGhlIGZhdm91ciBvZiB0aGUgTXVzZXMsIG5vbmUgb3RoZXIgaXMgc28gZ3JlYXQgYXMgdGhhdCBzb2Z0ZW5pbmcgb2YgdGhlIG5hdHVyZSB3aGljaCBpcyBwcm9kdWNlZCBieSBjdWx0dXJlIGFuZCBkaXNjaXBsaW5lLCB0aGUgbmF0dXJlIGJlaW5nIGluZHVjZWQgYnkgY3VsdHVyZSB0byB0YWtlIG9uIG1vZGVyYXRpb24gYW5kIGNhc3Qgb2ZmIGV4Y2Vzcy4gSXQgaXMgcGVyZmVjdGx5IHRydWUsIGhvd2V2ZXIsIHRoYXQgaW4gdGhvc2UgZGF5cyBSb21lIGhlbGQgaW4gaGlnaGVzdCBob25vdXIgdGhhdCBwaGFzZSBvZiB2aXJ0dWUgd2hpY2ggY29uY2VybnMgaXRzZWxmIHdpdGggd2FybGlrZSBhbmQgbWlsaXRhcnkgYWNoaWV2ZW1lbnRzLCBhbmQgZXZpZGVuY2Ugb2YgdGhpcyBtYXkgYmUgZm91bmQgaW4gdGhlIG9ubHkgTGF0aW4gd29yZCBmb3IgdmlydHVlLCB3aGljaCBzaWduaWZpZXMgcmVhbGx5IDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+bWFubHkgdmFsb3VyPC9lbXBoPjsgdGhleSBtYWRlIHZhbG91ciwgYSBzcGVjaWZpYyBmb3JtIG9mIHZpcnR1ZSwgc3RhbmQgZm9yIHZpcnR1ZSBpbiBnZW5lcmFsLgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUFuZCBzbyBNYXJjaXVzLCB3aG8gd2FzIGJ5IG5hdHVyZSBleGNlZWRpbmdseSBmb25kIG9mIHdhcmxpa2UgZmVhdHMsIGJlZ2FuIGF0IG9uY2UsIGZyb20gaGlzIHZlcnkgYm95aG9vZCwgdG8gaGFuZGxlIGFybXMuIEFuZCBzaW5jZSBoZSB0aG91Z2h0IHRoYXQgYWR2ZW50aXRpb3VzIHdlYXBvbnMgd2VyZSBvZiBsaXR0bGUgYXZhaWwgdG8gc3VjaCBhcyBkaWQgbm90IGhhdmUgdGhlaXIgbmF0dXJhbCBhbmQgbmF0aXZlIGFybW91ciBkZXZlbG9wZWQgYW5kIHByZXBhcmVkIGZvciBzZXJ2aWNlLCBoZSBzbyBwcmFjdGlzZWQgaGltc2VsZiBpbiBldmVyeSBzb3J0IG9mIGNvbWJhdCB0aGF0IGhlIHdhcyBub3Qgb25seSBuaW1ibGUgb2YgZm9vdCwgYnV0IGhhZCBhbHNvIHN1Y2ggYSB3ZWlnaHQgaW4gZ3JhcHBsaW5ncyBhbmQgd3Jlc3RsaW5ncyB0aGF0IGFuIGVuZW15IGZvdW5kIGl0IGhhcmQgdG8gZXh0cmljYXRlIGhpbXNlbGYuIEF0IGFueSByYXRlLCB0aG9zZSB3aG8gZnJvbSB0aW1lIHRvIHRpbWUgY29udGVuZGVkIHdpdGggaGltIGluIGZlYXRzIG9mIGNvdXJhZ2UgYW5kIHZhbG91ciwgbGFpZCB0aGUgYmxhbWUgZm9yIHRoZWlyIGluZmVyaW9yaXR5IHVwb24gaGlzIHN0cmVuZ3RoIG9mIGJvZHksIHdoaWNoIHdhcyBpbmZsZXhpYmxlIGFuZCBzaHJhbmsgZnJvbSBubyBoYXJkc2hpcC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBtYWRlIGhpcyBmaXJzdCBjYW1wYWlnbiB3aGlsZSB5ZXQgYSBzdHJpcGxpbmcsIHdoZW4gVGFycXVpbiwgd2hvIGhhZCBiZWVuIGtpbmcgb2YgUm9tZSwgYW5kIHRoZW4gaGFkIGJlZW4gZXhwZWxsZWQsIGFmdGVyIG1hbnkgdW5zdWNjZXNzZnVsIGJhdHRsZXMsIHN0YWtlZCBoaXMgYWxsLCBhcyBpdCB3ZXJlLCB1cG9uIGEgZmluYWwgdGhyb3cuIE1vc3Qgb2YgdGhlIHBlb3BsZSBvZiBMYXRpdW0gYW5kIG1hbnkgYWxzbyBvZiB0aGUgb3RoZXIgcGVvcGxlcyBvZiBJdGFseSB3ZXJlIGFzc2lzdGluZyBoaW0gYW5kIG1hcmNoaW5nIHdpdGggaGltIHVwb24gUm9tZSwgdG8gcmVpbnN0YXRlIGhpbSB0aGVyZSwgbm90IHNvIG11Y2ggZnJvbSBhIGRlc2lyZSB0byBncmF0aWZ5IGhpbSwgYXMgYmVjYXVzZSBmZWFyIGFuZCBlbnZ5IGxlZCB0aGVtIHRvIHRyeSB0byBvdmVydGhyb3cgdGhlIGdyb3dpbmcgcG93ZXIgb2YgdGhlIFJvbWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGVuc3VpbmcgYmF0dGxlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkJ5IExha2UgUmVnaWxsdXMsIDQ5OCAoPykgQi5DLjwvbm90ZT4gd2hpY2ggbG9uZyBmYXZvdXJlZCBub3cgdGhpcyBzaWRlIGFuZCBub3cgdGhhdCwgTWFyY2l1cywgd2hvIHdhcyBmaWdodGluZyBzdHVyZGlseSB1bmRlciB0aGUgZXllcyBvZiB0aGUgZGljdGF0b3IsIHNhdyBhIFJvbWFuIHNvbGRpZXIgc3RydWNrIGRvd24gbmVhciBieS4gSGUgcmFuIHRvIGhpbSBhdCBvbmNlLCBzdG9vZCBpbiBmcm9udCBvZiBoaW0sIGRlZmVuZGVkIGhpbSwgYW5kIHNsZXcgaGlzIGFzc2FpbGFudC4gQWNjb3JkaW5nbHksIGFmdGVyIHRoZSBSb21hbiBnZW5lcmFsIGhhZCB3b24gdGhlIGRheSwgaGUgY3Jvd25lZCBNYXJjaXVzLCBhbW9uZyB0aGUgZmlyc3QsIHdpdGggYSBnYXJsYW5kIG9mIG9hayBsZWF2ZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBtYWRlIGhpcyBmaXJzdCBjYW1wYWlnbiB3aGlsZSB5ZXQgYSBzdHJpcGxpbmcsIHdoZW4gVGFycXVpbiwgd2hvIGhhZCBiZWVuIGtpbmcgb2YgUm9tZSwgYW5kIHRoZW4gaGFkIGJlZW4gZXhwZWxsZWQsIGFmdGVyIG1hbnkgdW5zdWNjZXNzZnVsIGJhdHRsZXMsIHN0YWtlZCBoaXMgYWxsLCBhcyBpdCB3ZXJlLCB1cG9uIGEgZmluYWwgdGhyb3cuIE1vc3Qgb2YgdGhlIHBlb3BsZSBvZiBMYXRpdW0gYW5kIG1hbnkgYWxzbyBvZiB0aGUgb3RoZXIgcGVvcGxlcyBvZiBJdGFseSB3ZXJlIGFzc2lzdGluZyBoaW0gYW5kIG1hcmNoaW5nIHdpdGggaGltIHVwb24gUm9tZSwgdG8gcmVpbnN0YXRlIGhpbSB0aGVyZSwgbm90IHNvIG11Y2ggZnJvbSBhIGRlc2lyZSB0byBncmF0aWZ5IGhpbSwgYXMgYmVjYXVzZSBmZWFyIGFuZCBlbnZ5IGxlZCB0aGVtIHRvIHRyeSB0byBvdmVydGhyb3cgdGhlIGdyb3dpbmcgcG93ZXIgb2YgdGhlIFJvbWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBlbnN1aW5nIGJhdHRsZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkJ5IExha2UgUmVnaWxsdXMsIDQ5OCAoPykgQi5DLjwvbm90ZT4gd2hpY2ggbG9uZyBmYXZvdXJlZCBub3cgdGhpcyBzaWRlIGFuZCBub3cgdGhhdCwgTWFyY2l1cywgd2hvIHdhcyBmaWdodGluZyBzdHVyZGlseSB1bmRlciB0aGUgZXllcyBvZiB0aGUgZGljdGF0b3IsIHNhdyBhIFJvbWFuIHNvbGRpZXIgc3RydWNrIGRvd24gbmVhciBieS4gSGUgcmFuIHRvIGhpbSBhdCBvbmNlLCBzdG9vZCBpbiBmcm9udCBvZiBoaW0sIGRlZmVuZGVkIGhpbSwgYW5kIHNsZXcgaGlzIGFzc2FpbGFudC4gQWNjb3JkaW5nbHksIGFmdGVyIHRoZSBSb21hbiBnZW5lcmFsIGhhZCB3b24gdGhlIGRheSwgaGUgY3Jvd25lZCBNYXJjaXVzLCBhbW9uZyB0aGUgZmlyc3QsIHdpdGggYSBnYXJsYW5kIG9mIG9hayBsZWF2ZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIGNpdmljIGNyb3duIHdoaWNoIHRoZSBsYXcgYmVzdG93cyB1cG9uIG9uZSB3aG8gaGFzIHNhdmVkIHRoZSBsaWZlIG9mIGEgZmVsbG93LWNpdGl6ZW4gaW4gYmF0dGxlLCBlaXRoZXIgYmVjYXVzZSB0aGUgb2FrIHdhcyBoZWxkIGluIHNwZWNpYWwgaG9ub3VyIGZvciB0aGUgc2FrZSBvZiB0aGUgQXJjYWRpYW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVhcmx5IGNvbG9uaXN0cyBvZiBSb21lLCB1bmRlciBFdmFuZGVyLjwvbm90ZT4gd2hvIHdlcmUgY2FsbGVkIGFjb3JuLWVhdGVycyBpbiBhbiBvcmFjbGUgb2YgQXBvbGxvOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSGR0LiAxLjY2IiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIGkuIDY2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBvciBiZWNhdXNlIHRoZXkgY291bGQgc3BlZWRpbHkgZmluZCBhbiBhYnVuZGFuY2Ugb2Ygb2FrIHdoZXJldmVyIHRoZXkgZm91Z2h0OyBvciBiZWNhdXNlIGl0IHdhcyB0aG91Z2h0IHRoYXQgdGhlIGdhcmxhbmQgb2Ygb2FrIGxlYXZlcywgYmVpbmcgc2FjcmVkIHRvIEp1cGl0ZXIsIHRoZSBjaXR5J3MgZ3VhcmRpYW4sIHdhcyBmaXR0aW5nbHkgYmVzdG93ZWQgdXBvbiBvbmUgd2hvIHNhdmVkIHRoZSBsaWZlIG9mIGEgY2l0aXplbi4gVGhlIG9haywgbW9yZW92ZXIsIGhhcyB0aGUgbW9zdCBiZWF1dGlmdWwgZnJ1aXQgb2YgYWxsIHdpbGQgdHJlZXMsIGFuZCBpcyB0aGUgc3R1cmRpZXN0IG9mIGFsbCB0cmVlcyB1bmRlciBjdWx0aXZhdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SXRzIGFjb3JuIHVzZWQgdG8gYmUgZm9vZCwgYW5kIHRoZSBob25leSBmb3VuZCBpbiBpdCB1c2VkIHRvIGJlIGRyaW5rPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNoYXBlIG9mIG1lYWQuPC9ub3RlPiBmb3IgbWVuOyBhbmQgaXQgZnVybmlzaGVkIHRoZW0gd2l0aCB0aGUgZmxlc2ggb2YgbW9zdCBncmF6aW5nIGNyZWF0dXJlcyBhbmQgYmlyZHMsIHNpbmNlIGl0IGJvcmUgdGhlIG1pc3RsZXRvZSwgZnJvbSB3aGljaCB0aGV5IG1hZGUgYmlyZC1saW1lIGZvciBzbmFyZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIGNpdmljIGNyb3duIHdoaWNoIHRoZSBsYXcgYmVzdG93cyB1cG9uIG9uZSB3aG8gaGFzIHNhdmVkIHRoZSBsaWZlIG9mIGEgZmVsbG93LWNpdGl6ZW4gaW4gYmF0dGxlLCBlaXRoZXIgYmVjYXVzZSB0aGUgb2FrIHdhcyBoZWxkIGluIHNwZWNpYWwgaG9ub3VyIGZvciB0aGUgc2FrZSBvZiB0aGUgQXJjYWRpYW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RWFybHkgY29sb25pc3RzIG9mIFJvbWUsIHVuZGVyIEV2YW5kZXIuPC9ub3RlPiB3aG8gd2VyZSBjYWxsZWQgYWNvcm4tZWF0ZXJzIGluIGFuIG9yYWNsZSBvZiBBcG9sbG87PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiAxLjY2IiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIGkuIDY2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBvciBiZWNhdXNlIHRoZXkgY291bGQgc3BlZWRpbHkgZmluZCBhbiBhYnVuZGFuY2Ugb2Ygb2FrIHdoZXJldmVyIHRoZXkgZm91Z2h0OyBvciBiZWNhdXNlIGl0IHdhcyB0aG91Z2h0IHRoYXQgdGhlIGdhcmxhbmQgb2Ygb2FrIGxlYXZlcywgYmVpbmcgc2FjcmVkIHRvIEp1cGl0ZXIsIHRoZSBjaXR5J3MgZ3VhcmRpYW4sIHdhcyBmaXR0aW5nbHkgYmVzdG93ZWQgdXBvbiBvbmUgd2hvIHNhdmVkIHRoZSBsaWZlIG9mIGEgY2l0aXplbi4gVGhlIG9haywgbW9yZW92ZXIsIGhhcyB0aGUgbW9zdCBiZWF1dGlmdWwgZnJ1aXQgb2YgYWxsIHdpbGQgdHJlZXMsIGFuZCBpcyB0aGUgc3R1cmRpZXN0IG9mIGFsbCB0cmVlcyB1bmRlciBjdWx0aXZhdGlvbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDEuNjYiIHZhbGlkPSJ5ZXMiPkhlcm9kb3R1cywgaS4gNjYuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0cyBhY29ybiB1c2VkIHRvIGJlIGZvb2QsIGFuZCB0aGUgaG9uZXkgZm91bmQgaW4gaXQgdXNlZCB0byBiZSBkcmluazxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNoYXBlIG9mIG1lYWQuPC9ub3RlPiBmb3IgbWVuOyBhbmQgaXQgZnVybmlzaGVkIHRoZW0gd2l0aCB0aGUgZmxlc2ggb2YgbW9zdCBncmF6aW5nIGNyZWF0dXJlcyBhbmQgYmlyZHMsIHNpbmNlIGl0IGJvcmUgdGhlIG1pc3RsZXRvZSwgZnJvbSB3aGljaCB0aGV5IG1hZGUgYmlyZC1saW1lIGZvciBzbmFyZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gdGhlIGJhdHRsZSBvZiB3aGljaCBJIHdhcyBzcGVha2luZywgaXQgaXMgc2FpZCB0aGF0IENhc3RvciBhbmQgUG9sbHV4IGFwcGVhcmVkLCBhbmQgdGhhdCBpbW1lZGlhdGVseSBhZnRlciB0aGUgYmF0dGxlIHRoZXkgd2VyZSBzZWVuLCB0aGVpciBob3JzZXMgYWxsIGEtZHJpcCB3aXRoIHN3ZWF0LCBpbiB0aGUgZm9ydW0sIGFubm91bmNpbmcgdGhlIHZpY3RvcnksIGJ5IHRoZSBmb3VudGFpbiB3aGVyZSB0aGVpciB0ZW1wbGUgbm93IHN0YW5kcy4KCQkJCVRoZXJlZm9yZSB0aGUgZGF5IG9uIHdoaWNoIHRoaXMgdmljdG9yeSB3YXMgd29uLCB0aGUgSWRlcyBvZiBKdWx5LCB3YXMgY29uc2VjcmF0ZWQgdG8gdGhlIERpb3NjdXJpLgoJCQk8L3A+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd291bGQgc2VlbSB0aGF0IHdoZW4gYSB5b3VuZyBtYW4ncyBhbWJpdGlvbiBpcyBubyBpbnRlZ3JhbCBwYXJ0IG9mIGhpcyBuYXR1cmUsIGl0IGlzIGFwdCB0byBiZSBxdWVuY2hlZCBieSBhbiBob25vdXJhYmxlIGRpc3RpbmN0aW9uIHdoaWNoIGlzIGF0dGFpbmVkIHRvbyBlYXJseSBpbiBsaWZlOyBoaXMgdGhpcnN0IGFuZCBmYXN0aWRpb3VzIGFwcGV0aXRlIGFyZSBzcGVlZGlseSBzYXRpc2ZpZWQuIEJ1dCBzZXJpb3VzIGFuZCBmaXJtIHNwaXJpdHMgYXJlIHN0aW11bGF0ZWQgYnkgdGhlIGhvbm91cnMgdGhleSByZWNlaXZlLCBhbmQgZ2xvdyBicmlnaHRseSwgYXMgaWYgcm91c2VkIGJ5IGEgbWlnaHR5IHdpbmQgdG8gYWNoaWV2ZSB0aGUgbWFuaWZlc3QgZ29vZC4gVGhleSBkbyBub3QgZmVlbCB0aGF0IHRoZXkgYXJlIHJlY2VpdmluZyBhIHJld2FyZCBmb3Igd2hhdCB0aGV5IGhhdmUgZG9uZSwgYnV0IHJhdGhlciB0aGF0IHRoZXkgYXJlIGdpdmluZyBwbGVkZ2VzIG9mIHdoYXQgdGhleSB3aWxsIGRvLCBhbmQgdGhleSBhcmUgYXNoYW1lZCB0byBmYWxsIGJlaGluZCB0aGVpciByZXB1dGF0aW9uIGluc3RlYWQgb2Ygc3VycGFzc2luZyBpdCBieSB0aGVpciBhY3R1YWwgZXhwbG9pdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBpbiB0aGlzIHNwaXJpdCB0aGF0IE1hcmNpdXMgdmllZCB3aXRoIGhpbXNlbGYgaW4gbWFubHkgdmFsb3VyLCBhbmQgYmVpbmcgZXZlciBkZXNpcm91cyBvZiBmcmVzaCBhY2hpZXZlbWVudCwgaGUgZm9sbG93ZWQgb25lIGV4cGxvaXQgd2l0aCBhbm90aGVyLCBhbmQgaGVhcGVkIHNwb2lscyB1cG9uIHNwb2lscywgc28gdGhhdCBoaXMgbGF0ZXIgY29tbWFuZGVycyB3ZXJlIGFsd2F5cyBzdHJpdmluZyB3aXRoIHRoZWlyIHByZWRlY2Vzc29ycyBpbiB0aGVpciBlZmZvcnRzIHRvIGRvIGhpbSBob25vdXIsIGFuZCB0byBzdXJwYXNzIGluIHRoZWlyIHRlc3RpbW9uaWFscyB0byBoaXMgcHJvd2Vzcy4gTWFueSBpbmRlZWQgd2VyZSB0aGUgd2FycyBhbmQgY29uZmxpY3RzIHdoaWNoIHRoZSBSb21hbnMgd2FnZWQgaW4gdGhvc2UgZGF5cywgYW5kIGZyb20gbm9uZSBkaWQgaGUgcmV0dXJuIHdpdGhvdXQgbGF1cmVscyBhbmQgcmV3YXJkcyBvZiB2YWxvdXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3b3VsZCBzZWVtIHRoYXQgd2hlbiBhIHlvdW5nIG1hbidzIGFtYml0aW9uIGlzIG5vIGludGVncmFsIHBhcnQgb2YgaGlzIG5hdHVyZSwgaXQgaXMgYXB0IHRvIGJlIHF1ZW5jaGVkIGJ5IGFuIGhvbm91cmFibGUgZGlzdGluY3Rpb24gd2hpY2ggaXMgYXR0YWluZWQgdG9vIGVhcmx5IGluIGxpZmU7IGhpcyB0aGlyc3QgYW5kIGZhc3RpZGlvdXMgYXBwZXRpdGUgYXJlIHNwZWVkaWx5IHNhdGlzZmllZC4gQnV0IHNlcmlvdXMgYW5kIGZpcm0gc3Bpcml0cyBhcmUgc3RpbXVsYXRlZCBieSB0aGUgaG9ub3VycyB0aGV5IHJlY2VpdmUsIGFuZCBnbG93IGJyaWdodGx5LCBhcyBpZiByb3VzZWQgYnkgYSBtaWdodHkgd2luZCB0byBhY2hpZXZlIHRoZSBtYW5pZmVzdCBnb29kLiBUaGV5IGRvIG5vdCBmZWVsIHRoYXQgdGhleSBhcmUgcmVjZWl2aW5nIGEgcmV3YXJkIGZvciB3aGF0IHRoZXkgaGF2ZSBkb25lLCBidXQgcmF0aGVyIHRoYXQgdGhleSBhcmUgZ2l2aW5nIHBsZWRnZXMgb2Ygd2hhdCB0aGV5IHdpbGwgZG8sIGFuZCB0aGV5IGFyZSBhc2hhbWVkIHRvIGZhbGwgYmVoaW5kIHRoZWlyIHJlcHV0YXRpb24gaW5zdGVhZCBvZiBzdXJwYXNzaW5nIGl0IGJ5IHRoZWlyIGFjdHVhbCBleHBsb2l0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBpbiB0aGlzIHNwaXJpdCB0aGF0IE1hcmNpdXMgdmllZCB3aXRoIGhpbXNlbGYgaW4gbWFubHkgdmFsb3VyLCBhbmQgYmVpbmcgZXZlciBkZXNpcm91cyBvZiBmcmVzaCBhY2hpZXZlbWVudCwgaGUgZm9sbG93ZWQgb25lIGV4cGxvaXQgd2l0aCBhbm90aGVyLCBhbmQgaGVhcGVkIHNwb2lscyB1cG9uIHNwb2lscywgc28gdGhhdCBoaXMgbGF0ZXIgY29tbWFuZGVycyB3ZXJlIGFsd2F5cyBzdHJpdmluZyB3aXRoIHRoZWlyIHByZWRlY2Vzc29ycyBpbiB0aGVpciBlZmZvcnRzIHRvIGRvIGhpbSBob25vdXIsIGFuZCB0byBzdXJwYXNzIGluIHRoZWlyIHRlc3RpbW9uaWFscyB0byBoaXMgcHJvd2Vzcy4gTWFueSBpbmRlZWQgd2VyZSB0aGUgd2FycyBhbmQgY29uZmxpY3RzIHdoaWNoIHRoZSBSb21hbnMgd2FnZWQgaW4gdGhvc2UgZGF5cywgYW5kIGZyb20gbm9uZSBkaWQgaGUgcmV0dXJuIHdpdGhvdXQgbGF1cmVscyBhbmQgcmV3YXJkcyBvZiB2YWxvdXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVyZWFzIG90aGVyIG1lbiBmb3VuZCBpbiBnbG9yeSB0aGUgY2hpZWYgZW5kIG9mIHZhbG91ciwgaGUgZm91bmQgdGhlIGNoaWVmIGVuZCBvZiBnbG9yeSBpbiBoaXMgbW90aGVyJ3MgZ2xhZG5lc3MuIFRoYXQgc2hlIHNob3VsZCBoZWFyIGhpbSBwcmFpc2VkIGFuZCBzZWUgaGltIGNyb3duZWQgYW5kIGVtYnJhY2UgaGltIHdpdGggdGVhcnMgb2Ygam95LCB0aGlzIHdhcyB3aGF0IGdhdmUgaGltLCBhcyBoZSB0aG91Z2h0LCB0aGUgaGlnaGVzdCBob25vdXIgYW5kIGZlbGljaXR5LiBBbmQgaXQgd2FzIGRvdWJ0bGVzcyB0aGlzIGZlZWxpbmcgd2hpY2ggRXBhbWlub25kYXMgYWxzbyBpcyBzYWlkIHRvIGhhdmUgY29uZmVzc2VkLCBpbiBjb25zaWRlcmluZyBpdCBoaXMgZ3JlYXRlc3QgZ29vZCBmb3J0dW5lIHRoYXQgaGlzIGZhdGhlciBhbmQgbW90aGVyIGxpdmVkIHRvIGtub3cgb2YgaGlzIGdlbmVyYWxzaGlwIGFuZCB2aWN0b3J5IGF0IExldWN0cmEuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSB3YXMgc28gYmxlc3NlZCBhcyB0byBoYXZlIGJvdGggaGlzIHBhcmVudHMgc2hhcmUgaW4gaGlzIHBsZWFzdXJlIGFuZCBzdWNjZXNzLCB3aGVyZWFzIE1hcmNpdXMsIHdobyB0aG91Z2h0IGhlIG93ZWQgaGlzIG1vdGhlciB0aGUgZmlsaWFsIGdyYXRpdHVkZSBhbHNvIHdoaWNoIHdvdWxkIGhhdmUgYmVlbiBkdWUgdG8gaGlzIGZhdGhlciwgY291bGQgbm90IGdldCBoaXMgZmlsbCBvZiBnbGFkZGVuaW5nIGFuZCBob25vdXJpbmcgVm9sdW1uaWEsIG5heSwgaGUgZXZlbiBtYXJyaWVkIGFjY29yZGluZyB0byBoZXIgd2lzaCBhbmQgcmVxdWVzdCwgYW5kIGNvbnRpbnVlZCB0byBsaXZlIGluIHRoZSBzYW1lIGhvdXNlIHdpdGggaGlzIG1vdGhlciBhZnRlciBjaGlsZHJlbiB3ZXJlIGJvcm4gdG8gaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVyZWFzIG90aGVyIG1lbiBmb3VuZCBpbiBnbG9yeSB0aGUgY2hpZWYgZW5kIG9mIHZhbG91ciwgaGUgZm91bmQgdGhlIGNoaWVmIGVuZCBvZiBnbG9yeSBpbiBoaXMgbW90aGVyJ3MgZ2xhZG5lc3MuIFRoYXQgc2hlIHNob3VsZCBoZWFyIGhpbSBwcmFpc2VkIGFuZCBzZWUgaGltIGNyb3duZWQgYW5kIGVtYnJhY2UgaGltIHdpdGggdGVhcnMgb2Ygam95LCB0aGlzIHdhcyB3aGF0IGdhdmUgaGltLCBhcyBoZSB0aG91Z2h0LCB0aGUgaGlnaGVzdCBob25vdXIgYW5kIGZlbGljaXR5LiBBbmQgaXQgd2FzIGRvdWJ0bGVzcyB0aGlzIGZlZWxpbmcgd2hpY2ggRXBhbWlub25kYXMgYWxzbyBpcyBzYWlkIHRvIGhhdmUgY29uZmVzc2VkLCBpbiBjb25zaWRlcmluZyBpdCBoaXMgZ3JlYXRlc3QgZ29vZCBmb3J0dW5lIHRoYXQgaGlzIGZhdGhlciBhbmQgbW90aGVyIGxpdmVkIHRvIGtub3cgb2YgaGlzIGdlbmVyYWxzaGlwIGFuZCB2aWN0b3J5IGF0IExldWN0cmEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSB3YXMgc28gYmxlc3NlZCBhcyB0byBoYXZlIGJvdGggaGlzIHBhcmVudHMgc2hhcmUgaW4gaGlzIHBsZWFzdXJlIGFuZCBzdWNjZXNzLCB3aGVyZWFzIE1hcmNpdXMsIHdobyB0aG91Z2h0IGhlIG93ZWQgaGlzIG1vdGhlciB0aGUgZmlsaWFsIGdyYXRpdHVkZSBhbHNvIHdoaWNoIHdvdWxkIGhhdmUgYmVlbiBkdWUgdG8gaGlzIGZhdGhlciwgY291bGQgbm90IGdldCBoaXMgZmlsbCBvZiBnbGFkZGVuaW5nIGFuZCBob25vdXJpbmcgVm9sdW1uaWEsIG5heSwgaGUgZXZlbiBtYXJyaWVkIGFjY29yZGluZyB0byBoZXIgd2lzaCBhbmQgcmVxdWVzdCwgYW5kIGNvbnRpbnVlZCB0byBsaXZlIGluIHRoZSBzYW1lIGhvdXNlIHdpdGggaGlzIG1vdGhlciBhZnRlciBjaGlsZHJlbiB3ZXJlIGJvcm4gdG8gaGltLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXB1dGF0aW9uIGFuZCBpbmZsdWVuY2UgcHJvY3VyZWQgYnkgaGlzIHZhbG91ciB3ZXJlIGFscmVhZHkgZ3JlYXQgaW4gdGhlIGNpdHksIHdoZW4gdGhlIHNlbmF0ZSwgdGFraW5nIHRoZSBwYXJ0IG9mIHRoZSB3ZWFsdGh5IGNpdGl6ZW5zLCBiZWdhbiB0byBiZSBhdCB2YXJpYW5jZSB3aXRoIHRoZSBjb21tb24gcGVvcGxlLCB3aG8gdGhvdWdodCB0aGV5IHN1ZmZlcmVkIG1hbnkgZ3JpZXZvdXMgaWxscyBhdCB0aGUgaGFuZHMgb2YgdGhlIG1vbmV5LWxlbmRlcnMuIEZvciB0aG9zZSBvZiB0aGVtIHRoYXQgd2VyZSBwb3NzZXNzZWQgb2YgbW9kZXJhdGUgbWVhbnMgd2VyZSBzdHJpcHBlZCBvZiBhbGwgdGhleSBoYWQgYnkgbWVhbnMgb2YgcGxlZGdlcyBhbmQgc2FsZXMsIHdoaWxlIHRob3NlIHdobyB3ZXJlIGFsdG9nZXRoZXIgd2l0aG91dCByZXNvdXJjZXMgd2VyZSBsZWQgYXdheSBpbiBwZXJzb24gYW5kIHB1dCBpbiBwcmlzb24sIGFsdGhvdWdoIHRoZWlyIGJvZGllcyBib3JlIG1hbnkgbWFya3Mgb2Ygd291bmRzIHJlY2VpdmVkIGFuZCBoYXJkc2hpcHMgdW5kZXJnb25lIGluIGNhbXBhaWducyBmb3IgdGhlIGRlZmVuY2Ugb2YgdGhlaXIgY291bnRyeS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGxhc3Qgb2YgdGhlc2UgaGFkIGJlZW4gYWdhaW5zdCB0aGUgU2FiaW5lcywgYW5kIHRoZXkgaGFkIHVuZGVydGFrZW4gaXQgdXBvbiBhIHByb21pc2Ugb2YgdGhlaXIgd2VhbHRoaWVzdCBjcmVkaXRvcnMgdG8gZGVhbCBtb2RlcmF0ZWx5IHdpdGggdGhlbSwgYW5kIGFmdGVyIGEgdm90ZSBvZiB0aGUgc2VuYXRlIHRoYXQgTWFyY3VzIFZhbGVyaXVzLCB0aGUgY29uc3VsLCBzaG91bGQgZ3VhcmFudGVlIHRoZSBwcm9taXNlLiBCdXQgYWZ0ZXIgdGhleSBoYWQgZm91Z2h0IHplYWxvdXNseSBpbiB0aGF0IGJhdHRsZSBhbHNvLCBhbmQgaGFkIGNvbnF1ZXJlZCB0aGUgZW5lbXksIG5vIGNvbnNpZGVyYXRpb24gd2FzIHNob3duIHRoZW0gYnkgdGhlaXIgY3JlZGl0b3JzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlIHNlbmF0ZSBkaWQgbm90IGV2ZW4gcHJldGVuZCB0byByZW1lbWJlciBpdHMgYWdyZWVtZW50cywgYnV0IGFnYWluIHN1ZmZlcmVkIHRoZW0gdG8gYmUgc2VpemVkIGluIHBsZWRnZSBvZiBwYXltZW50cyBhbmQgaGFsZWQgYXdheSB0byBwcmlzb24uIFRoZW4gdGhlcmUgd2VyZSB0dW11bHRzIGFuZCBkaXNvcmRlcmx5IGdhdGhlcmluZ3MgaW4gdGhlIGNpdHksIGFuZCB0aGUgZW5lbXksIG5vdCB1bmF3YXJlIG9mIHRoZSBwb3B1bGFyIGNvbmZ1c2lvbiwgYnVyc3QgaW4gYW5kIHJhdmFnZWQgdGhlIGNvdW50cnksIGFuZCB3aGVuIHRoZSBjb25zdWxzIHN1bW1vbmVkIHRob3NlIG9mIG1pbGl0YXJ5IGFnZSB0byBhcm1zLCBubyBvbmUgcmVzcG9uZGVkLiBJbiB0aGlzIGNyaXNpcywgdGhlIG9waW5pb25zIG9mIHRob3NlIGluIGF1dGhvcml0eSB3ZXJlIGFnYWluIGF0IHZhcmlhbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIHRob3VnaHQgdGhhdCBjb25jZXNzaW9ucyBzaG91bGQgYmUgbWFkZSB0byB0aGUgcGxlYmVpYW5zLCBhbmQgdGhlIGV4Y2Vzc2l2ZSByaWdvciBvZiB0aGUgbGF3IHJlbGF4ZWQ7IGJ1dCBvdGhlcnMgb3Bwb3NlZCB0aGlzLCBhbmQgYW1vbmcgdGhlbSB3YXMgTWFyY2l1cy4gSGUgZGlkIG5vdCByZWdhcmQgdGhlIGZpbmFuY2lhbCBkaWZmaWN1bHRpZXMgYXMgdGhlIG1haW4gcG9pbnQgYXQgaXNzdWUsIGFuZCBleGhvcnRlZCB0aGUgbWFnaXN0cmF0ZXMgdG8gYmUgd2lzZSBlbm91Z2ggdG8gY2hlY2sgYW5kIHF1ZWxsIHRoaXMgaW5jaXBpZW50IGF0dGVtcHQgYXQgYm9sZCBvdXRyYWdlIG9uIHRoZSBwYXJ0IG9mIGEgcG9wdWxhY2UgaW4gcmV2b2x0IGFnYWluc3QgdGhlIGxhd3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVwdXRhdGlvbiBhbmQgaW5mbHVlbmNlIHByb2N1cmVkIGJ5IGhpcyB2YWxvdXIgd2VyZSBhbHJlYWR5IGdyZWF0IGluIHRoZSBjaXR5LCB3aGVuIHRoZSBzZW5hdGUsIHRha2luZyB0aGUgcGFydCBvZiB0aGUgd2VhbHRoeSBjaXRpemVucywgYmVnYW4gdG8gYmUgYXQgdmFyaWFuY2Ugd2l0aCB0aGUgY29tbW9uIHBlb3BsZSwgd2hvIHRob3VnaHQgdGhleSBzdWZmZXJlZCBtYW55IGdyaWV2b3VzIGlsbHMgYXQgdGhlIGhhbmRzIG9mIHRoZSBtb25leS1sZW5kZXJzLiBGb3IgdGhvc2Ugb2YgdGhlbSB0aGF0IHdlcmUgcG9zc2Vzc2VkIG9mIG1vZGVyYXRlIG1lYW5zIHdlcmUgc3RyaXBwZWQgb2YgYWxsIHRoZXkgaGFkIGJ5IG1lYW5zIG9mIHBsZWRnZXMgYW5kIHNhbGVzLCB3aGlsZSB0aG9zZSB3aG8gd2VyZSBhbHRvZ2V0aGVyIHdpdGhvdXQgcmVzb3VyY2VzIHdlcmUgbGVkIGF3YXkgaW4gcGVyc29uIGFuZCBwdXQgaW4gcHJpc29uLCBhbHRob3VnaCB0aGVpciBib2RpZXMgYm9yZSBtYW55IG1hcmtzIG9mIHdvdW5kcyByZWNlaXZlZCBhbmQgaGFyZHNoaXBzIHVuZGVyZ29uZSBpbiBjYW1wYWlnbnMgZm9yIHRoZSBkZWZlbmNlIG9mIHRoZWlyIGNvdW50cnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsYXN0IG9mIHRoZXNlIGhhZCBiZWVuIGFnYWluc3QgdGhlIFNhYmluZXMsIGFuZCB0aGV5IGhhZCB1bmRlcnRha2VuIGl0IHVwb24gYSBwcm9taXNlIG9mIHRoZWlyIHdlYWx0aGllc3QgY3JlZGl0b3JzIHRvIGRlYWwgbW9kZXJhdGVseSB3aXRoIHRoZW0sIGFuZCBhZnRlciBhIHZvdGUgb2YgdGhlIHNlbmF0ZSB0aGF0IE1hcmN1cyBWYWxlcml1cywgdGhlIGNvbnN1bCwgc2hvdWxkIGd1YXJhbnRlZSB0aGUgcHJvbWlzZS4gQnV0IGFmdGVyIHRoZXkgaGFkIGZvdWdodCB6ZWFsb3VzbHkgaW4gdGhhdCBiYXR0bGUgYWxzbywgYW5kIGhhZCBjb25xdWVyZWQgdGhlIGVuZW15LCBubyBjb25zaWRlcmF0aW9uIHdhcyBzaG93biB0aGVtIGJ5IHRoZWlyIGNyZWRpdG9ycywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGUgc2VuYXRlIGRpZCBub3QgZXZlbiBwcmV0ZW5kIHRvIHJlbWVtYmVyIGl0cyBhZ3JlZW1lbnRzLCBidXQgYWdhaW4gc3VmZmVyZWQgdGhlbSB0byBiZSBzZWl6ZWQgaW4gcGxlZGdlIG9mIHBheW1lbnRzIGFuZCBoYWxlZCBhd2F5IHRvIHByaXNvbi4gVGhlbiB0aGVyZSB3ZXJlIHR1bXVsdHMgYW5kIGRpc29yZGVybHkgZ2F0aGVyaW5ncyBpbiB0aGUgY2l0eSwgYW5kIHRoZSBlbmVteSwgbm90IHVuYXdhcmUgb2YgdGhlIHBvcHVsYXIgY29uZnVzaW9uLCBidXJzdCBpbiBhbmQgcmF2YWdlZCB0aGUgY291bnRyeSwgYW5kIHdoZW4gdGhlIGNvbnN1bHMgc3VtbW9uZWQgdGhvc2Ugb2YgbWlsaXRhcnkgYWdlIHRvIGFybXMsIG5vIG9uZSByZXNwb25kZWQuIEluIHRoaXMgY3Jpc2lzLCB0aGUgb3BpbmlvbnMgb2YgdGhvc2UgaW4gYXV0aG9yaXR5IHdlcmUgYWdhaW4gYXQgdmFyaWFuY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgdGhvdWdodCB0aGF0IGNvbmNlc3Npb25zIHNob3VsZCBiZSBtYWRlIHRvIHRoZSBwbGViZWlhbnMsIGFuZCB0aGUgZXhjZXNzaXZlIHJpZ29yIG9mIHRoZSBsYXcgcmVsYXhlZDsgYnV0IG90aGVycyBvcHBvc2VkIHRoaXMsIGFuZCBhbW9uZyB0aGVtIHdhcyBNYXJjaXVzLiBIZSBkaWQgbm90IHJlZ2FyZCB0aGUgZmluYW5jaWFsIGRpZmZpY3VsdGllcyBhcyB0aGUgbWFpbiBwb2ludCBhdCBpc3N1ZSwgYW5kIGV4aG9ydGVkIHRoZSBtYWdpc3RyYXRlcyB0byBiZSB3aXNlIGVub3VnaCB0byBjaGVjayBhbmQgcXVlbGwgdGhpcyBpbmNpcGllbnQgYXR0ZW1wdCBhdCBib2xkIG91dHJhZ2Ugb24gdGhlIHBhcnQgb2YgYSBwb3B1bGFjZSBpbiByZXZvbHQgYWdhaW5zdCB0aGUgbGF3cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2VuYXRlIG1ldCB0byBkZWJhdGUgdGhpcyBxdWVzdGlvbiBtYW55IHRpbWVzIHdpdGhpbiB0aGUgc3BhY2Ugb2YgYSBmZXcgZGF5cywgYnV0IGNhbWUgdG8gbm8gZGVmaW5pdGUgY29uY2x1c2lvbi4gVGhlIHBsZWJlaWFucyB0aGVyZWZvcmUgYmFuZGVkIHRvZ2V0aGVyIG9uIGEgc3VkZGVuLCBhbmQgYWZ0ZXIgbXV0dWFsIGV4aG9ydGF0aW9ucyBmb3Jzb29rIHRoZSBjaXR5LCBhbmQgdGFraW5nIHBvc3Nlc3Npb24gb2Ygd2hhdCBpcyBub3cgY2FsbGVkIHRoZSBTYWNyZWQgTW91bnQsIGVzdGFibGlzaGVkIHRoZW1zZWx2ZXMgYmVzaWRlIHRoZSByaXZlciBBbmlvLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRocmVlIG1pbGVzIGZyb20gdGhlIGNpdHkgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzIuMiIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDMyLCAyPC9iaWJsPikuPC9ub3RlPiBUaGV5IGNvbW1pdHRlZCBubyBhY3RzIG9mIHZpb2xlbmNlIG9yIHNlZGl0aW9uLCBidXQgb25seSBjcmllZCBhbG91ZCB0aGF0IHRoZXkgaGFkIGZvciBhIGxvbmcgdGltZSBiZWVuIGJhbmlzaGVkIGZyb20gdGhlIGNpdHkgYnkgdGhlIHJpY2gsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IEl0YWx5IHdvdWxkIGV2ZXJ5d2hlcmUgYWZmb3JkIHRoZW0gYWlyLCB3YXRlciwgYW5kIGEgcGxhY2Ugb2YgYnVyaWFsLCB3aGljaCB3YXMgYWxsIHRoZXkgaGFkIGlmIHRoZXkgZHdlbHQgaW4gUm9tZSwgZXhjZXB0IGZvciB0aGUgcHJpdmlsZWdlIG9mIHdvdW5kcyBhbmQgZGVhdGggaW4gY2FtcGFpZ25zIGZvciB0aGUgZGVmZW5jZSBvZiB0aGUgcmljaC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2VuYXRlIG1ldCB0byBkZWJhdGUgdGhpcyBxdWVzdGlvbiBtYW55IHRpbWVzIHdpdGhpbiB0aGUgc3BhY2Ugb2YgYSBmZXcgZGF5cywgYnV0IGNhbWUgdG8gbm8gZGVmaW5pdGUgY29uY2x1c2lvbi4gVGhlIHBsZWJlaWFucyB0aGVyZWZvcmUgYmFuZGVkIHRvZ2V0aGVyIG9uIGEgc3VkZGVuLCBhbmQgYWZ0ZXIgbXV0dWFsIGV4aG9ydGF0aW9ucyBmb3Jzb29rIHRoZSBjaXR5LCBhbmQgdGFraW5nIHBvc3Nlc3Npb24gb2Ygd2hhdCBpcyBub3cgY2FsbGVkIHRoZSBTYWNyZWQgTW91bnQsIGVzdGFibGlzaGVkIHRoZW1zZWx2ZXMgYmVzaWRlIHRoZSByaXZlciBBbmlvLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhyZWUgbWlsZXMgZnJvbSB0aGUgY2l0eSAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjMyLjIiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzMiwgMjwvYmlibD4pLjwvbm90ZT4gVGhleSBjb21taXR0ZWQgbm8gYWN0cyBvZiB2aW9sZW5jZSBvciBzZWRpdGlvbiwgYnV0IG9ubHkgY3JpZWQgYWxvdWQgdGhhdCB0aGV5IGhhZCBmb3IgYSBsb25nIHRpbWUgYmVlbiBiYW5pc2hlZCBmcm9tIHRoZSBjaXR5IGJ5IHRoZSByaWNoLCAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zMi4yIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gMzIsIDI8L2JpYmw+KS48L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IEl0YWx5IHdvdWxkIGV2ZXJ5d2hlcmUgYWZmb3JkIHRoZW0gYWlyLCB3YXRlciwgYW5kIGEgcGxhY2Ugb2YgYnVyaWFsLCB3aGljaCB3YXMgYWxsIHRoZXkgaGFkIGlmIHRoZXkgZHdlbHQgaW4gUm9tZSwgZXhjZXB0IGZvciB0aGUgcHJpdmlsZWdlIG9mIHdvdW5kcyBhbmQgZGVhdGggaW4gY2FtcGFpZ25zIGZvciB0aGUgZGVmZW5jZSBvZiB0aGUgcmljaC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVzZSBwcm9jZWVkaW5ncyBhbGFybWVkIHRoZSBzZW5hdGUsIGFuZCBpdCBzZW50IG91dCB0aG9zZSBvZiBpdHMgb2xkZXIgbWVtYmVycyB3aG8gd2VyZSBtb3N0IHJlYXNvbmFibHkgZGlzcG9zZWQgdG93YXJkcyB0aGUgcGVvcGxlIHRvIHRyZWF0IHdpdGggdGhlbS4gVGhlIGNoaWVmIHNwb2tlc21hbiB3YXMgTWVuZW5pdXMgQWdyaXBwYSwgYW5kIGFmdGVyIG11Y2ggZW50cmVhdHkgb2YgdGhlIHBlb3BsZSBhbmQgbXVjaCBwbGFpbiBzcGVha2luZyBpbiBiZWhhbGYgb2YgdGhlIHNlbmF0ZSwgaGUgY29uY2x1ZGVkIGhpcyBkaXNjb3Vyc2Ugd2l0aCBhIGNlbGVicmF0ZWQgZmFibGUuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgc2FpZCwgbmFtZWx5LCB0aGF0IGFsbCB0aGUgb3RoZXIgbWVtYmVycyBvZiBtYW4ncyBib2R5IG9uY2UgcmV2b2x0ZWQgYWdhaW5zdCB0aGUgYmVsbHksIGFuZCBhY2N1c2VkIGl0IG9mIGJlaW5nIHRoZSBvbmx5IG1lbWJlciB0byBzaXQgaWRseSBkb3duIGluIGl0cyBwbGFjZSBhbmQgbWFrZSBubyBjb250cmlidXRpb24gdG8gdGhlIGNvbW1vbiB3ZWxmYXJlLCB3aGlsZSB0aGUgcmVzdCB1bmRlcndlbnQgZ3JlYXQgaGFyZHNoaXBzIGFuZCBwZXJmb3JtZWQgZ3JlYXQgcHVibGljIHNlcnZpY2VzIG9ubHkgdG8gbWluaXN0ZXIgdG8gaXRzIGFwcGV0aXRlczsgYnV0IHRoYXQgdGhlIGJlbGx5IGxhdWdoZWQgYXQgdGhlaXIgc2ltcGxpY2l0eSBpbiBub3Qga25vd2luZyB0aGF0IGl0IHJlY2VpdmVkIGludG8gaXRzZWxmIGFsbCB0aGUgYm9keSdzIG5vdXJpc2htZW50IG9ubHkgdG8gc2VuZCBpdCBiYWNrIGFnYWluIGFuZCBkdWx5IGRpc3RyaWJ1dGUgaXQgYW1vbmcgdGhlIG90aGVyIG1lbWJlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TdWNoLCB0aGVuLDwvcT4gc2FpZCBBZ3JpcHBhLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlzIHRoZSByZWxhdGlvbiBvZiB0aGUgc2VuYXRlLCBteSBmZWxsb3ctY2l0aXplbnMsIHRvIHlvdTsgdGhlIG1hdHRlcnMgZm9yIGRlbGliZXJhdGlvbiB3aGljaCB0aGVyZSByZWNlaXZlIHRoZSBuZWNlc3NhcnkgYXR0ZW50aW9uIGFuZCBkaXNwb3NpdGlvbiBicmluZyB0byB5b3UgYWxsIGFuZCBzZXZlcmFsbHkgd2hhdCBpcyB1c2VmdWwgYW5kIGhlbHBmdWwuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zMi45IiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gMzIsIDktMTE8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA2Ljg2Ij5EaW9ueXNpdXMgSGFsLiwgPHRpdGxlPkFudGlxLiBSb20uPC90aXRsZT4gdmkuIDg2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNhaWQsIG5hbWVseSwgdGhhdCBhbGwgdGhlIG90aGVyIG1lbWJlcnMgb2YgbWFuJ3MgYm9keSBvbmNlIHJldm9sdGVkIGFnYWluc3QgdGhlIGJlbGx5LCBhbmQgYWNjdXNlZCBpdCBvZiBiZWluZyB0aGUgb25seSBtZW1iZXIgdG8gc2l0IGlkbHkgZG93biBpbiBpdHMgcGxhY2UgYW5kIG1ha2Ugbm8gY29udHJpYnV0aW9uIHRvIHRoZSBjb21tb24gd2VsZmFyZSwgd2hpbGUgdGhlIHJlc3QgdW5kZXJ3ZW50IGdyZWF0IGhhcmRzaGlwcyBhbmQgcGVyZm9ybWVkIGdyZWF0IHB1YmxpYyBzZXJ2aWNlcyBvbmx5IHRvIG1pbmlzdGVyIHRvIGl0cyBhcHBldGl0ZXM7IGJ1dCB0aGF0IHRoZSBiZWxseSBsYXVnaGVkIGF0IHRoZWlyIHNpbXBsaWNpdHkgaW4gbm90IGtub3dpbmcgdGhhdCBpdCByZWNlaXZlZCBpbnRvIGl0c2VsZiBhbGwgdGhlIGJvZHkncyBub3VyaXNobWVudCBvbmx5IHRvIHNlbmQgaXQgYmFjayBhZ2FpbiBhbmQgZHVseSBkaXN0cmlidXRlIGl0IGFtb25nIHRoZSBvdGhlciBtZW1iZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlN1Y2gsIHRoZW4sPC9xPiBzYWlkIEFncmlwcGEsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pcyB0aGUgcmVsYXRpb24gb2YgdGhlIHNlbmF0ZSwgbXkgZmVsbG93LWNpdGl6ZW5zLCB0byB5b3U7IHRoZSBtYXR0ZXJzIGZvciBkZWxpYmVyYXRpb24gd2hpY2ggdGhlcmUgcmVjZWl2ZSB0aGUgbmVjZXNzYXJ5IGF0dGVudGlvbiBhbmQgZGlzcG9zaXRpb24gYnJpbmcgdG8geW91IGFsbCBhbmQgc2V2ZXJhbGx5IHdoYXQgaXMgdXNlZnVsIGFuZCBoZWxwZnVsLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjMyLjkiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzMiwgOS0xMTwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gNi44NiI+RGlvbnlzaXVzIEhhbC4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFudGlxLiBSb20uPC90aXRsZT4gdmkuIDg2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzIuOSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDMyLCA5LTExPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA2Ljg2Ij5EaW9ueXNpdXMgSGFsLiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW50aXEuIFJvbS48L3RpdGxlPiB2aS4gODYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbnRpcS4gUm9tLjwvdGl0bGU+IHZpLiA4Ni48cCBjbGFzcz0idHJhbnNsYXRpb24iPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIHJlY29uY2lsaWF0aW9uIGZvbGxvd2VkLCBhZnRlciB0aGUgcGVvcGxlIGhhZCBhc2tlZCBhbmQgb2J0YWluZWQgZnJvbSB0aGUgc2VuYXRlIHRoZSBwcml2aWxlZ2Ugb2YgZWxlY3RpbmcgZml2ZSBtZW4gYXMgcHJvdGVjdG9ycyBvZiB0aG9zZSB3aG8gbmVlZGVkIHN1Y2NvdXIsIHRoZSBvZmZpY2VycyBub3cgY2FsbGVkIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUuIEFuZCB0aGUgZmlyc3Qgd2hvbSB0aGV5IGNob3NlIHRvIHRoaXMgb2ZmaWNlIHdlcmUgSnVuaXVzIEJydXR1cyBhbmQgU2ljaW5pdXMgVmVsbHV0dXMsIHdobyBoYWQgYmVlbiB0aGVpciBsZWFkZXJzIGluIHRoZSBzZWNlc3Npb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzMuMSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDMzLCAxLTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFdoZW4gdGhlIGNpdHkgd2FzIHRodXMgdW5pdGVkLCB0aGUgY29tbW9uIHBlb3BsZSBhdCBvbmNlIG9mZmVyZWQgdGhlbXNlbHZlcyBhcyBzb2xkaWVycywgYW5kIHRoZSBjb25zdWxzIGZvdW5kIHRoZW0gcmVhZHkgYW5kIGVhZ2VyIGZvciBzZXJ2aWNlIGluIHRoZSB3YXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIHJlY29uY2lsaWF0aW9uIGZvbGxvd2VkLCBhZnRlciB0aGUgcGVvcGxlIGhhZCBhc2tlZCBhbmQgb2J0YWluZWQgZnJvbSB0aGUgc2VuYXRlIHRoZSBwcml2aWxlZ2Ugb2YgZWxlY3RpbmcgZml2ZSBtZW4gYXMgcHJvdGVjdG9ycyBvZiB0aG9zZSB3aG8gbmVlZGVkIHN1Y2NvdXIsIHRoZSBvZmZpY2VycyBub3cgY2FsbGVkIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUuIEFuZCB0aGUgZmlyc3Qgd2hvbSB0aGV5IGNob3NlIHRvIHRoaXMgb2ZmaWNlIHdlcmUgSnVuaXVzIEJydXR1cyBhbmQgU2ljaW5pdXMgVmVsbHV0dXMsIHdobyBoYWQgYmVlbiB0aGVpciBsZWFkZXJzIGluIHRoZSBzZWNlc3Npb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjMzLjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzMywgMS0zLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBXaGVuIHRoZSBjaXR5IHdhcyB0aHVzIHVuaXRlZCwgdGhlIGNvbW1vbiBwZW9wbGUgYXQgb25jZSBvZmZlcmVkIHRoZW1zZWx2ZXMgYXMgc29sZGllcnMsIGFuZCB0aGUgY29uc3VscyBmb3VuZCB0aGVtIHJlYWR5IGFuZCBlYWdlciBmb3Igc2VydmljZSBpbiB0aGUgd2FyLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzMuMSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDMzLCAxLTMuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgTWFyY2l1cywgdGhvdWdoIGhlIHdhcyBkaXNwbGVhc2VkIGhpbXNlbGYgdG8gaGF2ZSB0aGUgcGVvcGxlIGluY3JlYXNlIGluIHBvd2VyIGF0IHRoZSBleHBlbnNlIG9mIHRoZSBhcmlzdG9jcmFjeSwgYW5kIHRob3VnaCBoZSBzYXcgdGhhdCBtYW55IG9mIHRoZSBvdGhlciBwYXRyaWNpYW5zIHdlcmUgb2YgdGhlIHNhbWUgbWluZCwgaGUgbmV2ZXJ0aGVsZXNzIGV4aG9ydGVkIHRoZW0gbm90IHRvIGZhbGwgYmVoaW5kIHRoZSBjb21tb24gcGVvcGxlIGluIGNvbnRlbmRpbmcgZm9yIHRoZWlyIGNvdW50cnkncyB3ZWxmYXJlLCBidXQgdG8gc2hvdyB0aGF0IHRoZXkgd2VyZSBzdXBlcmlvciB0byB0aGVtIGluIHZhbG91ciByYXRoZXIgdGhhbiBpbiBwb2xpdGljYWwgcG93ZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBNYXJjaXVzLCB0aG91Z2ggaGUgd2FzIGRpc3BsZWFzZWQgaGltc2VsZiB0byBoYXZlIHRoZSBwZW9wbGUgaW5jcmVhc2UgaW4gcG93ZXIgYXQgdGhlIGV4cGVuc2Ugb2YgdGhlIGFyaXN0b2NyYWN5LCBhbmQgdGhvdWdoIGhlIHNhdyB0aGF0IG1hbnkgb2YgdGhlIG90aGVyIHBhdHJpY2lhbnMgd2VyZSBvZiB0aGUgc2FtZSBtaW5kLCBoZSBuZXZlcnRoZWxlc3MgZXhob3J0ZWQgdGhlbSBub3QgdG8gZmFsbCBiZWhpbmQgdGhlIGNvbW1vbiBwZW9wbGUgaW4gY29udGVuZGluZyBmb3IgdGhlaXIgY291bnRyeSdzIHdlbGZhcmUsIGJ1dCB0byBzaG93IHRoYXQgdGhleSB3ZXJlIHN1cGVyaW9yIHRvIHRoZW0gaW4gdmFsb3VyIHJhdGhlciB0aGFuIGluIHBvbGl0aWNhbCBwb3dlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbW9uZyB0aGUgVm9sc2NpYW5zLCB3aXRoIHdob20gdGhlIFJvbWFucyB3ZXJlIGF0IHdhciwgdGhlIGNpdHkgb2YgQ29yaW9saSB0b29rIGhpZ2hlc3QgcmFuay4gV2hlbiwgdGhlcmVmb3JlLCBDb21pbml1cyB0aGUgY29uc3VsIGhhZCBpbnZlc3RlZCB0aGlzIHBsYWNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IGlzIGluIGNvbm5lY3Rpb24gd2l0aCB0aGUgYXR0YWNrIG9uIENvcm9saSB0aGF0IExpdnkgZmlyc3QgbWVudGlvbnMgTWFyY2l1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zMy41IiB2YWxpZD0ieWVzIj5paS4gMzMsIDUtOTwvYmlibD4pOyBhbHNvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDYuOTIiPkRpb255c2l1cyBIYWwuICh2aS4gOTIpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGUgcmVzdCBvZiB0aGUgVm9sc2NpYW5zLCBmZWFyaW5nIGZvciBpdHMgc2FmZXR5LCBjYW1lIHRvIGl0cyBhaWQgYWdhaW5zdCB0aGUgUm9tYW5zIGZyb20gYWxsIHBhcnRzLCBkZXNpZ25pbmcgdG8gZ2l2ZSB0aGVtIGJhdHRsZSBpbiBmcm9udCBvZiB0aGUgY2l0eSBhbmQgdG8gYXR0YWNrIHRoZW0gb24gYm90aCBzaWRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmV1cG9uIENvbWluaXVzIGRpdmlkZWQgaGlzIGZvcmNlcywgZ29pbmcgZm9ydGggaGltc2VsZiB0byBtZWV0IHRoZSBWb2xzY2lhbnMgd2hvIHdlcmUgY29taW5nIHVwIG91dHNpZGUsIGFuZCBsZWF2aW5nIFRpdHVzIExhcnRpdXMsIG9uZSBvZiB0aGUgYnJhdmVzdCBSb21hbnMgb2YgaGlzIGRheSwgaW4gY2hhcmdlIG9mIHRoZSBzaWVnZS4gVGhlbiB0aGUgbWVuIG9mIENvcmlvbGksIGRlc3Bpc2luZyB0aGUgZm9yY2VzIHRoYXQgd2VyZSBsZWZ0LCBzYWxsaWVkIG91dCBhZ2FpbnN0IHRoZW0sIG92ZXJjYW1lIHRoZW0gaW4gYmF0dGxlIGF0IGZpcnN0LCBhbmQgcHVyc3VlZCB0aGUgUm9tYW5zIHRvIHRoZWlyIGNhbXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQgTWFyY2l1cyBkYXJ0ZWQgb3V0IHdpdGggYSBzbWFsbCBiYW5kLCBhbmQgYWZ0ZXIgc2xheWluZyB0aG9zZSB3aG8gY2FtZSB0byBjbG9zZSBxdWFydGVycyBhbmQgYnJpbmdpbmcgdGhlIHJlc3Qgb2YgdGhlIGFzc2FpbGFudHMgdG8gYSBoYWx0LCBjYWxsZWQgdGhlIFJvbWFucyBiYWNrIHRvIHRoZSBmaWdodCB3aXRoIGxvdWQgY3JpZXMuIEZvciBoZSBoYWQsIGFzIENhdG8gdGhvdWdodCBhIHNvbGRpZXIgc2hvdWxkIGhhdmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1hLiAxLjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2F0byB0aGUgRWxkZXI8L3RpdGxlPiwgaS4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbm90IG9ubHkgYSB2aWdvdXIgb2Ygc3Ryb2tlLCBidXQgYSB2b2ljZSBhbmQgbG9vayB3aGljaCBtYWRlIGhpbSBhIGZlYXJmdWwgbWFuIGZvciBhIGZvZSB0byBlbmNvdW50ZXIsIGFuZCBoYXJkIHRvIHdpdGhzdGFuZC4gTWFueSBvZiBoaXMgbWVuIHJhbGxpZWQgdG8gc3VwcG9ydCBoaW0sIGFuZCB0aGUgZW5lbXkgd2l0aGRyZXcgaW4gdGVycm9yLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHRoaXMsIGhvd2V2ZXIsIGhlIHdhcyBub3Qgc2F0aXNmaWVkLCBidXQgZm9sbG93ZWQgaGFyZCB1cG9uIHRoZW0sIGFuZCBkcm92ZSB0aGVtIGF0IGxhc3QgaW4gaGVhZGxvbmcgZmxpZ2h0LCB1cCB0byB0aGUgZ2F0ZSBvZiB0aGVpciBjaXR5LiBUaGVyZSwgYWx0aG91Z2ggaGUgc2F3IHRoZSBSb21hbnMgdHVybmluZyBiYWNrIGZyb20gdGhlIHB1cnN1aXQsIG5vdyB0aGF0IG1hbnkgbWlzc2lsZXMgZnJvbSB0aGUgd2FsbHMgd2VyZSByZWFjaGluZyB0aGVtLCBhbmQgYWx0aG91Z2ggbm90IGEgbWFuIG9mIHRoZW0gZGFyZWQgdG8gdGhpbmsgb2YgYnVyc3RpbmcgaW50byB0aGUgY2l0eSBhbG9uZyB3aXRoIHRoZSBmdWdpdGl2ZXMsIGZ1bGwgYXMgaXQgd2FzIG9mIGVuZW1pZXMgaW4gYXJtcywgaGUgbmV2ZXJ0aGVsZXNzIHRvb2sgaGlzIHN0YW5kLCBhbmQgZXhob3J0ZWQgYW5kIGVuY291cmFnZWQgdGhlbSB0byB0aGUgZXhwbG9pdCwgY3J5aW5nIG91dCB0aGF0IGZvcnR1bmUgaGFkIG9wZW5lZCB0aGUgY2l0eSBmb3IgdGhlIHB1cnN1ZXJzIHJhdGhlciB0aGFuIGZvciB0aGUgcHVyc3VlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+T25seSBhIGZldyB3ZXJlIHdpbGxpbmcgdG8gZm9sbG93IGhpbSwgYnV0IGhlIHB1c2hlZCBoaXMgd2F5IHRocm91Z2ggdGhlIGVuZW15LCBsZWFwZWQgYWdhaW5zdCB0aGUgZ2F0ZSwgYW5kIGJ1cnN0IGluIGFsb25nIHdpdGggdGhlbSwgbm8gbWFuIGRhcmluZyB0byBvcHBvc2UgaGltIGF0IGZpcnN0IG9yIHJlc2lzdCBoaW0uIFRoZW4sIGhvd2V2ZXIsIHdoZW4gdGhlIGNpdGl6ZW5zIHNhdyB0aGF0IGZldyBvZiB0aGUgZW5lbXkgYWxsIHRvbGQgd2VyZSBpbnNpZGUsIHRoZXkgcmFsbGllZCBhbmQgYXR0YWNrZWQgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+RW52ZWxvcGVkIHRodXMgYnkgZnJpZW5kcyBhbmQgZm9lcyBhbGlrZSwgTWFyY2l1cyBpcyBzYWlkIHRvIGhhdmUgd2FnZWQgYSBjb21iYXQgaW4gdGhlIGNpdHkgd2hpY2gsIGZvciBwcm93ZXNzIG9mIGFybSwgc3BlZWQgb2YgZm9vdCwgYW5kIGRhcmluZyBvZiBzb3VsLCBwYXNzZXMgYWxsIGJlbGllZjsgaGUgb3ZlcndoZWxtZWQgYWxsIHdob20gaGUgYXNzYWlsZWQsIGRyaXZpbmcgc29tZSB0byB0aGUgcmVtb3Rlc3QgcGFydHMgb2YgdGhlIGNpdHksIHdoaWxlIG90aGVycyBnYXZlIHVwIHRoZSBzdHJ1Z2dsZSBhbmQgdGhyZXcgZG93biB0aGVpciBhcm1zLiBUaHVzIGhlIG1hZGUgaXQgYWJ1bmRhbnRseSBzYWZlIGZvciBMYXJ0aXVzIHRvIGxlYWQgdXAgdGhlIFJvbWFucyB3aG8gd2VyZSBvdXRzaWRlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbW9uZyB0aGUgVm9sc2NpYW5zLCB3aXRoIHdob20gdGhlIFJvbWFucyB3ZXJlIGF0IHdhciwgdGhlIGNpdHkgb2YgQ29yaW9saSB0b29rIGhpZ2hlc3QgcmFuay4gV2hlbiwgdGhlcmVmb3JlLCBDb21pbml1cyB0aGUgY29uc3VsIGhhZCBpbnZlc3RlZCB0aGlzIHBsYWNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SXQgaXMgaW4gY29ubmVjdGlvbiB3aXRoIHRoZSBhdHRhY2sgb24gQ29yb2xpIHRoYXQgTGl2eSBmaXJzdCBtZW50aW9ucyBNYXJjaXVzICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzMuNSIgdmFsaWQ9InllcyI+aWkuIDMzLCA1LTk8L2JpYmw+KTsgYWxzbyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDYuOTIiPkRpb255c2l1cyBIYWwuICh2aS4gOTIpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGUgcmVzdCBvZiB0aGUgVm9sc2NpYW5zLCBmZWFyaW5nIGZvciBpdHMgc2FmZXR5LCBjYW1lIHRvIGl0cyBhaWQgYWdhaW5zdCB0aGUgUm9tYW5zIGZyb20gYWxsIHBhcnRzLCBkZXNpZ25pbmcgdG8gZ2l2ZSB0aGVtIGJhdHRsZSBpbiBmcm9udCBvZiB0aGUgY2l0eSBhbmQgdG8gYXR0YWNrIHRoZW0gb24gYm90aCBzaWRlcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzMuNSIgdmFsaWQ9InllcyI+aWkuIDMzLCA1LTk8L2JpYmw+KTsgYWxzbyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDYuOTIiPkRpb255c2l1cyBIYWwuICh2aS4gOTIpLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJldXBvbiBDb21pbml1cyBkaXZpZGVkIGhpcyBmb3JjZXMsIGdvaW5nIGZvcnRoIGhpbXNlbGYgdG8gbWVldCB0aGUgVm9sc2NpYW5zIHdobyB3ZXJlIGNvbWluZyB1cCBvdXRzaWRlLCBhbmQgbGVhdmluZyBUaXR1cyBMYXJ0aXVzLCBvbmUgb2YgdGhlIGJyYXZlc3QgUm9tYW5zIG9mIGhpcyBkYXksIGluIGNoYXJnZSBvZiB0aGUgc2llZ2UuIFRoZW4gdGhlIG1lbiBvZiBDb3Jpb2xpLCBkZXNwaXNpbmcgdGhlIGZvcmNlcyB0aGF0IHdlcmUgbGVmdCwgc2FsbGllZCBvdXQgYWdhaW5zdCB0aGVtLCBvdmVyY2FtZSB0aGVtIGluIGJhdHRsZSBhdCBmaXJzdCwgYW5kIHB1cnN1ZWQgdGhlIFJvbWFucyB0byB0aGVpciBjYW1wLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQgTWFyY2l1cyBkYXJ0ZWQgb3V0IHdpdGggYSBzbWFsbCBiYW5kLCBhbmQgYWZ0ZXIgc2xheWluZyB0aG9zZSB3aG8gY2FtZSB0byBjbG9zZSBxdWFydGVycyBhbmQgYnJpbmdpbmcgdGhlIHJlc3Qgb2YgdGhlIGFzc2FpbGFudHMgdG8gYSBoYWx0LCBjYWxsZWQgdGhlIFJvbWFucyBiYWNrIHRvIHRoZSBmaWdodCB3aXRoIGxvdWQgY3JpZXMuIEZvciBoZSBoYWQsIGFzIENhdG8gdGhvdWdodCBhIHNvbGRpZXIgc2hvdWxkIGhhdmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNYS4gMS42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byB0aGUgRWxkZXI8L3RpdGxlPiwgaS4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbm90IG9ubHkgYSB2aWdvdXIgb2Ygc3Ryb2tlLCBidXQgYSB2b2ljZSBhbmQgbG9vayB3aGljaCBtYWRlIGhpbSBhIGZlYXJmdWwgbWFuIGZvciBhIGZvZSB0byBlbmNvdW50ZXIsIGFuZCBoYXJkIHRvIHdpdGhzdGFuZC4gTWFueSBvZiBoaXMgbWVuIHJhbGxpZWQgdG8gc3VwcG9ydCBoaW0sIGFuZCB0aGUgZW5lbXkgd2l0aGRyZXcgaW4gdGVycm9yLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWEuIDEuNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIEVsZGVyPC90aXRsZT4sIGkuIDYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIHRoZSBFbGRlcjwvdGl0bGU+LCBpLiA2LjwvdHJhbnNsYXRpb24+"
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhpcywgaG93ZXZlciwgaGUgd2FzIG5vdCBzYXRpc2ZpZWQsIGJ1dCBmb2xsb3dlZCBoYXJkIHVwb24gdGhlbSwgYW5kIGRyb3ZlIHRoZW0gYXQgbGFzdCBpbiBoZWFkbG9uZyBmbGlnaHQsIHVwIHRvIHRoZSBnYXRlIG9mIHRoZWlyIGNpdHkuIFRoZXJlLCBhbHRob3VnaCBoZSBzYXcgdGhlIFJvbWFucyB0dXJuaW5nIGJhY2sgZnJvbSB0aGUgcHVyc3VpdCwgbm93IHRoYXQgbWFueSBtaXNzaWxlcyBmcm9tIHRoZSB3YWxscyB3ZXJlIHJlYWNoaW5nIHRoZW0sIGFuZCBhbHRob3VnaCBub3QgYSBtYW4gb2YgdGhlbSBkYXJlZCB0byB0aGluayBvZiBidXJzdGluZyBpbnRvIHRoZSBjaXR5IGFsb25nIHdpdGggdGhlIGZ1Z2l0aXZlcywgZnVsbCBhcyBpdCB3YXMgb2YgZW5lbWllcyBpbiBhcm1zLCBoZSBuZXZlcnRoZWxlc3MgdG9vayBoaXMgc3RhbmQsIGFuZCBleGhvcnRlZCBhbmQgZW5jb3VyYWdlZCB0aGVtIHRvIHRoZSBleHBsb2l0LCBjcnlpbmcgb3V0IHRoYXQgZm9ydHVuZSBoYWQgb3BlbmVkIHRoZSBjaXR5IGZvciB0aGUgcHVyc3VlcnMgcmF0aGVyIHRoYW4gZm9yIHRoZSBwdXJzdWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9ubHkgYSBmZXcgd2VyZSB3aWxsaW5nIHRvIGZvbGxvdyBoaW0sIGJ1dCBoZSBwdXNoZWQgaGlzIHdheSB0aHJvdWdoIHRoZSBlbmVteSwgbGVhcGVkIGFnYWluc3QgdGhlIGdhdGUsIGFuZCBidXJzdCBpbiBhbG9uZyB3aXRoIHRoZW0sIG5vIG1hbiBkYXJpbmcgdG8gb3Bwb3NlIGhpbSBhdCBmaXJzdCBvciByZXNpc3QgaGltLiBUaGVuLCBob3dldmVyLCB3aGVuIHRoZSBjaXRpemVucyBzYXcgdGhhdCBmZXcgb2YgdGhlIGVuZW15IGFsbCB0b2xkIHdlcmUgaW5zaWRlLCB0aGV5IHJhbGxpZWQgYW5kIGF0dGFja2VkIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkVudmVsb3BlZCB0aHVzIGJ5IGZyaWVuZHMgYW5kIGZvZXMgYWxpa2UsIE1hcmNpdXMgaXMgc2FpZCB0byBoYXZlIHdhZ2VkIGEgY29tYmF0IGluIHRoZSBjaXR5IHdoaWNoLCBmb3IgcHJvd2VzcyBvZiBhcm0sIHNwZWVkIG9mIGZvb3QsIGFuZCBkYXJpbmcgb2Ygc291bCwgcGFzc2VzIGFsbCBiZWxpZWY7IGhlIG92ZXJ3aGVsbWVkIGFsbCB3aG9tIGhlIGFzc2FpbGVkLCBkcml2aW5nIHNvbWUgdG8gdGhlIHJlbW90ZXN0IHBhcnRzIG9mIHRoZSBjaXR5LCB3aGlsZSBvdGhlcnMgZ2F2ZSB1cCB0aGUgc3RydWdnbGUgYW5kIHRocmV3IGRvd24gdGhlaXIgYXJtcy4gVGh1cyBoZSBtYWRlIGl0IGFidW5kYW50bHkgc2FmZSBmb3IgTGFydGl1cyB0byBsZWFkIHVwIHRoZSBSb21hbnMgd2hvIHdlcmUgb3V0c2lkZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY2l0eSBoYXZpbmcgYmVlbiBjYXB0dXJlZCBpbiB0aGlzIG1hbm5lciwgbW9zdCBvZiB0aGUgc29sZGllcnMgZmVsbCB0byBwbHVuZGVyaW5nIGFuZCBwaWxsYWdpbmcgaXQuIEF0IHRoaXMgTWFyY2l1cyB3YXMgaW5kaWduYW50LCBhbmQgY3JpZWQgb3V0IHRoYXQgaGUgdGhvdWdodCBpdCBhIHNoYW1lLCB3aGVuIHRoZWlyIGNvbnN1bCBhbmQgdGhlaXIgZmVsbG93IGNpdGl6ZW5zIHdobyB3ZXJlIHdpdGggaGltIGhhZCBwZXJoYXBzIGZhbGxlbiBpbiB3aXRoIHRoZSBlbmVteSBhbmQgd2VyZSBmaWdodGluZyBhIGJhdHRsZSB3aXRoIHRoZW0sIHRoYXQgdGhleSBvbiB0aGVpciBwYXJ0IHNob3VsZCBiZSBnb2luZyBhYm91dCBhZnRlciBib290eSwgb3IsIHVuZGVyIHByZXRleHQgb2YgZ2V0dGluZyBib290eSwgc2hvdWxkIHJ1biBhd2F5IGZyb20gdGhlIGRhbmdlci4gT25seSBhIGZldyBwYWlkIGFueSBoZWVkIHRvIGhpcyB3b3Jkcywgd2hlcmV1cG9uIGhlIHRvb2sgdGhvc2Ugd2hvIHdlcmUgd2lsbGluZyB0byBmb2xsb3csIGFuZCBzZXQgb3V0IG9uIHRoZSByb2FkIGJ5IHdoaWNoLCBhcyBoZSBsZWFybmVkLCB0aGUgY29uc3VsJ3MgYXJteSBoYWQgbWFyY2hlZCBiZWZvcmUgaGltLCBvZnRlbiB1cmdpbmcgaGlzIGNvbXBhbmlvbnMgb24gYW5kIGJlc2VlY2hpbmcgdGhlbSBub3QgdG8gc2xhY2tlbiB0aGVpciBlZmZvcnRzLCBhbmQgb2Z0ZW4gcHJheWluZyB0aGUgZ29kcyB0aGF0IGhlIG1pZ2h0IG5vdCBiZSB0b28gbGF0ZSBmb3IgdGhlIGJhdHRsZSwgYnV0IG1pZ2h0IGNvbWUgdXAgaW4gc2Vhc29uIHRvIHNoYXJlIGluIHRoZSBzdHJ1Z2dsZXMgYW5kIHBlcmlscyBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY2l0eSBoYXZpbmcgYmVlbiBjYXB0dXJlZCBpbiB0aGlzIG1hbm5lciwgbW9zdCBvZiB0aGUgc29sZGllcnMgZmVsbCB0byBwbHVuZGVyaW5nIGFuZCBwaWxsYWdpbmcgaXQuIEF0IHRoaXMgTWFyY2l1cyB3YXMgaW5kaWduYW50LCBhbmQgY3JpZWQgb3V0IHRoYXQgaGUgdGhvdWdodCBpdCBhIHNoYW1lLCB3aGVuIHRoZWlyIGNvbnN1bCBhbmQgdGhlaXIgZmVsbG93IGNpdGl6ZW5zIHdobyB3ZXJlIHdpdGggaGltIGhhZCBwZXJoYXBzIGZhbGxlbiBpbiB3aXRoIHRoZSBlbmVteSBhbmQgd2VyZSBmaWdodGluZyBhIGJhdHRsZSB3aXRoIHRoZW0sIHRoYXQgdGhleSBvbiB0aGVpciBwYXJ0IHNob3VsZCBiZSBnb2luZyBhYm91dCBhZnRlciBib290eSwgb3IsIHVuZGVyIHByZXRleHQgb2YgZ2V0dGluZyBib290eSwgc2hvdWxkIHJ1biBhd2F5IGZyb20gdGhlIGRhbmdlci4gT25seSBhIGZldyBwYWlkIGFueSBoZWVkIHRvIGhpcyB3b3Jkcywgd2hlcmV1cG9uIGhlIHRvb2sgdGhvc2Ugd2hvIHdlcmUgd2lsbGluZyB0byBmb2xsb3csIGFuZCBzZXQgb3V0IG9uIHRoZSByb2FkIGJ5IHdoaWNoLCBhcyBoZSBsZWFybmVkLCB0aGUgY29uc3VsJ3MgYXJteSBoYWQgbWFyY2hlZCBiZWZvcmUgaGltLCBvZnRlbiB1cmdpbmcgaGlzIGNvbXBhbmlvbnMgb24gYW5kIGJlc2VlY2hpbmcgdGhlbSBub3QgdG8gc2xhY2tlbiB0aGVpciBlZmZvcnRzLCBhbmQgb2Z0ZW4gcHJheWluZyB0aGUgZ29kcyB0aGF0IGhlIG1pZ2h0IG5vdCBiZSB0b28gbGF0ZSBmb3IgdGhlIGJhdHRsZSwgYnV0IG1pZ2h0IGNvbWUgdXAgaW4gc2Vhc29uIHRvIHNoYXJlIGluIHRoZSBzdHJ1Z2dsZXMgYW5kIHBlcmlscyBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IHdhcyBhIGN1c3RvbSB3aXRoIHRoZSBSb21hbnMgb2YgdGhhdCB0aW1lLCB3aGVuIHRoZXkgd2VyZSBnb2luZyBpbnRvIGFjdGlvbiwgYW5kIHdlcmUgYWJvdXQgdG8gZ2lyZCB1cCB0aGVpciBjbG9ha3MgYW5kIHRha2UgdXAgdGhlaXIgYnVja2xlcnMsIHRvIG1ha2UgYXQgdGhlIHNhbWUgdGltZSBhbiB1bndyaXR0ZW4gd2lsbCwgbmFtaW5nIHRoZWlyIGhlaXJzIGluIHRoZSBoZWFyaW5nIG9mIHRocmVlIG9yIGZvdXIgd2l0bmVzc2VzLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGp1c3Qgd2hhdCB0aGUgc29sZGllcnMgd2VyZSBkb2luZyB3aGVuIE1hcmNpdXMgb3ZlcnRvb2sgdGhlbSwgdGhlIGVuZW15IGJlaW5nIG5vdyBpbiBzaWdodC4gQXQgZmlyc3Qgc29tZSBvZiB0aGVtIHdlcmUgY29uZm91bmRlZCB3aGVuIHRoZXkgc2F3IHRoYXQgaGUgaGFkIGEgc21hbGwgZm9sbG93aW5nIGFuZCB3YXMgY292ZXJlZCB3aXRoIGJsb29kIGFuZCBzd2VhdDsgYnV0IHdoZW4gaGUgcmFuIHRvIHRoZSBjb25zdWwgd2l0aCBhIGdsYWQgY291bnRlbmFuY2UsIGdhdmUgaGltIGhpcyBoYW5kLCBhbmQgYW5ub3VuY2VkIHRoZSBjYXB0dXJlIG9mIHRoZSBjaXR5LCBhbmQgd2hlbiBDb21pbml1cyBlbWJyYWNlZCBhbmQga2lzc2VkIGhpbSwgdGhlbiB0aGV5IHdlcmUgZW5jb3VyYWdlZCwgc29tZSBoZWFyaW5nIG9mIHRoZSBzdWNjZXNzIHdoaWNoIGhhZCBiZWVuIGdhaW5lZCwgYW5kIHNvbWUgYnV0IGd1ZXNzaW5nIGF0IGl0LCBhbmQgYWxsIGNhbGxlZCBsb3VkbHkgdXBvbiB0aGUgY29uc3VsIHRvIGxlYWQgdGhlbSBpbnRvIGJhdHRsZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE1hcmNpdXMgYXNrZWQgQ29taW5pdXMgaG93IHRoZSBlbmVteSB3ZXJlIGFycmF5ZWQsIGFuZCB3aGVyZSB0aGVpciBiZXN0IGZpZ2h0aW5nIG1lbiB3ZXJlIHBsYWNlZC4gQW5kIHdoZW4gdGhlIGNvbnN1bCB0b2xkIGhpbSBoZSB0aG91Z2h0IHRoZSB0cm9vcHMgaW4gdGhlIGNlbnRyZSB3ZXJlIHRob3NlIG9mIHRoZSBBbnRpYXRlcywgd2hvIHdlcmUgdGhlIG1vc3Qgd2FybGlrZSBvZiBhbGwgYW5kIHlpZWxkZWQgdG8gbm9uZSBpbiBicmF2ZXJ5LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgYXNrIGFuZCBkZW1hbmQgb2YgeW91LCB0aGVuLDwvcT4gc2FpZCBNYXJjaXVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBvc3QgdXMgb3Bwb3NpdGUgdGhlc2UgbWVuLjwvcT4gVGhlIGNvbnN1bCwgYWNjb3JkaW5nbHksIGdyYW50ZWQgaGlzIHJlcXVlc3QsIGFzdG9uaXNoZWQgYXQgaGlzIGFyZG91ci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGp1c3Qgd2hhdCB0aGUgc29sZGllcnMgd2VyZSBkb2luZyB3aGVuIE1hcmNpdXMgb3ZlcnRvb2sgdGhlbSwgdGhlIGVuZW15IGJlaW5nIG5vdyBpbiBzaWdodC4gQXQgZmlyc3Qgc29tZSBvZiB0aGVtIHdlcmUgY29uZm91bmRlZCB3aGVuIHRoZXkgc2F3IHRoYXQgaGUgaGFkIGEgc21hbGwgZm9sbG93aW5nIGFuZCB3YXMgY292ZXJlZCB3aXRoIGJsb29kIGFuZCBzd2VhdDsgYnV0IHdoZW4gaGUgcmFuIHRvIHRoZSBjb25zdWwgd2l0aCBhIGdsYWQgY291bnRlbmFuY2UsIGdhdmUgaGltIGhpcyBoYW5kLCBhbmQgYW5ub3VuY2VkIHRoZSBjYXB0dXJlIG9mIHRoZSBjaXR5LCBhbmQgd2hlbiBDb21pbml1cyBlbWJyYWNlZCBhbmQga2lzc2VkIGhpbSwgdGhlbiB0aGV5IHdlcmUgZW5jb3VyYWdlZCwgc29tZSBoZWFyaW5nIG9mIHRoZSBzdWNjZXNzIHdoaWNoIGhhZCBiZWVuIGdhaW5lZCwgYW5kIHNvbWUgYnV0IGd1ZXNzaW5nIGF0IGl0LCBhbmQgYWxsIGNhbGxlZCBsb3VkbHkgdXBvbiB0aGUgY29uc3VsIHRvIGxlYWQgdGhlbSBpbnRvIGJhdHRsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNYXJjaXVzIGFza2VkIENvbWluaXVzIGhvdyB0aGUgZW5lbXkgd2VyZSBhcnJheWVkLCBhbmQgd2hlcmUgdGhlaXIgYmVzdCBmaWdodGluZyBtZW4gd2VyZSBwbGFjZWQuIEFuZCB3aGVuIHRoZSBjb25zdWwgdG9sZCBoaW0gaGUgdGhvdWdodCB0aGUgdHJvb3BzIGluIHRoZSBjZW50cmUgd2VyZSB0aG9zZSBvZiB0aGUgQW50aWF0ZXMsIHdobyB3ZXJlIHRoZSBtb3N0IHdhcmxpa2Ugb2YgYWxsIGFuZCB5aWVsZGVkIHRvIG5vbmUgaW4gYnJhdmVyeSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgYXNrIGFuZCBkZW1hbmQgb2YgeW91LCB0aGVuLDwvcT4gc2FpZCBNYXJjaXVzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cG9zdCB1cyBvcHBvc2l0ZSB0aGVzZSBtZW4uPC9xPiBUaGUgY29uc3VsLCBhY2NvcmRpbmdseSwgZ3JhbnRlZCBoaXMgcmVxdWVzdCwgYXN0b25pc2hlZCBhdCBoaXMgYXJkb3VyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIHNwZWFycyBiZWdhbiB0byBmbHksIE1hcmNpdXMgZGFydGVkIG91dCBiZWZvcmUgdGhlIGxpbmUsIGFuZCB0aGUgVm9sc2NpYW5zIHdobyBmYWNlZCBoaW0gY291bGQgbm90IHdpdGhzdGFuZCBoaXMgY2hhcmdlLCBidXQgd2hlcmUgaGUgZmVsbCB1cG9uIHRoZWlyIHJhbmtzIHRoZXkgd2VyZSBzcGVlZGlseSBjdXQgYXN1bmRlci4gVGhvc2Ugb24gZWl0aGVyIHNpZGUsIGhvd2V2ZXIsIHdoZWVsZWQgYWJvdXQgYW5kIGVuY29tcGFzc2VkIGhpbSB3aXRoIHRoZWlyIHdlYXBvbnMsIHNvIHRoYXQgdGhlIGNvbnN1bCwgZmVhcmluZyBmb3IgaGlzIHNhZmV0eSwgc2VudCB0byBoaXMgYWlkIHRoZSBjaG9pY2VzdCBtZW4gaGUgaGFkIGFib3V0IGhpcyBwZXJzb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYSBmaWVyY2UgYmF0dGxlIHJhZ2VkIGFyb3VuZCBNYXJjaXVzLCBhbmQgbWFueSB3ZXJlIHNsYWluIGluIHNob3J0IHNwYWNlIG9mIHRpbWU7IGJ1dCB0aGUgUm9tYW5zIHByZXNzZWQgaGFyZCB1cG9uIHRoZWlyIGVuZW1pZXMgYW5kIHB1dCB0aGVtIHRvIHJvdXQsIGFuZCBhcyB0aGV5IHNldCBvdXQgaW4gcHVyc3VpdCBvZiB0aGVtLCB0aGV5IGluc2lzdGVkIHRoYXQgTWFyY2l1cywgd2hvIHdhcyB3ZWlnaGVkIGRvd24gd2l0aCBmYXRpZ3VlIGFuZCB3b3VuZHMsIHNob3VsZCByZXRpcmUgdG8gdGhlIGNhbXAuIEhlIGFuc3dlcmVkLCBob3dldmVyLCB0aGF0IHdlYXJpbmVzcyB3YXMgbm90IGZvciB2aWN0b3JzLCBhbmQgdG9vayBhZnRlciB0aGUgZmx5aW5nIGZvZS4gVGhlIHJlc3Qgb2YgdGhlaXIgYXJteSBhbHNvIHdhcyBkZWZlYXRlZCwgbWFueSB3ZXJlIHNsYWluLCBhbmQgbWFueSB0YWtlbiBjYXB0aXZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA2Ljk0Ij5EaW9ueXNpdXMgSGFsLiB2aS4gOTQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgc3BlYXJzIGJlZ2FuIHRvIGZseSwgTWFyY2l1cyBkYXJ0ZWQgb3V0IGJlZm9yZSB0aGUgbGluZSwgYW5kIHRoZSBWb2xzY2lhbnMgd2hvIGZhY2VkIGhpbSBjb3VsZCBub3Qgd2l0aHN0YW5kIGhpcyBjaGFyZ2UsIGJ1dCB3aGVyZSBoZSBmZWxsIHVwb24gdGhlaXIgcmFua3MgdGhleSB3ZXJlIHNwZWVkaWx5IGN1dCBhc3VuZGVyLiBUaG9zZSBvbiBlaXRoZXIgc2lkZSwgaG93ZXZlciwgd2hlZWxlZCBhYm91dCBhbmQgZW5jb21wYXNzZWQgaGltIHdpdGggdGhlaXIgd2VhcG9ucywgc28gdGhhdCB0aGUgY29uc3VsLCBmZWFyaW5nIGZvciBoaXMgc2FmZXR5LCBzZW50IHRvIGhpcyBhaWQgdGhlIGNob2ljZXN0IG1lbiBoZSBoYWQgYWJvdXQgaGlzIHBlcnNvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYSBmaWVyY2UgYmF0dGxlIHJhZ2VkIGFyb3VuZCBNYXJjaXVzLCBhbmQgbWFueSB3ZXJlIHNsYWluIGluIHNob3J0IHNwYWNlIG9mIHRpbWU7IGJ1dCB0aGUgUm9tYW5zIHByZXNzZWQgaGFyZCB1cG9uIHRoZWlyIGVuZW1pZXMgYW5kIHB1dCB0aGVtIHRvIHJvdXQsIGFuZCBhcyB0aGV5IHNldCBvdXQgaW4gcHVyc3VpdCBvZiB0aGVtLCB0aGV5IGluc2lzdGVkIHRoYXQgTWFyY2l1cywgd2hvIHdhcyB3ZWlnaGVkIGRvd24gd2l0aCBmYXRpZ3VlIGFuZCB3b3VuZHMsIHNob3VsZCByZXRpcmUgdG8gdGhlIGNhbXAuIEhlIGFuc3dlcmVkLCBob3dldmVyLCB0aGF0IHdlYXJpbmVzcyB3YXMgbm90IGZvciB2aWN0b3JzLCBhbmQgdG9vayBhZnRlciB0aGUgZmx5aW5nIGZvZS4gVGhlIHJlc3Qgb2YgdGhlaXIgYXJteSBhbHNvIHdhcyBkZWZlYXRlZCwgbWFueSB3ZXJlIHNsYWluLCBhbmQgbWFueSB0YWtlbiBjYXB0aXZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gNi45NCI+RGlvbnlzaXVzIEhhbC4gdmkuIDk0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDYuOTQiPkRpb255c2l1cyBIYWwuIHZpLiA5NC48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCU9uIHRoZSBmb2xsb3dpbmcgZGF5LCB3aGVuIExhcnRpdXMgaGFkIGNvbWUgdXAsIGFuZCB0aGUgcmVzdCBvZiB0aGUgYXJteSB3YXMgYXNzZW1ibGVkIGJlZm9yZSB0aGUgY29uc3VsLCBDb21pbml1cyBtb3VudGVkIHRoZSByb3N0cmEsIGFuZCBhZnRlciByZW5kZXJpbmcgdG8gdGhlIGdvZHMgdGhlIHByYWlzZSB0aGF0IHdhcyB0aGVpciBkdWUgZm9yIHN1Y2ggZ3JlYXQgc3VjY2Vzc2VzLCBhZGRyZXNzZWQgaGltc2VsZiB0byBNYXJjaXVzLiBJbiB0aGUgZmlyc3QgcGxhY2UsIGhlIHJlaGVhcnNlZCB3aXRoIHByYWlzZSBoaXMgYXN0b25pc2hpbmcgZXhwbG9pdHMsIHNvbWUgb2Ygd2hpY2ggaGUgaGFkIGhpbXNlbGYgYmVoZWxkIGluIHRoZSBiYXR0bGUsIHdoaWxlIHRvIG90aGVycyBMYXJ0aXVzIGJvcmUgd2l0bmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgb3V0IG9mIHRoZSBhYnVuZGFudCB0cmVhc3VyZXMgYW5kIHRoZSBtYW55IGhvcnNlcyBhbmQgcHJpc29uZXJzIHRoYXQgaGFkIGJlZW4gdGFrZW4sIGhlIG9yZGVyZWQgaGltIHRvIGNob29zZSBvdXQgYSB0ZW50aCwgYmVmb3JlIGFueSBkaXN0cmlidXRpb24gdG8gdGhlIHJlc3Qgb2YgdGhlIGFybXk7IGFuZCBiZXNpZGVzIGFsbCB0aGlzLCBoZSBwcmVzZW50ZWQgaGltIHdpdGggYSBob3JzZSwgZHVseSBjYXBhcmlzb25lZCwgYXMgYSBwcml6ZSBvZiB2YWxvdXIuIEFmdGVyIHRoZSBSb21hbnMgaGFkIGFwcGxhdWRlZCB0aGlzIHNwZWVjaCwgTWFyY2l1cyBjYW1lIGZvcndhcmQgYW5kIHNhaWQgdGhhdCBoZSBhY2NlcHRlZCB0aGUgaG9yc2UsIGFuZCB3YXMgZGVsaWdodGVkIHdpdGggdGhlIHByYWlzZXMgb2YgdGhlIGNvbnN1bCwgYnV0IHRoYXQgaGUgZGVjbGluZWQgdGhlIHJlc3QsIGhvbGRpbmcgaXQgdG8gYmUgcGF5LCBub3QgaG9ub3VyLCBhbmQgd291bGQgYmUgY29udGVudCB3aXRoIGhpcyBzaW5nbGUgc2hhcmUgb2YgdGhlIGJvb3R5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IEkgZG8gYXNrIG9uZSBzcGVjaWFsIGZhdm91ciw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW5kIGJlZyB0aGF0IEkgbWF5IHJlY2VpdmUgaXQuIEkgaGFkIGEgZ3Vlc3QtZnJpZW5kIGFtb25nIHRoZSBWb2xzY2lhbnMsIGEgbWFuIG9mIGtpbmRsaW5lc3MgYW5kIHByb2JpdHkuIFRoaXMgbWFuIGlzIG5vdyBhIHByaXNvbmVyLCBhbmQgZnJvbSB3ZWFsdGggYW5kIGhhcHBpbmVzcyBpcyByZWR1Y2VkIHRvIHN1YmplY3Rpb24uIFNpbmNlLCB0aGVuLCBtYW55IGV2aWxzIGhhdmUgYmVmYWxsZW4gaGltLCBsZXQgbWUgYXQgbGVhc3QgZnJlZSBoaW0gZnJvbSBvbmUsIHRoYXQgb2YgYmVpbmcgc29sZCBpbnRvIGJvbmRhZ2UuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlPbiB0aGUgZm9sbG93aW5nIGRheSwgd2hlbiBMYXJ0aXVzIGhhZCBjb21lIHVwLCBhbmQgdGhlIHJlc3Qgb2YgdGhlIGFybXkgd2FzIGFzc2VtYmxlZCBiZWZvcmUgdGhlIGNvbnN1bCwgQ29taW5pdXMgbW91bnRlZCB0aGUgcm9zdHJhLCBhbmQgYWZ0ZXIgcmVuZGVyaW5nIHRvIHRoZSBnb2RzIHRoZSBwcmFpc2UgdGhhdCB3YXMgdGhlaXIgZHVlIGZvciBzdWNoIGdyZWF0IHN1Y2Nlc3NlcywgYWRkcmVzc2VkIGhpbXNlbGYgdG8gTWFyY2l1cy4gSW4gdGhlIGZpcnN0IHBsYWNlLCBoZSByZWhlYXJzZWQgd2l0aCBwcmFpc2UgaGlzIGFzdG9uaXNoaW5nIGV4cGxvaXRzLCBzb21lIG9mIHdoaWNoIGhlIGhhZCBoaW1zZWxmIGJlaGVsZCBpbiB0aGUgYmF0dGxlLCB3aGlsZSB0byBvdGhlcnMgTGFydGl1cyBib3JlIHdpdG5lc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIG91dCBvZiB0aGUgYWJ1bmRhbnQgdHJlYXN1cmVzIGFuZCB0aGUgbWFueSBob3JzZXMgYW5kIHByaXNvbmVycyB0aGF0IGhhZCBiZWVuIHRha2VuLCBoZSBvcmRlcmVkIGhpbSB0byBjaG9vc2Ugb3V0IGEgdGVudGgsIGJlZm9yZSBhbnkgZGlzdHJpYnV0aW9uIHRvIHRoZSByZXN0IG9mIHRoZSBhcm15OyBhbmQgYmVzaWRlcyBhbGwgdGhpcywgaGUgcHJlc2VudGVkIGhpbSB3aXRoIGEgaG9yc2UsIGR1bHkgY2FwYXJpc29uZWQsIGFzIGEgcHJpemUgb2YgdmFsb3VyLiBBZnRlciB0aGUgUm9tYW5zIGhhZCBhcHBsYXVkZWQgdGhpcyBzcGVlY2gsIE1hcmNpdXMgY2FtZSBmb3J3YXJkIGFuZCBzYWlkIHRoYXQgaGUgYWNjZXB0ZWQgdGhlIGhvcnNlLCBhbmQgd2FzIGRlbGlnaHRlZCB3aXRoIHRoZSBwcmFpc2VzIG9mIHRoZSBjb25zdWwsIGJ1dCB0aGF0IGhlIGRlY2xpbmVkIHRoZSByZXN0LCBob2xkaW5nIGl0IHRvIGJlIHBheSwgbm90IGhvbm91ciwgYW5kIHdvdWxkIGJlIGNvbnRlbnQgd2l0aCBoaXMgc2luZ2xlIHNoYXJlIG9mIHRoZSBib290eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBJIGRvIGFzayBvbmUgc3BlY2lhbCBmYXZvdXIsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW5kIGJlZyB0aGF0IEkgbWF5IHJlY2VpdmUgaXQuIEkgaGFkIGEgZ3Vlc3QtZnJpZW5kIGFtb25nIHRoZSBWb2xzY2lhbnMsIGEgbWFuIG9mIGtpbmRsaW5lc3MgYW5kIHByb2JpdHkuIFRoaXMgbWFuIGlzIG5vdyBhIHByaXNvbmVyLCBhbmQgZnJvbSB3ZWFsdGggYW5kIGhhcHBpbmVzcyBpcyByZWR1Y2VkIHRvIHN1YmplY3Rpb24uIFNpbmNlLCB0aGVuLCBtYW55IGV2aWxzIGhhdmUgYmVmYWxsZW4gaGltLCBsZXQgbWUgYXQgbGVhc3QgZnJlZSBoaW0gZnJvbSBvbmUsIHRoYXQgb2YgYmVpbmcgc29sZCBpbnRvIGJvbmRhZ2UuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkF0IHN1Y2ggd29yZHMgYXMgdGhlc2Ugc3RpbGwgbG91ZGVyIHNob3V0cyBncmVldGVkIE1hcmNpdXMsIGFuZCBoZSBmb3VuZCBtb3JlIGFkbWlyZXJzIG9mIGhpcyBzdXBlcmlvcml0eSB0byBnYWluIHRoYW4gb2YgdGhlIGJyYXZlcnkgaGUgaGFkIHNob3duIGluIHdhci4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHZlcnkgb25lcyB3aG8gc2VjcmV0bHkgZmVsdCBhIGNlcnRhaW4gamVhbG91cyBlbnZ5IG9mIGhpbSBmb3IgaGlzIGNvbnNwaWN1b3VzIGhvbm91cnMsIG5vdyB0aG91Z2h0IGhpbSB3b3J0aHkgb2YgZ3JlYXQgcmV3YXJkcyBiZWNhdXNlIGhlIHdvdWxkIG5vdCB0YWtlIHRoZW07IGFuZCB0aGV5IHdlcmUgbW9yZSBkZWxpZ2h0ZWQgd2l0aCB0aGUgdmlydHVlIHdoaWNoIGxlZCBoaW0gdG8gZGVzcGlzZSBzdWNoIGdyZWF0IHJld2FyZHMsIHRoYW4gd2l0aCB0aGUgZXhwbG9pdHMgd2hpY2ggbWFkZSBoaW0gd29ydGh5IG9mIHRoZW0uIEZvciB0aGUgcmlnaHQgdXNlIG9mIHdlYWx0aCBpcyBhIGZhaXJlciB0cmFpdCB0aGFuIGV4Y2VsbGVuY2UgaW4gYXJtczsgYnV0IG5vdCB0byBuZWVkIHdlYWx0aCBpcyBsb2Z0aWVyIHRoYW4gdG8gdXNlIGl0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgdmVyeSBvbmVzIHdobyBzZWNyZXRseSBmZWx0IGEgY2VydGFpbiBqZWFsb3VzIGVudnkgb2YgaGltIGZvciBoaXMgY29uc3BpY3VvdXMgaG9ub3Vycywgbm93IHRob3VnaHQgaGltIHdvcnRoeSBvZiBncmVhdCByZXdhcmRzIGJlY2F1c2UgaGUgd291bGQgbm90IHRha2UgdGhlbTsgYW5kIHRoZXkgd2VyZSBtb3JlIGRlbGlnaHRlZCB3aXRoIHRoZSB2aXJ0dWUgd2hpY2ggbGVkIGhpbSB0byBkZXNwaXNlIHN1Y2ggZ3JlYXQgcmV3YXJkcywgdGhhbiB3aXRoIHRoZSBleHBsb2l0cyB3aGljaCBtYWRlIGhpbSB3b3J0aHkgb2YgdGhlbS4gRm9yIHRoZSByaWdodCB1c2Ugb2Ygd2VhbHRoIGlzIGEgZmFpcmVyIHRyYWl0IHRoYW4gZXhjZWxsZW5jZSBpbiBhcm1zOyBidXQgbm90IHRvIG5lZWQgd2VhbHRoIGlzIGxvZnRpZXIgdGhhbiB0byB1c2UgaXQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG11bHRpdHVkZSBoYWQgY2Vhc2VkIHNob3V0aW5nIHRoZWlyIGFwcGxhdXNlLCBDb21pbml1cyB0b29rIHVwIHRoZSB3b3JkIGFnYWluIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllIGNhbm5vdCwgaW5kZWVkLCBteSBmZWxsb3ctc29sZGllcnMsIGZvcmNlIHRoZXNlIGdpZnRzIG9mIHlvdXJzIHVwb24gdGhlIG1hbiwgd2hlbiBoZSBkb2VzIG5vdCBhY2NlcHQgdGhlbSBhbmQgaXMgdW53aWxsaW5nIHRvIHRha2UgdGhlbTsgYnV0IHRoZXJlIGlzIGEgZ2lmdCB3aGljaCBoZSBjYW5ub3QgcmVmdXNlIHdoZW4gaXQgaXMgb2ZmZXJlZC4gTGV0IHVzIGdpdmUgaGltIHRoaXMgZ2lmdCwgYW5kIHBhc3MgYSB2b3RlIHRoYXQgaGUgYmUgc3VybmFtZWQgQ29yaW9sYW51cywgdW5sZXNzLCBpbmRlZWQsIGJlZm9yZSBzdWNoIGFjdCBvZiBvdXJzLCBoaXMgZXhwbG9pdCBoYXMgaXRzZWxmIGdpdmVuIGhpbSB0aGlzIG5hbWUuPC9xPiBUaGVuY2UgY2FtZSBoaXMgdGhpcmQgbmFtZSBvZiBDb3Jpb2xhbnVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA2Ljk0Ij5EaW9ueXNpdXMgSGFsLiB2aS4gOTQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgbXVsdGl0dWRlIGhhZCBjZWFzZWQgc2hvdXRpbmcgdGhlaXIgYXBwbGF1c2UsIENvbWluaXVzIHRvb2sgdXAgdGhlIHdvcmQgYWdhaW4gYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZSBjYW5ub3QsIGluZGVlZCwgbXkgZmVsbG93LXNvbGRpZXJzLCBmb3JjZSB0aGVzZSBnaWZ0cyBvZiB5b3VycyB1cG9uIHRoZSBtYW4sIHdoZW4gaGUgZG9lcyBub3QgYWNjZXB0IHRoZW0gYW5kIGlzIHVud2lsbGluZyB0byB0YWtlIHRoZW07IGJ1dCB0aGVyZSBpcyBhIGdpZnQgd2hpY2ggaGUgY2Fubm90IHJlZnVzZSB3aGVuIGl0IGlzIG9mZmVyZWQuIExldCB1cyBnaXZlIGhpbSB0aGlzIGdpZnQsIGFuZCBwYXNzIGEgdm90ZSB0aGF0IGhlIGJlIHN1cm5hbWVkIENvcmlvbGFudXMsIHVubGVzcywgaW5kZWVkLCBiZWZvcmUgc3VjaCBhY3Qgb2Ygb3VycywgaGlzIGV4cGxvaXQgaGFzIGl0c2VsZiBnaXZlbiBoaW0gdGhpcyBuYW1lLjwvcT4gVGhlbmNlIGNhbWUgaGlzIHRoaXJkIG5hbWUgb2YgQ29yaW9sYW51cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDYuOTQiPkRpb255c2l1cyBIYWwuIHZpLiA5NC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA2Ljk0Ij5EaW9ueXNpdXMgSGFsLiB2aS4gOTQuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIHRoaXMgaXQgaXMgcGVyZmVjdGx5IGNsZWFyIHRoYXQgQ2FpdXMgd2FzIHRoZSBwcm9wZXIgbmFtZTsgdGhhdCB0aGUgc2Vjb25kIG5hbWUsIGluIHRoaXMgY2FzZSBNYXJjaXVzLCB3YXMgdGhlIGNvbW1vbiBuYW1lIG9mIGZhbWlseSBvciBjbGFuOyBhbmQgdGhhdCB0aGUgdGhpcmQgbmFtZSB3YXMgYWRvcHRlZCBzdWJzZXF1ZW50bHksIGFuZCBiZXN0b3dlZCBiZWNhdXNlIG9mIHNvbWUgZXhwbG9pdCwgb3IgZm9ydHVuZSwgb3IgYm9kaWx5IGZlYXR1cmUsIG9yIHNwZWNpYWwgZXhjZWxsZW5jZSBpbiBhIG1hbi4gU28gdGhlIEdyZWVrcyB1c2VkIHRvIGdpdmUgc3VybmFtZXMgZnJvbSBhbiBleHBsb2l0LCBhcyBmb3IgaW5zdGFuY2UsIFNvdGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U290ZXIsIDxlbXBoPlNhdmlvdXI8L2VtcGg+OyBDYWxsaW5pY3VzLCA8ZW1waD5PZiBub2JsZSB2aWN0b3J5PC9lbXBoPjsgUGh5c2NvbiwgPGVtcGg+RmF0LXBhdW5jaDwvZW1waD47IEdyeXB1cywgPGVtcGg+aG9vay1ub3NlZDwvZW1waD47IEV1ZXJnZXRlcywgPGVtcGg+QmVuZWZhY3RvcjwvZW1waD47IFBoaWxhZGVscGh1cywgPGVtcGg+U2lzdGVyb3IgQnJvdGhlci1sb3ZlcjwvZW1waD47IEV1ZGFlbW9uLCA8ZW1waD5Qcm9zcGVyb3VzPC9lbXBoPjsgRG9zb24sIDxlbXBoPkFsd2F5cy1wcm9taXNpbmc8L2VtcGg+OyBMYXRoeXJ1cywgPGVtcGg+VmV0Y2hsaW5nPC9lbXBoPjsgU3VsbGEsIDxlbXBoPkJsb3RjaGVzPC9lbXBoPiAoPyk7IE5pZ2VyLCA8ZW1waD5CbGFjazwvZW1waD47IFJ1ZnVzLCA8ZW1waD5SZWQ8L2VtcGg+OyBDYWVjdXMsIDxlbXBoPkJsaW5kPC9lbXBoPjsgQ2xhdWRpdXMsIDxlbXBoPkxhbWU8L2VtcGg+Ljwvbm90ZT4gYW5kIENhbGxpbmljdXM7IG9yIGZyb20gYSBib2RpbHkgZmVhdHVyZSwgYXMgUGh5c2NvbiBhbmQgR3J5cHVzOyBvciBmcm9tIGEgc3BlY2lhbCBleGNlbGxlbmNlLCBhcyBFdWVyZ2V0ZXMgYW5kIFBoaWxhZGVwaHVzOyBvciBmcm9tIHNvbWUgZ29vZCBmb3J0dW5lLCBhcyBFdWRhZW1vbiwgdGhlIHN1cm5hbWUgb2YgdGhlIHNlY29uZCBCYXR0dXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzb21lIG9mIHRoZWlyIGtpbmdzIGhhdmUgYWN0dWFsbHkgaGFkIHN1cm5hbWVzIGdpdmVuIHRoZW0gaW4gbW9ja2VyeSwgYXMgQW50aWdvbnVzIERvc29uIGFuZCBQdG9sZW15IExhdGh5cnVzLiBTdXJuYW1lcyBvZiB0aGlzIHNvcnQgd2VyZSBldmVuIG1vcmUgY29tbW9uIGFtb25nIHRoZSBSb21hbnMuIEZvciBpbnN0YW5jZSwgb25lIG9mIHRoZSBNZXRlbGxpIHdhcyBjYWxsZWQgRGlhZGVtYXR1cywgYmVjYXVzZSBmb3IgYSBsb25nIHRpbWUgaGUgc3VmZmVyZWQgZnJvbSBhIHJ1bm5pbmcgc29yZSBhbmQgd2VudCBhYm91dCB3aXRoIGEgYmFuZGFnZSBvbiBoaXMgZm9yZWhlYWQ7IGFub3RoZXIgbWVtYmVyIG9mIHRoaXMgZmFtaWx5IHdhcyBjYWxsZWQgQ2VsZXIsIGJlY2F1c2UgaGUgZXhlcnRlZCBoaW1zZWxmIHRvIGdpdmUgdGhlIHBlb3BsZSBmdW5lcmFsIGdhbWVzIG9mIGdsYWRpYXRvcnMgd2l0aGluIGEgZmV3IGRheXMgb2YgaGlzIGZhdGhlcidzIGRlYXRoLCBhbmQgdGhlIHNwZWVkIGFuZCBzd2lmdG5lc3Mgb2YgaGlzIHByZXBhcmF0aW9ucyBleGNpdGVkIGFzdG9uaXNobWVudC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFJvbS4gMTAuMiIgdmFsaWQ9InllcyI+Um9tdWx1cywgeC4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXQgdGhlIHByZXNlbnQgZGF5IHNvbWUgb2YgdGhlbSBhcmUgbmFtZWQgZnJvbSBjYXN1YWwgaW5jaWRlbnRzIGF0IHRoZWlyIGJpcnRoLCBQcm9jdWx1cywgZm9yIGluc3RhbmNlLCBpZiBhIGNoaWxkIGlzIGJvcm4gd2hlbiBoaXMgZmF0aGVyIGlzIGF3YXkgZnJvbSBob21lOyBvciBQb3N0dW11cywgaWYgYWZ0ZXIgaGlzIGRlYXRoOyBhbmQgd2hlbiBvbmUgb2YgdHdpbiBjaGlsZHJlbiBzdXJ2aXZlcywgd2hpbGUgdGhlIG90aGVyIGRpZXMsIGhlIGlzIGNhbGxlZCBWb3Bpc2N1cy4gTW9yZW92ZXIsIGZyb20gYm9kaWx5IGZlYXR1cmVzIHRoZXkgbm90IG9ubHkgYmVzdG93IHN1Y2ggc3VybmFtZXMgYXMgU3VsbGEsIE5pZ2VyLCBhbmQgUnVmdXMsIGJ1dCBhbHNvIHN1Y2ggYXMgQ2FlY3VzIGFuZCBDbGF1ZGl1cy4gQW5kIHRoZXkgZG8gd2VsbCB0aHVzIHRvIGFjY3VzdG9tIG1lbiB0byByZWdhcmQgbmVpdGhlciBibGluZG5lc3Mgbm9yIGFueSBvdGhlciBib2RpbHkgbWlzZm9ydHVuZSBhcyBhIHJlcHJvYWNoIG9yIGEgZGlzZ3JhY2UsIGJ1dCB0byBhbnN3ZXIgdG8gc3VjaCBuYW1lcyBhcyB0aG91Z2ggdGhlaXIgb3duLiBUaGlzIHRvcGljLCBob3dldmVyLCB3b3VsZCBiZSBtb3JlIGZpdHRpbmdseSBkaXNjdXNzZWQgZWxzZXdoZXJlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhpcyBpdCBpcyBwZXJmZWN0bHkgY2xlYXIgdGhhdCBDYWl1cyB3YXMgdGhlIHByb3BlciBuYW1lOyB0aGF0IHRoZSBzZWNvbmQgbmFtZSwgaW4gdGhpcyBjYXNlIE1hcmNpdXMsIHdhcyB0aGUgY29tbW9uIG5hbWUgb2YgZmFtaWx5IG9yIGNsYW47IGFuZCB0aGF0IHRoZSB0aGlyZCBuYW1lIHdhcyBhZG9wdGVkIHN1YnNlcXVlbnRseSwgYW5kIGJlc3Rvd2VkIGJlY2F1c2Ugb2Ygc29tZSBleHBsb2l0LCBvciBmb3J0dW5lLCBvciBib2RpbHkgZmVhdHVyZSwgb3Igc3BlY2lhbCBleGNlbGxlbmNlIGluIGEgbWFuLiBTbyB0aGUgR3JlZWtzIHVzZWQgdG8gZ2l2ZSBzdXJuYW1lcyBmcm9tIGFuIGV4cGxvaXQsIGFzIGZvciBpbnN0YW5jZSwgU290ZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNvdGVyLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPlNhdmlvdXI8L2VtcGg+OyBDYWxsaW5pY3VzLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPk9mIG5vYmxlIHZpY3Rvcnk8L2VtcGg+OyBQaHlzY29uLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkZhdC1wYXVuY2g8L2VtcGg+OyBHcnlwdXMsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aG9vay1ub3NlZDwvZW1waD47IEV1ZXJnZXRlcywgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5CZW5lZmFjdG9yPC9lbXBoPjsgUGhpbGFkZWxwaHVzLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPlNpc3Rlcm9yIEJyb3RoZXItbG92ZXI8L2VtcGg+OyBFdWRhZW1vbiwgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5Qcm9zcGVyb3VzPC9lbXBoPjsgRG9zb24sIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWx3YXlzLXByb21pc2luZzwvZW1waD47IExhdGh5cnVzLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPlZldGNobGluZzwvZW1waD47IFN1bGxhLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkJsb3RjaGVzPC9lbXBoPiAoPyk7IE5pZ2VyLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkJsYWNrPC9lbXBoPjsgUnVmdXMsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVkPC9lbXBoPjsgQ2FlY3VzLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkJsaW5kPC9lbXBoPjsgQ2xhdWRpdXMsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGFtZTwvZW1waD4uPC9ub3RlPiBhbmQgQ2FsbGluaWN1czsgb3IgZnJvbSBhIGJvZGlseSBmZWF0dXJlLCBhcyBQaHlzY29uIGFuZCBHcnlwdXM7IG9yIGZyb20gYSBzcGVjaWFsIGV4Y2VsbGVuY2UsIGFzIEV1ZXJnZXRlcyBhbmQgUGhpbGFkZXBodXM7IG9yIGZyb20gc29tZSBnb29kIGZvcnR1bmUsIGFzIEV1ZGFlbW9uLCB0aGUgc3VybmFtZSBvZiB0aGUgc2Vjb25kIEJhdHR1cy4gCgkJCQk8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPlNhdmlvdXI8L2VtcGg+OyBDYWxsaW5pY3VzLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPk9mIG5vYmxlIHZpY3Rvcnk8L2VtcGg+OyBQaHlzY29uLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkZhdC1wYXVuY2g8L2VtcGg+OyBHcnlwdXMsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aG9vay1ub3NlZDwvZW1waD47IEV1ZXJnZXRlcywgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5CZW5lZmFjdG9yPC9lbXBoPjsgUGhpbGFkZWxwaHVzLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPlNpc3Rlcm9yIEJyb3RoZXItbG92ZXI8L2VtcGg+OyBFdWRhZW1vbiwgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5Qcm9zcGVyb3VzPC9lbXBoPjsgRG9zb24sIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWx3YXlzLXByb21pc2luZzwvZW1waD47IExhdGh5cnVzLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPlZldGNobGluZzwvZW1waD47IFN1bGxhLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkJsb3RjaGVzPC9lbXBoPiAoPyk7IE5pZ2VyLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkJsYWNrPC9lbXBoPjsgUnVmdXMsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVkPC9lbXBoPjsgQ2FlY3VzLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkJsaW5kPC9lbXBoPjsgQ2xhdWRpdXMsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGFtZTwvZW1waD4uPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzb21lIG9mIHRoZWlyIGtpbmdzIGhhdmUgYWN0dWFsbHkgaGFkIHN1cm5hbWVzIGdpdmVuIHRoZW0gaW4gbW9ja2VyeSwgYXMgQW50aWdvbnVzIERvc29uIGFuZCBQdG9sZW15IExhdGh5cnVzLiBTdXJuYW1lcyBvZiB0aGlzIHNvcnQgd2VyZSBldmVuIG1vcmUgY29tbW9uIGFtb25nIHRoZSBSb21hbnMuIEZvciBpbnN0YW5jZSwgb25lIG9mIHRoZSBNZXRlbGxpIHdhcyBjYWxsZWQgRGlhZGVtYXR1cywgYmVjYXVzZSBmb3IgYSBsb25nIHRpbWUgaGUgc3VmZmVyZWQgZnJvbSBhIHJ1bm5pbmcgc29yZSBhbmQgd2VudCBhYm91dCB3aXRoIGEgYmFuZGFnZSBvbiBoaXMgZm9yZWhlYWQ7IGFub3RoZXIgbWVtYmVyIG9mIHRoaXMgZmFtaWx5IHdhcyBjYWxsZWQgQ2VsZXIsIGJlY2F1c2UgaGUgZXhlcnRlZCBoaW1zZWxmIHRvIGdpdmUgdGhlIHBlb3BsZSBmdW5lcmFsIGdhbWVzIG9mIGdsYWRpYXRvcnMgd2l0aGluIGEgZmV3IGRheXMgb2YgaGlzIGZhdGhlcidzIGRlYXRoLCBhbmQgdGhlIHNwZWVkIGFuZCBzd2lmdG5lc3Mgb2YgaGlzIHByZXBhcmF0aW9ucyBleGNpdGVkIGFzdG9uaXNobWVudC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDEwLjIiIHZhbGlkPSJ5ZXMiPlJvbXVsdXMsIHguIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDEwLjIiIHZhbGlkPSJ5ZXMiPlJvbXVsdXMsIHguIDIuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhdCB0aGUgcHJlc2VudCBkYXkgc29tZSBvZiB0aGVtIGFyZSBuYW1lZCBmcm9tIGNhc3VhbCBpbmNpZGVudHMgYXQgdGhlaXIgYmlydGgsIFByb2N1bHVzLCBmb3IgaW5zdGFuY2UsIGlmIGEgY2hpbGQgaXMgYm9ybiB3aGVuIGhpcyBmYXRoZXIgaXMgYXdheSBmcm9tIGhvbWU7IG9yIFBvc3R1bXVzLCBpZiBhZnRlciBoaXMgZGVhdGg7IGFuZCB3aGVuIG9uZSBvZiB0d2luIGNoaWxkcmVuIHN1cnZpdmVzLCB3aGlsZSB0aGUgb3RoZXIgZGllcywgaGUgaXMgY2FsbGVkIFZvcGlzY3VzLiBNb3Jlb3ZlciwgZnJvbSBib2RpbHkgZmVhdHVyZXMgdGhleSBub3Qgb25seSBiZXN0b3cgc3VjaCBzdXJuYW1lcyBhcyBTdWxsYSwgTmlnZXIsIGFuZCBSdWZ1cywgYnV0IGFsc28gc3VjaCBhcyBDYWVjdXMgYW5kIENsYXVkaXVzLiBBbmQgdGhleSBkbyB3ZWxsIHRodXMgdG8gYWNjdXN0b20gbWVuIHRvIHJlZ2FyZCBuZWl0aGVyIGJsaW5kbmVzcyBub3IgYW55IG90aGVyIGJvZGlseSBtaXNmb3J0dW5lIGFzIGEgcmVwcm9hY2ggb3IgYSBkaXNncmFjZSwgYnV0IHRvIGFuc3dlciB0byBzdWNoIG5hbWVzIGFzIHRob3VnaCB0aGVpciBvd24uIFRoaXMgdG9waWMsIGhvd2V2ZXIsIHdvdWxkIGJlIG1vcmUgZml0dGluZ2x5IGRpc2N1c3NlZCBlbHNld2hlcmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3YXIgd2FzIG5vIHNvb25lciBvdmVyIHRoYW4gdGhlIHBvcHVsYXIgbGVhZGVycyByZXZpdmVkIHRoZSBpbnRlcm5hbCBkaXNzZW5zaW9ucywgd2l0aG91dCBhbnkgbmV3IGNhdXNlIG9mIGNvbXBsYWludCwgb3IganVzdCBhY2N1c2F0aW9ucywgYnV0IG1ha2luZyB0aGUgdmVyeSBldmlscyB3aGljaCBoYWQgbmVjZXNzYXJpbHkgZm9sbG93ZWQgaW4gdGhlIHdha2Ugb2YgdGhlaXIgcHJldmlvdXMgcXVhcnJlbHMgYW5kIGRpc3R1cmJhbmNlcyBhIHByZXRleHQgZm9yIG9wcG9zaW5nIHRoZSBwYXRyaWNpYW5zLiBGb3IgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgbGFuZCBoYWQgYmVlbiBsZWZ0IHVuc293biBhbmQgdW50aWxsZWQsIGFuZCB0aGUgd2FyIGxlZnQgbm8gb3Bwb3J0dW5pdHkgdG8gYXJyYW5nZSBhbiBpbXBvcnRhdGlvbiBvZiBtYXJrZXQgc3VwcGxpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcywgdGhlcmVmb3JlLCBhIGdyZWF0IHNjYXJjaXR5IG9mIGZvb2QsIGFuZCB3aGVuIHRoZSBwb3B1bGFyIGxlYWRlcnMgc2F3IHRoYXQgdGhlcmUgd2VyZSBubyBtYXJrZXQgc3VwcGxpZXMsIGFuZCB0aGF0IGlmIHRoZXJlIHdlcmUsIHRoZSBwZW9wbGUgaGFkIG5vIG1vbmV5IHRvIGJ1eSB0aGVtLCB0aGV5IGFzc2FpbGVkIHRoZSByaWNoIHdpdGggc2xhbmRlcm91cyBhY2N1c2F0aW9ucyBvZiBwdXJwb3NlbHkgYXJyYXlpbmcgdGhlIGZhbWluZSBhZ2FpbnN0IHRoZW0sIGluIGEgc3Bpcml0IG9mIHJldmVuZ2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdhciB3YXMgbm8gc29vbmVyIG92ZXIgdGhhbiB0aGUgcG9wdWxhciBsZWFkZXJzIHJldml2ZWQgdGhlIGludGVybmFsIGRpc3NlbnNpb25zLCB3aXRob3V0IGFueSBuZXcgY2F1c2Ugb2YgY29tcGxhaW50LCBvciBqdXN0IGFjY3VzYXRpb25zLCBidXQgbWFraW5nIHRoZSB2ZXJ5IGV2aWxzIHdoaWNoIGhhZCBuZWNlc3NhcmlseSBmb2xsb3dlZCBpbiB0aGUgd2FrZSBvZiB0aGVpciBwcmV2aW91cyBxdWFycmVscyBhbmQgZGlzdHVyYmFuY2VzIGEgcHJldGV4dCBmb3Igb3Bwb3NpbmcgdGhlIHBhdHJpY2lhbnMuIEZvciB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZSBsYW5kIGhhZCBiZWVuIGxlZnQgdW5zb3duIGFuZCB1bnRpbGxlZCwgYW5kIHRoZSB3YXIgbGVmdCBubyBvcHBvcnR1bml0eSB0byBhcnJhbmdlIGFuIGltcG9ydGF0aW9uIG9mIG1hcmtldCBzdXBwbGllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcywgdGhlcmVmb3JlLCBhIGdyZWF0IHNjYXJjaXR5IG9mIGZvb2QsIGFuZCB3aGVuIHRoZSBwb3B1bGFyIGxlYWRlcnMgc2F3IHRoYXQgdGhlcmUgd2VyZSBubyBtYXJrZXQgc3VwcGxpZXMsIGFuZCB0aGF0IGlmIHRoZXJlIHdlcmUsIHRoZSBwZW9wbGUgaGFkIG5vIG1vbmV5IHRvIGJ1eSB0aGVtLCB0aGV5IGFzc2FpbGVkIHRoZSByaWNoIHdpdGggc2xhbmRlcm91cyBhY2N1c2F0aW9ucyBvZiBwdXJwb3NlbHkgYXJyYXlpbmcgdGhlIGZhbWluZSBhZ2FpbnN0IHRoZW0sIGluIGEgc3Bpcml0IG9mIHJldmVuZ2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yZW92ZXIsIHRoZXJlIGNhbWUgYW4gZW1iYXNzeSBmcm9tIHRoZSBwZW9wbGUgb2YgVmVsaXRyYWUsIHdobyBvZmZlcmVkIHRvIGhhbmQgdGhlaXIgY2l0eSBvdmVyIHRvIHRoZSBSb21hbnMsIGFuZCBiZWdnZWQgdGhlbSB0byBzZW5kIG91dCBjb2xvbmlzdHMgZm9yIGl0LiBGb3IgYSBwZXN0aWxlbnRpYWwgZGlzZWFzZSBoYWQgYXNzYWlsZWQgdGhlbSwgYW5kIHdyb3VnaHQgc3VjaCBkZWF0aCBhbmQgZGVzdHJ1Y3Rpb24gYW1vbmcgdGhlaXIgY2l0aXplbnMgdGhhdCBoYXJkbHkgdGhlIHRlbnRoIHBhcnQgb2YgdGhlIHdob2xlIG51bWJlciB3YXMgbGVmdC4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgc3VjaCBvZiB0aGUgUm9tYW5zIGFzIHdlcmUgc2Vuc2libGUgdGhvdWdodCB0aGF0IHRoaXMgcmVxdWVzdCBvZiB0aGUgcGVvcGxlIG9mIFZlbGl0cmFlIGhhZCBjb21lIGF0IGFuIGFkdmFudGFnZW91cyBhbmQgb3Bwb3J0dW5lIHRpbWUsIHNpbmNlIHRoZSBzY2FyY2l0eSBvZiBmb29kIG1hZGUgaXQgbmVlZGZ1bCB0byBlYXNlIHRoZSBjaXR5IG9mIGl0cyBidXJkZW5zb21lIG51bWJlcnM7IGF0IHRoZSBzYW1lIHRpbWUgdGhleSBhbHNvIGhvcGVkIHRvIGRpc3NpcGF0ZSBpdHMgc2VkaXRpb24sIGlmIHRoZSBtb3N0IHR1cmJ1bGVudCBlbGVtZW50cyBpbiBpdCwgYW5kIHRob3NlIHdoaWNoIG1hZGUgbW9zdCByZXNwb25zZSB0byB0aGUgZXhjaXRpbmcgYXBwZWFscyBvZiB0aGUgcG9wdWxhciBsZWFkZXJzLCBzaG91bGQgYmUgcHVyZ2VkIGF3YXksIGxpa2UgdW5oZWFsdGh5IGFuZCBkaXN0dXJiaW5nIHJlZnVzZSBmcm9tIHRoZSBib2R5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGNpdGl6ZW5zLCB0aGVyZWZvcmUsIHRoZSBjb25zdWxzIHNlbGVjdGVkIGFzIGNvbG9uaXN0cyBhbmQgb3JkZXJlZCB0aGVtIGZvcnRoIHRvIFZlbGl0cmFlLiBUaGV5IGFsc28gZW5saXN0ZWQgb3RoZXJzIGluIGEgY2FtcGFpZ24gYWdhaW5zdCB0aGUgVm9sc2NpYW5zLCBjb250cml2aW5nIHRodXMgdGhhdCB0aGVyZSBzaG91bGQgYmUgbm8gbGVpc3VyZSBmb3IgaW50ZXN0aW5lIHR1bXVsdHMsIGFuZCBiZWxpZXZpbmcgdGhhdCB3aGVuIHJpY2ggYW5kIHBvb3IgYWxpa2UsIHBsZWJlaWFucyBhcyB3ZWxsIGFzIHBhdHJpY2lhbnMsIHdlcmUgb25jZSBtb3JlIHVuaXRlZCBpbiBtaWxpdGFyeSBzZXJ2aWNlIGFuZCBpbiBjb21tb24gc3RydWdnbGVzIGZvciB0aGUgcHVibGljIGdvb2QsIHRoZXkgd291bGQgYmUgbW9yZSBnZW50bHkgYW5kIHBsZWFzYW50bHkgZGlzcG9zZWQgdG93YXJkcyBvbmUgYW5vdGhlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBzdWNoIG9mIHRoZSBSb21hbnMgYXMgd2VyZSBzZW5zaWJsZSB0aG91Z2h0IHRoYXQgdGhpcyByZXF1ZXN0IG9mIHRoZSBwZW9wbGUgb2YgVmVsaXRyYWUgaGFkIGNvbWUgYXQgYW4gYWR2YW50YWdlb3VzIGFuZCBvcHBvcnR1bmUgdGltZSwgc2luY2UgdGhlIHNjYXJjaXR5IG9mIGZvb2QgbWFkZSBpdCBuZWVkZnVsIHRvIGVhc2UgdGhlIGNpdHkgb2YgaXRzIGJ1cmRlbnNvbWUgbnVtYmVyczsgYXQgdGhlIHNhbWUgdGltZSB0aGV5IGFsc28gaG9wZWQgdG8gZGlzc2lwYXRlIGl0cyBzZWRpdGlvbiwgaWYgdGhlIG1vc3QgdHVyYnVsZW50IGVsZW1lbnRzIGluIGl0LCBhbmQgdGhvc2Ugd2hpY2ggbWFkZSBtb3N0IHJlc3BvbnNlIHRvIHRoZSBleGNpdGluZyBhcHBlYWxzIG9mIHRoZSBwb3B1bGFyIGxlYWRlcnMsIHNob3VsZCBiZSBwdXJnZWQgYXdheSwgbGlrZSB1bmhlYWx0aHkgYW5kIGRpc3R1cmJpbmcgcmVmdXNlIGZyb20gdGhlIGJvZHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggY2l0aXplbnMsIHRoZXJlZm9yZSwgdGhlIGNvbnN1bHMgc2VsZWN0ZWQgYXMgY29sb25pc3RzIGFuZCBvcmRlcmVkIHRoZW0gZm9ydGggdG8gVmVsaXRyYWUuIFRoZXkgYWxzbyBlbmxpc3RlZCBvdGhlcnMgaW4gYSBjYW1wYWlnbiBhZ2FpbnN0IHRoZSBWb2xzY2lhbnMsIGNvbnRyaXZpbmcgdGh1cyB0aGF0IHRoZXJlIHNob3VsZCBiZSBubyBsZWlzdXJlIGZvciBpbnRlc3RpbmUgdHVtdWx0cywgYW5kIGJlbGlldmluZyB0aGF0IHdoZW4gcmljaCBhbmQgcG9vciBhbGlrZSwgcGxlYmVpYW5zIGFzIHdlbGwgYXMgcGF0cmljaWFucywgd2VyZSBvbmNlIG1vcmUgdW5pdGVkIGluIG1pbGl0YXJ5IHNlcnZpY2UgYW5kIGluIGNvbW1vbiBzdHJ1Z2dsZXMgZm9yIHRoZSBwdWJsaWMgZ29vZCwgdGhleSB3b3VsZCBiZSBtb3JlIGdlbnRseSBhbmQgcGxlYXNhbnRseSBkaXNwb3NlZCB0b3dhcmRzIG9uZSBhbm90aGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHBvcHVsYXIgbGVhZGVycywgU2ljaW5pdXMgYW5kIEJydXR1cywgd2l0aCB0aGVpciBmb2xsb3dpbmcsIGF0IG9uY2Ugcm9zZSB1cCBpbiBvcHBvc2l0aW9uLCBjcnlpbmcgb3V0IHRoYXQgdGhlIGNvbnN1bHMgd2VyZSBkaXNndWlzaW5nIGEgbW9zdCBjcnVlbCBkZWVkIHVuZGVyIHRoYXQgbW9zdCBpbm9mZmVuc2l2ZSBuYW1lLCBhIGNvbG9ueSwgYW5kIHdlcmUgcmVhbGx5IHB1c2hpbmcgcG9vciBtZW4gaW50byBhIHBpdCBvZiBkZWF0aCwgYXMgaXQgd2VyZSwgYnkgc2VuZGluZyB0aGVtIGZvcnRoIGludG8gYSBjaXR5IHdoaWNoIHdhcyBmdWxsIG9mIGRlYWRseSBhaXIgYW5kIHVuYnVyaWVkIGNvcnBzZXMsIHRvIGJlIGFzc29jaWF0ZWQgd2l0aCBhIHN0cmFuZ2UgYW5kIGFib21pbmFibGUgZGVpdHk7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVuLCBhcyBpZiBub3Qgc2F0aXNmaWVkIHdpdGggZGVzdHJveWluZyBzb21lIG9mIHRoZWlyIGZlbGxvdy1jaXRpemVucyBieSBmYW1pbmUsIGFuZCBleHBvc2luZyBvdGhlcnMgdG8gcGVzdGlsZW5jZSwgdGhleSBwcm9jZWVkZWQgZnVydGhlciB0byBicmluZyBvbiBhIHdhciBvZiB0aGVpciBvd24gY2hvb3NpbmcsIHRoYXQgbm8gZXZpbCBtaWdodCBzcGFyZSB0aGUgY2l0eSwgd2hpY2ggaGFkIGJ1dCByZWZ1c2VkIHRvIGNvbnRpbnVlIGluIHNlcnZpdHVkZSB0byB0aGUgcmljaC4gV2l0aCB0aGVpciBlYXJzIGZ1bGwgb2Ygc3VjaCBzcGVlY2hlcyBhcyB0aGVzZSwgdGhlIHBlb3BsZSB3b3VsZCBuZWl0aGVyIGFuc3dlciB0aGUgY29uc3VsYXIgc3VtbW9ucyBmb3IgZW5saXN0bWVudCwgbm9yIGxvb2sgd2l0aCBhbnkgZmF2b3VyIG9uIHRoZSBjb2xvbnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMTMiPkRpb255c2l1cyBIYWwuIHZpaS4gMTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBwb3B1bGFyIGxlYWRlcnMsIFNpY2luaXVzIGFuZCBCcnV0dXMsIHdpdGggdGhlaXIgZm9sbG93aW5nLCBhdCBvbmNlIHJvc2UgdXAgaW4gb3Bwb3NpdGlvbiwgY3J5aW5nIG91dCB0aGF0IHRoZSBjb25zdWxzIHdlcmUgZGlzZ3Vpc2luZyBhIG1vc3QgY3J1ZWwgZGVlZCB1bmRlciB0aGF0IG1vc3QgaW5vZmZlbnNpdmUgbmFtZSwgYSBjb2xvbnksIGFuZCB3ZXJlIHJlYWxseSBwdXNoaW5nIHBvb3IgbWVuIGludG8gYSBwaXQgb2YgZGVhdGgsIGFzIGl0IHdlcmUsIGJ5IHNlbmRpbmcgdGhlbSBmb3J0aCBpbnRvIGEgY2l0eSB3aGljaCB3YXMgZnVsbCBvZiBkZWFkbHkgYWlyIGFuZCB1bmJ1cmllZCBjb3Jwc2VzLCB0byBiZSBhc3NvY2lhdGVkIHdpdGggYSBzdHJhbmdlIGFuZCBhYm9taW5hYmxlIGRlaXR5OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVuLCBhcyBpZiBub3Qgc2F0aXNmaWVkIHdpdGggZGVzdHJveWluZyBzb21lIG9mIHRoZWlyIGZlbGxvdy1jaXRpemVucyBieSBmYW1pbmUsIGFuZCBleHBvc2luZyBvdGhlcnMgdG8gcGVzdGlsZW5jZSwgdGhleSBwcm9jZWVkZWQgZnVydGhlciB0byBicmluZyBvbiBhIHdhciBvZiB0aGVpciBvd24gY2hvb3NpbmcsIHRoYXQgbm8gZXZpbCBtaWdodCBzcGFyZSB0aGUgY2l0eSwgd2hpY2ggaGFkIGJ1dCByZWZ1c2VkIHRvIGNvbnRpbnVlIGluIHNlcnZpdHVkZSB0byB0aGUgcmljaC4gV2l0aCB0aGVpciBlYXJzIGZ1bGwgb2Ygc3VjaCBzcGVlY2hlcyBhcyB0aGVzZSwgdGhlIHBlb3BsZSB3b3VsZCBuZWl0aGVyIGFuc3dlciB0aGUgY29uc3VsYXIgc3VtbW9ucyBmb3IgZW5saXN0bWVudCwgbm9yIGxvb2sgd2l0aCBhbnkgZmF2b3VyIG9uIHRoZSBjb2xvbnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA3LjEzIj5EaW9ueXNpdXMgSGFsLiB2aWkuIDEzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMTMiPkRpb255c2l1cyBIYWwuIHZpaS4gMTMuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2VuYXRlIHdhcyBpbiBwZXJwbGV4aXR5LiBCdXQgTWFyY2l1cywgd2hvIHdhcyBub3cgZnVsbCBvZiBpbXBvcnRhbmNlLCBhbmQgaGFkIGdyb3duIGxvZnR5IGluIHNwaXJpdCwgYW5kIHdhcyBsb29rZWQgdXBvbiB3aXRoIGFkbWlyYXRpb24gYnkgdGhlIG1vc3QgcG93ZXJmdWwgbWVuIG9mIHRoZSBjaXR5LCBvcGVubHkgdG9vayB0aGUgbGVhZCBpbiByZXNpc3RpbmcgdGhlIHBvcHVsYXIgbGVhZGVycy4gVGhlIGNvbG9ueSB3YXMgc2VudCBvdXQsIHRob3NlIHRoYXQgd2VyZSBjaG9zZW4gZm9yIGl0IGJ5IGxvdCBiZWluZyBjb21wZWxsZWQgdG8gZ28gZm9ydGggdW5kZXIgc2V2ZXJlIHBlbmFsdGllczsgYW5kIHdoZW4gdGhlIHBlb3BsZSB1dHRlcmx5IHJlZnVzZWQgbWlsaXRhcnkgc2VydmljZSwgTWFyY2l1cyBoaW1zZWxmIG11c3RlcmVkIGhpcyBjbGllbnRzIGFuZCBhcyBtYW55IG90aGVycyBhcyBoZSBjb3VsZCBwZXJzdWFkZSwgYW5kIG1hZGUgYW4gaW5jdXJzaW9uIGludG8gdGhlIHRlcnJpdG9yeSBvZiBBbnRpdW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGhlIGZvdW5kIG11Y2ggY29ybiwgYW5kIHNlY3VyZWQgbGFyZ2UgYm9vdHkgaW4gY2F0dGxlIGFuZCBjYXB0aXZlcywgbm8gcGFydCBvZiB3aGljaCBkaWQgaGUgdGFrZSBvdXQgZm9yIGhpbXNlbGY7IGJ1dCBicm91Z2h0IGhpcyBmb2xsb3dlcnMgYmFjayB0byBSb21lIGxhZGVuIHdpdGggbGFyZ2Ugc3BvaWxzIG9mIGV2ZXJ5IHNvcnQuIFRoZSByZXN0IG9mIHRoZSBjaXRpemVucyB0aGVyZWZvcmUgcmVwZW50ZWQgdGhlbXNlbHZlcywgZW52aWVkIHRoZWlyIG1vcmUgZm9ydHVuYXRlIGZlbGxvd3MsIGFuZCB3ZXJlIGZpbGxlZCB3aXRoIGhvc3RpbGl0eSB0byBNYXJjaXVzLCBub3QgYmVpbmcgYWJsZSB0byBlbmR1cmUgdGhlIHJlcHV0YXRpb24gYW5kIHBvd2VyIG9mIHRoZSBtYW4sIHdoaWNoIHdhcyBncm93aW5nLCBhcyB0aGV5IHRob3VnaHQsIHRvIGJlIGRldHJpbWVudGFsIHRvIHRoZSBwZW9wbGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMTkiPkRpb255c2l1cyBIYWwuIHZpaS4gMTkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgd2FzIGluIHBlcnBsZXhpdHkuIEJ1dCBNYXJjaXVzLCB3aG8gd2FzIG5vdyBmdWxsIG9mIGltcG9ydGFuY2UsIGFuZCBoYWQgZ3Jvd24gbG9mdHkgaW4gc3Bpcml0LCBhbmQgd2FzIGxvb2tlZCB1cG9uIHdpdGggYWRtaXJhdGlvbiBieSB0aGUgbW9zdCBwb3dlcmZ1bCBtZW4gb2YgdGhlIGNpdHksIG9wZW5seSB0b29rIHRoZSBsZWFkIGluIHJlc2lzdGluZyB0aGUgcG9wdWxhciBsZWFkZXJzLiBUaGUgY29sb255IHdhcyBzZW50IG91dCwgdGhvc2UgdGhhdCB3ZXJlIGNob3NlbiBmb3IgaXQgYnkgbG90IGJlaW5nIGNvbXBlbGxlZCB0byBnbyBmb3J0aCB1bmRlciBzZXZlcmUgcGVuYWx0aWVzOyBhbmQgd2hlbiB0aGUgcGVvcGxlIHV0dGVybHkgcmVmdXNlZCBtaWxpdGFyeSBzZXJ2aWNlLCBNYXJjaXVzIGhpbXNlbGYgbXVzdGVyZWQgaGlzIGNsaWVudHMgYW5kIGFzIG1hbnkgb3RoZXJzIGFzIGhlIGNvdWxkIHBlcnN1YWRlLCBhbmQgbWFkZSBhbiBpbmN1cnNpb24gaW50byB0aGUgdGVycml0b3J5IG9mIEFudGl1bS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGhlIGZvdW5kIG11Y2ggY29ybiwgYW5kIHNlY3VyZWQgbGFyZ2UgYm9vdHkgaW4gY2F0dGxlIGFuZCBjYXB0aXZlcywgbm8gcGFydCBvZiB3aGljaCBkaWQgaGUgdGFrZSBvdXQgZm9yIGhpbXNlbGY7IGJ1dCBicm91Z2h0IGhpcyBmb2xsb3dlcnMgYmFjayB0byBSb21lIGxhZGVuIHdpdGggbGFyZ2Ugc3BvaWxzIG9mIGV2ZXJ5IHNvcnQuIFRoZSByZXN0IG9mIHRoZSBjaXRpemVucyB0aGVyZWZvcmUgcmVwZW50ZWQgdGhlbXNlbHZlcywgZW52aWVkIHRoZWlyIG1vcmUgZm9ydHVuYXRlIGZlbGxvd3MsIGFuZCB3ZXJlIGZpbGxlZCB3aXRoIGhvc3RpbGl0eSB0byBNYXJjaXVzLCBub3QgYmVpbmcgYWJsZSB0byBlbmR1cmUgdGhlIHJlcHV0YXRpb24gYW5kIHBvd2VyIG9mIHRoZSBtYW4sIHdoaWNoIHdhcyBncm93aW5nLCBhcyB0aGV5IHRob3VnaHQsIHRvIGJlIGRldHJpbWVudGFsIHRvIHRoZSBwZW9wbGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA3LjE5Ij5EaW9ueXNpdXMgSGFsLiB2aWkuIDE5LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMTkiPkRpb255c2l1cyBIYWwuIHZpaS4gMTkuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm90IGxvbmcgYWZ0ZXIsIHdoZW4gTWFyY2l1cyBzdG9vZCBmb3IgdGhlIGNvbnN1bHNoaXAsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlcmUgaXMgbm90aGluZyBvZiB0aGlzIGNhbmRpZGFjeSBmb3IgdGhlIGNvbnN1bHNoaXAgaW4gTGl2eSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zNC43IiB2YWxpZD0ieWVzIj5paS4gMzQsIDctMzU8L2JpYmw+KS4gTWFyY2l1cyB1cmdlcyB0aGUgc2VuYXRlIHRvIHRha2UgYWR2YW50YWdlIG9mIHRoZSBmYW1pbmUgYW5kIGV4YWN0IGZyb20gdGhlIHBsZWJlaWFucyBhIHN1cnJlbmRlciBvZiB0aGVpciB0cmlidW5hdGUuIFRoaXMgc28gZXhhc3BlcmF0ZXMgdGhlIHBlb3BsZSB0aGF0IHRoZXkgdHJ5IE1hcmNpdXMgPGVtcGg+aW4gYWJzZW50aWE8L2VtcGg+IGFuZCBiYW5pc2ggaGltLCB3aGVyZXVwb24gaGUgZ29lcyBvdmVyIHRvIHRoZSBWb2xzY2kuIFBsdXRhcmNoJ3Mgc3RvcnkgKHhpdi4teHguKSBhZ3JlZXMgY2xvc2VseSB3aXRoIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMjEiPkRpb255c2l1cyBIYWwuIHZpaS4gMjEtNjQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoZSBtdWx0aXR1ZGUgcmVsZW50ZWQsIGFuZCB0aGUgcGVvcGxlIGZlbHQgc29tZXdoYXQgYXNoYW1lZCB0byBzbGlnaHQgYW5kIGh1bWJsZSBhIG1hbiB3aG8gd2FzIGZvcmVtb3N0IGluIGJpcnRoIGFuZCB2YWxvdXIgYW5kIGhhZCBwZXJmb3JtZWQgc28gbWFueSBhbmQgc3VjaCBncmVhdCBzZXJ2aWNlcy4gTm93IGl0IHdhcyB0aGUgY3VzdG9tIHdpdGggdGhvc2Ugd2hvIHN0b29kIGZvciB0aGUgb2ZmaWNlIHRvIGdyZWV0IHRoZWlyIGZlbGxvdy1jaXRpemVucyBhbmQgc29saWNpdCB0aGVpciB2b3RlcywgZGVzY2VuZGluZyBpbnRvIHRoZSBmb3J1bSBpbiB0aGVpciB0b2dhLCB3aXRob3V0IGEgdHVuaWMgdW5kZXIgaXQuIFRoaXMgd2FzIGVpdGhlciBiZWNhdXNlIHRoZXkgd2lzaGVkIHRoZSBncmVhdGVyIGh1bWlsaXR5IG9mIHRoZWlyIGdhcmIgdG8gZmF2b3VyIHRoZWlyIHNvbGljaXRhdGlvbnMsIG9yIGJlY2F1c2UgdGhleSB3aXNoZWQgdG8gZGlzcGxheSB0aGUgdG9rZW5zIG9mIHRoZWlyIGJyYXZlcnksIGluIGNhc2UgdGhleSBib3JlIHdvdW5kcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGNlcnRhaW5seSBub3Qgb3dpbmcgdG8gYSBzdXNwaWNpb24gb2YgdGhlIGRpc3BlbnNpbmcgb2YgbW9uZXkgaW4gYnJpYmVyeSB0aGF0IHRoZSBjYW5kaWRhdGUgZm9yIHRoZSB2b3RlcyBvZiB0aGUgY2l0aXplbnMgd2FzIHJlcXVpcmVkIHRvIHByZXNlbnQgaGltc2VsZiBiZWZvcmUgdGhlbSB3aXRob3V0IGEgdHVuaWMgYW5kIHVuZ2lydC4gRm9yIGl0IHdhcyBsb25nIGFmdGVyIHRoaXMgdGltZSB0aGF0IHRoZSBidXlpbmcgYW5kIHNlbGxpbmcgb2Ygdm90ZXMgY3JlcHQgaW4gYW5kIG1vbmV5IGJlY2FtZSBhIGZlYXR1cmUgb2YgdGhlIGVsZWN0aW9ucy4KCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUJ1dCBhZnRlcndhcmRzLCBicmliZXJ5IGFmZmVjdGVkIGV2ZW4gY291cnRzIGFuZCBjYW1wcywgYW5kIGNvbnZlcnRlZCB0aGUgY2l0eSBpbnRvIGEgbW9uYXJjaHksIGJ5IG1ha2luZyBhcm1pZXMgdGhlIHV0dGVyIHNsYXZlcyBvZiBtb25leS4gRm9yIGl0IGhhcyBiZWVuIHdlbGwgc2FpZCB0aGF0IGhlIGZpcnN0IGJyZWFrcyBkb3duIHRoZSBwb3dlciBvZiB0aGUgcGVvcGxlIHdobyBmaXJzdCBmZWFzdHMgYW5kIGJyaWJlcyB0aGVtLiBCdXQgYXQgUm9tZSB0aGUgbWlzY2hpZWYgc2VlbXMgdG8gaGF2ZSBjcmVwdCBpbiBzdGVhbHRoaWx5IGFuZCBncmFkdWFsbHksIGFuZCBub3QgdG8gaGF2ZSBiZWVuIG5vdGljZWQgYXQgb25jZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdlIGRvIG5vdCBrbm93IHdobyB3YXMgdGhlIGZpcnN0IG1hbiB0byBicmliZSBoZXIgcGVvcGxlIG9yIGhlciBjb3VydHMgb2YgbGF3OyB3aGVyZWFzIGF0IEF0aGVucywgQW55dHVzLCB0aGUgc29uIG9mIEFudGhlbWlvbiwgaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGZpcnN0IG1hbiB0byBnaXZlIG1vbmV5IHRvIGp1cm9ycywgd2hlbiBoZSB3YXMgb24gdHJpYWwgZm9yIHRoZSB0cmVhY2hlcm91cyBmYWlsdXJlIHRvIHJlbGlldmUgUHlsb3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBzdHJvbmdob2xkIG9uIHRoZSB3ZXN0ZXJuIGNvYXN0IG9mIE1lc3NlbmlhLCBpbiBQZWxvcG9ubmVzdXMuIEl0IHdhcyBvY2N1cGllZCBhbmQgc3VjY2Vzc2Z1bGx5IGRlZmVuZGVkIGJ5IHRoZSBBdGhlbmlhbnMgaW4gNDI1IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiA0LjIiIHZhbGlkPSJ5ZXMiPlRodWMuIGl2LiAyLTQxPC9iaWJsPikuIEluIDQxMCwgdGhlIExhY2VkYWVtb25pYW5zIGxhaWQgc2llZ2UgdG8gaXRzIE1lc3NlbmlhbiBnYXJyaXNvbiwgd2hpY2ggc3VycmVuZGVyZWQgYWZ0ZXIgYW4gQXRoZW5pYW4gZmxlZXQgaGFkIGZhaWxlZCB0byByZWxpZXZlIGl0ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTMuNjQuNSIgdmFsaWQ9InllcyI+RGlvZG9ydXMsIHhpaWkuIDY0LCA1Zi48L2JpYmw+KS48L25vdGU+IHRvd2FyZCB0aGUgY2xvc2Ugb2YgdGhlIFBlbG9wb25uZXNpYW4gd2FyOyBhIHRpbWUgd2hlbiB0aGUgcHVyZSByYWNlIG9mIHRoZSBnb2xkZW4gYWdlIHN0aWxsIHBvc3Nlc3NlZCB0aGUgUm9tYW4gZm9ydW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdCBsb25nIGFmdGVyLCB3aGVuIE1hcmNpdXMgc3Rvb2QgZm9yIHRoZSBjb25zdWxzaGlwLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlcmUgaXMgbm90aGluZyBvZiB0aGlzIGNhbmRpZGFjeSBmb3IgdGhlIGNvbnN1bHNoaXAgaW4gTGl2eSAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjM0LjciIHZhbGlkPSJ5ZXMiPmlpLiAzNCwgNy0zNTwvYmlibD4pLiBNYXJjaXVzIHVyZ2VzIHRoZSBzZW5hdGUgdG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlIGZhbWluZSBhbmQgZXhhY3QgZnJvbSB0aGUgcGxlYmVpYW5zIGEgc3VycmVuZGVyIG9mIHRoZWlyIHRyaWJ1bmF0ZS4gVGhpcyBzbyBleGFzcGVyYXRlcyB0aGUgcGVvcGxlIHRoYXQgdGhleSB0cnkgTWFyY2l1cyA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmluIGFic2VudGlhPC9lbXBoPiBhbmQgYmFuaXNoIGhpbSwgd2hlcmV1cG9uIGhlIGdvZXMgb3ZlciB0byB0aGUgVm9sc2NpLiBQbHV0YXJjaCdzIHN0b3J5ICh4aXYuLXh4LikgYWdyZWVzIGNsb3NlbHkgd2l0aCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMjEiPkRpb255c2l1cyBIYWwuIHZpaS4gMjEtNjQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoZSBtdWx0aXR1ZGUgcmVsZW50ZWQsIGFuZCB0aGUgcGVvcGxlIGZlbHQgc29tZXdoYXQgYXNoYW1lZCB0byBzbGlnaHQgYW5kIGh1bWJsZSBhIG1hbiB3aG8gd2FzIGZvcmVtb3N0IGluIGJpcnRoIGFuZCB2YWxvdXIgYW5kIGhhZCBwZXJmb3JtZWQgc28gbWFueSBhbmQgc3VjaCBncmVhdCBzZXJ2aWNlcy4gTm93IGl0IHdhcyB0aGUgY3VzdG9tIHdpdGggdGhvc2Ugd2hvIHN0b29kIGZvciB0aGUgb2ZmaWNlIHRvIGdyZWV0IHRoZWlyIGZlbGxvdy1jaXRpemVucyBhbmQgc29saWNpdCB0aGVpciB2b3RlcywgZGVzY2VuZGluZyBpbnRvIHRoZSBmb3J1bSBpbiB0aGVpciB0b2dhLCB3aXRob3V0IGEgdHVuaWMgdW5kZXIgaXQuIFRoaXMgd2FzIGVpdGhlciBiZWNhdXNlIHRoZXkgd2lzaGVkIHRoZSBncmVhdGVyIGh1bWlsaXR5IG9mIHRoZWlyIGdhcmIgdG8gZmF2b3VyIHRoZWlyIHNvbGljaXRhdGlvbnMsIG9yIGJlY2F1c2UgdGhleSB3aXNoZWQgdG8gZGlzcGxheSB0aGUgdG9rZW5zIG9mIHRoZWlyIGJyYXZlcnksIGluIGNhc2UgdGhleSBib3JlIHdvdW5kcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzQuNyIgdmFsaWQ9InllcyI+aWkuIDM0LCA3LTM1PC9iaWJsPikuIE1hcmNpdXMgdXJnZXMgdGhlIHNlbmF0ZSB0byB0YWtlIGFkdmFudGFnZSBvZiB0aGUgZmFtaW5lIGFuZCBleGFjdCBmcm9tIHRoZSBwbGViZWlhbnMgYSBzdXJyZW5kZXIgb2YgdGhlaXIgdHJpYnVuYXRlLiBUaGlzIHNvIGV4YXNwZXJhdGVzIHRoZSBwZW9wbGUgdGhhdCB0aGV5IHRyeSBNYXJjaXVzIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aW4gYWJzZW50aWE8L2VtcGg+IGFuZCBiYW5pc2ggaGltLCB3aGVyZXVwb24gaGUgZ29lcyBvdmVyIHRvIHRoZSBWb2xzY2kuIFBsdXRhcmNoJ3Mgc3RvcnkgKHhpdi4teHguKSBhZ3JlZXMgY2xvc2VseSB3aXRoIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gNy4yMSI+RGlvbnlzaXVzIEhhbC4gdmlpLiAyMS02NC48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBjZXJ0YWlubHkgbm90IG93aW5nIHRvIGEgc3VzcGljaW9uIG9mIHRoZSBkaXNwZW5zaW5nIG9mIG1vbmV5IGluIGJyaWJlcnkgdGhhdCB0aGUgY2FuZGlkYXRlIGZvciB0aGUgdm90ZXMgb2YgdGhlIGNpdGl6ZW5zIHdhcyByZXF1aXJlZCB0byBwcmVzZW50IGhpbXNlbGYgYmVmb3JlIHRoZW0gd2l0aG91dCBhIHR1bmljIGFuZCB1bmdpcnQuIEZvciBpdCB3YXMgbG9uZyBhZnRlciB0aGlzIHRpbWUgdGhhdCB0aGUgYnV5aW5nIGFuZCBzZWxsaW5nIG9mIHZvdGVzIGNyZXB0IGluIGFuZCBtb25leSBiZWNhbWUgYSBmZWF0dXJlIG9mIHRoZSBlbGVjdGlvbnMuCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQnV0IGFmdGVyd2FyZHMsIGJyaWJlcnkgYWZmZWN0ZWQgZXZlbiBjb3VydHMgYW5kIGNhbXBzLCBhbmQgY29udmVydGVkIHRoZSBjaXR5IGludG8gYSBtb25hcmNoeSwgYnkgbWFraW5nIGFybWllcyB0aGUgdXR0ZXIgc2xhdmVzIG9mIG1vbmV5LiBGb3IgaXQgaGFzIGJlZW4gd2VsbCBzYWlkIHRoYXQgaGUgZmlyc3QgYnJlYWtzIGRvd24gdGhlIHBvd2VyIG9mIHRoZSBwZW9wbGUgd2hvIGZpcnN0IGZlYXN0cyBhbmQgYnJpYmVzIHRoZW0uIEJ1dCBhdCBSb21lIHRoZSBtaXNjaGllZiBzZWVtcyB0byBoYXZlIGNyZXB0IGluIHN0ZWFsdGhpbHkgYW5kIGdyYWR1YWxseSwgYW5kIG5vdCB0byBoYXZlIGJlZW4gbm90aWNlZCBhdCBvbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3ZSBkbyBub3Qga25vdyB3aG8gd2FzIHRoZSBmaXJzdCBtYW4gdG8gYnJpYmUgaGVyIHBlb3BsZSBvciBoZXIgY291cnRzIG9mIGxhdzsgd2hlcmVhcyBhdCBBdGhlbnMsIEFueXR1cywgdGhlIHNvbiBvZiBBbnRoZW1pb24sIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIHRoZSBmaXJzdCBtYW4gdG8gZ2l2ZSBtb25leSB0byBqdXJvcnMsIHdoZW4gaGUgd2FzIG9uIHRyaWFsIGZvciB0aGUgdHJlYWNoZXJvdXMgZmFpbHVyZSB0byByZWxpZXZlIFB5bG9zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBzdHJvbmdob2xkIG9uIHRoZSB3ZXN0ZXJuIGNvYXN0IG9mIE1lc3NlbmlhLCBpbiBQZWxvcG9ubmVzdXMuIEl0IHdhcyBvY2N1cGllZCBhbmQgc3VjY2Vzc2Z1bGx5IGRlZmVuZGVkIGJ5IHRoZSBBdGhlbmlhbnMgaW4gNDI1IEIuQy4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDQuMiIgdmFsaWQ9InllcyI+VGh1Yy4gaXYuIDItNDE8L2JpYmw+KS4gSW4gNDEwLCB0aGUgTGFjZWRhZW1vbmlhbnMgbGFpZCBzaWVnZSB0byBpdHMgTWVzc2VuaWFuIGdhcnJpc29uLCB3aGljaCBzdXJyZW5kZXJlZCBhZnRlciBhbiBBdGhlbmlhbiBmbGVldCBoYWQgZmFpbGVkIHRvIHJlbGlldmUgaXQgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDEzLjY0LjUiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4aWlpLiA2NCwgNWYuPC9iaWJsPikuPC9ub3RlPiB0b3dhcmQgdGhlIGNsb3NlIG9mIHRoZSBQZWxvcG9ubmVzaWFuIHdhcjsgYSB0aW1lIHdoZW4gdGhlIHB1cmUgcmFjZSBvZiB0aGUgZ29sZGVuIGFnZSBzdGlsbCBwb3NzZXNzZWQgdGhlIFJvbWFuIGZvcnVtLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiA0LjIiIHZhbGlkPSJ5ZXMiPlRodWMuIGl2LiAyLTQxPC9iaWJsPikuIEluIDQxMCwgdGhlIExhY2VkYWVtb25pYW5zIGxhaWQgc2llZ2UgdG8gaXRzIE1lc3NlbmlhbiBnYXJyaXNvbiwgd2hpY2ggc3VycmVuZGVyZWQgYWZ0ZXIgYW4gQXRoZW5pYW4gZmxlZXQgaGFkIGZhaWxlZCB0byByZWxpZXZlIGl0ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxMy42NC41IiB2YWxpZD0ieWVzIj5EaW9kb3J1cywgeGlpaS4gNjQsIDVmLjwvYmlibD4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvIHdoZW4gTWFyY2l1cyBkaXNjbG9zZWQgaGlzIG1hbnkgc2NhcnMgZnJvbSBtYW55IGNvbnRlc3RzLCB3aGVyZWluIGhlIGhhZCBiZWVuIGEgZm9yZW1vc3Qgc29sZGllciBmb3Igc2V2ZW50ZWVuIHllYXJzIHRvZ2V0aGVyLCB0aGUgcGVvcGxlIHdlcmUgcHV0IG91dCBvZiBjb3VudGVuYW5jZSBieSBoaXMgdmFsb3VyLCBhbmQgYWdyZWVkIHdpdGggb25lIGFub3RoZXIgdG8gZWxlY3QgaGltLiBCdXQgd2hlbiB0aGUgZGF5IGZvciBjYXN0aW5nIHRoZWlyIHZvdGVzIGNhbWUsIGFuZCBNYXJjaXVzIG1hZGUgYSBwb21wb3VzIGVudHJ5IGludG8gdGhlIGZvcnVtIGVzY29ydGVkIGJ5IHRoZSBzZW5hdGUsIGFuZCBhbGwgdGhlIHBhdHJpY2lhbnMgYWJvdXQgaGltIHdlcmUgY2xlYXJseSBtb3JlIGJlbnQgb24gc3VjY2VzcyB0aGFuIGV2ZXIgYmVmb3JlLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz50aGUgbXVsdGl0dWRlIGZlbGwgYXdheSBhZ2FpbiBmcm9tIHRoZWlyIGdvb2Qgd2lsbCB0b3dhcmRzIGhpbSwgYW5kIGRyaWZ0ZWQgaW50byBmZWVsaW5ncyBvZiByZXNlbnRtZW50IGFuZCBlbnZ5LiBUaGVzZSBmZWVsaW5ncyB3ZXJlIHJlaW5mb3JjZWQgYnkgdGhlaXIgZmVhciB0aGF0IGlmIGFuIGFyaXN0b2NyYXQsIHdobyBoYWQgc3VjaCB3ZWlnaHQgd2l0aCB0aGUgcGF0cmljaWFucywgc2hvdWxkIGJlY29tZSBzdXByZW1lIGluIHRoZSBnb3Zlcm5tZW50LCBoZSBtaWdodCBhbHRvZ2V0aGVyIGRlcHJpdmUgdGhlIHBlb3BsZSBvZiB0aGVpciBsaWJlcnRpZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gd2hlbiBNYXJjaXVzIGRpc2Nsb3NlZCBoaXMgbWFueSBzY2FycyBmcm9tIG1hbnkgY29udGVzdHMsIHdoZXJlaW4gaGUgaGFkIGJlZW4gYSBmb3JlbW9zdCBzb2xkaWVyIGZvciBzZXZlbnRlZW4geWVhcnMgdG9nZXRoZXIsIHRoZSBwZW9wbGUgd2VyZSBwdXQgb3V0IG9mIGNvdW50ZW5hbmNlIGJ5IGhpcyB2YWxvdXIsIGFuZCBhZ3JlZWQgd2l0aCBvbmUgYW5vdGhlciB0byBlbGVjdCBoaW0uIEJ1dCB3aGVuIHRoZSBkYXkgZm9yIGNhc3RpbmcgdGhlaXIgdm90ZXMgY2FtZSwgYW5kIE1hcmNpdXMgbWFkZSBhIHBvbXBvdXMgZW50cnkgaW50byB0aGUgZm9ydW0gZXNjb3J0ZWQgYnkgdGhlIHNlbmF0ZSwgYW5kIGFsbCB0aGUgcGF0cmljaWFucyBhYm91dCBoaW0gd2VyZSBjbGVhcmx5IG1vcmUgYmVudCBvbiBzdWNjZXNzIHRoYW4gZXZlciBiZWZvcmUsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoZSBtdWx0aXR1ZGUgZmVsbCBhd2F5IGFnYWluIGZyb20gdGhlaXIgZ29vZCB3aWxsIHRvd2FyZHMgaGltLCBhbmQgZHJpZnRlZCBpbnRvIGZlZWxpbmdzIG9mIHJlc2VudG1lbnQgYW5kIGVudnkuIFRoZXNlIGZlZWxpbmdzIHdlcmUgcmVpbmZvcmNlZCBieSB0aGVpciBmZWFyIHRoYXQgaWYgYW4gYXJpc3RvY3JhdCwgd2hvIGhhZCBzdWNoIHdlaWdodCB3aXRoIHRoZSBwYXRyaWNpYW5zLCBzaG91bGQgYmVjb21lIHN1cHJlbWUgaW4gdGhlIGdvdmVybm1lbnQsIGhlIG1pZ2h0IGFsdG9nZXRoZXIgZGVwcml2ZSB0aGUgcGVvcGxlIG9mIHRoZWlyIGxpYmVydGllcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28sIGJlaW5nIGluIHN1Y2ggYSBzdGF0ZSBvZiBtaW5kLCB0aGV5IHJlamVjdGVkIE1hcmNpdXMgYW5kIG90aGVycyB3ZXJlIHByb2NsYWltZWQgZWxlY3RlZC4gVGhlIHNlbmF0b3JzIHdlcmUgaW5kaWduYW50LCB0aGlua2luZyB0aGUgaW5zdWx0IGRpcmVjdGVkIHJhdGhlciBhdCB0aGVtIHRoYW4gYXQgTWFyY2l1cywgYW5kIGhlIGhpbXNlbGYgY291bGQgbm90IHRyZWF0IHRoZSBvY2N1cnJlbmNlIHdpdGggcmVzdHJhaW50IG9yIGZvcmJlYXJhbmNlLiBIZSBoYWQgaW5kdWxnZWQgdGhlIHBhc3Npb25hdGUgYW5kIGNvbnRlbnRpb3VzIHNpZGUgb2YgaGlzIG5hdHVyZSwgd2l0aCB0aGUgaWRlYSB0aGF0IHRoZXJlIHdhcyBzb21ldGhpbmcgZ3JlYXQgYW5kIGV4YWx0ZWQgaW4gdGhpcywgYW5kIGhhZCBub3QgYmVlbiBpbWJ1ZWQsIHVuZGVyIHRoZSBpbmZsdWVuY2Ugb2YgcmVhc29uIGFuZCBkaXNjaXBsaW5lLCB3aXRoIHRoYXQgZ3Jhdml0eSBhbmQgbWlsZG5lc3Mgd2hpY2ggYXJlIHRoZSBjaGllZiB2aXJ0dWVzIG9mIGEgc3RhdGVzbWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IgZGlkIGhlIGtub3cgdGhhdCBvbmUgd2hvIHVuZGVydGFrZXMgcHVibGljIGJ1c2luZXNzIG11c3QgYXZvaWQgYWJvdmUgYWxsIHRoaW5ncyB0aGF0IHNlbGYtd2lsbCB3aGljaCwgYXMgUGxhdG8gc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBhIGxldHRlciB0byBEaW8gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMLiA0IiB2YWxpZD0ieWVzIj5FcGlzdC4gaXYuIGFkIGZpbjwvYmlibD4pLjwvbm90ZT4gaXMgdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y29tcGFuaW9uIG9mIHNvbGl0dWRlPC9xPjsgbXVzdCBtaW5nbGUgd2l0aCBtZW4sIGFuZCBiZSBhIGxvdmVyIG9mIHRoYXQgc3VibWlzc2l2ZW5lc3MgdG8gaW5qdXJ5IHdoaWNoIHNvbWUgcGVvcGxlIHJpZGljdWxlIHNvIG11Y2guIEJ1dCBzaW5jZSBoZSB3YXMgZXZlciBhIHN0cmFpZ2h0Zm9yd2FyZCBtYW4gYW5kIG9ic3RpbmF0ZSwgYW5kIHNpbmNlIGhlIHRob3VnaHQgdGhhdCBjb25xdWVzdCBhbmQgbWFzdGVyeSBpbiBhbGwgdGhpbmdzIGFuZCBhdCBhbGwgdGltZXMgd2FzIHRoZSBwcmVyb2dhdGl2ZSBvZiBicmF2ZXJ5LCByYXRoZXIgdGhhbiBvZiBlZmZlbWluYXRlIHdlYWtuZXNzICh3aGljaCBicmVha3Mgb3V0IGluIGFuZ2VyLCBsaWtlIGEgc3dlbGxpbmcgc29yZSwgZnJvbSB0aGUgdHJvdWJsZWQgYW5kIHdvdW5kZWQgc3Bpcml0KSwgaGUgZXZlbnQgYXdheSBmdWxsIG9mIGluZGlnbmF0aW9uIGFuZCBiaXR0ZXJuZXNzIHRvd2FyZHMgdGhlIHBlb3BsZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHlvdW5nZXIgcGF0cmljaWFucywgdG9vLCB0aGF0IGVsZW1lbnQgaW4gdGhlIGNpdHkgd2hpY2ggbWFkZSBtb3N0IHZhdW50IG9mIG5vYmxlIGJpcnRoIGFuZCB3YXMgbW9zdCBzaG93eSwgaGFkIGFsd2F5cyBiZWVuIGFtYXppbmdseSBkZXZvdGVkIHRvIHRoZSBtYW4sIGFuZCwgYWRoZXJpbmcgdG8gaGltIG5vdywgd2hlbiB0aGVpciBwcmVzZW5jZSBkaWQgaGltIG5vIGdvb2QsIGZhbm5lZCBoaXMgYW5nZXIgYnkgdGhlaXIgc3ltcGF0aGV0aWMgdmV4YXRpb24gYW5kIHNvcnJvdy4gRm9yIGhlIHdhcyB0aGVpciBsZWFkZXIgYW5kIHdpbGxpbmcgdGVhY2hlciBvZiB0aGUgYXJ0IG9mIHdhciBpbiB0aGVpciBjYW1wYWlnbnMsIGFuZCBpbnNwaXJlZCB0aGVtIGluIHRoZWlyIHZpY3RvcmllcyB3aXRoIGEgemVhbCBmb3IgdmFsb3VyLCB3aGljaCBoYWQgbm8gdGluZ2Ugb2YgbXV0dWFsIGplYWxvdXN5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvLCBiZWluZyBpbiBzdWNoIGEgc3RhdGUgb2YgbWluZCwgdGhleSByZWplY3RlZCBNYXJjaXVzIGFuZCBvdGhlcnMgd2VyZSBwcm9jbGFpbWVkIGVsZWN0ZWQuIFRoZSBzZW5hdG9ycyB3ZXJlIGluZGlnbmFudCwgdGhpbmtpbmcgdGhlIGluc3VsdCBkaXJlY3RlZCByYXRoZXIgYXQgdGhlbSB0aGFuIGF0IE1hcmNpdXMsIGFuZCBoZSBoaW1zZWxmIGNvdWxkIG5vdCB0cmVhdCB0aGUgb2NjdXJyZW5jZSB3aXRoIHJlc3RyYWludCBvciBmb3JiZWFyYW5jZS4gSGUgaGFkIGluZHVsZ2VkIHRoZSBwYXNzaW9uYXRlIGFuZCBjb250ZW50aW91cyBzaWRlIG9mIGhpcyBuYXR1cmUsIHdpdGggdGhlIGlkZWEgdGhhdCB0aGVyZSB3YXMgc29tZXRoaW5nIGdyZWF0IGFuZCBleGFsdGVkIGluIHRoaXMsIGFuZCBoYWQgbm90IGJlZW4gaW1idWVkLCB1bmRlciB0aGUgaW5mbHVlbmNlIG9mIHJlYXNvbiBhbmQgZGlzY2lwbGluZSwgd2l0aCB0aGF0IGdyYXZpdHkgYW5kIG1pbGRuZXNzIHdoaWNoIGFyZSB0aGUgY2hpZWYgdmlydHVlcyBvZiBhIHN0YXRlc21hbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vciBkaWQgaGUga25vdyB0aGF0IG9uZSB3aG8gdW5kZXJ0YWtlcyBwdWJsaWMgYnVzaW5lc3MgbXVzdCBhdm9pZCBhYm92ZSBhbGwgdGhpbmdzIHRoYXQgc2VsZi13aWxsIHdoaWNoLCBhcyBQbGF0byBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gYSBsZXR0ZXIgdG8gRGlvICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMLiA0IiB2YWxpZD0ieWVzIj5FcGlzdC4gaXYuIGFkIGZpbjwvYmlibD4pLjwvbm90ZT4gaXMgdGhlIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTC4gNCIgdmFsaWQ9InllcyI+RXBpc3QuIGl2LiBhZCBmaW48L2JpYmw+KS48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNvbXBhbmlvbiBvZiBzb2xpdHVkZTwvcT47IG11c3QgbWluZ2xlIHdpdGggbWVuLCBhbmQgYmUgYSBsb3ZlciBvZiB0aGF0IHN1Ym1pc3NpdmVuZXNzIHRvIGluanVyeSB3aGljaCBzb21lIHBlb3BsZSByaWRpY3VsZSBzbyBtdWNoLiBCdXQgc2luY2UgaGUgd2FzIGV2ZXIgYSBzdHJhaWdodGZvcndhcmQgbWFuIGFuZCBvYnN0aW5hdGUsIGFuZCBzaW5jZSBoZSB0aG91Z2h0IHRoYXQgY29ucXVlc3QgYW5kIG1hc3RlcnkgaW4gYWxsIHRoaW5ncyBhbmQgYXQgYWxsIHRpbWVzIHdhcyB0aGUgcHJlcm9nYXRpdmUgb2YgYnJhdmVyeSwgcmF0aGVyIHRoYW4gb2YgZWZmZW1pbmF0ZSB3ZWFrbmVzcyAod2hpY2ggYnJlYWtzIG91dCBpbiBhbmdlciwgbGlrZSBhIHN3ZWxsaW5nIHNvcmUsIGZyb20gdGhlIHRyb3VibGVkIGFuZCB3b3VuZGVkIHNwaXJpdCksIGhlIGV2ZW50IGF3YXkgZnVsbCBvZiBpbmRpZ25hdGlvbiBhbmQgYml0dGVybmVzcyB0b3dhcmRzIHRoZSBwZW9wbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB5b3VuZ2VyIHBhdHJpY2lhbnMsIHRvbywgdGhhdCBlbGVtZW50IGluIHRoZSBjaXR5IHdoaWNoIG1hZGUgbW9zdCB2YXVudCBvZiBub2JsZSBiaXJ0aCBhbmQgd2FzIG1vc3Qgc2hvd3ksIGhhZCBhbHdheXMgYmVlbiBhbWF6aW5nbHkgZGV2b3RlZCB0byB0aGUgbWFuLCBhbmQsIGFkaGVyaW5nIHRvIGhpbSBub3csIHdoZW4gdGhlaXIgcHJlc2VuY2UgZGlkIGhpbSBubyBnb29kLCBmYW5uZWQgaGlzIGFuZ2VyIGJ5IHRoZWlyIHN5bXBhdGhldGljIHZleGF0aW9uIGFuZCBzb3Jyb3cuIEZvciBoZSB3YXMgdGhlaXIgbGVhZGVyIGFuZCB3aWxsaW5nIHRlYWNoZXIgb2YgdGhlIGFydCBvZiB3YXIgaW4gdGhlaXIgY2FtcGFpZ25zLCBhbmQgaW5zcGlyZWQgdGhlbSBpbiB0aGVpciB2aWN0b3JpZXMgd2l0aCBhIHplYWwgZm9yIHZhbG91ciwgd2hpY2ggaGFkIG5vIHRpbmdlIG9mIG11dHVhbCBqZWFsb3VzeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG1lYW50aW1lIGdyYWluIGNhbWUgdG8gUm9tZSwgYSBncmVhdCBwYXJ0IG9mIGl0IGJvdWdodCBpbiBJdGFseSwgYnV0IGFuIGVxdWFsIGFtb3VudCBzZW50IGFzIGEgcHJlc2VudCBmcm9tIFN5cmFjdXNlLCB3aGVyZSBHZWxvIHdhcyB0eXJhbnQuIE1vc3Qgb2YgdGhlIHBlb3BsZSB3ZXJlIGNvbnNlcXVlbnRseSBpbiBncmVhdCBob3BlLCBleHBlY3RpbmcgdGhhdCB0aGUgY2l0eSB3b3VsZCBiZSBkZWxpdmVyZWQgYm90aCBmcm9tIGl0cyBzY2FyY2l0eSBhbmQgaXRzIGRpc2NvcmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUsIGFjY29yZGluZ2x5LCB3YXMgY29udmVuZWQgYXQgb25jZSwgYW5kIHRoZSBwZW9wbGUsIGZsb2NraW5nIGFib3V0IHRoZSBzZW5hdGUtaG91c2UsIGF3YWl0ZWQgdGhlIHJlc3VsdCBvZiBpdHMgZGVsaWJlcmF0aW9ucy4gVGhleSBleHBlY3RlZCB0aGF0IHRoZSBtYXJrZXQtcHJpY2UgZm9yIGdyYWluIHdvdWxkIG5vdyBiZSBtb2RlcmF0ZSwgYW5kIHRoYXQgd2hhdCBoYWQgYmVlbiBzZW50IGFzIGEgcHJlc2VudCB3b3VsZCBiZSBkaXN0cmlidXRlZCBncmF0aXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3ZXJlIHNvbWUgaW4gdGhlIHNlbmF0ZSB3aG8gc28gYWR2aXNlZCB0aGF0IGJvZHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNYXJjaXVzIHJvc2UgaW4gaGlzIHBsYWNlIGFuZCB2ZWhlbWVudGx5IGF0dGFja2VkIHRob3NlIHdobyBmYXZvdXJlZCB0aGUgbXVsdGl0dWRlLCBjYWxsaW5nIHRoZW0gZGVtYWdvZ3VlcyBhbmQgYmV0cmF5ZXJzIG9mIHRoZSBhcmlzdG9jcmFjeSwgYW5kIGRlY2xhcmluZyB0aGF0IHRoZXkgd2VyZSBub3VyaXNoaW5nLCB0byB0aGVpciBvd24gaGFybSwgdGhlIGV2aWwgc2VlZHMgb2YgYm9sZG5lc3MgYW5kIGluc29sZW5jZSB3aGljaCBoYWQgYmVlbiBzb3duIGFtb25nIHRoZSByYWJibGU7IHRoZXNlIHRoZXkgc2hvdWxkIGhhdmUgY2hva2VkIHdoZW4gdGhleSBmaXJzdCBzcHJhbmcgdXAsIGFuZCBub3QgaGF2ZSBzdHJlbmd0aGVuZWQgdGhlIHBlb3BsZSBieSBzdWNoIGEgcG93ZXJmdWwgbWFnaXN0cmFjeSBhcyB0aGUgdHJpYnVuYXRlLiBCdXQgbm93IHRoZWlyIGJvZHkgd2FzIGZvcm1pZGFibGUsIGJlY2F1c2UgaXQgZ290IGV2ZXJ5dGhpbmcgdGhhdCBpdCBkZXNpcmVkLCBhbGxvd2VkIG5vIGNvbnN0cmFpbnQgdXBvbiBpdHMgd2lsbCwgYW5kIHJlZnVzZWQgdG8gb2JleSB0aGUgY29uc3VscywgYnV0IGhhZCB0aGVpciBvd24gbGVhZGVycyBpbiBhbmFyY2h5LCB3aG9tIHRoZXkgc3R5bGVkIHRoZWlyIHJ1bGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VG8gc2l0IHRoZXJlLCBtb3Jlb3Zlciwgdm90aW5nIHN1Y2ggYSBwZW9wbGUgbGFyZ2Vzc2VzIGFuZCBzdXBwbGllcywgbGlrZSB0aG9zZSBHcmVla3Mgd2hlcmUgZGVtb2NyYWN5IGlzIG1vc3QgZXh0cmVtZSwgaGUgc2FpZCB3YXMgbm90aGluZyBtb3JlIG5vciBsZXNzIHRoYW4gbWFpbnRhaW5pbmcgdGhlbSBpbiB0aGVpciBkaXNvYmVkaWVuY2UsIHRvIHRoZSBjb21tb24gZGVzdHJ1Y3Rpb24gb2YgYWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIHRoZXkgc3VyZWx5IHdpbGwgbm90IHNheSB0aGF0IHRoZXkgYXJlIGdldHRpbmcgdGhlc2UgYXMgYSBncmF0ZWZ1bCByZXR1cm4gZm9yIHRoZSBtaWxpdGFyeSBzZXJ2aWNlcyB3aGljaCB0aGV5IG9taXR0ZWQsIGFuZCB0aGUgc2VjZXNzaW9ucyBieSB3aGljaCB0aGV5IHJlbm91bmNlZCB0aGVpciBjb3VudHJ5LCBhbmQgdGhlIGNhbHVtbmllcyBhZ2FpbnN0IHRoZSBzZW5hdGUgd2hpY2ggdGhleSBoYXZlIGNvdW50ZW5hbmNlZC4gVGhleSB3aWxsIHJhdGhlciBiZSBjb25maWRlbnQgdGhhdCB5b3VyIGZlYXJzIGRyaXZlIHlvdSB0byBzdWJzZXJ2aWVuY3kgYW5kIGZsYXR0ZXJ5IHdoZW4geW91IG1ha2UgdGhlbSB0aGVzZSBnaWZ0cyBhbmQgY29uY2Vzc2lvbnMsIGFuZCB3aWxsIHNldCBubyBsaW1pdCB0byB0aGVpciBkaXNvYmVkaWVuY2UsIG5vciBjZWFzZSBmcm9tIHRoZWlyIHF1YXJyZWxzIGFuZCBzZWRpdGlvbnMuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGFjdGlvbiBvbiBvdXIgcGFydCB3b3VsZCB0aGVyZWZvcmUgYmUgc2hlZXIgbWFkbmVzczsgYnV0IGlmIHdlIGFyZSB3aXNlLCB3ZSBzaGFsbCB0YWtlIHRoZWlyIHRyaWJ1bmF0ZSBhd2F5IGZyb20gdGhlbSwgZm9yIGl0IG1ha2VzIHRoZSBjb25zdWxzaGlwIG51bGwgYW5kIHZvaWQsIGFuZCBkaXZpZGVzIHRoZSBjaXR5LiBUaGlzIGlzIG5vIGxvbmdlciBvbmUsIGFzIGJlZm9yZSwgYnV0IGhhcyBiZWVuIGN1dCBpbiB0d28sIHNvIHRoYXQgd2UgY2FuIG5ldmVyIGdyb3cgdG9nZXRoZXIgYWdhaW4sIG9yIGJlIG9mIG9uZSBtaW5kLCBvciBjZWFzZSBhZmZsaWN0aW5nIGFuZCBjb25mb3VuZGluZyBvbmUgYW5vdGhlci48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG1lYW50aW1lIGdyYWluIGNhbWUgdG8gUm9tZSwgYSBncmVhdCBwYXJ0IG9mIGl0IGJvdWdodCBpbiBJdGFseSwgYnV0IGFuIGVxdWFsIGFtb3VudCBzZW50IGFzIGEgcHJlc2VudCBmcm9tIFN5cmFjdXNlLCB3aGVyZSBHZWxvIHdhcyB0eXJhbnQuIE1vc3Qgb2YgdGhlIHBlb3BsZSB3ZXJlIGNvbnNlcXVlbnRseSBpbiBncmVhdCBob3BlLCBleHBlY3RpbmcgdGhhdCB0aGUgY2l0eSB3b3VsZCBiZSBkZWxpdmVyZWQgYm90aCBmcm9tIGl0cyBzY2FyY2l0eSBhbmQgaXRzIGRpc2NvcmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUsIGFjY29yZGluZ2x5LCB3YXMgY29udmVuZWQgYXQgb25jZSwgYW5kIHRoZSBwZW9wbGUsIGZsb2NraW5nIGFib3V0IHRoZSBzZW5hdGUtaG91c2UsIGF3YWl0ZWQgdGhlIHJlc3VsdCBvZiBpdHMgZGVsaWJlcmF0aW9ucy4gVGhleSBleHBlY3RlZCB0aGF0IHRoZSBtYXJrZXQtcHJpY2UgZm9yIGdyYWluIHdvdWxkIG5vdyBiZSBtb2RlcmF0ZSwgYW5kIHRoYXQgd2hhdCBoYWQgYmVlbiBzZW50IGFzIGEgcHJlc2VudCB3b3VsZCBiZSBkaXN0cmlidXRlZCBncmF0aXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3ZXJlIHNvbWUgaW4gdGhlIHNlbmF0ZSB3aG8gc28gYWR2aXNlZCB0aGF0IGJvZHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNYXJjaXVzIHJvc2UgaW4gaGlzIHBsYWNlIGFuZCB2ZWhlbWVudGx5IGF0dGFja2VkIHRob3NlIHdobyBmYXZvdXJlZCB0aGUgbXVsdGl0dWRlLCBjYWxsaW5nIHRoZW0gZGVtYWdvZ3VlcyBhbmQgYmV0cmF5ZXJzIG9mIHRoZSBhcmlzdG9jcmFjeSwgYW5kIGRlY2xhcmluZyB0aGF0IHRoZXkgd2VyZSBub3VyaXNoaW5nLCB0byB0aGVpciBvd24gaGFybSwgdGhlIGV2aWwgc2VlZHMgb2YgYm9sZG5lc3MgYW5kIGluc29sZW5jZSB3aGljaCBoYWQgYmVlbiBzb3duIGFtb25nIHRoZSByYWJibGU7IHRoZXNlIHRoZXkgc2hvdWxkIGhhdmUgY2hva2VkIHdoZW4gdGhleSBmaXJzdCBzcHJhbmcgdXAsIGFuZCBub3QgaGF2ZSBzdHJlbmd0aGVuZWQgdGhlIHBlb3BsZSBieSBzdWNoIGEgcG93ZXJmdWwgbWFnaXN0cmFjeSBhcyB0aGUgdHJpYnVuYXRlLiBCdXQgbm93IHRoZWlyIGJvZHkgd2FzIGZvcm1pZGFibGUsIGJlY2F1c2UgaXQgZ290IGV2ZXJ5dGhpbmcgdGhhdCBpdCBkZXNpcmVkLCBhbGxvd2VkIG5vIGNvbnN0cmFpbnQgdXBvbiBpdHMgd2lsbCwgYW5kIHJlZnVzZWQgdG8gb2JleSB0aGUgY29uc3VscywgYnV0IGhhZCB0aGVpciBvd24gbGVhZGVycyBpbiBhbmFyY2h5LCB3aG9tIHRoZXkgc3R5bGVkIHRoZWlyIHJ1bGVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIHNpdCB0aGVyZSwgbW9yZW92ZXIsIHZvdGluZyBzdWNoIGEgcGVvcGxlIGxhcmdlc3NlcyBhbmQgc3VwcGxpZXMsIGxpa2UgdGhvc2UgR3JlZWtzIHdoZXJlIGRlbW9jcmFjeSBpcyBtb3N0IGV4dHJlbWUsIGhlIHNhaWQgd2FzIG5vdGhpbmcgbW9yZSBub3IgbGVzcyB0aGFuIG1haW50YWluaW5nIHRoZW0gaW4gdGhlaXIgZGlzb2JlZGllbmNlLCB0byB0aGUgY29tbW9uIGRlc3RydWN0aW9uIG9mIGFsbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciB0aGV5IHN1cmVseSB3aWxsIG5vdCBzYXkgdGhhdCB0aGV5IGFyZSBnZXR0aW5nIHRoZXNlIGFzIGEgZ3JhdGVmdWwgcmV0dXJuIGZvciB0aGUgbWlsaXRhcnkgc2VydmljZXMgd2hpY2ggdGhleSBvbWl0dGVkLCBhbmQgdGhlIHNlY2Vzc2lvbnMgYnkgd2hpY2ggdGhleSByZW5vdW5jZWQgdGhlaXIgY291bnRyeSwgYW5kIHRoZSBjYWx1bW5pZXMgYWdhaW5zdCB0aGUgc2VuYXRlIHdoaWNoIHRoZXkgaGF2ZSBjb3VudGVuYW5jZWQuIFRoZXkgd2lsbCByYXRoZXIgYmUgY29uZmlkZW50IHRoYXQgeW91ciBmZWFycyBkcml2ZSB5b3UgdG8gc3Vic2VydmllbmN5IGFuZCBmbGF0dGVyeSB3aGVuIHlvdSBtYWtlIHRoZW0gdGhlc2UgZ2lmdHMgYW5kIGNvbmNlc3Npb25zLCBhbmQgd2lsbCBzZXQgbm8gbGltaXQgdG8gdGhlaXIgZGlzb2JlZGllbmNlLCBub3IgY2Vhc2UgZnJvbSB0aGVpciBxdWFycmVscyBhbmQgc2VkaXRpb25zLiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGFjdGlvbiBvbiBvdXIgcGFydCB3b3VsZCB0aGVyZWZvcmUgYmUgc2hlZXIgbWFkbmVzczsgYnV0IGlmIHdlIGFyZSB3aXNlLCB3ZSBzaGFsbCB0YWtlIHRoZWlyIHRyaWJ1bmF0ZSBhd2F5IGZyb20gdGhlbSwgZm9yIGl0IG1ha2VzIHRoZSBjb25zdWxzaGlwIG51bGwgYW5kIHZvaWQsIGFuZCBkaXZpZGVzIHRoZSBjaXR5LiBUaGlzIGlzIG5vIGxvbmdlciBvbmUsIGFzIGJlZm9yZSwgYnV0IGhhcyBiZWVuIGN1dCBpbiB0d28sIHNvIHRoYXQgd2UgY2FuIG5ldmVyIGdyb3cgdG9nZXRoZXIgYWdhaW4sIG9yIGJlIG9mIG9uZSBtaW5kLCBvciBjZWFzZSBhZmZsaWN0aW5nIGFuZCBjb25mb3VuZGluZyBvbmUgYW5vdGhlci48L3E+CgkJCSAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggYWN0aW9uIG9uIG91ciBwYXJ0IHdvdWxkIHRoZXJlZm9yZSBiZSBzaGVlciBtYWRuZXNzOyBidXQgaWYgd2UgYXJlIHdpc2UsIHdlIHNoYWxsIHRha2UgdGhlaXIgdHJpYnVuYXRlIGF3YXkgZnJvbSB0aGVtLCBmb3IgaXQgbWFrZXMgdGhlIGNvbnN1bHNoaXAgbnVsbCBhbmQgdm9pZCwgYW5kIGRpdmlkZXMgdGhlIGNpdHkuIFRoaXMgaXMgbm8gbG9uZ2VyIG9uZSwgYXMgYmVmb3JlLCBidXQgaGFzIGJlZW4gY3V0IGluIHR3bywgc28gdGhhdCB3ZSBjYW4gbmV2ZXIgZ3JvdyB0b2dldGhlciBhZ2Fpbiwgb3IgYmUgb2Ygb25lIG1pbmQsIG9yIGNlYXNlIGFmZmxpY3RpbmcgYW5kIGNvbmZvdW5kaW5nIG9uZSBhbm90aGVyLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCVdpdGggbWFueSBzdWNoIHdvcmRzIGFzIHRoZXNlIE1hcmNpdXMgd2FzIGJleW9uZCBtZWFzdXJlIHN1Y2Nlc3NmdWwgaW4gZmlsbGluZyB0aGUgeW91bmdlciBzZW5hdG9ycywgYW5kIGFsbW9zdCBhbGwgdGhlIHdlYWx0aHkgb25lcywgd2l0aCBoaXMgb3duIGZpZXJjZSBlbnRodXNpYXNtLCBhbmQgdGhleSBjcmllZCBvdXQgdGhhdCBoZSB3YXMgdGhlIG9ubHkgbWFuIGluIHRoZSBjaXR5IHdobyBkaXNkYWluZWQgc3VibWlzc2lvbiBhbmQgZmxhdHRlcnkuIEJ1dCBzb21lIG9mIHRoZSBvbGRlciBzZW5hdG9ycyBvcHBvc2VkIGhpbSwgc3VzcGVjdGluZyB0aGUgb3V0Y29tZS4gQW5kIHRoZSBvdXRjb21lIHdhcyB3aG9sbHkgYmFkLiBGb3IgdGhlIHRyaWJ1bmVzIHdlcmUgcHJlc2VudCwgYW5kIHdoZW4gdGhleSBzYXcgdGhhdCB0aGUgcHJvcG9zYWwgb2YgTWFyY2l1cyB3YXMgbGlrZWx5IHRvIHByZXZhaWwsIHRoZXkgcmFuIG91dCBhbW9uZyB0aGUgY3Jvd2Qgd2l0aCBsb3VkIGNyaWVzLCBjYWxsaW5nIHVwb24gdGhlIHBsZWJlaWFucyB0byByYWxseSB0byB0aGVpciBoZWxwLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZXJlIHdhcyBhIHN0b3JteSBzZXNzaW9uIG9mIHRoZSBhc3NlbWJseSwgYW5kIHdoZW4gdGhlIHNwZWVjaCBvZiBNYXJjaXVzIHdhcyByZXBvcnRlZCB0byBpdCwgdGhlIHBlb3BsZSB3ZXJlIGNhcnJpZWQgYXdheSB3aXRoIGZ1cnkgYW5kIGFsbW9zdCBidXJzdCBpbiB1cG9uIHRoZSBzZW5hdGUuIEJ1dCB0aGUgdHJpYnVuZXMgbWFkZSB0aGVpciBmb3JtYWwgZGVudW5jaWF0aW9uIG9mIE1hcmNpdXMsIGFuZCBzdW1tb25lZCBoaW0gYnkgbWVzc2VuZ2VyIHRvIGNvbWUgYmVmb3JlIHRoZW0gYW5kIG1ha2UgaGlzIGRlZmVuY2UuIEFuZCB3aGVuIGhlIGluc29sZW50bHkgZHJvdmUgYXdheSB0aGUgb2ZmaWNlcnMgd2hvIGJyb3VnaHQgdGhlaXIgbWVzc2FnZSwgdGhleSB3ZW50IHRoZW1zZWx2ZXMsIGF0dGVuZGVkIGJ5IHRoZSBhZWRpbGVzLCB0byBicmluZyBoaW0gYnkgZm9yY2UsIGFuZCB0cmllZCB0byBsYXkgaGFuZHMgdXBvbiBoaXMgcGVyc29uLiBCdXQgdGhlIHBhdHJpY2lhbnMsIGJhbmRpbmcgdG9nZXRoZXIsIGRyb3ZlIHRoZSB0cmlidW5lcyBhd2F5LCBhbmQgYWN0dWFsbHkgYmVhdCB0aGUgYWVkaWxlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlXaXRoIG1hbnkgc3VjaCB3b3JkcyBhcyB0aGVzZSBNYXJjaXVzIHdhcyBiZXlvbmQgbWVhc3VyZSBzdWNjZXNzZnVsIGluIGZpbGxpbmcgdGhlIHlvdW5nZXIgc2VuYXRvcnMsIGFuZCBhbG1vc3QgYWxsIHRoZSB3ZWFsdGh5IG9uZXMsIHdpdGggaGlzIG93biBmaWVyY2UgZW50aHVzaWFzbSwgYW5kIHRoZXkgY3JpZWQgb3V0IHRoYXQgaGUgd2FzIHRoZSBvbmx5IG1hbiBpbiB0aGUgY2l0eSB3aG8gZGlzZGFpbmVkIHN1Ym1pc3Npb24gYW5kIGZsYXR0ZXJ5LiBCdXQgc29tZSBvZiB0aGUgb2xkZXIgc2VuYXRvcnMgb3Bwb3NlZCBoaW0sIHN1c3BlY3RpbmcgdGhlIG91dGNvbWUuIEFuZCB0aGUgb3V0Y29tZSB3YXMgd2hvbGx5IGJhZC4gRm9yIHRoZSB0cmlidW5lcyB3ZXJlIHByZXNlbnQsIGFuZCB3aGVuIHRoZXkgc2F3IHRoYXQgdGhlIHByb3Bvc2FsIG9mIE1hcmNpdXMgd2FzIGxpa2VseSB0byBwcmV2YWlsLCB0aGV5IHJhbiBvdXQgYW1vbmcgdGhlIGNyb3dkIHdpdGggbG91ZCBjcmllcywgY2FsbGluZyB1cG9uIHRoZSBwbGViZWlhbnMgdG8gcmFsbHkgdG8gdGhlaXIgaGVscC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlcmUgd2FzIGEgc3Rvcm15IHNlc3Npb24gb2YgdGhlIGFzc2VtYmx5LCBhbmQgd2hlbiB0aGUgc3BlZWNoIG9mIE1hcmNpdXMgd2FzIHJlcG9ydGVkIHRvIGl0LCB0aGUgcGVvcGxlIHdlcmUgY2FycmllZCBhd2F5IHdpdGggZnVyeSBhbmQgYWxtb3N0IGJ1cnN0IGluIHVwb24gdGhlIHNlbmF0ZS4gQnV0IHRoZSB0cmlidW5lcyBtYWRlIHRoZWlyIGZvcm1hbCBkZW51bmNpYXRpb24gb2YgTWFyY2l1cywgYW5kIHN1bW1vbmVkIGhpbSBieSBtZXNzZW5nZXIgdG8gY29tZSBiZWZvcmUgdGhlbSBhbmQgbWFrZSBoaXMgZGVmZW5jZS4gQW5kIHdoZW4gaGUgaW5zb2xlbnRseSBkcm92ZSBhd2F5IHRoZSBvZmZpY2VycyB3aG8gYnJvdWdodCB0aGVpciBtZXNzYWdlLCB0aGV5IHdlbnQgdGhlbXNlbHZlcywgYXR0ZW5kZWQgYnkgdGhlIGFlZGlsZXMsIHRvIGJyaW5nIGhpbSBieSBmb3JjZSwgYW5kIHRyaWVkIHRvIGxheSBoYW5kcyB1cG9uIGhpcyBwZXJzb24uIEJ1dCB0aGUgcGF0cmljaWFucywgYmFuZGluZyB0b2dldGhlciwgZHJvdmUgdGhlIHRyaWJ1bmVzIGF3YXksIGFuZCBhY3R1YWxseSBiZWF0IHRoZSBhZWRpbGVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CeSB0aGlzIHRpbWUsIHRoZW4sIGV2ZW5pbmcgaGFkIGZhbGxlbiwgd2hpY2ggcHV0IGFuIGVuZCB0byB0aGUgdHVtdWx0OyBidXQgYXMgc29vbiBhcyBpdCB3YXMgZGF5LCB0aGUgZXhhc3BlcmF0ZWQgcGVvcGxlIGNhbWUgcnVubmluZyB0b2dldGhlciBmcm9tIGFsbCBxdWFydGVycyBpbnRvIHRoZSBmb3J1bS4gV2hlbiB0aGUgY29uc3VscyBzYXcgdGhpcywgdGhleSB3ZXJlIGFsYXJtZWQgZm9yIHRoZSBjaXR5LCBhbmQgY29udmVuaW5nIHRoZSBzZW5hdGUsIHVyZ2VkIHRoZW0gdG8gY29uc2lkZXIgaG93LCBieSByZWFzb25hYmxlIHByb3Bvc2FscyBhbmQgc3VpdGFibGUgcmVzb2x1dGlvbnMsIHRoZXkgbWlnaHQgc29vdGhlIGFuZCBwYWNpZnkgdGhlIG11bHRpdHVkZSwgc2luY2UgaXQgd2FzIG5vdCBhIHRpbWUgZm9yIGFtYml0aW91cyByaXZhbHJ5LCBub3Igd291bGQgdGhleSBiZSB3aXNlIGluIGNvbnRlbmRpbmcgZm9yIHRoZWlyIGRpZ25pdHksIGJ1dCB0aGUgY3Jpc2lzIHdhcyBzZXZlcmUgYW5kIGNyaXRpY2FsLCBhbmQgZGVtYW5kZWQgbWVhc3VyZXMgdGhhdCB3ZXJlIGNvbnNpZGVyYXRlIGFuZCBodW1hbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYWpvcml0eSBvZiB0aGUgc2VuYXRlIGFjY2VkaW5nIHRvIHRoZXNlIHZpZXdzLCB0aGUgY29uc3VscyB3ZW50IG91dCBhbmQgcmVhc29uZWQgd2l0aCB0aGUgcGVvcGxlIGFzIHdlbGwgYXMgdGhleSBjb3VsZCwgYW5kIHRyaWVkIHRvIG1vbGxpZnkgdGhlbSwgYW5zd2VyaW5nIHRoZWlyIGFjY3VzYXRpb25zIGluIGEgcmVhc29uYWJsZSBtYW5uZXIsIGFuZCBtYWtpbmcgb25seSBhIG1vZGVyYXRlIHVzZSBvZiBhZG1vbml0aW9uIGFuZCByZWJ1a2U7IGFzIHJlZ2FyZGVkIHRoZSBwcmljZSBvZiBwcm92aXNpb25zIGFuZCBtYXJrZXQgc3VwcGxpZXMsIHRoZXkgZGVjbGFyZWQgdGhlcmUgc2hvdWxkIGJlIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ5IHRoaXMgdGltZSwgdGhlbiwgZXZlbmluZyBoYWQgZmFsbGVuLCB3aGljaCBwdXQgYW4gZW5kIHRvIHRoZSB0dW11bHQ7IGJ1dCBhcyBzb29uIGFzIGl0IHdhcyBkYXksIHRoZSBleGFzcGVyYXRlZCBwZW9wbGUgY2FtZSBydW5uaW5nIHRvZ2V0aGVyIGZyb20gYWxsIHF1YXJ0ZXJzIGludG8gdGhlIGZvcnVtLiBXaGVuIHRoZSBjb25zdWxzIHNhdyB0aGlzLCB0aGV5IHdlcmUgYWxhcm1lZCBmb3IgdGhlIGNpdHksIGFuZCBjb252ZW5pbmcgdGhlIHNlbmF0ZSwgdXJnZWQgdGhlbSB0byBjb25zaWRlciBob3csIGJ5IHJlYXNvbmFibGUgcHJvcG9zYWxzIGFuZCBzdWl0YWJsZSByZXNvbHV0aW9ucywgdGhleSBtaWdodCBzb290aGUgYW5kIHBhY2lmeSB0aGUgbXVsdGl0dWRlLCBzaW5jZSBpdCB3YXMgbm90IGEgdGltZSBmb3IgYW1iaXRpb3VzIHJpdmFscnksIG5vciB3b3VsZCB0aGV5IGJlIHdpc2UgaW4gY29udGVuZGluZyBmb3IgdGhlaXIgZGlnbml0eSwgYnV0IHRoZSBjcmlzaXMgd2FzIHNldmVyZSBhbmQgY3JpdGljYWwsIGFuZCBkZW1hbmRlZCBtZWFzdXJlcyB0aGF0IHdlcmUgY29uc2lkZXJhdGUgYW5kIGh1bWFuZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYWpvcml0eSBvZiB0aGUgc2VuYXRlIGFjY2VkaW5nIHRvIHRoZXNlIHZpZXdzLCB0aGUgY29uc3VscyB3ZW50IG91dCBhbmQgcmVhc29uZWQgd2l0aCB0aGUgcGVvcGxlIGFzIHdlbGwgYXMgdGhleSBjb3VsZCwgYW5kIHRyaWVkIHRvIG1vbGxpZnkgdGhlbSwgYW5zd2VyaW5nIHRoZWlyIGFjY3VzYXRpb25zIGluIGEgcmVhc29uYWJsZSBtYW5uZXIsIGFuZCBtYWtpbmcgb25seSBhIG1vZGVyYXRlIHVzZSBvZiBhZG1vbml0aW9uIGFuZCByZWJ1a2U7IGFzIHJlZ2FyZGVkIHRoZSBwcmljZSBvZiBwcm92aXNpb25zIGFuZCBtYXJrZXQgc3VwcGxpZXMsIHRoZXkgZGVjbGFyZWQgdGhlcmUgc2hvdWxkIGJlIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGVtLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgcGVvcGxlIHNob3dlZCBzaWducyBvZiByZWxlbnRpbmcsIGFuZCBpdCB3YXMgZXZpZGVudCwgZnJvbSB0aGVpciBkZWNvcm91cyBhbmQgc29iZXIgYXR0ZW50aW9uLCB0aGF0IHRoZXkgd2VyZSBvbiB0aGUgd2F5IHRvIGJlIGNvbnRyb2xsZWQgYW5kIHdvbiBvdmVyLiBUaGVuIHRoZSB0cmlidW5lcyByb3NlIGFuZCBkZWNsYXJlZCB0aGF0IHNpbmNlIHRoZSBzZW5hdGUgd2FzIG5vdyBhY3Rpbmcgc29iZXJseSwgdGhlIHBlb3BsZSBpbiB0aGVpciB0dXJuIHdvdWxkIG1ha2Ugc3VjaCBjb25jZXNzaW9ucyBhcyB3ZXJlIGZhaXIgYW5kIGhvbm91cmFibGUuIFRoZXkgaW5zaXN0ZWQsIGhvd2V2ZXIsIHRoYXQgTWFyY2l1cyBzaG91bGQgbWFrZSBhbnN3ZXIgdG8gdGhlIGZvbGxvd2luZyBjaGFyZ2VzOiBDb3VsZCBoZSBkZW55IHRoYXQgaGUgaGFkIGluc3RpZ2F0ZWQgdGhlIHNlbmF0ZSB0byB2aW9sYXRlIHRoZSBjb25zdGl0dXRpb24gYW5kIGFicm9nYXRlIHRoZSBwb3dlcnMgb2YgdGhlIHBlb3BsZT8gV2hlbiBzdW1tb25lZCB0byBhcHBlYXIgYmVmb3JlIHRoZW0sIGhhZCBoZSBub3QgcmVmdXNlZD8gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGZpbmFsbHksIGJ5IGluc3VsdGluZyBhbmQgYmVhdGluZyB0aGUgYWVkaWxlcyBpbiB0aGUgZm9ydW0sIGhhZCBoZSBub3QgZG9uZSBhbGwgaW4gaGlzIHBvd2VyIHRvIGluY2l0ZSB0aGUgY2l0aXplbnMgdG8gYXJtcyBhbmQgYnJpbmcgYWJvdXQgYSBjaXZpbCB3YXI/IFRoZXkgbWFkZSB0aGlzIGRlbWFuZCB3aXRoIGEgZGVzaXJlIGVpdGhlciB0aGF0IE1hcmNpdXMgc2hvdWxkIGJlIHB1YmxpY2x5IGh1bWlsaWF0ZWQsIGlmOyBjb250cmFyeSB0byBoaXMgbmF0dXJlLCBoZSBjdXJiZWQgaGlzIGhhdWdodHkgc3Bpcml0IGFuZCBzdWVkIGZvciB0aGUgZmF2b3VyIG9mIHRoZSBwZW9wbGU7IG9yLCBpZiBoZSB5aWVsZGVkIHRvIGhpcyBuYXR1cmFsIHByb21wdGluZ3MsIHRoYXQgaGUgc2hvdWxkIGRvIHNvbWV0aGluZyB3aGljaCB3b3VsZCBqdXN0aWZ5IHRoZWlyIHdyYXRoIGFnYWluc3QgaGltIGFuZCBtYWtlIGl0IGltcGxhY2FibGUuIFRoZSBsYXR0ZXIgd2FzIHdoYXQgdGhleSB0aGUgcmF0aGVyIGV4cGVjdGVkLCBhbmQgdGhleSByaWdodGx5IGVzdGltYXRlZCB0aGUgbWFuJ3MgY2hhcmFjdGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIHBlb3BsZSBzaG93ZWQgc2lnbnMgb2YgcmVsZW50aW5nLCBhbmQgaXQgd2FzIGV2aWRlbnQsIGZyb20gdGhlaXIgZGVjb3JvdXMgYW5kIHNvYmVyIGF0dGVudGlvbiwgdGhhdCB0aGV5IHdlcmUgb24gdGhlIHdheSB0byBiZSBjb250cm9sbGVkIGFuZCB3b24gb3Zlci4gVGhlbiB0aGUgdHJpYnVuZXMgcm9zZSBhbmQgZGVjbGFyZWQgdGhhdCBzaW5jZSB0aGUgc2VuYXRlIHdhcyBub3cgYWN0aW5nIHNvYmVybHksIHRoZSBwZW9wbGUgaW4gdGhlaXIgdHVybiB3b3VsZCBtYWtlIHN1Y2ggY29uY2Vzc2lvbnMgYXMgd2VyZSBmYWlyIGFuZCBob25vdXJhYmxlLiBUaGV5IGluc2lzdGVkLCBob3dldmVyLCB0aGF0IE1hcmNpdXMgc2hvdWxkIG1ha2UgYW5zd2VyIHRvIHRoZSBmb2xsb3dpbmcgY2hhcmdlczogQ291bGQgaGUgZGVueSB0aGF0IGhlIGhhZCBpbnN0aWdhdGVkIHRoZSBzZW5hdGUgdG8gdmlvbGF0ZSB0aGUgY29uc3RpdHV0aW9uIGFuZCBhYnJvZ2F0ZSB0aGUgcG93ZXJzIG9mIHRoZSBwZW9wbGU/IFdoZW4gc3VtbW9uZWQgdG8gYXBwZWFyIGJlZm9yZSB0aGVtLCBoYWQgaGUgbm90IHJlZnVzZWQ/IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCBieSBpbnN1bHRpbmcgYW5kIGJlYXRpbmcgdGhlIGFlZGlsZXMgaW4gdGhlIGZvcnVtLCBoYWQgaGUgbm90IGRvbmUgYWxsIGluIGhpcyBwb3dlciB0byBpbmNpdGUgdGhlIGNpdGl6ZW5zIHRvIGFybXMgYW5kIGJyaW5nIGFib3V0IGEgY2l2aWwgd2FyPyBUaGV5IG1hZGUgdGhpcyBkZW1hbmQgd2l0aCBhIGRlc2lyZSBlaXRoZXIgdGhhdCBNYXJjaXVzIHNob3VsZCBiZSBwdWJsaWNseSBodW1pbGlhdGVkLCBpZjsgY29udHJhcnkgdG8gaGlzIG5hdHVyZSwgaGUgY3VyYmVkIGhpcyBoYXVnaHR5IHNwaXJpdCBhbmQgc3VlZCBmb3IgdGhlIGZhdm91ciBvZiB0aGUgcGVvcGxlOyBvciwgaWYgaGUgeWllbGRlZCB0byBoaXMgbmF0dXJhbCBwcm9tcHRpbmdzLCB0aGF0IGhlIHNob3VsZCBkbyBzb21ldGhpbmcgd2hpY2ggd291bGQganVzdGlmeSB0aGVpciB3cmF0aCBhZ2FpbnN0IGhpbSBhbmQgbWFrZSBpdCBpbXBsYWNhYmxlLiBUaGUgbGF0dGVyIHdhcyB3aGF0IHRoZXkgdGhlIHJhdGhlciBleHBlY3RlZCwgYW5kIHRoZXkgcmlnaHRseSBlc3RpbWF0ZWQgdGhlIG1hbidzIGNoYXJhY3Rlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGNhbWUgYW5kIHN0b29kIGJlZm9yZSB0aGVtIGFzIG9uZSB3aG8gd291bGQgZGVmZW5kIGhpbXNlbGY7IGFuZCB0aGUgcGVvcGxlIHdlcmUgcXVpZXQgYW5kIHNpbGVudCBpbiBoaXMgcHJlc2VuY2UuIEJ1dCB3aGVuLCBpbnN0ZWFkIG9mIHRoZSBtb3JlIG9yIGxlc3MgZGVwcmVjYXRvcnkgbGFuZ3VhZ2UgZXhwZWN0ZWQgYnkgaGlzIGF1ZGllbmNlLCBoZSBiZWdhbiBub3Qgb25seSB0byBlbXBsb3kgYW4gb2ZmZW5zaXZlIGJvbGRuZXNzIG9mIHNwZWVjaCwgd2hpY2ggYXQgbGFzdCBiZWNhbWUgYWN0dWFsIGRlbnVuY2lhdGlvbiwgYnV0IGFsc28gdG8gc2hvdywgYnkgdGhlIHRvbmUgb2YgaGlzIHZvaWNlIGFuZCB0aGUgY2FzdCBvZiBoaXMgY291bnRlbmFuY2UsIHRoYXQgaGlzIGZlYXJsZXNzbmVzcyB3YXMgbm90IGZhciByZW1vdmVkIGZyb20gZGlzZGFpbiBhbmQgY29udGVtcHQsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnRoZW4gdGhlIHBlb3BsZSB3YXMgZXhhc3BlcmF0ZWQsIGFuZCBnYXZlIGV2aWRlbnQgc2lnbnMgdGhhdCBoaXMgd29yZHMgcm91c2VkIHRoZWlyIGltcGF0aWVuY2UgYW5kIGluZGlnbmF0aW9uLiBVcG9uIHRoaXMsIFNpY2luaXVzLCB0aGUgYm9sZGVzdCBvZiB0aGUgdHJpYnVuZXMsIGFmdGVyIGEgYnJpZWYgY29uZmVyZW5jZSB3aXRoIGhpcyBjb2xsZWFndWVzLCBtYWRlIGZvcm1hbCBwcm9jbGFtYXRpb24gdGhhdCBNYXJjaXVzIHdhcyBjb25kZW1uZWQgdG8gZGVhdGggYnkgdGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUsIGFuZCBvcmRlcmVkIHRoZSBhZWRpbGVzIHRvIHRha2UgaGltIHVwIHRvIHRoZSBUYXJwZWlhbiByb2NrIGF0IG9uY2UsIGFuZCBjYXN0IGhpbSBkb3duIHRoZSBjbGlmZiBiZWxvdy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIGFlZGlsZXMgbGFpZCBob2xkIG9mIGhpcyBwZXJzb24sIGl0IHNlZW1lZCwgZXZlbiB0byBtYW55IG9mIHRoZSBwbGViZWlhbnMsIGEgaG9ycmlibGUgYW5kIG1vbnN0cm91cyBhY3Q7IHRoZSBwYXRyaWNpYW5zLCBtb3Jlb3ZlciwgdXR0ZXJseSBiZXNpZGUgdGhlbXNlbHZlcywgZGlzdHJlc3NlZCBhbmQgaG9ycm9yIHN0cmlja2VuLCBydXNoZWQgd2l0aCBsb3VkIGNyaWVzIHRvIGhpcyBhaWQuIFNvbWUgb2YgdGhlbSBhY3R1YWxseSBwdXNoZWQgYXdheSB0aGUgb2ZmaWNlcnMgbWFraW5nIHRoZSBhcnJlc3QsIGFuZCBnb3QgTWFyY2l1cyBhbW9uZyB0aGVtc2VsdmVzOyAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5zb21lIHN0cmV0Y2hlZCBvdXQgdGhlaXIgaGFuZHMgaW4gc3VwcGxpY2F0aW9uIG9mIHRoZSBtdWx0aXR1ZGUsIHNpbmNlIHdvcmRzIGFuZCBjcmllcyB3ZXJlIG9mIG5vIGF2YWlsIGFtaWQgc3VjaCBkaXNvcmRlciBhbmQgY29uZnVzaW9uLiBBdCBsYXN0IHRoZSBmcmllbmRzIGFuZCBraW5kcmVkIG9mIHRoZSB0cmlidW5lcywgcGVyY2VpdmluZyB0aGF0IGl0IHdhcyBpbXBvc3NpYmxlLCB3aXRob3V0IHNsYXlpbmcgbWFueSBwYXRyaWNpYW5zLCB0byBsZWFkIE1hcmNpdXMgYXdheSBhbmQgcHVuaXNoIGhpbSwgcGVyc3VhZGVkIHRoZW0gdG8gcmVtaXQgd2hhdCB3YXMgdW51c3VhbCBhbmQgb3BwcmVzc2l2ZSBpbiBoaXMgc2VudGVuY2UsIG5vdCB0byB1c2UgdmlvbGVuY2UgYW5kIHB1dCBoaW0gdG8gZGVhdGggd2l0aG91dCBhIHRyaWFsLCBidXQgdG8gc3VycmVuZGVyIGhpbSBhbmQgcmVmZXIgaGlzIGNhc2UgdG8gdGhlIHBlb3BsZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBTaWNpbml1cywgYmVjb21pbmcgY2FsbSwgYXNrZWQgdGhlIHBhdHJpY2lhbnMgd2hhdCB0aGV5IG1lYW50IGJ5IHRha2luZyBNYXJjaXVzIGF3YXkgZnJvbSB0aGUgcGVvcGxlIHdoZW4gaXQgd2lzaGVkIHRvIHB1bmlzaCBoaW0uIEJ1dCB0aGUgcGF0cmljaWFucyBhc2tlZCBpbiB0aGVpciB0dXJuOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgdGhlbiBpcyB5b3VyIHB1cnBvc2UsIGFuZCB3aGF0IGRvIHllIG1lYW4sIGJ5IHRodXMgZHJhZ2dpbmcgb25lIG9mIHRoZSBmb3JlbW9zdCBtZW4gb2YgUm9tZSwgd2l0aG91dCBhIHRyaWFsLCB0byBhIHNhdmFnZSBhbmQgaWxsZWdhbCBwdW5pc2htZW50PzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCB0aGVuLDwvcT4gc2FpZCBTaWNpbml1cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj55ZSBzaGFsbCBub3QgaGF2ZSBhbnkgc3VjaCBleGN1c2UgZm9yIGZhY3Rpb3VzIHF1YXJyZWwgd2l0aCB0aGUgcGVvcGxlOyBmb3IgdGhleSBncmFudCB5b3VyIGRlbWFuZCB0aGF0IHRoZSBtYW4gaGF2ZSBhIHRyaWFsLiBBbmQgd2UgY2l0ZSB0aGVlLCBNYXJjaXVzLCB0byBhcHBlYXIgYmVmb3JlIHRoZSBjaXRpemVucyBvbiB0aGUgdGhpcmQgbWFya2V0LWRheSBlbnN1aW5nLCBhbmQgY29udmluY2UgdGhlbSwgaWYgeW91IGNhbiwgb2YgeW91ciBpbm5vY2VuY2UsIGFzc3VyZWQgdGhhdCB0aGV5IHdpbGwgZGVjaWRlIHlvdXIgY2FzZSBieSB2b3RlLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBjYW1lIGFuZCBzdG9vZCBiZWZvcmUgdGhlbSBhcyBvbmUgd2hvIHdvdWxkIGRlZmVuZCBoaW1zZWxmOyBhbmQgdGhlIHBlb3BsZSB3ZXJlIHF1aWV0IGFuZCBzaWxlbnQgaW4gaGlzIHByZXNlbmNlLiBCdXQgd2hlbiwgaW5zdGVhZCBvZiB0aGUgbW9yZSBvciBsZXNzIGRlcHJlY2F0b3J5IGxhbmd1YWdlIGV4cGVjdGVkIGJ5IGhpcyBhdWRpZW5jZSwgaGUgYmVnYW4gbm90IG9ubHkgdG8gZW1wbG95IGFuIG9mZmVuc2l2ZSBib2xkbmVzcyBvZiBzcGVlY2gsIHdoaWNoIGF0IGxhc3QgYmVjYW1lIGFjdHVhbCBkZW51bmNpYXRpb24sIGJ1dCBhbHNvIHRvIHNob3csIGJ5IHRoZSB0b25lIG9mIGhpcyB2b2ljZSBhbmQgdGhlIGNhc3Qgb2YgaGlzIGNvdW50ZW5hbmNlLCB0aGF0IGhpcyBmZWFybGVzc25lc3Mgd2FzIG5vdCBmYXIgcmVtb3ZlZCBmcm9tIGRpc2RhaW4gYW5kIGNvbnRlbXB0LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnRoZW4gdGhlIHBlb3BsZSB3YXMgZXhhc3BlcmF0ZWQsIGFuZCBnYXZlIGV2aWRlbnQgc2lnbnMgdGhhdCBoaXMgd29yZHMgcm91c2VkIHRoZWlyIGltcGF0aWVuY2UgYW5kIGluZGlnbmF0aW9uLiBVcG9uIHRoaXMsIFNpY2luaXVzLCB0aGUgYm9sZGVzdCBvZiB0aGUgdHJpYnVuZXMsIGFmdGVyIGEgYnJpZWYgY29uZmVyZW5jZSB3aXRoIGhpcyBjb2xsZWFndWVzLCBtYWRlIGZvcm1hbCBwcm9jbGFtYXRpb24gdGhhdCBNYXJjaXVzIHdhcyBjb25kZW1uZWQgdG8gZGVhdGggYnkgdGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUsIGFuZCBvcmRlcmVkIHRoZSBhZWRpbGVzIHRvIHRha2UgaGltIHVwIHRvIHRoZSBUYXJwZWlhbiByb2NrIGF0IG9uY2UsIGFuZCBjYXN0IGhpbSBkb3duIHRoZSBjbGlmZiBiZWxvdy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBhZWRpbGVzIGxhaWQgaG9sZCBvZiBoaXMgcGVyc29uLCBpdCBzZWVtZWQsIGV2ZW4gdG8gbWFueSBvZiB0aGUgcGxlYmVpYW5zLCBhIGhvcnJpYmxlIGFuZCBtb25zdHJvdXMgYWN0OyB0aGUgcGF0cmljaWFucywgbW9yZW92ZXIsIHV0dGVybHkgYmVzaWRlIHRoZW1zZWx2ZXMsIGRpc3RyZXNzZWQgYW5kIGhvcnJvciBzdHJpY2tlbiwgcnVzaGVkIHdpdGggbG91ZCBjcmllcyB0byBoaXMgYWlkLiBTb21lIG9mIHRoZW0gYWN0dWFsbHkgcHVzaGVkIGF3YXkgdGhlIG9mZmljZXJzIG1ha2luZyB0aGUgYXJyZXN0LCBhbmQgZ290IE1hcmNpdXMgYW1vbmcgdGhlbXNlbHZlczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnNvbWUgc3RyZXRjaGVkIG91dCB0aGVpciBoYW5kcyBpbiBzdXBwbGljYXRpb24gb2YgdGhlIG11bHRpdHVkZSwgc2luY2Ugd29yZHMgYW5kIGNyaWVzIHdlcmUgb2Ygbm8gYXZhaWwgYW1pZCBzdWNoIGRpc29yZGVyIGFuZCBjb25mdXNpb24uIEF0IGxhc3QgdGhlIGZyaWVuZHMgYW5kIGtpbmRyZWQgb2YgdGhlIHRyaWJ1bmVzLCBwZXJjZWl2aW5nIHRoYXQgaXQgd2FzIGltcG9zc2libGUsIHdpdGhvdXQgc2xheWluZyBtYW55IHBhdHJpY2lhbnMsIHRvIGxlYWQgTWFyY2l1cyBhd2F5IGFuZCBwdW5pc2ggaGltLCBwZXJzdWFkZWQgdGhlbSB0byByZW1pdCB3aGF0IHdhcyB1bnVzdWFsIGFuZCBvcHByZXNzaXZlIGluIGhpcyBzZW50ZW5jZSwgbm90IHRvIHVzZSB2aW9sZW5jZSBhbmQgcHV0IGhpbSB0byBkZWF0aCB3aXRob3V0IGEgdHJpYWwsIGJ1dCB0byBzdXJyZW5kZXIgaGltIGFuZCByZWZlciBoaXMgY2FzZSB0byB0aGUgcGVvcGxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gU2ljaW5pdXMsIGJlY29taW5nIGNhbG0sIGFza2VkIHRoZSBwYXRyaWNpYW5zIHdoYXQgdGhleSBtZWFudCBieSB0YWtpbmcgTWFyY2l1cyBhd2F5IGZyb20gdGhlIHBlb3BsZSB3aGVuIGl0IHdpc2hlZCB0byBwdW5pc2ggaGltLiBCdXQgdGhlIHBhdHJpY2lhbnMgYXNrZWQgaW4gdGhlaXIgdHVybjogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgdGhlbiBpcyB5b3VyIHB1cnBvc2UsIGFuZCB3aGF0IGRvIHllIG1lYW4sIGJ5IHRodXMgZHJhZ2dpbmcgb25lIG9mIHRoZSBmb3JlbW9zdCBtZW4gb2YgUm9tZSwgd2l0aG91dCBhIHRyaWFsLCB0byBhIHNhdmFnZSBhbmQgaWxsZWdhbCBwdW5pc2htZW50PzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwgdGhlbiw8L3E+IHNhaWQgU2ljaW5pdXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj55ZSBzaGFsbCBub3QgaGF2ZSBhbnkgc3VjaCBleGN1c2UgZm9yIGZhY3Rpb3VzIHF1YXJyZWwgd2l0aCB0aGUgcGVvcGxlOyBmb3IgdGhleSBncmFudCB5b3VyIGRlbWFuZCB0aGF0IHRoZSBtYW4gaGF2ZSBhIHRyaWFsLiBBbmQgd2UgY2l0ZSB0aGVlLCBNYXJjaXVzLCB0byBhcHBlYXIgYmVmb3JlIHRoZSBjaXRpemVucyBvbiB0aGUgdGhpcmQgbWFya2V0LWRheSBlbnN1aW5nLCBhbmQgY29udmluY2UgdGhlbSwgaWYgeW91IGNhbiwgb2YgeW91ciBpbm5vY2VuY2UsIGFzc3VyZWQgdGhhdCB0aGV5IHdpbGwgZGVjaWRlIHlvdXIgY2FzZSBieSB2b3RlLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSB0aW1lIGJlaW5nLCB0aGVuLCB0aGUgcGF0cmljaWFucyB3ZXJlIHNhdGlzZmllZCB3aXRoIHRoaXMgdHJ1Y2UsIGFuZCB3ZW50IGF3YXkgaW4gZ2xhZCBwb3NzZXNzaW9uIG9mIE1hcmNpdXMuIEJ1dCBpbiB0aGUgdGltZSB3aGljaCBpbnRlcnZlbmVkIGJlZm9yZSB0aGUgdGhpcmQgbWFya2V0LWRheSAoZm9yIHRoZSBSb21hbnMgaG9sZCB0aGVpciBtYXJrZXRzIGV2ZXJ5IG5pbnRoIGRheSwgY2FsbGluZyB0aGVtLCB0aGVyZWZvcmUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bnVuZGluYWU8L3E+KSwgYSBjYW1wYWlnbiB3YXMgdW5kZXJ0YWtlbiBhZ2FpbnN0IHRoZSBjaXR5IG9mIEFudGl1bSwgd2hpY2ggbGVkIHRoZW0gdG8gaG9wZSB0aGF0IHRoZSBpc3N1ZSBtaWdodCBiZSBhdm9pZGVkIGFsdG9nZXRoZXIuIFRoZSBjYW1wYWlnbiB3b3VsZCBsYXN0IGxvbmcgZW5vdWdoLCB0aGV5IHRob3VnaHQsIGZvciB0aGUgcGVvcGxlIHRvIGJlY29tZSB0cmFjdGFibGUsIGFmdGVyIHRoZWlyIHJhZ2UgaGFkIGxhbmd1aXNoZWQgb3IgYWx0b2dldGhlciBkaXNhcHBlYXJlZCBieSByZWFzb24gb2YgdGhlaXIgb2NjdXBhdGlvbiB3aXRoIHRoZSB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBwcmVzZW50bHksIHdoZW4gdGhlIGNpdGl6ZW5zIHJldHVybmVkIGhvbWUgYWZ0ZXIgYSBzcGVlZHkgc2V0dGxlbWVudCBvZiB0aGVpciBkaXNwdXRlIHdpdGggQW50aXVtLCB0aGUgcGF0cmljaWFucyB3ZXJlIGluIGZyZXF1ZW50IGNvbmNsYXZlLCBiZWluZyBmdWxsIG9mIGZlYXIsIGFuZCBkZWxpYmVyYXRpbmcgaG93IHRoZXkgbWlnaHQgbm90IHN1cnJlbmRlciBNYXJjaXVzLCBhbmQgeWV0IHByZXZlbnQgdGhlIHBvcHVsYXIgbGVhZGVycyBmcm9tIHRocm93aW5nIHRoZSBwZW9wbGUgYWdhaW4gaW50byB0dW11bHQgYW5kIGRpc29yZGVyLiBBcHBpdXMgQ2xhdWRpdXMsIGluZGVlZCwgd2hvIHdhcyBjb3VudGVkIGFtb25nIHRob3NlIG1vc3QgaG9zdGlsZSB0byB0aGUgY2xhaW1zIG9mIHRoZSBwZW9wbGUsIHNhaWQgd2l0aCBhbGwgc29sZW1uaXR5IHRoYXQgdGhlIHNlbmF0ZSB3b3VsZCBkZXN0cm95IGl0c2VsZiBhbmQgdXR0ZXJseSBiZXRyYXkgdGhlIGdvdmVybm1lbnQgb2YgdGhlIGNpdHksIGlmIGl0IHNob3VsZCBzdWZmZXIgdGhlIHBlb3BsZSB0byB3aWVsZCB0aGVpciB2b3RlIGluIGp1ZGdlbWVudCBvbiB0aGUgcGF0cmljaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBvbGRlc3Qgc2VuYXRvcnMsIGFuZCB0aG9zZSBtb3N0IGluY2xpbmVkIHRvIGZhdm91ciB0aGUgcGVvcGxlLCBtYWludGFpbmVkIG9uIHRoZSBjb250cmFyeSB0aGF0IGl0IHdvdWxkIG5vdCBiZSByZW5kZXJlZCBoYXJzaCBvciBzZXZlcmUgYnkgaXRzIGV4ZXJjaXNlIG9mIHRoaXMgcG93ZXIsIGJ1dCBtaWxkIGFuZCBodW1hbmU7IGZvciBzaW5jZSBpdCBkaWQgbm90IGRlc3Bpc2UgdGhlIHNlbmF0ZSwgYnV0IHJhdGhlciB0aG91Z2h0IGl0c2VsZiBkZXNwaXNlZCBieSB0aGF0IGJvZHksIHRoZSBwcmVyb2dhdGl2ZSBvZiB0cnlpbmcgYSBzZW5hdG9yIHdvdWxkIGJlIGEgc29sYWNlIHRvIGl0cyBmZWVsaW5ncyBhbmQgYSBtYXJrIG9mIGhvbm91ciwgc28gdGhhdCBhcyBzb29uIGFzIGl0IHByb2NlZWRlZCB0byB2b3RlIGl0IHdvdWxkIGxheSBhc2lkZSBpdHMgd3JhdGguCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSB0aW1lIGJlaW5nLCB0aGVuLCB0aGUgcGF0cmljaWFucyB3ZXJlIHNhdGlzZmllZCB3aXRoIHRoaXMgdHJ1Y2UsIGFuZCB3ZW50IGF3YXkgaW4gZ2xhZCBwb3NzZXNzaW9uIG9mIE1hcmNpdXMuIEJ1dCBpbiB0aGUgdGltZSB3aGljaCBpbnRlcnZlbmVkIGJlZm9yZSB0aGUgdGhpcmQgbWFya2V0LWRheSAoZm9yIHRoZSBSb21hbnMgaG9sZCB0aGVpciBtYXJrZXRzIGV2ZXJ5IG5pbnRoIGRheSwgY2FsbGluZyB0aGVtLCB0aGVyZWZvcmUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5udW5kaW5hZTwvcT4pLCBhIGNhbXBhaWduIHdhcyB1bmRlcnRha2VuIGFnYWluc3QgdGhlIGNpdHkgb2YgQW50aXVtLCB3aGljaCBsZWQgdGhlbSB0byBob3BlIHRoYXQgdGhlIGlzc3VlIG1pZ2h0IGJlIGF2b2lkZWQgYWx0b2dldGhlci4gVGhlIGNhbXBhaWduIHdvdWxkIGxhc3QgbG9uZyBlbm91Z2gsIHRoZXkgdGhvdWdodCwgZm9yIHRoZSBwZW9wbGUgdG8gYmVjb21lIHRyYWN0YWJsZSwgYWZ0ZXIgdGhlaXIgcmFnZSBoYWQgbGFuZ3Vpc2hlZCBvciBhbHRvZ2V0aGVyIGRpc2FwcGVhcmVkIGJ5IHJlYXNvbiBvZiB0aGVpciBvY2N1cGF0aW9uIHdpdGggdGhlIHdhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBwcmVzZW50bHksIHdoZW4gdGhlIGNpdGl6ZW5zIHJldHVybmVkIGhvbWUgYWZ0ZXIgYSBzcGVlZHkgc2V0dGxlbWVudCBvZiB0aGVpciBkaXNwdXRlIHdpdGggQW50aXVtLCB0aGUgcGF0cmljaWFucyB3ZXJlIGluIGZyZXF1ZW50IGNvbmNsYXZlLCBiZWluZyBmdWxsIG9mIGZlYXIsIGFuZCBkZWxpYmVyYXRpbmcgaG93IHRoZXkgbWlnaHQgbm90IHN1cnJlbmRlciBNYXJjaXVzLCBhbmQgeWV0IHByZXZlbnQgdGhlIHBvcHVsYXIgbGVhZGVycyBmcm9tIHRocm93aW5nIHRoZSBwZW9wbGUgYWdhaW4gaW50byB0dW11bHQgYW5kIGRpc29yZGVyLiBBcHBpdXMgQ2xhdWRpdXMsIGluZGVlZCwgd2hvIHdhcyBjb3VudGVkIGFtb25nIHRob3NlIG1vc3QgaG9zdGlsZSB0byB0aGUgY2xhaW1zIG9mIHRoZSBwZW9wbGUsIHNhaWQgd2l0aCBhbGwgc29sZW1uaXR5IHRoYXQgdGhlIHNlbmF0ZSB3b3VsZCBkZXN0cm95IGl0c2VsZiBhbmQgdXR0ZXJseSBiZXRyYXkgdGhlIGdvdmVybm1lbnQgb2YgdGhlIGNpdHksIGlmIGl0IHNob3VsZCBzdWZmZXIgdGhlIHBlb3BsZSB0byB3aWVsZCB0aGVpciB2b3RlIGluIGp1ZGdlbWVudCBvbiB0aGUgcGF0cmljaWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgb2xkZXN0IHNlbmF0b3JzLCBhbmQgdGhvc2UgbW9zdCBpbmNsaW5lZCB0byBmYXZvdXIgdGhlIHBlb3BsZSwgbWFpbnRhaW5lZCBvbiB0aGUgY29udHJhcnkgdGhhdCBpdCB3b3VsZCBub3QgYmUgcmVuZGVyZWQgaGFyc2ggb3Igc2V2ZXJlIGJ5IGl0cyBleGVyY2lzZSBvZiB0aGlzIHBvd2VyLCBidXQgbWlsZCBhbmQgaHVtYW5lOyBmb3Igc2luY2UgaXQgZGlkIG5vdCBkZXNwaXNlIHRoZSBzZW5hdGUsIGJ1dCByYXRoZXIgdGhvdWdodCBpdHNlbGYgZGVzcGlzZWQgYnkgdGhhdCBib2R5LCB0aGUgcHJlcm9nYXRpdmUgb2YgdHJ5aW5nIGEgc2VuYXRvciB3b3VsZCBiZSBhIHNvbGFjZSB0byBpdHMgZmVlbGluZ3MgYW5kIGEgbWFyayBvZiBob25vdXIsIHNvIHRoYXQgYXMgc29vbiBhcyBpdCBwcm9jZWVkZWQgdG8gdm90ZSBpdCB3b3VsZCBsYXkgYXNpZGUgaXRzIHdyYXRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NYXJjaXVzLCB0aGVyZWZvcmUsIHNlZWluZyB0aGF0IHRoZSBzZW5hdGUgd2FzIGluIHN1c3BlbnNlIGJldHdlZW4gaXRzIGtpbmRseSBmZWVsaW5ncyB0b3dhcmRzIGhpbSBhbmQgaXRzIGZlYXIgb2YgdGhlIHBlb3BsZSwgYXNrZWQgdGhlIHRyaWJ1bmVzIHdoYXQgdGhlIGFjY3VzYXRpb25zIGFnYWluc3QgaGltIHdlcmUsIGFuZCBvbiB3aGF0IGNoYXJnZSBoZSB3b3VsZCBiZSB0cmllZCBpZiB0aGV5IGxlZCBoaW0gYmVmb3JlIHRoZSBwZW9wbGUuIFRoZXkgcmVwbGllZCB0aGF0IHRoZSBjaGFyZ2UgYWdhaW5zdCBoaW0gd2FzIHVzdXJwYXRpb24sIGFuZCB0aGF0IHRoZXkgd291bGQgcHJvdmUgaGltIGd1aWx0eSBvZiBwbGFubmluZyBhIHVzdXJwYXRpb24gb2YgdGhlIGdvdmVybm1lbnQuIFRoZXJldXBvbiBoZSByb3NlIG9mIGhpcyBvd24gYWNjb3JkIGFuZCBzYWlkIGhlIHdhcyBnb2luZyBhdCBvbmNlIGJlZm9yZSB0aGUgcGVvcGxlIHRvIG1ha2UgaGlzIGRlZmVuY2UsIGFuZCB3b3VsZCBkZXByZWNhdGUgbm8gbWFubmVyIG9mIHRyaWFsLCBub3IsIHNob3VsZCBoZSBiZSBmb3VuZCBndWlsdHksIGFueSBmb3JtIG9mIHB1bmlzaG1lbnQ7IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T25seSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c2VlIHRoYXQgeWUgY29uZmluZSB5b3Vyc2VsdmVzIHRvIHRoZSBjaGFyZ2UgbWVudGlvbmVkLCBhbmQgZG8gbm90IHBsYXkgZmFsc2Ugd2l0aCB0aGUgc2VuYXRlLjwvcT4gVGhlIHRyaWJ1bmVzIGFncmVlZCB0byB0aGlzLCBhbmQgb24gdGhlc2UgdGVybXMgdGhlIHRyaWFsIHdhcyBoZWxkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFyY2l1cywgdGhlcmVmb3JlLCBzZWVpbmcgdGhhdCB0aGUgc2VuYXRlIHdhcyBpbiBzdXNwZW5zZSBiZXR3ZWVuIGl0cyBraW5kbHkgZmVlbGluZ3MgdG93YXJkcyBoaW0gYW5kIGl0cyBmZWFyIG9mIHRoZSBwZW9wbGUsIGFza2VkIHRoZSB0cmlidW5lcyB3aGF0IHRoZSBhY2N1c2F0aW9ucyBhZ2FpbnN0IGhpbSB3ZXJlLCBhbmQgb24gd2hhdCBjaGFyZ2UgaGUgd291bGQgYmUgdHJpZWQgaWYgdGhleSBsZWQgaGltIGJlZm9yZSB0aGUgcGVvcGxlLiBUaGV5IHJlcGxpZWQgdGhhdCB0aGUgY2hhcmdlIGFnYWluc3QgaGltIHdhcyB1c3VycGF0aW9uLCBhbmQgdGhhdCB0aGV5IHdvdWxkIHByb3ZlIGhpbSBndWlsdHkgb2YgcGxhbm5pbmcgYSB1c3VycGF0aW9uIG9mIHRoZSBnb3Zlcm5tZW50LiBUaGVyZXVwb24gaGUgcm9zZSBvZiBoaXMgb3duIGFjY29yZCBhbmQgc2FpZCBoZSB3YXMgZ29pbmcgYXQgb25jZSBiZWZvcmUgdGhlIHBlb3BsZSB0byBtYWtlIGhpcyBkZWZlbmNlLCBhbmQgd291bGQgZGVwcmVjYXRlIG5vIG1hbm5lciBvZiB0cmlhbCwgbm9yLCBzaG91bGQgaGUgYmUgZm91bmQgZ3VpbHR5LCBhbnkgZm9ybSBvZiBwdW5pc2htZW50OyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T25seSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zZWUgdGhhdCB5ZSBjb25maW5lIHlvdXJzZWx2ZXMgdG8gdGhlIGNoYXJnZSBtZW50aW9uZWQsIGFuZCBkbyBub3QgcGxheSBmYWxzZSB3aXRoIHRoZSBzZW5hdGUuPC9xPiBUaGUgdHJpYnVuZXMgYWdyZWVkIHRvIHRoaXMsIGFuZCBvbiB0aGVzZSB0ZXJtcyB0aGUgdHJpYWwgd2FzIGhlbGQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBwZW9wbGUgd2VyZSBjb21lIHRvZ2V0aGVyLCBpbiB0aGUgZmlyc3QgcGxhY2UsIHRoZSB0cmlidW5lcyBpbnNpc3RlZCB0aGF0IHRoZSB2b3RlcyBiZSBjYXN0IG5vdCBieSBjZW50dXJpZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T3V0IG9mIHRoZSAxOTMgY2VudHVyaWVzLCB0aGUgcmljaGVzdCBjbGFzcyBhbG9uZSBoYWQgOTgsIGFnYWluc3QgOTUgb2YgYWxsIHRoZSBvdGhlciBmaXZlIGNsYXNzZXMgcHV0IHRvZ2V0aGVyLjwvbm90ZT4gYnV0IGJ5IHRyaWJlcywgdGh1cyBtYWtpbmcgdGhlIGluZGlnZW50IGFuZCBvZmZpY2lvdXMgcmFiYmxlLCB3aGljaCBoYWQgbm8gdGhvdWdodCBvZiBob25vdXIsIHN1cGVyaW9yIGluIHZvdGluZyBwb3dlciB0byB0aGUgd2VhbHRoeSBhbmQgd2VsbCBrbm93biBjaXRpemVucyBvZiB0aGUgbWlsaXRhcnkgY2xhc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIGFiYW5kb25pbmcgdGhlIGNoYXJnZSBvZiB1c3VycGF0aW9uLCB3aGljaCBjb3VsZCBub3QgYmUgcHJvdmVuLCB0aGV5IGR3ZWx0IGFnYWluIHVwb24gdGhlIHNwZWVjaCB3aGljaCBNYXJjaXVzIGhhZCBwcmV2aW91c2x5IG1hZGUgaW4gdGhlIHNlbmF0ZSwgd2hlbiBoZSBwcm90ZXN0ZWQgYWdhaW5zdCB0aGUgbG93ZXJpbmcgb2YgdGhlIG1hcmtldC1wcmljZSBvZiBncmFpbiwgYW5kIHVyZ2VkIHRoZW0gdG8gdGFrZSB0aGUgdHJpYnVuYXRlIGF3YXkgZnJvbSB0aGUgcGVvcGxlLiBUaGV5IGFsc28gYWRkZWQgYSBmcmVzaCBjaGFyZ2UgYWdhaW5zdCBoaW0sIG5hbWVseSwgaGlzIGRpc3RyaWJ1dGlvbiBvZiB0aGUgc3BvaWxzIHdoaWNoIGhlIGhhZCB0YWtlbiBmcm9tIHRoZSBjb3VudHJ5IG9mIEFudGl1bTsgdGhlc2UsIHRoZXkgc2FpZCwgaGUgaGFkIG5vdCB0dXJuZWQgaW50byB0aGUgcHVibGljIHRyZWFzdXJ5LCBidXQgaGFkIGRpc3RyaWJ1dGVkIHRoZW0gYW1vbmcgdGhvc2Ugd2hvIG1hZGUgdGhlIGNhbXBhaWduIHdpdGggaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CeSB0aGlzIGFjY3VzYXRpb24gTWFyY2l1cyBpcyBzYWlkIHRvIGhhdmUgYmVlbiBtb3JlIGRpc3R1cmJlZCB0aGFuIGJ5IGFsbCB0aGUgcmVzdC4gRm9yIGhlIGhhZCBub3QgZXhwZWN0ZWQgaXQsIGFuZCB3YXMgbm90IHJlYWR5IGF0IG9uY2Ugd2l0aCBhbiBhbnN3ZXIgd2hpY2ggd291bGQgc2F0aXNmeSB0aGUgcGVvcGxlLCBidXQgYmVnYW4gdG8gcHJhaXNlIHRob3NlIHdobyBoYWQgbWFkZSB0aGUgY2FtcGFpZ24sIHdoZXJldXBvbiBoZSB3YXMgY2xhbW9yb3VzbHkgaW50ZXJydXB0ZWQgYnkgdGhvc2Ugd2hvIGhhZCBub3QgbWFkZSBpdCwgYW5kIHRoZXkgd2VyZSB0aGUgbW9yZSBudW1lcm91cy4gSW4gdGhlIGVuZCwgdGhlcmVmb3JlLCB0aGUgdm90ZSB3YXMgdGFrZW4gYnkgdHJpYmVzLCBhbmQgYSBtYWpvcml0eSBvZiB0aHJlZSBjb25kZW1uZWQgaGltPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuNjQiPkRpb255c2l1cyBIYWwuICh2aWkuIDY0KTwvYmlibD4gc2F5cyB0aGF0IG5pbmUgb2YgdGhlIHR3ZW50eS1vbmUgdHJpYmVzIHZvdGVkIHRvIGFjcXVpdCBNYXJjaXVzLjwvbm90ZT4gVGhlIHBlbmFsdHkgYXNzaWduZWQgd2FzIHBlcnBldHVhbCBiYW5pc2htZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgcmVzdWx0IHdhcyBhbm5vdW5jZWQsIHRoZSBwZW9wbGUgd2VudCBvZmYgaW4gZ3JlYXRlciBlbGF0aW9uIGFuZCBkZWxpZ2h0IHRoYW4gdGhleSBoYWQgZXZlciBzaG93biBmb3IgYW55IHZpY3RvcnkgaW4gYmF0dGxlIG92ZXIgdGhlaXIgZW5lbWllczsgYnV0IHRoZSBzZW5hdGUgd2FzIGluIGRpc3RyZXNzIGFuZCBkaXJlIGRlamVjdGlvbiwgcmVwZW50aW5nIG5vdyBhbmQgdmV4ZWQgdG8gdGhlIHNvdWwgdGhhdCB0aGV5IGhhZCBub3QgZG9uZSBhbmQgc3VmZmVyZWQgYWxsIHRoaW5ncyByYXRoZXIgdGhhbiBhbGxvdyB0aGUgcGVvcGxlIHRvIGluc3VsdCB0aGVtIGluIHRoZSBleGVyY2lzZSBvZiBzdWNoIGdyZWF0IHBvd2Vycy4gQW5kIHRoZXJlIHdhcyBubyBuZWVkIG5vdyBvZiBkcmVzcyBvciBvdGhlciBtYXJrcyBvZiBkaXN0aW5jdGlvbiBpbiB0ZWxsaW5nIG9uZSBjbGFzcyBmcm9tIGFub3RoZXIsIGJ1dCBpdCB3YXMgY2xlYXIgYXQgb25jZSB0aGF0IGhlIHdobyByZWpvaWNlZCB3YXMgYSBwbGViZWlhbiwgYW5kIGhlIHdobyB3YXMgdmV4ZWQsIGEgcGF0cmljaWFuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBwZW9wbGUgd2VyZSBjb21lIHRvZ2V0aGVyLCBpbiB0aGUgZmlyc3QgcGxhY2UsIHRoZSB0cmlidW5lcyBpbnNpc3RlZCB0aGF0IHRoZSB2b3RlcyBiZSBjYXN0IG5vdCBieSBjZW50dXJpZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PdXQgb2YgdGhlIDE5MyBjZW50dXJpZXMsIHRoZSByaWNoZXN0IGNsYXNzIGFsb25lIGhhZCA5OCwgYWdhaW5zdCA5NSBvZiBhbGwgdGhlIG90aGVyIGZpdmUgY2xhc3NlcyBwdXQgdG9nZXRoZXIuPC9ub3RlPiBidXQgYnkgdHJpYmVzLCB0aHVzIG1ha2luZyB0aGUgaW5kaWdlbnQgYW5kIG9mZmljaW91cyByYWJibGUsIHdoaWNoIGhhZCBubyB0aG91Z2h0IG9mIGhvbm91ciwgc3VwZXJpb3IgaW4gdm90aW5nIHBvd2VyIHRvIHRoZSB3ZWFsdGh5IGFuZCB3ZWxsIGtub3duIGNpdGl6ZW5zIG9mIHRoZSBtaWxpdGFyeSBjbGFzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIGFiYW5kb25pbmcgdGhlIGNoYXJnZSBvZiB1c3VycGF0aW9uLCB3aGljaCBjb3VsZCBub3QgYmUgcHJvdmVuLCB0aGV5IGR3ZWx0IGFnYWluIHVwb24gdGhlIHNwZWVjaCB3aGljaCBNYXJjaXVzIGhhZCBwcmV2aW91c2x5IG1hZGUgaW4gdGhlIHNlbmF0ZSwgd2hlbiBoZSBwcm90ZXN0ZWQgYWdhaW5zdCB0aGUgbG93ZXJpbmcgb2YgdGhlIG1hcmtldC1wcmljZSBvZiBncmFpbiwgYW5kIHVyZ2VkIHRoZW0gdG8gdGFrZSB0aGUgdHJpYnVuYXRlIGF3YXkgZnJvbSB0aGUgcGVvcGxlLiBUaGV5IGFsc28gYWRkZWQgYSBmcmVzaCBjaGFyZ2UgYWdhaW5zdCBoaW0sIG5hbWVseSwgaGlzIGRpc3RyaWJ1dGlvbiBvZiB0aGUgc3BvaWxzIHdoaWNoIGhlIGhhZCB0YWtlbiBmcm9tIHRoZSBjb3VudHJ5IG9mIEFudGl1bTsgdGhlc2UsIHRoZXkgc2FpZCwgaGUgaGFkIG5vdCB0dXJuZWQgaW50byB0aGUgcHVibGljIHRyZWFzdXJ5LCBidXQgaGFkIGRpc3RyaWJ1dGVkIHRoZW0gYW1vbmcgdGhvc2Ugd2hvIG1hZGUgdGhlIGNhbXBhaWduIHdpdGggaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ5IHRoaXMgYWNjdXNhdGlvbiBNYXJjaXVzIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIG1vcmUgZGlzdHVyYmVkIHRoYW4gYnkgYWxsIHRoZSByZXN0LiBGb3IgaGUgaGFkIG5vdCBleHBlY3RlZCBpdCwgYW5kIHdhcyBub3QgcmVhZHkgYXQgb25jZSB3aXRoIGFuIGFuc3dlciB3aGljaCB3b3VsZCBzYXRpc2Z5IHRoZSBwZW9wbGUsIGJ1dCBiZWdhbiB0byBwcmFpc2UgdGhvc2Ugd2hvIGhhZCBtYWRlIHRoZSBjYW1wYWlnbiwgd2hlcmV1cG9uIGhlIHdhcyBjbGFtb3JvdXNseSBpbnRlcnJ1cHRlZCBieSB0aG9zZSB3aG8gaGFkIG5vdCBtYWRlIGl0LCBhbmQgdGhleSB3ZXJlIHRoZSBtb3JlIG51bWVyb3VzLiBJbiB0aGUgZW5kLCB0aGVyZWZvcmUsIHRoZSB2b3RlIHdhcyB0YWtlbiBieSB0cmliZXMsIGFuZCBhIG1ham9yaXR5IG9mIHRocmVlIGNvbmRlbW5lZCBoaW08bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuNjQiPkRpb255c2l1cyBIYWwuICh2aWkuIDY0KTwvYmlibD4gc2F5cyB0aGF0IG5pbmUgb2YgdGhlIHR3ZW50eS1vbmUgdHJpYmVzIHZvdGVkIHRvIGFjcXVpdCBNYXJjaXVzLjwvbm90ZT4gVGhlIHBlbmFsdHkgYXNzaWduZWQgd2FzIHBlcnBldHVhbCBiYW5pc2htZW50LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gNy42NCI+RGlvbnlzaXVzIEhhbC4gKHZpaS4gNjQpPC9iaWJsPiBzYXlzIHRoYXQgbmluZSBvZiB0aGUgdHdlbnR5LW9uZSB0cmliZXMgdm90ZWQgdG8gYWNxdWl0IE1hcmNpdXMuPC90cmFuc2xhdGlvbj4="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSByZXN1bHQgd2FzIGFubm91bmNlZCwgdGhlIHBlb3BsZSB3ZW50IG9mZiBpbiBncmVhdGVyIGVsYXRpb24gYW5kIGRlbGlnaHQgdGhhbiB0aGV5IGhhZCBldmVyIHNob3duIGZvciBhbnkgdmljdG9yeSBpbiBiYXR0bGUgb3ZlciB0aGVpciBlbmVtaWVzOyBidXQgdGhlIHNlbmF0ZSB3YXMgaW4gZGlzdHJlc3MgYW5kIGRpcmUgZGVqZWN0aW9uLCByZXBlbnRpbmcgbm93IGFuZCB2ZXhlZCB0byB0aGUgc291bCB0aGF0IHRoZXkgaGFkIG5vdCBkb25lIGFuZCBzdWZmZXJlZCBhbGwgdGhpbmdzIHJhdGhlciB0aGFuIGFsbG93IHRoZSBwZW9wbGUgdG8gaW5zdWx0IHRoZW0gaW4gdGhlIGV4ZXJjaXNlIG9mIHN1Y2ggZ3JlYXQgcG93ZXJzLiBBbmQgdGhlcmUgd2FzIG5vIG5lZWQgbm93IG9mIGRyZXNzIG9yIG90aGVyIG1hcmtzIG9mIGRpc3RpbmN0aW9uIGluIHRlbGxpbmcgb25lIGNsYXNzIGZyb20gYW5vdGhlciwgYnV0IGl0IHdhcyBjbGVhciBhdCBvbmNlIHRoYXQgaGUgd2hvIHJlam9pY2VkIHdhcyBhIHBsZWJlaWFuLCBhbmQgaGUgd2hvIHdhcyB2ZXhlZCwgYSBwYXRyaWNpYW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFsYmVpdCBNYXJjaXVzIGhpbXNlbGY7IHdobyB3YXMgbmVpdGhlciBkYXVudGVkIG5vciBodW1ibGVkLCBidXQgaW4gbWllbiwgcG9ydCwgYW5kIGNvdW50ZW5hbmNlIGZ1bGx5IGNvbXBvc2VkLCBzZWVtZWQgdGhlIG9ubHkgbWFuIGFtb25nIGFsbCB0aGUgZGlzdHJlc3NlZCBwYXRyaWNpYW5zIHdobyB3YXMgbm90IHRvdWNoZWQgYnkgaGlzIGV2aWwgcGxpZ2h0LiBBbmQgdGhpcyB3YXMgbm90IGR1ZSB0byBjYWxjdWxhdGlvbiwgb3IgZ2VudGxlbmVzcywgb3IgdG8gYSBjYWxtIGVuZHVyYW5jZSBvZiBoaXMgZmF0ZSwgYnV0IGhlIHdhcyBzdGlycmVkIGJ5IHJhZ2UgYW5kIGRlZXAgcmVzZW50bWVudCwgYW5kIHRoaXMsIGFsdGhvdWdoIHRoZSBtYW55IGtub3cgaXQgbm90LCBpcyBwYWluLiBGb3Igd2hlbiBwYWluIGlzIHRyYW5zbXV0ZWQgaW50byBhbmdlciwgaXQgaXMgY29uc3VtZWQsIGFzIGl0IHdlcmUsIGJ5IGl0cyBmbGFtZXMsIGFuZCBjYXN0cyBvZmYgaXRzIG93biBodW1pbGl0eSBhbmQgc2xvdGguIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGUgYW5ncnkgbWFuIG1ha2VzIGEgc2hvdyBvZiBhY3Rpdml0eSwgYXMgaGUgd2hvIGhhcyBhIGZldmVyIGlzIGhvdCwgaGlzIHNwaXJpdCBiZWluZywgc28gdG8gc3BlYWssIGFmZmxpY3RlZCB3aXRoIHRocm9iYmluZywgZGlzdGVudGlvbiwgYW5kIGluZmxhdGlvbi4gQW5kIHRoYXQgc3VjaCB3YXMgaGlzIGNvbmRpdGlvbiwgTWFyY2l1cyBzaG93ZWQgcmlnaHQgcXVpY2tseSBieSBoaXMgY29uZHVjdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWxiZWl0IE1hcmNpdXMgaGltc2VsZjsgd2hvIHdhcyBuZWl0aGVyIGRhdW50ZWQgbm9yIGh1bWJsZWQsIGJ1dCBpbiBtaWVuLCBwb3J0LCBhbmQgY291bnRlbmFuY2UgZnVsbHkgY29tcG9zZWQsIHNlZW1lZCB0aGUgb25seSBtYW4gYW1vbmcgYWxsIHRoZSBkaXN0cmVzc2VkIHBhdHJpY2lhbnMgd2hvIHdhcyBub3QgdG91Y2hlZCBieSBoaXMgZXZpbCBwbGlnaHQuIEFuZCB0aGlzIHdhcyBub3QgZHVlIHRvIGNhbGN1bGF0aW9uLCBvciBnZW50bGVuZXNzLCBvciB0byBhIGNhbG0gZW5kdXJhbmNlIG9mIGhpcyBmYXRlLCBidXQgaGUgd2FzIHN0aXJyZWQgYnkgcmFnZSBhbmQgZGVlcCByZXNlbnRtZW50LCBhbmQgdGhpcywgYWx0aG91Z2ggdGhlIG1hbnkga25vdyBpdCBub3QsIGlzIHBhaW4uIEZvciB3aGVuIHBhaW4gaXMgdHJhbnNtdXRlZCBpbnRvIGFuZ2VyLCBpdCBpcyBjb25zdW1lZCwgYXMgaXQgd2VyZSwgYnkgaXRzIGZsYW1lcywgYW5kIGNhc3RzIG9mZiBpdHMgb3duIGh1bWlsaXR5IGFuZCBzbG90aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGUgYW5ncnkgbWFuIG1ha2VzIGEgc2hvdyBvZiBhY3Rpdml0eSwgYXMgaGUgd2hvIGhhcyBhIGZldmVyIGlzIGhvdCwgaGlzIHNwaXJpdCBiZWluZywgc28gdG8gc3BlYWssIGFmZmxpY3RlZCB3aXRoIHRocm9iYmluZywgZGlzdGVudGlvbiwgYW5kIGluZmxhdGlvbi4gQW5kIHRoYXQgc3VjaCB3YXMgaGlzIGNvbmRpdGlvbiwgTWFyY2l1cyBzaG93ZWQgcmlnaHQgcXVpY2tseSBieSBoaXMgY29uZHVjdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2VudCBob21lLCB3aGVyZSBoaXMgbW90aGVyIGFuZCBoaXMgd2lmZSBtZXQgaGltIHdpdGggd2FpbGluZ3MgYW5kIGxvdWQgbGFtZW50YXRpb25zLCBhbmQgYWZ0ZXIgZW1icmFjaW5nIHRoZW0gYW5kIGJpZGRpbmcgdGhlbSB0byBiZWFyIHdpdGggZXF1YW5pbWl0eSB0aGUgZmF0ZSB0aGF0IGhhZCBjb21lIHVwb24gdGhlbSwgaGUgc3RyYWlnaHR3YXkgZGVwYXJ0ZWQgYW5kIHdlbnQgdG8gdGhlIGNpdHkgZ2F0ZS4gVGhpdGhlciBhbGwgdGhlIHBhdHJpY2lhbnMgaW4gYSBib2R5IGVzY29ydGVkIGhpbSwgYnV0IHdpdGhvdXQgdGFraW5nIGFueXRoaW5nIG9yIGFza2luZyBmb3IgYW55dGhpbmcgaGUgZGVwYXJ0ZWQsIGhhdmluZyBvbmx5IHRocmVlIG9yIGZvdXIgb2YgaGlzIGNsaWVudHMgd2l0aCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhIGZldyBkYXlzIGhlIHJlbWFpbmVkIGJ5IGhpbXNlbGYgYXQgc29tZSBjb3VudHJ5IHBsYWNlLCB0b3JuIGJ5IG1hbnkgY29uZmxpY3RpbmcgY291bnNlbHMsIHN1Y2ggYXMgaGlzIGFuZ2VyIHN1Z2dlc3RlZCB0byBoaW0sIHB1cnBvc2luZyBubyBnb29kIG9yIGhlbHBmdWwgdGhpbmcgYXQgYWxsLCBidXQgb25seSBob3cgaGUgbWlnaHQgdGFrZSB2ZW5nZWFuY2Ugb24gdGhlIFJvbWFucy4gQXQgbGFzdCBoZSBkZXRlcm1pbmVkIHRvIGluY2l0ZSBzb21lIG5laWdoYm91cmluZyBuYXRpb24gdG8gYSBmb3JtaWRhYmxlIHdhciBhZ2FpbnN0IHRoZW0uIEFjY29yZGluZ2x5LCBoZSBzZXQgb3V0IHRvIG1ha2UgdHJpYWwgb2YgdGhlIFZvbHNjaWFucyBmaXJzdCwga25vd2luZyB0aGF0IHRoZXkgd2VyZSBzdGlsbCBhYnVuZGFudGx5IHN1cHBsaWVkIHdpdGggbWVuIGFuZCBtb25leSwgYW5kIHRoaW5raW5nIHRoYXQgdGhleSBoYWQgYmVlbiBub3Qgc28gbXVjaCBjcmlwcGxlZCBpbiBwb3dlciBieSB0aGVpciByZWNlbnQgZGVmZWF0cyBhcyBmaWxsZWQgd2l0aCBjb250ZW50aW91cyB3cmF0aCBhZ2FpbnN0IHRoZSBSb21hbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdlbnQgaG9tZSwgd2hlcmUgaGlzIG1vdGhlciBhbmQgaGlzIHdpZmUgbWV0IGhpbSB3aXRoIHdhaWxpbmdzIGFuZCBsb3VkIGxhbWVudGF0aW9ucywgYW5kIGFmdGVyIGVtYnJhY2luZyB0aGVtIGFuZCBiaWRkaW5nIHRoZW0gdG8gYmVhciB3aXRoIGVxdWFuaW1pdHkgdGhlIGZhdGUgdGhhdCBoYWQgY29tZSB1cG9uIHRoZW0sIGhlIHN0cmFpZ2h0d2F5IGRlcGFydGVkIGFuZCB3ZW50IHRvIHRoZSBjaXR5IGdhdGUuIFRoaXRoZXIgYWxsIHRoZSBwYXRyaWNpYW5zIGluIGEgYm9keSBlc2NvcnRlZCBoaW0sIGJ1dCB3aXRob3V0IHRha2luZyBhbnl0aGluZyBvciBhc2tpbmcgZm9yIGFueXRoaW5nIGhlIGRlcGFydGVkLCBoYXZpbmcgb25seSB0aHJlZSBvciBmb3VyIG9mIGhpcyBjbGllbnRzIHdpdGggaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhIGZldyBkYXlzIGhlIHJlbWFpbmVkIGJ5IGhpbXNlbGYgYXQgc29tZSBjb3VudHJ5IHBsYWNlLCB0b3JuIGJ5IG1hbnkgY29uZmxpY3RpbmcgY291bnNlbHMsIHN1Y2ggYXMgaGlzIGFuZ2VyIHN1Z2dlc3RlZCB0byBoaW0sIHB1cnBvc2luZyBubyBnb29kIG9yIGhlbHBmdWwgdGhpbmcgYXQgYWxsLCBidXQgb25seSBob3cgaGUgbWlnaHQgdGFrZSB2ZW5nZWFuY2Ugb24gdGhlIFJvbWFucy4gQXQgbGFzdCBoZSBkZXRlcm1pbmVkIHRvIGluY2l0ZSBzb21lIG5laWdoYm91cmluZyBuYXRpb24gdG8gYSBmb3JtaWRhYmxlIHdhciBhZ2FpbnN0IHRoZW0uIEFjY29yZGluZ2x5LCBoZSBzZXQgb3V0IHRvIG1ha2UgdHJpYWwgb2YgdGhlIFZvbHNjaWFucyBmaXJzdCwga25vd2luZyB0aGF0IHRoZXkgd2VyZSBzdGlsbCBhYnVuZGFudGx5IHN1cHBsaWVkIHdpdGggbWVuIGFuZCBtb25leSwgYW5kIHRoaW5raW5nIHRoYXQgdGhleSBoYWQgYmVlbiBub3Qgc28gbXVjaCBjcmlwcGxlZCBpbiBwb3dlciBieSB0aGVpciByZWNlbnQgZGVmZWF0cyBhcyBmaWxsZWQgd2l0aCBjb250ZW50aW91cyB3cmF0aCBhZ2FpbnN0IHRoZSBSb21hbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGVyZSB3YXMgYSBjZXJ0YWluIG1hbiBvZiBBbnRpdW0sIFR1bGx1cyBBdWZpZGl1cyBieSBuYW1lLCB3aG8sIGJ5IHJlYXNvbiBvZiBoaXMgd2VhbHRoIGFuZCBicmF2ZXJ5IGFuZCBjb25zcGljdW91cyBsaW5lYWdlLCBoYWQgdGhlIHN0YW5kaW5nIG9mIGEga2luZyBhbW9uZyBhbGwgdGhlIFZvbHNjaWFucy4gQnkgdGhpcyBtYW4gTWFyY2l1cyBrbmV3IGhpbXNlbGYgdG8gYmUgaGF0ZWQgYXMgbm8gb3RoZXIgUm9tYW4gd2FzOyBmb3IgdGhleSBoYWQgb2Z0ZW4gZXhjaGFuZ2VkIHRocmVhdHMgYW5kIGNoYWxsZW5nZXMgaW4gdGhlIGJhdHRsZXMgd2hpY2ggdGhleSBoYWQgZm91Z2h0LCBhbmQgc3VjaCBlbXVsb3VzIGJvYXN0aW5ncyBhcyB0aGUgYW1iaXRpb3VzIGFyZG91ciBvZiB5b3V0aGZ1bCB3YXJyaW9ycyBwcm9tcHRzIGhhZCBnaXZlbiByaXNlIHRvIGEgbXV0dWFsIGhhdHJlZCBvZiB0aGVpciBvd24sIGluIGFkZGl0aW9uIHRvIHRoYXQgb2YgdGhlaXIgcGVvcGxlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgc2luY2UgaGUgc2F3IHRoYXQgVHVsbHVzIGhhZCBhIGNlcnRhaW4gZ3JhbmRldXIgb2Ygc3Bpcml0LCBhbmQgdGhhdCBoZSwgbW9yZSB0aGFuIGFsbCBvdGhlciBWb2xzY2lhbnMsIHdhcyBlYWdlciB0byByZXRhbGlhdGUgdXBvbiB0aGUgUm9tYW5zLCBpZiB0aGV5IGdhdmUgaGltIGFueSBvcHBvcnR1bml0eSwgTWFyY2l1cyBib3JlIHdpdG5lc3MgdG8gdGhlIHRydXRoIG9mIGhpbSB3aG8gc2FpZDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkhlcmFjbGV0aXVzLCBGcmFnbWVudCAxMDUgKEJ5d2F0ZXIsIDx0aXRsZT5IZXJhY2xpdGkgRXBoZXNpaSByZWxpcXVpYWU8L3RpdGxlPiwgcC4gNDEpLjwvbm90ZT46ICAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldpdGggYW5nZXIgaXQgaXMgaGFyZCB0byBmaWdodDsgZm9yIHdoYXRzb2UnZXIgaXQgd2lzaGVzLCB0aGF0IGl0IGJ1eXMsIGV2ZW4gYXQgdGhlIGNvc3Qgb2YgbGlmZS48L3E+IEZvciwgcHV0dGluZyBvbiBzdWNoIGNsb3RoaW5nIGFuZCBhdHRpcmUgYXMgd291bGQgbWFrZSBoaW0gc2VlbSwgdG8gYW55IG9uZSB3aG8gc2F3IGhpbSwgbGVhc3QgbGlrZSB0aGUgbWFuIGhlIHdhcywgbGlrZSBPZHlzc2V1cywgCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkhlIHdlbnQgaW50byB0aGUgY2l0eSBvZiBoaXMgZGVhZGx5IGZvZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA0LjI0NiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT5PZHlzc2V5PC90aXRsZT4sIGl2LiAyNDYuPC9iaWJsPgogICAgICAgICAgICAgICAgICA8L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoZXJlIHdhcyBhIGNlcnRhaW4gbWFuIG9mIEFudGl1bSwgVHVsbHVzIEF1ZmlkaXVzIGJ5IG5hbWUsIHdobywgYnkgcmVhc29uIG9mIGhpcyB3ZWFsdGggYW5kIGJyYXZlcnkgYW5kIGNvbnNwaWN1b3VzIGxpbmVhZ2UsIGhhZCB0aGUgc3RhbmRpbmcgb2YgYSBraW5nIGFtb25nIGFsbCB0aGUgVm9sc2NpYW5zLiBCeSB0aGlzIG1hbiBNYXJjaXVzIGtuZXcgaGltc2VsZiB0byBiZSBoYXRlZCBhcyBubyBvdGhlciBSb21hbiB3YXM7IGZvciB0aGV5IGhhZCBvZnRlbiBleGNoYW5nZWQgdGhyZWF0cyBhbmQgY2hhbGxlbmdlcyBpbiB0aGUgYmF0dGxlcyB3aGljaCB0aGV5IGhhZCBmb3VnaHQsIGFuZCBzdWNoIGVtdWxvdXMgYm9hc3RpbmdzIGFzIHRoZSBhbWJpdGlvdXMgYXJkb3VyIG9mIHlvdXRoZnVsIHdhcnJpb3JzIHByb21wdHMgaGFkIGdpdmVuIHJpc2UgdG8gYSBtdXR1YWwgaGF0cmVkIG9mIHRoZWlyIG93biwgaW4gYWRkaXRpb24gdG8gdGhhdCBvZiB0aGVpciBwZW9wbGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHNpbmNlIGhlIHNhdyB0aGF0IFR1bGx1cyBoYWQgYSBjZXJ0YWluIGdyYW5kZXVyIG9mIHNwaXJpdCwgYW5kIHRoYXQgaGUsIG1vcmUgdGhhbiBhbGwgb3RoZXIgVm9sc2NpYW5zLCB3YXMgZWFnZXIgdG8gcmV0YWxpYXRlIHVwb24gdGhlIFJvbWFucywgaWYgdGhleSBnYXZlIGhpbSBhbnkgb3Bwb3J0dW5pdHksIE1hcmNpdXMgYm9yZSB3aXRuZXNzIHRvIHRoZSB0cnV0aCBvZiBoaW0gd2hvIHNhaWQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkhlcmFjbGV0aXVzLCBGcmFnbWVudCAxMDUgKEJ5d2F0ZXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlcmFjbGl0aSBFcGhlc2lpIHJlbGlxdWlhZTwvdGl0bGU+LCBwLiA0MSkuPC9ub3RlPjogIAoJCQkJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVyYWNsaXRpIEVwaGVzaWkgcmVsaXF1aWFlPC90aXRsZT4sIHAuIDQxKS48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldpdGggYW5nZXIgaXQgaXMgaGFyZCB0byBmaWdodDsgZm9yIHdoYXRzb2UnZXIgaXQgd2lzaGVzLCB0aGF0IGl0IGJ1eXMsIGV2ZW4gYXQgdGhlIGNvc3Qgb2YgbGlmZS48L3E+IEZvciwgcHV0dGluZyBvbiBzdWNoIGNsb3RoaW5nIGFuZCBhdHRpcmUgYXMgd291bGQgbWFrZSBoaW0gc2VlbSwgdG8gYW55IG9uZSB3aG8gc2F3IGhpbSwgbGVhc3QgbGlrZSB0aGUgbWFuIGhlIHdhcywgbGlrZSBPZHlzc2V1cywgCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5IZSB3ZW50IGludG8gdGhlIGNpdHkgb2YgaGlzIGRlYWRseSBmb2VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDQuMjQ2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCBpdi4gMjQ2LjwvYmlibD4KICAgICAgICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICAgICAgICA8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCSAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgd2VudCBpbnRvIHRoZSBjaXR5IG9mIGhpcyBkZWFkbHkgZm9lcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA0LjI0NiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaXYuIDI0Ni48L2JpYmw+CiAgICAgICAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA0LjI0NiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaXYuIDI0Ni48L2JpYmw+CiAgICAgICAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gNC4yNDYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGl2LiAyNDYuPC9iaWJsPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGl2LiAyNDYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IFhYSUlJLiBJdCB3YXMgZXZlbmluZywgYW5kIG1hbnkgbWV0IGhpbSwgYnV0IG5vIG1hbiBrbmV3IGhpbS4gSGUgcHJvY2VlZGVkLCB0aGVyZWZvcmUsIHRvIHRoZSBob3VzZSBvZiBUdWxsdXMsIGFuZCBzbGlwcGluZyBpbiB1bmF3YXJlcywgdG9vayBoaXMgc2VhdCBhdCB0aGUgaGVhcnRoPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBzYWNyZWQgcGxhY2Ugb2YgcmVmdWdlIGZvciB0aGUgc3VwcGxpYW50LiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDcuMTUzIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk9keXNzZXk8L3RpdGxlPiwgdmlpLiAxNTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGluIHNpbGVuY2UsIGNvdmVyZWQgaGlzIGhlYWQsIGFuZCByZW1haW5lZCB0aGVyZSBtb3Rpb25sZXNzLiBUaGUgcGVvcGxlIG9mIHRoZSBob3VzZSB3ZXJlIGFtYXplZCwgYW5kIGRpZCBub3QgdmVudHVyZSB0byByYWlzZSBoaW0gdXAsIGZvciBoaXMgbWllbiBhbmQgaGlzIHNpbGVuY2UgZ2F2ZSBoaW0gYSBjZXJ0YWluIGRpZ25pdHk7IGJ1dCB0aGV5IHRvbGQgVHVsbHVzLCB3aG8gd2FzIGF0IHN1cHBlciwgd2hhdCBhIHN0cmFuZ2UgdGhpbmcgaGFkIGhhcHBlbmVkLiBUdWxsdXMgcm9zZSBmcm9tIHRhYmxlIGFuZCBjYW1lIHRvIGhpbSwgYW5kIGFza2VkIGhpbSB3aG8gaGUgd2FzLCBhbmQgd2h5IGhlIHdhcyBjb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzLCB0aGVuLCBNYXJjaXVzIHVuY292ZXJlZCBoaXMgaGVhZCwgYW5kIGFmdGVyIGEgc2xpZ2h0IHBhdXNlLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIHRob3UgZG9zdCBub3QgeWV0IHJlY29nbml6ZSBtZSwgVHVsbHVzLCBidXQgZGlzYmVsaWV2ZXN0IHRoaW5lIGV5ZXMsIEkgbXVzdCBiZSBteSBvd24gYWNjdXNlci4gSSBhbSBDYWl1cyBNYXJjaXVzLCBoZSB3aG8gaGFzIHdyb3VnaHQgdGhlZSBhbmQgdGhlIFZvbHNjaWFucyBtb3N0IGhhcm0sIGFuZCB0aGUgc3VybmFtZSBvZiBDb3Jpb2xhbnVzIHdoaWNoIEkgYmVhciBwZXJtaXRzIG5vIGRlbmlhbCBvZiB0aGlzLiAKCQkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SSBoYXZlIHdvbiBubyBvdGhlciBwcml6ZSBmb3IgYWxsIHRoZSB0b2lscyBhbmQgcGVyaWxzIHdoaWNoIEkgaGF2ZSB1bmRlcmdvbmUgdGhhbiB0aGUgbmFtZSB3aGljaCBpcyBhIGJhZGdlIG9mIG15IGVubWl0eSB0byB5b3VyIHBlb3BsZS4gVGhpcywgaW5kZWVkLCBjYW5ub3QgYmUgdGFrZW4gYXdheSBmcm9tIG1lOyBidXQgb2YgZXZlcnl0aGluZyBlbHNlIEkgaGF2ZSBiZWVuIHN0cmlwcGVkLCB0aHJvdWdoIHRoZSBlbnZ5IGFuZCBpbnNvbGVuY2Ugb2YgdGhlIFJvbWFuIHBlb3BsZSwgYW5kIHRoZSBjb3dhcmRseSB0cmVhY2hlcnkgb2YgdGhlIG1hZ2lzdHJhdGVzIGFuZCB0aG9zZSBvZiBteSBvd24gb3JkZXIuIEkgaGF2ZSBiZWVuIGRyaXZlbiBpbnRvIGV4aWxlLCB0b28sIGFuZCBhbSBiZWNvbWUgYSBzdXBwbGlhbnQgYXQgdGh5IGhlYXJ0aCwgbm90IGZvciB0aGUgc2FrZSBvZiBzZWN1cml0eSBhbmQgc2FmZXR5LOKAlGZvciB3aHkgc2hvdWxkIEkgY29tZSBoaXRoZXIgaWYgSSB3ZXJlIGFmcmFpZCBvZiBkZWF0aCA/4oCUYnV0IHdpdGggYSBkZXNpcmUgdG8gdGFrZSB2ZW5nZWFuY2Ugb24gdGhvc2Ugd2hvIGhhdmUgZHJpdmVuIG1lIGZvcnRoLCB3aGljaCBJIHRha2UgYXQgb25jZSB3aGVuIEkgcHV0IG15c2VsZiBpbiB0aHkgcG93ZXIuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JZjsgdGhlbiwgdGhvdSBhcnQgZWFnZXIgdG8gYXNzYWlsIHRoaW5lIGVuZW1pZXMsIGNvbWUsIGdvb2QgU2lyLCB0YWtlIGFkdmFudGFnZSBvZiBteSBjYWxhbWl0aWVzLCBhbmQgbWFrZSBteSBpbmRpdmlkdWFsIG1pc2ZvcnR1bmUgdGhlIGdvb2QgZm9ydHVuZSBvZiBhbGwgdGhlIFZvbHNjaWFuczsgSSBzaGFsbCBmaWdodCBiZXR0ZXIgZm9yIHlvdSB0aGFuIEkgaGF2ZSBhZ2FpbnN0IHlvdSwgaW4ganVzdCBzbyBmYXIgYXMgdGhvc2Ugd2hvIGtub3cgdGhlIHNlY3JldHMgb2YgdGhlaXIgZW5lbWllcyBmaWdodCBiZXR0ZXIgdGhhbiB0aG9zZSB3aG8gZG8gbm90LiBCdXQgaWYgdGhvdSBoYXN0IGdpdmVuIHVwIGhvcGUsIG5laXRoZXIgZG8gSSB3aXNoIHRvIGxpdmUsIG5vciBpcyBpdCBmb3IgdGhpbmUgYWR2YW50YWdlIHRvIHNwYXJlIG9uZSB3aG8gaGFzIGxvbmcgYmVlbiBhbiBlbmVteSBhbmQgYSBmb2UsIGFuZCBub3cgaXMgdW5wcm9maXRhYmxlIGFuZCB1c2VsZXNzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IFhYSUlJLiBJdCB3YXMgZXZlbmluZywgYW5kIG1hbnkgbWV0IGhpbSwgYnV0IG5vIG1hbiBrbmV3IGhpbS4gSGUgcHJvY2VlZGVkLCB0aGVyZWZvcmUsIHRvIHRoZSBob3VzZSBvZiBUdWxsdXMsIGFuZCBzbGlwcGluZyBpbiB1bmF3YXJlcywgdG9vayBoaXMgc2VhdCBhdCB0aGUgaGVhcnRoPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIHNhY3JlZCBwbGFjZSBvZiByZWZ1Z2UgZm9yIHRoZSBzdXBwbGlhbnQuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA3LjE1MyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgdmlpLiAxNTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGluIHNpbGVuY2UsIGNvdmVyZWQgaGlzIGhlYWQsIGFuZCByZW1haW5lZCB0aGVyZSBtb3Rpb25sZXNzLiBUaGUgcGVvcGxlIG9mIHRoZSBob3VzZSB3ZXJlIGFtYXplZCwgYW5kIGRpZCBub3QgdmVudHVyZSB0byByYWlzZSBoaW0gdXAsIGZvciBoaXMgbWllbiBhbmQgaGlzIHNpbGVuY2UgZ2F2ZSBoaW0gYSBjZXJ0YWluIGRpZ25pdHk7IGJ1dCB0aGV5IHRvbGQgVHVsbHVzLCB3aG8gd2FzIGF0IHN1cHBlciwgd2hhdCBhIHN0cmFuZ2UgdGhpbmcgaGFkIGhhcHBlbmVkLiBUdWxsdXMgcm9zZSBmcm9tIHRhYmxlIGFuZCBjYW1lIHRvIGhpbSwgYW5kIGFza2VkIGhpbSB3aG8gaGUgd2FzLCBhbmQgd2h5IGhlIHdhcyBjb21lLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDcuMTUzIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCB2aWkuIDE1My48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgdmlpLiAxNTMuPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMsIHRoZW4sIE1hcmNpdXMgdW5jb3ZlcmVkIGhpcyBoZWFkLCBhbmQgYWZ0ZXIgYSBzbGlnaHQgcGF1c2UsIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiB0aG91IGRvc3Qgbm90IHlldCByZWNvZ25pemUgbWUsIFR1bGx1cywgYnV0IGRpc2JlbGlldmVzdCB0aGluZSBleWVzLCBJIG11c3QgYmUgbXkgb3duIGFjY3VzZXIuIEkgYW0gQ2FpdXMgTWFyY2l1cywgaGUgd2hvIGhhcyB3cm91Z2h0IHRoZWUgYW5kIHRoZSBWb2xzY2lhbnMgbW9zdCBoYXJtLCBhbmQgdGhlIHN1cm5hbWUgb2YgQ29yaW9sYW51cyB3aGljaCBJIGJlYXIgcGVybWl0cyBubyBkZW5pYWwgb2YgdGhpcy4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SSBoYXZlIHdvbiBubyBvdGhlciBwcml6ZSBmb3IgYWxsIHRoZSB0b2lscyBhbmQgcGVyaWxzIHdoaWNoIEkgaGF2ZSB1bmRlcmdvbmUgdGhhbiB0aGUgbmFtZSB3aGljaCBpcyBhIGJhZGdlIG9mIG15IGVubWl0eSB0byB5b3VyIHBlb3BsZS4gVGhpcywgaW5kZWVkLCBjYW5ub3QgYmUgdGFrZW4gYXdheSBmcm9tIG1lOyBidXQgb2YgZXZlcnl0aGluZyBlbHNlIEkgaGF2ZSBiZWVuIHN0cmlwcGVkLCB0aHJvdWdoIHRoZSBlbnZ5IGFuZCBpbnNvbGVuY2Ugb2YgdGhlIFJvbWFuIHBlb3BsZSwgYW5kIHRoZSBjb3dhcmRseSB0cmVhY2hlcnkgb2YgdGhlIG1hZ2lzdHJhdGVzIGFuZCB0aG9zZSBvZiBteSBvd24gb3JkZXIuIEkgaGF2ZSBiZWVuIGRyaXZlbiBpbnRvIGV4aWxlLCB0b28sIGFuZCBhbSBiZWNvbWUgYSBzdXBwbGlhbnQgYXQgdGh5IGhlYXJ0aCwgbm90IGZvciB0aGUgc2FrZSBvZiBzZWN1cml0eSBhbmQgc2FmZXR5LOKAlGZvciB3aHkgc2hvdWxkIEkgY29tZSBoaXRoZXIgaWYgSSB3ZXJlIGFmcmFpZCBvZiBkZWF0aCA/4oCUYnV0IHdpdGggYSBkZXNpcmUgdG8gdGFrZSB2ZW5nZWFuY2Ugb24gdGhvc2Ugd2hvIGhhdmUgZHJpdmVuIG1lIGZvcnRoLCB3aGljaCBJIHRha2UgYXQgb25jZSB3aGVuIEkgcHV0IG15c2VsZiBpbiB0aHkgcG93ZXIuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JZjsgdGhlbiwgdGhvdSBhcnQgZWFnZXIgdG8gYXNzYWlsIHRoaW5lIGVuZW1pZXMsIGNvbWUsIGdvb2QgU2lyLCB0YWtlIGFkdmFudGFnZSBvZiBteSBjYWxhbWl0aWVzLCBhbmQgbWFrZSBteSBpbmRpdmlkdWFsIG1pc2ZvcnR1bmUgdGhlIGdvb2QgZm9ydHVuZSBvZiBhbGwgdGhlIFZvbHNjaWFuczsgSSBzaGFsbCBmaWdodCBiZXR0ZXIgZm9yIHlvdSB0aGFuIEkgaGF2ZSBhZ2FpbnN0IHlvdSwgaW4ganVzdCBzbyBmYXIgYXMgdGhvc2Ugd2hvIGtub3cgdGhlIHNlY3JldHMgb2YgdGhlaXIgZW5lbWllcyBmaWdodCBiZXR0ZXIgdGhhbiB0aG9zZSB3aG8gZG8gbm90LiBCdXQgaWYgdGhvdSBoYXN0IGdpdmVuIHVwIGhvcGUsIG5laXRoZXIgZG8gSSB3aXNoIHRvIGxpdmUsIG5vciBpcyBpdCBmb3IgdGhpbmUgYWR2YW50YWdlIHRvIHNwYXJlIG9uZSB3aG8gaGFzIGxvbmcgYmVlbiBhbiBlbmVteSBhbmQgYSBmb2UsIGFuZCBub3cgaXMgdW5wcm9maXRhYmxlIGFuZCB1c2VsZXNzLjwvcT4KCQkJICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgaGF2ZSB3b24gbm8gb3RoZXIgcHJpemUgZm9yIGFsbCB0aGUgdG9pbHMgYW5kIHBlcmlscyB3aGljaCBJIGhhdmUgdW5kZXJnb25lIHRoYW4gdGhlIG5hbWUgd2hpY2ggaXMgYSBiYWRnZSBvZiBteSBlbm1pdHkgdG8geW91ciBwZW9wbGUuIFRoaXMsIGluZGVlZCwgY2Fubm90IGJlIHRha2VuIGF3YXkgZnJvbSBtZTsgYnV0IG9mIGV2ZXJ5dGhpbmcgZWxzZSBJIGhhdmUgYmVlbiBzdHJpcHBlZCwgdGhyb3VnaCB0aGUgZW52eSBhbmQgaW5zb2xlbmNlIG9mIHRoZSBSb21hbiBwZW9wbGUsIGFuZCB0aGUgY293YXJkbHkgdHJlYWNoZXJ5IG9mIHRoZSBtYWdpc3RyYXRlcyBhbmQgdGhvc2Ugb2YgbXkgb3duIG9yZGVyLiBJIGhhdmUgYmVlbiBkcml2ZW4gaW50byBleGlsZSwgdG9vLCBhbmQgYW0gYmVjb21lIGEgc3VwcGxpYW50IGF0IHRoeSBoZWFydGgsIG5vdCBmb3IgdGhlIHNha2Ugb2Ygc2VjdXJpdHkgYW5kIHNhZmV0eSzigJRmb3Igd2h5IHNob3VsZCBJIGNvbWUgaGl0aGVyIGlmIEkgd2VyZSBhZnJhaWQgb2YgZGVhdGggP+KAlGJ1dCB3aXRoIGEgZGVzaXJlIHRvIHRha2UgdmVuZ2VhbmNlIG9uIHRob3NlIHdobyBoYXZlIGRyaXZlbiBtZSBmb3J0aCwgd2hpY2ggSSB0YWtlIGF0IG9uY2Ugd2hlbiBJIHB1dCBteXNlbGYgaW4gdGh5IHBvd2VyLiAKCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPklmOyB0aGVuLCB0aG91IGFydCBlYWdlciB0byBhc3NhaWwgdGhpbmUgZW5lbWllcywgY29tZSwgZ29vZCBTaXIsIHRha2UgYWR2YW50YWdlIG9mIG15IGNhbGFtaXRpZXMsIGFuZCBtYWtlIG15IGluZGl2aWR1YWwgbWlzZm9ydHVuZSB0aGUgZ29vZCBmb3J0dW5lIG9mIGFsbCB0aGUgVm9sc2NpYW5zOyBJIHNoYWxsIGZpZ2h0IGJldHRlciBmb3IgeW91IHRoYW4gSSBoYXZlIGFnYWluc3QgeW91LCBpbiBqdXN0IHNvIGZhciBhcyB0aG9zZSB3aG8ga25vdyB0aGUgc2VjcmV0cyBvZiB0aGVpciBlbmVtaWVzIGZpZ2h0IGJldHRlciB0aGFuIHRob3NlIHdobyBkbyBub3QuIEJ1dCBpZiB0aG91IGhhc3QgZ2l2ZW4gdXAgaG9wZSwgbmVpdGhlciBkbyBJIHdpc2ggdG8gbGl2ZSwgbm9yIGlzIGl0IGZvciB0aGluZSBhZHZhbnRhZ2UgdG8gc3BhcmUgb25lIHdobyBoYXMgbG9uZyBiZWVuIGFuIGVuZW15IGFuZCBhIGZvZSwgYW5kIG5vdyBpcyB1bnByb2ZpdGFibGUgYW5kIHVzZWxlc3MuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBUdWxsdXMgaGVhcmQgdGhpcywgaGUgd2FzIHdvbmRlcmZ1bGx5IHBsZWFzZWQsIGFuZCBnaXZpbmcgaGltIGhpcyByaWdodCBoYW5kLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlJpc2UgdXAsIE1hcmNpdXMsIGFuZCBiZSBvZiBnb29kIGNvdXJhZ2UuIEluIGdpdmluZyB0aHlzZWxmIHRvIHVzLCB0aG91IGJyaW5nZXN0IHVzIGEgZ3JlYXQgZ29vZCwgYW5kIHRob3UgbWF5ZXN0IGV4cGVjdCBhIGdyZWF0ZXIgb25lIHN0aWxsIGZyb20gdGhlIFZvbHNjaWFucy48L3E+IFRoZW4gaGUgZW50ZXJ0YWluZWQgTWFyY2l1cyBhdCB0YWJsZSB3aXRoIGV2ZXJ5IG1hcmsgb2Yga2luZG5lc3MsIGFuZCBkdXJpbmcgdGhlIGVuc3VpbmcgZGF5cyB0aGV5IHRvb2sgY291bnNlbCB0b2dldGhlciBjb25jZXJuaW5nIHRoZSB3YXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TGl2eSBzaW1wbHkgc2F5cyB0aGF0IE1hcmNpdXMgd2FzIGtpbmRseSByZWNlaXZlZCBieSB0aGUgVm9sc2NpYW5zLCBhbmQgdGhhdCBoZSBsb2RnZWQgd2l0aCBUdWxsdXMgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zNS42IiB2YWxpZD0ieWVzIj4oaWkuIDM1LCA2KS48L2JpYmw+IENoYXB0ZXJzIHh4aS4teHhpaWkuIGFncmVlIGNsb3NlbHkgd2l0aCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA3LjY3Ij5EaW9ueXNpdXMgSGFsLiB2aWkuIDY3PC9iaWJsPiBhbmQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC4xIj52aWlpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gVHVsbHVzIGhlYXJkIHRoaXMsIGhlIHdhcyB3b25kZXJmdWxseSBwbGVhc2VkLCBhbmQgZ2l2aW5nIGhpbSBoaXMgcmlnaHQgaGFuZCwgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlJpc2UgdXAsIE1hcmNpdXMsIGFuZCBiZSBvZiBnb29kIGNvdXJhZ2UuIEluIGdpdmluZyB0aHlzZWxmIHRvIHVzLCB0aG91IGJyaW5nZXN0IHVzIGEgZ3JlYXQgZ29vZCwgYW5kIHRob3UgbWF5ZXN0IGV4cGVjdCBhIGdyZWF0ZXIgb25lIHN0aWxsIGZyb20gdGhlIFZvbHNjaWFucy48L3E+IFRoZW4gaGUgZW50ZXJ0YWluZWQgTWFyY2l1cyBhdCB0YWJsZSB3aXRoIGV2ZXJ5IG1hcmsgb2Yga2luZG5lc3MsIGFuZCBkdXJpbmcgdGhlIGVuc3VpbmcgZGF5cyB0aGV5IHRvb2sgY291bnNlbCB0b2dldGhlciBjb25jZXJuaW5nIHRoZSB3YXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5MaXZ5IHNpbXBseSBzYXlzIHRoYXQgTWFyY2l1cyB3YXMga2luZGx5IHJlY2VpdmVkIGJ5IHRoZSBWb2xzY2lhbnMsIGFuZCB0aGF0IGhlIGxvZGdlZCB3aXRoIFR1bGx1cyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzUuNiIgdmFsaWQ9InllcyI+KGlpLiAzNSwgNikuPC9iaWJsPiBDaGFwdGVycyB4eGkuLXh4aWlpLiBhZ3JlZSBjbG9zZWx5IHdpdGggPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA3LjY3Ij5EaW9ueXNpdXMgSGFsLiB2aWkuIDY3PC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjEiPnZpaWkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zNS42IiB2YWxpZD0ieWVzIj4oaWkuIDM1LCA2KS48L2JpYmw+IENoYXB0ZXJzIHh4aS4teHhpaWkuIGFncmVlIGNsb3NlbHkgd2l0aCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuNjciPkRpb255c2l1cyBIYWwuIHZpaS4gNjc8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMSI+dmlpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCBSb21lLCBvd2luZyB0byB0aGUgaGF0cmVkIG9mIHRoZSBwZW9wbGUgYnkgdGhlIHBhdHJpY2lhbnMsIHdobyB3ZXJlIGVzcGVjaWFsbHkgZW1iaXR0ZXJlZCBieSB0aGUgY29uZGVtbmF0aW9uIG9mIE1hcmNpdXMsIHRoZXJlIHdlcmUgZ3JlYXQgY29tbW90aW9ucywgYW5kIG1hbnkgc2lnbnMgZnJvbSBoZWF2ZW4gd2VyZSByZXBvcnRlZCBieSBzZWVycywgcHJpZXN0cywgYW5kIHByaXZhdGUgcGVyc29ucywgd2hpY2ggY291bGQgbm90IGJlIGlnbm9yZWQuIE9uZSBvZiB0aGVzZSBpcyBzYWlkIHRvIGhhdmUgYmVlbiBhcyBmb2xsb3dzLiBUaGVyZSB3YXMgb25lIFRpdHVzIExhdGludXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHN0b3J5IGlzIGZvdW5kIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzYiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzNjwvYmlibD4sIGFuZCBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iVi4gTWF4LiAxLjcuNCI+VmFsZXJpdXMgTWF4aW11cywgaS4gNywgNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYSBtYW4gb2Ygbm8gZ3JlYXQgcHJvbWluZW5jZSwgYnV0IG9mIHF1aWV0IGFuZCBtb2Rlc3QgbGlmZSBpbiBnZW5lcmFsLCBhbmQgZnJlZSBmcm9tIHN1cGVyc3RpdGlvdXMgZmVhcnMsIGFzIGhlIHdhcyBhbHNvLCBhbmQgeWV0IG1vcmUsIGZyb20gdmFpbiBwcmV0ZW5zaW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBtYW4gZHJlYW1lZCB0aGF0IEp1cGl0ZXIgYXBwZWFyZWQgdG8gaGltLCBhbmQgYmFkZSBoaW0gdGVsbCB0aGUgc2VuYXRlIHRoYXQgdGhlIGRhbmNlciwgd2hvbSB0aGV5IGhhZCBhcHBvaW50ZWQgdG8gaGVhZCBoaXMgcHJvY2Vzc2lvbiwgd2FzIGEgYmFkIG9uZSwgYW5kIGdhdmUgaGltIHRoZSBncmVhdGVzdCBkaXNwbGVhc3VyZS4gQWZ0ZXIgaGF2aW5nIHRoaXMgdmlzaW9uLCBUaXR1cyBzYWlkLCBoZSBnYXZlIGl0IG5vIHRob3VnaHQgYXQgYWxsIGF0IGZpcnN0LCBidXQgYWZ0ZXIgaGUgaGFkIHNlZW4gaXQgYSBzZWNvbmQgYW5kIGEgdGhpcmQgdGltZSwgYW5kIHN0aWxsIG5lZ2xlY3RlZCBpdCwgaGUgaGFkIHN1ZmZlcmVkIHRoZSBsb3NzIG9mIGFuIGV4Y2VsbGVudCBzb24gYnkgZGVhdGgsIGFuZCBoYWQgaGltc2VsZiBiZWNvbWUgc3VkZGVubHkgcGFsc2llZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBzdG9yeSBoZSB0b2xkIGFmdGVyIGhhdmluZyBiZWVuIGJyb3VnaHQgaW50byB0aGUgc2VuYXRlIG9uIGEgbGl0dGVyLCBhbmQgbm8gc29vbmVyIGhhZCBoZSB0b2xkIGl0LCB0aGV5IHNheSwgdGhhbiBoZSBhdCBhdCBvbmNlIGZlbHQgdGhlIHN0cmVuZ3RoIHJldHVybiB0byBoaXMgYm9keSwgYW5kIHJvc2UgdXAsIGFuZCB3ZW50IGF3YXksIHdhbGtpbmcgd2l0aG91dCBhaWQuIEluIGFtYXplbWVudCwgdGhlbiwgdGhlIHNlbmF0b3JzIG1hZGUgYSBjYXJlZnVsIGludmVzdGlnYXRpb24gb2YgdGhlIG1hdHRlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGF0IFJvbWUsIG93aW5nIHRvIHRoZSBoYXRyZWQgb2YgdGhlIHBlb3BsZSBieSB0aGUgcGF0cmljaWFucywgd2hvIHdlcmUgZXNwZWNpYWxseSBlbWJpdHRlcmVkIGJ5IHRoZSBjb25kZW1uYXRpb24gb2YgTWFyY2l1cywgdGhlcmUgd2VyZSBncmVhdCBjb21tb3Rpb25zLCBhbmQgbWFueSBzaWducyBmcm9tIGhlYXZlbiB3ZXJlIHJlcG9ydGVkIGJ5IHNlZXJzLCBwcmllc3RzLCBhbmQgcHJpdmF0ZSBwZXJzb25zLCB3aGljaCBjb3VsZCBub3QgYmUgaWdub3JlZC4gT25lIG9mIHRoZXNlIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGFzIGZvbGxvd3MuIFRoZXJlIHdhcyBvbmUgVGl0dXMgTGF0aW51cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzdG9yeSBpcyBmb3VuZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzYiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzNjwvYmlibD4sIGFuZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJWLiBNYXguIDEuNy40Ij5WYWxlcml1cyBNYXhpbXVzLCBpLiA3LCA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhIG1hbiBvZiBubyBncmVhdCBwcm9taW5lbmNlLCBidXQgb2YgcXVpZXQgYW5kIG1vZGVzdCBsaWZlIGluIGdlbmVyYWwsIGFuZCBmcmVlIGZyb20gc3VwZXJzdGl0aW91cyBmZWFycywgYXMgaGUgd2FzIGFsc28sIGFuZCB5ZXQgbW9yZSwgZnJvbSB2YWluIHByZXRlbnNpb25zLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zNiIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDM2PC9iaWJsPiwgYW5kIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlYuIE1heC4gMS43LjQiPlZhbGVyaXVzIE1heGltdXMsIGkuIDcsIDQuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuIGRyZWFtZWQgdGhhdCBKdXBpdGVyIGFwcGVhcmVkIHRvIGhpbSwgYW5kIGJhZGUgaGltIHRlbGwgdGhlIHNlbmF0ZSB0aGF0IHRoZSBkYW5jZXIsIHdob20gdGhleSBoYWQgYXBwb2ludGVkIHRvIGhlYWQgaGlzIHByb2Nlc3Npb24sIHdhcyBhIGJhZCBvbmUsIGFuZCBnYXZlIGhpbSB0aGUgZ3JlYXRlc3QgZGlzcGxlYXN1cmUuIEFmdGVyIGhhdmluZyB0aGlzIHZpc2lvbiwgVGl0dXMgc2FpZCwgaGUgZ2F2ZSBpdCBubyB0aG91Z2h0IGF0IGFsbCBhdCBmaXJzdCwgYnV0IGFmdGVyIGhlIGhhZCBzZWVuIGl0IGEgc2Vjb25kIGFuZCBhIHRoaXJkIHRpbWUsIGFuZCBzdGlsbCBuZWdsZWN0ZWQgaXQsIGhlIGhhZCBzdWZmZXJlZCB0aGUgbG9zcyBvZiBhbiBleGNlbGxlbnQgc29uIGJ5IGRlYXRoLCBhbmQgaGFkIGhpbXNlbGYgYmVjb21lIHN1ZGRlbmx5IHBhbHNpZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3RvcnkgaGUgdG9sZCBhZnRlciBoYXZpbmcgYmVlbiBicm91Z2h0IGludG8gdGhlIHNlbmF0ZSBvbiBhIGxpdHRlciwgYW5kIG5vIHNvb25lciBoYWQgaGUgdG9sZCBpdCwgdGhleSBzYXksIHRoYW4gaGUgYXQgYXQgb25jZSBmZWx0IHRoZSBzdHJlbmd0aCByZXR1cm4gdG8gaGlzIGJvZHksIGFuZCByb3NlIHVwLCBhbmQgd2VudCBhd2F5LCB3YWxraW5nIHdpdGhvdXQgYWlkLiBJbiBhbWF6ZW1lbnQsIHRoZW4sIHRoZSBzZW5hdG9ycyBtYWRlIGEgY2FyZWZ1bCBpbnZlc3RpZ2F0aW9uIG9mIHRoZSBtYXR0ZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm93LCB3aGF0IGhhZCBoYXBwZW5lZCB3YXMgdGhpcy4gQSBjZXJ0YWluIG1hbiBoYWQgaGFuZGVkIG92ZXIgb25lIG9mIGhpcyBzbGF2ZXMgdG8gb3RoZXIgc2xhdmVzLCB3aXRoIG9yZGVycyB0byBzY291cmdlIGhpbSB0aHJvdWdoIHRoZSBmb3J1bSwgYW5kIHRoZW4gcHV0IGhpbSB0byBkZWF0aC4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSB0aGV5IHdlcmUgZXhlY3V0aW5nIHRoaXMgY29tbWlzc2lvbiBhbmQgdG9ybWVudGluZyB0aGUgcG9vciB3cmV0Y2gsIHdob3NlIHBhaW4gYW5kIHN1ZmZlcmluZyBtYWRlIGhpbSB3cml0aGUgYW5kIHR3aXN0IGhpbXNlbGYgaG9ycmlibHksIHRoZSBzYWNyZWQgcHJvY2Vzc2lvbiBpbiBob25vdXIgb2YgSnVwaXRlciBjaGFuY2VkIHRvIGNvbWUgdXAgYmVoaW5kLiBNYW55IG9mIHRob3NlIHdobyB0b29rIHBhcnQgaW4gaXQgd2VyZSwgaW5kZWVkLCBzY2FuZGFsaXplZCBhdCB0aGUgam95bGVzcyBzaWdodCBhbmQgdGhlIHVuc2VlbWx5IGNvbnRvcnRpb25zIG9mIHRoZSB2aWN0aW0sIGJ1dCBubyBvbmUgbWFkZSBhbnkgcHJvdGVzdDsgdGhleSBtZXJlbHkgaGVhcGVkIGFidXNlIGFuZCBjdXJzZXMgb24gdGhlIGhlYWQgb2YgdGhlIG1hc3RlciB3aG8gd2FzIGluZmxpY3Rpbmcgc3VjaCBhIGNydWVsIHB1bmlzaG1lbnQuIEZvciBpbiB0aG9zZSBkYXlzIHRoZSBSb21hbnMgdHJlYXRlZCB0aGVpciBzbGF2ZXMgd2l0aCBncmVhdCBraW5kbmVzcywgYmVjYXVzZSB0aGV5IHdvcmtlZCBhbmQgZXZlbiBhdGUgd2l0aCB0aGVtIHRoZW1zZWx2ZXMsIGFuZCB3ZXJlIHRoZXJlZm9yZSBtb3JlIGZhbWlsaWFyIGFuZCBnZW50bGUgd2l0aCB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgd2FzIGEgc2V2ZXJlIHB1bmlzaG1lbnQgZm9yIGEgc2xhdmUgd2hvIGhhZCBjb21taXR0ZWQgYSBmYXVsdCwgaWYgaGUgd2FzIG9ibGlnZWQgdG8gdGFrZSB0aGUgcGllY2Ugb2Ygd29vZCB3aXRoIHdoaWNoIHRoZXkgcHJvcCB1cCB0aGUgcG9sZSBvZiBhIHdhZ2dvbiwgYW5kIGNhcnJ5IGl0IGFyb3VuZCB0aHJvdWdoIHRoZSBuZWlnaGJvdXJob29kLiBGb3IgaGUgd2hvIGhhZCBiZWVuIHNlZW4gdW5kZXJnb2luZyB0aGlzIHB1bmlzaG1lbnQgbm8gbG9uZ2VyIGhhZCBhbnkgY3JlZGl0IGluIGhpcyBvd24gb3IgbmVpZ2hib3VyaW5nIGhvdXNlaG9sZHMuIEFuZCBoZSB3YXMgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZnVyY2lmZXI8L3E+OyBmb3Igd2hhdCB0aGUgR3JlZWtzIGNhbGwgYSA8ZW1waD5wcm9wPC9lbXBoPiwgb3IgPGVtcGg+c3VwcG9ydDwvZW1waD4sIGlzIGNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZ1cmNhPC9xPiBieSB0aGUgUm9tYW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHRoZXkgd2VyZSBleGVjdXRpbmcgdGhpcyBjb21taXNzaW9uIGFuZCB0b3JtZW50aW5nIHRoZSBwb29yIHdyZXRjaCwgd2hvc2UgcGFpbiBhbmQgc3VmZmVyaW5nIG1hZGUgaGltIHdyaXRoZSBhbmQgdHdpc3QgaGltc2VsZiBob3JyaWJseSwgdGhlIHNhY3JlZCBwcm9jZXNzaW9uIGluIGhvbm91ciBvZiBKdXBpdGVyIGNoYW5jZWQgdG8gY29tZSB1cCBiZWhpbmQuIE1hbnkgb2YgdGhvc2Ugd2hvIHRvb2sgcGFydCBpbiBpdCB3ZXJlLCBpbmRlZWQsIHNjYW5kYWxpemVkIGF0IHRoZSBqb3lsZXNzIHNpZ2h0IGFuZCB0aGUgdW5zZWVtbHkgY29udG9ydGlvbnMgb2YgdGhlIHZpY3RpbSwgYnV0IG5vIG9uZSBtYWRlIGFueSBwcm90ZXN0OyB0aGV5IG1lcmVseSBoZWFwZWQgYWJ1c2UgYW5kIGN1cnNlcyBvbiB0aGUgaGVhZCBvZiB0aGUgbWFzdGVyIHdobyB3YXMgaW5mbGljdGluZyBzdWNoIGEgY3J1ZWwgcHVuaXNobWVudC4gRm9yIGluIHRob3NlIGRheXMgdGhlIFJvbWFucyB0cmVhdGVkIHRoZWlyIHNsYXZlcyB3aXRoIGdyZWF0IGtpbmRuZXNzLCBiZWNhdXNlIHRoZXkgd29ya2VkIGFuZCBldmVuIGF0ZSB3aXRoIHRoZW0gdGhlbXNlbHZlcywgYW5kIHdlcmUgdGhlcmVmb3JlIG1vcmUgZmFtaWxpYXIgYW5kIGdlbnRsZSB3aXRoIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3YXMgYSBzZXZlcmUgcHVuaXNobWVudCBmb3IgYSBzbGF2ZSB3aG8gaGFkIGNvbW1pdHRlZCBhIGZhdWx0LCBpZiBoZSB3YXMgb2JsaWdlZCB0byB0YWtlIHRoZSBwaWVjZSBvZiB3b29kIHdpdGggd2hpY2ggdGhleSBwcm9wIHVwIHRoZSBwb2xlIG9mIGEgd2FnZ29uLCBhbmQgY2FycnkgaXQgYXJvdW5kIHRocm91Z2ggdGhlIG5laWdoYm91cmhvb2QuIEZvciBoZSB3aG8gaGFkIGJlZW4gc2VlbiB1bmRlcmdvaW5nIHRoaXMgcHVuaXNobWVudCBubyBsb25nZXIgaGFkIGFueSBjcmVkaXQgaW4gaGlzIG93biBvciBuZWlnaGJvdXJpbmcgaG91c2Vob2xkcy4gQW5kIGhlIHdhcyBjYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZ1cmNpZmVyPC9xPjsgZm9yIHdoYXQgdGhlIEdyZWVrcyBjYWxsIGEgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5wcm9wPC9lbXBoPiwgb3IgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5zdXBwb3J0PC9lbXBoPiwgaXMgY2FsbGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mdXJjYTwvcT4gYnkgdGhlIFJvbWFucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgdGhlcmVmb3JlLCBMYXRpbnVzIGhhZCByZXBvcnRlZCBoaXMgdmlzaW9uIHRvIHRoZSBzZW5hdG9ycywgYW5kIHRoZXkgd2VyZSBhdCBhIGxvc3MgdG8ga25vdyB3aG8gdGhlIHVucGxlYXNhbnQgYW5kIGJhZCBkYW5jZXIgd2FzIHdobyBoYWQgaGVhZGVkIHRoZSBwcm9jZXNzaW9uIHJlZmVycmVkIHRvLCBzb21lIG9mIHRoZW0gd2VyZSBsZWQsIG93aW5nIHRvIHRoZSBleHRyYW9yZGluYXJ5IG5hdHVyZSBvZiBoaXMgcHVuaXNobWVudCwgdG8gdGhpbmsgb2YgdGhlIHNsYXZlIHdobyBoYWQgYmVlbiBzY291cmdlZCB0aHJvdWdoIHRoZSBmb3J1bSBhbmQgdGhlbiBwdXQgdG8gZGVhdGguIEFjY29yZGluZ2x5LCB3aXRoIHRoZSBjb25jdXJyZW5jZSBvZiB0aGUgcHJpZXN0cywgdGhlIG1hc3RlciBvZiB0aGUgc2xhdmUgd2FzIHB1bmlzaGVkLCBhbmQgdGhlIHByb2Nlc3Npb24gYW5kIHNwZWN0YWNsZXMgaW4gaG9ub3VyIG9mIHRoZSBnb2Qgd2VyZSBleGhpYml0ZWQgYW5ldy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gTGl2eSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjM2IiB2YWxpZD0ieWVzIj4oaWkuIDM2IGFuZCAzNyksPC9iaWJsPiBpdCB3YXMgYXQgdGhlIHJlcGV0aXRpb24gb2YgdGhlIGdyZWF0IGdhbWVzLCB3aGljaCB3YXMgbWFkZSBuZWNlc3NhcnkgYnkgdGhlIHByb2ZhbmF0aW9uIG1hZGUga25vd24gYnkgdGhlIGRyZWFtIG9mIExhdGludXMsIHRoYXQgdGhlIFZvbHNjaWFucyB3ZXJlIHNlbnQgb3V0IHRoZSBjaXR5LCBhcyBkZXNjcmliZWQgYnkgUGx1dGFyY2ggaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvci4gMjYuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHZpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgdGhlcmVmb3JlLCBMYXRpbnVzIGhhZCByZXBvcnRlZCBoaXMgdmlzaW9uIHRvIHRoZSBzZW5hdG9ycywgYW5kIHRoZXkgd2VyZSBhdCBhIGxvc3MgdG8ga25vdyB3aG8gdGhlIHVucGxlYXNhbnQgYW5kIGJhZCBkYW5jZXIgd2FzIHdobyBoYWQgaGVhZGVkIHRoZSBwcm9jZXNzaW9uIHJlZmVycmVkIHRvLCBzb21lIG9mIHRoZW0gd2VyZSBsZWQsIG93aW5nIHRvIHRoZSBleHRyYW9yZGluYXJ5IG5hdHVyZSBvZiBoaXMgcHVuaXNobWVudCwgdG8gdGhpbmsgb2YgdGhlIHNsYXZlIHdobyBoYWQgYmVlbiBzY291cmdlZCB0aHJvdWdoIHRoZSBmb3J1bSBhbmQgdGhlbiBwdXQgdG8gZGVhdGguIEFjY29yZGluZ2x5LCB3aXRoIHRoZSBjb25jdXJyZW5jZSBvZiB0aGUgcHJpZXN0cywgdGhlIG1hc3RlciBvZiB0aGUgc2xhdmUgd2FzIHB1bmlzaGVkLCBhbmQgdGhlIHByb2Nlc3Npb24gYW5kIHNwZWN0YWNsZXMgaW4gaG9ub3VyIG9mIHRoZSBnb2Qgd2VyZSBleGhpYml0ZWQgYW5ldy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBMaXZ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zNiIgdmFsaWQ9InllcyI+KGlpLiAzNiBhbmQgMzcpLDwvYmlibD4gaXQgd2FzIGF0IHRoZSByZXBldGl0aW9uIG9mIHRoZSBncmVhdCBnYW1lcywgd2hpY2ggd2FzIG1hZGUgbmVjZXNzYXJ5IGJ5IHRoZSBwcm9mYW5hdGlvbiBtYWRlIGtub3duIGJ5IHRoZSBkcmVhbSBvZiBMYXRpbnVzLCB0aGF0IHRoZSBWb2xzY2lhbnMgd2VyZSBzZW50IG91dCB0aGUgY2l0eSwgYXMgZGVzY3JpYmVkIGJ5IFBsdXRhcmNoIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvci4gMjYuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHZpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzYiIHZhbGlkPSJ5ZXMiPihpaS4gMzYgYW5kIDM3KSw8L2JpYmw+IGl0IHdhcyBhdCB0aGUgcmVwZXRpdGlvbiBvZiB0aGUgZ3JlYXQgZ2FtZXMsIHdoaWNoIHdhcyBtYWRlIG5lY2Vzc2FyeSBieSB0aGUgcHJvZmFuYXRpb24gbWFkZSBrbm93biBieSB0aGUgZHJlYW0gb2YgTGF0aW51cywgdGhhdCB0aGUgVm9sc2NpYW5zIHdlcmUgc2VudCBvdXQgdGhlIGNpdHksIGFzIGRlc2NyaWJlZCBieSBQbHV0YXJjaCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDb3IuIDI2LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh2aS4gMS48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBpdCB3b3VsZCBzZWVtIHRoYXQgTnVtYSwgd2hvIGluIG90aGVyIHJlc3BlY3RzIGFsc28gd2FzIGEgdmVyeSB3aXNlIGRpcmVjdG9yIG9mIHNhY3JlZCByaXRlcywgaGFkIHZlcnkgcHJvcGVybHkgc291Z2h0IHRvIHNlY3VyZSB0aGUgcGVvcGxlJ3MgcmV2ZXJlbnQgYXR0ZW50aW9uIGJ5IG1lYW5zIG9mIHRoZSBmb2xsb3dpbmcgb3JkaW5hbmNlLiBXaGVuLCBuYW1lbHksIG1hZ2lzdHJhdGVzIG9yIHByaWVzdHMgcGVyZm9ybSBhbnkgcmVsaWdpb3VzIGZ1bmN0aW9uLCBhIGhlcmFsZCBnb2VzIGJlZm9yZSwgY3J5aW5nIHdpdGggYSBsb3VkIHZvaWNlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhvYyBhZ2UuPC9xPiBUaGUgbWVhbmluZyBvZiB0aGUgY3J5IGlzLCA8ZW1waD5NaW5kIHRoaXMhPC9lbXBoPiBhbmQgaXQgd2FybnMgdGhlIHBlb3BsZSB0byBnaXZlIGhlZWQgdG8gdGhlIHNhY3JlZCByaXRlcywgYW5kIHN1ZmZlciBubyB0YXNrIG9yIGRlbWFuZCBvZiBidXNpbmVzcyB0byBpbnRlcnZlbmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDE0LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TnVtYTwvdGl0bGU+LCB4aXYuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGltcGx5aW5nIHRoYXQgbWVuIHBlcmZvcm0gbW9zdCBvZiB0aGVpciBkdXRpZXMgdW5kZXIgc29tZSBzb3J0IG9mIGNvbXB1bHNpb24gYW5kIGJ5IGNvbnN0cmFpbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBjdXN0b21hcnkgZm9yIHRoZSBSb21hbnMgdG8gcmVuZXcgc2FjcmlmaWNlcyBhbmQgcHJvY2Vzc2lvbnMgYW5kIHNwZWN0YWNsZXMsIG5vdCBvbmx5IGZvciBzdWNoIGEgcmVhc29uIGFzIHRoZSBhYm92ZSwgYnV0IGFsc28gZm9yIHRyaXZpYWwgcmVhc29ucy4gRm9yIGluc3RhbmNlLCBpZiBvbmUgb2YgdGhlIGhvcnNlcyBkcmF3aW5nIHRoZSBzYWNyZWQgY2hhcmlvdHMgY2FsbGVkIFRlbnNhZSBnaXZlcyBvdXQ7IG9yIGFnYWluLCBpZiB0aGUgY2hhcmlvdGVlciB0YWtlcyBob2xkIG9mIHRoZSByZWlucyB3aXRoIGhpcyBsZWZ0IGhhbmQsIHRoZXkgZGVjcmVlIHRoYXQgdGhlIHByb2Nlc3Npb24gYmUgcmVuZXdlZC4gQW5kIGluIGxhdGVyIGFnZXMsIGEgc2luZ2xlIHNhY3JpZmljZSBoYXMgYmVlbiBwZXJmb3JtZWQgdGhpcnR5IHRpbWVzLCBiZWNhdXNlIGFnYWluIGFuZCBhZ2FpbiBzb21lIGZhaWx1cmUgb3Igb2ZmZW5jZSB3YXMgdGhvdWdodCB0byBvY2N1ci4gU3VjaCBpcyB0aGUgcmV2ZXJlbnQgY2FyZSBvZiB0aGUgUm9tYW5zIGluIHJlbGlnaW91cyBtYXR0ZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBpdCB3b3VsZCBzZWVtIHRoYXQgTnVtYSwgd2hvIGluIG90aGVyIHJlc3BlY3RzIGFsc28gd2FzIGEgdmVyeSB3aXNlIGRpcmVjdG9yIG9mIHNhY3JlZCByaXRlcywgaGFkIHZlcnkgcHJvcGVybHkgc291Z2h0IHRvIHNlY3VyZSB0aGUgcGVvcGxlJ3MgcmV2ZXJlbnQgYXR0ZW50aW9uIGJ5IG1lYW5zIG9mIHRoZSBmb2xsb3dpbmcgb3JkaW5hbmNlLiBXaGVuLCBuYW1lbHksIG1hZ2lzdHJhdGVzIG9yIHByaWVzdHMgcGVyZm9ybSBhbnkgcmVsaWdpb3VzIGZ1bmN0aW9uLCBhIGhlcmFsZCBnb2VzIGJlZm9yZSwgY3J5aW5nIHdpdGggYSBsb3VkIHZvaWNlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SG9jIGFnZS48L3E+IFRoZSBtZWFuaW5nIG9mIHRoZSBjcnkgaXMsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWluZCB0aGlzITwvZW1waD4gYW5kIGl0IHdhcm5zIHRoZSBwZW9wbGUgdG8gZ2l2ZSBoZWVkIHRvIHRoZSBzYWNyZWQgcml0ZXMsIGFuZCBzdWZmZXIgbm8gdGFzayBvciBkZW1hbmQgb2YgYnVzaW5lc3MgdG8gaW50ZXJ2ZW5lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMTQuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk51bWE8L3RpdGxlPiwgeGl2LiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBpbXBseWluZyB0aGF0IG1lbiBwZXJmb3JtIG1vc3Qgb2YgdGhlaXIgZHV0aWVzIHVuZGVyIHNvbWUgc29ydCBvZiBjb21wdWxzaW9uIGFuZCBieSBjb25zdHJhaW50LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMTQuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk51bWE8L3RpdGxlPiwgeGl2LiAyLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TnVtYTwvdGl0bGU+LCB4aXYuIDIuPC90cmFuc2xhdGlvbj4="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBjdXN0b21hcnkgZm9yIHRoZSBSb21hbnMgdG8gcmVuZXcgc2FjcmlmaWNlcyBhbmQgcHJvY2Vzc2lvbnMgYW5kIHNwZWN0YWNsZXMsIG5vdCBvbmx5IGZvciBzdWNoIGEgcmVhc29uIGFzIHRoZSBhYm92ZSwgYnV0IGFsc28gZm9yIHRyaXZpYWwgcmVhc29ucy4gRm9yIGluc3RhbmNlLCBpZiBvbmUgb2YgdGhlIGhvcnNlcyBkcmF3aW5nIHRoZSBzYWNyZWQgY2hhcmlvdHMgY2FsbGVkIFRlbnNhZSBnaXZlcyBvdXQ7IG9yIGFnYWluLCBpZiB0aGUgY2hhcmlvdGVlciB0YWtlcyBob2xkIG9mIHRoZSByZWlucyB3aXRoIGhpcyBsZWZ0IGhhbmQsIHRoZXkgZGVjcmVlIHRoYXQgdGhlIHByb2Nlc3Npb24gYmUgcmVuZXdlZC4gQW5kIGluIGxhdGVyIGFnZXMsIGEgc2luZ2xlIHNhY3JpZmljZSBoYXMgYmVlbiBwZXJmb3JtZWQgdGhpcnR5IHRpbWVzLCBiZWNhdXNlIGFnYWluIGFuZCBhZ2FpbiBzb21lIGZhaWx1cmUgb3Igb2ZmZW5jZSB3YXMgdGhvdWdodCB0byBvY2N1ci4gU3VjaCBpcyB0aGUgcmV2ZXJlbnQgY2FyZSBvZiB0aGUgUm9tYW5zIGluIHJlbGlnaW91cyBtYXR0ZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTWFyY2l1cyBhbmQgVHVsbHVzIHdlcmUgc2VjcmV0bHkgY29uZmVycmluZyBhdCBBbnRpdW0gd2l0aCB0aGUgY2hpZWYgbWVuLCBhbmQgd2VyZSB1cmdpbmcgdGhlbSB0byBiZWdpbiB0aGUgd2FyIHdoaWxlIHRoZSBSb21hbnMgd2VyZSB0b3JuIGJ5IGludGVybmFsIGRpc3NlbnNpb25zLiBBbmQgd2hlbiBzaGFtZSByZXN0cmFpbmVkIHRoZW0gZnJvbSB0aGlzIGNvdXJzZSwgYmVjYXVzZSB0aGV5IGhhZCBhZ3JlZWQgdG8gYSB0cnVjZSBhbmQgY2Vzc2F0aW9uIG9mIGhvc3RpbGl0aWVzIGZvciB0d28geWVhcnMsIHRoZSBSb21hbnMgdGhlbXNlbHZlcyBmdXJuaXNoZWQgdGhlbSB3aXRoIGEgcHJldGV4dCwgYnkgbWFraW5nIHByb2NsYW1hdGlvbiBhdCB0aGUgc3BlY3RhY2xlcyBhbmQgZ2FtZXMsIGJlY2F1c2Ugb2Ygc29tZSBzdXNwaWNpb24gb3Igc2xhbmRlcm91cyByZXBvcnQsIHRoYXQgdGhlIHZpc2l0aW5nIFZvbHNjaWFucyBtdXN0IGxlYXZlIHRoZSBjaXR5IGJlZm9yZSBzdW5zZXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgc2F5PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSBmb2xsb3dpbmcgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvbXAuQWxjLkNvci4gMi4yIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8dGl0bGU+Q29tcGFyaXNvbjwvdGl0bGU+LCBpaS4gMi48L25vdGU+IHRoYXQgdGhpcyB3YXMgZHVlIHRvIGEgZGVjZWl0ZnVsIHN0cmF0YWdlbSBvZiBNYXJjaXVzLCB3aG8gc2VudCBhIG1hbiB0byB0aGUgY29uc3VscyBpbiBSb21lLCBiZWFyaW5nIHRoZSBmYWxzZSBjaGFyZ2UgdGhhdCB0aGUgVm9sc2NpYW5zIHB1cnBvc2VkIHRvIGZhbGwgdXBvbiB0aGUgUm9tYW5zIGF0IHRoZSBzcGVjdGFjbGVzLCBhbmQgc2V0IHRoZSBjaXR5IG9uIGZpcmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIExpdnkgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zNy4xIiB2YWxpZD0ieWVzIj4oaWkuIDM3LCAxLTcpPC9iaWJsPiwgaXQgd2FzIFR1bGx1cyBoaW1zZWxmIHdobyBjYW1lIHRvIHRoZSBjb25zdWxzLCBhcyBoYWQgYmVlbiBwbGFubmVkIHdpdGggTWFyY2l1cy4gUGx1dGFyY2ggYWdyZWVzIHJhdGhlciB3aXRoIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMyI+RGlvbnlzaXVzIEhhbC4gdmlpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhpcyBwcm9jbGFtYXRpb24gbWFkZSBhbGwgdGhlIFZvbHNjaWFucyBtb3JlIGVtYml0dGVyZWQgYWdhaW5zdCB0aGUgUm9tYW5zOyBhbmQgVHVsbHVzLCBtYWduaWZ5aW5nIHRoZSBpbmNpZGVudCwgYW5kIGdvYWRpbmcgdGhlbSBvbiwgYXQgbGFzdCBwZXJzdWFkZWQgdGhlbSB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIFJvbWU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5MaXZ5IHNwZWFrcyBvbmx5IG9mIGEgcmV2b2x0IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzgiIHZhbGlkPSJ5ZXMiPihpaS4gMzgsIDxlbXBoPmZpbi48L2VtcGg+KS4gPC9iaWJsPiBQbHV0YXJjaCBhZ3JlZXMgd2l0aCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjQiPkRpb255c2l1cyBIYWwuIHZpaWkuIDQtMTAuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBkZW1hbmQgYmFjayB0aGUgdGVycml0b3J5IGFuZCB0aGUgY2l0aWVzIHdoaWNoIGhhZCBiZWVuIHRha2VuIGZyb20gdGhlIFZvbHNjaWFucyBpbiB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgUm9tYW5zLCBhZnRlciBoZWFyaW5nIHRoZSBhbWJhc3NhZG9ycywgd2VyZSBmdWxsIG9mIGluZGlnbmF0aW9uLCBhbmQgcmVwbGllZCB0aGF0IHRoZSBWb2xzY2lhbnMgbWlnaHQgYmUgZmlyc3QgdG8gdGFrZSB1cCBhcm1zLCBidXQgdGhlIFJvbWFucyB3b3VsZCBiZSBsYXN0IHRvIGxheSB0aGVtIGRvd24uIFVwb24gcmVjZWl2aW5nIHRoaXMgYW5zd2VyLCBUdWxsdXMgY2FsbGVkIGEgZ2VuZXJhbCBhc3NlbWJseSBvZiBoaXMgcGVvcGxlLCBhbmQgYWZ0ZXIgdGhleSBoYWQgdm90ZWQgZm9yIHRoZSB3YXIsIGFkdmlzZWQgdGhlbSB0byBjYWxsIGluIE1hcmNpdXMsIGNoZXJpc2hpbmcgbm8gcmVzZW50bWVudCBhZ2FpbnN0IGhpbSwgYnV0IGZpcm1seSBjb252aW5jZWQgdGhhdCBoZSB3b3VsZCBiZSBtb3JlIGhlbHBmdWwgYXMgYW4gYWxseSB0aGFuIGhlIGhhZCBiZWVuIGluanVyaW91cyBhcyBhIGZvZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE1hcmNpdXMgYW5kIFR1bGx1cyB3ZXJlIHNlY3JldGx5IGNvbmZlcnJpbmcgYXQgQW50aXVtIHdpdGggdGhlIGNoaWVmIG1lbiwgYW5kIHdlcmUgdXJnaW5nIHRoZW0gdG8gYmVnaW4gdGhlIHdhciB3aGlsZSB0aGUgUm9tYW5zIHdlcmUgdG9ybiBieSBpbnRlcm5hbCBkaXNzZW5zaW9ucy4gQW5kIHdoZW4gc2hhbWUgcmVzdHJhaW5lZCB0aGVtIGZyb20gdGhpcyBjb3Vyc2UsIGJlY2F1c2UgdGhleSBoYWQgYWdyZWVkIHRvIGEgdHJ1Y2UgYW5kIGNlc3NhdGlvbiBvZiBob3N0aWxpdGllcyBmb3IgdHdvIHllYXJzLCB0aGUgUm9tYW5zIHRoZW1zZWx2ZXMgZnVybmlzaGVkIHRoZW0gd2l0aCBhIHByZXRleHQsIGJ5IG1ha2luZyBwcm9jbGFtYXRpb24gYXQgdGhlIHNwZWN0YWNsZXMgYW5kIGdhbWVzLCBiZWNhdXNlIG9mIHNvbWUgc3VzcGljaW9uIG9yIHNsYW5kZXJvdXMgcmVwb3J0LCB0aGF0IHRoZSB2aXNpdGluZyBWb2xzY2lhbnMgbXVzdCBsZWF2ZSB0aGUgY2l0eSBiZWZvcmUgc3Vuc2V0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgc2F5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIGZvbGxvd2luZyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDb21wLkFsYy5Db3IuIDIuMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tcGFyaXNvbjwvdGl0bGU+LCBpaS4gMi48L25vdGU+IHRoYXQgdGhpcyB3YXMgZHVlIHRvIGEgZGVjZWl0ZnVsIHN0cmF0YWdlbSBvZiBNYXJjaXVzLCB3aG8gc2VudCBhIG1hbiB0byB0aGUgY29uc3VscyBpbiBSb21lLCBiZWFyaW5nIHRoZSBmYWxzZSBjaGFyZ2UgdGhhdCB0aGUgVm9sc2NpYW5zIHB1cnBvc2VkIHRvIGZhbGwgdXBvbiB0aGUgUm9tYW5zIGF0IHRoZSBzcGVjdGFjbGVzLCBhbmQgc2V0IHRoZSBjaXR5IG9uIGZpcmUuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ29tcC5BbGMuQ29yLiAyLjIiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbXBhcmlzb248L3RpdGxlPiwgaWkuIDIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gTGl2eSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzcuMSIgdmFsaWQ9InllcyI+KGlpLiAzNywgMS03KTwvYmlibD4sIGl0IHdhcyBUdWxsdXMgaGltc2VsZiB3aG8gY2FtZSB0byB0aGUgY29uc3VscywgYXMgaGFkIGJlZW4gcGxhbm5lZCB3aXRoIE1hcmNpdXMuIFBsdXRhcmNoIGFncmVlcyByYXRoZXIgd2l0aCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMyI+RGlvbnlzaXVzIEhhbC4gdmlpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhpcyBwcm9jbGFtYXRpb24gbWFkZSBhbGwgdGhlIFZvbHNjaWFucyBtb3JlIGVtYml0dGVyZWQgYWdhaW5zdCB0aGUgUm9tYW5zOyBhbmQgVHVsbHVzLCBtYWduaWZ5aW5nIHRoZSBpbmNpZGVudCwgYW5kIGdvYWRpbmcgdGhlbSBvbiwgYXQgbGFzdCBwZXJzdWFkZWQgdGhlbSB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIFJvbWU8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzcuMSIgdmFsaWQ9InllcyI+KGlpLiAzNywgMS03KTwvYmlibD4sIGl0IHdhcyBUdWxsdXMgaGltc2VsZiB3aG8gY2FtZSB0byB0aGUgY29uc3VscywgYXMgaGFkIGJlZW4gcGxhbm5lZCB3aXRoIE1hcmNpdXMuIFBsdXRhcmNoIGFncmVlcyByYXRoZXIgd2l0aCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMyI+RGlvbnlzaXVzIEhhbC4gdmlpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TGl2eSBzcGVha3Mgb25seSBvZiBhIHJldm9sdCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzgiIHZhbGlkPSJ5ZXMiPihpaS4gMzgsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+ZmluLjwvZW1waD4pLiA8L2JpYmw+IFBsdXRhcmNoIGFncmVlcyB3aXRoIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC40Ij5EaW9ueXNpdXMgSGFsLiB2aWlpLiA0LTEwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgZGVtYW5kIGJhY2sgdGhlIHRlcnJpdG9yeSBhbmQgdGhlIGNpdGllcyB3aGljaCBoYWQgYmVlbiB0YWtlbiBmcm9tIHRoZSBWb2xzY2lhbnMgaW4gd2FyLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zOCIgdmFsaWQ9InllcyI+KGlpLiAzOCwgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5maW4uPC9lbXBoPikuIDwvYmlibD4gUGx1dGFyY2ggYWdyZWVzIHdpdGggPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5maW4uPC9lbXBoPikuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC40Ij5EaW9ueXNpdXMgSGFsLiB2aWlpLiA0LTEwLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgUm9tYW5zLCBhZnRlciBoZWFyaW5nIHRoZSBhbWJhc3NhZG9ycywgd2VyZSBmdWxsIG9mIGluZGlnbmF0aW9uLCBhbmQgcmVwbGllZCB0aGF0IHRoZSBWb2xzY2lhbnMgbWlnaHQgYmUgZmlyc3QgdG8gdGFrZSB1cCBhcm1zLCBidXQgdGhlIFJvbWFucyB3b3VsZCBiZSBsYXN0IHRvIGxheSB0aGVtIGRvd24uIFVwb24gcmVjZWl2aW5nIHRoaXMgYW5zd2VyLCBUdWxsdXMgY2FsbGVkIGEgZ2VuZXJhbCBhc3NlbWJseSBvZiBoaXMgcGVvcGxlLCBhbmQgYWZ0ZXIgdGhleSBoYWQgdm90ZWQgZm9yIHRoZSB3YXIsIGFkdmlzZWQgdGhlbSB0byBjYWxsIGluIE1hcmNpdXMsIGNoZXJpc2hpbmcgbm8gcmVzZW50bWVudCBhZ2FpbnN0IGhpbSwgYnV0IGZpcm1seSBjb252aW5jZWQgdGhhdCBoZSB3b3VsZCBiZSBtb3JlIGhlbHBmdWwgYXMgYW4gYWxseSB0aGFuIGhlIGhhZCBiZWVuIGluanVyaW91cyBhcyBhIGZvZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFyY2l1cyB3YXMgdGhlcmVmb3JlIGNhbGxlZCBpbiwgYW5kIGhlbGQgYSBjb25mZXJlbmNlIHdpdGggdGhlIGFzc2VtYmx5OyB0aGV5IHNhdyBmcm9tIGhpcyBzcGVlY2ggdGhhdCBoZSB3YXMgYXMgZWxvcXVlbnQgYXMgaGlzIGV4cGxvaXRzIGluIGFybXMgaGFkIHRhdWdodCB0aGVtIHRoYXQgaGUgd2FzIHdhcmxpa2UsIGFuZCB3ZXJlIGNvbnZpbmNlZCBvZiBoaXMgc3VycGFzc2luZyBpbnRlbGxpZ2VuY2UgYW5kIGRhcmluZzsgc28gdGhleSBhcHBvaW50ZWQgaGltIGdlbmVyYWwgd2l0aCBUdWxsdXMsIGFuZCBnYXZlIGhpbSBmdWxsIHBvd2VycyB0byBjb25kdWN0IHRoZSB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZlYXJpbmcsIHRoZW4sIHRoYXQgdGhlIHRpbWUgbmVlZGVkIHRvIGVxdWlwIGFuZCBtYXJzaGFsIHRoZSBWb2xzY2lhbnMgd291bGQgYmUgc28gbG9uZyBhcyB0byByb2IgaGltIG9mIGhpcyBiZXN0IG9wcG9ydHVuaXR5IGZvciBhY3Rpb24sIGhlIGxlZnQgb3JkZXJzIHdpdGggdGhlIG1hZ2lzdHJhdGVzIGFuZCBjaGllZiBtZW4gb2YgdGhlIGNpdHkgdG8gYXNzZW1ibGUgYW5kIHByb3ZpZGUgdGhlIHJlbWFpbmluZyBmb3JjZXMgYW5kIHN1cHBsaWVzIHRoYXQgd2VyZSByZXF1aXNpdGUsIHdoaWxlIGhlIGhpbXNlbGY7IGFmdGVyIHBlcnN1YWRpbmcgdGhlIG1vc3QgYXJkZW50IHNwaXJpdHMgdG8gbWFyY2ggZm9ydGggYXMgdm9sdW50ZWVycyB3aXRoIGhpbSBhbmQgbm90IHN0b3AgZm9yIGZvcm1hbCBlbnJvbG1lbnQsIGJ1cnN0IGludG8gdGhlIFJvbWFuIHRlcnJpdG9yeSBvZiBhIHN1ZGRlbiwgd2hlbiBubyBvbmUgZXhwZWN0ZWQgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNvbnNlcXVlbnRseSBoZSBzZWN1cmVkIHN1Y2ggYWJ1bmRhbmNlIG9mIGJvb3R5IHRoYXQgdGhlIFZvbHNjaWFucyBoYWQgbW9yZSB0aGFuIHRoZXkgY291bGQgcG9zc2libHkgZG8gdG8gdXNlIGl0IGluIHRoZWlyIGNhbXAgb3IgY2FycnkgaXQgb2ZmIGhvbWUuIEJ1dCB0aGUgYWJ1bmRhbnQgc3VwcGxpZXMgc2VjdXJlZCwgYW5kIHRoZSBncmVhdCBpbmp1cnkgYW5kIGRhbWFnZSBkb25lIHRvIHRoZSBlbmVteSdzIGNvdW50cnksIHdlcmUsIGluIGhpcyBleWVzLCB0aGUgbW9zdCBpbnNpZ25pZmljYW50IHJlc3VsdCBvZiB0aGF0IGV4cGVkaXRpb247IGl0cyBjaGllZiByZXN1bHQsIGFuZCBoaXMgbWFpbiBvYmplY3QgaW4gbWFraW5nIGl0LCB3YXMgdG8gZnVybmlzaCB0aGUgcGVvcGxlIG9mIFJvbWUgd2l0aCBmcmVzaCBjaGFyZ2VzIGFnYWluc3QgdGhlIHBhdHJpY2lhbnMuIEZvciB3aGlsZSBoZSBtYWx0cmVhdGVkIGFuZCBkZXN0cm95ZWQgZXZlcnl0aGluZyBlbHNlLCBoZSBrZXB0IGEgdmlnb3JvdXMgd2F0Y2ggb3ZlciB0aGUgbGFuZHMgb2YgdGhlIHBhdHJpY2lhbnMsIGFuZCB3b3VsZCBub3Qgc3VmZmVyIGFueW9uZSB0byBodXJ0IHRoZW0gb3IgdGFrZSBhbnl0aGluZyBmcm9tIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbGVkIHRvIHN0aWxsIGZ1cnRoZXIgYWNjdXNhdGlvbnMgYW5kIGJyb2lscyBiZXR3ZWVuIHRoZSBwYXJ0aWVzIGluIHRoZSBjaXR5OyB0aGUgcGF0cmljaWFucyBhY2N1c2VkIHRoZSBwZW9wbGUgb2YgdW5qdXN0bHkgZHJpdmluZyBvdXQgYW4gaW5mbHVlbnRpYWwgbWFuLCBhbmQgdGhlIHBlb3BsZSBjaGFyZ2VkIHRoZSBwYXRyaWNpYW5zIHdpdGggYnJpbmdpbmcgTWFyY2l1cyB1cCBhZ2FpbnN0IHRoZW0gaW4gYSBzcGlyaXQgb2YgcmV2ZW5nZSwgYW5kIHRoZW4gZW5qb3lpbmcgdGhlIHNwZWN0YWNsZSBvZiB3aGF0IG90aGVycyBzdWZmZXJlZCBieSB0aGUgd2FyLCB3aGlsZSB0aGUgd2FyIGl0c2VsZiBwcm90ZWN0ZWQgdGhlaXIgb3duIHdlYWx0aCBhbmQgcHJvcGVydHkgb3V0c2lkZSB0aGUgY2l0eS4gQWZ0ZXIgTWFyY2l1cyBoYWQgYWNjb21wbGlzaGVkIGhpcyBwdXJwb3NlcywgYW5kIGdyZWF0bHkgaGVscGVkIHRoZSBWb2xzY2lhbnMgdG93YXJkcyBjb3VyYWdlIGFuZCBzY29ybiBvZiB0aGVpciBlbmVtaWVzLCBoZSBsZWQgaGlzIGZvcmNlcyBiYWNrIGluIHNhZmV0eS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVyZSBpcyBub3RoaW5nIG9mIHRoaXMgcHJlbGltaW5hcnkgZm9yYXkgaW4gTGl2eS4gSXQgaXMgb24gdGhlIG1haW4gZXhwZWRpdGlvbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ29yLiAyOCIgdmFsaWQ9InllcyI+KGNoYXAuIHh4dmlpaS4pPC9iaWJsPiB0aGF0IHRoZSBwYXRyaWNpYW4gbGFuZHMgYXJlIHNwYXJlZCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjM5IiB2YWxpZD0ieWVzIj4oaWkuIDM5KS48L2JpYmw+IEFjY29yZGluZyB0byBEaW9ueXNpdXMgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC4xMiI+KHZpaWkuIDEyKSw8L2JpYmw+IFR1bGx1cyBsZWQgb25lIGRpdmlzaW9uIGludG8gdGhlIHRlcnJpdG9yeSBvZiB0aGUgTGF0aW5zLCBNYXJjaXVzIHRoZSBvdGhlciBpbnRvIHRoYXQgb2YgUm9tZSwgYW5kIGJvdGggYnJvdWdodCBiYWNrIGVub3Jtb3VzIGJvb3R5Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFyY2l1cyB3YXMgdGhlcmVmb3JlIGNhbGxlZCBpbiwgYW5kIGhlbGQgYSBjb25mZXJlbmNlIHdpdGggdGhlIGFzc2VtYmx5OyB0aGV5IHNhdyBmcm9tIGhpcyBzcGVlY2ggdGhhdCBoZSB3YXMgYXMgZWxvcXVlbnQgYXMgaGlzIGV4cGxvaXRzIGluIGFybXMgaGFkIHRhdWdodCB0aGVtIHRoYXQgaGUgd2FzIHdhcmxpa2UsIGFuZCB3ZXJlIGNvbnZpbmNlZCBvZiBoaXMgc3VycGFzc2luZyBpbnRlbGxpZ2VuY2UgYW5kIGRhcmluZzsgc28gdGhleSBhcHBvaW50ZWQgaGltIGdlbmVyYWwgd2l0aCBUdWxsdXMsIGFuZCBnYXZlIGhpbSBmdWxsIHBvd2VycyB0byBjb25kdWN0IHRoZSB3YXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZlYXJpbmcsIHRoZW4sIHRoYXQgdGhlIHRpbWUgbmVlZGVkIHRvIGVxdWlwIGFuZCBtYXJzaGFsIHRoZSBWb2xzY2lhbnMgd291bGQgYmUgc28gbG9uZyBhcyB0byByb2IgaGltIG9mIGhpcyBiZXN0IG9wcG9ydHVuaXR5IGZvciBhY3Rpb24sIGhlIGxlZnQgb3JkZXJzIHdpdGggdGhlIG1hZ2lzdHJhdGVzIGFuZCBjaGllZiBtZW4gb2YgdGhlIGNpdHkgdG8gYXNzZW1ibGUgYW5kIHByb3ZpZGUgdGhlIHJlbWFpbmluZyBmb3JjZXMgYW5kIHN1cHBsaWVzIHRoYXQgd2VyZSByZXF1aXNpdGUsIHdoaWxlIGhlIGhpbXNlbGY7IGFmdGVyIHBlcnN1YWRpbmcgdGhlIG1vc3QgYXJkZW50IHNwaXJpdHMgdG8gbWFyY2ggZm9ydGggYXMgdm9sdW50ZWVycyB3aXRoIGhpbSBhbmQgbm90IHN0b3AgZm9yIGZvcm1hbCBlbnJvbG1lbnQsIGJ1cnN0IGludG8gdGhlIFJvbWFuIHRlcnJpdG9yeSBvZiBhIHN1ZGRlbiwgd2hlbiBubyBvbmUgZXhwZWN0ZWQgaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNvbnNlcXVlbnRseSBoZSBzZWN1cmVkIHN1Y2ggYWJ1bmRhbmNlIG9mIGJvb3R5IHRoYXQgdGhlIFZvbHNjaWFucyBoYWQgbW9yZSB0aGFuIHRoZXkgY291bGQgcG9zc2libHkgZG8gdG8gdXNlIGl0IGluIHRoZWlyIGNhbXAgb3IgY2FycnkgaXQgb2ZmIGhvbWUuIEJ1dCB0aGUgYWJ1bmRhbnQgc3VwcGxpZXMgc2VjdXJlZCwgYW5kIHRoZSBncmVhdCBpbmp1cnkgYW5kIGRhbWFnZSBkb25lIHRvIHRoZSBlbmVteSdzIGNvdW50cnksIHdlcmUsIGluIGhpcyBleWVzLCB0aGUgbW9zdCBpbnNpZ25pZmljYW50IHJlc3VsdCBvZiB0aGF0IGV4cGVkaXRpb247IGl0cyBjaGllZiByZXN1bHQsIGFuZCBoaXMgbWFpbiBvYmplY3QgaW4gbWFraW5nIGl0LCB3YXMgdG8gZnVybmlzaCB0aGUgcGVvcGxlIG9mIFJvbWUgd2l0aCBmcmVzaCBjaGFyZ2VzIGFnYWluc3QgdGhlIHBhdHJpY2lhbnMuIEZvciB3aGlsZSBoZSBtYWx0cmVhdGVkIGFuZCBkZXN0cm95ZWQgZXZlcnl0aGluZyBlbHNlLCBoZSBrZXB0IGEgdmlnb3JvdXMgd2F0Y2ggb3ZlciB0aGUgbGFuZHMgb2YgdGhlIHBhdHJpY2lhbnMsIGFuZCB3b3VsZCBub3Qgc3VmZmVyIGFueW9uZSB0byBodXJ0IHRoZW0gb3IgdGFrZSBhbnl0aGluZyBmcm9tIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbGVkIHRvIHN0aWxsIGZ1cnRoZXIgYWNjdXNhdGlvbnMgYW5kIGJyb2lscyBiZXR3ZWVuIHRoZSBwYXJ0aWVzIGluIHRoZSBjaXR5OyB0aGUgcGF0cmljaWFucyBhY2N1c2VkIHRoZSBwZW9wbGUgb2YgdW5qdXN0bHkgZHJpdmluZyBvdXQgYW4gaW5mbHVlbnRpYWwgbWFuLCBhbmQgdGhlIHBlb3BsZSBjaGFyZ2VkIHRoZSBwYXRyaWNpYW5zIHdpdGggYnJpbmdpbmcgTWFyY2l1cyB1cCBhZ2FpbnN0IHRoZW0gaW4gYSBzcGlyaXQgb2YgcmV2ZW5nZSwgYW5kIHRoZW4gZW5qb3lpbmcgdGhlIHNwZWN0YWNsZSBvZiB3aGF0IG90aGVycyBzdWZmZXJlZCBieSB0aGUgd2FyLCB3aGlsZSB0aGUgd2FyIGl0c2VsZiBwcm90ZWN0ZWQgdGhlaXIgb3duIHdlYWx0aCBhbmQgcHJvcGVydHkgb3V0c2lkZSB0aGUgY2l0eS4gQWZ0ZXIgTWFyY2l1cyBoYWQgYWNjb21wbGlzaGVkIGhpcyBwdXJwb3NlcywgYW5kIGdyZWF0bHkgaGVscGVkIHRoZSBWb2xzY2lhbnMgdG93YXJkcyBjb3VyYWdlIGFuZCBzY29ybiBvZiB0aGVpciBlbmVtaWVzLCBoZSBsZWQgaGlzIGZvcmNlcyBiYWNrIGluIHNhZmV0eS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXJlIGlzIG5vdGhpbmcgb2YgdGhpcyBwcmVsaW1pbmFyeSBmb3JheSBpbiBMaXZ5LiBJdCBpcyBvbiB0aGUgbWFpbiBleHBlZGl0aW9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvci4gMjgiIHZhbGlkPSJ5ZXMiPihjaGFwLiB4eHZpaWkuKTwvYmlibD4gdGhhdCB0aGUgcGF0cmljaWFuIGxhbmRzIGFyZSBzcGFyZWQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjM5IiB2YWxpZD0ieWVzIj4oaWkuIDM5KS48L2JpYmw+IEFjY29yZGluZyB0byBEaW9ueXNpdXMgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjEyIj4odmlpaS4gMTIpLDwvYmlibD4gVHVsbHVzIGxlZCBvbmUgZGl2aXNpb24gaW50byB0aGUgdGVycml0b3J5IG9mIHRoZSBMYXRpbnMsIE1hcmNpdXMgdGhlIG90aGVyIGludG8gdGhhdCBvZiBSb21lLCBhbmQgYm90aCBicm91Z2h0IGJhY2sgZW5vcm1vdXMgYm9vdHkuPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDb3IuIDI4IiB2YWxpZD0ieWVzIj4oY2hhcC4geHh2aWlpLik8L2JpYmw+IHRoYXQgdGhlIHBhdHJpY2lhbiBsYW5kcyBhcmUgc3BhcmVkIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zOSIgdmFsaWQ9InllcyI+KGlpLiAzOSkuPC9iaWJsPiBBY2NvcmRpbmcgdG8gRGlvbnlzaXVzIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC4xMiI+KHZpaWkuIDEyKSw8L2JpYmw+IFR1bGx1cyBsZWQgb25lIGRpdmlzaW9uIGludG8gdGhlIHRlcnJpdG9yeSBvZiB0aGUgTGF0aW5zLCBNYXJjaXVzIHRoZSBvdGhlciBpbnRvIHRoYXQgb2YgUm9tZSwgYW5kIGJvdGggYnJvdWdodCBiYWNrIGVub3Jtb3VzIGJvb3R5LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbnRpcmUgZm9yY2Ugb2YgdGhlIFZvbHNjaWFucyB3YXMgYXNzZW1ibGVkIHdpdGggc3BlZWQgYW5kIGFsYWNyaXR5LCBhbmQgd2FzIHRoZW4gc2VlbiB0byBiZSBzbyBsYXJnZSB0aGF0IHRoZXkgZGV0ZXJtaW5lZCB0byBsZWF2ZSBhIHBhcnQgb2YgaXQgYmVoaW5kIGZvciB0aGUgc2VjdXJpdHkgb2YgdGhlaXIgY2l0aWVzLCBhbmQgd2l0aCB0aGUgb3RoZXIgcGFydCB0byBtYXJjaCBhZ2FpbnN0IHRoZSBSb21hbnMuIE1vcmVvdmVyLCBNYXJjaXVzIGxlZnQgaXQgdG8gdGhlIGNob2ljZSBvZiBUdWxsdXMgd2hpY2ggb2YgdGhlIHR3byBkaXZpc2lvbnMgaGUgd291bGQgY29tbWFuZC4gVGhlbiBUdWxsdXMsIHJlbWFya2luZyB0aGF0IE1hcmNpdXMgd2FzIGNsZWFybHkgaW4gbm8gd2lzZSBpbmZlcmlvciB0byBoaW1zZWxmIGluIHZhbG91ciwgYW5kIGhhZCBlbmpveWVkIGEgYmV0dGVyIGZvcnR1bmUgaW4gYWxsIGhpcyBiYXR0bGVzLCBiYWRlIGhpbSBsZWFkIHRoZSBkaXZpc2lvbiB0aGF0IHdhcyB0byB0YWtlIHRoZSBmaWVsZCwgYW5kIGhlIGhpbXNlbGYgd291bGQgcmVtYWluIGJlaGluZCB0byBndWFyZCB0aGUgY2l0aWVzIGFuZCBwcm92aWRlIHdoYXQgd2FzIHJlcXVpc2l0ZSBmb3IgdGhlIGFybXkgYWJyb2FkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjEzIj5EaW9ueXNpdXMsIHZpaWkuIDEzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldpdGggYSBzdHJvbmdlciBmb3JjZSB0aGFuIGJlZm9yZSwgdGhlbiwgTWFyY2l1cyBzZXQgb3V0IGZpcnN0IGFnYWluc3QgQ2lyY2VpaSwgYSBjaXR5IHdoaWNoIHdhcyBhIGNvbG9ueSBvZiBSb21lOyB0aGlzIHN1cnJlbmRlcmVkIHRvIGhpbSBvZiBpdHMgb3duIGFjY29yZCwgYW5kIGhlIGRpZCBpdCBubyBoYXJtLiBOZXh0LCBoZSBsYWlkIHdhc3RlIHRoZSBjb3VudHJ5IG9mIHRoZSBMYXRpbnMsIHdoZXJlIGhlIGV4cGVjdGVkIHRoYXQgdGhlIFJvbWFucyB3b3VsZCBlbmdhZ2UgaGltIGluIGRlZmVuY2Ugb2YgdGhlIExhdGlucywgd2hvIHdlcmUgdGhlaXIgYWxsaWVzIGFuZCBieSBmcmVxdWVudCBtZXNzZW5nZXJzIHdlcmUgY2FsbGluZyB1cG9uIHRoZW0gZm9yIGhlbHAuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgY29tbW9ucyB3ZXJlIGluZGlmZmVyZW50IHRvIHRoZSBhcHBlYWwsIHRoZSBjb25zdWxzIHdlcmUgdW53aWxsaW5nIHRvIHJpc2sgYSBjYW1wYWlnbiBkdXJpbmcgdGhlIHNob3J0IHRpbWUgbGVmdCBvZiB0aGVpciB0ZXJtIG9mIG9mZmljZSwgYW5kIHRoZXJlZm9yZSB0aGUgTGF0aW4gZW52b3lzIHdlcmUgZGlzbWlzc2VkLiBVbmRlciB0aGVzZSBjaXJjdW1zdGFuY2VzIE1hcmNpdXMgbGVkIGhpcyBmb3JjZXMgYWdhaW5zdCB0aGVpciBjaXRpZXMsIGFuZCB0YWtpbmcgYnkgYXNzYXVsdCB0aG9zZSB3aGljaCBvZmZlcmVkIHJlc2lzdGFuY2UgdG8gaGltLCBuYW1lbHksIFRvbGVyaXVtLCBMYXZpY3VtLCBQZWR1bSwgYW5kIGxhdGVyIEJvbGEsIGhlIG1hZGUgc2xhdmVzIG9mIHRoZSBpbmhhYml0YW50cyBhbmQgcGx1bmRlcmVkIHRoZWlyIHByb3BlcnR5LiBCdXQgZm9yIHRob3NlIHdobyBjYW1lIG92ZXIgdG8gaGltIG9mIHRoZWlyIG93biBhY2NvcmQgaGUgc2hvd2VkIG11Y2ggY29uY2VybiwgYW5kIHRoYXQgdGhleSBtaWdodCBzdWZmZXIgbm8gaGFybSwgZXZlbiBhZ2FpbnN0IGhpcyB3aXNoZXMsIGhlIGVuY2FtcGVkIGFzIGZhciBhcyBoZSBjb3VsZCBmcm9tIHRoZW0sIGFuZCBoZWxkIGFsb29mIGZyb20gdGhlaXIgdGVycml0b3J5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGVudGlyZSBmb3JjZSBvZiB0aGUgVm9sc2NpYW5zIHdhcyBhc3NlbWJsZWQgd2l0aCBzcGVlZCBhbmQgYWxhY3JpdHksIGFuZCB3YXMgdGhlbiBzZWVuIHRvIGJlIHNvIGxhcmdlIHRoYXQgdGhleSBkZXRlcm1pbmVkIHRvIGxlYXZlIGEgcGFydCBvZiBpdCBiZWhpbmQgZm9yIHRoZSBzZWN1cml0eSBvZiB0aGVpciBjaXRpZXMsIGFuZCB3aXRoIHRoZSBvdGhlciBwYXJ0IHRvIG1hcmNoIGFnYWluc3QgdGhlIFJvbWFucy4gTW9yZW92ZXIsIE1hcmNpdXMgbGVmdCBpdCB0byB0aGUgY2hvaWNlIG9mIFR1bGx1cyB3aGljaCBvZiB0aGUgdHdvIGRpdmlzaW9ucyBoZSB3b3VsZCBjb21tYW5kLiBUaGVuIFR1bGx1cywgcmVtYXJraW5nIHRoYXQgTWFyY2l1cyB3YXMgY2xlYXJseSBpbiBubyB3aXNlIGluZmVyaW9yIHRvIGhpbXNlbGYgaW4gdmFsb3VyLCBhbmQgaGFkIGVuam95ZWQgYSBiZXR0ZXIgZm9ydHVuZSBpbiBhbGwgaGlzIGJhdHRsZXMsIGJhZGUgaGltIGxlYWQgdGhlIGRpdmlzaW9uIHRoYXQgd2FzIHRvIHRha2UgdGhlIGZpZWxkLCBhbmQgaGUgaGltc2VsZiB3b3VsZCByZW1haW4gYmVoaW5kIHRvIGd1YXJkIHRoZSBjaXRpZXMgYW5kIHByb3ZpZGUgd2hhdCB3YXMgcmVxdWlzaXRlIGZvciB0aGUgYXJteSBhYnJvYWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjEzIj5EaW9ueXNpdXMsIHZpaWkuIDEzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjEzIj5EaW9ueXNpdXMsIHZpaWkuIDEzLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldpdGggYSBzdHJvbmdlciBmb3JjZSB0aGFuIGJlZm9yZSwgdGhlbiwgTWFyY2l1cyBzZXQgb3V0IGZpcnN0IGFnYWluc3QgQ2lyY2VpaSwgYSBjaXR5IHdoaWNoIHdhcyBhIGNvbG9ueSBvZiBSb21lOyB0aGlzIHN1cnJlbmRlcmVkIHRvIGhpbSBvZiBpdHMgb3duIGFjY29yZCwgYW5kIGhlIGRpZCBpdCBubyBoYXJtLiBOZXh0LCBoZSBsYWlkIHdhc3RlIHRoZSBjb3VudHJ5IG9mIHRoZSBMYXRpbnMsIHdoZXJlIGhlIGV4cGVjdGVkIHRoYXQgdGhlIFJvbWFucyB3b3VsZCBlbmdhZ2UgaGltIGluIGRlZmVuY2Ugb2YgdGhlIExhdGlucywgd2hvIHdlcmUgdGhlaXIgYWxsaWVzIGFuZCBieSBmcmVxdWVudCBtZXNzZW5nZXJzIHdlcmUgY2FsbGluZyB1cG9uIHRoZW0gZm9yIGhlbHAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgY29tbW9ucyB3ZXJlIGluZGlmZmVyZW50IHRvIHRoZSBhcHBlYWwsIHRoZSBjb25zdWxzIHdlcmUgdW53aWxsaW5nIHRvIHJpc2sgYSBjYW1wYWlnbiBkdXJpbmcgdGhlIHNob3J0IHRpbWUgbGVmdCBvZiB0aGVpciB0ZXJtIG9mIG9mZmljZSwgYW5kIHRoZXJlZm9yZSB0aGUgTGF0aW4gZW52b3lzIHdlcmUgZGlzbWlzc2VkLiBVbmRlciB0aGVzZSBjaXJjdW1zdGFuY2VzIE1hcmNpdXMgbGVkIGhpcyBmb3JjZXMgYWdhaW5zdCB0aGVpciBjaXRpZXMsIGFuZCB0YWtpbmcgYnkgYXNzYXVsdCB0aG9zZSB3aGljaCBvZmZlcmVkIHJlc2lzdGFuY2UgdG8gaGltLCBuYW1lbHksIFRvbGVyaXVtLCBMYXZpY3VtLCBQZWR1bSwgYW5kIGxhdGVyIEJvbGEsIGhlIG1hZGUgc2xhdmVzIG9mIHRoZSBpbmhhYml0YW50cyBhbmQgcGx1bmRlcmVkIHRoZWlyIHByb3BlcnR5LiBCdXQgZm9yIHRob3NlIHdobyBjYW1lIG92ZXIgdG8gaGltIG9mIHRoZWlyIG93biBhY2NvcmQgaGUgc2hvd2VkIG11Y2ggY29uY2VybiwgYW5kIHRoYXQgdGhleSBtaWdodCBzdWZmZXIgbm8gaGFybSwgZXZlbiBhZ2FpbnN0IGhpcyB3aXNoZXMsIGhlIGVuY2FtcGVkIGFzIGZhciBhcyBoZSBjb3VsZCBmcm9tIHRoZW0sIGFuZCBoZWxkIGFsb29mIGZyb20gdGhlaXIgdGVycml0b3J5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWZ0ZXIgaGUgaGFkIHRha2VuIEJvbGEsIGEgY2l0eSBub3QgbW9yZSB0aGFuIHR3ZWx2ZSBtaWxlcyBhd2F5IGZyb20gUm9tZSwgd2hlcmUgaGUgZ290IG11Y2ggdHJlYXN1cmUgYW5kIHB1dCBhbG1vc3QgYWxsIHRoZSBhZHVsdHMgdG8gdGhlIHN3b3JkOyBhbmQgYWZ0ZXIgdGhlIFZvbHNjaWFucyBldmVuIHdobyBoYWQgYmVlbiBvcmRlcmVkIHRvIHJlbWFpbiBpbiB0aGVpciBjaXRpZXMgZ3JldyBpbXBhdGllbnQsIGFuZCBjYW1lIHRyb29waW5nIGluIGFybXMgdG8gTWFyY2l1cywgZGVjbGFyaW5nIHRoYXQgaGUgd2FzIHRoZSBzb2xlIGFuZCBvbmx5IGdlbmVyYWwgd2hvbSB0aGV5IHdvdWxkIHJlY29nbml6ZSBhcyB0aGVpciBsZWFkZXIsIHRoZW4gaGlzIG5hbWUgd2FzIGdyZWF0IHRocm91Z2hvdXQgYWxsIEl0YWx5LCBhbmQgbWVuIHRob3VnaHQgd2l0aCBhbWF6ZW1lbnQgaG93IHRoZSB2YWxvdXIgb2YgYSBzaW5nbGUgbWFuLCB1cG9uIGhpcyBjaGFuZ2luZyBzaWRlcywgaGFkIGVmZmVjdGVkIHN1Y2ggYSBtYXJ2ZWxsb3VzIHR1cm4gaW4gYWZmYWlycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIGhlIGhhZCB0YWtlbiBCb2xhLCBhIGNpdHkgbm90IG1vcmUgdGhhbiB0d2VsdmUgbWlsZXMgYXdheSBmcm9tIFJvbWUsIHdoZXJlIGhlIGdvdCBtdWNoIHRyZWFzdXJlIGFuZCBwdXQgYWxtb3N0IGFsbCB0aGUgYWR1bHRzIHRvIHRoZSBzd29yZDsgYW5kIGFmdGVyIHRoZSBWb2xzY2lhbnMgZXZlbiB3aG8gaGFkIGJlZW4gb3JkZXJlZCB0byByZW1haW4gaW4gdGhlaXIgY2l0aWVzIGdyZXcgaW1wYXRpZW50LCBhbmQgY2FtZSB0cm9vcGluZyBpbiBhcm1zIHRvIE1hcmNpdXMsIGRlY2xhcmluZyB0aGF0IGhlIHdhcyB0aGUgc29sZSBhbmQgb25seSBnZW5lcmFsIHdob20gdGhleSB3b3VsZCByZWNvZ25pemUgYXMgdGhlaXIgbGVhZGVyLCB0aGVuIGhpcyBuYW1lIHdhcyBncmVhdCB0aHJvdWdob3V0IGFsbCBJdGFseSwgYW5kIG1lbiB0aG91Z2h0IHdpdGggYW1hemVtZW50IGhvdyB0aGUgdmFsb3VyIG9mIGEgc2luZ2xlIG1hbiwgdXBvbiBoaXMgY2hhbmdpbmcgc2lkZXMsIGhhZCBlZmZlY3RlZCBzdWNoIGEgbWFydmVsbG91cyB0dXJuIGluIGFmZmFpcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IFJvbWUsIGhvd2V2ZXIsIGFsbCB3YXMgZGlzb3JkZXI7IGl0cyBjaXRpemVucyByZWZ1c2VkIHRvIGZpZ2h0LCBhbmQgc3BlbnQgdGhlaXIgd2hvbGUgdGltZSBpbiBjYWJhbHMgYW5kIGZhY3Rpb3VzIGRpc3B1dGVzIHdpdGggb25lIGFub3RoZXIsIHVudGlsIHRpZGluZ3MgY2FtZSB0aGF0IHRoZSBlbmVteSBoYWQgbGFpZCBjbG9zZSBzaWVnZSB0byBMYXZpbml1bSwgd2hlcmUgdGhlIHNhY3JlZCBzeW1ib2xzIG9mIHRoZSBhbmNlc3RyYWwgZ29kcyBvZiB0aGUgUm9tYW5zIHdlcmUgc3RvcmVkIHVwLCBhbmQgZnJvbSB3aGljaCB0aGVpciBuYXRpb24gdG9vayBpdHMgb3JpZ2luLCBzaW5jZSB0aGF0IHdhcyB0aGUgZmlyc3QgY2l0eSB3aGljaCBBZW5lYXMgZm91bmRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBwcm9kdWNlZCBhbiBhc3RvbmlzaGluZyBhbmQgdW5pdmVyc2FsIGNoYW5nZSBvZiBvcGluaW9uIGluIHRoZSBjb21tb25zLCBhcyB3ZWxsIGFzIG9uZSB3aGljaCB3YXMgYWx0b2dldGhlciBzdHJhbmdlIGFuZCB1bmV4cGVjdGVkIGluIHRoZSBwYXRyaWNpYW5zLiBGb3IgdGhlIGNvbW1vbnMgd2VyZSBlYWdlciB0byByZXBlYWwgdGhlIHNlbnRlbmNlIGFnYWluc3QgTWFyY2l1cyBhbmQgaW52aXRlIGhpbSBiYWNrIHRvIHRoZSBjaXR5OyB3aGVyZWFzIHRoZSBzZW5hdGUsIG9uIGFzc2VtYmxpbmcgYW5kIGNvbnNpZGVyaW5nIHRoZSBwcm9wb3NpdGlvbiwgcmVqZWN0ZWQgYW5kIHZldG9lZCBpdDsgZWl0aGVyIGJlY2F1c2UgdGhleSB3ZXJlIGFuZ3JpbHkgYmVudCBvbiBvcHBvc2luZyBhbGwgdGhlIHBlb3BsZSdzIGRlc2lyZXM7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPm9yIGVsc2UgYmVjYXVzZSB0aGV5IHdlcmUgdW53aWxsaW5nIHRoYXQgTWFyY2l1cyBzaG91bGQgb3dlIGhpcyByZXN0b3JhdGlvbiB0byB0aGUga2luZG5lc3Mgb2YgdGhlIHBlb3BsZTsgb3IgYmVjYXVzZSB0aGV5IHdlcmUgbm93IGFuZ3J5IGF0IE1hcmNpdXMgaGltc2VsZjsgc2VlaW5nIHRoYXQgaGUgd2FzIGluanVyaW5nIGFsbCBhbGlrZSwgYWx0aG91Z2ggaGUgaGFkIG5vdCBiZWVuIGlsbC10cmVhdGVkIGJ5IGFsbCwgYW5kIHNob3dlZCBoaW1zZWxmIGFuIGVuZW15IG9mIGhpcyB3aG9sZSBjb3VudHJ5LCBhbHRob3VnaCBoZSBrbmV3IHRoYXQgdGhlIG1vc3QgaW5mbHVlbnRpYWwgYW5kIHBvd2VyZnVsIG1lbiBpbiBpdCBzeW1wYXRoaXNlZCB3aXRoIGhpbSBhbmQgc2hhcmVkIGluIGhpcyB3cm9uZ3MuIFdoZW4gdGhpcyBkZWNpc2lvbiBvZiB0aGUgc2VuYXRlIHdhcyBtYWRlIHB1YmxpYywgdGhlIHBlb3BsZSB3YXMgcG93ZXJsZXNzOyBpdCBjb3VsZCBub3QgYnkgaXRzIHZvdGUgZW5hY3QgYSBsYXcsIHdpdGhvdXQgYSBwcmV2aW91cyBkZWNyZWUgb2YgdGhlIHNlbmF0ZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IFJvbWUsIGhvd2V2ZXIsIGFsbCB3YXMgZGlzb3JkZXI7IGl0cyBjaXRpemVucyByZWZ1c2VkIHRvIGZpZ2h0LCBhbmQgc3BlbnQgdGhlaXIgd2hvbGUgdGltZSBpbiBjYWJhbHMgYW5kIGZhY3Rpb3VzIGRpc3B1dGVzIHdpdGggb25lIGFub3RoZXIsIHVudGlsIHRpZGluZ3MgY2FtZSB0aGF0IHRoZSBlbmVteSBoYWQgbGFpZCBjbG9zZSBzaWVnZSB0byBMYXZpbml1bSwgd2hlcmUgdGhlIHNhY3JlZCBzeW1ib2xzIG9mIHRoZSBhbmNlc3RyYWwgZ29kcyBvZiB0aGUgUm9tYW5zIHdlcmUgc3RvcmVkIHVwLCBhbmQgZnJvbSB3aGljaCB0aGVpciBuYXRpb24gdG9vayBpdHMgb3JpZ2luLCBzaW5jZSB0aGF0IHdhcyB0aGUgZmlyc3QgY2l0eSB3aGljaCBBZW5lYXMgZm91bmRlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcHJvZHVjZWQgYW4gYXN0b25pc2hpbmcgYW5kIHVuaXZlcnNhbCBjaGFuZ2Ugb2Ygb3BpbmlvbiBpbiB0aGUgY29tbW9ucywgYXMgd2VsbCBhcyBvbmUgd2hpY2ggd2FzIGFsdG9nZXRoZXIgc3RyYW5nZSBhbmQgdW5leHBlY3RlZCBpbiB0aGUgcGF0cmljaWFucy4gRm9yIHRoZSBjb21tb25zIHdlcmUgZWFnZXIgdG8gcmVwZWFsIHRoZSBzZW50ZW5jZSBhZ2FpbnN0IE1hcmNpdXMgYW5kIGludml0ZSBoaW0gYmFjayB0byB0aGUgY2l0eTsgd2hlcmVhcyB0aGUgc2VuYXRlLCBvbiBhc3NlbWJsaW5nIGFuZCBjb25zaWRlcmluZyB0aGUgcHJvcG9zaXRpb24sIHJlamVjdGVkIGFuZCB2ZXRvZWQgaXQ7IGVpdGhlciBiZWNhdXNlIHRoZXkgd2VyZSBhbmdyaWx5IGJlbnQgb24gb3Bwb3NpbmcgYWxsIHRoZSBwZW9wbGUncyBkZXNpcmVzOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPm9yIGVsc2UgYmVjYXVzZSB0aGV5IHdlcmUgdW53aWxsaW5nIHRoYXQgTWFyY2l1cyBzaG91bGQgb3dlIGhpcyByZXN0b3JhdGlvbiB0byB0aGUga2luZG5lc3Mgb2YgdGhlIHBlb3BsZTsgb3IgYmVjYXVzZSB0aGV5IHdlcmUgbm93IGFuZ3J5IGF0IE1hcmNpdXMgaGltc2VsZjsgc2VlaW5nIHRoYXQgaGUgd2FzIGluanVyaW5nIGFsbCBhbGlrZSwgYWx0aG91Z2ggaGUgaGFkIG5vdCBiZWVuIGlsbC10cmVhdGVkIGJ5IGFsbCwgYW5kIHNob3dlZCBoaW1zZWxmIGFuIGVuZW15IG9mIGhpcyB3aG9sZSBjb3VudHJ5LCBhbHRob3VnaCBoZSBrbmV3IHRoYXQgdGhlIG1vc3QgaW5mbHVlbnRpYWwgYW5kIHBvd2VyZnVsIG1lbiBpbiBpdCBzeW1wYXRoaXNlZCB3aXRoIGhpbSBhbmQgc2hhcmVkIGluIGhpcyB3cm9uZ3MuIFdoZW4gdGhpcyBkZWNpc2lvbiBvZiB0aGUgc2VuYXRlIHdhcyBtYWRlIHB1YmxpYywgdGhlIHBlb3BsZSB3YXMgcG93ZXJsZXNzOyBpdCBjb3VsZCBub3QgYnkgaXRzIHZvdGUgZW5hY3QgYSBsYXcsIHdpdGhvdXQgYSBwcmV2aW91cyBkZWNyZWUgb2YgdGhlIHNlbmF0ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE1hcmNpdXMsIHdoZW4gaGUgaGVhcmQgb2YgaXQsIHdhcyB5ZXQgbW9yZSBleGFzcGVyYXRlZCwgYW5kIHJhaXNpbmcgdGhlIHNpZWdlIG9mIExhdmluaXVtLCBtYXJjaGVkIGFnYWluc3QgUm9tZSBpbiB3cmF0aCwgYW5kIGVuY2FtcGVkIGF0IHRoZSBzby1jYWxsZWQgRm9zc2FlIENsdWlsaWFlLCBvbmx5IGZpdmUgbWlsZXMgZGlzdGFudCBmcm9tIHRoZSBjaXR5LiBBbHRob3VnaCB0aGUgc2lnaHQgb2YgaGltIHByb2R1Y2VkIHRlcnJvciBhbmQgZ3JlYXQgY29uZnVzaW9uIHRoZXJlLCBzdGlsbCwgaXQgcHV0IGEgc3RvcCBmb3IgdGhlIHByZXNlbnQgdG8gdGhlaXIgZGlzc2Vuc2lvbnM7IGZvciBubyBvbmUgbG9uZ2VyLCB3aGV0aGVyIGNvbnN1bCBvciBzZW5hdG9yLCBkYXJlZCB0byBvcHBvc2UgdGhlIHBlb3BsZSBpbiB0aGUgbWF0dGVyIG9mIHJlc3RvcmluZyBNYXJjaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgY29udHJhcnksIHdoZW4gdGhleSBzYXcgdGhlIHdvbWVuIHJ1bm5pbmcgZnJhbnRpYyBpbiB0aGUgY2l0eSwgYW5kIHRoZSBhZ2VkIG1lbiByZXNvcnRpbmcgdG8gdGhlIHNhY3JlZCBzaHJpbmVzIHdpdGggc3VwcGxpYW50IHRlYXJzIGFuZCBwcmF5ZXJzLCBhbmQgZXZlcnl3aGVyZSBhbiB1dHRlciBsYWNrIG9mIGNvdXJhZ2UgYW5kIHNhdmluZyBjb3Vuc2VscywgdGhlbiBhbGwgYWdyZWVkIHRoYXQgdGhlIHBlb3BsZSBoYWQgZG9uZSB3ZWxsIHRvIHNlZWsgYSByZWNvbmNpbGlhdGlvbiB3aXRoIE1hcmNpdXMsIGJ1dCB0aGF0IHRoZSBzZW5hdGUgaGFkIG1hZGUgYSB0b3RhbCBtaXN0YWtlIGluIGJlZ2lubmluZyB0aGVuIHRvIGluZHVsZ2UgaXRzIHdyYXRoIGFuZCByZXZlbmdlZnVsIHNwaXJpdCwgd2hlbiBpdCBoYWQgYmVlbiB3ZWxsIHRvIGxheSBzdWNoIGZlZWxpbmdzIGFzaWRlLiBJdCB3YXMsIHRoZXJlZm9yZSwgdW5hbmltb3VzbHkgZGVjaWRlZCB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIE1hcmNpdXMsIG9mZmVyaW5nIGhpbSB0aGUgcHJpdmlsZWdlIG9mIHJldHVybmluZyB0byBoaXMgY291bnRyeSwgYW5kIGJlZ2dpbmcgaGltIHRvIHN0b3AgaGlzIHdhciB1cG9uIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgbWVzc2VuZ2VycyBmcm9tIHRoZSBzZW5hdGUgd2VyZSBraW5zbWVuIGFuZCBmcmllbmRzIG9mIE1hcmNpdXMsIGFuZCBleHBlY3RlZCB0byBiZSB0cmVhdGVkIHdpdGggZ3JlYXQgZnJpZW5kbGluZXNzIGluIHRoZWlyIGZpcnN0IGludGVydmlldyB3aXRoIGEgbWFuIHdobyB3YXMgYSByZWxhdGl2ZSBhbmQgYXNzb2NpYXRlIG9mIHRoZWlycy4gQnV0IG1hdHRlcnMgdHVybmVkIG91dCBxdWl0ZSBvdGhlcndpc2U7IGZvciBhZnRlciBiZWluZyBsZWQgdGhyb3VnaCB0aGUgY2FtcCBvZiB0aGUgZW5lbXksIHRoZXkgZm91bmQgaGltIHNlYXRlZCBpbiBncmVhdCBzdGF0ZSwgYW5kIGxvb2tpbmcgaW5zdWZmZXJhYmx5IHN0ZXJuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TdXJyb3VuZGVkIGJ5IHRoZSBjaGllZiBtZW4gb2YgdGhlIFZvbHNjaWFucywgaGUgYmFkZSB0aGUgUm9tYW5zIGRlY2xhcmUgdGhlaXIgd2lzaGVzLiBUaGV5IGRpZCBzbywgaW4gcmVhc29uYWJsZSBhbmQgY29uc2lkZXJhdGUgbGFuZ3VhZ2UsIGFuZCB3aXRoIGEgbWFubmVyIHN1aXRhYmxlIHRvIHRoZWlyIHBvc2l0aW9uLCBhbmQgd2hlbiB0aGV5IGhhZCBjZWFzZWQsIGhlIG1hZGUgYW4gYW5zd2VyIHdoaWNoLCBzbyBmYXIgYXMgaXQgY29uY2VybmVkIGhpbXNlbGY7IHdhcyBmdWxsIG9mIGJpdHRlcm5lc3MgYW5kIGFuZ2VyIGF0IHRoZWlyIHRyZWF0bWVudCBvZiBoaW0sIGFuZCBpbiBiZWhhbGYgb2YgdGhlIFZvbHNjaWFucywgYXMgdGhlaXIgZ2VuZXJhbCwgaGUgb3JkZXJlZCB0aGUgcmVzdGl0dXRpb24gb2YgdGhlIGNpdGllcyBhbmQgdGVycml0b3J5IHdoaWNoIGhhZCBiZWVuIHRvcm4gZnJvbSB0aGVtIGluIHdhciwgYW5kIHRoZSBwYXNzYWdlIG9mIGEgZGVjcmVlIGdyYW50aW5nIHRoZSBWb2xzY2lhbnMsIGFzIGFsbGllcywgZXF1YWwgY2l2aWMgcmlnaHRzLCBhcyBoYWQgYmVlbiBkb25lIGZvciB0aGUgTGF0aW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm8gcmVzcGl0ZSBmcm9tIHRoZSB3YXIgd291bGQgYmUgc2VjdXJlIGFuZCBsYXN0aW5nLCBoZSBzYWlkLCBleGNlcHQgaXQgYmUgYmFzZWQgb24ganVzdCBhbmQgZXF1YWwgcmlnaHRzLiBNb3Jlb3ZlciwgaGUgZ2F2ZSB0aGVtIHRoaXJ0eSBkYXlzIGZvciBkZWxpYmVyYXRpb24sIGFuZCB3aGVuIHRoZSBhbWJhc3NhZG9ycyB3ZXJlIGdvbmUsIGhlIGltbWVkaWF0ZWx5IHdpdGhkcmV3IGhpcyBmb3JjZXMgZnJvbSB0aGUgY291bnRyeS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVyZSBpcyBub3RoaW5nIG9mIHRoaXMgd2l0aGRyYXdhbCBvZiBmb3JjZXMgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zOSIgdmFsaWQ9InllcyI+TGl2eSAoaWkuIDM5KS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE1hcmNpdXMsIHdoZW4gaGUgaGVhcmQgb2YgaXQsIHdhcyB5ZXQgbW9yZSBleGFzcGVyYXRlZCwgYW5kIHJhaXNpbmcgdGhlIHNpZWdlIG9mIExhdmluaXVtLCBtYXJjaGVkIGFnYWluc3QgUm9tZSBpbiB3cmF0aCwgYW5kIGVuY2FtcGVkIGF0IHRoZSBzby1jYWxsZWQgRm9zc2FlIENsdWlsaWFlLCBvbmx5IGZpdmUgbWlsZXMgZGlzdGFudCBmcm9tIHRoZSBjaXR5LiBBbHRob3VnaCB0aGUgc2lnaHQgb2YgaGltIHByb2R1Y2VkIHRlcnJvciBhbmQgZ3JlYXQgY29uZnVzaW9uIHRoZXJlLCBzdGlsbCwgaXQgcHV0IGEgc3RvcCBmb3IgdGhlIHByZXNlbnQgdG8gdGhlaXIgZGlzc2Vuc2lvbnM7IGZvciBubyBvbmUgbG9uZ2VyLCB3aGV0aGVyIGNvbnN1bCBvciBzZW5hdG9yLCBkYXJlZCB0byBvcHBvc2UgdGhlIHBlb3BsZSBpbiB0aGUgbWF0dGVyIG9mIHJlc3RvcmluZyBNYXJjaXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBjb250cmFyeSwgd2hlbiB0aGV5IHNhdyB0aGUgd29tZW4gcnVubmluZyBmcmFudGljIGluIHRoZSBjaXR5LCBhbmQgdGhlIGFnZWQgbWVuIHJlc29ydGluZyB0byB0aGUgc2FjcmVkIHNocmluZXMgd2l0aCBzdXBwbGlhbnQgdGVhcnMgYW5kIHByYXllcnMsIGFuZCBldmVyeXdoZXJlIGFuIHV0dGVyIGxhY2sgb2YgY291cmFnZSBhbmQgc2F2aW5nIGNvdW5zZWxzLCB0aGVuIGFsbCBhZ3JlZWQgdGhhdCB0aGUgcGVvcGxlIGhhZCBkb25lIHdlbGwgdG8gc2VlayBhIHJlY29uY2lsaWF0aW9uIHdpdGggTWFyY2l1cywgYnV0IHRoYXQgdGhlIHNlbmF0ZSBoYWQgbWFkZSBhIHRvdGFsIG1pc3Rha2UgaW4gYmVnaW5uaW5nIHRoZW4gdG8gaW5kdWxnZSBpdHMgd3JhdGggYW5kIHJldmVuZ2VmdWwgc3Bpcml0LCB3aGVuIGl0IGhhZCBiZWVuIHdlbGwgdG8gbGF5IHN1Y2ggZmVlbGluZ3MgYXNpZGUuIEl0IHdhcywgdGhlcmVmb3JlLCB1bmFuaW1vdXNseSBkZWNpZGVkIHRvIHNlbmQgYW1iYXNzYWRvcnMgdG8gTWFyY2l1cywgb2ZmZXJpbmcgaGltIHRoZSBwcml2aWxlZ2Ugb2YgcmV0dXJuaW5nIHRvIGhpcyBjb3VudHJ5LCBhbmQgYmVnZ2luZyBoaW0gdG8gc3RvcCBoaXMgd2FyIHVwb24gdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgbWVzc2VuZ2VycyBmcm9tIHRoZSBzZW5hdGUgd2VyZSBraW5zbWVuIGFuZCBmcmllbmRzIG9mIE1hcmNpdXMsIGFuZCBleHBlY3RlZCB0byBiZSB0cmVhdGVkIHdpdGggZ3JlYXQgZnJpZW5kbGluZXNzIGluIHRoZWlyIGZpcnN0IGludGVydmlldyB3aXRoIGEgbWFuIHdobyB3YXMgYSByZWxhdGl2ZSBhbmQgYXNzb2NpYXRlIG9mIHRoZWlycy4gQnV0IG1hdHRlcnMgdHVybmVkIG91dCBxdWl0ZSBvdGhlcndpc2U7IGZvciBhZnRlciBiZWluZyBsZWQgdGhyb3VnaCB0aGUgY2FtcCBvZiB0aGUgZW5lbXksIHRoZXkgZm91bmQgaGltIHNlYXRlZCBpbiBncmVhdCBzdGF0ZSwgYW5kIGxvb2tpbmcgaW5zdWZmZXJhYmx5IHN0ZXJuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1cnJvdW5kZWQgYnkgdGhlIGNoaWVmIG1lbiBvZiB0aGUgVm9sc2NpYW5zLCBoZSBiYWRlIHRoZSBSb21hbnMgZGVjbGFyZSB0aGVpciB3aXNoZXMuIFRoZXkgZGlkIHNvLCBpbiByZWFzb25hYmxlIGFuZCBjb25zaWRlcmF0ZSBsYW5ndWFnZSwgYW5kIHdpdGggYSBtYW5uZXIgc3VpdGFibGUgdG8gdGhlaXIgcG9zaXRpb24sIGFuZCB3aGVuIHRoZXkgaGFkIGNlYXNlZCwgaGUgbWFkZSBhbiBhbnN3ZXIgd2hpY2gsIHNvIGZhciBhcyBpdCBjb25jZXJuZWQgaGltc2VsZjsgd2FzIGZ1bGwgb2YgYml0dGVybmVzcyBhbmQgYW5nZXIgYXQgdGhlaXIgdHJlYXRtZW50IG9mIGhpbSwgYW5kIGluIGJlaGFsZiBvZiB0aGUgVm9sc2NpYW5zLCBhcyB0aGVpciBnZW5lcmFsLCBoZSBvcmRlcmVkIHRoZSByZXN0aXR1dGlvbiBvZiB0aGUgY2l0aWVzIGFuZCB0ZXJyaXRvcnkgd2hpY2ggaGFkIGJlZW4gdG9ybiBmcm9tIHRoZW0gaW4gd2FyLCBhbmQgdGhlIHBhc3NhZ2Ugb2YgYSBkZWNyZWUgZ3JhbnRpbmcgdGhlIFZvbHNjaWFucywgYXMgYWxsaWVzLCBlcXVhbCBjaXZpYyByaWdodHMsIGFzIGhhZCBiZWVuIGRvbmUgZm9yIHRoZSBMYXRpbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBubyByZXNwaXRlIGZyb20gdGhlIHdhciB3b3VsZCBiZSBzZWN1cmUgYW5kIGxhc3RpbmcsIGhlIHNhaWQsIGV4Y2VwdCBpdCBiZSBiYXNlZCBvbiBqdXN0IGFuZCBlcXVhbCByaWdodHMuIE1vcmVvdmVyLCBoZSBnYXZlIHRoZW0gdGhpcnR5IGRheXMgZm9yIGRlbGliZXJhdGlvbiwgYW5kIHdoZW4gdGhlIGFtYmFzc2Fkb3JzIHdlcmUgZ29uZSwgaGUgaW1tZWRpYXRlbHkgd2l0aGRyZXcgaGlzIGZvcmNlcyBmcm9tIHRoZSBjb3VudHJ5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlcmUgaXMgbm90aGluZyBvZiB0aGlzIHdpdGhkcmF3YWwgb2YgZm9yY2VzIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zOSIgdmFsaWQ9InllcyI+TGl2eSAoaWkuIDM5KS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjM5IiB2YWxpZD0ieWVzIj5MaXZ5IChpaS4gMzkpLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgdGhlIGZpcnN0IGdyb3VuZCBvZiBjb21wbGFpbnQgYWdhaW5zdCBoaW0gd2hpY2ggd2FzIGxhaWQgaG9sZCBvZiBieSB0aG9zZSBvZiB0aGUgVm9sc2NpYW5zIHdobyBoYWQgbG9uZyBiZWVuIGplYWxvdXMgb2YgaGltLCBhbmQgdW5lYXN5IGF0IHRoZSBpbmZsdWVuY2Ugd2hpY2ggaGUgaGFkIGFjcXVpcmVkLiBBbW9uZyB0aGVzZSB3YXMgVHVsbHVzIGFsc28sIG5vdCBiZWNhdXNlIGhlIGhhZCBiZWVuIHBlcnNvbmFsbHkgd3JvbmdlZCBhdCBhbGwgYnkgTWFyY2l1cywgYnV0IGJlY2F1c2UgaGUgd2FzIG9ubHkgdG9vIGh1bWFuLiBGb3IgaGUgd2FzIHZleGVkIHRvIGZpbmQgaGlzIHJlcHV0YXRpb24gd2hvbGx5IG9ic2N1cmVkIGFuZCBoaW1zZWxmIG5lZ2xlY3RlZCBieSB0aGUgVm9sc2NpYW5zLCB3aG8gdGhvdWdodCB0aGF0IE1hcmNpdXMgYWxvbmUgd2FzIGV2ZXJ5dGhpbmcgdG8gdGhlbSwgYW5kIHRoYXQgdGhlaXIgb3RoZXIgbGVhZGVycyBzaG91bGQgYmUgY29udGVudCB3aXRoIHdoYXRldmVyIHNoYXJlIG9mIGluZmx1ZW5jZSBhbmQgYXV0aG9yaXR5IGhlIG1pZ2h0IGJlc3RvdyB1cG9uIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSByZWFzb24gd2h5IHRoZSBmaXJzdCBzZWVkcyBvZiBkZW51bmNpYXRpb24gd2VyZSBzb3duIGluIHNlY3JldCwgYW5kIG5vdywgYmFuZGluZyB0b2dldGhlciwgdGhlIG1hbGNvbnRlbnRzIHNoYXJlZCB0aGVpciByZXNlbnRtZW50IHdpdGggb25lIGFub3RoZXIsIGFuZCBjYWxsZWQgdGhlIHdpdGhkcmF3YWwgb2YgTWFyY2l1cyBhIGJldHJheWFsLCBub3Qgc28gbXVjaCBvZiBjaXRpZXMgYW5kIGFybWllcywgYXMgb2YgZ29sZGVuIG9wcG9ydHVuaXRpZXMsIHdoaWNoIHByb3ZlIHRoZSBzYWx2YXRpb24gb3IgdGhlIGxvc3Mgb2YgdGhlc2UgYXMgd2VsbCBhcyBvZiBldmVyeXRoaW5nIGVsc2U7IGZvciBoZSBoYWQgZ3JhbnRlZCBhIHJlc3BpdGUgb2YgdGhpcnR5IGRheXMgZnJvbSB3YXIsIGFsdGhvdWdoIGluIHdhciB0aGUgZ3JlYXRlc3QgY2hhbmdlcyBtaWdodCBvY2N1ciBpbiBtdWNoIGxlc3MgdGltZSB0aGFuIHRoaXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgdGhlIGZpcnN0IGdyb3VuZCBvZiBjb21wbGFpbnQgYWdhaW5zdCBoaW0gd2hpY2ggd2FzIGxhaWQgaG9sZCBvZiBieSB0aG9zZSBvZiB0aGUgVm9sc2NpYW5zIHdobyBoYWQgbG9uZyBiZWVuIGplYWxvdXMgb2YgaGltLCBhbmQgdW5lYXN5IGF0IHRoZSBpbmZsdWVuY2Ugd2hpY2ggaGUgaGFkIGFjcXVpcmVkLiBBbW9uZyB0aGVzZSB3YXMgVHVsbHVzIGFsc28sIG5vdCBiZWNhdXNlIGhlIGhhZCBiZWVuIHBlcnNvbmFsbHkgd3JvbmdlZCBhdCBhbGwgYnkgTWFyY2l1cywgYnV0IGJlY2F1c2UgaGUgd2FzIG9ubHkgdG9vIGh1bWFuLiBGb3IgaGUgd2FzIHZleGVkIHRvIGZpbmQgaGlzIHJlcHV0YXRpb24gd2hvbGx5IG9ic2N1cmVkIGFuZCBoaW1zZWxmIG5lZ2xlY3RlZCBieSB0aGUgVm9sc2NpYW5zLCB3aG8gdGhvdWdodCB0aGF0IE1hcmNpdXMgYWxvbmUgd2FzIGV2ZXJ5dGhpbmcgdG8gdGhlbSwgYW5kIHRoYXQgdGhlaXIgb3RoZXIgbGVhZGVycyBzaG91bGQgYmUgY29udGVudCB3aXRoIHdoYXRldmVyIHNoYXJlIG9mIGluZmx1ZW5jZSBhbmQgYXV0aG9yaXR5IGhlIG1pZ2h0IGJlc3RvdyB1cG9uIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSByZWFzb24gd2h5IHRoZSBmaXJzdCBzZWVkcyBvZiBkZW51bmNpYXRpb24gd2VyZSBzb3duIGluIHNlY3JldCwgYW5kIG5vdywgYmFuZGluZyB0b2dldGhlciwgdGhlIG1hbGNvbnRlbnRzIHNoYXJlZCB0aGVpciByZXNlbnRtZW50IHdpdGggb25lIGFub3RoZXIsIGFuZCBjYWxsZWQgdGhlIHdpdGhkcmF3YWwgb2YgTWFyY2l1cyBhIGJldHJheWFsLCBub3Qgc28gbXVjaCBvZiBjaXRpZXMgYW5kIGFybWllcywgYXMgb2YgZ29sZGVuIG9wcG9ydHVuaXRpZXMsIHdoaWNoIHByb3ZlIHRoZSBzYWx2YXRpb24gb3IgdGhlIGxvc3Mgb2YgdGhlc2UgYXMgd2VsbCBhcyBvZiBldmVyeXRoaW5nIGVsc2U7IGZvciBoZSBoYWQgZ3JhbnRlZCBhIHJlc3BpdGUgb2YgdGhpcnR5IGRheXMgZnJvbSB3YXIsIGFsdGhvdWdoIGluIHdhciB0aGUgZ3JlYXRlc3QgY2hhbmdlcyBtaWdodCBvY2N1ciBpbiBtdWNoIGxlc3MgdGltZSB0aGFuIHRoaXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgTWFyY2l1cyBkaWQgbm90IHNwZW5kIHRoaXMgdGltZSBpbiBpZGxlbmVzcywgYnV0IGZlbGwgdXBvbiB0aGUgZW5lbXkncyBhbGxpZXMsIGhhcmFzc2VkIGFuZCByYXZhZ2VkIHRoZWlyIHRlcnJpdG9yaWVzLCBhbmQgY2FwdHVyZWQgc2V2ZW4gb2YgdGhlaXIgbGFyZ2UgYW5kIHBvcHVsb3VzIGNpdGllcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC4zNiI+RGlvbnlzaXVzLCB2aWlpLiAzNi48L2JpYmw+IENoYXB0ZXJzIHh4dmlpaS4teHh4LiBpbiBQbHV0YXJjaCBhZ3JlZSBjbG9zZWx5IHdpdGggRGlvbnlzaXVzIHZpaWkuIDE0LTM1Ljwvbm90ZT4gQW5kIHRoZSBSb21hbnMgZGlkIG5vdCB2ZW50dXJlIHRvIGNvbWUgdG8gdGhlaXIgYWlkLCBidXQgdGhlaXIgc3Bpcml0cyB3ZXJlIGZ1bGwgb2YgaGVzaXRhdGlvbiwgYW5kIHRoZWlyIGF0dGl0dWRlIHRvd2FyZCB0aGUgd2FyIHdhcyB0aGF0IG9mIG1lbiB3aG8gYXJlIGNvbXBsZXRlbHkgYmVudW1iZWQgYW5kIHBhcmFseXplZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gdGhlIHRpbWUgaGFkIHBhc3NlZCwgYW5kIE1hcmNpdXMgd2FzIGF0IGhhbmQgYWdhaW4gd2l0aCBoaXMgZW50aXJlIGZvcmNlLCB0aGV5IHNlbnQgb3V0IGFub3RoZXIgZW1iYXNzeSB0byBlbnRyZWF0IGhpbSB0byBtb2RlcmF0ZSBoaXMgd3JhdGgsIHdpdGhkcmF3IHRoZSBWb2xzY2lhbiBhcm15IGZyb20gdGhlIGNvdW50cnksIGFuZCB0aGVuIG1ha2Ugc3VjaCBwcm9wb3NhbHMgYW5kIHNldHRsZW1lbnRzIGFzIGhlIHRob3VnaHQgYmVzdCBmb3IgYm90aCBuYXRpb25zOyBmb3IgdGhlIFJvbWFucyB3b3VsZCBtYWtlIG5vIGNvbmNlc3Npb25zIHRocm91Z2ggZmVhciwgYnV0IGlmIGhlIHRob3VnaHQgdGhhdCB0aGUgVm9sc2NpYW5zIG91Z2h0IHRvIG9idGFpbiBjZXJ0YWluIGZhdm91cnMsIGFsbCBzdWNoIHdvdWxkIGJlIGdyYW50ZWQgdGhlbSBpZiB0aGV5IGxhaWQgZG93biB0aGVpciBhcm1zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5NYXJjaXVzIHJlcGxpZWQgdGhhdCwgYXMgZ2VuZXJhbCBvZiB0aGUgVm9sc2NpYW5zLCBoZSB3b3VsZCBtYWtlIG5vIGFuc3dlciB0byB0aGlzLCBidXQgYXMgb25lIHdobyB3YXMgc3RpbGwgYSBjaXRpemVuIG9mIFJvbWUsIGhlIGFkdmlzZWQgYW5kIGV4aG9ydGVkIHRoZW0gdG8gYWRvcHQgbW9yZSBtb2RlcmF0ZSB2aWV3cyBvZiB3aGF0IGp1c3RpY2UgcmVxdWlyZWQsIGFuZCBjb21lIHRvIGhpbSBpbiB0aHJlZSBkYXlzIHdpdGggYSByYXRpZmljYXRpb24gb2YgaGlzIHByZXZpb3VzIGRlbWFuZHM7IGJ1dCBpZiB0aGV5IHNob3VsZCBkZWNpZGUgb3RoZXJ3aXNlLCB0aGV5IG11c3Qga25vdyB3ZWxsIHRoYXQgaXQgd2FzIG5vdCBzYWZlIGZvciB0aGVtIHRvIGNvbWUgd2Fsa2luZyBpbnRvIGhpcyBjYW1wIGFnYWluIHdpdGggZW1wdHkgcGhyYXNlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgTWFyY2l1cyBkaWQgbm90IHNwZW5kIHRoaXMgdGltZSBpbiBpZGxlbmVzcywgYnV0IGZlbGwgdXBvbiB0aGUgZW5lbXkncyBhbGxpZXMsIGhhcmFzc2VkIGFuZCByYXZhZ2VkIHRoZWlyIHRlcnJpdG9yaWVzLCBhbmQgY2FwdHVyZWQgc2V2ZW4gb2YgdGhlaXIgbGFyZ2UgYW5kIHBvcHVsb3VzIGNpdGllcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMzYiPkRpb255c2l1cywgdmlpaS4gMzYuPC9iaWJsPiBDaGFwdGVycyB4eHZpaWkuLXh4eC4gaW4gUGx1dGFyY2ggYWdyZWUgY2xvc2VseSB3aXRoIERpb255c2l1cyB2aWlpLiAxNC0zNS48L25vdGU+IEFuZCB0aGUgUm9tYW5zIGRpZCBub3QgdmVudHVyZSB0byBjb21lIHRvIHRoZWlyIGFpZCwgYnV0IHRoZWlyIHNwaXJpdHMgd2VyZSBmdWxsIG9mIGhlc2l0YXRpb24sIGFuZCB0aGVpciBhdHRpdHVkZSB0b3dhcmQgdGhlIHdhciB3YXMgdGhhdCBvZiBtZW4gd2hvIGFyZSBjb21wbGV0ZWx5IGJlbnVtYmVkIGFuZCBwYXJhbHl6ZWQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjM2Ij5EaW9ueXNpdXMsIHZpaWkuIDM2LjwvYmlibD4gQ2hhcHRlcnMgeHh2aWlpLi14eHguIGluIFBsdXRhcmNoIGFncmVlIGNsb3NlbHkgd2l0aCBEaW9ueXNpdXMgdmlpaS4gMTQtMzUuPC90cmFuc2xhdGlvbj4="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSB0aW1lIGhhZCBwYXNzZWQsIGFuZCBNYXJjaXVzIHdhcyBhdCBoYW5kIGFnYWluIHdpdGggaGlzIGVudGlyZSBmb3JjZSwgdGhleSBzZW50IG91dCBhbm90aGVyIGVtYmFzc3kgdG8gZW50cmVhdCBoaW0gdG8gbW9kZXJhdGUgaGlzIHdyYXRoLCB3aXRoZHJhdyB0aGUgVm9sc2NpYW4gYXJteSBmcm9tIHRoZSBjb3VudHJ5LCBhbmQgdGhlbiBtYWtlIHN1Y2ggcHJvcG9zYWxzIGFuZCBzZXR0bGVtZW50cyBhcyBoZSB0aG91Z2h0IGJlc3QgZm9yIGJvdGggbmF0aW9uczsgZm9yIHRoZSBSb21hbnMgd291bGQgbWFrZSBubyBjb25jZXNzaW9ucyB0aHJvdWdoIGZlYXIsIGJ1dCBpZiBoZSB0aG91Z2h0IHRoYXQgdGhlIFZvbHNjaWFucyBvdWdodCB0byBvYnRhaW4gY2VydGFpbiBmYXZvdXJzLCBhbGwgc3VjaCB3b3VsZCBiZSBncmFudGVkIHRoZW0gaWYgdGhleSBsYWlkIGRvd24gdGhlaXIgYXJtcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.5'] = ""
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgZW1iYXNzeSBoYWQgcmV0dXJuZWQgYW5kIHRoZSBzZW5hdGUgaGFkIGhlYXJkIGl0cyByZXBvcnQsIGl0IHdhcyBmZWx0IHRoYXQgdGhlIGNpdHkgd2FzIHRvc3Npbmcgb24gdGhlIGJpbGxvd3Mgb2YgYSBncmVhdCB0ZW1wZXN0LCBhbmQgdGhlcmVmb3JlIHRoZSBsYXN0IGFuZCBzYWNyZWQgYW5jaG9yIHdhcyBsZXQgZG93bi4gQSBkZWNyZWUgd2FzIHBhc3NlZCB0aGF0IGFsbCB0aGUgcHJpZXN0cyBvZiB0aGUgZ29kcywgYW5kIHRoZSBjZWxlYnJhbnRzIG9yIGN1c3RvZGlhbnMgb2YgdGhlIG15c3RlcmllcywgYW5kIHRob3NlIHdobyBwcmFjdGlzZWQgdGhlIGFuY2llbnQgYW5kIGFuY2VzdHJhbCBhcnQgb2YgZGl2aW5hdGlvbiBmcm9tIHRoZSBmbGlnaHQgb2YgYmlyZHMs4oCUdGhhdCBhbGwgdGhlc2Ugc2hvdWxkIGdvIHRvIE1hcmNpdXMsIGFycmF5ZWQgYXMgd2FzIHRoZSBjdXN0b20gb2YgZWFjaCBpbiB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlaXIgc2FjcmVkIHJpdGVzLCBhbmQgc2hvdWxkIHVyZ2UgaGltIGluIHRoZSBzYW1lIG1hbm5lciBhcyBiZWZvcmUgdG8gcHV0IGEgc3RvcCB0byB0aGUgd2FyLCBhbmQgdGhlbiB0byBjb25mZXIgd2l0aCBoaXMgZmVsbG93LWNpdGl6ZW5zIHJlZ2FyZGluZyB0aGUgVm9sc2NpYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGRpZCwgaW5kZWVkLCBhZG1pdCB0aGlzIGVtYmFzc3kgaW50byBoaXMgY2FtcCwgYnV0IG1hZGUgbm8gb3RoZXIgY29uY2Vzc2lvbiwgbm9yIGRpZCBoZSBhY3Qgb3Igc3BlYWsgbW9yZSBtaWxkbHksIGJ1dCB0b2xkIHRoZW0gdG8gbWFrZSBhIHNldHRsZW1lbnQgb24gaGlzIGZvcm1lciB0ZXJtcywgb3IgZWxzZSBhY2NlcHQgdGhlIHdhci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMzkuMTIiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzOSwgMTI7PC9iaWJsPiAKICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjM4Ij5EaW9ueXNpdXMsIHZpaWkuIDM4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBY2NvcmRpbmdseSwgd2hlbiB0aGUgcHJpZXN0cyBoYWQgcmV0dXJuZWQsIGl0IHdhcyBkZWNpZGVkIHRvIHJlbWFpbiBxdWlldGx5IGluIHRoZSBjaXR5LCBndWFyZGluZyBpdHMgd2FsbHMsIGFuZCByZXB1bHNpbmcgdGhlIGVuZW15LCBzaG91bGQgaGUgbWFrZSBhbiBhdHRhY2suIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjM5LjEyIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gMzksIDEyOzwvYmlibD4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC4zOCI+RGlvbnlzaXVzLCB2aWlpLiAzOC48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgcHV0IHRoZWlyIGhvcGVzIGluIHRpbWUgZXNwZWNpYWxseSwgYW5kIGluIHRoZSB2aWNpc3NpdHVkZXMgb2YgZm9ydHVuZSwgc2luY2UgdGhleSBrbmV3IG5vdCBob3cgdG8gc2F2ZSB0aGVtc2VsdmVzIGJ5IHRoZWlyIG93biBlZmZvcnRzLCBidXQgdHVybW9pbCwgdGVycm9yLCBhbmQgcnVtb3VycyBvZiBldmlsIHBvc3Nlc3NlZCB0aGUgY2l0eS4gQXQgbGFzdCBzb21ldGhpbmcgaGFwcGVuZWQgdGhhdCB3YXMgbGlrZSB3aGF0IEhvbWVyIG9mdGVuIG1lbnRpb25zLCBhbHRob3VnaCBwZW9wbGUgZ2VuZXJhbGx5IGRvIG5vdCB3aG9sbHkgYmVsaWV2ZSBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHNvbWUgZ3JlYXQgYW5kIHVudXN1YWwgZGVlZCBpcyB0byBiZSBkb25lLCB0aGF0IHBvZXQgZGVjbGFyZXMgaW4gaGlzIHN0YXRlbHkgbWFubmVyOuKAlAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgdGhlbiB3YXMgaW5zcGlyZWQgYnkgdGhlIGdvZGRlc3MsIGZsYXNoaW5nLWV5ZWQgQXRoZW5lOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDE4LjE1OCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgeHZpaWkuIDE1ODwvYmlibD4gPSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAyMS4xIiB2YWxpZD0ieWVzIj54eGkuIGkuPC9iaWJsPiAoPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4Thv4cgzrTigJkg4byEz4HOsTwvZm9yZWlnbj4pLjwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPiAKCQkJCWFuZCBhZ2FpbjrigJQKCQkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgdGhlbiB3YXMgaW5zcGlyZWQgYnkgdGhlIGdvZGRlc3MsIGZsYXNoaW5nLWV5ZWQgQXRoZW5lOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDE4LjE1OCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgeHZpaWkuIDE1ODwvYmlibD4gPSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAyMS4xIiB2YWxpZD0ieWVzIj54eGkuIGkuPC9iaWJsPiAoPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4Thv4cgzrTigJkg4byEz4HOsTwvZm9yZWlnbj4pLjwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxOC4xNTgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIHh2aWlpLiAxNTg8L2JpYmw+ID0gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gMjEuMSIgdmFsaWQ9InllcyI+eHhpLiBpLjwvYmlibD4gKDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+E4b+HIM604oCZIOG8hM+BzrE8L2ZvcmVpZ24+KS48L25vdGU+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDE4LjE1OCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgeHZpaWkuIDE1ODwvYmlibD4gPSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIHh2aWlpLiAxNTg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAyMS4xIiB2YWxpZD0ieWVzIj54eGkuIGkuPC9iaWJsPiAoPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4Thv4cgzrTigJkg4byEz4HOsTwvZm9yZWlnbj4pLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBzb21lIGltbW9ydGFsIHR1cm5lZCBoaXMgbWluZCBieSBsb2RnaW5nIGluIGhpcyBoZWFydCA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QSBmZWFyIG9mIHdoYXQgdGhlIGZvbGsgd291bGQgc2F5Ozxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm90IHRvIGJlIGZvdW5kIG5vdyBpbiBIb21lci48L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4gCgkJCQlhbmQgYWdhaW464oCUCgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBzb21lIGltbW9ydGFsIHR1cm5lZCBoaXMgbWluZCBieSBsb2RnaW5nIGluIGhpcyBoZWFydCA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QSBmZWFyIG9mIHdoYXQgdGhlIGZvbGsgd291bGQgc2F5Ozxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm90IHRvIGJlIGZvdW5kIG5vdyBpbiBIb21lci48L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Ob3QgdG8gYmUgZm91bmQgbm93IGluIEhvbWVyLjwvbm90ZT4KICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWl0aGVyIHRocm91Z2ggc29tZSBzdXNwaWNpb24sIG9yIGVsc2UgYSBnb2Qgc28gYmFkZSBoaW0gZG87PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gOS4zMzkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGl4LiAzMzkuPC9iaWJsPgogICAgICAgICAgICAgICAgICA8L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCWJ1dCBwZW9wbGUgZGVzcGlzZSBIb21lciBhbmQgc2F5IHRoYXQgd2l0aCBoaXMgaW1wb3NzaWJsZSBleHBsb2l0cyBhbmQgaW5jcmVkaWJsZSB0YWxlcyBoZSBtYWtlcyBpdCBpbXBvc3NpYmxlIHRvIGJlbGlldmUgaW4gZXZlcnkgbWFuJ3MgcG93ZXIgdG8gZGV0ZXJtaW5lIGhpcyBvd24gY2hvaWNlIG9mIGFjdGlvbi4gCgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPkVpdGhlciB0aHJvdWdoIHNvbWUgc3VzcGljaW9uLCBvciBlbHNlIGEgZ29kIHNvIGJhZGUgaGltIGRvOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDkuMzM5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCBpeC4gMzM5LjwvYmlibD4KICAgICAgICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICAgICAgICA8L2w+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDkuMzM5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCBpeC4gMzM5LjwvYmlibD4KICAgICAgICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA5LjMzOSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaXguIDMzOS48L2JpYmw+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaXguIDMzOS48L3RyYW5zbGF0aW9uPg=="
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGhvd2V2ZXIsIGlzIG5vdCB3aGF0IEhvbWVyIGRvZXMsIGJ1dCB0aG9zZSBhY3RzIHdoaWNoIGFyZSBuYXR1cmFsLCBjdXN0b21hcnksIGFuZCB0aGUgcmVzdWx0IG9mIHJlYXNvbmluZywgaGUgYXR0cmlidXRlcyB0byBvdXIgb3duIHZvbGl0aW9uLCBhbmQgaGUgY2VydGFpbmx5IHNheXMgZnJlcXVlbnRseTrigJQKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBJIGZvcm1lZCBhIHBsYW4gd2l0aGluIG15IGxvcmRseSBoZWFydDs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA5LjI5OSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaXguIDI5OS48L2JpYmw+CiAgICAgICAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJYW5kIGFsc2864oCUCgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBJIGZvcm1lZCBhIHBsYW4gd2l0aGluIG15IGxvcmRseSBoZWFydDs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA5LjI5OSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaXguIDI5OS48L2JpYmw+CiAgICAgICAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA5LjI5OSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaXguIDI5OS48L2JpYmw+CiAgICAgICAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gOS4yOTkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGl4LiAyOTkuPC9iaWJsPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGl4LiAyOTkuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U28gaGUgc3Bha2UsIGFuZCBQZWxldXMnIHNvbiB3YXMgc29yZSBkaXN0cmVzc2VkLCBhbmQgaGlzIGhlYXJ0IDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRoaW4gaGlzIHNoYWdneSBicmVhc3QgYmV0d2VlbiB0d28gY291cnNlcyB3YXMgZGl2aWRlZDs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxLjE4OCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGkuIDE4OCBmLjwvYmlibD4KICAgICAgICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICAgICAgICA8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlhbmQgYWdhaW464oCUCgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPlNvIGhlIHNwYWtlLCBhbmQgUGVsZXVzJyBzb24gd2FzIHNvcmUgZGlzdHJlc3NlZCwgYW5kIGhpcyBoZWFydCA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0aGluIGhpcyBzaGFnZ3kgYnJlYXN0IGJldHdlZW4gdHdvIGNvdXJzZXMgd2FzIGRpdmlkZWQ7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMS4xODgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCBpLiAxODggZi48L2JpYmw+CiAgICAgICAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxLjE4OCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGkuIDE4OCBmLjwvYmlibD4KICAgICAgICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxLjE4OCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGkuIDE4OCBmLjwvYmlibD4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgaS4gMTg4IGYuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGhpbSBubyB3aGl0IDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3VsZCBzaGUgcGVyc3VhZGUgZnJvbSBoaXMgaW50ZWdyaXR5LCB0aGUgZmllcnkgaGVhcnRlZCBCZWxsZXJvcGhvbjs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiA2LjE2MSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHZpLiAxNjEgZi48L2JpYmw+CiAgICAgICAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBoaW0gbm8gd2hpdCA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q291bGQgc2hlIHBlcnN1YWRlIGZyb20gaGlzIGludGVncml0eSwgdGhlIGZpZXJ5IGhlYXJ0ZWQgQmVsbGVyb3Bob247PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gNi4xNjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB2aS4gMTYxIGYuPC9iaWJsPgogICAgICAgICAgICAgICAgICA8L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gNi4xNjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB2aS4gMTYxIGYuPC9iaWJsPgogICAgICAgICAgICAgICAgICA8L25vdGU+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDYuMTYxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgdmkuIDE2MSBmLjwvYmlibD4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgdmkuIDE2MSBmLjwvdHJhbnNsYXRpb24+"
translation['32.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJd2hpbGUgaW4gZXhwbG9pdHMgb2YgYSBzdHJhbmdlIGFuZCBleHRyYW9yZGluYXJ5IG5hdHVyZSwgcmVxdWlyaW5nIHNvbWUgcnVzaCBvZiBpbnNwaXJhdGlvbiwgYW5kIGRlc3BlcmF0ZSBjb3VyYWdlLCBoZSBkb2VzIG5vdCByZXByZXNlbnQgdGhlIGdvZCBhcyB0YWtpbmcgYSB3YXksIGJ1dCBhcyBwcm9tcHRpbmcsIGEgbWFuJ3MgY2hvaWNlIG9mIGFjdGlvbjsgbm9yIHlldCBhcyBjcmVhdGluZyBpbXB1bHNlcyBpbiBhIG1hbiwgYnV0IHJhdGhlciBjb25jZXB0aW9ucyB3aGljaCBsZWFkIHRvIGltcHVsc2VzLCBhbmQgYnkgdGhlc2UgaGlzIGFjdGlvbiBpcyBub3QgbWFkZSBpbnZvbHVudGFyeSwgYnV0IGhpcyB3aWxsIGlzIHNldCBpbiBtb3Rpb24sIHdoaWxlIGNvdXJhZ2UgYW5kIGhvcGUgYXJlIGFkZGVkIHRvIHN1c3RhaW4gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBlaXRoZXIgdGhlIGluZmx1ZW5jZSBvZiB0aGUgZ29kcyBtdXN0IGJlIHdob2xseSBleGNsdWRlZCBmcm9tIGFsbCBpbml0aWF0aW5nIHBvd2VyIG92ZXIgb3VyIGFjdGlvbnMsIG9yIGluIHdoYXQgb3RoZXIgd2F5IGNhbiB0aGV5IGFzc2lzdCBhbmQgY28tb3BlcmF0ZSB3aXRoIG1lbj8gVGhleSBjZXJ0YWlubHkgZG8gbm90IG1vdWxkIG91ciBib2RpZXMgYnkgdGhlaXIgZGlyZWN0IGFnZW5jeSwgbm9yIGdpdmUgdGhlIHJlcXVpc2l0ZSBjaGFuZ2UgdG8gdGhlIGFjdGlvbiBvZiBvdXIgaGFuZHMgYW5kIGZlZXQsIGJ1dCByYXRoZXIsIGJ5IGNlcnRhaW4gbW90aXZlcywgY29uY2VwdGlvbnMsIGFuZCBwdXJwb3NlcywgdGhleSByb3VzZSB0aGUgYWN0aXZlIGFuZCBlbGVjdGl2ZSBwb3dlcnMgb2Ygb3VyIHNwaXJpdHMsIG9yLCBvbiB0aGUgb3RoZXIgaGFuZCwgZGl2ZXJ0IGFuZCBjaGVjayB0aGVtLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaW4gUm9tZSwgYXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhaywgdmFyaW91cyBncm91cHMgb2Ygd29tZW4gdmlzaXRlZCB0aGUgdmFyaW91cyB0ZW1wbGVzLCBidXQgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGVtLCBhbmQgdGhvc2Ugb2YgaGlnaGVzdCBzdGF0aW9uLCBjYXJyaWVkIHRoZWlyIHN1cHBsaWNhdGlvbnMgdG8gdGhlIGFsdGFyIG9mIEp1cGl0ZXIgQ2FwaXRvbGludXMuIEFtb25nIHRoZXNlIHdhcyBWYWxlcmlhLCBhIHNpc3RlciBvZiB0aGF0IFB1YmxpY29sYSB3aG8gaGFkIGRvbmUgdGhlIFJvbWFucyBzbyBtYW55IGVtaW5lbnQgc2VydmljZXMgYm90aCBhcyB3YXJyaW9yIGFuZCBzdGF0ZXNtYW4uIFB1YmxpY29sYSwgaW5kZWVkLCBoYWQgZGllZCBzb21lIHRpbWUgYmVmb3JlLCBhcyBJIGhhdmUgcmVsYXRlZCBpbiBoaXMgTGlmZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMjMiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeHhpaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ1dCAgVmFsZXJpYSB3YXMgc3RpbGwgZW5qb3lpbmcgaGVyIHJlcHV0ZSBhbmQgaG9ub3VyIGluIHRoZSBjaXR5LCB3aGVyZSBoZXIgbGlmZSB3YXMgdGhvdWdodCB0byBhZG9ybiBoZXIgbGluZWFnZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3b21hbiwgdGhlbiwgc3VkZGVubHkgc2VpemVkIHdpdGggb25lIG9mIHRob3NlIGZlZWxpbmdzIHdoaWNoIEkgaGF2ZSBiZWVuIGRlc2NyaWJpbmcsIGFuZCBsYXlpbmcgaG9sZCBvZiB0aGUgcmlnaHQgZXhwZWRpZW50IHdpdGggYSBwdXJwb3NlIG5vdCB1bmluc3BpcmVkIG9mIGhlYXZlbiwgcm9zZSB1cCBoZXJzZWxmOyBiYWRlIHRoZSBvdGhlciB3b21lbiBhbGwgcmlzZSwgYW5kIGNhbWUgd2l0aCB0aGVtIHRvIHRoZSBob3VzZSBvZiBWb2x1bW5pYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlbiB0aGUgbWF0cm9ucyBjYW1lIGluIGEgYm9keSB0byBWZXR1cmlhLCB0aGUgbW90aGVyIG9mIENvcmlvbGFudXMsIGFuZCBWb2x1bW5pYSwgaGlzIHdpZmUuIFdoZXRoZXIgdGhpcyB3YXMgdGhlIHJlc3VsdCBvZiBwdWJsaWMgY291bnNlbCwgb3Igb2YgdGhlIHdvbWVuJ3MgZmVhciwgSSBjYW5ub3QgYXNjZXJ0YWluLjwvcT7igJQ8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA0MCwgMS48L2JpYmw+IEluIERpb255c2l1cyBhbHNvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMzkuNDAiPih2aWkuIDM5LCA0MCk8L2JpYmw+LCB3aG9tIFBsdXRhcmNoIHNlZW1zIG90aGVyd2lzZSB0byBiZSBmb2xsb3dpbmcsIFZlcnR1cmlhIGlzIHRoZSBtb3RoZXIsIGFuZCBWb2x1bW5pYSB0aGUgd2lmZSwgb2YgTWFyY2l1cy48L25vdGU+IHRoZSBtb3RoZXIgb2YgTWFyY2l1cy4gQWZ0ZXIgZW50ZXJpbmcgYW5kIGZpbmRpbmcgaGVyIHNlYXRlZCB3aXRoIGhlciBkYXVnaHRlci1pbi1sYXcsIGFuZCBob2xkaW5nIHRoZSBjaGlsZHJlbiBvZiBNYXJjaXVzIG9uIGhlciBsYXAsIFZhbGVyaWEgY2FsbGVkIGFib3V0IGhlciB0aGUgd29tZW4gd2hvIGhhZCBmb2xsb3dlZCwgYW5kIHNhaWQ6IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSB3aG9tIHRob3Ugc2Vlc3QgaGVyZSwgVm9sdW1uaWEsIGFuZCB0aG91LCBWZXJnaWxpYSwgYXJlIGNvbWUgYXMgd29tZW4gdG8gd29tZW4sIG9iZXlpbmcgbmVpdGhlciBzZW5hdG9yaWFsIGVkaWN0IG5vciBjb25zdWxhciBjb21tYW5kOyBidXQgb3VyIGdvZCwgYXMgaXQgd291bGQgc2VlbSwgdGFraW5nIHBpdHkgb24gb3VyIHN1cHBsaWNhdGlvbiwgcHV0IGludG8gb3VyIGhlYXJ0cyBhbiBpbXB1bHNlIHRvIGNvbWUgaGl0aGVyIHRvIHlvdSBhbmQgYmVzZWVjaCB5b3UgdG8gZG8gdGhhdCB3aGljaCB3aWxsIG5vdCBvbmx5IGJlIHRoZSBzYWx2YXRpb24gb2YgdXMgb3Vyc2VsdmVzIGFuZCBvZiB0aGUgY2l0aXplbnMgYmVzaWRlcywgYnV0IGFsc28gbGlmdCB5b3Ugd2hvIGNvbnNlbnQgdG8gZG8gaXQgdG8gYSBtb3JlIGNvbnNwaWN1b3VzIGZhbWUgdGhhbiB0aGF0IHdoaWNoIHRoZSBkYXVnaHRlcnMgb2YgdGhlIFNhYmluZXMgd29uLCB3aGVuIHRoZXkgYnJvdWdodCB0aGVpciBmYXRoZXJzIGFuZCBodXNiYW5kcyBvdXQgb2Ygd2FyIGludG8gZnJpZW5kc2hpcCBhbmQgcGVhY2UuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcmlzZSwgY29tZSB3aXRoIHVzIHRvIE1hcmNpdXMsIGFuZCBqb2luIHdpdGggdXMgaW4gc3VwcGxpY2F0aW5nIGhpbSwgYmVhcmluZyB0aGlzIGp1c3QgYW5kIHRydWUgdGVzdGltb255IGluIGJlaGFsZiBvZiB5b3VyIGNvdW50cnksIHRoYXQsIGFsdGhvdWdoIHNoZSBoYXMgc3VmZmVyZWQgbXVjaCB3cm9uZyBhdCBoaXMgaGFuZHMsIHNoZSBoYXMgbmVpdGhlciBkb25lIG5vciB0aG91Z2h0IG9mIGRvaW5nIGhhcm0gdG8geW91LCBpbiBoZXIgYXVnZXIsIGJ1dCByZXN0b3JlcyB5b3UgdG8gaGltLCBldmVuIHRob3VnaCBzaGUgaXMgZGVzdGluZWQgdG8gb2J0YWluIG5vIGVxdWl0YWJsZSB0cmVhdG1lbnQgYXQgaGlzIGhhbmRzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGluIFJvbWUsIGF0IHRoZSB0aW1lIG9mIHdoaWNoIEkgc3BlYWssIHZhcmlvdXMgZ3JvdXBzIG9mIHdvbWVuIHZpc2l0ZWQgdGhlIHZhcmlvdXMgdGVtcGxlcywgYnV0IHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlbSwgYW5kIHRob3NlIG9mIGhpZ2hlc3Qgc3RhdGlvbiwgY2FycmllZCB0aGVpciBzdXBwbGljYXRpb25zIHRvIHRoZSBhbHRhciBvZiBKdXBpdGVyIENhcGl0b2xpbnVzLiBBbW9uZyB0aGVzZSB3YXMgVmFsZXJpYSwgYSBzaXN0ZXIgb2YgdGhhdCBQdWJsaWNvbGEgd2hvIGhhZCBkb25lIHRoZSBSb21hbnMgc28gbWFueSBlbWluZW50IHNlcnZpY2VzIGJvdGggYXMgd2FycmlvciBhbmQgc3RhdGVzbWFuLiBQdWJsaWNvbGEsIGluZGVlZCwgaGFkIGRpZWQgc29tZSB0aW1lIGJlZm9yZSwgYXMgSSBoYXZlIHJlbGF0ZWQgaW4gaGlzIExpZmU7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTnVtLiAyMyIgdmFsaWQ9InllcyI+Q2hhcHRlciB4eGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYnV0ICBWYWxlcmlhIHdhcyBzdGlsbCBlbmpveWluZyBoZXIgcmVwdXRlIGFuZCBob25vdXIgaW4gdGhlIGNpdHksIHdoZXJlIGhlciBsaWZlIHdhcyB0aG91Z2h0IHRvIGFkb3JuIGhlciBsaW5lYWdlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMjMiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeHhpaWkuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd29tYW4sIHRoZW4sIHN1ZGRlbmx5IHNlaXplZCB3aXRoIG9uZSBvZiB0aG9zZSBmZWVsaW5ncyB3aGljaCBJIGhhdmUgYmVlbiBkZXNjcmliaW5nLCBhbmQgbGF5aW5nIGhvbGQgb2YgdGhlIHJpZ2h0IGV4cGVkaWVudCB3aXRoIGEgcHVycG9zZSBub3QgdW5pbnNwaXJlZCBvZiBoZWF2ZW4sIHJvc2UgdXAgaGVyc2VsZjsgYmFkZSB0aGUgb3RoZXIgd29tZW4gYWxsIHJpc2UsIGFuZCBjYW1lIHdpdGggdGhlbSB0byB0aGUgaG91c2Ugb2YgVm9sdW1uaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVuIHRoZSBtYXRyb25zIGNhbWUgaW4gYSBib2R5IHRvIFZldHVyaWEsIHRoZSBtb3RoZXIgb2YgQ29yaW9sYW51cywgYW5kIFZvbHVtbmlhLCBoaXMgd2lmZS4gV2hldGhlciB0aGlzIHdhcyB0aGUgcmVzdWx0IG9mIHB1YmxpYyBjb3Vuc2VsLCBvciBvZiB0aGUgd29tZW4ncyBmZWFyLCBJIGNhbm5vdCBhc2NlcnRhaW4uPC9xPuKAlDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40MC4xIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNDAsIDEuPC9iaWJsPiBJbiBEaW9ueXNpdXMgYWxzbyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMzkuNDAiPih2aWkuIDM5LCA0MCk8L2JpYmw+LCB3aG9tIFBsdXRhcmNoIHNlZW1zIG90aGVyd2lzZSB0byBiZSBmb2xsb3dpbmcsIFZlcnR1cmlhIGlzIHRoZSBtb3RoZXIsIGFuZCBWb2x1bW5pYSB0aGUgd2lmZSwgb2YgTWFyY2l1cy48L25vdGU+IHRoZSBtb3RoZXIgb2YgTWFyY2l1cy4gQWZ0ZXIgZW50ZXJpbmcgYW5kIGZpbmRpbmcgaGVyIHNlYXRlZCB3aXRoIGhlciBkYXVnaHRlci1pbi1sYXcsIGFuZCBob2xkaW5nIHRoZSBjaGlsZHJlbiBvZiBNYXJjaXVzIG9uIGhlciBsYXAsIFZhbGVyaWEgY2FsbGVkIGFib3V0IGhlciB0aGUgd29tZW4gd2hvIGhhZCBmb2xsb3dlZCwgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVuIHRoZSBtYXRyb25zIGNhbWUgaW4gYSBib2R5IHRvIFZldHVyaWEsIHRoZSBtb3RoZXIgb2YgQ29yaW9sYW51cywgYW5kIFZvbHVtbmlhLCBoaXMgd2lmZS4gV2hldGhlciB0aGlzIHdhcyB0aGUgcmVzdWx0IG9mIHB1YmxpYyBjb3Vuc2VsLCBvciBvZiB0aGUgd29tZW4ncyBmZWFyLCBJIGNhbm5vdCBhc2NlcnRhaW4uPC9xPuKAlDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40MC4xIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNDAsIDEuPC9iaWJsPiBJbiBEaW9ueXNpdXMgYWxzbyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDcuMzkuNDAiPih2aWkuIDM5LCA0MCk8L2JpYmw+LCB3aG9tIFBsdXRhcmNoIHNlZW1zIG90aGVyd2lzZSB0byBiZSBmb2xsb3dpbmcsIFZlcnR1cmlhIGlzIHRoZSBtb3RoZXIsIGFuZCBWb2x1bW5pYSB0aGUgd2lmZSwgb2YgTWFyY2l1cy48L3RyYW5zbGF0aW9uPg=="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlIHdob20gdGhvdSBzZWVzdCBoZXJlLCBWb2x1bW5pYSwgYW5kIHRob3UsIFZlcmdpbGlhLCBhcmUgY29tZSBhcyB3b21lbiB0byB3b21lbiwgb2JleWluZyBuZWl0aGVyIHNlbmF0b3JpYWwgZWRpY3Qgbm9yIGNvbnN1bGFyIGNvbW1hbmQ7IGJ1dCBvdXIgZ29kLCBhcyBpdCB3b3VsZCBzZWVtLCB0YWtpbmcgcGl0eSBvbiBvdXIgc3VwcGxpY2F0aW9uLCBwdXQgaW50byBvdXIgaGVhcnRzIGFuIGltcHVsc2UgdG8gY29tZSBoaXRoZXIgdG8geW91IGFuZCBiZXNlZWNoIHlvdSB0byBkbyB0aGF0IHdoaWNoIHdpbGwgbm90IG9ubHkgYmUgdGhlIHNhbHZhdGlvbiBvZiB1cyBvdXJzZWx2ZXMgYW5kIG9mIHRoZSBjaXRpemVucyBiZXNpZGVzLCBidXQgYWxzbyBsaWZ0IHlvdSB3aG8gY29uc2VudCB0byBkbyBpdCB0byBhIG1vcmUgY29uc3BpY3VvdXMgZmFtZSB0aGFuIHRoYXQgd2hpY2ggdGhlIGRhdWdodGVycyBvZiB0aGUgU2FiaW5lcyB3b24sIHdoZW4gdGhleSBicm91Z2h0IHRoZWlyIGZhdGhlcnMgYW5kIGh1c2JhbmRzIG91dCBvZiB3YXIgaW50byBmcmllbmRzaGlwIGFuZCBwZWFjZS4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXJpc2UsIGNvbWUgd2l0aCB1cyB0byBNYXJjaXVzLCBhbmQgam9pbiB3aXRoIHVzIGluIHN1cHBsaWNhdGluZyBoaW0sIGJlYXJpbmcgdGhpcyBqdXN0IGFuZCB0cnVlIHRlc3RpbW9ueSBpbiBiZWhhbGYgb2YgeW91ciBjb3VudHJ5LCB0aGF0LCBhbHRob3VnaCBzaGUgaGFzIHN1ZmZlcmVkIG11Y2ggd3JvbmcgYXQgaGlzIGhhbmRzLCBzaGUgaGFzIG5laXRoZXIgZG9uZSBub3IgdGhvdWdodCBvZiBkb2luZyBoYXJtIHRvIHlvdSwgaW4gaGVyIGF1Z2VyLCBidXQgcmVzdG9yZXMgeW91IHRvIGhpbSwgZXZlbiB0aG91Z2ggc2hlIGlzIGRlc3RpbmVkIHRvIG9idGFpbiBubyBlcXVpdGFibGUgdHJlYXRtZW50IGF0IGhpcyBoYW5kcy48L3E+CgkJCSAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFyaXNlLCBjb21lIHdpdGggdXMgdG8gTWFyY2l1cywgYW5kIGpvaW4gd2l0aCB1cyBpbiBzdXBwbGljYXRpbmcgaGltLCBiZWFyaW5nIHRoaXMganVzdCBhbmQgdHJ1ZSB0ZXN0aW1vbnkgaW4gYmVoYWxmIG9mIHlvdXIgY291bnRyeSwgdGhhdCwgYWx0aG91Z2ggc2hlIGhhcyBzdWZmZXJlZCBtdWNoIHdyb25nIGF0IGhpcyBoYW5kcywgc2hlIGhhcyBuZWl0aGVyIGRvbmUgbm9yIHRob3VnaHQgb2YgZG9pbmcgaGFybSB0byB5b3UsIGluIGhlciBhdWdlciwgYnV0IHJlc3RvcmVzIHlvdSB0byBoaW0sIGV2ZW4gdGhvdWdoIHNoZSBpcyBkZXN0aW5lZCB0byBvYnRhaW4gbm8gZXF1aXRhYmxlIHRyZWF0bWVudCBhdCBoaXMgaGFuZHMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2Ugd29yZHMgb2YgVmFsZXJpYSB3ZXJlIHNlY29uZGVkIGJ5IHRoZSBjcmllcyBvZiB0aGUgb3RoZXIgd29tZW4gd2l0aCBoZXIsIGFuZCBWb2x1bW5pYSBnYXZlIHRoZW0gdGhpcyBhbnN3ZXI64oCUCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIHdvbWVuLCBub3Qgb25seSBoYXZlIHdlIGFuIGVxdWFsIHNoYXJlIHdpdGggeW91IGluIHRoZSBjb21tb24gY2FsYW1pdGllcywgYnV0IHdlIGhhdmUgYW4gYWRkaXRpb25hbCBtaXNlcnkgb2Ygb3VyIG93biwgaW4gdGhhdCB3ZSBoYXZlIGxvc3QgdGhlIGZhbWUgYW5kIHZpcnR1ZSBvZiBNYXJjaXVzLCBhbmQgc2VlIGhpcyBwZXJzb24gcHJvdGVjdGVkIGluIGNvbW1hbmQsIHJhdGhlciB0aGFuIHByZXNlcnZlZCBmcm9tIGRlYXRoLCBieSB0aGUgYXJtcyBvZiBvdXIgZW5lbWllcy4gQW5kIHlldCBpdCBpcyB0aGUgZ3JlYXRlc3Qgb2Ygb3VyIG1pc2ZvcnR1bmVzIHRoYXQgb3VyIG5hdGl2ZSBjaXR5IGlzIGJlY29tZSBzbyB1dHRlcmx5IHdlYWsgYXMgdG8gcGxhY2UgaGVyIGhvcGVzIGluIHVzLiAKCQkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEkga25vdyBub3Qgd2hldGhlciB0aGUgbWFuIHdpbGwgaGF2ZSBhbnkgcmVnYXJkIGZvciB1cywgc2luY2UgaGUgaGFzIG5vbmUgZm9yIGhpcyBjb3VudHJ5LCB3aGljaCBoZSBvbmNlIHNldCBiZWZvcmUgbW90aGVyIGFuZCB3aWZlIGFuZCBjaGlsZHJlbi4gSG93ZXZlciwgdGFrZSB1cyBhbmQgdXNlIHVzIGFuZCBicmluZyB1cyB0byBoaW07IGlmIHdlIGNhbiBkbyBub3RoaW5nIGVsc2UsIHdlIGNhbiBhdCBsZWFzdCBicmVhdGhlIG91dCBvdXIgbGl2ZXMgaW4gc3VwcGxpY2F0aW9ucyBmb3Igb3VyIGNvdW50cnkuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdvcmRzIG9mIFZhbGVyaWEgd2VyZSBzZWNvbmRlZCBieSB0aGUgY3JpZXMgb2YgdGhlIG90aGVyIHdvbWVuIHdpdGggaGVyLCBhbmQgVm9sdW1uaWEgZ2F2ZSB0aGVtIHRoaXMgYW5zd2VyOuKAlAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIHdvbWVuLCBub3Qgb25seSBoYXZlIHdlIGFuIGVxdWFsIHNoYXJlIHdpdGggeW91IGluIHRoZSBjb21tb24gY2FsYW1pdGllcywgYnV0IHdlIGhhdmUgYW4gYWRkaXRpb25hbCBtaXNlcnkgb2Ygb3VyIG93biwgaW4gdGhhdCB3ZSBoYXZlIGxvc3QgdGhlIGZhbWUgYW5kIHZpcnR1ZSBvZiBNYXJjaXVzLCBhbmQgc2VlIGhpcyBwZXJzb24gcHJvdGVjdGVkIGluIGNvbW1hbmQsIHJhdGhlciB0aGFuIHByZXNlcnZlZCBmcm9tIGRlYXRoLCBieSB0aGUgYXJtcyBvZiBvdXIgZW5lbWllcy4gQW5kIHlldCBpdCBpcyB0aGUgZ3JlYXRlc3Qgb2Ygb3VyIG1pc2ZvcnR1bmVzIHRoYXQgb3VyIG5hdGl2ZSBjaXR5IGlzIGJlY29tZSBzbyB1dHRlcmx5IHdlYWsgYXMgdG8gcGxhY2UgaGVyIGhvcGVzIGluIHVzLiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSSBrbm93IG5vdCB3aGV0aGVyIHRoZSBtYW4gd2lsbCBoYXZlIGFueSByZWdhcmQgZm9yIHVzLCBzaW5jZSBoZSBoYXMgbm9uZSBmb3IgaGlzIGNvdW50cnksIHdoaWNoIGhlIG9uY2Ugc2V0IGJlZm9yZSBtb3RoZXIgYW5kIHdpZmUgYW5kIGNoaWxkcmVuLiBIb3dldmVyLCB0YWtlIHVzIGFuZCB1c2UgdXMgYW5kIGJyaW5nIHVzIHRvIGhpbTsgaWYgd2UgY2FuIGRvIG5vdGhpbmcgZWxzZSwgd2UgY2FuIGF0IGxlYXN0IGJyZWF0aGUgb3V0IG91ciBsaXZlcyBpbiBzdXBwbGljYXRpb25zIGZvciBvdXIgY291bnRyeS48L3E+CgkJCSAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBJIGtub3cgbm90IHdoZXRoZXIgdGhlIG1hbiB3aWxsIGhhdmUgYW55IHJlZ2FyZCBmb3IgdXMsIHNpbmNlIGhlIGhhcyBub25lIGZvciBoaXMgY291bnRyeSwgd2hpY2ggaGUgb25jZSBzZXQgYmVmb3JlIG1vdGhlciBhbmQgd2lmZSBhbmQgY2hpbGRyZW4uIEhvd2V2ZXIsIHRha2UgdXMgYW5kIHVzZSB1cyBhbmQgYnJpbmcgdXMgdG8gaGltOyBpZiB3ZSBjYW4gZG8gbm90aGluZyBlbHNlLCB3ZSBjYW4gYXQgbGVhc3QgYnJlYXRoZSBvdXQgb3VyIGxpdmVzIGluIHN1cHBsaWNhdGlvbnMgZm9yIG91ciBjb3VudHJ5LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHNoZSB0b29rIHRoZSBjaGlsZHJlbiBhbmQgVmVyZ2lsaWEgYW5kIHdlbnQgd2l0aCB0aGUgb3RoZXIgd29tZW4gdG8gdGhlIGNhbXAgb2YgdGhlIFZvbHNjaWFucy4gVGhlIHNpZ2h0IG9mIHRoZW0sIGFuZCB0aGUgcGl0aWZ1bG5lc3Mgb2YgaXQsIHByb2R1Y2VkIGV2ZW4gaW4gdGhlaXIgZW5lbWllcyByZXZlcmVuY2UgYW5kIHNpbGVuY2UuIE5vdyBpdCBjaGFuY2VkIHRoYXQgTWFyY2l1cyB3YXMgc2VhdGVkIG9uIGEgdHJpYnVuYWwgd2l0aCBoaXMgY2hpZWYgb2ZmaWNlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGFjY29yZGluZ2x5LCBoZSBzYXcgdGhlIHdvbWVuIGFwcHJvYWNoaW5nLCBoZSB3YXMgYW1hemVkOyBhbmQgd2hlbiBoZSByZWNvZ25pemVkIGhpcyBtb3RoZXIsIHdobyB3YWxrZWQgYXQgdGhlaXIgaGVhZCwgaGUgd291bGQgZmFpbiBoYXZlIHBlcnNpc3RlZCBpbiBoaXMgcHJldmlvdXMgaW5mbGV4aWJsZSBhbmQgaW1wbGFjYWJsZSBjb3Vyc2UsIGJ1dCwgbWFzdGVyZWQgYnkgaGlzIGZlZWxpbmdzLCBhbmQgY29uZm91bmRlZCBhdCB3aGF0IGhlIHNhdywgaGUgY291bGQgbm90IGVuZHVyZSB0byByZW1haW4gc2VhdGVkIHdoaWxlIHRoZXkgYXBwcm9hY2hlZCBoaW0sIGJ1dCBkZXNjZW5kZWQgcXVpY2tseSBmcm9tIHRoZSB0cmlidW5hbCBhbmQgcmFuIHRvIG1lZXQgdGhlbS4gSGUgc2FsdXRlZCBoaXMgbW90aGVyIGZpcnN0LCBhbmQgaGVsZCBoZXIgYSBsb25nIHRpbWUgaW4gaGlzIGVtYnJhY2UsIGFuZCB0aGVuIGhpcyB3aWZlIGFuZCBjaGlsZHJlbiwgc3BhcmluZyBub3cgbmVpdGhlciB0ZWFycyBub3IgY2FyZXNzZXMsIGJ1dCBzdWZmZXJpbmcgaGltc2VsZiBhcyBpdCB3ZXJlIHRvIGJlIGJvcm5lIGF3YXkgYnkgYSB0b3JyZW50IG9mIGVtb3Rpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgc2hlIHRvb2sgdGhlIGNoaWxkcmVuIGFuZCBWZXJnaWxpYSBhbmQgd2VudCB3aXRoIHRoZSBvdGhlciB3b21lbiB0byB0aGUgY2FtcCBvZiB0aGUgVm9sc2NpYW5zLiBUaGUgc2lnaHQgb2YgdGhlbSwgYW5kIHRoZSBwaXRpZnVsbmVzcyBvZiBpdCwgcHJvZHVjZWQgZXZlbiBpbiB0aGVpciBlbmVtaWVzIHJldmVyZW5jZSBhbmQgc2lsZW5jZS4gTm93IGl0IGNoYW5jZWQgdGhhdCBNYXJjaXVzIHdhcyBzZWF0ZWQgb24gYSB0cmlidW5hbCB3aXRoIGhpcyBjaGllZiBvZmZpY2Vycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGFjY29yZGluZ2x5LCBoZSBzYXcgdGhlIHdvbWVuIGFwcHJvYWNoaW5nLCBoZSB3YXMgYW1hemVkOyBhbmQgd2hlbiBoZSByZWNvZ25pemVkIGhpcyBtb3RoZXIsIHdobyB3YWxrZWQgYXQgdGhlaXIgaGVhZCwgaGUgd291bGQgZmFpbiBoYXZlIHBlcnNpc3RlZCBpbiBoaXMgcHJldmlvdXMgaW5mbGV4aWJsZSBhbmQgaW1wbGFjYWJsZSBjb3Vyc2UsIGJ1dCwgbWFzdGVyZWQgYnkgaGlzIGZlZWxpbmdzLCBhbmQgY29uZm91bmRlZCBhdCB3aGF0IGhlIHNhdywgaGUgY291bGQgbm90IGVuZHVyZSB0byByZW1haW4gc2VhdGVkIHdoaWxlIHRoZXkgYXBwcm9hY2hlZCBoaW0sIGJ1dCBkZXNjZW5kZWQgcXVpY2tseSBmcm9tIHRoZSB0cmlidW5hbCBhbmQgcmFuIHRvIG1lZXQgdGhlbS4gSGUgc2FsdXRlZCBoaXMgbW90aGVyIGZpcnN0LCBhbmQgaGVsZCBoZXIgYSBsb25nIHRpbWUgaW4gaGlzIGVtYnJhY2UsIGFuZCB0aGVuIGhpcyB3aWZlIGFuZCBjaGlsZHJlbiwgc3BhcmluZyBub3cgbmVpdGhlciB0ZWFycyBub3IgY2FyZXNzZXMsIGJ1dCBzdWZmZXJpbmcgaGltc2VsZiBhcyBpdCB3ZXJlIHRvIGJlIGJvcm5lIGF3YXkgYnkgYSB0b3JyZW50IG9mIGVtb3Rpb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHdhcyBzYXRlZCB3aXRoIHRoaXMsIGFuZCBwZXJjZWl2ZWQgdGhhdCBoaXMgbW90aGVyIG5vdyB3aXNoZWQgdG8gc2F5IHNvbWV0aGluZywgaGUgYnJvdWdodCB0byBoaXMgc2lkZSB0aGUgY291bmNpbGxvcnMgb2YgdGhlIFZvbHNjaWFucywgYW5kIGhlYXJkIFZvbHVtbmlhIHNwZWFrIGFzIGZvbGxvd3M6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBzZWVzdCwgbXkgc29uLCBldmVuIGlmIHdlIGRvIG5vdCBzcGVhayBvdXJzZWx2ZXMsIGFuZCBjYW5zdCBqdWRnZSBmcm9tIHRoZSB3cmV0Y2hlZG5lc3Mgb2Ygb3VyIGdhcmIgYW5kIGFzcGVjdCwgdG8gd2hhdCBhIHBpdGlmdWwgc3RhdGUgdGh5IGJhbmlzaG1lbnQgaGFzIHJlZHVjZWQgdXMuIAoJCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IGJlIHN1cmUgdGhhdCB3ZSB3aG8gY29tZSB0byB0aGVlIGFyZSBvZiBhbGwgd29tZW4gbW9zdCB1bmhhcHB5LCBzaW5jZSBmb3J0dW5lIGhhcyBtYWRlIHRoZSBzaWdodCB3aGljaCBzaG91bGQgaGF2ZSBiZWVuIG1vc3Qgc3dlZXQsIG1vc3QgZHJlYWRmdWwgZm9yIHVzLCBhcyBJIGJlaG9sZCBteSBzb24sIGFuZCB0aGlzIHdpZmUgb2YgdGhpbmUgaGVyIGh1c2JhbmQsIGVuY2FtcGVkIGFnYWluc3QgdGhlIHdhbGxzIG9mIG91ciBuYXRpdmUgY2l0eS4gQW5kIHRoYXQgd2hpY2ggZm9yIHRoZSByZXN0IGlzIGFuIGFzc3VhZ2VtZW50IG9mIGFsbCBtaXNmb3J0dW5lIGFuZCBtaXNlcnksIG5hbWVseSBwcmF5ZXIgdG8gdGhlIGdvZHMsIGhhcyBiZWNvbWUgZm9yIHVzIG1vc3QgaW1wcmFjdGljYWJsZTsgZm9yIHdlIGNhbm5vdCBhc2sgZnJvbSB0aGUgZ29kcyBib3RoIHZpY3RvcnkgZm9yIG91ciBjb3VudHJ5IGFuZCBhdCB0aGUgc2FtZSB0aW1lIHNhZmV0eSBmb3IgdGhlZSwgYnV0IHRoYXQgd2hpY2ggYW55IG9uZSBvZiBvdXIgZm9lcyBtaWdodCBpbXByZWNhdGUgdXBvbiB1cyBhcyBhIGN1cnNlLCB0aGlzIG11c3QgYmUgdGhlIGJ1cmRlbiBvZiBvdXIgcHJheWVycy4gCgkJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aHkgd2lmZSBhbmQgY2hpbGRyZW4gbXVzdCBuZWVkcyBiZSBkZXByaXZlZCBlaXRoZXIgb2YgdGhlaXIgY291bnRyeSBvciBvZiB0aGVlLiBBcyBmb3IgbWUsIEkgd2lsbCBub3Qgd2FpdCB0byBoYXZlIHRoZSB3YXIgZGVjaWRlIHRoaXMgaXNzdWUgZm9yIG1lIHdoaWxlIEkgbGl2ZSwgYnV0IHVubGVzcyBJIGNhbiBwZXJzdWFkZSB0aGVlIHRvIHN1YnN0aXR1dGUgZnJpZW5kc2hpcCBhbmQgY29uY29yZCBmb3IgZGlzc2Vuc2lvbiBhbmQgaG9zdGlsaXR5LCBhbmQgc28gdG8gYmVjb21lIGEgYmVuZWZhY3RvciBvZiBib3RoIHBhcnRpZXMgcmF0aGVyIHRoYW4gYSBkZXN0cm95ZXIgb2Ygb25lIG9mIHRoZW0sIHRoZW4gY29uc2lkZXIgYW5kIGJlIHdlbGwgYXNzdXJlZCB0aGF0IHRob3UgY2Fuc3Qgbm90IGFzc2FpbCB0aHkgY291bnRyeSB3aXRob3V0IGZpcnN0IHRyZWFkaW5nIHVuZGVyZm9vdCB0aGUgY29ycHNlIG9mIGhlciB3aG8gYm9yZSB0aGVlLiBGb3IgaXQgZG9lcyBub3QgYmVob292ZSBtZSB0byBhd2FpdCB0aGF0IGRheSBvbiB3aGljaCBJIHNoYWxsIGJlaG9sZCBteSBzb24gZWl0aGVyIGxlZCBpbiB0cml1bXBoIGJ5IGhpcyBmZWxsb3ctY2l0aXplbnMgb3IgdHJpdW1waGluZyBvdmVyIGhpcyBjb3VudHJ5LiAKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SWYsIHRoZW4sIEkgYXNrZWQgeW91IHRvIHNhdmUgeW91ciBjb3VudHJ5IGJ5IHJ1aW5pbmcgdGhlIFZvbHNjaWFucywgdGhlIHF1ZXN0aW9uIGJlZm9yZSB0aGVlIHdvdWxkIGJlIGEgZ3JpZXZvdXMgb25lLCBteSBzb24sIGFuZCBoYXJkIHRvIGRlY2lkZSwgc2luY2UgaXQgaXMgbmVpdGhlciBob25vdXJhYmxlIGZvciBhIG1hbiB0byBkZXN0cm95IGhpcyBmZWxsb3ctY2l0aXplbnMsIG5vciBqdXN0IGZvciBoaW0gdG8gYmV0cmF5IHRob3NlIHdobyBoYXZlIHB1dCB0aGVpciB0cnVzdCBpbiBoaW07IGJ1dCBhcyBpdCBpcywgd2UgYXNrIG9ubHkgYSByZWxpZWYgZnJvbSBldmlscywgc29tZXRoaW5nIHdoaWNoIHdvdWxkIGJlIHNhbHV0YXJ5IGZvciBib3RoIHBhcnRpZXMgYWxpa2UsIGJ1dCBtb3JlIGNvbmR1Y2l2ZSB0byBmYW1lIGFuZCBob25vdXIgZm9yIHRoZSBWb2xzY2lhbnMsIGJlY2F1c2UgdGhlaXIgc3VwZXJpb3JpdHkgaW4gYXJtcyB3aWxsIGdpdmUgdGhlbSB0aGUgYXBwZWFyYW5jZSBvZiBiZXN0b3dpbmcgdGhlIGdyZWF0ZXN0IG9mIGJsZXNzaW5ncywgbmFtZWx5IHBlYWNlIGFuZCBmcmllbmRzaGlwLCBhbHRob3VnaCB0aGV5IGdldCB0aGVzZSBubyBsZXNzIHRoZW1zZWx2ZXMuIElmIHRoZXNlIGJsZXNzaW5ncyBhcmUgcmVhbGl6ZWQsIGl0IHdpbGwgYmUgY2hpZWZseSBkdWUgdG8gdGhlZTsgaWYgdGhleSBhcmUgbm90LCB0aGVuIHRob3UgYWxvbmUgd2lsdCBiZWFyIHRoZSBibGFtZSBmcm9tIGJvdGggbmF0aW9ucy4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggdGhlIGlzc3VlcyBvZiB3YXIgYXJlIG9ic2N1cmUsIHRoaXMgaXMgbWFuaWZlc3QsIHRoYXQgaWYgdmljdG9yaW91cywgdGhvdSB3aWx0IG9ubHkgYmUgdGh5IGNvdW50cnkncyBkZXN0cm95aW5nIGRlbW9uLCBhbmQgaWYgZGVmZWF0ZWQsIHRoZSB3b3JsZCB3aWxsIHRoaW5rIHRoYXQsIHRvIHNhdGlzZnkgdGh5IHdyYXRoLCB0aG91IGRpZHN0IGJyaW5nIGRvd24gdGhlIGdyZWF0ZXN0IGNhbGFtaXRpZXMgdXBvbiBtZW4gd2hvIHdlcmUgdGh5IGJlbmVmYWN0b3JzIGFuZCBmcmllbmRzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gaGUgd2FzIHNhdGVkIHdpdGggdGhpcywgYW5kIHBlcmNlaXZlZCB0aGF0IGhpcyBtb3RoZXIgbm93IHdpc2hlZCB0byBzYXkgc29tZXRoaW5nLCBoZSBicm91Z2h0IHRvIGhpcyBzaWRlIHRoZSBjb3VuY2lsbG9ycyBvZiB0aGUgVm9sc2NpYW5zLCBhbmQgaGVhcmQgVm9sdW1uaWEgc3BlYWsgYXMgZm9sbG93czogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3Ugc2Vlc3QsIG15IHNvbiwgZXZlbiBpZiB3ZSBkbyBub3Qgc3BlYWsgb3Vyc2VsdmVzLCBhbmQgY2Fuc3QganVkZ2UgZnJvbSB0aGUgd3JldGNoZWRuZXNzIG9mIG91ciBnYXJiIGFuZCBhc3BlY3QsIHRvIHdoYXQgYSBwaXRpZnVsIHN0YXRlIHRoeSBiYW5pc2htZW50IGhhcyByZWR1Y2VkIHVzLiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IGJlIHN1cmUgdGhhdCB3ZSB3aG8gY29tZSB0byB0aGVlIGFyZSBvZiBhbGwgd29tZW4gbW9zdCB1bmhhcHB5LCBzaW5jZSBmb3J0dW5lIGhhcyBtYWRlIHRoZSBzaWdodCB3aGljaCBzaG91bGQgaGF2ZSBiZWVuIG1vc3Qgc3dlZXQsIG1vc3QgZHJlYWRmdWwgZm9yIHVzLCBhcyBJIGJlaG9sZCBteSBzb24sIGFuZCB0aGlzIHdpZmUgb2YgdGhpbmUgaGVyIGh1c2JhbmQsIGVuY2FtcGVkIGFnYWluc3QgdGhlIHdhbGxzIG9mIG91ciBuYXRpdmUgY2l0eS4gQW5kIHRoYXQgd2hpY2ggZm9yIHRoZSByZXN0IGlzIGFuIGFzc3VhZ2VtZW50IG9mIGFsbCBtaXNmb3J0dW5lIGFuZCBtaXNlcnksIG5hbWVseSBwcmF5ZXIgdG8gdGhlIGdvZHMsIGhhcyBiZWNvbWUgZm9yIHVzIG1vc3QgaW1wcmFjdGljYWJsZTsgZm9yIHdlIGNhbm5vdCBhc2sgZnJvbSB0aGUgZ29kcyBib3RoIHZpY3RvcnkgZm9yIG91ciBjb3VudHJ5IGFuZCBhdCB0aGUgc2FtZSB0aW1lIHNhZmV0eSBmb3IgdGhlZSwgYnV0IHRoYXQgd2hpY2ggYW55IG9uZSBvZiBvdXIgZm9lcyBtaWdodCBpbXByZWNhdGUgdXBvbiB1cyBhcyBhIGN1cnNlLCB0aGlzIG11c3QgYmUgdGhlIGJ1cmRlbiBvZiBvdXIgcHJheWVycy4gCgkJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aHkgd2lmZSBhbmQgY2hpbGRyZW4gbXVzdCBuZWVkcyBiZSBkZXByaXZlZCBlaXRoZXIgb2YgdGhlaXIgY291bnRyeSBvciBvZiB0aGVlLiBBcyBmb3IgbWUsIEkgd2lsbCBub3Qgd2FpdCB0byBoYXZlIHRoZSB3YXIgZGVjaWRlIHRoaXMgaXNzdWUgZm9yIG1lIHdoaWxlIEkgbGl2ZSwgYnV0IHVubGVzcyBJIGNhbiBwZXJzdWFkZSB0aGVlIHRvIHN1YnN0aXR1dGUgZnJpZW5kc2hpcCBhbmQgY29uY29yZCBmb3IgZGlzc2Vuc2lvbiBhbmQgaG9zdGlsaXR5LCBhbmQgc28gdG8gYmVjb21lIGEgYmVuZWZhY3RvciBvZiBib3RoIHBhcnRpZXMgcmF0aGVyIHRoYW4gYSBkZXN0cm95ZXIgb2Ygb25lIG9mIHRoZW0sIHRoZW4gY29uc2lkZXIgYW5kIGJlIHdlbGwgYXNzdXJlZCB0aGF0IHRob3UgY2Fuc3Qgbm90IGFzc2FpbCB0aHkgY291bnRyeSB3aXRob3V0IGZpcnN0IHRyZWFkaW5nIHVuZGVyZm9vdCB0aGUgY29ycHNlIG9mIGhlciB3aG8gYm9yZSB0aGVlLiBGb3IgaXQgZG9lcyBub3QgYmVob292ZSBtZSB0byBhd2FpdCB0aGF0IGRheSBvbiB3aGljaCBJIHNoYWxsIGJlaG9sZCBteSBzb24gZWl0aGVyIGxlZCBpbiB0cml1bXBoIGJ5IGhpcyBmZWxsb3ctY2l0aXplbnMgb3IgdHJpdW1waGluZyBvdmVyIGhpcyBjb3VudHJ5LiAKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SWYsIHRoZW4sIEkgYXNrZWQgeW91IHRvIHNhdmUgeW91ciBjb3VudHJ5IGJ5IHJ1aW5pbmcgdGhlIFZvbHNjaWFucywgdGhlIHF1ZXN0aW9uIGJlZm9yZSB0aGVlIHdvdWxkIGJlIGEgZ3JpZXZvdXMgb25lLCBteSBzb24sIGFuZCBoYXJkIHRvIGRlY2lkZSwgc2luY2UgaXQgaXMgbmVpdGhlciBob25vdXJhYmxlIGZvciBhIG1hbiB0byBkZXN0cm95IGhpcyBmZWxsb3ctY2l0aXplbnMsIG5vciBqdXN0IGZvciBoaW0gdG8gYmV0cmF5IHRob3NlIHdobyBoYXZlIHB1dCB0aGVpciB0cnVzdCBpbiBoaW07IGJ1dCBhcyBpdCBpcywgd2UgYXNrIG9ubHkgYSByZWxpZWYgZnJvbSBldmlscywgc29tZXRoaW5nIHdoaWNoIHdvdWxkIGJlIHNhbHV0YXJ5IGZvciBib3RoIHBhcnRpZXMgYWxpa2UsIGJ1dCBtb3JlIGNvbmR1Y2l2ZSB0byBmYW1lIGFuZCBob25vdXIgZm9yIHRoZSBWb2xzY2lhbnMsIGJlY2F1c2UgdGhlaXIgc3VwZXJpb3JpdHkgaW4gYXJtcyB3aWxsIGdpdmUgdGhlbSB0aGUgYXBwZWFyYW5jZSBvZiBiZXN0b3dpbmcgdGhlIGdyZWF0ZXN0IG9mIGJsZXNzaW5ncywgbmFtZWx5IHBlYWNlIGFuZCBmcmllbmRzaGlwLCBhbHRob3VnaCB0aGV5IGdldCB0aGVzZSBubyBsZXNzIHRoZW1zZWx2ZXMuIElmIHRoZXNlIGJsZXNzaW5ncyBhcmUgcmVhbGl6ZWQsIGl0IHdpbGwgYmUgY2hpZWZseSBkdWUgdG8gdGhlZTsgaWYgdGhleSBhcmUgbm90LCB0aGVuIHRob3UgYWxvbmUgd2lsdCBiZWFyIHRoZSBibGFtZSBmcm9tIGJvdGggbmF0aW9ucy4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggdGhlIGlzc3VlcyBvZiB3YXIgYXJlIG9ic2N1cmUsIHRoaXMgaXMgbWFuaWZlc3QsIHRoYXQgaWYgdmljdG9yaW91cywgdGhvdSB3aWx0IG9ubHkgYmUgdGh5IGNvdW50cnkncyBkZXN0cm95aW5nIGRlbW9uLCBhbmQgaWYgZGVmZWF0ZWQsIHRoZSB3b3JsZCB3aWxsIHRoaW5rIHRoYXQsIHRvIHNhdGlzZnkgdGh5IHdyYXRoLCB0aG91IGRpZHN0IGJyaW5nIGRvd24gdGhlIGdyZWF0ZXN0IGNhbGFtaXRpZXMgdXBvbiBtZW4gd2hvIHdlcmUgdGh5IGJlbmVmYWN0b3JzIGFuZCBmcmllbmRzLjwvcT4KCQkJICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgYmUgc3VyZSB0aGF0IHdlIHdobyBjb21lIHRvIHRoZWUgYXJlIG9mIGFsbCB3b21lbiBtb3N0IHVuaGFwcHksIHNpbmNlIGZvcnR1bmUgaGFzIG1hZGUgdGhlIHNpZ2h0IHdoaWNoIHNob3VsZCBoYXZlIGJlZW4gbW9zdCBzd2VldCwgbW9zdCBkcmVhZGZ1bCBmb3IgdXMsIGFzIEkgYmVob2xkIG15IHNvbiwgYW5kIHRoaXMgd2lmZSBvZiB0aGluZSBoZXIgaHVzYmFuZCwgZW5jYW1wZWQgYWdhaW5zdCB0aGUgd2FsbHMgb2Ygb3VyIG5hdGl2ZSBjaXR5LiBBbmQgdGhhdCB3aGljaCBmb3IgdGhlIHJlc3QgaXMgYW4gYXNzdWFnZW1lbnQgb2YgYWxsIG1pc2ZvcnR1bmUgYW5kIG1pc2VyeSwgbmFtZWx5IHByYXllciB0byB0aGUgZ29kcywgaGFzIGJlY29tZSBmb3IgdXMgbW9zdCBpbXByYWN0aWNhYmxlOyBmb3Igd2UgY2Fubm90IGFzayBmcm9tIHRoZSBnb2RzIGJvdGggdmljdG9yeSBmb3Igb3VyIGNvdW50cnkgYW5kIGF0IHRoZSBzYW1lIHRpbWUgc2FmZXR5IGZvciB0aGVlLCBidXQgdGhhdCB3aGljaCBhbnkgb25lIG9mIG91ciBmb2VzIG1pZ2h0IGltcHJlY2F0ZSB1cG9uIHVzIGFzIGEgY3Vyc2UsIHRoaXMgbXVzdCBiZSB0aGUgYnVyZGVuIG9mIG91ciBwcmF5ZXJzLiAKCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aHkgd2lmZSBhbmQgY2hpbGRyZW4gbXVzdCBuZWVkcyBiZSBkZXByaXZlZCBlaXRoZXIgb2YgdGhlaXIgY291bnRyeSBvciBvZiB0aGVlLiBBcyBmb3IgbWUsIEkgd2lsbCBub3Qgd2FpdCB0byBoYXZlIHRoZSB3YXIgZGVjaWRlIHRoaXMgaXNzdWUgZm9yIG1lIHdoaWxlIEkgbGl2ZSwgYnV0IHVubGVzcyBJIGNhbiBwZXJzdWFkZSB0aGVlIHRvIHN1YnN0aXR1dGUgZnJpZW5kc2hpcCBhbmQgY29uY29yZCBmb3IgZGlzc2Vuc2lvbiBhbmQgaG9zdGlsaXR5LCBhbmQgc28gdG8gYmVjb21lIGEgYmVuZWZhY3RvciBvZiBib3RoIHBhcnRpZXMgcmF0aGVyIHRoYW4gYSBkZXN0cm95ZXIgb2Ygb25lIG9mIHRoZW0sIHRoZW4gY29uc2lkZXIgYW5kIGJlIHdlbGwgYXNzdXJlZCB0aGF0IHRob3UgY2Fuc3Qgbm90IGFzc2FpbCB0aHkgY291bnRyeSB3aXRob3V0IGZpcnN0IHRyZWFkaW5nIHVuZGVyZm9vdCB0aGUgY29ycHNlIG9mIGhlciB3aG8gYm9yZSB0aGVlLiBGb3IgaXQgZG9lcyBub3QgYmVob292ZSBtZSB0byBhd2FpdCB0aGF0IGRheSBvbiB3aGljaCBJIHNoYWxsIGJlaG9sZCBteSBzb24gZWl0aGVyIGxlZCBpbiB0cml1bXBoIGJ5IGhpcyBmZWxsb3ctY2l0aXplbnMgb3IgdHJpdW1waGluZyBvdmVyIGhpcyBjb3VudHJ5LiAKCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPklmLCB0aGVuLCBJIGFza2VkIHlvdSB0byBzYXZlIHlvdXIgY291bnRyeSBieSBydWluaW5nIHRoZSBWb2xzY2lhbnMsIHRoZSBxdWVzdGlvbiBiZWZvcmUgdGhlZSB3b3VsZCBiZSBhIGdyaWV2b3VzIG9uZSwgbXkgc29uLCBhbmQgaGFyZCB0byBkZWNpZGUsIHNpbmNlIGl0IGlzIG5laXRoZXIgaG9ub3VyYWJsZSBmb3IgYSBtYW4gdG8gZGVzdHJveSBoaXMgZmVsbG93LWNpdGl6ZW5zLCBub3IganVzdCBmb3IgaGltIHRvIGJldHJheSB0aG9zZSB3aG8gaGF2ZSBwdXQgdGhlaXIgdHJ1c3QgaW4gaGltOyBidXQgYXMgaXQgaXMsIHdlIGFzayBvbmx5IGEgcmVsaWVmIGZyb20gZXZpbHMsIHNvbWV0aGluZyB3aGljaCB3b3VsZCBiZSBzYWx1dGFyeSBmb3IgYm90aCBwYXJ0aWVzIGFsaWtlLCBidXQgbW9yZSBjb25kdWNpdmUgdG8gZmFtZSBhbmQgaG9ub3VyIGZvciB0aGUgVm9sc2NpYW5zLCBiZWNhdXNlIHRoZWlyIHN1cGVyaW9yaXR5IGluIGFybXMgd2lsbCBnaXZlIHRoZW0gdGhlIGFwcGVhcmFuY2Ugb2YgYmVzdG93aW5nIHRoZSBncmVhdGVzdCBvZiBibGVzc2luZ3MsIG5hbWVseSBwZWFjZSBhbmQgZnJpZW5kc2hpcCwgYWx0aG91Z2ggdGhleSBnZXQgdGhlc2Ugbm8gbGVzcyB0aGVtc2VsdmVzLiBJZiB0aGVzZSBibGVzc2luZ3MgYXJlIHJlYWxpemVkLCBpdCB3aWxsIGJlIGNoaWVmbHkgZHVlIHRvIHRoZWU7IGlmIHRoZXkgYXJlIG5vdCwgdGhlbiB0aG91IGFsb25lIHdpbHQgYmVhciB0aGUgYmxhbWUgZnJvbSBib3RoIG5hdGlvbnMuIAoJCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggdGhlIGlzc3VlcyBvZiB3YXIgYXJlIG9ic2N1cmUsIHRoaXMgaXMgbWFuaWZlc3QsIHRoYXQgaWYgdmljdG9yaW91cywgdGhvdSB3aWx0IG9ubHkgYmUgdGh5IGNvdW50cnkncyBkZXN0cm95aW5nIGRlbW9uLCBhbmQgaWYgZGVmZWF0ZWQsIHRoZSB3b3JsZCB3aWxsIHRoaW5rIHRoYXQsIHRvIHNhdGlzZnkgdGh5IHdyYXRoLCB0aG91IGRpZHN0IGJyaW5nIGRvd24gdGhlIGdyZWF0ZXN0IGNhbGFtaXRpZXMgdXBvbiBtZW4gd2hvIHdlcmUgdGh5IGJlbmVmYWN0b3JzIGFuZCBmcmllbmRzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIFZvbHVtbmlhIHdhcyBzYXlpbmcgdGhpcywgTWFyY2l1cyBsaXN0ZW5lZCB3aXRob3V0IG1ha2luZyBhbnkgYW5zd2VyLCBhbmQgYWZ0ZXIgc2hlIGhhZCBjZWFzZWQgYWxzbywgaGUgc3Rvb2QgYSBsb25nIHRpbWUgaW4gc2lsZW5jZS4gVm9sdW1uaWEgdGhlcmVmb3JlIGJlZ2FuIG9uY2UgbW9yZTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHkgYXJ0IHRob3Ugc2lsZW50LCBteSBzb24/IElzIGl0IHJpZ2h0IHRvIHlpZWxkIGV2ZXJ5dGhpbmcgdG8gd3JhdGggYW5kIHJlc2VudG1lbnQsIGJ1dCB3cm9uZyB0byBncmF0aWZ5IGEgbW90aGVyIGluIHN1Y2ggYSBwcmF5ZXIgYXMgdGhpcz8gCgkJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9yIGlzIHRoZSByZW1lbWJyYW5jZSBvZiBoaXMgd3JvbmdzIGJlY29taW5nIHRvIGEgZ3JlYXQgbWFuLCB3aGlsZSB0aGUgcmVtZW1icmFuY2UsIHdpdGggcmV2ZXJlbmNlIGFuZCBob25vdXIsIG9mIHRoZSBiZW5lZml0cyB3aGljaCBjaGlsZHJlbiBoYXZlIHJlY2VpdmVkIGZyb20gdGhlaXIgcGFyZW50cyBpcyBub3QgdGhlIGR1dHkgb2YgYSBncmVhdCBhbmQgZ29vZCBtYW4/IFN1cmVseSBmb3Igbm8gbWFuIHdlcmUgaXQgbW9yZSBzZWVtbHkgdG8gY2hlcmlzaCBncmF0aXR1ZGUgdGhhbiBmb3IgdGhlZSwgd2hvIGRvc3Qgc28gYml0dGVybHkgcHJvY2VlZCBhZ2FpbnN0IGluZ3JhdGl0dWRlLiAKCQkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCwgYWx0aG91Z2ggdGhvdSBoYXN0IGFscmVhZHkgcHVuaXNoZWQgdGh5IGNvdW50cnkgc2V2ZXJlbHksIHRob3UgaGFzdCBub3Qgc2hvd24gdGh5IG1vdGhlciBhbnkgZ3JhdGl0dWRlLiBJdCB3ZXJlLCB0aGVyZWZvcmUsIGEgbW9zdCBwaW91cyB0aGluZyBpbiB0aGVlIHRvIGdyYW50IG1lLCB3aXRob3V0IGFueSBjb21wdWxzaW9uLCBzbyB3b3J0aHkgYW5kIGp1c3QgYSByZXF1ZXN0IGFzIG1pbmU7IGJ1dCBzaW5jZSBJIGNhbm5vdCBwZXJzdWFkZSB0aGVlLCB3aHkgc2hvdWxkIEkgc3BhcmUgbXkgbGFzdCByZXNvdXJjZT88L3E+IEFuZCB3aXRoIHRoZXNlIHdvcmRzIHNoZSB0aHJldyBoZXJzZWxmIGF0IGhpcyBmZWV0LCB0b2dldGhlciB3aXRoIGhpcyB3aWZlIGFuZCBjaGlsZHJlbi4KCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCVRoZW4gTWFyY2l1cywgY3J5aW5nIG91dCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgaGFzdCB0aG91IGRvbmUgdG8gbWUsIG15IG1vdGhlciE8L3E+IGxpZnRlZCBoZXIgdXAsIGFuZCBwcmVzc2luZyBoZXIgcmlnaHQgaGFuZCB3YXJtbHksIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBhcnQgdmljdG9yaW91cywgYW5kIHRoeSB2aWN0b3J5IG1lYW5zIGdvb2QgZm9ydHVuZSB0byBteSBjb3VudHJ5LCBidXQgZGVhdGggdG8gbWU7IGZvciBJIHNoYWxsIHdpdGhkcmF3IHZhbnF1aXNoZWQsIHRob3VnaCBieSB0aGVlIGFsb25lLjwvcT4gV2hlbiBoZSBoYWQgc2FpZCB0aGlzLCBhbmQgaGFkIGhlbGQgYSBsaXR0bGUgcHJpdmF0ZSBjb25mZXJlbmNlIHdpdGggaGlzIG1vdGhlciBhbmQgaGlzIHdpZmUsIGhlIHNlbnQgdGhlbSBiYWNrIGFnYWluIHRvIFJvbWUsIGFzIHRoZXkgZGVzaXJlZCwgYW5kIG9uIHRoZSBuZXh0IG1vcm5pbmcgbGVkIGF3YXkgaGlzIFZvbHNjaWFucywgd2hvIHdlcmUgbm90IGFsbCBhZmZlY3RlZCBpbiB0aGUgc2FtZSB3YXkgbm9yIGVxdWFsbHkgcGxlYXNlZCBieSB3aGF0IGhhZCBoYXBwZW5lZC4KCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igc29tZSBmb3VuZCBmYXVsdCBib3RoIHdpdGggaGltIGFuZCB3aXRoIHdoYXQgaGUgaGFkIGRvbmU7IGJ1dCBvdGhlcnMsIHdobyB3ZXJlIGZhdm91cmFibHkgZGlzcG9zZWQgdG93YXJkcyBhIHBlYWNlZnVsIHNldHRsZW1lbnQgb2YgdGhlIGRpc3B1dGUsIHdpdGggbmVpdGhlcjsgd2hpbGUgc29tZSwgdGhvdWdoIGRpc3BsZWFzZWQgd2l0aCBoaXMgcHJvY2VlZGluZ3MsIG5ldmVydGhlbGVzcyBjb3VsZCBub3QgbG9vayB1cG9uIE1hcmNpdXMgYXMgYSBiYWQgbWFuLCBidXQgdGhvdWdodCBpdCBwYXJkb25hYmxlIGluIGhpbSB0byBiZSBicm9rZW4gZG93biBieSBzdWNoIHN0cm9uZyBjb21wdWxzaW9ucy4gTm8gb25lLCBob3dldmVyLCBvcHBvc2VkIGhpbSwgYnV0IGFsbCBmb2xsb3dlZCBoaW0gb2JlZGllbnRseSwgdGhvdWdoIHJhdGhlciBvdXQgb2YgYWRtaXJhdGlvbiBmb3IgaGlzIHZpcnR1ZSB0aGFuIHJlZ2FyZCBmb3IgaGlzIGF1dGhvcml0eS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Db21wYXJlIExpdnkncyBzdG9yeSBvZiB0aGlzIGludGVydmlldyBhbmQgaXRzIHJlc3VsdHMgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40MC4zIiB2YWxpZD0ieWVzIj4oaWkuIDQwLCAzLTkpLjwvYmlibD4gUGx1dGFyY2ggYWdyZWVzIHJhdGhlciB3aXRoIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMzkiPkRpb255c2l1cywgdmlpaS4gMzktNTQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgVm9sdW1uaWEgd2FzIHNheWluZyB0aGlzLCBNYXJjaXVzIGxpc3RlbmVkIHdpdGhvdXQgbWFraW5nIGFueSBhbnN3ZXIsIGFuZCBhZnRlciBzaGUgaGFkIGNlYXNlZCBhbHNvLCBoZSBzdG9vZCBhIGxvbmcgdGltZSBpbiBzaWxlbmNlLiBWb2x1bW5pYSB0aGVyZWZvcmUgYmVnYW4gb25jZSBtb3JlOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5IGFydCB0aG91IHNpbGVudCwgbXkgc29uPyBJcyBpdCByaWdodCB0byB5aWVsZCBldmVyeXRoaW5nIHRvIHdyYXRoIGFuZCByZXNlbnRtZW50LCBidXQgd3JvbmcgdG8gZ3JhdGlmeSBhIG1vdGhlciBpbiBzdWNoIGEgcHJheWVyIGFzIHRoaXM/IAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9yIGlzIHRoZSByZW1lbWJyYW5jZSBvZiBoaXMgd3JvbmdzIGJlY29taW5nIHRvIGEgZ3JlYXQgbWFuLCB3aGlsZSB0aGUgcmVtZW1icmFuY2UsIHdpdGggcmV2ZXJlbmNlIGFuZCBob25vdXIsIG9mIHRoZSBiZW5lZml0cyB3aGljaCBjaGlsZHJlbiBoYXZlIHJlY2VpdmVkIGZyb20gdGhlaXIgcGFyZW50cyBpcyBub3QgdGhlIGR1dHkgb2YgYSBncmVhdCBhbmQgZ29vZCBtYW4/IFN1cmVseSBmb3Igbm8gbWFuIHdlcmUgaXQgbW9yZSBzZWVtbHkgdG8gY2hlcmlzaCBncmF0aXR1ZGUgdGhhbiBmb3IgdGhlZSwgd2hvIGRvc3Qgc28gYml0dGVybHkgcHJvY2VlZCBhZ2FpbnN0IGluZ3JhdGl0dWRlLiAKCQkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCwgYWx0aG91Z2ggdGhvdSBoYXN0IGFscmVhZHkgcHVuaXNoZWQgdGh5IGNvdW50cnkgc2V2ZXJlbHksIHRob3UgaGFzdCBub3Qgc2hvd24gdGh5IG1vdGhlciBhbnkgZ3JhdGl0dWRlLiBJdCB3ZXJlLCB0aGVyZWZvcmUsIGEgbW9zdCBwaW91cyB0aGluZyBpbiB0aGVlIHRvIGdyYW50IG1lLCB3aXRob3V0IGFueSBjb21wdWxzaW9uLCBzbyB3b3J0aHkgYW5kIGp1c3QgYSByZXF1ZXN0IGFzIG1pbmU7IGJ1dCBzaW5jZSBJIGNhbm5vdCBwZXJzdWFkZSB0aGVlLCB3aHkgc2hvdWxkIEkgc3BhcmUgbXkgbGFzdCByZXNvdXJjZT88L3E+IEFuZCB3aXRoIHRoZXNlIHdvcmRzIHNoZSB0aHJldyBoZXJzZWxmIGF0IGhpcyBmZWV0LCB0b2dldGhlciB3aXRoIGhpcyB3aWZlIGFuZCBjaGlsZHJlbi4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9yIGlzIHRoZSByZW1lbWJyYW5jZSBvZiBoaXMgd3JvbmdzIGJlY29taW5nIHRvIGEgZ3JlYXQgbWFuLCB3aGlsZSB0aGUgcmVtZW1icmFuY2UsIHdpdGggcmV2ZXJlbmNlIGFuZCBob25vdXIsIG9mIHRoZSBiZW5lZml0cyB3aGljaCBjaGlsZHJlbiBoYXZlIHJlY2VpdmVkIGZyb20gdGhlaXIgcGFyZW50cyBpcyBub3QgdGhlIGR1dHkgb2YgYSBncmVhdCBhbmQgZ29vZCBtYW4/IFN1cmVseSBmb3Igbm8gbWFuIHdlcmUgaXQgbW9yZSBzZWVtbHkgdG8gY2hlcmlzaCBncmF0aXR1ZGUgdGhhbiBmb3IgdGhlZSwgd2hvIGRvc3Qgc28gYml0dGVybHkgcHJvY2VlZCBhZ2FpbnN0IGluZ3JhdGl0dWRlLiAKCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIGFsdGhvdWdoIHRob3UgaGFzdCBhbHJlYWR5IHB1bmlzaGVkIHRoeSBjb3VudHJ5IHNldmVyZWx5LCB0aG91IGhhc3Qgbm90IHNob3duIHRoeSBtb3RoZXIgYW55IGdyYXRpdHVkZS4gSXQgd2VyZSwgdGhlcmVmb3JlLCBhIG1vc3QgcGlvdXMgdGhpbmcgaW4gdGhlZSB0byBncmFudCBtZSwgd2l0aG91dCBhbnkgY29tcHVsc2lvbiwgc28gd29ydGh5IGFuZCBqdXN0IGEgcmVxdWVzdCBhcyBtaW5lOyBidXQgc2luY2UgSSBjYW5ub3QgcGVyc3VhZGUgdGhlZSwgd2h5IHNob3VsZCBJIHNwYXJlIG15IGxhc3QgcmVzb3VyY2U/PC90cmFuc2xhdGlvbj4="
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJVGhlbiBNYXJjaXVzLCBjcnlpbmcgb3V0IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGhhc3QgdGhvdSBkb25lIHRvIG1lLCBteSBtb3RoZXIhPC9xPiBsaWZ0ZWQgaGVyIHVwLCBhbmQgcHJlc3NpbmcgaGVyIHJpZ2h0IGhhbmQgd2FybWx5LCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBhcnQgdmljdG9yaW91cywgYW5kIHRoeSB2aWN0b3J5IG1lYW5zIGdvb2QgZm9ydHVuZSB0byBteSBjb3VudHJ5LCBidXQgZGVhdGggdG8gbWU7IGZvciBJIHNoYWxsIHdpdGhkcmF3IHZhbnF1aXNoZWQsIHRob3VnaCBieSB0aGVlIGFsb25lLjwvcT4gV2hlbiBoZSBoYWQgc2FpZCB0aGlzLCBhbmQgaGFkIGhlbGQgYSBsaXR0bGUgcHJpdmF0ZSBjb25mZXJlbmNlIHdpdGggaGlzIG1vdGhlciBhbmQgaGlzIHdpZmUsIGhlIHNlbnQgdGhlbSBiYWNrIGFnYWluIHRvIFJvbWUsIGFzIHRoZXkgZGVzaXJlZCwgYW5kIG9uIHRoZSBuZXh0IG1vcm5pbmcgbGVkIGF3YXkgaGlzIFZvbHNjaWFucywgd2hvIHdlcmUgbm90IGFsbCBhZmZlY3RlZCBpbiB0aGUgc2FtZSB3YXkgbm9yIGVxdWFsbHkgcGxlYXNlZCBieSB3aGF0IGhhZCBoYXBwZW5lZC4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBzb21lIGZvdW5kIGZhdWx0IGJvdGggd2l0aCBoaW0gYW5kIHdpdGggd2hhdCBoZSBoYWQgZG9uZTsgYnV0IG90aGVycywgd2hvIHdlcmUgZmF2b3VyYWJseSBkaXNwb3NlZCB0b3dhcmRzIGEgcGVhY2VmdWwgc2V0dGxlbWVudCBvZiB0aGUgZGlzcHV0ZSwgd2l0aCBuZWl0aGVyOyB3aGlsZSBzb21lLCB0aG91Z2ggZGlzcGxlYXNlZCB3aXRoIGhpcyBwcm9jZWVkaW5ncywgbmV2ZXJ0aGVsZXNzIGNvdWxkIG5vdCBsb29rIHVwb24gTWFyY2l1cyBhcyBhIGJhZCBtYW4sIGJ1dCB0aG91Z2h0IGl0IHBhcmRvbmFibGUgaW4gaGltIHRvIGJlIGJyb2tlbiBkb3duIGJ5IHN1Y2ggc3Ryb25nIGNvbXB1bHNpb25zLiBObyBvbmUsIGhvd2V2ZXIsIG9wcG9zZWQgaGltLCBidXQgYWxsIGZvbGxvd2VkIGhpbSBvYmVkaWVudGx5LCB0aG91Z2ggcmF0aGVyIG91dCBvZiBhZG1pcmF0aW9uIGZvciBoaXMgdmlydHVlIHRoYW4gcmVnYXJkIGZvciBoaXMgYXV0aG9yaXR5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q29tcGFyZSBMaXZ5J3Mgc3Rvcnkgb2YgdGhpcyBpbnRlcnZpZXcgYW5kIGl0cyByZXN1bHRzIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40MC4zIiB2YWxpZD0ieWVzIj4oaWkuIDQwLCAzLTkpLjwvYmlibD4gUGx1dGFyY2ggYWdyZWVzIHJhdGhlciB3aXRoIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC4zOSI+RGlvbnlzaXVzLCB2aWlpLiAzOS01NC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjMiIHZhbGlkPSJ5ZXMiPihpaS4gNDAsIDMtOSkuPC9iaWJsPiBQbHV0YXJjaCBhZ3JlZXMgcmF0aGVyIHdpdGggPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjM5Ij5EaW9ueXNpdXMsIHZpaWkuIDM5LTU0LjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBSb21hbiBwZW9wbGUgc2hvd2VkIG1vcmUgcGxhaW5seSwgd2hlbiB0aGV5IHdlcmUgc2V0IGZyZWUgZnJvbSB0aGUgd2FyLCB0aGUgZ3JlYXRuZXNzIG9mIHRoZWlyIGZlYXIgYW5kIHBlcmlsIHdoaWxlIGl0IGxhc3RlZC4gRm9yIGFzIHNvb24gYXMgdGhvc2Ugd2hvIG1hbm5lZCB0aGUgd2FsbHMgZGVzY3JpZWQgdGhlIFZvbHNjaWFucyBkcmF3aW5nIHRoZWlyIGZvcmNlcyBvZmYsIGV2ZXJ5IHRlbXBsZSB3YXMgdGhyb3duIG9wZW4sIGFuZCB0aGUgcGVvcGxlIGNyb3duZWQgdGhlbXNlbHZlcyB3aXRoIGdhcmxhbmRzIGFuZCBvZmZlcmVkIHNhY3JpZmljZXMgYXMgaWYgZm9yIHZpY3RvcnkuIEJ1dCB0aGUgam95IG9mIHRoZSBjaXR5IHdhcyBtb3N0IGFwcGFyZW50IGluIHRoZSBob25vdXIgYW5kIGxvdmluZyBmYXZvdXIgd2hpY2ggYm90aCB0aGUgc2VuYXRlIGFuZCB0aGUgd2hvbGUgcGVvcGxlIGJlc3Rvd2VkIHVwb24gdGhlIHdvbWVuLCBkZWNsYXJpbmcgdGhlaXIgYmVsaWVmIHRoYXQgdGhlIGNpdHkncyBzYWx2YXRpb24gd2FzIG1hbmlmZXN0bHkgZHVlIHRvIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZSBzZW5hdGUgcGFzc2VkIGEgZGVjcmVlIHRoYXQgd2hhdHNvZXZlciB0aGV5IGFza2VkIGZvciB0aGVtc2VsdmVzIGluIHRoZSB3YXkgb2YgaG9ub3VyIG9yIGZhdm91ciwgc2hvdWxkIGJlIGZ1cm5pc2hlZCBhbmQgZG9uZSBmb3IgdGhlbSBieSB0aGUgbWFnaXN0cmF0ZXMsIHRoZXkgYXNrZWQgZm9yIG5vdGhpbmcgZWxzZSBiZXNpZGVzIHRoZSBlcmVjdGlvbiBvZiBhIHRlbXBsZSBvZiBXb21lbidzIEZvcnR1bmUsIHRoZSBleHBlbnNlIG9mIHdoaWNoIHRoZXkgb2ZmZXJlZCB0byBjb250cmlidXRlIG9mIHRoZW1zZWx2ZXMsIGlmIHRoZSBjaXR5IHdvdWxkIHVuZGVydGFrZSB0byBwZXJmb3JtLCBhdCB0aGUgcHVibGljIGNoYXJnZSwgYWxsIHRoZSBzYWNyaWZpY2VzIGFuZCBob25vdXJzLCBzdWNoIGFzIGFyZSBkdWUgdG8gdGhlIGdvZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgY29tbWVuZGVkIHRoZWlyIHB1YmxpYyBzcGlyaXQsIGFuZCBlcmVjdGVkIHRoZSB0ZW1wbGUgYW5kIGl0cyBpbWFnZSBhdCB0aGUgcHVibGljIGNoYXJnZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi48YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjExIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNDAsMTEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ1dCB0aGV5IG5vbmUgdGhlIGxlc3MgY29udHJpYnV0ZWQgbW9uZXkgdGhlbXNlbHZlcyBhbmQgc2V0IHVwIGEgc2Vjb25kIGltYWdlIG9mIHRoZSBnb2RkZXNzLCBhbmQgdGhpcywgdGhlIFJvbWFucyBzYXksIGFzIGl0IHdhcyBwbGFjZWQgaW4gdGhlIHRlbXBsZSwgdXR0ZXJlZCBzb21lIHN1Y2ggd29yZHMgYXMgdGhlc2U6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RGVhciB0byB0aGUgZ29kcywgTyB3b21lbiwgaXMgeW91ciBwaW91cyBnaWZ0IG9mIG1lLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguNTYiPkRpb255c2l1cywgdmlpaS4gNTYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBSb21hbiBwZW9wbGUgc2hvd2VkIG1vcmUgcGxhaW5seSwgd2hlbiB0aGV5IHdlcmUgc2V0IGZyZWUgZnJvbSB0aGUgd2FyLCB0aGUgZ3JlYXRuZXNzIG9mIHRoZWlyIGZlYXIgYW5kIHBlcmlsIHdoaWxlIGl0IGxhc3RlZC4gRm9yIGFzIHNvb24gYXMgdGhvc2Ugd2hvIG1hbm5lZCB0aGUgd2FsbHMgZGVzY3JpZWQgdGhlIFZvbHNjaWFucyBkcmF3aW5nIHRoZWlyIGZvcmNlcyBvZmYsIGV2ZXJ5IHRlbXBsZSB3YXMgdGhyb3duIG9wZW4sIGFuZCB0aGUgcGVvcGxlIGNyb3duZWQgdGhlbXNlbHZlcyB3aXRoIGdhcmxhbmRzIGFuZCBvZmZlcmVkIHNhY3JpZmljZXMgYXMgaWYgZm9yIHZpY3RvcnkuIEJ1dCB0aGUgam95IG9mIHRoZSBjaXR5IHdhcyBtb3N0IGFwcGFyZW50IGluIHRoZSBob25vdXIgYW5kIGxvdmluZyBmYXZvdXIgd2hpY2ggYm90aCB0aGUgc2VuYXRlIGFuZCB0aGUgd2hvbGUgcGVvcGxlIGJlc3Rvd2VkIHVwb24gdGhlIHdvbWVuLCBkZWNsYXJpbmcgdGhlaXIgYmVsaWVmIHRoYXQgdGhlIGNpdHkncyBzYWx2YXRpb24gd2FzIG1hbmlmZXN0bHkgZHVlIHRvIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZSBzZW5hdGUgcGFzc2VkIGEgZGVjcmVlIHRoYXQgd2hhdHNvZXZlciB0aGV5IGFza2VkIGZvciB0aGVtc2VsdmVzIGluIHRoZSB3YXkgb2YgaG9ub3VyIG9yIGZhdm91ciwgc2hvdWxkIGJlIGZ1cm5pc2hlZCBhbmQgZG9uZSBmb3IgdGhlbSBieSB0aGUgbWFnaXN0cmF0ZXMsIHRoZXkgYXNrZWQgZm9yIG5vdGhpbmcgZWxzZSBiZXNpZGVzIHRoZSBlcmVjdGlvbiBvZiBhIHRlbXBsZSBvZiBXb21lbidzIEZvcnR1bmUsIHRoZSBleHBlbnNlIG9mIHdoaWNoIHRoZXkgb2ZmZXJlZCB0byBjb250cmlidXRlIG9mIHRoZW1zZWx2ZXMsIGlmIHRoZSBjaXR5IHdvdWxkIHVuZGVydGFrZSB0byBwZXJmb3JtLCBhdCB0aGUgcHVibGljIGNoYXJnZSwgYWxsIHRoZSBzYWNyaWZpY2VzIGFuZCBob25vdXJzLCBzdWNoIGFzIGFyZSBkdWUgdG8gdGhlIGdvZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgY29tbWVuZGVkIHRoZWlyIHB1YmxpYyBzcGlyaXQsIGFuZCBlcmVjdGVkIHRoZSB0ZW1wbGUgYW5kIGl0cyBpbWFnZSBhdCB0aGUgcHVibGljIGNoYXJnZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40MC4xMSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDQwLDExLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBidXQgdGhleSBub25lIHRoZSBsZXNzIGNvbnRyaWJ1dGVkIG1vbmV5IHRoZW1zZWx2ZXMgYW5kIHNldCB1cCBhIHNlY29uZCBpbWFnZSBvZiB0aGUgZ29kZGVzcywgYW5kIHRoaXMsIHRoZSBSb21hbnMgc2F5LCBhcyBpdCB3YXMgcGxhY2VkIGluIHRoZSB0ZW1wbGUsIHV0dGVyZWQgc29tZSBzdWNoIHdvcmRzIGFzIHRoZXNlOiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40MC4xMSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDQwLDExLjwvYmlibD4KICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EZWFyIHRvIHRoZSBnb2RzLCBPIHdvbWVuLCBpcyB5b3VyIHBpb3VzIGdpZnQgb2YgbWUuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguNTYiPkRpb255c2l1cywgdmlpaS4gNTYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC41NiI+RGlvbnlzaXVzLCB2aWlpLiA1Ni48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCVRoZXNlIHdvcmRzIHdlcmUgYWN0dWFsbHkgdXR0ZXJlZCB0d2ljZSwgYXMgdGhlIHN0b3J5IHJ1bnMsIHdoaWNoIHdvdWxkIGhhdmUgdXMgYmVsaWV2ZSB3aGF0IGlzIGRpZmZpY3VsdCBvZiBiZWxpZWYgYW5kIHByb2JhYmx5IG5ldmVyIGhhcHBlbmVkLiBGb3IgdGhhdCBzdGF0dWVzIGhhdmUgYXBwZWFyZWQgdG8gc3dlYXQsIGFuZCBzaGVkIHRlYXJzLCBhbmQgZXh1ZGUgc29tZXRoaW5nIGxpa2UgZHJvcHMgb2YgYmxvb2QsIGlzIG5vdCBpbXBvc3NpYmxlOyBzaW5jZSB3b29kIGFuZCBzdG9uZSBvZnRlbiBjb250cmFjdCBhIG1vdWxkIHdoaWNoIGlzIHByb2R1Y3RpdmUgb2YgbW9pc3R1cmUsIGFuZCBjb3ZlciB0aGVtc2VsdmVzIHdpdGggbWFueSBjb2xvdXJzLCBhbmQgcmVjZWl2ZSB0aW50cyBmcm9tIHRoZSBhdG1vc3BoZXJlOyBhbmQgdGhlcmUgaXMgbm90aGluZyBpbiB0aGUgd2F5IG9mIGJlbGlldmluZyB0aGF0IHRoZSBEZWl0eSB1c2VzIHRoZXNlIHBoZW5vbWVuYSBzb21ldGltZXMgYXMgc2lnbnMgYW5kIHBvcnRlbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBwb3NzaWJsZSBhbHNvIHRoYXQgc3RhdHVlcyBtYXkgZW1pdCBhIG5vaXNlIGxpa2UgYSBtb2FuIG9yIGEgZ3JvYW4sIGJ5IHJlYXNvbiBvZiBhIGZyYWN0dXJlIG9yIGEgcnVwdHVyZSwgd2hpY2ggaXMgbW9yZSB2aW9sZW50IGlmIGl0IHRha2VzIHBsYWNlIGluIHRoZSBpbnRlcmlvci4gQnV0IHRoYXQgYXJ0aWN1bGF0ZSBzcGVlY2gsIGFuZCBsYW5ndWFnZSBzbyBjbGVhciBhbmQgYWJ1bmRhbnQgYW5kIHByZWNpc2UsIHNob3VsZCBwcm9jZWVkIGZyb20gYSBsaWZlbGVzcyB0aGluZywgaXMgYWx0b2dldGhlciBpbXBvc3NpYmxlOyBzaW5jZSBub3QgZXZlbiB0aGUgc291bCBvZiBtYW4sIG9yIHRoZSBEZWl0eSwgd2l0aG91dCBhIGJvZHkgZHVseSBvcmdhbml6ZWQgYW5kIGZpdHRlZCB3aXRoIHZvY2FsIHBhcnRzLCBoYXMgZXZlciBzcG9rZW4gYW5kIGNvbnZlcnNlZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZXJlIGhpc3RvcnkgZm9yY2VzIG91ciBhc3NlbnQgd2l0aCBudW1lcm91cyBhbmQgY3JlZGlibGUgd2l0bmVzc2VzLCB3ZSBtdXN0IGNvbmNsdWRlIHRoYXQgYW4gZXhwZXJpZW5jZSBkaWZmZXJlbnQgZnJvbSB0aGF0IG9mIHNlbnNhdGlvbiBhcmlzZXMgaW4gdGhlIGltYWdpbmF0aXZlIHBhcnQgb2YgdGhlIHNvdWwsIGFuZCBwZXJzdWFkZXMgbWVuIHRvIHRoaW5rIGl0IHNlbnNhdGlvbjsgYXMsIGZvciBpbnN0YW5jZSwgaW4gc2xlZXAsIHdoZW4gd2UgdGhpbmsgd2Ugc2VlIGFuZCBoZWFyLCBhbHRob3VnaCB3ZSBuZWl0aGVyIHNlZSBub3IgaGVhci4gSG93ZXZlciwgdGhvc2Ugd2hvIGNoZXJpc2ggc3Ryb25nIGZlZWxpbmdzIG9mIGdvb2Qtd2lsbCBhbmQgYWZmZWN0aW9uIGZvciB0aGUgRGVpdHksIGFuZCBhcmUgdGhlcmVmb3JlIHVuYWJsZSB0byByZWplY3Qgb3IgZGVueSBhbnl0aGluZyBvZiB0aGlzIGtpbmQsIGhhdmUgYSBzdHJvbmcgYXJndW1lbnQgZm9yIHRoZWlyIGZhaXRoIGluIHRoZSB3b25kZXJmdWwgYW5kIHRyYW5zY2VuZGVudCBjaGFyYWN0ZXIgb2YgdGhlIGRpdmluZSBwb3dlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBEZWl0eSBoYXMgbm8gcmVzZW1ibGFuY2Ugd2hhdGV2ZXIgdG8gbWFuLCBlaXRoZXIgaW4gbmF0dXJlLCBhY3Rpdml0eSwgc2tpbGwsIG9yIHN0cmVuZ3RoOyBub3IsIGlmIEhlIGRvZXMgc29tZXRoaW5nIHRoYXQgd2UgY2Fubm90IGRvLCBvciBjb250cml2ZXMgc29tZXRoaW5nIHRoYXQgd2UgY2Fubm90IGNvbnRyaXZlLCBpcyB0aGlzIGNvbnRyYXJ5IHRvIHJlYXNvbjsgYnV0IHJhdGhlciwgc2luY2UgSGUgZGlmZmVycyBmcm9tIHVzIGluIGFsbCBwb2ludHMsIGluIEhpcyB3b3JrcyBtb3N0IG9mIGFsbCBpcyBIZSB1bmxpa2UgdXMgYW5kIGZhciByZW1vdmVkIGZyb20gdXMuIEJ1dCBtb3N0IG9yIHRoZSBEZWl0eSdzIHBvd2VycywgYXMgSGVyYWNsZWl0dXMgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GcmFnbWVudCAxMTYgKEJ5d2F0ZXIsIHAuIDQ1KTwvbm90ZT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmVzY2FwZSBvdXIga25vd2xlZGdlIHRocm91Z2ggaW5jcmVkdWxpdHkuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUaGVzZSB3b3JkcyB3ZXJlIGFjdHVhbGx5IHV0dGVyZWQgdHdpY2UsIGFzIHRoZSBzdG9yeSBydW5zLCB3aGljaCB3b3VsZCBoYXZlIHVzIGJlbGlldmUgd2hhdCBpcyBkaWZmaWN1bHQgb2YgYmVsaWVmIGFuZCBwcm9iYWJseSBuZXZlciBoYXBwZW5lZC4gRm9yIHRoYXQgc3RhdHVlcyBoYXZlIGFwcGVhcmVkIHRvIHN3ZWF0LCBhbmQgc2hlZCB0ZWFycywgYW5kIGV4dWRlIHNvbWV0aGluZyBsaWtlIGRyb3BzIG9mIGJsb29kLCBpcyBub3QgaW1wb3NzaWJsZTsgc2luY2Ugd29vZCBhbmQgc3RvbmUgb2Z0ZW4gY29udHJhY3QgYSBtb3VsZCB3aGljaCBpcyBwcm9kdWN0aXZlIG9mIG1vaXN0dXJlLCBhbmQgY292ZXIgdGhlbXNlbHZlcyB3aXRoIG1hbnkgY29sb3VycywgYW5kIHJlY2VpdmUgdGludHMgZnJvbSB0aGUgYXRtb3NwaGVyZTsgYW5kIHRoZXJlIGlzIG5vdGhpbmcgaW4gdGhlIHdheSBvZiBiZWxpZXZpbmcgdGhhdCB0aGUgRGVpdHkgdXNlcyB0aGVzZSBwaGVub21lbmEgc29tZXRpbWVzIGFzIHNpZ25zIGFuZCBwb3J0ZW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHBvc3NpYmxlIGFsc28gdGhhdCBzdGF0dWVzIG1heSBlbWl0IGEgbm9pc2UgbGlrZSBhIG1vYW4gb3IgYSBncm9hbiwgYnkgcmVhc29uIG9mIGEgZnJhY3R1cmUgb3IgYSBydXB0dXJlLCB3aGljaCBpcyBtb3JlIHZpb2xlbnQgaWYgaXQgdGFrZXMgcGxhY2UgaW4gdGhlIGludGVyaW9yLiBCdXQgdGhhdCBhcnRpY3VsYXRlIHNwZWVjaCwgYW5kIGxhbmd1YWdlIHNvIGNsZWFyIGFuZCBhYnVuZGFudCBhbmQgcHJlY2lzZSwgc2hvdWxkIHByb2NlZWQgZnJvbSBhIGxpZmVsZXNzIHRoaW5nLCBpcyBhbHRvZ2V0aGVyIGltcG9zc2libGU7IHNpbmNlIG5vdCBldmVuIHRoZSBzb3VsIG9mIG1hbiwgb3IgdGhlIERlaXR5LCB3aXRob3V0IGEgYm9keSBkdWx5IG9yZ2FuaXplZCBhbmQgZml0dGVkIHdpdGggdm9jYWwgcGFydHMsIGhhcyBldmVyIHNwb2tlbiBhbmQgY29udmVyc2VkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVyZSBoaXN0b3J5IGZvcmNlcyBvdXIgYXNzZW50IHdpdGggbnVtZXJvdXMgYW5kIGNyZWRpYmxlIHdpdG5lc3Nlcywgd2UgbXVzdCBjb25jbHVkZSB0aGF0IGFuIGV4cGVyaWVuY2UgZGlmZmVyZW50IGZyb20gdGhhdCBvZiBzZW5zYXRpb24gYXJpc2VzIGluIHRoZSBpbWFnaW5hdGl2ZSBwYXJ0IG9mIHRoZSBzb3VsLCBhbmQgcGVyc3VhZGVzIG1lbiB0byB0aGluayBpdCBzZW5zYXRpb247IGFzLCBmb3IgaW5zdGFuY2UsIGluIHNsZWVwLCB3aGVuIHdlIHRoaW5rIHdlIHNlZSBhbmQgaGVhciwgYWx0aG91Z2ggd2UgbmVpdGhlciBzZWUgbm9yIGhlYXIuIEhvd2V2ZXIsIHRob3NlIHdobyBjaGVyaXNoIHN0cm9uZyBmZWVsaW5ncyBvZiBnb29kLXdpbGwgYW5kIGFmZmVjdGlvbiBmb3IgdGhlIERlaXR5LCBhbmQgYXJlIHRoZXJlZm9yZSB1bmFibGUgdG8gcmVqZWN0IG9yIGRlbnkgYW55dGhpbmcgb2YgdGhpcyBraW5kLCBoYXZlIGEgc3Ryb25nIGFyZ3VtZW50IGZvciB0aGVpciBmYWl0aCBpbiB0aGUgd29uZGVyZnVsIGFuZCB0cmFuc2NlbmRlbnQgY2hhcmFjdGVyIG9mIHRoZSBkaXZpbmUgcG93ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgRGVpdHkgaGFzIG5vIHJlc2VtYmxhbmNlIHdoYXRldmVyIHRvIG1hbiwgZWl0aGVyIGluIG5hdHVyZSwgYWN0aXZpdHksIHNraWxsLCBvciBzdHJlbmd0aDsgbm9yLCBpZiBIZSBkb2VzIHNvbWV0aGluZyB0aGF0IHdlIGNhbm5vdCBkbywgb3IgY29udHJpdmVzIHNvbWV0aGluZyB0aGF0IHdlIGNhbm5vdCBjb250cml2ZSwgaXMgdGhpcyBjb250cmFyeSB0byByZWFzb247IGJ1dCByYXRoZXIsIHNpbmNlIEhlIGRpZmZlcnMgZnJvbSB1cyBpbiBhbGwgcG9pbnRzLCBpbiBIaXMgd29ya3MgbW9zdCBvZiBhbGwgaXMgSGUgdW5saWtlIHVzIGFuZCBmYXIgcmVtb3ZlZCBmcm9tIHVzLiBCdXQgbW9zdCBvciB0aGUgRGVpdHkncyBwb3dlcnMsIGFzIEhlcmFjbGVpdHVzIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GcmFnbWVudCAxMTYgKEJ5d2F0ZXIsIHAuIDQ1KTwvbm90ZT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXNjYXBlIG91ciBrbm93bGVkZ2UgdGhyb3VnaCBpbmNyZWR1bGl0eS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgTWFyY2l1cywgd2hlbiBoZSBjYW1lIGJhY2sgdG8gQW50aXVtIGZyb20gaGlzIGV4cGVkaXRpb24sIFR1bGx1cywgd2hvIGhhZCBsb25nIGhhdGVkIGhpbSBhbmQgYmVlbiBvcHByZXNzZWQgd2l0aCBqZWFsb3VzeSBvZiBoaW0sIHBsb3R0ZWQgdG8gdGFrZSBoaW0gb2ZmIGF0IG9uY2UsIGJlbGlldmluZyB0aGF0IGlmIGhpcyBlbmVteSBlc2NhcGVkIGhpbSBub3csIGhlIHdvdWxkIG5ldmVyIGdpdmUgaGltIGFub3RoZXIgY2hhbmNlIHRvIHNlaXplIGhpbS4gSGF2aW5nLCB0aGVyZWZvcmUsIGFycmF5ZWQgYSBsYXJnZSBwYXJ0eSBhZ2FpbnN0IGhpbSwgaGUgYmFkZSBoaW0gbGF5IGRvd24gaGlzIGNvbW1hbmQgYW5kIGdpdmUgdGhlIFZvbHNjaWFucyBhbiBhY2NvdW50IG9mIGhpcyBhZG1pbmlzdHJhdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE1hcmNpdXMsIGFmcmFpZCBvZiBiZWluZyByZWR1Y2VkIHRvIHByaXZhdGUgc3RhdGlvbiB3aGVuIFR1bGx1cyB3YXMgaW4gY29tbWFuZCBhbmQgZXhlcmNpc2luZyB0aGUgZ3JlYXRlc3QgaW5mbHVlbmNlIGFtb25nIGhpcyBvd24gY291bnRyeW1lbiwgc2FpZCBoZSB3b3VsZCByZXNpZ24gaGlzIGNvbW1hbmQgdG8gdGhlIFZvbHNjaWFucywgaWYgdGhleSBiYWRlIGhpbSBkbyBzbywgc2luY2UgaXQgd2FzIGF0IHRoZWlyIGdlbmVyYWwgYmlkZGluZyB0aGF0IGhlIGhhZCBhc3N1bWVkIGl0OyBhbmQgdGhhdCBoZSB3YXMgcmVhZHksIGFuZCB3b3VsZCBub3QgcmVmdXNlIGV2ZW4gYmVmb3JlIHRoYXQsIHRvIGdpdmUgYSBmdWxsIGFjY291bnQgb2YgaGlzIGFkbWluaXN0cmF0aW9uIHRvIGFsbCB0aGUgcGVvcGxlIG9mIEFudGl1bSB3aG8gZGVzaXJlZCBpdC4gQW4gYXNzZW1ibHkgd2FzIHRoZXJlZm9yZSBoZWxkLCBhdCB3aGljaCB0aGUgcG9wdWxhciBsZWFkZXJzIHdobyBoYWQgYmVlbiBzZXQgdG8gdGhlIHdvcmsgcm9zZSBhbmQgdHJpZWQgdG8gZW1iaXR0ZXIgdGhlIG11bHRpdHVkZSBhZ2FpbnN0IGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gTWFyY2l1cyByb3NlIHRvIHNwZWFrLCB0aGUgbW9yZSBkaXNvcmRlcmx5IHBhcnQgb2YgaGlzIGF1ZGllbmNlIGdyZXcgcXVpZXQsIG91dCBvZiByZXZlcmVuY2UgZm9yIGhpbSwgYW5kIGdhdmUgaGltIG9wcG9ydHVuaXR5IHRvIHNwZWFrIGZlYXJsZXNzbHksIHdoaWxlIHRoZSBiZXN0IG9mIHRoZSBtZW4gb2YgQW50aXVtLCBhbmQgdGhvc2UgdGhhdCB3ZXJlIGVzcGVjaWFsbHkgcGxlYXNlZCB3aXRoIHBlYWNlLCBtYWRlIGl0IGNsZWFyIHRoYXQgdGhleSB3b3VsZCBsaXN0ZW4gdG8gaGltIHdpdGggZmF2b3VyIGFuZCBnaXZlIGEganVzdCBkZWNpc2lvbi4gVHVsbHVzLCB0aGVyZWZvcmUsIGJlZ2FuIHRvIGZlYXIgdGhlIGVmZmVjdCBvZiB0aGUgbWFuJ3MgcGxlYSBpbiBzZWxmLWRlZmVuY2U7IGZvciBoZSB3YXMgb25lIG9mIHRoZSBtb3N0IHBvd2VyZnVsIHNwZWFrZXJzLCBhbmQgaGlzIGVhcmxpZXIgYWNoaWV2ZW1lbnRzIHNlY3VyZWQgaGltIGEgZ3JhdGl0dWRlIHdoaWNoIG91dHdlaWdoZWQgaGlzIGxhdGVyIGZhdWx0OyBuYXkgbW9yZSwgdGhlIHZlcnkgY2hhcmdlIGFnYWluc3QgaGltIHdhcyBidXQgc28gbXVjaCBwcm9vZiBvZiB0aGUgZ3JlYXQgZ3JhdGl0dWRlIHdoaWNoIHdhcyBoaXMgZHVlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSB3b3VsZCBub3QgaGF2ZSB0aG91Z2h0IHRoZW1zZWx2ZXMgd3JvbmdlZCBpbiBub3QgZ2V0dGluZyBSb21lIGludG8gdGhlaXIgcG93ZXIsIGhhZCBub3QgdGhlIGVmZm9ydHMgb2YgTWFyY2l1cyBicm91Z2h0IHRoZW0gbmVhciB0byB0YWtpbmcgaXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGZvciBNYXJjaXVzLCB3aGVuIGhlIGNhbWUgYmFjayB0byBBbnRpdW0gZnJvbSBoaXMgZXhwZWRpdGlvbiwgVHVsbHVzLCB3aG8gaGFkIGxvbmcgaGF0ZWQgaGltIGFuZCBiZWVuIG9wcHJlc3NlZCB3aXRoIGplYWxvdXN5IG9mIGhpbSwgcGxvdHRlZCB0byB0YWtlIGhpbSBvZmYgYXQgb25jZSwgYmVsaWV2aW5nIHRoYXQgaWYgaGlzIGVuZW15IGVzY2FwZWQgaGltIG5vdywgaGUgd291bGQgbmV2ZXIgZ2l2ZSBoaW0gYW5vdGhlciBjaGFuY2UgdG8gc2VpemUgaGltLiBIYXZpbmcsIHRoZXJlZm9yZSwgYXJyYXllZCBhIGxhcmdlIHBhcnR5IGFnYWluc3QgaGltLCBoZSBiYWRlIGhpbSBsYXkgZG93biBoaXMgY29tbWFuZCBhbmQgZ2l2ZSB0aGUgVm9sc2NpYW5zIGFuIGFjY291bnQgb2YgaGlzIGFkbWluaXN0cmF0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNYXJjaXVzLCBhZnJhaWQgb2YgYmVpbmcgcmVkdWNlZCB0byBwcml2YXRlIHN0YXRpb24gd2hlbiBUdWxsdXMgd2FzIGluIGNvbW1hbmQgYW5kIGV4ZXJjaXNpbmcgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSBhbW9uZyBoaXMgb3duIGNvdW50cnltZW4sIHNhaWQgaGUgd291bGQgcmVzaWduIGhpcyBjb21tYW5kIHRvIHRoZSBWb2xzY2lhbnMsIGlmIHRoZXkgYmFkZSBoaW0gZG8gc28sIHNpbmNlIGl0IHdhcyBhdCB0aGVpciBnZW5lcmFsIGJpZGRpbmcgdGhhdCBoZSBoYWQgYXNzdW1lZCBpdDsgYW5kIHRoYXQgaGUgd2FzIHJlYWR5LCBhbmQgd291bGQgbm90IHJlZnVzZSBldmVuIGJlZm9yZSB0aGF0LCB0byBnaXZlIGEgZnVsbCBhY2NvdW50IG9mIGhpcyBhZG1pbmlzdHJhdGlvbiB0byBhbGwgdGhlIHBlb3BsZSBvZiBBbnRpdW0gd2hvIGRlc2lyZWQgaXQuIEFuIGFzc2VtYmx5IHdhcyB0aGVyZWZvcmUgaGVsZCwgYXQgd2hpY2ggdGhlIHBvcHVsYXIgbGVhZGVycyB3aG8gaGFkIGJlZW4gc2V0IHRvIHRoZSB3b3JrIHJvc2UgYW5kIHRyaWVkIHRvIGVtYml0dGVyIHRoZSBtdWx0aXR1ZGUgYWdhaW5zdCBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIE1hcmNpdXMgcm9zZSB0byBzcGVhaywgdGhlIG1vcmUgZGlzb3JkZXJseSBwYXJ0IG9mIGhpcyBhdWRpZW5jZSBncmV3IHF1aWV0LCBvdXQgb2YgcmV2ZXJlbmNlIGZvciBoaW0sIGFuZCBnYXZlIGhpbSBvcHBvcnR1bml0eSB0byBzcGVhayBmZWFybGVzc2x5LCB3aGlsZSB0aGUgYmVzdCBvZiB0aGUgbWVuIG9mIEFudGl1bSwgYW5kIHRob3NlIHRoYXQgd2VyZSBlc3BlY2lhbGx5IHBsZWFzZWQgd2l0aCBwZWFjZSwgbWFkZSBpdCBjbGVhciB0aGF0IHRoZXkgd291bGQgbGlzdGVuIHRvIGhpbSB3aXRoIGZhdm91ciBhbmQgZ2l2ZSBhIGp1c3QgZGVjaXNpb24uIFR1bGx1cywgdGhlcmVmb3JlLCBiZWdhbiB0byBmZWFyIHRoZSBlZmZlY3Qgb2YgdGhlIG1hbidzIHBsZWEgaW4gc2VsZi1kZWZlbmNlOyBmb3IgaGUgd2FzIG9uZSBvZiB0aGUgbW9zdCBwb3dlcmZ1bCBzcGVha2VycywgYW5kIGhpcyBlYXJsaWVyIGFjaGlldmVtZW50cyBzZWN1cmVkIGhpbSBhIGdyYXRpdHVkZSB3aGljaCBvdXR3ZWlnaGVkIGhpcyBsYXRlciBmYXVsdDsgbmF5IG1vcmUsIHRoZSB2ZXJ5IGNoYXJnZSBhZ2FpbnN0IGhpbSB3YXMgYnV0IHNvIG11Y2ggcHJvb2Ygb2YgdGhlIGdyZWF0IGdyYXRpdHVkZSB3aGljaCB3YXMgaGlzIGR1ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IHdvdWxkIG5vdCBoYXZlIHRob3VnaHQgdGhlbXNlbHZlcyB3cm9uZ2VkIGluIG5vdCBnZXR0aW5nIFJvbWUgaW50byB0aGVpciBwb3dlciwgaGFkIG5vdCB0aGUgZWZmb3J0cyBvZiBNYXJjaXVzIGJyb3VnaHQgdGhlbSBuZWFyIHRvIHRha2luZyBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BY2NvcmRpbmdseSwgdGhlIGNvbnNwaXJhdG9ycyBkZWNpZGVkIHRvIG1ha2Ugbm8gbW9yZSBkZWxheSwgYW5kIG5vdCB0byB0ZXN0IHRoZSBmZWVsaW5ncyBvZiB0aGUgbXVsdGl0dWRlOyBidXQgdGhlIGJvbGRlc3Qgb2YgdGhlbSwgY3J5aW5nIG91dCB0aGF0IHRoZSBWb2xzY2lhbnMgbXVzdCBub3QgbGlzdGVuIHRvIHRoZSB0cmFpdG9yLCBub3Igc3VmZmVyIGhpbSB0byByZXRhaW4gaGlzIGNvbW1hbmQgYW5kIHBsYXkgdGhlIHR5cmFudCBhbW9uZyB0aGVtLCBmZWxsIHVwb24gaGltIGluIGEgYm9keSBhbmQgc2xldyBoaW0sIGFuZCBubyBtYW4gcHJlc2VudCBvZmZlcmVkIHRvIGRlZmVuZCBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCSAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVuLCBhZnRlciBoZSBoYWQgd2l0aGRyYXduIGhpcyB0cm9vcHMgZnJvbSB0aGUgUm9tYW4gdGVycml0b3J5LCB0aGV5IHNheSB0aGF0IGhlIHdhcyBvdmVyd2hlbG1lZCB3aXRoIGhhdHJlZCBpbiBjb25zZXF1ZW5jZSwgYW5kIGxvc3QgaGlzIGxpZmUsIGRpZmZlcmVudCB3cml0ZXJzIGdpdmluZyBkaWZmZXJlbnQgZGV0YWlscyBvZiBoaXMgZGVhdGguIEluIEZhYml1cywgd2hvIGlzIGJ5IGZhciB0aGUgbW9zdCBhbmNpZW50IGF1dGhvcml0eSwgSSBmaW5kIHRoYXQgaGUgbGl2ZWQgZXZlbiB0byBvbGQgYWdlPC9xPiAKICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjEwIiB2YWxpZD0ieWVzIj4oTGl2eSwgaWkuIDQwLCAxMCkuPC9iaWJsPiBDaGFwdGVyIHh4eGl4LiBpbiBQbHV0YXJjaCBhZ3JlZXMgY2xvc2VseSB3aXRoIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC41NyI+RGlvbnlzaXVzIHZpaWkuIDU3LTU5PC9iaWJsPiwgd2hvIHNheXMgdGhhdCBNYXJjaXVzIHdhcyBzdG9uZWQgdG8gZGVhdGguPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhhdCB0aGUgZGVlZCB3YXMgbm90IHdyb3VnaHQgd2l0aCB0aGUgYXBwcm92YWwgb2YgdGhlIG1ham9yaXR5IG9mIHRoZSBWb2xzY2lhbnMsIHdhcyBzZWVuIGF0IG9uY2UgZnJvbSB0aGVpciBjb21pbmcgb3V0IG9mIHRoZWlyIGNpdGllcyBpbiBjb25jb3Vyc2UgdG8gaGlzIGJvZHksIHRvIHdoaWNoIHRoZXkgZ2F2ZSBob25vdXJhYmxlIGJ1cmlhbCwgYWRvcm5pbmcgaGlzIHRvbWIgd2l0aCBhcm1zIGFuZCBzcG9pbHMsIGFzIHRoYXQgb2YgYSBjaGllZnRhaW4gYW5kIGdlbmVyYWwuIEJ1dCB3aGVuIHRoZSBSb21hbnMgbGVhcm5lZCBvZiBoaXMgZGVhdGgsIHRoZXkgcGFpZCBoaW0gbm8gb3RoZXIgbWFyayBlaXRoZXIgb2YgaG9ub3VyIG9yIHJlc2VudG1lbnQsIGJ1dCBzaW1wbHkgZ3JhbnRlZCB0aGUgcmVxdWVzdCBvZiB0aGUgd29tZW4gdGhhdCB0aGV5IG1pZ2h0IG1vdXJuIGZvciBoaW0gdGVuIG1vbnRocywgYXMgd2FzIGN1c3RvbWFyeSB3aGVuIGFueSBvbmUgb2YgdGhlbSBsb3N0IGEgZmF0aGVyLCBvciBhIHNvbiwgb3IgYSBicm90aGVyLiBGb3IgdGhpcyB3YXMgdGhlIHBlcmlvZCBmaXhlZCBmb3IgdGhlIGxvbmdlc3QgbW91cm5pbmcsIGFuZCBpdCB3YXMgZml4ZWQgYnkgTnVtYSBQb21waWxpdXMsIGFzIGlzIHdyaXR0ZW4gaW4gaGlzIExpZmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDEyLjIiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeGlpLiAyPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCSAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVuLCBhZnRlciBoZSBoYWQgd2l0aGRyYXduIGhpcyB0cm9vcHMgZnJvbSB0aGUgUm9tYW4gdGVycml0b3J5LCB0aGV5IHNheSB0aGF0IGhlIHdhcyBvdmVyd2hlbG1lZCB3aXRoIGhhdHJlZCBpbiBjb25zZXF1ZW5jZSwgYW5kIGxvc3QgaGlzIGxpZmUsIGRpZmZlcmVudCB3cml0ZXJzIGdpdmluZyBkaWZmZXJlbnQgZGV0YWlscyBvZiBoaXMgZGVhdGguIEluIEZhYml1cywgd2hvIGlzIGJ5IGZhciB0aGUgbW9zdCBhbmNpZW50IGF1dGhvcml0eSwgSSBmaW5kIHRoYXQgaGUgbGl2ZWQgZXZlbiB0byBvbGQgYWdlPC9xPiAKICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjEwIiB2YWxpZD0ieWVzIj4oTGl2eSwgaWkuIDQwLCAxMCkuPC9iaWJsPiBDaGFwdGVyIHh4eGl4LiBpbiBQbHV0YXJjaCBhZ3JlZXMgY2xvc2VseSB3aXRoIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC41NyI+RGlvbnlzaXVzIHZpaWkuIDU3LTU5PC9iaWJsPiwgd2hvIHNheXMgdGhhdCBNYXJjaXVzIHdhcyBzdG9uZWQgdG8gZGVhdGguPC9ub3RlPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVuLCBhZnRlciBoZSBoYWQgd2l0aGRyYXduIGhpcyB0cm9vcHMgZnJvbSB0aGUgUm9tYW4gdGVycml0b3J5LCB0aGV5IHNheSB0aGF0IGhlIHdhcyBvdmVyd2hlbG1lZCB3aXRoIGhhdHJlZCBpbiBjb25zZXF1ZW5jZSwgYW5kIGxvc3QgaGlzIGxpZmUsIGRpZmZlcmVudCB3cml0ZXJzIGdpdmluZyBkaWZmZXJlbnQgZGV0YWlscyBvZiBoaXMgZGVhdGguIEluIEZhYml1cywgd2hvIGlzIGJ5IGZhciB0aGUgbW9zdCBhbmNpZW50IGF1dGhvcml0eSwgSSBmaW5kIHRoYXQgaGUgbGl2ZWQgZXZlbiB0byBvbGQgYWdlPC9xPiAKICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQwLjEwIiB2YWxpZD0ieWVzIj4oTGl2eSwgaWkuIDQwLCAxMCkuPC9iaWJsPiBDaGFwdGVyIHh4eGl4LiBpbiBQbHV0YXJjaCBhZ3JlZXMgY2xvc2VseSB3aXRoIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC41NyI+RGlvbnlzaXVzIHZpaWkuIDU3LTU5PC9iaWJsPiwgd2hvIHNheXMgdGhhdCBNYXJjaXVzIHdhcyBzdG9uZWQgdG8gZGVhdGguPC90cmFuc2xhdGlvbj4="
translation['39.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoYXQgdGhlIGRlZWQgd2FzIG5vdCB3cm91Z2h0IHdpdGggdGhlIGFwcHJvdmFsIG9mIHRoZSBtYWpvcml0eSBvZiB0aGUgVm9sc2NpYW5zLCB3YXMgc2VlbiBhdCBvbmNlIGZyb20gdGhlaXIgY29taW5nIG91dCBvZiB0aGVpciBjaXRpZXMgaW4gY29uY291cnNlIHRvIGhpcyBib2R5LCB0byB3aGljaCB0aGV5IGdhdmUgaG9ub3VyYWJsZSBidXJpYWwsIGFkb3JuaW5nIGhpcyB0b21iIHdpdGggYXJtcyBhbmQgc3BvaWxzLCBhcyB0aGF0IG9mIGEgY2hpZWZ0YWluIGFuZCBnZW5lcmFsLiBCdXQgd2hlbiB0aGUgUm9tYW5zIGxlYXJuZWQgb2YgaGlzIGRlYXRoLCB0aGV5IHBhaWQgaGltIG5vIG90aGVyIG1hcmsgZWl0aGVyIG9mIGhvbm91ciBvciByZXNlbnRtZW50LCBidXQgc2ltcGx5IGdyYW50ZWQgdGhlIHJlcXVlc3Qgb2YgdGhlIHdvbWVuIHRoYXQgdGhleSBtaWdodCBtb3VybiBmb3IgaGltIHRlbiBtb250aHMsIGFzIHdhcyBjdXN0b21hcnkgd2hlbiBhbnkgb25lIG9mIHRoZW0gbG9zdCBhIGZhdGhlciwgb3IgYSBzb24sIG9yIGEgYnJvdGhlci4gRm9yIHRoaXMgd2FzIHRoZSBwZXJpb2QgZml4ZWQgZm9yIHRoZSBsb25nZXN0IG1vdXJuaW5nLCBhbmQgaXQgd2FzIGZpeGVkIGJ5IE51bWEgUG9tcGlsaXVzLCBhcyBpcyB3cml0dGVuIGluIGhpcyBMaWZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMTIuMiIgdmFsaWQ9InllcyI+Q2hhcHRlciB4aWkuIDI8L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTnVtLiAxMi4yIiB2YWxpZD0ieWVzIj5DaGFwdGVyIHhpaS4gMjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGxvc3Mgb2YgTWFyY2l1cyB3YXMga2Vlbmx5IGZlbHQgYXQgb25jZSBieSB0aGUgVm9sc2NpYW4gc3RhdGUuIEZvciwgaW4gdGhlIGZpcnN0IHBsYWNlLCB0aGV5IHF1YXJyZWxsZWQgd2l0aCB0aGUgQWVxdWlhbnMsIHdobyB3ZXJlIHRoZWlyIGFsbGllcyBhbmQgZnJpZW5kcywgb3ZlciB0aGUgc3VwcmVtZSBjb21tYW5kLCBhbmQgY2FycmllZCB0aGVpciBxdWFycmVsIHRvIHRoZSBsZW5ndGggb2YgYmxvb2RzaGVkIGFuZCBzbGF1Z2h0ZXI7IGluIHRoZSBzZWNvbmQgcGxhY2UsIHRoZXkgd2VyZSBkZWZlYXRlZCBpbiBiYXR0bGUgYnkgdGhlIFJvbWFucywgd2hlcmVpbiBUdWxsdXMgd2FzIHNsYWluIGFuZCB0aGUgdmVyeSBmbG93ZXIgb2YgdGhlaXIgZm9yY2VzIHdhcyBjdXQgdG8gcGllY2VzLCBzbyB0aGF0IHRoZXkgd2VyZSBnbGFkIHRvIGFjY2VwdCBtb3N0IGRpc2dyYWNlZnVsIHRlcm1zLCBiZWNvbWluZyBzdWJqZWN0cyBvZiBSb21lLCBhbmQgcGxlZGdpbmcgdGhlbXNlbHZlcyB0byBvYmV5IGhlciBjb21tYW5kcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40MC4xMiIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDQwLCAxMiBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
