var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  if (Array.isArray(lineNumber)) {
    lineNumber = lineNumber[0];
  }
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgZ2VudGxlIGluIGhpcyBwdW5pc2htZW50cyBhbmQgbm90IHBlcnNpc3RlbnQsIHdoZXJlYXMgaW4gaGlzIGZhdm91cnMgaGUgd2FzIHVucmVtaXR0aW5nLCBhbHdheXMgd2VsbCBkaXNwb3NlZCB0b3dhcmRzIGhpcyBiZW5lZmljaWFyaWVzIGFzIHRob3VnaCB0aGV5IHdlcmUgaGlzIGJlbmVmYWN0b3JzLCBhbmQgZWFnZXIgdG8gcHJvdGVjdCBhdCBhbGwgdGltZXMgYW5kIHByZXNlcnZlIHRob3NlIHdobyBoYWQgZXZlciBtZXQgd2l0aCBraW5kbmVzcyBhdCBoaXMgaGFuZHMsIGFzIHRob3VnaCB0aGV5IHdlcmUgaGlzIGNob2ljZXN0IHBvc3Nlc3Npb25zLiBCdXQgc2luY2UgaGUgd2FzIGNvdmV0b3VzIG9mIGhvbm91ciBhbmQgZmFtZSwgaGUgZGVzaXJlZCB0aGF0IGhpcyBub2JsZXN0IGFuZCBncmVhdGVzdCBhY2hpZXZlbWVudHMgc2hvdWxkIGJlIHRoZSByZXN1bHQgb2YgaGlzIG93biBlZmZvcnRzLCBhbmQgaGUgdG9vayBtb3JlIHBsZWFzdXJlIGluIHRob3NlIHdobyB3YW50ZWQgdG8gcmVjZWl2ZSBraW5kbmVzcyB0aGFuIGluIHRob3NlIHdobyB3ZXJlIGFibGUgdG8gYmVzdG93IGl0LCBjb25zaWRlcmluZyB0aGF0IHRoZSBmb3JtZXIgd2VyZSBvYmplY3RzIHVwb24gd2hpY2ggaGUgY291bGQgZXhlcmNpc2UgaGlzIHZpcnR1ZSwgd2hpbGUgdGhlIGxhdHRlciB3ZXJlIGhpcyByaXZhbHMsIHNvIHRvIHNwZWFrLCBpbiB0aGUgc3RydWdnbGUgZm9yIGZhbWUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gaGlzIGVhcmxpZXN0IHllYXJzIGhlIHdhcyB0cmFpbmVkIGluIHRoZSBhcnRzIG9mIHdhciwgc2luY2UgYXQgdGhhdCB0aW1lIFJvbWUgd2FzIGNhcnJ5aW5nIG9uIG1hbnkgZ3JlYXQgY29udGVzdHMgYW5kIGhlciB5b3VuZyBtZW4gZnJvbSB0aGUgdmVyeSBvdXRzZXQgd2VyZSB0YXVnaHQgYnkgc2VydmljZSBhcyBzb2xkaWVycyBob3cgdG8gY29tbWFuZCBzb2xkaWVycy4gVG8gYmVnaW4gd2l0aCwgdGhlbiwgaGUgc2VydmVkIGFzIG1pbGl0YXJ5IHRyaWJ1bmUgaW4gdGhlIHdhciBhZ2FpbnN0IEhhbm5pYmFsIHVuZGVyIE1hcmNlbGx1cyB0aGUgY29uc3VsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5NYXJjZWxsdXMgZmVsbCBpbnRvIGFuIGFtYnVzaCBhbmQgbG9zdCBoaXMgbGlmZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMDggQi5DLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXJjLiAyOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1hcmNlbGx1czwvdGl0bGU+LCB4eHZpaWkuIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ1dCBUaXR1cyB3YXMgYXBwb2ludGVkIGdvdmVybm9yIG9mIHRoZSBjb3VudHJ5IGFib3V0IFRhcmVudHVtIGFuZCBvZiBUYXJlbnR1bSBpdHNlbGYsIG5vdyBjYXB0dXJlZCBmb3IgdGhlIHNlY29uZCB0aW1lLiBIZXJlIGhlIHdvbiBhIGdvb2QgbmFtZSwgbm8gbGVzcyBmb3IgaGlzIGFkbWluaXN0cmF0aW9uIG9mIGp1c3RpY2UgdGhhbiBmb3IgaGlzIGNvbmR1Y3QgaW4gdGhlIGZpZWxkLiBGb3IgdGhpcyByZWFzb24gaGUgd2FzIGFsc28gY2hvc2VuIGRpcmVjdG9yLWluLWNoaWVmIG9mIHRoZSBjb2xvbmlzdHMgc2VudCBvdXQgdG8gdGhlIHR3byBjaXRpZXMgb2YgTmFybmlhIGFuZCBDb3NhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gaGlzIGVhcmxpZXN0IHllYXJzIGhlIHdhcyB0cmFpbmVkIGluIHRoZSBhcnRzIG9mIHdhciwgc2luY2UgYXQgdGhhdCB0aW1lIFJvbWUgd2FzIGNhcnJ5aW5nIG9uIG1hbnkgZ3JlYXQgY29udGVzdHMgYW5kIGhlciB5b3VuZyBtZW4gZnJvbSB0aGUgdmVyeSBvdXRzZXQgd2VyZSB0YXVnaHQgYnkgc2VydmljZSBhcyBzb2xkaWVycyBob3cgdG8gY29tbWFuZCBzb2xkaWVycy4gVG8gYmVnaW4gd2l0aCwgdGhlbiwgaGUgc2VydmVkIGFzIG1pbGl0YXJ5IHRyaWJ1bmUgaW4gdGhlIHdhciBhZ2FpbnN0IEhhbm5pYmFsIHVuZGVyIE1hcmNlbGx1cyB0aGUgY29uc3VsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1hcmNlbGx1cyBmZWxsIGludG8gYW4gYW1idXNoIGFuZCBsb3N0IGhpcyBsaWZlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjA4IEIuQy4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXJjLiAyOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyY2VsbHVzPC90aXRsZT4sIHh4dmlpaS4gZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYnV0IFRpdHVzIHdhcyBhcHBvaW50ZWQgZ292ZXJub3Igb2YgdGhlIGNvdW50cnkgYWJvdXQgVGFyZW50dW0gYW5kIG9mIFRhcmVudHVtIGl0c2VsZiwgbm93IGNhcHR1cmVkIGZvciB0aGUgc2Vjb25kIHRpbWUuIEhlcmUgaGUgd29uIGEgZ29vZCBuYW1lLCBubyBsZXNzIGZvciBoaXMgYWRtaW5pc3RyYXRpb24gb2YganVzdGljZSB0aGFuIGZvciBoaXMgY29uZHVjdCBpbiB0aGUgZmllbGQuIEZvciB0aGlzIHJlYXNvbiBoZSB3YXMgYWxzbyBjaG9zZW4gZGlyZWN0b3ItaW4tY2hpZWYgb2YgdGhlIGNvbG9uaXN0cyBzZW50IG91dCB0byB0aGUgdHdvIGNpdGllcyBvZiBOYXJuaWEgYW5kIENvc2EuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hcmMuIDI4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJjZWxsdXM8L3RpdGxlPiwgeHh2aWlpLiBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyY2VsbHVzPC90aXRsZT4sIHh4dmlpaS4gZi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3VjY2VzcyBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSBzbyBleGFsdGVkIGhpcyBhbWJpdGlvbiB0aGF0IGhlIGlnbm9yZWQgdGhlIGludGVydmVuaW5nIG9mZmljZXMgd2hpY2ggeW91bmcgbWVuIGdlbmVyYWxseSBzb3VnaHQsIHRoZSBvZmZpY2VzIG9mIHRyaWJ1bmUsIHByYWV0b3IsIGFuZCBhZWRpbGUsIGFuZCB0aG91Z2h0IGhpbXNlbGYgd29ydGh5IGF0IG9uY2Ugb2YgYSBjb25zdWxzaGlwOyBzbyBoZSBiZWNhbWUgYSBjYW5kaWRhdGUgZm9yIHRoYXQgb2ZmaWNlLCB3aXRoIHRoZSBlYWdlciBzdXBwb3J0IG9mIGhpcyBjb2xvbmlzdHMuIEJ1dCB0aGUgdHJpYnVuZXMgRnVsdml1cyBhbmQgTWFuaXVzIG9wcG9zZWQgaGlzIGNvdXJzZSwgYW5kIHNhaWQgdGhhdCBpdCB3YXMgYSBtb25zdHJvdXMgdGhpbmcgZm9yIGEgeW91bmcgbWFuIHRvIGZvcmNlIGhpcyB3YXkgaW50byB0aGUgaGlnaGVzdCBvZmZpY2UgY29udHJhcnkgdG8gdGhlIGxhd3MsIGJlZm9yZSBoZSBoYWQgYmVlbiBpbml0aWF0ZWQsIGFzIGl0IHdlcmUsIGludG8gdGhlIGZpcnN0IHJpdGVzIGFuZCBteXN0ZXJpZXMgb2YgZ292ZXJubWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNlbmF0ZSwgaG93ZXZlciwgcmVmZXJyZWQgdGhlIG1hdHRlciB0byB0aGUgdm90ZXMgb2YgdGhlIHBlb3BsZSwgYW5kIHRoZSBwZW9wbGUgZWxlY3RlZCBoaW0gY29uc3VsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTk4IEIuQy48L25vdGU+IGFsb25nIHdpdGggU2V4dHVzIEFlbGl1cywgYWx0aG91Z2ggaGUgd2FzIG5vdCB5ZXQgdGhpcnR5IHllYXJzIG9sZC4gVGhlIGxvdCBhc3NpZ25lZCBoaW0gdG8gdGhlIHdhciB3aXRoIFBoaWxpcCBhbmQgdGhlIE1hY2Vkb25pYW5zLCBhbmQgaXQgd2FzIGEgbWFydmVsbG91cyBwaWVjZSBvZiBnb29kIGZvcnR1bmUgZm9yIHRoZSBSb21hbnMgdGhhdCBoZSB3YXMgdGh1cyBkZXNpZ25hdGVkIGZvciBhIGZpZWxkIG9mIGFjdGl2aXR5IHdoZXJlIHRoZSBwZW9wbGUgZGlkIG5vdCByZXF1aXJlIGEgbGVhZGVyIHJlbHlpbmcgZW50aXJlbHkgdXBvbiB3YXIgYW5kIHZpb2xlbmNlLCBidXQgd2VyZSByYXRoZXIgdG8gYmUgd29uIG92ZXIgYnkgcGVyc3Vhc2lvbiBhbmQgZnJpZW5kbHkgaW50ZXJjb3Vyc2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcmVhbG0gb2YgTWFjZWRvbmlhIGFmZm9yZGVkIFBoaWxpcCBhIHN1ZmZpY2llbnRseSBzdHJvbmcgZm9yY2UgZm9yIGFjdHVhbCBiYXR0bGUsIGJ1dCBpbiBhIHdhciBvZiBsb25nIGR1cmF0aW9uIGhpcyBwaGFsYW54IHdhcyBkZXBlbmRlbnQgZm9yIGl0cyB2aWdvdXIsIGl0cyBzdXBwb3J0LCBpdHMgcGxhY2VzIG9mIHJlZnVnZSwgYW5kIGluIGEgd29yZCBmb3IgaXRzIGVudGlyZSBlZmZlY3RpdmVuZXNzLCB1cG9uIHRoZSBzdGF0ZXMgb2YgR3JlZWNlLCBhbmQgdW5sZXNzIHRoZXNlIHdlcmUgZGV0YWNoZWQgZnJvbSBQaGlsaXAsIHRoZSB3YXIgd2l0aCBoaW0gd291bGQgbm90IGJlIGEgbWF0dGVyIG9mIGEgc2luZ2xlIGJhdHRsZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+R3JlZWNlLCBob3dldmVyLCBoYWQgbm90IHlldCBiZWVuIGJyb3VnaHQgaW50byBtdWNoIGNvbnRhY3Qgd2l0aCB0aGUgUm9tYW5zLCBhbmQgbm93IGZvciB0aGUgZmlyc3QgdGltZSB3YXMgZHJhd24gaW50byBwb2xpdGljYWwgcmVsYXRpb25zIHdpdGggdGhlbS4gVW5sZXNzLCB0aGVyZWZvcmUsIHRoZSBSb21hbiBjb21tYW5kZXIgaGFkIGJlZW4gYSBtYW4gb2YgbmF0aXZlIGdvb2RuZXNzIHdobyByZWxpZWQgdXBvbiBhcmd1bWVudCBtb3JlIHRoYW4gdXBvbiB3YXIsIGFuZCB1bmxlc3MgaGUgaGFkIGJlZW4gcGVyc3Vhc2l2ZSB3aGVuIGhlIGFza2VkIGFuIGF1ZGllbmNlIGFuZCBraW5kIHdoZW4gaGUgZ3JhbnRlZCBvbmUsIGV2ZXIgbGF5aW5nIHRoZSBncmVhdGVzdCBzdHJlc3MgdXBvbiB3aGF0IHdhcyByaWdodCBhbmQganVzdCwgR3JlZWNlIHdvdWxkIG5vdCBzbyBlYXNpbHkgaGF2ZSBiZWVuIHNhdGlzZmllZCB3aXRoIGEgZm9yZWlnbiBzdXByZW1hY3kgaW5zdGVhZCBvZiB0aG9zZSB0byB3aGljaCBzaGUgaGFkIGJlZW4gYWNjdXN0b21lZC4gSG93ZXZlciwgdGhpcyB3aWxsIGJlIG1hZGUgY2xlYXIgaW4gdGhlIHN0b3J5IG9mIGhpcyBhY2hpZXZlbWVudHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHN1Y2Nlc3MgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2Ugc28gZXhhbHRlZCBoaXMgYW1iaXRpb24gdGhhdCBoZSBpZ25vcmVkIHRoZSBpbnRlcnZlbmluZyBvZmZpY2VzIHdoaWNoIHlvdW5nIG1lbiBnZW5lcmFsbHkgc291Z2h0LCB0aGUgb2ZmaWNlcyBvZiB0cmlidW5lLCBwcmFldG9yLCBhbmQgYWVkaWxlLCBhbmQgdGhvdWdodCBoaW1zZWxmIHdvcnRoeSBhdCBvbmNlIG9mIGEgY29uc3Vsc2hpcDsgc28gaGUgYmVjYW1lIGEgY2FuZGlkYXRlIGZvciB0aGF0IG9mZmljZSwgd2l0aCB0aGUgZWFnZXIgc3VwcG9ydCBvZiBoaXMgY29sb25pc3RzLiBCdXQgdGhlIHRyaWJ1bmVzIEZ1bHZpdXMgYW5kIE1hbml1cyBvcHBvc2VkIGhpcyBjb3Vyc2UsIGFuZCBzYWlkIHRoYXQgaXQgd2FzIGEgbW9uc3Ryb3VzIHRoaW5nIGZvciBhIHlvdW5nIG1hbiB0byBmb3JjZSBoaXMgd2F5IGludG8gdGhlIGhpZ2hlc3Qgb2ZmaWNlIGNvbnRyYXJ5IHRvIHRoZSBsYXdzLCBiZWZvcmUgaGUgaGFkIGJlZW4gaW5pdGlhdGVkLCBhcyBpdCB3ZXJlLCBpbnRvIHRoZSBmaXJzdCByaXRlcyBhbmQgbXlzdGVyaWVzIG9mIGdvdmVybm1lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUsIGhvd2V2ZXIsIHJlZmVycmVkIHRoZSBtYXR0ZXIgdG8gdGhlIHZvdGVzIG9mIHRoZSBwZW9wbGUsIGFuZCB0aGUgcGVvcGxlIGVsZWN0ZWQgaGltIGNvbnN1bDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTk4IEIuQy48L25vdGU+IGFsb25nIHdpdGggU2V4dHVzIEFlbGl1cywgYWx0aG91Z2ggaGUgd2FzIG5vdCB5ZXQgdGhpcnR5IHllYXJzIG9sZC4gVGhlIGxvdCBhc3NpZ25lZCBoaW0gdG8gdGhlIHdhciB3aXRoIFBoaWxpcCBhbmQgdGhlIE1hY2Vkb25pYW5zLCBhbmQgaXQgd2FzIGEgbWFydmVsbG91cyBwaWVjZSBvZiBnb29kIGZvcnR1bmUgZm9yIHRoZSBSb21hbnMgdGhhdCBoZSB3YXMgdGh1cyBkZXNpZ25hdGVkIGZvciBhIGZpZWxkIG9mIGFjdGl2aXR5IHdoZXJlIHRoZSBwZW9wbGUgZGlkIG5vdCByZXF1aXJlIGEgbGVhZGVyIHJlbHlpbmcgZW50aXJlbHkgdXBvbiB3YXIgYW5kIHZpb2xlbmNlLCBidXQgd2VyZSByYXRoZXIgdG8gYmUgd29uIG92ZXIgYnkgcGVyc3Vhc2lvbiBhbmQgZnJpZW5kbHkgaW50ZXJjb3Vyc2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcmVhbG0gb2YgTWFjZWRvbmlhIGFmZm9yZGVkIFBoaWxpcCBhIHN1ZmZpY2llbnRseSBzdHJvbmcgZm9yY2UgZm9yIGFjdHVhbCBiYXR0bGUsIGJ1dCBpbiBhIHdhciBvZiBsb25nIGR1cmF0aW9uIGhpcyBwaGFsYW54IHdhcyBkZXBlbmRlbnQgZm9yIGl0cyB2aWdvdXIsIGl0cyBzdXBwb3J0LCBpdHMgcGxhY2VzIG9mIHJlZnVnZSwgYW5kIGluIGEgd29yZCBmb3IgaXRzIGVudGlyZSBlZmZlY3RpdmVuZXNzLCB1cG9uIHRoZSBzdGF0ZXMgb2YgR3JlZWNlLCBhbmQgdW5sZXNzIHRoZXNlIHdlcmUgZGV0YWNoZWQgZnJvbSBQaGlsaXAsIHRoZSB3YXIgd2l0aCBoaW0gd291bGQgbm90IGJlIGEgbWF0dGVyIG9mIGEgc2luZ2xlIGJhdHRsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkdyZWVjZSwgaG93ZXZlciwgaGFkIG5vdCB5ZXQgYmVlbiBicm91Z2h0IGludG8gbXVjaCBjb250YWN0IHdpdGggdGhlIFJvbWFucywgYW5kIG5vdyBmb3IgdGhlIGZpcnN0IHRpbWUgd2FzIGRyYXduIGludG8gcG9saXRpY2FsIHJlbGF0aW9ucyB3aXRoIHRoZW0uIFVubGVzcywgdGhlcmVmb3JlLCB0aGUgUm9tYW4gY29tbWFuZGVyIGhhZCBiZWVuIGEgbWFuIG9mIG5hdGl2ZSBnb29kbmVzcyB3aG8gcmVsaWVkIHVwb24gYXJndW1lbnQgbW9yZSB0aGFuIHVwb24gd2FyLCBhbmQgdW5sZXNzIGhlIGhhZCBiZWVuIHBlcnN1YXNpdmUgd2hlbiBoZSBhc2tlZCBhbiBhdWRpZW5jZSBhbmQga2luZCB3aGVuIGhlIGdyYW50ZWQgb25lLCBldmVyIGxheWluZyB0aGUgZ3JlYXRlc3Qgc3RyZXNzIHVwb24gd2hhdCB3YXMgcmlnaHQgYW5kIGp1c3QsIEdyZWVjZSB3b3VsZCBub3Qgc28gZWFzaWx5IGhhdmUgYmVlbiBzYXRpc2ZpZWQgd2l0aCBhIGZvcmVpZ24gc3VwcmVtYWN5IGluc3RlYWQgb2YgdGhvc2UgdG8gd2hpY2ggc2hlIGhhZCBiZWVuIGFjY3VzdG9tZWQuIEhvd2V2ZXIsIHRoaXMgd2lsbCBiZSBtYWRlIGNsZWFyIGluIHRoZSBzdG9yeSBvZiBoaXMgYWNoaWV2ZW1lbnRzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRpdHVzIGxlYXJuZWQgdGhhdCB0aGUgZ2VuZXJhbHMgd2hvIGhhZCBwcmVjZWRlZCBoaW0gaW4gdGhpcyBmaWVsZCwgZmlyc3QgU3VscGljaXVzLCBhbmQgdGhlbiBQdWJsaXVzIFZpbGxpdXMsIGhhZCBpbnZhZGVkIE1hY2Vkb25pYSBsYXRlIGluIHRoZSBzZWFzb24sIGhhZCBwcm9zZWN1dGVkIHRoZSB3YXIgc2xvd2x5LCBhbmQgaGFkIHdhc3RlZCB0aW1lIGluIG1hbmV1dmVyaW5nIGZvciBwb3NpdGlvbiBvciBpbiBsb25nIHJhbmdlIHNraXJtaXNoZXMgd2l0aCBQaGlsaXAgdG8gc2VjdXJlIHJvYWRzIGFuZCBwcm92aXNpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBtZW4gaGFkIHNxdWFuZGVyZWQgdGhlIHllYXIgb2YgdGhlaXIgY29uc3Vsc2hpcCBhdCBob21lIGluIHRoZSBob25vdXJzIGFuZCBwb2xpdGljYWwgYWN0aXZpdGllcyBvZiB0aGVpciBvZmZpY2UsIGFuZCBhZnRlcndhcmRzIGhhZCBzZXQgb3V0IG9uIHRoZWlyIGNhbXBhaWducy4gQnV0IFRpdHVzIGRpZCBub3QgdGhpbmsgaXQgcmlnaHQgdG8gaW1pdGF0ZSB0aGVtIGFuZCB0aHVzIGFkZCBhIHllYXIgdG8gaGlzIHRlcm0gb2Ygb2ZmaWNlLCBhY3RpbmcgYXMgbWFnaXN0cmF0ZSBkdXJpbmcgb25lLCBhbmQgYXMgZ2VuZXJhbCBmb3IgYSBzZWNvbmQuIE9uIHRoZSBjb250cmFyeSwgaGUgd2FzIGFtYml0aW91cyB0byBwcm9zZWN1dGUgdGhlIHdhciBhdCB0aGUgc2FtZSB0aW1lIHRoYXQgaGUgc2VydmVkIGFzIGNvbnN1bCwgYW5kIHRoZXJlZm9yZSByZW5vdW5jZWQgaGlzIGhvbm91cnMgYW5kIHNwZWNpYWwgcHJpdmlsZWdlcyBpbiB0aGUgY2l0eSwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGFmdGVyIGFza2luZyB0aGUgc2VuYXRlIHRoYXQgaGlzIGJyb3RoZXIgTHVjaXVzIG1pZ2h0IGFjY29tcGFueSBoaW0gb24gaGlzIGV4cGVkaXRpb24gYXMgbmF2YWwgY29tbWFuZGVyLCBoZSB0b29rIHdpdGggaGltIGFzIHRoZSBtYWluIHBhcnQgb2YgaGlzIGZvcmNlIHRob3NlIG9mIFNjaXBpbydzIHNvbGRpZXJzIHdobyB3ZXJlIHN0aWxsIGluIGZ1bGwgdmlnb3VyIG9mIGJvZHkgYW5kIHNwaXJpdCBhZnRlciBjb25xdWVyaW5nIEhhc2RydWJhbCBpbiBTcGFpbiBhbmQgSGFubmliYWwgaGltc2VsZiBpbiBBZnJpY2EgKHRoZXkgd2VyZSB0aHJlZSB0aG91c2FuZCBpbiBudW1iZXIpLCBhbmQgY3Jvc3NlZCBzYWZlbHkgaW50byBFcGlydXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGZvdW5kIFB1YmxpdXMgVmlsbGl1cyBlbmNhbXBlZCB3aXRoIGhpcyBmb3JjZXMgb3ZlciBhZ2FpbnN0IFBoaWxpcCwgd2hvIGZvciBhIGxvbmcgdGltZSBub3cgaGFkIGJlZW4gZ3VhcmRpbmcgdGhlIG5hcnJvdyBwYXNzZXMgYWxvbmcgdGhlIHJpdmVyIEFwc3VzLiBQdWJsaXVzIHdhcyBtYWtpbmcgbm8gcHJvZ3Jlc3MsIG93aW5nIHRvIHRoZSBzdHJlbmd0aCBvZiBoaXMgYWR2ZXJzYXJ5J3MgcG9zaXRpb24sIGFuZCBUaXR1cyB0aGVyZWZvcmUgdG9vayBvdmVyIGhpcyBhcm15LCBzZW50IFB1YmxpdXMgaG9tZSwgYW5kIGJlZ2FuIGFuIGV4YW1pbmF0aW9uIG9mIHRoZSBncm91bmQuIEl0IGhhcyBubyBsZXNzIG5hdHVyYWwgc3RyZW5ndGggdGhhbiB0aGUgVmFsZSBvZiBUZW1wZSwgYnV0IGlzIHdpdGhvdXQgdGhlIGJlYXV0aWZ1bCB0cmVlcywgZ3JlZW4gd29vZHMsIGFncmVlYWJsZSBoYXVudHMsIGFuZCBwbGVhc2FudCBtZWFkb3dzIHdoaWNoIHRoZXJlIGFib3VuZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+R3JlYXQgYW5kIGxvZnR5IG1vdW50YWlucyBvbiBlaXRoZXIgc2lkZSBzbG9wZSBkb3duIGFuZCBmb3JtIGEgc2luZ2xlIHZlcnkgbGFyZ2UgYW5kIGRlZXAgcmF2aW5lLCBhbmQgdGhyb3VnaCB0aGlzIHRoZSBBcHN1cyBkYXNoZXMgd2l0aCBhIHZvbHVtZSBhbmQgc3BlZWQgd2hpY2ggbWFrZSBpdCB0aGUgZXF1YWwgb2YgdGhlIFBlbmVpdXMuIEl0cyB3YXRlciBjb3ZlcnMgYWxsIHRoZSByZXN0IG9mIHRoZSBncm91bmQgYXQgdGhlIGZvb3Qgb2YgdGhlIG1vdW50YWlucywgYnV0IGxlYXZlcyBhIGN1dCwgcHJlY2lwaXRvdXMgYW5kIG5hcnJvdywgZm9yIGEgcGF0aCBhbG9uZyBwYXN0IGl0cyBjdXJyZW50OyB0aGlzIHBhdGggd291bGQgbm90IGJlIGVhc3kgZm9yIGFuIGFybXkgdG8gdHJhdmVyc2UgYXQgYW55IHRpbWUsIGFuZCB3aGVuIGd1YXJkZWQsIGl0IHdvdWxkIGJlIHV0dGVybHkgaW1wYXNzYWJsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaXR1cyBsZWFybmVkIHRoYXQgdGhlIGdlbmVyYWxzIHdobyBoYWQgcHJlY2VkZWQgaGltIGluIHRoaXMgZmllbGQsIGZpcnN0IFN1bHBpY2l1cywgYW5kIHRoZW4gUHVibGl1cyBWaWxsaXVzLCBoYWQgaW52YWRlZCBNYWNlZG9uaWEgbGF0ZSBpbiB0aGUgc2Vhc29uLCBoYWQgcHJvc2VjdXRlZCB0aGUgd2FyIHNsb3dseSwgYW5kIGhhZCB3YXN0ZWQgdGltZSBpbiBtYW5ldXZlcmluZyBmb3IgcG9zaXRpb24gb3IgaW4gbG9uZyByYW5nZSBza2lybWlzaGVzIHdpdGggUGhpbGlwIHRvIHNlY3VyZSByb2FkcyBhbmQgcHJvdmlzaW9ucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiBoYWQgc3F1YW5kZXJlZCB0aGUgeWVhciBvZiB0aGVpciBjb25zdWxzaGlwIGF0IGhvbWUgaW4gdGhlIGhvbm91cnMgYW5kIHBvbGl0aWNhbCBhY3Rpdml0aWVzIG9mIHRoZWlyIG9mZmljZSwgYW5kIGFmdGVyd2FyZHMgaGFkIHNldCBvdXQgb24gdGhlaXIgY2FtcGFpZ25zLiBCdXQgVGl0dXMgZGlkIG5vdCB0aGluayBpdCByaWdodCB0byBpbWl0YXRlIHRoZW0gYW5kIHRodXMgYWRkIGEgeWVhciB0byBoaXMgdGVybSBvZiBvZmZpY2UsIGFjdGluZyBhcyBtYWdpc3RyYXRlIGR1cmluZyBvbmUsIGFuZCBhcyBnZW5lcmFsIGZvciBhIHNlY29uZC4gT24gdGhlIGNvbnRyYXJ5LCBoZSB3YXMgYW1iaXRpb3VzIHRvIHByb3NlY3V0ZSB0aGUgd2FyIGF0IHRoZSBzYW1lIHRpbWUgdGhhdCBoZSBzZXJ2ZWQgYXMgY29uc3VsLCBhbmQgdGhlcmVmb3JlIHJlbm91bmNlZCBoaXMgaG9ub3VycyBhbmQgc3BlY2lhbCBwcml2aWxlZ2VzIGluIHRoZSBjaXR5LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhZnRlciBhc2tpbmcgdGhlIHNlbmF0ZSB0aGF0IGhpcyBicm90aGVyIEx1Y2l1cyBtaWdodCBhY2NvbXBhbnkgaGltIG9uIGhpcyBleHBlZGl0aW9uIGFzIG5hdmFsIGNvbW1hbmRlciwgaGUgdG9vayB3aXRoIGhpbSBhcyB0aGUgbWFpbiBwYXJ0IG9mIGhpcyBmb3JjZSB0aG9zZSBvZiBTY2lwaW8ncyBzb2xkaWVycyB3aG8gd2VyZSBzdGlsbCBpbiBmdWxsIHZpZ291ciBvZiBib2R5IGFuZCBzcGlyaXQgYWZ0ZXIgY29ucXVlcmluZyBIYXNkcnViYWwgaW4gU3BhaW4gYW5kIEhhbm5pYmFsIGhpbXNlbGYgaW4gQWZyaWNhICh0aGV5IHdlcmUgdGhyZWUgdGhvdXNhbmQgaW4gbnVtYmVyKSwgYW5kIGNyb3NzZWQgc2FmZWx5IGludG8gRXBpcnVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGZvdW5kIFB1YmxpdXMgVmlsbGl1cyBlbmNhbXBlZCB3aXRoIGhpcyBmb3JjZXMgb3ZlciBhZ2FpbnN0IFBoaWxpcCwgd2hvIGZvciBhIGxvbmcgdGltZSBub3cgaGFkIGJlZW4gZ3VhcmRpbmcgdGhlIG5hcnJvdyBwYXNzZXMgYWxvbmcgdGhlIHJpdmVyIEFwc3VzLiBQdWJsaXVzIHdhcyBtYWtpbmcgbm8gcHJvZ3Jlc3MsIG93aW5nIHRvIHRoZSBzdHJlbmd0aCBvZiBoaXMgYWR2ZXJzYXJ5J3MgcG9zaXRpb24sIGFuZCBUaXR1cyB0aGVyZWZvcmUgdG9vayBvdmVyIGhpcyBhcm15LCBzZW50IFB1YmxpdXMgaG9tZSwgYW5kIGJlZ2FuIGFuIGV4YW1pbmF0aW9uIG9mIHRoZSBncm91bmQuIEl0IGhhcyBubyBsZXNzIG5hdHVyYWwgc3RyZW5ndGggdGhhbiB0aGUgVmFsZSBvZiBUZW1wZSwgYnV0IGlzIHdpdGhvdXQgdGhlIGJlYXV0aWZ1bCB0cmVlcywgZ3JlZW4gd29vZHMsIGFncmVlYWJsZSBoYXVudHMsIGFuZCBwbGVhc2FudCBtZWFkb3dzIHdoaWNoIHRoZXJlIGFib3VuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkdyZWF0IGFuZCBsb2Z0eSBtb3VudGFpbnMgb24gZWl0aGVyIHNpZGUgc2xvcGUgZG93biBhbmQgZm9ybSBhIHNpbmdsZSB2ZXJ5IGxhcmdlIGFuZCBkZWVwIHJhdmluZSwgYW5kIHRocm91Z2ggdGhpcyB0aGUgQXBzdXMgZGFzaGVzIHdpdGggYSB2b2x1bWUgYW5kIHNwZWVkIHdoaWNoIG1ha2UgaXQgdGhlIGVxdWFsIG9mIHRoZSBQZW5laXVzLiBJdHMgd2F0ZXIgY292ZXJzIGFsbCB0aGUgcmVzdCBvZiB0aGUgZ3JvdW5kIGF0IHRoZSBmb290IG9mIHRoZSBtb3VudGFpbnMsIGJ1dCBsZWF2ZXMgYSBjdXQsIHByZWNpcGl0b3VzIGFuZCBuYXJyb3csIGZvciBhIHBhdGggYWxvbmcgcGFzdCBpdHMgY3VycmVudDsgdGhpcyBwYXRoIHdvdWxkIG5vdCBiZSBlYXN5IGZvciBhbiBhcm15IHRvIHRyYXZlcnNlIGF0IGFueSB0aW1lLCBhbmQgd2hlbiBndWFyZGVkLCBpdCB3b3VsZCBiZSB1dHRlcmx5IGltcGFzc2FibGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2VyZSBzb21lLCB0aGVyZWZvcmUsIHdobyB0cmllZCB0byBoYXZlIFRpdHVzIGxlYWQgaGlzIGZvcmNlcyBieSBhIHJvdW5kYWJvdXQgd2F5IHRocm91Z2ggRGFzc2FyZXRpcyB0b3dhcmRzIEx5Y3VzLCBhIHNhZmUgYW5kIGVhc3kgcm9hZC4gQnV0IGhlIHdhcyBhZnJhaWQgdGhhdCBpZiBoZSB3ZW50IGZhciBhd2F5IGZyb20gdGhlIHNlYSBhbmQgZ290IGludG8gcmVnaW9ucyB0aGF0IHdlcmUgcG9vcmx5IHRpbGxlZCBhbmQgYmFycmVuLCB3aGlsZSBQaGlsaXAgYXZvaWRlZCBhIGJhdHRsZSwgbGFjayBvZiBwcm92aXNpb25zIHdvdWxkIGNvbXBlbCBoaW0gdG8gY29tZSBiYWNrIGFnYWluIHRvIHRoZSBzZWEgd2l0aCBoaXMgdGFzayB1bmRvbmUsIGxpa2UgdGhlIGdlbmVyYWwgd2hvIGhhZCBwcmVjZWRlZCBoaW0uIEhlIHRoZXJlZm9yZSBkZXRlcm1pbmVkIHRvIGF0dGFjayB3aXRoIGFsbCBoaXMgbWlnaHQsIGFuZCBmb3JjZSBoaXMgcGFzc2FnZSB0aHJvdWdoIHRoZSBoZWlnaHRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgUGhpbGlwIHdhcyBvY2N1cHlpbmcgdGhlIG1vdW50YWlucyB3aXRoIGhpcyBwaGFsYW54LCBhbmQgb24gdGhlIGZsYW5rcyBvZiB0aGUgUm9tYW5zIGphdmVsaW5zIGFuZCBhcnJvd3MgY2FtZSBmbHlpbmcgZnJvbSBhbGwgZGlyZWN0aW9ucyBhZ2FpbnN0IHRoZW0uIFNoYXJwIGVuY291bnRlcnMgdG9vayBwbGFjZSwgbWVuIHdlcmUgd291bmRlZCBhbmQgbWVuIGZlbGwgZGVhZCBvbiBib3RoIHNpZGVzLCBhbmQgbm8gZW5kIG9mIHRoZSB3YXIgd2FzIGluIHNpZ2h0LiBCdXQgYXQgbGFzdCBzb21lIGhlcmRzbWVuIG9mIHRoZSB2aWNpbml0eSBjYW1lIHRvIFRpdHVzIGFuZCB0b2xkIGhpbSBvZiBhIHJvdW5kYWJvdXQgcGF0aCB3aGljaCB0aGUgZW5lbXkgd2FzIG5lZ2xlY3RpbmcgdG8gZ3VhcmQ7IG92ZXIgdGhpcyB0aGV5IHByb21pc2VkIHRvIGxlYWQgaGlzIGFybXkgYW5kIGJyaW5nIGl0LCBpbiB0aHJlZSBkYXlzIGF0IHRoZSBmYXJ0aGVzdCwgdG8gYSBwb3NpdGlvbiBvbiB0aGUgaGVpZ2h0cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgc3VyZXR5IGFuZCB2b3VjaGVyIGZvciB0aGVpciBnb29kIGZhaXRoIHRoZXkgYnJvdWdodCBDaGFyb3BzIHRoZSBzb24gb2YgTWFjaGF0YXMsIGEgbGVhZGluZyBtYW4gaW4gRXBpcnVzLCB3aG8gd2FzIHdlbGwtZGlzcG9zZWQgdG8gdGhlIFJvbWFucyBhbmQgd2FzIHNlY3JldGx5IGNvb3BlcmF0aW5nIHdpdGggdGhlbSB0aHJvdWdoIGZlYXIgb2YgUGhpbGlwLiBJbiBoaW0gVGl0dXMgcHV0IGNvbmZpZGVuY2UsIGFuZCBzZW50IG91dCBhIG1pbGl0YXJ5IHRyaWJ1bmUgd2l0aCBmb3VyIHRob3VzYW5kIGZvb3Qtc29sZGllcnMgYW5kIHRocmVlIGh1bmRyZWQgaG9yc2VtZW4uIFRoZXkgd2VyZSBjb25kdWN0ZWQgYnkgdGhlIGhlcmRzbWVuLCB3aG8gd2VyZSBpbiBib25kcy4gQnkgZGF5IHRoZXkgcmVzdGVkIHVuZGVyIGNvdmVyIG9mIGNhdmVzIG9yIHdvb2R5IHBsYWNlcywgYW5kIHRoZXkgdHJhdmVsbGVkIGluIHRoZSBuaWdodCwgYnkgdGhlIGxpZ2h0IG9mIHRoZSBtb29uLCB3aGljaCB3YXMgYXQgdGhlIGZ1bGwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3ZXJlIHNvbWUsIHRoZXJlZm9yZSwgd2hvIHRyaWVkIHRvIGhhdmUgVGl0dXMgbGVhZCBoaXMgZm9yY2VzIGJ5IGEgcm91bmRhYm91dCB3YXkgdGhyb3VnaCBEYXNzYXJldGlzIHRvd2FyZHMgTHljdXMsIGEgc2FmZSBhbmQgZWFzeSByb2FkLiBCdXQgaGUgd2FzIGFmcmFpZCB0aGF0IGlmIGhlIHdlbnQgZmFyIGF3YXkgZnJvbSB0aGUgc2VhIGFuZCBnb3QgaW50byByZWdpb25zIHRoYXQgd2VyZSBwb29ybHkgdGlsbGVkIGFuZCBiYXJyZW4sIHdoaWxlIFBoaWxpcCBhdm9pZGVkIGEgYmF0dGxlLCBsYWNrIG9mIHByb3Zpc2lvbnMgd291bGQgY29tcGVsIGhpbSB0byBjb21lIGJhY2sgYWdhaW4gdG8gdGhlIHNlYSB3aXRoIGhpcyB0YXNrIHVuZG9uZSwgbGlrZSB0aGUgZ2VuZXJhbCB3aG8gaGFkIHByZWNlZGVkIGhpbS4gSGUgdGhlcmVmb3JlIGRldGVybWluZWQgdG8gYXR0YWNrIHdpdGggYWxsIGhpcyBtaWdodCwgYW5kIGZvcmNlIGhpcyBwYXNzYWdlIHRocm91Z2ggdGhlIGhlaWdodHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQaGlsaXAgd2FzIG9jY3VweWluZyB0aGUgbW91bnRhaW5zIHdpdGggaGlzIHBoYWxhbngsIGFuZCBvbiB0aGUgZmxhbmtzIG9mIHRoZSBSb21hbnMgamF2ZWxpbnMgYW5kIGFycm93cyBjYW1lIGZseWluZyBmcm9tIGFsbCBkaXJlY3Rpb25zIGFnYWluc3QgdGhlbS4gU2hhcnAgZW5jb3VudGVycyB0b29rIHBsYWNlLCBtZW4gd2VyZSB3b3VuZGVkIGFuZCBtZW4gZmVsbCBkZWFkIG9uIGJvdGggc2lkZXMsIGFuZCBubyBlbmQgb2YgdGhlIHdhciB3YXMgaW4gc2lnaHQuIEJ1dCBhdCBsYXN0IHNvbWUgaGVyZHNtZW4gb2YgdGhlIHZpY2luaXR5IGNhbWUgdG8gVGl0dXMgYW5kIHRvbGQgaGltIG9mIGEgcm91bmRhYm91dCBwYXRoIHdoaWNoIHRoZSBlbmVteSB3YXMgbmVnbGVjdGluZyB0byBndWFyZDsgb3ZlciB0aGlzIHRoZXkgcHJvbWlzZWQgdG8gbGVhZCBoaXMgYXJteSBhbmQgYnJpbmcgaXQsIGluIHRocmVlIGRheXMgYXQgdGhlIGZhcnRoZXN0LCB0byBhIHBvc2l0aW9uIG9uIHRoZSBoZWlnaHRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIHN1cmV0eSBhbmQgdm91Y2hlciBmb3IgdGhlaXIgZ29vZCBmYWl0aCB0aGV5IGJyb3VnaHQgQ2hhcm9wcyB0aGUgc29uIG9mIE1hY2hhdGFzLCBhIGxlYWRpbmcgbWFuIGluIEVwaXJ1cywgd2hvIHdhcyB3ZWxsLWRpc3Bvc2VkIHRvIHRoZSBSb21hbnMgYW5kIHdhcyBzZWNyZXRseSBjb29wZXJhdGluZyB3aXRoIHRoZW0gdGhyb3VnaCBmZWFyIG9mIFBoaWxpcC4gSW4gaGltIFRpdHVzIHB1dCBjb25maWRlbmNlLCBhbmQgc2VudCBvdXQgYSBtaWxpdGFyeSB0cmlidW5lIHdpdGggZm91ciB0aG91c2FuZCBmb290LXNvbGRpZXJzIGFuZCB0aHJlZSBodW5kcmVkIGhvcnNlbWVuLiBUaGV5IHdlcmUgY29uZHVjdGVkIGJ5IHRoZSBoZXJkc21lbiwgd2hvIHdlcmUgaW4gYm9uZHMuIEJ5IGRheSB0aGV5IHJlc3RlZCB1bmRlciBjb3ZlciBvZiBjYXZlcyBvciB3b29keSBwbGFjZXMsIGFuZCB0aGV5IHRyYXZlbGxlZCBpbiB0aGUgbmlnaHQsIGJ5IHRoZSBsaWdodCBvZiB0aGUgbW9vbiwgd2hpY2ggd2FzIGF0IHRoZSBmdWxsLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBzZW5kaW5nIG9mZiB0aGlzIGRldGFjaG1lbnQsIFRpdHVzIGtlcHQgaGlzIGFybXkgcXVpZXQgZm9yIHR3byBkYXlzLCBleGNlcHQgc28gZmFyIGFzIGhlIGRyZXcgb2ZmIHRoZSBlbmVteSdzIGF0dGVudGlvbiBieSBza2lybWlzaGVzOyBidXQgd2hlbiB0aGUgZGF5IGNhbWUgb24gd2hpY2ggdGhlIGVudmVsb3BpbmcgcGFydHkgd2VyZSBleHBlY3RlZCB0byBzaG93IHRoZW1zZWx2ZXMgb24gdGhlIGhlaWdodHMsIGF0IGRheWJyZWFrIGhlIHB1dCBhbGwgaGlzIGhlYXZ5LWFybWVkIGFuZCBhbGwgaGlzIGxpZ2h0LWFybWVkIHRyb29wcyBpbiBtb3Rpb24uIERpdmlkaW5nIGhpcyBmb3JjZXMgaW50byB0aHJlZSBwYXJ0cywgaGUgaGltc2VsZiBsZWQgaGlzIGNvaG9ydHMgaW4gY29sdW1uIGZvcm1hdGlvbiB1cCBpbnRvIHRoZSBuYXJyb3dlc3QgcGFydCBvZiB0aGUgcmF2aW5lIGFsb25nIHRoZSBzdHJlYW0sIHBlbHRlZCB3aXRoIG1pc3NpbGVzIGJ5IHRoZSBNYWNlZG9uaWFucyBhbmQgZW5nYWdpbmcgYXQgY2xvc2UgcXVhcnRlcnMgd2l0aCB0aG9zZSB3aG8gY29uZnJvbnRlZCBoaW0gYXQgZWFjaCBkaWZmaWN1bHQgc3BvdDsgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+dGhlIG90aGVyIGRpdmlzaW9ucywgb25lIG9uIGVpdGhlciBzaWRlLCBzdHJvdmUgdG8ga2VlcCBwYWNlIHdpdGggaGltLCBhbmQgZ3JhcHBsZWQgZWFnZXJseSB3aXRoIHRoZSBkaWZmaWN1bHRpZXMgcHJlc2VudGVkIGJ5IHRoZSByb3VnaCBncm91bmQuIE1lYW53aGlsZSB0aGUgc3VuIHJvc2UsIGFuZCBhIHNtb2tlLW5vdCBjbGVhcmx5IGRlZmluZWQsIGJ1dCByZXNlbWJsaW5nIGEgbW91bnRhaW4gbWlzdC1saWZ0ZWQgaXRzZWxmIGFuZCBjYW1lIGludG8gdmlldyBmcm9tIGFmYXIuIFRoZSBlbmVteSBkaWQgbm90IG5vdGljZSBpdCwgZm9yIGl0IHdhcyBiZWhpbmQgdGhlbSwgd2hlcmUgdGhlIGhlaWdodHMgd2VyZSBhbHJlYWR5IG9jY3VwaWVkLCBhbmQgdGhlIFJvbWFucyB3ZXJlIG9mIGRvdWJ0ZnVsIG1pbmQgYWJvdXQgaXQsIGJ1dCBhcyB0aGV5IHN0cnVnZ2xlZCBhbmQgbGFib3VyZWQgb24sIHRoZXkgbGV0IHRoZWlyIHdpc2hlcyBkZXRlcm1pbmUgdGhlaXIgaG9wZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBzbW9rZSBpbmNyZWFzZWQgaW4gc2l6ZSBhbmQgZGFya2VuZWQgdGhlIGFpciwgYW5kIGFzY2VuZGluZyBpbiBncmVhdCB2b2x1bWUgd2FzIGNsZWFybHkgc2VlbiB0byBiZSBhIGZpcmUtc2lnbmFsIGZyb20gdGhlaXIgZnJpZW5kcywgdGhlbiB0aGUgUm9tYW5zIGJlbG93IHJhaXNlZCBzaG91dHMgb2YgdHJpdW1waCBhbmQgZGFzaGVkIHVwb24gdGhlaXIgZm9lcyBhbmQgY3Jvd2RlZCB0aGVtIHRvZ2V0aGVyIGludG8gdGhlIHJvdWdoZXN0IHBsYWNlcywgd2hpbGUgdGhlIFJvbWFucyBiZWhpbmQgdGhlIGVuZW15IHNlbnQgZG93biBhbnN3ZXJpbmcgc2hvdXRzIGZyb20gdGhlIGhlaWdodHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHNlbmRpbmcgb2ZmIHRoaXMgZGV0YWNobWVudCwgVGl0dXMga2VwdCBoaXMgYXJteSBxdWlldCBmb3IgdHdvIGRheXMsIGV4Y2VwdCBzbyBmYXIgYXMgaGUgZHJldyBvZmYgdGhlIGVuZW15J3MgYXR0ZW50aW9uIGJ5IHNraXJtaXNoZXM7IGJ1dCB3aGVuIHRoZSBkYXkgY2FtZSBvbiB3aGljaCB0aGUgZW52ZWxvcGluZyBwYXJ0eSB3ZXJlIGV4cGVjdGVkIHRvIHNob3cgdGhlbXNlbHZlcyBvbiB0aGUgaGVpZ2h0cywgYXQgZGF5YnJlYWsgaGUgcHV0IGFsbCBoaXMgaGVhdnktYXJtZWQgYW5kIGFsbCBoaXMgbGlnaHQtYXJtZWQgdHJvb3BzIGluIG1vdGlvbi4gRGl2aWRpbmcgaGlzIGZvcmNlcyBpbnRvIHRocmVlIHBhcnRzLCBoZSBoaW1zZWxmIGxlZCBoaXMgY29ob3J0cyBpbiBjb2x1bW4gZm9ybWF0aW9uIHVwIGludG8gdGhlIG5hcnJvd2VzdCBwYXJ0IG9mIHRoZSByYXZpbmUgYWxvbmcgdGhlIHN0cmVhbSwgcGVsdGVkIHdpdGggbWlzc2lsZXMgYnkgdGhlIE1hY2Vkb25pYW5zIGFuZCBlbmdhZ2luZyBhdCBjbG9zZSBxdWFydGVycyB3aXRoIHRob3NlIHdobyBjb25mcm9udGVkIGhpbSBhdCBlYWNoIGRpZmZpY3VsdCBzcG90OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnRoZSBvdGhlciBkaXZpc2lvbnMsIG9uZSBvbiBlaXRoZXIgc2lkZSwgc3Ryb3ZlIHRvIGtlZXAgcGFjZSB3aXRoIGhpbSwgYW5kIGdyYXBwbGVkIGVhZ2VybHkgd2l0aCB0aGUgZGlmZmljdWx0aWVzIHByZXNlbnRlZCBieSB0aGUgcm91Z2ggZ3JvdW5kLiBNZWFud2hpbGUgdGhlIHN1biByb3NlLCBhbmQgYSBzbW9rZS1ub3QgY2xlYXJseSBkZWZpbmVkLCBidXQgcmVzZW1ibGluZyBhIG1vdW50YWluIG1pc3QtbGlmdGVkIGl0c2VsZiBhbmQgY2FtZSBpbnRvIHZpZXcgZnJvbSBhZmFyLiBUaGUgZW5lbXkgZGlkIG5vdCBub3RpY2UgaXQsIGZvciBpdCB3YXMgYmVoaW5kIHRoZW0sIHdoZXJlIHRoZSBoZWlnaHRzIHdlcmUgYWxyZWFkeSBvY2N1cGllZCwgYW5kIHRoZSBSb21hbnMgd2VyZSBvZiBkb3VidGZ1bCBtaW5kIGFib3V0IGl0LCBidXQgYXMgdGhleSBzdHJ1Z2dsZWQgYW5kIGxhYm91cmVkIG9uLCB0aGV5IGxldCB0aGVpciB3aXNoZXMgZGV0ZXJtaW5lIHRoZWlyIGhvcGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBzbW9rZSBpbmNyZWFzZWQgaW4gc2l6ZSBhbmQgZGFya2VuZWQgdGhlIGFpciwgYW5kIGFzY2VuZGluZyBpbiBncmVhdCB2b2x1bWUgd2FzIGNsZWFybHkgc2VlbiB0byBiZSBhIGZpcmUtc2lnbmFsIGZyb20gdGhlaXIgZnJpZW5kcywgdGhlbiB0aGUgUm9tYW5zIGJlbG93IHJhaXNlZCBzaG91dHMgb2YgdHJpdW1waCBhbmQgZGFzaGVkIHVwb24gdGhlaXIgZm9lcyBhbmQgY3Jvd2RlZCB0aGVtIHRvZ2V0aGVyIGludG8gdGhlIHJvdWdoZXN0IHBsYWNlcywgd2hpbGUgdGhlIFJvbWFucyBiZWhpbmQgdGhlIGVuZW15IHNlbnQgZG93biBhbnN3ZXJpbmcgc2hvdXRzIGZyb20gdGhlIGhlaWdodHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlbiwgdGhlIGVuZW15IGZsZWQgcHJlY2lwaXRhdGVseSwgYnV0IG5vdCBtb3JlIHRoYW4gdHdvIHRob3VzYW5kIG9mIHRoZW0gZmVsbDs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TbyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzMi4xMiIgdmFsaWQ9InllcyI+TGl2eSwgeHh4aWkuIDEyPC9iaWJsPi48L25vdGU+IGZvciB0aGUgZGlmZmljdWx0aWVzIG9mIHRoZSBncm91bmQgbWFkZSBwdXJzdWl0IGltcG9zc2libGUuIEhvd2V2ZXIsIHRoZSBSb21hbnMgbWFkZSBzcG9pbCBvZiB0aGVpciBtb25leSwgdGVudHMsIGFuZCBzbGF2ZXMsIG1hc3RlcmVkIHRoZSBwYXNzLCBhbmQgdHJhdmVyc2VkIGFsbCBwYXJ0cyBvZiBFcGlydXMsIGJ1dCBpbiBzdWNoIGFuIG9yZGVybHkgbWFubmVyIGFuZCB3aXRoIHNvIGdyZWF0IHJlc3RyYWludCB0aGF0LCBhbHRob3VnaCB0aGV5IHdlcmUgZmFyIGZyb20gdGhlaXIgZmxlZXQgYW5kIHRoZSBzZWEsIGFuZCBhbHRob3VnaCB0aGVpciBtb250aGx5IHJhdGlvbnMgb2YgZ3JhaW4gaGFkIG5vdCBiZWVuIG1lYXN1cmVkIG91dCB0byB0aGVtIGFuZCB0aGV5IGNvdWxkIGJ1eSBsaXR0bGUsIHRoZXkgbmV2ZXJ0aGVsZXNzIHJlZnJhaW5lZCBmcm9tIHBsdW5kZXJpbmcgdGhlIGNvdW50cnksIHdoaWNoIG9mZmVyZWQgYWJ1bmRhbnQgYm9vdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBUaXR1cyBoYWQgbGVhcm5lZCB0aGF0IFBoaWxpcCwgaW4gcGFzc2luZyB0aHJvdWdoIFRoZXNzYWx5IGxpa2UgYSBmdWdpdGl2ZSwgd2FzIGRyaXZpbmcgdGhlIGluaGFiaXRhbnRzIGZyb20gdGhlaXIgY2l0aWVzIGludG8gdGhlIG1vdW50YWlucywgYnVybmluZyBkb3duIHRoZSBjaXRpZXMsIGFuZCBhbGxvd2luZyBoaXMgc29sZGllcnMgdG8gcGx1bmRlciB0aGUgd2VhbHRoIHdoaWNoIHdhcyB0b28gYWJ1bmRhbnQgb3IgdG9vIGhlYXZ5IHRvIGJlIGNhcnJpZWQgYXdheSwgdGh1cyBpbiBhIG1hbm5lciBjZWRpbmcgdGhlIGNvdW50cnkgYWxyZWFkeSB0byB0aGUgUm9tYW5zLiBUaXR1cyB3YXMgdGhlcmVmb3JlIGFtYml0aW91cywgYW5kIGV4aG9ydGVkIGhpcyBzb2xkaWVycyBhY2NvcmRpbmdseSB0byBzcGFyZSB0aGUgY291bnRyeSBpbiBtYXJjaGluZyB0aHJvdWdoIGl0LCBhbmQgdG8gdHJlYXQgaXQgYXMgdGhvdWdoIGl0IGhhZCBiZWVuIGhhbmRlZCBvdmVyIHRvIHRoZW0gYW5kIHdlcmUgdGhlaXIgb3duLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW5kZWVkIHRoZSByZXN1bHRzIHNob3dlZCB0aGVtIGF0IG9uY2UgdGhlIGFkdmFudGFnZXMgb2YgdGhpcyBvcmRlcmx5IGNvbmR1Y3QuIEZvciBhcyBzb29uIGFzIHRoZXkgcmVhY2hlZCBUaGVzc2FseSB0aGUgY2l0aWVzIGNhbWUgb3ZlciB0byB0aGVtLCB0aGUgR3JlZWtzIHNvdXRoIG9mIFRoZXJtb3B5bGFlIHdlcmUgYWxsIGVhZ2VybmVzcyBhbmQgZXhjaXRlbWVudCB0byBmaW5kIFRpdHVzLCBhbmQgdGhlIEFjaGFlYW5zLCByZW5vdW5jaW5nIHRoZWlyIGFsbGlhbmNlIHdpdGggUGhpbGlwLCB2b3RlZCB0byBqb2luIHRoZSBSb21hbnMgaW4gbWFraW5nIHdhciB1cG9uIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIE9wdW50aWFucywgbW9yZW92ZXIsIGFsdGhvdWdoIHRoZSBBZXRvbGlhbnMsIHdobyB3ZXJlIGF0IHRoYXQgdGltZSBmaWdodGluZyBtb3N0IHplYWxvdXNseSBvbiB0aGUgc2lkZSBvZiB0aGUgUm9tYW5zLCBhc2tlZCBwZXJtaXNzaW9uIHRvIHRha2UgT3B1cyBpbiBjaGFyZ2UgYW5kIHByb3RlY3QgdGhlIGNpdHksIHdvdWxkIG5vdCBncmFudCB0aGUgcmVxdWVzdCwgYnV0IHNlbnQgZm9yIFRpdHVzIGFuZCBnYXZlIHRoZW1zZWx2ZXMgd2l0aCB0aGUgZnVsbGVzdCBjb25maWRlbmNlIGludG8gaGlzIGhhbmRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBvbmNlLCB0aGVuLCB0aGUgZW5lbXkgZmxlZCBwcmVjaXBpdGF0ZWx5LCBidXQgbm90IG1vcmUgdGhhbiB0d28gdGhvdXNhbmQgb2YgdGhlbSBmZWxsOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U28gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzMi4xMiIgdmFsaWQ9InllcyI+TGl2eSwgeHh4aWkuIDEyPC9iaWJsPi48L25vdGU+IGZvciB0aGUgZGlmZmljdWx0aWVzIG9mIHRoZSBncm91bmQgbWFkZSBwdXJzdWl0IGltcG9zc2libGUuIEhvd2V2ZXIsIHRoZSBSb21hbnMgbWFkZSBzcG9pbCBvZiB0aGVpciBtb25leSwgdGVudHMsIGFuZCBzbGF2ZXMsIG1hc3RlcmVkIHRoZSBwYXNzLCBhbmQgdHJhdmVyc2VkIGFsbCBwYXJ0cyBvZiBFcGlydXMsIGJ1dCBpbiBzdWNoIGFuIG9yZGVybHkgbWFubmVyIGFuZCB3aXRoIHNvIGdyZWF0IHJlc3RyYWludCB0aGF0LCBhbHRob3VnaCB0aGV5IHdlcmUgZmFyIGZyb20gdGhlaXIgZmxlZXQgYW5kIHRoZSBzZWEsIGFuZCBhbHRob3VnaCB0aGVpciBtb250aGx5IHJhdGlvbnMgb2YgZ3JhaW4gaGFkIG5vdCBiZWVuIG1lYXN1cmVkIG91dCB0byB0aGVtIGFuZCB0aGV5IGNvdWxkIGJ1eSBsaXR0bGUsIHRoZXkgbmV2ZXJ0aGVsZXNzIHJlZnJhaW5lZCBmcm9tIHBsdW5kZXJpbmcgdGhlIGNvdW50cnksIHdoaWNoIG9mZmVyZWQgYWJ1bmRhbnQgYm9vdHkuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzMi4xMiIgdmFsaWQ9InllcyI+TGl2eSwgeHh4aWkuIDEyPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBUaXR1cyBoYWQgbGVhcm5lZCB0aGF0IFBoaWxpcCwgaW4gcGFzc2luZyB0aHJvdWdoIFRoZXNzYWx5IGxpa2UgYSBmdWdpdGl2ZSwgd2FzIGRyaXZpbmcgdGhlIGluaGFiaXRhbnRzIGZyb20gdGhlaXIgY2l0aWVzIGludG8gdGhlIG1vdW50YWlucywgYnVybmluZyBkb3duIHRoZSBjaXRpZXMsIGFuZCBhbGxvd2luZyBoaXMgc29sZGllcnMgdG8gcGx1bmRlciB0aGUgd2VhbHRoIHdoaWNoIHdhcyB0b28gYWJ1bmRhbnQgb3IgdG9vIGhlYXZ5IHRvIGJlIGNhcnJpZWQgYXdheSwgdGh1cyBpbiBhIG1hbm5lciBjZWRpbmcgdGhlIGNvdW50cnkgYWxyZWFkeSB0byB0aGUgUm9tYW5zLiBUaXR1cyB3YXMgdGhlcmVmb3JlIGFtYml0aW91cywgYW5kIGV4aG9ydGVkIGhpcyBzb2xkaWVycyBhY2NvcmRpbmdseSB0byBzcGFyZSB0aGUgY291bnRyeSBpbiBtYXJjaGluZyB0aHJvdWdoIGl0LCBhbmQgdG8gdHJlYXQgaXQgYXMgdGhvdWdoIGl0IGhhZCBiZWVuIGhhbmRlZCBvdmVyIHRvIHRoZW0gYW5kIHdlcmUgdGhlaXIgb3duLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhlIHJlc3VsdHMgc2hvd2VkIHRoZW0gYXQgb25jZSB0aGUgYWR2YW50YWdlcyBvZiB0aGlzIG9yZGVybHkgY29uZHVjdC4gRm9yIGFzIHNvb24gYXMgdGhleSByZWFjaGVkIFRoZXNzYWx5IHRoZSBjaXRpZXMgY2FtZSBvdmVyIHRvIHRoZW0sIHRoZSBHcmVla3Mgc291dGggb2YgVGhlcm1vcHlsYWUgd2VyZSBhbGwgZWFnZXJuZXNzIGFuZCBleGNpdGVtZW50IHRvIGZpbmQgVGl0dXMsIGFuZCB0aGUgQWNoYWVhbnMsIHJlbm91bmNpbmcgdGhlaXIgYWxsaWFuY2Ugd2l0aCBQaGlsaXAsIHZvdGVkIHRvIGpvaW4gdGhlIFJvbWFucyBpbiBtYWtpbmcgd2FyIHVwb24gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBPcHVudGlhbnMsIG1vcmVvdmVyLCBhbHRob3VnaCB0aGUgQWV0b2xpYW5zLCB3aG8gd2VyZSBhdCB0aGF0IHRpbWUgZmlnaHRpbmcgbW9zdCB6ZWFsb3VzbHkgb24gdGhlIHNpZGUgb2YgdGhlIFJvbWFucywgYXNrZWQgcGVybWlzc2lvbiB0byB0YWtlIE9wdXMgaW4gY2hhcmdlIGFuZCBwcm90ZWN0IHRoZSBjaXR5LCB3b3VsZCBub3QgZ3JhbnQgdGhlIHJlcXVlc3QsIGJ1dCBzZW50IGZvciBUaXR1cyBhbmQgZ2F2ZSB0aGVtc2VsdmVzIHdpdGggdGhlIGZ1bGxlc3QgY29uZmlkZW5jZSBpbnRvIGhpcyBoYW5kcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3csIHdlIGFyZSB0b2xkIHRoYXQgUHlycmh1cywgd2hlbiBmb3IgdGhlIGZpcnN0IHRpbWUgaGUgYmVoZWxkIGZyb20gYSBsb29rLW91dCBwbGFjZSB0aGUgYXJteSBvZiB0aGUgUm9tYW5zIGluIGZ1bGwgYXJyYXksIGhhZCBzYWlkIHRoYXQgaGUgc2F3IG5vdGhpbmcgYmFyYmFyaWMgaW4gdGhlIEJhcmJhcmlhbnMnIGxpbmUgb2YgYmF0dGxlOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQeXJyaC4gMTYuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlB5cnJodXM8L3RpdGxlPiwgeHZpLiA1PC9iaWJsPi48L25vdGU+IGFuZCBzbyB0aG9zZSB3aG8gZm9yIHRoZSBmaXJzdCB0aW1lIG1ldCBUaXR1cyB3ZXJlIGNvbXBlbGxlZCB0byBzcGVhayBpbiBhIHNpbWlsYXIgc3RyYWluLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IGhhZCBoZWFyZCB0aGUgTWFjZWRvbmlhbnMgc2F5IHRoYXQgYSBjb21tYW5kZXIgYSBiYXJiYXJpYW4gaG9zdCB3YXMgY29taW5nIGFnYWluc3QgdGhlbSwgd2hvIHN1YmR1ZWQgYW5kIGVuc2xhdmVkIGV2ZXJ5d2hlcmUgYnkgZm9yY2Ugb2YgYXJtczsgYW5kIHRoZW4sIHdoZW4gdGhleSBtZXQgYSBtYW4gd2hvIHdhcyB5b3VuZyBpbiB5ZWFycywgaHVtYW5lIGluIGFzcGVjdCwgYSBHcmVlayBpbiB2b2ljZSBhbmQgbGFuZ3VhZ2UsIGFuZCBhIGxvdmVyIG9mIGdlbnVpbmUgaG9ub3VyLCB0aGV5IHdlcmUgd29uZGVyZnVsbHkgY2hhcm1lZCwgYW5kIHdoZW4gdGhleSByZXR1cm5lZCB0byB0aGVpciBjaXRpZXMgdGhleSBmaWxsZWQgdGhlbSB3aXRoIGtpbmRseSBmZWVsaW5ncyB0b3dhcmRzIGhpbSBhbmQgdGhlIGJlbGllZiB0aGF0IGluIGhpbSB0aGV5IGhhZCBhIGNoYW1waW9uIG9mIHRoZWlyIGxpYmVydGllcy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBUaXR1cyBoYWQgYSBtZWV0aW5nIHdpdGggUGhpbGlwICh3aG8gc2VlbWVkIGRpc3Bvc2VkIHRvIG1ha2UgdGVybXMpLCBhbmQgcHJvZmZlcmVkIGhpbSBwZWFjZSBhbmQgZnJpZW5kc2hpcCBvbiBjb25kaXRpb24gdGhhdCBoZSBhbGxvd2VkIHRoZSBHcmVla3MgdG8gYmUgaW5kZXBlbmRlbnQgYW5kIHdpdGhkcmF3IGhpcyBnYXJyaXNvbnMgZnJvbSB0aGVpciBjaXRpZXM7IGJ1dCB0aGlzIHByb2ZmZXIgUGhpbGlwIHdvdWxkIG5vdCBhY2NlcHQuIFRoZW4gYXQgbGFzdCBpdCBiZWNhbWUgcXVpdGUgY2xlYXIgZXZlbiB0byB0aGUgcGFydGlzYW5zIG9mIFBoaWxpcCB0aGF0IHRoZSBSb21hbnMgd2VyZSBjb21lIHRvIHdhZ2Ugd2FyLCBub3QgdXBvbiB0aGUgR3JlZWtzLCBidXQgdXBvbiB0aGUgTWFjZWRvbmlhbnMgaW4gYmVoYWxmIG9mIHRoZSBHcmVla3MuCgkJCTwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB5cnJoLiAxNi41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHlycmh1czwvdGl0bGU+LCB4dmkuIDU8L2JpYmw+Ljwvbm90ZT4gYW5kIHNvIHRob3NlIHdobyBmb3IgdGhlIGZpcnN0IHRpbWUgbWV0IFRpdHVzIHdlcmUgY29tcGVsbGVkIHRvIHNwZWFrIGluIGEgc2ltaWxhciBzdHJhaW4uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHlycmguIDE2LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QeXJyaHVzPC90aXRsZT4sIHh2aS4gNTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHlycmh1czwvdGl0bGU+LCB4dmkuIDU8L3RyYW5zbGF0aW9uPg=="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IGhhZCBoZWFyZCB0aGUgTWFjZWRvbmlhbnMgc2F5IHRoYXQgYSBjb21tYW5kZXIgYSBiYXJiYXJpYW4gaG9zdCB3YXMgY29taW5nIGFnYWluc3QgdGhlbSwgd2hvIHN1YmR1ZWQgYW5kIGVuc2xhdmVkIGV2ZXJ5d2hlcmUgYnkgZm9yY2Ugb2YgYXJtczsgYW5kIHRoZW4sIHdoZW4gdGhleSBtZXQgYSBtYW4gd2hvIHdhcyB5b3VuZyBpbiB5ZWFycywgaHVtYW5lIGluIGFzcGVjdCwgYSBHcmVlayBpbiB2b2ljZSBhbmQgbGFuZ3VhZ2UsIGFuZCBhIGxvdmVyIG9mIGdlbnVpbmUgaG9ub3VyLCB0aGV5IHdlcmUgd29uZGVyZnVsbHkgY2hhcm1lZCwgYW5kIHdoZW4gdGhleSByZXR1cm5lZCB0byB0aGVpciBjaXRpZXMgdGhleSBmaWxsZWQgdGhlbSB3aXRoIGtpbmRseSBmZWVsaW5ncyB0b3dhcmRzIGhpbSBhbmQgdGhlIGJlbGllZiB0aGF0IGluIGhpbSB0aGV5IGhhZCBhIGNoYW1waW9uIG9mIHRoZWlyIGxpYmVydGllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgVGl0dXMgaGFkIGEgbWVldGluZyB3aXRoIFBoaWxpcCAod2hvIHNlZW1lZCBkaXNwb3NlZCB0byBtYWtlIHRlcm1zKSwgYW5kIHByb2ZmZXJlZCBoaW0gcGVhY2UgYW5kIGZyaWVuZHNoaXAgb24gY29uZGl0aW9uIHRoYXQgaGUgYWxsb3dlZCB0aGUgR3JlZWtzIHRvIGJlIGluZGVwZW5kZW50IGFuZCB3aXRoZHJhdyBoaXMgZ2Fycmlzb25zIGZyb20gdGhlaXIgY2l0aWVzOyBidXQgdGhpcyBwcm9mZmVyIFBoaWxpcCB3b3VsZCBub3QgYWNjZXB0LiBUaGVuIGF0IGxhc3QgaXQgYmVjYW1lIHF1aXRlIGNsZWFyIGV2ZW4gdG8gdGhlIHBhcnRpc2FucyBvZiBQaGlsaXAgdGhhdCB0aGUgUm9tYW5zIHdlcmUgY29tZSB0byB3YWdlIHdhciwgbm90IHVwb24gdGhlIEdyZWVrcywgYnV0IHVwb24gdGhlIE1hY2Vkb25pYW5zIGluIGJlaGFsZiBvZiB0aGUgR3JlZWtzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgb3RoZXIgcGFydHMgb2YgR3JlZWNlIGNhbWUgb3ZlciB0byB0aGUgc2lkZSBvZiBUaXR1cyB3aXRob3V0IGFueSB0cm91YmxlOyBidXQgYXMgaGUgd2FzIGVudGVyaW5nIEJvZW90aWEgd2l0aG91dCBob3N0aWxlIGRlbW9uc3RyYXRpb25zLCB0aGUgbGVhZGluZyBtZW4gb2YgVGhlYmVzIGNhbWUgdG8gbWVldCBoaW0uIFRoZXkgd2VyZSBpbiBzeW1wYXRoeSB3aXRoIHRoZSBNYWNlZG9uaWFuIGNhdXNlIHRocm91Z2ggdGhlIGVmZm9ydHMgb2YgQnJhY2h5bGxhcywgYnV0IHdlbGNvbWVkIFRpdHVzIGFuZCBzaG93ZWQgaGltIGhvbm91ciwgcHJvZmVzc2luZyB0byBiZSBvbiBmcmllbmRseSB0ZXJtcyB3aXRoIGJvdGggcGFydGllcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGl0dXMgbWV0IGFuZCBncmVldGVkIHRoZW0ga2luZGx5LCBhbmQgdGhlbiBwcm9jZWVkZWQgcXVpZXRseSBvbiBoaXMgam91cm5leSwgc29tZXRpbWVzIGFza2luZyBxdWVzdGlvbnMgZm9yIGhpcyBvd24gaW5mb3JtYXRpb24gYW5kIHNvbWV0aW1lcyBkaXNjb3Vyc2luZyBhdCBsZW5ndGgsIGFuZCBwdXJwb3NlbHkgZGl2ZXJ0aW5nIHRoZW0gdW50aWwgaGlzIHNvbGRpZXJzIHNob3VsZCBjb21lIHVwIGZyb20gdGhlaXIgbWFyY2guIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgbGVkIHRoZW0gZm9yd2FyZCBhbmQgZW50ZXJlZCB0aGUgY2l0eSBhbG9uZyB3aXRoIHRoZSBUaGViYW5zLCB3aG8gd2VyZSBub3QgYXQgYWxsIHBsZWFzZWQgdGhlcmVhdCwgYnV0IGhlc2l0YXRlZCB0byBvcHBvc2UgaGltLCBzaW5jZSBhIGdvb2RseSBudW1iZXIgb2Ygc29sZGllcnMgd2VyZSBpbiBoaXMgZm9sbG93aW5nLiBUaXR1cywgaG93ZXZlciwganVzdCBhcyB0aG91Z2ggdGhlIGNpdHkgd2VyZSBub3QgaW4gaGlzIHBvd2VyLCBjYW1lIGJlZm9yZSB0aGVpciBhc3NlbWJseSBhbmQgdHJpZWQgdG8gcGVyc3VhZGUgdGhlbSB0byBzaWRlIHdpdGggdGhlIFJvbWFucywgYW5kIEF0dGFsdXMgdGhlIGtpbmcgc2Vjb25kZWQgaGltIGluIGhpcyBhcHBlYWxzIGFuZCBleGhvcnRhdGlvbnMgdG8gdGhlIFRoZWJhbnMuIEJ1dCBBdHRhbHVzLCBhcyBpdCB3b3VsZCBhcHBlYXIsIGluIGhpcyBlYWdlcm5lc3MgdG8gcGxheSB0aGUgb3JhdG9yIGZvciBUaXR1cywgd2VudCBiZXlvbmQgaGlzIGFnZWQgc3RyZW5ndGgsIGFuZCBpbiB0aGUgdmVyeSBtaWRzdCBvZiBoaXMgc3BlZWNoLCBiZWluZyBzZWl6ZWQgd2l0aCBhIHZlcnRpZ28gb3IgYW4gYXBvcGxleHksIHN1ZGRlbmx5IGZhaW50ZWQgYW5kIGZlbGwsIGFuZCBzaG9ydGx5IGFmdGVyd2FyZHMgd2FzIGNvbnZleWVkIGJ5IGhpcyBmbGVldCB0byBBc2lhLCB3aGVyZSBoZSBkaWVkLiBUaGUgQm9lb3RpYW5zIGFsbGllZCB0aGVtc2VsdmVzIHdpdGggdGhlIFJvbWFucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhlIG90aGVyIHBhcnRzIG9mIEdyZWVjZSBjYW1lIG92ZXIgdG8gdGhlIHNpZGUgb2YgVGl0dXMgd2l0aG91dCBhbnkgdHJvdWJsZTsgYnV0IGFzIGhlIHdhcyBlbnRlcmluZyBCb2VvdGlhIHdpdGhvdXQgaG9zdGlsZSBkZW1vbnN0cmF0aW9ucywgdGhlIGxlYWRpbmcgbWVuIG9mIFRoZWJlcyBjYW1lIHRvIG1lZXQgaGltLiBUaGV5IHdlcmUgaW4gc3ltcGF0aHkgd2l0aCB0aGUgTWFjZWRvbmlhbiBjYXVzZSB0aHJvdWdoIHRoZSBlZmZvcnRzIG9mIEJyYWNoeWxsYXMsIGJ1dCB3ZWxjb21lZCBUaXR1cyBhbmQgc2hvd2VkIGhpbSBob25vdXIsIHByb2Zlc3NpbmcgdG8gYmUgb24gZnJpZW5kbHkgdGVybXMgd2l0aCBib3RoIHBhcnRpZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRpdHVzIG1ldCBhbmQgZ3JlZXRlZCB0aGVtIGtpbmRseSwgYW5kIHRoZW4gcHJvY2VlZGVkIHF1aWV0bHkgb24gaGlzIGpvdXJuZXksIHNvbWV0aW1lcyBhc2tpbmcgcXVlc3Rpb25zIGZvciBoaXMgb3duIGluZm9ybWF0aW9uIGFuZCBzb21ldGltZXMgZGlzY291cnNpbmcgYXQgbGVuZ3RoLCBhbmQgcHVycG9zZWx5IGRpdmVydGluZyB0aGVtIHVudGlsIGhpcyBzb2xkaWVycyBzaG91bGQgY29tZSB1cCBmcm9tIHRoZWlyIG1hcmNoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgbGVkIHRoZW0gZm9yd2FyZCBhbmQgZW50ZXJlZCB0aGUgY2l0eSBhbG9uZyB3aXRoIHRoZSBUaGViYW5zLCB3aG8gd2VyZSBub3QgYXQgYWxsIHBsZWFzZWQgdGhlcmVhdCwgYnV0IGhlc2l0YXRlZCB0byBvcHBvc2UgaGltLCBzaW5jZSBhIGdvb2RseSBudW1iZXIgb2Ygc29sZGllcnMgd2VyZSBpbiBoaXMgZm9sbG93aW5nLiBUaXR1cywgaG93ZXZlciwganVzdCBhcyB0aG91Z2ggdGhlIGNpdHkgd2VyZSBub3QgaW4gaGlzIHBvd2VyLCBjYW1lIGJlZm9yZSB0aGVpciBhc3NlbWJseSBhbmQgdHJpZWQgdG8gcGVyc3VhZGUgdGhlbSB0byBzaWRlIHdpdGggdGhlIFJvbWFucywgYW5kIEF0dGFsdXMgdGhlIGtpbmcgc2Vjb25kZWQgaGltIGluIGhpcyBhcHBlYWxzIGFuZCBleGhvcnRhdGlvbnMgdG8gdGhlIFRoZWJhbnMuIEJ1dCBBdHRhbHVzLCBhcyBpdCB3b3VsZCBhcHBlYXIsIGluIGhpcyBlYWdlcm5lc3MgdG8gcGxheSB0aGUgb3JhdG9yIGZvciBUaXR1cywgd2VudCBiZXlvbmQgaGlzIGFnZWQgc3RyZW5ndGgsIGFuZCBpbiB0aGUgdmVyeSBtaWRzdCBvZiBoaXMgc3BlZWNoLCBiZWluZyBzZWl6ZWQgd2l0aCBhIHZlcnRpZ28gb3IgYW4gYXBvcGxleHksIHN1ZGRlbmx5IGZhaW50ZWQgYW5kIGZlbGwsIGFuZCBzaG9ydGx5IGFmdGVyd2FyZHMgd2FzIGNvbnZleWVkIGJ5IGhpcyBmbGVldCB0byBBc2lhLCB3aGVyZSBoZSBkaWVkLiBUaGUgQm9lb3RpYW5zIGFsbGllZCB0aGVtc2VsdmVzIHdpdGggdGhlIFJvbWFucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5QaGlsaXAgbm93IHNlbnQgYW4gZW1iYXNzeSB0byBSb21lLCBhbmQgVGl0dXMgdGhlcmVmb3JlIGRpc3BhdGNoZWQgdGhpdGhlciBoaXMgb3duIHJlcHJlc2VudGF0aXZlcywgd2hvIHdlcmUgdG8gaW5kdWNlIHRoZSBzZW5hdGUgdG8gdm90ZSBoaW0gYW4gZXh0ZW5zaW9uIG9mIGNvbW1hbmQgaW4gY2FzZSB0aGUgd2FyIGNvbnRpbnVlZCwgb3IsIGlmIGl0IGRpZCBub3QsIHRoZSBwb3dlciB0byBtYWtlIHBlYWNlLiBGb3IgaGUgd2FzIGNvdmV0b3VzIG9mIGhvbm91ciwgYW5kIHdhcyBncmVhdGx5IGFmcmFpZCB0aGF0IGhlIHdvdWxkIGJlIHJvYmJlZCBvZiBoaXMgZ2xvcnkgaWYgYW5vdGhlciBnZW5lcmFsIHdlcmUgc2VudCB0byBjYXJyeSBvbiB0aGUgd2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgZnJpZW5kcyBtYW5hZ2VkIG1hdHRlcnMgc28gc3VjY2Vzc2Z1bGx5IGZvciBoaW0gdGhhdCBQaGlsaXAgZmFpbGVkIHRvIGdldCB3aGF0IGhlIHdhbnRlZCBhbmQgdGhlIGNvbW1hbmQgaW4gdGhlIHdhciB3YXMgY29udGludWVkIHRvIFRpdHVzLiBPbiByZWNlaXZpbmcgdGhlIGRlY3JlZSBvZiB0aGUgc2VuYXRlLCBoZSB3YXMgbGlmdGVkIHVwIGluIGhpcyBob3BlcyBhbmQgYXQgb25jZSBoYXN0ZW5lZCBpbnRvIFRoZXNzYWx5IHRvIHByb3NlY3V0ZSB0aGUgd2FyIGFnYWluc3QgUGhpbGlwLiBIZSBoYWQgb3ZlciB0d2VudHktc2l4IHRob3VzYW5kIHNvbGRpZXJzLCBvZiB3aG9tIHNpeCB0aG91c2FuZCBpbmZhbnRyeSBhbmQgZm91ciBodW5kcmVkIGNhdmFscnkgd2VyZSBmdXJuaXNoZWQgYnkgdGhlIEFldG9saWFucy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzMuMSIgdmFsaWQ9InllcyI+TGl2eSwgeHh4aWlpLiAxIGY8L2JpYmw+Ljwvbm90ZT4gUGhpbGlwJ3MgYXJteSBhbHNvIHdhcyBvZiBhYm91dCB0aGUgc2FtZSBzaXplLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDMzLjQiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eGlpaS4gNDwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5QaGlsaXAgbm93IHNlbnQgYW4gZW1iYXNzeSB0byBSb21lLCBhbmQgVGl0dXMgdGhlcmVmb3JlIGRpc3BhdGNoZWQgdGhpdGhlciBoaXMgb3duIHJlcHJlc2VudGF0aXZlcywgd2hvIHdlcmUgdG8gaW5kdWNlIHRoZSBzZW5hdGUgdG8gdm90ZSBoaW0gYW4gZXh0ZW5zaW9uIG9mIGNvbW1hbmQgaW4gY2FzZSB0aGUgd2FyIGNvbnRpbnVlZCwgb3IsIGlmIGl0IGRpZCBub3QsIHRoZSBwb3dlciB0byBtYWtlIHBlYWNlLiBGb3IgaGUgd2FzIGNvdmV0b3VzIG9mIGhvbm91ciwgYW5kIHdhcyBncmVhdGx5IGFmcmFpZCB0aGF0IGhlIHdvdWxkIGJlIHJvYmJlZCBvZiBoaXMgZ2xvcnkgaWYgYW5vdGhlciBnZW5lcmFsIHdlcmUgc2VudCB0byBjYXJyeSBvbiB0aGUgd2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBmcmllbmRzIG1hbmFnZWQgbWF0dGVycyBzbyBzdWNjZXNzZnVsbHkgZm9yIGhpbSB0aGF0IFBoaWxpcCBmYWlsZWQgdG8gZ2V0IHdoYXQgaGUgd2FudGVkIGFuZCB0aGUgY29tbWFuZCBpbiB0aGUgd2FyIHdhcyBjb250aW51ZWQgdG8gVGl0dXMuIE9uIHJlY2VpdmluZyB0aGUgZGVjcmVlIG9mIHRoZSBzZW5hdGUsIGhlIHdhcyBsaWZ0ZWQgdXAgaW4gaGlzIGhvcGVzIGFuZCBhdCBvbmNlIGhhc3RlbmVkIGludG8gVGhlc3NhbHkgdG8gcHJvc2VjdXRlIHRoZSB3YXIgYWdhaW5zdCBQaGlsaXAuIEhlIGhhZCBvdmVyIHR3ZW50eS1zaXggdGhvdXNhbmQgc29sZGllcnMsIG9mIHdob20gc2l4IHRob3VzYW5kIGluZmFudHJ5IGFuZCBmb3VyIGh1bmRyZWQgY2F2YWxyeSB3ZXJlIGZ1cm5pc2hlZCBieSB0aGUgQWV0b2xpYW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzMuMSIgdmFsaWQ9InllcyI+TGl2eSwgeHh4aWlpLiAxIGY8L2JpYmw+Ljwvbm90ZT4gUGhpbGlwJ3MgYXJteSBhbHNvIHdhcyBvZiBhYm91dCB0aGUgc2FtZSBzaXplLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzMuMSIgdmFsaWQ9InllcyI+TGl2eSwgeHh4aWlpLiAxIGY8L2JpYmw+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U28gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzMy40IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpaWkuIDQ8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzMy40IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpaWkuIDQ8L2JpYmw+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0d28gYXJtaWVzIGFkdmFuY2VkIGFnYWluc3QgZWFjaCBvdGhlciB1bnRpbCB0aGV5IGNhbWUgaW50byB0aGUgbmVpZ2hib3VyaG9vZCBvZiBTY290dXNzYSwgYW5kIHRoZXJlIHRoZXkgcHJvcG9zZWQgdG8gZGVjaWRlIHRoZSBpc3N1ZSBieSBiYXR0bGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T24gdGhlIHNhbWUgYmF0dGxlZmllbGQgUGVsb3BpZGFzIGhhZCBiZWVuIGRlZmVhdGVkIGFuZCBzbGFpbiBieSBBbGV4YW5kZXIgb2YgUGhlcmFlLCBpbiAzNjQgQi5DLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDMyLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UGVsb3BpZGFzPC90aXRsZT4sIHh4eGlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGVpciBtdXR1YWwgcHJveGltaXR5IGRpZCBub3QgaW5zcGlyZSB0aGVtIHdpdGggZmVhciwgYXMgbWlnaHQgaGF2ZSBiZWVuIGV4cGVjdGVkOyBvbiB0aGUgY29udHJhcnksIHRoZXkgd2VyZSBmaWxsZWQgd2l0aCBhcmRvdXIgYW5kIGFtYml0aW9uLiBGb3IgdGhlIFJvbWFucyBob3BlZCB0byBjb25xdWVyIHRoZSBNYWNlZG9uaWFucywgd2hvc2UgcmVwdXRhdGlvbiBmb3IgcHJvd2VzcyBhbmQgc3RyZW5ndGggQWxleGFuZGVyIGhhZCByYWlzZWQgdG8gYSB2ZXJ5IGhpZ2ggcGl0Y2ggYW1vbmcgdGhlbTsgYW5kIHRoZSBNYWNlZG9uaWFucywgd2hvIGNvbnNpZGVyZWQgdGhlIFJvbWFucyBzdXBlcmlvciB0byB0aGUgUGVyc2lhbnMsIGhvcGVkLCBpbiBjYXNlIHRoZXkgcHJldmFpbGVkIG92ZXIgdGhlbSwgdG8gcHJvdmUgUGhpbGlwIGEgbW9yZSBicmlsbGlhbnQgY29tbWFuZGVyIHRoYW4gQWxleGFuZGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgVGl0dXMgZXhob3J0ZWQgaGlzIHNvbGRpZXJzIHRvIHNob3cgdGhlbXNlbHZlcyBicmF2ZSBtZW4gYW5kIGZ1bGwgb2Ygc3Bpcml0LCBhc3N1cmVkIHRoYXQgdGhleSB3ZXJlIGdvaW5nIHRvIGNvbnRlbmQgYWdhaW5zdCB0aGUgYnJhdmVzdCBvZiBhbnRhZ29uaXN0cyBpbiB0aGF0IGZhaXJlc3Qgb2YgYWxsIHRoZWF0cmVzLCBHcmVlY2U7IGFuZCBQaGlsaXAsIHRvbywgYmVnYW4gYSBzcGVlY2ggb2YgZXhob3J0YXRpb24gdG8gaGlzIHNvbGRpZXJzLCBhcyBpcyB0aGUgY3VzdG9tIGJlZm9yZSBhIGJhdHRsZS4gQnV0LCBlaXRoZXIgYnkgY2hhbmNlIG9yIGZyb20gaWdub3JhbmNlIGR1ZSB0byBhbiBpbm9wcG9ydHVuZSBoYXN0ZSwgaGUgaGFkIGFzY2VuZGVkIGZvciB0aGlzIHB1cnBvc2UgYSBsb2Z0eSBtb3VuZCBvdXRzaWRlIGhpcyBjYW1wLCBiZW5lYXRoIHdoaWNoIG1hbnkgbWVuIGxheSBidXJpZWQgaW4gYSBjb21tb24gZ3JhdmUsIGFuZCBhIGRyZWFkZnVsIGRlamVjdGlvbiBmZWxsIHVwb24gaGlzIGxpc3RlbmVycyBpbiB2aWV3IG9mIHRoZSBvbWVuLCBzbyB0aGF0IGhlIHdhcyBkZWVwbHkgdHJvdWJsZWQgYW5kIHJlZnJhaW5lZCBmcm9tIGJhdHRsZSB0aGF0IGRheS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0d28gYXJtaWVzIGFkdmFuY2VkIGFnYWluc3QgZWFjaCBvdGhlciB1bnRpbCB0aGV5IGNhbWUgaW50byB0aGUgbmVpZ2hib3VyaG9vZCBvZiBTY290dXNzYSwgYW5kIHRoZXJlIHRoZXkgcHJvcG9zZWQgdG8gZGVjaWRlIHRoZSBpc3N1ZSBieSBiYXR0bGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbiB0aGUgc2FtZSBiYXR0bGVmaWVsZCBQZWxvcGlkYXMgaGFkIGJlZW4gZGVmZWF0ZWQgYW5kIHNsYWluIGJ5IEFsZXhhbmRlciBvZiBQaGVyYWUsIGluIDM2NCBCLkMuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAzMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzPC90aXRsZT4sIHh4eGlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGVpciBtdXR1YWwgcHJveGltaXR5IGRpZCBub3QgaW5zcGlyZSB0aGVtIHdpdGggZmVhciwgYXMgbWlnaHQgaGF2ZSBiZWVuIGV4cGVjdGVkOyBvbiB0aGUgY29udHJhcnksIHRoZXkgd2VyZSBmaWxsZWQgd2l0aCBhcmRvdXIgYW5kIGFtYml0aW9uLiBGb3IgdGhlIFJvbWFucyBob3BlZCB0byBjb25xdWVyIHRoZSBNYWNlZG9uaWFucywgd2hvc2UgcmVwdXRhdGlvbiBmb3IgcHJvd2VzcyBhbmQgc3RyZW5ndGggQWxleGFuZGVyIGhhZCByYWlzZWQgdG8gYSB2ZXJ5IGhpZ2ggcGl0Y2ggYW1vbmcgdGhlbTsgYW5kIHRoZSBNYWNlZG9uaWFucywgd2hvIGNvbnNpZGVyZWQgdGhlIFJvbWFucyBzdXBlcmlvciB0byB0aGUgUGVyc2lhbnMsIGhvcGVkLCBpbiBjYXNlIHRoZXkgcHJldmFpbGVkIG92ZXIgdGhlbSwgdG8gcHJvdmUgUGhpbGlwIGEgbW9yZSBicmlsbGlhbnQgY29tbWFuZGVyIHRoYW4gQWxleGFuZGVyLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMzIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBlbG9waWRhczwvdGl0bGU+LCB4eHhpaS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBlbG9waWRhczwvdGl0bGU+LCB4eHhpaS48L3RyYW5zbGF0aW9uPg=="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBUaXR1cyBleGhvcnRlZCBoaXMgc29sZGllcnMgdG8gc2hvdyB0aGVtc2VsdmVzIGJyYXZlIG1lbiBhbmQgZnVsbCBvZiBzcGlyaXQsIGFzc3VyZWQgdGhhdCB0aGV5IHdlcmUgZ29pbmcgdG8gY29udGVuZCBhZ2FpbnN0IHRoZSBicmF2ZXN0IG9mIGFudGFnb25pc3RzIGluIHRoYXQgZmFpcmVzdCBvZiBhbGwgdGhlYXRyZXMsIEdyZWVjZTsgYW5kIFBoaWxpcCwgdG9vLCBiZWdhbiBhIHNwZWVjaCBvZiBleGhvcnRhdGlvbiB0byBoaXMgc29sZGllcnMsIGFzIGlzIHRoZSBjdXN0b20gYmVmb3JlIGEgYmF0dGxlLiBCdXQsIGVpdGhlciBieSBjaGFuY2Ugb3IgZnJvbSBpZ25vcmFuY2UgZHVlIHRvIGFuIGlub3Bwb3J0dW5lIGhhc3RlLCBoZSBoYWQgYXNjZW5kZWQgZm9yIHRoaXMgcHVycG9zZSBhIGxvZnR5IG1vdW5kIG91dHNpZGUgaGlzIGNhbXAsIGJlbmVhdGggd2hpY2ggbWFueSBtZW4gbGF5IGJ1cmllZCBpbiBhIGNvbW1vbiBncmF2ZSwgYW5kIGEgZHJlYWRmdWwgZGVqZWN0aW9uIGZlbGwgdXBvbiBoaXMgbGlzdGVuZXJzIGluIHZpZXcgb2YgdGhlIG9tZW4sIHNvIHRoYXQgaGUgd2FzIGRlZXBseSB0cm91YmxlZCBhbmQgcmVmcmFpbmVkIGZyb20gYmF0dGxlIHRoYXQgZGF5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRvd2FyZHMgbW9ybmluZyBvbiB0aGUgZm9sbG93aW5nIGRheSwgYWZ0ZXIgYSBtaWxkIGFuZCBkYW1wIG5pZ2h0LCB0aGUgY2xvdWRzIHR1cm5lZCB0byBtaXN0LCB0aGUgd2hvbGUgcGxhaW4gd2FzIGZpbGxlZCB3aXRoIHByb2ZvdW5kIGRhcmtuZXNzLCBhIGRlbnNlIGFpciBjYW1lIGRvd24gZnJvbSB0aGUgaGVpZ2h0cyBpbnRvIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0d28gY2FtcHMsIGFuZCBhcyBzb29uIGFzIGRheSBhZHZhbmNlZCBhbGwgdGhlIGdyb3VuZCB3YXMgaGlkZGVuIGZyb20gdmlldy4gVGhlIHBhcnRpZXMgc2VudCBvdXQgb24gZWl0aGVyIHNpZGUgZm9yIHB1cnBvc2VzIG9mIGFtYnVzaCBhbmQgcmVjb25uYWlzc2FuY2UgZW5jb3VudGVyZWQgb25lIGFub3RoZXIgaW4gYSB2ZXJ5IHNob3J0IHRpbWUgYW5kIHdlbnQgdG8gZmlnaHRpbmcgbmVhciB3aGF0IGFyZSBjYWxsZWQgdGhlIEN5bm9zY2VwaGFsYWUsIG9yIDxnbG9zcz5Eb2cncyBIZWFkczwvZ2xvc3M+LiBUaGVzZSBhcmUgdGhlIHNoYXJwIHRvcHMgb2YgaGlsbHMgbHlpbmcgY2xvc2UgYWxvbmdzaWRlIG9uZSBhbm90aGVyLCBhbmQgZ290IHRoZWlyIG5hbWUgZnJvbSBhIHJlc2VtYmxhbmNlIGluIHRoZWlyIHNoYXBlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BcyB3YXMgbmF0dXJhbCBvbiBhIGZpZWxkIHNvIGRpZmZpY3VsdCwgdGhlcmUgd2VyZSBhbHRlcm5hdGlvbnMgb2YgZmxpZ2h0IGFuZCBwdXJzdWl0LCBlYWNoIHBhcnR5IHNlbmRpbmcgb3V0IGFpZCBmcm9tIHRoZWlyIGNhbXBzIHRvIHRob3NlIHdobyBmcm9tIHRpbWUgdG8gdGltZSB3ZXJlIGdldHRpbmcgdGhlIHdvcnN0IG9mIGl0IGFuZCByZXRyZWF0aW5nLCB1bnRpbCBhdCBsYXN0LCB3aGVuIHRoZSBhaXIgY2xlYXJlZCB1cCBhbmQgdGhleSBjb3VsZCBzZWUgd2hhdCB3YXMgZ29pbmcgb24sIHRoZXkgZW5nYWdlZCB3aXRoIGFsbCB0aGVpciBmb3JjZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIGEgZnVsbGVyIGRlc2NyaXB0aW9uIG9mIHRoZSBiYXR0bGUsIGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzMy43IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpaWkuIDctMTA8L2JpYmw+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxiLiAxOC4yMCIgdmFsaWQ9InllcyI+UG9seWJpdXMsIHh2aWlpLiAyMC0yNzwvYmlibD4pLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ub3dhcmRzIG1vcm5pbmcgb24gdGhlIGZvbGxvd2luZyBkYXksIGFmdGVyIGEgbWlsZCBhbmQgZGFtcCBuaWdodCwgdGhlIGNsb3VkcyB0dXJuZWQgdG8gbWlzdCwgdGhlIHdob2xlIHBsYWluIHdhcyBmaWxsZWQgd2l0aCBwcm9mb3VuZCBkYXJrbmVzcywgYSBkZW5zZSBhaXIgY2FtZSBkb3duIGZyb20gdGhlIGhlaWdodHMgaW50byB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdHdvIGNhbXBzLCBhbmQgYXMgc29vbiBhcyBkYXkgYWR2YW5jZWQgYWxsIHRoZSBncm91bmQgd2FzIGhpZGRlbiBmcm9tIHZpZXcuIFRoZSBwYXJ0aWVzIHNlbnQgb3V0IG9uIGVpdGhlciBzaWRlIGZvciBwdXJwb3NlcyBvZiBhbWJ1c2ggYW5kIHJlY29ubmFpc3NhbmNlIGVuY291bnRlcmVkIG9uZSBhbm90aGVyIGluIGEgdmVyeSBzaG9ydCB0aW1lIGFuZCB3ZW50IHRvIGZpZ2h0aW5nIG5lYXIgd2hhdCBhcmUgY2FsbGVkIHRoZSBDeW5vc2NlcGhhbGFlLCBvciA8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5Eb2cncyBIZWFkczwvZ2xvc3M+LiBUaGVzZSBhcmUgdGhlIHNoYXJwIHRvcHMgb2YgaGlsbHMgbHlpbmcgY2xvc2UgYWxvbmdzaWRlIG9uZSBhbm90aGVyLCBhbmQgZ290IHRoZWlyIG5hbWUgZnJvbSBhIHJlc2VtYmxhbmNlIGluIHRoZWlyIHNoYXBlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIHdhcyBuYXR1cmFsIG9uIGEgZmllbGQgc28gZGlmZmljdWx0LCB0aGVyZSB3ZXJlIGFsdGVybmF0aW9ucyBvZiBmbGlnaHQgYW5kIHB1cnN1aXQsIGVhY2ggcGFydHkgc2VuZGluZyBvdXQgYWlkIGZyb20gdGhlaXIgY2FtcHMgdG8gdGhvc2Ugd2hvIGZyb20gdGltZSB0byB0aW1lIHdlcmUgZ2V0dGluZyB0aGUgd29yc3Qgb2YgaXQgYW5kIHJldHJlYXRpbmcsIHVudGlsIGF0IGxhc3QsIHdoZW4gdGhlIGFpciBjbGVhcmVkIHVwIGFuZCB0aGV5IGNvdWxkIHNlZSB3aGF0IHdhcyBnb2luZyBvbiwgdGhleSBlbmdhZ2VkIHdpdGggYWxsIHRoZWlyIGZvcmNlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciBhIGZ1bGxlciBkZXNjcmlwdGlvbiBvZiB0aGUgYmF0dGxlLCBjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzMy43IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpaWkuIDctMTA8L2JpYmw+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDE4LjIwIiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgeHZpaWkuIDIwLTI3PC9iaWJsPikuPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDMzLjciIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eGlpaS4gNy0xMDwvYmlibD4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMTguMjAiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzLCB4dmlpaS4gMjAtMjc8L2JpYmw+KS48cCBjbGFzcz0idHJhbnNsYXRpb24iPldpdGggaGlzIHJpZ2h0IHdpbmcsIHRoZW4sIFBoaWxpcCBoYWQgdGhlIGFkdmFudGFnZSwgc2luY2UgZnJvbSBoaWdoZXIgZ3JvdW5kIGhlIHRocmV3IGhpcyBlbnRpcmUgcGhhbGFueCB1cG9uIHRoZSBSb21hbnMsIHdobyBjb3VsZCBub3Qgd2l0aHN0YW5kIHRoZSB3ZWlnaHQgb2YgaXRzIGludGVybG9ja2VkIHNoaWVsZHMgYW5kIHRoZSBzaGFycG5lc3Mgb2YgaXRzIHByb2plY3RpbmcgcGlrZXM7IAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGhpcyBsZWZ0IHdpbmcgd2FzIGJyb2tlbiB1cCBhbmQgc2NhdHRlcmVkIGFsb25nIHRoZSBoaWxscywgYW5kIFRpdHVzLCBkZXNwYWlyaW5nIG9mIGhpcyBkZWZlYXRlZCB3aW5nLCByb2RlIHN3aWZ0bHkgYWxvbmcgdG8gdGhlIG90aGVyLCBhbmQgd2l0aCBpdCBmZWxsIHVwb24gdGhlIE1hY2Vkb25pYW5zLiBUaGVzZSB3ZXJlIHVuYWJsZSB0byBob2xkIHRoZWlyIHBoYWxhbnggdG9nZXRoZXIgYW5kIG1haW50YWluIHRoZSBkZXB0aCBvZiBpdHMgZm9ybWF0aW9uICh3aGljaCB3YXMgdGhlIG1haW4gc291cmNlIG9mIHRoZWlyIHN0cmVuZ3RoKSwgYmVpbmcgcHJldmVudGVkIGJ5IHRoZSByb3VnaG5lc3MgYW5kIGlycmVndWxhcml0eSBvZiB0aGUgZ3JvdW5kLCB3aGlsZSBmb3IgZmlnaHRpbmcgbWFuIHRvIG1hbiB0aGV5IGhhZCBhcm1vdXIgd2hpY2ggd2FzIHRvbyBjdW1iZXJzb21lIGFuZCBoZWF2eS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBwaGFsYW54IGlzIGxpa2UgYW4gYW5pbWFsIG9mIGludmluY2libGUgc3RyZW5ndGggYXMgbG9uZyBhcyBpdCBpcyBvbmUgYm9keSBhbmQgY2FuIGtlZXAgaXRzIHNoaWVsZHMgbG9ja2VkIHRvZ2V0aGVyIGluIGEgc2luZ2xlIGZvcm1hdGlvbjsgYnV0IHdoZW4gaXQgaGFzIGJlZW4gYnJva2VuIHVwIGludG8gaXRzIHBhcnRzLCBlYWNoIG9mIGl0cyBmaWdodGluZyBtZW4gbG9zZXMgYWxzbyBoaXMgaW5kaXZpZHVhbCBmb3JjZSwgYXMgd2VsbCBiZWNhdXNlIG9mIHRoZSBtYW5uZXIgaW4gd2hpY2ggaGUgaXMgYXJtZWQgYXMgYmVjYXVzZSBoaXMgc3RyZW5ndGggbGllcyBpbiB0aGUgbXV0dWFsIHN1cHBvcnQgb2YgdGhlIHBhcnRzIG9mIHRoZSB3aG9sZSBib2R5IHJhdGhlciB0aGFuIGluIGhpbXNlbGYuIFRoaXMgd2luZyBvZiB0aGUgTWFjZWRvbmlhbnMgYmVpbmcgcm91dGVkLCBzb21lIG9mIHRoZSBSb21hbnMgcHVyc3VlZCB0aGUgZnVnaXRpdmVzLCB3aGlsZSBvdGhlcnMgZGFzaGVkIG91dCB1cG9uIHRoZSBmbGFuayBvZiB0aGUgZW5lbXkgd2hvIHdlcmUgc3RpbGwgZmlnaHRpbmcgYW5kIGN1dCB0aGVtIGRvd24sIHNvIHRoYXQgdmVyeSBzb29uIHRoZWlyIHZpY3RvcmlvdXMgd2luZyBhbHNvIGZhY2VkIGFib3V0LCB0aHJldyBhd2F5IHRoZWlyIHdlYXBvbnMsIGFuZCBmbGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVzdWx0IHdhcyB0aGF0IG5vIGZld2VyIHRoYW4gZWlnaHQgdGhvdXNhbmQgTWFjZWRvbmlhbnMgd2VyZSBzbGFpbiwgYW5kIGZpdmUgdGhvdXNhbmQgd2VyZSB0YWtlbiBwcmlzb25lcnMuIFBoaWxpcCwgaG93ZXZlciwgZ290IHNhZmVseSBhd2F5LCBhbmQgZm9yIHRoaXMgdGhlIEFldG9saWFucyB3ZXJlIHRvIGJsYW1lLCB3aG8gZmVsbCB0byBzYWNraW5nIGFuZCBwbHVuZGVyaW5nIHRoZSBlbmVteSdzIGNhbXAgd2hpbGUgdGhlIFJvbWFucyB3ZXJlIHN0aWxsIHB1cnN1aW5nLCBzbyB0aGF0IHdoZW4gdGhlIFJvbWFucyBjYW1lIGJhY2sgdG8gaXQgdGhleSBmb3VuZCBub3RoaW5nIHRoZXJlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBoaXMgbGVmdCB3aW5nIHdhcyBicm9rZW4gdXAgYW5kIHNjYXR0ZXJlZCBhbG9uZyB0aGUgaGlsbHMsIGFuZCBUaXR1cywgZGVzcGFpcmluZyBvZiBoaXMgZGVmZWF0ZWQgd2luZywgcm9kZSBzd2lmdGx5IGFsb25nIHRvIHRoZSBvdGhlciwgYW5kIHdpdGggaXQgZmVsbCB1cG9uIHRoZSBNYWNlZG9uaWFucy4gVGhlc2Ugd2VyZSB1bmFibGUgdG8gaG9sZCB0aGVpciBwaGFsYW54IHRvZ2V0aGVyIGFuZCBtYWludGFpbiB0aGUgZGVwdGggb2YgaXRzIGZvcm1hdGlvbiAod2hpY2ggd2FzIHRoZSBtYWluIHNvdXJjZSBvZiB0aGVpciBzdHJlbmd0aCksIGJlaW5nIHByZXZlbnRlZCBieSB0aGUgcm91Z2huZXNzIGFuZCBpcnJlZ3VsYXJpdHkgb2YgdGhlIGdyb3VuZCwgd2hpbGUgZm9yIGZpZ2h0aW5nIG1hbiB0byBtYW4gdGhleSBoYWQgYXJtb3VyIHdoaWNoIHdhcyB0b28gY3VtYmVyc29tZSBhbmQgaGVhdnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcGhhbGFueCBpcyBsaWtlIGFuIGFuaW1hbCBvZiBpbnZpbmNpYmxlIHN0cmVuZ3RoIGFzIGxvbmcgYXMgaXQgaXMgb25lIGJvZHkgYW5kIGNhbiBrZWVwIGl0cyBzaGllbGRzIGxvY2tlZCB0b2dldGhlciBpbiBhIHNpbmdsZSBmb3JtYXRpb247IGJ1dCB3aGVuIGl0IGhhcyBiZWVuIGJyb2tlbiB1cCBpbnRvIGl0cyBwYXJ0cywgZWFjaCBvZiBpdHMgZmlnaHRpbmcgbWVuIGxvc2VzIGFsc28gaGlzIGluZGl2aWR1YWwgZm9yY2UsIGFzIHdlbGwgYmVjYXVzZSBvZiB0aGUgbWFubmVyIGluIHdoaWNoIGhlIGlzIGFybWVkIGFzIGJlY2F1c2UgaGlzIHN0cmVuZ3RoIGxpZXMgaW4gdGhlIG11dHVhbCBzdXBwb3J0IG9mIHRoZSBwYXJ0cyBvZiB0aGUgd2hvbGUgYm9keSByYXRoZXIgdGhhbiBpbiBoaW1zZWxmLiBUaGlzIHdpbmcgb2YgdGhlIE1hY2Vkb25pYW5zIGJlaW5nIHJvdXRlZCwgc29tZSBvZiB0aGUgUm9tYW5zIHB1cnN1ZWQgdGhlIGZ1Z2l0aXZlcywgd2hpbGUgb3RoZXJzIGRhc2hlZCBvdXQgdXBvbiB0aGUgZmxhbmsgb2YgdGhlIGVuZW15IHdobyB3ZXJlIHN0aWxsIGZpZ2h0aW5nIGFuZCBjdXQgdGhlbSBkb3duLCBzbyB0aGF0IHZlcnkgc29vbiB0aGVpciB2aWN0b3Jpb3VzIHdpbmcgYWxzbyBmYWNlZCBhYm91dCwgdGhyZXcgYXdheSB0aGVpciB3ZWFwb25zLCBhbmQgZmxlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN1bHQgd2FzIHRoYXQgbm8gZmV3ZXIgdGhhbiBlaWdodCB0aG91c2FuZCBNYWNlZG9uaWFucyB3ZXJlIHNsYWluLCBhbmQgZml2ZSB0aG91c2FuZCB3ZXJlIHRha2VuIHByaXNvbmVycy4gUGhpbGlwLCBob3dldmVyLCBnb3Qgc2FmZWx5IGF3YXksIGFuZCBmb3IgdGhpcyB0aGUgQWV0b2xpYW5zIHdlcmUgdG8gYmxhbWUsIHdobyBmZWxsIHRvIHNhY2tpbmcgYW5kIHBsdW5kZXJpbmcgdGhlIGVuZW15J3MgY2FtcCB3aGlsZSB0aGUgUm9tYW5zIHdlcmUgc3RpbGwgcHVyc3VpbmcsIHNvIHRoYXQgd2hlbiB0aGUgUm9tYW5zIGNhbWUgYmFjayB0byBpdCB0aGV5IGZvdW5kIG5vdGhpbmcgdGhlcmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcywgdG8gYmVnaW4gd2l0aCwgZ2F2ZSByaXNlIHRvIG11dHVhbCBxdWFycmVscyBhbmQgcmVjcmltaW5hdGlvbnM7IHB1dCBhZnRlcndhcmRzIHRoZSBBZXRvbGlhbnMgdmV4ZWQgVGl0dXMgbW9yZSBhbmQgbW9yZSBieSBhc2NyaWJpbmcgdGhlIHZpY3RvcnkgdG8gdGhlbXNlbHZlcyBhbmQgcHJlcG9zc2Vzc2luZyB0aGUgbWluZHMgb2YgdGhlIEdyZWVrcyB3aXRoIHRoZSBmYW1lIG9mIGl0LCBzbyB0aGF0IHRoZXkgd2VyZSBtZW50aW9uZWQgZmlyc3QgaW4gdGhlIHdyaXRpbmdzIGFuZCBzb25ncyBvZiBwb2V0cyBhbmQgaGlzdG9yaWFucyB3aG8gY2VsZWJyYXRlZCB0aGUgZXZlbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZXNlIHRoZSBvbmUgbW9zdCBpbiB2b2d1ZSB3YXMgdGhlIGZvbGxvd2luZyBlcGlncmFtIGluIGVsZWdpYWMgdmVyc2VzOuKAlAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VW53ZXB0IGFuZCB3aXRob3V0IGdyYXZlcyBhcmUgd2UsIE8gdHJhdmVsbGVyLCB3aG8gb24gdGhpcyByaWRnZSBvZiBUaGVzc2FseSBsaWUgZGVhZCwgaW4gbnVtYmVyIHRoaXJ0eSB0aG91c2FuZCwgc3ViZHVlZCBieSB0aGUgc3dvcmQgb2YgdGhlIEFldG9saWFucywgYW5kIG9mIHRoZSBMYXRpbnMgd2hvbSBUaXR1cyBsZWQgZnJvbSBzcGFjaW91cyBJdGFseSwgRW1hdGhpYSdzIGdyZWF0IGJhbmUuIEFuZCB0aGUgYm9sZCBzcGlyaXQgdGhhdCBQaGlsaXAgaGFkIGRpc3BsYXllZCB3YXMgZ29uZTsgaXQgc2hvd2VkIGl0c2VsZiBtb3JlIGFnaWxlIHRoYW4gc3dpZnQgZGVlci48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzLCB0byBiZWdpbiB3aXRoLCBnYXZlIHJpc2UgdG8gbXV0dWFsIHF1YXJyZWxzIGFuZCByZWNyaW1pbmF0aW9uczsgcHV0IGFmdGVyd2FyZHMgdGhlIEFldG9saWFucyB2ZXhlZCBUaXR1cyBtb3JlIGFuZCBtb3JlIGJ5IGFzY3JpYmluZyB0aGUgdmljdG9yeSB0byB0aGVtc2VsdmVzIGFuZCBwcmVwb3NzZXNzaW5nIHRoZSBtaW5kcyBvZiB0aGUgR3JlZWtzIHdpdGggdGhlIGZhbWUgb2YgaXQsIHNvIHRoYXQgdGhleSB3ZXJlIG1lbnRpb25lZCBmaXJzdCBpbiB0aGUgd3JpdGluZ3MgYW5kIHNvbmdzIG9mIHBvZXRzIGFuZCBoaXN0b3JpYW5zIHdobyBjZWxlYnJhdGVkIHRoZSBldmVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZXNlIHRoZSBvbmUgbW9zdCBpbiB2b2d1ZSB3YXMgdGhlIGZvbGxvd2luZyBlcGlncmFtIGluIGVsZWdpYWMgdmVyc2VzOuKAlAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5VbndlcHQgYW5kIHdpdGhvdXQgZ3JhdmVzIGFyZSB3ZSwgTyB0cmF2ZWxsZXIsIHdobyBvbiB0aGlzIHJpZGdlIG9mIFRoZXNzYWx5IGxpZSBkZWFkLCBpbiBudW1iZXIgdGhpcnR5IHRob3VzYW5kLCBzdWJkdWVkIGJ5IHRoZSBzd29yZCBvZiB0aGUgQWV0b2xpYW5zLCBhbmQgb2YgdGhlIExhdGlucyB3aG9tIFRpdHVzIGxlZCBmcm9tIHNwYWNpb3VzIEl0YWx5LCBFbWF0aGlhJ3MgZ3JlYXQgYmFuZS4gQW5kIHRoZSBib2xkIHNwaXJpdCB0aGF0IFBoaWxpcCBoYWQgZGlzcGxheWVkIHdhcyBnb25lOyBpdCBzaG93ZWQgaXRzZWxmIG1vcmUgYWdpbGUgdGhhbiBzd2lmdCBkZWVyLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBwb2VtIHdhcyBjb21wb3NlZCBieSBBbGNhZXVzIGluIG1vY2tlcnkgb2YgUGhpbGlwLCBhbmQgaXRzIGF1dGhvciBleGFnZ2VyYXRlZCB0aGUgbnVtYmVyIG9mIHRoZSBzbGFpbjsgaG93ZXZlciwgYmVpbmcgcmVjaXRlZCBpbiBtYW55IHBsYWNlcyBhbmQgYnkgbWFueSBwZXJzb25zLCBpdCBnYXZlIG1vcmUgYW5ub3lhbmNlIHRvIFRpdHVzIHRoYW4gdG8gUGhpbGlwLiBGb3IgUGhpbGlwIHNpbXBseSBtYWRlIGZ1biBvZiBBbGNhZXVzIHdpdGggYW4gYW5zd2VyaW5nIGVsZWdpYWMgZGlzdGljaDrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+TGVhZmxlc3MgYW5kIHdpdGhvdXQgYmFyaywgTyB0cmF2ZWxsZXIsIG9uIHRoaXMgcmlkZ2UgPC9sPgoJCQkJCSAgICAgICAgICA8bD5BIGNyb3NzIGlzIHBsYW50ZWQgZm9yIEFsY2FldXMsIGFuZCBpdCB0b3dlcnMgaW4gdGhlIHN1bjs8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCWJ1dCBUaXR1cyB3YXMgYW1iaXRpb3VzIHRvIHN0YW5kIHdlbGwgd2l0aCB0aGUgR3JlZWtzLCBhbmQgc3VjaCB0aGluZ3MgaXJyaXRhdGVkIGhpbSBiZXlvbmQgbWVhc3VyZS4gRm9yIHRoaXMgcmVhc29uIGhlIGNvbmR1Y3RlZCB0aGUgcmVzdCBvZiBoaXMgYnVzaW5lc3MgYnkgaGltc2VsZiwgYW5kIG1hZGUgdmVyeSBsaXR0bGUgYWNjb3VudCBvZiB0aGUgQWV0b2xpYW5zLiBUaGV5IG9uIHRoZWlyIHBhcnQgd2VyZSBkaXNwbGVhc2VkIGF0IHRoaXMsIGFuZCB3aGVuIFRpdHVzIHJlY2VpdmVkIGFuIGVtYmFzc3kgZnJvbSB0aGUgTWFjZWRvbmlhbiBraW5nIHdpdGggcHJvcG9zYWxzIGZvciBhbiBhZ3JlZW1lbnQsIHRoZXkgd2VudCByb3VuZCB0byB0aGUgb3RoZXIgY2l0aWVzIHZvY2lmZXJvdXNseSBjaGFyZ2luZyBoaW0gd2l0aCBzZWxsaW5nIHBlYWNlIHRvIFBoaWxpcCwgd2hlbiBpdCB3YXMgaW4gaGlzIHBvd2VyIHRvIGVyYWRpY2F0ZSB0aGUgd2FyIGVudGlyZWx5IGFuZCBkZXN0cm95IGEgcG93ZXIgYnkgd2hpY2ggdGhlIEdyZWVrIHdvcmxkIGhhZCBmaXJzdCBiZWVuIGVuc2xhdmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSB0aGUgQWV0b2xpYW5zIHdlcmUgbWFraW5nIHRoZXNlIGNoYXJnZXMgYW5kIHRyeWluZyB0byBtYWtlIHRyb3VibGUgYW1vbmcgdGhlIFJvbWFuIGFsbGllcywgUGhpbGlwIGhpbXNlbGYgcmVtb3ZlZCBhbGwgZ3JvdW5kcyBmb3Igc3VzcGljaW9uIGJ5IGNvbWluZyB0byB0ZXJtcyBhbmQgcHV0dGluZyBoaW1zZWxmIGFuZCBoaXMgcmVhbG0gaW4gdGhlIGhhbmRzIG9mIFRpdHVzIGFuZCB0aGUgUm9tYW5zLiBBbmQgaW4gdGhpcyBtYW5uZXIgVGl0dXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5SYXRoZXIsIHRoZSB0ZW4gY29tbWlzc2lvbmVycyBzZW50IGZyb20gUm9tZSB0byBzZXR0bGUgdGhlIGFmZmFpcnMgb2YgR3JlZWNlICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMTAuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4LiAxPC9iaWJsPikuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzMy4zMCIgdmFsaWQ9InllcyI+TGl2eSwgeHh4aWlpLiAzMDwvYmlibD4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDE4LjQ0IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cyB4dmlpaS4gNDQ8L2JpYmw+KS48L25vdGU+IHB1dCBhbiBlbmQgdG8gdGhlIHdhcjsgaGUgcmV0dXJuZWQgdG8gUGhpbGlwIGhpcyBraW5nZG9tIG9mIE1hY2Vkb25pYSwgYnV0IG9yZGFpbmVkIHRoYXQgYmUgc2hvdWxkIGtlZXAgYWxvb2YgZnJvbSBHcmVlY2UsIGV4YWN0ZWQgZnJvbSBoaW0gYW4gaW5kZW1uaXR5IG9mIGEgdGhvdXNhbmQgdGFsZW50cywgdG9vayBhd2F5IGFsbCBoaXMgc2hpcHMgZXhjZXB0IHRlbiwgYW5kIHRha2luZyBvbmUgb2YgaGlzIHNvbnMsIERlbWV0cml1cywgdG8gc2VydmUgYXMgaG9zdGFnZSwgc2VudCBoaW0gb2ZmIHRvIFJvbWUsIHRodXMgcHJvdmlkaW5nIGluIHRoZSBiZXN0IG1hbm5lciBmb3IgdGhlIHByZXNlbnQgYW5kIGFudGljaXBhdGluZyB0aGUgZnV0dXJlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcG9lbSB3YXMgY29tcG9zZWQgYnkgQWxjYWV1cyBpbiBtb2NrZXJ5IG9mIFBoaWxpcCwgYW5kIGl0cyBhdXRob3IgZXhhZ2dlcmF0ZWQgdGhlIG51bWJlciBvZiB0aGUgc2xhaW47IGhvd2V2ZXIsIGJlaW5nIHJlY2l0ZWQgaW4gbWFueSBwbGFjZXMgYW5kIGJ5IG1hbnkgcGVyc29ucywgaXQgZ2F2ZSBtb3JlIGFubm95YW5jZSB0byBUaXR1cyB0aGFuIHRvIFBoaWxpcC4gRm9yIFBoaWxpcCBzaW1wbHkgbWFkZSBmdW4gb2YgQWxjYWV1cyB3aXRoIGFuIGFuc3dlcmluZyBlbGVnaWFjIGRpc3RpY2g64oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5MZWFmbGVzcyBhbmQgd2l0aG91dCBiYXJrLCBPIHRyYXZlbGxlciwgb24gdGhpcyByaWRnZSA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QSBjcm9zcyBpcyBwbGFudGVkIGZvciBBbGNhZXVzLCBhbmQgaXQgdG93ZXJzIGluIHRoZSBzdW47PC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkxlYWZsZXNzIGFuZCB3aXRob3V0IGJhcmssIE8gdHJhdmVsbGVyLCBvbiB0aGlzIHJpZGdlIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BIGNyb3NzIGlzIHBsYW50ZWQgZm9yIEFsY2FldXMsIGFuZCBpdCB0b3dlcnMgaW4gdGhlIHN1bjs8L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJYnV0IFRpdHVzIHdhcyBhbWJpdGlvdXMgdG8gc3RhbmQgd2VsbCB3aXRoIHRoZSBHcmVla3MsIGFuZCBzdWNoIHRoaW5ncyBpcnJpdGF0ZWQgaGltIGJleW9uZCBtZWFzdXJlLiBGb3IgdGhpcyByZWFzb24gaGUgY29uZHVjdGVkIHRoZSByZXN0IG9mIGhpcyBidXNpbmVzcyBieSBoaW1zZWxmLCBhbmQgbWFkZSB2ZXJ5IGxpdHRsZSBhY2NvdW50IG9mIHRoZSBBZXRvbGlhbnMuIFRoZXkgb24gdGhlaXIgcGFydCB3ZXJlIGRpc3BsZWFzZWQgYXQgdGhpcywgYW5kIHdoZW4gVGl0dXMgcmVjZWl2ZWQgYW4gZW1iYXNzeSBmcm9tIHRoZSBNYWNlZG9uaWFuIGtpbmcgd2l0aCBwcm9wb3NhbHMgZm9yIGFuIGFncmVlbWVudCwgdGhleSB3ZW50IHJvdW5kIHRvIHRoZSBvdGhlciBjaXRpZXMgdm9jaWZlcm91c2x5IGNoYXJnaW5nIGhpbSB3aXRoIHNlbGxpbmcgcGVhY2UgdG8gUGhpbGlwLCB3aGVuIGl0IHdhcyBpbiBoaXMgcG93ZXIgdG8gZXJhZGljYXRlIHRoZSB3YXIgZW50aXJlbHkgYW5kIGRlc3Ryb3kgYSBwb3dlciBieSB3aGljaCB0aGUgR3JlZWsgd29ybGQgaGFkIGZpcnN0IGJlZW4gZW5zbGF2ZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHRoZSBBZXRvbGlhbnMgd2VyZSBtYWtpbmcgdGhlc2UgY2hhcmdlcyBhbmQgdHJ5aW5nIHRvIG1ha2UgdHJvdWJsZSBhbW9uZyB0aGUgUm9tYW4gYWxsaWVzLCBQaGlsaXAgaGltc2VsZiByZW1vdmVkIGFsbCBncm91bmRzIGZvciBzdXNwaWNpb24gYnkgY29taW5nIHRvIHRlcm1zIGFuZCBwdXR0aW5nIGhpbXNlbGYgYW5kIGhpcyByZWFsbSBpbiB0aGUgaGFuZHMgb2YgVGl0dXMgYW5kIHRoZSBSb21hbnMuIEFuZCBpbiB0aGlzIG1hbm5lciBUaXR1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UmF0aGVyLCB0aGUgdGVuIGNvbW1pc3Npb25lcnMgc2VudCBmcm9tIFJvbWUgdG8gc2V0dGxlIHRoZSBhZmZhaXJzIG9mIEdyZWVjZSAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMTAuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4LiAxPC9iaWJsPikuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDMzLjMwIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpaWkuIDMwPC9iaWJsPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAxOC40NCIgdmFsaWQ9InllcyI+UG9seWJpdXMgeHZpaWkuIDQ0PC9iaWJsPikuPC9ub3RlPiBwdXQgYW4gZW5kIHRvIHRoZSB3YXI7IGhlIHJldHVybmVkIHRvIFBoaWxpcCBoaXMga2luZ2RvbSBvZiBNYWNlZG9uaWEsIGJ1dCBvcmRhaW5lZCB0aGF0IGJlIHNob3VsZCBrZWVwIGFsb29mIGZyb20gR3JlZWNlLCBleGFjdGVkIGZyb20gaGltIGFuIGluZGVtbml0eSBvZiBhIHRob3VzYW5kIHRhbGVudHMsIHRvb2sgYXdheSBhbGwgaGlzIHNoaXBzIGV4Y2VwdCB0ZW4sIGFuZCB0YWtpbmcgb25lIG9mIGhpcyBzb25zLCBEZW1ldHJpdXMsIHRvIHNlcnZlIGFzIGhvc3RhZ2UsIHNlbnQgaGltIG9mZiB0byBSb21lLCB0aHVzIHByb3ZpZGluZyBpbiB0aGUgYmVzdCBtYW5uZXIgZm9yIHRoZSBwcmVzZW50IGFuZCBhbnRpY2lwYXRpbmcgdGhlIGZ1dHVyZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMTAuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4LiAxPC9iaWJsPikuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDMzLjMwIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpaWkuIDMwPC9iaWJsPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAxOC40NCIgdmFsaWQ9InllcyI+UG9seWJpdXMgeHZpaWkuIDQ0PC9iaWJsPikuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEhhbm5pYmFsIHRoZSBBZnJpY2FuLCBhIG1vc3QgaW52ZXRlcmF0ZSBlbmVteSBvZiBSb21lIGFuZCBhbiBleGlsZSBmcm9tIGhpcyBuYXRpdmUgY291bnRyeSwgaGFkIGFscmVhZHkgYXQgdGhhdCB0aW1lPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTk2IEIuQy4sIGFjY29yZGluZyB0byBOZXBvcywgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ik5lcC4gSGFuLiA3LjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SGFubmliYWw8L3RpdGxlPiwgdmlpLiA2PC9iaWJsPi4gQWNjb3JkaW5nIHRvIExpdnkgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDMzLjQ3IiB2YWxpZD0ieWVzIj54eHhpaWkuIDQ3PC9iaWJsPiksIGl0IHdhcyBpbiB0aGUgZm9sbG93aW5nIHllYXIuPC9ub3RlPiBjb21lIHRvIHRoZSBjb3VydCBvZiBLaW5nIEFudGlvY2h1cywgYW5kIHdhcyB0cnlpbmcgdG8gaW5jaXRlIGhpbSB0byBmdXJ0aGVyIGFjaGlldmVtZW50cyB3aGlsZSBmb3J0dW5lIGdhdmUgaGlzIHBvd2VyIHN1Y2Nlc3NmdWwgY291cnNlLiBBbnRpb2NodXMgaGltc2VsZiBhbHNvLCBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgbWFnbml0dWRlIG9mIGhpcyBhY2hpZXZlbWVudHMsIGJ5IHdoaWNoIGhlIGhhZCB3b24gdGhlIHRpdGxlIG9mIEdyZWF0LCB3YXMgYWxyZWFkeSBmaXhpbmcgaGlzIGV5ZXMgb24gdW5pdmVyc2FsIGRvbWluaW9uLCBhbmQgaGFkIGEgcGFydGljdWxhciBob3N0aWxpdHkgdG8gdGhlIFJvbWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlLCBoYWQgbm90IFRpdHVzLCBpbiB2aWV3IG9mIGFsbCB0aGlzLCBtYWRlIGZhdm91cmFibGUgdGVybXMgb2YgcGVhY2UsIGFuZCBoYWQgdGhlIHdhciB3aXRoIEFudGlvY2h1cyBpbiBHcmVlY2UgZm91bmQgdGhlIHdhciB3aXRoIFBoaWxpcCBzdGlsbCBpbiBwcm9ncmVzcyB0aGVyZSwgYW5kIGhhZCBhIGNvbW1vbiBjYXVzZSBicm91Z2h0IHRoZXNlIHR3byBncmVhdGVzdCBhbmQgbW9zdCBwb3dlcmZ1bCBraW5ncyBvZiB0aGUgdGltZSBpbnRvIGFsbGlhbmNlIGFnYWluc3QgUm9tZSwgdGhhdCBjaXR5IHdvdWxkIGhhdmUgdW5kZXJnb25lIGZyZXNoIHN0cnVnZ2xlcyBhbmQgZGFuZ2VycyBub3QgaW5mZXJpb3IgdG8gdGhvc2Ugd2hpY2ggbWFya2VkIGhlciB3YXIgd2l0aCBIYW5uaWJhbC4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGl0IHdhcywgYnkgaW50ZXJwb3NpbmcgYW4gb3Bwb3J0dW5lIHBlYWNlIGJldHdlZW4gdGhlIHR3byB3YXJzLCBhbmQgYnkgY3V0dGluZyBzaG9ydCB0aGUgZXhpc3Rpbmcgd2FyIGJlZm9yZSB0aGUgdGhyZWF0ZW5pbmcgd2FyIGJlZ2FuLCBUaXR1cyB0b29rIGF3YXkgdGhlIGxhc3QgaG9wZSBmcm9tIFBoaWxpcCwgYW5kIHRoZSBmaXJzdCBmcm9tIEFudGlvY2h1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBIYW5uaWJhbCB0aGUgQWZyaWNhbiwgYSBtb3N0IGludmV0ZXJhdGUgZW5lbXkgb2YgUm9tZSBhbmQgYW4gZXhpbGUgZnJvbSBoaXMgbmF0aXZlIGNvdW50cnksIGhhZCBhbHJlYWR5IGF0IHRoYXQgdGltZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTk2IEIuQy4sIGFjY29yZGluZyB0byBOZXBvcywgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTmVwLiBIYW4uIDcuNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhhbm5pYmFsPC90aXRsZT4sIHZpaS4gNjwvYmlibD4uIEFjY29yZGluZyB0byBMaXZ5ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDMzLjQ3IiB2YWxpZD0ieWVzIj54eHhpaWkuIDQ3PC9iaWJsPiksIGl0IHdhcyBpbiB0aGUgZm9sbG93aW5nIHllYXIuPC9ub3RlPiBjb21lIHRvIHRoZSBjb3VydCBvZiBLaW5nIEFudGlvY2h1cywgYW5kIHdhcyB0cnlpbmcgdG8gaW5jaXRlIGhpbSB0byBmdXJ0aGVyIGFjaGlldmVtZW50cyB3aGlsZSBmb3J0dW5lIGdhdmUgaGlzIHBvd2VyIHN1Y2Nlc3NmdWwgY291cnNlLiBBbnRpb2NodXMgaGltc2VsZiBhbHNvLCBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgbWFnbml0dWRlIG9mIGhpcyBhY2hpZXZlbWVudHMsIGJ5IHdoaWNoIGhlIGhhZCB3b24gdGhlIHRpdGxlIG9mIEdyZWF0LCB3YXMgYWxyZWFkeSBmaXhpbmcgaGlzIGV5ZXMgb24gdW5pdmVyc2FsIGRvbWluaW9uLCBhbmQgaGFkIGEgcGFydGljdWxhciBob3N0aWxpdHkgdG8gdGhlIFJvbWFucy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJOZXAuIEhhbi4gNy42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGFubmliYWw8L3RpdGxlPiwgdmlpLiA2PC9iaWJsPi4gQWNjb3JkaW5nIHRvIExpdnkgKDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhhbm5pYmFsPC90aXRsZT4sIHZpaS4gNjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzMuNDciIHZhbGlkPSJ5ZXMiPnh4eGlpaS4gNDc8L2JpYmw+KSwgaXQgd2FzIGluIHRoZSBmb2xsb3dpbmcgeWVhci48L3RyYW5zbGF0aW9uPg=="
translation['9.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgaGFkIG5vdCBUaXR1cywgaW4gdmlldyBvZiBhbGwgdGhpcywgbWFkZSBmYXZvdXJhYmxlIHRlcm1zIG9mIHBlYWNlLCBhbmQgaGFkIHRoZSB3YXIgd2l0aCBBbnRpb2NodXMgaW4gR3JlZWNlIGZvdW5kIHRoZSB3YXIgd2l0aCBQaGlsaXAgc3RpbGwgaW4gcHJvZ3Jlc3MgdGhlcmUsIGFuZCBoYWQgYSBjb21tb24gY2F1c2UgYnJvdWdodCB0aGVzZSB0d28gZ3JlYXRlc3QgYW5kIG1vc3QgcG93ZXJmdWwga2luZ3Mgb2YgdGhlIHRpbWUgaW50byBhbGxpYW5jZSBhZ2FpbnN0IFJvbWUsIHRoYXQgY2l0eSB3b3VsZCBoYXZlIHVuZGVyZ29uZSBmcmVzaCBzdHJ1Z2dsZXMgYW5kIGRhbmdlcnMgbm90IGluZmVyaW9yIHRvIHRob3NlIHdoaWNoIG1hcmtlZCBoZXIgd2FyIHdpdGggSGFubmliYWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBpdCB3YXMsIGJ5IGludGVycG9zaW5nIGFuIG9wcG9ydHVuZSBwZWFjZSBiZXR3ZWVuIHRoZSB0d28gd2FycywgYW5kIGJ5IGN1dHRpbmcgc2hvcnQgdGhlIGV4aXN0aW5nIHdhciBiZWZvcmUgdGhlIHRocmVhdGVuaW5nIHdhciBiZWdhbiwgVGl0dXMgdG9vayBhd2F5IHRoZSBsYXN0IGhvcGUgZnJvbSBQaGlsaXAsIGFuZCB0aGUgZmlyc3QgZnJvbSBBbnRpb2NodXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgdGhlIHRlbiBjb21taXNzaW9uZXJzLCB3aG8gaGFkIGJlZW4gc2VudCB0byBUaXR1cyBieSB0aGUgc2VuYXRlLCBhZHZpc2VkIGhpbSB0byBnaXZlIHRoZSByZXN0IG9mIHRoZSBHcmVla3MgdGhlaXIgZnJlZWRvbSwgYnV0IHRvIHJldGFpbiBDb3JpbnRoLCBDaGFsY2lzLCBhbmQgRGVtZXRyaWFzIHVuZGVyIGdhcnJpc29ucywgYXMgYSBzYWZlZ3VhcmQgYWdhaW5zdCBBbnRpb2NodXMuIFRoZXJldXBvbiB0aGUgQWV0b2xpYW5zIHN0aXJyZWQgdXAgdGhlIGNpdGllcyB3aXRoIHRoZSBtb3N0IHZvY2lmZXJvdXMgZGVudW5jaWF0aW9ucywgb3JkZXJpbmcgVGl0dXMgdG8gc3RyaWtlIG9mZiB0aGUgc2hhY2tsZXMgb2YgR3JlZWNlIChmb3IgdGhhdCBpcyB3aGF0IFBoaWxpcCB3YXMgd29udCB0byBjYWxsIHRoZXNlIHRocmVlIGNpdGllcyksIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhc2tpbmcgdGhlIEdyZWVrcyB3aGV0aGVyIHRoZXkgd2VyZSBnbGFkIHRvIGhhdmUgYSBmZXR0ZXIgbm93IHdoaWNoIHdhcyBzbW9vdGhlciB0aGFuIHRoZSBvbmUgdGhleSBoYWQgd29ybiBiZWZvcmUsIGJ1dCBoZWF2aWVyOyBhbmQgd2hldGhlciB0aGV5IGFkbWlyZWQgVGl0dXMgYXMgYSBiZW5lZmFjdG9yIGJlY2F1c2UgaGUgaGFkIHVuc2hhY2tsZWQgdGhlIGZvb3Qgb2YgR3JlZWNlIGFuZCBwdXQgYSBjb2xsYXIgcm91bmQgaGVyIG5lY2suIFRpdHVzIHdhcyB0cm91YmxlZCBhbmQgZGlzdHJlc3NlZCBhdCB0aGlzLCBhbmQgYnkgbGFib3VyaW5nIHdpdGggdGhlIGNvbW1pc3Npb24gZmluYWxseSBwZXJzdWFkZWQgaXQgdG8gZnJlZSB0aGVzZSBjaXRpZXMgYWxzbyBmcm9tIHRoZWlyIGdhcnJpc29ucywgaW4gb3JkZXIgdGhhdCBoaXMgZ2lmdCB0byB0aGUgR3JlZWtzIG1pZ2h0IGJlIHdob2xlIGFuZCBlbnRpcmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0aGUgdGVuIGNvbW1pc3Npb25lcnMsIHdobyBoYWQgYmVlbiBzZW50IHRvIFRpdHVzIGJ5IHRoZSBzZW5hdGUsIGFkdmlzZWQgaGltIHRvIGdpdmUgdGhlIHJlc3Qgb2YgdGhlIEdyZWVrcyB0aGVpciBmcmVlZG9tLCBidXQgdG8gcmV0YWluIENvcmludGgsIENoYWxjaXMsIGFuZCBEZW1ldHJpYXMgdW5kZXIgZ2Fycmlzb25zLCBhcyBhIHNhZmVndWFyZCBhZ2FpbnN0IEFudGlvY2h1cy4gVGhlcmV1cG9uIHRoZSBBZXRvbGlhbnMgc3RpcnJlZCB1cCB0aGUgY2l0aWVzIHdpdGggdGhlIG1vc3Qgdm9jaWZlcm91cyBkZW51bmNpYXRpb25zLCBvcmRlcmluZyBUaXR1cyB0byBzdHJpa2Ugb2ZmIHRoZSBzaGFja2xlcyBvZiBHcmVlY2UgKGZvciB0aGF0IGlzIHdoYXQgUGhpbGlwIHdhcyB3b250IHRvIGNhbGwgdGhlc2UgdGhyZWUgY2l0aWVzKSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhc2tpbmcgdGhlIEdyZWVrcyB3aGV0aGVyIHRoZXkgd2VyZSBnbGFkIHRvIGhhdmUgYSBmZXR0ZXIgbm93IHdoaWNoIHdhcyBzbW9vdGhlciB0aGFuIHRoZSBvbmUgdGhleSBoYWQgd29ybiBiZWZvcmUsIGJ1dCBoZWF2aWVyOyBhbmQgd2hldGhlciB0aGV5IGFkbWlyZWQgVGl0dXMgYXMgYSBiZW5lZmFjdG9yIGJlY2F1c2UgaGUgaGFkIHVuc2hhY2tsZWQgdGhlIGZvb3Qgb2YgR3JlZWNlIGFuZCBwdXQgYSBjb2xsYXIgcm91bmQgaGVyIG5lY2suIFRpdHVzIHdhcyB0cm91YmxlZCBhbmQgZGlzdHJlc3NlZCBhdCB0aGlzLCBhbmQgYnkgbGFib3VyaW5nIHdpdGggdGhlIGNvbW1pc3Npb24gZmluYWxseSBwZXJzdWFkZWQgaXQgdG8gZnJlZSB0aGVzZSBjaXRpZXMgYWxzbyBmcm9tIHRoZWlyIGdhcnJpc29ucywgaW4gb3JkZXIgdGhhdCBoaXMgZ2lmdCB0byB0aGUgR3JlZWtzIG1pZ2h0IGJlIHdob2xlIGFuZCBlbnRpcmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhdCB0aGUgSXN0aG1pYW4gZ2FtZXMsIHdoZXJlIGEgZ3JlYXQgdGhyb25nIG9mIHBlb3BsZSB3ZXJlIHNpdHRpbmcgaW4gdGhlIHN0YWRpdW0gYW5kIHdhdGNoaW5nIHRoZSBhdGhsZXRpYyBjb250ZXN0cyAoc2luY2UsIGluZGVlZCwgYWZ0ZXIgbWFueSB5ZWFycyBHcmVlY2UgaGFkIGF0IGxhc3QgY2Vhc2VkIGZyb20gd2FycyB3YWdlZCBpbiBob3BlcyBvZiBmcmVlZG9tLCBhbmQgd2FzIG5vdyBob2xkaW5nIGZlc3RpdmFsIGluIHRpbWUgb2YgYXNzdXJlZCBwZWFjZSksIHRoZSB0cnVtcGV0IHNpZ25hbGxlZCBhIGdlbmVyYWwgc2lsZW5jZSwgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoZSBoZXJhbGQsIGNvbWluZyBmb3J3YXJkIGludG8gdGhlIG1pZHN0IG9mIHRoZSBzcGVjdGF0b3JzLCBtYWRlIHByb2NsYW1hdGlvbiB0aGF0IHRoZSBSb21hbiBzZW5hdGUgYW5kIFRpdHVzIFF1aW50aXVzIEZsYW1pbmludXMgcHJvY29uc3VsYXIgZ2VuZXJhbCwgaGF2aW5nIGNvbnF1ZXJlZCBLaW5nIFBoaWxpcCBhbmQgdGhlIE1hY2Vkb25pYW5zLCByZXN0b3JlZCB0byBmcmVlZG9tLCB3aXRob3V0IGdhcnJpc29ucyBhbmQgd2l0aG91dCBpbXBvc3RzLCBhbmQgdG8gdGhlIGVuam95bWVudCBvZiB0aGVpciBhbmNpZW50IGxhd3MsIHRoZSBDb3JpbnRoaWFucywgdGhlIExvY3JpYW5zLCB0aGUgUGhvY2lhbnMsIHRoZSBFdWJvZWFucywgdGhlIEFjaGFlYW5zIG9mIFBodGhpb3RpcywgdGhlIE1hZ25lc2lhbnMsIHRoZSBUaGVzc2FsaWFucywgYW5kIHRoZSBQZXJyaGFlYmlhbnMuIEF0IGZpcnN0LCB0aGVuLCB0aGUgcHJvY2xhbWF0aW9uIHdhcyBieSBubyBtZWFucyBnZW5lcmFsbHkgb3IgZGlzdGluY3RseSBoZWFyZCwgYnV0IHRoZXJlIHdhcyBhIGNvbmZ1c2VkIGFuZCB0dW11bHR1b3VzIG1vdmVtZW50IGluIHRoZSBzdGFkaXVtIG9mIHBlb3BsZSB3aG8gd29uZGVyZWQgd2hhdCBoYWQgYmVlbiBzYWlkLCBhbmQgYXNrZWQgb25lIGFub3RoZXIgcXVlc3Rpb25zIGFib3V0IGl0LCBhbmQgY2FsbGVkIG91dCB0byBoYXZlIHRoZSBwcm9jbGFtYXRpb24gbWFkZSBhZ2FpbjsgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IHdoZW4gc2lsZW5jZSBoYWQgYmVlbiByZXN0b3JlZCwgYW5kIHRoZSBoZXJhbGQgaW4gdG9uZXMgdGhhdCB3ZXJlIGxvdWRlciB0aGFuIGJlZm9yZSBhbmQgcmVhY2hlZCB0aGUgZWFycyBvZiBhbGwsIGhhZCByZWNpdGVkIHRoZSBwcm9jbGFtYXRpb24sIGEgc2hvdXQgb2Ygam95IGFyb3NlLCBzbyBpbmNyZWRpYmx5IGxvdWQgdGhhdCBpdCByZWFjaGVkIHRoZSBzZWEuIFRoZSB3aG9sZSBhdWRpZW5jZSByb3NlIHRvIHRoZWlyIGZlZXQsIGFuZCBubyBoZWVkIHdhcyBwYWlkIHRvIHRoZSBjb250ZW5kaW5nIGF0aGxldGVzLCBidXQgYWxsIHdlcmUgZWFnZXIgdG8gc3ByaW5nIGZvcndhcmQgYW5kIGdyZWV0IGFuZCBoYWlsIHRoZSBzYXZpb3VyIGFuZCBjaGFtcGlvbiBvZiBHcmVlY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhdCB0aGUgSXN0aG1pYW4gZ2FtZXMsIHdoZXJlIGEgZ3JlYXQgdGhyb25nIG9mIHBlb3BsZSB3ZXJlIHNpdHRpbmcgaW4gdGhlIHN0YWRpdW0gYW5kIHdhdGNoaW5nIHRoZSBhdGhsZXRpYyBjb250ZXN0cyAoc2luY2UsIGluZGVlZCwgYWZ0ZXIgbWFueSB5ZWFycyBHcmVlY2UgaGFkIGF0IGxhc3QgY2Vhc2VkIGZyb20gd2FycyB3YWdlZCBpbiBob3BlcyBvZiBmcmVlZG9tLCBhbmQgd2FzIG5vdyBob2xkaW5nIGZlc3RpdmFsIGluIHRpbWUgb2YgYXNzdXJlZCBwZWFjZSksIHRoZSB0cnVtcGV0IHNpZ25hbGxlZCBhIGdlbmVyYWwgc2lsZW5jZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGUgaGVyYWxkLCBjb21pbmcgZm9yd2FyZCBpbnRvIHRoZSBtaWRzdCBvZiB0aGUgc3BlY3RhdG9ycywgbWFkZSBwcm9jbGFtYXRpb24gdGhhdCB0aGUgUm9tYW4gc2VuYXRlIGFuZCBUaXR1cyBRdWludGl1cyBGbGFtaW5pbnVzIHByb2NvbnN1bGFyIGdlbmVyYWwsIGhhdmluZyBjb25xdWVyZWQgS2luZyBQaGlsaXAgYW5kIHRoZSBNYWNlZG9uaWFucywgcmVzdG9yZWQgdG8gZnJlZWRvbSwgd2l0aG91dCBnYXJyaXNvbnMgYW5kIHdpdGhvdXQgaW1wb3N0cywgYW5kIHRvIHRoZSBlbmpveW1lbnQgb2YgdGhlaXIgYW5jaWVudCBsYXdzLCB0aGUgQ29yaW50aGlhbnMsIHRoZSBMb2NyaWFucywgdGhlIFBob2NpYW5zLCB0aGUgRXVib2VhbnMsIHRoZSBBY2hhZWFucyBvZiBQaHRoaW90aXMsIHRoZSBNYWduZXNpYW5zLCB0aGUgVGhlc3NhbGlhbnMsIGFuZCB0aGUgUGVycmhhZWJpYW5zLiBBdCBmaXJzdCwgdGhlbiwgdGhlIHByb2NsYW1hdGlvbiB3YXMgYnkgbm8gbWVhbnMgZ2VuZXJhbGx5IG9yIGRpc3RpbmN0bHkgaGVhcmQsIGJ1dCB0aGVyZSB3YXMgYSBjb25mdXNlZCBhbmQgdHVtdWx0dW91cyBtb3ZlbWVudCBpbiB0aGUgc3RhZGl1bSBvZiBwZW9wbGUgd2hvIHdvbmRlcmVkIHdoYXQgaGFkIGJlZW4gc2FpZCwgYW5kIGFza2VkIG9uZSBhbm90aGVyIHF1ZXN0aW9ucyBhYm91dCBpdCwgYW5kIGNhbGxlZCBvdXQgdG8gaGF2ZSB0aGUgcHJvY2xhbWF0aW9uIG1hZGUgYWdhaW47IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGVuIHNpbGVuY2UgaGFkIGJlZW4gcmVzdG9yZWQsIGFuZCB0aGUgaGVyYWxkIGluIHRvbmVzIHRoYXQgd2VyZSBsb3VkZXIgdGhhbiBiZWZvcmUgYW5kIHJlYWNoZWQgdGhlIGVhcnMgb2YgYWxsLCBoYWQgcmVjaXRlZCB0aGUgcHJvY2xhbWF0aW9uLCBhIHNob3V0IG9mIGpveSBhcm9zZSwgc28gaW5jcmVkaWJseSBsb3VkIHRoYXQgaXQgcmVhY2hlZCB0aGUgc2VhLiBUaGUgd2hvbGUgYXVkaWVuY2Ugcm9zZSB0byB0aGVpciBmZWV0LCBhbmQgbm8gaGVlZCB3YXMgcGFpZCB0byB0aGUgY29udGVuZGluZyBhdGhsZXRlcywgYnV0IGFsbCB3ZXJlIGVhZ2VyIHRvIHNwcmluZyBmb3J3YXJkIGFuZCBncmVldCBhbmQgaGFpbCB0aGUgc2F2aW91ciBhbmQgY2hhbXBpb24gb2YgR3JlZWNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhhdCB3aGljaCBpcyBvZnRlbiBzYWlkIG9mIHRoZSB2b2x1bWUgYW5kIHBvd2VyIG9mIHRoZSBodW1hbiB2b2ljZSB3YXMgdGhlbiBhcHBhcmVudCB0byB0aGUgZXllLiBGb3IgcmF2ZW5zIHdoaWNoIGNoYW5jZWQgdG8gYmUgZmx5aW5nIG92ZXJoZWFkIGZlbGwgZG93biBpbnRvIHRoZSBzdGFkaXVtLiBUaGUgY2F1c2Ugb2YgdGhpcyB3YXMgdGhlIHJ1cHR1cmUgb2YgdGhlIGFpcjsgZm9yIHdoZW4gdGhlIHZvaWNlIGlzIGJvcm5lIGFsb2Z0IGxvdWQgYW5kIHN0cm9uZywgdGhlIGFpciBpcyByZW50IGFzdW5kZXIgYnkgaXQgYW5kIHdpbGwgbm90IHN1cHBvcnQgZmx5aW5nIGNyZWF0dXJlcywgYnV0IGxldHMgdGhlbSBmYWxsLCBhcyBpZiB0aGV5IHdlcmUgb3ZlciBhIHZhY3V1bSwgdW5sZXNzLCBpbmRlZWQsIHRoZXkgYXJlIHRyYW5zZml4ZWQgYnkgYSBzb3J0IG9mIGJsb3csIGFzIG9mIGEgd2VhcG9uLCBhbmQgZmFsbCBkb3duIGRlYWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMjUuNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgeHh2LiA3PC9iaWJsPi48L25vdGU+IEl0IGlzIHBvc3NpYmxlLCB0b28sIHRoYXQgaW4gc3VjaCBjYXNlcyB0aGVyZSBpcyBhIHdoaXJsaW5nIG1vdGlvbiBvZiB0aGUgYWlyLCB3aGljaCBiZWNvbWVzIGxpa2UgYSB3YXRlcnNwb3V0IGF0IHNlYSB3aXRoIGEgcmVmbHVlbnQgZmxvdyBvZiB0aGUgc3VyZ2VzIGNhdXNlZCBieSB0aGVpciB2ZXJ5IHZvbHVtZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGF0IHdoaWNoIGlzIG9mdGVuIHNhaWQgb2YgdGhlIHZvbHVtZSBhbmQgcG93ZXIgb2YgdGhlIGh1bWFuIHZvaWNlIHdhcyB0aGVuIGFwcGFyZW50IHRvIHRoZSBleWUuIEZvciByYXZlbnMgd2hpY2ggY2hhbmNlZCB0byBiZSBmbHlpbmcgb3ZlcmhlYWQgZmVsbCBkb3duIGludG8gdGhlIHN0YWRpdW0uIFRoZSBjYXVzZSBvZiB0aGlzIHdhcyB0aGUgcnVwdHVyZSBvZiB0aGUgYWlyOyBmb3Igd2hlbiB0aGUgdm9pY2UgaXMgYm9ybmUgYWxvZnQgbG91ZCBhbmQgc3Ryb25nLCB0aGUgYWlyIGlzIHJlbnQgYXN1bmRlciBieSBpdCBhbmQgd2lsbCBub3Qgc3VwcG9ydCBmbHlpbmcgY3JlYXR1cmVzLCBidXQgbGV0cyB0aGVtIGZhbGwsIGFzIGlmIHRoZXkgd2VyZSBvdmVyIGEgdmFjdXVtLCB1bmxlc3MsIGluZGVlZCwgdGhleSBhcmUgdHJhbnNmaXhlZCBieSBhIHNvcnQgb2YgYmxvdywgYXMgb2YgYSB3ZWFwb24sIGFuZCBmYWxsIGRvd24gZGVhZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMjUuNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4eHYuIDc8L2JpYmw+Ljwvbm90ZT4gSXQgaXMgcG9zc2libGUsIHRvbywgdGhhdCBpbiBzdWNoIGNhc2VzIHRoZXJlIGlzIGEgd2hpcmxpbmcgbW90aW9uIG9mIHRoZSBhaXIsIHdoaWNoIGJlY29tZXMgbGlrZSBhIHdhdGVyc3BvdXQgYXQgc2VhIHdpdGggYSByZWZsdWVudCBmbG93IG9mIHRoZSBzdXJnZXMgY2F1c2VkIGJ5IHRoZWlyIHZlcnkgdm9sdW1lLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAyNS43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHh4di4gNzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHh4di4gNzxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJlIHRoYXQgYXMgaXQgbWF5LCBoYWQgbm90IFRpdHVzLCBub3cgdGhhdCB0aGUgc3BlY3RhY2xlIHdhcyBnaXZlbiB1cCwgYXQgb25jZSBmb3Jlc2VlbiB0aGUgcnVzaCBhbmQgcHJlc3Mgb2YgdGhlIHRocm9uZyBhbmQgdGFrZW4gaGltc2VsZiBhd2F5LCBpdCB3b3VsZCBzZWVtIHRoYXQgaGUgY291bGQgaGFyZGx5IGhhdmUgc3Vydml2ZWQgdGhlIGNvbmNvdXJzZSBvZiBzbyBtYW55IHBlb3BsZSBhYm91dCBoaW0gYXQgb25jZSBhbmQgZnJvbSBhbGwgc2lkZXMuIEJ1dCB3aGVuIHRoZXkgd2VyZSB0aXJlZCBvZiBzaG91dGluZyBhYm91dCBoaXMgdGVudCwgYW5kIG5pZ2h0IHdhcyBhbHJlYWR5IGNvbWUsIHRoZW4sIHdpdGggZ3JlZXRpbmdzIGFyaWQgZW1icmFjZXMgZm9yIGFueSBmcmllbmRzIGFuZCBmZWxsb3cgY2l0aXplbnMgd2hvbSB0aGV5IHNhdywgdGhleSBiZXRvb2sgdGhlbXNlbHZlcyB0byBiYW5xdWV0aW5nIGFuZCBjYXJvdXNpbmcgd2l0aCBvbmUgYW5vdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGhlcmUsIHRoZWlyIHBsZWFzdXJlIG5hdHVyYWxseSBpbmNyZWFzaW5nLCB0aGV5IHdlcmUgbW92ZWQgdG8gcmVhc29uIGFuZCBkaXNjb3Vyc2UgYWJvdXQgR3JlZWNlLCBzYXlpbmcgdGhhdCBhbHRob3VnaCBzaGUgaGFkIHdhZ2VkIG1hbnkgd2FycyBmb3IgdGhlIHNha2Ugb2YgaGVyIGZyZWVkb20sIHNoZSBoYWQgbm90IHlldCBvYnRhaW5lZCBhIG1vcmUgc2VjdXJlIG9yIG1vcmUgZGVsaWdodGZ1bCBleGVyY2lzZSBvZiBpdCB0aGFuIG5vdywgd2hlbiBvdGhlcnMgaGFkIHN0cml2ZW4gaW4gaGVyIGJlaGFsZiwgYW5kIHNoZSBoZXJzZWxmLCBhbG1vc3Qgd2l0aG91dCBhIGRyb3Agb2YgYmxvb2Qgb3IgYSBwYW5nIG9mIGdyaWVmLCBoYWQgYm9ybmUgYXdheSB0aGUgZmFpcmVzdCBhbmQgbW9zdCBlbnZpYWJsZSBvZiBwcml6ZXMuIFZlcmlseSwgdGhleSB3b3VsZCBzYXksIHZhbG91ciBhbmQgd2lzZG9tIGFyZSByYXJlIHRoaW5ncyBhbW9uZyBtZW4sIGJ1dCB0aGUgcmFyZXN0IG9mIGFsbCBibGVzc2luZ3MgaXMgdGhlIGp1c3QgbWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbWVuIGxpa2UgQWdlc2lsYcO8cywgb3IgTHlzYW5kZXIsIG9yIE5pY2lhcywgb3IgQWxjaWJpYWRlcyBjb3VsZCBpbmRlZWQgY29uZHVjdCB3YXJzIHdlbGwsIGFuZCB1bmRlcnN0b29kIGhvdyB0byBiZSB2aWN0b3Jpb3VzIGNvbW1hbmRlcnMgaW4gYmF0dGxlcyBieSBsYW5kIGFuZCBzZWEsIGJ1dCB0aGV5IHdvdWxkIG5vdCB1c2UgdGhlaXIgc3VjY2Vzc2VzIHNvIGFzIHRvIHdpbiBsZWdpdGltYXRlIGZhdm91ciBhbmQgcHJvbW90ZSB0aGUgcmlnaHQuIEluZGVlZCwgaWYgb25lIGV4Y2VwdHMgdGhlIGFjdGlvbiBhdCBNYXJhdGhvbiwgdGhlIHNlYS1maWdodCBhdCBTYWxhbWlzLCBQbGF0YWVhLCBUaGVybW9weWxhZSwgYW5kIHRoZSBhY2hpZXZlbWVudHMgb2YgQ2ltb24gYXQgdGhlIEV1cnltZWRvbiBhbmQgYWJvdXQgQ3lwcnVzLCBHcmVlY2UgaGFzIGZvdWdodCBhbGwgaGVyIGJhdHRsZXMgdG8gYnJpbmcgc2Vydml0dWRlIHVwb24gaGVyc2VsZiwgYW5kIGV2ZXJ5IG9uZSBvZiBoZXIgdHJvcGhpZXMgc3RhbmRzIGFzIGEgbWVtb3JpYWwgb2YgaGVyIG93biBjYWxhbWl0eSBhbmQgZGlzZ3JhY2UsIHNpbmNlIHNoZSBvd2VkIGhlciBvdmVydGhyb3cgY2hpZWZseSB0byB0aGUgYmFzZW5lc3MgYW5kIGNvbnRlbnRpb3VzbmVzcyBvZiBoZXIgbGVhZGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVhcyBtZW4gb2YgYW5vdGhlciByYWNlLCB3aG8gd2VyZSB0aG91Z2h0IHRvIGhhdmUgb25seSBzbGlnaHQgc3BhcmtzIGFuZCBpbnNpZ25pZmljYW50IHRyYWNlcyBvZiBhIGNvbW1vbiByZW1vdGUgYW5jZXN0cnksIGZyb20gd2hvbSBpdCB3YXMgYXN0b25pc2hpbmcgdGhhdCBhbnkgaGVscGZ1bCB3b3JkIG9yIHB1cnBvc2Ugc2hvdWxkIGJlIHZvdWNoc2FmZWQgdG8gR3JlZWNl4oCUdGhlc2UgbWVuIHVuZGVyd2VudCB0aGUgZ3JlYXRlc3QgcGVyaWxzIGFuZCBoYXJkc2hpcHMgaW4gb3JkZXIgdG8gcmVzY3VlIEdyZWVjZSBhbmQgc2V0IGhlciBmcmVlIGZyb20gY3J1ZWwgZGVzcG90cyBhbmQgdHlyYW50cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QmUgdGhhdCBhcyBpdCBtYXksIGhhZCBub3QgVGl0dXMsIG5vdyB0aGF0IHRoZSBzcGVjdGFjbGUgd2FzIGdpdmVuIHVwLCBhdCBvbmNlIGZvcmVzZWVuIHRoZSBydXNoIGFuZCBwcmVzcyBvZiB0aGUgdGhyb25nIGFuZCB0YWtlbiBoaW1zZWxmIGF3YXksIGl0IHdvdWxkIHNlZW0gdGhhdCBoZSBjb3VsZCBoYXJkbHkgaGF2ZSBzdXJ2aXZlZCB0aGUgY29uY291cnNlIG9mIHNvIG1hbnkgcGVvcGxlIGFib3V0IGhpbSBhdCBvbmNlIGFuZCBmcm9tIGFsbCBzaWRlcy4gQnV0IHdoZW4gdGhleSB3ZXJlIHRpcmVkIG9mIHNob3V0aW5nIGFib3V0IGhpcyB0ZW50LCBhbmQgbmlnaHQgd2FzIGFscmVhZHkgY29tZSwgdGhlbiwgd2l0aCBncmVldGluZ3MgYXJpZCBlbWJyYWNlcyBmb3IgYW55IGZyaWVuZHMgYW5kIGZlbGxvdyBjaXRpemVucyB3aG9tIHRoZXkgc2F3LCB0aGV5IGJldG9vayB0aGVtc2VsdmVzIHRvIGJhbnF1ZXRpbmcgYW5kIGNhcm91c2luZyB3aXRoIG9uZSBhbm90aGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZXJlLCB0aGVpciBwbGVhc3VyZSBuYXR1cmFsbHkgaW5jcmVhc2luZywgdGhleSB3ZXJlIG1vdmVkIHRvIHJlYXNvbiBhbmQgZGlzY291cnNlIGFib3V0IEdyZWVjZSwgc2F5aW5nIHRoYXQgYWx0aG91Z2ggc2hlIGhhZCB3YWdlZCBtYW55IHdhcnMgZm9yIHRoZSBzYWtlIG9mIGhlciBmcmVlZG9tLCBzaGUgaGFkIG5vdCB5ZXQgb2J0YWluZWQgYSBtb3JlIHNlY3VyZSBvciBtb3JlIGRlbGlnaHRmdWwgZXhlcmNpc2Ugb2YgaXQgdGhhbiBub3csIHdoZW4gb3RoZXJzIGhhZCBzdHJpdmVuIGluIGhlciBiZWhhbGYsIGFuZCBzaGUgaGVyc2VsZiwgYWxtb3N0IHdpdGhvdXQgYSBkcm9wIG9mIGJsb29kIG9yIGEgcGFuZyBvZiBncmllZiwgaGFkIGJvcm5lIGF3YXkgdGhlIGZhaXJlc3QgYW5kIG1vc3QgZW52aWFibGUgb2YgcHJpemVzLiBWZXJpbHksIHRoZXkgd291bGQgc2F5LCB2YWxvdXIgYW5kIHdpc2RvbSBhcmUgcmFyZSB0aGluZ3MgYW1vbmcgbWVuLCBidXQgdGhlIHJhcmVzdCBvZiBhbGwgYmxlc3NpbmdzIGlzIHRoZSBqdXN0IG1hbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBtZW4gbGlrZSBBZ2VzaWxhw7xzLCBvciBMeXNhbmRlciwgb3IgTmljaWFzLCBvciBBbGNpYmlhZGVzIGNvdWxkIGluZGVlZCBjb25kdWN0IHdhcnMgd2VsbCwgYW5kIHVuZGVyc3Rvb2QgaG93IHRvIGJlIHZpY3RvcmlvdXMgY29tbWFuZGVycyBpbiBiYXR0bGVzIGJ5IGxhbmQgYW5kIHNlYSwgYnV0IHRoZXkgd291bGQgbm90IHVzZSB0aGVpciBzdWNjZXNzZXMgc28gYXMgdG8gd2luIGxlZ2l0aW1hdGUgZmF2b3VyIGFuZCBwcm9tb3RlIHRoZSByaWdodC4gSW5kZWVkLCBpZiBvbmUgZXhjZXB0cyB0aGUgYWN0aW9uIGF0IE1hcmF0aG9uLCB0aGUgc2VhLWZpZ2h0IGF0IFNhbGFtaXMsIFBsYXRhZWEsIFRoZXJtb3B5bGFlLCBhbmQgdGhlIGFjaGlldmVtZW50cyBvZiBDaW1vbiBhdCB0aGUgRXVyeW1lZG9uIGFuZCBhYm91dCBDeXBydXMsIEdyZWVjZSBoYXMgZm91Z2h0IGFsbCBoZXIgYmF0dGxlcyB0byBicmluZyBzZXJ2aXR1ZGUgdXBvbiBoZXJzZWxmLCBhbmQgZXZlcnkgb25lIG9mIGhlciB0cm9waGllcyBzdGFuZHMgYXMgYSBtZW1vcmlhbCBvZiBoZXIgb3duIGNhbGFtaXR5IGFuZCBkaXNncmFjZSwgc2luY2Ugc2hlIG93ZWQgaGVyIG92ZXJ0aHJvdyBjaGllZmx5IHRvIHRoZSBiYXNlbmVzcyBhbmQgY29udGVudGlvdXNuZXNzIG9mIGhlciBsZWFkZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlYXMgbWVuIG9mIGFub3RoZXIgcmFjZSwgd2hvIHdlcmUgdGhvdWdodCB0byBoYXZlIG9ubHkgc2xpZ2h0IHNwYXJrcyBhbmQgaW5zaWduaWZpY2FudCB0cmFjZXMgb2YgYSBjb21tb24gcmVtb3RlIGFuY2VzdHJ5LCBmcm9tIHdob20gaXQgd2FzIGFzdG9uaXNoaW5nIHRoYXQgYW55IGhlbHBmdWwgd29yZCBvciBwdXJwb3NlIHNob3VsZCBiZSB2b3VjaHNhZmVkIHRvIEdyZWVjZeKAlHRoZXNlIG1lbiB1bmRlcndlbnQgdGhlIGdyZWF0ZXN0IHBlcmlscyBhbmQgaGFyZHNoaXBzIGluIG9yZGVyIHRvIHJlc2N1ZSBHcmVlY2UgYW5kIHNldCBoZXIgZnJlZSBmcm9tIGNydWVsIGRlc3BvdHMgYW5kIHR5cmFudHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvIHJhbiB0aGUgdGhvdWdodHMgb2YgdGhlIEdyZWVrczsgYW5kIHRoZSBhY3RzIG9mIFRpdHVzIHdlcmUgY29uc29uYW50IHdpdGggaGlzIHByb2NsYW1hdGlvbnMuIEZvciBhdCBvbmNlIGhlIHNlbnQgTGVudHVsdXMgdG8gQXNpYSB0byBzZXQgQmFyZ3lsaWEgZnJlZSwgYW5kIFN0ZXJ0aW5pdXMgdG8gVGhyYWNlIHRvIGRlbGl2ZXIgdGhlIGNpdGllcyBhbmQgaXNsYW5kcyB0aGVyZSBmcm9tIFBoaWxpcCdzIGdhcnJpc29ucy4gTW9yZW92ZXIsIFB1YmxpdXMgVmlsbGl1cyBzYWlsZWQgdG8gaGF2ZSBhIGNvbmZlcmVuY2Ugd2l0aCBBbnRpb2NodXMgY29uY2VybmluZyB0aGUgZnJlZWRvbSBvZiB0aGUgR3JlZWtzIHdobyB3ZXJlIHVuZGVyIGhpcyBzd2F5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaXR1cyBoaW1zZWxmIGFsc28gcGFpZCBhIHZpc2l0IHRvIENoYWxjaXMsIGFuZCB0aGVuIHNhaWxlZCBmcm9tIHRoZXJlIHRvIE1hZ25lc2lhLCByZW1vdmluZyB0aGVpciBnYXJyaXNvbnMgYW5kIHJlc3RvcmluZyB0byB0aGUgcGVvcGxlcyB0aGVpciBjb25zdGl0dXRpb25zLiBIZSB3YXMgYWxzbyBhcHBvaW50ZWQgbWFzdGVyIG9mIGNlcmVtb25pZXMgZm9yIHRoZSBOZW1laWFuIGdhbWVzIGF0IEFyZ29zLCB3aGVyZSBoZSBjb25kdWN0ZWQgdGhlIGZlc3RpdmFsIGluIHRoZSBiZXN0IHBvc3NpYmxlIG1hbm5lciwgYW5kIG9uY2UgbW9yZSBwdWJsaWNseSBwcm9jbGFpbWVkIGZyZWVkb20gdG8gdGhlIEdyZWVrcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSB2aXNpdGVkIHRoZSBkaWZmZXJlbnQgY2l0aWVzLCBlc3RhYmxpc2hpbmcgYW1vbmcgdGhlbSBsYXcgYW5kIG9yZGVyLCBhYnVuZGFudCBqdXN0aWNlLCBjb25jb3JkLCBhbmQgbXV0dWFsIGZyaWVuZGxpbmVzcy4gSGUgcXVpZXRlZCB0aGVpciBmYWN0aW9ucyBhbmQgcmVzdG9yZWQgdGhlaXIgZXhpbGVzLCBhbmQgcGx1bWVkIGhpbXNlbGYgb24gaGlzIHBlcnN1YWRpbmcgYW5kIHJlY29uY2lsaW5nIHRoZSBHcmVla3MgbW9yZSB0aGFuIG9uIGhpcyBjb25xdWVzdCBvZiB0aGUgTWFjZWRvbmlhbnMsIHNvIHRoYXQgdGhlaXIgZnJlZWRvbSBwcmVzZW50bHkgc2VlbWVkIHRvIHRoZW0gdGhlIGxlYXN0IG9mIGhpcyBiZW5lZmFjdGlvbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gcmFuIHRoZSB0aG91Z2h0cyBvZiB0aGUgR3JlZWtzOyBhbmQgdGhlIGFjdHMgb2YgVGl0dXMgd2VyZSBjb25zb25hbnQgd2l0aCBoaXMgcHJvY2xhbWF0aW9ucy4gRm9yIGF0IG9uY2UgaGUgc2VudCBMZW50dWx1cyB0byBBc2lhIHRvIHNldCBCYXJneWxpYSBmcmVlLCBhbmQgU3RlcnRpbml1cyB0byBUaHJhY2UgdG8gZGVsaXZlciB0aGUgY2l0aWVzIGFuZCBpc2xhbmRzIHRoZXJlIGZyb20gUGhpbGlwJ3MgZ2Fycmlzb25zLiBNb3Jlb3ZlciwgUHVibGl1cyBWaWxsaXVzIHNhaWxlZCB0byBoYXZlIGEgY29uZmVyZW5jZSB3aXRoIEFudGlvY2h1cyBjb25jZXJuaW5nIHRoZSBmcmVlZG9tIG9mIHRoZSBHcmVla3Mgd2hvIHdlcmUgdW5kZXIgaGlzIHN3YXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRpdHVzIGhpbXNlbGYgYWxzbyBwYWlkIGEgdmlzaXQgdG8gQ2hhbGNpcywgYW5kIHRoZW4gc2FpbGVkIGZyb20gdGhlcmUgdG8gTWFnbmVzaWEsIHJlbW92aW5nIHRoZWlyIGdhcnJpc29ucyBhbmQgcmVzdG9yaW5nIHRvIHRoZSBwZW9wbGVzIHRoZWlyIGNvbnN0aXR1dGlvbnMuIEhlIHdhcyBhbHNvIGFwcG9pbnRlZCBtYXN0ZXIgb2YgY2VyZW1vbmllcyBmb3IgdGhlIE5lbWVpYW4gZ2FtZXMgYXQgQXJnb3MsIHdoZXJlIGhlIGNvbmR1Y3RlZCB0aGUgZmVzdGl2YWwgaW4gdGhlIGJlc3QgcG9zc2libGUgbWFubmVyLCBhbmQgb25jZSBtb3JlIHB1YmxpY2x5IHByb2NsYWltZWQgZnJlZWRvbSB0byB0aGUgR3JlZWtzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgdmlzaXRlZCB0aGUgZGlmZmVyZW50IGNpdGllcywgZXN0YWJsaXNoaW5nIGFtb25nIHRoZW0gbGF3IGFuZCBvcmRlciwgYWJ1bmRhbnQganVzdGljZSwgY29uY29yZCwgYW5kIG11dHVhbCBmcmllbmRsaW5lc3MuIEhlIHF1aWV0ZWQgdGhlaXIgZmFjdGlvbnMgYW5kIHJlc3RvcmVkIHRoZWlyIGV4aWxlcywgYW5kIHBsdW1lZCBoaW1zZWxmIG9uIGhpcyBwZXJzdWFkaW5nIGFuZCByZWNvbmNpbGluZyB0aGUgR3JlZWtzIG1vcmUgdGhhbiBvbiBoaXMgY29ucXVlc3Qgb2YgdGhlIE1hY2Vkb25pYW5zLCBzbyB0aGF0IHRoZWlyIGZyZWVkb20gcHJlc2VudGx5IHNlZW1lZCB0byB0aGVtIHRoZSBsZWFzdCBvZiBoaXMgYmVuZWZhY3Rpb25zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5YZW5vY3JhdGVzIHRoZSBwaGlsb3NvcGhlciwgYXMgdGhlIHN0b3J5IHJ1bnMsIHdhcyBvbmNlIGJlaW5nIGhhbGVkIGF3YXkgdG8gcHJpc29uIGJ5IHRoZSB0YXgtY29sbGVjdG9ycyBmb3Igbm90IGhhdmluZyBwYWlkIHRoZSBhbGllbidzIHRheCwgYnV0IHdhcyByZXNjdWVkIG91dCBvZiB0aGVpciBoYW5kcyBieSBMeWN1cmd1cyB0aGUgb3JhdG9yLCB3aG8gYWxzbyB2aXNpdGVkIHRoZSBvZmZpY2lhbHMgd2l0aCBwdW5pc2htZW50IGZvciB0aGVpciBpbXB1ZGVuY2UuIFhlbm9jcmF0ZXMgYWZ0ZXJ3YXJkcyBtZXQgdGhlIHNvbnMgb2YgTHljdXJndXMsIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IGJveXMsIEkgYW0gbWFraW5nIGEgbm9ibGUgcmV0dXJuIHRvIHlvdXIgZmF0aGVyIGZvciBoaXMga2luZG5lc3MgdG93YXJkcyBtZTsgZm9yIGFsbCB0aGUgd29ybGQgaXMgcHJhaXNpbmcgaGltIGZvciB3aGF0IGhlIGRpZC48L3E+IEluIHRoZSBjYXNlIG9mIFRpdHVzIGFuZCB0aGUgUm9tYW5zLCBob3dldmVyLCBncmF0aXR1ZGUgZm9yIHRoZWlyIGJlbmVmYWN0aW9ucyB0byB0aGUgR3JlZWtzIGJyb3VnaHQgdGhlbSwgbm90IG1lcmVseSBwcmFpc2VzLCBidXQgYWxzbyBjb25maWRlbmNlIGFtb25nIGFsbCBtZW4gYW5kIHBvd2VyLCBhbmQganVzdGx5IHRvby4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG1lbiBub3Qgb25seSByZWNlaXZlZCB0aGUgb2ZmaWNlcnMgYXBwb2ludGVkIGJ5IHRoZW0sIGJ1dCBhY3R1YWxseSBzZW50IGZvciB0aGVtIGFuZCBpbnZpdGVkIHRoZW0gYW5kIHB1dCB0aGVtc2VsdmVzIGluIHRoZWlyIGhhbmRzLiBBbmQgdGhpcyB3YXMgdHJ1ZSBub3Qgb25seSBvZiBwZW9wbGVzIGFuZCBjaXRpZXMsIG5heSwgZXZlbiBraW5ncyB3aG8gaGFkIGJlZW4gd3JvbmdlZCBieSBvdGhlciBraW5ncyBmbGVkIGZvciByZWZ1Z2UgaW50byB0aGUgaGFuZHMgb2YgUm9tYW4gb2ZmaWNpYWxzLCBzbyB0aGF0IGluIGEgc2hvcnQgdGltZeKAlGFuZCBwZXJoYXBzIHRoZXJlIHdhcyBhbHNvIGRpdmluZSBndWlkYW5jZSBpbiB0aGlz4oCUZXZlcnl0aGluZyBiZWNhbWUgc3ViamVjdCB0byB0aGVtLiBCdXQgVGl0dXMgaGltc2VsZiB0b29rIG1vc3QgcHJpZGUgaW4gaGlzIGxpYmVyYXRpb24gb2YgR3JlZWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gZGVkaWNhdGluZyBhdCBEZWxwaGkgc29tZSBzaWx2ZXIgYnVja2xlcnMgYW5kIGhpcyBvd24gbG9uZyBzaGllbGQsIGhlIHByb3ZpZGVkIHRoZW0gd2l0aCB0aGlzIGluc2NyaXB0aW9uOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5PIHllIHNvbnMgb2YgWmV1cywgd2hvc2Ugam95IGlzIGluIHN3aWZ0IGhvcnNlbWFuc2hpcCwgTyB5ZSBUeW5kYXJpZGFlLCBwcmluY2VzIG9mIFNwYXJ0YSwgVGl0dXMsIGEgZGVzY2VuZGFudCBvZiBBZW5lYXMsIGhhcyBicm91Z2h0IHlvdSBhIG1vc3QgZXhjZWxsZW50IGdpZnQsIGhlIHdobyBmb3IgdGhlIHNvbnMgb2YgdGhlIEdyZWVrcyB3cm91Z2h0IGZyZWVkb20uPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlIZSBhbHNvIGRlZGljYXRlZCBhIGdvbGRlbiB3cmVhdGggdG8gQXBvbGxvLCBhbmQgaXQgYm9yZSB0aGlzIGluc2NyaXB0aW9uOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5UaGlzIHdpbGwgZml0bHkgbGllIG9uIHRoaW5lIGFtYnJvc2lhbCBsb2NrcywgTyBzb24gb2YgTGV0bywgdGhpcyB3cmVhdGggd2l0aCBzaGVlbiBvZiBnb2xkOyBpdCBpcyB0aGUgZ2lmdCBvZiB0aGUgZ3JlYXQgbGVhZGVyIG9mIHRoZSBjaGlsZHJlbiBvZiBBZW5lYXMuIFRoZXJlZm9yZSwgTyBGYXItZGFydGVyLCBiZXN0b3cgdXBvbiB0aGUgZ29kLWxpa2UgVGl0dXMgdGhlIGdsb3J5IGR1ZSB0byBoaXMgcHJvd2Vzcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlhlbm9jcmF0ZXMgdGhlIHBoaWxvc29waGVyLCBhcyB0aGUgc3RvcnkgcnVucywgd2FzIG9uY2UgYmVpbmcgaGFsZWQgYXdheSB0byBwcmlzb24gYnkgdGhlIHRheC1jb2xsZWN0b3JzIGZvciBub3QgaGF2aW5nIHBhaWQgdGhlIGFsaWVuJ3MgdGF4LCBidXQgd2FzIHJlc2N1ZWQgb3V0IG9mIHRoZWlyIGhhbmRzIGJ5IEx5Y3VyZ3VzIHRoZSBvcmF0b3IsIHdobyBhbHNvIHZpc2l0ZWQgdGhlIG9mZmljaWFscyB3aXRoIHB1bmlzaG1lbnQgZm9yIHRoZWlyIGltcHVkZW5jZS4gWGVub2NyYXRlcyBhZnRlcndhcmRzIG1ldCB0aGUgc29ucyBvZiBMeWN1cmd1cywgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBib3lzLCBJIGFtIG1ha2luZyBhIG5vYmxlIHJldHVybiB0byB5b3VyIGZhdGhlciBmb3IgaGlzIGtpbmRuZXNzIHRvd2FyZHMgbWU7IGZvciBhbGwgdGhlIHdvcmxkIGlzIHByYWlzaW5nIGhpbSBmb3Igd2hhdCBoZSBkaWQuPC9xPiBJbiB0aGUgY2FzZSBvZiBUaXR1cyBhbmQgdGhlIFJvbWFucywgaG93ZXZlciwgZ3JhdGl0dWRlIGZvciB0aGVpciBiZW5lZmFjdGlvbnMgdG8gdGhlIEdyZWVrcyBicm91Z2h0IHRoZW0sIG5vdCBtZXJlbHkgcHJhaXNlcywgYnV0IGFsc28gY29uZmlkZW5jZSBhbW9uZyBhbGwgbWVuIGFuZCBwb3dlciwgYW5kIGp1c3RseSB0b28uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBtZW4gbm90IG9ubHkgcmVjZWl2ZWQgdGhlIG9mZmljZXJzIGFwcG9pbnRlZCBieSB0aGVtLCBidXQgYWN0dWFsbHkgc2VudCBmb3IgdGhlbSBhbmQgaW52aXRlZCB0aGVtIGFuZCBwdXQgdGhlbXNlbHZlcyBpbiB0aGVpciBoYW5kcy4gQW5kIHRoaXMgd2FzIHRydWUgbm90IG9ubHkgb2YgcGVvcGxlcyBhbmQgY2l0aWVzLCBuYXksIGV2ZW4ga2luZ3Mgd2hvIGhhZCBiZWVuIHdyb25nZWQgYnkgb3RoZXIga2luZ3MgZmxlZCBmb3IgcmVmdWdlIGludG8gdGhlIGhhbmRzIG9mIFJvbWFuIG9mZmljaWFscywgc28gdGhhdCBpbiBhIHNob3J0IHRpbWXigJRhbmQgcGVyaGFwcyB0aGVyZSB3YXMgYWxzbyBkaXZpbmUgZ3VpZGFuY2UgaW4gdGhpc+KAlGV2ZXJ5dGhpbmcgYmVjYW1lIHN1YmplY3QgdG8gdGhlbS4gQnV0IFRpdHVzIGhpbXNlbGYgdG9vayBtb3N0IHByaWRlIGluIGhpcyBsaWJlcmF0aW9uIG9mIEdyZWVjZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiBkZWRpY2F0aW5nIGF0IERlbHBoaSBzb21lIHNpbHZlciBidWNrbGVycyBhbmQgaGlzIG93biBsb25nIHNoaWVsZCwgaGUgcHJvdmlkZWQgdGhlbSB3aXRoIHRoaXMgaW5zY3JpcHRpb2464oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5PIHllIHNvbnMgb2YgWmV1cywgd2hvc2Ugam95IGlzIGluIHN3aWZ0IGhvcnNlbWFuc2hpcCwgTyB5ZSBUeW5kYXJpZGFlLCBwcmluY2VzIG9mIFNwYXJ0YSwgVGl0dXMsIGEgZGVzY2VuZGFudCBvZiBBZW5lYXMsIGhhcyBicm91Z2h0IHlvdSBhIG1vc3QgZXhjZWxsZW50IGdpZnQsIGhlIHdobyBmb3IgdGhlIHNvbnMgb2YgdGhlIEdyZWVrcyB3cm91Z2h0IGZyZWVkb20uPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk8geWUgc29ucyBvZiBaZXVzLCB3aG9zZSBqb3kgaXMgaW4gc3dpZnQgaG9yc2VtYW5zaGlwLCBPIHllIFR5bmRhcmlkYWUsIHByaW5jZXMgb2YgU3BhcnRhLCBUaXR1cywgYSBkZXNjZW5kYW50IG9mIEFlbmVhcywgaGFzIGJyb3VnaHQgeW91IGEgbW9zdCBleGNlbGxlbnQgZ2lmdCwgaGUgd2hvIGZvciB0aGUgc29ucyBvZiB0aGUgR3JlZWtzIHdyb3VnaHQgZnJlZWRvbS48L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJSGUgYWxzbyBkZWRpY2F0ZWQgYSBnb2xkZW4gd3JlYXRoIHRvIEFwb2xsbywgYW5kIGl0IGJvcmUgdGhpcyBpbnNjcmlwdGlvbjrigJQKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgd2lsbCBmaXRseSBsaWUgb24gdGhpbmUgYW1icm9zaWFsIGxvY2tzLCBPIHNvbiBvZiBMZXRvLCB0aGlzIHdyZWF0aCB3aXRoIHNoZWVuIG9mIGdvbGQ7IGl0IGlzIHRoZSBnaWZ0IG9mIHRoZSBncmVhdCBsZWFkZXIgb2YgdGhlIGNoaWxkcmVuIG9mIEFlbmVhcy4gVGhlcmVmb3JlLCBPIEZhci1kYXJ0ZXIsIGJlc3RvdyB1cG9uIHRoZSBnb2QtbGlrZSBUaXR1cyB0aGUgZ2xvcnkgZHVlIHRvIGhpcyBwcm93ZXNzLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGlzIHdpbGwgZml0bHkgbGllIG9uIHRoaW5lIGFtYnJvc2lhbCBsb2NrcywgTyBzb24gb2YgTGV0bywgdGhpcyB3cmVhdGggd2l0aCBzaGVlbiBvZiBnb2xkOyBpdCBpcyB0aGUgZ2lmdCBvZiB0aGUgZ3JlYXQgbGVhZGVyIG9mIHRoZSBjaGlsZHJlbiBvZiBBZW5lYXMuIFRoZXJlZm9yZSwgTyBGYXItZGFydGVyLCBiZXN0b3cgdXBvbiB0aGUgZ29kLWxpa2UgVGl0dXMgdGhlIGdsb3J5IGR1ZSB0byBoaXMgcHJvd2Vzcy48L2w+CgkJCQkgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkl0IGZvbGxvd3MsIHRoZW4sIHRoYXQgdGhlIGNpdHkgb2YgQ29yaW50aCBoYXMgdHdpY2Ugbm93IGJlZW4gdGhlIHNjZW5lIG9mIHRoZSBzYW1lIGJlbmVmYWN0aW9uIHRvIHRoZSBHcmVla3M7IGZvciBpdCB3YXMgaW4gQ29yaW50aCB0aGF0IFRpdHVzIGF0IHRoaXMgdGltZSwgYW5kIGF0IENvcmludGggdGhhdCBOZXJvIGFnYWluIGluIG91ciBvd24gdGltZXMtaW4gYm90aCBjYXNlcyBhdCB0aGUgSXN0aG1pYW4gZ2FtZXMtbWFkZSB0aGUgR3JlZWtzIGZyZWUgYW5kIHNlbGYtZ292ZXJuaW5nLCBUaXR1cyBieSB2b2ljZSBvZiBoZXJhbGQsIGJ1dCBOZXJvIGluIGEgcHVibGljIGFkZHJlc3Mgd2hpY2ggaGUgZGVsaXZlcmVkIGluIHBlcnNvbiwgb24gYSB0cmlidW5hbCBpbiB0aGUgbWFya2V0LXBsYWNlIGFtaWRzdCB0aGUgbXVsdGl0dWRlLiBUaGlzLCBob3dldmVyLCBjYW1lIGF0IGEgbGF0ZXIgdGltZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2NyBBLkQuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkl0IGZvbGxvd3MsIHRoZW4sIHRoYXQgdGhlIGNpdHkgb2YgQ29yaW50aCBoYXMgdHdpY2Ugbm93IGJlZW4gdGhlIHNjZW5lIG9mIHRoZSBzYW1lIGJlbmVmYWN0aW9uIHRvIHRoZSBHcmVla3M7IGZvciBpdCB3YXMgaW4gQ29yaW50aCB0aGF0IFRpdHVzIGF0IHRoaXMgdGltZSwgYW5kIGF0IENvcmludGggdGhhdCBOZXJvIGFnYWluIGluIG91ciBvd24gdGltZXMtaW4gYm90aCBjYXNlcyBhdCB0aGUgSXN0aG1pYW4gZ2FtZXMtbWFkZSB0aGUgR3JlZWtzIGZyZWUgYW5kIHNlbGYtZ292ZXJuaW5nLCBUaXR1cyBieSB2b2ljZSBvZiBoZXJhbGQsIGJ1dCBOZXJvIGluIGEgcHVibGljIGFkZHJlc3Mgd2hpY2ggaGUgZGVsaXZlcmVkIGluIHBlcnNvbiwgb24gYSB0cmlidW5hbCBpbiB0aGUgbWFya2V0LXBsYWNlIGFtaWRzdCB0aGUgbXVsdGl0dWRlLiBUaGlzLCBob3dldmVyLCBjYW1lIGF0IGEgbGF0ZXIgdGltZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDY3IEEuRC48L25vdGU+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRpdHVzIG5vdyBiZWdhbiBhIG1vc3QgaG9ub3VyYWJsZSBhcmlkIHJpZ2h0ZW91cyB3YXIsIHRoZSB3YXIgYWdhaW5zdCBOYWJpcywgdGhhdCBtb3N0IHBlcm5pY2lvdXMgYW5kIGxhd2xlc3MgdHlyYW50IG9mIFNwYXJ0YSwgYnV0IGluIHRoZSBlbmQgaGUgZGlzYXBwb2ludGVkIHRoZSBob3BlcyBvZiBHcmVlY2UuIEZvciB0aG91Z2ggaXQgd2FzIGluIGhpcyBwb3dlciB0byBjYXB0dXJlIHRoZSB0eXJhbnQsIGhlIHJlZnVzZWQgdG8gZG8gc28sIGFuZCBtYWRlIHBlYWNlIHdpdGggaGltLCB0aHVzIGxlYXZpbmcgU3BhcnRhIHRvIHRoZSBmYXRlIG9mIGFuIHVud29ydGh5IHNlcnZpdHVkZS4gSGUgd2FzIGxlZCB0byB0aGlzIHN0ZXAgZWl0aGVyIGJ5IGhpcyBmZWFyIHRoYXQgYSBwcm90cmFjdGlvbiBvZiB0aGUgd2FyIHdvdWxkIGJyaW5nIGFub3RoZXIgZ2VuZXJhbCBmcm9tIFJvbWUgdG8gc3VjY2VlZCBoaW0gYW5kIHJvYiBoaW0gb2YgaGlzIGdsb3J5LCBvciBieSBoaXMgamVhbG91cyBkaXNwbGVhc3VyZSBhdCB0aGUgaG9ub3VycyBwYWlkIHRvIFBoaWxvcG9lbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gYWxsIG90aGVyIG1hdHRlcnMgUGhpbG9wb2VtZW4gd2FzIGEgbW9zdCBjYXBhYmxlIG1hbiBhbW9uZyB0aGUgR3JlZWtzLCBhbmQgaW4gdGhhdCB3YXIgcGFydGljdWxhcmx5IGhlIGRpc3BsYXllZCBhc3RvbmlzaGluZyBkZWVkcyBvZiBhYmlsaXR5IGFuZCBkYXJpbmcsIHNvIHRoYXQgaGUgd2FzIGV4dG9sbGVkIGJ5IHRoZSBBY2hhZWFucyBhcyBtdWNoIGFzIFRpdHVzLCBhbmQgZXF1YWxseSBob25vdXJlZCBpbiB0aGVpciB0aGVhdHJlcy4gVGhpcyBhbm5veWVkIFRpdHVzLCB3aG8gdGhvdWdodCBpdCBvdXQgb2Yga2VlcGluZyB0aGF0IGEgbWFuIG9mIEFyY2FkaWEsIHdobyBoYWQgaGVsZCBjb21tYW5kIGluIHNtYWxsIGJvcmRlciB3YXJzLCBzaG91bGQgcmVjZWl2ZSBqdXN0IGFzIG11Y2ggYWRtaXJhdGlvbiBmcm9tIHRoZSBBY2hhZWFucyBhcyBhIFJvbWFuIGNvbnN1bCwgd2hvIHdhcyB3YWdpbmcgd2FyIGluIGJlaGFsZiBvZiBHcmVlY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhpbC4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5QaGlsb3BvZW1lbjwvdGl0bGU+LCB4di4gMS0zPC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgVGl0dXMgaGltc2VsZiBoYWQgdGhpcyB0byBzYXkgaW4gZGVmZW5jZSBvZiBoaXMgY291cnNlLCBuYW1lbHksIHRoYXQgaGUgcHV0IGFuIGVuZCB0byB0aGUgd2FyIHdoZW4gaGUgc2F3IHRoYXQgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSB0eXJhbnQgd291bGQgaW52b2x2ZSB0aGUgcmVzdCBvZiB0aGUgU3BhcnRhbnMgYWxzbyBpbiBzZXJpb3VzIGRpc2FzdGVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRpdHVzIG9mZmVyZWQgdGhpcyBkZWZlbmNlIG9mIGhpcyBjb3Vyc2UgdG8gdGhlIGNvbmdyZXNzIG9mIEdyZWVrIHN0YXRlcyBhdCBDb3JpbnRoICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzNC40OCIgdmFsaWQ9InllcyI+TGl2eSwgeHh4aXYuIDQ4IGYuPC9iaWJsPikuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGl0dXMgbm93IGJlZ2FuIGEgbW9zdCBob25vdXJhYmxlIGFyaWQgcmlnaHRlb3VzIHdhciwgdGhlIHdhciBhZ2FpbnN0IE5hYmlzLCB0aGF0IG1vc3QgcGVybmljaW91cyBhbmQgbGF3bGVzcyB0eXJhbnQgb2YgU3BhcnRhLCBidXQgaW4gdGhlIGVuZCBoZSBkaXNhcHBvaW50ZWQgdGhlIGhvcGVzIG9mIEdyZWVjZS4gRm9yIHRob3VnaCBpdCB3YXMgaW4gaGlzIHBvd2VyIHRvIGNhcHR1cmUgdGhlIHR5cmFudCwgaGUgcmVmdXNlZCB0byBkbyBzbywgYW5kIG1hZGUgcGVhY2Ugd2l0aCBoaW0sIHRodXMgbGVhdmluZyBTcGFydGEgdG8gdGhlIGZhdGUgb2YgYW4gdW53b3J0aHkgc2Vydml0dWRlLiBIZSB3YXMgbGVkIHRvIHRoaXMgc3RlcCBlaXRoZXIgYnkgaGlzIGZlYXIgdGhhdCBhIHByb3RyYWN0aW9uIG9mIHRoZSB3YXIgd291bGQgYnJpbmcgYW5vdGhlciBnZW5lcmFsIGZyb20gUm9tZSB0byBzdWNjZWVkIGhpbSBhbmQgcm9iIGhpbSBvZiBoaXMgZ2xvcnksIG9yIGJ5IGhpcyBqZWFsb3VzIGRpc3BsZWFzdXJlIGF0IHRoZSBob25vdXJzIHBhaWQgdG8gUGhpbG9wb2VtZW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiBhbGwgb3RoZXIgbWF0dGVycyBQaGlsb3BvZW1lbiB3YXMgYSBtb3N0IGNhcGFibGUgbWFuIGFtb25nIHRoZSBHcmVla3MsIGFuZCBpbiB0aGF0IHdhciBwYXJ0aWN1bGFybHkgaGUgZGlzcGxheWVkIGFzdG9uaXNoaW5nIGRlZWRzIG9mIGFiaWxpdHkgYW5kIGRhcmluZywgc28gdGhhdCBoZSB3YXMgZXh0b2xsZWQgYnkgdGhlIEFjaGFlYW5zIGFzIG11Y2ggYXMgVGl0dXMsIGFuZCBlcXVhbGx5IGhvbm91cmVkIGluIHRoZWlyIHRoZWF0cmVzLiBUaGlzIGFubm95ZWQgVGl0dXMsIHdobyB0aG91Z2h0IGl0IG91dCBvZiBrZWVwaW5nIHRoYXQgYSBtYW4gb2YgQXJjYWRpYSwgd2hvIGhhZCBoZWxkIGNvbW1hbmQgaW4gc21hbGwgYm9yZGVyIHdhcnMsIHNob3VsZCByZWNlaXZlIGp1c3QgYXMgbXVjaCBhZG1pcmF0aW9uIGZyb20gdGhlIEFjaGFlYW5zIGFzIGEgUm9tYW4gY29uc3VsLCB3aG8gd2FzIHdhZ2luZyB3YXIgaW4gYmVoYWxmIG9mIEdyZWVjZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhpbC4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBoaWxvcG9lbWVuPC90aXRsZT4sIHh2LiAxLTM8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBoaWwuIDE1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGlsb3BvZW1lbjwvdGl0bGU+LCB4di4gMS0zPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGlsb3BvZW1lbjwvdGl0bGU+LCB4di4gMS0zPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIFRpdHVzIGhpbXNlbGYgaGFkIHRoaXMgdG8gc2F5IGluIGRlZmVuY2Ugb2YgaGlzIGNvdXJzZSwgbmFtZWx5LCB0aGF0IGhlIHB1dCBhbiBlbmQgdG8gdGhlIHdhciB3aGVuIGhlIHNhdyB0aGF0IHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgdHlyYW50IHdvdWxkIGludm9sdmUgdGhlIHJlc3Qgb2YgdGhlIFNwYXJ0YW5zIGFsc28gaW4gc2VyaW91cyBkaXNhc3Rlci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRpdHVzIG9mZmVyZWQgdGhpcyBkZWZlbmNlIG9mIGhpcyBjb3Vyc2UgdG8gdGhlIGNvbmdyZXNzIG9mIEdyZWVrIHN0YXRlcyBhdCBDb3JpbnRoICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM0LjQ4IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpdi4gNDggZi48L2JpYmw+KS48L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzQuNDgiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eGl2LiA0OCBmLjwvYmlibD4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIEFjaGFlYW5zIHZvdGVkIFRpdHVzIG1hbnkgaG9ub3Vycywgbm9uZSBvZiB3aGljaCBzZWVtZWQgY29tbWVuc3VyYXRlIHdpdGggaGlzIGJlbmVmYWN0aW9ucyBleGNlcHQgb25lIGdpZnQsIGFuZCB0aGlzIGNhdXNlZCBoaW0gYXMgbXVjaCBzYXRpc2ZhY3Rpb24gYXMgYWxsIHRoZSByZXN0IHB1dCB0b2dldGhlci4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyB3YXMgdGhlIGdpZnQ6IFRoZSBSb21hbnMgd2hvIHdlcmUgdW5oYXBwaWx5IHRha2VuIHByaXNvbmVycyBpbiB0aGUgd2FyIHdpdGggSGFubmliYWwgaGFkIGJlZW4gc29sZCBhYm91dCBoaXRoZXIgYW5kIHRoaXRoZXIsIGFuZCB3ZXJlIHNlcnZpbmcgYXMgc2xhdmVzLiBJbiBHcmVlY2UgdGhlcmUgd2VyZSBhcyBtYW55IGFzIHR3ZWx2ZSBodW5kcmVkIG9mIHRoZW0uIFRoZSBjaGFuZ2UgaW4gdGhlaXIgbG90IG1hZGUgdGhlbSBwaXRpZnVsIG9iamVjdHMgYWx3YXlzLCBidXQgdGhlbiBldmVuIG1vcmUgdGhhbiBldmVyLCBuYXR1cmFsbHksIHdoZW4gdGhleSBmZWxsIGluIHdpdGggc29ucywgb3IgYnJvdGhlcnMsIG9yIGZhbWlsaWFyIGZyaWVuZHMsIGFzIHRoZSBjYXNlIG1pZ2h0IGJlLCBzbGF2ZXMgd2l0aCBmcmVlbWVuIGFuZCBjYXB0aXZlcyB3aXRoIHZpY3RvcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiBUaXR1cyB3b3VsZCBub3QgdGFrZSBhd2F5IGZyb20gdGhlaXIgb3duZXJzLCBhbHRob3VnaCBoZSB3YXMgZGlzdHJlc3NlZCBhdCB0aGVpciBjb25kaXRpb24sIGJ1dCB0aGUgQWNoYWVhbnMgcmFuc29tZWQgdGhlbSBhbGwgYXQgZml2ZSBtaW5hczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBtaW5hIHdhcyBvbmUgc2l4dGlldGggcGFydCBvZiBhIHRhbGVudCwgb3Igb25lIGh1bmRyZWQgZHJhY2htYXMuPC9ub3RlPiB0aGUgbWFuLCBjb2xsZWN0ZWQgdGhlbSB0b2dldGhlciwgYW5kIG1hZGUgYSBwcmVzZW50IG9mIHRoZW0gdG8gVGl0dXMganVzdCBhcyBoZSB3YXMgYWJvdXQgdG8gZW1iYXJrLCBzbyB0aGF0IGhlIHNhaWxlZCBmb3IgaG9tZSB3aXRoIGEgZ2xhZCBoZWFydDsgaGlzIG5vYmxlIGRlZWRzIGhhZCBicm91Z2h0IGhpbSBhIG5vYmxlIHJlY29tcGVuc2UsIGFuZCBvbmUgYmVmaXR0aW5nIGEgZ3JlYXQgbWFuIHdobyBsb3ZlZCBoaXMgZmVsbG93IGNpdGl6ZW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGFwcGVhcnMgdG8gaGF2ZSBmdXJuaXNoZWQgaGlzIHRyaXVtcGggd2l0aCBpdHMgbW9zdCBnbG9yaW91cyBmZWF0dXJlLiBGb3IgdGhlc2UgbWVuIHNoYXZlZCB0aGVpciBoZWFkcyBhbmQgd29yZSBmZWx0IGNhcHMsIGFzIGl0IGlzIGN1c3RvbWFyeSBmb3Igc2xhdmVzIHRvIGRvIHdoZW4gdGhleSBhcmUgc2V0IGZyZWUsIGFuZCBpbiB0aGlzIGhhYml0IGZvbGxvd2VkIHRoZSB0cml1bXBoYWwgY2FyIG9mIFRpdHVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIHdhcyB0aGUgZ2lmdDogVGhlIFJvbWFucyB3aG8gd2VyZSB1bmhhcHBpbHkgdGFrZW4gcHJpc29uZXJzIGluIHRoZSB3YXIgd2l0aCBIYW5uaWJhbCBoYWQgYmVlbiBzb2xkIGFib3V0IGhpdGhlciBhbmQgdGhpdGhlciwgYW5kIHdlcmUgc2VydmluZyBhcyBzbGF2ZXMuIEluIEdyZWVjZSB0aGVyZSB3ZXJlIGFzIG1hbnkgYXMgdHdlbHZlIGh1bmRyZWQgb2YgdGhlbS4gVGhlIGNoYW5nZSBpbiB0aGVpciBsb3QgbWFkZSB0aGVtIHBpdGlmdWwgb2JqZWN0cyBhbHdheXMsIGJ1dCB0aGVuIGV2ZW4gbW9yZSB0aGFuIGV2ZXIsIG5hdHVyYWxseSwgd2hlbiB0aGV5IGZlbGwgaW4gd2l0aCBzb25zLCBvciBicm90aGVycywgb3IgZmFtaWxpYXIgZnJpZW5kcywgYXMgdGhlIGNhc2UgbWlnaHQgYmUsIHNsYXZlcyB3aXRoIGZyZWVtZW4gYW5kIGNhcHRpdmVzIHdpdGggdmljdG9ycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiBUaXR1cyB3b3VsZCBub3QgdGFrZSBhd2F5IGZyb20gdGhlaXIgb3duZXJzLCBhbHRob3VnaCBoZSB3YXMgZGlzdHJlc3NlZCBhdCB0aGVpciBjb25kaXRpb24sIGJ1dCB0aGUgQWNoYWVhbnMgcmFuc29tZWQgdGhlbSBhbGwgYXQgZml2ZSBtaW5hczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIG1pbmEgd2FzIG9uZSBzaXh0aWV0aCBwYXJ0IG9mIGEgdGFsZW50LCBvciBvbmUgaHVuZHJlZCBkcmFjaG1hcy48L25vdGU+IHRoZSBtYW4sIGNvbGxlY3RlZCB0aGVtIHRvZ2V0aGVyLCBhbmQgbWFkZSBhIHByZXNlbnQgb2YgdGhlbSB0byBUaXR1cyBqdXN0IGFzIGhlIHdhcyBhYm91dCB0byBlbWJhcmssIHNvIHRoYXQgaGUgc2FpbGVkIGZvciBob21lIHdpdGggYSBnbGFkIGhlYXJ0OyBoaXMgbm9ibGUgZGVlZHMgaGFkIGJyb3VnaHQgaGltIGEgbm9ibGUgcmVjb21wZW5zZSwgYW5kIG9uZSBiZWZpdHRpbmcgYSBncmVhdCBtYW4gd2hvIGxvdmVkIGhpcyBmZWxsb3cgY2l0aXplbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYXBwZWFycyB0byBoYXZlIGZ1cm5pc2hlZCBoaXMgdHJpdW1waCB3aXRoIGl0cyBtb3N0IGdsb3Jpb3VzIGZlYXR1cmUuIEZvciB0aGVzZSBtZW4gc2hhdmVkIHRoZWlyIGhlYWRzIGFuZCB3b3JlIGZlbHQgY2FwcywgYXMgaXQgaXMgY3VzdG9tYXJ5IGZvciBzbGF2ZXMgdG8gZG8gd2hlbiB0aGV5IGFyZSBzZXQgZnJlZSwgYW5kIGluIHRoaXMgaGFiaXQgZm9sbG93ZWQgdGhlIHRyaXVtcGhhbCBjYXIgb2YgVGl0dXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhIG1vcmUgYmVhdXRpZnVsIHNob3cgd2FzIG1hZGUgYnkgdGhlIHNwb2lscyBvZiB3YXIgd2hpY2ggd2VyZSBkaXNwbGF5ZWQgaW4gdGhlIHByb2Nlc3Npb27igJRHcmVlayBoZWxtZXRzIGFuZCBNYWNlZG9uaWFuIGJ1Y2tsZXJzIGFuZCBwaWtlcy4gQmVzaWRlcywgdGhlIGFtb3VudCBvZiBtb25leSBleGhpYml0ZWQgd2FzIGxhcmdlLiBUdWRpdGFudXMgcmVjb3JkcyB0aGF0IHRoZXJlIHdlcmUgY2FycmllZCBpbiB0aGUgcHJvY2Vzc2lvbiB0aHJlZSB0aG91c2FuZCBzZXZlbiBodW5kcmVkIGFuZCB0aGlydGVlbiBwb3VuZHMgb2YgZ29sZCBidWxsaW9uLCBmb3J0eS10aHJlZSB0aG91c2FuZCB0d28gaHVuZHJlZCBhbmQgc2V2ZW50eSBwb3VuZHMgb2Ygc2lsdmVyLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgZm91cnRlZW4gdGhvdXNhbmQgZml2ZSBodW5kcmVkIGFuZCBmb3VydGVlbiBnb2xkIGNvaW5zIGJlYXJpbmcgUGhpbGlwJ3MgZWZmaWd5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXNlIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlBoaWxpcHM8L3E+IHdlcmUgbmVhcmx5IGVxdWl2YWxlbnQgdG8gc292ZXJlaWducy4gQ2YuIExpdnkncyBkZXNjcmlwdGlvbiBvZiB0aGUgdHJpdW1waCAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzQuNTIiIHZhbGlkPSJ5ZXMiPnh4eGl2LiA1MjwvYmlibD4pLjwvbm90ZT4gQW5kIGFwYXJ0IGZyb20gdGhpcyBtb25leSBQaGlsaXAgb3dlZCBoaXMgZmluZSBvZiBhIHRob3VzYW5kIHRhbGVudHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGbGFtLiA5LjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaXguIDU8L2JpYmw+Ljwvbm90ZT4gVGhpcyBmaW5lLCBob3dldmVyLCB0aGUgUm9tYW5zIHdlcmUgYWZ0ZXJ3YXJkcyBwZXJzdWFkZWQgdG8gcmVtaXQgdG8gUGhpbGlwLCBhbmQgdGhpcyB3YXMgY2hpZWZseSBkdWUgdG8gdGhlIGVmZm9ydHMgb2YgVGl0dXM7IHRoZXkgYWxzbyBtYWRlIFBoaWxpcCB0aGVpciBhbGx5LCBhbmQgc2VudCBiYWNrIGhpcyBzb24gd2hvbSB0aGV5IGhlbGQgYXMgaG9zdGFnZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGEgbW9yZSBiZWF1dGlmdWwgc2hvdyB3YXMgbWFkZSBieSB0aGUgc3BvaWxzIG9mIHdhciB3aGljaCB3ZXJlIGRpc3BsYXllZCBpbiB0aGUgcHJvY2Vzc2lvbuKAlEdyZWVrIGhlbG1ldHMgYW5kIE1hY2Vkb25pYW4gYnVja2xlcnMgYW5kIHBpa2VzLiBCZXNpZGVzLCB0aGUgYW1vdW50IG9mIG1vbmV5IGV4aGliaXRlZCB3YXMgbGFyZ2UuIFR1ZGl0YW51cyByZWNvcmRzIHRoYXQgdGhlcmUgd2VyZSBjYXJyaWVkIGluIHRoZSBwcm9jZXNzaW9uIHRocmVlIHRob3VzYW5kIHNldmVuIGh1bmRyZWQgYW5kIHRoaXJ0ZWVuIHBvdW5kcyBvZiBnb2xkIGJ1bGxpb24sIGZvcnR5LXRocmVlIHRob3VzYW5kIHR3byBodW5kcmVkIGFuZCBzZXZlbnR5IHBvdW5kcyBvZiBzaWx2ZXIsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBmb3VydGVlbiB0aG91c2FuZCBmaXZlIGh1bmRyZWQgYW5kIGZvdXJ0ZWVuIGdvbGQgY29pbnMgYmVhcmluZyBQaGlsaXAncyBlZmZpZ3kuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVzZSAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlBoaWxpcHM8L3E+IHdlcmUgbmVhcmx5IGVxdWl2YWxlbnQgdG8gc292ZXJlaWducy4gQ2YuIExpdnkncyBkZXNjcmlwdGlvbiBvZiB0aGUgdHJpdW1waCAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzNC41MiIgdmFsaWQ9InllcyI+eHh4aXYuIDUyPC9iaWJsPikuPC9ub3RlPiBBbmQgYXBhcnQgZnJvbSB0aGlzIG1vbmV5IFBoaWxpcCBvd2VkIGhpcyBmaW5lIG9mIGEgdGhvdXNhbmQgdGFsZW50cy48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlBoaWxpcHM8L3E+IHdlcmUgbmVhcmx5IGVxdWl2YWxlbnQgdG8gc292ZXJlaWducy4gQ2YuIExpdnkncyBkZXNjcmlwdGlvbiBvZiB0aGUgdHJpdW1waCAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzNC41MiIgdmFsaWQ9InllcyI+eHh4aXYuIDUyPC9iaWJsPikuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gOS41IiB2YWxpZD0ieWVzIj5jaGFwdGVyIGl4LiA1PC9iaWJsPi48L25vdGU+IFRoaXMgZmluZSwgaG93ZXZlciwgdGhlIFJvbWFucyB3ZXJlIGFmdGVyd2FyZHMgcGVyc3VhZGVkIHRvIHJlbWl0IHRvIFBoaWxpcCwgYW5kIHRoaXMgd2FzIGNoaWVmbHkgZHVlIHRvIHRoZSBlZmZvcnRzIG9mIFRpdHVzOyB0aGV5IGFsc28gbWFkZSBQaGlsaXAgdGhlaXIgYWxseSwgYW5kIHNlbnQgYmFjayBoaXMgc29uIHdob20gdGhleSBoZWxkIGFzIGhvc3RhZ2UuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDkuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciBpeC4gNTwvYmlibD4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UHJlc2VudGx5LCBob3dldmVyLCBBbnRpb2NodXMgY3Jvc3NlZCBpbnRvIEdyZWVjZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBhdXR1bW4gb2YgMTkyIEIuQy48L25vdGU+IHdpdGggbWFueSBzaGlwcyBhbmQgYSBsYXJnZSBhcm15LCBhbmQgYmVnYW4gdG8gc3RpciB0aGUgY2l0aWVzIGludG8gZmFjdGlvbiBhbmQgcmV2b2x0LiBUaGUgQWV0b2xpYW5zIG1hZGUgY29tbW9uIGNhdXNlIHdpdGggaGltLCBhIHBlb3BsZSB3aGljaCBoYWQgbG9uZyBiZWVuIG1vc3QgaW5pbWljYWxseSBkaXNwb3NlZCB0b3dhcmRzIHRoZSBSb21hbnMsIGFuZCB0aGV5IHN1Z2dlc3RlZCB0byBoaW0sIGFzIGEgcHJldGV4dCB0aGF0IHdvdWxkIGFjY291bnQgZm9yIHRoZSB3YXIsIHRoYXQgaGUgc2hvdWxkIG9mZmVyIHRoZSBHcmVla3MgdGhlaXIgZnJlZWRvbS4gVGhlIEdyZWVrcyBkaWQgbm90IHdhbnQgdG8gYmUgc2V0IGZyZWUsIGZvciB0aGV5IHdlcmUgZnJlZSBhbHJlYWR5OyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgZm9yIGxhY2sgb2YgYSBtb3JlIGFwcHJvcHJpYXRlIGdyb3VuZCBmb3IgaGlzIGFjdGlvbiB0aGUgQWV0b2xpYW5zIHRhdWdodCBBbnRpb2NodXMgdG8gbWFrZSB1c2Ugb2YgdGhhdCBmYWlyZXN0IG9mIGFsbCBuYW1lcy4gVGhlIFJvbWFucywgZ3JlYXRseSBhbGFybWVkIGJ5IHJlcG9ydHMgb2YgZGVmZWN0aW9uIGFtb25nIHRoZSBHcmVla3MgYW5kIG9mIHRoZSBwb3dlciBvZiBBbnRpb2NodXMsIHNlbnQgb3V0IE1hbml1cyBBY2lsbGl1cyBhcyBjb25zdWxhciBnZW5lcmFsIGZvciB0aGUgd2FyLCBidXQgbWFkZSBUaXR1cyBoaXMgbGlldXRlbmFudCB0byBwbGVhc2UgdGhlIEdyZWVrcy4gVGhlIG1lcmUgc2lnaHQgb2YgaGltIGNvbmZpcm1lZCBzb21lIG9mIHRoZXNlIGluIHRoZWlyIGxveWFsdHkgdG8gUm9tZSwgd2hpbGUgdG8gb3RoZXJzLCB3aG8gd2VyZSBiZWdpbm5pbmcgdG8gYmUgaW5mZWN0ZWQgd2l0aCBkaXNsb3lhbHR5LCBoZSBhZG1pbmlzdGVyZWQgYSB0aW1lbHkgbWVkaWNpbmUsIGFzIGl0IHdlcmUsIGluIHRoZSBzaGFwZSBvZiBnb29kIHdpbGwgdG93YXJkcyBoaW1zZWxmLCBhbmQgdGh1cyBjaGVja2VkIHRoZWlyIG1hbGFkeSBhbmQgcHJldmVudGVkIHRoZW0gZnJvbSBnb2luZyB3cm9uZy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QSBmZXcsIGhvd2V2ZXIsIGVzY2FwZWQgaGlzIGluZmx1ZW5jZSwgaGF2aW5nIGJlZW4gYWxyZWFkeSB3b24gb3ZlciBiZWZvcmVoYW5kIGFuZCB0b3RhbGx5IGNvcnJ1cHRlZCBieSB0aGUgQWV0b2xpYW5zLCBidXQgZXZlbiB0aGVzZSwgaW4gc3BpdGUgb2YgaGlzIHZleGF0aW9uIGFuZCBhbmdlciwgd2VyZSBzcGFyZWQgYnkgaGltIGFmdGVyIHRoZSBiYXR0bGUuIEZvciBBbnRpb2NodXMgd2FzIGRlZmVhdGVkIGF0IFRoZXJtb3B5bGFlPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTkxIEIuQy4gIEZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBiYXR0bGUsIGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzNi4xNCIgdmFsaWQ9InllcyI+TGl2eSwgeHh4dmkuIDE0LTIxPC9iaWJsPi48L25vdGU+ICBhbmQgcHV0IHRvIGZsaWdodCwgYW5kIGF0IG9uY2Ugc2FpbGVkIGJhY2sgdG8gQXNpYTsgd2hpbGUgTWFuaXVzIHRoZSBjb25zdWwgd2VudCBhZ2FpbnN0IHNvbWUgb2YgdGhlIEFldG9saWFucyBoaW1zZWxmIGFuZCBiZXNpZWdlZCB0aGVtLCBsZWF2aW5nIG90aGVycyB0byBLaW5nIFBoaWxpcCB0byBkZXN0cm95LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gaXQgY2FtZSBhYm91dCB0aGF0IHRoZSBEb2xvcGlhbnMgYW5kIE1hZ25lc2lhbnMgaGVyZSwgdGhlIEF0aGFtYW5pYW5zIGFuZCBBcGVyYW50aWFucyB0aGVyZSwgd2VyZSBoYXJyaWVkIGFuZCBwbHVuZGVyZWQgYnkgdGhlIE1hY2Vkb25pYW5zLCB3aGlsZSBNYW5pdXMgaGltc2VsZiwgYWZ0ZXIgc2Fja2luZyBIZXJhY2xlaWEsIHdhcyBlbmdhZ2VkIGluIHRoZSBzaWVnZSBvZiBOYXVwYWN0dXMsIHdoaWNoIHRoZSBBZXRvbGlhbnMgaGVsZC4gVGhlbiBUaXR1cywgb3V0IG9mIHBpdHkgZm9yIHRoZSBHcmVla3MsIHNhaWxlZCBhY3Jvc3MgZnJvbSBQZWxvcG9ubmVzdXMgdG8gdGhlIGNvbnN1bC4gQXQgZmlyc3QgaGUgY2hpZGVkIE1hbml1cyBiZWNhdXNlLCBhbHRob3VnaCB0aGUgdmljdG9yeSB3YXMgaGlzIG93biwgaGUgd2FzIHBlcm1pdHRpbmcgUGhpbGlwIHRvIGNhcnJ5IG9mZiB0aGUgcHJpemVzIG9mIHRoZSB3YXIsIGFuZCB0byBncmF0aWZ5IGhpcyBhbmdlciB3YXMgd2FzdGluZyB0aW1lIGluIHRoZSBzaWVnZSBvZiBhIHNpbmdsZSBjaXR5LCB3aGlsZSB0aGUgTWFjZWRvbmlhbnMgd2VyZSBzdWJkdWluZyBtYW55IG5hdGlvbnMgYW5kIGtpbmdkb21zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCB3aGVuIHRoZSBiZXNpZWdlZCBjaXRpemVucyBjYXVnaHQgc2lnaHQgb2YgaGltIGZyb20gdGhlaXIgd2FsbHMgYW5kIGNhbGxlZCBhbG91ZCB1cG9uIGhpbSBhbmQgc3RyZXRjaGVkIG91dCB0aGVpciBoYW5kcyB0byBoaW0gaW1wbG9yaW5nbHksIGhlIHR1cm5lZCBhd2F5LCBidXJzdCBpbnRvIHRlYXJzLCBhbmQgbGVmdCB0aGUgcGxhY2UsIHdpdGhvdXQgc2F5aW5nIGFueXRoaW5nIG1vcmUgYXQgdGhlIHRpbWU7IGFmdGVyd2FyZHMsIGhvd2V2ZXIsIGhlIGhhZCBhbiBpbnRlcnZpZXcgd2l0aCBNYW5pdXMsIHB1dCBhbiBlbmQgdG8gaGlzIHdyYXRoLCBhbmQgaW5kdWNlZCBoaW0gdG8gZ3JhbnQgdGhlIEFldG9saWFucyBhIHRydWNlLCBhbmQgdGltZSBpbiB3aGljaCB0byBzZW5kIGFuIGVtYmFzc3kgdG8gUm9tZSB3aXRoIGEgcGxlYSBmb3IgbW9kZXJhdGUgdGVybXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UHJlc2VudGx5LCBob3dldmVyLCBBbnRpb2NodXMgY3Jvc3NlZCBpbnRvIEdyZWVjZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIGF1dHVtbiBvZiAxOTIgQi5DLjwvbm90ZT4gd2l0aCBtYW55IHNoaXBzIGFuZCBhIGxhcmdlIGFybXksIGFuZCBiZWdhbiB0byBzdGlyIHRoZSBjaXRpZXMgaW50byBmYWN0aW9uIGFuZCByZXZvbHQuIFRoZSBBZXRvbGlhbnMgbWFkZSBjb21tb24gY2F1c2Ugd2l0aCBoaW0sIGEgcGVvcGxlIHdoaWNoIGhhZCBsb25nIGJlZW4gbW9zdCBpbmltaWNhbGx5IGRpc3Bvc2VkIHRvd2FyZHMgdGhlIFJvbWFucywgYW5kIHRoZXkgc3VnZ2VzdGVkIHRvIGhpbSwgYXMgYSBwcmV0ZXh0IHRoYXQgd291bGQgYWNjb3VudCBmb3IgdGhlIHdhciwgdGhhdCBoZSBzaG91bGQgb2ZmZXIgdGhlIEdyZWVrcyB0aGVpciBmcmVlZG9tLiBUaGUgR3JlZWtzIGRpZCBub3Qgd2FudCB0byBiZSBzZXQgZnJlZSwgZm9yIHRoZXkgd2VyZSBmcmVlIGFscmVhZHk7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBmb3IgbGFjayBvZiBhIG1vcmUgYXBwcm9wcmlhdGUgZ3JvdW5kIGZvciBoaXMgYWN0aW9uIHRoZSBBZXRvbGlhbnMgdGF1Z2h0IEFudGlvY2h1cyB0byBtYWtlIHVzZSBvZiB0aGF0IGZhaXJlc3Qgb2YgYWxsIG5hbWVzLiBUaGUgUm9tYW5zLCBncmVhdGx5IGFsYXJtZWQgYnkgcmVwb3J0cyBvZiBkZWZlY3Rpb24gYW1vbmcgdGhlIEdyZWVrcyBhbmQgb2YgdGhlIHBvd2VyIG9mIEFudGlvY2h1cywgc2VudCBvdXQgTWFuaXVzIEFjaWxsaXVzIGFzIGNvbnN1bGFyIGdlbmVyYWwgZm9yIHRoZSB3YXIsIGJ1dCBtYWRlIFRpdHVzIGhpcyBsaWV1dGVuYW50IHRvIHBsZWFzZSB0aGUgR3JlZWtzLiBUaGUgbWVyZSBzaWdodCBvZiBoaW0gY29uZmlybWVkIHNvbWUgb2YgdGhlc2UgaW4gdGhlaXIgbG95YWx0eSB0byBSb21lLCB3aGlsZSB0byBvdGhlcnMsIHdobyB3ZXJlIGJlZ2lubmluZyB0byBiZSBpbmZlY3RlZCB3aXRoIGRpc2xveWFsdHksIGhlIGFkbWluaXN0ZXJlZCBhIHRpbWVseSBtZWRpY2luZSwgYXMgaXQgd2VyZSwgaW4gdGhlIHNoYXBlIG9mIGdvb2Qgd2lsbCB0b3dhcmRzIGhpbXNlbGYsIGFuZCB0aHVzIGNoZWNrZWQgdGhlaXIgbWFsYWR5IGFuZCBwcmV2ZW50ZWQgdGhlbSBmcm9tIGdvaW5nIHdyb25nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkEgZmV3LCBob3dldmVyLCBlc2NhcGVkIGhpcyBpbmZsdWVuY2UsIGhhdmluZyBiZWVuIGFscmVhZHkgd29uIG92ZXIgYmVmb3JlaGFuZCBhbmQgdG90YWxseSBjb3JydXB0ZWQgYnkgdGhlIEFldG9saWFucywgYnV0IGV2ZW4gdGhlc2UsIGluIHNwaXRlIG9mIGhpcyB2ZXhhdGlvbiBhbmQgYW5nZXIsIHdlcmUgc3BhcmVkIGJ5IGhpbSBhZnRlciB0aGUgYmF0dGxlLiBGb3IgQW50aW9jaHVzIHdhcyBkZWZlYXRlZCBhdCBUaGVybW9weWxhZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTkxIEIuQy4gIEZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBiYXR0bGUsIGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM2LjE0IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHh2aS4gMTQtMjE8L2JpYmw+Ljwvbm90ZT4gIGFuZCBwdXQgdG8gZmxpZ2h0LCBhbmQgYXQgb25jZSBzYWlsZWQgYmFjayB0byBBc2lhOyB3aGlsZSBNYW5pdXMgdGhlIGNvbnN1bCB3ZW50IGFnYWluc3Qgc29tZSBvZiB0aGUgQWV0b2xpYW5zIGhpbXNlbGYgYW5kIGJlc2llZ2VkIHRoZW0sIGxlYXZpbmcgb3RoZXJzIHRvIEtpbmcgUGhpbGlwIHRvIGRlc3Ryb3kuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzNi4xNCIgdmFsaWQ9InllcyI+TGl2eSwgeHh4dmkuIDE0LTIxPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBpdCBjYW1lIGFib3V0IHRoYXQgdGhlIERvbG9waWFucyBhbmQgTWFnbmVzaWFucyBoZXJlLCB0aGUgQXRoYW1hbmlhbnMgYW5kIEFwZXJhbnRpYW5zIHRoZXJlLCB3ZXJlIGhhcnJpZWQgYW5kIHBsdW5kZXJlZCBieSB0aGUgTWFjZWRvbmlhbnMsIHdoaWxlIE1hbml1cyBoaW1zZWxmLCBhZnRlciBzYWNraW5nIEhlcmFjbGVpYSwgd2FzIGVuZ2FnZWQgaW4gdGhlIHNpZWdlIG9mIE5hdXBhY3R1cywgd2hpY2ggdGhlIEFldG9saWFucyBoZWxkLiBUaGVuIFRpdHVzLCBvdXQgb2YgcGl0eSBmb3IgdGhlIEdyZWVrcywgc2FpbGVkIGFjcm9zcyBmcm9tIFBlbG9wb25uZXN1cyB0byB0aGUgY29uc3VsLiBBdCBmaXJzdCBoZSBjaGlkZWQgTWFuaXVzIGJlY2F1c2UsIGFsdGhvdWdoIHRoZSB2aWN0b3J5IHdhcyBoaXMgb3duLCBoZSB3YXMgcGVybWl0dGluZyBQaGlsaXAgdG8gY2Fycnkgb2ZmIHRoZSBwcml6ZXMgb2YgdGhlIHdhciwgYW5kIHRvIGdyYXRpZnkgaGlzIGFuZ2VyIHdhcyB3YXN0aW5nIHRpbWUgaW4gdGhlIHNpZWdlIG9mIGEgc2luZ2xlIGNpdHksIHdoaWxlIHRoZSBNYWNlZG9uaWFucyB3ZXJlIHN1YmR1aW5nIG1hbnkgbmF0aW9ucyBhbmQga2luZ2RvbXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoZW4gdGhlIGJlc2llZ2VkIGNpdGl6ZW5zIGNhdWdodCBzaWdodCBvZiBoaW0gZnJvbSB0aGVpciB3YWxscyBhbmQgY2FsbGVkIGFsb3VkIHVwb24gaGltIGFuZCBzdHJldGNoZWQgb3V0IHRoZWlyIGhhbmRzIHRvIGhpbSBpbXBsb3JpbmdseSwgaGUgdHVybmVkIGF3YXksIGJ1cnN0IGludG8gdGVhcnMsIGFuZCBsZWZ0IHRoZSBwbGFjZSwgd2l0aG91dCBzYXlpbmcgYW55dGhpbmcgbW9yZSBhdCB0aGUgdGltZTsgYWZ0ZXJ3YXJkcywgaG93ZXZlciwgaGUgaGFkIGFuIGludGVydmlldyB3aXRoIE1hbml1cywgcHV0IGFuIGVuZCB0byBoaXMgd3JhdGgsIGFuZCBpbmR1Y2VkIGhpbSB0byBncmFudCB0aGUgQWV0b2xpYW5zIGEgdHJ1Y2UsIGFuZCB0aW1lIGluIHdoaWNoIHRvIHNlbmQgYW4gZW1iYXNzeSB0byBSb21lIHdpdGggYSBwbGVhIGZvciBtb2RlcmF0ZSB0ZXJtcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBoYXJkZXN0IHRvaWxzIGFuZCBzdHJ1Z2dsZXMgZmVsbCB0byBUaXR1cyB3aGVuIGhlIGludGVyY2VkZWQgd2l0aCBNYW5pdXMgaW4gYmVoYWxmIG9mIHRoZSBDaGFsY2lkaWFucy4gVGhleSBoYWQgaW5jdXJyZWQgdGhlIGNvbnN1bCdzIHdyYXRoIGJlY2F1c2Ugb2YgdGhlIG1hcnJpYWdlIHdoaWNoIEFudGlvY2h1cyBoYWQgbWFkZSBpbiB0aGVpciBjaXR5IGFmdGVyIHRoZSB3YXIgaGFkIGFscmVhZHkgYmVndW4sIGEgbWFycmlhZ2Ugd2hpY2ggd2FzIG5vdCBvbmx5IHVuc2Vhc29uYWJsZSwgYnV0IHVuc3VpdGFibGUgZm9yIHRoZSBraW5nJ3MgeWVhcnMsIHNpbmNlIGhlIHdhcyBhbiBlbGRlcmx5IG1hbiBhbmQgaGFkIGZhbGxlbiBpbiBsb3ZlIHdpdGggYSBnaXJsICh0aGUgZ2lybCB3YXMgYSBkYXVnaHRlciBvZiBDbGVvcHRvbGVtdXMsIGFuZCBpcyBzYWlkIHRvIGhhdmUgYmVlbiBtb3N0IGJlYXV0aWZ1bCBhbW9uZyBtYWlkZW5zKS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaGlsLiAxNy4xIiB2YWxpZD0ieWVzIj5QaGlsb3BvZW1lbiwgeHZpaS4gMTwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFycmlhZ2UgaW5kdWNlZCB0aGUgQ2hhbGNpZGlhbnMgdG8gdGFrZSB0aGUga2luZydzIHNpZGUgbW9zdCB6ZWFsb3VzbHkgYW5kIGFsbG93IHRoZWlyIGNpdHkgdG8gYmUgaGlzIGJhc2Ugb2Ygb3BlcmF0aW9ucyBmb3IgdGhlIHdhci4gQW50aW9jaHVzLCB0aGVyZWZvcmUsIGZsZWVpbmcgd2l0aCBhbGwgc3BlZWQgYWZ0ZXIgdGhlIGJhdHRsZSBhdCBUaGVybW9weWxhZSwgY2FtZSB0byBDaGFsY2lzLCBhbmQgdGFraW5nIHdpdGggaGltIGhpcyBnaXJsLXdpZmUsIGhpcyB0cmVhc3VyZSwgYW5kIGhpcyBmcmllbmRzLCBzYWlsZWQgYmFjayB0byBBc2lhOyBidXQgTWFuaXVzIGltbWVkaWF0ZWx5IG1hcmNoZWQgYWdhaW5zdCBDaGFsY2lzIGluIGEgcmFnZS4gSGUgd2FzIGFjY29tcGFuaWVkLCBob3dldmVyLCBieSBUaXR1cywgd2hvIHRyaWVkIHRvIG1vbGxpZnkgYW5kIGludGVyY2VkZSB3aXRoIGhpbSBhbmQgYXQgbGFzdCB3b24gaGltIG92ZXIgYW5kIGNhbG1lZCBoaW0gZG93biBieSBlbnRyZWF0aWVzIGFkZHJlc3NlZCBib3RoIHRvIGhpbSBhbmQgdGhlIG90aGVyIFJvbWFucyBpbiBhdXRob3JpdHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBoYXJkZXN0IHRvaWxzIGFuZCBzdHJ1Z2dsZXMgZmVsbCB0byBUaXR1cyB3aGVuIGhlIGludGVyY2VkZWQgd2l0aCBNYW5pdXMgaW4gYmVoYWxmIG9mIHRoZSBDaGFsY2lkaWFucy4gVGhleSBoYWQgaW5jdXJyZWQgdGhlIGNvbnN1bCdzIHdyYXRoIGJlY2F1c2Ugb2YgdGhlIG1hcnJpYWdlIHdoaWNoIEFudGlvY2h1cyBoYWQgbWFkZSBpbiB0aGVpciBjaXR5IGFmdGVyIHRoZSB3YXIgaGFkIGFscmVhZHkgYmVndW4sIGEgbWFycmlhZ2Ugd2hpY2ggd2FzIG5vdCBvbmx5IHVuc2Vhc29uYWJsZSwgYnV0IHVuc3VpdGFibGUgZm9yIHRoZSBraW5nJ3MgeWVhcnMsIHNpbmNlIGhlIHdhcyBhbiBlbGRlcmx5IG1hbiBhbmQgaGFkIGZhbGxlbiBpbiBsb3ZlIHdpdGggYSBnaXJsICh0aGUgZ2lybCB3YXMgYSBkYXVnaHRlciBvZiBDbGVvcHRvbGVtdXMsIGFuZCBpcyBzYWlkIHRvIGhhdmUgYmVlbiBtb3N0IGJlYXV0aWZ1bCBhbW9uZyBtYWlkZW5zKS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhpbC4gMTcuMSIgdmFsaWQ9InllcyI+UGhpbG9wb2VtZW4sIHh2aWkuIDE8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBoaWwuIDE3LjEiIHZhbGlkPSJ5ZXMiPlBoaWxvcG9lbWVuLCB4dmlpLiAxPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFycmlhZ2UgaW5kdWNlZCB0aGUgQ2hhbGNpZGlhbnMgdG8gdGFrZSB0aGUga2luZydzIHNpZGUgbW9zdCB6ZWFsb3VzbHkgYW5kIGFsbG93IHRoZWlyIGNpdHkgdG8gYmUgaGlzIGJhc2Ugb2Ygb3BlcmF0aW9ucyBmb3IgdGhlIHdhci4gQW50aW9jaHVzLCB0aGVyZWZvcmUsIGZsZWVpbmcgd2l0aCBhbGwgc3BlZWQgYWZ0ZXIgdGhlIGJhdHRsZSBhdCBUaGVybW9weWxhZSwgY2FtZSB0byBDaGFsY2lzLCBhbmQgdGFraW5nIHdpdGggaGltIGhpcyBnaXJsLXdpZmUsIGhpcyB0cmVhc3VyZSwgYW5kIGhpcyBmcmllbmRzLCBzYWlsZWQgYmFjayB0byBBc2lhOyBidXQgTWFuaXVzIGltbWVkaWF0ZWx5IG1hcmNoZWQgYWdhaW5zdCBDaGFsY2lzIGluIGEgcmFnZS4gSGUgd2FzIGFjY29tcGFuaWVkLCBob3dldmVyLCBieSBUaXR1cywgd2hvIHRyaWVkIHRvIG1vbGxpZnkgYW5kIGludGVyY2VkZSB3aXRoIGhpbSBhbmQgYXQgbGFzdCB3b24gaGltIG92ZXIgYW5kIGNhbG1lZCBoaW0gZG93biBieSBlbnRyZWF0aWVzIGFkZHJlc3NlZCBib3RoIHRvIGhpbSBhbmQgdGhlIG90aGVyIFJvbWFucyBpbiBhdXRob3JpdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyBiZWVuIHRodXMgc2F2ZWQgYnkgVGl0dXMsIHRoZSBDaGFsY2lkaWFucyBkZWRpY2F0ZWQgdG8gaGltIHRoZSBsYXJnZXN0IGFuZCBtb3N0IGJlYXV0aWZ1bCBvZiB0aGUgdm90aXZlIG9mZmVyaW5ncyBpbiB0aGVpciBjaXR5LCBhbmQgb24gdGhlbSBzdWNoIGluc2NyaXB0aW9ucyBhcyB0aGVzZSBhcmUgc3RpbGwgdG8gYmUgc2VlbjogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGd5bW5hc2l1bSBpcyBkZWRpY2F0ZWQgYnkgdGhlIHBlb3BsZSB0byBUaXR1cyBhbmQgSGVyYWNsZXMsPC9xPiBhbmQgYWdhaW4gaW4gYW5vdGhlciBwbGFjZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIERlbHBoaW5pdW0gaXMgZGVkaWNhdGVkIGJ5IHRoZSBwZW9wbGUgdG8gVGl0dXMgYW5kIEFwb2xsby48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGV2ZW4gZG93biB0byBvdXIgb3duIGRheSBhIHByaWVzdCBvZiBUaXR1cyBpcyBkdWx5IGVsZWN0ZWQgYW5kIGFwcG9pbnRlZCwgYW5kIGFmdGVyIHNhY3JpZmljZSBhbmQgbGliYXRpb25zIGluIGhpcyBob25vdXIsIGEgc2V0IGh5bW4gb2YgcHJhaXNlIHRvIGhpbSBpcyBzdW5nOiBpdCBpcyB0b28gbG9uZyB0byBiZSBxdW90ZWQgZW50aXJlLCBhbmQgc28gSSB3aWxsIGdpdmUgb25seSB0aGUgY2xvc2luZyB3b3JkcyBvZiB0aGUgc29uZzoKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+QW5kIHRoZSBSb21hbiBmYWl0aCB3ZSByZXZlcmUsIHdoaWNoIHdlIGhhdmUgc29sZW1ubHkgdm93ZWQgdG8gY2hlcmlzaDsgc2luZywgdGhlbiwgeWUgbWFpZGVucywgdG8gZ3JlYXQgWmV1cywgdG8gUm9tZSwgdG8gVGl0dXMsIGFuZCB0byB0aGUgUm9tYW4gZmFpdGg6IGhhaWwsIFBhZWFuIEFwb2xsbyEgaGFpbCwgVGl0dXMgb3VyIHNhdmlvdXIhPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyBiZWVuIHRodXMgc2F2ZWQgYnkgVGl0dXMsIHRoZSBDaGFsY2lkaWFucyBkZWRpY2F0ZWQgdG8gaGltIHRoZSBsYXJnZXN0IGFuZCBtb3N0IGJlYXV0aWZ1bCBvZiB0aGUgdm90aXZlIG9mZmVyaW5ncyBpbiB0aGVpciBjaXR5LCBhbmQgb24gdGhlbSBzdWNoIGluc2NyaXB0aW9ucyBhcyB0aGVzZSBhcmUgc3RpbGwgdG8gYmUgc2VlbjogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgZ3ltbmFzaXVtIGlzIGRlZGljYXRlZCBieSB0aGUgcGVvcGxlIHRvIFRpdHVzIGFuZCBIZXJhY2xlcyw8L3E+IGFuZCBhZ2FpbiBpbiBhbm90aGVyIHBsYWNlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBEZWxwaGluaXVtIGlzIGRlZGljYXRlZCBieSB0aGUgcGVvcGxlIHRvIFRpdHVzIGFuZCBBcG9sbG8uPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBldmVuIGRvd24gdG8gb3VyIG93biBkYXkgYSBwcmllc3Qgb2YgVGl0dXMgaXMgZHVseSBlbGVjdGVkIGFuZCBhcHBvaW50ZWQsIGFuZCBhZnRlciBzYWNyaWZpY2UgYW5kIGxpYmF0aW9ucyBpbiBoaXMgaG9ub3VyLCBhIHNldCBoeW1uIG9mIHByYWlzZSB0byBoaW0gaXMgc3VuZzogaXQgaXMgdG9vIGxvbmcgdG8gYmUgcXVvdGVkIGVudGlyZSwgYW5kIHNvIEkgd2lsbCBnaXZlIG9ubHkgdGhlIGNsb3Npbmcgd29yZHMgb2YgdGhlIHNvbmc6CgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgdGhlIFJvbWFuIGZhaXRoIHdlIHJldmVyZSwgd2hpY2ggd2UgaGF2ZSBzb2xlbW5seSB2b3dlZCB0byBjaGVyaXNoOyBzaW5nLCB0aGVuLCB5ZSBtYWlkZW5zLCB0byBncmVhdCBaZXVzLCB0byBSb21lLCB0byBUaXR1cywgYW5kIHRvIHRoZSBSb21hbiBmYWl0aDogaGFpbCwgUGFlYW4gQXBvbGxvISBoYWlsLCBUaXR1cyBvdXIgc2F2aW91ciE8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCSAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHRoZSBSb21hbiBmYWl0aCB3ZSByZXZlcmUsIHdoaWNoIHdlIGhhdmUgc29sZW1ubHkgdm93ZWQgdG8gY2hlcmlzaDsgc2luZywgdGhlbiwgeWUgbWFpZGVucywgdG8gZ3JlYXQgWmV1cywgdG8gUm9tZSwgdG8gVGl0dXMsIGFuZCB0byB0aGUgUm9tYW4gZmFpdGg6IGhhaWwsIFBhZWFuIEFwb2xsbyEgaGFpbCwgVGl0dXMgb3VyIHNhdmlvdXIhPC9sPgoJCQkJICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBhbHNvIHJlY2VpdmVkIGZyb20gdGhlIHJlc3Qgb2YgdGhlIEdyZWVrcyBmaXR0aW5nIGhvbm91cnMsIGFuZCB0aGVzZSB3ZXJlIG1hZGUgc2luY2VyZSBieSB0aGUgYXN0b25pc2hpbmcgZ29vZCB3aWxsIHdoaWNoIGhpcyBlcXVpdGFibGUgbmF0dXJlIGNhbGxlZCBmb3J0aC4gRm9yIGV2ZW4gaWYgdGhlIGNvbmR1Y3Qgb2YgYWZmYWlycyBvciB0aGUgc3Bpcml0IG9mIHJpdmFscnkgYnJvdWdodCBoaW0gaW50byBjb2xsaXNpb24gd2l0aCBhbnkgb2YgdGhlbSwgYXMsIGZvciBpbnN0YW5jZSwgd2l0aCBQaGlsb3BvZW1lbiwgYW5kIGFnYWluIHdpdGggRGlvcGhhbmVzIHRoZSBnZW5lcmFsIG9mIHRoZSBBY2hhZWFucywgaGlzIHJlc2VudG1lbnQgd2FzIG5vdCBoZWF2eSwgbm9yIGRpZCBpdCBjYXJyeSBoaW0gaW50byB2aW9sZW50IGFjdHMsIGJ1dCB3aGVuIGl0IGhhZCB2ZW50ZWQgaXRzZWxmIGluIHRoZSBvdXRzcG9rZW4gbGFuZ3VhZ2Ugb2YgZnJlZSBwdWJsaWMgZGViYXRlLCB0aGVyZSB3YXMgYW4gZW5kIG9mIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSB3YXMgbmV2ZXIgYml0dGVyLCBhbHRob3VnaCBtYW55IGltcHV0ZWQgaGFzdGluZXNzIGFuZCBsZXZpdHkgdG8gaGlzIG5hdHVyZSwgYW5kIGluIGdlbmVyYWwgaGUgd2FzIGEgbW9zdCBhZ3JlZWFibGUgY29tcGFuaW9uIGFuZCBhYmxlIHRvIHNheSBhIGdyYWNlZnVsIHRoaW5nIHdpdGggZm9yY2UuIEZvciBpbnN0YW5jZSwgd2hlbiBoZSB3YXMgdHJ5aW5nIHRvIGRpc3N1YWRlIHRoZSBBY2hhZWFucyBmcm9tIGFwcHJvcHJpYXRpbmcgdGhlIGlzbGFuZCBvZiBaYWN5bnRob3MsIGhlIHNhaWQgaXQgd291bGQgYmUgZGFuZ2Vyb3VzIGZvciB0aGVtLCBsaWtlIGEgdG9ydG9pc2UsIHRvIHN0aWNrIHRoZWlyIGhlYWQgb3V0IG9mIGl0cyBQZWxvcG9ubmVzaWFuIHNoZWxsLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzNi4zMiIgdmFsaWQ9InllcyI+TGl2eSwgeHh4dmkuIDMyPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gMTk3YiI+UGx1dGFyY2gsIDx0aXRsZT5Nb3JhbHM8L3RpdGxlPiBwLiAxOTdiPC9iaWJsPi48L25vdGU+IEFnYWluLCB3aGVuIGhlIGhlbGQgaGlzIGZpcnN0IGNvbmZlcmVuY2Ugd2l0aCBQaGlsaXAgY29uY2VybmluZyBhIHRydWNlIGFuZCBwZWFjZSwgYW5kIFBoaWxpcCByZW1hcmtlZCB0aGF0IFRpdHVzIGhhZCBjb21lIHdpdGggbWFueSBhdHRlbmRhbnRzIHdoaWxlIGhlIGhpbXNlbGYgaGFkIGNvbWUgYWxvbmUsIFRpdHVzIGFuc3dlcmVkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcywgdGhvdSBoYXN0IG1hZGUgdGh5c2VsZiBhbG9uZSBieSBzbGF5aW5nIHRoeSBmcmllbmRzIGFuZCBraW5kcmVkLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDE5N2EiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TW9yYWxzPC90aXRsZT4sIHAuIDE5N2E8L2JpYmw+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxiLiAxOC43IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cyB4dmlpaS4gNzwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZ2Fpbiwgd2hlbiBEZWlub2NyYXRlcyB0aGUgTWVzc2VuaWFuLCB3aG8gaGFkIHRha2VuIHRvbyBtdWNoIHdpbmUgYXQgYSBkcmlua2luZy1wYXJ0eSBpbiBSb21lLCBhbmQgYWZ0ZXIgcHV0dGluZyBvbiBhIHdvbWFuJ3Mgcm9iZSBoYWQgZXhlY3V0ZWQgYSBkYW5jZSwgb24gdGhlIGZvbGxvd2luZyBkYXkgYXNrZWQgVGl0dXMgdG8gYXNzaXN0IGhpbSBpbiBoaXMgcGxhbiB0byBzZXBhcmF0ZSBNZXNzZW5lIGZyb20gdGhlIEFjaGFlYW4gbGVhZ3VlLCBUaXR1cyBzYWlkIGhlIHdvdWxkIGNvbnNpZGVyIHRoZSBtYXR0ZXI7IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IEkgYW0gYW1hemVkLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGF0IHdoZW4gdGhvdSBoYXN0IG1hdHRlcnMgb2Ygc28gZ3JlYXQgbW9tZW50IGluIGhhbmQsIHRob3UgY2Fuc3QgZGFuY2UgYW5kIHNpbmcgYXQgYSBkcmlua2luZyBwYXJ0eS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBoaWwuIDE4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UGhpbG9wb2VtZW48L3RpdGxlPiwgeHZpaWkuIGZmPC9iaWJsPi4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDIzLjUiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzIHh4aWlpLiA1PC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbmNlIG1vcmUsIHdoZW4gYW4gZW1iYXNzeSBmcm9tIEFudGlvY2h1cyB3YXMgcmVjb3VudGluZyB0byB0aGUgQWNoYWVhbnMgdGhlIHZhc3QgbXVsdGl0dWRlIG9mIHRoZSBraW5nJ3MgZm9yY2VzIGFuZCBlbnVtZXJhdGluZyB0aGVtIGFsbCBieSB0aGVpciB2YXJpb3VzIGFwcGVsbGF0aW9ucywgVGl0dXMgc2FpZCB0aGF0IG9uY2UsIHdoZW4gaGUgd2FzIGRpbmluZyB3aXRoIGEgZnJpZW5kLCBoZSBjcml0aWNpc2VkIHRoZSBtdWx0aXR1ZGUgb2YgbWVhdHMgdGhhdCB3ZXJlIHNlcnZlZCwgd29uZGVyaW5nIHdoZXJlIGhlIGhhZCBvYnRhaW5lZCBzbyB2YXJpZWQgYSBzdXBwbHk7IHdoZXJldXBvbiBoaXMgaG9zdCB0b2xkIGhpbSB0aGV5IHdlcmUgYWxsIHN3aW5lJ3MgZmxlc2gsIGFuZCBkaWZmZXJlZCBvbmx5IGluIHRoZSB3YXkgdGhleSB3ZXJlIGNvb2tlZCBhbmQgZHJlc3NlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBzbyBpbiB5b3VyIGNhc2UsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm1lbiBvZiBBY2hhaWEsIGRvIG5vdCBiZSBhc3RvbmlzaGVkIHdoZW4geW91IGhlYXIgb2YgdGhlIFNwZWFyLWJlYXJlcnMgYW5kIExhbmNlLWJlYXJlcnMgYW5kIEZvb3QtY29tcGFuaW9ucyBpbiB0aGUgYXJteSBvZiBBbnRpb2NodXM7IGZvciB0aGV5IGFyZSBhbGwgU3lyaWFucyBhbmQgZGlmZmVyIG9ubHkgaW4gdGhlIHdheSB0aGV5IGFyZSBhcm1lZC48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAxOTdjIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1vcmFsczwvdGl0bGU+LCBwLiAxOTdjPC9iaWJsPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzUuNDkiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eHYuIDQ5PC9iaWJsPikuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyByZWNlaXZlZCBmcm9tIHRoZSByZXN0IG9mIHRoZSBHcmVla3MgZml0dGluZyBob25vdXJzLCBhbmQgdGhlc2Ugd2VyZSBtYWRlIHNpbmNlcmUgYnkgdGhlIGFzdG9uaXNoaW5nIGdvb2Qgd2lsbCB3aGljaCBoaXMgZXF1aXRhYmxlIG5hdHVyZSBjYWxsZWQgZm9ydGguIEZvciBldmVuIGlmIHRoZSBjb25kdWN0IG9mIGFmZmFpcnMgb3IgdGhlIHNwaXJpdCBvZiByaXZhbHJ5IGJyb3VnaHQgaGltIGludG8gY29sbGlzaW9uIHdpdGggYW55IG9mIHRoZW0sIGFzLCBmb3IgaW5zdGFuY2UsIHdpdGggUGhpbG9wb2VtZW4sIGFuZCBhZ2FpbiB3aXRoIERpb3BoYW5lcyB0aGUgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbnMsIGhpcyByZXNlbnRtZW50IHdhcyBub3QgaGVhdnksIG5vciBkaWQgaXQgY2FycnkgaGltIGludG8gdmlvbGVudCBhY3RzLCBidXQgd2hlbiBpdCBoYWQgdmVudGVkIGl0c2VsZiBpbiB0aGUgb3V0c3Bva2VuIGxhbmd1YWdlIG9mIGZyZWUgcHVibGljIGRlYmF0ZSwgdGhlcmUgd2FzIGFuIGVuZCBvZiBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIHdhcyBuZXZlciBiaXR0ZXIsIGFsdGhvdWdoIG1hbnkgaW1wdXRlZCBoYXN0aW5lc3MgYW5kIGxldml0eSB0byBoaXMgbmF0dXJlLCBhbmQgaW4gZ2VuZXJhbCBoZSB3YXMgYSBtb3N0IGFncmVlYWJsZSBjb21wYW5pb24gYW5kIGFibGUgdG8gc2F5IGEgZ3JhY2VmdWwgdGhpbmcgd2l0aCBmb3JjZS4gRm9yIGluc3RhbmNlLCB3aGVuIGhlIHdhcyB0cnlpbmcgdG8gZGlzc3VhZGUgdGhlIEFjaGFlYW5zIGZyb20gYXBwcm9wcmlhdGluZyB0aGUgaXNsYW5kIG9mIFphY3ludGhvcywgaGUgc2FpZCBpdCB3b3VsZCBiZSBkYW5nZXJvdXMgZm9yIHRoZW0sIGxpa2UgYSB0b3J0b2lzZSwgdG8gc3RpY2sgdGhlaXIgaGVhZCBvdXQgb2YgaXRzIFBlbG9wb25uZXNpYW4gc2hlbGwuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzNi4zMiIgdmFsaWQ9InllcyI+TGl2eSwgeHh4dmkuIDMyPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAxOTdiIj5QbHV0YXJjaCwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4gcC4gMTk3YjwvYmlibD4uPC9ub3RlPiBBZ2Fpbiwgd2hlbiBoZSBoZWxkIGhpcyBmaXJzdCBjb25mZXJlbmNlIHdpdGggUGhpbGlwIGNvbmNlcm5pbmcgYSB0cnVjZSBhbmQgcGVhY2UsIGFuZCBQaGlsaXAgcmVtYXJrZWQgdGhhdCBUaXR1cyBoYWQgY29tZSB3aXRoIG1hbnkgYXR0ZW5kYW50cyB3aGlsZSBoZSBoaW1zZWxmIGhhZCBjb21lIGFsb25lLCBUaXR1cyBhbnN3ZXJlZCwgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM2LjMyIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHh2aS4gMzI8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDE5N2IiPlBsdXRhcmNoLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiBwLiAxOTdiPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiBwLiAxOTdiPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZXMsIHRob3UgaGFzdCBtYWRlIHRoeXNlbGYgYWxvbmUgYnkgc2xheWluZyB0aHkgZnJpZW5kcyBhbmQga2luZHJlZC48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gMTk3YSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwLiAxOTdhPC9iaWJsPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAxOC43IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cyB4dmlpaS4gNzwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gMTk3YSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwLiAxOTdhPC9iaWJsPiAoPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDE5N2E8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDE4LjciIHZhbGlkPSJ5ZXMiPlBvbHliaXVzIHh2aWlpLiA3PC9iaWJsPikuPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIERlaW5vY3JhdGVzIHRoZSBNZXNzZW5pYW4sIHdobyBoYWQgdGFrZW4gdG9vIG11Y2ggd2luZSBhdCBhIGRyaW5raW5nLXBhcnR5IGluIFJvbWUsIGFuZCBhZnRlciBwdXR0aW5nIG9uIGEgd29tYW4ncyByb2JlIGhhZCBleGVjdXRlZCBhIGRhbmNlLCBvbiB0aGUgZm9sbG93aW5nIGRheSBhc2tlZCBUaXR1cyB0byBhc3Npc3QgaGltIGluIGhpcyBwbGFuIHRvIHNlcGFyYXRlIE1lc3NlbmUgZnJvbSB0aGUgQWNoYWVhbiBsZWFndWUsIFRpdHVzIHNhaWQgaGUgd291bGQgY29uc2lkZXIgdGhlIG1hdHRlcjsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBJIGFtIGFtYXplZCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGF0IHdoZW4gdGhvdSBoYXN0IG1hdHRlcnMgb2Ygc28gZ3JlYXQgbW9tZW50IGluIGhhbmQsIHRob3UgY2Fuc3QgZGFuY2UgYW5kIHNpbmcgYXQgYSBkcmlua2luZyBwYXJ0eS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaGlsLiAxOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhpbG9wb2VtZW48L3RpdGxlPiwgeHZpaWkuIGZmPC9iaWJsPi4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMjMuNSIgdmFsaWQ9InllcyI+UG9seWJpdXMgeHhpaWkuIDU8L2JpYmw+KS48L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaGlsLiAxOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhpbG9wb2VtZW48L3RpdGxlPiwgeHZpaWkuIGZmPC9iaWJsPi4gKDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBoaWxvcG9lbWVuPC90aXRsZT4sIHh2aWlpLiBmZjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMjMuNSIgdmFsaWQ9InllcyI+UG9seWJpdXMgeHhpaWkuIDU8L2JpYmw+KS48L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbmNlIG1vcmUsIHdoZW4gYW4gZW1iYXNzeSBmcm9tIEFudGlvY2h1cyB3YXMgcmVjb3VudGluZyB0byB0aGUgQWNoYWVhbnMgdGhlIHZhc3QgbXVsdGl0dWRlIG9mIHRoZSBraW5nJ3MgZm9yY2VzIGFuZCBlbnVtZXJhdGluZyB0aGVtIGFsbCBieSB0aGVpciB2YXJpb3VzIGFwcGVsbGF0aW9ucywgVGl0dXMgc2FpZCB0aGF0IG9uY2UsIHdoZW4gaGUgd2FzIGRpbmluZyB3aXRoIGEgZnJpZW5kLCBoZSBjcml0aWNpc2VkIHRoZSBtdWx0aXR1ZGUgb2YgbWVhdHMgdGhhdCB3ZXJlIHNlcnZlZCwgd29uZGVyaW5nIHdoZXJlIGhlIGhhZCBvYnRhaW5lZCBzbyB2YXJpZWQgYSBzdXBwbHk7IHdoZXJldXBvbiBoaXMgaG9zdCB0b2xkIGhpbSB0aGV5IHdlcmUgYWxsIHN3aW5lJ3MgZmxlc2gsIGFuZCBkaWZmZXJlZCBvbmx5IGluIHRoZSB3YXkgdGhleSB3ZXJlIGNvb2tlZCBhbmQgZHJlc3NlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBzbyBpbiB5b3VyIGNhc2UsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bWVuIG9mIEFjaGFpYSwgZG8gbm90IGJlIGFzdG9uaXNoZWQgd2hlbiB5b3UgaGVhciBvZiB0aGUgU3BlYXItYmVhcmVycyBhbmQgTGFuY2UtYmVhcmVycyBhbmQgRm9vdC1jb21wYW5pb25zIGluIHRoZSBhcm15IG9mIEFudGlvY2h1czsgZm9yIHRoZXkgYXJlIGFsbCBTeXJpYW5zIGFuZCBkaWZmZXIgb25seSBpbiB0aGUgd2F5IHRoZXkgYXJlIGFybWVkLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAxOTdjIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDE5N2M8L2JpYmw+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM1LjQ5IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHh2LiA0OTwvYmlibD4pLjwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAxOTdjIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDE5N2M8L2JpYmw+ICg8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcC4gMTk3YzxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzUuNDkiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eHYuIDQ5PC9iaWJsPikuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGlzIGFjaGlldmVtZW50cyBpbiBHcmVlY2UgYW5kIHRoZSB3YXIgd2l0aCBBbnRpb2NodXMsIFRpdHVzIHdhcyBhcHBvaW50ZWQgY2Vuc29yLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE4OSBCLkMuPC9ub3RlPiBUaGlzIGlzIHRoZSBoaWdoZXN0IG9mZmljZSBhdCBSb21lLCBhbmQgaW4gYSBtYW5uZXIgdGhlIGN1bG1pbmF0aW9uIG9mIGEgcG9saXRpY2FsIGNhcmVlci4gVGl0dXMgaGFkIGFzIGNvbGxlYWd1ZSBpbiB0aGlzIG9mZmljZSBhIHNvbiBvZiB0aGUgTWFyY2VsbHVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGbGFtLiAxLjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaS4gMzwvYmlibD4uPC9ub3RlPiB3aG8gaGFkIGJlZW4gZml2ZSB0aW1lcyBjb25zdWwsIGFuZCB0aGUgdHdvIGNlbnNvcnMgZWplY3RlZCBmcm9tIHRoZSBzZW5hdGUgZm91ciBtZW4gb2YgbGVzc2VyIG5vdGUsIGFuZCByZWNlaXZlZCBpbnRvIGNpdGl6ZW5zaGlwIGFsbCB3aG8gb2ZmZXJlZCB0aGVtc2VsdmVzIGZvciBlbnJvbG1lbnQsIHByb3ZpZGVkIHRoZXkgd2VyZSBib3JuIG9mIGZyZWUgcGFyZW50cy4gVG8gdGhpcyBzdGVwIHRoZXkgd2VyZSBmb3JjZWQgYnkgdGhlIHRyaWJ1bmUgVGVyZW50aXVzIEN1bGVvLCB3aG8gd2FudGVkIHRvIHNwaXRlIHRoZSBub2JpbGl0eSBhbmQgc28gcGVyc3VhZGVkIHRoZSBwZW9wbGUgdG8gdm90ZSB0aGUgbWVhc3VyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGlzIGFjaGlldmVtZW50cyBpbiBHcmVlY2UgYW5kIHRoZSB3YXIgd2l0aCBBbnRpb2NodXMsIFRpdHVzIHdhcyBhcHBvaW50ZWQgY2Vuc29yLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTg5IEIuQy48L25vdGU+IFRoaXMgaXMgdGhlIGhpZ2hlc3Qgb2ZmaWNlIGF0IFJvbWUsIGFuZCBpbiBhIG1hbm5lciB0aGUgY3VsbWluYXRpb24gb2YgYSBwb2xpdGljYWwgY2FyZWVyLiBUaXR1cyBoYWQgYXMgY29sbGVhZ3VlIGluIHRoaXMgb2ZmaWNlIGEgc29uIG9mIHRoZSBNYXJjZWxsdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGbGFtLiAxLjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaS4gMzwvYmlibD4uPC9ub3RlPiB3aG8gaGFkIGJlZW4gZml2ZSB0aW1lcyBjb25zdWwsIGFuZCB0aGUgdHdvIGNlbnNvcnMgZWplY3RlZCBmcm9tIHRoZSBzZW5hdGUgZm91ciBtZW4gb2YgbGVzc2VyIG5vdGUsIGFuZCByZWNlaXZlZCBpbnRvIGNpdGl6ZW5zaGlwIGFsbCB3aG8gb2ZmZXJlZCB0aGVtc2VsdmVzIGZvciBlbnJvbG1lbnQsIHByb3ZpZGVkIHRoZXkgd2VyZSBib3JuIG9mIGZyZWUgcGFyZW50cy4gVG8gdGhpcyBzdGVwIHRoZXkgd2VyZSBmb3JjZWQgYnkgdGhlIHRyaWJ1bmUgVGVyZW50aXVzIEN1bGVvLCB3aG8gd2FudGVkIHRvIHNwaXRlIHRoZSBub2JpbGl0eSBhbmQgc28gcGVyc3VhZGVkIHRoZSBwZW9wbGUgdG8gdm90ZSB0aGUgbWVhc3VyZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMS4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGkuIDM8L2JpYmw+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0d28gbWVuIG9mIGhpcyB0aW1lIHdobyB3ZXJlIG1vc3Qgbm90YWJsZSBhbmQgaGFkIHRoZSBncmVhdGVzdCBpbmZsdWVuY2UgaW4gdGhlIGNpdHksIFNjaXBpbyBBZnJpY2FudXMgYW5kIE1hcmN1cyBDYXRvLCB3ZXJlIGF0IHZhcmlhbmNlIHdpdGggb25lIGFub3RoZXIuIE9mIHRoZXNlLCBUaXR1cyBhcHBvaW50ZWQgU2NpcGlvIHRvIGJlIERlYW4gb2YgdGhlIFNlbmF0ZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBURyA0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+VGliZXJpdXMgR3JhY2NodXM8L3RpdGxlPiwgaXYuIDE8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNYS4gMTcuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIHRoZSBFbGRlcjwvdGl0bGU+LCB4dmlpLiAxPC9iaWJsPi48L25vdGU+IGJlbGlldmluZyBoaW0gdG8gYmUgaXRzIGJlc3QgYW5kIGZvcmVtb3N0IG1hbjsgYnV0IHdpdGggQ2F0byBoZSBjYW1lIGludG8gaG9zdGlsZSByZWxhdGlvbnMsIG93aW5nIHRvIHRoZSBmb2xsb3dpbmcgdW5mb3J0dW5hdGUgY2lyY3Vtc3RhbmNlcy4gVGl0dXMgaGFkIGEgYnJvdGhlciwgTHVjaXVzLCB3aG8gd2FzIHVubGlrZSBoaW0gaW4gYWxsIG90aGVyIHdheXMsIGFuZCBlc3BlY2lhbGx5IGluIGhpcyBzaGFtZWZ1bCBhZGRpY3Rpb24gdG8gcGxlYXN1cmUgYW5kIGhpcyB1dHRlciBjb250ZW1wdCBvZiBkZWNlbmN5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGJyb3RoZXIgaGFkIGFzIGNvbXBhbmlvbiBhIHlvdW5nIGJveSB3aG9tIGhlIGxvdmVkLCBhbmQgdG9vayBoaW0gYWJvdXQgYW5kIGtlcHQgaGltIGFsd2F5cyBpbiBoaXMgdHJhaW4sIHdoZXRoZXIgaGUgd2FzIGNvbW1hbmRpbmcgYW4gYXJteSBvciBhZG1pbmlzdGVyaW5nIGEgcHJvdmluY2UuIEF0IHNvbWUgZHJpbmtpbmcgcGFydHksIHRoZW4sIHRoaXMgYm95IHdhcyBwbGF5aW5nIHRoZSBjb3F1ZXQgd2l0aCBMdWNpdXMsIGFuZCBzYWlkIGhlIGxvdmVkIGhpbSBzbyBhcmRlbnRseSB0aGF0IGhlIGhhZCBjb21lIGF3YXkgZnJvbSBhIHNob3cgb2YgZ2xhZGlhdG9ycyBpbiBvcmRlciB0byBiZSB3aXRoIGhpbSwgYWx0aG91Z2ggaGUgaGFkIG5ldmVyIGluIGFsbCBoaXMgbGlmZSBzZWVuIGEgbWFuIGtpbGxlZDsgYW5kIGhlIGhhZCBkb25lIHNvLCBoZSBzYWlkLCBiZWNhdXNlIGhlIGNhcmVkIG1vcmUgZm9yIGhpcyBsb3ZlcidzIHBsZWFzdXJlIHRoYW4gZm9yIGhpcyBvd24uIEx1Y2l1cyB3YXMgZGVsaWdodGVkIGF0IHRoaXMsIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvbid0IHdvcnJ5IGFib3V0IHRoYXQhIEkgd2lsbCBnaXZlIHRoZWUgdGh5IGhlYXJ0J3MgZGVzaXJlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIG9yZGVyaW5nIGEgbWFuIHdobyBoYWQgYmVlbiBjb25kZW1uZWQgdG8gZGVhdGggdG8gYmUgYnJvdWdodCBmb3J0aCBmcm9tIGhpcyBwcmlzb24sIGFuZCBzZW5kaW5nIGZvciBhIGxpY3RvciwgaGUgY29tbWFuZGVkIGhpbSB0byBzdHJpa2Ugb2ZmIHRoZSBtYW4ncyBoZWFkIHRoZXJlIGluIHRoZSBiYW5xdWV0LWhhbGwuIFZhbGVyaXVzIEFudGlhcywgaG93ZXZlciwgc2F5cyBpdCB3YXMgbm90IGEgbG92ZXIsIGJ1dCBhIG1pc3RyZXNzIHdob20gTHVjaXVzIHRodXMgc291Z2h0IHRvIGdyYXRpZnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM5LjQzIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpeC4gNDM8L2JpYmw+Ljwvbm90ZT4gQW5kIExpdnkgc2F5cyB0aGF0IGluIGEgc3BlZWNoIG9mIENhdG8gaGltc2VsZiBpdCBpcyB3cml0dGVuIHRoYXQgYSBHYXVsaXNoIGRlc2VydGVyIGhhZCBjb21lIHRvIHRoZSBkb29yIHdpdGggaGlzIHdpZmUgYW5kIGNoaWxkcmVuLCBhbmQgdGhhdCBMdWNpdXMgYWRtaXR0ZWQgaGltIGludG8gdGhlIGJhbnF1ZXQtaGFsbCBhbmQgc2xldyBoaW0gd2l0aCBoaXMgb3duIGhhbmQgdG8gZ3JhdGlmeSBoaXMgbG92ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZmVhdHVyZSwgaG93ZXZlciwgd2FzIHByb2JhYmx5IGludHJvZHVjZWQgYnkgQ2F0byB0byBzdHJlbmd0aGVuIHRoZSBmb3JjZSBvZiBoaXMgZGVudW5jaWF0aW9uOyBmb3IgdGhhdCBpdCB3YXMgbm90IGEgZGVzZXJ0ZXIsIGJ1dCBhIHByaXNvbmVyLCB3aG8gd2FzIHB1dCB0byBkZWF0aCwgYW5kIG9uZSB3aG8gaGFkIGJlZW4gY29uZGVtbmVkIHRvIGRpZSwgaXMgdGhlIHRlc3RpbW9ueSBvZiBtYW55IG90aGVycywgYW5kIGVzcGVjaWFsbHkgb2YgQ2ljZXJvIHRoZSBvcmF0b3IgaW4gaGlzIHRyZWF0aXNlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T24gT2xkIEFnZSw8L3E+IHdoZXJlIGhlIHB1dHMgdGhlIHN0b3J5IGluIHRoZSBtb3V0aCBvZiBDYXRvIGhpbXNlbGYuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1hLiAxNy4xNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIHRoZSBFbGRlcjwvdGl0bGU+LCB4dmlpLiAxNDwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM5LjQyIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpeC4gNDI8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0d28gbWVuIG9mIGhpcyB0aW1lIHdobyB3ZXJlIG1vc3Qgbm90YWJsZSBhbmQgaGFkIHRoZSBncmVhdGVzdCBpbmZsdWVuY2UgaW4gdGhlIGNpdHksIFNjaXBpbyBBZnJpY2FudXMgYW5kIE1hcmN1cyBDYXRvLCB3ZXJlIGF0IHZhcmlhbmNlIHdpdGggb25lIGFub3RoZXIuIE9mIHRoZXNlLCBUaXR1cyBhcHBvaW50ZWQgU2NpcGlvIHRvIGJlIERlYW4gb2YgdGhlIFNlbmF0ZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVEcgNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGliZXJpdXMgR3JhY2NodXM8L3RpdGxlPiwgaXYuIDE8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1hLiAxNy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byB0aGUgRWxkZXI8L3RpdGxlPiwgeHZpaS4gMTwvYmlibD4uPC9ub3RlPiBiZWxpZXZpbmcgaGltIHRvIGJlIGl0cyBiZXN0IGFuZCBmb3JlbW9zdCBtYW47IGJ1dCB3aXRoIENhdG8gaGUgY2FtZSBpbnRvIGhvc3RpbGUgcmVsYXRpb25zLCBvd2luZyB0byB0aGUgZm9sbG93aW5nIHVuZm9ydHVuYXRlIGNpcmN1bXN0YW5jZXMuIFRpdHVzIGhhZCBhIGJyb3RoZXIsIEx1Y2l1cywgd2hvIHdhcyB1bmxpa2UgaGltIGluIGFsbCBvdGhlciB3YXlzLCBhbmQgZXNwZWNpYWxseSBpbiBoaXMgc2hhbWVmdWwgYWRkaWN0aW9uIHRvIHBsZWFzdXJlIGFuZCBoaXMgdXR0ZXIgY29udGVtcHQgb2YgZGVjZW5jeS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBURyA0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaWJlcml1cyBHcmFjY2h1czwvdGl0bGU+LCBpdi4gMTwvYmlibD47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRpYmVyaXVzIEdyYWNjaHVzPC90aXRsZT4sIGl2LiAxPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNYS4gMTcuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIEVsZGVyPC90aXRsZT4sIHh2aWkuIDE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIEVsZGVyPC90aXRsZT4sIHh2aWkuIDE8L3RyYW5zbGF0aW9uPg=="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYnJvdGhlciBoYWQgYXMgY29tcGFuaW9uIGEgeW91bmcgYm95IHdob20gaGUgbG92ZWQsIGFuZCB0b29rIGhpbSBhYm91dCBhbmQga2VwdCBoaW0gYWx3YXlzIGluIGhpcyB0cmFpbiwgd2hldGhlciBoZSB3YXMgY29tbWFuZGluZyBhbiBhcm15IG9yIGFkbWluaXN0ZXJpbmcgYSBwcm92aW5jZS4gQXQgc29tZSBkcmlua2luZyBwYXJ0eSwgdGhlbiwgdGhpcyBib3kgd2FzIHBsYXlpbmcgdGhlIGNvcXVldCB3aXRoIEx1Y2l1cywgYW5kIHNhaWQgaGUgbG92ZWQgaGltIHNvIGFyZGVudGx5IHRoYXQgaGUgaGFkIGNvbWUgYXdheSBmcm9tIGEgc2hvdyBvZiBnbGFkaWF0b3JzIGluIG9yZGVyIHRvIGJlIHdpdGggaGltLCBhbHRob3VnaCBoZSBoYWQgbmV2ZXIgaW4gYWxsIGhpcyBsaWZlIHNlZW4gYSBtYW4ga2lsbGVkOyBhbmQgaGUgaGFkIGRvbmUgc28sIGhlIHNhaWQsIGJlY2F1c2UgaGUgY2FyZWQgbW9yZSBmb3IgaGlzIGxvdmVyJ3MgcGxlYXN1cmUgdGhhbiBmb3IgaGlzIG93bi4gTHVjaXVzIHdhcyBkZWxpZ2h0ZWQgYXQgdGhpcywgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Eb24ndCB3b3JyeSBhYm91dCB0aGF0ISBJIHdpbGwgZ2l2ZSB0aGVlIHRoeSBoZWFydCdzIGRlc2lyZS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gb3JkZXJpbmcgYSBtYW4gd2hvIGhhZCBiZWVuIGNvbmRlbW5lZCB0byBkZWF0aCB0byBiZSBicm91Z2h0IGZvcnRoIGZyb20gaGlzIHByaXNvbiwgYW5kIHNlbmRpbmcgZm9yIGEgbGljdG9yLCBoZSBjb21tYW5kZWQgaGltIHRvIHN0cmlrZSBvZmYgdGhlIG1hbidzIGhlYWQgdGhlcmUgaW4gdGhlIGJhbnF1ZXQtaGFsbC4gVmFsZXJpdXMgQW50aWFzLCBob3dldmVyLCBzYXlzIGl0IHdhcyBub3QgYSBsb3ZlciwgYnV0IGEgbWlzdHJlc3Mgd2hvbSBMdWNpdXMgdGh1cyBzb3VnaHQgdG8gZ3JhdGlmeS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM5LjQzIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpeC4gNDM8L2JpYmw+Ljwvbm90ZT4gQW5kIExpdnkgc2F5cyB0aGF0IGluIGEgc3BlZWNoIG9mIENhdG8gaGltc2VsZiBpdCBpcyB3cml0dGVuIHRoYXQgYSBHYXVsaXNoIGRlc2VydGVyIGhhZCBjb21lIHRvIHRoZSBkb29yIHdpdGggaGlzIHdpZmUgYW5kIGNoaWxkcmVuLCBhbmQgdGhhdCBMdWNpdXMgYWRtaXR0ZWQgaGltIGludG8gdGhlIGJhbnF1ZXQtaGFsbCBhbmQgc2xldyBoaW0gd2l0aCBoaXMgb3duIGhhbmQgdG8gZ3JhdGlmeSBoaXMgbG92ZXIuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzOS40MyIgdmFsaWQ9InllcyI+TGl2eSwgeHh4aXguIDQzPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZmVhdHVyZSwgaG93ZXZlciwgd2FzIHByb2JhYmx5IGludHJvZHVjZWQgYnkgQ2F0byB0byBzdHJlbmd0aGVuIHRoZSBmb3JjZSBvZiBoaXMgZGVudW5jaWF0aW9uOyBmb3IgdGhhdCBpdCB3YXMgbm90IGEgZGVzZXJ0ZXIsIGJ1dCBhIHByaXNvbmVyLCB3aG8gd2FzIHB1dCB0byBkZWF0aCwgYW5kIG9uZSB3aG8gaGFkIGJlZW4gY29uZGVtbmVkIHRvIGRpZSwgaXMgdGhlIHRlc3RpbW9ueSBvZiBtYW55IG90aGVycywgYW5kIGVzcGVjaWFsbHkgb2YgQ2ljZXJvIHRoZSBvcmF0b3IgaW4gaGlzIHRyZWF0aXNlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PbiBPbGQgQWdlLDwvcT4gd2hlcmUgaGUgcHV0cyB0aGUgc3RvcnkgaW4gdGhlIG1vdXRoIG9mIENhdG8gaGltc2VsZi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1hLiAxNy4xNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIEVsZGVyPC90aXRsZT4sIHh2aWkuIDE0PC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzOS40MiIgdmFsaWQ9InllcyI+TGl2eSwgeHh4aXguIDQyPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWEuIDE3LjE0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byB0aGUgRWxkZXI8L3RpdGxlPiwgeHZpaS4gMTQ8L2JpYmw+OyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIHRoZSBFbGRlcjwvdGl0bGU+LCB4dmlpLiAxNDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzkuNDIiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eGl4LiA0MjwvYmlibD4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdmlldyBvZiB0aGlzLCB3aGVuIENhdG8gYmVjYW1lIGNlbnNvcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE4NCBCLkMuPC9ub3RlPiBhbmQgd2FzIHB1cmdpbmcgdGhlIHNlbmF0ZSBvZiBpdHMgdW53b3J0aHkgbWVtYmVycywgaGUgZXhwZWxsZWQgZnJvbSBpdCBMdWNpdXMgRmxhbWluaW51cywgYWx0aG91Z2ggaGUgd2FzIGEgbWFuIG9mIGNvbnN1bGFyIGRpZ25pdHksIGFuZCBhbHRob3VnaCBoaXMgYnJvdGhlciBUaXR1cyB3YXMgdGhvdWdodCB0byBiZSBpbnZvbHZlZCBpbiBoaXMgZGlzZ3JhY2UuIFRoZXJlZm9yZSB0aGUgdHdvIGJyb3RoZXJzIGNhbWUgYmVmb3JlIHRoZSBwZW9wbGUgaW4gbG93bHkgZ2FyYiBhbmQgYmF0aGVkIGluIHRlYXJzLCBhbmQgbWFkZSB3aGF0IHNlZW1lZCBhIHJlYXNvbmFibGUgcmVxdWVzdCBvZiB0aGVpciBmZWxsb3cgY2l0aXplbnMsIG5hbWVseSwgdGhhdCBDYXRvIHNob3VsZCBzdGF0ZSB0aGUgcmVhc29ucyB3aGljaCBoYWQgbGVkIGhpbSB0byB2aXNpdCBhIG5vYmxlIGhvdXNlIHdpdGggYSBkaXNncmFjZSBzbyBncmVhdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aG91dCBhbnkgaGVzaXRhdGlvbiwgdGhlbiwgQ2F0byBjYW1lIGZvcndhcmQsIGFuZCBzdGFuZGluZyB3aXRoIGhpcyBjb2xsZWFndWUgYmVmb3JlIFRpdHVzLCBhc2tlZCBoaW0gaWYgaGUga25ldyBhYm91dCB0aGUgYmFucXVldC4gVGl0dXMgc2FpZCBoZSBkaWQgbm90LCB3aGVyZXVwb24gQ2F0byByZWxhdGVkIHRoZSBpbmNpZGVudCBhbmQgZm9ybWFsbHkgY2hhbGxlbmdlZCBMdWNpdXMgdG8gc2F5IHdoZXRoZXIgYW55IHBhcnQgb2YgdGhlIHN0b3J5IHRvbGQgd2FzIG5vdCB0cnVlLiBCdXQgTHVjaXVzIHdhcyBkdW1iLCBhbmQgdGhlIHBlb3BsZSB0aGVyZWZvcmUgc2F3IHRoYXQgaGUgaGFkIGJlZW4ganVzdGx5IGRpc2dyYWNlZCwgYW5kIGdhdmUgQ2F0byBhIHNwbGVuZGlkIGVzY29ydCBhd2F5IGZyb20gdGhlIHJvc3RyYS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGl0dXMsIGhvd2V2ZXIsIHdhcyBzbyBhZmZlY3RlZCBieSB0aGUgbWlzZm9ydHVuZSBvZiBoaXMgYnJvdGhlciB0aGF0IGhlIGxlYWd1ZWQgaGltc2VsZiB3aXRoIHRob3NlIHdobyBoYWQgbG9uZyBoYXRlZCBDYXRvLCBhbmQgYWZ0ZXIgZ2V0dGluZyB0aGUgdXBwZXIgaGFuZCBpbiB0aGUgc2VuYXRlLCByZXZva2VkIGFuZCBhbm51bGxlZCBhbGwgdGhlIHB1YmxpYyByZW50YWxzIGFuZCBsZWFzZXMgYW5kIGNvbnRyYWN0cyB3aGljaCBDYXRvIGhhZCBtYWRlLCBiZXNpZGVzIGJyaW5naW5nIG1hbnkgaGVhdnkgaW5kaWN0bWVudHMgYWdhaW5zdCBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1hLiAxOS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhdG8gdGhlIEVsZGVyPC90aXRsZT4sIHhpeC4gMjwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM5LjQ0IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpeC4gNDQ8L2JpYmw+Ljwvbm90ZT4gVGhhdCBoZSBhY3RlZCB0aGUgcGFydCBvZiBhIGdvb2QgbWFuIG9yIGEgZ29vZCBjaXRpemVuIEkgY2Fubm90IGFmZmlybSwgaW4gdGh1cyBjaGVyaXNoaW5nIGFuIGluY3VyYWJsZSBoYXRyZWQgYWdhaW5zdCBhIGxhd2Z1bCBtYWdpc3RyYXRlIGFuZCBhIG1vc3QgZXhjZWxsZW50IGNpdGl6ZW4gb24gYWNjb3VudCBvZiBhIG1hbiB3aG8sIHRob3VnaCBhIGtpbnNtYW4sIHdhcyBuZXZlcnRoZWxlc3MgdW53b3J0aHkgYW5kIGhhZCBzdWZmZXJlZCBvbmx5IHdoYXQgaGUgZGVzZXJ2ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFzIHRoZSBSb21hbiBwZW9wbGUgd2FzIG9uY2UgZW5qb3lpbmcgYSBzcGVjdGFjbGUgaW4gdGhlIHRoZWF0cmUsIGFuZCB0aGUgc2VuYXRlLCBhY2NvcmRpbmcgdG8gY3VzdG9tLCBoYWQgc2VhdHMgb2YgaG9ub3VyIGluIHRoZSBmb3JlbW9zdCByb3dzLCBMdWNpdXMgd2FzIHNlZW4gc2l0dGluZyBzb21ld2hlcmUgaW4gdGhlIHJlYXIgYW1vbmcgdGhlIHBvb3IgYW5kIGxvd2x5LCBhbmQgZXhjaXRlZCBtZW4ncyBwaXR5LiBUaGUgbXVsdGl0dWRlIGNvdWxkIG5vdCBiZWFyIHRoZSBzaWdodCwgYnV0IGtlcHQgc2hvdXRpbmcgdG8gaGltIHRvIGNoYW5nZSBoaXMgcGxhY2UsIHVudGlsIGhlIGRpZCBjaGFuZ2UgaGlzIHBsYWNlLCBhbmQgd2FzIHJlY2VpdmVkIGFtb25nIHRoZWlyIG93biBudW1iZXIgYnkgdGhlIG1lbiBvZiBjb25zdWxhciByYW5rLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdmlldyBvZiB0aGlzLCB3aGVuIENhdG8gYmVjYW1lIGNlbnNvcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTg0IEIuQy48L25vdGU+IGFuZCB3YXMgcHVyZ2luZyB0aGUgc2VuYXRlIG9mIGl0cyB1bndvcnRoeSBtZW1iZXJzLCBoZSBleHBlbGxlZCBmcm9tIGl0IEx1Y2l1cyBGbGFtaW5pbnVzLCBhbHRob3VnaCBoZSB3YXMgYSBtYW4gb2YgY29uc3VsYXIgZGlnbml0eSwgYW5kIGFsdGhvdWdoIGhpcyBicm90aGVyIFRpdHVzIHdhcyB0aG91Z2h0IHRvIGJlIGludm9sdmVkIGluIGhpcyBkaXNncmFjZS4gVGhlcmVmb3JlIHRoZSB0d28gYnJvdGhlcnMgY2FtZSBiZWZvcmUgdGhlIHBlb3BsZSBpbiBsb3dseSBnYXJiIGFuZCBiYXRoZWQgaW4gdGVhcnMsIGFuZCBtYWRlIHdoYXQgc2VlbWVkIGEgcmVhc29uYWJsZSByZXF1ZXN0IG9mIHRoZWlyIGZlbGxvdyBjaXRpemVucywgbmFtZWx5LCB0aGF0IENhdG8gc2hvdWxkIHN0YXRlIHRoZSByZWFzb25zIHdoaWNoIGhhZCBsZWQgaGltIHRvIHZpc2l0IGEgbm9ibGUgaG91c2Ugd2l0aCBhIGRpc2dyYWNlIHNvIGdyZWF0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldpdGhvdXQgYW55IGhlc2l0YXRpb24sIHRoZW4sIENhdG8gY2FtZSBmb3J3YXJkLCBhbmQgc3RhbmRpbmcgd2l0aCBoaXMgY29sbGVhZ3VlIGJlZm9yZSBUaXR1cywgYXNrZWQgaGltIGlmIGhlIGtuZXcgYWJvdXQgdGhlIGJhbnF1ZXQuIFRpdHVzIHNhaWQgaGUgZGlkIG5vdCwgd2hlcmV1cG9uIENhdG8gcmVsYXRlZCB0aGUgaW5jaWRlbnQgYW5kIGZvcm1hbGx5IGNoYWxsZW5nZWQgTHVjaXVzIHRvIHNheSB3aGV0aGVyIGFueSBwYXJ0IG9mIHRoZSBzdG9yeSB0b2xkIHdhcyBub3QgdHJ1ZS4gQnV0IEx1Y2l1cyB3YXMgZHVtYiwgYW5kIHRoZSBwZW9wbGUgdGhlcmVmb3JlIHNhdyB0aGF0IGhlIGhhZCBiZWVuIGp1c3RseSBkaXNncmFjZWQsIGFuZCBnYXZlIENhdG8gYSBzcGxlbmRpZCBlc2NvcnQgYXdheSBmcm9tIHRoZSByb3N0cmEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRpdHVzLCBob3dldmVyLCB3YXMgc28gYWZmZWN0ZWQgYnkgdGhlIG1pc2ZvcnR1bmUgb2YgaGlzIGJyb3RoZXIgdGhhdCBoZSBsZWFndWVkIGhpbXNlbGYgd2l0aCB0aG9zZSB3aG8gaGFkIGxvbmcgaGF0ZWQgQ2F0bywgYW5kIGFmdGVyIGdldHRpbmcgdGhlIHVwcGVyIGhhbmQgaW4gdGhlIHNlbmF0ZSwgcmV2b2tlZCBhbmQgYW5udWxsZWQgYWxsIHRoZSBwdWJsaWMgcmVudGFscyBhbmQgbGVhc2VzIGFuZCBjb250cmFjdHMgd2hpY2ggQ2F0byBoYWQgbWFkZSwgYmVzaWRlcyBicmluZ2luZyBtYW55IGhlYXZ5IGluZGljdG1lbnRzIGFnYWluc3QgaGltLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWEuIDE5LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIHRoZSBFbGRlcjwvdGl0bGU+LCB4aXguIDI8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM5LjQ0IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHhpeC4gNDQ8L2JpYmw+Ljwvbm90ZT4gVGhhdCBoZSBhY3RlZCB0aGUgcGFydCBvZiBhIGdvb2QgbWFuIG9yIGEgZ29vZCBjaXRpemVuIEkgY2Fubm90IGFmZmlybSwgaW4gdGh1cyBjaGVyaXNoaW5nIGFuIGluY3VyYWJsZSBoYXRyZWQgYWdhaW5zdCBhIGxhd2Z1bCBtYWdpc3RyYXRlIGFuZCBhIG1vc3QgZXhjZWxsZW50IGNpdGl6ZW4gb24gYWNjb3VudCBvZiBhIG1hbiB3aG8sIHRob3VnaCBhIGtpbnNtYW4sIHdhcyBuZXZlcnRoZWxlc3MgdW53b3J0aHkgYW5kIGhhZCBzdWZmZXJlZCBvbmx5IHdoYXQgaGUgZGVzZXJ2ZWQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNYS4gMTkuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIEVsZGVyPC90aXRsZT4sIHhpeC4gMjwvYmlibD47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIEVsZGVyPC90aXRsZT4sIHhpeC4gMjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzkuNDQiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eGl4LiA0NDwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFzIHRoZSBSb21hbiBwZW9wbGUgd2FzIG9uY2UgZW5qb3lpbmcgYSBzcGVjdGFjbGUgaW4gdGhlIHRoZWF0cmUsIGFuZCB0aGUgc2VuYXRlLCBhY2NvcmRpbmcgdG8gY3VzdG9tLCBoYWQgc2VhdHMgb2YgaG9ub3VyIGluIHRoZSBmb3JlbW9zdCByb3dzLCBMdWNpdXMgd2FzIHNlZW4gc2l0dGluZyBzb21ld2hlcmUgaW4gdGhlIHJlYXIgYW1vbmcgdGhlIHBvb3IgYW5kIGxvd2x5LCBhbmQgZXhjaXRlZCBtZW4ncyBwaXR5LiBUaGUgbXVsdGl0dWRlIGNvdWxkIG5vdCBiZWFyIHRoZSBzaWdodCwgYnV0IGtlcHQgc2hvdXRpbmcgdG8gaGltIHRvIGNoYW5nZSBoaXMgcGxhY2UsIHVudGlsIGhlIGRpZCBjaGFuZ2UgaGlzIHBsYWNlLCBhbmQgd2FzIHJlY2VpdmVkIGFtb25nIHRoZWlyIG93biBudW1iZXIgYnkgdGhlIG1lbiBvZiBjb25zdWxhciByYW5rLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBuYXRpdmUgYW1iaXRpb24gb2YgVGl0dXMsIGFzIGxvbmcgYXMgaXQgaGFkIHN1ZmZpY2llbnQgbWF0ZXJpYWwgdG8gZ3JhdGlmeSBpdCBpbiB0aGUgd2FycyB3aGljaCBJIGhhdmUgbWVudGlvbmVkLCBtZXQgd2l0aCBwcmFpc2UsIGFzLCBmb3IgaW5zdGFuY2UsIHdoZW4gaGUgc2VydmVkIGEgc2Vjb25kIHRpbWUgYXMgbWlsaXRhcnkgdHJpYnVuZSBhZnRlciBoYXZpbmcgYmVlbiBjb25zdWwsIHRob3VnaCB0aGVyZSB3YXMgbm8gbmVjZXNzaXR5IGZvciBpdDsgYnV0IGFmdGVyIGhlIGhhZCBjZWFzZWQgdG8gaG9sZCBvZmZpY2UgYW5kIHdhcyB3ZWxsIG9uIGluIHllYXJzLCBoZSBtZXQgdGhlIHJhdGhlciB3aXRoIGNlbnN1cmUsIGJlY2F1c2UsIGFsdGhvdWdoIHRoZSBwb3J0aW9uIG9mIGxpZmUgd2hpY2ggc3RpbGwgcmVtYWluZWQgdG8gaGltIGRpZCBub3QgYWRtaXQgb2YgZ3JlYXQgYWN0aXZpdHksIGhlIHdhcyB1bmFibGUgdG8gcmVzdHJhaW4gaGlzIHBhc3Npb24gZm9yIGdsb3J5IGFuZCBoaXMgeW91dGhmdWwgYXJkb3VyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYnkgc29tZSBzdWNoIGZpZXJjZSBpbXB1bHNlLCBhcyBpdCB3b3VsZCBzZWVtLCBoZSB3YXMgbGVkIHRvIGhpcyB0cmVhdG1lbnQgb2YgSGFubmliYWwsIHdoaWNoIG1hZGUgaGltIG9kaW91cyB0byBtb3N0IHBlb3BsZS4gSGFubmliYWwgaGFkIHNlY3JldGx5IGZsZWQgZnJvbSBoaXMgbmF0aXZlIENhcnRoYWdlIGFuZCBzcGVudCBzb21lIHRpbWUgYXQgdGhlIGNvdXJ0IG9mIEFudGlvY2h1czsgYnV0IHdoZW4gQW50aW9jaHVzLCBhZnRlciB0aGUgYmF0dGxlIGluIFBocnlnaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGJhdHRsZSBhdCBNYWduZXNpYSwgaW4gTHlkaWEsIDE5MSBCLkMuIFVuZGVyIHRoZSB0ZXJtcyBvZiBwZWFjZSwgQW50aW9jaHVzIHdhcyB0byBkZWxpdmVyIEhhbm5pYmFsIHRvIHRoZSBSb21hbnMuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzNy40NSIgdmFsaWQ9InllcyI+TGl2eSwgeHh4dmlpLiA0NTwvYmlibD4uPC9ub3RlPiBoYWQgZ2xhZGx5IGFjY2VwdGVkIHRlcm1zIG9mIHBlYWNlLCBIYW5uaWJhbCB0b29rIHRvIGZsaWdodCBvbmNlIG1vcmUsIGFuZCBhZnRlciBtYW55IHdhbmRlcmluZ3MsIGZpbmFsbHkgc2V0dGxlZCBkb3duIGF0IHRoZSBjb3VydCBvZiBQcnVzaWFzIGluIEJpdGh5bmlhLiBObyBvbmUgYXQgUm9tZSB3YXMgaWdub3JhbnQgb2YgdGhpcywgYnV0IGFsbCBpZ25vcmVkIGhpbSBvbiBhY2NvdW50IG9mIGhpcyB3ZWFrbmVzcyBhbmQgb2xkIGFnZSwgcmVnYXJkaW5nIGhpbSBhcyBhIGNhc3Rhd2F5IG9mIEZvcnR1bmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRpdHVzLCBob3dldmVyLCB3aG8gaGFkIGJlZW4gc2VudCBieSB0aGUgc2VuYXRlIGFzIGFtYmFzc2Fkb3IgdG8gdGhlIGNvdXJ0IG9mIFBydXNpYXMgb24gc29tZSBvdGhlciBidXNpbmVzcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gTGl2eSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzOS41MSIgdmFsaWQ9InllcyI+KHh4eGl4LiA1MTwvYmlibD4pLCBIYW5uaWJhbCdzIHByZXNlbmNlIGluIEJpdGh5bmlhIHdhcyBwYXJ0IG9mIFJvbWUncyBjb21wbGFpbnQgYWdhaW5zdCBQcnVzaWFzLjwvbm90ZT4gYW5kIHNhdyB0aGF0IEhhbm5pYmFsIHdhcyBzdGF5aW5nIHRoZXJlLCB3YXMgaW5jZW5zZWQgdGhhdCBoZSBzaG91bGQgYmUgYWxpdmUsIGFuZCBhbHRob3VnaCBQcnVzaWFzIG1hZGUgbWFueSBmZXJ2ZW50IGludGVyY2Vzc2lvbnMgaW4gYmVoYWxmIG9mIGEgbWFuIHdobyB3YXMgYSBzdXBwbGlhbnQgYW5kIGZhbWlsaWFyIGZyaWVuZCwgd291bGQgbm90IHJlbGVudC4gVGhlcmUgd2FzIGFuIGFuY2llbnQgb3JhY2xlLCBhcyBpdCB3b3VsZCBhcHBlYXIsIGNvbmNlcm5pbmcgSGFubmliYWwncyBkZWF0aCwgYW5kIGl0IHJhbiBhcyBmb2xsb3dzOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5MaWJ5c3NhbiBlYXJ0aCBzaGFsbCBjb3ZlciB0aGUgZm9ybSBvZiBIYW5uaWJhbC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlIYW5uaWJhbCB0aG91Z2h0IHRoaXMgcmVmZXJyZWQgdG8gTGlieWEgYW5kIGEgYnVyaWFsIGF0IENhcnRoYWdlLCBhbmQgYmVsaWV2ZWQgdGhhdCBoZSB3b3VsZCBlbmQgaGlzIGRheXMgdGhlcmU7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aGVyZSBpcyBhIHNhbmR5IHRyYWN0IGluIEJpdGh5bmlhIG9uIHRoZSBzZWEtc2hvcmUsIGFuZCBvbiBpdHMgYm9yZGVyIGEgbGFyZ2UgdmlsbGFnZSBjYWxsZWQgTGlieXNzYS4gTmVhciB0aGlzIHZpbGxhZ2UgSGFubmliYWwgd2FzIGxpdmluZy4gQnV0IGhlIGhhZCBhbHdheXMgZGlzdHJ1c3RlZCB0aGUgd2Vha25lc3Mgb2YgUHJ1c2lhcyBhbmQgZmVhcmVkIHRoZSBSb21hbnMsIGFuZCB0aGVyZWZvcmUgZXZlbiBiZWZvcmUgdGhpcyB0aW1lIGhpcyBob3VzZSBoYWQgYmVlbiBwcm92aWRlZCB3aXRoIHNldmVuIHVuZGVyZ3JvdW5kIGV4aXRzIGxlYWRpbmcgZnJvbSBoaXMgb3duIGNoYW1iZXIuIFRoZXNlIHJhbiBpbiBkaWZmZXJlbnQgZGlyZWN0aW9ucyBiZW5lYXRoIHRoZSBzdXJmYWNlIG9mIHRoZSBncm91bmQsIGJ1dCBhbGwgaGFkIHNlY3JldCBpc3N1ZXMgZmFyIGF3YXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGhlIG5vdyBoZWFyZCBvZiB0aGUgYmVoZXN0IG9mIFRpdHVzLCBoZSBzZXQgb3V0IHRvIG1ha2UgaGlzIGVzY2FwZSBieSB3YXkgb2YgdGhlIHVuZGVyZ3JvdW5kIHBhc3NhZ2VzLCBidXQgZW5jb3VudGVyZWQgZ3VhcmRzIG9mIHRoZSBraW5nLCBhbmQgdGhlcmVmb3JlIGRldGVybWluZWQgdG8gdGFrZSBoaXMgb3duIGxpZmUuIFNvbWUgc2F5IHRoYXQgaGUgd291bmQgaGlzIGNsb2FrIGFib3V0IGhpcyBuZWNrIGFuZCB0aGVuIG9yZGVyZWQgYSBzZXJ2YW50IHRvIHBsYW50IGhpcyBrbmVlIGluIHRoZSBzbWFsbCBvZiBoaXMgYmFjaywgcHVsbCB0aGUgcm9wZSB0b3dhcmRzIGhpbSB3aXRoIGFsbCBoaXMgbWlnaHQgdW50aWwgaXQgd2FzIHR3aXN0ZWQgdGlnaHQsIGFuZCBzbyB0byBjaG9rZSBhbmQga2lsbCBoaW07IHNvbWUsIHRvbywgc2F5IHRoYXQgaGUgZHJhbmsgYnVsbCdzIGJsb29kIGluIGltaXRhdGlvbiBvZiBUaGVtaXN0b2NsZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBUaGVtLiAzMS41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4eHhpLiA1PC9iaWJsPi48L25vdGU+IGFuZCBNaWRhczsgYnV0IExpdnkgc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzOS41MSIgdmFsaWQ9InllcyI+TGl2eSB4eHhpeC4gNTE8L2JpYmw+Ljwvbm90ZT4gdGhhdCBoZSBoYWQgcG9pc29uIHdoaWNoIGhlIG9yZGVyZWQgdG8gYmUgbWl4ZWQsIGFuZCB0b29rIHRoZSBjdXAgd2l0aCB0aGVzZSB3b3JkczogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MZXQgdXMgbm93IGF0IGxhc3QgcHV0IGFuIGVuZCB0byB0aGUgZ3JlYXQgYW54aWV0eSBvZiB0aGUgUm9tYW5zLCB3aG8gaGF2ZSB0aG91Z2h0IGl0IHRvbyBsb25nIGFuZCBoYXJkIGEgdGFzayB0byB3YWl0IGZvciB0aGUgZGVhdGggb2YgYSBoYXRlZCBvbGQgbWFuLiBOZXZlcnRoZWxlc3MsIFRpdHVzIHdpbGwgcmlvdCBiZWFyIGF3YXkgYW4gZW52aWFibGUgdmljdG9yeSwgbm9yIG9uZSB3b3J0aHkgb2YgaGlzIGZvcmVmYXRoZXJzLCB3aG8gc2VudCBzZWNyZXQgaW5mb3JtYXRpb24gdG8gUHlycmh1cywgd2hlbiBoZSB3YXMgYXQgd2FyIHdpdGggdGhlbSBhbmQgYSB2aWN0b3Igb3ZlciB0aGVtLCBvZiB0aGUgcG9pc29uaW5nIHRoYXQgd2FzIGdvaW5nIHRvIGJlIGF0dGVtcHRlZC48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB5cnJoLiAyMS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlB5cnJodXM8L3RpdGxlPiwgeHhpLiAxLTM8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGUgbmF0aXZlIGFtYml0aW9uIG9mIFRpdHVzLCBhcyBsb25nIGFzIGl0IGhhZCBzdWZmaWNpZW50IG1hdGVyaWFsIHRvIGdyYXRpZnkgaXQgaW4gdGhlIHdhcnMgd2hpY2ggSSBoYXZlIG1lbnRpb25lZCwgbWV0IHdpdGggcHJhaXNlLCBhcywgZm9yIGluc3RhbmNlLCB3aGVuIGhlIHNlcnZlZCBhIHNlY29uZCB0aW1lIGFzIG1pbGl0YXJ5IHRyaWJ1bmUgYWZ0ZXIgaGF2aW5nIGJlZW4gY29uc3VsLCB0aG91Z2ggdGhlcmUgd2FzIG5vIG5lY2Vzc2l0eSBmb3IgaXQ7IGJ1dCBhZnRlciBoZSBoYWQgY2Vhc2VkIHRvIGhvbGQgb2ZmaWNlIGFuZCB3YXMgd2VsbCBvbiBpbiB5ZWFycywgaGUgbWV0IHRoZSByYXRoZXIgd2l0aCBjZW5zdXJlLCBiZWNhdXNlLCBhbHRob3VnaCB0aGUgcG9ydGlvbiBvZiBsaWZlIHdoaWNoIHN0aWxsIHJlbWFpbmVkIHRvIGhpbSBkaWQgbm90IGFkbWl0IG9mIGdyZWF0IGFjdGl2aXR5LCBoZSB3YXMgdW5hYmxlIHRvIHJlc3RyYWluIGhpcyBwYXNzaW9uIGZvciBnbG9yeSBhbmQgaGlzIHlvdXRoZnVsIGFyZG91ci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBieSBzb21lIHN1Y2ggZmllcmNlIGltcHVsc2UsIGFzIGl0IHdvdWxkIHNlZW0sIGhlIHdhcyBsZWQgdG8gaGlzIHRyZWF0bWVudCBvZiBIYW5uaWJhbCwgd2hpY2ggbWFkZSBoaW0gb2Rpb3VzIHRvIG1vc3QgcGVvcGxlLiBIYW5uaWJhbCBoYWQgc2VjcmV0bHkgZmxlZCBmcm9tIGhpcyBuYXRpdmUgQ2FydGhhZ2UgYW5kIHNwZW50IHNvbWUgdGltZSBhdCB0aGUgY291cnQgb2YgQW50aW9jaHVzOyBidXQgd2hlbiBBbnRpb2NodXMsIGFmdGVyIHRoZSBiYXR0bGUgaW4gUGhyeWdpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBiYXR0bGUgYXQgTWFnbmVzaWEsIGluIEx5ZGlhLCAxOTEgQi5DLiBVbmRlciB0aGUgdGVybXMgb2YgcGVhY2UsIEFudGlvY2h1cyB3YXMgdG8gZGVsaXZlciBIYW5uaWJhbCB0byB0aGUgUm9tYW5zLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzNy40NSIgdmFsaWQ9InllcyI+TGl2eSwgeHh4dmlpLiA0NTwvYmlibD4uPC9ub3RlPiBoYWQgZ2xhZGx5IGFjY2VwdGVkIHRlcm1zIG9mIHBlYWNlLCBIYW5uaWJhbCB0b29rIHRvIGZsaWdodCBvbmNlIG1vcmUsIGFuZCBhZnRlciBtYW55IHdhbmRlcmluZ3MsIGZpbmFsbHkgc2V0dGxlZCBkb3duIGF0IHRoZSBjb3VydCBvZiBQcnVzaWFzIGluIEJpdGh5bmlhLiBObyBvbmUgYXQgUm9tZSB3YXMgaWdub3JhbnQgb2YgdGhpcywgYnV0IGFsbCBpZ25vcmVkIGhpbSBvbiBhY2NvdW50IG9mIGhpcyB3ZWFrbmVzcyBhbmQgb2xkIGFnZSwgcmVnYXJkaW5nIGhpbSBhcyBhIGNhc3Rhd2F5IG9mIEZvcnR1bmUuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzNy40NSIgdmFsaWQ9InllcyI+TGl2eSwgeHh4dmlpLiA0NTwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRpdHVzLCBob3dldmVyLCB3aG8gaGFkIGJlZW4gc2VudCBieSB0aGUgc2VuYXRlIGFzIGFtYmFzc2Fkb3IgdG8gdGhlIGNvdXJ0IG9mIFBydXNpYXMgb24gc29tZSBvdGhlciBidXNpbmVzcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBMaXZ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzkuNTEiIHZhbGlkPSJ5ZXMiPih4eHhpeC4gNTE8L2JpYmw+KSwgSGFubmliYWwncyBwcmVzZW5jZSBpbiBCaXRoeW5pYSB3YXMgcGFydCBvZiBSb21lJ3MgY29tcGxhaW50IGFnYWluc3QgUHJ1c2lhcy48L25vdGU+IGFuZCBzYXcgdGhhdCBIYW5uaWJhbCB3YXMgc3RheWluZyB0aGVyZSwgd2FzIGluY2Vuc2VkIHRoYXQgaGUgc2hvdWxkIGJlIGFsaXZlLCBhbmQgYWx0aG91Z2ggUHJ1c2lhcyBtYWRlIG1hbnkgZmVydmVudCBpbnRlcmNlc3Npb25zIGluIGJlaGFsZiBvZiBhIG1hbiB3aG8gd2FzIGEgc3VwcGxpYW50IGFuZCBmYW1pbGlhciBmcmllbmQsIHdvdWxkIG5vdCByZWxlbnQuIFRoZXJlIHdhcyBhbiBhbmNpZW50IG9yYWNsZSwgYXMgaXQgd291bGQgYXBwZWFyLCBjb25jZXJuaW5nIEhhbm5pYmFsJ3MgZGVhdGgsIGFuZCBpdCByYW4gYXMgZm9sbG93czrigJQKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzkuNTEiIHZhbGlkPSJ5ZXMiPih4eHhpeC4gNTE8L2JpYmw+KSwgSGFubmliYWwncyBwcmVzZW5jZSBpbiBCaXRoeW5pYSB3YXMgcGFydCBvZiBSb21lJ3MgY29tcGxhaW50IGFnYWluc3QgUHJ1c2lhcy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5MaWJ5c3NhbiBlYXJ0aCBzaGFsbCBjb3ZlciB0aGUgZm9ybSBvZiBIYW5uaWJhbC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlIYW5uaWJhbCB0aG91Z2h0IHRoaXMgcmVmZXJyZWQgdG8gTGlieWEgYW5kIGEgYnVyaWFsIGF0IENhcnRoYWdlLCBhbmQgYmVsaWV2ZWQgdGhhdCBoZSB3b3VsZCBlbmQgaGlzIGRheXMgdGhlcmU7IAoJCQkJPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5MaWJ5c3NhbiBlYXJ0aCBzaGFsbCBjb3ZlciB0aGUgZm9ybSBvZiBIYW5uaWJhbC48L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aGVyZSBpcyBhIHNhbmR5IHRyYWN0IGluIEJpdGh5bmlhIG9uIHRoZSBzZWEtc2hvcmUsIGFuZCBvbiBpdHMgYm9yZGVyIGEgbGFyZ2UgdmlsbGFnZSBjYWxsZWQgTGlieXNzYS4gTmVhciB0aGlzIHZpbGxhZ2UgSGFubmliYWwgd2FzIGxpdmluZy4gQnV0IGhlIGhhZCBhbHdheXMgZGlzdHJ1c3RlZCB0aGUgd2Vha25lc3Mgb2YgUHJ1c2lhcyBhbmQgZmVhcmVkIHRoZSBSb21hbnMsIGFuZCB0aGVyZWZvcmUgZXZlbiBiZWZvcmUgdGhpcyB0aW1lIGhpcyBob3VzZSBoYWQgYmVlbiBwcm92aWRlZCB3aXRoIHNldmVuIHVuZGVyZ3JvdW5kIGV4aXRzIGxlYWRpbmcgZnJvbSBoaXMgb3duIGNoYW1iZXIuIFRoZXNlIHJhbiBpbiBkaWZmZXJlbnQgZGlyZWN0aW9ucyBiZW5lYXRoIHRoZSBzdXJmYWNlIG9mIHRoZSBncm91bmQsIGJ1dCBhbGwgaGFkIHNlY3JldCBpc3N1ZXMgZmFyIGF3YXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGhlIG5vdyBoZWFyZCBvZiB0aGUgYmVoZXN0IG9mIFRpdHVzLCBoZSBzZXQgb3V0IHRvIG1ha2UgaGlzIGVzY2FwZSBieSB3YXkgb2YgdGhlIHVuZGVyZ3JvdW5kIHBhc3NhZ2VzLCBidXQgZW5jb3VudGVyZWQgZ3VhcmRzIG9mIHRoZSBraW5nLCBhbmQgdGhlcmVmb3JlIGRldGVybWluZWQgdG8gdGFrZSBoaXMgb3duIGxpZmUuIFNvbWUgc2F5IHRoYXQgaGUgd291bmQgaGlzIGNsb2FrIGFib3V0IGhpcyBuZWNrIGFuZCB0aGVuIG9yZGVyZWQgYSBzZXJ2YW50IHRvIHBsYW50IGhpcyBrbmVlIGluIHRoZSBzbWFsbCBvZiBoaXMgYmFjaywgcHVsbCB0aGUgcm9wZSB0b3dhcmRzIGhpbSB3aXRoIGFsbCBoaXMgbWlnaHQgdW50aWwgaXQgd2FzIHR3aXN0ZWQgdGlnaHQsIGFuZCBzbyB0byBjaG9rZSBhbmQga2lsbCBoaW07IHNvbWUsIHRvbywgc2F5IHRoYXQgaGUgZHJhbmsgYnVsbCdzIGJsb29kIGluIGltaXRhdGlvbiBvZiBUaGVtaXN0b2NsZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGhlbS4gMzEuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4eHhpLiA1PC9iaWJsPi48L25vdGU+IGFuZCBNaWRhczsgYnV0IExpdnkgc2F5czxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZW0uIDMxLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVtaXN0b2NsZXM8L3RpdGxlPiwgeHh4aS4gNTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlbWlzdG9jbGVzPC90aXRsZT4sIHh4eGkuIDU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM5LjUxIiB2YWxpZD0ieWVzIj5MaXZ5IHh4eGl4LiA1MTwvYmlibD4uPC9ub3RlPiB0aGF0IGhlIGhhZCBwb2lzb24gd2hpY2ggaGUgb3JkZXJlZCB0byBiZSBtaXhlZCwgYW5kIHRvb2sgdGhlIGN1cCB3aXRoIHRoZXNlIHdvcmRzOiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzkuNTEiIHZhbGlkPSJ5ZXMiPkxpdnkgeHh4aXguIDUxPC9iaWJsPi48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCB1cyBub3cgYXQgbGFzdCBwdXQgYW4gZW5kIHRvIHRoZSBncmVhdCBhbnhpZXR5IG9mIHRoZSBSb21hbnMsIHdobyBoYXZlIHRob3VnaHQgaXQgdG9vIGxvbmcgYW5kIGhhcmQgYSB0YXNrIHRvIHdhaXQgZm9yIHRoZSBkZWF0aCBvZiBhIGhhdGVkIG9sZCBtYW4uIE5ldmVydGhlbGVzcywgVGl0dXMgd2lsbCByaW90IGJlYXIgYXdheSBhbiBlbnZpYWJsZSB2aWN0b3J5LCBub3Igb25lIHdvcnRoeSBvZiBoaXMgZm9yZWZhdGhlcnMsIHdobyBzZW50IHNlY3JldCBpbmZvcm1hdGlvbiB0byBQeXJyaHVzLCB3aGVuIGhlIHdhcyBhdCB3YXIgd2l0aCB0aGVtIGFuZCBhIHZpY3RvciBvdmVyIHRoZW0sIG9mIHRoZSBwb2lzb25pbmcgdGhhdCB3YXMgZ29pbmcgdG8gYmUgYXR0ZW1wdGVkLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB5cnJoLiAyMS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHlycmh1czwvdGl0bGU+LCB4eGkuIDEtMzwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQeXJyaC4gMjEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlB5cnJodXM8L3RpdGxlPiwgeHhpLiAxLTM8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlB5cnJodXM8L3RpdGxlPiwgeHhpLiAxLTM8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGFyZSB0aGUgYWNjb3VudHMgb2YgdGhlIGRlYXRoIG9mIEhhbm5pYmFsLiBXaGVuIHRoZSBzdG9yeSBvZiBpdCB3YXMgYnJvdWdodCB0byB0aGUgc2VuYXRlLCBtYW55IG9mIHRoZW0gdGhvdWdodCB0aGUgY29uZHVjdCBvZiBUaXR1cyBvZGlvdXMsIG9mZmljaW91cywgYW5kIGNydWVsOyBmb3IgaGUgaGFkIGtpbGxlZCBIYW5uaWJhbCB3aGVuIGhlIHdhcyBsaWtlIGEgYmlyZCBwZXJtaXR0ZWQgdG8gbGl2ZSBhIHRhbWUgYW5kIGhhcm1sZXNzIGxpZmUgYmVjYXVzZSB0b28gb2xkIHRvIGZseSBhbmQgd2l0aG91dCBhIHRhaWwsIGFuZCB0aGVyZSBoYWQgYmVlbiBubyBuZWNlc3NpdHkgZm9yIGhpcyBkb2luZyB0aGlzLCBidXQgaGUgZGlkIGl0IHRvIHdpbiBmYW1lLCB0aGF0IGhpcyBuYW1lIG1pZ2h0IGJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGVhdGggb2YgSGFubmliYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1lbiBhbHNvIHBvaW50ZWQgdG8gdGhlIGNsZW1lbmN5IGFuZCBtYWduYW5pbWl0eSBvZiBTY2lwaW8gQWZyaWNhbnVzIGFuZCBhZG1pcmVkIGl0IGFsbCB0aGUgbW9yZSwgc2luY2UgYWZ0ZXIgZGVmZWF0aW5nIGEgSGFubmliYWwgd2hvIGhhZCBub3QgYmVlbiBjb25xdWVyZWQgYmVmb3JlIGFuZCB3YXMgZmlsbGluZyBBZnJpY2Egd2l0aCBmZWFyLCBoZSBuZWl0aGVyIGRyb3ZlIGhpbSBmcm9tIHRoZSBjb3VudHJ5IG5vciBkZW1hbmRlZCBoaXMgc3VycmVuZGVyIGJ5IGhpcyBmZWxsb3cgY2l0aXplbnMsIG5heSwgaGUgYWN0dWFsbHkgZ2F2ZSBoaW0gYSBraW5kbHkgZ3JlZXRpbmcgd2hlbiBoZSBoZWxkIGNvbmZlcmVuY2Ugd2l0aCBoaW0gYmVmb3JlIHRoZSBiYXR0bGUsIGFuZCBhZnRlciB0aGUgYmF0dGxlLCBpbiBtYWtpbmcgdGVybXMgb2YgcGVhY2UsIGhlIGRpZCBub3QgaW5zdWx0IG9yIHRyYW1wbGUgdXBvbiB0aGUgZm9ydHVuZXMgb2YgaGlzIGZvZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzAuMjkiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eC4gMjkgIGZmPC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdlIGFyZSB0b2xkIHRoYXQgdGhlIHR3byBtZW4gbWV0IGFnYWluIGF0IEVwaGVzdXMsIGFuZCBpbiB0aGUgZmlyc3QgcGxhY2UsIHRoYXQgd2hlbiwgYXMgdGhleSB3ZXJlIHdhbGtpbmcgYWJvdXQgdG9nZXRoZXIsIEhhbm5pYmFsIHRvb2sgdGhlIHNpZGUgd2hpY2ggbW9yZSBwcm9wZXJseSBiZWxvbmdlZCB0byBTY2lwaW8gYXMgdGhlIHN1cGVyaW9yLCBTY2lwaW8gc3VmZmVyZWQgaXQgYW5kIHdhbGtlZCBhYm91dCB3aXRob3V0IHBheWluZyBhbnkgaGVlZCB0byBpdDsgYW5kIGFnYWluLCB0aGF0IHdoZW4gdGhleSBmZWxsIHRvIGRpc2N1c3NpbmcgZ2VuZXJhbHMgYW5kIEhhbm5pYmFsIGRlY2xhcmVkIEFsZXhhbmRlciB0byBoYXZlIGJlZW4gdGhlIG1pZ2h0aWVzdCBvZiBnZW5lcmFscywgYW5kIG5leHQgdG8gaGltIFB5cnJodXMsIGFuZCB0aGlyZCBoaW1zZWxmLCBTY2lwaW8gYXNrZWQgd2l0aCBhIHF1aWV0IHNtaWxlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB3aGF0IHdvdWxkc3QgdGhvdSBoYXZlIHNhaWQgaWYgSSBoYWQgbm90IGNvbnF1ZXJlZCB0aGVlPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UbyB3aGljaCBIYW5uaWJhbCByZXBsaWVkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluIHRoYXQgY2FzZSwgU2NpcGlvLCBJIHNob3VsZCBub3QgaGF2ZSBjb3VudGVkIG15c2VsZiB0aGlyZCwgYnV0IGZpcnN0IG9mIGdlbmVyYWxzLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM1LjE0IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHh2LiAxNDwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBhcmUgdGhlIGFjY291bnRzIG9mIHRoZSBkZWF0aCBvZiBIYW5uaWJhbC4gV2hlbiB0aGUgc3Rvcnkgb2YgaXQgd2FzIGJyb3VnaHQgdG8gdGhlIHNlbmF0ZSwgbWFueSBvZiB0aGVtIHRob3VnaHQgdGhlIGNvbmR1Y3Qgb2YgVGl0dXMgb2Rpb3VzLCBvZmZpY2lvdXMsIGFuZCBjcnVlbDsgZm9yIGhlIGhhZCBraWxsZWQgSGFubmliYWwgd2hlbiBoZSB3YXMgbGlrZSBhIGJpcmQgcGVybWl0dGVkIHRvIGxpdmUgYSB0YW1lIGFuZCBoYXJtbGVzcyBsaWZlIGJlY2F1c2UgdG9vIG9sZCB0byBmbHkgYW5kIHdpdGhvdXQgYSB0YWlsLCBhbmQgdGhlcmUgaGFkIGJlZW4gbm8gbmVjZXNzaXR5IGZvciBoaXMgZG9pbmcgdGhpcywgYnV0IGhlIGRpZCBpdCB0byB3aW4gZmFtZSwgdGhhdCBoaXMgbmFtZSBtaWdodCBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGRlYXRoIG9mIEhhbm5pYmFsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1lbiBhbHNvIHBvaW50ZWQgdG8gdGhlIGNsZW1lbmN5IGFuZCBtYWduYW5pbWl0eSBvZiBTY2lwaW8gQWZyaWNhbnVzIGFuZCBhZG1pcmVkIGl0IGFsbCB0aGUgbW9yZSwgc2luY2UgYWZ0ZXIgZGVmZWF0aW5nIGEgSGFubmliYWwgd2hvIGhhZCBub3QgYmVlbiBjb25xdWVyZWQgYmVmb3JlIGFuZCB3YXMgZmlsbGluZyBBZnJpY2Egd2l0aCBmZWFyLCBoZSBuZWl0aGVyIGRyb3ZlIGhpbSBmcm9tIHRoZSBjb3VudHJ5IG5vciBkZW1hbmRlZCBoaXMgc3VycmVuZGVyIGJ5IGhpcyBmZWxsb3cgY2l0aXplbnMsIG5heSwgaGUgYWN0dWFsbHkgZ2F2ZSBoaW0gYSBraW5kbHkgZ3JlZXRpbmcgd2hlbiBoZSBoZWxkIGNvbmZlcmVuY2Ugd2l0aCBoaW0gYmVmb3JlIHRoZSBiYXR0bGUsIGFuZCBhZnRlciB0aGUgYmF0dGxlLCBpbiBtYWtpbmcgdGVybXMgb2YgcGVhY2UsIGhlIGRpZCBub3QgaW5zdWx0IG9yIHRyYW1wbGUgdXBvbiB0aGUgZm9ydHVuZXMgb2YgaGlzIGZvZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDMwLjI5IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHguIDI5ICBmZjwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzMC4yOSIgdmFsaWQ9InllcyI+TGl2eSwgeHh4LiAyOSAgZmY8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3ZSBhcmUgdG9sZCB0aGF0IHRoZSB0d28gbWVuIG1ldCBhZ2FpbiBhdCBFcGhlc3VzLCBhbmQgaW4gdGhlIGZpcnN0IHBsYWNlLCB0aGF0IHdoZW4sIGFzIHRoZXkgd2VyZSB3YWxraW5nIGFib3V0IHRvZ2V0aGVyLCBIYW5uaWJhbCB0b29rIHRoZSBzaWRlIHdoaWNoIG1vcmUgcHJvcGVybHkgYmVsb25nZWQgdG8gU2NpcGlvIGFzIHRoZSBzdXBlcmlvciwgU2NpcGlvIHN1ZmZlcmVkIGl0IGFuZCB3YWxrZWQgYWJvdXQgd2l0aG91dCBwYXlpbmcgYW55IGhlZWQgdG8gaXQ7IGFuZCBhZ2FpbiwgdGhhdCB3aGVuIHRoZXkgZmVsbCB0byBkaXNjdXNzaW5nIGdlbmVyYWxzIGFuZCBIYW5uaWJhbCBkZWNsYXJlZCBBbGV4YW5kZXIgdG8gaGF2ZSBiZWVuIHRoZSBtaWdodGllc3Qgb2YgZ2VuZXJhbHMsIGFuZCBuZXh0IHRvIGhpbSBQeXJyaHVzLCBhbmQgdGhpcmQgaGltc2VsZiwgU2NpcGlvIGFza2VkIHdpdGggYSBxdWlldCBzbWlsZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB3aGF0IHdvdWxkc3QgdGhvdSBoYXZlIHNhaWQgaWYgSSBoYWQgbm90IGNvbnF1ZXJlZCB0aGVlPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHdoaWNoIEhhbm5pYmFsIHJlcGxpZWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiB0aGF0IGNhc2UsIFNjaXBpbywgSSBzaG91bGQgbm90IGhhdmUgY291bnRlZCBteXNlbGYgdGhpcmQsIGJ1dCBmaXJzdCBvZiBnZW5lcmFscy48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzUuMTQiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eHYuIDE0PC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzUuMTQiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eHYuIDE0PC9iaWJsPi48cCBjbGFzcz0idHJhbnNsYXRpb24iPlN1Y2ggY29uZHVjdCBvbiB0aGUgcGFydCBvZiBTY2lwaW8gbW9zdCBwZW9wbGUgYWRtaXJlZCwgYW5kIHRoZXkgYmxhbWVkIFRpdHVzIGZvciBoYXZpbmcgbGFpZCB2aW9sZW50IGhhbmRzIG9uIG9uZSB3aG9tIGFub3RoZXIgaGFkIHNsYWluLiBCdXQgc29tZSB0aGVyZSB3ZXJlIHdobyBwcmFpc2VkIHdoYXQgaGUgaGFkIGRvbmUgYW5kIHRob3VnaHQgdGhhdCBIYW5uaWJhbCwgYXMgbG9uZyBhcyBoZSB3YXMgYWxpdmUsIHdhcyBhIGNvbnN1bWluZyBmaXJlIHdoaWNoIG5lZWRlZCBvbmx5IHRvIGJlIGZhbm5lZDsgCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5mb3Igd2hlbiBoZSB3YXMgaW4gaGlzIHByaW1lLCB0aGV5IHNhaWQsIGl0IHdhcyBub3QgaGlzIGJvZHkgbm9yIGhpcyBhcm0gdGhhdCBoYWQgYmVlbiBmb3JtaWRhYmxlIHRvIHRoZSBSb21hbnMsIGJ1dCBoaXMgYWJpbGl0eSBhbmQgZXhwZXJpZW5jZSBjb3VwbGVkIHdpdGggaGlzIGluZ3JhaW5lZCBiaXR0ZXJuZXNzIGFuZCBob3N0aWxpdHksIGFuZCBmcm9tIHRoZXNlIG5hdWdodCBpcyBzdWJ0cmFjdGVkIGJ5IG9sZCBhZ2UsIGJ1dCB0aGUgbmF0dXJhbCBjaGFyYWN0ZXJpc3RpY3MgcmVtYWluIHVuY2hhbmdlZDogd2hlcmVhcyBmb3J0dW5lIGRvZXMgbm90IHJlbWFpbiB0aGUgc2FtZSwgYnV0IGNoYW5nZXMgc2lkZXMsIGFuZCBzdW1tb25zIHdpdGggaG9wZSB0byBmcmVzaCB1bmRlcnRha2luZ3MgdGhvc2Ugd2hvbSBoYXRyZWQgbWFrZXMgcGVycGV0dWFsIGZvZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdWJzZXF1ZW50IGV2ZW50cyB3ZXJlIHBlcmhhcHMgc3RpbGwgbW9yZSBhIGp1c3RpZmljYXRpb24gb2YgVGl0dXM7IGZvciBBcmlzdG9uaWN1cywgdGhlIHNvbiBvZiBhIGhhcnBpc3QncyBkYXVnaHRlciwgdXNlZCBoaXMgcmVwdXRlZCBjb25uZWN0aW9uIHdpdGggRXVtZW5lcyB0byBmaWxsIGFsbCBBc2lhIHdpdGggd2FycyBhbmQgcmViZWxsaW9ucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxMzEtMTMwIEIuQy4gPC9ub3RlPiBhbmQgTWl0aHJpZGF0ZXMsIG5vdHdpdGhzdGFuZGluZyBoaXMgZGVmZWF0cyBieSBTdWxsYSBhbmQgRmltYnJpYSBhbmQgaGlzIGdyZWF0IGxvc3NlcyBpbiBhcm1pZXMgYW5kIGdlbmVyYWxzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg4LTg0IEIuQy48L25vdGU+IHJvc2Ugb25jZSBtb3JlIHRvIGJlIGEgZm9ybWlkYWJsZSBhbnRhZ29uaXN0IG9mIEx1Y3VsbHVzIGJ5IGxhbmQgYW5kIHNlYS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA3NC02NyBCLkMuIFRoZSBhcmd1bWVudCBpcyB0aGF0IGlmIHNvIGdyZWF0IGRhbmdlcnMgdG8gUm9tZSB3ZXJlIGxhdGVudCBpbiBBc2lhLCB0aGUgcHJlc2VuY2Ugb2YgSGFubmliYWwgdGhlcmUgd2FzIGEgbWVuYWNlLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmZvciB3aGVuIGhlIHdhcyBpbiBoaXMgcHJpbWUsIHRoZXkgc2FpZCwgaXQgd2FzIG5vdCBoaXMgYm9keSBub3IgaGlzIGFybSB0aGF0IGhhZCBiZWVuIGZvcm1pZGFibGUgdG8gdGhlIFJvbWFucywgYnV0IGhpcyBhYmlsaXR5IGFuZCBleHBlcmllbmNlIGNvdXBsZWQgd2l0aCBoaXMgaW5ncmFpbmVkIGJpdHRlcm5lc3MgYW5kIGhvc3RpbGl0eSwgYW5kIGZyb20gdGhlc2UgbmF1Z2h0IGlzIHN1YnRyYWN0ZWQgYnkgb2xkIGFnZSwgYnV0IHRoZSBuYXR1cmFsIGNoYXJhY3RlcmlzdGljcyByZW1haW4gdW5jaGFuZ2VkOiB3aGVyZWFzIGZvcnR1bmUgZG9lcyBub3QgcmVtYWluIHRoZSBzYW1lLCBidXQgY2hhbmdlcyBzaWRlcywgYW5kIHN1bW1vbnMgd2l0aCBob3BlIHRvIGZyZXNoIHVuZGVydGFraW5ncyB0aG9zZSB3aG9tIGhhdHJlZCBtYWtlcyBwZXJwZXR1YWwgZm9lcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdWJzZXF1ZW50IGV2ZW50cyB3ZXJlIHBlcmhhcHMgc3RpbGwgbW9yZSBhIGp1c3RpZmljYXRpb24gb2YgVGl0dXM7IGZvciBBcmlzdG9uaWN1cywgdGhlIHNvbiBvZiBhIGhhcnBpc3QncyBkYXVnaHRlciwgdXNlZCBoaXMgcmVwdXRlZCBjb25uZWN0aW9uIHdpdGggRXVtZW5lcyB0byBmaWxsIGFsbCBBc2lhIHdpdGggd2FycyBhbmQgcmViZWxsaW9ucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDEzMS0xMzAgQi5DLiA8L25vdGU+IGFuZCBNaXRocmlkYXRlcywgbm90d2l0aHN0YW5kaW5nIGhpcyBkZWZlYXRzIGJ5IFN1bGxhIGFuZCBGaW1icmlhIGFuZCBoaXMgZ3JlYXQgbG9zc2VzIGluIGFybWllcyBhbmQgZ2VuZXJhbHMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4OC04NCBCLkMuPC9ub3RlPiByb3NlIG9uY2UgbW9yZSB0byBiZSBhIGZvcm1pZGFibGUgYW50YWdvbmlzdCBvZiBMdWN1bGx1cyBieSBsYW5kIGFuZCBzZWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA3NC02NyBCLkMuIFRoZSBhcmd1bWVudCBpcyB0aGF0IGlmIHNvIGdyZWF0IGRhbmdlcnMgdG8gUm9tZSB3ZXJlIGxhdGVudCBpbiBBc2lhLCB0aGUgcHJlc2VuY2Ugb2YgSGFubmliYWwgdGhlcmUgd2FzIGEgbWVuYWNlLjwvbm90ZT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgbm90IGV2ZW4gSGFubmliYWwgd2FzIHJlZHVjZWQgdG8gYSBsb3dlciBsZXZlbCB0aGFuIENhaXVzIE1hcml1cy4gRm9yIEhhbm5pYmFsIGhhZCBhIGtpbmcgYXMgaGlzIGZyaWVuZCwgYW5kIGhpcyBkYXlzIGFzIHVzdWFsIHdlcmUgb2NjdXBpZWQgd2l0aCBzaGlwcyBhbmQgaG9yc2VzIGFuZCB0aGUgY2FyZSBvZiBzb2xkaWVyczsgd2hlcmVhcyBNYXJpdXMgaW4gaGlzIG1pc2ZvcnR1bmVzIHdhcyBhIGxhdWdoaW5nc3RvY2sgdG8gdGhlIFJvbWFucyBhcyBoZSB3YW5kZXJlZCBhYm91dCBhbmQgYmVnZ2VkIGhpcyB3YXkgaW4gQWZyaWNhLCB0aG91Z2ggYWZ0ZXIgYSBsaXR0bGUgd2hpbGUgaGUgd2FzIGluIFJvbWUgd2l0aCBoaXMgYXhlcyBhdCB0aGVpciBuZWNrcyBhbmQgaGlzIHJvZHMgYXQgdGhlaXIgYmFja3MsIGFuZCB0aGV5IHdlcmUgaHVtYmx5IGJlZ2dpbmcgaGlzIG1lcmN5LiBTbyB0cnVlIGlzIGl0IHRoYXQgbm90aGluZyBpbiB0aGUgcHJlc2VudCBpcyBlaXRoZXIgc21hbGwgb3IgZ3JlYXQgaW4gdmlldyBvZiB3aGF0IG1heSBoYXBwZW4gaW4gdGhlIGZ1dHVyZSwgYnV0IGNoYW5nZSwgbGlrZSBsaWZlLCBjYW4gb25seSBlbmQgd2l0aCBkZWF0aC4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uIHNvbWUgc2F5IHRoYXQgVGl0dXMgZGlkIG5vdCB0YWtlIHRoaXMgc3RlcCBvbiBoaXMgb3duIGFjY291bnQsIGJ1dCB0aGF0IGhlIHdhcyBzZW50IGFzIGFtYmFzc2Fkb3Igd2l0aCBMdWNpdXMgU2NpcGlvLCBhbmQgdGhlaXIgZW1iYXNzeSBoYWQgbm8gb3RoZXIgb2JqZWN0IHRoYW4gdGhlIGRlYXRoIG9mIEhhbm5pYmFsLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIG5vdCBldmVuIEhhbm5pYmFsIHdhcyByZWR1Y2VkIHRvIGEgbG93ZXIgbGV2ZWwgdGhhbiBDYWl1cyBNYXJpdXMuIEZvciBIYW5uaWJhbCBoYWQgYSBraW5nIGFzIGhpcyBmcmllbmQsIGFuZCBoaXMgZGF5cyBhcyB1c3VhbCB3ZXJlIG9jY3VwaWVkIHdpdGggc2hpcHMgYW5kIGhvcnNlcyBhbmQgdGhlIGNhcmUgb2Ygc29sZGllcnM7IHdoZXJlYXMgTWFyaXVzIGluIGhpcyBtaXNmb3J0dW5lcyB3YXMgYSBsYXVnaGluZ3N0b2NrIHRvIHRoZSBSb21hbnMgYXMgaGUgd2FuZGVyZWQgYWJvdXQgYW5kIGJlZ2dlZCBoaXMgd2F5IGluIEFmcmljYSwgdGhvdWdoIGFmdGVyIGEgbGl0dGxlIHdoaWxlIGhlIHdhcyBpbiBSb21lIHdpdGggaGlzIGF4ZXMgYXQgdGhlaXIgbmVja3MgYW5kIGhpcyByb2RzIGF0IHRoZWlyIGJhY2tzLCBhbmQgdGhleSB3ZXJlIGh1bWJseSBiZWdnaW5nIGhpcyBtZXJjeS4gU28gdHJ1ZSBpcyBpdCB0aGF0IG5vdGhpbmcgaW4gdGhlIHByZXNlbnQgaXMgZWl0aGVyIHNtYWxsIG9yIGdyZWF0IGluIHZpZXcgb2Ygd2hhdCBtYXkgaGFwcGVuIGluIHRoZSBmdXR1cmUsIGJ1dCBjaGFuZ2UsIGxpa2UgbGlmZSwgY2FuIG9ubHkgZW5kIHdpdGggZGVhdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
