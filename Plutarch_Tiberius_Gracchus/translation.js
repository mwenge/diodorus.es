var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYWZ0ZXIgdGhlIGRlYXRoPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxODMgQi5DLjwvbm90ZT4gb2YgdGhlIFNjaXBpbyB3aG8gY29ucXVlcmVkIEhhbm5pYmFsLCBhbHRob3VnaCBUaWJlcml1cyBoYWQgbm90IGJlZW4gaGlzIGZyaWVuZCwgYnV0IGFjdHVhbGx5IGF0IHZhcmlhbmNlIHdpdGggaGltLCBoZSB3YXMganVkZ2VkIHdvcnRoeSB0byB0YWtlIFNjaXBpbydzIGRhdWdodGVyIENvcm5lbGlhIGluIG1hcnJpYWdlLiBXZSBhcmUgdG9sZCwgbW9yZW92ZXIsIHRoYXQgaGUgb25jZSBjYXVnaHQgYSBwYWlyIG9mIHNlcnBlbnRzIG9uIGhpcyBiZWQsIGFuZCB0aGF0IHRoZSBzb290aHNheWVycywgYWZ0ZXIgY29uc2lkZXJpbmcgdGhlIHByb2RpZ3ksIGZvcmJhZGUgaGltIHRvIGtpbGwgYm90aCBzZXJwZW50cyBvciB0byBsZXQgYm90aCBnbywgYnV0IHRvIGRlY2lkZSB0aGUgZmF0ZSBvZiBvbmUgb3IgdGhlIG90aGVyIG9mIHRoZW0sIGRlY2xhcmluZyBhbHNvIHRoYXQgdGhlIG1hbGUgc2VycGVudCwgaWYga2lsbGVkLCB3b3VsZCBicmluZyBkZWF0aCB0byBUaWJlcml1cywgYW5kIHRoZSBmZW1hbGUsIHRvIENvcm5lbGlhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRpYmVyaXVzLCBhY2NvcmRpbmdseSwgd2hvIGxvdmVkIGhpcyB3aWZlLCBhbmQgdGhvdWdodCB0aGF0IHNpbmNlIHNoZSB3YXMgc3RpbGwgeW91bmcgYW5kIGhlIHdhcyBvbGRlciBpdCB3YXMgbW9yZSBmaXR0aW5nIHRoYXQgaGUgc2hvdWxkIGRpZSwga2lsbGVkIHRoZSBtYWxlIHNlcnBlbnQsIGJ1dCBsZXQgdGhlIGZlbWFsZSBnby4gQSBzaG9ydCB0aW1lIGFmdGVyd2FyZHMsIGFzIHRoZSBzdG9yeSBnb2VzLCBoZSBkaWVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGUgd2FzIGNvbnN1bCBmb3IgdGhlIHNlY29uZCB0aW1lIGluIDE2MyBCLkMuIFRoZSB5ZWFyIG9mIGhpcyBkZWF0aCBpcyB1bmtub3duLiBUaGlzIHN0b3J5IGlzIHRvbGQgYW5kIGNvbW1lbnRlZCBvbiBieSBDaWNlcm8gaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBEaXYuIDEuMTguIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGUgZGl2aW5hdGlvbmU8L3RpdGxlPiBpLiAxOCwgMzY8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIERpdi4gMi4yOSIgdmFsaWQ9InllcyI+aWkuIDI5LCA2MjwvYmlibD4uPC9ub3RlPiBsZWF2aW5nIENvcm5lbGlhIHdpdGggdHdlbHZlIGNoaWxkcmVuIGJ5IGhpbS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBEaXYuIDEuMTguIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGUgZGl2aW5hdGlvbmU8L3RpdGxlPiBpLiAxOCwgMzY8L2JpYmw+OyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSBkaXZpbmF0aW9uZTwvdGl0bGU+IGkuIDE4LCAzNjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gRGl2LiAyLjI5IiB2YWxpZD0ieWVzIj5paS4gMjksIDYyPC9iaWJsPi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Db3JuZWxpYSB0b29rIGNoYXJnZSBvZiB0aGUgY2hpbGRyZW4gYW5kIG9mIHRoZSBlc3RhdGUsIGFuZCBzaG93ZWQgaGVyc2VsZiBzbyBkaXNjcmVldCwgc28gZ29vZCBhIG1vdGhlciwgYW5kIHNvIG1hZ25hbmltb3VzLCB0aGF0IFRpYmVyaXVzIHdhcyB0aG91Z2h0IHRvIGhhdmUgbWFkZSBubyBiYWQgZGVjaXNpb24gd2hlbiBoZSBlbGVjdGVkIHRvIGRpZSBpbnN0ZWFkIG9mIHN1Y2ggYSB3b21hbi4gRm9yIHdoZW4gUHRvbGVteTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlByb2JhYmx5IFB0b2xlbXkgVkkuLCBzdXJuYW1lZCBQaGlsb21ldG9yLCBraW5nIG9mIEVneXB0IDE4MS0xNDYgQi5DLjwvbm90ZT4gdGhlIGtpbmcgb2ZmZXJlZCB0byBzaGFyZSBoaXMgY3Jvd24gd2l0aCBoZXIgYW5kIHNvdWdodCBoZXIgaGFuZCBpbiBtYXJyaWFnZSwgc2hlIHJlZnVzZWQgaGltLCBhbmQgcmVtYWluZWQgYSB3aWRvdy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyBzdGF0ZSBzaGUgbG9zdCBtb3N0IGlmIGhlciBjaGlsZHJlbiwgYnV0IHRocmVlIHN1cnZpdmVkOyBvbmUgZGF1Z2h0ZXIsIHdobyBtYXJyaWVkIFNjaXBpbyB0aGUgWW91bmdlciwgYW5kIHR3byBzb25zLCBUaWJlcml1cyBhbmQgQ2FpdXMsIHdob3NlIGxpdmVzIEkgbm93IHdyaXRlLiBUaGVzZSBzb25zIENvcm5lbGlhIHJlYXJlZCB3aXRoIHN1Y2ggc2NydXB1bG91cyBjYXJlIHRoYXQgYWx0aG91Z2ggY29uZmVzc2VkbHkgbm8gb3RoZXIgUm9tYW5zIHdlcmUgc28gd2VsbCBlbmRvd2VkIGJ5IG5hdHVyZSwgdGhleSB3ZXJlIHRob3VnaHQgdG8gb3dlIHRoZWlyIHZpcnR1ZXMgbW9yZSB0byBlZHVjYXRpb24gdGhhbiB0byBuYXR1cmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNvcm5lbGlhIHRvb2sgY2hhcmdlIG9mIHRoZSBjaGlsZHJlbiBhbmQgb2YgdGhlIGVzdGF0ZSwgYW5kIHNob3dlZCBoZXJzZWxmIHNvIGRpc2NyZWV0LCBzbyBnb29kIGEgbW90aGVyLCBhbmQgc28gbWFnbmFuaW1vdXMsIHRoYXQgVGliZXJpdXMgd2FzIHRob3VnaHQgdG8gaGF2ZSBtYWRlIG5vIGJhZCBkZWNpc2lvbiB3aGVuIGhlIGVsZWN0ZWQgdG8gZGllIGluc3RlYWQgb2Ygc3VjaCBhIHdvbWFuLiBGb3Igd2hlbiBQdG9sZW15PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qcm9iYWJseSBQdG9sZW15IFZJLiwgc3VybmFtZWQgUGhpbG9tZXRvciwga2luZyBvZiBFZ3lwdCAxODEtMTQ2IEIuQy48L25vdGU+IHRoZSBraW5nIG9mZmVyZWQgdG8gc2hhcmUgaGlzIGNyb3duIHdpdGggaGVyIGFuZCBzb3VnaHQgaGVyIGhhbmQgaW4gbWFycmlhZ2UsIHNoZSByZWZ1c2VkIGhpbSwgYW5kIHJlbWFpbmVkIGEgd2lkb3cuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgc3RhdGUgc2hlIGxvc3QgbW9zdCBpZiBoZXIgY2hpbGRyZW4sIGJ1dCB0aHJlZSBzdXJ2aXZlZDsgb25lIGRhdWdodGVyLCB3aG8gbWFycmllZCBTY2lwaW8gdGhlIFlvdW5nZXIsIGFuZCB0d28gc29ucywgVGliZXJpdXMgYW5kIENhaXVzLCB3aG9zZSBsaXZlcyBJIG5vdyB3cml0ZS4gVGhlc2Ugc29ucyBDb3JuZWxpYSByZWFyZWQgd2l0aCBzdWNoIHNjcnVwdWxvdXMgY2FyZSB0aGF0IGFsdGhvdWdoIGNvbmZlc3NlZGx5IG5vIG90aGVyIFJvbWFucyB3ZXJlIHNvIHdlbGwgZW5kb3dlZCBieSBuYXR1cmUsIHRoZXkgd2VyZSB0aG91Z2h0IHRvIG93ZSB0aGVpciB2aXJ0dWVzIG1vcmUgdG8gZWR1Y2F0aW9uIHRoYW4gdG8gbmF0dXJlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywganVzdCBhcywgaW4gc3BpdGUgb2YgdGhlIGxpa2VuZXNzIGJldHdlZW4gQ2FzdG9yIGFuZCBQb2xsdXggYXMgdGhleSBhcmUgcmVwcmVzZW50ZWQgaW4gc2N1bHB0dXJlIGFuZCBwYWludGluZywgdGhlcmUgaXMgYSBjZXJ0YWluIGRpZmZlcmVuY2Ugb2Ygc2hhcGUgYmV0d2VlbiB0aGUgYm94ZXIgYW5kIHRoZSBydW5uZXIsIHNvIGluIHRoZSBjYXNlIG9mIHRoZXNlIHlvdW5nIFJvbWFucywgYWxvbmcgd2l0aCB0aGVpciBzdHJvbmcgcmVzZW1ibGFuY2UgdG8gb25lIGFub3RoZXIgaW4gYnJhdmVyeSBhbmQgc2VsZi1jb21tYW5kLCBhcyB3ZWxsIGFzIGluIGxpYmVyYWxpdHksIGVsb3F1ZW5jZSwgYW5kIG1hZ25hbmltaXR5LCBpbiB0aGVpciBhY3Rpb25zIGFuZCBwb2xpdGljYWwgY2FyZWVycyBncmVhdCB1bmxpa2VuZXNzZXMgYmxvc3NvbWVkIG91dCwgYXMgaXQgd2VyZSwgYW5kIGNhbWUgdG8gbGlnaHQuIFRoZXJlZm9yZSBJIHRoaW5rIGl0IG5vdCBhbWlzcyB0byBzZXQgdGhlc2UgZm9ydGggYmVmb3JlIGdvaW5nIGZ1cnRoZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGp1c3QgYXMsIGluIHNwaXRlIG9mIHRoZSBsaWtlbmVzcyBiZXR3ZWVuIENhc3RvciBhbmQgUG9sbHV4IGFzIHRoZXkgYXJlIHJlcHJlc2VudGVkIGluIHNjdWxwdHVyZSBhbmQgcGFpbnRpbmcsIHRoZXJlIGlzIGEgY2VydGFpbiBkaWZmZXJlbmNlIG9mIHNoYXBlIGJldHdlZW4gdGhlIGJveGVyIGFuZCB0aGUgcnVubmVyLCBzbyBpbiB0aGUgY2FzZSBvZiB0aGVzZSB5b3VuZyBSb21hbnMsIGFsb25nIHdpdGggdGhlaXIgc3Ryb25nIHJlc2VtYmxhbmNlIHRvIG9uZSBhbm90aGVyIGluIGJyYXZlcnkgYW5kIHNlbGYtY29tbWFuZCwgYXMgd2VsbCBhcyBpbiBsaWJlcmFsaXR5LCBlbG9xdWVuY2UsIGFuZCBtYWduYW5pbWl0eSwgaW4gdGhlaXIgYWN0aW9ucyBhbmQgcG9saXRpY2FsIGNhcmVlcnMgZ3JlYXQgdW5saWtlbmVzc2VzIGJsb3Nzb21lZCBvdXQsIGFzIGl0IHdlcmUsIGFuZCBjYW1lIHRvIGxpZ2h0LiBUaGVyZWZvcmUgSSB0aGluayBpdCBub3QgYW1pc3MgdG8gc2V0IHRoZXNlIGZvcnRoIGJlZm9yZSBnb2luZyBmdXJ0aGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsIHRoZW4sIGFzIHJlZ2FyZHMgY2FzdCBvZiBmZWF0dXJlcyBhbmQgbG9vayBhbmQgYmVhcmluZywgVGliZXJpdXMgd2FzIGdlbnRsZSBhbmQgc2VkYXRlLCB3aGlsZSBDYWl1cyB3YXMgaGlnaC1zdHJ1bmcgYW5kIHZlaGVtZW50LCBzbyB0aGF0IGV2ZW4gd2hlbiBoYXJhbmd1aW5nIHRoZSBwZW9wbGUgdGhlIG9uZSBzdG9vZCBjb21wb3NlZGx5IGluIG9uZSBzcG90LCB3aGlsZSB0aGUgb3RoZXIgd2FzIHRoZSBmaXJzdCBSb21hbiB0byB3YWxrIGFib3V0IHVwb24gdGhlIHJvc3RyYSBhbmQgcHVsbCBoaXMgdG9nYSBvZmYgaGlzIHNob3VsZGVyIGFzIGhlIHNwb2tlLiBTbyBDbGVvbiB0aGUgQXRoZW5pYW4gaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGZpcnN0IG9mIHRoZSBwb3B1bGFyIG9yYXRvcnMgdG8gc3RyaXAgYXdheSBoaXMgbWFudGxlIGFuZCBzbWl0ZSBoaXMgdGhpZ2guPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTmljLiA4LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TmljaWFzPC90aXRsZT4sIHZpaWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIHNlY29uZCBwbGFjZSwgdGhlIHNwZWVjaCBvZiBDYWl1cyB3YXMgYXdlLWluc3BpcmluZyBhbmQgcGFzc2lvbmF0ZSB0byBleGFnZ2VyYXRpb24sIHdoaWxlIHRoYXQgb2YgVGliZXJpdXMgd2FzIG1vcmUgYWdyZWVhYmxlIGFuZCBtb3JlIGNvbmR1Y2l2ZSB0byBwaXR5LiBUaGUgc3R5bGUgYWxzbyBvZiBUaWJlcml1cyB3YXMgcHVyZSBhbmQgZWxhYm9yYXRlZCB0byBhIG5pY2V0eSwgd2hpbGUgdGhhdCBvZiBDYWl1cyB3YXMgcGVyc3Vhc2l2ZSBhbmQgb3JuYXRlLiBTbyBhbHNvIGFzIHJlZ2FyZHMgdGhlaXIgdGFibGUgYW5kIG1vZGUgb2YgbGlmZSwgVGliZXJpdXMgd2FzIHNpbXBsZSBhbmQgcGxhaW4gd2hpbGUgQ2FpdXMsIGFsdGhvdWdoIHRlbXBlcmF0ZSBhbmQgYXVzdGVyZSBhcyBjb21wYXJlZCB3aXRoIG90aGVycywgaW4gY29udHJhc3Qgd2l0aCBoaXMgYnJvdGhlciB3YXMgb3N0ZW50YXRpb3VzIGFuZCBmYXN0aWRpb3VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZW5jZSBtZW4gbGlrZSBEcnVzdXMgZm91bmQgZmF1bHQgd2l0aCBoaW0gYmVjYXVzZSBoZSBib3VnaHQgc2lsdmVyIGRvbHBoaW5zIGF0IHR3ZWx2ZSBodW5kcmVkIGFuZCBmaWZ0eSBkcmFjaG1hcyB0aGUgcG91bmQuIEFnYWluLCB0aGVpciB0ZW1wZXJzIHdlcmUgbm8gbGVzcyBkaWZmZXJlbnQgdGhhbiB0aGVpciBzcGVlY2guIFRpYmVyaXVzIHdhcyByZWFzb25hYmxlIGFuZCBnZW50bGUsIHdoaWxlIENhaXVzIHdhcyBoYXJzaCBhbmQgZmllcnksIHNvIHRoYXQgYWdhaW5zdCBoaXMgYmV0dGVyIGp1ZGdtZW50IGhlIHdhcyBvZnRlbiBjYXJyaWVkIGF3YXkgYnkgYW5nZXIgYXMgaGUgc3Bva2UsIHJhaXNpbmcgaGlzIHZvaWNlIHRvIGEgaGlnaCBwaXRjaCBhbmQgdXR0ZXJpbmcgYWJ1c2UgYW5kIGxvc2luZyB0aGUgdGhyZWFkIG9mIGhpcyBkaXNjb3Vyc2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgdG8gZ3VhcmQgYWdhaW5zdCBzdWNoIGRpZ3Jlc3Npb25zLCBoZSBlbXBsb3llZCBhbiBpbnRlbGxpZ2VudCBzZXJ2YW50LCBMaWNpbml1cywgd2hvIHN0b29kIGJlaGluZCBoaW0gd2hlbiBoZSB3YXMgc3BlYWtpbmcsIHdpdGggYSBzb3VuZGluZyBpbnN0cnVtZW50IGZvciBnaXZpbmcgdGhlIHRvbmVzIG9mIHRoZSB2b2ljZSB0aGVpciBwaXRjaC4gV2hlbmV2ZXIgdGhpcyBzZXJ2YW50IG5vdGljZWQgdGhhdCB0aGUgdm9pY2Ugb2YgQ2FpdXMgd2FzIGdldHRpbmcgaGFyc2ggYW5kIGJyb2tlbiB3aXRoIGFuZ2VyLCBoZSB3b3VsZCBnaXZlIG91dCBhIHNvZnQga2V5LW5vdGUsIG9uIGhlYXJpbmcgd2hpY2ggQ2FpdXMgd291bGQgYXQgb25jZSByZW1pdCB0aGUgdmVoZW1lbmNlIG9mIGhpcyBwYXNzaW9uIGFuZCBvZiBoaXMgc3BlZWNoLCBncm93IGdlbnRsZSwgYW5kIHNob3cgaGltc2VsZiBlYXN5IHRvIHJlY2FsbC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBmaXJzdCBwbGFjZSwgdGhlbiwgYXMgcmVnYXJkcyBjYXN0IG9mIGZlYXR1cmVzIGFuZCBsb29rIGFuZCBiZWFyaW5nLCBUaWJlcml1cyB3YXMgZ2VudGxlIGFuZCBzZWRhdGUsIHdoaWxlIENhaXVzIHdhcyBoaWdoLXN0cnVuZyBhbmQgdmVoZW1lbnQsIHNvIHRoYXQgZXZlbiB3aGVuIGhhcmFuZ3VpbmcgdGhlIHBlb3BsZSB0aGUgb25lIHN0b29kIGNvbXBvc2VkbHkgaW4gb25lIHNwb3QsIHdoaWxlIHRoZSBvdGhlciB3YXMgdGhlIGZpcnN0IFJvbWFuIHRvIHdhbGsgYWJvdXQgdXBvbiB0aGUgcm9zdHJhIGFuZCBwdWxsIGhpcyB0b2dhIG9mZiBoaXMgc2hvdWxkZXIgYXMgaGUgc3Bva2UuIFNvIENsZW9uIHRoZSBBdGhlbmlhbiBpcyBzYWlkIHRvIGhhdmUgYmVlbiB0aGUgZmlyc3Qgb2YgdGhlIHBvcHVsYXIgb3JhdG9ycyB0byBzdHJpcCBhd2F5IGhpcyBtYW50bGUgYW5kIHNtaXRlIGhpcyB0aGlnaC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTmljLiA4LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgdmlpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE5pYy4gOC4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmljaWFzPC90aXRsZT4sIHZpaWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgdmlpaS4gMy48L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIHRoZSBzcGVlY2ggb2YgQ2FpdXMgd2FzIGF3ZS1pbnNwaXJpbmcgYW5kIHBhc3Npb25hdGUgdG8gZXhhZ2dlcmF0aW9uLCB3aGlsZSB0aGF0IG9mIFRpYmVyaXVzIHdhcyBtb3JlIGFncmVlYWJsZSBhbmQgbW9yZSBjb25kdWNpdmUgdG8gcGl0eS4gVGhlIHN0eWxlIGFsc28gb2YgVGliZXJpdXMgd2FzIHB1cmUgYW5kIGVsYWJvcmF0ZWQgdG8gYSBuaWNldHksIHdoaWxlIHRoYXQgb2YgQ2FpdXMgd2FzIHBlcnN1YXNpdmUgYW5kIG9ybmF0ZS4gU28gYWxzbyBhcyByZWdhcmRzIHRoZWlyIHRhYmxlIGFuZCBtb2RlIG9mIGxpZmUsIFRpYmVyaXVzIHdhcyBzaW1wbGUgYW5kIHBsYWluIHdoaWxlIENhaXVzLCBhbHRob3VnaCB0ZW1wZXJhdGUgYW5kIGF1c3RlcmUgYXMgY29tcGFyZWQgd2l0aCBvdGhlcnMsIGluIGNvbnRyYXN0IHdpdGggaGlzIGJyb3RoZXIgd2FzIG9zdGVudGF0aW91cyBhbmQgZmFzdGlkaW91cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlbmNlIG1lbiBsaWtlIERydXN1cyBmb3VuZCBmYXVsdCB3aXRoIGhpbSBiZWNhdXNlIGhlIGJvdWdodCBzaWx2ZXIgZG9scGhpbnMgYXQgdHdlbHZlIGh1bmRyZWQgYW5kIGZpZnR5IGRyYWNobWFzIHRoZSBwb3VuZC4gQWdhaW4sIHRoZWlyIHRlbXBlcnMgd2VyZSBubyBsZXNzIGRpZmZlcmVudCB0aGFuIHRoZWlyIHNwZWVjaC4gVGliZXJpdXMgd2FzIHJlYXNvbmFibGUgYW5kIGdlbnRsZSwgd2hpbGUgQ2FpdXMgd2FzIGhhcnNoIGFuZCBmaWVyeSwgc28gdGhhdCBhZ2FpbnN0IGhpcyBiZXR0ZXIganVkZ21lbnQgaGUgd2FzIG9mdGVuIGNhcnJpZWQgYXdheSBieSBhbmdlciBhcyBoZSBzcG9rZSwgcmFpc2luZyBoaXMgdm9pY2UgdG8gYSBoaWdoIHBpdGNoIGFuZCB1dHRlcmluZyBhYnVzZSBhbmQgbG9zaW5nIHRoZSB0aHJlYWQgb2YgaGlzIGRpc2NvdXJzZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgdG8gZ3VhcmQgYWdhaW5zdCBzdWNoIGRpZ3Jlc3Npb25zLCBoZSBlbXBsb3llZCBhbiBpbnRlbGxpZ2VudCBzZXJ2YW50LCBMaWNpbml1cywgd2hvIHN0b29kIGJlaGluZCBoaW0gd2hlbiBoZSB3YXMgc3BlYWtpbmcsIHdpdGggYSBzb3VuZGluZyBpbnN0cnVtZW50IGZvciBnaXZpbmcgdGhlIHRvbmVzIG9mIHRoZSB2b2ljZSB0aGVpciBwaXRjaC4gV2hlbmV2ZXIgdGhpcyBzZXJ2YW50IG5vdGljZWQgdGhhdCB0aGUgdm9pY2Ugb2YgQ2FpdXMgd2FzIGdldHRpbmcgaGFyc2ggYW5kIGJyb2tlbiB3aXRoIGFuZ2VyLCBoZSB3b3VsZCBnaXZlIG91dCBhIHNvZnQga2V5LW5vdGUsIG9uIGhlYXJpbmcgd2hpY2ggQ2FpdXMgd291bGQgYXQgb25jZSByZW1pdCB0aGUgdmVoZW1lbmNlIG9mIGhpcyBwYXNzaW9uIGFuZCBvZiBoaXMgc3BlZWNoLCBncm93IGdlbnRsZSwgYW5kIHNob3cgaGltc2VsZiBlYXN5IHRvIHJlY2FsbC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZGlmZmVyZW5jZXMgYmV0d2VlbiB0aGVtLCB0aGVuLCB3ZXJlIG9mIHRoaXMgbmF0dXJlOyBidXQgYXMgcmVnYXJkcyBicmF2ZXJ5IGluIHRoZSBmYWNlIG9mIHRoZSBlbmVteSwganVzdCBkZWFsaW5ncyB3aXRoIHN1YmplY3QgcGVvcGxlcywgc2NydXB1bG91cyBmaWRlbGl0eSBpbiBwdWJsaWMgb2ZmaWNlLCBhbmQgcmVzdHJhaW50IGluIHBsZWFzdXJhYmxlIGluZHVsZ2VuY2UsIHRoZXkgd2VyZSBleGFjdGx5IGFsaWtlLiBUaWJlcml1cywgaG93ZXZlciwgd2FzIG5pbmUgeWVhcnMgb2xkZXIgdGhhbiBoaXMgYnJvdGhlcjsgYW5kIHRoaXMgc2V0IGEgZGlmZmVyZW50IHBlcmlvZCBmb3IgdGhlIHBvbGl0aWNhbCBhY3Rpdml0eSBvZiBlYWNoLCBhbmQgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2Ugdml0aWF0ZWQgdGhlaXIgdW5kZXJ0YWtpbmdzLiBUaGV5IGRpZCBub3QgcmlzZSB0byBlbWluZW5jZSBhdCB0aGUgc2FtZSB0aW1lLCBhbmQgc28gZGlkIG5vdCBjb21iaW5lIHRoZWlyIHBvd2VycyBpbnRvIG9uZS4gU3VjaCBhbiB1bml0ZWQgcG93ZXIgd291bGQgaGF2ZSBwcm92ZWQgaXJyZXNpc3RpYmx5IGdyZWF0LiBXZSBtdXN0IHRoZXJlZm9yZSBnaXZlIGFuIGFjY291bnQgb2YgZWFjaCBieSBoaW1zZWxmIGFuZCBvZiB0aGUgZWxkZXIgZmlyc3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZGlmZmVyZW5jZXMgYmV0d2VlbiB0aGVtLCB0aGVuLCB3ZXJlIG9mIHRoaXMgbmF0dXJlOyBidXQgYXMgcmVnYXJkcyBicmF2ZXJ5IGluIHRoZSBmYWNlIG9mIHRoZSBlbmVteSwganVzdCBkZWFsaW5ncyB3aXRoIHN1YmplY3QgcGVvcGxlcywgc2NydXB1bG91cyBmaWRlbGl0eSBpbiBwdWJsaWMgb2ZmaWNlLCBhbmQgcmVzdHJhaW50IGluIHBsZWFzdXJhYmxlIGluZHVsZ2VuY2UsIHRoZXkgd2VyZSBleGFjdGx5IGFsaWtlLiBUaWJlcml1cywgaG93ZXZlciwgd2FzIG5pbmUgeWVhcnMgb2xkZXIgdGhhbiBoaXMgYnJvdGhlcjsgYW5kIHRoaXMgc2V0IGEgZGlmZmVyZW50IHBlcmlvZCBmb3IgdGhlIHBvbGl0aWNhbCBhY3Rpdml0eSBvZiBlYWNoLCBhbmQgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2Ugdml0aWF0ZWQgdGhlaXIgdW5kZXJ0YWtpbmdzLiBUaGV5IGRpZCBub3QgcmlzZSB0byBlbWluZW5jZSBhdCB0aGUgc2FtZSB0aW1lLCBhbmQgc28gZGlkIG5vdCBjb21iaW5lIHRoZWlyIHBvd2VycyBpbnRvIG9uZS4gU3VjaCBhbiB1bml0ZWQgcG93ZXIgd291bGQgaGF2ZSBwcm92ZWQgaXJyZXNpc3RpYmx5IGdyZWF0LiBXZSBtdXN0IHRoZXJlZm9yZSBnaXZlIGFuIGFjY291bnQgb2YgZWFjaCBieSBoaW1zZWxmIGFuZCBvZiB0aGUgZWxkZXIgZmlyc3QuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGliZXJpdXMsIHRoZW4sIGFzIHNvb24gYXMgaGUgZ290IHBhc3QgYm95aG9vZCwgd2FzIHNvIHdpZGVseSBrbm93biBhcyB0byBiZSB0aG91Z2h0IHdvcnRoeSBvZiBhIHBsYWNlIGFtb25nIHRoZSBwcmllc3RzIGNhbGxlZCBBdWd1cnM7IGFuZCB0aGlzIHdhcyBkdWUgdG8gaGlzIHZpcnR1ZXMgcmF0aGVyIHRoYW4gdG8gaGlzIGV4Y2VsbGVudCBiaXJ0aCwgYXMgd2FzIGNsZWFybHkgc2hvd24gYnkgQXBwaXVzIENsYXVkaXVzLiBGb3IgQXBwaXVzLCB3aG8gaGFkIGJlZW4gY29uc3VsIGFuZCBjZW5zb3IsIGhhZCBiZWVuIG1hZGUgRGVhbiBvZiB0aGUgUm9tYW4gc2VuYXRlPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5QcmluY2VwcyBTZW5hdHVzPC9mb3JlaWduPi48L25vdGU+IGJ5IHZpcnR1ZSBvZiBoaXMgZGlnbml0eSwgYW5kIGluIGxvZnRpbmVzcyBvZiBzcGlyaXQgZmFyIHN1cnBhc3NlZCBoaXMgY29udGVtcG9yYXJpZXMsIGF0IGEgYmFucXVldCBvZiB0aGUgYXVndXJzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHJlc3VtYWJseSBhdCB0aGUgaW5kdWN0aW9uIG9mIFRpYmVyaXVzIGludG8gb2ZmaWNlLjwvbm90ZT4gYWRkcmVzc2VkIFRpYmVyaXVzIHdpdGggd29yZHMgb2YgZnJpZW5kc2hpcCwgYW5kIGFza2VkIGhpbSB0byBiZWNvbWUgdGhlIGh1c2JhbmQgb2YgaGlzIGRhdWdodGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaWJlcml1cyBnbGFkbHkgYWNjZXB0ZWQgdGhlIGludml0YXRpb24sIGFuZCB0aGUgYmV0cm90aGFsIHdhcyB0aHVzIGFycmFuZ2VkLCBhbmQgd2hlbiBBcHBpdXMgcmV0dXJuZWQgaG9tZSwgZnJvbSB0aGUgZG9vcndheSB3aGVyZSBoZSBzdG9vZCBoZSBjYWxsZWQgaGlzIHdpZmUgYW5kIGNyaWVkIGluIGEgbG91ZCB2b2ljZTogCjxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFudGlzdGlhLCBJIGhhdmUgYmV0cm90aGVkIG91ciBDbGF1ZGlhLjwvcT4gQW5kIEFudGlzdGlhLCBpbiBhbWF6ZW1lbnQsIHNhaWQ6IAo8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHkgc28gZWFnZXIsIG9yIHdoeSBzbyBmYXN0PyBJZiB0aG91IGhhZHN0IG9ubHkgZm91bmQgVGliZXJpdXMgR3JhY2NodXMgZm9yIGJldHJvdGhhbCB0byBoZXIhPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgYW0gYXdhcmUgdGhhdCBzb21lPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM4LjU3IiB2YWxpZD0ieWVzIj5MaXZ5LiB4eHh2aWlpLiA1Ny48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gcmVmZXIgdGhpcyBzdG9yeSB0byBUaWJlcml1cyB0aGUgZmF0aGVyIG9mIHRoZSBHcmFjY2hpIGFuZCBTY2lwaW8gQWZyaWNhbnVzIE1ham9yLCBidXQgdGhlIG1ham9yaXR5IG9mIHdyaXRlcnMgdGVsbCBpdCBhcyBJIGRvLCBhbmQgUG9seWJpdXMgc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxiLiAzMi4xMyIgdmFsaWQ9InllcyI+UG9seWJpdXMsIHh4eGlpLiAxMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBhZnRlciB0aGUgZGVhdGggb2YgU2NpcGlvIEFmcmljYW51cyB0aGUgcmVsYXRpdmVzIG9mIENvcm5lbGlhIGNob3NlIG91dCBUaWJlcml1cyBpbiBwcmVmZXJlbmNlIHRvIGFsbCBvdGhlcnMgYW5kIGdhdmUgaGVyIHRvIGhpbSwgYXMgb25lIHdobyBoYWQgYmVlbiBsZWZ0IGJ5IGhlciBmYXRoZXIgdW5hZmZpYW5jZWQgYW5kIHVuYmV0cm90aGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaWJlcml1cywgdGhlbiwgYXMgc29vbiBhcyBoZSBnb3QgcGFzdCBib3lob29kLCB3YXMgc28gd2lkZWx5IGtub3duIGFzIHRvIGJlIHRob3VnaHQgd29ydGh5IG9mIGEgcGxhY2UgYW1vbmcgdGhlIHByaWVzdHMgY2FsbGVkIEF1Z3VyczsgYW5kIHRoaXMgd2FzIGR1ZSB0byBoaXMgdmlydHVlcyByYXRoZXIgdGhhbiB0byBoaXMgZXhjZWxsZW50IGJpcnRoLCBhcyB3YXMgY2xlYXJseSBzaG93biBieSBBcHBpdXMgQ2xhdWRpdXMuIEZvciBBcHBpdXMsIHdobyBoYWQgYmVlbiBjb25zdWwgYW5kIGNlbnNvciwgaGFkIGJlZW4gbWFkZSBEZWFuIG9mIHRoZSBSb21hbiBzZW5hdGU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5QcmluY2VwcyBTZW5hdHVzPC9mb3JlaWduPi48L25vdGU+IGJ5IHZpcnR1ZSBvZiBoaXMgZGlnbml0eSwgYW5kIGluIGxvZnRpbmVzcyBvZiBzcGlyaXQgZmFyIHN1cnBhc3NlZCBoaXMgY29udGVtcG9yYXJpZXMsIGF0IGEgYmFucXVldCBvZiB0aGUgYXVndXJzPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UHJpbmNlcHMgU2VuYXR1czwvZm9yZWlnbj4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QcmVzdW1hYmx5IGF0IHRoZSBpbmR1Y3Rpb24gb2YgVGliZXJpdXMgaW50byBvZmZpY2UuPC9ub3RlPiBhZGRyZXNzZWQgVGliZXJpdXMgd2l0aCB3b3JkcyBvZiBmcmllbmRzaGlwLCBhbmQgYXNrZWQgaGltIHRvIGJlY29tZSB0aGUgaHVzYmFuZCBvZiBoaXMgZGF1Z2h0ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRpYmVyaXVzIGdsYWRseSBhY2NlcHRlZCB0aGUgaW52aXRhdGlvbiwgYW5kIHRoZSBiZXRyb3RoYWwgd2FzIHRodXMgYXJyYW5nZWQsIGFuZCB3aGVuIEFwcGl1cyByZXR1cm5lZCBob21lLCBmcm9tIHRoZSBkb29yd2F5IHdoZXJlIGhlIHN0b29kIGhlIGNhbGxlZCBoaXMgd2lmZSBhbmQgY3JpZWQgaW4gYSBsb3VkIHZvaWNlOiAKPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbnRpc3RpYSwgSSBoYXZlIGJldHJvdGhlZCBvdXIgQ2xhdWRpYS48L3E+IEFuZCBBbnRpc3RpYSwgaW4gYW1hemVtZW50LCBzYWlkOiAKPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHkgc28gZWFnZXIsIG9yIHdoeSBzbyBmYXN0PyBJZiB0aG91IGhhZHN0IG9ubHkgZm91bmQgVGliZXJpdXMgR3JhY2NodXMgZm9yIGJldHJvdGhhbCB0byBoZXIhPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgYW0gYXdhcmUgdGhhdCBzb21lPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzOC41NyIgdmFsaWQ9InllcyI+TGl2eS4geHh4dmlpaS4gNTcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHJlZmVyIHRoaXMgc3RvcnkgdG8gVGliZXJpdXMgdGhlIGZhdGhlciBvZiB0aGUgR3JhY2NoaSBhbmQgU2NpcGlvIEFmcmljYW51cyBNYWpvciwgYnV0IHRoZSBtYWpvcml0eSBvZiB3cml0ZXJzIHRlbGwgaXQgYXMgSSBkbywgYW5kIFBvbHliaXVzIHNheXM8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM4LjU3IiB2YWxpZD0ieWVzIj5MaXZ5LiB4eHh2aWlpLiA1Ny48L2JpYmw+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMzIuMTMiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzLCB4eHhpaS4gMTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoYXQgYWZ0ZXIgdGhlIGRlYXRoIG9mIFNjaXBpbyBBZnJpY2FudXMgdGhlIHJlbGF0aXZlcyBvZiBDb3JuZWxpYSBjaG9zZSBvdXQgVGliZXJpdXMgaW4gcHJlZmVyZW5jZSB0byBhbGwgb3RoZXJzIGFuZCBnYXZlIGhlciB0byBoaW0sIGFzIG9uZSB3aG8gaGFkIGJlZW4gbGVmdCBieSBoZXIgZmF0aGVyIHVuYWZmaWFuY2VkIGFuZCB1bmJldHJvdGhlZC4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAzMi4xMyIgdmFsaWQ9InllcyI+UG9seWJpdXMsIHh4eGlpLiAxMy48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB5b3VuZ2VyIFRpYmVyaXVzLCBhY2NvcmRpbmdseSwgc2VydmluZyBpbiBBZnJpY2EgdW5kZXIgdGhlIHlvdW5nZXIgU2NpcGlvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBjYW1wYWlnbiBvZiAxNDYgQi5DLiwgd2hpY2ggZW5kZWQgd2l0aCB0aGUgZGVzdHJ1Y3Rpb24gb2YgQ2FydGhhZ2UuPC9ub3RlPiB3aG8gaGFkIG1hcnJpZWQgaGlzIHNpc3RlciwgYW5kIHNoYXJpbmcgaGlzIGNvbW1hbmRlcidzIHRlbnQsIHNvb24gbGVhcm5lZCB0byB1bmRlcnN0YW5kIHRoYXQgY29tbWFuZGVyJ3MgbmF0dXJlICh3aGljaCBwcm9kdWNlZCBtYW55IGdyZWF0IGluY2VudGl2ZXMgdG93YXJkcyB0aGUgZW11bGF0aW9uIG9mIHZpcnR1ZSBhbmQgaXRzIGltaXRhdGlvbiBpbiBhY3Rpb24pLCBhbmQgc29vbiBsZWQgYWxsIHRoZSB5b3VuZyBtZW4gaW4gZGlzY2lwbGluZSBhbmQgYnJhdmVyeTsgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+eWVzLCBoZSB3YXMgZmlyc3QgdG8gc2NhbGUgdGhlIGVuZW1pZXMnIHdhbGwsIGFzIEZhbm5pdXMgc2F5cywgd2hvIHdyaXRlcyBhbHNvIHRoYXQgaGUgaGltc2VsZiBzY2FsZWQgdGhlIHdhbGwgd2l0aCBUaWJlcml1cyBhbmQgc2hhcmVkIGluIHRoYXQgZXhwbG9pdC4gV2hpbGUgaGUgcmVtYWluZWQgd2l0aCB0aGUgYXJteSBUaWJlcml1cyB3YXMgdGhlIG9iamVjdCBvZiBtdWNoIGdvb2Qgd2lsbCwgYW5kIG9uIGxlYXZpbmcgaXQgaGUgd2FzIGdyZWF0bHkgbWlzc2VkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB5b3VuZ2VyIFRpYmVyaXVzLCBhY2NvcmRpbmdseSwgc2VydmluZyBpbiBBZnJpY2EgdW5kZXIgdGhlIHlvdW5nZXIgU2NpcGlvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIGNhbXBhaWduIG9mIDE0NiBCLkMuLCB3aGljaCBlbmRlZCB3aXRoIHRoZSBkZXN0cnVjdGlvbiBvZiBDYXJ0aGFnZS48L25vdGU+IHdobyBoYWQgbWFycmllZCBoaXMgc2lzdGVyLCBhbmQgc2hhcmluZyBoaXMgY29tbWFuZGVyJ3MgdGVudCwgc29vbiBsZWFybmVkIHRvIHVuZGVyc3RhbmQgdGhhdCBjb21tYW5kZXIncyBuYXR1cmUgKHdoaWNoIHByb2R1Y2VkIG1hbnkgZ3JlYXQgaW5jZW50aXZlcyB0b3dhcmRzIHRoZSBlbXVsYXRpb24gb2YgdmlydHVlIGFuZCBpdHMgaW1pdGF0aW9uIGluIGFjdGlvbiksIGFuZCBzb29uIGxlZCBhbGwgdGhlIHlvdW5nIG1lbiBpbiBkaXNjaXBsaW5lIGFuZCBicmF2ZXJ5OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnllcywgaGUgd2FzIGZpcnN0IHRvIHNjYWxlIHRoZSBlbmVtaWVzJyB3YWxsLCBhcyBGYW5uaXVzIHNheXMsIHdobyB3cml0ZXMgYWxzbyB0aGF0IGhlIGhpbXNlbGYgc2NhbGVkIHRoZSB3YWxsIHdpdGggVGliZXJpdXMgYW5kIHNoYXJlZCBpbiB0aGF0IGV4cGxvaXQuIFdoaWxlIGhlIHJlbWFpbmVkIHdpdGggdGhlIGFybXkgVGliZXJpdXMgd2FzIHRoZSBvYmplY3Qgb2YgbXVjaCBnb29kIHdpbGwsIGFuZCBvbiBsZWF2aW5nIGl0IGhlIHdhcyBncmVhdGx5IG1pc3NlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIGNhbXBhaWduIGhlIHdhcyBlbGVjdGVkIHF1YWVzdG9yLCBhbmQgaGFkIHRoZSBmb3J0dW5lIHRvIHNlcnZlIGluIGEgd2FyIGFnYWluc3QgTnVtYW50aWEgdW5kZXIgdGhlIGNvbnN1bCBDYWl1cyBNYW5jaW51cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Db25zdWwgaW4gMTM3IEIuQy48L25vdGU+IHdobyB3YXMgbm90IGJhZCBhcyBhIG1hbiwgYnV0IG1vc3QgdW5mb3J0dW5hdGUgb2YgdGhlIFJvbWFucyBhcyBhIGdlbmVyYWwuIFRoZXJlZm9yZSBpbiB0aGUgbWlkc3Qgb2YgdW5leHBlY3RlZCBtaXNmb3J0dW5lcyBhbmQgYWR2ZXJzZSBjaXJjdW1zdGFuY2VzIG5vdCBvbmx5IGRpZCB0aGUgc2FnYWNpdHkgYW5kIGJyYXZlcnkgb2YgVGliZXJpdXMgc2hpbmUgZm9ydGggYWxsIHRoZSBtb3JlLCBidXQgYWxzb1ttZGFzaCBdYW5kIHRoaXMgd2FzIGFzdG9uaXNoaW5nW21kYXNoIF10aGUgZ3JlYXQgcmVzcGVjdCBhbmQgaG9ub3VyIGluIHdoaWNoIGhlIGhlbGQgaGlzIGNvbW1hbmRlciwgd2hvLCB1bmRlciB0aGUgcHJlc3N1cmUgb2YgZGlzYXN0ZXJzLCBmb3Jnb3QgZXZlbiB0aGF0IGhlIHdhcyBhIGdlbmVyYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciBoZSBoYWQgYmVlbiBkZWZlYXRlZCBpbiBncmVhdCBiYXR0bGVzLCBoZSBhdHRlbXB0ZWQgdG8gYWJhbmRvbiBoaXMgY2FtcCBhbmQgd2l0aGRyYXcgaGlzIGZvcmNlcyBieSBuaWdodDsgYnV0IHRoZSBOdW1hbnRpbmVzIGJlY2FtZSBhd2FyZSBvZiBoaXMgYXR0ZW1wdCBhbmQgcHJvbXB0bHkgc2VpemVkIGhpcyBjYW1wLiBUaGVuIHRoZXkgZmVsbCB1cG9uIGhpcyBtZW4gYXMgdGhleSBmbGVkLCBzbGV3IHRob3NlIHdobyB3ZXJlIGluIHRoZSByZWFyLCBlbmNvbXBhc3NlZCBoaXMgd2hvbGUgYXJteSwgYW5kIGNyb3dkZWQgdGhlbSBpbnRvIHJlZ2lvbnMgdGhhdCB3ZXJlIGZ1bGwgb2YgZGlmZmljdWx0aWVzIGFuZCBhZmZvcmRlZCBubyBlc2NhcGUuIE1hbmNpbnVzLCBkZXNwYWlyaW5nIG9mIGZvcmNpbmcgaGlzIHdheSB0byBzYWZldHksIHNlbnQgaGVyYWxkcyB0byB0aGUgZW5lbXkgcHJvcG9zaW5nIGEgdHJ1Y2UgYW5kIHRlcm1zIG9mIHBlYWNlOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5idXQgdGhlIGVuZW15IGRlY2xhcmVkIHRoYXQgdGhleSBoYWQgY29uZmlkZW5jZSBpbiBubyBSb21hbiBzYXZlIG9ubHkgVGliZXJpdXMsIGFuZCBvcmRlcmVkIHRoYXQgaGUgc2hvdWxkIGJlIHNlbnQgdG8gdGhlbS4gVGhleSBoYWQgdGhpcyBmZWVsaW5nIHRvd2FyZHMgdGhlIHlvdW5nIG1hbiBub3Qgb25seSBvbiBoaXMgb3duIGFjY291bnQgKGZvciBoZSB3YXMgaGVsZCBpbiB2ZXJ5IGhpZ2ggZXN0ZWVtIGJ5IHRoZSBOdW1hbnRpbmUgc29sZGllcnkpLCBidXQgYWxzbyBiZWNhdXNlIHRoZXkgcmVtZW1iZXJlZCBoaXMgZmF0aGVyIFRpYmVyaXVzLCB3aG8gd2FnZWQgd2FyIGFnYWluc3QgdGhlIFNwYW5pYXJkcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxODAtMTc5IEIuQy48L25vdGU+IGFuZCBzdWJkdWVkIG1hbnkgb2YgdGhlbSwgYnV0IG1hZGUgYSBwZWFjZSB3aXRoIHRoZSBOdW1hbnRpbmVzLCB0byB0aGUgb2JzZXJ2YW5jZSBvZiB3aGljaCB3aXRoIGludGVncml0eSBhbmQganVzdGljZSBoZSBhbHdheXMgaGVsZCB0aGUgUm9tYW4gcGVvcGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TbyBUaWJlcml1cyB3YXMgc2VudCBhbmQgaGVsZCBjb25mZXJlbmNlIHdpdGggdGhlIGVuZW15LCBhbmQgYWZ0ZXIgZ2V0dGluZyB0aGVtIHRvIGFjY2VwdCBzb21lIGNvbmRpdGlvbnMsIGFuZCBoaW1zZWxmIGFjY2VwdGluZyBvdGhlcnMsIGVmZmVjdGVkIGEgdHJ1Y2UsIGFuZCB0aGVyZWJ5IG1hbmlmZXN0bHkgc2F2ZWQgdGhlIGxpdmVzIG9mIHR3ZW50eSB0aG91c2FuZCBSb21hbiBjaXRpemVucywgYmVzaWRlcyBhdHRlbmRhbnRzIGFuZCBjYW1wIGZvbGxvd2Vycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIGNhbXBhaWduIGhlIHdhcyBlbGVjdGVkIHF1YWVzdG9yLCBhbmQgaGFkIHRoZSBmb3J0dW5lIHRvIHNlcnZlIGluIGEgd2FyIGFnYWluc3QgTnVtYW50aWEgdW5kZXIgdGhlIGNvbnN1bCBDYWl1cyBNYW5jaW51cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNvbnN1bCBpbiAxMzcgQi5DLjwvbm90ZT4gd2hvIHdhcyBub3QgYmFkIGFzIGEgbWFuLCBidXQgbW9zdCB1bmZvcnR1bmF0ZSBvZiB0aGUgUm9tYW5zIGFzIGEgZ2VuZXJhbC4gVGhlcmVmb3JlIGluIHRoZSBtaWRzdCBvZiB1bmV4cGVjdGVkIG1pc2ZvcnR1bmVzIGFuZCBhZHZlcnNlIGNpcmN1bXN0YW5jZXMgbm90IG9ubHkgZGlkIHRoZSBzYWdhY2l0eSBhbmQgYnJhdmVyeSBvZiBUaWJlcml1cyBzaGluZSBmb3J0aCBhbGwgdGhlIG1vcmUsIGJ1dCBhbHNvW21kYXNoIF1hbmQgdGhpcyB3YXMgYXN0b25pc2hpbmdbbWRhc2ggXXRoZSBncmVhdCByZXNwZWN0IGFuZCBob25vdXIgaW4gd2hpY2ggaGUgaGVsZCBoaXMgY29tbWFuZGVyLCB3aG8sIHVuZGVyIHRoZSBwcmVzc3VyZSBvZiBkaXNhc3RlcnMsIGZvcmdvdCBldmVuIHRoYXQgaGUgd2FzIGEgZ2VuZXJhbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciBoZSBoYWQgYmVlbiBkZWZlYXRlZCBpbiBncmVhdCBiYXR0bGVzLCBoZSBhdHRlbXB0ZWQgdG8gYWJhbmRvbiBoaXMgY2FtcCBhbmQgd2l0aGRyYXcgaGlzIGZvcmNlcyBieSBuaWdodDsgYnV0IHRoZSBOdW1hbnRpbmVzIGJlY2FtZSBhd2FyZSBvZiBoaXMgYXR0ZW1wdCBhbmQgcHJvbXB0bHkgc2VpemVkIGhpcyBjYW1wLiBUaGVuIHRoZXkgZmVsbCB1cG9uIGhpcyBtZW4gYXMgdGhleSBmbGVkLCBzbGV3IHRob3NlIHdobyB3ZXJlIGluIHRoZSByZWFyLCBlbmNvbXBhc3NlZCBoaXMgd2hvbGUgYXJteSwgYW5kIGNyb3dkZWQgdGhlbSBpbnRvIHJlZ2lvbnMgdGhhdCB3ZXJlIGZ1bGwgb2YgZGlmZmljdWx0aWVzIGFuZCBhZmZvcmRlZCBubyBlc2NhcGUuIE1hbmNpbnVzLCBkZXNwYWlyaW5nIG9mIGZvcmNpbmcgaGlzIHdheSB0byBzYWZldHksIHNlbnQgaGVyYWxkcyB0byB0aGUgZW5lbXkgcHJvcG9zaW5nIGEgdHJ1Y2UgYW5kIHRlcm1zIG9mIHBlYWNlOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aGUgZW5lbXkgZGVjbGFyZWQgdGhhdCB0aGV5IGhhZCBjb25maWRlbmNlIGluIG5vIFJvbWFuIHNhdmUgb25seSBUaWJlcml1cywgYW5kIG9yZGVyZWQgdGhhdCBoZSBzaG91bGQgYmUgc2VudCB0byB0aGVtLiBUaGV5IGhhZCB0aGlzIGZlZWxpbmcgdG93YXJkcyB0aGUgeW91bmcgbWFuIG5vdCBvbmx5IG9uIGhpcyBvd24gYWNjb3VudCAoZm9yIGhlIHdhcyBoZWxkIGluIHZlcnkgaGlnaCBlc3RlZW0gYnkgdGhlIE51bWFudGluZSBzb2xkaWVyeSksIGJ1dCBhbHNvIGJlY2F1c2UgdGhleSByZW1lbWJlcmVkIGhpcyBmYXRoZXIgVGliZXJpdXMsIHdobyB3YWdlZCB3YXIgYWdhaW5zdCB0aGUgU3BhbmlhcmRzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTgwLTE3OSBCLkMuPC9ub3RlPiBhbmQgc3ViZHVlZCBtYW55IG9mIHRoZW0sIGJ1dCBtYWRlIGEgcGVhY2Ugd2l0aCB0aGUgTnVtYW50aW5lcywgdG8gdGhlIG9ic2VydmFuY2Ugb2Ygd2hpY2ggd2l0aCBpbnRlZ3JpdHkgYW5kIGp1c3RpY2UgaGUgYWx3YXlzIGhlbGQgdGhlIFJvbWFuIHBlb3BsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIFRpYmVyaXVzIHdhcyBzZW50IGFuZCBoZWxkIGNvbmZlcmVuY2Ugd2l0aCB0aGUgZW5lbXksIGFuZCBhZnRlciBnZXR0aW5nIHRoZW0gdG8gYWNjZXB0IHNvbWUgY29uZGl0aW9ucywgYW5kIGhpbXNlbGYgYWNjZXB0aW5nIG90aGVycywgZWZmZWN0ZWQgYSB0cnVjZSwgYW5kIHRoZXJlYnkgbWFuaWZlc3RseSBzYXZlZCB0aGUgbGl2ZXMgb2YgdHdlbnR5IHRob3VzYW5kIFJvbWFuIGNpdGl6ZW5zLCBiZXNpZGVzIGF0dGVuZGFudHMgYW5kIGNhbXAgZm9sbG93ZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFsbCB0aGUgcHJvcGVydHkgY2FwdHVyZWQgaW4gdGhlIGNhbXAgd2FzIHJldGFpbmVkIGJ5IHRoZSBOdW1hbnRpbmVzIGFuZCB0cmVhdGVkIGFzIHBsdW5kZXIuIEFtb25nIHRoaXMgd2VyZSBhbHNvIHRoZSBsZWRnZXJzIG9mIFRpYmVyaXVzLCBjb250YWluaW5nIHdyaXR0ZW4gYWNjb3VudHMgb2YgaGlzIG9mZmljaWFsIGV4cGVuc2VzIGFzIHF1YWVzdG9yLiBUaGVzZSBoZSB3YXMgdmVyeSBhbnhpb3VzIHRvIHJlY292ZXIsIGFuZCBzbywgd2hlbiB0aGUgYXJteSB3YXMgYWxyZWFkeSB3ZWxsIG9uIGl0cyB3YXksIHR1cm5lZCBiYWNrIHRvd2FyZHMgdGhlIGNpdHksIGF0dGVuZGVkIGJ5IHRocmVlIG9yIGZvdXIgY29tcGFuaW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgc3VtbW9uaW5nIGZvcnRoIHRoZSBtYWdpc3RyYXRlcyBvZiBOdW1hbnRpYSwgaGUgYXNrZWQgdGhlbSB0byBicmluZyBoaW0gaGlzIHRhYmxldHMsIHRoYXQgaGUgbWlnaHQgbm90IGdpdmUgaGlzIGVuZW1pZXMgb3Bwb3J0dW5pdHkgdG8gbWFsaWduIGhpbSBieSBub3QgYmVpbmcgYWJsZSB0byBnaXZlIGFuIGFjY291bnQgb2YgaGlzIGFkbWluaXN0cmF0aW9uLiBUaGUgTnVtYW50aW5lcywgYWNjb3JkaW5nbHksIGRlbGlnaHRlZCBhdCB0aGUgY2hhbmNlIHRvIGRvIGhpbSBhIGZhdm91ciwgaW52aXRlZCBoaW0gdG8gZW50ZXIgdGhlIGNpdHk7IGFuZCBhcyBoZSBzdG9vZCBkZWxpYmVyYXRpbmcgdGhlIG1hdHRlciwgdGhleSBkcmV3IG5lYXIgYW5kIGNsYXNwZWQgaGlzIGhhbmRzLCBhbmQgZmVydmVudGx5IGVudHJlYXRlZCBoaW0gbm8gbG9uZ2VyIHRvIHJlZ2FyZCB0aGVtIGFzIGVuZW1pZXMsIGJ1dCB0byB0cmVhdCBhbmQgdHJ1c3QgdGhlbSBhcyBmcmllbmRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaWJlcml1cywgYWNjb3JkaW5nbHksIGRlY2lkZWQgdG8gZG8gdGhpcywgYm90aCBiZWNhdXNlIGhlIHNldCBncmVhdCBzdG9yZSBieSBoaXMgdGFibGV0cywgYW5kIGJlY2F1c2UgaGUgZmVhcmVkIHRvIGV4YXNwZXJhdGUgdGhlIE51bWFudGluZXMgYnkgc2hvd2luZyB0aGVtIGRpc3RydXN0LiBBZnRlciBoZSBoYWQgZW50ZXJlZCB0aGUgY2l0eSwgaW4gdGhlIGZpcnN0IHBsYWNlIHRoZSBOdW1hbnRpbmVzIHNldCBvdXQgYSBtZWFsIGZvciBoaW0sIGFuZCBlbnRyZWF0ZWQgaGltIGJ5IGFsbCBtZWFucyB0byBzaXQgZG93biBhbmQgZWF0IHNvbWV0aGluZyBpbiB0aGVpciBjb21wYW55OyBuZXh0LCB0aGV5IGdhdmUgaGltIGJhY2sgaGlzIHRhYmxldHMsIGFuZCB1cmdlZCBoaW0gdG8gdGFrZSB3aGF0ZXZlciBoZSB3YW50ZWQgb2YgdGhlIHJlc3Qgb2YgaGlzIHByb3BlcnR5LiBIZSB0b29rIG5vdGhpbmcsIGhvd2V2ZXIsIGV4Y2VwdCB0aGUgZnJhbmtpbmNlbnNlIHdoaWNoIGhlIHdhcyB3b250IHRvIHVzZSBpbiB0aGUgcHVibGljIHNhY3JpZmljZXMsIGFuZCBhZnRlciBiaWRkaW5nIHRoZW0gZmFyZXdlbGwgd2l0aCBldmVyeSBleHByZXNzaW9uIG9mIGZyaWVuZHNoaXAsIGRlcGFydGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhbGwgdGhlIHByb3BlcnR5IGNhcHR1cmVkIGluIHRoZSBjYW1wIHdhcyByZXRhaW5lZCBieSB0aGUgTnVtYW50aW5lcyBhbmQgdHJlYXRlZCBhcyBwbHVuZGVyLiBBbW9uZyB0aGlzIHdlcmUgYWxzbyB0aGUgbGVkZ2VycyBvZiBUaWJlcml1cywgY29udGFpbmluZyB3cml0dGVuIGFjY291bnRzIG9mIGhpcyBvZmZpY2lhbCBleHBlbnNlcyBhcyBxdWFlc3Rvci4gVGhlc2UgaGUgd2FzIHZlcnkgYW54aW91cyB0byByZWNvdmVyLCBhbmQgc28sIHdoZW4gdGhlIGFybXkgd2FzIGFscmVhZHkgd2VsbCBvbiBpdHMgd2F5LCB0dXJuZWQgYmFjayB0b3dhcmRzIHRoZSBjaXR5LCBhdHRlbmRlZCBieSB0aHJlZSBvciBmb3VyIGNvbXBhbmlvbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHN1bW1vbmluZyBmb3J0aCB0aGUgbWFnaXN0cmF0ZXMgb2YgTnVtYW50aWEsIGhlIGFza2VkIHRoZW0gdG8gYnJpbmcgaGltIGhpcyB0YWJsZXRzLCB0aGF0IGhlIG1pZ2h0IG5vdCBnaXZlIGhpcyBlbmVtaWVzIG9wcG9ydHVuaXR5IHRvIG1hbGlnbiBoaW0gYnkgbm90IGJlaW5nIGFibGUgdG8gZ2l2ZSBhbiBhY2NvdW50IG9mIGhpcyBhZG1pbmlzdHJhdGlvbi4gVGhlIE51bWFudGluZXMsIGFjY29yZGluZ2x5LCBkZWxpZ2h0ZWQgYXQgdGhlIGNoYW5jZSB0byBkbyBoaW0gYSBmYXZvdXIsIGludml0ZWQgaGltIHRvIGVudGVyIHRoZSBjaXR5OyBhbmQgYXMgaGUgc3Rvb2QgZGVsaWJlcmF0aW5nIHRoZSBtYXR0ZXIsIHRoZXkgZHJldyBuZWFyIGFuZCBjbGFzcGVkIGhpcyBoYW5kcywgYW5kIGZlcnZlbnRseSBlbnRyZWF0ZWQgaGltIG5vIGxvbmdlciB0byByZWdhcmQgdGhlbSBhcyBlbmVtaWVzLCBidXQgdG8gdHJlYXQgYW5kIHRydXN0IHRoZW0gYXMgZnJpZW5kcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRpYmVyaXVzLCBhY2NvcmRpbmdseSwgZGVjaWRlZCB0byBkbyB0aGlzLCBib3RoIGJlY2F1c2UgaGUgc2V0IGdyZWF0IHN0b3JlIGJ5IGhpcyB0YWJsZXRzLCBhbmQgYmVjYXVzZSBoZSBmZWFyZWQgdG8gZXhhc3BlcmF0ZSB0aGUgTnVtYW50aW5lcyBieSBzaG93aW5nIHRoZW0gZGlzdHJ1c3QuIEFmdGVyIGhlIGhhZCBlbnRlcmVkIHRoZSBjaXR5LCBpbiB0aGUgZmlyc3QgcGxhY2UgdGhlIE51bWFudGluZXMgc2V0IG91dCBhIG1lYWwgZm9yIGhpbSwgYW5kIGVudHJlYXRlZCBoaW0gYnkgYWxsIG1lYW5zIHRvIHNpdCBkb3duIGFuZCBlYXQgc29tZXRoaW5nIGluIHRoZWlyIGNvbXBhbnk7IG5leHQsIHRoZXkgZ2F2ZSBoaW0gYmFjayBoaXMgdGFibGV0cywgYW5kIHVyZ2VkIGhpbSB0byB0YWtlIHdoYXRldmVyIGhlIHdhbnRlZCBvZiB0aGUgcmVzdCBvZiBoaXMgcHJvcGVydHkuIEhlIHRvb2sgbm90aGluZywgaG93ZXZlciwgZXhjZXB0IHRoZSBmcmFua2luY2Vuc2Ugd2hpY2ggaGUgd2FzIHdvbnQgdG8gdXNlIGluIHRoZSBwdWJsaWMgc2FjcmlmaWNlcywgYW5kIGFmdGVyIGJpZGRpbmcgdGhlbSBmYXJld2VsbCB3aXRoIGV2ZXJ5IGV4cHJlc3Npb24gb2YgZnJpZW5kc2hpcCwgZGVwYXJ0ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBjYW1lIGJhY2sgdG8gUm9tZSwgdGhlIHdob2xlIHRyYW5zYWN0aW9uIHdhcyBibGFtZWQgYW5kIGRlbm91bmNlZCBhcyBhIHRlcnJpYmxlIGRpc2dyYWNlIHRvIHRoZSBjaXR5LCBhbHRob3VnaCB0aGUgcmVsYXRpdmVzIGFuZCBmcmllbmRzIG9mIHRoZSBzb2xkaWVycywgd2hvIGZvcm1lZCBhIGxhcmdlIHBhcnQgb2YgdGhlIHBlb3BsZSwgY2FtZSBmbG9ja2luZyB0byBUaWJlcml1cywgaW1wdXRpbmcgdGhlIGRpc2dyYWNlIGluIHdoYXQgaGFkIGhhcHBlbmVkIHRvIGhpcyBjb21tYW5kZXIsIGJ1dCBpbnNpc3RpbmcgdGhhdCBpdCB3YXMgZHVlIHRvIFRpYmVyaXVzIHRoYXQgdGhlIGxpdmVzIG9mIHNvIG1hbnkgY2l0aXplbnMgaGFkIGJlZW4gc2F2ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRob3NlLCBob3dldmVyLCB3aG8gd2VyZSBkaXNwbGVhc2VkIGF0IHdoYXQgaGFkIGJlZW4gZG9uZSB1cmdlZCBmb3IgaW1pdGF0aW9uIHRoZSBleGFtcGxlIG9mIHRoZWlyIGFuY2VzdG9ycywgd2hvIGZsdW5nIHRvIHRoZSBlbmVteSB1bmFybWVkIHRoZSBnZW5lcmFscyB0aGVtc2VsdmVzIHdobyBoYWQgYmVlbiBzYXRpc2ZpZWQgdG8gYmUgbGV0IGdvIGJ5IHRoZSBTYW1uaXRlcywgYW5kIGluIGxpa2UgbWFubmVyIGNhc3QgZm9ydGggdGhvc2Ugd2hvIGhhZCB0YWtlbiBoYW5kIGFuZCBzaGFyZSBpbiB0aGUgdHJlYXR5LCBhcyBmb3IgaW5zdGFuY2UgdGhlIHF1YWVzdG9ycyBhbmQgbWlsaXRhcnkgdHJpYnVuZXMsIHR1cm5pbmcgdXBvbiB0aGVpciBoZWFkcyB0aGUgZ3VpbHQgb2YgcGVyanVyeSBhbmQgdmlvbGF0aW9uIG9mIHRoZSBwYWN0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMyMSBCLkMuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBPZmYuIDMuMzAuMTA5IiB2YWxpZD0ieWVzIj5DaWNlcm8gPHRpdGxlPkRlIG9mZi48L3RpdGxlPiwgaWlpLiAzMCwgMTA5PC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIHByZXNlbnQgYWZmYWlyLCBpbmRlZWQsIG1vcmUgdGhhbiBhdCBhbnkgb3RoZXIgdGltZSwgdGhlIHBlb3BsZSBzaG93ZWQgdGhlaXIgZ29vZCB3aWxsIGFuZCBhZmZlY3Rpb24gdG93YXJkcyBUaWJlcml1cy4gRm9yIHRoZXkgdm90ZWQgdG8gZGVsaXZlciB1cCB0aGUgY29uc3VsIHVuYXJtZWQgYW5kIGluIGJvbmRzIHRvIHRoZSBOdW1hbnRpbmVzLCBidXQgc3BhcmVkIGFsbCB0aGUgb3RoZXIgb2ZmaWNlcnMgZm9yIHRoZSBzYWtlIG9mIFRpYmVyaXVzLiBJdCB3b3VsZCBzZWVtLCB0b28sIHRoYXQgU2NpcGlvLCB3aG8gd2FzIHRoZW4gdGhlIGdyZWF0ZXN0IGFuZCBtb3N0IGluZmx1ZW50aWFsIG1hbiBhdCBSb21lLCBoZWxwZWQgdG8gc2F2ZSB0aGVtOyBidXQgbm9uZSB0aGUgbGVzcyBoZSB3YXMgYmxhbWVkPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QnkgVGliZXJpdXMgYW5kIGhpcyBmcmllbmRzLjwvbm90ZT4gZm9yIG5vdCBzYXZpbmcgTWFuY2ludXMsIGFuZCBmb3Igbm90IGluc2lzdGluZyB0aGF0IHRoZSB0cmVhdHkgd2l0aCB0aGUgTnVtYW50aW5lcywgd2hpY2ggaGFkIGJlZW4gbWFkZSB0aHJvdWdoIHRoZSBhZ2VuY3kgb2YgaGlzIGtpbnNtYW4gYW5kIGZyaWVuZCBUaWJlcml1cywgc2hvdWxkIGJlIGtlcHQgaW52aW9sYXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3b3VsZCBhcHBlYXIgdGhhdCB0aGUgZGlzYWdyZWVtZW50IGJldHdlZW4gdGhlIHR3byBtZW4gYXJvc2UgY2hpZWZseSB0aHJvdWdoIHRoZSBhbWJpdGlvbiBvZiBUaWJlcml1cyBhbmQgZnJvbSB0aGUgZnJpZW5kcyBhbmQgc29waGlzdHMgd2hvIHVyZ2VkIGhpbSBvbi4gQnV0IHRoaXMgZGlzYWdyZWVtZW50IGNlcnRhaW5seSByZXN1bHRlZCBpbiBubyBtaXNjaGllZiBwYXN0IHJlbWVkeS4gQW5kIGluIG15IG9waW5pb24gVGliZXJpdXMgd291bGQgbmV2ZXIgaGF2ZSBtZXQgd2l0aCBoaXMgZ3JlYXQgbWlzZm9ydHVuZXMgaWYgU2NpcGlvIEFmcmljYW51cyBoYWQgYmVlbiBwcmVzZW50IGF0IFJvbWUgZHVyaW5nIGhpcyBwb2xpdGljYWwgYWN0aXZpdHkuIEJ1dCBhcyBpdCB3YXMsIFNjaXBpbyB3YXMgYWxyZWFkeSBhdCBOdW1hbnRpYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNjaXBpbyB3YXMgc2VudCBhZ2FpbnN0IE51bWFudGlhIGluIDEzNCBCLkMuLCBhbmQgdG9vayBhbmQgZGVzdHJveWVkIHRoZSBjaXR5IGluIHRoZSBmb2xsb3dpbmcgeWVhciwgaW4gd2hpY2ggeWVhciBhbHNvIFRpYmVyaXVzIHdhcyBraWxsZWQuPC9ub3RlPiBhbmQgd2FnaW5nIHdhciB0aGVyZSB3aGVuIFRpYmVyaXVzIGJlZ2FuIHRvIGFnaXRhdGUgZm9yIGhpcyBhZ3JhcmlhbiBsYXdzLiBUaGUgb2NjYXNpb24gb2YgdGhpcyB3YXMgYXMgZm9sbG93cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIGNhbWUgYmFjayB0byBSb21lLCB0aGUgd2hvbGUgdHJhbnNhY3Rpb24gd2FzIGJsYW1lZCBhbmQgZGVub3VuY2VkIGFzIGEgdGVycmlibGUgZGlzZ3JhY2UgdG8gdGhlIGNpdHksIGFsdGhvdWdoIHRoZSByZWxhdGl2ZXMgYW5kIGZyaWVuZHMgb2YgdGhlIHNvbGRpZXJzLCB3aG8gZm9ybWVkIGEgbGFyZ2UgcGFydCBvZiB0aGUgcGVvcGxlLCBjYW1lIGZsb2NraW5nIHRvIFRpYmVyaXVzLCBpbXB1dGluZyB0aGUgZGlzZ3JhY2UgaW4gd2hhdCBoYWQgaGFwcGVuZWQgdG8gaGlzIGNvbW1hbmRlciwgYnV0IGluc2lzdGluZyB0aGF0IGl0IHdhcyBkdWUgdG8gVGliZXJpdXMgdGhhdCB0aGUgbGl2ZXMgb2Ygc28gbWFueSBjaXRpemVucyBoYWQgYmVlbiBzYXZlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRob3NlLCBob3dldmVyLCB3aG8gd2VyZSBkaXNwbGVhc2VkIGF0IHdoYXQgaGFkIGJlZW4gZG9uZSB1cmdlZCBmb3IgaW1pdGF0aW9uIHRoZSBleGFtcGxlIG9mIHRoZWlyIGFuY2VzdG9ycywgd2hvIGZsdW5nIHRvIHRoZSBlbmVteSB1bmFybWVkIHRoZSBnZW5lcmFscyB0aGVtc2VsdmVzIHdobyBoYWQgYmVlbiBzYXRpc2ZpZWQgdG8gYmUgbGV0IGdvIGJ5IHRoZSBTYW1uaXRlcywgYW5kIGluIGxpa2UgbWFubmVyIGNhc3QgZm9ydGggdGhvc2Ugd2hvIGhhZCB0YWtlbiBoYW5kIGFuZCBzaGFyZSBpbiB0aGUgdHJlYXR5LCBhcyBmb3IgaW5zdGFuY2UgdGhlIHF1YWVzdG9ycyBhbmQgbWlsaXRhcnkgdHJpYnVuZXMsIHR1cm5pbmcgdXBvbiB0aGVpciBoZWFkcyB0aGUgZ3VpbHQgb2YgcGVyanVyeSBhbmQgdmlvbGF0aW9uIG9mIHRoZSBwYWN0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzIxIEIuQy4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gT2ZmLiAzLjMwLjEwOSIgdmFsaWQ9InllcyI+Q2ljZXJvIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIG9mZi48L3RpdGxlPiwgaWlpLiAzMCwgMTA5PC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIE9mZi4gMy4zMC4xMDkiIHZhbGlkPSJ5ZXMiPkNpY2VybyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSBvZmYuPC90aXRsZT4sIGlpaS4gMzAsIDEwOTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGUgb2ZmLjwvdGl0bGU+LCBpaWkuIDMwLCAxMDk8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBwcmVzZW50IGFmZmFpciwgaW5kZWVkLCBtb3JlIHRoYW4gYXQgYW55IG90aGVyIHRpbWUsIHRoZSBwZW9wbGUgc2hvd2VkIHRoZWlyIGdvb2Qgd2lsbCBhbmQgYWZmZWN0aW9uIHRvd2FyZHMgVGliZXJpdXMuIEZvciB0aGV5IHZvdGVkIHRvIGRlbGl2ZXIgdXAgdGhlIGNvbnN1bCB1bmFybWVkIGFuZCBpbiBib25kcyB0byB0aGUgTnVtYW50aW5lcywgYnV0IHNwYXJlZCBhbGwgdGhlIG90aGVyIG9mZmljZXJzIGZvciB0aGUgc2FrZSBvZiBUaWJlcml1cy4gSXQgd291bGQgc2VlbSwgdG9vLCB0aGF0IFNjaXBpbywgd2hvIHdhcyB0aGVuIHRoZSBncmVhdGVzdCBhbmQgbW9zdCBpbmZsdWVudGlhbCBtYW4gYXQgUm9tZSwgaGVscGVkIHRvIHNhdmUgdGhlbTsgYnV0IG5vbmUgdGhlIGxlc3MgaGUgd2FzIGJsYW1lZDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QnkgVGliZXJpdXMgYW5kIGhpcyBmcmllbmRzLjwvbm90ZT4gZm9yIG5vdCBzYXZpbmcgTWFuY2ludXMsIGFuZCBmb3Igbm90IGluc2lzdGluZyB0aGF0IHRoZSB0cmVhdHkgd2l0aCB0aGUgTnVtYW50aW5lcywgd2hpY2ggaGFkIGJlZW4gbWFkZSB0aHJvdWdoIHRoZSBhZ2VuY3kgb2YgaGlzIGtpbnNtYW4gYW5kIGZyaWVuZCBUaWJlcml1cywgc2hvdWxkIGJlIGtlcHQgaW52aW9sYXRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdvdWxkIGFwcGVhciB0aGF0IHRoZSBkaXNhZ3JlZW1lbnQgYmV0d2VlbiB0aGUgdHdvIG1lbiBhcm9zZSBjaGllZmx5IHRocm91Z2ggdGhlIGFtYml0aW9uIG9mIFRpYmVyaXVzIGFuZCBmcm9tIHRoZSBmcmllbmRzIGFuZCBzb3BoaXN0cyB3aG8gdXJnZWQgaGltIG9uLiBCdXQgdGhpcyBkaXNhZ3JlZW1lbnQgY2VydGFpbmx5IHJlc3VsdGVkIGluIG5vIG1pc2NoaWVmIHBhc3QgcmVtZWR5LiBBbmQgaW4gbXkgb3BpbmlvbiBUaWJlcml1cyB3b3VsZCBuZXZlciBoYXZlIG1ldCB3aXRoIGhpcyBncmVhdCBtaXNmb3J0dW5lcyBpZiBTY2lwaW8gQWZyaWNhbnVzIGhhZCBiZWVuIHByZXNlbnQgYXQgUm9tZSBkdXJpbmcgaGlzIHBvbGl0aWNhbCBhY3Rpdml0eS4gQnV0IGFzIGl0IHdhcywgU2NpcGlvIHdhcyBhbHJlYWR5IGF0IE51bWFudGlhPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TY2lwaW8gd2FzIHNlbnQgYWdhaW5zdCBOdW1hbnRpYSBpbiAxMzQgQi5DLiwgYW5kIHRvb2sgYW5kIGRlc3Ryb3llZCB0aGUgY2l0eSBpbiB0aGUgZm9sbG93aW5nIHllYXIsIGluIHdoaWNoIHllYXIgYWxzbyBUaWJlcml1cyB3YXMga2lsbGVkLjwvbm90ZT4gYW5kIHdhZ2luZyB3YXIgdGhlcmUgd2hlbiBUaWJlcml1cyBiZWdhbiB0byBhZ2l0YXRlIGZvciBoaXMgYWdyYXJpYW4gbGF3cy4gVGhlIG9jY2FzaW9uIG9mIHRoaXMgd2FzIGFzIGZvbGxvd3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2YgdGhlIHRlcnJpdG9yeSB3aGljaCB0aGUgUm9tYW5zIHdvbiBpbiB3YXIgZnJvbSB0aGVpciBuZWlnaGJvdXJzLCBhIHBhcnQgdGhleSBzb2xkLCBhbmQgYSBwYXJ0IHRoZXkgbWFkZSBjb21tb24gbGFuZCwgYW5kIGFzc2lnbmVkIGl0IGZvciBvY2N1cGF0aW9uIHRvIHRoZSBwb29yIGFuZCBpbmRpZ2VudCBhbW9uZyB0aGUgY2l0aXplbnMsIG9uIHBheW1lbnQgb2YgYSBzbWFsbCByZW50IGludG8gdGhlIHB1YmxpYyB0cmVhc3VyeS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gdGhlIHJpY2ggYmVnYW4gdG8gb2ZmZXIgbGFyZ2VyIHJlbnRzIGFuZCBkcm92ZSBvdXQgdGhlIHBvb3IsIGEgbGF3IHdhcyBlbmFjdGVkIGZvcmJpZGRpbmcgdGhlIGhvbGRpbmcgYnkgb25lIHBlcnNvbiBvZiBtb3JlIHRoYW4gZml2ZSBodW5kcmVkIGFjcmVzIG9mIGxhbmQuIEZvciBhIHNob3J0IHRpbWUgdGhpcyBlbmFjdG1lbnQgZ2F2ZSBhIGNoZWNrIHRvIHRoZSByYXBhY2l0eSBvZiB0aGUgcmljaCwgYW5kIHdhcyBvZiBhc3Npc3RhbmNlIHRvIHRoZSBwb29yLCB3aG8gcmVtYWluZWQgaW4gdGhlaXIgcGxhY2VzIG9uIHRoZSBsYW5kIHdoaWNoIHRoZXkgaGFkIHJlbnRlZCBhbmQgb2NjdXBpZWQgdGhlIGFsbG90bWVudCB3aGljaCBlYWNoIGhhZCBoZWxkIGZyb20gdGhlIG91dHNldC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGxhdGVyIG9uIHRoZSBuZWlnaGJvdXJpbmcgcmljaCBtZW4sIGJ5IG1lYW5zIG9mIGZpY3RpdGlvdXMgcGVyc29uYWdlcywgdHJhbnNmZXJyZWQgdGhlc2UgcmVudGFscyB0byB0aGVtc2VsdmVzLCBhbmQgZmluYWxseSBoZWxkIG1vc3Qgb2YgdGhlIGxhbmQgb3Blbmx5IGluIHRoZWlyIG93biBuYW1lcy4gVGhlbiB0aGUgcG9vciwgd2hvIGhhZCBiZWVuIGVqZWN0ZWQgZnJvbSB0aGVpciBsYW5kLCBubyBsb25nZXIgc2hvd2VkIHRoZW1zZWx2ZXMgZWFnZXIgZm9yIG1pbGl0YXJ5IHNlcnZpY2UsIGFuZCBuZWdsZWN0ZWQgdGhlIGJyaW5naW5nIHVwIG9mIGNoaWxkcmVuLCBzbyB0aGF0IHNvb24gYWxsIEl0YWx5IHdhcyBjb25zY2lvdXMgb2YgYSBkZWFydGggb2YgZnJlZW1lbiwgYW5kIHdhcyBmaWxsZWQgd2l0aCBnYW5ncyBvZiBmb3JlaWduIHNsYXZlcywgYnkgd2hvc2UgYWlkIHRoZSByaWNoIGN1bHRpdmF0ZWQgdGhlaXIgZXN0YXRlcywgZnJvbSB3aGljaCB0aGV5IGhhZCBkcml2ZW4gYXdheSB0aGUgZnJlZSBjaXRpemVucy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW4gYXR0ZW1wdCB3YXMgdGhlcmVmb3JlIG1hZGUgdG8gcmVjdGlmeSB0aGlzIGV2aWwsIGFuZCBieSBDYWl1cyBMYWVsaXVzIHRoZSBjb21yYWRlIG9mIFNjaXBpbzsgYnV0IHRoZSBtZW4gb2YgaW5mbHVlbmNlIG9wcG9zZWQgaGlzIG1lYXN1cmVzLCBhbmQgaGUsIGZlYXJpbmcgdGhlIGRpc3R1cmJhbmNlIHdoaWNoIG1pZ2h0IGVuc3VlLCBkZXNpc3RlZCwgYW5kIHJlY2VpdmVkIHRoZSBzdXJuYW1lIG9mIDxlbXBoPldpc2U8L2VtcGg+IG9yIDxlbXBoPlBydWRlbnQ8L2VtcGg+IChmb3IgdGhlIExhdGluIHdvcmQgCjxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnNhcGllbnM8L3E+IHdvdWxkIHNlZW0gdG8gaGF2ZSBlaXRoZXIgbWVhbmluZykuIFRpYmVyaXVzLCBob3dldmVyLCBvbiBiZWluZyBlbGVjdGVkIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgdG9vayB0aGUgbWF0dGVyIGRpcmVjdGx5IGluIGhhbmQuIEhlIHdhcyBpbmNpdGVkIHRvIHRoaXMgc3RlcCwgYXMgbW9zdCB3cml0ZXJzIHNheSwgYnkgRGlvcGhhbmVzIHRoZSByaGV0b3JpY2lhbiBhbmQgQmxvc3NpdXMgdGhlIHBoaWxvc29waGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5EaW9waGFuZXMgd2FzIGFuIGV4aWxlIGZyb20gTWl0eWxlbmUsIGJ1dCBCbG9zc2l1cyB3YXMgYSBuYXRpdmUgSXRhbGlhbiBmcm9tIEN1bWFlLCBoYWQgYmVlbiBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgQW50aXBhdGVyIG9mIFRhcnN1cyBhdCBSb21lLCBhbmQgaGFkIGJlZW4gaG9ub3VyZWQgYnkgaGltIHdpdGggdGhlIGRlZGljYXRpb24gb2YgcGhpbG9zb3BoaWNhbCB0cmVhdGlzZXMuIEJ1dCBzb21lIHB1dCBwYXJ0IG9mIHRoZSBibGFtZSB1cG9uIENvcm5lbGlhIHRoZSBtb3RoZXIgb2YgVGliZXJpdXMsIHdobyBvZnRlbiByZXByb2FjaGVkIGhlciBzb25zIGJlY2F1c2UgdGhlIFJvbWFucyBzdGlsbCBjYWxsZWQgaGVyIHRoZSBtb3RoZXItaW4tbGF3IG9mIFNjaXBpbywgYnV0IG5vdCB5ZXQgdGhlIG1vdGhlciBvZiB0aGUgR3JhY2NoaS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+T3RoZXJzIGFnYWluIHNheSB0aGF0IGEgY2VydGFpbiBTcHVyaXVzIFBvc3R1bWl1cyB3YXMgdG8gYmxhbWUuIEhlIHdhcyBvZiB0aGUgc2FtZSBhZ2UgYXMgVGliZXJpdXMsIGFuZCBhIHJpdmFsIG9mIGhpcyBpbiByZXB1dGF0aW9uIGFzIGFuIGFkdm9jYXRlOyBhbmQgd2hlbiBUaWJlcml1cyBjYW1lIGJhY2sgZnJvbSBoaXMgY2FtcGFpZ24gYW5kIGZvdW5kIHRoYXQgaGlzIHJpdmFsIGhhZCBmYXIgb3V0c3RyaXBwZWQgaGltIGluIHJlcHV0YXRpb24gYW5kIGluZmx1ZW5jZSBhbmQgd2FzIGFuIG9iamVjdCBvZiBwdWJsaWMgYWRtaXJhdGlvbiwgaGUgZGV0ZXJtaW5lZCwgYXMgaXQgd291bGQgc2VlbSwgdG8gb3V0ZG8gaGltIGJ5IGVuZ2FnaW5nIGluIGEgYm9sZCBwb2xpdGljYWwgbWVhc3VyZSB3aGljaCB3b3VsZCBhcm91c2UgZ3JlYXQgZXhwZWN0YXRpb25zIGFtb25nIHRoZSBwZW9wbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoaXMgYnJvdGhlciBDYWl1cywgaW4gYSBjZXJ0YWluIHBhbXBobGV0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlByb2JhYmx5IGEgcG9saXRpY2FsIHBhbXBobGV0IGluIHRoZSBmb3JtIG9mIGEgbGV0dGVyLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gRGl2LiAyLjI5LiIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+ZGUgZGl2LjwvdGl0bGU+IGlpLiAyOSwgNjIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhhcyB3cml0dGVuIHRoYXQgYXMgVGliZXJpdXMgd2FzIHBhc3NpbmcgdGhyb3VnaCBUdXNjYW55IG9uIGhpcyB3YXkgdG8gTnVtYW50aWEsIGFuZCBvYnNlcnZlZCB0aGUgZGVhcnRoIG9mIGluaGFiaXRhbnRzIGluIHRoZSBjb3VudHJ5LCBhbmQgdGhhdCB0aG9zZSB3aG8gdGlsbGVkIGl0cyBzb2lsIG9yIHRlbmRlZCBpdHMgZmxvY2tzIHRoZXJlIHdlcmUgaW1wb3J0ZWQgYmFyYmFyaWFuIHNsYXZlcywgaGUgdGhlbiBmaXJzdCBjb25jZWl2ZWQgdGhlIHB1YmxpYyBwb2xpY3kgd2hpY2ggd2FzIHRoZSBjYXVzZSBvZiBjb3VudGxlc3MgaWxscyB0byB0aGUgdHdvIGJyb3RoZXJzLiBIb3dldmVyLCB0aGUgZW5lcmd5IGFuZCBhbWJpdGlvbiBvZiBUaWJlcml1cyB3ZXJlIG1vc3Qgb2YgYWxsIGtpbmRsZWQgYnkgdGhlIHBlb3BsZSB0aGVtc2VsdmVzLCB3aG8gcG9zdGVkIHdyaXRpbmdzIG9uIHBvcnRpY29lcywgaG91c2Utd2FsbHMsIGFuZCBtb251bWVudHMsIGNhbGxpbmcgdXBvbiBoaW0gdG8gcmVjb3ZlciBmb3IgdGhlIHBvb3IgdGhlIHB1YmxpYyBsYW5kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PZiB0aGUgdGVycml0b3J5IHdoaWNoIHRoZSBSb21hbnMgd29uIGluIHdhciBmcm9tIHRoZWlyIG5laWdoYm91cnMsIGEgcGFydCB0aGV5IHNvbGQsIGFuZCBhIHBhcnQgdGhleSBtYWRlIGNvbW1vbiBsYW5kLCBhbmQgYXNzaWduZWQgaXQgZm9yIG9jY3VwYXRpb24gdG8gdGhlIHBvb3IgYW5kIGluZGlnZW50IGFtb25nIHRoZSBjaXRpemVucywgb24gcGF5bWVudCBvZiBhIHNtYWxsIHJlbnQgaW50byB0aGUgcHVibGljIHRyZWFzdXJ5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSByaWNoIGJlZ2FuIHRvIG9mZmVyIGxhcmdlciByZW50cyBhbmQgZHJvdmUgb3V0IHRoZSBwb29yLCBhIGxhdyB3YXMgZW5hY3RlZCBmb3JiaWRkaW5nIHRoZSBob2xkaW5nIGJ5IG9uZSBwZXJzb24gb2YgbW9yZSB0aGFuIGZpdmUgaHVuZHJlZCBhY3JlcyBvZiBsYW5kLiBGb3IgYSBzaG9ydCB0aW1lIHRoaXMgZW5hY3RtZW50IGdhdmUgYSBjaGVjayB0byB0aGUgcmFwYWNpdHkgb2YgdGhlIHJpY2gsIGFuZCB3YXMgb2YgYXNzaXN0YW5jZSB0byB0aGUgcG9vciwgd2hvIHJlbWFpbmVkIGluIHRoZWlyIHBsYWNlcyBvbiB0aGUgbGFuZCB3aGljaCB0aGV5IGhhZCByZW50ZWQgYW5kIG9jY3VwaWVkIHRoZSBhbGxvdG1lbnQgd2hpY2ggZWFjaCBoYWQgaGVsZCBmcm9tIHRoZSBvdXRzZXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBsYXRlciBvbiB0aGUgbmVpZ2hib3VyaW5nIHJpY2ggbWVuLCBieSBtZWFucyBvZiBmaWN0aXRpb3VzIHBlcnNvbmFnZXMsIHRyYW5zZmVycmVkIHRoZXNlIHJlbnRhbHMgdG8gdGhlbXNlbHZlcywgYW5kIGZpbmFsbHkgaGVsZCBtb3N0IG9mIHRoZSBsYW5kIG9wZW5seSBpbiB0aGVpciBvd24gbmFtZXMuIFRoZW4gdGhlIHBvb3IsIHdobyBoYWQgYmVlbiBlamVjdGVkIGZyb20gdGhlaXIgbGFuZCwgbm8gbG9uZ2VyIHNob3dlZCB0aGVtc2VsdmVzIGVhZ2VyIGZvciBtaWxpdGFyeSBzZXJ2aWNlLCBhbmQgbmVnbGVjdGVkIHRoZSBicmluZ2luZyB1cCBvZiBjaGlsZHJlbiwgc28gdGhhdCBzb29uIGFsbCBJdGFseSB3YXMgY29uc2Npb3VzIG9mIGEgZGVhcnRoIG9mIGZyZWVtZW4sIGFuZCB3YXMgZmlsbGVkIHdpdGggZ2FuZ3Mgb2YgZm9yZWlnbiBzbGF2ZXMsIGJ5IHdob3NlIGFpZCB0aGUgcmljaCBjdWx0aXZhdGVkIHRoZWlyIGVzdGF0ZXMsIGZyb20gd2hpY2ggdGhleSBoYWQgZHJpdmVuIGF3YXkgdGhlIGZyZWUgY2l0aXplbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuIGF0dGVtcHQgd2FzIHRoZXJlZm9yZSBtYWRlIHRvIHJlY3RpZnkgdGhpcyBldmlsLCBhbmQgYnkgQ2FpdXMgTGFlbGl1cyB0aGUgY29tcmFkZSBvZiBTY2lwaW87IGJ1dCB0aGUgbWVuIG9mIGluZmx1ZW5jZSBvcHBvc2VkIGhpcyBtZWFzdXJlcywgYW5kIGhlLCBmZWFyaW5nIHRoZSBkaXN0dXJiYW5jZSB3aGljaCBtaWdodCBlbnN1ZSwgZGVzaXN0ZWQsIGFuZCByZWNlaXZlZCB0aGUgc3VybmFtZSBvZiA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPldpc2U8L2VtcGg+IG9yIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHJ1ZGVudDwvZW1waD4gKGZvciB0aGUgTGF0aW4gd29yZCAKPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zYXBpZW5zPC9xPiB3b3VsZCBzZWVtIHRvIGhhdmUgZWl0aGVyIG1lYW5pbmcpLiBUaWJlcml1cywgaG93ZXZlciwgb24gYmVpbmcgZWxlY3RlZCB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIHRvb2sgdGhlIG1hdHRlciBkaXJlY3RseSBpbiBoYW5kLiBIZSB3YXMgaW5jaXRlZCB0byB0aGlzIHN0ZXAsIGFzIG1vc3Qgd3JpdGVycyBzYXksIGJ5IERpb3BoYW5lcyB0aGUgcmhldG9yaWNpYW4gYW5kIEJsb3NzaXVzIHRoZSBwaGlsb3NvcGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkRpb3BoYW5lcyB3YXMgYW4gZXhpbGUgZnJvbSBNaXR5bGVuZSwgYnV0IEJsb3NzaXVzIHdhcyBhIG5hdGl2ZSBJdGFsaWFuIGZyb20gQ3VtYWUsIGhhZCBiZWVuIGFuIGludGltYXRlIGZyaWVuZCBvZiBBbnRpcGF0ZXIgb2YgVGFyc3VzIGF0IFJvbWUsIGFuZCBoYWQgYmVlbiBob25vdXJlZCBieSBoaW0gd2l0aCB0aGUgZGVkaWNhdGlvbiBvZiBwaGlsb3NvcGhpY2FsIHRyZWF0aXNlcy4gQnV0IHNvbWUgcHV0IHBhcnQgb2YgdGhlIGJsYW1lIHVwb24gQ29ybmVsaWEgdGhlIG1vdGhlciBvZiBUaWJlcml1cywgd2hvIG9mdGVuIHJlcHJvYWNoZWQgaGVyIHNvbnMgYmVjYXVzZSB0aGUgUm9tYW5zIHN0aWxsIGNhbGxlZCBoZXIgdGhlIG1vdGhlci1pbi1sYXcgb2YgU2NpcGlvLCBidXQgbm90IHlldCB0aGUgbW90aGVyIG9mIHRoZSBHcmFjY2hpLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk90aGVycyBhZ2FpbiBzYXkgdGhhdCBhIGNlcnRhaW4gU3B1cml1cyBQb3N0dW1pdXMgd2FzIHRvIGJsYW1lLiBIZSB3YXMgb2YgdGhlIHNhbWUgYWdlIGFzIFRpYmVyaXVzLCBhbmQgYSByaXZhbCBvZiBoaXMgaW4gcmVwdXRhdGlvbiBhcyBhbiBhZHZvY2F0ZTsgYW5kIHdoZW4gVGliZXJpdXMgY2FtZSBiYWNrIGZyb20gaGlzIGNhbXBhaWduIGFuZCBmb3VuZCB0aGF0IGhpcyByaXZhbCBoYWQgZmFyIG91dHN0cmlwcGVkIGhpbSBpbiByZXB1dGF0aW9uIGFuZCBpbmZsdWVuY2UgYW5kIHdhcyBhbiBvYmplY3Qgb2YgcHVibGljIGFkbWlyYXRpb24sIGhlIGRldGVybWluZWQsIGFzIGl0IHdvdWxkIHNlZW0sIHRvIG91dGRvIGhpbSBieSBlbmdhZ2luZyBpbiBhIGJvbGQgcG9saXRpY2FsIG1lYXN1cmUgd2hpY2ggd291bGQgYXJvdXNlIGdyZWF0IGV4cGVjdGF0aW9ucyBhbW9uZyB0aGUgcGVvcGxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoaXMgYnJvdGhlciBDYWl1cywgaW4gYSBjZXJ0YWluIHBhbXBobGV0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHJvYmFibHkgYSBwb2xpdGljYWwgcGFtcGhsZXQgaW4gdGhlIGZvcm0gb2YgYSBsZXR0ZXIuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIERpdi4gMi4yOS4iIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+ZGUgZGl2LjwvdGl0bGU+IGlpLiAyOSwgNjIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhhcyB3cml0dGVuIHRoYXQgYXMgVGliZXJpdXMgd2FzIHBhc3NpbmcgdGhyb3VnaCBUdXNjYW55IG9uIGhpcyB3YXkgdG8gTnVtYW50aWEsIGFuZCBvYnNlcnZlZCB0aGUgZGVhcnRoIG9mIGluaGFiaXRhbnRzIGluIHRoZSBjb3VudHJ5LCBhbmQgdGhhdCB0aG9zZSB3aG8gdGlsbGVkIGl0cyBzb2lsIG9yIHRlbmRlZCBpdHMgZmxvY2tzIHRoZXJlIHdlcmUgaW1wb3J0ZWQgYmFyYmFyaWFuIHNsYXZlcywgaGUgdGhlbiBmaXJzdCBjb25jZWl2ZWQgdGhlIHB1YmxpYyBwb2xpY3kgd2hpY2ggd2FzIHRoZSBjYXVzZSBvZiBjb3VudGxlc3MgaWxscyB0byB0aGUgdHdvIGJyb3RoZXJzLiBIb3dldmVyLCB0aGUgZW5lcmd5IGFuZCBhbWJpdGlvbiBvZiBUaWJlcml1cyB3ZXJlIG1vc3Qgb2YgYWxsIGtpbmRsZWQgYnkgdGhlIHBlb3BsZSB0aGVtc2VsdmVzLCB3aG8gcG9zdGVkIHdyaXRpbmdzIG9uIHBvcnRpY29lcywgaG91c2Utd2FsbHMsIGFuZCBtb251bWVudHMsIGNhbGxpbmcgdXBvbiBoaW0gdG8gcmVjb3ZlciBmb3IgdGhlIHBvb3IgdGhlIHB1YmxpYyBsYW5kLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIERpdi4gMi4yOS4iIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+ZGUgZGl2LjwvdGl0bGU+IGlpLiAyOSwgNjIuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5kZSBkaXYuPC90aXRsZT4gaWkuIDI5LCA2Mi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIGRpZCBub3QsIGhvd2V2ZXIsIGRyYXcgdXAgaGlzIGxhdyBieSBoaW1zZWxmLCBidXQgdG9vayBjb3Vuc2VsIHdpdGggdGhlIGNpdGl6ZW5zIHdobyB3ZXJlIGZvcmVtb3N0IGluIHZpcnR1ZSBhbmQgcmVwdXRhdGlvbiwgYW1vbmcgd2hvbSB3ZXJlIENyYXNzdXMgdGhlIHBvbnRpZmV4IG1heGltdXMsIE11Y2l1cyBTY2Fldm9sYSB0aGUganVyaXN0LCB3aG8gd2FzIHRoZW4gY29uc3VsLCBhbmQgQXBwaXVzIENsYXVkaXVzLCBoaXMgZmF0aGVyLWluLWxhdy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIHRob3VnaHQgdGhhdCBhIGxhdyBkZWFsaW5nIHdpdGggaW5qdXN0aWNlIGFuZCByYXBhY2l0eSBzbyBncmVhdCB3YXMgbmV2ZXIgZHJhd24gdXAgaW4gbWlsZGVyIGFuZCBnZW50bGVyIHRlcm1zLiBGb3IgbWVuIHdobyBvdWdodCB0byBoYXZlIGJlZW4gcHVuaXNoZWQgZm9yIHRoZWlyIGRpc29iZWRpZW5jZSBhbmQgdG8gaGF2ZSBzdXJyZW5kZXJlZCB3aXRoIHBheW1lbnQgb2YgYSBmaW5lIHRoZSBsYW5kIHdoaWNoIHRoZXkgd2VyZSBpbGxlZ2FsbHkgZW5qb3lpbmcsIHRoZXNlIG1lbiBpdCBtZXJlbHkgb3JkZXJlZCB0byBhYmFuZG9uIHRoZWlyIGluanVzdCBhY3F1aXNpdGlvbnMgdXBvbiBiZWluZyBwYWlkIHRoZWlyIHZhbHVlLCBhbmQgdG8gYWRtaXQgaW50byBvd25lcnNoaXAgb2YgdGhlbSBzdWNoIGNpdGl6ZW5zIGFzIG5lZWRlZCBhc3Npc3RhbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWx0aG91Z2ggdGhlIHJlY3RpZmljYXRpb24gb2YgdGhlIHdyb25nIHdhcyBzbyBjb25zaWRlcmF0ZSwgdGhlIHBlb3BsZSB3ZXJlIHNhdGlzZmllZCB0byBsZXQgYnlnb25lcyBiZSBieWdvbmVzIGlmIHRoZXkgY291bGQgYmUgc2VjdXJlIGZyb20gc3VjaCB3cm9uZyBpbiB0aGUgZnV0dXJlOyB0aGUgbWVuIG9mIHdlYWx0aCBhbmQgc3Vic3RhbmNlLCBob3dldmVyLCB3ZXJlIGxlZCBieSB0aGVpciBncmVlZCB0byBoYXRlIHRoZSBsYXcsIGFuZCBieSB0aGVpciB3cmF0aCBhbmQgY29udGVudGlvdXNuZXNzIHRvIGhhdGUgdGhlIGxhd2dpdmVyLCBhbmQgdHJpZWQgdG8gZGlzc3VhZGUgdGhlIHBlb3BsZSBieSBhbGxlZ2luZyB0aGF0IFRpYmVyaXVzIHdhcyBpbnRyb2R1Y2luZyBhIHJlLWRpc3RyaWJ1dGlvbiBvZiBsYW5kIGZvciB0aGUgY29uZnVzaW9uIG9mIHRoZSBib2R5IHBvbGl0aWMsIGFuZCB3YXMgc3RpcnJpbmcgdXAgYSBnZW5lcmFsIHJldm9sdXRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBkaWQgbm90LCBob3dldmVyLCBkcmF3IHVwIGhpcyBsYXcgYnkgaGltc2VsZiwgYnV0IHRvb2sgY291bnNlbCB3aXRoIHRoZSBjaXRpemVucyB3aG8gd2VyZSBmb3JlbW9zdCBpbiB2aXJ0dWUgYW5kIHJlcHV0YXRpb24sIGFtb25nIHdob20gd2VyZSBDcmFzc3VzIHRoZSBwb250aWZleCBtYXhpbXVzLCBNdWNpdXMgU2NhZXZvbGEgdGhlIGp1cmlzdCwgd2hvIHdhcyB0aGVuIGNvbnN1bCwgYW5kIEFwcGl1cyBDbGF1ZGl1cywgaGlzIGZhdGhlci1pbi1sYXcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyB0aG91Z2h0IHRoYXQgYSBsYXcgZGVhbGluZyB3aXRoIGluanVzdGljZSBhbmQgcmFwYWNpdHkgc28gZ3JlYXQgd2FzIG5ldmVyIGRyYXduIHVwIGluIG1pbGRlciBhbmQgZ2VudGxlciB0ZXJtcy4gRm9yIG1lbiB3aG8gb3VnaHQgdG8gaGF2ZSBiZWVuIHB1bmlzaGVkIGZvciB0aGVpciBkaXNvYmVkaWVuY2UgYW5kIHRvIGhhdmUgc3VycmVuZGVyZWQgd2l0aCBwYXltZW50IG9mIGEgZmluZSB0aGUgbGFuZCB3aGljaCB0aGV5IHdlcmUgaWxsZWdhbGx5IGVuam95aW5nLCB0aGVzZSBtZW4gaXQgbWVyZWx5IG9yZGVyZWQgdG8gYWJhbmRvbiB0aGVpciBpbmp1c3QgYWNxdWlzaXRpb25zIHVwb24gYmVpbmcgcGFpZCB0aGVpciB2YWx1ZSwgYW5kIHRvIGFkbWl0IGludG8gb3duZXJzaGlwIG9mIHRoZW0gc3VjaCBjaXRpemVucyBhcyBuZWVkZWQgYXNzaXN0YW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCB0aGUgcmVjdGlmaWNhdGlvbiBvZiB0aGUgd3Jvbmcgd2FzIHNvIGNvbnNpZGVyYXRlLCB0aGUgcGVvcGxlIHdlcmUgc2F0aXNmaWVkIHRvIGxldCBieWdvbmVzIGJlIGJ5Z29uZXMgaWYgdGhleSBjb3VsZCBiZSBzZWN1cmUgZnJvbSBzdWNoIHdyb25nIGluIHRoZSBmdXR1cmU7IHRoZSBtZW4gb2Ygd2VhbHRoIGFuZCBzdWJzdGFuY2UsIGhvd2V2ZXIsIHdlcmUgbGVkIGJ5IHRoZWlyIGdyZWVkIHRvIGhhdGUgdGhlIGxhdywgYW5kIGJ5IHRoZWlyIHdyYXRoIGFuZCBjb250ZW50aW91c25lc3MgdG8gaGF0ZSB0aGUgbGF3Z2l2ZXIsIGFuZCB0cmllZCB0byBkaXNzdWFkZSB0aGUgcGVvcGxlIGJ5IGFsbGVnaW5nIHRoYXQgVGliZXJpdXMgd2FzIGludHJvZHVjaW5nIGEgcmUtZGlzdHJpYnV0aW9uIG9mIGxhbmQgZm9yIHRoZSBjb25mdXNpb24gb2YgdGhlIGJvZHkgcG9saXRpYywgYW5kIHdhcyBzdGlycmluZyB1cCBhIGdlbmVyYWwgcmV2b2x1dGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXkgYWNjb21wbGlzaGVkIG5vdGhpbmc7IGZvciBUaWJlcml1cywgc3RyaXZpbmcgdG8gc3VwcG9ydCBhIG1lYXN1cmUgd2hpY2ggd2FzIGhvbm91cmFibGUgYW5kIGp1c3Qgd2l0aCBhbiBlbG9xdWVuY2UgdGhhdCB3b3VsZCBoYXZlIGFkb3JuZWQgZXZlbiBhIG1lYW5lciBjYXVzZSwgd2FzIGZvcm1pZGFibGUgYW5kIGludmluY2libGUsIHdoZW5ldmVyLCB3aXRoIHRoZSBwZW9wbGUgY3Jvd2RpbmcgYXJvdW5kIHRoZSByb3N0cmEsIGhlIHRvb2sgaGlzIHN0YW5kIHRoZXJlIGFuZCBwbGVhZGVkIGZvciB0aGUgcG9vci4gCjxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSB3aWxkIGJlYXN0cyB0aGF0IHJvYW0gb3ZlciBJdGFseSw8L3E+IGhlIHdvdWxkIHNheSwgCltsZHF1byBdaGF2ZSBldmVyeSBvbmUgb2YgdGhlbSBhIGNhdmUgb3IgbGFpciB0byBsdXJrIGluOyAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgdGhlIG1lbiB3aG8gZmlnaHQgYW5kIGRpZSBmb3IgSXRhbHkgZW5qb3kgdGhlIGNvbW1vbiBhaXIgYW5kIGxpZ2h0LCBpbmRlZWQsIGJ1dCBub3RoaW5nIGVsc2U7IGhvdXNlbGVzcyBhbmQgaG9tZWxlc3MgdGhleSB3YW5kZXIgYWJvdXQgd2l0aCB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4uIEFuZCBpdCBpcyB3aXRoIGx5aW5nIGxpcHMgdGhhdCB0aGVpciBpbXBlcmF0b3JzIGV4aG9ydCB0aGUgc29sZGllcnMgaW4gdGhlaXIgYmF0dGxlcyB0byBkZWZlbmQgc2VwdWxjaHJlcyBhbmQgc2hyaW5lcyBmcm9tIHRoZSBlbmVteTsgZm9yIG5vdCBhIG1hbiBvZiB0aGVtIGhhcyBhbiBoZXJlZGl0YXJ5IGFsdGFyLCBub3Qgb25lIG9mIGFsbCB0aGVzZSBtYW55IFJvbWFucyBhbiBhbmNlc3RyYWwgdG9tYiwgYnV0IHRoZXkgZmlnaHQgYW5kIGRpZSB0byBzdXBwb3J0IG90aGVycyBpbiB3ZWFsdGggYW5kIGx1eHVyeSwgYW5kIHRob3VnaCB0aGV5IGFyZSBzdHlsZWQgbWFzdGVycyBvZiB0aGUgd29ybGQsIHRoZXkgaGF2ZSBub3QgYSBzaW5nbGUgY2xvZCBvZiBlYXJ0aCB0aGF0IGlzIHRoZWlyIG93bi5bcmRxdW8gXQoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5IGFjY29tcGxpc2hlZCBub3RoaW5nOyBmb3IgVGliZXJpdXMsIHN0cml2aW5nIHRvIHN1cHBvcnQgYSBtZWFzdXJlIHdoaWNoIHdhcyBob25vdXJhYmxlIGFuZCBqdXN0IHdpdGggYW4gZWxvcXVlbmNlIHRoYXQgd291bGQgaGF2ZSBhZG9ybmVkIGV2ZW4gYSBtZWFuZXIgY2F1c2UsIHdhcyBmb3JtaWRhYmxlIGFuZCBpbnZpbmNpYmxlLCB3aGVuZXZlciwgd2l0aCB0aGUgcGVvcGxlIGNyb3dkaW5nIGFyb3VuZCB0aGUgcm9zdHJhLCBoZSB0b29rIGhpcyBzdGFuZCB0aGVyZSBhbmQgcGxlYWRlZCBmb3IgdGhlIHBvb3IuIAo8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSB3aWxkIGJlYXN0cyB0aGF0IHJvYW0gb3ZlciBJdGFseSw8L3E+IGhlIHdvdWxkIHNheSwgCltsZHF1byBdaGF2ZSBldmVyeSBvbmUgb2YgdGhlbSBhIGNhdmUgb3IgbGFpciB0byBsdXJrIGluOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aGUgbWVuIHdobyBmaWdodCBhbmQgZGllIGZvciBJdGFseSBlbmpveSB0aGUgY29tbW9uIGFpciBhbmQgbGlnaHQsIGluZGVlZCwgYnV0IG5vdGhpbmcgZWxzZTsgaG91c2VsZXNzIGFuZCBob21lbGVzcyB0aGV5IHdhbmRlciBhYm91dCB3aXRoIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbi4gQW5kIGl0IGlzIHdpdGggbHlpbmcgbGlwcyB0aGF0IHRoZWlyIGltcGVyYXRvcnMgZXhob3J0IHRoZSBzb2xkaWVycyBpbiB0aGVpciBiYXR0bGVzIHRvIGRlZmVuZCBzZXB1bGNocmVzIGFuZCBzaHJpbmVzIGZyb20gdGhlIGVuZW15OyBmb3Igbm90IGEgbWFuIG9mIHRoZW0gaGFzIGFuIGhlcmVkaXRhcnkgYWx0YXIsIG5vdCBvbmUgb2YgYWxsIHRoZXNlIG1hbnkgUm9tYW5zIGFuIGFuY2VzdHJhbCB0b21iLCBidXQgdGhleSBmaWdodCBhbmQgZGllIHRvIHN1cHBvcnQgb3RoZXJzIGluIHdlYWx0aCBhbmQgbHV4dXJ5LCBhbmQgdGhvdWdoIHRoZXkgYXJlIHN0eWxlZCBtYXN0ZXJzIG9mIHRoZSB3b3JsZCwgdGhleSBoYXZlIG5vdCBhIHNpbmdsZSBjbG9kIG9mIGVhcnRoIHRoYXQgaXMgdGhlaXIgb3duLltyZHF1byBdCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggd29yZHMgYXMgdGhlc2UsIHRoZSBwcm9kdWN0IG9mIGEgbG9mdHkgc3Bpcml0IGFuZCBnZW51aW5lIGZlZWxpbmcsIGFuZCBmYWxsaW5nIHVwb24gdGhlIGVhcnMgb2YgYSBwZW9wbGUgcHJvZm91bmRseSBtb3ZlZCBhbmQgZnVsbHkgYXJvdXNlZCB0byB0aGUgc3BlYWtlcidzIHN1cHBvcnQsIG5vIGFkdmVyc2FyeSBvZiBUaWJlcml1cyBjb3VsZCBzdWNjZXNzZnVsbHkgd2l0aHN0YW5kLiBBYmFuZG9uaW5nIHRoZXJlZm9yZSBhbGwgY291bnRlci1wbGVhZGluZywgdGhleSBhZGRyZXNzZWQgdGhlbXNlbHZlcyB0byBNYXJjdXMgT2N0YXZpdXMsIG9uZSBvZiB0aGUgcG9wdWxhciB0cmlidW5lcywgYSB5b3VuZyBtYW4gb2Ygc29iZXIgY2hhcmFjdGVyLCBkaXNjcmVldCwgYW5kIGFuIGludGltYXRlIGNvbXBhbmlvbiBvZiBUaWJlcml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhpcyBhY2NvdW50IE9jdGF2aXVzIGF0IGZpcnN0IHRyaWVkIHRvIGhvbGQgaGltc2VsZiBhbG9vZiwgb3V0IG9mIHJlZ2FyZCBmb3IgVGliZXJpdXM7IGJ1dCBoZSB3YXMgZm9yY2VkIGZyb20gaGlzIHBvc2l0aW9uLCBhcyBpdCB3ZXJlLCBieSB0aGUgcHJheWVycyBhbmQgc3VwcGxpY2F0aW9ucyBvZiBtYW55IGluZmx1ZW50aWFsIG1lbiwgc28gdGhhdCBoZSBzZXQgaGltc2VsZiBpbiBvcHBvc2l0aW9uIHRvIFRpYmVyaXVzIGFuZCBzdGF2ZWQgb2ZmIHRoZSBwYXNzYWdlIG9mIHRoZSBsYXcuIE5vdywgdGhlIGRlY2lzaXZlIHBvd2VyIGlzIGluIHRoZSBoYW5kcyBvZiBhbnkgdHJpYnVuZSB3aG8gaW50ZXJwb3NlcyBoaXMgdmV0bzsgZm9yIHRoZSB3aXNoZXMgb2YgdGhlIG1ham9yaXR5IGF2YWlsIG5vdGhpbmcgaWYgb25lIHRyaWJ1bmUgaXMgaW4gb3Bwb3NpdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW5jZW5zZWQgYXQgdGhpcyBwcm9jZWR1cmUsIFRpYmVyaXVzIHdpdGhkcmV3IGhpcyBjb25zaWRlcmF0ZSBsYXcsIGFuZCBpbnRyb2R1Y2VkIHRoaXMgdGltZSBvbmUgd2hpY2ggd2FzIG1vcmUgYWdyZWVhYmxlIHRvIHRoZSBtdWx0aXR1ZGUgYW5kIG1vcmUgc2V2ZXJlIGFnYWluc3QgdGhlIHdyb25nZG9lcnMsIHNpbmNlIGl0IHNpbXBseSBvcmRlcmVkIHRoZW0gdG8gdmFjYXRlIHdpdGhvdXQgY29tcGVuc2F0aW9uIHRoZSBsYW5kIHdoaWNoIHRoZXkgaGFkIGFjcXVpcmVkIGluIHZpb2xhdGlvbiBvZiB0aGUgZWFybGllciBsYXdzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3b3JkcyBhcyB0aGVzZSwgdGhlIHByb2R1Y3Qgb2YgYSBsb2Z0eSBzcGlyaXQgYW5kIGdlbnVpbmUgZmVlbGluZywgYW5kIGZhbGxpbmcgdXBvbiB0aGUgZWFycyBvZiBhIHBlb3BsZSBwcm9mb3VuZGx5IG1vdmVkIGFuZCBmdWxseSBhcm91c2VkIHRvIHRoZSBzcGVha2VyJ3Mgc3VwcG9ydCwgbm8gYWR2ZXJzYXJ5IG9mIFRpYmVyaXVzIGNvdWxkIHN1Y2Nlc3NmdWxseSB3aXRoc3RhbmQuIEFiYW5kb25pbmcgdGhlcmVmb3JlIGFsbCBjb3VudGVyLXBsZWFkaW5nLCB0aGV5IGFkZHJlc3NlZCB0aGVtc2VsdmVzIHRvIE1hcmN1cyBPY3Rhdml1cywgb25lIG9mIHRoZSBwb3B1bGFyIHRyaWJ1bmVzLCBhIHlvdW5nIG1hbiBvZiBzb2JlciBjaGFyYWN0ZXIsIGRpc2NyZWV0LCBhbmQgYW4gaW50aW1hdGUgY29tcGFuaW9uIG9mIFRpYmVyaXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoaXMgYWNjb3VudCBPY3Rhdml1cyBhdCBmaXJzdCB0cmllZCB0byBob2xkIGhpbXNlbGYgYWxvb2YsIG91dCBvZiByZWdhcmQgZm9yIFRpYmVyaXVzOyBidXQgaGUgd2FzIGZvcmNlZCBmcm9tIGhpcyBwb3NpdGlvbiwgYXMgaXQgd2VyZSwgYnkgdGhlIHByYXllcnMgYW5kIHN1cHBsaWNhdGlvbnMgb2YgbWFueSBpbmZsdWVudGlhbCBtZW4sIHNvIHRoYXQgaGUgc2V0IGhpbXNlbGYgaW4gb3Bwb3NpdGlvbiB0byBUaWJlcml1cyBhbmQgc3RhdmVkIG9mZiB0aGUgcGFzc2FnZSBvZiB0aGUgbGF3LiBOb3csIHRoZSBkZWNpc2l2ZSBwb3dlciBpcyBpbiB0aGUgaGFuZHMgb2YgYW55IHRyaWJ1bmUgd2hvIGludGVycG9zZXMgaGlzIHZldG87IGZvciB0aGUgd2lzaGVzIG9mIHRoZSBtYWpvcml0eSBhdmFpbCBub3RoaW5nIGlmIG9uZSB0cmlidW5lIGlzIGluIG9wcG9zaXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluY2Vuc2VkIGF0IHRoaXMgcHJvY2VkdXJlLCBUaWJlcml1cyB3aXRoZHJldyBoaXMgY29uc2lkZXJhdGUgbGF3LCBhbmQgaW50cm9kdWNlZCB0aGlzIHRpbWUgb25lIHdoaWNoIHdhcyBtb3JlIGFncmVlYWJsZSB0byB0aGUgbXVsdGl0dWRlIGFuZCBtb3JlIHNldmVyZSBhZ2FpbnN0IHRoZSB3cm9uZ2RvZXJzLCBzaW5jZSBpdCBzaW1wbHkgb3JkZXJlZCB0aGVtIHRvIHZhY2F0ZSB3aXRob3V0IGNvbXBlbnNhdGlvbiB0aGUgbGFuZCB3aGljaCB0aGV5IGhhZCBhY3F1aXJlZCBpbiB2aW9sYXRpb24gb2YgdGhlIGVhcmxpZXIgbGF3cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWxtb3N0IGV2ZXJ5IGRheSwgdGhlcmVmb3JlLCB0aGVyZSB3ZXJlIGZvcmVuc2ljIGNvbnRlc3RzIGJldHdlZW4gVGliZXJpdXMgYW5kIE9jdGF2aXVzLCBpbiB3aGljaCwgYXMgd2UgYXJlIHRvbGQsIGFsdGhvdWdoIGJvdGggc3Ryb3ZlIHRvZ2V0aGVyIHdpdGggdGhlIHV0bW9zdCBlYXJuZXN0bmVzcyBhbmQgcml2YWxyeSwgbmVpdGhlciBhYnVzZWQgdGhlIG90aGVyIG9yIGxldCBmYWxsIGEgc2luZ2xlIHdvcmQgYWJvdXQgdGhlIG90aGVyIHdoaWNoIGFuZ2VyIG1hZGUgdW5zZWVtbHkuIEZvciBub3Qgb25seSAKPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW4gQmFjY2hpYyByZXZlbHJpZXMsPC9xPiBhcyBpdCBhcHBlYXJzLCBidXQgYWxzbyBpbiB0aGUgZXhlcmNpc2Ugb2Ygcml2YWxyeSBhbmQgd3JhdGgsIGEgbm9ibGUgbmF0dXJlIGFuZCBhIHNvdW5kIHRyYWluaW5nIHJlc3RyYWluIGFuZCByZWd1bGF0ZSB0aGUgbWluZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdoZW4gVGliZXJpdXMgb2JzZXJ2ZWQgdGhhdCBPY3Rhdml1cyBoaW1zZWxmIHdhcyBhbWVuYWJsZSB0byB0aGUgbGF3IGFzIGEgbGFyZ2UgaG9sZGVyIG9mIHRoZSBwdWJsaWMgbGFuZCwgaGUgYmVnZ2VkIGhpbSB0byByZW1pdCBoaXMgb3Bwb3NpdGlvbiwgcHJvbWlzaW5nIHRvIHBheSBoaW0gdGhlIHZhbHVlIG9mIHRoZSBsYW5kIG91dCBvZiBoaXMgb3duIG1lYW5zLCBhbHRob3VnaCB0aGVzZSB3ZXJlIG5vdCBzcGxlbmRpZC4gQnV0IE9jdGF2aXVzIHdvdWxkIG5vdCBjb25zZW50IHRvIHRoaXMsIGFuZCB0aGVyZWZvcmUgVGliZXJpdXMgaXNzdWVkIGFuIGVkaWN0IGZvcmJpZGRpbmcgYWxsIHRoZSBvdGhlciBtYWdpc3RyYXRlcyB0byB0cmFuc2FjdCBhbnkgcHVibGljIGJ1c2luZXNzIHVudGlsIHN1Y2ggdGltZSBhcyB0aGUgdm90ZSBzaG91bGQgYmUgY2FzdCBlaXRoZXIgZm9yIG9yIGFnYWluc3QgaGlzIGxhdy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyBwdXQgaGlzIHByaXZhdGUgc2VhbCB1cG9uIHRoZSB0ZW1wbGUgb2YgU2F0dXJuLCBpbiBvcmRlciB0aGF0IHRoZSBxdWFlc3RvcnMgbWlnaHQgbm90IHRha2UgYW55IG1vbmV5IGZyb20gaXRzIHRyZWFzdXJ5IG9yIHBheSBhbnkgaW50byBpdCwgYW5kIGhlIG1hZGUgcHJvY2xhbWF0aW9uIHRoYXQgYSBwZW5hbHR5IHdvdWxkIGJlIGltcG9zZWQgdXBvbiBzdWNoIHByYWV0b3JzIGFzIGRpc29iZXllZCwgc28gdGhhdCBhbGwgbWFnaXN0cmF0ZXMgZ3JldyBmZWFyZnVsIGFuZCBjZWFzZWQgcGVyZm9ybWluZyB0aGVpciBzZXZlcmFsIGZ1bmN0aW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmV1cG9uIHRoZSBtZW4gb2YgcHJvcGVydHkgcHV0IG9uIHRoZSBnYXJiIG9mIG1vdXJuaW5nIGFuZCB3ZW50IGFib3V0IHRoZSBmb3J1bSBpbiBwaXRpZnVsIGFuZCBsb3dseSBndWlzZTsgYnV0IGluIHNlY3JldCB0aGV5IHBsb3R0ZWQgYWdhaW5zdCB0aGUgbGlmZSBvZiBUaWJlcml1cyBhbmQgdHJpZWQgdG8gcmFpc2UgYSBiYW5kIG9mIGFzc2Fzc2lucyB0byB0YWtlIGhpbSBvZmYsIHNvIHRoYXQgVGliZXJpdXMgb24gaGlzIHBhcnRbbWRhc2ggXWFuZCBldmVyeWJvZHkga25ldyBpdFttZGFzaCBdd29yZSBhIGNvbmNlYWxlZCBzaG9ydC1zd29yZCBzdWNoIGFzIGJyaWdhbmRzIHVzZSAodGhlIG5hbWUgZm9yIGl0IGlzIAo8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kb2xvPC9xPikuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsbW9zdCBldmVyeSBkYXksIHRoZXJlZm9yZSwgdGhlcmUgd2VyZSBmb3JlbnNpYyBjb250ZXN0cyBiZXR3ZWVuIFRpYmVyaXVzIGFuZCBPY3Rhdml1cywgaW4gd2hpY2gsIGFzIHdlIGFyZSB0b2xkLCBhbHRob3VnaCBib3RoIHN0cm92ZSB0b2dldGhlciB3aXRoIHRoZSB1dG1vc3QgZWFybmVzdG5lc3MgYW5kIHJpdmFscnksIG5laXRoZXIgYWJ1c2VkIHRoZSBvdGhlciBvciBsZXQgZmFsbCBhIHNpbmdsZSB3b3JkIGFib3V0IHRoZSBvdGhlciB3aGljaCBhbmdlciBtYWRlIHVuc2VlbWx5LiBGb3Igbm90IG9ubHkgCjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW4gQmFjY2hpYyByZXZlbHJpZXMsPC9xPiBhcyBpdCBhcHBlYXJzLCBidXQgYWxzbyBpbiB0aGUgZXhlcmNpc2Ugb2Ygcml2YWxyeSBhbmQgd3JhdGgsIGEgbm9ibGUgbmF0dXJlIGFuZCBhIHNvdW5kIHRyYWluaW5nIHJlc3RyYWluIGFuZCByZWd1bGF0ZSB0aGUgbWluZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIFRpYmVyaXVzIG9ic2VydmVkIHRoYXQgT2N0YXZpdXMgaGltc2VsZiB3YXMgYW1lbmFibGUgdG8gdGhlIGxhdyBhcyBhIGxhcmdlIGhvbGRlciBvZiB0aGUgcHVibGljIGxhbmQsIGhlIGJlZ2dlZCBoaW0gdG8gcmVtaXQgaGlzIG9wcG9zaXRpb24sIHByb21pc2luZyB0byBwYXkgaGltIHRoZSB2YWx1ZSBvZiB0aGUgbGFuZCBvdXQgb2YgaGlzIG93biBtZWFucywgYWx0aG91Z2ggdGhlc2Ugd2VyZSBub3Qgc3BsZW5kaWQuIEJ1dCBPY3Rhdml1cyB3b3VsZCBub3QgY29uc2VudCB0byB0aGlzLCBhbmQgdGhlcmVmb3JlIFRpYmVyaXVzIGlzc3VlZCBhbiBlZGljdCBmb3JiaWRkaW5nIGFsbCB0aGUgb3RoZXIgbWFnaXN0cmF0ZXMgdG8gdHJhbnNhY3QgYW55IHB1YmxpYyBidXNpbmVzcyB1bnRpbCBzdWNoIHRpbWUgYXMgdGhlIHZvdGUgc2hvdWxkIGJlIGNhc3QgZWl0aGVyIGZvciBvciBhZ2FpbnN0IGhpcyBsYXcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gcHV0IGhpcyBwcml2YXRlIHNlYWwgdXBvbiB0aGUgdGVtcGxlIG9mIFNhdHVybiwgaW4gb3JkZXIgdGhhdCB0aGUgcXVhZXN0b3JzIG1pZ2h0IG5vdCB0YWtlIGFueSBtb25leSBmcm9tIGl0cyB0cmVhc3VyeSBvciBwYXkgYW55IGludG8gaXQsIGFuZCBoZSBtYWRlIHByb2NsYW1hdGlvbiB0aGF0IGEgcGVuYWx0eSB3b3VsZCBiZSBpbXBvc2VkIHVwb24gc3VjaCBwcmFldG9ycyBhcyBkaXNvYmV5ZWQsIHNvIHRoYXQgYWxsIG1hZ2lzdHJhdGVzIGdyZXcgZmVhcmZ1bCBhbmQgY2Vhc2VkIHBlcmZvcm1pbmcgdGhlaXIgc2V2ZXJhbCBmdW5jdGlvbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJldXBvbiB0aGUgbWVuIG9mIHByb3BlcnR5IHB1dCBvbiB0aGUgZ2FyYiBvZiBtb3VybmluZyBhbmQgd2VudCBhYm91dCB0aGUgZm9ydW0gaW4gcGl0aWZ1bCBhbmQgbG93bHkgZ3Vpc2U7IGJ1dCBpbiBzZWNyZXQgdGhleSBwbG90dGVkIGFnYWluc3QgdGhlIGxpZmUgb2YgVGliZXJpdXMgYW5kIHRyaWVkIHRvIHJhaXNlIGEgYmFuZCBvZiBhc3Nhc3NpbnMgdG8gdGFrZSBoaW0gb2ZmLCBzbyB0aGF0IFRpYmVyaXVzIG9uIGhpcyBwYXJ0W21kYXNoIF1hbmQgZXZlcnlib2R5IGtuZXcgaXRbbWRhc2ggXXdvcmUgYSBjb25jZWFsZWQgc2hvcnQtc3dvcmQgc3VjaCBhcyBicmlnYW5kcyB1c2UgKHRoZSBuYW1lIGZvciBpdCBpcyAKPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kb2xvPC9xPikuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGFwcG9pbnRlZCBkYXkgd2FzIGNvbWUgYW5kIFRpYmVyaXVzIHdhcyBzdW1tb25pbmcgdGhlIHBlb3BsZSB0byB0aGUgdm90ZSwgdGhlIHZvdGluZyB1cm5zIHdlcmUgc3RvbGVuIGF3YXkgYnkgdGhlIHBhcnR5IG9mIHRoZSByaWNoLCBhbmQgZ3JlYXQgY29uZnVzaW9uIGFyb3NlLiBIb3dldmVyLCB0aGUgc3VwcG9ydGVycyBvZiBUaWJlcml1cyB3ZXJlIG51bWVyb3VzIGVub3VnaCB0byBmb3JjZSB0aGUgaXNzdWUsIGFuZCB3ZXJlIGhhbmRpbmcgdG9nZXRoZXIgZm9yIHRoaXMgcHVycG9zZSwgd2hlbiBNYW5saXVzIGFuZCBGdWx2aXVzLCBtZW4gb2YgY29uc3VsYXIgZGlnbml0eSwgZmVsbCBkb3duIGJlZm9yZSBUaWJlcml1cywgY2xhc3BlZCBoaXMgaGFuZHMsIGFuZCB3aXRoIHRlYXJzIGJlc291Z2h0IGhpbSB0byBkZXNpc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRpYmVyaXVzLCBjb25zY2lvdXMgdGhhdCB0aGUgZnV0dXJlIHdhcyBub3cgYWxsIGJ1dCBkZXNwZXJhdGUsIGFuZCBtb3ZlZCBieSByZXNwZWN0IGZvciB0aGUgbWVuLCBhc2tlZCB0aGVtIHdoYXQgdGhleSB3b3VsZCBoYXZlIGhpbSBkby4gVGhleSByZXBsaWVkIHRoYXQgdGhleSB3ZXJlIG5vdCBjb21wZXRlbnQgdG8gYWR2aXNlIGluIHNvIGdyYXZlIGEgY3Jpc2lzLCBhbmQgdXJnZWQgaGltIHdpdGggZW50cmVhdGllcyB0byBzdWJtaXQgdGhlIGNhc2UgdG8gdGhlIHNlbmF0ZS4gVG8gdGhpcyBUaWJlcml1cyBjb25zZW50ZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgYXBwb2ludGVkIGRheSB3YXMgY29tZSBhbmQgVGliZXJpdXMgd2FzIHN1bW1vbmluZyB0aGUgcGVvcGxlIHRvIHRoZSB2b3RlLCB0aGUgdm90aW5nIHVybnMgd2VyZSBzdG9sZW4gYXdheSBieSB0aGUgcGFydHkgb2YgdGhlIHJpY2gsIGFuZCBncmVhdCBjb25mdXNpb24gYXJvc2UuIEhvd2V2ZXIsIHRoZSBzdXBwb3J0ZXJzIG9mIFRpYmVyaXVzIHdlcmUgbnVtZXJvdXMgZW5vdWdoIHRvIGZvcmNlIHRoZSBpc3N1ZSwgYW5kIHdlcmUgaGFuZGluZyB0b2dldGhlciBmb3IgdGhpcyBwdXJwb3NlLCB3aGVuIE1hbmxpdXMgYW5kIEZ1bHZpdXMsIG1lbiBvZiBjb25zdWxhciBkaWduaXR5LCBmZWxsIGRvd24gYmVmb3JlIFRpYmVyaXVzLCBjbGFzcGVkIGhpcyBoYW5kcywgYW5kIHdpdGggdGVhcnMgYmVzb3VnaHQgaGltIHRvIGRlc2lzdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRpYmVyaXVzLCBjb25zY2lvdXMgdGhhdCB0aGUgZnV0dXJlIHdhcyBub3cgYWxsIGJ1dCBkZXNwZXJhdGUsIGFuZCBtb3ZlZCBieSByZXNwZWN0IGZvciB0aGUgbWVuLCBhc2tlZCB0aGVtIHdoYXQgdGhleSB3b3VsZCBoYXZlIGhpbSBkby4gVGhleSByZXBsaWVkIHRoYXQgdGhleSB3ZXJlIG5vdCBjb21wZXRlbnQgdG8gYWR2aXNlIGluIHNvIGdyYXZlIGEgY3Jpc2lzLCBhbmQgdXJnZWQgaGltIHdpdGggZW50cmVhdGllcyB0byBzdWJtaXQgdGhlIGNhc2UgdG8gdGhlIHNlbmF0ZS4gVG8gdGhpcyBUaWJlcml1cyBjb25zZW50ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHRoZSBzZW5hdGUgaW4gaXRzIHNlc3Npb24gYWNjb21wbGlzaGVkIG5vdGhpbmcsIG93aW5nIHRvIHRoZSBwcmV2YWlsaW5nIGluZmx1ZW5jZSBvZiB0aGUgd2VhbHRoeSBjbGFzcyBpbiBpdCwgYW5kIHRoZXJlZm9yZSBUaWJlcml1cyByZXNvcnRlZCB0byBhIG1lYXN1cmUgd2hpY2ggd2FzIGlsbGVnYWwgYW5kIHVuc2VlbWx5LCB0aGUgZWplY3Rpb24gb2YgT2N0YXZpdXMgZnJvbSBoaXMgb2ZmaWNlOyBidXQgaGUgd2FzIHVuYWJsZSBpbiBhbnkgb3RoZXIgd2F5IHRvIGJyaW5nIHRoaXMgbGF3IHRvIHRoZSB2b3RlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBmaXJzdCBwbGFjZSwgaG93ZXZlciwgaGUgYmVnZ2VkIE9jdGF2aXVzIGluIHB1YmxpYywgYWRkcmVzc2luZyBoaW0gd2l0aCBraW5kbHkgd29yZHMgYW5kIGNsYXNwaW5nIGhpcyBoYW5kcywgdG8gZ2l2ZSBpbiBhbmQgZ3JhdGlmeSB0aGUgcGVvcGxlLCB3aG8gZGVtYW5kZWQgb25seSB0aGVpciBqdXN0IHJpZ2h0cywgYW5kIHdvdWxkIHJlY2VpdmUgb25seSBhIHRyaWZsaW5nIHJldHVybiBmb3IgZ3JlYXQgdG9pbHMgYW5kIHBlcmlscy4gQnV0IE9jdGF2aXVzIHJlamVjdGVkIHRoZSBwZXRpdGlvbiwgYW5kIHRoZXJlZm9yZSBUaWJlcml1cywgYWZ0ZXIgcHJlbWlzaW5nIHRoYXQsIHNpbmNlIHRoZXkgd2VyZSBjb2xsZWFndWVzIGluIG9mZmljZSB3aXRoIGVxdWFsIHBvd2VycyBhbmQgZGlmZmVyZWQgb24gd2VpZ2h0eSBtZWFzdXJlcywgaXQgd2FzIGltcG9zc2libGUgZm9yIHRoZW0gdG8gY29tcGxldGUgdGhlaXIgdGVybSBvZiBvZmZpY2Ugd2l0aG91dCBvcGVuIHdhciwgc2FpZCBoZSBzYXcgb25seSBvbmUgcmVtZWR5IGZvciB0aGlzLCBhbmQgdGhhdCB3YXMgZm9yIG9uZSBvciB0aGUgb3RoZXIgb2YgdGhlbSB0byBnaXZlIHVwIGhpcyBvZmZpY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgaGUgdXJnZWQgT2N0YXZpdXMgdG8gcHV0IHRvIHRoZSBwZW9wbGUgYSB2b3RlIG9uIGhpcyBvd24gY2FzZSBmaXJzdCwgcHJvbWlzaW5nIHRvIHJldGlyZSBhdCBvbmNlIHRvIHByaXZhdGUgbGlmZSBpZiB0aGlzIHNob3VsZCBiZSB0aGUgd2lsbCBvZiB0aGUgY2l0aXplbnMuIEJ1dCBPY3Rhdml1cyB3YXMgdW53aWxsaW5nLCBhbmQgdGhlcmVmb3JlIFRpYmVyaXVzIGRlY2xhcmVkIHRoYXQgaGUgd291bGQgcHV0IHRoZSBjYXNlIG9mIE9jdGF2aXVzIHVubGVzcyBPY3Rhdml1cyBzaG91bGQgY2hhbmdlIGhpcyBtaW5kIHVwb24gcmVmbGVjdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBmaXJzdCBwbGFjZSwgaG93ZXZlciwgaGUgYmVnZ2VkIE9jdGF2aXVzIGluIHB1YmxpYywgYWRkcmVzc2luZyBoaW0gd2l0aCBraW5kbHkgd29yZHMgYW5kIGNsYXNwaW5nIGhpcyBoYW5kcywgdG8gZ2l2ZSBpbiBhbmQgZ3JhdGlmeSB0aGUgcGVvcGxlLCB3aG8gZGVtYW5kZWQgb25seSB0aGVpciBqdXN0IHJpZ2h0cywgYW5kIHdvdWxkIHJlY2VpdmUgb25seSBhIHRyaWZsaW5nIHJldHVybiBmb3IgZ3JlYXQgdG9pbHMgYW5kIHBlcmlscy4gQnV0IE9jdGF2aXVzIHJlamVjdGVkIHRoZSBwZXRpdGlvbiwgYW5kIHRoZXJlZm9yZSBUaWJlcml1cywgYWZ0ZXIgcHJlbWlzaW5nIHRoYXQsIHNpbmNlIHRoZXkgd2VyZSBjb2xsZWFndWVzIGluIG9mZmljZSB3aXRoIGVxdWFsIHBvd2VycyBhbmQgZGlmZmVyZWQgb24gd2VpZ2h0eSBtZWFzdXJlcywgaXQgd2FzIGltcG9zc2libGUgZm9yIHRoZW0gdG8gY29tcGxldGUgdGhlaXIgdGVybSBvZiBvZmZpY2Ugd2l0aG91dCBvcGVuIHdhciwgc2FpZCBoZSBzYXcgb25seSBvbmUgcmVtZWR5IGZvciB0aGlzLCBhbmQgdGhhdCB3YXMgZm9yIG9uZSBvciB0aGUgb3RoZXIgb2YgdGhlbSB0byBnaXZlIHVwIGhpcyBvZmZpY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgaGUgdXJnZWQgT2N0YXZpdXMgdG8gcHV0IHRvIHRoZSBwZW9wbGUgYSB2b3RlIG9uIGhpcyBvd24gY2FzZSBmaXJzdCwgcHJvbWlzaW5nIHRvIHJldGlyZSBhdCBvbmNlIHRvIHByaXZhdGUgbGlmZSBpZiB0aGlzIHNob3VsZCBiZSB0aGUgd2lsbCBvZiB0aGUgY2l0aXplbnMuIEJ1dCBPY3Rhdml1cyB3YXMgdW53aWxsaW5nLCBhbmQgdGhlcmVmb3JlIFRpYmVyaXVzIGRlY2xhcmVkIHRoYXQgaGUgd291bGQgcHV0IHRoZSBjYXNlIG9mIE9jdGF2aXVzIHVubGVzcyBPY3Rhdml1cyBzaG91bGQgY2hhbmdlIGhpcyBtaW5kIHVwb24gcmVmbGVjdGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCB0aGlzIHVuZGVyc3RhbmRpbmcsIGhlIGRpc3NvbHZlZCB0aGUgYXNzZW1ibHkgZm9yIHRoYXQgZGF5OyBidXQgb24gdGhlIGZvbGxvd2luZyBkYXksIGFmdGVyIHRoZSBwZW9wbGUgaGFkIGNvbWUgdG9nZXRoZXIsIGhlIG1vdW50ZWQgdGhlIHJvc3RyYSBhbmQgb25jZSBtb3JlIGF0dGVtcHRlZCB0byBwZXJzdWFkZSBPY3Rhdml1cy4gV2hlbiwgaG93ZXZlciwgT2N0YXZpdXMgd2FzIG5vdCB0byBiZSBwZXJzdWFkZWQsIFRpYmVyaXVzIGludHJvZHVjZWQgYSBsYXcgZGVwcml2aW5nIGhpbSBvZiBoaXMgdHJpYnVuZXNoaXAsIGFuZCBzdW1tb25lZCB0aGUgY2l0aXplbnMgdG8gY2FzdCB0aGVpciB2b3RlcyB1cG9uIGl0IGF0IG9uY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2VyZSBmaXZlIGFuZCB0aGlydHkgdHJpYmVzLCBhbmQgd2hlbiBzZXZlbnRlZW4gb2YgdGhlbSBoYWQgY2FzdCB0aGVpciB2b3RlcywgYW5kIHRoZSBhZGRpdGlvbiBvZiBvbmUgbW9yZSB3b3VsZCBtYWtlIGl0IG5lY2Vzc2FyeSBmb3IgT2N0YXZpdXMgdG8gYmVjb21lIGEgcHJpdmF0ZSBjaXRpemVuLCBUaWJlcml1cyBjYWxsZWQgYSBoYWx0IGluIHRoZSB2b3RpbmcsIGFuZCBhZ2FpbiBlbnRyZWF0ZWQgT2N0YXZpdXMsIGVtYnJhY2luZyBhbmQga2lzc2luZyBoaW0gaW4gdGhlIHNpZ2h0IG9mIHRoZSBwZW9wbGUsIGFuZCBmZXJ2ZW50bHkgYmVnZ2luZyBoaW0gbm90IHRvIGFsbG93IGhpbXNlbGYgdG8gYmUgZGlzaG9ub3VyZWQsIGFuZCBub3QgdG8gYXR0YWNoIHRvIGEgZnJpZW5kIHJlc3BvbnNpYmlsaXR5IGZvciBhIG1lYXN1cmUgc28gZ3JpZXZvdXMgYW5kIHNldmVyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCB0aGlzIHVuZGVyc3RhbmRpbmcsIGhlIGRpc3NvbHZlZCB0aGUgYXNzZW1ibHkgZm9yIHRoYXQgZGF5OyBidXQgb24gdGhlIGZvbGxvd2luZyBkYXksIGFmdGVyIHRoZSBwZW9wbGUgaGFkIGNvbWUgdG9nZXRoZXIsIGhlIG1vdW50ZWQgdGhlIHJvc3RyYSBhbmQgb25jZSBtb3JlIGF0dGVtcHRlZCB0byBwZXJzdWFkZSBPY3Rhdml1cy4gV2hlbiwgaG93ZXZlciwgT2N0YXZpdXMgd2FzIG5vdCB0byBiZSBwZXJzdWFkZWQsIFRpYmVyaXVzIGludHJvZHVjZWQgYSBsYXcgZGVwcml2aW5nIGhpbSBvZiBoaXMgdHJpYnVuZXNoaXAsIGFuZCBzdW1tb25lZCB0aGUgY2l0aXplbnMgdG8gY2FzdCB0aGVpciB2b3RlcyB1cG9uIGl0IGF0IG9uY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2VyZSBmaXZlIGFuZCB0aGlydHkgdHJpYmVzLCBhbmQgd2hlbiBzZXZlbnRlZW4gb2YgdGhlbSBoYWQgY2FzdCB0aGVpciB2b3RlcywgYW5kIHRoZSBhZGRpdGlvbiBvZiBvbmUgbW9yZSB3b3VsZCBtYWtlIGl0IG5lY2Vzc2FyeSBmb3IgT2N0YXZpdXMgdG8gYmVjb21lIGEgcHJpdmF0ZSBjaXRpemVuLCBUaWJlcml1cyBjYWxsZWQgYSBoYWx0IGluIHRoZSB2b3RpbmcsIGFuZCBhZ2FpbiBlbnRyZWF0ZWQgT2N0YXZpdXMsIGVtYnJhY2luZyBhbmQga2lzc2luZyBoaW0gaW4gdGhlIHNpZ2h0IG9mIHRoZSBwZW9wbGUsIGFuZCBmZXJ2ZW50bHkgYmVnZ2luZyBoaW0gbm90IHRvIGFsbG93IGhpbXNlbGYgdG8gYmUgZGlzaG9ub3VyZWQsIGFuZCBub3QgdG8gYXR0YWNoIHRvIGEgZnJpZW5kIHJlc3BvbnNpYmlsaXR5IGZvciBhIG1lYXN1cmUgc28gZ3JpZXZvdXMgYW5kIHNldmVyZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T24gaGVhcmluZyB0aGVzZSBlbnRyZWF0aWVzLCB3ZSBhcmUgdG9sZCwgT2N0YXZpdXMgd2FzIG5vdCBhbHRvZ2V0aGVyIHVudG91Y2hlZCBvciB1bm1vdmVkOyBoaXMgZXllcyBmaWxsZWQgd2l0aCB0ZWFycyBhbmQgaGUgc3Rvb2Qgc2lsZW50IGZvciBhIGxvbmcgdGltZS4gQnV0IHdoZW4gaGUgdHVybmVkIGhpcyBnYXplIHRvd2FyZHMgdGhlIG1lbiBvZiB3ZWFsdGggYW5kIHN1YnN0YW5jZSB3aG8gd2VyZSBzdGFuZGluZyBpbiBhIGJvZHkgdG9nZXRoZXIsIGhpcyBhd2Ugb2YgdGhlbSwgYXMgaXQgd291bGQgc2VlbSwgYW5kIGhpcyBmZWFyIG9mIGlsbCByZXB1dGUgYW1vbmcgdGhlbSwgbGVkIGhpbSB0byB0YWtlIGV2ZXJ5IHJpc2sgd2l0aCBib2xkbmVzcyBhbmQgYmlkIFRpYmVyaXVzIGRvIHdoYXQgaGUgcGxlYXNlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIHRoZSBsYXcgd2FzIHBhc3NlZCwgYW5kIFRpYmVyaXVzIG9yZGVyZWQgb25lIG9mIGhpcyBmcmVlZG1lbiB0byBkcmFnIE9jdGF2aXVzIGZyb20gdGhlIHJvc3RyYTsgZm9yIFRpYmVyaXVzIHVzZWQgaGlzIGZyZWVkbWVuIGFzIG9mZmljZXJzLCBhbmQgdGhpcyBtYWRlIHRoZSBzaWdodCBvZiBPY3Rhdml1cyBkcmFnZ2VkIGFsb25nIHdpdGggY29udHVtZWx5IGEgbW9yZSBwaXRpZnVsIG9uZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoZSBwZW9wbGUgbWFkZSBhIHJ1c2ggYXQgaGltLCBhbmQgdGhvdWdoIHRoZSBtZW4gb2Ygd2VhbHRoIHJhbiBpbiBhIGJvZHkgdG8gaGlzIGFzc2lzdGFuY2UgYW5kIHNwcmVhZCBvdXQgdGhlaXIgaGFuZHMgYWdhaW5zdCB0aGUgY3Jvd2QsIGl0IHdhcyB3aXRoIGRpZmZpY3VsdHkgdGhhdCBPY3Rhdml1cyB3YXMgc25hdGNoZWQgYXdheSBhbmQgc2FmZWx5IHJlc2N1ZWQgZnJvbSB0aGUgY3Jvd2Q7IGFuZCBhIHRydXN0eSBzZXJ2YW50IG9mIGhpcyB3aG8gc3Rvb2QgaW4gZnJvbnQgb2YgaGlzIG1hc3RlciBhbmQgcHJvdGVjdGVkIGhpbSwgaGFkIGhpcyBleWVzIHRvcm4gb3V0LCBhZ2FpbnN0IHRoZSBwcm90ZXN0IG9mIFRpYmVyaXVzLCB3aG8sIHdoZW4gaGUgcGVyY2VpdmVkIHdoYXQgd2FzIGdvaW5nIG9uLCByYW4gZG93biB3aXRoIGdyZWF0IGhhc3RlIHRvIGFwcGVhc2UgdGhlIHR1bXVsdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIGhlYXJpbmcgdGhlc2UgZW50cmVhdGllcywgd2UgYXJlIHRvbGQsIE9jdGF2aXVzIHdhcyBub3QgYWx0b2dldGhlciB1bnRvdWNoZWQgb3IgdW5tb3ZlZDsgaGlzIGV5ZXMgZmlsbGVkIHdpdGggdGVhcnMgYW5kIGhlIHN0b29kIHNpbGVudCBmb3IgYSBsb25nIHRpbWUuIEJ1dCB3aGVuIGhlIHR1cm5lZCBoaXMgZ2F6ZSB0b3dhcmRzIHRoZSBtZW4gb2Ygd2VhbHRoIGFuZCBzdWJzdGFuY2Ugd2hvIHdlcmUgc3RhbmRpbmcgaW4gYSBib2R5IHRvZ2V0aGVyLCBoaXMgYXdlIG9mIHRoZW0sIGFzIGl0IHdvdWxkIHNlZW0sIGFuZCBoaXMgZmVhciBvZiBpbGwgcmVwdXRlIGFtb25nIHRoZW0sIGxlZCBoaW0gdG8gdGFrZSBldmVyeSByaXNrIHdpdGggYm9sZG5lc3MgYW5kIGJpZCBUaWJlcml1cyBkbyB3aGF0IGhlIHBsZWFzZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyB0aGUgbGF3IHdhcyBwYXNzZWQsIGFuZCBUaWJlcml1cyBvcmRlcmVkIG9uZSBvZiBoaXMgZnJlZWRtZW4gdG8gZHJhZyBPY3Rhdml1cyBmcm9tIHRoZSByb3N0cmE7IGZvciBUaWJlcml1cyB1c2VkIGhpcyBmcmVlZG1lbiBhcyBvZmZpY2VycywgYW5kIHRoaXMgbWFkZSB0aGUgc2lnaHQgb2YgT2N0YXZpdXMgZHJhZ2dlZCBhbG9uZyB3aXRoIGNvbnR1bWVseSBhIG1vcmUgcGl0aWZ1bCBvbmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgcGVvcGxlIG1hZGUgYSBydXNoIGF0IGhpbSwgYW5kIHRob3VnaCB0aGUgbWVuIG9mIHdlYWx0aCByYW4gaW4gYSBib2R5IHRvIGhpcyBhc3Npc3RhbmNlIGFuZCBzcHJlYWQgb3V0IHRoZWlyIGhhbmRzIGFnYWluc3QgdGhlIGNyb3dkLCBpdCB3YXMgd2l0aCBkaWZmaWN1bHR5IHRoYXQgT2N0YXZpdXMgd2FzIHNuYXRjaGVkIGF3YXkgYW5kIHNhZmVseSByZXNjdWVkIGZyb20gdGhlIGNyb3dkOyBhbmQgYSB0cnVzdHkgc2VydmFudCBvZiBoaXMgd2hvIHN0b29kIGluIGZyb250IG9mIGhpcyBtYXN0ZXIgYW5kIHByb3RlY3RlZCBoaW0sIGhhZCBoaXMgZXllcyB0b3JuIG91dCwgYWdhaW5zdCB0aGUgcHJvdGVzdCBvZiBUaWJlcml1cywgd2hvLCB3aGVuIGhlIHBlcmNlaXZlZCB3aGF0IHdhcyBnb2luZyBvbiwgcmFuIGRvd24gd2l0aCBncmVhdCBoYXN0ZSB0byBhcHBlYXNlIHRoZSB0dW11bHQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgdGhlIGFncmFyaWFuIGxhdyB3YXMgcGFzc2VkLCBhbmQgdGhyZWUgbWVuIHdlcmUgY2hvc2VuIG9yIGhlIHN1cnZleSBhbmQgZGlzdHJpYnV0aW9uIG9mIHRoZSBwdWJsaWMgbGFuZCwgVGliZXJpdXMgaGltc2VsZiwgQXBwaXVzIENsYXVkaXVzIGhpcyBmYXRoZXItaW4tbGF3LCBhbmQgQ2FpdXMgR3JhY2NodXMgaGlzIGJyb3RoZXIsIHdobyB3YXMgbm90IGF0IFJvbWUsIGJ1dCB3YXMgc2VydmluZyB1bmRlciBTY2lwaW8gaW4gdGhlIGV4cGVkaXRpb24gYWdhaW5zdCBOdW1hbnRpYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgbWVhc3VyZXMgd2VyZSBjYXJyaWVkIG91dCBieSBUaWJlcml1cyBxdWlldGx5IGFuZCB3aXRob3V0IG9wcG9zaXRpb24sIGFuZCwgYmVzaWRlcywgaGUgcHJvY3VyZWQgdGhlIGVsZWN0aW9uIG9mIGEgdHJpYnVuZSBpbiB0aGUgcGxhY2Ugb2YgT2N0YXZpdXMuIFRoZSBuZXcgdHJpYnVuZSB3YXMgbm90IGEgbWFuIG9mIHJhbmsgb3Igbm90ZSwgYnV0IGEgY2VydGFpbiBNdWNpdXMsIGEgY2xpZW50IG9mIFRpYmVyaXVzLiBUaGUgYXJpc3RvY3JhdHMsIGhvd2V2ZXIsIHdobyB3ZXJlIHZleGVkIGF0IHRoZXNlIHByb2NlZWRpbmdzIGFuZCBmZWFyZWQgdGhlIGdyb3dpbmcgcG93ZXIgb2YgVGliZXJpdXMsIGhlYXBlZCBpbnN1bHQgdXBvbiBoaW0gaW4gdGhlIHNlbmF0ZS4gV2hlbiBoZSBhc2tlZCBmb3IgdGhlIGN1c3RvbWFyeSB0ZW50IGF0IHB1YmxpYyBleHBlbnNlLCBmb3IgaGlzIHVzZSB3aGVuIGRpdmlkaW5nIHVwIHRoZSBwdWJsaWMgbGFuZCwgdGhleSB3b3VsZCBub3QgZ2l2ZSBpdCwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YWx0aG91Z2ggb3RoZXIgbWVuIGhhZCBvZnRlbiBvYnRhaW5lZCBvbmUgb3IgbGVzcyBpbXBvcnRhbnQgcHVycG9zZXM7IGFuZCB0aGV5IGZpeGVkIGhpcyBkYWlseSBhbGxvd2FuY2UgZm9yIGV4cGVuc2VzIGF0IG5pbmUgb2JvbHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhhdCBpcywgaW4gUm9tYW4gbW9uZXksIG5pbmUgc2VzdGVydGlpLCBlcXVpdmFsZW50IHRvIGFib3V0IHR3ZW50eSBwZW5jZSwgb3IgZm9ydHkgY2VudHMuPC9ub3RlPiBUaGVzZSB0aGluZ3Mgd2VyZSBkb25lIG9uIG1vdGlvbiBvZiBQdWJsaXVzIE5hc2ljYSwgd2hvIHN1cnJlbmRlcmVkIGNvbXBsZXRlbHkgdG8gaGlzIGhhdHJlZCBvZiBUaWJlcml1cy4gRm9yIGhlIHdhcyBhIHZlcnkgbGFyZ2UgaG9sZGVyIG9mIHB1YmxpYyBsYW5kLCBhbmQgYml0dGVybHkgcmVzZW50ZWQgaGlzIGJlaW5nIGZvcmNlZCB0byBnaXZlIGl0IHVwLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyB0aGUgYWdyYXJpYW4gbGF3IHdhcyBwYXNzZWQsIGFuZCB0aHJlZSBtZW4gd2VyZSBjaG9zZW4gb3IgaGUgc3VydmV5IGFuZCBkaXN0cmlidXRpb24gb2YgdGhlIHB1YmxpYyBsYW5kLCBUaWJlcml1cyBoaW1zZWxmLCBBcHBpdXMgQ2xhdWRpdXMgaGlzIGZhdGhlci1pbi1sYXcsIGFuZCBDYWl1cyBHcmFjY2h1cyBoaXMgYnJvdGhlciwgd2hvIHdhcyBub3QgYXQgUm9tZSwgYnV0IHdhcyBzZXJ2aW5nIHVuZGVyIFNjaXBpbyBpbiB0aGUgZXhwZWRpdGlvbiBhZ2FpbnN0IE51bWFudGlhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lYXN1cmVzIHdlcmUgY2FycmllZCBvdXQgYnkgVGliZXJpdXMgcXVpZXRseSBhbmQgd2l0aG91dCBvcHBvc2l0aW9uLCBhbmQsIGJlc2lkZXMsIGhlIHByb2N1cmVkIHRoZSBlbGVjdGlvbiBvZiBhIHRyaWJ1bmUgaW4gdGhlIHBsYWNlIG9mIE9jdGF2aXVzLiBUaGUgbmV3IHRyaWJ1bmUgd2FzIG5vdCBhIG1hbiBvZiByYW5rIG9yIG5vdGUsIGJ1dCBhIGNlcnRhaW4gTXVjaXVzLCBhIGNsaWVudCBvZiBUaWJlcml1cy4gVGhlIGFyaXN0b2NyYXRzLCBob3dldmVyLCB3aG8gd2VyZSB2ZXhlZCBhdCB0aGVzZSBwcm9jZWVkaW5ncyBhbmQgZmVhcmVkIHRoZSBncm93aW5nIHBvd2VyIG9mIFRpYmVyaXVzLCBoZWFwZWQgaW5zdWx0IHVwb24gaGltIGluIHRoZSBzZW5hdGUuIFdoZW4gaGUgYXNrZWQgZm9yIHRoZSBjdXN0b21hcnkgdGVudCBhdCBwdWJsaWMgZXhwZW5zZSwgZm9yIGhpcyB1c2Ugd2hlbiBkaXZpZGluZyB1cCB0aGUgcHVibGljIGxhbmQsIHRoZXkgd291bGQgbm90IGdpdmUgaXQsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFsdGhvdWdoIG90aGVyIG1lbiBoYWQgb2Z0ZW4gb2J0YWluZWQgb25lIG9yIGxlc3MgaW1wb3J0YW50IHB1cnBvc2VzOyBhbmQgdGhleSBmaXhlZCBoaXMgZGFpbHkgYWxsb3dhbmNlIGZvciBleHBlbnNlcyBhdCBuaW5lIG9ib2xzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhhdCBpcywgaW4gUm9tYW4gbW9uZXksIG5pbmUgc2VzdGVydGlpLCBlcXVpdmFsZW50IHRvIGFib3V0IHR3ZW50eSBwZW5jZSwgb3IgZm9ydHkgY2VudHMuPC9ub3RlPiBUaGVzZSB0aGluZ3Mgd2VyZSBkb25lIG9uIG1vdGlvbiBvZiBQdWJsaXVzIE5hc2ljYSwgd2hvIHN1cnJlbmRlcmVkIGNvbXBsZXRlbHkgdG8gaGlzIGhhdHJlZCBvZiBUaWJlcml1cy4gRm9yIGhlIHdhcyBhIHZlcnkgbGFyZ2UgaG9sZGVyIG9mIHB1YmxpYyBsYW5kLCBhbmQgYml0dGVybHkgcmVzZW50ZWQgaGlzIGJlaW5nIGZvcmNlZCB0byBnaXZlIGl0IHVwLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHBlb3BsZSB3ZXJlIGFsbCB0aGUgbW9yZSBpbmZsYW1lZDsgYW5kIHdoZW4gYSBmcmllbmQgb2YgVGliZXJpdXMgZGllZCBzdWRkZW5seSBhbmQgaGlzIGJvZHkgYnJva2Ugb3V0IGFsbCBvdmVyIHdpdGggZXZpbCBzcG90cywgdGhleSByYW4gaW4gdGhyb25ncyB0byB0aGUgbWFuJ3MgZnVuZXJhbCwgY3J5aW5nIG91dCB0aGF0IGhlIGhhZCBiZWVuIHBvaXNvbmVkIHRvIGRlYXRoLCBhbmQgdGhleSBjYXJyaWVkIHRoZSBiaWVyIHRoZW1zZWx2ZXMsIGFuZCBzdG9vZCBieSBhdCB0aGUgbGFzdCBjZXJlbW9uaWVzLiBBbmQgdGhlaXIgc3VzcGljaW9ucyBvZiBwb2lzb24gd2VyZSB0aG91Z2h0IHRvIGJlIG5vdCB3aXRob3V0IHJlYXNvbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBkZWFkIGJvZHkgYnVyc3Qgb3BlbiBhbmQgYSBncmVhdCBxdWFudGl0eSBvZiBjb3JydXB0IGh1bW91cnMgZ3VzaGVkIGZvcnRoLCBzbyB0aGF0IHRoZSBmbGFtZSBvZiB0aGUgZnVuZXJhbCBweXJlIHdhcyBleHRpbmd1aXNoZWQuIEFuZCB3aGVuIGZyZXNoIGZpcmUgd2FzIGJyb3VnaHQsIGFnYWluIHRoZSBib2R5IHdvdWxkIG5vdCBidXJuLCB1bnRpbCBpdCB3YXMgY2FycmllZCB0byBhbm90aGVyIHBsYWNlLCB3aGVyZSwgYWZ0ZXIgbXVjaCB0cm91YmxlLCB0aGUgZmlyZSBhdCBsYXN0IHRvb2sgaG9sZCBvZiBpdC4gVXBvbiB0aGlzLCBUaWJlcml1cywgdGhhdCBoZSBtaWdodCBleGFzcGVyYXRlIHRoZSBtdWx0aXR1ZGUgc3RpbGwgbW9yZSwgcHV0IG9uIGEgZ2FyYiBvZiBtb3VybmluZywgYnJvdWdodCBoaXMgY2hpbGRyZW4gYmVmb3JlIHRoZSBhc3NlbWJseSwgYW5kIGJlZ2dlZCB0aGUgcGVvcGxlIHRvIGNhcmUgZm9yIHRoZW0gYW5kIHRoZWlyIG1vdGhlciwgc2F5aW5nIHRoYXQgaGUgZGVzcGFpcmVkIG9mIGhpcyBvd24gbGlmZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcGVvcGxlIHdlcmUgYWxsIHRoZSBtb3JlIGluZmxhbWVkOyBhbmQgd2hlbiBhIGZyaWVuZCBvZiBUaWJlcml1cyBkaWVkIHN1ZGRlbmx5IGFuZCBoaXMgYm9keSBicm9rZSBvdXQgYWxsIG92ZXIgd2l0aCBldmlsIHNwb3RzLCB0aGV5IHJhbiBpbiB0aHJvbmdzIHRvIHRoZSBtYW4ncyBmdW5lcmFsLCBjcnlpbmcgb3V0IHRoYXQgaGUgaGFkIGJlZW4gcG9pc29uZWQgdG8gZGVhdGgsIGFuZCB0aGV5IGNhcnJpZWQgdGhlIGJpZXIgdGhlbXNlbHZlcywgYW5kIHN0b29kIGJ5IGF0IHRoZSBsYXN0IGNlcmVtb25pZXMuIEFuZCB0aGVpciBzdXNwaWNpb25zIG9mIHBvaXNvbiB3ZXJlIHRob3VnaHQgdG8gYmUgbm90IHdpdGhvdXQgcmVhc29uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZGVhZCBib2R5IGJ1cnN0IG9wZW4gYW5kIGEgZ3JlYXQgcXVhbnRpdHkgb2YgY29ycnVwdCBodW1vdXJzIGd1c2hlZCBmb3J0aCwgc28gdGhhdCB0aGUgZmxhbWUgb2YgdGhlIGZ1bmVyYWwgcHlyZSB3YXMgZXh0aW5ndWlzaGVkLiBBbmQgd2hlbiBmcmVzaCBmaXJlIHdhcyBicm91Z2h0LCBhZ2FpbiB0aGUgYm9keSB3b3VsZCBub3QgYnVybiwgdW50aWwgaXQgd2FzIGNhcnJpZWQgdG8gYW5vdGhlciBwbGFjZSwgd2hlcmUsIGFmdGVyIG11Y2ggdHJvdWJsZSwgdGhlIGZpcmUgYXQgbGFzdCB0b29rIGhvbGQgb2YgaXQuIFVwb24gdGhpcywgVGliZXJpdXMsIHRoYXQgaGUgbWlnaHQgZXhhc3BlcmF0ZSB0aGUgbXVsdGl0dWRlIHN0aWxsIG1vcmUsIHB1dCBvbiBhIGdhcmIgb2YgbW91cm5pbmcsIGJyb3VnaHQgaGlzIGNoaWxkcmVuIGJlZm9yZSB0aGUgYXNzZW1ibHksIGFuZCBiZWdnZWQgdGhlIHBlb3BsZSB0byBjYXJlIGZvciB0aGVtIGFuZCB0aGVpciBtb3RoZXIsIHNheWluZyB0aGF0IGhlIGRlc3BhaXJlZCBvZiBoaXMgb3duIGxpZmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgQXR0YWx1cyBQaGlsb21ldG9yIGRpZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTMzIEIuQy48L25vdGU+IGFuZCBFdWRlbXVzIG9mIFBlcmdhbXVtIGJyb3VnaHQgdG8gUm9tZSB0aGUga2luZydzIGxhc3Qgd2lsbCBhbmQgdGVzdGFtZW50LCBieSB3aGljaCB0aGUgUm9tYW4gcGVvcGxlIHdhcyBtYWRlIGhpcyBoZWlyLiBBdCBvbmNlIFRpYmVyaXVzIGNvdXJ0ZWQgcG9wdWxhciBmYXZvdXIgYnkgYnJpbmdpbmcgaW4gYSBiaWxsIHdoaWNoIHByb3ZpZGVkIHRoYXQgdGhlIG1vbmV5IG9mIEtpbmcgQXR0YWx1cywgd2hlbiBicm91Z2h0IHRvIFJvbWUsIHNob3VsZCBiZSBnaXZlbiB0byB0aGUgY2l0aXplbnMgd2hvIHJlY2VpdmVkIGEgcGFyY2VsIG9mIHRoZSBwdWJsaWMgbGFuZCwgdG8gYWlkIHRoZW0gaW4gc3RvY2tpbmcgYW5kIHRpbGxpbmcgdGhlaXIgZmFybXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyByZWdhcmRlZCB0aGUgY2l0aWVzIHdoaWNoIHdlcmUgaW5jbHVkZWQgaW4gdGhlIGtpbmdkb20gb2YgQXR0YWx1cywgaGUgc2FpZCBpdCBkaWQgbm90IGJlbG9uZyB0byB0aGUgc2VuYXRlIHRvIGRlbGliZXJhdGUgYWJvdXQgdGhlbSwgYnV0IGhlIGhpbXNlbGYgd291bGQgc3VibWl0IGEgcGVydGluZW50IHJlc29sdXRpb24gdG8gdGhlIHBlb3BsZS4gQnkgdGhpcyBwcm9jZWVkaW5nIGhlIGdhdmUgbW9yZSBvZmZlbmNlIHRoYW4gZXZlciB0byB0aGUgc2VuYXRlOyBhbmQgUG9tcGVpdXMsIHJpc2luZyB0byBzcGVhayB0aGVyZSwgc2FpZCB0aGF0IGhlIHdhcyBhIG5laWdoYm91ciBvZiBUaWJlcml1cywgYW5kIHRoZXJlZm9yZSBrbmV3IHRoYXQgRXVkZW11cyBvZiBQZXJnYW11bSBoYWQgcHJlc2VudGVkIFRpYmVyaXVzIHdpdGggYSByb3lhbCBkaWFkZW0gYW5kIHB1cnBsZSByb2JlLCBiZWxpZXZpbmcgdGhhdCBoZSB3YXMgZ29pbmcgdG8gYmUga2luZyBpbiBSb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgUXVpbnR1cyBNZXRlbGx1cyB1cGJyYWlkZWQgVGliZXJpdXMgd2l0aCB0aGUgcmVtaW5kZXIgdGhhdCB3aGVuZXZlciBoaXMgZmF0aGVyLCBkdXJpbmcgaGlzIGNlbnNvcnNoaXAsIHdhcyByZXR1cm5pbmcgaG9tZSBhZnRlciBhIHN1cHBlciwgdGhlIGNpdGl6ZW5zIHB1dCBvdXQgdGhlaXIgbGlnaHRzLCBmb3IgZmVhciB0aGV5IG1pZ2h0IGJlIHRob3VnaHQgdG8gYmUgaW5kdWxnaW5nIGltbW9kZXJhdGVseSBpbiBlbnRlcnRhaW5tZW50cyBhbmQgZHJpbmtpbmcgYm91dHMsIHdoZXJlYXMgVGliZXJpdXMgaGltc2VsZiB3YXMgbGlnaHRlZCBvbiBoaXMgd2F5IGF0IG5pZ2h0IGJ5IHRoZSBuZWVkaWVzdCBhbmQgbW9zdCByZWNrbGVzcyBvZiB0aGUgcG9wdWxhY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRpdHVzIEFubml1cywgdG9vLCBhIG1hbiBvZiBubyBoaWdoIGNoYXJhY3RlciBvciBzb2JyaWV0eSwgYnV0IGhlbGQgdG8gYmUgaW52aW5jaWJsZSBpbiBhcmd1bWVudHMgY2FycmllZCBvbiBieSBxdWVzdGlvbiBhbmQgYW5zd2VyLCBjaGFsbGVuZ2VkIFRpYmVyaXVzIHRvIGEganVkaWNpYWwgd2FnZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNYS4gMjIuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIE1ham9yPC90aXRsZT4sICB4eGlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzb2xlbW5seSBhc3NlcnRpbmcgdGhhdCBoZSBoYWQgYnJhbmRlZCB3aXRoIGluZmFteSBoaXMgY29sbGVhZ3VlLCB3aG8gd2FzIHNhY3JlZCBhbmQgaW52aW9sYWJsZSBieSBsYXcuIEFzIG1hbnkgc2VuYXRvcnMgYXBwbGF1ZGVkIHRoaXMgc3BlZWNoLCBUaWJlcml1cyBkYXNoZWQgb3V0IG9mIHRoZSBzZW5hdGUtaG91c2UsIGNhbGxlZCB0aGUgcGVvcGxlIHRvZ2V0aGVyLCBhbmQgb3JkZXJlZCBBbm5pdXMgdG8gYmUgYnJvdWdodCBiZWZvcmUgdGhlbSwgd2l0aCB0aGUgaW50ZW50aW9uIG9mIGRlbm91bmNpbmcgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQW5uaXVzLCB3aG8gd2FzIGZhciBpbmZlcmlvciB0byBUaWJlcml1cyBib3RoIGluIGVsb3F1ZW5jZSBhbmQgaW4gcmVwdXRhdGlvbiwgaGFkIHJlY291cnNlIHRvIGhpcyBvd24gcGFydGljdWxhciBhcnQsIGFuZCBjYWxsZWQgdXBvbiBUaWJlcml1cyB0byBhbnN3ZXIgYSBmZXcgcXVlc3Rpb25zIGJlZm9yZSB0aGUgYXJndW1lbnQgYmVnYW4uIFRpYmVyaXVzIGFzc2VudGVkIHRvIHRoaXMgYW5kIHNpbGVuY2Ugd2FzIG1hZGUsIHdoZXJldXBvbiBBbm5pdXMgc2FpZDogCjxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHRob3Ugd2lzaCB0byBoZWFwIGluc3VsdCB1cG9uIG1lIGFuZCBkZWdyYWRlIG1lLCBhbmQgSSBpbnZva2UgdGhlIGFpZCBvZiBvbmUgb2YgdGh5IGNvbGxlYWd1ZXMgaW4gb2ZmaWNlLCBhbmQgaGUgbW91bnQgdGhlIHJvc3RyYSB0byBzcGVhayBpbiBteSBkZWZlbmNlLCBhbmQgdGhvdSBmbHkgaW50byBhIHBhc3Npb24sIGNvbWUsIHdpbHQgdGhvdSBkZXByaXZlIHRoYXQgY29sbGVhZ3VlIG9mIGhpcyBvZmZpY2U/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcXVlc3Rpb24sIHdlIGFyZSB0b2xkLCBUaWJlcml1cyB3YXMgc28gZGlzY29uY2VydGVkIHRoYXQsIGFsdGhvdWdoIGhlIHdhcyBvZiBhbGwgbWVuIG1vc3QgcmVhZHkgaW4gc3BlZWNoIGFuZCBtb3N0IHZlaGVtZW50IGluIGNvdXJhZ2UsIGhlIGhlbGQgaGlzIHBlYWNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBBdHRhbHVzIFBoaWxvbWV0b3IgZGllZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDEzMyBCLkMuPC9ub3RlPiBhbmQgRXVkZW11cyBvZiBQZXJnYW11bSBicm91Z2h0IHRvIFJvbWUgdGhlIGtpbmcncyBsYXN0IHdpbGwgYW5kIHRlc3RhbWVudCwgYnkgd2hpY2ggdGhlIFJvbWFuIHBlb3BsZSB3YXMgbWFkZSBoaXMgaGVpci4gQXQgb25jZSBUaWJlcml1cyBjb3VydGVkIHBvcHVsYXIgZmF2b3VyIGJ5IGJyaW5naW5nIGluIGEgYmlsbCB3aGljaCBwcm92aWRlZCB0aGF0IHRoZSBtb25leSBvZiBLaW5nIEF0dGFsdXMsIHdoZW4gYnJvdWdodCB0byBSb21lLCBzaG91bGQgYmUgZ2l2ZW4gdG8gdGhlIGNpdGl6ZW5zIHdobyByZWNlaXZlZCBhIHBhcmNlbCBvZiB0aGUgcHVibGljIGxhbmQsIHRvIGFpZCB0aGVtIGluIHN0b2NraW5nIGFuZCB0aWxsaW5nIHRoZWlyIGZhcm1zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyByZWdhcmRlZCB0aGUgY2l0aWVzIHdoaWNoIHdlcmUgaW5jbHVkZWQgaW4gdGhlIGtpbmdkb20gb2YgQXR0YWx1cywgaGUgc2FpZCBpdCBkaWQgbm90IGJlbG9uZyB0byB0aGUgc2VuYXRlIHRvIGRlbGliZXJhdGUgYWJvdXQgdGhlbSwgYnV0IGhlIGhpbXNlbGYgd291bGQgc3VibWl0IGEgcGVydGluZW50IHJlc29sdXRpb24gdG8gdGhlIHBlb3BsZS4gQnkgdGhpcyBwcm9jZWVkaW5nIGhlIGdhdmUgbW9yZSBvZmZlbmNlIHRoYW4gZXZlciB0byB0aGUgc2VuYXRlOyBhbmQgUG9tcGVpdXMsIHJpc2luZyB0byBzcGVhayB0aGVyZSwgc2FpZCB0aGF0IGhlIHdhcyBhIG5laWdoYm91ciBvZiBUaWJlcml1cywgYW5kIHRoZXJlZm9yZSBrbmV3IHRoYXQgRXVkZW11cyBvZiBQZXJnYW11bSBoYWQgcHJlc2VudGVkIFRpYmVyaXVzIHdpdGggYSByb3lhbCBkaWFkZW0gYW5kIHB1cnBsZSByb2JlLCBiZWxpZXZpbmcgdGhhdCBoZSB3YXMgZ29pbmcgdG8gYmUga2luZyBpbiBSb21lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBRdWludHVzIE1ldGVsbHVzIHVwYnJhaWRlZCBUaWJlcml1cyB3aXRoIHRoZSByZW1pbmRlciB0aGF0IHdoZW5ldmVyIGhpcyBmYXRoZXIsIGR1cmluZyBoaXMgY2Vuc29yc2hpcCwgd2FzIHJldHVybmluZyBob21lIGFmdGVyIGEgc3VwcGVyLCB0aGUgY2l0aXplbnMgcHV0IG91dCB0aGVpciBsaWdodHMsIGZvciBmZWFyIHRoZXkgbWlnaHQgYmUgdGhvdWdodCB0byBiZSBpbmR1bGdpbmcgaW1tb2RlcmF0ZWx5IGluIGVudGVydGFpbm1lbnRzIGFuZCBkcmlua2luZyBib3V0cywgd2hlcmVhcyBUaWJlcml1cyBoaW1zZWxmIHdhcyBsaWdodGVkIG9uIGhpcyB3YXkgYXQgbmlnaHQgYnkgdGhlIG5lZWRpZXN0IGFuZCBtb3N0IHJlY2tsZXNzIG9mIHRoZSBwb3B1bGFjZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRpdHVzIEFubml1cywgdG9vLCBhIG1hbiBvZiBubyBoaWdoIGNoYXJhY3RlciBvciBzb2JyaWV0eSwgYnV0IGhlbGQgdG8gYmUgaW52aW5jaWJsZSBpbiBhcmd1bWVudHMgY2FycmllZCBvbiBieSBxdWVzdGlvbiBhbmQgYW5zd2VyLCBjaGFsbGVuZ2VkIFRpYmVyaXVzIHRvIGEganVkaWNpYWwgd2FnZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWEuIDIyLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIE1ham9yPC90aXRsZT4sICB4eGlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzb2xlbW5seSBhc3NlcnRpbmcgdGhhdCBoZSBoYWQgYnJhbmRlZCB3aXRoIGluZmFteSBoaXMgY29sbGVhZ3VlLCB3aG8gd2FzIHNhY3JlZCBhbmQgaW52aW9sYWJsZSBieSBsYXcuIEFzIG1hbnkgc2VuYXRvcnMgYXBwbGF1ZGVkIHRoaXMgc3BlZWNoLCBUaWJlcml1cyBkYXNoZWQgb3V0IG9mIHRoZSBzZW5hdGUtaG91c2UsIGNhbGxlZCB0aGUgcGVvcGxlIHRvZ2V0aGVyLCBhbmQgb3JkZXJlZCBBbm5pdXMgdG8gYmUgYnJvdWdodCBiZWZvcmUgdGhlbSwgd2l0aCB0aGUgaW50ZW50aW9uIG9mIGRlbm91bmNpbmcgaGltLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWEuIDIyLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIE1ham9yPC90aXRsZT4sICB4eGlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byBNYWpvcjwvdGl0bGU+LCAgeHhpaS4gNS48L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBbm5pdXMsIHdobyB3YXMgZmFyIGluZmVyaW9yIHRvIFRpYmVyaXVzIGJvdGggaW4gZWxvcXVlbmNlIGFuZCBpbiByZXB1dGF0aW9uLCBoYWQgcmVjb3Vyc2UgdG8gaGlzIG93biBwYXJ0aWN1bGFyIGFydCwgYW5kIGNhbGxlZCB1cG9uIFRpYmVyaXVzIHRvIGFuc3dlciBhIGZldyBxdWVzdGlvbnMgYmVmb3JlIHRoZSBhcmd1bWVudCBiZWdhbi4gVGliZXJpdXMgYXNzZW50ZWQgdG8gdGhpcyBhbmQgc2lsZW5jZSB3YXMgbWFkZSwgd2hlcmV1cG9uIEFubml1cyBzYWlkOiAKPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JZiB0aG91IHdpc2ggdG8gaGVhcCBpbnN1bHQgdXBvbiBtZSBhbmQgZGVncmFkZSBtZSwgYW5kIEkgaW52b2tlIHRoZSBhaWQgb2Ygb25lIG9mIHRoeSBjb2xsZWFndWVzIGluIG9mZmljZSwgYW5kIGhlIG1vdW50IHRoZSByb3N0cmEgdG8gc3BlYWsgaW4gbXkgZGVmZW5jZSwgYW5kIHRob3UgZmx5IGludG8gYSBwYXNzaW9uLCBjb21lLCB3aWx0IHRob3UgZGVwcml2ZSB0aGF0IGNvbGxlYWd1ZSBvZiBoaXMgb2ZmaWNlPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcXVlc3Rpb24sIHdlIGFyZSB0b2xkLCBUaWJlcml1cyB3YXMgc28gZGlzY29uY2VydGVkIHRoYXQsIGFsdGhvdWdoIGhlIHdhcyBvZiBhbGwgbWVuIG1vc3QgcmVhZHkgaW4gc3BlZWNoIGFuZCBtb3N0IHZlaGVtZW50IGluIGNvdXJhZ2UsIGhlIGhlbGQgaGlzIHBlYWNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHByZXNlbnQsIHRoZW4sIGhlIGRpc3NvbHZlZCB0aGUgYXNzZW1ibHk7IGJ1dCBwZXJjZWl2aW5nIHRoYXQgdGhlIGNvdXJzZSBoZSBoYWQgdGFrZW4gd2l0aCByZWdhcmQgdG8gT2N0YXZpdXMgd2FzIHZlcnkgZGlzcGxlYXNpbmcsIG5vdCBvbmx5IHRvIHRoZSBub2JsZXMsIGJ1dCBhbHNvIHRvIHRoZSBtdWx0aXR1ZGUgKGZvciBpdCB3YXMgdGhvdWdodCB0aGF0IHRoZSBoaWdoIGFuZCBob25vdXJhYmxlIGRpZ25pdHkgb2YgdGhlIHRyaWJ1bmF0ZSwgc28gY2FyZWZ1bGx5IGd1YXJkZWQgdXAgdG8gdGhhdCB0aW1lLCBoYWQgYmVlbiBpbnN1bHRlZCBhbmQgZGVzdHJveWVkKSwgaGUgbWFkZSBhIGxlbmd0aHkgc3BlZWNoIGJlZm9yZSB0aGUgcGVvcGxlLCBhIGZldyBvZiB0aGUgYXJndW1lbnRzIG9mIHdoaWNoIGl0IHdpbGwgbm90IGJlIG91dCBvZiBwbGFjZSB0byBsYXkgYmVmb3JlIHRoZSByZWFkZXIsIHRoYXQgaGUgbWF5IGdldCBhIGNvbmNlcHRpb24gb2YgdGhlIG1hbidzIHN1YnRsZXR5IGFuZCBwZXJzdWFzaXZlbmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QSB0cmlidW5lLCBoZSBzYWlkLCB3YXMgc2FjcmVkIGFuZCBpbnZpb2xhYmxlLCBiZWNhdXNlIGhlIHdhcyBjb25zZWNyYXRlZCB0byB0aGUgcGVvcGxlIGFuZCB3YXMgYSBjaGFtcGlvbiBvZiB0aGUgcGVvcGxlLiAKPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYsIHRoZW4sPC9xPiBzYWlkIFRpYmVyaXVzLCAKW2xkcXVvIF1oZSBzaG91bGQgY2hhbmdlIGFib3V0LCB3cm9uZyB0aGUgcGVvcGxlLCBtYWltIGl0cyBwb3dlciwgYW5kIHJvYiBpdCBvZiB0aGUgcHJpdmlsZWdlIG9mIHZvdGluZywgaGUgaGFzIGJ5IGhpcyBvd24gYWN0cyBkZXByaXZlZCBoaW1zZWxmIG9mIGhpcyBob25vdXJhYmxlIG9mZmljZSBieSBub3QgZnVsZmlsbGluZyB0aGUgY29uZGl0aW9ucyBvbiB3aGljaCBoZSByZWNlaXZlZCBpdDsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIG90aGVyd2lzZSB0aGVyZSB3b3VsZCBiZSBubyBpbnRlcmZlcmVuY2Ugd2l0aCBhIHRyaWJ1bmUgZXZlbiB0aG91Z2ggaGUgc2hvdWxkIHRyeSB0byBkZW1vbGlzaCB0aGUgQ2FwaXRvbCBvciBzZXQgZmlyZSB0byB0aGUgbmF2YWwgYXJzZW5hbC4gSWYgYSB0cmlidW5lIGRvZXMgdGhlc2UgdGhpbmdzLCBoZSBpcyBhIGJhZCB0cmlidW5lOyBidXQgaWYgaGUgYW5udWxzIHRoZSBwb3dlciBvZiB0aGUgcGVvcGxlLCBoZSBpcyBubyB0cmlidW5lIGF0IGFsbC4gSXMgaXQgbm90LCB0aGVuLCBhIG1vbnN0cm91cyB0aGluZyB0aGF0IGEgdHJpYnVuZSBzaG91bGQgaGF2ZSBwb3dlciB0byBoYWxlIGEgY29uc3VsIHRvIHByaXNvbiwgd2hpbGUgdGhlIHBlb3BsZSBjYW5ub3QgZGVwcml2ZSBhIHRyaWJ1bmUgb2YgaGlzIHBvd2VyIHdoZW4gaGUgZW1wbG95cyBpdCBhZ2FpbnN0IHRoZSB2ZXJ5IG9uZXMgd2hvIGJlc3Rvd2VkIGl0PyBGb3IgY29uc3VsIGFuZCB0cmlidW5lIGFsaWtlIGFyZSBlbGVjdGVkIGJ5IHRoZSBwZW9wbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdXJlbHkgdGhlIGtpbmdseSBvZmZpY2UsIGJlc2lkZXMgY29tcHJlaGVuZGluZyBpbiBpdHNlbGYgZXZlcnkgY2l2aWwgZnVuY3Rpb24sIGlzIGFsc28gY29uc2VjcmF0ZWQgdG8gdGhlIERlaXR5IGJ5IHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgbW9zdCBzb2xlbW4gcmVsaWdpb3VzIHJpdGVzOyBhbmQgeWV0IFRhcnF1aW4gd2FzIGV4cGVsbGVkIGJ5IHRoZSBjaXR5IGZvciBoaXMgd3JvbmctZG9pbmcsIGFuZCBiZWNhdXNlIG9mIG9uZSBtYW4ncyBpbnNvbGVuY2UgdGhlIHBvd2VyIHdoaWNoIGhhZCBmb3VuZGVkIFJvbWUgYW5kIGRlc2NlbmRlZCBmcm9tIGZhdGhlciB0byBzb24gd2FzIG92ZXJ0aHJvd24uIEFnYWluLCB3aGF0IGluc3RpdHV0aW9uIGF0IFJvbWUgaXMgc28gaG9seSBhbmQgdmVuZXJhYmxlIGFzIHRoYXQgb2YnIHRoZSB2aXJnaW5zIHdobyB0ZW5kIGFuZCB3YXRjaCB0aGUgdW5keWluZyBmaXJlPyBBbmQgeWV0IGlmIG9uZSBvZiB0aGVzZSBicmVha3MgaGVyIHZvd3MsIHNoZSBpcyBidXJpZWQgYWxpdmU7IGZvciB3aGVuIHRoZXkgc2luIGFnYWluc3QgdGhlIGdvZHMsIHRoZXkgZG8gbm90IHByZXNlcnZlIHRoYXQgaW52aW9sYWJsZSBjaGFyYWN0ZXIgd2hpY2ggaXMgZ2l2ZW4gdGhlbSBmb3IgdGhlaXIgc2VydmljZSB0byB0aGUgZ29kcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIGl0IGlzIG5vdCBqdXN0IHRoYXQgYSB0cmlidW5lIHdobyB3cm9uZ3MgdGhlIHBlb3BsZSBzaG91bGQgcmV0YWluIHRoYXQgaW52aW9sYWJsZSBjaGFyYWN0ZXIgd2hpY2ggaXMgZ2l2ZW4gaGltIGZvciBzZXJ2aWNlIHRvIHRoZSBwZW9wbGUsIHNpbmNlIGhlIGlzIGRlc3Ryb3lpbmcgdGhlIHZlcnkgcG93ZXIgd2hpY2ggaXMgdGhlIHNvdXJjZSBvZiBoaXMgb3duIHBvd2VyLiBBbmQgc3VyZWx5LCBpZiBpdCBpcyByaWdodCBmb3IgaGltIHRvIGJlIG1hZGUgdHJpYnVuZSBieSBhIG1ham9yaXR5IG9mIHRoZSB2b3RlcyBvZiB0aGUgdHJpYmVzLCBpdCBtdXN0IGJlIGV2ZW4gbW9yZSByaWdodCBmb3IgaGltIHRvIGJlIGRlcHJpdmVkIG9mIGhpcyB0cmlidW5lc2hpcCBieSBhIHVuYW5pbW91cyB2b3RlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWdhaW4sIG5vdGhpbmcgaXMgc28gc2FjcmVkIGFuZCBpbnZpb2xhdGUgYXMgb2JqZWN0cyBjb25zZWNyYXRlZCB0byB0aGUgZ29kczsgYW5kIHlldCBubyBvbmUgaGFzIGhpbmRlcmVkIHRoZSBwZW9wbGUgZnJvbSB1c2luZyBzdWNoIG9iamVjdHMsIG9yIG1vdmluZyB0aGVtLCBvciBjaGFuZ2luZyB0aGVpciBwb3NpdGlvbiBpbiBzdWNoIG1hbm5lciBhcyBtYXkgYmUgZGVzaXJlZC4gSXQgaXMgdGhlcmVmb3JlIHBlcm1pc3NpYmxlIGZvciB0aGUgcGVvcGxlIHRvIHRyYW5zZmVyIHRoZSB0cmlidW5hdGUgYWxzbywgYXMgYSBjb25zZWNyYXRlZCB0aGluZywgZnJvbSBvbmUgbWFuIHRvIGFub3RoZXIuIEFuZCB0aGF0IHRoZSBvZmZpY2UgaXMgbm90IGludmlvbGFibGUgb3IgaXJyZW1vdmFibGUgaXMgcGxhaW4gZnJvbSB0aGUgZmFjdCB0aGF0IG1hbnkgdGltZXMgbWVuIGhvbGRpbmcgaXQgcmVzaWduIGl0IHVuZGVyIG9hdGggb2YgZGlzYWJpbGl0eSwgYW5kIG9mIHRoZWlyIG93biBhY2NvcmQgYmVnIHRvIGJlIHJlbGlldmVkIG9mIGl0LltyZHF1byBdCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBwcmVzZW50LCB0aGVuLCBoZSBkaXNzb2x2ZWQgdGhlIGFzc2VtYmx5OyBidXQgcGVyY2VpdmluZyB0aGF0IHRoZSBjb3Vyc2UgaGUgaGFkIHRha2VuIHdpdGggcmVnYXJkIHRvIE9jdGF2aXVzIHdhcyB2ZXJ5IGRpc3BsZWFzaW5nLCBub3Qgb25seSB0byB0aGUgbm9ibGVzLCBidXQgYWxzbyB0byB0aGUgbXVsdGl0dWRlIChmb3IgaXQgd2FzIHRob3VnaHQgdGhhdCB0aGUgaGlnaCBhbmQgaG9ub3VyYWJsZSBkaWduaXR5IG9mIHRoZSB0cmlidW5hdGUsIHNvIGNhcmVmdWxseSBndWFyZGVkIHVwIHRvIHRoYXQgdGltZSwgaGFkIGJlZW4gaW5zdWx0ZWQgYW5kIGRlc3Ryb3llZCksIGhlIG1hZGUgYSBsZW5ndGh5IHNwZWVjaCBiZWZvcmUgdGhlIHBlb3BsZSwgYSBmZXcgb2YgdGhlIGFyZ3VtZW50cyBvZiB3aGljaCBpdCB3aWxsIG5vdCBiZSBvdXQgb2YgcGxhY2UgdG8gbGF5IGJlZm9yZSB0aGUgcmVhZGVyLCB0aGF0IGhlIG1heSBnZXQgYSBjb25jZXB0aW9uIG9mIHRoZSBtYW4ncyBzdWJ0bGV0eSBhbmQgcGVyc3Vhc2l2ZW5lc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkEgdHJpYnVuZSwgaGUgc2FpZCwgd2FzIHNhY3JlZCBhbmQgaW52aW9sYWJsZSwgYmVjYXVzZSBoZSB3YXMgY29uc2VjcmF0ZWQgdG8gdGhlIHBlb3BsZSBhbmQgd2FzIGEgY2hhbXBpb24gb2YgdGhlIHBlb3BsZS4gCjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYsIHRoZW4sPC9xPiBzYWlkIFRpYmVyaXVzLCAKW2xkcXVvIF1oZSBzaG91bGQgY2hhbmdlIGFib3V0LCB3cm9uZyB0aGUgcGVvcGxlLCBtYWltIGl0cyBwb3dlciwgYW5kIHJvYiBpdCBvZiB0aGUgcHJpdmlsZWdlIG9mIHZvdGluZywgaGUgaGFzIGJ5IGhpcyBvd24gYWN0cyBkZXByaXZlZCBoaW1zZWxmIG9mIGhpcyBob25vdXJhYmxlIG9mZmljZSBieSBub3QgZnVsZmlsbGluZyB0aGUgY29uZGl0aW9ucyBvbiB3aGljaCBoZSByZWNlaXZlZCBpdDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmZvciBvdGhlcndpc2UgdGhlcmUgd291bGQgYmUgbm8gaW50ZXJmZXJlbmNlIHdpdGggYSB0cmlidW5lIGV2ZW4gdGhvdWdoIGhlIHNob3VsZCB0cnkgdG8gZGVtb2xpc2ggdGhlIENhcGl0b2wgb3Igc2V0IGZpcmUgdG8gdGhlIG5hdmFsIGFyc2VuYWwuIElmIGEgdHJpYnVuZSBkb2VzIHRoZXNlIHRoaW5ncywgaGUgaXMgYSBiYWQgdHJpYnVuZTsgYnV0IGlmIGhlIGFubnVscyB0aGUgcG93ZXIgb2YgdGhlIHBlb3BsZSwgaGUgaXMgbm8gdHJpYnVuZSBhdCBhbGwuIElzIGl0IG5vdCwgdGhlbiwgYSBtb25zdHJvdXMgdGhpbmcgdGhhdCBhIHRyaWJ1bmUgc2hvdWxkIGhhdmUgcG93ZXIgdG8gaGFsZSBhIGNvbnN1bCB0byBwcmlzb24sIHdoaWxlIHRoZSBwZW9wbGUgY2Fubm90IGRlcHJpdmUgYSB0cmlidW5lIG9mIGhpcyBwb3dlciB3aGVuIGhlIGVtcGxveXMgaXQgYWdhaW5zdCB0aGUgdmVyeSBvbmVzIHdobyBiZXN0b3dlZCBpdD8gRm9yIGNvbnN1bCBhbmQgdHJpYnVuZSBhbGlrZSBhcmUgZWxlY3RlZCBieSB0aGUgcGVvcGxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdXJlbHkgdGhlIGtpbmdseSBvZmZpY2UsIGJlc2lkZXMgY29tcHJlaGVuZGluZyBpbiBpdHNlbGYgZXZlcnkgY2l2aWwgZnVuY3Rpb24sIGlzIGFsc28gY29uc2VjcmF0ZWQgdG8gdGhlIERlaXR5IGJ5IHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgbW9zdCBzb2xlbW4gcmVsaWdpb3VzIHJpdGVzOyBhbmQgeWV0IFRhcnF1aW4gd2FzIGV4cGVsbGVkIGJ5IHRoZSBjaXR5IGZvciBoaXMgd3JvbmctZG9pbmcsIGFuZCBiZWNhdXNlIG9mIG9uZSBtYW4ncyBpbnNvbGVuY2UgdGhlIHBvd2VyIHdoaWNoIGhhZCBmb3VuZGVkIFJvbWUgYW5kIGRlc2NlbmRlZCBmcm9tIGZhdGhlciB0byBzb24gd2FzIG92ZXJ0aHJvd24uIEFnYWluLCB3aGF0IGluc3RpdHV0aW9uIGF0IFJvbWUgaXMgc28gaG9seSBhbmQgdmVuZXJhYmxlIGFzIHRoYXQgb2YnIHRoZSB2aXJnaW5zIHdobyB0ZW5kIGFuZCB3YXRjaCB0aGUgdW5keWluZyBmaXJlPyBBbmQgeWV0IGlmIG9uZSBvZiB0aGVzZSBicmVha3MgaGVyIHZvd3MsIHNoZSBpcyBidXJpZWQgYWxpdmU7IGZvciB3aGVuIHRoZXkgc2luIGFnYWluc3QgdGhlIGdvZHMsIHRoZXkgZG8gbm90IHByZXNlcnZlIHRoYXQgaW52aW9sYWJsZSBjaGFyYWN0ZXIgd2hpY2ggaXMgZ2l2ZW4gdGhlbSBmb3IgdGhlaXIgc2VydmljZSB0byB0aGUgZ29kcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBpdCBpcyBub3QganVzdCB0aGF0IGEgdHJpYnVuZSB3aG8gd3JvbmdzIHRoZSBwZW9wbGUgc2hvdWxkIHJldGFpbiB0aGF0IGludmlvbGFibGUgY2hhcmFjdGVyIHdoaWNoIGlzIGdpdmVuIGhpbSBmb3Igc2VydmljZSB0byB0aGUgcGVvcGxlLCBzaW5jZSBoZSBpcyBkZXN0cm95aW5nIHRoZSB2ZXJ5IHBvd2VyIHdoaWNoIGlzIHRoZSBzb3VyY2Ugb2YgaGlzIG93biBwb3dlci4gQW5kIHN1cmVseSwgaWYgaXQgaXMgcmlnaHQgZm9yIGhpbSB0byBiZSBtYWRlIHRyaWJ1bmUgYnkgYSBtYWpvcml0eSBvZiB0aGUgdm90ZXMgb2YgdGhlIHRyaWJlcywgaXQgbXVzdCBiZSBldmVuIG1vcmUgcmlnaHQgZm9yIGhpbSB0byBiZSBkZXByaXZlZCBvZiBoaXMgdHJpYnVuZXNoaXAgYnkgYSB1bmFuaW1vdXMgdm90ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZ2Fpbiwgbm90aGluZyBpcyBzbyBzYWNyZWQgYW5kIGludmlvbGF0ZSBhcyBvYmplY3RzIGNvbnNlY3JhdGVkIHRvIHRoZSBnb2RzOyBhbmQgeWV0IG5vIG9uZSBoYXMgaGluZGVyZWQgdGhlIHBlb3BsZSBmcm9tIHVzaW5nIHN1Y2ggb2JqZWN0cywgb3IgbW92aW5nIHRoZW0sIG9yIGNoYW5naW5nIHRoZWlyIHBvc2l0aW9uIGluIHN1Y2ggbWFubmVyIGFzIG1heSBiZSBkZXNpcmVkLiBJdCBpcyB0aGVyZWZvcmUgcGVybWlzc2libGUgZm9yIHRoZSBwZW9wbGUgdG8gdHJhbnNmZXIgdGhlIHRyaWJ1bmF0ZSBhbHNvLCBhcyBhIGNvbnNlY3JhdGVkIHRoaW5nLCBmcm9tIG9uZSBtYW4gdG8gYW5vdGhlci4gQW5kIHRoYXQgdGhlIG9mZmljZSBpcyBub3QgaW52aW9sYWJsZSBvciBpcnJlbW92YWJsZSBpcyBwbGFpbiBmcm9tIHRoZSBmYWN0IHRoYXQgbWFueSB0aW1lcyBtZW4gaG9sZGluZyBpdCByZXNpZ24gaXQgdW5kZXIgb2F0aCBvZiBkaXNhYmlsaXR5LCBhbmQgb2YgdGhlaXIgb3duIGFjY29yZCBiZWcgdG8gYmUgcmVsaWV2ZWQgb2YgaXQuW3JkcXVvIF0KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3ZXJlIHRoZSBjaGllZiBwb2ludHMgaW4gdGhlIGp1c3RpZmljYXRpb24gb2YgaGlzIGNvdXJzZSB3aGljaCBUaWJlcml1cyBtYWRlLiBBbmQgbm93IGhpcyBmcmllbmRzLCBvYnNlcnZpbmcgdGhlIHRocmVhdHMgYW5kIHRoZSBob3N0aWxlIGNvbWJpbmF0aW9uICBhZ2FpbnN0IGhpbSwgdGhvdWdodCB0aGF0IGhlIG91Z2h0IHRvIGJlIG1hZGUgdHJpYnVuZSBhZ2FpbiBmb3IgdGhlIGZvbGxvd2luZyB5ZWFyLiBPbmNlIG1vcmUsIHRoZXJlZm9yZSwgVGliZXJpdXMgc291Z2h0IHRvIHdpbiB0aGUgZmF2b3VyIG9mIHRoZSBtdWx0aXR1ZGUgYnkgZnJlc2ggbGF3cywgcmVkdWNpbmcgdGhlIHRpbWUgb2YgbWlsaXRhcnkgc2VydmljZSwgZ3JhbnRpbmcgYXBwZWFsIHRvIHRoZSBwZW9wbGUgZnJvbSB0aGUgdmVyZGljdHMgb2YgdGhlIGp1ZGdlcywgYWRkaW5nIHRvIHRoZSBqdWRnZXMsIHdobyBhdCB0aGF0IHRpbWUgd2VyZSBjb21wb3NlZCBvZiBzZW5hdG9ycyBvbmx5LCBhbiBlcXVhbCBudW1iZXIgZnJvbSB0aGUgZXF1ZXN0cmlhbiBvcmRlciwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGluIGV2ZXJ5IHdheSBhdCBsZW5ndGggdHJ5aW5nIHRvIG1haW0gdGhlIHBvd2VyIG9mIHRoZSBzZW5hdGUgZnJvbSBtb3RpdmVzIG9mIGFuZ2VyIGFuZCBjb250ZW50aW91c25lc3MgcmF0aGVyIHRoYW4gZnJvbSBjYWxjdWxhdGlvbnMgb2YganVzdGljZSBhbmQgdGhlIHB1YmxpYyBnb29kLiBBbmQgd2hlbiwgYXMgdGhlIHZvdGluZyB3YXMgZ29pbmcgb24sIHRoZSBmcmllbmRzIG9mIFRpYmVyaXVzIHBlcmNlaXZlZCB0aGF0IHRoZWlyIG9wcG9uZW50cyB3ZXJlIGdldHRpbmcgdGhlIGJldHRlciBvZiB0aGUgY29udGVzdCwgc2luY2UgYWxsIHRoZSBwZW9wbGUgd2VyZSBub3QgcHJlc2VudCwgaW4gdGhlIGZpcnN0IHBsYWNlIHRoZXkgcmVzb3J0ZWQgdG8gYWJ1c2Ugb2YgaGlzIGZlbGxvdyB0cmlidW5lcywgYW5kIHNvIHByb3RyYWN0ZWQgdGhlIHRpbWU7IG5leHQsIHRoZXkgZGlzbWlzc2VkIHRoZSBhc3NlbWJseSwgYW5kIG9yZGVyZWQgdGhhdCBpdCBzaG91bGQgY29udmVuZSBvbiB0aGUgZm9sbG93aW5nIGRheS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBUaWJlcml1cywgZ29pbmcgZG93biBpbnRvIHRoZSBmb3J1bSwgYXQgZmlyc3Qgc3VwcGxpY2F0ZWQgdGhlIGNpdGl6ZW5zIGluIGEgaHVtYmxlIG1hbm5lciBhbmQgd2l0aCB0ZWFycyBpbiBoaXMgZXllczsgbmV4dCwgaGUgZGVjbGFyZWQgaGUgd2FzIGFmcmFpZCB0aGF0IGhpcyBlbmVtaWVzIHdvdWxkIGJyZWFrIGludG8gaGlzIGhvdXNlIGJ5IG5pZ2h0IGFuZCBraWxsIGhpbSwgYW5kIHRoZXJlYnkgc28gd3JvdWdodCB1cG9uIGhpcyBoZWFyZXJzIHRoYXQgZ3JlYXQgbnVtYmVycyBvZiB0aGVtIHRvb2sgdXAgdGhlaXIgc3RhdGlvbiBhYm91dCBoaXMgaG91c2UgYW5kIHNwZW50IHRoZSBuaWdodCB0aGVyZSBvbiBndWFyZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3ZXJlIHRoZSBjaGllZiBwb2ludHMgaW4gdGhlIGp1c3RpZmljYXRpb24gb2YgaGlzIGNvdXJzZSB3aGljaCBUaWJlcml1cyBtYWRlLiBBbmQgbm93IGhpcyBmcmllbmRzLCBvYnNlcnZpbmcgdGhlIHRocmVhdHMgYW5kIHRoZSBob3N0aWxlIGNvbWJpbmF0aW9uICBhZ2FpbnN0IGhpbSwgdGhvdWdodCB0aGF0IGhlIG91Z2h0IHRvIGJlIG1hZGUgdHJpYnVuZSBhZ2FpbiBmb3IgdGhlIGZvbGxvd2luZyB5ZWFyLiBPbmNlIG1vcmUsIHRoZXJlZm9yZSwgVGliZXJpdXMgc291Z2h0IHRvIHdpbiB0aGUgZmF2b3VyIG9mIHRoZSBtdWx0aXR1ZGUgYnkgZnJlc2ggbGF3cywgcmVkdWNpbmcgdGhlIHRpbWUgb2YgbWlsaXRhcnkgc2VydmljZSwgZ3JhbnRpbmcgYXBwZWFsIHRvIHRoZSBwZW9wbGUgZnJvbSB0aGUgdmVyZGljdHMgb2YgdGhlIGp1ZGdlcywgYWRkaW5nIHRvIHRoZSBqdWRnZXMsIHdobyBhdCB0aGF0IHRpbWUgd2VyZSBjb21wb3NlZCBvZiBzZW5hdG9ycyBvbmx5LCBhbiBlcXVhbCBudW1iZXIgZnJvbSB0aGUgZXF1ZXN0cmlhbiBvcmRlciwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbiBldmVyeSB3YXkgYXQgbGVuZ3RoIHRyeWluZyB0byBtYWltIHRoZSBwb3dlciBvZiB0aGUgc2VuYXRlIGZyb20gbW90aXZlcyBvZiBhbmdlciBhbmQgY29udGVudGlvdXNuZXNzIHJhdGhlciB0aGFuIGZyb20gY2FsY3VsYXRpb25zIG9mIGp1c3RpY2UgYW5kIHRoZSBwdWJsaWMgZ29vZC4gQW5kIHdoZW4sIGFzIHRoZSB2b3Rpbmcgd2FzIGdvaW5nIG9uLCB0aGUgZnJpZW5kcyBvZiBUaWJlcml1cyBwZXJjZWl2ZWQgdGhhdCB0aGVpciBvcHBvbmVudHMgd2VyZSBnZXR0aW5nIHRoZSBiZXR0ZXIgb2YgdGhlIGNvbnRlc3QsIHNpbmNlIGFsbCB0aGUgcGVvcGxlIHdlcmUgbm90IHByZXNlbnQsIGluIHRoZSBmaXJzdCBwbGFjZSB0aGV5IHJlc29ydGVkIHRvIGFidXNlIG9mIGhpcyBmZWxsb3cgdHJpYnVuZXMsIGFuZCBzbyBwcm90cmFjdGVkIHRoZSB0aW1lOyBuZXh0LCB0aGV5IGRpc21pc3NlZCB0aGUgYXNzZW1ibHksIGFuZCBvcmRlcmVkIHRoYXQgaXQgc2hvdWxkIGNvbnZlbmUgb24gdGhlIGZvbGxvd2luZyBkYXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gVGliZXJpdXMsIGdvaW5nIGRvd24gaW50byB0aGUgZm9ydW0sIGF0IGZpcnN0IHN1cHBsaWNhdGVkIHRoZSBjaXRpemVucyBpbiBhIGh1bWJsZSBtYW5uZXIgYW5kIHdpdGggdGVhcnMgaW4gaGlzIGV5ZXM7IG5leHQsIGhlIGRlY2xhcmVkIGhlIHdhcyBhZnJhaWQgdGhhdCBoaXMgZW5lbWllcyB3b3VsZCBicmVhayBpbnRvIGhpcyBob3VzZSBieSBuaWdodCBhbmQga2lsbCBoaW0sIGFuZCB0aGVyZWJ5IHNvIHdyb3VnaHQgdXBvbiBoaXMgaGVhcmVycyB0aGF0IGdyZWF0IG51bWJlcnMgb2YgdGhlbSB0b29rIHVwIHRoZWlyIHN0YXRpb24gYWJvdXQgaGlzIGhvdXNlIGFuZCBzcGVudCB0aGUgbmlnaHQgdGhlcmUgb24gZ3VhcmQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IGJyZWFrIG9mIGRheSB0aGVyZSBjYW1lIHRvIHRoZSBob3VzZSB0aGUgbWFuIHdobyBicm91Z2h0IHRoZSBiaXJkcyB3aXRoIHdoaWNoIGF1c3BpY2VzIGFyZSB0YWtlbiwgYW5kIHRocmV3IGZvb2QgYmVmb3JlIHRoZW0uIEJ1dCB0aGUgYmlyZHMgd291bGQgbm90IGNvbWUgb3V0IG9mIHRoZSBjYWdlLCB3aXRoIHRoZSBleGNlcHRpb24gb2Ygb25lLCB0aG91Z2ggdGhlIGtlZXBlciBzaG9vayB0aGUgY2FnZSByaWdodCBoYXJkOyBhbmQgZXZlbiB0aGUgb25lIHRoYXQgY2FtZSBvdXQgd291bGQgbm90IHRvdWNoIHRoZSBmb29kLCBidXQgcmFpc2VkIGl0cyBsZWZ0IHdpbmcsIHN0cmV0Y2hlZCBvdXQgaXRzIGxlZywgYW5kIHRoZW4gcmFuIGJhY2sgaW50byB0aGUgY2FnZS4gVGhpcyByZW1pbmRlZCBUaWJlcml1cyBvZiBhbiBvbWVuIHRoYXQgaGFkIGhhcHBlbmVkIGVhcmxpZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBhIGhlbG1ldCB3aGljaCBoZSB3b3JlIGluIGJhdHRsZSwgZXhjZXB0aW9uYWxseSBhZG9ybmVkIGFuZCBzcGxlbmRpZDsgaW50byB0aGlzIHNlcnBlbnRzIGNyYXdsZWQgdW5ub3RpY2VkLCBsYWlkIGVnZ3MgdGhlcmUgYW5kIGhhdGNoZWQgdGhlbSBvdXQuIEZvciB0aGlzIHJlYXNvbiBUaWJlcml1cyB3YXMgYWxsIHRoZSBtb3JlIGRpc3R1cmJlZCBieSB0aGUgc2lnbnMgZnJvbSB0aGUgYmlyZHMuIEJ1dCBuZXZlcnRoZWxlc3MgaGUgc2V0IG91dCwgb24gbGVhcm5pbmcgdGhhdCB0aGUgcGVvcGxlIHdlcmUgYXNzZW1ibGVkIG9uIHRoZSBDYXBpdG9sOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYmVmb3JlIGhlIGdvdCBvdXQgb2YgdGhlIGhvdXNlLCBoZSBzdHVtYmxlZCBhZ2FpbnN0IHRoZSB0aHJlc2hvbGQuIFRoZSBibG93IHdhcyBzbyBzZXZlcmUgdGhhdCB0aGUgbmFpbCBvZiBoaXMgZ3JlYXQgdG9lIHdhcyBicm9rZW4gYW5kIHRoZSBibG9vZCByYW4gb3V0IHRocm91Z2ggaGlzIHNob2UuIEhlIGhhZCBnb25lIG9uIGJ1dCBhIGxpdHRsZSB3YXkgd2hlbiByYXZlbnMgd2VyZSBzZWVuIGZpZ2h0aW5nIG9uIHRoZSByb29mIG9mIGEgaG91c2UgdG8gaGlzIGxlZnQgaGFuZDsgYW5kIHRob3VnaCB0aGVyZSB3ZXJlIG1hbnkgcGVvcGxlLCBhcyB3YXMgbmF0dXJhbCwgcGFzc2luZyBieSwgYSBzdG9uZSBkaXNsb2RnZWQgYnkgb25lIG9mIHRoZSByYXZlbnMgZmVsbCBhdCB0aGUgZm9vdCBvZiBUaWJlcml1cyBoaW1zZWxmLiBUaGlzIGNhdXNlZCBldmVuIHRoZSBib2xkZXN0IG9mIGhpcyBmb2xsb3dlcnMgdG8gcGF1c2U7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBCbG9zc2l1cyBvZiBDdW1hZSwgd2hvIHdhcyBwcmVzZW50LCBzYWlkIGl0IHdvdWxkIGJlIGEgc2hhbWUgYW5kIGEgZ3JlYXQgZGlzZ3JhY2UgaWYgVGliZXJpdXMsIGEgc29uIG9mIEdyYWNjaHVzLCBhIGdyYW5kc29uIG9mIFNjaXBpbyBBZnJpY2FudXMsIGFuZCBhIGNoYW1waW9uIG9mIHRoZSBSb21hbiBwZW9wbGUsIGZvciBmZWFyIG9mIGEgcmF2ZW4gc2hvdWxkIHJlZnVzZSB0byBvYmV5IHRoZSBzdW1tb25zIG9mIGhpcyBmZWxsb3cgY2l0aXplbnM7IHN1Y2ggc2hhbWVmdWwgY29uZHVjdCwgbW9yZW92ZXIsIHdvdWxkIG5vdCBiZSBtYWRlIGEgbWVyZSBtYXR0ZXIgb2YgcmlkaWN1bGUgYnkgaGlzIGVuZW1pZXMsIGJ1dCB0aGV5IHdvdWxkIGRlY3J5IGhpbSB0byB0aGUgcGVvcGxlIGFzIG9uZSB3aG8gd2FzIGF0IGxhc3QgZ2l2aW5nIGhpbXNlbGYgdGhlIGFpcnMgb2YgYSB0eXJhbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBzYW1lIHRpbWUgYWxzbyBtYW55IG9mIGhpcyBmcmllbmRzIG9uIHRoZSBDYXBpdG9sIGNhbWUgcnVubmluZyB0byBUaWJlcml1cyB3aXRoIHVyZ2VudCBhcHBlYWxzIHRvIGhhc3RlbiB0aGl0aGVyLCBzaW5jZSBtYXR0ZXJzIHRoZXJlIHdlcmUgZ29pbmcgd2VsbC4gQW5kIGluIGZhY3QgdGhpbmdzIHR1cm5lZCBvdXQgc3BsZW5kaWRseSBmb3IgVGliZXJpdXMgYXQgZmlyc3Q7IGFzIHNvb24gYXMgaGUgY2FtZSBpbnRvIHZpZXcgdGhlIGNyb3dkIHJhaXNlZCBhIGZyaWVuZGx5IHNob3V0LCBhbmQgYXMgaGUgY2FtZSB1cCB0aGUgaGlsbCB0aGV5IGdhdmUgaGltIGEgY29yZGlhbCB3ZWxjb21lIGFuZCByYW5nZWQgdGhlbXNlbHZlcyBhYm91dCBoaW0sIHRoYXQgbm8gc3RyYW5nZXIgbWlnaHQgYXBwcm9hY2guCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYnJlYWsgb2YgZGF5IHRoZXJlIGNhbWUgdG8gdGhlIGhvdXNlIHRoZSBtYW4gd2hvIGJyb3VnaHQgdGhlIGJpcmRzIHdpdGggd2hpY2ggYXVzcGljZXMgYXJlIHRha2VuLCBhbmQgdGhyZXcgZm9vZCBiZWZvcmUgdGhlbS4gQnV0IHRoZSBiaXJkcyB3b3VsZCBub3QgY29tZSBvdXQgb2YgdGhlIGNhZ2UsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBvbmUsIHRob3VnaCB0aGUga2VlcGVyIHNob29rIHRoZSBjYWdlIHJpZ2h0IGhhcmQ7IGFuZCBldmVuIHRoZSBvbmUgdGhhdCBjYW1lIG91dCB3b3VsZCBub3QgdG91Y2ggdGhlIGZvb2QsIGJ1dCByYWlzZWQgaXRzIGxlZnQgd2luZywgc3RyZXRjaGVkIG91dCBpdHMgbGVnLCBhbmQgdGhlbiByYW4gYmFjayBpbnRvIHRoZSBjYWdlLiBUaGlzIHJlbWluZGVkIFRpYmVyaXVzIG9mIGFuIG9tZW4gdGhhdCBoYWQgaGFwcGVuZWQgZWFybGllci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBhIGhlbG1ldCB3aGljaCBoZSB3b3JlIGluIGJhdHRsZSwgZXhjZXB0aW9uYWxseSBhZG9ybmVkIGFuZCBzcGxlbmRpZDsgaW50byB0aGlzIHNlcnBlbnRzIGNyYXdsZWQgdW5ub3RpY2VkLCBsYWlkIGVnZ3MgdGhlcmUgYW5kIGhhdGNoZWQgdGhlbSBvdXQuIEZvciB0aGlzIHJlYXNvbiBUaWJlcml1cyB3YXMgYWxsIHRoZSBtb3JlIGRpc3R1cmJlZCBieSB0aGUgc2lnbnMgZnJvbSB0aGUgYmlyZHMuIEJ1dCBuZXZlcnRoZWxlc3MgaGUgc2V0IG91dCwgb24gbGVhcm5pbmcgdGhhdCB0aGUgcGVvcGxlIHdlcmUgYXNzZW1ibGVkIG9uIHRoZSBDYXBpdG9sOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBiZWZvcmUgaGUgZ290IG91dCBvZiB0aGUgaG91c2UsIGhlIHN0dW1ibGVkIGFnYWluc3QgdGhlIHRocmVzaG9sZC4gVGhlIGJsb3cgd2FzIHNvIHNldmVyZSB0aGF0IHRoZSBuYWlsIG9mIGhpcyBncmVhdCB0b2Ugd2FzIGJyb2tlbiBhbmQgdGhlIGJsb29kIHJhbiBvdXQgdGhyb3VnaCBoaXMgc2hvZS4gSGUgaGFkIGdvbmUgb24gYnV0IGEgbGl0dGxlIHdheSB3aGVuIHJhdmVucyB3ZXJlIHNlZW4gZmlnaHRpbmcgb24gdGhlIHJvb2Ygb2YgYSBob3VzZSB0byBoaXMgbGVmdCBoYW5kOyBhbmQgdGhvdWdoIHRoZXJlIHdlcmUgbWFueSBwZW9wbGUsIGFzIHdhcyBuYXR1cmFsLCBwYXNzaW5nIGJ5LCBhIHN0b25lIGRpc2xvZGdlZCBieSBvbmUgb2YgdGhlIHJhdmVucyBmZWxsIGF0IHRoZSBmb290IG9mIFRpYmVyaXVzIGhpbXNlbGYuIFRoaXMgY2F1c2VkIGV2ZW4gdGhlIGJvbGRlc3Qgb2YgaGlzIGZvbGxvd2VycyB0byBwYXVzZTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBCbG9zc2l1cyBvZiBDdW1hZSwgd2hvIHdhcyBwcmVzZW50LCBzYWlkIGl0IHdvdWxkIGJlIGEgc2hhbWUgYW5kIGEgZ3JlYXQgZGlzZ3JhY2UgaWYgVGliZXJpdXMsIGEgc29uIG9mIEdyYWNjaHVzLCBhIGdyYW5kc29uIG9mIFNjaXBpbyBBZnJpY2FudXMsIGFuZCBhIGNoYW1waW9uIG9mIHRoZSBSb21hbiBwZW9wbGUsIGZvciBmZWFyIG9mIGEgcmF2ZW4gc2hvdWxkIHJlZnVzZSB0byBvYmV5IHRoZSBzdW1tb25zIG9mIGhpcyBmZWxsb3cgY2l0aXplbnM7IHN1Y2ggc2hhbWVmdWwgY29uZHVjdCwgbW9yZW92ZXIsIHdvdWxkIG5vdCBiZSBtYWRlIGEgbWVyZSBtYXR0ZXIgb2YgcmlkaWN1bGUgYnkgaGlzIGVuZW1pZXMsIGJ1dCB0aGV5IHdvdWxkIGRlY3J5IGhpbSB0byB0aGUgcGVvcGxlIGFzIG9uZSB3aG8gd2FzIGF0IGxhc3QgZ2l2aW5nIGhpbXNlbGYgdGhlIGFpcnMgb2YgYSB0eXJhbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBzYW1lIHRpbWUgYWxzbyBtYW55IG9mIGhpcyBmcmllbmRzIG9uIHRoZSBDYXBpdG9sIGNhbWUgcnVubmluZyB0byBUaWJlcml1cyB3aXRoIHVyZ2VudCBhcHBlYWxzIHRvIGhhc3RlbiB0aGl0aGVyLCBzaW5jZSBtYXR0ZXJzIHRoZXJlIHdlcmUgZ29pbmcgd2VsbC4gQW5kIGluIGZhY3QgdGhpbmdzIHR1cm5lZCBvdXQgc3BsZW5kaWRseSBmb3IgVGliZXJpdXMgYXQgZmlyc3Q7IGFzIHNvb24gYXMgaGUgY2FtZSBpbnRvIHZpZXcgdGhlIGNyb3dkIHJhaXNlZCBhIGZyaWVuZGx5IHNob3V0LCBhbmQgYXMgaGUgY2FtZSB1cCB0aGUgaGlsbCB0aGV5IGdhdmUgaGltIGEgY29yZGlhbCB3ZWxjb21lIGFuZCByYW5nZWQgdGhlbXNlbHZlcyBhYm91dCBoaW0sIHRoYXQgbm8gc3RyYW5nZXIgbWlnaHQgYXBwcm9hY2guCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBNdWNpdXMgYmVnYW4gb25jZSBtb3JlIHRvIHN1bW1vbiB0aGUgdHJpYmVzIHRvIHRoZSB2b3RlLCBub25lIG9mIHRoZSBjdXN0b21hcnkgZm9ybXMgY291bGQgYmUgb2JzZXJ2ZWQgYmVjYXVzZSBvZiB0aGUgZGlzdHVyYmFuY2UgdGhhdCBhcm9zZSBvbiB0aGUgb3V0c2tpcnRzIG9mIHRoZSB0aHJvbmcsIHdoZXJlIHRoZXJlIHdhcyBjcm93ZGluZyBiYWNrIGFuZCBmb3J0aCBiZXR3ZWVuIHRoZSBmcmllbmRzIG9mIFRpYmVyaXVzIGFuZCB0aGVpciBvcHBvbmVudHMsIHdobyB3ZXJlIHN0cml2aW5nIHRvIGZvcmNlIHRoZWlyIHdheSBpbiBhbmQgbWluZ2xlIHdpdGggdGhlIHJlc3QuIE1vcmVvdmVyLCBhdCB0aGlzIGp1bmN0dXJlIEZ1bHZpdXMgRmxhY2N1cywgYSBzZW5hdG9yLCBwb3N0ZWQgaGltc2VsZiBpbiBhIGNvbnNwaWN1b3VzIHBsYWNlLCBhbmQgc2luY2UgaXQgd2FzIGltcG9zc2libGUgdG8gbWFrZSBoaXMgdm9pY2UgaGVhcmQgc28gZmFyLCBpbmRpY2F0ZWQgd2l0aCBoaXMgaGFuZCB0aGF0IGhlIHdpc2hlZCB0byB0ZWxsIFRpYmVyaXVzIHNvbWV0aGluZyBtZWFudCBmb3IgaGlzIGVhciBhbG9uZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGliZXJpdXMgb3JkZXJlZCB0aGUgY3Jvd2QgdG8gcGFydCBmb3IgRmxhdml1cywgd2hvIG1hZGUgaGlzIHdheSB1cCB0byBoaW0gd2l0aCBkaWZmaWN1bHR5LCBhbmQgdG9sZCBoaW0gdGhhdCBhdCBhIHNlc3Npb24gb2YgdGhlIHNlbmF0ZSB0aGUgcGFydHkgb2YgdGhlIHJpY2gsIHNpbmNlIHRoZXkgY291bGQgbm90IHByZXZhaWwgdXBvbiB0aGUgY29uc3VsIHRvIGRvIHNvLCB3ZXJlIHB1cnBvc2luZyB0byBraWxsIFRpYmVyaXVzIHRoZW1zZWx2ZXMsIGFuZCBmb3IgdGhpcyBwdXJwb3NlIGhhZCB1bmRlciBhaW1zIGEgbXVsdGl0dWRlIG9mIHRoZWlyIGZyaWVuZHMgYW5kIHNsYXZlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIE11Y2l1cyBiZWdhbiBvbmNlIG1vcmUgdG8gc3VtbW9uIHRoZSB0cmliZXMgdG8gdGhlIHZvdGUsIG5vbmUgb2YgdGhlIGN1c3RvbWFyeSBmb3JtcyBjb3VsZCBiZSBvYnNlcnZlZCBiZWNhdXNlIG9mIHRoZSBkaXN0dXJiYW5jZSB0aGF0IGFyb3NlIG9uIHRoZSBvdXRza2lydHMgb2YgdGhlIHRocm9uZywgd2hlcmUgdGhlcmUgd2FzIGNyb3dkaW5nIGJhY2sgYW5kIGZvcnRoIGJldHdlZW4gdGhlIGZyaWVuZHMgb2YgVGliZXJpdXMgYW5kIHRoZWlyIG9wcG9uZW50cywgd2hvIHdlcmUgc3RyaXZpbmcgdG8gZm9yY2UgdGhlaXIgd2F5IGluIGFuZCBtaW5nbGUgd2l0aCB0aGUgcmVzdC4gTW9yZW92ZXIsIGF0IHRoaXMganVuY3R1cmUgRnVsdml1cyBGbGFjY3VzLCBhIHNlbmF0b3IsIHBvc3RlZCBoaW1zZWxmIGluIGEgY29uc3BpY3VvdXMgcGxhY2UsIGFuZCBzaW5jZSBpdCB3YXMgaW1wb3NzaWJsZSB0byBtYWtlIGhpcyB2b2ljZSBoZWFyZCBzbyBmYXIsIGluZGljYXRlZCB3aXRoIGhpcyBoYW5kIHRoYXQgaGUgd2lzaGVkIHRvIHRlbGwgVGliZXJpdXMgc29tZXRoaW5nIG1lYW50IGZvciBoaXMgZWFyIGFsb25lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRpYmVyaXVzIG9yZGVyZWQgdGhlIGNyb3dkIHRvIHBhcnQgZm9yIEZsYXZpdXMsIHdobyBtYWRlIGhpcyB3YXkgdXAgdG8gaGltIHdpdGggZGlmZmljdWx0eSwgYW5kIHRvbGQgaGltIHRoYXQgYXQgYSBzZXNzaW9uIG9mIHRoZSBzZW5hdGUgdGhlIHBhcnR5IG9mIHRoZSByaWNoLCBzaW5jZSB0aGV5IGNvdWxkIG5vdCBwcmV2YWlsIHVwb24gdGhlIGNvbnN1bCB0byBkbyBzbywgd2VyZSBwdXJwb3NpbmcgdG8ga2lsbCBUaWJlcml1cyB0aGVtc2VsdmVzLCBhbmQgZm9yIHRoaXMgcHVycG9zZSBoYWQgdW5kZXIgYWltcyBhIG11bHRpdHVkZSBvZiB0aGVpciBmcmllbmRzIGFuZCBzbGF2ZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRpYmVyaXVzLCBhY2NvcmRpbmdseSwgcmVwb3J0ZWQgdGhpcyB0byB0aG9zZSB3aG8gc3Rvb2QgYWJvdXQgaGltLCBhbmQgdGhleSBhdCBvbmNlIGdpcmRlZCB1cCB0aGVpciB0b2dhcywgYW5kIGJyZWFraW5nIGluIHBpZWNlcyB0aGUgc3BlYXItc2hhZnRzIHdpdGggd2hpY2ggdGhlIG9mZmljZXJzIGtlZXAgYmFjayB0aGUgY3Jvd2QsIGRpc3RyaWJ1dGVkIHRoZSBmcmFnbWVudHMgYW1vbmcgdGhlbXNlbHZlcywgdGhhdCB0aGV5IG1pZ2h0IGRlZmVuZCB0aGVtc2VsdmVzIGFnYWluc3QgdGhlaXIgYXNzYWlsYW50cy4gVGhvc2Ugd2hvIHdlcmUgZmFydGhlciBvZmYsIGhvd2V2ZXIsIHdvbmRlcmVkIGF0IHdoYXQgd2FzIGdvaW5nIG9uIGFuZCBhc2tlZCB3aGF0IGl0IG1lYW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVyZXVwb24gVGliZXJpdXMgcHV0IGhpcyBoYW5kIHRvIGhpcyBoZWFkLCBtYWtpbmcgdGhpcyB2aXNpYmxlIHNpZ24gdGhhdCBoaXMgbGlmZSB3YXMgaW4gZGFuZ2VyLCBzaW5jZSB0aGUgcXVlc3Rpb25lcnMgY291bGQgbm90IGhlYXIgaGlzIHZvaWNlLiBCdXQgaGlzIG9wcG9uZW50cywgb24gc2VlaW5nIHRoaXMsIHJhbiB0byB0aGUgc2VuYXRlIGFuZCB0b2xkIHRoYXQgYm9keSB0aGF0IFRpYmVyaXVzIHdhcyBhc2tpbmcgZm9yIGEgY3Jvd247IGFuZCB0aGF0IGhpcyBwdXR0aW5nIGhpcyBoYW5kIHRvIGhpcyBoZWFkIHdhcyBhIHNpZ24gaGF2aW5nIHRoYXQgbWVhbmluZy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoZSBzZW5hdG9ycywgb2YgY291cnNlLCB3ZXJlIGdyZWF0bHkgZGlzdHVyYmVkLCBhbmQgTmFzaWNhIGRlbWFuZGVkIHRoYXQgdGhlIGNvbnN1bCBzaG91bGQgY29tZSB0byB0aGUgcmVzY3VlIG9mIHRoZSBzdGF0ZSBhbmQgcHV0IGRvd24gdGhlIHR5cmFudC4gVGhlIGNvbnN1bCByZXBsaWVkIHdpdGggbWlsZG5lc3MgdGhhdCBoZSB3b3VsZCByZXNvcnQgdG8gbm8gdmlvbGVuY2UgYW5kIHdvdWxkIHB1dCBubyBjaXRpemVuIHRvIGRlYXRoIHdpdGhvdXQgYSB0cmlhbDsgaWYsIGhvd2V2ZXIsIHRoZSBwZW9wbGUsIHVuZGVyIHBlcnN1YXNpb24gb3IgY29tcHVsc2lvbiBmcm9tIFRpYmVyaXVzLCBzaG91bGQgdm90ZSBhbnl0aGluZyB0aGF0IHdhcyB1bmxhd2Z1bCwgaGUgd291bGQgbm90IHJlZ2FyZCB0aGlzIHZvdGUgYXMgYmluZGluZy4gVGhlcmV1cG9uIE5hc2ljYSBzcHJhbmcgdG8gaGlzIGZlZXQgYW5kIHNhaWQ6IAo8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TaW5jZSwgdGhlbiwgdGhlIGNoaWVmIG1hZ2lzdHJhdGUgYmUgdHJheXMgdGhlIHN0YXRlLCBkbyB5ZSB3aG8gd2lzaCB0byBzdWNjb3VyIHRoZSBsYXdzIGZvbGxvdyBtZS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCB0aGVzZSB3b3JkcyBoZSBjb3ZlcmVkIGhpcyBoZWFkIHdpdGggdGhlIHNraXJ0IG9mIGhpcyB0b2dhIGFuZCBzZXQgb3V0IGZvciB0aGUgQ2FwaXRvbC4gQWxsIHRoZSBzZW5hdG9ycyB3aG8gZm9sbG93ZWQgaGltIHdyYXBwZWQgdGhlaXIgdG9nYXMgYWJvdXQgdGhlaXIgbGVmdCBhcm1zIGFuZCBwdXNoZWQgYXNpZGUgdGhvc2Ugd2hvIHN0b29kIGluIHRoZWlyIHBhdGgsIG5vIG1hbiBvcHBvc2luZyB0aGVtLCBpbiB2aWV3IG9mIHRoZWlyIGRpZ25pdHksIGJ1dCBhbGwgdGFraW5nIHRvIGZsaWdodCBhbmQgdHJhbXBsaW5nIHVwb24gb25lIGFub3RoZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGliZXJpdXMsIGFjY29yZGluZ2x5LCByZXBvcnRlZCB0aGlzIHRvIHRob3NlIHdobyBzdG9vZCBhYm91dCBoaW0sIGFuZCB0aGV5IGF0IG9uY2UgZ2lyZGVkIHVwIHRoZWlyIHRvZ2FzLCBhbmQgYnJlYWtpbmcgaW4gcGllY2VzIHRoZSBzcGVhci1zaGFmdHMgd2l0aCB3aGljaCB0aGUgb2ZmaWNlcnMga2VlcCBiYWNrIHRoZSBjcm93ZCwgZGlzdHJpYnV0ZWQgdGhlIGZyYWdtZW50cyBhbW9uZyB0aGVtc2VsdmVzLCB0aGF0IHRoZXkgbWlnaHQgZGVmZW5kIHRoZW1zZWx2ZXMgYWdhaW5zdCB0aGVpciBhc3NhaWxhbnRzLiBUaG9zZSB3aG8gd2VyZSBmYXJ0aGVyIG9mZiwgaG93ZXZlciwgd29uZGVyZWQgYXQgd2hhdCB3YXMgZ29pbmcgb24gYW5kIGFza2VkIHdoYXQgaXQgbWVhbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJldXBvbiBUaWJlcml1cyBwdXQgaGlzIGhhbmQgdG8gaGlzIGhlYWQsIG1ha2luZyB0aGlzIHZpc2libGUgc2lnbiB0aGF0IGhpcyBsaWZlIHdhcyBpbiBkYW5nZXIsIHNpbmNlIHRoZSBxdWVzdGlvbmVycyBjb3VsZCBub3QgaGVhciBoaXMgdm9pY2UuIEJ1dCBoaXMgb3Bwb25lbnRzLCBvbiBzZWVpbmcgdGhpcywgcmFuIHRvIHRoZSBzZW5hdGUgYW5kIHRvbGQgdGhhdCBib2R5IHRoYXQgVGliZXJpdXMgd2FzIGFza2luZyBmb3IgYSBjcm93bjsgYW5kIHRoYXQgaGlzIHB1dHRpbmcgaGlzIGhhbmQgdG8gaGlzIGhlYWQgd2FzIGEgc2lnbiBoYXZpbmcgdGhhdCBtZWFuaW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgc2VuYXRvcnMsIG9mIGNvdXJzZSwgd2VyZSBncmVhdGx5IGRpc3R1cmJlZCwgYW5kIE5hc2ljYSBkZW1hbmRlZCB0aGF0IHRoZSBjb25zdWwgc2hvdWxkIGNvbWUgdG8gdGhlIHJlc2N1ZSBvZiB0aGUgc3RhdGUgYW5kIHB1dCBkb3duIHRoZSB0eXJhbnQuIFRoZSBjb25zdWwgcmVwbGllZCB3aXRoIG1pbGRuZXNzIHRoYXQgaGUgd291bGQgcmVzb3J0IHRvIG5vIHZpb2xlbmNlIGFuZCB3b3VsZCBwdXQgbm8gY2l0aXplbiB0byBkZWF0aCB3aXRob3V0IGEgdHJpYWw7IGlmLCBob3dldmVyLCB0aGUgcGVvcGxlLCB1bmRlciBwZXJzdWFzaW9uIG9yIGNvbXB1bHNpb24gZnJvbSBUaWJlcml1cywgc2hvdWxkIHZvdGUgYW55dGhpbmcgdGhhdCB3YXMgdW5sYXdmdWwsIGhlIHdvdWxkIG5vdCByZWdhcmQgdGhpcyB2b3RlIGFzIGJpbmRpbmcuIFRoZXJldXBvbiBOYXNpY2Egc3ByYW5nIHRvIGhpcyBmZWV0IGFuZCBzYWlkOiAKPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TaW5jZSwgdGhlbiwgdGhlIGNoaWVmIG1hZ2lzdHJhdGUgYmUgdHJheXMgdGhlIHN0YXRlLCBkbyB5ZSB3aG8gd2lzaCB0byBzdWNjb3VyIHRoZSBsYXdzIGZvbGxvdyBtZS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlc2Ugd29yZHMgaGUgY292ZXJlZCBoaXMgaGVhZCB3aXRoIHRoZSBza2lydCBvZiBoaXMgdG9nYSBhbmQgc2V0IG91dCBmb3IgdGhlIENhcGl0b2wuIEFsbCB0aGUgc2VuYXRvcnMgd2hvIGZvbGxvd2VkIGhpbSB3cmFwcGVkIHRoZWlyIHRvZ2FzIGFib3V0IHRoZWlyIGxlZnQgYXJtcyBhbmQgcHVzaGVkIGFzaWRlIHRob3NlIHdobyBzdG9vZCBpbiB0aGVpciBwYXRoLCBubyBtYW4gb3Bwb3NpbmcgdGhlbSwgaW4gdmlldyBvZiB0aGVpciBkaWduaXR5LCBidXQgYWxsIHRha2luZyB0byBmbGlnaHQgYW5kIHRyYW1wbGluZyB1cG9uIG9uZSBhbm90aGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBhdHRlbmRhbnRzIG9mIHRoZSBzZW5hdG9ycyBjYXJyaWVkIGNsdWJzIGFuZCBzdGF2ZXMgd2hpY2ggdGhleSBoYWQgYnJvdWdodCBmcm9tIGhvbWU7IGJ1dCB0aGUgc2VuYXRvcnMgdGhlbXNlbHZlcyBzZWl6ZWQgdGhlIGZyYWdtZW50cyBhbmQgbGVncyBvZiB0aGUgYmVuY2hlcyB0aGF0IHdlcmUgc2hhdHRlcmVkIGJ5IHRoZSBjcm93ZCBpbiBpdHMgZmxpZ2h0LCBhbmQgd2VudCB1cCBhZ2FpbnN0IFRpYmVyaXVzLCBhdCB0aGUgc2FtZSB0aW1lIHNtaXRpbmcgdGhvc2Ugd2hvIHdlcmUgZHJhd24gdXAgdG8gcHJvdGVjdCBoaW0uIE9mIHRoZXNlIHRoZXJlIHdhcyBhIHJvdXQgYW5kIGEgc2xhdWdodGVyOyBhbmQgYXMgVGliZXJpdXMgaGltc2VsZiB0dXJuZWQgdG8gZmx5LCBzb21lb25lIGxhaWQgaG9sZCBvZiBoaXMgZ2FybWVudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIGxldCBoaXMgdG9nYSBnbyBhbmQgZmxlZCBpbiBoaXMgdHVuaWMuIEJ1dCBoZSBzdHVtYmxlZCBhbmQgZmVsbCB0byB0aGUgZ3JvdW5kIGFtb25nIHNvbWUgYm9kaWVzIHRoYXQgbGF5IGluIGZyb250IG9mIGhpbS4gQXMgaGUgc3Ryb3ZlIHRvIHJpc2UgdG8gaGlzIGZlZXQsIGhlIHJlY2VpdmVkIGhpcyBmaXJzdCBibG93LCBhcyBldmVyeWJvZHkgYWRtaXRzLCBmcm9tIFB1YmxpdXMgU2F0eXJlaXVzLCBvbmUgb2YgaGlzIGNvbGxlYWd1ZXMsIHdobyBzbW90ZSBoaW0gb24gdGhlIGhlYWQgd2l0aCB0aGUgbGVnIG9mIGEgYmVuY2g7IHRvIHRoZSBzZWNvbmQgYmxvdyBjbGFpbSB3YXMgbWFkZSBieSBMdWNpdXMgUnVmdXMsIHdobyBwbHVtZWQgaGltc2VsZiB1cG9uIGl0IGFzIHVwb24gc29tZSBub2JsZSBkZWVkLiBBbmQgb2YgdGhlIHJlc3QgbW9yZSB0aGFuIHRocmVlIGh1bmRyZWQgd2VyZSBzbGFpbiBieSBibG93cyBmcm9tIHN0aWNrcyBhbmQgc3RvbmVzLCBidXQgbm90IG9uZSBieSB0aGUgc3dvcmQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGF0dGVuZGFudHMgb2YgdGhlIHNlbmF0b3JzIGNhcnJpZWQgY2x1YnMgYW5kIHN0YXZlcyB3aGljaCB0aGV5IGhhZCBicm91Z2h0IGZyb20gaG9tZTsgYnV0IHRoZSBzZW5hdG9ycyB0aGVtc2VsdmVzIHNlaXplZCB0aGUgZnJhZ21lbnRzIGFuZCBsZWdzIG9mIHRoZSBiZW5jaGVzIHRoYXQgd2VyZSBzaGF0dGVyZWQgYnkgdGhlIGNyb3dkIGluIGl0cyBmbGlnaHQsIGFuZCB3ZW50IHVwIGFnYWluc3QgVGliZXJpdXMsIGF0IHRoZSBzYW1lIHRpbWUgc21pdGluZyB0aG9zZSB3aG8gd2VyZSBkcmF3biB1cCB0byBwcm90ZWN0IGhpbS4gT2YgdGhlc2UgdGhlcmUgd2FzIGEgcm91dCBhbmQgYSBzbGF1Z2h0ZXI7IGFuZCBhcyBUaWJlcml1cyBoaW1zZWxmIHR1cm5lZCB0byBmbHksIHNvbWVvbmUgbGFpZCBob2xkIG9mIGhpcyBnYXJtZW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIGxldCBoaXMgdG9nYSBnbyBhbmQgZmxlZCBpbiBoaXMgdHVuaWMuIEJ1dCBoZSBzdHVtYmxlZCBhbmQgZmVsbCB0byB0aGUgZ3JvdW5kIGFtb25nIHNvbWUgYm9kaWVzIHRoYXQgbGF5IGluIGZyb250IG9mIGhpbS4gQXMgaGUgc3Ryb3ZlIHRvIHJpc2UgdG8gaGlzIGZlZXQsIGhlIHJlY2VpdmVkIGhpcyBmaXJzdCBibG93LCBhcyBldmVyeWJvZHkgYWRtaXRzLCBmcm9tIFB1YmxpdXMgU2F0eXJlaXVzLCBvbmUgb2YgaGlzIGNvbGxlYWd1ZXMsIHdobyBzbW90ZSBoaW0gb24gdGhlIGhlYWQgd2l0aCB0aGUgbGVnIG9mIGEgYmVuY2g7IHRvIHRoZSBzZWNvbmQgYmxvdyBjbGFpbSB3YXMgbWFkZSBieSBMdWNpdXMgUnVmdXMsIHdobyBwbHVtZWQgaGltc2VsZiB1cG9uIGl0IGFzIHVwb24gc29tZSBub2JsZSBkZWVkLiBBbmQgb2YgdGhlIHJlc3QgbW9yZSB0aGFuIHRocmVlIGh1bmRyZWQgd2VyZSBzbGFpbiBieSBibG93cyBmcm9tIHN0aWNrcyBhbmQgc3RvbmVzLCBidXQgbm90IG9uZSBieSB0aGUgc3dvcmQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGZpcnN0IHNlZGl0aW9uIGF0IFJvbWUsIHNpbmNlIHRoZSBhYm9saXRpb24gb2Ygcm95YWwgcG93ZXIsIHRvIGVuZCBpbiBibG9vZHNoZWQgYW5kIHRoZSBkZWF0aCBvZiBjaXRpemVuczsgdGhlIHJlc3QgdGhvdWdoIG5laXRoZXIgdHJpZmxpbmcgbm9yIHJhaXNlZCBmb3IgdHJpZmxpbmcgb2JqZWN0cywgd2VyZSBzZXR0bGVkIGJ5IG11dHVhbCBjb25jZXNzaW9ucywgdGhlIG5vYmxlcyB5aWVsZGluZyBmcm9tIGZlYXIgb2YgdGhlIG11bHRpdHVkZSwgYW5kIHRoZSBwZW9wbGUgb3V0IG9mIHJlc3BlY3QgZm9yIHRoZSBzZW5hdGUuIEFuZCBpdCB3YXMgdGhvdWdodCB0aGF0IGV2ZW4gb24gdGhpcyBvY2Nhc2lvbiBUaWJlcml1cyB3b3VsZCBoYXZlIGdpdmVuIHdheSB3aXRob3V0IGRpZmZpY3VsdHkgaGFkIHBlcnN1YXNpb24gYmVlbiBicm91Z2h0IHRvIGJlYXIgdXBvbiBoaW0sIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3b3VsZCBoYXZlIHlpZWxkZWQgc3RpbGwgbW9yZSBlYXNpbHkgaWYgaGlzIGFzc2FpbGFudHMgaGFkIG5vdCByZXNvcnRlZCB0byB3b3VuZHMgYW5kIGJsb29kc2hlZDsgZm9yIGhpcyBhZGhlcmVudHMgbnVtYmVyZWQgbm90IG1vcmUgdGhhbiB0aHJlZSB0aG91c2FuZC4gQnV0IHRoZSBjb21iaW5hdGlvbiBhZ2FpbnN0IGhpbSB3b3VsZCBzZWVtIHRvIGhhdmUgYXJpc2VuIGZyb20gdGhlIGhhdHJlZCBhbmQgYW5nZXIgb2YgdGhlIHJpY2ggcmF0aGVyIHRoYW4gZnJvbSB0aGUgcHJldGV4dHMgd2hpY2ggdGhleSBhbGxlZ2VkOyBhbmQgdGhlcmUgaXMgc3Ryb25nIHByb29mIG9mIHRoaXMgaW4gdGhlaXIgbGF3bGVzcyBhbmQgc2F2YWdlIHRyZWF0bWVudCBvZiBoaXMgZGVhZCBib2R5LiBGb3IgdGhleSB3b3VsZCBub3QgbGlzdGVuIHRvIGhpcyBicm90aGVyJ3MgcmVxdWVzdCB0aGF0IGhlIG1pZ2h0IHRha2UgdXAgdGhlIGJvZHkgYW5kIGJ1cnkgaXQgYnkgbmlnaHQsIGJ1dCB0aHJldyBpdCBpbnRvIHRoZSByaXZlciBhbG9uZyB3aXRoIHRoZSBvdGhlciBkZWFkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3Igd2FzIHRoaXMgYWxsOyB0aGV5IGJhbmlzaGVkIHNvbWUgb2YgaGlzIGZyaWVuZHMgd2l0aG91dCBhIHRyaWFsIGFuZCBvdGhlcnMgdGhleSBhcnJlc3RlZCBhbmQgcHV0IHRvIGRlYXRoLiBBbW9uZyB0aGVzZSBEaW9waGFuZXMgdGhlIHJoZXRvcmljaWFuIGFsc28gcGVyaXNoZWQuIEEgY2VydGFpbiBDYWl1cyBWaWxsaXVzIHRoZXkgc2h1dCB1cCBpbiBhIGNhZ2UsIGFuZCB0aGVuIHB1dCBpbiB2aXBlcnMgYW5kIHNlcnBlbnRzLCBhbmQgaW4gdGhpcyB3YXkga2lsbGVkIGhpbS4gQmxvc3NpdXMgb2YgQ3VtYWUgd2FzIGJyb3VnaHQgYmVmb3JlIHRoZSBjb25zdWxzLCBhbmQgd2hlbiBoZSB3YXMgYXNrZWQgYWJvdXQgd2hhdCBoYWQgcGFzc2VkLCBoZSBhZG1pdHRlZCB0aGF0IGhlIGhhZCBkb25lIGV2ZXJ5dGhpbmcgYXQgdGhlIGJpZGRpbmcgb2YgVGliZXJpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gTmFzaWNhIHNhaWQgdG8gaGltLCAKPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCwgdGhlbiwgaWYgVGliZXJpdXMgaGFkIG9yZGVyZWQgdGhlbSB0byBzZXQgZmlyZSB0byB0aGUgQ2FwaXRvbD88L3E+IEJsb3NzaXVzIGF0IGZpcnN0IHJlcGxpZWQgdGhhdCBUaWJlcml1cyB3b3VsZCBub3QgaGF2ZSBnaXZlbiBzdWNoIGFuIG9yZGVyOyBidXQgd2hlbiB0aGUgc2FtZSBxdWVzdGlvbiB3YXMgcHV0IHRvIGhpbSBvZnRlbiBhbmQgYnkgbWFueSBwZXJzb25zLCBoZSBzYWlkOiAKPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYgc3VjaCBhIG1hbiBhcyBUaWJlcml1cyBoYWQgb3JkZXJlZCBzdWNoIGEgdGhpbmcsIGl0IHdvdWxkIGFsc28gaGF2ZSBiZWVuIHJpZ2h0IGZvciBtZSB0byBkbyBpdDsgZm9yIFRpYmVyaXVzIHdvdWxkIG5vdCBoYXZlIGdpdmVuIHN1Y2ggYW4gb3JkZXIgaWYgaXQgaGFkIG5vdCBiZWVuIGZvciB0aGUgaW50ZXJlc3Qgb2YgdGhlIHBlb3BsZS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgc3Rvcnkgb2YgQmxvc3NpdXMsIGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBbWljLiAxMS4zNyIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+RGUgYW0uPC90aXRsZT4gMTEuIDM3PC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlYuIE1heC4gNC43LjEiPlZhbGVyaXVzIE1heGltdXMsIGl2LiA3LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBXZWxsLCB0aGVuLCBCbG9zc2l1cyB3YXMgYWNxdWl0dGVkLCBhbmQgYWZ0ZXJ3YXJkcyB3ZW50IHRvIEFyaXN0b25pY3VzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHByZXRlbmRlciB0byB0aGUgdGhyb25lIG9mIEF0dGFsdXMgUGhpbG9tZXRvciAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRHIDE0LjEiIHZhbGlkPSJ5ZXMiPnhpdi4gMTwvYmlibD4pLiBIZSB3YXMgZGVmZWF0ZWQgYW5kIHRha2VuIHByaXNvbmVyIGJ5IHRoZSBSb21hbnMgaW4gMTMwIEIuQy48L25vdGU+IGluIEFzaWEsIGFuZCB3aGVuIHRoZSBjYXVzZSBvZiBBcmlzdG9uaWN1cyB3YXMgbG9zdCwgc2xldyBoaW1zZWxmLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpcyBzYWlkIHRvIGhhdmUgYmVlbiB0aGUgZmlyc3Qgc2VkaXRpb24gYXQgUm9tZSwgc2luY2UgdGhlIGFib2xpdGlvbiBvZiByb3lhbCBwb3dlciwgdG8gZW5kIGluIGJsb29kc2hlZCBhbmQgdGhlIGRlYXRoIG9mIGNpdGl6ZW5zOyB0aGUgcmVzdCB0aG91Z2ggbmVpdGhlciB0cmlmbGluZyBub3IgcmFpc2VkIGZvciB0cmlmbGluZyBvYmplY3RzLCB3ZXJlIHNldHRsZWQgYnkgbXV0dWFsIGNvbmNlc3Npb25zLCB0aGUgbm9ibGVzIHlpZWxkaW5nIGZyb20gZmVhciBvZiB0aGUgbXVsdGl0dWRlLCBhbmQgdGhlIHBlb3BsZSBvdXQgb2YgcmVzcGVjdCBmb3IgdGhlIHNlbmF0ZS4gQW5kIGl0IHdhcyB0aG91Z2h0IHRoYXQgZXZlbiBvbiB0aGlzIG9jY2FzaW9uIFRpYmVyaXVzIHdvdWxkIGhhdmUgZ2l2ZW4gd2F5IHdpdGhvdXQgZGlmZmljdWx0eSBoYWQgcGVyc3Vhc2lvbiBiZWVuIGJyb3VnaHQgdG8gYmVhciB1cG9uIGhpbSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3b3VsZCBoYXZlIHlpZWxkZWQgc3RpbGwgbW9yZSBlYXNpbHkgaWYgaGlzIGFzc2FpbGFudHMgaGFkIG5vdCByZXNvcnRlZCB0byB3b3VuZHMgYW5kIGJsb29kc2hlZDsgZm9yIGhpcyBhZGhlcmVudHMgbnVtYmVyZWQgbm90IG1vcmUgdGhhbiB0aHJlZSB0aG91c2FuZC4gQnV0IHRoZSBjb21iaW5hdGlvbiBhZ2FpbnN0IGhpbSB3b3VsZCBzZWVtIHRvIGhhdmUgYXJpc2VuIGZyb20gdGhlIGhhdHJlZCBhbmQgYW5nZXIgb2YgdGhlIHJpY2ggcmF0aGVyIHRoYW4gZnJvbSB0aGUgcHJldGV4dHMgd2hpY2ggdGhleSBhbGxlZ2VkOyBhbmQgdGhlcmUgaXMgc3Ryb25nIHByb29mIG9mIHRoaXMgaW4gdGhlaXIgbGF3bGVzcyBhbmQgc2F2YWdlIHRyZWF0bWVudCBvZiBoaXMgZGVhZCBib2R5LiBGb3IgdGhleSB3b3VsZCBub3QgbGlzdGVuIHRvIGhpcyBicm90aGVyJ3MgcmVxdWVzdCB0aGF0IGhlIG1pZ2h0IHRha2UgdXAgdGhlIGJvZHkgYW5kIGJ1cnkgaXQgYnkgbmlnaHQsIGJ1dCB0aHJldyBpdCBpbnRvIHRoZSByaXZlciBhbG9uZyB3aXRoIHRoZSBvdGhlciBkZWFkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vciB3YXMgdGhpcyBhbGw7IHRoZXkgYmFuaXNoZWQgc29tZSBvZiBoaXMgZnJpZW5kcyB3aXRob3V0IGEgdHJpYWwgYW5kIG90aGVycyB0aGV5IGFycmVzdGVkIGFuZCBwdXQgdG8gZGVhdGguIEFtb25nIHRoZXNlIERpb3BoYW5lcyB0aGUgcmhldG9yaWNpYW4gYWxzbyBwZXJpc2hlZC4gQSBjZXJ0YWluIENhaXVzIFZpbGxpdXMgdGhleSBzaHV0IHVwIGluIGEgY2FnZSwgYW5kIHRoZW4gcHV0IGluIHZpcGVycyBhbmQgc2VycGVudHMsIGFuZCBpbiB0aGlzIHdheSBraWxsZWQgaGltLiBCbG9zc2l1cyBvZiBDdW1hZSB3YXMgYnJvdWdodCBiZWZvcmUgdGhlIGNvbnN1bHMsIGFuZCB3aGVuIGhlIHdhcyBhc2tlZCBhYm91dCB3aGF0IGhhZCBwYXNzZWQsIGhlIGFkbWl0dGVkIHRoYXQgaGUgaGFkIGRvbmUgZXZlcnl0aGluZyBhdCB0aGUgYmlkZGluZyBvZiBUaWJlcml1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gTmFzaWNhIHNhaWQgdG8gaGltLCAKPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0LCB0aGVuLCBpZiBUaWJlcml1cyBoYWQgb3JkZXJlZCB0aGVtIHRvIHNldCBmaXJlIHRvIHRoZSBDYXBpdG9sPzwvcT4gQmxvc3NpdXMgYXQgZmlyc3QgcmVwbGllZCB0aGF0IFRpYmVyaXVzIHdvdWxkIG5vdCBoYXZlIGdpdmVuIHN1Y2ggYW4gb3JkZXI7IGJ1dCB3aGVuIHRoZSBzYW1lIHF1ZXN0aW9uIHdhcyBwdXQgdG8gaGltIG9mdGVuIGFuZCBieSBtYW55IHBlcnNvbnMsIGhlIHNhaWQ6IAo8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHN1Y2ggYSBtYW4gYXMgVGliZXJpdXMgaGFkIG9yZGVyZWQgc3VjaCBhIHRoaW5nLCBpdCB3b3VsZCBhbHNvIGhhdmUgYmVlbiByaWdodCBmb3IgbWUgdG8gZG8gaXQ7IGZvciBUaWJlcml1cyB3b3VsZCBub3QgaGF2ZSBnaXZlbiBzdWNoIGFuIG9yZGVyIGlmIGl0IGhhZCBub3QgYmVlbiBmb3IgdGhlIGludGVyZXN0IG9mIHRoZSBwZW9wbGUuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgc3Rvcnkgb2YgQmxvc3NpdXMsIGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEFtaWMuIDExLjM3IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIGFtLjwvdGl0bGU+IDExLiAzNzwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlYuIE1heC4gNC43LjEiPlZhbGVyaXVzIE1heGltdXMsIGl2LiA3LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBXZWxsLCB0aGVuLCBCbG9zc2l1cyB3YXMgYWNxdWl0dGVkLCBhbmQgYWZ0ZXJ3YXJkcyB3ZW50IHRvIEFyaXN0b25pY3VzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBbWljLiAxMS4zNyIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSBhbS48L3RpdGxlPiAxMS4gMzc8L2JpYmw+OyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSBhbS48L3RpdGxlPiAxMS4gMzc8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJWLiBNYXguIDQuNy4xIj5WYWxlcml1cyBNYXhpbXVzLCBpdi4gNy4gMS48L2JpYmw+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHByZXRlbmRlciB0byB0aGUgdGhyb25lIG9mIEF0dGFsdXMgUGhpbG9tZXRvciAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVEcgMTQuMSIgdmFsaWQ9InllcyI+eGl2LiAxPC9iaWJsPikuIEhlIHdhcyBkZWZlYXRlZCBhbmQgdGFrZW4gcHJpc29uZXIgYnkgdGhlIFJvbWFucyBpbiAxMzAgQi5DLjwvbm90ZT4gaW4gQXNpYSwgYW5kIHdoZW4gdGhlIGNhdXNlIG9mIEFyaXN0b25pY3VzIHdhcyBsb3N0LCBzbGV3IGhpbXNlbGYuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRHIDE0LjEiIHZhbGlkPSJ5ZXMiPnhpdi4gMTwvYmlibD4pLiBIZSB3YXMgZGVmZWF0ZWQgYW5kIHRha2VuIHByaXNvbmVyIGJ5IHRoZSBSb21hbnMgaW4gMTMwIEIuQy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHNlbmF0ZSwgdHJ5aW5nIHRvIGNvbmNpbGlhdGUgdGhlIHBlb3BsZSBub3cgdGhhdCBtYXR0ZXJzIGhhZCBnb25lIHNvIGZhciwgbm8gbG9uZ2VyIG9wcG9zZWQgdGhlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgcHVibGljIGxhbmQsIGFuZCBwcm9wb3NlZCB0aGF0IHRoZSBwZW9wbGUgc2hvdWxkIGVsZWN0IGEgY29tbWlzc2lvbmVyIGluIHBsYWNlIG9mIFRpYmVyaXVzLiBTbyB0aGV5IHRvb2sgYSBiYWxsb3QgYW5kIGVsZWN0ZWQgUHVibGl1cyBDcmFzc3VzLCB3aG8gd2FzIGEgcmVsYXRpdmUgb2YgR3JhY2NodXM7IGZvciBoaXMgZGF1Z2h0ZXIgTGljaW5pYSB3YXMgdGhlIHdpZmUgb2YgQ2FpdXMgR3JhY2NodXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgQ29ybmVsaXVzIE5lcG9zPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gYSBsb3N0IGJpb2dyYXBoeS48L25vdGU+ICBzYXlzIHRoYXQgaXQgd2FzIG5vdCB0aGUgZGF1Z2h0ZXIgb2YgQ3Jhc3N1cywgYnV0IG9mIHRoZSBCcnV0dXMgd2hvIHRyaXVtcGhlZCBvdmVyIHRoZSBMdXNpdGFuaWFucywgd2hvbSBDYWl1cyBtYXJyaWVkOyB0aGUgbWFqb3JpdHkgb2Ygd3JpdGVycywgaG93ZXZlciwgc3RhdGUgdGhlIG1hdHRlciBhcyBJIGhhdmUgZG9uZS4gTW9yZW92ZXIsIHNpbmNlIHRoZSBwZW9wbGUgZmVsdCBiaXR0ZXJseSBvdmVyIHRoZSBkZWF0aCBvZiBUaWJlcml1cyBhbmQgd2VyZSBjbGVhcmx5IGF3YWl0aW5nIGFuIG9wcG9ydHVuaXR5IGZvciByZXZlbmdlLCBhbmQgc2luY2UgTmFzaWNhIHdhcyBhbHJlYWR5IHRocmVhdGVuZWQgd2l0aCBwcm9zZWN1dGlvbnMsIHRoZSBzZW5hdGUsIGZlYXJpbmcgZm9yIGhpcyBzYWZldHksIHZvdGVkIHRvIHNlbmQgaGltIHRvIEFzaWEsIGFsdGhvdWdoIGl0IGhhZCBubyBuZWVkIG9mIGhpbSB0aGVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoZW4gcGVvcGxlIG1ldCBOYXNpY2EsIHRoZXkgZGlkIG5vdCB0cnkgdG8gaGlkZSB0aGVpciBoYXRyZWQgb2YgaGltLCBidXQgZ3JldyBzYXZhZ2UgYW5kIGNyaWVkIG91dCB1cG9uIGhpbSB3aGVyZXZlciBoZSBjaGFuY2VkIHRvIGJlLCBjYWxsaW5nIGhpbSBhbiBhY2N1cnNlZCBtYW4gYW5kIGEgdHlyYW50LCB3aG8gaGFkIGRlZmlsZWQgd2l0aCB0aGUgbXVyZGVyIG9mIGFuIGludmlvbGFibGUgYW5kIHNhY3JlZCBwZXJzb24gdGhlIGhvbGllc3QgYW5kIG1vc3QgYXdlLWluc3BpcmluZyBvZiB0aGUgY2l0eSdzIHNhbmN0dWFyaWVzLiBBbmQgc28gTmFzaWNhIHN0ZWFsdGhpbHkgbGVmdCBJdGFseSwgYWx0aG91Z2ggaGUgd2FzIGJvdW5kIHRoZXJlIGJ5IHRoZSBtb3N0IGltcG9ydGFudCBhbmQgc2FjcmVkIGZ1bmN0aW9uczsgZm9yIGhlIHdhcyBwb250aWZleCBtYXhpbXVzLiBIZSByb2FtZWQgYW5kIHdhbmRlcmVkIGFib3V0IGluIGZvcmVpZ24gbGFuZHMgaWdub21pbmlvdXNseSwgYW5kIGFmdGVyIGEgc2hvcnQgdGltZSBlbmRlZCBoaXMgbGlmZSBhdCBQZXJnYW11bS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBpdCBpcyBubyB3b25kZXIgdGhhdCB0aGUgcGVvcGxlIHNvIG11Y2ggaGF0ZWQgTmFzaWNhLCB3aGVuIGV2ZW4gU2NpcGlvIEFmcmljYW51cywgdGhhbiB3aG9tIG5vIG9uZSB3b3VsZCBzZWVtIHRvIGhhdmUgYmVlbiBtb3JlIGp1c3RseSBvciBtb3JlIGRlZXBseSBsb3ZlZCBieSB0aGUgUm9tYW5zLCBjYW1lIHdpdGhpbiBhIGxpdHRsZSBvZiBmb3JmZWl0aW5nIGFuZCBsb3NpbmcgdGhlIHBvcHVsYXIgZmF2b3VyIGJlY2F1c2UsIHRvIGJlZ2luIHdpdGgsIGF0IE51bWFudGlhLCB3aGVuIGhlIGxlYXJuZWQgb2YgdGhlIGRlYXRoIG9mIFRpYmVyaXVzLCBoZSByZWNpdGVkIGluIGEgbG91ZCB2b2ljZSB0aGUgdmVyc2Ugb2YgSG9tZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDEuNDciIHZhbGlkPSJ5ZXMiPk9keXNzZXksIGkuIDQ3PC9iaWJsPiAoQXRoZW5hLCBvZiBBZWdpc3RodXMpLjwvbm90ZT46W21kYXNoIF0gCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPlNvIHBlcmlzaCBhbHNvIGFsbCBvdGhlcnMgd2hvICBvbiBzdWNoIHdpY2tlZG5lc3MgPC9sPgoJCQkJCSAgICAgICAgICA8bD52ZW50dXJlLDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYmVjYXVzZSwgaW4gdGhlIHNlY29uZCBwbGFjZSwgd2hlbiBDYWl1cyBhbmQgRnVsdml1cyBhc2tlZCBoaW0gaW4gYW4gYXNzZW1ibHkgb2YgdGhlIHBlb3BsZSB3aGF0IGhlIHRob3VnaHQgYWJvdXQgdGhlIGRlYXRoIG9mIFRpYmVyaXVzLCBoZSBtYWRlIGEgcmVwbHkgd2hpY2ggc2hvd2VkIGhpcyBkaXNsaWtlIG9mIHRoZSBtZWFzdXJlcyBhZHZvY2F0ZWQgYnkgaGltLiBDb25zZXF1ZW50bHkgdGhlIHBlb3BsZSBiZWdhbiB0byBpbnRlcnJ1cHQgaGltIGFzIGhlIHdhcyBzcGVha2luZywgYSB0aGluZyB3aGljaCB0aGV5IGhhZCBuZXZlciBkb25lIGJlZm9yZSwgYW5kIFNjaXBpbyBoaW1zZWxmIHdhcyB0aGVyZWJ5IGxlZCBvbiB0byBhYnVzZSB0aGUgcGVvcGxlLiBPZiB0aGVzZSBtYXR0ZXJzIEkgaGF2ZSB3cml0dGVuIGNpcmN1bXN0YW50aWFsbHkgaW4gbXkgTGlmZSBvZiBTY2lwaW8uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T25lIG9mIHRoZSBsb3N0IGJpb2dyYXBoaWVzLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBzZW5hdGUsIHRyeWluZyB0byBjb25jaWxpYXRlIHRoZSBwZW9wbGUgbm93IHRoYXQgbWF0dGVycyBoYWQgZ29uZSBzbyBmYXIsIG5vIGxvbmdlciBvcHBvc2VkIHRoZSBkaXN0cmlidXRpb24gb2YgdGhlIHB1YmxpYyBsYW5kLCBhbmQgcHJvcG9zZWQgdGhhdCB0aGUgcGVvcGxlIHNob3VsZCBlbGVjdCBhIGNvbW1pc3Npb25lciBpbiBwbGFjZSBvZiBUaWJlcml1cy4gU28gdGhleSB0b29rIGEgYmFsbG90IGFuZCBlbGVjdGVkIFB1YmxpdXMgQ3Jhc3N1cywgd2hvIHdhcyBhIHJlbGF0aXZlIG9mIEdyYWNjaHVzOyBmb3IgaGlzIGRhdWdodGVyIExpY2luaWEgd2FzIHRoZSB3aWZlIG9mIENhaXVzIEdyYWNjaHVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgQ29ybmVsaXVzIE5lcG9zPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBhIGxvc3QgYmlvZ3JhcGh5Ljwvbm90ZT4gIHNheXMgdGhhdCBpdCB3YXMgbm90IHRoZSBkYXVnaHRlciBvZiBDcmFzc3VzLCBidXQgb2YgdGhlIEJydXR1cyB3aG8gdHJpdW1waGVkIG92ZXIgdGhlIEx1c2l0YW5pYW5zLCB3aG9tIENhaXVzIG1hcnJpZWQ7IHRoZSBtYWpvcml0eSBvZiB3cml0ZXJzLCBob3dldmVyLCBzdGF0ZSB0aGUgbWF0dGVyIGFzIEkgaGF2ZSBkb25lLiBNb3Jlb3Zlciwgc2luY2UgdGhlIHBlb3BsZSBmZWx0IGJpdHRlcmx5IG92ZXIgdGhlIGRlYXRoIG9mIFRpYmVyaXVzIGFuZCB3ZXJlIGNsZWFybHkgYXdhaXRpbmcgYW4gb3Bwb3J0dW5pdHkgZm9yIHJldmVuZ2UsIGFuZCBzaW5jZSBOYXNpY2Egd2FzIGFscmVhZHkgdGhyZWF0ZW5lZCB3aXRoIHByb3NlY3V0aW9ucywgdGhlIHNlbmF0ZSwgZmVhcmluZyBmb3IgaGlzIHNhZmV0eSwgdm90ZWQgdG8gc2VuZCBoaW0gdG8gQXNpYSwgYWx0aG91Z2ggaXQgaGFkIG5vIG5lZWQgb2YgaGltIHRoZXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHBlb3BsZSBtZXQgTmFzaWNhLCB0aGV5IGRpZCBub3QgdHJ5IHRvIGhpZGUgdGhlaXIgaGF0cmVkIG9mIGhpbSwgYnV0IGdyZXcgc2F2YWdlIGFuZCBjcmllZCBvdXQgdXBvbiBoaW0gd2hlcmV2ZXIgaGUgY2hhbmNlZCB0byBiZSwgY2FsbGluZyBoaW0gYW4gYWNjdXJzZWQgbWFuIGFuZCBhIHR5cmFudCwgd2hvIGhhZCBkZWZpbGVkIHdpdGggdGhlIG11cmRlciBvZiBhbiBpbnZpb2xhYmxlIGFuZCBzYWNyZWQgcGVyc29uIHRoZSBob2xpZXN0IGFuZCBtb3N0IGF3ZS1pbnNwaXJpbmcgb2YgdGhlIGNpdHkncyBzYW5jdHVhcmllcy4gQW5kIHNvIE5hc2ljYSBzdGVhbHRoaWx5IGxlZnQgSXRhbHksIGFsdGhvdWdoIGhlIHdhcyBib3VuZCB0aGVyZSBieSB0aGUgbW9zdCBpbXBvcnRhbnQgYW5kIHNhY3JlZCBmdW5jdGlvbnM7IGZvciBoZSB3YXMgcG9udGlmZXggbWF4aW11cy4gSGUgcm9hbWVkIGFuZCB3YW5kZXJlZCBhYm91dCBpbiBmb3JlaWduIGxhbmRzIGlnbm9taW5pb3VzbHksIGFuZCBhZnRlciBhIHNob3J0IHRpbWUgZW5kZWQgaGlzIGxpZmUgYXQgUGVyZ2FtdW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaXQgaXMgbm8gd29uZGVyIHRoYXQgdGhlIHBlb3BsZSBzbyBtdWNoIGhhdGVkIE5hc2ljYSwgd2hlbiBldmVuIFNjaXBpbyBBZnJpY2FudXMsIHRoYW4gd2hvbSBubyBvbmUgd291bGQgc2VlbSB0byBoYXZlIGJlZW4gbW9yZSBqdXN0bHkgb3IgbW9yZSBkZWVwbHkgbG92ZWQgYnkgdGhlIFJvbWFucywgY2FtZSB3aXRoaW4gYSBsaXR0bGUgb2YgZm9yZmVpdGluZyBhbmQgbG9zaW5nIHRoZSBwb3B1bGFyIGZhdm91ciBiZWNhdXNlLCB0byBiZWdpbiB3aXRoLCBhdCBOdW1hbnRpYSwgd2hlbiBoZSBsZWFybmVkIG9mIHRoZSBkZWF0aCBvZiBUaWJlcml1cywgaGUgcmVjaXRlZCBpbiBhIGxvdWQgdm9pY2UgdGhlIHZlcnNlIG9mIEhvbWVyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gMS40NyIgdmFsaWQ9InllcyI+T2R5c3NleSwgaS4gNDc8L2JpYmw+IChBdGhlbmEsIG9mIEFlZ2lzdGh1cykuPC9ub3RlPjpbbWRhc2ggXSAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDEuNDciIHZhbGlkPSJ5ZXMiPk9keXNzZXksIGkuIDQ3PC9iaWJsPiAoQXRoZW5hLCBvZiBBZWdpc3RodXMpLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlNvIHBlcmlzaCBhbHNvIGFsbCBvdGhlcnMgd2hvICBvbiBzdWNoIHdpY2tlZG5lc3MgPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPnZlbnR1cmUsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPiAKCQkJCSAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5TbyBwZXJpc2ggYWxzbyBhbGwgb3RoZXJzIHdobyAgb24gc3VjaCB3aWNrZWRuZXNzIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj52ZW50dXJlLDwvbD4KCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
