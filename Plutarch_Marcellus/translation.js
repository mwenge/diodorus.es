var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBvdGhlcndpc2UgaGUgd2FzIG1vZGVzdCwgaHVtYW5lLCBhbmQgc28gZmFyIGEgbG92ZXIgb2YgR3JlZWsgbGVhcm5pbmcgYW5kIGRpc2NpcGxpbmUgYXMgdG8gaG9ub3VyIGFuZCBhZG1pcmUgdGhvc2Ugd2hvIGV4Y2VsbGVkIHRoZXJlaW4sIGFsdGhvdWdoIGhlIGhpbXNlbGYgd2FzIHByZXZlbnRlZCBieSBoaXMgb2NjdXBhdGlvbnMgZnJvbSBhY2hpZXZpbmcgYSBrbm93bGVkZ2UgYW5kIHByb2ZpY2llbmN5IGhlcmUgd2hpY2ggY29ycmVzcG9uZGVkIHRvIGhpcyBkZXNpcmVzLiAgRm9yIGlmIGV2ZXIgdGhlcmUgd2VyZSBtZW4gdG8gd2hvbSBIZWF2ZW4sIGFzIEhvbWVyIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMTQuODYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB4aXYuIDg2IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDE0Ljg2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeGl2LiA4NiBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeGl2LiA4NiBmLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkZyb20geW91dGggYW5kIHRvIG9sZCBhZ2UgYXBwb2ludGVkIHRoZSBhY2NvbXBsaXNobWVudCBvZiBsYWJvcmlvdXMgd2Fycyw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+IAoJCQkJdGhleSB3ZXJlIHRoZSBjaGllZiBSb21hbnMgb2YgdGhhdCB0aW1lLCAKCQkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RnJvbSB5b3V0aCBhbmQgdG8gb2xkIGFnZSBhcHBvaW50ZWQgdGhlIGFjY29tcGxpc2htZW50IG9mIGxhYm9yaW91cyB3YXJzLDwvbD4KCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndobywgaW4gdGhlaXIgeW91dGgsIHdhZ2VkIHdhciB3aXRoIHRoZSBDYXJ0aGFnaW5pYW5zIGZvciBTaWNpbHk7IGluIHRoZWlyIHByaW1lLCB3aXRoIHRoZSBHYXVscyB0byBzYXZlIEl0YWx5IGl0c2VsZjsgYW5kIHdoZW4gdGhleSB3ZXJlIG5vdyBncm93biBvbGQsIGNvbnRlbmRlZCBhZ2FpbiB3aXRoIEhhbm5pYmFsIGFuZCB0aGUgQ2FydGhhZ2luaWFucywgYW5kIGRpZCBub3QgaGF2ZSwgbGlrZSBtb3N0IG1lbiwgdGhhdCByZXNwaXRlIGZyb20gc2VydmljZSBpbiB0aGUgZmllbGQgd2hpY2ggb2xkIGFnZSBicmluZ3MsIGJ1dCB3ZXJlIGNhbGxlZCBieSB0aGVpciBoaWdoIGJpcnRoIGFuZCB2YWxvdXIgdG8gdW5kZXJ0YWtlIGxlYWRlcnNoaXBzIGFuZCBjb21tYW5kcyBpbiB3YXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFyY2VsbHVzIHdhcyBlZmZpY2llbnQgYW5kIHByYWN0aXNlZCBpbiBldmVyeSBraW5kIG9mIGZpZ2h0aW5nLCBidXQgaW4gc2luZ2xlIGNvbWJhdCBoZSBzdXJwYXNzZWQgaGltc2VsZiwgbmV2ZXIgZGVjbGluaW5nIGEgY2hhbGxlbmdlLCBhbmQgYWx3YXlzIGtpbGxpbmcgaGlzIGNoYWxsZW5nZXJzLiAgIEluIFNpY2lseSBoZSBzYXZlZCBoaXMgYnJvdGhlciBPdGFjaWxpdXMgZnJvbSBwZXJpbCBvZiBoaXMgbGlmZSwgY292ZXJpbmcgaGltIHdpdGggaGlzIHNoaWVsZCBhbmQga2lsbGluZyB0aG9zZSB3aG8gd2VyZSBzZXR0aW5nIHVwb24gaGltLiAgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlLCBhbHRob3VnaCBoZSB3YXMgc3RpbGwgYSB5b3V0aCwgaGUgcmVjZWl2ZWQgZ2FybGFuZHMgYW5kIHByaXplcyBmcm9tIGhpcyBjb21tYW5kZXJzLCBhbmQgc2luY2UgaGUgZ3JldyBpbiByZXB1dGUsIHRoZSBwZW9wbGUgYXBwb2ludGVkIGhpbSBjdXJ1bGUgYWVkaWxlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkxpdGVyYWxseSwgPGVtcGg+YWVkaWxlIG9mIHRoZSBtb3JlIGlsbHVzdHJpb3VzIGNsYXNzPC9lbXBoPiwgaS5lLiBwYXRyaWNpYW4sIGluIGRpc3RpbmN0aW9uIGZyb20gcGxlYmVpYW4sIGFlZGlsZS48L25vdGU+IGFuZCB0aGUgcHJpZXN0cywgYXVndXIuIFRoaXMgaXMgYSBzcGVjaWVzIG9mIHByaWVzdGhvb2QsIHRvIHdoaWNoIHRoZSBsYXcgcGFydGljdWxhcmx5IGFzc2lnbnMgdGhlIG9ic2VydmF0aW9uIGFuZCBzdHVkeSBvZiBwcm9waGV0aWMgc2lnbnMgZnJvbSB0aGUgZmxpZ2h0IG9mIGJpcmRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NYXJjZWxsdXMgd2FzIGVmZmljaWVudCBhbmQgcHJhY3Rpc2VkIGluIGV2ZXJ5IGtpbmQgb2YgZmlnaHRpbmcsIGJ1dCBpbiBzaW5nbGUgY29tYmF0IGhlIHN1cnBhc3NlZCBoaW1zZWxmLCBuZXZlciBkZWNsaW5pbmcgYSBjaGFsbGVuZ2UsIGFuZCBhbHdheXMga2lsbGluZyBoaXMgY2hhbGxlbmdlcnMuICAgSW4gU2ljaWx5IGhlIHNhdmVkIGhpcyBicm90aGVyIE90YWNpbGl1cyBmcm9tIHBlcmlsIG9mIGhpcyBsaWZlLCBjb3ZlcmluZyBoaW0gd2l0aCBoaXMgc2hpZWxkIGFuZCBraWxsaW5nIHRob3NlIHdobyB3ZXJlIHNldHRpbmcgdXBvbiBoaW0uICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgYWx0aG91Z2ggaGUgd2FzIHN0aWxsIGEgeW91dGgsIGhlIHJlY2VpdmVkIGdhcmxhbmRzIGFuZCBwcml6ZXMgZnJvbSBoaXMgY29tbWFuZGVycywgYW5kIHNpbmNlIGhlIGdyZXcgaW4gcmVwdXRlLCB0aGUgcGVvcGxlIGFwcG9pbnRlZCBoaW0gY3VydWxlIGFlZGlsZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkxpdGVyYWxseSwgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5hZWRpbGUgb2YgdGhlIG1vcmUgaWxsdXN0cmlvdXMgY2xhc3M8L2VtcGg+LCBpLmUuIHBhdHJpY2lhbiwgaW4gZGlzdGluY3Rpb24gZnJvbSBwbGViZWlhbiwgYWVkaWxlLjwvbm90ZT4gYW5kIHRoZSBwcmllc3RzLCBhdWd1ci4gVGhpcyBpcyBhIHNwZWNpZXMgb2YgcHJpZXN0aG9vZCwgdG8gd2hpY2ggdGhlIGxhdyBwYXJ0aWN1bGFybHkgYXNzaWducyB0aGUgb2JzZXJ2YXRpb24gYW5kIHN0dWR5IG9mIHByb3BoZXRpYyBzaWducyBmcm9tIHRoZSBmbGlnaHQgb2YgYmlyZHMuCgkJCTxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWVkaWxlIG9mIHRoZSBtb3JlIGlsbHVzdHJpb3VzIGNsYXNzPC9lbXBoPiwgaS5lLiBwYXRyaWNpYW4sIGluIGRpc3RpbmN0aW9uIGZyb20gcGxlYmVpYW4sIGFlZGlsZS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5EdXJpbmcgaGlzIGFlZGlsZXNoaXAsIGhlIHdhcyBjb21wZWxsZWQgdG8gYnJpbmcgYSBkaXNhZ3JlZWFibGUgaW1wZWFjaG1lbnQgaW50byB0aGUgc2VuYXRlLiBIZSBoYWQgYSBzb24sIG5hbWVkIE1hcmN1cyBsaWtlIGhpbXNlbGYsIHdobyB3YXMgaW4gdGhlIGZsb3dlciBvZiBoaXMgYm95aXNoIGJlYXV0eSwgYW5kIG5vdCBsZXNzIGFkbWlyZWQgYnkgaGlzIGNvdW50cnltZW4gZm9yIGhpcyBtb2Rlc3R5IGFuZCBnb29kIHRyYWluaW5nLiBUbyB0aGlzIGJveSBDYXBpdG9saW51cywgdGhlIGNvbGxlYWd1ZSBvZiBNYXJjZWxsdXMsIGEgYm9sZCBhbmQgbGljZW50aW91cyBtYW4sIG1hZGUgb3ZlcnR1cmVzIG9mIGxvdmUuIFRoZSBib3kgYXQgZmlyc3QgcmVwZWxsZWQgdGhlIGF0dGVtcHQgYnkgaGltc2VsZiwgYnV0IHdoZW4gaXQgd2FzIG1hZGUgYWdhaW4sIHRvbGQgaGlzIGZhdGhlci4gIE1hcmNlbGx1cywgaGlnaGx5IGluZGlnbmFudCwgZGVub3VuY2VkIHRoZSBtYW4gaW4gdGhlIHNlbmF0ZS4gIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjdWxwcml0IGRldmlzZWQgbWFueSBleGNlcHRpb25zIGFuZCB3YXlzIG9mIGVzY2FwZSwgYXBwZWFsaW5nIHRvIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCBhbmQgd2hlbiB0aGVzZSByZWplY3RlZCBoaXMgYXBwZWFsLCBoZSBzb3VnaHQgdG8gZXNjYXBlIHRoZSBjaGFyZ2UgYnkgZGVueWluZyBpdC4gVGhlcmUgaGFkIGJlZW4gbm8gd2l0bmVzcyBvZiBoaXMgcHJvcG9zYWxzLCBhbmQgdGhlcmVmb3JlIHRoZSBzZW5hdGUgZGVjaWRlZCB0byBzdW1tb24gdGhlIGJveSBiZWZvcmUgdGhlbS4gICAgV2hlbiBoZSBhcHBlYXJlZCwgYW5kIHRoZXkgYmVoZWxkIGhpcyBibHVzaGVzLCB0ZWFycywgYW5kIHNoYW1lIG1pbmdsZWQgd2l0aCBxdWVuY2hsZXNzIGluZGlnbmF0aW9uLCB0aGV5IHdhbnRlZCBubyBmdXJ0aGVyIHByb29mLCBidXQgY29uZGVtbmVkIENhcGl0b2xpbnVzLCBhbmQgc2V0IGEgZmluZSB1cG9uIGhpbS4gICBXaXRoIHRoaXMgbW9uZXkgTWFyY2VsbHVzIGhhZCBzaWx2ZXIgbGliYXRpb24gYm93bHMgbWFkZSwgYW5kIGRlZGljYXRlZCB0aGVtIHRvIHRoZSBnb2RzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkR1cmluZyBoaXMgYWVkaWxlc2hpcCwgaGUgd2FzIGNvbXBlbGxlZCB0byBicmluZyBhIGRpc2FncmVlYWJsZSBpbXBlYWNobWVudCBpbnRvIHRoZSBzZW5hdGUuIEhlIGhhZCBhIHNvbiwgbmFtZWQgTWFyY3VzIGxpa2UgaGltc2VsZiwgd2hvIHdhcyBpbiB0aGUgZmxvd2VyIG9mIGhpcyBib3lpc2ggYmVhdXR5LCBhbmQgbm90IGxlc3MgYWRtaXJlZCBieSBoaXMgY291bnRyeW1lbiBmb3IgaGlzIG1vZGVzdHkgYW5kIGdvb2QgdHJhaW5pbmcuIFRvIHRoaXMgYm95IENhcGl0b2xpbnVzLCB0aGUgY29sbGVhZ3VlIG9mIE1hcmNlbGx1cywgYSBib2xkIGFuZCBsaWNlbnRpb3VzIG1hbiwgbWFkZSBvdmVydHVyZXMgb2YgbG92ZS4gVGhlIGJveSBhdCBmaXJzdCByZXBlbGxlZCB0aGUgYXR0ZW1wdCBieSBoaW1zZWxmLCBidXQgd2hlbiBpdCB3YXMgbWFkZSBhZ2FpbiwgdG9sZCBoaXMgZmF0aGVyLiAgTWFyY2VsbHVzLCBoaWdobHkgaW5kaWduYW50LCBkZW5vdW5jZWQgdGhlIG1hbiBpbiB0aGUgc2VuYXRlLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjdWxwcml0IGRldmlzZWQgbWFueSBleGNlcHRpb25zIGFuZCB3YXlzIG9mIGVzY2FwZSwgYXBwZWFsaW5nIHRvIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCBhbmQgd2hlbiB0aGVzZSByZWplY3RlZCBoaXMgYXBwZWFsLCBoZSBzb3VnaHQgdG8gZXNjYXBlIHRoZSBjaGFyZ2UgYnkgZGVueWluZyBpdC4gVGhlcmUgaGFkIGJlZW4gbm8gd2l0bmVzcyBvZiBoaXMgcHJvcG9zYWxzLCBhbmQgdGhlcmVmb3JlIHRoZSBzZW5hdGUgZGVjaWRlZCB0byBzdW1tb24gdGhlIGJveSBiZWZvcmUgdGhlbS4gICAgV2hlbiBoZSBhcHBlYXJlZCwgYW5kIHRoZXkgYmVoZWxkIGhpcyBibHVzaGVzLCB0ZWFycywgYW5kIHNoYW1lIG1pbmdsZWQgd2l0aCBxdWVuY2hsZXNzIGluZGlnbmF0aW9uLCB0aGV5IHdhbnRlZCBubyBmdXJ0aGVyIHByb29mLCBidXQgY29uZGVtbmVkIENhcGl0b2xpbnVzLCBhbmQgc2V0IGEgZmluZSB1cG9uIGhpbS4gICBXaXRoIHRoaXMgbW9uZXkgTWFyY2VsbHVzIGhhZCBzaWx2ZXIgbGliYXRpb24gYm93bHMgbWFkZSwgYW5kIGRlZGljYXRlZCB0aGVtIHRvIHRoZSBnb2RzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBmaXJzdCBQdW5pYyB3YXIgaGFkIGNvbWUgdG8gYW4gZW5kIGluIGl0cyB0d2VudHktc2Vjb25kIHllYXIsIFJvbWUgd2FzIGNhbGxlZCB1cG9uIHRvIHJlbmV3IGhlciBzdHJ1Z2dsZXMgd2l0aCB0aGUgR2F1bHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIEZpcnN0IFB1bmljIFdhciBsYXN0ZWQgZnJvbSAyNjUgQi5DLiB0aWxsIDI0MSBCLkMuLCBhbmQgdGhlIEluc3VicmlhbnMgaW52YWRlZCBJdGFseSBpbiAyMjUgQi5DLjwvbm90ZT4gIFRoZSBJbnN1YnJpYW5zLCBhIHBlb3BsZSBvZiBDZWx0aWMgc3RvY2sgaW5oYWJpdGluZyB0aGF0IHBhcnQgb2YgSXRhbHkgd2hpY2ggbGllcyBhdCB0aGUgZm9vdCBvZiB0aGUgQWxwcywgYW5kIHN0cm9uZyBldmVuIGJ5IHRoZW1zZWx2ZXMsIGNhbGxlZCBvdXQgdGhlaXIgZm9yY2VzLCBhbmQgc3VtbW9uZWQgdG8gdGhlaXIgYWlkIHRoZSBtZXJjZW5hcnkgR2F1bHMgY2FsbGVkIEdhZXNhdGFlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCBzZWVtZWQgYSBtYXJ2ZWxsb3VzIHBpZWNlIG9mIGdvb2QgZm9ydHVuZSB0aGF0IHRoZSBHYWxsaWMgd2FyIGRpZCBub3QgYnJlYWsgb3V0IHdoaWxlIHRoZSBQdW5pYyB3YXIgd2FzIHJhZ2luZywgYnV0IHRoYXQgdGhlIEdhdWxzLCBsaWtlIGEgdGhpcmQgY2hhbXBpb24gc2l0dGluZyBieSBhbmQgYXdhaXRpbmcgaGlzIHR1cm4gd2l0aCB0aGUgdmljdG9yLCByZW1haW5lZCBzdHJpY3RseSBxdWlldCB3aGlsZSB0aGUgb3RoZXIgdHdvIG5hdGlvbnMgd2VyZSBmaWdodGluZywgYW5kIHRoZW4gb25seSBzdHJpcHBlZCBmb3IgY29tYmF0IHdoZW4gdGhlIHZpY3RvcnMgd2VyZSBhdCBsaWJlcnR5IHRvIHJlY2VpdmUgdGhlaXIgY2hhbGxlbmdlLiAgIE5ldmVydGhlbGVzcywgdGhlIFJvbWFucyB3ZXJlIGdyZWF0bHkgYWxhcm1lZCBieSB0aGUgcHJveGltaXR5IG9mIHRoZWlyIGNvdW50cnkgdG8gdGhlIGVuZW15LCB3aXRoIHdob20gdGhleSB3b3VsZCB3YWdlIHdhciBzbyBuZWFyIHRoZWlyIG93biBib3VuZGFyaWVzIGFuZCBob21lcywgYXMgd2VsbCBhcyBieSB0aGUgYW5jaWVudCByZW5vd24gb2YgdGhlIEdhdWxzLCB3aG9tIHRoZSBSb21hbnMgc2VlbSB0byBoYXZlIGZlYXJlZCBtb3JlIHRoYW4gYW55IG90aGVyIHBlb3BsZS4gRm9yIFJvbWUgaGFkIG9uY2UgYmVlbiB0YWtlbiBieSB0aGVtLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM5MCBCLkMuIFNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhbS4gMTkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYW1pbGx1czwvdGl0bGU+LCB4aXguPC9iaWJsPi08YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2FtLiAyMy4xIiB2YWxpZD0ieWVzIj54eGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgZnJvbSB0aGF0IHRpbWUgb24gYSBSb21hbiBwcmllc3Qgd2FzIGxlZ2FsbHkgZXhlbXB0IGZyb20gbWlsaXRhcnkgc2VydmljZSBvbmx5IGluIGNhc2Ugbm8gR2FsbGljIHdhciBvY2N1cnJlZCBhZ2Fpbi4gIFRoZWlyIGFsYXJtIHdhcyBhbHNvIHNob3duIGJ5IHRoZWlyIHByZXBhcmF0aW9ucyBmb3IgdGhlIHdhciAobmVpdGhlciBiZWZvcmUgbm9yIHNpbmNlIHRoYXQgdGltZSwgd2UgYXJlIHRvbGQsIHdlcmUgdGhlcmUgc28gbWFueSB0aG91c2FuZHMgb2YgUm9tYW5zIGluIGFybXMgYXQgb25jZSksIGFuZCBieSB0aGUgZXh0cmFvcmRpbmFyeSBzYWNyaWZpY2VzIHdoaWNoIHRoZXkgbWFkZSB0byB0aGUgZ29kcy4gIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aG91Z2ggdGhleSBoYXZlIG5vIGJhcmJhcm91cyBvciB1bm5hdHVyYWwgcHJhY3RpY2VzLCBidXQgY2hlcmlzaCB0b3dhcmRzIHRoZWlyIGRlaXRpZXMgdGhvc2UgbWlsZCBhbmQgcmV2ZXJlbnQgc2VudGltZW50cyB3aGljaCBlc3BlY2lhbGx5IGNoYXJhY3Rlcml6ZSBHcmVlayB0aG91Z2h0LCBhdCB0aGUgdGltZSB3aGVuIHRoaXMgd2FyIGJ1cnN0IHVwb24gdGhlbSB0aGV5IHdlcmUgY29uc3RyYWluZWQgdG8gb2JleSBjZXJ0YWluIG9yYWN1bGFyIGNvbW1hbmRzIGZyb20gdGhlIFNpYnlsbGluZSBib29rcywgYW5kIHRvIGJ1cnkgYWxpdmUgdHdvIEdyZWVrcywgYSBtYW4gYW5kIGEgd29tYW4sIGFuZCBsaWtld2lzZSB0d28gR2F1bHMsIGluIHRoZSBwbGFjZSBjYWxsZWQgdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Zm9ydW0gYm9hcml1bSw8L3E+ICBvciBjYXR0bGUtbWFya2V0OyBhbmQgaW4gbWVtb3J5IG9mIHRoZXNlIHZpY3RpbXMsIHRoZXkgc3RpbGwgdG8gdGhpcyBkYXksIGluIHRoZSBtb250aCBvZiBOb3ZlbWJlciwgcGVyZm9ybSBteXN0ZXJpb3VzIGFuZCBzZWNyZXQgY2VyZW1vbmllcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgZmlyc3QgUHVuaWMgd2FyIGhhZCBjb21lIHRvIGFuIGVuZCBpbiBpdHMgdHdlbnR5LXNlY29uZCB5ZWFyLCBSb21lIHdhcyBjYWxsZWQgdXBvbiB0byByZW5ldyBoZXIgc3RydWdnbGVzIHdpdGggdGhlIEdhdWxzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIEZpcnN0IFB1bmljIFdhciBsYXN0ZWQgZnJvbSAyNjUgQi5DLiB0aWxsIDI0MSBCLkMuLCBhbmQgdGhlIEluc3VicmlhbnMgaW52YWRlZCBJdGFseSBpbiAyMjUgQi5DLjwvbm90ZT4gIFRoZSBJbnN1YnJpYW5zLCBhIHBlb3BsZSBvZiBDZWx0aWMgc3RvY2sgaW5oYWJpdGluZyB0aGF0IHBhcnQgb2YgSXRhbHkgd2hpY2ggbGllcyBhdCB0aGUgZm9vdCBvZiB0aGUgQWxwcywgYW5kIHN0cm9uZyBldmVuIGJ5IHRoZW1zZWx2ZXMsIGNhbGxlZCBvdXQgdGhlaXIgZm9yY2VzLCBhbmQgc3VtbW9uZWQgdG8gdGhlaXIgYWlkIHRoZSBtZXJjZW5hcnkgR2F1bHMgY2FsbGVkIEdhZXNhdGFlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHNlZW1lZCBhIG1hcnZlbGxvdXMgcGllY2Ugb2YgZ29vZCBmb3J0dW5lIHRoYXQgdGhlIEdhbGxpYyB3YXIgZGlkIG5vdCBicmVhayBvdXQgd2hpbGUgdGhlIFB1bmljIHdhciB3YXMgcmFnaW5nLCBidXQgdGhhdCB0aGUgR2F1bHMsIGxpa2UgYSB0aGlyZCBjaGFtcGlvbiBzaXR0aW5nIGJ5IGFuZCBhd2FpdGluZyBoaXMgdHVybiB3aXRoIHRoZSB2aWN0b3IsIHJlbWFpbmVkIHN0cmljdGx5IHF1aWV0IHdoaWxlIHRoZSBvdGhlciB0d28gbmF0aW9ucyB3ZXJlIGZpZ2h0aW5nLCBhbmQgdGhlbiBvbmx5IHN0cmlwcGVkIGZvciBjb21iYXQgd2hlbiB0aGUgdmljdG9ycyB3ZXJlIGF0IGxpYmVydHkgdG8gcmVjZWl2ZSB0aGVpciBjaGFsbGVuZ2UuICAgTmV2ZXJ0aGVsZXNzLCB0aGUgUm9tYW5zIHdlcmUgZ3JlYXRseSBhbGFybWVkIGJ5IHRoZSBwcm94aW1pdHkgb2YgdGhlaXIgY291bnRyeSB0byB0aGUgZW5lbXksIHdpdGggd2hvbSB0aGV5IHdvdWxkIHdhZ2Ugd2FyIHNvIG5lYXIgdGhlaXIgb3duIGJvdW5kYXJpZXMgYW5kIGhvbWVzLCBhcyB3ZWxsIGFzIGJ5IHRoZSBhbmNpZW50IHJlbm93biBvZiB0aGUgR2F1bHMsIHdob20gdGhlIFJvbWFucyBzZWVtIHRvIGhhdmUgZmVhcmVkIG1vcmUgdGhhbiBhbnkgb3RoZXIgcGVvcGxlLiBGb3IgUm9tZSBoYWQgb25jZSBiZWVuIHRha2VuIGJ5IHRoZW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzOTAgQi5DLiBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhbS4gMTkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbWlsbHVzPC90aXRsZT4sIHhpeC48L2JpYmw+LTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhbS4gMjMuMSIgdmFsaWQ9InllcyI+eHhpaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYW0uIDE5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW1pbGx1czwvdGl0bGU+LCB4aXguPC9iaWJsPi08dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW1pbGx1czwvdGl0bGU+LCB4aXguPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2FtLiAyMy4xIiB2YWxpZD0ieWVzIj54eGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBmcm9tIHRoYXQgdGltZSBvbiBhIFJvbWFuIHByaWVzdCB3YXMgbGVnYWxseSBleGVtcHQgZnJvbSBtaWxpdGFyeSBzZXJ2aWNlIG9ubHkgaW4gY2FzZSBubyBHYWxsaWMgd2FyIG9jY3VycmVkIGFnYWluLiAgVGhlaXIgYWxhcm0gd2FzIGFsc28gc2hvd24gYnkgdGhlaXIgcHJlcGFyYXRpb25zIGZvciB0aGUgd2FyIChuZWl0aGVyIGJlZm9yZSBub3Igc2luY2UgdGhhdCB0aW1lLCB3ZSBhcmUgdG9sZCwgd2VyZSB0aGVyZSBzbyBtYW55IHRob3VzYW5kcyBvZiBSb21hbnMgaW4gYXJtcyBhdCBvbmNlKSwgYW5kIGJ5IHRoZSBleHRyYW9yZGluYXJ5IHNhY3JpZmljZXMgd2hpY2ggdGhleSBtYWRlIHRvIHRoZSBnb2RzLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aG91Z2ggdGhleSBoYXZlIG5vIGJhcmJhcm91cyBvciB1bm5hdHVyYWwgcHJhY3RpY2VzLCBidXQgY2hlcmlzaCB0b3dhcmRzIHRoZWlyIGRlaXRpZXMgdGhvc2UgbWlsZCBhbmQgcmV2ZXJlbnQgc2VudGltZW50cyB3aGljaCBlc3BlY2lhbGx5IGNoYXJhY3Rlcml6ZSBHcmVlayB0aG91Z2h0LCBhdCB0aGUgdGltZSB3aGVuIHRoaXMgd2FyIGJ1cnN0IHVwb24gdGhlbSB0aGV5IHdlcmUgY29uc3RyYWluZWQgdG8gb2JleSBjZXJ0YWluIG9yYWN1bGFyIGNvbW1hbmRzIGZyb20gdGhlIFNpYnlsbGluZSBib29rcywgYW5kIHRvIGJ1cnkgYWxpdmUgdHdvIEdyZWVrcywgYSBtYW4gYW5kIGEgd29tYW4sIGFuZCBsaWtld2lzZSB0d28gR2F1bHMsIGluIHRoZSBwbGFjZSBjYWxsZWQgdGhlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mb3J1bSBib2FyaXVtLDwvcT4gIG9yIGNhdHRsZS1tYXJrZXQ7IGFuZCBpbiBtZW1vcnkgb2YgdGhlc2UgdmljdGltcywgdGhleSBzdGlsbCB0byB0aGlzIGRheSwgaW4gdGhlIG1vbnRoIG9mIE5vdmVtYmVyLCBwZXJmb3JtIG15c3RlcmlvdXMgYW5kIHNlY3JldCBjZXJlbW9uaWVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBjb25mbGljdHMgb2YgdGhpcyB3YXIgYnJvdWdodCBncmVhdCB2aWN0b3JpZXMgYW5kIGFsc28gZ3JlYXQgZGlzYXN0ZXJzIHRvIHRoZSBSb21hbnMsIGFuZCBsZWQgdG8gbm8gc3VyZSBhbmQgZmluYWwgY29uY2x1c2lvbjsgYnV0IGF0IGxhc3QgRmxhbWluaXVzIGFuZCBGdXJpdXMsIHRoZSBjb25zdWxzLCBsZWQgZm9ydGggbGFyZ2UgZm9yY2VzIGFnYWluc3QgdGhlIEluc3VicmlhbnMuICBBdCB0aGUgdGltZSBvZiB0aGVpciBkZXBhcnR1cmUsIGhvd2V2ZXIsIHRoZSByaXZlciB0aGF0IGZsb3dzIHRocm91Z2ggUGljZW51bSB3YXMgc2VlbiB0byBiZSBydW5uaW5nIHdpdGggYmxvb2QsIGFuZCBpdCB3YXMgcmVwb3J0ZWQgdGhhdCBhdCBBcmltaW51bSB0aHJlZSBtb29ucyBoYWQgYXBwZWFyZWQgaW4gdGhlIGhlYXZlbnMsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGUgcHJpZXN0cyB3aG8gd2F0Y2hlZCB0aGUgZmxpZ2h0IG9mIGJpcmRzIGF0IHRoZSB0aW1lIG9mIHRoZSBjb25zdWxhciBlbGVjdGlvbnMgaW5zaXN0ZWQgdGhhdCB3aGVuIHRoZSBjb25zdWxzIHdlcmUgcHJvY2xhaW1lZCB0aGUgb21lbnMgd2VyZSBpbmF1c3BpY2lvdXMgYW5kIGJhbGVmdWwgZm9yIHRoZW0uIEF0IG9uY2UsIHRoZXJlZm9yZSwgdGhlIHNlbmF0ZSBzZW50IGxldHRlcnMgdG8gdGhlIGNhbXAsIHN1bW1vbmluZyB0aGUgY29uc3VscyB0byByZXR1cm4gdG8gdGhlIGNpdHkgd2l0aCBhbGwgc3BlZWQgYW5kIGxheSBkb3duIHRoZWlyIG9mZmljZSwgYW5kIGZvcmJpZGRpbmcgdGhlbSwgd2hpbGUgdGhleSB3ZXJlIHN0aWxsIGNvbnN1bHMsIHRvIHRha2UgYW55IHN0ZXBzIGFnYWluc3QgdGhlIGVuZW15LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5PbiByZWNlaXZpbmcgdGhlc2UgbGV0dGVycywgRmxhbWluaXVzIHdvdWxkIG5vdCBvcGVuIHRoZW0gYmVmb3JlIGhlIGhhZCBqb2luZWQgYmF0dGxlIHdpdGggdGhlIEJhcmJhcmlhbnMsIHJvdXRlZCB0aGVtLCBhbmQgb3ZlcnJ1biB0aGVpciBjb3VudHJ5LiAgICBUaGVyZWZvcmUsIHdoZW4gaGUgcmV0dXJuZWQgd2l0aCBtdWNoIHNwb2lsLCB0aGUgcGVvcGxlIHdvdWxkIG5vdCBnbyBvdXQgdG8gbWVldCBoaW0sIGJ1dCBiZWNhdXNlIGhlIGhhZCBub3QgYXQgb25jZSBsaXN0ZW5lZCB0byBoaXMgc3VtbW9ucywgYW5kIGhhZCBkaXNvYmV5ZWQgdGhlIGxldHRlcnMsIHRyZWF0aW5nIHRoZW0gd2l0aCBpbnNvbGVudCBjb250ZW1wdCwgdGhleSBjYW1lIG5lYXIgcmVmdXNpbmcgaGltIGhpcyB0cml1bXBoLCBhbmQgYWZ0ZXIgaGlzIHRyaXVtcGgsIHRoZXkgY29tcGVsbGVkIGhpbSB0byByZW5vdW5jZSB0aGUgY29uc3Vsc2hpcCB3aXRoIGhpcyBjb2xsZWFndWUsIGFuZCBtYWRlIGhpbSBhIHByaXZhdGUgY2l0aXplbi4gIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHN1Y2ggYSBkZWdyZWUgZGlkIHRoZSBSb21hbnMgbWFrZSBldmVyeXRoaW5nIGRlcGVuZCB1cG9uIHRoZSB3aWxsIG9mIHRoZSBnb2RzLCBhbmQgc28gaW50b2xlcmFudCB3ZXJlIHRoZXkgb2YgYW55IG5lZ2xlY3Qgb2Ygb21lbnMgYW5kIGFuY2VzdHJhbCByaXRlcywgZXZlbiB3aGVuIGF0dGVuZGVkIGJ5IHRoZSBncmVhdGVzdCBzdWNjZXNzZXMsIGNvbnNpZGVyaW5nIGl0IG9mIG1vcmUgaW1wb3J0YW5jZSBmb3IgdGhlIHNhZmV0eSBvZiB0aGUgY2l0eSB0aGF0IHRoZWlyIG1hZ2lzdHJhdGVzIHNob3VsZCByZXZlcmVuY2UgcmVsaWdpb24gdGhhbiB0aGF0IHRoZXkgc2hvdWxkIG92ZXJjb21lIHRoZWlyIGVuZW1pZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZmlyc3QgY29uZmxpY3RzIG9mIHRoaXMgd2FyIGJyb3VnaHQgZ3JlYXQgdmljdG9yaWVzIGFuZCBhbHNvIGdyZWF0IGRpc2FzdGVycyB0byB0aGUgUm9tYW5zLCBhbmQgbGVkIHRvIG5vIHN1cmUgYW5kIGZpbmFsIGNvbmNsdXNpb247IGJ1dCBhdCBsYXN0IEZsYW1pbml1cyBhbmQgRnVyaXVzLCB0aGUgY29uc3VscywgbGVkIGZvcnRoIGxhcmdlIGZvcmNlcyBhZ2FpbnN0IHRoZSBJbnN1YnJpYW5zLiAgQXQgdGhlIHRpbWUgb2YgdGhlaXIgZGVwYXJ0dXJlLCBob3dldmVyLCB0aGUgcml2ZXIgdGhhdCBmbG93cyB0aHJvdWdoIFBpY2VudW0gd2FzIHNlZW4gdG8gYmUgcnVubmluZyB3aXRoIGJsb29kLCBhbmQgaXQgd2FzIHJlcG9ydGVkIHRoYXQgYXQgQXJpbWludW0gdGhyZWUgbW9vbnMgaGFkIGFwcGVhcmVkIGluIHRoZSBoZWF2ZW5zLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGUgcHJpZXN0cyB3aG8gd2F0Y2hlZCB0aGUgZmxpZ2h0IG9mIGJpcmRzIGF0IHRoZSB0aW1lIG9mIHRoZSBjb25zdWxhciBlbGVjdGlvbnMgaW5zaXN0ZWQgdGhhdCB3aGVuIHRoZSBjb25zdWxzIHdlcmUgcHJvY2xhaW1lZCB0aGUgb21lbnMgd2VyZSBpbmF1c3BpY2lvdXMgYW5kIGJhbGVmdWwgZm9yIHRoZW0uIEF0IG9uY2UsIHRoZXJlZm9yZSwgdGhlIHNlbmF0ZSBzZW50IGxldHRlcnMgdG8gdGhlIGNhbXAsIHN1bW1vbmluZyB0aGUgY29uc3VscyB0byByZXR1cm4gdG8gdGhlIGNpdHkgd2l0aCBhbGwgc3BlZWQgYW5kIGxheSBkb3duIHRoZWlyIG9mZmljZSwgYW5kIGZvcmJpZGRpbmcgdGhlbSwgd2hpbGUgdGhleSB3ZXJlIHN0aWxsIGNvbnN1bHMsIHRvIHRha2UgYW55IHN0ZXBzIGFnYWluc3QgdGhlIGVuZW15LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHJlY2VpdmluZyB0aGVzZSBsZXR0ZXJzLCBGbGFtaW5pdXMgd291bGQgbm90IG9wZW4gdGhlbSBiZWZvcmUgaGUgaGFkIGpvaW5lZCBiYXR0bGUgd2l0aCB0aGUgQmFyYmFyaWFucywgcm91dGVkIHRoZW0sIGFuZCBvdmVycnVuIHRoZWlyIGNvdW50cnkuICAgIFRoZXJlZm9yZSwgd2hlbiBoZSByZXR1cm5lZCB3aXRoIG11Y2ggc3BvaWwsIHRoZSBwZW9wbGUgd291bGQgbm90IGdvIG91dCB0byBtZWV0IGhpbSwgYnV0IGJlY2F1c2UgaGUgaGFkIG5vdCBhdCBvbmNlIGxpc3RlbmVkIHRvIGhpcyBzdW1tb25zLCBhbmQgaGFkIGRpc29iZXllZCB0aGUgbGV0dGVycywgdHJlYXRpbmcgdGhlbSB3aXRoIGluc29sZW50IGNvbnRlbXB0LCB0aGV5IGNhbWUgbmVhciByZWZ1c2luZyBoaW0gaGlzIHRyaXVtcGgsIGFuZCBhZnRlciBoaXMgdHJpdW1waCwgdGhleSBjb21wZWxsZWQgaGltIHRvIHJlbm91bmNlIHRoZSBjb25zdWxzaGlwIHdpdGggaGlzIGNvbGxlYWd1ZSwgYW5kIG1hZGUgaGltIGEgcHJpdmF0ZSBjaXRpemVuLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHN1Y2ggYSBkZWdyZWUgZGlkIHRoZSBSb21hbnMgbWFrZSBldmVyeXRoaW5nIGRlcGVuZCB1cG9uIHRoZSB3aWxsIG9mIHRoZSBnb2RzLCBhbmQgc28gaW50b2xlcmFudCB3ZXJlIHRoZXkgb2YgYW55IG5lZ2xlY3Qgb2Ygb21lbnMgYW5kIGFuY2VzdHJhbCByaXRlcywgZXZlbiB3aGVuIGF0dGVuZGVkIGJ5IHRoZSBncmVhdGVzdCBzdWNjZXNzZXMsIGNvbnNpZGVyaW5nIGl0IG9mIG1vcmUgaW1wb3J0YW5jZSBmb3IgdGhlIHNhZmV0eSBvZiB0aGUgY2l0eSB0aGF0IHRoZWlyIG1hZ2lzdHJhdGVzIHNob3VsZCByZXZlcmVuY2UgcmVsaWdpb24gdGhhbiB0aGF0IHRoZXkgc2hvdWxkIG92ZXJjb21lIHRoZWlyIGVuZW1pZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGV4YW1wbGUsIFRpYmVyaXVzIFNlbXByb25pdXMsIGEgbWFuIG1vc3QgaGlnaGx5IGVzdGVlbWVkIGJ5IHRoZSBSb21hbnMgZm9yIGhpcyB2YWxvdXIgYW5kIHByb2JpdHksIHByb2NsYWltZWQgU2NpcGlvIE5hc2ljYSBhbmQgQ2FpdXMgTWFyY2l1cyBoaXMgc3VjY2Vzc29ycyBpbiB0aGUgY29uc3Vsc2hpcCwgYnV0IHdoZW4gdGhleSBoYWQgYWxyZWFkeSB0YWtlbiBjb21tYW5kIGluIHRoZWlyIHByb3ZpbmNlcywgaGUgY2FtZSB1cG9uIGEgYm9vayBvZiByZWxpZ2lvdXMgb2JzZXJ2YW5jZXMgd2hlcmVpbiBoZSBmb3VuZCBhIGNlcnRhaW4gYW5jaWVudCBwcmVzY3JpcHQgb2Ygd2hpY2ggaGUgaGFkIGJlZW4gaWdub3JhbnQuICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgdGhpcy4gV2hlbmV2ZXIgYSBtYWdpc3RyYXRlLCBzaXR0aW5nIGluIGEgaGlyZWQgaG91c2Ugb3IgdGVudCBvdXRzaWRlIHRoZSBjaXR5IHRvIHRha2UgYXVzcGljZXMgZnJvbSB0aGUgZmxpZ2h0IG9mIGJpcmRzLCBpcyBjb21wZWxsZWQgZm9yIGFueSByZWFzb24gdG8gcmV0dXJuIHRvIHRoZSBjaXR5IGJlZm9yZSBzdXJlIHNpZ25zIGhhdmUgYXBwZWFyZWQsIGhlIG11c3QgZ2l2ZSB1cCB0aGUgaG91c2UgZmlyc3QgaGlyZWQgYW5kIHRha2UgYW5vdGhlciwgYW5kIGZyb20gdGhpcyBoZSBtdXN0IHRha2UgaGlzIG9ic2VydmF0aW9ucyBhbmV3LiAgIE9mIHRoaXMsIGl0IHdvdWxkIHNlZW0sIFRpYmVyaXVzIHdhcyBub3QgYXdhcmUsIGFuZCBoYWQgdHdpY2UgdXNlZCB0aGUgc2FtZSBob3VzZSBiZWZvcmUgcHJvY2xhaW1pbmcgdGhlIG1lbiBJIGhhdmUgbWVudGlvbmVkIGFzIGNvbnN1bHMuICAgQnV0IGFmdGVyd2FyZHMsIGRpc2NvdmVyaW5nIGhpcyBlcnJvciwgaGUgcmVmZXJyZWQgdGhlIG1hdHRlciB0byB0aGUgc2VuYXRlLiAgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBib2R5IGRpZCBub3QgbWFrZSBsaWdodCBvZiBzbyB0cmlmbGluZyBhbiBvbWlzc2lvbiwgYnV0IHdyb3RlIHRvIHRoZSBjb25zdWxzIGFib3V0IGl0OyBhbmQgdGhleSwgbGVhdmluZyB0aGVpciBwcm92aW5jZXMsIGNhbWUgYmFjayB0byBSb21lIHdpdGggc3BlZWQsIGFuZCBsYWlkIGRvd24gdGhlaXIgb2ZmaWNlcy4gIFRoaXMsIGhvd2V2ZXIsIHRvb2sgcGxhY2UgYXQgYSBsYXRlciB0aW1lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRpYmVyaXVzIFNlbXByb25pdXMgR3JhY2NodXMsIGZhdGhlciBvZiB0aGUgdHdvIGZhbW91cyB0cmlidW5lcywgd2FzIGNvbnN1bCBmb3IgdGhlIHNlY29uZCB0aW1lIGluIDE2MyBCLkMuPC9ub3RlPiBCdXQgYXQgYWJvdXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBhbSBzcGVha2luZywgdHdvIG1vc3QgaWxsdXN0cmlvdXMgcHJpZXN0cyB3ZXJlIGRlcG9zZWQgZnJvbSB0aGVpciBwcmllc3Rob29kcywgQ29ybmVsaXVzIENldGhlZ3VzLCBiZWNhdXNlIGhlIHByZXNlbnRlZCB0aGUgZW50cmFpbHMgb2YgaGlzIHZpY3RpbSBpbXByb3Blcmx5LCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgUXVpbnR1cyBTdWxwaWNpdXMsIGJlY2F1c2UsIHdoaWxlIGhlIHdhcyBzYWNyaWZpY2luZywgdGhlIHBlYWtlZCBjYXAgd2hpY2ggdGhlIHByaWVzdHMgY2FsbGVkIGZsYW1lbnM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDcuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5OdW1hPC90aXRsZT4sIHZpaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2VhciBoYWQgZmFsbGVuIGZyb20gaGlzIGhlYWQuICAgIE1vcmVvdmVyLCBiZWNhdXNlIHRoZSBzcXVlYWsgb2YgYSBzaHJldy1tb3VzZSAodGhleSBjYWxsIGl0IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c29yZXg8L3E+KSB3YXMgaGVhcmQganVzdCBhcyBNaW51Y2l1cyB0aGUgZGljdGF0b3IgYXBwb2ludGVkIENhaXVzIEZsYW1pbml1cyBoaXMgbWFzdGVyIG9mIGhvcnNlLCB0aGUgcGVvcGxlIGRlcG9zZWQgdGhlc2Ugb2ZmaWNpYWxzIGFuZCBwdXQgb3RoZXJzIGluIHRoZWlyIHBsYWNlcy4gQW5kIGFsdGhvdWdoIHRoZXkgd2VyZSBwdW5jdGlsaW91cyBpbiBzdWNoIHRyaWZsaW5nIG1hdHRlcnMsIHRoZXkgZGlkIG5vdCBmYWxsIGludG8gYW55IHN1cGVyc3RpdGlvbiwgYmVjYXVzZSB0aGV5IG1hZGUgbm8gY2hhbmdlIG9yIGRldmlhdGlvbiBpbiB0aGVpciBhbmNpZW50IHJpdGVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZXhhbXBsZSwgVGliZXJpdXMgU2VtcHJvbml1cywgYSBtYW4gbW9zdCBoaWdobHkgZXN0ZWVtZWQgYnkgdGhlIFJvbWFucyBmb3IgaGlzIHZhbG91ciBhbmQgcHJvYml0eSwgcHJvY2xhaW1lZCBTY2lwaW8gTmFzaWNhIGFuZCBDYWl1cyBNYXJjaXVzIGhpcyBzdWNjZXNzb3JzIGluIHRoZSBjb25zdWxzaGlwLCBidXQgd2hlbiB0aGV5IGhhZCBhbHJlYWR5IHRha2VuIGNvbW1hbmQgaW4gdGhlaXIgcHJvdmluY2VzLCBoZSBjYW1lIHVwb24gYSBib29rIG9mIHJlbGlnaW91cyBvYnNlcnZhbmNlcyB3aGVyZWluIGhlIGZvdW5kIGEgY2VydGFpbiBhbmNpZW50IHByZXNjcmlwdCBvZiB3aGljaCBoZSBoYWQgYmVlbiBpZ25vcmFudC4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB0aGlzLiBXaGVuZXZlciBhIG1hZ2lzdHJhdGUsIHNpdHRpbmcgaW4gYSBoaXJlZCBob3VzZSBvciB0ZW50IG91dHNpZGUgdGhlIGNpdHkgdG8gdGFrZSBhdXNwaWNlcyBmcm9tIHRoZSBmbGlnaHQgb2YgYmlyZHMsIGlzIGNvbXBlbGxlZCBmb3IgYW55IHJlYXNvbiB0byByZXR1cm4gdG8gdGhlIGNpdHkgYmVmb3JlIHN1cmUgc2lnbnMgaGF2ZSBhcHBlYXJlZCwgaGUgbXVzdCBnaXZlIHVwIHRoZSBob3VzZSBmaXJzdCBoaXJlZCBhbmQgdGFrZSBhbm90aGVyLCBhbmQgZnJvbSB0aGlzIGhlIG11c3QgdGFrZSBoaXMgb2JzZXJ2YXRpb25zIGFuZXcuICAgT2YgdGhpcywgaXQgd291bGQgc2VlbSwgVGliZXJpdXMgd2FzIG5vdCBhd2FyZSwgYW5kIGhhZCB0d2ljZSB1c2VkIHRoZSBzYW1lIGhvdXNlIGJlZm9yZSBwcm9jbGFpbWluZyB0aGUgbWVuIEkgaGF2ZSBtZW50aW9uZWQgYXMgY29uc3Vscy4gICBCdXQgYWZ0ZXJ3YXJkcywgZGlzY292ZXJpbmcgaGlzIGVycm9yLCBoZSByZWZlcnJlZCB0aGUgbWF0dGVyIHRvIHRoZSBzZW5hdGUuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYm9keSBkaWQgbm90IG1ha2UgbGlnaHQgb2Ygc28gdHJpZmxpbmcgYW4gb21pc3Npb24sIGJ1dCB3cm90ZSB0byB0aGUgY29uc3VscyBhYm91dCBpdDsgYW5kIHRoZXksIGxlYXZpbmcgdGhlaXIgcHJvdmluY2VzLCBjYW1lIGJhY2sgdG8gUm9tZSB3aXRoIHNwZWVkLCBhbmQgbGFpZCBkb3duIHRoZWlyIG9mZmljZXMuICBUaGlzLCBob3dldmVyLCB0b29rIHBsYWNlIGF0IGEgbGF0ZXIgdGltZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRpYmVyaXVzIFNlbXByb25pdXMgR3JhY2NodXMsIGZhdGhlciBvZiB0aGUgdHdvIGZhbW91cyB0cmlidW5lcywgd2FzIGNvbnN1bCBmb3IgdGhlIHNlY29uZCB0aW1lIGluIDE2MyBCLkMuPC9ub3RlPiBCdXQgYXQgYWJvdXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBhbSBzcGVha2luZywgdHdvIG1vc3QgaWxsdXN0cmlvdXMgcHJpZXN0cyB3ZXJlIGRlcG9zZWQgZnJvbSB0aGVpciBwcmllc3Rob29kcywgQ29ybmVsaXVzIENldGhlZ3VzLCBiZWNhdXNlIGhlIHByZXNlbnRlZCB0aGUgZW50cmFpbHMgb2YgaGlzIHZpY3RpbSBpbXByb3Blcmx5LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBRdWludHVzIFN1bHBpY2l1cywgYmVjYXVzZSwgd2hpbGUgaGUgd2FzIHNhY3JpZmljaW5nLCB0aGUgcGVha2VkIGNhcCB3aGljaCB0aGUgcHJpZXN0cyBjYWxsZWQgZmxhbWVuczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDcuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk51bWE8L3RpdGxlPiwgdmlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3ZWFyIGhhZCBmYWxsZW4gZnJvbSBoaXMgaGVhZC4gICAgTW9yZW92ZXIsIGJlY2F1c2UgdGhlIHNxdWVhayBvZiBhIHNocmV3LW1vdXNlICh0aGV5IGNhbGwgaXQgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDcuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk51bWE8L3RpdGxlPiwgdmlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TnVtYTwvdGl0bGU+LCB2aWkuIDUuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zb3JleDwvcT4pIHdhcyBoZWFyZCBqdXN0IGFzIE1pbnVjaXVzIHRoZSBkaWN0YXRvciBhcHBvaW50ZWQgQ2FpdXMgRmxhbWluaXVzIGhpcyBtYXN0ZXIgb2YgaG9yc2UsIHRoZSBwZW9wbGUgZGVwb3NlZCB0aGVzZSBvZmZpY2lhbHMgYW5kIHB1dCBvdGhlcnMgaW4gdGhlaXIgcGxhY2VzLiBBbmQgYWx0aG91Z2ggdGhleSB3ZXJlIHB1bmN0aWxpb3VzIGluIHN1Y2ggdHJpZmxpbmcgbWF0dGVycywgdGhleSBkaWQgbm90IGZhbGwgaW50byBhbnkgc3VwZXJzdGl0aW9uLCBiZWNhdXNlIHRoZXkgbWFkZSBubyBjaGFuZ2Ugb3IgZGV2aWF0aW9uIGluIHRoZWlyIGFuY2llbnQgcml0ZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHJlc3VtZSB0aGUgc3RvcnksIGFmdGVyIEZsYW1pbml1cyBhbmQgaGlzIGNvbGxlYWd1ZSBoYWQgcmVub3VuY2VkIHRoZWlyIG9mZmljZXMsIE1hcmNlbGx1cyB3YXMgYXBwb2ludGVkIGNvbnN1bDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDIyMiBCLkMuIEluIHJlcHVibGljYW4gdGltZXMsIGFuIDxmb3JlaWduIGxhbmc9ImxhIj5pbnRlcnJleDwvZm9yZWlnbj4gd2FzIGVsZWN0ZWQgd2hlbiB0aGVyZSB3YXMgYSB2YWNhbmN5IGluIHRoZSBzdXByZW1lIHBvd2VyLCBoZWxkIG9mZmljZSBmb3IgZml2ZSBkYXlzLCBhbmQsIGlmIG5lY2Vzc2FyeSwgbm9taW5hdGVkIGhpcyBzdWNjZXNzb3IuICBBbnkgbnVtYmVyIG9mIDxmb3JlaWduIGxhbmc9ImxhIj5pbnRlcnJlZ2VzPC9mb3JlaWduPiBtaWdodCBiZSBzdWNjZXNzaXZlbHkgYXBwb2ludGVkLCB1bnRpbCB0aGUgaGlnaGVzdCBvZmZpY2Ugd2FzIGZpbGxlZC4gIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMi42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk51bWE8L3RpdGxlPiwgaWkuIDYgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYnkgdGhlIHNvLWNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmludGVycmVnZXMuPC9xPiBIZSB0b29rIHRoZSBvZmZpY2UsIGFuZCBhcHBvaW50ZWQgR25hZXVzIENvcm5lbGl1cyBoaXMgY29sbGVhZ3VlLiAgTm93IGl0IGhhcyBiZWVuIHNhaWQgdGhhdCwgYWx0aG91Z2ggdGhlIEdhdWxzIG1hZGUgbWFueSBjb25jaWxpYXRvcnkgcHJvcG9zYWxzLCBhbmQgYWx0aG91Z2ggdGhlIHNlbmF0ZSB3YXMgcGVhY2VhYmx5IGluY2xpbmVkLCBNYXJjZWxsdXMgdHJpZWQgdG8gcHJvdm9rZSB0aGUgcGVvcGxlIHRvIGNvbnRpbnVlIHRoZSB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IHdvdWxkIHNlZW0gdGhhdCBldmVuIGFmdGVyIHBlYWNlIHdhcyBtYWRlIHRoZSBHYWVzYXRhZSByZW5ld2VkIHRoZSB3YXI7IHRoZXkgY3Jvc3NlZCB0aGUgQWxwcyBhbmQgc3RpcnJlZCB1cCB0aGUgSW5zdWJyaWFucy4gVGhleSBudW1iZXJlZCB0aGlydHkgdGhvdXNhbmQgdGhlbXNlbHZlcywgYW5kIHRoZSBJbnN1YnJpYW5zLCB3aG9tIHRoZXkgam9pbmVkLCB3ZXJlIG11Y2ggbW9yZSBudW1lcm91cy4gV2l0aCBoaWdoIGNvbmZpZGVuY2UsIHRoZXJlZm9yZSwgdGhleSBtYXJjaGVkIGF0IG9uY2UgdG8gQWNlcnJhZSwgYSBjaXR5IHNpdHVhdGVkIHRvIHRoZSBub3J0aCBvZiB0aGUgcml2ZXIgUG8uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDIuMzQiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzIChpaS4gMzQpPC9iaWJsPiwgbm8gcGVhY2Ugd2FzIG1hZGUsIGFsdGhvdWdoIHRoZSBHYXVscyBvZmZlcmVkIHRvIHN1Ym1pdCwgYW5kIHRoZSBjb25zdWxzIG1hcmNoZWQgaW50byB0aGUgdGVycml0b3J5IG9mIHRoZSBJbnN1YnJpYW5zIGFuZCBsYWlkIHNpZWdlIHRvIEFjZXJyYWUuPC9ub3RlPiBGcm9tIHRoZW5jZSBCcml0b21hcnR1cyB0aGUga2luZywgdGFraW5nIHdpdGggaGltIHRlbiB0aG91c2FuZCBvZiB0aGUgR2Flc2F0YWUsIHJhdmFnZWQgdGhlIGNvdW50cnkgYWJvdXQgdGhlIFBvLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIE1hcmNlbGx1cyBsZWFybmVkIG9mIHRoaXMsIGhlIGxlZnQgaGlzIGNvbGxlYWd1ZSBhdCBBY2VycmFlIHdpdGggYWxsIHRoZSBoZWF2eS1hcm1lZCBpbmZhbnRyeSBhbmQgYSB0aGlyZCBwYXJ0IG9mIHRoZSBjYXZhbHJ5LCB3aGlsZSBoZSBoaW1zZWxmLCB0YWtpbmcgd2l0aCBoaW0gdGhlIHJlc3Qgb2YgdGhlIGNhdmFscnkgYW5kIHRoZSBtb3N0IGxpZ2h0bHkgZXF1aXBwZWQgbWVuLWF0LWFybXMgdG8gdGhlIG51bWJlciBvZiBzaXggaHVuZHJlZCwgbWFyY2hlZCwgd2l0aG91dCBoYWx0aW5nIGluIGhpcyBjb3Vyc2UgZGF5IG9yIG5pZ2h0LCB1bnRpbCBoZSBjYW1lIHVwb24gdGhlIHRlbiB0aG91c2FuZCBHYWVzYXRhZSBuZWFyIHRoZSBwbGFjZSBjYWxsZWQgQ2xhc3RpZGl1bSwgYSBHYWxsaWMgdmlsbGFnZSB3aGljaCBub3QgbG9uZyBiZWZvcmUgaGFkIGJlY29tZSBzdWJqZWN0IHRvIHRoZSBSb21hbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBubyB0aW1lIGZvciBoaW0gdG8gZ2l2ZSBoaXMgYXJteSByZXN0IGFuZCByZWZyZXNobWVudCwgZm9yIHRoZSBCYXJiYXJpYW5zIHF1aWNrbHkgbGVhcm5lZCBvZiBoaXMgYXJyaXZhbCwgYW5kIGhlbGQgaW4gY29udGVtcHQgdGhlIGluZmFudHJ5IHdpdGggaGltLCB3aGljaCB3ZXJlIGZldyBpbiBudW1iZXIgYWxsIHRvbGQsIGFuZCwgYmVpbmcgR2F1bHMsIG1hZGUgbm8gYWNjb3VudCBvZiBoaXMgY2F2YWxyeS4gRm9yIHRoZXkgd2VyZSBtb3N0IGV4Y2VsbGVudCBmaWdodGVycyBvbiBob3JzZWJhY2ssIGFuZCB3ZXJlIHRob3VnaHQgdG8gYmUgc3BlY2lhbGx5IHN1cGVyaW9yIGFzIHN1Y2gsIGFuZCwgYmVzaWRlcywgYXQgdGhpcyB0aW1lIHRoZXkgZmFyIG91dG51bWJlcmVkIE1hcmNlbGx1cy4gIEltbWVkaWF0ZWx5LCB0aGVyZWZvcmUsIHRoZXkgY2hhcmdlZCB1cG9uIGhpbSB3aXRoIGdyZWF0IHZpb2xlbmNlIGFuZCBkcmVhZGZ1bCB0aHJlYXRzLCB0aGlua2luZyB0byBvdmVyd2hlbG0gaGltLCB0aGVpciBraW5nIHJpZGluZyBpbiBmcm9udCBvZiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTWFyY2VsbHVzLCB0aGF0IHRoZXkgbWlnaHQgbm90IHN1Y2NlZWQgaW4gZW5jbG9zaW5nIGFuZCBzdXJyb3VuZGluZyBoaW0gYW5kIGhpcyBmZXcgZm9sbG93ZXJzLCBsZWQgaGlzIHRyb29wcyBvZiBjYXZhbHJ5IGZvcndhcmQgYW5kIHRyaWVkIHRvIG91dGZsYW5rIHRoZW0sIGV4dGVuZGluZyBoaXMgd2luZyBpbnRvIGEgdGhpbiBsaW5lLCB1bnRpbCBoZSB3YXMgbm90IGZhciBmcm9tIHRoZSBlbmVteS4gIEFuZCBub3csIGp1c3QgYXMgaGUgd2FzIHR1cm5pbmcgdG8gbWFrZSBhIGNoYXJnZSwgaGlzIGhvcnNlLCBmcmlnaHRlbmVkIGJ5IHRoZSBmZXJvY2lvdXMgYXNwZWN0IG9mIHRoZSBlbmVteSwgd2hlZWxlZCBhYm91dCBhbmQgYm9yZSBNYXJjZWxsdXMgZm9yY2libHkgYmFjay4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlLCBmZWFyaW5nIGxlc3QgdGhpcyBzaG91bGQgYmUgdGFrZW4gYXMgYSBiYWQgb21lbiBieSB0aGUgUm9tYW5zIGFuZCBsZWFkIHRvIGNvbmZ1c2lvbiBhbW9uZyB0aGVtLCBxdWlja2x5IHJlaW5lZCBoaXMgaG9yc2Ugcm91bmQgdG8gdGhlIGxlZnQgYW5kIG1hZGUgaGltIGZhY2UgdGhlIGVuZW15LCB3aGlsZSBoZSBoaW1zZWxmIG1hZGUgYWRvcmF0aW9uIHRvIHRoZSBzdW4sIGltcGx5aW5nIHRoYXQgaXQgd2FzIG5vdCBieSBjaGFuY2UsIGJ1dCBmb3IgdGhpcyBwdXJwb3NlLCB0aGF0IGhlIGhhZCB3aGVlbGVkIGFib3V0OyBmb3IgaXQgaXMgdGhlIGN1c3RvbSB3aXRoIHRoZSBSb21hbnMgdG8gdHVybiByb3VuZCBpbiB0aGlzIHdheSB3aGVuIHRoZXkgbWFrZSBhZG9yYXRpb24gdG8gdGhlIGdvZHMuIEFuZCBpbiB0aGUgbW9tZW50IG9mIGNsb3Npbmcgd2l0aCB0aGUgZW5lbXkgaGUgaXMgc2FpZCB0byBoYXZlIHZvd2VkIHRoYXQgaGUgd291bGQgY29uc2VjcmF0ZSB0byBKdXBpdGVyIEZlcmV0cml1cyB0aGUgbW9zdCBiZWF1dGlmdWwgc3VpdCBvZiBhcm1vdXIgYW1vbmcgdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdG8gcmVzdW1lIHRoZSBzdG9yeSwgYWZ0ZXIgRmxhbWluaXVzIGFuZCBoaXMgY29sbGVhZ3VlIGhhZCByZW5vdW5jZWQgdGhlaXIgb2ZmaWNlcywgTWFyY2VsbHVzIHdhcyBhcHBvaW50ZWQgY29uc3VsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMjIgQi5DLiBJbiByZXB1YmxpY2FuIHRpbWVzLCBhbiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbnRlcnJleDwvZm9yZWlnbj4gd2FzIGVsZWN0ZWQgd2hlbiB0aGVyZSB3YXMgYSB2YWNhbmN5IGluIHRoZSBzdXByZW1lIHBvd2VyLCBoZWxkIG9mZmljZSBmb3IgZml2ZSBkYXlzLCBhbmQsIGlmIG5lY2Vzc2FyeSwgbm9taW5hdGVkIGhpcyBzdWNjZXNzb3IuICBBbnkgbnVtYmVyIG9mIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmludGVycmVnZXM8L2ZvcmVpZ24+IG1pZ2h0IGJlIHN1Y2Nlc3NpdmVseSBhcHBvaW50ZWQsIHVudGlsIHRoZSBoaWdoZXN0IG9mZmljZSB3YXMgZmlsbGVkLiAgQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDIuNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk51bWE8L3RpdGxlPiwgaWkuIDYgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYnkgdGhlIHNvLWNhbGxlZCAKCQkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmludGVycmV4PC9mb3JlaWduPiB3YXMgZWxlY3RlZCB3aGVuIHRoZXJlIHdhcyBhIHZhY2FuY3kgaW4gdGhlIHN1cHJlbWUgcG93ZXIsIGhlbGQgb2ZmaWNlIGZvciBmaXZlIGRheXMsIGFuZCwgaWYgbmVjZXNzYXJ5LCBub21pbmF0ZWQgaGlzIHN1Y2Nlc3Nvci4gIEFueSBudW1iZXIgb2YgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW50ZXJyZWdlczwvZm9yZWlnbj4gbWlnaHQgYmUgc3VjY2Vzc2l2ZWx5IGFwcG9pbnRlZCwgdW50aWwgdGhlIGhpZ2hlc3Qgb2ZmaWNlIHdhcyBmaWxsZWQuICBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMi42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TnVtYTwvdGl0bGU+LCBpaS4gNiBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TnVtYTwvdGl0bGU+LCBpaS4gNiBmLjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW50ZXJyZWdlcy48L3E+IEhlIHRvb2sgdGhlIG9mZmljZSwgYW5kIGFwcG9pbnRlZCBHbmFldXMgQ29ybmVsaXVzIGhpcyBjb2xsZWFndWUuICBOb3cgaXQgaGFzIGJlZW4gc2FpZCB0aGF0LCBhbHRob3VnaCB0aGUgR2F1bHMgbWFkZSBtYW55IGNvbmNpbGlhdG9yeSBwcm9wb3NhbHMsIGFuZCBhbHRob3VnaCB0aGUgc2VuYXRlIHdhcyBwZWFjZWFibHkgaW5jbGluZWQsIE1hcmNlbGx1cyB0cmllZCB0byBwcm92b2tlIHRoZSBwZW9wbGUgdG8gY29udGludWUgdGhlIHdhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IHdvdWxkIHNlZW0gdGhhdCBldmVuIGFmdGVyIHBlYWNlIHdhcyBtYWRlIHRoZSBHYWVzYXRhZSByZW5ld2VkIHRoZSB3YXI7IHRoZXkgY3Jvc3NlZCB0aGUgQWxwcyBhbmQgc3RpcnJlZCB1cCB0aGUgSW5zdWJyaWFucy4gVGhleSBudW1iZXJlZCB0aGlydHkgdGhvdXNhbmQgdGhlbXNlbHZlcywgYW5kIHRoZSBJbnN1YnJpYW5zLCB3aG9tIHRoZXkgam9pbmVkLCB3ZXJlIG11Y2ggbW9yZSBudW1lcm91cy4gV2l0aCBoaWdoIGNvbmZpZGVuY2UsIHRoZXJlZm9yZSwgdGhleSBtYXJjaGVkIGF0IG9uY2UgdG8gQWNlcnJhZSwgYSBjaXR5IHNpdHVhdGVkIHRvIHRoZSBub3J0aCBvZiB0aGUgcml2ZXIgUG8uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAyLjM0IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cyAoaWkuIDM0KTwvYmlibD4sIG5vIHBlYWNlIHdhcyBtYWRlLCBhbHRob3VnaCB0aGUgR2F1bHMgb2ZmZXJlZCB0byBzdWJtaXQsIGFuZCB0aGUgY29uc3VscyBtYXJjaGVkIGludG8gdGhlIHRlcnJpdG9yeSBvZiB0aGUgSW5zdWJyaWFucyBhbmQgbGFpZCBzaWVnZSB0byBBY2VycmFlLjwvbm90ZT4gRnJvbSB0aGVuY2UgQnJpdG9tYXJ0dXMgdGhlIGtpbmcsIHRha2luZyB3aXRoIGhpbSB0ZW4gdGhvdXNhbmQgb2YgdGhlIEdhZXNhdGFlLCByYXZhZ2VkIHRoZSBjb3VudHJ5IGFib3V0IHRoZSBQby4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDIuMzQiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzIChpaS4gMzQpPC9iaWJsPiwgbm8gcGVhY2Ugd2FzIG1hZGUsIGFsdGhvdWdoIHRoZSBHYXVscyBvZmZlcmVkIHRvIHN1Ym1pdCwgYW5kIHRoZSBjb25zdWxzIG1hcmNoZWQgaW50byB0aGUgdGVycml0b3J5IG9mIHRoZSBJbnN1YnJpYW5zIGFuZCBsYWlkIHNpZWdlIHRvIEFjZXJyYWUuPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gTWFyY2VsbHVzIGxlYXJuZWQgb2YgdGhpcywgaGUgbGVmdCBoaXMgY29sbGVhZ3VlIGF0IEFjZXJyYWUgd2l0aCBhbGwgdGhlIGhlYXZ5LWFybWVkIGluZmFudHJ5IGFuZCBhIHRoaXJkIHBhcnQgb2YgdGhlIGNhdmFscnksIHdoaWxlIGhlIGhpbXNlbGYsIHRha2luZyB3aXRoIGhpbSB0aGUgcmVzdCBvZiB0aGUgY2F2YWxyeSBhbmQgdGhlIG1vc3QgbGlnaHRseSBlcXVpcHBlZCBtZW4tYXQtYXJtcyB0byB0aGUgbnVtYmVyIG9mIHNpeCBodW5kcmVkLCBtYXJjaGVkLCB3aXRob3V0IGhhbHRpbmcgaW4gaGlzIGNvdXJzZSBkYXkgb3IgbmlnaHQsIHVudGlsIGhlIGNhbWUgdXBvbiB0aGUgdGVuIHRob3VzYW5kIEdhZXNhdGFlIG5lYXIgdGhlIHBsYWNlIGNhbGxlZCBDbGFzdGlkaXVtLCBhIEdhbGxpYyB2aWxsYWdlIHdoaWNoIG5vdCBsb25nIGJlZm9yZSBoYWQgYmVjb21lIHN1YmplY3QgdG8gdGhlIFJvbWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBubyB0aW1lIGZvciBoaW0gdG8gZ2l2ZSBoaXMgYXJteSByZXN0IGFuZCByZWZyZXNobWVudCwgZm9yIHRoZSBCYXJiYXJpYW5zIHF1aWNrbHkgbGVhcm5lZCBvZiBoaXMgYXJyaXZhbCwgYW5kIGhlbGQgaW4gY29udGVtcHQgdGhlIGluZmFudHJ5IHdpdGggaGltLCB3aGljaCB3ZXJlIGZldyBpbiBudW1iZXIgYWxsIHRvbGQsIGFuZCwgYmVpbmcgR2F1bHMsIG1hZGUgbm8gYWNjb3VudCBvZiBoaXMgY2F2YWxyeS4gRm9yIHRoZXkgd2VyZSBtb3N0IGV4Y2VsbGVudCBmaWdodGVycyBvbiBob3JzZWJhY2ssIGFuZCB3ZXJlIHRob3VnaHQgdG8gYmUgc3BlY2lhbGx5IHN1cGVyaW9yIGFzIHN1Y2gsIGFuZCwgYmVzaWRlcywgYXQgdGhpcyB0aW1lIHRoZXkgZmFyIG91dG51bWJlcmVkIE1hcmNlbGx1cy4gIEltbWVkaWF0ZWx5LCB0aGVyZWZvcmUsIHRoZXkgY2hhcmdlZCB1cG9uIGhpbSB3aXRoIGdyZWF0IHZpb2xlbmNlIGFuZCBkcmVhZGZ1bCB0aHJlYXRzLCB0aGlua2luZyB0byBvdmVyd2hlbG0gaGltLCB0aGVpciBraW5nIHJpZGluZyBpbiBmcm9udCBvZiB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNYXJjZWxsdXMsIHRoYXQgdGhleSBtaWdodCBub3Qgc3VjY2VlZCBpbiBlbmNsb3NpbmcgYW5kIHN1cnJvdW5kaW5nIGhpbSBhbmQgaGlzIGZldyBmb2xsb3dlcnMsIGxlZCBoaXMgdHJvb3BzIG9mIGNhdmFscnkgZm9yd2FyZCBhbmQgdHJpZWQgdG8gb3V0ZmxhbmsgdGhlbSwgZXh0ZW5kaW5nIGhpcyB3aW5nIGludG8gYSB0aGluIGxpbmUsIHVudGlsIGhlIHdhcyBub3QgZmFyIGZyb20gdGhlIGVuZW15LiAgQW5kIG5vdywganVzdCBhcyBoZSB3YXMgdHVybmluZyB0byBtYWtlIGEgY2hhcmdlLCBoaXMgaG9yc2UsIGZyaWdodGVuZWQgYnkgdGhlIGZlcm9jaW91cyBhc3BlY3Qgb2YgdGhlIGVuZW15LCB3aGVlbGVkIGFib3V0IGFuZCBib3JlIE1hcmNlbGx1cyBmb3JjaWJseSBiYWNrLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSwgZmVhcmluZyBsZXN0IHRoaXMgc2hvdWxkIGJlIHRha2VuIGFzIGEgYmFkIG9tZW4gYnkgdGhlIFJvbWFucyBhbmQgbGVhZCB0byBjb25mdXNpb24gYW1vbmcgdGhlbSwgcXVpY2tseSByZWluZWQgaGlzIGhvcnNlIHJvdW5kIHRvIHRoZSBsZWZ0IGFuZCBtYWRlIGhpbSBmYWNlIHRoZSBlbmVteSwgd2hpbGUgaGUgaGltc2VsZiBtYWRlIGFkb3JhdGlvbiB0byB0aGUgc3VuLCBpbXBseWluZyB0aGF0IGl0IHdhcyBub3QgYnkgY2hhbmNlLCBidXQgZm9yIHRoaXMgcHVycG9zZSwgdGhhdCBoZSBoYWQgd2hlZWxlZCBhYm91dDsgZm9yIGl0IGlzIHRoZSBjdXN0b20gd2l0aCB0aGUgUm9tYW5zIHRvIHR1cm4gcm91bmQgaW4gdGhpcyB3YXkgd2hlbiB0aGV5IG1ha2UgYWRvcmF0aW9uIHRvIHRoZSBnb2RzLiBBbmQgaW4gdGhlIG1vbWVudCBvZiBjbG9zaW5nIHdpdGggdGhlIGVuZW15IGhlIGlzIHNhaWQgdG8gaGF2ZSB2b3dlZCB0aGF0IGhlIHdvdWxkIGNvbnNlY3JhdGUgdG8gSnVwaXRlciBGZXJldHJpdXMgdGhlIG1vc3QgYmVhdXRpZnVsIHN1aXQgb2YgYXJtb3VyIGFtb25nIHRoZW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIHRoZSBraW5nIG9mIHRoZSBHYXVscyBlc3BpZWQgaGltLCBhbmQganVkZ2luZyBmcm9tIGhpcyBpbnNpZ25pYSB0aGF0IGhlIHdhcyB0aGUgY29tbWFuZGVyLCByb2RlIGZhciBvdXQgaW4gZnJvbnQgb2YgdGhlIHJlc3QgYW5kIGNvbmZyb250ZWQgaGltLCBzaG91dGluZyBjaGFsbGVuZ2VzIGFuZCBicmFuZGlzaGluZyBoaXMgc3BlYXIuICBIaXMgc3RhdHVyZSBleGNlZWRlZCB0aGF0IG9mIHRoZSBvdGhlciBHYXVscywgYW5kIGhlIHdhcyBjb25zcGljdW91cyBmb3IgYSBzdWl0IG9mIGFybW91ciB3aGljaCB3YXMgc2V0IG9mZiB3aXRoIGdvbGQgYW5kIHNpbHZlciBhbmQgYnJpZ2h0IGNvbG91cnMgYW5kIGFsbCBzb3J0cyBvZiBicm9pZGVyaWVzOyBpdCBnbGVhbWVkIGxpa2UgbGlnaHRuaW5nLiAgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGFzIE1hcmNlbGx1cyBzdXJ2ZXllZCB0aGUgcmFua3Mgb2YgdGhlIGVuZW15LCB0aGlzIHNlZW1lZCB0byBoaW0gdG8gYmUgdGhlIG1vc3QgYmVhdXRpZnVsIGFybW91ciwgYW5kIGhlIGNvbmNsdWRlZCB0aGF0IGl0IHdhcyB0aGlzIHdoaWNoIGhlIGhhZCB2b3dlZCB0byB0aGUgZ29kLiAgIEhlIHRoZXJlZm9yZSBydXNoZWQgdXBvbiB0aGUgbWFuLCBhbmQgYnkgYSB0aHJ1c3Qgb2YgaGlzIHNwZWFyIHdoaWNoIHBpZXJjZWQgaGlzIGFkdmVyc2FyeSdzIGJyZWFzdHBsYXRlLCBhbmQgYnkgdGhlIGltcGFjdCBvZiBoaXMgaG9yc2UgaW4gZnVsbCBjYXJlZXIsIHRocmV3IGhpbSwgc3RpbGwgbGl2aW5nLCB1cG9uIHRoZSBncm91bmQsIHdoZXJlLCB3aXRoIGEgc2Vjb25kIGFuZCB0aGlyZCBibG93LCBoZSBwcm9tcHRseSBraWxsZWQgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGxlYXBpbmcgZnJvbSBoaXMgaG9yc2UgYW5kIGxheWluZyBoaXMgaGFuZHMgdXBvbiB0aGUgYXJtb3VyIG9mIHRoZSBkZWFkLCBoZSBsb29rZWQgdG93YXJkcyBoZWF2ZW4gYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBKdXBpdGVyIEZlcmV0cml1cywgd2hvIGJlaG9sZHMgdGhlIGdyZWF0IGRlZWRzIGFuZCBleHBsb2l0cyBvZiBnZW5lcmFscyBhbmQgY29tbWFuZGVycyBpbiB3YXJzIGFuZCBmaWdodGluZ3MsIEkgY2FsbCB0aGVlIHRvIHdpdG5lc3MgdGhhdCBJIGhhdmUgb3ZlcnBvd2VyZWQgYW5kIHNsYWluIHRoaXMgbWFuIHdpdGggbXkgb3duIGhhbmQsIGJlaW5nIHRoZSB0aGlyZCBSb21hbiBydWxlciBhbmQgZ2VuZXJhbCBzbyB0byBzbGF5IGEgcnVsZXIgYW5kIGtpbmcsIGFuZCB0aGF0IEkgZGVkaWNhdGUgdG8gdGhlZSB0aGUgZmlyc3QgYW5kIG1vc3QgYmVhdXRpZnVsIG9mIHRoZSBzcG9pbHMuICBEbyB0aG91IHRoZXJlZm9yZSBncmFudCB1cyBhIGxpa2UgZm9ydHVuZSBhcyB3ZSBwcm9zZWN1dGUgdGhlIHJlc3Qgb2YgdGhlIHdhci48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NZWFud2hpbGUgdGhlIGtpbmcgb2YgdGhlIEdhdWxzIGVzcGllZCBoaW0sIGFuZCBqdWRnaW5nIGZyb20gaGlzIGluc2lnbmlhIHRoYXQgaGUgd2FzIHRoZSBjb21tYW5kZXIsIHJvZGUgZmFyIG91dCBpbiBmcm9udCBvZiB0aGUgcmVzdCBhbmQgY29uZnJvbnRlZCBoaW0sIHNob3V0aW5nIGNoYWxsZW5nZXMgYW5kIGJyYW5kaXNoaW5nIGhpcyBzcGVhci4gIEhpcyBzdGF0dXJlIGV4Y2VlZGVkIHRoYXQgb2YgdGhlIG90aGVyIEdhdWxzLCBhbmQgaGUgd2FzIGNvbnNwaWN1b3VzIGZvciBhIHN1aXQgb2YgYXJtb3VyIHdoaWNoIHdhcyBzZXQgb2ZmIHdpdGggZ29sZCBhbmQgc2lsdmVyIGFuZCBicmlnaHQgY29sb3VycyBhbmQgYWxsIHNvcnRzIG9mIGJyb2lkZXJpZXM7IGl0IGdsZWFtZWQgbGlrZSBsaWdodG5pbmcuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhcyBNYXJjZWxsdXMgc3VydmV5ZWQgdGhlIHJhbmtzIG9mIHRoZSBlbmVteSwgdGhpcyBzZWVtZWQgdG8gaGltIHRvIGJlIHRoZSBtb3N0IGJlYXV0aWZ1bCBhcm1vdXIsIGFuZCBoZSBjb25jbHVkZWQgdGhhdCBpdCB3YXMgdGhpcyB3aGljaCBoZSBoYWQgdm93ZWQgdG8gdGhlIGdvZC4gICBIZSB0aGVyZWZvcmUgcnVzaGVkIHVwb24gdGhlIG1hbiwgYW5kIGJ5IGEgdGhydXN0IG9mIGhpcyBzcGVhciB3aGljaCBwaWVyY2VkIGhpcyBhZHZlcnNhcnkncyBicmVhc3RwbGF0ZSwgYW5kIGJ5IHRoZSBpbXBhY3Qgb2YgaGlzIGhvcnNlIGluIGZ1bGwgY2FyZWVyLCB0aHJldyBoaW0sIHN0aWxsIGxpdmluZywgdXBvbiB0aGUgZ3JvdW5kLCB3aGVyZSwgd2l0aCBhIHNlY29uZCBhbmQgdGhpcmQgYmxvdywgaGUgcHJvbXB0bHkga2lsbGVkIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gbGVhcGluZyBmcm9tIGhpcyBob3JzZSBhbmQgbGF5aW5nIGhpcyBoYW5kcyB1cG9uIHRoZSBhcm1vdXIgb2YgdGhlIGRlYWQsIGhlIGxvb2tlZCB0b3dhcmRzIGhlYXZlbiBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gSnVwaXRlciBGZXJldHJpdXMsIHdobyBiZWhvbGRzIHRoZSBncmVhdCBkZWVkcyBhbmQgZXhwbG9pdHMgb2YgZ2VuZXJhbHMgYW5kIGNvbW1hbmRlcnMgaW4gd2FycyBhbmQgZmlnaHRpbmdzLCBJIGNhbGwgdGhlZSB0byB3aXRuZXNzIHRoYXQgSSBoYXZlIG92ZXJwb3dlcmVkIGFuZCBzbGFpbiB0aGlzIG1hbiB3aXRoIG15IG93biBoYW5kLCBiZWluZyB0aGUgdGhpcmQgUm9tYW4gcnVsZXIgYW5kIGdlbmVyYWwgc28gdG8gc2xheSBhIHJ1bGVyIGFuZCBraW5nLCBhbmQgdGhhdCBJIGRlZGljYXRlIHRvIHRoZWUgdGhlIGZpcnN0IGFuZCBtb3N0IGJlYXV0aWZ1bCBvZiB0aGUgc3BvaWxzLiAgRG8gdGhvdSB0aGVyZWZvcmUgZ3JhbnQgdXMgYSBsaWtlIGZvcnR1bmUgYXMgd2UgcHJvc2VjdXRlIHRoZSByZXN0IG9mIHRoZSB3YXIuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgcHJheWVyIGVuZGVkLCB0aGUgY2F2YWxyeSBqb2luZWQgYmF0dGxlLCBmaWdodGluZywgbm90IHdpdGggdGhlIGVuZW15J3MgaG9yc2VtZW4gYWxvbmUsIGJ1dCBhbHNvIHdpdGggdGhlaXIgZm9vdG1lbiB3aG8gYXR0YWNrZWQgdGhlbSBhdCB0aGUgc2FtZSB0aW1lLCBhbmQgd29uIGEgdmljdG9yeSB3aGljaCwgaW4gaXRzIHNvcnQgYW5kIGtpbmQsIHdhcyByZW1hcmthYmxlIGFuZCBzdHJhbmdlLiAgRm9yIG5ldmVyIGJlZm9yZSBvciBzaW5jZSwgYXMgd2UgYXJlIHRvbGQsIGhhdmUgc28gZmV3IGhvcnNlbWVuIGNvbnF1ZXJlZCBzbyBtYW55IGhvcnNlbWVuIGFuZCBmb290bWVuIHRvZ2V0aGVyLiAgQWZ0ZXIgc2xheWluZyB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZSBlbmVteSBhbmQgZ2V0dGluZyBwb3NzZXNzaW9uIG9mIHRoZWlyIGFybXMgYW5kIGJhZ2dhZ2UsIE1hcmNlbGx1cyByZXR1cm5lZCB0byBoaXMgY29sbGVhZ3VlLCB3aG8gd2FzIGhhcmQgcHV0IHRvIGl0IGluIGhpcyB3YXIgd2l0aCB0aGUgR2F1bHMgbmVhciB0aGVpciBsYXJnZXN0IGFuZCBtb3N0IHBvcHVsb3VzIGNpdHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNlcnJhZSBoYWQsIGluIHRoZSBtZWFudGltZSwgYmVlbiB0YWtlbiBieSB0aGUgUm9tYW5zLCB3aG8gaGFkIHRoZW4gYWR2YW5jZWQgYW5kIGxhaWQgc2llZ2UgdG8gTWVkaW9sYW51bSAoTWlsYW4pLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYi4gMi4zNCIgdmFsaWQ9InllcyI+UG9seWJpdXMsIGlpLiAzNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5NZWRpb2xhbnVtIHdhcyB0aGUgY2l0eSdzIG5hbWUsIGFuZCB0aGUgR2F1bHMgY29uc2lkZXJlZCBpdCB0aGVpciBtZXRyb3BvbGlzOyB3aGVyZWZvcmUgdGhleSBmb3VnaHQgZWFnZXJseSBpbiBpdHMgZGVmZW5jZSwgc28gdGhhdCBDb3JuZWxpdXMgd2FzIGxlc3MgYmVzaWVnZXIgdGhhbiBiZXNpZWdlZC4gIEJ1dCB3aGVuIE1hcmNlbGx1cyBjYW1lIHVwLCBhbmQgd2hlbiB0aGUgR2Flc2F0YWUsIG9uIGxlYXJuaW5nIG9mIHRoZSBkZWZlYXQgYW5kIGRlYXRoIG9mIHRoZWlyIGtpbmcsIHdpdGhkcmV3LCBNZWRpb2xhbnVtIHdhcyB0YWtlbiwgdGhlIEdhdWxzIHRoZW1zZWx2ZXMgc3VycmVuZGVyZWQgdGhlIHJlc3Qgb2YgdGhlaXIgY2l0aWVzIGF0IHRoZSBkaXNwb3NpdGlvbiBvZiB0aGUgUm9tYW5zLiAgVGhleSBvYnRhaW5lZCBwZWFjZSBvbiBlcXVpdGFibGUgdGVybXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBwcmF5ZXIgZW5kZWQsIHRoZSBjYXZhbHJ5IGpvaW5lZCBiYXR0bGUsIGZpZ2h0aW5nLCBub3Qgd2l0aCB0aGUgZW5lbXkncyBob3JzZW1lbiBhbG9uZSwgYnV0IGFsc28gd2l0aCB0aGVpciBmb290bWVuIHdobyBhdHRhY2tlZCB0aGVtIGF0IHRoZSBzYW1lIHRpbWUsIGFuZCB3b24gYSB2aWN0b3J5IHdoaWNoLCBpbiBpdHMgc29ydCBhbmQga2luZCwgd2FzIHJlbWFya2FibGUgYW5kIHN0cmFuZ2UuICBGb3IgbmV2ZXIgYmVmb3JlIG9yIHNpbmNlLCBhcyB3ZSBhcmUgdG9sZCwgaGF2ZSBzbyBmZXcgaG9yc2VtZW4gY29ucXVlcmVkIHNvIG1hbnkgaG9yc2VtZW4gYW5kIGZvb3RtZW4gdG9nZXRoZXIuICBBZnRlciBzbGF5aW5nIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGVuZW15IGFuZCBnZXR0aW5nIHBvc3Nlc3Npb24gb2YgdGhlaXIgYXJtcyBhbmQgYmFnZ2FnZSwgTWFyY2VsbHVzIHJldHVybmVkIHRvIGhpcyBjb2xsZWFndWUsIHdobyB3YXMgaGFyZCBwdXQgdG8gaXQgaW4gaGlzIHdhciB3aXRoIHRoZSBHYXVscyBuZWFyIHRoZWlyIGxhcmdlc3QgYW5kIG1vc3QgcG9wdWxvdXMgY2l0eS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjZXJyYWUgaGFkLCBpbiB0aGUgbWVhbnRpbWUsIGJlZW4gdGFrZW4gYnkgdGhlIFJvbWFucywgd2hvIGhhZCB0aGVuIGFkdmFuY2VkIGFuZCBsYWlkIHNpZWdlIHRvIE1lZGlvbGFudW0gKE1pbGFuKS4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMi4zNCIgdmFsaWQ9InllcyI+UG9seWJpdXMsIGlpLiAzNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMi4zNCIgdmFsaWQ9InllcyI+UG9seWJpdXMsIGlpLiAzNC48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1lZGlvbGFudW0gd2FzIHRoZSBjaXR5J3MgbmFtZSwgYW5kIHRoZSBHYXVscyBjb25zaWRlcmVkIGl0IHRoZWlyIG1ldHJvcG9saXM7IHdoZXJlZm9yZSB0aGV5IGZvdWdodCBlYWdlcmx5IGluIGl0cyBkZWZlbmNlLCBzbyB0aGF0IENvcm5lbGl1cyB3YXMgbGVzcyBiZXNpZWdlciB0aGFuIGJlc2llZ2VkLiAgQnV0IHdoZW4gTWFyY2VsbHVzIGNhbWUgdXAsIGFuZCB3aGVuIHRoZSBHYWVzYXRhZSwgb24gbGVhcm5pbmcgb2YgdGhlIGRlZmVhdCBhbmQgZGVhdGggb2YgdGhlaXIga2luZywgd2l0aGRyZXcsIE1lZGlvbGFudW0gd2FzIHRha2VuLCB0aGUgR2F1bHMgdGhlbXNlbHZlcyBzdXJyZW5kZXJlZCB0aGUgcmVzdCBvZiB0aGVpciBjaXRpZXMgYXQgdGhlIGRpc3Bvc2l0aW9uIG9mIHRoZSBSb21hbnMuICBUaGV5IG9idGFpbmVkIHBlYWNlIG9uIGVxdWl0YWJsZSB0ZXJtcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2VuYXRlIGRlY3JlZWQgYSB0cml1bXBoIHRvIE1hcmNlbGx1cyBhbG9uZSwgYW5kIGhpcyB0cml1bXBoYWwgcHJvY2Vzc2lvbiB3YXMgc2VsZG9tIGVxdWFsbGVkIGluIGl0cyBzcGxlbmRvdXIgYW5kIHdlYWx0aCBhbmQgc3BvaWxzIGFuZCBjYXB0aXZlcyBvZiBnaWdhbnRpYyBzaXplOyBidXQgYmVzaWRlcyB0aGlzLCB0aGUgbW9zdCBhZ3JlZWFibGUgYW5kIHRoZSByYXJlc3Qgc3BlY3RhY2xlIG9mIGFsbCB3YXMgYWZmb3JkZWQgd2hlbiBNYXJjZWxsdXMgaGltc2VsZiBjYXJyaWVkIHRvIHRoZSBnb2QgdGhlIGFybW91ciBvZiB0aGUgYmFyYmFyaWFuIGtpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBjdXQgdGhlIHRydW5rIG9mIGEgc2xlbmRlciBvYWssIHN0cmFpZ2h0IGFuZCB0YWxsLCBhbmQgZmFzaGlvbmVkIGl0IGludG8gdGhlIHNoYXBlIG9mIGEgdHJvcGh5OyBvbiB0aGlzIGhlIGJvdW5kIGFuZCBmYXN0ZW5lZCB0aGUgc3BvaWxzLCBhcnJhbmdpbmcgYW5kIGFkanVzdGluZyBlYWNoIHBpZWNlIGluIGR1ZSBvcmRlci4gV2hlbiB0aGUgcHJvY2Vzc2lvbiBiZWdhbiB0byBtb3ZlLCBoZSB0b29rIHRoZSB0cm9waHkgaGltc2VsZiBhbmQgbW91bnRlZCB0aGUgY2hhcmlvdCwgYW5kIHRodXMgYSB0cm9waHktYmVhcmluZyBmaWd1cmUgbW9yZSBjb25zcGljdW91cyBhbmQgYmVhdXRpZnVsIHRoYW4gYW55IGluIGhpcyBkYXkgcGFzc2VkIGluIHRyaXVtcGggdGhyb3VnaCB0aGUgY2l0eS4gIFRoZSBhcm15IGZvbGxvd2VkLCBhcnJheWVkIGluIG1vc3QgYmVhdXRpZnVsIGFybW91ciwgc2luZ2luZyBvZGVzIGNvbXBvc2VkIGZvciB0aGUgb2NjYXNpb24sIHRvZ2V0aGVyIHdpdGggcGFlYW5zIG9mIHZpY3RvcnkgaW4gcHJhaXNlIG9mIHRoZSBnb2QgYW5kIHRoZWlyIGdlbmVyYWwuICAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGFkdmFuY2luZyBhbmQgZW50ZXJpbmcgdGhlIHRlbXBsZSBvZiBKdXBpdGVyIEZlcmV0cml1cywgaGUgc2V0IHVwIGFuZCBjb25zZWNyYXRlZCBoaXMgb2ZmZXJpbmcsIGJlaW5nIHRoZSB0aGlyZCBhbmQgbGFzdCB0byBkbyBzbywgZG93biB0byBvdXIgdGltZS4gIFRoZSBmaXJzdCB3YXMgUm9tdWx1cywgd2hvIGRlc3BvaWxlZCBBY3JvbiB0aGUgQ2FlbmluZW5zaWFuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAxNi40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlJvbXVsdXM8L3RpdGxlPiwgeHZpLiA0LTcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+OyB0aGUgc2Vjb25kIHdhcyBDb3JuZWxpdXMgQ29zc3VzLCB3aG8gZGVzcG9pbGVkIFRvbHVtbml1cyB0aGUgVHVzY2FuOyBhbmQgYWZ0ZXIgdGhlbSBNYXJjZWxsdXMsIHdobyBkZXNwb2lsZWQgQnJpdG9tYXJ0dXMsIGtpbmcgb2YgdGhlIEdhdWxzOyBidXQgYWZ0ZXIgTWFyY2VsbHVzLCBubyBtYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBnb2QgdG8gd2hvbSB0aGUgc3BvaWxzIHdlcmUgZGVkaWNhdGVkIHdhcyBjYWxsZWQgSnVwaXRlciBGZXJldHJpdXMsIGFzIHNvbWUgc2F5LCBiZWNhdXNlIHRoZSB0cm9waHkgd2FzIGNhcnJpZWQgb24gYSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBoZXJldHJvbiw8L3E+ICBvciA8ZW1waD5jYXI8L2VtcGg+OyB0aGlzIGlzIGEgR3JlZWsgd29yZCwgYW5kIG1hbnkgc3VjaCB3ZXJlIHN0aWxsIG1pbmdsZWQgYXQgdGhhdCB0aW1lIHdpdGggdGhlIExhdGluPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAxNS4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlJvbXVsdXM8L3RpdGxlPiwgeHYuIDM8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTnVtLiA3LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TnVtYTwvdGl0bGU+LCB2aWkuIDU8L2JpYmw+Ljwvbm90ZT47IGFjY29yZGluZyB0byBvdGhlcnMsIHRoZSBlcGl0aGV0IGlzIGdpdmVuIHRvIEp1cGl0ZXIgYXMgd2llbGRlciBvZiB0aGUgdGh1bmRlci1ib2x0LCB0aGUgTGF0aW4KCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZlcmlyZTwvcT4gbWVhbmluZyA8ZW1waD50byBzbWl0ZTwvZW1waD4uICBCdXQgb3RoZXJzIHNheSB0aGUgbmFtZSBpcyBkZXJpdmVkIGZyb20gdGhlIGJsb3cgb25lIGdpdmVzIGFuIGVuZW15LCBzaW5jZSBldmVuIG5vdyBpbiBiYXR0bGVzLCB3aGVuIHRoZXkgYXJlIHB1cnN1aW5nIHRoZWlyIGVuZW1pZXMsIHRoZXkgZXhob3J0IG9uZSBhbm90aGVyIHdpdGggdGhlIHdvcmQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mZXJpLDwvcT4gd2hpY2ggbWVhbnMgPGVtcGg+c21pdGU8L2VtcGg+ISAgU3BvaWxzIGluIGdlbmVyYWwgdGhleSBjYWxsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c3BvbGlhLDwvcT4gIGFuZCB0aGVzZSBpbiBwYXJ0aWN1bGFyLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm9waW1hLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IHRoZXkgc2F5IHRoYXQgTnVtYSBQb21waWxpdXMsIGluIGhpcyBjb21tZW50YXJpZXMsIG1ha2VzIG1lbnRpb24gb2YgdGhyZWUga2luZHMgb2YgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vcGltYSw8L3E+IHByZXNjcmliaW5nIHRoYXQgd2hlbiB0aGUgZmlyc3Qga2luZCBhcmUgdGFrZW4sIHRoZXkgc2hhbGwgYmUgY29uc2VjcmF0ZWQgdG8gSnVwaXRlciBGZXJldHJpdXMsIHRoZSBzZWNvbmQgdG8gTWFycywgYW5kIHRoZSB0aGlyZCB0byBRdWlyaW51czsgYWxzbyB0aGF0IHRoZSByZXdhcmQgZm9yIHRoZSBmaXJzdCBzaGFsbCBiZSB0aHJlZSBodW5kcmVkIGFzc2VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBSb21hbiA8Zm9yZWlnbiBsYW5nPSJsYSI+YXM8L2ZvcmVpZ24+IGNvcnJlc3BvbmRlZCBuZWFybHkgdG8gdGhlIEVuZ2xpc2ggcGVubnkuPC9ub3RlPiBmb3IgdGhlIHNlY29uZCB0d28gaHVuZHJlZCwgYW5kIGZvciB0aGUgdGhpcmQgb25lIGh1bmRyZWQuICAgSG93ZXZlciwgdGhlIGdlbmVyYWwgYW5kIHByZXZhaWxpbmcgYWNjb3VudCBpcyB0aGF0IG9ubHkgdGhvc2Ugc3BvaWxzIGFyZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm9waW1hPC9xPiB3aGljaCBhcmUgdGFrZW4gZmlyc3QsIGluIGEgcGl0Y2hlZCBiYXR0bGUsIHdoZXJlIGdlbmVyYWwgc2xheXMgZ2VuZXJhbC4gIFNvIG11Y2gsIHRoZW4sIG9uIHRoaXMgc3ViamVjdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2VuYXRlIGRlY3JlZWQgYSB0cml1bXBoIHRvIE1hcmNlbGx1cyBhbG9uZSwgYW5kIGhpcyB0cml1bXBoYWwgcHJvY2Vzc2lvbiB3YXMgc2VsZG9tIGVxdWFsbGVkIGluIGl0cyBzcGxlbmRvdXIgYW5kIHdlYWx0aCBhbmQgc3BvaWxzIGFuZCBjYXB0aXZlcyBvZiBnaWdhbnRpYyBzaXplOyBidXQgYmVzaWRlcyB0aGlzLCB0aGUgbW9zdCBhZ3JlZWFibGUgYW5kIHRoZSByYXJlc3Qgc3BlY3RhY2xlIG9mIGFsbCB3YXMgYWZmb3JkZWQgd2hlbiBNYXJjZWxsdXMgaGltc2VsZiBjYXJyaWVkIHRvIHRoZSBnb2QgdGhlIGFybW91ciBvZiB0aGUgYmFyYmFyaWFuIGtpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBjdXQgdGhlIHRydW5rIG9mIGEgc2xlbmRlciBvYWssIHN0cmFpZ2h0IGFuZCB0YWxsLCBhbmQgZmFzaGlvbmVkIGl0IGludG8gdGhlIHNoYXBlIG9mIGEgdHJvcGh5OyBvbiB0aGlzIGhlIGJvdW5kIGFuZCBmYXN0ZW5lZCB0aGUgc3BvaWxzLCBhcnJhbmdpbmcgYW5kIGFkanVzdGluZyBlYWNoIHBpZWNlIGluIGR1ZSBvcmRlci4gV2hlbiB0aGUgcHJvY2Vzc2lvbiBiZWdhbiB0byBtb3ZlLCBoZSB0b29rIHRoZSB0cm9waHkgaGltc2VsZiBhbmQgbW91bnRlZCB0aGUgY2hhcmlvdCwgYW5kIHRodXMgYSB0cm9waHktYmVhcmluZyBmaWd1cmUgbW9yZSBjb25zcGljdW91cyBhbmQgYmVhdXRpZnVsIHRoYW4gYW55IGluIGhpcyBkYXkgcGFzc2VkIGluIHRyaXVtcGggdGhyb3VnaCB0aGUgY2l0eS4gIFRoZSBhcm15IGZvbGxvd2VkLCBhcnJheWVkIGluIG1vc3QgYmVhdXRpZnVsIGFybW91ciwgc2luZ2luZyBvZGVzIGNvbXBvc2VkIGZvciB0aGUgb2NjYXNpb24sIHRvZ2V0aGVyIHdpdGggcGFlYW5zIG9mIHZpY3RvcnkgaW4gcHJhaXNlIG9mIHRoZSBnb2QgYW5kIHRoZWlyIGdlbmVyYWwuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgYWR2YW5jaW5nIGFuZCBlbnRlcmluZyB0aGUgdGVtcGxlIG9mIEp1cGl0ZXIgRmVyZXRyaXVzLCBoZSBzZXQgdXAgYW5kIGNvbnNlY3JhdGVkIGhpcyBvZmZlcmluZywgYmVpbmcgdGhlIHRoaXJkIGFuZCBsYXN0IHRvIGRvIHNvLCBkb3duIHRvIG91ciB0aW1lLiAgVGhlIGZpcnN0IHdhcyBSb211bHVzLCB3aG8gZGVzcG9pbGVkIEFjcm9uIHRoZSBDYWVuaW5lbnNpYW48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAxNi40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tdWx1czwvdGl0bGU+LCB4dmkuIDQtNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT47IHRoZSBzZWNvbmQgd2FzIENvcm5lbGl1cyBDb3NzdXMsIHdobyBkZXNwb2lsZWQgVG9sdW1uaXVzIHRoZSBUdXNjYW47IGFuZCBhZnRlciB0aGVtIE1hcmNlbGx1cywgd2hvIGRlc3BvaWxlZCBCcml0b21hcnR1cywga2luZyBvZiB0aGUgR2F1bHM7IGJ1dCBhZnRlciBNYXJjZWxsdXMsIG5vIG1hbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDE2LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Sb211bHVzPC90aXRsZT4sIHh2aS4gNC03LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tdWx1czwvdGl0bGU+LCB4dmkuIDQtNy48L3RyYW5zbGF0aW9uPg=="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBnb2QgdG8gd2hvbSB0aGUgc3BvaWxzIHdlcmUgZGVkaWNhdGVkIHdhcyBjYWxsZWQgSnVwaXRlciBGZXJldHJpdXMsIGFzIHNvbWUgc2F5LCBiZWNhdXNlIHRoZSB0cm9waHkgd2FzIGNhcnJpZWQgb24gYSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGhlcmV0cm9uLDwvcT4gIG9yIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Y2FyPC9lbXBoPjsgdGhpcyBpcyBhIEdyZWVrIHdvcmQsIGFuZCBtYW55IHN1Y2ggd2VyZSBzdGlsbCBtaW5nbGVkIGF0IHRoYXQgdGltZSB3aXRoIHRoZSBMYXRpbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDE1LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Sb211bHVzPC90aXRsZT4sIHh2LiAzPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTnVtLiA3LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OdW1hPC90aXRsZT4sIHZpaS4gNTwvYmlibD4uPC9ub3RlPjsgYWNjb3JkaW5nIHRvIG90aGVycywgdGhlIGVwaXRoZXQgaXMgZ2l2ZW4gdG8gSnVwaXRlciBhcyB3aWVsZGVyIG9mIHRoZSB0aHVuZGVyLWJvbHQsIHRoZSBMYXRpbgoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAxNS4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tdWx1czwvdGl0bGU+LCB4di4gMzwvYmlibD47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJvbXVsdXM8L3RpdGxlPiwgeHYuIDM8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDcuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk51bWE8L3RpdGxlPiwgdmlpLiA1PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OdW1hPC90aXRsZT4sIHZpaS4gNTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZmVyaXJlPC9xPiBtZWFuaW5nIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+dG8gc21pdGU8L2VtcGg+LiAgQnV0IG90aGVycyBzYXkgdGhlIG5hbWUgaXMgZGVyaXZlZCBmcm9tIHRoZSBibG93IG9uZSBnaXZlcyBhbiBlbmVteSwgc2luY2UgZXZlbiBub3cgaW4gYmF0dGxlcywgd2hlbiB0aGV5IGFyZSBwdXJzdWluZyB0aGVpciBlbmVtaWVzLCB0aGV5IGV4aG9ydCBvbmUgYW5vdGhlciB3aXRoIHRoZSB3b3JkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mZXJpLDwvcT4gd2hpY2ggbWVhbnMgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5zbWl0ZTwvZW1waD4hICBTcG9pbHMgaW4gZ2VuZXJhbCB0aGV5IGNhbGwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnNwb2xpYSw8L3E+ICBhbmQgdGhlc2UgaW4gcGFydGljdWxhciwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPm9waW1hLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhleSBzYXkgdGhhdCBOdW1hIFBvbXBpbGl1cywgaW4gaGlzIGNvbW1lbnRhcmllcywgbWFrZXMgbWVudGlvbiBvZiB0aHJlZSBraW5kcyBvZiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b3BpbWEsPC9xPiBwcmVzY3JpYmluZyB0aGF0IHdoZW4gdGhlIGZpcnN0IGtpbmQgYXJlIHRha2VuLCB0aGV5IHNoYWxsIGJlIGNvbnNlY3JhdGVkIHRvIEp1cGl0ZXIgRmVyZXRyaXVzLCB0aGUgc2Vjb25kIHRvIE1hcnMsIGFuZCB0aGUgdGhpcmQgdG8gUXVpcmludXM7IGFsc28gdGhhdCB0aGUgcmV3YXJkIGZvciB0aGUgZmlyc3Qgc2hhbGwgYmUgdGhyZWUgaHVuZHJlZCBhc3Nlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBSb21hbiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5hczwvZm9yZWlnbj4gY29ycmVzcG9uZGVkIG5lYXJseSB0byB0aGUgRW5nbGlzaCBwZW5ueS48L25vdGU+IGZvciB0aGUgc2Vjb25kIHR3byBodW5kcmVkLCBhbmQgZm9yIHRoZSB0aGlyZCBvbmUgaHVuZHJlZC4gICBIb3dldmVyLCB0aGUgZ2VuZXJhbCBhbmQgcHJldmFpbGluZyBhY2NvdW50IGlzIHRoYXQgb25seSB0aG9zZSBzcG9pbHMgYXJlIAoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+YXM8L2ZvcmVpZ24+IGNvcnJlc3BvbmRlZCBuZWFybHkgdG8gdGhlIEVuZ2xpc2ggcGVubnkuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vcGltYTwvcT4gd2hpY2ggYXJlIHRha2VuIGZpcnN0LCBpbiBhIHBpdGNoZWQgYmF0dGxlLCB3aGVyZSBnZW5lcmFsIHNsYXlzIGdlbmVyYWwuICBTbyBtdWNoLCB0aGVuLCBvbiB0aGlzIHN1YmplY3QuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMgd2VyZSBzbyBvdmVyam95ZWQgYXQgdGhpcyB2aWN0b3J5IGFuZCB0aGUgZW5kaW5nIG9mIHRoZSB3YXIgdGhhdCB0aGV5IHNlbnQgdG8gdGhlIFB5dGhpYW4gQXBvbGxvIGF0IERlbHBoaSBhIGdvbGRlbiBib3dsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGluZGljYXRpb24gb2YgaXRzIHNvdXJjZSBvciB2YWx1ZSB3aGljaCBmb2xsb3dzIGluIHRoZSBHcmVlaywgaXMgdW5jZXJ0YWluLjwvbm90ZT4gLiAuIC4gYXMgYSB0aGFuay1vZmZlcmluZywgZ2F2ZSBhIHNwbGVuZGlkIHNoYXJlIG9mIHRoZSBzcG9pbHMgdG8gdGhlaXIgYWxsaWVkIGNpdGllcywgYW5kIHNlbnQgbWFueSB0byBIaWVybywgdGhlIGtpbmcgb2YgU3lyYWN1c2UsIHdobyB3YXMgdGhlaXIgZnJpZW5kIGFuZCBhbGx5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMgd2VyZSBzbyBvdmVyam95ZWQgYXQgdGhpcyB2aWN0b3J5IGFuZCB0aGUgZW5kaW5nIG9mIHRoZSB3YXIgdGhhdCB0aGV5IHNlbnQgdG8gdGhlIFB5dGhpYW4gQXBvbGxvIGF0IERlbHBoaSBhIGdvbGRlbiBib3dsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgaW5kaWNhdGlvbiBvZiBpdHMgc291cmNlIG9yIHZhbHVlIHdoaWNoIGZvbGxvd3MgaW4gdGhlIEdyZWVrLCBpcyB1bmNlcnRhaW4uPC9ub3RlPiAuIC4gLiBhcyBhIHRoYW5rLW9mZmVyaW5nLCBnYXZlIGEgc3BsZW5kaWQgc2hhcmUgb2YgdGhlIHNwb2lscyB0byB0aGVpciBhbGxpZWQgY2l0aWVzLCBhbmQgc2VudCBtYW55IHRvIEhpZXJvLCB0aGUga2luZyBvZiBTeXJhY3VzZSwgd2hvIHdhcyB0aGVpciBmcmllbmQgYW5kIGFsbHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgSGFubmliYWwgaGFkIGludmFkZWQgSXRhbHksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MjE4IEIuQy48L25vdGU+IE1hcmNlbGx1cyB3YXMgc2VudCB0byBTaWNpbHkgd2l0aCBhIGZsZWV0LiAgQW5kIHdoZW4gdGhlIGRpc2FzdGVyIGF0IENhbm5hZSBjYW1lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIxNiBCLkMuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZhYi4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5GYWJpdXMgTWF4aW11czwvdGl0bGU+LCB4di4gZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIG1hbnkgdGhvdXNhbmRzIG9mIFJvbWFucyBoYWQgYmVlbiBzbGFpbiBpbiB0aGUgYmF0dGxlLCBhbmQgb25seSBhIGZldyBoYWQgc2F2ZWQgdGhlbXNlbHZlcyBieSBmbHlpbmcgdG8gQ2FudXNpdW0sIGFuZCBpdCB3YXMgZXhwZWN0ZWQgdGhhdCBIYW5uaWJhbCB3b3VsZCBtYXJjaCBhdCBvbmNlIGFnYWluc3QgUm9tZSwgbm93IHRoYXQgaGUgaGFkIGRlc3Ryb3llZCB0aGUgZmxvd2VyIG9mIGhlciBmb3JjZXMsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmluIHRoZSBmaXJzdCBwbGFjZSwgTWFyY2VsbHVzIHNlbnQgZmlmdGVlbiBodW5kcmVkIG1lbiBmcm9tIGhpcyBzaGlwcyB0byBwcm90ZWN0IHRoZSBjaXR5OyB0aGVuLCB1bmRlciBvcmRlcnMgZnJvbSB0aGUgc2VuYXRlLCBoZSB3ZW50IHRvIENhbnVzaXVtLCBhbmQgdGFraW5nIHRoZSB0cm9vcHMgdGhhdCBoYWQgZ2F0aGVyZWQgdGhlcmUsIGxlZCB0aGVtIG91dCBvZiB0aGUgZm9ydGlmaWNhdGlvbnMgdG8gc2hvdyB0aGF0IGhlIHdvdWxkIG5vdCBhYmFuZG9uIHRoZSBjb3VudHJ5LiAgICBNb3N0IG9mIHRoZSBsZWFkZXJzIGFuZCBpbmZsdWVudGlhbCBtZW4gYW1vbmcgdGhlIFJvbWFucyBoYWQgZmFsbGVuIGluIGJhdHRsZTsgYW5kIGFzIGZvciBGYWJpdXMgTWF4aW11cywgd2hvIHdhcyBoZWxkIGluIHRoZSBncmVhdGVzdCBlc3RlZW0gZm9yIGhpcyBzYWdhY2l0eSBhbmQgdHJ1c3R3b3J0aGluZXNzLCBoaXMgZXhjZXNzaXZlIGNhcmUgaW4gcGxhbm5pbmcgdG8gYXZvaWQgbG9zc2VzIHdhcyBjZW5zdXJlZCBhcyBjb3dhcmRseSBpbmFjdGl2aXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGVvcGxlIHRob3VnaHQgdGhleSBoYWQgaW4gaGltIGEgZ2VuZXJhbCB3aG8gc3VmZmljZWQgZm9yIHRoZSBkZWZlbnNpdmUsIGJ1dCB3YXMgaW5hZGVxdWF0ZSBmb3IgdGhlIG9mZmVuc2l2ZSwgYW5kIHRoZXJlZm9yZSB0dXJuZWQgdGhlaXIgZXllcyB1cG9uIE1hcmNlbGx1czsgYW5kIG1pbmdsaW5nIGFuZCB1bml0aW5nIGhpcyBib2xkbmVzcyBhbmQgYWN0aXZpdHkgd2l0aCB0aGUgY2F1dGlvbiBhbmQgZm9yZXRob3VnaHQgb2YgRmFiaXVzLCB0aGV5IHNvbWV0aW1lcyBlbGVjdGVkIGJvdGggdG8gYmUgY29uc3VscyB0b2dldGhlciwgYW5kIHNvbWV0aW1lcyBtYWRlIHRoZW0sIGJ5IHR1cm5zLCBjb25zdWwgYW5kIHByb2NvbnN1bCwgYW5kIHNlbnQgdGhlbSBpbnRvIHRoZSBmaWVsZC4gIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBvc2VpZG9uaXVzIHNheXMgdGhhdCBGYWJpdXMgd2FzIGNhbGxlZCBhIHNoaWVsZCwgYW5kIE1hcmNlbGx1cyBhIHN3b3JkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZhYi4gMTkuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5GYWJpdXMgTWF4aW11czwvdGl0bGU+LCB4aXguIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFuZCBIYW5uaWJhbCBoaW1zZWxmIHVzZWQgdG8gc2F5IHRoYXQgaGUgZmVhcmVkIEZhYml1cyBhcyBhIHR1dG9yLCBidXQgTWFyY2VsbHVzIGFzIGFuIGFkdmVyc2FyeTsgZm9yIGJ5IHRoZSBvbmUgaGUgd2FzIHByZXZlbnRlZCBmcm9tIGRvaW5nIGFueSBoYXJtLCB3aGlsZSBieSB0aGUgb3RoZXIgaGUgd2FzIGFjdHVhbGx5IGhhcm1lZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBIYW5uaWJhbCBoYWQgaW52YWRlZCBJdGFseSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIxOCBCLkMuPC9ub3RlPiBNYXJjZWxsdXMgd2FzIHNlbnQgdG8gU2ljaWx5IHdpdGggYSBmbGVldC4gIEFuZCB3aGVuIHRoZSBkaXNhc3RlciBhdCBDYW5uYWUgY2FtZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIxNiBCLkMuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmFiLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmFiaXVzIE1heGltdXM8L3RpdGxlPiwgeHYuIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBtYW55IHRob3VzYW5kcyBvZiBSb21hbnMgaGFkIGJlZW4gc2xhaW4gaW4gdGhlIGJhdHRsZSwgYW5kIG9ubHkgYSBmZXcgaGFkIHNhdmVkIHRoZW1zZWx2ZXMgYnkgZmx5aW5nIHRvIENhbnVzaXVtLCBhbmQgaXQgd2FzIGV4cGVjdGVkIHRoYXQgSGFubmliYWwgd291bGQgbWFyY2ggYXQgb25jZSBhZ2FpbnN0IFJvbWUsIG5vdyB0aGF0IGhlIGhhZCBkZXN0cm95ZWQgdGhlIGZsb3dlciBvZiBoZXIgZm9yY2VzLCAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZhYi4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZhYml1cyBNYXhpbXVzPC90aXRsZT4sIHh2LiBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmFiaXVzIE1heGltdXM8L3RpdGxlPiwgeHYuIGYuPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmluIHRoZSBmaXJzdCBwbGFjZSwgTWFyY2VsbHVzIHNlbnQgZmlmdGVlbiBodW5kcmVkIG1lbiBmcm9tIGhpcyBzaGlwcyB0byBwcm90ZWN0IHRoZSBjaXR5OyB0aGVuLCB1bmRlciBvcmRlcnMgZnJvbSB0aGUgc2VuYXRlLCBoZSB3ZW50IHRvIENhbnVzaXVtLCBhbmQgdGFraW5nIHRoZSB0cm9vcHMgdGhhdCBoYWQgZ2F0aGVyZWQgdGhlcmUsIGxlZCB0aGVtIG91dCBvZiB0aGUgZm9ydGlmaWNhdGlvbnMgdG8gc2hvdyB0aGF0IGhlIHdvdWxkIG5vdCBhYmFuZG9uIHRoZSBjb3VudHJ5LiAgICBNb3N0IG9mIHRoZSBsZWFkZXJzIGFuZCBpbmZsdWVudGlhbCBtZW4gYW1vbmcgdGhlIFJvbWFucyBoYWQgZmFsbGVuIGluIGJhdHRsZTsgYW5kIGFzIGZvciBGYWJpdXMgTWF4aW11cywgd2hvIHdhcyBoZWxkIGluIHRoZSBncmVhdGVzdCBlc3RlZW0gZm9yIGhpcyBzYWdhY2l0eSBhbmQgdHJ1c3R3b3J0aGluZXNzLCBoaXMgZXhjZXNzaXZlIGNhcmUgaW4gcGxhbm5pbmcgdG8gYXZvaWQgbG9zc2VzIHdhcyBjZW5zdXJlZCBhcyBjb3dhcmRseSBpbmFjdGl2aXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUgdGhvdWdodCB0aGV5IGhhZCBpbiBoaW0gYSBnZW5lcmFsIHdobyBzdWZmaWNlZCBmb3IgdGhlIGRlZmVuc2l2ZSwgYnV0IHdhcyBpbmFkZXF1YXRlIGZvciB0aGUgb2ZmZW5zaXZlLCBhbmQgdGhlcmVmb3JlIHR1cm5lZCB0aGVpciBleWVzIHVwb24gTWFyY2VsbHVzOyBhbmQgbWluZ2xpbmcgYW5kIHVuaXRpbmcgaGlzIGJvbGRuZXNzIGFuZCBhY3Rpdml0eSB3aXRoIHRoZSBjYXV0aW9uIGFuZCBmb3JldGhvdWdodCBvZiBGYWJpdXMsIHRoZXkgc29tZXRpbWVzIGVsZWN0ZWQgYm90aCB0byBiZSBjb25zdWxzIHRvZ2V0aGVyLCBhbmQgc29tZXRpbWVzIG1hZGUgdGhlbSwgYnkgdHVybnMsIGNvbnN1bCBhbmQgcHJvY29uc3VsLCBhbmQgc2VudCB0aGVtIGludG8gdGhlIGZpZWxkLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBvc2VpZG9uaXVzIHNheXMgdGhhdCBGYWJpdXMgd2FzIGNhbGxlZCBhIHNoaWVsZCwgYW5kIE1hcmNlbGx1cyBhIHN3b3JkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDE5LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GYWJpdXMgTWF4aW11czwvdGl0bGU+LCB4aXguIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFuZCBIYW5uaWJhbCBoaW1zZWxmIHVzZWQgdG8gc2F5IHRoYXQgaGUgZmVhcmVkIEZhYml1cyBhcyBhIHR1dG9yLCBidXQgTWFyY2VsbHVzIGFzIGFuIGFkdmVyc2FyeTsgZm9yIGJ5IHRoZSBvbmUgaGUgd2FzIHByZXZlbnRlZCBmcm9tIGRvaW5nIGFueSBoYXJtLCB3aGlsZSBieSB0aGUgb3RoZXIgaGUgd2FzIGFjdHVhbGx5IGhhcm1lZC4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmFiLiAxOS4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmFiaXVzIE1heGltdXM8L3RpdGxlPiwgeGl4LiAzLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmFiaXVzIE1heGltdXM8L3RpdGxlPiwgeGl4LiAzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRvIGJlZ2luIHdpdGgsIHRoZW4sIHNpbmNlIEhhbm5pYmFsJ3MgdmljdG9yeSBoYWQgbWFkZSBoaXMgc29sZGllcnMgdmVyeSBib2xkIGFuZCBjYXJlbGVzcywgTWFyY2VsbHVzIHNldCB1cG9uIHRoZW0gYXMgdGhleSBzdHJhZ2dsZWQgZnJvbSB0aGVpciBjYW1wIGFuZCBvdmVycmFuIHRoZSBjb3VudHJ5LCBjdXQgdGhlbSBkb3duLCBhbmQgdGh1cyBzbG93bHkgZGltaW5pc2hlZCB0aGVpciBmb3JjZXM7IHNlY29uZGx5LCBoZSBicm91Z2h0IGFpZCB0byBOZWFwb2xpcyBhbmQgTm9sYS4gIEluIE5lYXBvbGlzIGhlIG1lcmVseSBjb25maXJtZWQgdGhlIG1pbmRzIG9mIHRoZSBjaXRpemVucywgd2hvIHdlcmUgb2YgdGhlaXIgb3duIGNob2ljZSBzdGVhZGZhc3QgZnJpZW5kcyBvZiBSb21lOyBidXQgb24gZW50ZXJpbmcgTm9sYSwgaGUgZm91bmQgYSBzdGF0ZSBvZiBkaXNjb3JkLCB0aGUgc2VuYXRlIGJlaW5nIHVuYWJsZSB0byByZWd1bGF0ZSBhbmQgbWFuYWdlIHRoZSBwZW9wbGUsIHdoaWNoIGZhdm91cmVkIEhhbm5pYmFsLiAgIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3YXMgYSBtYW4gaW4gdGhlIGNpdHkgb2YgdGhlIGhpZ2hlc3QgYmlydGggYW5kIG9mIGlsbHVzdHJpb3VzIHZhbG91ciwgd2hvc2UgbmFtZSB3YXMgQmFudGl1cy4gIFRoaXMgbWFuIGhhZCBmb3VnaHQgd2l0aCBjb25zcGljdW91cyBicmF2ZXJ5IGF0IENhbm5hZSwgYW5kIGhhZCBzbGFpbiBtYW55IG9mIHRoZSBDYXJ0aGFnaW5pYW5zLCBhbmQgd2hlbiBoZSB3YXMgYXQgbGFzdCBmb3VuZCBhbW9uZyB0aGUgZGVhZCB3aXRoIGhpcyBib2R5IGZ1bGwgb2YgbWlzc2lsZXMsIEhhbm5pYmFsIHdhcyBzdHJ1Y2sgd2l0aCBhZG1pcmF0aW9uIG9mIGhpbSwgYW5kIG5vdCBvbmx5IGxldCBoaW0gZ28gd2l0aG91dCBhIHJhbnNvbSwgYnV0IGFjdHVhbGx5IGFkZGVkIGdpZnRzLCBhbmQgbWFkZSBoaW0gaGlzIGZyaWVuZCBhbmQgZ3Vlc3QuICAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiByZXR1cm4gZm9yIHRoaXMgZmF2b3VyIHRoZW4sIEJhbnRpdXMgd2FzIG9uZSBvZiB0aG9zZSB3aG8gZWFnZXJseSBmYXZvdXJlZCB0aGUgY2F1c2Ugb2YgSGFubmliYWwsIGFuZCB3YXMgdXNpbmcgaGlzIGdyZWF0IGluZmx1ZW5jZSB0byBicmluZyB0aGUgcGVvcGxlIHRvIGEgcmV2b2x0LiAgIE1hcmNlbGx1cyB0aG91Z2h0IGl0IHdyb25nIHRvIHB1dCB0byBkZWF0aCBhIG1hbiBzbyBpbGx1c3RyaW91cyBpbiBoaXMgZ29vZCBmb3J0dW5lIHdobyBoYWQgdGFrZW4gcGFydCB3aXRoIHRoZSBSb21hbnMgaW4gdGhlaXIgZ3JlYXRlc3QgY29uZmxpY3RzLCBhbmQsIGJlc2lkZXMgaGlzIG5hdHVyYWwga2luZGxpbmVzcywgaGUgaGFkIGFuIGFkZHJlc3MgdGhhdCB3YXMgbGlrZWx5IHRvIHdpbiBvdmVyIGEgY2hhcmFjdGVyIHdob3NlIGFtYml0aW9uIHdhcyBmb3IgaG9ub3VyLiAgT25lIGRheSwgdGhlcmVmb3JlLCB3aGVuIEJhbnRpdXMgc2FsdXRlZCBoaW0sIGhlIGFza2VkIGhpbSB3aG8gaGUgd2FzLCBub3QgdGhhdCBoZSBoYWQgbm90IGtub3duIGhpbSBmb3Igc29tZSB0aW1lLCBidXQgc2Vla2luZyBvY2Nhc2lvbiBhbmQgZXhjdXNlIGZvciBjb252ZXJzYXRpb24gd2l0aCBoaW0uICAgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoZW4gaGUgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGFtIEx1Y2l1cyBCYW50aXVzLDwvcT4gTWFyY2VsbHVzLCBhcyBpZiBhc3RvbmlzaGVkIGFuZCBkZWxpZ2h0ZWQsIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCEgYXJlIHlvdSB0aGF0IEJhbnRpdXMgd2hvIGlzIG1vcmUgdGFsa2VkIG9mIGluIFJvbWUgdGhhbiBhbnkgb2YgdGhvc2Ugd2hvIGZvdWdodCBhdCBDYW5uYWUsIGFzIHRoZSBvbmx5IG1hbiB3aG8gZGlkIG5vdCBhYmFuZG9uIFBhdWx1cyBBZW1pbGl1cyB0aGUgY29uc3VsLCBidXQgZW5jb3VudGVyZWQgYW5kIHJlY2VpdmVkIGluIGhpcyBvd24gYm9keSBtb3N0IG9mIHRoZSBtaXNzaWxlcyBhaW1lZCBhdCBoaW0/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEJhbnRpdXMgYXNzZW50ZWQgYW5kIHNob3dlZCBoaW0gc29tZSBvZiBoaXMgc2NhcnMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5LCB0aGVuLDwvcT4gc2FpZCBNYXJjZWxsdXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2hlbiB5b3UgYmVhciBzdWNoIG1hcmtzIG9mIHlvdXIgZnJpZW5kc2hpcCB0b3dhcmRzIHVzLCBkaWQgeW91IG5vdCBjb21lIHRvIHVzIGF0IG9uY2U/ICAgQ2FuIGl0IGJlIHRoYXQgeW91IHRoaW5rIHVzIGxvYXRoIHRvIHJlcXVpdGUgdmFsb3VyIGluIGZyaWVuZHMgd2hvIGFyZSBob25vdXJlZCBldmVuIGFtb25nIG91ciBlbmVtaWVzPzwvcT4gVGhlc2Uga2luZGx5IGdyZWV0aW5ncyBoZSBmb2xsb3dlZCB1cCBieSBtYWtpbmcgaGltIHByZXNlbnRzIG9mIGEgd2FyIGhvcnNlIGFuZCBmaXZlIGh1bmRyZWQgZHJhY2htYXMgaW4gc2lsdmVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VG8gYmVnaW4gd2l0aCwgdGhlbiwgc2luY2UgSGFubmliYWwncyB2aWN0b3J5IGhhZCBtYWRlIGhpcyBzb2xkaWVycyB2ZXJ5IGJvbGQgYW5kIGNhcmVsZXNzLCBNYXJjZWxsdXMgc2V0IHVwb24gdGhlbSBhcyB0aGV5IHN0cmFnZ2xlZCBmcm9tIHRoZWlyIGNhbXAgYW5kIG92ZXJyYW4gdGhlIGNvdW50cnksIGN1dCB0aGVtIGRvd24sIGFuZCB0aHVzIHNsb3dseSBkaW1pbmlzaGVkIHRoZWlyIGZvcmNlczsgc2Vjb25kbHksIGhlIGJyb3VnaHQgYWlkIHRvIE5lYXBvbGlzIGFuZCBOb2xhLiAgSW4gTmVhcG9saXMgaGUgbWVyZWx5IGNvbmZpcm1lZCB0aGUgbWluZHMgb2YgdGhlIGNpdGl6ZW5zLCB3aG8gd2VyZSBvZiB0aGVpciBvd24gY2hvaWNlIHN0ZWFkZmFzdCBmcmllbmRzIG9mIFJvbWU7IGJ1dCBvbiBlbnRlcmluZyBOb2xhLCBoZSBmb3VuZCBhIHN0YXRlIG9mIGRpc2NvcmQsIHRoZSBzZW5hdGUgYmVpbmcgdW5hYmxlIHRvIHJlZ3VsYXRlIGFuZCBtYW5hZ2UgdGhlIHBlb3BsZSwgd2hpY2ggZmF2b3VyZWQgSGFubmliYWwuICAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3YXMgYSBtYW4gaW4gdGhlIGNpdHkgb2YgdGhlIGhpZ2hlc3QgYmlydGggYW5kIG9mIGlsbHVzdHJpb3VzIHZhbG91ciwgd2hvc2UgbmFtZSB3YXMgQmFudGl1cy4gIFRoaXMgbWFuIGhhZCBmb3VnaHQgd2l0aCBjb25zcGljdW91cyBicmF2ZXJ5IGF0IENhbm5hZSwgYW5kIGhhZCBzbGFpbiBtYW55IG9mIHRoZSBDYXJ0aGFnaW5pYW5zLCBhbmQgd2hlbiBoZSB3YXMgYXQgbGFzdCBmb3VuZCBhbW9uZyB0aGUgZGVhZCB3aXRoIGhpcyBib2R5IGZ1bGwgb2YgbWlzc2lsZXMsIEhhbm5pYmFsIHdhcyBzdHJ1Y2sgd2l0aCBhZG1pcmF0aW9uIG9mIGhpbSwgYW5kIG5vdCBvbmx5IGxldCBoaW0gZ28gd2l0aG91dCBhIHJhbnNvbSwgYnV0IGFjdHVhbGx5IGFkZGVkIGdpZnRzLCBhbmQgbWFkZSBoaW0gaGlzIGZyaWVuZCBhbmQgZ3Vlc3QuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHJldHVybiBmb3IgdGhpcyBmYXZvdXIgdGhlbiwgQmFudGl1cyB3YXMgb25lIG9mIHRob3NlIHdobyBlYWdlcmx5IGZhdm91cmVkIHRoZSBjYXVzZSBvZiBIYW5uaWJhbCwgYW5kIHdhcyB1c2luZyBoaXMgZ3JlYXQgaW5mbHVlbmNlIHRvIGJyaW5nIHRoZSBwZW9wbGUgdG8gYSByZXZvbHQuICAgTWFyY2VsbHVzIHRob3VnaHQgaXQgd3JvbmcgdG8gcHV0IHRvIGRlYXRoIGEgbWFuIHNvIGlsbHVzdHJpb3VzIGluIGhpcyBnb29kIGZvcnR1bmUgd2hvIGhhZCB0YWtlbiBwYXJ0IHdpdGggdGhlIFJvbWFucyBpbiB0aGVpciBncmVhdGVzdCBjb25mbGljdHMsIGFuZCwgYmVzaWRlcyBoaXMgbmF0dXJhbCBraW5kbGluZXNzLCBoZSBoYWQgYW4gYWRkcmVzcyB0aGF0IHdhcyBsaWtlbHkgdG8gd2luIG92ZXIgYSBjaGFyYWN0ZXIgd2hvc2UgYW1iaXRpb24gd2FzIGZvciBob25vdXIuICBPbmUgZGF5LCB0aGVyZWZvcmUsIHdoZW4gQmFudGl1cyBzYWx1dGVkIGhpbSwgaGUgYXNrZWQgaGltIHdobyBoZSB3YXMsIG5vdCB0aGF0IGhlIGhhZCBub3Qga25vd24gaGltIGZvciBzb21lIHRpbWUsIGJ1dCBzZWVraW5nIG9jY2FzaW9uIGFuZCBleGN1c2UgZm9yIGNvbnZlcnNhdGlvbiB3aXRoIGhpbS4gICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIGhlIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGFtIEx1Y2l1cyBCYW50aXVzLDwvcT4gTWFyY2VsbHVzLCBhcyBpZiBhc3RvbmlzaGVkIGFuZCBkZWxpZ2h0ZWQsIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0ISBhcmUgeW91IHRoYXQgQmFudGl1cyB3aG8gaXMgbW9yZSB0YWxrZWQgb2YgaW4gUm9tZSB0aGFuIGFueSBvZiB0aG9zZSB3aG8gZm91Z2h0IGF0IENhbm5hZSwgYXMgdGhlIG9ubHkgbWFuIHdobyBkaWQgbm90IGFiYW5kb24gUGF1bHVzIEFlbWlsaXVzIHRoZSBjb25zdWwsIGJ1dCBlbmNvdW50ZXJlZCBhbmQgcmVjZWl2ZWQgaW4gaGlzIG93biBib2R5IG1vc3Qgb2YgdGhlIG1pc3NpbGVzIGFpbWVkIGF0IGhpbT88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEJhbnRpdXMgYXNzZW50ZWQgYW5kIHNob3dlZCBoaW0gc29tZSBvZiBoaXMgc2NhcnMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHksIHRoZW4sPC9xPiBzYWlkIE1hcmNlbGx1cywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndoZW4geW91IGJlYXIgc3VjaCBtYXJrcyBvZiB5b3VyIGZyaWVuZHNoaXAgdG93YXJkcyB1cywgZGlkIHlvdSBub3QgY29tZSB0byB1cyBhdCBvbmNlPyAgIENhbiBpdCBiZSB0aGF0IHlvdSB0aGluayB1cyBsb2F0aCB0byByZXF1aXRlIHZhbG91ciBpbiBmcmllbmRzIHdobyBhcmUgaG9ub3VyZWQgZXZlbiBhbW9uZyBvdXIgZW5lbWllcz88L3E+IFRoZXNlIGtpbmRseSBncmVldGluZ3MgaGUgZm9sbG93ZWQgdXAgYnkgbWFraW5nIGhpbSBwcmVzZW50cyBvZiBhIHdhciBob3JzZSBhbmQgZml2ZSBodW5kcmVkIGRyYWNobWFzIGluIHNpbHZlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBCYW50aXVzIHdhcyBhIG1vc3Qgc3RlYWRmYXN0IHBhcnRpc2FuIGFuZCBhbGx5IG9mIE1hcmNlbGx1cywgYW5kIGEgbW9zdCBmb3JtaWRhYmxlIGRlbm91bmNlciBhbmQgYWNjdXNlciBvZiB0aG9zZSB3aG8gYmVsb25nZWQgdG8gdGhlIG9wcG9zaXRlIHBhcnR5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzdG9yeSBvZiBMdWNpdXMgQmFudGl1cyBpcyB0b2xkIGJ5IExpdnkgYWxzbyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjMuMTUuNyIgdmFsaWQ9InllcyI+eHhpaWkuIDE1LCA3LTE2LCAxPC9iaWJsPikuPC9ub3RlPiBUaGVzZSB3ZXJlIG1hbnksIGFuZCB0aGV5IHB1cnBvc2VkLCB3aGVuIHRoZSAgUm9tYW5zIHdlbnQgb3V0IGFnYWluc3QgIHRoZSBlbmVteSwgdG8gcGx1bmRlciB0aGVpciBiYWdnYWdlLiAgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TWFyY2VsbHVzIHRoZXJlZm9yZSBkcmV3IHVwIGhpcyBmb3JjZXMgaW5zaWRlIHRoZSBjaXR5LCBzdGF0aW9uZWQgaGlzIGJhZ2dhZ2UtdHJhaW5zIG5lYXIgdGhlIGdhdGVzLCBhbmQgaXNzdWVkIGFuIGVkaWN0IGZvcmJpZGRpbmcgdGhlIG1lbiBvZiBOb2xhIHRvIGNvbWUgbmVhciB0aGUgY2l0eSB3YWxscy4gIENvbnNlcXVlbnRseSB0aGVyZSB3ZXJlIG5vIGFybWVkIG1lbiB0byBiZSBzZWVuLCBhbmQgSGFubmliYWwgd2FzIHRodXMgaW5kdWNlZCB0byBsZWFkIHVwIGhpcyBmb3JjZXMgaW4gc29tZSBkaXNvcmRlciwgc3VwcG9zaW5nIHRoZSBjaXR5IHRvIGJlIGluIGEgdHVtdWx0LiAgIEJ1dCBhdCB0aGlzIGp1bmN0dXJlIE1hcmNlbGx1cyBvcmRlcmVkIHRoZSBnYXRlIHdoZXJlIGhlIHN0b29kIHRvIGJlIHRocm93biBvcGVuLCBhbmQgbWFyY2hlZCBvdXQsIGhhdmluZyB3aXRoIGhpbSB0aGUgZmxvd2VyIG9mIGhpcyBob3JzZW1lbiwgYW5kIGNoYXJnaW5nIGRpcmVjdGx5IGRvd24gdXBvbiB0aGUgZW5lbXkgam9pbmVkIGJhdHRsZSB3aXRoIHRoZW0uICAgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgYSBsaXR0bGUgaGlzIGZvb3RtZW4gYWxzbywgYnkgYW5vdGhlciBnYXRlLCBhZHZhbmNlZCB0byB0aGUgYXR0YWNrIG9uIHRoZSBydW4gYW5kIHdpdGggc2hvdXRzLiAgQW5kIHN0aWxsIGFnYWluLCB3aGlsZSBIYW5uaWJhbCB3YXMgZGl2aWRpbmcgaGlzIGZvcmNlcyB0byBtZWV0IHRoZXNlLCB0aGUgdGhpcmQgZ2F0ZSB3YXMgdGhyb3duIG9wZW4sIGFuZCB0aHJvdWdoIGl0IHRoZSByZXN0IHJ1c2hlZCBmb3J0aCBhbmQgZmVsbCB1cG9uIHRoZWlyIGVuZW1pZXMgb24gZXZlcnkgc2lkZS4gVGhlc2Ugd2VyZSBkaXNtYXllZCBieSB0aGUgdW5leHBlY3RlZCBvbnNldCwgYW5kIG1hZGUgYSBwb29yIGRlZmVuY2UgYWdhaW5zdCB0aG9zZSB3aXRoIHdob20gdGhleSB3ZXJlIGFscmVhZHkgZW5nYWdlZCBiZWNhdXNlIG9mIHRob3NlIHdobyBjaGFyZ2VkIHVwb24gdGhlbSBsYXRlci4gICBIZXJlIGZvciB0aGUgZmlyc3QgdGltZSB0aGUgc29sZGllcnMgb2YgSGFubmliYWwgZ2F2ZSB3YXkgYmVmb3JlIHRoZSBSb21hbnMsIGJlaW5nIGJlYXRlbiBiYWNrIHRvIHRoZWlyIGNhbXAgd2l0aCBtdWNoIHNsYXVnaHRlciBhbmQgbWFueSB3b3VuZHMuICAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgc2FpZCB0aGF0IG1vcmUgdGhhbiBmaXZlIHRob3VzYW5kIG9mIHRoZW0gd2VyZSBzbGFpbiwgd2hpbGUgdGhleSBraWxsZWQgbm90IG1vcmUgdGhhbiBmaXZlIGh1bmRyZWQgb2YgdGhlIFJvbWFucy4gIExpdnksIGhvd2V2ZXIsIHdpbGwgbm90IGFmZmlybTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+Vml4IGVxdWlkZW0gYXVzaW0gYWRmaXJtYXJlLDwvZm9yZWlnbj4gCiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIzLjE2LjE1IiB2YWxpZD0ieWVzIj54eGlpaS4gMTYsIDE1PC9iaWJsPi48L25vdGU+IHRoYXQgdGhlIHZpY3Rvcnkgd2FzIHNvIGdyZWF0IG5vciB0aGF0IHNvIG1hbnkgb2YgdGhlIGVuZW15IHdlcmUgc2xhaW4sIGJ1dCBzYXlzIHRoYXQgdGhpcyBiYXR0bGUgYnJvdWdodCBncmVhdCByZW5vd24gdG8gTWFyY2VsbHVzIGFuZCB0byB0aGUgUm9tYW5zIGEgd29uZGVyZnVsIGNvdXJhZ2UgYWZ0ZXIgdGhlaXIgZGlzYXN0ZXJzLiAgIFRoZXkgZmVsdCB0aGF0IHRoZXkgd2VyZSBjb250ZW5kaW5nLCBub3QgYWdhaW5zdCBhIHJlc2lzdGxlc3MgYW5kIHVuY29ucXVlcmFibGUgZm9lLCBidXQgYWdhaW5zdCBvbmUgd2hvIHdhcyBsaWFibGUsIGxpa2UgdGhlbXNlbHZlcywgdG8gZGVmZWF0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBCYW50aXVzIHdhcyBhIG1vc3Qgc3RlYWRmYXN0IHBhcnRpc2FuIGFuZCBhbGx5IG9mIE1hcmNlbGx1cywgYW5kIGEgbW9zdCBmb3JtaWRhYmxlIGRlbm91bmNlciBhbmQgYWNjdXNlciBvZiB0aG9zZSB3aG8gYmVsb25nZWQgdG8gdGhlIG9wcG9zaXRlIHBhcnR5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHN0b3J5IG9mIEx1Y2l1cyBCYW50aXVzIGlzIHRvbGQgYnkgTGl2eSBhbHNvICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIzLjE1LjciIHZhbGlkPSJ5ZXMiPnh4aWlpLiAxNSwgNy0xNiwgMTwvYmlibD4pLjwvbm90ZT4gVGhlc2Ugd2VyZSBtYW55LCBhbmQgdGhleSBwdXJwb3NlZCwgd2hlbiB0aGUgIFJvbWFucyB3ZW50IG91dCBhZ2FpbnN0ICB0aGUgZW5lbXksIHRvIHBsdW5kZXIgdGhlaXIgYmFnZ2FnZS4gIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyMy4xNS43IiB2YWxpZD0ieWVzIj54eGlpaS4gMTUsIDctMTYsIDE8L2JpYmw+KS48L3RyYW5zbGF0aW9uPg=="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1hcmNlbGx1cyB0aGVyZWZvcmUgZHJldyB1cCBoaXMgZm9yY2VzIGluc2lkZSB0aGUgY2l0eSwgc3RhdGlvbmVkIGhpcyBiYWdnYWdlLXRyYWlucyBuZWFyIHRoZSBnYXRlcywgYW5kIGlzc3VlZCBhbiBlZGljdCBmb3JiaWRkaW5nIHRoZSBtZW4gb2YgTm9sYSB0byBjb21lIG5lYXIgdGhlIGNpdHkgd2FsbHMuICBDb25zZXF1ZW50bHkgdGhlcmUgd2VyZSBubyBhcm1lZCBtZW4gdG8gYmUgc2VlbiwgYW5kIEhhbm5pYmFsIHdhcyB0aHVzIGluZHVjZWQgdG8gbGVhZCB1cCBoaXMgZm9yY2VzIGluIHNvbWUgZGlzb3JkZXIsIHN1cHBvc2luZyB0aGUgY2l0eSB0byBiZSBpbiBhIHR1bXVsdC4gICBCdXQgYXQgdGhpcyBqdW5jdHVyZSBNYXJjZWxsdXMgb3JkZXJlZCB0aGUgZ2F0ZSB3aGVyZSBoZSBzdG9vZCB0byBiZSB0aHJvd24gb3BlbiwgYW5kIG1hcmNoZWQgb3V0LCBoYXZpbmcgd2l0aCBoaW0gdGhlIGZsb3dlciBvZiBoaXMgaG9yc2VtZW4sIGFuZCBjaGFyZ2luZyBkaXJlY3RseSBkb3duIHVwb24gdGhlIGVuZW15IGpvaW5lZCBiYXR0bGUgd2l0aCB0aGVtLiAgIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGEgbGl0dGxlIGhpcyBmb290bWVuIGFsc28sIGJ5IGFub3RoZXIgZ2F0ZSwgYWR2YW5jZWQgdG8gdGhlIGF0dGFjayBvbiB0aGUgcnVuIGFuZCB3aXRoIHNob3V0cy4gIEFuZCBzdGlsbCBhZ2Fpbiwgd2hpbGUgSGFubmliYWwgd2FzIGRpdmlkaW5nIGhpcyBmb3JjZXMgdG8gbWVldCB0aGVzZSwgdGhlIHRoaXJkIGdhdGUgd2FzIHRocm93biBvcGVuLCBhbmQgdGhyb3VnaCBpdCB0aGUgcmVzdCBydXNoZWQgZm9ydGggYW5kIGZlbGwgdXBvbiB0aGVpciBlbmVtaWVzIG9uIGV2ZXJ5IHNpZGUuIFRoZXNlIHdlcmUgZGlzbWF5ZWQgYnkgdGhlIHVuZXhwZWN0ZWQgb25zZXQsIGFuZCBtYWRlIGEgcG9vciBkZWZlbmNlIGFnYWluc3QgdGhvc2Ugd2l0aCB3aG9tIHRoZXkgd2VyZSBhbHJlYWR5IGVuZ2FnZWQgYmVjYXVzZSBvZiB0aG9zZSB3aG8gY2hhcmdlZCB1cG9uIHRoZW0gbGF0ZXIuICAgSGVyZSBmb3IgdGhlIGZpcnN0IHRpbWUgdGhlIHNvbGRpZXJzIG9mIEhhbm5pYmFsIGdhdmUgd2F5IGJlZm9yZSB0aGUgUm9tYW5zLCBiZWluZyBiZWF0ZW4gYmFjayB0byB0aGVpciBjYW1wIHdpdGggbXVjaCBzbGF1Z2h0ZXIgYW5kIG1hbnkgd291bmRzLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyBzYWlkIHRoYXQgbW9yZSB0aGFuIGZpdmUgdGhvdXNhbmQgb2YgdGhlbSB3ZXJlIHNsYWluLCB3aGlsZSB0aGV5IGtpbGxlZCBub3QgbW9yZSB0aGFuIGZpdmUgaHVuZHJlZCBvZiB0aGUgUm9tYW5zLiAgTGl2eSwgaG93ZXZlciwgd2lsbCBub3QgYWZmaXJtPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Vml4IGVxdWlkZW0gYXVzaW0gYWRmaXJtYXJlLDwvZm9yZWlnbj4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjMuMTYuMTUiIHZhbGlkPSJ5ZXMiPnh4aWlpLiAxNiwgMTU8L2JpYmw+Ljwvbm90ZT4gdGhhdCB0aGUgdmljdG9yeSB3YXMgc28gZ3JlYXQgbm9yIHRoYXQgc28gbWFueSBvZiB0aGUgZW5lbXkgd2VyZSBzbGFpbiwgYnV0IHNheXMgdGhhdCB0aGlzIGJhdHRsZSBicm91Z2h0IGdyZWF0IHJlbm93biB0byBNYXJjZWxsdXMgYW5kIHRvIHRoZSBSb21hbnMgYSB3b25kZXJmdWwgY291cmFnZSBhZnRlciB0aGVpciBkaXNhc3RlcnMuICAgVGhleSBmZWx0IHRoYXQgdGhleSB3ZXJlIGNvbnRlbmRpbmcsIG5vdCBhZ2FpbnN0IGEgcmVzaXN0bGVzcyBhbmQgdW5jb25xdWVyYWJsZSBmb2UsIGJ1dCBhZ2FpbnN0IG9uZSB3aG8gd2FzIGxpYWJsZSwgbGlrZSB0aGVtc2VsdmVzLCB0byBkZWZlYXQuCgkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlZpeCBlcXVpZGVtIGF1c2ltIGFkZmlybWFyZSw8L2ZvcmVpZ24+IAogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIzLjE2LjE1IiB2YWxpZD0ieWVzIj54eGlpaS4gMTYsIDE1PC9iaWJsPi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyByZWFzb24sIG9uIHRoZSBkZWF0aCBvZiBvbmUgb2YgdGhlIGNvbnN1bHMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+THVjaXVzIFBvc3R1bWl1cywgd2hvIHdhcyB1dHRlcmx5IGRlZmVhdGVkIGFuZCBzbGFpbiBieSB0aGUgR2F1bHMgaW4gMjE1IEIuQy4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIzLjI0LjEiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWlpLiAyNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhlIHBlb3BsZSBjYWxsZWQgTWFyY2VsbHVzIGhvbWUgdG8gc3VjY2VlZCBoaW0sIGFuZCwgaW4gc3BpdGUgb2YgdGhlIG1hZ2lzdHJhdGVzLCBwb3N0cG9uZWQgdGhlIGVsZWN0aW9uIHVudGlsIGhpcyByZXR1cm4gZnJvbSB0aGUgYXJteS4gICBIZSB3YXMgbWFkZSBjb25zdWwgYnkgYSB1bmFuaW1vdXMgdm90ZSwgYnV0IHRoZXJlIHdhcyBhIHBlYWwgb2YgdGh1bmRlciBhdCB0aGUgdGltZSwgYW5kIHNpbmNlIHRoZSBhdWd1cnMgY29uc2lkZXJlZCB0aGUgb21lbiB1bnByb3BpdGlvdXMsIGJ1dCBoZXNpdGF0ZWQgdG8gbWFrZSBvcGVuIG9wcG9zaXRpb24gZm9yIGZlYXIgb2YgdGhlIHBlb3BsZSwgaGUgcmVub3VuY2VkIHRoZSBvZmZpY2Ugb2YgaGltc2VsZi4gICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBkaWQgbm90LCBob3dldmVyLCBsYXkgYXNpZGUgaGlzIG1pbGl0YXJ5IGNvbW1hbmQsIGJ1dCBoYXZpbmcgYmVlbiBkZWNsYXJlZCBwcm9jb25zdWwsIGhlIHJldHVybmVkIHRvIGhpcyBhcm15IGF0IE5vbGEgYW5kIHByb2NlZWRlZCB0byBwdW5pc2ggdGhvc2Ugd2hvIGhhZCBlc3BvdXNlZCB0aGUgY2F1c2Ugb2YgdGhlIENhcnRoYWdpbmlhbi4gQW5kIHdoZW4gSGFubmliYWwgY2FtZSBzd2lmdGx5IHRvIHRoZWlyIGFpZCBhZ2FpbnN0IGhpbSwgYW5kIGNoYWxsZW5nZWQgaGltIHRvIGEgcGl0Y2hlZCBiYXR0bGUsIE1hcmNlbGx1cyBkZWNsaW5lZCBhbiBlbmdhZ2VtZW50OyBidXQgYXMgc29vbiBhcyBoaXMgYWR2ZXJzYXJ5IGhhZCBzZXQgdGhlIGdyZWF0ZXIgcGFydCBvZiBoaXMgYXJteSB0byBwbHVuZGVyaW5nIGFuZCB3YXMgbm8gbG9uZ2VyIGV4cGVjdGluZyBhIGJhdHRsZSwgaGUgbGVkIGhpcyBmb3JjZXMgb3V0IGFnYWluc3QgaGltLiBIZSBoYWQgZGlzdHJpYnV0ZWQgbG9uZyBzcGVhcnMgdXNlZCBpbiBuYXZhbCBjb21iYXRzIGFtb25nIGhpcyBpbmZhbnRyeSwgYW5kIHRhdWdodCB0aGVtIHRvIHdhdGNoIHRoZWlyIG9wcG9ydHVuaXR5IGFuZCBzbWl0ZSB0aGUgQ2FydGhhZ2luaWFucyBhdCBsb25nIHJhbmdlOyB0aGVzZSB3ZXJlIG5vdCBqYXZlbGluZWVycywgYnV0IHVzZWQgc2hvcnQgc3BlYXJzIGluIGhhbmQgdG8gaGFuZCBmaWdodGluZy4gIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc2VlbXMgdG8gaGF2ZSBiZWVuIHRoZSByZWFzb24gd2h5IGF0IHRoYXQgdGltZSBhbGwgdGhlIENhcnRoYWdpbmlhbnMgd2hvIHdlcmUgZW5nYWdlZCB0dXJuZWQgdGhlaXIgYmFja3MgdXBvbiB0aGUgUm9tYW5zIGFuZCB0b29rIHRvIHVuaGVzaXRhdGluZyBmbGlnaHQsIGxvc2luZyBmaXZlIHRob3VzYW5kIG9mIHRoZWlyIG51bWJlciBzbGFpbiwgYW5kIHNpeCBodW5kcmVkIHByaXNvbmVyczsgZm91ciBvZiB0aGVpciBlbGVwaGFudHMgYWxzbyB3ZXJlIGtpbGxlZCwgYW5kIHR3byB0YWtlbiBhbGl2ZS4gIEJ1dCB3aGF0IHdhcyBtb3N0IGltcG9ydGFudCwgb24gdGhlIHRoaXJkIGRheSBhZnRlciB0aGUgYmF0dGxlLCBtb3JlIHRoYW4gdGhyZWUgaHVuZHJlZCBob3JzZW1lbiwgY29tcG9zZWQgb2YgU3BhbmlhcmRzIGFuZCBOdW1pZGlhbnMsIGRlc2VydGVkIGZyb20gdGhlbS4gIFN1Y2ggYSBkaXNhc3RlciBoYWQgbm90IGhhcHBlbmVkIGJlZm9yZSB0aGlzIHRvIEhhbm5pYmFsLCBidXQgYSBiYXJiYXJpYW4gYXJteSBtYWRlIHVwIG9mIHZhcmllZCBhbmQgZGlzc2ltaWxhciBwZW9wbGVzIGhhZCBmb3IgYSB2ZXJ5IGxvbmcgdGltZSBiZWVuIGtlcHQgYnkgaGltIGluIHBlcmZlY3QgaGFybW9ueS4gIFRoZXNlIGRlc2VydGVycywgdGhlbiwgcmVtYWluZWQgZW50aXJlbHkgZmFpdGhmdWwgYm90aCB0byBNYXJjZWxsdXMgaGltc2VsZiwgYW5kIHRvIHRoZSBnZW5lcmFscyB3aG8gc3VjY2VlZGVkIGhpbS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjMuNDYuMSIgdmFsaWQ9InllcyI+TGl2eSwgeHhpaWkuIDQ2LCAxLTcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uLCBvbiB0aGUgZGVhdGggb2Ygb25lIG9mIHRoZSBjb25zdWxzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+THVjaXVzIFBvc3R1bWl1cywgd2hvIHdhcyB1dHRlcmx5IGRlZmVhdGVkIGFuZCBzbGFpbiBieSB0aGUgR2F1bHMgaW4gMjE1IEIuQy4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjMuMjQuMSIgdmFsaWQ9InllcyI+TGl2eSwgeHhpaWkuIDI0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGUgcGVvcGxlIGNhbGxlZCBNYXJjZWxsdXMgaG9tZSB0byBzdWNjZWVkIGhpbSwgYW5kLCBpbiBzcGl0ZSBvZiB0aGUgbWFnaXN0cmF0ZXMsIHBvc3Rwb25lZCB0aGUgZWxlY3Rpb24gdW50aWwgaGlzIHJldHVybiBmcm9tIHRoZSBhcm15LiAgIEhlIHdhcyBtYWRlIGNvbnN1bCBieSBhIHVuYW5pbW91cyB2b3RlLCBidXQgdGhlcmUgd2FzIGEgcGVhbCBvZiB0aHVuZGVyIGF0IHRoZSB0aW1lLCBhbmQgc2luY2UgdGhlIGF1Z3VycyBjb25zaWRlcmVkIHRoZSBvbWVuIHVucHJvcGl0aW91cywgYnV0IGhlc2l0YXRlZCB0byBtYWtlIG9wZW4gb3Bwb3NpdGlvbiBmb3IgZmVhciBvZiB0aGUgcGVvcGxlLCBoZSByZW5vdW5jZWQgdGhlIG9mZmljZSBvZiBoaW1zZWxmLiAgIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyMy4yNC4xIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eGlpaS4gMjQuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGRpZCBub3QsIGhvd2V2ZXIsIGxheSBhc2lkZSBoaXMgbWlsaXRhcnkgY29tbWFuZCwgYnV0IGhhdmluZyBiZWVuIGRlY2xhcmVkIHByb2NvbnN1bCwgaGUgcmV0dXJuZWQgdG8gaGlzIGFybXkgYXQgTm9sYSBhbmQgcHJvY2VlZGVkIHRvIHB1bmlzaCB0aG9zZSB3aG8gaGFkIGVzcG91c2VkIHRoZSBjYXVzZSBvZiB0aGUgQ2FydGhhZ2luaWFuLiBBbmQgd2hlbiBIYW5uaWJhbCBjYW1lIHN3aWZ0bHkgdG8gdGhlaXIgYWlkIGFnYWluc3QgaGltLCBhbmQgY2hhbGxlbmdlZCBoaW0gdG8gYSBwaXRjaGVkIGJhdHRsZSwgTWFyY2VsbHVzIGRlY2xpbmVkIGFuIGVuZ2FnZW1lbnQ7IGJ1dCBhcyBzb29uIGFzIGhpcyBhZHZlcnNhcnkgaGFkIHNldCB0aGUgZ3JlYXRlciBwYXJ0IG9mIGhpcyBhcm15IHRvIHBsdW5kZXJpbmcgYW5kIHdhcyBubyBsb25nZXIgZXhwZWN0aW5nIGEgYmF0dGxlLCBoZSBsZWQgaGlzIGZvcmNlcyBvdXQgYWdhaW5zdCBoaW0uIEhlIGhhZCBkaXN0cmlidXRlZCBsb25nIHNwZWFycyB1c2VkIGluIG5hdmFsIGNvbWJhdHMgYW1vbmcgaGlzIGluZmFudHJ5LCBhbmQgdGF1Z2h0IHRoZW0gdG8gd2F0Y2ggdGhlaXIgb3Bwb3J0dW5pdHkgYW5kIHNtaXRlIHRoZSBDYXJ0aGFnaW5pYW5zIGF0IGxvbmcgcmFuZ2U7IHRoZXNlIHdlcmUgbm90IGphdmVsaW5lZXJzLCBidXQgdXNlZCBzaG9ydCBzcGVhcnMgaW4gaGFuZCB0byBoYW5kIGZpZ2h0aW5nLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc2VlbXMgdG8gaGF2ZSBiZWVuIHRoZSByZWFzb24gd2h5IGF0IHRoYXQgdGltZSBhbGwgdGhlIENhcnRoYWdpbmlhbnMgd2hvIHdlcmUgZW5nYWdlZCB0dXJuZWQgdGhlaXIgYmFja3MgdXBvbiB0aGUgUm9tYW5zIGFuZCB0b29rIHRvIHVuaGVzaXRhdGluZyBmbGlnaHQsIGxvc2luZyBmaXZlIHRob3VzYW5kIG9mIHRoZWlyIG51bWJlciBzbGFpbiwgYW5kIHNpeCBodW5kcmVkIHByaXNvbmVyczsgZm91ciBvZiB0aGVpciBlbGVwaGFudHMgYWxzbyB3ZXJlIGtpbGxlZCwgYW5kIHR3byB0YWtlbiBhbGl2ZS4gIEJ1dCB3aGF0IHdhcyBtb3N0IGltcG9ydGFudCwgb24gdGhlIHRoaXJkIGRheSBhZnRlciB0aGUgYmF0dGxlLCBtb3JlIHRoYW4gdGhyZWUgaHVuZHJlZCBob3JzZW1lbiwgY29tcG9zZWQgb2YgU3BhbmlhcmRzIGFuZCBOdW1pZGlhbnMsIGRlc2VydGVkIGZyb20gdGhlbS4gIFN1Y2ggYSBkaXNhc3RlciBoYWQgbm90IGhhcHBlbmVkIGJlZm9yZSB0aGlzIHRvIEhhbm5pYmFsLCBidXQgYSBiYXJiYXJpYW4gYXJteSBtYWRlIHVwIG9mIHZhcmllZCBhbmQgZGlzc2ltaWxhciBwZW9wbGVzIGhhZCBmb3IgYSB2ZXJ5IGxvbmcgdGltZSBiZWVuIGtlcHQgYnkgaGltIGluIHBlcmZlY3QgaGFybW9ueS4gIFRoZXNlIGRlc2VydGVycywgdGhlbiwgcmVtYWluZWQgZW50aXJlbHkgZmFpdGhmdWwgYm90aCB0byBNYXJjZWxsdXMgaGltc2VsZiwgYW5kIHRvIHRoZSBnZW5lcmFscyB3aG8gc3VjY2VlZGVkIGhpbS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIzLjQ2LjEiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWlpLiA0NiwgMS03LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIzLjQ2LjEiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWlpLiA0NiwgMS03LjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBNYXJjZWxsdXMsIGhhdmluZyBiZWVuIGFwcG9pbnRlZCBjb25zdWwgZm9yIHRoZSB0aGlyZCB0aW1lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDIxNCBCLkMuIEZhYml1cyBNYXhpbXVzIHdhcyBoaXMgY29sbGVhZ3VlLjwvbm90ZT4gc2FpbGVkIHRvIFNpY2lseS4gRm9yIEhhbm5pYmFsJ3Mgc3VjY2Vzc2VzIGluIHRoZSB3YXIgaGFkIGVuY291cmFnZWQgdGhlIENhcnRoYWdpbmlhbnMgdG8gYXR0ZW1wdCBhbmV3IHRoZSBjb25xdWVzdCBvZiB0aGUgaXNsYW5kLCBlc3BlY2lhbGx5IG5vdyB0aGF0IFN5cmFjdXNlIHdhcyBpbiBjb25mdXNpb24gYWZ0ZXIgdGhlIGRlYXRoIG9mIHRoZSB0eXJhbnQgSGllcm9ueW11cy4gIEZvciB0aGlzIHJlYXNvbiB0aGUgUm9tYW5zIGFsc28gaGFkIHByZXZpb3VzbHkgc2VudCBhIGZvcmNlIHRoaXRoZXIgdW5kZXIgdGhlIGNvbW1hbmQgb2YgQXBwaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BcyBNYXJjZWxsdXMgdG9vayBvdmVyIHRoaXMgZm9yY2UsIGhlIHdhcyBiZXNldCBieSBtYW55IFJvbWFucyB3aG8gd2VyZSBpbnZvbHZlZCBpbiBhIGNhbGFtaXR5IG5vdyB0byBiZSBkZXNjcmliZWQuIE9mIHRob3NlIHdobyBoYWQgYmVlbiBkcmF3biB1cCBhZ2FpbnN0IEhhbm5pYmFsIGF0IENhbm5hZSwgc29tZSBoYWQgZmxlZCwgYW5kIG90aGVycyBoYWQgYmVlbiB0YWtlbiBhbGl2ZSwgYW5kIGluIHN1Y2ggbnVtYmVycyB0aGF0IGl0IHdhcyB0aG91Z2h0IHRoZSBSb21hbnMgaGFkIG5vdCBldmVuIG1lbiBlbm91Z2ggbGVmdCB0byBkZWZlbmQgdGhlIHdhbGxzIG9mIHRoZWlyIGNpdHkuICAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IHNvIG11Y2ggb2YgdGhlaXIgaGlnaCBzcGlyaXQgYW5kIGhhdWdodGluZXNzIHJlbWFpbmVkIHRoYXQsIGFsdGhvdWdoIEhhbm5pYmFsIG9mZmVyZWQgdG8gcmVzdG9yZSBoaXMgcHJpc29uZXJzIG9mIHdhciBmb3IgYSBzbGlnaHQgcmFuc29tLCB0aGV5IHZvdGVkIG5vdCB0byByZWNlaXZlIHRoZW0sIGJ1dCBzdWZmZXJlZCBzb21lIG9mIHRoZW0gdG8gYmUgcHV0IHRvIGRlYXRoIGFuZCBvdGhlcnMgdG8gYmUgc29sZCBvdXQgb2YgSXRhbHk7IGFuZCBhcyBmb3IgdGhlIG11bHRpdHVkZSB3aG8gaGFkIHNhdmVkIHRoZW1zZWx2ZXMgYnkgZmxpZ2h0LCB0aGV5IHNlbnQgdGhlbSB0byBTaWNpbHksIG9yZGVyaW5nIHRoZW0gbm90IHRvIHNldCBmb290IGluIEl0YWx5IGFzIGxvbmcgYXMgdGhlIHdhciBhZ2FpbnN0IEhhbm5pYmFsIGxhc3RlZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjMuMjUuNyIgdmFsaWQ9InllcyI+TGl2eSwgeHhpaWkuIDI1LCA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdlcmUgdGhlIG1lbiB3aG8sIG5vdyB0aGF0IE1hcmNlbGx1cyB3YXMgY29tZSwgYmVzZXQgaGltIGluIHRocm9uZ3MsIGFuZCB0aHJvd2luZyB0aGVtc2VsdmVzIG9uIHRoZSBncm91bmQgYmVmb3JlIGhpbSwgYmVnZ2VkIHdpdGggbWFueSBjcmllcyBhbmQgdGVhcnMgZm9yIGFuIGFzc2lnbm1lbnQgdG8gaG9ub3VyYWJsZSBtaWxpdGFyeSBzZXJ2aWNlLCBwcm9taXNpbmcgdG8gc2hvdyBieSB0aGVpciBhY3Rpb25zIHRoYXQgdGhlaXIgZm9ybWVyIGRlZmVhdCBoYWQgYmVlbiBkdWUgdG8gc29tZSBncmVhdCBtaXNmb3J0dW5lIHJhdGhlciB0aGFuICAgdG8gY293YXJkaWNlLiAgTWFyY2VsbHVzLCB0aGVyZWZvcmUsIHRha2luZyBwaXR5IG9uIHRoZW0sIHdyb3RlIHRvIHRoZSBzZW5hdGUgYXNraW5nIHBlcm1pc3Npb24gdG8gZmlsbCB1cCB0aGUgZGVmaWNpZW5jaWVzIGluIGhpcyBhcm15IGZyb20gdGltZSB0byB0aW1lIHdpdGggdGhlc2UgbWVuLiAgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIG11Y2ggZGlzY3Vzc2lvbiB0aGUgc2VuYXRlIGRlY2xhcmVkIGl0cyBvcGluaW9uIHRoYXQgdGhlIFJvbWFuIGNvbW1vbndlYWx0aCBoYWQgbm8gbmVlZCBvZiBtZW4gd2hvIHdlcmUgY293YXJkczsgaWYsIGhvd2V2ZXIsIGFzIGl0IGFwcGVhcmVkLCBNYXJjZWxsdXMgd2lzaGVkIHRvIHVzZSB0aGVtLCB0aGV5IHdlcmUgdG8gcmVjZWl2ZSBmcm9tIHRoZWlyIGNvbW1hbmRlciBub25lIG9mIHRoZSBjdXN0b21hcnkgY3Jvd25zIG9yIHByaXplcyBmb3IgdmFsb3VyLiAgVGhpcyBkZWNyZWUgdmV4ZWQgTWFyY2VsbHVzLCBhbmQgd2hlbiBoZSBjYW1lIGJhY2sgdG8gUm9tZSBhZnRlciB0aGUgd2FyIGluIFNpY2lseSwgaGUgdXBicmFpZGVkIHRoZSBzZW5hdGUgZm9yIG5vdCBwZXJtaXR0aW5nIGhpbSwgaW4gcmV0dXJuIGZvciBoaXMgbWFueSBncmVhdCBzZXJ2aWNlcywgdG8gcmVkZWVtIHNvIG1hbnkgY2l0aXplbnMgZnJvbSBtaXNmb3J0dW5lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBNYXJjZWxsdXMsIGhhdmluZyBiZWVuIGFwcG9pbnRlZCBjb25zdWwgZm9yIHRoZSB0aGlyZCB0aW1lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjE0IEIuQy4gRmFiaXVzIE1heGltdXMgd2FzIGhpcyBjb2xsZWFndWUuPC9ub3RlPiBzYWlsZWQgdG8gU2ljaWx5LiBGb3IgSGFubmliYWwncyBzdWNjZXNzZXMgaW4gdGhlIHdhciBoYWQgZW5jb3VyYWdlZCB0aGUgQ2FydGhhZ2luaWFucyB0byBhdHRlbXB0IGFuZXcgdGhlIGNvbnF1ZXN0IG9mIHRoZSBpc2xhbmQsIGVzcGVjaWFsbHkgbm93IHRoYXQgU3lyYWN1c2Ugd2FzIGluIGNvbmZ1c2lvbiBhZnRlciB0aGUgZGVhdGggb2YgdGhlIHR5cmFudCBIaWVyb255bXVzLiAgRm9yIHRoaXMgcmVhc29uIHRoZSBSb21hbnMgYWxzbyBoYWQgcHJldmlvdXNseSBzZW50IGEgZm9yY2UgdGhpdGhlciB1bmRlciB0aGUgY29tbWFuZCBvZiBBcHBpdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIE1hcmNlbGx1cyB0b29rIG92ZXIgdGhpcyBmb3JjZSwgaGUgd2FzIGJlc2V0IGJ5IG1hbnkgUm9tYW5zIHdobyB3ZXJlIGludm9sdmVkIGluIGEgY2FsYW1pdHkgbm93IHRvIGJlIGRlc2NyaWJlZC4gT2YgdGhvc2Ugd2hvIGhhZCBiZWVuIGRyYXduIHVwIGFnYWluc3QgSGFubmliYWwgYXQgQ2FubmFlLCBzb21lIGhhZCBmbGVkLCBhbmQgb3RoZXJzIGhhZCBiZWVuIHRha2VuIGFsaXZlLCBhbmQgaW4gc3VjaCBudW1iZXJzIHRoYXQgaXQgd2FzIHRob3VnaHQgdGhlIFJvbWFucyBoYWQgbm90IGV2ZW4gbWVuIGVub3VnaCBsZWZ0IHRvIGRlZmVuZCB0aGUgd2FsbHMgb2YgdGhlaXIgY2l0eS4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgc28gbXVjaCBvZiB0aGVpciBoaWdoIHNwaXJpdCBhbmQgaGF1Z2h0aW5lc3MgcmVtYWluZWQgdGhhdCwgYWx0aG91Z2ggSGFubmliYWwgb2ZmZXJlZCB0byByZXN0b3JlIGhpcyBwcmlzb25lcnMgb2Ygd2FyIGZvciBhIHNsaWdodCByYW5zb20sIHRoZXkgdm90ZWQgbm90IHRvIHJlY2VpdmUgdGhlbSwgYnV0IHN1ZmZlcmVkIHNvbWUgb2YgdGhlbSB0byBiZSBwdXQgdG8gZGVhdGggYW5kIG90aGVycyB0byBiZSBzb2xkIG91dCBvZiBJdGFseTsgYW5kIGFzIGZvciB0aGUgbXVsdGl0dWRlIHdobyBoYWQgc2F2ZWQgdGhlbXNlbHZlcyBieSBmbGlnaHQsIHRoZXkgc2VudCB0aGVtIHRvIFNpY2lseSwgb3JkZXJpbmcgdGhlbSBub3QgdG8gc2V0IGZvb3QgaW4gSXRhbHkgYXMgbG9uZyBhcyB0aGUgd2FyIGFnYWluc3QgSGFubmliYWwgbGFzdGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjMuMjUuNyIgdmFsaWQ9InllcyI+TGl2eSwgeHhpaWkuIDI1LCA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyMy4yNS43IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eGlpaS4gMjUsIDcuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdlcmUgdGhlIG1lbiB3aG8sIG5vdyB0aGF0IE1hcmNlbGx1cyB3YXMgY29tZSwgYmVzZXQgaGltIGluIHRocm9uZ3MsIGFuZCB0aHJvd2luZyB0aGVtc2VsdmVzIG9uIHRoZSBncm91bmQgYmVmb3JlIGhpbSwgYmVnZ2VkIHdpdGggbWFueSBjcmllcyBhbmQgdGVhcnMgZm9yIGFuIGFzc2lnbm1lbnQgdG8gaG9ub3VyYWJsZSBtaWxpdGFyeSBzZXJ2aWNlLCBwcm9taXNpbmcgdG8gc2hvdyBieSB0aGVpciBhY3Rpb25zIHRoYXQgdGhlaXIgZm9ybWVyIGRlZmVhdCBoYWQgYmVlbiBkdWUgdG8gc29tZSBncmVhdCBtaXNmb3J0dW5lIHJhdGhlciB0aGFuICAgdG8gY293YXJkaWNlLiAgTWFyY2VsbHVzLCB0aGVyZWZvcmUsIHRha2luZyBwaXR5IG9uIHRoZW0sIHdyb3RlIHRvIHRoZSBzZW5hdGUgYXNraW5nIHBlcm1pc3Npb24gdG8gZmlsbCB1cCB0aGUgZGVmaWNpZW5jaWVzIGluIGhpcyBhcm15IGZyb20gdGltZSB0byB0aW1lIHdpdGggdGhlc2UgbWVuLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBtdWNoIGRpc2N1c3Npb24gdGhlIHNlbmF0ZSBkZWNsYXJlZCBpdHMgb3BpbmlvbiB0aGF0IHRoZSBSb21hbiBjb21tb253ZWFsdGggaGFkIG5vIG5lZWQgb2YgbWVuIHdobyB3ZXJlIGNvd2FyZHM7IGlmLCBob3dldmVyLCBhcyBpdCBhcHBlYXJlZCwgTWFyY2VsbHVzIHdpc2hlZCB0byB1c2UgdGhlbSwgdGhleSB3ZXJlIHRvIHJlY2VpdmUgZnJvbSB0aGVpciBjb21tYW5kZXIgbm9uZSBvZiB0aGUgY3VzdG9tYXJ5IGNyb3ducyBvciBwcml6ZXMgZm9yIHZhbG91ci4gIFRoaXMgZGVjcmVlIHZleGVkIE1hcmNlbGx1cywgYW5kIHdoZW4gaGUgY2FtZSBiYWNrIHRvIFJvbWUgYWZ0ZXIgdGhlIHdhciBpbiBTaWNpbHksIGhlIHVwYnJhaWRlZCB0aGUgc2VuYXRlIGZvciBub3QgcGVybWl0dGluZyBoaW0sIGluIHJldHVybiBmb3IgaGlzIG1hbnkgZ3JlYXQgc2VydmljZXMsIHRvIHJlZGVlbSBzbyBtYW55IGNpdGl6ZW5zIGZyb20gbWlzZm9ydHVuZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIFNpY2lseSwgYXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhaywgaGlzIGZpcnN0IHByb2NlZWRpbmcsIGFmdGVyIHdyb25nIGhhZCBiZWVuIGRvbmUgaGltIGJ5IEhpcHBvY3JhdGVzLCB0aGUgY29tbWFuZGVyIG9mIHRoZSBTeXJhY3VzYW5zICh3aG8sIHRvIGdyYXRpZnkgdGhlIENhcnRoYWdpbmlhbnMgYW5kIGFjcXVpcmUgdGhlIHR5cmFubnkgZm9yIGhpbXNlbGYsIGhhZCBraWxsZWQgbWFueSBSb21hbnMgYXQgTGVvbnRpbmkpLCB3YXMgdG8gdGFrZSB0aGUgY2l0eSBvZiBMZW9udGluaSBieSBzdG9ybS4gICBIZSBkaWQgbm8gaGFybSwgaG93ZXZlciwgdG8gaXRzIGNpdGl6ZW5zLCBidXQgYWxsIHRoZSBkZXNlcnRlcnMgd2hvbSAgaGUgdG9vayBoZSBvcmRlcmVkIHRvIGJlIGJlYXRlbiB3aXRoIHJvZHMgYW5kIHB1dCB0byBkZWF0aC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGlwcG9jcmF0ZXMgZmlyc3Qgc2VudCBhIHJlcG9ydCB0byBTeXJhY3VzZSB0aGF0IE1hcmNlbGx1cyB3YXMgcHV0dGluZyBhbGwgdGhlIG1lbiBvZiBMZW9udGluaSB0byB0aGUgc3dvcmQsIGFuZCB0aGVuLCB3aGVuIHRoZSBjaXR5IHdhcyBpbiBhIHR1bXVsdCBhdCB0aGUgbmV3cywgZmVsbCBzdWRkZW5seSB1cG9uIGl0IGFuZCBtYWRlIGhpbXNlbGYgbWFzdGVyIG9mIGl0LiAgICBVcG9uIHRoaXMsIE1hcmNlbGx1cyBzZXQgb3V0IHdpdGggaGlzIHdob2xlIGFybXkgYW5kIGNhbWUgdG8gU3lyYWN1c2UuICAgSGUgZW5jYW1wZWQgbmVhciBieSwgYW5kIHNlbnQgYW1iYXNzYWRvcnMgaW50byB0aGUgY2l0eSB0byB0ZWxsIHRoZSBwZW9wbGUgd2hhdCBoYWQgcmVhbGx5IGhhcHBlbmVkIGF0IExlb250aW5pOyBidXQgd2hlbiB0aGlzIHdhcyBvZiBubyBhdmFpbCBhbmQgdGhlIFN5cmFjdXNhbnMgd291bGQgbm90IGxpc3RlbiB0byBoaW0sIHRoZSBwb3dlciBiZWluZyBub3cgaW4gdGhlIGhhbmRzIG9mIEhpcHBvY3JhdGVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5oZSBwcm9jZWVkZWQgdG8gYXR0YWNrIHRoZSBjaXR5IGJ5IGxhbmQgYW5kIHNlYSwgQXBwaXVzIGxlYWRpbmcgdXAgdGhlIGxhbmQgZm9yY2VzLCBhbmQgaGUgaGltc2VsZiBoYXZpbmcgYSBmbGVldCBvZiBzaXh0eSBxdWlucXVlcmVtZXMgZmlsbGVkIHdpdGggYWxsIHNvcnRzICBvZiBhcm1zICAgYW5kICBtaXNzaWxlcy4gTW9yZW92ZXIsIGhlIGhhZCBlcmVjdGVkIGFuIGVuZ2luZSBvZiBhcnRpbGxlcnkgb24gYSBodWdlIHBsYXRmb3JtIHN1cHBvcnRlZCBieSBlaWdodCBnYWxsZXlzIGZhc3RlbmVkIHRvZ2V0aGVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyYy4gMTUuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4di4gMy48L2JpYmw+ICBBY2NvcmRpbmcgdG8gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYi4gOC42IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cyAodmlpaS4gNik8L2JpYmw+LiBNYXJjZWxsdXMgaGFkIGVpZ2h0IHF1aW5xdWVyZW1lcyBpbiBwYWlycywgYW5kIG9uIGVhY2ggcGFpciwgbGFzaGVkIHRvZ2V0aGVyLCBhIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnNhbWJ1Y2E8L3E+IChvciA8ZW1waD5oYXJwPC9lbXBoPikgaGFkIGJlZW4gY29uc3RydWN0ZWQuICBUaGlzIHdhcyBhIHBlbnQtaG91c2UgZm9yIHJhaXNpbmcgYXJtZWQgbWVuIG9uIHRvIHRoZSBiYXR0bGVtZW50cyBvZiB0aGUgYmVzaWVnZWQgY2l0eS48L25vdGU+IGFuZCB3aXRoIHRoaXMgc2FpbGVkIHVwIHRvIHRoZSBjaXR5IHdhbGwsIGNvbmZpZGVudGx5IHJlbHlpbmcgb24gdGhlIGV4dGVudCBhbmQgc3BsZW5kb3VyIG9mIGhpcyBlcXVpcG1lbnQgYW5kIGhpcyBvd24gZ3JlYXQgZmFtZS4gICBCdXQgYWxsIHRoaXMgcHJvdmVkIHRvIGJlIG9mIG5vIGFjY291bnQgaW4gdGhlIGV5ZXMgb2YgQXJjaGltZWRlcyBhbmQgaW4gY29tcGFyaXNvbiB3aXRoIHRoZSBlbmdpbmVzIG9mIEFyY2hpbWVkZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoZXNlIGhlIGhhZCBieSBubyBtZWFucyBkZXZvdGVkIGhpbXNlbGYgYXMgd29yayB3b3J0aHkgb2YgaGlzIHNlcmlvdXMgZWZmb3J0LCBidXQgbW9zdCBvZiB0aGVtIHdlcmUgbWVyZSBhY2Nlc3NvcmllcyBvZiBhIGdlb21ldHJ5IHByYWN0aXNlZCBmb3IgYW11c2VtZW50LCBzaW5jZSBpbiBieWdvbmUgZGF5cyBIaWVybyB0aGUga2luZyBoYWQgZWFnZXJseSBkZXNpcmVkIGFuZCBhdCBsYXN0IHBlcnN1YWRlZCBoaW0gdG8gdHVybiBoaXMgYXJ0IHNvbWV3aGF0IGZyb20gYWJzdHJhY3Qgbm90aW9ucyB0byBtYXRlcmlhbCB0aGluZ3MsIGFuZCBieSBhcHBseWluZyBoaXMgcGhpbG9zb3BoeSBzb21laG93IHRvIHRoZSBuZWVkcyB3aGljaCBtYWtlIHRoZW1zZWx2ZXMgZmVsdCwgdG8gcmVuZGVyIGl0IG1vcmUgZXZpZGVudCB0byB0aGUgY29tbW9uIG1pbmQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIFNpY2lseSwgYXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhaywgaGlzIGZpcnN0IHByb2NlZWRpbmcsIGFmdGVyIHdyb25nIGhhZCBiZWVuIGRvbmUgaGltIGJ5IEhpcHBvY3JhdGVzLCB0aGUgY29tbWFuZGVyIG9mIHRoZSBTeXJhY3VzYW5zICh3aG8sIHRvIGdyYXRpZnkgdGhlIENhcnRoYWdpbmlhbnMgYW5kIGFjcXVpcmUgdGhlIHR5cmFubnkgZm9yIGhpbXNlbGYsIGhhZCBraWxsZWQgbWFueSBSb21hbnMgYXQgTGVvbnRpbmkpLCB3YXMgdG8gdGFrZSB0aGUgY2l0eSBvZiBMZW9udGluaSBieSBzdG9ybS4gICBIZSBkaWQgbm8gaGFybSwgaG93ZXZlciwgdG8gaXRzIGNpdGl6ZW5zLCBidXQgYWxsIHRoZSBkZXNlcnRlcnMgd2hvbSAgaGUgdG9vayBoZSBvcmRlcmVkIHRvIGJlIGJlYXRlbiB3aXRoIHJvZHMgYW5kIHB1dCB0byBkZWF0aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcHBvY3JhdGVzIGZpcnN0IHNlbnQgYSByZXBvcnQgdG8gU3lyYWN1c2UgdGhhdCBNYXJjZWxsdXMgd2FzIHB1dHRpbmcgYWxsIHRoZSBtZW4gb2YgTGVvbnRpbmkgdG8gdGhlIHN3b3JkLCBhbmQgdGhlbiwgd2hlbiB0aGUgY2l0eSB3YXMgaW4gYSB0dW11bHQgYXQgdGhlIG5ld3MsIGZlbGwgc3VkZGVubHkgdXBvbiBpdCBhbmQgbWFkZSBoaW1zZWxmIG1hc3RlciBvZiBpdC4gICAgVXBvbiB0aGlzLCBNYXJjZWxsdXMgc2V0IG91dCB3aXRoIGhpcyB3aG9sZSBhcm15IGFuZCBjYW1lIHRvIFN5cmFjdXNlLiAgIEhlIGVuY2FtcGVkIG5lYXIgYnksIGFuZCBzZW50IGFtYmFzc2Fkb3JzIGludG8gdGhlIGNpdHkgdG8gdGVsbCB0aGUgcGVvcGxlIHdoYXQgaGFkIHJlYWxseSBoYXBwZW5lZCBhdCBMZW9udGluaTsgYnV0IHdoZW4gdGhpcyB3YXMgb2Ygbm8gYXZhaWwgYW5kIHRoZSBTeXJhY3VzYW5zIHdvdWxkIG5vdCBsaXN0ZW4gdG8gaGltLCB0aGUgcG93ZXIgYmVpbmcgbm93IGluIHRoZSBoYW5kcyBvZiBIaXBwb2NyYXRlcywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmhlIHByb2NlZWRlZCB0byBhdHRhY2sgdGhlIGNpdHkgYnkgbGFuZCBhbmQgc2VhLCBBcHBpdXMgbGVhZGluZyB1cCB0aGUgbGFuZCBmb3JjZXMsIGFuZCBoZSBoaW1zZWxmIGhhdmluZyBhIGZsZWV0IG9mIHNpeHR5IHF1aW5xdWVyZW1lcyBmaWxsZWQgd2l0aCBhbGwgc29ydHMgIG9mIGFybXMgICBhbmQgIG1pc3NpbGVzLiBNb3Jlb3ZlciwgaGUgaGFkIGVyZWN0ZWQgYW4gZW5naW5lIG9mIGFydGlsbGVyeSBvbiBhIGh1Z2UgcGxhdGZvcm0gc3VwcG9ydGVkIGJ5IGVpZ2h0IGdhbGxleXMgZmFzdGVuZWQgdG9nZXRoZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyYy4gMTUuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4di4gMy48L2JpYmw+ICBBY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiA4LjYiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzICh2aWlpLiA2KTwvYmlibD4uIE1hcmNlbGx1cyBoYWQgZWlnaHQgcXVpbnF1ZXJlbWVzIGluIHBhaXJzLCBhbmQgb24gZWFjaCBwYWlyLCBsYXNoZWQgdG9nZXRoZXIsIGEgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zYW1idWNhPC9xPiAob3IgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5oYXJwPC9lbXBoPikgaGFkIGJlZW4gY29uc3RydWN0ZWQuICBUaGlzIHdhcyBhIHBlbnQtaG91c2UgZm9yIHJhaXNpbmcgYXJtZWQgbWVuIG9uIHRvIHRoZSBiYXR0bGVtZW50cyBvZiB0aGUgYmVzaWVnZWQgY2l0eS48L25vdGU+IGFuZCB3aXRoIHRoaXMgc2FpbGVkIHVwIHRvIHRoZSBjaXR5IHdhbGwsIGNvbmZpZGVudGx5IHJlbHlpbmcgb24gdGhlIGV4dGVudCBhbmQgc3BsZW5kb3VyIG9mIGhpcyBlcXVpcG1lbnQgYW5kIGhpcyBvd24gZ3JlYXQgZmFtZS4gICBCdXQgYWxsIHRoaXMgcHJvdmVkIHRvIGJlIG9mIG5vIGFjY291bnQgaW4gdGhlIGV5ZXMgb2YgQXJjaGltZWRlcyBhbmQgaW4gY29tcGFyaXNvbiB3aXRoIHRoZSBlbmdpbmVzIG9mIEFyY2hpbWVkZXMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyYy4gMTUuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4di4gMy48L2JpYmw+ICBBY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiA4LjYiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzICh2aWlpLiA2KTwvYmlibD4uIE1hcmNlbGx1cyBoYWQgZWlnaHQgcXVpbnF1ZXJlbWVzIGluIHBhaXJzLCBhbmQgb24gZWFjaCBwYWlyLCBsYXNoZWQgdG9nZXRoZXIsIGEgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zYW1idWNhPC9xPiAob3IgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5oYXJwPC9lbXBoPikgaGFkIGJlZW4gY29uc3RydWN0ZWQuICBUaGlzIHdhcyBhIHBlbnQtaG91c2UgZm9yIHJhaXNpbmcgYXJtZWQgbWVuIG9uIHRvIHRoZSBiYXR0bGVtZW50cyBvZiB0aGUgYmVzaWVnZWQgY2l0eS48L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoZXNlIGhlIGhhZCBieSBubyBtZWFucyBkZXZvdGVkIGhpbXNlbGYgYXMgd29yayB3b3J0aHkgb2YgaGlzIHNlcmlvdXMgZWZmb3J0LCBidXQgbW9zdCBvZiB0aGVtIHdlcmUgbWVyZSBhY2Nlc3NvcmllcyBvZiBhIGdlb21ldHJ5IHByYWN0aXNlZCBmb3IgYW11c2VtZW50LCBzaW5jZSBpbiBieWdvbmUgZGF5cyBIaWVybyB0aGUga2luZyBoYWQgZWFnZXJseSBkZXNpcmVkIGFuZCBhdCBsYXN0IHBlcnN1YWRlZCBoaW0gdG8gdHVybiBoaXMgYXJ0IHNvbWV3aGF0IGZyb20gYWJzdHJhY3Qgbm90aW9ucyB0byBtYXRlcmlhbCB0aGluZ3MsIGFuZCBieSBhcHBseWluZyBoaXMgcGhpbG9zb3BoeSBzb21laG93IHRvIHRoZSBuZWVkcyB3aGljaCBtYWtlIHRoZW1zZWx2ZXMgZmVsdCwgdG8gcmVuZGVyIGl0IG1vcmUgZXZpZGVudCB0byB0aGUgY29tbW9uIG1pbmQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgYXJ0IG9mIG1lY2hhbmljcywgbm93IHNvIGNlbGVicmF0ZWQgYW5kIGFkbWlyZWQsICB3YXMgIGZpcnN0IG9yaWdpbmF0ZWQgYnkgRXVkb3h1cyBhbmQgQXJjaHl0YXMsIHdobyBlbWJlbGxpc2hlZCBnZW9tZXRyeSB3aXRoIGl0cyBzdWJ0bGV0aWVzLCBhbmQgZ2F2ZSB0byBwcm9ibGVtcyBpbmNhcGFibGUgb2YgcHJvb2YgYnkgd29yZCBhbmQgZGlhZ3JhbSwgYSBzdXBwb3J0IGRlcml2ZWQgZnJvbSBtZWNoYW5pY2FsIGlsbHVzdHJhdGlvbnMgdGhhdCB3ZXJlIHBhdGVudCB0byB0aGUgc2Vuc2VzLiAgRm9yIGluc3RhbmNlLCBpbiBzb2x2aW5nIHRoZSBwcm9ibGVtIG9mIGZpbmRpbmcgdHdvIG1lYW4gcHJvcG9ydGlvbmFsIGxpbmVzLCBhIG5lY2Vzc2FyeSByZXF1aXNpdGUgZm9yIG1hbnkgZ2VvbWV0cmljYWwgZmlndXJlcywgYm90aCBtYXRoZW1hdGljaWFucyBoYWQgcmVjb3Vyc2UgdG8gICAgbWVjaGFuaWNhbCBhcnJhbmdlbWVudHMsIGFkYXB0aW5nIHRvIHRoZWlyICBwdXJwb3NlcyAgIGNlcnRhaW4gaW50ZXJtZWRpYXRlIHBvcnRpb25zICAgICBvZiBjdXJ2ZWQgbGluZXMgYW5kIHNlY3Rpb25zLiAgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFBsYXRvIHdhcyBpbmNlbnNlZCBhdCB0aGlzLCBhbmQgaW52ZWlnaGVkIGFnYWluc3QgdGhlbSBhcyBjb3JydXB0ZXJzIGFuZCBkZXN0cm95ZXJzIG9mIHRoZSBwdXJlIGV4Y2VsbGVuY2Ugb2YgZ2VvbWV0cnksIHdoaWNoIHRodXMgdHVybmVkIGhlciBiYWNrIHVwb24gdGhlIGluY29ycG9yZWFsIHRoaW5ncyBvZiBhYnN0cmFjdCB0aG91Z2h0IGFuZCBkZXNjZW5kZWQgdG8gdGhlIHRoaW5ncyBvZiBzZW5zZSwgbWFraW5nIHVzZSwgbW9yZW92ZXIsIG9mIG9iamVjdHMgd2hpY2ggcmVxdWlyZWQgbXVjaCBtZWFuIGFuZCBtYW51YWwgbGFib3VyLiBGb3IgdGhpcyByZWFzb24gbWVjaGFuaWNzIHdhcyBtYWRlIGVudGlyZWx5IGRpc3RpbmN0IGZyb20gZ2VvbWV0cnksIGFuZCBiZWluZyBmb3IgYSBsb25nIHRpbWUgaWdub3JlZCBieSBwaGlsb3NvcGhlcnMsIGNhbWUgdG8gYmUgcmVnYXJkZWQgYXMgb25lIG9mIHRoZSBtaWxpdGFyeSBhcnRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgYXJ0IG9mIG1lY2hhbmljcywgbm93IHNvIGNlbGVicmF0ZWQgYW5kIGFkbWlyZWQsICB3YXMgIGZpcnN0IG9yaWdpbmF0ZWQgYnkgRXVkb3h1cyBhbmQgQXJjaHl0YXMsIHdobyBlbWJlbGxpc2hlZCBnZW9tZXRyeSB3aXRoIGl0cyBzdWJ0bGV0aWVzLCBhbmQgZ2F2ZSB0byBwcm9ibGVtcyBpbmNhcGFibGUgb2YgcHJvb2YgYnkgd29yZCBhbmQgZGlhZ3JhbSwgYSBzdXBwb3J0IGRlcml2ZWQgZnJvbSBtZWNoYW5pY2FsIGlsbHVzdHJhdGlvbnMgdGhhdCB3ZXJlIHBhdGVudCB0byB0aGUgc2Vuc2VzLiAgRm9yIGluc3RhbmNlLCBpbiBzb2x2aW5nIHRoZSBwcm9ibGVtIG9mIGZpbmRpbmcgdHdvIG1lYW4gcHJvcG9ydGlvbmFsIGxpbmVzLCBhIG5lY2Vzc2FyeSByZXF1aXNpdGUgZm9yIG1hbnkgZ2VvbWV0cmljYWwgZmlndXJlcywgYm90aCBtYXRoZW1hdGljaWFucyBoYWQgcmVjb3Vyc2UgdG8gICAgbWVjaGFuaWNhbCBhcnJhbmdlbWVudHMsIGFkYXB0aW5nIHRvIHRoZWlyICBwdXJwb3NlcyAgIGNlcnRhaW4gaW50ZXJtZWRpYXRlIHBvcnRpb25zICAgICBvZiBjdXJ2ZWQgbGluZXMgYW5kIHNlY3Rpb25zLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQbGF0byB3YXMgaW5jZW5zZWQgYXQgdGhpcywgYW5kIGludmVpZ2hlZCBhZ2FpbnN0IHRoZW0gYXMgY29ycnVwdGVycyBhbmQgZGVzdHJveWVycyBvZiB0aGUgcHVyZSBleGNlbGxlbmNlIG9mIGdlb21ldHJ5LCB3aGljaCB0aHVzIHR1cm5lZCBoZXIgYmFjayB1cG9uIHRoZSBpbmNvcnBvcmVhbCB0aGluZ3Mgb2YgYWJzdHJhY3QgdGhvdWdodCBhbmQgZGVzY2VuZGVkIHRvIHRoZSB0aGluZ3Mgb2Ygc2Vuc2UsIG1ha2luZyB1c2UsIG1vcmVvdmVyLCBvZiBvYmplY3RzIHdoaWNoIHJlcXVpcmVkIG11Y2ggbWVhbiBhbmQgbWFudWFsIGxhYm91ci4gRm9yIHRoaXMgcmVhc29uIG1lY2hhbmljcyB3YXMgbWFkZSBlbnRpcmVseSBkaXN0aW5jdCBmcm9tIGdlb21ldHJ5LCBhbmQgYmVpbmcgZm9yIGEgbG9uZyB0aW1lIGlnbm9yZWQgYnkgcGhpbG9zb3BoZXJzLCBjYW1lIHRvIGJlIHJlZ2FyZGVkIGFzIG9uZSBvZiB0aGUgbWlsaXRhcnkgYXJ0cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBldmVuIEFyY2hpbWVkZXMsIHdobyB3YXMgYSBraW5zbWFuIGFuZCBmcmllbmQgb2YgS2luZyBIaWVybywgd3JvdGUgdG8gaGltIHRoYXQgd2l0aCBhbnkgZ2l2ZW4gZm9yY2UgaXQgd2FzIHBvc3NpYmxlIHRvIG1vdmUgYW55IGdpdmVuIHdlaWdodDsgYW5kIGVtYm9sZGVuZWQsIGFzIHdlIGFyZSB0b2xkLCBieSB0aGUgc3RyZW5ndGggb2YgaGlzIGRlbW9uc3RyYXRpb24sIGhlIGRlY2xhcmVkIHRoYXQsIGlmIHRoZXJlIHdlcmUgYW5vdGhlciB3b3JsZCwgYW5kIGhlIGNvdWxkIGdvIHRvIGl0LCBoZSBjb3VsZCBtb3ZlIHRoaXMuICAgCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+SGllcm8gd2FzIGFzdG9uaXNoZWQsIGFuZCBiZWdnZWQgaGltIHRvIHB1dCBoaXMgcHJvcG9zaXRpb24gaW50byBleGVjdXRpb24sIGFuZCBzaG93IGhpbSAgIHNvbWUgZ3JlYXQgd2VpZ2h0IG1vdmVkIGJ5IGEgc2xpZ2h0IGZvcmNlLiAgQXJjaGltZWRlcyAgIHRoZXJlZm9yZSBmaXhlZCB1cG9uIGEgdGhyZWUtbWFzdGVkIG1lcmNoYW50bWFuIG9mIHRoZSByb3lhbCBmbGVldCwgd2hpY2ggaGFkIGJlZW4gZHJhZ2dlZCBhc2hvcmUgYnkgdGhlIGdyZWF0IGxhYm91cnMgb2YgbWFueSBtZW4sIGFuZCBhZnRlciBwdXR0aW5nIG9uIGJvYXJkIG1hbnkgcGFzc2VuZ2VycyBhbmQgdGhlIGN1c3RvbWFyeSBmcmVpZ2h0LCBoZSBzZWF0ZWQgaGltc2VsZiBhdCBhIGRpc3RhbmNlIGZyb20gaGVyLCBhbmQgd2l0aG91dCBhbnkgZ3JlYXQgZWZmb3J0LCBidXQgcXVpZXRseSBzZXR0aW5nIGluIG1vdGlvbiB3aXRoIGhpcyBoYW5kIGEgc3lzdGVtIG9mIGNvbXBvdW5kIHB1bGxleXMsIGRyZXcgaGVyIHRvd2FyZHMgaGltIHNtb290aGx5IGFuZCBldmVubHksIGFzIHRob3VnaCBzaGUgd2VyZSBnbGlkaW5nIHRocm91Z2ggdGhlIHdhdGVyLiAgCgkJCQk8bWlsZXN0b25lIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+QW1hemVkIGF0IHRoaXMsIHRoZW4sIGFuZCBjb21wcmVoZW5kaW5nIHRoZSBwb3dlciBvZiBoaXMgYXJ0LCB0aGUga2luZyBwZXJzdWFkZWQgQXJjaGltZWRlcyB0byBwcmVwYXJlIGZvciBoaW0gb2ZmZW5zaXZlIGFuZCBkZWZlbnNpdmUgZW5naW5lcyB0byBiZSB1c2VkIGluIGV2ZXJ5IGtpbmQgb2Ygc2llZ2Ugd2FyZmFyZS4gICBUaGVzZSBoZSBoYWQgbmV2ZXIgdXNlZCBoaW1zZWxmLCBiZWNhdXNlIGhlIHNwZW50IHRoZSBncmVhdGVyIHBhcnQgb2YgaGlzIGxpZmUgaW4gZnJlZWRvbSBmcm9tIHdhciBhbmQgYW1pZCB0aGUgZmVzdGFsIHJpdGVzIG9mIHBlYWNlOyBidXQgYXQgdGhlIHByZXNlbnQgdGltZSBoaXMgYXBwYXJhdHVzIHN0b29kIHRoZSBTeXJhY3VzYW5zIGluIGdvb2Qgc3RlYWQsIGFuZCwgd2l0aCB0aGUgYXBwYXJhdHVzLCBpdHMgZmFicmljYXRvci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYi4gOC41LjMiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzLCB2aWlpLiA1LCAzLTU8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxiLiA4LjkuMiIgdmFsaWQ9InllcyI+OSwgMjwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI0LjM0IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eGl2LiAzNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgZXZlbiBBcmNoaW1lZGVzLCB3aG8gd2FzIGEga2luc21hbiBhbmQgZnJpZW5kIG9mIEtpbmcgSGllcm8sIHdyb3RlIHRvIGhpbSB0aGF0IHdpdGggYW55IGdpdmVuIGZvcmNlIGl0IHdhcyBwb3NzaWJsZSB0byBtb3ZlIGFueSBnaXZlbiB3ZWlnaHQ7IGFuZCBlbWJvbGRlbmVkLCBhcyB3ZSBhcmUgdG9sZCwgYnkgdGhlIHN0cmVuZ3RoIG9mIGhpcyBkZW1vbnN0cmF0aW9uLCBoZSBkZWNsYXJlZCB0aGF0LCBpZiB0aGVyZSB3ZXJlIGFub3RoZXIgd29ybGQsIGFuZCBoZSBjb3VsZCBnbyB0byBpdCwgaGUgY291bGQgbW92ZSB0aGlzLiAgIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhpZXJvIHdhcyBhc3RvbmlzaGVkLCBhbmQgYmVnZ2VkIGhpbSB0byBwdXQgaGlzIHByb3Bvc2l0aW9uIGludG8gZXhlY3V0aW9uLCBhbmQgc2hvdyBoaW0gICBzb21lIGdyZWF0IHdlaWdodCBtb3ZlZCBieSBhIHNsaWdodCBmb3JjZS4gIEFyY2hpbWVkZXMgICB0aGVyZWZvcmUgZml4ZWQgdXBvbiBhIHRocmVlLW1hc3RlZCBtZXJjaGFudG1hbiBvZiB0aGUgcm95YWwgZmxlZXQsIHdoaWNoIGhhZCBiZWVuIGRyYWdnZWQgYXNob3JlIGJ5IHRoZSBncmVhdCBsYWJvdXJzIG9mIG1hbnkgbWVuLCBhbmQgYWZ0ZXIgcHV0dGluZyBvbiBib2FyZCBtYW55IHBhc3NlbmdlcnMgYW5kIHRoZSBjdXN0b21hcnkgZnJlaWdodCwgaGUgc2VhdGVkIGhpbXNlbGYgYXQgYSBkaXN0YW5jZSBmcm9tIGhlciwgYW5kIHdpdGhvdXQgYW55IGdyZWF0IGVmZm9ydCwgYnV0IHF1aWV0bHkgc2V0dGluZyBpbiBtb3Rpb24gd2l0aCBoaXMgaGFuZCBhIHN5c3RlbSBvZiBjb21wb3VuZCBwdWxsZXlzLCBkcmV3IGhlciB0b3dhcmRzIGhpbSBzbW9vdGhseSBhbmQgZXZlbmx5LCBhcyB0aG91Z2ggc2hlIHdlcmUgZ2xpZGluZyB0aHJvdWdoIHRoZSB3YXRlci4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkFtYXplZCBhdCB0aGlzLCB0aGVuLCBhbmQgY29tcHJlaGVuZGluZyB0aGUgcG93ZXIgb2YgaGlzIGFydCwgdGhlIGtpbmcgcGVyc3VhZGVkIEFyY2hpbWVkZXMgdG8gcHJlcGFyZSBmb3IgaGltIG9mZmVuc2l2ZSBhbmQgZGVmZW5zaXZlIGVuZ2luZXMgdG8gYmUgdXNlZCBpbiBldmVyeSBraW5kIG9mIHNpZWdlIHdhcmZhcmUuICAgVGhlc2UgaGUgaGFkIG5ldmVyIHVzZWQgaGltc2VsZiwgYmVjYXVzZSBoZSBzcGVudCB0aGUgZ3JlYXRlciBwYXJ0IG9mIGhpcyBsaWZlIGluIGZyZWVkb20gZnJvbSB3YXIgYW5kIGFtaWQgdGhlIGZlc3RhbCByaXRlcyBvZiBwZWFjZTsgYnV0IGF0IHRoZSBwcmVzZW50IHRpbWUgaGlzIGFwcGFyYXR1cyBzdG9vZCB0aGUgU3lyYWN1c2FucyBpbiBnb29kIHN0ZWFkLCBhbmQsIHdpdGggdGhlIGFwcGFyYXR1cywgaXRzIGZhYnJpY2F0b3IuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiA4LjUuMyIgdmFsaWQ9InllcyI+UG9seWJpdXMsIHZpaWkuIDUsIDMtNTwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gOC45LjIiIHZhbGlkPSJ5ZXMiPjksIDI8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI0LjM0IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eGl2LiAzNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiA4LjUuMyIgdmFsaWQ9InllcyI+UG9seWJpdXMsIHZpaWkuIDUsIDMtNTwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gOC45LjIiIHZhbGlkPSJ5ZXMiPjksIDI8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI0LjM0IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eGl2LiAzNC48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSB0aGUgUm9tYW5zIGFzc2F1bHRlZCB0aGVtIGJ5IHNlYSBhbmQgbGFuZCwgdGhlIFN5cmFjdXNhbnMgd2VyZSBzdHJpY2tlbiBkdW1iIHdpdGggdGVycm9yOyB0aGV5IHRob3VnaHQgdGhhdCBub3RoaW5nIGNvdWxkIHdpdGhzdGFuZCAgc28gIGZ1cmlvdXMgYW4gb25zZXQgYnkgc3VjaCBmb3JjZXMuIEJ1dCBBcmNoaW1lZGVzICAgYmVnYW4gdG8gcGx5IGhpcyBlbmdpbmVzLCBhbmQgc2hvdCBhZ2FpbnN0IHRoZSBsYW5kIGZvcmNlcyBvZiB0aGUgYXNzYWlsYW50cyBhbGwgc29ydHMgb2YgbWlzc2lsZXMgYW5kIGltbWVuc2UgbWFzc2VzIG9mIHN0b25lcywgd2hpY2ggY2FtZSBkb3duIHdpdGggaW5jcmVkaWJsZSBkaW4gYW5kIHNwZWVkOyBub3RoaW5nIHdoYXRldmVyIGNvdWxkIHdhcmQgb2ZmIHRoZWlyIHdlaWdodCwgYnV0IHRoZXkga25vY2tlZCBkb3duIGluIGhlYXBzIHRob3NlIHdobyBzdG9vZCBpbiB0aGVpciB3YXksIGFuZCB0aHJldyB0aGVpciByYW5rcyBpbnRvIGNvbmZ1c2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IEF0IHRoZSBzYW1lIHRpbWUgaHVnZSBiZWFtcyB3ZXJlIHN1ZGRlbmx5IHByb2plY3RlZCBvdmVyIHRoZSBzaGlwcyBmcm9tIHRoZSB3YWxscywgd2hpY2ggc2FuayBzb21lIG9mIHRoZW0gd2l0aCBncmVhdCB3ZWlnaHRzIHBsdW5naW5nIGRvd24gZnJvbSBvbiBoaWdoOyBvdGhlcnMgd2VyZSBzZWl6ZWQgYXQgdGhlIHByb3cgYnkgaXJvbiBjbGF3cywgb3IgYmVha3MgbGlrZSB0aGUgYmVha3Mgb2YgY3JhbmVzLCBkcmF3biBzdHJhaWdodCB1cCBpbnRvIHRoZSBhaXIsIGFuZCB0aGVuIHBsdW5nZWQgc3Rlcm4gZm9yZW1vc3QgaW50byB0aGUgZGVwdGhzLCBvciB3ZXJlIHR1cm5lZCByb3VuZCBhbmQgcm91bmQgYnkgbWVhbnMgb2YgZW5naW5lcnkgd2l0aGluIHRoZSBjaXR5LCBhbmQgZGFzaGVkIHVwb24gdGhlIHN0ZWVwIGNsaWZmcyB0aGF0IGp1dHRlZCBvdXQgYmVuZWF0aCB0aGUgd2FsbCBvZiB0aGUgY2l0eSwgd2l0aCBncmVhdCBkZXN0cnVjdGlvbiAgb2YgdGhlIGZpZ2h0aW5nIG1lbiBvbiBib2FyZCwgd2hvIHBlcmlzaGVkICAgaW4gdGhlIHdyZWNrcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+RnJlcXVlbnRseSwgdG9vLCBhIHNoaXAgd291bGQgYmUgbGlmdGVkIG91dCBvZiB0aGUgd2F0ZXIgaW50byBtaWQtYWlyLCB3aGlybGVkIGhpdGhlciBhbmQgdGhpdGhlciBhcyBpdCBodW5nIHRoZXJlLCBhIGRyZWFkZnVsIHNwZWN0YWNsZSwgdW50aWwgaXRzIGNyZXcgaGFkIGJlZW4gdGhyb3duIG91dCBhbmQgaHVybGVkIGluIGFsbCBkaXJlY3Rpb25zLCB3aGVuIGl0IHdvdWxkIGZhbGwgZW1wdHkgdXBvbiB0aGUgd2FsbHMsIG9yIHNsaXAgYXdheSBmcm9tIHRoZSBjbHV0Y2ggdGhhdCBoYWQgaGVsZCBpdC4gICBBcyBmb3IgdGhlIGVuZ2luZSB3aGljaCBNYXJjZWxsdXMgd2FzIGJyaW5naW5nIHVwIG9uIHRoZSBicmlkZ2Ugb2Ygc2hpcHMsIGFuZCB3aGljaCB3YXMgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c2FtYnVjYTwvcT4gZnJvbSBzb21lIHJlc2VtYmxhbmNlIGl0IGhhZCB0byB0aGUgbXVzaWNhbCBpbnN0cnVtZW50IG9mIHRoYXQgbmFtZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hcmMuIDE0LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGl2LiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIGl0IHdhcyBzdGlsbCBzb21lIGRpc3RhbmNlIG9mZiBpbiBpdHMgYXBwcm9hY2ggdG8gdGhlIHdhbGwsIGEgc3RvbmUgb2YgdGVuIHRhbGVudHMnIHdlaWdodDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgdGFsZW50J3Mgd2VpZ2h0IHdhcyBzb21ldGhpbmcgb3ZlciBmaWZ0eSBwb3VuZHMuPC9ub3RlPiB3YXMgZGlzY2hhcmdlZCBhdCBpdCwgdGhlbiBhIHNlY29uZCBhbmQgYSB0aGlyZDsgc29tZSBvZiB0aGVzZSwgZmFsbGluZyB1cG9uIGl0IHdpdGggZ3JlYXQgZGluIGFuZCBzdXJnZSBvZiB3YXZlLCBjcnVzaGVkIHRoZSBmb3VuZGF0aW9uIG9mIHRoZSBlbmdpbmUsIHNoYXR0ZXJlZCBpdHMgZnJhbWUtd29yaywgYW5kIGRpc2xvZGdlZCBpdCBmcm9tIHRoZSBwbGF0Zm9ybSwgc28gdGhhdCBNYXJjZWxsdXMsIGluIHBlcnBsZXhpdHksIG9yZGVyZWQgaGlzIHNoaXBzIHRvIHNhaWwgYmFjayBhcyBmYXN0IGFzIHRoZXkgY291bGQsIGFuZCBoaXMgbGFuZCBmb3JjZXMgdG8gcmV0aXJlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgdGhlcmVmb3JlIHRoZSBSb21hbnMgYXNzYXVsdGVkIHRoZW0gYnkgc2VhIGFuZCBsYW5kLCB0aGUgU3lyYWN1c2FucyB3ZXJlIHN0cmlja2VuIGR1bWIgd2l0aCB0ZXJyb3I7IHRoZXkgdGhvdWdodCB0aGF0IG5vdGhpbmcgY291bGQgd2l0aHN0YW5kICBzbyAgZnVyaW91cyBhbiBvbnNldCBieSBzdWNoIGZvcmNlcy4gQnV0IEFyY2hpbWVkZXMgICBiZWdhbiB0byBwbHkgaGlzIGVuZ2luZXMsIGFuZCBzaG90IGFnYWluc3QgdGhlIGxhbmQgZm9yY2VzIG9mIHRoZSBhc3NhaWxhbnRzIGFsbCBzb3J0cyBvZiBtaXNzaWxlcyBhbmQgaW1tZW5zZSBtYXNzZXMgb2Ygc3RvbmVzLCB3aGljaCBjYW1lIGRvd24gd2l0aCBpbmNyZWRpYmxlIGRpbiBhbmQgc3BlZWQ7IG5vdGhpbmcgd2hhdGV2ZXIgY291bGQgd2FyZCBvZmYgdGhlaXIgd2VpZ2h0LCBidXQgdGhleSBrbm9ja2VkIGRvd24gaW4gaGVhcHMgdGhvc2Ugd2hvIHN0b29kIGluIHRoZWlyIHdheSwgYW5kIHRocmV3IHRoZWlyIHJhbmtzIGludG8gY29uZnVzaW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBBdCB0aGUgc2FtZSB0aW1lIGh1Z2UgYmVhbXMgd2VyZSBzdWRkZW5seSBwcm9qZWN0ZWQgb3ZlciB0aGUgc2hpcHMgZnJvbSB0aGUgd2FsbHMsIHdoaWNoIHNhbmsgc29tZSBvZiB0aGVtIHdpdGggZ3JlYXQgd2VpZ2h0cyBwbHVuZ2luZyBkb3duIGZyb20gb24gaGlnaDsgb3RoZXJzIHdlcmUgc2VpemVkIGF0IHRoZSBwcm93IGJ5IGlyb24gY2xhd3MsIG9yIGJlYWtzIGxpa2UgdGhlIGJlYWtzIG9mIGNyYW5lcywgZHJhd24gc3RyYWlnaHQgdXAgaW50byB0aGUgYWlyLCBhbmQgdGhlbiBwbHVuZ2VkIHN0ZXJuIGZvcmVtb3N0IGludG8gdGhlIGRlcHRocywgb3Igd2VyZSB0dXJuZWQgcm91bmQgYW5kIHJvdW5kIGJ5IG1lYW5zIG9mIGVuZ2luZXJ5IHdpdGhpbiB0aGUgY2l0eSwgYW5kIGRhc2hlZCB1cG9uIHRoZSBzdGVlcCBjbGlmZnMgdGhhdCBqdXR0ZWQgb3V0IGJlbmVhdGggdGhlIHdhbGwgb2YgdGhlIGNpdHksIHdpdGggZ3JlYXQgZGVzdHJ1Y3Rpb24gIG9mIHRoZSBmaWdodGluZyBtZW4gb24gYm9hcmQsIHdobyBwZXJpc2hlZCAgIGluIHRoZSB3cmVja3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZyZXF1ZW50bHksIHRvbywgYSBzaGlwIHdvdWxkIGJlIGxpZnRlZCBvdXQgb2YgdGhlIHdhdGVyIGludG8gbWlkLWFpciwgd2hpcmxlZCBoaXRoZXIgYW5kIHRoaXRoZXIgYXMgaXQgaHVuZyB0aGVyZSwgYSBkcmVhZGZ1bCBzcGVjdGFjbGUsIHVudGlsIGl0cyBjcmV3IGhhZCBiZWVuIHRocm93biBvdXQgYW5kIGh1cmxlZCBpbiBhbGwgZGlyZWN0aW9ucywgd2hlbiBpdCB3b3VsZCBmYWxsIGVtcHR5IHVwb24gdGhlIHdhbGxzLCBvciBzbGlwIGF3YXkgZnJvbSB0aGUgY2x1dGNoIHRoYXQgaGFkIGhlbGQgaXQuICAgQXMgZm9yIHRoZSBlbmdpbmUgd2hpY2ggTWFyY2VsbHVzIHdhcyBicmluZ2luZyB1cCBvbiB0aGUgYnJpZGdlIG9mIHNoaXBzLCBhbmQgd2hpY2ggd2FzIGNhbGxlZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c2FtYnVjYTwvcT4gZnJvbSBzb21lIHJlc2VtYmxhbmNlIGl0IGhhZCB0byB0aGUgbXVzaWNhbCBpbnN0cnVtZW50IG9mIHRoYXQgbmFtZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXJjLiAxNC4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpdi4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hcmMuIDE0LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGl2LiAzLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIGl0IHdhcyBzdGlsbCBzb21lIGRpc3RhbmNlIG9mZiBpbiBpdHMgYXBwcm9hY2ggdG8gdGhlIHdhbGwsIGEgc3RvbmUgb2YgdGVuIHRhbGVudHMnIHdlaWdodDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSB0YWxlbnQncyB3ZWlnaHQgd2FzIHNvbWV0aGluZyBvdmVyIGZpZnR5IHBvdW5kcy48L25vdGU+IHdhcyBkaXNjaGFyZ2VkIGF0IGl0LCB0aGVuIGEgc2Vjb25kIGFuZCBhIHRoaXJkOyBzb21lIG9mIHRoZXNlLCBmYWxsaW5nIHVwb24gaXQgd2l0aCBncmVhdCBkaW4gYW5kIHN1cmdlIG9mIHdhdmUsIGNydXNoZWQgdGhlIGZvdW5kYXRpb24gb2YgdGhlIGVuZ2luZSwgc2hhdHRlcmVkIGl0cyBmcmFtZS13b3JrLCBhbmQgZGlzbG9kZ2VkIGl0IGZyb20gdGhlIHBsYXRmb3JtLCBzbyB0aGF0IE1hcmNlbGx1cywgaW4gcGVycGxleGl0eSwgb3JkZXJlZCBoaXMgc2hpcHMgdG8gc2FpbCBiYWNrIGFzIGZhc3QgYXMgdGhleSBjb3VsZCwgYW5kIGhpcyBsYW5kIGZvcmNlcyB0byByZXRpcmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGluIGEgY291bmNpbCBvZiB3YXIsIGl0IHdhcyBkZWNpZGVkIHRvIGNvbWUgdXAgdW5kZXIgdGhlIHdhbGxzIHdoaWxlIGl0IHdhcyBzdGlsbCBuaWdodCwgaWYgdGhleSBjb3VsZDsgZm9yIHRoZSByb3BlcyB3aGljaCBBcmNoaW1lZGVzIHVzZWQgaW4gaGlzIGVuZ2luZXMsIHNpbmNlIHRoZXkgaW1wYXJ0ZWQgZ3JlYXQgaW1wZXR1cyB0byB0aGUgbWlzc2lsZXMgY2FzdCwgd291bGQsIHRoZXkgdGhvdWdodCwgc2VuZCB0aGVtIGZseWluZyBvdmVyIHRoZWlyIGhlYWRzLCBidXQgd291bGQgYmUgaW5lZmZlY3RpdmUgYXQgY2xvc2UgcXVhcnRlcnMsIHdoZXJlIHRoZXJlIHdhcyBubyBzcGFjZSBmb3IgdGhlIGNhc3QuIEFyY2hpbWVkZXMsIGhvd2V2ZXIsIGFzIGl0IHNlZW1lZCwgaGFkIGxvbmcgYmVmb3JlIHByZXBhcmVkIGZvciBzdWNoIGFuIGVtZXJnZW5jeSBlbmdpbmVzIHdpdGggYSByYW5nZSBhZGFwdGVkIHRvIGFueSBpbnRlcnZhbCBhbmQgbWlzc2lsZXMgb2Ygc2hvcnQgZmxpZ2h0LCBhbmQgdGhyb3VnaCBtYW55IHNtYWxsIGFuZCBjb250aWd1b3VzIG9wZW5pbmdzIGluIHRoZSB3YWxsIHNob3J0LXJhbmdlIGVuZ2luZXMgY2FsbGVkIHNjb3JwaW9ucyBjb3VsZCBiZSBicm91Z2h0IHRvIGJlYXIgb24gb2JqZWN0cyBjbG9zZSBhdCBoYW5kIHdpdGhvdXQgYmVpbmcgc2VlbiBieSB0aGUgZW5lbXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGluIGEgY291bmNpbCBvZiB3YXIsIGl0IHdhcyBkZWNpZGVkIHRvIGNvbWUgdXAgdW5kZXIgdGhlIHdhbGxzIHdoaWxlIGl0IHdhcyBzdGlsbCBuaWdodCwgaWYgdGhleSBjb3VsZDsgZm9yIHRoZSByb3BlcyB3aGljaCBBcmNoaW1lZGVzIHVzZWQgaW4gaGlzIGVuZ2luZXMsIHNpbmNlIHRoZXkgaW1wYXJ0ZWQgZ3JlYXQgaW1wZXR1cyB0byB0aGUgbWlzc2lsZXMgY2FzdCwgd291bGQsIHRoZXkgdGhvdWdodCwgc2VuZCB0aGVtIGZseWluZyBvdmVyIHRoZWlyIGhlYWRzLCBidXQgd291bGQgYmUgaW5lZmZlY3RpdmUgYXQgY2xvc2UgcXVhcnRlcnMsIHdoZXJlIHRoZXJlIHdhcyBubyBzcGFjZSBmb3IgdGhlIGNhc3QuIEFyY2hpbWVkZXMsIGhvd2V2ZXIsIGFzIGl0IHNlZW1lZCwgaGFkIGxvbmcgYmVmb3JlIHByZXBhcmVkIGZvciBzdWNoIGFuIGVtZXJnZW5jeSBlbmdpbmVzIHdpdGggYSByYW5nZSBhZGFwdGVkIHRvIGFueSBpbnRlcnZhbCBhbmQgbWlzc2lsZXMgb2Ygc2hvcnQgZmxpZ2h0LCBhbmQgdGhyb3VnaCBtYW55IHNtYWxsIGFuZCBjb250aWd1b3VzIG9wZW5pbmdzIGluIHRoZSB3YWxsIHNob3J0LXJhbmdlIGVuZ2luZXMgY2FsbGVkIHNjb3JwaW9ucyBjb3VsZCBiZSBicm91Z2h0IHRvIGJlYXIgb24gb2JqZWN0cyBjbG9zZSBhdCBoYW5kIHdpdGhvdXQgYmVpbmcgc2VlbiBieSB0aGUgZW5lbXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwgdGhlIFJvbWFucyBjYW1lIHVwIHVuZGVyIHRoZSB3YWxscywgdGhpbmtpbmcgdGhlbXNlbHZlcyB1bm5vdGljZWQsIG9uY2UgbW9yZSB0aGV5IGVuY291bnRlcmVkIGEgZ3JlYXQgc3Rvcm0gb2YgbWlzc2lsZXM7IGh1Z2Ugc3RvbmVzIGNhbWUgdHVtYmxpbmcgZG93biB1cG9uIHRoZW0gYWxtb3N0IHBlcnBlbmRpY3VsYXJseSwgYW5kIHRoZSB3YWxsIHNob3Qgb3V0IGFycm93cyBhdCB0aGVtIGZyb20gZXZlcnkgcG9pbnQ7IHRoZXkgdGhlcmVmb3JlIHJldGlyZWQuICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGVyZSBhZ2Fpbiwgd2hlbiB0aGV5IHdlcmUgc29tZSBkaXN0YW5jZSBvZmYsIG1pc3NpbGVzIGRhcnRlZCBmb3J0aCBhbmQgZmVsbCB1cG9uIHRoZW0gYXMgdGhleSB3ZXJlIGdvaW5nIGF3YXksIGFuZCB0aGVyZSB3YXMgYSBncmVhdCBzbGF1Z2h0ZXIgYW1vbmcgdGhlbTsgbWFueSBvZiB0aGVpciBzaGlwcywgdG9vLCB3ZXJlIGRhc2hlZCB0b2dldGhlciwgYW5kIHRoZXkgY291bGQgbm90IHJldGFsaWF0ZSBpbiBhbnkgd2F5IHVwb24gdGhlaXIgZm9lcy4gRm9yIEFyY2hpbWVkZXMgaGFkIGJ1aWx0IG1vc3Qgb2YgaGlzIGVuZ2luZXMgY2xvc2UgYmVoaW5kIHRoZSB3YWxsLCBhbmQgdGhlIFJvbWFucyBzZWVtZWQgdG8gYmUgZmlnaHRpbmcgYWdhaW5zdCB0aGUgZ29kcywgbm93IHRoYXQgY291bnRsZXNzIG1pc2NoaWVmcyB3ZXJlIHBvdXJlZCBvdXQgdXBvbiB0aGVtIGZyb20gYW4gaW52aXNpYmxlIHNvdXJjZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgdGhlcmVmb3JlLCB0aGUgUm9tYW5zIGNhbWUgdXAgdW5kZXIgdGhlIHdhbGxzLCB0aGlua2luZyB0aGVtc2VsdmVzIHVubm90aWNlZCwgb25jZSBtb3JlIHRoZXkgZW5jb3VudGVyZWQgYSBncmVhdCBzdG9ybSBvZiBtaXNzaWxlczsgaHVnZSBzdG9uZXMgY2FtZSB0dW1ibGluZyBkb3duIHVwb24gdGhlbSBhbG1vc3QgcGVycGVuZGljdWxhcmx5LCBhbmQgdGhlIHdhbGwgc2hvdCBvdXQgYXJyb3dzIGF0IHRoZW0gZnJvbSBldmVyeSBwb2ludDsgdGhleSB0aGVyZWZvcmUgcmV0aXJlZC4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZXJlIGFnYWluLCB3aGVuIHRoZXkgd2VyZSBzb21lIGRpc3RhbmNlIG9mZiwgbWlzc2lsZXMgZGFydGVkIGZvcnRoIGFuZCBmZWxsIHVwb24gdGhlbSBhcyB0aGV5IHdlcmUgZ29pbmcgYXdheSwgYW5kIHRoZXJlIHdhcyBhIGdyZWF0IHNsYXVnaHRlciBhbW9uZyB0aGVtOyBtYW55IG9mIHRoZWlyIHNoaXBzLCB0b28sIHdlcmUgZGFzaGVkIHRvZ2V0aGVyLCBhbmQgdGhleSBjb3VsZCBub3QgcmV0YWxpYXRlIGluIGFueSB3YXkgdXBvbiB0aGVpciBmb2VzLiBGb3IgQXJjaGltZWRlcyBoYWQgYnVpbHQgbW9zdCBvZiBoaXMgZW5naW5lcyBjbG9zZSBiZWhpbmQgdGhlIHdhbGwsIGFuZCB0aGUgUm9tYW5zIHNlZW1lZCB0byBiZSBmaWdodGluZyBhZ2FpbnN0IHRoZSBnb2RzLCBub3cgdGhhdCBjb3VudGxlc3MgbWlzY2hpZWZzIHdlcmUgcG91cmVkIG91dCB1cG9uIHRoZW0gZnJvbSBhbiBpbnZpc2libGUgc291cmNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBNYXJjZWxsdXMgbWFkZSBoaXMgZXNjYXBlLCBhbmQgamVzdGluZyB3aXRoIGhpcyBvd24gYXJ0aWZpY2VycyBhbmQgZW5naW5lZXJzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCB1cyBzdG9wLDwvcT4gIHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZmlnaHRpbmcgYWdhaW5zdCB0aGlzIGdlb21ldHJpY2FsIEJyaWFyZXVzLCB3aG8gdXNlcyBvdXIgc2hpcHMgbGlrZSBjdXBzIHRvIGxhZGxlIHdhdGVyIGZyb20gdGhlIHNlYSwgYW5kIGhhcyB3aGlwcGVkIGFuZCBkcml2ZW4gb2ZmIGluIGRpc2dyYWNlIG91ciBzYW1idWNhLCBhbmQgd2l0aCB0aGUgbWFueSBtaXNzaWxlcyB3aGljaCBoZSBzaG9vdHMgYWdhaW5zdCB1cyBhbGwgYXQgb25jZSwgb3V0ZG9lcyB0aGUgaHVuZHJlZC1oYW5kZWQgbW9uc3RlcnMgb2YgbXl0aG9sb2d5LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gcmVhbGl0eSBhbGwgdGhlIHJlc3Qgb2YgdGhlIFN5cmFjdXNhbnMgd2VyZSBidXQgYSBib2R5IGZvciB0aGUgZGVzaWducyBvZiBBcmNoaW1lZGVzLCBhbmQgaGlzIHRoZSBvbmUgc291bCBtb3ZpbmcgYW5kIG1hbmFnaW5nIGV2ZXJ5dGhpbmc7IGZvciBhbGwgb3RoZXIgd2VhcG9ucyBsYXkgaWRsZSwgYW5kIGhpcyBhbG9uZSB3ZXJlIHRoZW4gZW1wbG95ZWQgYnkgdGhlIGNpdHkgYm90aCBpbiBvZmZlbmNlIGFuZCBkZWZlbmNlLiAgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgbGFzdCB0aGUgUm9tYW5zIGJlY2FtZSBzbyBmZWFyZnVsIHRoYXQsIHdoZW5ldmVyIHRoZXkgc2F3IGEgYml0IG9mIHJvcGUgb3IgYSBzdGljayBvZiB0aW1iZXIgcHJvamVjdGluZyBhIGxpdHRsZSBvdmVyIHRoZSB3YWxsLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXJlIGl0IGlzLDwvcT4gdGhleSBjcmllZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BcmNoaW1lZGVzIGlzIHRyYWluaW5nIHNvbWUgZW5naW5lIHVwb24gdXMsPC9xPiBhbmQgdHVybmVkIHRoZWlyIGJhY2tzIGFuZCBmbGVkLiAgU2VlaW5nIHRoaXMsIE1hcmNlbGx1cyBkZXNpc3RlZCBmcm9tIGFsbCBmaWdodGluZyBhbmQgYXNzYXVsdCwgYW5kIHRoZW5jZWZvcnRoIGRlcGVuZGVkIG9uIGEgbG9uZyBzaWVnZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgTWFyY2VsbHVzIG1hZGUgaGlzIGVzY2FwZSwgYW5kIGplc3Rpbmcgd2l0aCBoaXMgb3duIGFydGlmaWNlcnMgYW5kIGVuZ2luZWVycywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCB1cyBzdG9wLDwvcT4gIHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5maWdodGluZyBhZ2FpbnN0IHRoaXMgZ2VvbWV0cmljYWwgQnJpYXJldXMsIHdobyB1c2VzIG91ciBzaGlwcyBsaWtlIGN1cHMgdG8gbGFkbGUgd2F0ZXIgZnJvbSB0aGUgc2VhLCBhbmQgaGFzIHdoaXBwZWQgYW5kIGRyaXZlbiBvZmYgaW4gZGlzZ3JhY2Ugb3VyIHNhbWJ1Y2EsIGFuZCB3aXRoIHRoZSBtYW55IG1pc3NpbGVzIHdoaWNoIGhlIHNob290cyBhZ2FpbnN0IHVzIGFsbCBhdCBvbmNlLCBvdXRkb2VzIHRoZSBodW5kcmVkLWhhbmRlZCBtb25zdGVycyBvZiBteXRob2xvZ3kuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiByZWFsaXR5IGFsbCB0aGUgcmVzdCBvZiB0aGUgU3lyYWN1c2FucyB3ZXJlIGJ1dCBhIGJvZHkgZm9yIHRoZSBkZXNpZ25zIG9mIEFyY2hpbWVkZXMsIGFuZCBoaXMgdGhlIG9uZSBzb3VsIG1vdmluZyBhbmQgbWFuYWdpbmcgZXZlcnl0aGluZzsgZm9yIGFsbCBvdGhlciB3ZWFwb25zIGxheSBpZGxlLCBhbmQgaGlzIGFsb25lIHdlcmUgdGhlbiBlbXBsb3llZCBieSB0aGUgY2l0eSBib3RoIGluIG9mZmVuY2UgYW5kIGRlZmVuY2UuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IGxhc3QgdGhlIFJvbWFucyBiZWNhbWUgc28gZmVhcmZ1bCB0aGF0LCB3aGVuZXZlciB0aGV5IHNhdyBhIGJpdCBvZiByb3BlIG9yIGEgc3RpY2sgb2YgdGltYmVyIHByb2plY3RpbmcgYSBsaXR0bGUgb3ZlciB0aGUgd2FsbCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXJlIGl0IGlzLDwvcT4gdGhleSBjcmllZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFyY2hpbWVkZXMgaXMgdHJhaW5pbmcgc29tZSBlbmdpbmUgdXBvbiB1cyw8L3E+IGFuZCB0dXJuZWQgdGhlaXIgYmFja3MgYW5kIGZsZWQuICBTZWVpbmcgdGhpcywgTWFyY2VsbHVzIGRlc2lzdGVkIGZyb20gYWxsIGZpZ2h0aW5nIGFuZCBhc3NhdWx0LCBhbmQgdGhlbmNlZm9ydGggZGVwZW5kZWQgb24gYSBsb25nIHNpZWdlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB5ZXQgQXJjaGltZWRlcyBwb3NzZXNzZWQgc3VjaCBhIGxvZnR5IHNwaXJpdCwgc28gcHJvZm91bmQgYSBzb3VsLCBhbmQgc3VjaCBhIHdlYWx0aCBvZiBzY2llbnRpZmljIHRoZW9yeSwgdGhhdCBhbHRob3VnaCBoaXMgaW52ZW50aW9ucyBoYWQgd29uIGZvciBoaW0gYSBuYW1lIGFuZCBmYW1lIGZvciBzdXBlcmh1bWFuIHNhZ2FjaXR5LCAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhlIHdvdWxkIG5vdCBjb25zZW50IHRvIGxlYXZlIGJlaGluZCBoaW0gYW55IHRyZWF0aXNlIG9uIHRoaXMgc3ViamVjdCwgYnV0IHJlZ2FyZGluZyB0aGUgd29yayBvZiBhbiBlbmdpbmVlciBhbmQgZXZlcnkgYXJ0IHRoYXQgbWluaXN0ZXJzIHRvIHRoZSBuZWVkcyBvZiBsaWZlIGFzIGlnbm9ibGUgYW5kIHZ1bGdhciwgaGUgZGV2b3RlZCBoaXMgZWFybmVzdCBlZmZvcnRzIG9ubHkgdG8gdGhvc2Ugc3R1ZGllcyB0aGUgc3VidGxldHkgYW5kIGNoYXJtIG9mIHdoaWNoIGFyZSBub3QgYWZmZWN0ZWQgYnkgdGhlIGNsYWltcyBvZiBuZWNlc3NpdHkuIFRoZXNlIHN0dWRpZXMsIGhlIHRob3VnaHQsIGFyZSBub3QgdG8gYmUgY29tcGFyZWQgd2l0aCBhbnkgb3RoZXJzOyBpbiB0aGVtIHRoZSBzdWJqZWN0IG1hdHRlciB2aWVzIHdpdGggdGhlIGRlbW9uc3RyYXRpb24sIHRoZSBmb3JtZXIgc3VwcGx5aW5nIGdyYW5kZXVyIGFuZCBiZWF1dHksIHRoZSBsYXR0ZXIgcHJlY2lzaW9uIGFuZCBzdXJwYXNzaW5nIHBvd2VyLiAgIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyBub3QgcG9zc2libGUgdG8gZmluZCBpbiBnZW9tZXRyeSBtb3JlICAgcHJvZm91bmQgYW5kIGRpZmZpY3VsdCBxdWVzdGlvbnMgdHJlYXRlZCBpbiBzaW1wbGVyIGFuZCBwdXJlciB0ZXJtcy4gU29tZSBhdHRyaWJ1dGUgdGhpcyBzdWNjZXNzIHRvIGhpcyBuYXR1cmFsIGVuZG93bWVudHM7IG90aGVycyB0aGluayBpdCBkdWUgdG8gZXhjZXNzaXZlIGxhYm91ciB0aGF0IGV2ZXJ5dGhpbmcgaGUgZGlkIHNlZW1lZCB0byBoYXZlIGJlZW4gcGVyZm9ybWVkIHdpdGhvdXQgbGFib3VyIGFuZCB3aXRoIGVhc2UuICBGb3Igbm8gb25lIGNvdWxkIGJ5IGhpcyBvd24gZWZmb3J0cyBkaXNjb3ZlciB0aGUgcHJvb2YsIGFuZCB5ZXQgYXMgc29vbiBhcyBoZSBsZWFybnMgaXQgZnJvbSBoaW0sIGhlIHRoaW5rcyBoZSBtaWdodCBoYXZlIGRpc2NvdmVyZWQgaXQgaGltc2VsZjsgc28gc21vb3RoIGFuZCByYXBpZCBpcyB0aGUgcGF0aCBieSB3aGljaCBoZSBsZWFkcyBvbmUgdG8gdGhlIGRlc2lyZWQgY29uY2x1c2lvbi4gIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVyZWZvcmUgd2UgbWF5IG5vdCBkaXNiZWxpZXZlIHRoZSBzdG9yaWVzIHRvbGQgYWJvdXQgaGltLCBob3csIHVuZGVyIHRoZSBsYXN0aW5nIGNoYXJtIG9mIHNvbWUgZmFtaWxpYXIgYW5kIGRvbWVzdGljIFNpcmVuLCBoZSBmb3Jnb3QgZXZlbiBoaXMgZm9vZCBhbmQgbmVnbGVjdGVkIHRoZSBjYXJlIG9mIGhpcyBwZXJzb247IGFuZCBob3csIHdoZW4gaGUgd2FzIGRyYWdnZWQgYnkgbWFpbiBmb3JjZSwgYXMgaGUgb2Z0ZW4gd2FzLCB0byB0aGUgcGxhY2UgZm9yIGJhdGhpbmcgYW5kIGFub2ludGluZyBoaXMgYm9keSwgaGUgd291bGQgdHJhY2UgZ2VvbWV0cmljYWwgZmlndXJlcyBpbiB0aGUgYXNoZXMsIGFuZCBkcmF3IGxpbmVzIHdpdGggaGlzIGZpbmdlciBpbiB0aGUgb2lsIHdpdGggd2hpY2ggaGlzIGJvZHkgd2FzIGFub2ludGVkLCBiZWluZyBwb3NzZXNzZWQgYnkgYSBncmVhdCBkZWxpZ2h0LCBhbmQgaW4gdmVyeSB0cnV0aCBhIGNhcHRpdmUgb2YgdGhlIE11c2VzLiAgCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFsdGhvdWdoIGhlIG1hZGUgbWFueSBleGNlbGxlbnQgZGlzY292ZXJpZXMsIGhlIGlzIHNhaWQgdG8gaGF2ZSBhc2tlZCBoaXMga2luc21lbiBhbmQgZnJpZW5kcyB0byBwbGFjZSBvdmVyIHRoZSBncmF2ZSB3aGVyZSBoZSBzaG91bGQgYmUgYnVyaWVkIGEgY3lsaW5kZXIgZW5jbG9zaW5nIGEgc3BoZXJlLCB3aXRoIGFuIGluc2NyaXB0aW9uIGdpdmluZyB0aGUgcHJvcG9ydGlvbiBieSB3aGljaCB0aGUgY29udGFpbmluZyBzb2xpZCBleGNlZWRzIHRoZSBjb250YWluZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+V2hlbiBDaWNlcm8gd2FzIHF1YWVzdG9yIGluIFNpY2lseSAoNzUgQi5DLiksIGhlIGZvdW5kIHRoaXMgdG9tYiwgd2hpY2ggaGFkIGJlZW4gbmVnbGVjdGVkIGFuZCBmb3Jnb3R0ZW4gYnkgdGhlIFN5cmFjdXNhbnMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFR1c2MuIDUuNjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+VHVzYy4gRGlzcC48L3RpdGxlPiB2LiA2NCBmZi48L2JpYmw+KS48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhlIHdvdWxkIG5vdCBjb25zZW50IHRvIGxlYXZlIGJlaGluZCBoaW0gYW55IHRyZWF0aXNlIG9uIHRoaXMgc3ViamVjdCwgYnV0IHJlZ2FyZGluZyB0aGUgd29yayBvZiBhbiBlbmdpbmVlciBhbmQgZXZlcnkgYXJ0IHRoYXQgbWluaXN0ZXJzIHRvIHRoZSBuZWVkcyBvZiBsaWZlIGFzIGlnbm9ibGUgYW5kIHZ1bGdhciwgaGUgZGV2b3RlZCBoaXMgZWFybmVzdCBlZmZvcnRzIG9ubHkgdG8gdGhvc2Ugc3R1ZGllcyB0aGUgc3VidGxldHkgYW5kIGNoYXJtIG9mIHdoaWNoIGFyZSBub3QgYWZmZWN0ZWQgYnkgdGhlIGNsYWltcyBvZiBuZWNlc3NpdHkuIFRoZXNlIHN0dWRpZXMsIGhlIHRob3VnaHQsIGFyZSBub3QgdG8gYmUgY29tcGFyZWQgd2l0aCBhbnkgb3RoZXJzOyBpbiB0aGVtIHRoZSBzdWJqZWN0IG1hdHRlciB2aWVzIHdpdGggdGhlIGRlbW9uc3RyYXRpb24sIHRoZSBmb3JtZXIgc3VwcGx5aW5nIGdyYW5kZXVyIGFuZCBiZWF1dHksIHRoZSBsYXR0ZXIgcHJlY2lzaW9uIGFuZCBzdXJwYXNzaW5nIHBvd2VyLiAgIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyBub3QgcG9zc2libGUgdG8gZmluZCBpbiBnZW9tZXRyeSBtb3JlICAgcHJvZm91bmQgYW5kIGRpZmZpY3VsdCBxdWVzdGlvbnMgdHJlYXRlZCBpbiBzaW1wbGVyIGFuZCBwdXJlciB0ZXJtcy4gU29tZSBhdHRyaWJ1dGUgdGhpcyBzdWNjZXNzIHRvIGhpcyBuYXR1cmFsIGVuZG93bWVudHM7IG90aGVycyB0aGluayBpdCBkdWUgdG8gZXhjZXNzaXZlIGxhYm91ciB0aGF0IGV2ZXJ5dGhpbmcgaGUgZGlkIHNlZW1lZCB0byBoYXZlIGJlZW4gcGVyZm9ybWVkIHdpdGhvdXQgbGFib3VyIGFuZCB3aXRoIGVhc2UuICBGb3Igbm8gb25lIGNvdWxkIGJ5IGhpcyBvd24gZWZmb3J0cyBkaXNjb3ZlciB0aGUgcHJvb2YsIGFuZCB5ZXQgYXMgc29vbiBhcyBoZSBsZWFybnMgaXQgZnJvbSBoaW0sIGhlIHRoaW5rcyBoZSBtaWdodCBoYXZlIGRpc2NvdmVyZWQgaXQgaGltc2VsZjsgc28gc21vb3RoIGFuZCByYXBpZCBpcyB0aGUgcGF0aCBieSB3aGljaCBoZSBsZWFkcyBvbmUgdG8gdGhlIGRlc2lyZWQgY29uY2x1c2lvbi4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVyZWZvcmUgd2UgbWF5IG5vdCBkaXNiZWxpZXZlIHRoZSBzdG9yaWVzIHRvbGQgYWJvdXQgaGltLCBob3csIHVuZGVyIHRoZSBsYXN0aW5nIGNoYXJtIG9mIHNvbWUgZmFtaWxpYXIgYW5kIGRvbWVzdGljIFNpcmVuLCBoZSBmb3Jnb3QgZXZlbiBoaXMgZm9vZCBhbmQgbmVnbGVjdGVkIHRoZSBjYXJlIG9mIGhpcyBwZXJzb247IGFuZCBob3csIHdoZW4gaGUgd2FzIGRyYWdnZWQgYnkgbWFpbiBmb3JjZSwgYXMgaGUgb2Z0ZW4gd2FzLCB0byB0aGUgcGxhY2UgZm9yIGJhdGhpbmcgYW5kIGFub2ludGluZyBoaXMgYm9keSwgaGUgd291bGQgdHJhY2UgZ2VvbWV0cmljYWwgZmlndXJlcyBpbiB0aGUgYXNoZXMsIGFuZCBkcmF3IGxpbmVzIHdpdGggaGlzIGZpbmdlciBpbiB0aGUgb2lsIHdpdGggd2hpY2ggaGlzIGJvZHkgd2FzIGFub2ludGVkLCBiZWluZyBwb3NzZXNzZWQgYnkgYSBncmVhdCBkZWxpZ2h0LCBhbmQgaW4gdmVyeSB0cnV0aCBhIGNhcHRpdmUgb2YgdGhlIE11c2VzLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhbHRob3VnaCBoZSBtYWRlIG1hbnkgZXhjZWxsZW50IGRpc2NvdmVyaWVzLCBoZSBpcyBzYWlkIHRvIGhhdmUgYXNrZWQgaGlzIGtpbnNtZW4gYW5kIGZyaWVuZHMgdG8gcGxhY2Ugb3ZlciB0aGUgZ3JhdmUgd2hlcmUgaGUgc2hvdWxkIGJlIGJ1cmllZCBhIGN5bGluZGVyIGVuY2xvc2luZyBhIHNwaGVyZSwgd2l0aCBhbiBpbnNjcmlwdGlvbiBnaXZpbmcgdGhlIHByb3BvcnRpb24gYnkgd2hpY2ggdGhlIGNvbnRhaW5pbmcgc29saWQgZXhjZWVkcyB0aGUgY29udGFpbmVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+V2hlbiBDaWNlcm8gd2FzIHF1YWVzdG9yIGluIFNpY2lseSAoNzUgQi5DLiksIGhlIGZvdW5kIHRoaXMgdG9tYiwgd2hpY2ggaGFkIGJlZW4gbmVnbGVjdGVkIGFuZCBmb3Jnb3R0ZW4gYnkgdGhlIFN5cmFjdXNhbnMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gVHVzYy4gNS42NCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlR1c2MuIERpc3AuPC90aXRsZT4gdi4gNjQgZmYuPC9iaWJsPikuPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFR1c2MuIDUuNjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UdXNjLiBEaXNwLjwvdGl0bGU+IHYuIDY0IGZmLjwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlR1c2MuIERpc3AuPC90aXRsZT4gdi4gNjQgZmYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgd2FzIEFyY2hpbWVkZXMsIGFuZCwgc28gZmFyIGFzIGhlIGhpbXNlbGYgd2FzIGNvbmNlcm5lZCwgaGUgbWFpbnRhaW5lZCBoaW1zZWxmIGFuZCBoaXMgY2l0eSB1bmNvbnF1ZXJlZC4gIEJ1dCBkdXJpbmcgdGhlIHByb2dyZXNzIG9mIHRoZSBzaWVnZSBNYXJjZWxsdXMgY2FwdHVyZWQgTWVnYXJhLCBvbmUgb2YgdGhlIG1vc3QgYW5jaWVudCBjaXRpZXMgb2YgU2ljaWx5OyBoZSBhbHNvIGNhcHR1cmVkIHRoZSBjYW1wIG9mIEhpcHBvY3JhdGVzIGF0IEFjcmlsbGFlIGFuZCBraWxsZWQgbW9yZSB0aGFuIGVpZ2h0IHRob3VzYW5kIG1lbiwgaGF2aW5nIGF0dGFja2VkIHRoZW0gYXMgdGhleSB3ZXJlIHRocm93aW5nIHVwIGVudHJlbmNobWVudHM7IGZ1cnRoZXJtb3JlLCBoZSBvdmVycmFuIGEgZ3JlYXQgcGFydCBvZiBTaWNpbHksIGJyb3VnaHQgY2l0aWVzIG92ZXIgZnJvbSB0aGUgQ2FydGhhZ2luaWFucywgYW5kIHdhcyBldmVyeXdoZXJlIHZpY3RvcmlvdXMgb3ZlciB0aG9zZSB3aG8gdmVudHVyZWQgdG8gb3Bwb3NlIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSB0aW1lIGFmdGVyd2FyZHMgaGUgbWFkZSBhIHByaXNvbmVyIG9mIGEgY2VydGFpbiBEYW1pcHB1cywgYSBTcGFydGFuIHdobyB0cmllZCB0byBzYWlsIGF3YXkgZnJvbSBTeXJhY3VzZS4gIFRoZSBTeXJhY3VzYW5zIHNvdWdodCB0byByYW5zb20gdGhpcyBtYW4gYmFjaywgYW5kIGR1cmluZyB0aGUgZnJlcXVlbnQgbWVldGluZ3MgYW5kIGNvbmZlcmVuY2VzIHdoaWNoIGhlIGhlbGQgd2l0aCB0aGVtIGFib3V0IHRoZSBtYXR0ZXIsIE1hcmNlbGx1cyBub3RpY2VkIGEgY2VydGFpbiB0b3dlciB0aGF0IHdhcyBjYXJlbGVzc2x5IGd1YXJkZWQsIGludG8gd2hpY2ggbWVuIGNvdWxkIGJlIHNlY3JldGx5IGludHJvZHVjZWQsIHNpbmNlIHRoZSB3YWxsIG5lYXIgaXQgd2FzIGVhc3kgdG8gc3VybW91bnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwgaW4gaGlzIGZyZXF1ZW50IGFwcHJvYWNoZXMgdG8gaXQgZm9yIGhvbGRpbmcgdGhlc2UgY29uZmVyZW5jZXMsIHRoZSBoZWlnaHQgb2YgdGhlIHRvd2VyIGhhZCBiZWVuIGNhcmVmdWxseSBlc3RpbWF0ZWQsIGFuZCBsYWRkZXJzIGhhZCBiZWVuIHByZXBhcmVkLCBoZSBzZWl6ZWQgaGlzIG9wcG9ydHVuaXR5IHdoZW4gdGhlIFN5cmFjdXNhbnMgd2VyZSBjZWxlYnJhdGluZyBhIGZlc3RpdmFsIGluIGhvbm91ciBvZiBBcnRlbWlzIGFuZCB3ZXJlIGdpdmVuIG92ZXIgdG8gd2luZSBhbmQgc3BvcnQsIGFuZCBiZWZvcmUgdGhleSBrbmV3IG9mIGhpcyBhdHRlbXB0IG5vdCBvbmx5IGdvdCBwb3NzZXNzaW9uIG9mIHRoZSB0b3dlciwgYnV0IGFsc28gZmlsbGVkIHRoZSB3YWxsIHJvdW5kIGFib3V0IHdpdGggYXJtZWQgbWVuLCBiZWZvcmUgdGhlIGJyZWFrIG9mIGRheSwgYW5kIGN1dCBoaXMgd2F5IHRocm91Z2ggdGhlIEhleGFweWxhLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBTeXJhY3VzYW5zIHBlcmNlaXZlZCB0aGlzIGFuZCBiZWdhbiB0byBydW4gYWJvdXQgY29uZnVzZWRseSwgaGUgb3JkZXJlZCB0aGUgdHJ1bXBldHMgdG8gc291bmQgb24gYWxsIHNpZGVzIGF0IG9uY2UgYW5kIHRodXMgcHV0IHRoZW0gdG8gZmxpZ2h0IGluIGdyZWF0IHRlcnJvciwgYmVsaWV2aW5nIGFzIHRoZXkgZGlkIHRoYXQgbm8gcGFydCBvZiB0aGUgY2l0eSByZW1haW5lZCB1bmNhcHR1cmVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxiLiA4LjM3IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgdmlpaS4gMzc8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNS4yMy4xIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHYuIDIzIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoZXJlIHJlbWFpbmVkLCBob3dldmVyLCB0aGUgc3Ryb25nZXN0LCBtb3N0IGJlYXV0aWZ1bCwgYW5kIGxhcmdlc3QgcGFydCAoY2FsbGVkIEFjaHJhZGluYSksIGJlY2F1c2UgaXQgaGFkIGJlZW4gZm9ydGlmaWVkIG9uIHRoZSBzaWRlIHRvd2FyZHMgdGhlIG91dGVyIGNpdHksIG9uZSBwYXJ0IG9mIHdoaWNoIHRoZXkgY2FsbCBOZWFwb2xpcywgYW5kIGFub3RoZXIgVHljaGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgd2FzIEFyY2hpbWVkZXMsIGFuZCwgc28gZmFyIGFzIGhlIGhpbXNlbGYgd2FzIGNvbmNlcm5lZCwgaGUgbWFpbnRhaW5lZCBoaW1zZWxmIGFuZCBoaXMgY2l0eSB1bmNvbnF1ZXJlZC4gIEJ1dCBkdXJpbmcgdGhlIHByb2dyZXNzIG9mIHRoZSBzaWVnZSBNYXJjZWxsdXMgY2FwdHVyZWQgTWVnYXJhLCBvbmUgb2YgdGhlIG1vc3QgYW5jaWVudCBjaXRpZXMgb2YgU2ljaWx5OyBoZSBhbHNvIGNhcHR1cmVkIHRoZSBjYW1wIG9mIEhpcHBvY3JhdGVzIGF0IEFjcmlsbGFlIGFuZCBraWxsZWQgbW9yZSB0aGFuIGVpZ2h0IHRob3VzYW5kIG1lbiwgaGF2aW5nIGF0dGFja2VkIHRoZW0gYXMgdGhleSB3ZXJlIHRocm93aW5nIHVwIGVudHJlbmNobWVudHM7IGZ1cnRoZXJtb3JlLCBoZSBvdmVycmFuIGEgZ3JlYXQgcGFydCBvZiBTaWNpbHksIGJyb3VnaHQgY2l0aWVzIG92ZXIgZnJvbSB0aGUgQ2FydGhhZ2luaWFucywgYW5kIHdhcyBldmVyeXdoZXJlIHZpY3RvcmlvdXMgb3ZlciB0aG9zZSB3aG8gdmVudHVyZWQgdG8gb3Bwb3NlIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgdGltZSBhZnRlcndhcmRzIGhlIG1hZGUgYSBwcmlzb25lciBvZiBhIGNlcnRhaW4gRGFtaXBwdXMsIGEgU3BhcnRhbiB3aG8gdHJpZWQgdG8gc2FpbCBhd2F5IGZyb20gU3lyYWN1c2UuICBUaGUgU3lyYWN1c2FucyBzb3VnaHQgdG8gcmFuc29tIHRoaXMgbWFuIGJhY2ssIGFuZCBkdXJpbmcgdGhlIGZyZXF1ZW50IG1lZXRpbmdzIGFuZCBjb25mZXJlbmNlcyB3aGljaCBoZSBoZWxkIHdpdGggdGhlbSBhYm91dCB0aGUgbWF0dGVyLCBNYXJjZWxsdXMgbm90aWNlZCBhIGNlcnRhaW4gdG93ZXIgdGhhdCB3YXMgY2FyZWxlc3NseSBndWFyZGVkLCBpbnRvIHdoaWNoIG1lbiBjb3VsZCBiZSBzZWNyZXRseSBpbnRyb2R1Y2VkLCBzaW5jZSB0aGUgd2FsbCBuZWFyIGl0IHdhcyBlYXN5IHRvIHN1cm1vdW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwgaW4gaGlzIGZyZXF1ZW50IGFwcHJvYWNoZXMgdG8gaXQgZm9yIGhvbGRpbmcgdGhlc2UgY29uZmVyZW5jZXMsIHRoZSBoZWlnaHQgb2YgdGhlIHRvd2VyIGhhZCBiZWVuIGNhcmVmdWxseSBlc3RpbWF0ZWQsIGFuZCBsYWRkZXJzIGhhZCBiZWVuIHByZXBhcmVkLCBoZSBzZWl6ZWQgaGlzIG9wcG9ydHVuaXR5IHdoZW4gdGhlIFN5cmFjdXNhbnMgd2VyZSBjZWxlYnJhdGluZyBhIGZlc3RpdmFsIGluIGhvbm91ciBvZiBBcnRlbWlzIGFuZCB3ZXJlIGdpdmVuIG92ZXIgdG8gd2luZSBhbmQgc3BvcnQsIGFuZCBiZWZvcmUgdGhleSBrbmV3IG9mIGhpcyBhdHRlbXB0IG5vdCBvbmx5IGdvdCBwb3NzZXNzaW9uIG9mIHRoZSB0b3dlciwgYnV0IGFsc28gZmlsbGVkIHRoZSB3YWxsIHJvdW5kIGFib3V0IHdpdGggYXJtZWQgbWVuLCBiZWZvcmUgdGhlIGJyZWFrIG9mIGRheSwgYW5kIGN1dCBoaXMgd2F5IHRocm91Z2ggdGhlIEhleGFweWxhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIFN5cmFjdXNhbnMgcGVyY2VpdmVkIHRoaXMgYW5kIGJlZ2FuIHRvIHJ1biBhYm91dCBjb25mdXNlZGx5LCBoZSBvcmRlcmVkIHRoZSB0cnVtcGV0cyB0byBzb3VuZCBvbiBhbGwgc2lkZXMgYXQgb25jZSBhbmQgdGh1cyBwdXQgdGhlbSB0byBmbGlnaHQgaW4gZ3JlYXQgdGVycm9yLCBiZWxpZXZpbmcgYXMgdGhleSBkaWQgdGhhdCBubyBwYXJ0IG9mIHRoZSBjaXR5IHJlbWFpbmVkIHVuY2FwdHVyZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiA4LjM3IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgdmlpaS4gMzc8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI1LjIzLjEiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4di4gMjMgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlcmUgcmVtYWluZWQsIGhvd2V2ZXIsIHRoZSBzdHJvbmdlc3QsIG1vc3QgYmVhdXRpZnVsLCBhbmQgbGFyZ2VzdCBwYXJ0IChjYWxsZWQgQWNocmFkaW5hKSwgYmVjYXVzZSBpdCBoYWQgYmVlbiBmb3J0aWZpZWQgb24gdGhlIHNpZGUgdG93YXJkcyB0aGUgb3V0ZXIgY2l0eSwgb25lIHBhcnQgb2Ygd2hpY2ggdGhleSBjYWxsIE5lYXBvbGlzLCBhbmQgYW5vdGhlciBUeWNoZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiA4LjM3IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgdmlpaS4gMzc8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI1LjIzLjEiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4di4gMjMgZi48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlc2UgcGFydHMgYWxzbyB3ZXJlIGluIGhpcyBwb3NzZXNzaW9uLCBhdCBicmVhayBvZiBkYXkgTWFyY2VsbHVzIHdlbnQgZG93biBpbnRvIHRoZSBjaXR5IHRocm91Z2ggdGhlIEhleGFweWxhLCBjb25ncmF0dWxhdGVkIGJ5IHRoZSBvZmZpY2VycyB1bmRlciBoaW0uICAgIEhlIGhpbXNlbGYsIGhvd2V2ZXIsIGFzIGhlIGxvb2tlZCBkb3duIGZyb20gdGhlIGhlaWdodHMgYW5kIHN1cnZleWVkIHRoZSBncmVhdCBhbmQgYmVhdXRpZnVsIGNpdHksIGlzIHNhaWQgdG8gaGF2ZSB3ZXB0IG11Y2ggaW4gY29tbWlzZXJhdGlvbiBvZiBpdHMgaW1wZW5kaW5nIGZhdGUsIGJlYXJpbmcgaW4gbWluZCBob3cgZ3JlYXRseSBpdHMgZm9ybSBhbmQgYXBwZWFyYW5jZSB3b3VsZCBjaGFuZ2UgaW4gYSBsaXR0bGUgd2hpbGUsIGFmdGVyIGhpcyBhcm15IGhhZCBzYWNrZWQgaXQuICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYW1vbmcgaGlzIG9mZmljZXJzIHRoZXJlIHdhcyBub3QgYSBtYW4gd2hvIGhhZCB0aGUgY291cmFnZSB0byBvcHBvc2UgdGhlIHNvbGRpZXJzJyBkZW1hbmQgZm9yIGEgaGFydmVzdCBvZiBwbHVuZGVyLCBuYXksIG1hbnkgb2YgdGhlbSBhY3R1YWxseSB1cmdlZCB0aGF0IHRoZSBjaXR5IHNob3VsZCBiZSBidXJuZWQgYW5kIHJhemVkIHRvIHRoZSBncm91bmQuIFRoaXMgcHJvcG9zYWwsIGhvd2V2ZXIsIE1hcmNlbGx1cyB3b3VsZCBub3QgdG9sZXJhdGUgYXQgYWxsLCBidXQgbXVjaCBhZ2FpbnN0IGhpcyB3aWxsLCBhbmQgdW5kZXIgY29tcHVsc2lvbiwgaGUgcGVybWl0dGVkIGJvb3R5IHRvIGJlIG1hZGUgb2YgcHJvcGVydHkgYW5kIHNsYXZlcywgYWx0aG91Z2ggaGUgZm9yYmFkZSBoaXMgbWVuIHRvIGxheSBoYW5kcyBvbiAgdGhlIGZyZWUgY2l0aXplbnMsIGFuZCBzdHJpY3RseSBvcmRlcmVkIHRoZW0gbmVpdGhlciB0byBraWxsIG5vciBvdXRyYWdlIG5vciBlbnNsYXZlIGFueSBTeXJhY3VzYW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGVzZSBwYXJ0cyBhbHNvIHdlcmUgaW4gaGlzIHBvc3Nlc3Npb24sIGF0IGJyZWFrIG9mIGRheSBNYXJjZWxsdXMgd2VudCBkb3duIGludG8gdGhlIGNpdHkgdGhyb3VnaCB0aGUgSGV4YXB5bGEsIGNvbmdyYXR1bGF0ZWQgYnkgdGhlIG9mZmljZXJzIHVuZGVyIGhpbS4gICAgSGUgaGltc2VsZiwgaG93ZXZlciwgYXMgaGUgbG9va2VkIGRvd24gZnJvbSB0aGUgaGVpZ2h0cyBhbmQgc3VydmV5ZWQgdGhlIGdyZWF0IGFuZCBiZWF1dGlmdWwgY2l0eSwgaXMgc2FpZCB0byBoYXZlIHdlcHQgbXVjaCBpbiBjb21taXNlcmF0aW9uIG9mIGl0cyBpbXBlbmRpbmcgZmF0ZSwgYmVhcmluZyBpbiBtaW5kIGhvdyBncmVhdGx5IGl0cyBmb3JtIGFuZCBhcHBlYXJhbmNlIHdvdWxkIGNoYW5nZSBpbiBhIGxpdHRsZSB3aGlsZSwgYWZ0ZXIgaGlzIGFybXkgaGFkIHNhY2tlZCBpdC4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbW9uZyBoaXMgb2ZmaWNlcnMgdGhlcmUgd2FzIG5vdCBhIG1hbiB3aG8gaGFkIHRoZSBjb3VyYWdlIHRvIG9wcG9zZSB0aGUgc29sZGllcnMnIGRlbWFuZCBmb3IgYSBoYXJ2ZXN0IG9mIHBsdW5kZXIsIG5heSwgbWFueSBvZiB0aGVtIGFjdHVhbGx5IHVyZ2VkIHRoYXQgdGhlIGNpdHkgc2hvdWxkIGJlIGJ1cm5lZCBhbmQgcmF6ZWQgdG8gdGhlIGdyb3VuZC4gVGhpcyBwcm9wb3NhbCwgaG93ZXZlciwgTWFyY2VsbHVzIHdvdWxkIG5vdCB0b2xlcmF0ZSBhdCBhbGwsIGJ1dCBtdWNoIGFnYWluc3QgaGlzIHdpbGwsIGFuZCB1bmRlciBjb21wdWxzaW9uLCBoZSBwZXJtaXR0ZWQgYm9vdHkgdG8gYmUgbWFkZSBvZiBwcm9wZXJ0eSBhbmQgc2xhdmVzLCBhbHRob3VnaCBoZSBmb3JiYWRlIGhpcyBtZW4gdG8gbGF5IGhhbmRzIG9uICB0aGUgZnJlZSBjaXRpemVucywgYW5kIHN0cmljdGx5IG9yZGVyZWQgdGhlbSBuZWl0aGVyIHRvIGtpbGwgbm9yIG91dHJhZ2Ugbm9yIGVuc2xhdmUgYW55IFN5cmFjdXNhbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYWx0aG91Z2ggaGUgc2VlbXMgdG8gaGF2ZSBhY3RlZCB3aXRoIHN1Y2ggbW9kZXJhdGlvbiwgaGUgdGhvdWdodCB0aGF0IHRoZSBjaXR5IHN1ZmZlcmVkIGEgbGFtZW50YWJsZSBmYXRlLCBhbmQgYW1pZHN0IHRoZSBncmVhdCByZWpvaWNpbmcgb2YgaGlzIGZvbGxvd2VycyAgaGlzIHNwaXJpdCBuZXZlcnRoZWxlc3MgZXZpbmNlZCBpdHMgc3ltcGF0aHkgYW5kIGNvbW1pc2VyYXRpb24gd2hlbiBoZSBzYXcgYSBncmVhdCBhbmQgZ2xvcmlvdXMgcHJvc3Blcml0eSB2YW5pc2hpbmcgaW4gYSBicmllZiB0aW1lLgoJCQkJRm9yIGl0IGlzIHNhaWQgdGhhdCBubyBsZXNzIHdlYWx0aCB3YXMgY2FycmllZCBhd2F5IGZyb20gU3lyYWN1c2Ugbm93IHRoYW4gYXQgYSBsYXRlciB0aW1lIGZyb20gQ2FydGhhZ2U7IGZvciBub3QgbG9uZyBhZnRlcndhcmRzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjEyIEIuQy4sIHRoZSBzaWVnZSBoYXZpbmcgbGFzdGVkIG5lYXJseSB0aHJlZSB5ZWFycy4KCQkJCQlDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjUuMjQuMSIgdmFsaWQ9InllcyI+TGl2eSwgeHh2LiAyNC0zMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhlIHJlc3Qgb2YgdGhlIGNpdHkgd2FzIGJldHJheWVkIGFuZCB0YWtlbiBhbmQgc3ViamVjdGVkIHRvIHBpbGxhZ2UsIGV4Y2VwdGluZyB0aGUgcm95YWwgdHJlYXN1cmU7IHRoaXMgd2FzIGNvbnZlcnRlZCBpbnRvIHRoZSBwdWJsaWMgdHJlYXN1cnkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFsdGhvdWdoIGhlIHNlZW1zIHRvIGhhdmUgYWN0ZWQgd2l0aCBzdWNoIG1vZGVyYXRpb24sIGhlIHRob3VnaHQgdGhhdCB0aGUgY2l0eSBzdWZmZXJlZCBhIGxhbWVudGFibGUgZmF0ZSwgYW5kIGFtaWRzdCB0aGUgZ3JlYXQgcmVqb2ljaW5nIG9mIGhpcyBmb2xsb3dlcnMgIGhpcyBzcGlyaXQgbmV2ZXJ0aGVsZXNzIGV2aW5jZWQgaXRzIHN5bXBhdGh5IGFuZCBjb21taXNlcmF0aW9uIHdoZW4gaGUgc2F3IGEgZ3JlYXQgYW5kIGdsb3Jpb3VzIHByb3NwZXJpdHkgdmFuaXNoaW5nIGluIGEgYnJpZWYgdGltZS4KCQkJCUZvciBpdCBpcyBzYWlkIHRoYXQgbm8gbGVzcyB3ZWFsdGggd2FzIGNhcnJpZWQgYXdheSBmcm9tIFN5cmFjdXNlIG5vdyB0aGFuIGF0IGEgbGF0ZXIgdGltZSBmcm9tIENhcnRoYWdlOyBmb3Igbm90IGxvbmcgYWZ0ZXJ3YXJkczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjEyIEIuQy4sIHRoZSBzaWVnZSBoYXZpbmcgbGFzdGVkIG5lYXJseSB0aHJlZSB5ZWFycy4KCQkJCQlDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNS4yNC4xIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHYuIDI0LTMxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGUgcmVzdCBvZiB0aGUgY2l0eSB3YXMgYmV0cmF5ZWQgYW5kIHRha2VuIGFuZCBzdWJqZWN0ZWQgdG8gcGlsbGFnZSwgZXhjZXB0aW5nIHRoZSByb3lhbCB0cmVhc3VyZTsgdGhpcyB3YXMgY29udmVydGVkIGludG8gdGhlIHB1YmxpYyB0cmVhc3VyeS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNS4yNC4xIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHYuIDI0LTMxLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoYXQgbW9zdCBvZiBhbGwgYWZmbGljdGVkIE1hcmNlbGx1cyB3YXMgdGhlIGRlYXRoIG9mIEFyY2hpbWVkZXMuICAgIEZvciBpdCBjaGFuY2VkIHRoYXQgaGUgd2FzIGJ5IGhpbXNlbGYsIHdvcmtpbmcgb3V0IHNvbWUgcHJvYmxlbSB3aXRoIHRoZSBhaWQgb2YgYSBkaWFncmFtLCBhbmQgaGF2aW5nIGZpeGVkIGhpcyB0aG91Z2h0cyBhbmQgaGlzIGV5ZXMgYXMgd2VsbCB1cG9uIHRoZSBtYXR0ZXIgb2YgaGlzIHN0dWR5LCBoZSB3YXMgbm90IGF3YXJlIG9mIHRoZSBpbmN1cnNpb24gb2YgdGhlIFJvbWFucyBvciBvZiB0aGUgY2FwdHVyZSBvZiB0aGUgY2l0eS4gIFN1ZGRlbmx5IGEgc29sZGllciBjYW1lIHVwb24gaGltIGFuZCBvcmRlcmVkIGhpbSB0byBnbyB3aXRoIGhpbSB0byBNYXJjZWxsdXMuIFRoaXMgQXJjaGltZWRlcyByZWZ1c2VkIHRvIGRvIHVudGlsIGhlIGhhZCB3b3JrZWQgb3V0IGhpcyBwcm9ibGVtIGFuZCBlc3RhYmxpc2hlZCBoaXMgZGVtb25zdHJhdGlvbiwgd2hlcmV1cG9uIHRoZSBzb2xkaWVyIGZsZXcgaW50byBhIHBhc3Npb24sIGRyZXcgaGlzIHN3b3JkLCBhbmQgZGlzcGF0Y2hlZCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk90aGVycywgaG93ZXZlciwgc2F5IHRoYXQgdGhlIFJvbWFuIGNhbWUgdXBvbiBoaW0gd2l0aCBkcmF3biBzd29yZCB0aHJlYXRlbmluZyB0byBraWxsIGhpbSBhdCBvbmNlLCBhbmQgdGhhdCBBcmNoaW1lZGVzLCB3aGVuIGhlIHNhdyBoaW0sIGVhcm5lc3RseSBiZXNvdWdodCBoaW0gdG8gd2FpdCBhIGxpdHRsZSB3aGlsZSwgdGhhdCBoZSBtaWdodCBub3QgbGVhdmUgdGhlIHJlc3VsdCB0aGF0IGhlIHdhcyBzZWVraW5nIGluY29tcGxldGUgYW5kIHdpdGhvdXQgZGVtb25zdHJhdGlvbjsgYnV0IHRoZSBzb2xkaWVyIHBhaWQgbm8gaGVlZCB0byBoaW0gYW5kIG1hZGUgYW4gZW5kIG9mIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgaXMgYWxzbyBhIHRoaXJkIHN0b3J5LCB0aGF0IGFzIEFyY2hpbWVkZXMgd2FzIGNhcnJ5aW5nIHRvIE1hcmNlbGx1cyBzb21lIG9mIGhpcyBtYXRoZW1hdGljYWwgaW5zdHJ1bWVudHMsIHN1Y2ggYXMgc3VuLWRpYWxzIGFuZCBzcGhlcmVzIGFuZCBxdWFkcmFudHMsIGJ5IG1lYW5zIG9mIHdoaWNoIGhlIG1hZGUgdGhlIG1hZ25pdHVkZSBvZiB0aGUgc3VuIGFwcHJlY2lhYmxlIHRvIHRoZSBleWUsIHNvbWUgc29sZGllcnMgZmVsbCBpbiB3aXRoIGhpbSwgYW5kIHRoaW5raW5nIHRoYXQgaGUgd2FzIGNhcnJ5aW5nIGdvbGQgaW4gdGhlIGJveCwgc2xldyBoaW0uIEhvd2V2ZXIsIGl0IGlzIGdlbmVyYWxseSBhZ3JlZWQgdGhhdCBNYXJjZWxsdXMgd2FzIGFmZmxpY3RlZCBhdCBoaXMgZGVhdGgsIGFuZCB0dXJuZWQgYXdheSBmcm9tIGhpcyBzbGF5ZXIgYXMgZnJvbSBhIHBvbGx1dGVkIHBlcnNvbiwgYW5kIHNvdWdodCBvdXQgdGhlIGtpbmRyZWQgb2YgQXJjaGltZWRlcyBhbmQgcGFpZCB0aGVtIGhvbm91ci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGF0IG1vc3Qgb2YgYWxsIGFmZmxpY3RlZCBNYXJjZWxsdXMgd2FzIHRoZSBkZWF0aCBvZiBBcmNoaW1lZGVzLiAgICBGb3IgaXQgY2hhbmNlZCB0aGF0IGhlIHdhcyBieSBoaW1zZWxmLCB3b3JraW5nIG91dCBzb21lIHByb2JsZW0gd2l0aCB0aGUgYWlkIG9mIGEgZGlhZ3JhbSwgYW5kIGhhdmluZyBmaXhlZCBoaXMgdGhvdWdodHMgYW5kIGhpcyBleWVzIGFzIHdlbGwgdXBvbiB0aGUgbWF0dGVyIG9mIGhpcyBzdHVkeSwgaGUgd2FzIG5vdCBhd2FyZSBvZiB0aGUgaW5jdXJzaW9uIG9mIHRoZSBSb21hbnMgb3Igb2YgdGhlIGNhcHR1cmUgb2YgdGhlIGNpdHkuICBTdWRkZW5seSBhIHNvbGRpZXIgY2FtZSB1cG9uIGhpbSBhbmQgb3JkZXJlZCBoaW0gdG8gZ28gd2l0aCBoaW0gdG8gTWFyY2VsbHVzLiBUaGlzIEFyY2hpbWVkZXMgcmVmdXNlZCB0byBkbyB1bnRpbCBoZSBoYWQgd29ya2VkIG91dCBoaXMgcHJvYmxlbSBhbmQgZXN0YWJsaXNoZWQgaGlzIGRlbW9uc3RyYXRpb24sIHdoZXJldXBvbiB0aGUgc29sZGllciBmbGV3IGludG8gYSBwYXNzaW9uLCBkcmV3IGhpcyBzd29yZCwgYW5kIGRpc3BhdGNoZWQgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk90aGVycywgaG93ZXZlciwgc2F5IHRoYXQgdGhlIFJvbWFuIGNhbWUgdXBvbiBoaW0gd2l0aCBkcmF3biBzd29yZCB0aHJlYXRlbmluZyB0byBraWxsIGhpbSBhdCBvbmNlLCBhbmQgdGhhdCBBcmNoaW1lZGVzLCB3aGVuIGhlIHNhdyBoaW0sIGVhcm5lc3RseSBiZXNvdWdodCBoaW0gdG8gd2FpdCBhIGxpdHRsZSB3aGlsZSwgdGhhdCBoZSBtaWdodCBub3QgbGVhdmUgdGhlIHJlc3VsdCB0aGF0IGhlIHdhcyBzZWVraW5nIGluY29tcGxldGUgYW5kIHdpdGhvdXQgZGVtb25zdHJhdGlvbjsgYnV0IHRoZSBzb2xkaWVyIHBhaWQgbm8gaGVlZCB0byBoaW0gYW5kIG1hZGUgYW4gZW5kIG9mIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGlzIGFsc28gYSB0aGlyZCBzdG9yeSwgdGhhdCBhcyBBcmNoaW1lZGVzIHdhcyBjYXJyeWluZyB0byBNYXJjZWxsdXMgc29tZSBvZiBoaXMgbWF0aGVtYXRpY2FsIGluc3RydW1lbnRzLCBzdWNoIGFzIHN1bi1kaWFscyBhbmQgc3BoZXJlcyBhbmQgcXVhZHJhbnRzLCBieSBtZWFucyBvZiB3aGljaCBoZSBtYWRlIHRoZSBtYWduaXR1ZGUgb2YgdGhlIHN1biBhcHByZWNpYWJsZSB0byB0aGUgZXllLCBzb21lIHNvbGRpZXJzIGZlbGwgaW4gd2l0aCBoaW0sIGFuZCB0aGlua2luZyB0aGF0IGhlIHdhcyBjYXJyeWluZyBnb2xkIGluIHRoZSBib3gsIHNsZXcgaGltLiBIb3dldmVyLCBpdCBpcyBnZW5lcmFsbHkgYWdyZWVkIHRoYXQgTWFyY2VsbHVzIHdhcyBhZmZsaWN0ZWQgYXQgaGlzIGRlYXRoLCBhbmQgdHVybmVkIGF3YXkgZnJvbSBoaXMgc2xheWVyIGFzIGZyb20gYSBwb2xsdXRlZCBwZXJzb24sIGFuZCBzb3VnaHQgb3V0IHRoZSBraW5kcmVkIG9mIEFyY2hpbWVkZXMgYW5kIHBhaWQgdGhlbSBob25vdXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMgd2VyZSBjb25zaWRlcmVkIGJ5IGZvcmVpZ24gcGVvcGxlcyB0byBiZSBza2lsZnVsIGluIGNhcnJ5aW5nIG9uIHdhciBhbmQgZm9ybWlkYWJsZSBmaWdodGVyczsgYnV0IG9mIGdlbnRsZW5lc3MgYW5kIGh1bWFuaXR5IGFuZCwgaW4gYSB3b3JkLCBvZiBjaXZpbCB2aXJ0dWVzLCB0aGV5IGhhZCBnaXZlbiBubyBwcm9vZnMsIGFuZCBhdCB0aGlzIHRpbWUgTWFyY2VsbHVzIHNlZW1zIHRvIGhhdmUgYmVlbiB0aGUgZmlyc3QgdG8gc2hvdyB0aGUgR3JlZWtzIHRoYXQgdGhlIFJvbWFucyB3ZXJlIHRoZSBtb3JlIG9ic2VydmFudCBvZiBqdXN0aWNlLiAgIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBzdWNoIHdhcyBoaXMgdHJlYXRtZW50IG9mIHRob3NlIHdobyBoYWQgdG8gZG8gd2l0aCBoaW0sIGFuZCBzbyBtYW55IHdlcmUgdGhlIGJlbmVmaXRzIHdoaWNoIGhlIGNvbmZlcnJlZCBib3RoIHVwb24gY2l0aWVzIGFuZCBwcml2YXRlIHBlcnNvbnMsIHRoYXQsIGlmIHRoZSBwZW9wbGUgb2YgRW5uYSBvciBNZWdhcmEgb3IgU3lyYWN1c2UgbWV0IHdpdGggYW55IGluZGlnbml0aWVzLCB0aGUgYmxhbWUgZm9yIHRoZXNlIHdhcyB0aG91Z2h0IHRvIGJlbG9uZyB0byB0aGUgc3VmZmVyZXJzIHJhdGhlciB0aGFuIHRvIHRoZSBwZXJwZXRyYXRvcnMuICBBbmQgSSB3aWxsIG1lbnRpb24gb25lIGluc3RhbmNlIG91dCBvZiBtYW55LiAgVGhlcmUgaXMgYSBjaXR5IG9mIFNpY2lseSBjYWxsZWQgRW5neWl1bSwgbm90IGxhcmdlLCBidXQgdmVyeSBhbmNpZW50LCBhbmQgZmFtb3VzIGZvciB0aGUgYXBwZWFyYW5jZSB0aGVyZSBvZiBnb2RkZXNzZXMsIHdobyBhcmUgY2FsbGVkIE1vdGhlcnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TWFnbmEgTWF0ZXIsIHRoZSBDcmV0YW4gUmhhZWEsIG9mdGVuIGNvbmZvdW5kZWQgd2l0aCB0aGUgUGhyeWdpYW4gQ3liZWxlLiAgQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIj5EaW9kb3J1cywgaXYuIDc5LCA1LTc8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgdGVtcGxlIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGJ1aWx0IGJ5IENyZXRhbnMsIGFuZCBjZXJ0YWluIHNwZWFycyB3ZXJlIHNob3duIHRoZXJlLCBhbmQgYnJvbnplIGhlbG1ldHM7IHNvbWUgb2YgdGhlc2UgYm9yZSB0aGUgbmFtZSBvZiBNZXJpb25lcywgYW5kIG90aGVycyB0aGF0IG9mIFVseXNzZXMgKHRoYXQgaXMsIE9keXNzZXVzKSwgd2hvIGhhZCBjb25zZWNyYXRlZCB0aGVtIHRvIHRoZSBnb2RkZXNzZXMuICBUaGlzIGNpdHksIHdoaWNoICBtb3N0IGFyZGVudGx5IGZhdm91cmVkIHRoZSBDYXJ0aGFnaW5pYW4gY2F1c2UsIE5pY2lhcywgaXRzIGxlYWRpbmcgY2l0aXplbiwgdHJpZWQgdG8gaW5kdWNlIHRvIGdvIG92ZXIgdG8gdGhlIFJvbWFucywgc3BlYWtpbmcgb3Blbmx5IGFuZCBib2xkbHkgaW4gdGhlIGFzc2VtYmxpZXMgYW5kIGFyZ3VpbmcgdGhlIHVud2lzZG9tIG9mIGhpcyBvcHBvbmVudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5LCBmZWFyaW5nIGhpcyBpbmZsdWVuY2UgYW5kIGF1dGhvcml0eSwgcGxhbm5lZCB0byBhcnJlc3QgaGltIGFuZCBkZWxpdmVyIGhpbSB1cCB0byB0aGUgQ2FydGhhZ2luaWFucy4gIE5pY2lhcywgYWNjb3JkaW5nbHksIGJlY29taW5nIGF3YXJlIGF0IG9uY2Ugb2YgdGhlaXIgZGVzaWduIGFuZCBvZiB0aGVpciBzZWNyZXQgd2F0Y2ggdXBvbiBoaW0sIGdhdmUgdXR0ZXJhbmNlIGluIHB1YmxpYyB0byB1bmJlY29taW5nIHNwZWVjaGVzIGFib3V0IHRoZSBNb3RoZXJzLCBhbmQgZGlkIG11Y2ggdG8gc2hvdyB0aGF0IGhlIHJlamVjdGVkIGFuZCBkZXNwaXNlZCB0aGUgcHJldmFsZW50IGJlbGllZiBpbiB0aGVpciBtYW5pZmVzdGF0aW9ucywgIGhpcyAgIGVuZW1pZXMgbWVhbndoaWxlICAgcmVqb2ljaW5nIHRoYXQgaGUgd2FzIG1ha2luZyBoaW1zZWxmIG1vc3QgdG8gYmxhbWUgZm9yIGhpcyBjb21pbmcgZmF0ZS4gICAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQganVzdCBhcyB0aGV5IHdlcmUgcmVhZHkgdG8gYXJyZXN0IGhpbSwgYW4gYXNzZW1ibHkgb2YgdGhlIGNpdGl6ZW5zIHdhcyBoZWxkLCBhbmQgaGVyZSBOaWNpYXMsIHJpZ2h0IGluIHRoZSBtaWRzdCBvZiBzb21lIGFkdmljZSB0aGF0IGhlIHdhcyBnaXZpbmcgdG8gdGhlIHBlb3BsZSwgc3VkZGVubHkgdGhyZXcgaGltc2VsZiB1cG9uIHRoZSBncm91bmQsIGFuZCBhZnRlciBhIGxpdHRsZSB3aGlsZSwgYW1pZCB0aGUgc2lsZW5jZSBhbmQgY29uc3Rlcm5hdGlvbiB3aGljaCBuYXR1cmFsbHkgcHJldmFpbGVkLCBsaWZ0ZWQgaGlzIGhlYWQsIHR1cm5lZCBpdCBhYm91dCwgYW5kIHNwb2tlIGluIGEgbG93IGFuZCB0cmVtYmxpbmcgdm9pY2UsIGxpdHRsZSBieSBsaXR0bGUgcmFpc2luZyBhbmQgc2hhcnBlbmluZyBpdHMgdG9uZXMuICAgQW5kIHdoZW4gaGUgc2F3IHRoZSB3aG9sZSBhdWRpZW5jZSBzdHJ1Y2sgZHVtYiB3aXRoIGhvcnJvciwgaGUgdG9yZSBvZmYgaGlzIG1hbnRsZSwgcmVudCBoaXMgdHVuaWMsIGFuZCBsZWFwaW5nIHVwIGhhbGYgbmFrZWQsIHJhbiB0b3dhcmRzIHRoZSBleGl0IGZyb20gdGhlIHRoZWF0cmUsIGNyeWluZyBvdXQgdGhhdCBoZSB3YXMgcHVyc3VlZCBieSB0aGUgTW90aGVycy4gIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vIG1hbiB2ZW50dXJpbmcgdG8gbGF5IGhhbmRzIHVwb24gaGltIG9yIGV2ZW4gdG8gY29tZSBpbiBoaXMgd2F5LCBvdXQgb2Ygc3VwZXJzdGl0aW91cyBmZWFyLCBidXQgYWxsIGF2b2lkaW5nIGhpbSwgaGUgcmFuIG91dCB0byB0aGUgZ2F0ZSBvZiB0aGUgY2l0eSwgZnJlZWx5IHVzaW5nIGFsbCB0aGUgY3JpZXMgYW5kIGdlc3R1cmVzIHRoYXQgd291bGQgYmVjb21lIGEgbWFuIHBvc3Nlc3NlZCBhbmQgY3JhemVkLiAgIEhpcyB3aWZlIGFsc28sIHdobyB3YXMgcHJpdnkgdG8gaGlzIHNjaGVtZSwgdGFraW5nIGhlciBjaGlsZHJlbiB3aXRoIGhlciwgZmlyc3QgcHJvc3RyYXRlZCBoZXJzZWxmIGluIHN1cHBsaWNhdGlvbiBiZWZvcmUgdGhlIHRlbXBsZXMgb2YgdGhlIGdvZHMsIGFuZCB0aGVuLCBwcmV0ZW5kaW5nIHRvIHNlZWsgaGVyIHdhbmRlcmluZyBodXNiYW5kLCBubyBtYW4gaGluZGVyaW5nIGhlciwgd2VudCBzYWZlbHkgZm9ydGggb3V0IG9mIHRoZSBjaXR5LiAgCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyB0aGV5IGFsbCBlc2NhcGVkIHRvIE1hcmNlbGx1cyBhdCBTeXJhY3VzZS4gIEJ1dCB3aGVuIE1hcmNlbGx1cywgYWZ0ZXIgbWFueSB0cmFuc2dyZXNzaW9ucyBhbmQgaW5zdWx0cyBvbiB0aGUgcGFydCBvZiB0aGUgbWVuIG9mIEVuZ3lpdW0sIGNhbWUgYW5kIHB1dCB0aGVtIGFsbCBpbiBjaGFpbnMgaW4gb3JkZXIgdG8gcHVuaXNoIHRoZW0sIHRoZW4gTmljaWFzLCBzdGFuZGluZyBieSwgYnVyc3QgaW50byB0ZWFycywgYW5kIGZpbmFsbHksIGNsYXNwaW5nIHRoZSBoYW5kcyBhbmQga25lZXMgb2YgTWFyY2VsbHVzLCBiZWdnZWQgdGhlIGxpdmVzIG9mIGhpcyBmZWxsb3cgY2l0aXplbnMsIGJlZ2lubmluZyB3aXRoIGhpcyBlbmVtaWVzLiAgTWFyY2VsbHVzIHJlbGVudGVkLCBzZXQgdGhlbSBhbGwgZnJlZSwgYW5kIGRpZCB0aGVpciBjaXR5IG5vIGhhcm07IGhlIGFsc28gYmVzdG93ZWQgdXBvbiBOaWNpYXMgYW1wbGUgbGFuZHMgYW5kIG1hbnkgZ2lmdHMuICBBdCBhbnkgcmF0ZSwgdGhpcyBzdG9yeSBpcyB0b2xkIGJ5IFBvc2VpZG9uaXVzIHRoZSBwaGlsb3NvcGhlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFJvbWFucyB3ZXJlIGNvbnNpZGVyZWQgYnkgZm9yZWlnbiBwZW9wbGVzIHRvIGJlIHNraWxmdWwgaW4gY2Fycnlpbmcgb24gd2FyIGFuZCBmb3JtaWRhYmxlIGZpZ2h0ZXJzOyBidXQgb2YgZ2VudGxlbmVzcyBhbmQgaHVtYW5pdHkgYW5kLCBpbiBhIHdvcmQsIG9mIGNpdmlsIHZpcnR1ZXMsIHRoZXkgaGFkIGdpdmVuIG5vIHByb29mcywgYW5kIGF0IHRoaXMgdGltZSBNYXJjZWxsdXMgc2VlbXMgdG8gaGF2ZSBiZWVuIHRoZSBmaXJzdCB0byBzaG93IHRoZSBHcmVla3MgdGhhdCB0aGUgUm9tYW5zIHdlcmUgdGhlIG1vcmUgb2JzZXJ2YW50IG9mIGp1c3RpY2UuICAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBzdWNoIHdhcyBoaXMgdHJlYXRtZW50IG9mIHRob3NlIHdobyBoYWQgdG8gZG8gd2l0aCBoaW0sIGFuZCBzbyBtYW55IHdlcmUgdGhlIGJlbmVmaXRzIHdoaWNoIGhlIGNvbmZlcnJlZCBib3RoIHVwb24gY2l0aWVzIGFuZCBwcml2YXRlIHBlcnNvbnMsIHRoYXQsIGlmIHRoZSBwZW9wbGUgb2YgRW5uYSBvciBNZWdhcmEgb3IgU3lyYWN1c2UgbWV0IHdpdGggYW55IGluZGlnbml0aWVzLCB0aGUgYmxhbWUgZm9yIHRoZXNlIHdhcyB0aG91Z2h0IHRvIGJlbG9uZyB0byB0aGUgc3VmZmVyZXJzIHJhdGhlciB0aGFuIHRvIHRoZSBwZXJwZXRyYXRvcnMuICBBbmQgSSB3aWxsIG1lbnRpb24gb25lIGluc3RhbmNlIG91dCBvZiBtYW55LiAgVGhlcmUgaXMgYSBjaXR5IG9mIFNpY2lseSBjYWxsZWQgRW5neWl1bSwgbm90IGxhcmdlLCBidXQgdmVyeSBhbmNpZW50LCBhbmQgZmFtb3VzIGZvciB0aGUgYXBwZWFyYW5jZSB0aGVyZSBvZiBnb2RkZXNzZXMsIHdobyBhcmUgY2FsbGVkIE1vdGhlcnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5NYWduYSBNYXRlciwgdGhlIENyZXRhbiBSaGFlYSwgb2Z0ZW4gY29uZm91bmRlZCB3aXRoIHRoZSBQaHJ5Z2lhbiBDeWJlbGUuICBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+RGlvZG9ydXMsIGl2LiA3OSwgNS03PC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5EaW9kb3J1cywgaXYuIDc5LCA1LTc8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0ZW1wbGUgaXMgc2FpZCB0byBoYXZlIGJlZW4gYnVpbHQgYnkgQ3JldGFucywgYW5kIGNlcnRhaW4gc3BlYXJzIHdlcmUgc2hvd24gdGhlcmUsIGFuZCBicm9uemUgaGVsbWV0czsgc29tZSBvZiB0aGVzZSBib3JlIHRoZSBuYW1lIG9mIE1lcmlvbmVzLCBhbmQgb3RoZXJzIHRoYXQgb2YgVWx5c3NlcyAodGhhdCBpcywgT2R5c3NldXMpLCB3aG8gaGFkIGNvbnNlY3JhdGVkIHRoZW0gdG8gdGhlIGdvZGRlc3Nlcy4gIFRoaXMgY2l0eSwgd2hpY2ggIG1vc3QgYXJkZW50bHkgZmF2b3VyZWQgdGhlIENhcnRoYWdpbmlhbiBjYXVzZSwgTmljaWFzLCBpdHMgbGVhZGluZyBjaXRpemVuLCB0cmllZCB0byBpbmR1Y2UgdG8gZ28gb3ZlciB0byB0aGUgUm9tYW5zLCBzcGVha2luZyBvcGVubHkgYW5kIGJvbGRseSBpbiB0aGUgYXNzZW1ibGllcyBhbmQgYXJndWluZyB0aGUgdW53aXNkb20gb2YgaGlzIG9wcG9uZW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5LCBmZWFyaW5nIGhpcyBpbmZsdWVuY2UgYW5kIGF1dGhvcml0eSwgcGxhbm5lZCB0byBhcnJlc3QgaGltIGFuZCBkZWxpdmVyIGhpbSB1cCB0byB0aGUgQ2FydGhhZ2luaWFucy4gIE5pY2lhcywgYWNjb3JkaW5nbHksIGJlY29taW5nIGF3YXJlIGF0IG9uY2Ugb2YgdGhlaXIgZGVzaWduIGFuZCBvZiB0aGVpciBzZWNyZXQgd2F0Y2ggdXBvbiBoaW0sIGdhdmUgdXR0ZXJhbmNlIGluIHB1YmxpYyB0byB1bmJlY29taW5nIHNwZWVjaGVzIGFib3V0IHRoZSBNb3RoZXJzLCBhbmQgZGlkIG11Y2ggdG8gc2hvdyB0aGF0IGhlIHJlamVjdGVkIGFuZCBkZXNwaXNlZCB0aGUgcHJldmFsZW50IGJlbGllZiBpbiB0aGVpciBtYW5pZmVzdGF0aW9ucywgIGhpcyAgIGVuZW1pZXMgbWVhbndoaWxlICAgcmVqb2ljaW5nIHRoYXQgaGUgd2FzIG1ha2luZyBoaW1zZWxmIG1vc3QgdG8gYmxhbWUgZm9yIGhpcyBjb21pbmcgZmF0ZS4gICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBqdXN0IGFzIHRoZXkgd2VyZSByZWFkeSB0byBhcnJlc3QgaGltLCBhbiBhc3NlbWJseSBvZiB0aGUgY2l0aXplbnMgd2FzIGhlbGQsIGFuZCBoZXJlIE5pY2lhcywgcmlnaHQgaW4gdGhlIG1pZHN0IG9mIHNvbWUgYWR2aWNlIHRoYXQgaGUgd2FzIGdpdmluZyB0byB0aGUgcGVvcGxlLCBzdWRkZW5seSB0aHJldyBoaW1zZWxmIHVwb24gdGhlIGdyb3VuZCwgYW5kIGFmdGVyIGEgbGl0dGxlIHdoaWxlLCBhbWlkIHRoZSBzaWxlbmNlIGFuZCBjb25zdGVybmF0aW9uIHdoaWNoIG5hdHVyYWxseSBwcmV2YWlsZWQsIGxpZnRlZCBoaXMgaGVhZCwgdHVybmVkIGl0IGFib3V0LCBhbmQgc3Bva2UgaW4gYSBsb3cgYW5kIHRyZW1ibGluZyB2b2ljZSwgbGl0dGxlIGJ5IGxpdHRsZSByYWlzaW5nIGFuZCBzaGFycGVuaW5nIGl0cyB0b25lcy4gICBBbmQgd2hlbiBoZSBzYXcgdGhlIHdob2xlIGF1ZGllbmNlIHN0cnVjayBkdW1iIHdpdGggaG9ycm9yLCBoZSB0b3JlIG9mZiBoaXMgbWFudGxlLCByZW50IGhpcyB0dW5pYywgYW5kIGxlYXBpbmcgdXAgaGFsZiBuYWtlZCwgcmFuIHRvd2FyZHMgdGhlIGV4aXQgZnJvbSB0aGUgdGhlYXRyZSwgY3J5aW5nIG91dCB0aGF0IGhlIHdhcyBwdXJzdWVkIGJ5IHRoZSBNb3RoZXJzLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vIG1hbiB2ZW50dXJpbmcgdG8gbGF5IGhhbmRzIHVwb24gaGltIG9yIGV2ZW4gdG8gY29tZSBpbiBoaXMgd2F5LCBvdXQgb2Ygc3VwZXJzdGl0aW91cyBmZWFyLCBidXQgYWxsIGF2b2lkaW5nIGhpbSwgaGUgcmFuIG91dCB0byB0aGUgZ2F0ZSBvZiB0aGUgY2l0eSwgZnJlZWx5IHVzaW5nIGFsbCB0aGUgY3JpZXMgYW5kIGdlc3R1cmVzIHRoYXQgd291bGQgYmVjb21lIGEgbWFuIHBvc3Nlc3NlZCBhbmQgY3JhemVkLiAgIEhpcyB3aWZlIGFsc28sIHdobyB3YXMgcHJpdnkgdG8gaGlzIHNjaGVtZSwgdGFraW5nIGhlciBjaGlsZHJlbiB3aXRoIGhlciwgZmlyc3QgcHJvc3RyYXRlZCBoZXJzZWxmIGluIHN1cHBsaWNhdGlvbiBiZWZvcmUgdGhlIHRlbXBsZXMgb2YgdGhlIGdvZHMsIGFuZCB0aGVuLCBwcmV0ZW5kaW5nIHRvIHNlZWsgaGVyIHdhbmRlcmluZyBodXNiYW5kLCBubyBtYW4gaGluZGVyaW5nIGhlciwgd2VudCBzYWZlbHkgZm9ydGggb3V0IG9mIHRoZSBjaXR5LiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgdGhleSBhbGwgZXNjYXBlZCB0byBNYXJjZWxsdXMgYXQgU3lyYWN1c2UuICBCdXQgd2hlbiBNYXJjZWxsdXMsIGFmdGVyIG1hbnkgdHJhbnNncmVzc2lvbnMgYW5kIGluc3VsdHMgb24gdGhlIHBhcnQgb2YgdGhlIG1lbiBvZiBFbmd5aXVtLCBjYW1lIGFuZCBwdXQgdGhlbSBhbGwgaW4gY2hhaW5zIGluIG9yZGVyIHRvIHB1bmlzaCB0aGVtLCB0aGVuIE5pY2lhcywgc3RhbmRpbmcgYnksIGJ1cnN0IGludG8gdGVhcnMsIGFuZCBmaW5hbGx5LCBjbGFzcGluZyB0aGUgaGFuZHMgYW5kIGtuZWVzIG9mIE1hcmNlbGx1cywgYmVnZ2VkIHRoZSBsaXZlcyBvZiBoaXMgZmVsbG93IGNpdGl6ZW5zLCBiZWdpbm5pbmcgd2l0aCBoaXMgZW5lbWllcy4gIE1hcmNlbGx1cyByZWxlbnRlZCwgc2V0IHRoZW0gYWxsIGZyZWUsIGFuZCBkaWQgdGhlaXIgY2l0eSBubyBoYXJtOyBoZSBhbHNvIGJlc3Rvd2VkIHVwb24gTmljaWFzIGFtcGxlIGxhbmRzIGFuZCBtYW55IGdpZnRzLiAgQXQgYW55IHJhdGUsIHRoaXMgc3RvcnkgaXMgdG9sZCBieSBQb3NlaWRvbml1cyB0aGUgcGhpbG9zb3BoZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gTWFyY2VsbHVzIHdhcyByZWNhbGxlZCBieSB0aGUgUm9tYW5zIHRvIHRoZSB3YXIgaW4gdGhlaXIgaG9tZSB0ZXJyaXRvcmllcywgaGUgY2FycmllZCBiYWNrIHdpdGggaGltIHRoZSBncmVhdGVyIHBhcnQgYW5kIHRoZSBtb3N0IGJlYXV0aWZ1bCBvZiB0aGUgZGVkaWNhdG9yeSBvZmZlcmluZ3MgaW4gU3lyYWN1c2UsIHRoYXQgdGhleSBtaWdodCBncmFjZSBoaXMgdHJpdW1waCBhbmQgYWRvcm4gaGlzIGNpdHkuICBGb3IgYmVmb3JlIHRoaXMgdGltZSBSb21lIG5laXRoZXIgaGFkIG5vciBrbmV3IGFib3V0IHN1Y2ggZWxlZ2FudCBhbmQgZXhxdWlzaXRlIHByb2R1Y3Rpb25zLCBub3Igd2FzIHRoZXJlIGFueSBsb3ZlIHRoZXJlIGZvciBzdWNoIGdyYWNlZnVsIGFuZCBzdWJ0bGUgYXJ0OyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgZmlsbGVkIGZ1bGwgb2YgYmFyYmFyaWMgYXJtcyBhbmQgYmxvb2R5IHNwb2lscywgYW5kIGNyb3duZWQgcm91bmQgYWJvdXQgd2l0aCBtZW1vcmlhbHMgYW5kIHRyb3BoaWVzIG9mIHRyaXVtcGhzLCBzaGUgd2FzIG5vdCBhIGdsYWRkZW5pbmcgb3IgYSByZWFzc3VyaW5nIHNpZ2h0LCBub3Igb25lIGZvciB1bndhcmxpa2UgYW5kIGx1eHVyaW91cyBzcGVjdGF0b3JzLiAgSW5kZWVkLCBhcyBFcGFtaW5vbmRhcyBjYWxsZWQgdGhlIEJvZW90aWFuIHBsYWluIGEgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kYW5jaW5nIGZsb29yIG9mIEFyZXMsPC9xPiBhbmQgYXMgWGVub3Bob248bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMy40LjE3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkhlbGwuPC90aXRsZT4gaWlpLiA0LDE3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzcGVha3Mgb2YgRXBoZXN1cyBhcyBhIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d29yay1zaG9wIG9mIHdhciw8L3E+IHNvLCBpdCBzZWVtcyB0byBtZSwgb25lIG1pZ2h0IGF0IHRoYXQgdGltZSBoYXZlIGNhbGxlZCBSb21lLCBpbiB0aGUgbGFuZ3VhZ2Ugb2YgUGluZGFyLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmEgcHJlY2luY3Qgb2YgbXVjaC13YXJyaW5nIEFyZXMuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBpbmQuIFAuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5QeXRoLjwvdGl0bGU+IGlpLiAxIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIHdpdGggdGhlIGNvbW1vbiBwZW9wbGUgTWFyY2VsbHVzIHdvbiBtb3JlIGZhdm91ciBiZWNhdXNlIGhlIGFkb3JuZWQgdGhlIGNpdHkgd2l0aCBvYmplY3RzIHRoYXQgaGFkIEhlbGxlbmljIGdyYWNlIGFuZCBjaGFybSBhbmQgZmlkZWxpdHk7IGJ1dCB3aXRoIHRoZSBlbGRlciBjaXRpemVucyBGYWJpdXMgTWF4aW11cyB3YXMgbW9yZSBwb3B1bGFyLiBGb3IgaGUgbmVpdGhlciBkaXN0dXJiZWQgbm9yIGJyb3VnaHQgYXdheSBhbnl0aGluZyBvZiB0aGlzIHNvcnQgZnJvbSBUYXJlbnR1bSwgd2hlbiB0aGF0IGNpdHkgd2FzIHRha2VuLCBidXQgd2hpbGUgaGUgY2FycmllZCBvZmYgdGhlIG1vbmV5IGFuZCB0aGUgb3RoZXIgdmFsdWFibGVzLCBoZSBzdWZmZXJlZCB0aGUgc3RhdHVlcyB0byByZW1haW4gaW4gdGhlaXIgcGxhY2VzLCBhZGRpbmcgdGhlIHdlbGwta25vd24gc2F5aW5nOiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGV0IHVzIGxlYXZlIHRoZXNlIGdvZHMgaW4gdGhlaXIgYW5nZXIgZm9yIHRoZSBUYXJlbnRpbmVzLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUEx1dC4gRmFiLiAyMi41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkZhYml1cyBNYXhpbXVzPC90aXRsZT4sIHh4aWkuIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFuZCB0aGV5IGJsYW1lZCBNYXJjZWxsdXMsIGZpcnN0LCBiZWNhdXNlIGhlIG1hZGUgdGhlIGNpdHkgb2Rpb3VzLCBpbiB0aGF0IG5vdCBvbmx5IG1lbiwgYnV0IGV2ZW4gZ29kcyB3ZXJlIGxlZCBhYm91dCBpbiBoZXIgdHJpdW1waGFsIHByb2Nlc3Npb25zIGxpa2UgY2FwdGl2ZXM7IGFuZCBhZ2FpbiwgYmVjYXVzZSwgd2hlbiB0aGUgcGVvcGxlIHdhcyBhY2N1c3RvbWVkIG9ubHkgdG8gd2FyIG9yIGFncmljdWx0dXJlLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgd2FzIGluZXhwZXJpZW5jZWQgaW4gbHV4dXJ5IGFuZCBlYXNlLCBidXQsIGxpa2UgdGhlIEhlcmFjbGVzIG9mIEV1cmlwaWRlcywgd2FzIAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5QbGFpbiwgdW5hZG9ybmVkLCBpbiBhIGdyZWF0IGNyaXNpcyBicmF2ZSBhbmQgdHJ1ZSw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgZnJhZ21lbnQgb2YgdGhlIGxvc3QgPHRpdGxlPkxpY3ltbml1czwvdGl0bGU+IG9mIEV1cmlwaWRlcyAoTmF1Y2ssIDx0aXRsZT5UcmFnLiBHcmFlYy4gRnJhZy48L3RpdGxlPjIgcC4gNTA3KS48L25vdGU+IGhlIG1hZGUgdGhlbSBpZGxlIGFuZCBmdWxsIG9mIGdsaWIgdGFsayBhYm91dCBhcnRzIGFuZCBhcnRpc3RzLCBzbyB0aGF0IHRoZXkgc3BlbnQgYSBncmVhdCBwYXJ0IG9mIHRoZSBkYXkgaW4gc3VjaCBjbGV2ZXIgZGlzcHV0YXRpb24uIE5vdHdpdGhzdGFuZGluZyBzdWNoIGNlbnN1cmUsIE1hcmNlbGx1cyBzcG9rZSBvZiB0aGlzIHdpdGggcHJpZGUgZXZlbiB0byB0aGUgR3JlZWtzLCBkZWNsYXJpbmcgdGhhdCBoZSBoYWQgdGF1Z2h0IHRoZSBpZ25vcmFudCBSb21hbnMgdG8gYWRtaXJlIGFuZCBob25vdXIgdGhlIHdvbmRlcmZ1bCBhbmQgYmVhdXRpZnVsIHByb2R1Y3Rpb25zIG9mIEdyZWVjZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBNYXJjZWxsdXMgd2FzIHJlY2FsbGVkIGJ5IHRoZSBSb21hbnMgdG8gdGhlIHdhciBpbiB0aGVpciBob21lIHRlcnJpdG9yaWVzLCBoZSBjYXJyaWVkIGJhY2sgd2l0aCBoaW0gdGhlIGdyZWF0ZXIgcGFydCBhbmQgdGhlIG1vc3QgYmVhdXRpZnVsIG9mIHRoZSBkZWRpY2F0b3J5IG9mZmVyaW5ncyBpbiBTeXJhY3VzZSwgdGhhdCB0aGV5IG1pZ2h0IGdyYWNlIGhpcyB0cml1bXBoIGFuZCBhZG9ybiBoaXMgY2l0eS4gIEZvciBiZWZvcmUgdGhpcyB0aW1lIFJvbWUgbmVpdGhlciBoYWQgbm9yIGtuZXcgYWJvdXQgc3VjaCBlbGVnYW50IGFuZCBleHF1aXNpdGUgcHJvZHVjdGlvbnMsIG5vciB3YXMgdGhlcmUgYW55IGxvdmUgdGhlcmUgZm9yIHN1Y2ggZ3JhY2VmdWwgYW5kIHN1YnRsZSBhcnQ7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBmaWxsZWQgZnVsbCBvZiBiYXJiYXJpYyBhcm1zIGFuZCBibG9vZHkgc3BvaWxzLCBhbmQgY3Jvd25lZCByb3VuZCBhYm91dCB3aXRoIG1lbW9yaWFscyBhbmQgdHJvcGhpZXMgb2YgdHJpdW1waHMsIHNoZSB3YXMgbm90IGEgZ2xhZGRlbmluZyBvciBhIHJlYXNzdXJpbmcgc2lnaHQsIG5vciBvbmUgZm9yIHVud2FybGlrZSBhbmQgbHV4dXJpb3VzIHNwZWN0YXRvcnMuICBJbmRlZWQsIGFzIEVwYW1pbm9uZGFzIGNhbGxlZCB0aGUgQm9lb3RpYW4gcGxhaW4gYSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZGFuY2luZyBmbG9vciBvZiBBcmVzLDwvcT4gYW5kIGFzIFhlbm9waG9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMTciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGlpaS4gNCwxNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gc3BlYWtzIG9mIEVwaGVzdXMgYXMgYSAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMy40LjE3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDQsMTcuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGlpaS4gNCwxNy48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndvcmstc2hvcCBvZiB3YXIsPC9xPiBzbywgaXQgc2VlbXMgdG8gbWUsIG9uZSBtaWdodCBhdCB0aGF0IHRpbWUgaGF2ZSBjYWxsZWQgUm9tZSwgaW4gdGhlIGxhbmd1YWdlIG9mIFBpbmRhciwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmEgcHJlY2luY3Qgb2YgbXVjaC13YXJyaW5nIEFyZXMuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQaW5kLiBQLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QeXRoLjwvdGl0bGU+IGlpLiAxIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQaW5kLiBQLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QeXRoLjwvdGl0bGU+IGlpLiAxIGYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QeXRoLjwvdGl0bGU+IGlpLiAxIGYuPC90cmFuc2xhdGlvbj4="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB3aXRoIHRoZSBjb21tb24gcGVvcGxlIE1hcmNlbGx1cyB3b24gbW9yZSBmYXZvdXIgYmVjYXVzZSBoZSBhZG9ybmVkIHRoZSBjaXR5IHdpdGggb2JqZWN0cyB0aGF0IGhhZCBIZWxsZW5pYyBncmFjZSBhbmQgY2hhcm0gYW5kIGZpZGVsaXR5OyBidXQgd2l0aCB0aGUgZWxkZXIgY2l0aXplbnMgRmFiaXVzIE1heGltdXMgd2FzIG1vcmUgcG9wdWxhci4gRm9yIGhlIG5laXRoZXIgZGlzdHVyYmVkIG5vciBicm91Z2h0IGF3YXkgYW55dGhpbmcgb2YgdGhpcyBzb3J0IGZyb20gVGFyZW50dW0sIHdoZW4gdGhhdCBjaXR5IHdhcyB0YWtlbiwgYnV0IHdoaWxlIGhlIGNhcnJpZWQgb2ZmIHRoZSBtb25leSBhbmQgdGhlIG90aGVyIHZhbHVhYmxlcywgaGUgc3VmZmVyZWQgdGhlIHN0YXR1ZXMgdG8gcmVtYWluIGluIHRoZWlyIHBsYWNlcywgYWRkaW5nIHRoZSB3ZWxsLWtub3duIHNheWluZzogCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCB1cyBsZWF2ZSB0aGVzZSBnb2RzIGluIHRoZWlyIGFuZ2VyIGZvciB0aGUgVGFyZW50aW5lcy48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQTHV0LiBGYWIuIDIyLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GYWJpdXMgTWF4aW11czwvdGl0bGU+LCB4eGlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBbmQgdGhleSBibGFtZWQgTWFyY2VsbHVzLCBmaXJzdCwgYmVjYXVzZSBoZSBtYWRlIHRoZSBjaXR5IG9kaW91cywgaW4gdGhhdCBub3Qgb25seSBtZW4sIGJ1dCBldmVuIGdvZHMgd2VyZSBsZWQgYWJvdXQgaW4gaGVyIHRyaXVtcGhhbCBwcm9jZXNzaW9ucyBsaWtlIGNhcHRpdmVzOyBhbmQgYWdhaW4sIGJlY2F1c2UsIHdoZW4gdGhlIHBlb3BsZSB3YXMgYWNjdXN0b21lZCBvbmx5IHRvIHdhciBvciBhZ3JpY3VsdHVyZSwgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQTHV0LiBGYWIuIDIyLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GYWJpdXMgTWF4aW11czwvdGl0bGU+LCB4eGlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmFiaXVzIE1heGltdXM8L3RpdGxlPiwgeHhpaS4gNS48L3RyYW5zbGF0aW9uPg=="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3YXMgaW5leHBlcmllbmNlZCBpbiBsdXh1cnkgYW5kIGVhc2UsIGJ1dCwgbGlrZSB0aGUgSGVyYWNsZXMgb2YgRXVyaXBpZGVzLCB3YXMgCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5QbGFpbiwgdW5hZG9ybmVkLCBpbiBhIGdyZWF0IGNyaXNpcyBicmF2ZSBhbmQgdHJ1ZSw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGxhaW4sIHVuYWRvcm5lZCwgaW4gYSBncmVhdCBjcmlzaXMgYnJhdmUgYW5kIHRydWUsPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgZnJhZ21lbnQgb2YgdGhlIGxvc3QgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGljeW1uaXVzPC90aXRsZT4gb2YgRXVyaXBpZGVzIChOYXVjaywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJhZy4gR3JhZWMuIEZyYWcuPC90aXRsZT4yIHAuIDUwNykuPC9ub3RlPiBoZSBtYWRlIHRoZW0gaWRsZSBhbmQgZnVsbCBvZiBnbGliIHRhbGsgYWJvdXQgYXJ0cyBhbmQgYXJ0aXN0cywgc28gdGhhdCB0aGV5IHNwZW50IGEgZ3JlYXQgcGFydCBvZiB0aGUgZGF5IGluIHN1Y2ggY2xldmVyIGRpc3B1dGF0aW9uLiBOb3R3aXRoc3RhbmRpbmcgc3VjaCBjZW5zdXJlLCBNYXJjZWxsdXMgc3Bva2Ugb2YgdGhpcyB3aXRoIHByaWRlIGV2ZW4gdG8gdGhlIEdyZWVrcywgZGVjbGFyaW5nIHRoYXQgaGUgaGFkIHRhdWdodCB0aGUgaWdub3JhbnQgUm9tYW5zIHRvIGFkbWlyZSBhbmQgaG9ub3VyIHRoZSB3b25kZXJmdWwgYW5kIGJlYXV0aWZ1bCBwcm9kdWN0aW9ucyBvZiBHcmVlY2UuCgkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxpY3ltbml1czwvdGl0bGU+IG9mIEV1cmlwaWRlcyAoTmF1Y2ssIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyYWcuIEdyYWVjLiBGcmFnLjwvdGl0bGU+MiBwLiA1MDcpLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBlbmVtaWVzIG9mIE1hcmNlbGx1cyBvcHBvc2VkIGhpcyB0cml1bXBoLCBiZWNhdXNlIHNvbWV0aGluZyBzdGlsbCByZW1haW5lZCB0byBiZSBkb25lIGluIFNpY2lseSBhbmQgYSB0aGlyZCB0cml1bXBoIHdvdWxkIGF3YWtlbiBqZWFsb3VzeSwgaGUgY29uc2VudGVkIG9mIGhpcyBvd24gYWNjb3JkIHRvIGNvbmR1Y3QgdGhlIGNvbXBsZXRlIGFuZCBtYWpvciB0cml1bXBoIHRvIHRoZSBBbGJhbiBtb3VudCwgYnV0IHRvIGVudGVyIHRoZSBjaXR5IGluIHRoZSBtaW5vciB0cml1bXBoOyB0aGlzIGlzIGNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmV1YTwvcT4gYnkgdGhlIEdyZWVrcywgYW5kIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b3ZhPC9xPiBieSB0aGUgUm9tYW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAxMS44IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNyYXNzdXM8L3RpdGxlPiwgeGkuIDguPC9iaWJsPiAgIFRoZSBsYXRlciBMYXRpbiBuYW1lIHdhcyAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vdmF0aW8uPC9xPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gY29uZHVjdGluZyBpdCB0aGUgZ2VuZXJhbCBkb2VzIG5vdCBtb3VudCB1cG9uIGEgZm91ci1ob3JzZSBjaGFyaW90LCBub3Igd2VhciBhIHdyZWF0aCBvZiBsYXVyZWwsIG5vciBoYXZlIHRydW1wZXRzIHNvdW5kaW5nIGFib3V0IGhpbTsgYnV0IGhlIGdvZXMgYWZvb3Qgd2l0aCBzaG9lcyBvbiwgYWNjb21wYW5pZWQgYnkgdGhlIHNvdW5kIG9mIGV4Y2VlZGluZyBtYW55IGZsdXRlcywgYW5kIHdlYXJpbmcgYSB3cmVhdGggb2YgbXlydGxlLCBzbyB0aGF0IGhpcyBhcHBlYXJhbmNlIGlzIHVud2FybGlrZSBhbmQgZnJpZW5kbHkgcmF0aGVyIHRoYW4gdGVycmlmeWluZy4gIEFuZCB0aGlzIGlzIHRoZSBzdHJvbmdlc3QgcHJvb2YgdG8gbXkgbWluZCB0aGF0IGluIGFuY2llbnQgdGltZXMgdGhlIHR3byB0cml1bXBocyB3ZXJlIGRpc3Rpbmd1aXNoZWQsIG5vdCBieSB0aGUgbWFnbml0dWRlLCBidXQgYnkgdGhlIG1hbm5lciwgb2YgdGhlIGFjaGlldmVtZW50cyB3aGljaCB0aGV5IGNlbGVicmF0ZWQuICAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhvc2Ugd2hvIHdvbiB0aGUgbWFzdGVyeSBieSBmaWdodGluZyBhbmQgc2xheWluZyB0aGVpciBlbmVtaWVzIGNlbGVicmF0ZWQsIGFzIGl0IHdvdWxkIHNlZW0sIHRoYXQgbWFydGlhbCBhbmQgdGVycmlibGUgdHJpdW1waCwgYWZ0ZXIgd3JlYXRoaW5nIHRoZWlyIGFybXMgYW5kIHRoZWlyIG1lbiB3aXRoIGFidW5kYW50IGxhdXJlbCwganVzdCBhcyB0aGV5IHdlcmUgd29udCB0byBkbyB3aGVuIHRoZXkgcHVyaWZpZWQgdGhlaXIgYXJtaWVzIHdpdGggbHVzdHJhbCByaXRlczsgd2hpbGUgdG8gdGhvc2UgZ2VuZXJhbHMgd2hvIGhhZCBoYWQgbm8gbmVlZCBvZiB3YXIsIGJ1dCBoYWQgYnJvdWdodCBldmVyeXRoaW5nIHRvIGEgZ29vZCBpc3N1ZSBieSBtZWFucyBvZiBjb25mZXJlbmNlLCBwZXJzdWFzaW9uLCBhbmQgYXJndW1lbnQsIHRoZSBsYXcgYXdhcmRlZCB0aGUgcHJpdmlsZWdlIG9mIGNvbmR1Y3RpbmcsIGxpa2UgYSBwYWVhbiBvZiB0aGFua3NnaXZpbmcsIHRoaXMgdW53YXJsaWtlIGFuZCBmZXN0YWwgcHJvY2Vzc2lvbi4gIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZmx1dGUgaXMgYW4gaW5zdHJ1bWVudCBvZiBwZWFjZSwgYW5kIHRoZSBteXJ0bGUgaXMgYSBwbGFudCBvZiBBcGhyb2RpdGUsIHdobyBtb3JlIHRoYW4gYWxsIHRoZSBvdGhlciBnb2RzIGFiaG9ycyB2aW9sZW5jZSBhbmQgd2Fycy4gIEFuZCB0aGlzIG1pbm9yIHRyaXVtcGggaXMgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b3ZhLDwvcT4gbm90IGZyb20gdGhlIEdyZWVrIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXVhc21vcyw8L3E+IGFzIG1vc3QgdGhpbmsgKHNpbmNlIHRoZXkgY29uZHVjdCB0aGUgbWFqb3IgdHJpdW1waCBhbHNvIHdpdGggc29uZ3MgYW5kIGNyaWVzIG9mIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXVhITwvcT4pLCBidXQgdGhlIG5hbWUgaGFzIGJlZW4gd3Jlc3RlZCBieSB0aGUgR3JlZWtzIGludG8gY29uZm9ybWl0eSB3aXRoIHRoZWlyIHNwZWVjaCwgc2luY2UgdGhleSBhcmUgcGVyc3VhZGVkIHRoYXQgc29tZXRoaW5nIG9mIHRoZSBob25vdXIgaGFzIHRvIGRvIHdpdGggRGlvbnlzdXMgYWxzbywgd2hvbSB0aGV5IGNhbGwgRXVpdXMgYW5kIFRocmlhbWJ1cy4gIFRoaXMsIGhvd2V2ZXIsIGlzIG5vdCB0aGUgdHJ1ZSBleHBsYW5hdGlvbjsgYnV0IGl0IHdhcyB0aGUgY3VzdG9tIGZvciBjb21tYW5kZXJzLCBpbiBjZWxlYnJhdGluZyB0aGUgbWFqb3IgdHJpdW1waCwgdG8gc2FjcmlmaWNlIGFuIG94LCB3aGVyZWFzIGluIHRoZSBtaW5vciB0cml1bXBoIHRoZXkgc2FjcmlmaWNlZCBhIHNoZWVwLiAgICBOb3csIHRoZSBSb21hbiBuYW1lIGZvciBzaGVlcCBpcyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm92YSw8L3E+IGFuZCBmcm9tIHRoaXMgY2lyY3Vtc3RhbmNlIHRoZSBsZXNzZXIgdHJpdW1waCBpcyBjYWxsZWQgb3ZhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IGlzIGhhcmRseSBuZWNlc3NhcnkgdG8gc2F5IHRoYXQgUGx1dGFyY2gncyBldHltb2xvZ3ksIGFzIG9mdGVuLCBpcyB3b3J0aGxlc3MuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyB3b3J0aCBvdXIgd2hpbGUgdG8gbm90aWNlIHRoYXQgdGhlIFNwYXJ0YW4gbGF3Z2l2ZXIgYXBwb2ludGVkIGhpcyBzYWNyaWZpY2VzIGluIGEgbWFubmVyIG9wcG9zaXRlIHRvIHRoYXQgb2YgdGhlIFJvbWFucy4gICBGb3IgaW4gU3BhcnRhIGEgcmV0dXJuaW5nIGdlbmVyYWwgd2hvIGhhZCBhY2NvbXBsaXNoZWQgaGlzIHBsYW5zIGJ5IGN1bm5pbmcgZGVjZXB0aW9uIG9yIHBlcnN1YXNpb24sIHNhY3JpZmljZWQgYW4gb3g7IGhlIHdobyBoYWQgd29uIGJ5IGZpZ2h0aW5nLCBhIGNvY2suIEZvciBhbHRob3VnaCB0aGV5IHdlcmUgbW9zdCB3YXJsaWtlLCB0aGV5IHRob3VnaHQgYW4gZXhwbG9pdCBhY2NvbXBsaXNoZWQgYnkgbWVhbnMgb2YgYXJndW1lbnQgYW5kIHNhZ2FjaXR5IGdyZWF0ZXIgYW5kIG1vcmUgYmVjb21pbmcgdG8gYSBtYW4gdGhhbiBvbmUgYWNoaWV2ZWQgYnkgdmlvbGVuY2UgYW5kIHZhbG91ci4gIEhvdyB0aGUgY2FzZSByZWFsbHkgc3RhbmRzLCBJIGxlYXZlIGFuIG9wZW4gcXVlc3Rpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIGVuZW1pZXMgb2YgTWFyY2VsbHVzIG9wcG9zZWQgaGlzIHRyaXVtcGgsIGJlY2F1c2Ugc29tZXRoaW5nIHN0aWxsIHJlbWFpbmVkIHRvIGJlIGRvbmUgaW4gU2ljaWx5IGFuZCBhIHRoaXJkIHRyaXVtcGggd291bGQgYXdha2VuIGplYWxvdXN5LCBoZSBjb25zZW50ZWQgb2YgaGlzIG93biBhY2NvcmQgdG8gY29uZHVjdCB0aGUgY29tcGxldGUgYW5kIG1ham9yIHRyaXVtcGggdG8gdGhlIEFsYmFuIG1vdW50LCBidXQgdG8gZW50ZXIgdGhlIGNpdHkgaW4gdGhlIG1pbm9yIHRyaXVtcGg7IHRoaXMgaXMgY2FsbGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ldWE8L3E+IGJ5IHRoZSBHcmVla3MsIGFuZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b3ZhPC9xPiBieSB0aGUgUm9tYW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDcmFzcy4gMTEuOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgeGkuIDguPC9iaWJsPiAgIFRoZSBsYXRlciBMYXRpbiBuYW1lIHdhcyAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPm92YXRpby48L3E+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAxMS44IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCB4aS4gOC48L2JpYmw+ICAgVGhlIGxhdGVyIExhdGluIG5hbWUgd2FzIAoJCQkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgeGkuIDguPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vdmF0aW8uPC9xPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbmR1Y3RpbmcgaXQgdGhlIGdlbmVyYWwgZG9lcyBub3QgbW91bnQgdXBvbiBhIGZvdXItaG9yc2UgY2hhcmlvdCwgbm9yIHdlYXIgYSB3cmVhdGggb2YgbGF1cmVsLCBub3IgaGF2ZSB0cnVtcGV0cyBzb3VuZGluZyBhYm91dCBoaW07IGJ1dCBoZSBnb2VzIGFmb290IHdpdGggc2hvZXMgb24sIGFjY29tcGFuaWVkIGJ5IHRoZSBzb3VuZCBvZiBleGNlZWRpbmcgbWFueSBmbHV0ZXMsIGFuZCB3ZWFyaW5nIGEgd3JlYXRoIG9mIG15cnRsZSwgc28gdGhhdCBoaXMgYXBwZWFyYW5jZSBpcyB1bndhcmxpa2UgYW5kIGZyaWVuZGx5IHJhdGhlciB0aGFuIHRlcnJpZnlpbmcuICBBbmQgdGhpcyBpcyB0aGUgc3Ryb25nZXN0IHByb29mIHRvIG15IG1pbmQgdGhhdCBpbiBhbmNpZW50IHRpbWVzIHRoZSB0d28gdHJpdW1waHMgd2VyZSBkaXN0aW5ndWlzaGVkLCBub3QgYnkgdGhlIG1hZ25pdHVkZSwgYnV0IGJ5IHRoZSBtYW5uZXIsIG9mIHRoZSBhY2hpZXZlbWVudHMgd2hpY2ggdGhleSBjZWxlYnJhdGVkLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aG9zZSB3aG8gd29uIHRoZSBtYXN0ZXJ5IGJ5IGZpZ2h0aW5nIGFuZCBzbGF5aW5nIHRoZWlyIGVuZW1pZXMgY2VsZWJyYXRlZCwgYXMgaXQgd291bGQgc2VlbSwgdGhhdCBtYXJ0aWFsIGFuZCB0ZXJyaWJsZSB0cml1bXBoLCBhZnRlciB3cmVhdGhpbmcgdGhlaXIgYXJtcyBhbmQgdGhlaXIgbWVuIHdpdGggYWJ1bmRhbnQgbGF1cmVsLCBqdXN0IGFzIHRoZXkgd2VyZSB3b250IHRvIGRvIHdoZW4gdGhleSBwdXJpZmllZCB0aGVpciBhcm1pZXMgd2l0aCBsdXN0cmFsIHJpdGVzOyB3aGlsZSB0byB0aG9zZSBnZW5lcmFscyB3aG8gaGFkIGhhZCBubyBuZWVkIG9mIHdhciwgYnV0IGhhZCBicm91Z2h0IGV2ZXJ5dGhpbmcgdG8gYSBnb29kIGlzc3VlIGJ5IG1lYW5zIG9mIGNvbmZlcmVuY2UsIHBlcnN1YXNpb24sIGFuZCBhcmd1bWVudCwgdGhlIGxhdyBhd2FyZGVkIHRoZSBwcml2aWxlZ2Ugb2YgY29uZHVjdGluZywgbGlrZSBhIHBhZWFuIG9mIHRoYW5rc2dpdmluZywgdGhpcyB1bndhcmxpa2UgYW5kIGZlc3RhbCBwcm9jZXNzaW9uLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZmx1dGUgaXMgYW4gaW5zdHJ1bWVudCBvZiBwZWFjZSwgYW5kIHRoZSBteXJ0bGUgaXMgYSBwbGFudCBvZiBBcGhyb2RpdGUsIHdobyBtb3JlIHRoYW4gYWxsIHRoZSBvdGhlciBnb2RzIGFiaG9ycyB2aW9sZW5jZSBhbmQgd2Fycy4gIEFuZCB0aGlzIG1pbm9yIHRyaXVtcGggaXMgY2FsbGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vdmEsPC9xPiBub3QgZnJvbSB0aGUgR3JlZWsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmV1YXNtb3MsPC9xPiBhcyBtb3N0IHRoaW5rIChzaW5jZSB0aGV5IGNvbmR1Y3QgdGhlIG1ham9yIHRyaXVtcGggYWxzbyB3aXRoIHNvbmdzIGFuZCBjcmllcyBvZiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXVhITwvcT4pLCBidXQgdGhlIG5hbWUgaGFzIGJlZW4gd3Jlc3RlZCBieSB0aGUgR3JlZWtzIGludG8gY29uZm9ybWl0eSB3aXRoIHRoZWlyIHNwZWVjaCwgc2luY2UgdGhleSBhcmUgcGVyc3VhZGVkIHRoYXQgc29tZXRoaW5nIG9mIHRoZSBob25vdXIgaGFzIHRvIGRvIHdpdGggRGlvbnlzdXMgYWxzbywgd2hvbSB0aGV5IGNhbGwgRXVpdXMgYW5kIFRocmlhbWJ1cy4gIFRoaXMsIGhvd2V2ZXIsIGlzIG5vdCB0aGUgdHJ1ZSBleHBsYW5hdGlvbjsgYnV0IGl0IHdhcyB0aGUgY3VzdG9tIGZvciBjb21tYW5kZXJzLCBpbiBjZWxlYnJhdGluZyB0aGUgbWFqb3IgdHJpdW1waCwgdG8gc2FjcmlmaWNlIGFuIG94LCB3aGVyZWFzIGluIHRoZSBtaW5vciB0cml1bXBoIHRoZXkgc2FjcmlmaWNlZCBhIHNoZWVwLiAgICBOb3csIHRoZSBSb21hbiBuYW1lIGZvciBzaGVlcCBpcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b3ZhLDwvcT4gYW5kIGZyb20gdGhpcyBjaXJjdW1zdGFuY2UgdGhlIGxlc3NlciB0cml1bXBoIGlzIGNhbGxlZCBvdmEuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JdCBpcyBoYXJkbHkgbmVjZXNzYXJ5IHRvIHNheSB0aGF0IFBsdXRhcmNoJ3MgZXR5bW9sb2d5LCBhcyBvZnRlbiwgaXMgd29ydGhsZXNzLjwvbm90ZT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyB3b3J0aCBvdXIgd2hpbGUgdG8gbm90aWNlIHRoYXQgdGhlIFNwYXJ0YW4gbGF3Z2l2ZXIgYXBwb2ludGVkIGhpcyBzYWNyaWZpY2VzIGluIGEgbWFubmVyIG9wcG9zaXRlIHRvIHRoYXQgb2YgdGhlIFJvbWFucy4gICBGb3IgaW4gU3BhcnRhIGEgcmV0dXJuaW5nIGdlbmVyYWwgd2hvIGhhZCBhY2NvbXBsaXNoZWQgaGlzIHBsYW5zIGJ5IGN1bm5pbmcgZGVjZXB0aW9uIG9yIHBlcnN1YXNpb24sIHNhY3JpZmljZWQgYW4gb3g7IGhlIHdobyBoYWQgd29uIGJ5IGZpZ2h0aW5nLCBhIGNvY2suIEZvciBhbHRob3VnaCB0aGV5IHdlcmUgbW9zdCB3YXJsaWtlLCB0aGV5IHRob3VnaHQgYW4gZXhwbG9pdCBhY2NvbXBsaXNoZWQgYnkgbWVhbnMgb2YgYXJndW1lbnQgYW5kIHNhZ2FjaXR5IGdyZWF0ZXIgYW5kIG1vcmUgYmVjb21pbmcgdG8gYSBtYW4gdGhhbiBvbmUgYWNoaWV2ZWQgYnkgdmlvbGVuY2UgYW5kIHZhbG91ci4gIEhvdyB0aGUgY2FzZSByZWFsbHkgc3RhbmRzLCBJIGxlYXZlIGFuIG9wZW4gcXVlc3Rpb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIE1hcmNlbGx1cyB3YXMgc2VydmluZyBhcyBjb25zdWwgZm9yIHRoZSBmb3VydGggdGltZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMTAgQi5DLjwvbm90ZT4gaGlzIGVuZW1pZXMgaW5kdWNlZCB0aGUgU3lyYWN1c2FucyB0byBjb21lIHRvIFJvbWUgYW5kIGFjY3VzZSBhbmQgZGVub3VuY2UgaGltIGJlZm9yZSB0aGUgc2VuYXRlIGZvciB0ZXJyaWJsZSB3cm9uZ3Mgd2hpY2ggdGhleSBoYWQgc3VmZmVyZWQgY29udHJhcnkgdG8gdGhlIHRlcm1zIG9mIHN1cnJlbmRlci4gIEl0IGNoYW5jZWQsIHRoZW4sIHRoYXQgTWFyY2VsbHVzIHdhcyBwZXJmb3JtaW5nIGEgc2FjcmlmaWNlIG9uIHRoZSBDYXBpdG9sLCBidXQsIHRoZSBzZW5hdGUgYmVpbmcgc3RpbGwgaW4gc2Vzc2lvbiwgdGhlIFN5cmFjdXNhbnMgaHVycmllZCBiZWZvcmUgaXQgYW5kIGJlZ2dlZCB0aGF0IHRoZXkgbWlnaHQgaGF2ZSBhIGhlYXJpbmcgYW5kIGp1c3RpY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb2xsZWFndWUgb2YgTWFyY2VsbHVzIHRyaWVkIHRvIGhhdmUgdGhlbSBleHBlbGxlZCwgYW5ncmlseSBleHBsYWluaW5nIHRoYXQgTWFyY2VsbHVzIHdhcyBub3QgcHJlc2VudDsgYnV0IE1hcmNlbGx1cywgd2hlbiBoZSBoZWFyZCBvZiBpdCwgY2FtZSBhdCBvbmNlLiBBbmQgZmlyc3QsIHNpdHRpbmcgYXMgY29uc3VsIGluIGhpcyBjdXJ1bGUgY2hhaXIsIGhlIHRyYW5zYWN0ZWQgdGhlIHJvdXRpbmUgYnVzaW5lc3M7IHRoZW4sIHdoZW4gdGhpcyB3YXMgYWxsIGVuZGVkLCBjb21pbmcgZG93biBmcm9tIGhpcyBjdXJ1bGUgY2hhaXIgYW5kIHRha2luZyBoaXMgc3RhbmQgYXMgYSBwcml2YXRlIGNpdGl6ZW4gaW4gdGhlIHBsYWNlIHdoZXJlIG1lbiB1bmRlciBhY2N1c2F0aW9uIHVzdWFsbHkgcGxlYWQgdGhlaXIgY2F1c2UsIGhlIGdhdmUgdGhlIFN5cmFjdXNhbnMgb3Bwb3J0dW5pdHkgdG8gcHJlc3MgdGhlaXIgY2hhcmdlLiAgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXkgd2VyZSB0ZXJyaWJseSBjb25mb3VuZGVkIGJ5IGhpcyBkaWduaXR5IGFuZCBjb25maWRlbmNlLCBhbmQgdGhvdWdodCBoaW0geWV0IG1vcmUgZm9ybWlkYWJsZSBhbmQgaGFyZCB0byBjb25mcm9udCBpbiBoaXMgcm9iZSBvZiBwdXJwbGUgdGhhbiBoZSBoYWQgYmVlbiBpcnJlc2lzdGlibGUgaW4gYXJtcy4gIEhvd2V2ZXIsIGJlaW5nIGVuY291cmFnZWQgYnkgdGhlIHJpdmFscyBvZiBNYXJjZWxsdXMsIHRoZXkgYmVnYW4gdGhlaXIgZGVudW5jaWF0aW9uIGFuZCByZWhlYXJzZWQgdGhlaXIgZGVtYW5kcyBmb3IganVzdGljZSwgd2hpY2ggd2VyZSBtaW5nbGVkIHdpdGggbXVjaCBsYW1lbnRhdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlICAgZ2lzdCBvZiB0aGVpciBwbGVhIHdhcyB0aGF0LCBhbHRob3VnaCB0aGV5IHdlcmUgYWxsaWVzIGFuZCBmcmllbmRzIG9mIHRoZSBSb21hbnMsIHRoZXkgaGFkIHN1ZmZlcmVkIGF0IHRoZSBoYW5kcyBvZiBNYXJjZWxsdXMgd2hhdCBvdGhlciBnZW5lcmFscyBhbGxvd2VkIG1hbnkgb2YgdGhlaXIgZW5lbWllcyB0byBlc2NhcGUuICBUbyB0aGlzIE1hcmNlbGx1cyBtYWRlIGFuc3dlciB0aGF0IGluIHJldHVybiBmb3IgbWFueSBpbmp1cmllcyB3aGljaCB0aGV5IGhhZCBkb25lIHRvIHRoZSBSb21hbnMsIHRoZXkgaGFkIHN1ZmZlcmVkIG5vdGhpbmcgZXhjZXB0IHdoYXQgbWVuIHdob3NlIGNpdHkgaGFzIGJlZW4gdGFrZW4gYnkgc3Rvcm0gaW4gd2FyIGNhbm5vdCBwb3NzaWJseSBiZSBwcmV2ZW50ZWQgZnJvbSBzdWZmZXJpbmc7IGFuZCB0aGF0IHRoZWlyIGNpdHkgaGFkIGJlZW4gc28gdGFrZW4gd2FzIHRoZWlyIG93biBmYXVsdCwgYmVjYXVzZSB0aGV5IGhhZCByZWZ1c2VkIHRvIGxpc3RlbiB0byBoaXMgbWFueSBleGhvcnRhdGlvbnMgYW5kIHBlcnN1YXNpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgd2FzIG5vdCBieSB0aGVpciB0eXJhbnRzIHRoYXQgdGhleSBoYWQgYmVlbiBmb3JjZWQgaW50byB3YXIsIG5heSwgdGhleSBoYWQgZWxlY3RlZCB0aG9zZSB2ZXJ5IHR5cmFudHMgZm9yIHRoZSBwdXJwb3NlIG9mIGdvaW5nIHRvIHdhci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgTWFyY2VsbHVzIHdhcyBzZXJ2aW5nIGFzIGNvbnN1bCBmb3IgdGhlIGZvdXJ0aCB0aW1lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjEwIEIuQy48L25vdGU+IGhpcyBlbmVtaWVzIGluZHVjZWQgdGhlIFN5cmFjdXNhbnMgdG8gY29tZSB0byBSb21lIGFuZCBhY2N1c2UgYW5kIGRlbm91bmNlIGhpbSBiZWZvcmUgdGhlIHNlbmF0ZSBmb3IgdGVycmlibGUgd3JvbmdzIHdoaWNoIHRoZXkgaGFkIHN1ZmZlcmVkIGNvbnRyYXJ5IHRvIHRoZSB0ZXJtcyBvZiBzdXJyZW5kZXIuICBJdCBjaGFuY2VkLCB0aGVuLCB0aGF0IE1hcmNlbGx1cyB3YXMgcGVyZm9ybWluZyBhIHNhY3JpZmljZSBvbiB0aGUgQ2FwaXRvbCwgYnV0LCB0aGUgc2VuYXRlIGJlaW5nIHN0aWxsIGluIHNlc3Npb24sIHRoZSBTeXJhY3VzYW5zIGh1cnJpZWQgYmVmb3JlIGl0IGFuZCBiZWdnZWQgdGhhdCB0aGV5IG1pZ2h0IGhhdmUgYSBoZWFyaW5nIGFuZCBqdXN0aWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb2xsZWFndWUgb2YgTWFyY2VsbHVzIHRyaWVkIHRvIGhhdmUgdGhlbSBleHBlbGxlZCwgYW5ncmlseSBleHBsYWluaW5nIHRoYXQgTWFyY2VsbHVzIHdhcyBub3QgcHJlc2VudDsgYnV0IE1hcmNlbGx1cywgd2hlbiBoZSBoZWFyZCBvZiBpdCwgY2FtZSBhdCBvbmNlLiBBbmQgZmlyc3QsIHNpdHRpbmcgYXMgY29uc3VsIGluIGhpcyBjdXJ1bGUgY2hhaXIsIGhlIHRyYW5zYWN0ZWQgdGhlIHJvdXRpbmUgYnVzaW5lc3M7IHRoZW4sIHdoZW4gdGhpcyB3YXMgYWxsIGVuZGVkLCBjb21pbmcgZG93biBmcm9tIGhpcyBjdXJ1bGUgY2hhaXIgYW5kIHRha2luZyBoaXMgc3RhbmQgYXMgYSBwcml2YXRlIGNpdGl6ZW4gaW4gdGhlIHBsYWNlIHdoZXJlIG1lbiB1bmRlciBhY2N1c2F0aW9uIHVzdWFsbHkgcGxlYWQgdGhlaXIgY2F1c2UsIGhlIGdhdmUgdGhlIFN5cmFjdXNhbnMgb3Bwb3J0dW5pdHkgdG8gcHJlc3MgdGhlaXIgY2hhcmdlLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5IHdlcmUgdGVycmlibHkgY29uZm91bmRlZCBieSBoaXMgZGlnbml0eSBhbmQgY29uZmlkZW5jZSwgYW5kIHRob3VnaHQgaGltIHlldCBtb3JlIGZvcm1pZGFibGUgYW5kIGhhcmQgdG8gY29uZnJvbnQgaW4gaGlzIHJvYmUgb2YgcHVycGxlIHRoYW4gaGUgaGFkIGJlZW4gaXJyZXNpc3RpYmxlIGluIGFybXMuICBIb3dldmVyLCBiZWluZyBlbmNvdXJhZ2VkIGJ5IHRoZSByaXZhbHMgb2YgTWFyY2VsbHVzLCB0aGV5IGJlZ2FuIHRoZWlyIGRlbnVuY2lhdGlvbiBhbmQgcmVoZWFyc2VkIHRoZWlyIGRlbWFuZHMgZm9yIGp1c3RpY2UsIHdoaWNoIHdlcmUgbWluZ2xlZCB3aXRoIG11Y2ggbGFtZW50YXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSAgIGdpc3Qgb2YgdGhlaXIgcGxlYSB3YXMgdGhhdCwgYWx0aG91Z2ggdGhleSB3ZXJlIGFsbGllcyBhbmQgZnJpZW5kcyBvZiB0aGUgUm9tYW5zLCB0aGV5IGhhZCBzdWZmZXJlZCBhdCB0aGUgaGFuZHMgb2YgTWFyY2VsbHVzIHdoYXQgb3RoZXIgZ2VuZXJhbHMgYWxsb3dlZCBtYW55IG9mIHRoZWlyIGVuZW1pZXMgdG8gZXNjYXBlLiAgVG8gdGhpcyBNYXJjZWxsdXMgbWFkZSBhbnN3ZXIgdGhhdCBpbiByZXR1cm4gZm9yIG1hbnkgaW5qdXJpZXMgd2hpY2ggdGhleSBoYWQgZG9uZSB0byB0aGUgUm9tYW5zLCB0aGV5IGhhZCBzdWZmZXJlZCBub3RoaW5nIGV4Y2VwdCB3aGF0IG1lbiB3aG9zZSBjaXR5IGhhcyBiZWVuIHRha2VuIGJ5IHN0b3JtIGluIHdhciBjYW5ub3QgcG9zc2libHkgYmUgcHJldmVudGVkIGZyb20gc3VmZmVyaW5nOyBhbmQgdGhhdCB0aGVpciBjaXR5IGhhZCBiZWVuIHNvIHRha2VuIHdhcyB0aGVpciBvd24gZmF1bHQsIGJlY2F1c2UgdGhleSBoYWQgcmVmdXNlZCB0byBsaXN0ZW4gdG8gaGlzIG1hbnkgZXhob3J0YXRpb25zIGFuZCBwZXJzdWFzaW9ucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgbm90IGJ5IHRoZWlyIHR5cmFudHMgdGhhdCB0aGV5IGhhZCBiZWVuIGZvcmNlZCBpbnRvIHdhciwgbmF5LCB0aGV5IGhhZCBlbGVjdGVkIHRob3NlIHZlcnkgdHlyYW50cyBmb3IgdGhlIHB1cnBvc2Ugb2YgZ29pbmcgdG8gd2FyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gdGhlIHNwZWVjaGVzIHdlcmUgZW5kZWQsIGFuZCB0aGUgU3lyYWN1c2FucywgYXMgdGhlIGN1c3RvbSB3YXMsIHdpdGhkcmV3IGZyb20gdGhlIHNlbmF0ZSwgTWFyY2VsbHVzIHdlbnQgZm9ydGggd2l0aCB0aGVtLCBhZnRlciBnaXZpbmcgdG8gaGlzIGNvbGxlYWd1ZSB0aGUgcHJlc2lkZW5jeSBvZiB0aGUgc2VuYXRlLCBhbmQgbGluZ2VyZWQgYmVmb3JlIHRoZSBkb29ycyBvZiB0aGUgc2VuYXRlLWhvdXNlLCBhbGxvd2luZyBubyBjaGFuZ2UgaW4gaGlzIGFjY3VzdG9tZWQgZGVtZWFub3VyIGVpdGhlciBiZWNhdXNlIGhlIGZlYXJlZCB0aGUgc2VudGVuY2UsIG9yIHdhcyBhbmdyeSB3aXRoIHRoZSBTeXJhY3VzYW5zLCBidXQgd2l0aCBjb21wbGV0ZSBnZW50bGVuZXNzIGFuZCBkZWNvcnVtIGF3YWl0aW5nIHRoZSBpc3N1ZSBvZiB0aGUgY2FzZS4gIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gdGhlIHZvdGVzIGhhZCBiZWVuIGNhc3QsIGFuZCBoZSB3YXMgcHJvY2xhaW1lZCBub3QgZ3VpbHR5LCB0aGUgU3lyYWN1c2FucyBmZWxsIGF0IGhpcyBmZWV0LCBiZWdnaW5nIGhpbSB3aXRoIHRlYXJzIHRvIHJlbWl0IGhpcyB3cmF0aCBhZ2FpbnN0IHRoZSBlbWJhc3N5IHRoZXJlIHByZXNlbnQsIGFuZCB0byB0YWtlIHBpdHkgb24gdGhlIHJlc3Qgb2YgdGhlIGNpdHksIHdoaWNoIGFsd2F5cyB3YXMgbWluZGZ1bCBvZiBmYXZvdXJzIGNvbmZlcnJlZCB1cG9uIGl0IGFuZCBncmF0ZWZ1bCBmb3IgdGhlbS4gIE1hcmNlbGx1cywgYWNjb3JkaW5nbHksIHJlbGVudGVkLCBhbmQgd2FzIHJlY29uY2lsZWQgd2l0aCB0aGUgZW1iYXNzeSwgYW5kIHRvIHRoZSByZXN0IG9mIHRoZSBTeXJhY3VzYW5zIHdhcyBldmVyIGFmdGVyd2FyZHMgY29uc3RhbnQgaW4gZG9pbmcgZ29vZC4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZyZWVkb20sIGFsc28sIHdoaWNoIGhlIGhhZCByZXN0b3JlZCB0byB0aGVtLCBhcyB3ZWxsIGFzIHRoZWlyIGxhd3MgYW5kIHdoYXQgd2FzIGxlZnQgb2YgdGhlaXIgcG9zc2Vzc2lvbnMsIHRoZSBzZW5hdGUgY29uZmlybWVkIHRvIHRoZW0uICAgV2hlcmVmb3JlIE1hcmNlbGx1cyByZWNlaXZlZCBtYW55IHN1cnBhc3NpbmcgaG9ub3VycyBmcm9tIHRoZW0sIGFuZCBwYXJ0aWN1bGFybHkgdGhleSBtYWRlIGEgbGF3IHRoYXQgd2hlbmV2ZXIgaGUgb3IgYW55IG9uZSBvZiBoaXMgZGVzY2VuZGFudHMgc2hvdWxkIHNldCBmb290IGluIFNpY2lseSwgdGhlIFN5cmFjdXNhbnMgc2hvdWxkIHdlYXIgZ2FybGFuZHMgYW5kIHNhY3JpZmljZSB0byB0aGUgZ29kcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSB2b3RlcyBoYWQgYmVlbiBjYXN0LCBhbmQgaGUgd2FzIHByb2NsYWltZWQgbm90IGd1aWx0eSwgdGhlIFN5cmFjdXNhbnMgZmVsbCBhdCBoaXMgZmVldCwgYmVnZ2luZyBoaW0gd2l0aCB0ZWFycyB0byByZW1pdCBoaXMgd3JhdGggYWdhaW5zdCB0aGUgZW1iYXNzeSB0aGVyZSBwcmVzZW50LCBhbmQgdG8gdGFrZSBwaXR5IG9uIHRoZSByZXN0IG9mIHRoZSBjaXR5LCB3aGljaCBhbHdheXMgd2FzIG1pbmRmdWwgb2YgZmF2b3VycyBjb25mZXJyZWQgdXBvbiBpdCBhbmQgZ3JhdGVmdWwgZm9yIHRoZW0uICBNYXJjZWxsdXMsIGFjY29yZGluZ2x5LCByZWxlbnRlZCwgYW5kIHdhcyByZWNvbmNpbGVkIHdpdGggdGhlIGVtYmFzc3ksIGFuZCB0byB0aGUgcmVzdCBvZiB0aGUgU3lyYWN1c2FucyB3YXMgZXZlciBhZnRlcndhcmRzIGNvbnN0YW50IGluIGRvaW5nIGdvb2QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmcmVlZG9tLCBhbHNvLCB3aGljaCBoZSBoYWQgcmVzdG9yZWQgdG8gdGhlbSwgYXMgd2VsbCBhcyB0aGVpciBsYXdzIGFuZCB3aGF0IHdhcyBsZWZ0IG9mIHRoZWlyIHBvc3Nlc3Npb25zLCB0aGUgc2VuYXRlIGNvbmZpcm1lZCB0byB0aGVtLiAgIFdoZXJlZm9yZSBNYXJjZWxsdXMgcmVjZWl2ZWQgbWFueSBzdXJwYXNzaW5nIGhvbm91cnMgZnJvbSB0aGVtLCBhbmQgcGFydGljdWxhcmx5IHRoZXkgbWFkZSBhIGxhdyB0aGF0IHdoZW5ldmVyIGhlIG9yIGFueSBvbmUgb2YgaGlzIGRlc2NlbmRhbnRzIHNob3VsZCBzZXQgZm9vdCBpbiBTaWNpbHksIHRoZSBTeXJhY3VzYW5zIHNob3VsZCB3ZWFyIGdhcmxhbmRzIGFuZCBzYWNyaWZpY2UgdG8gdGhlIGdvZHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgaGUgbW92ZWQgYXQgb25jZSBhZ2FpbnN0IEhhbm5pYmFsLiAgQW5kIGFsdGhvdWdoIGFsbW9zdCBhbGwgdGhlIG90aGVyIGNvbnN1bHMgYW5kIGNvbW1hbmRlcnMsIGFmdGVyIHRoZSBkaXNhc3RlciBhdCBDYW5uYWUsIG1hZGUgdGhlIGF2b2lkYW5jZSBvZiBhbGwgZmlnaHRpbmcgdGhlaXIgc29sZSBwbGFuIG9mIGNhbXBhaWduIGFnYWluc3QgdGhpcyBhbnRhZ29uaXN0LCBhbmQgbm8gb25lIGhhZCB0aGUgY291cmFnZSB0byBlbmdhZ2UgaW4gYSBwaXRjaGVkIGJhdHRsZSB3aXRoIGhpbSwgTWFyY2VsbHVzIGhpbXNlbGYgdG9vayB0aGUgb3Bwb3NpdGUgY291cnNlLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz50aGlua2luZyB0aGF0IGJlZm9yZSB0aGUgdGltZSB0aG91Z2h0IG5lY2Vzc2FyeSBmb3IgZGVzdHJveWluZyBIYW5uaWJhbCBoYWQgZWxhcHNlZCwgSXRhbHkgd291bGQgaW5zZW5zaWJseSBiZSB3b3JuIG91dCBieSBoaW0uICBIZSB0aG91Z2h0LCB0b28sIHRoYXQgRmFiaXVzLCBieSBtYWtpbmcgc2FmZXR5IGhpcyBjb25zdGFudCBhaW0sIHdhcyBub3QgdGFraW5nIHRoZSByaWdodCBjb3Vyc2UgdG8gaGVhbCB0aGUgbWFsYWR5IG9mIHRoZSBjb3VudHJ5LCBzaW5jZSB0aGUgZXh0aW5jdGlvbiBvZiB0aGUgd2FyIGZvciB3aGljaCBoZSB3YWl0ZWQgd291bGQgYmUgY29pbmNpZGVudCB3aXRoIHRoZSBleGhhdXN0aW9uIG9mIFJvbWUsIGp1c3QgYXMgcGh5c2ljaWFucyB3aG8gYXJlIHRpbWlkIGFuZCBhZnJhaWQgdG8gYXBwbHkgcmVtZWRpZXMsIGNvbnNpZGVyIHRoZSBjb25zdW1wdGlvbiAgICBvZiB0aGUgcGF0aWVudCdzIHBvd2VycyB0byBiZSB0aGUgYWJhdGVtZW50IG9mIHRoZSBkaXNlYXNlLiAgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rmlyc3QsIHRoZW4sIGhlIHRvb2sgdGhlIGxhcmdlIGNpdGllcyBvZiB0aGUgU2Ftbml0ZXMgd2hpY2ggaGFkIHJldm9sdGVkLCBhbmQgZ290IHBvc3Nlc3Npb24gb2YgZ3JlYXQgcXVhbnRpdGllcyBvZiBncmFpbiB3aGljaCBoYWQgYmVlbiBzdG9yZWQgaW4gdGhlbSwgYmVzaWRlcyBtb25leSwgYW5kIHRoZSB0aHJlZSB0aG91c2FuZCBzb2xkaWVycyBvZiBIYW5uaWJhbCB3aG8gd2VyZSBndWFyZGluZyB0aGVtLiAgICBOZXh0LCBhZnRlciBIYW5uaWJhbCBoYWQgc2xhaW4gdGhlIHByb2NvbnN1bCBHbmFldXMgRnVsdml1cyBoaW1zZWxmIGluIEFwdWxpYSwgdG9nZXRoZXIgd2l0aCBlbGV2ZW4gbWlsaXRhcnkgdHJpYnVuZXMsIGFuZCBoYWQgY3V0IHRvIHBpZWNlcyB0aGUgZ3JlYXRlciBwYXJ0IG9mIGhpcyBhcm15LCBNYXJjZWxsdXMgc2VudCBsZXR0ZXJzIHRvIFJvbWUgYmlkZGluZyB0aGUgY2l0aXplbnMgYmUgb2YgZ29vZCBjb3VyYWdlLCBmb3IgdGhhdCBoZSBoaW1zZWxmIHdhcyBhbHJlYWR5IG9uIHRoZSBtYXJjaCB0byByb2IgSGFubmliYWwgb2YgaGlzIGpveS4gIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkxpdnkgc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4yIiB2YWxpZD0ieWVzIj54eHZpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gIHRoYXQgd2hlbiB0aGVzZSBsZXR0ZXJzIHdlcmUgcmVhZCwgdGhleSBkaWQgbm90IHRha2UgYXdheSB0aGUgZ3JpZWYgb2YgdGhlIFJvbWFucywgYnV0IGFkZGVkIHRvIHRoZWlyIGZlYXI7IGZvciB0aGV5IHRob3VnaHQgdGhlaXIgcHJlc2VudCBkYW5nZXIgYXMgbXVjaCBncmVhdGVyIHRoYW4gdGhlIHBhc3QgYXMgTWFyY2VsbHVzIHdhcyBzdXBlcmlvciB0byBGdWx2aXVzLiAgQnV0IE1hcmNlbGx1cywgYXMgaGUgaGFkIHdyaXR0ZW4sIGF0IG9uY2UgcHVyc3VlZCBIYW5uaWJhbCBpbnRvIEx1Y2FuaWEsIGFuZCBjYW1lIHVwIHdpdGggaGltLCBhbmQgYXMgaGUgZm91bmQgaGltIG9jY3VweWluZyBhIHNlY3VyZSBwb3NpdGlvbiBvbiBoZWlnaHRzIGFib3V0IHRoZSBjaXR5IG9mIE51bWlzdHJvLCBoZSBoaW1zZWxmIGVuY2FtcGVkIGluIHRoZSBwbGFpbi4gIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBmb2xsb3dpbmcgZGF5IGhlIHdhcyBmaXJzdCB0byBhcnJheSBoaXMgZm9yY2VzIHdoZW4gSGFubmliYWwgY2FtZSBkb3duIGludG8gdGhlIHBsYWluLCBhbmQgZm91Z2h0IGEgYmF0dGxlIHdpdGggaGltIHdoaWNoLCB0aG91Z2ggaW5kZWNpc2l2ZSwgd2FzIGRlc3BlcmF0ZSBhbmQgbG9uZzsgZm9yIHRoZWlyIGVuZ2FnZW1lbnQgYmVnYW4gYXQgdGhlIHRoaXJkIGhvdXIsIGFuZCB3YXMgd2l0aCBkaWZmaWN1bHR5IGVuZGVkIHdoZW4gaXQgd2FzIGFscmVhZHkgZGFyay4gQnV0IGF0IGRheWJyZWFrIE1hcmNlbGx1cyBsZWQgaGlzIGFybXkgZm9ydGggYWdhaW4sIHB1dCB0aGVtIGluIGFycmF5IGFtb25nIHRoZSBkZWFkIGJvZGllcyBvZiB0aGUgc2xhaW4sIGFuZCBjaGFsbGVuZ2VkIEhhbm5pYmFsIHRvIGZpZ2h0IGl0IG91dCB3aXRoIGhpbSBmb3IgdGhlIHZpY3RvcnkuICAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBIYW5uaWJhbCB3aXRoZHJldyBoaXMgZm9yY2VzLCBNYXJjZWxsdXMgc3RyaXBwZWQgdGhlIGRlYWQgYm9kaWVzIG9mIHRoZSBlbmVteSwgYnVyaWVkIHRob3NlIG9mIGhpcyBvd24gbWVuLCBhbmQgcHVyc3VlZCBoaW0gICAgIGFnYWluLiBBbmQgIHRob3VnaCBoaXMgICBhZHZlcnNhcnkgbGFpZCBtYW55IGFtYnVzaGVzIGZvciBoaW0sIGhlIGVzY2FwZWQgdGhlbSBhbGwsIGFuZCBieSBnZXR0aW5nIHRoZSBhZHZhbnRhZ2Ugb2YgaGltIGluIGFsbCB0aGUgc2tpcm1pc2hlcywgd29uIGFkbWlyYXRpb24gZm9yIGhpbXNlbGYuICAgRm9yIHRoaXMgcmVhc29uLCB0b28sIHdoZW4gdGhlIGNvbnN1bGFyIGVsZWN0aW9ucyBkcmV3IG5lYXIsIHRoZSBzZW5hdGUgZGVjaWRlZCB0aGF0IGl0IHdhcyBiZXR0ZXIgdG8gcmVjYWxsIHRoZSBvdGhlciBjb25zdWwgZnJvbSBTaWNpbHkgdGhhbiB0byBkaXN0dXJiIE1hcmNlbGx1cyBpbiBoaXMgZ3JhcHBsaW5nIHdpdGggSGFubmliYWwsIGFuZCB3aGVuIGhlIHdhcyBjb21lLCBpdCBiYWRlIGhpbSBkZWNsYXJlIFF1aW50dXMgRnVsdml1cyBkaWN0YXRvci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBoZSBtb3ZlZCBhdCBvbmNlIGFnYWluc3QgSGFubmliYWwuICBBbmQgYWx0aG91Z2ggYWxtb3N0IGFsbCB0aGUgb3RoZXIgY29uc3VscyBhbmQgY29tbWFuZGVycywgYWZ0ZXIgdGhlIGRpc2FzdGVyIGF0IENhbm5hZSwgbWFkZSB0aGUgYXZvaWRhbmNlIG9mIGFsbCBmaWdodGluZyB0aGVpciBzb2xlIHBsYW4gb2YgY2FtcGFpZ24gYWdhaW5zdCB0aGlzIGFudGFnb25pc3QsIGFuZCBubyBvbmUgaGFkIHRoZSBjb3VyYWdlIHRvIGVuZ2FnZSBpbiBhIHBpdGNoZWQgYmF0dGxlIHdpdGggaGltLCBNYXJjZWxsdXMgaGltc2VsZiB0b29rIHRoZSBvcHBvc2l0ZSBjb3Vyc2UsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoaW5raW5nIHRoYXQgYmVmb3JlIHRoZSB0aW1lIHRob3VnaHQgbmVjZXNzYXJ5IGZvciBkZXN0cm95aW5nIEhhbm5pYmFsIGhhZCBlbGFwc2VkLCBJdGFseSB3b3VsZCBpbnNlbnNpYmx5IGJlIHdvcm4gb3V0IGJ5IGhpbS4gIEhlIHRob3VnaHQsIHRvbywgdGhhdCBGYWJpdXMsIGJ5IG1ha2luZyBzYWZldHkgaGlzIGNvbnN0YW50IGFpbSwgd2FzIG5vdCB0YWtpbmcgdGhlIHJpZ2h0IGNvdXJzZSB0byBoZWFsIHRoZSBtYWxhZHkgb2YgdGhlIGNvdW50cnksIHNpbmNlIHRoZSBleHRpbmN0aW9uIG9mIHRoZSB3YXIgZm9yIHdoaWNoIGhlIHdhaXRlZCB3b3VsZCBiZSBjb2luY2lkZW50IHdpdGggdGhlIGV4aGF1c3Rpb24gb2YgUm9tZSwganVzdCBhcyBwaHlzaWNpYW5zIHdobyBhcmUgdGltaWQgYW5kIGFmcmFpZCB0byBhcHBseSByZW1lZGllcywgY29uc2lkZXIgdGhlIGNvbnN1bXB0aW9uICAgIG9mIHRoZSBwYXRpZW50J3MgcG93ZXJzIHRvIGJlIHRoZSBhYmF0ZW1lbnQgb2YgdGhlIGRpc2Vhc2UuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZpcnN0LCB0aGVuLCBoZSB0b29rIHRoZSBsYXJnZSBjaXRpZXMgb2YgdGhlIFNhbW5pdGVzIHdoaWNoIGhhZCByZXZvbHRlZCwgYW5kIGdvdCBwb3NzZXNzaW9uIG9mIGdyZWF0IHF1YW50aXRpZXMgb2YgZ3JhaW4gd2hpY2ggaGFkIGJlZW4gc3RvcmVkIGluIHRoZW0sIGJlc2lkZXMgbW9uZXksIGFuZCB0aGUgdGhyZWUgdGhvdXNhbmQgc29sZGllcnMgb2YgSGFubmliYWwgd2hvIHdlcmUgZ3VhcmRpbmcgdGhlbS4gICAgTmV4dCwgYWZ0ZXIgSGFubmliYWwgaGFkIHNsYWluIHRoZSBwcm9jb25zdWwgR25hZXVzIEZ1bHZpdXMgaGltc2VsZiBpbiBBcHVsaWEsIHRvZ2V0aGVyIHdpdGggZWxldmVuIG1pbGl0YXJ5IHRyaWJ1bmVzLCBhbmQgaGFkIGN1dCB0byBwaWVjZXMgdGhlIGdyZWF0ZXIgcGFydCBvZiBoaXMgYXJteSwgTWFyY2VsbHVzIHNlbnQgbGV0dGVycyB0byBSb21lIGJpZGRpbmcgdGhlIGNpdGl6ZW5zIGJlIG9mIGdvb2QgY291cmFnZSwgZm9yIHRoYXQgaGUgaGltc2VsZiB3YXMgYWxyZWFkeSBvbiB0aGUgbWFyY2ggdG8gcm9iIEhhbm5pYmFsIG9mIGhpcyBqb3kuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkxpdnkgc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjcuMiIgdmFsaWQ9InllcyI+eHh2aWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+ICB0aGF0IHdoZW4gdGhlc2UgbGV0dGVycyB3ZXJlIHJlYWQsIHRoZXkgZGlkIG5vdCB0YWtlIGF3YXkgdGhlIGdyaWVmIG9mIHRoZSBSb21hbnMsIGJ1dCBhZGRlZCB0byB0aGVpciBmZWFyOyBmb3IgdGhleSB0aG91Z2h0IHRoZWlyIHByZXNlbnQgZGFuZ2VyIGFzIG11Y2ggZ3JlYXRlciB0aGFuIHRoZSBwYXN0IGFzIE1hcmNlbGx1cyB3YXMgc3VwZXJpb3IgdG8gRnVsdml1cy4gIEJ1dCBNYXJjZWxsdXMsIGFzIGhlIGhhZCB3cml0dGVuLCBhdCBvbmNlIHB1cnN1ZWQgSGFubmliYWwgaW50byBMdWNhbmlhLCBhbmQgY2FtZSB1cCB3aXRoIGhpbSwgYW5kIGFzIGhlIGZvdW5kIGhpbSBvY2N1cHlpbmcgYSBzZWN1cmUgcG9zaXRpb24gb24gaGVpZ2h0cyBhYm91dCB0aGUgY2l0eSBvZiBOdW1pc3RybywgaGUgaGltc2VsZiBlbmNhbXBlZCBpbiB0aGUgcGxhaW4uICAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjcuMiIgdmFsaWQ9InllcyI+eHh2aWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBmb2xsb3dpbmcgZGF5IGhlIHdhcyBmaXJzdCB0byBhcnJheSBoaXMgZm9yY2VzIHdoZW4gSGFubmliYWwgY2FtZSBkb3duIGludG8gdGhlIHBsYWluLCBhbmQgZm91Z2h0IGEgYmF0dGxlIHdpdGggaGltIHdoaWNoLCB0aG91Z2ggaW5kZWNpc2l2ZSwgd2FzIGRlc3BlcmF0ZSBhbmQgbG9uZzsgZm9yIHRoZWlyIGVuZ2FnZW1lbnQgYmVnYW4gYXQgdGhlIHRoaXJkIGhvdXIsIGFuZCB3YXMgd2l0aCBkaWZmaWN1bHR5IGVuZGVkIHdoZW4gaXQgd2FzIGFscmVhZHkgZGFyay4gQnV0IGF0IGRheWJyZWFrIE1hcmNlbGx1cyBsZWQgaGlzIGFybXkgZm9ydGggYWdhaW4sIHB1dCB0aGVtIGluIGFycmF5IGFtb25nIHRoZSBkZWFkIGJvZGllcyBvZiB0aGUgc2xhaW4sIGFuZCBjaGFsbGVuZ2VkIEhhbm5pYmFsIHRvIGZpZ2h0IGl0IG91dCB3aXRoIGhpbSBmb3IgdGhlIHZpY3RvcnkuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEhhbm5pYmFsIHdpdGhkcmV3IGhpcyBmb3JjZXMsIE1hcmNlbGx1cyBzdHJpcHBlZCB0aGUgZGVhZCBib2RpZXMgb2YgdGhlIGVuZW15LCBidXJpZWQgdGhvc2Ugb2YgaGlzIG93biBtZW4sIGFuZCBwdXJzdWVkIGhpbSAgICAgYWdhaW4uIEFuZCAgdGhvdWdoIGhpcyAgIGFkdmVyc2FyeSBsYWlkIG1hbnkgYW1idXNoZXMgZm9yIGhpbSwgaGUgZXNjYXBlZCB0aGVtIGFsbCwgYW5kIGJ5IGdldHRpbmcgdGhlIGFkdmFudGFnZSBvZiBoaW0gaW4gYWxsIHRoZSBza2lybWlzaGVzLCB3b24gYWRtaXJhdGlvbiBmb3IgaGltc2VsZi4gICBGb3IgdGhpcyByZWFzb24sIHRvbywgd2hlbiB0aGUgY29uc3VsYXIgZWxlY3Rpb25zIGRyZXcgbmVhciwgdGhlIHNlbmF0ZSBkZWNpZGVkIHRoYXQgaXQgd2FzIGJldHRlciB0byByZWNhbGwgdGhlIG90aGVyIGNvbnN1bCBmcm9tIFNpY2lseSB0aGFuIHRvIGRpc3R1cmIgTWFyY2VsbHVzIGluIGhpcyBncmFwcGxpbmcgd2l0aCBIYW5uaWJhbCwgYW5kIHdoZW4gaGUgd2FzIGNvbWUsIGl0IGJhZGUgaGltIGRlY2xhcmUgUXVpbnR1cyBGdWx2aXVzIGRpY3RhdG9yLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYSBkaWN0YXRvciBjYW5ub3QgYmUgY2hvc2VuIGVpdGhlciBieSB0aGUgcGVvcGxlIG9yIGJ5IHRoZSBzZW5hdGUsIGJ1dCBvbmUgb2YgdGhlIGNvbnN1bHMgb3IgcHJhZXRvcnMgY29tZXMgYmVmb3JlIHRoZSBhc3NlbWJsZWQgcGVvcGxlIGFuZCBuYW1lcyBhcyBkaWN0YXRvciB0aGUgb25lIHdob20gaGUgaGltc2VsZiBkZWNpZGVzIHVwb24uICBBbmQgZm9yIHRoaXMgcmVhc29uIHRoZSBvbmUgc28gbmFtZWQgaXMgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZGljdGF0b3IsPC9xPiBmcm9tIHRoZSBMYXRpbiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpY2VyZSw8L3E+IHRvIDxlbXBoPm5hbWU8L2VtcGg+IG9yIDxlbXBoPmRlY2xhcmU8L2VtcGg+LiAgU29tZSwgaG93ZXZlciwgc2F5IHRoYXQgdGhlIGRpY3RhdG9yIGlzIHNvIG5hbWVkIGJlY2F1c2UgaGUgcHV0cyBubyBxdWVzdGlvbiB0byB2b3RlIG9yIHNob3cgb2YgaGFuZHMsIGJ1dCBvcmRhaW5zIGFuZCBkZWNsYXJlcyBvZiBoaXMgb3duIGF1dGhvcml0eSB0aGF0IHdoaWNoIHNlZW1zIGdvb2QgdG8gaGltOyBmb3IgdGhlIG9yZGVycyBvZiBtYWdpc3RyYXRlcywgd2hpY2ggdGhlIEdyZWVrcyBjYWxsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZGlhdGFnbWF0YSw8L3E+IHRoZSBSb21hbnMgY2FsbCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmVkaWN0YS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhIGRpY3RhdG9yIGNhbm5vdCBiZSBjaG9zZW4gZWl0aGVyIGJ5IHRoZSBwZW9wbGUgb3IgYnkgdGhlIHNlbmF0ZSwgYnV0IG9uZSBvZiB0aGUgY29uc3VscyBvciBwcmFldG9ycyBjb21lcyBiZWZvcmUgdGhlIGFzc2VtYmxlZCBwZW9wbGUgYW5kIG5hbWVzIGFzIGRpY3RhdG9yIHRoZSBvbmUgd2hvbSBoZSBoaW1zZWxmIGRlY2lkZXMgdXBvbi4gIEFuZCBmb3IgdGhpcyByZWFzb24gdGhlIG9uZSBzbyBuYW1lZCBpcyBjYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpY3RhdG9yLDwvcT4gZnJvbSB0aGUgTGF0aW4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpY2VyZSw8L3E+IHRvIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+bmFtZTwvZW1waD4gb3IgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5kZWNsYXJlPC9lbXBoPi4gIFNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IHRoZSBkaWN0YXRvciBpcyBzbyBuYW1lZCBiZWNhdXNlIGhlIHB1dHMgbm8gcXVlc3Rpb24gdG8gdm90ZSBvciBzaG93IG9mIGhhbmRzLCBidXQgb3JkYWlucyBhbmQgZGVjbGFyZXMgb2YgaGlzIG93biBhdXRob3JpdHkgdGhhdCB3aGljaCBzZWVtcyBnb29kIHRvIGhpbTsgZm9yIHRoZSBvcmRlcnMgb2YgbWFnaXN0cmF0ZXMsIHdoaWNoIHRoZSBHcmVla3MgY2FsbCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZGlhdGFnbWF0YSw8L3E+IHRoZSBSb21hbnMgY2FsbCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZWRpY3RhLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBjb2xsZWFndWUgb2YgTWFyY2VsbHVzLCB3aG8gaGFkIGNvbWUgYmFjayBmcm9tIFNpY2lseSwgd2lzaGVkIHRvIGFwcG9pbnQgYW5vdGhlciBtYW4gYXMgZGljdGF0b3IsIGFuZCBiZWluZyB1bndpbGxpbmcgdG8gaGF2ZSBoaXMgb3BpbmlvbiBvdmVyYm9ybmUgYnkgZm9yY2UsIHNhaWxlZCBvZmYgYnkgbmlnaHQgdG8gU2ljaWx5LiBVbmRlciB0aGVzZSBjaXJjdW1zdGFuY2VzIHRoZSBwZW9wbGUgbmFtZWQgUXVpbnR1cyBGdWx2aXVzIGFzIGRpY3RhdG9yLCBhbmQgdGhlIHNlbmF0ZSB3cm90ZSB0byBNYXJjZWxsdXMgYmlkZGluZyBoaW0gY29uZmlybSB0aGUgbm9taW5hdGlvbi4gIEhlIGNvbnNlbnRlZCwgcHJvY2xhaW1lZCBRdWludHVzIEZ1bHZpdXMgZGljdGF0b3IsIGFuZCBzbyBjb25maXJtZWQgdGhlIHdpbGwgb2YgdGhlIHBlb3BsZTsgaGUgaGltc2VsZiB3YXMgYXBwb2ludGVkIHByb2NvbnN1bCBhZ2FpbiBmb3IgdGhlIGVuc3VpbmcgeWVhci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4yMDkgQi5DLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSB0aGVuIG1hZGUgYW4gYWdyZWVtZW50IHdpdGggRmFiaXVzIE1heGltdXMgdGhhdCwgd2hpbGUgRmFiaXVzIHNob3VsZCBtYWtlIGFuIGF0dGVtcHQgdXBvbiBUYXJlbnR1bSwgaGUgaGltc2VsZiwgYnkgZGl2ZXJ0aW5nIEhhbm5pYmFsIGFuZCBlbmdhZ2luZyB3aXRoIGhpbSwgc2hvdWxkIHByZXZlbnQgaGltIGZyb20gY29taW5nIHRvIHRoZSByZWxpZWYgb2YgdGhhdCBwbGFjZS4gICBIZSBjYW1lIHVwIHdpdGggSGFubmliYWwgYXQgQ2FudXNpdW0sIGFuZCBhcyBoaXMgYWR2ZXJzYXJ5IG9mdGVuIHNoaWZ0ZWQgaGlzIGNhbXAgYW5kIGRlY2xpbmVkIGJhdHRsZSwgaGUgdGhyZWF0ZW5lZCBoaW0gY29udGludWFsbHksIGFuZCBhdCBsYXN0LCBieSBoYXJhc3NpbmcgaGltIHdpdGggaGlzIHNraXJtaXNoZXJzLCBkcmV3IGhpbSBvdXQgb2YgaGlzIGVudHJlbmNobWVudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG91Z2ggYmF0dGxlIHdhcyBvZmZlcmVkIGFuZCBhY2NlcHRlZCwgbmlnaHQgcGFydGVkIHRoZSBjb21iYXRhbnRzLCBhbmQgbmV4dCBkYXkgTWFyY2VsbHVzIGFwcGVhcmVkIGFnYWluIHdpdGggaGlzIGFybXkgZHJhd24gdXAgaW4gYmF0dGxlIGFycmF5OyBzbyB0aGF0IEhhbm5pYmFsLCBpbiBkaXN0cmVzcywgY2FsbGVkIGhpcyBDYXJ0aGFnaW5pYW5zIHRvZ2V0aGVyIGFuZCBiZXNvdWdodCB0aGVtIHRvIG1ha2UgdGhlaXIgZmlnaHRpbmcgdGhhdCBkYXkgc3VycGFzcyBhbGwgdGhlaXIgcHJldmlvdXMgc3RydWdnbGVzLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciB5b3Ugc2VlLDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGF0IHdlIGNhbm5vdCBldmVuIHRha2UgYnJlYXRoIGFmdGVyIGFsbCBvdXIgdmljdG9yaWVzLCBub3IgaGF2ZSByZXNwaXRlIHRob3VnaCB3ZSBhcmUgICBpbiB0aGUgbWFzdGVyeSwgdW5sZXNzICB3ZSAgZHJpdmUgICAgdGhpcyBtYW4gYXdheS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBjb2xsZWFndWUgb2YgTWFyY2VsbHVzLCB3aG8gaGFkIGNvbWUgYmFjayBmcm9tIFNpY2lseSwgd2lzaGVkIHRvIGFwcG9pbnQgYW5vdGhlciBtYW4gYXMgZGljdGF0b3IsIGFuZCBiZWluZyB1bndpbGxpbmcgdG8gaGF2ZSBoaXMgb3BpbmlvbiBvdmVyYm9ybmUgYnkgZm9yY2UsIHNhaWxlZCBvZmYgYnkgbmlnaHQgdG8gU2ljaWx5LiBVbmRlciB0aGVzZSBjaXJjdW1zdGFuY2VzIHRoZSBwZW9wbGUgbmFtZWQgUXVpbnR1cyBGdWx2aXVzIGFzIGRpY3RhdG9yLCBhbmQgdGhlIHNlbmF0ZSB3cm90ZSB0byBNYXJjZWxsdXMgYmlkZGluZyBoaW0gY29uZmlybSB0aGUgbm9taW5hdGlvbi4gIEhlIGNvbnNlbnRlZCwgcHJvY2xhaW1lZCBRdWludHVzIEZ1bHZpdXMgZGljdGF0b3IsIGFuZCBzbyBjb25maXJtZWQgdGhlIHdpbGwgb2YgdGhlIHBlb3BsZTsgaGUgaGltc2VsZiB3YXMgYXBwb2ludGVkIHByb2NvbnN1bCBhZ2FpbiBmb3IgdGhlIGVuc3VpbmcgeWVhci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIwOSBCLkMuPC9ub3RlPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZW4gbWFkZSBhbiBhZ3JlZW1lbnQgd2l0aCBGYWJpdXMgTWF4aW11cyB0aGF0LCB3aGlsZSBGYWJpdXMgc2hvdWxkIG1ha2UgYW4gYXR0ZW1wdCB1cG9uIFRhcmVudHVtLCBoZSBoaW1zZWxmLCBieSBkaXZlcnRpbmcgSGFubmliYWwgYW5kIGVuZ2FnaW5nIHdpdGggaGltLCBzaG91bGQgcHJldmVudCBoaW0gZnJvbSBjb21pbmcgdG8gdGhlIHJlbGllZiBvZiB0aGF0IHBsYWNlLiAgIEhlIGNhbWUgdXAgd2l0aCBIYW5uaWJhbCBhdCBDYW51c2l1bSwgYW5kIGFzIGhpcyBhZHZlcnNhcnkgb2Z0ZW4gc2hpZnRlZCBoaXMgY2FtcCBhbmQgZGVjbGluZWQgYmF0dGxlLCBoZSB0aHJlYXRlbmVkIGhpbSBjb250aW51YWxseSwgYW5kIGF0IGxhc3QsIGJ5IGhhcmFzc2luZyBoaW0gd2l0aCBoaXMgc2tpcm1pc2hlcnMsIGRyZXcgaGltIG91dCBvZiBoaXMgZW50cmVuY2htZW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG91Z2ggYmF0dGxlIHdhcyBvZmZlcmVkIGFuZCBhY2NlcHRlZCwgbmlnaHQgcGFydGVkIHRoZSBjb21iYXRhbnRzLCBhbmQgbmV4dCBkYXkgTWFyY2VsbHVzIGFwcGVhcmVkIGFnYWluIHdpdGggaGlzIGFybXkgZHJhd24gdXAgaW4gYmF0dGxlIGFycmF5OyBzbyB0aGF0IEhhbm5pYmFsLCBpbiBkaXN0cmVzcywgY2FsbGVkIGhpcyBDYXJ0aGFnaW5pYW5zIHRvZ2V0aGVyIGFuZCBiZXNvdWdodCB0aGVtIHRvIG1ha2UgdGhlaXIgZmlnaHRpbmcgdGhhdCBkYXkgc3VycGFzcyBhbGwgdGhlaXIgcHJldmlvdXMgc3RydWdnbGVzLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIHlvdSBzZWUsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCB3ZSBjYW5ub3QgZXZlbiB0YWtlIGJyZWF0aCBhZnRlciBhbGwgb3VyIHZpY3Rvcmllcywgbm9yIGhhdmUgcmVzcGl0ZSB0aG91Z2ggd2UgYXJlICAgaW4gdGhlIG1hc3RlcnksIHVubGVzcyAgd2UgIGRyaXZlICAgIHRoaXMgbWFuIGF3YXkuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIHRoZXkgam9pbmVkIGJhdHRsZSBhbmQgZm91Z2h0LiAgQW5kIGl0IHdvdWxkIHNlZW0gdGhhdCBNYXJjZWxsdXMgbWFkZSBhbiB1bnNlYXNvbmFibGUgbW92ZW1lbnQgZHVyaW5nIHRoZSBhY3Rpb24sIGFuZCAgc28gbWV0IHdpdGggZGlzYXN0ZXIuICBGb3Igd2hlbiBoaXMgcmlnaHQgd2luZyB3YXMgaGFyZCBwcmVzc2VkLCBoZSBvcmRlcmVkIG9uZSBvZiBoaXMgbGVnaW9ucyB0byBtb3ZlIHVwIHRvIHRoZSBmcm9udC4gVGhpcyBjaGFuZ2Ugb2YgcG9zaXRpb24gdGhyZXcgaGlzIGFybXkgaW50byBjb25mdXNpb24gYW5kIGdhdmUgdGhlIHZpY3RvcnkgdG8gdGhlIGVuZW15LCB3aG8gc2xldyB0d2VudHktc2V2ZW4gaHVuZHJlZCBvZiB0aGUgUm9tYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5NYXJjZWxsdXMgdGhlbiB3aXRoZHJldyB0byBoaXMgY2FtcCwgY2FsbGVkIGhpcyBhcm15IHRvZ2V0aGVyLCBhbmQgdG9sZCB0aGVtIHRoYXQgaGUgc2F3IGJlZm9yZSBoaW0gbWFueSBSb21hbiBhcm1zIGFuZCBSb21hbiBib2RpZXMsIGJ1dCBub3QgYSBzaW5nbGUgUm9tYW4uIEFuZCB3aGVuIHRoZXkgYXNrZWQgZm9yIGhpcyBwYXJkb24sIGhlIHJlZnVzZWQgdG8gZ2l2ZSBpdCB3aGlsZSB0aGV5IHdlcmUgdmFucXVpc2hlZCwgYnV0IHByb21pc2VkIHRvIGRvIHNvIGlmIHRoZXkgc2hvdWxkIHdpbiBhIHZpY3RvcnksIGFzc3VyaW5nIHRoZW0gdGhhdCBvbiB0aGUgbW9ycm93IHRoZXkgc2hvdWxkIGZpZ2h0IGFnYWluLCBpbiBvcmRlciB0aGF0IHRoZWlyIGNvdW50cnltZW4gbWlnaHQgaGVhciBvZiB0aGVpciB2aWN0b3J5IHNvb25lciB0aGFuIG9mIHRoZWlyIGZsaWdodC4gIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBjbG9zZSBvZiBoaXMgc3BlZWNoLCBtb3Jlb3ZlciwgaGUgZ2F2ZSBvcmRlcnMgdGhhdCByYXRpb25zIG9mIGJhcmxleSBpbnN0ZWFkIG9mIHdoZWF0IHNob3VsZCBiZSBnaXZlbiB0byB0aGUsIGNvaG9ydHMgdGhhdCBoYWQgIGJlZW4gd29yc3RlZC4gICAgICBUaGVyZWZvcmUsIHRob3VnaCBtYW55IHdlcmUgaW4gYSB3cmV0Y2hlZCBhbmQgZGFuZ2Vyb3VzIHBsaWdodCBhZnRlciB0aGUgYmF0dGxlLCB0aGVyZSB3YXMgbm90IGEgbWFuIG9mIHRoZW0sIHRoZXkgc2F5LCB0byB3aG9tIHRoZSB3b3JkcyBvZiBNYXJjZWxsdXMgZGlkIG5vdCBnaXZlIG1vcmUgcGFpbiB0aGFuIGhpcyB3b3VuZHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjEyIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHZpaS4gMTIgYW5kIDEzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgdGhleSBqb2luZWQgYmF0dGxlIGFuZCBmb3VnaHQuICBBbmQgaXQgd291bGQgc2VlbSB0aGF0IE1hcmNlbGx1cyBtYWRlIGFuIHVuc2Vhc29uYWJsZSBtb3ZlbWVudCBkdXJpbmcgdGhlIGFjdGlvbiwgYW5kICBzbyBtZXQgd2l0aCBkaXNhc3Rlci4gIEZvciB3aGVuIGhpcyByaWdodCB3aW5nIHdhcyBoYXJkIHByZXNzZWQsIGhlIG9yZGVyZWQgb25lIG9mIGhpcyBsZWdpb25zIHRvIG1vdmUgdXAgdG8gdGhlIGZyb250LiBUaGlzIGNoYW5nZSBvZiBwb3NpdGlvbiB0aHJldyBoaXMgYXJteSBpbnRvIGNvbmZ1c2lvbiBhbmQgZ2F2ZSB0aGUgdmljdG9yeSB0byB0aGUgZW5lbXksIHdobyBzbGV3IHR3ZW50eS1zZXZlbiBodW5kcmVkIG9mIHRoZSBSb21hbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hcmNlbGx1cyB0aGVuIHdpdGhkcmV3IHRvIGhpcyBjYW1wLCBjYWxsZWQgaGlzIGFybXkgdG9nZXRoZXIsIGFuZCB0b2xkIHRoZW0gdGhhdCBoZSBzYXcgYmVmb3JlIGhpbSBtYW55IFJvbWFuIGFybXMgYW5kIFJvbWFuIGJvZGllcywgYnV0IG5vdCBhIHNpbmdsZSBSb21hbi4gQW5kIHdoZW4gdGhleSBhc2tlZCBmb3IgaGlzIHBhcmRvbiwgaGUgcmVmdXNlZCB0byBnaXZlIGl0IHdoaWxlIHRoZXkgd2VyZSB2YW5xdWlzaGVkLCBidXQgcHJvbWlzZWQgdG8gZG8gc28gaWYgdGhleSBzaG91bGQgd2luIGEgdmljdG9yeSwgYXNzdXJpbmcgdGhlbSB0aGF0IG9uIHRoZSBtb3Jyb3cgdGhleSBzaG91bGQgZmlnaHQgYWdhaW4sIGluIG9yZGVyIHRoYXQgdGhlaXIgY291bnRyeW1lbiBtaWdodCBoZWFyIG9mIHRoZWlyIHZpY3Rvcnkgc29vbmVyIHRoYW4gb2YgdGhlaXIgZmxpZ2h0LiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBjbG9zZSBvZiBoaXMgc3BlZWNoLCBtb3Jlb3ZlciwgaGUgZ2F2ZSBvcmRlcnMgdGhhdCByYXRpb25zIG9mIGJhcmxleSBpbnN0ZWFkIG9mIHdoZWF0IHNob3VsZCBiZSBnaXZlbiB0byB0aGUsIGNvaG9ydHMgdGhhdCBoYWQgIGJlZW4gd29yc3RlZC4gICAgICBUaGVyZWZvcmUsIHRob3VnaCBtYW55IHdlcmUgaW4gYSB3cmV0Y2hlZCBhbmQgZGFuZ2Vyb3VzIHBsaWdodCBhZnRlciB0aGUgYmF0dGxlLCB0aGVyZSB3YXMgbm90IGEgbWFuIG9mIHRoZW0sIHRoZXkgc2F5LCB0byB3aG9tIHRoZSB3b3JkcyBvZiBNYXJjZWxsdXMgZGlkIG5vdCBnaXZlIG1vcmUgcGFpbiB0aGFuIGhpcyB3b3VuZHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4xMiIgdmFsaWQ9InllcyI+TGl2eSwgeHh2aWkuIDEyIGFuZCAxMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4xMiIgdmFsaWQ9InllcyI+TGl2eSwgeHh2aWkuIDEyIGFuZCAxMy48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IGRheWJyZWFrIHRoZSBzY2FybGV0IHR1bmljLCB0aGUgdXN1YWwgc2lnbmFsIG9mIGltcGVuZGluZyBiYXR0bGUsIHdhcyBkaXNwbGF5ZWQsIHRoZSBjb2hvcnRzIHVuZGVyIGRpc2dyYWNlIGJlZ2dlZCBhbmQgb2J0YWluZWQgZm9yIHRoZW1zZWx2ZXMgdGhlIGZvcmVtb3N0IHBvc2l0aW9uIGluIHRoZSBsaW5lLCBhbmQgdGhlIHRyaWJ1bmVzIGxlZCBmb3J0aCB0aGUgcmVzdCBvZiB0aGUgYXJteSBhbmQgcHV0IHRoZW0gaW4gYXJyYXkuICBPbiBoZWFyaW5nIG9mIHRoaXMgSGFubmliYWwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIEhlcmN1bGVzISB3aGF0IGNhbiBiZSBkb25lIHdpdGggYSBtYW4gd2hvIGtub3dzIG5vdCBob3cgdG8gYmVhciBlaXRoZXIgaGlzIHdvcnNlIG9yIGhpcyBiZXR0ZXIgZm9ydHVuZT8gICBGb3IgaGUgaXMgdGhlIG9ubHkgbWFuIHdobyBuZWl0aGVyIGdpdmVzIGEgcmVzcGl0ZSB3aGVuIGhlIGlzIHZpY3RvcmlvdXMsIG5vciB0YWtlcyBpdCB3aGVuIGhlIGlzIHZhbnF1aXNoZWQsIAoJCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgd2Ugc2hhbGwgYWx3YXlzIGJlIGZpZ2h0aW5nIHdpdGggaGltLCBhcyBpdCBzZWVtcywgc2luY2UgYm90aCBoaXMgY291cmFnZSBpbiBzdWNjZXNzIGFuZCBoaXMgc2hhbWUgaW4gZGVmZWF0IGFyZSBtYWRlIHJlYXNvbnMgZm9yIGJvbGQgdW5kZXJ0YWtpbmcuPC9xPiAgVGhlbiB0aGUgZm9yY2VzIGVuZ2FnZWQ7IGFuZCBzaW5jZSB0aGUgbWVuIGZvdWdodCB3aXRoIGVxdWFsIHN1Y2Nlc3MsIEhhbm5pYmFsIG9yZGVyZWQgaGlzIGVsZXBoYW50cyB0byBiZSBzdGF0aW9uZWQgaW4gdGhlIHZhbiwgYW5kIHRvIGJlIGRyaXZlbiBhZ2FpbnN0IHRoZSByYW5rcyBvZiB0aGUgUm9tYW5zLiAgICAgQSBncmVhdCBwcmVzcyBhbmQgbXVjaCBjb25mdXNpb24gYXQgb25jZSBhcm9zZSBhbW9uZyB0aGVpciBmb3JlbW9zdCBsaW5lcywgYnV0IG9uZSBvZiB0aGUgdHJpYnVuZXMsIEZsYXZpdXMgYnkgbmFtZSwgc25hdGNoZWQgICB1cCAgYSBzdGFuZGFyZCwgY29uZnJvbnRlZCAgICAgdGhlIGVsZXBoYW50cywgc21vdGUgdGhlIGxlYWRlciB3aXRoIHRoZSBpcm9uIHNwaWtlIG9mIHRoZSBzdGFuZGFyZCwgYW5kIG1hZGUgaGltIHdoZWVsIGFib3V0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYmVhc3QgZGFzaGVkIGludG8gdGhlIG9uZSBiZWhpbmQgaGltIGFuZCB0aHJldyB0aGUgd2hvbGUgb25zZXQgaW50byBjb25mdXNpb24uICBPYnNlcnZpbmcgdGhpcywgTWFyY2VsbHVzIG9yZGVyZWQgaGlzIGNhdmFscnkgdG8gY2hhcmdlIGF0IGZ1bGwgc3BlZWQgdXBvbiB0aGUgZGlzb3JkZXJlZCBtYXNzIGFuZCB0aHJvdyB0aGUgZW5lbXkgc3RpbGwgbW9yZSBpbnRvIGNvbmZ1c2lvbi4gIFRoZSBob3JzZW1lbiBtYWRlIGEgYnJpbGxpYW50IGNoYXJnZSBhbmQgY3V0IHRoZSBDYXJ0aGFnaW5pYW5zIGRvd24gYXMgZmFyIGFzIHRvIHRoZWlyIGNhbXAsIGFuZCB0aGUgZ3JlYXRlc3Qgc2xhdWdodGVyIGFtb25nIHRoZW0gd2FzIGNhdXNlZCBieSB0aGVpciBraWxsZWQgYW5kIHdvdW5kZWQgZWxlcGhhbnRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZpdmUgd2VyZSBraWxsZWQsIGFjY29yZGluZyB0byA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4xNCIgdmFsaWQ9InllcyI+TGl2eSwgeHh2aWkuIDE0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBtb3JlIHRoYW4gZWlnaHQgdGhvdXNhbmQgYXJlIHNhaWQgdG8gaGF2ZSBiZWVuIHNsYWluOyBhbmQgb24gdGhlIFJvbWFuIHNpZGUgdGhyZWUgdGhvdXNhbmQgd2VyZSBraWxsZWQsIGFuZCBhbG1vc3QgYWxsIHdlcmUgd291bmRlZC4gICBUaGlzIGdhdmUgSGFubmliYWwgb3Bwb3J0dW5pdHkgdG8gYnJlYWsgY2FtcCBxdWlldGx5IGluIHRoZSBuaWdodCBhbmQgbW92ZSB0byBhIGdyZWF0IGRpc3RhbmNlIGZyb20gTWFyY2VsbHVzLiBGb3IgTWFyY2VsbHVzIHdhcyB1bmFibGUgdG8gcHVyc3VlIGhpbSwgb3dpbmcgdG8gdGhlIG11bHRpdHVkZSBvZiBoaXMgd291bmRlZCwgYnV0IHdpdGhkcmV3IGJ5IGVhc3kgbWFyY2hlcyBpbnRvIENhbXBhbmlhLCBhbmQgc3BlbnQgdGhlIHN1bW1lciBhdCBTaW51ZXNzYSByZWN1cGVyYXRpbmcgaGlzIHNvbGRpZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZGF5YnJlYWsgdGhlIHNjYXJsZXQgdHVuaWMsIHRoZSB1c3VhbCBzaWduYWwgb2YgaW1wZW5kaW5nIGJhdHRsZSwgd2FzIGRpc3BsYXllZCwgdGhlIGNvaG9ydHMgdW5kZXIgZGlzZ3JhY2UgYmVnZ2VkIGFuZCBvYnRhaW5lZCBmb3IgdGhlbXNlbHZlcyB0aGUgZm9yZW1vc3QgcG9zaXRpb24gaW4gdGhlIGxpbmUsIGFuZCB0aGUgdHJpYnVuZXMgbGVkIGZvcnRoIHRoZSByZXN0IG9mIHRoZSBhcm15IGFuZCBwdXQgdGhlbSBpbiBhcnJheS4gIE9uIGhlYXJpbmcgb2YgdGhpcyBIYW5uaWJhbCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBIZXJjdWxlcyEgd2hhdCBjYW4gYmUgZG9uZSB3aXRoIGEgbWFuIHdobyBrbm93cyBub3QgaG93IHRvIGJlYXIgZWl0aGVyIGhpcyB3b3JzZSBvciBoaXMgYmV0dGVyIGZvcnR1bmU/ICAgRm9yIGhlIGlzIHRoZSBvbmx5IG1hbiB3aG8gbmVpdGhlciBnaXZlcyBhIHJlc3BpdGUgd2hlbiBoZSBpcyB2aWN0b3Jpb3VzLCBub3IgdGFrZXMgaXQgd2hlbiBoZSBpcyB2YW5xdWlzaGVkLCAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgd2Ugc2hhbGwgYWx3YXlzIGJlIGZpZ2h0aW5nIHdpdGggaGltLCBhcyBpdCBzZWVtcywgc2luY2UgYm90aCBoaXMgY291cmFnZSBpbiBzdWNjZXNzIGFuZCBoaXMgc2hhbWUgaW4gZGVmZWF0IGFyZSBtYWRlIHJlYXNvbnMgZm9yIGJvbGQgdW5kZXJ0YWtpbmcuPC9xPiAgVGhlbiB0aGUgZm9yY2VzIGVuZ2FnZWQ7IGFuZCBzaW5jZSB0aGUgbWVuIGZvdWdodCB3aXRoIGVxdWFsIHN1Y2Nlc3MsIEhhbm5pYmFsIG9yZGVyZWQgaGlzIGVsZXBoYW50cyB0byBiZSBzdGF0aW9uZWQgaW4gdGhlIHZhbiwgYW5kIHRvIGJlIGRyaXZlbiBhZ2FpbnN0IHRoZSByYW5rcyBvZiB0aGUgUm9tYW5zLiAgICAgQSBncmVhdCBwcmVzcyBhbmQgbXVjaCBjb25mdXNpb24gYXQgb25jZSBhcm9zZSBhbW9uZyB0aGVpciBmb3JlbW9zdCBsaW5lcywgYnV0IG9uZSBvZiB0aGUgdHJpYnVuZXMsIEZsYXZpdXMgYnkgbmFtZSwgc25hdGNoZWQgICB1cCAgYSBzdGFuZGFyZCwgY29uZnJvbnRlZCAgICAgdGhlIGVsZXBoYW50cywgc21vdGUgdGhlIGxlYWRlciB3aXRoIHRoZSBpcm9uIHNwaWtlIG9mIHRoZSBzdGFuZGFyZCwgYW5kIG1hZGUgaGltIHdoZWVsIGFib3V0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3ZSBzaGFsbCBhbHdheXMgYmUgZmlnaHRpbmcgd2l0aCBoaW0sIGFzIGl0IHNlZW1zLCBzaW5jZSBib3RoIGhpcyBjb3VyYWdlIGluIHN1Y2Nlc3MgYW5kIGhpcyBzaGFtZSBpbiBkZWZlYXQgYXJlIG1hZGUgcmVhc29ucyBmb3IgYm9sZCB1bmRlcnRha2luZy48L3RyYW5zbGF0aW9uPg=="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBiZWFzdCBkYXNoZWQgaW50byB0aGUgb25lIGJlaGluZCBoaW0gYW5kIHRocmV3IHRoZSB3aG9sZSBvbnNldCBpbnRvIGNvbmZ1c2lvbi4gIE9ic2VydmluZyB0aGlzLCBNYXJjZWxsdXMgb3JkZXJlZCBoaXMgY2F2YWxyeSB0byBjaGFyZ2UgYXQgZnVsbCBzcGVlZCB1cG9uIHRoZSBkaXNvcmRlcmVkIG1hc3MgYW5kIHRocm93IHRoZSBlbmVteSBzdGlsbCBtb3JlIGludG8gY29uZnVzaW9uLiAgVGhlIGhvcnNlbWVuIG1hZGUgYSBicmlsbGlhbnQgY2hhcmdlIGFuZCBjdXQgdGhlIENhcnRoYWdpbmlhbnMgZG93biBhcyBmYXIgYXMgdG8gdGhlaXIgY2FtcCwgYW5kIHRoZSBncmVhdGVzdCBzbGF1Z2h0ZXIgYW1vbmcgdGhlbSB3YXMgY2F1c2VkIGJ5IHRoZWlyIGtpbGxlZCBhbmQgd291bmRlZCBlbGVwaGFudHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GaXZlIHdlcmUga2lsbGVkLCBhY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4xNCIgdmFsaWQ9InllcyI+TGl2eSwgeHh2aWkuIDE0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4xNCIgdmFsaWQ9InllcyI+TGl2eSwgeHh2aWkuIDE0LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBtb3JlIHRoYW4gZWlnaHQgdGhvdXNhbmQgYXJlIHNhaWQgdG8gaGF2ZSBiZWVuIHNsYWluOyBhbmQgb24gdGhlIFJvbWFuIHNpZGUgdGhyZWUgdGhvdXNhbmQgd2VyZSBraWxsZWQsIGFuZCBhbG1vc3QgYWxsIHdlcmUgd291bmRlZC4gICBUaGlzIGdhdmUgSGFubmliYWwgb3Bwb3J0dW5pdHkgdG8gYnJlYWsgY2FtcCBxdWlldGx5IGluIHRoZSBuaWdodCBhbmQgbW92ZSB0byBhIGdyZWF0IGRpc3RhbmNlIGZyb20gTWFyY2VsbHVzLiBGb3IgTWFyY2VsbHVzIHdhcyB1bmFibGUgdG8gcHVyc3VlIGhpbSwgb3dpbmcgdG8gdGhlIG11bHRpdHVkZSBvZiBoaXMgd291bmRlZCwgYnV0IHdpdGhkcmV3IGJ5IGVhc3kgbWFyY2hlcyBpbnRvIENhbXBhbmlhLCBhbmQgc3BlbnQgdGhlIHN1bW1lciBhdCBTaW51ZXNzYSByZWN1cGVyYXRpbmcgaGlzIHNvbGRpZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSGFubmliYWwsIG5vdyB0aGF0IGhlIGhhZCB0b3JuIGhpbXNlbGYgYXdheSBmcm9tIE1hcmNlbGx1cywgbWFkZSBmcmVlIHVzZSBvZiBoaXMgYXJteSwgYW5kIGdvaW5nIGZlYXJsZXNzbHkgcm91bmQgYWJvdXQsIHdhc3RlZCBhbGwgSXRhbHkgd2l0aCBmaXJlLiAgTWVhbnRpbWUsIGF0IFJvbWUsIE1hcmNlbGx1cyB3YXMgaW4gaWxsIHJlcHV0ZSwgYW5kIGhpcyBlbmVtaWVzIGluY2l0ZWQgUHVibGljaXVzIEJpYnVsdXMsIG9uZSBvZiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSwgYSBwb3dlcmZ1bCBzcGVha2VyIGFuZCBhIG1hbiBvZiB2aW9sZW5jZSwgdG8gYnJpbmcgYSBkZW51bmNpYXRpb24gYWdhaW5zdCBoaW0uICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1hbiBoZWxkIGZyZXF1ZW50IGFzc2VtYmxpZXMgb2YgdGhlIHBlb3BsZSBhbmQgdHJpZWQgdG8gcGVyc3VhZGUgdGhlbSB0byBwdXQgdGhlIGZvcmNlcyBvZiBNYXJjZWxsdXMgaW4gY2hhcmdlIG9mIGFub3RoZXIgZ2VuZXJhbCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zaW5jZSBNYXJjZWxsdXMsPC9xPiBhcyBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFmdGVyIGdpdmluZyBoaW1zZWxmIGEgbGl0dGxlIGV4ZXJjaXNlIGluIHRoZSB3YXIsIGhhcyB3aXRoZHJhd24gZnJvbSBpdCBhcyBmcm9tIGEgcGFsYWVzdHJhLCBhbmQgYmV0YWtlbiBoaW1zZWxmIHRvIHdhcm0gYmF0aHMgZm9yIHJlZnJlc2htZW50LjwvcT4gIE9uIGxlYXJuaW5nIG9mIHRoaXMsIE1hcmNlbGx1cyBsZWZ0IGhpcyBsZWdhdGVzIGluIGNoYXJnZSBvZiBoaXMgYXJteSwgd2hpbGUgaGUgaGltc2VsZiB3ZW50IHVwIHRvIFJvbWUgdG8gbWFrZSBhbnN3ZXIgdG8gdGhlIGFjY3VzYXRpb25zIGFnYWluc3QgaGltLiAgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgaGUgZm91bmQgYW4gaW1wZWFjaG1lbnQgcHJlcGFyZWQgYWdhaW5zdCBoaW0gd2hpY2ggd2FzIGRyYXduIGZyb20gdGhlc2UgYWNjdXNhdGlvbnMuIEFjY29yZGluZ2x5LCBvbiBhIGRheSBzZXQgZm9yIHRoZSB0cmlhbCwgd2hlbiB0aGUgcGVvcGxlIGhhZCBjb21lIHRvZ2V0aGVyIGluIHRoZSBGbGFtaW5pYW4gY2lyY3VzLCBCaWJ1bHVzIHJvc2UgdXAgYW5kIGRlbm91bmNlZCBoaW0uICBUaGVuIE1hcmNlbGx1cyBzcG9rZSBicmllZmx5IGFuZCBzaW1wbHkgaW4gaGlzIG93biBkZWZlbmNlLCBhbmQgdGhlIGxlYWRpbmcgYW5kIG1vc3QgcmVwdXRhYmxlIGNpdGl6ZW5zLCB3aXRoIGdyZWF0IGJvbGRuZXNzIG9mIHNwZWVjaCBhbmQgaW4gZ2xvd2luZyB0ZXJtcywgZXhob3J0ZWQgdGhlIHBlb3BsZSBub3QgdG8gc2hvdyB0aGVtc2VsdmVzIHdvcnNlIGp1ZGdlcyB0aGFuIHRoZSBlbmVteSBieSBjb252aWN0aW5nIE1hcmNlbGx1cyBvZiBjb3dhcmRpY2UsIHdob20gYWxvbmUgb2YgdGhlaXIgbGVhZGVycyBIYW5uaWJhbCBhdm9pZGVkLCBhbmQgY29udGludWFsbHkgY29udHJpdmVkIG5vdCB0byBmaWdodCB3aXRoIGhpbSwgdGhhdCBoZSBtaWdodCBmaWdodCB3aXRoIHRoZSByZXN0LiAgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGVzZSBzcGVlY2hlcyB3ZXJlIGVuZGVkLCB0aGUgYWNjdXNlciB3YXMgc28gZmFyIGRpc2FwcG9pbnRlZCBpbiBoaXMgaG9wZSBvZiBvYnRhaW5pbmcgdGhlIHZlcmRpY3QgdGhhdCBNYXJjZWxsdXMgd2FzIG5vdCBvbmx5IGFjcXVpdHRlZCBvZiB0aGUgY2hhcmdlcyBhZ2FpbnN0IGhpbSwgYnV0IGFjdHVhbGx5IGFwcG9pbnRlZCBjb25zdWwgZm9yIHRoZSBmaWZ0aCB0aW1lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciAyMDggQi5DLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjcuMjAiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4dmlpLiAyMC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEhhbm5pYmFsLCBub3cgdGhhdCBoZSBoYWQgdG9ybiBoaW1zZWxmIGF3YXkgZnJvbSBNYXJjZWxsdXMsIG1hZGUgZnJlZSB1c2Ugb2YgaGlzIGFybXksIGFuZCBnb2luZyBmZWFybGVzc2x5IHJvdW5kIGFib3V0LCB3YXN0ZWQgYWxsIEl0YWx5IHdpdGggZmlyZS4gIE1lYW50aW1lLCBhdCBSb21lLCBNYXJjZWxsdXMgd2FzIGluIGlsbCByZXB1dGUsIGFuZCBoaXMgZW5lbWllcyBpbmNpdGVkIFB1YmxpY2l1cyBCaWJ1bHVzLCBvbmUgb2YgdGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUsIGEgcG93ZXJmdWwgc3BlYWtlciBhbmQgYSBtYW4gb2YgdmlvbGVuY2UsIHRvIGJyaW5nIGEgZGVudW5jaWF0aW9uIGFnYWluc3QgaGltLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuIGhlbGQgZnJlcXVlbnQgYXNzZW1ibGllcyBvZiB0aGUgcGVvcGxlIGFuZCB0cmllZCB0byBwZXJzdWFkZSB0aGVtIHRvIHB1dCB0aGUgZm9yY2VzIG9mIE1hcmNlbGx1cyBpbiBjaGFyZ2Ugb2YgYW5vdGhlciBnZW5lcmFsLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c2luY2UgTWFyY2VsbHVzLDwvcT4gYXMgaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFmdGVyIGdpdmluZyBoaW1zZWxmIGEgbGl0dGxlIGV4ZXJjaXNlIGluIHRoZSB3YXIsIGhhcyB3aXRoZHJhd24gZnJvbSBpdCBhcyBmcm9tIGEgcGFsYWVzdHJhLCBhbmQgYmV0YWtlbiBoaW1zZWxmIHRvIHdhcm0gYmF0aHMgZm9yIHJlZnJlc2htZW50LjwvcT4gIE9uIGxlYXJuaW5nIG9mIHRoaXMsIE1hcmNlbGx1cyBsZWZ0IGhpcyBsZWdhdGVzIGluIGNoYXJnZSBvZiBoaXMgYXJteSwgd2hpbGUgaGUgaGltc2VsZiB3ZW50IHVwIHRvIFJvbWUgdG8gbWFrZSBhbnN3ZXIgdG8gdGhlIGFjY3VzYXRpb25zIGFnYWluc3QgaGltLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGhlIGZvdW5kIGFuIGltcGVhY2htZW50IHByZXBhcmVkIGFnYWluc3QgaGltIHdoaWNoIHdhcyBkcmF3biBmcm9tIHRoZXNlIGFjY3VzYXRpb25zLiBBY2NvcmRpbmdseSwgb24gYSBkYXkgc2V0IGZvciB0aGUgdHJpYWwsIHdoZW4gdGhlIHBlb3BsZSBoYWQgY29tZSB0b2dldGhlciBpbiB0aGUgRmxhbWluaWFuIGNpcmN1cywgQmlidWx1cyByb3NlIHVwIGFuZCBkZW5vdW5jZWQgaGltLiAgVGhlbiBNYXJjZWxsdXMgc3Bva2UgYnJpZWZseSBhbmQgc2ltcGx5IGluIGhpcyBvd24gZGVmZW5jZSwgYW5kIHRoZSBsZWFkaW5nIGFuZCBtb3N0IHJlcHV0YWJsZSBjaXRpemVucywgd2l0aCBncmVhdCBib2xkbmVzcyBvZiBzcGVlY2ggYW5kIGluIGdsb3dpbmcgdGVybXMsIGV4aG9ydGVkIHRoZSBwZW9wbGUgbm90IHRvIHNob3cgdGhlbXNlbHZlcyB3b3JzZSBqdWRnZXMgdGhhbiB0aGUgZW5lbXkgYnkgY29udmljdGluZyBNYXJjZWxsdXMgb2YgY293YXJkaWNlLCB3aG9tIGFsb25lIG9mIHRoZWlyIGxlYWRlcnMgSGFubmliYWwgYXZvaWRlZCwgYW5kIGNvbnRpbnVhbGx5IGNvbnRyaXZlZCBub3QgdG8gZmlnaHQgd2l0aCBoaW0sIHRoYXQgaGUgbWlnaHQgZmlnaHQgd2l0aCB0aGUgcmVzdC4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlc2Ugc3BlZWNoZXMgd2VyZSBlbmRlZCwgdGhlIGFjY3VzZXIgd2FzIHNvIGZhciBkaXNhcHBvaW50ZWQgaW4gaGlzIGhvcGUgb2Ygb2J0YWluaW5nIHRoZSB2ZXJkaWN0IHRoYXQgTWFyY2VsbHVzIHdhcyBub3Qgb25seSBhY3F1aXR0ZWQgb2YgdGhlIGNoYXJnZXMgYWdhaW5zdCBoaW0sIGJ1dCBhY3R1YWxseSBhcHBvaW50ZWQgY29uc3VsIGZvciB0aGUgZmlmdGggdGltZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciAyMDggQi5DLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4yMCIgdmFsaWQ9InllcyI+TGl2eSwgeHh2aWkuIDIwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjIwIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHZpaS4gMjAuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBhc3N1bWluZyBoaXMgb2ZmaWNlLCBoZSBmaXJzdCBxdWVsbGVkIGEgZ3JlYXQgYWdpdGF0aW9uIGZvciByZXZvbHQgaW4gRXRydXJpYSwgYW5kIHZpc2l0ZWQgYW5kIHBhY2lmaWVkIHRoZSBjaXRpZXMgdGhlcmU7IG5leHQsIGhlIGRlc2lyZWQgdG8gZGVkaWNhdGUgdG8gSG9ub3VyIGFuZCBWaXJ0dWUgYSB0ZW1wbGUgdGhhdCBoZSBoYWQgYnVpbHQgb3V0IG9mIGhpcyBTaWNpbGlhbiBzcG9pbHMsIGh1dCB3YXMgcHJldmVudGVkIGJ5IHRoZSBwcmllc3RzLCB3aG8gd291bGQgbm90IGNvbnNlbnQgdGhhdCB0d28gZGVpdGllcyBzaG91bGQgb2NjdXB5IG9uZSB0ZW1wbGU7IGhlIHRoZXJlZm9yZSBiZWdhbiB0byBidWlsZCBhbm90aGVyIHRlbXBsZSBhZGpvaW5pbmcgdGhlIGZpcnN0LCBhbHRob3VnaCBoZSByZXNlbnRlZCB0aGUgcHJpZXN0cycgb3Bwb3NpdGlvbiBhbmQgcmVnYXJkZWQgaXQgYXMgb21pbm91cy4gIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgbWFueSBvdGhlciBwb3J0ZW50cyBkaXN0dXJiZWQgaGltOiBzdW5kcnkgdGVtcGxlcyB3ZXJlIHN0cnVjayBieSBsaWdodG5pbmcsIGFuZCBpbiB0aGF0IG9mIEp1cGl0ZXIsIG1pY2UgaGFkIGduYXdlZCB0aGUgZ29sZDsgaXQgd2FzIHJlcG9ydGVkIGFsc28gdGhhdCBhbiBveCBoYWQgdXR0ZXJlZCBodW1hbiBzcGVlY2gsIGFuZCB0aGF0IGEgYm95IGhhZCBiZWVuIGJvcm4gd2l0aCBhbiBlbGVwaGFudCdzIGhlYWQ7IG1vcmVvdmVyLCBpbiB0aGVpciBleHBpYXRvcnkgcml0ZXMgYW5kIHNhY3JpZmljZXMsIHRoZSBzZWVycyByZWNlaXZlZCBiYWQgb21lbnMsIGFuZCB0aGVyZWZvcmUgZGV0YWluZWQgaGltIGF0IFJvbWUsIHRob3VnaCBoZSB3YXMgYWxsIG9uIGZpcmUgYW5kIGltcGF0aWVudCB0byBiZSBnb25lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4xMSIgdmFsaWQ9InllcyI+TGl2eSwgeHh2aWkuIDExOzwvYmlibD4gCiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjI1IiB2YWxpZD0ieWVzIj4yNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gICBGb3Igbm8gbWFuIGV2ZXIgaGFkIHN1Y2ggYSBwYXNzaW9uIGZvciBhbnkgdGhpbmcgYXMgaGUgaGFkIGZvciBmaWdodGluZyBhIGRlY2lzaXZlIGJhdHRsZSB3aXRoIEhhbm5pYmFsLiAgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgaGlzIGRyZWFtIGF0IG5pZ2h0LCBoaXMgb25lIHN1YmplY3QgZm9yIGRlbGliZXJhdGlvbiB3aXRoIGZyaWVuZHMgYW5kIGNvbGxlYWd1ZXMsIGhpcyBvbmUgYXBwZWFsIHRvIHRoZSBnb2RzLCBuYW1lbHksIHRoYXQgaGUgbWlnaHQgZmluZCBIYW5uaWJhbCBkcmF3biB1cCB0byBtZWV0IGhpbS4gIEFuZCBJIHRoaW5rIGhlIHdvdWxkIGhhdmUgYmVlbiBtb3N0IHBsZWFzZWQgdG8gaGF2ZSB0aGUgc3RydWdnbGUgZGVjaWRlZCB3aXRoIGJvdGggYXJtaWVzIGVuY2xvc2VkIGJ5IGEgc2luZ2xlIHdhbGwgb3IgcmFtcGFydDsgYW5kIGlmIGhlIGhhZCBub3QgYmVlbiBmdWxsIGFscmVhZHkgb2YgYWJ1bmRhbnQgaG9ub3VyLCBhbmQgaWYgaGUgaGFkIG5vdCBnaXZlbiBhYnVuZGFudCBwcm9vZiB0aGF0IGhlIGNvdWxkIGJlIGNvbXBhcmVkIHdpdGggYW55IGdlbmVyYWwgd2hvbXNvZXZlciBpbiBzb2xpZGl0eSBvZiBqdWRnZW1lbnQsIEkgc2hvdWxkIGhhdmUgc2FpZCB0aGF0IGhlIGhhZCBmYWxsZW4gYSB2aWN0aW0gdG8gYSB5b3V0aGZ1bCBhbWJpdGlvbiB0aGF0IGlsbCBiZWNhbWUgc3VjaCBhIGdyZWF0IGFnZSBhcyBoaXMuICBGb3IgaGUgaGFkIHBhc3NlZCBoaXMgc2l4dGlldGggeWVhciB3aGVuIGhlIGVudGVyZWQgdXBvbiBoaXMgZmlmdGggY29uc3Vsc2hpcC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMDggQi5DLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgYXNzdW1pbmcgaGlzIG9mZmljZSwgaGUgZmlyc3QgcXVlbGxlZCBhIGdyZWF0IGFnaXRhdGlvbiBmb3IgcmV2b2x0IGluIEV0cnVyaWEsIGFuZCB2aXNpdGVkIGFuZCBwYWNpZmllZCB0aGUgY2l0aWVzIHRoZXJlOyBuZXh0LCBoZSBkZXNpcmVkIHRvIGRlZGljYXRlIHRvIEhvbm91ciBhbmQgVmlydHVlIGEgdGVtcGxlIHRoYXQgaGUgaGFkIGJ1aWx0IG91dCBvZiBoaXMgU2ljaWxpYW4gc3BvaWxzLCBodXQgd2FzIHByZXZlbnRlZCBieSB0aGUgcHJpZXN0cywgd2hvIHdvdWxkIG5vdCBjb25zZW50IHRoYXQgdHdvIGRlaXRpZXMgc2hvdWxkIG9jY3VweSBvbmUgdGVtcGxlOyBoZSB0aGVyZWZvcmUgYmVnYW4gdG8gYnVpbGQgYW5vdGhlciB0ZW1wbGUgYWRqb2luaW5nIHRoZSBmaXJzdCwgYWx0aG91Z2ggaGUgcmVzZW50ZWQgdGhlIHByaWVzdHMnIG9wcG9zaXRpb24gYW5kIHJlZ2FyZGVkIGl0IGFzIG9taW5vdXMuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgbWFueSBvdGhlciBwb3J0ZW50cyBkaXN0dXJiZWQgaGltOiBzdW5kcnkgdGVtcGxlcyB3ZXJlIHN0cnVjayBieSBsaWdodG5pbmcsIGFuZCBpbiB0aGF0IG9mIEp1cGl0ZXIsIG1pY2UgaGFkIGduYXdlZCB0aGUgZ29sZDsgaXQgd2FzIHJlcG9ydGVkIGFsc28gdGhhdCBhbiBveCBoYWQgdXR0ZXJlZCBodW1hbiBzcGVlY2gsIGFuZCB0aGF0IGEgYm95IGhhZCBiZWVuIGJvcm4gd2l0aCBhbiBlbGVwaGFudCdzIGhlYWQ7IG1vcmVvdmVyLCBpbiB0aGVpciBleHBpYXRvcnkgcml0ZXMgYW5kIHNhY3JpZmljZXMsIHRoZSBzZWVycyByZWNlaXZlZCBiYWQgb21lbnMsIGFuZCB0aGVyZWZvcmUgZGV0YWluZWQgaGltIGF0IFJvbWUsIHRob3VnaCBoZSB3YXMgYWxsIG9uIGZpcmUgYW5kIGltcGF0aWVudCB0byBiZSBnb25lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjcuMTEiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4dmlpLiAxMTs8L2JpYmw+IAogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjI1IiB2YWxpZD0ieWVzIj4yNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gICBGb3Igbm8gbWFuIGV2ZXIgaGFkIHN1Y2ggYSBwYXNzaW9uIGZvciBhbnkgdGhpbmcgYXMgaGUgaGFkIGZvciBmaWdodGluZyBhIGRlY2lzaXZlIGJhdHRsZSB3aXRoIEhhbm5pYmFsLiAgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjExIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHZpaS4gMTE7PC9iaWJsPiAKICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4yNSIgdmFsaWQ9InllcyI+MjUuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGhpcyBkcmVhbSBhdCBuaWdodCwgaGlzIG9uZSBzdWJqZWN0IGZvciBkZWxpYmVyYXRpb24gd2l0aCBmcmllbmRzIGFuZCBjb2xsZWFndWVzLCBoaXMgb25lIGFwcGVhbCB0byB0aGUgZ29kcywgbmFtZWx5LCB0aGF0IGhlIG1pZ2h0IGZpbmQgSGFubmliYWwgZHJhd24gdXAgdG8gbWVldCBoaW0uICBBbmQgSSB0aGluayBoZSB3b3VsZCBoYXZlIGJlZW4gbW9zdCBwbGVhc2VkIHRvIGhhdmUgdGhlIHN0cnVnZ2xlIGRlY2lkZWQgd2l0aCBib3RoIGFybWllcyBlbmNsb3NlZCBieSBhIHNpbmdsZSB3YWxsIG9yIHJhbXBhcnQ7IGFuZCBpZiBoZSBoYWQgbm90IGJlZW4gZnVsbCBhbHJlYWR5IG9mIGFidW5kYW50IGhvbm91ciwgYW5kIGlmIGhlIGhhZCBub3QgZ2l2ZW4gYWJ1bmRhbnQgcHJvb2YgdGhhdCBoZSBjb3VsZCBiZSBjb21wYXJlZCB3aXRoIGFueSBnZW5lcmFsIHdob21zb2V2ZXIgaW4gc29saWRpdHkgb2YganVkZ2VtZW50LCBJIHNob3VsZCBoYXZlIHNhaWQgdGhhdCBoZSBoYWQgZmFsbGVuIGEgdmljdGltIHRvIGEgeW91dGhmdWwgYW1iaXRpb24gdGhhdCBpbGwgYmVjYW1lIHN1Y2ggYSBncmVhdCBhZ2UgYXMgaGlzLiAgRm9yIGhlIGhhZCBwYXNzZWQgaGlzIHNpeHRpZXRoIHllYXIgd2hlbiBoZSBlbnRlcmVkIHVwb24gaGlzIGZpZnRoIGNvbnN1bHNoaXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMDggQi5DLjwvbm90ZT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYWZ0ZXIgdGhlIGNlcmVtb25pZXMgb2Ygc2FjcmlmaWNlIGFuZCBwdXJpZmljYXRpb24gd2hpY2ggdGhlIHNlZXJzIHByZXNjcmliZWQgaGFkIGJlZW4gcGVyZm9ybWVkLCBoZSBzZXQgb3V0IHdpdGggaGlzIGNvbGxlYWd1ZSBmb3IgdGhlIHdhciwgYW5kIGdhdmUgbXVjaCBhbm5veWFuY2UgdG8gSGFubmliYWwgaW4gaGlzIGVuY2FtcG1lbnQgYmV0d2VlbiBCYW50aWEgYW5kIFZlbnVzaWEuICAgICBIYW5uaWJhbCB3b3VsZCBub3QgZ2l2ZSBiYXR0bGUsIGJ1dCBoYXZpbmcgYmVlbiBtYWRlIGF3YXJlIHRoYXQgdGhlIFJvbWFucyBoYWQgc2VudCBzb21lIHRyb29wcyBhZ2FpbnN0IExvY3JpIEVwaXplcGh5cmlpLCBoZSBzZXQgYW4gYW1idXNoIGZvciB0aGVtIGF0IHRoZSBsdWxsIG9mIFBldGVsaWEsIGFuZCBzbGV3IHR3ZW50eS1maXZlIGh1bmRyZWQgb2YgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBmaWxsZWQgTWFyY2VsbHVzIHdpdGggbWFkIGRlc2lyZSBmb3IgdGhlIGJhdHRsZSwgYW5kIGJyZWFraW5nIGNhbXAsIGhlIGJyb3VnaHQgaGlzIGZvcmNlcyBuZWFyZXIgdG8gdGhlIGVuZW15LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYWZ0ZXIgdGhlIGNlcmVtb25pZXMgb2Ygc2FjcmlmaWNlIGFuZCBwdXJpZmljYXRpb24gd2hpY2ggdGhlIHNlZXJzIHByZXNjcmliZWQgaGFkIGJlZW4gcGVyZm9ybWVkLCBoZSBzZXQgb3V0IHdpdGggaGlzIGNvbGxlYWd1ZSBmb3IgdGhlIHdhciwgYW5kIGdhdmUgbXVjaCBhbm5veWFuY2UgdG8gSGFubmliYWwgaW4gaGlzIGVuY2FtcG1lbnQgYmV0d2VlbiBCYW50aWEgYW5kIFZlbnVzaWEuICAgICBIYW5uaWJhbCB3b3VsZCBub3QgZ2l2ZSBiYXR0bGUsIGJ1dCBoYXZpbmcgYmVlbiBtYWRlIGF3YXJlIHRoYXQgdGhlIFJvbWFucyBoYWQgc2VudCBzb21lIHRyb29wcyBhZ2FpbnN0IExvY3JpIEVwaXplcGh5cmlpLCBoZSBzZXQgYW4gYW1idXNoIGZvciB0aGVtIGF0IHRoZSBsdWxsIG9mIFBldGVsaWEsIGFuZCBzbGV3IHR3ZW50eS1maXZlIGh1bmRyZWQgb2YgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZmlsbGVkIE1hcmNlbGx1cyB3aXRoIG1hZCBkZXNpcmUgZm9yIHRoZSBiYXR0bGUsIGFuZCBicmVha2luZyBjYW1wLCBoZSBicm91Z2h0IGhpcyBmb3JjZXMgbmVhcmVyIHRvIHRoZSBlbmVteS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CZXR3ZWVuIHRoZSBjYW1wcyB3YXMgYSBoaWxsIHdoaWNoIGNvdWxkIGJlIG1hZGUgdG9sZXJhYmx5IHNlY3VyZSwgYW5kIHdhcyBmdWxsIG9mIGFsbCBzb3J0cyBvZiB3b29keSBncm93dGg7IGl0IGhhZCBhbHNvIGxvb2tvdXQtcGxhY2VzIHRoYXQgc2xvcGVkIGluIGVpdGhlciBkaXJlY3Rpb24sIGFuZCBzdHJlYW1zIG9mIHdhdGVyIHNob3dlZCB0aGVtc2VsdmVzIHJ1bm5pbmcgZG93biBpdHMgc2lkZXMuIFRoZSBSb21hbnMgdGhlcmVmb3JlIHdvbmRlcmVkIHRoYXQgSGFubmliYWwsIHdobyBoYWQgY29tZSBmaXJzdCB0byBhIHBsYWNlIG9mIG5hdHVyYWwgYWR2YW50YWdlcywgaGFkIG5vdCBvY2N1cGllZCBpdCwgYnV0IGxlZnQgaXQgaW4gdGhpcyB3YXkgZm9yIGhpcyBlbmVtaWVzLiAgCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRvIEhhbm5pYmFsIHRoZSBwbGFjZSBkaWQgc2VlbSBnb29kIGZvciBhbiBlbmNhbXBtZW50LCBidXQgZmFyIGJldHRlciBmb3IgYW4gYW1idXNjYWRlLCBhbmQgdG8gdGhpcyB1c2UgaGUgcHJlZmVycmVkIHRvIHB1dCBpdC4gICBIZSB0aGVyZWZvcmUgZmlsbGVkIGl0cyB3b29kcyBhbmQgaG9sbG93cyB3aXRoIGEgbGFyZ2UgZm9yY2Ugb2YgamF2ZWxpbmVlcnMgYW5kIHNwZWFybWVuLCBjb252aW5jZWQgdGhhdCB0aGUgcGxhY2Ugb2YgaXRzZWxmIHdvdWxkIGF0dHJhY3QgdGhlIFJvbWFucyBieSByZWFzb24gb2YgaXRzIG5hdHVyYWwgYWR2YW50YWdlcy4gICAgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm9yIHdhcyBoZSBkZWNlaXZlZCBpbiBoaXMgZXhwZWN0YXRpb25zOyBmb3Igc3RyYWlnaHR3YXkgdGhlcmUgd2FzIG11Y2ggdGFsayBpbiB0aGUgUm9tYW4gY2FtcCBhYm91dCB0aGUgbmVjZXNzaXR5IG9mIG9jY3VweWluZyB0aGUgcGxhY2UsIGFuZCB0aGV5IGVudW1lcmF0ZWQgYWxsIHRoZSBzdHJhdGVnaWMgYWR2YW50YWdlcyB3aGljaCB0aGV5IHdvdWxkIGdhaW4gb3ZlciB0aGVpciBlbmVtaWVzLCBwYXJ0aWN1bGFybHkgYnkgZW5jYW1waW5nIHRoZXJlLiwgYnV0IGlmIG5vdCB0aGF0LCBieSBmb3J0aWZ5aW5nIHRoZSBoaWxsLiAgTWFyY2VsbHVzIGFjY29yZGluZ2x5IGRlY2lkZWQgdG8gcmlkZSB1cCB0byBpdCB3aXRoIGEgZmV3IGhvcnNlbWVuIGFuZCBpbnNwZWN0IGl0LiBTbyBoZSBzdW1tb25lZCBoaXMgZGl2aW5lciBhbmQgb2ZmZXJlZCBzYWNyaWZpY2UsIGFuZCB3aGVuIHRoZSBmaXJzdCB2aWN0aW0gaGFkIGJlZW4gc2xhaW4sIHRoZSBkaXZpbmVyIHNob3dlZCBoaW0gdGhhdCB0aGUgbGl2ZXIgaGFkIG5vIGhlYWQuICAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb24gaGlzIHNhY3JpZmljaW5nIGZvciB0aGUgc2Vjb25kIHRpbWUsIHRoZSBoZWFkIG9mIHRoZSBsaXZlciB3YXMgb2YgZXh0cmFvcmRpbmFyeSBzaXplIGFuZCB0aGUgb3RoZXIgdG9rZW5zIGFwcGVhcmVkIHRvIGJlIHdvbmRlcmZ1bGx5IHByb3BpdGlvdXMsIGFuZCB0aGUgZmVhciB3aGljaCB0aGUgZmlyc3QgaGFkIGluc3BpcmVkIHNlZW1lZCB0byBiZSBkaXNzaXBhdGVkLiBCdXQgdGhlIGRpdmluZXJzIGRlY2xhcmVkIHRoYXQgdGhleSB3ZXJlIGFsbCB0aGUgbW9yZSBhZnJhaWQgb2YgdGhlc2UgYW5kIHRyb3VibGVkIGJ5IHRoZW07IGZvciB3aGVuIHZlcnkgcHJvcGl0aW91cyBvbWVucyBzdWNjZWVkZWQgdGhvc2Ugd2hpY2ggd2VyZSBtb3N0IGluYXVzcGljaW91cyBhbmQgdGhyZWF0ZW5pbmcsIHRoZSBzdHJhbmdlbmVzcyBvZiB0aGUgY2hhbmdlIHdhcyBncm91bmQgZm9yIHN1c3BpY2lvbi4gIEJ1dCBzaW5jZSwgYXMgUGluZGFyIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgMjMyIChCZXJnaykuPC9ub3RlPgoJCQkJICAgICAgICA8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkFsbG90dGVkIGZhdGUgbm90IGZpcmUsIG5vdCB3YWxsIG9mIGlyb24sIHdpbGwgPC9sPgoJCQkJCSAgICAgICAgICA8bD5jaGVjayw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+IE1hcmNlbGx1cyBzZXQgb3V0LCB0YWtpbmcgd2l0aCBoaW0gaGlzIGNvbGxlYWd1ZSBDcmlzcGludXMsIGhpcyBzb24sIHdobyB3YXMgYSBtaWxpdGFyeSB0cmlidW5lLCBhbmQgdHdvIGh1bmRyZWQgYW5kIHR3ZW50eSBob3JzZW1lbiBhbGwgdG9sZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+T2YgdGhlc2UsIG5vdCBvbmUgd2FzIGEgUm9tYW4sIGJ1dCB0aGV5IHdlcmUgYWxsIEV0cnVzY2FucywgZXhjZXB0IGZvcnR5IG1lbiBvZiBGcmVnZWxsYWUsIHdobyBoYWQgZ2l2ZW4gTWFyY2VsbHVzIGNvbnN0YW50IHByb29mIG9mIHRoZWlyIHZhbG91ciBhbmQgZmlkZWxpdHkuICBOb3csIHRoZSBjcmVzdCBvZiB0aGUgaGlsbCB3YXMgY292ZXJlZCB3aXRoIHdvb2RzLCBhbmQgb24gaXRzIHN1bW1pdCBhIG1hbiBoYWQgYmVlbiBzdGF0aW9uZWQgYnkgdGhlIGVuZW15IHRvIGtlZXAgYSBsb29rb3V0OyBoZSBjb3VsZCBub3QgYmUgc2VlbiBoaW1zZWxmLCBidXQga2VwdCB0aGUgUm9tYW4gY2FtcCBpbiBmdWxsIHZpZXcuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuLCB0aGVuLCB0b2xkIHRob3NlIHdobyBsYXkgaW4gYW1idXNoIHdoYXQgd2FzIGdvaW5nIG9uLCBhbmQgdGhleSwgYWZ0ZXIgcGVybWl0dGluZyBNYXJjZWxsdXMgdG8gcmlkZSBjbG9zZSB1cCB0byB0aGVtLCByb3NlIHVwIG9uIGEgc3VkZGVuLCBhbmQgZW5jb21wYXNzaW5nIGhpbSBvbiBhbGwgc2lkZXMsIGh1cmxlZCB0aGVpciBqYXZlbGlucywgc21vdGUgd2l0aCB0aGVpciBzcGVhcnMsIHB1cnN1ZWQgdGhlIGZ1Z2l0aXZlcywgYW5kIGdyYXBwbGVkIHdpdGggdGhvc2Ugd2hvIG1hZGUgcmVzaXN0YW5jZS4gIFRoZXNlIHdlcmUgdGhlIGZvcnR5IG1lbiBvZiBGcmVnZWxsYWUsIAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPndobywgdGhvdWdoIHRoZSBFdHJ1c2NhbnMgYXQgdGhlIHZlcnkgb3V0c2V0IHRvb2sgdG8gZmxpZ2h0LCBiYW5kZWQgdGhlbXNlbHZlcyB0b2dldGhlciBhbmQgZm91Z2h0IGluIGRlZmVuY2Ugb2YgdGhlIGNvbnN1bHMsIHVudGlsIENyaXNwaW51cywgc21pdHRlbiB3aXRoIHR3byBqYXZlbGlucywgdHVybmVkIGhpcyBob3JzZSBhbmQgZmxlZCwgYW5kIE1hcmNlbGx1cyB3YXMgcnVuIHRocm91Z2ggdGhlIHNpZGUgd2l0aCBhIGJyb2FkIHNwZWFyICh0aGUgTGF0aW4gbmFtZSBmb3Igd2hpY2ggaXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5sYW5jZWE8L3E+KS4gIAoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIHN1cnZpdmluZyBtZW4gb2YgRnJlZ2VsbGFlLCBmZXcgYWxsIHRvbGQsIGxlZnQgaGltIHdoZXJlIGhlIGxheSBkZWFkLCBzbmF0Y2hlZCB1cCBoaXMgc29uIHdobyB3YXMgd291bmRlZCwgYW5kIGZsZWQgdG8gdGhlaXIgY2FtcC4gICBIYXJkbHkgbW9yZSB0aGFuIGZvcnR5IHdlcmUgc2xhaW4sIGJ1dCBmaXZlIGxpY3RvcnMgd2VyZSB0YWtlbiBwcmlzb25lcnMsIGFuZCBlaWdodGVlbiBob3JzZW1lbi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjcuMjYiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4dmlpLiAyNiBhbmQgMjcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+ICAgQ3Jpc3BpbnVzIGFsc28gZGllZCBvZiBoaXMgd291bmRzIG5vdCBtYW55IGRheXMgYWZ0ZXIuIFN1Y2ggYSBkaXNhc3RlciBhcyB0aGlzIGhhZCBuZXZlciBoYXBwZW5lZCB0byB0aGUgUm9tYW5zIGJlZm9yZTogYm90aCB0aGVpciBjb25zdWxzIHdlcmUga2lsbGVkIGluIGEgc2luZ2xlIGFjdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdG8gSGFubmliYWwgdGhlIHBsYWNlIGRpZCBzZWVtIGdvb2QgZm9yIGFuIGVuY2FtcG1lbnQsIGJ1dCBmYXIgYmV0dGVyIGZvciBhbiBhbWJ1c2NhZGUsIGFuZCB0byB0aGlzIHVzZSBoZSBwcmVmZXJyZWQgdG8gcHV0IGl0LiAgIEhlIHRoZXJlZm9yZSBmaWxsZWQgaXRzIHdvb2RzIGFuZCBob2xsb3dzIHdpdGggYSBsYXJnZSBmb3JjZSBvZiBqYXZlbGluZWVycyBhbmQgc3BlYXJtZW4sIGNvbnZpbmNlZCB0aGF0IHRoZSBwbGFjZSBvZiBpdHNlbGYgd291bGQgYXR0cmFjdCB0aGUgUm9tYW5zIGJ5IHJlYXNvbiBvZiBpdHMgbmF0dXJhbCBhZHZhbnRhZ2VzLiAgICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vciB3YXMgaGUgZGVjZWl2ZWQgaW4gaGlzIGV4cGVjdGF0aW9uczsgZm9yIHN0cmFpZ2h0d2F5IHRoZXJlIHdhcyBtdWNoIHRhbGsgaW4gdGhlIFJvbWFuIGNhbXAgYWJvdXQgdGhlIG5lY2Vzc2l0eSBvZiBvY2N1cHlpbmcgdGhlIHBsYWNlLCBhbmQgdGhleSBlbnVtZXJhdGVkIGFsbCB0aGUgc3RyYXRlZ2ljIGFkdmFudGFnZXMgd2hpY2ggdGhleSB3b3VsZCBnYWluIG92ZXIgdGhlaXIgZW5lbWllcywgcGFydGljdWxhcmx5IGJ5IGVuY2FtcGluZyB0aGVyZS4sIGJ1dCBpZiBub3QgdGhhdCwgYnkgZm9ydGlmeWluZyB0aGUgaGlsbC4gIE1hcmNlbGx1cyBhY2NvcmRpbmdseSBkZWNpZGVkIHRvIHJpZGUgdXAgdG8gaXQgd2l0aCBhIGZldyBob3JzZW1lbiBhbmQgaW5zcGVjdCBpdC4gU28gaGUgc3VtbW9uZWQgaGlzIGRpdmluZXIgYW5kIG9mZmVyZWQgc2FjcmlmaWNlLCBhbmQgd2hlbiB0aGUgZmlyc3QgdmljdGltIGhhZCBiZWVuIHNsYWluLCB0aGUgZGl2aW5lciBzaG93ZWQgaGltIHRoYXQgdGhlIGxpdmVyIGhhZCBubyBoZWFkLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvbiBoaXMgc2FjcmlmaWNpbmcgZm9yIHRoZSBzZWNvbmQgdGltZSwgdGhlIGhlYWQgb2YgdGhlIGxpdmVyIHdhcyBvZiBleHRyYW9yZGluYXJ5IHNpemUgYW5kIHRoZSBvdGhlciB0b2tlbnMgYXBwZWFyZWQgdG8gYmUgd29uZGVyZnVsbHkgcHJvcGl0aW91cywgYW5kIHRoZSBmZWFyIHdoaWNoIHRoZSBmaXJzdCBoYWQgaW5zcGlyZWQgc2VlbWVkIHRvIGJlIGRpc3NpcGF0ZWQuIEJ1dCB0aGUgZGl2aW5lcnMgZGVjbGFyZWQgdGhhdCB0aGV5IHdlcmUgYWxsIHRoZSBtb3JlIGFmcmFpZCBvZiB0aGVzZSBhbmQgdHJvdWJsZWQgYnkgdGhlbTsgZm9yIHdoZW4gdmVyeSBwcm9waXRpb3VzIG9tZW5zIHN1Y2NlZWRlZCB0aG9zZSB3aGljaCB3ZXJlIG1vc3QgaW5hdXNwaWNpb3VzIGFuZCB0aHJlYXRlbmluZywgdGhlIHN0cmFuZ2VuZXNzIG9mIHRoZSBjaGFuZ2Ugd2FzIGdyb3VuZCBmb3Igc3VzcGljaW9uLiAgQnV0IHNpbmNlLCBhcyBQaW5kYXIgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyYWdtZW50IDIzMiAoQmVyZ2spLjwvbm90ZT4KCQkJCSAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsb3R0ZWQgZmF0ZSBub3QgZmlyZSwgbm90IHdhbGwgb2YgaXJvbiwgd2lsbCA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Y2hlY2ssPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPiBNYXJjZWxsdXMgc2V0IG91dCwgdGFraW5nIHdpdGggaGltIGhpcyBjb2xsZWFndWUgQ3Jpc3BpbnVzLCBoaXMgc29uLCB3aG8gd2FzIGEgbWlsaXRhcnkgdHJpYnVuZSwgYW5kIHR3byBodW5kcmVkIGFuZCB0d2VudHkgaG9yc2VtZW4gYWxsIHRvbGQuIAoJCQkJPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGxvdHRlZCBmYXRlIG5vdCBmaXJlLCBub3Qgd2FsbCBvZiBpcm9uLCB3aWxsIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5jaGVjayw8L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZXNlLCBub3Qgb25lIHdhcyBhIFJvbWFuLCBidXQgdGhleSB3ZXJlIGFsbCBFdHJ1c2NhbnMsIGV4Y2VwdCBmb3J0eSBtZW4gb2YgRnJlZ2VsbGFlLCB3aG8gaGFkIGdpdmVuIE1hcmNlbGx1cyBjb25zdGFudCBwcm9vZiBvZiB0aGVpciB2YWxvdXIgYW5kIGZpZGVsaXR5LiAgTm93LCB0aGUgY3Jlc3Qgb2YgdGhlIGhpbGwgd2FzIGNvdmVyZWQgd2l0aCB3b29kcywgYW5kIG9uIGl0cyBzdW1taXQgYSBtYW4gaGFkIGJlZW4gc3RhdGlvbmVkIGJ5IHRoZSBlbmVteSB0byBrZWVwIGEgbG9va291dDsgaGUgY291bGQgbm90IGJlIHNlZW4gaGltc2VsZiwgYnV0IGtlcHQgdGhlIFJvbWFuIGNhbXAgaW4gZnVsbCB2aWV3LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuLCB0aGVuLCB0b2xkIHRob3NlIHdobyBsYXkgaW4gYW1idXNoIHdoYXQgd2FzIGdvaW5nIG9uLCBhbmQgdGhleSwgYWZ0ZXIgcGVybWl0dGluZyBNYXJjZWxsdXMgdG8gcmlkZSBjbG9zZSB1cCB0byB0aGVtLCByb3NlIHVwIG9uIGEgc3VkZGVuLCBhbmQgZW5jb21wYXNzaW5nIGhpbSBvbiBhbGwgc2lkZXMsIGh1cmxlZCB0aGVpciBqYXZlbGlucywgc21vdGUgd2l0aCB0aGVpciBzcGVhcnMsIHB1cnN1ZWQgdGhlIGZ1Z2l0aXZlcywgYW5kIGdyYXBwbGVkIHdpdGggdGhvc2Ugd2hvIG1hZGUgcmVzaXN0YW5jZS4gIFRoZXNlIHdlcmUgdGhlIGZvcnR5IG1lbiBvZiBGcmVnZWxsYWUsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPndobywgdGhvdWdoIHRoZSBFdHJ1c2NhbnMgYXQgdGhlIHZlcnkgb3V0c2V0IHRvb2sgdG8gZmxpZ2h0LCBiYW5kZWQgdGhlbXNlbHZlcyB0b2dldGhlciBhbmQgZm91Z2h0IGluIGRlZmVuY2Ugb2YgdGhlIGNvbnN1bHMsIHVudGlsIENyaXNwaW51cywgc21pdHRlbiB3aXRoIHR3byBqYXZlbGlucywgdHVybmVkIGhpcyBob3JzZSBhbmQgZmxlZCwgYW5kIE1hcmNlbGx1cyB3YXMgcnVuIHRocm91Z2ggdGhlIHNpZGUgd2l0aCBhIGJyb2FkIHNwZWFyICh0aGUgTGF0aW4gbmFtZSBmb3Igd2hpY2ggaXMgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmxhbmNlYTwvcT4pLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIHN1cnZpdmluZyBtZW4gb2YgRnJlZ2VsbGFlLCBmZXcgYWxsIHRvbGQsIGxlZnQgaGltIHdoZXJlIGhlIGxheSBkZWFkLCBzbmF0Y2hlZCB1cCBoaXMgc29uIHdobyB3YXMgd291bmRlZCwgYW5kIGZsZWQgdG8gdGhlaXIgY2FtcC4gICBIYXJkbHkgbW9yZSB0aGFuIGZvcnR5IHdlcmUgc2xhaW4sIGJ1dCBmaXZlIGxpY3RvcnMgd2VyZSB0YWtlbiBwcmlzb25lcnMsIGFuZCBlaWdodGVlbiBob3JzZW1lbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjI2IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHZpaS4gMjYgYW5kIDI3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAgIENyaXNwaW51cyBhbHNvIGRpZWQgb2YgaGlzIHdvdW5kcyBub3QgbWFueSBkYXlzIGFmdGVyLiBTdWNoIGEgZGlzYXN0ZXIgYXMgdGhpcyBoYWQgbmV2ZXIgaGFwcGVuZWQgdG8gdGhlIFJvbWFucyBiZWZvcmU6IGJvdGggdGhlaXIgY29uc3VscyB3ZXJlIGtpbGxlZCBpbiBhIHNpbmdsZSBhY3Rpb24uCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjcuMjYiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4dmlpLiAyNiBhbmQgMjcuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IYW5uaWJhbCBtYWRlIHZlcnkgbGl0dGxlIGFjY291bnQgb2YgdGhlIHJlc3QsIGJ1dCB3aGVuIGhlIGxlYXJuZWQgdGhhdCBNYXJjZWxsdXMgaGFkIGZhbGxlbiwgaGUgcmFuIG91dCB0byB0aGUgcGxhY2UgaGltc2VsZiwgYW5kIGFmdGVyIHN0YW5kaW5nIGJ5IHRoZSBkZWFkIGJvZHkgYW5kIHN1cnZleWluZyBmb3IgYSBsb25nIHRpbWUgaXRzIHN0cmVuZ3RoIGFuZCBtaWVuLCBoZSB1dHRlcmVkIG5vIGJvYXN0ZnVsIHNwZWVjaCwgbm9yIGRpZCBoZSBtYW5pZmVzdCBoaXMgam95IGF0IHRoZSBzaWdodCwgYXMgb25lIG1pZ2h0IGhhdmUgZG9uZSB3aG8gaGFkIHNsYWluIGEgYml0dGVyIGFuZCB0cm91Ymxlc29tZSBmb2U7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhZnRlciB3b25kZXJpbmcgYXQgdGhlIHVuZXhwZWN0ZWRuZXNzIG9mIGhpcyBlbmQsIGhlIHRvb2sgb2ZmIGhpcyBzaWduZXQtcmluZywgaW5kZWVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9mIHdoaWNoIGhlIGFmdGVyd2FyZHMgbWFkZSBmcmF1ZHVsZW50IHVzZSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjcuMjgiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4dmlpLiAyODwvYmlibD4pLjwvbm90ZT4gYnV0IG9yZGVyZWQgdGhlIGJvZHkgdG8gYmUgaG9ub3VyYWJseSByb2JlZCwgc3VpdGFibHkgYWRvcm5lZCwgYW5kIGJ1cm5lZC4gVGhlbiBoZSBjb2xsZWN0ZWQgdGhlIHJlbWFpbnMgaW4gYSBzaWx2ZXIgdXJuLCBwbGFjZWQgYSBnb2xkZW4gd3JlYXRoIHVwb24gaXQsIGFuZCBzZW50IGl0IGJhY2sgdG8gaGlzIHNvbi4gQnV0IHNvbWUgb2YgdGhlIE51bWlkaWFucyBmZWxsIGluIHdpdGggdGhvc2Ugd2hvIHdlcmUgY2FycnlpbmcgdGhlIHVybiBhbmQgYXR0ZW1wdGVkIHRvIHRha2UgaXQgYXdheSBmcm9tIHRoZW0sIGFuZCB3aGVuIHRoZXkgcmVzaXN0ZWQsIGZvdWdodCB3aXRoIHRoZW0sIGFuZCBpbiB0aGUgZmllcmNlIHN0cnVnZ2xlIHNjYXR0ZXJlZCB0aGUgYm9uZXMgZmFyIGFuZCB3aWRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEhhbm5pYmFsIGxlYXJuZWQgb2YgdGhpcywgaGUgc2FpZCB0byB0aGUgYnlzdGFuZGVyczogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3Ugc2VlIHRoYXQgbm90aGluZyBjYW4gYmUgZG9uZSBhZ2FpbnN0IHRoZSB3aWxsIG9mIEdvZC48L3E+IFRoZW4gaGUgcHVuaXNoZWQgdGhlIE51bWlkaWFucywgYnV0IHRvb2sgbm8gZnVydGhlciBjYXJlIHRvIGNvbGxlY3QgYW5kIHNlbmQgYmFjayB0aGUgcmVtYWlucywgZmVlbGluZyB0aGF0IGl0IHdhcyBhdCBzb21lIGRpdmluZSBiZWhlc3QgdGhhdCBNYXJjZWxsdXMgaGFkIGRpZWQgYW5kIGJlZW4gZGVwcml2ZWQgb2YgYnVyaWFsIGluIHRoaXMgc3RyYW5nZSBtYW5uZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2gsIHRoZW4sIGlzIHRoZSBhY2NvdW50IGdpdmVuIGJ5IENvcm5lbGl1cyBOZXBvcyBhbmQgVmFsZXJpdXMgTWF4aW11czsgIGJ1dCBMaXZ5PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjI4IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHZpaS4gMjg8L2JpYmw+LCBIYW5uaWJhbCBidXJpZWQgTWFyY2VsbHVzIG9uIHRoZSBoaWxsIHdoZXJlIGhlIHdhcyBraWxsZWQuIExpdnkgZm91bmQgbWFueSBkaXNjb3JkYW50IGFjY291bnRzIG9mIHRoZSBkZWF0aCBvZiBNYXJjZWxsdXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjI3IiB2YWxpZD0ieWVzIj54eHZpaS4gMjcgZmluLjwvYmlibD4pLjwvbm90ZT4gIGFuZCBBdWd1c3R1cyBDYWVzYXIgc3RhdGUgdGhhdCB0aGUgdXJuIHdhcyBicm91Z2h0IHRvIGhpcyBzb24gYW5kIGJ1cmllZCB3aXRoIHNwbGVuZGlkIHJpdGVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGFubmliYWwgbWFkZSB2ZXJ5IGxpdHRsZSBhY2NvdW50IG9mIHRoZSByZXN0LCBidXQgd2hlbiBoZSBsZWFybmVkIHRoYXQgTWFyY2VsbHVzIGhhZCBmYWxsZW4sIGhlIHJhbiBvdXQgdG8gdGhlIHBsYWNlIGhpbXNlbGYsIGFuZCBhZnRlciBzdGFuZGluZyBieSB0aGUgZGVhZCBib2R5IGFuZCBzdXJ2ZXlpbmcgZm9yIGEgbG9uZyB0aW1lIGl0cyBzdHJlbmd0aCBhbmQgbWllbiwgaGUgdXR0ZXJlZCBubyBib2FzdGZ1bCBzcGVlY2gsIG5vciBkaWQgaGUgbWFuaWZlc3QgaGlzIGpveSBhdCB0aGUgc2lnaHQsIGFzIG9uZSBtaWdodCBoYXZlIGRvbmUgd2hvIGhhZCBzbGFpbiBhIGJpdHRlciBhbmQgdHJvdWJsZXNvbWUgZm9lOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhZnRlciB3b25kZXJpbmcgYXQgdGhlIHVuZXhwZWN0ZWRuZXNzIG9mIGhpcyBlbmQsIGhlIHRvb2sgb2ZmIGhpcyBzaWduZXQtcmluZywgaW5kZWVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T2Ygd2hpY2ggaGUgYWZ0ZXJ3YXJkcyBtYWRlIGZyYXVkdWxlbnQgdXNlICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjI4IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHZpaS4gMjg8L2JpYmw+KS48L25vdGU+IGJ1dCBvcmRlcmVkIHRoZSBib2R5IHRvIGJlIGhvbm91cmFibHkgcm9iZWQsIHN1aXRhYmx5IGFkb3JuZWQsIGFuZCBidXJuZWQuIFRoZW4gaGUgY29sbGVjdGVkIHRoZSByZW1haW5zIGluIGEgc2lsdmVyIHVybiwgcGxhY2VkIGEgZ29sZGVuIHdyZWF0aCB1cG9uIGl0LCBhbmQgc2VudCBpdCBiYWNrIHRvIGhpcyBzb24uIEJ1dCBzb21lIG9mIHRoZSBOdW1pZGlhbnMgZmVsbCBpbiB3aXRoIHRob3NlIHdobyB3ZXJlIGNhcnJ5aW5nIHRoZSB1cm4gYW5kIGF0dGVtcHRlZCB0byB0YWtlIGl0IGF3YXkgZnJvbSB0aGVtLCBhbmQgd2hlbiB0aGV5IHJlc2lzdGVkLCBmb3VnaHQgd2l0aCB0aGVtLCBhbmQgaW4gdGhlIGZpZXJjZSBzdHJ1Z2dsZSBzY2F0dGVyZWQgdGhlIGJvbmVzIGZhciBhbmQgd2lkZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjI4IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHZpaS4gMjg8L2JpYmw+KS48L3RyYW5zbGF0aW9uPg=="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gSGFubmliYWwgbGVhcm5lZCBvZiB0aGlzLCBoZSBzYWlkIHRvIHRoZSBieXN0YW5kZXJzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91IHNlZSB0aGF0IG5vdGhpbmcgY2FuIGJlIGRvbmUgYWdhaW5zdCB0aGUgd2lsbCBvZiBHb2QuPC9xPiBUaGVuIGhlIHB1bmlzaGVkIHRoZSBOdW1pZGlhbnMsIGJ1dCB0b29rIG5vIGZ1cnRoZXIgY2FyZSB0byBjb2xsZWN0IGFuZCBzZW5kIGJhY2sgdGhlIHJlbWFpbnMsIGZlZWxpbmcgdGhhdCBpdCB3YXMgYXQgc29tZSBkaXZpbmUgYmVoZXN0IHRoYXQgTWFyY2VsbHVzIGhhZCBkaWVkIGFuZCBiZWVuIGRlcHJpdmVkIG9mIGJ1cmlhbCBpbiB0aGlzIHN0cmFuZ2UgbWFubmVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2gsIHRoZW4sIGlzIHRoZSBhY2NvdW50IGdpdmVuIGJ5IENvcm5lbGl1cyBOZXBvcyBhbmQgVmFsZXJpdXMgTWF4aW11czsgIGJ1dCBMaXZ5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4yOCIgdmFsaWQ9InllcyI+TGl2eSwgeHh2aWkuIDI4PC9iaWJsPiwgSGFubmliYWwgYnVyaWVkIE1hcmNlbGx1cyBvbiB0aGUgaGlsbCB3aGVyZSBoZSB3YXMga2lsbGVkLiBMaXZ5IGZvdW5kIG1hbnkgZGlzY29yZGFudCBhY2NvdW50cyBvZiB0aGUgZGVhdGggb2YgTWFyY2VsbHVzICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjI3IiB2YWxpZD0ieWVzIj54eHZpaS4gMjcgZmluLjwvYmlibD4pLjwvbm90ZT4gIGFuZCBBdWd1c3R1cyBDYWVzYXIgc3RhdGUgdGhhdCB0aGUgdXJuIHdhcyBicm91Z2h0IHRvIGhpcyBzb24gYW5kIGJ1cmllZCB3aXRoIHNwbGVuZGlkIHJpdGVzLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjI4IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHZpaS4gMjg8L2JpYmw+LCBIYW5uaWJhbCBidXJpZWQgTWFyY2VsbHVzIG9uIHRoZSBoaWxsIHdoZXJlIGhlIHdhcyBraWxsZWQuIExpdnkgZm91bmQgbWFueSBkaXNjb3JkYW50IGFjY291bnRzIG9mIHRoZSBkZWF0aCBvZiBNYXJjZWxsdXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjcuMjciIHZhbGlkPSJ5ZXMiPnh4dmlpLiAyNyBmaW4uPC9iaWJsPikuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CZXNpZGVzIHRoZSBkZWRpY2F0aW9ucyB3aGljaCBNYXJjZWxsdXMgbWFkZSBpbiBSb21lLCB0aGVyZSB3YXMgYSBneW1uYXNpdW0gYXQgQ2F0YW5hIGluIFNpY2lseSwgYW5kIHN0YXR1ZXMgYW5kIHBhaW50aW5ncyBmcm9tIHRoZSB0cmVhc3VyZXMgb2YgU3lyYWN1c2UgYm90aCBhdCBTYW1vdGhyYWNlLCBpbiB0aGUgdGVtcGxlIG9mIHRoZSBnb2RzIGNhbGxlZCBDYWJlaXJpLCBhbmQgYXQgTGluZHVzIGluIHRoZSB0ZW1wbGUgb2YgQXRoZW5hLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlLCB0b28sIHRoZXJlIHdhcyBhIHN0YXR1ZSBvZiBoaW0sIGFjY29yZGluZyB0byBQb3NlaWRvbml1cywgYmVhcmluZyB0aGlzIGluc2NyaXB0aW9uOgoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5UaGlzLCBPIHN0cmFuZ2VyLCB3YXMgdGhlIGdyZWF0IHN0YXIgb2YgaGlzIGNvdW50cnksIFJvbWUs4oCUQ2xhdWRpdXMgTWFyY2VsbHVzIG9mIGlsbHVzdHJpb3VzIGxpbmUsIHdobyBzZXZlbiB0aW1lcyBoZWxkIHRoZSBjb25zdWxhciBwb3dlciBpbiB0aW1lIG9mIHdhciwgYW5kIHBvdXJlZCBtdWNoIHNsYXVnaHRlciBvbiBoaXMgZm9lcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+IEZvciB0aGUgYXV0aG9yIG9mIHRoZSBpbnNjcmlwdGlvbiBoYXMgYWRkZWQgaGlzIHR3byBwcm9jb25zdWxhdGVzIHRvIGhpcyBmaXZlIGNvbnN1bGF0ZXMuICAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGlzIGxpbmUgbWFpbnRhaW5lZCBpdHMgc3BsZW5kb3VyIGRvd24gdG8gTWFyY2VsbHVzIHRoZSBuZXBoZXcgb2YgQXVndXN0dXMgQ2Flc2FyLCB3aG8gd2FzIGEgc29uIG9mIENhZXNhcidzIHNpc3RlciBPY3RhdmlhIGJ5IENhaXVzIE1hcmNlbGx1cywgYW5kIHdobyBkaWVkIGR1cmluZyBoaXMgYWVkaWxlc2hpcCBhdCBSb21lLCBoYXZpbmcgcmVjZW50bHkgbWFycmllZCBhIGRhdWdodGVyIG9mIENhZXNhci4gICAgSW4gaGlzIGhvbm91ciBhbmQgdG8gaGlzIG1lbW9yeSBPY3RhdmlhIGhpcyBtb3RoZXIgZGVkaWNhdGVkIHRoZSBsaWJyYXJ5LCBhbmQgQ2Flc2FyIHRoZSB0aGVhdHJlLCB3aGljaCBiZWFyIGhpcyBuYW1lLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlLCB0b28sIHRoZXJlIHdhcyBhIHN0YXR1ZSBvZiBoaW0sIGFjY29yZGluZyB0byBQb3NlaWRvbml1cywgYmVhcmluZyB0aGlzIGluc2NyaXB0aW9uOgoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhpcywgTyBzdHJhbmdlciwgd2FzIHRoZSBncmVhdCBzdGFyIG9mIGhpcyBjb3VudHJ5LCBSb21lLOKAlENsYXVkaXVzIE1hcmNlbGx1cyBvZiBpbGx1c3RyaW91cyBsaW5lLCB3aG8gc2V2ZW4gdGltZXMgaGVsZCB0aGUgY29uc3VsYXIgcG93ZXIgaW4gdGltZSBvZiB3YXIsIGFuZCBwb3VyZWQgbXVjaCBzbGF1Z2h0ZXIgb24gaGlzIGZvZXMuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPiBGb3IgdGhlIGF1dGhvciBvZiB0aGUgaW5zY3JpcHRpb24gaGFzIGFkZGVkIGhpcyB0d28gcHJvY29uc3VsYXRlcyB0byBoaXMgZml2ZSBjb25zdWxhdGVzLiAgCgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMsIE8gc3RyYW5nZXIsIHdhcyB0aGUgZ3JlYXQgc3RhciBvZiBoaXMgY291bnRyeSwgUm9tZSzigJRDbGF1ZGl1cyBNYXJjZWxsdXMgb2YgaWxsdXN0cmlvdXMgbGluZSwgd2hvIHNldmVuIHRpbWVzIGhlbGQgdGhlIGNvbnN1bGFyIHBvd2VyIGluIHRpbWUgb2Ygd2FyLCBhbmQgcG91cmVkIG11Y2ggc2xhdWdodGVyIG9uIGhpcyBmb2VzLjwvbD4KCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
