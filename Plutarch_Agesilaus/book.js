var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    translatedSection.style.backgroundColor = "";
  }
  translatedSection = document.getElementById(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  translatedSection.style.backgroundColor = "yellow";
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  translatedSection.style.backgroundColor = "";
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = "PHRyYW5zbGF0aW9uPjx0ZXh0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgIDxib2R5IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QUdFU0lMQcOcUzwvaGVhZD4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUFyY2hpZGFtdXMsIHRoZSBzb24gb2YgWmV1eGlkYW1hcywgYWZ0ZXIgYW4gaWxsdXN0cmlvdXMgcmVpZ24gb3ZlciB0aGUgTGFjZWRhZW1vbmlhbnMsIGxlZnQgYmVoaW5kIGhpbSBhIHNvbiwgQWdpcywgYnkgTGFtcGlkbywgYSB3b21hbiBvZiBob25vdXJhYmxlIGZhbWlseTsgYW5kIGEgbXVjaCB5b3VuZ2VyIHNvbiwgQWdlc2lsYcO8cywgYnkgRXVwb2xpYSwgdGhlIGRhdWdodGVyIG9mIE1lbGVzaXBwaWRhcy4gVGhlIGtpbmdkb20gYmVsb25nZWQgdG8gQWdpcyBieSBsYXcsIGFuZCBpdCB3YXMgdGhvdWdodCB0aGF0IEFnZXNpbGHDvHMgd291bGQgcGFzcyBoaXMgbGlmZSBpbiBhIHByaXZhdGUgc3RhdGlvbi4gSGUgd2FzIHRoZXJlZm9yZSBnaXZlbiB0aGUgc28tY2FsbGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hZ29nZSw8L3E+IG9yIGNvdXJzZSBvZiBwdWJsaWMgdHJhaW5pbmcgaW4gU3BhcnRhLCB3aGljaCwgYWx0aG91Z2ggYXVzdGVyZSBpbiBpdHMgbW9kZSBvZiBsaWZlIGFuZCBmdWxsIG9mIGhhcmRzaGlwcywgZWR1Y2F0ZWQgdGhlIHlvdXRoIHRvIG9iZWRpZW5jZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyByZWFzb24gaXQgd2FzLCB3ZSBhcmUgdG9sZCwgdGhhdCBTaW1vbmlkZXMgZ2F2ZSBTcGFydGEgdGhlIGVwaXRoZXQgb2YgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5tYW4tc3ViZHVpbmcsPC9xPiBzaW5jZSBtb3JlIHRoYW4gaW4gYW55IG90aGVyIHN0YXRlIGhlciBjdXN0b21zIG1hZGUgaGVyIGNpdGl6ZW5zIG9iZWRpZW50IHRvIHRoZSBsYXdzIGFuZCB0cmFjdGFibGUsIGxpa2UgaG9yc2VzIHRoYXQgYXJlIGJyb2tlbiBpbiB3aGlsZSB5ZXQgdGhleSBhcmUgY29sdHMuIEZyb20gdGhpcyBjb21wdWxzb3J5IHRyYWluaW5nIHRoZSBsYXcgZXhlbXB0cyB0aGUgaGVpcnMtYXBwYXJlbnQgdG8gdGhlIHRocm9uZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFnZXNpbGHDvHMgd2FzIHNpbmd1bGFyIGluIHRoaXMgYWxzbywgdGhhdCBoZSBoYWQgYmVlbiBlZHVjYXRlZCB0byBvYmV5IGJlZm9yZSBoZSBjYW1lIHRvIGNvbW1hbmQuIEZvciB0aGlzIHJlYXNvbiBoZSB3YXMgbXVjaCBtb3JlIGluIGhhcm1vbnkgd2l0aCBoaXMgc3ViamVjdHMgdGhhbiBhbnkgb2YgdGhlIGtpbmdzOyB0byB0aGUgY29tbWFuZGluZyBhbmQga2luZ2x5IHRyYWl0cyB3aGljaCB3ZXJlIGhpcyBieSBuYXR1cmUgdGhlcmUgaGFkIGJlZW4gYWRkZWQgYnkgaGlzIHB1YmxpYyB0cmFpbmluZyB0aG9zZSBvZiBwb3B1bGFyaXR5IGFuZCBraW5kbGluZXNzLiAKCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgaGUgd2FzIGFtb25nIHRoZSBzby1jYWxsZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5iYW5kczwvcT4gb2YgYm95cyB3aG8gd2VyZSByZWFyZWQgdG9nZXRoZXIsIGhlIGhhZCBhcyBoaXMgbG92ZXIgTHlzYW5kZXIKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxNy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5Y3VyZ3VzPC90aXRsZT4sIHh2aWkuIDE8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHlzLiAyMi4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5c2FuZGVyPC90aXRsZT4sIHh4aWkuIDM8L2JpYmw+Ljwvbm90ZT4sIHdobyB3YXMgc21pdHRlbiBwYXJ0aWN1bGFybHkgd2l0aCBoaXMgbmF0aXZlIGRlY29ydW0uIEZvciBhbHRob3VnaCBoZSB3YXMgY29udGVudGlvdXMgYW5kIGhpZ2gtc3Bpcml0ZWQgYmV5b25kIGhpcyBmZWxsb3dzLCB3aXNoaW5nIHRvIGJlIGZpcnN0IGluIGFsbCB0aGluZ3MsIGFuZCBoYXZpbmcgYSB2ZWhlbWVuY2UgYW5kIGZ1cnkgd2hpY2ggbm9uZSBjb3VsZCBjb250ZW5kIHdpdGggb3Igb3ZlcndoZWxtLCBvbiB0aGUgb3RoZXIgaGFuZCBoZSBoYWQgc3VjaCBhIHJlYWRpbmVzcyB0byBvYmV5IGFuZCBzdWNoIGdlbnRsZW5lc3MsIHRoYXQgaGUgZGlkIHdoYXRldmVyIHdhcyBlbmpvaW5lZCB1cG9uIGhpbSwgbm90IGF0IGFsbCBmcm9tIGEgc2Vuc2Ugb2YgZmVhciwgYnV0IGFsd2F5cyBmcm9tIGEgc2Vuc2Ugb2YgaG9ub3VyLCBhbmQgd2FzIG1vcmUgZGlzdHJlc3NlZCBieSBjZW5zdXJlIHRoYW4gaGUgd2FzIG9wcHJlc3NlZCBieSBoYXJkc2hpcHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBoaXMgZGVmb3JtaXR5LCB0aGUgYmVhdXR5IG9mIGhpcyBwZXJzb24gaW4gaXRzIHlvdXRoZnVsIHByaW1lIGNvdmVyZWQgdGhpcyBmcm9tIHNpZ2h0LCB3aGlsZSB0aGUgZWFzZSBhbmQgZ2FpZXR5IHdpdGggd2hpY2ggaGUgYm9yZSBzdWNoIGEgbWlzZm9ydHVuZSwgYmVpbmcgZmlyc3QgdG8gamVzdCBhbmQgam9rZSBhYm91dCBoaW1zZWxmLCB3ZW50IGZhciB0b3dhcmRzIHJlY3RpZnlpbmcgaXQuIEluZGVlZCwgaGlzIGxhbWVuZXNzIGJyb3VnaHQgaGlzIGFtYml0aW9uIGludG8gY2xlYXJlciBsaWdodCwgc2luY2UgaXQgbGVkIGhpbSB0byBkZWNsaW5lIG5vIGhhcmRzaGlwIGFuZCBubyBlbnRlcnByaXNlIHdoYXRldmVyLiBXZSBoYXZlIG5vIGxpa2VuZXNzIG9mIGhpbSAoZm9yIGhlIGhpbXNlbGYgd291bGQgbm90IGNvbnNlbnQgdG8gb25lLCBhbmQgZXZlbiB3aGVuIGhlIGxheSBkeWluZyBmb3JiYWRlIHRoZSBtYWtpbmcgb2YgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5laXRoZXIgc3RhdHVlIG9yIHBpY3R1cmU8L3E+IG9mIGhpcyBwZXJzb24pLCBidXQgaGUgaXMgc2FpZCB0byBoYXZlIGJlZW4gYSBsaXR0bGUgbWFuIG9mIHVuaW1wb3NpbmcgcHJlc2VuY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaGlzIGdhaWV0eSBhbmQgZ29vZCBzcGlyaXRzIGluIGV2ZXJ5IGNyaXNpcywgYW5kIGhpcyByYWlsbGVyeSwgd2hpY2ggd2FzIG5ldmVyIG9mZmVuc2l2ZSBvciBoYXJzaCBlaXRoZXIgaW4gd29yZCBvciBsb29rLCBtYWRlIGhpbSBtb3JlIGxvdmFibGUsIGRvd24gdG8gaGlzIG9sZCBhZ2UsIHRoYW4gdGhlIHlvdW5nIGFuZCBiZWF1dGlmdWwuIEJ1dCBhY2NvcmRpbmcgdG8gVGhlb3BocmFzdHVzLCBBcmNoaWRhbXVzIHdhcyBmaW5lZCBieSB0aGUgZXBob3JzIGZvciBtYXJyeWluZyBhIGxpdHRsZSB3b21hbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3Igc2hlIHdpbGwgYmVhciB1cyw8L3E+IHRoZXkgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ub3Qga2luZ3MsIGJ1dCBraW5nbGV0cy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBkdXJpbmcgdGhlIHJlaWduIG9mIEFnaXMgdGhhdCBBbGNpYmlhZGVzIGNhbWUgZnJvbSBTaWNpbHkgYXMgYW4gZXhpbGUgdG8gU3BhcnRhLCBhbmQgaGUgaGFkIG5vdCBiZWVuIGxvbmcgaW4gdGhlIGNpdHkgd2hlbiBoZSBpbmN1cnJlZCB0aGUgY2hhcmdlIG9mIGlsbGljaXQgaW50ZXJjb3Vyc2Ugd2l0aCBUaW1hZWEsIHRoZSB3aWZlIG9mIHRoZSBraW5nLiBUaGUgY2hpbGQsIHRvbywgdGhhdCB3YXMgYm9ybiBvZiBoZXIsIEFnaXMgcmVmdXNlZCB0byByZWNvZ25pemUgYXMgaGlzIG93biwgZGVjbGFyaW5nIHRoYXQgQWxjaWJpYWRlcyB3YXMgaXRzIGZhdGhlci4gRHVyaXMgc2F5cyB0aGF0IFRpbWFlYSB3YXMgbm90IHZlcnkgbXVjaCBkaXN0dXJiZWQgYXQgdGhpcywgYnV0IGluIHdoaXNwZXJzIHRvIGhlciBIZWxvdCBtYWlkcyBhdCBob21lIGFjdHVhbGx5IGNhbGxlZCB0aGUgY2hpbGQgQWxjaWJpYWRlcywgbm90IExlb3R5Y2hpZGVzOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5tb3Jlb3ZlciB0aGF0IEFsY2liaWFkZXMgaGltc2VsZiBhbHNvIGRlY2xhcmVkIHRoYXQgaGUgaGFkIG5vdCBhcHByb2FjaGVkIFRpbWFlYSBvdXQgb2Ygd2FudG9uIHBhc3Npb24sIGJ1dCBiZWNhdXNlIGhlIHdhcyBhbWJpdGlvdXMgdG8gaGF2ZSB0aGUgU3BhcnRhbnMgcmVpZ25lZCBvdmVyIGJ5IGhpcyBkZXNjZW5kYW50cy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAyMy43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFsY2liaWFkZXM8L3RpdGxlPiwgeHhpaWkuIDcgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gT24gdGhpcyBhY2NvdW50IEFsY2liaWFkZXMgd2l0aGRyZXcgZnJvbSBTcGFydGEsIGJlaW5nIGluIGZlYXIgb2YgQWdpczsgYW5kIHRoZSBib3kgd2FzIGFsd2F5cyBhbiBvYmplY3Qgb2Ygc3VzcGljaW9uIHRvIEFnaXMsIGFuZCB3YXMgbm90IGhvbm91cmVkIGJ5IGhpbSBhcyBsZWdpdGltYXRlLiBCdXQgd2hlbiB0aGUga2luZyBsYXkgc2ljaywgdGhlIHN1cHBsaWNhdGlvbnMgYW5kIHRlYXJzIG9mIExlb3R5Y2hpZGVzIHByZXZhaWxlZCB1cG9uIGhpbSB0byBkZWNsYXJlIGhpbSBoaXMgc29uIGluIHRoZSBwcmVzZW5jZSBvZiBtYW55IHdpdG5lc3Nlcy4gCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3R3aXRoc3RhbmRpbmcgdGhpcywgYWZ0ZXIgdGhlIGRlYXRoIG9mIEFnaXMKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM5OCBCLkMuPC9ub3RlPiwgTHlzYW5kZXIsIHdobyBieSB0aGlzIHRpbWUgaGFkIHN1YmR1ZWQgdGhlIEF0aGVuaWFucyBhdCBzZWEgYW5kIHdhcyBhIG1hbiBvZiB0aGUgZ3JlYXRlc3QgaW5mbHVlbmNlIGluIFNwYXJ0YSwgdHJpZWQgdG8gYWR2YW5jZSBBZ2VzaWxhw7xzIHRvIHRoZSB0aHJvbmUsIG9uIHRoZSBwbGVhIHRoYXQgTGVvdHljaGlkZXMgd2FzIGEgYmFzdGFyZCBhbmQgaGFkIG5vIGNsYWltIHVwb24gaXQuIE1hbnkgb2YgdGhlIG90aGVyIGNpdGl6ZW5zIGFsc28sIG93aW5nIHRvIHRoZSBleGNlbGxlbmNlIG9mIEFnZXNpbGHDvHMgYW5kIHRoZSBmYWN0IHRoYXQgaGUgaGFkIGJlZW4gcmVhcmVkIHdpdGggdGhlbSB1bmRlciB0aGUgY29tbW9uIHJlc3RyYWludHMgb2YgdGhlIHB1YmxpYyB0cmFpbmluZywgd2FybWx5IGVzcG91c2VkIHRoZSBwbGFuIG9mIEx5c2FuZGVyIGFuZCBjby1vcGVyYXRlZCB3aXRoIGhpbS4gQnV0IHRoZXJlIHdhcyBhIGRpdmluZXIgaW4gU3BhcnRhLCBuYW1lZCBEaW9wZWl0aGVzLCB3aG8gd2FzIHdlbGwgc3VwcGxpZWQgd2l0aCBhbmNpZW50IHByb3BoZWNpZXMsIGFuZCB3YXMgdGhvdWdodCB0byBiZSBlbWluZW50bHkgd2lzZSBpbiByZWxpZ2lvdXMgbWF0dGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBtYW4gZGVjbGFyZWQgaXQgY29udHJhcnkgdG8gdGhlIHdpbGwgb2YgSGVhdmVuIHRoYXQgYSBsYW1lIG1hbiBzaG91bGQgYmUga2luZyBvZiBTcGFydGEsIGFuZCBjaXRlZCBhdCB0aGUgdHJpYWwgb2YgdGhlIGNhc2UgdGhlIGZvbGxvd2luZyBvcmFjbGU64oCUIAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCAvPgoJCQkJCSAgICAgICAgICA8bD5CZXRoaW5rIHRoZWUgbm93LCBPIFNwYXJ0YSwgdGhvdWdoIHRob3UgYXJ0IHZlcnkgZ2xvcmlvdXMsIGxlc3QgZnJvbSB0aGVlLCBzb3VuZCBvZiBmb290LCB0aGVyZSBzcHJpbmcgYSBtYWltZWQgcm95YWx0eTsgZm9yIGxvbmcgd2lsbCB1bmV4cGVjdGVkIHRvaWxzIG9wcHJlc3MgdGhlZSwgYW5kIG9ud2FyZC1yb2xsaW5nIGJpbGxvd3Mgb2YgbWFuLWRlc3Ryb3lpbmcgd2FyLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UbyB0aGlzIEx5c2FuZGVyIGFuc3dlcmVkIHRoYXQsIGluIGNhc2UgdGhlIFNwYXJ0YW5zIHN0b29kIGluIGdyZWF0IGZlYXIgb2YgdGhlIG9yYWNsZSwgdGhleSBtdXN0IGJlIG9uIHRoZWlyIGd1YXJkIGFnYWluc3QgTGVvdHljaGlkZXM7IGZvciBpdCBtYXR0ZXJlZCBub3QgdG8gdGhlIGdvZCB0aGF0IG9uZSB3aG8gaGFsdGVkIGluIGhpcyBnYWl0IHNob3VsZCBiZSBraW5nLCBidXQgaWYgb25lIHdobyB3YXMgbm90IGxhd2Z1bGx5IGJlZ290dGVuLCBub3IgZXZlbiBhIGRlc2NlbmRhbnQgb2YgSGVyYWNsZXMsIHNob3VsZCBiZSBraW5nLCB0aGlzIHdhcyB3aGF0IHRoZSBnb2QgbWVhbnQgYnkgdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bWFpbWVkIHJveWFsdHkuPC9xPiBBbmQgQWdlc2lsYcO8cyBkZWNsYXJlZCB0aGF0IFBvc2VpZG9uIGFsc28gaGFkIGJvcm5lIHdpdG5lc3MgdG8gdGhlIGJhc3RhcmR5IG9mIExlb3R5Y2hpZGVzLCBmb3IgaGUgaGFkIGNhc3QgQWdpcyBmb3J0aCBmcm9tIGhpcyBiZWQtY2hhbWJlciBieSBhbiBlYXJ0aHF1YWtlLCBhbmQgYWZ0ZXIgdGhpcyBtb3JlIHRoYW4gdGVuIG1vbnRocyBlbGFwc2VkIGJlZm9yZSBMZW90eWNoaWRlcyB3YXMgYm9ybi4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAyMy44IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFsY2liaWFkZXM8L3RpdGxlPiwgeHhpaWkuIDg8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHlzLiAyMi4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5c2FuZGVyPC90aXRsZT4sIHh4aWkuIDMgZmYuPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMy4zLjIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbGVuaWNhPC90aXRsZT4sIGlpaS4gMywgMjwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIHdheSwgYW5kIGZvciB0aGVzZSByZWFzb25zLCBBZ2VzaWxhw7xzIHdhcyBhcHBvaW50ZWQga2luZywgYW5kIHN0cmFpZ2h0d2F5IGVuam95ZWQgcG9zc2Vzc2lvbiBvZiB0aGUgZXN0YXRlcyBvZiBBZ2lzIGFzIHdlbGwgYXMgaGlzIHRocm9uZSwgYWZ0ZXIgZXhwZWxsaW5nIExlb3R5Y2hpZGVzIGFzIGEgYmFzdGFyZC4gQnV0IHNlZWluZyB0aGF0IGhpcyBraW5zbWVuIG9uIGhpcyBtb3RoZXIncyBzaWRlLCB0aG91Z2ggd29ydGh5IGZvbGssIHdlcmUgZXhjZXNzaXZlbHkgcG9vciwgaGUgZGlzdHJpYnV0ZWQgYW1vbmcgdGhlbSB0aGUgaGFsZiBvZiBoaXMgZXN0YXRlcywgdGhlcmVieSBtYWtpbmcgaGlzIGluaGVyaXRhbmNlIHlpZWxkIGhpbSBnb29kLXdpbGwgYW5kIHJlcHV0YXRpb24gaW5zdGVhZCBvZiBlbnZ5IGFuZCBoYXRyZWQuIEFzIGZvciBYZW5vcGhvbidzIHN0YXRlbWVudAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFnZXMuIDYuNCIgdmFsaWQ9InllcyI+WGVub3Bob24ncyA8dGl0bGU+QWdlc2lsYcO8czwvdGl0bGU+LCB2aS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBieSBvYmV5aW5nIGhpcyBjb3VudHJ5IGluIGV2ZXJ5dGhpbmcgaGUgd29uIHZlcnkgZ3JlYXQgcG93ZXIsIHNvIHRoYXQgaGUgZGlkIHdoYXQgaGUgcGxlYXNlZCwgdGhlIGNhc2UgaXMgYXMgZm9sbG93cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhhdCB0aW1lIHRoZSBlcGhvcnMgYW5kIHRoZSBzZW5hdG9ycyBoYWQgdGhlIGdyZWF0ZXN0IHBvd2VyIGluIHRoZSBzdGF0ZSwgb2Ygd2hvbSB0aGUgZm9ybWVyIGhvbGQgb2ZmaWNlIGZvciBhIHllYXIgb25seSwgd2hpbGUgdGhlIHNlbmF0b3JzIGVuam95IHRoZWlyIGRpZ25pdHkgZm9yIGxpZmUsIHRoZWlyIG9mZmljZXMgaGF2aW5nIGJlZW4gaW5zdGl0dXRlZCB0byByZXN0cmFpbiB0aGUgcG93ZXIgb2YgdGhlIGtpbmdzLCBhcyBJIGhhdmUgc2FpZCBpbiBteSBMaWZlIG9mIEx5Y3VyZ3VzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDUuNiIgdmFsaWQ9InllcyI+Q2hhcHRlcnMgdi4gNiBmLjwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDcuMSIgdmFsaWQ9InllcyI+dmlpLiAxIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoZXJlZm9yZSBmcm9tIHRoZSBvdXRzZXQsIGFuZCBmcm9tIGdlbmVyYXRpb24gdG8gZ2VuZXJhdGlvbiwgdGhlIGtpbmdzIHdlcmUgdHJhZGl0aW9uYWxseSBhdCBmZXVkIGFuZCB2YXJpYW5jZSB3aXRoIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZ2VzaWxhw7xzIHRvb2sgdGhlIG9wcG9zaXRlIGNvdXJzZS4gSW5zdGVhZCBvZiBjb2xsaWRpbmcgYW5kIGZpZ2h0aW5nIHdpdGggdGhlbSwgaGUgY291cnRlZCB0aGVpciBmYXZvdXIsIHdpbm5pbmcgdGhlaXIgc3VwcG9ydCBiZWZvcmUgc2V0dGluZyBvdXQgb24gYW55IHVuZGVydGFraW5nOyBhbmQgd2hlbmV2ZXIgaGUgd2FzIGludml0ZWQgdG8gbWVldCB0aGVtLCBoYXN0ZW5pbmcgdG8gdGhlbSBvbiB0aGUgcnVuLiBJZiBldmVyIHRoZSBlcGhvcnMgdmlzaXRlZCBoaW0gd2hlbiBoZSB3YXMgc2VhdGVkIGluIGhpcyByb3lhbCBjaGFpciBhbmQgYWRtaW5pc3RlcmluZyBqdXN0aWNlLCBoZSByb3NlIGluIHRoZWlyIGhvbm91cjsgYW5kIGFzIG1lbiB3ZXJlIGZyb20gdGltZSB0byB0aW1lIG1hZGUgbWVtYmVycyBvZiB0aGUgc2VuYXRlLCBoZSB3b3VsZCBzZW5kIGVhY2ggb25lIGEgY2xvYWsgYW5kIGFuIG94IGFzIGEgbWFyayBvZiBob25vdXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNvbnNlcXVlbnRseSwgd2hpbGUgaGUgd2FzIHRob3VnaHQgdG8gYmUgaG9ub3VyaW5nIGFuZCBleGFsdGluZyB0aGUgZGlnbml0eSBvZiB0aGVpciBvZmZpY2UsIGhlIHdhcyB1bmF3YXJlcyBpbmNyZWFzaW5nIGhpcyBvd24gaW5mbHVlbmNlIGFuZCBhZGRpbmcgdG8gdGhlIHBvd2VyIG9mIHRoZSBraW5nIGEgZ3JlYXRuZXNzIHdoaWNoIHdhcyBjb25jZWRlZCBvdXQgb2YgZ29vZC13aWxsIHRvd2FyZHMgaGltLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBoaXMgZGVhbGluZ3Mgd2l0aCB0aGUgcmVzdCBvZiB0aGUgY2l0aXplbnMgaGUgd2FzIGxlc3MgYmxhbWUtd29ydGh5IGFzIGFuIGVuZW15IHRoYW4gYXMgYSBmcmllbmQ7IGZvciBoZSB3b3VsZCBub3QgaW5qdXJlIGhpcyBlbmVtaWVzIHdpdGhvdXQganVzdCBjYXVzZSwgYnV0IGpvaW5lZCBoaXMgZnJpZW5kcyBldmVuIGluIHRoZWlyIHVuanVzdCBwcmFjdGljZXMuIEFuZCB3aGVyZWFzIGhlIHdhcyBhc2hhbWVkIG5vdCB0byBob25vdXIgaGlzIGVuZW1pZXMgd2hlbiB0aGV5IGRpZCB3ZWxsLCBoZSBjb3VsZCBub3QgYnJpbmcgaGltc2VsZiB0byBjZW5zdXJlIGhpcyBmcmllbmRzIHdoZW4gdGhleSBkaWQgYW1pc3MsIGJ1dCBhY3R1YWxseSBwcmlkZWQgaGltc2VsZiBvbiBhaWRpbmcgdGhlbSBhbmQgc2hhcmluZyBpbiB0aGVpciBtaXNkZWVkcy4gRm9yIGhlIHRob3VnaHQgbm8gYWlkIGRpc2dyYWNlZnVsIHRoYXQgd2FzIGdpdmVuIHRvIGEgZnJpZW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYsIG9uIHRoZSBvdGhlciBoYW5kLCBoaXMgYWR2ZXJzYXJpZXMgc3R1bWJsZWQgYW5kIGZlbGwsIGhlIHdhcyBmaXJzdCB0byBzeW1wYXRoaXplIHdpdGggdGhlbSBhbmQgZ2l2ZSB0aGVtIHplYWxvdXMgYWlkIGlmIHRoZXkgZGVzaXJlZCBpdCwgYW5kIHNvIHdvbiB0aGUgaGVhcnRzIGFuZCB0aGUgYWxsZWdpYW5jZSBvZiBhbGwuIFRoZSBlcGhvcnMsIGFjY29yZGluZ2x5LCBzZWVpbmcgdGhpcywgYW5kIGZlYXJpbmcgaGlzIHBvd2VyLCBsYWlkIGEgZmluZSB1cG9uIGhpbSwgYWxsZWdpbmcgYXMgYSByZWFzb24gdGhhdCBoZSBtYWRlIHRoZSBjaXRpemVucyBoaXMgb3duLCB3aG8gc2hvdWxkIGJlIHRoZSBjb21tb24gcHJvcGVydHkgb2YgdGhlIHN0YXRlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TmF0dXJhbCBwaGlsb3NvcGhlcnMgYXJlIG9mIHRoZSBvcGluaW9uIHRoYXQsIGlmIHN0cmlmZSBhbmQgZGlzY29yZCBzaG91bGQgYmUgYmFuaXNoZWQgZnJvbSB0aGUgdW5pdmVyc2UsIHRoZSBoZWF2ZW5seSBib2RpZXMgd291bGQgc3RhbmQgc3RpbGwsIGFuZCBhbGwgZ2VuZXJhdGlvbiBhbmQgbW90aW9uIHdvdWxkIGNlYXNlIGluIGNvbnNlcXVlbmNlIG9mIHRoZSBnZW5lcmFsIGhhcm1vbnkuIEFuZCBzbyB0aGUgU3BhcnRhbiBsYXctZ2l2ZXIgc2VlbXMgdG8gaGF2ZSBpbnRyb2R1Y2VkIHRoZSBzcGlyaXQgb2YgYW1iaXRpb24gYW5kIGNvbnRlbnRpb24gaW50byBoaXMgY2l2aWwgcG9saXR5IGFzIGFuIGluY2VudGl2ZSB0byB2aXJ0dWUsIGRlc2lyaW5nIHRoYXQgZ29vZCBjaXRpemVucyBzaG91bGQgYWx3YXlzIGJlIHNvbWV3aGF0IGF0IHZhcmlhbmNlIGFuZCBpbiBjb25mbGljdCB3aXRoIG9uZSBhbm90aGVyLCBhbmQgZGVlbWluZyB0aGF0IGNvbXBsYWlzYW5jZSB3aGljaCB3ZWFrbHkgeWllbGRzIHdpdGhvdXQgZGViYXRlLCB3aGljaCBrbm93cyBubyBlZmZvcnQgYW5kIG5vIHN0cnVnZ2xlLCB0byBiZSB3cm9uZ2x5IGNhbGxlZCBjb25jb3JkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc29tZSB0aGluayB0aGF0IEhvbWVyIGFsc28gd2FzIGNsZWFybHkgb2YgdGhpcyBtaW5kOyBmb3IgaGUgd291bGQgbm90IGhhdmUgcmVwcmVzZW50ZWQgQWdhbWVtbm9uIGFzIHBsZWFzZWQgd2hlbiBPZHlzc2V1cyBhbmQgQWNoaWxsZXMgd2VyZSBjYXJyaWVkIGF3YXkgaW50byBhYnVzZSBvZiBvbmUgYW5vdGhlciB3aXRoIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZnJpZ2h0ZnVsIHdvcmRzLDwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA4Ljc1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk9keXNzZXk8L3RpdGxlPiwgdmlpaS4gNzUgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGlmIGhlIGhhZCBub3QgdGhvdWdodCB0aGUgZ2VuZXJhbCBpbnRlcmVzdHMgbGlrZWx5IHRvIHByb2ZpdCBieSB0aGUgbXV0dWFsIHJpdmFscnkgYW5kIHF1YXJyZWxsaW5nIG9mIHRoZSBjaGllZnRhaW5zLiBUaGlzIHByaW5jaXBsZSwgaG93ZXZlciwgbXVzdCBub3QgYmUgYWNjZXB0ZWQgd2l0aG91dCBzb21lIHJlc2VydmF0aW9uczsgZm9yIGV4Y2Vzc2l2ZSByaXZhbHJpZXMgYXJlIGluanVyaW91cyB0byBzdGF0ZXMsIGFuZCBwcm9kdWN0aXZlIG9mIGdyZWF0IHBlcmlscy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWdlc2lsYcO8cyBoYWQgYnV0IHJlY2VudGx5IGNvbWUgdG8gdGhlIHRocm9uZSwgd2hlbiB0aWRpbmdzIHdlcmUgYnJvdWdodCBmcm9tIEFzaWEgdGhhdCB0aGUgUGVyc2lhbiBraW5nIHdhcyBwcmVwYXJpbmcgYSBncmVhdCBhcm1hbWVudCB3aXRoIHdoaWNoIHRvIGRyaXZlIHRoZSBMYWNlZGFlbW9uaWFucyBmcm9tIHRoZSBzZWEuIE5vdywgTHlzYW5kZXIgd2FzIGVhZ2VyIHRvIGJlIHNlbnQgYWdhaW4gaW50byBBc2lhLCBhbmQgdG8gYWlkIGhpcyBmcmllbmRzIHRoZXJlLiBUaGVzZSBoZSBoYWQgbGVmdCBnb3Zlcm5vcnMgYW5kIG1hc3RlcnMgb2YgdGhlIGNpdGllcywgYnV0IG93aW5nIHRvIHRoZWlyIHVuanVzdCBhbmQgdmlvbGVudCBjb25kdWN0IG9mIGFmZmFpcnMsIHRoZXkgd2VyZSBiZWluZyBkcml2ZW4gb3V0IGJ5IHRoZSBjaXRpemVucywgYW5kIGV2ZW4gcHV0IHRvIGRlYXRoLiBIZSB0aGVyZWZvcmUgcGVyc3VhZGVkIEFnZXNpbGHDvHMgdG8gdW5kZXJ0YWtlIHRoZSBleHBlZGl0aW9uIGFuZCBtYWtlIHdhciBpbiBiZWhhbGYgb2YgSGVsbGFzLCBwcm9jZWVkaW5nIHRvIHRoZSBmYXJ0aGVzdCBwb2ludCBhY3Jvc3MgdGhlIHNlYSwgYW5kIHRodXMgYW50aWNpcGF0aW5nIHRoZSBwcmVwYXJhdGlvbnMgb2YgdGhlIEJhcmJhcmlhbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIHNhbWUgdGltZSBoZSB3cm90ZSB0byBoaXMgZnJpZW5kcyBpbiBBc2lhIHVyZ2luZyB0aGVtIHRvIHNlbmQgbWVzc2VuZ2VycyB0byBTcGFydGEgYW5kIGRlbWFuZCBBZ2VzaWxhw7xzIGFzIHRoZWlyIGNvbW1hbmRlci4gQWNjb3JkaW5nbHksIEFnZXNpbGHDvHMgd2VudCBiZWZvcmUgdGhlIGFzc2VtYmx5IG9mIHRoZSBwZW9wbGUgYW5kIGFncmVlZCB0byB1bmRlcnRha2UgdGhlIHdhciBpZiB0aGV5IHdvdWxkIGdyYW50IGhpbSB0aGlydHkgU3BhcnRhbnMgYXMgY2FwdGFpbnMgYW5kIGNvdW5zZWxsb3JzLCBhIHNlbGVjdCBjb3JwcyBvZiB0d28gdGhvdXNhbmQgZW5mcmFuY2hpc2VkIEhlbG90cywgYW5kIGEgZm9yY2Ugb2YgYWxsaWVzIGFtb3VudGluZyB0byBzaXggdGhvdXNhbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgcmVhZGlseSB2b3RlZCBldmVyeXRoaW5nLCBvd2luZyB0byB0aGUgY28tb3BlcmF0aW9uIG9mIEx5c2FuZGVyLCBhbmQgc2VudCBBZ2VzaWxhw7xzIGZvcnRoIGF0IG9uY2Ugd2l0aCB0aGUgdGhpcnR5IFNwYXJ0YW5zLiBPZiB0aGVzZSBMeXNhbmRlciB3YXMgZmlyc3QgYW5kIGZvcmVtb3N0LCBub3Qgb25seSBiZWNhdXNlIG9mIGhpcyBvd24gcmVwdXRhdGlvbiBhbmQgaW5mbHVlbmNlLCBidXQgYWxzbyBiZWNhdXNlIG9mIHRoZSBmcmllbmRzaGlwIG9mIEFnZXNpbGHDvHMsIGluIHdob3NlIGV5ZXMgaGlzIHByb2N1cmluZyBoaW0gdGhpcyBjb21tYW5kIHdhcyBhIGdyZWF0ZXIgYm9vbiB0aGFuIGhpcyByYWlzaW5nIGhpbSB0byB0aGUgdGhyb25lLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgaGlzIGZvcmNlcyB3ZXJlIGFzc2VtYmxpbmcgYXQgR2VyYWVzdHVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNwcmluZyBvZiAzOTYgQi5DLjwvbm90ZT4gQWdlc2lsYcO8cyBoaW1zZWxmIHdlbnQgdG8gQXVsaXMgd2l0aCBoaXMgZnJpZW5kcyBhbmQgc3BlbnQgdGhlIG5pZ2h0LiBBcyBoZSBzbGVwdCwgaGUgdGhvdWdodCBhIHZvaWNlIGNhbWUgdG8gaGltLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+S2luZyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIHRob3UgYXJ0IHN1cmVseSBhd2FyZSB0aGF0IG5vIG9uZSBoYXMgZXZlciBiZWVuIGFwcG9pbnRlZCBnZW5lcmFsIG9mIGFsbCBIZWxsYXMgdG9nZXRoZXIgZXhjZXB0IEFnYW1lbW5vbiwgaW4gZm9ybWVyIHRpbWVzLCBhbmQgbm93IHRoeXNlbGYsIGFmdGVyIGhpbS4gQW5kIHNpbmNlIHRob3UgY29tbWFuZGVzdCB0aGUgc2FtZSBob3N0cyB0aGF0IGhlIGRpZCwgYW5kIHdhZ2VzdCB3YXIgb24gdGhlIHNhbWUgZm9lcywgYW5kIHNldHRlc3Qgb3V0IGZvciB0aGUgd2FyIGZyb20gdGhlIHNhbWUgcGxhY2UsIGl0IGlzIG1lZXQgdGhhdCB0aG91IHNob3VsZHN0IHNhY3JpZmljZSBhbHNvIHRvIHRoZSBnb2RkZXNzIHRoZSBzYWNyaWZpY2Ugd2hpY2ggaGUgbWFkZSB0aGVyZSBiZWZvcmUgaGUgc2V0IHNhaWwuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFsbW9zdCBhdCBvbmNlIEFnZXNpbGHDvHMgcmVtZW1iZXJlZCB0aGUgc2FjcmlmaWNlIG9mIGhpcyBvd24gZGF1Z2h0ZXIKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPklwaGlnZW5laWEuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRXVyLiBJQSAxNTQwIiB2YWxpZD0ieWVzIj5FdXJpcGlkZXMsIDx0aXRsZT5JcGguIEF1bC48L3RpdGxlPiwgMTU0MCBmZi4gPC9iaWJsPihLaXJjaGhvZmYpLjwvbm90ZT4gd2hpY2ggQWdhbWVtbm9uIGhhZCB0aGVyZSBtYWRlIGluIG9iZWRpZW5jZSB0byB0aGUgc29vdGhzYXllcnMuIEhlIHdhcyBub3QgZGlzdHVyYmVkLCBob3dldmVyLCBidXQgYWZ0ZXIgcmlzaW5nIHVwIGFuZCBpbXBhcnRpbmcgaGlzIHZpc2lvbiB0byBoaXMgZnJpZW5kcywgZGVjbGFyZWQgdGhhdCBoZSB3b3VsZCBob25vdXIgdGhlIGdvZGRlc3Mgd2l0aCBhIHNhY3JpZmljZSBpbiB3aGljaCBzaGUgY291bGQgZml0bHkgdGFrZSBwbGVhc3VyZSwgYmVpbmcgYSBnb2RkZXNzLCBhbmQgd291bGQgbm90IGltaXRhdGUgdGhlIGNydWVsIGluc2Vuc2liaWxpdHkgb2YgaGlzIHByZWRlY2Vzc29yLiBTbyBoZSBjYXVzZWQgYSBoaW5kIHRvIGJlIHdyZWF0aGVkIHdpdGggY2hhcGxldHMsIGFuZCBvcmRlcmVkIGhpcyBvd24gc2VlciB0byBwZXJmb3JtIHRoZSBzYWNyaWZpY2UsIGluc3RlYWQgb2YgdGhlIG9uZSBjdXN0b21hcmlseSBhcHBvaW50ZWQgdG8gdGhpcyBvZmZpY2UgYnkgdGhlIEJvZW90aWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gdGhlIEJvZW90aWFuIG1hZ2lzdHJhdGVzIGhlYXJkIG9mIHRoaXMsIHRoZXkgd2VyZSBtb3ZlZCB0byBhbmdlciwgYW5kIHNlbnQgdGhlaXIgb2ZmaWNlcnMsIGZvcmJpZGRpbmcgQWdlc2lsYcO8cyB0byBzYWNyaWZpY2UgY29udHJhcnkgdG8gdGhlIGxhd3MgYW5kIGN1c3RvbXMgb2YgdGhlIEJvZW90aWFucy4gVGhlc2Ugb2ZmaWNlcnMgbm90IG9ubHkgZGVsaXZlcmVkIHRoZWlyIG1lc3NhZ2UsIGJ1dCBhbHNvIHNuYXRjaGVkIHRoZSB0aGlnaC1waWVjZXMgb2YgdGhlIHZpY3RpbSBmcm9tIHRoZSBhbHRhci4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGlpaS4gNCwgMyBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBZ2VzaWxhw7xzIHRoZXJlZm9yZSBzYWlsZWQgYXdheSBpbiBncmVhdCBkaXN0cmVzcyBvZiBtaW5kOyBoZSB3YXMgbm90IG9ubHkgaGlnaGx5IGluY2Vuc2VkIGF0IHRoZSBUaGViYW5zLCBidXQgYWxzbyBmdWxsIG9mIGlsbC1ib2Rpbmcgb24gYWNjb3VudCBvZiB0aGUgb21lbi4gSGUgd2FzIGNvbnZpbmNlZCB0aGF0IGhpcyB1bmRlcnRha2luZ3Mgd291bGQgYmUgaW5jb21wbGV0ZSwgYW5kIHRoYXQgaGlzIGV4cGVkaXRpb24gd291bGQgaGF2ZSBubyBmaXR0aW5nIGlzc3VlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIGhlIGNhbWUgdG8gRXBoZXN1cywgdGhlIGdyZWF0IGRpZ25pdHkgYW5kIGluZmx1ZW5jZSB3aGljaCBMeXNhbmRlciBlbmpveWVkIHdlcmUgYnVyZGVuc29tZSBhbmQgZ3JpZXZvdXMgdG8gaGltLiBUaGUgZG9vcnMgb2YgTHlzYW5kZXIgd2VyZSBhbHdheXMgYmVzZXQgd2l0aCBhIHRocm9uZywgYW5kIGFsbCBmb2xsb3dlZCBpbiBoaXMgdHJhaW4gYW5kIHBhaWQgaGltIGNvdXJ0LCBhcyB0aG91Z2ggQWdlc2lsYcO8cyBoYWQgdGhlIGNvbW1hbmQgaW4gbmFtZSBhbmQgb3V0d2FyZCBhcHBlYXJhbmNlLCB0byBjb21wbHkgd2l0aCB0aGUgbGF3LCB3aGlsZSBpbiBmYWN0IEx5c2FuZGVyIHdhcyBtYXN0ZXIgb2YgYWxsLCBoYWQgYWxsIHBvd2VyLCBhbmQgZGlkIGV2ZXJ5dGhpbmcuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMy40LjciIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gZmFjdCwgbm9uZSBvZiB0aGUgZ2VuZXJhbHMgc2VudCBvdXQgdG8gQXNpYSBldmVyIGhhZCBtb3JlIHBvd2VyIG9yIGluc3BpcmVkIG1vcmUgZmVhciB0aGFuIGhlOyBub25lIG90aGVyIGNvbmZlcnJlZCBncmVhdGVyIGZhdm91cnMgb24gaGlzIGZyaWVuZHMsIG9yIGluZmxpY3RlZCBzdWNoIGdyZWF0IGluanVyaWVzIHVwb24gaGlzIGVuZW1pZXMuIEFsbCB0aGlzIHdhcyBzdGlsbCBmcmVzaCBpbiBtZW4ncyBtaW5kcywgYW5kIGJlc2lkZXMsIHdoZW4gdGhleSBzYXcgdGhlIHNpbXBsZSwgcGxhaW4sIGFuZCBmYW1pbGlhciBtYW5uZXJzIG9mIEFnZXNpbGHDvHMsIHdoaWxlIEx5c2FuZGVyIHJldGFpbmVkIHRoZSBzYW1lIFZlaGVtZW5jZSBhbmQgaGFyc2huZXNzLCBhbmQgdGhlIHNhbWUgYnJldml0eSBvZiBzcGVlY2ggYXMgYmVmb3JlLCB0aGV5IHlpZWxkZWQgdG8gdGhlIGxhdHRlcidzIGluZmx1ZW5jZSBhbHRvZ2V0aGVyLCBhbmQgYXR0YWNoZWQgdGhlbXNlbHZlcyB0byBoaW0gYWxvbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGEgY29uc2VxdWVuY2Ugb2YgdGhpcywgaW4gdGhlIGZpcnN0IHBsYWNlLCB0aGUgcmVzdCBvZiB0aGUgU3BhcnRhbnMgd2VyZSBkaXNwbGVhc2VkIHRvIGZpbmQgdGhlbXNlbHZlcyBhc3Npc3RhbnRzIG9mIEx5c2FuZGVyIHJhdGhlciB0aGFuIGNvdW5zZWxsb3JzIG9mIHRoZSBraW5nOyBhbmQsIGluIHRoZSBzZWNvbmQgcGxhY2UsIEFnZXNpbGHDvHMgaGltc2VsZjosIHRob3VnaCBoZSB3YXMgbm90IGFuIGVudmlvdXMgbWFuLCBub3IgZGlzcGxlYXNlZCB0aGF0IG90aGVycyBzaG91bGQgYmUgaG9ub3VyZWQsIGJ1dCBleGNlZWRpbmdseSBhbWJpdGlvdXMgYW5kIGhpZ2gtc3Bpcml0ZWQsIGJlZ2FuIHRvIGZlYXIgdGhhdCBhbnkgYnJpbGxpYW50IHN1Y2Nlc3Mgd2hpY2ggaGUgbWlnaHQgYWNoaWV2ZSBpbiBoaXMgdW5kZXJ0YWtpbmdzIHdvdWxkIGJlIGF0dHJpYnV0ZWQgdG8gTHlzYW5kZXIsIG93aW5nIHRvIHBvcHVsYXIgb3Bpbmlvbi4gSGUgd2VudCB0byB3b3JrLCB0aGVyZWZvcmUsIGluIHRoaXMgd2F5LgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VG8gYmVnaW4gd2l0aCwgaGUgcmVzaXN0ZWQgdGhlIGNvdW5zZWxzIG9mIEx5c2FuZGVyLCBhbmQgd2hhdGV2ZXIgZW50ZXJwcmlzZXMgd2VyZSBtb3N0IGVhcm5lc3RseSBmYXZvdXJlZCBieSBoaW0sIHRoZXNlIGhlIGlnbm9yZWQgYW5kIG5lZ2xlY3RlZCwgYW5kIGRpZCBvdGhlciB0aGluZ3MgaW4gdGhlaXIgc3RlYWQ7IGFnYWluLCBvZiB0aG9zZSB3aG8gY2FtZSB0byBzb2xpY2l0IGZhdm91cnMgZnJvbSBoaW0sIGhlIHNlbnQgYXdheSBlbXB0eS1oYW5kZWQgYWxsIHdobyBwdXQgdGhlaXIgY2hpZWYgY29uZmlkZW5jZSBpbiBMeXNhbmRlcjsgYW5kIGluIGp1ZGljaWFsIGNhc2VzIGxpa2V3aXNlLCBhbGwgdGhvc2UgYWdhaW5zdCB3aG9tIEx5c2FuZGVyIGludmVpZ2hlZCB3ZXJlIHN1cmUgdG8gY29tZSBvZmYgdmljdG9yaW91cywgd2hpbGUsIG9uIHRoZSBjb250cmFyeSwgdGhvc2Ugd2hvbSBoZSB3YXMgbWFuaWZlc3RseSBlYWdlciB0byBoZWxwIGhhZCBoYXJkIHdvcmsgZXZlbiB0byBlc2NhcGUgYmVpbmcgZmluZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHRoaW5ncyBoYXBwZW5lZCwgbm90IGNhc3VhbGx5LCBidXQgYXMgaWYgb2Ygc2V0IHB1cnBvc2UsIGFuZCB1bmlmb3JtbHkuIEF0IGxhc3QgTHlzYW5kZXIgcGVyY2VpdmVkIHRoZSByZWFzb24sIGFuZCBkaWQgbm90IGhpZGUgaXQgZnJvbSBoaXMgZnJpZW5kcywgYnV0IHRvbGQgdGhlbSBpdCB3YXMgb24gaGlzIGFjY291bnQgdGhhdCB0aGV5IHdlcmUgc2xpZ2h0ZWQsIGFuZCBhZHZpc2VkIHRoZW0gdG8gZ28gYW5kIHBheSB0aGVpciBjb3VydCB0byB0aGUga2luZywgYW5kIHRvIHRob3NlIG1vcmUgaW5mbHVlbnRpYWwgd2l0aCBoaW0gdGhhbiBoaW1zZWxmLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgc2luY2UgaGlzIHdvcmRzIGFuZCBhY3RzIHNlZW1lZCBjb250cml2ZWQgdG8gYnJpbmcgb2RpdW0gdXBvbiB0aGUga2luZywgQWdlc2lsYcO8cywgd2lzaGluZyB0byBkZXNwaXRlIGhpbSBzdGlsbCBtb3JlLCBhcHBvaW50ZWQgaGltIGhpcyBjYXJ2ZXIgb2YgbWVhdHMsIGFuZCBvbmNlIHNhaWQsIHdlIGFyZSB0b2xkLCBpbiB0aGUgaGVhcmluZyBvZiBtYW55OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5vdyB0aGVuLCBsZXQgdGhlc2Ugc3VwcGxpYW50cyBnbyBvZmYgdG8gbXkgY2FydmVyIG9mIG1lYXRzIGFuZCBwYXkgdGhlaXIgY291cnQgdG8gaGltLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5MeXNhbmRlciwgdGhlbiwgZGVlcGx5IHBhaW5lZCwgc2FpZCB0byBoaW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBzZWUsIEFnZXNpbGHDvHMsIHRoYXQgdGhvdSBrbm93ZXN0IHZlcnkgd2VsbCBob3cgdG8gaHVtYmxlIHRoeSBmcmllbmRzLjwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcyBpbmRlZWQsPC9xPiBzYWlkIHRoZSBraW5nLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRob3NlIHdobyB3aXNoIHRvIGJlIG1vcmUgcG93ZXJmdWwgdGhhbiBJIGFtLjwvcT4gVGhlbiBMeXNhbmRlciBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwsIHBlcmhhcHMgdGhlc2Ugd29yZHMgb2YgdGhpbmUgYXJlIGZhaXJlciB0aGFuIG15IGRlZWRzLiBHaXZlIG1lLCBob3dldmVyLCBzb21lIHBvc3QgYW5kIHBsYWNlIHdoZXJlIEkgc2hhbGwgYmUgb2Ygc2VydmljZSB0byB0aGVlLCB3aXRob3V0IHZleGluZyB0aGVlLjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDIzLjkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THlzYW5kZXI8L3RpdGxlPiwgeHhpaWkuIDkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiB0aGlzIGhlIHdhcyBzZW50IHRvIHRoZSBIZWxsZXNwb250LCBhbmQgYnJvdWdodCBvdmVyIHRvIEFnZXNpbGHDvHMgZnJvbSB0aGUgY291bnRyeSBvZiBQaGFybmFiYXp1cywgU3BpdGhyaWRhdGVzLCBhIFBlcnNpYW4sIHdpdGggbXVjaCBtb25leSBhbmQgdHdvIGh1bmRyZWQgaG9yc2VtZW4uIEhlIGRpZCBub3QsIGhvd2V2ZXIsIGxheSBhc2lkZSBoaXMgd3JhdGgsIGJ1dCBjb250aW51ZWQgaGlzIHJlc2VudG1lbnQsIGFuZCBmcm9tIHRoaXMgdGltZSBvbiBwbGFubmVkIGhvdyBoZSBtaWdodCB3cmVzdCB0aGUga2luZ2RvbSBmcm9tIHRoZSB0d28gcm95YWwgZmFtaWxpZXMsIGFuZCBtYWtlIGFsbCBTcGFydGFucyBvbmNlIG1vcmUgZWxpZ2libGUgdG8gaXQuIEFuZCBpdCB3YXMgdGhvdWdodCB0aGF0IGhlIHdvdWxkIGhhdmUgYnJvdWdodCBhYm91dCBhIGdyZWF0IGRpc3R1cmJhbmNlIGluIGNvbnNlcXVlbmNlIG9mIHRoaXMgcXVhcnJlbCwgaGFkIG5vdCBkZWF0aCBvdmVydGFrZW4gaGltIG9uIGhpcyBleHBlZGl0aW9uIGludG8gQm9lb3RpYS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHlzLiAyNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5c2FuZGVyPC90aXRsZT4sIHh4aXYuPC9iaWJsPi08YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHlzLiAyOC4xIiB2YWxpZD0ieWVzIj54eHZpaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBhbWJpdGlvdXMgbmF0dXJlcyBpbiBhIGNvbW1vbndlYWx0aCwgaWYgdGhleSBkbyBub3Qgb2JzZXJ2ZSBkdWUgYm91bmRzLCB3b3JrIGdyZWF0ZXIgaGFybSB0aGFuIGdvb2QuIEZvciBldmVuIHRob3VnaCBMeXNhbmRlciB3YXMgdHJvdWJsZXNvbWUsIGFzIGhlIHdhcywgaW4gZ3JhdGlmeWluZyBoaXMgYW1iaXRpb24gdW5zZWFzb25hYmx5LCBzdGlsbCwgQWdlc2lsYcO8cyBtdXN0IHN1cmVseSBoYXZlIGtub3duIGFub3RoZXIgYW5kIG1vcmUgYmxhbWVsZXNzIHdheSBvZiBjb3JyZWN0aW5nIGEgbWFuIG9mIGhpZ2ggcmVwdXRlIGFuZCBhbWJpdGlvbiB3aGVuIGhlIGVycmVkLiBBcyBpdCB3YXMsIGl0IHNlZW1zIHRvIGhhdmUgYmVlbiBkdWUgdG8gdGhlIHNhbWUgcGFzc2lvbiB0aGF0IHRoZSBvbmUgd291bGQgbm90IHJlY29nbml6ZSB0aGUgYXV0aG9yaXR5IG9mIGhpcyBzdXBlcmlvciwgbm9yIHRoZSBvdGhlciBlbmR1cmUgdGhlIGJlaW5nIGlnbm9yZWQgYnkgaGlzIGZyaWVuZCBhbmQgY29tcmFkZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QgVGlzYXBoZXJuZXMgd2FzIGFmcmFpZCBvZiBBZ2VzaWxhw7xzLCBhbmQgbWFkZSBhIHRyZWF0eSBpbiB3aGljaCBoZSBwcm9taXNlZCBoaW0gdG8gbWFrZSB0aGUgR3JlZWsgY2l0aWVzIGZyZWUgYW5kIGluZGVwZW5kZW50IG9mIHRoZSBLaW5nLiBBZnRlcndhcmRzLCBob3dldmVyLCB3aGVuIGhlIHdhcyBjb252aW5jZWQgdGhhdCBoZSBoYWQgYSBzdWZmaWNpZW50IGZvcmNlLCBoZSBkZWNsYXJlZCB3YXIsIGFuZCBBZ2VzaWxhw7xzIGdsYWRseSBhY2NlcHRlZCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGhhZCBncmVhdCBleHBlY3RhdGlvbnMgZnJvbSBoaXMgZXhwZWRpdGlvbiwgYW5kIGhlIHRob3VnaHQgaXQgd291bGQgYmUgYSBkaXNncmFjZWZ1bCB0aGluZyBpZiwgd2hlcmVhcyBYZW5vcGhvbiBhbmQgaGlzIFRlbiBUaG91c2FuZCBoYWQgcGVuZXRyYXRlZCB0byB0aGUgc2VhLCBhbmQgdmFucXVpc2hlZCB0aGUgS2luZyBqdXN0IGFzIG9mdGVuIGFzIHRoZXkgdGhlbXNlbHZlcyBkZXNpcmVkLCBoZSwgaW4gY29tbWFuZCBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIHdobyBoYWQgdGhlIHN1cHJlbWFjeSBvbiBzZWEgYW5kIGxhbmQsIHNob3VsZCBwZXJmb3JtIG5vIGRlZWQgd29ydGh5IG9mIHJlbWVtYnJhbmNlIGluIHRoZSBleWVzIG9mIHRoZSBIZWxsZW5lcy4gQXQgb25jZSwgdGhlbiwgcmVxdWl0aW5nIHRoZSBwZXJqdXJ5IG9mIFRpc2FwaGVybmVzIHdpdGggYSByaWdodGVvdXMgZGVjZXB0aW9uLCBoZSBnYXZlIG91dCB3b3JkIHRoYXQgaGUgd2FzIGdvaW5nIHRvIGxlYWQgaGlzIHRyb29wcyBhZ2FpbnN0IENhcmlhOyBidXQgd2hlbiB0aGUgQmFyYmFyaWFuIGhhZCBhc3NlbWJsZWQgaGlzIGZvcmNlcyB0aGVyZSwgaGUgc2V0IG91dCBhbmQgbWFkZSBhbiBpbmN1cnNpb24gaW50byBQaHJ5Z2lhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBjYXB0dXJlZCBtYW55IGNpdGllcyBhbmQgbWFkZSBoaW1zZWxmIG1hc3RlciBvZiBib3VuZGxlc3MgdHJlYXN1cmUsIHRodXMgc2hvd2luZyBwbGFpbmx5IHRvIGhpcyBmcmllbmRzIHRoYXQgdGhlIHZpb2xhdGlvbiBvZiBhIHRyZWF0eSBpcyBjb250ZW1wdCBmb3IgdGhlIGdvZHMsIGJ1dCB0aGF0IGluIG91dHdpdHRpbmcgb25lJ3MgZW5lbWllcyB0aGVyZSBpcyBub3Qgb25seSBqdXN0aWNlLCBidXQgYWxzbyBncmVhdCBnbG9yeSwgYW5kIHByb2ZpdCBtaXhlZCB3aXRoIHBsZWFzdXJlLiBIb3dldmVyLCBzaW5jZSBoZSB3YXMgaW5mZXJpb3IgaW4gY2F2YWxyeSBhbmQgaGlzIHNhY3JpZmljZXMgd2VyZSB1bnByb3BpdGlvdXMsIGhlIHJldGlyZWQgdG8gRXBoZXN1cyBhbmQgYmVnYW4gdG8gZ2V0IHRvZ2V0aGVyIGEgZm9yY2Ugb2YgaG9yc2VtZW4sIGNvbW1hbmRpbmcgdGhlIHdlbGwtdG8tZG8sIGluIGNhc2UgdGhleSBkaWQgbm90IHdpc2ggdG8gcGVyZm9ybSBtaWxpdGFyeSBzZXJ2aWNlIHRoZW1zZWx2ZXMsIHRvIGZ1cm5pc2ggaW5zdGVhZCBldmVyeSBtYW4gYSBob3JzZSBhbmQgcmlkZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgbWFueSB3aG8gY2hvc2UgdGhpcyBjb3Vyc2UsIGFuZCBzbyBpdCBjYW1lIHRvIHBhc3MgdGhhdCBBZ2VzaWxhw7xzIHF1aWNrbHkgaGFkIGEgbGFyZ2UgZm9yY2Ugb2Ygd2FybGlrZSBob3JzZW1lbiBpbnN0ZWFkIG9mIHdvcnRobGVzcyBtZW4tYXQtYXJtcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMTUiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDE1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBGb3IgdGhvc2Ugd2hvIGRpZCBub3Qgd2lzaCB0byBkbyBtaWxpdGFyeSBzZXJ2aWNlIGhpcmVkIHRob3NlIHdobyBkaWQsIGFuZCB0aG9zZSB3aG8gZGlkIG5vdCB3aXNoIHRvIHNlcnZlIGFzIGhvcnNlbWVuIGhpcmVkIHRob3NlIHdobyBkaWQuIEluZGVlZCwgQWdlc2lsYcO8cyB0aG91Z2h0IEFnYW1lbW5vbiBoYWQgZG9uZSB3ZWxsIGluIGFjY2VwdGluZyBhIGdvb2QgbWFyZSBhbmQgZnJlZWluZyBhIGNvd2FyZGx5IHJpY2ggbWFuIGZyb20gbWlsaXRhcnkgc2VydmljZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMjMuMjk2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPklsaWFkPC90aXRsZT4sIHh4aWlpLiAyOTYgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG9uY2Ugd2hlbiwgYnkgaGlzIG9yZGVycywgaGlzIHByaXNvbmVycyBvZiB3YXIgd2VyZSBzdHJpcHBlZCBvZiB0aGVpciBjbG90aGluZyBhbmQgb2ZmZXJlZCBmb3Igc2FsZSBieSB0aGUgdmVuZGVycyBvZiBib290eSwgdGhlaXIgY2xvdGhpbmcgZm91bmQgbWFueSBwdXJjaGFzZXJzLCBidXQgdGhlaXIgbmFrZWQgYm9kaWVzLCB3aGljaCB3ZXJlIHV0dGVybHkgd2hpdGUgYW5kIGRlbGljYXRlLCBvd2luZyB0byB0aGVpciBlZmZlbWluYXRlIGhhYml0cywgd2VyZSByaWRpY3VsZWQgYXMgdXNlbGVzcyBhbmQgd29ydGhsZXNzLiBUaGVuIEFnZXNpbGHDvHMsIG5vdGljaW5nLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXNlIGFyZSB0aGUgbWVuIHdpdGggd2hvbSB5b3UgZmlnaHQsIGFuZCB0aGVzZSB0aGUgdGhpbmdzIGZvciB3aGljaCB5b3UgZmlnaHQuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgc2Vhc29uIGFnYWluIGZhdm91cmVkIGFuIGluY3Vyc2lvbiBpbnRvIHRoZSBlbmVteSdzIGNvdW50cnksCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc3ByaW5nIG9mIDM5NSBCLkMuOyBjZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMy40LjE2IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaWlpLiA0LCAxNiBmZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQWdlc2lsYcO8cyBnYXZlIG91dCB0aGF0IGhlIHdvdWxkIG1hcmNoIGludG8gTHlkaWEsIGFuZCB0aGlzIHRpbWUgaGUgd2FzIG5vdCB0cnlpbmcgdG8gZGVjZWl2ZSBUaXNhcGhlcm5lcy4gVGhhdCBzYXRyYXAsIGhvd2V2ZXIsIHV0dGVybHkgZGVsdWRlZCBoaW1zZWxmLCBpbiB0aGF0IGhlIGRpc2JlbGlldmVkIEFnZXNpbGHDvHMgYmVjYXVzZSBvZiBoaXMgZm9ybWVyIHRyaWNrLCBhbmQgdGhvdWdodCB0aGF0IG5vdywgYXQgYW55IHJhdGUsIHRoZSBraW5nIHdvdWxkIGF0dGFjayBDYXJpYSwgYWx0aG91Z2ggaXQgd2FzIGlsbC1zdWl0ZWQgZm9yIGNhdmFscnksIGFuZCBoZSB3YXMgZmFyIGluZmVyaW9yIGluIHRoYXQgYXJtIG9mIHRoZSBzZXJ2aWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQWdlc2lsYcO8cywgYXMgaGUgaGFkIGdpdmVuIG91dCB0aGF0IGhlIHdvdWxkIGRvLCBtYXJjaGVkIGludG8gdGhlIHBsYWluIG9mIFNhcmRpcywgYW5kIHRoZW4gVGlzYXBoZXJuZXMgd2FzIGZvcmNlZCB0byBoYXN0ZW4gdGhpdGhlciBmcm9tIENhcmlhIHdpdGggYWlkIGFuZCByZWxpZWY7IGFuZCByaWRpbmcgdGhyb3VnaCB0aGUgcGxhaW4gd2l0aCBoaXMgY2F2YWxyeSwgaGUgY3V0IG9mZiBtYW55IHN0cmFnZ2xpbmcgcGx1bmRlcmVycyB0aGVyZS4gQWdlc2lsYcO8cywgYWNjb3JkaW5nbHksIHJlZmxlY3RpbmcgdGhhdCB0aGUgZW5lbXkncyBpbmZhbnRyeSBoYWQgbm90IHlldCBjb21lIHVwLCB3aGlsZSBoaXMgb3duIGZvcmNlcyB3ZXJlIGNvbXBsZXRlLCBtYWRlIGhhc3RlIHRvIGdpdmUgYmF0dGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBtaW5nbGVkIGhpcyBsaWdodC1hcm1lZCBpbmZhbnRyeSB3aXRoIGhpcyBob3JzZW1lbiwgYW5kIG9yZGVyZWQgdGhlbSB0byBjaGFyZ2UgYXQgZnVsbCBzcGVlZCBhbmQgYXNzYXVsdCB0aGUgZW5lbXksIHdoaWxlIGhlIGhpbXNlbGYgYXQgb25jZSBsZWQgdXAgaGlzIG1lbi1hdC1hcm1zLiBUaGUgQmFyYmFyaWFucyB3ZXJlIHB1dCB0byBmbGlnaHQsIGFuZCB0aGUgR3JlZWtzLCBmb2xsb3dpbmcgY2xvc2UgdXBvbiB0aGVtLCB0b29rIHRoZWlyIGNhbXAgYW5kIHNsZXcgbWFueSBvZiB0aGVtLiBBcyBhIHJlc3VsdCBvZiB0aGlzIGJhdHRsZSwgdGhlIEdyZWVrcyBjb3VsZCBub3Qgb25seSBoYXJyeSB0aGUgY291bnRyeSBvZiB0aGUgS2luZyB3aXRob3V0IGZlYXIsIGJ1dCBoYWQgdGhlIHNhdGlzZmFjdGlvbiBvZiBzZWVpbmcgZHVlIHB1bmlzaG1lbnQgaW5mbGljdGVkIHVwb24gVGlzYXBoZXJuZXMsIGFuIGFib21pbmFibGUgbWFuLCBhbmQgbW9zdCBoYXRlZnVsIHRvIHRoZSBHcmVlayByYWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIEtpbmcgYXQgb25jZSBzZW50IFRpdGhyYXVzdGVzIGFmdGVyIGhpbSwgd2hvIGN1dCBvZmYgaGlzIGhlYWQsIGFuZCBhc2tlZCBBZ2VzaWxhw7xzIHRvIG1ha2UgdGVybXMgYW5kIHNhaWwgYmFjayBob21lLCBvZmZlcmluZyBoaW0gbW9uZXkgYXQgdGhlIGhhbmRzIG9mIGVudm95cy4gQnV0IEFnZXNpbGHDvHMgYW5zd2VyZWQgdGhhdCBpdCB3YXMgZm9yIGhpcyBjaXR5IHRvIG1ha2UgcGVhY2UsIGFuZCB0aGF0IGZvciBoaXMgb3duIHBhcnQsIGhlIHRvb2sgbW9yZSBwbGVhc3VyZSBpbiBlbnJpY2hpbmcgaGlzIHNvbGRpZXJzIHRoYW4gaW4gZ2V0dGluZyByaWNoIGhpbXNlbGY7IG1vcmVvdmVyLCB0aGUgR3JlZWtzLCBoZSBzYWlkLCB0aG91Z2h0IGl0IGhvbm91cmFibGUgdG8gdGFrZSwgbm90IGdpZnRzLCBidXQgc3BvaWxzLCBmcm9tIHRoZWlyIGVuZW1pZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgZGVzaXJpbmcgdG8gZ3JhdGlmeSBUaXRocmF1c3RlcywgYmVjYXVzZSBoZSBoYWQgcHVuaXNoZWQgVGlzYXBoZXJuZXMsIHRoYXQgY29tbW9uIGVuZW15IG9mIHRoZSBHcmVla3MsIGhlIGxlZCBoaXMgYXJteSBiYWNrIGludG8gUGhyeWdpYSwgdGFraW5nIHRoaXJ0eSB0YWxlbnRzIGZyb20gdGhlIHZpY2Vyb3kgdG8gY292ZXIgdGhlIGV4cGVuc2VzIG9mIHRoZSBtYXJjaC4KCQkJPC9wPgogICAgICAgICA8cD5PbiB0aGUgcm9hZCBoZSByZWNlaXZlZCBhIGRpc3BhdGNoLXJvbGwgZnJvbSB0aGUgbWFnaXN0cmF0ZXMgYXQgaG9tZSwgd2hpY2ggYmFkZSBoaW0gYXNzdW1lIGNvbnRyb2wgb2YgdGhlIG5hdnkgYXMgd2VsbCBhcyBvZiB0aGUgYXJteS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMjciIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDI3IGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGlzIHdhcyBhbiBob25vdXIgd2hpY2ggbm8gb25lIGV2ZXIgcmVjZWl2ZWQgYnV0IEFnZXNpbGHDvHMuIEFuZCBoZSB3YXMgY29uZmVzc2VkbHkgdGhlIGdyZWF0ZXN0IGFuZCBtb3N0IGlsbHVzdHJpb3VzIG1hbiBvZiBoaXMgdGltZSwgYXMgVGhlb3BvbXB1cyBhbHNvIGhhcyBzb21ld2hlcmUgc2FpZCwgYWx0aG91Z2ggaGUgcHJpZGVkIGhpbXNlbGYgbW9yZSBvbiBoaXMgdmlydHVlcyB0aGFuIG9uIGhpcyBoaWdoIGNvbW1hbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBwdXR0aW5nIFBlaXNhbmRlciBpbiBjaGFyZ2Ugb2YgdGhlIG5hdnkgYXQgdGhpcyB0aW1lLCBoZSB3YXMgdGhvdWdodCB0byBoYXZlIG1hZGUgYSBtaXN0YWtlOyBmb3IgdGhlcmUgd2VyZSBvbGRlciBhbmQgbW9yZSBjb21wZXRlbnQgbWVuIHRvIGJlIGhhZCwgYW5kIHlldCBoZSBnYXZlIHRoZSBhZG1pcmFsdHkgdG8gaGltLCBub3Qgb3V0IG9mIHJlZ2FyZCBmb3IgdGhlIHB1YmxpYyBnb29kLCBidXQgaW4gcmVjb2duaXRpb24gb2YgdGhlIGNsYWltcyBvZiByZWxhdGlvbnNoaXAgYW5kIHRvIGdyYXRpZnkgaGlzIHdpZmUsIHdobyB3YXMgYSBzaXN0ZXIgb2YgUGVpc2FuZGVyLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIGhpbXNlbGYsIGhlIHN0YXRpb25lZCBoaXMgYXJteSBpbiB0aGUgcHJvdmluY2Ugb2YgUGhhcm5hYmF6dXMKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBmYWxsIG9mIDM5NSBCLkMuOyBjZi4gJmx0OzxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMS4xIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDEsIDEgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+LCB3aGVyZSBoZSBub3Qgb25seSBsaXZlZCBpbiB1bml2ZXJzYWwgcGxlbnR5LCBidXQgYWxzbyBhY2N1bXVsYXRlZCBtdWNoIG1vbmV5LiBIZSBhbHNvIGFkdmFuY2VkIHRvIHRoZSBjb25maW5lcyBvZiBQYXBoaWFnb25pYSBhbmQgYnJvdWdodCBDb3R5cywgdGhlIGtpbmcgb2YgdGhlIFBhcGhsYWdvbmlhbnMsIGludG8gYWxsaWFuY2Ugd2l0aCBoaW0sIGZvciBoaXMgdmlydHVlcywgYW5kIHRoZSBjb25maWRlbmNlIHdoaWNoIGhlIGluc3BpcmVkLCBpbmNsaW5lZCB0aGUga2luZyB0byBkZXNpcmUgaGlzIGZyaWVuZHNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNwaXRocmlkYXRlcyBhbHNvLCBmcm9tIHRoZSB0aW1lIHdoZW4gaGUgYWJhbmRvbmVkIFBoYXJuYWJhenVzIGFuZCBjYW1lIHRvIEFnZXNpbGHDvHMsIGFsd2F5cyBhY2NvbXBhbmllZCBoaW0gaW4gaGlzIGpvdXJuZXlzIGFuZCBleHBlZGl0aW9ucy4gU3BpdGhyaWRhdGVzIGhhZCBhIHNvbiwgYSB2ZXJ5IGJlYXV0aWZ1bCBib3ksIG5hbWVkIE1lZ2FiYXRlcywgb2Ygd2hvbSBBZ2VzaWxhw7xzIHdhcyBhcmRlbnRseSBlbmFtb3VyZWQsIGFuZCBhIGJlYXV0aWZ1bCBkYXVnaHRlciBhbHNvLCBhIG1haWRlbiBvZiBtYXJyaWFnZWFibGUgYWdlLiBUaGlzIGRhdWdodGVyIEFnZXNpbGHDvHMgcGVyc3VhZGVkIENvdHlzIHRvIG1hcnJ5LCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlbiByZWNlaXZpbmcgZnJvbSBoaW0gYSB0aG91c2FuZCBob3JzZW1lbiBhbmQgdHdvIHRob3VzYW5kIHRhcmdldGVlcnMsIGhlIHJldGlyZWQgYWdhaW4gaW50byBQaHJ5Z2lhLCBhbmQgaGFyYXNzZWQgdGhlIGNvdW50cnkgb2YgUGhhcm5hYmF6dXMsIHdobyBkaWQgbm90IHN0YW5kIGhpcyBncm91bmQgbm9yIHRydXN0IGluIGhpcyBkZWZlbmNlcywgYnV0IGFsd2F5cyBrZXB0IG1vc3Qgb2YgaGlzIHZhbHVlZCBhbmQgcHJlY2lvdXMgdGhpbmdzIHdpdGggaGltLCBhbmQgd2l0aGRyZXcgb3IgZmxlZCBmcm9tIG9uZSBwYXJ0IG9mIHRoZSBjb3VudHJ5IHRvIGFub3RoZXIsIGhhdmluZyBubyBhYmlkaW5nIHBsYWNlLiBBdCBsYXN0IFNwaXRocmlkYXRlcywgd2hvIGhhZCBuYXJyb3dseSB3YXRjaGVkIGhpbSwgaW4gY29uanVuY3Rpb24gd2l0aCBIZXJpcHBpZGFzIHRoZSBTcGFydGFuLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGxlYWRlciBvZiB0aGUgc2Vjb25kIGNvbXBhbnkgb2YgdGhpcnR5IFNwYXJ0YW4gY291bnNlbGxvcnMgc2VudCBvdXQgaW4gdGhlIHNwcmluZyBvZiAzOTUgQi5DLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMy40LjIwIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaWlpLiA0LCAyMC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gc2VpemVkIGhpcyBjYW1wIGFuZCBtYWRlIGhpbXNlbGYgbWFzdGVyIG9mIGFsbCBoaXMgdHJlYXN1cmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlLCBob3dldmVyLCBIZXJpcHBpZGFzLCB3aG8gaGFkIHRvbyBzaGFycCBhbiBleWUgdG8gdGhlIGJvb3R5IHRoYXQgd2FzIHN0b2xlbiwgYW5kIGZvcmNlZCB0aGUgQmFyYmFyaWFucyB0byByZXN0b3JlIGl0LCB3YXRjaGluZyBvdmVyIGFuZCBlbnF1aXJpbmcgaW50byBldmVyeXRoaW5nLCBleGFzcGVyYXRlZCBTcGl0aHJpZGF0ZXMsIHNvIHRoYXQgaGUgbWFyY2hlZCBvZmYgYXQgb25jZSB0byBTYXJkaXMgd2l0aCB0aGUgUGFwaGxhZ29uaWFucy4KCQkJPC9wPgogICAgICAgICA8cD5UaGlzIGlzIHNhaWQgdG8gaGF2ZSBhbm5veWVkIEFnZXNpbGHDvHMgYmV5b25kIGFsbCBlbHNlLiBGb3IgaGUgd2FzIHBhaW5lZCBhdCB0aGUgbG9zcyBvZiBhIGdhbGxhbnQgbWFuIGluIFNwaXRocmlkYXRlcywgYW5kIHdpdGggaGltIG9mIGEgY29uc2lkZXJhYmxlIGZvcmNlLCBhbmQgd2FzIGFzaGFtZWQgdG8gbGFib3VyIHVuZGVyIHRoZSBjaGFyZ2Ugb2YgcGV0dGluZXNzIGFuZCBpbGxpYmVyYWxpdHksIGZyb20gd2hpY2ggaGUgd2FzIGFsd2F5cyBhbWJpdGlvdXMgdG8ga2VlcCBub3Qgb25seSBoaW1zZWxmLCBidXQgYWxzbyBoaXMgY291bnRyeSwgcHVyZSBhbmQgZnJlZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFwYXJ0IGZyb20gdGhlc2UgbWFuaWZlc3QgcmVhc29ucywgaGUgd2FzIGlycml0YXRlZCBiZXlvbmQgbWVhc3VyZSBieSBoaXMgbG92ZSBmb3IgdGhlIGJveSwgd2hpY2ggd2FzIG5vdyBpbnN0aWxsZWQgaW50byBoaXMgaGVhcnQsIGFsdGhvdWdoIHdoZW4gdGhlIGJveSB3YXMgcHJlc2VudCBoZSB3b3VsZCBzdW1tb24gYWxsIGhpcyByZXNvbHV0aW9uIGFuZCBzdHJpdmUgbWlnaHRpbHkgdG8gYmF0dGxlIGFnYWluc3QgaGlzIGRlc2lyZXMuIEluZGVlZCwgd2hlbiBNZWdhYmF0ZXMgb25jZSBjYW1lIHVwIGFuZCBvZmZlcmVkIHRvIGVtYnJhY2UgYW5kIGtpc3MgaGltLCBoZSBkZWNsaW5lZCBoaXMgY2FyZXNzZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBib3kgd2FzIG1vcnRpZmllZCBhdCB0aGlzLCBhbmQgZGVzaXN0ZWQsIGFuZCBhZnRlcndhcmRzIGtlcHQgaGlzIGRpc3RhbmNlIHdoZW4gYWRkcmVzc2luZyBoaW0sIHdoZXJldXBvbiBBZ2VzaWxhw7xzLCBkaXN0cmVzc2VkIG5vdyBhbmQgcmVwZW50YW50IGZvciBoYXZpbmcgYXZvaWRlZCBoaXMga2lzcywgcHJldGVuZGVkIHRvIHdvbmRlciB3aGF0IGFpbGVkIE1lZ2FiYXRlcyB0aGF0IGhlIGRpZCBub3QgZ3JlZXQgaGltIHdpdGggYSBraXNzLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIHRoeSBmYXVsdCw8L3E+IHRoZSBraW5nJ3MgY29tcGFuaW9ucyBzYWlkOyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRob3UgZGlkc3Qgbm90IGFjY2VwdCwgYnV0IGRpZHN0IGRlY2xpbmUgdGhlIGZhaXIgb25lJ3Mga2lzcyBpbiBmZWFyIGFuZCB0cmVtYmxpbmc7IHlldCBldmVuIG5vdyBoZSBtaWdodCBiZSBwZXJzdWFkZWQgdG8gY29tZSB3aXRoaW4gcmFuZ2Ugb2YgdGh5IGxpcHM7IGJ1dCBzZWUgdGhhdCB0aG91IGRvc3Qgbm90IGFnYWluIHBsYXkgdGhlIGNvd2FyZC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYWZ0ZXIgc29tZSB0aW1lIHNwZW50IGluIHNpbGVudCByZWZsZWN0aW9uLCBBZ2VzaWxhw7xzIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlcmUgaXMgbm8gaGFybSBpbiB5b3VyIHBlcnN1YWRpbmcgaGltOyBmb3IgSSB0aGluayBJIHdvdWxkIG1vcmUgZ2xhZGx5IGZpZ2h0IHRoYXQgYmF0dGxlIG9mIHRoZSBraXNzIG92ZXIgYWdhaW4gdGhhbiBwb3NzZXNzIGFsbCB0aGUgZ29sZCBJIGhhdmUgZXZlciBzZWVuLjwvcT4gT2Ygc3VjaCBhIG1pbmQgd2FzIGhlIHdoaWxlIE1lZ2FiYXRlcyB3YXMgd2l0aCBoaW0sIHRob3VnaCB3aGVuIHRoZSBib3kgd2FzIGdvbmUsIGhlIHdhcyBzbyBvbiBmaXJlIHdpdGggbG92ZSBmb3IgaGltIHRoYXQgaXQgd2VyZSBoYXJkIHRvIHNheSB3aGV0aGVyLCBoYWQgdGhlIGJveSBjb21lIGJhY2sgaW50byBoaXMgcHJlc2VuY2UsIGhlIHdvdWxkIGhhdmUgaGFkIHRoZSBzdHJlbmd0aCB0byByZWZ1c2UgaGlzIGtpc3Nlcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiA1LjQiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uJ3MgPHRpdGxlPkFnZXNpbGHDvHM8L3RpdGxlPiwgdi4gNC03LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgUGhhcm5hYmF6dXMgZGVzaXJlZCB0byBoYXZlIGEgY29uZmVyZW5jZSB3aXRoIGhpbSwgYW5kIEFwb2xsb3BoYW5lcyBvZiBDeXppY3VzLCB3aG8gd2FzIGEgZ3Vlc3QtZnJpZW5kIG9mIGJvdGgsIGJyb3VnaHQgdGhlIHR3byB0b2dldGhlci4gQWdlc2lsYcO8cywgd2l0aCBoaXMgZnJpZW5kcywgY2FtZSBmaXJzdCB0byB0aGUgYXBwb2ludGVkIHBsYWNlLCBhbmQgdGhyb3dpbmcgaGltc2VsZiBkb3duIGluIGEgc2hhZHkgcGxhY2Ugd2hlcmUgdGhlIGdyYXNzIHdhcyBkZWVwLCB0aGVyZSBhd2FpdGVkIFBoYXJuYWJhenVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBQaGFybmFiYXp1cyBjYW1lLCBhbHRob3VnaCBzb2Z0IGN1c2hpb25zIGFuZCBicm9pZGVyZWQgcnVncyBoYWQgYmVlbiBzcHJlYWQgZm9yIGhpbSwgaGUgd2FzIGFzaGFtZWQgdG8gc2VlIEFnZXNpbGHDvHMgcmVjbGluaW5nIGFzIGhlIHdhcywgYW5kIHRocmV3IGhpbXNlbGYgZG93biBsaWtld2lzZSwgd2l0aG91dCBmdXJ0aGVyIGNlcmVtb255LCBvbiB0aGUgZ3Jhc3N5IGdyb3VuZCwgYWx0aG91Z2ggaGUgd2FzIGNsYWQgaW4gcmFpbWVudCBvZiB3b25kZXJmdWwgZGVsaWNhY3kgYW5kIGR5ZXMuIEFmdGVyIG11dHVhbCBzYWx1dGF0aW9ucywgUGhhcm5hYmF6dXMgaGFkIHBsZW50eSBvZiBqdXN0IGNvbXBsYWludHMgdG8gbWFrZSwgc2luY2UsIGFsdGhvdWdoIGhlIGhhZCByZW5kZXJlZCB0aGUgTGFjZWRhZW1vbmlhbnMgbWFueSBncmVhdCBzZXJ2aWNlcyBpbiB0aGVpciB3YXIgYWdhaW5zdCB0aGUgQXRoZW5pYW5zLCBoaXMgdGVycml0b3J5IHdhcyBub3cgYmVpbmcgcmF2YWdlZCBieSB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQWdlc2lsYcO8cywgc2VlaW5nIHRoZSBTcGFydGFucyB3aXRoIGhpbSBib3dlZCB0byB0aGUgZWFydGggd2l0aCBzaGFtZSBhbmQgYXQgYSBsb3NzIGZvciB3b3JkcyAoZm9yIHRoZXkgc2F3IHRoYXQgUGhhcm5hYmF6dXMgd2FzIGEgd3JvbmdlZCBtYW4pLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlLCBPIFBoYXJuYWJhenVzLCBkdXJpbmcgb3VyIGZvcm1lciBmcmllbmRzaGlwIHdpdGggdGhlIEtpbmcsIHRyZWF0ZWQgd2hhdCBiZWxvbmdzIHRvIGhpbSBpbiBhIGZyaWVuZGx5IHdheSwgYW5kIG5vdyB0aGF0IHdlIGhhdmUgYmVjb21lIGhpcyBlbmVtaWVzLCB3ZSB0cmVhdCBpdCBpbiBhIGhvc3RpbGUgd2F5LiBBY2NvcmRpbmdseSwgc2VlaW5nIHRoYXQgdGhvdSBhbHNvIGRlc2lyZXN0IHRvIGJlIG9uZSBvZiB0aGUgS2luZydzIGNoYXR0ZWxzLCB3ZSBuYXR1cmFsbHkgaW5qdXJlIGhpbSB0aHJvdWdoIHRoZWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmcm9tIHRoZSBkYXkgd2hlbiB0aG91IHNoYWx0IGRlZW0gdGh5c2VsZiB3b3J0aHkgdG8gYmUgY2FsbGVkIGEgZnJpZW5kIGFuZCBhbGx5IG9mIHRoZSBHcmVla3MgaW5zdGVhZCBvZiBhIHNsYXZlIG9mIHRoZSBLaW5nLCBjb25zaWRlciB0aGlzIGFybXksIHRoZXNlIGFybXMgYW5kIHNoaXBzLCBhbmQgYWxsIG9mIHVzLCB0byBiZSBndWFyZGlhbnMgb2YgdGh5IHBvc3Nlc3Npb25zIGFuZCBvZiB0aHkgbGliZXJ0eSwgd2l0aG91dCB3aGljaCBub3RoaW5nIGluIHRoZSB3b3JsZCBpcyBob25vdXJhYmxlIG9yIGV2ZW4gd29ydGh5IHRvIGJlIGRlc2lyZWQuPC9xPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiB0aGlzLCBQaGFybmFiYXp1cyBkZWNsYXJlZCB0byBoaW0gaGlzIHB1cnBvc2VzLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFzIGZvciBtZSwgaW5kZWVkLDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiB0aGUgS2luZyBzaGFsbCBzZW5kIG91dCBhbm90aGVyIGdlbmVyYWwgaW4gbXkgc3RlYWQsIEkgd2lsbCBiZSBvbiB5b3VyIHNpZGU7IGJ1dCBpZiBoZSBlbnRydXN0cyBtZSB3aXRoIHRoZSBjb21tYW5kLCBJIHdpbGwgc3BhcmUgbm8gZWZmb3J0cyB0byBwdW5pc2ggYW5kIGluanVyZSB5b3UgaW4gaGlzIGJlaGFsZi48L3E+IE9uIGhlYXJpbmcgdGhpcywgQWdlc2lsYcO8cyB3YXMgZGVsaWdodGVkLCBhbmQgc2FpZCwgYXMgaGUgc2VpemVkIGhpcyBoYW5kIGFuZCByb3NlIHVwIHdpdGggaGltLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gUGhhcm5hYmF6dXMsIEkgd291bGQgdGhhdCBzdWNoIGEgbWFuIGFzIHRob3UgbWlnaHQgYmUgb3VyIGZyaWVuZCByYXRoZXIgdGhhbiBvdXIgZW5lbXkuPC9xPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4xLjI4IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDEsIDI4LTM4PC9iaWJsPiwgd2hlcmUgQWdlc2lsYcO8cyBhZGRzIGEgcHJvbWlzZSB0byByZXNwZWN0LCBpbiBmdXR1cmUsIHRoZSBwcm9wZXJ0eSBvZiBQaGFybmFiYXp1cywgZXZlbiBpbiBjYXNlIG9mIHdhci48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBQaGFybmFiYXp1cyBhbmQgaGlzIGZyaWVuZHMgd2VyZSBnb2luZyBhd2F5LCBoaXMgc29uLCB3aG8gd2FzIGxlZnQgYmVoaW5kLCByYW4gdXAgdG8gQWdlc2lsYcO8cyBhbmQgc2FpZCB3aXRoIGEgc21pbGU6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBtYWtlIHRoZWUgbXkgZ3Vlc3QtZnJpZW5kLCBBZ2VzaWxhw7xzLDwvcT4gYW5kIG9mZmVyZWQgaGltIGEgamF2ZWxpbiB3aGljaCBoZSBoZWxkIGluIGhpcyBoYW5kLiBBZ2VzaWxhw7xzIGFjY2VwdGVkIGl0LCBhbmQgYmVpbmcgZGVsaWdodGVkIHdpdGggdGhlIGZhaXIgbG9va3MgYW5kIGtpbmRseSBiZWFyaW5nIG9mIHRoZSBib3ksIGxvb2tlZCByb3VuZCB1cG9uIGhpcyBjb21wYW5pb25zIHRvIHNlZSBpZiBhbnkgb25lIG9mIHRoZW0gaGFkIGFueXRoaW5nIHRoYXQgd291bGQgZG8gZm9yIGEgcmV0dXJuLWdpZnQgdG8gYSBmYWlyIGFuZCBnYWxsYW50IGZyaWVuZDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHNlZWluZyB0aGF0IHRoZSBob3JzZSBvZiBJZGFldXMsIGhpcyBzZWNyZXRhcnksIGhhZCBhIGRlY29yYXRlZCBoZWFkLWdlYXIsIGhlIHF1aWNrbHkgdG9vayB0aGlzIG9mZiBhbmQgZ2F2ZSBpdCB0byB0aGUgeW91dGguIE5vciBhZnRlcndhcmRzIGRpZCBoZSBjZWFzZSB0byByZW1lbWJlciBoaW0sIGJ1dCB3aGVuLCBhcyB0aW1lIHdlbnQgb24sIHRoZSB5b3V0aCB3YXMgcm9iYmVkIG9mIGhpcyBob21lIGJ5IGhpcyBicm90aGVycyBhbmQgZHJpdmVuIGludG8gZXhpbGUgaW4gUGVsb3Bvbm5lc3VzLCBoZSBwYWlkIGhpbSBtdWNoIGF0dGVudGlvbi4gSGUgZXZlbiBnYXZlIGhpbSBzb21lIGFzc2lzdGFuY2UgaW4gaGlzIGxvdmUgYWZmYWlycy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBQZXJzaWFuIHdhcyBlbmFtb3VyZWQgb2YgYW4gQXRoZW5pYW4gYm95LCBhbiBhdGhsZXRlLCB3aG8sIG93aW5nIHRvIGhpcyBzdGF0dXJlIGFuZCBzdHJlbmd0aCwgd2FzIGluIGRhbmdlciBvZiBiZWluZyBydWxlZCBvdXQgb2YgdGhlIGxpc3RzIGF0IE9seW1waWEuIEhlIHRoZXJlZm9yZSBoYWQgcmVjb3Vyc2UgdG8gQWdlc2lsYcO8cyB3aXRoIGVudHJlYXRpZXMgdG8gaGVscCB0aGUgYm95LCBhbmQgQWdlc2lsYcO8cywgd2lzaGluZyB0byBncmF0aWZ5IGhpbSBpbiB0aGlzIG1hdHRlciBhbHNvLCB3aXRoIHZlcnkgZ3JlYXQgZGlmZmljdWx0eSBhbmQgd2l0aCBtdWNoIHRyb3VibGUgZWZmZWN0ZWQgaGlzIGRlc2lyZXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4xLjM5IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDEsIDM5IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+SW5kZWVkLCBhbHRob3VnaCBpbiBvdGhlciBtYXR0ZXJzIGhlIHdhcyBleGFjdCBhbmQgbGF3LWFiaWRpbmcsIGluIG1hdHRlcnMgb2YgZnJpZW5kc2hpcCBoZSB0aG91Z2h0IHRoYXQgcmlnaWQganVzdGljZSB3YXMgYSBtZXJlIHByZXRleHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCB0aGVyZSBpcyBpbiBjaXJjdWxhdGlvbiBhIGxldHRlciBvZiBoaXMgdG8gSGlkcmlldXMgdGhlIENhcmlhbiwgd2hpY2ggcnVucyBhcyBmb2xsb3dzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFzIGZvciBOaWNpYXMsIGlmIGhlIGlzIGlubm9jZW50LCBhY3F1aXQgaGltOyBpZiBoZSBpcyBndWlsdHksIGFjcXVpdCBoaW0gZm9yIG15IHNha2U7IGJ1dCBpbiBhbnkgY2FzZSBhY3F1aXQgaGltLjwvcT4gU3VjaCwgdGhlbiwgd2FzIEFnZXNpbGHDvHMgaW4gbW9zdCBjYXNlcyB3aGVyZSB0aGUgaW50ZXJlc3RzIG9mIGhpcyBmcmllbmRzIHdlcmUgY29uY2VybmVkOyBidXQgc29tZXRpbWVzIGhlIHVzZWQgYSBjcml0aWNhbCBzaXR1YXRpb24gcmF0aGVyIGZvciBoaXMgb3duIGFkdmFudGFnZS4gT2YgdGhpcyBoZSBnYXZlIGFuIGluc3RhbmNlIHdoZW4sIGFzIGhlIHdhcyBkZWNhbXBpbmcgaW4gc29tZSBoYXN0ZSBhbmQgY29uZnVzaW9uLCBoZSBsZWZ0IGhpcyBmYXZvdXJpdGUgYmVoaW5kIGhpbSBzaWNrLiBUaGUgc2ljayBvbmUgYmVzb3VnaHQgaGltIGxvdWRseSBhcyBoZSB3YXMgZGVwYXJ0aW5nLCBidXQgaGUgbWVyZWx5IHR1cm5lZCBhbmQgc2FpZCB0aGF0IGl0IHdhcyBoYXJkIHRvIGJlIGNvbXBhc3Npb25hdGUgYW5kIGF0IHRoZSBzYW1lIHRpbWUgcHJ1ZGVudC4gVGhpcyBzdG9yeSBpcyByZWxhdGVkIGJ5IEhpZXJvbnltdXMgdGhlIHBoaWxvc29waGVyLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWdlc2lsYcO8cyBoYWQgbm93IGJlZW4gbmVhcmx5IHR3byB5ZWFycyBpbiB0aGUgZmllbGQsIGFuZCBtdWNoIHdhcyBzYWlkIGFib3V0IGhpbSBpbiB0aGUgaW50ZXJpb3IgcGFydHMgb2YgQXNpYSwgYW5kIGEgd29uZGVyZnVsIG9waW5pb24gb2YgaGlzIHNlbGYtcmVzdHJhaW50LCBvZiBoaXMgc2ltcGxpY2l0eSBvZiBsaWZlLCBhbmQgb2YgaGlzIG1vZGVyYXRpb24sIGV2ZXJ5d2hlcmUgcHJldmFpbGVkLiBGb3Igd2hlbiBoZSBtYWRlIGEgam91cm5leSwgaGUgd291bGQgdGFrZSB1cCBoaXMgcXVhcnRlcnMgaW4gdGhlIG1vc3Qgc2FjcmVkIHByZWNpbmN0cyBieSBoaW1zZWxmLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFnZXMuIDUuNyIgdmFsaWQ9InllcyI+WGVub3Bob24ncyA8dGl0bGU+QWdlc2lsYcO8czwvdGl0bGU+LCB2LiA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aHVzIG1ha2luZyB0aGUgZ29kcyBvdmVyc2VlcnMgYW5kIHdpdG5lc3NlcyBvZiB0aG9zZSBhY3RzIHdoaWNoIGZldyBtZW4gYXJlIHBlcm1pdHRlZCB0byBzZWUgdXMgcGVyZm9ybTsgYW5kIGFtb25nIHNvIG1hbnkgdGhvdXNhbmRzIG9mIHNvbGRpZXJzLCBvbmUgY291bGQgaGFyZGx5IGZpbmQgYSBtZWFuZXIgY291Y2ggdGhhbiB0aGF0IG9mIEFnZXNpbGHDvHM7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIHRvIGhlYXQgYW5kIGNvbGQgaGUgd2FzIGFzIGluZGlmZmVyZW50IGFzIGlmIG5hdHVyZSBoYWQgZ2l2ZW4gaGltIGFsb25lIHRoZSBwb3dlciB0byBhZGFwdCBoaW1zZWxmIHRvIHRoZSBzZWFzb25zIGFzIEdvZCBoYXMgdGVtcGVyZWQgdGhlbS4gQW5kIGl0IHdhcyBtb3N0IHBsZWFzaW5nIHRvIHRoZSBHcmVla3Mgd2hvIGR3ZWx0IGluIEFzaWEgdG8gc2VlIHRoZSBQZXJzaWFuIHZpY2Vyb3lzIGFuZCBnZW5lcmFscywgd2hvIGhhZCBsb25nIGJlZW4gaW5zdWZmZXJhYmx5IGNydWVsLCBhbmQgaGFkIHJldmVsbGVkIGluIHdlYWx0aCBhbmQgbHV4dXJ5LCBub3cgZmVhcmZ1bCBhbmQgb2JzZXF1aW91cyBiZWZvcmUgYSBtYW4gd2hvIHdlbnQgYWJvdXQgaW4gYSBwYWx0cnkgY2xvYWssIGFuZCBhdCBvbmUgYnJpZWYgYW5kIGxhY29uaWMgc3BlZWNoIGZyb20gaGltIGNvbmZvcm1pbmcgdGhlbXNlbHZlcyB0byBoaXMgd2F5cyBhbmQgY2hhbmdpbmcgdGhlaXIgZHJlc3MgYW5kIG1pZW4sIGluc29tdWNoIHRoYXQgbWFueSB3ZXJlIG1vdmVkIHRvIGNpdGUgdGhlIHdvcmRzIG9mIFRpbW90aGV1czrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+QXJlcyBpcyBMb3JkOyBvZiBnb2xkIEdyZWVjZSBoYXRoIG5vIGZlYXIuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gQmVyZ2ssIDx0aXRsZT5Qb2V0LiBMeXIuIEdyYWVjaTwvdGl0bGU+LCBpaWkuNCBwLiA2MjIuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXNpYSBiZWluZyBub3cgdW5zZXR0bGVkIGFuZCBpbiBtYW55IHF1YXJ0ZXJzIGluY2xpbmluZyB0byByZXZvbHQsIEFnZXNpbGHDvHMgc2V0IHRoZSBjaXRpZXMgdGhlcmUgaW4gb3JkZXIsIGFuZCByZXN0b3JlZCB0byB0aGVpciBnb3Zlcm5tZW50cywgd2l0aG91dCBraWxsaW5nIG9yIGJhbmlzaGluZyBhbnkgb25lLCB0aGUgcHJvcGVyIGZvcm0uIFRoZW4gaGUgZGV0ZXJtaW5lZCB0byBnbyBmYXJ0aGVyIGFmaWVsZCwgdG8gdHJhbnNmZXIgdGhlIHdhciBmcm9tIHRoZSBHcmVlayBzZWEsIHRvIGZpZ2h0IGZvciB0aGUgcGVyc29uIG9mIHRoZSBLaW5nIGFuZCB0aGUgd2VhbHRoIG9mIEVjYmF0YW5hIGFuZCBTdXNhLCBhbmQgYWJvdmUgYWxsIHRoaW5ncyB0byByb2IgdGhhdCBtb25hcmNoIG9mIHRoZSBwb3dlciB0byBzaXQgYXQgbGVpc3VyZSBvbiBoaXMgdGhyb25lLCBwbGF5aW5nIHRoZSB1bXBpcmUgZm9yIHRoZSBHcmVla3MgaW4gdGhlaXIgd2FycywgYW5kIGNvcnJ1cHRpbmcgdGhlaXIgcG9wdWxhciBsZWFkZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgdGhpcyBwb2ludCBFcGljeWRpZGFzIHRoZSBTcGFydGFuIGNhbWUgdG8gaGltIHdpdGggdGlkaW5ncyB0aGF0IFNwYXJ0YSB3YXMgaW52b2x2ZWQgaW4gYSBncmVhdCB3YXIgd2l0aCBvdGhlciBHcmVla3MsIGFuZCB0aGF0IHRoZSBlcGhvcnMgY2FsbGVkIHVwb24gaGltIGFuZCBvcmRlcmVkIGhpbSB0byBjb21lIHRvIHRoZSBhaWQgb2YgaGlzIGNvdW50cnltZW4uIAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5PIGJhcmJhcm91cyBpbGxzIGRldmlzZWQgYnkgR3JlZWtzITwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIFRyby4gNzY2IiB2YWxpZD0ieWVzIj5FdXJpcGlkZXMsIDx0aXRsZT5Ucm9hZGVzPC90aXRsZT4sIDc2NjwvYmlibD4gKEtpcmNoaG9mZikuPC9ub3RlPiBIb3cgZWxzZSBjYW4gb25lIHNwZWFrIG9mIHRoYXQgamVhbG91c3kgd2hpY2ggbm93IGxlYWd1ZWQgYW5kIGFycmF5ZWQgdGhlIEdyZWVrcyBhZ2FpbnN0IG9uZSBhbm90aGVyPyBUaGV5IGxhaWQgdmlvbGVudCBoYW5kcyBvbiBGb3J0dW5lIGluIGhlciBsb2Z0eSBmbGlnaHQsIGFuZCB0dXJuZWQgdGhlIHdlYXBvbnMgd2hpY2ggdGhyZWF0ZW5lZCB0aGUgQmFyYmFyaWFucywgYW5kIFdhciwgd2hpY2ggaGFkIGF0IGxhc3QgYmVlbiBiYW5pc2hlZCBmcm9tIEdyZWVjZSwgYmFjayBhZ2FpbiB1cG9uIHRoZW1zZWx2ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgY2VydGFpbmx5IGNhbm5vdCBhZ3JlZSB3aXRoIERlbWFyYXR1cyB0aGUgQ29yaW50aGlhbiwgd2hvIHNhaWQgdGhhdCB0aG9zZSBHcmVla3MgaGFkIG1pc3NlZCBhIGdyZWF0IHBsZWFzdXJlIHdobyBkaWQgbm90IGJlaG9sZCBBbGV4YW5kZXIgc2VhdGVkIG9uIHRoZSB0aHJvbmUgb2YgRGFyZWl1cywgbmF5LCBJIHRoaW5rIHRoYXQgc3VjaCBtaWdodCB3ZWxsIGhhdmUgc2hlZCB0ZWFycyB3aGVuIHRoZXkgcmVmbGVjdGVkIHRoYXQgdGhpcyB0cml1bXBoIHdhcyBsZWZ0IGZvciBBbGV4YW5kZXIgYW5kIE1hY2Vkb25pYW5zIGJ5IHRob3NlIHdobyBub3cgc3F1YW5kZXJlZCB0aGUgbGl2ZXMgb2YgR3JlZWsgZ2VuZXJhbHMgb24gdGhlIGZpZWxkcyBvZiBMZXVjdHJhLCBDb3JvbmVpYSwgYW5kIENvcmludGgsIGFuZCBpbiBBcmNhZGlhLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWdlc2lsYcO8cywgaG93ZXZlciwgbmV2ZXIgcGVyZm9ybWVkIGEgbm9ibGVyIG9yIGEgZ3JlYXRlciBkZWVkIHRoYW4gaW4gcmV0dXJuaW5nIGhvbWUgYXMgaGUgbm93IGRpZCwgbm9yIHdhcyB0aGVyZSBldmVyIGEgZmFpcmVyIGV4YW1wbGUgb2YgcmlnaHRlb3VzIG9iZWRpZW5jZSB0byBhdXRob3JpdHkuIEZvciBIYW5uaWJhbCwgdGhvdWdoIGhlIHdhcyBhbHJlYWR5IGluIGFuIGV2aWwgcGxpZ2h0IGFuZCBvbiB0aGUgcG9pbnQgb2YgYmVpbmcgZHJpdmVuIG91dCBvZiBJdGFseSwgY291bGQgd2l0aCB0aGUgZ3JlYXRlc3QgZGlmZmljdWx0eSBicmluZyBoaW1zZWxmIHRvIG9iZXkgaGlzIHN1bW1vbnMgdG8gdGhlIHdhciBhdCBob21lOyBhbmQgQWxleGFuZGVyIGFjdHVhbGx5IHdlbnQgc28gZmFyIGFzIHRvIGplc3Qgd2hlbiBoZSBoZWFyZCBvZiBBbnRpcGF0ZXIncyBiYXR0bGUgd2l0aCBBZ2lzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXQgTWVnYWxvcG9saXMsIGluIEFyY2FkaWEsIDMzMSBCLkMuLCBBZ2lzIGZlbGwgZmlnaHRpbmcsIGFuZCB0aGUgU3BhcnRhbiByZWJlbGxpb24gYXQgb25jZSBjb2xsYXBzZWQuIEFsZXhhbmRlciBoYWQgbm90IHRoZSBzbGlnaHRlc3QgdGhvdWdodCBvZiByZXR1cm5pbmcgaG9tZSB0byBoZWxwIEFudGlwYXRlci48L25vdGU+IHNheWluZzogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCB3b3VsZCBzZWVtLCBteSBtZW4sIHRoYXQgd2hpbGUgd2Ugd2VyZSBjb25xdWVyaW5nIERhcmVpdXMgaGVyZSwgdGhlcmUgaGFzIGJlZW4gYSBiYXR0bGUgb2YgbWljZSB0aGVyZSBpbiBBcmNhZGlhLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaHksIHRoZW4sIHNob3VsZCB3ZSBub3QgY2FsbCBTcGFydGEgaGFwcHkgaW4gdGhlIGhvbm91ciBwYWlkIHRvIGhlciBieSBBZ2VzaWxhw7xzLCBhbmQgaW4gaGlzIGRlZmVyZW5jZSB0byBoZXIgbGF3cz8gTm8gc29vbmVyIGhhZCB0aGUgZGlzcGF0Y2gtcm9sbCBjb21lIHRvIGhpbSB0aGFuIGhlIHJlbm91bmNlZCBhbmQgYWJhbmRvbmVkIHRoZSBncmVhdCBnb29kIGZvcnR1bmUgYW5kIHBvd2VyIGFscmVhZHkgaW4gaGlzIGdyYXNwLCBhbmQgdGhlIGdyZWF0IGhvcGVzIHdoaWNoIGJlY2tvbmVkIGhpbSBvbiwgYW5kIGF0IG9uY2Ugc2FpbGVkIG9mZiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndpdGggdGFzayBhbGwgdW5mdWxmaWxsZWQsPC9xPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDQuMTc1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPklsaWFkPC90aXRsZT4sIGl2LiAxNzUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGxlYXZpbmcgYmVoaW5kIGEgZ3JlYXQgeWVhcm5pbmcgZm9yIGhpbSBhbW9uZyBoaXMgYWxsaWVzLCBhbmQgZ2l2aW5nIHRoZSBzdHJvbmdlc3QgY29uZnV0YXRpb24gdG8gdGhlIHNheWluZyBvZiBFcmFzaXN0cmF0dXMgdGhlIHNvbiBvZiBQaGFlYXgsIHdobyBkZWNsYXJlZCB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIGJldHRlciBtZW4gaW4gcHVibGljIGxpZmUsIGJ1dCB0aGUgQXRoZW5pYW5zIGluIHByaXZhdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGlsZSBhcHByb3ZpbmcgaGltc2VsZiBhIG1vc3QgZXhjZWxsZW50IGtpbmcgYW5kIGdlbmVyYWwsIGhlIHNob3dlZCBoaW1zZWxmIGEgc3RpbGwgYmV0dGVyIGFuZCBtb3JlIGFncmVlYWJsZSBmcmllbmQgYW5kIGNvbXBhbmlvbiB0byB0aG9zZSB3aG8gZW5qb3llZCBoaXMgaW50aW1hY3kuIFBlcnNpYW4gY29pbnMgd2VyZSBzdGFtcGVkIHdpdGggdGhlIGZpZ3VyZSBvZiBhbiBhcmNoZXIsIGFuZCBBZ2VzaWxhw7xzIHNhaWQsIGFzIGhlIHdhcyBicmVha2luZyBjYW1wLCB0aGF0IHRoZSBLaW5nIHdhcyBkcml2aW5nIGhpbSBvdXQgb2YgQXNpYSB3aXRoIHRlbiB0aG91c2FuZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFyY2hlcnM8L3E+OyBmb3Igc28gbXVjaCBtb25leSBoYWQgYmVlbiBzZW50IHRvIEF0aGVucyBhbmQgVGhlYmVzIGFuZCBkaXN0cmlidXRlZCBhbW9uZyB0aGUgcG9wdWxhciBsZWFkZXJzIHRoZXJlLCBhbmQgYXMgYSBjb25zZXF1ZW5jZSB0aG9zZSBwZW9wbGVzIG1hZGUgd2FyIHVwb24gdGhlIFNwYXJ0YW5zLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFhlbm9waG9uICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGlpaS4gNSwgMSBmZi48L2JpYmw+KSwgUGVyc2lhbiBtb25leSB3YXMgZGlzdHJpYnV0ZWQgaW4gVGhlYmVzLCBDb3JpbnRoLCBhbmQgQXJnb3MuIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSBBdGhlbmlhbnMsIHRob3VnaCB0aGV5IHRvb2sgbm8gc2hhcmUgb2YgdGhlIGdvbGQsIHdlcmUgbm9uZSB0aGUgbGVzcyBlYWdlciBmb3Igd2FyLjwvcT4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gaGUgaGFkIGNyb3NzZWQgdGhlIEhlbGxlc3BvbnQgYW5kIHdhcyBtYXJjaGluZyB0aHJvdWdoIFRocmFjZSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFnZXNpbGHDvHMgZm9sbG93ZWQgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlIHZlcnkgcm91dGUgdGFrZW4gYnkgdGhlIEdyZWF0IEtpbmcgd2hlbiBoZSBpbnZhZGVkIEhlbGxhczwvcT4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMi44IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDIsIDg8L2JpYmw+KS48L25vdGU+IGhlIG1hZGUgbm8gcmVxdWVzdHMgb2YgYW55IG9mIHRoZSBCYXJiYXJpYW5zLCBidXQgc2VudCBlbnZveXMgdG8gZWFjaCBwZW9wbGUgYXNraW5nIHdoZXRoZXIgaGUgc2hvdWxkIHRyYXZlcnNlIHRoZWlyIGNvdW50cnkgYXMgYSBmcmllbmQgb3IgYXMgYSBmb2UuIEFsbCB0aGUgcmVzdCwgYWNjb3JkaW5nbHksIHJlY2VpdmVkIGhpbSBhcyBhIGZyaWVuZCBhbmQgYXNzaXN0ZWQgaGltIG9uIGhpcyB3YXksIGFzIHRoZXkgd2VyZSBzZXZlcmFsbHkgYWJsZTsgYnV0IHRoZSBwZW9wbGUgY2FsbGVkIFRyYWxsaWFucywgdG8gd2hvbSBldmVuIFhlcnhlcyBnYXZlIGdpZnRzLCBhcyB3ZSBhcmUgdG9sZCwgZGVtYW5kZWQgb2YgQWdlc2lsYcO8cyBhcyBhIHByaWNlIGZvciBoaXMgcGFzc2FnZSBhIGh1bmRyZWQgdGFsZW50cyBvZiBzaWx2ZXIgYW5kIGFzIG1hbnkgd29tZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSBhbnN3ZXJlZCB0aGVtIHdpdGggc2Nvcm4sIGFza2luZyB3aHksIHRoZW4sIHRoZXkgZGlkIG5vdCBjb21lIGF0IG9uY2UgdG8gZ2V0IHRoZWlyIHByaWNlOyBhbmQgbWFyY2hlZCBmb3J3YXJkLCBhbmQgZmluZGluZyB0aGVtIGRyYXduIHVwIGZvciBiYXR0bGUsIGVuZ2FnZWQgdGhlbSwgcm91dGVkIHRoZW0sIGFuZCBzbGV3IG1hbnkgb2YgdGhlbS4gSGUgc2VudCBoaXMgdXN1YWwgZW5xdWlyeSBmb3J3YXJkIHRvIHRoZSBraW5nIG9mIHRoZSBNYWNlZG9uaWFucyBhbHNvLCB3aG8gYW5zd2VyZWQgdGhhdCBoZSB3b3VsZCBkZWxpYmVyYXRlIHVwb24gaXQuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGV0IGhpbSBkZWxpYmVyYXRlLCB0aGVuLDwvcT4gc2FpZCBBZ2VzaWxhw7xzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJ1dCB3ZSB3aWxsIG1hcmNoIG9uLjwvcT4gSW4gYW1hemVtZW50IHRoZXJlZm9yZSBhdCBoaXMgYm9sZG5lc3MsIGFuZCBpbiBmZWFyLCB0aGUgTWFjZWRvbmlhbiBraW5nIGdhdmUgb3JkZXJzIHRvIGxldCBoaW0gcGFzcyBhcyBhIGZyaWVuZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UgdGhlIFRoZXNzYWxpYW5zIHdlcmUgaW4gYWxsaWFuY2Ugd2l0aCBoaXMgZW5lbWllcywgaGUgcmF2YWdlZCB0aGVpciBjb3VudHJ5LiBCdXQgdG8gdGhlIGNpdHkgb2YgTGFyaXNzYSBoZSBzZW50IFhlbm9jbGVzIGFuZCBTY3l0aGVzLCBob3BpbmcgdG8gc2VjdXJlIGl0cyBmcmllbmRzaGlwLiBIaXMgYW1iYXNzYWRvcnMsIGhvd2V2ZXIsIHdlcmUgYXJyZXN0ZWQgYW5kIGtlcHQgaW4gY2xvc2UgY3VzdG9keSwgd2hlcmV1cG9uIHRoZSByZXN0IG9mIGhpcyBjb21tYW5kIHdlcmUgaW5kaWduYW50LCBhbmQgdGhvdWdodCB0aGF0IEFnZXNpbGHDvHMgb3VnaHQgdG8gZW5jYW1wIGFib3V0IExhcmlzc2EgYW5kIGxheSBzaWVnZSB0byBpdC4gQnV0IGhlIGRlY2xhcmVkIHRoYXQgdGhlIGNhcHR1cmUgb2YgYWxsIFRoZXNzYWx5IHdvdWxkIG5vdCBjb21wZW5zYXRlIGhpbSBmb3IgdGhlIGxvc3Mgb2YgZWl0aGVyIG9uZSBvZiBoaXMgbWVuLCBhbmQgbWFkZSB0ZXJtcyB3aXRoIHRoZSBlbmVteSBpbiBvcmRlciB0byBnZXQgdGhlbSBiYWNrLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgcGVyaGFwcyB3ZSBuZWVkIG5vdCB3b25kZXIgYXQgc3VjaCBjb25kdWN0IGluIEFnZXNpbGHDvHMsIHNpbmNlIHdoZW4gaGUgbGVhcm5lZCB0aGF0IGEgZ3JlYXQgYmF0dGxlIGhhZCBiZWVuIGZvdWdodCBuZWFyIENvcmludGgsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4zOTQgQi5DLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4yLjE4IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDIsIDE4PC9iaWJsPuKAlDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMy4xIiB2YWxpZD0ieWVzIj4zLCAxIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB0aGF0IG1lbiBvZiB0aGUgaGlnaGVzdCByZXB1dGUgaGFkIHN1ZGRlbmx5IGJlZW4gdGFrZW4gb2ZmLCBhbmQgdGhhdCBhbHRob3VnaCBmZXcgU3BhcnRhbnMgYWx0b2dldGhlciBoYWQgYmVlbiBraWxsZWQsIHRoZSBsb3NzIG9mIHRoZWlyIGVuZW1pZXMgd2FzIHZlcnkgaGVhdnksIGhlIHdhcyBub3Qgc2VlbiB0byBiZSByZWpvaWNlZCBvciBlbGF0ZWQsIGJ1dCBmZXRjaGVkIGEgZGVlcCBncm9hbiBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbGFzIGZvciBIZWxsYXMsIHdoaWNoIGhhcyBieSBoZXIgb3duIGhhbmRzIGRlc3Ryb3llZCBzbyBtYW55IGJyYXZlIG1lbiEgSGFkIHRoZXkgbGl2ZWQsIHRoZXkgY291bGQgaGF2ZSBjb25xdWVyZWQgaW4gYmF0dGxlIGFsbCB0aGUgQmFyYmFyaWFucyBpbiB0aGUgd29ybGQuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gdGhlIFBoYXJzYWxpYW5zIGFubm95ZWQgaGltIGFuZCBoYXJhc3NlZCBoaXMgYXJteSwgaGUgb3JkZXJlZCBmaXZlIGh1bmRyZWQgaG9yc2VtZW4gd2hpY2ggaGUgbGVkIGluIHBlcnNvbiB0byBhdHRhY2sgdGhlbSwgcm91dGVkIHRoZW0sIGFuZCBzZXQgdXAgYSB0cm9waHkgYXQgdGhlIGZvb3Qgb2YgbW91bnQgTmFydGhhY2l1bS4gVGhpcyB2aWN0b3J5IGdhdmUgaGltIHNwZWNpYWwgcGxlYXN1cmUsIGJlY2F1c2Ugd2l0aCBob3JzZW1lbiBvZiBoaXMgb3duIG11c3RlcmluZyBhbmQgdHJhaW5pbmcsIGFuZCB3aXRoIG5vIG90aGVyIGZvcmNlLCBoZSBoYWQgY29ucXVlcmVkIHRob3NlIHdob3NlIGNoaWVmIHByaWRlIHdhcyBwbGFjZWQgaW4gdGhlaXIgY2F2YWxyeS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuOSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGl2LiAzLCA5LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSBEaXBocmlkYXMsIGFuIGVwaG9yIGZyb20gU3BhcnRhLCBtZXQgaGltLCB3aXRoIG9yZGVycyB0byBpbnZhZGUgQm9lb3RpYSBpbW1lZGlhdGVseS4gVGhlcmVmb3JlLCBhbHRob3VnaCBoZSB3YXMgcHVycG9zaW5nIHRvIGRvIHRoaXMgbGF0ZXIgd2l0aCBhIGxhcmdlciBhcm1hbWVudCwgaGUgdGhvdWdodCBpdCBkaWQgbm90IGJlaG9vdmUgaGltIHRvIGRpc29iZXkgdGhlIG1hZ2lzdHJhdGVzLCBidXQgc2FpZCB0byB0aG9zZSB3aG8gd2VyZSB3aXRoIGhpbSB0aGF0IHRoZSBkYXkgd2FzIG5lYXIgZm9yIHdoaWNoIHRoZXkgaGFkIGNvbWUgZnJvbSBBc2lhLiBIZSBhbHNvIHNlbnQgZm9yIHR3byBkaXZpc2lvbnMgb2YgdGhlIGFybXkgYXQgQ29yaW50aC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGUgTGFjZWRhZW1vbmlhbnMgYXQgaG9tZSwgd2lzaGluZyB0byBkbyBoaW0gaG9ub3VyLCBtYWRlIHByb2NsYW1hdGlvbiB0aGF0IGFueSB5b3VuZyBtYW4gd2hvIHdpc2hlZCBtaWdodCBlbmxpc3QgaW4gYWlkIG9mIHRoZSBraW5nLiBBbGwgZW5saXN0ZWQgZWFnZXJseSwgYW5kIHRoZSBtYWdpc3RyYXRlcyBjaG9zZSBvdXQgdGhlIG1vc3QgbWF0dXJlIGFuZCB2aWdvcm91cyBvZiB0aGVtIHRvIHRoZSBudW1iZXIgb2YgZmlmdHksIGFuZCBzZW50IHRoZW0gb2ZmLgoJCQk8L3A+CiAgICAgICAgIDxwPkFnZXNpbGHDvHMgbm93IG1hcmNoZWQgdGhyb3VnaCB0aGUgcGFzcyBvZiBUaGVybW9weWxhZSwgdHJhdmVyc2VkIFBob2Npcywgd2hpY2ggd2FzIGZyaWVuZGx5IHRvIFNwYXJ0YSwgZW50ZXJlZCBCb2VvdGlhLCBhbmQgZW5jYW1wZWQgbmVhciBDaGFlcm9uZWlhLiBIZXJlIGEgcGFydGlhbCBlY2xpcHNlIG9mIHRoZSBzdW4gb2NjdXJyZWQsIGFuZCBhdCB0aGUgc2FtZSB0aW1lCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdWd1c3QsIDM5NCBCLkMuPC9ub3RlPiBuZXdzIGNhbWUgdG8gaGltIG9mIHRoZSBkZWF0aCBvZiBQZWlzYW5kZXIsIHdobyB3YXMgZGVmZWF0ZWQgaW4gYSBuYXZhbCBiYXR0bGUgb2ZmIENuaWR1cyBieSBQaGFybmFiYXp1cyBhbmQgQ29ub24uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMgd2FzIG5hdHVyYWxseSBtdWNoIGRpc3RyZXNzZWQgYXQgdGhlc2UgdGlkaW5ncywgYm90aCBiZWNhdXNlIG9mIHRoZSBtYW4gdGh1cyBsb3N0LCBhbmQgb2YgdGhlIGNpdHkgd2hpY2ggaGFkIGxvc3QgaGltOyBidXQgbmV2ZXJ0aGVsZXNzLCB0aGF0IGhpcyBzb2xkaWVycyBtaWdodCBub3QgYmUgdmlzaXRlZCB3aXRoIGRlamVjdGlvbiBhbmQgZmVhciBhcyB0aGV5IHdlcmUgZ29pbmcgaW50byBiYXR0bGUsIGhlIG9yZGVyZWQgdGhlIG1lc3NlbmdlcnMgZnJvbSB0aGUgc2VhIHRvIHJldmVyc2UgdGhlaXIgdGlkaW5ncyBhbmQgc2F5IHRoYXQgdGhlIFNwYXJ0YW5zIHdlcmUgdmljdG9yaW91cyBpbiB0aGUgbmF2YWwgYmF0dGxlLiBIZSBoaW1zZWxmIGFsc28gY2FtZSBmb3J0aCBwdWJsaWNseSB3aXRoIGEgZ2FybGFuZCBvbiBoaXMgaGVhZCwgb2ZmZXJlZCBzYWNyaWZpY2VzIGZvciBnbGFkIHRpZGluZ3MsIGFuZCBzZW50IHBvcnRpb25zIG9mIHRoZSBzYWNyaWZpY2lhbCB2aWN0aW1zIHRvIGhpcyBmcmllbmRzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNvbGRpZXJzIG9mIEFnZXNpbGHDvHMgd2VyZSBjb25zZXF1ZW50bHkgdmljdG9yaW91cyBpbiBhIHNraXJtaXNoIHdpdGggdGhlIGVuZW15LCBhY2NvcmRpbmcgdG8gWGVub3Bob24gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMy4xNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGl2LiAzLCAxNDwvYmlibD4pLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGFkdmFuY2luZyBhcyBmYXIgYXMgQ29yb25laWEgYW5kIGNvbWluZyB3aXRoaW4gc2lnaHQgb2YgdGhlIGVuZW15LCBoZSBkcmV3IHVwIGhpcyBhcm15IGluIGJhdHRsZSBhcnJheSwgZ2l2aW5nIHRoZSBsZWZ0IHdpbmcgdG8gdGhlIE9yY2hvbWVuaWFucywgd2hpbGUgaGUgaGltc2VsZiBsZWQgZm9yd2FyZCB0aGUgcmlnaHQuIE9uIHRoZSBvdGhlciBzaWRlLCB0aGUgVGhlYmFucyBoZWxkIHRoZSByaWdodCB3aW5nIHRoZW1zZWx2ZXMsIGFuZCB0aGUgQXJnaXZlcyB0aGUgbGVmdC4gWGVub3Bob24gc2F5cyB0aGF0IHRoaXMgYmF0dGxlIHdhcyB1bmxpa2UgYW55IGV2ZXIgZm91Z2h0LAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMy4xNiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjE2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkhlbGxlbmljYTwvdGl0bGU+LCBpdi4gMywgMTYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBoZSB3YXMgcHJlc2VudCBoaW1zZWxmIGFuZCBmb3VnaHQgb24gdGhlIHNpZGUgb2YgQWdlc2lsYcO8cywgaGF2aW5nIGNyb3NzZWQgb3ZlciB3aXRoIGhpbSBmcm9tIEFzaWEuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gNS4zLjYiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFuYWIuIDUuMy42IiB2YWxpZD0ieWVzIj5YZW5vcGhvbidzIDx0aXRsZT5BbmFiYXNpczwvdGl0bGU+LCB2LiAzLCA2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBpbXBhY3QsIGl0IGlzIHRydWUsIGRpZCBub3QgbWVldCB3aXRoIG11Y2ggcmVzaXN0YW5jZSwgbm9yIHdhcyBpdCBsb25nIGNvbnRlc3RlZCwgYnV0IHRoZSBUaGViYW5zIHNwZWVkaWx5IHJvdXRlZCB0aGUgT3JjaG9tZW5pYW5zLCBhcyBBZ2VzaWxhw7xzIGRpZCB0aGUgQXJnaXZlcy4gQm90aCBwYXJ0aWVzLCBob3dldmVyLCBvbiBoZWFyaW5nIHRoYXQgdGhlaXIgbGVmdCB3aW5ncyB3ZXJlIG92ZXJ3aGVsbWVkIGFuZCBpbiBmbGlnaHQsIHR1cm5lZCBiYWNrLiBUaGVuLCBhbHRob3VnaCB0aGUgdmljdG9yeSBtaWdodCBoYXZlIGJlZW4gaGlzIHdpdGhvdXQgcGVyaWwgaWYgaGUgaGFkIGJlZW4gd2lsbGluZyB0byByZWZyYWluIGZyb20gYXR0YWNraW5nIHRoZSBUaGViYW5zIGluIGZyb250IGFuZCB0byBzbWl0ZSB0aGVtIGluIHRoZSByZWFyIGFmdGVyIHRoZXkgaGFkIHBhc3NlZCBieSwgQWdlc2lsYcO8cyB3YXMgY2FycmllZCBhd2F5IGJ5IHBhc3Npb24gYW5kIHRoZSBhcmRvdXIgb2YgYmF0dGxlIGFuZCBhZHZhbmNlZCBkaXJlY3RseSB1cG9uIHRoZW0sIHdpc2hpbmcgdG8gYmVhciB0aGVtIGRvd24gYnkgc2hlZXIgZm9yY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5IHJlY2VpdmVkIGhpbSB3aXRoIGEgdmlnb3VyIHRoYXQgbWF0Y2hlZCBoaXMgb3duLCBhbmQgYSBiYXR0bGUgZW5zdWVkIHdoaWNoIHdhcyBmaWVyY2UgYXQgYWxsIHBvaW50cyBpbiB0aGUgbGluZSwgYnV0IGZpZXJjZXN0IHdoZXJlIHRoZSBraW5nIGhpbXNlbGYgc3Rvb2Qgc3Vycm91bmRlZCBieSBoaXMgZmlmdHkgdm9sdW50ZWVycywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMTcuMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDE3LjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpaS4gMi48L2JpYmw+IFRoZXkgYXJlIG5vdCBtZW50aW9uZWQgYnkgWGVub3Bob24uPC9ub3RlPiB3aG9zZSBvcHBvcnR1bmUgYW5kIGVtdWxvdXMgdmFsb3VyIHNlZW1zIHRvIGhhdmUgc2F2ZWQgaGlzIGxpZmUuIEZvciB0aGV5IGZvdWdodCB3aXRoIHRoZSB1dG1vc3QgZnVyeSBhbmQgZXhwb3NlZCB0aGVpciBsaXZlcyBpbiBoaXMgYmVoYWxmLCBhbmQgdGhvdWdoIHRoZXkgd2VyZSBub3QgYWJsZSB0byBrZWVwIGhpbSBmcm9tIGJlaW5nIHdvdW5kZWQsIGJ1dCBtYW55IGJsb3dzIG9mIHNwZWFycyBhbmQgc3dvcmRzIHBpZXJjZWQgaGlzIGFybW91ciBhbmQgcmVhY2hlZCBoaXMgcGVyc29uLCB0aGV5IGRpZCBzdWNjZWVkIGluIGRyYWdnaW5nIGhpbSBvZmYgYWxpdmUsIGFuZCBzdGFuZGluZyBpbiBjbG9zZSBhcnJheSBpbiBmcm9udCBvZiBoaW0sIHRoZXkgc2xldyBtYW55IGZvZXMsIHdoaWxlIG1hbnkgb2YgdGhlaXIgb3duIG51bWJlciBmZWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UgaXQgcHJvdmVkIHRvbyBoYXJkIGEgdGFzayB0byBicmVhayB0aGUgVGhlYmFuIGZyb250LCB0aGV5IHdlcmUgZm9yY2VkIHRvIGRvIHdoYXQgYXQgdGhlIG91dHNldCB0aGV5IHdlcmUgbG90aCB0byBkby4gVGhleSBvcGVuZWQgdGhlaXIgcmFua3MgYW5kIGxldCB0aGUgZW5lbXkgcGFzcyB0aHJvdWdoLCBhbmQgdGhlbiwgd2hlbiB0aGVzZSBoYWQgZ290IGNsZWFyLCBhbmQgd2VyZSBhbHJlYWR5IG1hcmNoaW5nIGluIGxvb3NlciBhcnJheSwgdGhlIFNwYXJ0YW5zIGZvbGxvd2VkIG9uIHRoZSBydW4gYW5kIHNtb3RlIHRoZW0gb24gdGhlIGZsYW5rcy4gVGhleSBjb3VsZCBub3QsIGhvd2V2ZXIsIHB1dCB0aGVtIHRvIHJvdXQsIGJ1dCB0aGUgVGhlYmFucyB3aXRoZHJldyB0byBNb3VudCBIZWxpY29uLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJvbSB0aGUgc2xvcGVzIG9mIHdoaWNoIHRoZXkgaGFkIGFkdmFuY2VkIHRvIHRoZSBiYXR0bGUuPC9ub3RlPiBncmVhdGx5IGVsYXRlZCBvdmVyIHRoZSBiYXR0bGUsIGluIHdoaWNoLCBhcyB0aGV5IHJlYXNvbmVkLCB0aGVpciBvd24gY29udGluZ2VudCBoYWQgYmVlbiB1bmRlZmVhdGVkLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFnZXNpbGHDvHMsIGFsdGhvdWdoIGhlIHdhcyB3ZWFrZW5lZCBieSBtYW55IHdvdW5kcywgd291bGQgbm90IHJldGlyZSB0byBoaXMgdGVudCB1bnRpbCBoZSBoYWQgZmlyc3QgYmVlbiBjYXJyaWVkIHRvIGhpcyB0cm9vcHMgYW5kIHNlZW4gdGhhdCB0aGUgZGVhZCB3ZXJlIGNvbGxlY3RlZCB3aXRoaW4gdGhlIGVuY2FtcG1lbnQuIE1vcmVvdmVyLCBoZSBvcmRlcmVkIHRoYXQgYWxsIG9mIHRoZSBlbmVteSB3aG8gaGFkIHRha2VuIHJlZnVnZSBpbiB0aGUgc2FuY3R1YXJ5IHNob3VsZCBiZSBkaXNtaXNzZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgdGVtcGxlIG9mIEF0aGVuYSBJdG9uaWEgd2FzIG5lYXIgYXQgaGFuZCwgYW5kIGEgdHJvcGh5IHN0b29kIGluIGZyb250IG9mIGl0LCB3aGljaCB0aGUgQm9lb3RpYW5zIGhhZCBsb25nIGFnbyBlcmVjdGVkLCB3aGVuLCB1bmRlciB0aGUgY29tbWFuZCBvZiBTcGFydG8sIHRoZXkgaGFkIGRlZmVhdGVkIHRoZSBBdGhlbmlhbnMgdGhlcmUgYW5kIHNsYWluIFRvbG1pZGVzIHRoZWlyIGdlbmVyYWwuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA0NDcgQi5DLjsgY2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVyLiAxOC4yIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVyLiAxOC4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBlcmljbGVzPC90aXRsZT4sIHh2aWlpLiAyIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEVhcmx5IG5leHQgbW9ybmluZywgQWdlc2lsYcO8cywgd2lzaGluZyB0byB0cnkgdGhlIFRoZWJhbnMgYW5kIHNlZSB3aGV0aGVyIHRoZXkgd291bGQgZ2l2ZSBoaW0gYmF0dGxlLCBvcmRlcmVkIGhpcyBzb2xkaWVycyB0byB3cmVhdGggdGhlaXIgaGVhZHMgYW5kIGhpcyBwaXBlcnMgdG8gcGxheSB0aGVpciBwaXBlcywgd2hpbGUgYSB0cm9waHkgd2FzIHNldCB1cCBhbmQgYWRvcm5lZCBpbiB0b2tlbiBvZiB0aGVpciB2aWN0b3J5LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDYuNSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE5pYy4gNi41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk5pY2lhczwvdGl0bGU+LCB2aS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiB0aGUgZW5lbXkgc2VudCB0byBoaW0gYW5kIGFza2VkIHBlcm1pc3Npb24gdG8gdGFrZSB1cCB0aGVpciBkZWFkLCBoZSBtYWRlIGEgdHJ1Y2Ugd2l0aCB0aGVtLCBhbmQgaGF2aW5nIHRodXMgYXNzdXJlZCB0byBoaW1zZWxmIHRoZSB2aWN0b3J5LCBwcm9jZWVkZWQgdG8gRGVscGhpLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TGVhdmluZyB0aGUgYXJteSBpbiBjb21tYW5kIG9mIEd5bGlzIHRoZSBwb2xlbWFyY2ggKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMy4yMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjIxIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDMsIDIxPC9iaWJsPikuPC9ub3RlPiB3aGVyZSB0aGUgUHl0aGlhbiBnYW1lcyB3ZXJlIGluIHByb2dyZXNzLiBUaGVyZSBoZSBjZWxlYnJhdGVkIHRoZSBjdXN0b21hcnkgcHJvY2Vzc2lvbiBpbiBob25vdXIgb2YgdGhlIGdvZCwgYW5kIG9mZmVyZWQgdXAgdGhlIHRlbnRoIG9mIHRoZSBzcG9pbHMgd2hpY2ggaGUgaGFkIGJyb3VnaHQgZnJvbSBBc2lhLCBhbW91bnRpbmcgdG8gYSBodW5kcmVkIHRhbGVudHMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhlIHdlbnQgYmFjayBob21lLCB3aGVyZSBoaXMgbGlmZSBhbmQgY29uZHVjdCBicm91Z2h0IGhpbSBhdCBvbmNlIHRoZSBhZmZlY3Rpb24gYW5kIGFkbWlyYXRpb24gb2YgaGlzIGZlbGxvdy1jaXRpemVucy4gRm9yLCB1bmxpa2UgbW9zdCBvZiB0aGVpciBnZW5lcmFscywgaGUgY2FtZSBiYWNrIGZyb20gZm9yZWlnbiBwYXJ0cyB1bmNoYW5nZWQgYW5kIHVuYWZmZWN0ZWQgYnkgYWxpZW4gY3VzdG9tczsgaGUgc2hvd2VkIG5vIGRpc2xpa2UgdG93YXJkcyBob21lIGZhc2hpb25zLCBub3Igd2FzIGhlIHJlc3RpdmUgdW5kZXIgdGhlbSwgYnV0IGhvbm91cmVkIGFuZCBsb3ZlZCB3aGF0IGhlIGZvdW5kIHRoZXJlIGp1c3QgYXMgbXVjaCBhcyB0aG9zZSBkaWQgd2hvIGhhZCBuZXZlciBjcm9zc2VkIHRoZSBFdXJvdGFzOyBoZSBtYWRlIG5vIGNoYW5nZSBpbiBoaXMgdGFibGUsIG9yIGhpcyBiYXRocywgb3IgdGhlIGF0dGVuZGFuY2Ugb24gaGlzIHdpZmUsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPm9yIHRoZSBkZWNvcmF0aW9uIG9mIGhpcyBhcm1vdXIsIG9yIHRoZSBmdXJuaXR1cmUgb2YgaGlzIGhvdXNlLCBuYXksIGhlIGFjdHVhbGx5IGxldCBpdHMgZG9vcnMgcmVtYWluIGFsdGhvdWdoIHRoZXkgd2VyZSB2ZXJ5IG9sZCzigJRvbmUgbWlnaHQgc2F5IHRoZXkgd2VyZSB0aGUgdmVyeSBkb29ycyB3aGljaCBBcmlzdG9kZW11cwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGdyZWF0LWdyZWF0LWdyYW5kc29uIG9mIEhlcmFjbGVzOyBjZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gOC43IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiA4LjciIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+QWdlc2lsYcO8czwvdGl0bGU+LCB2aWlpLiA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBoYWQgc2V0IHVwLiBIaXMgZGF1Z2h0ZXIncyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmthbm5hdGhyb24sPC9xPiBhcyBYZW5vcGhvbiB0ZWxscyB1cywgd2FzIG5vIG1vcmUgZWxhYm9yYXRlIHRoYW4gdGhhdCBvZiBhbnkgb3RoZXIgbWFpZCAoCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5rYW5uYXRocmE8L3E+IGlzIHRoZSBuYW1lIHRoZXkgZ2l2ZSB0byB0aGUgd29vZGVuIGZpZ3VyZXMgb2YgZ3JpZmZpbnMgb3IgZ29hdC1zdGFncyBpbiB3aGljaCB0aGVpciB5b3VuZyBnaXJscyBhcmUgY2FycmllZCBhdCB0aGUgc2FjcmVkIHByb2Nlc3Npb25zKS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXNlIGZpZ3VyZXMgb2YgYW5pbWFscyB3ZXJlIG9uIHdoZWVscywgYW5kIHNlcnZlZCBhcyBjYXJyaWFnZXMgKGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXRoLiA0LjEzOSI+QXRoZW5hZXVzLCBwLiAxMzkgZi48L2JpYmw+KS48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+WGVub3Bob24sIGl0IGlzIHRydWUsIGhhcyBub3QgcmVjb3JkZWQgdGhlIG5hbWUgb2YgdGhlIGRhdWdodGVyIG9mIEFnZXNpbGHDvHMsIGFuZCBEaWNhY2FyY2h1cyBleHByZXNzZWQgZ3JlYXQgaW5kaWduYXRpb24gdGhhdCBuZWl0aGVyIGhlciBuYW1lIG5vciB0aGF0IG9mIHRoZSBtb3RoZXIgb2YgRXBhbWlub25kYXMgd2FzIGtub3duIHRvIHVzOyBidXQgd2UgaGF2ZSBmb3VuZCBpbiB0aGUgTGFjZWRhZW1vbmlhbiByZWNvcmRzIHRoYXQgdGhlIHdpZmUgb2YgQWdlc2lsYcO8cyB3YXMgbmFtZWQgQ2xlb3JhLCBhbmQgaGlzIGRhdWdodGVycyBFdXBvbGlhIGFuZCBQcm9hdWdhLiBBbmQgb25lIGNhbiBzZWUgaGlzIHNwZWFyIGFsc28sIHdoaWNoIGlzIHN0aWxsIHByZXNlcnZlZCBhdCBTcGFydGEsIGFuZCB3aGljaCBpcyBub3QgYXQgYWxsIGRpZmZlcmVudCBmcm9tIHRoYXQgb2Ygb3RoZXIgbWVuLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgb24gc2VlaW5nIHRoYXQgc29tZSBvZiB0aGUgY2l0aXplbnMgZXN0ZWVtZWQgdGhlbXNlbHZlcyBoaWdobHkgYW5kIHdlcmUgZ3JlYXRseSBsaWZ0ZWQgdXAgYmVjYXVzZSB0aGV5IGJyZWQgcmFjaW5nIGhvcnNlcywgaGUgcGVyc3VhZGVkIGhpcyBzaXN0ZXIgQ3luaXNjYSB0byBlbnRlciBhIGNoYXJpb3QgaW4gdGhlIGNvbnRlc3RzIGF0IE9seW1waWEsIHdpc2hpbmcgdG8gc2hvdyB0aGUgR3JlZWtzIHRoYXQgdGhlIHZpY3RvcnkgdGhlcmUgd2FzIG5vdCBhIG1hcmsgb2YgYW55IGdyZWF0IGV4Y2VsbGVuY2UsIGJ1dCBzaW1wbHkgb2Ygd2VhbHRoIGFuZCBsYXZpc2ggb3V0bGF5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbHNvLCBoYXZpbmcgWGVub3Bob24gdGhlIHBoaWxvc29waGVyIGluIGhpcyBmb2xsb3dpbmcsIGFuZCBtYWtpbmcgbXVjaCBvZiBoaW0sIGhlIG9yZGVyZWQgaGltIHRvIHNlbmQgZm9yIGhpcyBzb25zIGFuZCByZWFyIHRoZW0gYXQgU3BhcnRhLCB0aGF0IHRoZXkgbWlnaHQgbGVhcm4gdGhhdCBmYWlyZXN0IG9mIGFsbCBsZXNzb25zLCBob3cgdG8gb2JleSBhbmQgaG93IHRvIGNvbW1hbmQuIEFnYWluLCBmaW5kaW5nIGFmdGVyIEx5c2FuZGVyJ3MgZGVhdGggdGhhdCBhIGxhcmdlIHNvY2lldHkgd2FzIGluIGV4aXN0ZW5jZSwgd2hpY2ggdGhhdCBjb21tYW5kZXIsIGltbWVkaWF0ZWx5IGFmdGVyIHJldHVybmluZyBmcm9tIEFzaWEsIGhhZCBmb3JtZWQgYWdhaW5zdCBoaW0sIEFnZXNpbGHDvHMgc2V0IG91dCB0byBwcm92ZSB3aGF0IG1hbm5lciBvZiBjaXRpemVuIEx5c2FuZGVyIGhhZCBiZWVuIHdoaWxlIGFsaXZlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TbywgYWZ0ZXIgcmVhZGluZyBhIHNwZWVjaCB3aGljaCBMeXNhbmRlciBoYWQgbGVmdCBiZWhpbmQgaGltIGluIGJvb2sgZm9ybSzigJRhIHNwZWVjaCB3aGljaCBDbGVvbiBvZiBIYWxpY2FybmFzc3VzIGhhZCBjb21wb3NlZCwgYnV0IHdoaWNoIEx5c2FuZGVyIGhhZCBpbnRlbmRlZCB0byBhZG9wdCBhbmQgcHJvbm91bmNlIGJlZm9yZSB0aGUgcGVvcGxlIGluIGFkdm9jYWN5IG9mIGEgcmV2b2x1dGlvbiBhbmQgY2hhbmdlIGluIHRoZSBmb3JtIG9mIGdvdmVybm1lbnQs4oCUQWdlc2lsYcO8cyB3aXNoZWQgdG8gcHVibGlzaCBpdC4gQnV0IG9uZSBvZiB0aGUgc2VuYXRvcnMsIHdobyBoYWQgcmVhZCB0aGUgc3BlZWNoIGFuZCBmZWFyZWQgaXRzIGFiaWxpdHkgYW5kIHBvd2VyLCBhZHZpc2VkIHRoZSBraW5nIG5vdCB0byBkaWcgTHlzYW5kZXIgdXAgYWdhaW4sIGJ1dCByYXRoZXIgdG8gYnVyeSB0aGUgc3BlZWNoIHdpdGggaGltLCB0byB3aGljaCBhZHZpY2UgQWdlc2lsYcO8cyBsaXN0ZW5lZCBhbmQgaGVsZCBoaXMgcGVhY2UuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDMwLjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THlzYW5kZXI8L3RpdGxlPiwgY2hhcHRlciB4eHguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFzIGZvciB0aG9zZSB3aG8gd2VyZSBpbiBvcHBvc2l0aW9uIHRvIGhpbSwgaGUgd291bGQgZG8gdGhlbSBubyBvcGVuIGluanVyeSwgYnV0IHdvdWxkIGV4ZXJ0IGhpbXNlbGYgdG8gc2VuZCBzb21lIG9mIHRoZW0gYXdheSBmcm9tIHRpbWUgdG8gdGltZSBhcyBnZW5lcmFscyBhbmQgY29tbWFuZGVycywgYW5kIHdvdWxkIHNob3cgdGhlbSB1cCBpZiB0aGV5IHByb3ZlZCBiYXNlIGFuZCBncmFzcGluZyBpbiB0aGVpciBleGVyY2lzZSBvZiBhdXRob3JpdHk7IHRoZW4sIGNvbnRyYXJpd2lzZSwgd2hlbiB0aGV5IHdlcmUgYnJvdWdodCB0byB0cmlhbCwgaGUgd291bGQgY29tZSB0byB0aGVpciBhaWQgYW5kIGV4ZXJ0IGhpbXNlbGYgaW4gdGhlaXIgYmVoYWxmLCBhbmQgc28gd291bGQgbWFrZSB0aGVtIGZyaWVuZHMgaW5zdGVhZCBvZiBlbmVtaWVzLCBhbmQgYnJpbmcgdGhlbSBvdmVyIHRvIGhpcyBzaWRlLCBzbyB0aGF0IG5vIG9uZSB3YXMgbGVmdCB0byBvcHBvc2UgaGltLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEFnZXNpcG9saXMsIHRoZSBvdGhlciBraW5nLCBzaW5jZSBoZSB3YXMgdGhlIHNvbiBvZiBhbiBleGlsZSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBhdXNhbmlhcywgd2hvIHdhcyBpbXBlYWNoZWQgaW4gMzk1IEIuQy4sIHdlbnQgaW50byB2b2x1bnRhcnkgZXhpbGUsIGFuZCB3YXMgY29uZGVtbmVkIHRvIGRlYXRoLjwvbm90ZT4gaW4geWVhcnMgYSBtZXJlIHN0cmlwbGluZywgYW5kIGJ5IG5hdHVyZSBnZW50bGUgYW5kIHF1aWV0LCB0b29rIGxpdHRsZSBwYXJ0IGluIGFmZmFpcnMgb2Ygc3RhdGUuIEFuZCB5ZXQgaGUgdG9vIHdhcyBicm91Z2h0IHVuZGVyIHRoZSBzd2F5IG9mIEFnZXNpbGHDvHMuIEZvciB0aGUgU3BhcnRhbiBraW5ncyBlYXQgdG9nZXRoZXIgaW4gdGhlIHNhbWUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waGlkaXRpdW0sPC9xPiBvciBwdWJsaWMgbWVzcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTIuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MeWN1cmd1czwvdGl0bGU+LCB4aWkuIDEgPC9iaWJsPmYuPC9ub3RlPiB3aGVuZXZlciB0aGV5IGFyZSBhdCBob21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwga25vd2luZyB0aGF0IEFnZXNpcG9saXMgd2FzIHByb25lIHRvIGxvdmUgYWZmYWlycywganVzdCBhcyBoZSB3YXMgaGltc2VsZiwgQWdlc2lsYcO8cyB3b3VsZCBhbHdheXMgaW50cm9kdWNlIHNvbWUgZGlzY291cnNlIGFib3V0IHRoZSBib3lzIHdobyB3ZXJlIG9mIGFuIGFnZSB0byBsb3ZlLiBIZSB3b3VsZCBldmVuIGxlYWQgdGhlIHlvdW5nIGtpbmcncyBmYW5jeSB0b3dhcmQgdGhlIG9iamVjdCBvZiBoaXMgb3duIGFmZmVjdGlvbnMsIGFuZCBzaGFyZSB3aXRoIGhpbSBpbiB3b29pbmcgYW5kIGxvdmluZywgdGhlc2UgU3BhcnRhbiBsb3ZlcyBoYXZpbmcgbm90aGluZyBzaGFtZWZ1bCBpbiB0aGVtLCBidXQgYmVpbmcgYXR0ZW5kZWQgcmF0aGVyIHdpdGggZ3JlYXQgbW9kZXN0eSwgaGlnaCBhbWJpdGlvbiwgYW5kIGFuIGFyZGVudCBkZXNpcmUgZm9yIGV4Y2VsbGVuY2UsIGFzIEkgaGF2ZSB3cml0dGVuIGluIG15IGxpZmUgb2YgTHljdXJndXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTcuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTcuMSIgdmFsaWQ9InllcyI+Q2hhcHRlcnMgeHZpaS4gMTwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE4LjQiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE4LjQiIHZhbGlkPSJ5ZXMiPnh2aWlpLiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIHRodXMgb2J0YWluZWQgdmVyeSBncmVhdCBpbmZsdWVuY2UgaW4gdGhlIGNpdHksIGhlIGVmZmVjdGVkIHRoZSBhcHBvaW50bWVudCBvZiBUZWxldXRpYXMsIGhpcyBoYWxmLWJyb3RoZXIgb24gaGlzIG1vdGhlcidzIHNpZGUsIGFzIGFkbWlyYWwuIFRoZW4gaGUgbGVkIGFuIGFybXkgdG8gQ29yaW50aCwgYW5kIGhpbXNlbGYsIGJ5IGxhbmQsIGNhcHR1cmVkIHRoZSBsb25nIHdhbGxzLCB3aGlsZSBUZWxldXRpYXMsIHdpdGggaGlzIGZsZWV0LCBzZWl6ZWQgdGhlIGVuZW15J3Mgc2hpcHMgYW5kIGRvY2t5YXJkcy4gVGhlbiBjb21pbmcgc3VkZGVubHkgdXBvbiB0aGUgQXJnaXZlcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIGNvbmZ1c2VzIHRoZSBleHBlZGl0aW9uIG9mIDM5MyBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjQuMTkiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNC4xOSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGl2LiA0LiAxOTwvYmlibD4pIHdpdGggdGhhdCBvZiAzOTAgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS4xIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDUsIDEgZmYuPC9iaWJsPikuPC9ub3RlPiB3aG8gYXQgdGhhdCB0aW1lIGhlbGQgQ29yaW50aCwgYW5kIHdlcmUgY2VsZWJyYXRpbmcgdGhlIElzdGhtaWFuIGdhbWVzLCBoZSBkcm92ZSB0aGVtIGF3YXkganVzdCBhcyB0aGV5IGhhZCBzYWNyaWZpY2VkIHRvIHRoZSBnb2QsIGFuZCBtYWRlIHRoZW0gYWJhbmRvbiBhbGwgdGhlaXIgZXF1aXBtZW50IGZvciB0aGUgZmVzdGl2YWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMsIHRoZSBleGlsZXMgZnJvbSBDb3JpbnRoIHdobyB3ZXJlIGluIGhpcyBhcm15IGJlZ2dlZCBoaW0gdG8gaG9sZCB0aGUgZ2FtZXMuIFRoaXMsIGhvd2V2ZXIsIGhlIHdvdWxkIG5vdCBkbywgYnV0IHJlbWFpbmVkIGF0IGhhbmQgd2hpbGUgdGhleSBoZWxkIHRoZSBnYW1lcyBmcm9tIGJlZ2lubmluZyB0byBlbmQsIGFuZCBhZmZvcmRlZCB0aGVtIHNlY3VyaXR5LiBBZnRlcndhcmRzLCB3aGVuIGhlIGhhZCBkZXBhcnRlZCwgdGhlIElzdGhtaWFuIGdhbWVzIHdlcmUgaGVsZCBhZnJlc2ggYnkgdGhlIEFyZ2l2ZXMsIGFuZCBzb21lIGNvbnRlc3RhbnRzIHdvbiB0aGVpciB2aWN0b3JpZXMgYSBzZWNvbmQgdGltZSwgd2hpbGUgc29tZSB3ZXJlIGVudGVyZWQgaW4gdGhlIGxpc3RzIGFzIHZpY3RvcnMgaW4gdGhlIGZpcnN0IGNvbnRlc3RzLCBidXQgYXMgdmFucXVpc2hlZCBpbiB0aGUgc2Vjb25kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIG1hdHRlciBBZ2VzaWxhw7xzIGRlY2xhcmVkIHRoYXQgdGhlIEFyZ2l2ZXMgaGFkIGJyb3VnaHQgZG93biB1cG9uIHRoZW1zZWx2ZXMgdGhlIGNoYXJnZSBvZiBncmVhdCBjb3dhcmRpY2UsIHNpbmNlIHRoZXkgcmVnYXJkZWQgdGhlIGNvbmR1Y3Qgb2YgdGhlIGdhbWVzIGFzIHNvIGdyZWF0IGFuZCBhdWd1c3QgYSBwcml2aWxlZ2UsIGFuZCB5ZXQgaGFkIG5vdCB0aGUgY291cmFnZSB0byBmaWdodCBmb3IgaXQuIEhlIGhpbXNlbGYgdGhvdWdodCB0aGF0IG1vZGVyYXRpb24gb3VnaHQgdG8gYmUgb2JzZXJ2ZWQgaW4gYWxsIHRoZXNlIG1hdHRlcnMsIGFuZCBzb3VnaHQgdG8gaW1wcm92ZSB0aGUgbG9jYWwgY2hvaXJzIGFuZCBnYW1lcy4gVGhlc2UgaGUgYWx3YXlzIGF0dGVuZGVkLCBmdWxsIG9mIGFtYml0aW91cyBhcmRvdXIsIGFuZCB3YXMgYWJzZW50IGZyb20gbm8gY29udGVzdCBpbiB3aGljaCBlaXRoZXIgYm95cyBvciBnaXJscyBjb21wZXRlZC4gVGhvc2UgdGhpbmdzLCBob3dldmVyLCBmb3Igd2hpY2ggaGUgc2F3IHRoZSByZXN0IG9mIHRoZSB3b3JsZCBmaWxsZWQgd2l0aCBhZG1pcmF0aW9uLCBoZSBhcHBlYXJlZCBub3QgZXZlbiB0byByZWNvZ25pemUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uY2UgdXBvbiBhIHRpbWUgQ2FsbGlwaWRlcyB0aGUgdHJhZ2ljIGFjdG9yLCB3aG8gaGFkIGEgbmFtZSBhbmQgZmFtZSBhbW9uZyB0aGUgR3JlZWtzIGFuZCB3YXMgZWFnZXJseSBjb3VydGVkIGJ5IGFsbCwgZmlyc3QgbWV0IGhpbSBhbmQgYWRkcmVzc2VkIGhpbSwgdGhlbiBwb21wb3VzbHkgdGhydXN0IGhpbXNlbGYgaW50byBoaXMgY29tcGFueSBvZiBhdHRlbmRhbnRzLCBzaG93aW5nIHBsYWlubHkgdGhhdCBoZSBleHBlY3RlZCB0aGUga2luZyB0byBtYWtlIGhpbSBzb21lIGZyaWVuZGx5IG92ZXJ0dXJlcywgYW5kIGZpbmFsbHkgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Eb3N0IHRob3Ugbm90IHJlY29nbml6ZSBtZSwgTyBLaW5nPzwvcT4gVGhlIGtpbmcgZml4ZWQgaGlzIGV5ZXMgdXBvbiBoaW0gYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVhLCBhcnQgdGhvdSBub3QgQ2FsbGlwaWRlcyB0aGUgYnVmZm9vbj88L3E+IEZvciB0aGlzIGlzIGhvdyB0aGUgTGFjZWRhZW1vbmlhbnMgZGVzY3JpYmUgYWN0b3JzLiBBbmQgYWdhaW4sIHdoZW4gaGUgd2FzIGludml0ZWQgdG8gaGVhciB0aGUgbWFuIHdobyBpbWl0YXRlZCB0aGUgbmlnaHRpbmdhbGUsIGhlIGRlY2xpbmVkLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoYXZlIGhlYXJkIHRoZSBiaXJkIGhlcnNlbGYuPC9xPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDIwLjUiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDIwLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THljdXJndXM8L3RpdGxlPiwgeHguIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIE1lbmVjcmF0ZXMgdGhlIHBoeXNpY2lhbiwgd2hvLCBmb3IgaGlzIHN1Y2Nlc3MgaW4gY2VydGFpbiBkZXNwZXJhdGUgY2FzZXMsIGhhZCByZWNlaXZlZCB0aGUgc3VybmFtZSBvZiBaZXVzLCBhbmQgaGFkIHRoZSBoYWQgdGFzdGUgdG8gZW1wbG95IHRoZSBhcHBlbGxhdGlvbiwgYWN0dWFsbHkgZGFyZWQgdG8gd3JpdGUgdGhlIGtpbmcgYSBsZXR0ZXIgYmVnaW5uaW5nIHRodXM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWVuZWNyYXRlcyBaZXVzLCB0byBLaW5nIEFnZXNpbGHDvHMsIGdyZWV0aW5nLjwvcT4gVG8gdGhpcyBBZ2VzaWxhw7xzIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+S2luZyBBZ2VzaWxhw7xzLCB0byBNZW5lY3JhdGVzLCBoZWFsdGggYW5kIHNhbml0eS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBoZSB3YXMgbGluZ2VyaW5nIGluIHRoZSB0ZXJyaXRvcnkgb2YgQ29yaW50aCwgaGUgc2VpemVkIHRoZSBIZXJhZXVtLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHJlZnVnZWVzIGluIHRoZSBIZXJhZXVtIGNhbWUgb3V0IGFuZCBzdXJyZW5kZXJlZCBvZiB0aGVpciBvd24gYWNjb3JkICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjUuNSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjUiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gNSwgNTwvYmlibD4pLjwvbm90ZT4gYW5kIGFzIGhlIHdhcyB3YXRjaGluZyBoaXMgc29sZGllcnMgY2Fycnkgb2ZmIHRoZSBwcmlzb25lcnMgYW5kIGJvb3R5LCBtZXNzZW5nZXJzIGNhbWUgZnJvbSBUaGViZXMgdG8gdHJlYXQgZm9yIHBlYWNlLiBCdXQgaGUgaGFkIGFsd2F5cyBoYXRlZCB0aGF0IGNpdHksIGFuZCB0aGlua2luZyB0aGlzIGFuIGFkdmFudGFnZW91cyB0aW1lIGFsc28gZm9yIGluc3VsdGluZyBpdCwgcHJldGVuZGVkIG5laXRoZXIgdG8gc2VlIG5vciBoZWFyIGl0cyBhbWJhc3NhZG9ycyB3aGVuIHRoZXkgcHJlc2VudGVkIHRoZW1zZWx2ZXMuIEJ1dCBoaXMgcHJpZGUgc29vbiBoYWQgYSBmYWxsOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgdGhlIFRoZWJhbnMgaGFkIG5vdCB5ZXQgZGVwYXJ0ZWQgd2hlbiBtZXNzZW5nZXJzIGNhbWUgdG8gaGltIHdpdGggdGlkaW5ncyB0aGF0IHRoZSBTcGFydGFuIGRpdmlzaW9uIGhhZCBiZWVuIGN1dCB0byBwaWVjZXMgYnkgSXBoaWNyYXRlcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IExlY2hhZXVtIHRoZSBwb3J0IG9mIENvcmludGggb24gdGhlIENvcmludGhpYW4gZ3VsZiBpbiAzOTAgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjExIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjUuMTEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gNSwgMTEtMTg8L2JpYmw+KS48L25vdGU+IFRoaXMgd2FzIHRoZSBncmVhdGVzdCBkaXNhc3RlciB0aGF0IGhhZCBoYXBwZW5lZCB0byB0aGUgU3BhcnRhbnMgaW4gYSBsb25nIHRpbWU7IGZvciB0aGV5IGxvc3QgbWFueSBicmF2ZSBtZW4sIGFuZCB0aG9zZSBtZW4gd2VyZSBvdmVyd2hlbG1lZCBieSB0YXJnZXRlZXJzIGFuZCBtZXJjZW5hcmllcywgdGhvdWdoIHRoZXkgd2VyZSBtZW4tYXQtYXJtcyBhbmQgTGFjZWRhZW1vbmlhbnMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BdCBvbmNlLCB0aGVuLCBBZ2VzaWxhw7xzIHNwcmFuZyB1cCB0byBnbyB0byB0aGVpciBhc3Npc3RhbmNlLCBidXQgd2hlbiBoZSBsZWFybmVkIHRoYXQgaXQgd2FzIGFsbCBvdmVyIHdpdGggdGhlbSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkhlIGhhZCBtYXJjaGVkIHRpbGwgaGUgd2FzIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndlbGwgd2l0aGluIHRoZSBwbGF0ZWF1IG9mIExlY2hhZXVtPC9xPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjgiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS44IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDUsIDg8L2JpYmw+KS48L25vdGU+IGhlIGNhbWUgYmFjayBhZ2FpbiB0byB0aGUgSGVyYWV1bSwgYW5kIG9yZGVyaW5nIHRoZSBCb2VvdGlhbnMgdGhlbiB0byBjb21lIGJlZm9yZSBoaW0sIGdhdmUgdGhlbSBhbiBhdWRpZW5jZS4gQnV0IHRoZXkgcmV0dXJuZWQgaGlzIGluc29sZW5jZSBieSBtYWtpbmcgbm8gbWVudGlvbiBvZiBwZWFjZSwgYnV0IHNpbXBseSBhc2tpbmcgc2FmZSBjb25kdWN0IGludG8gQ29yaW50aC4gQWdlc2lsYcO8cyB3YXMgd3JvdGggYXQgdGhpcywgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYgeW91IHdpc2ggdG8gc2VlIHlvdXIgZnJpZW5kcyB3aGVuIHRoZXkgYXJlIGVsYXRlZCBhdCB0aGVpciBzdWNjZXNzZXMsIHlvdSBjYW4gZG8gc28gdG9tb3Jyb3cgaW4gYWxsIHNhZmV0eS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRha2luZyB0aGVtIGFsb25nIHdpdGggaGltIG9uIHRoZSBuZXh0IGRheSwgaGUgcmF2YWdlZCB0aGUgdGVycml0b3J5IG9mIHRoZSBDb3JpbnRoaWFucywgYW5kIGFkdmFuY2VkIHRvIHRoZSB2ZXJ5IGdhdGVzIG9mIHRoZSBjaXR5LiBBZnRlciBoZSBoYWQgdGh1cyBwcm92ZWQgdGhhdCB0aGUgQ29yaW50aGlhbnMgZGlkIG5vdCBkYXJlIHRvIHJlc2lzdCBoaW0sIGhlIGRpc21pc3NlZCB0aGUgZW1iYXNzeS4gVGhlbiBoZSBoaW1zZWxmLCBwaWNraW5nIHVwIHRoZSBzdXJ2aXZvcnMgb2YgdGhlIGRpdmlzaW9uIHRoYXQgaGFkIGJlZW4gY3V0IHRvIHBpZWNlcywgbGVkIHRoZW0gYmFjayB0byBTcGFydGEsIGFsd2F5cyBicmVha2luZyBjYW1wIGJlZm9yZSBpdCB3YXMgZGF5LCBhbmQgcGl0Y2hpbmcgdGhlIG5leHQgY2FtcCBhZnRlciBpdCB3YXMgZGFyaywgaW4gb3JkZXIgdGhhdCB0aGUgaGF0ZWZ1bCBhbmQgbWFsaWNpb3VzIEFyY2FkaWFucyBtaWdodCBub3QgZXh1bHQgb3ZlciB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdG8gZ3JhdGlmeSB0aGUgQWNoYWVhbnMsIGhlIGNyb3NzZWQgb3ZlciB3aXRoIHRoZW0gb24gYW4gZXhwZWRpdGlvbiBpbnRvIEFjYXJuYW5pYSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM5MC0zODkgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC42LjMiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNi4zIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDYsIDM8L2JpYmw+4oCUPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC43LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNy4xIiB2YWxpZD0ieWVzIj43LCAxPC9iaWJsPikuPC9ub3RlPiB3aGVyZSBoZSBkcm92ZSBhd2F5IG11Y2ggYm9vdHkgYW5kIGNvbnF1ZXJlZCB0aGUgQWNhcm5hbmlhbnMgaW4gYmF0dGxlLiBCdXQgd2hlbiB0aGUgQWNoYWVhbnMgYXNrZWQgaGltIHRvIHNwZW5kIHRoZSB3aW50ZXIgdGhlcmUgaW4gb3JkZXIgdG8gcHJldmVudCB0aGUgZW5lbXkgZnJvbSBzb3dpbmcgdGhlaXIgZmllbGRzLCBoZSBzYWlkIGhlIHdvdWxkIGRvIHRoZSBvcHBvc2l0ZSBvZiB0aGlzOyBmb3IgdGhlIGVuZW15IHdvdWxkIGRyZWFkIHRoZSB3YXIgbW9yZSBpZiB0aGVpciBsYW5kIHdhcyBzb3duIHdoZW4gc3VtbWVyIGNhbWUuIEFuZCB0aGlzIHByb3ZlZCB0cnVlOyBmb3Igd2hlbiBhIHNlY29uZCBleHBlZGl0aW9uIGFnYWluc3QgdGhlbSB3YXMgYW5ub3VuY2VkLCB0aGV5IGNhbWUgdG8gdGVybXMgd2l0aCB0aGUgQWNoYWVhbnMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENvbm9uIGFuZCBQaGFybmFiYXp1cyB3aXRoIHRoZSBHcmVhdCBLaW5nJ3MgZmxlZXQgd2VyZSBtYXN0ZXJzIG9mIHRoZSBzZWEgYW5kIHdlcmUgcmF2YWdpbmcgdGhlIGNvYXN0cyBvZiBMYWNvbmlhLCBhbmQgYWZ0ZXIgdGhlIHdhbGxzIG9mIEF0aGVucyBoYWQgYmVlbiByZWJ1aWx0IHdpdGggdGhlIG1vbmV5IHdoaWNoIFBoYXJuYWJhenVzIGZ1cm5pc2hlZCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM5MyBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjguMTAiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuOC4xMCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGl2LiA4LDEwPC9iaWJsPikuPC9ub3RlPiB0aGUgTGFjZWRhZW1vbmlhbnMgZGVjaWRlZCB0byBtYWtlIHBlYWNlIHdpdGggdGhlIGtpbmcgb2YgUGVyc2lhLiBUbyB0aGF0IGVuZCwgdGhleSBzZW50IEFudGFsY2lkYXMgdG8gVGlyaWJhenVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIEdyZWF0IEtpbmcncyBzYXRyYXAgaW4gV2VzdGVybiBBc2lhLjwvbm90ZT4gYW5kIGluIHRoZSBtb3N0IHNoYW1lZnVsIGFuZCBsYXdsZXNzIGZhc2hpb24gaGFuZGVkIG92ZXIgdG8gdGhlIEtpbmcgdGhlIEdyZWVrcyByZXNpZGVudCBpbiBBc2lhLCBpbiB3aG9zZSBiZWhhbGYgQWdlc2lsYcO8cyBoYWQgd2FnZWQgd2FyLiBBZ2VzaWxhw7xzLCB0aGVyZWZvcmUsIGNvdWxkIGhhdmUgaGFkIG5vIHBhcnQgYXQgYWxsIGluIHRoaXMgaW5mYW15LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgQW50YWxjaWRhcyB3YXMgaGlzIGVuZW15LCBhbmQgcHV0IGZvcnRoIGFsbCBoaXMgZWZmb3J0cyB0byBtYWtlIHRoZSBwZWFjZSBiZWNhdXNlIGhlIHNhdyB0aGF0IHRoZSB3YXIgZW5oYW5jZWQgdG8gdGhlIHV0bW9zdCB0aGUgcmVwdXRhdGlvbiBhbmQgcG93ZXIgb2YgQWdlc2lsYcO8cy4gTm90d2l0aHN0YW5kaW5nIHRoaXMsIHRvIG9uZSB3aG8gcmVtYXJrZWQgdGhhdCB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBmYXZvdXJpbmcgdGhlIE1lZGVzLCBBZ2VzaWxhw7xzIHJlcGxpZWQgdGhhdCB0aGUgTWVkZXMgd2VyZSB0aGUgcmF0aGVyIGZhdm91cmluZyB0aGUgTGFjZWRhZW1vbmlhbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBieSB0aHJlYXRlbmluZyB3aXRoIHdhciB0aGUgR3JlZWtzIHdobyB3ZXJlIHVud2lsbGluZyB0byBhY2NlcHQgdGhlIHBlYWNlLCBoZSBmb3JjZWQgdGhlbSBhbGwgdG8gYWJpZGUgYnkgdGhlIHRlcm1zIHdoaWNoIHRoZSBQZXJzaWFuIGRpY3RhdGVkLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHBlYWNlIG9mIEFudGFsY2lkYXMgd2FzIHJhdGlmaWVkIGJ5IGFsbCB0aGUgR3JlZWsgc3RhdGVzIGV4Y2VwdCBUaGViZXMgaW4gMzg3IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuMS4yOSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4xLjI5IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdi4gMSwgMjkgZmYuPC9iaWJsPikuPC9ub3RlPiBtb3JlIGVzcGVjaWFsbHkgb24gYWNjb3VudCBvZiB0aGUgVGhlYmFucywgaGlzIG9iamVjdCBiZWluZyB0byBtYWtlIHRoZW0gd2Vha2VyIGJ5IGxlYXZpbmcgQm9lb3RpYSBpbmRlcGVuZGVudCBvZiBUaGViZXMuIFRoaXMgaGUgbWFkZSBjbGVhciBieSBoaXMgc3Vic2VxdWVudCBiZWhhdmlvdXIuIEZvciB3aGVuIFBob2ViaWRhcyBjb21taXR0ZWQgdGhlIGZvdWwgZGVlZCBvZiBzZWl6aW5nIHRoZSBDYWRtZWlhCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgY2l0YWRlbCBvZiBUaGViZXMuIEl0IHdhcyBzZWl6ZWQgYnkgUGhvZWJpZGFzIGluIDM4MyBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjIuMjYiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuMi4yNiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHYuIDIsIDI2IGZmLjwvYmlibD4pLjwvbm90ZT4gaW4gYSB0aW1lIG9mIHBlcmZlY3QgcGVhY2UsIGFuZCBhbGwgdGhlIEdyZWVrcyB3ZXJlIGluZGlnbmFudCBhbmQgdGhlIFNwYXJ0YW5zIGRpc3BsZWFzZWQgYXQgdGhlIGFjdCwgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdoZW4gZXNwZWNpYWxseSB0aG9zZSB3aG8gd2VyZSBhdCB2YXJpYW5jZSB3aXRoIEFnZXNpbGHDvHMgYW5ncmlseSBhc2tlZCBQaG9lYmlkYXMgYnkgd2hvc2UgY29tbWFuZCBoZSBoYWQgZG9uZSB0aGlzIHRoaW5nLCB0aGVyZWJ5IHR1cm5pbmcgc3VzcGljaW9uIHVwb24gQWdlc2lsYcO8cywgaGUgZGlkIG5vdCBzY3J1cGxlIHRvIGNvbWUgdG8gdGhlIGhlbHAgb2YgUGhvZWJpZGFzLCBhbmQgdG8gc2F5IG9wZW5seSB0aGF0IHRoZXkgbXVzdCBjb25zaWRlciB3aGV0aGVyIHRoZSBhY3QgaXRzZWxmIHdhcyBzZXJ2aWNlYWJsZSBvciBub3Q7IGZvciB0aGF0IHdoaWNoIHdhcyBhZHZhbnRhZ2VvdXMgdG8gU3BhcnRhIG1pZ2h0IHdlbGwgYmUgZG9uZSBpbmRlcGVuZGVudGx5LCBldmVuIGlmIG5vIG9uZSBvcmRlcmVkIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGluIGhpcyBkaXNjb3Vyc2UgaGUgd2FzIGFsd2F5cyBkZWNsYXJpbmcgdGhhdCBqdXN0aWNlIHdhcyB0aGUgZmlyc3Qgb2YgdGhlIHZpcnR1ZXM7IGZvciB2YWxvdXIgd2FzIG9mIG5vIHVzZSB1bmxlc3MganVzdGljZSBhdHRlbmRlZCBpdCwgYW5kIGlmIGFsbCBtZW4gc2hvdWxkIGJlIGp1c3QsIHRoZXJlIHdvdWxkIGJlIG5vIG5lZWQgb2YgdmFsb3VyLiBBbmQgdG8gdGhvc2Ugd2hvIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBpcyB0aGUgcGxlYXN1cmUgb2YgdGhlIEdyZWF0IEtpbmcsPC9xPiBoZSB3b3VsZCBzYXksIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SG93IGlzIGhlIGdyZWF0ZXIgdGhhbiBJIHVubGVzcyBoZSBpcyBhbHNvIG1vcmUganVzdD88L3E+LCByaWdodGx5IGFuZCBub2JseSB0aGlua2luZyB0aGF0IGp1c3RpY2UgbXVzdCBiZSB0aGUgcm95YWwgbWVhc3VyZSB3aGVyZXdpdGggcmVsYXRpdmUgZ3JlYXRuZXNzIGlzIG1lYXN1cmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiwgYWZ0ZXIgdGhlIHBlYWNlIHdhcyBjb25jbHVkZWQsIHRoZSBHcmVhdCBLaW5nIHNlbnQgaGltIGEgbGV0dGVyIHByb3Bvc2luZyBndWVzdC1mcmllbmRzaGlwLCBoZSB3b3VsZCBub3QgYWNjZXB0IGl0LCBzYXlpbmcgdGhhdCB0aGUgcHVibGljIGZyaWVuZHNoaXAgd2FzIGVub3VnaCwgYW5kIHRoYXQgd2hpbGUgdGhhdCBsYXN0ZWQgdGhlcmUgd291bGQgYmUgbm8gbmVlZCBvZiBhIHByaXZhdGUgb25lLiBZZXQgaW4gaGlzIGFjdHMgaGUgbm8gbG9uZ2VyIG9ic2VydmVkIHRoZXNlIG9waW5pb25zLCBidXQgd2FzIG9mdGVuIGNhcnJpZWQgYXdheSBieSBhbWJpdGlvbiBhbmQgY29udGVudGlvdXNuZXNzLCBhbmQgcGFydGljdWxhcmx5IGluIGhpcyB0cmVhdG1lbnQgb2YgdGhlIFRoZWJhbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBub3Qgb25seSByZXNjdWVkIFBob2ViaWRhcyBmcm9tIHB1bmlzaG1lbnQsIGJ1dCBhY3R1YWxseSBwZXJzdWFkZWQgU3BhcnRhIHRvIGFzc3VtZSByZXNwb25zaWJpbGl0eSBmb3IgaGlzIGluaXF1aXR5IGFuZCBvY2N1cHkgdGhlIENhZG1laWEgb24gaXRzIG93biBhY2NvdW50LCBiZXNpZGVzIHB1dHRpbmcgdGhlIGFkbWluaXN0cmF0aW9uIG9mIFRoZWJlcyBpbnRvIHRoZSBoYW5kcyBvZiBBcmNoaWFzIGFuZCBMZW9udGlkYXMsIGJ5IHdob3NlIGFpZCBQaG9lYmlkYXMgaGFkIGVudGVyZWQgYW5kIHNlaXplZCB0aGUgYWNyb3BvbGlzLiAKCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9mIGNvdXJzZSB0aGlzIGdhdmUgcmlzZSBhdCBvbmNlIHRvIGEgc3VzcGljaW9uIHRoYXQgd2hpbGUgUGhvZWJpZGFzIGhhZCBkb25lIHRoZSBkZWVkLCBBZ2VzaWxhw7xzIGhhZCBjb3Vuc2VsbGVkIGl0OyBhbmQgaGlzIHN1YnNlcXVlbnQgYWN0cyBicm91Z2h0IHRoZSBjaGFyZ2UgaW50byBnZW5lcmFsIGJlbGllZi4gRm9yIHdoZW4gdGhlIFRoZWJhbnMgZXhwZWxsZWQgdGhlIFNwYXJ0YW4gZ2Fycmlzb24gYW5kIGxpYmVyYXRlZCB0aGVpciBjaXR5LAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzc5IEIuQy4sIHdpdGggdGhlIGhlbHAgb2YgdGhlIEF0aGVuaWFucyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjIiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4yIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiA8dGl0bGU+SGVsbC48L3RpdGxlPiB2LiA0LCAyLTEyPC9iaWJsPikuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gOS4xIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiA5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UGVsb3BpZGFzPC90aXRsZT4gaXguLXhpaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhlIGNoYXJnZWQgdGhlbSB3aXRoIHRoZSBtdXJkZXIgb2YgQXJjaGlhcyBhbmQgTGVvbnRpZGFzLCB3aG8gd2VyZSByZWFsbHkgdHlyYW50cywgdGhvdWdoIHBvbGVtYXJjaHMgaW4gbmFtZSwgYW5kIGxldmllZCB3YXIgdXBvbiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgQ2xlb21icm90dXMsIHdobyB3YXMga2luZyBub3cgdGhhdCBBZ2VzaXBvbGlzIHdhcyBkZWFkLCB3YXMgc2VudCBpbnRvIEJvZW90aWEgd2l0aCBhbiBhcm15OyBmb3IgQWdlc2lsYcO8cywgd2hvIGhhZCBub3cgYm9ybmUgYXJtcyBmb3IgZm9ydHkgeWVhcnMsIGFuZCB3YXMgdGhlcmVmb3JlIGV4ZW1wdCBieSBsYXcgZnJvbSBtaWxpdGFyeSBzZXJ2aWNlLCBkZWNsaW5lZCB0aGlzIGNvbW1hbmQuIEhlIHdhcyBhc2hhbWVkLCBhZnRlciBoYXZpbmcgcmVjZW50bHkgbWFkZSB3YXIgdXBvbiB0aGUgUGhsaWFzaWFucyBpbiBiZWhhbGYgb2YgdGhlaXIgZXhpbGVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzgwLTM3OSBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjMuMTMiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuMy4xMyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHYuIDMsIDEzLTI1PC9iaWJsPikuPC9ub3RlPiB0byBiZSBzZWVuIG5vdyBoYXJyeWluZyB0aGUgVGhlYmFucyBpbiB0aGUgaW50ZXJlc3RzIG9mIHRoZWlyIHR5cmFudHMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjEzIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMTMiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2LiA0LCAxMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2FzIGEgY2VydGFpbiBMYWNlZGFlbW9uaWFuIG5hbWVkIFNwaG9kcmlhcywgb2YgdGhlIHBhcnR5IG9wcG9zZWQgdG8gQWdlc2lsYcO8cywgd2hvIGhhZCBiZWVuIGFwcG9pbnRlZCBoYXJtb3N0IGF0IFRoZXNwaWFlLiBIZSBsYWNrZWQgbmVpdGhlciBib2xkbmVzcyBub3IgYW1iaXRpb24sIGJ1dCBhbHdheXMgYWJvdW5kZWQgaW4gaG9wZXMgcmF0aGVyIHRoYW4gaW4gZ29vZCBqdWRnZW1lbnQuIFRoaXMgbWFuLCBjb3ZldGluZyBhIGdyZWF0IG5hbWUsIGFuZCBjb25zaWRlcmluZyB0aGF0IFBob2ViaWRhcyBoYWQgbWFkZSBoaW1zZWxmIGZhbW91cyBmYXIgYW5kIG5lYXIgYnkgaGlzIGJvbGQgZGVlZCBhdCBUaGViZXMsIHdhcyBwZXJzdWFkZWQgdGhhdCBpdCB3b3VsZCBiZSBhIGZhciBtb3JlIGhvbm91cmFibGUgYW5kIGJyaWxsaWFudCBleHBsb2l0IGZvciBoaW0gdG8gc2VpemUgdGhlIFBlaXJhZXVzIG9uIGhpcyBvd24gYWNjb3VudCBhbmQgcm9iIHRoZSBBdGhlbmlhbnMgb2YgYWNjZXNzIHRvIHRoZSBzZWEsIGF0dGFja2luZyB0aGVtIHVuZXhwZWN0ZWRseSBieSBsYW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzYWlkLCB0b28sIHRoYXQgdGhlIHNjaGVtZSB3YXMgZGV2aXNlZCBieSBQZWxvcGlkYXMgYW5kIE1lbG8sIGNoaWVmIG1hZ2lzdHJhdGVzIGF0IFRoZWJlcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZWlyIG9iamVjdCB3YXMgdG8gZW1icm9pbCBBdGhlbnMgYW5kIFNwYXJ0YSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjIwIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMjAiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2LiA0LCAyMC0yNDwvYmlibD4pLjwvbm90ZT4gVGhleSBwcml2aWx5IHNlbnQgbWVuIHRvIGhpbSB3aG8gcHJldGVuZGVkIHRvIGJlIFNwYXJ0YW4gc3ltcGF0aGl6ZXJzLCBhbmQgdGhleSwgYnkgcHJhaXNpbmcgYW5kIGV4YWx0aW5nIFNwaG9kcmlhcyBhcyB0aGUgb25seSBtYW4gd29ydGh5IHRvIHVuZGVydGFrZSBzbyBncmVhdCBhIHRhc2ssIHVyZ2VkIGFuZCBpbmNpdGVkIGhpbSBpbnRvIGFuIGFjdCB3aGljaCB3YXMgbm8gbGVzcyBsYXdsZXNzIGFuZCB1bmp1c3QgdGhhbiB0aGUgc2VpenVyZSBvZiB0aGUgQ2FkbWVpYSwgdGhvdWdoIGl0IHdhcyBlc3NheWVkIHdpdGhvdXQgY291cmFnZSBvciBnb29kIGZvcnR1bmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBmdWxsIGRheWxpZ2h0IG92ZXJ0b29rIGhpbSB3aGlsZSBoZSB3YXMgeWV0IGluIHRoZSBUaHJpYXNpYW4gcGxhaW4sIGFsdGhvdWdoIGhlIGhhZCBob3BlZCB0byBhdHRhY2sgdGhlIFBlaXJhZXVzIGJ5IG5pZ2h0LiBJdCBpcyBzYWlkIGFsc28gdGhhdCBoaXMgc29sZGllcnMgc2F3IGEgbGlnaHQgc3RyZWFtaW5nIGZyb20gY2VydGFpbiBzYW5jdHVhcmllcyBhdCBFbGV1c2lzLCBhbmQgd2VyZSBmaWxsZWQgd2l0aCBzaHVkZGVyaW5nIGZlYXIuIFRoZWlyIGNvbW1hbmRlciBoaW1zZWxmIGxvc3QgYWxsIGhpcyBjb3VyYWdlLCBzaW5jZSBjb25jZWFsbWVudCB3YXMgbm8gbG9uZ2VyIHBvc3NpYmxlLCBhbmQgYWZ0ZXIgcmF2YWdpbmcgdGhlIGNvdW50cnkgYSBsaXR0bGUsIHJldGlyZWQgZGlzZ3JhY2VmdWxseSBhbmQgaW5nbG9yaW91c2x5IHRvIFRoZXNwaWFlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5IZXJldXBvbiBtZW4gd2VyZSBzZW50IGZyb20gQXRoZW5zIHRvIFNwYXJ0YSB0byBkZW5vdW5jZSBTcGhvZHJpYXMuIFRoZXkgZm91bmQsIGhvd2V2ZXIsIHRoYXQgdGhlIG1hZ2lzdHJhdGVzIHRoZXJlIGhhZCBubyBuZWVkIG9mIHRoZWlyIGRlbnVuY2lhdGlvbiwgYnV0IGhhZCBhbHJlYWR5IGluZGljdGVkIFNwaG9kcmlhcyBvbiBhIGNhcGl0YWwgY2hhcmdlLiBUaGlzIGNoYXJnZSBoZSBkZXRlcm1pbmVkIG5vdCB0byBtZWV0LCBmZWFyaW5nIHRoZSB3cmF0aCBvZiBoaXMgY291bnRyeW1lbiwgd2hvIHdlcmUgYXNoYW1lZCBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIEF0aGVuaWFucywgYW5kIHdpc2hlZCB0byBiZSB0aG91Z2h0IHdyb25nZWQgd2l0aCB0aGVtLCB0aGF0IHRoZXkgbWlnaHQgbm90IGJlIHRob3VnaHQgd3Jvbmdkb2VycyB3aXRoIFNwaG9kcmlhcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBTcGhvZHJpYXMgaGFkIGEgc29uLCBDbGVvbnltdXMsIHdobyB3YXMgc3RpbGwgYSBib3kgYW5kIGZhaXIgdG8gbG9vayB1cG9uLCBhbmQgb2Ygd2hvbSBBcmNoaWRhbXVzLCB0aGUgc29uIG9mIEtpbmcgQWdlc2lsYcO8cywgd2FzIGVuYW1vdXJlZC4gSW4gdGhpcyBjcmlzaXMgQXJjaGlkYW11cyBuYXR1cmFsbHkgc3ltcGF0aGl6ZWQgd2l0aCBoaXMgZmF2b3VyaXRlIGJlY2F1c2Ugb2YgdGhlIHBlcmlsIGluIHdoaWNoIGhpcyBmYXRoZXIgc3Rvb2QsIGJ1dCBoZSB3YXMgdW5hYmxlIHRvIGFpZCBhbmQgYXNzaXN0IGhpbSBvcGVubHksIHNpbmNlIFNwaG9kcmlhcyB3YXMgb25lIG9mIHRoZSBvcHBvbmVudHMgb2YgQWdlc2lsYcO8cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gQ2xlb255bXVzIGNhbWUgdG8gaGltIGluIHRlYXJzIGFuZCBiZWdnZWQgaGltIHRvIG1vbGxpZnkgQWdlc2lsYcO8cywgZnJvbSB3aG9tIGhlIGFuZCBoaXMgZmF0aGVyIGhhZCBtb3N0IHRvIGZlYXIsIGZvciB0aHJlZSBvciBmb3VyIGRheXMgaGUgd2FzIHJlc3RyYWluZWQgYnkgYXdlIGFuZCBmZWFyIGZyb20gc2F5aW5nIGFueXRoaW5nIHRvIEFnZXNpbGHDvHMgYXMgaGUgZm9sbG93ZWQgaGltIGFib3V0OyBidXQgZmluYWxseSwgd2hlbiB0aGUgdHJpYWwgd2FzIG5lYXIgYXQgaGFuZCwgaGUgcGx1Y2tlZCB1cCBjb3VyYWdlIHRvIHRlbGwgaGltIHRoYXQgQ2xlb255bXVzIGhhZCBiZWdnZWQgaGltIHRvIGludGVyY2VkZSBmb3IgaGlzIGZhdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEFnZXNpbGHDvHMsIGFsdGhvdWdoIGhlIGtuZXcgb2YgdGhlIGxvdmUgb2YgQXJjaGlkYW11cywgaGFkIG5vdCBwdXQgYSBzdG9wIHRvIGl0LCBzaW5jZSBDbGVvbnltdXMsIGZyb20gaGlzIGVhcmx5IGJveWhvb2QsIGhhZCBnaXZlbiBzcGVjaWFsIHByb21pc2Ugb2YgYmVjb21pbmcgYW4gZWFybmVzdCBhbmQgd29ydGh5IG1hbi4gQXQgdGhpcyB0aW1lLCBob3dldmVyLCBoZSBkaWQgbm90IHBlcm1pdCBoaXMgc29uIHRvIGV4cGVjdCBhbnkgYWR2YW50YWdlIG9yIGtpbmRuZXNzIGluIGFuc3dlciB0byBoaXMgcHJheWVyOyBoZSBtZXJlbHkgc2FpZCwgYXMgaGUgd2VudCBhd2F5LCB0aGF0IGhlIHdvdWxkIGNvbnNpZGVyIHdoYXQgd2FzIHRoZSBob25vdXJhYmxlIGFuZCBmaXR0aW5nIGNvdXJzZSBpbiB0aGUgbWF0dGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcmNoaWRhbXVzIHdhcyB0aGVyZWZvcmUgbW9ydGlmaWVkLCBhbmQgY2Vhc2VkIHRvIHZpc2l0IENsZW9ueW11cywgYWx0aG91Z2ggYmVmb3JlIHRoaXMgaGUgaGFkIGRvbmUgc28gbWFueSB0aW1lcyBhIGRheS4gQXMgYSBjb25zZXF1ZW5jZSwgdGhlIGZyaWVuZHMgb2YgU3Bob2RyaWFzIGFsc28gd2VyZSBtb3JlIGluIGRlc3BhaXIgb2YgaGlzIGNhc2UsIHVudGlsIEV0eW1vY2xlcywgb25lIG9mIHRoZSBmcmllbmRzIG9mIEFnZXNpbGHDvHMsIGNvbmZlcnJlZCB3aXRoIHRoZW0gYW5kIGRpc2Nsb3NlZCB0aGUgbWluZCBvZiB0aGUga2luZywgbmFtZWx5LCB0aGF0IGhlIGJsYW1lZCB0byB0aGUgdXRtb3N0IHdoYXQgU3Bob2RyaWFzIGhhZCBkb25lLCBidXQgeWV0IHRob3VnaHQgaGltIGEgYnJhdmUgbWFuLCBhbmQgc2F3IHRoYXQgdGhlIGNpdHkgbmVlZGVkIGp1c3Qgc3VjaCBzb2xkaWVycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgd2FzIHRoZSB3YXkgaW4gd2hpY2ggQWdlc2lsYcO8cyBhbHdheXMgc3Bva2UgYWJvdXQgdGhlIHRyaWFsLCBpbiBoaXMgZGVzaXJlIHRvIGdyYXRpZnkgaGlzIHNvbiwgc28gdGhhdCBDbGVvbnltdXMgd2FzIGF0IG9uY2UgYXdhcmUgb2YgdGhlIHplYWxvdXMgZWZmb3J0cyBvZiBBcmNoaWRhbXVzIGluIGhpcyBiZWhhbGYsIGFuZCB0aGUgZnJpZW5kcyBvZiBTcGhvZHJpYXMgaGFkIGNvdXJhZ2UgYXQgbGFzdCB0byBjb21lIHRvIGhpcyBoZWxwLiBJdCBpcyBhIGZhY3QgYWxzbyB0aGF0IEFnZXNpbGHDvHMgd2FzIGV4Y2Vzc2l2ZWx5IGZvbmQgb2YgaGlzIGNoaWxkcmVuLCBhbmQgYSBzdG9yeSBpcyB0b2xkIG9mIGhpcyBqb2luaW5nIGluIHRoZWlyIGNoaWxkaXNoIHBsYXkuIE9uY2UsIHdoZW4gdGhleSB3ZXJlIHZlcnkgc21hbGwsIGhlIGJlc3Ryb2RlIGEgc3RpY2ssIGFuZCB3YXMgcGxheWluZyBob3JzZSB3aXRoIHRoZW0gaW4gdGhlIGhvdXNlLCBhbmQgd2hlbiBoZSB3YXMgc3BpZWQgZG9pbmcgdGhpcyBieSBvbmUgb2YgaGlzIGZyaWVuZHMsIGhlIGVudHJlYXRlZCBoaW0gbm90IHRvIHRlbGwgYW55IG9uZSwgdW50aWwgaGUgaGltc2VsZiBzaG91bGQgYmUgYSBmYXRoZXIgb2YgY2hpbGRyZW4uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWZ0ZXIgU3Bob2RyaWFzIHdhcyBhY3F1aXR0ZWQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjI0IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMjQiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2LiA0LCAyNC0zNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHRoZSBBdGhlbmlhbnMsIG9uIGxlYXJuaW5nIG9mIGl0LCB3ZXJlIGluY2xpbmVkIHRvIGdvIHRvIHdhciwgQWdlc2lsYcO8cyB3YXMgdmVyeSBoYXJzaGx5IGNyaXRpY2l6ZWQuIEl0IHdhcyB0aG91Z2h0IHRoYXQsIHRvIGdyYXRpZnkgYW4gYWJzdXJkIGFuZCBjaGlsZGlzaCBkZXNpcmUsIGhlIGhhZCBvcHBvc2VkIHRoZSBjb3Vyc2Ugb2YganVzdGljZSBpbiBhIHRyaWFsLCBhbmQgbWFkZSB0aGUgY2l0eSBhY2Nlc3NvcnkgdG8gZ3JlYXQgY3JpbWVzIGFnYWluc3QgdGhlIEdyZWVrcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcywgd2hlbiBoZSBzYXcgdGhhdCBoaXMgY29sbGVhZ3VlIENsZW9tYnJvdHVzIHdhcyBsaXR0bGUgaW5jbGluZWQgdG8gbWFrZSB3YXIgdXBvbiB0aGUgVGhlYmFucywgaGUgd2FpdmVkIHRoZSBleGVtcHRpb24gYnkgbGF3IHdoaWNoIGhlIGhhZCBmb3JtZXJseSBjbGFpbWVkIGluIHRoZSBtYXR0ZXIgb2YgdGhlIGV4cGVkaXRpb24sIGFuZCBwcmVzZW50bHkgbGVkIGFuIGluY3Vyc2lvbiBpbnRvIEJvZW90aWEgaGltc2VsZiwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBYZW5vcGhvbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjM1IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMzUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SGVsbC48dGl0bGU+IHYuIDQsIDM1PC90aXRsZT4KICAgICAgICAgICAgICAgICAgPC90aXRsZT4KICAgICAgICAgICAgICAgPC9iaWJsPiksIGhlIHdhcyBhc2tlZCB0byBkbyBzbyBieSB0aGUgTGFjZWRhZW1vbmlhbnMsIHdobyBwcmVmZXJyZWQgaGltIHRvIENsZW9tYnJvdHVzIGFzIGEgbGVhZGVyLiBUaGlzIHdhcyBpbiAzNzggQi5DLjwvbm90ZT4gd2hlcmUgaGUgaW5mbGljdGVkIGRhbWFnZSB1cG9uIHRoZSBUaGViYW5zLCBhbmQgaW4gaGlzIHR1cm4gbWV0IHdpdGggcmV2ZXJzZXMsIHNvIHRoYXQgb25lIGRheSB3aGVuIGhlIHdhcyB3b3VuZGVkLCBBbnRhbGNpZGFzIHNhaWQgdG8gaGltOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluZGVlZCwgdGhpcyBpcyBhIGZpbmUgdHVpdGlvbi1mZWUgd2hpY2ggdGhvdSBhcnQgZ2V0dGluZyBmcm9tIHRoZSBUaGViYW5zLCBmb3IgdGVhY2hpbmcgdGhlbSBob3cgdG8gZmlnaHQgd2hlbiB0aGV5IGRpZCBub3Qgd2lzaCB0byBkbyBpdCwgYW5kIGRpZCBub3QgZXZlbiBrbm93IGhvdy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBUaGViYW5zIGFyZSBzYWlkIHRvIGhhdmUgYmVlbiByZWFsbHkgbW9yZSB3YXJsaWtlIGF0IHRoaXMgdGltZSB0aGFuIGV2ZXIgYmVmb3JlLCBvd2luZyB0byB0aGUgbWFueSBleHBlZGl0aW9ucyB3aGljaCB0aGUgTGFjZWRhZW1vbmlhbnMgbWFkZSBhZ2FpbnN0IHRoZW0sIGJ5IHdoaWNoIHRoZXkgd2VyZSB2aXJ0dWFsbHkgc2Nob29sZWQgaW4gYXJtcy4gQW5kIEx5Y3VyZ3VzIG9mIG9sZCwgaW4gb25lIG9mIGhpcyB0aHJlZSBzby1jYWxsZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5yaGV0cmFzLDwvcT4gZm9yYmFkZSBoaXMgcGVvcGxlIHRvIG1ha2UgZnJlcXVlbnQgZXhwZWRpdGlvbnMgYWdhaW5zdCB0aGUgc2FtZSBmb2VzLCBpbiBvcmRlciB0aGF0IHRob3NlIGZvZXMgbWlnaHQgbm90IGxlYXJuIGhvdyB0byBtYWtlIHdhci4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTMuNiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTMuNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MeWN1cmd1czwvdGl0bGU+LCB4aWlpLiA2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPk1vcmVvdmVyLCB0aGUgYWxsaWVzIG9mIHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIG9mZmVuZGVkIGF0IEFnZXNpbGHDvHMsIGJlY2F1c2UsIGFzIHRoZXkgc2FpZCwgaXQgd2FzIG5vdCB1cG9uIGFueSBwdWJsaWMgZ3JvdW5kIG9mIGNvbXBsYWludCwgYnV0IGJ5IHJlYXNvbiBvZiBzb21lIHBhc3Npb25hdGUgcmVzZW50bWVudCBvZiBoaXMgb3duLCB0aGF0IGhlIHNvdWdodCB0byBkZXN0cm95IHRoZSBUaGViYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhleSBzYWlkIHRoZXkgaGFkIG5vIHdpc2ggdG8gYmUgZHJhZ2dlZCBoaXRoZXIgYW5kIHRoaXRoZXIgdG8gZGVzdHJ1Y3Rpb24gZXZlcnkgeWVhciwgdGhleSB0aGVtc2VsdmVzIHNvIG1hbnksIGFuZCB0aGUgTGFjZWRhZW1vbmlhbnMsIHdpdGggd2hvbSB0aGV5IGZvbGxvd2VkLCBzbyBmZXcuIEl0IHdhcyBhdCB0aGlzIHRpbWUsIHdlIGFyZSB0b2xkLCB0aGF0IEFnZXNpbGHDvHMsIHdpc2hpbmcgdG8gcmVmdXRlIHRoZWlyIGFyZ3VtZW50IGZyb20gbnVtYmVycywgZGV2aXNlZCB0aGUgZm9sbG93aW5nIHNjaGVtZS4gSGUgb3JkZXJlZCBhbGwgdGhlIGFsbGllcyB0byBzaXQgZG93biBieSB0aGVtc2VsdmVzIHByb21pc2N1b3VzbHksIGFuZCB0aGUgTGFjZWRhZW1vbmlhbnMgYXBhcnQgYnkgdGhlbXNlbHZlcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoaXMgaGVyYWxkIGNhbGxlZCB1cG9uIHRoZSBwb3R0ZXJzIHRvIHN0YW5kIHVwIGZpcnN0LCBhbmQgYWZ0ZXIgdGhlbSB0aGUgc21pdGhzLCBuZXh0LCB0aGUgY2FycGVudGVycyBpbiB0aGVpciB0dXJuLCBhbmQgdGhlIGJ1aWxkZXJzLCBhbmQgc28gb24gdGhyb3VnaCBhbGwgdGhlIGhhbmRpY3JhZnRzLiBJbiByZXNwb25zZSwgYWxtb3N0IGFsbCB0aGUgYWxsaWVzIHJvc2UgdXAsIGJ1dCBub3QgYSBtYW4gb2YgdGhlIExhY2VkYWVtb25pYW5zOyBmb3IgdGhleSB3ZXJlIGZvcmJpZGRlbiB0byBsZWFybiBvciBwcmFjdGlzZSBhIG1hbnVhbCBhcnQuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDI0LjIiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDI0LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THljdXJndXM8L3RpdGxlPiwgeHhpdi4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlbiBBZ2VzaWxhw7xzIHNhaWQgd2l0aCBhIGxhdWdoOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdSBzZWUsIE8gbWVuLCBob3cgbWFueSBtb3JlIHNvbGRpZXJzIHRoYW4geW91IHdlIGFyZSBzZW5kaW5nIG91dC48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gTWVnYXJhLCB3aGVuIGhlIHdhcyBsZWFkaW5nIGhpcyBhcm15IGJhY2sgZnJvbSBUaGViZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gcm9tIGEgc2Vjb25kIGluY3Vyc2lvbiBpbnRvIEJvZW90aWEsIG1hZGUgaW4gMzc3IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC40NyIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjQ3IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdi4gNCwgNDctNTU8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuNTgiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC41OCIgdmFsaWQ9InllcyI+NTg8L2JpYmw+KS48L25vdGU+IGFzIGhlIHdhcyBnb2luZyB1cCB0byB0aGUgc2VuYXRlLWhvdXNlIGluIHRoZSBhY3JvcG9saXMsIGhlIHdhcyBzZWl6ZWQgd2l0aCBhIGNyYW1wIGFuZCB2aW9sZW50IHBhaW4gaW4gaGlzIHNvdW5kIGxlZywgd2hpY2ggdGhlbiBzd2VsbGVkIHVwLCBhcHBlYXJlZCB0byBiZSBjb25nZXN0ZWQsIGFuZCBzaG93ZWQgc2lnbnMgb2YgZXhjZXNzaXZlIGluZmxhbW1hdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXMgc29vbiBhcyBhIGNlcnRhaW4gU3lyYWN1c2FuIHBoeXNpY2lhbiBoYWQgb3BlbmVkIGEgdmVpbiBiZWxvdyB0aGUgYW5rbGUsIHRoZSBwYWlucyByZWxheGVkLCBidXQgbXVjaCBibG9vZCBmbG93ZWQgYW5kIGNvdWxkIG5vdCBiZSBjaGVja2VkLCBzbyB0aGF0IEFnZXNpbGHDvHMgd2FzIHZlcnkgZmFpbnQgZnJvbSBpdHMgbG9zcywgYW5kIGluIGRpcmUgcGVyaWwgb2YgaGlzIGxpZmUuIEF0IGxhc3QsIGhvd2V2ZXIsIHRoZSBmbG93IG9mIGJsb29kIHdhcyBzdG9wcGVkLCBhbmQgQWdlc2lsYcO8cyB3YXMgY2FycmllZCB0byBTcGFydGEsIHdoZXJlIGhlIHJlbWFpbmVkIGZvciBhIGxvbmcgdGltZSBpbiBhIHdlYWsgY29uZGl0aW9uIGFuZCB1bmFibGUgdG8gdGFrZSB0aGUgZmllbGQuIAoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+RHVyaW5nIHRoaXMgdGltZSB0aGUgU3BhcnRhbnMgbWV0IHdpdGggbWFueSByZXZlcnNlcyBib3RoIGJ5IGxhbmQgYW5kIHNlYSwgdGhlIGdyZWF0ZXN0IG9mIHdoaWNoIHdhcyBhdCBUZWd5cmEsIHdoZXJlIGZvciB0aGUgZmlyc3QgdGltZSB0aGV5IHdlcmUgb3ZlcnBvd2VyZWQgYnkgdGhlIFRoZWJhbnMgaW4gYSBwaXRjaGVkIGJhdHRsZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgYmF0dGxlLCBmb3VnaHQgaW4gMzc1IEIuQy4sIGlzIG5vdCBtZW50aW9uZWQgYnkgWGVub3Bob24sIGJ1dCBpcyBkZXNjcmliZWQgYnkgUGx1dGFyY2ggaW4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDE2LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDE2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UGVsb3BpZGFzPC90aXRsZT4sIGNoYXB0ZXJzIHh2aS48L2JpYmw+IGFuZCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAxNy4xIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAxNy4xIiB2YWxpZD0ieWVzIj54dmlpLjwvYmlibD4sIGRvdWJ0bGVzcyBvbiB0aGUgYXV0aG9yaXR5IG9mIEVwaG9ydXMgKGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuODEuMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1LjgxLjIiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4di4gODEsIDIpPC9iaWJsPi48L25vdGU+IFRoZXJlIHdhcywgYWNjb3JkaW5nbHksIGEgZ2VuZXJhbCBzZW50aW1lbnQgaW4gZmF2b3VyIG9mIGEgZ2VuZXJhbCBwZWFjZSwgYW5kIGFtYmFzc2Fkb3JzIGZyb20gYWxsIEhlbGxhcyBjYW1lIHRvZ2V0aGVyIGF0IFNwYXJ0YSB0byBzZXR0bGUgaXRzIHRlcm1zLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzcxIEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuMy4zLiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi4zLjMuIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmkuIDMsIDMtMjA8L2JpYmw+KS48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+T25lIG9mIHRoZXNlIGFtYmFzc2Fkb3JzIHdhcyBFcGFtaW5vbmRhcywgYSBtYW4gb2YgcmVwdXRlIGZvciBjdWx0dXJlIGFuZCBwaGlsb3NvcGh5LCBhbHRob3VnaCBoZSBoYWQgbm90IHlldCBnaXZlbiBwcm9vZiBvZiBjYXBhY2l0eSBhcyBhIGdlbmVyYWwuIFRoaXMgbWFuLCBzZWVpbmcgdGhlIHJlc3QgYWxsIGNyaW5naW5nIGJlZm9yZSBBZ2VzaWxhw7xzLCBhbG9uZSBoYWQgdGhlIGNvdXJhZ2Ugb2YgaGlzIGNvbnZpY3Rpb25zLCBhbmQgbWFkZSBhIHNwZWVjaCwgbm90IGluIGJlaGFsZiBvZiBUaGViZXMsIGhpcyBuYXRpdmUgY2l0eSwgYnV0IG9mIGFsbCBHcmVlY2UgaW4gY29tbW9uLCBkZWNsYXJpbmcgdGhhdCB3YXIgbWFkZSBTcGFydGEgZ3JlYXQgYXQgdGhlIGV4cGVuc2Ugb2YgdGhlIHN1ZmZlcmluZ3Mgb2YgYWxsIHRoZSBvdGhlciBzdGF0ZXMsIGFuZCB1cmdpbmcgdGhhdCBwZWFjZSBiZSBtYWRlIG9uIHRlcm1zIG9mIGVxdWFsaXR5IGFuZCBqdXN0aWNlLCBmb3IgaXQgd291bGQgZW5kdXJlIG9ubHkgd2hlbiBhbGwgcGFydGllcyB0byBpdCB3ZXJlIG1hZGUgZXF1YWwuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2VzaWxhw7xzLCBhY2NvcmRpbmdseSwgc2VlaW5nIHRoYXQgdGhlIEdyZWVrcyBhbGwgbGlzdGVuZWQgdG8gRXBhbWlub25kYXMgd2l0aCB0aGUgZ3JlYXRlc3QgYXR0ZW50aW9uIGFuZCBhZG1pcmF0aW9uLCBhc2tlZCBoaW0gd2hldGhlciBoZSBjb25zaWRlcmVkIGl0IGp1c3RpY2UgYW5kIGVxdWFsaXR5IHRoYXQgdGhlIGNpdGllcyBvZiBCb2VvdGlhIHNob3VsZCBiZSBpbmRlcGVuZGVudCBvZiBUaGViZXMuIFRoZW4gd2hlbiBFcGFtaW5vbmRhcyBwcm9tcHRseSBhbmQgYm9sZGx5IGFza2VkIGhpbSBpbiByZXBseSB3aGV0aGVyIGhlIHRvbyB0aG91Z2h0IGl0IGp1c3RpY2UgZm9yIHRoZSBjaXRpZXMgb2YgTGFjb25pYSB0byBiZSBpbmRlcGVuZGVudCBvZiBTcGFydGEsIEFnZXNpbGHDvHMgc3ByYW5nIGZyb20gaGlzIHNlYXQgYW5kIHdyYXRoZnVsbHkgYmFkZSBoaW0gc2F5IHBsYWlubHkgd2hldGhlciBoZSBpbnRlbmRlZCB0byBtYWtlIHRoZSBjaXRpZXMgb2YgQm9lb3RpYSBpbmRlcGVuZGVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gRXBhbWlub25kYXMgYW5zd2VyZWQgYWdhaW4gaW4gdGhlIHNhbWUgd2F5IGJ5IGFza2luZyB3aGV0aGVyIGhlIGludGVuZGVkIHRvIG1ha2UgdGhlIGNpdGllcyBvZiBMYWNvbmlhIGluZGVwZW5kZW50LCBBZ2VzaWxhw7xzIGJlY2FtZSB2aW9sZW50IGFuZCB3YXMgZ2xhZCBvZiB0aGUgcHJldGV4dCBmb3IgYXQgb25jZSBlcmFzaW5nIHRoZSBuYW1lIG9mIHRoZSBUaGViYW5zIGZyb20gdGhlIHRyZWF0eSBvZiBwZWFjZSBhbmQgZGVjbGFyaW5nIHdhciB1cG9uIHRoZW0uCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gWGVub3Bob24gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuMy4xOSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi4zLjE5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmkuIDMsIDE5LjwvYmlibD4pLCB3aG8gbWFrZXMgbm8gbWVudGlvbiBvZiBFcGFtaW5vbmRhcywgdGhlIFRoZWJhbnMgaGFkIHNpZ25lZCBhcyBUaGViYW5zLCBidXQgb24gdGhlIG5leHQgZGF5IHdpc2hlZCB0byBzdWJzdGl0dXRlIEJvZW90aWFucyBmb3IgVGhlYmFucy4gVGhpcyBBZ2VzaWxhw7xzIHJlZnVzZWQgdG8gcGVybWl0LiBJdCB3b3VsZCBoYXZlIHJlY29nbml6ZWQgdGhlIHN1cHJlbWFjeSBvZiBUaGViZXMgaW4gQm9lb3RpYS48L25vdGU+IFRoZSByZXN0IG9mIHRoZSBHcmVla3MsIGhvd2V2ZXIsIGhlIG9yZGVyZWQgdG8gZGVwYXJ0LCBub3cgdGhhdCB0aGV5IHdlcmUgcmVjb25jaWxlZCB3aXRoIGVhY2ggb3RoZXIsIGxlYXZpbmcgZGlmZmVyZW5jZXMgd2hpY2ggY291bGQgYmUgaGVhbGVkIHRvIHRoZSB0ZXJtcyBvZiBwZWFjZSwgYW5kIHRob3NlIHdoaWNoIGNvdWxkIG5vdCwgdG8gd2FyLCBzaW5jZSBpdCB3YXMgYSBoYXJkIHRhc2sgdG8gc2V0dGxlIGFuZCByZW1vdmUgYWxsIHRoZWlyIGRpc3B1dGVzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lIENsZW9tYnJvdHVzIHdhcyBpbiBQaG9jaXMgd2l0aCBhbiBhcm15LiBUaGUgZXBob3JzIHRoZXJlZm9yZSBpbW1lZGlhdGVseSBzZW50IGhpbSBvcmRlcnMgdG8gbGVhZCBoaXMgZm9yY2VzIGFnYWluc3QgVGhlYmVzLiBUaGV5IGFsc28gc2VudCByb3VuZCBhIHN1bW1vbnMgZm9yIGFuIGFzc2VtYmx5IG9mIHRoZWlyIGFsbGllcywgd2hvIHdlcmUgd2l0aG91dCB6ZWFsIGZvciB0aGUgd2FyIGFuZCB0aG91Z2h0IGl0IGEgZ3JlYXQgYnVyZGVuLCBidXQgd2VyZSBub3QgeWV0IGJvbGQgZW5vdWdoIHRvIG9wcG9zZSBvciBkaXNvYmV5IHRoZSBMYWNlZGFlbW9uaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFsdGhvdWdoIG1hbnkgYmFsZWZ1bCBzaWducyBhcHBlYXJlZCwgYXMgSSBoYXZlIHdyaXR0ZW4gaW4gbXkgTGlmZSBvZiBFcGFtaW5vbmRhcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5vdCBleHRhbnQuPC9ub3RlPiBhbmQgdGhvdWdoIFByb3Rob3XDvHMgdGhlIExhY29uaWFuIG1hZGUgb3Bwb3NpdGlvbiB0byB0aGUgZXhwZWRpdGlvbiwgQWdlc2lsYcO8cyB3b3VsZCBub3QgZ2l2ZSBpbiwgYnV0IGJyb3VnaHQgdGhlIHdhciB0byBwYXNzLiBIZSB0aG91Z2h0IHRoYXQgc2luY2UgYWxsIEhlbGxhcyB3YXMgb24gdGhlaXIgc2lkZSwgYW5kIHRoZSBUaGViYW5zIGhhZCBiZWVuIGV4Y2x1ZGVkIGZyb20gdGhlIHRyZWF0eSwgaXQgd2FzIGEgZmF2b3VyYWJsZSB0aW1lIGZvciB0aGUgU3BhcnRhbnMgdG8gdGFrZSB2ZW5nZWFuY2Ugb24gdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSB0aW1lIGNob3NlbiBmb3IgaXQgcHJvdmVzIHRoYXQgdGhpcyBleHBlZGl0aW9uIHdhcyBtYWRlIGZyb20gYW5nZXIgbW9yZSB0aGFuIGZyb20gY2FyZWZ1bCBjYWxjdWxhdGlvbi4gRm9yIHRoZSB0cmVhdHkgb2YgcGVhY2Ugd2FzIG1hZGUgYXQgTGFjZWRhZW1vbiBvbiB0aGUgZm91cnRlZW50aCBvZiB0aGUgbW9udGggU2Npcm9waG9yaW9uLCBhbmQgb24gdGhlIGZpZnRoIG9mIEhlY2F0b21iYWVvbiB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBkZWZlYXRlZCBhdCBMZXVjdHJhLOKAlGFuIGludGVydmFsIG9mIHR3ZW50eSBkYXlzLiBJbiB0aGF0IGJhdHRsZSBhIHRob3VzYW5kIExhY2VkYWVtb25pYW5zIGZlbGwsIGJlc2lkZXMgQ2xlb21icm90dXMgdGhlIGtpbmcsIGFuZCBhcm91bmQgaGltIHRoZSBtaWdodGllc3Qgb2YgdGhlIFNwYXJ0YW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbW9uZyB0aGVzZSwgdGhleSBzYXksIHdhcyBDbGVvbnltdXMsIHRoZSBiZWF1dGlmdWwgc29uIG9mIFNwaG9kcmlhcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMjUuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHYuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdobyB3YXMgdGhyaWNlIHN0cnVjayBkb3duIGluIGZyb250IG9mIGhpcyBraW5nLCBhcyBtYW55IHRpbWVzIHJvc2UgYWdhaW4gdG8gaGlzIGZlZXQsIGFuZCBkaWVkIHRoZXJlLCBmaWdodGluZyB0aGUgVGhlYmFucy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyBoYWQgbWV0IHdpdGggYW4gdW5leHBlY3RlZCByZXZlcnNlLCBhbmQgdGhlIFRoZWJhbnMgd2l0aCBhbiB1bmxvb2tlZC1mb3Igc3VjY2VzcyBzdXJwYXNzaW5nIHRoYXQgb2YgYW55IG90aGVyIEhlbGxlbmVzIGF0IHN0cmlmZSB3aXRoIEhlbGxlbmVzLCB0aGUgaGlnaCBjb25kdWN0IG9mIHRoZSBkZWZlYXRlZCBjaXR5IHdhcyBubyBsZXNzIHRvIGJlIGVudmllZCBhbmQgYWRtaXJlZCB0aGFuIHRoYXQgb2YgdGhlIHZpY3RvcmlvdXMgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+WGVub3Bob24gc2F5cwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIFN5bS4gMS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlN5bXBvc2l1bTwvdGl0bGU+LCBpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGF0IGluIHRoZSBjYXNlIG9mIG5vYmxlIG1lbiwgdGhlcmUgaXMgbXVjaCB0aGF0IGlzIHdvcnRoIHJlY29yZGluZyBldmVuIGluIHdoYXQgdGhleSBzYXkgYW5kIGRvIGF0IHRoZWlyIHdpbmUgYW5kIGluIHRoZWlyIHNwb3J0cywgYW5kIGhlIGlzIHJpZ2h0OyBhbmQgaXQgaXMgbm8gbGVzcywgYnV0IGV2ZW4gbW9yZSwgd29ydGggd2hpbGUgdG8gb2JzZXJ2ZSBjYXJlZnVsbHkgdGhlIGRlY29ydW0gd2l0aCB3aGljaCBub2JsZSBtZW4gc3BlYWsgYW5kIGFjdCBpbiB0aGUgbWlkc3Qgb2YgYWR2ZXJzaXR5LiBUaGUgY2l0eSB3YXMgaG9sZGluZyBhIGZlc3RpdmFsIGFuZCB3YXMgZnVsbCBvZiBzdHJhbmdlcnM7IGZvciB0aGUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5neW1ub3BhZWRpYWU8L3E+IHdlcmUgaW4gcHJvZ3Jlc3MgYW5kIGNob2lycyBvZiBib3lzIHdlcmUgY29tcGV0aW5nIHdpdGggb25lIGFub3RoZXIgaW4gdGhlIHRoZWF0cmU7IHRoZW4gY2FtZSB0aGUgbWVzc2VuZ2VycyBvZiBjYWxhbWl0eSBmcm9tIExldWN0cmEuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgZXBob3JzLCBhbHRob3VnaCBpdCB3YXMgYXQgb25jZSBhcHBhcmVudCB0aGF0IHRoZWlyIGNhdXNlIHdhcyBydWluZWQgYW5kIHRoZWlyIHN1cHJlbWFjeSBsb3N0LCB3b3VsZCBub3QgYWxsb3cgYSBjaG9yYWwgcGVyZm9ybWFuY2UgdG8gYmUgb21pdHRlZCwgbm9yIHRoZSBmYXNoaW9uIG9mIHRoZSBmZXN0aXZhbCB0byBiZSBjaGFuZ2VkIGJ5IHRoZSBjaXR5LCBidXQgYWZ0ZXIgc2VuZGluZyB0aGUgbmFtZXMgb2YgdGhlIHNsYWluIHdhcnJpb3JzIHRvIHRoZSBob21lcyBvZiB0aGVpciBraW5kcmVkLCB0aGV5IHRoZW1zZWx2ZXMgY29uZHVjdGVkIHRoZSBzcGVjdGFjbGUgYW5kIHRoZSBjaG9yYWwgY29udGVzdHMgdG8gYSBjbG9zZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIG5leHQgbW9ybmluZyBhbHNvLCBub3cgdGhhdCBldmVyeW9uZSBrbmV3IHdobyBoYWQgc3Vydml2ZWQgdGhlIGJhdHRsZSBhbmQgd2hvIGhhZCBiZWVuIHNsYWluLCB0aGUgZmF0aGVycyBhbmQga2luZHJlZCBhbmQgZnJpZW5kcyBvZiB0aGUgc2xhaW4gd2VudCBkb3duIGludG8gdGhlIG1hcmtldC1wbGFjZSBhbmQgZ3JlZXRlZCBvbmUgYW5vdGhlciB3aXRoIGJyaWdodCBmYWNlcywgZnVsbCBvZiBwcmlkZSBhbmQgZXh1bHRhdGlvbjsgd2hpbGUgdGhlIGZyaWVuZHMgb2YgdGhlIHN1cnZpdm9ycywgYXMgaWYgaW4gbW91cm5pbmcsIHRhcnJpZWQgYXQgaG9tZSB3aXRoIHRoZSB3b21lbiwgYW5kIGlmIG9uZSBvZiB0aGVtIHdhcyBvYmxpZ2VkIHRvIGFwcGVhciBpbiBwdWJsaWMsIGhpcyBnYXJiIGFuZCBzcGVlY2ggYW5kIGxvb2tzIGJldG9rZW5lZCBoaXMgaHVtaWxpYXRpb24gYW5kIGFiYXNlbWVudC4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA2LjQuMTYiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aS4gNCwgMTYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGEgc3RpbGwgZ3JlYXRlciBkaWZmZXJlbmNlIHdhcyB0byBiZSBzZWVuIChvciBoZWFyZCBhYm91dCkgaW4gdGhlIHdvbWVuOyBzaGUgd2hvIGV4cGVjdGVkIGhlciBzb24gYmFjayBmcm9tIHRoZSBiYXR0bGUgYWxpdmUgd2FzIGRlamVjdGVkIGFuZCBzaWxlbnQsIGJ1dCB0aGUgbW90aGVycyBvZiB0aG9zZSByZXBvcnRlZCB0byBoYXZlIGZhbGxlbiBpbW1lZGlhdGVseSBmcmVxdWVudGVkIHRoZSB0ZW1wbGVzLCBhbmQgdmlzaXRlZCBvbmUgYW5vdGhlciB3aXRoIGFuIGFpciBvZiBnbGFkbmVzcyBhbmQgcHJpZGUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZ3JlYXRlciBudW1iZXIsIGhvd2V2ZXIsIHdoZW4gdGhlaXIgYWxsaWVzIHdlcmUgZmFsbGluZyBhd2F5IGZyb20gdGhlbSBhbmQgaXQgd2FzIGV4cGVjdGVkIHRoYXQgRXBhbWlub25kYXMsIGluIGFsbCB0aGUgcHJpZGUgb2YgYSBjb25xdWVyb3IsIHdvdWxkIGludmFkZSBQZWxvcG9ubmVzdXMsIGZlbGwgdG8gdGhpbmtpbmcgb2YgdGhlIG9yYWNsZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDMuNCIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaWkuIDQgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW4gdmlldyBvZiB0aGUgbGFtZW5lc3Mgb2YgQWdlc2lsYcO8cywgYW5kIHdlcmUgZnVsbCBvZiBkZWplY3Rpb24gYW5kIGNvbnN0ZXJuYXRpb24gaW4gcmVzcGVjdCB0byB0aGUgZGl2aW5lIHBvd2VycywgYmVsaWV2aW5nIHRoYXQgdGhlaXIgY2l0eSB3YXMgaW4gYW4gZXZpbCBwbGlnaHQgYmVjYXVzZSB0aGV5IGhhZCBkZXRocm9uZWQgdGhlIHNvdW5kLWZvb3RlZCBraW5nIGFuZCBjaG9zZW4gaW5zdGVhZCBhIGxhbWUgYW5kIGhhbHRpbmcgb25lLOKAlHRoZSB2ZXJ5IHRoaW5nIHdoaWNoIHRoZSBkZWl0eSB3YXMgdHJ5aW5nIHRvIHRlYWNoIHRoZW0gY2FyZWZ1bGx5IHRvIGF2b2lkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IG90aGVyd2lzZSBoZSBoYWQgc3VjaCBwb3dlciBhbmQgdmFsb3VyIGFuZCBmYW1lIHRoYXQgdGhleSBub3Qgb25seSBjb250aW51ZWQgdG8gZW1wbG95IGhpbSBhcyBraW5nIGFuZCBnZW5lcmFsIGluIG1hdHRlcnMgcGVydGFpbmluZyB0byB3YXIsIGJ1dCBhbHNvIGFzIHBoeXNpY2lhbiBhbmQgYXJiaXRlciBpbiB0aGVpciBjaXZpbCBwZXJwbGV4aXRpZXMuIEZvciBpbnN0YW5jZSwgdXBvbiB0aG9zZSB3aG8gaGFkIHNob3duIGNvd2FyZGljZSBpbiB0aGUgYmF0dGxlLCB3aG9tIHRoZXkgdGhlbXNlbHZlcyBjYWxsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dHJlc2FudGVzLDwvcT4gb3IgPGVtcGg+CiAgICAgICAgICAgICAgIDxlbXBoPnJ1bi1hd2F5czwvZW1waD4KICAgICAgICAgICAgPC9lbXBoPiwgdGhleSBoZXNpdGF0ZWQgdG8gaW5mbGljdCB0aGUgZGlzYWJpbGl0aWVzIHJlcXVpcmVkIGJ5IHRoZSBsYXdzLCBzaW5jZSB0aGUgbWVuIHdlcmUgbnVtZXJvdXMgYW5kIHBvd2VyZnVsLCBmb3IgZmVhciB0aGF0IHRoZXkgbWlnaHQgc3RpciB1cCBhIHJldm9sdXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBzdWNoIG1lbiBhcmUgbm90IG9ubHkgZGViYXJyZWQgZnJvbSBldmVyeSBvZmZpY2UsIGJ1dCBpbnRlcm1hcnJpYWdlIHdpdGggYW55IG9mIHRoZW0gaXMgYSBkaXNncmFjZSwgYW5kIGFueSBvbmUgd2hvIG1lZXRzIHRoZW0gbWF5IHN0cmlrZSB0aGVtIGlmIGhlIHBsZWFzZXMuIE1vcmVvdmVyLCB0aGV5IGFyZSBvYmxpZ2VkIHRvIGdvIGFib3V0IHVua2VtcHQgYW5kIHNxdWFsaWQsIHdlYXJpbmcgY2xvYWtzIHRoYXQgYXJlIHBhdGNoZWQgd2l0aCBkeWVkIHN0dWZmcywgaGFsZiBvZiB0aGVpciBiZWFyZHMgc2hhdmVuLCBhbmQgaGFsZiBsZWZ0IHRvIGdyb3cuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBhIHNlcmlvdXMgbWF0dGVyLCB0aGVyZWZvcmUsIHRvIGFsbG93IG1hbnkgc3VjaCBtZW4gaW4gdGhlIGNpdHksIHdoZW4gc2hlIGxhY2tlZCBub3QgYSBmZXcgc29sZGllcnMuIFNvIHRoZXkgY2hvc2UgQWdlc2lsYcO8cyBhcyBhIGxhdy1naXZlciBmb3IgdGhlIG9jY2FzaW9uLiBBbmQgaGUsIHdpdGhvdXQgYWRkaW5nIHRvIG9yIHN1YnRyYWN0aW5nIGZyb20gb3IgY2hhbmdpbmcgdGhlIGxhd3MgaW4gYW55IHdheSwgY2FtZSBpbnRvIHRoZSBhc3NlbWJseSBvZiB0aGUgTGFjZWRhZW1vbmlhbnMgYW5kIHNhaWQgdGhhdCB0aGUgbGF3cyBtdXN0IGJlIGFsbG93ZWQgdG8gc2xlZXAgZm9yIHRoYXQgZGF5LCBidXQgZnJvbSB0aGF0IGRheSBvbiBtdXN0IGJlIGluIHNvdmVyZWlnbiBmb3JjZS4gQnkgdGhpcyBtZWFucyBoZSBhdCBvbmNlIHNhdmVkIHRoZSBsYXdzIGZvciB0aGUgY2l0eSBhbmQgdGhlIG1lbiBmcm9tIGluZmFteS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgd2lzaGluZyB0byByZW1vdmUgdGhlIGRpc2NvdXJhZ2VtZW50IGFuZCBkZWplY3Rpb24gd2hpY2ggcHJldmFpbGVkIGFtb25nIHRoZSB5b3VuZyBtZW4sIGhlIG1hZGUgYW4gaW5jdXJzaW9uIGludG8gQXJjYWRpYSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM3MCBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA2LjUuMTAiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aS4gNSwgMTAtMjE8L2JpYmw+KS48L25vdGU+IGFuZCB0aG91Z2ggaGUgc3R1ZGlvdXNseSBhdm9pZGVkIGpvaW5pbmcgYmF0dGxlIHdpdGggdGhlIGVuZW15LCBoZSB0b29rIGEgc21hbGwgdG93biBvZiB0aGUgTWFudGluZWFucyBhbmQgb3ZlcnJhbiB0aGVpciB0ZXJyaXRvcnksIGFuZCB0aHVzIGxpZ2h0ZW5lZCBhbmQgZ2xhZGRlbmVkIHRoZSBleHBlY3RhdGlvbnMgb2YgaGlzIGNpdHksIHdoaWNoIGZlbHQgdGhhdCBpdHMgY2FzZSB3YXMgbm90IHdob2xseSBkZXNwZXJhdGUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNhbWUgeWVhciwgYWZ0ZXIgQWdlc2lsYcO8cyBoYWQgcmV0dXJuZWQgYW5kIGRpc2JhbmRlZCBoaXMgZm9yY2VzLjwvbm90ZT4gRXBhbWlub25kYXMgZW50ZXJlZCBMYWNvbmlhIHdpdGggaGlzIGFsbGllcywgaGF2aW5nIG5vIGZld2VyIHRoYW4gZm9ydHkgdGhvdXNhbmQgbWVuLWF0LWFybXMuIE1hbnkgbGlnaHQgYXJtZWQgYW5kIHVuYXJtZWQgdHJvb3BzIGFsc28gZm9sbG93ZWQgaGltIGZvciB0aGUgc2FrZSBvZiBwbHVuZGVyLCBzbyB0aGF0IGEgaG9yZGUgb2Ygc2V2ZW50eSB0aG91c2FuZCwgYWxsIHRvbGQsIG1hZGUgdGhpcyBpbmN1cnNpb24gaW50byBMYWNvbmlhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYSBwZXJpb2Qgb2Ygbm8gbGVzcyB0aGFuIHNpeCBodW5kcmVkIHllYXJzIHRoZSBEb3JpYW5zIGhhZCBiZWVuIGxpdmluZyBpbiBMYWNlZGFlbW9uLCBhbmQgdGhpcyB3YXMgdGhlIGZpcnN0IHRpbWUgaW4gYWxsIHRoYXQgcGVyaW9kIHRoYXQgZW5lbWllcyBoYWQgYmVlbiBzZWVuIGluIHRoZSBjb3VudHJ5OyBiZWZvcmUgdGhpcywgbm9uZSBoYWQgdmVudHVyZWQgdGhlcmUuIEJ1dCBub3cgdGhleSBidXJzdCBpbnRvIGFuIHVucmF2YWdlZCBhbmQgaW52aW9sYXRlIGxhbmQsIGFuZCBidXJuZWQgYW5kIHBsdW5kZXJlZCBhcyBmYXIgYXMgdGhlIHJpdmVyIGFuZCB0aGUgY2l0eSwgYW5kIG5vIG9uZSBjYW1lIG91dCBhZ2FpbnN0IHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBBZ2VzaWxhw7xzIHdvdWxkIG5vdCBzdWZmZXIgdGhlIExhY2VkYWVtb25pYW5zIHRvIGZpZ2h0IGFnYWluc3Qgc3VjaCBhIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YmlsbG93eSB0b3JyZW50IG9mIHdhciw8L3E+IHRvIHVzZSB0aGUgd29yZHMgb2YgVGhlb3BvbXB1cywgYnV0IHN1cnJvdW5kZWQgdGhlIGNlbnRyYWwgYW5kIG1vc3QgY29tbWFuZGluZyBwYXJ0cyBvZiB0aGUgY2l0eSB3aXRoIGhpcyBtZW4tYXQtYXJtcywgd2hpbGUgaGUgZW5kdXJlZCB0aGUgYm9hc3RmdWwgdGhyZWF0cyBvZiB0aGUgVGhlYmFucywgd2hvIGNhbGxlZCB1cG9uIGhpbSBieSBuYW1lIGFuZCBiYWRlIGhpbSBjb21lIG91dCBhbmQgZmlnaHQgZm9yIGhpcyBjb3VudHJ5LCBzaW5jZSBoZSBoYWQgY2F1c2VkIGhlciBtaXNmb3J0dW5lcyBieSBsaWdodGluZyB1cCB0aGUgZmxhbWVzIG9mIHdhci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoaXMgd2FzIG5vdCB0aGUgd29yc3QuIEFnZXNpbGHDvHMgd2FzIHN0aWxsIG1vcmUgaGFyYXNzZWQgYnkgdGhlIHR1bXVsdHMgYW5kIHNocmlla3MgYW5kIHJ1bm5pbmcgYWJvdXQgdGhyb3VnaG91dCB0aGUgY2l0eSwgd2hlcmUgdGhlIGVsZGVyIG1lbiB3ZXJlIGVucmFnZWQgYXQgdGhlIHN0YXRlIG9mIGFmZmFpcnMsIGFuZCB0aGUgd29tZW4gd2VyZSB1bmFibGUgdG8ga2VlcCBxdWlldCwgYnV0IHdlcmUgdXR0ZXJseSBiZXNpZGUgdGhlbXNlbHZlcyB3aGVuIHRoZXkgaGVhcmQgdGhlIHNob3V0cyBhbmQgc2F3IHRoZSBmaXJlcyBvZiB0aGUgZW5lbXkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIHdvbWVuIGNvdWxkIG5vdCBlbmR1cmUgZXZlbiB0aGUgc2lnaHQgb2YgdGhlIHNtb2tlLCBzaW5jZSB0aGV5IGhhZCBuZXZlciBzZXQgZXllcyB1cG9uIGFuIGVuZW15PC9xPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi41LjI4IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmkuIDUsIDI4PC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHNvIGRpc3RyZXNzZWQgYXQgdGhlIHRob3VnaHQgb2Ygd2hhdCBoaXMgZmFtZSB3b3VsZCBiZSwgYmVjYXVzZSBoZSBoYWQgdGFrZW4gY29tbWFuZCBvZiB0aGUgY2l0eSB3aGVuIHNoZSB3YXMgZ3JlYXRlc3QgYW5kIG1vc3QgcG93ZXJmdWwsIGFuZCBub3cgc2F3IGhlciByZXB1dGF0aW9uIGxvd2VyZWQsIGFuZCBoZXIgcHJvdWQgYm9hc3QgbWFkZSBlbXB0eSwgd2hpY2ggYm9hc3QgaGUgaGltc2VsZiBhbHNvIGhhZCBvZnRlbiBtYWRlLCBzYXlpbmcgdGhhdCBubyBTcGFydGFuIHdvbWFuIGhhZCBldmVyIHNlZW4gdGhlIHNtb2tlIG9mIGFuIGVuZW15J3MgZmlyZXMuIEl0IGlzIHNhaWQgYWxzbyB0aGF0IEFudGFsY2lkYXMsIHdoZW4gYW4gQXRoZW5pYW4gd2FzIGRpc3B1dGluZyB3aXRoIGhpbSBvdmVyIHRoZSB2YWxvdXIgb2YgdGhlIHR3byBwZW9wbGVzIGFuZCBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllldCB3ZSBoYXZlIG9mdGVuIGRyaXZlbiB5b3UgYXdheSBmcm9tIHRoZSBDZXBoaXN1cyw8L3E+IHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHdlIGhhdmUgbmV2ZXIgZHJpdmVuIHlvdSBhd2F5IGZyb20gdGhlIEV1cm90YXMuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhIHNpbWlsYXIgcmV0b3J0IHdhcyBtYWRlIGJ5IGEgU3BhcnRhbiBvZiBsZXNzZXIgbm90ZSB0byB0aGUgQXJnaXZlIHdobyBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1hbnkgb2YgeW91IGxpZSBidXJpZWQgaW4gdGhlIGxhbmRzIG9mIEFyZ29zPC9xPjsgdGhlIFNwYXJ0YW4gYW5zd2VyZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IG5vdCBhIG1hbiBvZiB5b3UgaW4gdGhlIGxhbmRzIG9mIExhY29uaWEuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBob3dldmVyLCB0aGV5IHNheSB0aGF0IEFudGFsY2lkYXMsIHdobyB3YXMgYW4gZXBob3IsIHNlY3JldGx5IHNlbnQgaGlzIGNoaWxkcmVuIGF3YXkgdG8gQ3l0aGVyYSwgc28gZnVsbCBvZiBmZWFyIHdhcyBoZS4gQnV0IEFnZXNpbGHDvHMsIHdoZW4gdGhlIGVuZW15IHRyaWVkIHRvIGNyb3NzIHRoZSBFdXJvdGFzIGFuZCBmb3JjZSB0aGVpciB3YXkgdG8gdGhlIGNpdHksIGFiYW5kb25lZCB0aGUgcmVzdCBvZiBpdCBhbmQgZHJldyB1cCBoaXMgZm9yY2VzIGluIGZyb250IG9mIGl0cyBjZW50cmFsIGFuZCBsb2Z0eSBwcmVjaW5jdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIEV1cm90YXMgYXQgdGhpcyB0aW1lIHdhcyBmbG93aW5nIGF0IGl0cyBmdWxsZXN0IGFuZCBkZWVwZXN0LCBzaW5jZSBzbm93cyBoYWQgZmFsbGVuLCBhbmQgaXRzIGN1cnJlbnQsIGV2ZW4gbW9yZSBmcm9tIGl0cyBjb2xkbmVzcyB0aGFuIGl0cyB2aW9sZW5jZSwgd2FzIHZlcnkgdHJvdWJsZXNvbWUgdG8gdGhlIFRoZWJhbnMuIEFzIEVwYW1pbm9uZGFzIHdhcyBmb3JkaW5nIGl0IGF0IHRoZSBoZWFkIG9mIGhpcyBwaGFsYW54LCBjZXJ0YWluIG9uZXMgcG9pbnRlZCBoaW0gb3V0IHRvIEFnZXNpbGHDvHMsIGFuZCBoZSwgd2UgYXJlIHRvbGQsIGFmdGVyIGZpeGluZyBoaXMgZ2F6ZSB1cG9uIGhpbSBhbmQgd2F0Y2hpbmcgaGltIGZvciBhIGxvbmcgdGltZSwgc2FpZCBidXQgdGhlc2Ugd29yZHM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBhZHZlbnR1cm91cyBtYW4hPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkVwYW1pbm9uZGFzIHdhcyBhbWJpdGlvdXMgdG8gam9pbiBiYXR0bGUgaW4gdGhlIGNpdHkgYW5kIHNldCB1cCBhIHRyb3BoeSBvZiB2aWN0b3J5IHRoZXJlLCBidXQgc2luY2UgaGUgY291bGQgbmVpdGhlciBmb3JjZSBub3IgdGVtcHQgQWdlc2lsYcO8cyBvdXQgb2YgaGlzIHBvc2l0aW9ucywgaGUgd2l0aGRyZXcgYW5kIGJlZ2FuIHRvIHJhdmFnZSB0aGUgY291bnRyeS4gTWVhbndoaWxlLCBhYm91dCB0d28gaHVuZHJlZCBvZiB0aGUgTGFjZWRhZW1vbmlhbnMgd2hvIGhhZCBsb25nIGJlZW4gZGlzYWZmZWN0ZWQgYW5kIG11dGlub3VzIGJhbmRlZCB0b2dldGhlciBhbmQgc2VpemVkIHRoZSBJc3Nvcml1bSwgd2hlcmUgdGhlIHRlbXBsZSBvZiBBcnRlbWlzIHN0YW5kcywgYSB3ZWxsLXdhbGxlZCBhbmQgaW5hY2Nlc3NpYmxlIHNwb3QuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBMYWNlZGFlbW9uaWFucyB3aXNoZWQgdG8gbWFrZSBhIGRhc2ggdXBvbiB0aGVtIGF0IG9uY2UsIGJ1dCBBZ2VzaWxhw7xzLCBmZWFyaW5nIHRoZWlyIGluc3VycmVjdGlvbiwgb3JkZXJlZCB0aGUgcmVzdCB0byBrZWVwIHF1aWV0LCB3aGlsZSBoZSBoaW1zZWxmLCB3ZWFyaW5nIGhpcyBjbG9hayBhbmQgYXR0ZW5kZWQgYnkgYSBzaW5nbGUgc2VydmFudCwgd2VudCB0b3dhcmRzIHRoZW0sIGNyeWluZyBvdXQgdGhhdCB0aGV5IGhhZCBtaXN1bmRlcnN0b29kIGhpcyBvcmRlcnM7IGZvciBoZSBoYWQgbm90IGNvbW1hbmRlZCB0aGVtIHRvIGFzc2VtYmxlIGluIHRoYXQgcGxhY2UsIG5vciBpbiBhIGJvZHksIGJ1dCBzb21lIHlvbmRlciAocG9pbnRpbmcgdG8gYW5vdGhlciBzcG90KSwgYW5kIHNvbWUgaW4gYW5vdGhlciBwYXJ0IG9mIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHdlcmUgZGVsaWdodGVkIHRvIGhlYXIgdGhpcywgc3VwcG9zaW5nIHRoYXQgdGhlaXIgZGVzaWduIHdhcyB1bmRpc2NvdmVyZWQsIGFuZCwgYnJlYWtpbmcgdXAsIHdlbnQgb2ZmIHRvIHRoZSBwbGFjZXMgd2hpY2ggaGUgb3JkZXJlZCB0aGVtIHRvIG9jY3VweS4gVGhlbiBBZ2VzaWxhw7xzIGF0IG9uY2Ugc3VtbW9uZWQgb3RoZXIgdHJvb3BzIGFuZCB0b29rIHBvc3Nlc3Npb24gb2YgdGhlIElzc29yaXVtLCBhZnRlciB3aGljaCBoZSBhcnJlc3RlZCBhYm91dCBmaWZ0ZWVuIG9mIHRoZSBjb25zcGlyYXRvcnMgd2hvIGhhZCBiZWVuIGdhdGhlcmVkIHRoZXJlLCBhbmQgcHV0IHRoZW0gdG8gZGVhdGggaW4gdGhlIG5pZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgYWxzbyBpbmZvcm1lZCBvZiBhbm90aGVyIGFuZCBhIGxhcmdlciBjb25zcGlyYWN5IG9mIFNwYXJ0YW5zLCB3aG8gbWV0IHNlY3JldGx5IGluIGEgaG91c2UgYW5kIHRoZXJlIHBsb3R0ZWQgcmV2b2x1dGlvbi4gSXQgd2FzIGltcHJhY3RpY2FibGUgZWl0aGVyIHRvIGJyaW5nIHRoZXNlIG1lbiB0byB0cmlhbCBpbiBhIHRpbWUgb2Ygc28gbXVjaCBjb25mdXNpb24sIG9yIHRvIG92ZXJsb29rIHRoZWlyIHBsb3RzLiBBY2NvcmRpbmdseSwgQWdlc2lsYcO8cyBjb25mZXJyZWQgd2l0aCB0aGUgZXBob3JzLCBhbmQgdGhlbiBwdXQgdGhlc2UgbWVuIGFsc28gdG8gZGVhdGggd2l0aG91dCBwcm9jZXNzIG9mIGxhdywgYWx0aG91Z2ggbm8gU3BhcnRhbiBoYWQgZXZlciBiZWZvcmUgbWV0IHdpdGggc3VjaCBhIGRlYXRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUsIGFsc28sIG1hbnkgb2YgdGhlIHByb3ZpbmNpYWxzIGFuZCBIZWxvdHMgd2hvIGhhZCBiZWVuIGVucm9sbGVkIGluIHRoZSBhcm15IHJhbiBhd2F5IGZyb20gdGhlIGNpdHkgYW5kIGpvaW5lZCB0aGUgZW5lbXksIGFuZCB0aGlzIGNhdXNlZCB2ZXJ5IGRlZXAgZGlzY291cmFnZW1lbnQuIEFnZXNpbGHDvHMgdGhlcmVmb3JlIGluc3RydWN0ZWQgaGlzIHNlcnZhbnRzIHRvIGdvIGV2ZXJ5IG1vcm5pbmcgYmVmb3JlIGl0IHdhcyBsaWdodCB0byB0aGUgYmFycmFja3MgYW5kIHRha2UgdGhlIGFybXMgb2YgdGhlIGRlc2VydGVycyBhbmQgaGlkZSB0aGVtLCB0aGF0IHRoZWlyIG51bWJlcnMgbWlnaHQgbm90IGJlIGtub3duLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIHRoZSByZWFzb24gd2h5IHRoZSBUaGViYW5zIHdpdGhkcmV3IGZyb20gTGFjb25pYSwgbW9zdCB3cml0ZXJzIHNheSB0aGF0IGl0IHdhcyBiZWNhdXNlIHdpbnRlciBzdG9ybXMgY2FtZSBvbiBhbmQgdGhlIEFyY2FkaWFucyBiZWdhbiB0byBtZWx0IGF3YXkgYW5kIGRpc2JhbmQ7IG90aGVycywgYmVjYXVzZSB0aGV5IGhhZCByZW1haW5lZCB0aGVyZSB0aHJlZSBlbnRpcmUgbW9udGhzIGFuZCB0aG9yb3VnaGx5IHJhdmFnZWQgbW9zdCBvZiB0aGUgY291bnRyeTsKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFsbCB0aHJlZSByZWFzb25zIGFyZSBnaXZlbiBieSBYZW5vcGhvbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi41LjUwIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmkuIDUuIDUwPC9iaWJsPikuPC9ub3RlPiBidXQgVGhlb3BvbXB1cyBzYXlzIHRoYXQgd2hlbiB0aGUgVGhlYmFuIGNoaWVmIG1hZ2lzdHJhdGVzIGhhZCBhbHJlYWR5IGRldGVybWluZWQgdG8gdGFrZSB0aGVpciBhcm15IGJhY2ssIFBocml4dXMsIGEgU3BhcnRhbiwgY2FtZSB0byB0aGVtLCBicmluZ2luZyB0ZW4gdGFsZW50cyBmcm9tIEFnZXNpbGHDvHMgdG8gcGF5IGZvciB0aGVpciB3aXRoZHJhd2FsLCBzbyB0aGF0IHRoZXkgd2VyZSBvbmx5IGRvaW5nIHdoYXQgdGhleSBoYWQgbG9uZyBhZ28gZGVjaWRlZCB0byBkbywgYW5kIGhhZCB0aGVpciBleHBlbnNlcyBwYWlkIGJ5IHRoZWlyIGVuZW1pZXMgYmVzaWRlcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3RvcnkgbWF5IGJlIHRydWUsIGFsdGhvdWdoIEkga25vdyBub3QgaG93IGFsbCBvdGhlciB3cml0ZXJzIGNvdWxkIGJlIGlnbm9yYW50IG9mIGl0LCB3aGlsZSBUaGVvcG9tcHVzIGFsb25lIGhlYXJkIGl0OyBidXQsIGF0IGFueSByYXRlLCBhbGwgYWdyZWUgdGhhdCB0aGUgc2FsdmF0aW9uIG9mIFNwYXJ0YSBhdCB0aGlzIHRpbWUgd2FzIGR1ZSB0byBBZ2VzaWxhw7xzLCBiZWNhdXNlIGhlIHJlbm91bmNlZCBoaXMgaW5oZXJlbnQgcGFzc2lvbnMgb2YgY29udGVudGlvdXNuZXNzIGFuZCBhbWJpdGlvbiwgYW5kIGFkb3B0ZWQgYSBwb2xpY3kgb2Ygc2FmZXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBjb3VsZCBub3QsIGhvd2V2ZXIsIHJlc3RvcmUgdGhlIHBvd2VyIGFuZCByZXB1dGF0aW9uIG9mIGhpcyBjaXR5IGFmdGVyIGl0cyBmYWxsLCBmb3IgaXQgd2FzIGxpa2UgYSBodW1hbiBib2R5IHRoYXQgaXMgc291bmQsIGluZGVlZCwgYnV0IGhhcyBmb2xsb3dlZCBhbGwgdGhlIHdoaWxlIHRvbyBzdHJpY3QgYW5kIHNldmVyZSBhIHJlZ2ltZW47IGEgc2luZ2xlIGVycm9yIHR1cm5lZCB0aGUgc2NhbGUgYW5kIGJyb3VnaHQgZG93biB0aGUgZW50aXJlIHByb3NwZXJpdHkgb2YgdGhlIGNpdHkuIE5vciB3YXMgdGhpcyBzdHJhbmdlLiBGb3IgdG8gYSBjaXZpbCBwb2xpdHkgYmVzdCBhcnJhbmdlZCBmb3IgcGVhY2UgYW5kIHZpcnR1ZSBhbmQgdW5hbmltaXR5IHRoZXkgaGFkIGF0dGFjaGVkIGVtcGlyZXMgYW5kIHNvdmVyZWlnbnRpZXMgd29uIGJ5IGZvcmNlLCBub3Qgb25lIG9mIHdoaWNoIEx5Y3VyZ3VzIHRob3VnaHQgbmVlZGZ1bCBmb3IgYSBjaXR5IHRoYXQgd2FzIHRvIGxpdmUgaW4gaGFwcGluZXNzOyBhbmQgdGhlcmVmb3JlIHRoZXkgZmVsbC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMgaGltc2VsZiBub3cgZGVjbGluZWQgbWlsaXRhcnkgc2VydmljZSBvbiBhY2NvdW50IG9mIGhpcyB5ZWFycywgYnV0IEFyY2hpZGFtdXMgaGlzIHNvbiwgd2l0aCBhc3Npc3RhbmNlIHdoaWNoIGNhbWUgZnJvbSB0aGUgdHlyYW50IG9mIFNpY2lseSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkRpb255c2l1cyB0aGUgRWxkZXIuPC9ub3RlPiBjb25xdWVyZWQgdGhlIEFyY2FkaWFucyBpbiB0aGUgc28tY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGVhcmxlc3MgYmF0dGxlLDwvcT4gd2hlcmUgbm90IG9uZSBvZiBoaXMgb3duIG1lbiBmZWxsLCBhbmQgaGUgc2xldyBncmVhdCBudW1iZXJzIG9mIHRoZSBlbmVteS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM2OCBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA3LjEuMjgiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aWkuIDEsIDI4LTMyPC9iaWJsPikuPC9ub3RlPiBUaGlzIHZpY3RvcnksIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlLCBzaG93ZWQgdGhlIHdlYWtuZXNzIG9mIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdXAgdG8gdGhpcyB0aW1lIHRoZXkgd2VyZSB3b250IHRvIHRoaW5rIHRoZSBjb25xdWVzdCBvZiB0aGVpciBlbmVtaWVzIHNvIGN1c3RvbWFyeSBhbmQgbmF0dXJhbCBhIHRoaW5nIGZvciB0aGVtIHRvIGFjaGlldmUsIHRoYXQgbm8gc2FjcmlmaWNlIGZvciB2aWN0b3J5IHdhcyBvZmZlcmVkIGluIHRoZSBjaXR5IHRvIHRoZSBnb2RzLCBiZXlvbmQgdGhhdCBvZiBhIGNvY2ssIG5laXRoZXIgZGlkIHRoZSB3aW5uZXJzIG9mIHRoZSBjb250ZXN0IGV4dWx0LCBub3IgdGhvc2Ugd2hvIGhlYXJkIG9mIHRoZWlyIHZpY3Rvcnkgc2hvdyBncmVhdCBqb3kuIE5heSwgZXZlbiBhZnRlciB0aGUgYmF0dGxlIGF0IE1hbnRpbmVhLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDE4IEIuQy4sIHdoZW4gdGhlIExhY2VkYWVtb25pYW5zIGRlZmVhdGVkIGFuIGFsbGllZCBmb3JjZSBvZiBNYW50aW5lYW5zLCBBcmdpdmVzLCBhbmQgQXRoZW5pYW5zICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gNS42NCIgdmFsaWQ9InllcyI+VGh1Y3lkaWRlcywgdi4gNjQtNzU8L2JpYmw+KS48L25vdGU+IHdoaWNoIFRodWN5ZGlkZXMgaGFzIGRlc2NyaWJlZCwgdGhlIG9uZSB3aG8gZmlyc3QgYW5ub3VuY2VkIHRoZSB2aWN0b3J5IGhhZCBubyBvdGhlciByZXdhcmQgZm9yIGhpcyBnbGFkIHRpZGluZ3MgdGhhbiBhIHBpZWNlIG9mIG1lYXQgc2VudCBieSB0aGUgbWFnaXN0cmF0ZXMgZnJvbSB0aGUgcHVibGljIG1lc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3csIGF0IHRoZSBuZXdzIG9mIHRoZSBBcmNhZGlhbiB2aWN0b3J5IGFuZCBhdCB0aGUgYXBwcm9hY2ggb2YgQXJjaGlkYW11cywgbm8gb25lIGNvdWxkIHJlc3RyYWluIGhpbXNlbGYsIGJ1dCBmaXJzdCBoaXMgZmF0aGVyIHdlbnQgdG8gbWVldCBoaW0sIHdlZXBpbmcgZm9yIGpveSwgYW5kIGFmdGVyIGhpbSB0aGUgY2hpZWYgbWFnaXN0cmF0ZXMsIHdoaWxlIHRoZSBlbGRlcmx5IG1lbiBhbmQgdGhlIHdvbWVuIHdlbnQgZG93biBpbiBhIHRocm9uZyB0byB0aGUgcml2ZXIsIGxpZnRpbmcgdGhlaXIgaGFuZHMgdG8gaGVhdmVuIGFuZCBibGVzc2luZyB0aGUgZ29kcywgYXMgaWYgU3BhcnRhIGhhZCB3aXBlZCBhd2F5IGhlciB1bm1lcml0ZWQgZGlzZ3JhY2VzIGFuZCBub3cgc2F3IHRoZSBsaWdodCBzaGluZSBicmlnaHQgYWdhaW4gYXMgb2Ygb2xkOyBmb3IgYmVmb3JlIHRoaXMsIHdlIGFyZSB0b2xkLCBoZXIgbWVuIGNvdWxkIG5vdCBzbyBtdWNoIGFzIGxvb2sgdGhlaXIgd2l2ZXMgaW4gdGhlIGZhY2UsIG91dCBvZiBzaGFtZSBhdCB0aGVpciBkaXNhc3RlcnMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBNZXNzZW5lIHdhcyBidWlsdCBieSBFcGFtaW5vbmRhcywgYW5kIGl0cyBmb3JtZXIgY2l0aXplbnMgZmxvY2tlZCBpbnRvIGl0IGZyb20gYWxsIHF1YXJ0ZXJzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzY5IEIuQy48L25vdGU+IHRoZSBTcGFydGFucyBoYWQgbm90IHRoZSBjb3VyYWdlIHRvIGNvbnRlc3QgdGhlIGlzc3VlIG5vciB0aGUgYWJpbGl0eSB0byBoaW5kZXIgaXQsIGJ1dCBjaGVyaXNoZWQgdGhlIGRlZXBlc3QgcmVzZW50bWVudCBhZ2FpbnN0IEFnZXNpbGHDvHMsIGJlY2F1c2UgYSBjb3VudHJ5IHdoaWNoIHdhcyBub3Qgb2YgbGVzcyBleHRlbnQgdGhhbiB0aGVpciBvd24sIHdoaWNoIHN0b29kIGZpcnN0IGFtb25nIEhlbGxlbmljIGxhbmRzIGZvciBpdHMgZmVydGlsaXR5LCB0aGUgcG9zc2Vzc2lvbiBhbmQgZnJ1aXRzIG9mIHdoaWNoIHRoZXkgaGFkIGVuam95ZWQgZm9yIHNvIGxvbmcgYSB0aW1lLCBoYWQgYmVlbiBsb3N0IGJ5IHRoZW0gZHVyaW5nIGhpcyByZWlnbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uLCB0b28sIEFnZXNpbGHDvHMgd291bGQgbm90IGFjY2VwdCB0aGUgcGVhY2Ugd2hpY2ggd2FzIHByb2ZmZXJlZCBieSB0aGUgVGhlYmFucy4gSGUgd2FzIG5vdCB3aWxsaW5nIHRvIGdpdmUgdXAgdG8gdGhlbSBmb3JtYWxseSB0aGUgY291bnRyeSB3aGljaCB3YXMgYWN0dWFsbHkgaW4gdGhlaXIgcG93ZXIsIGFuZCBwZXJzaXN0ZWQgaW4gaGlzIG9wcG9zaXRpb24uIEFzIGEgY29uc2VxdWVuY2UsIGhlIG5vdCBvbmx5IGRpZCBub3QgcmVjb3ZlciBNZXNzZW5pYSwgYnV0IGFsbW9zdCBsb3N0IFNwYXJ0YSBiZXNpZGVzLCBhZnRlciBiZWluZyBvdXRnZW5lcmFsbGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiB0aGUgTWFudGluZWFucyBjaGFuZ2VkIHRoZWlyIGFsbGVnaWFuY2UsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNjIgQi5DLjwvbm90ZT4gcmV2b2x0ZWQgZnJvbSBUaGViZXMsIGFuZCBjYWxsZWQgaW4gdGhlIExhY2VkYWVtb25pYW5zIHRvIGhlbHAgdGhlbSwgRXBhbWlub25kYXMsIGxlYXJuaW5nIHRoYXQgQWdlc2lsYcO8cyBoYWQgbWFyY2hlZCBvdXQgZnJvbSBTcGFydGEgd2l0aCBoaXMgZm9yY2VzIGFuZCB3YXMgYXBwcm9hY2hpbmcsIHNldCBvdXQgYnkgbmlnaHQgZnJvbSBUZWdlYSwgd2l0aG91dCB0aGUga25vd2xlZGdlIG9mIHRoZSBNYW50aW5lYW5zLCBhbmQgbGVkIGhpcyBhcm15IGFnYWluc3QgU3BhcnRhIGl0c2VsZi4gSGUgcGFzc2VkIGJ5IEFnZXNpbGHDvHMsIGFuZCBjYW1lIHdpdGhpbiBhIGxpdHRsZSBvZiBzdWRkZW5seSBzZWl6aW5nIHRoZSBjaXR5IGluIGEgZGVmZW5jZWxlc3Mgc3RhdGUuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGlrZSBhIG5lc3Qgb2YgeW91bmcgYmlyZHMgdXR0ZXJseSBiZXJlZnQgb2YgaXRzIG5hdHVyYWwgZGVmZW5kZXJzPC9xPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNy41LjEwIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmlpLiA1LCAxMDwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgRXV0aHludXMsIGEgVGhlc3BpYW4sIGFzIENhbGxpc3RoZW5lcyBzYXlzLCBvciwgYWNjb3JkaW5nIHRvIFhlbm9waG9uLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDcuNS4xMCIgdmFsaWQ9InllcyI+TG9jLiBjaXQuPC9iaWJsPiBDZi4gYWxzbyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuODIuNiIgdmFsaWQ9InllcyI+RGlvZG9ydXMsIHh2LCA4MiwgNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYSBjZXJ0YWluIENyZXRhbiwgYnJvdWdodCB3b3JkIHRvIEFnZXNpbGHDvHMsIHdobyBxdWlja2x5IHNlbnQgb24gYSBob3JzZW1hbiB0byB3YXJuIHRoZSBwZW9wbGUgaW4gU3BhcnRhLCBhbmQgbm90IGxvbmcgYWZ0ZXIgaGlzIGFycml2YWwgdGhlIFRoZWJhbnMgd2VyZSBjcm9zc2luZyB0aGUgRXVyb3RhcyBhbmQgYXR0YWNraW5nIHRoZSBjaXR5LCB3aGlsZSBBZ2VzaWxhw7xzIGRlZmVuZGVkIGl0IHJpZ2h0IHZpZ29yb3VzbHkgYW5kIGluIGEgbWFubmVyIG5vdCB0byBiZSBleHBlY3RlZCBvZiBoaXMgeWVhcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBkaWQgbm90IHRoaW5rLCBhcyBvbiBhIGZvcm1lciBvY2Nhc2lvbiwgdGhhdCB0aGUgY3Jpc2lzIGRlbWFuZGVkIHNhZmUgYW5kIGNhdXRpb3VzIG1lYXN1cmVzLCBidXQgcmF0aGVyIGRlZWRzIG9mIGRlc3BlcmF0ZSBkYXJpbmcuIEluIHRoZXNlIGhlIGhhZCBuZXZlciBwdXQgY29uZmlkZW5jZSBiZWZvcmUsIG5vciBoYWQgaGUgZW1wbG95ZWQgdGhlbSwgYnV0IHRoZW4gaXQgd2FzIG9ubHkgYnkgdGhlaXIgYWlkIHRoYXQgaGUgcmVwZWxsZWQgdGhlIGRhbmdlciwgc25hdGNoaW5nIHRoZSBjaXR5IG91dCBvZiB0aGUgZ3Jhc3Agb2YgRXBhbWlub25kYXMsIGVyZWN0aW5nIGEgdHJvcGh5IG9mIHZpY3RvcnksIGFuZCBzaG93aW5nIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIG1ha2luZyB0aGUgZmFpcmVzdCBvZiBhbGwgcmV0dXJucyB0byB0aGVpciBjb3VudHJ5IGZvciBpdHMgcmVhcmluZyBvZiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BcmNoaWRhbXVzLCB0b28sIGZvdWdodCBhbW9uZyB0aGUgZm9yZW1vc3QsIGNvbnNwaWN1b3VzIGZvciBoaXMgaW1wZXR1b3VzIGNvdXJhZ2UgYW5kIGZvciBoaXMgYWdpbGl0eSwgcnVubmluZyBzd2lmdGx5IHRocm91Z2ggdGhlIG5hcnJvdyBzdHJlZXRzIHRvIHRoZSBlbmRhbmdlcmVkIHBvaW50cyBpbiB0aGUgYmF0dGxlLCBhbmQgZXZlcnl3aGVyZSBwcmVzc2luZyBoYXJkIHVwb24gdGhlIGVuZW15IHdpdGggaGlzIGZldyBmb2xsb3dlcnMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNy41LjEyIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmlpLiA1LCAxMi0xNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQnV0IEkgdGhpbmsgdGhhdCBJc2lkYXMsIHRoZSBzb24gb2YgUGhvZWJpZGFzLCBtdXN0IGhhdmUgYmVlbiBhIHN0cmFuZ2UgYW5kIG1hcnZlbGxvdXMgc2lnaHQsIG5vdCBvbmx5IHRvIGhpcyBmZWxsb3ctY2l0aXplbnMsIGJ1dCBhbHNvIHRvIGhpcyBlbmVtaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgb2YgY29uc3BpY3VvdXMgYmVhdXR5IGFuZCBzdGF0dXJlLCBhbmQgYXQgYW4gYWdlIHdoZW4gdGhlIGh1bWFuIGZsb3dlciBoYXMgdGhlIGdyZWF0ZXN0IGNoYXJtLCBhcyB0aGUgYm95IG1lcmdlcyBpbnRvIHRoZSBtYW4uIE5ha2VkIGFzIGhlIHdhcywgd2l0aG91dCBlaXRoZXIgZGVmZW5zaXZlIGFybW91ciBvciBjbG90aGluZyzigJRmb3IgaGUgaGFkIGp1c3QgYW5vaW50ZWQgaGlzIGJvZHkgd2l0aCBvaWws4oCUaGUgdG9vayBhIHNwZWFyIGluIG9uZSBoYW5kLCBhbmQgYSBzd29yZCBpbiB0aGUgb3RoZXIsIGxlYXBlZCBmb3J0aCBmcm9tIGhpcyBob3VzZSwgYW5kIGFmdGVyIHB1c2hpbmcgaGlzIHdheSB0aHJvdWdoIHRoZSBtaWRzdCBvZiB0aGUgY29tYmF0YW50cywgcmFuZ2VkIHVwIGFuZCBkb3duIGFtb25nIHRoZSBlbmVteSwgc21pdGluZyBhbmQgbGF5aW5nIGxvdyBhbGwgd2hvIGVuY291bnRlcmVkIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vIG1hbiBnYXZlIGhpbSBhIHdvdW5kLCB3aGV0aGVyIGl0IHdhcyB0aGF0IGEgZ29kIHNoaWVsZGVkIGhpbSBvbiBhY2NvdW50IG9mIGhpcyB2YWxvdXIsIG9yIHRoYXQgdGhlIGVuZW15IHRob3VnaHQgaGltIHRhbGxlciBhbmQgbWlnaHRpZXIgdGhhbiBhIG1lcmUgbWFuIGNvdWxkIGJlLiBGb3IgdGhpcyBleHBsb2l0IGl0IGlzIHNhaWQgdGhhdCB0aGUgZXBob3JzIHB1dCBhIGdhcmxhbmQgb24gaGlzIGhlYWQsIGFuZCB0aGVuIGZpbmVkIGhpbSBhIHRob3VzYW5kIGRyYWNobWFzLCBiZWNhdXNlIGhlIGhhZCBkYXJlZCB0byBoYXphcmQgaGlzIGxpZmUgaW4gYmF0dGxlIHdpdGhvdXQgYXJtb3VyLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSBmZXcgZGF5cyBhZnRlcndhcmRzIGEgYmF0dGxlIHdhcyBmb3VnaHQgbmVhciBNYW50aW5lYSwgaW4gd2hpY2ggRXBhbWlub25kYXMgaGFkIGFscmVhZHkgcm91dGVkIHRoZSB2YW4gb2YgdGhlIExhY2VkYWVtb25pYW5zLCBhbmQgd2FzIHN0aWxsIGVhZ2VybHkgcHJlc3Npbmcgb24gaW4gcHVyc3VpdCBvZiB0aGVtLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDcuNS4yMiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHZpaS4gNSwgMjItMjQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoZW4gQW50aWNyYXRlcywgYSBTcGFydGFuLCBmYWNlZCBoaW0gYW5kIHNtb3RlIGhpbSB3aXRoIGEgc3BlYXIsIGFzIERpb3Njb3JpZGVzIHRlbGxzIHRoZSBzdG9yeTsgYnV0IHRoZSBMYWNlZGFlbW9uaWFucyB0byB0aGlzIGRheSBjYWxsIHRoZSBkZXNjZW5kYW50cyBvZiBBbnRpY3JhdGVzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bWFjaGFlcmlvbmVzLDwvcT4gb3IgPGVtcGg+CiAgICAgICAgICAgICAgIDxlbXBoPnN3b3Jkc21lbjwvZW1waD4KICAgICAgICAgICAgPC9lbXBoPiwgYmVjYXVzZSBoZSB1c2VkIGEgc3dvcmQgZm9yIHRoZSBibG93LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIExhY2VkYWVtb25pYW5zIHdlcmUgZmlsbGVkIHdpdGggc3VjaCBhZG1pcmluZyBsb3ZlIGZvciBoaW0gYmVjYXVzZSBvZiB0aGUgZmVhciBpbiB3aGljaCB0aGV5IGhlbGQgRXBhbWlub25kYXMgd2hpbGUgbGl2aW5nLCB0aGF0IHRoZXkgdm90ZWQgaG9ub3VycyBhbmQgZ2lmdHMgdG8gQW50aWNyYXRlcyBoaW1zZWxmLCBhbmQgdG8gaGlzIHBvc3Rlcml0eSBleGVtcHRpb24gZnJvbSB0YXhlcywgYW4gaW1tdW5pdHkgd2hpY2ggaW4gbXkgb3duIGRheSBhbHNvIGlzIGVuam95ZWQgYnkgQ2FsbGljcmF0ZXMsIG9uZSBvZiB0aGUgZGVzY2VuZGFudHMgb2YgQW50aWNyYXRlcy4KCQkJPC9wPgogICAgICAgICA8cD5BZnRlciB0aGUgYmF0dGxlIGFuZCB0aGUgZGVhdGggb2YgRXBhbWlub25kYXMsIHdoZW4gdGhlIEdyZWVrcyBjb25jbHVkZWQgcGVhY2UgYW1vbmcgdGhlbXNlbHZlcywgQWdlc2lsYcO8cyBhbmQgaGlzIHBhcnRpc2FucyB0cmllZCB0byBleGNsdWRlIHRoZSBNZXNzZW5pYW5zIGZyb20gdGhlIG9hdGggb2YgcmF0aWZpY2F0aW9uLCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhleSBoYWQgbm8gY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gYWxsIHRoZSByZXN0IGFkbWl0dGVkIHRoZSBNZXNzZW5pYW5zIGFuZCBhY2NlcHRlZCB0aGVpciBvYXRocywgdGhlIExhY2VkYWVtb25pYW5zIGhlbGQgYWxvb2YgZnJvbSB0aGUgcGVhY2UsIGFuZCB0aGV5IGFsb25lIHJlbWFpbmVkIGF0IHdhciBpbiB0aGUgaG9wZSBvZiByZWNvdmVyaW5nIE1lc3NlbmlhLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNS44OS4xIiB2YWxpZD0ieWVzIj5EaW9kb3J1cywgeHYuIDg5LCAxIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFnZXNpbGHDvHMgd2FzIHRoZXJlZm9yZSBkZWVtZWQgYSBoZWFkc3Ryb25nIGFuZCBzdHViYm9ybiBtYW4sIGFuZCBpbnNhdGlhYmxlIG9mIHdhciwgc2luY2UgaGUgZGlkIGFsbCBpbiBoaXMgcG93ZXIgdG8gdW5kZXJtaW5lIGFuZCBwb3N0cG9uZSB0aGUgZ2VuZXJhbCBwZWFjZSwgYW5kIGFnYWluIHNpbmNlIGhpcyBsYWNrIG9mIHJlc291cmNlcyBjb21wZWxsZWQgaGltIHRvIGxheSBidXJkZW5zIG9uIGhpcyBmcmllbmRzIGluIHRoZSBjaXR5IGFuZCB0byB0YWtlIGxvYW5zIGFuZCBjb250cmlidXRpb25zIGZyb20gdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBpdCB3YXMgaGlzIGR1dHkgdG8gcHV0IGFuIGVuZCB0byB0aGVpciBldmlscywgbm93IHRoYXQgb3Bwb3J0dW5pdHkgb2ZmZXJlZCwgYW5kIG5vdCwgYWZ0ZXIgaGF2aW5nIGxvc3QgU3BhcnRhJ3Mgd2hvbGUgZW1waXJlLCB2YXN0IGFzIGl0IHdhcywgd2l0aCBpdHMgY2l0aWVzIGFuZCBpdHMgc3VwcmVtYWN5IG9uIGxhbmQgYW5kIHNlYSwgdGhlbiB0byBjYXJyeSBvbiBhIHBldHR5IHN0cnVnZ2xlIGZvciB0aGUgZ29vZHMgYW5kIHJldmVudWVzIG9mIE1lc3NlbmUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBsb3N0IHN0aWxsIG1vcmUgcmVwdXRhdGlvbiBieSBvZmZlcmluZyB0byB0YWtlIGEgY29tbWFuZCB1bmRlciBUYWNob3MgdGhlIEVneXB0aWFuLiBGb3IgaXQgd2FzIHRob3VnaHQgdW53b3J0aHkgdGhhdCBhIG1hbiB3aG8gaGFkIGJlZW4ganVkZ2VkIG5vYmxlc3QgYW5kIGJlc3QgaW4gSGVsbGFzLCBhbmQgd2hvIGhhZCBmaWxsZWQgdGhlIHdvcmxkIHdpdGggaGlzIGZhbWUsIHNob3VsZCBmdXJuaXNoIGEgcmViZWwgYWdhaW5zdCB0aGUgR3JlYXQgS2luZywgYSBtZXJlIEJhcmJhcmlhbiwgd2l0aCBoaXMgcGVyc29uLCBoaXMgbmFtZSwgYW5kIGhpcyBmYW1lLCBhbmQgdGFrZSBtb25leSBmb3IgaGltLCByZW5kZXJpbmcgdGhlIHNlcnZpY2Ugb2YgYSBoaXJlZCBjYXB0YWluIG9mIG1lcmNlbmFyaWVzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+WGVub3Bob24gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFnZXMuIDIuMjgiIHZhbGlkPSJ5ZXMiPkFnZXNpbGHDvHMsIGlpLiAyOC0zMTwvYmlibD4pIGhhcyBBZ2VzaWxhw7xzIHRha2UgdGhpcyBzdGVwIGluIG9yZGVyIHRvIHB1bmlzaCB0aGUgR3JlYXQgS2luZyBhbmQgbGliZXJhdGUgYWdhaW4gdGhlIEdyZWVrcyBvZiBBc2lhLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZXZlbiBpZiwgbm93IHRoYXQgaGUgd2FzIHBhc3QgZWlnaHR5IHllYXJzIG9mIGFnZSBhbmQgaGlzIHdob2xlIGJvZHkgd2FzIGRpc2ZpZ3VyZWQgd2l0aCB3b3VuZHMsIGhlIGhhZCB0YWtlbiB1cCBhZ2FpbiBoaXMgbm9ibGUgYW5kIGNvbnNwaWN1b3VzIGxlYWRlcnNoaXAgaW4gYmVoYWxmIG9mIHRoZSBmcmVlZG9tIG9mIHRoZSBIZWxsZW5lcywgaGlzIGFtYml0aW9uIHdvdWxkIG5vdCBoYXZlIGJlZW4gYWx0b2dldGhlciBibGFtZWxlc3MsIGFzIG1lbiB0aG91Z2h0LiBGb3IgaG9ub3VyYWJsZSBhY3Rpb24gaGFzIGl0cyBmaXR0aW5nIHRpbWUgYW5kIHNlYXNvbjsgbmF5LCByYXRoZXIsIGl0IGlzIHRoZSBvYnNlcnZhbmNlIG9mIGR1ZSBib3VuZHMgdGhhdCBjb25zdGl0dXRlcyBhbiB1dHRlciBkaWZmZXJlbmNlIGJldHdlZW4gaG9ub3VyYWJsZSBhbmQgYmFzZSBhY3Rpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZ2VzaWxhw7xzLCBob3dldmVyLCBwYWlkIG5vIGhlZWQgdG8gdGhlc2UgY29uc2lkZXJhdGlvbnMsIG5vciBkaWQgaGUgdGhpbmsgYW55IHB1YmxpYyBzZXJ2aWNlIGJlbmVhdGggaGlzIGRpZ25pdHk7IGl0IHdhcyBtb3JlIHVud29ydGh5IG9mIGhpbSwgaW4gaGlzIG9waW5pb24sIHRvIGxpdmUgYW4gaWRsZSBsaWZlIGluIHRoZSBjaXR5LCBhbmQgdG8gc2l0IGRvd24gYW5kIHdhaXQgZm9yIGRlYXRoLiBUaGVyZWZvcmUgaGUgY29sbGVjdGVkIG1lcmNlbmFyaWVzIHdpdGggdGhlIG1vbmV5IHdoaWNoIFRhY2hvcyBzZW50IGhpbSwgZW1iYXJrZWQgdGhlbSBvbiB0cmFuc3BvcnRzLCBhbmQgcHV0IHRvIHNlYSwgYWNjb21wYW5pZWQgYnkgdGhpcnR5IFNwYXJ0YW4gY291bnNlbGxvcnMsIGFzIGZvcm1lcmx5LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2VzLiA2LjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIGhlIGxhbmRlZCBpbiBFZ3lwdCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjM2MSBCLkMuPC9ub3RlPiB0aGUgY2hpZWYgY2FwdGFpbnMgYW5kIGdvdmVybm9ycyBvZiB0aGUga2luZyBjYW1lIGRvd24gdG8gbWVldCBoaW0gYW5kIHBheSBoaW0gaG9ub3VyLiBUaGVyZSB3YXMgZ3JlYXQgZWFnZXJuZXNzIGFuZCBleHBlY3RhdGlvbiBvbiB0aGUgcGFydCBvZiB0aGUgb3RoZXIgRWd5cHRpYW5zIGFsc28sIG93aW5nIHRvIHRoZSBuYW1lIGFuZCBmYW1lIG9mIEFnZXNpbGHDvHMsIGFuZCBhbGwgcmFuIHRvZ2V0aGVyIHRvIGJlaG9sZCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZXkgc2F3IG5vIGJyaWxsaWFudCBhcnJheSB3aGF0ZXZlciwgYnV0IGFuIG9sZCBtYW4gbHlpbmcgaW4gc29tZSBncmFzcyBieSB0aGUgc2VhLCBoaXMgYm9keSBzbWFsbCBhbmQgY29udGVtcHRpYmxlLCBjb3ZlcmVkIHdpdGggYSBjbG9hayB0aGF0IHdhcyBjb2Fyc2UgYW5kIG1lYW4sIHRoZXkgd2VyZSBtb3ZlZCB0byBsYXVnaHRlciBhbmQgamVzdGluZywgc2F5aW5nIHRoYXQgaGVyZSB3YXMgYW4gaWxsdXN0cmF0aW9uIG9mIHRoZSBmYWJsZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hIG1vdW50YWluIGlzIGluIHRyYXZhaWwsIGFuZCB0aGVuIGEgbW91c2UgaXMgYm9ybi48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBdGguIDE0LjYxNmQiPkF0aGVuYWV1cyBwLiA2MTYgZDwvYmlibD4sIGl0IGlzIFRhY2hvcyBoaW1zZWxmIHdobyBtYWtlcyB0aGlzIGplc3QgdXBvbiBBZ2VzaWxhw7xzLCB3aG8gcmVwbGllcyBpbiBhbmdlcjogCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U29tZSBkYXkgeW91IHdpbGwgdGhpbmsgbWUgYSBsaW9uLjwvcT4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSBzdGlsbCBtb3JlIHN1cnByaXNlZCwgdG9vLCBhdCBoaXMgZWNjZW50cmljaXR5LiBXaGVuIGFsbCBtYW5uZXIgb2YgaG9zcGl0YWJsZSBnaWZ0cyB3ZXJlIGJyb3VnaHQgdG8gaGltLCBoZSBhY2NlcHRlZCB0aGUgZmxvdXIsIHRoZSBjYWx2ZXMsIGFuZCB0aGUgZ2Vlc2UsIGJ1dCByZWplY3RlZCB0aGUgc3dlZXRtZWF0cywgdGhlIHBhc3RyaWVzLCBhbmQgdGhlIHBlcmZ1bWVzLCBhbmQgd2hlbiBoZSB3YXMgdXJnZWQgYW5kIGJlc291Z2h0IHRvIHRha2UgdGhlbSwgb3JkZXJlZCB0aGVtIHRvIGJlIGNhcnJpZWQgYW5kIGdpdmVuIHRvIGhpcyBIZWxvdHMuIEhlIHdhcyBwbGVhc2VkLCBob3dldmVyLCBhcyBUaGVvcGhyYXN0dXMgdGVsbHMgdXMsIHdpdGggdGhlIHBhcHlydXMgdXNlZCBpbiBjaGFwbGV0cywgYmVjYXVzZSB0aGUgY2hhcGxldHMgd2VyZSBzbyBuZWF0IGFuZCBzaW1wbGUsIGFuZCB3aGVuIGhlIGxlZnQgRWd5cHQsIGFza2VkIGFuZCByZWNlaXZlZCBzb21lIGZyb20gdGhlIGtpbmcuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm93LCBvbiBqb2luaW5nIFRhY2hvcywgd2hvIHdhcyBtYWtpbmcgcHJlcGFyYXRpb25zIGZvciBoaXMgZXhwZWRpdGlvbiwgaGUgd2FzIG5vdCwgYXMgaGUgZXhwZWN0ZWQsIGFwcG9pbnRlZCBjb21tYW5kZXIgb2YgYWxsIHRoZSBmb3JjZXMsIGJ1dCBvbmx5IG9mIHRoZSBtZXJjZW5hcmllcywgd2hpbGUgQ2hhYnJpYXMgdGhlIEF0aGVuaWFuIGhhZCBjaGFyZ2Ugb2YgdGhlIGZsZWV0LCBhbmQgVGFjaG9zIGhpbXNlbGYgd2FzIGNvbW1hbmRlci1pbi1jaGllZgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNS45Mi4yIiB2YWxpZD0ieWVzIj5EaW9kb3J1cywgeHYuIDkyLCAyIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgdGhlIGZpcnN0IHRoaW5nIHRoYXQgdmV4ZWQgQWdlc2lsYcO8czsgdGhlbiwgdGhvdWdoIGhlIHdhcyBpbmRpZ25hbnQgYXQgdGhlIHZhaW4gcHJldGVuc2lvbnMgb2YgdGhlIGtpbmcgaW4gb3RoZXIgbWF0dGVycywgaGUgd2FzIGNvbXBlbGxlZCB0byBlbmR1cmUgdGhlbS4gSGUgZXZlbiBzYWlsZWQgd2l0aCBoaW0gYWdhaW5zdCB0aGUgUGhvZW5pY2lhbnMsIGZvcmNpbmcgaGltc2VsZiBpbnRvIGEgc3Vic2VydmllbmNlIHdoaWNoIHdhcyBiZW5lYXRoIGhpcyBkaWduaXR5IGFuZCBjb250cmFyeSB0byBoaXMgbmF0dXJlLCB1bnRpbCBoZSBmb3VuZCBoaXMgb3Bwb3J0dW5pdHkuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgTmVjdGFuYWJpcywgd2hvIHdhcyBhIGNvdXNpbiBvZiBUYWNob3MgYW5kIGhhZCBhIHBhcnQgb2YgdGhlIGZvcmNlcyB1bmRlciBoaXMgY29tbWFuZCwgcmV2b2x0ZWQgZnJvbSBoaW0sIGFuZCBoYXZpbmcgYmVlbiBwcm9jbGFpbWVkIGtpbmcgYnkgdGhlIEVneXB0aWFucywgc2VudCB0byBBZ2VzaWxhw7xzIGFza2luZyBmb3IgaGlzIGFpZCBhbmQgYXNzaXN0YW5jZS4gSGUgbWFkZSB0aGUgc2FtZSBhcHBlYWwgdG8gQ2hhYnJpYXMgYWxzbywgcHJvbWlzaW5nIGxhcmdlIGdpZnRzIHRvIGJvdGguIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gVGFjaG9zIGxlYXJuZWQgb2YgdGhpcyBhbmQgcmVzb3J0ZWQgdG8gZW50cmVhdGllcyBmb3IgdGhlaXIgYWxsZWdpYW5jZSwgQ2hhYnJpYXMgdHJpZWQgdG8gcGVyc3VhZGUgYW5kIGVuY291cmFnZSBBZ2VzaWxhw7xzIHRvIGNvbnRpbnVlIHdpdGggaGltIGluIHRoZSBmcmllbmRzaGlwIG9mIFRhY2hvcy4gQnV0IEFnZXNpbGHDvHMgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3UsIENoYWJyaWFzLCB3aG8gY2FtZSBoZXJlIG9uIHlvdXIgb3duIGFjY291bnQsIGNhbiBkZWNpZGUgeW91ciBvd24gY2FzZTsgYnV0IEkgd2FzIGdpdmVuIGJ5IG15IGNvdW50cnkgdG8gdGhlIEVneXB0aWFucyBhcyBhIGdlbmVyYWwuIEl0IHdvdWxkIHRoZXJlZm9yZSBiZSBkaXNob25vdXJhYmxlIGZvciBtZSB0byBtYWtlIHdhciBvbiB0aG9zZSB0byB3aG9tIEkgd2FzIHNlbnQgYXMgYW4gYWxseSwgdW5sZXNzIG15IGNvdW50cnkgZ2l2ZXMgbWUgYSBuZXcgY29tbWFuZCB0byBkbyBzby48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlc2Ugd29yZHMsIGhlIHNlbnQgbWVuIHRvIFNwYXJ0YSB3aG8gd2VyZSB0byBkZW5vdW5jZSBUYWNob3MsIGFuZCBjb21tZW5kIE5lY3RhbmFiaXMuIFRhY2hvcyBhbmQgTmVjdGFuYWJpcyBhbHNvIHNlbnQgYW5kIGJlc291Z2h0IHRoZSBzdXBwb3J0IG9mIHRoZSBMYWNlZGFlbW9uaWFucywgdGhlIGZvcm1lciBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgaGFkIGxvbmcgYmVlbiB0aGVpciBhbGx5IGFuZCBmcmllbmQsIHRoZSBsYXR0ZXIgb24gdGhlIHBsZWEgdGhhdCBoZSB3b3VsZCBiZSB3ZWxsIGRpc3Bvc2VkIHRvIHRoZWlyIGNpdHkgYW5kIG1vcmUgZWFnZXIgdG8gcHJvbW90ZSBoZXIgaW50ZXJlc3RzLiBUaGUgTGFjZWRhZW1vbmlhbnMsIGFjY29yZGluZ2x5LCBhZnRlciBoZWFyaW5nIHRoZSBtZXNzZW5nZXJzLCBtYWRlIHB1YmxpYyBhbnN3ZXIgdG8gdGhlIEVneXB0aWFucyB0aGF0IEFnZXNpbGHDvHMgd291bGQgYXR0ZW5kIHRvIHRoZXNlIG1hdHRlcnM7IGJ1dCB0byBBZ2VzaWxhw7xzIHRoZXkgd3JvdGUgcHJpdmF0ZWx5IGJpZGRpbmcgaGltIHNlZSB0byBpdCB0aGF0IHRoZSBpbnRlcmVzdHMgb2YgU3BhcnRhIHNob3VsZCBub3Qgc3VmZmVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5TbyBBZ2VzaWxhw7xzIHRvb2sgaGlzIG1lcmNlbmFyaWVzIGFuZCB3ZW50IG92ZXIgZnJvbSBUYWNob3MgdG8gTmVjdGFuYWJpcywgbWFraW5nIHRoZSBpbnRlcmVzdHMgb2YgaGlzIGNvdW50cnkgc2VydmUgYXMgYSB2ZWlsIGZvciBhIHN0cmFuZ2UgYW5kIHVubmF0dXJhbCBwcm9jZWVkaW5nLCBzaW5jZSB3aGVuIHRoaXMgcHJldGV4dCB3YXMgcmVtb3ZlZCwgdGhlIG1vc3QgZml0dGluZyBuYW1lIGZvciBoaXMgYWN0IHdhcyB0cmVhY2hlcnkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5YZW5vcGhvbiwgd2hvIGNhbiBzZWUgbm8gZmF1bHQgaW4gQWdlc2lsYcO8cywgc2F5cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gMi4zMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BZ2VzaWxhw7xzPC90aXRsZT4sIGlpLiAzMTwvYmlibD4pOiAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BY2NvcmRpbmdseSwgaGUgY2hvc2UgYmV0d2VlbiB0aGUgdHdvIHRoYXQgb25lIHdobyBzZWVtZWQgdG8gYmUgdGhlIHRydWVyIHBhcnRpc2FuIG9mIEhlbGxhcywgYW5kIHdpdGggaGltIG1hcmNoZWQgYWdhaW5zdCB0aGUgZW5lbXkgb2YgSGVsbGFzIGFuZCBjb25xdWVyZWQgaGltIGluIGJhdHRsZS48L3E+CiAgICAgICAgICAgIDwvbm90ZT4gQnV0IHRoZSBMYWNlZGFlbW9uaWFucyBhc3NpZ24gdGhlIGNoaWVmIHBsYWNlIGluIHRoZWlyIGlkZWFzIG9mIGhvbm91ciB0byB0aGUgaW50ZXJlc3RzIG9mIHRoZWlyIGNvdW50cnksIGFuZCBuZWl0aGVyIGxlYXJuIG5vciB1bmRlcnN0YW5kIGFueSBvdGhlciBqdXN0aWNlIHRoYW4gdGhhdCB3aGljaCB0aGV5IHRoaW5rIHdpbGwgZW5oYW5jZSB0aGUgZ2xvcnkgb2YgU3BhcnRhLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGFjaG9zLCBhY2NvcmRpbmdseSwgdGh1cyBkZXNlcnRlZCBieSBoaXMgbWVyY2VuYXJpZXMsIHRvb2sgdG8gZmxpZ2h0LiBCdXQgaW4gTWVuZGVzIGFub3RoZXIgcml2YWwgcm9zZSB1cCBhZ2FpbnN0IE5lY3RhbmFiaXMgYW5kIHdhcyBwcm9jbGFpbWVkIGtpbmcsIGFuZCBhZnRlciBjb2xsZWN0aW5nIGEgaHVuZHJlZCB0aG91c2FuZCBtZW4gYWR2YW5jZWQgYWdhaW5zdCBoaW0uIFRoZW4gTmVjdGFuYWJpcyBzb3VnaHQgdG8gZW5jb3VyYWdlIEFnZXNpbGHDvHMgYnkgc2F5aW5nIHRoYXQgYWx0aG91Z2ggdGhlIGVuZW15IHdlcmUgbnVtZXJvdXMsIHRoZXkgd2VyZSBhIG1peGVkIHJhYmJsZSBvZiBhcnRpc2FucyB3aG9zZSBpbmV4cGVyaWVuY2UgaW4gd2FyIG1hZGUgdGhlbSBjb250ZW1wdGlibGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbmRlZWQsPC9xPiBzYWlkIEFnZXNpbGHDvHMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aXQgaXMgbm90IHRoZWlyIG51bWJlcnMgdGhhdCBJIGZlYXIsIGJ1dCB0aGUgaW5leHBlcmllbmNlIGFuZCBpZ25vcmFuY2Ugb2Ygd2hpY2ggeW91IHNwZWFrLCB3aGljaCBpdCBpcyBoYXJkIHRvIG92ZXJjb21lIGJ5IHN0cmF0YWdlbXMuIEZvciBzdHJhdGFnZW1zIGFycmF5IHVuZXhwZWN0ZWQgZGlmZmljdWx0aWVzIGFnYWluc3QgbWVuIHdobyB0cnkgdG8gZGVmZW5kIHRoZW1zZWx2ZXMgYWdhaW5zdCB0aGVtLCBpZiB0aGV5IHN1c3BlY3QgYW5kIGF3YWl0IHRoZW07IGJ1dCBoZSB3aG8gZG9lcyBub3QgYXdhaXQgbm9yIGV2ZW4gc3VzcGVjdCBhbnkgc3RyYXRhZ2VtIGdpdmVzIG5vIGhvbGQgdG8gdGhlIG9wcG9uZW50IHdobyBpcyB0cnlpbmcgdG8gb3V0d2l0IGhpbSwganVzdCBhcywgaW4gYSB3cmVzdGxpbmcgYm91dCwgaGUgd2hvIGRvZXMgbm90IHN0aXIgZ2l2ZXMgbm8gYWR2YW50YWdlIHRvIGhpcyBhbnRhZ29uaXN0LjwvcT4gQWZ0ZXIgdGhpcywgdGhlIE1lbmRlc2lhbiBhbHNvIHNlbnQgYW5kIHRyaWVkIHRvIHdpbiBvdmVyIEFnZXNpbGHDvHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5lY3RhbmFiaXMgd2FzIHRoZXJlZm9yZSBhbGFybWVkLCBhbmQgd2hlbiBBZ2VzaWxhw7xzIHVyZ2VkIGhpbSB0byBmaWdodCB0aGUgaXNzdWUgb3V0IGFzIHNwZWVkaWx5IGFzIHBvc3NpYmxlLCBhbmQgbm90IHRvIHdhZ2UgYSB3YXIgb2YgZGVsYXlzIGFnYWluc3QgbWVuIHdobyB3ZXJlIGluZXhwZXJpZW5jZWQgaW4gZmlnaHRpbmcsIGJ1dCB3ZXJlIG51bWVyb3VzIGVub3VnaCB0byBzdXJyb3VuZCBoaW0gYW5kIGhlZGdlIGhpbSBpbiBhbmQgYW50aWNpcGF0ZSBhbmQgZ2V0IHRoZSBzdGFydCBvZiBoaW0gaW4gbWFueSB3YXlzLCBoZSBncmV3IHN0aWxsIG1vcmUgc3VzcGljaW91cyBhbmQgZmVhcmZ1bCBvZiBoaW0sIGFuZCByZXRpcmVkIGludG8gYSBjaXR5IHdoaWNoIHdhcyB3ZWxsIGZvcnRpZmllZCBhbmQgaGFkIGEgbGFyZ2UgY29tcGFzcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWdlc2lsYcO8cyB3YXMgaW5jZW5zZWQgYXQgdGhpcyBsYWNrIG9mIGNvbmZpZGVuY2UsIGFuZCBmdWxsIG9mIGluZGlnbmF0aW9uLCBidXQgc2luY2UgaGUgd2FzIGFzaGFtZWQgdG8gY2hhbmdlIHNpZGVzIGFnYWluIGFuZCBmaW5hbGx5IGdvIGJhY2sgaG9tZSB3aXRob3V0IGFjY29tcGxpc2hpbmcgYW55IHRoaW5nLCBoZSBhY2NvbXBhbmllZCBOZWN0YW5hYmlzIGFuZCBlbnRlcmVkIHRoZSBjaXR5IHdpdGggaGltLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIGVuZW15IGNhbWUgdXAgYW5kIGJlZ2FuIHRvIHN1cnJvdW5kIHRoZSBjaXR5IHdpdGggYSB0cmVuY2gsIHRoZW4gdGhlIEVneXB0aWFuIGNoYW5nZWQgaGlzIG1pbmQsIGdyZXcgZmVhcmZ1bCBvZiB0aGUgc2llZ2UsIGFuZCB3aXNoZWQgdG8gZ2l2ZSBiYXR0bGUsIGZvciB3aGljaCB0aGUgR3JlZWtzIGFsc28gd2VyZSB2ZXJ5IGVhZ2VyLCBzaW5jZSB0aGVyZSB3ZXJlIG5vIHByb3Zpc2lvbnMgaW4gdGhlIHBsYWNlLiBBZ2VzaWxhw7xzLCBob3dldmVyLCB3b3VsZCBub3QgcGVybWl0IGl0LCBidXQgb3Bwb3NlZCBpdCwgYW5kIHdhcyB0aGVyZWZvcmUgbWFsaWduZWQgYnkgdGhlIEVneXB0aWFucyBldmVuIG1vcmUgYml0dGVybHkgdGhhbiBiZWZvcmUsIGFuZCBjYWxsZWQgYSBiZXRyYXllciBvZiB0aGUga2luZy4gQnV0IGhlIGJvcmUgdGhlaXIgY2FsdW1uaWVzIG1vcmUgcGF0aWVudGx5IG5vdywgYW5kIHNvdWdodCB0byBmaW5kIHRoZSBmaXR0aW5nIG1vbWVudCBmb3IgaGlzIHN0cmF0YWdlbS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGFzIGZvbGxvd3MuIFRoZSBlbmVteSB3ZXJlIGRpZ2dpbmcgYSBkZWVwIHRyZW5jaCBvdXRzaWRlIGFyb3VuZCB0aGUgY2l0eSwgaW4gb3JkZXIgdG8gc2h1dCBpdHMgb2NjdXBhbnRzIHVwIGNvbXBsZXRlbHkuIEFjY29yZGluZ2x5LCB3aGVuIHRoZSB0cmVuY2ggaGFkIGJlZW4gY2FycmllZCBhbG1vc3QgYXJvdW5kIHRoZSBjaXR5LCBhbmQgaXRzIGVuZHMgd2VyZSBuZWFyIG9uZSBhbm90aGVyLCBhZnRlciB3YWl0aW5nIGZvciBldmVuaW5nIHRvIGNvbWUgYW5kIG9yZGVyaW5nIHRoZSBHcmVla3MgdG8gYXJtIHRoZW1zZWx2ZXMsIEFnZXNpbGHDvHMgd2VudCB0byB0aGUgRWd5cHRpYW4gYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm93IGlzIHRoZSB0aW1lLCB5b3VuZyBtYW4sIGZvciB1cyB0byBzYXZlIG91cnNlbHZlcywgYW5kIEkgd291bGQgbm90IHNwZWFrIG9mIGl0IHVudGlsIGl0IGNhbWUsIGZvciBmZWFyIG9mIHZpdGlhdGluZyBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGVuZW15IGhhdmUgbm93IHdvcmtlZCBvdXQgb3VyIHNhZmV0eSB3aXRoIHRoZWlyIG93biBoYW5kcy4gVGhleSBoYXZlIGR1ZyB0aGVpciB0cmVuY2ggc28gZmFyIHRoYXQgdGhlIHBhcnQgd2hpY2ggaXMgZmluaXNoZWQgaGluZGVycyB0aGVtIGZyb20gYXR0YWNraW5nIHVzIGluIGdyZWF0IG51bWJlcnMsIGFuZCB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgZW5kcyBnaXZlcyB1cyByb29tIHRvIGZpZ2h0IHRoZW0gb24gZmFpciBhbmQgZXF1YWwgdGVybXMuIENvbWUsIHRoZW4sIGJlIGVhZ2VyIHRvIHNob3cgeW91cnNlbGYgYSBicmF2ZSBtYW47IGZvbGxvdyB3aXRoIHVzIGFzIHdlIGNoYXJnZSwgYW5kIHNhdmUgeW91cnNlbGYgYW5kIHlvdXIgYXJteSB0b28uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZW5lbXkgaW4gb3VyIGZyb250IHdpbGwgbm90IHdpdGhzdGFuZCB1cywgYW5kIHRoZSByZXN0IHdpbGwgbm90IGhhcm0gdXMgYmVjYXVzZSBvZiB0aGUgdHJlbmNoLjwvcT4gTmVjdGFuYWJpcywgdGhlbiwgd2FzIGZpbGxlZCB3aXRoIGFkbWlyYXRpb24gZm9yIHRoZSBzYWdhY2l0eSBvZiBBZ2VzaWxhw7xzLCBhbmQgcHV0dGluZyBoaW1zZWxmIGluIHRoZSBjZW50cmUgb2YgdGhlIEdyZWVrIGFycmF5LCBjaGFyZ2VkIGZvcndhcmRzIGFuZCBlYXNpbHkgcm91dGVkIGhpcyBvcHBvbmVudHMuIEFuZCBub3cgdGhhdCBBZ2VzaWxhw7xzIGhhZCB3b24gYmFjayB0aGUgY29uZmlkZW5jZSBvZiBOZWN0YW5hYmlzLCBoZSBicm91Z2h0IHRoZSBzYW1lIHN0cmF0YWdlbSB0byBiZWFyIGFnYWluIHVwb24gdGhlIGVuZW15LCBsaWtlIGEgdHJpY2sgaW4gd3Jlc3RsaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CeSBzb21ldGltZXMgcHJldGVuZGluZyB0byByZXRyZWF0IGFuZCBmbHksIGFuZCBzb21ldGltZXMgYXR0YWNraW5nIHRoZW0gb24gdGhlIGZsYW5rcywgaGUgZHJvdmUgdGhlaXIgd2hvbGUgbXVsdGl0dWRlIGludG8gYSB0cmFjdCB3aGljaCBoYWQgYSBkZWVwIGNhbmFsIGZ1bGwgb2Ygd2F0ZXIgb24gZWl0aGVyIHNpZGUuIFRoZSBzcGFjZSBiZXR3ZWVuIHRoZXNlIGhlIG9jY3VwaWVkIGFuZCBzdG9wcGVkIHVwIHdpdGggdGhlIGhlYWQgb2YgaGlzIGNvbHVtbiwgYW5kIHNvIG1hZGUgaGlzIG51bWJlcnMgZXF1YWwgdG8gdGhvc2Ugb2YgdGhlIGVuZW15IHdobyBjb3VsZCBmaWdodCB3aXRoIGhpbSwgc2luY2UgdGhleSB3ZXJlIHVuYWJsZSB0byBzdXJyb3VuZCBhbmQgZW5jbG9zZSBoaW0uIFRoZXJlZm9yZSBhZnRlciBhIHNob3J0IHJlc2lzdGFuY2UgdGhleSB3ZXJlIHJvdXRlZDsgbWFueSB3ZXJlIHNsYWluLCBhbmQgdGhlIGZ1Z2l0aXZlcyB3ZXJlIGRpc3BlcnNlZCBhbmQgbWVsdGVkIGF3YXkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgYWNjb3VudCBvZiB0aGlzIEVneXB0aWFuIGNhbXBhaWduIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNS45MyIgdmFsaWQ9InllcyI+RGlvZG9ydXMsIHh2LiA5MzwvYmlibD4sIGRpZmZlcnMgaW4gbWFueSBkZXRhaWxzLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHRoZSBFZ3lwdGlhbiBzdWNjZWVkZWQgaW4gZXN0YWJsaXNoaW5nIGhpbXNlbGYgZmlybWx5IGFuZCBzZWN1cmVseSBpbiBwb3dlciwgYW5kIHNob3dlZCBoaXMgZnJpZW5kbGluZXNzIGFuZCBhZmZlY3Rpb24gYnkgYmVnZ2luZyBBZ2VzaWxhw7xzIHRvIHJlbWFpbiBhbmQgc3BlbmQgdGhlIHdpbnRlciB3aXRoIGhpbS4gQnV0IEFnZXNpbGHDvHMgd2FzIGVhZ2VyIHRvIHJldHVybiB0byB0aGUgd2FyIGF0IGhvbWUsIGtub3dpbmcgdGhhdCBoaXMgY2l0eSBuZWVkZWQgbW9uZXkgYW5kIHdhcyBoaXJpbmcgbWVyY2VuYXJpZXMuIEhlIHdhcyB0aGVyZWZvcmUgZGlzbWlzc2VkIHdpdGggZ3JlYXQgaG9ub3VyIGFuZCBjZXJlbW9ueSwgdGFraW5nIHdpdGggaGltLCBiZXNpZGVzIG90aGVyIGhvbm91cnMgYW5kIGdpZnRzLCB0d28gaHVuZHJlZCBhbmQgdGhpcnR5IHRhbGVudHMgb2Ygc2lsdmVyIGZvciB0aGUgd2FyIGF0IGhvbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBpdCB3YXMgbm93IHdpbnRlciwgaGUga2VwdCBjbG9zZSB0byBzaG9yZSB3aXRoIGhpcyBzaGlwcywgYW5kIHdhcyBib3JuZSBhbG9uZyB0aGUgY29hc3Qgb2YgTGlieWEgdG8gYW4gdW5pbmhhYml0ZWQgc3BvdCBjYWxsZWQgdGhlIEhhcmJvdXIgb2YgTWVuZWxhw7xzLiBIZXJlIGhlIGRpZWQsIGF0IHRoZSBhZ2Ugb2YgZWlnaHR5LWZvdXIgeWVhcnMuIEhlIGhhZCBiZWVuIGtpbmcgb2YgU3BhcnRhIGZvcnR5LW9uZSB5ZWFycywgYW5kIGZvciBtb3JlIHRoYW4gdGhpcnR5IG9mIHRoZXNlIGhlIHdhcyB0aGUgZ3JlYXRlc3QgYW5kIG1vc3QgaW5mbHVlbnRpYWwgb2YgYWxsIEhlbGxlbmVzLCBoYXZpbmcgYmVlbiBsb29rZWQgdXBvbiBhcyBsZWFkZXIgYW5kIGtpbmcgb2YgYWxtb3N0IGFsbCBIZWxsYXMsIGRvd24gdG8gdGhlIGJhdHRsZSBvZiBMZXVjdHJhLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIFNwYXJ0YW4gY3VzdG9tLCB3aGVuIG1lbiBvZiBvcmRpbmFyeSByYW5rIGRpZWQgaW4gYSBmb3JlaWduIGNvdW50cnksIHRvIGdpdmUgdGhlaXIgYm9kaWVzIGZ1bmVyYWwgcml0ZXMgYW5kIGJ1cmlhbCB0aGVyZSwgYnV0IHRvIGNhcnJ5IHRoZSBib2RpZXMgb2YgdGhlaXIga2luZ3MgaG9tZS4gU28gdGhlIFNwYXJ0YW5zIHdobyB3ZXJlIHdpdGggQWdlc2lsYcO8cyBlbmNsb3NlZCBoaXMgZGVhZCBib2R5IGluIG1lbHRlZCB3YXgsIHNpbmNlIHRoZXkgaGFkIG5vIGhvbmV5LCBhbmQgY2FycmllZCBpdCBiYWNrIHRvIExhY2VkYWVtb24uIFRoZSBraW5nZG9tIGRldm9sdmVkIHVwb24gQXJjaGlkYW11cyBoaXMgc29uLCBhbmQgcmVtYWluZWQgaW4gaGlzIGZhbWlseSBkb3duIHRvIEFnaXMsIHdobyB3YXMgc2xhaW4gYnkgTGVvbmlkYXMKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDI0MCBCLkMuIFNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnaXMgMTkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BZ2lzPC90aXRsZT4sIGNoYXB0ZXJzIHhpeC48L2JpYmw+LCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdpcyAyMC4xIiB2YWxpZD0ieWVzIj54eDwvYmlibD4uPC9ub3RlPiBmb3IgYXR0ZW1wdGluZyB0byByZXN0b3JlIHRoZSBhbmNpZW50IGNvbnN0aXR1dGlvbiwgYmVpbmcgdGhlIGZpZnRoIGluIGRlc2NlbnQgZnJvbSBBZ2VzaWxhw7xzLiAKCQkJPC9wPgogICAgICA8L2JvZHk+CiAgIDwvdGV4dD4KPGJvZHkgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgPGhlYWQgY2xhc3M9InRyYW5zbGF0aW9uIj5BR0VTSUxBw5xTPC9oZWFkPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQXJjaGlkYW11cywgdGhlIHNvbiBvZiBaZXV4aWRhbWFzLCBhZnRlciBhbiBpbGx1c3RyaW91cyByZWlnbiBvdmVyIHRoZSBMYWNlZGFlbW9uaWFucywgbGVmdCBiZWhpbmQgaGltIGEgc29uLCBBZ2lzLCBieSBMYW1waWRvLCBhIHdvbWFuIG9mIGhvbm91cmFibGUgZmFtaWx5OyBhbmQgYSBtdWNoIHlvdW5nZXIgc29uLCBBZ2VzaWxhw7xzLCBieSBFdXBvbGlhLCB0aGUgZGF1Z2h0ZXIgb2YgTWVsZXNpcHBpZGFzLiBUaGUga2luZ2RvbSBiZWxvbmdlZCB0byBBZ2lzIGJ5IGxhdywgYW5kIGl0IHdhcyB0aG91Z2h0IHRoYXQgQWdlc2lsYcO8cyB3b3VsZCBwYXNzIGhpcyBsaWZlIGluIGEgcHJpdmF0ZSBzdGF0aW9uLiBIZSB3YXMgdGhlcmVmb3JlIGdpdmVuIHRoZSBzby1jYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFnb2dlLDwvcT4gb3IgY291cnNlIG9mIHB1YmxpYyB0cmFpbmluZyBpbiBTcGFydGEsIHdoaWNoLCBhbHRob3VnaCBhdXN0ZXJlIGluIGl0cyBtb2RlIG9mIGxpZmUgYW5kIGZ1bGwgb2YgaGFyZHNoaXBzLCBlZHVjYXRlZCB0aGUgeW91dGggdG8gb2JlZGllbmNlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBpdCB3YXMsIHdlIGFyZSB0b2xkLCB0aGF0IFNpbW9uaWRlcyBnYXZlIFNwYXJ0YSB0aGUgZXBpdGhldCBvZiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm1hbi1zdWJkdWluZyw8L3E+IHNpbmNlIG1vcmUgdGhhbiBpbiBhbnkgb3RoZXIgc3RhdGUgaGVyIGN1c3RvbXMgbWFkZSBoZXIgY2l0aXplbnMgb2JlZGllbnQgdG8gdGhlIGxhd3MgYW5kIHRyYWN0YWJsZSwgbGlrZSBob3JzZXMgdGhhdCBhcmUgYnJva2VuIGluIHdoaWxlIHlldCB0aGV5IGFyZSBjb2x0cy4gRnJvbSB0aGlzIGNvbXB1bHNvcnkgdHJhaW5pbmcgdGhlIGxhdyBleGVtcHRzIHRoZSBoZWlycy1hcHBhcmVudCB0byB0aGUgdGhyb25lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQWdlc2lsYcO8cyB3YXMgc2luZ3VsYXIgaW4gdGhpcyBhbHNvLCB0aGF0IGhlIGhhZCBiZWVuIGVkdWNhdGVkIHRvIG9iZXkgYmVmb3JlIGhlIGNhbWUgdG8gY29tbWFuZC4gRm9yIHRoaXMgcmVhc29uIGhlIHdhcyBtdWNoIG1vcmUgaW4gaGFybW9ueSB3aXRoIGhpcyBzdWJqZWN0cyB0aGFuIGFueSBvZiB0aGUga2luZ3M7IHRvIHRoZSBjb21tYW5kaW5nIGFuZCBraW5nbHkgdHJhaXRzIHdoaWNoIHdlcmUgaGlzIGJ5IG5hdHVyZSB0aGVyZSBoYWQgYmVlbiBhZGRlZCBieSBoaXMgcHVibGljIHRyYWluaW5nIHRob3NlIG9mIHBvcHVsYXJpdHkgYW5kIGtpbmRsaW5lc3MuIAoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBoZSB3YXMgYW1vbmcgdGhlIHNvLWNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJhbmRzPC9xPiBvZiBib3lzIHdobyB3ZXJlIHJlYXJlZCB0b2dldGhlciwgaGUgaGFkIGFzIGhpcyBsb3ZlciBMeXNhbmRlcgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THljdXJndXM8L3RpdGxlPiwgeHZpaS4gMTwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDIyLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THlzYW5kZXI8L3RpdGxlPiwgeHhpaS4gMzwvYmlibD4uPC9ub3RlPiwgd2hvIHdhcyBzbWl0dGVuIHBhcnRpY3VsYXJseSB3aXRoIGhpcyBuYXRpdmUgZGVjb3J1bS4gRm9yIGFsdGhvdWdoIGhlIHdhcyBjb250ZW50aW91cyBhbmQgaGlnaC1zcGlyaXRlZCBiZXlvbmQgaGlzIGZlbGxvd3MsIHdpc2hpbmcgdG8gYmUgZmlyc3QgaW4gYWxsIHRoaW5ncywgYW5kIGhhdmluZyBhIHZlaGVtZW5jZSBhbmQgZnVyeSB3aGljaCBub25lIGNvdWxkIGNvbnRlbmQgd2l0aCBvciBvdmVyd2hlbG0sIG9uIHRoZSBvdGhlciBoYW5kIGhlIGhhZCBzdWNoIGEgcmVhZGluZXNzIHRvIG9iZXkgYW5kIHN1Y2ggZ2VudGxlbmVzcywgdGhhdCBoZSBkaWQgd2hhdGV2ZXIgd2FzIGVuam9pbmVkIHVwb24gaGltLCBub3QgYXQgYWxsIGZyb20gYSBzZW5zZSBvZiBmZWFyLCBidXQgYWx3YXlzIGZyb20gYSBzZW5zZSBvZiBob25vdXIsIGFuZCB3YXMgbW9yZSBkaXN0cmVzc2VkIGJ5IGNlbnN1cmUgdGhhbiBoZSB3YXMgb3BwcmVzc2VkIGJ5IGhhcmRzaGlwcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIGhpcyBkZWZvcm1pdHksIHRoZSBiZWF1dHkgb2YgaGlzIHBlcnNvbiBpbiBpdHMgeW91dGhmdWwgcHJpbWUgY292ZXJlZCB0aGlzIGZyb20gc2lnaHQsIHdoaWxlIHRoZSBlYXNlIGFuZCBnYWlldHkgd2l0aCB3aGljaCBoZSBib3JlIHN1Y2ggYSBtaXNmb3J0dW5lLCBiZWluZyBmaXJzdCB0byBqZXN0IGFuZCBqb2tlIGFib3V0IGhpbXNlbGYsIHdlbnQgZmFyIHRvd2FyZHMgcmVjdGlmeWluZyBpdC4gSW5kZWVkLCBoaXMgbGFtZW5lc3MgYnJvdWdodCBoaXMgYW1iaXRpb24gaW50byBjbGVhcmVyIGxpZ2h0LCBzaW5jZSBpdCBsZWQgaGltIHRvIGRlY2xpbmUgbm8gaGFyZHNoaXAgYW5kIG5vIGVudGVycHJpc2Ugd2hhdGV2ZXIuIFdlIGhhdmUgbm8gbGlrZW5lc3Mgb2YgaGltIChmb3IgaGUgaGltc2VsZiB3b3VsZCBub3QgY29uc2VudCB0byBvbmUsIGFuZCBldmVuIHdoZW4gaGUgbGF5IGR5aW5nIGZvcmJhZGUgdGhlIG1ha2luZyBvZiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmVpdGhlciBzdGF0dWUgb3IgcGljdHVyZTwvcT4gb2YgaGlzIHBlcnNvbiksIGJ1dCBoZSBpcyBzYWlkIHRvIGhhdmUgYmVlbiBhIGxpdHRsZSBtYW4gb2YgdW5pbXBvc2luZyBwcmVzZW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBoaXMgZ2FpZXR5IGFuZCBnb29kIHNwaXJpdHMgaW4gZXZlcnkgY3Jpc2lzLCBhbmQgaGlzIHJhaWxsZXJ5LCB3aGljaCB3YXMgbmV2ZXIgb2ZmZW5zaXZlIG9yIGhhcnNoIGVpdGhlciBpbiB3b3JkIG9yIGxvb2ssIG1hZGUgaGltIG1vcmUgbG92YWJsZSwgZG93biB0byBoaXMgb2xkIGFnZSwgdGhhbiB0aGUgeW91bmcgYW5kIGJlYXV0aWZ1bC4gQnV0IGFjY29yZGluZyB0byBUaGVvcGhyYXN0dXMsIEFyY2hpZGFtdXMgd2FzIGZpbmVkIGJ5IHRoZSBlcGhvcnMgZm9yIG1hcnJ5aW5nIGEgbGl0dGxlIHdvbWFuLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciBzaGUgd2lsbCBiZWFyIHVzLDwvcT4gdGhleSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm5vdCBraW5ncywgYnV0IGtpbmdsZXRzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGR1cmluZyB0aGUgcmVpZ24gb2YgQWdpcyB0aGF0IEFsY2liaWFkZXMgY2FtZSBmcm9tIFNpY2lseSBhcyBhbiBleGlsZSB0byBTcGFydGEsIGFuZCBoZSBoYWQgbm90IGJlZW4gbG9uZyBpbiB0aGUgY2l0eSB3aGVuIGhlIGluY3VycmVkIHRoZSBjaGFyZ2Ugb2YgaWxsaWNpdCBpbnRlcmNvdXJzZSB3aXRoIFRpbWFlYSwgdGhlIHdpZmUgb2YgdGhlIGtpbmcuIFRoZSBjaGlsZCwgdG9vLCB0aGF0IHdhcyBib3JuIG9mIGhlciwgQWdpcyByZWZ1c2VkIHRvIHJlY29nbml6ZSBhcyBoaXMgb3duLCBkZWNsYXJpbmcgdGhhdCBBbGNpYmlhZGVzIHdhcyBpdHMgZmF0aGVyLiBEdXJpcyBzYXlzIHRoYXQgVGltYWVhIHdhcyBub3QgdmVyeSBtdWNoIGRpc3R1cmJlZCBhdCB0aGlzLCBidXQgaW4gd2hpc3BlcnMgdG8gaGVyIEhlbG90IG1haWRzIGF0IGhvbWUgYWN0dWFsbHkgY2FsbGVkIHRoZSBjaGlsZCBBbGNpYmlhZGVzLCBub3QgTGVvdHljaGlkZXM7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm1vcmVvdmVyIHRoYXQgQWxjaWJpYWRlcyBoaW1zZWxmIGFsc28gZGVjbGFyZWQgdGhhdCBoZSBoYWQgbm90IGFwcHJvYWNoZWQgVGltYWVhIG91dCBvZiB3YW50b24gcGFzc2lvbiwgYnV0IGJlY2F1c2UgaGUgd2FzIGFtYml0aW91cyB0byBoYXZlIHRoZSBTcGFydGFucyByZWlnbmVkIG92ZXIgYnkgaGlzIGRlc2NlbmRhbnRzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDIzLjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWxjaWJpYWRlczwvdGl0bGU+LCB4eGlpaS4gNyBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBPbiB0aGlzIGFjY291bnQgQWxjaWJpYWRlcyB3aXRoZHJldyBmcm9tIFNwYXJ0YSwgYmVpbmcgaW4gZmVhciBvZiBBZ2lzOyBhbmQgdGhlIGJveSB3YXMgYWx3YXlzIGFuIG9iamVjdCBvZiBzdXNwaWNpb24gdG8gQWdpcywgYW5kIHdhcyBub3QgaG9ub3VyZWQgYnkgaGltIGFzIGxlZ2l0aW1hdGUuIEJ1dCB3aGVuIHRoZSBraW5nIGxheSBzaWNrLCB0aGUgc3VwcGxpY2F0aW9ucyBhbmQgdGVhcnMgb2YgTGVvdHljaGlkZXMgcHJldmFpbGVkIHVwb24gaGltIHRvIGRlY2xhcmUgaGltIGhpcyBzb24gaW4gdGhlIHByZXNlbmNlIG9mIG1hbnkgd2l0bmVzc2VzLiAKCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdHdpdGhzdGFuZGluZyB0aGlzLCBhZnRlciB0aGUgZGVhdGggb2YgQWdpcwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzk4IEIuQy48L25vdGU+LCBMeXNhbmRlciwgd2hvIGJ5IHRoaXMgdGltZSBoYWQgc3ViZHVlZCB0aGUgQXRoZW5pYW5zIGF0IHNlYSBhbmQgd2FzIGEgbWFuIG9mIHRoZSBncmVhdGVzdCBpbmZsdWVuY2UgaW4gU3BhcnRhLCB0cmllZCB0byBhZHZhbmNlIEFnZXNpbGHDvHMgdG8gdGhlIHRocm9uZSwgb24gdGhlIHBsZWEgdGhhdCBMZW90eWNoaWRlcyB3YXMgYSBiYXN0YXJkIGFuZCBoYWQgbm8gY2xhaW0gdXBvbiBpdC4gTWFueSBvZiB0aGUgb3RoZXIgY2l0aXplbnMgYWxzbywgb3dpbmcgdG8gdGhlIGV4Y2VsbGVuY2Ugb2YgQWdlc2lsYcO8cyBhbmQgdGhlIGZhY3QgdGhhdCBoZSBoYWQgYmVlbiByZWFyZWQgd2l0aCB0aGVtIHVuZGVyIHRoZSBjb21tb24gcmVzdHJhaW50cyBvZiB0aGUgcHVibGljIHRyYWluaW5nLCB3YXJtbHkgZXNwb3VzZWQgdGhlIHBsYW4gb2YgTHlzYW5kZXIgYW5kIGNvLW9wZXJhdGVkIHdpdGggaGltLiBCdXQgdGhlcmUgd2FzIGEgZGl2aW5lciBpbiBTcGFydGEsIG5hbWVkIERpb3BlaXRoZXMsIHdobyB3YXMgd2VsbCBzdXBwbGllZCB3aXRoIGFuY2llbnQgcHJvcGhlY2llcywgYW5kIHdhcyB0aG91Z2h0IHRvIGJlIGVtaW5lbnRseSB3aXNlIGluIHJlbGlnaW91cyBtYXR0ZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1hbiBkZWNsYXJlZCBpdCBjb250cmFyeSB0byB0aGUgd2lsbCBvZiBIZWF2ZW4gdGhhdCBhIGxhbWUgbWFuIHNob3VsZCBiZSBraW5nIG9mIFNwYXJ0YSwgYW5kIGNpdGVkIGF0IHRoZSB0cmlhbCBvZiB0aGUgY2FzZSB0aGUgZm9sbG93aW5nIG9yYWNsZTrigJQgCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIC8+CgkJCQkJICAgICAgICAgIDxsPkJldGhpbmsgdGhlZSBub3csIE8gU3BhcnRhLCB0aG91Z2ggdGhvdSBhcnQgdmVyeSBnbG9yaW91cywgbGVzdCBmcm9tIHRoZWUsIHNvdW5kIG9mIGZvb3QsIHRoZXJlIHNwcmluZyBhIG1haW1lZCByb3lhbHR5OyBmb3IgbG9uZyB3aWxsIHVuZXhwZWN0ZWQgdG9pbHMgb3BwcmVzcyB0aGVlLCBhbmQgb253YXJkLXJvbGxpbmcgYmlsbG93cyBvZiBtYW4tZGVzdHJveWluZyB3YXIuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgTHlzYW5kZXIgYW5zd2VyZWQgdGhhdCwgaW4gY2FzZSB0aGUgU3BhcnRhbnMgc3Rvb2QgaW4gZ3JlYXQgZmVhciBvZiB0aGUgb3JhY2xlLCB0aGV5IG11c3QgYmUgb24gdGhlaXIgZ3VhcmQgYWdhaW5zdCBMZW90eWNoaWRlczsgZm9yIGl0IG1hdHRlcmVkIG5vdCB0byB0aGUgZ29kIHRoYXQgb25lIHdobyBoYWx0ZWQgaW4gaGlzIGdhaXQgc2hvdWxkIGJlIGtpbmcsIGJ1dCBpZiBvbmUgd2hvIHdhcyBub3QgbGF3ZnVsbHkgYmVnb3R0ZW4sIG5vciBldmVuIGEgZGVzY2VuZGFudCBvZiBIZXJhY2xlcywgc2hvdWxkIGJlIGtpbmcsIHRoaXMgd2FzIHdoYXQgdGhlIGdvZCBtZWFudCBieSB0aGUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5tYWltZWQgcm95YWx0eS48L3E+IEFuZCBBZ2VzaWxhw7xzIGRlY2xhcmVkIHRoYXQgUG9zZWlkb24gYWxzbyBoYWQgYm9ybmUgd2l0bmVzcyB0byB0aGUgYmFzdGFyZHkgb2YgTGVvdHljaGlkZXMsIGZvciBoZSBoYWQgY2FzdCBBZ2lzIGZvcnRoIGZyb20gaGlzIGJlZC1jaGFtYmVyIGJ5IGFuIGVhcnRocXVha2UsIGFuZCBhZnRlciB0aGlzIG1vcmUgdGhhbiB0ZW4gbW9udGhzIGVsYXBzZWQgYmVmb3JlIExlb3R5Y2hpZGVzIHdhcyBib3JuLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDIzLjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWxjaWJpYWRlczwvdGl0bGU+LCB4eGlpaS4gODwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDIyLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THlzYW5kZXI8L3RpdGxlPiwgeHhpaS4gMyBmZi48L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjMuMiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsZW5pY2E8L3RpdGxlPiwgaWlpLiAzLCAyPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgd2F5LCBhbmQgZm9yIHRoZXNlIHJlYXNvbnMsIEFnZXNpbGHDvHMgd2FzIGFwcG9pbnRlZCBraW5nLCBhbmQgc3RyYWlnaHR3YXkgZW5qb3llZCBwb3NzZXNzaW9uIG9mIHRoZSBlc3RhdGVzIG9mIEFnaXMgYXMgd2VsbCBhcyBoaXMgdGhyb25lLCBhZnRlciBleHBlbGxpbmcgTGVvdHljaGlkZXMgYXMgYSBiYXN0YXJkLiBCdXQgc2VlaW5nIHRoYXQgaGlzIGtpbnNtZW4gb24gaGlzIG1vdGhlcidzIHNpZGUsIHRob3VnaCB3b3J0aHkgZm9saywgd2VyZSBleGNlc3NpdmVseSBwb29yLCBoZSBkaXN0cmlidXRlZCBhbW9uZyB0aGVtIHRoZSBoYWxmIG9mIGhpcyBlc3RhdGVzLCB0aGVyZWJ5IG1ha2luZyBoaXMgaW5oZXJpdGFuY2UgeWllbGQgaGltIGdvb2Qtd2lsbCBhbmQgcmVwdXRhdGlvbiBpbnN0ZWFkIG9mIGVudnkgYW5kIGhhdHJlZC4gQXMgZm9yIFhlbm9waG9uJ3Mgc3RhdGVtZW50CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gNi40IiB2YWxpZD0ieWVzIj5YZW5vcGhvbidzIDx0aXRsZT5BZ2VzaWxhw7xzPC90aXRsZT4sIHZpLiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGF0IGJ5IG9iZXlpbmcgaGlzIGNvdW50cnkgaW4gZXZlcnl0aGluZyBoZSB3b24gdmVyeSBncmVhdCBwb3dlciwgc28gdGhhdCBoZSBkaWQgd2hhdCBoZSBwbGVhc2VkLCB0aGUgY2FzZSBpcyBhcyBmb2xsb3dzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGF0IHRpbWUgdGhlIGVwaG9ycyBhbmQgdGhlIHNlbmF0b3JzIGhhZCB0aGUgZ3JlYXRlc3QgcG93ZXIgaW4gdGhlIHN0YXRlLCBvZiB3aG9tIHRoZSBmb3JtZXIgaG9sZCBvZmZpY2UgZm9yIGEgeWVhciBvbmx5LCB3aGlsZSB0aGUgc2VuYXRvcnMgZW5qb3kgdGhlaXIgZGlnbml0eSBmb3IgbGlmZSwgdGhlaXIgb2ZmaWNlcyBoYXZpbmcgYmVlbiBpbnN0aXR1dGVkIHRvIHJlc3RyYWluIHRoZSBwb3dlciBvZiB0aGUga2luZ3MsIGFzIEkgaGF2ZSBzYWlkIGluIG15IExpZmUgb2YgTHljdXJndXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNS42IiB2YWxpZD0ieWVzIj5DaGFwdGVycyB2LiA2IGYuPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNy4xIiB2YWxpZD0ieWVzIj52aWkuIDEgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlcmVmb3JlIGZyb20gdGhlIG91dHNldCwgYW5kIGZyb20gZ2VuZXJhdGlvbiB0byBnZW5lcmF0aW9uLCB0aGUga2luZ3Mgd2VyZSB0cmFkaXRpb25hbGx5IGF0IGZldWQgYW5kIHZhcmlhbmNlIHdpdGggdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFnZXNpbGHDvHMgdG9vayB0aGUgb3Bwb3NpdGUgY291cnNlLiBJbnN0ZWFkIG9mIGNvbGxpZGluZyBhbmQgZmlnaHRpbmcgd2l0aCB0aGVtLCBoZSBjb3VydGVkIHRoZWlyIGZhdm91ciwgd2lubmluZyB0aGVpciBzdXBwb3J0IGJlZm9yZSBzZXR0aW5nIG91dCBvbiBhbnkgdW5kZXJ0YWtpbmc7IGFuZCB3aGVuZXZlciBoZSB3YXMgaW52aXRlZCB0byBtZWV0IHRoZW0sIGhhc3RlbmluZyB0byB0aGVtIG9uIHRoZSBydW4uIElmIGV2ZXIgdGhlIGVwaG9ycyB2aXNpdGVkIGhpbSB3aGVuIGhlIHdhcyBzZWF0ZWQgaW4gaGlzIHJveWFsIGNoYWlyIGFuZCBhZG1pbmlzdGVyaW5nIGp1c3RpY2UsIGhlIHJvc2UgaW4gdGhlaXIgaG9ub3VyOyBhbmQgYXMgbWVuIHdlcmUgZnJvbSB0aW1lIHRvIHRpbWUgbWFkZSBtZW1iZXJzIG9mIHRoZSBzZW5hdGUsIGhlIHdvdWxkIHNlbmQgZWFjaCBvbmUgYSBjbG9hayBhbmQgYW4gb3ggYXMgYSBtYXJrIG9mIGhvbm91ci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Q29uc2VxdWVudGx5LCB3aGlsZSBoZSB3YXMgdGhvdWdodCB0byBiZSBob25vdXJpbmcgYW5kIGV4YWx0aW5nIHRoZSBkaWduaXR5IG9mIHRoZWlyIG9mZmljZSwgaGUgd2FzIHVuYXdhcmVzIGluY3JlYXNpbmcgaGlzIG93biBpbmZsdWVuY2UgYW5kIGFkZGluZyB0byB0aGUgcG93ZXIgb2YgdGhlIGtpbmcgYSBncmVhdG5lc3Mgd2hpY2ggd2FzIGNvbmNlZGVkIG91dCBvZiBnb29kLXdpbGwgdG93YXJkcyBoaW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIGhpcyBkZWFsaW5ncyB3aXRoIHRoZSByZXN0IG9mIHRoZSBjaXRpemVucyBoZSB3YXMgbGVzcyBibGFtZS13b3J0aHkgYXMgYW4gZW5lbXkgdGhhbiBhcyBhIGZyaWVuZDsgZm9yIGhlIHdvdWxkIG5vdCBpbmp1cmUgaGlzIGVuZW1pZXMgd2l0aG91dCBqdXN0IGNhdXNlLCBidXQgam9pbmVkIGhpcyBmcmllbmRzIGV2ZW4gaW4gdGhlaXIgdW5qdXN0IHByYWN0aWNlcy4gQW5kIHdoZXJlYXMgaGUgd2FzIGFzaGFtZWQgbm90IHRvIGhvbm91ciBoaXMgZW5lbWllcyB3aGVuIHRoZXkgZGlkIHdlbGwsIGhlIGNvdWxkIG5vdCBicmluZyBoaW1zZWxmIHRvIGNlbnN1cmUgaGlzIGZyaWVuZHMgd2hlbiB0aGV5IGRpZCBhbWlzcywgYnV0IGFjdHVhbGx5IHByaWRlZCBoaW1zZWxmIG9uIGFpZGluZyB0aGVtIGFuZCBzaGFyaW5nIGluIHRoZWlyIG1pc2RlZWRzLiBGb3IgaGUgdGhvdWdodCBubyBhaWQgZGlzZ3JhY2VmdWwgdGhhdCB3YXMgZ2l2ZW4gdG8gYSBmcmllbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiwgb24gdGhlIG90aGVyIGhhbmQsIGhpcyBhZHZlcnNhcmllcyBzdHVtYmxlZCBhbmQgZmVsbCwgaGUgd2FzIGZpcnN0IHRvIHN5bXBhdGhpemUgd2l0aCB0aGVtIGFuZCBnaXZlIHRoZW0gemVhbG91cyBhaWQgaWYgdGhleSBkZXNpcmVkIGl0LCBhbmQgc28gd29uIHRoZSBoZWFydHMgYW5kIHRoZSBhbGxlZ2lhbmNlIG9mIGFsbC4gVGhlIGVwaG9ycywgYWNjb3JkaW5nbHksIHNlZWluZyB0aGlzLCBhbmQgZmVhcmluZyBoaXMgcG93ZXIsIGxhaWQgYSBmaW5lIHVwb24gaGltLCBhbGxlZ2luZyBhcyBhIHJlYXNvbiB0aGF0IGhlIG1hZGUgdGhlIGNpdGl6ZW5zIGhpcyBvd24sIHdobyBzaG91bGQgYmUgdGhlIGNvbW1vbiBwcm9wZXJ0eSBvZiB0aGUgc3RhdGUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5OYXR1cmFsIHBoaWxvc29waGVycyBhcmUgb2YgdGhlIG9waW5pb24gdGhhdCwgaWYgc3RyaWZlIGFuZCBkaXNjb3JkIHNob3VsZCBiZSBiYW5pc2hlZCBmcm9tIHRoZSB1bml2ZXJzZSwgdGhlIGhlYXZlbmx5IGJvZGllcyB3b3VsZCBzdGFuZCBzdGlsbCwgYW5kIGFsbCBnZW5lcmF0aW9uIGFuZCBtb3Rpb24gd291bGQgY2Vhc2UgaW4gY29uc2VxdWVuY2Ugb2YgdGhlIGdlbmVyYWwgaGFybW9ueS4gQW5kIHNvIHRoZSBTcGFydGFuIGxhdy1naXZlciBzZWVtcyB0byBoYXZlIGludHJvZHVjZWQgdGhlIHNwaXJpdCBvZiBhbWJpdGlvbiBhbmQgY29udGVudGlvbiBpbnRvIGhpcyBjaXZpbCBwb2xpdHkgYXMgYW4gaW5jZW50aXZlIHRvIHZpcnR1ZSwgZGVzaXJpbmcgdGhhdCBnb29kIGNpdGl6ZW5zIHNob3VsZCBhbHdheXMgYmUgc29tZXdoYXQgYXQgdmFyaWFuY2UgYW5kIGluIGNvbmZsaWN0IHdpdGggb25lIGFub3RoZXIsIGFuZCBkZWVtaW5nIHRoYXQgY29tcGxhaXNhbmNlIHdoaWNoIHdlYWtseSB5aWVsZHMgd2l0aG91dCBkZWJhdGUsIHdoaWNoIGtub3dzIG5vIGVmZm9ydCBhbmQgbm8gc3RydWdnbGUsIHRvIGJlIHdyb25nbHkgY2FsbGVkIGNvbmNvcmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzb21lIHRoaW5rIHRoYXQgSG9tZXIgYWxzbyB3YXMgY2xlYXJseSBvZiB0aGlzIG1pbmQ7IGZvciBoZSB3b3VsZCBub3QgaGF2ZSByZXByZXNlbnRlZCBBZ2FtZW1ub24gYXMgcGxlYXNlZCB3aGVuIE9keXNzZXVzIGFuZCBBY2hpbGxlcyB3ZXJlIGNhcnJpZWQgYXdheSBpbnRvIGFidXNlIG9mIG9uZSBhbm90aGVyIHdpdGggCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mcmlnaHRmdWwgd29yZHMsPC9xPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDguNzUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+T2R5c3NleTwvdGl0bGU+LCB2aWlpLiA3NSBmZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaWYgaGUgaGFkIG5vdCB0aG91Z2h0IHRoZSBnZW5lcmFsIGludGVyZXN0cyBsaWtlbHkgdG8gcHJvZml0IGJ5IHRoZSBtdXR1YWwgcml2YWxyeSBhbmQgcXVhcnJlbGxpbmcgb2YgdGhlIGNoaWVmdGFpbnMuIFRoaXMgcHJpbmNpcGxlLCBob3dldmVyLCBtdXN0IG5vdCBiZSBhY2NlcHRlZCB3aXRob3V0IHNvbWUgcmVzZXJ2YXRpb25zOyBmb3IgZXhjZXNzaXZlIHJpdmFscmllcyBhcmUgaW5qdXJpb3VzIHRvIHN0YXRlcywgYW5kIHByb2R1Y3RpdmUgb2YgZ3JlYXQgcGVyaWxzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2VzaWxhw7xzIGhhZCBidXQgcmVjZW50bHkgY29tZSB0byB0aGUgdGhyb25lLCB3aGVuIHRpZGluZ3Mgd2VyZSBicm91Z2h0IGZyb20gQXNpYSB0aGF0IHRoZSBQZXJzaWFuIGtpbmcgd2FzIHByZXBhcmluZyBhIGdyZWF0IGFybWFtZW50IHdpdGggd2hpY2ggdG8gZHJpdmUgdGhlIExhY2VkYWVtb25pYW5zIGZyb20gdGhlIHNlYS4gTm93LCBMeXNhbmRlciB3YXMgZWFnZXIgdG8gYmUgc2VudCBhZ2FpbiBpbnRvIEFzaWEsIGFuZCB0byBhaWQgaGlzIGZyaWVuZHMgdGhlcmUuIFRoZXNlIGhlIGhhZCBsZWZ0IGdvdmVybm9ycyBhbmQgbWFzdGVycyBvZiB0aGUgY2l0aWVzLCBidXQgb3dpbmcgdG8gdGhlaXIgdW5qdXN0IGFuZCB2aW9sZW50IGNvbmR1Y3Qgb2YgYWZmYWlycywgdGhleSB3ZXJlIGJlaW5nIGRyaXZlbiBvdXQgYnkgdGhlIGNpdGl6ZW5zLCBhbmQgZXZlbiBwdXQgdG8gZGVhdGguIEhlIHRoZXJlZm9yZSBwZXJzdWFkZWQgQWdlc2lsYcO8cyB0byB1bmRlcnRha2UgdGhlIGV4cGVkaXRpb24gYW5kIG1ha2Ugd2FyIGluIGJlaGFsZiBvZiBIZWxsYXMsIHByb2NlZWRpbmcgdG8gdGhlIGZhcnRoZXN0IHBvaW50IGFjcm9zcyB0aGUgc2VhLCBhbmQgdGh1cyBhbnRpY2lwYXRpbmcgdGhlIHByZXBhcmF0aW9ucyBvZiB0aGUgQmFyYmFyaWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGUgc2FtZSB0aW1lIGhlIHdyb3RlIHRvIGhpcyBmcmllbmRzIGluIEFzaWEgdXJnaW5nIHRoZW0gdG8gc2VuZCBtZXNzZW5nZXJzIHRvIFNwYXJ0YSBhbmQgZGVtYW5kIEFnZXNpbGHDvHMgYXMgdGhlaXIgY29tbWFuZGVyLiBBY2NvcmRpbmdseSwgQWdlc2lsYcO8cyB3ZW50IGJlZm9yZSB0aGUgYXNzZW1ibHkgb2YgdGhlIHBlb3BsZSBhbmQgYWdyZWVkIHRvIHVuZGVydGFrZSB0aGUgd2FyIGlmIHRoZXkgd291bGQgZ3JhbnQgaGltIHRoaXJ0eSBTcGFydGFucyBhcyBjYXB0YWlucyBhbmQgY291bnNlbGxvcnMsIGEgc2VsZWN0IGNvcnBzIG9mIHR3byB0aG91c2FuZCBlbmZyYW5jaGlzZWQgSGVsb3RzLCBhbmQgYSBmb3JjZSBvZiBhbGxpZXMgYW1vdW50aW5nIHRvIHNpeCB0aG91c2FuZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSByZWFkaWx5IHZvdGVkIGV2ZXJ5dGhpbmcsIG93aW5nIHRvIHRoZSBjby1vcGVyYXRpb24gb2YgTHlzYW5kZXIsIGFuZCBzZW50IEFnZXNpbGHDvHMgZm9ydGggYXQgb25jZSB3aXRoIHRoZSB0aGlydHkgU3BhcnRhbnMuIE9mIHRoZXNlIEx5c2FuZGVyIHdhcyBmaXJzdCBhbmQgZm9yZW1vc3QsIG5vdCBvbmx5IGJlY2F1c2Ugb2YgaGlzIG93biByZXB1dGF0aW9uIGFuZCBpbmZsdWVuY2UsIGJ1dCBhbHNvIGJlY2F1c2Ugb2YgdGhlIGZyaWVuZHNoaXAgb2YgQWdlc2lsYcO8cywgaW4gd2hvc2UgZXllcyBoaXMgcHJvY3VyaW5nIGhpbSB0aGlzIGNvbW1hbmQgd2FzIGEgZ3JlYXRlciBib29uIHRoYW4gaGlzIHJhaXNpbmcgaGltIHRvIHRoZSB0aHJvbmUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBoaXMgZm9yY2VzIHdlcmUgYXNzZW1ibGluZyBhdCBHZXJhZXN0dXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc3ByaW5nIG9mIDM5NiBCLkMuPC9ub3RlPiBBZ2VzaWxhw7xzIGhpbXNlbGYgd2VudCB0byBBdWxpcyB3aXRoIGhpcyBmcmllbmRzIGFuZCBzcGVudCB0aGUgbmlnaHQuIEFzIGhlIHNsZXB0LCBoZSB0aG91Z2h0IGEgdm9pY2UgY2FtZSB0byBoaW0sIHNheWluZzogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5LaW5nIG9mIHRoZSBMYWNlZGFlbW9uaWFucywgdGhvdSBhcnQgc3VyZWx5IGF3YXJlIHRoYXQgbm8gb25lIGhhcyBldmVyIGJlZW4gYXBwb2ludGVkIGdlbmVyYWwgb2YgYWxsIEhlbGxhcyB0b2dldGhlciBleGNlcHQgQWdhbWVtbm9uLCBpbiBmb3JtZXIgdGltZXMsIGFuZCBub3cgdGh5c2VsZiwgYWZ0ZXIgaGltLiBBbmQgc2luY2UgdGhvdSBjb21tYW5kZXN0IHRoZSBzYW1lIGhvc3RzIHRoYXQgaGUgZGlkLCBhbmQgd2FnZXN0IHdhciBvbiB0aGUgc2FtZSBmb2VzLCBhbmQgc2V0dGVzdCBvdXQgZm9yIHRoZSB3YXIgZnJvbSB0aGUgc2FtZSBwbGFjZSwgaXQgaXMgbWVldCB0aGF0IHRob3Ugc2hvdWxkc3Qgc2FjcmlmaWNlIGFsc28gdG8gdGhlIGdvZGRlc3MgdGhlIHNhY3JpZmljZSB3aGljaCBoZSBtYWRlIHRoZXJlIGJlZm9yZSBoZSBzZXQgc2FpbC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWxtb3N0IGF0IG9uY2UgQWdlc2lsYcO8cyByZW1lbWJlcmVkIHRoZSBzYWNyaWZpY2Ugb2YgaGlzIG93biBkYXVnaHRlcgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SXBoaWdlbmVpYS4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIElBIDE1NDAiIHZhbGlkPSJ5ZXMiPkV1cmlwaWRlcywgPHRpdGxlPklwaC4gQXVsLjwvdGl0bGU+LCAxNTQwIGZmLiA8L2JpYmw+KEtpcmNoaG9mZikuPC9ub3RlPiB3aGljaCBBZ2FtZW1ub24gaGFkIHRoZXJlIG1hZGUgaW4gb2JlZGllbmNlIHRvIHRoZSBzb290aHNheWVycy4gSGUgd2FzIG5vdCBkaXN0dXJiZWQsIGhvd2V2ZXIsIGJ1dCBhZnRlciByaXNpbmcgdXAgYW5kIGltcGFydGluZyBoaXMgdmlzaW9uIHRvIGhpcyBmcmllbmRzLCBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIGhvbm91ciB0aGUgZ29kZGVzcyB3aXRoIGEgc2FjcmlmaWNlIGluIHdoaWNoIHNoZSBjb3VsZCBmaXRseSB0YWtlIHBsZWFzdXJlLCBiZWluZyBhIGdvZGRlc3MsIGFuZCB3b3VsZCBub3QgaW1pdGF0ZSB0aGUgY3J1ZWwgaW5zZW5zaWJpbGl0eSBvZiBoaXMgcHJlZGVjZXNzb3IuIFNvIGhlIGNhdXNlZCBhIGhpbmQgdG8gYmUgd3JlYXRoZWQgd2l0aCBjaGFwbGV0cywgYW5kIG9yZGVyZWQgaGlzIG93biBzZWVyIHRvIHBlcmZvcm0gdGhlIHNhY3JpZmljZSwgaW5zdGVhZCBvZiB0aGUgb25lIGN1c3RvbWFyaWx5IGFwcG9pbnRlZCB0byB0aGlzIG9mZmljZSBieSB0aGUgQm9lb3RpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgd2hlbiB0aGUgQm9lb3RpYW4gbWFnaXN0cmF0ZXMgaGVhcmQgb2YgdGhpcywgdGhleSB3ZXJlIG1vdmVkIHRvIGFuZ2VyLCBhbmQgc2VudCB0aGVpciBvZmZpY2VycywgZm9yYmlkZGluZyBBZ2VzaWxhw7xzIHRvIHNhY3JpZmljZSBjb250cmFyeSB0byB0aGUgbGF3cyBhbmQgY3VzdG9tcyBvZiB0aGUgQm9lb3RpYW5zLiBUaGVzZSBvZmZpY2VycyBub3Qgb25seSBkZWxpdmVyZWQgdGhlaXIgbWVzc2FnZSwgYnV0IGFsc28gc25hdGNoZWQgdGhlIHRoaWdoLXBpZWNlcyBvZiB0aGUgdmljdGltIGZyb20gdGhlIGFsdGFyLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNC4zIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaWlpLiA0LCAzIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFnZXNpbGHDvHMgdGhlcmVmb3JlIHNhaWxlZCBhd2F5IGluIGdyZWF0IGRpc3RyZXNzIG9mIG1pbmQ7IGhlIHdhcyBub3Qgb25seSBoaWdobHkgaW5jZW5zZWQgYXQgdGhlIFRoZWJhbnMsIGJ1dCBhbHNvIGZ1bGwgb2YgaWxsLWJvZGluZyBvbiBhY2NvdW50IG9mIHRoZSBvbWVuLiBIZSB3YXMgY29udmluY2VkIHRoYXQgaGlzIHVuZGVydGFraW5ncyB3b3VsZCBiZSBpbmNvbXBsZXRlLCBhbmQgdGhhdCBoaXMgZXhwZWRpdGlvbiB3b3VsZCBoYXZlIG5vIGZpdHRpbmcgaXNzdWUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgaGUgY2FtZSB0byBFcGhlc3VzLCB0aGUgZ3JlYXQgZGlnbml0eSBhbmQgaW5mbHVlbmNlIHdoaWNoIEx5c2FuZGVyIGVuam95ZWQgd2VyZSBidXJkZW5zb21lIGFuZCBncmlldm91cyB0byBoaW0uIFRoZSBkb29ycyBvZiBMeXNhbmRlciB3ZXJlIGFsd2F5cyBiZXNldCB3aXRoIGEgdGhyb25nLCBhbmQgYWxsIGZvbGxvd2VkIGluIGhpcyB0cmFpbiBhbmQgcGFpZCBoaW0gY291cnQsIGFzIHRob3VnaCBBZ2VzaWxhw7xzIGhhZCB0aGUgY29tbWFuZCBpbiBuYW1lIGFuZCBvdXR3YXJkIGFwcGVhcmFuY2UsIHRvIGNvbXBseSB3aXRoIHRoZSBsYXcsIHdoaWxlIGluIGZhY3QgTHlzYW5kZXIgd2FzIG1hc3RlciBvZiBhbGwsIGhhZCBhbGwgcG93ZXIsIGFuZCBkaWQgZXZlcnl0aGluZy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuNyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGlpaS4gNCwgNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiBmYWN0LCBub25lIG9mIHRoZSBnZW5lcmFscyBzZW50IG91dCB0byBBc2lhIGV2ZXIgaGFkIG1vcmUgcG93ZXIgb3IgaW5zcGlyZWQgbW9yZSBmZWFyIHRoYW4gaGU7IG5vbmUgb3RoZXIgY29uZmVycmVkIGdyZWF0ZXIgZmF2b3VycyBvbiBoaXMgZnJpZW5kcywgb3IgaW5mbGljdGVkIHN1Y2ggZ3JlYXQgaW5qdXJpZXMgdXBvbiBoaXMgZW5lbWllcy4gQWxsIHRoaXMgd2FzIHN0aWxsIGZyZXNoIGluIG1lbidzIG1pbmRzLCBhbmQgYmVzaWRlcywgd2hlbiB0aGV5IHNhdyB0aGUgc2ltcGxlLCBwbGFpbiwgYW5kIGZhbWlsaWFyIG1hbm5lcnMgb2YgQWdlc2lsYcO8cywgd2hpbGUgTHlzYW5kZXIgcmV0YWluZWQgdGhlIHNhbWUgVmVoZW1lbmNlIGFuZCBoYXJzaG5lc3MsIGFuZCB0aGUgc2FtZSBicmV2aXR5IG9mIHNwZWVjaCBhcyBiZWZvcmUsIHRoZXkgeWllbGRlZCB0byB0aGUgbGF0dGVyJ3MgaW5mbHVlbmNlIGFsdG9nZXRoZXIsIGFuZCBhdHRhY2hlZCB0aGVtc2VsdmVzIHRvIGhpbSBhbG9uZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgYSBjb25zZXF1ZW5jZSBvZiB0aGlzLCBpbiB0aGUgZmlyc3QgcGxhY2UsIHRoZSByZXN0IG9mIHRoZSBTcGFydGFucyB3ZXJlIGRpc3BsZWFzZWQgdG8gZmluZCB0aGVtc2VsdmVzIGFzc2lzdGFudHMgb2YgTHlzYW5kZXIgcmF0aGVyIHRoYW4gY291bnNlbGxvcnMgb2YgdGhlIGtpbmc7IGFuZCwgaW4gdGhlIHNlY29uZCBwbGFjZSwgQWdlc2lsYcO8cyBoaW1zZWxmOiwgdGhvdWdoIGhlIHdhcyBub3QgYW4gZW52aW91cyBtYW4sIG5vciBkaXNwbGVhc2VkIHRoYXQgb3RoZXJzIHNob3VsZCBiZSBob25vdXJlZCwgYnV0IGV4Y2VlZGluZ2x5IGFtYml0aW91cyBhbmQgaGlnaC1zcGlyaXRlZCwgYmVnYW4gdG8gZmVhciB0aGF0IGFueSBicmlsbGlhbnQgc3VjY2VzcyB3aGljaCBoZSBtaWdodCBhY2hpZXZlIGluIGhpcyB1bmRlcnRha2luZ3Mgd291bGQgYmUgYXR0cmlidXRlZCB0byBMeXNhbmRlciwgb3dpbmcgdG8gcG9wdWxhciBvcGluaW9uLiBIZSB3ZW50IHRvIHdvcmssIHRoZXJlZm9yZSwgaW4gdGhpcyB3YXkuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UbyBiZWdpbiB3aXRoLCBoZSByZXNpc3RlZCB0aGUgY291bnNlbHMgb2YgTHlzYW5kZXIsIGFuZCB3aGF0ZXZlciBlbnRlcnByaXNlcyB3ZXJlIG1vc3QgZWFybmVzdGx5IGZhdm91cmVkIGJ5IGhpbSwgdGhlc2UgaGUgaWdub3JlZCBhbmQgbmVnbGVjdGVkLCBhbmQgZGlkIG90aGVyIHRoaW5ncyBpbiB0aGVpciBzdGVhZDsgYWdhaW4sIG9mIHRob3NlIHdobyBjYW1lIHRvIHNvbGljaXQgZmF2b3VycyBmcm9tIGhpbSwgaGUgc2VudCBhd2F5IGVtcHR5LWhhbmRlZCBhbGwgd2hvIHB1dCB0aGVpciBjaGllZiBjb25maWRlbmNlIGluIEx5c2FuZGVyOyBhbmQgaW4ganVkaWNpYWwgY2FzZXMgbGlrZXdpc2UsIGFsbCB0aG9zZSBhZ2FpbnN0IHdob20gTHlzYW5kZXIgaW52ZWlnaGVkIHdlcmUgc3VyZSB0byBjb21lIG9mZiB2aWN0b3Jpb3VzLCB3aGlsZSwgb24gdGhlIGNvbnRyYXJ5LCB0aG9zZSB3aG9tIGhlIHdhcyBtYW5pZmVzdGx5IGVhZ2VyIHRvIGhlbHAgaGFkIGhhcmQgd29yayBldmVuIHRvIGVzY2FwZSBiZWluZyBmaW5lZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgdGhpbmdzIGhhcHBlbmVkLCBub3QgY2FzdWFsbHksIGJ1dCBhcyBpZiBvZiBzZXQgcHVycG9zZSwgYW5kIHVuaWZvcm1seS4gQXQgbGFzdCBMeXNhbmRlciBwZXJjZWl2ZWQgdGhlIHJlYXNvbiwgYW5kIGRpZCBub3QgaGlkZSBpdCBmcm9tIGhpcyBmcmllbmRzLCBidXQgdG9sZCB0aGVtIGl0IHdhcyBvbiBoaXMgYWNjb3VudCB0aGF0IHRoZXkgd2VyZSBzbGlnaHRlZCwgYW5kIGFkdmlzZWQgdGhlbSB0byBnbyBhbmQgcGF5IHRoZWlyIGNvdXJ0IHRvIHRoZSBraW5nLCBhbmQgdG8gdGhvc2UgbW9yZSBpbmZsdWVudGlhbCB3aXRoIGhpbSB0aGFuIGhpbXNlbGYuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBzaW5jZSBoaXMgd29yZHMgYW5kIGFjdHMgc2VlbWVkIGNvbnRyaXZlZCB0byBicmluZyBvZGl1bSB1cG9uIHRoZSBraW5nLCBBZ2VzaWxhw7xzLCB3aXNoaW5nIHRvIGRlc3BpdGUgaGltIHN0aWxsIG1vcmUsIGFwcG9pbnRlZCBoaW0gaGlzIGNhcnZlciBvZiBtZWF0cywgYW5kIG9uY2Ugc2FpZCwgd2UgYXJlIHRvbGQsIGluIHRoZSBoZWFyaW5nIG9mIG1hbnk6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm93IHRoZW4sIGxldCB0aGVzZSBzdXBwbGlhbnRzIGdvIG9mZiB0byBteSBjYXJ2ZXIgb2YgbWVhdHMgYW5kIHBheSB0aGVpciBjb3VydCB0byBoaW0uPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx5c2FuZGVyLCB0aGVuLCBkZWVwbHkgcGFpbmVkLCBzYWlkIHRvIGhpbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHNlZSwgQWdlc2lsYcO8cywgdGhhdCB0aG91IGtub3dlc3QgdmVyeSB3ZWxsIGhvdyB0byBodW1ibGUgdGh5IGZyaWVuZHMuPC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzIGluZGVlZCw8L3E+IHNhaWQgdGhlIGtpbmcsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvc2Ugd2hvIHdpc2ggdG8gYmUgbW9yZSBwb3dlcmZ1bCB0aGFuIEkgYW0uPC9xPiBUaGVuIEx5c2FuZGVyIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCwgcGVyaGFwcyB0aGVzZSB3b3JkcyBvZiB0aGluZSBhcmUgZmFpcmVyIHRoYW4gbXkgZGVlZHMuIEdpdmUgbWUsIGhvd2V2ZXIsIHNvbWUgcG9zdCBhbmQgcGxhY2Ugd2hlcmUgSSBzaGFsbCBiZSBvZiBzZXJ2aWNlIHRvIHRoZWUsIHdpdGhvdXQgdmV4aW5nIHRoZWUuPC9xPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5cy4gMjMuOSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MeXNhbmRlcjwvdGl0bGU+LCB4eGlpaS4gOS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5VcG9uIHRoaXMgaGUgd2FzIHNlbnQgdG8gdGhlIEhlbGxlc3BvbnQsIGFuZCBicm91Z2h0IG92ZXIgdG8gQWdlc2lsYcO8cyBmcm9tIHRoZSBjb3VudHJ5IG9mIFBoYXJuYWJhenVzLCBTcGl0aHJpZGF0ZXMsIGEgUGVyc2lhbiwgd2l0aCBtdWNoIG1vbmV5IGFuZCB0d28gaHVuZHJlZCBob3JzZW1lbi4gSGUgZGlkIG5vdCwgaG93ZXZlciwgbGF5IGFzaWRlIGhpcyB3cmF0aCwgYnV0IGNvbnRpbnVlZCBoaXMgcmVzZW50bWVudCwgYW5kIGZyb20gdGhpcyB0aW1lIG9uIHBsYW5uZWQgaG93IGhlIG1pZ2h0IHdyZXN0IHRoZSBraW5nZG9tIGZyb20gdGhlIHR3byByb3lhbCBmYW1pbGllcywgYW5kIG1ha2UgYWxsIFNwYXJ0YW5zIG9uY2UgbW9yZSBlbGlnaWJsZSB0byBpdC4gQW5kIGl0IHdhcyB0aG91Z2h0IHRoYXQgaGUgd291bGQgaGF2ZSBicm91Z2h0IGFib3V0IGEgZ3JlYXQgZGlzdHVyYmFuY2UgaW4gY29uc2VxdWVuY2Ugb2YgdGhpcyBxdWFycmVsLCBoYWQgbm90IGRlYXRoIG92ZXJ0YWtlbiBoaW0gb24gaGlzIGV4cGVkaXRpb24gaW50byBCb2VvdGlhLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDI0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THlzYW5kZXI8L3RpdGxlPiwgeHhpdi48L2JpYmw+LTxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDI4LjEiIHZhbGlkPSJ5ZXMiPnh4dmlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGFtYml0aW91cyBuYXR1cmVzIGluIGEgY29tbW9ud2VhbHRoLCBpZiB0aGV5IGRvIG5vdCBvYnNlcnZlIGR1ZSBib3VuZHMsIHdvcmsgZ3JlYXRlciBoYXJtIHRoYW4gZ29vZC4gRm9yIGV2ZW4gdGhvdWdoIEx5c2FuZGVyIHdhcyB0cm91Ymxlc29tZSwgYXMgaGUgd2FzLCBpbiBncmF0aWZ5aW5nIGhpcyBhbWJpdGlvbiB1bnNlYXNvbmFibHksIHN0aWxsLCBBZ2VzaWxhw7xzIG11c3Qgc3VyZWx5IGhhdmUga25vd24gYW5vdGhlciBhbmQgbW9yZSBibGFtZWxlc3Mgd2F5IG9mIGNvcnJlY3RpbmcgYSBtYW4gb2YgaGlnaCByZXB1dGUgYW5kIGFtYml0aW9uIHdoZW4gaGUgZXJyZWQuIEFzIGl0IHdhcywgaXQgc2VlbXMgdG8gaGF2ZSBiZWVuIGR1ZSB0byB0aGUgc2FtZSBwYXNzaW9uIHRoYXQgdGhlIG9uZSB3b3VsZCBub3QgcmVjb2duaXplIHRoZSBhdXRob3JpdHkgb2YgaGlzIHN1cGVyaW9yLCBub3IgdGhlIG90aGVyIGVuZHVyZSB0aGUgYmVpbmcgaWdub3JlZCBieSBoaXMgZnJpZW5kIGFuZCBjb21yYWRlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBmaXJzdCBUaXNhcGhlcm5lcyB3YXMgYWZyYWlkIG9mIEFnZXNpbGHDvHMsIGFuZCBtYWRlIGEgdHJlYXR5IGluIHdoaWNoIGhlIHByb21pc2VkIGhpbSB0byBtYWtlIHRoZSBHcmVlayBjaXRpZXMgZnJlZSBhbmQgaW5kZXBlbmRlbnQgb2YgdGhlIEtpbmcuIEFmdGVyd2FyZHMsIGhvd2V2ZXIsIHdoZW4gaGUgd2FzIGNvbnZpbmNlZCB0aGF0IGhlIGhhZCBhIHN1ZmZpY2llbnQgZm9yY2UsIGhlIGRlY2xhcmVkIHdhciwgYW5kIEFnZXNpbGHDvHMgZ2xhZGx5IGFjY2VwdGVkIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgaGFkIGdyZWF0IGV4cGVjdGF0aW9ucyBmcm9tIGhpcyBleHBlZGl0aW9uLCBhbmQgaGUgdGhvdWdodCBpdCB3b3VsZCBiZSBhIGRpc2dyYWNlZnVsIHRoaW5nIGlmLCB3aGVyZWFzIFhlbm9waG9uIGFuZCBoaXMgVGVuIFRob3VzYW5kIGhhZCBwZW5ldHJhdGVkIHRvIHRoZSBzZWEsIGFuZCB2YW5xdWlzaGVkIHRoZSBLaW5nIGp1c3QgYXMgb2Z0ZW4gYXMgdGhleSB0aGVtc2VsdmVzIGRlc2lyZWQsIGhlLCBpbiBjb21tYW5kIG9mIHRoZSBMYWNlZGFlbW9uaWFucywgd2hvIGhhZCB0aGUgc3VwcmVtYWN5IG9uIHNlYSBhbmQgbGFuZCwgc2hvdWxkIHBlcmZvcm0gbm8gZGVlZCB3b3J0aHkgb2YgcmVtZW1icmFuY2UgaW4gdGhlIGV5ZXMgb2YgdGhlIEhlbGxlbmVzLiBBdCBvbmNlLCB0aGVuLCByZXF1aXRpbmcgdGhlIHBlcmp1cnkgb2YgVGlzYXBoZXJuZXMgd2l0aCBhIHJpZ2h0ZW91cyBkZWNlcHRpb24sIGhlIGdhdmUgb3V0IHdvcmQgdGhhdCBoZSB3YXMgZ29pbmcgdG8gbGVhZCBoaXMgdHJvb3BzIGFnYWluc3QgQ2FyaWE7IGJ1dCB3aGVuIHRoZSBCYXJiYXJpYW4gaGFkIGFzc2VtYmxlZCBoaXMgZm9yY2VzIHRoZXJlLCBoZSBzZXQgb3V0IGFuZCBtYWRlIGFuIGluY3Vyc2lvbiBpbnRvIFBocnlnaWEuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGNhcHR1cmVkIG1hbnkgY2l0aWVzIGFuZCBtYWRlIGhpbXNlbGYgbWFzdGVyIG9mIGJvdW5kbGVzcyB0cmVhc3VyZSwgdGh1cyBzaG93aW5nIHBsYWlubHkgdG8gaGlzIGZyaWVuZHMgdGhhdCB0aGUgdmlvbGF0aW9uIG9mIGEgdHJlYXR5IGlzIGNvbnRlbXB0IGZvciB0aGUgZ29kcywgYnV0IHRoYXQgaW4gb3V0d2l0dGluZyBvbmUncyBlbmVtaWVzIHRoZXJlIGlzIG5vdCBvbmx5IGp1c3RpY2UsIGJ1dCBhbHNvIGdyZWF0IGdsb3J5LCBhbmQgcHJvZml0IG1peGVkIHdpdGggcGxlYXN1cmUuIEhvd2V2ZXIsIHNpbmNlIGhlIHdhcyBpbmZlcmlvciBpbiBjYXZhbHJ5IGFuZCBoaXMgc2FjcmlmaWNlcyB3ZXJlIHVucHJvcGl0aW91cywgaGUgcmV0aXJlZCB0byBFcGhlc3VzIGFuZCBiZWdhbiB0byBnZXQgdG9nZXRoZXIgYSBmb3JjZSBvZiBob3JzZW1lbiwgY29tbWFuZGluZyB0aGUgd2VsbC10by1kbywgaW4gY2FzZSB0aGV5IGRpZCBub3Qgd2lzaCB0byBwZXJmb3JtIG1pbGl0YXJ5IHNlcnZpY2UgdGhlbXNlbHZlcywgdG8gZnVybmlzaCBpbnN0ZWFkIGV2ZXJ5IG1hbiBhIGhvcnNlIGFuZCByaWRlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2VyZSBtYW55IHdobyBjaG9zZSB0aGlzIGNvdXJzZSwgYW5kIHNvIGl0IGNhbWUgdG8gcGFzcyB0aGF0IEFnZXNpbGHDvHMgcXVpY2tseSBoYWQgYSBsYXJnZSBmb3JjZSBvZiB3YXJsaWtlIGhvcnNlbWVuIGluc3RlYWQgb2Ygd29ydGhsZXNzIG1lbi1hdC1hcm1zLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNC4xNSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGlpaS4gNCwgMTUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEZvciB0aG9zZSB3aG8gZGlkIG5vdCB3aXNoIHRvIGRvIG1pbGl0YXJ5IHNlcnZpY2UgaGlyZWQgdGhvc2Ugd2hvIGRpZCwgYW5kIHRob3NlIHdobyBkaWQgbm90IHdpc2ggdG8gc2VydmUgYXMgaG9yc2VtZW4gaGlyZWQgdGhvc2Ugd2hvIGRpZC4gSW5kZWVkLCBBZ2VzaWxhw7xzIHRob3VnaHQgQWdhbWVtbm9uIGhhZCBkb25lIHdlbGwgaW4gYWNjZXB0aW5nIGEgZ29vZCBtYXJlIGFuZCBmcmVlaW5nIGEgY293YXJkbHkgcmljaCBtYW4gZnJvbSBtaWxpdGFyeSBzZXJ2aWNlLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAyMy4yOTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgeHhpaWkuIDI5NiBmZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgb25jZSB3aGVuLCBieSBoaXMgb3JkZXJzLCBoaXMgcHJpc29uZXJzIG9mIHdhciB3ZXJlIHN0cmlwcGVkIG9mIHRoZWlyIGNsb3RoaW5nIGFuZCBvZmZlcmVkIGZvciBzYWxlIGJ5IHRoZSB2ZW5kZXJzIG9mIGJvb3R5LCB0aGVpciBjbG90aGluZyBmb3VuZCBtYW55IHB1cmNoYXNlcnMsIGJ1dCB0aGVpciBuYWtlZCBib2RpZXMsIHdoaWNoIHdlcmUgdXR0ZXJseSB3aGl0ZSBhbmQgZGVsaWNhdGUsIG93aW5nIHRvIHRoZWlyIGVmZmVtaW5hdGUgaGFiaXRzLCB3ZXJlIHJpZGljdWxlZCBhcyB1c2VsZXNzIGFuZCB3b3J0aGxlc3MuIFRoZW4gQWdlc2lsYcO8cywgbm90aWNpbmcsIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlc2UgYXJlIHRoZSBtZW4gd2l0aCB3aG9tIHlvdSBmaWdodCwgYW5kIHRoZXNlIHRoZSB0aGluZ3MgZm9yIHdoaWNoIHlvdSBmaWdodC48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBzZWFzb24gYWdhaW4gZmF2b3VyZWQgYW4gaW5jdXJzaW9uIGludG8gdGhlIGVuZW15J3MgY291bnRyeSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBzcHJpbmcgb2YgMzk1IEIuQy47IGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMTYiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDE2IGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBZ2VzaWxhw7xzIGdhdmUgb3V0IHRoYXQgaGUgd291bGQgbWFyY2ggaW50byBMeWRpYSwgYW5kIHRoaXMgdGltZSBoZSB3YXMgbm90IHRyeWluZyB0byBkZWNlaXZlIFRpc2FwaGVybmVzLiBUaGF0IHNhdHJhcCwgaG93ZXZlciwgdXR0ZXJseSBkZWx1ZGVkIGhpbXNlbGYsIGluIHRoYXQgaGUgZGlzYmVsaWV2ZWQgQWdlc2lsYcO8cyBiZWNhdXNlIG9mIGhpcyBmb3JtZXIgdHJpY2ssIGFuZCB0aG91Z2h0IHRoYXQgbm93LCBhdCBhbnkgcmF0ZSwgdGhlIGtpbmcgd291bGQgYXR0YWNrIENhcmlhLCBhbHRob3VnaCBpdCB3YXMgaWxsLXN1aXRlZCBmb3IgY2F2YWxyeSwgYW5kIGhlIHdhcyBmYXIgaW5mZXJpb3IgaW4gdGhhdCBhcm0gb2YgdGhlIHNlcnZpY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZ2VzaWxhw7xzLCBhcyBoZSBoYWQgZ2l2ZW4gb3V0IHRoYXQgaGUgd291bGQgZG8sIG1hcmNoZWQgaW50byB0aGUgcGxhaW4gb2YgU2FyZGlzLCBhbmQgdGhlbiBUaXNhcGhlcm5lcyB3YXMgZm9yY2VkIHRvIGhhc3RlbiB0aGl0aGVyIGZyb20gQ2FyaWEgd2l0aCBhaWQgYW5kIHJlbGllZjsgYW5kIHJpZGluZyB0aHJvdWdoIHRoZSBwbGFpbiB3aXRoIGhpcyBjYXZhbHJ5LCBoZSBjdXQgb2ZmIG1hbnkgc3RyYWdnbGluZyBwbHVuZGVyZXJzIHRoZXJlLiBBZ2VzaWxhw7xzLCBhY2NvcmRpbmdseSwgcmVmbGVjdGluZyB0aGF0IHRoZSBlbmVteSdzIGluZmFudHJ5IGhhZCBub3QgeWV0IGNvbWUgdXAsIHdoaWxlIGhpcyBvd24gZm9yY2VzIHdlcmUgY29tcGxldGUsIG1hZGUgaGFzdGUgdG8gZ2l2ZSBiYXR0bGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIG1pbmdsZWQgaGlzIGxpZ2h0LWFybWVkIGluZmFudHJ5IHdpdGggaGlzIGhvcnNlbWVuLCBhbmQgb3JkZXJlZCB0aGVtIHRvIGNoYXJnZSBhdCBmdWxsIHNwZWVkIGFuZCBhc3NhdWx0IHRoZSBlbmVteSwgd2hpbGUgaGUgaGltc2VsZiBhdCBvbmNlIGxlZCB1cCBoaXMgbWVuLWF0LWFybXMuIFRoZSBCYXJiYXJpYW5zIHdlcmUgcHV0IHRvIGZsaWdodCwgYW5kIHRoZSBHcmVla3MsIGZvbGxvd2luZyBjbG9zZSB1cG9uIHRoZW0sIHRvb2sgdGhlaXIgY2FtcCBhbmQgc2xldyBtYW55IG9mIHRoZW0uIEFzIGEgcmVzdWx0IG9mIHRoaXMgYmF0dGxlLCB0aGUgR3JlZWtzIGNvdWxkIG5vdCBvbmx5IGhhcnJ5IHRoZSBjb3VudHJ5IG9mIHRoZSBLaW5nIHdpdGhvdXQgZmVhciwgYnV0IGhhZCB0aGUgc2F0aXNmYWN0aW9uIG9mIHNlZWluZyBkdWUgcHVuaXNobWVudCBpbmZsaWN0ZWQgdXBvbiBUaXNhcGhlcm5lcywgYW4gYWJvbWluYWJsZSBtYW4sIGFuZCBtb3N0IGhhdGVmdWwgdG8gdGhlIEdyZWVrIHJhY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgS2luZyBhdCBvbmNlIHNlbnQgVGl0aHJhdXN0ZXMgYWZ0ZXIgaGltLCB3aG8gY3V0IG9mZiBoaXMgaGVhZCwgYW5kIGFza2VkIEFnZXNpbGHDvHMgdG8gbWFrZSB0ZXJtcyBhbmQgc2FpbCBiYWNrIGhvbWUsIG9mZmVyaW5nIGhpbSBtb25leSBhdCB0aGUgaGFuZHMgb2YgZW52b3lzLiBCdXQgQWdlc2lsYcO8cyBhbnN3ZXJlZCB0aGF0IGl0IHdhcyBmb3IgaGlzIGNpdHkgdG8gbWFrZSBwZWFjZSwgYW5kIHRoYXQgZm9yIGhpcyBvd24gcGFydCwgaGUgdG9vayBtb3JlIHBsZWFzdXJlIGluIGVucmljaGluZyBoaXMgc29sZGllcnMgdGhhbiBpbiBnZXR0aW5nIHJpY2ggaGltc2VsZjsgbW9yZW92ZXIsIHRoZSBHcmVla3MsIGhlIHNhaWQsIHRob3VnaHQgaXQgaG9ub3VyYWJsZSB0byB0YWtlLCBub3QgZ2lmdHMsIGJ1dCBzcG9pbHMsIGZyb20gdGhlaXIgZW5lbWllcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzLCBkZXNpcmluZyB0byBncmF0aWZ5IFRpdGhyYXVzdGVzLCBiZWNhdXNlIGhlIGhhZCBwdW5pc2hlZCBUaXNhcGhlcm5lcywgdGhhdCBjb21tb24gZW5lbXkgb2YgdGhlIEdyZWVrcywgaGUgbGVkIGhpcyBhcm15IGJhY2sgaW50byBQaHJ5Z2lhLCB0YWtpbmcgdGhpcnR5IHRhbGVudHMgZnJvbSB0aGUgdmljZXJveSB0byBjb3ZlciB0aGUgZXhwZW5zZXMgb2YgdGhlIG1hcmNoLgoJCQk8L3A+CiAgICAgICAgIDxwPk9uIHRoZSByb2FkIGhlIHJlY2VpdmVkIGEgZGlzcGF0Y2gtcm9sbCBmcm9tIHRoZSBtYWdpc3RyYXRlcyBhdCBob21lLCB3aGljaCBiYWRlIGhpbSBhc3N1bWUgY29udHJvbCBvZiB0aGUgbmF2eSBhcyB3ZWxsIGFzIG9mIHRoZSBhcm15LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNC4yNyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGlpaS4gNCwgMjcgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoaXMgd2FzIGFuIGhvbm91ciB3aGljaCBubyBvbmUgZXZlciByZWNlaXZlZCBidXQgQWdlc2lsYcO8cy4gQW5kIGhlIHdhcyBjb25mZXNzZWRseSB0aGUgZ3JlYXRlc3QgYW5kIG1vc3QgaWxsdXN0cmlvdXMgbWFuIG9mIGhpcyB0aW1lLCBhcyBUaGVvcG9tcHVzIGFsc28gaGFzIHNvbWV3aGVyZSBzYWlkLCBhbHRob3VnaCBoZSBwcmlkZWQgaGltc2VsZiBtb3JlIG9uIGhpcyB2aXJ0dWVzIHRoYW4gb24gaGlzIGhpZ2ggY29tbWFuZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIHB1dHRpbmcgUGVpc2FuZGVyIGluIGNoYXJnZSBvZiB0aGUgbmF2eSBhdCB0aGlzIHRpbWUsIGhlIHdhcyB0aG91Z2h0IHRvIGhhdmUgbWFkZSBhIG1pc3Rha2U7IGZvciB0aGVyZSB3ZXJlIG9sZGVyIGFuZCBtb3JlIGNvbXBldGVudCBtZW4gdG8gYmUgaGFkLCBhbmQgeWV0IGhlIGdhdmUgdGhlIGFkbWlyYWx0eSB0byBoaW0sIG5vdCBvdXQgb2YgcmVnYXJkIGZvciB0aGUgcHVibGljIGdvb2QsIGJ1dCBpbiByZWNvZ25pdGlvbiBvZiB0aGUgY2xhaW1zIG9mIHJlbGF0aW9uc2hpcCBhbmQgdG8gZ3JhdGlmeSBoaXMgd2lmZSwgd2hvIHdhcyBhIHNpc3RlciBvZiBQZWlzYW5kZXIuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgaGltc2VsZiwgaGUgc3RhdGlvbmVkIGhpcyBhcm15IGluIHRoZSBwcm92aW5jZSBvZiBQaGFybmFiYXp1cwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIGZhbGwgb2YgMzk1IEIuQy47IGNmLiAmbHQ7PGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4xLjEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gMSwgMSBmZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4sIHdoZXJlIGhlIG5vdCBvbmx5IGxpdmVkIGluIHVuaXZlcnNhbCBwbGVudHksIGJ1dCBhbHNvIGFjY3VtdWxhdGVkIG11Y2ggbW9uZXkuIEhlIGFsc28gYWR2YW5jZWQgdG8gdGhlIGNvbmZpbmVzIG9mIFBhcGhpYWdvbmlhIGFuZCBicm91Z2h0IENvdHlzLCB0aGUga2luZyBvZiB0aGUgUGFwaGxhZ29uaWFucywgaW50byBhbGxpYW5jZSB3aXRoIGhpbSwgZm9yIGhpcyB2aXJ0dWVzLCBhbmQgdGhlIGNvbmZpZGVuY2Ugd2hpY2ggaGUgaW5zcGlyZWQsIGluY2xpbmVkIHRoZSBraW5nIHRvIGRlc2lyZSBoaXMgZnJpZW5kc2hpcC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U3BpdGhyaWRhdGVzIGFsc28sIGZyb20gdGhlIHRpbWUgd2hlbiBoZSBhYmFuZG9uZWQgUGhhcm5hYmF6dXMgYW5kIGNhbWUgdG8gQWdlc2lsYcO8cywgYWx3YXlzIGFjY29tcGFuaWVkIGhpbSBpbiBoaXMgam91cm5leXMgYW5kIGV4cGVkaXRpb25zLiBTcGl0aHJpZGF0ZXMgaGFkIGEgc29uLCBhIHZlcnkgYmVhdXRpZnVsIGJveSwgbmFtZWQgTWVnYWJhdGVzLCBvZiB3aG9tIEFnZXNpbGHDvHMgd2FzIGFyZGVudGx5IGVuYW1vdXJlZCwgYW5kIGEgYmVhdXRpZnVsIGRhdWdodGVyIGFsc28sIGEgbWFpZGVuIG9mIG1hcnJpYWdlYWJsZSBhZ2UuIFRoaXMgZGF1Z2h0ZXIgQWdlc2lsYcO8cyBwZXJzdWFkZWQgQ290eXMgdG8gbWFycnksIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVuIHJlY2VpdmluZyBmcm9tIGhpbSBhIHRob3VzYW5kIGhvcnNlbWVuIGFuZCB0d28gdGhvdXNhbmQgdGFyZ2V0ZWVycywgaGUgcmV0aXJlZCBhZ2FpbiBpbnRvIFBocnlnaWEsIGFuZCBoYXJhc3NlZCB0aGUgY291bnRyeSBvZiBQaGFybmFiYXp1cywgd2hvIGRpZCBub3Qgc3RhbmQgaGlzIGdyb3VuZCBub3IgdHJ1c3QgaW4gaGlzIGRlZmVuY2VzLCBidXQgYWx3YXlzIGtlcHQgbW9zdCBvZiBoaXMgdmFsdWVkIGFuZCBwcmVjaW91cyB0aGluZ3Mgd2l0aCBoaW0sIGFuZCB3aXRoZHJldyBvciBmbGVkIGZyb20gb25lIHBhcnQgb2YgdGhlIGNvdW50cnkgdG8gYW5vdGhlciwgaGF2aW5nIG5vIGFiaWRpbmcgcGxhY2UuIEF0IGxhc3QgU3BpdGhyaWRhdGVzLCB3aG8gaGFkIG5hcnJvd2x5IHdhdGNoZWQgaGltLCBpbiBjb25qdW5jdGlvbiB3aXRoIEhlcmlwcGlkYXMgdGhlIFNwYXJ0YW4sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgbGVhZGVyIG9mIHRoZSBzZWNvbmQgY29tcGFueSBvZiB0aGlydHkgU3BhcnRhbiBjb3Vuc2VsbG9ycyBzZW50IG91dCBpbiB0aGUgc3ByaW5nIG9mIDM5NSBCLkMuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMjAiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDIwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzZWl6ZWQgaGlzIGNhbXAgYW5kIG1hZGUgaGltc2VsZiBtYXN0ZXIgb2YgYWxsIGhpcyB0cmVhc3VyZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIGhvd2V2ZXIsIEhlcmlwcGlkYXMsIHdobyBoYWQgdG9vIHNoYXJwIGFuIGV5ZSB0byB0aGUgYm9vdHkgdGhhdCB3YXMgc3RvbGVuLCBhbmQgZm9yY2VkIHRoZSBCYXJiYXJpYW5zIHRvIHJlc3RvcmUgaXQsIHdhdGNoaW5nIG92ZXIgYW5kIGVucXVpcmluZyBpbnRvIGV2ZXJ5dGhpbmcsIGV4YXNwZXJhdGVkIFNwaXRocmlkYXRlcywgc28gdGhhdCBoZSBtYXJjaGVkIG9mZiBhdCBvbmNlIHRvIFNhcmRpcyB3aXRoIHRoZSBQYXBobGFnb25pYW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPlRoaXMgaXMgc2FpZCB0byBoYXZlIGFubm95ZWQgQWdlc2lsYcO8cyBiZXlvbmQgYWxsIGVsc2UuIEZvciBoZSB3YXMgcGFpbmVkIGF0IHRoZSBsb3NzIG9mIGEgZ2FsbGFudCBtYW4gaW4gU3BpdGhyaWRhdGVzLCBhbmQgd2l0aCBoaW0gb2YgYSBjb25zaWRlcmFibGUgZm9yY2UsIGFuZCB3YXMgYXNoYW1lZCB0byBsYWJvdXIgdW5kZXIgdGhlIGNoYXJnZSBvZiBwZXR0aW5lc3MgYW5kIGlsbGliZXJhbGl0eSwgZnJvbSB3aGljaCBoZSB3YXMgYWx3YXlzIGFtYml0aW91cyB0byBrZWVwIG5vdCBvbmx5IGhpbXNlbGYsIGJ1dCBhbHNvIGhpcyBjb3VudHJ5LCBwdXJlIGFuZCBmcmVlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXBhcnQgZnJvbSB0aGVzZSBtYW5pZmVzdCByZWFzb25zLCBoZSB3YXMgaXJyaXRhdGVkIGJleW9uZCBtZWFzdXJlIGJ5IGhpcyBsb3ZlIGZvciB0aGUgYm95LCB3aGljaCB3YXMgbm93IGluc3RpbGxlZCBpbnRvIGhpcyBoZWFydCwgYWx0aG91Z2ggd2hlbiB0aGUgYm95IHdhcyBwcmVzZW50IGhlIHdvdWxkIHN1bW1vbiBhbGwgaGlzIHJlc29sdXRpb24gYW5kIHN0cml2ZSBtaWdodGlseSB0byBiYXR0bGUgYWdhaW5zdCBoaXMgZGVzaXJlcy4gSW5kZWVkLCB3aGVuIE1lZ2FiYXRlcyBvbmNlIGNhbWUgdXAgYW5kIG9mZmVyZWQgdG8gZW1icmFjZSBhbmQga2lzcyBoaW0sIGhlIGRlY2xpbmVkIGhpcyBjYXJlc3Nlcy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGJveSB3YXMgbW9ydGlmaWVkIGF0IHRoaXMsIGFuZCBkZXNpc3RlZCwgYW5kIGFmdGVyd2FyZHMga2VwdCBoaXMgZGlzdGFuY2Ugd2hlbiBhZGRyZXNzaW5nIGhpbSwgd2hlcmV1cG9uIEFnZXNpbGHDvHMsIGRpc3RyZXNzZWQgbm93IGFuZCByZXBlbnRhbnQgZm9yIGhhdmluZyBhdm9pZGVkIGhpcyBraXNzLCBwcmV0ZW5kZWQgdG8gd29uZGVyIHdoYXQgYWlsZWQgTWVnYWJhdGVzIHRoYXQgaGUgZGlkIG5vdCBncmVldCBoaW0gd2l0aCBhIGtpc3MuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgdGh5IGZhdWx0LDwvcT4gdGhlIGtpbmcncyBjb21wYW5pb25zIHNhaWQ7IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvdSBkaWRzdCBub3QgYWNjZXB0LCBidXQgZGlkc3QgZGVjbGluZSB0aGUgZmFpciBvbmUncyBraXNzIGluIGZlYXIgYW5kIHRyZW1ibGluZzsgeWV0IGV2ZW4gbm93IGhlIG1pZ2h0IGJlIHBlcnN1YWRlZCB0byBjb21lIHdpdGhpbiByYW5nZSBvZiB0aHkgbGlwczsgYnV0IHNlZSB0aGF0IHRob3UgZG9zdCBub3QgYWdhaW4gcGxheSB0aGUgY293YXJkLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBhZnRlciBzb21lIHRpbWUgc3BlbnQgaW4gc2lsZW50IHJlZmxlY3Rpb24sIEFnZXNpbGHDvHMgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVyZSBpcyBubyBoYXJtIGluIHlvdXIgcGVyc3VhZGluZyBoaW07IGZvciBJIHRoaW5rIEkgd291bGQgbW9yZSBnbGFkbHkgZmlnaHQgdGhhdCBiYXR0bGUgb2YgdGhlIGtpc3Mgb3ZlciBhZ2FpbiB0aGFuIHBvc3Nlc3MgYWxsIHRoZSBnb2xkIEkgaGF2ZSBldmVyIHNlZW4uPC9xPiBPZiBzdWNoIGEgbWluZCB3YXMgaGUgd2hpbGUgTWVnYWJhdGVzIHdhcyB3aXRoIGhpbSwgdGhvdWdoIHdoZW4gdGhlIGJveSB3YXMgZ29uZSwgaGUgd2FzIHNvIG9uIGZpcmUgd2l0aCBsb3ZlIGZvciBoaW0gdGhhdCBpdCB3ZXJlIGhhcmQgdG8gc2F5IHdoZXRoZXIsIGhhZCB0aGUgYm95IGNvbWUgYmFjayBpbnRvIGhpcyBwcmVzZW5jZSwgaGUgd291bGQgaGF2ZSBoYWQgdGhlIHN0cmVuZ3RoIHRvIHJlZnVzZSBoaXMga2lzc2VzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFnZXMuIDUuNCIgdmFsaWQ9InllcyI+WGVub3Bob24ncyA8dGl0bGU+QWdlc2lsYcO8czwvdGl0bGU+LCB2LiA0LTcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBQaGFybmFiYXp1cyBkZXNpcmVkIHRvIGhhdmUgYSBjb25mZXJlbmNlIHdpdGggaGltLCBhbmQgQXBvbGxvcGhhbmVzIG9mIEN5emljdXMsIHdobyB3YXMgYSBndWVzdC1mcmllbmQgb2YgYm90aCwgYnJvdWdodCB0aGUgdHdvIHRvZ2V0aGVyLiBBZ2VzaWxhw7xzLCB3aXRoIGhpcyBmcmllbmRzLCBjYW1lIGZpcnN0IHRvIHRoZSBhcHBvaW50ZWQgcGxhY2UsIGFuZCB0aHJvd2luZyBoaW1zZWxmIGRvd24gaW4gYSBzaGFkeSBwbGFjZSB3aGVyZSB0aGUgZ3Jhc3Mgd2FzIGRlZXAsIHRoZXJlIGF3YWl0ZWQgUGhhcm5hYmF6dXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFBoYXJuYWJhenVzIGNhbWUsIGFsdGhvdWdoIHNvZnQgY3VzaGlvbnMgYW5kIGJyb2lkZXJlZCBydWdzIGhhZCBiZWVuIHNwcmVhZCBmb3IgaGltLCBoZSB3YXMgYXNoYW1lZCB0byBzZWUgQWdlc2lsYcO8cyByZWNsaW5pbmcgYXMgaGUgd2FzLCBhbmQgdGhyZXcgaGltc2VsZiBkb3duIGxpa2V3aXNlLCB3aXRob3V0IGZ1cnRoZXIgY2VyZW1vbnksIG9uIHRoZSBncmFzc3kgZ3JvdW5kLCBhbHRob3VnaCBoZSB3YXMgY2xhZCBpbiByYWltZW50IG9mIHdvbmRlcmZ1bCBkZWxpY2FjeSBhbmQgZHllcy4gQWZ0ZXIgbXV0dWFsIHNhbHV0YXRpb25zLCBQaGFybmFiYXp1cyBoYWQgcGxlbnR5IG9mIGp1c3QgY29tcGxhaW50cyB0byBtYWtlLCBzaW5jZSwgYWx0aG91Z2ggaGUgaGFkIHJlbmRlcmVkIHRoZSBMYWNlZGFlbW9uaWFucyBtYW55IGdyZWF0IHNlcnZpY2VzIGluIHRoZWlyIHdhciBhZ2FpbnN0IHRoZSBBdGhlbmlhbnMsIGhpcyB0ZXJyaXRvcnkgd2FzIG5vdyBiZWluZyByYXZhZ2VkIGJ5IHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZ2VzaWxhw7xzLCBzZWVpbmcgdGhlIFNwYXJ0YW5zIHdpdGggaGltIGJvd2VkIHRvIHRoZSBlYXJ0aCB3aXRoIHNoYW1lIGFuZCBhdCBhIGxvc3MgZm9yIHdvcmRzIChmb3IgdGhleSBzYXcgdGhhdCBQaGFybmFiYXp1cyB3YXMgYSB3cm9uZ2VkIG1hbiksIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2UsIE8gUGhhcm5hYmF6dXMsIGR1cmluZyBvdXIgZm9ybWVyIGZyaWVuZHNoaXAgd2l0aCB0aGUgS2luZywgdHJlYXRlZCB3aGF0IGJlbG9uZ3MgdG8gaGltIGluIGEgZnJpZW5kbHkgd2F5LCBhbmQgbm93IHRoYXQgd2UgaGF2ZSBiZWNvbWUgaGlzIGVuZW1pZXMsIHdlIHRyZWF0IGl0IGluIGEgaG9zdGlsZSB3YXkuIEFjY29yZGluZ2x5LCBzZWVpbmcgdGhhdCB0aG91IGFsc28gZGVzaXJlc3QgdG8gYmUgb25lIG9mIHRoZSBLaW5nJ3MgY2hhdHRlbHMsIHdlIG5hdHVyYWxseSBpbmp1cmUgaGltIHRocm91Z2ggdGhlZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGZyb20gdGhlIGRheSB3aGVuIHRob3Ugc2hhbHQgZGVlbSB0aHlzZWxmIHdvcnRoeSB0byBiZSBjYWxsZWQgYSBmcmllbmQgYW5kIGFsbHkgb2YgdGhlIEdyZWVrcyBpbnN0ZWFkIG9mIGEgc2xhdmUgb2YgdGhlIEtpbmcsIGNvbnNpZGVyIHRoaXMgYXJteSwgdGhlc2UgYXJtcyBhbmQgc2hpcHMsIGFuZCBhbGwgb2YgdXMsIHRvIGJlIGd1YXJkaWFucyBvZiB0aHkgcG9zc2Vzc2lvbnMgYW5kIG9mIHRoeSBsaWJlcnR5LCB3aXRob3V0IHdoaWNoIG5vdGhpbmcgaW4gdGhlIHdvcmxkIGlzIGhvbm91cmFibGUgb3IgZXZlbiB3b3J0aHkgdG8gYmUgZGVzaXJlZC48L3E+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5VcG9uIHRoaXMsIFBoYXJuYWJhenVzIGRlY2xhcmVkIHRvIGhpbSBoaXMgcHVycG9zZXMuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXMgZm9yIG1lLCBpbmRlZWQsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIHRoZSBLaW5nIHNoYWxsIHNlbmQgb3V0IGFub3RoZXIgZ2VuZXJhbCBpbiBteSBzdGVhZCwgSSB3aWxsIGJlIG9uIHlvdXIgc2lkZTsgYnV0IGlmIGhlIGVudHJ1c3RzIG1lIHdpdGggdGhlIGNvbW1hbmQsIEkgd2lsbCBzcGFyZSBubyBlZmZvcnRzIHRvIHB1bmlzaCBhbmQgaW5qdXJlIHlvdSBpbiBoaXMgYmVoYWxmLjwvcT4gT24gaGVhcmluZyB0aGlzLCBBZ2VzaWxhw7xzIHdhcyBkZWxpZ2h0ZWQsIGFuZCBzYWlkLCBhcyBoZSBzZWl6ZWQgaGlzIGhhbmQgYW5kIHJvc2UgdXAgd2l0aCBoaW0sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBQaGFybmFiYXp1cywgSSB3b3VsZCB0aGF0IHN1Y2ggYSBtYW4gYXMgdGhvdSBtaWdodCBiZSBvdXIgZnJpZW5kIHJhdGhlciB0aGFuIG91ciBlbmVteS48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjEuMjgiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gMSwgMjgtMzg8L2JpYmw+LCB3aGVyZSBBZ2VzaWxhw7xzIGFkZHMgYSBwcm9taXNlIHRvIHJlc3BlY3QsIGluIGZ1dHVyZSwgdGhlIHByb3BlcnR5IG9mIFBoYXJuYWJhenVzLCBldmVuIGluIGNhc2Ugb2Ygd2FyLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIFBoYXJuYWJhenVzIGFuZCBoaXMgZnJpZW5kcyB3ZXJlIGdvaW5nIGF3YXksIGhpcyBzb24sIHdobyB3YXMgbGVmdCBiZWhpbmQsIHJhbiB1cCB0byBBZ2VzaWxhw7xzIGFuZCBzYWlkIHdpdGggYSBzbWlsZTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIG1ha2UgdGhlZSBteSBndWVzdC1mcmllbmQsIEFnZXNpbGHDvHMsPC9xPiBhbmQgb2ZmZXJlZCBoaW0gYSBqYXZlbGluIHdoaWNoIGhlIGhlbGQgaW4gaGlzIGhhbmQuIEFnZXNpbGHDvHMgYWNjZXB0ZWQgaXQsIGFuZCBiZWluZyBkZWxpZ2h0ZWQgd2l0aCB0aGUgZmFpciBsb29rcyBhbmQga2luZGx5IGJlYXJpbmcgb2YgdGhlIGJveSwgbG9va2VkIHJvdW5kIHVwb24gaGlzIGNvbXBhbmlvbnMgdG8gc2VlIGlmIGFueSBvbmUgb2YgdGhlbSBoYWQgYW55dGhpbmcgdGhhdCB3b3VsZCBkbyBmb3IgYSByZXR1cm4tZ2lmdCB0byBhIGZhaXIgYW5kIGdhbGxhbnQgZnJpZW5kOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgc2VlaW5nIHRoYXQgdGhlIGhvcnNlIG9mIElkYWV1cywgaGlzIHNlY3JldGFyeSwgaGFkIGEgZGVjb3JhdGVkIGhlYWQtZ2VhciwgaGUgcXVpY2tseSB0b29rIHRoaXMgb2ZmIGFuZCBnYXZlIGl0IHRvIHRoZSB5b3V0aC4gTm9yIGFmdGVyd2FyZHMgZGlkIGhlIGNlYXNlIHRvIHJlbWVtYmVyIGhpbSwgYnV0IHdoZW4sIGFzIHRpbWUgd2VudCBvbiwgdGhlIHlvdXRoIHdhcyByb2JiZWQgb2YgaGlzIGhvbWUgYnkgaGlzIGJyb3RoZXJzIGFuZCBkcml2ZW4gaW50byBleGlsZSBpbiBQZWxvcG9ubmVzdXMsIGhlIHBhaWQgaGltIG11Y2ggYXR0ZW50aW9uLiBIZSBldmVuIGdhdmUgaGltIHNvbWUgYXNzaXN0YW5jZSBpbiBoaXMgbG92ZSBhZmZhaXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIFBlcnNpYW4gd2FzIGVuYW1vdXJlZCBvZiBhbiBBdGhlbmlhbiBib3ksIGFuIGF0aGxldGUsIHdobywgb3dpbmcgdG8gaGlzIHN0YXR1cmUgYW5kIHN0cmVuZ3RoLCB3YXMgaW4gZGFuZ2VyIG9mIGJlaW5nIHJ1bGVkIG91dCBvZiB0aGUgbGlzdHMgYXQgT2x5bXBpYS4gSGUgdGhlcmVmb3JlIGhhZCByZWNvdXJzZSB0byBBZ2VzaWxhw7xzIHdpdGggZW50cmVhdGllcyB0byBoZWxwIHRoZSBib3ksIGFuZCBBZ2VzaWxhw7xzLCB3aXNoaW5nIHRvIGdyYXRpZnkgaGltIGluIHRoaXMgbWF0dGVyIGFsc28sIHdpdGggdmVyeSBncmVhdCBkaWZmaWN1bHR5IGFuZCB3aXRoIG11Y2ggdHJvdWJsZSBlZmZlY3RlZCBoaXMgZGVzaXJlcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjEuMzkiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gMSwgMzkgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD5JbmRlZWQsIGFsdGhvdWdoIGluIG90aGVyIG1hdHRlcnMgaGUgd2FzIGV4YWN0IGFuZCBsYXctYWJpZGluZywgaW4gbWF0dGVycyBvZiBmcmllbmRzaGlwIGhlIHRob3VnaHQgdGhhdCByaWdpZCBqdXN0aWNlIHdhcyBhIG1lcmUgcHJldGV4dC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIHRoZXJlIGlzIGluIGNpcmN1bGF0aW9uIGEgbGV0dGVyIG9mIGhpcyB0byBIaWRyaWV1cyB0aGUgQ2FyaWFuLCB3aGljaCBydW5zIGFzIGZvbGxvd3M6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXMgZm9yIE5pY2lhcywgaWYgaGUgaXMgaW5ub2NlbnQsIGFjcXVpdCBoaW07IGlmIGhlIGlzIGd1aWx0eSwgYWNxdWl0IGhpbSBmb3IgbXkgc2FrZTsgYnV0IGluIGFueSBjYXNlIGFjcXVpdCBoaW0uPC9xPiBTdWNoLCB0aGVuLCB3YXMgQWdlc2lsYcO8cyBpbiBtb3N0IGNhc2VzIHdoZXJlIHRoZSBpbnRlcmVzdHMgb2YgaGlzIGZyaWVuZHMgd2VyZSBjb25jZXJuZWQ7IGJ1dCBzb21ldGltZXMgaGUgdXNlZCBhIGNyaXRpY2FsIHNpdHVhdGlvbiByYXRoZXIgZm9yIGhpcyBvd24gYWR2YW50YWdlLiBPZiB0aGlzIGhlIGdhdmUgYW4gaW5zdGFuY2Ugd2hlbiwgYXMgaGUgd2FzIGRlY2FtcGluZyBpbiBzb21lIGhhc3RlIGFuZCBjb25mdXNpb24sIGhlIGxlZnQgaGlzIGZhdm91cml0ZSBiZWhpbmQgaGltIHNpY2suIFRoZSBzaWNrIG9uZSBiZXNvdWdodCBoaW0gbG91ZGx5IGFzIGhlIHdhcyBkZXBhcnRpbmcsIGJ1dCBoZSBtZXJlbHkgdHVybmVkIGFuZCBzYWlkIHRoYXQgaXQgd2FzIGhhcmQgdG8gYmUgY29tcGFzc2lvbmF0ZSBhbmQgYXQgdGhlIHNhbWUgdGltZSBwcnVkZW50LiBUaGlzIHN0b3J5IGlzIHJlbGF0ZWQgYnkgSGllcm9ueW11cyB0aGUgcGhpbG9zb3BoZXIuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2VzaWxhw7xzIGhhZCBub3cgYmVlbiBuZWFybHkgdHdvIHllYXJzIGluIHRoZSBmaWVsZCwgYW5kIG11Y2ggd2FzIHNhaWQgYWJvdXQgaGltIGluIHRoZSBpbnRlcmlvciBwYXJ0cyBvZiBBc2lhLCBhbmQgYSB3b25kZXJmdWwgb3BpbmlvbiBvZiBoaXMgc2VsZi1yZXN0cmFpbnQsIG9mIGhpcyBzaW1wbGljaXR5IG9mIGxpZmUsIGFuZCBvZiBoaXMgbW9kZXJhdGlvbiwgZXZlcnl3aGVyZSBwcmV2YWlsZWQuIEZvciB3aGVuIGhlIG1hZGUgYSBqb3VybmV5LCBoZSB3b3VsZCB0YWtlIHVwIGhpcyBxdWFydGVycyBpbiB0aGUgbW9zdCBzYWNyZWQgcHJlY2luY3RzIGJ5IGhpbXNlbGYsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gNS43IiB2YWxpZD0ieWVzIj5YZW5vcGhvbidzIDx0aXRsZT5BZ2VzaWxhw7xzPC90aXRsZT4sIHYuIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRodXMgbWFraW5nIHRoZSBnb2RzIG92ZXJzZWVycyBhbmQgd2l0bmVzc2VzIG9mIHRob3NlIGFjdHMgd2hpY2ggZmV3IG1lbiBhcmUgcGVybWl0dGVkIHRvIHNlZSB1cyBwZXJmb3JtOyBhbmQgYW1vbmcgc28gbWFueSB0aG91c2FuZHMgb2Ygc29sZGllcnMsIG9uZSBjb3VsZCBoYXJkbHkgZmluZCBhIG1lYW5lciBjb3VjaCB0aGFuIHRoYXQgb2YgQWdlc2lsYcO8czsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+d2hpbGUgdG8gaGVhdCBhbmQgY29sZCBoZSB3YXMgYXMgaW5kaWZmZXJlbnQgYXMgaWYgbmF0dXJlIGhhZCBnaXZlbiBoaW0gYWxvbmUgdGhlIHBvd2VyIHRvIGFkYXB0IGhpbXNlbGYgdG8gdGhlIHNlYXNvbnMgYXMgR29kIGhhcyB0ZW1wZXJlZCB0aGVtLiBBbmQgaXQgd2FzIG1vc3QgcGxlYXNpbmcgdG8gdGhlIEdyZWVrcyB3aG8gZHdlbHQgaW4gQXNpYSB0byBzZWUgdGhlIFBlcnNpYW4gdmljZXJveXMgYW5kIGdlbmVyYWxzLCB3aG8gaGFkIGxvbmcgYmVlbiBpbnN1ZmZlcmFibHkgY3J1ZWwsIGFuZCBoYWQgcmV2ZWxsZWQgaW4gd2VhbHRoIGFuZCBsdXh1cnksIG5vdyBmZWFyZnVsIGFuZCBvYnNlcXVpb3VzIGJlZm9yZSBhIG1hbiB3aG8gd2VudCBhYm91dCBpbiBhIHBhbHRyeSBjbG9haywgYW5kIGF0IG9uZSBicmllZiBhbmQgbGFjb25pYyBzcGVlY2ggZnJvbSBoaW0gY29uZm9ybWluZyB0aGVtc2VsdmVzIHRvIGhpcyB3YXlzIGFuZCBjaGFuZ2luZyB0aGVpciBkcmVzcyBhbmQgbWllbiwgaW5zb211Y2ggdGhhdCBtYW55IHdlcmUgbW92ZWQgdG8gY2l0ZSB0aGUgd29yZHMgb2YgVGltb3RoZXVzOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5BcmVzIGlzIExvcmQ7IG9mIGdvbGQgR3JlZWNlIGhhdGggbm8gZmVhci48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiBCZXJnaywgPHRpdGxlPlBvZXQuIEx5ci4gR3JhZWNpPC90aXRsZT4sIGlpaS40IHAuIDYyMi48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Bc2lhIGJlaW5nIG5vdyB1bnNldHRsZWQgYW5kIGluIG1hbnkgcXVhcnRlcnMgaW5jbGluaW5nIHRvIHJldm9sdCwgQWdlc2lsYcO8cyBzZXQgdGhlIGNpdGllcyB0aGVyZSBpbiBvcmRlciwgYW5kIHJlc3RvcmVkIHRvIHRoZWlyIGdvdmVybm1lbnRzLCB3aXRob3V0IGtpbGxpbmcgb3IgYmFuaXNoaW5nIGFueSBvbmUsIHRoZSBwcm9wZXIgZm9ybS4gVGhlbiBoZSBkZXRlcm1pbmVkIHRvIGdvIGZhcnRoZXIgYWZpZWxkLCB0byB0cmFuc2ZlciB0aGUgd2FyIGZyb20gdGhlIEdyZWVrIHNlYSwgdG8gZmlnaHQgZm9yIHRoZSBwZXJzb24gb2YgdGhlIEtpbmcgYW5kIHRoZSB3ZWFsdGggb2YgRWNiYXRhbmEgYW5kIFN1c2EsIGFuZCBhYm92ZSBhbGwgdGhpbmdzIHRvIHJvYiB0aGF0IG1vbmFyY2ggb2YgdGhlIHBvd2VyIHRvIHNpdCBhdCBsZWlzdXJlIG9uIGhpcyB0aHJvbmUsIHBsYXlpbmcgdGhlIHVtcGlyZSBmb3IgdGhlIEdyZWVrcyBpbiB0aGVpciB3YXJzLCBhbmQgY29ycnVwdGluZyB0aGVpciBwb3B1bGFyIGxlYWRlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCB0aGlzIHBvaW50IEVwaWN5ZGlkYXMgdGhlIFNwYXJ0YW4gY2FtZSB0byBoaW0gd2l0aCB0aWRpbmdzIHRoYXQgU3BhcnRhIHdhcyBpbnZvbHZlZCBpbiBhIGdyZWF0IHdhciB3aXRoIG90aGVyIEdyZWVrcywgYW5kIHRoYXQgdGhlIGVwaG9ycyBjYWxsZWQgdXBvbiBoaW0gYW5kIG9yZGVyZWQgaGltIHRvIGNvbWUgdG8gdGhlIGFpZCBvZiBoaXMgY291bnRyeW1lbi4gCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPk8gYmFyYmFyb3VzIGlsbHMgZGV2aXNlZCBieSBHcmVla3MhPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkV1ci4gVHJvLiA3NjYiIHZhbGlkPSJ5ZXMiPkV1cmlwaWRlcywgPHRpdGxlPlRyb2FkZXM8L3RpdGxlPiwgNzY2PC9iaWJsPiAoS2lyY2hob2ZmKS48L25vdGU+IEhvdyBlbHNlIGNhbiBvbmUgc3BlYWsgb2YgdGhhdCBqZWFsb3VzeSB3aGljaCBub3cgbGVhZ3VlZCBhbmQgYXJyYXllZCB0aGUgR3JlZWtzIGFnYWluc3Qgb25lIGFub3RoZXI/IFRoZXkgbGFpZCB2aW9sZW50IGhhbmRzIG9uIEZvcnR1bmUgaW4gaGVyIGxvZnR5IGZsaWdodCwgYW5kIHR1cm5lZCB0aGUgd2VhcG9ucyB3aGljaCB0aHJlYXRlbmVkIHRoZSBCYXJiYXJpYW5zLCBhbmQgV2FyLCB3aGljaCBoYWQgYXQgbGFzdCBiZWVuIGJhbmlzaGVkIGZyb20gR3JlZWNlLCBiYWNrIGFnYWluIHVwb24gdGhlbXNlbHZlcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SSBjZXJ0YWlubHkgY2Fubm90IGFncmVlIHdpdGggRGVtYXJhdHVzIHRoZSBDb3JpbnRoaWFuLCB3aG8gc2FpZCB0aGF0IHRob3NlIEdyZWVrcyBoYWQgbWlzc2VkIGEgZ3JlYXQgcGxlYXN1cmUgd2hvIGRpZCBub3QgYmVob2xkIEFsZXhhbmRlciBzZWF0ZWQgb24gdGhlIHRocm9uZSBvZiBEYXJlaXVzLCBuYXksIEkgdGhpbmsgdGhhdCBzdWNoIG1pZ2h0IHdlbGwgaGF2ZSBzaGVkIHRlYXJzIHdoZW4gdGhleSByZWZsZWN0ZWQgdGhhdCB0aGlzIHRyaXVtcGggd2FzIGxlZnQgZm9yIEFsZXhhbmRlciBhbmQgTWFjZWRvbmlhbnMgYnkgdGhvc2Ugd2hvIG5vdyBzcXVhbmRlcmVkIHRoZSBsaXZlcyBvZiBHcmVlayBnZW5lcmFscyBvbiB0aGUgZmllbGRzIG9mIExldWN0cmEsIENvcm9uZWlhLCBhbmQgQ29yaW50aCwgYW5kIGluIEFyY2FkaWEuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZ2VzaWxhw7xzLCBob3dldmVyLCBuZXZlciBwZXJmb3JtZWQgYSBub2JsZXIgb3IgYSBncmVhdGVyIGRlZWQgdGhhbiBpbiByZXR1cm5pbmcgaG9tZSBhcyBoZSBub3cgZGlkLCBub3Igd2FzIHRoZXJlIGV2ZXIgYSBmYWlyZXIgZXhhbXBsZSBvZiByaWdodGVvdXMgb2JlZGllbmNlIHRvIGF1dGhvcml0eS4gRm9yIEhhbm5pYmFsLCB0aG91Z2ggaGUgd2FzIGFscmVhZHkgaW4gYW4gZXZpbCBwbGlnaHQgYW5kIG9uIHRoZSBwb2ludCBvZiBiZWluZyBkcml2ZW4gb3V0IG9mIEl0YWx5LCBjb3VsZCB3aXRoIHRoZSBncmVhdGVzdCBkaWZmaWN1bHR5IGJyaW5nIGhpbXNlbGYgdG8gb2JleSBoaXMgc3VtbW9ucyB0byB0aGUgd2FyIGF0IGhvbWU7IGFuZCBBbGV4YW5kZXIgYWN0dWFsbHkgd2VudCBzbyBmYXIgYXMgdG8gamVzdCB3aGVuIGhlIGhlYXJkIG9mIEFudGlwYXRlcidzIGJhdHRsZSB3aXRoIEFnaXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBNZWdhbG9wb2xpcywgaW4gQXJjYWRpYSwgMzMxIEIuQy4sIEFnaXMgZmVsbCBmaWdodGluZywgYW5kIHRoZSBTcGFydGFuIHJlYmVsbGlvbiBhdCBvbmNlIGNvbGxhcHNlZC4gQWxleGFuZGVyIGhhZCBub3QgdGhlIHNsaWdodGVzdCB0aG91Z2h0IG9mIHJldHVybmluZyBob21lIHRvIGhlbHAgQW50aXBhdGVyLjwvbm90ZT4gc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IHdvdWxkIHNlZW0sIG15IG1lbiwgdGhhdCB3aGlsZSB3ZSB3ZXJlIGNvbnF1ZXJpbmcgRGFyZWl1cyBoZXJlLCB0aGVyZSBoYXMgYmVlbiBhIGJhdHRsZSBvZiBtaWNlIHRoZXJlIGluIEFyY2FkaWEuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoeSwgdGhlbiwgc2hvdWxkIHdlIG5vdCBjYWxsIFNwYXJ0YSBoYXBweSBpbiB0aGUgaG9ub3VyIHBhaWQgdG8gaGVyIGJ5IEFnZXNpbGHDvHMsIGFuZCBpbiBoaXMgZGVmZXJlbmNlIHRvIGhlciBsYXdzPyBObyBzb29uZXIgaGFkIHRoZSBkaXNwYXRjaC1yb2xsIGNvbWUgdG8gaGltIHRoYW4gaGUgcmVub3VuY2VkIGFuZCBhYmFuZG9uZWQgdGhlIGdyZWF0IGdvb2QgZm9ydHVuZSBhbmQgcG93ZXIgYWxyZWFkeSBpbiBoaXMgZ3Jhc3AsIGFuZCB0aGUgZ3JlYXQgaG9wZXMgd2hpY2ggYmVja29uZWQgaGltIG9uLCBhbmQgYXQgb25jZSBzYWlsZWQgb2ZmIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2l0aCB0YXNrIGFsbCB1bmZ1bGZpbGxlZCw8L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gNC4xNzUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgaXYuIDE3NS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbGVhdmluZyBiZWhpbmQgYSBncmVhdCB5ZWFybmluZyBmb3IgaGltIGFtb25nIGhpcyBhbGxpZXMsIGFuZCBnaXZpbmcgdGhlIHN0cm9uZ2VzdCBjb25mdXRhdGlvbiB0byB0aGUgc2F5aW5nIG9mIEVyYXNpc3RyYXR1cyB0aGUgc29uIG9mIFBoYWVheCwgd2hvIGRlY2xhcmVkIHRoYXQgdGhlIExhY2VkYWVtb25pYW5zIHdlcmUgYmV0dGVyIG1lbiBpbiBwdWJsaWMgbGlmZSwgYnV0IHRoZSBBdGhlbmlhbnMgaW4gcHJpdmF0ZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoaWxlIGFwcHJvdmluZyBoaW1zZWxmIGEgbW9zdCBleGNlbGxlbnQga2luZyBhbmQgZ2VuZXJhbCwgaGUgc2hvd2VkIGhpbXNlbGYgYSBzdGlsbCBiZXR0ZXIgYW5kIG1vcmUgYWdyZWVhYmxlIGZyaWVuZCBhbmQgY29tcGFuaW9uIHRvIHRob3NlIHdobyBlbmpveWVkIGhpcyBpbnRpbWFjeS4gUGVyc2lhbiBjb2lucyB3ZXJlIHN0YW1wZWQgd2l0aCB0aGUgZmlndXJlIG9mIGFuIGFyY2hlciwgYW5kIEFnZXNpbGHDvHMgc2FpZCwgYXMgaGUgd2FzIGJyZWFraW5nIGNhbXAsIHRoYXQgdGhlIEtpbmcgd2FzIGRyaXZpbmcgaGltIG91dCBvZiBBc2lhIHdpdGggdGVuIHRob3VzYW5kIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXJjaGVyczwvcT47IGZvciBzbyBtdWNoIG1vbmV5IGhhZCBiZWVuIHNlbnQgdG8gQXRoZW5zIGFuZCBUaGViZXMgYW5kIGRpc3RyaWJ1dGVkIGFtb25nIHRoZSBwb3B1bGFyIGxlYWRlcnMgdGhlcmUsIGFuZCBhcyBhIGNvbnNlcXVlbmNlIHRob3NlIHBlb3BsZXMgbWFkZSB3YXIgdXBvbiB0aGUgU3BhcnRhbnMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gWGVub3Bob24gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkhlbGwuPC90aXRsZT4gaWlpLiA1LCAxIGZmLjwvYmlibD4pLCBQZXJzaWFuIG1vbmV5IHdhcyBkaXN0cmlidXRlZCBpbiBUaGViZXMsIENvcmludGgsIGFuZCBBcmdvcy4gCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIEF0aGVuaWFucywgdGhvdWdoIHRoZXkgdG9vayBubyBzaGFyZSBvZiB0aGUgZ29sZCwgd2VyZSBub25lIHRoZSBsZXNzIGVhZ2VyIGZvciB3YXIuPC9xPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBoZSBoYWQgY3Jvc3NlZCB0aGUgSGVsbGVzcG9udCBhbmQgd2FzIG1hcmNoaW5nIHRocm91Z2ggVGhyYWNlLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWdlc2lsYcO8cyBmb2xsb3dlZCAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgdmVyeSByb3V0ZSB0YWtlbiBieSB0aGUgR3JlYXQgS2luZyB3aGVuIGhlIGludmFkZWQgSGVsbGFzPC9xPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4yLjgiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gMiwgODwvYmlibD4pLjwvbm90ZT4gaGUgbWFkZSBubyByZXF1ZXN0cyBvZiBhbnkgb2YgdGhlIEJhcmJhcmlhbnMsIGJ1dCBzZW50IGVudm95cyB0byBlYWNoIHBlb3BsZSBhc2tpbmcgd2hldGhlciBoZSBzaG91bGQgdHJhdmVyc2UgdGhlaXIgY291bnRyeSBhcyBhIGZyaWVuZCBvciBhcyBhIGZvZS4gQWxsIHRoZSByZXN0LCBhY2NvcmRpbmdseSwgcmVjZWl2ZWQgaGltIGFzIGEgZnJpZW5kIGFuZCBhc3Npc3RlZCBoaW0gb24gaGlzIHdheSwgYXMgdGhleSB3ZXJlIHNldmVyYWxseSBhYmxlOyBidXQgdGhlIHBlb3BsZSBjYWxsZWQgVHJhbGxpYW5zLCB0byB3aG9tIGV2ZW4gWGVyeGVzIGdhdmUgZ2lmdHMsIGFzIHdlIGFyZSB0b2xkLCBkZW1hbmRlZCBvZiBBZ2VzaWxhw7xzIGFzIGEgcHJpY2UgZm9yIGhpcyBwYXNzYWdlIGEgaHVuZHJlZCB0YWxlbnRzIG9mIHNpbHZlciBhbmQgYXMgbWFueSB3b21lbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIGFuc3dlcmVkIHRoZW0gd2l0aCBzY29ybiwgYXNraW5nIHdoeSwgdGhlbiwgdGhleSBkaWQgbm90IGNvbWUgYXQgb25jZSB0byBnZXQgdGhlaXIgcHJpY2U7IGFuZCBtYXJjaGVkIGZvcndhcmQsIGFuZCBmaW5kaW5nIHRoZW0gZHJhd24gdXAgZm9yIGJhdHRsZSwgZW5nYWdlZCB0aGVtLCByb3V0ZWQgdGhlbSwgYW5kIHNsZXcgbWFueSBvZiB0aGVtLiBIZSBzZW50IGhpcyB1c3VhbCBlbnF1aXJ5IGZvcndhcmQgdG8gdGhlIGtpbmcgb2YgdGhlIE1hY2Vkb25pYW5zIGFsc28sIHdobyBhbnN3ZXJlZCB0aGF0IGhlIHdvdWxkIGRlbGliZXJhdGUgdXBvbiBpdC4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MZXQgaGltIGRlbGliZXJhdGUsIHRoZW4sPC9xPiBzYWlkIEFnZXNpbGHDvHMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YnV0IHdlIHdpbGwgbWFyY2ggb24uPC9xPiBJbiBhbWF6ZW1lbnQgdGhlcmVmb3JlIGF0IGhpcyBib2xkbmVzcywgYW5kIGluIGZlYXIsIHRoZSBNYWNlZG9uaWFuIGtpbmcgZ2F2ZSBvcmRlcnMgdG8gbGV0IGhpbSBwYXNzIGFzIGEgZnJpZW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TaW5jZSB0aGUgVGhlc3NhbGlhbnMgd2VyZSBpbiBhbGxpYW5jZSB3aXRoIGhpcyBlbmVtaWVzLCBoZSByYXZhZ2VkIHRoZWlyIGNvdW50cnkuIEJ1dCB0byB0aGUgY2l0eSBvZiBMYXJpc3NhIGhlIHNlbnQgWGVub2NsZXMgYW5kIFNjeXRoZXMsIGhvcGluZyB0byBzZWN1cmUgaXRzIGZyaWVuZHNoaXAuIEhpcyBhbWJhc3NhZG9ycywgaG93ZXZlciwgd2VyZSBhcnJlc3RlZCBhbmQga2VwdCBpbiBjbG9zZSBjdXN0b2R5LCB3aGVyZXVwb24gdGhlIHJlc3Qgb2YgaGlzIGNvbW1hbmQgd2VyZSBpbmRpZ25hbnQsIGFuZCB0aG91Z2h0IHRoYXQgQWdlc2lsYcO8cyBvdWdodCB0byBlbmNhbXAgYWJvdXQgTGFyaXNzYSBhbmQgbGF5IHNpZWdlIHRvIGl0LiBCdXQgaGUgZGVjbGFyZWQgdGhhdCB0aGUgY2FwdHVyZSBvZiBhbGwgVGhlc3NhbHkgd291bGQgbm90IGNvbXBlbnNhdGUgaGltIGZvciB0aGUgbG9zcyBvZiBlaXRoZXIgb25lIG9mIGhpcyBtZW4sIGFuZCBtYWRlIHRlcm1zIHdpdGggdGhlIGVuZW15IGluIG9yZGVyIHRvIGdldCB0aGVtIGJhY2suIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBwZXJoYXBzIHdlIG5lZWQgbm90IHdvbmRlciBhdCBzdWNoIGNvbmR1Y3QgaW4gQWdlc2lsYcO8cywgc2luY2Ugd2hlbiBoZSBsZWFybmVkIHRoYXQgYSBncmVhdCBiYXR0bGUgaGFkIGJlZW4gZm91Z2h0IG5lYXIgQ29yaW50aCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjM5NCBCLkMuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjIuMTgiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gMiwgMTg8L2JpYmw+4oCUPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjEiIHZhbGlkPSJ5ZXMiPjMsIDEgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHRoYXQgbWVuIG9mIHRoZSBoaWdoZXN0IHJlcHV0ZSBoYWQgc3VkZGVubHkgYmVlbiB0YWtlbiBvZmYsIGFuZCB0aGF0IGFsdGhvdWdoIGZldyBTcGFydGFucyBhbHRvZ2V0aGVyIGhhZCBiZWVuIGtpbGxlZCwgdGhlIGxvc3Mgb2YgdGhlaXIgZW5lbWllcyB3YXMgdmVyeSBoZWF2eSwgaGUgd2FzIG5vdCBzZWVuIHRvIGJlIHJlam9pY2VkIG9yIGVsYXRlZCwgYnV0IGZldGNoZWQgYSBkZWVwIGdyb2FuIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFsYXMgZm9yIEhlbGxhcywgd2hpY2ggaGFzIGJ5IGhlciBvd24gaGFuZHMgZGVzdHJveWVkIHNvIG1hbnkgYnJhdmUgbWVuISBIYWQgdGhleSBsaXZlZCwgdGhleSBjb3VsZCBoYXZlIGNvbnF1ZXJlZCBpbiBiYXR0bGUgYWxsIHRoZSBCYXJiYXJpYW5zIGluIHRoZSB3b3JsZC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgd2hlbiB0aGUgUGhhcnNhbGlhbnMgYW5ub3llZCBoaW0gYW5kIGhhcmFzc2VkIGhpcyBhcm15LCBoZSBvcmRlcmVkIGZpdmUgaHVuZHJlZCBob3JzZW1lbiB3aGljaCBoZSBsZWQgaW4gcGVyc29uIHRvIGF0dGFjayB0aGVtLCByb3V0ZWQgdGhlbSwgYW5kIHNldCB1cCBhIHRyb3BoeSBhdCB0aGUgZm9vdCBvZiBtb3VudCBOYXJ0aGFjaXVtLiBUaGlzIHZpY3RvcnkgZ2F2ZSBoaW0gc3BlY2lhbCBwbGVhc3VyZSwgYmVjYXVzZSB3aXRoIGhvcnNlbWVuIG9mIGhpcyBvd24gbXVzdGVyaW5nIGFuZCB0cmFpbmluZywgYW5kIHdpdGggbm8gb3RoZXIgZm9yY2UsIGhlIGhhZCBjb25xdWVyZWQgdGhvc2Ugd2hvc2UgY2hpZWYgcHJpZGUgd2FzIHBsYWNlZCBpbiB0aGVpciBjYXZhbHJ5LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMy45IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDMsIDkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIERpcGhyaWRhcywgYW4gZXBob3IgZnJvbSBTcGFydGEsIG1ldCBoaW0sIHdpdGggb3JkZXJzIHRvIGludmFkZSBCb2VvdGlhIGltbWVkaWF0ZWx5LiBUaGVyZWZvcmUsIGFsdGhvdWdoIGhlIHdhcyBwdXJwb3NpbmcgdG8gZG8gdGhpcyBsYXRlciB3aXRoIGEgbGFyZ2VyIGFybWFtZW50LCBoZSB0aG91Z2h0IGl0IGRpZCBub3QgYmVob292ZSBoaW0gdG8gZGlzb2JleSB0aGUgbWFnaXN0cmF0ZXMsIGJ1dCBzYWlkIHRvIHRob3NlIHdobyB3ZXJlIHdpdGggaGltIHRoYXQgdGhlIGRheSB3YXMgbmVhciBmb3Igd2hpY2ggdGhleSBoYWQgY29tZSBmcm9tIEFzaWEuIEhlIGFsc28gc2VudCBmb3IgdHdvIGRpdmlzaW9ucyBvZiB0aGUgYXJteSBhdCBDb3JpbnRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZSBMYWNlZGFlbW9uaWFucyBhdCBob21lLCB3aXNoaW5nIHRvIGRvIGhpbSBob25vdXIsIG1hZGUgcHJvY2xhbWF0aW9uIHRoYXQgYW55IHlvdW5nIG1hbiB3aG8gd2lzaGVkIG1pZ2h0IGVubGlzdCBpbiBhaWQgb2YgdGhlIGtpbmcuIEFsbCBlbmxpc3RlZCBlYWdlcmx5LCBhbmQgdGhlIG1hZ2lzdHJhdGVzIGNob3NlIG91dCB0aGUgbW9zdCBtYXR1cmUgYW5kIHZpZ29yb3VzIG9mIHRoZW0gdG8gdGhlIG51bWJlciBvZiBmaWZ0eSwgYW5kIHNlbnQgdGhlbSBvZmYuCgkJCTwvcD4KICAgICAgICAgPHA+QWdlc2lsYcO8cyBub3cgbWFyY2hlZCB0aHJvdWdoIHRoZSBwYXNzIG9mIFRoZXJtb3B5bGFlLCB0cmF2ZXJzZWQgUGhvY2lzLCB3aGljaCB3YXMgZnJpZW5kbHkgdG8gU3BhcnRhLCBlbnRlcmVkIEJvZW90aWEsIGFuZCBlbmNhbXBlZCBuZWFyIENoYWVyb25laWEuIEhlcmUgYSBwYXJ0aWFsIGVjbGlwc2Ugb2YgdGhlIHN1biBvY2N1cnJlZCwgYW5kIGF0IHRoZSBzYW1lIHRpbWUKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF1Z3VzdCwgMzk0IEIuQy48L25vdGU+IG5ld3MgY2FtZSB0byBoaW0gb2YgdGhlIGRlYXRoIG9mIFBlaXNhbmRlciwgd2hvIHdhcyBkZWZlYXRlZCBpbiBhIG5hdmFsIGJhdHRsZSBvZmYgQ25pZHVzIGJ5IFBoYXJuYWJhenVzIGFuZCBDb25vbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWdlc2lsYcO8cyB3YXMgbmF0dXJhbGx5IG11Y2ggZGlzdHJlc3NlZCBhdCB0aGVzZSB0aWRpbmdzLCBib3RoIGJlY2F1c2Ugb2YgdGhlIG1hbiB0aHVzIGxvc3QsIGFuZCBvZiB0aGUgY2l0eSB3aGljaCBoYWQgbG9zdCBoaW07IGJ1dCBuZXZlcnRoZWxlc3MsIHRoYXQgaGlzIHNvbGRpZXJzIG1pZ2h0IG5vdCBiZSB2aXNpdGVkIHdpdGggZGVqZWN0aW9uIGFuZCBmZWFyIGFzIHRoZXkgd2VyZSBnb2luZyBpbnRvIGJhdHRsZSwgaGUgb3JkZXJlZCB0aGUgbWVzc2VuZ2VycyBmcm9tIHRoZSBzZWEgdG8gcmV2ZXJzZSB0aGVpciB0aWRpbmdzIGFuZCBzYXkgdGhhdCB0aGUgU3BhcnRhbnMgd2VyZSB2aWN0b3Jpb3VzIGluIHRoZSBuYXZhbCBiYXR0bGUuIEhlIGhpbXNlbGYgYWxzbyBjYW1lIGZvcnRoIHB1YmxpY2x5IHdpdGggYSBnYXJsYW5kIG9uIGhpcyBoZWFkLCBvZmZlcmVkIHNhY3JpZmljZXMgZm9yIGdsYWQgdGlkaW5ncywgYW5kIHNlbnQgcG9ydGlvbnMgb2YgdGhlIHNhY3JpZmljaWFsIHZpY3RpbXMgdG8gaGlzIGZyaWVuZHMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc29sZGllcnMgb2YgQWdlc2lsYcO8cyB3ZXJlIGNvbnNlcXVlbnRseSB2aWN0b3Jpb3VzIGluIGEgc2tpcm1pc2ggd2l0aCB0aGUgZW5lbXksIGFjY29yZGluZyB0byBYZW5vcGhvbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjE0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDMsIDE0PC9iaWJsPikuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgYWR2YW5jaW5nIGFzIGZhciBhcyBDb3JvbmVpYSBhbmQgY29taW5nIHdpdGhpbiBzaWdodCBvZiB0aGUgZW5lbXksIGhlIGRyZXcgdXAgaGlzIGFybXkgaW4gYmF0dGxlIGFycmF5LCBnaXZpbmcgdGhlIGxlZnQgd2luZyB0byB0aGUgT3JjaG9tZW5pYW5zLCB3aGlsZSBoZSBoaW1zZWxmIGxlZCBmb3J3YXJkIHRoZSByaWdodC4gT24gdGhlIG90aGVyIHNpZGUsIHRoZSBUaGViYW5zIGhlbGQgdGhlIHJpZ2h0IHdpbmcgdGhlbXNlbHZlcywgYW5kIHRoZSBBcmdpdmVzIHRoZSBsZWZ0LiBYZW5vcGhvbiBzYXlzIHRoYXQgdGhpcyBiYXR0bGUgd2FzIHVubGlrZSBhbnkgZXZlciBmb3VnaHQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjE2IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuMTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SGVsbGVuaWNhPC90aXRsZT4sIGl2LiAzLCAxNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGhlIHdhcyBwcmVzZW50IGhpbXNlbGYgYW5kIGZvdWdodCBvbiB0aGUgc2lkZSBvZiBBZ2VzaWxhw7xzLCBoYXZpbmcgY3Jvc3NlZCBvdmVyIHdpdGggaGltIGZyb20gQXNpYS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiA1LjMuNiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gNS4zLjYiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uJ3MgPHRpdGxlPkFuYWJhc2lzPC90aXRsZT4sIHYuIDMsIDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZpcnN0IGltcGFjdCwgaXQgaXMgdHJ1ZSwgZGlkIG5vdCBtZWV0IHdpdGggbXVjaCByZXNpc3RhbmNlLCBub3Igd2FzIGl0IGxvbmcgY29udGVzdGVkLCBidXQgdGhlIFRoZWJhbnMgc3BlZWRpbHkgcm91dGVkIHRoZSBPcmNob21lbmlhbnMsIGFzIEFnZXNpbGHDvHMgZGlkIHRoZSBBcmdpdmVzLiBCb3RoIHBhcnRpZXMsIGhvd2V2ZXIsIG9uIGhlYXJpbmcgdGhhdCB0aGVpciBsZWZ0IHdpbmdzIHdlcmUgb3ZlcndoZWxtZWQgYW5kIGluIGZsaWdodCwgdHVybmVkIGJhY2suIFRoZW4sIGFsdGhvdWdoIHRoZSB2aWN0b3J5IG1pZ2h0IGhhdmUgYmVlbiBoaXMgd2l0aG91dCBwZXJpbCBpZiBoZSBoYWQgYmVlbiB3aWxsaW5nIHRvIHJlZnJhaW4gZnJvbSBhdHRhY2tpbmcgdGhlIFRoZWJhbnMgaW4gZnJvbnQgYW5kIHRvIHNtaXRlIHRoZW0gaW4gdGhlIHJlYXIgYWZ0ZXIgdGhleSBoYWQgcGFzc2VkIGJ5LCBBZ2VzaWxhw7xzIHdhcyBjYXJyaWVkIGF3YXkgYnkgcGFzc2lvbiBhbmQgdGhlIGFyZG91ciBvZiBiYXR0bGUgYW5kIGFkdmFuY2VkIGRpcmVjdGx5IHVwb24gdGhlbSwgd2lzaGluZyB0byBiZWFyIHRoZW0gZG93biBieSBzaGVlciBmb3JjZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXkgcmVjZWl2ZWQgaGltIHdpdGggYSB2aWdvdXIgdGhhdCBtYXRjaGVkIGhpcyBvd24sIGFuZCBhIGJhdHRsZSBlbnN1ZWQgd2hpY2ggd2FzIGZpZXJjZSBhdCBhbGwgcG9pbnRzIGluIHRoZSBsaW5lLCBidXQgZmllcmNlc3Qgd2hlcmUgdGhlIGtpbmcgaGltc2VsZiBzdG9vZCBzdXJyb3VuZGVkIGJ5IGhpcyBmaWZ0eSB2b2x1bnRlZXJzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2VzLiAxNy4yIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMTcuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmlpLiAyLjwvYmlibD4gVGhleSBhcmUgbm90IG1lbnRpb25lZCBieSBYZW5vcGhvbi48L25vdGU+IHdob3NlIG9wcG9ydHVuZSBhbmQgZW11bG91cyB2YWxvdXIgc2VlbXMgdG8gaGF2ZSBzYXZlZCBoaXMgbGlmZS4gRm9yIHRoZXkgZm91Z2h0IHdpdGggdGhlIHV0bW9zdCBmdXJ5IGFuZCBleHBvc2VkIHRoZWlyIGxpdmVzIGluIGhpcyBiZWhhbGYsIGFuZCB0aG91Z2ggdGhleSB3ZXJlIG5vdCBhYmxlIHRvIGtlZXAgaGltIGZyb20gYmVpbmcgd291bmRlZCwgYnV0IG1hbnkgYmxvd3Mgb2Ygc3BlYXJzIGFuZCBzd29yZHMgcGllcmNlZCBoaXMgYXJtb3VyIGFuZCByZWFjaGVkIGhpcyBwZXJzb24sIHRoZXkgZGlkIHN1Y2NlZWQgaW4gZHJhZ2dpbmcgaGltIG9mZiBhbGl2ZSwgYW5kIHN0YW5kaW5nIGluIGNsb3NlIGFycmF5IGluIGZyb250IG9mIGhpbSwgdGhleSBzbGV3IG1hbnkgZm9lcywgd2hpbGUgbWFueSBvZiB0aGVpciBvd24gbnVtYmVyIGZlbGwuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBpdCBwcm92ZWQgdG9vIGhhcmQgYSB0YXNrIHRvIGJyZWFrIHRoZSBUaGViYW4gZnJvbnQsIHRoZXkgd2VyZSBmb3JjZWQgdG8gZG8gd2hhdCBhdCB0aGUgb3V0c2V0IHRoZXkgd2VyZSBsb3RoIHRvIGRvLiBUaGV5IG9wZW5lZCB0aGVpciByYW5rcyBhbmQgbGV0IHRoZSBlbmVteSBwYXNzIHRocm91Z2gsIGFuZCB0aGVuLCB3aGVuIHRoZXNlIGhhZCBnb3QgY2xlYXIsIGFuZCB3ZXJlIGFscmVhZHkgbWFyY2hpbmcgaW4gbG9vc2VyIGFycmF5LCB0aGUgU3BhcnRhbnMgZm9sbG93ZWQgb24gdGhlIHJ1biBhbmQgc21vdGUgdGhlbSBvbiB0aGUgZmxhbmtzLiBUaGV5IGNvdWxkIG5vdCwgaG93ZXZlciwgcHV0IHRoZW0gdG8gcm91dCwgYnV0IHRoZSBUaGViYW5zIHdpdGhkcmV3IHRvIE1vdW50IEhlbGljb24sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gcm9tIHRoZSBzbG9wZXMgb2Ygd2hpY2ggdGhleSBoYWQgYWR2YW5jZWQgdG8gdGhlIGJhdHRsZS48L25vdGU+IGdyZWF0bHkgZWxhdGVkIG92ZXIgdGhlIGJhdHRsZSwgaW4gd2hpY2gsIGFzIHRoZXkgcmVhc29uZWQsIHRoZWlyIG93biBjb250aW5nZW50IGhhZCBiZWVuIHVuZGVmZWF0ZWQuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQWdlc2lsYcO8cywgYWx0aG91Z2ggaGUgd2FzIHdlYWtlbmVkIGJ5IG1hbnkgd291bmRzLCB3b3VsZCBub3QgcmV0aXJlIHRvIGhpcyB0ZW50IHVudGlsIGhlIGhhZCBmaXJzdCBiZWVuIGNhcnJpZWQgdG8gaGlzIHRyb29wcyBhbmQgc2VlbiB0aGF0IHRoZSBkZWFkIHdlcmUgY29sbGVjdGVkIHdpdGhpbiB0aGUgZW5jYW1wbWVudC4gTW9yZW92ZXIsIGhlIG9yZGVyZWQgdGhhdCBhbGwgb2YgdGhlIGVuZW15IHdobyBoYWQgdGFrZW4gcmVmdWdlIGluIHRoZSBzYW5jdHVhcnkgc2hvdWxkIGJlIGRpc21pc3NlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSB0ZW1wbGUgb2YgQXRoZW5hIEl0b25pYSB3YXMgbmVhciBhdCBoYW5kLCBhbmQgYSB0cm9waHkgc3Rvb2QgaW4gZnJvbnQgb2YgaXQsIHdoaWNoIHRoZSBCb2VvdGlhbnMgaGFkIGxvbmcgYWdvIGVyZWN0ZWQsIHdoZW4sIHVuZGVyIHRoZSBjb21tYW5kIG9mIFNwYXJ0bywgdGhleSBoYWQgZGVmZWF0ZWQgdGhlIEF0aGVuaWFucyB0aGVyZSBhbmQgc2xhaW4gVG9sbWlkZXMgdGhlaXIgZ2VuZXJhbC4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDQ0NyBCLkMuOyBjZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZXIuIDE4LjIiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZXIuIDE4LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UGVyaWNsZXM8L3RpdGxlPiwgeHZpaWkuIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gRWFybHkgbmV4dCBtb3JuaW5nLCBBZ2VzaWxhw7xzLCB3aXNoaW5nIHRvIHRyeSB0aGUgVGhlYmFucyBhbmQgc2VlIHdoZXRoZXIgdGhleSB3b3VsZCBnaXZlIGhpbSBiYXR0bGUsIG9yZGVyZWQgaGlzIHNvbGRpZXJzIHRvIHdyZWF0aCB0aGVpciBoZWFkcyBhbmQgaGlzIHBpcGVycyB0byBwbGF5IHRoZWlyIHBpcGVzLCB3aGlsZSBhIHRyb3BoeSB3YXMgc2V0IHVwIGFuZCBhZG9ybmVkIGluIHRva2VuIG9mIHRoZWlyIHZpY3RvcnkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE5pYy4gNi41IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTmljLiA2LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TmljaWFzPC90aXRsZT4sIHZpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBlbmVteSBzZW50IHRvIGhpbSBhbmQgYXNrZWQgcGVybWlzc2lvbiB0byB0YWtlIHVwIHRoZWlyIGRlYWQsIGhlIG1hZGUgYSB0cnVjZSB3aXRoIHRoZW0sIGFuZCBoYXZpbmcgdGh1cyBhc3N1cmVkIHRvIGhpbXNlbGYgdGhlIHZpY3RvcnksIHByb2NlZWRlZCB0byBEZWxwaGksCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5MZWF2aW5nIHRoZSBhcm15IGluIGNvbW1hbmQgb2YgR3lsaXMgdGhlIHBvbGVtYXJjaCAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjIxIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuMjEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gMywgMjE8L2JpYmw+KS48L25vdGU+IHdoZXJlIHRoZSBQeXRoaWFuIGdhbWVzIHdlcmUgaW4gcHJvZ3Jlc3MuIFRoZXJlIGhlIGNlbGVicmF0ZWQgdGhlIGN1c3RvbWFyeSBwcm9jZXNzaW9uIGluIGhvbm91ciBvZiB0aGUgZ29kLCBhbmQgb2ZmZXJlZCB1cCB0aGUgdGVudGggb2YgdGhlIHNwb2lscyB3aGljaCBoZSBoYWQgYnJvdWdodCBmcm9tIEFzaWEsIGFtb3VudGluZyB0byBhIGh1bmRyZWQgdGFsZW50cy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgd2VudCBiYWNrIGhvbWUsIHdoZXJlIGhpcyBsaWZlIGFuZCBjb25kdWN0IGJyb3VnaHQgaGltIGF0IG9uY2UgdGhlIGFmZmVjdGlvbiBhbmQgYWRtaXJhdGlvbiBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLiBGb3IsIHVubGlrZSBtb3N0IG9mIHRoZWlyIGdlbmVyYWxzLCBoZSBjYW1lIGJhY2sgZnJvbSBmb3JlaWduIHBhcnRzIHVuY2hhbmdlZCBhbmQgdW5hZmZlY3RlZCBieSBhbGllbiBjdXN0b21zOyBoZSBzaG93ZWQgbm8gZGlzbGlrZSB0b3dhcmRzIGhvbWUgZmFzaGlvbnMsIG5vciB3YXMgaGUgcmVzdGl2ZSB1bmRlciB0aGVtLCBidXQgaG9ub3VyZWQgYW5kIGxvdmVkIHdoYXQgaGUgZm91bmQgdGhlcmUganVzdCBhcyBtdWNoIGFzIHRob3NlIGRpZCB3aG8gaGFkIG5ldmVyIGNyb3NzZWQgdGhlIEV1cm90YXM7IGhlIG1hZGUgbm8gY2hhbmdlIGluIGhpcyB0YWJsZSwgb3IgaGlzIGJhdGhzLCBvciB0aGUgYXR0ZW5kYW5jZSBvbiBoaXMgd2lmZSwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+b3IgdGhlIGRlY29yYXRpb24gb2YgaGlzIGFybW91ciwgb3IgdGhlIGZ1cm5pdHVyZSBvZiBoaXMgaG91c2UsIG5heSwgaGUgYWN0dWFsbHkgbGV0IGl0cyBkb29ycyByZW1haW4gYWx0aG91Z2ggdGhleSB3ZXJlIHZlcnkgb2xkLOKAlG9uZSBtaWdodCBzYXkgdGhleSB3ZXJlIHRoZSB2ZXJ5IGRvb3JzIHdoaWNoIEFyaXN0b2RlbXVzCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgZ3JlYXQtZ3JlYXQtZ3JhbmRzb24gb2YgSGVyYWNsZXM7IGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiA4LjciIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFnZXMuIDguNyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5BZ2VzaWxhw7xzPC90aXRsZT4sIHZpaWkuIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhhZCBzZXQgdXAuIEhpcyBkYXVnaHRlcidzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+a2FubmF0aHJvbiw8L3E+IGFzIFhlbm9waG9uIHRlbGxzIHVzLCB3YXMgbm8gbW9yZSBlbGFib3JhdGUgdGhhbiB0aGF0IG9mIGFueSBvdGhlciBtYWlkICgKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmthbm5hdGhyYTwvcT4gaXMgdGhlIG5hbWUgdGhleSBnaXZlIHRvIHRoZSB3b29kZW4gZmlndXJlcyBvZiBncmlmZmlucyBvciBnb2F0LXN0YWdzIGluIHdoaWNoIHRoZWlyIHlvdW5nIGdpcmxzIGFyZSBjYXJyaWVkIGF0IHRoZSBzYWNyZWQgcHJvY2Vzc2lvbnMpLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlc2UgZmlndXJlcyBvZiBhbmltYWxzIHdlcmUgb24gd2hlZWxzLCBhbmQgc2VydmVkIGFzIGNhcnJpYWdlcyAoY2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBdGguIDQuMTM5Ij5BdGhlbmFldXMsIHAuIDEzOSBmLjwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5YZW5vcGhvbiwgaXQgaXMgdHJ1ZSwgaGFzIG5vdCByZWNvcmRlZCB0aGUgbmFtZSBvZiB0aGUgZGF1Z2h0ZXIgb2YgQWdlc2lsYcO8cywgYW5kIERpY2FjYXJjaHVzIGV4cHJlc3NlZCBncmVhdCBpbmRpZ25hdGlvbiB0aGF0IG5laXRoZXIgaGVyIG5hbWUgbm9yIHRoYXQgb2YgdGhlIG1vdGhlciBvZiBFcGFtaW5vbmRhcyB3YXMga25vd24gdG8gdXM7IGJ1dCB3ZSBoYXZlIGZvdW5kIGluIHRoZSBMYWNlZGFlbW9uaWFuIHJlY29yZHMgdGhhdCB0aGUgd2lmZSBvZiBBZ2VzaWxhw7xzIHdhcyBuYW1lZCBDbGVvcmEsIGFuZCBoaXMgZGF1Z2h0ZXJzIEV1cG9saWEgYW5kIFByb2F1Z2EuIEFuZCBvbmUgY2FuIHNlZSBoaXMgc3BlYXIgYWxzbywgd2hpY2ggaXMgc3RpbGwgcHJlc2VydmVkIGF0IFNwYXJ0YSwgYW5kIHdoaWNoIGlzIG5vdCBhdCBhbGwgZGlmZmVyZW50IGZyb20gdGhhdCBvZiBvdGhlciBtZW4uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBvbiBzZWVpbmcgdGhhdCBzb21lIG9mIHRoZSBjaXRpemVucyBlc3RlZW1lZCB0aGVtc2VsdmVzIGhpZ2hseSBhbmQgd2VyZSBncmVhdGx5IGxpZnRlZCB1cCBiZWNhdXNlIHRoZXkgYnJlZCByYWNpbmcgaG9yc2VzLCBoZSBwZXJzdWFkZWQgaGlzIHNpc3RlciBDeW5pc2NhIHRvIGVudGVyIGEgY2hhcmlvdCBpbiB0aGUgY29udGVzdHMgYXQgT2x5bXBpYSwgd2lzaGluZyB0byBzaG93IHRoZSBHcmVla3MgdGhhdCB0aGUgdmljdG9yeSB0aGVyZSB3YXMgbm90IGEgbWFyayBvZiBhbnkgZ3JlYXQgZXhjZWxsZW5jZSwgYnV0IHNpbXBseSBvZiB3ZWFsdGggYW5kIGxhdmlzaCBvdXRsYXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsc28sIGhhdmluZyBYZW5vcGhvbiB0aGUgcGhpbG9zb3BoZXIgaW4gaGlzIGZvbGxvd2luZywgYW5kIG1ha2luZyBtdWNoIG9mIGhpbSwgaGUgb3JkZXJlZCBoaW0gdG8gc2VuZCBmb3IgaGlzIHNvbnMgYW5kIHJlYXIgdGhlbSBhdCBTcGFydGEsIHRoYXQgdGhleSBtaWdodCBsZWFybiB0aGF0IGZhaXJlc3Qgb2YgYWxsIGxlc3NvbnMsIGhvdyB0byBvYmV5IGFuZCBob3cgdG8gY29tbWFuZC4gQWdhaW4sIGZpbmRpbmcgYWZ0ZXIgTHlzYW5kZXIncyBkZWF0aCB0aGF0IGEgbGFyZ2Ugc29jaWV0eSB3YXMgaW4gZXhpc3RlbmNlLCB3aGljaCB0aGF0IGNvbW1hbmRlciwgaW1tZWRpYXRlbHkgYWZ0ZXIgcmV0dXJuaW5nIGZyb20gQXNpYSwgaGFkIGZvcm1lZCBhZ2FpbnN0IGhpbSwgQWdlc2lsYcO8cyBzZXQgb3V0IHRvIHByb3ZlIHdoYXQgbWFubmVyIG9mIGNpdGl6ZW4gTHlzYW5kZXIgaGFkIGJlZW4gd2hpbGUgYWxpdmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvLCBhZnRlciByZWFkaW5nIGEgc3BlZWNoIHdoaWNoIEx5c2FuZGVyIGhhZCBsZWZ0IGJlaGluZCBoaW0gaW4gYm9vayBmb3JtLOKAlGEgc3BlZWNoIHdoaWNoIENsZW9uIG9mIEhhbGljYXJuYXNzdXMgaGFkIGNvbXBvc2VkLCBidXQgd2hpY2ggTHlzYW5kZXIgaGFkIGludGVuZGVkIHRvIGFkb3B0IGFuZCBwcm9ub3VuY2UgYmVmb3JlIHRoZSBwZW9wbGUgaW4gYWR2b2NhY3kgb2YgYSByZXZvbHV0aW9uIGFuZCBjaGFuZ2UgaW4gdGhlIGZvcm0gb2YgZ292ZXJubWVudCzigJRBZ2VzaWxhw7xzIHdpc2hlZCB0byBwdWJsaXNoIGl0LiBCdXQgb25lIG9mIHRoZSBzZW5hdG9ycywgd2hvIGhhZCByZWFkIHRoZSBzcGVlY2ggYW5kIGZlYXJlZCBpdHMgYWJpbGl0eSBhbmQgcG93ZXIsIGFkdmlzZWQgdGhlIGtpbmcgbm90IHRvIGRpZyBMeXNhbmRlciB1cCBhZ2FpbiwgYnV0IHJhdGhlciB0byBidXJ5IHRoZSBzcGVlY2ggd2l0aCBoaW0sIHRvIHdoaWNoIGFkdmljZSBBZ2VzaWxhw7xzIGxpc3RlbmVkIGFuZCBoZWxkIGhpcyBwZWFjZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5cy4gMzAuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5cy4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MeXNhbmRlcjwvdGl0bGU+LCBjaGFwdGVyIHh4eC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXMgZm9yIHRob3NlIHdobyB3ZXJlIGluIG9wcG9zaXRpb24gdG8gaGltLCBoZSB3b3VsZCBkbyB0aGVtIG5vIG9wZW4gaW5qdXJ5LCBidXQgd291bGQgZXhlcnQgaGltc2VsZiB0byBzZW5kIHNvbWUgb2YgdGhlbSBhd2F5IGZyb20gdGltZSB0byB0aW1lIGFzIGdlbmVyYWxzIGFuZCBjb21tYW5kZXJzLCBhbmQgd291bGQgc2hvdyB0aGVtIHVwIGlmIHRoZXkgcHJvdmVkIGJhc2UgYW5kIGdyYXNwaW5nIGluIHRoZWlyIGV4ZXJjaXNlIG9mIGF1dGhvcml0eTsgdGhlbiwgY29udHJhcml3aXNlLCB3aGVuIHRoZXkgd2VyZSBicm91Z2h0IHRvIHRyaWFsLCBoZSB3b3VsZCBjb21lIHRvIHRoZWlyIGFpZCBhbmQgZXhlcnQgaGltc2VsZiBpbiB0aGVpciBiZWhhbGYsIGFuZCBzbyB3b3VsZCBtYWtlIHRoZW0gZnJpZW5kcyBpbnN0ZWFkIG9mIGVuZW1pZXMsIGFuZCBicmluZyB0aGVtIG92ZXIgdG8gaGlzIHNpZGUsIHNvIHRoYXQgbm8gb25lIHdhcyBsZWZ0IHRvIG9wcG9zZSBoaW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgQWdlc2lwb2xpcywgdGhlIG90aGVyIGtpbmcsIHNpbmNlIGhlIHdhcyB0aGUgc29uIG9mIGFuIGV4aWxlLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGF1c2FuaWFzLCB3aG8gd2FzIGltcGVhY2hlZCBpbiAzOTUgQi5DLiwgd2VudCBpbnRvIHZvbHVudGFyeSBleGlsZSwgYW5kIHdhcyBjb25kZW1uZWQgdG8gZGVhdGguPC9ub3RlPiBpbiB5ZWFycyBhIG1lcmUgc3RyaXBsaW5nLCBhbmQgYnkgbmF0dXJlIGdlbnRsZSBhbmQgcXVpZXQsIHRvb2sgbGl0dGxlIHBhcnQgaW4gYWZmYWlycyBvZiBzdGF0ZS4gQW5kIHlldCBoZSB0b28gd2FzIGJyb3VnaHQgdW5kZXIgdGhlIHN3YXkgb2YgQWdlc2lsYcO8cy4gRm9yIHRoZSBTcGFydGFuIGtpbmdzIGVhdCB0b2dldGhlciBpbiB0aGUgc2FtZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBoaWRpdGl1bSw8L3E+IG9yIHB1YmxpYyBtZXNzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxMi4xIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5Y3VyZ3VzPC90aXRsZT4sIHhpaS4gMSA8L2JpYmw+Zi48L25vdGU+IHdoZW5ldmVyIHRoZXkgYXJlIGF0IGhvbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBrbm93aW5nIHRoYXQgQWdlc2lwb2xpcyB3YXMgcHJvbmUgdG8gbG92ZSBhZmZhaXJzLCBqdXN0IGFzIGhlIHdhcyBoaW1zZWxmLCBBZ2VzaWxhw7xzIHdvdWxkIGFsd2F5cyBpbnRyb2R1Y2Ugc29tZSBkaXNjb3Vyc2UgYWJvdXQgdGhlIGJveXMgd2hvIHdlcmUgb2YgYW4gYWdlIHRvIGxvdmUuIEhlIHdvdWxkIGV2ZW4gbGVhZCB0aGUgeW91bmcga2luZydzIGZhbmN5IHRvd2FyZCB0aGUgb2JqZWN0IG9mIGhpcyBvd24gYWZmZWN0aW9ucywgYW5kIHNoYXJlIHdpdGggaGltIGluIHdvb2luZyBhbmQgbG92aW5nLCB0aGVzZSBTcGFydGFuIGxvdmVzIGhhdmluZyBub3RoaW5nIHNoYW1lZnVsIGluIHRoZW0sIGJ1dCBiZWluZyBhdHRlbmRlZCByYXRoZXIgd2l0aCBncmVhdCBtb2Rlc3R5LCBoaWdoIGFtYml0aW9uLCBhbmQgYW4gYXJkZW50IGRlc2lyZSBmb3IgZXhjZWxsZW5jZSwgYXMgSSBoYXZlIHdyaXR0ZW4gaW4gbXkgbGlmZSBvZiBMeWN1cmd1cy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxNy4xIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxNy4xIiB2YWxpZD0ieWVzIj5DaGFwdGVycyB4dmlpLiAxPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTguNCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTguNCIgdmFsaWQ9InllcyI+eHZpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgdGh1cyBvYnRhaW5lZCB2ZXJ5IGdyZWF0IGluZmx1ZW5jZSBpbiB0aGUgY2l0eSwgaGUgZWZmZWN0ZWQgdGhlIGFwcG9pbnRtZW50IG9mIFRlbGV1dGlhcywgaGlzIGhhbGYtYnJvdGhlciBvbiBoaXMgbW90aGVyJ3Mgc2lkZSwgYXMgYWRtaXJhbC4gVGhlbiBoZSBsZWQgYW4gYXJteSB0byBDb3JpbnRoLCBhbmQgaGltc2VsZiwgYnkgbGFuZCwgY2FwdHVyZWQgdGhlIGxvbmcgd2FsbHMsIHdoaWxlIFRlbGV1dGlhcywgd2l0aCBoaXMgZmxlZXQsIHNlaXplZCB0aGUgZW5lbXkncyBzaGlwcyBhbmQgZG9ja3lhcmRzLiBUaGVuIGNvbWluZyBzdWRkZW5seSB1cG9uIHRoZSBBcmdpdmVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGx1dGFyY2ggY29uZnVzZXMgdGhlIGV4cGVkaXRpb24gb2YgMzkzIEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNC4xOSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC40LjE5IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDQuIDE5PC9iaWJsPikgd2l0aCB0aGF0IG9mIDM5MCBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjUuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gNSwgMSBmZi48L2JpYmw+KS48L25vdGU+IHdobyBhdCB0aGF0IHRpbWUgaGVsZCBDb3JpbnRoLCBhbmQgd2VyZSBjZWxlYnJhdGluZyB0aGUgSXN0aG1pYW4gZ2FtZXMsIGhlIGRyb3ZlIHRoZW0gYXdheSBqdXN0IGFzIHRoZXkgaGFkIHNhY3JpZmljZWQgdG8gdGhlIGdvZCwgYW5kIG1hZGUgdGhlbSBhYmFuZG9uIGFsbCB0aGVpciBlcXVpcG1lbnQgZm9yIHRoZSBmZXN0aXZhbC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcywgdGhlIGV4aWxlcyBmcm9tIENvcmludGggd2hvIHdlcmUgaW4gaGlzIGFybXkgYmVnZ2VkIGhpbSB0byBob2xkIHRoZSBnYW1lcy4gVGhpcywgaG93ZXZlciwgaGUgd291bGQgbm90IGRvLCBidXQgcmVtYWluZWQgYXQgaGFuZCB3aGlsZSB0aGV5IGhlbGQgdGhlIGdhbWVzIGZyb20gYmVnaW5uaW5nIHRvIGVuZCwgYW5kIGFmZm9yZGVkIHRoZW0gc2VjdXJpdHkuIEFmdGVyd2FyZHMsIHdoZW4gaGUgaGFkIGRlcGFydGVkLCB0aGUgSXN0aG1pYW4gZ2FtZXMgd2VyZSBoZWxkIGFmcmVzaCBieSB0aGUgQXJnaXZlcywgYW5kIHNvbWUgY29udGVzdGFudHMgd29uIHRoZWlyIHZpY3RvcmllcyBhIHNlY29uZCB0aW1lLCB3aGlsZSBzb21lIHdlcmUgZW50ZXJlZCBpbiB0aGUgbGlzdHMgYXMgdmljdG9ycyBpbiB0aGUgZmlyc3QgY29udGVzdHMsIGJ1dCBhcyB2YW5xdWlzaGVkIGluIHRoZSBzZWNvbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgbWF0dGVyIEFnZXNpbGHDvHMgZGVjbGFyZWQgdGhhdCB0aGUgQXJnaXZlcyBoYWQgYnJvdWdodCBkb3duIHVwb24gdGhlbXNlbHZlcyB0aGUgY2hhcmdlIG9mIGdyZWF0IGNvd2FyZGljZSwgc2luY2UgdGhleSByZWdhcmRlZCB0aGUgY29uZHVjdCBvZiB0aGUgZ2FtZXMgYXMgc28gZ3JlYXQgYW5kIGF1Z3VzdCBhIHByaXZpbGVnZSwgYW5kIHlldCBoYWQgbm90IHRoZSBjb3VyYWdlIHRvIGZpZ2h0IGZvciBpdC4gSGUgaGltc2VsZiB0aG91Z2h0IHRoYXQgbW9kZXJhdGlvbiBvdWdodCB0byBiZSBvYnNlcnZlZCBpbiBhbGwgdGhlc2UgbWF0dGVycywgYW5kIHNvdWdodCB0byBpbXByb3ZlIHRoZSBsb2NhbCBjaG9pcnMgYW5kIGdhbWVzLiBUaGVzZSBoZSBhbHdheXMgYXR0ZW5kZWQsIGZ1bGwgb2YgYW1iaXRpb3VzIGFyZG91ciwgYW5kIHdhcyBhYnNlbnQgZnJvbSBubyBjb250ZXN0IGluIHdoaWNoIGVpdGhlciBib3lzIG9yIGdpcmxzIGNvbXBldGVkLiBUaG9zZSB0aGluZ3MsIGhvd2V2ZXIsIGZvciB3aGljaCBoZSBzYXcgdGhlIHJlc3Qgb2YgdGhlIHdvcmxkIGZpbGxlZCB3aXRoIGFkbWlyYXRpb24sIGhlIGFwcGVhcmVkIG5vdCBldmVuIHRvIHJlY29nbml6ZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+T25jZSB1cG9uIGEgdGltZSBDYWxsaXBpZGVzIHRoZSB0cmFnaWMgYWN0b3IsIHdobyBoYWQgYSBuYW1lIGFuZCBmYW1lIGFtb25nIHRoZSBHcmVla3MgYW5kIHdhcyBlYWdlcmx5IGNvdXJ0ZWQgYnkgYWxsLCBmaXJzdCBtZXQgaGltIGFuZCBhZGRyZXNzZWQgaGltLCB0aGVuIHBvbXBvdXNseSB0aHJ1c3QgaGltc2VsZiBpbnRvIGhpcyBjb21wYW55IG9mIGF0dGVuZGFudHMsIHNob3dpbmcgcGxhaW5seSB0aGF0IGhlIGV4cGVjdGVkIHRoZSBraW5nIHRvIG1ha2UgaGltIHNvbWUgZnJpZW5kbHkgb3ZlcnR1cmVzLCBhbmQgZmluYWxseSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvc3QgdGhvdSBub3QgcmVjb2duaXplIG1lLCBPIEtpbmc/PC9xPiBUaGUga2luZyBmaXhlZCBoaXMgZXllcyB1cG9uIGhpbSBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZWEsIGFydCB0aG91IG5vdCBDYWxsaXBpZGVzIHRoZSBidWZmb29uPzwvcT4gRm9yIHRoaXMgaXMgaG93IHRoZSBMYWNlZGFlbW9uaWFucyBkZXNjcmliZSBhY3RvcnMuIEFuZCBhZ2Fpbiwgd2hlbiBoZSB3YXMgaW52aXRlZCB0byBoZWFyIHRoZSBtYW4gd2hvIGltaXRhdGVkIHRoZSBuaWdodGluZ2FsZSwgaGUgZGVjbGluZWQsIHNheWluZzogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGhhdmUgaGVhcmQgdGhlIGJpcmQgaGVyc2VsZi48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMjAuNSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMjAuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MeWN1cmd1czwvdGl0bGU+LCB4eC4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgTWVuZWNyYXRlcyB0aGUgcGh5c2ljaWFuLCB3aG8sIGZvciBoaXMgc3VjY2VzcyBpbiBjZXJ0YWluIGRlc3BlcmF0ZSBjYXNlcywgaGFkIHJlY2VpdmVkIHRoZSBzdXJuYW1lIG9mIFpldXMsIGFuZCBoYWQgdGhlIGhhZCB0YXN0ZSB0byBlbXBsb3kgdGhlIGFwcGVsbGF0aW9uLCBhY3R1YWxseSBkYXJlZCB0byB3cml0ZSB0aGUga2luZyBhIGxldHRlciBiZWdpbm5pbmcgdGh1czogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NZW5lY3JhdGVzIFpldXMsIHRvIEtpbmcgQWdlc2lsYcO8cywgZ3JlZXRpbmcuPC9xPiBUbyB0aGlzIEFnZXNpbGHDvHMgcmVwbGllZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5LaW5nIEFnZXNpbGHDvHMsIHRvIE1lbmVjcmF0ZXMsIGhlYWx0aCBhbmQgc2FuaXR5LjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIGhlIHdhcyBsaW5nZXJpbmcgaW4gdGhlIHRlcnJpdG9yeSBvZiBDb3JpbnRoLCBoZSBzZWl6ZWQgdGhlIEhlcmFldW0sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgcmVmdWdlZXMgaW4gdGhlIEhlcmFldW0gY2FtZSBvdXQgYW5kIHN1cnJlbmRlcmVkIG9mIHRoZWlyIG93biBhY2NvcmQgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS41IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjUuNSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGl2LiA1LCA1PC9iaWJsPikuPC9ub3RlPiBhbmQgYXMgaGUgd2FzIHdhdGNoaW5nIGhpcyBzb2xkaWVycyBjYXJyeSBvZmYgdGhlIHByaXNvbmVycyBhbmQgYm9vdHksIG1lc3NlbmdlcnMgY2FtZSBmcm9tIFRoZWJlcyB0byB0cmVhdCBmb3IgcGVhY2UuIEJ1dCBoZSBoYWQgYWx3YXlzIGhhdGVkIHRoYXQgY2l0eSwgYW5kIHRoaW5raW5nIHRoaXMgYW4gYWR2YW50YWdlb3VzIHRpbWUgYWxzbyBmb3IgaW5zdWx0aW5nIGl0LCBwcmV0ZW5kZWQgbmVpdGhlciB0byBzZWUgbm9yIGhlYXIgaXRzIGFtYmFzc2Fkb3JzIHdoZW4gdGhleSBwcmVzZW50ZWQgdGhlbXNlbHZlcy4gQnV0IGhpcyBwcmlkZSBzb29uIGhhZCBhIGZhbGw7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciB0aGUgVGhlYmFucyBoYWQgbm90IHlldCBkZXBhcnRlZCB3aGVuIG1lc3NlbmdlcnMgY2FtZSB0byBoaW0gd2l0aCB0aWRpbmdzIHRoYXQgdGhlIFNwYXJ0YW4gZGl2aXNpb24gaGFkIGJlZW4gY3V0IHRvIHBpZWNlcyBieSBJcGhpY3JhdGVzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXQgTGVjaGFldW0gdGhlIHBvcnQgb2YgQ29yaW50aCBvbiB0aGUgQ29yaW50aGlhbiBndWxmIGluIDM5MCBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjUuMTEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS4xMSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGl2LiA1LCAxMS0xODwvYmlibD4pLjwvbm90ZT4gVGhpcyB3YXMgdGhlIGdyZWF0ZXN0IGRpc2FzdGVyIHRoYXQgaGFkIGhhcHBlbmVkIHRvIHRoZSBTcGFydGFucyBpbiBhIGxvbmcgdGltZTsgZm9yIHRoZXkgbG9zdCBtYW55IGJyYXZlIG1lbiwgYW5kIHRob3NlIG1lbiB3ZXJlIG92ZXJ3aGVsbWVkIGJ5IHRhcmdldGVlcnMgYW5kIG1lcmNlbmFyaWVzLCB0aG91Z2ggdGhleSB3ZXJlIG1lbi1hdC1hcm1zIGFuZCBMYWNlZGFlbW9uaWFucy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRoZW4sIEFnZXNpbGHDvHMgc3ByYW5nIHVwIHRvIGdvIHRvIHRoZWlyIGFzc2lzdGFuY2UsIGJ1dCB3aGVuIGhlIGxlYXJuZWQgdGhhdCBpdCB3YXMgYWxsIG92ZXIgd2l0aCB0aGVtLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGUgaGFkIG1hcmNoZWQgdGlsbCBoZSB3YXMgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2VsbCB3aXRoaW4gdGhlIHBsYXRlYXUgb2YgTGVjaGFldW08L3E+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjUuOCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjgiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gNSwgODwvYmlibD4pLjwvbm90ZT4gaGUgY2FtZSBiYWNrIGFnYWluIHRvIHRoZSBIZXJhZXVtLCBhbmQgb3JkZXJpbmcgdGhlIEJvZW90aWFucyB0aGVuIHRvIGNvbWUgYmVmb3JlIGhpbSwgZ2F2ZSB0aGVtIGFuIGF1ZGllbmNlLiBCdXQgdGhleSByZXR1cm5lZCBoaXMgaW5zb2xlbmNlIGJ5IG1ha2luZyBubyBtZW50aW9uIG9mIHBlYWNlLCBidXQgc2ltcGx5IGFza2luZyBzYWZlIGNvbmR1Y3QgaW50byBDb3JpbnRoLiBBZ2VzaWxhw7xzIHdhcyB3cm90aCBhdCB0aGlzLCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JZiB5b3Ugd2lzaCB0byBzZWUgeW91ciBmcmllbmRzIHdoZW4gdGhleSBhcmUgZWxhdGVkIGF0IHRoZWlyIHN1Y2Nlc3NlcywgeW91IGNhbiBkbyBzbyB0b21vcnJvdyBpbiBhbGwgc2FmZXR5LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGFraW5nIHRoZW0gYWxvbmcgd2l0aCBoaW0gb24gdGhlIG5leHQgZGF5LCBoZSByYXZhZ2VkIHRoZSB0ZXJyaXRvcnkgb2YgdGhlIENvcmludGhpYW5zLCBhbmQgYWR2YW5jZWQgdG8gdGhlIHZlcnkgZ2F0ZXMgb2YgdGhlIGNpdHkuIEFmdGVyIGhlIGhhZCB0aHVzIHByb3ZlZCB0aGF0IHRoZSBDb3JpbnRoaWFucyBkaWQgbm90IGRhcmUgdG8gcmVzaXN0IGhpbSwgaGUgZGlzbWlzc2VkIHRoZSBlbWJhc3N5LiBUaGVuIGhlIGhpbXNlbGYsIHBpY2tpbmcgdXAgdGhlIHN1cnZpdm9ycyBvZiB0aGUgZGl2aXNpb24gdGhhdCBoYWQgYmVlbiBjdXQgdG8gcGllY2VzLCBsZWQgdGhlbSBiYWNrIHRvIFNwYXJ0YSwgYWx3YXlzIGJyZWFraW5nIGNhbXAgYmVmb3JlIGl0IHdhcyBkYXksIGFuZCBwaXRjaGluZyB0aGUgbmV4dCBjYW1wIGFmdGVyIGl0IHdhcyBkYXJrLCBpbiBvcmRlciB0aGF0IHRoZSBoYXRlZnVsIGFuZCBtYWxpY2lvdXMgQXJjYWRpYW5zIG1pZ2h0IG5vdCBleHVsdCBvdmVyIHRoZW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCB0byBncmF0aWZ5IHRoZSBBY2hhZWFucywgaGUgY3Jvc3NlZCBvdmVyIHdpdGggdGhlbSBvbiBhbiBleHBlZGl0aW9uIGludG8gQWNhcm5hbmlhLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzkwLTM4OSBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjYuMyIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC42LjMiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gNiwgMzwvYmlibD7igJQ8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjcuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC43LjEiIHZhbGlkPSJ5ZXMiPjcsIDE8L2JpYmw+KS48L25vdGU+IHdoZXJlIGhlIGRyb3ZlIGF3YXkgbXVjaCBib290eSBhbmQgY29ucXVlcmVkIHRoZSBBY2FybmFuaWFucyBpbiBiYXR0bGUuIEJ1dCB3aGVuIHRoZSBBY2hhZWFucyBhc2tlZCBoaW0gdG8gc3BlbmQgdGhlIHdpbnRlciB0aGVyZSBpbiBvcmRlciB0byBwcmV2ZW50IHRoZSBlbmVteSBmcm9tIHNvd2luZyB0aGVpciBmaWVsZHMsIGhlIHNhaWQgaGUgd291bGQgZG8gdGhlIG9wcG9zaXRlIG9mIHRoaXM7IGZvciB0aGUgZW5lbXkgd291bGQgZHJlYWQgdGhlIHdhciBtb3JlIGlmIHRoZWlyIGxhbmQgd2FzIHNvd24gd2hlbiBzdW1tZXIgY2FtZS4gQW5kIHRoaXMgcHJvdmVkIHRydWU7IGZvciB3aGVuIGEgc2Vjb25kIGV4cGVkaXRpb24gYWdhaW5zdCB0aGVtIHdhcyBhbm5vdW5jZWQsIHRoZXkgY2FtZSB0byB0ZXJtcyB3aXRoIHRoZSBBY2hhZWFucy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ29ub24gYW5kIFBoYXJuYWJhenVzIHdpdGggdGhlIEdyZWF0IEtpbmcncyBmbGVldCB3ZXJlIG1hc3RlcnMgb2YgdGhlIHNlYSBhbmQgd2VyZSByYXZhZ2luZyB0aGUgY29hc3RzIG9mIExhY29uaWEsIGFuZCBhZnRlciB0aGUgd2FsbHMgb2YgQXRoZW5zIGhhZCBiZWVuIHJlYnVpbHQgd2l0aCB0aGUgbW9uZXkgd2hpY2ggUGhhcm5hYmF6dXMgZnVybmlzaGVkLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzkzIEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuOC4xMCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC44LjEwIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDgsMTA8L2JpYmw+KS48L25vdGU+IHRoZSBMYWNlZGFlbW9uaWFucyBkZWNpZGVkIHRvIG1ha2UgcGVhY2Ugd2l0aCB0aGUga2luZyBvZiBQZXJzaWEuIFRvIHRoYXQgZW5kLCB0aGV5IHNlbnQgQW50YWxjaWRhcyB0byBUaXJpYmF6dXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgR3JlYXQgS2luZydzIHNhdHJhcCBpbiBXZXN0ZXJuIEFzaWEuPC9ub3RlPiBhbmQgaW4gdGhlIG1vc3Qgc2hhbWVmdWwgYW5kIGxhd2xlc3MgZmFzaGlvbiBoYW5kZWQgb3ZlciB0byB0aGUgS2luZyB0aGUgR3JlZWtzIHJlc2lkZW50IGluIEFzaWEsIGluIHdob3NlIGJlaGFsZiBBZ2VzaWxhw7xzIGhhZCB3YWdlZCB3YXIuIEFnZXNpbGHDvHMsIHRoZXJlZm9yZSwgY291bGQgaGF2ZSBoYWQgbm8gcGFydCBhdCBhbGwgaW4gdGhpcyBpbmZhbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBBbnRhbGNpZGFzIHdhcyBoaXMgZW5lbXksIGFuZCBwdXQgZm9ydGggYWxsIGhpcyBlZmZvcnRzIHRvIG1ha2UgdGhlIHBlYWNlIGJlY2F1c2UgaGUgc2F3IHRoYXQgdGhlIHdhciBlbmhhbmNlZCB0byB0aGUgdXRtb3N0IHRoZSByZXB1dGF0aW9uIGFuZCBwb3dlciBvZiBBZ2VzaWxhw7xzLiBOb3R3aXRoc3RhbmRpbmcgdGhpcywgdG8gb25lIHdobyByZW1hcmtlZCB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIGZhdm91cmluZyB0aGUgTWVkZXMsIEFnZXNpbGHDvHMgcmVwbGllZCB0aGF0IHRoZSBNZWRlcyB3ZXJlIHRoZSByYXRoZXIgZmF2b3VyaW5nIHRoZSBMYWNlZGFlbW9uaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGJ5IHRocmVhdGVuaW5nIHdpdGggd2FyIHRoZSBHcmVla3Mgd2hvIHdlcmUgdW53aWxsaW5nIHRvIGFjY2VwdCB0aGUgcGVhY2UsIGhlIGZvcmNlZCB0aGVtIGFsbCB0byBhYmlkZSBieSB0aGUgdGVybXMgd2hpY2ggdGhlIFBlcnNpYW4gZGljdGF0ZWQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgcGVhY2Ugb2YgQW50YWxjaWRhcyB3YXMgcmF0aWZpZWQgYnkgYWxsIHRoZSBHcmVlayBzdGF0ZXMgZXhjZXB0IFRoZWJlcyBpbiAzODcgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4xLjI5IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjEuMjkiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2LiAxLCAyOSBmZi48L2JpYmw+KS48L25vdGU+IG1vcmUgZXNwZWNpYWxseSBvbiBhY2NvdW50IG9mIHRoZSBUaGViYW5zLCBoaXMgb2JqZWN0IGJlaW5nIHRvIG1ha2UgdGhlbSB3ZWFrZXIgYnkgbGVhdmluZyBCb2VvdGlhIGluZGVwZW5kZW50IG9mIFRoZWJlcy4gVGhpcyBoZSBtYWRlIGNsZWFyIGJ5IGhpcyBzdWJzZXF1ZW50IGJlaGF2aW91ci4gRm9yIHdoZW4gUGhvZWJpZGFzIGNvbW1pdHRlZCB0aGUgZm91bCBkZWVkIG9mIHNlaXppbmcgdGhlIENhZG1laWEKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBjaXRhZGVsIG9mIFRoZWJlcy4gSXQgd2FzIHNlaXplZCBieSBQaG9lYmlkYXMgaW4gMzgzIEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuMi4yNiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4yLjI2IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdi4gMiwgMjYgZmYuPC9iaWJsPikuPC9ub3RlPiBpbiBhIHRpbWUgb2YgcGVyZmVjdCBwZWFjZSwgYW5kIGFsbCB0aGUgR3JlZWtzIHdlcmUgaW5kaWduYW50IGFuZCB0aGUgU3BhcnRhbnMgZGlzcGxlYXNlZCBhdCB0aGUgYWN0LCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgd2hlbiBlc3BlY2lhbGx5IHRob3NlIHdobyB3ZXJlIGF0IHZhcmlhbmNlIHdpdGggQWdlc2lsYcO8cyBhbmdyaWx5IGFza2VkIFBob2ViaWRhcyBieSB3aG9zZSBjb21tYW5kIGhlIGhhZCBkb25lIHRoaXMgdGhpbmcsIHRoZXJlYnkgdHVybmluZyBzdXNwaWNpb24gdXBvbiBBZ2VzaWxhw7xzLCBoZSBkaWQgbm90IHNjcnVwbGUgdG8gY29tZSB0byB0aGUgaGVscCBvZiBQaG9lYmlkYXMsIGFuZCB0byBzYXkgb3Blbmx5IHRoYXQgdGhleSBtdXN0IGNvbnNpZGVyIHdoZXRoZXIgdGhlIGFjdCBpdHNlbGYgd2FzIHNlcnZpY2VhYmxlIG9yIG5vdDsgZm9yIHRoYXQgd2hpY2ggd2FzIGFkdmFudGFnZW91cyB0byBTcGFydGEgbWlnaHQgd2VsbCBiZSBkb25lIGluZGVwZW5kZW50bHksIGV2ZW4gaWYgbm8gb25lIG9yZGVyZWQgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaW4gaGlzIGRpc2NvdXJzZSBoZSB3YXMgYWx3YXlzIGRlY2xhcmluZyB0aGF0IGp1c3RpY2Ugd2FzIHRoZSBmaXJzdCBvZiB0aGUgdmlydHVlczsgZm9yIHZhbG91ciB3YXMgb2Ygbm8gdXNlIHVubGVzcyBqdXN0aWNlIGF0dGVuZGVkIGl0LCBhbmQgaWYgYWxsIG1lbiBzaG91bGQgYmUganVzdCwgdGhlcmUgd291bGQgYmUgbm8gbmVlZCBvZiB2YWxvdXIuIEFuZCB0byB0aG9zZSB3aG8gc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGlzIHRoZSBwbGVhc3VyZSBvZiB0aGUgR3JlYXQgS2luZyw8L3E+IGhlIHdvdWxkIHNheSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ib3cgaXMgaGUgZ3JlYXRlciB0aGFuIEkgdW5sZXNzIGhlIGlzIGFsc28gbW9yZSBqdXN0PzwvcT4sIHJpZ2h0bHkgYW5kIG5vYmx5IHRoaW5raW5nIHRoYXQganVzdGljZSBtdXN0IGJlIHRoZSByb3lhbCBtZWFzdXJlIHdoZXJld2l0aCByZWxhdGl2ZSBncmVhdG5lc3MgaXMgbWVhc3VyZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuLCBhZnRlciB0aGUgcGVhY2Ugd2FzIGNvbmNsdWRlZCwgdGhlIEdyZWF0IEtpbmcgc2VudCBoaW0gYSBsZXR0ZXIgcHJvcG9zaW5nIGd1ZXN0LWZyaWVuZHNoaXAsIGhlIHdvdWxkIG5vdCBhY2NlcHQgaXQsIHNheWluZyB0aGF0IHRoZSBwdWJsaWMgZnJpZW5kc2hpcCB3YXMgZW5vdWdoLCBhbmQgdGhhdCB3aGlsZSB0aGF0IGxhc3RlZCB0aGVyZSB3b3VsZCBiZSBubyBuZWVkIG9mIGEgcHJpdmF0ZSBvbmUuIFlldCBpbiBoaXMgYWN0cyBoZSBubyBsb25nZXIgb2JzZXJ2ZWQgdGhlc2Ugb3BpbmlvbnMsIGJ1dCB3YXMgb2Z0ZW4gY2FycmllZCBhd2F5IGJ5IGFtYml0aW9uIGFuZCBjb250ZW50aW91c25lc3MsIGFuZCBwYXJ0aWN1bGFybHkgaW4gaGlzIHRyZWF0bWVudCBvZiB0aGUgVGhlYmFucy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIG5vdCBvbmx5IHJlc2N1ZWQgUGhvZWJpZGFzIGZyb20gcHVuaXNobWVudCwgYnV0IGFjdHVhbGx5IHBlcnN1YWRlZCBTcGFydGEgdG8gYXNzdW1lIHJlc3BvbnNpYmlsaXR5IGZvciBoaXMgaW5pcXVpdHkgYW5kIG9jY3VweSB0aGUgQ2FkbWVpYSBvbiBpdHMgb3duIGFjY291bnQsIGJlc2lkZXMgcHV0dGluZyB0aGUgYWRtaW5pc3RyYXRpb24gb2YgVGhlYmVzIGludG8gdGhlIGhhbmRzIG9mIEFyY2hpYXMgYW5kIExlb250aWRhcywgYnkgd2hvc2UgYWlkIFBob2ViaWRhcyBoYWQgZW50ZXJlZCBhbmQgc2VpemVkIHRoZSBhY3JvcG9saXMuIAoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2YgY291cnNlIHRoaXMgZ2F2ZSByaXNlIGF0IG9uY2UgdG8gYSBzdXNwaWNpb24gdGhhdCB3aGlsZSBQaG9lYmlkYXMgaGFkIGRvbmUgdGhlIGRlZWQsIEFnZXNpbGHDvHMgaGFkIGNvdW5zZWxsZWQgaXQ7IGFuZCBoaXMgc3Vic2VxdWVudCBhY3RzIGJyb3VnaHQgdGhlIGNoYXJnZSBpbnRvIGdlbmVyYWwgYmVsaWVmLiBGb3Igd2hlbiB0aGUgVGhlYmFucyBleHBlbGxlZCB0aGUgU3BhcnRhbiBnYXJyaXNvbiBhbmQgbGliZXJhdGVkIHRoZWlyIGNpdHksCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNzkgQi5DLiwgd2l0aCB0aGUgaGVscCBvZiB0aGUgQXRoZW5pYW5zICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHYuIDQsIDItMTI8L2JpYmw+KS4gQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiA5LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5QZWxvcGlkYXM8L3RpdGxlPiBpeC4teGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGUgY2hhcmdlZCB0aGVtIHdpdGggdGhlIG11cmRlciBvZiBBcmNoaWFzIGFuZCBMZW9udGlkYXMsIHdobyB3ZXJlIHJlYWxseSB0eXJhbnRzLCB0aG91Z2ggcG9sZW1hcmNocyBpbiBuYW1lLCBhbmQgbGV2aWVkIHdhciB1cG9uIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBDbGVvbWJyb3R1cywgd2hvIHdhcyBraW5nIG5vdyB0aGF0IEFnZXNpcG9saXMgd2FzIGRlYWQsIHdhcyBzZW50IGludG8gQm9lb3RpYSB3aXRoIGFuIGFybXk7IGZvciBBZ2VzaWxhw7xzLCB3aG8gaGFkIG5vdyBib3JuZSBhcm1zIGZvciBmb3J0eSB5ZWFycywgYW5kIHdhcyB0aGVyZWZvcmUgZXhlbXB0IGJ5IGxhdyBmcm9tIG1pbGl0YXJ5IHNlcnZpY2UsIGRlY2xpbmVkIHRoaXMgY29tbWFuZC4gSGUgd2FzIGFzaGFtZWQsIGFmdGVyIGhhdmluZyByZWNlbnRseSBtYWRlIHdhciB1cG9uIHRoZSBQaGxpYXNpYW5zIGluIGJlaGFsZiBvZiB0aGVpciBleGlsZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzODAtMzc5IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuMy4xMyIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4zLjEzIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdi4gMywgMTMtMjU8L2JpYmw+KS48L25vdGU+IHRvIGJlIHNlZW4gbm93IGhhcnJ5aW5nIHRoZSBUaGViYW5zIGluIHRoZSBpbnRlcmVzdHMgb2YgdGhlaXIgdHlyYW50cy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMTMiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4xMyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHYuIDQsIDEzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGVyZSB3YXMgYSBjZXJ0YWluIExhY2VkYWVtb25pYW4gbmFtZWQgU3Bob2RyaWFzLCBvZiB0aGUgcGFydHkgb3Bwb3NlZCB0byBBZ2VzaWxhw7xzLCB3aG8gaGFkIGJlZW4gYXBwb2ludGVkIGhhcm1vc3QgYXQgVGhlc3BpYWUuIEhlIGxhY2tlZCBuZWl0aGVyIGJvbGRuZXNzIG5vciBhbWJpdGlvbiwgYnV0IGFsd2F5cyBhYm91bmRlZCBpbiBob3BlcyByYXRoZXIgdGhhbiBpbiBnb29kIGp1ZGdlbWVudC4gVGhpcyBtYW4sIGNvdmV0aW5nIGEgZ3JlYXQgbmFtZSwgYW5kIGNvbnNpZGVyaW5nIHRoYXQgUGhvZWJpZGFzIGhhZCBtYWRlIGhpbXNlbGYgZmFtb3VzIGZhciBhbmQgbmVhciBieSBoaXMgYm9sZCBkZWVkIGF0IFRoZWJlcywgd2FzIHBlcnN1YWRlZCB0aGF0IGl0IHdvdWxkIGJlIGEgZmFyIG1vcmUgaG9ub3VyYWJsZSBhbmQgYnJpbGxpYW50IGV4cGxvaXQgZm9yIGhpbSB0byBzZWl6ZSB0aGUgUGVpcmFldXMgb24gaGlzIG93biBhY2NvdW50IGFuZCByb2IgdGhlIEF0aGVuaWFucyBvZiBhY2Nlc3MgdG8gdGhlIHNlYSwgYXR0YWNraW5nIHRoZW0gdW5leHBlY3RlZGx5IGJ5IGxhbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIHRvbywgdGhhdCB0aGUgc2NoZW1lIHdhcyBkZXZpc2VkIGJ5IFBlbG9waWRhcyBhbmQgTWVsbywgY2hpZWYgbWFnaXN0cmF0ZXMgYXQgVGhlYmVzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlaXIgb2JqZWN0IHdhcyB0byBlbWJyb2lsIEF0aGVucyBhbmQgU3BhcnRhICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMjAiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4yMCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHYuIDQsIDIwLTI0PC9iaWJsPikuPC9ub3RlPiBUaGV5IHByaXZpbHkgc2VudCBtZW4gdG8gaGltIHdobyBwcmV0ZW5kZWQgdG8gYmUgU3BhcnRhbiBzeW1wYXRoaXplcnMsIGFuZCB0aGV5LCBieSBwcmFpc2luZyBhbmQgZXhhbHRpbmcgU3Bob2RyaWFzIGFzIHRoZSBvbmx5IG1hbiB3b3J0aHkgdG8gdW5kZXJ0YWtlIHNvIGdyZWF0IGEgdGFzaywgdXJnZWQgYW5kIGluY2l0ZWQgaGltIGludG8gYW4gYWN0IHdoaWNoIHdhcyBubyBsZXNzIGxhd2xlc3MgYW5kIHVuanVzdCB0aGFuIHRoZSBzZWl6dXJlIG9mIHRoZSBDYWRtZWlhLCB0aG91Z2ggaXQgd2FzIGVzc2F5ZWQgd2l0aG91dCBjb3VyYWdlIG9yIGdvb2QgZm9ydHVuZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGZ1bGwgZGF5bGlnaHQgb3ZlcnRvb2sgaGltIHdoaWxlIGhlIHdhcyB5ZXQgaW4gdGhlIFRocmlhc2lhbiBwbGFpbiwgYWx0aG91Z2ggaGUgaGFkIGhvcGVkIHRvIGF0dGFjayB0aGUgUGVpcmFldXMgYnkgbmlnaHQuIEl0IGlzIHNhaWQgYWxzbyB0aGF0IGhpcyBzb2xkaWVycyBzYXcgYSBsaWdodCBzdHJlYW1pbmcgZnJvbSBjZXJ0YWluIHNhbmN0dWFyaWVzIGF0IEVsZXVzaXMsIGFuZCB3ZXJlIGZpbGxlZCB3aXRoIHNodWRkZXJpbmcgZmVhci4gVGhlaXIgY29tbWFuZGVyIGhpbXNlbGYgbG9zdCBhbGwgaGlzIGNvdXJhZ2UsIHNpbmNlIGNvbmNlYWxtZW50IHdhcyBubyBsb25nZXIgcG9zc2libGUsIGFuZCBhZnRlciByYXZhZ2luZyB0aGUgY291bnRyeSBhIGxpdHRsZSwgcmV0aXJlZCBkaXNncmFjZWZ1bGx5IGFuZCBpbmdsb3Jpb3VzbHkgdG8gVGhlc3BpYWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlcmV1cG9uIG1lbiB3ZXJlIHNlbnQgZnJvbSBBdGhlbnMgdG8gU3BhcnRhIHRvIGRlbm91bmNlIFNwaG9kcmlhcy4gVGhleSBmb3VuZCwgaG93ZXZlciwgdGhhdCB0aGUgbWFnaXN0cmF0ZXMgdGhlcmUgaGFkIG5vIG5lZWQgb2YgdGhlaXIgZGVudW5jaWF0aW9uLCBidXQgaGFkIGFscmVhZHkgaW5kaWN0ZWQgU3Bob2RyaWFzIG9uIGEgY2FwaXRhbCBjaGFyZ2UuIFRoaXMgY2hhcmdlIGhlIGRldGVybWluZWQgbm90IHRvIG1lZXQsIGZlYXJpbmcgdGhlIHdyYXRoIG9mIGhpcyBjb3VudHJ5bWVuLCB3aG8gd2VyZSBhc2hhbWVkIGluIHRoZSBwcmVzZW5jZSBvZiB0aGUgQXRoZW5pYW5zLCBhbmQgd2lzaGVkIHRvIGJlIHRob3VnaHQgd3JvbmdlZCB3aXRoIHRoZW0sIHRoYXQgdGhleSBtaWdodCBub3QgYmUgdGhvdWdodCB3cm9uZ2RvZXJzIHdpdGggU3Bob2RyaWFzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IFNwaG9kcmlhcyBoYWQgYSBzb24sIENsZW9ueW11cywgd2hvIHdhcyBzdGlsbCBhIGJveSBhbmQgZmFpciB0byBsb29rIHVwb24sIGFuZCBvZiB3aG9tIEFyY2hpZGFtdXMsIHRoZSBzb24gb2YgS2luZyBBZ2VzaWxhw7xzLCB3YXMgZW5hbW91cmVkLiBJbiB0aGlzIGNyaXNpcyBBcmNoaWRhbXVzIG5hdHVyYWxseSBzeW1wYXRoaXplZCB3aXRoIGhpcyBmYXZvdXJpdGUgYmVjYXVzZSBvZiB0aGUgcGVyaWwgaW4gd2hpY2ggaGlzIGZhdGhlciBzdG9vZCwgYnV0IGhlIHdhcyB1bmFibGUgdG8gYWlkIGFuZCBhc3Npc3QgaGltIG9wZW5seSwgc2luY2UgU3Bob2RyaWFzIHdhcyBvbmUgb2YgdGhlIG9wcG9uZW50cyBvZiBBZ2VzaWxhw7xzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBDbGVvbnltdXMgY2FtZSB0byBoaW0gaW4gdGVhcnMgYW5kIGJlZ2dlZCBoaW0gdG8gbW9sbGlmeSBBZ2VzaWxhw7xzLCBmcm9tIHdob20gaGUgYW5kIGhpcyBmYXRoZXIgaGFkIG1vc3QgdG8gZmVhciwgZm9yIHRocmVlIG9yIGZvdXIgZGF5cyBoZSB3YXMgcmVzdHJhaW5lZCBieSBhd2UgYW5kIGZlYXIgZnJvbSBzYXlpbmcgYW55dGhpbmcgdG8gQWdlc2lsYcO8cyBhcyBoZSBmb2xsb3dlZCBoaW0gYWJvdXQ7IGJ1dCBmaW5hbGx5LCB3aGVuIHRoZSB0cmlhbCB3YXMgbmVhciBhdCBoYW5kLCBoZSBwbHVja2VkIHVwIGNvdXJhZ2UgdG8gdGVsbCBoaW0gdGhhdCBDbGVvbnltdXMgaGFkIGJlZ2dlZCBoaW0gdG8gaW50ZXJjZWRlIGZvciBoaXMgZmF0aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgQWdlc2lsYcO8cywgYWx0aG91Z2ggaGUga25ldyBvZiB0aGUgbG92ZSBvZiBBcmNoaWRhbXVzLCBoYWQgbm90IHB1dCBhIHN0b3AgdG8gaXQsIHNpbmNlIENsZW9ueW11cywgZnJvbSBoaXMgZWFybHkgYm95aG9vZCwgaGFkIGdpdmVuIHNwZWNpYWwgcHJvbWlzZSBvZiBiZWNvbWluZyBhbiBlYXJuZXN0IGFuZCB3b3J0aHkgbWFuLiBBdCB0aGlzIHRpbWUsIGhvd2V2ZXIsIGhlIGRpZCBub3QgcGVybWl0IGhpcyBzb24gdG8gZXhwZWN0IGFueSBhZHZhbnRhZ2Ugb3Iga2luZG5lc3MgaW4gYW5zd2VyIHRvIGhpcyBwcmF5ZXI7IGhlIG1lcmVseSBzYWlkLCBhcyBoZSB3ZW50IGF3YXksIHRoYXQgaGUgd291bGQgY29uc2lkZXIgd2hhdCB3YXMgdGhlIGhvbm91cmFibGUgYW5kIGZpdHRpbmcgY291cnNlIGluIHRoZSBtYXR0ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFyY2hpZGFtdXMgd2FzIHRoZXJlZm9yZSBtb3J0aWZpZWQsIGFuZCBjZWFzZWQgdG8gdmlzaXQgQ2xlb255bXVzLCBhbHRob3VnaCBiZWZvcmUgdGhpcyBoZSBoYWQgZG9uZSBzbyBtYW55IHRpbWVzIGEgZGF5LiBBcyBhIGNvbnNlcXVlbmNlLCB0aGUgZnJpZW5kcyBvZiBTcGhvZHJpYXMgYWxzbyB3ZXJlIG1vcmUgaW4gZGVzcGFpciBvZiBoaXMgY2FzZSwgdW50aWwgRXR5bW9jbGVzLCBvbmUgb2YgdGhlIGZyaWVuZHMgb2YgQWdlc2lsYcO8cywgY29uZmVycmVkIHdpdGggdGhlbSBhbmQgZGlzY2xvc2VkIHRoZSBtaW5kIG9mIHRoZSBraW5nLCBuYW1lbHksIHRoYXQgaGUgYmxhbWVkIHRvIHRoZSB1dG1vc3Qgd2hhdCBTcGhvZHJpYXMgaGFkIGRvbmUsIGJ1dCB5ZXQgdGhvdWdodCBoaW0gYSBicmF2ZSBtYW4sIGFuZCBzYXcgdGhhdCB0aGUgY2l0eSBuZWVkZWQganVzdCBzdWNoIHNvbGRpZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyB3YXMgdGhlIHdheSBpbiB3aGljaCBBZ2VzaWxhw7xzIGFsd2F5cyBzcG9rZSBhYm91dCB0aGUgdHJpYWwsIGluIGhpcyBkZXNpcmUgdG8gZ3JhdGlmeSBoaXMgc29uLCBzbyB0aGF0IENsZW9ueW11cyB3YXMgYXQgb25jZSBhd2FyZSBvZiB0aGUgemVhbG91cyBlZmZvcnRzIG9mIEFyY2hpZGFtdXMgaW4gaGlzIGJlaGFsZiwgYW5kIHRoZSBmcmllbmRzIG9mIFNwaG9kcmlhcyBoYWQgY291cmFnZSBhdCBsYXN0IHRvIGNvbWUgdG8gaGlzIGhlbHAuIEl0IGlzIGEgZmFjdCBhbHNvIHRoYXQgQWdlc2lsYcO8cyB3YXMgZXhjZXNzaXZlbHkgZm9uZCBvZiBoaXMgY2hpbGRyZW4sIGFuZCBhIHN0b3J5IGlzIHRvbGQgb2YgaGlzIGpvaW5pbmcgaW4gdGhlaXIgY2hpbGRpc2ggcGxheS4gT25jZSwgd2hlbiB0aGV5IHdlcmUgdmVyeSBzbWFsbCwgaGUgYmVzdHJvZGUgYSBzdGljaywgYW5kIHdhcyBwbGF5aW5nIGhvcnNlIHdpdGggdGhlbSBpbiB0aGUgaG91c2UsIGFuZCB3aGVuIGhlIHdhcyBzcGllZCBkb2luZyB0aGlzIGJ5IG9uZSBvZiBoaXMgZnJpZW5kcywgaGUgZW50cmVhdGVkIGhpbSBub3QgdG8gdGVsbCBhbnkgb25lLCB1bnRpbCBoZSBoaW1zZWxmIHNob3VsZCBiZSBhIGZhdGhlciBvZiBjaGlsZHJlbi4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBTcGhvZHJpYXMgd2FzIGFjcXVpdHRlZCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMjQiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4yNCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHYuIDQsIDI0LTM0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgdGhlIEF0aGVuaWFucywgb24gbGVhcm5pbmcgb2YgaXQsIHdlcmUgaW5jbGluZWQgdG8gZ28gdG8gd2FyLCBBZ2VzaWxhw7xzIHdhcyB2ZXJ5IGhhcnNobHkgY3JpdGljaXplZC4gSXQgd2FzIHRob3VnaHQgdGhhdCwgdG8gZ3JhdGlmeSBhbiBhYnN1cmQgYW5kIGNoaWxkaXNoIGRlc2lyZSwgaGUgaGFkIG9wcG9zZWQgdGhlIGNvdXJzZSBvZiBqdXN0aWNlIGluIGEgdHJpYWwsIGFuZCBtYWRlIHRoZSBjaXR5IGFjY2Vzc29yeSB0byBncmVhdCBjcmltZXMgYWdhaW5zdCB0aGUgR3JlZWtzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzLCB3aGVuIGhlIHNhdyB0aGF0IGhpcyBjb2xsZWFndWUgQ2xlb21icm90dXMgd2FzIGxpdHRsZSBpbmNsaW5lZCB0byBtYWtlIHdhciB1cG9uIHRoZSBUaGViYW5zLCBoZSB3YWl2ZWQgdGhlIGV4ZW1wdGlvbiBieSBsYXcgd2hpY2ggaGUgaGFkIGZvcm1lcmx5IGNsYWltZWQgaW4gdGhlIG1hdHRlciBvZiB0aGUgZXhwZWRpdGlvbiwgYW5kIHByZXNlbnRseSBsZWQgYW4gaW5jdXJzaW9uIGludG8gQm9lb3RpYSBoaW1zZWxmLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFhlbm9waG9uICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMzUiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4zNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5IZWxsLjx0aXRsZT4gdi4gNCwgMzU8L3RpdGxlPgogICAgICAgICAgICAgICAgICA8L3RpdGxlPgogICAgICAgICAgICAgICA8L2JpYmw+KSwgaGUgd2FzIGFza2VkIHRvIGRvIHNvIGJ5IHRoZSBMYWNlZGFlbW9uaWFucywgd2hvIHByZWZlcnJlZCBoaW0gdG8gQ2xlb21icm90dXMgYXMgYSBsZWFkZXIuIFRoaXMgd2FzIGluIDM3OCBCLkMuPC9ub3RlPiB3aGVyZSBoZSBpbmZsaWN0ZWQgZGFtYWdlIHVwb24gdGhlIFRoZWJhbnMsIGFuZCBpbiBoaXMgdHVybiBtZXQgd2l0aCByZXZlcnNlcywgc28gdGhhdCBvbmUgZGF5IHdoZW4gaGUgd2FzIHdvdW5kZWQsIEFudGFsY2lkYXMgc2FpZCB0byBoaW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kZWVkLCB0aGlzIGlzIGEgZmluZSB0dWl0aW9uLWZlZSB3aGljaCB0aG91IGFydCBnZXR0aW5nIGZyb20gdGhlIFRoZWJhbnMsIGZvciB0ZWFjaGluZyB0aGVtIGhvdyB0byBmaWdodCB3aGVuIHRoZXkgZGlkIG5vdCB3aXNoIHRvIGRvIGl0LCBhbmQgZGlkIG5vdCBldmVuIGtub3cgaG93LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIFRoZWJhbnMgYXJlIHNhaWQgdG8gaGF2ZSBiZWVuIHJlYWxseSBtb3JlIHdhcmxpa2UgYXQgdGhpcyB0aW1lIHRoYW4gZXZlciBiZWZvcmUsIG93aW5nIHRvIHRoZSBtYW55IGV4cGVkaXRpb25zIHdoaWNoIHRoZSBMYWNlZGFlbW9uaWFucyBtYWRlIGFnYWluc3QgdGhlbSwgYnkgd2hpY2ggdGhleSB3ZXJlIHZpcnR1YWxseSBzY2hvb2xlZCBpbiBhcm1zLiBBbmQgTHljdXJndXMgb2Ygb2xkLCBpbiBvbmUgb2YgaGlzIHRocmVlIHNvLWNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnJoZXRyYXMsPC9xPiBmb3JiYWRlIGhpcyBwZW9wbGUgdG8gbWFrZSBmcmVxdWVudCBleHBlZGl0aW9ucyBhZ2FpbnN0IHRoZSBzYW1lIGZvZXMsIGluIG9yZGVyIHRoYXQgdGhvc2UgZm9lcyBtaWdodCBub3QgbGVhcm4gaG93IHRvIG1ha2Ugd2FyLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxMy42IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxMy42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5Y3VyZ3VzPC90aXRsZT4sIHhpaWkuIDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+TW9yZW92ZXIsIHRoZSBhbGxpZXMgb2YgdGhlIExhY2VkYWVtb25pYW5zIHdlcmUgb2ZmZW5kZWQgYXQgQWdlc2lsYcO8cywgYmVjYXVzZSwgYXMgdGhleSBzYWlkLCBpdCB3YXMgbm90IHVwb24gYW55IHB1YmxpYyBncm91bmQgb2YgY29tcGxhaW50LCBidXQgYnkgcmVhc29uIG9mIHNvbWUgcGFzc2lvbmF0ZSByZXNlbnRtZW50IG9mIGhpcyBvd24sIHRoYXQgaGUgc291Z2h0IHRvIGRlc3Ryb3kgdGhlIFRoZWJhbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGV5IHNhaWQgdGhleSBoYWQgbm8gd2lzaCB0byBiZSBkcmFnZ2VkIGhpdGhlciBhbmQgdGhpdGhlciB0byBkZXN0cnVjdGlvbiBldmVyeSB5ZWFyLCB0aGV5IHRoZW1zZWx2ZXMgc28gbWFueSwgYW5kIHRoZSBMYWNlZGFlbW9uaWFucywgd2l0aCB3aG9tIHRoZXkgZm9sbG93ZWQsIHNvIGZldy4gSXQgd2FzIGF0IHRoaXMgdGltZSwgd2UgYXJlIHRvbGQsIHRoYXQgQWdlc2lsYcO8cywgd2lzaGluZyB0byByZWZ1dGUgdGhlaXIgYXJndW1lbnQgZnJvbSBudW1iZXJzLCBkZXZpc2VkIHRoZSBmb2xsb3dpbmcgc2NoZW1lLiBIZSBvcmRlcmVkIGFsbCB0aGUgYWxsaWVzIHRvIHNpdCBkb3duIGJ5IHRoZW1zZWx2ZXMgcHJvbWlzY3VvdXNseSwgYW5kIHRoZSBMYWNlZGFlbW9uaWFucyBhcGFydCBieSB0aGVtc2VsdmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhpcyBoZXJhbGQgY2FsbGVkIHVwb24gdGhlIHBvdHRlcnMgdG8gc3RhbmQgdXAgZmlyc3QsIGFuZCBhZnRlciB0aGVtIHRoZSBzbWl0aHMsIG5leHQsIHRoZSBjYXJwZW50ZXJzIGluIHRoZWlyIHR1cm4sIGFuZCB0aGUgYnVpbGRlcnMsIGFuZCBzbyBvbiB0aHJvdWdoIGFsbCB0aGUgaGFuZGljcmFmdHMuIEluIHJlc3BvbnNlLCBhbG1vc3QgYWxsIHRoZSBhbGxpZXMgcm9zZSB1cCwgYnV0IG5vdCBhIG1hbiBvZiB0aGUgTGFjZWRhZW1vbmlhbnM7IGZvciB0aGV5IHdlcmUgZm9yYmlkZGVuIHRvIGxlYXJuIG9yIHByYWN0aXNlIGEgbWFudWFsIGFydC4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMjQuMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMjQuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MeWN1cmd1czwvdGl0bGU+LCB4eGl2LiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGVuIEFnZXNpbGHDvHMgc2FpZCB3aXRoIGEgbGF1Z2g6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91IHNlZSwgTyBtZW4sIGhvdyBtYW55IG1vcmUgc29sZGllcnMgdGhhbiB5b3Ugd2UgYXJlIHNlbmRpbmcgb3V0LjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBNZWdhcmEsIHdoZW4gaGUgd2FzIGxlYWRpbmcgaGlzIGFybXkgYmFjayBmcm9tIFRoZWJlcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyb20gYSBzZWNvbmQgaW5jdXJzaW9uIGludG8gQm9lb3RpYSwgbWFkZSBpbiAzNzcgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjQ3IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuNDciIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2LiA0LCA0Ny01NTwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC41OCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjU4IiB2YWxpZD0ieWVzIj41ODwvYmlibD4pLjwvbm90ZT4gYXMgaGUgd2FzIGdvaW5nIHVwIHRvIHRoZSBzZW5hdGUtaG91c2UgaW4gdGhlIGFjcm9wb2xpcywgaGUgd2FzIHNlaXplZCB3aXRoIGEgY3JhbXAgYW5kIHZpb2xlbnQgcGFpbiBpbiBoaXMgc291bmQgbGVnLCB3aGljaCB0aGVuIHN3ZWxsZWQgdXAsIGFwcGVhcmVkIHRvIGJlIGNvbmdlc3RlZCwgYW5kIHNob3dlZCBzaWducyBvZiBleGNlc3NpdmUgaW5mbGFtbWF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIGEgY2VydGFpbiBTeXJhY3VzYW4gcGh5c2ljaWFuIGhhZCBvcGVuZWQgYSB2ZWluIGJlbG93IHRoZSBhbmtsZSwgdGhlIHBhaW5zIHJlbGF4ZWQsIGJ1dCBtdWNoIGJsb29kIGZsb3dlZCBhbmQgY291bGQgbm90IGJlIGNoZWNrZWQsIHNvIHRoYXQgQWdlc2lsYcO8cyB3YXMgdmVyeSBmYWludCBmcm9tIGl0cyBsb3NzLCBhbmQgaW4gZGlyZSBwZXJpbCBvZiBoaXMgbGlmZS4gQXQgbGFzdCwgaG93ZXZlciwgdGhlIGZsb3cgb2YgYmxvb2Qgd2FzIHN0b3BwZWQsIGFuZCBBZ2VzaWxhw7xzIHdhcyBjYXJyaWVkIHRvIFNwYXJ0YSwgd2hlcmUgaGUgcmVtYWluZWQgZm9yIGEgbG9uZyB0aW1lIGluIGEgd2VhayBjb25kaXRpb24gYW5kIHVuYWJsZSB0byB0YWtlIHRoZSBmaWVsZC4gCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5EdXJpbmcgdGhpcyB0aW1lIHRoZSBTcGFydGFucyBtZXQgd2l0aCBtYW55IHJldmVyc2VzIGJvdGggYnkgbGFuZCBhbmQgc2VhLCB0aGUgZ3JlYXRlc3Qgb2Ygd2hpY2ggd2FzIGF0IFRlZ3lyYSwgd2hlcmUgZm9yIHRoZSBmaXJzdCB0aW1lIHRoZXkgd2VyZSBvdmVycG93ZXJlZCBieSB0aGUgVGhlYmFucyBpbiBhIHBpdGNoZWQgYmF0dGxlLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhpcyBiYXR0bGUsIGZvdWdodCBpbiAzNzUgQi5DLiwgaXMgbm90IG1lbnRpb25lZCBieSBYZW5vcGhvbiwgYnV0IGlzIGRlc2NyaWJlZCBieSBQbHV0YXJjaCBpbiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMTYuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMTYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5QZWxvcGlkYXM8L3RpdGxlPiwgY2hhcHRlcnMgeHZpLjwvYmlibD4gYW5kIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDE3LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDE3LjEiIHZhbGlkPSJ5ZXMiPnh2aWkuPC9iaWJsPiwgZG91YnRsZXNzIG9uIHRoZSBhdXRob3JpdHkgb2YgRXBob3J1cyAoY2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNS44MS4yIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuODEuMiIgdmFsaWQ9InllcyI+RGlvZG9ydXMsIHh2LiA4MSwgMik8L2JpYmw+Ljwvbm90ZT4gVGhlcmUgd2FzLCBhY2NvcmRpbmdseSwgYSBnZW5lcmFsIHNlbnRpbWVudCBpbiBmYXZvdXIgb2YgYSBnZW5lcmFsIHBlYWNlLCBhbmQgYW1iYXNzYWRvcnMgZnJvbSBhbGwgSGVsbGFzIGNhbWUgdG9nZXRoZXIgYXQgU3BhcnRhIHRvIHNldHRsZSBpdHMgdGVybXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNzEgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi4zLjMuIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA2LjMuMy4iIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aS4gMywgMy0yMDwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5PbmUgb2YgdGhlc2UgYW1iYXNzYWRvcnMgd2FzIEVwYW1pbm9uZGFzLCBhIG1hbiBvZiByZXB1dGUgZm9yIGN1bHR1cmUgYW5kIHBoaWxvc29waHksIGFsdGhvdWdoIGhlIGhhZCBub3QgeWV0IGdpdmVuIHByb29mIG9mIGNhcGFjaXR5IGFzIGEgZ2VuZXJhbC4gVGhpcyBtYW4sIHNlZWluZyB0aGUgcmVzdCBhbGwgY3JpbmdpbmcgYmVmb3JlIEFnZXNpbGHDvHMsIGFsb25lIGhhZCB0aGUgY291cmFnZSBvZiBoaXMgY29udmljdGlvbnMsIGFuZCBtYWRlIGEgc3BlZWNoLCBub3QgaW4gYmVoYWxmIG9mIFRoZWJlcywgaGlzIG5hdGl2ZSBjaXR5LCBidXQgb2YgYWxsIEdyZWVjZSBpbiBjb21tb24sIGRlY2xhcmluZyB0aGF0IHdhciBtYWRlIFNwYXJ0YSBncmVhdCBhdCB0aGUgZXhwZW5zZSBvZiB0aGUgc3VmZmVyaW5ncyBvZiBhbGwgdGhlIG90aGVyIHN0YXRlcywgYW5kIHVyZ2luZyB0aGF0IHBlYWNlIGJlIG1hZGUgb24gdGVybXMgb2YgZXF1YWxpdHkgYW5kIGp1c3RpY2UsIGZvciBpdCB3b3VsZCBlbmR1cmUgb25seSB3aGVuIGFsbCBwYXJ0aWVzIHRvIGl0IHdlcmUgbWFkZSBlcXVhbC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMsIGFjY29yZGluZ2x5LCBzZWVpbmcgdGhhdCB0aGUgR3JlZWtzIGFsbCBsaXN0ZW5lZCB0byBFcGFtaW5vbmRhcyB3aXRoIHRoZSBncmVhdGVzdCBhdHRlbnRpb24gYW5kIGFkbWlyYXRpb24sIGFza2VkIGhpbSB3aGV0aGVyIGhlIGNvbnNpZGVyZWQgaXQganVzdGljZSBhbmQgZXF1YWxpdHkgdGhhdCB0aGUgY2l0aWVzIG9mIEJvZW90aWEgc2hvdWxkIGJlIGluZGVwZW5kZW50IG9mIFRoZWJlcy4gVGhlbiB3aGVuIEVwYW1pbm9uZGFzIHByb21wdGx5IGFuZCBib2xkbHkgYXNrZWQgaGltIGluIHJlcGx5IHdoZXRoZXIgaGUgdG9vIHRob3VnaHQgaXQganVzdGljZSBmb3IgdGhlIGNpdGllcyBvZiBMYWNvbmlhIHRvIGJlIGluZGVwZW5kZW50IG9mIFNwYXJ0YSwgQWdlc2lsYcO8cyBzcHJhbmcgZnJvbSBoaXMgc2VhdCBhbmQgd3JhdGhmdWxseSBiYWRlIGhpbSBzYXkgcGxhaW5seSB3aGV0aGVyIGhlIGludGVuZGVkIHRvIG1ha2UgdGhlIGNpdGllcyBvZiBCb2VvdGlhIGluZGVwZW5kZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBFcGFtaW5vbmRhcyBhbnN3ZXJlZCBhZ2FpbiBpbiB0aGUgc2FtZSB3YXkgYnkgYXNraW5nIHdoZXRoZXIgaGUgaW50ZW5kZWQgdG8gbWFrZSB0aGUgY2l0aWVzIG9mIExhY29uaWEgaW5kZXBlbmRlbnQsIEFnZXNpbGHDvHMgYmVjYW1lIHZpb2xlbnQgYW5kIHdhcyBnbGFkIG9mIHRoZSBwcmV0ZXh0IGZvciBhdCBvbmNlIGVyYXNpbmcgdGhlIG5hbWUgb2YgdGhlIFRoZWJhbnMgZnJvbSB0aGUgdHJlYXR5IG9mIHBlYWNlIGFuZCBkZWNsYXJpbmcgd2FyIHVwb24gdGhlbS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBYZW5vcGhvbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi4zLjE5IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA2LjMuMTkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aS4gMywgMTkuPC9iaWJsPiksIHdobyBtYWtlcyBubyBtZW50aW9uIG9mIEVwYW1pbm9uZGFzLCB0aGUgVGhlYmFucyBoYWQgc2lnbmVkIGFzIFRoZWJhbnMsIGJ1dCBvbiB0aGUgbmV4dCBkYXkgd2lzaGVkIHRvIHN1YnN0aXR1dGUgQm9lb3RpYW5zIGZvciBUaGViYW5zLiBUaGlzIEFnZXNpbGHDvHMgcmVmdXNlZCB0byBwZXJtaXQuIEl0IHdvdWxkIGhhdmUgcmVjb2duaXplZCB0aGUgc3VwcmVtYWN5IG9mIFRoZWJlcyBpbiBCb2VvdGlhLjwvbm90ZT4gVGhlIHJlc3Qgb2YgdGhlIEdyZWVrcywgaG93ZXZlciwgaGUgb3JkZXJlZCB0byBkZXBhcnQsIG5vdyB0aGF0IHRoZXkgd2VyZSByZWNvbmNpbGVkIHdpdGggZWFjaCBvdGhlciwgbGVhdmluZyBkaWZmZXJlbmNlcyB3aGljaCBjb3VsZCBiZSBoZWFsZWQgdG8gdGhlIHRlcm1zIG9mIHBlYWNlLCBhbmQgdGhvc2Ugd2hpY2ggY291bGQgbm90LCB0byB3YXIsIHNpbmNlIGl0IHdhcyBhIGhhcmQgdGFzayB0byBzZXR0bGUgYW5kIHJlbW92ZSBhbGwgdGhlaXIgZGlzcHV0ZXMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUgQ2xlb21icm90dXMgd2FzIGluIFBob2NpcyB3aXRoIGFuIGFybXkuIFRoZSBlcGhvcnMgdGhlcmVmb3JlIGltbWVkaWF0ZWx5IHNlbnQgaGltIG9yZGVycyB0byBsZWFkIGhpcyBmb3JjZXMgYWdhaW5zdCBUaGViZXMuIFRoZXkgYWxzbyBzZW50IHJvdW5kIGEgc3VtbW9ucyBmb3IgYW4gYXNzZW1ibHkgb2YgdGhlaXIgYWxsaWVzLCB3aG8gd2VyZSB3aXRob3V0IHplYWwgZm9yIHRoZSB3YXIgYW5kIHRob3VnaHQgaXQgYSBncmVhdCBidXJkZW4sIGJ1dCB3ZXJlIG5vdCB5ZXQgYm9sZCBlbm91Z2ggdG8gb3Bwb3NlIG9yIGRpc29iZXkgdGhlIExhY2VkYWVtb25pYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWx0aG91Z2ggbWFueSBiYWxlZnVsIHNpZ25zIGFwcGVhcmVkLCBhcyBJIGhhdmUgd3JpdHRlbiBpbiBteSBMaWZlIG9mIEVwYW1pbm9uZGFzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm90IGV4dGFudC48L25vdGU+IGFuZCB0aG91Z2ggUHJvdGhvdcO8cyB0aGUgTGFjb25pYW4gbWFkZSBvcHBvc2l0aW9uIHRvIHRoZSBleHBlZGl0aW9uLCBBZ2VzaWxhw7xzIHdvdWxkIG5vdCBnaXZlIGluLCBidXQgYnJvdWdodCB0aGUgd2FyIHRvIHBhc3MuIEhlIHRob3VnaHQgdGhhdCBzaW5jZSBhbGwgSGVsbGFzIHdhcyBvbiB0aGVpciBzaWRlLCBhbmQgdGhlIFRoZWJhbnMgaGFkIGJlZW4gZXhjbHVkZWQgZnJvbSB0aGUgdHJlYXR5LCBpdCB3YXMgYSBmYXZvdXJhYmxlIHRpbWUgZm9yIHRoZSBTcGFydGFucyB0byB0YWtlIHZlbmdlYW5jZSBvbiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHRpbWUgY2hvc2VuIGZvciBpdCBwcm92ZXMgdGhhdCB0aGlzIGV4cGVkaXRpb24gd2FzIG1hZGUgZnJvbSBhbmdlciBtb3JlIHRoYW4gZnJvbSBjYXJlZnVsIGNhbGN1bGF0aW9uLiBGb3IgdGhlIHRyZWF0eSBvZiBwZWFjZSB3YXMgbWFkZSBhdCBMYWNlZGFlbW9uIG9uIHRoZSBmb3VydGVlbnRoIG9mIHRoZSBtb250aCBTY2lyb3Bob3Jpb24sIGFuZCBvbiB0aGUgZmlmdGggb2YgSGVjYXRvbWJhZW9uIHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIGRlZmVhdGVkIGF0IExldWN0cmEs4oCUYW4gaW50ZXJ2YWwgb2YgdHdlbnR5IGRheXMuIEluIHRoYXQgYmF0dGxlIGEgdGhvdXNhbmQgTGFjZWRhZW1vbmlhbnMgZmVsbCwgYmVzaWRlcyBDbGVvbWJyb3R1cyB0aGUga2luZywgYW5kIGFyb3VuZCBoaW0gdGhlIG1pZ2h0aWVzdCBvZiB0aGUgU3BhcnRhbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZXNlLCB0aGV5IHNheSwgd2FzIENsZW9ueW11cywgdGhlIGJlYXV0aWZ1bCBzb24gb2YgU3Bob2RyaWFzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2VzLiAyNS4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4di4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hvIHdhcyB0aHJpY2Ugc3RydWNrIGRvd24gaW4gZnJvbnQgb2YgaGlzIGtpbmcsIGFzIG1hbnkgdGltZXMgcm9zZSBhZ2FpbiB0byBoaXMgZmVldCwgYW5kIGRpZWQgdGhlcmUsIGZpZ2h0aW5nIHRoZSBUaGViYW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoYXQgdGhlIExhY2VkYWVtb25pYW5zIGhhZCBtZXQgd2l0aCBhbiB1bmV4cGVjdGVkIHJldmVyc2UsIGFuZCB0aGUgVGhlYmFucyB3aXRoIGFuIHVubG9va2VkLWZvciBzdWNjZXNzIHN1cnBhc3NpbmcgdGhhdCBvZiBhbnkgb3RoZXIgSGVsbGVuZXMgYXQgc3RyaWZlIHdpdGggSGVsbGVuZXMsIHRoZSBoaWdoIGNvbmR1Y3Qgb2YgdGhlIGRlZmVhdGVkIGNpdHkgd2FzIG5vIGxlc3MgdG8gYmUgZW52aWVkIGFuZCBhZG1pcmVkIHRoYW4gdGhhdCBvZiB0aGUgdmljdG9yaW91cyBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5YZW5vcGhvbiBzYXlzCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gU3ltLiAxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+U3ltcG9zaXVtPC90aXRsZT4sIGkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoYXQgaW4gdGhlIGNhc2Ugb2Ygbm9ibGUgbWVuLCB0aGVyZSBpcyBtdWNoIHRoYXQgaXMgd29ydGggcmVjb3JkaW5nIGV2ZW4gaW4gd2hhdCB0aGV5IHNheSBhbmQgZG8gYXQgdGhlaXIgd2luZSBhbmQgaW4gdGhlaXIgc3BvcnRzLCBhbmQgaGUgaXMgcmlnaHQ7IGFuZCBpdCBpcyBubyBsZXNzLCBidXQgZXZlbiBtb3JlLCB3b3J0aCB3aGlsZSB0byBvYnNlcnZlIGNhcmVmdWxseSB0aGUgZGVjb3J1bSB3aXRoIHdoaWNoIG5vYmxlIG1lbiBzcGVhayBhbmQgYWN0IGluIHRoZSBtaWRzdCBvZiBhZHZlcnNpdHkuIFRoZSBjaXR5IHdhcyBob2xkaW5nIGEgZmVzdGl2YWwgYW5kIHdhcyBmdWxsIG9mIHN0cmFuZ2VyczsgZm9yIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmd5bW5vcGFlZGlhZTwvcT4gd2VyZSBpbiBwcm9ncmVzcyBhbmQgY2hvaXJzIG9mIGJveXMgd2VyZSBjb21wZXRpbmcgd2l0aCBvbmUgYW5vdGhlciBpbiB0aGUgdGhlYXRyZTsgdGhlbiBjYW1lIHRoZSBtZXNzZW5nZXJzIG9mIGNhbGFtaXR5IGZyb20gTGV1Y3RyYS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBlcGhvcnMsIGFsdGhvdWdoIGl0IHdhcyBhdCBvbmNlIGFwcGFyZW50IHRoYXQgdGhlaXIgY2F1c2Ugd2FzIHJ1aW5lZCBhbmQgdGhlaXIgc3VwcmVtYWN5IGxvc3QsIHdvdWxkIG5vdCBhbGxvdyBhIGNob3JhbCBwZXJmb3JtYW5jZSB0byBiZSBvbWl0dGVkLCBub3IgdGhlIGZhc2hpb24gb2YgdGhlIGZlc3RpdmFsIHRvIGJlIGNoYW5nZWQgYnkgdGhlIGNpdHksIGJ1dCBhZnRlciBzZW5kaW5nIHRoZSBuYW1lcyBvZiB0aGUgc2xhaW4gd2FycmlvcnMgdG8gdGhlIGhvbWVzIG9mIHRoZWlyIGtpbmRyZWQsIHRoZXkgdGhlbXNlbHZlcyBjb25kdWN0ZWQgdGhlIHNwZWN0YWNsZSBhbmQgdGhlIGNob3JhbCBjb250ZXN0cyB0byBhIGNsb3NlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgbmV4dCBtb3JuaW5nIGFsc28sIG5vdyB0aGF0IGV2ZXJ5b25lIGtuZXcgd2hvIGhhZCBzdXJ2aXZlZCB0aGUgYmF0dGxlIGFuZCB3aG8gaGFkIGJlZW4gc2xhaW4sIHRoZSBmYXRoZXJzIGFuZCBraW5kcmVkIGFuZCBmcmllbmRzIG9mIHRoZSBzbGFpbiB3ZW50IGRvd24gaW50byB0aGUgbWFya2V0LXBsYWNlIGFuZCBncmVldGVkIG9uZSBhbm90aGVyIHdpdGggYnJpZ2h0IGZhY2VzLCBmdWxsIG9mIHByaWRlIGFuZCBleHVsdGF0aW9uOyB3aGlsZSB0aGUgZnJpZW5kcyBvZiB0aGUgc3Vydml2b3JzLCBhcyBpZiBpbiBtb3VybmluZywgdGFycmllZCBhdCBob21lIHdpdGggdGhlIHdvbWVuLCBhbmQgaWYgb25lIG9mIHRoZW0gd2FzIG9ibGlnZWQgdG8gYXBwZWFyIGluIHB1YmxpYywgaGlzIGdhcmIgYW5kIHNwZWVjaCBhbmQgbG9va3MgYmV0b2tlbmVkIGhpcyBodW1pbGlhdGlvbiBhbmQgYWJhc2VtZW50LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuNC4xNiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHZpLiA0LCAxNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYSBzdGlsbCBncmVhdGVyIGRpZmZlcmVuY2Ugd2FzIHRvIGJlIHNlZW4gKG9yIGhlYXJkIGFib3V0KSBpbiB0aGUgd29tZW47IHNoZSB3aG8gZXhwZWN0ZWQgaGVyIHNvbiBiYWNrIGZyb20gdGhlIGJhdHRsZSBhbGl2ZSB3YXMgZGVqZWN0ZWQgYW5kIHNpbGVudCwgYnV0IHRoZSBtb3RoZXJzIG9mIHRob3NlIHJlcG9ydGVkIHRvIGhhdmUgZmFsbGVuIGltbWVkaWF0ZWx5IGZyZXF1ZW50ZWQgdGhlIHRlbXBsZXMsIGFuZCB2aXNpdGVkIG9uZSBhbm90aGVyIHdpdGggYW4gYWlyIG9mIGdsYWRuZXNzIGFuZCBwcmlkZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBncmVhdGVyIG51bWJlciwgaG93ZXZlciwgd2hlbiB0aGVpciBhbGxpZXMgd2VyZSBmYWxsaW5nIGF3YXkgZnJvbSB0aGVtIGFuZCBpdCB3YXMgZXhwZWN0ZWQgdGhhdCBFcGFtaW5vbmRhcywgaW4gYWxsIHRoZSBwcmlkZSBvZiBhIGNvbnF1ZXJvciwgd291bGQgaW52YWRlIFBlbG9wb25uZXN1cywgZmVsbCB0byB0aGlua2luZyBvZiB0aGUgb3JhY2xlcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMy40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpaS4gNCBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBpbiB2aWV3IG9mIHRoZSBsYW1lbmVzcyBvZiBBZ2VzaWxhw7xzLCBhbmQgd2VyZSBmdWxsIG9mIGRlamVjdGlvbiBhbmQgY29uc3Rlcm5hdGlvbiBpbiByZXNwZWN0IHRvIHRoZSBkaXZpbmUgcG93ZXJzLCBiZWxpZXZpbmcgdGhhdCB0aGVpciBjaXR5IHdhcyBpbiBhbiBldmlsIHBsaWdodCBiZWNhdXNlIHRoZXkgaGFkIGRldGhyb25lZCB0aGUgc291bmQtZm9vdGVkIGtpbmcgYW5kIGNob3NlbiBpbnN0ZWFkIGEgbGFtZSBhbmQgaGFsdGluZyBvbmUs4oCUdGhlIHZlcnkgdGhpbmcgd2hpY2ggdGhlIGRlaXR5IHdhcyB0cnlpbmcgdG8gdGVhY2ggdGhlbSBjYXJlZnVsbHkgdG8gYXZvaWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgb3RoZXJ3aXNlIGhlIGhhZCBzdWNoIHBvd2VyIGFuZCB2YWxvdXIgYW5kIGZhbWUgdGhhdCB0aGV5IG5vdCBvbmx5IGNvbnRpbnVlZCB0byBlbXBsb3kgaGltIGFzIGtpbmcgYW5kIGdlbmVyYWwgaW4gbWF0dGVycyBwZXJ0YWluaW5nIHRvIHdhciwgYnV0IGFsc28gYXMgcGh5c2ljaWFuIGFuZCBhcmJpdGVyIGluIHRoZWlyIGNpdmlsIHBlcnBsZXhpdGllcy4gRm9yIGluc3RhbmNlLCB1cG9uIHRob3NlIHdobyBoYWQgc2hvd24gY293YXJkaWNlIGluIHRoZSBiYXR0bGUsIHdob20gdGhleSB0aGVtc2VsdmVzIGNhbGwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50cmVzYW50ZXMsPC9xPiBvciA8ZW1waD4KICAgICAgICAgICAgICAgPGVtcGg+cnVuLWF3YXlzPC9lbXBoPgogICAgICAgICAgICA8L2VtcGg+LCB0aGV5IGhlc2l0YXRlZCB0byBpbmZsaWN0IHRoZSBkaXNhYmlsaXRpZXMgcmVxdWlyZWQgYnkgdGhlIGxhd3MsIHNpbmNlIHRoZSBtZW4gd2VyZSBudW1lcm91cyBhbmQgcG93ZXJmdWwsIGZvciBmZWFyIHRoYXQgdGhleSBtaWdodCBzdGlyIHVwIGEgcmV2b2x1dGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHN1Y2ggbWVuIGFyZSBub3Qgb25seSBkZWJhcnJlZCBmcm9tIGV2ZXJ5IG9mZmljZSwgYnV0IGludGVybWFycmlhZ2Ugd2l0aCBhbnkgb2YgdGhlbSBpcyBhIGRpc2dyYWNlLCBhbmQgYW55IG9uZSB3aG8gbWVldHMgdGhlbSBtYXkgc3RyaWtlIHRoZW0gaWYgaGUgcGxlYXNlcy4gTW9yZW92ZXIsIHRoZXkgYXJlIG9ibGlnZWQgdG8gZ28gYWJvdXQgdW5rZW1wdCBhbmQgc3F1YWxpZCwgd2VhcmluZyBjbG9ha3MgdGhhdCBhcmUgcGF0Y2hlZCB3aXRoIGR5ZWQgc3R1ZmZzLCBoYWxmIG9mIHRoZWlyIGJlYXJkcyBzaGF2ZW4sIGFuZCBoYWxmIGxlZnQgdG8gZ3Jvdy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGEgc2VyaW91cyBtYXR0ZXIsIHRoZXJlZm9yZSwgdG8gYWxsb3cgbWFueSBzdWNoIG1lbiBpbiB0aGUgY2l0eSwgd2hlbiBzaGUgbGFja2VkIG5vdCBhIGZldyBzb2xkaWVycy4gU28gdGhleSBjaG9zZSBBZ2VzaWxhw7xzIGFzIGEgbGF3LWdpdmVyIGZvciB0aGUgb2NjYXNpb24uIEFuZCBoZSwgd2l0aG91dCBhZGRpbmcgdG8gb3Igc3VidHJhY3RpbmcgZnJvbSBvciBjaGFuZ2luZyB0aGUgbGF3cyBpbiBhbnkgd2F5LCBjYW1lIGludG8gdGhlIGFzc2VtYmx5IG9mIHRoZSBMYWNlZGFlbW9uaWFucyBhbmQgc2FpZCB0aGF0IHRoZSBsYXdzIG11c3QgYmUgYWxsb3dlZCB0byBzbGVlcCBmb3IgdGhhdCBkYXksIGJ1dCBmcm9tIHRoYXQgZGF5IG9uIG11c3QgYmUgaW4gc292ZXJlaWduIGZvcmNlLiBCeSB0aGlzIG1lYW5zIGhlIGF0IG9uY2Ugc2F2ZWQgdGhlIGxhd3MgZm9yIHRoZSBjaXR5IGFuZCB0aGUgbWVuIGZyb20gaW5mYW15LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCB3aXNoaW5nIHRvIHJlbW92ZSB0aGUgZGlzY291cmFnZW1lbnQgYW5kIGRlamVjdGlvbiB3aGljaCBwcmV2YWlsZWQgYW1vbmcgdGhlIHlvdW5nIG1lbiwgaGUgbWFkZSBhbiBpbmN1cnNpb24gaW50byBBcmNhZGlhLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzcwIEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuNS4xMCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHZpLiA1LCAxMC0yMTwvYmlibD4pLjwvbm90ZT4gYW5kIHRob3VnaCBoZSBzdHVkaW91c2x5IGF2b2lkZWQgam9pbmluZyBiYXR0bGUgd2l0aCB0aGUgZW5lbXksIGhlIHRvb2sgYSBzbWFsbCB0b3duIG9mIHRoZSBNYW50aW5lYW5zIGFuZCBvdmVycmFuIHRoZWlyIHRlcnJpdG9yeSwgYW5kIHRodXMgbGlnaHRlbmVkIGFuZCBnbGFkZGVuZWQgdGhlIGV4cGVjdGF0aW9ucyBvZiBoaXMgY2l0eSwgd2hpY2ggZmVsdCB0aGF0IGl0cyBjYXNlIHdhcyBub3Qgd2hvbGx5IGRlc3BlcmF0ZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc2FtZSB5ZWFyLCBhZnRlciBBZ2VzaWxhw7xzIGhhZCByZXR1cm5lZCBhbmQgZGlzYmFuZGVkIGhpcyBmb3JjZXMuPC9ub3RlPiBFcGFtaW5vbmRhcyBlbnRlcmVkIExhY29uaWEgd2l0aCBoaXMgYWxsaWVzLCBoYXZpbmcgbm8gZmV3ZXIgdGhhbiBmb3J0eSB0aG91c2FuZCBtZW4tYXQtYXJtcy4gTWFueSBsaWdodCBhcm1lZCBhbmQgdW5hcm1lZCB0cm9vcHMgYWxzbyBmb2xsb3dlZCBoaW0gZm9yIHRoZSBzYWtlIG9mIHBsdW5kZXIsIHNvIHRoYXQgYSBob3JkZSBvZiBzZXZlbnR5IHRob3VzYW5kLCBhbGwgdG9sZCwgbWFkZSB0aGlzIGluY3Vyc2lvbiBpbnRvIExhY29uaWEuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhIHBlcmlvZCBvZiBubyBsZXNzIHRoYW4gc2l4IGh1bmRyZWQgeWVhcnMgdGhlIERvcmlhbnMgaGFkIGJlZW4gbGl2aW5nIGluIExhY2VkYWVtb24sIGFuZCB0aGlzIHdhcyB0aGUgZmlyc3QgdGltZSBpbiBhbGwgdGhhdCBwZXJpb2QgdGhhdCBlbmVtaWVzIGhhZCBiZWVuIHNlZW4gaW4gdGhlIGNvdW50cnk7IGJlZm9yZSB0aGlzLCBub25lIGhhZCB2ZW50dXJlZCB0aGVyZS4gQnV0IG5vdyB0aGV5IGJ1cnN0IGludG8gYW4gdW5yYXZhZ2VkIGFuZCBpbnZpb2xhdGUgbGFuZCwgYW5kIGJ1cm5lZCBhbmQgcGx1bmRlcmVkIGFzIGZhciBhcyB0aGUgcml2ZXIgYW5kIHRoZSBjaXR5LCBhbmQgbm8gb25lIGNhbWUgb3V0IGFnYWluc3QgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEFnZXNpbGHDvHMgd291bGQgbm90IHN1ZmZlciB0aGUgTGFjZWRhZW1vbmlhbnMgdG8gZmlnaHQgYWdhaW5zdCBzdWNoIGEgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5iaWxsb3d5IHRvcnJlbnQgb2Ygd2FyLDwvcT4gdG8gdXNlIHRoZSB3b3JkcyBvZiBUaGVvcG9tcHVzLCBidXQgc3Vycm91bmRlZCB0aGUgY2VudHJhbCBhbmQgbW9zdCBjb21tYW5kaW5nIHBhcnRzIG9mIHRoZSBjaXR5IHdpdGggaGlzIG1lbi1hdC1hcm1zLCB3aGlsZSBoZSBlbmR1cmVkIHRoZSBib2FzdGZ1bCB0aHJlYXRzIG9mIHRoZSBUaGViYW5zLCB3aG8gY2FsbGVkIHVwb24gaGltIGJ5IG5hbWUgYW5kIGJhZGUgaGltIGNvbWUgb3V0IGFuZCBmaWdodCBmb3IgaGlzIGNvdW50cnksIHNpbmNlIGhlIGhhZCBjYXVzZWQgaGVyIG1pc2ZvcnR1bmVzIGJ5IGxpZ2h0aW5nIHVwIHRoZSBmbGFtZXMgb2Ygd2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhpcyB3YXMgbm90IHRoZSB3b3JzdC4gQWdlc2lsYcO8cyB3YXMgc3RpbGwgbW9yZSBoYXJhc3NlZCBieSB0aGUgdHVtdWx0cyBhbmQgc2hyaWVrcyBhbmQgcnVubmluZyBhYm91dCB0aHJvdWdob3V0IHRoZSBjaXR5LCB3aGVyZSB0aGUgZWxkZXIgbWVuIHdlcmUgZW5yYWdlZCBhdCB0aGUgc3RhdGUgb2YgYWZmYWlycywgYW5kIHRoZSB3b21lbiB3ZXJlIHVuYWJsZSB0byBrZWVwIHF1aWV0LCBidXQgd2VyZSB1dHRlcmx5IGJlc2lkZSB0aGVtc2VsdmVzIHdoZW4gdGhleSBoZWFyZCB0aGUgc2hvdXRzIGFuZCBzYXcgdGhlIGZpcmVzIG9mIHRoZSBlbmVteS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgoJCQkJCSAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgd29tZW4gY291bGQgbm90IGVuZHVyZSBldmVuIHRoZSBzaWdodCBvZiB0aGUgc21va2UsIHNpbmNlIHRoZXkgaGFkIG5ldmVyIHNldCBleWVzIHVwb24gYW4gZW5lbXk8L3E+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA2LjUuMjgiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aS4gNSwgMjg8L2JpYmw+KS48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIGFsc28gZGlzdHJlc3NlZCBhdCB0aGUgdGhvdWdodCBvZiB3aGF0IGhpcyBmYW1lIHdvdWxkIGJlLCBiZWNhdXNlIGhlIGhhZCB0YWtlbiBjb21tYW5kIG9mIHRoZSBjaXR5IHdoZW4gc2hlIHdhcyBncmVhdGVzdCBhbmQgbW9zdCBwb3dlcmZ1bCwgYW5kIG5vdyBzYXcgaGVyIHJlcHV0YXRpb24gbG93ZXJlZCwgYW5kIGhlciBwcm91ZCBib2FzdCBtYWRlIGVtcHR5LCB3aGljaCBib2FzdCBoZSBoaW1zZWxmIGFsc28gaGFkIG9mdGVuIG1hZGUsIHNheWluZyB0aGF0IG5vIFNwYXJ0YW4gd29tYW4gaGFkIGV2ZXIgc2VlbiB0aGUgc21va2Ugb2YgYW4gZW5lbXkncyBmaXJlcy4gSXQgaXMgc2FpZCBhbHNvIHRoYXQgQW50YWxjaWRhcywgd2hlbiBhbiBBdGhlbmlhbiB3YXMgZGlzcHV0aW5nIHdpdGggaGltIG92ZXIgdGhlIHZhbG91ciBvZiB0aGUgdHdvIHBlb3BsZXMgYW5kIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWV0IHdlIGhhdmUgb2Z0ZW4gZHJpdmVuIHlvdSBhd2F5IGZyb20gdGhlIENlcGhpc3VzLDwvcT4gcmVwbGllZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgd2UgaGF2ZSBuZXZlciBkcml2ZW4geW91IGF3YXkgZnJvbSB0aGUgRXVyb3Rhcy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGEgc2ltaWxhciByZXRvcnQgd2FzIG1hZGUgYnkgYSBTcGFydGFuIG9mIGxlc3NlciBub3RlIHRvIHRoZSBBcmdpdmUgd2hvIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWFueSBvZiB5b3UgbGllIGJ1cmllZCBpbiB0aGUgbGFuZHMgb2YgQXJnb3M8L3E+OyB0aGUgU3BhcnRhbiBhbnN3ZXJlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgbm90IGEgbWFuIG9mIHlvdSBpbiB0aGUgbGFuZHMgb2YgTGFjb25pYS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGhvd2V2ZXIsIHRoZXkgc2F5IHRoYXQgQW50YWxjaWRhcywgd2hvIHdhcyBhbiBlcGhvciwgc2VjcmV0bHkgc2VudCBoaXMgY2hpbGRyZW4gYXdheSB0byBDeXRoZXJhLCBzbyBmdWxsIG9mIGZlYXIgd2FzIGhlLiBCdXQgQWdlc2lsYcO8cywgd2hlbiB0aGUgZW5lbXkgdHJpZWQgdG8gY3Jvc3MgdGhlIEV1cm90YXMgYW5kIGZvcmNlIHRoZWlyIHdheSB0byB0aGUgY2l0eSwgYWJhbmRvbmVkIHRoZSByZXN0IG9mIGl0IGFuZCBkcmV3IHVwIGhpcyBmb3JjZXMgaW4gZnJvbnQgb2YgaXRzIGNlbnRyYWwgYW5kIGxvZnR5IHByZWNpbmN0cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGUgRXVyb3RhcyBhdCB0aGlzIHRpbWUgd2FzIGZsb3dpbmcgYXQgaXRzIGZ1bGxlc3QgYW5kIGRlZXBlc3QsIHNpbmNlIHNub3dzIGhhZCBmYWxsZW4sIGFuZCBpdHMgY3VycmVudCwgZXZlbiBtb3JlIGZyb20gaXRzIGNvbGRuZXNzIHRoYW4gaXRzIHZpb2xlbmNlLCB3YXMgdmVyeSB0cm91Ymxlc29tZSB0byB0aGUgVGhlYmFucy4gQXMgRXBhbWlub25kYXMgd2FzIGZvcmRpbmcgaXQgYXQgdGhlIGhlYWQgb2YgaGlzIHBoYWxhbngsIGNlcnRhaW4gb25lcyBwb2ludGVkIGhpbSBvdXQgdG8gQWdlc2lsYcO8cywgYW5kIGhlLCB3ZSBhcmUgdG9sZCwgYWZ0ZXIgZml4aW5nIGhpcyBnYXplIHVwb24gaGltIGFuZCB3YXRjaGluZyBoaW0gZm9yIGEgbG9uZyB0aW1lLCBzYWlkIGJ1dCB0aGVzZSB3b3JkczogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIGFkdmVudHVyb3VzIG1hbiE8L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+RXBhbWlub25kYXMgd2FzIGFtYml0aW91cyB0byBqb2luIGJhdHRsZSBpbiB0aGUgY2l0eSBhbmQgc2V0IHVwIGEgdHJvcGh5IG9mIHZpY3RvcnkgdGhlcmUsIGJ1dCBzaW5jZSBoZSBjb3VsZCBuZWl0aGVyIGZvcmNlIG5vciB0ZW1wdCBBZ2VzaWxhw7xzIG91dCBvZiBoaXMgcG9zaXRpb25zLCBoZSB3aXRoZHJldyBhbmQgYmVnYW4gdG8gcmF2YWdlIHRoZSBjb3VudHJ5LiBNZWFud2hpbGUsIGFib3V0IHR3byBodW5kcmVkIG9mIHRoZSBMYWNlZGFlbW9uaWFucyB3aG8gaGFkIGxvbmcgYmVlbiBkaXNhZmZlY3RlZCBhbmQgbXV0aW5vdXMgYmFuZGVkIHRvZ2V0aGVyIGFuZCBzZWl6ZWQgdGhlIElzc29yaXVtLCB3aGVyZSB0aGUgdGVtcGxlIG9mIEFydGVtaXMgc3RhbmRzLCBhIHdlbGwtd2FsbGVkIGFuZCBpbmFjY2Vzc2libGUgc3BvdC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIExhY2VkYWVtb25pYW5zIHdpc2hlZCB0byBtYWtlIGEgZGFzaCB1cG9uIHRoZW0gYXQgb25jZSwgYnV0IEFnZXNpbGHDvHMsIGZlYXJpbmcgdGhlaXIgaW5zdXJyZWN0aW9uLCBvcmRlcmVkIHRoZSByZXN0IHRvIGtlZXAgcXVpZXQsIHdoaWxlIGhlIGhpbXNlbGYsIHdlYXJpbmcgaGlzIGNsb2FrIGFuZCBhdHRlbmRlZCBieSBhIHNpbmdsZSBzZXJ2YW50LCB3ZW50IHRvd2FyZHMgdGhlbSwgY3J5aW5nIG91dCB0aGF0IHRoZXkgaGFkIG1pc3VuZGVyc3Rvb2QgaGlzIG9yZGVyczsgZm9yIGhlIGhhZCBub3QgY29tbWFuZGVkIHRoZW0gdG8gYXNzZW1ibGUgaW4gdGhhdCBwbGFjZSwgbm9yIGluIGEgYm9keSwgYnV0IHNvbWUgeW9uZGVyIChwb2ludGluZyB0byBhbm90aGVyIHNwb3QpLCBhbmQgc29tZSBpbiBhbm90aGVyIHBhcnQgb2YgdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSBkZWxpZ2h0ZWQgdG8gaGVhciB0aGlzLCBzdXBwb3NpbmcgdGhhdCB0aGVpciBkZXNpZ24gd2FzIHVuZGlzY292ZXJlZCwgYW5kLCBicmVha2luZyB1cCwgd2VudCBvZmYgdG8gdGhlIHBsYWNlcyB3aGljaCBoZSBvcmRlcmVkIHRoZW0gdG8gb2NjdXB5LiBUaGVuIEFnZXNpbGHDvHMgYXQgb25jZSBzdW1tb25lZCBvdGhlciB0cm9vcHMgYW5kIHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGUgSXNzb3JpdW0sIGFmdGVyIHdoaWNoIGhlIGFycmVzdGVkIGFib3V0IGZpZnRlZW4gb2YgdGhlIGNvbnNwaXJhdG9ycyB3aG8gaGFkIGJlZW4gZ2F0aGVyZWQgdGhlcmUsIGFuZCBwdXQgdGhlbSB0byBkZWF0aCBpbiB0aGUgbmlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHNvIGluZm9ybWVkIG9mIGFub3RoZXIgYW5kIGEgbGFyZ2VyIGNvbnNwaXJhY3kgb2YgU3BhcnRhbnMsIHdobyBtZXQgc2VjcmV0bHkgaW4gYSBob3VzZSBhbmQgdGhlcmUgcGxvdHRlZCByZXZvbHV0aW9uLiBJdCB3YXMgaW1wcmFjdGljYWJsZSBlaXRoZXIgdG8gYnJpbmcgdGhlc2UgbWVuIHRvIHRyaWFsIGluIGEgdGltZSBvZiBzbyBtdWNoIGNvbmZ1c2lvbiwgb3IgdG8gb3Zlcmxvb2sgdGhlaXIgcGxvdHMuIEFjY29yZGluZ2x5LCBBZ2VzaWxhw7xzIGNvbmZlcnJlZCB3aXRoIHRoZSBlcGhvcnMsIGFuZCB0aGVuIHB1dCB0aGVzZSBtZW4gYWxzbyB0byBkZWF0aCB3aXRob3V0IHByb2Nlc3Mgb2YgbGF3LCBhbHRob3VnaCBubyBTcGFydGFuIGhhZCBldmVyIGJlZm9yZSBtZXQgd2l0aCBzdWNoIGEgZGVhdGguIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgYWxzbywgbWFueSBvZiB0aGUgcHJvdmluY2lhbHMgYW5kIEhlbG90cyB3aG8gaGFkIGJlZW4gZW5yb2xsZWQgaW4gdGhlIGFybXkgcmFuIGF3YXkgZnJvbSB0aGUgY2l0eSBhbmQgam9pbmVkIHRoZSBlbmVteSwgYW5kIHRoaXMgY2F1c2VkIHZlcnkgZGVlcCBkaXNjb3VyYWdlbWVudC4gQWdlc2lsYcO8cyB0aGVyZWZvcmUgaW5zdHJ1Y3RlZCBoaXMgc2VydmFudHMgdG8gZ28gZXZlcnkgbW9ybmluZyBiZWZvcmUgaXQgd2FzIGxpZ2h0IHRvIHRoZSBiYXJyYWNrcyBhbmQgdGFrZSB0aGUgYXJtcyBvZiB0aGUgZGVzZXJ0ZXJzIGFuZCBoaWRlIHRoZW0sIHRoYXQgdGhlaXIgbnVtYmVycyBtaWdodCBub3QgYmUga25vd24uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgdGhlIHJlYXNvbiB3aHkgdGhlIFRoZWJhbnMgd2l0aGRyZXcgZnJvbSBMYWNvbmlhLCBtb3N0IHdyaXRlcnMgc2F5IHRoYXQgaXQgd2FzIGJlY2F1c2Ugd2ludGVyIHN0b3JtcyBjYW1lIG9uIGFuZCB0aGUgQXJjYWRpYW5zIGJlZ2FuIHRvIG1lbHQgYXdheSBhbmQgZGlzYmFuZDsgb3RoZXJzLCBiZWNhdXNlIHRoZXkgaGFkIHJlbWFpbmVkIHRoZXJlIHRocmVlIGVudGlyZSBtb250aHMgYW5kIHRob3JvdWdobHkgcmF2YWdlZCBtb3N0IG9mIHRoZSBjb3VudHJ5OwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWxsIHRocmVlIHJlYXNvbnMgYXJlIGdpdmVuIGJ5IFhlbm9waG9uICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA2LjUuNTAiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aS4gNS4gNTA8L2JpYmw+KS48L25vdGU+IGJ1dCBUaGVvcG9tcHVzIHNheXMgdGhhdCB3aGVuIHRoZSBUaGViYW4gY2hpZWYgbWFnaXN0cmF0ZXMgaGFkIGFscmVhZHkgZGV0ZXJtaW5lZCB0byB0YWtlIHRoZWlyIGFybXkgYmFjaywgUGhyaXh1cywgYSBTcGFydGFuLCBjYW1lIHRvIHRoZW0sIGJyaW5naW5nIHRlbiB0YWxlbnRzIGZyb20gQWdlc2lsYcO8cyB0byBwYXkgZm9yIHRoZWlyIHdpdGhkcmF3YWwsIHNvIHRoYXQgdGhleSB3ZXJlIG9ubHkgZG9pbmcgd2hhdCB0aGV5IGhhZCBsb25nIGFnbyBkZWNpZGVkIHRvIGRvLCBhbmQgaGFkIHRoZWlyIGV4cGVuc2VzIHBhaWQgYnkgdGhlaXIgZW5lbWllcyBiZXNpZGVzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBzdG9yeSBtYXkgYmUgdHJ1ZSwgYWx0aG91Z2ggSSBrbm93IG5vdCBob3cgYWxsIG90aGVyIHdyaXRlcnMgY291bGQgYmUgaWdub3JhbnQgb2YgaXQsIHdoaWxlIFRoZW9wb21wdXMgYWxvbmUgaGVhcmQgaXQ7IGJ1dCwgYXQgYW55IHJhdGUsIGFsbCBhZ3JlZSB0aGF0IHRoZSBzYWx2YXRpb24gb2YgU3BhcnRhIGF0IHRoaXMgdGltZSB3YXMgZHVlIHRvIEFnZXNpbGHDvHMsIGJlY2F1c2UgaGUgcmVub3VuY2VkIGhpcyBpbmhlcmVudCBwYXNzaW9ucyBvZiBjb250ZW50aW91c25lc3MgYW5kIGFtYml0aW9uLCBhbmQgYWRvcHRlZCBhIHBvbGljeSBvZiBzYWZldHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGNvdWxkIG5vdCwgaG93ZXZlciwgcmVzdG9yZSB0aGUgcG93ZXIgYW5kIHJlcHV0YXRpb24gb2YgaGlzIGNpdHkgYWZ0ZXIgaXRzIGZhbGwsIGZvciBpdCB3YXMgbGlrZSBhIGh1bWFuIGJvZHkgdGhhdCBpcyBzb3VuZCwgaW5kZWVkLCBidXQgaGFzIGZvbGxvd2VkIGFsbCB0aGUgd2hpbGUgdG9vIHN0cmljdCBhbmQgc2V2ZXJlIGEgcmVnaW1lbjsgYSBzaW5nbGUgZXJyb3IgdHVybmVkIHRoZSBzY2FsZSBhbmQgYnJvdWdodCBkb3duIHRoZSBlbnRpcmUgcHJvc3Blcml0eSBvZiB0aGUgY2l0eS4gTm9yIHdhcyB0aGlzIHN0cmFuZ2UuIEZvciB0byBhIGNpdmlsIHBvbGl0eSBiZXN0IGFycmFuZ2VkIGZvciBwZWFjZSBhbmQgdmlydHVlIGFuZCB1bmFuaW1pdHkgdGhleSBoYWQgYXR0YWNoZWQgZW1waXJlcyBhbmQgc292ZXJlaWdudGllcyB3b24gYnkgZm9yY2UsIG5vdCBvbmUgb2Ygd2hpY2ggTHljdXJndXMgdGhvdWdodCBuZWVkZnVsIGZvciBhIGNpdHkgdGhhdCB3YXMgdG8gbGl2ZSBpbiBoYXBwaW5lc3M7IGFuZCB0aGVyZWZvcmUgdGhleSBmZWxsLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWdlc2lsYcO8cyBoaW1zZWxmIG5vdyBkZWNsaW5lZCBtaWxpdGFyeSBzZXJ2aWNlIG9uIGFjY291bnQgb2YgaGlzIHllYXJzLCBidXQgQXJjaGlkYW11cyBoaXMgc29uLCB3aXRoIGFzc2lzdGFuY2Ugd2hpY2ggY2FtZSBmcm9tIHRoZSB0eXJhbnQgb2YgU2ljaWx5LAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RGlvbnlzaXVzIHRoZSBFbGRlci48L25vdGU+IGNvbnF1ZXJlZCB0aGUgQXJjYWRpYW5zIGluIHRoZSBzby1jYWxsZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50ZWFybGVzcyBiYXR0bGUsPC9xPiB3aGVyZSBub3Qgb25lIG9mIGhpcyBvd24gbWVuIGZlbGwsIGFuZCBoZSBzbGV3IGdyZWF0IG51bWJlcnMgb2YgdGhlIGVuZW15LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzY4IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDcuMS4yOCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHZpaS4gMSwgMjgtMzI8L2JpYmw+KS48L25vdGU+IFRoaXMgdmljdG9yeSwgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UsIHNob3dlZCB0aGUgd2Vha25lc3Mgb2YgdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB1cCB0byB0aGlzIHRpbWUgdGhleSB3ZXJlIHdvbnQgdG8gdGhpbmsgdGhlIGNvbnF1ZXN0IG9mIHRoZWlyIGVuZW1pZXMgc28gY3VzdG9tYXJ5IGFuZCBuYXR1cmFsIGEgdGhpbmcgZm9yIHRoZW0gdG8gYWNoaWV2ZSwgdGhhdCBubyBzYWNyaWZpY2UgZm9yIHZpY3Rvcnkgd2FzIG9mZmVyZWQgaW4gdGhlIGNpdHkgdG8gdGhlIGdvZHMsIGJleW9uZCB0aGF0IG9mIGEgY29jaywgbmVpdGhlciBkaWQgdGhlIHdpbm5lcnMgb2YgdGhlIGNvbnRlc3QgZXh1bHQsIG5vciB0aG9zZSB3aG8gaGVhcmQgb2YgdGhlaXIgdmljdG9yeSBzaG93IGdyZWF0IGpveS4gTmF5LCBldmVuIGFmdGVyIHRoZSBiYXR0bGUgYXQgTWFudGluZWEsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA0MTggQi5DLiwgd2hlbiB0aGUgTGFjZWRhZW1vbmlhbnMgZGVmZWF0ZWQgYW4gYWxsaWVkIGZvcmNlIG9mIE1hbnRpbmVhbnMsIEFyZ2l2ZXMsIGFuZCBBdGhlbmlhbnMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiA1LjY0IiB2YWxpZD0ieWVzIj5UaHVjeWRpZGVzLCB2LiA2NC03NTwvYmlibD4pLjwvbm90ZT4gd2hpY2ggVGh1Y3lkaWRlcyBoYXMgZGVzY3JpYmVkLCB0aGUgb25lIHdobyBmaXJzdCBhbm5vdW5jZWQgdGhlIHZpY3RvcnkgaGFkIG5vIG90aGVyIHJld2FyZCBmb3IgaGlzIGdsYWQgdGlkaW5ncyB0aGFuIGEgcGllY2Ugb2YgbWVhdCBzZW50IGJ5IHRoZSBtYWdpc3RyYXRlcyBmcm9tIHRoZSBwdWJsaWMgbWVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdywgYXQgdGhlIG5ld3Mgb2YgdGhlIEFyY2FkaWFuIHZpY3RvcnkgYW5kIGF0IHRoZSBhcHByb2FjaCBvZiBBcmNoaWRhbXVzLCBubyBvbmUgY291bGQgcmVzdHJhaW4gaGltc2VsZiwgYnV0IGZpcnN0IGhpcyBmYXRoZXIgd2VudCB0byBtZWV0IGhpbSwgd2VlcGluZyBmb3Igam95LCBhbmQgYWZ0ZXIgaGltIHRoZSBjaGllZiBtYWdpc3RyYXRlcywgd2hpbGUgdGhlIGVsZGVybHkgbWVuIGFuZCB0aGUgd29tZW4gd2VudCBkb3duIGluIGEgdGhyb25nIHRvIHRoZSByaXZlciwgbGlmdGluZyB0aGVpciBoYW5kcyB0byBoZWF2ZW4gYW5kIGJsZXNzaW5nIHRoZSBnb2RzLCBhcyBpZiBTcGFydGEgaGFkIHdpcGVkIGF3YXkgaGVyIHVubWVyaXRlZCBkaXNncmFjZXMgYW5kIG5vdyBzYXcgdGhlIGxpZ2h0IHNoaW5lIGJyaWdodCBhZ2FpbiBhcyBvZiBvbGQ7IGZvciBiZWZvcmUgdGhpcywgd2UgYXJlIHRvbGQsIGhlciBtZW4gY291bGQgbm90IHNvIG11Y2ggYXMgbG9vayB0aGVpciB3aXZlcyBpbiB0aGUgZmFjZSwgb3V0IG9mIHNoYW1lIGF0IHRoZWlyIGRpc2FzdGVycy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIE1lc3NlbmUgd2FzIGJ1aWx0IGJ5IEVwYW1pbm9uZGFzLCBhbmQgaXRzIGZvcm1lciBjaXRpemVucyBmbG9ja2VkIGludG8gaXQgZnJvbSBhbGwgcXVhcnRlcnMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNjkgQi5DLjwvbm90ZT4gdGhlIFNwYXJ0YW5zIGhhZCBub3QgdGhlIGNvdXJhZ2UgdG8gY29udGVzdCB0aGUgaXNzdWUgbm9yIHRoZSBhYmlsaXR5IHRvIGhpbmRlciBpdCwgYnV0IGNoZXJpc2hlZCB0aGUgZGVlcGVzdCByZXNlbnRtZW50IGFnYWluc3QgQWdlc2lsYcO8cywgYmVjYXVzZSBhIGNvdW50cnkgd2hpY2ggd2FzIG5vdCBvZiBsZXNzIGV4dGVudCB0aGFuIHRoZWlyIG93biwgd2hpY2ggc3Rvb2QgZmlyc3QgYW1vbmcgSGVsbGVuaWMgbGFuZHMgZm9yIGl0cyBmZXJ0aWxpdHksIHRoZSBwb3NzZXNzaW9uIGFuZCBmcnVpdHMgb2Ygd2hpY2ggdGhleSBoYWQgZW5qb3llZCBmb3Igc28gbG9uZyBhIHRpbWUsIGhhZCBiZWVuIGxvc3QgYnkgdGhlbSBkdXJpbmcgaGlzIHJlaWduLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyByZWFzb24sIHRvbywgQWdlc2lsYcO8cyB3b3VsZCBub3QgYWNjZXB0IHRoZSBwZWFjZSB3aGljaCB3YXMgcHJvZmZlcmVkIGJ5IHRoZSBUaGViYW5zLiBIZSB3YXMgbm90IHdpbGxpbmcgdG8gZ2l2ZSB1cCB0byB0aGVtIGZvcm1hbGx5IHRoZSBjb3VudHJ5IHdoaWNoIHdhcyBhY3R1YWxseSBpbiB0aGVpciBwb3dlciwgYW5kIHBlcnNpc3RlZCBpbiBoaXMgb3Bwb3NpdGlvbi4gQXMgYSBjb25zZXF1ZW5jZSwgaGUgbm90IG9ubHkgZGlkIG5vdCByZWNvdmVyIE1lc3NlbmlhLCBidXQgYWxtb3N0IGxvc3QgU3BhcnRhIGJlc2lkZXMsIGFmdGVyIGJlaW5nIG91dGdlbmVyYWxsZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHRoZSBNYW50aW5lYW5zIGNoYW5nZWQgdGhlaXIgYWxsZWdpYW5jZSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM2MiBCLkMuPC9ub3RlPiByZXZvbHRlZCBmcm9tIFRoZWJlcywgYW5kIGNhbGxlZCBpbiB0aGUgTGFjZWRhZW1vbmlhbnMgdG8gaGVscCB0aGVtLCBFcGFtaW5vbmRhcywgbGVhcm5pbmcgdGhhdCBBZ2VzaWxhw7xzIGhhZCBtYXJjaGVkIG91dCBmcm9tIFNwYXJ0YSB3aXRoIGhpcyBmb3JjZXMgYW5kIHdhcyBhcHByb2FjaGluZywgc2V0IG91dCBieSBuaWdodCBmcm9tIFRlZ2VhLCB3aXRob3V0IHRoZSBrbm93bGVkZ2Ugb2YgdGhlIE1hbnRpbmVhbnMsIGFuZCBsZWQgaGlzIGFybXkgYWdhaW5zdCBTcGFydGEgaXRzZWxmLiBIZSBwYXNzZWQgYnkgQWdlc2lsYcO8cywgYW5kIGNhbWUgd2l0aGluIGEgbGl0dGxlIG9mIHN1ZGRlbmx5IHNlaXppbmcgdGhlIGNpdHkgaW4gYSBkZWZlbmNlbGVzcyBzdGF0ZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgoJCQkJCSAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MaWtlIGEgbmVzdCBvZiB5b3VuZyBiaXJkcyB1dHRlcmx5IGJlcmVmdCBvZiBpdHMgbmF0dXJhbCBkZWZlbmRlcnM8L3E+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA3LjUuMTAiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aWkuIDUsIDEwPC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBFdXRoeW51cywgYSBUaGVzcGlhbiwgYXMgQ2FsbGlzdGhlbmVzIHNheXMsIG9yLCBhY2NvcmRpbmcgdG8gWGVub3Bob24sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNy41LjEwIiB2YWxpZD0ieWVzIj5Mb2MuIGNpdC48L2JpYmw+IENmLiBhbHNvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNS44Mi42IiB2YWxpZD0ieWVzIj5EaW9kb3J1cywgeHYsIDgyLCA2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhIGNlcnRhaW4gQ3JldGFuLCBicm91Z2h0IHdvcmQgdG8gQWdlc2lsYcO8cywgd2hvIHF1aWNrbHkgc2VudCBvbiBhIGhvcnNlbWFuIHRvIHdhcm4gdGhlIHBlb3BsZSBpbiBTcGFydGEsIGFuZCBub3QgbG9uZyBhZnRlciBoaXMgYXJyaXZhbCB0aGUgVGhlYmFucyB3ZXJlIGNyb3NzaW5nIHRoZSBFdXJvdGFzIGFuZCBhdHRhY2tpbmcgdGhlIGNpdHksIHdoaWxlIEFnZXNpbGHDvHMgZGVmZW5kZWQgaXQgcmlnaHQgdmlnb3JvdXNseSBhbmQgaW4gYSBtYW5uZXIgbm90IHRvIGJlIGV4cGVjdGVkIG9mIGhpcyB5ZWFycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGRpZCBub3QgdGhpbmssIGFzIG9uIGEgZm9ybWVyIG9jY2FzaW9uLCB0aGF0IHRoZSBjcmlzaXMgZGVtYW5kZWQgc2FmZSBhbmQgY2F1dGlvdXMgbWVhc3VyZXMsIGJ1dCByYXRoZXIgZGVlZHMgb2YgZGVzcGVyYXRlIGRhcmluZy4gSW4gdGhlc2UgaGUgaGFkIG5ldmVyIHB1dCBjb25maWRlbmNlIGJlZm9yZSwgbm9yIGhhZCBoZSBlbXBsb3llZCB0aGVtLCBidXQgdGhlbiBpdCB3YXMgb25seSBieSB0aGVpciBhaWQgdGhhdCBoZSByZXBlbGxlZCB0aGUgZGFuZ2VyLCBzbmF0Y2hpbmcgdGhlIGNpdHkgb3V0IG9mIHRoZSBncmFzcCBvZiBFcGFtaW5vbmRhcywgZXJlY3RpbmcgYSB0cm9waHkgb2YgdmljdG9yeSwgYW5kIHNob3dpbmcgdGhlaXIgd2l2ZXMgYW5kIGNoaWxkcmVuIHRoYXQgdGhlIExhY2VkYWVtb25pYW5zIHdlcmUgbWFraW5nIHRoZSBmYWlyZXN0IG9mIGFsbCByZXR1cm5zIHRvIHRoZWlyIGNvdW50cnkgZm9yIGl0cyByZWFyaW5nIG9mIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFyY2hpZGFtdXMsIHRvbywgZm91Z2h0IGFtb25nIHRoZSBmb3JlbW9zdCwgY29uc3BpY3VvdXMgZm9yIGhpcyBpbXBldHVvdXMgY291cmFnZSBhbmQgZm9yIGhpcyBhZ2lsaXR5LCBydW5uaW5nIHN3aWZ0bHkgdGhyb3VnaCB0aGUgbmFycm93IHN0cmVldHMgdG8gdGhlIGVuZGFuZ2VyZWQgcG9pbnRzIGluIHRoZSBiYXR0bGUsIGFuZCBldmVyeXdoZXJlIHByZXNzaW5nIGhhcmQgdXBvbiB0aGUgZW5lbXkgd2l0aCBoaXMgZmV3IGZvbGxvd2Vycy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA3LjUuMTIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aWkuIDUsIDEyLTE0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBCdXQgSSB0aGluayB0aGF0IElzaWRhcywgdGhlIHNvbiBvZiBQaG9lYmlkYXMsIG11c3QgaGF2ZSBiZWVuIGEgc3RyYW5nZSBhbmQgbWFydmVsbG91cyBzaWdodCwgbm90IG9ubHkgdG8gaGlzIGZlbGxvdy1jaXRpemVucywgYnV0IGFsc28gdG8gaGlzIGVuZW1pZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBvZiBjb25zcGljdW91cyBiZWF1dHkgYW5kIHN0YXR1cmUsIGFuZCBhdCBhbiBhZ2Ugd2hlbiB0aGUgaHVtYW4gZmxvd2VyIGhhcyB0aGUgZ3JlYXRlc3QgY2hhcm0sIGFzIHRoZSBib3kgbWVyZ2VzIGludG8gdGhlIG1hbi4gTmFrZWQgYXMgaGUgd2FzLCB3aXRob3V0IGVpdGhlciBkZWZlbnNpdmUgYXJtb3VyIG9yIGNsb3RoaW5nLOKAlGZvciBoZSBoYWQganVzdCBhbm9pbnRlZCBoaXMgYm9keSB3aXRoIG9pbCzigJRoZSB0b29rIGEgc3BlYXIgaW4gb25lIGhhbmQsIGFuZCBhIHN3b3JkIGluIHRoZSBvdGhlciwgbGVhcGVkIGZvcnRoIGZyb20gaGlzIGhvdXNlLCBhbmQgYWZ0ZXIgcHVzaGluZyBoaXMgd2F5IHRocm91Z2ggdGhlIG1pZHN0IG9mIHRoZSBjb21iYXRhbnRzLCByYW5nZWQgdXAgYW5kIGRvd24gYW1vbmcgdGhlIGVuZW15LCBzbWl0aW5nIGFuZCBsYXlpbmcgbG93IGFsbCB3aG8gZW5jb3VudGVyZWQgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm8gbWFuIGdhdmUgaGltIGEgd291bmQsIHdoZXRoZXIgaXQgd2FzIHRoYXQgYSBnb2Qgc2hpZWxkZWQgaGltIG9uIGFjY291bnQgb2YgaGlzIHZhbG91ciwgb3IgdGhhdCB0aGUgZW5lbXkgdGhvdWdodCBoaW0gdGFsbGVyIGFuZCBtaWdodGllciB0aGFuIGEgbWVyZSBtYW4gY291bGQgYmUuIEZvciB0aGlzIGV4cGxvaXQgaXQgaXMgc2FpZCB0aGF0IHRoZSBlcGhvcnMgcHV0IGEgZ2FybGFuZCBvbiBoaXMgaGVhZCwgYW5kIHRoZW4gZmluZWQgaGltIGEgdGhvdXNhbmQgZHJhY2htYXMsIGJlY2F1c2UgaGUgaGFkIGRhcmVkIHRvIGhhemFyZCBoaXMgbGlmZSBpbiBiYXR0bGUgd2l0aG91dCBhcm1vdXIuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIGZldyBkYXlzIGFmdGVyd2FyZHMgYSBiYXR0bGUgd2FzIGZvdWdodCBuZWFyIE1hbnRpbmVhLCBpbiB3aGljaCBFcGFtaW5vbmRhcyBoYWQgYWxyZWFkeSByb3V0ZWQgdGhlIHZhbiBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIGFuZCB3YXMgc3RpbGwgZWFnZXJseSBwcmVzc2luZyBvbiBpbiBwdXJzdWl0IG9mIHRoZW0sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNy41LjIyIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmlpLiA1LCAyMi0yNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hlbiBBbnRpY3JhdGVzLCBhIFNwYXJ0YW4sIGZhY2VkIGhpbSBhbmQgc21vdGUgaGltIHdpdGggYSBzcGVhciwgYXMgRGlvc2NvcmlkZXMgdGVsbHMgdGhlIHN0b3J5OyBidXQgdGhlIExhY2VkYWVtb25pYW5zIHRvIHRoaXMgZGF5IGNhbGwgdGhlIGRlc2NlbmRhbnRzIG9mIEFudGljcmF0ZXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5tYWNoYWVyaW9uZXMsPC9xPiBvciA8ZW1waD4KICAgICAgICAgICAgICAgPGVtcGg+c3dvcmRzbWVuPC9lbXBoPgogICAgICAgICAgICA8L2VtcGg+LCBiZWNhdXNlIGhlIHVzZWQgYSBzd29yZCBmb3IgdGhlIGJsb3cuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBmaWxsZWQgd2l0aCBzdWNoIGFkbWlyaW5nIGxvdmUgZm9yIGhpbSBiZWNhdXNlIG9mIHRoZSBmZWFyIGluIHdoaWNoIHRoZXkgaGVsZCBFcGFtaW5vbmRhcyB3aGlsZSBsaXZpbmcsIHRoYXQgdGhleSB2b3RlZCBob25vdXJzIGFuZCBnaWZ0cyB0byBBbnRpY3JhdGVzIGhpbXNlbGYsIGFuZCB0byBoaXMgcG9zdGVyaXR5IGV4ZW1wdGlvbiBmcm9tIHRheGVzLCBhbiBpbW11bml0eSB3aGljaCBpbiBteSBvd24gZGF5IGFsc28gaXMgZW5qb3llZCBieSBDYWxsaWNyYXRlcywgb25lIG9mIHRoZSBkZXNjZW5kYW50cyBvZiBBbnRpY3JhdGVzLgoJCQk8L3A+CiAgICAgICAgIDxwPkFmdGVyIHRoZSBiYXR0bGUgYW5kIHRoZSBkZWF0aCBvZiBFcGFtaW5vbmRhcywgd2hlbiB0aGUgR3JlZWtzIGNvbmNsdWRlZCBwZWFjZSBhbW9uZyB0aGVtc2VsdmVzLCBBZ2VzaWxhw7xzIGFuZCBoaXMgcGFydGlzYW5zIHRyaWVkIHRvIGV4Y2x1ZGUgdGhlIE1lc3NlbmlhbnMgZnJvbSB0aGUgb2F0aCBvZiByYXRpZmljYXRpb24sIG9uIHRoZSBncm91bmQgdGhhdCB0aGV5IGhhZCBubyBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBhbGwgdGhlIHJlc3QgYWRtaXR0ZWQgdGhlIE1lc3NlbmlhbnMgYW5kIGFjY2VwdGVkIHRoZWlyIG9hdGhzLCB0aGUgTGFjZWRhZW1vbmlhbnMgaGVsZCBhbG9vZiBmcm9tIHRoZSBwZWFjZSwgYW5kIHRoZXkgYWxvbmUgcmVtYWluZWQgYXQgd2FyIGluIHRoZSBob3BlIG9mIHJlY292ZXJpbmcgTWVzc2VuaWEuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1Ljg5LjEiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4di4gODksIDEgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQWdlc2lsYcO8cyB3YXMgdGhlcmVmb3JlIGRlZW1lZCBhIGhlYWRzdHJvbmcgYW5kIHN0dWJib3JuIG1hbiwgYW5kIGluc2F0aWFibGUgb2Ygd2FyLCBzaW5jZSBoZSBkaWQgYWxsIGluIGhpcyBwb3dlciB0byB1bmRlcm1pbmUgYW5kIHBvc3Rwb25lIHRoZSBnZW5lcmFsIHBlYWNlLCBhbmQgYWdhaW4gc2luY2UgaGlzIGxhY2sgb2YgcmVzb3VyY2VzIGNvbXBlbGxlZCBoaW0gdG8gbGF5IGJ1cmRlbnMgb24gaGlzIGZyaWVuZHMgaW4gdGhlIGNpdHkgYW5kIHRvIHRha2UgbG9hbnMgYW5kIGNvbnRyaWJ1dGlvbnMgZnJvbSB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGl0IHdhcyBoaXMgZHV0eSB0byBwdXQgYW4gZW5kIHRvIHRoZWlyIGV2aWxzLCBub3cgdGhhdCBvcHBvcnR1bml0eSBvZmZlcmVkLCBhbmQgbm90LCBhZnRlciBoYXZpbmcgbG9zdCBTcGFydGEncyB3aG9sZSBlbXBpcmUsIHZhc3QgYXMgaXQgd2FzLCB3aXRoIGl0cyBjaXRpZXMgYW5kIGl0cyBzdXByZW1hY3kgb24gbGFuZCBhbmQgc2VhLCB0aGVuIHRvIGNhcnJ5IG9uIGEgcGV0dHkgc3RydWdnbGUgZm9yIHRoZSBnb29kcyBhbmQgcmV2ZW51ZXMgb2YgTWVzc2VuZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIGxvc3Qgc3RpbGwgbW9yZSByZXB1dGF0aW9uIGJ5IG9mZmVyaW5nIHRvIHRha2UgYSBjb21tYW5kIHVuZGVyIFRhY2hvcyB0aGUgRWd5cHRpYW4uIEZvciBpdCB3YXMgdGhvdWdodCB1bndvcnRoeSB0aGF0IGEgbWFuIHdobyBoYWQgYmVlbiBqdWRnZWQgbm9ibGVzdCBhbmQgYmVzdCBpbiBIZWxsYXMsIGFuZCB3aG8gaGFkIGZpbGxlZCB0aGUgd29ybGQgd2l0aCBoaXMgZmFtZSwgc2hvdWxkIGZ1cm5pc2ggYSByZWJlbCBhZ2FpbnN0IHRoZSBHcmVhdCBLaW5nLCBhIG1lcmUgQmFyYmFyaWFuLCB3aXRoIGhpcyBwZXJzb24sIGhpcyBuYW1lLCBhbmQgaGlzIGZhbWUsIGFuZCB0YWtlIG1vbmV5IGZvciBoaW0sIHJlbmRlcmluZyB0aGUgc2VydmljZSBvZiBhIGhpcmVkIGNhcHRhaW4gb2YgbWVyY2VuYXJpZXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5YZW5vcGhvbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gMi4yOCIgdmFsaWQ9InllcyI+QWdlc2lsYcO8cywgaWkuIDI4LTMxPC9iaWJsPikgaGFzIEFnZXNpbGHDvHMgdGFrZSB0aGlzIHN0ZXAgaW4gb3JkZXIgdG8gcHVuaXNoIHRoZSBHcmVhdCBLaW5nIGFuZCBsaWJlcmF0ZSBhZ2FpbiB0aGUgR3JlZWtzIG9mIEFzaWEuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBldmVuIGlmLCBub3cgdGhhdCBoZSB3YXMgcGFzdCBlaWdodHkgeWVhcnMgb2YgYWdlIGFuZCBoaXMgd2hvbGUgYm9keSB3YXMgZGlzZmlndXJlZCB3aXRoIHdvdW5kcywgaGUgaGFkIHRha2VuIHVwIGFnYWluIGhpcyBub2JsZSBhbmQgY29uc3BpY3VvdXMgbGVhZGVyc2hpcCBpbiBiZWhhbGYgb2YgdGhlIGZyZWVkb20gb2YgdGhlIEhlbGxlbmVzLCBoaXMgYW1iaXRpb24gd291bGQgbm90IGhhdmUgYmVlbiBhbHRvZ2V0aGVyIGJsYW1lbGVzcywgYXMgbWVuIHRob3VnaHQuIEZvciBob25vdXJhYmxlIGFjdGlvbiBoYXMgaXRzIGZpdHRpbmcgdGltZSBhbmQgc2Vhc29uOyBuYXksIHJhdGhlciwgaXQgaXMgdGhlIG9ic2VydmFuY2Ugb2YgZHVlIGJvdW5kcyB0aGF0IGNvbnN0aXR1dGVzIGFuIHV0dGVyIGRpZmZlcmVuY2UgYmV0d2VlbiBob25vdXJhYmxlIGFuZCBiYXNlIGFjdGlvbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMsIGhvd2V2ZXIsIHBhaWQgbm8gaGVlZCB0byB0aGVzZSBjb25zaWRlcmF0aW9ucywgbm9yIGRpZCBoZSB0aGluayBhbnkgcHVibGljIHNlcnZpY2UgYmVuZWF0aCBoaXMgZGlnbml0eTsgaXQgd2FzIG1vcmUgdW53b3J0aHkgb2YgaGltLCBpbiBoaXMgb3BpbmlvbiwgdG8gbGl2ZSBhbiBpZGxlIGxpZmUgaW4gdGhlIGNpdHksIGFuZCB0byBzaXQgZG93biBhbmQgd2FpdCBmb3IgZGVhdGguIFRoZXJlZm9yZSBoZSBjb2xsZWN0ZWQgbWVyY2VuYXJpZXMgd2l0aCB0aGUgbW9uZXkgd2hpY2ggVGFjaG9zIHNlbnQgaGltLCBlbWJhcmtlZCB0aGVtIG9uIHRyYW5zcG9ydHMsIGFuZCBwdXQgdG8gc2VhLCBhY2NvbXBhbmllZCBieSB0aGlydHkgU3BhcnRhbiBjb3Vuc2VsbG9ycywgYXMgZm9ybWVybHkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDYuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgaGUgbGFuZGVkIGluIEVneXB0LAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MzYxIEIuQy48L25vdGU+IHRoZSBjaGllZiBjYXB0YWlucyBhbmQgZ292ZXJub3JzIG9mIHRoZSBraW5nIGNhbWUgZG93biB0byBtZWV0IGhpbSBhbmQgcGF5IGhpbSBob25vdXIuIFRoZXJlIHdhcyBncmVhdCBlYWdlcm5lc3MgYW5kIGV4cGVjdGF0aW9uIG9uIHRoZSBwYXJ0IG9mIHRoZSBvdGhlciBFZ3lwdGlhbnMgYWxzbywgb3dpbmcgdG8gdGhlIG5hbWUgYW5kIGZhbWUgb2YgQWdlc2lsYcO8cywgYW5kIGFsbCByYW4gdG9nZXRoZXIgdG8gYmVob2xkIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhleSBzYXcgbm8gYnJpbGxpYW50IGFycmF5IHdoYXRldmVyLCBidXQgYW4gb2xkIG1hbiBseWluZyBpbiBzb21lIGdyYXNzIGJ5IHRoZSBzZWEsIGhpcyBib2R5IHNtYWxsIGFuZCBjb250ZW1wdGlibGUsIGNvdmVyZWQgd2l0aCBhIGNsb2FrIHRoYXQgd2FzIGNvYXJzZSBhbmQgbWVhbiwgdGhleSB3ZXJlIG1vdmVkIHRvIGxhdWdodGVyIGFuZCBqZXN0aW5nLCBzYXlpbmcgdGhhdCBoZXJlIHdhcyBhbiBpbGx1c3RyYXRpb24gb2YgdGhlIGZhYmxlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmEgbW91bnRhaW4gaXMgaW4gdHJhdmFpbCwgYW5kIHRoZW4gYSBtb3VzZSBpcyBib3JuLjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkF0aC4gMTQuNjE2ZCI+QXRoZW5hZXVzIHAuIDYxNiBkPC9iaWJsPiwgaXQgaXMgVGFjaG9zIGhpbXNlbGYgd2hvIG1ha2VzIHRoaXMgamVzdCB1cG9uIEFnZXNpbGHDvHMsIHdobyByZXBsaWVzIGluIGFuZ2VyOiAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Tb21lIGRheSB5b3Ugd2lsbCB0aGluayBtZSBhIGxpb24uPC9xPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB3ZXJlIHN0aWxsIG1vcmUgc3VycHJpc2VkLCB0b28sIGF0IGhpcyBlY2NlbnRyaWNpdHkuIFdoZW4gYWxsIG1hbm5lciBvZiBob3NwaXRhYmxlIGdpZnRzIHdlcmUgYnJvdWdodCB0byBoaW0sIGhlIGFjY2VwdGVkIHRoZSBmbG91ciwgdGhlIGNhbHZlcywgYW5kIHRoZSBnZWVzZSwgYnV0IHJlamVjdGVkIHRoZSBzd2VldG1lYXRzLCB0aGUgcGFzdHJpZXMsIGFuZCB0aGUgcGVyZnVtZXMsIGFuZCB3aGVuIGhlIHdhcyB1cmdlZCBhbmQgYmVzb3VnaHQgdG8gdGFrZSB0aGVtLCBvcmRlcmVkIHRoZW0gdG8gYmUgY2FycmllZCBhbmQgZ2l2ZW4gdG8gaGlzIEhlbG90cy4gSGUgd2FzIHBsZWFzZWQsIGhvd2V2ZXIsIGFzIFRoZW9waHJhc3R1cyB0ZWxscyB1cywgd2l0aCB0aGUgcGFweXJ1cyB1c2VkIGluIGNoYXBsZXRzLCBiZWNhdXNlIHRoZSBjaGFwbGV0cyB3ZXJlIHNvIG5lYXQgYW5kIHNpbXBsZSwgYW5kIHdoZW4gaGUgbGVmdCBFZ3lwdCwgYXNrZWQgYW5kIHJlY2VpdmVkIHNvbWUgZnJvbSB0aGUga2luZy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3csIG9uIGpvaW5pbmcgVGFjaG9zLCB3aG8gd2FzIG1ha2luZyBwcmVwYXJhdGlvbnMgZm9yIGhpcyBleHBlZGl0aW9uLCBoZSB3YXMgbm90LCBhcyBoZSBleHBlY3RlZCwgYXBwb2ludGVkIGNvbW1hbmRlciBvZiBhbGwgdGhlIGZvcmNlcywgYnV0IG9ubHkgb2YgdGhlIG1lcmNlbmFyaWVzLCB3aGlsZSBDaGFicmlhcyB0aGUgQXRoZW5pYW4gaGFkIGNoYXJnZSBvZiB0aGUgZmxlZXQsIGFuZCBUYWNob3MgaGltc2VsZiB3YXMgY29tbWFuZGVyLWluLWNoaWVmCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1LjkyLjIiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4di4gOTIsIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgZmlyc3QgdGhpbmcgdGhhdCB2ZXhlZCBBZ2VzaWxhw7xzOyB0aGVuLCB0aG91Z2ggaGUgd2FzIGluZGlnbmFudCBhdCB0aGUgdmFpbiBwcmV0ZW5zaW9ucyBvZiB0aGUga2luZyBpbiBvdGhlciBtYXR0ZXJzLCBoZSB3YXMgY29tcGVsbGVkIHRvIGVuZHVyZSB0aGVtLiBIZSBldmVuIHNhaWxlZCB3aXRoIGhpbSBhZ2FpbnN0IHRoZSBQaG9lbmljaWFucywgZm9yY2luZyBoaW1zZWxmIGludG8gYSBzdWJzZXJ2aWVuY2Ugd2hpY2ggd2FzIGJlbmVhdGggaGlzIGRpZ25pdHkgYW5kIGNvbnRyYXJ5IHRvIGhpcyBuYXR1cmUsIHVudGlsIGhlIGZvdW5kIGhpcyBvcHBvcnR1bml0eS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBOZWN0YW5hYmlzLCB3aG8gd2FzIGEgY291c2luIG9mIFRhY2hvcyBhbmQgaGFkIGEgcGFydCBvZiB0aGUgZm9yY2VzIHVuZGVyIGhpcyBjb21tYW5kLCByZXZvbHRlZCBmcm9tIGhpbSwgYW5kIGhhdmluZyBiZWVuIHByb2NsYWltZWQga2luZyBieSB0aGUgRWd5cHRpYW5zLCBzZW50IHRvIEFnZXNpbGHDvHMgYXNraW5nIGZvciBoaXMgYWlkIGFuZCBhc3Npc3RhbmNlLiBIZSBtYWRlIHRoZSBzYW1lIGFwcGVhbCB0byBDaGFicmlhcyBhbHNvLCBwcm9taXNpbmcgbGFyZ2UgZ2lmdHMgdG8gYm90aC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBUYWNob3MgbGVhcm5lZCBvZiB0aGlzIGFuZCByZXNvcnRlZCB0byBlbnRyZWF0aWVzIGZvciB0aGVpciBhbGxlZ2lhbmNlLCBDaGFicmlhcyB0cmllZCB0byBwZXJzdWFkZSBhbmQgZW5jb3VyYWdlIEFnZXNpbGHDvHMgdG8gY29udGludWUgd2l0aCBoaW0gaW4gdGhlIGZyaWVuZHNoaXAgb2YgVGFjaG9zLiBCdXQgQWdlc2lsYcO8cyBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdSwgQ2hhYnJpYXMsIHdobyBjYW1lIGhlcmUgb24geW91ciBvd24gYWNjb3VudCwgY2FuIGRlY2lkZSB5b3VyIG93biBjYXNlOyBidXQgSSB3YXMgZ2l2ZW4gYnkgbXkgY291bnRyeSB0byB0aGUgRWd5cHRpYW5zIGFzIGEgZ2VuZXJhbC4gSXQgd291bGQgdGhlcmVmb3JlIGJlIGRpc2hvbm91cmFibGUgZm9yIG1lIHRvIG1ha2Ugd2FyIG9uIHRob3NlIHRvIHdob20gSSB3YXMgc2VudCBhcyBhbiBhbGx5LCB1bmxlc3MgbXkgY291bnRyeSBnaXZlcyBtZSBhIG5ldyBjb21tYW5kIHRvIGRvIHNvLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGVzZSB3b3JkcywgaGUgc2VudCBtZW4gdG8gU3BhcnRhIHdobyB3ZXJlIHRvIGRlbm91bmNlIFRhY2hvcywgYW5kIGNvbW1lbmQgTmVjdGFuYWJpcy4gVGFjaG9zIGFuZCBOZWN0YW5hYmlzIGFsc28gc2VudCBhbmQgYmVzb3VnaHQgdGhlIHN1cHBvcnQgb2YgdGhlIExhY2VkYWVtb25pYW5zLCB0aGUgZm9ybWVyIG9uIHRoZSBncm91bmQgdGhhdCBoZSBoYWQgbG9uZyBiZWVuIHRoZWlyIGFsbHkgYW5kIGZyaWVuZCwgdGhlIGxhdHRlciBvbiB0aGUgcGxlYSB0aGF0IGhlIHdvdWxkIGJlIHdlbGwgZGlzcG9zZWQgdG8gdGhlaXIgY2l0eSBhbmQgbW9yZSBlYWdlciB0byBwcm9tb3RlIGhlciBpbnRlcmVzdHMuIFRoZSBMYWNlZGFlbW9uaWFucywgYWNjb3JkaW5nbHksIGFmdGVyIGhlYXJpbmcgdGhlIG1lc3NlbmdlcnMsIG1hZGUgcHVibGljIGFuc3dlciB0byB0aGUgRWd5cHRpYW5zIHRoYXQgQWdlc2lsYcO8cyB3b3VsZCBhdHRlbmQgdG8gdGhlc2UgbWF0dGVyczsgYnV0IHRvIEFnZXNpbGHDvHMgdGhleSB3cm90ZSBwcml2YXRlbHkgYmlkZGluZyBoaW0gc2VlIHRvIGl0IHRoYXQgdGhlIGludGVyZXN0cyBvZiBTcGFydGEgc2hvdWxkIG5vdCBzdWZmZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvIEFnZXNpbGHDvHMgdG9vayBoaXMgbWVyY2VuYXJpZXMgYW5kIHdlbnQgb3ZlciBmcm9tIFRhY2hvcyB0byBOZWN0YW5hYmlzLCBtYWtpbmcgdGhlIGludGVyZXN0cyBvZiBoaXMgY291bnRyeSBzZXJ2ZSBhcyBhIHZlaWwgZm9yIGEgc3RyYW5nZSBhbmQgdW5uYXR1cmFsIHByb2NlZWRpbmcsIHNpbmNlIHdoZW4gdGhpcyBwcmV0ZXh0IHdhcyByZW1vdmVkLCB0aGUgbW9zdCBmaXR0aW5nIG5hbWUgZm9yIGhpcyBhY3Qgd2FzIHRyZWFjaGVyeS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlhlbm9waG9uLCB3aG8gY2FuIHNlZSBubyBmYXVsdCBpbiBBZ2VzaWxhw7xzLCBzYXlzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiAyLjMxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFnZXNpbGHDvHM8L3RpdGxlPiwgaWkuIDMxPC9iaWJsPik6IAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFjY29yZGluZ2x5LCBoZSBjaG9zZSBiZXR3ZWVuIHRoZSB0d28gdGhhdCBvbmUgd2hvIHNlZW1lZCB0byBiZSB0aGUgdHJ1ZXIgcGFydGlzYW4gb2YgSGVsbGFzLCBhbmQgd2l0aCBoaW0gbWFyY2hlZCBhZ2FpbnN0IHRoZSBlbmVteSBvZiBIZWxsYXMgYW5kIGNvbnF1ZXJlZCBoaW0gaW4gYmF0dGxlLjwvcT4KICAgICAgICAgICAgPC9ub3RlPiBCdXQgdGhlIExhY2VkYWVtb25pYW5zIGFzc2lnbiB0aGUgY2hpZWYgcGxhY2UgaW4gdGhlaXIgaWRlYXMgb2YgaG9ub3VyIHRvIHRoZSBpbnRlcmVzdHMgb2YgdGhlaXIgY291bnRyeSwgYW5kIG5laXRoZXIgbGVhcm4gbm9yIHVuZGVyc3RhbmQgYW55IG90aGVyIGp1c3RpY2UgdGhhbiB0aGF0IHdoaWNoIHRoZXkgdGhpbmsgd2lsbCBlbmhhbmNlIHRoZSBnbG9yeSBvZiBTcGFydGEuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UYWNob3MsIGFjY29yZGluZ2x5LCB0aHVzIGRlc2VydGVkIGJ5IGhpcyBtZXJjZW5hcmllcywgdG9vayB0byBmbGlnaHQuIEJ1dCBpbiBNZW5kZXMgYW5vdGhlciByaXZhbCByb3NlIHVwIGFnYWluc3QgTmVjdGFuYWJpcyBhbmQgd2FzIHByb2NsYWltZWQga2luZywgYW5kIGFmdGVyIGNvbGxlY3RpbmcgYSBodW5kcmVkIHRob3VzYW5kIG1lbiBhZHZhbmNlZCBhZ2FpbnN0IGhpbS4gVGhlbiBOZWN0YW5hYmlzIHNvdWdodCB0byBlbmNvdXJhZ2UgQWdlc2lsYcO8cyBieSBzYXlpbmcgdGhhdCBhbHRob3VnaCB0aGUgZW5lbXkgd2VyZSBudW1lcm91cywgdGhleSB3ZXJlIGEgbWl4ZWQgcmFiYmxlIG9mIGFydGlzYW5zIHdob3NlIGluZXhwZXJpZW5jZSBpbiB3YXIgbWFkZSB0aGVtIGNvbnRlbXB0aWJsZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluZGVlZCw8L3E+IHNhaWQgQWdlc2lsYcO8cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pdCBpcyBub3QgdGhlaXIgbnVtYmVycyB0aGF0IEkgZmVhciwgYnV0IHRoZSBpbmV4cGVyaWVuY2UgYW5kIGlnbm9yYW5jZSBvZiB3aGljaCB5b3Ugc3BlYWssIHdoaWNoIGl0IGlzIGhhcmQgdG8gb3ZlcmNvbWUgYnkgc3RyYXRhZ2Vtcy4gRm9yIHN0cmF0YWdlbXMgYXJyYXkgdW5leHBlY3RlZCBkaWZmaWN1bHRpZXMgYWdhaW5zdCBtZW4gd2hvIHRyeSB0byBkZWZlbmQgdGhlbXNlbHZlcyBhZ2FpbnN0IHRoZW0sIGlmIHRoZXkgc3VzcGVjdCBhbmQgYXdhaXQgdGhlbTsgYnV0IGhlIHdobyBkb2VzIG5vdCBhd2FpdCBub3IgZXZlbiBzdXNwZWN0IGFueSBzdHJhdGFnZW0gZ2l2ZXMgbm8gaG9sZCB0byB0aGUgb3Bwb25lbnQgd2hvIGlzIHRyeWluZyB0byBvdXR3aXQgaGltLCBqdXN0IGFzLCBpbiBhIHdyZXN0bGluZyBib3V0LCBoZSB3aG8gZG9lcyBub3Qgc3RpciBnaXZlcyBubyBhZHZhbnRhZ2UgdG8gaGlzIGFudGFnb25pc3QuPC9xPiBBZnRlciB0aGlzLCB0aGUgTWVuZGVzaWFuIGFsc28gc2VudCBhbmQgdHJpZWQgdG8gd2luIG92ZXIgQWdlc2lsYcO8cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TmVjdGFuYWJpcyB3YXMgdGhlcmVmb3JlIGFsYXJtZWQsIGFuZCB3aGVuIEFnZXNpbGHDvHMgdXJnZWQgaGltIHRvIGZpZ2h0IHRoZSBpc3N1ZSBvdXQgYXMgc3BlZWRpbHkgYXMgcG9zc2libGUsIGFuZCBub3QgdG8gd2FnZSBhIHdhciBvZiBkZWxheXMgYWdhaW5zdCBtZW4gd2hvIHdlcmUgaW5leHBlcmllbmNlZCBpbiBmaWdodGluZywgYnV0IHdlcmUgbnVtZXJvdXMgZW5vdWdoIHRvIHN1cnJvdW5kIGhpbSBhbmQgaGVkZ2UgaGltIGluIGFuZCBhbnRpY2lwYXRlIGFuZCBnZXQgdGhlIHN0YXJ0IG9mIGhpbSBpbiBtYW55IHdheXMsIGhlIGdyZXcgc3RpbGwgbW9yZSBzdXNwaWNpb3VzIGFuZCBmZWFyZnVsIG9mIGhpbSwgYW5kIHJldGlyZWQgaW50byBhIGNpdHkgd2hpY2ggd2FzIHdlbGwgZm9ydGlmaWVkIGFuZCBoYWQgYSBsYXJnZSBjb21wYXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZ2VzaWxhw7xzIHdhcyBpbmNlbnNlZCBhdCB0aGlzIGxhY2sgb2YgY29uZmlkZW5jZSwgYW5kIGZ1bGwgb2YgaW5kaWduYXRpb24sIGJ1dCBzaW5jZSBoZSB3YXMgYXNoYW1lZCB0byBjaGFuZ2Ugc2lkZXMgYWdhaW4gYW5kIGZpbmFsbHkgZ28gYmFjayBob21lIHdpdGhvdXQgYWNjb21wbGlzaGluZyBhbnkgdGhpbmcsIGhlIGFjY29tcGFuaWVkIE5lY3RhbmFiaXMgYW5kIGVudGVyZWQgdGhlIGNpdHkgd2l0aCBoaW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgZW5lbXkgY2FtZSB1cCBhbmQgYmVnYW4gdG8gc3Vycm91bmQgdGhlIGNpdHkgd2l0aCBhIHRyZW5jaCwgdGhlbiB0aGUgRWd5cHRpYW4gY2hhbmdlZCBoaXMgbWluZCwgZ3JldyBmZWFyZnVsIG9mIHRoZSBzaWVnZSwgYW5kIHdpc2hlZCB0byBnaXZlIGJhdHRsZSwgZm9yIHdoaWNoIHRoZSBHcmVla3MgYWxzbyB3ZXJlIHZlcnkgZWFnZXIsIHNpbmNlIHRoZXJlIHdlcmUgbm8gcHJvdmlzaW9ucyBpbiB0aGUgcGxhY2UuIEFnZXNpbGHDvHMsIGhvd2V2ZXIsIHdvdWxkIG5vdCBwZXJtaXQgaXQsIGJ1dCBvcHBvc2VkIGl0LCBhbmQgd2FzIHRoZXJlZm9yZSBtYWxpZ25lZCBieSB0aGUgRWd5cHRpYW5zIGV2ZW4gbW9yZSBiaXR0ZXJseSB0aGFuIGJlZm9yZSwgYW5kIGNhbGxlZCBhIGJldHJheWVyIG9mIHRoZSBraW5nLiBCdXQgaGUgYm9yZSB0aGVpciBjYWx1bW5pZXMgbW9yZSBwYXRpZW50bHkgbm93LCBhbmQgc291Z2h0IHRvIGZpbmQgdGhlIGZpdHRpbmcgbW9tZW50IGZvciBoaXMgc3RyYXRhZ2VtLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgYXMgZm9sbG93cy4gVGhlIGVuZW15IHdlcmUgZGlnZ2luZyBhIGRlZXAgdHJlbmNoIG91dHNpZGUgYXJvdW5kIHRoZSBjaXR5LCBpbiBvcmRlciB0byBzaHV0IGl0cyBvY2N1cGFudHMgdXAgY29tcGxldGVseS4gQWNjb3JkaW5nbHksIHdoZW4gdGhlIHRyZW5jaCBoYWQgYmVlbiBjYXJyaWVkIGFsbW9zdCBhcm91bmQgdGhlIGNpdHksIGFuZCBpdHMgZW5kcyB3ZXJlIG5lYXIgb25lIGFub3RoZXIsIGFmdGVyIHdhaXRpbmcgZm9yIGV2ZW5pbmcgdG8gY29tZSBhbmQgb3JkZXJpbmcgdGhlIEdyZWVrcyB0byBhcm0gdGhlbXNlbHZlcywgQWdlc2lsYcO8cyB3ZW50IHRvIHRoZSBFZ3lwdGlhbiBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3cgaXMgdGhlIHRpbWUsIHlvdW5nIG1hbiwgZm9yIHVzIHRvIHNhdmUgb3Vyc2VsdmVzLCBhbmQgSSB3b3VsZCBub3Qgc3BlYWsgb2YgaXQgdW50aWwgaXQgY2FtZSwgZm9yIGZlYXIgb2Ygdml0aWF0aW5nIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZW5lbXkgaGF2ZSBub3cgd29ya2VkIG91dCBvdXIgc2FmZXR5IHdpdGggdGhlaXIgb3duIGhhbmRzLiBUaGV5IGhhdmUgZHVnIHRoZWlyIHRyZW5jaCBzbyBmYXIgdGhhdCB0aGUgcGFydCB3aGljaCBpcyBmaW5pc2hlZCBoaW5kZXJzIHRoZW0gZnJvbSBhdHRhY2tpbmcgdXMgaW4gZ3JlYXQgbnVtYmVycywgYW5kIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSBlbmRzIGdpdmVzIHVzIHJvb20gdG8gZmlnaHQgdGhlbSBvbiBmYWlyIGFuZCBlcXVhbCB0ZXJtcy4gQ29tZSwgdGhlbiwgYmUgZWFnZXIgdG8gc2hvdyB5b3Vyc2VsZiBhIGJyYXZlIG1hbjsgZm9sbG93IHdpdGggdXMgYXMgd2UgY2hhcmdlLCBhbmQgc2F2ZSB5b3Vyc2VsZiBhbmQgeW91ciBhcm15IHRvby4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBlbmVteSBpbiBvdXIgZnJvbnQgd2lsbCBub3Qgd2l0aHN0YW5kIHVzLCBhbmQgdGhlIHJlc3Qgd2lsbCBub3QgaGFybSB1cyBiZWNhdXNlIG9mIHRoZSB0cmVuY2guPC9xPiBOZWN0YW5hYmlzLCB0aGVuLCB3YXMgZmlsbGVkIHdpdGggYWRtaXJhdGlvbiBmb3IgdGhlIHNhZ2FjaXR5IG9mIEFnZXNpbGHDvHMsIGFuZCBwdXR0aW5nIGhpbXNlbGYgaW4gdGhlIGNlbnRyZSBvZiB0aGUgR3JlZWsgYXJyYXksIGNoYXJnZWQgZm9yd2FyZHMgYW5kIGVhc2lseSByb3V0ZWQgaGlzIG9wcG9uZW50cy4gQW5kIG5vdyB0aGF0IEFnZXNpbGHDvHMgaGFkIHdvbiBiYWNrIHRoZSBjb25maWRlbmNlIG9mIE5lY3RhbmFiaXMsIGhlIGJyb3VnaHQgdGhlIHNhbWUgc3RyYXRhZ2VtIHRvIGJlYXIgYWdhaW4gdXBvbiB0aGUgZW5lbXksIGxpa2UgYSB0cmljayBpbiB3cmVzdGxpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ5IHNvbWV0aW1lcyBwcmV0ZW5kaW5nIHRvIHJldHJlYXQgYW5kIGZseSwgYW5kIHNvbWV0aW1lcyBhdHRhY2tpbmcgdGhlbSBvbiB0aGUgZmxhbmtzLCBoZSBkcm92ZSB0aGVpciB3aG9sZSBtdWx0aXR1ZGUgaW50byBhIHRyYWN0IHdoaWNoIGhhZCBhIGRlZXAgY2FuYWwgZnVsbCBvZiB3YXRlciBvbiBlaXRoZXIgc2lkZS4gVGhlIHNwYWNlIGJldHdlZW4gdGhlc2UgaGUgb2NjdXBpZWQgYW5kIHN0b3BwZWQgdXAgd2l0aCB0aGUgaGVhZCBvZiBoaXMgY29sdW1uLCBhbmQgc28gbWFkZSBoaXMgbnVtYmVycyBlcXVhbCB0byB0aG9zZSBvZiB0aGUgZW5lbXkgd2hvIGNvdWxkIGZpZ2h0IHdpdGggaGltLCBzaW5jZSB0aGV5IHdlcmUgdW5hYmxlIHRvIHN1cnJvdW5kIGFuZCBlbmNsb3NlIGhpbS4gVGhlcmVmb3JlIGFmdGVyIGEgc2hvcnQgcmVzaXN0YW5jZSB0aGV5IHdlcmUgcm91dGVkOyBtYW55IHdlcmUgc2xhaW4sIGFuZCB0aGUgZnVnaXRpdmVzIHdlcmUgZGlzcGVyc2VkIGFuZCBtZWx0ZWQgYXdheS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBhY2NvdW50IG9mIHRoaXMgRWd5cHRpYW4gY2FtcGFpZ24gaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1LjkzIiB2YWxpZD0ieWVzIj5EaW9kb3J1cywgeHYuIDkzPC9iaWJsPiwgZGlmZmVycyBpbiBtYW55IGRldGFpbHMuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhlIEVneXB0aWFuIHN1Y2NlZWRlZCBpbiBlc3RhYmxpc2hpbmcgaGltc2VsZiBmaXJtbHkgYW5kIHNlY3VyZWx5IGluIHBvd2VyLCBhbmQgc2hvd2VkIGhpcyBmcmllbmRsaW5lc3MgYW5kIGFmZmVjdGlvbiBieSBiZWdnaW5nIEFnZXNpbGHDvHMgdG8gcmVtYWluIGFuZCBzcGVuZCB0aGUgd2ludGVyIHdpdGggaGltLiBCdXQgQWdlc2lsYcO8cyB3YXMgZWFnZXIgdG8gcmV0dXJuIHRvIHRoZSB3YXIgYXQgaG9tZSwga25vd2luZyB0aGF0IGhpcyBjaXR5IG5lZWRlZCBtb25leSBhbmQgd2FzIGhpcmluZyBtZXJjZW5hcmllcy4gSGUgd2FzIHRoZXJlZm9yZSBkaXNtaXNzZWQgd2l0aCBncmVhdCBob25vdXIgYW5kIGNlcmVtb255LCB0YWtpbmcgd2l0aCBoaW0sIGJlc2lkZXMgb3RoZXIgaG9ub3VycyBhbmQgZ2lmdHMsIHR3byBodW5kcmVkIGFuZCB0aGlydHkgdGFsZW50cyBvZiBzaWx2ZXIgZm9yIHRoZSB3YXIgYXQgaG9tZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNpbmNlIGl0IHdhcyBub3cgd2ludGVyLCBoZSBrZXB0IGNsb3NlIHRvIHNob3JlIHdpdGggaGlzIHNoaXBzLCBhbmQgd2FzIGJvcm5lIGFsb25nIHRoZSBjb2FzdCBvZiBMaWJ5YSB0byBhbiB1bmluaGFiaXRlZCBzcG90IGNhbGxlZCB0aGUgSGFyYm91ciBvZiBNZW5lbGHDvHMuIEhlcmUgaGUgZGllZCwgYXQgdGhlIGFnZSBvZiBlaWdodHktZm91ciB5ZWFycy4gSGUgaGFkIGJlZW4ga2luZyBvZiBTcGFydGEgZm9ydHktb25lIHllYXJzLCBhbmQgZm9yIG1vcmUgdGhhbiB0aGlydHkgb2YgdGhlc2UgaGUgd2FzIHRoZSBncmVhdGVzdCBhbmQgbW9zdCBpbmZsdWVudGlhbCBvZiBhbGwgSGVsbGVuZXMsIGhhdmluZyBiZWVuIGxvb2tlZCB1cG9uIGFzIGxlYWRlciBhbmQga2luZyBvZiBhbG1vc3QgYWxsIEhlbGxhcywgZG93biB0byB0aGUgYmF0dGxlIG9mIExldWN0cmEuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgU3BhcnRhbiBjdXN0b20sIHdoZW4gbWVuIG9mIG9yZGluYXJ5IHJhbmsgZGllZCBpbiBhIGZvcmVpZ24gY291bnRyeSwgdG8gZ2l2ZSB0aGVpciBib2RpZXMgZnVuZXJhbCByaXRlcyBhbmQgYnVyaWFsIHRoZXJlLCBidXQgdG8gY2FycnkgdGhlIGJvZGllcyBvZiB0aGVpciBraW5ncyBob21lLiBTbyB0aGUgU3BhcnRhbnMgd2hvIHdlcmUgd2l0aCBBZ2VzaWxhw7xzIGVuY2xvc2VkIGhpcyBkZWFkIGJvZHkgaW4gbWVsdGVkIHdheCwgc2luY2UgdGhleSBoYWQgbm8gaG9uZXksIGFuZCBjYXJyaWVkIGl0IGJhY2sgdG8gTGFjZWRhZW1vbi4gVGhlIGtpbmdkb20gZGV2b2x2ZWQgdXBvbiBBcmNoaWRhbXVzIGhpcyBzb24sIGFuZCByZW1haW5lZCBpbiBoaXMgZmFtaWx5IGRvd24gdG8gQWdpcywgd2hvIHdhcyBzbGFpbiBieSBMZW9uaWRhcwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjQwIEIuQy4gU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdpcyAxOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFnaXM8L3RpdGxlPiwgY2hhcHRlcnMgeGl4LjwvYmlibD4sIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2lzIDIwLjEiIHZhbGlkPSJ5ZXMiPnh4PC9iaWJsPi48L25vdGU+IGZvciBhdHRlbXB0aW5nIHRvIHJlc3RvcmUgdGhlIGFuY2llbnQgY29uc3RpdHV0aW9uLCBiZWluZyB0aGUgZmlmdGggaW4gZGVzY2VudCBmcm9tIEFnZXNpbGHDvHMuIAoJCQk8L3A+CiAgICAgIDwvYm9keT4KICAgPGhlYWQgY2xhc3M9InRyYW5zbGF0aW9uIj5BR0VTSUxBw5xTPC9oZWFkPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQXJjaGlkYW11cywgdGhlIHNvbiBvZiBaZXV4aWRhbWFzLCBhZnRlciBhbiBpbGx1c3RyaW91cyByZWlnbiBvdmVyIHRoZSBMYWNlZGFlbW9uaWFucywgbGVmdCBiZWhpbmQgaGltIGEgc29uLCBBZ2lzLCBieSBMYW1waWRvLCBhIHdvbWFuIG9mIGhvbm91cmFibGUgZmFtaWx5OyBhbmQgYSBtdWNoIHlvdW5nZXIgc29uLCBBZ2VzaWxhw7xzLCBieSBFdXBvbGlhLCB0aGUgZGF1Z2h0ZXIgb2YgTWVsZXNpcHBpZGFzLiBUaGUga2luZ2RvbSBiZWxvbmdlZCB0byBBZ2lzIGJ5IGxhdywgYW5kIGl0IHdhcyB0aG91Z2h0IHRoYXQgQWdlc2lsYcO8cyB3b3VsZCBwYXNzIGhpcyBsaWZlIGluIGEgcHJpdmF0ZSBzdGF0aW9uLiBIZSB3YXMgdGhlcmVmb3JlIGdpdmVuIHRoZSBzby1jYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFnb2dlLDwvcT4gb3IgY291cnNlIG9mIHB1YmxpYyB0cmFpbmluZyBpbiBTcGFydGEsIHdoaWNoLCBhbHRob3VnaCBhdXN0ZXJlIGluIGl0cyBtb2RlIG9mIGxpZmUgYW5kIGZ1bGwgb2YgaGFyZHNoaXBzLCBlZHVjYXRlZCB0aGUgeW91dGggdG8gb2JlZGllbmNlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBpdCB3YXMsIHdlIGFyZSB0b2xkLCB0aGF0IFNpbW9uaWRlcyBnYXZlIFNwYXJ0YSB0aGUgZXBpdGhldCBvZiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm1hbi1zdWJkdWluZyw8L3E+IHNpbmNlIG1vcmUgdGhhbiBpbiBhbnkgb3RoZXIgc3RhdGUgaGVyIGN1c3RvbXMgbWFkZSBoZXIgY2l0aXplbnMgb2JlZGllbnQgdG8gdGhlIGxhd3MgYW5kIHRyYWN0YWJsZSwgbGlrZSBob3JzZXMgdGhhdCBhcmUgYnJva2VuIGluIHdoaWxlIHlldCB0aGV5IGFyZSBjb2x0cy4gRnJvbSB0aGlzIGNvbXB1bHNvcnkgdHJhaW5pbmcgdGhlIGxhdyBleGVtcHRzIHRoZSBoZWlycy1hcHBhcmVudCB0byB0aGUgdGhyb25lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQWdlc2lsYcO8cyB3YXMgc2luZ3VsYXIgaW4gdGhpcyBhbHNvLCB0aGF0IGhlIGhhZCBiZWVuIGVkdWNhdGVkIHRvIG9iZXkgYmVmb3JlIGhlIGNhbWUgdG8gY29tbWFuZC4gRm9yIHRoaXMgcmVhc29uIGhlIHdhcyBtdWNoIG1vcmUgaW4gaGFybW9ueSB3aXRoIGhpcyBzdWJqZWN0cyB0aGFuIGFueSBvZiB0aGUga2luZ3M7IHRvIHRoZSBjb21tYW5kaW5nIGFuZCBraW5nbHkgdHJhaXRzIHdoaWNoIHdlcmUgaGlzIGJ5IG5hdHVyZSB0aGVyZSBoYWQgYmVlbiBhZGRlZCBieSBoaXMgcHVibGljIHRyYWluaW5nIHRob3NlIG9mIHBvcHVsYXJpdHkgYW5kIGtpbmRsaW5lc3MuIAoJCQk8L3A+CiAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUFyY2hpZGFtdXMsIHRoZSBzb24gb2YgWmV1eGlkYW1hcywgYWZ0ZXIgYW4gaWxsdXN0cmlvdXMgcmVpZ24gb3ZlciB0aGUgTGFjZWRhZW1vbmlhbnMsIGxlZnQgYmVoaW5kIGhpbSBhIHNvbiwgQWdpcywgYnkgTGFtcGlkbywgYSB3b21hbiBvZiBob25vdXJhYmxlIGZhbWlseTsgYW5kIGEgbXVjaCB5b3VuZ2VyIHNvbiwgQWdlc2lsYcO8cywgYnkgRXVwb2xpYSwgdGhlIGRhdWdodGVyIG9mIE1lbGVzaXBwaWRhcy4gVGhlIGtpbmdkb20gYmVsb25nZWQgdG8gQWdpcyBieSBsYXcsIGFuZCBpdCB3YXMgdGhvdWdodCB0aGF0IEFnZXNpbGHDvHMgd291bGQgcGFzcyBoaXMgbGlmZSBpbiBhIHByaXZhdGUgc3RhdGlvbi4gSGUgd2FzIHRoZXJlZm9yZSBnaXZlbiB0aGUgc28tY2FsbGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hZ29nZSw8L3E+IG9yIGNvdXJzZSBvZiBwdWJsaWMgdHJhaW5pbmcgaW4gU3BhcnRhLCB3aGljaCwgYWx0aG91Z2ggYXVzdGVyZSBpbiBpdHMgbW9kZSBvZiBsaWZlIGFuZCBmdWxsIG9mIGhhcmRzaGlwcywgZWR1Y2F0ZWQgdGhlIHlvdXRoIHRvIG9iZWRpZW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBpdCB3YXMsIHdlIGFyZSB0b2xkLCB0aGF0IFNpbW9uaWRlcyBnYXZlIFNwYXJ0YSB0aGUgZXBpdGhldCBvZiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bWFuLXN1YmR1aW5nLDwvcT4gc2luY2UgbW9yZSB0aGFuIGluIGFueSBvdGhlciBzdGF0ZSBoZXIgY3VzdG9tcyBtYWRlIGhlciBjaXRpemVucyBvYmVkaWVudCB0byB0aGUgbGF3cyBhbmQgdHJhY3RhYmxlLCBsaWtlIGhvcnNlcyB0aGF0IGFyZSBicm9rZW4gaW4gd2hpbGUgeWV0IHRoZXkgYXJlIGNvbHRzLiBGcm9tIHRoaXMgY29tcHVsc29yeSB0cmFpbmluZyB0aGUgbGF3IGV4ZW1wdHMgdGhlIGhlaXJzLWFwcGFyZW50IHRvIHRoZSB0aHJvbmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZ2VzaWxhw7xzIHdhcyBzaW5ndWxhciBpbiB0aGlzIGFsc28sIHRoYXQgaGUgaGFkIGJlZW4gZWR1Y2F0ZWQgdG8gb2JleSBiZWZvcmUgaGUgY2FtZSB0byBjb21tYW5kLiBGb3IgdGhpcyByZWFzb24gaGUgd2FzIG11Y2ggbW9yZSBpbiBoYXJtb255IHdpdGggaGlzIHN1YmplY3RzIHRoYW4gYW55IG9mIHRoZSBraW5nczsgdG8gdGhlIGNvbW1hbmRpbmcgYW5kIGtpbmdseSB0cmFpdHMgd2hpY2ggd2VyZSBoaXMgYnkgbmF0dXJlIHRoZXJlIGhhZCBiZWVuIGFkZGVkIGJ5IGhpcyBwdWJsaWMgdHJhaW5pbmcgdGhvc2Ugb2YgcG9wdWxhcml0eSBhbmQga2luZGxpbmVzcy4gCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgaGUgd2FzIGFtb25nIHRoZSBzby1jYWxsZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5iYW5kczwvcT4gb2YgYm95cyB3aG8gd2VyZSByZWFyZWQgdG9nZXRoZXIsIGhlIGhhZCBhcyBoaXMgbG92ZXIgTHlzYW5kZXIKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxNy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5Y3VyZ3VzPC90aXRsZT4sIHh2aWkuIDE8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHlzLiAyMi4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5c2FuZGVyPC90aXRsZT4sIHh4aWkuIDM8L2JpYmw+Ljwvbm90ZT4sIHdobyB3YXMgc21pdHRlbiBwYXJ0aWN1bGFybHkgd2l0aCBoaXMgbmF0aXZlIGRlY29ydW0uIEZvciBhbHRob3VnaCBoZSB3YXMgY29udGVudGlvdXMgYW5kIGhpZ2gtc3Bpcml0ZWQgYmV5b25kIGhpcyBmZWxsb3dzLCB3aXNoaW5nIHRvIGJlIGZpcnN0IGluIGFsbCB0aGluZ3MsIGFuZCBoYXZpbmcgYSB2ZWhlbWVuY2UgYW5kIGZ1cnkgd2hpY2ggbm9uZSBjb3VsZCBjb250ZW5kIHdpdGggb3Igb3ZlcndoZWxtLCBvbiB0aGUgb3RoZXIgaGFuZCBoZSBoYWQgc3VjaCBhIHJlYWRpbmVzcyB0byBvYmV5IGFuZCBzdWNoIGdlbnRsZW5lc3MsIHRoYXQgaGUgZGlkIHdoYXRldmVyIHdhcyBlbmpvaW5lZCB1cG9uIGhpbSwgbm90IGF0IGFsbCBmcm9tIGEgc2Vuc2Ugb2YgZmVhciwgYnV0IGFsd2F5cyBmcm9tIGEgc2Vuc2Ugb2YgaG9ub3VyLCBhbmQgd2FzIG1vcmUgZGlzdHJlc3NlZCBieSBjZW5zdXJlIHRoYW4gaGUgd2FzIG9wcHJlc3NlZCBieSBoYXJkc2hpcHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBoaXMgZGVmb3JtaXR5LCB0aGUgYmVhdXR5IG9mIGhpcyBwZXJzb24gaW4gaXRzIHlvdXRoZnVsIHByaW1lIGNvdmVyZWQgdGhpcyBmcm9tIHNpZ2h0LCB3aGlsZSB0aGUgZWFzZSBhbmQgZ2FpZXR5IHdpdGggd2hpY2ggaGUgYm9yZSBzdWNoIGEgbWlzZm9ydHVuZSwgYmVpbmcgZmlyc3QgdG8gamVzdCBhbmQgam9rZSBhYm91dCBoaW1zZWxmLCB3ZW50IGZhciB0b3dhcmRzIHJlY3RpZnlpbmcgaXQuIEluZGVlZCwgaGlzIGxhbWVuZXNzIGJyb3VnaHQgaGlzIGFtYml0aW9uIGludG8gY2xlYXJlciBsaWdodCwgc2luY2UgaXQgbGVkIGhpbSB0byBkZWNsaW5lIG5vIGhhcmRzaGlwIGFuZCBubyBlbnRlcnByaXNlIHdoYXRldmVyLiBXZSBoYXZlIG5vIGxpa2VuZXNzIG9mIGhpbSAoZm9yIGhlIGhpbXNlbGYgd291bGQgbm90IGNvbnNlbnQgdG8gb25lLCBhbmQgZXZlbiB3aGVuIGhlIGxheSBkeWluZyBmb3JiYWRlIHRoZSBtYWtpbmcgb2YgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5laXRoZXIgc3RhdHVlIG9yIHBpY3R1cmU8L3E+IG9mIGhpcyBwZXJzb24pLCBidXQgaGUgaXMgc2FpZCB0byBoYXZlIGJlZW4gYSBsaXR0bGUgbWFuIG9mIHVuaW1wb3NpbmcgcHJlc2VuY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaGlzIGdhaWV0eSBhbmQgZ29vZCBzcGlyaXRzIGluIGV2ZXJ5IGNyaXNpcywgYW5kIGhpcyByYWlsbGVyeSwgd2hpY2ggd2FzIG5ldmVyIG9mZmVuc2l2ZSBvciBoYXJzaCBlaXRoZXIgaW4gd29yZCBvciBsb29rLCBtYWRlIGhpbSBtb3JlIGxvdmFibGUsIGRvd24gdG8gaGlzIG9sZCBhZ2UsIHRoYW4gdGhlIHlvdW5nIGFuZCBiZWF1dGlmdWwuIEJ1dCBhY2NvcmRpbmcgdG8gVGhlb3BocmFzdHVzLCBBcmNoaWRhbXVzIHdhcyBmaW5lZCBieSB0aGUgZXBob3JzIGZvciBtYXJyeWluZyBhIGxpdHRsZSB3b21hbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3Igc2hlIHdpbGwgYmVhciB1cyw8L3E+IHRoZXkgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ub3Qga2luZ3MsIGJ1dCBraW5nbGV0cy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBoZSB3YXMgYW1vbmcgdGhlIHNvLWNhbGxlZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YmFuZHM8L3E+IG9mIGJveXMgd2hvIHdlcmUgcmVhcmVkIHRvZ2V0aGVyLCBoZSBoYWQgYXMgaGlzIGxvdmVyIEx5c2FuZGVyCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeWN1cmd1czwvdGl0bGU+LCB4dmlpLiAxPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHlzLiAyMi4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THlzYW5kZXI8L3RpdGxlPiwgeHhpaS4gMzwvYmlibD4uPC9ub3RlPiwgd2hvIHdhcyBzbWl0dGVuIHBhcnRpY3VsYXJseSB3aXRoIGhpcyBuYXRpdmUgZGVjb3J1bS4gRm9yIGFsdGhvdWdoIGhlIHdhcyBjb250ZW50aW91cyBhbmQgaGlnaC1zcGlyaXRlZCBiZXlvbmQgaGlzIGZlbGxvd3MsIHdpc2hpbmcgdG8gYmUgZmlyc3QgaW4gYWxsIHRoaW5ncywgYW5kIGhhdmluZyBhIHZlaGVtZW5jZSBhbmQgZnVyeSB3aGljaCBub25lIGNvdWxkIGNvbnRlbmQgd2l0aCBvciBvdmVyd2hlbG0sIG9uIHRoZSBvdGhlciBoYW5kIGhlIGhhZCBzdWNoIGEgcmVhZGluZXNzIHRvIG9iZXkgYW5kIHN1Y2ggZ2VudGxlbmVzcywgdGhhdCBoZSBkaWQgd2hhdGV2ZXIgd2FzIGVuam9pbmVkIHVwb24gaGltLCBub3QgYXQgYWxsIGZyb20gYSBzZW5zZSBvZiBmZWFyLCBidXQgYWx3YXlzIGZyb20gYSBzZW5zZSBvZiBob25vdXIsIGFuZCB3YXMgbW9yZSBkaXN0cmVzc2VkIGJ5IGNlbnN1cmUgdGhhbiBoZSB3YXMgb3BwcmVzc2VkIGJ5IGhhcmRzaGlwcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeWN1cmd1czwvdGl0bGU+LCB4dmlpLiAxPC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgeHZpaS4gMTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5cy4gMjIuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5c2FuZGVyPC90aXRsZT4sIHh4aWkuIDM8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5c2FuZGVyPC90aXRsZT4sIHh4aWkuIDM8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBoaXMgZGVmb3JtaXR5LCB0aGUgYmVhdXR5IG9mIGhpcyBwZXJzb24gaW4gaXRzIHlvdXRoZnVsIHByaW1lIGNvdmVyZWQgdGhpcyBmcm9tIHNpZ2h0LCB3aGlsZSB0aGUgZWFzZSBhbmQgZ2FpZXR5IHdpdGggd2hpY2ggaGUgYm9yZSBzdWNoIGEgbWlzZm9ydHVuZSwgYmVpbmcgZmlyc3QgdG8gamVzdCBhbmQgam9rZSBhYm91dCBoaW1zZWxmLCB3ZW50IGZhciB0b3dhcmRzIHJlY3RpZnlpbmcgaXQuIEluZGVlZCwgaGlzIGxhbWVuZXNzIGJyb3VnaHQgaGlzIGFtYml0aW9uIGludG8gY2xlYXJlciBsaWdodCwgc2luY2UgaXQgbGVkIGhpbSB0byBkZWNsaW5lIG5vIGhhcmRzaGlwIGFuZCBubyBlbnRlcnByaXNlIHdoYXRldmVyLiBXZSBoYXZlIG5vIGxpa2VuZXNzIG9mIGhpbSAoZm9yIGhlIGhpbXNlbGYgd291bGQgbm90IGNvbnNlbnQgdG8gb25lLCBhbmQgZXZlbiB3aGVuIGhlIGxheSBkeWluZyBmb3JiYWRlIHRoZSBtYWtpbmcgb2YgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmVpdGhlciBzdGF0dWUgb3IgcGljdHVyZTwvcT4gb2YgaGlzIHBlcnNvbiksIGJ1dCBoZSBpcyBzYWlkIHRvIGhhdmUgYmVlbiBhIGxpdHRsZSBtYW4gb2YgdW5pbXBvc2luZyBwcmVzZW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaGlzIGdhaWV0eSBhbmQgZ29vZCBzcGlyaXRzIGluIGV2ZXJ5IGNyaXNpcywgYW5kIGhpcyByYWlsbGVyeSwgd2hpY2ggd2FzIG5ldmVyIG9mZmVuc2l2ZSBvciBoYXJzaCBlaXRoZXIgaW4gd29yZCBvciBsb29rLCBtYWRlIGhpbSBtb3JlIGxvdmFibGUsIGRvd24gdG8gaGlzIG9sZCBhZ2UsIHRoYW4gdGhlIHlvdW5nIGFuZCBiZWF1dGlmdWwuIEJ1dCBhY2NvcmRpbmcgdG8gVGhlb3BocmFzdHVzLCBBcmNoaWRhbXVzIHdhcyBmaW5lZCBieSB0aGUgZXBob3JzIGZvciBtYXJyeWluZyBhIGxpdHRsZSB3b21hbiwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciBzaGUgd2lsbCBiZWFyIHVzLDwvcT4gdGhleSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bm90IGtpbmdzLCBidXQga2luZ2xldHMuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBkdXJpbmcgdGhlIHJlaWduIG9mIEFnaXMgdGhhdCBBbGNpYmlhZGVzIGNhbWUgZnJvbSBTaWNpbHkgYXMgYW4gZXhpbGUgdG8gU3BhcnRhLCBhbmQgaGUgaGFkIG5vdCBiZWVuIGxvbmcgaW4gdGhlIGNpdHkgd2hlbiBoZSBpbmN1cnJlZCB0aGUgY2hhcmdlIG9mIGlsbGljaXQgaW50ZXJjb3Vyc2Ugd2l0aCBUaW1hZWEsIHRoZSB3aWZlIG9mIHRoZSBraW5nLiBUaGUgY2hpbGQsIHRvbywgdGhhdCB3YXMgYm9ybiBvZiBoZXIsIEFnaXMgcmVmdXNlZCB0byByZWNvZ25pemUgYXMgaGlzIG93biwgZGVjbGFyaW5nIHRoYXQgQWxjaWJpYWRlcyB3YXMgaXRzIGZhdGhlci4gRHVyaXMgc2F5cyB0aGF0IFRpbWFlYSB3YXMgbm90IHZlcnkgbXVjaCBkaXN0dXJiZWQgYXQgdGhpcywgYnV0IGluIHdoaXNwZXJzIHRvIGhlciBIZWxvdCBtYWlkcyBhdCBob21lIGFjdHVhbGx5IGNhbGxlZCB0aGUgY2hpbGQgQWxjaWJpYWRlcywgbm90IExlb3R5Y2hpZGVzOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5tb3Jlb3ZlciB0aGF0IEFsY2liaWFkZXMgaGltc2VsZiBhbHNvIGRlY2xhcmVkIHRoYXQgaGUgaGFkIG5vdCBhcHByb2FjaGVkIFRpbWFlYSBvdXQgb2Ygd2FudG9uIHBhc3Npb24sIGJ1dCBiZWNhdXNlIGhlIHdhcyBhbWJpdGlvdXMgdG8gaGF2ZSB0aGUgU3BhcnRhbnMgcmVpZ25lZCBvdmVyIGJ5IGhpcyBkZXNjZW5kYW50cy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAyMy43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFsY2liaWFkZXM8L3RpdGxlPiwgeHhpaWkuIDcgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gT24gdGhpcyBhY2NvdW50IEFsY2liaWFkZXMgd2l0aGRyZXcgZnJvbSBTcGFydGEsIGJlaW5nIGluIGZlYXIgb2YgQWdpczsgYW5kIHRoZSBib3kgd2FzIGFsd2F5cyBhbiBvYmplY3Qgb2Ygc3VzcGljaW9uIHRvIEFnaXMsIGFuZCB3YXMgbm90IGhvbm91cmVkIGJ5IGhpbSBhcyBsZWdpdGltYXRlLiBCdXQgd2hlbiB0aGUga2luZyBsYXkgc2ljaywgdGhlIHN1cHBsaWNhdGlvbnMgYW5kIHRlYXJzIG9mIExlb3R5Y2hpZGVzIHByZXZhaWxlZCB1cG9uIGhpbSB0byBkZWNsYXJlIGhpbSBoaXMgc29uIGluIHRoZSBwcmVzZW5jZSBvZiBtYW55IHdpdG5lc3Nlcy4gCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgZHVyaW5nIHRoZSByZWlnbiBvZiBBZ2lzIHRoYXQgQWxjaWJpYWRlcyBjYW1lIGZyb20gU2ljaWx5IGFzIGFuIGV4aWxlIHRvIFNwYXJ0YSwgYW5kIGhlIGhhZCBub3QgYmVlbiBsb25nIGluIHRoZSBjaXR5IHdoZW4gaGUgaW5jdXJyZWQgdGhlIGNoYXJnZSBvZiBpbGxpY2l0IGludGVyY291cnNlIHdpdGggVGltYWVhLCB0aGUgd2lmZSBvZiB0aGUga2luZy4gVGhlIGNoaWxkLCB0b28sIHRoYXQgd2FzIGJvcm4gb2YgaGVyLCBBZ2lzIHJlZnVzZWQgdG8gcmVjb2duaXplIGFzIGhpcyBvd24sIGRlY2xhcmluZyB0aGF0IEFsY2liaWFkZXMgd2FzIGl0cyBmYXRoZXIuIER1cmlzIHNheXMgdGhhdCBUaW1hZWEgd2FzIG5vdCB2ZXJ5IG11Y2ggZGlzdHVyYmVkIGF0IHRoaXMsIGJ1dCBpbiB3aGlzcGVycyB0byBoZXIgSGVsb3QgbWFpZHMgYXQgaG9tZSBhY3R1YWxseSBjYWxsZWQgdGhlIGNoaWxkIEFsY2liaWFkZXMsIG5vdCBMZW90eWNoaWRlczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm1vcmVvdmVyIHRoYXQgQWxjaWJpYWRlcyBoaW1zZWxmIGFsc28gZGVjbGFyZWQgdGhhdCBoZSBoYWQgbm90IGFwcHJvYWNoZWQgVGltYWVhIG91dCBvZiB3YW50b24gcGFzc2lvbiwgYnV0IGJlY2F1c2UgaGUgd2FzIGFtYml0aW91cyB0byBoYXZlIHRoZSBTcGFydGFucyByZWlnbmVkIG92ZXIgYnkgaGlzIGRlc2NlbmRhbnRzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAyMy43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxjaWJpYWRlczwvdGl0bGU+LCB4eGlpaS4gNyBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBPbiB0aGlzIGFjY291bnQgQWxjaWJpYWRlcyB3aXRoZHJldyBmcm9tIFNwYXJ0YSwgYmVpbmcgaW4gZmVhciBvZiBBZ2lzOyBhbmQgdGhlIGJveSB3YXMgYWx3YXlzIGFuIG9iamVjdCBvZiBzdXNwaWNpb24gdG8gQWdpcywgYW5kIHdhcyBub3QgaG9ub3VyZWQgYnkgaGltIGFzIGxlZ2l0aW1hdGUuIEJ1dCB3aGVuIHRoZSBraW5nIGxheSBzaWNrLCB0aGUgc3VwcGxpY2F0aW9ucyBhbmQgdGVhcnMgb2YgTGVvdHljaGlkZXMgcHJldmFpbGVkIHVwb24gaGltIHRvIGRlY2xhcmUgaGltIGhpcyBzb24gaW4gdGhlIHByZXNlbmNlIG9mIG1hbnkgd2l0bmVzc2VzLiAKCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAyMy43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxjaWJpYWRlczwvdGl0bGU+LCB4eGlpaS4gNyBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxjaWJpYWRlczwvdGl0bGU+LCB4eGlpaS4gNyBmLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdHdpdGhzdGFuZGluZyB0aGlzLCBhZnRlciB0aGUgZGVhdGggb2YgQWdpcwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzk4IEIuQy48L25vdGU+LCBMeXNhbmRlciwgd2hvIGJ5IHRoaXMgdGltZSBoYWQgc3ViZHVlZCB0aGUgQXRoZW5pYW5zIGF0IHNlYSBhbmQgd2FzIGEgbWFuIG9mIHRoZSBncmVhdGVzdCBpbmZsdWVuY2UgaW4gU3BhcnRhLCB0cmllZCB0byBhZHZhbmNlIEFnZXNpbGHDvHMgdG8gdGhlIHRocm9uZSwgb24gdGhlIHBsZWEgdGhhdCBMZW90eWNoaWRlcyB3YXMgYSBiYXN0YXJkIGFuZCBoYWQgbm8gY2xhaW0gdXBvbiBpdC4gTWFueSBvZiB0aGUgb3RoZXIgY2l0aXplbnMgYWxzbywgb3dpbmcgdG8gdGhlIGV4Y2VsbGVuY2Ugb2YgQWdlc2lsYcO8cyBhbmQgdGhlIGZhY3QgdGhhdCBoZSBoYWQgYmVlbiByZWFyZWQgd2l0aCB0aGVtIHVuZGVyIHRoZSBjb21tb24gcmVzdHJhaW50cyBvZiB0aGUgcHVibGljIHRyYWluaW5nLCB3YXJtbHkgZXNwb3VzZWQgdGhlIHBsYW4gb2YgTHlzYW5kZXIgYW5kIGNvLW9wZXJhdGVkIHdpdGggaGltLiBCdXQgdGhlcmUgd2FzIGEgZGl2aW5lciBpbiBTcGFydGEsIG5hbWVkIERpb3BlaXRoZXMsIHdobyB3YXMgd2VsbCBzdXBwbGllZCB3aXRoIGFuY2llbnQgcHJvcGhlY2llcywgYW5kIHdhcyB0aG91Z2h0IHRvIGJlIGVtaW5lbnRseSB3aXNlIGluIHJlbGlnaW91cyBtYXR0ZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1hbiBkZWNsYXJlZCBpdCBjb250cmFyeSB0byB0aGUgd2lsbCBvZiBIZWF2ZW4gdGhhdCBhIGxhbWUgbWFuIHNob3VsZCBiZSBraW5nIG9mIFNwYXJ0YSwgYW5kIGNpdGVkIGF0IHRoZSB0cmlhbCBvZiB0aGUgY2FzZSB0aGUgZm9sbG93aW5nIG9yYWNsZTrigJQgCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIC8+CgkJCQkJICAgICAgICAgIDxsPkJldGhpbmsgdGhlZSBub3csIE8gU3BhcnRhLCB0aG91Z2ggdGhvdSBhcnQgdmVyeSBnbG9yaW91cywgbGVzdCBmcm9tIHRoZWUsIHNvdW5kIG9mIGZvb3QsIHRoZXJlIHNwcmluZyBhIG1haW1lZCByb3lhbHR5OyBmb3IgbG9uZyB3aWxsIHVuZXhwZWN0ZWQgdG9pbHMgb3BwcmVzcyB0aGVlLCBhbmQgb253YXJkLXJvbGxpbmcgYmlsbG93cyBvZiBtYW4tZGVzdHJveWluZyB3YXIuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgTHlzYW5kZXIgYW5zd2VyZWQgdGhhdCwgaW4gY2FzZSB0aGUgU3BhcnRhbnMgc3Rvb2QgaW4gZ3JlYXQgZmVhciBvZiB0aGUgb3JhY2xlLCB0aGV5IG11c3QgYmUgb24gdGhlaXIgZ3VhcmQgYWdhaW5zdCBMZW90eWNoaWRlczsgZm9yIGl0IG1hdHRlcmVkIG5vdCB0byB0aGUgZ29kIHRoYXQgb25lIHdobyBoYWx0ZWQgaW4gaGlzIGdhaXQgc2hvdWxkIGJlIGtpbmcsIGJ1dCBpZiBvbmUgd2hvIHdhcyBub3QgbGF3ZnVsbHkgYmVnb3R0ZW4sIG5vciBldmVuIGEgZGVzY2VuZGFudCBvZiBIZXJhY2xlcywgc2hvdWxkIGJlIGtpbmcsIHRoaXMgd2FzIHdoYXQgdGhlIGdvZCBtZWFudCBieSB0aGUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5tYWltZWQgcm95YWx0eS48L3E+IEFuZCBBZ2VzaWxhw7xzIGRlY2xhcmVkIHRoYXQgUG9zZWlkb24gYWxzbyBoYWQgYm9ybmUgd2l0bmVzcyB0byB0aGUgYmFzdGFyZHkgb2YgTGVvdHljaGlkZXMsIGZvciBoZSBoYWQgY2FzdCBBZ2lzIGZvcnRoIGZyb20gaGlzIGJlZC1jaGFtYmVyIGJ5IGFuIGVhcnRocXVha2UsIGFuZCBhZnRlciB0aGlzIG1vcmUgdGhhbiB0ZW4gbW9udGhzIGVsYXBzZWQgYmVmb3JlIExlb3R5Y2hpZGVzIHdhcyBib3JuLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDIzLjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWxjaWJpYWRlczwvdGl0bGU+LCB4eGlpaS4gODwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDIyLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THlzYW5kZXI8L3RpdGxlPiwgeHhpaS4gMyBmZi48L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjMuMiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsZW5pY2E8L3RpdGxlPiwgaWlpLiAzLCAyPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdHdpdGhzdGFuZGluZyB0aGlzLCBhZnRlciB0aGUgZGVhdGggb2YgQWdpcwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzOTggQi5DLjwvbm90ZT4sIEx5c2FuZGVyLCB3aG8gYnkgdGhpcyB0aW1lIGhhZCBzdWJkdWVkIHRoZSBBdGhlbmlhbnMgYXQgc2VhIGFuZCB3YXMgYSBtYW4gb2YgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSBpbiBTcGFydGEsIHRyaWVkIHRvIGFkdmFuY2UgQWdlc2lsYcO8cyB0byB0aGUgdGhyb25lLCBvbiB0aGUgcGxlYSB0aGF0IExlb3R5Y2hpZGVzIHdhcyBhIGJhc3RhcmQgYW5kIGhhZCBubyBjbGFpbSB1cG9uIGl0LiBNYW55IG9mIHRoZSBvdGhlciBjaXRpemVucyBhbHNvLCBvd2luZyB0byB0aGUgZXhjZWxsZW5jZSBvZiBBZ2VzaWxhw7xzIGFuZCB0aGUgZmFjdCB0aGF0IGhlIGhhZCBiZWVuIHJlYXJlZCB3aXRoIHRoZW0gdW5kZXIgdGhlIGNvbW1vbiByZXN0cmFpbnRzIG9mIHRoZSBwdWJsaWMgdHJhaW5pbmcsIHdhcm1seSBlc3BvdXNlZCB0aGUgcGxhbiBvZiBMeXNhbmRlciBhbmQgY28tb3BlcmF0ZWQgd2l0aCBoaW0uIEJ1dCB0aGVyZSB3YXMgYSBkaXZpbmVyIGluIFNwYXJ0YSwgbmFtZWQgRGlvcGVpdGhlcywgd2hvIHdhcyB3ZWxsIHN1cHBsaWVkIHdpdGggYW5jaWVudCBwcm9waGVjaWVzLCBhbmQgd2FzIHRob3VnaHQgdG8gYmUgZW1pbmVudGx5IHdpc2UgaW4gcmVsaWdpb3VzIG1hdHRlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuIGRlY2xhcmVkIGl0IGNvbnRyYXJ5IHRvIHRoZSB3aWxsIG9mIEhlYXZlbiB0aGF0IGEgbGFtZSBtYW4gc2hvdWxkIGJlIGtpbmcgb2YgU3BhcnRhLCBhbmQgY2l0ZWQgYXQgdGhlIHRyaWFsIG9mIHRoZSBjYXNlIHRoZSBmb2xsb3dpbmcgb3JhY2xlOuKAlCAKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iIC8+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmV0aGluayB0aGVlIG5vdywgTyBTcGFydGEsIHRob3VnaCB0aG91IGFydCB2ZXJ5IGdsb3Jpb3VzLCBsZXN0IGZyb20gdGhlZSwgc291bmQgb2YgZm9vdCwgdGhlcmUgc3ByaW5nIGEgbWFpbWVkIHJveWFsdHk7IGZvciBsb25nIHdpbGwgdW5leHBlY3RlZCB0b2lscyBvcHByZXNzIHRoZWUsIGFuZCBvbndhcmQtcm9sbGluZyBiaWxsb3dzIG9mIG1hbi1kZXN0cm95aW5nIHdhci48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+IAoJCQkJICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iIC8+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmV0aGluayB0aGVlIG5vdywgTyBTcGFydGEsIHRob3VnaCB0aG91IGFydCB2ZXJ5IGdsb3Jpb3VzLCBsZXN0IGZyb20gdGhlZSwgc291bmQgb2YgZm9vdCwgdGhlcmUgc3ByaW5nIGEgbWFpbWVkIHJveWFsdHk7IGZvciBsb25nIHdpbGwgdW5leHBlY3RlZCB0b2lscyBvcHByZXNzIHRoZWUsIGFuZCBvbndhcmQtcm9sbGluZyBiaWxsb3dzIG9mIG1hbi1kZXN0cm95aW5nIHdhci48L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgTHlzYW5kZXIgYW5zd2VyZWQgdGhhdCwgaW4gY2FzZSB0aGUgU3BhcnRhbnMgc3Rvb2QgaW4gZ3JlYXQgZmVhciBvZiB0aGUgb3JhY2xlLCB0aGV5IG11c3QgYmUgb24gdGhlaXIgZ3VhcmQgYWdhaW5zdCBMZW90eWNoaWRlczsgZm9yIGl0IG1hdHRlcmVkIG5vdCB0byB0aGUgZ29kIHRoYXQgb25lIHdobyBoYWx0ZWQgaW4gaGlzIGdhaXQgc2hvdWxkIGJlIGtpbmcsIGJ1dCBpZiBvbmUgd2hvIHdhcyBub3QgbGF3ZnVsbHkgYmVnb3R0ZW4sIG5vciBldmVuIGEgZGVzY2VuZGFudCBvZiBIZXJhY2xlcywgc2hvdWxkIGJlIGtpbmcsIHRoaXMgd2FzIHdoYXQgdGhlIGdvZCBtZWFudCBieSB0aGUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPm1haW1lZCByb3lhbHR5LjwvcT4gQW5kIEFnZXNpbGHDvHMgZGVjbGFyZWQgdGhhdCBQb3NlaWRvbiBhbHNvIGhhZCBib3JuZSB3aXRuZXNzIHRvIHRoZSBiYXN0YXJkeSBvZiBMZW90eWNoaWRlcywgZm9yIGhlIGhhZCBjYXN0IEFnaXMgZm9ydGggZnJvbSBoaXMgYmVkLWNoYW1iZXIgYnkgYW4gZWFydGhxdWFrZSwgYW5kIGFmdGVyIHRoaXMgbW9yZSB0aGFuIHRlbiBtb250aHMgZWxhcHNlZCBiZWZvcmUgTGVvdHljaGlkZXMgd2FzIGJvcm4uCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDIzLjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGNpYmlhZGVzPC90aXRsZT4sIHh4aWlpLiA4PC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHlzLiAyMi4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THlzYW5kZXI8L3RpdGxlPiwgeHhpaS4gMyBmZi48L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuMy4yIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbGVuaWNhPC90aXRsZT4sIGlpaS4gMywgMjwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDIzLjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGNpYmlhZGVzPC90aXRsZT4sIHh4aWlpLiA4PC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxjaWJpYWRlczwvdGl0bGU+LCB4eGlpaS4gODxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5cy4gMjIuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5c2FuZGVyPC90aXRsZT4sIHh4aWkuIDMgZmYuPC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THlzYW5kZXI8L3RpdGxlPiwgeHhpaS4gMyBmZi48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuMy4yIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbGVuaWNhPC90aXRsZT4sIGlpaS4gMywgMjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbGVuaWNhPC90aXRsZT4sIGlpaS4gMywgMjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyB3YXksIGFuZCBmb3IgdGhlc2UgcmVhc29ucywgQWdlc2lsYcO8cyB3YXMgYXBwb2ludGVkIGtpbmcsIGFuZCBzdHJhaWdodHdheSBlbmpveWVkIHBvc3Nlc3Npb24gb2YgdGhlIGVzdGF0ZXMgb2YgQWdpcyBhcyB3ZWxsIGFzIGhpcyB0aHJvbmUsIGFmdGVyIGV4cGVsbGluZyBMZW90eWNoaWRlcyBhcyBhIGJhc3RhcmQuIEJ1dCBzZWVpbmcgdGhhdCBoaXMga2luc21lbiBvbiBoaXMgbW90aGVyJ3Mgc2lkZSwgdGhvdWdoIHdvcnRoeSBmb2xrLCB3ZXJlIGV4Y2Vzc2l2ZWx5IHBvb3IsIGhlIGRpc3RyaWJ1dGVkIGFtb25nIHRoZW0gdGhlIGhhbGYgb2YgaGlzIGVzdGF0ZXMsIHRoZXJlYnkgbWFraW5nIGhpcyBpbmhlcml0YW5jZSB5aWVsZCBoaW0gZ29vZC13aWxsIGFuZCByZXB1dGF0aW9uIGluc3RlYWQgb2YgZW52eSBhbmQgaGF0cmVkLiBBcyBmb3IgWGVub3Bob24ncyBzdGF0ZW1lbnQKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiA2LjQiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uJ3MgPHRpdGxlPkFnZXNpbGHDvHM8L3RpdGxlPiwgdmkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoYXQgYnkgb2JleWluZyBoaXMgY291bnRyeSBpbiBldmVyeXRoaW5nIGhlIHdvbiB2ZXJ5IGdyZWF0IHBvd2VyLCBzbyB0aGF0IGhlIGRpZCB3aGF0IGhlIHBsZWFzZWQsIHRoZSBjYXNlIGlzIGFzIGZvbGxvd3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoYXQgdGltZSB0aGUgZXBob3JzIGFuZCB0aGUgc2VuYXRvcnMgaGFkIHRoZSBncmVhdGVzdCBwb3dlciBpbiB0aGUgc3RhdGUsIG9mIHdob20gdGhlIGZvcm1lciBob2xkIG9mZmljZSBmb3IgYSB5ZWFyIG9ubHksIHdoaWxlIHRoZSBzZW5hdG9ycyBlbmpveSB0aGVpciBkaWduaXR5IGZvciBsaWZlLCB0aGVpciBvZmZpY2VzIGhhdmluZyBiZWVuIGluc3RpdHV0ZWQgdG8gcmVzdHJhaW4gdGhlIHBvd2VyIG9mIHRoZSBraW5ncywgYXMgSSBoYXZlIHNhaWQgaW4gbXkgTGlmZSBvZiBMeWN1cmd1cy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiA1LjYiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXJzIHYuIDYgZi48L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiA3LjEiIHZhbGlkPSJ5ZXMiPnZpaS4gMSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGVyZWZvcmUgZnJvbSB0aGUgb3V0c2V0LCBhbmQgZnJvbSBnZW5lcmF0aW9uIHRvIGdlbmVyYXRpb24sIHRoZSBraW5ncyB3ZXJlIHRyYWRpdGlvbmFsbHkgYXQgZmV1ZCBhbmQgdmFyaWFuY2Ugd2l0aCB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQWdlc2lsYcO8cyB0b29rIHRoZSBvcHBvc2l0ZSBjb3Vyc2UuIEluc3RlYWQgb2YgY29sbGlkaW5nIGFuZCBmaWdodGluZyB3aXRoIHRoZW0sIGhlIGNvdXJ0ZWQgdGhlaXIgZmF2b3VyLCB3aW5uaW5nIHRoZWlyIHN1cHBvcnQgYmVmb3JlIHNldHRpbmcgb3V0IG9uIGFueSB1bmRlcnRha2luZzsgYW5kIHdoZW5ldmVyIGhlIHdhcyBpbnZpdGVkIHRvIG1lZXQgdGhlbSwgaGFzdGVuaW5nIHRvIHRoZW0gb24gdGhlIHJ1bi4gSWYgZXZlciB0aGUgZXBob3JzIHZpc2l0ZWQgaGltIHdoZW4gaGUgd2FzIHNlYXRlZCBpbiBoaXMgcm95YWwgY2hhaXIgYW5kIGFkbWluaXN0ZXJpbmcganVzdGljZSwgaGUgcm9zZSBpbiB0aGVpciBob25vdXI7IGFuZCBhcyBtZW4gd2VyZSBmcm9tIHRpbWUgdG8gdGltZSBtYWRlIG1lbWJlcnMgb2YgdGhlIHNlbmF0ZSwgaGUgd291bGQgc2VuZCBlYWNoIG9uZSBhIGNsb2FrIGFuZCBhbiBveCBhcyBhIG1hcmsgb2YgaG9ub3VyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Db25zZXF1ZW50bHksIHdoaWxlIGhlIHdhcyB0aG91Z2h0IHRvIGJlIGhvbm91cmluZyBhbmQgZXhhbHRpbmcgdGhlIGRpZ25pdHkgb2YgdGhlaXIgb2ZmaWNlLCBoZSB3YXMgdW5hd2FyZXMgaW5jcmVhc2luZyBoaXMgb3duIGluZmx1ZW5jZSBhbmQgYWRkaW5nIHRvIHRoZSBwb3dlciBvZiB0aGUga2luZyBhIGdyZWF0bmVzcyB3aGljaCB3YXMgY29uY2VkZWQgb3V0IG9mIGdvb2Qtd2lsbCB0b3dhcmRzIGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIHdheSwgYW5kIGZvciB0aGVzZSByZWFzb25zLCBBZ2VzaWxhw7xzIHdhcyBhcHBvaW50ZWQga2luZywgYW5kIHN0cmFpZ2h0d2F5IGVuam95ZWQgcG9zc2Vzc2lvbiBvZiB0aGUgZXN0YXRlcyBvZiBBZ2lzIGFzIHdlbGwgYXMgaGlzIHRocm9uZSwgYWZ0ZXIgZXhwZWxsaW5nIExlb3R5Y2hpZGVzIGFzIGEgYmFzdGFyZC4gQnV0IHNlZWluZyB0aGF0IGhpcyBraW5zbWVuIG9uIGhpcyBtb3RoZXIncyBzaWRlLCB0aG91Z2ggd29ydGh5IGZvbGssIHdlcmUgZXhjZXNzaXZlbHkgcG9vciwgaGUgZGlzdHJpYnV0ZWQgYW1vbmcgdGhlbSB0aGUgaGFsZiBvZiBoaXMgZXN0YXRlcywgdGhlcmVieSBtYWtpbmcgaGlzIGluaGVyaXRhbmNlIHlpZWxkIGhpbSBnb29kLXdpbGwgYW5kIHJlcHV0YXRpb24gaW5zdGVhZCBvZiBlbnZ5IGFuZCBoYXRyZWQuIEFzIGZvciBYZW5vcGhvbidzIHN0YXRlbWVudAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiA2LjQiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uJ3MgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB2aS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBieSBvYmV5aW5nIGhpcyBjb3VudHJ5IGluIGV2ZXJ5dGhpbmcgaGUgd29uIHZlcnkgZ3JlYXQgcG93ZXIsIHNvIHRoYXQgaGUgZGlkIHdoYXQgaGUgcGxlYXNlZCwgdGhlIGNhc2UgaXMgYXMgZm9sbG93cy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFnZXMuIDYuNCIgdmFsaWQ9InllcyI+WGVub3Bob24ncyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHZpLiA0LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB2aS4gNC48L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoYXQgdGltZSB0aGUgZXBob3JzIGFuZCB0aGUgc2VuYXRvcnMgaGFkIHRoZSBncmVhdGVzdCBwb3dlciBpbiB0aGUgc3RhdGUsIG9mIHdob20gdGhlIGZvcm1lciBob2xkIG9mZmljZSBmb3IgYSB5ZWFyIG9ubHksIHdoaWxlIHRoZSBzZW5hdG9ycyBlbmpveSB0aGVpciBkaWduaXR5IGZvciBsaWZlLCB0aGVpciBvZmZpY2VzIGhhdmluZyBiZWVuIGluc3RpdHV0ZWQgdG8gcmVzdHJhaW4gdGhlIHBvd2VyIG9mIHRoZSBraW5ncywgYXMgSSBoYXZlIHNhaWQgaW4gbXkgTGlmZSBvZiBMeWN1cmd1cy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNS42IiB2YWxpZD0ieWVzIj5DaGFwdGVycyB2LiA2IGYuPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiA3LjEiIHZhbGlkPSJ5ZXMiPnZpaS4gMSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGVyZWZvcmUgZnJvbSB0aGUgb3V0c2V0LCBhbmQgZnJvbSBnZW5lcmF0aW9uIHRvIGdlbmVyYXRpb24sIHRoZSBraW5ncyB3ZXJlIHRyYWRpdGlvbmFsbHkgYXQgZmV1ZCBhbmQgdmFyaWFuY2Ugd2l0aCB0aGVtLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNS42IiB2YWxpZD0ieWVzIj5DaGFwdGVycyB2LiA2IGYuPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiA3LjEiIHZhbGlkPSJ5ZXMiPnZpaS4gMSBmLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZ2VzaWxhw7xzIHRvb2sgdGhlIG9wcG9zaXRlIGNvdXJzZS4gSW5zdGVhZCBvZiBjb2xsaWRpbmcgYW5kIGZpZ2h0aW5nIHdpdGggdGhlbSwgaGUgY291cnRlZCB0aGVpciBmYXZvdXIsIHdpbm5pbmcgdGhlaXIgc3VwcG9ydCBiZWZvcmUgc2V0dGluZyBvdXQgb24gYW55IHVuZGVydGFraW5nOyBhbmQgd2hlbmV2ZXIgaGUgd2FzIGludml0ZWQgdG8gbWVldCB0aGVtLCBoYXN0ZW5pbmcgdG8gdGhlbSBvbiB0aGUgcnVuLiBJZiBldmVyIHRoZSBlcGhvcnMgdmlzaXRlZCBoaW0gd2hlbiBoZSB3YXMgc2VhdGVkIGluIGhpcyByb3lhbCBjaGFpciBhbmQgYWRtaW5pc3RlcmluZyBqdXN0aWNlLCBoZSByb3NlIGluIHRoZWlyIGhvbm91cjsgYW5kIGFzIG1lbiB3ZXJlIGZyb20gdGltZSB0byB0aW1lIG1hZGUgbWVtYmVycyBvZiB0aGUgc2VuYXRlLCBoZSB3b3VsZCBzZW5kIGVhY2ggb25lIGEgY2xvYWsgYW5kIGFuIG94IGFzIGEgbWFyayBvZiBob25vdXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNvbnNlcXVlbnRseSwgd2hpbGUgaGUgd2FzIHRob3VnaHQgdG8gYmUgaG9ub3VyaW5nIGFuZCBleGFsdGluZyB0aGUgZGlnbml0eSBvZiB0aGVpciBvZmZpY2UsIGhlIHdhcyB1bmF3YXJlcyBpbmNyZWFzaW5nIGhpcyBvd24gaW5mbHVlbmNlIGFuZCBhZGRpbmcgdG8gdGhlIHBvd2VyIG9mIHRoZSBraW5nIGEgZ3JlYXRuZXNzIHdoaWNoIHdhcyBjb25jZWRlZCBvdXQgb2YgZ29vZC13aWxsIHRvd2FyZHMgaGltLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIGhpcyBkZWFsaW5ncyB3aXRoIHRoZSByZXN0IG9mIHRoZSBjaXRpemVucyBoZSB3YXMgbGVzcyBibGFtZS13b3J0aHkgYXMgYW4gZW5lbXkgdGhhbiBhcyBhIGZyaWVuZDsgZm9yIGhlIHdvdWxkIG5vdCBpbmp1cmUgaGlzIGVuZW1pZXMgd2l0aG91dCBqdXN0IGNhdXNlLCBidXQgam9pbmVkIGhpcyBmcmllbmRzIGV2ZW4gaW4gdGhlaXIgdW5qdXN0IHByYWN0aWNlcy4gQW5kIHdoZXJlYXMgaGUgd2FzIGFzaGFtZWQgbm90IHRvIGhvbm91ciBoaXMgZW5lbWllcyB3aGVuIHRoZXkgZGlkIHdlbGwsIGhlIGNvdWxkIG5vdCBicmluZyBoaW1zZWxmIHRvIGNlbnN1cmUgaGlzIGZyaWVuZHMgd2hlbiB0aGV5IGRpZCBhbWlzcywgYnV0IGFjdHVhbGx5IHByaWRlZCBoaW1zZWxmIG9uIGFpZGluZyB0aGVtIGFuZCBzaGFyaW5nIGluIHRoZWlyIG1pc2RlZWRzLiBGb3IgaGUgdGhvdWdodCBubyBhaWQgZGlzZ3JhY2VmdWwgdGhhdCB3YXMgZ2l2ZW4gdG8gYSBmcmllbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiwgb24gdGhlIG90aGVyIGhhbmQsIGhpcyBhZHZlcnNhcmllcyBzdHVtYmxlZCBhbmQgZmVsbCwgaGUgd2FzIGZpcnN0IHRvIHN5bXBhdGhpemUgd2l0aCB0aGVtIGFuZCBnaXZlIHRoZW0gemVhbG91cyBhaWQgaWYgdGhleSBkZXNpcmVkIGl0LCBhbmQgc28gd29uIHRoZSBoZWFydHMgYW5kIHRoZSBhbGxlZ2lhbmNlIG9mIGFsbC4gVGhlIGVwaG9ycywgYWNjb3JkaW5nbHksIHNlZWluZyB0aGlzLCBhbmQgZmVhcmluZyBoaXMgcG93ZXIsIGxhaWQgYSBmaW5lIHVwb24gaGltLCBhbGxlZ2luZyBhcyBhIHJlYXNvbiB0aGF0IGhlIG1hZGUgdGhlIGNpdGl6ZW5zIGhpcyBvd24sIHdobyBzaG91bGQgYmUgdGhlIGNvbW1vbiBwcm9wZXJ0eSBvZiB0aGUgc3RhdGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBoaXMgZGVhbGluZ3Mgd2l0aCB0aGUgcmVzdCBvZiB0aGUgY2l0aXplbnMgaGUgd2FzIGxlc3MgYmxhbWUtd29ydGh5IGFzIGFuIGVuZW15IHRoYW4gYXMgYSBmcmllbmQ7IGZvciBoZSB3b3VsZCBub3QgaW5qdXJlIGhpcyBlbmVtaWVzIHdpdGhvdXQganVzdCBjYXVzZSwgYnV0IGpvaW5lZCBoaXMgZnJpZW5kcyBldmVuIGluIHRoZWlyIHVuanVzdCBwcmFjdGljZXMuIEFuZCB3aGVyZWFzIGhlIHdhcyBhc2hhbWVkIG5vdCB0byBob25vdXIgaGlzIGVuZW1pZXMgd2hlbiB0aGV5IGRpZCB3ZWxsLCBoZSBjb3VsZCBub3QgYnJpbmcgaGltc2VsZiB0byBjZW5zdXJlIGhpcyBmcmllbmRzIHdoZW4gdGhleSBkaWQgYW1pc3MsIGJ1dCBhY3R1YWxseSBwcmlkZWQgaGltc2VsZiBvbiBhaWRpbmcgdGhlbSBhbmQgc2hhcmluZyBpbiB0aGVpciBtaXNkZWVkcy4gRm9yIGhlIHRob3VnaHQgbm8gYWlkIGRpc2dyYWNlZnVsIHRoYXQgd2FzIGdpdmVuIHRvIGEgZnJpZW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiwgb24gdGhlIG90aGVyIGhhbmQsIGhpcyBhZHZlcnNhcmllcyBzdHVtYmxlZCBhbmQgZmVsbCwgaGUgd2FzIGZpcnN0IHRvIHN5bXBhdGhpemUgd2l0aCB0aGVtIGFuZCBnaXZlIHRoZW0gemVhbG91cyBhaWQgaWYgdGhleSBkZXNpcmVkIGl0LCBhbmQgc28gd29uIHRoZSBoZWFydHMgYW5kIHRoZSBhbGxlZ2lhbmNlIG9mIGFsbC4gVGhlIGVwaG9ycywgYWNjb3JkaW5nbHksIHNlZWluZyB0aGlzLCBhbmQgZmVhcmluZyBoaXMgcG93ZXIsIGxhaWQgYSBmaW5lIHVwb24gaGltLCBhbGxlZ2luZyBhcyBhIHJlYXNvbiB0aGF0IGhlIG1hZGUgdGhlIGNpdGl6ZW5zIGhpcyBvd24sIHdobyBzaG91bGQgYmUgdGhlIGNvbW1vbiBwcm9wZXJ0eSBvZiB0aGUgc3RhdGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5hdHVyYWwgcGhpbG9zb3BoZXJzIGFyZSBvZiB0aGUgb3BpbmlvbiB0aGF0LCBpZiBzdHJpZmUgYW5kIGRpc2NvcmQgc2hvdWxkIGJlIGJhbmlzaGVkIGZyb20gdGhlIHVuaXZlcnNlLCB0aGUgaGVhdmVubHkgYm9kaWVzIHdvdWxkIHN0YW5kIHN0aWxsLCBhbmQgYWxsIGdlbmVyYXRpb24gYW5kIG1vdGlvbiB3b3VsZCBjZWFzZSBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgZ2VuZXJhbCBoYXJtb255LiBBbmQgc28gdGhlIFNwYXJ0YW4gbGF3LWdpdmVyIHNlZW1zIHRvIGhhdmUgaW50cm9kdWNlZCB0aGUgc3Bpcml0IG9mIGFtYml0aW9uIGFuZCBjb250ZW50aW9uIGludG8gaGlzIGNpdmlsIHBvbGl0eSBhcyBhbiBpbmNlbnRpdmUgdG8gdmlydHVlLCBkZXNpcmluZyB0aGF0IGdvb2QgY2l0aXplbnMgc2hvdWxkIGFsd2F5cyBiZSBzb21ld2hhdCBhdCB2YXJpYW5jZSBhbmQgaW4gY29uZmxpY3Qgd2l0aCBvbmUgYW5vdGhlciwgYW5kIGRlZW1pbmcgdGhhdCBjb21wbGFpc2FuY2Ugd2hpY2ggd2Vha2x5IHlpZWxkcyB3aXRob3V0IGRlYmF0ZSwgd2hpY2gga25vd3Mgbm8gZWZmb3J0IGFuZCBubyBzdHJ1Z2dsZSwgdG8gYmUgd3JvbmdseSBjYWxsZWQgY29uY29yZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvbWUgdGhpbmsgdGhhdCBIb21lciBhbHNvIHdhcyBjbGVhcmx5IG9mIHRoaXMgbWluZDsgZm9yIGhlIHdvdWxkIG5vdCBoYXZlIHJlcHJlc2VudGVkIEFnYW1lbW5vbiBhcyBwbGVhc2VkIHdoZW4gT2R5c3NldXMgYW5kIEFjaGlsbGVzIHdlcmUgY2FycmllZCBhd2F5IGludG8gYWJ1c2Ugb2Ygb25lIGFub3RoZXIgd2l0aCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZyaWdodGZ1bCB3b3Jkcyw8L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gOC43NSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5PZHlzc2V5PC90aXRsZT4sIHZpaWkuIDc1IGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBpZiBoZSBoYWQgbm90IHRob3VnaHQgdGhlIGdlbmVyYWwgaW50ZXJlc3RzIGxpa2VseSB0byBwcm9maXQgYnkgdGhlIG11dHVhbCByaXZhbHJ5IGFuZCBxdWFycmVsbGluZyBvZiB0aGUgY2hpZWZ0YWlucy4gVGhpcyBwcmluY2lwbGUsIGhvd2V2ZXIsIG11c3Qgbm90IGJlIGFjY2VwdGVkIHdpdGhvdXQgc29tZSByZXNlcnZhdGlvbnM7IGZvciBleGNlc3NpdmUgcml2YWxyaWVzIGFyZSBpbmp1cmlvdXMgdG8gc3RhdGVzLCBhbmQgcHJvZHVjdGl2ZSBvZiBncmVhdCBwZXJpbHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5hdHVyYWwgcGhpbG9zb3BoZXJzIGFyZSBvZiB0aGUgb3BpbmlvbiB0aGF0LCBpZiBzdHJpZmUgYW5kIGRpc2NvcmQgc2hvdWxkIGJlIGJhbmlzaGVkIGZyb20gdGhlIHVuaXZlcnNlLCB0aGUgaGVhdmVubHkgYm9kaWVzIHdvdWxkIHN0YW5kIHN0aWxsLCBhbmQgYWxsIGdlbmVyYXRpb24gYW5kIG1vdGlvbiB3b3VsZCBjZWFzZSBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgZ2VuZXJhbCBoYXJtb255LiBBbmQgc28gdGhlIFNwYXJ0YW4gbGF3LWdpdmVyIHNlZW1zIHRvIGhhdmUgaW50cm9kdWNlZCB0aGUgc3Bpcml0IG9mIGFtYml0aW9uIGFuZCBjb250ZW50aW9uIGludG8gaGlzIGNpdmlsIHBvbGl0eSBhcyBhbiBpbmNlbnRpdmUgdG8gdmlydHVlLCBkZXNpcmluZyB0aGF0IGdvb2QgY2l0aXplbnMgc2hvdWxkIGFsd2F5cyBiZSBzb21ld2hhdCBhdCB2YXJpYW5jZSBhbmQgaW4gY29uZmxpY3Qgd2l0aCBvbmUgYW5vdGhlciwgYW5kIGRlZW1pbmcgdGhhdCBjb21wbGFpc2FuY2Ugd2hpY2ggd2Vha2x5IHlpZWxkcyB3aXRob3V0IGRlYmF0ZSwgd2hpY2gga25vd3Mgbm8gZWZmb3J0IGFuZCBubyBzdHJ1Z2dsZSwgdG8gYmUgd3JvbmdseSBjYWxsZWQgY29uY29yZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzb21lIHRoaW5rIHRoYXQgSG9tZXIgYWxzbyB3YXMgY2xlYXJseSBvZiB0aGlzIG1pbmQ7IGZvciBoZSB3b3VsZCBub3QgaGF2ZSByZXByZXNlbnRlZCBBZ2FtZW1ub24gYXMgcGxlYXNlZCB3aGVuIE9keXNzZXVzIGFuZCBBY2hpbGxlcyB3ZXJlIGNhcnJpZWQgYXdheSBpbnRvIGFidXNlIG9mIG9uZSBhbm90aGVyIHdpdGggCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZyaWdodGZ1bCB3b3Jkcyw8L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDguNzUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIHZpaWkuIDc1IGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBpZiBoZSBoYWQgbm90IHRob3VnaHQgdGhlIGdlbmVyYWwgaW50ZXJlc3RzIGxpa2VseSB0byBwcm9maXQgYnkgdGhlIG11dHVhbCByaXZhbHJ5IGFuZCBxdWFycmVsbGluZyBvZiB0aGUgY2hpZWZ0YWlucy4gVGhpcyBwcmluY2lwbGUsIGhvd2V2ZXIsIG11c3Qgbm90IGJlIGFjY2VwdGVkIHdpdGhvdXQgc29tZSByZXNlcnZhdGlvbnM7IGZvciBleGNlc3NpdmUgcml2YWxyaWVzIGFyZSBpbmp1cmlvdXMgdG8gc3RhdGVzLCBhbmQgcHJvZHVjdGl2ZSBvZiBncmVhdCBwZXJpbHMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDguNzUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIHZpaWkuIDc1IGZmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCB2aWlpLiA3NSBmZi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMgaGFkIGJ1dCByZWNlbnRseSBjb21lIHRvIHRoZSB0aHJvbmUsIHdoZW4gdGlkaW5ncyB3ZXJlIGJyb3VnaHQgZnJvbSBBc2lhIHRoYXQgdGhlIFBlcnNpYW4ga2luZyB3YXMgcHJlcGFyaW5nIGEgZ3JlYXQgYXJtYW1lbnQgd2l0aCB3aGljaCB0byBkcml2ZSB0aGUgTGFjZWRhZW1vbmlhbnMgZnJvbSB0aGUgc2VhLiBOb3csIEx5c2FuZGVyIHdhcyBlYWdlciB0byBiZSBzZW50IGFnYWluIGludG8gQXNpYSwgYW5kIHRvIGFpZCBoaXMgZnJpZW5kcyB0aGVyZS4gVGhlc2UgaGUgaGFkIGxlZnQgZ292ZXJub3JzIGFuZCBtYXN0ZXJzIG9mIHRoZSBjaXRpZXMsIGJ1dCBvd2luZyB0byB0aGVpciB1bmp1c3QgYW5kIHZpb2xlbnQgY29uZHVjdCBvZiBhZmZhaXJzLCB0aGV5IHdlcmUgYmVpbmcgZHJpdmVuIG91dCBieSB0aGUgY2l0aXplbnMsIGFuZCBldmVuIHB1dCB0byBkZWF0aC4gSGUgdGhlcmVmb3JlIHBlcnN1YWRlZCBBZ2VzaWxhw7xzIHRvIHVuZGVydGFrZSB0aGUgZXhwZWRpdGlvbiBhbmQgbWFrZSB3YXIgaW4gYmVoYWxmIG9mIEhlbGxhcywgcHJvY2VlZGluZyB0byB0aGUgZmFydGhlc3QgcG9pbnQgYWNyb3NzIHRoZSBzZWEsIGFuZCB0aHVzIGFudGljaXBhdGluZyB0aGUgcHJlcGFyYXRpb25zIG9mIHRoZSBCYXJiYXJpYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBzYW1lIHRpbWUgaGUgd3JvdGUgdG8gaGlzIGZyaWVuZHMgaW4gQXNpYSB1cmdpbmcgdGhlbSB0byBzZW5kIG1lc3NlbmdlcnMgdG8gU3BhcnRhIGFuZCBkZW1hbmQgQWdlc2lsYcO8cyBhcyB0aGVpciBjb21tYW5kZXIuIEFjY29yZGluZ2x5LCBBZ2VzaWxhw7xzIHdlbnQgYmVmb3JlIHRoZSBhc3NlbWJseSBvZiB0aGUgcGVvcGxlIGFuZCBhZ3JlZWQgdG8gdW5kZXJ0YWtlIHRoZSB3YXIgaWYgdGhleSB3b3VsZCBncmFudCBoaW0gdGhpcnR5IFNwYXJ0YW5zIGFzIGNhcHRhaW5zIGFuZCBjb3Vuc2VsbG9ycywgYSBzZWxlY3QgY29ycHMgb2YgdHdvIHRob3VzYW5kIGVuZnJhbmNoaXNlZCBIZWxvdHMsIGFuZCBhIGZvcmNlIG9mIGFsbGllcyBhbW91bnRpbmcgdG8gc2l4IHRob3VzYW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHJlYWRpbHkgdm90ZWQgZXZlcnl0aGluZywgb3dpbmcgdG8gdGhlIGNvLW9wZXJhdGlvbiBvZiBMeXNhbmRlciwgYW5kIHNlbnQgQWdlc2lsYcO8cyBmb3J0aCBhdCBvbmNlIHdpdGggdGhlIHRoaXJ0eSBTcGFydGFucy4gT2YgdGhlc2UgTHlzYW5kZXIgd2FzIGZpcnN0IGFuZCBmb3JlbW9zdCwgbm90IG9ubHkgYmVjYXVzZSBvZiBoaXMgb3duIHJlcHV0YXRpb24gYW5kIGluZmx1ZW5jZSwgYnV0IGFsc28gYmVjYXVzZSBvZiB0aGUgZnJpZW5kc2hpcCBvZiBBZ2VzaWxhw7xzLCBpbiB3aG9zZSBleWVzIGhpcyBwcm9jdXJpbmcgaGltIHRoaXMgY29tbWFuZCB3YXMgYSBncmVhdGVyIGJvb24gdGhhbiBoaXMgcmFpc2luZyBoaW0gdG8gdGhlIHRocm9uZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2VzaWxhw7xzIGhhZCBidXQgcmVjZW50bHkgY29tZSB0byB0aGUgdGhyb25lLCB3aGVuIHRpZGluZ3Mgd2VyZSBicm91Z2h0IGZyb20gQXNpYSB0aGF0IHRoZSBQZXJzaWFuIGtpbmcgd2FzIHByZXBhcmluZyBhIGdyZWF0IGFybWFtZW50IHdpdGggd2hpY2ggdG8gZHJpdmUgdGhlIExhY2VkYWVtb25pYW5zIGZyb20gdGhlIHNlYS4gTm93LCBMeXNhbmRlciB3YXMgZWFnZXIgdG8gYmUgc2VudCBhZ2FpbiBpbnRvIEFzaWEsIGFuZCB0byBhaWQgaGlzIGZyaWVuZHMgdGhlcmUuIFRoZXNlIGhlIGhhZCBsZWZ0IGdvdmVybm9ycyBhbmQgbWFzdGVycyBvZiB0aGUgY2l0aWVzLCBidXQgb3dpbmcgdG8gdGhlaXIgdW5qdXN0IGFuZCB2aW9sZW50IGNvbmR1Y3Qgb2YgYWZmYWlycywgdGhleSB3ZXJlIGJlaW5nIGRyaXZlbiBvdXQgYnkgdGhlIGNpdGl6ZW5zLCBhbmQgZXZlbiBwdXQgdG8gZGVhdGguIEhlIHRoZXJlZm9yZSBwZXJzdWFkZWQgQWdlc2lsYcO8cyB0byB1bmRlcnRha2UgdGhlIGV4cGVkaXRpb24gYW5kIG1ha2Ugd2FyIGluIGJlaGFsZiBvZiBIZWxsYXMsIHByb2NlZWRpbmcgdG8gdGhlIGZhcnRoZXN0IHBvaW50IGFjcm9zcyB0aGUgc2VhLCBhbmQgdGh1cyBhbnRpY2lwYXRpbmcgdGhlIHByZXBhcmF0aW9ucyBvZiB0aGUgQmFyYmFyaWFuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBzYW1lIHRpbWUgaGUgd3JvdGUgdG8gaGlzIGZyaWVuZHMgaW4gQXNpYSB1cmdpbmcgdGhlbSB0byBzZW5kIG1lc3NlbmdlcnMgdG8gU3BhcnRhIGFuZCBkZW1hbmQgQWdlc2lsYcO8cyBhcyB0aGVpciBjb21tYW5kZXIuIEFjY29yZGluZ2x5LCBBZ2VzaWxhw7xzIHdlbnQgYmVmb3JlIHRoZSBhc3NlbWJseSBvZiB0aGUgcGVvcGxlIGFuZCBhZ3JlZWQgdG8gdW5kZXJ0YWtlIHRoZSB3YXIgaWYgdGhleSB3b3VsZCBncmFudCBoaW0gdGhpcnR5IFNwYXJ0YW5zIGFzIGNhcHRhaW5zIGFuZCBjb3Vuc2VsbG9ycywgYSBzZWxlY3QgY29ycHMgb2YgdHdvIHRob3VzYW5kIGVuZnJhbmNoaXNlZCBIZWxvdHMsIGFuZCBhIGZvcmNlIG9mIGFsbGllcyBhbW91bnRpbmcgdG8gc2l4IHRob3VzYW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgcmVhZGlseSB2b3RlZCBldmVyeXRoaW5nLCBvd2luZyB0byB0aGUgY28tb3BlcmF0aW9uIG9mIEx5c2FuZGVyLCBhbmQgc2VudCBBZ2VzaWxhw7xzIGZvcnRoIGF0IG9uY2Ugd2l0aCB0aGUgdGhpcnR5IFNwYXJ0YW5zLiBPZiB0aGVzZSBMeXNhbmRlciB3YXMgZmlyc3QgYW5kIGZvcmVtb3N0LCBub3Qgb25seSBiZWNhdXNlIG9mIGhpcyBvd24gcmVwdXRhdGlvbiBhbmQgaW5mbHVlbmNlLCBidXQgYWxzbyBiZWNhdXNlIG9mIHRoZSBmcmllbmRzaGlwIG9mIEFnZXNpbGHDvHMsIGluIHdob3NlIGV5ZXMgaGlzIHByb2N1cmluZyBoaW0gdGhpcyBjb21tYW5kIHdhcyBhIGdyZWF0ZXIgYm9vbiB0aGFuIGhpcyByYWlzaW5nIGhpbSB0byB0aGUgdGhyb25lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBoaXMgZm9yY2VzIHdlcmUgYXNzZW1ibGluZyBhdCBHZXJhZXN0dXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc3ByaW5nIG9mIDM5NiBCLkMuPC9ub3RlPiBBZ2VzaWxhw7xzIGhpbXNlbGYgd2VudCB0byBBdWxpcyB3aXRoIGhpcyBmcmllbmRzIGFuZCBzcGVudCB0aGUgbmlnaHQuIEFzIGhlIHNsZXB0LCBoZSB0aG91Z2h0IGEgdm9pY2UgY2FtZSB0byBoaW0sIHNheWluZzogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5LaW5nIG9mIHRoZSBMYWNlZGFlbW9uaWFucywgdGhvdSBhcnQgc3VyZWx5IGF3YXJlIHRoYXQgbm8gb25lIGhhcyBldmVyIGJlZW4gYXBwb2ludGVkIGdlbmVyYWwgb2YgYWxsIEhlbGxhcyB0b2dldGhlciBleGNlcHQgQWdhbWVtbm9uLCBpbiBmb3JtZXIgdGltZXMsIGFuZCBub3cgdGh5c2VsZiwgYWZ0ZXIgaGltLiBBbmQgc2luY2UgdGhvdSBjb21tYW5kZXN0IHRoZSBzYW1lIGhvc3RzIHRoYXQgaGUgZGlkLCBhbmQgd2FnZXN0IHdhciBvbiB0aGUgc2FtZSBmb2VzLCBhbmQgc2V0dGVzdCBvdXQgZm9yIHRoZSB3YXIgZnJvbSB0aGUgc2FtZSBwbGFjZSwgaXQgaXMgbWVldCB0aGF0IHRob3Ugc2hvdWxkc3Qgc2FjcmlmaWNlIGFsc28gdG8gdGhlIGdvZGRlc3MgdGhlIHNhY3JpZmljZSB3aGljaCBoZSBtYWRlIHRoZXJlIGJlZm9yZSBoZSBzZXQgc2FpbC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWxtb3N0IGF0IG9uY2UgQWdlc2lsYcO8cyByZW1lbWJlcmVkIHRoZSBzYWNyaWZpY2Ugb2YgaGlzIG93biBkYXVnaHRlcgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SXBoaWdlbmVpYS4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIElBIDE1NDAiIHZhbGlkPSJ5ZXMiPkV1cmlwaWRlcywgPHRpdGxlPklwaC4gQXVsLjwvdGl0bGU+LCAxNTQwIGZmLiA8L2JpYmw+KEtpcmNoaG9mZikuPC9ub3RlPiB3aGljaCBBZ2FtZW1ub24gaGFkIHRoZXJlIG1hZGUgaW4gb2JlZGllbmNlIHRvIHRoZSBzb290aHNheWVycy4gSGUgd2FzIG5vdCBkaXN0dXJiZWQsIGhvd2V2ZXIsIGJ1dCBhZnRlciByaXNpbmcgdXAgYW5kIGltcGFydGluZyBoaXMgdmlzaW9uIHRvIGhpcyBmcmllbmRzLCBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIGhvbm91ciB0aGUgZ29kZGVzcyB3aXRoIGEgc2FjcmlmaWNlIGluIHdoaWNoIHNoZSBjb3VsZCBmaXRseSB0YWtlIHBsZWFzdXJlLCBiZWluZyBhIGdvZGRlc3MsIGFuZCB3b3VsZCBub3QgaW1pdGF0ZSB0aGUgY3J1ZWwgaW5zZW5zaWJpbGl0eSBvZiBoaXMgcHJlZGVjZXNzb3IuIFNvIGhlIGNhdXNlZCBhIGhpbmQgdG8gYmUgd3JlYXRoZWQgd2l0aCBjaGFwbGV0cywgYW5kIG9yZGVyZWQgaGlzIG93biBzZWVyIHRvIHBlcmZvcm0gdGhlIHNhY3JpZmljZSwgaW5zdGVhZCBvZiB0aGUgb25lIGN1c3RvbWFyaWx5IGFwcG9pbnRlZCB0byB0aGlzIG9mZmljZSBieSB0aGUgQm9lb3RpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgd2hlbiB0aGUgQm9lb3RpYW4gbWFnaXN0cmF0ZXMgaGVhcmQgb2YgdGhpcywgdGhleSB3ZXJlIG1vdmVkIHRvIGFuZ2VyLCBhbmQgc2VudCB0aGVpciBvZmZpY2VycywgZm9yYmlkZGluZyBBZ2VzaWxhw7xzIHRvIHNhY3JpZmljZSBjb250cmFyeSB0byB0aGUgbGF3cyBhbmQgY3VzdG9tcyBvZiB0aGUgQm9lb3RpYW5zLiBUaGVzZSBvZmZpY2VycyBub3Qgb25seSBkZWxpdmVyZWQgdGhlaXIgbWVzc2FnZSwgYnV0IGFsc28gc25hdGNoZWQgdGhlIHRoaWdoLXBpZWNlcyBvZiB0aGUgdmljdGltIGZyb20gdGhlIGFsdGFyLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNC4zIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaWlpLiA0LCAzIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFnZXNpbGHDvHMgdGhlcmVmb3JlIHNhaWxlZCBhd2F5IGluIGdyZWF0IGRpc3RyZXNzIG9mIG1pbmQ7IGhlIHdhcyBub3Qgb25seSBoaWdobHkgaW5jZW5zZWQgYXQgdGhlIFRoZWJhbnMsIGJ1dCBhbHNvIGZ1bGwgb2YgaWxsLWJvZGluZyBvbiBhY2NvdW50IG9mIHRoZSBvbWVuLiBIZSB3YXMgY29udmluY2VkIHRoYXQgaGlzIHVuZGVydGFraW5ncyB3b3VsZCBiZSBpbmNvbXBsZXRlLCBhbmQgdGhhdCBoaXMgZXhwZWRpdGlvbiB3b3VsZCBoYXZlIG5vIGZpdHRpbmcgaXNzdWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIGhpcyBmb3JjZXMgd2VyZSBhc3NlbWJsaW5nIGF0IEdlcmFlc3R1cywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNwcmluZyBvZiAzOTYgQi5DLjwvbm90ZT4gQWdlc2lsYcO8cyBoaW1zZWxmIHdlbnQgdG8gQXVsaXMgd2l0aCBoaXMgZnJpZW5kcyBhbmQgc3BlbnQgdGhlIG5pZ2h0LiBBcyBoZSBzbGVwdCwgaGUgdGhvdWdodCBhIHZvaWNlIGNhbWUgdG8gaGltLCBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5LaW5nIG9mIHRoZSBMYWNlZGFlbW9uaWFucywgdGhvdSBhcnQgc3VyZWx5IGF3YXJlIHRoYXQgbm8gb25lIGhhcyBldmVyIGJlZW4gYXBwb2ludGVkIGdlbmVyYWwgb2YgYWxsIEhlbGxhcyB0b2dldGhlciBleGNlcHQgQWdhbWVtbm9uLCBpbiBmb3JtZXIgdGltZXMsIGFuZCBub3cgdGh5c2VsZiwgYWZ0ZXIgaGltLiBBbmQgc2luY2UgdGhvdSBjb21tYW5kZXN0IHRoZSBzYW1lIGhvc3RzIHRoYXQgaGUgZGlkLCBhbmQgd2FnZXN0IHdhciBvbiB0aGUgc2FtZSBmb2VzLCBhbmQgc2V0dGVzdCBvdXQgZm9yIHRoZSB3YXIgZnJvbSB0aGUgc2FtZSBwbGFjZSwgaXQgaXMgbWVldCB0aGF0IHRob3Ugc2hvdWxkc3Qgc2FjcmlmaWNlIGFsc28gdG8gdGhlIGdvZGRlc3MgdGhlIHNhY3JpZmljZSB3aGljaCBoZSBtYWRlIHRoZXJlIGJlZm9yZSBoZSBzZXQgc2FpbC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFsbW9zdCBhdCBvbmNlIEFnZXNpbGHDvHMgcmVtZW1iZXJlZCB0aGUgc2FjcmlmaWNlIG9mIGhpcyBvd24gZGF1Z2h0ZXIKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SXBoaWdlbmVpYS4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkV1ci4gSUEgMTU0MCIgdmFsaWQ9InllcyI+RXVyaXBpZGVzLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JcGguIEF1bC48L3RpdGxlPiwgMTU0MCBmZi4gPC9iaWJsPihLaXJjaGhvZmYpLjwvbm90ZT4gd2hpY2ggQWdhbWVtbm9uIGhhZCB0aGVyZSBtYWRlIGluIG9iZWRpZW5jZSB0byB0aGUgc29vdGhzYXllcnMuIEhlIHdhcyBub3QgZGlzdHVyYmVkLCBob3dldmVyLCBidXQgYWZ0ZXIgcmlzaW5nIHVwIGFuZCBpbXBhcnRpbmcgaGlzIHZpc2lvbiB0byBoaXMgZnJpZW5kcywgZGVjbGFyZWQgdGhhdCBoZSB3b3VsZCBob25vdXIgdGhlIGdvZGRlc3Mgd2l0aCBhIHNhY3JpZmljZSBpbiB3aGljaCBzaGUgY291bGQgZml0bHkgdGFrZSBwbGVhc3VyZSwgYmVpbmcgYSBnb2RkZXNzLCBhbmQgd291bGQgbm90IGltaXRhdGUgdGhlIGNydWVsIGluc2Vuc2liaWxpdHkgb2YgaGlzIHByZWRlY2Vzc29yLiBTbyBoZSBjYXVzZWQgYSBoaW5kIHRvIGJlIHdyZWF0aGVkIHdpdGggY2hhcGxldHMsIGFuZCBvcmRlcmVkIGhpcyBvd24gc2VlciB0byBwZXJmb3JtIHRoZSBzYWNyaWZpY2UsIGluc3RlYWQgb2YgdGhlIG9uZSBjdXN0b21hcmlseSBhcHBvaW50ZWQgdG8gdGhpcyBvZmZpY2UgYnkgdGhlIEJvZW90aWFucy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIElBIDE1NDAiIHZhbGlkPSJ5ZXMiPkV1cmlwaWRlcywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXBoLiBBdWwuPC90aXRsZT4sIDE1NDAgZmYuIDwvYmlibD4oS2lyY2hob2ZmKS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JcGguIEF1bC48L3RpdGxlPiwgMTU0MCBmZi4gPC90cmFuc2xhdGlvbj4="
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIHRoZSBCb2VvdGlhbiBtYWdpc3RyYXRlcyBoZWFyZCBvZiB0aGlzLCB0aGV5IHdlcmUgbW92ZWQgdG8gYW5nZXIsIGFuZCBzZW50IHRoZWlyIG9mZmljZXJzLCBmb3JiaWRkaW5nIEFnZXNpbGHDvHMgdG8gc2FjcmlmaWNlIGNvbnRyYXJ5IHRvIHRoZSBsYXdzIGFuZCBjdXN0b21zIG9mIHRoZSBCb2VvdGlhbnMuIFRoZXNlIG9mZmljZXJzIG5vdCBvbmx5IGRlbGl2ZXJlZCB0aGVpciBtZXNzYWdlLCBidXQgYWxzbyBzbmF0Y2hlZCB0aGUgdGhpZ2gtcGllY2VzIG9mIHRoZSB2aWN0aW0gZnJvbSB0aGUgYWx0YXIuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNC4zIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDMgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQWdlc2lsYcO8cyB0aGVyZWZvcmUgc2FpbGVkIGF3YXkgaW4gZ3JlYXQgZGlzdHJlc3Mgb2YgbWluZDsgaGUgd2FzIG5vdCBvbmx5IGhpZ2hseSBpbmNlbnNlZCBhdCB0aGUgVGhlYmFucywgYnV0IGFsc28gZnVsbCBvZiBpbGwtYm9kaW5nIG9uIGFjY291bnQgb2YgdGhlIG9tZW4uIEhlIHdhcyBjb252aW5jZWQgdGhhdCBoaXMgdW5kZXJ0YWtpbmdzIHdvdWxkIGJlIGluY29tcGxldGUsIGFuZCB0aGF0IGhpcyBleHBlZGl0aW9uIHdvdWxkIGhhdmUgbm8gZml0dGluZyBpc3N1ZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaWlpLiA0LCAzIGYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGlpaS4gNCwgMyBmLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgc29vbiBhcyBoZSBjYW1lIHRvIEVwaGVzdXMsIHRoZSBncmVhdCBkaWduaXR5IGFuZCBpbmZsdWVuY2Ugd2hpY2ggTHlzYW5kZXIgZW5qb3llZCB3ZXJlIGJ1cmRlbnNvbWUgYW5kIGdyaWV2b3VzIHRvIGhpbS4gVGhlIGRvb3JzIG9mIEx5c2FuZGVyIHdlcmUgYWx3YXlzIGJlc2V0IHdpdGggYSB0aHJvbmcsIGFuZCBhbGwgZm9sbG93ZWQgaW4gaGlzIHRyYWluIGFuZCBwYWlkIGhpbSBjb3VydCwgYXMgdGhvdWdoIEFnZXNpbGHDvHMgaGFkIHRoZSBjb21tYW5kIGluIG5hbWUgYW5kIG91dHdhcmQgYXBwZWFyYW5jZSwgdG8gY29tcGx5IHdpdGggdGhlIGxhdywgd2hpbGUgaW4gZmFjdCBMeXNhbmRlciB3YXMgbWFzdGVyIG9mIGFsbCwgaGFkIGFsbCBwb3dlciwgYW5kIGRpZCBldmVyeXRoaW5nLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNC43IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaWlpLiA0LCA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGZhY3QsIG5vbmUgb2YgdGhlIGdlbmVyYWxzIHNlbnQgb3V0IHRvIEFzaWEgZXZlciBoYWQgbW9yZSBwb3dlciBvciBpbnNwaXJlZCBtb3JlIGZlYXIgdGhhbiBoZTsgbm9uZSBvdGhlciBjb25mZXJyZWQgZ3JlYXRlciBmYXZvdXJzIG9uIGhpcyBmcmllbmRzLCBvciBpbmZsaWN0ZWQgc3VjaCBncmVhdCBpbmp1cmllcyB1cG9uIGhpcyBlbmVtaWVzLiBBbGwgdGhpcyB3YXMgc3RpbGwgZnJlc2ggaW4gbWVuJ3MgbWluZHMsIGFuZCBiZXNpZGVzLCB3aGVuIHRoZXkgc2F3IHRoZSBzaW1wbGUsIHBsYWluLCBhbmQgZmFtaWxpYXIgbWFubmVycyBvZiBBZ2VzaWxhw7xzLCB3aGlsZSBMeXNhbmRlciByZXRhaW5lZCB0aGUgc2FtZSBWZWhlbWVuY2UgYW5kIGhhcnNobmVzcywgYW5kIHRoZSBzYW1lIGJyZXZpdHkgb2Ygc3BlZWNoIGFzIGJlZm9yZSwgdGhleSB5aWVsZGVkIHRvIHRoZSBsYXR0ZXIncyBpbmZsdWVuY2UgYWx0b2dldGhlciwgYW5kIGF0dGFjaGVkIHRoZW1zZWx2ZXMgdG8gaGltIGFsb25lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BcyBhIGNvbnNlcXVlbmNlIG9mIHRoaXMsIGluIHRoZSBmaXJzdCBwbGFjZSwgdGhlIHJlc3Qgb2YgdGhlIFNwYXJ0YW5zIHdlcmUgZGlzcGxlYXNlZCB0byBmaW5kIHRoZW1zZWx2ZXMgYXNzaXN0YW50cyBvZiBMeXNhbmRlciByYXRoZXIgdGhhbiBjb3Vuc2VsbG9ycyBvZiB0aGUga2luZzsgYW5kLCBpbiB0aGUgc2Vjb25kIHBsYWNlLCBBZ2VzaWxhw7xzIGhpbXNlbGY6LCB0aG91Z2ggaGUgd2FzIG5vdCBhbiBlbnZpb3VzIG1hbiwgbm9yIGRpc3BsZWFzZWQgdGhhdCBvdGhlcnMgc2hvdWxkIGJlIGhvbm91cmVkLCBidXQgZXhjZWVkaW5nbHkgYW1iaXRpb3VzIGFuZCBoaWdoLXNwaXJpdGVkLCBiZWdhbiB0byBmZWFyIHRoYXQgYW55IGJyaWxsaWFudCBzdWNjZXNzIHdoaWNoIGhlIG1pZ2h0IGFjaGlldmUgaW4gaGlzIHVuZGVydGFraW5ncyB3b3VsZCBiZSBhdHRyaWJ1dGVkIHRvIEx5c2FuZGVyLCBvd2luZyB0byBwb3B1bGFyIG9waW5pb24uIEhlIHdlbnQgdG8gd29yaywgdGhlcmVmb3JlLCBpbiB0aGlzIHdheS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIGhlIGNhbWUgdG8gRXBoZXN1cywgdGhlIGdyZWF0IGRpZ25pdHkgYW5kIGluZmx1ZW5jZSB3aGljaCBMeXNhbmRlciBlbmpveWVkIHdlcmUgYnVyZGVuc29tZSBhbmQgZ3JpZXZvdXMgdG8gaGltLiBUaGUgZG9vcnMgb2YgTHlzYW5kZXIgd2VyZSBhbHdheXMgYmVzZXQgd2l0aCBhIHRocm9uZywgYW5kIGFsbCBmb2xsb3dlZCBpbiBoaXMgdHJhaW4gYW5kIHBhaWQgaGltIGNvdXJ0LCBhcyB0aG91Z2ggQWdlc2lsYcO8cyBoYWQgdGhlIGNvbW1hbmQgaW4gbmFtZSBhbmQgb3V0d2FyZCBhcHBlYXJhbmNlLCB0byBjb21wbHkgd2l0aCB0aGUgbGF3LCB3aGlsZSBpbiBmYWN0IEx5c2FuZGVyIHdhcyBtYXN0ZXIgb2YgYWxsLCBoYWQgYWxsIHBvd2VyLCBhbmQgZGlkIGV2ZXJ5dGhpbmcuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNC43IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNC43IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDcuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGlpaS4gNCwgNy48L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGZhY3QsIG5vbmUgb2YgdGhlIGdlbmVyYWxzIHNlbnQgb3V0IHRvIEFzaWEgZXZlciBoYWQgbW9yZSBwb3dlciBvciBpbnNwaXJlZCBtb3JlIGZlYXIgdGhhbiBoZTsgbm9uZSBvdGhlciBjb25mZXJyZWQgZ3JlYXRlciBmYXZvdXJzIG9uIGhpcyBmcmllbmRzLCBvciBpbmZsaWN0ZWQgc3VjaCBncmVhdCBpbmp1cmllcyB1cG9uIGhpcyBlbmVtaWVzLiBBbGwgdGhpcyB3YXMgc3RpbGwgZnJlc2ggaW4gbWVuJ3MgbWluZHMsIGFuZCBiZXNpZGVzLCB3aGVuIHRoZXkgc2F3IHRoZSBzaW1wbGUsIHBsYWluLCBhbmQgZmFtaWxpYXIgbWFubmVycyBvZiBBZ2VzaWxhw7xzLCB3aGlsZSBMeXNhbmRlciByZXRhaW5lZCB0aGUgc2FtZSBWZWhlbWVuY2UgYW5kIGhhcnNobmVzcywgYW5kIHRoZSBzYW1lIGJyZXZpdHkgb2Ygc3BlZWNoIGFzIGJlZm9yZSwgdGhleSB5aWVsZGVkIHRvIHRoZSBsYXR0ZXIncyBpbmZsdWVuY2UgYWx0b2dldGhlciwgYW5kIGF0dGFjaGVkIHRoZW1zZWx2ZXMgdG8gaGltIGFsb25lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGEgY29uc2VxdWVuY2Ugb2YgdGhpcywgaW4gdGhlIGZpcnN0IHBsYWNlLCB0aGUgcmVzdCBvZiB0aGUgU3BhcnRhbnMgd2VyZSBkaXNwbGVhc2VkIHRvIGZpbmQgdGhlbXNlbHZlcyBhc3Npc3RhbnRzIG9mIEx5c2FuZGVyIHJhdGhlciB0aGFuIGNvdW5zZWxsb3JzIG9mIHRoZSBraW5nOyBhbmQsIGluIHRoZSBzZWNvbmQgcGxhY2UsIEFnZXNpbGHDvHMgaGltc2VsZjosIHRob3VnaCBoZSB3YXMgbm90IGFuIGVudmlvdXMgbWFuLCBub3IgZGlzcGxlYXNlZCB0aGF0IG90aGVycyBzaG91bGQgYmUgaG9ub3VyZWQsIGJ1dCBleGNlZWRpbmdseSBhbWJpdGlvdXMgYW5kIGhpZ2gtc3Bpcml0ZWQsIGJlZ2FuIHRvIGZlYXIgdGhhdCBhbnkgYnJpbGxpYW50IHN1Y2Nlc3Mgd2hpY2ggaGUgbWlnaHQgYWNoaWV2ZSBpbiBoaXMgdW5kZXJ0YWtpbmdzIHdvdWxkIGJlIGF0dHJpYnV0ZWQgdG8gTHlzYW5kZXIsIG93aW5nIHRvIHBvcHVsYXIgb3Bpbmlvbi4gSGUgd2VudCB0byB3b3JrLCB0aGVyZWZvcmUsIGluIHRoaXMgd2F5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UbyBiZWdpbiB3aXRoLCBoZSByZXNpc3RlZCB0aGUgY291bnNlbHMgb2YgTHlzYW5kZXIsIGFuZCB3aGF0ZXZlciBlbnRlcnByaXNlcyB3ZXJlIG1vc3QgZWFybmVzdGx5IGZhdm91cmVkIGJ5IGhpbSwgdGhlc2UgaGUgaWdub3JlZCBhbmQgbmVnbGVjdGVkLCBhbmQgZGlkIG90aGVyIHRoaW5ncyBpbiB0aGVpciBzdGVhZDsgYWdhaW4sIG9mIHRob3NlIHdobyBjYW1lIHRvIHNvbGljaXQgZmF2b3VycyBmcm9tIGhpbSwgaGUgc2VudCBhd2F5IGVtcHR5LWhhbmRlZCBhbGwgd2hvIHB1dCB0aGVpciBjaGllZiBjb25maWRlbmNlIGluIEx5c2FuZGVyOyBhbmQgaW4ganVkaWNpYWwgY2FzZXMgbGlrZXdpc2UsIGFsbCB0aG9zZSBhZ2FpbnN0IHdob20gTHlzYW5kZXIgaW52ZWlnaGVkIHdlcmUgc3VyZSB0byBjb21lIG9mZiB2aWN0b3Jpb3VzLCB3aGlsZSwgb24gdGhlIGNvbnRyYXJ5LCB0aG9zZSB3aG9tIGhlIHdhcyBtYW5pZmVzdGx5IGVhZ2VyIHRvIGhlbHAgaGFkIGhhcmQgd29yayBldmVuIHRvIGVzY2FwZSBiZWluZyBmaW5lZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgdGhpbmdzIGhhcHBlbmVkLCBub3QgY2FzdWFsbHksIGJ1dCBhcyBpZiBvZiBzZXQgcHVycG9zZSwgYW5kIHVuaWZvcm1seS4gQXQgbGFzdCBMeXNhbmRlciBwZXJjZWl2ZWQgdGhlIHJlYXNvbiwgYW5kIGRpZCBub3QgaGlkZSBpdCBmcm9tIGhpcyBmcmllbmRzLCBidXQgdG9sZCB0aGVtIGl0IHdhcyBvbiBoaXMgYWNjb3VudCB0aGF0IHRoZXkgd2VyZSBzbGlnaHRlZCwgYW5kIGFkdmlzZWQgdGhlbSB0byBnbyBhbmQgcGF5IHRoZWlyIGNvdXJ0IHRvIHRoZSBraW5nLCBhbmQgdG8gdGhvc2UgbW9yZSBpbmZsdWVudGlhbCB3aXRoIGhpbSB0aGFuIGhpbXNlbGYuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIGJlZ2luIHdpdGgsIGhlIHJlc2lzdGVkIHRoZSBjb3Vuc2VscyBvZiBMeXNhbmRlciwgYW5kIHdoYXRldmVyIGVudGVycHJpc2VzIHdlcmUgbW9zdCBlYXJuZXN0bHkgZmF2b3VyZWQgYnkgaGltLCB0aGVzZSBoZSBpZ25vcmVkIGFuZCBuZWdsZWN0ZWQsIGFuZCBkaWQgb3RoZXIgdGhpbmdzIGluIHRoZWlyIHN0ZWFkOyBhZ2Fpbiwgb2YgdGhvc2Ugd2hvIGNhbWUgdG8gc29saWNpdCBmYXZvdXJzIGZyb20gaGltLCBoZSBzZW50IGF3YXkgZW1wdHktaGFuZGVkIGFsbCB3aG8gcHV0IHRoZWlyIGNoaWVmIGNvbmZpZGVuY2UgaW4gTHlzYW5kZXI7IGFuZCBpbiBqdWRpY2lhbCBjYXNlcyBsaWtld2lzZSwgYWxsIHRob3NlIGFnYWluc3Qgd2hvbSBMeXNhbmRlciBpbnZlaWdoZWQgd2VyZSBzdXJlIHRvIGNvbWUgb2ZmIHZpY3RvcmlvdXMsIHdoaWxlLCBvbiB0aGUgY29udHJhcnksIHRob3NlIHdob20gaGUgd2FzIG1hbmlmZXN0bHkgZWFnZXIgdG8gaGVscCBoYWQgaGFyZCB3b3JrIGV2ZW4gdG8gZXNjYXBlIGJlaW5nIGZpbmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHRoaW5ncyBoYXBwZW5lZCwgbm90IGNhc3VhbGx5LCBidXQgYXMgaWYgb2Ygc2V0IHB1cnBvc2UsIGFuZCB1bmlmb3JtbHkuIEF0IGxhc3QgTHlzYW5kZXIgcGVyY2VpdmVkIHRoZSByZWFzb24sIGFuZCBkaWQgbm90IGhpZGUgaXQgZnJvbSBoaXMgZnJpZW5kcywgYnV0IHRvbGQgdGhlbSBpdCB3YXMgb24gaGlzIGFjY291bnQgdGhhdCB0aGV5IHdlcmUgc2xpZ2h0ZWQsIGFuZCBhZHZpc2VkIHRoZW0gdG8gZ28gYW5kIHBheSB0aGVpciBjb3VydCB0byB0aGUga2luZywgYW5kIHRvIHRob3NlIG1vcmUgaW5mbHVlbnRpYWwgd2l0aCBoaW0gdGhhbiBoaW1zZWxmLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBzaW5jZSBoaXMgd29yZHMgYW5kIGFjdHMgc2VlbWVkIGNvbnRyaXZlZCB0byBicmluZyBvZGl1bSB1cG9uIHRoZSBraW5nLCBBZ2VzaWxhw7xzLCB3aXNoaW5nIHRvIGRlc3BpdGUgaGltIHN0aWxsIG1vcmUsIGFwcG9pbnRlZCBoaW0gaGlzIGNhcnZlciBvZiBtZWF0cywgYW5kIG9uY2Ugc2FpZCwgd2UgYXJlIHRvbGQsIGluIHRoZSBoZWFyaW5nIG9mIG1hbnk6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm93IHRoZW4sIGxldCB0aGVzZSBzdXBwbGlhbnRzIGdvIG9mZiB0byBteSBjYXJ2ZXIgb2YgbWVhdHMgYW5kIHBheSB0aGVpciBjb3VydCB0byBoaW0uPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx5c2FuZGVyLCB0aGVuLCBkZWVwbHkgcGFpbmVkLCBzYWlkIHRvIGhpbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHNlZSwgQWdlc2lsYcO8cywgdGhhdCB0aG91IGtub3dlc3QgdmVyeSB3ZWxsIGhvdyB0byBodW1ibGUgdGh5IGZyaWVuZHMuPC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzIGluZGVlZCw8L3E+IHNhaWQgdGhlIGtpbmcsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvc2Ugd2hvIHdpc2ggdG8gYmUgbW9yZSBwb3dlcmZ1bCB0aGFuIEkgYW0uPC9xPiBUaGVuIEx5c2FuZGVyIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCwgcGVyaGFwcyB0aGVzZSB3b3JkcyBvZiB0aGluZSBhcmUgZmFpcmVyIHRoYW4gbXkgZGVlZHMuIEdpdmUgbWUsIGhvd2V2ZXIsIHNvbWUgcG9zdCBhbmQgcGxhY2Ugd2hlcmUgSSBzaGFsbCBiZSBvZiBzZXJ2aWNlIHRvIHRoZWUsIHdpdGhvdXQgdmV4aW5nIHRoZWUuPC9xPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5cy4gMjMuOSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MeXNhbmRlcjwvdGl0bGU+LCB4eGlpaS4gOS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5VcG9uIHRoaXMgaGUgd2FzIHNlbnQgdG8gdGhlIEhlbGxlc3BvbnQsIGFuZCBicm91Z2h0IG92ZXIgdG8gQWdlc2lsYcO8cyBmcm9tIHRoZSBjb3VudHJ5IG9mIFBoYXJuYWJhenVzLCBTcGl0aHJpZGF0ZXMsIGEgUGVyc2lhbiwgd2l0aCBtdWNoIG1vbmV5IGFuZCB0d28gaHVuZHJlZCBob3JzZW1lbi4gSGUgZGlkIG5vdCwgaG93ZXZlciwgbGF5IGFzaWRlIGhpcyB3cmF0aCwgYnV0IGNvbnRpbnVlZCBoaXMgcmVzZW50bWVudCwgYW5kIGZyb20gdGhpcyB0aW1lIG9uIHBsYW5uZWQgaG93IGhlIG1pZ2h0IHdyZXN0IHRoZSBraW5nZG9tIGZyb20gdGhlIHR3byByb3lhbCBmYW1pbGllcywgYW5kIG1ha2UgYWxsIFNwYXJ0YW5zIG9uY2UgbW9yZSBlbGlnaWJsZSB0byBpdC4gQW5kIGl0IHdhcyB0aG91Z2h0IHRoYXQgaGUgd291bGQgaGF2ZSBicm91Z2h0IGFib3V0IGEgZ3JlYXQgZGlzdHVyYmFuY2UgaW4gY29uc2VxdWVuY2Ugb2YgdGhpcyBxdWFycmVsLCBoYWQgbm90IGRlYXRoIG92ZXJ0YWtlbiBoaW0gb24gaGlzIGV4cGVkaXRpb24gaW50byBCb2VvdGlhLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDI0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THlzYW5kZXI8L3RpdGxlPiwgeHhpdi48L2JpYmw+LTxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDI4LjEiIHZhbGlkPSJ5ZXMiPnh4dmlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGFtYml0aW91cyBuYXR1cmVzIGluIGEgY29tbW9ud2VhbHRoLCBpZiB0aGV5IGRvIG5vdCBvYnNlcnZlIGR1ZSBib3VuZHMsIHdvcmsgZ3JlYXRlciBoYXJtIHRoYW4gZ29vZC4gRm9yIGV2ZW4gdGhvdWdoIEx5c2FuZGVyIHdhcyB0cm91Ymxlc29tZSwgYXMgaGUgd2FzLCBpbiBncmF0aWZ5aW5nIGhpcyBhbWJpdGlvbiB1bnNlYXNvbmFibHksIHN0aWxsLCBBZ2VzaWxhw7xzIG11c3Qgc3VyZWx5IGhhdmUga25vd24gYW5vdGhlciBhbmQgbW9yZSBibGFtZWxlc3Mgd2F5IG9mIGNvcnJlY3RpbmcgYSBtYW4gb2YgaGlnaCByZXB1dGUgYW5kIGFtYml0aW9uIHdoZW4gaGUgZXJyZWQuIEFzIGl0IHdhcywgaXQgc2VlbXMgdG8gaGF2ZSBiZWVuIGR1ZSB0byB0aGUgc2FtZSBwYXNzaW9uIHRoYXQgdGhlIG9uZSB3b3VsZCBub3QgcmVjb2duaXplIHRoZSBhdXRob3JpdHkgb2YgaGlzIHN1cGVyaW9yLCBub3IgdGhlIG90aGVyIGVuZHVyZSB0aGUgYmVpbmcgaWdub3JlZCBieSBoaXMgZnJpZW5kIGFuZCBjb21yYWRlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgc2luY2UgaGlzIHdvcmRzIGFuZCBhY3RzIHNlZW1lZCBjb250cml2ZWQgdG8gYnJpbmcgb2RpdW0gdXBvbiB0aGUga2luZywgQWdlc2lsYcO8cywgd2lzaGluZyB0byBkZXNwaXRlIGhpbSBzdGlsbCBtb3JlLCBhcHBvaW50ZWQgaGltIGhpcyBjYXJ2ZXIgb2YgbWVhdHMsIGFuZCBvbmNlIHNhaWQsIHdlIGFyZSB0b2xkLCBpbiB0aGUgaGVhcmluZyBvZiBtYW55OiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm93IHRoZW4sIGxldCB0aGVzZSBzdXBwbGlhbnRzIGdvIG9mZiB0byBteSBjYXJ2ZXIgb2YgbWVhdHMgYW5kIHBheSB0aGVpciBjb3VydCB0byBoaW0uPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx5c2FuZGVyLCB0aGVuLCBkZWVwbHkgcGFpbmVkLCBzYWlkIHRvIGhpbTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc2VlLCBBZ2VzaWxhw7xzLCB0aGF0IHRob3Uga25vd2VzdCB2ZXJ5IHdlbGwgaG93IHRvIGh1bWJsZSB0aHkgZnJpZW5kcy48L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcyBpbmRlZWQsPC9xPiBzYWlkIHRoZSBraW5nLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvc2Ugd2hvIHdpc2ggdG8gYmUgbW9yZSBwb3dlcmZ1bCB0aGFuIEkgYW0uPC9xPiBUaGVuIEx5c2FuZGVyIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZWxsLCBwZXJoYXBzIHRoZXNlIHdvcmRzIG9mIHRoaW5lIGFyZSBmYWlyZXIgdGhhbiBteSBkZWVkcy4gR2l2ZSBtZSwgaG93ZXZlciwgc29tZSBwb3N0IGFuZCBwbGFjZSB3aGVyZSBJIHNoYWxsIGJlIG9mIHNlcnZpY2UgdG8gdGhlZSwgd2l0aG91dCB2ZXhpbmcgdGhlZS48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5cy4gMjMuOSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5c2FuZGVyPC90aXRsZT4sIHh4aWlpLiA5LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHlzLiAyMy45IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THlzYW5kZXI8L3RpdGxlPiwgeHhpaWkuIDkuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeXNhbmRlcjwvdGl0bGU+LCB4eGlpaS4gOS48L3RyYW5zbGF0aW9uPg=="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcyBoZSB3YXMgc2VudCB0byB0aGUgSGVsbGVzcG9udCwgYW5kIGJyb3VnaHQgb3ZlciB0byBBZ2VzaWxhw7xzIGZyb20gdGhlIGNvdW50cnkgb2YgUGhhcm5hYmF6dXMsIFNwaXRocmlkYXRlcywgYSBQZXJzaWFuLCB3aXRoIG11Y2ggbW9uZXkgYW5kIHR3byBodW5kcmVkIGhvcnNlbWVuLiBIZSBkaWQgbm90LCBob3dldmVyLCBsYXkgYXNpZGUgaGlzIHdyYXRoLCBidXQgY29udGludWVkIGhpcyByZXNlbnRtZW50LCBhbmQgZnJvbSB0aGlzIHRpbWUgb24gcGxhbm5lZCBob3cgaGUgbWlnaHQgd3Jlc3QgdGhlIGtpbmdkb20gZnJvbSB0aGUgdHdvIHJveWFsIGZhbWlsaWVzLCBhbmQgbWFrZSBhbGwgU3BhcnRhbnMgb25jZSBtb3JlIGVsaWdpYmxlIHRvIGl0LiBBbmQgaXQgd2FzIHRob3VnaHQgdGhhdCBoZSB3b3VsZCBoYXZlIGJyb3VnaHQgYWJvdXQgYSBncmVhdCBkaXN0dXJiYW5jZSBpbiBjb25zZXF1ZW5jZSBvZiB0aGlzIHF1YXJyZWwsIGhhZCBub3QgZGVhdGggb3ZlcnRha2VuIGhpbSBvbiBoaXMgZXhwZWRpdGlvbiBpbnRvIEJvZW90aWEuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDI0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeXNhbmRlcjwvdGl0bGU+LCB4eGl2LjwvYmlibD4tPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHlzLiAyOC4xIiB2YWxpZD0ieWVzIj54eHZpaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDI0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeXNhbmRlcjwvdGl0bGU+LCB4eGl2LjwvYmlibD4tPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THlzYW5kZXI8L3RpdGxlPiwgeHhpdi48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDI4LjEiIHZhbGlkPSJ5ZXMiPnh4dmlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgYW1iaXRpb3VzIG5hdHVyZXMgaW4gYSBjb21tb253ZWFsdGgsIGlmIHRoZXkgZG8gbm90IG9ic2VydmUgZHVlIGJvdW5kcywgd29yayBncmVhdGVyIGhhcm0gdGhhbiBnb29kLiBGb3IgZXZlbiB0aG91Z2ggTHlzYW5kZXIgd2FzIHRyb3VibGVzb21lLCBhcyBoZSB3YXMsIGluIGdyYXRpZnlpbmcgaGlzIGFtYml0aW9uIHVuc2Vhc29uYWJseSwgc3RpbGwsIEFnZXNpbGHDvHMgbXVzdCBzdXJlbHkgaGF2ZSBrbm93biBhbm90aGVyIGFuZCBtb3JlIGJsYW1lbGVzcyB3YXkgb2YgY29ycmVjdGluZyBhIG1hbiBvZiBoaWdoIHJlcHV0ZSBhbmQgYW1iaXRpb24gd2hlbiBoZSBlcnJlZC4gQXMgaXQgd2FzLCBpdCBzZWVtcyB0byBoYXZlIGJlZW4gZHVlIHRvIHRoZSBzYW1lIHBhc3Npb24gdGhhdCB0aGUgb25lIHdvdWxkIG5vdCByZWNvZ25pemUgdGhlIGF1dGhvcml0eSBvZiBoaXMgc3VwZXJpb3IsIG5vciB0aGUgb3RoZXIgZW5kdXJlIHRoZSBiZWluZyBpZ25vcmVkIGJ5IGhpcyBmcmllbmQgYW5kIGNvbXJhZGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QgVGlzYXBoZXJuZXMgd2FzIGFmcmFpZCBvZiBBZ2VzaWxhw7xzLCBhbmQgbWFkZSBhIHRyZWF0eSBpbiB3aGljaCBoZSBwcm9taXNlZCBoaW0gdG8gbWFrZSB0aGUgR3JlZWsgY2l0aWVzIGZyZWUgYW5kIGluZGVwZW5kZW50IG9mIHRoZSBLaW5nLiBBZnRlcndhcmRzLCBob3dldmVyLCB3aGVuIGhlIHdhcyBjb252aW5jZWQgdGhhdCBoZSBoYWQgYSBzdWZmaWNpZW50IGZvcmNlLCBoZSBkZWNsYXJlZCB3YXIsIGFuZCBBZ2VzaWxhw7xzIGdsYWRseSBhY2NlcHRlZCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGhhZCBncmVhdCBleHBlY3RhdGlvbnMgZnJvbSBoaXMgZXhwZWRpdGlvbiwgYW5kIGhlIHRob3VnaHQgaXQgd291bGQgYmUgYSBkaXNncmFjZWZ1bCB0aGluZyBpZiwgd2hlcmVhcyBYZW5vcGhvbiBhbmQgaGlzIFRlbiBUaG91c2FuZCBoYWQgcGVuZXRyYXRlZCB0byB0aGUgc2VhLCBhbmQgdmFucXVpc2hlZCB0aGUgS2luZyBqdXN0IGFzIG9mdGVuIGFzIHRoZXkgdGhlbXNlbHZlcyBkZXNpcmVkLCBoZSwgaW4gY29tbWFuZCBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIHdobyBoYWQgdGhlIHN1cHJlbWFjeSBvbiBzZWEgYW5kIGxhbmQsIHNob3VsZCBwZXJmb3JtIG5vIGRlZWQgd29ydGh5IG9mIHJlbWVtYnJhbmNlIGluIHRoZSBleWVzIG9mIHRoZSBIZWxsZW5lcy4gQXQgb25jZSwgdGhlbiwgcmVxdWl0aW5nIHRoZSBwZXJqdXJ5IG9mIFRpc2FwaGVybmVzIHdpdGggYSByaWdodGVvdXMgZGVjZXB0aW9uLCBoZSBnYXZlIG91dCB3b3JkIHRoYXQgaGUgd2FzIGdvaW5nIHRvIGxlYWQgaGlzIHRyb29wcyBhZ2FpbnN0IENhcmlhOyBidXQgd2hlbiB0aGUgQmFyYmFyaWFuIGhhZCBhc3NlbWJsZWQgaGlzIGZvcmNlcyB0aGVyZSwgaGUgc2V0IG91dCBhbmQgbWFkZSBhbiBpbmN1cnNpb24gaW50byBQaHJ5Z2lhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBjYXB0dXJlZCBtYW55IGNpdGllcyBhbmQgbWFkZSBoaW1zZWxmIG1hc3RlciBvZiBib3VuZGxlc3MgdHJlYXN1cmUsIHRodXMgc2hvd2luZyBwbGFpbmx5IHRvIGhpcyBmcmllbmRzIHRoYXQgdGhlIHZpb2xhdGlvbiBvZiBhIHRyZWF0eSBpcyBjb250ZW1wdCBmb3IgdGhlIGdvZHMsIGJ1dCB0aGF0IGluIG91dHdpdHRpbmcgb25lJ3MgZW5lbWllcyB0aGVyZSBpcyBub3Qgb25seSBqdXN0aWNlLCBidXQgYWxzbyBncmVhdCBnbG9yeSwgYW5kIHByb2ZpdCBtaXhlZCB3aXRoIHBsZWFzdXJlLiBIb3dldmVyLCBzaW5jZSBoZSB3YXMgaW5mZXJpb3IgaW4gY2F2YWxyeSBhbmQgaGlzIHNhY3JpZmljZXMgd2VyZSB1bnByb3BpdGlvdXMsIGhlIHJldGlyZWQgdG8gRXBoZXN1cyBhbmQgYmVnYW4gdG8gZ2V0IHRvZ2V0aGVyIGEgZm9yY2Ugb2YgaG9yc2VtZW4sIGNvbW1hbmRpbmcgdGhlIHdlbGwtdG8tZG8sIGluIGNhc2UgdGhleSBkaWQgbm90IHdpc2ggdG8gcGVyZm9ybSBtaWxpdGFyeSBzZXJ2aWNlIHRoZW1zZWx2ZXMsIHRvIGZ1cm5pc2ggaW5zdGVhZCBldmVyeSBtYW4gYSBob3JzZSBhbmQgcmlkZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgbWFueSB3aG8gY2hvc2UgdGhpcyBjb3Vyc2UsIGFuZCBzbyBpdCBjYW1lIHRvIHBhc3MgdGhhdCBBZ2VzaWxhw7xzIHF1aWNrbHkgaGFkIGEgbGFyZ2UgZm9yY2Ugb2Ygd2FybGlrZSBob3JzZW1lbiBpbnN0ZWFkIG9mIHdvcnRobGVzcyBtZW4tYXQtYXJtcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMTUiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDE1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBGb3IgdGhvc2Ugd2hvIGRpZCBub3Qgd2lzaCB0byBkbyBtaWxpdGFyeSBzZXJ2aWNlIGhpcmVkIHRob3NlIHdobyBkaWQsIGFuZCB0aG9zZSB3aG8gZGlkIG5vdCB3aXNoIHRvIHNlcnZlIGFzIGhvcnNlbWVuIGhpcmVkIHRob3NlIHdobyBkaWQuIEluZGVlZCwgQWdlc2lsYcO8cyB0aG91Z2h0IEFnYW1lbW5vbiBoYWQgZG9uZSB3ZWxsIGluIGFjY2VwdGluZyBhIGdvb2QgbWFyZSBhbmQgZnJlZWluZyBhIGNvd2FyZGx5IHJpY2ggbWFuIGZyb20gbWlsaXRhcnkgc2VydmljZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMjMuMjk2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPklsaWFkPC90aXRsZT4sIHh4aWlpLiAyOTYgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG9uY2Ugd2hlbiwgYnkgaGlzIG9yZGVycywgaGlzIHByaXNvbmVycyBvZiB3YXIgd2VyZSBzdHJpcHBlZCBvZiB0aGVpciBjbG90aGluZyBhbmQgb2ZmZXJlZCBmb3Igc2FsZSBieSB0aGUgdmVuZGVycyBvZiBib290eSwgdGhlaXIgY2xvdGhpbmcgZm91bmQgbWFueSBwdXJjaGFzZXJzLCBidXQgdGhlaXIgbmFrZWQgYm9kaWVzLCB3aGljaCB3ZXJlIHV0dGVybHkgd2hpdGUgYW5kIGRlbGljYXRlLCBvd2luZyB0byB0aGVpciBlZmZlbWluYXRlIGhhYml0cywgd2VyZSByaWRpY3VsZWQgYXMgdXNlbGVzcyBhbmQgd29ydGhsZXNzLiBUaGVuIEFnZXNpbGHDvHMsIG5vdGljaW5nLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXNlIGFyZSB0aGUgbWVuIHdpdGggd2hvbSB5b3UgZmlnaHQsIGFuZCB0aGVzZSB0aGUgdGhpbmdzIGZvciB3aGljaCB5b3UgZmlnaHQuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBmaXJzdCBUaXNhcGhlcm5lcyB3YXMgYWZyYWlkIG9mIEFnZXNpbGHDvHMsIGFuZCBtYWRlIGEgdHJlYXR5IGluIHdoaWNoIGhlIHByb21pc2VkIGhpbSB0byBtYWtlIHRoZSBHcmVlayBjaXRpZXMgZnJlZSBhbmQgaW5kZXBlbmRlbnQgb2YgdGhlIEtpbmcuIEFmdGVyd2FyZHMsIGhvd2V2ZXIsIHdoZW4gaGUgd2FzIGNvbnZpbmNlZCB0aGF0IGhlIGhhZCBhIHN1ZmZpY2llbnQgZm9yY2UsIGhlIGRlY2xhcmVkIHdhciwgYW5kIEFnZXNpbGHDvHMgZ2xhZGx5IGFjY2VwdGVkIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoYWQgZ3JlYXQgZXhwZWN0YXRpb25zIGZyb20gaGlzIGV4cGVkaXRpb24sIGFuZCBoZSB0aG91Z2h0IGl0IHdvdWxkIGJlIGEgZGlzZ3JhY2VmdWwgdGhpbmcgaWYsIHdoZXJlYXMgWGVub3Bob24gYW5kIGhpcyBUZW4gVGhvdXNhbmQgaGFkIHBlbmV0cmF0ZWQgdG8gdGhlIHNlYSwgYW5kIHZhbnF1aXNoZWQgdGhlIEtpbmcganVzdCBhcyBvZnRlbiBhcyB0aGV5IHRoZW1zZWx2ZXMgZGVzaXJlZCwgaGUsIGluIGNvbW1hbmQgb2YgdGhlIExhY2VkYWVtb25pYW5zLCB3aG8gaGFkIHRoZSBzdXByZW1hY3kgb24gc2VhIGFuZCBsYW5kLCBzaG91bGQgcGVyZm9ybSBubyBkZWVkIHdvcnRoeSBvZiByZW1lbWJyYW5jZSBpbiB0aGUgZXllcyBvZiB0aGUgSGVsbGVuZXMuIEF0IG9uY2UsIHRoZW4sIHJlcXVpdGluZyB0aGUgcGVyanVyeSBvZiBUaXNhcGhlcm5lcyB3aXRoIGEgcmlnaHRlb3VzIGRlY2VwdGlvbiwgaGUgZ2F2ZSBvdXQgd29yZCB0aGF0IGhlIHdhcyBnb2luZyB0byBsZWFkIGhpcyB0cm9vcHMgYWdhaW5zdCBDYXJpYTsgYnV0IHdoZW4gdGhlIEJhcmJhcmlhbiBoYWQgYXNzZW1ibGVkIGhpcyBmb3JjZXMgdGhlcmUsIGhlIHNldCBvdXQgYW5kIG1hZGUgYW4gaW5jdXJzaW9uIGludG8gUGhyeWdpYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGNhcHR1cmVkIG1hbnkgY2l0aWVzIGFuZCBtYWRlIGhpbXNlbGYgbWFzdGVyIG9mIGJvdW5kbGVzcyB0cmVhc3VyZSwgdGh1cyBzaG93aW5nIHBsYWlubHkgdG8gaGlzIGZyaWVuZHMgdGhhdCB0aGUgdmlvbGF0aW9uIG9mIGEgdHJlYXR5IGlzIGNvbnRlbXB0IGZvciB0aGUgZ29kcywgYnV0IHRoYXQgaW4gb3V0d2l0dGluZyBvbmUncyBlbmVtaWVzIHRoZXJlIGlzIG5vdCBvbmx5IGp1c3RpY2UsIGJ1dCBhbHNvIGdyZWF0IGdsb3J5LCBhbmQgcHJvZml0IG1peGVkIHdpdGggcGxlYXN1cmUuIEhvd2V2ZXIsIHNpbmNlIGhlIHdhcyBpbmZlcmlvciBpbiBjYXZhbHJ5IGFuZCBoaXMgc2FjcmlmaWNlcyB3ZXJlIHVucHJvcGl0aW91cywgaGUgcmV0aXJlZCB0byBFcGhlc3VzIGFuZCBiZWdhbiB0byBnZXQgdG9nZXRoZXIgYSBmb3JjZSBvZiBob3JzZW1lbiwgY29tbWFuZGluZyB0aGUgd2VsbC10by1kbywgaW4gY2FzZSB0aGV5IGRpZCBub3Qgd2lzaCB0byBwZXJmb3JtIG1pbGl0YXJ5IHNlcnZpY2UgdGhlbXNlbHZlcywgdG8gZnVybmlzaCBpbnN0ZWFkIGV2ZXJ5IG1hbiBhIGhvcnNlIGFuZCByaWRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgbWFueSB3aG8gY2hvc2UgdGhpcyBjb3Vyc2UsIGFuZCBzbyBpdCBjYW1lIHRvIHBhc3MgdGhhdCBBZ2VzaWxhw7xzIHF1aWNrbHkgaGFkIGEgbGFyZ2UgZm9yY2Ugb2Ygd2FybGlrZSBob3JzZW1lbiBpbnN0ZWFkIG9mIHdvcnRobGVzcyBtZW4tYXQtYXJtcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMy40LjE1IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDE1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBGb3IgdGhvc2Ugd2hvIGRpZCBub3Qgd2lzaCB0byBkbyBtaWxpdGFyeSBzZXJ2aWNlIGhpcmVkIHRob3NlIHdobyBkaWQsIGFuZCB0aG9zZSB3aG8gZGlkIG5vdCB3aXNoIHRvIHNlcnZlIGFzIGhvcnNlbWVuIGhpcmVkIHRob3NlIHdobyBkaWQuIEluZGVlZCwgQWdlc2lsYcO8cyB0aG91Z2h0IEFnYW1lbW5vbiBoYWQgZG9uZSB3ZWxsIGluIGFjY2VwdGluZyBhIGdvb2QgbWFyZSBhbmQgZnJlZWluZyBhIGNvd2FyZGx5IHJpY2ggbWFuIGZyb20gbWlsaXRhcnkgc2VydmljZS4KCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMy40LjE1IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDE1LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDE1Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDIzLjI5NiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHh4aWlpLiAyOTYgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAyMy4yOTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB4eGlpaS4gMjk2IGZmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeHhpaWkuIDI5NiBmZi48L3RyYW5zbGF0aW9uPg=="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbmNlIHdoZW4sIGJ5IGhpcyBvcmRlcnMsIGhpcyBwcmlzb25lcnMgb2Ygd2FyIHdlcmUgc3RyaXBwZWQgb2YgdGhlaXIgY2xvdGhpbmcgYW5kIG9mZmVyZWQgZm9yIHNhbGUgYnkgdGhlIHZlbmRlcnMgb2YgYm9vdHksIHRoZWlyIGNsb3RoaW5nIGZvdW5kIG1hbnkgcHVyY2hhc2VycywgYnV0IHRoZWlyIG5ha2VkIGJvZGllcywgd2hpY2ggd2VyZSB1dHRlcmx5IHdoaXRlIGFuZCBkZWxpY2F0ZSwgb3dpbmcgdG8gdGhlaXIgZWZmZW1pbmF0ZSBoYWJpdHMsIHdlcmUgcmlkaWN1bGVkIGFzIHVzZWxlc3MgYW5kIHdvcnRobGVzcy4gVGhlbiBBZ2VzaWxhw7xzLCBub3RpY2luZywgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXNlIGFyZSB0aGUgbWVuIHdpdGggd2hvbSB5b3UgZmlnaHQsIGFuZCB0aGVzZSB0aGUgdGhpbmdzIGZvciB3aGljaCB5b3UgZmlnaHQuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBzZWFzb24gYWdhaW4gZmF2b3VyZWQgYW4gaW5jdXJzaW9uIGludG8gdGhlIGVuZW15J3MgY291bnRyeSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBzcHJpbmcgb2YgMzk1IEIuQy47IGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMTYiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDE2IGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBZ2VzaWxhw7xzIGdhdmUgb3V0IHRoYXQgaGUgd291bGQgbWFyY2ggaW50byBMeWRpYSwgYW5kIHRoaXMgdGltZSBoZSB3YXMgbm90IHRyeWluZyB0byBkZWNlaXZlIFRpc2FwaGVybmVzLiBUaGF0IHNhdHJhcCwgaG93ZXZlciwgdXR0ZXJseSBkZWx1ZGVkIGhpbXNlbGYsIGluIHRoYXQgaGUgZGlzYmVsaWV2ZWQgQWdlc2lsYcO8cyBiZWNhdXNlIG9mIGhpcyBmb3JtZXIgdHJpY2ssIGFuZCB0aG91Z2h0IHRoYXQgbm93LCBhdCBhbnkgcmF0ZSwgdGhlIGtpbmcgd291bGQgYXR0YWNrIENhcmlhLCBhbHRob3VnaCBpdCB3YXMgaWxsLXN1aXRlZCBmb3IgY2F2YWxyeSwgYW5kIGhlIHdhcyBmYXIgaW5mZXJpb3IgaW4gdGhhdCBhcm0gb2YgdGhlIHNlcnZpY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZ2VzaWxhw7xzLCBhcyBoZSBoYWQgZ2l2ZW4gb3V0IHRoYXQgaGUgd291bGQgZG8sIG1hcmNoZWQgaW50byB0aGUgcGxhaW4gb2YgU2FyZGlzLCBhbmQgdGhlbiBUaXNhcGhlcm5lcyB3YXMgZm9yY2VkIHRvIGhhc3RlbiB0aGl0aGVyIGZyb20gQ2FyaWEgd2l0aCBhaWQgYW5kIHJlbGllZjsgYW5kIHJpZGluZyB0aHJvdWdoIHRoZSBwbGFpbiB3aXRoIGhpcyBjYXZhbHJ5LCBoZSBjdXQgb2ZmIG1hbnkgc3RyYWdnbGluZyBwbHVuZGVyZXJzIHRoZXJlLiBBZ2VzaWxhw7xzLCBhY2NvcmRpbmdseSwgcmVmbGVjdGluZyB0aGF0IHRoZSBlbmVteSdzIGluZmFudHJ5IGhhZCBub3QgeWV0IGNvbWUgdXAsIHdoaWxlIGhpcyBvd24gZm9yY2VzIHdlcmUgY29tcGxldGUsIG1hZGUgaGFzdGUgdG8gZ2l2ZSBiYXR0bGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIG1pbmdsZWQgaGlzIGxpZ2h0LWFybWVkIGluZmFudHJ5IHdpdGggaGlzIGhvcnNlbWVuLCBhbmQgb3JkZXJlZCB0aGVtIHRvIGNoYXJnZSBhdCBmdWxsIHNwZWVkIGFuZCBhc3NhdWx0IHRoZSBlbmVteSwgd2hpbGUgaGUgaGltc2VsZiBhdCBvbmNlIGxlZCB1cCBoaXMgbWVuLWF0LWFybXMuIFRoZSBCYXJiYXJpYW5zIHdlcmUgcHV0IHRvIGZsaWdodCwgYW5kIHRoZSBHcmVla3MsIGZvbGxvd2luZyBjbG9zZSB1cG9uIHRoZW0sIHRvb2sgdGhlaXIgY2FtcCBhbmQgc2xldyBtYW55IG9mIHRoZW0uIEFzIGEgcmVzdWx0IG9mIHRoaXMgYmF0dGxlLCB0aGUgR3JlZWtzIGNvdWxkIG5vdCBvbmx5IGhhcnJ5IHRoZSBjb3VudHJ5IG9mIHRoZSBLaW5nIHdpdGhvdXQgZmVhciwgYnV0IGhhZCB0aGUgc2F0aXNmYWN0aW9uIG9mIHNlZWluZyBkdWUgcHVuaXNobWVudCBpbmZsaWN0ZWQgdXBvbiBUaXNhcGhlcm5lcywgYW4gYWJvbWluYWJsZSBtYW4sIGFuZCBtb3N0IGhhdGVmdWwgdG8gdGhlIEdyZWVrIHJhY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgS2luZyBhdCBvbmNlIHNlbnQgVGl0aHJhdXN0ZXMgYWZ0ZXIgaGltLCB3aG8gY3V0IG9mZiBoaXMgaGVhZCwgYW5kIGFza2VkIEFnZXNpbGHDvHMgdG8gbWFrZSB0ZXJtcyBhbmQgc2FpbCBiYWNrIGhvbWUsIG9mZmVyaW5nIGhpbSBtb25leSBhdCB0aGUgaGFuZHMgb2YgZW52b3lzLiBCdXQgQWdlc2lsYcO8cyBhbnN3ZXJlZCB0aGF0IGl0IHdhcyBmb3IgaGlzIGNpdHkgdG8gbWFrZSBwZWFjZSwgYW5kIHRoYXQgZm9yIGhpcyBvd24gcGFydCwgaGUgdG9vayBtb3JlIHBsZWFzdXJlIGluIGVucmljaGluZyBoaXMgc29sZGllcnMgdGhhbiBpbiBnZXR0aW5nIHJpY2ggaGltc2VsZjsgbW9yZW92ZXIsIHRoZSBHcmVla3MsIGhlIHNhaWQsIHRob3VnaHQgaXQgaG9ub3VyYWJsZSB0byB0YWtlLCBub3QgZ2lmdHMsIGJ1dCBzcG9pbHMsIGZyb20gdGhlaXIgZW5lbWllcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzLCBkZXNpcmluZyB0byBncmF0aWZ5IFRpdGhyYXVzdGVzLCBiZWNhdXNlIGhlIGhhZCBwdW5pc2hlZCBUaXNhcGhlcm5lcywgdGhhdCBjb21tb24gZW5lbXkgb2YgdGhlIEdyZWVrcywgaGUgbGVkIGhpcyBhcm15IGJhY2sgaW50byBQaHJ5Z2lhLCB0YWtpbmcgdGhpcnR5IHRhbGVudHMgZnJvbSB0aGUgdmljZXJveSB0byBjb3ZlciB0aGUgZXhwZW5zZXMgb2YgdGhlIG1hcmNoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgc2Vhc29uIGFnYWluIGZhdm91cmVkIGFuIGluY3Vyc2lvbiBpbnRvIHRoZSBlbmVteSdzIGNvdW50cnksCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBzcHJpbmcgb2YgMzk1IEIuQy47IGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNC4xNiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaWlpLiA0LCAxNiBmZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQWdlc2lsYcO8cyBnYXZlIG91dCB0aGF0IGhlIHdvdWxkIG1hcmNoIGludG8gTHlkaWEsIGFuZCB0aGlzIHRpbWUgaGUgd2FzIG5vdCB0cnlpbmcgdG8gZGVjZWl2ZSBUaXNhcGhlcm5lcy4gVGhhdCBzYXRyYXAsIGhvd2V2ZXIsIHV0dGVybHkgZGVsdWRlZCBoaW1zZWxmLCBpbiB0aGF0IGhlIGRpc2JlbGlldmVkIEFnZXNpbGHDvHMgYmVjYXVzZSBvZiBoaXMgZm9ybWVyIHRyaWNrLCBhbmQgdGhvdWdodCB0aGF0IG5vdywgYXQgYW55IHJhdGUsIHRoZSBraW5nIHdvdWxkIGF0dGFjayBDYXJpYSwgYWx0aG91Z2ggaXQgd2FzIGlsbC1zdWl0ZWQgZm9yIGNhdmFscnksIGFuZCBoZSB3YXMgZmFyIGluZmVyaW9yIGluIHRoYXQgYXJtIG9mIHRoZSBzZXJ2aWNlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMy40LjE2IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDE2IGZmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDE2IGZmLjwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZ2VzaWxhw7xzLCBhcyBoZSBoYWQgZ2l2ZW4gb3V0IHRoYXQgaGUgd291bGQgZG8sIG1hcmNoZWQgaW50byB0aGUgcGxhaW4gb2YgU2FyZGlzLCBhbmQgdGhlbiBUaXNhcGhlcm5lcyB3YXMgZm9yY2VkIHRvIGhhc3RlbiB0aGl0aGVyIGZyb20gQ2FyaWEgd2l0aCBhaWQgYW5kIHJlbGllZjsgYW5kIHJpZGluZyB0aHJvdWdoIHRoZSBwbGFpbiB3aXRoIGhpcyBjYXZhbHJ5LCBoZSBjdXQgb2ZmIG1hbnkgc3RyYWdnbGluZyBwbHVuZGVyZXJzIHRoZXJlLiBBZ2VzaWxhw7xzLCBhY2NvcmRpbmdseSwgcmVmbGVjdGluZyB0aGF0IHRoZSBlbmVteSdzIGluZmFudHJ5IGhhZCBub3QgeWV0IGNvbWUgdXAsIHdoaWxlIGhpcyBvd24gZm9yY2VzIHdlcmUgY29tcGxldGUsIG1hZGUgaGFzdGUgdG8gZ2l2ZSBiYXR0bGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIG1pbmdsZWQgaGlzIGxpZ2h0LWFybWVkIGluZmFudHJ5IHdpdGggaGlzIGhvcnNlbWVuLCBhbmQgb3JkZXJlZCB0aGVtIHRvIGNoYXJnZSBhdCBmdWxsIHNwZWVkIGFuZCBhc3NhdWx0IHRoZSBlbmVteSwgd2hpbGUgaGUgaGltc2VsZiBhdCBvbmNlIGxlZCB1cCBoaXMgbWVuLWF0LWFybXMuIFRoZSBCYXJiYXJpYW5zIHdlcmUgcHV0IHRvIGZsaWdodCwgYW5kIHRoZSBHcmVla3MsIGZvbGxvd2luZyBjbG9zZSB1cG9uIHRoZW0sIHRvb2sgdGhlaXIgY2FtcCBhbmQgc2xldyBtYW55IG9mIHRoZW0uIEFzIGEgcmVzdWx0IG9mIHRoaXMgYmF0dGxlLCB0aGUgR3JlZWtzIGNvdWxkIG5vdCBvbmx5IGhhcnJ5IHRoZSBjb3VudHJ5IG9mIHRoZSBLaW5nIHdpdGhvdXQgZmVhciwgYnV0IGhhZCB0aGUgc2F0aXNmYWN0aW9uIG9mIHNlZWluZyBkdWUgcHVuaXNobWVudCBpbmZsaWN0ZWQgdXBvbiBUaXNhcGhlcm5lcywgYW4gYWJvbWluYWJsZSBtYW4sIGFuZCBtb3N0IGhhdGVmdWwgdG8gdGhlIEdyZWVrIHJhY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgS2luZyBhdCBvbmNlIHNlbnQgVGl0aHJhdXN0ZXMgYWZ0ZXIgaGltLCB3aG8gY3V0IG9mZiBoaXMgaGVhZCwgYW5kIGFza2VkIEFnZXNpbGHDvHMgdG8gbWFrZSB0ZXJtcyBhbmQgc2FpbCBiYWNrIGhvbWUsIG9mZmVyaW5nIGhpbSBtb25leSBhdCB0aGUgaGFuZHMgb2YgZW52b3lzLiBCdXQgQWdlc2lsYcO8cyBhbnN3ZXJlZCB0aGF0IGl0IHdhcyBmb3IgaGlzIGNpdHkgdG8gbWFrZSBwZWFjZSwgYW5kIHRoYXQgZm9yIGhpcyBvd24gcGFydCwgaGUgdG9vayBtb3JlIHBsZWFzdXJlIGluIGVucmljaGluZyBoaXMgc29sZGllcnMgdGhhbiBpbiBnZXR0aW5nIHJpY2ggaGltc2VsZjsgbW9yZW92ZXIsIHRoZSBHcmVla3MsIGhlIHNhaWQsIHRob3VnaHQgaXQgaG9ub3VyYWJsZSB0byB0YWtlLCBub3QgZ2lmdHMsIGJ1dCBzcG9pbHMsIGZyb20gdGhlaXIgZW5lbWllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgZGVzaXJpbmcgdG8gZ3JhdGlmeSBUaXRocmF1c3RlcywgYmVjYXVzZSBoZSBoYWQgcHVuaXNoZWQgVGlzYXBoZXJuZXMsIHRoYXQgY29tbW9uIGVuZW15IG9mIHRoZSBHcmVla3MsIGhlIGxlZCBoaXMgYXJteSBiYWNrIGludG8gUGhyeWdpYSwgdGFraW5nIHRoaXJ0eSB0YWxlbnRzIGZyb20gdGhlIHZpY2Vyb3kgdG8gY292ZXIgdGhlIGV4cGVuc2VzIG9mIHRoZSBtYXJjaC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5PbiB0aGUgcm9hZCBoZSByZWNlaXZlZCBhIGRpc3BhdGNoLXJvbGwgZnJvbSB0aGUgbWFnaXN0cmF0ZXMgYXQgaG9tZSwgd2hpY2ggYmFkZSBoaW0gYXNzdW1lIGNvbnRyb2wgb2YgdGhlIG5hdnkgYXMgd2VsbCBhcyBvZiB0aGUgYXJteS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMy40LjI3IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDI3IGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGlzIHdhcyBhbiBob25vdXIgd2hpY2ggbm8gb25lIGV2ZXIgcmVjZWl2ZWQgYnV0IEFnZXNpbGHDvHMuIEFuZCBoZSB3YXMgY29uZmVzc2VkbHkgdGhlIGdyZWF0ZXN0IGFuZCBtb3N0IGlsbHVzdHJpb3VzIG1hbiBvZiBoaXMgdGltZSwgYXMgVGhlb3BvbXB1cyBhbHNvIGhhcyBzb21ld2hlcmUgc2FpZCwgYWx0aG91Z2ggaGUgcHJpZGVkIGhpbXNlbGYgbW9yZSBvbiBoaXMgdmlydHVlcyB0aGFuIG9uIGhpcyBoaWdoIGNvbW1hbmQuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIHB1dHRpbmcgUGVpc2FuZGVyIGluIGNoYXJnZSBvZiB0aGUgbmF2eSBhdCB0aGlzIHRpbWUsIGhlIHdhcyB0aG91Z2h0IHRvIGhhdmUgbWFkZSBhIG1pc3Rha2U7IGZvciB0aGVyZSB3ZXJlIG9sZGVyIGFuZCBtb3JlIGNvbXBldGVudCBtZW4gdG8gYmUgaGFkLCBhbmQgeWV0IGhlIGdhdmUgdGhlIGFkbWlyYWx0eSB0byBoaW0sIG5vdCBvdXQgb2YgcmVnYXJkIGZvciB0aGUgcHVibGljIGdvb2QsIGJ1dCBpbiByZWNvZ25pdGlvbiBvZiB0aGUgY2xhaW1zIG9mIHJlbGF0aW9uc2hpcCBhbmQgdG8gZ3JhdGlmeSBoaXMgd2lmZSwgd2hvIHdhcyBhIHNpc3RlciBvZiBQZWlzYW5kZXIuCgkJCTwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMjciIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGlpaS4gNCwgMjcgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoaXMgd2FzIGFuIGhvbm91ciB3aGljaCBubyBvbmUgZXZlciByZWNlaXZlZCBidXQgQWdlc2lsYcO8cy4gQW5kIGhlIHdhcyBjb25mZXNzZWRseSB0aGUgZ3JlYXRlc3QgYW5kIG1vc3QgaWxsdXN0cmlvdXMgbWFuIG9mIGhpcyB0aW1lLCBhcyBUaGVvcG9tcHVzIGFsc28gaGFzIHNvbWV3aGVyZSBzYWlkLCBhbHRob3VnaCBoZSBwcmlkZWQgaGltc2VsZiBtb3JlIG9uIGhpcyB2aXJ0dWVzIHRoYW4gb24gaGlzIGhpZ2ggY29tbWFuZC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNC4yNyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaWlpLiA0LCAyNyBmZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaWlpLiA0LCAyNyBmZi48L3RyYW5zbGF0aW9uPg=="
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBwdXR0aW5nIFBlaXNhbmRlciBpbiBjaGFyZ2Ugb2YgdGhlIG5hdnkgYXQgdGhpcyB0aW1lLCBoZSB3YXMgdGhvdWdodCB0byBoYXZlIG1hZGUgYSBtaXN0YWtlOyBmb3IgdGhlcmUgd2VyZSBvbGRlciBhbmQgbW9yZSBjb21wZXRlbnQgbWVuIHRvIGJlIGhhZCwgYW5kIHlldCBoZSBnYXZlIHRoZSBhZG1pcmFsdHkgdG8gaGltLCBub3Qgb3V0IG9mIHJlZ2FyZCBmb3IgdGhlIHB1YmxpYyBnb29kLCBidXQgaW4gcmVjb2duaXRpb24gb2YgdGhlIGNsYWltcyBvZiByZWxhdGlvbnNoaXAgYW5kIHRvIGdyYXRpZnkgaGlzIHdpZmUsIHdobyB3YXMgYSBzaXN0ZXIgb2YgUGVpc2FuZGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgaGltc2VsZiwgaGUgc3RhdGlvbmVkIGhpcyBhcm15IGluIHRoZSBwcm92aW5jZSBvZiBQaGFybmFiYXp1cwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIGZhbGwgb2YgMzk1IEIuQy47IGNmLiAmbHQ7PGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4xLjEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gMSwgMSBmZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4sIHdoZXJlIGhlIG5vdCBvbmx5IGxpdmVkIGluIHVuaXZlcnNhbCBwbGVudHksIGJ1dCBhbHNvIGFjY3VtdWxhdGVkIG11Y2ggbW9uZXkuIEhlIGFsc28gYWR2YW5jZWQgdG8gdGhlIGNvbmZpbmVzIG9mIFBhcGhpYWdvbmlhIGFuZCBicm91Z2h0IENvdHlzLCB0aGUga2luZyBvZiB0aGUgUGFwaGxhZ29uaWFucywgaW50byBhbGxpYW5jZSB3aXRoIGhpbSwgZm9yIGhpcyB2aXJ0dWVzLCBhbmQgdGhlIGNvbmZpZGVuY2Ugd2hpY2ggaGUgaW5zcGlyZWQsIGluY2xpbmVkIHRoZSBraW5nIHRvIGRlc2lyZSBoaXMgZnJpZW5kc2hpcC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U3BpdGhyaWRhdGVzIGFsc28sIGZyb20gdGhlIHRpbWUgd2hlbiBoZSBhYmFuZG9uZWQgUGhhcm5hYmF6dXMgYW5kIGNhbWUgdG8gQWdlc2lsYcO8cywgYWx3YXlzIGFjY29tcGFuaWVkIGhpbSBpbiBoaXMgam91cm5leXMgYW5kIGV4cGVkaXRpb25zLiBTcGl0aHJpZGF0ZXMgaGFkIGEgc29uLCBhIHZlcnkgYmVhdXRpZnVsIGJveSwgbmFtZWQgTWVnYWJhdGVzLCBvZiB3aG9tIEFnZXNpbGHDvHMgd2FzIGFyZGVudGx5IGVuYW1vdXJlZCwgYW5kIGEgYmVhdXRpZnVsIGRhdWdodGVyIGFsc28sIGEgbWFpZGVuIG9mIG1hcnJpYWdlYWJsZSBhZ2UuIFRoaXMgZGF1Z2h0ZXIgQWdlc2lsYcO8cyBwZXJzdWFkZWQgQ290eXMgdG8gbWFycnksIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVuIHJlY2VpdmluZyBmcm9tIGhpbSBhIHRob3VzYW5kIGhvcnNlbWVuIGFuZCB0d28gdGhvdXNhbmQgdGFyZ2V0ZWVycywgaGUgcmV0aXJlZCBhZ2FpbiBpbnRvIFBocnlnaWEsIGFuZCBoYXJhc3NlZCB0aGUgY291bnRyeSBvZiBQaGFybmFiYXp1cywgd2hvIGRpZCBub3Qgc3RhbmQgaGlzIGdyb3VuZCBub3IgdHJ1c3QgaW4gaGlzIGRlZmVuY2VzLCBidXQgYWx3YXlzIGtlcHQgbW9zdCBvZiBoaXMgdmFsdWVkIGFuZCBwcmVjaW91cyB0aGluZ3Mgd2l0aCBoaW0sIGFuZCB3aXRoZHJldyBvciBmbGVkIGZyb20gb25lIHBhcnQgb2YgdGhlIGNvdW50cnkgdG8gYW5vdGhlciwgaGF2aW5nIG5vIGFiaWRpbmcgcGxhY2UuIEF0IGxhc3QgU3BpdGhyaWRhdGVzLCB3aG8gaGFkIG5hcnJvd2x5IHdhdGNoZWQgaGltLCBpbiBjb25qdW5jdGlvbiB3aXRoIEhlcmlwcGlkYXMgdGhlIFNwYXJ0YW4sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgbGVhZGVyIG9mIHRoZSBzZWNvbmQgY29tcGFueSBvZiB0aGlydHkgU3BhcnRhbiBjb3Vuc2VsbG9ycyBzZW50IG91dCBpbiB0aGUgc3ByaW5nIG9mIDM5NSBCLkMuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMjAiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDIwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzZWl6ZWQgaGlzIGNhbXAgYW5kIG1hZGUgaGltc2VsZiBtYXN0ZXIgb2YgYWxsIGhpcyB0cmVhc3VyZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIGhvd2V2ZXIsIEhlcmlwcGlkYXMsIHdobyBoYWQgdG9vIHNoYXJwIGFuIGV5ZSB0byB0aGUgYm9vdHkgdGhhdCB3YXMgc3RvbGVuLCBhbmQgZm9yY2VkIHRoZSBCYXJiYXJpYW5zIHRvIHJlc3RvcmUgaXQsIHdhdGNoaW5nIG92ZXIgYW5kIGVucXVpcmluZyBpbnRvIGV2ZXJ5dGhpbmcsIGV4YXNwZXJhdGVkIFNwaXRocmlkYXRlcywgc28gdGhhdCBoZSBtYXJjaGVkIG9mZiBhdCBvbmNlIHRvIFNhcmRpcyB3aXRoIHRoZSBQYXBobGFnb25pYW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIGhpbXNlbGYsIGhlIHN0YXRpb25lZCBoaXMgYXJteSBpbiB0aGUgcHJvdmluY2Ugb2YgUGhhcm5hYmF6dXMKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIGZhbGwgb2YgMzk1IEIuQy47IGNmLiAmbHQ7PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjEuMSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDEsIDEgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+LCB3aGVyZSBoZSBub3Qgb25seSBsaXZlZCBpbiB1bml2ZXJzYWwgcGxlbnR5LCBidXQgYWxzbyBhY2N1bXVsYXRlZCBtdWNoIG1vbmV5LiBIZSBhbHNvIGFkdmFuY2VkIHRvIHRoZSBjb25maW5lcyBvZiBQYXBoaWFnb25pYSBhbmQgYnJvdWdodCBDb3R5cywgdGhlIGtpbmcgb2YgdGhlIFBhcGhsYWdvbmlhbnMsIGludG8gYWxsaWFuY2Ugd2l0aCBoaW0sIGZvciBoaXMgdmlydHVlcywgYW5kIHRoZSBjb25maWRlbmNlIHdoaWNoIGhlIGluc3BpcmVkLCBpbmNsaW5lZCB0aGUga2luZyB0byBkZXNpcmUgaGlzIGZyaWVuZHNoaXAuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjEuMSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDEsIDEgZmYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAxLCAxIGZmLjwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNwaXRocmlkYXRlcyBhbHNvLCBmcm9tIHRoZSB0aW1lIHdoZW4gaGUgYWJhbmRvbmVkIFBoYXJuYWJhenVzIGFuZCBjYW1lIHRvIEFnZXNpbGHDvHMsIGFsd2F5cyBhY2NvbXBhbmllZCBoaW0gaW4gaGlzIGpvdXJuZXlzIGFuZCBleHBlZGl0aW9ucy4gU3BpdGhyaWRhdGVzIGhhZCBhIHNvbiwgYSB2ZXJ5IGJlYXV0aWZ1bCBib3ksIG5hbWVkIE1lZ2FiYXRlcywgb2Ygd2hvbSBBZ2VzaWxhw7xzIHdhcyBhcmRlbnRseSBlbmFtb3VyZWQsIGFuZCBhIGJlYXV0aWZ1bCBkYXVnaHRlciBhbHNvLCBhIG1haWRlbiBvZiBtYXJyaWFnZWFibGUgYWdlLiBUaGlzIGRhdWdodGVyIEFnZXNpbGHDvHMgcGVyc3VhZGVkIENvdHlzIHRvIG1hcnJ5LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVuIHJlY2VpdmluZyBmcm9tIGhpbSBhIHRob3VzYW5kIGhvcnNlbWVuIGFuZCB0d28gdGhvdXNhbmQgdGFyZ2V0ZWVycywgaGUgcmV0aXJlZCBhZ2FpbiBpbnRvIFBocnlnaWEsIGFuZCBoYXJhc3NlZCB0aGUgY291bnRyeSBvZiBQaGFybmFiYXp1cywgd2hvIGRpZCBub3Qgc3RhbmQgaGlzIGdyb3VuZCBub3IgdHJ1c3QgaW4gaGlzIGRlZmVuY2VzLCBidXQgYWx3YXlzIGtlcHQgbW9zdCBvZiBoaXMgdmFsdWVkIGFuZCBwcmVjaW91cyB0aGluZ3Mgd2l0aCBoaW0sIGFuZCB3aXRoZHJldyBvciBmbGVkIGZyb20gb25lIHBhcnQgb2YgdGhlIGNvdW50cnkgdG8gYW5vdGhlciwgaGF2aW5nIG5vIGFiaWRpbmcgcGxhY2UuIEF0IGxhc3QgU3BpdGhyaWRhdGVzLCB3aG8gaGFkIG5hcnJvd2x5IHdhdGNoZWQgaGltLCBpbiBjb25qdW5jdGlvbiB3aXRoIEhlcmlwcGlkYXMgdGhlIFNwYXJ0YW4sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBsZWFkZXIgb2YgdGhlIHNlY29uZCBjb21wYW55IG9mIHRoaXJ0eSBTcGFydGFuIGNvdW5zZWxsb3JzIHNlbnQgb3V0IGluIHRoZSBzcHJpbmcgb2YgMzk1IEIuQy4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMy40LjIwIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDQsIDIwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzZWl6ZWQgaGlzIGNhbXAgYW5kIG1hZGUgaGltc2VsZiBtYXN0ZXIgb2YgYWxsIGhpcyB0cmVhc3VyZXMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjQuMjAiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGlpaS4gNCwgMjAuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGlpaS4gNCwgMjAuPC90cmFuc2xhdGlvbj4="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIGhvd2V2ZXIsIEhlcmlwcGlkYXMsIHdobyBoYWQgdG9vIHNoYXJwIGFuIGV5ZSB0byB0aGUgYm9vdHkgdGhhdCB3YXMgc3RvbGVuLCBhbmQgZm9yY2VkIHRoZSBCYXJiYXJpYW5zIHRvIHJlc3RvcmUgaXQsIHdhdGNoaW5nIG92ZXIgYW5kIGVucXVpcmluZyBpbnRvIGV2ZXJ5dGhpbmcsIGV4YXNwZXJhdGVkIFNwaXRocmlkYXRlcywgc28gdGhhdCBoZSBtYXJjaGVkIG9mZiBhdCBvbmNlIHRvIFNhcmRpcyB3aXRoIHRoZSBQYXBobGFnb25pYW5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgaXMgc2FpZCB0byBoYXZlIGFubm95ZWQgQWdlc2lsYcO8cyBiZXlvbmQgYWxsIGVsc2UuIEZvciBoZSB3YXMgcGFpbmVkIGF0IHRoZSBsb3NzIG9mIGEgZ2FsbGFudCBtYW4gaW4gU3BpdGhyaWRhdGVzLCBhbmQgd2l0aCBoaW0gb2YgYSBjb25zaWRlcmFibGUgZm9yY2UsIGFuZCB3YXMgYXNoYW1lZCB0byBsYWJvdXIgdW5kZXIgdGhlIGNoYXJnZSBvZiBwZXR0aW5lc3MgYW5kIGlsbGliZXJhbGl0eSwgZnJvbSB3aGljaCBoZSB3YXMgYWx3YXlzIGFtYml0aW91cyB0byBrZWVwIG5vdCBvbmx5IGhpbXNlbGYsIGJ1dCBhbHNvIGhpcyBjb3VudHJ5LCBwdXJlIGFuZCBmcmVlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcGFydCBmcm9tIHRoZXNlIG1hbmlmZXN0IHJlYXNvbnMsIGhlIHdhcyBpcnJpdGF0ZWQgYmV5b25kIG1lYXN1cmUgYnkgaGlzIGxvdmUgZm9yIHRoZSBib3ksIHdoaWNoIHdhcyBub3cgaW5zdGlsbGVkIGludG8gaGlzIGhlYXJ0LCBhbHRob3VnaCB3aGVuIHRoZSBib3kgd2FzIHByZXNlbnQgaGUgd291bGQgc3VtbW9uIGFsbCBoaXMgcmVzb2x1dGlvbiBhbmQgc3RyaXZlIG1pZ2h0aWx5IHRvIGJhdHRsZSBhZ2FpbnN0IGhpcyBkZXNpcmVzLiBJbmRlZWQsIHdoZW4gTWVnYWJhdGVzIG9uY2UgY2FtZSB1cCBhbmQgb2ZmZXJlZCB0byBlbWJyYWNlIGFuZCBraXNzIGhpbSwgaGUgZGVjbGluZWQgaGlzIGNhcmVzc2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYm95IHdhcyBtb3J0aWZpZWQgYXQgdGhpcywgYW5kIGRlc2lzdGVkLCBhbmQgYWZ0ZXJ3YXJkcyBrZXB0IGhpcyBkaXN0YW5jZSB3aGVuIGFkZHJlc3NpbmcgaGltLCB3aGVyZXVwb24gQWdlc2lsYcO8cywgZGlzdHJlc3NlZCBub3cgYW5kIHJlcGVudGFudCBmb3IgaGF2aW5nIGF2b2lkZWQgaGlzIGtpc3MsIHByZXRlbmRlZCB0byB3b25kZXIgd2hhdCBhaWxlZCBNZWdhYmF0ZXMgdGhhdCBoZSBkaWQgbm90IGdyZWV0IGhpbSB3aXRoIGEga2lzcy4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBpcyB0aHkgZmF1bHQsPC9xPiB0aGUga2luZydzIGNvbXBhbmlvbnMgc2FpZDsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aG91IGRpZHN0IG5vdCBhY2NlcHQsIGJ1dCBkaWRzdCBkZWNsaW5lIHRoZSBmYWlyIG9uZSdzIGtpc3MgaW4gZmVhciBhbmQgdHJlbWJsaW5nOyB5ZXQgZXZlbiBub3cgaGUgbWlnaHQgYmUgcGVyc3VhZGVkIHRvIGNvbWUgd2l0aGluIHJhbmdlIG9mIHRoeSBsaXBzOyBidXQgc2VlIHRoYXQgdGhvdSBkb3N0IG5vdCBhZ2FpbiBwbGF5IHRoZSBjb3dhcmQuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIHNvbWUgdGltZSBzcGVudCBpbiBzaWxlbnQgcmVmbGVjdGlvbiwgQWdlc2lsYcO8cyBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXJlIGlzIG5vIGhhcm0gaW4geW91ciBwZXJzdWFkaW5nIGhpbTsgZm9yIEkgdGhpbmsgSSB3b3VsZCBtb3JlIGdsYWRseSBmaWdodCB0aGF0IGJhdHRsZSBvZiB0aGUga2lzcyBvdmVyIGFnYWluIHRoYW4gcG9zc2VzcyBhbGwgdGhlIGdvbGQgSSBoYXZlIGV2ZXIgc2Vlbi48L3E+IE9mIHN1Y2ggYSBtaW5kIHdhcyBoZSB3aGlsZSBNZWdhYmF0ZXMgd2FzIHdpdGggaGltLCB0aG91Z2ggd2hlbiB0aGUgYm95IHdhcyBnb25lLCBoZSB3YXMgc28gb24gZmlyZSB3aXRoIGxvdmUgZm9yIGhpbSB0aGF0IGl0IHdlcmUgaGFyZCB0byBzYXkgd2hldGhlciwgaGFkIHRoZSBib3kgY29tZSBiYWNrIGludG8gaGlzIHByZXNlbmNlLCBoZSB3b3VsZCBoYXZlIGhhZCB0aGUgc3RyZW5ndGggdG8gcmVmdXNlIGhpcyBraXNzZXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gNS40IiB2YWxpZD0ieWVzIj5YZW5vcGhvbidzIDx0aXRsZT5BZ2VzaWxhw7xzPC90aXRsZT4sIHYuIDQtNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcGFydCBmcm9tIHRoZXNlIG1hbmlmZXN0IHJlYXNvbnMsIGhlIHdhcyBpcnJpdGF0ZWQgYmV5b25kIG1lYXN1cmUgYnkgaGlzIGxvdmUgZm9yIHRoZSBib3ksIHdoaWNoIHdhcyBub3cgaW5zdGlsbGVkIGludG8gaGlzIGhlYXJ0LCBhbHRob3VnaCB3aGVuIHRoZSBib3kgd2FzIHByZXNlbnQgaGUgd291bGQgc3VtbW9uIGFsbCBoaXMgcmVzb2x1dGlvbiBhbmQgc3RyaXZlIG1pZ2h0aWx5IHRvIGJhdHRsZSBhZ2FpbnN0IGhpcyBkZXNpcmVzLiBJbmRlZWQsIHdoZW4gTWVnYWJhdGVzIG9uY2UgY2FtZSB1cCBhbmQgb2ZmZXJlZCB0byBlbWJyYWNlIGFuZCBraXNzIGhpbSwgaGUgZGVjbGluZWQgaGlzIGNhcmVzc2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBib3kgd2FzIG1vcnRpZmllZCBhdCB0aGlzLCBhbmQgZGVzaXN0ZWQsIGFuZCBhZnRlcndhcmRzIGtlcHQgaGlzIGRpc3RhbmNlIHdoZW4gYWRkcmVzc2luZyBoaW0sIHdoZXJldXBvbiBBZ2VzaWxhw7xzLCBkaXN0cmVzc2VkIG5vdyBhbmQgcmVwZW50YW50IGZvciBoYXZpbmcgYXZvaWRlZCBoaXMga2lzcywgcHJldGVuZGVkIHRvIHdvbmRlciB3aGF0IGFpbGVkIE1lZ2FiYXRlcyB0aGF0IGhlIGRpZCBub3QgZ3JlZXQgaGltIHdpdGggYSBraXNzLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgdGh5IGZhdWx0LDwvcT4gdGhlIGtpbmcncyBjb21wYW5pb25zIHNhaWQ7IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aG91IGRpZHN0IG5vdCBhY2NlcHQsIGJ1dCBkaWRzdCBkZWNsaW5lIHRoZSBmYWlyIG9uZSdzIGtpc3MgaW4gZmVhciBhbmQgdHJlbWJsaW5nOyB5ZXQgZXZlbiBub3cgaGUgbWlnaHQgYmUgcGVyc3VhZGVkIHRvIGNvbWUgd2l0aGluIHJhbmdlIG9mIHRoeSBsaXBzOyBidXQgc2VlIHRoYXQgdGhvdSBkb3N0IG5vdCBhZ2FpbiBwbGF5IHRoZSBjb3dhcmQuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIHNvbWUgdGltZSBzcGVudCBpbiBzaWxlbnQgcmVmbGVjdGlvbiwgQWdlc2lsYcO8cyBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlcmUgaXMgbm8gaGFybSBpbiB5b3VyIHBlcnN1YWRpbmcgaGltOyBmb3IgSSB0aGluayBJIHdvdWxkIG1vcmUgZ2xhZGx5IGZpZ2h0IHRoYXQgYmF0dGxlIG9mIHRoZSBraXNzIG92ZXIgYWdhaW4gdGhhbiBwb3NzZXNzIGFsbCB0aGUgZ29sZCBJIGhhdmUgZXZlciBzZWVuLjwvcT4gT2Ygc3VjaCBhIG1pbmQgd2FzIGhlIHdoaWxlIE1lZ2FiYXRlcyB3YXMgd2l0aCBoaW0sIHRob3VnaCB3aGVuIHRoZSBib3kgd2FzIGdvbmUsIGhlIHdhcyBzbyBvbiBmaXJlIHdpdGggbG92ZSBmb3IgaGltIHRoYXQgaXQgd2VyZSBoYXJkIHRvIHNheSB3aGV0aGVyLCBoYWQgdGhlIGJveSBjb21lIGJhY2sgaW50byBoaXMgcHJlc2VuY2UsIGhlIHdvdWxkIGhhdmUgaGFkIHRoZSBzdHJlbmd0aCB0byByZWZ1c2UgaGlzIGtpc3Nlcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gNS40IiB2YWxpZD0ieWVzIj5YZW5vcGhvbidzIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgdi4gNC03LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFnZXMuIDUuNCIgdmFsaWQ9InllcyI+WGVub3Bob24ncyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHYuIDQtNy48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgdi4gNC03LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIFBoYXJuYWJhenVzIGRlc2lyZWQgdG8gaGF2ZSBhIGNvbmZlcmVuY2Ugd2l0aCBoaW0sIGFuZCBBcG9sbG9waGFuZXMgb2YgQ3l6aWN1cywgd2hvIHdhcyBhIGd1ZXN0LWZyaWVuZCBvZiBib3RoLCBicm91Z2h0IHRoZSB0d28gdG9nZXRoZXIuIEFnZXNpbGHDvHMsIHdpdGggaGlzIGZyaWVuZHMsIGNhbWUgZmlyc3QgdG8gdGhlIGFwcG9pbnRlZCBwbGFjZSwgYW5kIHRocm93aW5nIGhpbXNlbGYgZG93biBpbiBhIHNoYWR5IHBsYWNlIHdoZXJlIHRoZSBncmFzcyB3YXMgZGVlcCwgdGhlcmUgYXdhaXRlZCBQaGFybmFiYXp1cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gUGhhcm5hYmF6dXMgY2FtZSwgYWx0aG91Z2ggc29mdCBjdXNoaW9ucyBhbmQgYnJvaWRlcmVkIHJ1Z3MgaGFkIGJlZW4gc3ByZWFkIGZvciBoaW0sIGhlIHdhcyBhc2hhbWVkIHRvIHNlZSBBZ2VzaWxhw7xzIHJlY2xpbmluZyBhcyBoZSB3YXMsIGFuZCB0aHJldyBoaW1zZWxmIGRvd24gbGlrZXdpc2UsIHdpdGhvdXQgZnVydGhlciBjZXJlbW9ueSwgb24gdGhlIGdyYXNzeSBncm91bmQsIGFsdGhvdWdoIGhlIHdhcyBjbGFkIGluIHJhaW1lbnQgb2Ygd29uZGVyZnVsIGRlbGljYWN5IGFuZCBkeWVzLiBBZnRlciBtdXR1YWwgc2FsdXRhdGlvbnMsIFBoYXJuYWJhenVzIGhhZCBwbGVudHkgb2YganVzdCBjb21wbGFpbnRzIHRvIG1ha2UsIHNpbmNlLCBhbHRob3VnaCBoZSBoYWQgcmVuZGVyZWQgdGhlIExhY2VkYWVtb25pYW5zIG1hbnkgZ3JlYXQgc2VydmljZXMgaW4gdGhlaXIgd2FyIGFnYWluc3QgdGhlIEF0aGVuaWFucywgaGlzIHRlcnJpdG9yeSB3YXMgbm93IGJlaW5nIHJhdmFnZWQgYnkgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFnZXNpbGHDvHMsIHNlZWluZyB0aGUgU3BhcnRhbnMgd2l0aCBoaW0gYm93ZWQgdG8gdGhlIGVhcnRoIHdpdGggc2hhbWUgYW5kIGF0IGEgbG9zcyBmb3Igd29yZHMgKGZvciB0aGV5IHNhdyB0aGF0IFBoYXJuYWJhenVzIHdhcyBhIHdyb25nZWQgbWFuKSwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSwgTyBQaGFybmFiYXp1cywgZHVyaW5nIG91ciBmb3JtZXIgZnJpZW5kc2hpcCB3aXRoIHRoZSBLaW5nLCB0cmVhdGVkIHdoYXQgYmVsb25ncyB0byBoaW0gaW4gYSBmcmllbmRseSB3YXksIGFuZCBub3cgdGhhdCB3ZSBoYXZlIGJlY29tZSBoaXMgZW5lbWllcywgd2UgdHJlYXQgaXQgaW4gYSBob3N0aWxlIHdheS4gQWNjb3JkaW5nbHksIHNlZWluZyB0aGF0IHRob3UgYWxzbyBkZXNpcmVzdCB0byBiZSBvbmUgb2YgdGhlIEtpbmcncyBjaGF0dGVscywgd2UgbmF0dXJhbGx5IGluanVyZSBoaW0gdGhyb3VnaCB0aGVlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZnJvbSB0aGUgZGF5IHdoZW4gdGhvdSBzaGFsdCBkZWVtIHRoeXNlbGYgd29ydGh5IHRvIGJlIGNhbGxlZCBhIGZyaWVuZCBhbmQgYWxseSBvZiB0aGUgR3JlZWtzIGluc3RlYWQgb2YgYSBzbGF2ZSBvZiB0aGUgS2luZywgY29uc2lkZXIgdGhpcyBhcm15LCB0aGVzZSBhcm1zIGFuZCBzaGlwcywgYW5kIGFsbCBvZiB1cywgdG8gYmUgZ3VhcmRpYW5zIG9mIHRoeSBwb3NzZXNzaW9ucyBhbmQgb2YgdGh5IGxpYmVydHksIHdpdGhvdXQgd2hpY2ggbm90aGluZyBpbiB0aGUgd29ybGQgaXMgaG9ub3VyYWJsZSBvciBldmVuIHdvcnRoeSB0byBiZSBkZXNpcmVkLjwvcT4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcywgUGhhcm5hYmF6dXMgZGVjbGFyZWQgdG8gaGltIGhpcyBwdXJwb3Nlcy4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BcyBmb3IgbWUsIGluZGVlZCw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aWYgdGhlIEtpbmcgc2hhbGwgc2VuZCBvdXQgYW5vdGhlciBnZW5lcmFsIGluIG15IHN0ZWFkLCBJIHdpbGwgYmUgb24geW91ciBzaWRlOyBidXQgaWYgaGUgZW50cnVzdHMgbWUgd2l0aCB0aGUgY29tbWFuZCwgSSB3aWxsIHNwYXJlIG5vIGVmZm9ydHMgdG8gcHVuaXNoIGFuZCBpbmp1cmUgeW91IGluIGhpcyBiZWhhbGYuPC9xPiBPbiBoZWFyaW5nIHRoaXMsIEFnZXNpbGHDvHMgd2FzIGRlbGlnaHRlZCwgYW5kIHNhaWQsIGFzIGhlIHNlaXplZCBoaXMgaGFuZCBhbmQgcm9zZSB1cCB3aXRoIGhpbSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIFBoYXJuYWJhenVzLCBJIHdvdWxkIHRoYXQgc3VjaCBhIG1hbiBhcyB0aG91IG1pZ2h0IGJlIG91ciBmcmllbmQgcmF0aGVyIHRoYW4gb3VyIGVuZW15LjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMS4yOCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGl2LiAxLCAyOC0zODwvYmlibD4sIHdoZXJlIEFnZXNpbGHDvHMgYWRkcyBhIHByb21pc2UgdG8gcmVzcGVjdCwgaW4gZnV0dXJlLCB0aGUgcHJvcGVydHkgb2YgUGhhcm5hYmF6dXMsIGV2ZW4gaW4gY2FzZSBvZiB3YXIuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgUGhhcm5hYmF6dXMgZGVzaXJlZCB0byBoYXZlIGEgY29uZmVyZW5jZSB3aXRoIGhpbSwgYW5kIEFwb2xsb3BoYW5lcyBvZiBDeXppY3VzLCB3aG8gd2FzIGEgZ3Vlc3QtZnJpZW5kIG9mIGJvdGgsIGJyb3VnaHQgdGhlIHR3byB0b2dldGhlci4gQWdlc2lsYcO8cywgd2l0aCBoaXMgZnJpZW5kcywgY2FtZSBmaXJzdCB0byB0aGUgYXBwb2ludGVkIHBsYWNlLCBhbmQgdGhyb3dpbmcgaGltc2VsZiBkb3duIGluIGEgc2hhZHkgcGxhY2Ugd2hlcmUgdGhlIGdyYXNzIHdhcyBkZWVwLCB0aGVyZSBhd2FpdGVkIFBoYXJuYWJhenVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFBoYXJuYWJhenVzIGNhbWUsIGFsdGhvdWdoIHNvZnQgY3VzaGlvbnMgYW5kIGJyb2lkZXJlZCBydWdzIGhhZCBiZWVuIHNwcmVhZCBmb3IgaGltLCBoZSB3YXMgYXNoYW1lZCB0byBzZWUgQWdlc2lsYcO8cyByZWNsaW5pbmcgYXMgaGUgd2FzLCBhbmQgdGhyZXcgaGltc2VsZiBkb3duIGxpa2V3aXNlLCB3aXRob3V0IGZ1cnRoZXIgY2VyZW1vbnksIG9uIHRoZSBncmFzc3kgZ3JvdW5kLCBhbHRob3VnaCBoZSB3YXMgY2xhZCBpbiByYWltZW50IG9mIHdvbmRlcmZ1bCBkZWxpY2FjeSBhbmQgZHllcy4gQWZ0ZXIgbXV0dWFsIHNhbHV0YXRpb25zLCBQaGFybmFiYXp1cyBoYWQgcGxlbnR5IG9mIGp1c3QgY29tcGxhaW50cyB0byBtYWtlLCBzaW5jZSwgYWx0aG91Z2ggaGUgaGFkIHJlbmRlcmVkIHRoZSBMYWNlZGFlbW9uaWFucyBtYW55IGdyZWF0IHNlcnZpY2VzIGluIHRoZWlyIHdhciBhZ2FpbnN0IHRoZSBBdGhlbmlhbnMsIGhpcyB0ZXJyaXRvcnkgd2FzIG5vdyBiZWluZyByYXZhZ2VkIGJ5IHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZ2VzaWxhw7xzLCBzZWVpbmcgdGhlIFNwYXJ0YW5zIHdpdGggaGltIGJvd2VkIHRvIHRoZSBlYXJ0aCB3aXRoIHNoYW1lIGFuZCBhdCBhIGxvc3MgZm9yIHdvcmRzIChmb3IgdGhleSBzYXcgdGhhdCBQaGFybmFiYXp1cyB3YXMgYSB3cm9uZ2VkIG1hbiksIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSwgTyBQaGFybmFiYXp1cywgZHVyaW5nIG91ciBmb3JtZXIgZnJpZW5kc2hpcCB3aXRoIHRoZSBLaW5nLCB0cmVhdGVkIHdoYXQgYmVsb25ncyB0byBoaW0gaW4gYSBmcmllbmRseSB3YXksIGFuZCBub3cgdGhhdCB3ZSBoYXZlIGJlY29tZSBoaXMgZW5lbWllcywgd2UgdHJlYXQgaXQgaW4gYSBob3N0aWxlIHdheS4gQWNjb3JkaW5nbHksIHNlZWluZyB0aGF0IHRob3UgYWxzbyBkZXNpcmVzdCB0byBiZSBvbmUgb2YgdGhlIEtpbmcncyBjaGF0dGVscywgd2UgbmF0dXJhbGx5IGluanVyZSBoaW0gdGhyb3VnaCB0aGVlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmcm9tIHRoZSBkYXkgd2hlbiB0aG91IHNoYWx0IGRlZW0gdGh5c2VsZiB3b3J0aHkgdG8gYmUgY2FsbGVkIGEgZnJpZW5kIGFuZCBhbGx5IG9mIHRoZSBHcmVla3MgaW5zdGVhZCBvZiBhIHNsYXZlIG9mIHRoZSBLaW5nLCBjb25zaWRlciB0aGlzIGFybXksIHRoZXNlIGFybXMgYW5kIHNoaXBzLCBhbmQgYWxsIG9mIHVzLCB0byBiZSBndWFyZGlhbnMgb2YgdGh5IHBvc3Nlc3Npb25zIGFuZCBvZiB0aHkgbGliZXJ0eSwgd2l0aG91dCB3aGljaCBub3RoaW5nIGluIHRoZSB3b3JsZCBpcyBob25vdXJhYmxlIG9yIGV2ZW4gd29ydGh5IHRvIGJlIGRlc2lyZWQuPC9xPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmcm9tIHRoZSBkYXkgd2hlbiB0aG91IHNoYWx0IGRlZW0gdGh5c2VsZiB3b3J0aHkgdG8gYmUgY2FsbGVkIGEgZnJpZW5kIGFuZCBhbGx5IG9mIHRoZSBHcmVla3MgaW5zdGVhZCBvZiBhIHNsYXZlIG9mIHRoZSBLaW5nLCBjb25zaWRlciB0aGlzIGFybXksIHRoZXNlIGFybXMgYW5kIHNoaXBzLCBhbmQgYWxsIG9mIHVzLCB0byBiZSBndWFyZGlhbnMgb2YgdGh5IHBvc3Nlc3Npb25zIGFuZCBvZiB0aHkgbGliZXJ0eSwgd2l0aG91dCB3aGljaCBub3RoaW5nIGluIHRoZSB3b3JsZCBpcyBob25vdXJhYmxlIG9yIGV2ZW4gd29ydGh5IHRvIGJlIGRlc2lyZWQuPC90cmFuc2xhdGlvbj4="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcywgUGhhcm5hYmF6dXMgZGVjbGFyZWQgdG8gaGltIGhpcyBwdXJwb3Nlcy4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFzIGZvciBtZSwgaW5kZWVkLDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIHRoZSBLaW5nIHNoYWxsIHNlbmQgb3V0IGFub3RoZXIgZ2VuZXJhbCBpbiBteSBzdGVhZCwgSSB3aWxsIGJlIG9uIHlvdXIgc2lkZTsgYnV0IGlmIGhlIGVudHJ1c3RzIG1lIHdpdGggdGhlIGNvbW1hbmQsIEkgd2lsbCBzcGFyZSBubyBlZmZvcnRzIHRvIHB1bmlzaCBhbmQgaW5qdXJlIHlvdSBpbiBoaXMgYmVoYWxmLjwvcT4gT24gaGVhcmluZyB0aGlzLCBBZ2VzaWxhw7xzIHdhcyBkZWxpZ2h0ZWQsIGFuZCBzYWlkLCBhcyBoZSBzZWl6ZWQgaGlzIGhhbmQgYW5kIHJvc2UgdXAgd2l0aCBoaW0sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIFBoYXJuYWJhenVzLCBJIHdvdWxkIHRoYXQgc3VjaCBhIG1hbiBhcyB0aG91IG1pZ2h0IGJlIG91ciBmcmllbmQgcmF0aGVyIHRoYW4gb3VyIGVuZW15LjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjEuMjgiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAxLCAyOC0zODwvYmlibD4sIHdoZXJlIEFnZXNpbGHDvHMgYWRkcyBhIHByb21pc2UgdG8gcmVzcGVjdCwgaW4gZnV0dXJlLCB0aGUgcHJvcGVydHkgb2YgUGhhcm5hYmF6dXMsIGV2ZW4gaW4gY2FzZSBvZiB3YXIuPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMS4yOCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDEsIDI4LTM4PC9iaWJsPiwgd2hlcmUgQWdlc2lsYcO8cyBhZGRzIGEgcHJvbWlzZSB0byByZXNwZWN0LCBpbiBmdXR1cmUsIHRoZSBwcm9wZXJ0eSBvZiBQaGFybmFiYXp1cywgZXZlbiBpbiBjYXNlIG9mIHdhci48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAxLCAyOC0zODxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIFBoYXJuYWJhenVzIGFuZCBoaXMgZnJpZW5kcyB3ZXJlIGdvaW5nIGF3YXksIGhpcyBzb24sIHdobyB3YXMgbGVmdCBiZWhpbmQsIHJhbiB1cCB0byBBZ2VzaWxhw7xzIGFuZCBzYWlkIHdpdGggYSBzbWlsZTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIG1ha2UgdGhlZSBteSBndWVzdC1mcmllbmQsIEFnZXNpbGHDvHMsPC9xPiBhbmQgb2ZmZXJlZCBoaW0gYSBqYXZlbGluIHdoaWNoIGhlIGhlbGQgaW4gaGlzIGhhbmQuIEFnZXNpbGHDvHMgYWNjZXB0ZWQgaXQsIGFuZCBiZWluZyBkZWxpZ2h0ZWQgd2l0aCB0aGUgZmFpciBsb29rcyBhbmQga2luZGx5IGJlYXJpbmcgb2YgdGhlIGJveSwgbG9va2VkIHJvdW5kIHVwb24gaGlzIGNvbXBhbmlvbnMgdG8gc2VlIGlmIGFueSBvbmUgb2YgdGhlbSBoYWQgYW55dGhpbmcgdGhhdCB3b3VsZCBkbyBmb3IgYSByZXR1cm4tZ2lmdCB0byBhIGZhaXIgYW5kIGdhbGxhbnQgZnJpZW5kOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgc2VlaW5nIHRoYXQgdGhlIGhvcnNlIG9mIElkYWV1cywgaGlzIHNlY3JldGFyeSwgaGFkIGEgZGVjb3JhdGVkIGhlYWQtZ2VhciwgaGUgcXVpY2tseSB0b29rIHRoaXMgb2ZmIGFuZCBnYXZlIGl0IHRvIHRoZSB5b3V0aC4gTm9yIGFmdGVyd2FyZHMgZGlkIGhlIGNlYXNlIHRvIHJlbWVtYmVyIGhpbSwgYnV0IHdoZW4sIGFzIHRpbWUgd2VudCBvbiwgdGhlIHlvdXRoIHdhcyByb2JiZWQgb2YgaGlzIGhvbWUgYnkgaGlzIGJyb3RoZXJzIGFuZCBkcml2ZW4gaW50byBleGlsZSBpbiBQZWxvcG9ubmVzdXMsIGhlIHBhaWQgaGltIG11Y2ggYXR0ZW50aW9uLiBIZSBldmVuIGdhdmUgaGltIHNvbWUgYXNzaXN0YW5jZSBpbiBoaXMgbG92ZSBhZmZhaXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIFBlcnNpYW4gd2FzIGVuYW1vdXJlZCBvZiBhbiBBdGhlbmlhbiBib3ksIGFuIGF0aGxldGUsIHdobywgb3dpbmcgdG8gaGlzIHN0YXR1cmUgYW5kIHN0cmVuZ3RoLCB3YXMgaW4gZGFuZ2VyIG9mIGJlaW5nIHJ1bGVkIG91dCBvZiB0aGUgbGlzdHMgYXQgT2x5bXBpYS4gSGUgdGhlcmVmb3JlIGhhZCByZWNvdXJzZSB0byBBZ2VzaWxhw7xzIHdpdGggZW50cmVhdGllcyB0byBoZWxwIHRoZSBib3ksIGFuZCBBZ2VzaWxhw7xzLCB3aXNoaW5nIHRvIGdyYXRpZnkgaGltIGluIHRoaXMgbWF0dGVyIGFsc28sIHdpdGggdmVyeSBncmVhdCBkaWZmaWN1bHR5IGFuZCB3aXRoIG11Y2ggdHJvdWJsZSBlZmZlY3RlZCBoaXMgZGVzaXJlcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjEuMzkiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gMSwgMzkgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgUGhhcm5hYmF6dXMgYW5kIGhpcyBmcmllbmRzIHdlcmUgZ29pbmcgYXdheSwgaGlzIHNvbiwgd2hvIHdhcyBsZWZ0IGJlaGluZCwgcmFuIHVwIHRvIEFnZXNpbGHDvHMgYW5kIHNhaWQgd2l0aCBhIHNtaWxlOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBtYWtlIHRoZWUgbXkgZ3Vlc3QtZnJpZW5kLCBBZ2VzaWxhw7xzLDwvcT4gYW5kIG9mZmVyZWQgaGltIGEgamF2ZWxpbiB3aGljaCBoZSBoZWxkIGluIGhpcyBoYW5kLiBBZ2VzaWxhw7xzIGFjY2VwdGVkIGl0LCBhbmQgYmVpbmcgZGVsaWdodGVkIHdpdGggdGhlIGZhaXIgbG9va3MgYW5kIGtpbmRseSBiZWFyaW5nIG9mIHRoZSBib3ksIGxvb2tlZCByb3VuZCB1cG9uIGhpcyBjb21wYW5pb25zIHRvIHNlZSBpZiBhbnkgb25lIG9mIHRoZW0gaGFkIGFueXRoaW5nIHRoYXQgd291bGQgZG8gZm9yIGEgcmV0dXJuLWdpZnQgdG8gYSBmYWlyIGFuZCBnYWxsYW50IGZyaWVuZDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBzZWVpbmcgdGhhdCB0aGUgaG9yc2Ugb2YgSWRhZXVzLCBoaXMgc2VjcmV0YXJ5LCBoYWQgYSBkZWNvcmF0ZWQgaGVhZC1nZWFyLCBoZSBxdWlja2x5IHRvb2sgdGhpcyBvZmYgYW5kIGdhdmUgaXQgdG8gdGhlIHlvdXRoLiBOb3IgYWZ0ZXJ3YXJkcyBkaWQgaGUgY2Vhc2UgdG8gcmVtZW1iZXIgaGltLCBidXQgd2hlbiwgYXMgdGltZSB3ZW50IG9uLCB0aGUgeW91dGggd2FzIHJvYmJlZCBvZiBoaXMgaG9tZSBieSBoaXMgYnJvdGhlcnMgYW5kIGRyaXZlbiBpbnRvIGV4aWxlIGluIFBlbG9wb25uZXN1cywgaGUgcGFpZCBoaW0gbXVjaCBhdHRlbnRpb24uIEhlIGV2ZW4gZ2F2ZSBoaW0gc29tZSBhc3Npc3RhbmNlIGluIGhpcyBsb3ZlIGFmZmFpcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgUGVyc2lhbiB3YXMgZW5hbW91cmVkIG9mIGFuIEF0aGVuaWFuIGJveSwgYW4gYXRobGV0ZSwgd2hvLCBvd2luZyB0byBoaXMgc3RhdHVyZSBhbmQgc3RyZW5ndGgsIHdhcyBpbiBkYW5nZXIgb2YgYmVpbmcgcnVsZWQgb3V0IG9mIHRoZSBsaXN0cyBhdCBPbHltcGlhLiBIZSB0aGVyZWZvcmUgaGFkIHJlY291cnNlIHRvIEFnZXNpbGHDvHMgd2l0aCBlbnRyZWF0aWVzIHRvIGhlbHAgdGhlIGJveSwgYW5kIEFnZXNpbGHDvHMsIHdpc2hpbmcgdG8gZ3JhdGlmeSBoaW0gaW4gdGhpcyBtYXR0ZXIgYWxzbywgd2l0aCB2ZXJ5IGdyZWF0IGRpZmZpY3VsdHkgYW5kIHdpdGggbXVjaCB0cm91YmxlIGVmZmVjdGVkIGhpcyBkZXNpcmVzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjEuMzkiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAxLCAzOSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMS4zOSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDEsIDM5IGYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAxLCAzOSBmLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5kZWVkLCBhbHRob3VnaCBpbiBvdGhlciBtYXR0ZXJzIGhlIHdhcyBleGFjdCBhbmQgbGF3LWFiaWRpbmcsIGluIG1hdHRlcnMgb2YgZnJpZW5kc2hpcCBoZSB0aG91Z2h0IHRoYXQgcmlnaWQganVzdGljZSB3YXMgYSBtZXJlIHByZXRleHQuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIHRoZXJlIGlzIGluIGNpcmN1bGF0aW9uIGEgbGV0dGVyIG9mIGhpcyB0byBIaWRyaWV1cyB0aGUgQ2FyaWFuLCB3aGljaCBydW5zIGFzIGZvbGxvd3M6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXMgZm9yIE5pY2lhcywgaWYgaGUgaXMgaW5ub2NlbnQsIGFjcXVpdCBoaW07IGlmIGhlIGlzIGd1aWx0eSwgYWNxdWl0IGhpbSBmb3IgbXkgc2FrZTsgYnV0IGluIGFueSBjYXNlIGFjcXVpdCBoaW0uPC9xPiBTdWNoLCB0aGVuLCB3YXMgQWdlc2lsYcO8cyBpbiBtb3N0IGNhc2VzIHdoZXJlIHRoZSBpbnRlcmVzdHMgb2YgaGlzIGZyaWVuZHMgd2VyZSBjb25jZXJuZWQ7IGJ1dCBzb21ldGltZXMgaGUgdXNlZCBhIGNyaXRpY2FsIHNpdHVhdGlvbiByYXRoZXIgZm9yIGhpcyBvd24gYWR2YW50YWdlLiBPZiB0aGlzIGhlIGdhdmUgYW4gaW5zdGFuY2Ugd2hlbiwgYXMgaGUgd2FzIGRlY2FtcGluZyBpbiBzb21lIGhhc3RlIGFuZCBjb25mdXNpb24sIGhlIGxlZnQgaGlzIGZhdm91cml0ZSBiZWhpbmQgaGltIHNpY2suIFRoZSBzaWNrIG9uZSBiZXNvdWdodCBoaW0gbG91ZGx5IGFzIGhlIHdhcyBkZXBhcnRpbmcsIGJ1dCBoZSBtZXJlbHkgdHVybmVkIGFuZCBzYWlkIHRoYXQgaXQgd2FzIGhhcmQgdG8gYmUgY29tcGFzc2lvbmF0ZSBhbmQgYXQgdGhlIHNhbWUgdGltZSBwcnVkZW50LiBUaGlzIHN0b3J5IGlzIHJlbGF0ZWQgYnkgSGllcm9ueW11cyB0aGUgcGhpbG9zb3BoZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCB0aGVyZSBpcyBpbiBjaXJjdWxhdGlvbiBhIGxldHRlciBvZiBoaXMgdG8gSGlkcmlldXMgdGhlIENhcmlhbiwgd2hpY2ggcnVucyBhcyBmb2xsb3dzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXMgZm9yIE5pY2lhcywgaWYgaGUgaXMgaW5ub2NlbnQsIGFjcXVpdCBoaW07IGlmIGhlIGlzIGd1aWx0eSwgYWNxdWl0IGhpbSBmb3IgbXkgc2FrZTsgYnV0IGluIGFueSBjYXNlIGFjcXVpdCBoaW0uPC9xPiBTdWNoLCB0aGVuLCB3YXMgQWdlc2lsYcO8cyBpbiBtb3N0IGNhc2VzIHdoZXJlIHRoZSBpbnRlcmVzdHMgb2YgaGlzIGZyaWVuZHMgd2VyZSBjb25jZXJuZWQ7IGJ1dCBzb21ldGltZXMgaGUgdXNlZCBhIGNyaXRpY2FsIHNpdHVhdGlvbiByYXRoZXIgZm9yIGhpcyBvd24gYWR2YW50YWdlLiBPZiB0aGlzIGhlIGdhdmUgYW4gaW5zdGFuY2Ugd2hlbiwgYXMgaGUgd2FzIGRlY2FtcGluZyBpbiBzb21lIGhhc3RlIGFuZCBjb25mdXNpb24sIGhlIGxlZnQgaGlzIGZhdm91cml0ZSBiZWhpbmQgaGltIHNpY2suIFRoZSBzaWNrIG9uZSBiZXNvdWdodCBoaW0gbG91ZGx5IGFzIGhlIHdhcyBkZXBhcnRpbmcsIGJ1dCBoZSBtZXJlbHkgdHVybmVkIGFuZCBzYWlkIHRoYXQgaXQgd2FzIGhhcmQgdG8gYmUgY29tcGFzc2lvbmF0ZSBhbmQgYXQgdGhlIHNhbWUgdGltZSBwcnVkZW50LiBUaGlzIHN0b3J5IGlzIHJlbGF0ZWQgYnkgSGllcm9ueW11cyB0aGUgcGhpbG9zb3BoZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMgaGFkIG5vdyBiZWVuIG5lYXJseSB0d28geWVhcnMgaW4gdGhlIGZpZWxkLCBhbmQgbXVjaCB3YXMgc2FpZCBhYm91dCBoaW0gaW4gdGhlIGludGVyaW9yIHBhcnRzIG9mIEFzaWEsIGFuZCBhIHdvbmRlcmZ1bCBvcGluaW9uIG9mIGhpcyBzZWxmLXJlc3RyYWludCwgb2YgaGlzIHNpbXBsaWNpdHkgb2YgbGlmZSwgYW5kIG9mIGhpcyBtb2RlcmF0aW9uLCBldmVyeXdoZXJlIHByZXZhaWxlZC4gRm9yIHdoZW4gaGUgbWFkZSBhIGpvdXJuZXksIGhlIHdvdWxkIHRha2UgdXAgaGlzIHF1YXJ0ZXJzIGluIHRoZSBtb3N0IHNhY3JlZCBwcmVjaW5jdHMgYnkgaGltc2VsZiwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiA1LjciIHZhbGlkPSJ5ZXMiPlhlbm9waG9uJ3MgPHRpdGxlPkFnZXNpbGHDvHM8L3RpdGxlPiwgdi4gNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGh1cyBtYWtpbmcgdGhlIGdvZHMgb3ZlcnNlZXJzIGFuZCB3aXRuZXNzZXMgb2YgdGhvc2UgYWN0cyB3aGljaCBmZXcgbWVuIGFyZSBwZXJtaXR0ZWQgdG8gc2VlIHVzIHBlcmZvcm07IGFuZCBhbW9uZyBzbyBtYW55IHRob3VzYW5kcyBvZiBzb2xkaWVycywgb25lIGNvdWxkIGhhcmRseSBmaW5kIGEgbWVhbmVyIGNvdWNoIHRoYW4gdGhhdCBvZiBBZ2VzaWxhw7xzOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz53aGlsZSB0byBoZWF0IGFuZCBjb2xkIGhlIHdhcyBhcyBpbmRpZmZlcmVudCBhcyBpZiBuYXR1cmUgaGFkIGdpdmVuIGhpbSBhbG9uZSB0aGUgcG93ZXIgdG8gYWRhcHQgaGltc2VsZiB0byB0aGUgc2Vhc29ucyBhcyBHb2QgaGFzIHRlbXBlcmVkIHRoZW0uIEFuZCBpdCB3YXMgbW9zdCBwbGVhc2luZyB0byB0aGUgR3JlZWtzIHdobyBkd2VsdCBpbiBBc2lhIHRvIHNlZSB0aGUgUGVyc2lhbiB2aWNlcm95cyBhbmQgZ2VuZXJhbHMsIHdobyBoYWQgbG9uZyBiZWVuIGluc3VmZmVyYWJseSBjcnVlbCwgYW5kIGhhZCByZXZlbGxlZCBpbiB3ZWFsdGggYW5kIGx1eHVyeSwgbm93IGZlYXJmdWwgYW5kIG9ic2VxdWlvdXMgYmVmb3JlIGEgbWFuIHdobyB3ZW50IGFib3V0IGluIGEgcGFsdHJ5IGNsb2FrLCBhbmQgYXQgb25lIGJyaWVmIGFuZCBsYWNvbmljIHNwZWVjaCBmcm9tIGhpbSBjb25mb3JtaW5nIHRoZW1zZWx2ZXMgdG8gaGlzIHdheXMgYW5kIGNoYW5naW5nIHRoZWlyIGRyZXNzIGFuZCBtaWVuLCBpbnNvbXVjaCB0aGF0IG1hbnkgd2VyZSBtb3ZlZCB0byBjaXRlIHRoZSB3b3JkcyBvZiBUaW1vdGhldXM64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkFyZXMgaXMgTG9yZDsgb2YgZ29sZCBHcmVlY2UgaGF0aCBubyBmZWFyLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIEJlcmdrLCA8dGl0bGU+UG9ldC4gTHlyLiBHcmFlY2k8L3RpdGxlPiwgaWlpLjQgcC4gNjIyLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWdlc2lsYcO8cyBoYWQgbm93IGJlZW4gbmVhcmx5IHR3byB5ZWFycyBpbiB0aGUgZmllbGQsIGFuZCBtdWNoIHdhcyBzYWlkIGFib3V0IGhpbSBpbiB0aGUgaW50ZXJpb3IgcGFydHMgb2YgQXNpYSwgYW5kIGEgd29uZGVyZnVsIG9waW5pb24gb2YgaGlzIHNlbGYtcmVzdHJhaW50LCBvZiBoaXMgc2ltcGxpY2l0eSBvZiBsaWZlLCBhbmQgb2YgaGlzIG1vZGVyYXRpb24sIGV2ZXJ5d2hlcmUgcHJldmFpbGVkLiBGb3Igd2hlbiBoZSBtYWRlIGEgam91cm5leSwgaGUgd291bGQgdGFrZSB1cCBoaXMgcXVhcnRlcnMgaW4gdGhlIG1vc3Qgc2FjcmVkIHByZWNpbmN0cyBieSBoaW1zZWxmLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiA1LjciIHZhbGlkPSJ5ZXMiPlhlbm9waG9uJ3MgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB2LiA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aHVzIG1ha2luZyB0aGUgZ29kcyBvdmVyc2VlcnMgYW5kIHdpdG5lc3NlcyBvZiB0aG9zZSBhY3RzIHdoaWNoIGZldyBtZW4gYXJlIHBlcm1pdHRlZCB0byBzZWUgdXMgcGVyZm9ybTsgYW5kIGFtb25nIHNvIG1hbnkgdGhvdXNhbmRzIG9mIHNvbGRpZXJzLCBvbmUgY291bGQgaGFyZGx5IGZpbmQgYSBtZWFuZXIgY291Y2ggdGhhbiB0aGF0IG9mIEFnZXNpbGHDvHM7IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiA1LjciIHZhbGlkPSJ5ZXMiPlhlbm9waG9uJ3MgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB2LiA3LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB2LiA3LjwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIHRvIGhlYXQgYW5kIGNvbGQgaGUgd2FzIGFzIGluZGlmZmVyZW50IGFzIGlmIG5hdHVyZSBoYWQgZ2l2ZW4gaGltIGFsb25lIHRoZSBwb3dlciB0byBhZGFwdCBoaW1zZWxmIHRvIHRoZSBzZWFzb25zIGFzIEdvZCBoYXMgdGVtcGVyZWQgdGhlbS4gQW5kIGl0IHdhcyBtb3N0IHBsZWFzaW5nIHRvIHRoZSBHcmVla3Mgd2hvIGR3ZWx0IGluIEFzaWEgdG8gc2VlIHRoZSBQZXJzaWFuIHZpY2Vyb3lzIGFuZCBnZW5lcmFscywgd2hvIGhhZCBsb25nIGJlZW4gaW5zdWZmZXJhYmx5IGNydWVsLCBhbmQgaGFkIHJldmVsbGVkIGluIHdlYWx0aCBhbmQgbHV4dXJ5LCBub3cgZmVhcmZ1bCBhbmQgb2JzZXF1aW91cyBiZWZvcmUgYSBtYW4gd2hvIHdlbnQgYWJvdXQgaW4gYSBwYWx0cnkgY2xvYWssIGFuZCBhdCBvbmUgYnJpZWYgYW5kIGxhY29uaWMgc3BlZWNoIGZyb20gaGltIGNvbmZvcm1pbmcgdGhlbXNlbHZlcyB0byBoaXMgd2F5cyBhbmQgY2hhbmdpbmcgdGhlaXIgZHJlc3MgYW5kIG1pZW4sIGluc29tdWNoIHRoYXQgbWFueSB3ZXJlIG1vdmVkIHRvIGNpdGUgdGhlIHdvcmRzIG9mIFRpbW90aGV1czrigJQKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkFyZXMgaXMgTG9yZDsgb2YgZ29sZCBHcmVlY2UgaGF0aCBubyBmZWFyLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmVzIGlzIExvcmQ7IG9mIGdvbGQgR3JlZWNlIGhhdGggbm8gZmVhci48L2w+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIEJlcmdrLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb2V0LiBMeXIuIEdyYWVjaTwvdGl0bGU+LCBpaWkuNCBwLiA2MjIuPC9ub3RlPgoJCQkgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb2V0LiBMeXIuIEdyYWVjaTwvdGl0bGU+LCBpaWkuNCBwLiA2MjIuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXNpYSBiZWluZyBub3cgdW5zZXR0bGVkIGFuZCBpbiBtYW55IHF1YXJ0ZXJzIGluY2xpbmluZyB0byByZXZvbHQsIEFnZXNpbGHDvHMgc2V0IHRoZSBjaXRpZXMgdGhlcmUgaW4gb3JkZXIsIGFuZCByZXN0b3JlZCB0byB0aGVpciBnb3Zlcm5tZW50cywgd2l0aG91dCBraWxsaW5nIG9yIGJhbmlzaGluZyBhbnkgb25lLCB0aGUgcHJvcGVyIGZvcm0uIFRoZW4gaGUgZGV0ZXJtaW5lZCB0byBnbyBmYXJ0aGVyIGFmaWVsZCwgdG8gdHJhbnNmZXIgdGhlIHdhciBmcm9tIHRoZSBHcmVlayBzZWEsIHRvIGZpZ2h0IGZvciB0aGUgcGVyc29uIG9mIHRoZSBLaW5nIGFuZCB0aGUgd2VhbHRoIG9mIEVjYmF0YW5hIGFuZCBTdXNhLCBhbmQgYWJvdmUgYWxsIHRoaW5ncyB0byByb2IgdGhhdCBtb25hcmNoIG9mIHRoZSBwb3dlciB0byBzaXQgYXQgbGVpc3VyZSBvbiBoaXMgdGhyb25lLCBwbGF5aW5nIHRoZSB1bXBpcmUgZm9yIHRoZSBHcmVla3MgaW4gdGhlaXIgd2FycywgYW5kIGNvcnJ1cHRpbmcgdGhlaXIgcG9wdWxhciBsZWFkZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgdGhpcyBwb2ludCBFcGljeWRpZGFzIHRoZSBTcGFydGFuIGNhbWUgdG8gaGltIHdpdGggdGlkaW5ncyB0aGF0IFNwYXJ0YSB3YXMgaW52b2x2ZWQgaW4gYSBncmVhdCB3YXIgd2l0aCBvdGhlciBHcmVla3MsIGFuZCB0aGF0IHRoZSBlcGhvcnMgY2FsbGVkIHVwb24gaGltIGFuZCBvcmRlcmVkIGhpbSB0byBjb21lIHRvIHRoZSBhaWQgb2YgaGlzIGNvdW50cnltZW4uIAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5PIGJhcmJhcm91cyBpbGxzIGRldmlzZWQgYnkgR3JlZWtzITwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIFRyby4gNzY2IiB2YWxpZD0ieWVzIj5FdXJpcGlkZXMsIDx0aXRsZT5Ucm9hZGVzPC90aXRsZT4sIDc2NjwvYmlibD4gKEtpcmNoaG9mZikuPC9ub3RlPiBIb3cgZWxzZSBjYW4gb25lIHNwZWFrIG9mIHRoYXQgamVhbG91c3kgd2hpY2ggbm93IGxlYWd1ZWQgYW5kIGFycmF5ZWQgdGhlIEdyZWVrcyBhZ2FpbnN0IG9uZSBhbm90aGVyPyBUaGV5IGxhaWQgdmlvbGVudCBoYW5kcyBvbiBGb3J0dW5lIGluIGhlciBsb2Z0eSBmbGlnaHQsIGFuZCB0dXJuZWQgdGhlIHdlYXBvbnMgd2hpY2ggdGhyZWF0ZW5lZCB0aGUgQmFyYmFyaWFucywgYW5kIFdhciwgd2hpY2ggaGFkIGF0IGxhc3QgYmVlbiBiYW5pc2hlZCBmcm9tIEdyZWVjZSwgYmFjayBhZ2FpbiB1cG9uIHRoZW1zZWx2ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgY2VydGFpbmx5IGNhbm5vdCBhZ3JlZSB3aXRoIERlbWFyYXR1cyB0aGUgQ29yaW50aGlhbiwgd2hvIHNhaWQgdGhhdCB0aG9zZSBHcmVla3MgaGFkIG1pc3NlZCBhIGdyZWF0IHBsZWFzdXJlIHdobyBkaWQgbm90IGJlaG9sZCBBbGV4YW5kZXIgc2VhdGVkIG9uIHRoZSB0aHJvbmUgb2YgRGFyZWl1cywgbmF5LCBJIHRoaW5rIHRoYXQgc3VjaCBtaWdodCB3ZWxsIGhhdmUgc2hlZCB0ZWFycyB3aGVuIHRoZXkgcmVmbGVjdGVkIHRoYXQgdGhpcyB0cml1bXBoIHdhcyBsZWZ0IGZvciBBbGV4YW5kZXIgYW5kIE1hY2Vkb25pYW5zIGJ5IHRob3NlIHdobyBub3cgc3F1YW5kZXJlZCB0aGUgbGl2ZXMgb2YgR3JlZWsgZ2VuZXJhbHMgb24gdGhlIGZpZWxkcyBvZiBMZXVjdHJhLCBDb3JvbmVpYSwgYW5kIENvcmludGgsIGFuZCBpbiBBcmNhZGlhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXNpYSBiZWluZyBub3cgdW5zZXR0bGVkIGFuZCBpbiBtYW55IHF1YXJ0ZXJzIGluY2xpbmluZyB0byByZXZvbHQsIEFnZXNpbGHDvHMgc2V0IHRoZSBjaXRpZXMgdGhlcmUgaW4gb3JkZXIsIGFuZCByZXN0b3JlZCB0byB0aGVpciBnb3Zlcm5tZW50cywgd2l0aG91dCBraWxsaW5nIG9yIGJhbmlzaGluZyBhbnkgb25lLCB0aGUgcHJvcGVyIGZvcm0uIFRoZW4gaGUgZGV0ZXJtaW5lZCB0byBnbyBmYXJ0aGVyIGFmaWVsZCwgdG8gdHJhbnNmZXIgdGhlIHdhciBmcm9tIHRoZSBHcmVlayBzZWEsIHRvIGZpZ2h0IGZvciB0aGUgcGVyc29uIG9mIHRoZSBLaW5nIGFuZCB0aGUgd2VhbHRoIG9mIEVjYmF0YW5hIGFuZCBTdXNhLCBhbmQgYWJvdmUgYWxsIHRoaW5ncyB0byByb2IgdGhhdCBtb25hcmNoIG9mIHRoZSBwb3dlciB0byBzaXQgYXQgbGVpc3VyZSBvbiBoaXMgdGhyb25lLCBwbGF5aW5nIHRoZSB1bXBpcmUgZm9yIHRoZSBHcmVla3MgaW4gdGhlaXIgd2FycywgYW5kIGNvcnJ1cHRpbmcgdGhlaXIgcG9wdWxhciBsZWFkZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCB0aGlzIHBvaW50IEVwaWN5ZGlkYXMgdGhlIFNwYXJ0YW4gY2FtZSB0byBoaW0gd2l0aCB0aWRpbmdzIHRoYXQgU3BhcnRhIHdhcyBpbnZvbHZlZCBpbiBhIGdyZWF0IHdhciB3aXRoIG90aGVyIEdyZWVrcywgYW5kIHRoYXQgdGhlIGVwaG9ycyBjYWxsZWQgdXBvbiBoaW0gYW5kIG9yZGVyZWQgaGltIHRvIGNvbWUgdG8gdGhlIGFpZCBvZiBoaXMgY291bnRyeW1lbi4gCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5PIGJhcmJhcm91cyBpbGxzIGRldmlzZWQgYnkgR3JlZWtzITwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5PIGJhcmJhcm91cyBpbGxzIGRldmlzZWQgYnkgR3JlZWtzITwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBUcm8uIDc2NiIgdmFsaWQ9InllcyI+RXVyaXBpZGVzLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ucm9hZGVzPC90aXRsZT4sIDc2NjwvYmlibD4gKEtpcmNoaG9mZikuPC9ub3RlPiBIb3cgZWxzZSBjYW4gb25lIHNwZWFrIG9mIHRoYXQgamVhbG91c3kgd2hpY2ggbm93IGxlYWd1ZWQgYW5kIGFycmF5ZWQgdGhlIEdyZWVrcyBhZ2FpbnN0IG9uZSBhbm90aGVyPyBUaGV5IGxhaWQgdmlvbGVudCBoYW5kcyBvbiBGb3J0dW5lIGluIGhlciBsb2Z0eSBmbGlnaHQsIGFuZCB0dXJuZWQgdGhlIHdlYXBvbnMgd2hpY2ggdGhyZWF0ZW5lZCB0aGUgQmFyYmFyaWFucywgYW5kIFdhciwgd2hpY2ggaGFkIGF0IGxhc3QgYmVlbiBiYW5pc2hlZCBmcm9tIEdyZWVjZSwgYmFjayBhZ2FpbiB1cG9uIHRoZW1zZWx2ZXMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBUcm8uIDc2NiIgdmFsaWQ9InllcyI+RXVyaXBpZGVzLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ucm9hZGVzPC90aXRsZT4sIDc2NjwvYmlibD4gKEtpcmNoaG9mZikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJvYWRlczwvdGl0bGU+LCA3NjY8L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgY2VydGFpbmx5IGNhbm5vdCBhZ3JlZSB3aXRoIERlbWFyYXR1cyB0aGUgQ29yaW50aGlhbiwgd2hvIHNhaWQgdGhhdCB0aG9zZSBHcmVla3MgaGFkIG1pc3NlZCBhIGdyZWF0IHBsZWFzdXJlIHdobyBkaWQgbm90IGJlaG9sZCBBbGV4YW5kZXIgc2VhdGVkIG9uIHRoZSB0aHJvbmUgb2YgRGFyZWl1cywgbmF5LCBJIHRoaW5rIHRoYXQgc3VjaCBtaWdodCB3ZWxsIGhhdmUgc2hlZCB0ZWFycyB3aGVuIHRoZXkgcmVmbGVjdGVkIHRoYXQgdGhpcyB0cml1bXBoIHdhcyBsZWZ0IGZvciBBbGV4YW5kZXIgYW5kIE1hY2Vkb25pYW5zIGJ5IHRob3NlIHdobyBub3cgc3F1YW5kZXJlZCB0aGUgbGl2ZXMgb2YgR3JlZWsgZ2VuZXJhbHMgb24gdGhlIGZpZWxkcyBvZiBMZXVjdHJhLCBDb3JvbmVpYSwgYW5kIENvcmludGgsIGFuZCBpbiBBcmNhZGlhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZ2VzaWxhw7xzLCBob3dldmVyLCBuZXZlciBwZXJmb3JtZWQgYSBub2JsZXIgb3IgYSBncmVhdGVyIGRlZWQgdGhhbiBpbiByZXR1cm5pbmcgaG9tZSBhcyBoZSBub3cgZGlkLCBub3Igd2FzIHRoZXJlIGV2ZXIgYSBmYWlyZXIgZXhhbXBsZSBvZiByaWdodGVvdXMgb2JlZGllbmNlIHRvIGF1dGhvcml0eS4gRm9yIEhhbm5pYmFsLCB0aG91Z2ggaGUgd2FzIGFscmVhZHkgaW4gYW4gZXZpbCBwbGlnaHQgYW5kIG9uIHRoZSBwb2ludCBvZiBiZWluZyBkcml2ZW4gb3V0IG9mIEl0YWx5LCBjb3VsZCB3aXRoIHRoZSBncmVhdGVzdCBkaWZmaWN1bHR5IGJyaW5nIGhpbXNlbGYgdG8gb2JleSBoaXMgc3VtbW9ucyB0byB0aGUgd2FyIGF0IGhvbWU7IGFuZCBBbGV4YW5kZXIgYWN0dWFsbHkgd2VudCBzbyBmYXIgYXMgdG8gamVzdCB3aGVuIGhlIGhlYXJkIG9mIEFudGlwYXRlcidzIGJhdHRsZSB3aXRoIEFnaXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBNZWdhbG9wb2xpcywgaW4gQXJjYWRpYSwgMzMxIEIuQy4sIEFnaXMgZmVsbCBmaWdodGluZywgYW5kIHRoZSBTcGFydGFuIHJlYmVsbGlvbiBhdCBvbmNlIGNvbGxhcHNlZC4gQWxleGFuZGVyIGhhZCBub3QgdGhlIHNsaWdodGVzdCB0aG91Z2h0IG9mIHJldHVybmluZyBob21lIHRvIGhlbHAgQW50aXBhdGVyLjwvbm90ZT4gc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IHdvdWxkIHNlZW0sIG15IG1lbiwgdGhhdCB3aGlsZSB3ZSB3ZXJlIGNvbnF1ZXJpbmcgRGFyZWl1cyBoZXJlLCB0aGVyZSBoYXMgYmVlbiBhIGJhdHRsZSBvZiBtaWNlIHRoZXJlIGluIEFyY2FkaWEuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoeSwgdGhlbiwgc2hvdWxkIHdlIG5vdCBjYWxsIFNwYXJ0YSBoYXBweSBpbiB0aGUgaG9ub3VyIHBhaWQgdG8gaGVyIGJ5IEFnZXNpbGHDvHMsIGFuZCBpbiBoaXMgZGVmZXJlbmNlIHRvIGhlciBsYXdzPyBObyBzb29uZXIgaGFkIHRoZSBkaXNwYXRjaC1yb2xsIGNvbWUgdG8gaGltIHRoYW4gaGUgcmVub3VuY2VkIGFuZCBhYmFuZG9uZWQgdGhlIGdyZWF0IGdvb2QgZm9ydHVuZSBhbmQgcG93ZXIgYWxyZWFkeSBpbiBoaXMgZ3Jhc3AsIGFuZCB0aGUgZ3JlYXQgaG9wZXMgd2hpY2ggYmVja29uZWQgaGltIG9uLCBhbmQgYXQgb25jZSBzYWlsZWQgb2ZmIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2l0aCB0YXNrIGFsbCB1bmZ1bGZpbGxlZCw8L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gNC4xNzUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgaXYuIDE3NS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbGVhdmluZyBiZWhpbmQgYSBncmVhdCB5ZWFybmluZyBmb3IgaGltIGFtb25nIGhpcyBhbGxpZXMsIGFuZCBnaXZpbmcgdGhlIHN0cm9uZ2VzdCBjb25mdXRhdGlvbiB0byB0aGUgc2F5aW5nIG9mIEVyYXNpc3RyYXR1cyB0aGUgc29uIG9mIFBoYWVheCwgd2hvIGRlY2xhcmVkIHRoYXQgdGhlIExhY2VkYWVtb25pYW5zIHdlcmUgYmV0dGVyIG1lbiBpbiBwdWJsaWMgbGlmZSwgYnV0IHRoZSBBdGhlbmlhbnMgaW4gcHJpdmF0ZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoaWxlIGFwcHJvdmluZyBoaW1zZWxmIGEgbW9zdCBleGNlbGxlbnQga2luZyBhbmQgZ2VuZXJhbCwgaGUgc2hvd2VkIGhpbXNlbGYgYSBzdGlsbCBiZXR0ZXIgYW5kIG1vcmUgYWdyZWVhYmxlIGZyaWVuZCBhbmQgY29tcGFuaW9uIHRvIHRob3NlIHdobyBlbmpveWVkIGhpcyBpbnRpbWFjeS4gUGVyc2lhbiBjb2lucyB3ZXJlIHN0YW1wZWQgd2l0aCB0aGUgZmlndXJlIG9mIGFuIGFyY2hlciwgYW5kIEFnZXNpbGHDvHMgc2FpZCwgYXMgaGUgd2FzIGJyZWFraW5nIGNhbXAsIHRoYXQgdGhlIEtpbmcgd2FzIGRyaXZpbmcgaGltIG91dCBvZiBBc2lhIHdpdGggdGVuIHRob3VzYW5kIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXJjaGVyczwvcT47IGZvciBzbyBtdWNoIG1vbmV5IGhhZCBiZWVuIHNlbnQgdG8gQXRoZW5zIGFuZCBUaGViZXMgYW5kIGRpc3RyaWJ1dGVkIGFtb25nIHRoZSBwb3B1bGFyIGxlYWRlcnMgdGhlcmUsIGFuZCBhcyBhIGNvbnNlcXVlbmNlIHRob3NlIHBlb3BsZXMgbWFkZSB3YXIgdXBvbiB0aGUgU3BhcnRhbnMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gWGVub3Bob24gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDMuNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkhlbGwuPC90aXRsZT4gaWlpLiA1LCAxIGZmLjwvYmlibD4pLCBQZXJzaWFuIG1vbmV5IHdhcyBkaXN0cmlidXRlZCBpbiBUaGViZXMsIENvcmludGgsIGFuZCBBcmdvcy4gCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIEF0aGVuaWFucywgdGhvdWdoIHRoZXkgdG9vayBubyBzaGFyZSBvZiB0aGUgZ29sZCwgd2VyZSBub25lIHRoZSBsZXNzIGVhZ2VyIGZvciB3YXIuPC9xPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMsIGhvd2V2ZXIsIG5ldmVyIHBlcmZvcm1lZCBhIG5vYmxlciBvciBhIGdyZWF0ZXIgZGVlZCB0aGFuIGluIHJldHVybmluZyBob21lIGFzIGhlIG5vdyBkaWQsIG5vciB3YXMgdGhlcmUgZXZlciBhIGZhaXJlciBleGFtcGxlIG9mIHJpZ2h0ZW91cyBvYmVkaWVuY2UgdG8gYXV0aG9yaXR5LiBGb3IgSGFubmliYWwsIHRob3VnaCBoZSB3YXMgYWxyZWFkeSBpbiBhbiBldmlsIHBsaWdodCBhbmQgb24gdGhlIHBvaW50IG9mIGJlaW5nIGRyaXZlbiBvdXQgb2YgSXRhbHksIGNvdWxkIHdpdGggdGhlIGdyZWF0ZXN0IGRpZmZpY3VsdHkgYnJpbmcgaGltc2VsZiB0byBvYmV5IGhpcyBzdW1tb25zIHRvIHRoZSB3YXIgYXQgaG9tZTsgYW5kIEFsZXhhbmRlciBhY3R1YWxseSB3ZW50IHNvIGZhciBhcyB0byBqZXN0IHdoZW4gaGUgaGVhcmQgb2YgQW50aXBhdGVyJ3MgYmF0dGxlIHdpdGggQWdpcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXQgTWVnYWxvcG9saXMsIGluIEFyY2FkaWEsIDMzMSBCLkMuLCBBZ2lzIGZlbGwgZmlnaHRpbmcsIGFuZCB0aGUgU3BhcnRhbiByZWJlbGxpb24gYXQgb25jZSBjb2xsYXBzZWQuIEFsZXhhbmRlciBoYWQgbm90IHRoZSBzbGlnaHRlc3QgdGhvdWdodCBvZiByZXR1cm5pbmcgaG9tZSB0byBoZWxwIEFudGlwYXRlci48L25vdGU+IHNheWluZzogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IHdvdWxkIHNlZW0sIG15IG1lbiwgdGhhdCB3aGlsZSB3ZSB3ZXJlIGNvbnF1ZXJpbmcgRGFyZWl1cyBoZXJlLCB0aGVyZSBoYXMgYmVlbiBhIGJhdHRsZSBvZiBtaWNlIHRoZXJlIGluIEFyY2FkaWEuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoeSwgdGhlbiwgc2hvdWxkIHdlIG5vdCBjYWxsIFNwYXJ0YSBoYXBweSBpbiB0aGUgaG9ub3VyIHBhaWQgdG8gaGVyIGJ5IEFnZXNpbGHDvHMsIGFuZCBpbiBoaXMgZGVmZXJlbmNlIHRvIGhlciBsYXdzPyBObyBzb29uZXIgaGFkIHRoZSBkaXNwYXRjaC1yb2xsIGNvbWUgdG8gaGltIHRoYW4gaGUgcmVub3VuY2VkIGFuZCBhYmFuZG9uZWQgdGhlIGdyZWF0IGdvb2QgZm9ydHVuZSBhbmQgcG93ZXIgYWxyZWFkeSBpbiBoaXMgZ3Jhc3AsIGFuZCB0aGUgZ3JlYXQgaG9wZXMgd2hpY2ggYmVja29uZWQgaGltIG9uLCBhbmQgYXQgb25jZSBzYWlsZWQgb2ZmIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj53aXRoIHRhc2sgYWxsIHVuZnVsZmlsbGVkLDwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gNC4xNzUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCBpdi4gMTc1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBsZWF2aW5nIGJlaGluZCBhIGdyZWF0IHllYXJuaW5nIGZvciBoaW0gYW1vbmcgaGlzIGFsbGllcywgYW5kIGdpdmluZyB0aGUgc3Ryb25nZXN0IGNvbmZ1dGF0aW9uIHRvIHRoZSBzYXlpbmcgb2YgRXJhc2lzdHJhdHVzIHRoZSBzb24gb2YgUGhhZWF4LCB3aG8gZGVjbGFyZWQgdGhhdCB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBiZXR0ZXIgbWVuIGluIHB1YmxpYyBsaWZlLCBidXQgdGhlIEF0aGVuaWFucyBpbiBwcml2YXRlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDQuMTc1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgaXYuIDE3NS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGl2LiAxNzUuPC90cmFuc2xhdGlvbj4="
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGlsZSBhcHByb3ZpbmcgaGltc2VsZiBhIG1vc3QgZXhjZWxsZW50IGtpbmcgYW5kIGdlbmVyYWwsIGhlIHNob3dlZCBoaW1zZWxmIGEgc3RpbGwgYmV0dGVyIGFuZCBtb3JlIGFncmVlYWJsZSBmcmllbmQgYW5kIGNvbXBhbmlvbiB0byB0aG9zZSB3aG8gZW5qb3llZCBoaXMgaW50aW1hY3kuIFBlcnNpYW4gY29pbnMgd2VyZSBzdGFtcGVkIHdpdGggdGhlIGZpZ3VyZSBvZiBhbiBhcmNoZXIsIGFuZCBBZ2VzaWxhw7xzIHNhaWQsIGFzIGhlIHdhcyBicmVha2luZyBjYW1wLCB0aGF0IHRoZSBLaW5nIHdhcyBkcml2aW5nIGhpbSBvdXQgb2YgQXNpYSB3aXRoIHRlbiB0aG91c2FuZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXJjaGVyczwvcT47IGZvciBzbyBtdWNoIG1vbmV5IGhhZCBiZWVuIHNlbnQgdG8gQXRoZW5zIGFuZCBUaGViZXMgYW5kIGRpc3RyaWJ1dGVkIGFtb25nIHRoZSBwb3B1bGFyIGxlYWRlcnMgdGhlcmUsIGFuZCBhcyBhIGNvbnNlcXVlbmNlIHRob3NlIHBlb3BsZXMgbWFkZSB3YXIgdXBvbiB0aGUgU3BhcnRhbnMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBYZW5vcGhvbiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaWlpLiA1LCAxIGZmLjwvYmlibD4pLCBQZXJzaWFuIG1vbmV5IHdhcyBkaXN0cmlidXRlZCBpbiBUaGViZXMsIENvcmludGgsIGFuZCBBcmdvcy4gCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgQXRoZW5pYW5zLCB0aG91Z2ggdGhleSB0b29rIG5vIHNoYXJlIG9mIHRoZSBnb2xkLCB3ZXJlIG5vbmUgdGhlIGxlc3MgZWFnZXIgZm9yIHdhci48L3E+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAzLjUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaWlpLiA1LCAxIGZmLjwvYmlibD4pLCBQZXJzaWFuIG1vbmV5IHdhcyBkaXN0cmlidXRlZCBpbiBUaGViZXMsIENvcmludGgsIGFuZCBBcmdvcy4gCgkJCQkJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaWkuIDUsIDEgZmYuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgQXRoZW5pYW5zLCB0aG91Z2ggdGhleSB0b29rIG5vIHNoYXJlIG9mIHRoZSBnb2xkLCB3ZXJlIG5vbmUgdGhlIGxlc3MgZWFnZXIgZm9yIHdhci48L3E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGhlIGhhZCBjcm9zc2VkIHRoZSBIZWxsZXNwb250IGFuZCB3YXMgbWFyY2hpbmcgdGhyb3VnaCBUaHJhY2UsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BZ2VzaWxhw7xzIGZvbGxvd2VkIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSB2ZXJ5IHJvdXRlIHRha2VuIGJ5IHRoZSBHcmVhdCBLaW5nIHdoZW4gaGUgaW52YWRlZCBIZWxsYXM8L3E+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjIuOCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGl2LiAyLCA4PC9iaWJsPikuPC9ub3RlPiBoZSBtYWRlIG5vIHJlcXVlc3RzIG9mIGFueSBvZiB0aGUgQmFyYmFyaWFucywgYnV0IHNlbnQgZW52b3lzIHRvIGVhY2ggcGVvcGxlIGFza2luZyB3aGV0aGVyIGhlIHNob3VsZCB0cmF2ZXJzZSB0aGVpciBjb3VudHJ5IGFzIGEgZnJpZW5kIG9yIGFzIGEgZm9lLiBBbGwgdGhlIHJlc3QsIGFjY29yZGluZ2x5LCByZWNlaXZlZCBoaW0gYXMgYSBmcmllbmQgYW5kIGFzc2lzdGVkIGhpbSBvbiBoaXMgd2F5LCBhcyB0aGV5IHdlcmUgc2V2ZXJhbGx5IGFibGU7IGJ1dCB0aGUgcGVvcGxlIGNhbGxlZCBUcmFsbGlhbnMsIHRvIHdob20gZXZlbiBYZXJ4ZXMgZ2F2ZSBnaWZ0cywgYXMgd2UgYXJlIHRvbGQsIGRlbWFuZGVkIG9mIEFnZXNpbGHDvHMgYXMgYSBwcmljZSBmb3IgaGlzIHBhc3NhZ2UgYSBodW5kcmVkIHRhbGVudHMgb2Ygc2lsdmVyIGFuZCBhcyBtYW55IHdvbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGUgYW5zd2VyZWQgdGhlbSB3aXRoIHNjb3JuLCBhc2tpbmcgd2h5LCB0aGVuLCB0aGV5IGRpZCBub3QgY29tZSBhdCBvbmNlIHRvIGdldCB0aGVpciBwcmljZTsgYW5kIG1hcmNoZWQgZm9yd2FyZCwgYW5kIGZpbmRpbmcgdGhlbSBkcmF3biB1cCBmb3IgYmF0dGxlLCBlbmdhZ2VkIHRoZW0sIHJvdXRlZCB0aGVtLCBhbmQgc2xldyBtYW55IG9mIHRoZW0uIEhlIHNlbnQgaGlzIHVzdWFsIGVucXVpcnkgZm9yd2FyZCB0byB0aGUga2luZyBvZiB0aGUgTWFjZWRvbmlhbnMgYWxzbywgd2hvIGFuc3dlcmVkIHRoYXQgaGUgd291bGQgZGVsaWJlcmF0ZSB1cG9uIGl0LiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCBoaW0gZGVsaWJlcmF0ZSwgdGhlbiw8L3E+IHNhaWQgQWdlc2lsYcO8cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5idXQgd2Ugd2lsbCBtYXJjaCBvbi48L3E+IEluIGFtYXplbWVudCB0aGVyZWZvcmUgYXQgaGlzIGJvbGRuZXNzLCBhbmQgaW4gZmVhciwgdGhlIE1hY2Vkb25pYW4ga2luZyBnYXZlIG9yZGVycyB0byBsZXQgaGltIHBhc3MgYXMgYSBmcmllbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIHRoZSBUaGVzc2FsaWFucyB3ZXJlIGluIGFsbGlhbmNlIHdpdGggaGlzIGVuZW1pZXMsIGhlIHJhdmFnZWQgdGhlaXIgY291bnRyeS4gQnV0IHRvIHRoZSBjaXR5IG9mIExhcmlzc2EgaGUgc2VudCBYZW5vY2xlcyBhbmQgU2N5dGhlcywgaG9waW5nIHRvIHNlY3VyZSBpdHMgZnJpZW5kc2hpcC4gSGlzIGFtYmFzc2Fkb3JzLCBob3dldmVyLCB3ZXJlIGFycmVzdGVkIGFuZCBrZXB0IGluIGNsb3NlIGN1c3RvZHksIHdoZXJldXBvbiB0aGUgcmVzdCBvZiBoaXMgY29tbWFuZCB3ZXJlIGluZGlnbmFudCwgYW5kIHRob3VnaHQgdGhhdCBBZ2VzaWxhw7xzIG91Z2h0IHRvIGVuY2FtcCBhYm91dCBMYXJpc3NhIGFuZCBsYXkgc2llZ2UgdG8gaXQuIEJ1dCBoZSBkZWNsYXJlZCB0aGF0IHRoZSBjYXB0dXJlIG9mIGFsbCBUaGVzc2FseSB3b3VsZCBub3QgY29tcGVuc2F0ZSBoaW0gZm9yIHRoZSBsb3NzIG9mIGVpdGhlciBvbmUgb2YgaGlzIG1lbiwgYW5kIG1hZGUgdGVybXMgd2l0aCB0aGUgZW5lbXkgaW4gb3JkZXIgdG8gZ2V0IHRoZW0gYmFjay4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHBlcmhhcHMgd2UgbmVlZCBub3Qgd29uZGVyIGF0IHN1Y2ggY29uZHVjdCBpbiBBZ2VzaWxhw7xzLCBzaW5jZSB3aGVuIGhlIGxlYXJuZWQgdGhhdCBhIGdyZWF0IGJhdHRsZSBoYWQgYmVlbiBmb3VnaHQgbmVhciBDb3JpbnRoLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Mzk0IEIuQy4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMi4xOCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGl2LiAyLCAxODwvYmlibD7igJQ8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuMSIgdmFsaWQ9InllcyI+MywgMSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgdGhhdCBtZW4gb2YgdGhlIGhpZ2hlc3QgcmVwdXRlIGhhZCBzdWRkZW5seSBiZWVuIHRha2VuIG9mZiwgYW5kIHRoYXQgYWx0aG91Z2ggZmV3IFNwYXJ0YW5zIGFsdG9nZXRoZXIgaGFkIGJlZW4ga2lsbGVkLCB0aGUgbG9zcyBvZiB0aGVpciBlbmVtaWVzIHdhcyB2ZXJ5IGhlYXZ5LCBoZSB3YXMgbm90IHNlZW4gdG8gYmUgcmVqb2ljZWQgb3IgZWxhdGVkLCBidXQgZmV0Y2hlZCBhIGRlZXAgZ3JvYW4gYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxhcyBmb3IgSGVsbGFzLCB3aGljaCBoYXMgYnkgaGVyIG93biBoYW5kcyBkZXN0cm95ZWQgc28gbWFueSBicmF2ZSBtZW4hIEhhZCB0aGV5IGxpdmVkLCB0aGV5IGNvdWxkIGhhdmUgY29ucXVlcmVkIGluIGJhdHRsZSBhbGwgdGhlIEJhcmJhcmlhbnMgaW4gdGhlIHdvcmxkLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB3aGVuIHRoZSBQaGFyc2FsaWFucyBhbm5veWVkIGhpbSBhbmQgaGFyYXNzZWQgaGlzIGFybXksIGhlIG9yZGVyZWQgZml2ZSBodW5kcmVkIGhvcnNlbWVuIHdoaWNoIGhlIGxlZCBpbiBwZXJzb24gdG8gYXR0YWNrIHRoZW0sIHJvdXRlZCB0aGVtLCBhbmQgc2V0IHVwIGEgdHJvcGh5IGF0IHRoZSBmb290IG9mIG1vdW50IE5hcnRoYWNpdW0uIFRoaXMgdmljdG9yeSBnYXZlIGhpbSBzcGVjaWFsIHBsZWFzdXJlLCBiZWNhdXNlIHdpdGggaG9yc2VtZW4gb2YgaGlzIG93biBtdXN0ZXJpbmcgYW5kIHRyYWluaW5nLCBhbmQgd2l0aCBubyBvdGhlciBmb3JjZSwgaGUgaGFkIGNvbnF1ZXJlZCB0aG9zZSB3aG9zZSBjaGllZiBwcmlkZSB3YXMgcGxhY2VkIGluIHRoZWlyIGNhdmFscnkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjkiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gMywgOS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gaGUgaGFkIGNyb3NzZWQgdGhlIEhlbGxlc3BvbnQgYW5kIHdhcyBtYXJjaGluZyB0aHJvdWdoIFRocmFjZSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWdlc2lsYcO8cyBmb2xsb3dlZCAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSB2ZXJ5IHJvdXRlIHRha2VuIGJ5IHRoZSBHcmVhdCBLaW5nIHdoZW4gaGUgaW52YWRlZCBIZWxsYXM8L3E+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMi44IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gMiwgODwvYmlibD4pLjwvbm90ZT4gaGUgbWFkZSBubyByZXF1ZXN0cyBvZiBhbnkgb2YgdGhlIEJhcmJhcmlhbnMsIGJ1dCBzZW50IGVudm95cyB0byBlYWNoIHBlb3BsZSBhc2tpbmcgd2hldGhlciBoZSBzaG91bGQgdHJhdmVyc2UgdGhlaXIgY291bnRyeSBhcyBhIGZyaWVuZCBvciBhcyBhIGZvZS4gQWxsIHRoZSByZXN0LCBhY2NvcmRpbmdseSwgcmVjZWl2ZWQgaGltIGFzIGEgZnJpZW5kIGFuZCBhc3Npc3RlZCBoaW0gb24gaGlzIHdheSwgYXMgdGhleSB3ZXJlIHNldmVyYWxseSBhYmxlOyBidXQgdGhlIHBlb3BsZSBjYWxsZWQgVHJhbGxpYW5zLCB0byB3aG9tIGV2ZW4gWGVyeGVzIGdhdmUgZ2lmdHMsIGFzIHdlIGFyZSB0b2xkLCBkZW1hbmRlZCBvZiBBZ2VzaWxhw7xzIGFzIGEgcHJpY2UgZm9yIGhpcyBwYXNzYWdlIGEgaHVuZHJlZCB0YWxlbnRzIG9mIHNpbHZlciBhbmQgYXMgbWFueSB3b21lbi4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSB2ZXJ5IHJvdXRlIHRha2VuIGJ5IHRoZSBHcmVhdCBLaW5nIHdoZW4gaGUgaW52YWRlZCBIZWxsYXM8L3E+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMi44IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gMiwgODwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDIsIDg8L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSBhbnN3ZXJlZCB0aGVtIHdpdGggc2Nvcm4sIGFza2luZyB3aHksIHRoZW4sIHRoZXkgZGlkIG5vdCBjb21lIGF0IG9uY2UgdG8gZ2V0IHRoZWlyIHByaWNlOyBhbmQgbWFyY2hlZCBmb3J3YXJkLCBhbmQgZmluZGluZyB0aGVtIGRyYXduIHVwIGZvciBiYXR0bGUsIGVuZ2FnZWQgdGhlbSwgcm91dGVkIHRoZW0sIGFuZCBzbGV3IG1hbnkgb2YgdGhlbS4gSGUgc2VudCBoaXMgdXN1YWwgZW5xdWlyeSBmb3J3YXJkIHRvIHRoZSBraW5nIG9mIHRoZSBNYWNlZG9uaWFucyBhbHNvLCB3aG8gYW5zd2VyZWQgdGhhdCBoZSB3b3VsZCBkZWxpYmVyYXRlIHVwb24gaXQuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MZXQgaGltIGRlbGliZXJhdGUsIHRoZW4sPC9xPiBzYWlkIEFnZXNpbGHDvHMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5idXQgd2Ugd2lsbCBtYXJjaCBvbi48L3E+IEluIGFtYXplbWVudCB0aGVyZWZvcmUgYXQgaGlzIGJvbGRuZXNzLCBhbmQgaW4gZmVhciwgdGhlIE1hY2Vkb25pYW4ga2luZyBnYXZlIG9yZGVycyB0byBsZXQgaGltIHBhc3MgYXMgYSBmcmllbmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIHRoZSBUaGVzc2FsaWFucyB3ZXJlIGluIGFsbGlhbmNlIHdpdGggaGlzIGVuZW1pZXMsIGhlIHJhdmFnZWQgdGhlaXIgY291bnRyeS4gQnV0IHRvIHRoZSBjaXR5IG9mIExhcmlzc2EgaGUgc2VudCBYZW5vY2xlcyBhbmQgU2N5dGhlcywgaG9waW5nIHRvIHNlY3VyZSBpdHMgZnJpZW5kc2hpcC4gSGlzIGFtYmFzc2Fkb3JzLCBob3dldmVyLCB3ZXJlIGFycmVzdGVkIGFuZCBrZXB0IGluIGNsb3NlIGN1c3RvZHksIHdoZXJldXBvbiB0aGUgcmVzdCBvZiBoaXMgY29tbWFuZCB3ZXJlIGluZGlnbmFudCwgYW5kIHRob3VnaHQgdGhhdCBBZ2VzaWxhw7xzIG91Z2h0IHRvIGVuY2FtcCBhYm91dCBMYXJpc3NhIGFuZCBsYXkgc2llZ2UgdG8gaXQuIEJ1dCBoZSBkZWNsYXJlZCB0aGF0IHRoZSBjYXB0dXJlIG9mIGFsbCBUaGVzc2FseSB3b3VsZCBub3QgY29tcGVuc2F0ZSBoaW0gZm9yIHRoZSBsb3NzIG9mIGVpdGhlciBvbmUgb2YgaGlzIG1lbiwgYW5kIG1hZGUgdGVybXMgd2l0aCB0aGUgZW5lbXkgaW4gb3JkZXIgdG8gZ2V0IHRoZW0gYmFjay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBwZXJoYXBzIHdlIG5lZWQgbm90IHdvbmRlciBhdCBzdWNoIGNvbmR1Y3QgaW4gQWdlc2lsYcO8cywgc2luY2Ugd2hlbiBoZSBsZWFybmVkIHRoYXQgYSBncmVhdCBiYXR0bGUgaGFkIGJlZW4gZm91Z2h0IG5lYXIgQ29yaW50aCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Mzk0IEIuQy4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4yLjE4IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gMiwgMTg8L2JpYmw+4oCUPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuMSIgdmFsaWQ9InllcyI+MywgMSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgdGhhdCBtZW4gb2YgdGhlIGhpZ2hlc3QgcmVwdXRlIGhhZCBzdWRkZW5seSBiZWVuIHRha2VuIG9mZiwgYW5kIHRoYXQgYWx0aG91Z2ggZmV3IFNwYXJ0YW5zIGFsdG9nZXRoZXIgaGFkIGJlZW4ga2lsbGVkLCB0aGUgbG9zcyBvZiB0aGVpciBlbmVtaWVzIHdhcyB2ZXJ5IGhlYXZ5LCBoZSB3YXMgbm90IHNlZW4gdG8gYmUgcmVqb2ljZWQgb3IgZWxhdGVkLCBidXQgZmV0Y2hlZCBhIGRlZXAgZ3JvYW4gYW5kIHNhaWQ6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjIuMTgiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAyLCAxODwvYmlibD7igJQ8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAyLCAxODxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjEiIHZhbGlkPSJ5ZXMiPjMsIDEgZi48L2JpYmw+CiAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxhcyBmb3IgSGVsbGFzLCB3aGljaCBoYXMgYnkgaGVyIG93biBoYW5kcyBkZXN0cm95ZWQgc28gbWFueSBicmF2ZSBtZW4hIEhhZCB0aGV5IGxpdmVkLCB0aGV5IGNvdWxkIGhhdmUgY29ucXVlcmVkIGluIGJhdHRsZSBhbGwgdGhlIEJhcmJhcmlhbnMgaW4gdGhlIHdvcmxkLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gdGhlIFBoYXJzYWxpYW5zIGFubm95ZWQgaGltIGFuZCBoYXJhc3NlZCBoaXMgYXJteSwgaGUgb3JkZXJlZCBmaXZlIGh1bmRyZWQgaG9yc2VtZW4gd2hpY2ggaGUgbGVkIGluIHBlcnNvbiB0byBhdHRhY2sgdGhlbSwgcm91dGVkIHRoZW0sIGFuZCBzZXQgdXAgYSB0cm9waHkgYXQgdGhlIGZvb3Qgb2YgbW91bnQgTmFydGhhY2l1bS4gVGhpcyB2aWN0b3J5IGdhdmUgaGltIHNwZWNpYWwgcGxlYXN1cmUsIGJlY2F1c2Ugd2l0aCBob3JzZW1lbiBvZiBoaXMgb3duIG11c3RlcmluZyBhbmQgdHJhaW5pbmcsIGFuZCB3aXRoIG5vIG90aGVyIGZvcmNlLCBoZSBoYWQgY29ucXVlcmVkIHRob3NlIHdob3NlIGNoaWVmIHByaWRlIHdhcyBwbGFjZWQgaW4gdGhlaXIgY2F2YWxyeS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjkiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAzLCA5LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMy45IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gMywgOS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDMsIDkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSBEaXBocmlkYXMsIGFuIGVwaG9yIGZyb20gU3BhcnRhLCBtZXQgaGltLCB3aXRoIG9yZGVycyB0byBpbnZhZGUgQm9lb3RpYSBpbW1lZGlhdGVseS4gVGhlcmVmb3JlLCBhbHRob3VnaCBoZSB3YXMgcHVycG9zaW5nIHRvIGRvIHRoaXMgbGF0ZXIgd2l0aCBhIGxhcmdlciBhcm1hbWVudCwgaGUgdGhvdWdodCBpdCBkaWQgbm90IGJlaG9vdmUgaGltIHRvIGRpc29iZXkgdGhlIG1hZ2lzdHJhdGVzLCBidXQgc2FpZCB0byB0aG9zZSB3aG8gd2VyZSB3aXRoIGhpbSB0aGF0IHRoZSBkYXkgd2FzIG5lYXIgZm9yIHdoaWNoIHRoZXkgaGFkIGNvbWUgZnJvbSBBc2lhLiBIZSBhbHNvIHNlbnQgZm9yIHR3byBkaXZpc2lvbnMgb2YgdGhlIGFybXkgYXQgQ29yaW50aC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGUgTGFjZWRhZW1vbmlhbnMgYXQgaG9tZSwgd2lzaGluZyB0byBkbyBoaW0gaG9ub3VyLCBtYWRlIHByb2NsYW1hdGlvbiB0aGF0IGFueSB5b3VuZyBtYW4gd2hvIHdpc2hlZCBtaWdodCBlbmxpc3QgaW4gYWlkIG9mIHRoZSBraW5nLiBBbGwgZW5saXN0ZWQgZWFnZXJseSwgYW5kIHRoZSBtYWdpc3RyYXRlcyBjaG9zZSBvdXQgdGhlIG1vc3QgbWF0dXJlIGFuZCB2aWdvcm91cyBvZiB0aGVtIHRvIHRoZSBudW1iZXIgb2YgZmlmdHksIGFuZCBzZW50IHRoZW0gb2ZmLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSBEaXBocmlkYXMsIGFuIGVwaG9yIGZyb20gU3BhcnRhLCBtZXQgaGltLCB3aXRoIG9yZGVycyB0byBpbnZhZGUgQm9lb3RpYSBpbW1lZGlhdGVseS4gVGhlcmVmb3JlLCBhbHRob3VnaCBoZSB3YXMgcHVycG9zaW5nIHRvIGRvIHRoaXMgbGF0ZXIgd2l0aCBhIGxhcmdlciBhcm1hbWVudCwgaGUgdGhvdWdodCBpdCBkaWQgbm90IGJlaG9vdmUgaGltIHRvIGRpc29iZXkgdGhlIG1hZ2lzdHJhdGVzLCBidXQgc2FpZCB0byB0aG9zZSB3aG8gd2VyZSB3aXRoIGhpbSB0aGF0IHRoZSBkYXkgd2FzIG5lYXIgZm9yIHdoaWNoIHRoZXkgaGFkIGNvbWUgZnJvbSBBc2lhLiBIZSBhbHNvIHNlbnQgZm9yIHR3byBkaXZpc2lvbnMgb2YgdGhlIGFybXkgYXQgQ29yaW50aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIExhY2VkYWVtb25pYW5zIGF0IGhvbWUsIHdpc2hpbmcgdG8gZG8gaGltIGhvbm91ciwgbWFkZSBwcm9jbGFtYXRpb24gdGhhdCBhbnkgeW91bmcgbWFuIHdobyB3aXNoZWQgbWlnaHQgZW5saXN0IGluIGFpZCBvZiB0aGUga2luZy4gQWxsIGVubGlzdGVkIGVhZ2VybHksIGFuZCB0aGUgbWFnaXN0cmF0ZXMgY2hvc2Ugb3V0IHRoZSBtb3N0IG1hdHVyZSBhbmQgdmlnb3JvdXMgb2YgdGhlbSB0byB0aGUgbnVtYmVyIG9mIGZpZnR5LCBhbmQgc2VudCB0aGVtIG9mZi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzIG5vdyBtYXJjaGVkIHRocm91Z2ggdGhlIHBhc3Mgb2YgVGhlcm1vcHlsYWUsIHRyYXZlcnNlZCBQaG9jaXMsIHdoaWNoIHdhcyBmcmllbmRseSB0byBTcGFydGEsIGVudGVyZWQgQm9lb3RpYSwgYW5kIGVuY2FtcGVkIG5lYXIgQ2hhZXJvbmVpYS4gSGVyZSBhIHBhcnRpYWwgZWNsaXBzZSBvZiB0aGUgc3VuIG9jY3VycmVkLCBhbmQgYXQgdGhlIHNhbWUgdGltZQoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdWd1c3QsIDM5NCBCLkMuPC9ub3RlPiBuZXdzIGNhbWUgdG8gaGltIG9mIHRoZSBkZWF0aCBvZiBQZWlzYW5kZXIsIHdobyB3YXMgZGVmZWF0ZWQgaW4gYSBuYXZhbCBiYXR0bGUgb2ZmIENuaWR1cyBieSBQaGFybmFiYXp1cyBhbmQgQ29ub24uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWdlc2lsYcO8cyB3YXMgbmF0dXJhbGx5IG11Y2ggZGlzdHJlc3NlZCBhdCB0aGVzZSB0aWRpbmdzLCBib3RoIGJlY2F1c2Ugb2YgdGhlIG1hbiB0aHVzIGxvc3QsIGFuZCBvZiB0aGUgY2l0eSB3aGljaCBoYWQgbG9zdCBoaW07IGJ1dCBuZXZlcnRoZWxlc3MsIHRoYXQgaGlzIHNvbGRpZXJzIG1pZ2h0IG5vdCBiZSB2aXNpdGVkIHdpdGggZGVqZWN0aW9uIGFuZCBmZWFyIGFzIHRoZXkgd2VyZSBnb2luZyBpbnRvIGJhdHRsZSwgaGUgb3JkZXJlZCB0aGUgbWVzc2VuZ2VycyBmcm9tIHRoZSBzZWEgdG8gcmV2ZXJzZSB0aGVpciB0aWRpbmdzIGFuZCBzYXkgdGhhdCB0aGUgU3BhcnRhbnMgd2VyZSB2aWN0b3Jpb3VzIGluIHRoZSBuYXZhbCBiYXR0bGUuIEhlIGhpbXNlbGYgYWxzbyBjYW1lIGZvcnRoIHB1YmxpY2x5IHdpdGggYSBnYXJsYW5kIG9uIGhpcyBoZWFkLCBvZmZlcmVkIHNhY3JpZmljZXMgZm9yIGdsYWQgdGlkaW5ncywgYW5kIHNlbnQgcG9ydGlvbnMgb2YgdGhlIHNhY3JpZmljaWFsIHZpY3RpbXMgdG8gaGlzIGZyaWVuZHMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc29sZGllcnMgb2YgQWdlc2lsYcO8cyB3ZXJlIGNvbnNlcXVlbnRseSB2aWN0b3Jpb3VzIGluIGEgc2tpcm1pc2ggd2l0aCB0aGUgZW5lbXksIGFjY29yZGluZyB0byBYZW5vcGhvbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjE0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDMsIDE0PC9iaWJsPikuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXVndXN0LCAzOTQgQi5DLjwvbm90ZT4gbmV3cyBjYW1lIHRvIGhpbSBvZiB0aGUgZGVhdGggb2YgUGVpc2FuZGVyLCB3aG8gd2FzIGRlZmVhdGVkIGluIGEgbmF2YWwgYmF0dGxlIG9mZiBDbmlkdXMgYnkgUGhhcm5hYmF6dXMgYW5kIENvbm9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMgd2FzIG5hdHVyYWxseSBtdWNoIGRpc3RyZXNzZWQgYXQgdGhlc2UgdGlkaW5ncywgYm90aCBiZWNhdXNlIG9mIHRoZSBtYW4gdGh1cyBsb3N0LCBhbmQgb2YgdGhlIGNpdHkgd2hpY2ggaGFkIGxvc3QgaGltOyBidXQgbmV2ZXJ0aGVsZXNzLCB0aGF0IGhpcyBzb2xkaWVycyBtaWdodCBub3QgYmUgdmlzaXRlZCB3aXRoIGRlamVjdGlvbiBhbmQgZmVhciBhcyB0aGV5IHdlcmUgZ29pbmcgaW50byBiYXR0bGUsIGhlIG9yZGVyZWQgdGhlIG1lc3NlbmdlcnMgZnJvbSB0aGUgc2VhIHRvIHJldmVyc2UgdGhlaXIgdGlkaW5ncyBhbmQgc2F5IHRoYXQgdGhlIFNwYXJ0YW5zIHdlcmUgdmljdG9yaW91cyBpbiB0aGUgbmF2YWwgYmF0dGxlLiBIZSBoaW1zZWxmIGFsc28gY2FtZSBmb3J0aCBwdWJsaWNseSB3aXRoIGEgZ2FybGFuZCBvbiBoaXMgaGVhZCwgb2ZmZXJlZCBzYWNyaWZpY2VzIGZvciBnbGFkIHRpZGluZ3MsIGFuZCBzZW50IHBvcnRpb25zIG9mIHRoZSBzYWNyaWZpY2lhbCB2aWN0aW1zIHRvIGhpcyBmcmllbmRzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc29sZGllcnMgb2YgQWdlc2lsYcO8cyB3ZXJlIGNvbnNlcXVlbnRseSB2aWN0b3Jpb3VzIGluIGEgc2tpcm1pc2ggd2l0aCB0aGUgZW5lbXksIGFjY29yZGluZyB0byBYZW5vcGhvbiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuMTQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAzLCAxNDwvYmlibD4pLjwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuMTQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAzLCAxNDwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDMsIDE0PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgYWR2YW5jaW5nIGFzIGZhciBhcyBDb3JvbmVpYSBhbmQgY29taW5nIHdpdGhpbiBzaWdodCBvZiB0aGUgZW5lbXksIGhlIGRyZXcgdXAgaGlzIGFybXkgaW4gYmF0dGxlIGFycmF5LCBnaXZpbmcgdGhlIGxlZnQgd2luZyB0byB0aGUgT3JjaG9tZW5pYW5zLCB3aGlsZSBoZSBoaW1zZWxmIGxlZCBmb3J3YXJkIHRoZSByaWdodC4gT24gdGhlIG90aGVyIHNpZGUsIHRoZSBUaGViYW5zIGhlbGQgdGhlIHJpZ2h0IHdpbmcgdGhlbXNlbHZlcywgYW5kIHRoZSBBcmdpdmVzIHRoZSBsZWZ0LiBYZW5vcGhvbiBzYXlzIHRoYXQgdGhpcyBiYXR0bGUgd2FzIHVubGlrZSBhbnkgZXZlciBmb3VnaHQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjE2IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuMTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SGVsbGVuaWNhPC90aXRsZT4sIGl2LiAzLCAxNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGhlIHdhcyBwcmVzZW50IGhpbXNlbGYgYW5kIGZvdWdodCBvbiB0aGUgc2lkZSBvZiBBZ2VzaWxhw7xzLCBoYXZpbmcgY3Jvc3NlZCBvdmVyIHdpdGggaGltIGZyb20gQXNpYS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiA1LjMuNiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gNS4zLjYiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uJ3MgPHRpdGxlPkFuYWJhc2lzPC90aXRsZT4sIHYuIDMsIDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZpcnN0IGltcGFjdCwgaXQgaXMgdHJ1ZSwgZGlkIG5vdCBtZWV0IHdpdGggbXVjaCByZXNpc3RhbmNlLCBub3Igd2FzIGl0IGxvbmcgY29udGVzdGVkLCBidXQgdGhlIFRoZWJhbnMgc3BlZWRpbHkgcm91dGVkIHRoZSBPcmNob21lbmlhbnMsIGFzIEFnZXNpbGHDvHMgZGlkIHRoZSBBcmdpdmVzLiBCb3RoIHBhcnRpZXMsIGhvd2V2ZXIsIG9uIGhlYXJpbmcgdGhhdCB0aGVpciBsZWZ0IHdpbmdzIHdlcmUgb3ZlcndoZWxtZWQgYW5kIGluIGZsaWdodCwgdHVybmVkIGJhY2suIFRoZW4sIGFsdGhvdWdoIHRoZSB2aWN0b3J5IG1pZ2h0IGhhdmUgYmVlbiBoaXMgd2l0aG91dCBwZXJpbCBpZiBoZSBoYWQgYmVlbiB3aWxsaW5nIHRvIHJlZnJhaW4gZnJvbSBhdHRhY2tpbmcgdGhlIFRoZWJhbnMgaW4gZnJvbnQgYW5kIHRvIHNtaXRlIHRoZW0gaW4gdGhlIHJlYXIgYWZ0ZXIgdGhleSBoYWQgcGFzc2VkIGJ5LCBBZ2VzaWxhw7xzIHdhcyBjYXJyaWVkIGF3YXkgYnkgcGFzc2lvbiBhbmQgdGhlIGFyZG91ciBvZiBiYXR0bGUgYW5kIGFkdmFuY2VkIGRpcmVjdGx5IHVwb24gdGhlbSwgd2lzaGluZyB0byBiZWFyIHRoZW0gZG93biBieSBzaGVlciBmb3JjZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXkgcmVjZWl2ZWQgaGltIHdpdGggYSB2aWdvdXIgdGhhdCBtYXRjaGVkIGhpcyBvd24sIGFuZCBhIGJhdHRsZSBlbnN1ZWQgd2hpY2ggd2FzIGZpZXJjZSBhdCBhbGwgcG9pbnRzIGluIHRoZSBsaW5lLCBidXQgZmllcmNlc3Qgd2hlcmUgdGhlIGtpbmcgaGltc2VsZiBzdG9vZCBzdXJyb3VuZGVkIGJ5IGhpcyBmaWZ0eSB2b2x1bnRlZXJzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2VzLiAxNy4yIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMTcuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmlpLiAyLjwvYmlibD4gVGhleSBhcmUgbm90IG1lbnRpb25lZCBieSBYZW5vcGhvbi48L25vdGU+IHdob3NlIG9wcG9ydHVuZSBhbmQgZW11bG91cyB2YWxvdXIgc2VlbXMgdG8gaGF2ZSBzYXZlZCBoaXMgbGlmZS4gRm9yIHRoZXkgZm91Z2h0IHdpdGggdGhlIHV0bW9zdCBmdXJ5IGFuZCBleHBvc2VkIHRoZWlyIGxpdmVzIGluIGhpcyBiZWhhbGYsIGFuZCB0aG91Z2ggdGhleSB3ZXJlIG5vdCBhYmxlIHRvIGtlZXAgaGltIGZyb20gYmVpbmcgd291bmRlZCwgYnV0IG1hbnkgYmxvd3Mgb2Ygc3BlYXJzIGFuZCBzd29yZHMgcGllcmNlZCBoaXMgYXJtb3VyIGFuZCByZWFjaGVkIGhpcyBwZXJzb24sIHRoZXkgZGlkIHN1Y2NlZWQgaW4gZHJhZ2dpbmcgaGltIG9mZiBhbGl2ZSwgYW5kIHN0YW5kaW5nIGluIGNsb3NlIGFycmF5IGluIGZyb250IG9mIGhpbSwgdGhleSBzbGV3IG1hbnkgZm9lcywgd2hpbGUgbWFueSBvZiB0aGVpciBvd24gbnVtYmVyIGZlbGwuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBpdCBwcm92ZWQgdG9vIGhhcmQgYSB0YXNrIHRvIGJyZWFrIHRoZSBUaGViYW4gZnJvbnQsIHRoZXkgd2VyZSBmb3JjZWQgdG8gZG8gd2hhdCBhdCB0aGUgb3V0c2V0IHRoZXkgd2VyZSBsb3RoIHRvIGRvLiBUaGV5IG9wZW5lZCB0aGVpciByYW5rcyBhbmQgbGV0IHRoZSBlbmVteSBwYXNzIHRocm91Z2gsIGFuZCB0aGVuLCB3aGVuIHRoZXNlIGhhZCBnb3QgY2xlYXIsIGFuZCB3ZXJlIGFscmVhZHkgbWFyY2hpbmcgaW4gbG9vc2VyIGFycmF5LCB0aGUgU3BhcnRhbnMgZm9sbG93ZWQgb24gdGhlIHJ1biBhbmQgc21vdGUgdGhlbSBvbiB0aGUgZmxhbmtzLiBUaGV5IGNvdWxkIG5vdCwgaG93ZXZlciwgcHV0IHRoZW0gdG8gcm91dCwgYnV0IHRoZSBUaGViYW5zIHdpdGhkcmV3IHRvIE1vdW50IEhlbGljb24sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gcm9tIHRoZSBzbG9wZXMgb2Ygd2hpY2ggdGhleSBoYWQgYWR2YW5jZWQgdG8gdGhlIGJhdHRsZS48L25vdGU+IGdyZWF0bHkgZWxhdGVkIG92ZXIgdGhlIGJhdHRsZSwgaW4gd2hpY2gsIGFzIHRoZXkgcmVhc29uZWQsIHRoZWlyIG93biBjb250aW5nZW50IGhhZCBiZWVuIHVuZGVmZWF0ZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgYWR2YW5jaW5nIGFzIGZhciBhcyBDb3JvbmVpYSBhbmQgY29taW5nIHdpdGhpbiBzaWdodCBvZiB0aGUgZW5lbXksIGhlIGRyZXcgdXAgaGlzIGFybXkgaW4gYmF0dGxlIGFycmF5LCBnaXZpbmcgdGhlIGxlZnQgd2luZyB0byB0aGUgT3JjaG9tZW5pYW5zLCB3aGlsZSBoZSBoaW1zZWxmIGxlZCBmb3J3YXJkIHRoZSByaWdodC4gT24gdGhlIG90aGVyIHNpZGUsIHRoZSBUaGViYW5zIGhlbGQgdGhlIHJpZ2h0IHdpbmcgdGhlbXNlbHZlcywgYW5kIHRoZSBBcmdpdmVzIHRoZSBsZWZ0LiBYZW5vcGhvbiBzYXlzIHRoYXQgdGhpcyBiYXR0bGUgd2FzIHVubGlrZSBhbnkgZXZlciBmb3VnaHQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMy4xNiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuMTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsZW5pY2E8L3RpdGxlPiwgaXYuIDMsIDE2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgaGUgd2FzIHByZXNlbnQgaGltc2VsZiBhbmQgZm91Z2h0IG9uIHRoZSBzaWRlIG9mIEFnZXNpbGHDvHMsIGhhdmluZyBjcm9zc2VkIG92ZXIgd2l0aCBoaW0gZnJvbSBBc2lhLgoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuMTYiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjE2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbGVuaWNhPC90aXRsZT4sIGl2LiAzLCAxNi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGxlbmljYTwvdGl0bGU+LCBpdi4gMywgMTYuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiA1LjMuNiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiA1LjMuNiIgdmFsaWQ9InllcyI+WGVub3Bob24ncyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiYXNpczwvdGl0bGU+LCB2LiAzLCA2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiA1LjMuNiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiA1LjMuNiIgdmFsaWQ9InllcyI+WGVub3Bob24ncyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiYXNpczwvdGl0bGU+LCB2LiAzLCA2LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYmFzaXM8L3RpdGxlPiwgdi4gMywgNi48L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBpbXBhY3QsIGl0IGlzIHRydWUsIGRpZCBub3QgbWVldCB3aXRoIG11Y2ggcmVzaXN0YW5jZSwgbm9yIHdhcyBpdCBsb25nIGNvbnRlc3RlZCwgYnV0IHRoZSBUaGViYW5zIHNwZWVkaWx5IHJvdXRlZCB0aGUgT3JjaG9tZW5pYW5zLCBhcyBBZ2VzaWxhw7xzIGRpZCB0aGUgQXJnaXZlcy4gQm90aCBwYXJ0aWVzLCBob3dldmVyLCBvbiBoZWFyaW5nIHRoYXQgdGhlaXIgbGVmdCB3aW5ncyB3ZXJlIG92ZXJ3aGVsbWVkIGFuZCBpbiBmbGlnaHQsIHR1cm5lZCBiYWNrLiBUaGVuLCBhbHRob3VnaCB0aGUgdmljdG9yeSBtaWdodCBoYXZlIGJlZW4gaGlzIHdpdGhvdXQgcGVyaWwgaWYgaGUgaGFkIGJlZW4gd2lsbGluZyB0byByZWZyYWluIGZyb20gYXR0YWNraW5nIHRoZSBUaGViYW5zIGluIGZyb250IGFuZCB0byBzbWl0ZSB0aGVtIGluIHRoZSByZWFyIGFmdGVyIHRoZXkgaGFkIHBhc3NlZCBieSwgQWdlc2lsYcO8cyB3YXMgY2FycmllZCBhd2F5IGJ5IHBhc3Npb24gYW5kIHRoZSBhcmRvdXIgb2YgYmF0dGxlIGFuZCBhZHZhbmNlZCBkaXJlY3RseSB1cG9uIHRoZW0sIHdpc2hpbmcgdG8gYmVhciB0aGVtIGRvd24gYnkgc2hlZXIgZm9yY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5IHJlY2VpdmVkIGhpbSB3aXRoIGEgdmlnb3VyIHRoYXQgbWF0Y2hlZCBoaXMgb3duLCBhbmQgYSBiYXR0bGUgZW5zdWVkIHdoaWNoIHdhcyBmaWVyY2UgYXQgYWxsIHBvaW50cyBpbiB0aGUgbGluZSwgYnV0IGZpZXJjZXN0IHdoZXJlIHRoZSBraW5nIGhpbXNlbGYgc3Rvb2Qgc3Vycm91bmRlZCBieSBoaXMgZmlmdHkgdm9sdW50ZWVycywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDE3LjIiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDE3LjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpaS4gMi48L2JpYmw+IFRoZXkgYXJlIG5vdCBtZW50aW9uZWQgYnkgWGVub3Bob24uPC9ub3RlPiB3aG9zZSBvcHBvcnR1bmUgYW5kIGVtdWxvdXMgdmFsb3VyIHNlZW1zIHRvIGhhdmUgc2F2ZWQgaGlzIGxpZmUuIEZvciB0aGV5IGZvdWdodCB3aXRoIHRoZSB1dG1vc3QgZnVyeSBhbmQgZXhwb3NlZCB0aGVpciBsaXZlcyBpbiBoaXMgYmVoYWxmLCBhbmQgdGhvdWdoIHRoZXkgd2VyZSBub3QgYWJsZSB0byBrZWVwIGhpbSBmcm9tIGJlaW5nIHdvdW5kZWQsIGJ1dCBtYW55IGJsb3dzIG9mIHNwZWFycyBhbmQgc3dvcmRzIHBpZXJjZWQgaGlzIGFybW91ciBhbmQgcmVhY2hlZCBoaXMgcGVyc29uLCB0aGV5IGRpZCBzdWNjZWVkIGluIGRyYWdnaW5nIGhpbSBvZmYgYWxpdmUsIGFuZCBzdGFuZGluZyBpbiBjbG9zZSBhcnJheSBpbiBmcm9udCBvZiBoaW0sIHRoZXkgc2xldyBtYW55IGZvZXMsIHdoaWxlIG1hbnkgb2YgdGhlaXIgb3duIG51bWJlciBmZWxsLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDE3LjIiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDE3LjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpaS4gMi48L2JpYmw+IFRoZXkgYXJlIG5vdCBtZW50aW9uZWQgYnkgWGVub3Bob24uPC90cmFuc2xhdGlvbj4="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBpdCBwcm92ZWQgdG9vIGhhcmQgYSB0YXNrIHRvIGJyZWFrIHRoZSBUaGViYW4gZnJvbnQsIHRoZXkgd2VyZSBmb3JjZWQgdG8gZG8gd2hhdCBhdCB0aGUgb3V0c2V0IHRoZXkgd2VyZSBsb3RoIHRvIGRvLiBUaGV5IG9wZW5lZCB0aGVpciByYW5rcyBhbmQgbGV0IHRoZSBlbmVteSBwYXNzIHRocm91Z2gsIGFuZCB0aGVuLCB3aGVuIHRoZXNlIGhhZCBnb3QgY2xlYXIsIGFuZCB3ZXJlIGFscmVhZHkgbWFyY2hpbmcgaW4gbG9vc2VyIGFycmF5LCB0aGUgU3BhcnRhbnMgZm9sbG93ZWQgb24gdGhlIHJ1biBhbmQgc21vdGUgdGhlbSBvbiB0aGUgZmxhbmtzLiBUaGV5IGNvdWxkIG5vdCwgaG93ZXZlciwgcHV0IHRoZW0gdG8gcm91dCwgYnV0IHRoZSBUaGViYW5zIHdpdGhkcmV3IHRvIE1vdW50IEhlbGljb24sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyb20gdGhlIHNsb3BlcyBvZiB3aGljaCB0aGV5IGhhZCBhZHZhbmNlZCB0byB0aGUgYmF0dGxlLjwvbm90ZT4gZ3JlYXRseSBlbGF0ZWQgb3ZlciB0aGUgYmF0dGxlLCBpbiB3aGljaCwgYXMgdGhleSByZWFzb25lZCwgdGhlaXIgb3duIGNvbnRpbmdlbnQgaGFkIGJlZW4gdW5kZWZlYXRlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFnZXNpbGHDvHMsIGFsdGhvdWdoIGhlIHdhcyB3ZWFrZW5lZCBieSBtYW55IHdvdW5kcywgd291bGQgbm90IHJldGlyZSB0byBoaXMgdGVudCB1bnRpbCBoZSBoYWQgZmlyc3QgYmVlbiBjYXJyaWVkIHRvIGhpcyB0cm9vcHMgYW5kIHNlZW4gdGhhdCB0aGUgZGVhZCB3ZXJlIGNvbGxlY3RlZCB3aXRoaW4gdGhlIGVuY2FtcG1lbnQuIE1vcmVvdmVyLCBoZSBvcmRlcmVkIHRoYXQgYWxsIG9mIHRoZSBlbmVteSB3aG8gaGFkIHRha2VuIHJlZnVnZSBpbiB0aGUgc2FuY3R1YXJ5IHNob3VsZCBiZSBkaXNtaXNzZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgdGVtcGxlIG9mIEF0aGVuYSBJdG9uaWEgd2FzIG5lYXIgYXQgaGFuZCwgYW5kIGEgdHJvcGh5IHN0b29kIGluIGZyb250IG9mIGl0LCB3aGljaCB0aGUgQm9lb3RpYW5zIGhhZCBsb25nIGFnbyBlcmVjdGVkLCB3aGVuLCB1bmRlciB0aGUgY29tbWFuZCBvZiBTcGFydG8sIHRoZXkgaGFkIGRlZmVhdGVkIHRoZSBBdGhlbmlhbnMgdGhlcmUgYW5kIHNsYWluIFRvbG1pZGVzIHRoZWlyIGdlbmVyYWwuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA0NDcgQi5DLjsgY2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVyLiAxOC4yIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVyLiAxOC4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBlcmljbGVzPC90aXRsZT4sIHh2aWlpLiAyIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEVhcmx5IG5leHQgbW9ybmluZywgQWdlc2lsYcO8cywgd2lzaGluZyB0byB0cnkgdGhlIFRoZWJhbnMgYW5kIHNlZSB3aGV0aGVyIHRoZXkgd291bGQgZ2l2ZSBoaW0gYmF0dGxlLCBvcmRlcmVkIGhpcyBzb2xkaWVycyB0byB3cmVhdGggdGhlaXIgaGVhZHMgYW5kIGhpcyBwaXBlcnMgdG8gcGxheSB0aGVpciBwaXBlcywgd2hpbGUgYSB0cm9waHkgd2FzIHNldCB1cCBhbmQgYWRvcm5lZCBpbiB0b2tlbiBvZiB0aGVpciB2aWN0b3J5LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDYuNSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE5pYy4gNi41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk5pY2lhczwvdGl0bGU+LCB2aS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiB0aGUgZW5lbXkgc2VudCB0byBoaW0gYW5kIGFza2VkIHBlcm1pc3Npb24gdG8gdGFrZSB1cCB0aGVpciBkZWFkLCBoZSBtYWRlIGEgdHJ1Y2Ugd2l0aCB0aGVtLCBhbmQgaGF2aW5nIHRodXMgYXNzdXJlZCB0byBoaW1zZWxmIHRoZSB2aWN0b3J5LCBwcm9jZWVkZWQgdG8gRGVscGhpLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TGVhdmluZyB0aGUgYXJteSBpbiBjb21tYW5kIG9mIEd5bGlzIHRoZSBwb2xlbWFyY2ggKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMy4yMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC4zLjIxIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDMsIDIxPC9iaWJsPikuPC9ub3RlPiB3aGVyZSB0aGUgUHl0aGlhbiBnYW1lcyB3ZXJlIGluIHByb2dyZXNzLiBUaGVyZSBoZSBjZWxlYnJhdGVkIHRoZSBjdXN0b21hcnkgcHJvY2Vzc2lvbiBpbiBob25vdXIgb2YgdGhlIGdvZCwgYW5kIG9mZmVyZWQgdXAgdGhlIHRlbnRoIG9mIHRoZSBzcG9pbHMgd2hpY2ggaGUgaGFkIGJyb3VnaHQgZnJvbSBBc2lhLCBhbW91bnRpbmcgdG8gYSBodW5kcmVkIHRhbGVudHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFnZXNpbGHDvHMsIGFsdGhvdWdoIGhlIHdhcyB3ZWFrZW5lZCBieSBtYW55IHdvdW5kcywgd291bGQgbm90IHJldGlyZSB0byBoaXMgdGVudCB1bnRpbCBoZSBoYWQgZmlyc3QgYmVlbiBjYXJyaWVkIHRvIGhpcyB0cm9vcHMgYW5kIHNlZW4gdGhhdCB0aGUgZGVhZCB3ZXJlIGNvbGxlY3RlZCB3aXRoaW4gdGhlIGVuY2FtcG1lbnQuIE1vcmVvdmVyLCBoZSBvcmRlcmVkIHRoYXQgYWxsIG9mIHRoZSBlbmVteSB3aG8gaGFkIHRha2VuIHJlZnVnZSBpbiB0aGUgc2FuY3R1YXJ5IHNob3VsZCBiZSBkaXNtaXNzZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgdGVtcGxlIG9mIEF0aGVuYSBJdG9uaWEgd2FzIG5lYXIgYXQgaGFuZCwgYW5kIGEgdHJvcGh5IHN0b29kIGluIGZyb250IG9mIGl0LCB3aGljaCB0aGUgQm9lb3RpYW5zIGhhZCBsb25nIGFnbyBlcmVjdGVkLCB3aGVuLCB1bmRlciB0aGUgY29tbWFuZCBvZiBTcGFydG8sIHRoZXkgaGFkIGRlZmVhdGVkIHRoZSBBdGhlbmlhbnMgdGhlcmUgYW5kIHNsYWluIFRvbG1pZGVzIHRoZWlyIGdlbmVyYWwuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDQ0NyBCLkMuOyBjZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlci4gMTguMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVyLiAxOC4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVyaWNsZXM8L3RpdGxlPiwgeHZpaWkuIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gRWFybHkgbmV4dCBtb3JuaW5nLCBBZ2VzaWxhw7xzLCB3aXNoaW5nIHRvIHRyeSB0aGUgVGhlYmFucyBhbmQgc2VlIHdoZXRoZXIgdGhleSB3b3VsZCBnaXZlIGhpbSBiYXR0bGUsIG9yZGVyZWQgaGlzIHNvbGRpZXJzIHRvIHdyZWF0aCB0aGVpciBoZWFkcyBhbmQgaGlzIHBpcGVycyB0byBwbGF5IHRoZWlyIHBpcGVzLCB3aGlsZSBhIHRyb3BoeSB3YXMgc2V0IHVwIGFuZCBhZG9ybmVkIGluIHRva2VuIG9mIHRoZWlyIHZpY3RvcnkuCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZXIuIDE4LjIiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlci4gMTguMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBlcmljbGVzPC90aXRsZT4sIHh2aWlpLiAyIGYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QZXJpY2xlczwvdGl0bGU+LCB4dmlpaS4gMiBmLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE5pYy4gNi41IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDYuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk5pY2lhczwvdGl0bGU+LCB2aS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE5pYy4gNi41IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDYuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk5pY2lhczwvdGl0bGU+LCB2aS4gNS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk5pY2lhczwvdGl0bGU+LCB2aS4gNS48L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBlbmVteSBzZW50IHRvIGhpbSBhbmQgYXNrZWQgcGVybWlzc2lvbiB0byB0YWtlIHVwIHRoZWlyIGRlYWQsIGhlIG1hZGUgYSB0cnVjZSB3aXRoIHRoZW0sIGFuZCBoYXZpbmcgdGh1cyBhc3N1cmVkIHRvIGhpbXNlbGYgdGhlIHZpY3RvcnksIHByb2NlZWRlZCB0byBEZWxwaGksCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkxlYXZpbmcgdGhlIGFybXkgaW4gY29tbWFuZCBvZiBHeWxpcyB0aGUgcG9sZW1hcmNoICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMy4yMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuMjEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAzLCAyMTwvYmlibD4pLjwvbm90ZT4gd2hlcmUgdGhlIFB5dGhpYW4gZ2FtZXMgd2VyZSBpbiBwcm9ncmVzcy4gVGhlcmUgaGUgY2VsZWJyYXRlZCB0aGUgY3VzdG9tYXJ5IHByb2Nlc3Npb24gaW4gaG9ub3VyIG9mIHRoZSBnb2QsIGFuZCBvZmZlcmVkIHVwIHRoZSB0ZW50aCBvZiB0aGUgc3BvaWxzIHdoaWNoIGhlIGhhZCBicm91Z2h0IGZyb20gQXNpYSwgYW1vdW50aW5nIHRvIGEgaHVuZHJlZCB0YWxlbnRzLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuMy4yMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjMuMjEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiAzLCAyMTwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDMsIDIxPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSB3ZW50IGJhY2sgaG9tZSwgd2hlcmUgaGlzIGxpZmUgYW5kIGNvbmR1Y3QgYnJvdWdodCBoaW0gYXQgb25jZSB0aGUgYWZmZWN0aW9uIGFuZCBhZG1pcmF0aW9uIG9mIGhpcyBmZWxsb3ctY2l0aXplbnMuIEZvciwgdW5saWtlIG1vc3Qgb2YgdGhlaXIgZ2VuZXJhbHMsIGhlIGNhbWUgYmFjayBmcm9tIGZvcmVpZ24gcGFydHMgdW5jaGFuZ2VkIGFuZCB1bmFmZmVjdGVkIGJ5IGFsaWVuIGN1c3RvbXM7IGhlIHNob3dlZCBubyBkaXNsaWtlIHRvd2FyZHMgaG9tZSBmYXNoaW9ucywgbm9yIHdhcyBoZSByZXN0aXZlIHVuZGVyIHRoZW0sIGJ1dCBob25vdXJlZCBhbmQgbG92ZWQgd2hhdCBoZSBmb3VuZCB0aGVyZSBqdXN0IGFzIG11Y2ggYXMgdGhvc2UgZGlkIHdobyBoYWQgbmV2ZXIgY3Jvc3NlZCB0aGUgRXVyb3RhczsgaGUgbWFkZSBubyBjaGFuZ2UgaW4gaGlzIHRhYmxlLCBvciBoaXMgYmF0aHMsIG9yIHRoZSBhdHRlbmRhbmNlIG9uIGhpcyB3aWZlLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5vciB0aGUgZGVjb3JhdGlvbiBvZiBoaXMgYXJtb3VyLCBvciB0aGUgZnVybml0dXJlIG9mIGhpcyBob3VzZSwgbmF5LCBoZSBhY3R1YWxseSBsZXQgaXRzIGRvb3JzIHJlbWFpbiBhbHRob3VnaCB0aGV5IHdlcmUgdmVyeSBvbGQs4oCUb25lIG1pZ2h0IHNheSB0aGV5IHdlcmUgdGhlIHZlcnkgZG9vcnMgd2hpY2ggQXJpc3RvZGVtdXMKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBncmVhdC1ncmVhdC1ncmFuZHNvbiBvZiBIZXJhY2xlczsgY2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFnZXMuIDguNyIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gOC43IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkFnZXNpbGHDvHM8L3RpdGxlPiwgdmlpaS4gNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGFkIHNldCB1cC4gSGlzIGRhdWdodGVyJ3MgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5rYW5uYXRocm9uLDwvcT4gYXMgWGVub3Bob24gdGVsbHMgdXMsIHdhcyBubyBtb3JlIGVsYWJvcmF0ZSB0aGFuIHRoYXQgb2YgYW55IG90aGVyIG1haWQgKAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+a2FubmF0aHJhPC9xPiBpcyB0aGUgbmFtZSB0aGV5IGdpdmUgdG8gdGhlIHdvb2RlbiBmaWd1cmVzIG9mIGdyaWZmaW5zIG9yIGdvYXQtc3RhZ3MgaW4gd2hpY2ggdGhlaXIgeW91bmcgZ2lybHMgYXJlIGNhcnJpZWQgYXQgdGhlIHNhY3JlZCBwcm9jZXNzaW9ucykuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVzZSBmaWd1cmVzIG9mIGFuaW1hbHMgd2VyZSBvbiB3aGVlbHMsIGFuZCBzZXJ2ZWQgYXMgY2FycmlhZ2VzIChjZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkF0aC4gNC4xMzkiPkF0aGVuYWV1cywgcC4gMTM5IGYuPC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlhlbm9waG9uLCBpdCBpcyB0cnVlLCBoYXMgbm90IHJlY29yZGVkIHRoZSBuYW1lIG9mIHRoZSBkYXVnaHRlciBvZiBBZ2VzaWxhw7xzLCBhbmQgRGljYWNhcmNodXMgZXhwcmVzc2VkIGdyZWF0IGluZGlnbmF0aW9uIHRoYXQgbmVpdGhlciBoZXIgbmFtZSBub3IgdGhhdCBvZiB0aGUgbW90aGVyIG9mIEVwYW1pbm9uZGFzIHdhcyBrbm93biB0byB1czsgYnV0IHdlIGhhdmUgZm91bmQgaW4gdGhlIExhY2VkYWVtb25pYW4gcmVjb3JkcyB0aGF0IHRoZSB3aWZlIG9mIEFnZXNpbGHDvHMgd2FzIG5hbWVkIENsZW9yYSwgYW5kIGhpcyBkYXVnaHRlcnMgRXVwb2xpYSBhbmQgUHJvYXVnYS4gQW5kIG9uZSBjYW4gc2VlIGhpcyBzcGVhciBhbHNvLCB3aGljaCBpcyBzdGlsbCBwcmVzZXJ2ZWQgYXQgU3BhcnRhLCBhbmQgd2hpY2ggaXMgbm90IGF0IGFsbCBkaWZmZXJlbnQgZnJvbSB0aGF0IG9mIG90aGVyIG1lbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgd2VudCBiYWNrIGhvbWUsIHdoZXJlIGhpcyBsaWZlIGFuZCBjb25kdWN0IGJyb3VnaHQgaGltIGF0IG9uY2UgdGhlIGFmZmVjdGlvbiBhbmQgYWRtaXJhdGlvbiBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLiBGb3IsIHVubGlrZSBtb3N0IG9mIHRoZWlyIGdlbmVyYWxzLCBoZSBjYW1lIGJhY2sgZnJvbSBmb3JlaWduIHBhcnRzIHVuY2hhbmdlZCBhbmQgdW5hZmZlY3RlZCBieSBhbGllbiBjdXN0b21zOyBoZSBzaG93ZWQgbm8gZGlzbGlrZSB0b3dhcmRzIGhvbWUgZmFzaGlvbnMsIG5vciB3YXMgaGUgcmVzdGl2ZSB1bmRlciB0aGVtLCBidXQgaG9ub3VyZWQgYW5kIGxvdmVkIHdoYXQgaGUgZm91bmQgdGhlcmUganVzdCBhcyBtdWNoIGFzIHRob3NlIGRpZCB3aG8gaGFkIG5ldmVyIGNyb3NzZWQgdGhlIEV1cm90YXM7IGhlIG1hZGUgbm8gY2hhbmdlIGluIGhpcyB0YWJsZSwgb3IgaGlzIGJhdGhzLCBvciB0aGUgYXR0ZW5kYW5jZSBvbiBoaXMgd2lmZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPm9yIHRoZSBkZWNvcmF0aW9uIG9mIGhpcyBhcm1vdXIsIG9yIHRoZSBmdXJuaXR1cmUgb2YgaGlzIGhvdXNlLCBuYXksIGhlIGFjdHVhbGx5IGxldCBpdHMgZG9vcnMgcmVtYWluIGFsdGhvdWdoIHRoZXkgd2VyZSB2ZXJ5IG9sZCzigJRvbmUgbWlnaHQgc2F5IHRoZXkgd2VyZSB0aGUgdmVyeSBkb29ycyB3aGljaCBBcmlzdG9kZW11cwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgZ3JlYXQtZ3JlYXQtZ3JhbmRzb24gb2YgSGVyYWNsZXM7IGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFnZXMuIDguNyIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiA4LjciIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHZpaWkuIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhhZCBzZXQgdXAuIEhpcyBkYXVnaHRlcidzIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiA4LjciIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gOC43IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB2aWlpLiA3LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB2aWlpLiA3LjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+a2FubmF0aHJvbiw8L3E+IGFzIFhlbm9waG9uIHRlbGxzIHVzLCB3YXMgbm8gbW9yZSBlbGFib3JhdGUgdGhhbiB0aGF0IG9mIGFueSBvdGhlciBtYWlkICgKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+a2FubmF0aHJhPC9xPiBpcyB0aGUgbmFtZSB0aGV5IGdpdmUgdG8gdGhlIHdvb2RlbiBmaWd1cmVzIG9mIGdyaWZmaW5zIG9yIGdvYXQtc3RhZ3MgaW4gd2hpY2ggdGhlaXIgeW91bmcgZ2lybHMgYXJlIGNhcnJpZWQgYXQgdGhlIHNhY3JlZCBwcm9jZXNzaW9ucykuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXNlIGZpZ3VyZXMgb2YgYW5pbWFscyB3ZXJlIG9uIHdoZWVscywgYW5kIHNlcnZlZCBhcyBjYXJyaWFnZXMgKGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBdGguIDQuMTM5Ij5BdGhlbmFldXMsIHAuIDEzOSBmLjwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkF0aC4gNC4xMzkiPkF0aGVuYWV1cywgcC4gMTM5IGYuPC9iaWJsPikuPC90cmFuc2xhdGlvbj4="
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlhlbm9waG9uLCBpdCBpcyB0cnVlLCBoYXMgbm90IHJlY29yZGVkIHRoZSBuYW1lIG9mIHRoZSBkYXVnaHRlciBvZiBBZ2VzaWxhw7xzLCBhbmQgRGljYWNhcmNodXMgZXhwcmVzc2VkIGdyZWF0IGluZGlnbmF0aW9uIHRoYXQgbmVpdGhlciBoZXIgbmFtZSBub3IgdGhhdCBvZiB0aGUgbW90aGVyIG9mIEVwYW1pbm9uZGFzIHdhcyBrbm93biB0byB1czsgYnV0IHdlIGhhdmUgZm91bmQgaW4gdGhlIExhY2VkYWVtb25pYW4gcmVjb3JkcyB0aGF0IHRoZSB3aWZlIG9mIEFnZXNpbGHDvHMgd2FzIG5hbWVkIENsZW9yYSwgYW5kIGhpcyBkYXVnaHRlcnMgRXVwb2xpYSBhbmQgUHJvYXVnYS4gQW5kIG9uZSBjYW4gc2VlIGhpcyBzcGVhciBhbHNvLCB3aGljaCBpcyBzdGlsbCBwcmVzZXJ2ZWQgYXQgU3BhcnRhLCBhbmQgd2hpY2ggaXMgbm90IGF0IGFsbCBkaWZmZXJlbnQgZnJvbSB0aGF0IG9mIG90aGVyIG1lbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgb24gc2VlaW5nIHRoYXQgc29tZSBvZiB0aGUgY2l0aXplbnMgZXN0ZWVtZWQgdGhlbXNlbHZlcyBoaWdobHkgYW5kIHdlcmUgZ3JlYXRseSBsaWZ0ZWQgdXAgYmVjYXVzZSB0aGV5IGJyZWQgcmFjaW5nIGhvcnNlcywgaGUgcGVyc3VhZGVkIGhpcyBzaXN0ZXIgQ3luaXNjYSB0byBlbnRlciBhIGNoYXJpb3QgaW4gdGhlIGNvbnRlc3RzIGF0IE9seW1waWEsIHdpc2hpbmcgdG8gc2hvdyB0aGUgR3JlZWtzIHRoYXQgdGhlIHZpY3RvcnkgdGhlcmUgd2FzIG5vdCBhIG1hcmsgb2YgYW55IGdyZWF0IGV4Y2VsbGVuY2UsIGJ1dCBzaW1wbHkgb2Ygd2VhbHRoIGFuZCBsYXZpc2ggb3V0bGF5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbHNvLCBoYXZpbmcgWGVub3Bob24gdGhlIHBoaWxvc29waGVyIGluIGhpcyBmb2xsb3dpbmcsIGFuZCBtYWtpbmcgbXVjaCBvZiBoaW0sIGhlIG9yZGVyZWQgaGltIHRvIHNlbmQgZm9yIGhpcyBzb25zIGFuZCByZWFyIHRoZW0gYXQgU3BhcnRhLCB0aGF0IHRoZXkgbWlnaHQgbGVhcm4gdGhhdCBmYWlyZXN0IG9mIGFsbCBsZXNzb25zLCBob3cgdG8gb2JleSBhbmQgaG93IHRvIGNvbW1hbmQuIEFnYWluLCBmaW5kaW5nIGFmdGVyIEx5c2FuZGVyJ3MgZGVhdGggdGhhdCBhIGxhcmdlIHNvY2lldHkgd2FzIGluIGV4aXN0ZW5jZSwgd2hpY2ggdGhhdCBjb21tYW5kZXIsIGltbWVkaWF0ZWx5IGFmdGVyIHJldHVybmluZyBmcm9tIEFzaWEsIGhhZCBmb3JtZWQgYWdhaW5zdCBoaW0sIEFnZXNpbGHDvHMgc2V0IG91dCB0byBwcm92ZSB3aGF0IG1hbm5lciBvZiBjaXRpemVuIEx5c2FuZGVyIGhhZCBiZWVuIHdoaWxlIGFsaXZlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TbywgYWZ0ZXIgcmVhZGluZyBhIHNwZWVjaCB3aGljaCBMeXNhbmRlciBoYWQgbGVmdCBiZWhpbmQgaGltIGluIGJvb2sgZm9ybSzigJRhIHNwZWVjaCB3aGljaCBDbGVvbiBvZiBIYWxpY2FybmFzc3VzIGhhZCBjb21wb3NlZCwgYnV0IHdoaWNoIEx5c2FuZGVyIGhhZCBpbnRlbmRlZCB0byBhZG9wdCBhbmQgcHJvbm91bmNlIGJlZm9yZSB0aGUgcGVvcGxlIGluIGFkdm9jYWN5IG9mIGEgcmV2b2x1dGlvbiBhbmQgY2hhbmdlIGluIHRoZSBmb3JtIG9mIGdvdmVybm1lbnQs4oCUQWdlc2lsYcO8cyB3aXNoZWQgdG8gcHVibGlzaCBpdC4gQnV0IG9uZSBvZiB0aGUgc2VuYXRvcnMsIHdobyBoYWQgcmVhZCB0aGUgc3BlZWNoIGFuZCBmZWFyZWQgaXRzIGFiaWxpdHkgYW5kIHBvd2VyLCBhZHZpc2VkIHRoZSBraW5nIG5vdCB0byBkaWcgTHlzYW5kZXIgdXAgYWdhaW4sIGJ1dCByYXRoZXIgdG8gYnVyeSB0aGUgc3BlZWNoIHdpdGggaGltLCB0byB3aGljaCBhZHZpY2UgQWdlc2lsYcO8cyBsaXN0ZW5lZCBhbmQgaGVsZCBoaXMgcGVhY2UuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDMwLjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THlzYW5kZXI8L3RpdGxlPiwgY2hhcHRlciB4eHguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFzIGZvciB0aG9zZSB3aG8gd2VyZSBpbiBvcHBvc2l0aW9uIHRvIGhpbSwgaGUgd291bGQgZG8gdGhlbSBubyBvcGVuIGluanVyeSwgYnV0IHdvdWxkIGV4ZXJ0IGhpbXNlbGYgdG8gc2VuZCBzb21lIG9mIHRoZW0gYXdheSBmcm9tIHRpbWUgdG8gdGltZSBhcyBnZW5lcmFscyBhbmQgY29tbWFuZGVycywgYW5kIHdvdWxkIHNob3cgdGhlbSB1cCBpZiB0aGV5IHByb3ZlZCBiYXNlIGFuZCBncmFzcGluZyBpbiB0aGVpciBleGVyY2lzZSBvZiBhdXRob3JpdHk7IHRoZW4sIGNvbnRyYXJpd2lzZSwgd2hlbiB0aGV5IHdlcmUgYnJvdWdodCB0byB0cmlhbCwgaGUgd291bGQgY29tZSB0byB0aGVpciBhaWQgYW5kIGV4ZXJ0IGhpbXNlbGYgaW4gdGhlaXIgYmVoYWxmLCBhbmQgc28gd291bGQgbWFrZSB0aGVtIGZyaWVuZHMgaW5zdGVhZCBvZiBlbmVtaWVzLCBhbmQgYnJpbmcgdGhlbSBvdmVyIHRvIGhpcyBzaWRlLCBzbyB0aGF0IG5vIG9uZSB3YXMgbGVmdCB0byBvcHBvc2UgaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgb24gc2VlaW5nIHRoYXQgc29tZSBvZiB0aGUgY2l0aXplbnMgZXN0ZWVtZWQgdGhlbXNlbHZlcyBoaWdobHkgYW5kIHdlcmUgZ3JlYXRseSBsaWZ0ZWQgdXAgYmVjYXVzZSB0aGV5IGJyZWQgcmFjaW5nIGhvcnNlcywgaGUgcGVyc3VhZGVkIGhpcyBzaXN0ZXIgQ3luaXNjYSB0byBlbnRlciBhIGNoYXJpb3QgaW4gdGhlIGNvbnRlc3RzIGF0IE9seW1waWEsIHdpc2hpbmcgdG8gc2hvdyB0aGUgR3JlZWtzIHRoYXQgdGhlIHZpY3RvcnkgdGhlcmUgd2FzIG5vdCBhIG1hcmsgb2YgYW55IGdyZWF0IGV4Y2VsbGVuY2UsIGJ1dCBzaW1wbHkgb2Ygd2VhbHRoIGFuZCBsYXZpc2ggb3V0bGF5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsc28sIGhhdmluZyBYZW5vcGhvbiB0aGUgcGhpbG9zb3BoZXIgaW4gaGlzIGZvbGxvd2luZywgYW5kIG1ha2luZyBtdWNoIG9mIGhpbSwgaGUgb3JkZXJlZCBoaW0gdG8gc2VuZCBmb3IgaGlzIHNvbnMgYW5kIHJlYXIgdGhlbSBhdCBTcGFydGEsIHRoYXQgdGhleSBtaWdodCBsZWFybiB0aGF0IGZhaXJlc3Qgb2YgYWxsIGxlc3NvbnMsIGhvdyB0byBvYmV5IGFuZCBob3cgdG8gY29tbWFuZC4gQWdhaW4sIGZpbmRpbmcgYWZ0ZXIgTHlzYW5kZXIncyBkZWF0aCB0aGF0IGEgbGFyZ2Ugc29jaWV0eSB3YXMgaW4gZXhpc3RlbmNlLCB3aGljaCB0aGF0IGNvbW1hbmRlciwgaW1tZWRpYXRlbHkgYWZ0ZXIgcmV0dXJuaW5nIGZyb20gQXNpYSwgaGFkIGZvcm1lZCBhZ2FpbnN0IGhpbSwgQWdlc2lsYcO8cyBzZXQgb3V0IHRvIHByb3ZlIHdoYXQgbWFubmVyIG9mIGNpdGl6ZW4gTHlzYW5kZXIgaGFkIGJlZW4gd2hpbGUgYWxpdmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvLCBhZnRlciByZWFkaW5nIGEgc3BlZWNoIHdoaWNoIEx5c2FuZGVyIGhhZCBsZWZ0IGJlaGluZCBoaW0gaW4gYm9vayBmb3JtLOKAlGEgc3BlZWNoIHdoaWNoIENsZW9uIG9mIEhhbGljYXJuYXNzdXMgaGFkIGNvbXBvc2VkLCBidXQgd2hpY2ggTHlzYW5kZXIgaGFkIGludGVuZGVkIHRvIGFkb3B0IGFuZCBwcm9ub3VuY2UgYmVmb3JlIHRoZSBwZW9wbGUgaW4gYWR2b2NhY3kgb2YgYSByZXZvbHV0aW9uIGFuZCBjaGFuZ2UgaW4gdGhlIGZvcm0gb2YgZ292ZXJubWVudCzigJRBZ2VzaWxhw7xzIHdpc2hlZCB0byBwdWJsaXNoIGl0LiBCdXQgb25lIG9mIHRoZSBzZW5hdG9ycywgd2hvIGhhZCByZWFkIHRoZSBzcGVlY2ggYW5kIGZlYXJlZCBpdHMgYWJpbGl0eSBhbmQgcG93ZXIsIGFkdmlzZWQgdGhlIGtpbmcgbm90IHRvIGRpZyBMeXNhbmRlciB1cCBhZ2FpbiwgYnV0IHJhdGhlciB0byBidXJ5IHRoZSBzcGVlY2ggd2l0aCBoaW0sIHRvIHdoaWNoIGFkdmljZSBBZ2VzaWxhw7xzIGxpc3RlbmVkIGFuZCBoZWxkIGhpcyBwZWFjZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDMwLjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5cy4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5c2FuZGVyPC90aXRsZT4sIGNoYXB0ZXIgeHh4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHlzLiAzMC4xIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeXNhbmRlcjwvdGl0bGU+LCBjaGFwdGVyIHh4eC48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5c2FuZGVyPC90aXRsZT4sIGNoYXB0ZXIgeHh4LjwvdHJhbnNsYXRpb24+"
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgdGhvc2Ugd2hvIHdlcmUgaW4gb3Bwb3NpdGlvbiB0byBoaW0sIGhlIHdvdWxkIGRvIHRoZW0gbm8gb3BlbiBpbmp1cnksIGJ1dCB3b3VsZCBleGVydCBoaW1zZWxmIHRvIHNlbmQgc29tZSBvZiB0aGVtIGF3YXkgZnJvbSB0aW1lIHRvIHRpbWUgYXMgZ2VuZXJhbHMgYW5kIGNvbW1hbmRlcnMsIGFuZCB3b3VsZCBzaG93IHRoZW0gdXAgaWYgdGhleSBwcm92ZWQgYmFzZSBhbmQgZ3Jhc3BpbmcgaW4gdGhlaXIgZXhlcmNpc2Ugb2YgYXV0aG9yaXR5OyB0aGVuLCBjb250cmFyaXdpc2UsIHdoZW4gdGhleSB3ZXJlIGJyb3VnaHQgdG8gdHJpYWwsIGhlIHdvdWxkIGNvbWUgdG8gdGhlaXIgYWlkIGFuZCBleGVydCBoaW1zZWxmIGluIHRoZWlyIGJlaGFsZiwgYW5kIHNvIHdvdWxkIG1ha2UgdGhlbSBmcmllbmRzIGluc3RlYWQgb2YgZW5lbWllcywgYW5kIGJyaW5nIHRoZW0gb3ZlciB0byBoaXMgc2lkZSwgc28gdGhhdCBubyBvbmUgd2FzIGxlZnQgdG8gb3Bwb3NlIGhpbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEFnZXNpcG9saXMsIHRoZSBvdGhlciBraW5nLCBzaW5jZSBoZSB3YXMgdGhlIHNvbiBvZiBhbiBleGlsZSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBhdXNhbmlhcywgd2hvIHdhcyBpbXBlYWNoZWQgaW4gMzk1IEIuQy4sIHdlbnQgaW50byB2b2x1bnRhcnkgZXhpbGUsIGFuZCB3YXMgY29uZGVtbmVkIHRvIGRlYXRoLjwvbm90ZT4gaW4geWVhcnMgYSBtZXJlIHN0cmlwbGluZywgYW5kIGJ5IG5hdHVyZSBnZW50bGUgYW5kIHF1aWV0LCB0b29rIGxpdHRsZSBwYXJ0IGluIGFmZmFpcnMgb2Ygc3RhdGUuIEFuZCB5ZXQgaGUgdG9vIHdhcyBicm91Z2h0IHVuZGVyIHRoZSBzd2F5IG9mIEFnZXNpbGHDvHMuIEZvciB0aGUgU3BhcnRhbiBraW5ncyBlYXQgdG9nZXRoZXIgaW4gdGhlIHNhbWUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waGlkaXRpdW0sPC9xPiBvciBwdWJsaWMgbWVzcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTIuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MeWN1cmd1czwvdGl0bGU+LCB4aWkuIDEgPC9iaWJsPmYuPC9ub3RlPiB3aGVuZXZlciB0aGV5IGFyZSBhdCBob21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwga25vd2luZyB0aGF0IEFnZXNpcG9saXMgd2FzIHByb25lIHRvIGxvdmUgYWZmYWlycywganVzdCBhcyBoZSB3YXMgaGltc2VsZiwgQWdlc2lsYcO8cyB3b3VsZCBhbHdheXMgaW50cm9kdWNlIHNvbWUgZGlzY291cnNlIGFib3V0IHRoZSBib3lzIHdobyB3ZXJlIG9mIGFuIGFnZSB0byBsb3ZlLiBIZSB3b3VsZCBldmVuIGxlYWQgdGhlIHlvdW5nIGtpbmcncyBmYW5jeSB0b3dhcmQgdGhlIG9iamVjdCBvZiBoaXMgb3duIGFmZmVjdGlvbnMsIGFuZCBzaGFyZSB3aXRoIGhpbSBpbiB3b29pbmcgYW5kIGxvdmluZywgdGhlc2UgU3BhcnRhbiBsb3ZlcyBoYXZpbmcgbm90aGluZyBzaGFtZWZ1bCBpbiB0aGVtLCBidXQgYmVpbmcgYXR0ZW5kZWQgcmF0aGVyIHdpdGggZ3JlYXQgbW9kZXN0eSwgaGlnaCBhbWJpdGlvbiwgYW5kIGFuIGFyZGVudCBkZXNpcmUgZm9yIGV4Y2VsbGVuY2UsIGFzIEkgaGF2ZSB3cml0dGVuIGluIG15IGxpZmUgb2YgTHljdXJndXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTcuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTcuMSIgdmFsaWQ9InllcyI+Q2hhcHRlcnMgeHZpaS4gMTwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE4LjQiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE4LjQiIHZhbGlkPSJ5ZXMiPnh2aWlpLiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBBZ2VzaXBvbGlzLCB0aGUgb3RoZXIga2luZywgc2luY2UgaGUgd2FzIHRoZSBzb24gb2YgYW4gZXhpbGUsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBhdXNhbmlhcywgd2hvIHdhcyBpbXBlYWNoZWQgaW4gMzk1IEIuQy4sIHdlbnQgaW50byB2b2x1bnRhcnkgZXhpbGUsIGFuZCB3YXMgY29uZGVtbmVkIHRvIGRlYXRoLjwvbm90ZT4gaW4geWVhcnMgYSBtZXJlIHN0cmlwbGluZywgYW5kIGJ5IG5hdHVyZSBnZW50bGUgYW5kIHF1aWV0LCB0b29rIGxpdHRsZSBwYXJ0IGluIGFmZmFpcnMgb2Ygc3RhdGUuIEFuZCB5ZXQgaGUgdG9vIHdhcyBicm91Z2h0IHVuZGVyIHRoZSBzd2F5IG9mIEFnZXNpbGHDvHMuIEZvciB0aGUgU3BhcnRhbiBraW5ncyBlYXQgdG9nZXRoZXIgaW4gdGhlIHNhbWUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBoaWRpdGl1bSw8L3E+IG9yIHB1YmxpYyBtZXNzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTIuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgeGlpLiAxIDwvYmlibD5mLjwvbm90ZT4gd2hlbmV2ZXIgdGhleSBhcmUgYXQgaG9tZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDEyLjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5Y3VyZ3VzPC90aXRsZT4sIHhpaS4gMSA8L2JpYmw+Zi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeWN1cmd1czwvdGl0bGU+LCB4aWkuIDEgPC90cmFuc2xhdGlvbj4="
translation['20.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBrbm93aW5nIHRoYXQgQWdlc2lwb2xpcyB3YXMgcHJvbmUgdG8gbG92ZSBhZmZhaXJzLCBqdXN0IGFzIGhlIHdhcyBoaW1zZWxmLCBBZ2VzaWxhw7xzIHdvdWxkIGFsd2F5cyBpbnRyb2R1Y2Ugc29tZSBkaXNjb3Vyc2UgYWJvdXQgdGhlIGJveXMgd2hvIHdlcmUgb2YgYW4gYWdlIHRvIGxvdmUuIEhlIHdvdWxkIGV2ZW4gbGVhZCB0aGUgeW91bmcga2luZydzIGZhbmN5IHRvd2FyZCB0aGUgb2JqZWN0IG9mIGhpcyBvd24gYWZmZWN0aW9ucywgYW5kIHNoYXJlIHdpdGggaGltIGluIHdvb2luZyBhbmQgbG92aW5nLCB0aGVzZSBTcGFydGFuIGxvdmVzIGhhdmluZyBub3RoaW5nIHNoYW1lZnVsIGluIHRoZW0sIGJ1dCBiZWluZyBhdHRlbmRlZCByYXRoZXIgd2l0aCBncmVhdCBtb2Rlc3R5LCBoaWdoIGFtYml0aW9uLCBhbmQgYW4gYXJkZW50IGRlc2lyZSBmb3IgZXhjZWxsZW5jZSwgYXMgSSBoYXZlIHdyaXR0ZW4gaW4gbXkgbGlmZSBvZiBMeWN1cmd1cy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTcuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxNy4xIiB2YWxpZD0ieWVzIj5DaGFwdGVycyB4dmlpLiAxPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxOC40IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE4LjQiIHZhbGlkPSJ5ZXMiPnh2aWlpLiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE3LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTcuMSIgdmFsaWQ9InllcyI+Q2hhcHRlcnMgeHZpaS4gMTwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTguNCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxOC40IiB2YWxpZD0ieWVzIj54dmlpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyB0aHVzIG9idGFpbmVkIHZlcnkgZ3JlYXQgaW5mbHVlbmNlIGluIHRoZSBjaXR5LCBoZSBlZmZlY3RlZCB0aGUgYXBwb2ludG1lbnQgb2YgVGVsZXV0aWFzLCBoaXMgaGFsZi1icm90aGVyIG9uIGhpcyBtb3RoZXIncyBzaWRlLCBhcyBhZG1pcmFsLiBUaGVuIGhlIGxlZCBhbiBhcm15IHRvIENvcmludGgsIGFuZCBoaW1zZWxmLCBieSBsYW5kLCBjYXB0dXJlZCB0aGUgbG9uZyB3YWxscywgd2hpbGUgVGVsZXV0aWFzLCB3aXRoIGhpcyBmbGVldCwgc2VpemVkIHRoZSBlbmVteSdzIHNoaXBzIGFuZCBkb2NreWFyZHMuIFRoZW4gY29taW5nIHN1ZGRlbmx5IHVwb24gdGhlIEFyZ2l2ZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QbHV0YXJjaCBjb25mdXNlcyB0aGUgZXhwZWRpdGlvbiBvZiAzOTMgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC40LjE5IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjQuMTkiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiBpdi4gNC4gMTk8L2JpYmw+KSB3aXRoIHRoYXQgb2YgMzkwIEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS4xIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjUuMSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGl2LiA1LCAxIGZmLjwvYmlibD4pLjwvbm90ZT4gd2hvIGF0IHRoYXQgdGltZSBoZWxkIENvcmludGgsIGFuZCB3ZXJlIGNlbGVicmF0aW5nIHRoZSBJc3RobWlhbiBnYW1lcywgaGUgZHJvdmUgdGhlbSBhd2F5IGp1c3QgYXMgdGhleSBoYWQgc2FjcmlmaWNlZCB0byB0aGUgZ29kLCBhbmQgbWFkZSB0aGVtIGFiYW5kb24gYWxsIHRoZWlyIGVxdWlwbWVudCBmb3IgdGhlIGZlc3RpdmFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzLCB0aGUgZXhpbGVzIGZyb20gQ29yaW50aCB3aG8gd2VyZSBpbiBoaXMgYXJteSBiZWdnZWQgaGltIHRvIGhvbGQgdGhlIGdhbWVzLiBUaGlzLCBob3dldmVyLCBoZSB3b3VsZCBub3QgZG8sIGJ1dCByZW1haW5lZCBhdCBoYW5kIHdoaWxlIHRoZXkgaGVsZCB0aGUgZ2FtZXMgZnJvbSBiZWdpbm5pbmcgdG8gZW5kLCBhbmQgYWZmb3JkZWQgdGhlbSBzZWN1cml0eS4gQWZ0ZXJ3YXJkcywgd2hlbiBoZSBoYWQgZGVwYXJ0ZWQsIHRoZSBJc3RobWlhbiBnYW1lcyB3ZXJlIGhlbGQgYWZyZXNoIGJ5IHRoZSBBcmdpdmVzLCBhbmQgc29tZSBjb250ZXN0YW50cyB3b24gdGhlaXIgdmljdG9yaWVzIGEgc2Vjb25kIHRpbWUsIHdoaWxlIHNvbWUgd2VyZSBlbnRlcmVkIGluIHRoZSBsaXN0cyBhcyB2aWN0b3JzIGluIHRoZSBmaXJzdCBjb250ZXN0cywgYnV0IGFzIHZhbnF1aXNoZWQgaW4gdGhlIHNlY29uZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyBtYXR0ZXIgQWdlc2lsYcO8cyBkZWNsYXJlZCB0aGF0IHRoZSBBcmdpdmVzIGhhZCBicm91Z2h0IGRvd24gdXBvbiB0aGVtc2VsdmVzIHRoZSBjaGFyZ2Ugb2YgZ3JlYXQgY293YXJkaWNlLCBzaW5jZSB0aGV5IHJlZ2FyZGVkIHRoZSBjb25kdWN0IG9mIHRoZSBnYW1lcyBhcyBzbyBncmVhdCBhbmQgYXVndXN0IGEgcHJpdmlsZWdlLCBhbmQgeWV0IGhhZCBub3QgdGhlIGNvdXJhZ2UgdG8gZmlnaHQgZm9yIGl0LiBIZSBoaW1zZWxmIHRob3VnaHQgdGhhdCBtb2RlcmF0aW9uIG91Z2h0IHRvIGJlIG9ic2VydmVkIGluIGFsbCB0aGVzZSBtYXR0ZXJzLCBhbmQgc291Z2h0IHRvIGltcHJvdmUgdGhlIGxvY2FsIGNob2lycyBhbmQgZ2FtZXMuIFRoZXNlIGhlIGFsd2F5cyBhdHRlbmRlZCwgZnVsbCBvZiBhbWJpdGlvdXMgYXJkb3VyLCBhbmQgd2FzIGFic2VudCBmcm9tIG5vIGNvbnRlc3QgaW4gd2hpY2ggZWl0aGVyIGJveXMgb3IgZ2lybHMgY29tcGV0ZWQuIFRob3NlIHRoaW5ncywgaG93ZXZlciwgZm9yIHdoaWNoIGhlIHNhdyB0aGUgcmVzdCBvZiB0aGUgd29ybGQgZmlsbGVkIHdpdGggYWRtaXJhdGlvbiwgaGUgYXBwZWFyZWQgbm90IGV2ZW4gdG8gcmVjb2duaXplLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5PbmNlIHVwb24gYSB0aW1lIENhbGxpcGlkZXMgdGhlIHRyYWdpYyBhY3Rvciwgd2hvIGhhZCBhIG5hbWUgYW5kIGZhbWUgYW1vbmcgdGhlIEdyZWVrcyBhbmQgd2FzIGVhZ2VybHkgY291cnRlZCBieSBhbGwsIGZpcnN0IG1ldCBoaW0gYW5kIGFkZHJlc3NlZCBoaW0sIHRoZW4gcG9tcG91c2x5IHRocnVzdCBoaW1zZWxmIGludG8gaGlzIGNvbXBhbnkgb2YgYXR0ZW5kYW50cywgc2hvd2luZyBwbGFpbmx5IHRoYXQgaGUgZXhwZWN0ZWQgdGhlIGtpbmcgdG8gbWFrZSBoaW0gc29tZSBmcmllbmRseSBvdmVydHVyZXMsIGFuZCBmaW5hbGx5IHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9zdCB0aG91IG5vdCByZWNvZ25pemUgbWUsIE8gS2luZz88L3E+IFRoZSBraW5nIGZpeGVkIGhpcyBleWVzIHVwb24gaGltIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllYSwgYXJ0IHRob3Ugbm90IENhbGxpcGlkZXMgdGhlIGJ1ZmZvb24/PC9xPiBGb3IgdGhpcyBpcyBob3cgdGhlIExhY2VkYWVtb25pYW5zIGRlc2NyaWJlIGFjdG9ycy4gQW5kIGFnYWluLCB3aGVuIGhlIHdhcyBpbnZpdGVkIHRvIGhlYXIgdGhlIG1hbiB3aG8gaW1pdGF0ZWQgdGhlIG5pZ2h0aW5nYWxlLCBoZSBkZWNsaW5lZCwgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgaGF2ZSBoZWFyZCB0aGUgYmlyZCBoZXJzZWxmLjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAyMC41IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAyMC41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5Y3VyZ3VzPC90aXRsZT4sIHh4LiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBNZW5lY3JhdGVzIHRoZSBwaHlzaWNpYW4sIHdobywgZm9yIGhpcyBzdWNjZXNzIGluIGNlcnRhaW4gZGVzcGVyYXRlIGNhc2VzLCBoYWQgcmVjZWl2ZWQgdGhlIHN1cm5hbWUgb2YgWmV1cywgYW5kIGhhZCB0aGUgaGFkIHRhc3RlIHRvIGVtcGxveSB0aGUgYXBwZWxsYXRpb24sIGFjdHVhbGx5IGRhcmVkIHRvIHdyaXRlIHRoZSBraW5nIGEgbGV0dGVyIGJlZ2lubmluZyB0aHVzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1lbmVjcmF0ZXMgWmV1cywgdG8gS2luZyBBZ2VzaWxhw7xzLCBncmVldGluZy48L3E+IFRvIHRoaXMgQWdlc2lsYcO8cyByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPktpbmcgQWdlc2lsYcO8cywgdG8gTWVuZWNyYXRlcywgaGVhbHRoIGFuZCBzYW5pdHkuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIHRodXMgb2J0YWluZWQgdmVyeSBncmVhdCBpbmZsdWVuY2UgaW4gdGhlIGNpdHksIGhlIGVmZmVjdGVkIHRoZSBhcHBvaW50bWVudCBvZiBUZWxldXRpYXMsIGhpcyBoYWxmLWJyb3RoZXIgb24gaGlzIG1vdGhlcidzIHNpZGUsIGFzIGFkbWlyYWwuIFRoZW4gaGUgbGVkIGFuIGFybXkgdG8gQ29yaW50aCwgYW5kIGhpbXNlbGYsIGJ5IGxhbmQsIGNhcHR1cmVkIHRoZSBsb25nIHdhbGxzLCB3aGlsZSBUZWxldXRpYXMsIHdpdGggaGlzIGZsZWV0LCBzZWl6ZWQgdGhlIGVuZW15J3Mgc2hpcHMgYW5kIGRvY2t5YXJkcy4gVGhlbiBjb21pbmcgc3VkZGVubHkgdXBvbiB0aGUgQXJnaXZlcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGx1dGFyY2ggY29uZnVzZXMgdGhlIGV4cGVkaXRpb24gb2YgMzkzIEIuQy4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC40LjE5IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNC4xOSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDQuIDE5PC9iaWJsPikgd2l0aCB0aGF0IG9mIDM5MCBCLkMuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS4xIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS4xIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gNSwgMSBmZi48L2JpYmw+KS48L25vdGU+IHdobyBhdCB0aGF0IHRpbWUgaGVsZCBDb3JpbnRoLCBhbmQgd2VyZSBjZWxlYnJhdGluZyB0aGUgSXN0aG1pYW4gZ2FtZXMsIGhlIGRyb3ZlIHRoZW0gYXdheSBqdXN0IGFzIHRoZXkgaGFkIHNhY3JpZmljZWQgdG8gdGhlIGdvZCwgYW5kIG1hZGUgdGhlbSBhYmFuZG9uIGFsbCB0aGVpciBlcXVpcG1lbnQgZm9yIHRoZSBmZXN0aXZhbC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNC4xOSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjQuMTkiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiA0LiAxOTwvYmlibD4pIHdpdGggdGhhdCBvZiAzOTAgQi5DLiAoPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gNC4gMTk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS4xIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS4xIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gNSwgMSBmZi48L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiA1LCAxIGZmLjwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMsIHRoZSBleGlsZXMgZnJvbSBDb3JpbnRoIHdobyB3ZXJlIGluIGhpcyBhcm15IGJlZ2dlZCBoaW0gdG8gaG9sZCB0aGUgZ2FtZXMuIFRoaXMsIGhvd2V2ZXIsIGhlIHdvdWxkIG5vdCBkbywgYnV0IHJlbWFpbmVkIGF0IGhhbmQgd2hpbGUgdGhleSBoZWxkIHRoZSBnYW1lcyBmcm9tIGJlZ2lubmluZyB0byBlbmQsIGFuZCBhZmZvcmRlZCB0aGVtIHNlY3VyaXR5LiBBZnRlcndhcmRzLCB3aGVuIGhlIGhhZCBkZXBhcnRlZCwgdGhlIElzdGhtaWFuIGdhbWVzIHdlcmUgaGVsZCBhZnJlc2ggYnkgdGhlIEFyZ2l2ZXMsIGFuZCBzb21lIGNvbnRlc3RhbnRzIHdvbiB0aGVpciB2aWN0b3JpZXMgYSBzZWNvbmQgdGltZSwgd2hpbGUgc29tZSB3ZXJlIGVudGVyZWQgaW4gdGhlIGxpc3RzIGFzIHZpY3RvcnMgaW4gdGhlIGZpcnN0IGNvbnRlc3RzLCBidXQgYXMgdmFucXVpc2hlZCBpbiB0aGUgc2Vjb25kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgbWF0dGVyIEFnZXNpbGHDvHMgZGVjbGFyZWQgdGhhdCB0aGUgQXJnaXZlcyBoYWQgYnJvdWdodCBkb3duIHVwb24gdGhlbXNlbHZlcyB0aGUgY2hhcmdlIG9mIGdyZWF0IGNvd2FyZGljZSwgc2luY2UgdGhleSByZWdhcmRlZCB0aGUgY29uZHVjdCBvZiB0aGUgZ2FtZXMgYXMgc28gZ3JlYXQgYW5kIGF1Z3VzdCBhIHByaXZpbGVnZSwgYW5kIHlldCBoYWQgbm90IHRoZSBjb3VyYWdlIHRvIGZpZ2h0IGZvciBpdC4gSGUgaGltc2VsZiB0aG91Z2h0IHRoYXQgbW9kZXJhdGlvbiBvdWdodCB0byBiZSBvYnNlcnZlZCBpbiBhbGwgdGhlc2UgbWF0dGVycywgYW5kIHNvdWdodCB0byBpbXByb3ZlIHRoZSBsb2NhbCBjaG9pcnMgYW5kIGdhbWVzLiBUaGVzZSBoZSBhbHdheXMgYXR0ZW5kZWQsIGZ1bGwgb2YgYW1iaXRpb3VzIGFyZG91ciwgYW5kIHdhcyBhYnNlbnQgZnJvbSBubyBjb250ZXN0IGluIHdoaWNoIGVpdGhlciBib3lzIG9yIGdpcmxzIGNvbXBldGVkLiBUaG9zZSB0aGluZ3MsIGhvd2V2ZXIsIGZvciB3aGljaCBoZSBzYXcgdGhlIHJlc3Qgb2YgdGhlIHdvcmxkIGZpbGxlZCB3aXRoIGFkbWlyYXRpb24sIGhlIGFwcGVhcmVkIG5vdCBldmVuIHRvIHJlY29nbml6ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uY2UgdXBvbiBhIHRpbWUgQ2FsbGlwaWRlcyB0aGUgdHJhZ2ljIGFjdG9yLCB3aG8gaGFkIGEgbmFtZSBhbmQgZmFtZSBhbW9uZyB0aGUgR3JlZWtzIGFuZCB3YXMgZWFnZXJseSBjb3VydGVkIGJ5IGFsbCwgZmlyc3QgbWV0IGhpbSBhbmQgYWRkcmVzc2VkIGhpbSwgdGhlbiBwb21wb3VzbHkgdGhydXN0IGhpbXNlbGYgaW50byBoaXMgY29tcGFueSBvZiBhdHRlbmRhbnRzLCBzaG93aW5nIHBsYWlubHkgdGhhdCBoZSBleHBlY3RlZCB0aGUga2luZyB0byBtYWtlIGhpbSBzb21lIGZyaWVuZGx5IG92ZXJ0dXJlcywgYW5kIGZpbmFsbHkgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvc3QgdGhvdSBub3QgcmVjb2duaXplIG1lLCBPIEtpbmc/PC9xPiBUaGUga2luZyBmaXhlZCBoaXMgZXllcyB1cG9uIGhpbSBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllYSwgYXJ0IHRob3Ugbm90IENhbGxpcGlkZXMgdGhlIGJ1ZmZvb24/PC9xPiBGb3IgdGhpcyBpcyBob3cgdGhlIExhY2VkYWVtb25pYW5zIGRlc2NyaWJlIGFjdG9ycy4gQW5kIGFnYWluLCB3aGVuIGhlIHdhcyBpbnZpdGVkIHRvIGhlYXIgdGhlIG1hbiB3aG8gaW1pdGF0ZWQgdGhlIG5pZ2h0aW5nYWxlLCBoZSBkZWNsaW5lZCwgc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoYXZlIGhlYXJkIHRoZSBiaXJkIGhlcnNlbGYuPC9xPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAyMC41IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDIwLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeWN1cmd1czwvdGl0bGU+LCB4eC4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMjAuNSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAyMC41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgeHguIDUuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeWN1cmd1czwvdGl0bGU+LCB4eC4gNS48L3RyYW5zbGF0aW9uPg=="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBNZW5lY3JhdGVzIHRoZSBwaHlzaWNpYW4sIHdobywgZm9yIGhpcyBzdWNjZXNzIGluIGNlcnRhaW4gZGVzcGVyYXRlIGNhc2VzLCBoYWQgcmVjZWl2ZWQgdGhlIHN1cm5hbWUgb2YgWmV1cywgYW5kIGhhZCB0aGUgaGFkIHRhc3RlIHRvIGVtcGxveSB0aGUgYXBwZWxsYXRpb24sIGFjdHVhbGx5IGRhcmVkIHRvIHdyaXRlIHRoZSBraW5nIGEgbGV0dGVyIGJlZ2lubmluZyB0aHVzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWVuZWNyYXRlcyBaZXVzLCB0byBLaW5nIEFnZXNpbGHDvHMsIGdyZWV0aW5nLjwvcT4gVG8gdGhpcyBBZ2VzaWxhw7xzIHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5LaW5nIEFnZXNpbGHDvHMsIHRvIE1lbmVjcmF0ZXMsIGhlYWx0aCBhbmQgc2FuaXR5LjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgaGUgd2FzIGxpbmdlcmluZyBpbiB0aGUgdGVycml0b3J5IG9mIENvcmludGgsIGhlIHNlaXplZCB0aGUgSGVyYWV1bSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSByZWZ1Z2VlcyBpbiB0aGUgSGVyYWV1bSBjYW1lIG91dCBhbmQgc3VycmVuZGVyZWQgb2YgdGhlaXIgb3duIGFjY29yZCAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjUiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS41IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDUsIDU8L2JpYmw+KS48L25vdGU+IGFuZCBhcyBoZSB3YXMgd2F0Y2hpbmcgaGlzIHNvbGRpZXJzIGNhcnJ5IG9mZiB0aGUgcHJpc29uZXJzIGFuZCBib290eSwgbWVzc2VuZ2VycyBjYW1lIGZyb20gVGhlYmVzIHRvIHRyZWF0IGZvciBwZWFjZS4gQnV0IGhlIGhhZCBhbHdheXMgaGF0ZWQgdGhhdCBjaXR5LCBhbmQgdGhpbmtpbmcgdGhpcyBhbiBhZHZhbnRhZ2VvdXMgdGltZSBhbHNvIGZvciBpbnN1bHRpbmcgaXQsIHByZXRlbmRlZCBuZWl0aGVyIHRvIHNlZSBub3IgaGVhciBpdHMgYW1iYXNzYWRvcnMgd2hlbiB0aGV5IHByZXNlbnRlZCB0aGVtc2VsdmVzLiBCdXQgaGlzIHByaWRlIHNvb24gaGFkIGEgZmFsbDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIHRoZSBUaGViYW5zIGhhZCBub3QgeWV0IGRlcGFydGVkIHdoZW4gbWVzc2VuZ2VycyBjYW1lIHRvIGhpbSB3aXRoIHRpZGluZ3MgdGhhdCB0aGUgU3BhcnRhbiBkaXZpc2lvbiBoYWQgYmVlbiBjdXQgdG8gcGllY2VzIGJ5IElwaGljcmF0ZXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBMZWNoYWV1bSB0aGUgcG9ydCBvZiBDb3JpbnRoIG9uIHRoZSBDb3JpbnRoaWFuIGd1bGYgaW4gMzkwIEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS4xMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjExIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDUsIDExLTE4PC9iaWJsPikuPC9ub3RlPiBUaGlzIHdhcyB0aGUgZ3JlYXRlc3QgZGlzYXN0ZXIgdGhhdCBoYWQgaGFwcGVuZWQgdG8gdGhlIFNwYXJ0YW5zIGluIGEgbG9uZyB0aW1lOyBmb3IgdGhleSBsb3N0IG1hbnkgYnJhdmUgbWVuLCBhbmQgdGhvc2UgbWVuIHdlcmUgb3ZlcndoZWxtZWQgYnkgdGFyZ2V0ZWVycyBhbmQgbWVyY2VuYXJpZXMsIHRob3VnaCB0aGV5IHdlcmUgbWVuLWF0LWFybXMgYW5kIExhY2VkYWVtb25pYW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgaGUgd2FzIGxpbmdlcmluZyBpbiB0aGUgdGVycml0b3J5IG9mIENvcmludGgsIGhlIHNlaXplZCB0aGUgSGVyYWV1bSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHJlZnVnZWVzIGluIHRoZSBIZXJhZXVtIGNhbWUgb3V0IGFuZCBzdXJyZW5kZXJlZCBvZiB0aGVpciBvd24gYWNjb3JkICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS41IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS41IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gNSwgNTwvYmlibD4pLjwvbm90ZT4gYW5kIGFzIGhlIHdhcyB3YXRjaGluZyBoaXMgc29sZGllcnMgY2Fycnkgb2ZmIHRoZSBwcmlzb25lcnMgYW5kIGJvb3R5LCBtZXNzZW5nZXJzIGNhbWUgZnJvbSBUaGViZXMgdG8gdHJlYXQgZm9yIHBlYWNlLiBCdXQgaGUgaGFkIGFsd2F5cyBoYXRlZCB0aGF0IGNpdHksIGFuZCB0aGlua2luZyB0aGlzIGFuIGFkdmFudGFnZW91cyB0aW1lIGFsc28gZm9yIGluc3VsdGluZyBpdCwgcHJldGVuZGVkIG5laXRoZXIgdG8gc2VlIG5vciBoZWFyIGl0cyBhbWJhc3NhZG9ycyB3aGVuIHRoZXkgcHJlc2VudGVkIHRoZW1zZWx2ZXMuIEJ1dCBoaXMgcHJpZGUgc29vbiBoYWQgYSBmYWxsOyAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjUiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjUiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiA1LCA1PC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gNSwgNTwvdHJhbnNsYXRpb24+"
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciB0aGUgVGhlYmFucyBoYWQgbm90IHlldCBkZXBhcnRlZCB3aGVuIG1lc3NlbmdlcnMgY2FtZSB0byBoaW0gd2l0aCB0aWRpbmdzIHRoYXQgdGhlIFNwYXJ0YW4gZGl2aXNpb24gaGFkIGJlZW4gY3V0IHRvIHBpZWNlcyBieSBJcGhpY3JhdGVzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBMZWNoYWV1bSB0aGUgcG9ydCBvZiBDb3JpbnRoIG9uIHRoZSBDb3JpbnRoaWFuIGd1bGYgaW4gMzkwIEIuQy4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjExIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS4xMSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDUsIDExLTE4PC9iaWJsPikuPC9ub3RlPiBUaGlzIHdhcyB0aGUgZ3JlYXRlc3QgZGlzYXN0ZXIgdGhhdCBoYWQgaGFwcGVuZWQgdG8gdGhlIFNwYXJ0YW5zIGluIGEgbG9uZyB0aW1lOyBmb3IgdGhleSBsb3N0IG1hbnkgYnJhdmUgbWVuLCBhbmQgdGhvc2UgbWVuIHdlcmUgb3ZlcndoZWxtZWQgYnkgdGFyZ2V0ZWVycyBhbmQgbWVyY2VuYXJpZXMsIHRob3VnaCB0aGV5IHdlcmUgbWVuLWF0LWFybXMgYW5kIExhY2VkYWVtb25pYW5zLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS4xMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjUuMTEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiA1LCAxMS0xODwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDUsIDExLTE4PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlbiwgQWdlc2lsYcO8cyBzcHJhbmcgdXAgdG8gZ28gdG8gdGhlaXIgYXNzaXN0YW5jZSwgYnV0IHdoZW4gaGUgbGVhcm5lZCB0aGF0IGl0IHdhcyBhbGwgb3ZlciB3aXRoIHRoZW0sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5IZSBoYWQgbWFyY2hlZCB0aWxsIGhlIHdhcyAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj53ZWxsIHdpdGhpbiB0aGUgcGxhdGVhdSBvZiBMZWNoYWV1bTwvcT4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNS44IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjUuOCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGl2LiA1LCA4PC9iaWJsPikuPC9ub3RlPiBoZSBjYW1lIGJhY2sgYWdhaW4gdG8gdGhlIEhlcmFldW0sIGFuZCBvcmRlcmluZyB0aGUgQm9lb3RpYW5zIHRoZW4gdG8gY29tZSBiZWZvcmUgaGltLCBnYXZlIHRoZW0gYW4gYXVkaWVuY2UuIEJ1dCB0aGV5IHJldHVybmVkIGhpcyBpbnNvbGVuY2UgYnkgbWFraW5nIG5vIG1lbnRpb24gb2YgcGVhY2UsIGJ1dCBzaW1wbHkgYXNraW5nIHNhZmUgY29uZHVjdCBpbnRvIENvcmludGguIEFnZXNpbGHDvHMgd2FzIHdyb3RoIGF0IHRoaXMsIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHlvdSB3aXNoIHRvIHNlZSB5b3VyIGZyaWVuZHMgd2hlbiB0aGV5IGFyZSBlbGF0ZWQgYXQgdGhlaXIgc3VjY2Vzc2VzLCB5b3UgY2FuIGRvIHNvIHRvbW9ycm93IGluIGFsbCBzYWZldHkuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0YWtpbmcgdGhlbSBhbG9uZyB3aXRoIGhpbSBvbiB0aGUgbmV4dCBkYXksIGhlIHJhdmFnZWQgdGhlIHRlcnJpdG9yeSBvZiB0aGUgQ29yaW50aGlhbnMsIGFuZCBhZHZhbmNlZCB0byB0aGUgdmVyeSBnYXRlcyBvZiB0aGUgY2l0eS4gQWZ0ZXIgaGUgaGFkIHRodXMgcHJvdmVkIHRoYXQgdGhlIENvcmludGhpYW5zIGRpZCBub3QgZGFyZSB0byByZXNpc3QgaGltLCBoZSBkaXNtaXNzZWQgdGhlIGVtYmFzc3kuIFRoZW4gaGUgaGltc2VsZiwgcGlja2luZyB1cCB0aGUgc3Vydml2b3JzIG9mIHRoZSBkaXZpc2lvbiB0aGF0IGhhZCBiZWVuIGN1dCB0byBwaWVjZXMsIGxlZCB0aGVtIGJhY2sgdG8gU3BhcnRhLCBhbHdheXMgYnJlYWtpbmcgY2FtcCBiZWZvcmUgaXQgd2FzIGRheSwgYW5kIHBpdGNoaW5nIHRoZSBuZXh0IGNhbXAgYWZ0ZXIgaXQgd2FzIGRhcmssIGluIG9yZGVyIHRoYXQgdGhlIGhhdGVmdWwgYW5kIG1hbGljaW91cyBBcmNhZGlhbnMgbWlnaHQgbm90IGV4dWx0IG92ZXIgdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRoZW4sIEFnZXNpbGHDvHMgc3ByYW5nIHVwIHRvIGdvIHRvIHRoZWlyIGFzc2lzdGFuY2UsIGJ1dCB3aGVuIGhlIGxlYXJuZWQgdGhhdCBpdCB3YXMgYWxsIG92ZXIgd2l0aCB0aGVtLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5IZSBoYWQgbWFyY2hlZCB0aWxsIGhlIHdhcyAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndlbGwgd2l0aGluIHRoZSBwbGF0ZWF1IG9mIExlY2hhZXVtPC9xPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjUuOCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjUuOCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDUsIDg8L2JpYmw+KS48L25vdGU+IGhlIGNhbWUgYmFjayBhZ2FpbiB0byB0aGUgSGVyYWV1bSwgYW5kIG9yZGVyaW5nIHRoZSBCb2VvdGlhbnMgdGhlbiB0byBjb21lIGJlZm9yZSBoaW0sIGdhdmUgdGhlbSBhbiBhdWRpZW5jZS4gQnV0IHRoZXkgcmV0dXJuZWQgaGlzIGluc29sZW5jZSBieSBtYWtpbmcgbm8gbWVudGlvbiBvZiBwZWFjZSwgYnV0IHNpbXBseSBhc2tpbmcgc2FmZSBjb25kdWN0IGludG8gQ29yaW50aC4gQWdlc2lsYcO8cyB3YXMgd3JvdGggYXQgdGhpcywgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj53ZWxsIHdpdGhpbiB0aGUgcGxhdGVhdSBvZiBMZWNoYWV1bTwvcT4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjgiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC41LjgiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiA1LCA4PC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gNSwgODxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYgeW91IHdpc2ggdG8gc2VlIHlvdXIgZnJpZW5kcyB3aGVuIHRoZXkgYXJlIGVsYXRlZCBhdCB0aGVpciBzdWNjZXNzZXMsIHlvdSBjYW4gZG8gc28gdG9tb3Jyb3cgaW4gYWxsIHNhZmV0eS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0YWtpbmcgdGhlbSBhbG9uZyB3aXRoIGhpbSBvbiB0aGUgbmV4dCBkYXksIGhlIHJhdmFnZWQgdGhlIHRlcnJpdG9yeSBvZiB0aGUgQ29yaW50aGlhbnMsIGFuZCBhZHZhbmNlZCB0byB0aGUgdmVyeSBnYXRlcyBvZiB0aGUgY2l0eS4gQWZ0ZXIgaGUgaGFkIHRodXMgcHJvdmVkIHRoYXQgdGhlIENvcmludGhpYW5zIGRpZCBub3QgZGFyZSB0byByZXNpc3QgaGltLCBoZSBkaXNtaXNzZWQgdGhlIGVtYmFzc3kuIFRoZW4gaGUgaGltc2VsZiwgcGlja2luZyB1cCB0aGUgc3Vydml2b3JzIG9mIHRoZSBkaXZpc2lvbiB0aGF0IGhhZCBiZWVuIGN1dCB0byBwaWVjZXMsIGxlZCB0aGVtIGJhY2sgdG8gU3BhcnRhLCBhbHdheXMgYnJlYWtpbmcgY2FtcCBiZWZvcmUgaXQgd2FzIGRheSwgYW5kIHBpdGNoaW5nIHRoZSBuZXh0IGNhbXAgYWZ0ZXIgaXQgd2FzIGRhcmssIGluIG9yZGVyIHRoYXQgdGhlIGhhdGVmdWwgYW5kIG1hbGljaW91cyBBcmNhZGlhbnMgbWlnaHQgbm90IGV4dWx0IG92ZXIgdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdG8gZ3JhdGlmeSB0aGUgQWNoYWVhbnMsIGhlIGNyb3NzZWQgb3ZlciB3aXRoIHRoZW0gb24gYW4gZXhwZWRpdGlvbiBpbnRvIEFjYXJuYW5pYSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM5MC0zODkgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC42LjMiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNi4zIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDYsIDM8L2JpYmw+4oCUPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC43LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNy4xIiB2YWxpZD0ieWVzIj43LCAxPC9iaWJsPikuPC9ub3RlPiB3aGVyZSBoZSBkcm92ZSBhd2F5IG11Y2ggYm9vdHkgYW5kIGNvbnF1ZXJlZCB0aGUgQWNhcm5hbmlhbnMgaW4gYmF0dGxlLiBCdXQgd2hlbiB0aGUgQWNoYWVhbnMgYXNrZWQgaGltIHRvIHNwZW5kIHRoZSB3aW50ZXIgdGhlcmUgaW4gb3JkZXIgdG8gcHJldmVudCB0aGUgZW5lbXkgZnJvbSBzb3dpbmcgdGhlaXIgZmllbGRzLCBoZSBzYWlkIGhlIHdvdWxkIGRvIHRoZSBvcHBvc2l0ZSBvZiB0aGlzOyBmb3IgdGhlIGVuZW15IHdvdWxkIGRyZWFkIHRoZSB3YXIgbW9yZSBpZiB0aGVpciBsYW5kIHdhcyBzb3duIHdoZW4gc3VtbWVyIGNhbWUuIEFuZCB0aGlzIHByb3ZlZCB0cnVlOyBmb3Igd2hlbiBhIHNlY29uZCBleHBlZGl0aW9uIGFnYWluc3QgdGhlbSB3YXMgYW5ub3VuY2VkLCB0aGV5IGNhbWUgdG8gdGVybXMgd2l0aCB0aGUgQWNoYWVhbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHRvIGdyYXRpZnkgdGhlIEFjaGFlYW5zLCBoZSBjcm9zc2VkIG92ZXIgd2l0aCB0aGVtIG9uIGFuIGV4cGVkaXRpb24gaW50byBBY2FybmFuaWEsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM5MC0zODkgQi5DLiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjYuMyIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjYuMyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDYsIDM8L2JpYmw+4oCUPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjcuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjcuMSIgdmFsaWQ9InllcyI+NywgMTwvYmlibD4pLjwvbm90ZT4gd2hlcmUgaGUgZHJvdmUgYXdheSBtdWNoIGJvb3R5IGFuZCBjb25xdWVyZWQgdGhlIEFjYXJuYW5pYW5zIGluIGJhdHRsZS4gQnV0IHdoZW4gdGhlIEFjaGFlYW5zIGFza2VkIGhpbSB0byBzcGVuZCB0aGUgd2ludGVyIHRoZXJlIGluIG9yZGVyIHRvIHByZXZlbnQgdGhlIGVuZW15IGZyb20gc293aW5nIHRoZWlyIGZpZWxkcywgaGUgc2FpZCBoZSB3b3VsZCBkbyB0aGUgb3Bwb3NpdGUgb2YgdGhpczsgZm9yIHRoZSBlbmVteSB3b3VsZCBkcmVhZCB0aGUgd2FyIG1vcmUgaWYgdGhlaXIgbGFuZCB3YXMgc293biB3aGVuIHN1bW1lciBjYW1lLiBBbmQgdGhpcyBwcm92ZWQgdHJ1ZTsgZm9yIHdoZW4gYSBzZWNvbmQgZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZW0gd2FzIGFubm91bmNlZCwgdGhleSBjYW1lIHRvIHRlcm1zIHdpdGggdGhlIEFjaGFlYW5zLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNi4zIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuNi4zIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gNiwgMzwvYmlibD7igJQ8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiA2LCAzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjcuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjcuMSIgdmFsaWQ9InllcyI+NywgMTwvYmlibD4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ29ub24gYW5kIFBoYXJuYWJhenVzIHdpdGggdGhlIEdyZWF0IEtpbmcncyBmbGVldCB3ZXJlIG1hc3RlcnMgb2YgdGhlIHNlYSBhbmQgd2VyZSByYXZhZ2luZyB0aGUgY29hc3RzIG9mIExhY29uaWEsIGFuZCBhZnRlciB0aGUgd2FsbHMgb2YgQXRoZW5zIGhhZCBiZWVuIHJlYnVpbHQgd2l0aCB0aGUgbW9uZXkgd2hpY2ggUGhhcm5hYmF6dXMgZnVybmlzaGVkLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzkzIEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuOC4xMCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC44LjEwIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaXYuIDgsMTA8L2JpYmw+KS48L25vdGU+IHRoZSBMYWNlZGFlbW9uaWFucyBkZWNpZGVkIHRvIG1ha2UgcGVhY2Ugd2l0aCB0aGUga2luZyBvZiBQZXJzaWEuIFRvIHRoYXQgZW5kLCB0aGV5IHNlbnQgQW50YWxjaWRhcyB0byBUaXJpYmF6dXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgR3JlYXQgS2luZydzIHNhdHJhcCBpbiBXZXN0ZXJuIEFzaWEuPC9ub3RlPiBhbmQgaW4gdGhlIG1vc3Qgc2hhbWVmdWwgYW5kIGxhd2xlc3MgZmFzaGlvbiBoYW5kZWQgb3ZlciB0byB0aGUgS2luZyB0aGUgR3JlZWtzIHJlc2lkZW50IGluIEFzaWEsIGluIHdob3NlIGJlaGFsZiBBZ2VzaWxhw7xzIGhhZCB3YWdlZCB3YXIuIEFnZXNpbGHDvHMsIHRoZXJlZm9yZSwgY291bGQgaGF2ZSBoYWQgbm8gcGFydCBhdCBhbGwgaW4gdGhpcyBpbmZhbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBBbnRhbGNpZGFzIHdhcyBoaXMgZW5lbXksIGFuZCBwdXQgZm9ydGggYWxsIGhpcyBlZmZvcnRzIHRvIG1ha2UgdGhlIHBlYWNlIGJlY2F1c2UgaGUgc2F3IHRoYXQgdGhlIHdhciBlbmhhbmNlZCB0byB0aGUgdXRtb3N0IHRoZSByZXB1dGF0aW9uIGFuZCBwb3dlciBvZiBBZ2VzaWxhw7xzLiBOb3R3aXRoc3RhbmRpbmcgdGhpcywgdG8gb25lIHdobyByZW1hcmtlZCB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIGZhdm91cmluZyB0aGUgTWVkZXMsIEFnZXNpbGHDvHMgcmVwbGllZCB0aGF0IHRoZSBNZWRlcyB3ZXJlIHRoZSByYXRoZXIgZmF2b3VyaW5nIHRoZSBMYWNlZGFlbW9uaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGJ5IHRocmVhdGVuaW5nIHdpdGggd2FyIHRoZSBHcmVla3Mgd2hvIHdlcmUgdW53aWxsaW5nIHRvIGFjY2VwdCB0aGUgcGVhY2UsIGhlIGZvcmNlZCB0aGVtIGFsbCB0byBhYmlkZSBieSB0aGUgdGVybXMgd2hpY2ggdGhlIFBlcnNpYW4gZGljdGF0ZWQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgcGVhY2Ugb2YgQW50YWxjaWRhcyB3YXMgcmF0aWZpZWQgYnkgYWxsIHRoZSBHcmVlayBzdGF0ZXMgZXhjZXB0IFRoZWJlcyBpbiAzODcgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4xLjI5IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjEuMjkiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2LiAxLCAyOSBmZi48L2JpYmw+KS48L25vdGU+IG1vcmUgZXNwZWNpYWxseSBvbiBhY2NvdW50IG9mIHRoZSBUaGViYW5zLCBoaXMgb2JqZWN0IGJlaW5nIHRvIG1ha2UgdGhlbSB3ZWFrZXIgYnkgbGVhdmluZyBCb2VvdGlhIGluZGVwZW5kZW50IG9mIFRoZWJlcy4gVGhpcyBoZSBtYWRlIGNsZWFyIGJ5IGhpcyBzdWJzZXF1ZW50IGJlaGF2aW91ci4gRm9yIHdoZW4gUGhvZWJpZGFzIGNvbW1pdHRlZCB0aGUgZm91bCBkZWVkIG9mIHNlaXppbmcgdGhlIENhZG1laWEKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBjaXRhZGVsIG9mIFRoZWJlcy4gSXQgd2FzIHNlaXplZCBieSBQaG9lYmlkYXMgaW4gMzgzIEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuMi4yNiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4yLjI2IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdi4gMiwgMjYgZmYuPC9iaWJsPikuPC9ub3RlPiBpbiBhIHRpbWUgb2YgcGVyZmVjdCBwZWFjZSwgYW5kIGFsbCB0aGUgR3JlZWtzIHdlcmUgaW5kaWduYW50IGFuZCB0aGUgU3BhcnRhbnMgZGlzcGxlYXNlZCBhdCB0aGUgYWN0LCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgd2hlbiBlc3BlY2lhbGx5IHRob3NlIHdobyB3ZXJlIGF0IHZhcmlhbmNlIHdpdGggQWdlc2lsYcO8cyBhbmdyaWx5IGFza2VkIFBob2ViaWRhcyBieSB3aG9zZSBjb21tYW5kIGhlIGhhZCBkb25lIHRoaXMgdGhpbmcsIHRoZXJlYnkgdHVybmluZyBzdXNwaWNpb24gdXBvbiBBZ2VzaWxhw7xzLCBoZSBkaWQgbm90IHNjcnVwbGUgdG8gY29tZSB0byB0aGUgaGVscCBvZiBQaG9lYmlkYXMsIGFuZCB0byBzYXkgb3Blbmx5IHRoYXQgdGhleSBtdXN0IGNvbnNpZGVyIHdoZXRoZXIgdGhlIGFjdCBpdHNlbGYgd2FzIHNlcnZpY2VhYmxlIG9yIG5vdDsgZm9yIHRoYXQgd2hpY2ggd2FzIGFkdmFudGFnZW91cyB0byBTcGFydGEgbWlnaHQgd2VsbCBiZSBkb25lIGluZGVwZW5kZW50bHksIGV2ZW4gaWYgbm8gb25lIG9yZGVyZWQgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaW4gaGlzIGRpc2NvdXJzZSBoZSB3YXMgYWx3YXlzIGRlY2xhcmluZyB0aGF0IGp1c3RpY2Ugd2FzIHRoZSBmaXJzdCBvZiB0aGUgdmlydHVlczsgZm9yIHZhbG91ciB3YXMgb2Ygbm8gdXNlIHVubGVzcyBqdXN0aWNlIGF0dGVuZGVkIGl0LCBhbmQgaWYgYWxsIG1lbiBzaG91bGQgYmUganVzdCwgdGhlcmUgd291bGQgYmUgbm8gbmVlZCBvZiB2YWxvdXIuIEFuZCB0byB0aG9zZSB3aG8gc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGlzIHRoZSBwbGVhc3VyZSBvZiB0aGUgR3JlYXQgS2luZyw8L3E+IGhlIHdvdWxkIHNheSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ib3cgaXMgaGUgZ3JlYXRlciB0aGFuIEkgdW5sZXNzIGhlIGlzIGFsc28gbW9yZSBqdXN0PzwvcT4sIHJpZ2h0bHkgYW5kIG5vYmx5IHRoaW5raW5nIHRoYXQganVzdGljZSBtdXN0IGJlIHRoZSByb3lhbCBtZWFzdXJlIHdoZXJld2l0aCByZWxhdGl2ZSBncmVhdG5lc3MgaXMgbWVhc3VyZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuLCBhZnRlciB0aGUgcGVhY2Ugd2FzIGNvbmNsdWRlZCwgdGhlIEdyZWF0IEtpbmcgc2VudCBoaW0gYSBsZXR0ZXIgcHJvcG9zaW5nIGd1ZXN0LWZyaWVuZHNoaXAsIGhlIHdvdWxkIG5vdCBhY2NlcHQgaXQsIHNheWluZyB0aGF0IHRoZSBwdWJsaWMgZnJpZW5kc2hpcCB3YXMgZW5vdWdoLCBhbmQgdGhhdCB3aGlsZSB0aGF0IGxhc3RlZCB0aGVyZSB3b3VsZCBiZSBubyBuZWVkIG9mIGEgcHJpdmF0ZSBvbmUuIFlldCBpbiBoaXMgYWN0cyBoZSBubyBsb25nZXIgb2JzZXJ2ZWQgdGhlc2Ugb3BpbmlvbnMsIGJ1dCB3YXMgb2Z0ZW4gY2FycmllZCBhd2F5IGJ5IGFtYml0aW9uIGFuZCBjb250ZW50aW91c25lc3MsIGFuZCBwYXJ0aWN1bGFybHkgaW4gaGlzIHRyZWF0bWVudCBvZiB0aGUgVGhlYmFucy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIG5vdCBvbmx5IHJlc2N1ZWQgUGhvZWJpZGFzIGZyb20gcHVuaXNobWVudCwgYnV0IGFjdHVhbGx5IHBlcnN1YWRlZCBTcGFydGEgdG8gYXNzdW1lIHJlc3BvbnNpYmlsaXR5IGZvciBoaXMgaW5pcXVpdHkgYW5kIG9jY3VweSB0aGUgQ2FkbWVpYSBvbiBpdHMgb3duIGFjY291bnQsIGJlc2lkZXMgcHV0dGluZyB0aGUgYWRtaW5pc3RyYXRpb24gb2YgVGhlYmVzIGludG8gdGhlIGhhbmRzIG9mIEFyY2hpYXMgYW5kIExlb250aWRhcywgYnkgd2hvc2UgYWlkIFBob2ViaWRhcyBoYWQgZW50ZXJlZCBhbmQgc2VpemVkIHRoZSBhY3JvcG9saXMuIAoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDb25vbiBhbmQgUGhhcm5hYmF6dXMgd2l0aCB0aGUgR3JlYXQgS2luZydzIGZsZWV0IHdlcmUgbWFzdGVycyBvZiB0aGUgc2VhIGFuZCB3ZXJlIHJhdmFnaW5nIHRoZSBjb2FzdHMgb2YgTGFjb25pYSwgYW5kIGFmdGVyIHRoZSB3YWxscyBvZiBBdGhlbnMgaGFkIGJlZW4gcmVidWlsdCB3aXRoIHRoZSBtb25leSB3aGljaCBQaGFybmFiYXp1cyBmdXJuaXNoZWQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM5MyBCLkMuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDQuOC4xMCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjguMTAiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGl2LiA4LDEwPC9iaWJsPikuPC9ub3RlPiB0aGUgTGFjZWRhZW1vbmlhbnMgZGVjaWRlZCB0byBtYWtlIHBlYWNlIHdpdGggdGhlIGtpbmcgb2YgUGVyc2lhLiBUbyB0aGF0IGVuZCwgdGhleSBzZW50IEFudGFsY2lkYXMgdG8gVGlyaWJhenVzLAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA0LjguMTAiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNC44LjEwIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpdi4gOCwxMDwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaXYuIDgsMTA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBHcmVhdCBLaW5nJ3Mgc2F0cmFwIGluIFdlc3Rlcm4gQXNpYS48L25vdGU+IGFuZCBpbiB0aGUgbW9zdCBzaGFtZWZ1bCBhbmQgbGF3bGVzcyBmYXNoaW9uIGhhbmRlZCBvdmVyIHRvIHRoZSBLaW5nIHRoZSBHcmVla3MgcmVzaWRlbnQgaW4gQXNpYSwgaW4gd2hvc2UgYmVoYWxmIEFnZXNpbGHDvHMgaGFkIHdhZ2VkIHdhci4gQWdlc2lsYcO8cywgdGhlcmVmb3JlLCBjb3VsZCBoYXZlIGhhZCBubyBwYXJ0IGF0IGFsbCBpbiB0aGlzIGluZmFteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBBbnRhbGNpZGFzIHdhcyBoaXMgZW5lbXksIGFuZCBwdXQgZm9ydGggYWxsIGhpcyBlZmZvcnRzIHRvIG1ha2UgdGhlIHBlYWNlIGJlY2F1c2UgaGUgc2F3IHRoYXQgdGhlIHdhciBlbmhhbmNlZCB0byB0aGUgdXRtb3N0IHRoZSByZXB1dGF0aW9uIGFuZCBwb3dlciBvZiBBZ2VzaWxhw7xzLiBOb3R3aXRoc3RhbmRpbmcgdGhpcywgdG8gb25lIHdobyByZW1hcmtlZCB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIGZhdm91cmluZyB0aGUgTWVkZXMsIEFnZXNpbGHDvHMgcmVwbGllZCB0aGF0IHRoZSBNZWRlcyB3ZXJlIHRoZSByYXRoZXIgZmF2b3VyaW5nIHRoZSBMYWNlZGFlbW9uaWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBieSB0aHJlYXRlbmluZyB3aXRoIHdhciB0aGUgR3JlZWtzIHdobyB3ZXJlIHVud2lsbGluZyB0byBhY2NlcHQgdGhlIHBlYWNlLCBoZSBmb3JjZWQgdGhlbSBhbGwgdG8gYWJpZGUgYnkgdGhlIHRlcm1zIHdoaWNoIHRoZSBQZXJzaWFuIGRpY3RhdGVkLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgcGVhY2Ugb2YgQW50YWxjaWRhcyB3YXMgcmF0aWZpZWQgYnkgYWxsIHRoZSBHcmVlayBzdGF0ZXMgZXhjZXB0IFRoZWJlcyBpbiAzODcgQi5DLiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjEuMjkiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4xLjI5IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2LiAxLCAyOSBmZi48L2JpYmw+KS48L25vdGU+IG1vcmUgZXNwZWNpYWxseSBvbiBhY2NvdW50IG9mIHRoZSBUaGViYW5zLCBoaXMgb2JqZWN0IGJlaW5nIHRvIG1ha2UgdGhlbSB3ZWFrZXIgYnkgbGVhdmluZyBCb2VvdGlhIGluZGVwZW5kZW50IG9mIFRoZWJlcy4gVGhpcyBoZSBtYWRlIGNsZWFyIGJ5IGhpcyBzdWJzZXF1ZW50IGJlaGF2aW91ci4gRm9yIHdoZW4gUGhvZWJpZGFzIGNvbW1pdHRlZCB0aGUgZm91bCBkZWVkIG9mIHNlaXppbmcgdGhlIENhZG1laWEKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4xLjI5IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuMS4yOSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdi4gMSwgMjkgZmYuPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2LiAxLCAyOSBmZi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBjaXRhZGVsIG9mIFRoZWJlcy4gSXQgd2FzIHNlaXplZCBieSBQaG9lYmlkYXMgaW4gMzgzIEIuQy4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4yLjI2IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuMi4yNiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdi4gMiwgMjYgZmYuPC9iaWJsPikuPC9ub3RlPiBpbiBhIHRpbWUgb2YgcGVyZmVjdCBwZWFjZSwgYW5kIGFsbCB0aGUgR3JlZWtzIHdlcmUgaW5kaWduYW50IGFuZCB0aGUgU3BhcnRhbnMgZGlzcGxlYXNlZCBhdCB0aGUgYWN0LCAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4yLjI2IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuMi4yNiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdi4gMiwgMjYgZmYuPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2LiAyLCAyNiBmZi48L3RyYW5zbGF0aW9uPg=="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuIGVzcGVjaWFsbHkgdGhvc2Ugd2hvIHdlcmUgYXQgdmFyaWFuY2Ugd2l0aCBBZ2VzaWxhw7xzIGFuZ3JpbHkgYXNrZWQgUGhvZWJpZGFzIGJ5IHdob3NlIGNvbW1hbmQgaGUgaGFkIGRvbmUgdGhpcyB0aGluZywgdGhlcmVieSB0dXJuaW5nIHN1c3BpY2lvbiB1cG9uIEFnZXNpbGHDvHMsIGhlIGRpZCBub3Qgc2NydXBsZSB0byBjb21lIHRvIHRoZSBoZWxwIG9mIFBob2ViaWRhcywgYW5kIHRvIHNheSBvcGVubHkgdGhhdCB0aGV5IG11c3QgY29uc2lkZXIgd2hldGhlciB0aGUgYWN0IGl0c2VsZiB3YXMgc2VydmljZWFibGUgb3Igbm90OyBmb3IgdGhhdCB3aGljaCB3YXMgYWR2YW50YWdlb3VzIHRvIFNwYXJ0YSBtaWdodCB3ZWxsIGJlIGRvbmUgaW5kZXBlbmRlbnRseSwgZXZlbiBpZiBubyBvbmUgb3JkZXJlZCBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaW4gaGlzIGRpc2NvdXJzZSBoZSB3YXMgYWx3YXlzIGRlY2xhcmluZyB0aGF0IGp1c3RpY2Ugd2FzIHRoZSBmaXJzdCBvZiB0aGUgdmlydHVlczsgZm9yIHZhbG91ciB3YXMgb2Ygbm8gdXNlIHVubGVzcyBqdXN0aWNlIGF0dGVuZGVkIGl0LCBhbmQgaWYgYWxsIG1lbiBzaG91bGQgYmUganVzdCwgdGhlcmUgd291bGQgYmUgbm8gbmVlZCBvZiB2YWxvdXIuIEFuZCB0byB0aG9zZSB3aG8gc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgaXMgdGhlIHBsZWFzdXJlIG9mIHRoZSBHcmVhdCBLaW5nLDwvcT4gaGUgd291bGQgc2F5LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SG93IGlzIGhlIGdyZWF0ZXIgdGhhbiBJIHVubGVzcyBoZSBpcyBhbHNvIG1vcmUganVzdD88L3E+LCByaWdodGx5IGFuZCBub2JseSB0aGlua2luZyB0aGF0IGp1c3RpY2UgbXVzdCBiZSB0aGUgcm95YWwgbWVhc3VyZSB3aGVyZXdpdGggcmVsYXRpdmUgZ3JlYXRuZXNzIGlzIG1lYXN1cmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuLCBhZnRlciB0aGUgcGVhY2Ugd2FzIGNvbmNsdWRlZCwgdGhlIEdyZWF0IEtpbmcgc2VudCBoaW0gYSBsZXR0ZXIgcHJvcG9zaW5nIGd1ZXN0LWZyaWVuZHNoaXAsIGhlIHdvdWxkIG5vdCBhY2NlcHQgaXQsIHNheWluZyB0aGF0IHRoZSBwdWJsaWMgZnJpZW5kc2hpcCB3YXMgZW5vdWdoLCBhbmQgdGhhdCB3aGlsZSB0aGF0IGxhc3RlZCB0aGVyZSB3b3VsZCBiZSBubyBuZWVkIG9mIGEgcHJpdmF0ZSBvbmUuIFlldCBpbiBoaXMgYWN0cyBoZSBubyBsb25nZXIgb2JzZXJ2ZWQgdGhlc2Ugb3BpbmlvbnMsIGJ1dCB3YXMgb2Z0ZW4gY2FycmllZCBhd2F5IGJ5IGFtYml0aW9uIGFuZCBjb250ZW50aW91c25lc3MsIGFuZCBwYXJ0aWN1bGFybHkgaW4gaGlzIHRyZWF0bWVudCBvZiB0aGUgVGhlYmFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBub3Qgb25seSByZXNjdWVkIFBob2ViaWRhcyBmcm9tIHB1bmlzaG1lbnQsIGJ1dCBhY3R1YWxseSBwZXJzdWFkZWQgU3BhcnRhIHRvIGFzc3VtZSByZXNwb25zaWJpbGl0eSBmb3IgaGlzIGluaXF1aXR5IGFuZCBvY2N1cHkgdGhlIENhZG1laWEgb24gaXRzIG93biBhY2NvdW50LCBiZXNpZGVzIHB1dHRpbmcgdGhlIGFkbWluaXN0cmF0aW9uIG9mIFRoZWJlcyBpbnRvIHRoZSBoYW5kcyBvZiBBcmNoaWFzIGFuZCBMZW9udGlkYXMsIGJ5IHdob3NlIGFpZCBQaG9lYmlkYXMgaGFkIGVudGVyZWQgYW5kIHNlaXplZCB0aGUgYWNyb3BvbGlzLiAKCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2YgY291cnNlIHRoaXMgZ2F2ZSByaXNlIGF0IG9uY2UgdG8gYSBzdXNwaWNpb24gdGhhdCB3aGlsZSBQaG9lYmlkYXMgaGFkIGRvbmUgdGhlIGRlZWQsIEFnZXNpbGHDvHMgaGFkIGNvdW5zZWxsZWQgaXQ7IGFuZCBoaXMgc3Vic2VxdWVudCBhY3RzIGJyb3VnaHQgdGhlIGNoYXJnZSBpbnRvIGdlbmVyYWwgYmVsaWVmLiBGb3Igd2hlbiB0aGUgVGhlYmFucyBleHBlbGxlZCB0aGUgU3BhcnRhbiBnYXJyaXNvbiBhbmQgbGliZXJhdGVkIHRoZWlyIGNpdHksCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNzkgQi5DLiwgd2l0aCB0aGUgaGVscCBvZiB0aGUgQXRoZW5pYW5zICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHYuIDQsIDItMTI8L2JpYmw+KS4gQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiA5LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5QZWxvcGlkYXM8L3RpdGxlPiBpeC4teGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGUgY2hhcmdlZCB0aGVtIHdpdGggdGhlIG11cmRlciBvZiBBcmNoaWFzIGFuZCBMZW9udGlkYXMsIHdobyB3ZXJlIHJlYWxseSB0eXJhbnRzLCB0aG91Z2ggcG9sZW1hcmNocyBpbiBuYW1lLCBhbmQgbGV2aWVkIHdhciB1cG9uIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBDbGVvbWJyb3R1cywgd2hvIHdhcyBraW5nIG5vdyB0aGF0IEFnZXNpcG9saXMgd2FzIGRlYWQsIHdhcyBzZW50IGludG8gQm9lb3RpYSB3aXRoIGFuIGFybXk7IGZvciBBZ2VzaWxhw7xzLCB3aG8gaGFkIG5vdyBib3JuZSBhcm1zIGZvciBmb3J0eSB5ZWFycywgYW5kIHdhcyB0aGVyZWZvcmUgZXhlbXB0IGJ5IGxhdyBmcm9tIG1pbGl0YXJ5IHNlcnZpY2UsIGRlY2xpbmVkIHRoaXMgY29tbWFuZC4gSGUgd2FzIGFzaGFtZWQsIGFmdGVyIGhhdmluZyByZWNlbnRseSBtYWRlIHdhciB1cG9uIHRoZSBQaGxpYXNpYW5zIGluIGJlaGFsZiBvZiB0aGVpciBleGlsZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzODAtMzc5IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuMy4xMyIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4zLjEzIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdi4gMywgMTMtMjU8L2JpYmw+KS48L25vdGU+IHRvIGJlIHNlZW4gbm93IGhhcnJ5aW5nIHRoZSBUaGViYW5zIGluIHRoZSBpbnRlcmVzdHMgb2YgdGhlaXIgdHlyYW50cy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMTMiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4xMyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHYuIDQsIDEzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2YgY291cnNlIHRoaXMgZ2F2ZSByaXNlIGF0IG9uY2UgdG8gYSBzdXNwaWNpb24gdGhhdCB3aGlsZSBQaG9lYmlkYXMgaGFkIGRvbmUgdGhlIGRlZWQsIEFnZXNpbGHDvHMgaGFkIGNvdW5zZWxsZWQgaXQ7IGFuZCBoaXMgc3Vic2VxdWVudCBhY3RzIGJyb3VnaHQgdGhlIGNoYXJnZSBpbnRvIGdlbmVyYWwgYmVsaWVmLiBGb3Igd2hlbiB0aGUgVGhlYmFucyBleHBlbGxlZCB0aGUgU3BhcnRhbiBnYXJyaXNvbiBhbmQgbGliZXJhdGVkIHRoZWlyIGNpdHksCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM3OSBCLkMuLCB3aXRoIHRoZSBoZWxwIG9mIHRoZSBBdGhlbmlhbnMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjIiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdi4gNCwgMi0xMjwvYmlibD4pLiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gOS4xIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBlbG9waWRhczwvdGl0bGU+IGl4Li14aWlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBoZSBjaGFyZ2VkIHRoZW0gd2l0aCB0aGUgbXVyZGVyIG9mIEFyY2hpYXMgYW5kIExlb250aWRhcywgd2hvIHdlcmUgcmVhbGx5IHR5cmFudHMsIHRob3VnaCBwb2xlbWFyY2hzIGluIG5hbWUsIGFuZCBsZXZpZWQgd2FyIHVwb24gdGhlbS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4yIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4yIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHYuIDQsIDItMTI8L2JpYmw+KS4gQ2YuIHRoZSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHYuIDQsIDItMTI8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDkuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiA5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QZWxvcGlkYXM8L3RpdGxlPiBpeC4teGlpaS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBlbG9waWRhczwvdGl0bGU+IGl4Li14aWlpLjwvdHJhbnNsYXRpb24+"
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBDbGVvbWJyb3R1cywgd2hvIHdhcyBraW5nIG5vdyB0aGF0IEFnZXNpcG9saXMgd2FzIGRlYWQsIHdhcyBzZW50IGludG8gQm9lb3RpYSB3aXRoIGFuIGFybXk7IGZvciBBZ2VzaWxhw7xzLCB3aG8gaGFkIG5vdyBib3JuZSBhcm1zIGZvciBmb3J0eSB5ZWFycywgYW5kIHdhcyB0aGVyZWZvcmUgZXhlbXB0IGJ5IGxhdyBmcm9tIG1pbGl0YXJ5IHNlcnZpY2UsIGRlY2xpbmVkIHRoaXMgY29tbWFuZC4gSGUgd2FzIGFzaGFtZWQsIGFmdGVyIGhhdmluZyByZWNlbnRseSBtYWRlIHdhciB1cG9uIHRoZSBQaGxpYXNpYW5zIGluIGJlaGFsZiBvZiB0aGVpciBleGlsZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM4MC0zNzkgQi5DLiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjMuMTMiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4zLjEzIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2LiAzLCAxMy0yNTwvYmlibD4pLjwvbm90ZT4gdG8gYmUgc2VlbiBub3cgaGFycnlpbmcgdGhlIFRoZWJhbnMgaW4gdGhlIGludGVyZXN0cyBvZiB0aGVpciB0eXJhbnRzLgoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjMuMTMiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS4zLjEzIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2LiAzLCAxMy0yNTwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdi4gMywgMTMtMjU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4xMyIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMTMiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHYuIDQsIDEzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4xMyIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMTMiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHYuIDQsIDEzLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2LiA0LCAxMy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZXJlIHdhcyBhIGNlcnRhaW4gTGFjZWRhZW1vbmlhbiBuYW1lZCBTcGhvZHJpYXMsIG9mIHRoZSBwYXJ0eSBvcHBvc2VkIHRvIEFnZXNpbGHDvHMsIHdobyBoYWQgYmVlbiBhcHBvaW50ZWQgaGFybW9zdCBhdCBUaGVzcGlhZS4gSGUgbGFja2VkIG5laXRoZXIgYm9sZG5lc3Mgbm9yIGFtYml0aW9uLCBidXQgYWx3YXlzIGFib3VuZGVkIGluIGhvcGVzIHJhdGhlciB0aGFuIGluIGdvb2QganVkZ2VtZW50LiBUaGlzIG1hbiwgY292ZXRpbmcgYSBncmVhdCBuYW1lLCBhbmQgY29uc2lkZXJpbmcgdGhhdCBQaG9lYmlkYXMgaGFkIG1hZGUgaGltc2VsZiBmYW1vdXMgZmFyIGFuZCBuZWFyIGJ5IGhpcyBib2xkIGRlZWQgYXQgVGhlYmVzLCB3YXMgcGVyc3VhZGVkIHRoYXQgaXQgd291bGQgYmUgYSBmYXIgbW9yZSBob25vdXJhYmxlIGFuZCBicmlsbGlhbnQgZXhwbG9pdCBmb3IgaGltIHRvIHNlaXplIHRoZSBQZWlyYWV1cyBvbiBoaXMgb3duIGFjY291bnQgYW5kIHJvYiB0aGUgQXRoZW5pYW5zIG9mIGFjY2VzcyB0byB0aGUgc2VhLCBhdHRhY2tpbmcgdGhlbSB1bmV4cGVjdGVkbHkgYnkgbGFuZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2FpZCwgdG9vLCB0aGF0IHRoZSBzY2hlbWUgd2FzIGRldmlzZWQgYnkgUGVsb3BpZGFzIGFuZCBNZWxvLCBjaGllZiBtYWdpc3RyYXRlcyBhdCBUaGViZXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVpciBvYmplY3Qgd2FzIHRvIGVtYnJvaWwgQXRoZW5zIGFuZCBTcGFydGEgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4yMCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjIwIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdi4gNCwgMjAtMjQ8L2JpYmw+KS48L25vdGU+IFRoZXkgcHJpdmlseSBzZW50IG1lbiB0byBoaW0gd2hvIHByZXRlbmRlZCB0byBiZSBTcGFydGFuIHN5bXBhdGhpemVycywgYW5kIHRoZXksIGJ5IHByYWlzaW5nIGFuZCBleGFsdGluZyBTcGhvZHJpYXMgYXMgdGhlIG9ubHkgbWFuIHdvcnRoeSB0byB1bmRlcnRha2Ugc28gZ3JlYXQgYSB0YXNrLCB1cmdlZCBhbmQgaW5jaXRlZCBoaW0gaW50byBhbiBhY3Qgd2hpY2ggd2FzIG5vIGxlc3MgbGF3bGVzcyBhbmQgdW5qdXN0IHRoYW4gdGhlIHNlaXp1cmUgb2YgdGhlIENhZG1laWEsIHRob3VnaCBpdCB3YXMgZXNzYXllZCB3aXRob3V0IGNvdXJhZ2Ugb3IgZ29vZCBmb3J0dW5lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZnVsbCBkYXlsaWdodCBvdmVydG9vayBoaW0gd2hpbGUgaGUgd2FzIHlldCBpbiB0aGUgVGhyaWFzaWFuIHBsYWluLCBhbHRob3VnaCBoZSBoYWQgaG9wZWQgdG8gYXR0YWNrIHRoZSBQZWlyYWV1cyBieSBuaWdodC4gSXQgaXMgc2FpZCBhbHNvIHRoYXQgaGlzIHNvbGRpZXJzIHNhdyBhIGxpZ2h0IHN0cmVhbWluZyBmcm9tIGNlcnRhaW4gc2FuY3R1YXJpZXMgYXQgRWxldXNpcywgYW5kIHdlcmUgZmlsbGVkIHdpdGggc2h1ZGRlcmluZyBmZWFyLiBUaGVpciBjb21tYW5kZXIgaGltc2VsZiBsb3N0IGFsbCBoaXMgY291cmFnZSwgc2luY2UgY29uY2VhbG1lbnQgd2FzIG5vIGxvbmdlciBwb3NzaWJsZSwgYW5kIGFmdGVyIHJhdmFnaW5nIHRoZSBjb3VudHJ5IGEgbGl0dGxlLCByZXRpcmVkIGRpc2dyYWNlZnVsbHkgYW5kIGluZ2xvcmlvdXNseSB0byBUaGVzcGlhZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZXVwb24gbWVuIHdlcmUgc2VudCBmcm9tIEF0aGVucyB0byBTcGFydGEgdG8gZGVub3VuY2UgU3Bob2RyaWFzLiBUaGV5IGZvdW5kLCBob3dldmVyLCB0aGF0IHRoZSBtYWdpc3RyYXRlcyB0aGVyZSBoYWQgbm8gbmVlZCBvZiB0aGVpciBkZW51bmNpYXRpb24sIGJ1dCBoYWQgYWxyZWFkeSBpbmRpY3RlZCBTcGhvZHJpYXMgb24gYSBjYXBpdGFsIGNoYXJnZS4gVGhpcyBjaGFyZ2UgaGUgZGV0ZXJtaW5lZCBub3QgdG8gbWVldCwgZmVhcmluZyB0aGUgd3JhdGggb2YgaGlzIGNvdW50cnltZW4sIHdobyB3ZXJlIGFzaGFtZWQgaW4gdGhlIHByZXNlbmNlIG9mIHRoZSBBdGhlbmlhbnMsIGFuZCB3aXNoZWQgdG8gYmUgdGhvdWdodCB3cm9uZ2VkIHdpdGggdGhlbSwgdGhhdCB0aGV5IG1pZ2h0IG5vdCBiZSB0aG91Z2h0IHdyb25nZG9lcnMgd2l0aCBTcGhvZHJpYXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2FzIGEgY2VydGFpbiBMYWNlZGFlbW9uaWFuIG5hbWVkIFNwaG9kcmlhcywgb2YgdGhlIHBhcnR5IG9wcG9zZWQgdG8gQWdlc2lsYcO8cywgd2hvIGhhZCBiZWVuIGFwcG9pbnRlZCBoYXJtb3N0IGF0IFRoZXNwaWFlLiBIZSBsYWNrZWQgbmVpdGhlciBib2xkbmVzcyBub3IgYW1iaXRpb24sIGJ1dCBhbHdheXMgYWJvdW5kZWQgaW4gaG9wZXMgcmF0aGVyIHRoYW4gaW4gZ29vZCBqdWRnZW1lbnQuIFRoaXMgbWFuLCBjb3ZldGluZyBhIGdyZWF0IG5hbWUsIGFuZCBjb25zaWRlcmluZyB0aGF0IFBob2ViaWRhcyBoYWQgbWFkZSBoaW1zZWxmIGZhbW91cyBmYXIgYW5kIG5lYXIgYnkgaGlzIGJvbGQgZGVlZCBhdCBUaGViZXMsIHdhcyBwZXJzdWFkZWQgdGhhdCBpdCB3b3VsZCBiZSBhIGZhciBtb3JlIGhvbm91cmFibGUgYW5kIGJyaWxsaWFudCBleHBsb2l0IGZvciBoaW0gdG8gc2VpemUgdGhlIFBlaXJhZXVzIG9uIGhpcyBvd24gYWNjb3VudCBhbmQgcm9iIHRoZSBBdGhlbmlhbnMgb2YgYWNjZXNzIHRvIHRoZSBzZWEsIGF0dGFja2luZyB0aGVtIHVuZXhwZWN0ZWRseSBieSBsYW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIHRvbywgdGhhdCB0aGUgc2NoZW1lIHdhcyBkZXZpc2VkIGJ5IFBlbG9waWRhcyBhbmQgTWVsbywgY2hpZWYgbWFnaXN0cmF0ZXMgYXQgVGhlYmVzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVpciBvYmplY3Qgd2FzIHRvIGVtYnJvaWwgQXRoZW5zIGFuZCBTcGFydGEgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjIwIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4yMCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdi4gNCwgMjAtMjQ8L2JpYmw+KS48L25vdGU+IFRoZXkgcHJpdmlseSBzZW50IG1lbiB0byBoaW0gd2hvIHByZXRlbmRlZCB0byBiZSBTcGFydGFuIHN5bXBhdGhpemVycywgYW5kIHRoZXksIGJ5IHByYWlzaW5nIGFuZCBleGFsdGluZyBTcGhvZHJpYXMgYXMgdGhlIG9ubHkgbWFuIHdvcnRoeSB0byB1bmRlcnRha2Ugc28gZ3JlYXQgYSB0YXNrLCB1cmdlZCBhbmQgaW5jaXRlZCBoaW0gaW50byBhbiBhY3Qgd2hpY2ggd2FzIG5vIGxlc3MgbGF3bGVzcyBhbmQgdW5qdXN0IHRoYW4gdGhlIHNlaXp1cmUgb2YgdGhlIENhZG1laWEsIHRob3VnaCBpdCB3YXMgZXNzYXllZCB3aXRob3V0IGNvdXJhZ2Ugb3IgZ29vZCBmb3J0dW5lLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjIwIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4yMCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdi4gNCwgMjAtMjQ8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHYuIDQsIDIwLTI0PC90cmFuc2xhdGlvbj4="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBmdWxsIGRheWxpZ2h0IG92ZXJ0b29rIGhpbSB3aGlsZSBoZSB3YXMgeWV0IGluIHRoZSBUaHJpYXNpYW4gcGxhaW4sIGFsdGhvdWdoIGhlIGhhZCBob3BlZCB0byBhdHRhY2sgdGhlIFBlaXJhZXVzIGJ5IG5pZ2h0LiBJdCBpcyBzYWlkIGFsc28gdGhhdCBoaXMgc29sZGllcnMgc2F3IGEgbGlnaHQgc3RyZWFtaW5nIGZyb20gY2VydGFpbiBzYW5jdHVhcmllcyBhdCBFbGV1c2lzLCBhbmQgd2VyZSBmaWxsZWQgd2l0aCBzaHVkZGVyaW5nIGZlYXIuIFRoZWlyIGNvbW1hbmRlciBoaW1zZWxmIGxvc3QgYWxsIGhpcyBjb3VyYWdlLCBzaW5jZSBjb25jZWFsbWVudCB3YXMgbm8gbG9uZ2VyIHBvc3NpYmxlLCBhbmQgYWZ0ZXIgcmF2YWdpbmcgdGhlIGNvdW50cnkgYSBsaXR0bGUsIHJldGlyZWQgZGlzZ3JhY2VmdWxseSBhbmQgaW5nbG9yaW91c2x5IHRvIFRoZXNwaWFlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlcmV1cG9uIG1lbiB3ZXJlIHNlbnQgZnJvbSBBdGhlbnMgdG8gU3BhcnRhIHRvIGRlbm91bmNlIFNwaG9kcmlhcy4gVGhleSBmb3VuZCwgaG93ZXZlciwgdGhhdCB0aGUgbWFnaXN0cmF0ZXMgdGhlcmUgaGFkIG5vIG5lZWQgb2YgdGhlaXIgZGVudW5jaWF0aW9uLCBidXQgaGFkIGFscmVhZHkgaW5kaWN0ZWQgU3Bob2RyaWFzIG9uIGEgY2FwaXRhbCBjaGFyZ2UuIFRoaXMgY2hhcmdlIGhlIGRldGVybWluZWQgbm90IHRvIG1lZXQsIGZlYXJpbmcgdGhlIHdyYXRoIG9mIGhpcyBjb3VudHJ5bWVuLCB3aG8gd2VyZSBhc2hhbWVkIGluIHRoZSBwcmVzZW5jZSBvZiB0aGUgQXRoZW5pYW5zLCBhbmQgd2lzaGVkIHRvIGJlIHRob3VnaHQgd3JvbmdlZCB3aXRoIHRoZW0sIHRoYXQgdGhleSBtaWdodCBub3QgYmUgdGhvdWdodCB3cm9uZ2RvZXJzIHdpdGggU3Bob2RyaWFzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgU3Bob2RyaWFzIGhhZCBhIHNvbiwgQ2xlb255bXVzLCB3aG8gd2FzIHN0aWxsIGEgYm95IGFuZCBmYWlyIHRvIGxvb2sgdXBvbiwgYW5kIG9mIHdob20gQXJjaGlkYW11cywgdGhlIHNvbiBvZiBLaW5nIEFnZXNpbGHDvHMsIHdhcyBlbmFtb3VyZWQuIEluIHRoaXMgY3Jpc2lzIEFyY2hpZGFtdXMgbmF0dXJhbGx5IHN5bXBhdGhpemVkIHdpdGggaGlzIGZhdm91cml0ZSBiZWNhdXNlIG9mIHRoZSBwZXJpbCBpbiB3aGljaCBoaXMgZmF0aGVyIHN0b29kLCBidXQgaGUgd2FzIHVuYWJsZSB0byBhaWQgYW5kIGFzc2lzdCBoaW0gb3Blbmx5LCBzaW5jZSBTcGhvZHJpYXMgd2FzIG9uZSBvZiB0aGUgb3Bwb25lbnRzIG9mIEFnZXNpbGHDvHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIENsZW9ueW11cyBjYW1lIHRvIGhpbSBpbiB0ZWFycyBhbmQgYmVnZ2VkIGhpbSB0byBtb2xsaWZ5IEFnZXNpbGHDvHMsIGZyb20gd2hvbSBoZSBhbmQgaGlzIGZhdGhlciBoYWQgbW9zdCB0byBmZWFyLCBmb3IgdGhyZWUgb3IgZm91ciBkYXlzIGhlIHdhcyByZXN0cmFpbmVkIGJ5IGF3ZSBhbmQgZmVhciBmcm9tIHNheWluZyBhbnl0aGluZyB0byBBZ2VzaWxhw7xzIGFzIGhlIGZvbGxvd2VkIGhpbSBhYm91dDsgYnV0IGZpbmFsbHksIHdoZW4gdGhlIHRyaWFsIHdhcyBuZWFyIGF0IGhhbmQsIGhlIHBsdWNrZWQgdXAgY291cmFnZSB0byB0ZWxsIGhpbSB0aGF0IENsZW9ueW11cyBoYWQgYmVnZ2VkIGhpbSB0byBpbnRlcmNlZGUgZm9yIGhpcyBmYXRoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBBZ2VzaWxhw7xzLCBhbHRob3VnaCBoZSBrbmV3IG9mIHRoZSBsb3ZlIG9mIEFyY2hpZGFtdXMsIGhhZCBub3QgcHV0IGEgc3RvcCB0byBpdCwgc2luY2UgQ2xlb255bXVzLCBmcm9tIGhpcyBlYXJseSBib3lob29kLCBoYWQgZ2l2ZW4gc3BlY2lhbCBwcm9taXNlIG9mIGJlY29taW5nIGFuIGVhcm5lc3QgYW5kIHdvcnRoeSBtYW4uIEF0IHRoaXMgdGltZSwgaG93ZXZlciwgaGUgZGlkIG5vdCBwZXJtaXQgaGlzIHNvbiB0byBleHBlY3QgYW55IGFkdmFudGFnZSBvciBraW5kbmVzcyBpbiBhbnN3ZXIgdG8gaGlzIHByYXllcjsgaGUgbWVyZWx5IHNhaWQsIGFzIGhlIHdlbnQgYXdheSwgdGhhdCBoZSB3b3VsZCBjb25zaWRlciB3aGF0IHdhcyB0aGUgaG9ub3VyYWJsZSBhbmQgZml0dGluZyBjb3Vyc2UgaW4gdGhlIG1hdHRlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXJjaGlkYW11cyB3YXMgdGhlcmVmb3JlIG1vcnRpZmllZCwgYW5kIGNlYXNlZCB0byB2aXNpdCBDbGVvbnltdXMsIGFsdGhvdWdoIGJlZm9yZSB0aGlzIGhlIGhhZCBkb25lIHNvIG1hbnkgdGltZXMgYSBkYXkuIEFzIGEgY29uc2VxdWVuY2UsIHRoZSBmcmllbmRzIG9mIFNwaG9kcmlhcyBhbHNvIHdlcmUgbW9yZSBpbiBkZXNwYWlyIG9mIGhpcyBjYXNlLCB1bnRpbCBFdHltb2NsZXMsIG9uZSBvZiB0aGUgZnJpZW5kcyBvZiBBZ2VzaWxhw7xzLCBjb25mZXJyZWQgd2l0aCB0aGVtIGFuZCBkaXNjbG9zZWQgdGhlIG1pbmQgb2YgdGhlIGtpbmcsIG5hbWVseSwgdGhhdCBoZSBibGFtZWQgdG8gdGhlIHV0bW9zdCB3aGF0IFNwaG9kcmlhcyBoYWQgZG9uZSwgYnV0IHlldCB0aG91Z2h0IGhpbSBhIGJyYXZlIG1hbiwgYW5kIHNhdyB0aGF0IHRoZSBjaXR5IG5lZWRlZCBqdXN0IHN1Y2ggc29sZGllcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHdhcyB0aGUgd2F5IGluIHdoaWNoIEFnZXNpbGHDvHMgYWx3YXlzIHNwb2tlIGFib3V0IHRoZSB0cmlhbCwgaW4gaGlzIGRlc2lyZSB0byBncmF0aWZ5IGhpcyBzb24sIHNvIHRoYXQgQ2xlb255bXVzIHdhcyBhdCBvbmNlIGF3YXJlIG9mIHRoZSB6ZWFsb3VzIGVmZm9ydHMgb2YgQXJjaGlkYW11cyBpbiBoaXMgYmVoYWxmLCBhbmQgdGhlIGZyaWVuZHMgb2YgU3Bob2RyaWFzIGhhZCBjb3VyYWdlIGF0IGxhc3QgdG8gY29tZSB0byBoaXMgaGVscC4gSXQgaXMgYSBmYWN0IGFsc28gdGhhdCBBZ2VzaWxhw7xzIHdhcyBleGNlc3NpdmVseSBmb25kIG9mIGhpcyBjaGlsZHJlbiwgYW5kIGEgc3RvcnkgaXMgdG9sZCBvZiBoaXMgam9pbmluZyBpbiB0aGVpciBjaGlsZGlzaCBwbGF5LiBPbmNlLCB3aGVuIHRoZXkgd2VyZSB2ZXJ5IHNtYWxsLCBoZSBiZXN0cm9kZSBhIHN0aWNrLCBhbmQgd2FzIHBsYXlpbmcgaG9yc2Ugd2l0aCB0aGVtIGluIHRoZSBob3VzZSwgYW5kIHdoZW4gaGUgd2FzIHNwaWVkIGRvaW5nIHRoaXMgYnkgb25lIG9mIGhpcyBmcmllbmRzLCBoZSBlbnRyZWF0ZWQgaGltIG5vdCB0byB0ZWxsIGFueSBvbmUsIHVudGlsIGhlIGhpbXNlbGYgc2hvdWxkIGJlIGEgZmF0aGVyIG9mIGNoaWxkcmVuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IFNwaG9kcmlhcyBoYWQgYSBzb24sIENsZW9ueW11cywgd2hvIHdhcyBzdGlsbCBhIGJveSBhbmQgZmFpciB0byBsb29rIHVwb24sIGFuZCBvZiB3aG9tIEFyY2hpZGFtdXMsIHRoZSBzb24gb2YgS2luZyBBZ2VzaWxhw7xzLCB3YXMgZW5hbW91cmVkLiBJbiB0aGlzIGNyaXNpcyBBcmNoaWRhbXVzIG5hdHVyYWxseSBzeW1wYXRoaXplZCB3aXRoIGhpcyBmYXZvdXJpdGUgYmVjYXVzZSBvZiB0aGUgcGVyaWwgaW4gd2hpY2ggaGlzIGZhdGhlciBzdG9vZCwgYnV0IGhlIHdhcyB1bmFibGUgdG8gYWlkIGFuZCBhc3Npc3QgaGltIG9wZW5seSwgc2luY2UgU3Bob2RyaWFzIHdhcyBvbmUgb2YgdGhlIG9wcG9uZW50cyBvZiBBZ2VzaWxhw7xzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIENsZW9ueW11cyBjYW1lIHRvIGhpbSBpbiB0ZWFycyBhbmQgYmVnZ2VkIGhpbSB0byBtb2xsaWZ5IEFnZXNpbGHDvHMsIGZyb20gd2hvbSBoZSBhbmQgaGlzIGZhdGhlciBoYWQgbW9zdCB0byBmZWFyLCBmb3IgdGhyZWUgb3IgZm91ciBkYXlzIGhlIHdhcyByZXN0cmFpbmVkIGJ5IGF3ZSBhbmQgZmVhciBmcm9tIHNheWluZyBhbnl0aGluZyB0byBBZ2VzaWxhw7xzIGFzIGhlIGZvbGxvd2VkIGhpbSBhYm91dDsgYnV0IGZpbmFsbHksIHdoZW4gdGhlIHRyaWFsIHdhcyBuZWFyIGF0IGhhbmQsIGhlIHBsdWNrZWQgdXAgY291cmFnZSB0byB0ZWxsIGhpbSB0aGF0IENsZW9ueW11cyBoYWQgYmVnZ2VkIGhpbSB0byBpbnRlcmNlZGUgZm9yIGhpcyBmYXRoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBBZ2VzaWxhw7xzLCBhbHRob3VnaCBoZSBrbmV3IG9mIHRoZSBsb3ZlIG9mIEFyY2hpZGFtdXMsIGhhZCBub3QgcHV0IGEgc3RvcCB0byBpdCwgc2luY2UgQ2xlb255bXVzLCBmcm9tIGhpcyBlYXJseSBib3lob29kLCBoYWQgZ2l2ZW4gc3BlY2lhbCBwcm9taXNlIG9mIGJlY29taW5nIGFuIGVhcm5lc3QgYW5kIHdvcnRoeSBtYW4uIEF0IHRoaXMgdGltZSwgaG93ZXZlciwgaGUgZGlkIG5vdCBwZXJtaXQgaGlzIHNvbiB0byBleHBlY3QgYW55IGFkdmFudGFnZSBvciBraW5kbmVzcyBpbiBhbnN3ZXIgdG8gaGlzIHByYXllcjsgaGUgbWVyZWx5IHNhaWQsIGFzIGhlIHdlbnQgYXdheSwgdGhhdCBoZSB3b3VsZCBjb25zaWRlciB3aGF0IHdhcyB0aGUgaG9ub3VyYWJsZSBhbmQgZml0dGluZyBjb3Vyc2UgaW4gdGhlIG1hdHRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFyY2hpZGFtdXMgd2FzIHRoZXJlZm9yZSBtb3J0aWZpZWQsIGFuZCBjZWFzZWQgdG8gdmlzaXQgQ2xlb255bXVzLCBhbHRob3VnaCBiZWZvcmUgdGhpcyBoZSBoYWQgZG9uZSBzbyBtYW55IHRpbWVzIGEgZGF5LiBBcyBhIGNvbnNlcXVlbmNlLCB0aGUgZnJpZW5kcyBvZiBTcGhvZHJpYXMgYWxzbyB3ZXJlIG1vcmUgaW4gZGVzcGFpciBvZiBoaXMgY2FzZSwgdW50aWwgRXR5bW9jbGVzLCBvbmUgb2YgdGhlIGZyaWVuZHMgb2YgQWdlc2lsYcO8cywgY29uZmVycmVkIHdpdGggdGhlbSBhbmQgZGlzY2xvc2VkIHRoZSBtaW5kIG9mIHRoZSBraW5nLCBuYW1lbHksIHRoYXQgaGUgYmxhbWVkIHRvIHRoZSB1dG1vc3Qgd2hhdCBTcGhvZHJpYXMgaGFkIGRvbmUsIGJ1dCB5ZXQgdGhvdWdodCBoaW0gYSBicmF2ZSBtYW4sIGFuZCBzYXcgdGhhdCB0aGUgY2l0eSBuZWVkZWQganVzdCBzdWNoIHNvbGRpZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHdhcyB0aGUgd2F5IGluIHdoaWNoIEFnZXNpbGHDvHMgYWx3YXlzIHNwb2tlIGFib3V0IHRoZSB0cmlhbCwgaW4gaGlzIGRlc2lyZSB0byBncmF0aWZ5IGhpcyBzb24sIHNvIHRoYXQgQ2xlb255bXVzIHdhcyBhdCBvbmNlIGF3YXJlIG9mIHRoZSB6ZWFsb3VzIGVmZm9ydHMgb2YgQXJjaGlkYW11cyBpbiBoaXMgYmVoYWxmLCBhbmQgdGhlIGZyaWVuZHMgb2YgU3Bob2RyaWFzIGhhZCBjb3VyYWdlIGF0IGxhc3QgdG8gY29tZSB0byBoaXMgaGVscC4gSXQgaXMgYSBmYWN0IGFsc28gdGhhdCBBZ2VzaWxhw7xzIHdhcyBleGNlc3NpdmVseSBmb25kIG9mIGhpcyBjaGlsZHJlbiwgYW5kIGEgc3RvcnkgaXMgdG9sZCBvZiBoaXMgam9pbmluZyBpbiB0aGVpciBjaGlsZGlzaCBwbGF5LiBPbmNlLCB3aGVuIHRoZXkgd2VyZSB2ZXJ5IHNtYWxsLCBoZSBiZXN0cm9kZSBhIHN0aWNrLCBhbmQgd2FzIHBsYXlpbmcgaG9yc2Ugd2l0aCB0aGVtIGluIHRoZSBob3VzZSwgYW5kIHdoZW4gaGUgd2FzIHNwaWVkIGRvaW5nIHRoaXMgYnkgb25lIG9mIGhpcyBmcmllbmRzLCBoZSBlbnRyZWF0ZWQgaGltIG5vdCB0byB0ZWxsIGFueSBvbmUsIHVudGlsIGhlIGhpbXNlbGYgc2hvdWxkIGJlIGEgZmF0aGVyIG9mIGNoaWxkcmVuLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWZ0ZXIgU3Bob2RyaWFzIHdhcyBhY3F1aXR0ZWQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjI0IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMjQiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2LiA0LCAyNC0zNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHRoZSBBdGhlbmlhbnMsIG9uIGxlYXJuaW5nIG9mIGl0LCB3ZXJlIGluY2xpbmVkIHRvIGdvIHRvIHdhciwgQWdlc2lsYcO8cyB3YXMgdmVyeSBoYXJzaGx5IGNyaXRpY2l6ZWQuIEl0IHdhcyB0aG91Z2h0IHRoYXQsIHRvIGdyYXRpZnkgYW4gYWJzdXJkIGFuZCBjaGlsZGlzaCBkZXNpcmUsIGhlIGhhZCBvcHBvc2VkIHRoZSBjb3Vyc2Ugb2YganVzdGljZSBpbiBhIHRyaWFsLCBhbmQgbWFkZSB0aGUgY2l0eSBhY2Nlc3NvcnkgdG8gZ3JlYXQgY3JpbWVzIGFnYWluc3QgdGhlIEdyZWVrcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcywgd2hlbiBoZSBzYXcgdGhhdCBoaXMgY29sbGVhZ3VlIENsZW9tYnJvdHVzIHdhcyBsaXR0bGUgaW5jbGluZWQgdG8gbWFrZSB3YXIgdXBvbiB0aGUgVGhlYmFucywgaGUgd2FpdmVkIHRoZSBleGVtcHRpb24gYnkgbGF3IHdoaWNoIGhlIGhhZCBmb3JtZXJseSBjbGFpbWVkIGluIHRoZSBtYXR0ZXIgb2YgdGhlIGV4cGVkaXRpb24sIGFuZCBwcmVzZW50bHkgbGVkIGFuIGluY3Vyc2lvbiBpbnRvIEJvZW90aWEgaGltc2VsZiwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBYZW5vcGhvbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjM1IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMzUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SGVsbC48dGl0bGU+IHYuIDQsIDM1PC90aXRsZT4KICAgICAgICAgICAgICAgICAgPC90aXRsZT4KICAgICAgICAgICAgICAgPC9iaWJsPiksIGhlIHdhcyBhc2tlZCB0byBkbyBzbyBieSB0aGUgTGFjZWRhZW1vbmlhbnMsIHdobyBwcmVmZXJyZWQgaGltIHRvIENsZW9tYnJvdHVzIGFzIGEgbGVhZGVyLiBUaGlzIHdhcyBpbiAzNzggQi5DLjwvbm90ZT4gd2hlcmUgaGUgaW5mbGljdGVkIGRhbWFnZSB1cG9uIHRoZSBUaGViYW5zLCBhbmQgaW4gaGlzIHR1cm4gbWV0IHdpdGggcmV2ZXJzZXMsIHNvIHRoYXQgb25lIGRheSB3aGVuIGhlIHdhcyB3b3VuZGVkLCBBbnRhbGNpZGFzIHNhaWQgdG8gaGltOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluZGVlZCwgdGhpcyBpcyBhIGZpbmUgdHVpdGlvbi1mZWUgd2hpY2ggdGhvdSBhcnQgZ2V0dGluZyBmcm9tIHRoZSBUaGViYW5zLCBmb3IgdGVhY2hpbmcgdGhlbSBob3cgdG8gZmlnaHQgd2hlbiB0aGV5IGRpZCBub3Qgd2lzaCB0byBkbyBpdCwgYW5kIGRpZCBub3QgZXZlbiBrbm93IGhvdy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBUaGViYW5zIGFyZSBzYWlkIHRvIGhhdmUgYmVlbiByZWFsbHkgbW9yZSB3YXJsaWtlIGF0IHRoaXMgdGltZSB0aGFuIGV2ZXIgYmVmb3JlLCBvd2luZyB0byB0aGUgbWFueSBleHBlZGl0aW9ucyB3aGljaCB0aGUgTGFjZWRhZW1vbmlhbnMgbWFkZSBhZ2FpbnN0IHRoZW0sIGJ5IHdoaWNoIHRoZXkgd2VyZSB2aXJ0dWFsbHkgc2Nob29sZWQgaW4gYXJtcy4gQW5kIEx5Y3VyZ3VzIG9mIG9sZCwgaW4gb25lIG9mIGhpcyB0aHJlZSBzby1jYWxsZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5yaGV0cmFzLDwvcT4gZm9yYmFkZSBoaXMgcGVvcGxlIHRvIG1ha2UgZnJlcXVlbnQgZXhwZWRpdGlvbnMgYWdhaW5zdCB0aGUgc2FtZSBmb2VzLCBpbiBvcmRlciB0aGF0IHRob3NlIGZvZXMgbWlnaHQgbm90IGxlYXJuIGhvdyB0byBtYWtlIHdhci4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTMuNiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTMuNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MeWN1cmd1czwvdGl0bGU+LCB4aWlpLiA2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIFNwaG9kcmlhcyB3YXMgYWNxdWl0dGVkLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMjQiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjI0IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2LiA0LCAyNC0zNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHRoZSBBdGhlbmlhbnMsIG9uIGxlYXJuaW5nIG9mIGl0LCB3ZXJlIGluY2xpbmVkIHRvIGdvIHRvIHdhciwgQWdlc2lsYcO8cyB3YXMgdmVyeSBoYXJzaGx5IGNyaXRpY2l6ZWQuIEl0IHdhcyB0aG91Z2h0IHRoYXQsIHRvIGdyYXRpZnkgYW4gYWJzdXJkIGFuZCBjaGlsZGlzaCBkZXNpcmUsIGhlIGhhZCBvcHBvc2VkIHRoZSBjb3Vyc2Ugb2YganVzdGljZSBpbiBhIHRyaWFsLCBhbmQgbWFkZSB0aGUgY2l0eSBhY2Nlc3NvcnkgdG8gZ3JlYXQgY3JpbWVzIGFnYWluc3QgdGhlIEdyZWVrcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4yNCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMjQiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHYuIDQsIDI0LTM0LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2LiA0LCAyNC0zNC48L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMsIHdoZW4gaGUgc2F3IHRoYXQgaGlzIGNvbGxlYWd1ZSBDbGVvbWJyb3R1cyB3YXMgbGl0dGxlIGluY2xpbmVkIHRvIG1ha2Ugd2FyIHVwb24gdGhlIFRoZWJhbnMsIGhlIHdhaXZlZCB0aGUgZXhlbXB0aW9uIGJ5IGxhdyB3aGljaCBoZSBoYWQgZm9ybWVybHkgY2xhaW1lZCBpbiB0aGUgbWF0dGVyIG9mIHRoZSBleHBlZGl0aW9uLCBhbmQgcHJlc2VudGx5IGxlZCBhbiBpbmN1cnNpb24gaW50byBCb2VvdGlhIGhpbXNlbGYsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBYZW5vcGhvbiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMzUiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjM1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj4gdi4gNCwgMzU8L3RpdGxlPgogICAgICAgICAgICAgICAgICA8L3RpdGxlPgogICAgICAgICAgICAgICA8L2JpYmw+KSwgaGUgd2FzIGFza2VkIHRvIGRvIHNvIGJ5IHRoZSBMYWNlZGFlbW9uaWFucywgd2hvIHByZWZlcnJlZCBoaW0gdG8gQ2xlb21icm90dXMgYXMgYSBsZWFkZXIuIFRoaXMgd2FzIGluIDM3OCBCLkMuPC9ub3RlPiB3aGVyZSBoZSBpbmZsaWN0ZWQgZGFtYWdlIHVwb24gdGhlIFRoZWJhbnMsIGFuZCBpbiBoaXMgdHVybiBtZXQgd2l0aCByZXZlcnNlcywgc28gdGhhdCBvbmUgZGF5IHdoZW4gaGUgd2FzIHdvdW5kZWQsIEFudGFsY2lkYXMgc2FpZCB0byBoaW06IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMzUiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjM1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj4gdi4gNCwgMzU8L3RpdGxlPgogICAgICAgICAgICAgICAgICA8L3RpdGxlPgogICAgICAgICAgICAgICA8L2JpYmw+KSwgaGUgd2FzIGFza2VkIHRvIGRvIHNvIGJ5IHRoZSBMYWNlZGFlbW9uaWFucywgd2hvIHByZWZlcnJlZCBoaW0gdG8gQ2xlb21icm90dXMgYXMgYSBsZWFkZXIuIFRoaXMgd2FzIGluIDM3OCBCLkMuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj4gdi4gNCwgMzU8L3RpdGxlPgogICAgICAgICAgICAgICAgICA8L3RpdGxlPgogICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj4gdi4gNCwgMzU8L3RpdGxlPgogICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluZGVlZCwgdGhpcyBpcyBhIGZpbmUgdHVpdGlvbi1mZWUgd2hpY2ggdGhvdSBhcnQgZ2V0dGluZyBmcm9tIHRoZSBUaGViYW5zLCBmb3IgdGVhY2hpbmcgdGhlbSBob3cgdG8gZmlnaHQgd2hlbiB0aGV5IGRpZCBub3Qgd2lzaCB0byBkbyBpdCwgYW5kIGRpZCBub3QgZXZlbiBrbm93IGhvdy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgVGhlYmFucyBhcmUgc2FpZCB0byBoYXZlIGJlZW4gcmVhbGx5IG1vcmUgd2FybGlrZSBhdCB0aGlzIHRpbWUgdGhhbiBldmVyIGJlZm9yZSwgb3dpbmcgdG8gdGhlIG1hbnkgZXhwZWRpdGlvbnMgd2hpY2ggdGhlIExhY2VkYWVtb25pYW5zIG1hZGUgYWdhaW5zdCB0aGVtLCBieSB3aGljaCB0aGV5IHdlcmUgdmlydHVhbGx5IHNjaG9vbGVkIGluIGFybXMuIEFuZCBMeWN1cmd1cyBvZiBvbGQsIGluIG9uZSBvZiBoaXMgdGhyZWUgc28tY2FsbGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5yaGV0cmFzLDwvcT4gZm9yYmFkZSBoaXMgcGVvcGxlIHRvIG1ha2UgZnJlcXVlbnQgZXhwZWRpdGlvbnMgYWdhaW5zdCB0aGUgc2FtZSBmb2VzLCBpbiBvcmRlciB0aGF0IHRob3NlIGZvZXMgbWlnaHQgbm90IGxlYXJuIGhvdyB0byBtYWtlIHdhci4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDEzLjYiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTMuNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5Y3VyZ3VzPC90aXRsZT4sIHhpaWkuIDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTMuNiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxMy42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgeGlpaS4gNi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5Y3VyZ3VzPC90aXRsZT4sIHhpaWkuIDYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3Jlb3ZlciwgdGhlIGFsbGllcyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBvZmZlbmRlZCBhdCBBZ2VzaWxhw7xzLCBiZWNhdXNlLCBhcyB0aGV5IHNhaWQsIGl0IHdhcyBub3QgdXBvbiBhbnkgcHVibGljIGdyb3VuZCBvZiBjb21wbGFpbnQsIGJ1dCBieSByZWFzb24gb2Ygc29tZSBwYXNzaW9uYXRlIHJlc2VudG1lbnQgb2YgaGlzIG93biwgdGhhdCBoZSBzb3VnaHQgdG8gZGVzdHJveSB0aGUgVGhlYmFucy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhleSBzYWlkIHRoZXkgaGFkIG5vIHdpc2ggdG8gYmUgZHJhZ2dlZCBoaXRoZXIgYW5kIHRoaXRoZXIgdG8gZGVzdHJ1Y3Rpb24gZXZlcnkgeWVhciwgdGhleSB0aGVtc2VsdmVzIHNvIG1hbnksIGFuZCB0aGUgTGFjZWRhZW1vbmlhbnMsIHdpdGggd2hvbSB0aGV5IGZvbGxvd2VkLCBzbyBmZXcuIEl0IHdhcyBhdCB0aGlzIHRpbWUsIHdlIGFyZSB0b2xkLCB0aGF0IEFnZXNpbGHDvHMsIHdpc2hpbmcgdG8gcmVmdXRlIHRoZWlyIGFyZ3VtZW50IGZyb20gbnVtYmVycywgZGV2aXNlZCB0aGUgZm9sbG93aW5nIHNjaGVtZS4gSGUgb3JkZXJlZCBhbGwgdGhlIGFsbGllcyB0byBzaXQgZG93biBieSB0aGVtc2VsdmVzIHByb21pc2N1b3VzbHksIGFuZCB0aGUgTGFjZWRhZW1vbmlhbnMgYXBhcnQgYnkgdGhlbXNlbHZlcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoaXMgaGVyYWxkIGNhbGxlZCB1cG9uIHRoZSBwb3R0ZXJzIHRvIHN0YW5kIHVwIGZpcnN0LCBhbmQgYWZ0ZXIgdGhlbSB0aGUgc21pdGhzLCBuZXh0LCB0aGUgY2FycGVudGVycyBpbiB0aGVpciB0dXJuLCBhbmQgdGhlIGJ1aWxkZXJzLCBhbmQgc28gb24gdGhyb3VnaCBhbGwgdGhlIGhhbmRpY3JhZnRzLiBJbiByZXNwb25zZSwgYWxtb3N0IGFsbCB0aGUgYWxsaWVzIHJvc2UgdXAsIGJ1dCBub3QgYSBtYW4gb2YgdGhlIExhY2VkYWVtb25pYW5zOyBmb3IgdGhleSB3ZXJlIGZvcmJpZGRlbiB0byBsZWFybiBvciBwcmFjdGlzZSBhIG1hbnVhbCBhcnQuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDI0LjIiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDI0LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THljdXJndXM8L3RpdGxlPiwgeHhpdi4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlbiBBZ2VzaWxhw7xzIHNhaWQgd2l0aCBhIGxhdWdoOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdSBzZWUsIE8gbWVuLCBob3cgbWFueSBtb3JlIHNvbGRpZXJzIHRoYW4geW91IHdlIGFyZSBzZW5kaW5nIG91dC48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGV5IHNhaWQgdGhleSBoYWQgbm8gd2lzaCB0byBiZSBkcmFnZ2VkIGhpdGhlciBhbmQgdGhpdGhlciB0byBkZXN0cnVjdGlvbiBldmVyeSB5ZWFyLCB0aGV5IHRoZW1zZWx2ZXMgc28gbWFueSwgYW5kIHRoZSBMYWNlZGFlbW9uaWFucywgd2l0aCB3aG9tIHRoZXkgZm9sbG93ZWQsIHNvIGZldy4gSXQgd2FzIGF0IHRoaXMgdGltZSwgd2UgYXJlIHRvbGQsIHRoYXQgQWdlc2lsYcO8cywgd2lzaGluZyB0byByZWZ1dGUgdGhlaXIgYXJndW1lbnQgZnJvbSBudW1iZXJzLCBkZXZpc2VkIHRoZSBmb2xsb3dpbmcgc2NoZW1lLiBIZSBvcmRlcmVkIGFsbCB0aGUgYWxsaWVzIHRvIHNpdCBkb3duIGJ5IHRoZW1zZWx2ZXMgcHJvbWlzY3VvdXNseSwgYW5kIHRoZSBMYWNlZGFlbW9uaWFucyBhcGFydCBieSB0aGVtc2VsdmVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGlzIGhlcmFsZCBjYWxsZWQgdXBvbiB0aGUgcG90dGVycyB0byBzdGFuZCB1cCBmaXJzdCwgYW5kIGFmdGVyIHRoZW0gdGhlIHNtaXRocywgbmV4dCwgdGhlIGNhcnBlbnRlcnMgaW4gdGhlaXIgdHVybiwgYW5kIHRoZSBidWlsZGVycywgYW5kIHNvIG9uIHRocm91Z2ggYWxsIHRoZSBoYW5kaWNyYWZ0cy4gSW4gcmVzcG9uc2UsIGFsbW9zdCBhbGwgdGhlIGFsbGllcyByb3NlIHVwLCBidXQgbm90IGEgbWFuIG9mIHRoZSBMYWNlZGFlbW9uaWFuczsgZm9yIHRoZXkgd2VyZSBmb3JiaWRkZW4gdG8gbGVhcm4gb3IgcHJhY3Rpc2UgYSBtYW51YWwgYXJ0LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMjQuMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAyNC4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgeHhpdi4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlbiBBZ2VzaWxhw7xzIHNhaWQgd2l0aCBhIGxhdWdoOiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMjQuMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAyNC4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgeHhpdi4gMi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5Y3VyZ3VzPC90aXRsZT4sIHh4aXYuIDIuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3Ugc2VlLCBPIG1lbiwgaG93IG1hbnkgbW9yZSBzb2xkaWVycyB0aGFuIHlvdSB3ZSBhcmUgc2VuZGluZyBvdXQuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gTWVnYXJhLCB3aGVuIGhlIHdhcyBsZWFkaW5nIGhpcyBhcm15IGJhY2sgZnJvbSBUaGViZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gcm9tIGEgc2Vjb25kIGluY3Vyc2lvbiBpbnRvIEJvZW90aWEsIG1hZGUgaW4gMzc3IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC40NyIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjQ3IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdi4gNCwgNDctNTU8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuNTgiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC41OCIgdmFsaWQ9InllcyI+NTg8L2JpYmw+KS48L25vdGU+IGFzIGhlIHdhcyBnb2luZyB1cCB0byB0aGUgc2VuYXRlLWhvdXNlIGluIHRoZSBhY3JvcG9saXMsIGhlIHdhcyBzZWl6ZWQgd2l0aCBhIGNyYW1wIGFuZCB2aW9sZW50IHBhaW4gaW4gaGlzIHNvdW5kIGxlZywgd2hpY2ggdGhlbiBzd2VsbGVkIHVwLCBhcHBlYXJlZCB0byBiZSBjb25nZXN0ZWQsIGFuZCBzaG93ZWQgc2lnbnMgb2YgZXhjZXNzaXZlIGluZmxhbW1hdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXMgc29vbiBhcyBhIGNlcnRhaW4gU3lyYWN1c2FuIHBoeXNpY2lhbiBoYWQgb3BlbmVkIGEgdmVpbiBiZWxvdyB0aGUgYW5rbGUsIHRoZSBwYWlucyByZWxheGVkLCBidXQgbXVjaCBibG9vZCBmbG93ZWQgYW5kIGNvdWxkIG5vdCBiZSBjaGVja2VkLCBzbyB0aGF0IEFnZXNpbGHDvHMgd2FzIHZlcnkgZmFpbnQgZnJvbSBpdHMgbG9zcywgYW5kIGluIGRpcmUgcGVyaWwgb2YgaGlzIGxpZmUuIEF0IGxhc3QsIGhvd2V2ZXIsIHRoZSBmbG93IG9mIGJsb29kIHdhcyBzdG9wcGVkLCBhbmQgQWdlc2lsYcO8cyB3YXMgY2FycmllZCB0byBTcGFydGEsIHdoZXJlIGhlIHJlbWFpbmVkIGZvciBhIGxvbmcgdGltZSBpbiBhIHdlYWsgY29uZGl0aW9uIGFuZCB1bmFibGUgdG8gdGFrZSB0aGUgZmllbGQuIAoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIE1lZ2FyYSwgd2hlbiBoZSB3YXMgbGVhZGluZyBoaXMgYXJteSBiYWNrIGZyb20gVGhlYmVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gcm9tIGEgc2Vjb25kIGluY3Vyc2lvbiBpbnRvIEJvZW90aWEsIG1hZGUgaW4gMzc3IEIuQy4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjQ3IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC40NyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdi4gNCwgNDctNTU8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC41OCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuNTgiIHZhbGlkPSJ5ZXMiPjU4PC9iaWJsPikuPC9ub3RlPiBhcyBoZSB3YXMgZ29pbmcgdXAgdG8gdGhlIHNlbmF0ZS1ob3VzZSBpbiB0aGUgYWNyb3BvbGlzLCBoZSB3YXMgc2VpemVkIHdpdGggYSBjcmFtcCBhbmQgdmlvbGVudCBwYWluIGluIGhpcyBzb3VuZCBsZWcsIHdoaWNoIHRoZW4gc3dlbGxlZCB1cCwgYXBwZWFyZWQgdG8gYmUgY29uZ2VzdGVkLCBhbmQgc2hvd2VkIHNpZ25zIG9mIGV4Y2Vzc2l2ZSBpbmZsYW1tYXRpb24uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuNDciIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjQ3IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2LiA0LCA0Ny01NTwvYmlibD47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdi4gNCwgNDctNTU8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC41OCIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuNTgiIHZhbGlkPSJ5ZXMiPjU4PC9iaWJsPikuPC90cmFuc2xhdGlvbj4="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgYSBjZXJ0YWluIFN5cmFjdXNhbiBwaHlzaWNpYW4gaGFkIG9wZW5lZCBhIHZlaW4gYmVsb3cgdGhlIGFua2xlLCB0aGUgcGFpbnMgcmVsYXhlZCwgYnV0IG11Y2ggYmxvb2QgZmxvd2VkIGFuZCBjb3VsZCBub3QgYmUgY2hlY2tlZCwgc28gdGhhdCBBZ2VzaWxhw7xzIHdhcyB2ZXJ5IGZhaW50IGZyb20gaXRzIGxvc3MsIGFuZCBpbiBkaXJlIHBlcmlsIG9mIGhpcyBsaWZlLiBBdCBsYXN0LCBob3dldmVyLCB0aGUgZmxvdyBvZiBibG9vZCB3YXMgc3RvcHBlZCwgYW5kIEFnZXNpbGHDvHMgd2FzIGNhcnJpZWQgdG8gU3BhcnRhLCB3aGVyZSBoZSByZW1haW5lZCBmb3IgYSBsb25nIHRpbWUgaW4gYSB3ZWFrIGNvbmRpdGlvbiBhbmQgdW5hYmxlIHRvIHRha2UgdGhlIGZpZWxkLiAKCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+RHVyaW5nIHRoaXMgdGltZSB0aGUgU3BhcnRhbnMgbWV0IHdpdGggbWFueSByZXZlcnNlcyBib3RoIGJ5IGxhbmQgYW5kIHNlYSwgdGhlIGdyZWF0ZXN0IG9mIHdoaWNoIHdhcyBhdCBUZWd5cmEsIHdoZXJlIGZvciB0aGUgZmlyc3QgdGltZSB0aGV5IHdlcmUgb3ZlcnBvd2VyZWQgYnkgdGhlIFRoZWJhbnMgaW4gYSBwaXRjaGVkIGJhdHRsZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgYmF0dGxlLCBmb3VnaHQgaW4gMzc1IEIuQy4sIGlzIG5vdCBtZW50aW9uZWQgYnkgWGVub3Bob24sIGJ1dCBpcyBkZXNjcmliZWQgYnkgUGx1dGFyY2ggaW4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDE2LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDE2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UGVsb3BpZGFzPC90aXRsZT4sIGNoYXB0ZXJzIHh2aS48L2JpYmw+IGFuZCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAxNy4xIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAxNy4xIiB2YWxpZD0ieWVzIj54dmlpLjwvYmlibD4sIGRvdWJ0bGVzcyBvbiB0aGUgYXV0aG9yaXR5IG9mIEVwaG9ydXMgKGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuODEuMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1LjgxLjIiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4di4gODEsIDIpPC9iaWJsPi48L25vdGU+IFRoZXJlIHdhcywgYWNjb3JkaW5nbHksIGEgZ2VuZXJhbCBzZW50aW1lbnQgaW4gZmF2b3VyIG9mIGEgZ2VuZXJhbCBwZWFjZSwgYW5kIGFtYmFzc2Fkb3JzIGZyb20gYWxsIEhlbGxhcyBjYW1lIHRvZ2V0aGVyIGF0IFNwYXJ0YSB0byBzZXR0bGUgaXRzIHRlcm1zLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzcxIEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuMy4zLiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi4zLjMuIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmkuIDMsIDMtMjA8L2JpYmw+KS48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+T25lIG9mIHRoZXNlIGFtYmFzc2Fkb3JzIHdhcyBFcGFtaW5vbmRhcywgYSBtYW4gb2YgcmVwdXRlIGZvciBjdWx0dXJlIGFuZCBwaGlsb3NvcGh5LCBhbHRob3VnaCBoZSBoYWQgbm90IHlldCBnaXZlbiBwcm9vZiBvZiBjYXBhY2l0eSBhcyBhIGdlbmVyYWwuIFRoaXMgbWFuLCBzZWVpbmcgdGhlIHJlc3QgYWxsIGNyaW5naW5nIGJlZm9yZSBBZ2VzaWxhw7xzLCBhbG9uZSBoYWQgdGhlIGNvdXJhZ2Ugb2YgaGlzIGNvbnZpY3Rpb25zLCBhbmQgbWFkZSBhIHNwZWVjaCwgbm90IGluIGJlaGFsZiBvZiBUaGViZXMsIGhpcyBuYXRpdmUgY2l0eSwgYnV0IG9mIGFsbCBHcmVlY2UgaW4gY29tbW9uLCBkZWNsYXJpbmcgdGhhdCB3YXIgbWFkZSBTcGFydGEgZ3JlYXQgYXQgdGhlIGV4cGVuc2Ugb2YgdGhlIHN1ZmZlcmluZ3Mgb2YgYWxsIHRoZSBvdGhlciBzdGF0ZXMsIGFuZCB1cmdpbmcgdGhhdCBwZWFjZSBiZSBtYWRlIG9uIHRlcm1zIG9mIGVxdWFsaXR5IGFuZCBqdXN0aWNlLCBmb3IgaXQgd291bGQgZW5kdXJlIG9ubHkgd2hlbiBhbGwgcGFydGllcyB0byBpdCB3ZXJlIG1hZGUgZXF1YWwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkR1cmluZyB0aGlzIHRpbWUgdGhlIFNwYXJ0YW5zIG1ldCB3aXRoIG1hbnkgcmV2ZXJzZXMgYm90aCBieSBsYW5kIGFuZCBzZWEsIHRoZSBncmVhdGVzdCBvZiB3aGljaCB3YXMgYXQgVGVneXJhLCB3aGVyZSBmb3IgdGhlIGZpcnN0IHRpbWUgdGhleSB3ZXJlIG92ZXJwb3dlcmVkIGJ5IHRoZSBUaGViYW5zIGluIGEgcGl0Y2hlZCBiYXR0bGUuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgYmF0dGxlLCBmb3VnaHQgaW4gMzc1IEIuQy4sIGlzIG5vdCBtZW50aW9uZWQgYnkgWGVub3Bob24sIGJ1dCBpcyBkZXNjcmliZWQgYnkgUGx1dGFyY2ggaW4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMTYuMSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAxNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzPC90aXRsZT4sIGNoYXB0ZXJzIHh2aS48L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDE3LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMTcuMSIgdmFsaWQ9InllcyI+eHZpaS48L2JpYmw+LCBkb3VidGxlc3Mgb24gdGhlIGF1dGhvcml0eSBvZiBFcGhvcnVzIChjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuODEuMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuODEuMiIgdmFsaWQ9InllcyI+RGlvZG9ydXMsIHh2LiA4MSwgMik8L2JpYmw+Ljwvbm90ZT4gVGhlcmUgd2FzLCBhY2NvcmRpbmdseSwgYSBnZW5lcmFsIHNlbnRpbWVudCBpbiBmYXZvdXIgb2YgYSBnZW5lcmFsIHBlYWNlLCBhbmQgYW1iYXNzYWRvcnMgZnJvbSBhbGwgSGVsbGFzIGNhbWUgdG9nZXRoZXIgYXQgU3BhcnRhIHRvIHNldHRsZSBpdHMgdGVybXMuCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDE2LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMTYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBlbG9waWRhczwvdGl0bGU+LCBjaGFwdGVycyB4dmkuPC9iaWJsPiBhbmQgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzPC90aXRsZT4sIGNoYXB0ZXJzIHh2aS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDE3LjEiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMTcuMSIgdmFsaWQ9InllcyI+eHZpaS48L2JpYmw+LCBkb3VidGxlc3Mgb24gdGhlIGF1dGhvcml0eSBvZiBFcGhvcnVzIChjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuODEuMiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuODEuMiIgdmFsaWQ9InllcyI+RGlvZG9ydXMsIHh2LiA4MSwgMik8L2JpYmw+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzcxIEIuQy4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi4zLjMuIiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuMy4zLiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmkuIDMsIDMtMjA8L2JpYmw+KS48L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuMy4zLiIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA2LjMuMy4iIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpLiAzLCAzLTIwPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2aS4gMywgMy0yMDwvdHJhbnNsYXRpb24+"
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uZSBvZiB0aGVzZSBhbWJhc3NhZG9ycyB3YXMgRXBhbWlub25kYXMsIGEgbWFuIG9mIHJlcHV0ZSBmb3IgY3VsdHVyZSBhbmQgcGhpbG9zb3BoeSwgYWx0aG91Z2ggaGUgaGFkIG5vdCB5ZXQgZ2l2ZW4gcHJvb2Ygb2YgY2FwYWNpdHkgYXMgYSBnZW5lcmFsLiBUaGlzIG1hbiwgc2VlaW5nIHRoZSByZXN0IGFsbCBjcmluZ2luZyBiZWZvcmUgQWdlc2lsYcO8cywgYWxvbmUgaGFkIHRoZSBjb3VyYWdlIG9mIGhpcyBjb252aWN0aW9ucywgYW5kIG1hZGUgYSBzcGVlY2gsIG5vdCBpbiBiZWhhbGYgb2YgVGhlYmVzLCBoaXMgbmF0aXZlIGNpdHksIGJ1dCBvZiBhbGwgR3JlZWNlIGluIGNvbW1vbiwgZGVjbGFyaW5nIHRoYXQgd2FyIG1hZGUgU3BhcnRhIGdyZWF0IGF0IHRoZSBleHBlbnNlIG9mIHRoZSBzdWZmZXJpbmdzIG9mIGFsbCB0aGUgb3RoZXIgc3RhdGVzLCBhbmQgdXJnaW5nIHRoYXQgcGVhY2UgYmUgbWFkZSBvbiB0ZXJtcyBvZiBlcXVhbGl0eSBhbmQganVzdGljZSwgZm9yIGl0IHdvdWxkIGVuZHVyZSBvbmx5IHdoZW4gYWxsIHBhcnRpZXMgdG8gaXQgd2VyZSBtYWRlIGVxdWFsLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2VzaWxhw7xzLCBhY2NvcmRpbmdseSwgc2VlaW5nIHRoYXQgdGhlIEdyZWVrcyBhbGwgbGlzdGVuZWQgdG8gRXBhbWlub25kYXMgd2l0aCB0aGUgZ3JlYXRlc3QgYXR0ZW50aW9uIGFuZCBhZG1pcmF0aW9uLCBhc2tlZCBoaW0gd2hldGhlciBoZSBjb25zaWRlcmVkIGl0IGp1c3RpY2UgYW5kIGVxdWFsaXR5IHRoYXQgdGhlIGNpdGllcyBvZiBCb2VvdGlhIHNob3VsZCBiZSBpbmRlcGVuZGVudCBvZiBUaGViZXMuIFRoZW4gd2hlbiBFcGFtaW5vbmRhcyBwcm9tcHRseSBhbmQgYm9sZGx5IGFza2VkIGhpbSBpbiByZXBseSB3aGV0aGVyIGhlIHRvbyB0aG91Z2h0IGl0IGp1c3RpY2UgZm9yIHRoZSBjaXRpZXMgb2YgTGFjb25pYSB0byBiZSBpbmRlcGVuZGVudCBvZiBTcGFydGEsIEFnZXNpbGHDvHMgc3ByYW5nIGZyb20gaGlzIHNlYXQgYW5kIHdyYXRoZnVsbHkgYmFkZSBoaW0gc2F5IHBsYWlubHkgd2hldGhlciBoZSBpbnRlbmRlZCB0byBtYWtlIHRoZSBjaXRpZXMgb2YgQm9lb3RpYSBpbmRlcGVuZGVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gRXBhbWlub25kYXMgYW5zd2VyZWQgYWdhaW4gaW4gdGhlIHNhbWUgd2F5IGJ5IGFza2luZyB3aGV0aGVyIGhlIGludGVuZGVkIHRvIG1ha2UgdGhlIGNpdGllcyBvZiBMYWNvbmlhIGluZGVwZW5kZW50LCBBZ2VzaWxhw7xzIGJlY2FtZSB2aW9sZW50IGFuZCB3YXMgZ2xhZCBvZiB0aGUgcHJldGV4dCBmb3IgYXQgb25jZSBlcmFzaW5nIHRoZSBuYW1lIG9mIHRoZSBUaGViYW5zIGZyb20gdGhlIHRyZWF0eSBvZiBwZWFjZSBhbmQgZGVjbGFyaW5nIHdhciB1cG9uIHRoZW0uCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gWGVub3Bob24gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuMy4xOSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi4zLjE5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmkuIDMsIDE5LjwvYmlibD4pLCB3aG8gbWFrZXMgbm8gbWVudGlvbiBvZiBFcGFtaW5vbmRhcywgdGhlIFRoZWJhbnMgaGFkIHNpZ25lZCBhcyBUaGViYW5zLCBidXQgb24gdGhlIG5leHQgZGF5IHdpc2hlZCB0byBzdWJzdGl0dXRlIEJvZW90aWFucyBmb3IgVGhlYmFucy4gVGhpcyBBZ2VzaWxhw7xzIHJlZnVzZWQgdG8gcGVybWl0LiBJdCB3b3VsZCBoYXZlIHJlY29nbml6ZWQgdGhlIHN1cHJlbWFjeSBvZiBUaGViZXMgaW4gQm9lb3RpYS48L25vdGU+IFRoZSByZXN0IG9mIHRoZSBHcmVla3MsIGhvd2V2ZXIsIGhlIG9yZGVyZWQgdG8gZGVwYXJ0LCBub3cgdGhhdCB0aGV5IHdlcmUgcmVjb25jaWxlZCB3aXRoIGVhY2ggb3RoZXIsIGxlYXZpbmcgZGlmZmVyZW5jZXMgd2hpY2ggY291bGQgYmUgaGVhbGVkIHRvIHRoZSB0ZXJtcyBvZiBwZWFjZSwgYW5kIHRob3NlIHdoaWNoIGNvdWxkIG5vdCwgdG8gd2FyLCBzaW5jZSBpdCB3YXMgYSBoYXJkIHRhc2sgdG8gc2V0dGxlIGFuZCByZW1vdmUgYWxsIHRoZWlyIGRpc3B1dGVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWdlc2lsYcO8cywgYWNjb3JkaW5nbHksIHNlZWluZyB0aGF0IHRoZSBHcmVla3MgYWxsIGxpc3RlbmVkIHRvIEVwYW1pbm9uZGFzIHdpdGggdGhlIGdyZWF0ZXN0IGF0dGVudGlvbiBhbmQgYWRtaXJhdGlvbiwgYXNrZWQgaGltIHdoZXRoZXIgaGUgY29uc2lkZXJlZCBpdCBqdXN0aWNlIGFuZCBlcXVhbGl0eSB0aGF0IHRoZSBjaXRpZXMgb2YgQm9lb3RpYSBzaG91bGQgYmUgaW5kZXBlbmRlbnQgb2YgVGhlYmVzLiBUaGVuIHdoZW4gRXBhbWlub25kYXMgcHJvbXB0bHkgYW5kIGJvbGRseSBhc2tlZCBoaW0gaW4gcmVwbHkgd2hldGhlciBoZSB0b28gdGhvdWdodCBpdCBqdXN0aWNlIGZvciB0aGUgY2l0aWVzIG9mIExhY29uaWEgdG8gYmUgaW5kZXBlbmRlbnQgb2YgU3BhcnRhLCBBZ2VzaWxhw7xzIHNwcmFuZyBmcm9tIGhpcyBzZWF0IGFuZCB3cmF0aGZ1bGx5IGJhZGUgaGltIHNheSBwbGFpbmx5IHdoZXRoZXIgaGUgaW50ZW5kZWQgdG8gbWFrZSB0aGUgY2l0aWVzIG9mIEJvZW90aWEgaW5kZXBlbmRlbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEVwYW1pbm9uZGFzIGFuc3dlcmVkIGFnYWluIGluIHRoZSBzYW1lIHdheSBieSBhc2tpbmcgd2hldGhlciBoZSBpbnRlbmRlZCB0byBtYWtlIHRoZSBjaXRpZXMgb2YgTGFjb25pYSBpbmRlcGVuZGVudCwgQWdlc2lsYcO8cyBiZWNhbWUgdmlvbGVudCBhbmQgd2FzIGdsYWQgb2YgdGhlIHByZXRleHQgZm9yIGF0IG9uY2UgZXJhc2luZyB0aGUgbmFtZSBvZiB0aGUgVGhlYmFucyBmcm9tIHRoZSB0cmVhdHkgb2YgcGVhY2UgYW5kIGRlY2xhcmluZyB3YXIgdXBvbiB0aGVtLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gWGVub3Bob24gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi4zLjE5IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuMy4xOSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmkuIDMsIDE5LjwvYmlibD4pLCB3aG8gbWFrZXMgbm8gbWVudGlvbiBvZiBFcGFtaW5vbmRhcywgdGhlIFRoZWJhbnMgaGFkIHNpZ25lZCBhcyBUaGViYW5zLCBidXQgb24gdGhlIG5leHQgZGF5IHdpc2hlZCB0byBzdWJzdGl0dXRlIEJvZW90aWFucyBmb3IgVGhlYmFucy4gVGhpcyBBZ2VzaWxhw7xzIHJlZnVzZWQgdG8gcGVybWl0LiBJdCB3b3VsZCBoYXZlIHJlY29nbml6ZWQgdGhlIHN1cHJlbWFjeSBvZiBUaGViZXMgaW4gQm9lb3RpYS48L25vdGU+IFRoZSByZXN0IG9mIHRoZSBHcmVla3MsIGhvd2V2ZXIsIGhlIG9yZGVyZWQgdG8gZGVwYXJ0LCBub3cgdGhhdCB0aGV5IHdlcmUgcmVjb25jaWxlZCB3aXRoIGVhY2ggb3RoZXIsIGxlYXZpbmcgZGlmZmVyZW5jZXMgd2hpY2ggY291bGQgYmUgaGVhbGVkIHRvIHRoZSB0ZXJtcyBvZiBwZWFjZSwgYW5kIHRob3NlIHdoaWNoIGNvdWxkIG5vdCwgdG8gd2FyLCBzaW5jZSBpdCB3YXMgYSBoYXJkIHRhc2sgdG8gc2V0dGxlIGFuZCByZW1vdmUgYWxsIHRoZWlyIGRpc3B1dGVzLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuMy4xOSIgdmFsaWQ9InllcyIgLz4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA2LjMuMTkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpLiAzLCAxOS48L2JpYmw+KSwgd2hvIG1ha2VzIG5vIG1lbnRpb24gb2YgRXBhbWlub25kYXMsIHRoZSBUaGViYW5zIGhhZCBzaWduZWQgYXMgVGhlYmFucywgYnV0IG9uIHRoZSBuZXh0IGRheSB3aXNoZWQgdG8gc3Vic3RpdHV0ZSBCb2VvdGlhbnMgZm9yIFRoZWJhbnMuIFRoaXMgQWdlc2lsYcO8cyByZWZ1c2VkIHRvIHBlcm1pdC4gSXQgd291bGQgaGF2ZSByZWNvZ25pemVkIHRoZSBzdXByZW1hY3kgb2YgVGhlYmVzIGluIEJvZW90aWEuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2aS4gMywgMTkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lIENsZW9tYnJvdHVzIHdhcyBpbiBQaG9jaXMgd2l0aCBhbiBhcm15LiBUaGUgZXBob3JzIHRoZXJlZm9yZSBpbW1lZGlhdGVseSBzZW50IGhpbSBvcmRlcnMgdG8gbGVhZCBoaXMgZm9yY2VzIGFnYWluc3QgVGhlYmVzLiBUaGV5IGFsc28gc2VudCByb3VuZCBhIHN1bW1vbnMgZm9yIGFuIGFzc2VtYmx5IG9mIHRoZWlyIGFsbGllcywgd2hvIHdlcmUgd2l0aG91dCB6ZWFsIGZvciB0aGUgd2FyIGFuZCB0aG91Z2h0IGl0IGEgZ3JlYXQgYnVyZGVuLCBidXQgd2VyZSBub3QgeWV0IGJvbGQgZW5vdWdoIHRvIG9wcG9zZSBvciBkaXNvYmV5IHRoZSBMYWNlZGFlbW9uaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFsdGhvdWdoIG1hbnkgYmFsZWZ1bCBzaWducyBhcHBlYXJlZCwgYXMgSSBoYXZlIHdyaXR0ZW4gaW4gbXkgTGlmZSBvZiBFcGFtaW5vbmRhcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5vdCBleHRhbnQuPC9ub3RlPiBhbmQgdGhvdWdoIFByb3Rob3XDvHMgdGhlIExhY29uaWFuIG1hZGUgb3Bwb3NpdGlvbiB0byB0aGUgZXhwZWRpdGlvbiwgQWdlc2lsYcO8cyB3b3VsZCBub3QgZ2l2ZSBpbiwgYnV0IGJyb3VnaHQgdGhlIHdhciB0byBwYXNzLiBIZSB0aG91Z2h0IHRoYXQgc2luY2UgYWxsIEhlbGxhcyB3YXMgb24gdGhlaXIgc2lkZSwgYW5kIHRoZSBUaGViYW5zIGhhZCBiZWVuIGV4Y2x1ZGVkIGZyb20gdGhlIHRyZWF0eSwgaXQgd2FzIGEgZmF2b3VyYWJsZSB0aW1lIGZvciB0aGUgU3BhcnRhbnMgdG8gdGFrZSB2ZW5nZWFuY2Ugb24gdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSB0aW1lIGNob3NlbiBmb3IgaXQgcHJvdmVzIHRoYXQgdGhpcyBleHBlZGl0aW9uIHdhcyBtYWRlIGZyb20gYW5nZXIgbW9yZSB0aGFuIGZyb20gY2FyZWZ1bCBjYWxjdWxhdGlvbi4gRm9yIHRoZSB0cmVhdHkgb2YgcGVhY2Ugd2FzIG1hZGUgYXQgTGFjZWRhZW1vbiBvbiB0aGUgZm91cnRlZW50aCBvZiB0aGUgbW9udGggU2Npcm9waG9yaW9uLCBhbmQgb24gdGhlIGZpZnRoIG9mIEhlY2F0b21iYWVvbiB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBkZWZlYXRlZCBhdCBMZXVjdHJhLOKAlGFuIGludGVydmFsIG9mIHR3ZW50eSBkYXlzLiBJbiB0aGF0IGJhdHRsZSBhIHRob3VzYW5kIExhY2VkYWVtb25pYW5zIGZlbGwsIGJlc2lkZXMgQ2xlb21icm90dXMgdGhlIGtpbmcsIGFuZCBhcm91bmQgaGltIHRoZSBtaWdodGllc3Qgb2YgdGhlIFNwYXJ0YW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbW9uZyB0aGVzZSwgdGhleSBzYXksIHdhcyBDbGVvbnltdXMsIHRoZSBiZWF1dGlmdWwgc29uIG9mIFNwaG9kcmlhcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMjUuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHYuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdobyB3YXMgdGhyaWNlIHN0cnVjayBkb3duIGluIGZyb250IG9mIGhpcyBraW5nLCBhcyBtYW55IHRpbWVzIHJvc2UgYWdhaW4gdG8gaGlzIGZlZXQsIGFuZCBkaWVkIHRoZXJlLCBmaWdodGluZyB0aGUgVGhlYmFucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSBDbGVvbWJyb3R1cyB3YXMgaW4gUGhvY2lzIHdpdGggYW4gYXJteS4gVGhlIGVwaG9ycyB0aGVyZWZvcmUgaW1tZWRpYXRlbHkgc2VudCBoaW0gb3JkZXJzIHRvIGxlYWQgaGlzIGZvcmNlcyBhZ2FpbnN0IFRoZWJlcy4gVGhleSBhbHNvIHNlbnQgcm91bmQgYSBzdW1tb25zIGZvciBhbiBhc3NlbWJseSBvZiB0aGVpciBhbGxpZXMsIHdobyB3ZXJlIHdpdGhvdXQgemVhbCBmb3IgdGhlIHdhciBhbmQgdGhvdWdodCBpdCBhIGdyZWF0IGJ1cmRlbiwgYnV0IHdlcmUgbm90IHlldCBib2xkIGVub3VnaCB0byBvcHBvc2Ugb3IgZGlzb2JleSB0aGUgTGFjZWRhZW1vbmlhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhbHRob3VnaCBtYW55IGJhbGVmdWwgc2lnbnMgYXBwZWFyZWQsIGFzIEkgaGF2ZSB3cml0dGVuIGluIG15IExpZmUgb2YgRXBhbWlub25kYXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5vdCBleHRhbnQuPC9ub3RlPiBhbmQgdGhvdWdoIFByb3Rob3XDvHMgdGhlIExhY29uaWFuIG1hZGUgb3Bwb3NpdGlvbiB0byB0aGUgZXhwZWRpdGlvbiwgQWdlc2lsYcO8cyB3b3VsZCBub3QgZ2l2ZSBpbiwgYnV0IGJyb3VnaHQgdGhlIHdhciB0byBwYXNzLiBIZSB0aG91Z2h0IHRoYXQgc2luY2UgYWxsIEhlbGxhcyB3YXMgb24gdGhlaXIgc2lkZSwgYW5kIHRoZSBUaGViYW5zIGhhZCBiZWVuIGV4Y2x1ZGVkIGZyb20gdGhlIHRyZWF0eSwgaXQgd2FzIGEgZmF2b3VyYWJsZSB0aW1lIGZvciB0aGUgU3BhcnRhbnMgdG8gdGFrZSB2ZW5nZWFuY2Ugb24gdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgdGltZSBjaG9zZW4gZm9yIGl0IHByb3ZlcyB0aGF0IHRoaXMgZXhwZWRpdGlvbiB3YXMgbWFkZSBmcm9tIGFuZ2VyIG1vcmUgdGhhbiBmcm9tIGNhcmVmdWwgY2FsY3VsYXRpb24uIEZvciB0aGUgdHJlYXR5IG9mIHBlYWNlIHdhcyBtYWRlIGF0IExhY2VkYWVtb24gb24gdGhlIGZvdXJ0ZWVudGggb2YgdGhlIG1vbnRoIFNjaXJvcGhvcmlvbiwgYW5kIG9uIHRoZSBmaWZ0aCBvZiBIZWNhdG9tYmFlb24gdGhlIExhY2VkYWVtb25pYW5zIHdlcmUgZGVmZWF0ZWQgYXQgTGV1Y3RyYSzigJRhbiBpbnRlcnZhbCBvZiB0d2VudHkgZGF5cy4gSW4gdGhhdCBiYXR0bGUgYSB0aG91c2FuZCBMYWNlZGFlbW9uaWFucyBmZWxsLCBiZXNpZGVzIENsZW9tYnJvdHVzIHRoZSBraW5nLCBhbmQgYXJvdW5kIGhpbSB0aGUgbWlnaHRpZXN0IG9mIHRoZSBTcGFydGFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZXNlLCB0aGV5IHNheSwgd2FzIENsZW9ueW11cywgdGhlIGJlYXV0aWZ1bCBzb24gb2YgU3Bob2RyaWFzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMjUuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHYuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdobyB3YXMgdGhyaWNlIHN0cnVjayBkb3duIGluIGZyb250IG9mIGhpcyBraW5nLCBhcyBtYW55IHRpbWVzIHJvc2UgYWdhaW4gdG8gaGlzIGZlZXQsIGFuZCBkaWVkIHRoZXJlLCBmaWdodGluZyB0aGUgVGhlYmFucy4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMjUuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHYuIDEuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhhdCB0aGUgTGFjZWRhZW1vbmlhbnMgaGFkIG1ldCB3aXRoIGFuIHVuZXhwZWN0ZWQgcmV2ZXJzZSwgYW5kIHRoZSBUaGViYW5zIHdpdGggYW4gdW5sb29rZWQtZm9yIHN1Y2Nlc3Mgc3VycGFzc2luZyB0aGF0IG9mIGFueSBvdGhlciBIZWxsZW5lcyBhdCBzdHJpZmUgd2l0aCBIZWxsZW5lcywgdGhlIGhpZ2ggY29uZHVjdCBvZiB0aGUgZGVmZWF0ZWQgY2l0eSB3YXMgbm8gbGVzcyB0byBiZSBlbnZpZWQgYW5kIGFkbWlyZWQgdGhhbiB0aGF0IG9mIHRoZSB2aWN0b3Jpb3VzIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlhlbm9waG9uIHNheXMKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBTeW0uIDEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TeW1wb3NpdW08L3RpdGxlPiwgaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBpbiB0aGUgY2FzZSBvZiBub2JsZSBtZW4sIHRoZXJlIGlzIG11Y2ggdGhhdCBpcyB3b3J0aCByZWNvcmRpbmcgZXZlbiBpbiB3aGF0IHRoZXkgc2F5IGFuZCBkbyBhdCB0aGVpciB3aW5lIGFuZCBpbiB0aGVpciBzcG9ydHMsIGFuZCBoZSBpcyByaWdodDsgYW5kIGl0IGlzIG5vIGxlc3MsIGJ1dCBldmVuIG1vcmUsIHdvcnRoIHdoaWxlIHRvIG9ic2VydmUgY2FyZWZ1bGx5IHRoZSBkZWNvcnVtIHdpdGggd2hpY2ggbm9ibGUgbWVuIHNwZWFrIGFuZCBhY3QgaW4gdGhlIG1pZHN0IG9mIGFkdmVyc2l0eS4gVGhlIGNpdHkgd2FzIGhvbGRpbmcgYSBmZXN0aXZhbCBhbmQgd2FzIGZ1bGwgb2Ygc3RyYW5nZXJzOyBmb3IgdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Z3ltbm9wYWVkaWFlPC9xPiB3ZXJlIGluIHByb2dyZXNzIGFuZCBjaG9pcnMgb2YgYm95cyB3ZXJlIGNvbXBldGluZyB3aXRoIG9uZSBhbm90aGVyIGluIHRoZSB0aGVhdHJlOyB0aGVuIGNhbWUgdGhlIG1lc3NlbmdlcnMgb2YgY2FsYW1pdHkgZnJvbSBMZXVjdHJhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGVwaG9ycywgYWx0aG91Z2ggaXQgd2FzIGF0IG9uY2UgYXBwYXJlbnQgdGhhdCB0aGVpciBjYXVzZSB3YXMgcnVpbmVkIGFuZCB0aGVpciBzdXByZW1hY3kgbG9zdCwgd291bGQgbm90IGFsbG93IGEgY2hvcmFsIHBlcmZvcm1hbmNlIHRvIGJlIG9taXR0ZWQsIG5vciB0aGUgZmFzaGlvbiBvZiB0aGUgZmVzdGl2YWwgdG8gYmUgY2hhbmdlZCBieSB0aGUgY2l0eSwgYnV0IGFmdGVyIHNlbmRpbmcgdGhlIG5hbWVzIG9mIHRoZSBzbGFpbiB3YXJyaW9ycyB0byB0aGUgaG9tZXMgb2YgdGhlaXIga2luZHJlZCwgdGhleSB0aGVtc2VsdmVzIGNvbmR1Y3RlZCB0aGUgc3BlY3RhY2xlIGFuZCB0aGUgY2hvcmFsIGNvbnRlc3RzIHRvIGEgY2xvc2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBuZXh0IG1vcm5pbmcgYWxzbywgbm93IHRoYXQgZXZlcnlvbmUga25ldyB3aG8gaGFkIHN1cnZpdmVkIHRoZSBiYXR0bGUgYW5kIHdobyBoYWQgYmVlbiBzbGFpbiwgdGhlIGZhdGhlcnMgYW5kIGtpbmRyZWQgYW5kIGZyaWVuZHMgb2YgdGhlIHNsYWluIHdlbnQgZG93biBpbnRvIHRoZSBtYXJrZXQtcGxhY2UgYW5kIGdyZWV0ZWQgb25lIGFub3RoZXIgd2l0aCBicmlnaHQgZmFjZXMsIGZ1bGwgb2YgcHJpZGUgYW5kIGV4dWx0YXRpb247IHdoaWxlIHRoZSBmcmllbmRzIG9mIHRoZSBzdXJ2aXZvcnMsIGFzIGlmIGluIG1vdXJuaW5nLCB0YXJyaWVkIGF0IGhvbWUgd2l0aCB0aGUgd29tZW4sIGFuZCBpZiBvbmUgb2YgdGhlbSB3YXMgb2JsaWdlZCB0byBhcHBlYXIgaW4gcHVibGljLCBoaXMgZ2FyYiBhbmQgc3BlZWNoIGFuZCBsb29rcyBiZXRva2VuZWQgaGlzIGh1bWlsaWF0aW9uIGFuZCBhYmFzZW1lbnQuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi40LjE2IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmkuIDQsIDE2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhIHN0aWxsIGdyZWF0ZXIgZGlmZmVyZW5jZSB3YXMgdG8gYmUgc2VlbiAob3IgaGVhcmQgYWJvdXQpIGluIHRoZSB3b21lbjsgc2hlIHdobyBleHBlY3RlZCBoZXIgc29uIGJhY2sgZnJvbSB0aGUgYmF0dGxlIGFsaXZlIHdhcyBkZWplY3RlZCBhbmQgc2lsZW50LCBidXQgdGhlIG1vdGhlcnMgb2YgdGhvc2UgcmVwb3J0ZWQgdG8gaGF2ZSBmYWxsZW4gaW1tZWRpYXRlbHkgZnJlcXVlbnRlZCB0aGUgdGVtcGxlcywgYW5kIHZpc2l0ZWQgb25lIGFub3RoZXIgd2l0aCBhbiBhaXIgb2YgZ2xhZG5lc3MgYW5kIHByaWRlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoYXQgdGhlIExhY2VkYWVtb25pYW5zIGhhZCBtZXQgd2l0aCBhbiB1bmV4cGVjdGVkIHJldmVyc2UsIGFuZCB0aGUgVGhlYmFucyB3aXRoIGFuIHVubG9va2VkLWZvciBzdWNjZXNzIHN1cnBhc3NpbmcgdGhhdCBvZiBhbnkgb3RoZXIgSGVsbGVuZXMgYXQgc3RyaWZlIHdpdGggSGVsbGVuZXMsIHRoZSBoaWdoIGNvbmR1Y3Qgb2YgdGhlIGRlZmVhdGVkIGNpdHkgd2FzIG5vIGxlc3MgdG8gYmUgZW52aWVkIGFuZCBhZG1pcmVkIHRoYW4gdGhhdCBvZiB0aGUgdmljdG9yaW91cyBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlhlbm9waG9uIHNheXMKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gU3ltLiAxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TeW1wb3NpdW08L3RpdGxlPiwgaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBpbiB0aGUgY2FzZSBvZiBub2JsZSBtZW4sIHRoZXJlIGlzIG11Y2ggdGhhdCBpcyB3b3J0aCByZWNvcmRpbmcgZXZlbiBpbiB3aGF0IHRoZXkgc2F5IGFuZCBkbyBhdCB0aGVpciB3aW5lIGFuZCBpbiB0aGVpciBzcG9ydHMsIGFuZCBoZSBpcyByaWdodDsgYW5kIGl0IGlzIG5vIGxlc3MsIGJ1dCBldmVuIG1vcmUsIHdvcnRoIHdoaWxlIHRvIG9ic2VydmUgY2FyZWZ1bGx5IHRoZSBkZWNvcnVtIHdpdGggd2hpY2ggbm9ibGUgbWVuIHNwZWFrIGFuZCBhY3QgaW4gdGhlIG1pZHN0IG9mIGFkdmVyc2l0eS4gVGhlIGNpdHkgd2FzIGhvbGRpbmcgYSBmZXN0aXZhbCBhbmQgd2FzIGZ1bGwgb2Ygc3RyYW5nZXJzOyBmb3IgdGhlIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBTeW0uIDEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN5bXBvc2l1bTwvdGl0bGU+LCBpLiAxLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3ltcG9zaXVtPC90aXRsZT4sIGkuIDEuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5neW1ub3BhZWRpYWU8L3E+IHdlcmUgaW4gcHJvZ3Jlc3MgYW5kIGNob2lycyBvZiBib3lzIHdlcmUgY29tcGV0aW5nIHdpdGggb25lIGFub3RoZXIgaW4gdGhlIHRoZWF0cmU7IHRoZW4gY2FtZSB0aGUgbWVzc2VuZ2VycyBvZiBjYWxhbWl0eSBmcm9tIExldWN0cmEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgZXBob3JzLCBhbHRob3VnaCBpdCB3YXMgYXQgb25jZSBhcHBhcmVudCB0aGF0IHRoZWlyIGNhdXNlIHdhcyBydWluZWQgYW5kIHRoZWlyIHN1cHJlbWFjeSBsb3N0LCB3b3VsZCBub3QgYWxsb3cgYSBjaG9yYWwgcGVyZm9ybWFuY2UgdG8gYmUgb21pdHRlZCwgbm9yIHRoZSBmYXNoaW9uIG9mIHRoZSBmZXN0aXZhbCB0byBiZSBjaGFuZ2VkIGJ5IHRoZSBjaXR5LCBidXQgYWZ0ZXIgc2VuZGluZyB0aGUgbmFtZXMgb2YgdGhlIHNsYWluIHdhcnJpb3JzIHRvIHRoZSBob21lcyBvZiB0aGVpciBraW5kcmVkLCB0aGV5IHRoZW1zZWx2ZXMgY29uZHVjdGVkIHRoZSBzcGVjdGFjbGUgYW5kIHRoZSBjaG9yYWwgY29udGVzdHMgdG8gYSBjbG9zZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBuZXh0IG1vcm5pbmcgYWxzbywgbm93IHRoYXQgZXZlcnlvbmUga25ldyB3aG8gaGFkIHN1cnZpdmVkIHRoZSBiYXR0bGUgYW5kIHdobyBoYWQgYmVlbiBzbGFpbiwgdGhlIGZhdGhlcnMgYW5kIGtpbmRyZWQgYW5kIGZyaWVuZHMgb2YgdGhlIHNsYWluIHdlbnQgZG93biBpbnRvIHRoZSBtYXJrZXQtcGxhY2UgYW5kIGdyZWV0ZWQgb25lIGFub3RoZXIgd2l0aCBicmlnaHQgZmFjZXMsIGZ1bGwgb2YgcHJpZGUgYW5kIGV4dWx0YXRpb247IHdoaWxlIHRoZSBmcmllbmRzIG9mIHRoZSBzdXJ2aXZvcnMsIGFzIGlmIGluIG1vdXJuaW5nLCB0YXJyaWVkIGF0IGhvbWUgd2l0aCB0aGUgd29tZW4sIGFuZCBpZiBvbmUgb2YgdGhlbSB3YXMgb2JsaWdlZCB0byBhcHBlYXIgaW4gcHVibGljLCBoaXMgZ2FyYiBhbmQgc3BlZWNoIGFuZCBsb29rcyBiZXRva2VuZWQgaGlzIGh1bWlsaWF0aW9uIGFuZCBhYmFzZW1lbnQuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuNC4xNiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmkuIDQsIDE2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA2LjQuMTYiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpLiA0LCAxNi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmkuIDQsIDE2LjwvdHJhbnNsYXRpb24+"
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhIHN0aWxsIGdyZWF0ZXIgZGlmZmVyZW5jZSB3YXMgdG8gYmUgc2VlbiAob3IgaGVhcmQgYWJvdXQpIGluIHRoZSB3b21lbjsgc2hlIHdobyBleHBlY3RlZCBoZXIgc29uIGJhY2sgZnJvbSB0aGUgYmF0dGxlIGFsaXZlIHdhcyBkZWplY3RlZCBhbmQgc2lsZW50LCBidXQgdGhlIG1vdGhlcnMgb2YgdGhvc2UgcmVwb3J0ZWQgdG8gaGF2ZSBmYWxsZW4gaW1tZWRpYXRlbHkgZnJlcXVlbnRlZCB0aGUgdGVtcGxlcywgYW5kIHZpc2l0ZWQgb25lIGFub3RoZXIgd2l0aCBhbiBhaXIgb2YgZ2xhZG5lc3MgYW5kIHByaWRlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZ3JlYXRlciBudW1iZXIsIGhvd2V2ZXIsIHdoZW4gdGhlaXIgYWxsaWVzIHdlcmUgZmFsbGluZyBhd2F5IGZyb20gdGhlbSBhbmQgaXQgd2FzIGV4cGVjdGVkIHRoYXQgRXBhbWlub25kYXMsIGluIGFsbCB0aGUgcHJpZGUgb2YgYSBjb25xdWVyb3IsIHdvdWxkIGludmFkZSBQZWxvcG9ubmVzdXMsIGZlbGwgdG8gdGhpbmtpbmcgb2YgdGhlIG9yYWNsZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDMuNCIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaWkuIDQgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW4gdmlldyBvZiB0aGUgbGFtZW5lc3Mgb2YgQWdlc2lsYcO8cywgYW5kIHdlcmUgZnVsbCBvZiBkZWplY3Rpb24gYW5kIGNvbnN0ZXJuYXRpb24gaW4gcmVzcGVjdCB0byB0aGUgZGl2aW5lIHBvd2VycywgYmVsaWV2aW5nIHRoYXQgdGhlaXIgY2l0eSB3YXMgaW4gYW4gZXZpbCBwbGlnaHQgYmVjYXVzZSB0aGV5IGhhZCBkZXRocm9uZWQgdGhlIHNvdW5kLWZvb3RlZCBraW5nIGFuZCBjaG9zZW4gaW5zdGVhZCBhIGxhbWUgYW5kIGhhbHRpbmcgb25lLOKAlHRoZSB2ZXJ5IHRoaW5nIHdoaWNoIHRoZSBkZWl0eSB3YXMgdHJ5aW5nIHRvIHRlYWNoIHRoZW0gY2FyZWZ1bGx5IHRvIGF2b2lkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IG90aGVyd2lzZSBoZSBoYWQgc3VjaCBwb3dlciBhbmQgdmFsb3VyIGFuZCBmYW1lIHRoYXQgdGhleSBub3Qgb25seSBjb250aW51ZWQgdG8gZW1wbG95IGhpbSBhcyBraW5nIGFuZCBnZW5lcmFsIGluIG1hdHRlcnMgcGVydGFpbmluZyB0byB3YXIsIGJ1dCBhbHNvIGFzIHBoeXNpY2lhbiBhbmQgYXJiaXRlciBpbiB0aGVpciBjaXZpbCBwZXJwbGV4aXRpZXMuIEZvciBpbnN0YW5jZSwgdXBvbiB0aG9zZSB3aG8gaGFkIHNob3duIGNvd2FyZGljZSBpbiB0aGUgYmF0dGxlLCB3aG9tIHRoZXkgdGhlbXNlbHZlcyBjYWxsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dHJlc2FudGVzLDwvcT4gb3IgPGVtcGg+CiAgICAgICAgICAgICAgIDxlbXBoPnJ1bi1hd2F5czwvZW1waD4KICAgICAgICAgICAgPC9lbXBoPiwgdGhleSBoZXNpdGF0ZWQgdG8gaW5mbGljdCB0aGUgZGlzYWJpbGl0aWVzIHJlcXVpcmVkIGJ5IHRoZSBsYXdzLCBzaW5jZSB0aGUgbWVuIHdlcmUgbnVtZXJvdXMgYW5kIHBvd2VyZnVsLCBmb3IgZmVhciB0aGF0IHRoZXkgbWlnaHQgc3RpciB1cCBhIHJldm9sdXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBzdWNoIG1lbiBhcmUgbm90IG9ubHkgZGViYXJyZWQgZnJvbSBldmVyeSBvZmZpY2UsIGJ1dCBpbnRlcm1hcnJpYWdlIHdpdGggYW55IG9mIHRoZW0gaXMgYSBkaXNncmFjZSwgYW5kIGFueSBvbmUgd2hvIG1lZXRzIHRoZW0gbWF5IHN0cmlrZSB0aGVtIGlmIGhlIHBsZWFzZXMuIE1vcmVvdmVyLCB0aGV5IGFyZSBvYmxpZ2VkIHRvIGdvIGFib3V0IHVua2VtcHQgYW5kIHNxdWFsaWQsIHdlYXJpbmcgY2xvYWtzIHRoYXQgYXJlIHBhdGNoZWQgd2l0aCBkeWVkIHN0dWZmcywgaGFsZiBvZiB0aGVpciBiZWFyZHMgc2hhdmVuLCBhbmQgaGFsZiBsZWZ0IHRvIGdyb3cuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBhIHNlcmlvdXMgbWF0dGVyLCB0aGVyZWZvcmUsIHRvIGFsbG93IG1hbnkgc3VjaCBtZW4gaW4gdGhlIGNpdHksIHdoZW4gc2hlIGxhY2tlZCBub3QgYSBmZXcgc29sZGllcnMuIFNvIHRoZXkgY2hvc2UgQWdlc2lsYcO8cyBhcyBhIGxhdy1naXZlciBmb3IgdGhlIG9jY2FzaW9uLiBBbmQgaGUsIHdpdGhvdXQgYWRkaW5nIHRvIG9yIHN1YnRyYWN0aW5nIGZyb20gb3IgY2hhbmdpbmcgdGhlIGxhd3MgaW4gYW55IHdheSwgY2FtZSBpbnRvIHRoZSBhc3NlbWJseSBvZiB0aGUgTGFjZWRhZW1vbmlhbnMgYW5kIHNhaWQgdGhhdCB0aGUgbGF3cyBtdXN0IGJlIGFsbG93ZWQgdG8gc2xlZXAgZm9yIHRoYXQgZGF5LCBidXQgZnJvbSB0aGF0IGRheSBvbiBtdXN0IGJlIGluIHNvdmVyZWlnbiBmb3JjZS4gQnkgdGhpcyBtZWFucyBoZSBhdCBvbmNlIHNhdmVkIHRoZSBsYXdzIGZvciB0aGUgY2l0eSBhbmQgdGhlIG1lbiBmcm9tIGluZmFteS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgd2lzaGluZyB0byByZW1vdmUgdGhlIGRpc2NvdXJhZ2VtZW50IGFuZCBkZWplY3Rpb24gd2hpY2ggcHJldmFpbGVkIGFtb25nIHRoZSB5b3VuZyBtZW4sIGhlIG1hZGUgYW4gaW5jdXJzaW9uIGludG8gQXJjYWRpYSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM3MCBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA2LjUuMTAiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aS4gNSwgMTAtMjE8L2JpYmw+KS48L25vdGU+IGFuZCB0aG91Z2ggaGUgc3R1ZGlvdXNseSBhdm9pZGVkIGpvaW5pbmcgYmF0dGxlIHdpdGggdGhlIGVuZW15LCBoZSB0b29rIGEgc21hbGwgdG93biBvZiB0aGUgTWFudGluZWFucyBhbmQgb3ZlcnJhbiB0aGVpciB0ZXJyaXRvcnksIGFuZCB0aHVzIGxpZ2h0ZW5lZCBhbmQgZ2xhZGRlbmVkIHRoZSBleHBlY3RhdGlvbnMgb2YgaGlzIGNpdHksIHdoaWNoIGZlbHQgdGhhdCBpdHMgY2FzZSB3YXMgbm90IHdob2xseSBkZXNwZXJhdGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGdyZWF0ZXIgbnVtYmVyLCBob3dldmVyLCB3aGVuIHRoZWlyIGFsbGllcyB3ZXJlIGZhbGxpbmcgYXdheSBmcm9tIHRoZW0gYW5kIGl0IHdhcyBleHBlY3RlZCB0aGF0IEVwYW1pbm9uZGFzLCBpbiBhbGwgdGhlIHByaWRlIG9mIGEgY29ucXVlcm9yLCB3b3VsZCBpbnZhZGUgUGVsb3Bvbm5lc3VzLCBmZWxsIHRvIHRoaW5raW5nIG9mIHRoZSBvcmFjbGVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMy40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpaS4gNCBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBpbiB2aWV3IG9mIHRoZSBsYW1lbmVzcyBvZiBBZ2VzaWxhw7xzLCBhbmQgd2VyZSBmdWxsIG9mIGRlamVjdGlvbiBhbmQgY29uc3Rlcm5hdGlvbiBpbiByZXNwZWN0IHRvIHRoZSBkaXZpbmUgcG93ZXJzLCBiZWxpZXZpbmcgdGhhdCB0aGVpciBjaXR5IHdhcyBpbiBhbiBldmlsIHBsaWdodCBiZWNhdXNlIHRoZXkgaGFkIGRldGhyb25lZCB0aGUgc291bmQtZm9vdGVkIGtpbmcgYW5kIGNob3NlbiBpbnN0ZWFkIGEgbGFtZSBhbmQgaGFsdGluZyBvbmUs4oCUdGhlIHZlcnkgdGhpbmcgd2hpY2ggdGhlIGRlaXR5IHdhcyB0cnlpbmcgdG8gdGVhY2ggdGhlbSBjYXJlZnVsbHkgdG8gYXZvaWQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMy40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpaS4gNCBmLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgb3RoZXJ3aXNlIGhlIGhhZCBzdWNoIHBvd2VyIGFuZCB2YWxvdXIgYW5kIGZhbWUgdGhhdCB0aGV5IG5vdCBvbmx5IGNvbnRpbnVlZCB0byBlbXBsb3kgaGltIGFzIGtpbmcgYW5kIGdlbmVyYWwgaW4gbWF0dGVycyBwZXJ0YWluaW5nIHRvIHdhciwgYnV0IGFsc28gYXMgcGh5c2ljaWFuIGFuZCBhcmJpdGVyIGluIHRoZWlyIGNpdmlsIHBlcnBsZXhpdGllcy4gRm9yIGluc3RhbmNlLCB1cG9uIHRob3NlIHdobyBoYWQgc2hvd24gY293YXJkaWNlIGluIHRoZSBiYXR0bGUsIHdob20gdGhleSB0aGVtc2VsdmVzIGNhbGwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRyZXNhbnRlcyw8L3E+IG9yIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cnVuLWF3YXlzPC9lbXBoPgogICAgICAgICAgICA8L2VtcGg+LCB0aGV5IGhlc2l0YXRlZCB0byBpbmZsaWN0IHRoZSBkaXNhYmlsaXRpZXMgcmVxdWlyZWQgYnkgdGhlIGxhd3MsIHNpbmNlIHRoZSBtZW4gd2VyZSBudW1lcm91cyBhbmQgcG93ZXJmdWwsIGZvciBmZWFyIHRoYXQgdGhleSBtaWdodCBzdGlyIHVwIGEgcmV2b2x1dGlvbi4gCgkJCQk8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnJ1bi1hd2F5czwvZW1waD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBzdWNoIG1lbiBhcmUgbm90IG9ubHkgZGViYXJyZWQgZnJvbSBldmVyeSBvZmZpY2UsIGJ1dCBpbnRlcm1hcnJpYWdlIHdpdGggYW55IG9mIHRoZW0gaXMgYSBkaXNncmFjZSwgYW5kIGFueSBvbmUgd2hvIG1lZXRzIHRoZW0gbWF5IHN0cmlrZSB0aGVtIGlmIGhlIHBsZWFzZXMuIE1vcmVvdmVyLCB0aGV5IGFyZSBvYmxpZ2VkIHRvIGdvIGFib3V0IHVua2VtcHQgYW5kIHNxdWFsaWQsIHdlYXJpbmcgY2xvYWtzIHRoYXQgYXJlIHBhdGNoZWQgd2l0aCBkeWVkIHN0dWZmcywgaGFsZiBvZiB0aGVpciBiZWFyZHMgc2hhdmVuLCBhbmQgaGFsZiBsZWZ0IHRvIGdyb3cuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBhIHNlcmlvdXMgbWF0dGVyLCB0aGVyZWZvcmUsIHRvIGFsbG93IG1hbnkgc3VjaCBtZW4gaW4gdGhlIGNpdHksIHdoZW4gc2hlIGxhY2tlZCBub3QgYSBmZXcgc29sZGllcnMuIFNvIHRoZXkgY2hvc2UgQWdlc2lsYcO8cyBhcyBhIGxhdy1naXZlciBmb3IgdGhlIG9jY2FzaW9uLiBBbmQgaGUsIHdpdGhvdXQgYWRkaW5nIHRvIG9yIHN1YnRyYWN0aW5nIGZyb20gb3IgY2hhbmdpbmcgdGhlIGxhd3MgaW4gYW55IHdheSwgY2FtZSBpbnRvIHRoZSBhc3NlbWJseSBvZiB0aGUgTGFjZWRhZW1vbmlhbnMgYW5kIHNhaWQgdGhhdCB0aGUgbGF3cyBtdXN0IGJlIGFsbG93ZWQgdG8gc2xlZXAgZm9yIHRoYXQgZGF5LCBidXQgZnJvbSB0aGF0IGRheSBvbiBtdXN0IGJlIGluIHNvdmVyZWlnbiBmb3JjZS4gQnkgdGhpcyBtZWFucyBoZSBhdCBvbmNlIHNhdmVkIHRoZSBsYXdzIGZvciB0aGUgY2l0eSBhbmQgdGhlIG1lbiBmcm9tIGluZmFteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdpc2hpbmcgdG8gcmVtb3ZlIHRoZSBkaXNjb3VyYWdlbWVudCBhbmQgZGVqZWN0aW9uIHdoaWNoIHByZXZhaWxlZCBhbW9uZyB0aGUgeW91bmcgbWVuLCBoZSBtYWRlIGFuIGluY3Vyc2lvbiBpbnRvIEFyY2FkaWEsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM3MCBCLkMuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuNS4xMCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmkuIDUsIDEwLTIxPC9iaWJsPikuPC9ub3RlPiBhbmQgdGhvdWdoIGhlIHN0dWRpb3VzbHkgYXZvaWRlZCBqb2luaW5nIGJhdHRsZSB3aXRoIHRoZSBlbmVteSwgaGUgdG9vayBhIHNtYWxsIHRvd24gb2YgdGhlIE1hbnRpbmVhbnMgYW5kIG92ZXJyYW4gdGhlaXIgdGVycml0b3J5LCBhbmQgdGh1cyBsaWdodGVuZWQgYW5kIGdsYWRkZW5lZCB0aGUgZXhwZWN0YXRpb25zIG9mIGhpcyBjaXR5LCB3aGljaCBmZWx0IHRoYXQgaXRzIGNhc2Ugd2FzIG5vdCB3aG9sbHkgZGVzcGVyYXRlLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuNS4xMCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmkuIDUsIDEwLTIxPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2aS4gNSwgMTAtMjE8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNhbWUgeWVhciwgYWZ0ZXIgQWdlc2lsYcO8cyBoYWQgcmV0dXJuZWQgYW5kIGRpc2JhbmRlZCBoaXMgZm9yY2VzLjwvbm90ZT4gRXBhbWlub25kYXMgZW50ZXJlZCBMYWNvbmlhIHdpdGggaGlzIGFsbGllcywgaGF2aW5nIG5vIGZld2VyIHRoYW4gZm9ydHkgdGhvdXNhbmQgbWVuLWF0LWFybXMuIE1hbnkgbGlnaHQgYXJtZWQgYW5kIHVuYXJtZWQgdHJvb3BzIGFsc28gZm9sbG93ZWQgaGltIGZvciB0aGUgc2FrZSBvZiBwbHVuZGVyLCBzbyB0aGF0IGEgaG9yZGUgb2Ygc2V2ZW50eSB0aG91c2FuZCwgYWxsIHRvbGQsIG1hZGUgdGhpcyBpbmN1cnNpb24gaW50byBMYWNvbmlhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYSBwZXJpb2Qgb2Ygbm8gbGVzcyB0aGFuIHNpeCBodW5kcmVkIHllYXJzIHRoZSBEb3JpYW5zIGhhZCBiZWVuIGxpdmluZyBpbiBMYWNlZGFlbW9uLCBhbmQgdGhpcyB3YXMgdGhlIGZpcnN0IHRpbWUgaW4gYWxsIHRoYXQgcGVyaW9kIHRoYXQgZW5lbWllcyBoYWQgYmVlbiBzZWVuIGluIHRoZSBjb3VudHJ5OyBiZWZvcmUgdGhpcywgbm9uZSBoYWQgdmVudHVyZWQgdGhlcmUuIEJ1dCBub3cgdGhleSBidXJzdCBpbnRvIGFuIHVucmF2YWdlZCBhbmQgaW52aW9sYXRlIGxhbmQsIGFuZCBidXJuZWQgYW5kIHBsdW5kZXJlZCBhcyBmYXIgYXMgdGhlIHJpdmVyIGFuZCB0aGUgY2l0eSwgYW5kIG5vIG9uZSBjYW1lIG91dCBhZ2FpbnN0IHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBBZ2VzaWxhw7xzIHdvdWxkIG5vdCBzdWZmZXIgdGhlIExhY2VkYWVtb25pYW5zIHRvIGZpZ2h0IGFnYWluc3Qgc3VjaCBhIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YmlsbG93eSB0b3JyZW50IG9mIHdhciw8L3E+IHRvIHVzZSB0aGUgd29yZHMgb2YgVGhlb3BvbXB1cywgYnV0IHN1cnJvdW5kZWQgdGhlIGNlbnRyYWwgYW5kIG1vc3QgY29tbWFuZGluZyBwYXJ0cyBvZiB0aGUgY2l0eSB3aXRoIGhpcyBtZW4tYXQtYXJtcywgd2hpbGUgaGUgZW5kdXJlZCB0aGUgYm9hc3RmdWwgdGhyZWF0cyBvZiB0aGUgVGhlYmFucywgd2hvIGNhbGxlZCB1cG9uIGhpbSBieSBuYW1lIGFuZCBiYWRlIGhpbSBjb21lIG91dCBhbmQgZmlnaHQgZm9yIGhpcyBjb3VudHJ5LCBzaW5jZSBoZSBoYWQgY2F1c2VkIGhlciBtaXNmb3J0dW5lcyBieSBsaWdodGluZyB1cCB0aGUgZmxhbWVzIG9mIHdhci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoaXMgd2FzIG5vdCB0aGUgd29yc3QuIEFnZXNpbGHDvHMgd2FzIHN0aWxsIG1vcmUgaGFyYXNzZWQgYnkgdGhlIHR1bXVsdHMgYW5kIHNocmlla3MgYW5kIHJ1bm5pbmcgYWJvdXQgdGhyb3VnaG91dCB0aGUgY2l0eSwgd2hlcmUgdGhlIGVsZGVyIG1lbiB3ZXJlIGVucmFnZWQgYXQgdGhlIHN0YXRlIG9mIGFmZmFpcnMsIGFuZCB0aGUgd29tZW4gd2VyZSB1bmFibGUgdG8ga2VlcCBxdWlldCwgYnV0IHdlcmUgdXR0ZXJseSBiZXNpZGUgdGhlbXNlbHZlcyB3aGVuIHRoZXkgaGVhcmQgdGhlIHNob3V0cyBhbmQgc2F3IHRoZSBmaXJlcyBvZiB0aGUgZW5lbXkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIHdvbWVuIGNvdWxkIG5vdCBlbmR1cmUgZXZlbiB0aGUgc2lnaHQgb2YgdGhlIHNtb2tlLCBzaW5jZSB0aGV5IGhhZCBuZXZlciBzZXQgZXllcyB1cG9uIGFuIGVuZW15PC9xPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi41LjI4IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmkuIDUsIDI4PC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHNvIGRpc3RyZXNzZWQgYXQgdGhlIHRob3VnaHQgb2Ygd2hhdCBoaXMgZmFtZSB3b3VsZCBiZSwgYmVjYXVzZSBoZSBoYWQgdGFrZW4gY29tbWFuZCBvZiB0aGUgY2l0eSB3aGVuIHNoZSB3YXMgZ3JlYXRlc3QgYW5kIG1vc3QgcG93ZXJmdWwsIGFuZCBub3cgc2F3IGhlciByZXB1dGF0aW9uIGxvd2VyZWQsIGFuZCBoZXIgcHJvdWQgYm9hc3QgbWFkZSBlbXB0eSwgd2hpY2ggYm9hc3QgaGUgaGltc2VsZiBhbHNvIGhhZCBvZnRlbiBtYWRlLCBzYXlpbmcgdGhhdCBubyBTcGFydGFuIHdvbWFuIGhhZCBldmVyIHNlZW4gdGhlIHNtb2tlIG9mIGFuIGVuZW15J3MgZmlyZXMuIEl0IGlzIHNhaWQgYWxzbyB0aGF0IEFudGFsY2lkYXMsIHdoZW4gYW4gQXRoZW5pYW4gd2FzIGRpc3B1dGluZyB3aXRoIGhpbSBvdmVyIHRoZSB2YWxvdXIgb2YgdGhlIHR3byBwZW9wbGVzIGFuZCBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllldCB3ZSBoYXZlIG9mdGVuIGRyaXZlbiB5b3UgYXdheSBmcm9tIHRoZSBDZXBoaXN1cyw8L3E+IHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHdlIGhhdmUgbmV2ZXIgZHJpdmVuIHlvdSBhd2F5IGZyb20gdGhlIEV1cm90YXMuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhIHNpbWlsYXIgcmV0b3J0IHdhcyBtYWRlIGJ5IGEgU3BhcnRhbiBvZiBsZXNzZXIgbm90ZSB0byB0aGUgQXJnaXZlIHdobyBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1hbnkgb2YgeW91IGxpZSBidXJpZWQgaW4gdGhlIGxhbmRzIG9mIEFyZ29zPC9xPjsgdGhlIFNwYXJ0YW4gYW5zd2VyZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IG5vdCBhIG1hbiBvZiB5b3UgaW4gdGhlIGxhbmRzIG9mIExhY29uaWEuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNhbWUgeWVhciwgYWZ0ZXIgQWdlc2lsYcO8cyBoYWQgcmV0dXJuZWQgYW5kIGRpc2JhbmRlZCBoaXMgZm9yY2VzLjwvbm90ZT4gRXBhbWlub25kYXMgZW50ZXJlZCBMYWNvbmlhIHdpdGggaGlzIGFsbGllcywgaGF2aW5nIG5vIGZld2VyIHRoYW4gZm9ydHkgdGhvdXNhbmQgbWVuLWF0LWFybXMuIE1hbnkgbGlnaHQgYXJtZWQgYW5kIHVuYXJtZWQgdHJvb3BzIGFsc28gZm9sbG93ZWQgaGltIGZvciB0aGUgc2FrZSBvZiBwbHVuZGVyLCBzbyB0aGF0IGEgaG9yZGUgb2Ygc2V2ZW50eSB0aG91c2FuZCwgYWxsIHRvbGQsIG1hZGUgdGhpcyBpbmN1cnNpb24gaW50byBMYWNvbmlhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhIHBlcmlvZCBvZiBubyBsZXNzIHRoYW4gc2l4IGh1bmRyZWQgeWVhcnMgdGhlIERvcmlhbnMgaGFkIGJlZW4gbGl2aW5nIGluIExhY2VkYWVtb24sIGFuZCB0aGlzIHdhcyB0aGUgZmlyc3QgdGltZSBpbiBhbGwgdGhhdCBwZXJpb2QgdGhhdCBlbmVtaWVzIGhhZCBiZWVuIHNlZW4gaW4gdGhlIGNvdW50cnk7IGJlZm9yZSB0aGlzLCBub25lIGhhZCB2ZW50dXJlZCB0aGVyZS4gQnV0IG5vdyB0aGV5IGJ1cnN0IGludG8gYW4gdW5yYXZhZ2VkIGFuZCBpbnZpb2xhdGUgbGFuZCwgYW5kIGJ1cm5lZCBhbmQgcGx1bmRlcmVkIGFzIGZhciBhcyB0aGUgcml2ZXIgYW5kIHRoZSBjaXR5LCBhbmQgbm8gb25lIGNhbWUgb3V0IGFnYWluc3QgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBBZ2VzaWxhw7xzIHdvdWxkIG5vdCBzdWZmZXIgdGhlIExhY2VkYWVtb25pYW5zIHRvIGZpZ2h0IGFnYWluc3Qgc3VjaCBhIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5iaWxsb3d5IHRvcnJlbnQgb2Ygd2FyLDwvcT4gdG8gdXNlIHRoZSB3b3JkcyBvZiBUaGVvcG9tcHVzLCBidXQgc3Vycm91bmRlZCB0aGUgY2VudHJhbCBhbmQgbW9zdCBjb21tYW5kaW5nIHBhcnRzIG9mIHRoZSBjaXR5IHdpdGggaGlzIG1lbi1hdC1hcm1zLCB3aGlsZSBoZSBlbmR1cmVkIHRoZSBib2FzdGZ1bCB0aHJlYXRzIG9mIHRoZSBUaGViYW5zLCB3aG8gY2FsbGVkIHVwb24gaGltIGJ5IG5hbWUgYW5kIGJhZGUgaGltIGNvbWUgb3V0IGFuZCBmaWdodCBmb3IgaGlzIGNvdW50cnksIHNpbmNlIGhlIGhhZCBjYXVzZWQgaGVyIG1pc2ZvcnR1bmVzIGJ5IGxpZ2h0aW5nIHVwIHRoZSBmbGFtZXMgb2Ygd2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIHdhcyBub3QgdGhlIHdvcnN0LiBBZ2VzaWxhw7xzIHdhcyBzdGlsbCBtb3JlIGhhcmFzc2VkIGJ5IHRoZSB0dW11bHRzIGFuZCBzaHJpZWtzIGFuZCBydW5uaW5nIGFib3V0IHRocm91Z2hvdXQgdGhlIGNpdHksIHdoZXJlIHRoZSBlbGRlciBtZW4gd2VyZSBlbnJhZ2VkIGF0IHRoZSBzdGF0ZSBvZiBhZmZhaXJzLCBhbmQgdGhlIHdvbWVuIHdlcmUgdW5hYmxlIHRvIGtlZXAgcXVpZXQsIGJ1dCB3ZXJlIHV0dGVybHkgYmVzaWRlIHRoZW1zZWx2ZXMgd2hlbiB0aGV5IGhlYXJkIHRoZSBzaG91dHMgYW5kIHNhdyB0aGUgZmlyZXMgb2YgdGhlIGVuZW15LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgd29tZW4gY291bGQgbm90IGVuZHVyZSBldmVuIHRoZSBzaWdodCBvZiB0aGUgc21va2UsIHNpbmNlIHRoZXkgaGFkIG5ldmVyIHNldCBleWVzIHVwb24gYW4gZW5lbXk8L3E+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuNS4yOCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmkuIDUsIDI4PC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgd29tZW4gY291bGQgbm90IGVuZHVyZSBldmVuIHRoZSBzaWdodCBvZiB0aGUgc21va2UsIHNpbmNlIHRoZXkgaGFkIG5ldmVyIHNldCBleWVzIHVwb24gYW4gZW5lbXk8L3E+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuNS4yOCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmkuIDUsIDI4PC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2aS4gNSwgMjg8L3RyYW5zbGF0aW9uPg=="
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHNvIGRpc3RyZXNzZWQgYXQgdGhlIHRob3VnaHQgb2Ygd2hhdCBoaXMgZmFtZSB3b3VsZCBiZSwgYmVjYXVzZSBoZSBoYWQgdGFrZW4gY29tbWFuZCBvZiB0aGUgY2l0eSB3aGVuIHNoZSB3YXMgZ3JlYXRlc3QgYW5kIG1vc3QgcG93ZXJmdWwsIGFuZCBub3cgc2F3IGhlciByZXB1dGF0aW9uIGxvd2VyZWQsIGFuZCBoZXIgcHJvdWQgYm9hc3QgbWFkZSBlbXB0eSwgd2hpY2ggYm9hc3QgaGUgaGltc2VsZiBhbHNvIGhhZCBvZnRlbiBtYWRlLCBzYXlpbmcgdGhhdCBubyBTcGFydGFuIHdvbWFuIGhhZCBldmVyIHNlZW4gdGhlIHNtb2tlIG9mIGFuIGVuZW15J3MgZmlyZXMuIEl0IGlzIHNhaWQgYWxzbyB0aGF0IEFudGFsY2lkYXMsIHdoZW4gYW4gQXRoZW5pYW4gd2FzIGRpc3B1dGluZyB3aXRoIGhpbSBvdmVyIHRoZSB2YWxvdXIgb2YgdGhlIHR3byBwZW9wbGVzIGFuZCBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWV0IHdlIGhhdmUgb2Z0ZW4gZHJpdmVuIHlvdSBhd2F5IGZyb20gdGhlIENlcGhpc3VzLDwvcT4gcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCB3ZSBoYXZlIG5ldmVyIGRyaXZlbiB5b3UgYXdheSBmcm9tIHRoZSBFdXJvdGFzLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhIHNpbWlsYXIgcmV0b3J0IHdhcyBtYWRlIGJ5IGEgU3BhcnRhbiBvZiBsZXNzZXIgbm90ZSB0byB0aGUgQXJnaXZlIHdobyBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWFueSBvZiB5b3UgbGllIGJ1cmllZCBpbiB0aGUgbGFuZHMgb2YgQXJnb3M8L3E+OyB0aGUgU3BhcnRhbiBhbnN3ZXJlZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBub3QgYSBtYW4gb2YgeW91IGluIHRoZSBsYW5kcyBvZiBMYWNvbmlhLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBob3dldmVyLCB0aGV5IHNheSB0aGF0IEFudGFsY2lkYXMsIHdobyB3YXMgYW4gZXBob3IsIHNlY3JldGx5IHNlbnQgaGlzIGNoaWxkcmVuIGF3YXkgdG8gQ3l0aGVyYSwgc28gZnVsbCBvZiBmZWFyIHdhcyBoZS4gQnV0IEFnZXNpbGHDvHMsIHdoZW4gdGhlIGVuZW15IHRyaWVkIHRvIGNyb3NzIHRoZSBFdXJvdGFzIGFuZCBmb3JjZSB0aGVpciB3YXkgdG8gdGhlIGNpdHksIGFiYW5kb25lZCB0aGUgcmVzdCBvZiBpdCBhbmQgZHJldyB1cCBoaXMgZm9yY2VzIGluIGZyb250IG9mIGl0cyBjZW50cmFsIGFuZCBsb2Z0eSBwcmVjaW5jdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIEV1cm90YXMgYXQgdGhpcyB0aW1lIHdhcyBmbG93aW5nIGF0IGl0cyBmdWxsZXN0IGFuZCBkZWVwZXN0LCBzaW5jZSBzbm93cyBoYWQgZmFsbGVuLCBhbmQgaXRzIGN1cnJlbnQsIGV2ZW4gbW9yZSBmcm9tIGl0cyBjb2xkbmVzcyB0aGFuIGl0cyB2aW9sZW5jZSwgd2FzIHZlcnkgdHJvdWJsZXNvbWUgdG8gdGhlIFRoZWJhbnMuIEFzIEVwYW1pbm9uZGFzIHdhcyBmb3JkaW5nIGl0IGF0IHRoZSBoZWFkIG9mIGhpcyBwaGFsYW54LCBjZXJ0YWluIG9uZXMgcG9pbnRlZCBoaW0gb3V0IHRvIEFnZXNpbGHDvHMsIGFuZCBoZSwgd2UgYXJlIHRvbGQsIGFmdGVyIGZpeGluZyBoaXMgZ2F6ZSB1cG9uIGhpbSBhbmQgd2F0Y2hpbmcgaGltIGZvciBhIGxvbmcgdGltZSwgc2FpZCBidXQgdGhlc2Ugd29yZHM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBhZHZlbnR1cm91cyBtYW4hPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkVwYW1pbm9uZGFzIHdhcyBhbWJpdGlvdXMgdG8gam9pbiBiYXR0bGUgaW4gdGhlIGNpdHkgYW5kIHNldCB1cCBhIHRyb3BoeSBvZiB2aWN0b3J5IHRoZXJlLCBidXQgc2luY2UgaGUgY291bGQgbmVpdGhlciBmb3JjZSBub3IgdGVtcHQgQWdlc2lsYcO8cyBvdXQgb2YgaGlzIHBvc2l0aW9ucywgaGUgd2l0aGRyZXcgYW5kIGJlZ2FuIHRvIHJhdmFnZSB0aGUgY291bnRyeS4gTWVhbndoaWxlLCBhYm91dCB0d28gaHVuZHJlZCBvZiB0aGUgTGFjZWRhZW1vbmlhbnMgd2hvIGhhZCBsb25nIGJlZW4gZGlzYWZmZWN0ZWQgYW5kIG11dGlub3VzIGJhbmRlZCB0b2dldGhlciBhbmQgc2VpemVkIHRoZSBJc3Nvcml1bSwgd2hlcmUgdGhlIHRlbXBsZSBvZiBBcnRlbWlzIHN0YW5kcywgYSB3ZWxsLXdhbGxlZCBhbmQgaW5hY2Nlc3NpYmxlIHNwb3QuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBMYWNlZGFlbW9uaWFucyB3aXNoZWQgdG8gbWFrZSBhIGRhc2ggdXBvbiB0aGVtIGF0IG9uY2UsIGJ1dCBBZ2VzaWxhw7xzLCBmZWFyaW5nIHRoZWlyIGluc3VycmVjdGlvbiwgb3JkZXJlZCB0aGUgcmVzdCB0byBrZWVwIHF1aWV0LCB3aGlsZSBoZSBoaW1zZWxmLCB3ZWFyaW5nIGhpcyBjbG9hayBhbmQgYXR0ZW5kZWQgYnkgYSBzaW5nbGUgc2VydmFudCwgd2VudCB0b3dhcmRzIHRoZW0sIGNyeWluZyBvdXQgdGhhdCB0aGV5IGhhZCBtaXN1bmRlcnN0b29kIGhpcyBvcmRlcnM7IGZvciBoZSBoYWQgbm90IGNvbW1hbmRlZCB0aGVtIHRvIGFzc2VtYmxlIGluIHRoYXQgcGxhY2UsIG5vciBpbiBhIGJvZHksIGJ1dCBzb21lIHlvbmRlciAocG9pbnRpbmcgdG8gYW5vdGhlciBzcG90KSwgYW5kIHNvbWUgaW4gYW5vdGhlciBwYXJ0IG9mIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHdlcmUgZGVsaWdodGVkIHRvIGhlYXIgdGhpcywgc3VwcG9zaW5nIHRoYXQgdGhlaXIgZGVzaWduIHdhcyB1bmRpc2NvdmVyZWQsIGFuZCwgYnJlYWtpbmcgdXAsIHdlbnQgb2ZmIHRvIHRoZSBwbGFjZXMgd2hpY2ggaGUgb3JkZXJlZCB0aGVtIHRvIG9jY3VweS4gVGhlbiBBZ2VzaWxhw7xzIGF0IG9uY2Ugc3VtbW9uZWQgb3RoZXIgdHJvb3BzIGFuZCB0b29rIHBvc3Nlc3Npb24gb2YgdGhlIElzc29yaXVtLCBhZnRlciB3aGljaCBoZSBhcnJlc3RlZCBhYm91dCBmaWZ0ZWVuIG9mIHRoZSBjb25zcGlyYXRvcnMgd2hvIGhhZCBiZWVuIGdhdGhlcmVkIHRoZXJlLCBhbmQgcHV0IHRoZW0gdG8gZGVhdGggaW4gdGhlIG5pZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgYWxzbyBpbmZvcm1lZCBvZiBhbm90aGVyIGFuZCBhIGxhcmdlciBjb25zcGlyYWN5IG9mIFNwYXJ0YW5zLCB3aG8gbWV0IHNlY3JldGx5IGluIGEgaG91c2UgYW5kIHRoZXJlIHBsb3R0ZWQgcmV2b2x1dGlvbi4gSXQgd2FzIGltcHJhY3RpY2FibGUgZWl0aGVyIHRvIGJyaW5nIHRoZXNlIG1lbiB0byB0cmlhbCBpbiBhIHRpbWUgb2Ygc28gbXVjaCBjb25mdXNpb24sIG9yIHRvIG92ZXJsb29rIHRoZWlyIHBsb3RzLiBBY2NvcmRpbmdseSwgQWdlc2lsYcO8cyBjb25mZXJyZWQgd2l0aCB0aGUgZXBob3JzLCBhbmQgdGhlbiBwdXQgdGhlc2UgbWVuIGFsc28gdG8gZGVhdGggd2l0aG91dCBwcm9jZXNzIG9mIGxhdywgYWx0aG91Z2ggbm8gU3BhcnRhbiBoYWQgZXZlciBiZWZvcmUgbWV0IHdpdGggc3VjaCBhIGRlYXRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUsIGFsc28sIG1hbnkgb2YgdGhlIHByb3ZpbmNpYWxzIGFuZCBIZWxvdHMgd2hvIGhhZCBiZWVuIGVucm9sbGVkIGluIHRoZSBhcm15IHJhbiBhd2F5IGZyb20gdGhlIGNpdHkgYW5kIGpvaW5lZCB0aGUgZW5lbXksIGFuZCB0aGlzIGNhdXNlZCB2ZXJ5IGRlZXAgZGlzY291cmFnZW1lbnQuIEFnZXNpbGHDvHMgdGhlcmVmb3JlIGluc3RydWN0ZWQgaGlzIHNlcnZhbnRzIHRvIGdvIGV2ZXJ5IG1vcm5pbmcgYmVmb3JlIGl0IHdhcyBsaWdodCB0byB0aGUgYmFycmFja3MgYW5kIHRha2UgdGhlIGFybXMgb2YgdGhlIGRlc2VydGVycyBhbmQgaGlkZSB0aGVtLCB0aGF0IHRoZWlyIG51bWJlcnMgbWlnaHQgbm90IGJlIGtub3duLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBob3dldmVyLCB0aGV5IHNheSB0aGF0IEFudGFsY2lkYXMsIHdobyB3YXMgYW4gZXBob3IsIHNlY3JldGx5IHNlbnQgaGlzIGNoaWxkcmVuIGF3YXkgdG8gQ3l0aGVyYSwgc28gZnVsbCBvZiBmZWFyIHdhcyBoZS4gQnV0IEFnZXNpbGHDvHMsIHdoZW4gdGhlIGVuZW15IHRyaWVkIHRvIGNyb3NzIHRoZSBFdXJvdGFzIGFuZCBmb3JjZSB0aGVpciB3YXkgdG8gdGhlIGNpdHksIGFiYW5kb25lZCB0aGUgcmVzdCBvZiBpdCBhbmQgZHJldyB1cCBoaXMgZm9yY2VzIGluIGZyb250IG9mIGl0cyBjZW50cmFsIGFuZCBsb2Z0eSBwcmVjaW5jdHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIEV1cm90YXMgYXQgdGhpcyB0aW1lIHdhcyBmbG93aW5nIGF0IGl0cyBmdWxsZXN0IGFuZCBkZWVwZXN0LCBzaW5jZSBzbm93cyBoYWQgZmFsbGVuLCBhbmQgaXRzIGN1cnJlbnQsIGV2ZW4gbW9yZSBmcm9tIGl0cyBjb2xkbmVzcyB0aGFuIGl0cyB2aW9sZW5jZSwgd2FzIHZlcnkgdHJvdWJsZXNvbWUgdG8gdGhlIFRoZWJhbnMuIEFzIEVwYW1pbm9uZGFzIHdhcyBmb3JkaW5nIGl0IGF0IHRoZSBoZWFkIG9mIGhpcyBwaGFsYW54LCBjZXJ0YWluIG9uZXMgcG9pbnRlZCBoaW0gb3V0IHRvIEFnZXNpbGHDvHMsIGFuZCBoZSwgd2UgYXJlIHRvbGQsIGFmdGVyIGZpeGluZyBoaXMgZ2F6ZSB1cG9uIGhpbSBhbmQgd2F0Y2hpbmcgaGltIGZvciBhIGxvbmcgdGltZSwgc2FpZCBidXQgdGhlc2Ugd29yZHM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIGFkdmVudHVyb3VzIG1hbiE8L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkVwYW1pbm9uZGFzIHdhcyBhbWJpdGlvdXMgdG8gam9pbiBiYXR0bGUgaW4gdGhlIGNpdHkgYW5kIHNldCB1cCBhIHRyb3BoeSBvZiB2aWN0b3J5IHRoZXJlLCBidXQgc2luY2UgaGUgY291bGQgbmVpdGhlciBmb3JjZSBub3IgdGVtcHQgQWdlc2lsYcO8cyBvdXQgb2YgaGlzIHBvc2l0aW9ucywgaGUgd2l0aGRyZXcgYW5kIGJlZ2FuIHRvIHJhdmFnZSB0aGUgY291bnRyeS4gTWVhbndoaWxlLCBhYm91dCB0d28gaHVuZHJlZCBvZiB0aGUgTGFjZWRhZW1vbmlhbnMgd2hvIGhhZCBsb25nIGJlZW4gZGlzYWZmZWN0ZWQgYW5kIG11dGlub3VzIGJhbmRlZCB0b2dldGhlciBhbmQgc2VpemVkIHRoZSBJc3Nvcml1bSwgd2hlcmUgdGhlIHRlbXBsZSBvZiBBcnRlbWlzIHN0YW5kcywgYSB3ZWxsLXdhbGxlZCBhbmQgaW5hY2Nlc3NpYmxlIHNwb3QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBMYWNlZGFlbW9uaWFucyB3aXNoZWQgdG8gbWFrZSBhIGRhc2ggdXBvbiB0aGVtIGF0IG9uY2UsIGJ1dCBBZ2VzaWxhw7xzLCBmZWFyaW5nIHRoZWlyIGluc3VycmVjdGlvbiwgb3JkZXJlZCB0aGUgcmVzdCB0byBrZWVwIHF1aWV0LCB3aGlsZSBoZSBoaW1zZWxmLCB3ZWFyaW5nIGhpcyBjbG9hayBhbmQgYXR0ZW5kZWQgYnkgYSBzaW5nbGUgc2VydmFudCwgd2VudCB0b3dhcmRzIHRoZW0sIGNyeWluZyBvdXQgdGhhdCB0aGV5IGhhZCBtaXN1bmRlcnN0b29kIGhpcyBvcmRlcnM7IGZvciBoZSBoYWQgbm90IGNvbW1hbmRlZCB0aGVtIHRvIGFzc2VtYmxlIGluIHRoYXQgcGxhY2UsIG5vciBpbiBhIGJvZHksIGJ1dCBzb21lIHlvbmRlciAocG9pbnRpbmcgdG8gYW5vdGhlciBzcG90KSwgYW5kIHNvbWUgaW4gYW5vdGhlciBwYXJ0IG9mIHRoZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSBkZWxpZ2h0ZWQgdG8gaGVhciB0aGlzLCBzdXBwb3NpbmcgdGhhdCB0aGVpciBkZXNpZ24gd2FzIHVuZGlzY292ZXJlZCwgYW5kLCBicmVha2luZyB1cCwgd2VudCBvZmYgdG8gdGhlIHBsYWNlcyB3aGljaCBoZSBvcmRlcmVkIHRoZW0gdG8gb2NjdXB5LiBUaGVuIEFnZXNpbGHDvHMgYXQgb25jZSBzdW1tb25lZCBvdGhlciB0cm9vcHMgYW5kIHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGUgSXNzb3JpdW0sIGFmdGVyIHdoaWNoIGhlIGFycmVzdGVkIGFib3V0IGZpZnRlZW4gb2YgdGhlIGNvbnNwaXJhdG9ycyB3aG8gaGFkIGJlZW4gZ2F0aGVyZWQgdGhlcmUsIGFuZCBwdXQgdGhlbSB0byBkZWF0aCBpbiB0aGUgbmlnaHQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHNvIGluZm9ybWVkIG9mIGFub3RoZXIgYW5kIGEgbGFyZ2VyIGNvbnNwaXJhY3kgb2YgU3BhcnRhbnMsIHdobyBtZXQgc2VjcmV0bHkgaW4gYSBob3VzZSBhbmQgdGhlcmUgcGxvdHRlZCByZXZvbHV0aW9uLiBJdCB3YXMgaW1wcmFjdGljYWJsZSBlaXRoZXIgdG8gYnJpbmcgdGhlc2UgbWVuIHRvIHRyaWFsIGluIGEgdGltZSBvZiBzbyBtdWNoIGNvbmZ1c2lvbiwgb3IgdG8gb3Zlcmxvb2sgdGhlaXIgcGxvdHMuIEFjY29yZGluZ2x5LCBBZ2VzaWxhw7xzIGNvbmZlcnJlZCB3aXRoIHRoZSBlcGhvcnMsIGFuZCB0aGVuIHB1dCB0aGVzZSBtZW4gYWxzbyB0byBkZWF0aCB3aXRob3V0IHByb2Nlc3Mgb2YgbGF3LCBhbHRob3VnaCBubyBTcGFydGFuIGhhZCBldmVyIGJlZm9yZSBtZXQgd2l0aCBzdWNoIGEgZGVhdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgYWxzbywgbWFueSBvZiB0aGUgcHJvdmluY2lhbHMgYW5kIEhlbG90cyB3aG8gaGFkIGJlZW4gZW5yb2xsZWQgaW4gdGhlIGFybXkgcmFuIGF3YXkgZnJvbSB0aGUgY2l0eSBhbmQgam9pbmVkIHRoZSBlbmVteSwgYW5kIHRoaXMgY2F1c2VkIHZlcnkgZGVlcCBkaXNjb3VyYWdlbWVudC4gQWdlc2lsYcO8cyB0aGVyZWZvcmUgaW5zdHJ1Y3RlZCBoaXMgc2VydmFudHMgdG8gZ28gZXZlcnkgbW9ybmluZyBiZWZvcmUgaXQgd2FzIGxpZ2h0IHRvIHRoZSBiYXJyYWNrcyBhbmQgdGFrZSB0aGUgYXJtcyBvZiB0aGUgZGVzZXJ0ZXJzIGFuZCBoaWRlIHRoZW0sIHRoYXQgdGhlaXIgbnVtYmVycyBtaWdodCBub3QgYmUga25vd24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUgcmVhc29uIHdoeSB0aGUgVGhlYmFucyB3aXRoZHJldyBmcm9tIExhY29uaWEsIG1vc3Qgd3JpdGVycyBzYXkgdGhhdCBpdCB3YXMgYmVjYXVzZSB3aW50ZXIgc3Rvcm1zIGNhbWUgb24gYW5kIHRoZSBBcmNhZGlhbnMgYmVnYW4gdG8gbWVsdCBhd2F5IGFuZCBkaXNiYW5kOyBvdGhlcnMsIGJlY2F1c2UgdGhleSBoYWQgcmVtYWluZWQgdGhlcmUgdGhyZWUgZW50aXJlIG1vbnRocyBhbmQgdGhvcm91Z2hseSByYXZhZ2VkIG1vc3Qgb2YgdGhlIGNvdW50cnk7CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbGwgdGhyZWUgcmVhc29ucyBhcmUgZ2l2ZW4gYnkgWGVub3Bob24gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDYuNS41MCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHZpLiA1LiA1MDwvYmlibD4pLjwvbm90ZT4gYnV0IFRoZW9wb21wdXMgc2F5cyB0aGF0IHdoZW4gdGhlIFRoZWJhbiBjaGllZiBtYWdpc3RyYXRlcyBoYWQgYWxyZWFkeSBkZXRlcm1pbmVkIHRvIHRha2UgdGhlaXIgYXJteSBiYWNrLCBQaHJpeHVzLCBhIFNwYXJ0YW4sIGNhbWUgdG8gdGhlbSwgYnJpbmdpbmcgdGVuIHRhbGVudHMgZnJvbSBBZ2VzaWxhw7xzIHRvIHBheSBmb3IgdGhlaXIgd2l0aGRyYXdhbCwgc28gdGhhdCB0aGV5IHdlcmUgb25seSBkb2luZyB3aGF0IHRoZXkgaGFkIGxvbmcgYWdvIGRlY2lkZWQgdG8gZG8sIGFuZCBoYWQgdGhlaXIgZXhwZW5zZXMgcGFpZCBieSB0aGVpciBlbmVtaWVzIGJlc2lkZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUgcmVhc29uIHdoeSB0aGUgVGhlYmFucyB3aXRoZHJldyBmcm9tIExhY29uaWEsIG1vc3Qgd3JpdGVycyBzYXkgdGhhdCBpdCB3YXMgYmVjYXVzZSB3aW50ZXIgc3Rvcm1zIGNhbWUgb24gYW5kIHRoZSBBcmNhZGlhbnMgYmVnYW4gdG8gbWVsdCBhd2F5IGFuZCBkaXNiYW5kOyBvdGhlcnMsIGJlY2F1c2UgdGhleSBoYWQgcmVtYWluZWQgdGhlcmUgdGhyZWUgZW50aXJlIG1vbnRocyBhbmQgdGhvcm91Z2hseSByYXZhZ2VkIG1vc3Qgb2YgdGhlIGNvdW50cnk7CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFsbCB0aHJlZSByZWFzb25zIGFyZSBnaXZlbiBieSBYZW5vcGhvbiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA2LjUuNTAiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpLiA1LiA1MDwvYmlibD4pLjwvbm90ZT4gYnV0IFRoZW9wb21wdXMgc2F5cyB0aGF0IHdoZW4gdGhlIFRoZWJhbiBjaGllZiBtYWdpc3RyYXRlcyBoYWQgYWxyZWFkeSBkZXRlcm1pbmVkIHRvIHRha2UgdGhlaXIgYXJteSBiYWNrLCBQaHJpeHVzLCBhIFNwYXJ0YW4sIGNhbWUgdG8gdGhlbSwgYnJpbmdpbmcgdGVuIHRhbGVudHMgZnJvbSBBZ2VzaWxhw7xzIHRvIHBheSBmb3IgdGhlaXIgd2l0aGRyYXdhbCwgc28gdGhhdCB0aGV5IHdlcmUgb25seSBkb2luZyB3aGF0IHRoZXkgaGFkIGxvbmcgYWdvIGRlY2lkZWQgdG8gZG8sIGFuZCBoYWQgdGhlaXIgZXhwZW5zZXMgcGFpZCBieSB0aGVpciBlbmVtaWVzIGJlc2lkZXMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi41LjUwIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2aS4gNS4gNTA8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpLiA1LiA1MDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3RvcnkgbWF5IGJlIHRydWUsIGFsdGhvdWdoIEkga25vdyBub3QgaG93IGFsbCBvdGhlciB3cml0ZXJzIGNvdWxkIGJlIGlnbm9yYW50IG9mIGl0LCB3aGlsZSBUaGVvcG9tcHVzIGFsb25lIGhlYXJkIGl0OyBidXQsIGF0IGFueSByYXRlLCBhbGwgYWdyZWUgdGhhdCB0aGUgc2FsdmF0aW9uIG9mIFNwYXJ0YSBhdCB0aGlzIHRpbWUgd2FzIGR1ZSB0byBBZ2VzaWxhw7xzLCBiZWNhdXNlIGhlIHJlbm91bmNlZCBoaXMgaW5oZXJlbnQgcGFzc2lvbnMgb2YgY29udGVudGlvdXNuZXNzIGFuZCBhbWJpdGlvbiwgYW5kIGFkb3B0ZWQgYSBwb2xpY3kgb2Ygc2FmZXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBjb3VsZCBub3QsIGhvd2V2ZXIsIHJlc3RvcmUgdGhlIHBvd2VyIGFuZCByZXB1dGF0aW9uIG9mIGhpcyBjaXR5IGFmdGVyIGl0cyBmYWxsLCBmb3IgaXQgd2FzIGxpa2UgYSBodW1hbiBib2R5IHRoYXQgaXMgc291bmQsIGluZGVlZCwgYnV0IGhhcyBmb2xsb3dlZCBhbGwgdGhlIHdoaWxlIHRvbyBzdHJpY3QgYW5kIHNldmVyZSBhIHJlZ2ltZW47IGEgc2luZ2xlIGVycm9yIHR1cm5lZCB0aGUgc2NhbGUgYW5kIGJyb3VnaHQgZG93biB0aGUgZW50aXJlIHByb3NwZXJpdHkgb2YgdGhlIGNpdHkuIE5vciB3YXMgdGhpcyBzdHJhbmdlLiBGb3IgdG8gYSBjaXZpbCBwb2xpdHkgYmVzdCBhcnJhbmdlZCBmb3IgcGVhY2UgYW5kIHZpcnR1ZSBhbmQgdW5hbmltaXR5IHRoZXkgaGFkIGF0dGFjaGVkIGVtcGlyZXMgYW5kIHNvdmVyZWlnbnRpZXMgd29uIGJ5IGZvcmNlLCBub3Qgb25lIG9mIHdoaWNoIEx5Y3VyZ3VzIHRob3VnaHQgbmVlZGZ1bCBmb3IgYSBjaXR5IHRoYXQgd2FzIHRvIGxpdmUgaW4gaGFwcGluZXNzOyBhbmQgdGhlcmVmb3JlIHRoZXkgZmVsbC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBzdG9yeSBtYXkgYmUgdHJ1ZSwgYWx0aG91Z2ggSSBrbm93IG5vdCBob3cgYWxsIG90aGVyIHdyaXRlcnMgY291bGQgYmUgaWdub3JhbnQgb2YgaXQsIHdoaWxlIFRoZW9wb21wdXMgYWxvbmUgaGVhcmQgaXQ7IGJ1dCwgYXQgYW55IHJhdGUsIGFsbCBhZ3JlZSB0aGF0IHRoZSBzYWx2YXRpb24gb2YgU3BhcnRhIGF0IHRoaXMgdGltZSB3YXMgZHVlIHRvIEFnZXNpbGHDvHMsIGJlY2F1c2UgaGUgcmVub3VuY2VkIGhpcyBpbmhlcmVudCBwYXNzaW9ucyBvZiBjb250ZW50aW91c25lc3MgYW5kIGFtYml0aW9uLCBhbmQgYWRvcHRlZCBhIHBvbGljeSBvZiBzYWZldHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGNvdWxkIG5vdCwgaG93ZXZlciwgcmVzdG9yZSB0aGUgcG93ZXIgYW5kIHJlcHV0YXRpb24gb2YgaGlzIGNpdHkgYWZ0ZXIgaXRzIGZhbGwsIGZvciBpdCB3YXMgbGlrZSBhIGh1bWFuIGJvZHkgdGhhdCBpcyBzb3VuZCwgaW5kZWVkLCBidXQgaGFzIGZvbGxvd2VkIGFsbCB0aGUgd2hpbGUgdG9vIHN0cmljdCBhbmQgc2V2ZXJlIGEgcmVnaW1lbjsgYSBzaW5nbGUgZXJyb3IgdHVybmVkIHRoZSBzY2FsZSBhbmQgYnJvdWdodCBkb3duIHRoZSBlbnRpcmUgcHJvc3Blcml0eSBvZiB0aGUgY2l0eS4gTm9yIHdhcyB0aGlzIHN0cmFuZ2UuIEZvciB0byBhIGNpdmlsIHBvbGl0eSBiZXN0IGFycmFuZ2VkIGZvciBwZWFjZSBhbmQgdmlydHVlIGFuZCB1bmFuaW1pdHkgdGhleSBoYWQgYXR0YWNoZWQgZW1waXJlcyBhbmQgc292ZXJlaWdudGllcyB3b24gYnkgZm9yY2UsIG5vdCBvbmUgb2Ygd2hpY2ggTHljdXJndXMgdGhvdWdodCBuZWVkZnVsIGZvciBhIGNpdHkgdGhhdCB3YXMgdG8gbGl2ZSBpbiBoYXBwaW5lc3M7IGFuZCB0aGVyZWZvcmUgdGhleSBmZWxsLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZ2VzaWxhw7xzIGhpbXNlbGYgbm93IGRlY2xpbmVkIG1pbGl0YXJ5IHNlcnZpY2Ugb24gYWNjb3VudCBvZiBoaXMgeWVhcnMsIGJ1dCBBcmNoaWRhbXVzIGhpcyBzb24sIHdpdGggYXNzaXN0YW5jZSB3aGljaCBjYW1lIGZyb20gdGhlIHR5cmFudCBvZiBTaWNpbHksCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5EaW9ueXNpdXMgdGhlIEVsZGVyLjwvbm90ZT4gY29ucXVlcmVkIHRoZSBBcmNhZGlhbnMgaW4gdGhlIHNvLWNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRlYXJsZXNzIGJhdHRsZSw8L3E+IHdoZXJlIG5vdCBvbmUgb2YgaGlzIG93biBtZW4gZmVsbCwgYW5kIGhlIHNsZXcgZ3JlYXQgbnVtYmVycyBvZiB0aGUgZW5lbXkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNjggQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNy4xLjI4IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gdmlpLiAxLCAyOC0zMjwvYmlibD4pLjwvbm90ZT4gVGhpcyB2aWN0b3J5LCBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSwgc2hvd2VkIHRoZSB3ZWFrbmVzcyBvZiB0aGUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHVwIHRvIHRoaXMgdGltZSB0aGV5IHdlcmUgd29udCB0byB0aGluayB0aGUgY29ucXVlc3Qgb2YgdGhlaXIgZW5lbWllcyBzbyBjdXN0b21hcnkgYW5kIG5hdHVyYWwgYSB0aGluZyBmb3IgdGhlbSB0byBhY2hpZXZlLCB0aGF0IG5vIHNhY3JpZmljZSBmb3IgdmljdG9yeSB3YXMgb2ZmZXJlZCBpbiB0aGUgY2l0eSB0byB0aGUgZ29kcywgYmV5b25kIHRoYXQgb2YgYSBjb2NrLCBuZWl0aGVyIGRpZCB0aGUgd2lubmVycyBvZiB0aGUgY29udGVzdCBleHVsdCwgbm9yIHRob3NlIHdobyBoZWFyZCBvZiB0aGVpciB2aWN0b3J5IHNob3cgZ3JlYXQgam95LiBOYXksIGV2ZW4gYWZ0ZXIgdGhlIGJhdHRsZSBhdCBNYW50aW5lYSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDQxOCBCLkMuLCB3aGVuIHRoZSBMYWNlZGFlbW9uaWFucyBkZWZlYXRlZCBhbiBhbGxpZWQgZm9yY2Ugb2YgTWFudGluZWFucywgQXJnaXZlcywgYW5kIEF0aGVuaWFucyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlRodWMuIDUuNjQiIHZhbGlkPSJ5ZXMiPlRodWN5ZGlkZXMsIHYuIDY0LTc1PC9iaWJsPikuPC9ub3RlPiB3aGljaCBUaHVjeWRpZGVzIGhhcyBkZXNjcmliZWQsIHRoZSBvbmUgd2hvIGZpcnN0IGFubm91bmNlZCB0aGUgdmljdG9yeSBoYWQgbm8gb3RoZXIgcmV3YXJkIGZvciBoaXMgZ2xhZCB0aWRpbmdzIHRoYW4gYSBwaWVjZSBvZiBtZWF0IHNlbnQgYnkgdGhlIG1hZ2lzdHJhdGVzIGZyb20gdGhlIHB1YmxpYyBtZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm93LCBhdCB0aGUgbmV3cyBvZiB0aGUgQXJjYWRpYW4gdmljdG9yeSBhbmQgYXQgdGhlIGFwcHJvYWNoIG9mIEFyY2hpZGFtdXMsIG5vIG9uZSBjb3VsZCByZXN0cmFpbiBoaW1zZWxmLCBidXQgZmlyc3QgaGlzIGZhdGhlciB3ZW50IHRvIG1lZXQgaGltLCB3ZWVwaW5nIGZvciBqb3ksIGFuZCBhZnRlciBoaW0gdGhlIGNoaWVmIG1hZ2lzdHJhdGVzLCB3aGlsZSB0aGUgZWxkZXJseSBtZW4gYW5kIHRoZSB3b21lbiB3ZW50IGRvd24gaW4gYSB0aHJvbmcgdG8gdGhlIHJpdmVyLCBsaWZ0aW5nIHRoZWlyIGhhbmRzIHRvIGhlYXZlbiBhbmQgYmxlc3NpbmcgdGhlIGdvZHMsIGFzIGlmIFNwYXJ0YSBoYWQgd2lwZWQgYXdheSBoZXIgdW5tZXJpdGVkIGRpc2dyYWNlcyBhbmQgbm93IHNhdyB0aGUgbGlnaHQgc2hpbmUgYnJpZ2h0IGFnYWluIGFzIG9mIG9sZDsgZm9yIGJlZm9yZSB0aGlzLCB3ZSBhcmUgdG9sZCwgaGVyIG1lbiBjb3VsZCBub3Qgc28gbXVjaCBhcyBsb29rIHRoZWlyIHdpdmVzIGluIHRoZSBmYWNlLCBvdXQgb2Ygc2hhbWUgYXQgdGhlaXIgZGlzYXN0ZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMgaGltc2VsZiBub3cgZGVjbGluZWQgbWlsaXRhcnkgc2VydmljZSBvbiBhY2NvdW50IG9mIGhpcyB5ZWFycywgYnV0IEFyY2hpZGFtdXMgaGlzIHNvbiwgd2l0aCBhc3Npc3RhbmNlIHdoaWNoIGNhbWUgZnJvbSB0aGUgdHlyYW50IG9mIFNpY2lseSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RGlvbnlzaXVzIHRoZSBFbGRlci48L25vdGU+IGNvbnF1ZXJlZCB0aGUgQXJjYWRpYW5zIGluIHRoZSBzby1jYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRlYXJsZXNzIGJhdHRsZSw8L3E+IHdoZXJlIG5vdCBvbmUgb2YgaGlzIG93biBtZW4gZmVsbCwgYW5kIGhlIHNsZXcgZ3JlYXQgbnVtYmVycyBvZiB0aGUgZW5lbXkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM2OCBCLkMuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDcuMS4yOCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmlpLiAxLCAyOC0zMjwvYmlibD4pLjwvbm90ZT4gVGhpcyB2aWN0b3J5LCBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSwgc2hvd2VkIHRoZSB3ZWFrbmVzcyBvZiB0aGUgY2l0eS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDcuMS4yOCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmlpLiAxLCAyOC0zMjwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmlpLiAxLCAyOC0zMjwvdHJhbnNsYXRpb24+"
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB1cCB0byB0aGlzIHRpbWUgdGhleSB3ZXJlIHdvbnQgdG8gdGhpbmsgdGhlIGNvbnF1ZXN0IG9mIHRoZWlyIGVuZW1pZXMgc28gY3VzdG9tYXJ5IGFuZCBuYXR1cmFsIGEgdGhpbmcgZm9yIHRoZW0gdG8gYWNoaWV2ZSwgdGhhdCBubyBzYWNyaWZpY2UgZm9yIHZpY3Rvcnkgd2FzIG9mZmVyZWQgaW4gdGhlIGNpdHkgdG8gdGhlIGdvZHMsIGJleW9uZCB0aGF0IG9mIGEgY29jaywgbmVpdGhlciBkaWQgdGhlIHdpbm5lcnMgb2YgdGhlIGNvbnRlc3QgZXh1bHQsIG5vciB0aG9zZSB3aG8gaGVhcmQgb2YgdGhlaXIgdmljdG9yeSBzaG93IGdyZWF0IGpveS4gTmF5LCBldmVuIGFmdGVyIHRoZSBiYXR0bGUgYXQgTWFudGluZWEsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDQxOCBCLkMuLCB3aGVuIHRoZSBMYWNlZGFlbW9uaWFucyBkZWZlYXRlZCBhbiBhbGxpZWQgZm9yY2Ugb2YgTWFudGluZWFucywgQXJnaXZlcywgYW5kIEF0aGVuaWFucyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gNS42NCIgdmFsaWQ9InllcyI+VGh1Y3lkaWRlcywgdi4gNjQtNzU8L2JpYmw+KS48L25vdGU+IHdoaWNoIFRodWN5ZGlkZXMgaGFzIGRlc2NyaWJlZCwgdGhlIG9uZSB3aG8gZmlyc3QgYW5ub3VuY2VkIHRoZSB2aWN0b3J5IGhhZCBubyBvdGhlciByZXdhcmQgZm9yIGhpcyBnbGFkIHRpZGluZ3MgdGhhbiBhIHBpZWNlIG9mIG1lYXQgc2VudCBieSB0aGUgbWFnaXN0cmF0ZXMgZnJvbSB0aGUgcHVibGljIG1lc3MuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gNS42NCIgdmFsaWQ9InllcyI+VGh1Y3lkaWRlcywgdi4gNjQtNzU8L2JpYmw+KS48L3RyYW5zbGF0aW9uPg=="
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3csIGF0IHRoZSBuZXdzIG9mIHRoZSBBcmNhZGlhbiB2aWN0b3J5IGFuZCBhdCB0aGUgYXBwcm9hY2ggb2YgQXJjaGlkYW11cywgbm8gb25lIGNvdWxkIHJlc3RyYWluIGhpbXNlbGYsIGJ1dCBmaXJzdCBoaXMgZmF0aGVyIHdlbnQgdG8gbWVldCBoaW0sIHdlZXBpbmcgZm9yIGpveSwgYW5kIGFmdGVyIGhpbSB0aGUgY2hpZWYgbWFnaXN0cmF0ZXMsIHdoaWxlIHRoZSBlbGRlcmx5IG1lbiBhbmQgdGhlIHdvbWVuIHdlbnQgZG93biBpbiBhIHRocm9uZyB0byB0aGUgcml2ZXIsIGxpZnRpbmcgdGhlaXIgaGFuZHMgdG8gaGVhdmVuIGFuZCBibGVzc2luZyB0aGUgZ29kcywgYXMgaWYgU3BhcnRhIGhhZCB3aXBlZCBhd2F5IGhlciB1bm1lcml0ZWQgZGlzZ3JhY2VzIGFuZCBub3cgc2F3IHRoZSBsaWdodCBzaGluZSBicmlnaHQgYWdhaW4gYXMgb2Ygb2xkOyBmb3IgYmVmb3JlIHRoaXMsIHdlIGFyZSB0b2xkLCBoZXIgbWVuIGNvdWxkIG5vdCBzbyBtdWNoIGFzIGxvb2sgdGhlaXIgd2l2ZXMgaW4gdGhlIGZhY2UsIG91dCBvZiBzaGFtZSBhdCB0aGVpciBkaXNhc3RlcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIE1lc3NlbmUgd2FzIGJ1aWx0IGJ5IEVwYW1pbm9uZGFzLCBhbmQgaXRzIGZvcm1lciBjaXRpemVucyBmbG9ja2VkIGludG8gaXQgZnJvbSBhbGwgcXVhcnRlcnMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNjkgQi5DLjwvbm90ZT4gdGhlIFNwYXJ0YW5zIGhhZCBub3QgdGhlIGNvdXJhZ2UgdG8gY29udGVzdCB0aGUgaXNzdWUgbm9yIHRoZSBhYmlsaXR5IHRvIGhpbmRlciBpdCwgYnV0IGNoZXJpc2hlZCB0aGUgZGVlcGVzdCByZXNlbnRtZW50IGFnYWluc3QgQWdlc2lsYcO8cywgYmVjYXVzZSBhIGNvdW50cnkgd2hpY2ggd2FzIG5vdCBvZiBsZXNzIGV4dGVudCB0aGFuIHRoZWlyIG93biwgd2hpY2ggc3Rvb2QgZmlyc3QgYW1vbmcgSGVsbGVuaWMgbGFuZHMgZm9yIGl0cyBmZXJ0aWxpdHksIHRoZSBwb3NzZXNzaW9uIGFuZCBmcnVpdHMgb2Ygd2hpY2ggdGhleSBoYWQgZW5qb3llZCBmb3Igc28gbG9uZyBhIHRpbWUsIGhhZCBiZWVuIGxvc3QgYnkgdGhlbSBkdXJpbmcgaGlzIHJlaWduLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyByZWFzb24sIHRvbywgQWdlc2lsYcO8cyB3b3VsZCBub3QgYWNjZXB0IHRoZSBwZWFjZSB3aGljaCB3YXMgcHJvZmZlcmVkIGJ5IHRoZSBUaGViYW5zLiBIZSB3YXMgbm90IHdpbGxpbmcgdG8gZ2l2ZSB1cCB0byB0aGVtIGZvcm1hbGx5IHRoZSBjb3VudHJ5IHdoaWNoIHdhcyBhY3R1YWxseSBpbiB0aGVpciBwb3dlciwgYW5kIHBlcnNpc3RlZCBpbiBoaXMgb3Bwb3NpdGlvbi4gQXMgYSBjb25zZXF1ZW5jZSwgaGUgbm90IG9ubHkgZGlkIG5vdCByZWNvdmVyIE1lc3NlbmlhLCBidXQgYWxtb3N0IGxvc3QgU3BhcnRhIGJlc2lkZXMsIGFmdGVyIGJlaW5nIG91dGdlbmVyYWxsZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHRoZSBNYW50aW5lYW5zIGNoYW5nZWQgdGhlaXIgYWxsZWdpYW5jZSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM2MiBCLkMuPC9ub3RlPiByZXZvbHRlZCBmcm9tIFRoZWJlcywgYW5kIGNhbGxlZCBpbiB0aGUgTGFjZWRhZW1vbmlhbnMgdG8gaGVscCB0aGVtLCBFcGFtaW5vbmRhcywgbGVhcm5pbmcgdGhhdCBBZ2VzaWxhw7xzIGhhZCBtYXJjaGVkIG91dCBmcm9tIFNwYXJ0YSB3aXRoIGhpcyBmb3JjZXMgYW5kIHdhcyBhcHByb2FjaGluZywgc2V0IG91dCBieSBuaWdodCBmcm9tIFRlZ2VhLCB3aXRob3V0IHRoZSBrbm93bGVkZ2Ugb2YgdGhlIE1hbnRpbmVhbnMsIGFuZCBsZWQgaGlzIGFybXkgYWdhaW5zdCBTcGFydGEgaXRzZWxmLiBIZSBwYXNzZWQgYnkgQWdlc2lsYcO8cywgYW5kIGNhbWUgd2l0aGluIGEgbGl0dGxlIG9mIHN1ZGRlbmx5IHNlaXppbmcgdGhlIGNpdHkgaW4gYSBkZWZlbmNlbGVzcyBzdGF0ZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgoJCQkJCSAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MaWtlIGEgbmVzdCBvZiB5b3VuZyBiaXJkcyB1dHRlcmx5IGJlcmVmdCBvZiBpdHMgbmF0dXJhbCBkZWZlbmRlcnM8L3E+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA3LjUuMTAiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aWkuIDUsIDEwPC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBFdXRoeW51cywgYSBUaGVzcGlhbiwgYXMgQ2FsbGlzdGhlbmVzIHNheXMsIG9yLCBhY2NvcmRpbmcgdG8gWGVub3Bob24sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNy41LjEwIiB2YWxpZD0ieWVzIj5Mb2MuIGNpdC48L2JpYmw+IENmLiBhbHNvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNS44Mi42IiB2YWxpZD0ieWVzIj5EaW9kb3J1cywgeHYsIDgyLCA2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhIGNlcnRhaW4gQ3JldGFuLCBicm91Z2h0IHdvcmQgdG8gQWdlc2lsYcO8cywgd2hvIHF1aWNrbHkgc2VudCBvbiBhIGhvcnNlbWFuIHRvIHdhcm4gdGhlIHBlb3BsZSBpbiBTcGFydGEsIGFuZCBub3QgbG9uZyBhZnRlciBoaXMgYXJyaXZhbCB0aGUgVGhlYmFucyB3ZXJlIGNyb3NzaW5nIHRoZSBFdXJvdGFzIGFuZCBhdHRhY2tpbmcgdGhlIGNpdHksIHdoaWxlIEFnZXNpbGHDvHMgZGVmZW5kZWQgaXQgcmlnaHQgdmlnb3JvdXNseSBhbmQgaW4gYSBtYW5uZXIgbm90IHRvIGJlIGV4cGVjdGVkIG9mIGhpcyB5ZWFycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGRpZCBub3QgdGhpbmssIGFzIG9uIGEgZm9ybWVyIG9jY2FzaW9uLCB0aGF0IHRoZSBjcmlzaXMgZGVtYW5kZWQgc2FmZSBhbmQgY2F1dGlvdXMgbWVhc3VyZXMsIGJ1dCByYXRoZXIgZGVlZHMgb2YgZGVzcGVyYXRlIGRhcmluZy4gSW4gdGhlc2UgaGUgaGFkIG5ldmVyIHB1dCBjb25maWRlbmNlIGJlZm9yZSwgbm9yIGhhZCBoZSBlbXBsb3llZCB0aGVtLCBidXQgdGhlbiBpdCB3YXMgb25seSBieSB0aGVpciBhaWQgdGhhdCBoZSByZXBlbGxlZCB0aGUgZGFuZ2VyLCBzbmF0Y2hpbmcgdGhlIGNpdHkgb3V0IG9mIHRoZSBncmFzcCBvZiBFcGFtaW5vbmRhcywgZXJlY3RpbmcgYSB0cm9waHkgb2YgdmljdG9yeSwgYW5kIHNob3dpbmcgdGhlaXIgd2l2ZXMgYW5kIGNoaWxkcmVuIHRoYXQgdGhlIExhY2VkYWVtb25pYW5zIHdlcmUgbWFraW5nIHRoZSBmYWlyZXN0IG9mIGFsbCByZXR1cm5zIHRvIHRoZWlyIGNvdW50cnkgZm9yIGl0cyByZWFyaW5nIG9mIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFyY2hpZGFtdXMsIHRvbywgZm91Z2h0IGFtb25nIHRoZSBmb3JlbW9zdCwgY29uc3BpY3VvdXMgZm9yIGhpcyBpbXBldHVvdXMgY291cmFnZSBhbmQgZm9yIGhpcyBhZ2lsaXR5LCBydW5uaW5nIHN3aWZ0bHkgdGhyb3VnaCB0aGUgbmFycm93IHN0cmVldHMgdG8gdGhlIGVuZGFuZ2VyZWQgcG9pbnRzIGluIHRoZSBiYXR0bGUsIGFuZCBldmVyeXdoZXJlIHByZXNzaW5nIGhhcmQgdXBvbiB0aGUgZW5lbXkgd2l0aCBoaXMgZmV3IGZvbGxvd2Vycy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA3LjUuMTIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aWkuIDUsIDEyLTE0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBCdXQgSSB0aGluayB0aGF0IElzaWRhcywgdGhlIHNvbiBvZiBQaG9lYmlkYXMsIG11c3QgaGF2ZSBiZWVuIGEgc3RyYW5nZSBhbmQgbWFydmVsbG91cyBzaWdodCwgbm90IG9ubHkgdG8gaGlzIGZlbGxvdy1jaXRpemVucywgYnV0IGFsc28gdG8gaGlzIGVuZW1pZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBvZiBjb25zcGljdW91cyBiZWF1dHkgYW5kIHN0YXR1cmUsIGFuZCBhdCBhbiBhZ2Ugd2hlbiB0aGUgaHVtYW4gZmxvd2VyIGhhcyB0aGUgZ3JlYXRlc3QgY2hhcm0sIGFzIHRoZSBib3kgbWVyZ2VzIGludG8gdGhlIG1hbi4gTmFrZWQgYXMgaGUgd2FzLCB3aXRob3V0IGVpdGhlciBkZWZlbnNpdmUgYXJtb3VyIG9yIGNsb3RoaW5nLOKAlGZvciBoZSBoYWQganVzdCBhbm9pbnRlZCBoaXMgYm9keSB3aXRoIG9pbCzigJRoZSB0b29rIGEgc3BlYXIgaW4gb25lIGhhbmQsIGFuZCBhIHN3b3JkIGluIHRoZSBvdGhlciwgbGVhcGVkIGZvcnRoIGZyb20gaGlzIGhvdXNlLCBhbmQgYWZ0ZXIgcHVzaGluZyBoaXMgd2F5IHRocm91Z2ggdGhlIG1pZHN0IG9mIHRoZSBjb21iYXRhbnRzLCByYW5nZWQgdXAgYW5kIGRvd24gYW1vbmcgdGhlIGVuZW15LCBzbWl0aW5nIGFuZCBsYXlpbmcgbG93IGFsbCB3aG8gZW5jb3VudGVyZWQgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm8gbWFuIGdhdmUgaGltIGEgd291bmQsIHdoZXRoZXIgaXQgd2FzIHRoYXQgYSBnb2Qgc2hpZWxkZWQgaGltIG9uIGFjY291bnQgb2YgaGlzIHZhbG91ciwgb3IgdGhhdCB0aGUgZW5lbXkgdGhvdWdodCBoaW0gdGFsbGVyIGFuZCBtaWdodGllciB0aGFuIGEgbWVyZSBtYW4gY291bGQgYmUuIEZvciB0aGlzIGV4cGxvaXQgaXQgaXMgc2FpZCB0aGF0IHRoZSBlcGhvcnMgcHV0IGEgZ2FybGFuZCBvbiBoaXMgaGVhZCwgYW5kIHRoZW4gZmluZWQgaGltIGEgdGhvdXNhbmQgZHJhY2htYXMsIGJlY2F1c2UgaGUgaGFkIGRhcmVkIHRvIGhhemFyZCBoaXMgbGlmZSBpbiBiYXR0bGUgd2l0aG91dCBhcm1vdXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gTWVzc2VuZSB3YXMgYnVpbHQgYnkgRXBhbWlub25kYXMsIGFuZCBpdHMgZm9ybWVyIGNpdGl6ZW5zIGZsb2NrZWQgaW50byBpdCBmcm9tIGFsbCBxdWFydGVycywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzY5IEIuQy48L25vdGU+IHRoZSBTcGFydGFucyBoYWQgbm90IHRoZSBjb3VyYWdlIHRvIGNvbnRlc3QgdGhlIGlzc3VlIG5vciB0aGUgYWJpbGl0eSB0byBoaW5kZXIgaXQsIGJ1dCBjaGVyaXNoZWQgdGhlIGRlZXBlc3QgcmVzZW50bWVudCBhZ2FpbnN0IEFnZXNpbGHDvHMsIGJlY2F1c2UgYSBjb3VudHJ5IHdoaWNoIHdhcyBub3Qgb2YgbGVzcyBleHRlbnQgdGhhbiB0aGVpciBvd24sIHdoaWNoIHN0b29kIGZpcnN0IGFtb25nIEhlbGxlbmljIGxhbmRzIGZvciBpdHMgZmVydGlsaXR5LCB0aGUgcG9zc2Vzc2lvbiBhbmQgZnJ1aXRzIG9mIHdoaWNoIHRoZXkgaGFkIGVuam95ZWQgZm9yIHNvIGxvbmcgYSB0aW1lLCBoYWQgYmVlbiBsb3N0IGJ5IHRoZW0gZHVyaW5nIGhpcyByZWlnbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiwgdG9vLCBBZ2VzaWxhw7xzIHdvdWxkIG5vdCBhY2NlcHQgdGhlIHBlYWNlIHdoaWNoIHdhcyBwcm9mZmVyZWQgYnkgdGhlIFRoZWJhbnMuIEhlIHdhcyBub3Qgd2lsbGluZyB0byBnaXZlIHVwIHRvIHRoZW0gZm9ybWFsbHkgdGhlIGNvdW50cnkgd2hpY2ggd2FzIGFjdHVhbGx5IGluIHRoZWlyIHBvd2VyLCBhbmQgcGVyc2lzdGVkIGluIGhpcyBvcHBvc2l0aW9uLiBBcyBhIGNvbnNlcXVlbmNlLCBoZSBub3Qgb25seSBkaWQgbm90IHJlY292ZXIgTWVzc2VuaWEsIGJ1dCBhbG1vc3QgbG9zdCBTcGFydGEgYmVzaWRlcywgYWZ0ZXIgYmVpbmcgb3V0Z2VuZXJhbGxlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHRoZSBNYW50aW5lYW5zIGNoYW5nZWQgdGhlaXIgYWxsZWdpYW5jZSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzYyIEIuQy48L25vdGU+IHJldm9sdGVkIGZyb20gVGhlYmVzLCBhbmQgY2FsbGVkIGluIHRoZSBMYWNlZGFlbW9uaWFucyB0byBoZWxwIHRoZW0sIEVwYW1pbm9uZGFzLCBsZWFybmluZyB0aGF0IEFnZXNpbGHDvHMgaGFkIG1hcmNoZWQgb3V0IGZyb20gU3BhcnRhIHdpdGggaGlzIGZvcmNlcyBhbmQgd2FzIGFwcHJvYWNoaW5nLCBzZXQgb3V0IGJ5IG5pZ2h0IGZyb20gVGVnZWEsIHdpdGhvdXQgdGhlIGtub3dsZWRnZSBvZiB0aGUgTWFudGluZWFucywgYW5kIGxlZCBoaXMgYXJteSBhZ2FpbnN0IFNwYXJ0YSBpdHNlbGYuIEhlIHBhc3NlZCBieSBBZ2VzaWxhw7xzLCBhbmQgY2FtZSB3aXRoaW4gYSBsaXR0bGUgb2Ygc3VkZGVubHkgc2VpemluZyB0aGUgY2l0eSBpbiBhIGRlZmVuY2VsZXNzIHN0YXRlLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MaWtlIGEgbmVzdCBvZiB5b3VuZyBiaXJkcyB1dHRlcmx5IGJlcmVmdCBvZiBpdHMgbmF0dXJhbCBkZWZlbmRlcnM8L3E+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDcuNS4xMCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdmlpLiA1LCAxMDwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGlrZSBhIG5lc3Qgb2YgeW91bmcgYmlyZHMgdXR0ZXJseSBiZXJlZnQgb2YgaXRzIG5hdHVyYWwgZGVmZW5kZXJzPC9xPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA3LjUuMTAiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpaS4gNSwgMTA8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpaS4gNSwgMTA8L3RyYW5zbGF0aW9uPg=="
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBFdXRoeW51cywgYSBUaGVzcGlhbiwgYXMgQ2FsbGlzdGhlbmVzIHNheXMsIG9yLCBhY2NvcmRpbmcgdG8gWGVub3Bob24sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDcuNS4xMCIgdmFsaWQ9InllcyI+TG9jLiBjaXQuPC9iaWJsPiBDZi4gYWxzbyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNS44Mi42IiB2YWxpZD0ieWVzIj5EaW9kb3J1cywgeHYsIDgyLCA2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhIGNlcnRhaW4gQ3JldGFuLCBicm91Z2h0IHdvcmQgdG8gQWdlc2lsYcO8cywgd2hvIHF1aWNrbHkgc2VudCBvbiBhIGhvcnNlbWFuIHRvIHdhcm4gdGhlIHBlb3BsZSBpbiBTcGFydGEsIGFuZCBub3QgbG9uZyBhZnRlciBoaXMgYXJyaXZhbCB0aGUgVGhlYmFucyB3ZXJlIGNyb3NzaW5nIHRoZSBFdXJvdGFzIGFuZCBhdHRhY2tpbmcgdGhlIGNpdHksIHdoaWxlIEFnZXNpbGHDvHMgZGVmZW5kZWQgaXQgcmlnaHQgdmlnb3JvdXNseSBhbmQgaW4gYSBtYW5uZXIgbm90IHRvIGJlIGV4cGVjdGVkIG9mIGhpcyB5ZWFycy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDcuNS4xMCIgdmFsaWQ9InllcyI+TG9jLiBjaXQuPC9iaWJsPiBDZi4gYWxzbyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNS44Mi42IiB2YWxpZD0ieWVzIj5EaW9kb3J1cywgeHYsIDgyLCA2LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBkaWQgbm90IHRoaW5rLCBhcyBvbiBhIGZvcm1lciBvY2Nhc2lvbiwgdGhhdCB0aGUgY3Jpc2lzIGRlbWFuZGVkIHNhZmUgYW5kIGNhdXRpb3VzIG1lYXN1cmVzLCBidXQgcmF0aGVyIGRlZWRzIG9mIGRlc3BlcmF0ZSBkYXJpbmcuIEluIHRoZXNlIGhlIGhhZCBuZXZlciBwdXQgY29uZmlkZW5jZSBiZWZvcmUsIG5vciBoYWQgaGUgZW1wbG95ZWQgdGhlbSwgYnV0IHRoZW4gaXQgd2FzIG9ubHkgYnkgdGhlaXIgYWlkIHRoYXQgaGUgcmVwZWxsZWQgdGhlIGRhbmdlciwgc25hdGNoaW5nIHRoZSBjaXR5IG91dCBvZiB0aGUgZ3Jhc3Agb2YgRXBhbWlub25kYXMsIGVyZWN0aW5nIGEgdHJvcGh5IG9mIHZpY3RvcnksIGFuZCBzaG93aW5nIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIG1ha2luZyB0aGUgZmFpcmVzdCBvZiBhbGwgcmV0dXJucyB0byB0aGVpciBjb3VudHJ5IGZvciBpdHMgcmVhcmluZyBvZiB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFyY2hpZGFtdXMsIHRvbywgZm91Z2h0IGFtb25nIHRoZSBmb3JlbW9zdCwgY29uc3BpY3VvdXMgZm9yIGhpcyBpbXBldHVvdXMgY291cmFnZSBhbmQgZm9yIGhpcyBhZ2lsaXR5LCBydW5uaW5nIHN3aWZ0bHkgdGhyb3VnaCB0aGUgbmFycm93IHN0cmVldHMgdG8gdGhlIGVuZGFuZ2VyZWQgcG9pbnRzIGluIHRoZSBiYXR0bGUsIGFuZCBldmVyeXdoZXJlIHByZXNzaW5nIGhhcmQgdXBvbiB0aGUgZW5lbXkgd2l0aCBoaXMgZmV3IGZvbGxvd2Vycy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNy41LjEyIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2aWkuIDUsIDEyLTE0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBCdXQgSSB0aGluayB0aGF0IElzaWRhcywgdGhlIHNvbiBvZiBQaG9lYmlkYXMsIG11c3QgaGF2ZSBiZWVuIGEgc3RyYW5nZSBhbmQgbWFydmVsbG91cyBzaWdodCwgbm90IG9ubHkgdG8gaGlzIGZlbGxvdy1jaXRpemVucywgYnV0IGFsc28gdG8gaGlzIGVuZW1pZXMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA3LjUuMTIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpaS4gNSwgMTItMTQuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpaS4gNSwgMTItMTQuPC90cmFuc2xhdGlvbj4="
translation['34.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBvZiBjb25zcGljdW91cyBiZWF1dHkgYW5kIHN0YXR1cmUsIGFuZCBhdCBhbiBhZ2Ugd2hlbiB0aGUgaHVtYW4gZmxvd2VyIGhhcyB0aGUgZ3JlYXRlc3QgY2hhcm0sIGFzIHRoZSBib3kgbWVyZ2VzIGludG8gdGhlIG1hbi4gTmFrZWQgYXMgaGUgd2FzLCB3aXRob3V0IGVpdGhlciBkZWZlbnNpdmUgYXJtb3VyIG9yIGNsb3RoaW5nLOKAlGZvciBoZSBoYWQganVzdCBhbm9pbnRlZCBoaXMgYm9keSB3aXRoIG9pbCzigJRoZSB0b29rIGEgc3BlYXIgaW4gb25lIGhhbmQsIGFuZCBhIHN3b3JkIGluIHRoZSBvdGhlciwgbGVhcGVkIGZvcnRoIGZyb20gaGlzIGhvdXNlLCBhbmQgYWZ0ZXIgcHVzaGluZyBoaXMgd2F5IHRocm91Z2ggdGhlIG1pZHN0IG9mIHRoZSBjb21iYXRhbnRzLCByYW5nZWQgdXAgYW5kIGRvd24gYW1vbmcgdGhlIGVuZW15LCBzbWl0aW5nIGFuZCBsYXlpbmcgbG93IGFsbCB3aG8gZW5jb3VudGVyZWQgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBubyBtYW4gZ2F2ZSBoaW0gYSB3b3VuZCwgd2hldGhlciBpdCB3YXMgdGhhdCBhIGdvZCBzaGllbGRlZCBoaW0gb24gYWNjb3VudCBvZiBoaXMgdmFsb3VyLCBvciB0aGF0IHRoZSBlbmVteSB0aG91Z2h0IGhpbSB0YWxsZXIgYW5kIG1pZ2h0aWVyIHRoYW4gYSBtZXJlIG1hbiBjb3VsZCBiZS4gRm9yIHRoaXMgZXhwbG9pdCBpdCBpcyBzYWlkIHRoYXQgdGhlIGVwaG9ycyBwdXQgYSBnYXJsYW5kIG9uIGhpcyBoZWFkLCBhbmQgdGhlbiBmaW5lZCBoaW0gYSB0aG91c2FuZCBkcmFjaG1hcywgYmVjYXVzZSBoZSBoYWQgZGFyZWQgdG8gaGF6YXJkIGhpcyBsaWZlIGluIGJhdHRsZSB3aXRob3V0IGFybW91ci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSBmZXcgZGF5cyBhZnRlcndhcmRzIGEgYmF0dGxlIHdhcyBmb3VnaHQgbmVhciBNYW50aW5lYSwgaW4gd2hpY2ggRXBhbWlub25kYXMgaGFkIGFscmVhZHkgcm91dGVkIHRoZSB2YW4gb2YgdGhlIExhY2VkYWVtb25pYW5zLCBhbmQgd2FzIHN0aWxsIGVhZ2VybHkgcHJlc3Npbmcgb24gaW4gcHVyc3VpdCBvZiB0aGVtLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDcuNS4yMiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IHZpaS4gNSwgMjItMjQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoZW4gQW50aWNyYXRlcywgYSBTcGFydGFuLCBmYWNlZCBoaW0gYW5kIHNtb3RlIGhpbSB3aXRoIGEgc3BlYXIsIGFzIERpb3Njb3JpZGVzIHRlbGxzIHRoZSBzdG9yeTsgYnV0IHRoZSBMYWNlZGFlbW9uaWFucyB0byB0aGlzIGRheSBjYWxsIHRoZSBkZXNjZW5kYW50cyBvZiBBbnRpY3JhdGVzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bWFjaGFlcmlvbmVzLDwvcT4gb3IgPGVtcGg+CiAgICAgICAgICAgICAgIDxlbXBoPnN3b3Jkc21lbjwvZW1waD4KICAgICAgICAgICAgPC9lbXBoPiwgYmVjYXVzZSBoZSB1c2VkIGEgc3dvcmQgZm9yIHRoZSBibG93LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIExhY2VkYWVtb25pYW5zIHdlcmUgZmlsbGVkIHdpdGggc3VjaCBhZG1pcmluZyBsb3ZlIGZvciBoaW0gYmVjYXVzZSBvZiB0aGUgZmVhciBpbiB3aGljaCB0aGV5IGhlbGQgRXBhbWlub25kYXMgd2hpbGUgbGl2aW5nLCB0aGF0IHRoZXkgdm90ZWQgaG9ub3VycyBhbmQgZ2lmdHMgdG8gQW50aWNyYXRlcyBoaW1zZWxmLCBhbmQgdG8gaGlzIHBvc3Rlcml0eSBleGVtcHRpb24gZnJvbSB0YXhlcywgYW4gaW1tdW5pdHkgd2hpY2ggaW4gbXkgb3duIGRheSBhbHNvIGlzIGVuam95ZWQgYnkgQ2FsbGljcmF0ZXMsIG9uZSBvZiB0aGUgZGVzY2VuZGFudHMgb2YgQW50aWNyYXRlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSBmZXcgZGF5cyBhZnRlcndhcmRzIGEgYmF0dGxlIHdhcyBmb3VnaHQgbmVhciBNYW50aW5lYSwgaW4gd2hpY2ggRXBhbWlub25kYXMgaGFkIGFscmVhZHkgcm91dGVkIHRoZSB2YW4gb2YgdGhlIExhY2VkYWVtb25pYW5zLCBhbmQgd2FzIHN0aWxsIGVhZ2VybHkgcHJlc3Npbmcgb24gaW4gcHVyc3VpdCBvZiB0aGVtLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA3LjUuMjIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpaS4gNSwgMjItMjQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoZW4gQW50aWNyYXRlcywgYSBTcGFydGFuLCBmYWNlZCBoaW0gYW5kIHNtb3RlIGhpbSB3aXRoIGEgc3BlYXIsIGFzIERpb3Njb3JpZGVzIHRlbGxzIHRoZSBzdG9yeTsgYnV0IHRoZSBMYWNlZGFlbW9uaWFucyB0byB0aGlzIGRheSBjYWxsIHRoZSBkZXNjZW5kYW50cyBvZiBBbnRpY3JhdGVzIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA3LjUuMjIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpaS4gNSwgMjItMjQuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpaS4gNSwgMjItMjQuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5tYWNoYWVyaW9uZXMsPC9xPiBvciA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnN3b3Jkc21lbjwvZW1waD4KICAgICAgICAgICAgPC9lbXBoPiwgYmVjYXVzZSBoZSB1c2VkIGEgc3dvcmQgZm9yIHRoZSBibG93LiAKCQkJCTxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+c3dvcmRzbWVuPC9lbXBoPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBmaWxsZWQgd2l0aCBzdWNoIGFkbWlyaW5nIGxvdmUgZm9yIGhpbSBiZWNhdXNlIG9mIHRoZSBmZWFyIGluIHdoaWNoIHRoZXkgaGVsZCBFcGFtaW5vbmRhcyB3aGlsZSBsaXZpbmcsIHRoYXQgdGhleSB2b3RlZCBob25vdXJzIGFuZCBnaWZ0cyB0byBBbnRpY3JhdGVzIGhpbXNlbGYsIGFuZCB0byBoaXMgcG9zdGVyaXR5IGV4ZW1wdGlvbiBmcm9tIHRheGVzLCBhbiBpbW11bml0eSB3aGljaCBpbiBteSBvd24gZGF5IGFsc28gaXMgZW5qb3llZCBieSBDYWxsaWNyYXRlcywgb25lIG9mIHRoZSBkZXNjZW5kYW50cyBvZiBBbnRpY3JhdGVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHRoZSBiYXR0bGUgYW5kIHRoZSBkZWF0aCBvZiBFcGFtaW5vbmRhcywgd2hlbiB0aGUgR3JlZWtzIGNvbmNsdWRlZCBwZWFjZSBhbW9uZyB0aGVtc2VsdmVzLCBBZ2VzaWxhw7xzIGFuZCBoaXMgcGFydGlzYW5zIHRyaWVkIHRvIGV4Y2x1ZGUgdGhlIE1lc3NlbmlhbnMgZnJvbSB0aGUgb2F0aCBvZiByYXRpZmljYXRpb24sIG9uIHRoZSBncm91bmQgdGhhdCB0aGV5IGhhZCBubyBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGFsbCB0aGUgcmVzdCBhZG1pdHRlZCB0aGUgTWVzc2VuaWFucyBhbmQgYWNjZXB0ZWQgdGhlaXIgb2F0aHMsIHRoZSBMYWNlZGFlbW9uaWFucyBoZWxkIGFsb29mIGZyb20gdGhlIHBlYWNlLCBhbmQgdGhleSBhbG9uZSByZW1haW5lZCBhdCB3YXIgaW4gdGhlIGhvcGUgb2YgcmVjb3ZlcmluZyBNZXNzZW5pYS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuODkuMSIgdmFsaWQ9InllcyI+RGlvZG9ydXMsIHh2LiA4OSwgMSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBZ2VzaWxhw7xzIHdhcyB0aGVyZWZvcmUgZGVlbWVkIGEgaGVhZHN0cm9uZyBhbmQgc3R1YmJvcm4gbWFuLCBhbmQgaW5zYXRpYWJsZSBvZiB3YXIsIHNpbmNlIGhlIGRpZCBhbGwgaW4gaGlzIHBvd2VyIHRvIHVuZGVybWluZSBhbmQgcG9zdHBvbmUgdGhlIGdlbmVyYWwgcGVhY2UsIGFuZCBhZ2FpbiBzaW5jZSBoaXMgbGFjayBvZiByZXNvdXJjZXMgY29tcGVsbGVkIGhpbSB0byBsYXkgYnVyZGVucyBvbiBoaXMgZnJpZW5kcyBpbiB0aGUgY2l0eSBhbmQgdG8gdGFrZSBsb2FucyBhbmQgY29udHJpYnV0aW9ucyBmcm9tIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaXQgd2FzIGhpcyBkdXR5IHRvIHB1dCBhbiBlbmQgdG8gdGhlaXIgZXZpbHMsIG5vdyB0aGF0IG9wcG9ydHVuaXR5IG9mZmVyZWQsIGFuZCBub3QsIGFmdGVyIGhhdmluZyBsb3N0IFNwYXJ0YSdzIHdob2xlIGVtcGlyZSwgdmFzdCBhcyBpdCB3YXMsIHdpdGggaXRzIGNpdGllcyBhbmQgaXRzIHN1cHJlbWFjeSBvbiBsYW5kIGFuZCBzZWEsIHRoZW4gdG8gY2Fycnkgb24gYSBwZXR0eSBzdHJ1Z2dsZSBmb3IgdGhlIGdvb2RzIGFuZCByZXZlbnVlcyBvZiBNZXNzZW5lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGFsbCB0aGUgcmVzdCBhZG1pdHRlZCB0aGUgTWVzc2VuaWFucyBhbmQgYWNjZXB0ZWQgdGhlaXIgb2F0aHMsIHRoZSBMYWNlZGFlbW9uaWFucyBoZWxkIGFsb29mIGZyb20gdGhlIHBlYWNlLCBhbmQgdGhleSBhbG9uZSByZW1haW5lZCBhdCB3YXIgaW4gdGhlIGhvcGUgb2YgcmVjb3ZlcmluZyBNZXNzZW5pYS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1Ljg5LjEiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4di4gODksIDEgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQWdlc2lsYcO8cyB3YXMgdGhlcmVmb3JlIGRlZW1lZCBhIGhlYWRzdHJvbmcgYW5kIHN0dWJib3JuIG1hbiwgYW5kIGluc2F0aWFibGUgb2Ygd2FyLCBzaW5jZSBoZSBkaWQgYWxsIGluIGhpcyBwb3dlciB0byB1bmRlcm1pbmUgYW5kIHBvc3Rwb25lIHRoZSBnZW5lcmFsIHBlYWNlLCBhbmQgYWdhaW4gc2luY2UgaGlzIGxhY2sgb2YgcmVzb3VyY2VzIGNvbXBlbGxlZCBoaW0gdG8gbGF5IGJ1cmRlbnMgb24gaGlzIGZyaWVuZHMgaW4gdGhlIGNpdHkgYW5kIHRvIHRha2UgbG9hbnMgYW5kIGNvbnRyaWJ1dGlvbnMgZnJvbSB0aGVtLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1Ljg5LjEiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4di4gODksIDEgZi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaXQgd2FzIGhpcyBkdXR5IHRvIHB1dCBhbiBlbmQgdG8gdGhlaXIgZXZpbHMsIG5vdyB0aGF0IG9wcG9ydHVuaXR5IG9mZmVyZWQsIGFuZCBub3QsIGFmdGVyIGhhdmluZyBsb3N0IFNwYXJ0YSdzIHdob2xlIGVtcGlyZSwgdmFzdCBhcyBpdCB3YXMsIHdpdGggaXRzIGNpdGllcyBhbmQgaXRzIHN1cHJlbWFjeSBvbiBsYW5kIGFuZCBzZWEsIHRoZW4gdG8gY2Fycnkgb24gYSBwZXR0eSBzdHJ1Z2dsZSBmb3IgdGhlIGdvb2RzIGFuZCByZXZlbnVlcyBvZiBNZXNzZW5lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBsb3N0IHN0aWxsIG1vcmUgcmVwdXRhdGlvbiBieSBvZmZlcmluZyB0byB0YWtlIGEgY29tbWFuZCB1bmRlciBUYWNob3MgdGhlIEVneXB0aWFuLiBGb3IgaXQgd2FzIHRob3VnaHQgdW53b3J0aHkgdGhhdCBhIG1hbiB3aG8gaGFkIGJlZW4ganVkZ2VkIG5vYmxlc3QgYW5kIGJlc3QgaW4gSGVsbGFzLCBhbmQgd2hvIGhhZCBmaWxsZWQgdGhlIHdvcmxkIHdpdGggaGlzIGZhbWUsIHNob3VsZCBmdXJuaXNoIGEgcmViZWwgYWdhaW5zdCB0aGUgR3JlYXQgS2luZywgYSBtZXJlIEJhcmJhcmlhbiwgd2l0aCBoaXMgcGVyc29uLCBoaXMgbmFtZSwgYW5kIGhpcyBmYW1lLCBhbmQgdGFrZSBtb25leSBmb3IgaGltLCByZW5kZXJpbmcgdGhlIHNlcnZpY2Ugb2YgYSBoaXJlZCBjYXB0YWluIG9mIG1lcmNlbmFyaWVzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+WGVub3Bob24gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFnZXMuIDIuMjgiIHZhbGlkPSJ5ZXMiPkFnZXNpbGHDvHMsIGlpLiAyOC0zMTwvYmlibD4pIGhhcyBBZ2VzaWxhw7xzIHRha2UgdGhpcyBzdGVwIGluIG9yZGVyIHRvIHB1bmlzaCB0aGUgR3JlYXQgS2luZyBhbmQgbGliZXJhdGUgYWdhaW4gdGhlIEdyZWVrcyBvZiBBc2lhLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZXZlbiBpZiwgbm93IHRoYXQgaGUgd2FzIHBhc3QgZWlnaHR5IHllYXJzIG9mIGFnZSBhbmQgaGlzIHdob2xlIGJvZHkgd2FzIGRpc2ZpZ3VyZWQgd2l0aCB3b3VuZHMsIGhlIGhhZCB0YWtlbiB1cCBhZ2FpbiBoaXMgbm9ibGUgYW5kIGNvbnNwaWN1b3VzIGxlYWRlcnNoaXAgaW4gYmVoYWxmIG9mIHRoZSBmcmVlZG9tIG9mIHRoZSBIZWxsZW5lcywgaGlzIGFtYml0aW9uIHdvdWxkIG5vdCBoYXZlIGJlZW4gYWx0b2dldGhlciBibGFtZWxlc3MsIGFzIG1lbiB0aG91Z2h0LiBGb3IgaG9ub3VyYWJsZSBhY3Rpb24gaGFzIGl0cyBmaXR0aW5nIHRpbWUgYW5kIHNlYXNvbjsgbmF5LCByYXRoZXIsIGl0IGlzIHRoZSBvYnNlcnZhbmNlIG9mIGR1ZSBib3VuZHMgdGhhdCBjb25zdGl0dXRlcyBhbiB1dHRlciBkaWZmZXJlbmNlIGJldHdlZW4gaG9ub3VyYWJsZSBhbmQgYmFzZSBhY3Rpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZ2VzaWxhw7xzLCBob3dldmVyLCBwYWlkIG5vIGhlZWQgdG8gdGhlc2UgY29uc2lkZXJhdGlvbnMsIG5vciBkaWQgaGUgdGhpbmsgYW55IHB1YmxpYyBzZXJ2aWNlIGJlbmVhdGggaGlzIGRpZ25pdHk7IGl0IHdhcyBtb3JlIHVud29ydGh5IG9mIGhpbSwgaW4gaGlzIG9waW5pb24sIHRvIGxpdmUgYW4gaWRsZSBsaWZlIGluIHRoZSBjaXR5LCBhbmQgdG8gc2l0IGRvd24gYW5kIHdhaXQgZm9yIGRlYXRoLiBUaGVyZWZvcmUgaGUgY29sbGVjdGVkIG1lcmNlbmFyaWVzIHdpdGggdGhlIG1vbmV5IHdoaWNoIFRhY2hvcyBzZW50IGhpbSwgZW1iYXJrZWQgdGhlbSBvbiB0cmFuc3BvcnRzLCBhbmQgcHV0IHRvIHNlYSwgYWNjb21wYW5pZWQgYnkgdGhpcnR5IFNwYXJ0YW4gY291bnNlbGxvcnMsIGFzIGZvcm1lcmx5LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2VzLiA2LjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgbG9zdCBzdGlsbCBtb3JlIHJlcHV0YXRpb24gYnkgb2ZmZXJpbmcgdG8gdGFrZSBhIGNvbW1hbmQgdW5kZXIgVGFjaG9zIHRoZSBFZ3lwdGlhbi4gRm9yIGl0IHdhcyB0aG91Z2h0IHVud29ydGh5IHRoYXQgYSBtYW4gd2hvIGhhZCBiZWVuIGp1ZGdlZCBub2JsZXN0IGFuZCBiZXN0IGluIEhlbGxhcywgYW5kIHdobyBoYWQgZmlsbGVkIHRoZSB3b3JsZCB3aXRoIGhpcyBmYW1lLCBzaG91bGQgZnVybmlzaCBhIHJlYmVsIGFnYWluc3QgdGhlIEdyZWF0IEtpbmcsIGEgbWVyZSBCYXJiYXJpYW4sIHdpdGggaGlzIHBlcnNvbiwgaGlzIG5hbWUsIGFuZCBoaXMgZmFtZSwgYW5kIHRha2UgbW9uZXkgZm9yIGhpbSwgcmVuZGVyaW5nIHRoZSBzZXJ2aWNlIG9mIGEgaGlyZWQgY2FwdGFpbiBvZiBtZXJjZW5hcmllcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+WGVub3Bob24gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gMi4yOCIgdmFsaWQ9InllcyI+QWdlc2lsYcO8cywgaWkuIDI4LTMxPC9iaWJsPikgaGFzIEFnZXNpbGHDvHMgdGFrZSB0aGlzIHN0ZXAgaW4gb3JkZXIgdG8gcHVuaXNoIHRoZSBHcmVhdCBLaW5nIGFuZCBsaWJlcmF0ZSBhZ2FpbiB0aGUgR3JlZWtzIG9mIEFzaWEuPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiAyLjI4IiB2YWxpZD0ieWVzIj5BZ2VzaWxhw7xzLCBpaS4gMjgtMzE8L2JpYmw+KSBoYXMgQWdlc2lsYcO8cyB0YWtlIHRoaXMgc3RlcCBpbiBvcmRlciB0byBwdW5pc2ggdGhlIEdyZWF0IEtpbmcgYW5kIGxpYmVyYXRlIGFnYWluIHRoZSBHcmVla3Mgb2YgQXNpYS48L3RyYW5zbGF0aW9uPg=="
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBldmVuIGlmLCBub3cgdGhhdCBoZSB3YXMgcGFzdCBlaWdodHkgeWVhcnMgb2YgYWdlIGFuZCBoaXMgd2hvbGUgYm9keSB3YXMgZGlzZmlndXJlZCB3aXRoIHdvdW5kcywgaGUgaGFkIHRha2VuIHVwIGFnYWluIGhpcyBub2JsZSBhbmQgY29uc3BpY3VvdXMgbGVhZGVyc2hpcCBpbiBiZWhhbGYgb2YgdGhlIGZyZWVkb20gb2YgdGhlIEhlbGxlbmVzLCBoaXMgYW1iaXRpb24gd291bGQgbm90IGhhdmUgYmVlbiBhbHRvZ2V0aGVyIGJsYW1lbGVzcywgYXMgbWVuIHRob3VnaHQuIEZvciBob25vdXJhYmxlIGFjdGlvbiBoYXMgaXRzIGZpdHRpbmcgdGltZSBhbmQgc2Vhc29uOyBuYXksIHJhdGhlciwgaXQgaXMgdGhlIG9ic2VydmFuY2Ugb2YgZHVlIGJvdW5kcyB0aGF0IGNvbnN0aXR1dGVzIGFuIHV0dGVyIGRpZmZlcmVuY2UgYmV0d2VlbiBob25vdXJhYmxlIGFuZCBiYXNlIGFjdGlvbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMsIGhvd2V2ZXIsIHBhaWQgbm8gaGVlZCB0byB0aGVzZSBjb25zaWRlcmF0aW9ucywgbm9yIGRpZCBoZSB0aGluayBhbnkgcHVibGljIHNlcnZpY2UgYmVuZWF0aCBoaXMgZGlnbml0eTsgaXQgd2FzIG1vcmUgdW53b3J0aHkgb2YgaGltLCBpbiBoaXMgb3BpbmlvbiwgdG8gbGl2ZSBhbiBpZGxlIGxpZmUgaW4gdGhlIGNpdHksIGFuZCB0byBzaXQgZG93biBhbmQgd2FpdCBmb3IgZGVhdGguIFRoZXJlZm9yZSBoZSBjb2xsZWN0ZWQgbWVyY2VuYXJpZXMgd2l0aCB0aGUgbW9uZXkgd2hpY2ggVGFjaG9zIHNlbnQgaGltLCBlbWJhcmtlZCB0aGVtIG9uIHRyYW5zcG9ydHMsIGFuZCBwdXQgdG8gc2VhLCBhY2NvbXBhbmllZCBieSB0aGlydHkgU3BhcnRhbiBjb3Vuc2VsbG9ycywgYXMgZm9ybWVybHkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2VzLiA2LjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDYuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aS4gMi48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgaGUgbGFuZGVkIGluIEVneXB0LAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MzYxIEIuQy48L25vdGU+IHRoZSBjaGllZiBjYXB0YWlucyBhbmQgZ292ZXJub3JzIG9mIHRoZSBraW5nIGNhbWUgZG93biB0byBtZWV0IGhpbSBhbmQgcGF5IGhpbSBob25vdXIuIFRoZXJlIHdhcyBncmVhdCBlYWdlcm5lc3MgYW5kIGV4cGVjdGF0aW9uIG9uIHRoZSBwYXJ0IG9mIHRoZSBvdGhlciBFZ3lwdGlhbnMgYWxzbywgb3dpbmcgdG8gdGhlIG5hbWUgYW5kIGZhbWUgb2YgQWdlc2lsYcO8cywgYW5kIGFsbCByYW4gdG9nZXRoZXIgdG8gYmVob2xkIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhleSBzYXcgbm8gYnJpbGxpYW50IGFycmF5IHdoYXRldmVyLCBidXQgYW4gb2xkIG1hbiBseWluZyBpbiBzb21lIGdyYXNzIGJ5IHRoZSBzZWEsIGhpcyBib2R5IHNtYWxsIGFuZCBjb250ZW1wdGlibGUsIGNvdmVyZWQgd2l0aCBhIGNsb2FrIHRoYXQgd2FzIGNvYXJzZSBhbmQgbWVhbiwgdGhleSB3ZXJlIG1vdmVkIHRvIGxhdWdodGVyIGFuZCBqZXN0aW5nLCBzYXlpbmcgdGhhdCBoZXJlIHdhcyBhbiBpbGx1c3RyYXRpb24gb2YgdGhlIGZhYmxlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmEgbW91bnRhaW4gaXMgaW4gdHJhdmFpbCwgYW5kIHRoZW4gYSBtb3VzZSBpcyBib3JuLjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkF0aC4gMTQuNjE2ZCI+QXRoZW5hZXVzIHAuIDYxNiBkPC9iaWJsPiwgaXQgaXMgVGFjaG9zIGhpbXNlbGYgd2hvIG1ha2VzIHRoaXMgamVzdCB1cG9uIEFnZXNpbGHDvHMsIHdobyByZXBsaWVzIGluIGFuZ2VyOiAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Tb21lIGRheSB5b3Ugd2lsbCB0aGluayBtZSBhIGxpb24uPC9xPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB3ZXJlIHN0aWxsIG1vcmUgc3VycHJpc2VkLCB0b28sIGF0IGhpcyBlY2NlbnRyaWNpdHkuIFdoZW4gYWxsIG1hbm5lciBvZiBob3NwaXRhYmxlIGdpZnRzIHdlcmUgYnJvdWdodCB0byBoaW0sIGhlIGFjY2VwdGVkIHRoZSBmbG91ciwgdGhlIGNhbHZlcywgYW5kIHRoZSBnZWVzZSwgYnV0IHJlamVjdGVkIHRoZSBzd2VldG1lYXRzLCB0aGUgcGFzdHJpZXMsIGFuZCB0aGUgcGVyZnVtZXMsIGFuZCB3aGVuIGhlIHdhcyB1cmdlZCBhbmQgYmVzb3VnaHQgdG8gdGFrZSB0aGVtLCBvcmRlcmVkIHRoZW0gdG8gYmUgY2FycmllZCBhbmQgZ2l2ZW4gdG8gaGlzIEhlbG90cy4gSGUgd2FzIHBsZWFzZWQsIGhvd2V2ZXIsIGFzIFRoZW9waHJhc3R1cyB0ZWxscyB1cywgd2l0aCB0aGUgcGFweXJ1cyB1c2VkIGluIGNoYXBsZXRzLCBiZWNhdXNlIHRoZSBjaGFwbGV0cyB3ZXJlIHNvIG5lYXQgYW5kIHNpbXBsZSwgYW5kIHdoZW4gaGUgbGVmdCBFZ3lwdCwgYXNrZWQgYW5kIHJlY2VpdmVkIHNvbWUgZnJvbSB0aGUga2luZy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgaGUgbGFuZGVkIGluIEVneXB0LAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4zNjEgQi5DLjwvbm90ZT4gdGhlIGNoaWVmIGNhcHRhaW5zIGFuZCBnb3Zlcm5vcnMgb2YgdGhlIGtpbmcgY2FtZSBkb3duIHRvIG1lZXQgaGltIGFuZCBwYXkgaGltIGhvbm91ci4gVGhlcmUgd2FzIGdyZWF0IGVhZ2VybmVzcyBhbmQgZXhwZWN0YXRpb24gb24gdGhlIHBhcnQgb2YgdGhlIG90aGVyIEVneXB0aWFucyBhbHNvLCBvd2luZyB0byB0aGUgbmFtZSBhbmQgZmFtZSBvZiBBZ2VzaWxhw7xzLCBhbmQgYWxsIHJhbiB0b2dldGhlciB0byBiZWhvbGQgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZXkgc2F3IG5vIGJyaWxsaWFudCBhcnJheSB3aGF0ZXZlciwgYnV0IGFuIG9sZCBtYW4gbHlpbmcgaW4gc29tZSBncmFzcyBieSB0aGUgc2VhLCBoaXMgYm9keSBzbWFsbCBhbmQgY29udGVtcHRpYmxlLCBjb3ZlcmVkIHdpdGggYSBjbG9hayB0aGF0IHdhcyBjb2Fyc2UgYW5kIG1lYW4sIHRoZXkgd2VyZSBtb3ZlZCB0byBsYXVnaHRlciBhbmQgamVzdGluZywgc2F5aW5nIHRoYXQgaGVyZSB3YXMgYW4gaWxsdXN0cmF0aW9uIG9mIHRoZSBmYWJsZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmEgbW91bnRhaW4gaXMgaW4gdHJhdmFpbCwgYW5kIHRoZW4gYSBtb3VzZSBpcyBib3JuLjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBdGguIDE0LjYxNmQiPkF0aGVuYWV1cyBwLiA2MTYgZDwvYmlibD4sIGl0IGlzIFRhY2hvcyBoaW1zZWxmIHdobyBtYWtlcyB0aGlzIGplc3QgdXBvbiBBZ2VzaWxhw7xzLCB3aG8gcmVwbGllcyBpbiBhbmdlcjogCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Tb21lIGRheSB5b3Ugd2lsbCB0aGluayBtZSBhIGxpb24uPC9xPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBdGguIDE0LjYxNmQiPkF0aGVuYWV1cyBwLiA2MTYgZDwvYmlibD4sIGl0IGlzIFRhY2hvcyBoaW1zZWxmIHdobyBtYWtlcyB0aGlzIGplc3QgdXBvbiBBZ2VzaWxhw7xzLCB3aG8gcmVwbGllcyBpbiBhbmdlcjogCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Tb21lIGRheSB5b3Ugd2lsbCB0aGluayBtZSBhIGxpb24uPC9xPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSBzdGlsbCBtb3JlIHN1cnByaXNlZCwgdG9vLCBhdCBoaXMgZWNjZW50cmljaXR5LiBXaGVuIGFsbCBtYW5uZXIgb2YgaG9zcGl0YWJsZSBnaWZ0cyB3ZXJlIGJyb3VnaHQgdG8gaGltLCBoZSBhY2NlcHRlZCB0aGUgZmxvdXIsIHRoZSBjYWx2ZXMsIGFuZCB0aGUgZ2Vlc2UsIGJ1dCByZWplY3RlZCB0aGUgc3dlZXRtZWF0cywgdGhlIHBhc3RyaWVzLCBhbmQgdGhlIHBlcmZ1bWVzLCBhbmQgd2hlbiBoZSB3YXMgdXJnZWQgYW5kIGJlc291Z2h0IHRvIHRha2UgdGhlbSwgb3JkZXJlZCB0aGVtIHRvIGJlIGNhcnJpZWQgYW5kIGdpdmVuIHRvIGhpcyBIZWxvdHMuIEhlIHdhcyBwbGVhc2VkLCBob3dldmVyLCBhcyBUaGVvcGhyYXN0dXMgdGVsbHMgdXMsIHdpdGggdGhlIHBhcHlydXMgdXNlZCBpbiBjaGFwbGV0cywgYmVjYXVzZSB0aGUgY2hhcGxldHMgd2VyZSBzbyBuZWF0IGFuZCBzaW1wbGUsIGFuZCB3aGVuIGhlIGxlZnQgRWd5cHQsIGFza2VkIGFuZCByZWNlaXZlZCBzb21lIGZyb20gdGhlIGtpbmcuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3csIG9uIGpvaW5pbmcgVGFjaG9zLCB3aG8gd2FzIG1ha2luZyBwcmVwYXJhdGlvbnMgZm9yIGhpcyBleHBlZGl0aW9uLCBoZSB3YXMgbm90LCBhcyBoZSBleHBlY3RlZCwgYXBwb2ludGVkIGNvbW1hbmRlciBvZiBhbGwgdGhlIGZvcmNlcywgYnV0IG9ubHkgb2YgdGhlIG1lcmNlbmFyaWVzLCB3aGlsZSBDaGFicmlhcyB0aGUgQXRoZW5pYW4gaGFkIGNoYXJnZSBvZiB0aGUgZmxlZXQsIGFuZCBUYWNob3MgaGltc2VsZiB3YXMgY29tbWFuZGVyLWluLWNoaWVmCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1LjkyLjIiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4di4gOTIsIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgZmlyc3QgdGhpbmcgdGhhdCB2ZXhlZCBBZ2VzaWxhw7xzOyB0aGVuLCB0aG91Z2ggaGUgd2FzIGluZGlnbmFudCBhdCB0aGUgdmFpbiBwcmV0ZW5zaW9ucyBvZiB0aGUga2luZyBpbiBvdGhlciBtYXR0ZXJzLCBoZSB3YXMgY29tcGVsbGVkIHRvIGVuZHVyZSB0aGVtLiBIZSBldmVuIHNhaWxlZCB3aXRoIGhpbSBhZ2FpbnN0IHRoZSBQaG9lbmljaWFucywgZm9yY2luZyBoaW1zZWxmIGludG8gYSBzdWJzZXJ2aWVuY2Ugd2hpY2ggd2FzIGJlbmVhdGggaGlzIGRpZ25pdHkgYW5kIGNvbnRyYXJ5IHRvIGhpcyBuYXR1cmUsIHVudGlsIGhlIGZvdW5kIGhpcyBvcHBvcnR1bml0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdywgb24gam9pbmluZyBUYWNob3MsIHdobyB3YXMgbWFraW5nIHByZXBhcmF0aW9ucyBmb3IgaGlzIGV4cGVkaXRpb24sIGhlIHdhcyBub3QsIGFzIGhlIGV4cGVjdGVkLCBhcHBvaW50ZWQgY29tbWFuZGVyIG9mIGFsbCB0aGUgZm9yY2VzLCBidXQgb25seSBvZiB0aGUgbWVyY2VuYXJpZXMsIHdoaWxlIENoYWJyaWFzIHRoZSBBdGhlbmlhbiBoYWQgY2hhcmdlIG9mIHRoZSBmbGVldCwgYW5kIFRhY2hvcyBoaW1zZWxmIHdhcyBjb21tYW5kZXItaW4tY2hpZWYKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1LjkyLjIiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4di4gOTIsIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1LjkyLjIiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4di4gOTIsIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBmaXJzdCB0aGluZyB0aGF0IHZleGVkIEFnZXNpbGHDvHM7IHRoZW4sIHRob3VnaCBoZSB3YXMgaW5kaWduYW50IGF0IHRoZSB2YWluIHByZXRlbnNpb25zIG9mIHRoZSBraW5nIGluIG90aGVyIG1hdHRlcnMsIGhlIHdhcyBjb21wZWxsZWQgdG8gZW5kdXJlIHRoZW0uIEhlIGV2ZW4gc2FpbGVkIHdpdGggaGltIGFnYWluc3QgdGhlIFBob2VuaWNpYW5zLCBmb3JjaW5nIGhpbXNlbGYgaW50byBhIHN1YnNlcnZpZW5jZSB3aGljaCB3YXMgYmVuZWF0aCBoaXMgZGlnbml0eSBhbmQgY29udHJhcnkgdG8gaGlzIG5hdHVyZSwgdW50aWwgaGUgZm91bmQgaGlzIG9wcG9ydHVuaXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgTmVjdGFuYWJpcywgd2hvIHdhcyBhIGNvdXNpbiBvZiBUYWNob3MgYW5kIGhhZCBhIHBhcnQgb2YgdGhlIGZvcmNlcyB1bmRlciBoaXMgY29tbWFuZCwgcmV2b2x0ZWQgZnJvbSBoaW0sIGFuZCBoYXZpbmcgYmVlbiBwcm9jbGFpbWVkIGtpbmcgYnkgdGhlIEVneXB0aWFucywgc2VudCB0byBBZ2VzaWxhw7xzIGFza2luZyBmb3IgaGlzIGFpZCBhbmQgYXNzaXN0YW5jZS4gSGUgbWFkZSB0aGUgc2FtZSBhcHBlYWwgdG8gQ2hhYnJpYXMgYWxzbywgcHJvbWlzaW5nIGxhcmdlIGdpZnRzIHRvIGJvdGguIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gVGFjaG9zIGxlYXJuZWQgb2YgdGhpcyBhbmQgcmVzb3J0ZWQgdG8gZW50cmVhdGllcyBmb3IgdGhlaXIgYWxsZWdpYW5jZSwgQ2hhYnJpYXMgdHJpZWQgdG8gcGVyc3VhZGUgYW5kIGVuY291cmFnZSBBZ2VzaWxhw7xzIHRvIGNvbnRpbnVlIHdpdGggaGltIGluIHRoZSBmcmllbmRzaGlwIG9mIFRhY2hvcy4gQnV0IEFnZXNpbGHDvHMgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3UsIENoYWJyaWFzLCB3aG8gY2FtZSBoZXJlIG9uIHlvdXIgb3duIGFjY291bnQsIGNhbiBkZWNpZGUgeW91ciBvd24gY2FzZTsgYnV0IEkgd2FzIGdpdmVuIGJ5IG15IGNvdW50cnkgdG8gdGhlIEVneXB0aWFucyBhcyBhIGdlbmVyYWwuIEl0IHdvdWxkIHRoZXJlZm9yZSBiZSBkaXNob25vdXJhYmxlIGZvciBtZSB0byBtYWtlIHdhciBvbiB0aG9zZSB0byB3aG9tIEkgd2FzIHNlbnQgYXMgYW4gYWxseSwgdW5sZXNzIG15IGNvdW50cnkgZ2l2ZXMgbWUgYSBuZXcgY29tbWFuZCB0byBkbyBzby48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlc2Ugd29yZHMsIGhlIHNlbnQgbWVuIHRvIFNwYXJ0YSB3aG8gd2VyZSB0byBkZW5vdW5jZSBUYWNob3MsIGFuZCBjb21tZW5kIE5lY3RhbmFiaXMuIFRhY2hvcyBhbmQgTmVjdGFuYWJpcyBhbHNvIHNlbnQgYW5kIGJlc291Z2h0IHRoZSBzdXBwb3J0IG9mIHRoZSBMYWNlZGFlbW9uaWFucywgdGhlIGZvcm1lciBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgaGFkIGxvbmcgYmVlbiB0aGVpciBhbGx5IGFuZCBmcmllbmQsIHRoZSBsYXR0ZXIgb24gdGhlIHBsZWEgdGhhdCBoZSB3b3VsZCBiZSB3ZWxsIGRpc3Bvc2VkIHRvIHRoZWlyIGNpdHkgYW5kIG1vcmUgZWFnZXIgdG8gcHJvbW90ZSBoZXIgaW50ZXJlc3RzLiBUaGUgTGFjZWRhZW1vbmlhbnMsIGFjY29yZGluZ2x5LCBhZnRlciBoZWFyaW5nIHRoZSBtZXNzZW5nZXJzLCBtYWRlIHB1YmxpYyBhbnN3ZXIgdG8gdGhlIEVneXB0aWFucyB0aGF0IEFnZXNpbGHDvHMgd291bGQgYXR0ZW5kIHRvIHRoZXNlIG1hdHRlcnM7IGJ1dCB0byBBZ2VzaWxhw7xzIHRoZXkgd3JvdGUgcHJpdmF0ZWx5IGJpZGRpbmcgaGltIHNlZSB0byBpdCB0aGF0IHRoZSBpbnRlcmVzdHMgb2YgU3BhcnRhIHNob3VsZCBub3Qgc3VmZmVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5TbyBBZ2VzaWxhw7xzIHRvb2sgaGlzIG1lcmNlbmFyaWVzIGFuZCB3ZW50IG92ZXIgZnJvbSBUYWNob3MgdG8gTmVjdGFuYWJpcywgbWFraW5nIHRoZSBpbnRlcmVzdHMgb2YgaGlzIGNvdW50cnkgc2VydmUgYXMgYSB2ZWlsIGZvciBhIHN0cmFuZ2UgYW5kIHVubmF0dXJhbCBwcm9jZWVkaW5nLCBzaW5jZSB3aGVuIHRoaXMgcHJldGV4dCB3YXMgcmVtb3ZlZCwgdGhlIG1vc3QgZml0dGluZyBuYW1lIGZvciBoaXMgYWN0IHdhcyB0cmVhY2hlcnkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5YZW5vcGhvbiwgd2hvIGNhbiBzZWUgbm8gZmF1bHQgaW4gQWdlc2lsYcO8cywgc2F5cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gMi4zMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BZ2VzaWxhw7xzPC90aXRsZT4sIGlpLiAzMTwvYmlibD4pOiAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BY2NvcmRpbmdseSwgaGUgY2hvc2UgYmV0d2VlbiB0aGUgdHdvIHRoYXQgb25lIHdobyBzZWVtZWQgdG8gYmUgdGhlIHRydWVyIHBhcnRpc2FuIG9mIEhlbGxhcywgYW5kIHdpdGggaGltIG1hcmNoZWQgYWdhaW5zdCB0aGUgZW5lbXkgb2YgSGVsbGFzIGFuZCBjb25xdWVyZWQgaGltIGluIGJhdHRsZS48L3E+CiAgICAgICAgICAgIDwvbm90ZT4gQnV0IHRoZSBMYWNlZGFlbW9uaWFucyBhc3NpZ24gdGhlIGNoaWVmIHBsYWNlIGluIHRoZWlyIGlkZWFzIG9mIGhvbm91ciB0byB0aGUgaW50ZXJlc3RzIG9mIHRoZWlyIGNvdW50cnksIGFuZCBuZWl0aGVyIGxlYXJuIG5vciB1bmRlcnN0YW5kIGFueSBvdGhlciBqdXN0aWNlIHRoYW4gdGhhdCB3aGljaCB0aGV5IHRoaW5rIHdpbGwgZW5oYW5jZSB0aGUgZ2xvcnkgb2YgU3BhcnRhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBOZWN0YW5hYmlzLCB3aG8gd2FzIGEgY291c2luIG9mIFRhY2hvcyBhbmQgaGFkIGEgcGFydCBvZiB0aGUgZm9yY2VzIHVuZGVyIGhpcyBjb21tYW5kLCByZXZvbHRlZCBmcm9tIGhpbSwgYW5kIGhhdmluZyBiZWVuIHByb2NsYWltZWQga2luZyBieSB0aGUgRWd5cHRpYW5zLCBzZW50IHRvIEFnZXNpbGHDvHMgYXNraW5nIGZvciBoaXMgYWlkIGFuZCBhc3Npc3RhbmNlLiBIZSBtYWRlIHRoZSBzYW1lIGFwcGVhbCB0byBDaGFicmlhcyBhbHNvLCBwcm9taXNpbmcgbGFyZ2UgZ2lmdHMgdG8gYm90aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gVGFjaG9zIGxlYXJuZWQgb2YgdGhpcyBhbmQgcmVzb3J0ZWQgdG8gZW50cmVhdGllcyBmb3IgdGhlaXIgYWxsZWdpYW5jZSwgQ2hhYnJpYXMgdHJpZWQgdG8gcGVyc3VhZGUgYW5kIGVuY291cmFnZSBBZ2VzaWxhw7xzIHRvIGNvbnRpbnVlIHdpdGggaGltIGluIHRoZSBmcmllbmRzaGlwIG9mIFRhY2hvcy4gQnV0IEFnZXNpbGHDvHMgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdSwgQ2hhYnJpYXMsIHdobyBjYW1lIGhlcmUgb24geW91ciBvd24gYWNjb3VudCwgY2FuIGRlY2lkZSB5b3VyIG93biBjYXNlOyBidXQgSSB3YXMgZ2l2ZW4gYnkgbXkgY291bnRyeSB0byB0aGUgRWd5cHRpYW5zIGFzIGEgZ2VuZXJhbC4gSXQgd291bGQgdGhlcmVmb3JlIGJlIGRpc2hvbm91cmFibGUgZm9yIG1lIHRvIG1ha2Ugd2FyIG9uIHRob3NlIHRvIHdob20gSSB3YXMgc2VudCBhcyBhbiBhbGx5LCB1bmxlc3MgbXkgY291bnRyeSBnaXZlcyBtZSBhIG5ldyBjb21tYW5kIHRvIGRvIHNvLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXNlIHdvcmRzLCBoZSBzZW50IG1lbiB0byBTcGFydGEgd2hvIHdlcmUgdG8gZGVub3VuY2UgVGFjaG9zLCBhbmQgY29tbWVuZCBOZWN0YW5hYmlzLiBUYWNob3MgYW5kIE5lY3RhbmFiaXMgYWxzbyBzZW50IGFuZCBiZXNvdWdodCB0aGUgc3VwcG9ydCBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIHRoZSBmb3JtZXIgb24gdGhlIGdyb3VuZCB0aGF0IGhlIGhhZCBsb25nIGJlZW4gdGhlaXIgYWxseSBhbmQgZnJpZW5kLCB0aGUgbGF0dGVyIG9uIHRoZSBwbGVhIHRoYXQgaGUgd291bGQgYmUgd2VsbCBkaXNwb3NlZCB0byB0aGVpciBjaXR5IGFuZCBtb3JlIGVhZ2VyIHRvIHByb21vdGUgaGVyIGludGVyZXN0cy4gVGhlIExhY2VkYWVtb25pYW5zLCBhY2NvcmRpbmdseSwgYWZ0ZXIgaGVhcmluZyB0aGUgbWVzc2VuZ2VycywgbWFkZSBwdWJsaWMgYW5zd2VyIHRvIHRoZSBFZ3lwdGlhbnMgdGhhdCBBZ2VzaWxhw7xzIHdvdWxkIGF0dGVuZCB0byB0aGVzZSBtYXR0ZXJzOyBidXQgdG8gQWdlc2lsYcO8cyB0aGV5IHdyb3RlIHByaXZhdGVseSBiaWRkaW5nIGhpbSBzZWUgdG8gaXQgdGhhdCB0aGUgaW50ZXJlc3RzIG9mIFNwYXJ0YSBzaG91bGQgbm90IHN1ZmZlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvIEFnZXNpbGHDvHMgdG9vayBoaXMgbWVyY2VuYXJpZXMgYW5kIHdlbnQgb3ZlciBmcm9tIFRhY2hvcyB0byBOZWN0YW5hYmlzLCBtYWtpbmcgdGhlIGludGVyZXN0cyBvZiBoaXMgY291bnRyeSBzZXJ2ZSBhcyBhIHZlaWwgZm9yIGEgc3RyYW5nZSBhbmQgdW5uYXR1cmFsIHByb2NlZWRpbmcsIHNpbmNlIHdoZW4gdGhpcyBwcmV0ZXh0IHdhcyByZW1vdmVkLCB0aGUgbW9zdCBmaXR0aW5nIG5hbWUgZm9yIGhpcyBhY3Qgd2FzIHRyZWFjaGVyeS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+WGVub3Bob24sIHdobyBjYW4gc2VlIG5vIGZhdWx0IGluIEFnZXNpbGHDvHMsIHNheXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQWdlcy4gMi4zMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgaWkuIDMxPC9iaWJsPik6IAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWNjb3JkaW5nbHksIGhlIGNob3NlIGJldHdlZW4gdGhlIHR3byB0aGF0IG9uZSB3aG8gc2VlbWVkIHRvIGJlIHRoZSB0cnVlciBwYXJ0aXNhbiBvZiBIZWxsYXMsIGFuZCB3aXRoIGhpbSBtYXJjaGVkIGFnYWluc3QgdGhlIGVuZW15IG9mIEhlbGxhcyBhbmQgY29ucXVlcmVkIGhpbSBpbiBiYXR0bGUuPC9xPgogICAgICAgICAgICA8L25vdGU+IEJ1dCB0aGUgTGFjZWRhZW1vbmlhbnMgYXNzaWduIHRoZSBjaGllZiBwbGFjZSBpbiB0aGVpciBpZGVhcyBvZiBob25vdXIgdG8gdGhlIGludGVyZXN0cyBvZiB0aGVpciBjb3VudHJ5LCBhbmQgbmVpdGhlciBsZWFybiBub3IgdW5kZXJzdGFuZCBhbnkgb3RoZXIganVzdGljZSB0aGFuIHRoYXQgd2hpY2ggdGhleSB0aGluayB3aWxsIGVuaGFuY2UgdGhlIGdsb3J5IG9mIFNwYXJ0YS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBZ2VzLiAyLjMxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCBpaS4gMzE8L2JpYmw+KTogCgkJCQkJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCBpaS4gMzE8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFjY29yZGluZ2x5LCBoZSBjaG9zZSBiZXR3ZWVuIHRoZSB0d28gdGhhdCBvbmUgd2hvIHNlZW1lZCB0byBiZSB0aGUgdHJ1ZXIgcGFydGlzYW4gb2YgSGVsbGFzLCBhbmQgd2l0aCBoaW0gbWFyY2hlZCBhZ2FpbnN0IHRoZSBlbmVteSBvZiBIZWxsYXMgYW5kIGNvbnF1ZXJlZCBoaW0gaW4gYmF0dGxlLjwvcT4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGFjaG9zLCBhY2NvcmRpbmdseSwgdGh1cyBkZXNlcnRlZCBieSBoaXMgbWVyY2VuYXJpZXMsIHRvb2sgdG8gZmxpZ2h0LiBCdXQgaW4gTWVuZGVzIGFub3RoZXIgcml2YWwgcm9zZSB1cCBhZ2FpbnN0IE5lY3RhbmFiaXMgYW5kIHdhcyBwcm9jbGFpbWVkIGtpbmcsIGFuZCBhZnRlciBjb2xsZWN0aW5nIGEgaHVuZHJlZCB0aG91c2FuZCBtZW4gYWR2YW5jZWQgYWdhaW5zdCBoaW0uIFRoZW4gTmVjdGFuYWJpcyBzb3VnaHQgdG8gZW5jb3VyYWdlIEFnZXNpbGHDvHMgYnkgc2F5aW5nIHRoYXQgYWx0aG91Z2ggdGhlIGVuZW15IHdlcmUgbnVtZXJvdXMsIHRoZXkgd2VyZSBhIG1peGVkIHJhYmJsZSBvZiBhcnRpc2FucyB3aG9zZSBpbmV4cGVyaWVuY2UgaW4gd2FyIG1hZGUgdGhlbSBjb250ZW1wdGlibGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbmRlZWQsPC9xPiBzYWlkIEFnZXNpbGHDvHMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aXQgaXMgbm90IHRoZWlyIG51bWJlcnMgdGhhdCBJIGZlYXIsIGJ1dCB0aGUgaW5leHBlcmllbmNlIGFuZCBpZ25vcmFuY2Ugb2Ygd2hpY2ggeW91IHNwZWFrLCB3aGljaCBpdCBpcyBoYXJkIHRvIG92ZXJjb21lIGJ5IHN0cmF0YWdlbXMuIEZvciBzdHJhdGFnZW1zIGFycmF5IHVuZXhwZWN0ZWQgZGlmZmljdWx0aWVzIGFnYWluc3QgbWVuIHdobyB0cnkgdG8gZGVmZW5kIHRoZW1zZWx2ZXMgYWdhaW5zdCB0aGVtLCBpZiB0aGV5IHN1c3BlY3QgYW5kIGF3YWl0IHRoZW07IGJ1dCBoZSB3aG8gZG9lcyBub3QgYXdhaXQgbm9yIGV2ZW4gc3VzcGVjdCBhbnkgc3RyYXRhZ2VtIGdpdmVzIG5vIGhvbGQgdG8gdGhlIG9wcG9uZW50IHdobyBpcyB0cnlpbmcgdG8gb3V0d2l0IGhpbSwganVzdCBhcywgaW4gYSB3cmVzdGxpbmcgYm91dCwgaGUgd2hvIGRvZXMgbm90IHN0aXIgZ2l2ZXMgbm8gYWR2YW50YWdlIHRvIGhpcyBhbnRhZ29uaXN0LjwvcT4gQWZ0ZXIgdGhpcywgdGhlIE1lbmRlc2lhbiBhbHNvIHNlbnQgYW5kIHRyaWVkIHRvIHdpbiBvdmVyIEFnZXNpbGHDvHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5lY3RhbmFiaXMgd2FzIHRoZXJlZm9yZSBhbGFybWVkLCBhbmQgd2hlbiBBZ2VzaWxhw7xzIHVyZ2VkIGhpbSB0byBmaWdodCB0aGUgaXNzdWUgb3V0IGFzIHNwZWVkaWx5IGFzIHBvc3NpYmxlLCBhbmQgbm90IHRvIHdhZ2UgYSB3YXIgb2YgZGVsYXlzIGFnYWluc3QgbWVuIHdobyB3ZXJlIGluZXhwZXJpZW5jZWQgaW4gZmlnaHRpbmcsIGJ1dCB3ZXJlIG51bWVyb3VzIGVub3VnaCB0byBzdXJyb3VuZCBoaW0gYW5kIGhlZGdlIGhpbSBpbiBhbmQgYW50aWNpcGF0ZSBhbmQgZ2V0IHRoZSBzdGFydCBvZiBoaW0gaW4gbWFueSB3YXlzLCBoZSBncmV3IHN0aWxsIG1vcmUgc3VzcGljaW91cyBhbmQgZmVhcmZ1bCBvZiBoaW0sIGFuZCByZXRpcmVkIGludG8gYSBjaXR5IHdoaWNoIHdhcyB3ZWxsIGZvcnRpZmllZCBhbmQgaGFkIGEgbGFyZ2UgY29tcGFzcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWdlc2lsYcO8cyB3YXMgaW5jZW5zZWQgYXQgdGhpcyBsYWNrIG9mIGNvbmZpZGVuY2UsIGFuZCBmdWxsIG9mIGluZGlnbmF0aW9uLCBidXQgc2luY2UgaGUgd2FzIGFzaGFtZWQgdG8gY2hhbmdlIHNpZGVzIGFnYWluIGFuZCBmaW5hbGx5IGdvIGJhY2sgaG9tZSB3aXRob3V0IGFjY29tcGxpc2hpbmcgYW55IHRoaW5nLCBoZSBhY2NvbXBhbmllZCBOZWN0YW5hYmlzIGFuZCBlbnRlcmVkIHRoZSBjaXR5IHdpdGggaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGFjaG9zLCBhY2NvcmRpbmdseSwgdGh1cyBkZXNlcnRlZCBieSBoaXMgbWVyY2VuYXJpZXMsIHRvb2sgdG8gZmxpZ2h0LiBCdXQgaW4gTWVuZGVzIGFub3RoZXIgcml2YWwgcm9zZSB1cCBhZ2FpbnN0IE5lY3RhbmFiaXMgYW5kIHdhcyBwcm9jbGFpbWVkIGtpbmcsIGFuZCBhZnRlciBjb2xsZWN0aW5nIGEgaHVuZHJlZCB0aG91c2FuZCBtZW4gYWR2YW5jZWQgYWdhaW5zdCBoaW0uIFRoZW4gTmVjdGFuYWJpcyBzb3VnaHQgdG8gZW5jb3VyYWdlIEFnZXNpbGHDvHMgYnkgc2F5aW5nIHRoYXQgYWx0aG91Z2ggdGhlIGVuZW15IHdlcmUgbnVtZXJvdXMsIHRoZXkgd2VyZSBhIG1peGVkIHJhYmJsZSBvZiBhcnRpc2FucyB3aG9zZSBpbmV4cGVyaWVuY2UgaW4gd2FyIG1hZGUgdGhlbSBjb250ZW1wdGlibGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluZGVlZCw8L3E+IHNhaWQgQWdlc2lsYcO8cywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPml0IGlzIG5vdCB0aGVpciBudW1iZXJzIHRoYXQgSSBmZWFyLCBidXQgdGhlIGluZXhwZXJpZW5jZSBhbmQgaWdub3JhbmNlIG9mIHdoaWNoIHlvdSBzcGVhaywgd2hpY2ggaXQgaXMgaGFyZCB0byBvdmVyY29tZSBieSBzdHJhdGFnZW1zLiBGb3Igc3RyYXRhZ2VtcyBhcnJheSB1bmV4cGVjdGVkIGRpZmZpY3VsdGllcyBhZ2FpbnN0IG1lbiB3aG8gdHJ5IHRvIGRlZmVuZCB0aGVtc2VsdmVzIGFnYWluc3QgdGhlbSwgaWYgdGhleSBzdXNwZWN0IGFuZCBhd2FpdCB0aGVtOyBidXQgaGUgd2hvIGRvZXMgbm90IGF3YWl0IG5vciBldmVuIHN1c3BlY3QgYW55IHN0cmF0YWdlbSBnaXZlcyBubyBob2xkIHRvIHRoZSBvcHBvbmVudCB3aG8gaXMgdHJ5aW5nIHRvIG91dHdpdCBoaW0sIGp1c3QgYXMsIGluIGEgd3Jlc3RsaW5nIGJvdXQsIGhlIHdobyBkb2VzIG5vdCBzdGlyIGdpdmVzIG5vIGFkdmFudGFnZSB0byBoaXMgYW50YWdvbmlzdC48L3E+IEFmdGVyIHRoaXMsIHRoZSBNZW5kZXNpYW4gYWxzbyBzZW50IGFuZCB0cmllZCB0byB3aW4gb3ZlciBBZ2VzaWxhw7xzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5lY3RhbmFiaXMgd2FzIHRoZXJlZm9yZSBhbGFybWVkLCBhbmQgd2hlbiBBZ2VzaWxhw7xzIHVyZ2VkIGhpbSB0byBmaWdodCB0aGUgaXNzdWUgb3V0IGFzIHNwZWVkaWx5IGFzIHBvc3NpYmxlLCBhbmQgbm90IHRvIHdhZ2UgYSB3YXIgb2YgZGVsYXlzIGFnYWluc3QgbWVuIHdobyB3ZXJlIGluZXhwZXJpZW5jZWQgaW4gZmlnaHRpbmcsIGJ1dCB3ZXJlIG51bWVyb3VzIGVub3VnaCB0byBzdXJyb3VuZCBoaW0gYW5kIGhlZGdlIGhpbSBpbiBhbmQgYW50aWNpcGF0ZSBhbmQgZ2V0IHRoZSBzdGFydCBvZiBoaW0gaW4gbWFueSB3YXlzLCBoZSBncmV3IHN0aWxsIG1vcmUgc3VzcGljaW91cyBhbmQgZmVhcmZ1bCBvZiBoaW0sIGFuZCByZXRpcmVkIGludG8gYSBjaXR5IHdoaWNoIHdhcyB3ZWxsIGZvcnRpZmllZCBhbmQgaGFkIGEgbGFyZ2UgY29tcGFzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMgd2FzIGluY2Vuc2VkIGF0IHRoaXMgbGFjayBvZiBjb25maWRlbmNlLCBhbmQgZnVsbCBvZiBpbmRpZ25hdGlvbiwgYnV0IHNpbmNlIGhlIHdhcyBhc2hhbWVkIHRvIGNoYW5nZSBzaWRlcyBhZ2FpbiBhbmQgZmluYWxseSBnbyBiYWNrIGhvbWUgd2l0aG91dCBhY2NvbXBsaXNoaW5nIGFueSB0aGluZywgaGUgYWNjb21wYW5pZWQgTmVjdGFuYWJpcyBhbmQgZW50ZXJlZCB0aGUgY2l0eSB3aXRoIGhpbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIGVuZW15IGNhbWUgdXAgYW5kIGJlZ2FuIHRvIHN1cnJvdW5kIHRoZSBjaXR5IHdpdGggYSB0cmVuY2gsIHRoZW4gdGhlIEVneXB0aWFuIGNoYW5nZWQgaGlzIG1pbmQsIGdyZXcgZmVhcmZ1bCBvZiB0aGUgc2llZ2UsIGFuZCB3aXNoZWQgdG8gZ2l2ZSBiYXR0bGUsIGZvciB3aGljaCB0aGUgR3JlZWtzIGFsc28gd2VyZSB2ZXJ5IGVhZ2VyLCBzaW5jZSB0aGVyZSB3ZXJlIG5vIHByb3Zpc2lvbnMgaW4gdGhlIHBsYWNlLiBBZ2VzaWxhw7xzLCBob3dldmVyLCB3b3VsZCBub3QgcGVybWl0IGl0LCBidXQgb3Bwb3NlZCBpdCwgYW5kIHdhcyB0aGVyZWZvcmUgbWFsaWduZWQgYnkgdGhlIEVneXB0aWFucyBldmVuIG1vcmUgYml0dGVybHkgdGhhbiBiZWZvcmUsIGFuZCBjYWxsZWQgYSBiZXRyYXllciBvZiB0aGUga2luZy4gQnV0IGhlIGJvcmUgdGhlaXIgY2FsdW1uaWVzIG1vcmUgcGF0aWVudGx5IG5vdywgYW5kIHNvdWdodCB0byBmaW5kIHRoZSBmaXR0aW5nIG1vbWVudCBmb3IgaGlzIHN0cmF0YWdlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIGVuZW15IGNhbWUgdXAgYW5kIGJlZ2FuIHRvIHN1cnJvdW5kIHRoZSBjaXR5IHdpdGggYSB0cmVuY2gsIHRoZW4gdGhlIEVneXB0aWFuIGNoYW5nZWQgaGlzIG1pbmQsIGdyZXcgZmVhcmZ1bCBvZiB0aGUgc2llZ2UsIGFuZCB3aXNoZWQgdG8gZ2l2ZSBiYXR0bGUsIGZvciB3aGljaCB0aGUgR3JlZWtzIGFsc28gd2VyZSB2ZXJ5IGVhZ2VyLCBzaW5jZSB0aGVyZSB3ZXJlIG5vIHByb3Zpc2lvbnMgaW4gdGhlIHBsYWNlLiBBZ2VzaWxhw7xzLCBob3dldmVyLCB3b3VsZCBub3QgcGVybWl0IGl0LCBidXQgb3Bwb3NlZCBpdCwgYW5kIHdhcyB0aGVyZWZvcmUgbWFsaWduZWQgYnkgdGhlIEVneXB0aWFucyBldmVuIG1vcmUgYml0dGVybHkgdGhhbiBiZWZvcmUsIGFuZCBjYWxsZWQgYSBiZXRyYXllciBvZiB0aGUga2luZy4gQnV0IGhlIGJvcmUgdGhlaXIgY2FsdW1uaWVzIG1vcmUgcGF0aWVudGx5IG5vdywgYW5kIHNvdWdodCB0byBmaW5kIHRoZSBmaXR0aW5nIG1vbWVudCBmb3IgaGlzIHN0cmF0YWdlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgYXMgZm9sbG93cy4gVGhlIGVuZW15IHdlcmUgZGlnZ2luZyBhIGRlZXAgdHJlbmNoIG91dHNpZGUgYXJvdW5kIHRoZSBjaXR5LCBpbiBvcmRlciB0byBzaHV0IGl0cyBvY2N1cGFudHMgdXAgY29tcGxldGVseS4gQWNjb3JkaW5nbHksIHdoZW4gdGhlIHRyZW5jaCBoYWQgYmVlbiBjYXJyaWVkIGFsbW9zdCBhcm91bmQgdGhlIGNpdHksIGFuZCBpdHMgZW5kcyB3ZXJlIG5lYXIgb25lIGFub3RoZXIsIGFmdGVyIHdhaXRpbmcgZm9yIGV2ZW5pbmcgdG8gY29tZSBhbmQgb3JkZXJpbmcgdGhlIEdyZWVrcyB0byBhcm0gdGhlbXNlbHZlcywgQWdlc2lsYcO8cyB3ZW50IHRvIHRoZSBFZ3lwdGlhbiBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3cgaXMgdGhlIHRpbWUsIHlvdW5nIG1hbiwgZm9yIHVzIHRvIHNhdmUgb3Vyc2VsdmVzLCBhbmQgSSB3b3VsZCBub3Qgc3BlYWsgb2YgaXQgdW50aWwgaXQgY2FtZSwgZm9yIGZlYXIgb2Ygdml0aWF0aW5nIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZW5lbXkgaGF2ZSBub3cgd29ya2VkIG91dCBvdXIgc2FmZXR5IHdpdGggdGhlaXIgb3duIGhhbmRzLiBUaGV5IGhhdmUgZHVnIHRoZWlyIHRyZW5jaCBzbyBmYXIgdGhhdCB0aGUgcGFydCB3aGljaCBpcyBmaW5pc2hlZCBoaW5kZXJzIHRoZW0gZnJvbSBhdHRhY2tpbmcgdXMgaW4gZ3JlYXQgbnVtYmVycywgYW5kIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSBlbmRzIGdpdmVzIHVzIHJvb20gdG8gZmlnaHQgdGhlbSBvbiBmYWlyIGFuZCBlcXVhbCB0ZXJtcy4gQ29tZSwgdGhlbiwgYmUgZWFnZXIgdG8gc2hvdyB5b3Vyc2VsZiBhIGJyYXZlIG1hbjsgZm9sbG93IHdpdGggdXMgYXMgd2UgY2hhcmdlLCBhbmQgc2F2ZSB5b3Vyc2VsZiBhbmQgeW91ciBhcm15IHRvby4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBlbmVteSBpbiBvdXIgZnJvbnQgd2lsbCBub3Qgd2l0aHN0YW5kIHVzLCBhbmQgdGhlIHJlc3Qgd2lsbCBub3QgaGFybSB1cyBiZWNhdXNlIG9mIHRoZSB0cmVuY2guPC9xPiBOZWN0YW5hYmlzLCB0aGVuLCB3YXMgZmlsbGVkIHdpdGggYWRtaXJhdGlvbiBmb3IgdGhlIHNhZ2FjaXR5IG9mIEFnZXNpbGHDvHMsIGFuZCBwdXR0aW5nIGhpbXNlbGYgaW4gdGhlIGNlbnRyZSBvZiB0aGUgR3JlZWsgYXJyYXksIGNoYXJnZWQgZm9yd2FyZHMgYW5kIGVhc2lseSByb3V0ZWQgaGlzIG9wcG9uZW50cy4gQW5kIG5vdyB0aGF0IEFnZXNpbGHDvHMgaGFkIHdvbiBiYWNrIHRoZSBjb25maWRlbmNlIG9mIE5lY3RhbmFiaXMsIGhlIGJyb3VnaHQgdGhlIHNhbWUgc3RyYXRhZ2VtIHRvIGJlYXIgYWdhaW4gdXBvbiB0aGUgZW5lbXksIGxpa2UgYSB0cmljayBpbiB3cmVzdGxpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ5IHNvbWV0aW1lcyBwcmV0ZW5kaW5nIHRvIHJldHJlYXQgYW5kIGZseSwgYW5kIHNvbWV0aW1lcyBhdHRhY2tpbmcgdGhlbSBvbiB0aGUgZmxhbmtzLCBoZSBkcm92ZSB0aGVpciB3aG9sZSBtdWx0aXR1ZGUgaW50byBhIHRyYWN0IHdoaWNoIGhhZCBhIGRlZXAgY2FuYWwgZnVsbCBvZiB3YXRlciBvbiBlaXRoZXIgc2lkZS4gVGhlIHNwYWNlIGJldHdlZW4gdGhlc2UgaGUgb2NjdXBpZWQgYW5kIHN0b3BwZWQgdXAgd2l0aCB0aGUgaGVhZCBvZiBoaXMgY29sdW1uLCBhbmQgc28gbWFkZSBoaXMgbnVtYmVycyBlcXVhbCB0byB0aG9zZSBvZiB0aGUgZW5lbXkgd2hvIGNvdWxkIGZpZ2h0IHdpdGggaGltLCBzaW5jZSB0aGV5IHdlcmUgdW5hYmxlIHRvIHN1cnJvdW5kIGFuZCBlbmNsb3NlIGhpbS4gVGhlcmVmb3JlIGFmdGVyIGEgc2hvcnQgcmVzaXN0YW5jZSB0aGV5IHdlcmUgcm91dGVkOyBtYW55IHdlcmUgc2xhaW4sIGFuZCB0aGUgZnVnaXRpdmVzIHdlcmUgZGlzcGVyc2VkIGFuZCBtZWx0ZWQgYXdheS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBhY2NvdW50IG9mIHRoaXMgRWd5cHRpYW4gY2FtcGFpZ24gaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1LjkzIiB2YWxpZD0ieWVzIj5EaW9kb3J1cywgeHYuIDkzPC9iaWJsPiwgZGlmZmVycyBpbiBtYW55IGRldGFpbHMuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGFzIGZvbGxvd3MuIFRoZSBlbmVteSB3ZXJlIGRpZ2dpbmcgYSBkZWVwIHRyZW5jaCBvdXRzaWRlIGFyb3VuZCB0aGUgY2l0eSwgaW4gb3JkZXIgdG8gc2h1dCBpdHMgb2NjdXBhbnRzIHVwIGNvbXBsZXRlbHkuIEFjY29yZGluZ2x5LCB3aGVuIHRoZSB0cmVuY2ggaGFkIGJlZW4gY2FycmllZCBhbG1vc3QgYXJvdW5kIHRoZSBjaXR5LCBhbmQgaXRzIGVuZHMgd2VyZSBuZWFyIG9uZSBhbm90aGVyLCBhZnRlciB3YWl0aW5nIGZvciBldmVuaW5nIHRvIGNvbWUgYW5kIG9yZGVyaW5nIHRoZSBHcmVla3MgdG8gYXJtIHRoZW1zZWx2ZXMsIEFnZXNpbGHDvHMgd2VudCB0byB0aGUgRWd5cHRpYW4gYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3cgaXMgdGhlIHRpbWUsIHlvdW5nIG1hbiwgZm9yIHVzIHRvIHNhdmUgb3Vyc2VsdmVzLCBhbmQgSSB3b3VsZCBub3Qgc3BlYWsgb2YgaXQgdW50aWwgaXQgY2FtZSwgZm9yIGZlYXIgb2Ygdml0aWF0aW5nIGl0LiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbmVteSBoYXZlIG5vdyB3b3JrZWQgb3V0IG91ciBzYWZldHkgd2l0aCB0aGVpciBvd24gaGFuZHMuIFRoZXkgaGF2ZSBkdWcgdGhlaXIgdHJlbmNoIHNvIGZhciB0aGF0IHRoZSBwYXJ0IHdoaWNoIGlzIGZpbmlzaGVkIGhpbmRlcnMgdGhlbSBmcm9tIGF0dGFja2luZyB1cyBpbiBncmVhdCBudW1iZXJzLCBhbmQgdGhlIHNwYWNlIGJldHdlZW4gdGhlIGVuZHMgZ2l2ZXMgdXMgcm9vbSB0byBmaWdodCB0aGVtIG9uIGZhaXIgYW5kIGVxdWFsIHRlcm1zLiBDb21lLCB0aGVuLCBiZSBlYWdlciB0byBzaG93IHlvdXJzZWxmIGEgYnJhdmUgbWFuOyBmb2xsb3cgd2l0aCB1cyBhcyB3ZSBjaGFyZ2UsIGFuZCBzYXZlIHlvdXJzZWxmIGFuZCB5b3VyIGFybXkgdG9vLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGVuZW15IGluIG91ciBmcm9udCB3aWxsIG5vdCB3aXRoc3RhbmQgdXMsIGFuZCB0aGUgcmVzdCB3aWxsIG5vdCBoYXJtIHVzIGJlY2F1c2Ugb2YgdGhlIHRyZW5jaC48L3E+IE5lY3RhbmFiaXMsIHRoZW4sIHdhcyBmaWxsZWQgd2l0aCBhZG1pcmF0aW9uIGZvciB0aGUgc2FnYWNpdHkgb2YgQWdlc2lsYcO8cywgYW5kIHB1dHRpbmcgaGltc2VsZiBpbiB0aGUgY2VudHJlIG9mIHRoZSBHcmVlayBhcnJheSwgY2hhcmdlZCBmb3J3YXJkcyBhbmQgZWFzaWx5IHJvdXRlZCBoaXMgb3Bwb25lbnRzLiBBbmQgbm93IHRoYXQgQWdlc2lsYcO8cyBoYWQgd29uIGJhY2sgdGhlIGNvbmZpZGVuY2Ugb2YgTmVjdGFuYWJpcywgaGUgYnJvdWdodCB0aGUgc2FtZSBzdHJhdGFnZW0gdG8gYmVhciBhZ2FpbiB1cG9uIHRoZSBlbmVteSwgbGlrZSBhIHRyaWNrIGluIHdyZXN0bGluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbmVteSBoYXZlIG5vdyB3b3JrZWQgb3V0IG91ciBzYWZldHkgd2l0aCB0aGVpciBvd24gaGFuZHMuIFRoZXkgaGF2ZSBkdWcgdGhlaXIgdHJlbmNoIHNvIGZhciB0aGF0IHRoZSBwYXJ0IHdoaWNoIGlzIGZpbmlzaGVkIGhpbmRlcnMgdGhlbSBmcm9tIGF0dGFja2luZyB1cyBpbiBncmVhdCBudW1iZXJzLCBhbmQgdGhlIHNwYWNlIGJldHdlZW4gdGhlIGVuZHMgZ2l2ZXMgdXMgcm9vbSB0byBmaWdodCB0aGVtIG9uIGZhaXIgYW5kIGVxdWFsIHRlcm1zLiBDb21lLCB0aGVuLCBiZSBlYWdlciB0byBzaG93IHlvdXJzZWxmIGEgYnJhdmUgbWFuOyBmb2xsb3cgd2l0aCB1cyBhcyB3ZSBjaGFyZ2UsIGFuZCBzYXZlIHlvdXJzZWxmIGFuZCB5b3VyIGFybXkgdG9vLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZW5lbXkgaW4gb3VyIGZyb250IHdpbGwgbm90IHdpdGhzdGFuZCB1cywgYW5kIHRoZSByZXN0IHdpbGwgbm90IGhhcm0gdXMgYmVjYXVzZSBvZiB0aGUgdHJlbmNoLjwvdHJhbnNsYXRpb24+"
translation['39.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ5IHNvbWV0aW1lcyBwcmV0ZW5kaW5nIHRvIHJldHJlYXQgYW5kIGZseSwgYW5kIHNvbWV0aW1lcyBhdHRhY2tpbmcgdGhlbSBvbiB0aGUgZmxhbmtzLCBoZSBkcm92ZSB0aGVpciB3aG9sZSBtdWx0aXR1ZGUgaW50byBhIHRyYWN0IHdoaWNoIGhhZCBhIGRlZXAgY2FuYWwgZnVsbCBvZiB3YXRlciBvbiBlaXRoZXIgc2lkZS4gVGhlIHNwYWNlIGJldHdlZW4gdGhlc2UgaGUgb2NjdXBpZWQgYW5kIHN0b3BwZWQgdXAgd2l0aCB0aGUgaGVhZCBvZiBoaXMgY29sdW1uLCBhbmQgc28gbWFkZSBoaXMgbnVtYmVycyBlcXVhbCB0byB0aG9zZSBvZiB0aGUgZW5lbXkgd2hvIGNvdWxkIGZpZ2h0IHdpdGggaGltLCBzaW5jZSB0aGV5IHdlcmUgdW5hYmxlIHRvIHN1cnJvdW5kIGFuZCBlbmNsb3NlIGhpbS4gVGhlcmVmb3JlIGFmdGVyIGEgc2hvcnQgcmVzaXN0YW5jZSB0aGV5IHdlcmUgcm91dGVkOyBtYW55IHdlcmUgc2xhaW4sIGFuZCB0aGUgZnVnaXRpdmVzIHdlcmUgZGlzcGVyc2VkIGFuZCBtZWx0ZWQgYXdheS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGFjY291bnQgb2YgdGhpcyBFZ3lwdGlhbiBjYW1wYWlnbiBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNS45MyIgdmFsaWQ9InllcyI+RGlvZG9ydXMsIHh2LiA5MzwvYmlibD4sIGRpZmZlcnMgaW4gbWFueSBkZXRhaWxzLjwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuOTMiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4di4gOTM8L2JpYmw+LCBkaWZmZXJzIGluIG1hbnkgZGV0YWlscy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCB0aGUgRWd5cHRpYW4gc3VjY2VlZGVkIGluIGVzdGFibGlzaGluZyBoaW1zZWxmIGZpcm1seSBhbmQgc2VjdXJlbHkgaW4gcG93ZXIsIGFuZCBzaG93ZWQgaGlzIGZyaWVuZGxpbmVzcyBhbmQgYWZmZWN0aW9uIGJ5IGJlZ2dpbmcgQWdlc2lsYcO8cyB0byByZW1haW4gYW5kIHNwZW5kIHRoZSB3aW50ZXIgd2l0aCBoaW0uIEJ1dCBBZ2VzaWxhw7xzIHdhcyBlYWdlciB0byByZXR1cm4gdG8gdGhlIHdhciBhdCBob21lLCBrbm93aW5nIHRoYXQgaGlzIGNpdHkgbmVlZGVkIG1vbmV5IGFuZCB3YXMgaGlyaW5nIG1lcmNlbmFyaWVzLiBIZSB3YXMgdGhlcmVmb3JlIGRpc21pc3NlZCB3aXRoIGdyZWF0IGhvbm91ciBhbmQgY2VyZW1vbnksIHRha2luZyB3aXRoIGhpbSwgYmVzaWRlcyBvdGhlciBob25vdXJzIGFuZCBnaWZ0cywgdHdvIGh1bmRyZWQgYW5kIHRoaXJ0eSB0YWxlbnRzIG9mIHNpbHZlciBmb3IgdGhlIHdhciBhdCBob21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UgaXQgd2FzIG5vdyB3aW50ZXIsIGhlIGtlcHQgY2xvc2UgdG8gc2hvcmUgd2l0aCBoaXMgc2hpcHMsIGFuZCB3YXMgYm9ybmUgYWxvbmcgdGhlIGNvYXN0IG9mIExpYnlhIHRvIGFuIHVuaW5oYWJpdGVkIHNwb3QgY2FsbGVkIHRoZSBIYXJib3VyIG9mIE1lbmVsYcO8cy4gSGVyZSBoZSBkaWVkLCBhdCB0aGUgYWdlIG9mIGVpZ2h0eS1mb3VyIHllYXJzLiBIZSBoYWQgYmVlbiBraW5nIG9mIFNwYXJ0YSBmb3J0eS1vbmUgeWVhcnMsIGFuZCBmb3IgbW9yZSB0aGFuIHRoaXJ0eSBvZiB0aGVzZSBoZSB3YXMgdGhlIGdyZWF0ZXN0IGFuZCBtb3N0IGluZmx1ZW50aWFsIG9mIGFsbCBIZWxsZW5lcywgaGF2aW5nIGJlZW4gbG9va2VkIHVwb24gYXMgbGVhZGVyIGFuZCBraW5nIG9mIGFsbW9zdCBhbGwgSGVsbGFzLCBkb3duIHRvIHRoZSBiYXR0bGUgb2YgTGV1Y3RyYS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhlIEVneXB0aWFuIHN1Y2NlZWRlZCBpbiBlc3RhYmxpc2hpbmcgaGltc2VsZiBmaXJtbHkgYW5kIHNlY3VyZWx5IGluIHBvd2VyLCBhbmQgc2hvd2VkIGhpcyBmcmllbmRsaW5lc3MgYW5kIGFmZmVjdGlvbiBieSBiZWdnaW5nIEFnZXNpbGHDvHMgdG8gcmVtYWluIGFuZCBzcGVuZCB0aGUgd2ludGVyIHdpdGggaGltLiBCdXQgQWdlc2lsYcO8cyB3YXMgZWFnZXIgdG8gcmV0dXJuIHRvIHRoZSB3YXIgYXQgaG9tZSwga25vd2luZyB0aGF0IGhpcyBjaXR5IG5lZWRlZCBtb25leSBhbmQgd2FzIGhpcmluZyBtZXJjZW5hcmllcy4gSGUgd2FzIHRoZXJlZm9yZSBkaXNtaXNzZWQgd2l0aCBncmVhdCBob25vdXIgYW5kIGNlcmVtb255LCB0YWtpbmcgd2l0aCBoaW0sIGJlc2lkZXMgb3RoZXIgaG9ub3VycyBhbmQgZ2lmdHMsIHR3byBodW5kcmVkIGFuZCB0aGlydHkgdGFsZW50cyBvZiBzaWx2ZXIgZm9yIHRoZSB3YXIgYXQgaG9tZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBpdCB3YXMgbm93IHdpbnRlciwgaGUga2VwdCBjbG9zZSB0byBzaG9yZSB3aXRoIGhpcyBzaGlwcywgYW5kIHdhcyBib3JuZSBhbG9uZyB0aGUgY29hc3Qgb2YgTGlieWEgdG8gYW4gdW5pbmhhYml0ZWQgc3BvdCBjYWxsZWQgdGhlIEhhcmJvdXIgb2YgTWVuZWxhw7xzLiBIZXJlIGhlIGRpZWQsIGF0IHRoZSBhZ2Ugb2YgZWlnaHR5LWZvdXIgeWVhcnMuIEhlIGhhZCBiZWVuIGtpbmcgb2YgU3BhcnRhIGZvcnR5LW9uZSB5ZWFycywgYW5kIGZvciBtb3JlIHRoYW4gdGhpcnR5IG9mIHRoZXNlIGhlIHdhcyB0aGUgZ3JlYXRlc3QgYW5kIG1vc3QgaW5mbHVlbnRpYWwgb2YgYWxsIEhlbGxlbmVzLCBoYXZpbmcgYmVlbiBsb29rZWQgdXBvbiBhcyBsZWFkZXIgYW5kIGtpbmcgb2YgYWxtb3N0IGFsbCBIZWxsYXMsIGRvd24gdG8gdGhlIGJhdHRsZSBvZiBMZXVjdHJhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgU3BhcnRhbiBjdXN0b20sIHdoZW4gbWVuIG9mIG9yZGluYXJ5IHJhbmsgZGllZCBpbiBhIGZvcmVpZ24gY291bnRyeSwgdG8gZ2l2ZSB0aGVpciBib2RpZXMgZnVuZXJhbCByaXRlcyBhbmQgYnVyaWFsIHRoZXJlLCBidXQgdG8gY2FycnkgdGhlIGJvZGllcyBvZiB0aGVpciBraW5ncyBob21lLiBTbyB0aGUgU3BhcnRhbnMgd2hvIHdlcmUgd2l0aCBBZ2VzaWxhw7xzIGVuY2xvc2VkIGhpcyBkZWFkIGJvZHkgaW4gbWVsdGVkIHdheCwgc2luY2UgdGhleSBoYWQgbm8gaG9uZXksIGFuZCBjYXJyaWVkIGl0IGJhY2sgdG8gTGFjZWRhZW1vbi4gVGhlIGtpbmdkb20gZGV2b2x2ZWQgdXBvbiBBcmNoaWRhbXVzIGhpcyBzb24sIGFuZCByZW1haW5lZCBpbiBoaXMgZmFtaWx5IGRvd24gdG8gQWdpcywgd2hvIHdhcyBzbGFpbiBieSBMZW9uaWRhcwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjQwIEIuQy4gU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdpcyAxOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFnaXM8L3RpdGxlPiwgY2hhcHRlcnMgeGl4LjwvYmlibD4sIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2lzIDIwLjEiIHZhbGlkPSJ5ZXMiPnh4PC9iaWJsPi48L25vdGU+IGZvciBhdHRlbXB0aW5nIHRvIHJlc3RvcmUgdGhlIGFuY2llbnQgY29uc3RpdHV0aW9uLCBiZWluZyB0aGUgZmlmdGggaW4gZGVzY2VudCBmcm9tIEFnZXNpbGHDvHMuIAoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
