var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  if (Array.isArray(lineNumber)) {
    lineNumber = lineNumber[0];
  }
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyBub3QgSGlzdG9yaWVzIHRoYXQgSSBhbSB3cml0aW5nLCBidXQgTGl2ZXM7IGFuZCBpbiB0aGUgbW9zdCBpbGx1c3RyaW91cyBkZWVkcyB0aGVyZSBpcyBub3QgYWx3YXlzIGEgbWFuaWZlc3RhdGlvbiBvZiB2aXJ0dWUgb3IgdmljZSwgbmF5LCBhIHNsaWdodCB0aGluZyBsaWtlIGEgcGhyYXNlIG9yIGEgamVzdCBvZnRlbiBtYWtlcyBhIGdyZWF0ZXIgcmV2ZWxhdGlvbiBvZiBjaGFyYWN0ZXIgdGhhbiBiYXR0bGVzIHdoZXJlIHRob3VzYW5kcyBmYWxsLCBvciB0aGUgZ3JlYXRlc3QgYXJtYW1lbnRzLCBvciBzaWVnZXMgb2YgY2l0aWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBqdXN0IGFzIHBhaW50ZXJzIGdldCB0aGUgbGlrZW5lc3NlcyBpbiB0aGVpciBwb3J0cmFpdHMgZnJvbSB0aGUgZmFjZSBhbmQgdGhlIGV4cHJlc3Npb24gb2YgdGhlIGV5ZXMsIHdoZXJlaW4gdGhlIGNoYXJhY3RlciBzaG93cyBpdHNlbGYsIGJ1dCBtYWtlIHZlcnkgbGl0dGxlIGFjY291bnQgb2YgdGhlIG90aGVyIHBhcnRzIG9mIHRoZSBib2R5LCBzbyBJIG11c3QgYmUgcGVybWl0dGVkIHRvIGRldm90ZSBteXNlbGYgcmF0aGVyIHRvIHRoZSBzaWducyBvZiB0aGUgc291bCBpbiBtZW4sIGFuZCBieSBtZWFucyBvZiB0aGVzZSB0byBwb3J0cmF5IHRoZSBsaWZlIG9mIGVhY2gsIGxlYXZpbmcgdG8gb3RoZXJzIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGVpciBncmVhdCBjb250ZXN0cy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUgbGluZWFnZSBvZiBBbGV4YW5kZXIsIG9uIGhpcyBmYXRoZXIncyBzaWRlIGhlIHdhcyBhIGRlc2NlbmRhbnQgb2YgSGVyYWNsZXMgdGhyb3VnaCBDYXJhbnVzLCBhbmQgb24gaGlzIG1vdGhlcidzIHNpZGUgYSBkZXNjZW5kYW50IG9mIEFlYWN1cyB0aHJvdWdoIE5lb3B0b2xlbXVzOyB0aGlzIGlzIGFjY2VwdGVkIHdpdGhvdXQgYW55IHF1ZXN0aW9uLiBBbmQgd2UgYXJlIHRvbGQgdGhhdCBQaGlsaXAsIGFmdGVyIGJlaW5nIGluaXRpYXRlZCBpbnRvIHRoZSBteXN0ZXJpZXMgb2YgU2Ftb3RocmFjZSBhdCB0aGUgc2FtZSB0aW1lIHdpdGggT2x5bXBpYXMsIGhlIGhpbXNlbGYgYmVpbmcgc3RpbGwgYSB5b3V0aCBhbmQgc2hlIGFuIG9ycGhhbiBjaGlsZCwgZmVsbCBpbiBsb3ZlIHdpdGggaGVyIGFuZCBiZXRyb3RoZWQgaGltc2VsZiB0byBoZXIgYXQgb25jZSB3aXRoIHRoZSBjb25zZW50IG9mIGhlciBicm90aGVyLCBBcnltYmFzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCB0aGUgbmlnaHQgYmVmb3JlIHRoYXQgb24gd2hpY2ggdGhlIG1hcnJpYWdlIHdhcyBjb25zdW1tYXRlZCwgdGhlIGJyaWRlIGRyZWFtZWQgdGhhdCB0aGVyZSB3YXMgYSBwZWFsIG9mIHRodW5kZXIgYW5kIHRoYXQgYSB0aHVuZGVyLWJvbHQgZmVsbCB1cG9uIGhlciB3b21iLCBhbmQgdGhhdCB0aGVyZWJ5IG11Y2ggZmlyZSB3YXMga2luZGxlZCwgd2hpY2ggYnJva2UgaW50byBmbGFtZXMgdGhhdCB0cmF2ZWxsZWQgYWxsIGFib3V0LCBhbmQgdGhlbiB3YXMgZXh0aW5ndWlzaGVkLiBBdCBhIGxhdGVyIHRpbWUsIHRvbywgYWZ0ZXIgdGhlIG1hcnJpYWdlLCBQaGlsaXAgZHJlYW1lZCB0aGF0IGhlIHdhcyBwdXR0aW5nIGEgc2VhbCB1cG9uIGhpcyB3aWZlJ3Mgd29tYjsgYW5kIHRoZSBkZXZpY2Ugb2YgdGhlIHNlYWwsIGFzIGhlIHRob3VnaHQsIHdhcyB0aGUgZmlndXJlIG9mIGEgbGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG90aGVyIHNlZXJzLCBub3csIHdlcmUgbGVkIGJ5IHRoZSB2aXNpb24gdG8gc3VzcGVjdCB0aGF0IFBoaWxpcCBuZWVkZWQgdG8gcHV0IGEgY2xvc2VyIHdhdGNoIHVwb24gaGlzIG1hcnJpYWdlIHJlbGF0aW9uczsgYnV0IEFyaXN0YW5kZXIgb2YgVGVsbWVzc3VzIHNhaWQgdGhhdCB0aGUgd29tYW4gd2FzIHByZWduYW50LCBzaW5jZSBubyBzZWFsIHdhcyBwdXQgdXBvbiB3aGF0IHdhcyBlbXB0eSwgYW5kIHByZWduYW50IG9mIGEgc29uIHdob3NlIG5hdHVyZSB3b3VsZCBiZSBib2xkIGFuZCBsaW9uLWxpa2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhIHNlcnBlbnQgd2FzIG9uY2Ugc2VlbiBseWluZyBzdHJldGNoZWQgb3V0IGJ5IHRoZSBzaWRlIG9mIE9seW1waWFzIGFzIHNoZSBzbGVwdCwgYW5kIHdlIGFyZSB0b2xkIHRoYXQgdGhpcywgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UsIGR1bGxlZCB0aGUgYXJkb3VyIG9mIFBoaWxpcCdzIGF0dGVudGlvbnMgdG8gaGlzIHdpZmUsIHNvIHRoYXQgaGUgbm8gbG9uZ2VyIGNhbWUgb2Z0ZW4gdG8gc2xlZXAgYnkgaGVyIHNpZGUsIGVpdGhlciBiZWNhdXNlIGhlIGZlYXJlZCB0aGF0IHNvbWUgc3BlbGxzIGFuZCBlbmNoYW50bWVudHMgbWlnaHQgYmUgcHJhY3Rpc2VkIHVwb24gaGltIGJ5IGhlciwgb3IgYmVjYXVzZSBoZSBzaHJhbmsgZnJvbSBoZXIgZW1icmFjZXMgaW4gdGhlIGNvbnZpY3Rpb24gdGhhdCBzaGUgd2FzIHRoZSBwYXJ0bmVyIG9mIGEgc3VwZXJpb3IgYmVpbmcuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgdGhlIGxpbmVhZ2Ugb2YgQWxleGFuZGVyLCBvbiBoaXMgZmF0aGVyJ3Mgc2lkZSBoZSB3YXMgYSBkZXNjZW5kYW50IG9mIEhlcmFjbGVzIHRocm91Z2ggQ2FyYW51cywgYW5kIG9uIGhpcyBtb3RoZXIncyBzaWRlIGEgZGVzY2VuZGFudCBvZiBBZWFjdXMgdGhyb3VnaCBOZW9wdG9sZW11czsgdGhpcyBpcyBhY2NlcHRlZCB3aXRob3V0IGFueSBxdWVzdGlvbi4gQW5kIHdlIGFyZSB0b2xkIHRoYXQgUGhpbGlwLCBhZnRlciBiZWluZyBpbml0aWF0ZWQgaW50byB0aGUgbXlzdGVyaWVzIG9mIFNhbW90aHJhY2UgYXQgdGhlIHNhbWUgdGltZSB3aXRoIE9seW1waWFzLCBoZSBoaW1zZWxmIGJlaW5nIHN0aWxsIGEgeW91dGggYW5kIHNoZSBhbiBvcnBoYW4gY2hpbGQsIGZlbGwgaW4gbG92ZSB3aXRoIGhlciBhbmQgYmV0cm90aGVkIGhpbXNlbGYgdG8gaGVyIGF0IG9uY2Ugd2l0aCB0aGUgY29uc2VudCBvZiBoZXIgYnJvdGhlciwgQXJ5bWJhcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIHRoZSBuaWdodCBiZWZvcmUgdGhhdCBvbiB3aGljaCB0aGUgbWFycmlhZ2Ugd2FzIGNvbnN1bW1hdGVkLCB0aGUgYnJpZGUgZHJlYW1lZCB0aGF0IHRoZXJlIHdhcyBhIHBlYWwgb2YgdGh1bmRlciBhbmQgdGhhdCBhIHRodW5kZXItYm9sdCBmZWxsIHVwb24gaGVyIHdvbWIsIGFuZCB0aGF0IHRoZXJlYnkgbXVjaCBmaXJlIHdhcyBraW5kbGVkLCB3aGljaCBicm9rZSBpbnRvIGZsYW1lcyB0aGF0IHRyYXZlbGxlZCBhbGwgYWJvdXQsIGFuZCB0aGVuIHdhcyBleHRpbmd1aXNoZWQuIEF0IGEgbGF0ZXIgdGltZSwgdG9vLCBhZnRlciB0aGUgbWFycmlhZ2UsIFBoaWxpcCBkcmVhbWVkIHRoYXQgaGUgd2FzIHB1dHRpbmcgYSBzZWFsIHVwb24gaGlzIHdpZmUncyB3b21iOyBhbmQgdGhlIGRldmljZSBvZiB0aGUgc2VhbCwgYXMgaGUgdGhvdWdodCwgd2FzIHRoZSBmaWd1cmUgb2YgYSBsaW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvdGhlciBzZWVycywgbm93LCB3ZXJlIGxlZCBieSB0aGUgdmlzaW9uIHRvIHN1c3BlY3QgdGhhdCBQaGlsaXAgbmVlZGVkIHRvIHB1dCBhIGNsb3NlciB3YXRjaCB1cG9uIGhpcyBtYXJyaWFnZSByZWxhdGlvbnM7IGJ1dCBBcmlzdGFuZGVyIG9mIFRlbG1lc3N1cyBzYWlkIHRoYXQgdGhlIHdvbWFuIHdhcyBwcmVnbmFudCwgc2luY2Ugbm8gc2VhbCB3YXMgcHV0IHVwb24gd2hhdCB3YXMgZW1wdHksIGFuZCBwcmVnbmFudCBvZiBhIHNvbiB3aG9zZSBuYXR1cmUgd291bGQgYmUgYm9sZCBhbmQgbGlvbi1saWtlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhIHNlcnBlbnQgd2FzIG9uY2Ugc2VlbiBseWluZyBzdHJldGNoZWQgb3V0IGJ5IHRoZSBzaWRlIG9mIE9seW1waWFzIGFzIHNoZSBzbGVwdCwgYW5kIHdlIGFyZSB0b2xkIHRoYXQgdGhpcywgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UsIGR1bGxlZCB0aGUgYXJkb3VyIG9mIFBoaWxpcCdzIGF0dGVudGlvbnMgdG8gaGlzIHdpZmUsIHNvIHRoYXQgaGUgbm8gbG9uZ2VyIGNhbWUgb2Z0ZW4gdG8gc2xlZXAgYnkgaGVyIHNpZGUsIGVpdGhlciBiZWNhdXNlIGhlIGZlYXJlZCB0aGF0IHNvbWUgc3BlbGxzIGFuZCBlbmNoYW50bWVudHMgbWlnaHQgYmUgcHJhY3Rpc2VkIHVwb24gaGltIGJ5IGhlciwgb3IgYmVjYXVzZSBoZSBzaHJhbmsgZnJvbSBoZXIgZW1icmFjZXMgaW4gdGhlIGNvbnZpY3Rpb24gdGhhdCBzaGUgd2FzIHRoZSBwYXJ0bmVyIG9mIGEgc3VwZXJpb3IgYmVpbmcuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGNvbmNlcm5pbmcgdGhlc2UgbWF0dGVycyB0aGVyZSBpcyBhbm90aGVyIHN0b3J5IHRvIHRoaXMgZWZmZWN0OiBhbGwgdGhlIHdvbWVuIG9mIHRoZXNlIHBhcnRzIHdlcmUgYWRkaWN0ZWQgdG8gdGhlIE9ycGhpYyByaXRlcyBhbmQgdGhlIG9yZ2llcyBvZiBEaW9ueXN1cyBmcm9tIHZlcnkgYW5jaWVudCB0aW1lcyAoYmVpbmcgY2FsbGVkIEtsb2RvbmVzIGFuZCBNaW1hbGxvbmVzCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5NYWNlZG9uaWFuIG5hbWVzIGZvciBCYWNjaGFudGVzLjwvbm90ZT4pLCBhbmQgaW1pdGF0ZWQgaW4gbWFueSB3YXlzIHRoZSBwcmFjdGljZXMgb2YgdGhlIEVkb25pYW4gd29tZW4gYW5kIHRoZSBUaHJhY2lhbiB3b21lbiBhYm91dCBNb3VudCBIYWVtdXMsIGZyb20gd2hvbSwgYXMgaXQgd291bGQgc2VlbSwgdGhlIHdvcmQgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhyZXNrZXVlaW48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIGFwcGFyZW50bHkgZGVyaXZlcyB0aGlzIHZlcmIgZnJvbSA8Zm9yZWlnbiBsYW5nPSJncmVlayI+zpjPgeG/h8+Dz4POsc65PC9mb3JlaWduPiAoPGdsb3NzPlRocmFjaWFuIHdvbWVuPC9nbG9zcz4pLjwvbm90ZT4gY2FtZSB0byBiZSBhcHBsaWVkIHRvIHRoZSBjZWxlYnJhdGlvbiBvZiBleHRyYXZhZ2FudCBhbmQgc3VwZXJzdGl0aW91cyBjZXJlbW9uaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgT2x5bXBpYXMsIHdobyBhZmZlY3RlZCB0aGVzZSBkaXZpbmUgcG9zc2Vzc2lvbnMgbW9yZSB6ZWFsb3VzbHkgdGhhbiBvdGhlciB3b21lbiwgYW5kIGNhcnJpZWQgb3V0IHRoZXNlIGRpdmluZSBpbnNwaXJhdGlvbnMgaW4gd2lsZGVyIGZhc2hpb24sIHVzZWQgdG8gcHJvdmlkZSB0aGUgcmV2ZWxsaW5nIGNvbXBhbmllcyB3aXRoIGdyZWF0IHRhbWUgc2VycGVudHMsIHdoaWNoIHdvdWxkIG9mdGVuIGxpZnQgdGhlaXIgaGVhZHMgZnJvbSBvdXQgdGhlIGl2eSBhbmQgdGhlIG15c3RpYyB3aW5ub3dpbmctYmFza2V0cywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNhY3JlZCB0byBEaW9ueXN1cywgYW5kIGNhcnJpZWQgb24gdGhlIGhlYWRzIG9mIHRoZSBjZWxlYnJhbnRzLiA8L25vdGU+IG9yIGNvaWwgdGhlbXNlbHZlcyBhYm91dCB0aGUgd2FuZHMgYW5kIGdhcmxhbmRzIG9mIHRoZSB3b21lbiwgdGh1cyB0ZXJyaWZ5aW5nIHRoZSBtZW4uPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBjb25jZXJuaW5nIHRoZXNlIG1hdHRlcnMgdGhlcmUgaXMgYW5vdGhlciBzdG9yeSB0byB0aGlzIGVmZmVjdDogYWxsIHRoZSB3b21lbiBvZiB0aGVzZSBwYXJ0cyB3ZXJlIGFkZGljdGVkIHRvIHRoZSBPcnBoaWMgcml0ZXMgYW5kIHRoZSBvcmdpZXMgb2YgRGlvbnlzdXMgZnJvbSB2ZXJ5IGFuY2llbnQgdGltZXMgKGJlaW5nIGNhbGxlZCBLbG9kb25lcyBhbmQgTWltYWxsb25lcwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5NYWNlZG9uaWFuIG5hbWVzIGZvciBCYWNjaGFudGVzLjwvbm90ZT4pLCBhbmQgaW1pdGF0ZWQgaW4gbWFueSB3YXlzIHRoZSBwcmFjdGljZXMgb2YgdGhlIEVkb25pYW4gd29tZW4gYW5kIHRoZSBUaHJhY2lhbiB3b21lbiBhYm91dCBNb3VudCBIYWVtdXMsIGZyb20gd2hvbSwgYXMgaXQgd291bGQgc2VlbSwgdGhlIHdvcmQgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aHJlc2tldWVpbjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QbHV0YXJjaCBhcHBhcmVudGx5IGRlcml2ZXMgdGhpcyB2ZXJiIGZyb20gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zpjPgeG/h8+Dz4POsc65PC9mb3JlaWduPiAoPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhyYWNpYW4gd29tZW48L2dsb3NzPikuPC9ub3RlPiBjYW1lIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGNlbGVicmF0aW9uIG9mIGV4dHJhdmFnYW50IGFuZCBzdXBlcnN0aXRpb3VzIGNlcmVtb25pZXMuIAoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zpjPgeG/h8+Dz4POsc65PC9mb3JlaWduPiAoPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhyYWNpYW4gd29tZW48L2dsb3NzPikuPC90cmFuc2xhdGlvbj4="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBPbHltcGlhcywgd2hvIGFmZmVjdGVkIHRoZXNlIGRpdmluZSBwb3NzZXNzaW9ucyBtb3JlIHplYWxvdXNseSB0aGFuIG90aGVyIHdvbWVuLCBhbmQgY2FycmllZCBvdXQgdGhlc2UgZGl2aW5lIGluc3BpcmF0aW9ucyBpbiB3aWxkZXIgZmFzaGlvbiwgdXNlZCB0byBwcm92aWRlIHRoZSByZXZlbGxpbmcgY29tcGFuaWVzIHdpdGggZ3JlYXQgdGFtZSBzZXJwZW50cywgd2hpY2ggd291bGQgb2Z0ZW4gbGlmdCB0aGVpciBoZWFkcyBmcm9tIG91dCB0aGUgaXZ5IGFuZCB0aGUgbXlzdGljIHdpbm5vd2luZy1iYXNrZXRzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TYWNyZWQgdG8gRGlvbnlzdXMsIGFuZCBjYXJyaWVkIG9uIHRoZSBoZWFkcyBvZiB0aGUgY2VsZWJyYW50cy4gPC9ub3RlPiBvciBjb2lsIHRoZW1zZWx2ZXMgYWJvdXQgdGhlIHdhbmRzIGFuZCBnYXJsYW5kcyBvZiB0aGUgd29tZW4sIHRodXMgdGVycmlmeWluZyB0aGUgbWVuLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYWZ0ZXIgaGlzIHZpc2lvbiwgYXMgd2UgYXJlIHRvbGQsIFBoaWxpcCBzZW50IENoYWVyb24gb2YgTWVnYWxvcG9saXMgdG8gRGVscGhpLCBieSB3aG9tIGFuIG9yYWNsZSB3YXMgYnJvdWdodCBoaW0gZnJvbSBBcG9sbG8sIHdobyBiYWRlIGhpbSBzYWNyaWZpY2UgdG8gQW1tb24gYW5kIGhvbGQgdGhhdCBnb2QgaW4gZ3JlYXRlc3QgcmV2ZXJlbmNlLCBidXQgdG9sZCBoaW0gaGUgd2FzIHRvIGxvc2UgdGhhdCBvbmUgb2YgaGlzIGV5ZXMgd2hpY2ggaGUgaGFkIGFwcGxpZWQgdG8gdGhlIGNoaW5rIGluIHRoZSBkb29yIHdoZW4gaGUgZXNwaWVkIHRoZSBnb2QsIGluIHRoZSBmb3JtIG9mIGEgc2VycGVudCwgc2hhcmluZyB0aGUgY291Y2ggb2YgaGlzIHdpZmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBPbHltcGlhcywgYXMgRXJhdG9zdGhlbmVzIHNheXMsIHdoZW4gc2hlIHNlbnQgQWxleGFuZGVyIGZvcnRoIHVwb24gaGlzIGdyZWF0IGV4cGVkaXRpb24sIHRvbGQgaGltLCBhbmQgaGltIGFsb25lLCB0aGUgc2VjcmV0IG9mIGhpcyBiZWdldHRpbmcsIGFuZCBiYWRlIGhpbSBoYXZlIHB1cnBvc2VzIHdvcnRoeSBvZiBoaXMgYmlydGguIE90aGVycywgb24gdGhlIGNvbnRyYXJ5LCBzYXkgdGhhdCBzaGUgcmVwdWRpYXRlZCB0aGUgaWRlYSwgYW5kIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFsZXhhbmRlciBtdXN0IGNlYXNlIHNsYW5kZXJpbmcgbWUgdG8gSGVyYS48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBsYXdmdWwgc3BvdXNlIG9mIFpldXMgQW1tb24uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhZnRlciBoaXMgdmlzaW9uLCBhcyB3ZSBhcmUgdG9sZCwgUGhpbGlwIHNlbnQgQ2hhZXJvbiBvZiBNZWdhbG9wb2xpcyB0byBEZWxwaGksIGJ5IHdob20gYW4gb3JhY2xlIHdhcyBicm91Z2h0IGhpbSBmcm9tIEFwb2xsbywgd2hvIGJhZGUgaGltIHNhY3JpZmljZSB0byBBbW1vbiBhbmQgaG9sZCB0aGF0IGdvZCBpbiBncmVhdGVzdCByZXZlcmVuY2UsIGJ1dCB0b2xkIGhpbSBoZSB3YXMgdG8gbG9zZSB0aGF0IG9uZSBvZiBoaXMgZXllcyB3aGljaCBoZSBoYWQgYXBwbGllZCB0byB0aGUgY2hpbmsgaW4gdGhlIGRvb3Igd2hlbiBoZSBlc3BpZWQgdGhlIGdvZCwgaW4gdGhlIGZvcm0gb2YgYSBzZXJwZW50LCBzaGFyaW5nIHRoZSBjb3VjaCBvZiBoaXMgd2lmZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBPbHltcGlhcywgYXMgRXJhdG9zdGhlbmVzIHNheXMsIHdoZW4gc2hlIHNlbnQgQWxleGFuZGVyIGZvcnRoIHVwb24gaGlzIGdyZWF0IGV4cGVkaXRpb24sIHRvbGQgaGltLCBhbmQgaGltIGFsb25lLCB0aGUgc2VjcmV0IG9mIGhpcyBiZWdldHRpbmcsIGFuZCBiYWRlIGhpbSBoYXZlIHB1cnBvc2VzIHdvcnRoeSBvZiBoaXMgYmlydGguIE90aGVycywgb24gdGhlIGNvbnRyYXJ5LCBzYXkgdGhhdCBzaGUgcmVwdWRpYXRlZCB0aGUgaWRlYSwgYW5kIHNhaWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxleGFuZGVyIG11c3QgY2Vhc2Ugc2xhbmRlcmluZyBtZSB0byBIZXJhLjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgbGF3ZnVsIHNwb3VzZSBvZiBaZXVzIEFtbW9uLjwvbm90ZT4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QmUgdGhhdCBhcyBpdCBtYXksIEFsZXhhbmRlciB3YXMgYm9ybiBlYXJseSBpbiB0aGUgbW9udGggSGVjYXRvbWJhZW9uLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MzU2IEIuQy4gVGhlIGRheSBvZiBiaXJ0aCBoYXMgcHJvYmFibHkgYmVlbiBtb3ZlZCBiYWNrIHR3byBvciB0aHJlZSBtb250aHMgZm9yIHRoZSBzYWtlIG9mIHRoZSBjb2luY2lkZW5jZSBtZW50aW9uZWQgYmVsb3cgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiAzLjUiIHZhbGlkPSJ5ZXMiPsKnIDU8L2JpYmw+KS4gSGVjYXRvbWJhZW9uIGNvcnJlc3BvbmRzIG5lYXJseSB0byBKdWx5Ljwvbm90ZT4gdGhlIE1hY2Vkb25pYW4gbmFtZSBmb3Igd2hpY2ggaXMgTG/DvHMsIG9uIHRoZSBzaXh0aCBkYXkgb2YgdGhlIG1vbnRoLCBhbmQgb24gdGhpcyBkYXkgdGhlIHRlbXBsZSBvZiBFcGhlc2lhbiBBcnRlbWlzIHdhcyBidXJudC4gSXQgd2FzIGFwcm9wb3Mgb2YgdGhpcyB0aGF0IEhlZ2VzaWFzIHRoZSBNYWduZXNpYW4gbWFkZSBhbiB1dHRlcmFuY2UgZnJpZ2lkIGVub3VnaCB0byBoYXZlIGV4dGluZ3Vpc2hlZCB0aGF0IGdyZWF0IGNvbmZsYWdyYXRpb24uIEhlIHNhaWQsIG5hbWVseSwgaXQgd2FzIG5vIHdvbmRlciB0aGF0IHRoZSB0ZW1wbGUgb2YgQXJ0ZW1pcyB3YXMgYnVybmVkIGRvd24sIHNpbmNlIHRoZSBnb2RkZXNzIHdhcyBidXN5IGJyaW5naW5nIEFsZXhhbmRlciBpbnRvIHRoZSB3b3JsZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFsbCB0aGUgTWFnaSB3aG8gd2VyZSB0aGVuIGF0IEVwaGVzdXMsIGxvb2tpbmcgdXBvbiB0aGUgdGVtcGxlJ3MgZGlzYXN0ZXIgYXMgYSBzaWduIG9mIGZ1cnRoZXIgZGlzYXN0ZXIsIHJhbiBhYm91dCBiZWF0aW5nIHRoZWlyIGZhY2VzIGFuZCBjcnlpbmcgYWxvdWQgdGhhdCB3b2UgYW5kIGdyZWF0IGNhbGFtaXR5IGZvciBBc2lhIGhhZCB0aGF0IGRheSBiZWVuIGJvcm4uIFRvIFBoaWxpcCwgaG93ZXZlciwgd2hvIGhhZCBqdXN0IHRha2VuIFBvdGlkYWVhLCB0aGVyZSBjYW1lIHRocmVlIG1lc3NhZ2VzIGF0IHRoZSBzYW1lIHRpbWU6IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnRoZSBmaXJzdCB0aGF0IFBhcm1lbmlvIGhhZCBjb25xdWVyZWQgdGhlIElsbHlyaWFucyBpbiBhIGdyZWF0IGJhdHRsZSwgdGhlIHNlY29uZCB0aGF0IGhpcyByYWNlLWhvcnNlIGhhZCB3b24gYSB2aWN0b3J5IGF0IHRoZSBPbHltcGljIGdhbWVzLCB3aGlsZSBhIHRoaXJkIGFubm91bmNlZCB0aGUgYmlydGggb2YgQWxleGFuZGVyLiBUaGVzZSB0aGluZ3MgZGVsaWdodGVkIGhpbSwgb2YgY291cnNlLCBhbmQgdGhlIHNlZXJzIHJhaXNlZCBoaXMgc3Bpcml0cyBzdGlsbCBoaWdoZXIgYnkgZGVjbGFyaW5nIHRoYXQgdGhlIHNvbiB3aG9zZSBiaXJ0aCBjb2luY2lkZWQgd2l0aCB0aHJlZSB2aWN0b3JpZXMgd291bGQgYmUgYWx3YXlzIHZpY3RvcmlvdXMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlIHRoYXQgYXMgaXQgbWF5LCBBbGV4YW5kZXIgd2FzIGJvcm4gZWFybHkgaW4gdGhlIG1vbnRoIEhlY2F0b21iYWVvbiwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MzU2IEIuQy4gVGhlIGRheSBvZiBiaXJ0aCBoYXMgcHJvYmFibHkgYmVlbiBtb3ZlZCBiYWNrIHR3byBvciB0aHJlZSBtb250aHMgZm9yIHRoZSBzYWtlIG9mIHRoZSBjb2luY2lkZW5jZSBtZW50aW9uZWQgYmVsb3cgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDMuNSIgdmFsaWQ9InllcyI+wqcgNTwvYmlibD4pLiBIZWNhdG9tYmFlb24gY29ycmVzcG9uZHMgbmVhcmx5IHRvIEp1bHkuPC9ub3RlPiB0aGUgTWFjZWRvbmlhbiBuYW1lIGZvciB3aGljaCBpcyBMb8O8cywgb24gdGhlIHNpeHRoIGRheSBvZiB0aGUgbW9udGgsIGFuZCBvbiB0aGlzIGRheSB0aGUgdGVtcGxlIG9mIEVwaGVzaWFuIEFydGVtaXMgd2FzIGJ1cm50LiBJdCB3YXMgYXByb3BvcyBvZiB0aGlzIHRoYXQgSGVnZXNpYXMgdGhlIE1hZ25lc2lhbiBtYWRlIGFuIHV0dGVyYW5jZSBmcmlnaWQgZW5vdWdoIHRvIGhhdmUgZXh0aW5ndWlzaGVkIHRoYXQgZ3JlYXQgY29uZmxhZ3JhdGlvbi4gSGUgc2FpZCwgbmFtZWx5LCBpdCB3YXMgbm8gd29uZGVyIHRoYXQgdGhlIHRlbXBsZSBvZiBBcnRlbWlzIHdhcyBidXJuZWQgZG93biwgc2luY2UgdGhlIGdvZGRlc3Mgd2FzIGJ1c3kgYnJpbmdpbmcgQWxleGFuZGVyIGludG8gdGhlIHdvcmxkLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDMuNSIgdmFsaWQ9InllcyI+wqcgNTwvYmlibD4pLiBIZWNhdG9tYmFlb24gY29ycmVzcG9uZHMgbmVhcmx5IHRvIEp1bHkuPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbGwgdGhlIE1hZ2kgd2hvIHdlcmUgdGhlbiBhdCBFcGhlc3VzLCBsb29raW5nIHVwb24gdGhlIHRlbXBsZSdzIGRpc2FzdGVyIGFzIGEgc2lnbiBvZiBmdXJ0aGVyIGRpc2FzdGVyLCByYW4gYWJvdXQgYmVhdGluZyB0aGVpciBmYWNlcyBhbmQgY3J5aW5nIGFsb3VkIHRoYXQgd29lIGFuZCBncmVhdCBjYWxhbWl0eSBmb3IgQXNpYSBoYWQgdGhhdCBkYXkgYmVlbiBib3JuLiBUbyBQaGlsaXAsIGhvd2V2ZXIsIHdobyBoYWQganVzdCB0YWtlbiBQb3RpZGFlYSwgdGhlcmUgY2FtZSB0aHJlZSBtZXNzYWdlcyBhdCB0aGUgc2FtZSB0aW1lOiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnRoZSBmaXJzdCB0aGF0IFBhcm1lbmlvIGhhZCBjb25xdWVyZWQgdGhlIElsbHlyaWFucyBpbiBhIGdyZWF0IGJhdHRsZSwgdGhlIHNlY29uZCB0aGF0IGhpcyByYWNlLWhvcnNlIGhhZCB3b24gYSB2aWN0b3J5IGF0IHRoZSBPbHltcGljIGdhbWVzLCB3aGlsZSBhIHRoaXJkIGFubm91bmNlZCB0aGUgYmlydGggb2YgQWxleGFuZGVyLiBUaGVzZSB0aGluZ3MgZGVsaWdodGVkIGhpbSwgb2YgY291cnNlLCBhbmQgdGhlIHNlZXJzIHJhaXNlZCBoaXMgc3Bpcml0cyBzdGlsbCBoaWdoZXIgYnkgZGVjbGFyaW5nIHRoYXQgdGhlIHNvbiB3aG9zZSBiaXJ0aCBjb2luY2lkZWQgd2l0aCB0aHJlZSB2aWN0b3JpZXMgd291bGQgYmUgYWx3YXlzIHZpY3RvcmlvdXMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgb3V0d2FyZCBhcHBlYXJhbmNlIG9mIEFsZXhhbmRlciBpcyBiZXN0IHJlcHJlc2VudGVkIGJ5IHRoZSBzdGF0dWVzIG9mIGhpbSB3aGljaCBMeXNpcHB1cyBtYWRlLCBhbmQgaXQgd2FzIGJ5IHRoaXMgYXJ0aXN0IGFsb25lIHRoYXQgQWxleGFuZGVyIGhpbXNlbGYgdGhvdWdodCBpdCBmaXQgdGhhdCBoZSBzaG91bGQgYmUgbW9kZWxsZWQuIEZvciB0aG9zZSBwZWN1bGlhcml0aWVzIHdoaWNoIG1hbnkgb2YgaGlzIHN1Y2Nlc3NvcnMgYW5kIGZyaWVuZHMgYWZ0ZXJ3YXJkcyB0cmllZCB0byBpbWl0YXRlLCBuYW1lbHksIHRoZSBwb2lzZSBvZiB0aGUgbmVjaywgd2hpY2ggd2FzIGJlbnQgc2xpZ2h0bHkgdG8gdGhlIGxlZnQsIGFuZCB0aGUgbWVsdGluZyBnbGFuY2Ugb2YgaGlzIGV5ZXMsIHRoaXMgYXJ0aXN0IGhhcyBhY2N1cmF0ZWx5IG9ic2VydmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BcGVsbGVzLCBob3dldmVyLCBpbiBwYWludGluZyBoaW0gYXMgd2llbGRlciBvZiB0aGUgdGh1bmRlcmJvbHQsIGRpZCBub3QgcmVwcm9kdWNlIGhpcyBjb21wbGV4aW9uLCBidXQgbWFkZSBpdCB0b28gZGFyayBhbmQgc3dhcnRoeS4gV2hlcmVhcyBoZSB3YXMgb2YgYSBmYWlyIGNvbG91ciwgYXMgdGhleSBzYXksIGFuZCBoaXMgZmFpcm5lc3MgcGFzc2VkIGludG8gcnVkZGluZXNzIG9uIGhpcyBicmVhc3QgcGFydGljdWxhcmx5LCBhbmQgaW4gaGlzIGZhY2UuIE1vcmVvdmVyLCB0aGF0IGEgdmVyeSBwbGVhc2FudCBvZG91ciBleGhhbGVkIGZyb20gaGlzIHNraW4gYW5kIHRoYXQgdGhlcmUgd2FzIGEgZnJhZ3JhbmNlIGFib3V0IGhpcyBtb3V0aCBhbmQgYWxsIGhpcyBmbGVzaCwgc28gdGhhdCBoaXMgZ2FybWVudHMgd2VyZSBmaWxsZWQgd2l0aCBpdCwgdGhpcyB3ZSBoYXZlIHJlYWQgaW4gdGhlIE1lbW9pcnMgb2YgQXJpc3RveGVudXMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgb3V0d2FyZCBhcHBlYXJhbmNlIG9mIEFsZXhhbmRlciBpcyBiZXN0IHJlcHJlc2VudGVkIGJ5IHRoZSBzdGF0dWVzIG9mIGhpbSB3aGljaCBMeXNpcHB1cyBtYWRlLCBhbmQgaXQgd2FzIGJ5IHRoaXMgYXJ0aXN0IGFsb25lIHRoYXQgQWxleGFuZGVyIGhpbXNlbGYgdGhvdWdodCBpdCBmaXQgdGhhdCBoZSBzaG91bGQgYmUgbW9kZWxsZWQuIEZvciB0aG9zZSBwZWN1bGlhcml0aWVzIHdoaWNoIG1hbnkgb2YgaGlzIHN1Y2Nlc3NvcnMgYW5kIGZyaWVuZHMgYWZ0ZXJ3YXJkcyB0cmllZCB0byBpbWl0YXRlLCBuYW1lbHksIHRoZSBwb2lzZSBvZiB0aGUgbmVjaywgd2hpY2ggd2FzIGJlbnQgc2xpZ2h0bHkgdG8gdGhlIGxlZnQsIGFuZCB0aGUgbWVsdGluZyBnbGFuY2Ugb2YgaGlzIGV5ZXMsIHRoaXMgYXJ0aXN0IGhhcyBhY2N1cmF0ZWx5IG9ic2VydmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFwZWxsZXMsIGhvd2V2ZXIsIGluIHBhaW50aW5nIGhpbSBhcyB3aWVsZGVyIG9mIHRoZSB0aHVuZGVyYm9sdCwgZGlkIG5vdCByZXByb2R1Y2UgaGlzIGNvbXBsZXhpb24sIGJ1dCBtYWRlIGl0IHRvbyBkYXJrIGFuZCBzd2FydGh5LiBXaGVyZWFzIGhlIHdhcyBvZiBhIGZhaXIgY29sb3VyLCBhcyB0aGV5IHNheSwgYW5kIGhpcyBmYWlybmVzcyBwYXNzZWQgaW50byBydWRkaW5lc3Mgb24gaGlzIGJyZWFzdCBwYXJ0aWN1bGFybHksIGFuZCBpbiBoaXMgZmFjZS4gTW9yZW92ZXIsIHRoYXQgYSB2ZXJ5IHBsZWFzYW50IG9kb3VyIGV4aGFsZWQgZnJvbSBoaXMgc2tpbiBhbmQgdGhhdCB0aGVyZSB3YXMgYSBmcmFncmFuY2UgYWJvdXQgaGlzIG1vdXRoIGFuZCBhbGwgaGlzIGZsZXNoLCBzbyB0aGF0IGhpcyBnYXJtZW50cyB3ZXJlIGZpbGxlZCB3aXRoIGl0LCB0aGlzIHdlIGhhdmUgcmVhZCBpbiB0aGUgTWVtb2lycyBvZiBBcmlzdG94ZW51cy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBjYXVzZSBvZiB0aGlzLCBwZXJoYXBzLCB3YXMgdGhlIHRlbXBlcmFtZW50IG9mIGhpcyBib2R5LCB3aGljaCB3YXMgYSB2ZXJ5IHdhcm0gYW5kIGZpZXJ5IG9uZTsgZm9yIGZyYWdyYW5jZSBpcyBnZW5lcmF0ZWQsIGFzIFRoZW9waHJhc3R1cyB0aGlua3MsIHdoZXJlIG1vaXN0IGh1bW91cnMgYXJlIGFjdGVkIHVwb24gYnkgaGVhdC4gV2hlcmVmb3JlIHRoZSBkcnkgYW5kIHBhcmNoZWQgcmVnaW9ucyBvZiB0aGUgd29ybGQgcHJvZHVjZSB0aGUgbW9zdCBhbmQgYmVzdCBzcGljZXM7IGZvciB0aGUgc3VuIGRyYXdzIGF3YXkgdGhlIG1vaXN0dXJlIHdoaWNoLCBsaWtlIG1hdGVyaWFsIG9mIGNvcnJ1cHRpb24sIGFib3VuZHMgaW4gdmVnZXRhYmxlIGJvZGllcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluIEFsZXhhbmRlcidzIGNhc2UsIGl0IHdhcyB0aGUgaGVhdCBvZiBoaXMgYm9keSwgYXMgaXQgd291bGQgc2VlbSwgd2hpY2ggbWFkZSBoaW0gcHJvbmUgdG8gZHJpbmssIGFuZCBjaG9sZXJpYy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGNhdXNlIG9mIHRoaXMsIHBlcmhhcHMsIHdhcyB0aGUgdGVtcGVyYW1lbnQgb2YgaGlzIGJvZHksIHdoaWNoIHdhcyBhIHZlcnkgd2FybSBhbmQgZmllcnkgb25lOyBmb3IgZnJhZ3JhbmNlIGlzIGdlbmVyYXRlZCwgYXMgVGhlb3BocmFzdHVzIHRoaW5rcywgd2hlcmUgbW9pc3QgaHVtb3VycyBhcmUgYWN0ZWQgdXBvbiBieSBoZWF0LiBXaGVyZWZvcmUgdGhlIGRyeSBhbmQgcGFyY2hlZCByZWdpb25zIG9mIHRoZSB3b3JsZCBwcm9kdWNlIHRoZSBtb3N0IGFuZCBiZXN0IHNwaWNlczsgZm9yIHRoZSBzdW4gZHJhd3MgYXdheSB0aGUgbW9pc3R1cmUgd2hpY2gsIGxpa2UgbWF0ZXJpYWwgb2YgY29ycnVwdGlvbiwgYWJvdW5kcyBpbiB2ZWdldGFibGUgYm9kaWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiBBbGV4YW5kZXIncyBjYXNlLCBpdCB3YXMgdGhlIGhlYXQgb2YgaGlzIGJvZHksIGFzIGl0IHdvdWxkIHNlZW0sIHdoaWNoIG1hZGUgaGltIHByb25lIHRvIGRyaW5rLCBhbmQgY2hvbGVyaWMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgd2hpbGUgaGUgd2FzIHN0aWxsIGEgYm95IGhpcyBzZWxmLXJlc3RyYWludCBzaG93ZWQgaXRzZWxmIGluIHRoZSBmYWN0IHRoYXQsIGFsdGhvdWdoIGhlIHdhcyBpbXBldHVvdXMgYW5kIHZpb2xlbnQgaW4gb3RoZXIgbWF0dGVycywgdGhlIHBsZWFzdXJlcyBvZiB0aGUgYm9keSBoYWQgbGl0dGxlIGhvbGQgdXBvbiBoaW0sIGFuZCBoZSBpbmR1bGdlZCBpbiB0aGVtIHdpdGggZ3JlYXQgbW9kZXJhdGlvbiwgd2hpbGUgaGlzIGFtYml0aW9uIGtlcHQgaGlzIHNwaXJpdCBzZXJpb3VzIGFuZCBsb2Z0eSBpbiBhZHZhbmNlIG9mIGhpcyB5ZWFycy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgd2FzIG5laXRoZXIgZXZlcnkga2luZCBvZiBmYW1lIG5vciBmYW1lIGZyb20gZXZlcnkgc291cmNlIHRoYXQgaGUgY291cnRlZCwgYXMgUGhpbGlwIGRpZCwgd2hvIHBsdW1lZCBoaW1zZWxmIGxpa2UgYSBzb3BoaXN0IG9uIHRoZSBwb3dlciBvZiBoaXMgb3JhdG9yeSwgYW5kIHRvb2sgY2FyZSB0byBoYXZlIHRoZSB2aWN0b3JpZXMgb2YgaGlzIGNoYXJpb3RzIGF0IE9seW1waWEgZW5ncmF2ZWQgdXBvbiBoaXMgY29pbnM7IG5heSwgd2hlbiB0aG9zZSBhYm91dCBoaW0gaW5xdWlyZWQgd2hldGhlciBoZSB3b3VsZCBiZSB3aWxsaW5nIHRvIGNvbnRlbmQgaW4gdGhlIGZvb3QtcmFjZSBhdCB0aGUgT2x5bXBpYyBnYW1lcywgc2luY2UgaGUgd2FzIHN3aWZ0IG9mIGZvb3QsIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcyw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aWYgSSBjb3VsZCBoYXZlIGtpbmdzIGFzIG15IGNvbnRlc3RhbnRzLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW4gZ2VuZXJhbCwgdG9vLCBBbGV4YW5kZXIgYXBwZWFycyB0byBoYXZlIGJlZW4gYXZlcnNlIHRvIHRoZSB3aG9sZSByYWNlIG9mIGF0aGxldGVzOyBhdCBhbnkgcmF0ZSwgdGhvdWdoIGhlIGluc3RpdHV0ZWQgdmVyeSBtYW55IGNvbnRlc3RzLCBub3Qgb25seSBmb3IgdHJhZ2ljIHBvZXRzIGFuZCBwbGF5ZXJzIG9uIHRoZSBmbHV0ZSBhbmQgcGxheWVycyBvbiB0aGUgbHlyZSwgYnV0IGFsc28gZm9yIHJoYXBzb2Rpc3RzLCBhcyB3ZWxsIGFzIGZvciBodW50aW5nIG9mIGV2ZXJ5IHNvcnQgYW5kIGZvciBmaWdodGluZyB3aXRoIHN0YXZlcywgaGUgdG9vayBubyBpbnRlcmVzdCBpbiBvZmZlcmluZyBwcml6ZXMgZWl0aGVyIGZvciBib3hpbmcgb3IgZm9yIHRoZSBwYW5jcmF0aXVtLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgbmVpdGhlciBldmVyeSBraW5kIG9mIGZhbWUgbm9yIGZhbWUgZnJvbSBldmVyeSBzb3VyY2UgdGhhdCBoZSBjb3VydGVkLCBhcyBQaGlsaXAgZGlkLCB3aG8gcGx1bWVkIGhpbXNlbGYgbGlrZSBhIHNvcGhpc3Qgb24gdGhlIHBvd2VyIG9mIGhpcyBvcmF0b3J5LCBhbmQgdG9vayBjYXJlIHRvIGhhdmUgdGhlIHZpY3RvcmllcyBvZiBoaXMgY2hhcmlvdHMgYXQgT2x5bXBpYSBlbmdyYXZlZCB1cG9uIGhpcyBjb2luczsgbmF5LCB3aGVuIHRob3NlIGFib3V0IGhpbSBpbnF1aXJlZCB3aGV0aGVyIGhlIHdvdWxkIGJlIHdpbGxpbmcgdG8gY29udGVuZCBpbiB0aGUgZm9vdC1yYWNlIGF0IHRoZSBPbHltcGljIGdhbWVzLCBzaW5jZSBoZSB3YXMgc3dpZnQgb2YgZm9vdCwgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZXMsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aWYgSSBjb3VsZCBoYXZlIGtpbmdzIGFzIG15IGNvbnRlc3RhbnRzLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiBnZW5lcmFsLCB0b28sIEFsZXhhbmRlciBhcHBlYXJzIHRvIGhhdmUgYmVlbiBhdmVyc2UgdG8gdGhlIHdob2xlIHJhY2Ugb2YgYXRobGV0ZXM7IGF0IGFueSByYXRlLCB0aG91Z2ggaGUgaW5zdGl0dXRlZCB2ZXJ5IG1hbnkgY29udGVzdHMsIG5vdCBvbmx5IGZvciB0cmFnaWMgcG9ldHMgYW5kIHBsYXllcnMgb24gdGhlIGZsdXRlIGFuZCBwbGF5ZXJzIG9uIHRoZSBseXJlLCBidXQgYWxzbyBmb3IgcmhhcHNvZGlzdHMsIGFzIHdlbGwgYXMgZm9yIGh1bnRpbmcgb2YgZXZlcnkgc29ydCBhbmQgZm9yIGZpZ2h0aW5nIHdpdGggc3RhdmVzLCBoZSB0b29rIG5vIGludGVyZXN0IGluIG9mZmVyaW5nIHByaXplcyBlaXRoZXIgZm9yIGJveGluZyBvciBmb3IgdGhlIHBhbmNyYXRpdW0uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBvbmNlIGVudGVydGFpbmVkIHRoZSBlbnZveXMgZnJvbSB0aGUgUGVyc2lhbiBraW5nIHdobyBjYW1lIGR1cmluZyBQaGlsaXAncyBhYnNlbmNlLCBhbmQgYXNzb2NpYXRlZCB3aXRoIHRoZW0gZnJlZWx5LiBIZSB3b24gdXBvbiB0aGVtIGJ5IGhpcyBmcmllbmRsaW5lc3MsIGFuZCBieSBhc2tpbmcgbm8gY2hpbGRpc2ggb3IgdHJpdmlhbCBxdWVzdGlvbnMsIGJ1dCBieSBlbnF1aXJpbmcgYWJvdXQgdGhlIGxlbmd0aCBvZiB0aGUgcm9hZHMgYW5kIHRoZSBjaGFyYWN0ZXIgb2YgdGhlIGpvdXJuZXkgaW50byB0aGUgaW50ZXJpb3IsIGFib3V0IHRoZSBraW5nIGhpbXNlbGYsIHdoYXQgc29ydCBvZiBhIHdhcnJpb3IgaGUgd2FzLCBhbmQgd2hhdCB0aGUgcHJvd2VzcyBhbmQgbWlnaHQgb2YgdGhlIFBlcnNpYW5zLiBUaGUgZW52b3lzIHdlcmUgdGhlcmVmb3JlIGFzdG9uaXNoZWQgYW5kIHJlZ2FyZGVkIHRoZSBtdWNoLXRhbGtlZC1vZiBhYmlsaXR5IG9mIFBoaWxpcCBhcyBub3RoaW5nIGNvbXBhcmVkIHdpdGggaGlzIHNvbidzIGVhZ2VyIGRpc3Bvc2l0aW9uIHRvIGRvIGdyZWF0IHRoaW5ncy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYWxsIGV2ZW50cywgYXMgb2Z0ZW4gYXMgdGlkaW5ncyB3ZXJlIGJyb3VnaHQgdGhhdCBQaGlsaXAgaGFkIGVpdGhlciB0YWtlbiBhIGZhbW91cyBjaXR5IG9yIGJlZW4gdmljdG9yaW91cyBpbiBzb21lIGNlbGVicmF0ZWQgYmF0dGxlLCBBbGV4YW5kZXIgd2FzIG5vdCB2ZXJ5IGdsYWQgdG8gaGVhciB0aGVtLCBidXQgd291bGQgc2F5IHRvIGhpcyBjb21yYWRlczogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Qm95cywgbXkgZmF0aGVyIHdpbGwgYW50aWNpcGF0ZSBldmVyeXRoaW5nOyBhbmQgZm9yIG1lIGhlIHdpbGwgbGVhdmUgbm8gZ3JlYXQgb3IgYnJpbGxpYW50IGFjaGlldmVtZW50IHRvIGJlIGRpc3BsYXllZCB0byB0aGUgd29ybGQgd2l0aCB5b3VyIGFpZC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHNpbmNlIGhlIGRpZCBub3QgY292ZXQgcGxlYXN1cmUsIG5vciBldmVuIHdlYWx0aCwgYnV0IGV4Y2VsbGVuY2UgYW5kIGZhbWUsIGhlIGNvbnNpZGVyZWQgdGhhdCB0aGUgbW9yZSBoZSBzaG91bGQgcmVjZWl2ZSBmcm9tIGhpcyBmYXRoZXIgdGhlIGZld2VyIHdvdWxkIGJlIHRoZSBzdWNjZXNzZXMgd29uIGJ5IGhpbXNlbGYuIFRoZXJlZm9yZSwgY29uc2lkZXJpbmcgdGhhdCBpbmNyZWFzZSBpbiBwcm9zcGVyaXR5IG1lYW50IHRoZSBzcXVhbmRlcmluZyB1cG9uIGhpcyBmYXRoZXIgb2Ygb3Bwb3J0dW5pdGllcyBmb3IgYWNoaWV2ZW1lbnQsIGhlIHByZWZlcnJlZCB0byByZWNlaXZlIGZyb20gaGltIGEgcmVhbG0gd2hpY2ggYWZmb3JkZWQsIG5vdCB3ZWFsdGggbm9yIGx1eHVyeSBhbmQgZW5qb3ltZW50LCBidXQgc3RydWdnbGVzIGFuZCB3YXJzIGFuZCBhbWJpdGlvbnMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBvbmNlIGVudGVydGFpbmVkIHRoZSBlbnZveXMgZnJvbSB0aGUgUGVyc2lhbiBraW5nIHdobyBjYW1lIGR1cmluZyBQaGlsaXAncyBhYnNlbmNlLCBhbmQgYXNzb2NpYXRlZCB3aXRoIHRoZW0gZnJlZWx5LiBIZSB3b24gdXBvbiB0aGVtIGJ5IGhpcyBmcmllbmRsaW5lc3MsIGFuZCBieSBhc2tpbmcgbm8gY2hpbGRpc2ggb3IgdHJpdmlhbCBxdWVzdGlvbnMsIGJ1dCBieSBlbnF1aXJpbmcgYWJvdXQgdGhlIGxlbmd0aCBvZiB0aGUgcm9hZHMgYW5kIHRoZSBjaGFyYWN0ZXIgb2YgdGhlIGpvdXJuZXkgaW50byB0aGUgaW50ZXJpb3IsIGFib3V0IHRoZSBraW5nIGhpbXNlbGYsIHdoYXQgc29ydCBvZiBhIHdhcnJpb3IgaGUgd2FzLCBhbmQgd2hhdCB0aGUgcHJvd2VzcyBhbmQgbWlnaHQgb2YgdGhlIFBlcnNpYW5zLiBUaGUgZW52b3lzIHdlcmUgdGhlcmVmb3JlIGFzdG9uaXNoZWQgYW5kIHJlZ2FyZGVkIHRoZSBtdWNoLXRhbGtlZC1vZiBhYmlsaXR5IG9mIFBoaWxpcCBhcyBub3RoaW5nIGNvbXBhcmVkIHdpdGggaGlzIHNvbidzIGVhZ2VyIGRpc3Bvc2l0aW9uIHRvIGRvIGdyZWF0IHRoaW5ncy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbCBldmVudHMsIGFzIG9mdGVuIGFzIHRpZGluZ3Mgd2VyZSBicm91Z2h0IHRoYXQgUGhpbGlwIGhhZCBlaXRoZXIgdGFrZW4gYSBmYW1vdXMgY2l0eSBvciBiZWVuIHZpY3RvcmlvdXMgaW4gc29tZSBjZWxlYnJhdGVkIGJhdHRsZSwgQWxleGFuZGVyIHdhcyBub3QgdmVyeSBnbGFkIHRvIGhlYXIgdGhlbSwgYnV0IHdvdWxkIHNheSB0byBoaXMgY29tcmFkZXM6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Qm95cywgbXkgZmF0aGVyIHdpbGwgYW50aWNpcGF0ZSBldmVyeXRoaW5nOyBhbmQgZm9yIG1lIGhlIHdpbGwgbGVhdmUgbm8gZ3JlYXQgb3IgYnJpbGxpYW50IGFjaGlldmVtZW50IHRvIGJlIGRpc3BsYXllZCB0byB0aGUgd29ybGQgd2l0aCB5b3VyIGFpZC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBzaW5jZSBoZSBkaWQgbm90IGNvdmV0IHBsZWFzdXJlLCBub3IgZXZlbiB3ZWFsdGgsIGJ1dCBleGNlbGxlbmNlIGFuZCBmYW1lLCBoZSBjb25zaWRlcmVkIHRoYXQgdGhlIG1vcmUgaGUgc2hvdWxkIHJlY2VpdmUgZnJvbSBoaXMgZmF0aGVyIHRoZSBmZXdlciB3b3VsZCBiZSB0aGUgc3VjY2Vzc2VzIHdvbiBieSBoaW1zZWxmLiBUaGVyZWZvcmUsIGNvbnNpZGVyaW5nIHRoYXQgaW5jcmVhc2UgaW4gcHJvc3Blcml0eSBtZWFudCB0aGUgc3F1YW5kZXJpbmcgdXBvbiBoaXMgZmF0aGVyIG9mIG9wcG9ydHVuaXRpZXMgZm9yIGFjaGlldmVtZW50LCBoZSBwcmVmZXJyZWQgdG8gcmVjZWl2ZSBmcm9tIGhpbSBhIHJlYWxtIHdoaWNoIGFmZm9yZGVkLCBub3Qgd2VhbHRoIG5vciBsdXh1cnkgYW5kIGVuam95bWVudCwgYnV0IHN0cnVnZ2xlcyBhbmQgd2FycyBhbmQgYW1iaXRpb25zLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSB3b3JrIG9mIGNhcmluZyBmb3IgaGltLCB0aGVuLCBtYW55IHBlcnNvbnMsIGFzIHdhcyBuYXR1cmFsLCB3ZXJlIGFwcG9pbnRlZCB0byBiZSBoaXMgbnVydHVyZXJzLCB0dXRvcnMsIGFuZCB0ZWFjaGVycywgYnV0IG92ZXIgdGhlbSBhbGwgc3Rvb2QgTGVvbmlkYXMsIGEgbWFuIG9mIHN0ZXJuIHRlbXBlcmFtZW50IGFuZCBhIGtpbnNtYW4gb2YgT2x5bXBpYXMuIEFsdGhvdWdoIGhlIGRpZCBub3QgaGltc2VsZiBzaHVuIHRoZSB0aXRsZSBvZiB0dXRvciwgc2luY2UgdGhlIG9mZmljZSBhZmZvcmRlZCBhbiBob25vdXJhYmxlIGFuZCBicmlsbGlhbnQgb2NjdXBhdGlvbiwgeWV0IGJ5IG90aGVyIHBlb3BsZSwgb3dpbmcgdG8gaGlzIGRpZ25pdHkgYW5kIGhpcyByZWxhdGlvbnNoaXAsIGhlIHdhcyBjYWxsZWQgQWxleGFuZGVyJ3MgZm9zdGVyLWZhdGhlciBhbmQgcHJlY2VwdG9yLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbWFuLCBob3dldmVyLCB3aG8gYXNzdW1lZCB0aGUgY2hhcmFjdGVyIGFuZCB0aGUgdGl0bGUgb2YgdHV0b3Igd2FzIEx5c2ltYWNodXMsIGEgbmF0aXZlIG9mIEFjYXJuYW5pYSwgd2hvIGhhZCBubyBnZW5lcmFsIHJlZmluZW1lbnQsIGJ1dCBiZWNhdXNlIGhlIGNhbGxlZCBoaW1zZWxmIFBob2VuaXgsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgcHJlY2VwdG9yIG9mIEFjaGlsbGVzLjwvbm90ZT4gQWxleGFuZGVyIEFjaGlsbGVzLCBhbmQgUGhpbGlwIFBlbGV1cywgd2FzIGhpZ2hseSByZWdhcmRlZCBhbmQgaGVsZCBhIHNlY29uZCBwbGFjZS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSB3b3JrIG9mIGNhcmluZyBmb3IgaGltLCB0aGVuLCBtYW55IHBlcnNvbnMsIGFzIHdhcyBuYXR1cmFsLCB3ZXJlIGFwcG9pbnRlZCB0byBiZSBoaXMgbnVydHVyZXJzLCB0dXRvcnMsIGFuZCB0ZWFjaGVycywgYnV0IG92ZXIgdGhlbSBhbGwgc3Rvb2QgTGVvbmlkYXMsIGEgbWFuIG9mIHN0ZXJuIHRlbXBlcmFtZW50IGFuZCBhIGtpbnNtYW4gb2YgT2x5bXBpYXMuIEFsdGhvdWdoIGhlIGRpZCBub3QgaGltc2VsZiBzaHVuIHRoZSB0aXRsZSBvZiB0dXRvciwgc2luY2UgdGhlIG9mZmljZSBhZmZvcmRlZCBhbiBob25vdXJhYmxlIGFuZCBicmlsbGlhbnQgb2NjdXBhdGlvbiwgeWV0IGJ5IG90aGVyIHBlb3BsZSwgb3dpbmcgdG8gaGlzIGRpZ25pdHkgYW5kIGhpcyByZWxhdGlvbnNoaXAsIGhlIHdhcyBjYWxsZWQgQWxleGFuZGVyJ3MgZm9zdGVyLWZhdGhlciBhbmQgcHJlY2VwdG9yLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYW4sIGhvd2V2ZXIsIHdobyBhc3N1bWVkIHRoZSBjaGFyYWN0ZXIgYW5kIHRoZSB0aXRsZSBvZiB0dXRvciB3YXMgTHlzaW1hY2h1cywgYSBuYXRpdmUgb2YgQWNhcm5hbmlhLCB3aG8gaGFkIG5vIGdlbmVyYWwgcmVmaW5lbWVudCwgYnV0IGJlY2F1c2UgaGUgY2FsbGVkIGhpbXNlbGYgUGhvZW5peCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHByZWNlcHRvciBvZiBBY2hpbGxlcy48L25vdGU+IEFsZXhhbmRlciBBY2hpbGxlcywgYW5kIFBoaWxpcCBQZWxldXMsIHdhcyBoaWdobHkgcmVnYXJkZWQgYW5kIGhlbGQgYSBzZWNvbmQgcGxhY2UuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbmNlIHVwb24gYSB0aW1lIFBoaWxvbmVpY3VzIHRoZSBUaGVzc2FsaWFuIGJyb3VnaHQgQnVjZXBoYWxhcywgb2ZmZXJpbmcgdG8gc2VsbCBoaW0gdG8gUGhpbGlwIGZvciB0aGlydGVlbiB0YWxlbnRzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHRhbGVudCB3YXMgd29ydGggYWJvdXQgwqMyMzUsIG9yICQxLDIwMCwgd2l0aCBmb3VyIG9yIGZpdmUgdGltZXMgdGhlIHB1cmNoYXNpbmcgcG93ZXIgb2YgbW9kZXJuIG1vbmV5Ljwvbm90ZT4gYW5kIHRoZXkgd2VudCBkb3duIGludG8gdGhlIHBsYWluIHRvIHRyeSB0aGUgaG9yc2UsIHdobyBhcHBlYXJlZCB0byBiZSBzYXZhZ2UgYW5kIGFsdG9nZXRoZXIgaW50cmFjdGFibGUsIG5laXRoZXIgYWxsb3dpbmcgYW55IG9uZSB0byBtb3VudCBoaW0sIG5vciBoZWVkaW5nIHRoZSB2b2ljZSBvZiBhbnkgb2YgUGhpbGlwJ3MgYXR0ZW5kYW50cywgYnV0IHJlYXJpbmcgdXAgYWdhaW5zdCBhbGwgb2YgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBQaGlsaXAgd2FzIHZleGVkIGFuZCBvcmRlcmVkIHRoZSBob3JzZSB0byBiZSBsZWQgYXdheSwgYmVsaWV2aW5nIGhpbSB0byBiZSBhbHRvZ2V0aGVyIHdpbGQgYW5kIHVuYnJva2VuOyBidXQgQWxleGFuZGVyLCB3aG8gd2FzIG5lYXIgYnksIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgYSBob3JzZSB0aGV5IGFyZSBsb3NpbmcsIGJlY2F1c2UsIGZvciBsYWNrIG9mIHNraWxsIGFuZCBjb3VyYWdlLCB0aGV5IGNhbm5vdCBtYW5hZ2UgaGltITwvcT4gQXQgZmlyc3QsIHRoZW4sIFBoaWxpcCBoZWxkIGhpcyBwZWFjZTsgYnV0IGFzIEFsZXhhbmRlciBtYW55IHRpbWVzIGxldCBmYWxsIHN1Y2ggd29yZHMgYW5kIHNob3dlZCBncmVhdCBkaXN0cmVzcywgaGUgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Eb3N0IHRob3UgZmluZCBmYXVsdCB3aXRoIHRoaW5lIGVsZGVycyBpbiB0aGUgYmVsaWVmIHRoYXQgdGhvdSBrbm93ZXN0IG1vcmUgdGhhbiB0aGV5IGRvIG9yIGFydCBiZXR0ZXIgYWJsZSB0byBtYW5hZ2UgYSBob3JzZT88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgaG9yc2UsIGF0IGFueSByYXRlLDwvcT4gc2FpZCBBbGV4YW5kZXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBjb3VsZCBtYW5hZ2UgYmV0dGVyIHRoYW4gb3RoZXJzIGhhdmUuPC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIGlmIHRob3Ugc2hvdWxkc3Qgbm90LCB3aGF0IHBlbmFsdHkgd2lsdCB0aG91IHVuZGVyZ28gZm9yIHRoeSByYXNobmVzcz88L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbmRlZWQsPC9xPiBzYWlkIEFsZXhhbmRlciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHdpbGwgZm9yZmVpdCB0aGUgcHJpY2Ugb2YgdGhlIGhvcnNlLjwvcT4gVGhlcmUgd2FzIGxhdWdodGVyIGF0IHRoaXMsIGFuZCB0aGVuIGFuIGFncmVlbWVudCBiZXR3ZWVuIGZhdGhlciBhbmQgc29uIGFzIHRvIHRoZSBmb3JmZWl0dXJlLCBhbmQgYXQgb25jZSBBbGV4YW5kZXIgcmFuIHRvIHRoZSBob3JzZSwgdG9vayBob2xkIG9mIGhpcyBicmlkbGUtcmVpbiwgYW5kIHR1cm5lZCBoaW0gdG93YXJkcyB0aGUgc3VuOyBmb3IgaGUgaGFkIG5vdGljZWQsIGFzIGl0IHdvdWxkIHNlZW0sIHRoYXQgdGhlIGhvcnNlIHdhcyBncmVhdGx5IGRpc3R1cmJlZCBieSB0aGUgc2lnaHQgb2YgaGlzIG93biBzaGFkb3cgZmFsbGluZyBpbiBmcm9udCBvZiBoaW0gYW5kIGRhbmNpbmcgYWJvdXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciBoZSBoYWQgY2FsbWVkIHRoZSBob3JzZSBhIGxpdHRsZSBpbiB0aGlzIHdheSwgYW5kIGhhZCBzdHJva2VkIGhpbSB3aXRoIGhpcyBoYW5kLCB3aGVuIGhlIHNhdyB0aGF0IGhlIHdhcyBmdWxsIG9mIHNwaXJpdCBhbmQgY291cmFnZSwgaGUgcXVpZXRseSBjYXN0IGFzaWRlIGhpcyBtYW50bGUgYW5kIHdpdGggYSBsaWdodCBzcHJpbmcgc2FmZWx5IGJlc3Ryb2RlIGhpbS4gVGhlbiwgd2l0aCBhIGxpdHRsZSBwcmVzc3VyZSBvZiB0aGUgcmVpbnMgb24gdGhlIGJpdCwgYW5kIHdpdGhvdXQgc3RyaWtpbmcgaGltIG9yIHRlYXJpbmcgaGlzIG1vdXRoLCBoZSBoZWxkIGhpbSBpbiBoYW5kCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbXlvdCwgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImZyIj5sZSByZW1laXQgZ2VudGltZW50PC9mb3JlaWduPi48L3E+CiAgICAgICAgICAgIDwvbm90ZT4gYnV0IHdoZW4gaGUgc2F3IHRoYXQgdGhlIGhvcnNlIHdhcyByaWQgb2YgdGhlIGZlYXIgdGhhdCBoYWQgYmVzZXQgaGltLCBhbmQgd2FzIGltcGF0aWVudCBmb3IgdGhlIGNvdXJzZSwgaGUgZ2F2ZSBoaW0gaGlzIGhlYWQsIGFuZCBhdCBsYXN0IHVyZ2VkIGhpbSBvbiB3aXRoIHN0ZXJuZXIgdG9uZSBhbmQgdGhydXN0IG9mIGZvb3QuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpcCBhbmQgaGlzIGNvbXBhbnkgd2VyZSBzcGVlY2hsZXNzIHdpdGggYW54aWV0eSBhdCBmaXJzdDsgYnV0IHdoZW4gQWxleGFuZGVyIG1hZGUgdGhlIHR1cm4gaW4gcHJvcGVyIGZhc2hpb24gYW5kIGNhbWUgYmFjayB0b3dhcmRzIHRoZW0gcHJvdWQgYW5kIGV4dWx0YW50LCBhbGwgdGhlIHJlc3QgYnJva2UgaW50byBsb3VkIGNyaWVzLCBidXQgaGlzIGZhdGhlciwgYXMgd2UgYXJlIHRvbGQsIGFjdHVhbGx5IHNoZWQgdGVhcnMgb2Ygam95LCBhbmQgd2hlbiBBbGV4YW5kZXIgaGFkIGRpc21vdW50ZWQsIGtpc3NlZCBoaW0sIHNheWluZzogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgc29uLCBzZWVrIHRoZWUgb3V0IGEga2luZ2RvbSBlcXVhbCB0byB0aHlzZWxmOyBNYWNlZG9uaWEgaGFzIG5vdCByb29tIGZvciB0aGVlLjwvcT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbmNlIHVwb24gYSB0aW1lIFBoaWxvbmVpY3VzIHRoZSBUaGVzc2FsaWFuIGJyb3VnaHQgQnVjZXBoYWxhcywgb2ZmZXJpbmcgdG8gc2VsbCBoaW0gdG8gUGhpbGlwIGZvciB0aGlydGVlbiB0YWxlbnRzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgdGFsZW50IHdhcyB3b3J0aCBhYm91dCDCozIzNSwgb3IgJDEsMjAwLCB3aXRoIGZvdXIgb3IgZml2ZSB0aW1lcyB0aGUgcHVyY2hhc2luZyBwb3dlciBvZiBtb2Rlcm4gbW9uZXkuPC9ub3RlPiBhbmQgdGhleSB3ZW50IGRvd24gaW50byB0aGUgcGxhaW4gdG8gdHJ5IHRoZSBob3JzZSwgd2hvIGFwcGVhcmVkIHRvIGJlIHNhdmFnZSBhbmQgYWx0b2dldGhlciBpbnRyYWN0YWJsZSwgbmVpdGhlciBhbGxvd2luZyBhbnkgb25lIHRvIG1vdW50IGhpbSwgbm9yIGhlZWRpbmcgdGhlIHZvaWNlIG9mIGFueSBvZiBQaGlsaXAncyBhdHRlbmRhbnRzLCBidXQgcmVhcmluZyB1cCBhZ2FpbnN0IGFsbCBvZiB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gUGhpbGlwIHdhcyB2ZXhlZCBhbmQgb3JkZXJlZCB0aGUgaG9yc2UgdG8gYmUgbGVkIGF3YXksIGJlbGlldmluZyBoaW0gdG8gYmUgYWx0b2dldGhlciB3aWxkIGFuZCB1bmJyb2tlbjsgYnV0IEFsZXhhbmRlciwgd2hvIHdhcyBuZWFyIGJ5LCBzYWlkOiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgYSBob3JzZSB0aGV5IGFyZSBsb3NpbmcsIGJlY2F1c2UsIGZvciBsYWNrIG9mIHNraWxsIGFuZCBjb3VyYWdlLCB0aGV5IGNhbm5vdCBtYW5hZ2UgaGltITwvcT4gQXQgZmlyc3QsIHRoZW4sIFBoaWxpcCBoZWxkIGhpcyBwZWFjZTsgYnV0IGFzIEFsZXhhbmRlciBtYW55IHRpbWVzIGxldCBmYWxsIHN1Y2ggd29yZHMgYW5kIHNob3dlZCBncmVhdCBkaXN0cmVzcywgaGUgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvc3QgdGhvdSBmaW5kIGZhdWx0IHdpdGggdGhpbmUgZWxkZXJzIGluIHRoZSBiZWxpZWYgdGhhdCB0aG91IGtub3dlc3QgbW9yZSB0aGFuIHRoZXkgZG8gb3IgYXJ0IGJldHRlciBhYmxlIHRvIG1hbmFnZSBhIGhvcnNlPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgaG9yc2UsIGF0IGFueSByYXRlLDwvcT4gc2FpZCBBbGV4YW5kZXIsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGNvdWxkIG1hbmFnZSBiZXR0ZXIgdGhhbiBvdGhlcnMgaGF2ZS48L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBpZiB0aG91IHNob3VsZHN0IG5vdCwgd2hhdCBwZW5hbHR5IHdpbHQgdGhvdSB1bmRlcmdvIGZvciB0aHkgcmFzaG5lc3M/PC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbmRlZWQsPC9xPiBzYWlkIEFsZXhhbmRlciwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd2lsbCBmb3JmZWl0IHRoZSBwcmljZSBvZiB0aGUgaG9yc2UuPC9xPiBUaGVyZSB3YXMgbGF1Z2h0ZXIgYXQgdGhpcywgYW5kIHRoZW4gYW4gYWdyZWVtZW50IGJldHdlZW4gZmF0aGVyIGFuZCBzb24gYXMgdG8gdGhlIGZvcmZlaXR1cmUsIGFuZCBhdCBvbmNlIEFsZXhhbmRlciByYW4gdG8gdGhlIGhvcnNlLCB0b29rIGhvbGQgb2YgaGlzIGJyaWRsZS1yZWluLCBhbmQgdHVybmVkIGhpbSB0b3dhcmRzIHRoZSBzdW47IGZvciBoZSBoYWQgbm90aWNlZCwgYXMgaXQgd291bGQgc2VlbSwgdGhhdCB0aGUgaG9yc2Ugd2FzIGdyZWF0bHkgZGlzdHVyYmVkIGJ5IHRoZSBzaWdodCBvZiBoaXMgb3duIHNoYWRvdyBmYWxsaW5nIGluIGZyb250IG9mIGhpbSBhbmQgZGFuY2luZyBhYm91dC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciBoZSBoYWQgY2FsbWVkIHRoZSBob3JzZSBhIGxpdHRsZSBpbiB0aGlzIHdheSwgYW5kIGhhZCBzdHJva2VkIGhpbSB3aXRoIGhpcyBoYW5kLCB3aGVuIGhlIHNhdyB0aGF0IGhlIHdhcyBmdWxsIG9mIHNwaXJpdCBhbmQgY291cmFnZSwgaGUgcXVpZXRseSBjYXN0IGFzaWRlIGhpcyBtYW50bGUgYW5kIHdpdGggYSBsaWdodCBzcHJpbmcgc2FmZWx5IGJlc3Ryb2RlIGhpbS4gVGhlbiwgd2l0aCBhIGxpdHRsZSBwcmVzc3VyZSBvZiB0aGUgcmVpbnMgb24gdGhlIGJpdCwgYW5kIHdpdGhvdXQgc3RyaWtpbmcgaGltIG9yIHRlYXJpbmcgaGlzIG1vdXRoLCBoZSBoZWxkIGhpbSBpbiBoYW5kCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFteW90LCA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImZyIj5sZSByZW1laXQgZ2VudGltZW50PC9mb3JlaWduPi48L3E+CiAgICAgICAgICAgIDwvbm90ZT4gYnV0IHdoZW4gaGUgc2F3IHRoYXQgdGhlIGhvcnNlIHdhcyByaWQgb2YgdGhlIGZlYXIgdGhhdCBoYWQgYmVzZXQgaGltLCBhbmQgd2FzIGltcGF0aWVudCBmb3IgdGhlIGNvdXJzZSwgaGUgZ2F2ZSBoaW0gaGlzIGhlYWQsIGFuZCBhdCBsYXN0IHVyZ2VkIGhpbSBvbiB3aXRoIHN0ZXJuZXIgdG9uZSBhbmQgdGhydXN0IG9mIGZvb3QuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJmciI+bGUgcmVtZWl0IGdlbnRpbWVudDwvZm9yZWlnbj4uPC9xPgogICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImZyIj5sZSByZW1laXQgZ2VudGltZW50PC9mb3JlaWduPi48L3RyYW5zbGF0aW9uPg=="
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpcCBhbmQgaGlzIGNvbXBhbnkgd2VyZSBzcGVlY2hsZXNzIHdpdGggYW54aWV0eSBhdCBmaXJzdDsgYnV0IHdoZW4gQWxleGFuZGVyIG1hZGUgdGhlIHR1cm4gaW4gcHJvcGVyIGZhc2hpb24gYW5kIGNhbWUgYmFjayB0b3dhcmRzIHRoZW0gcHJvdWQgYW5kIGV4dWx0YW50LCBhbGwgdGhlIHJlc3QgYnJva2UgaW50byBsb3VkIGNyaWVzLCBidXQgaGlzIGZhdGhlciwgYXMgd2UgYXJlIHRvbGQsIGFjdHVhbGx5IHNoZWQgdGVhcnMgb2Ygam95LCBhbmQgd2hlbiBBbGV4YW5kZXIgaGFkIGRpc21vdW50ZWQsIGtpc3NlZCBoaW0sIHNheWluZzogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBzb24sIHNlZWsgdGhlZSBvdXQgYSBraW5nZG9tIGVxdWFsIHRvIHRoeXNlbGY7IE1hY2Vkb25pYSBoYXMgbm90IHJvb20gZm9yIHRoZWUuPC9xPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzaW5jZSBQaGlsaXAgc2F3IHRoYXQgaGlzIHNvbidzIG5hdHVyZSB3YXMgdW55aWVsZGluZyBhbmQgdGhhdCBoZSByZXNpc3RlZCBjb21wdWxzaW9uLCBidXQgd2FzIGVhc2lseSBsZWQgYnkgcmVhc29uaW5nIGludG8gdGhlIHBhdGggb2YgZHV0eSwgaGUgaGltc2VsZiB0cmllZCB0byBwZXJzdWFkZSByYXRoZXIgdGhhbiB0byBjb21tYW5kIGhpbTsgYW5kIGJlY2F1c2UgaGUgd291bGQgbm90IHdob2xseSBlbnRydXN0IHRoZSBkaXJlY3Rpb24gYW5kIHRyYWluaW5nIG9mIHRoZSBib3kgdG8gdGhlIG9yZGluYXJ5IHRlYWNoZXJzIG9mIHBvZXRyeSBhbmQgdGhlIGZvcm1hbCBzdHVkaWVzLCBmZWVsaW5nIHRoYXQgaXQgd2FzIGEgbWF0dGVyIG9mIHRvbyBncmVhdCBpbXBvcnRhbmNlLCBhbmQsIGluIHRoZSB3b3JkcyBvZiBTb3Bob2NsZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5OYXVjaywgPHRpdGxlPlRyYWcuIEdyYWVjLiBGcmFnLjI8L3RpdGxlPiBwLiAzMTUuPC9ub3RlPgoJCQkJICAgICAgICA8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPgogICAgICAgICAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BIHRhc2sgZm9yIG1hbnkgYml0cyBhbmQgcnVkZGVyLXN3ZWVwcyBhcyB3ZWxsLDwvcT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQloZSBzZW50IGZvciB0aGUgbW9zdCBmYW1vdXMgYW5kIGxlYXJuZWQgb2YgcGhpbG9zb3BoZXJzLCBBcmlzdG90bGUsIGFuZCBwYWlkIGhpbSBhIG5vYmxlIGFuZCBhcHByb3ByaWF0ZSB0dWl0aW9uLWZlZS4gVGhlIGNpdHkgb2YgU3RhZ2VpcmEsIHRoYXQgaXMsIG9mIHdoaWNoIEFyaXN0b3RsZSB3YXMgYSBuYXRpdmUsIGFuZCB3aGljaCBoZSBoYWQgaGltc2VsZiBkZXN0cm95ZWQsIGhlIHBlb3BsZWQgYWdhaW4sIGFuZCByZXN0b3JlZCB0byBpdCB0aG9zZSBvZiBpdHMgY2l0aXplbnMgd2hvIHdlcmUgaW4gZXhpbGUgb3Igc2xhdmVyeS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc2luY2UgUGhpbGlwIHNhdyB0aGF0IGhpcyBzb24ncyBuYXR1cmUgd2FzIHVueWllbGRpbmcgYW5kIHRoYXQgaGUgcmVzaXN0ZWQgY29tcHVsc2lvbiwgYnV0IHdhcyBlYXNpbHkgbGVkIGJ5IHJlYXNvbmluZyBpbnRvIHRoZSBwYXRoIG9mIGR1dHksIGhlIGhpbXNlbGYgdHJpZWQgdG8gcGVyc3VhZGUgcmF0aGVyIHRoYW4gdG8gY29tbWFuZCBoaW07IGFuZCBiZWNhdXNlIGhlIHdvdWxkIG5vdCB3aG9sbHkgZW50cnVzdCB0aGUgZGlyZWN0aW9uIGFuZCB0cmFpbmluZyBvZiB0aGUgYm95IHRvIHRoZSBvcmRpbmFyeSB0ZWFjaGVycyBvZiBwb2V0cnkgYW5kIHRoZSBmb3JtYWwgc3R1ZGllcywgZmVlbGluZyB0aGF0IGl0IHdhcyBhIG1hdHRlciBvZiB0b28gZ3JlYXQgaW1wb3J0YW5jZSwgYW5kLCBpbiB0aGUgd29yZHMgb2YgU29waG9jbGVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5OYXVjaywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJhZy4gR3JhZWMuIEZyYWcuMjwvdGl0bGU+IHAuIDMxNS48L25vdGU+CgkJCQkgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyYWcuIEdyYWVjLiBGcmFnLjI8L3RpdGxlPiBwLiAzMTUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QSB0YXNrIGZvciBtYW55IGJpdHMgYW5kIHJ1ZGRlci1zd2VlcHMgYXMgd2VsbCw8L3E+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BIHRhc2sgZm9yIG1hbnkgYml0cyBhbmQgcnVkZGVyLXN3ZWVwcyBhcyB3ZWxsLDwvcT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgdGFzayBmb3IgbWFueSBiaXRzIGFuZCBydWRkZXItc3dlZXBzIGFzIHdlbGwsPC9xPgogICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJaGUgc2VudCBmb3IgdGhlIG1vc3QgZmFtb3VzIGFuZCBsZWFybmVkIG9mIHBoaWxvc29waGVycywgQXJpc3RvdGxlLCBhbmQgcGFpZCBoaW0gYSBub2JsZSBhbmQgYXBwcm9wcmlhdGUgdHVpdGlvbi1mZWUuIFRoZSBjaXR5IG9mIFN0YWdlaXJhLCB0aGF0IGlzLCBvZiB3aGljaCBBcmlzdG90bGUgd2FzIGEgbmF0aXZlLCBhbmQgd2hpY2ggaGUgaGFkIGhpbXNlbGYgZGVzdHJveWVkLCBoZSBwZW9wbGVkIGFnYWluLCBhbmQgcmVzdG9yZWQgdG8gaXQgdGhvc2Ugb2YgaXRzIGNpdGl6ZW5zIHdobyB3ZXJlIGluIGV4aWxlIG9yIHNsYXZlcnkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgYXMgYSBwbGFjZSB3aGVyZSBtYXN0ZXIgYW5kIHB1cGlsIGNvdWxkIGxhYm91ciBhbmQgc3R1ZHksIGhlIGFzc2lnbmVkIHRoZW0gdGhlIHByZWNpbmN0IG9mIHRoZSBueW1waHMgbmVhciBNaWV6YSwgd2hlcmUgdG8gdGhpcyBkYXkgdGhlIHZpc2l0b3IgaXMgc2hvd24gdGhlIHN0b25lIHNlYXRzIGFuZCBzaGFkeSB3YWxrcyBvZiBBcmlzdG90bGUuIEl0IHdvdWxkIGFwcGVhciwgbW9yZW92ZXIsIHRoYXQgQWxleGFuZGVyIG5vdCBvbmx5IHJlY2VpdmVkIGZyb20gaGlzIG1hc3RlciBoaXMgZXRoaWNhbCBhbmQgcG9saXRpY2FsIGRvY3RyaW5lcywgYnV0IGFsc28gcGFydGljaXBhdGVkIGluIHRob3NlIHNlY3JldCBhbmQgbW9yZSBwcm9mb3VuZCB0ZWFjaGluZ3Mgd2hpY2ggcGhpbG9zb3BoZXJzIGRlc2lnbmF0ZSBieSB0aGUgc3BlY2lhbCB0ZXJtcyA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hY3JvYW1hdGljPC9xPiBhbmQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5lcG9wdGljLDwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+aS5lLiwgZml0IGZvciBvcmFsIHRlYWNoaW5nIG9ubHksIGFuZCBmb3IgdGhlIGluaXRpYXRlZDsgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXNvdGVyaWMsPC9xPiBhcyBvcHBvc2VkIHRvCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXhvdGVyaWM8L3E+IGRvY3RyaW5lcy48L25vdGU+IGFuZCBkbyBub3QgaW1wYXJ0IHRvIG1hbnkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciBoZSBoYWQgYWxyZWFkeSBjcm9zc2VkIGludG8gQXNpYSwgYW5kIHdoZW4gaGUgbGVhcm5lZCB0aGF0IGNlcnRhaW4gdHJlYXRpc2VzIG9uIHRoZXNlIHJlY29uZGl0ZSBtYXR0ZXJzIGhhZCBiZWVuIHB1Ymxpc2hlZCBpbiBib29rcyBieSBBcmlzdG90bGUsIGhlIHdyb3RlIGhpbSBhIGxldHRlciBvbiBiZWhhbGYgb2YgcGhpbG9zb3BoeSwgYW5kIHB1dCBpdCBpbiBwbGFpbiBsYW5ndWFnZS4gQW5kIHRoaXMgaXMgYSBjb3B5IG9mIHRoZSBsZXR0ZXIuIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFsZXhhbmRlciwgdG8gQXJpc3RvdGxlLCBncmVldGluZy4gVGhvdSBoYXN0IG5vdCBkb25lIHdlbGwgdG8gcHVibGlzaCB0aHkgYWNyb2FtYXRpYyBkb2N0cmluZXM7IGZvciBpbiB3aGF0IHNoYWxsIEkgc3VycGFzcyBvdGhlciBtZW4gaWYgdGhvc2UgZG9jdHJpbmVzIHdoZXJlaW4gSSBoYXZlIGJlZW4gdHJhaW5lZCBhcmUgdG8gYmUgYWxsIG1lbidzIGNvbW1vbiBwcm9wZXJ0eT8gQnV0IEkgaGFkIHJhdGhlciBleGNlbCBpbiBteSBhY3F1YWludGFuY2Ugd2l0aCB0aGUgYmVzdCB0aGluZ3MgdGhhbiBpbiBteSBwb3dlci4gRmFyZXdlbGwuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBpbiBkZWZlbmRpbmcgaGltc2VsZiwgQXJpc3RvdGxlIGVuY291cmFnZXMgdGhpcyBhbWJpdGlvbiBvZiBBbGV4YW5kZXIgYnkgc2F5aW5nIHRoYXQgdGhlIGRvY3RyaW5lcyBvZiB3aGljaCBoZSBzcG9rZSB3ZXJlIGJvdGggcHVibGlzaGVkIGFuZCBub3QgcHVibGlzaGVkOyBmb3IgaW4gdHJ1dGggaGlzIHRyZWF0aXNlIG9uIG1ldGFwaHlzaWNzIGlzIG9mIG5vIHVzZSBmb3IgdGhvc2Ugd2hvIHdvdWxkIGVpdGhlciB0ZWFjaCBvciBsZWFybiB0aGUgc2NpZW5jZSwgYnV0IGlzIHdyaXR0ZW4gYXMgYSBtZW1vcmFuZHVtIGZvciB0aG9zZSBhbHJlYWR5IHRyYWluZWQgdGhlcmVpbi48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIGFzIGEgcGxhY2Ugd2hlcmUgbWFzdGVyIGFuZCBwdXBpbCBjb3VsZCBsYWJvdXIgYW5kIHN0dWR5LCBoZSBhc3NpZ25lZCB0aGVtIHRoZSBwcmVjaW5jdCBvZiB0aGUgbnltcGhzIG5lYXIgTWllemEsIHdoZXJlIHRvIHRoaXMgZGF5IHRoZSB2aXNpdG9yIGlzIHNob3duIHRoZSBzdG9uZSBzZWF0cyBhbmQgc2hhZHkgd2Fsa3Mgb2YgQXJpc3RvdGxlLiBJdCB3b3VsZCBhcHBlYXIsIG1vcmVvdmVyLCB0aGF0IEFsZXhhbmRlciBub3Qgb25seSByZWNlaXZlZCBmcm9tIGhpcyBtYXN0ZXIgaGlzIGV0aGljYWwgYW5kIHBvbGl0aWNhbCBkb2N0cmluZXMsIGJ1dCBhbHNvIHBhcnRpY2lwYXRlZCBpbiB0aG9zZSBzZWNyZXQgYW5kIG1vcmUgcHJvZm91bmQgdGVhY2hpbmdzIHdoaWNoIHBoaWxvc29waGVycyBkZXNpZ25hdGUgYnkgdGhlIHNwZWNpYWwgdGVybXMgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hY3JvYW1hdGljPC9xPiBhbmQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmVwb3B0aWMsPC9xPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPmkuZS4sIGZpdCBmb3Igb3JhbCB0ZWFjaGluZyBvbmx5LCBhbmQgZm9yIHRoZSBpbml0aWF0ZWQ7IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXNvdGVyaWMsPC9xPiBhcyBvcHBvc2VkIHRvCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5leG90ZXJpYzwvcT4gZG9jdHJpbmVzLjwvbm90ZT4gYW5kIGRvIG5vdCBpbXBhcnQgdG8gbWFueS4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmVzb3RlcmljLDwvcT4gYXMgb3Bwb3NlZCB0bwoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXhvdGVyaWM8L3E+IGRvY3RyaW5lcy48L3RyYW5zbGF0aW9uPg=="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciBoZSBoYWQgYWxyZWFkeSBjcm9zc2VkIGludG8gQXNpYSwgYW5kIHdoZW4gaGUgbGVhcm5lZCB0aGF0IGNlcnRhaW4gdHJlYXRpc2VzIG9uIHRoZXNlIHJlY29uZGl0ZSBtYXR0ZXJzIGhhZCBiZWVuIHB1Ymxpc2hlZCBpbiBib29rcyBieSBBcmlzdG90bGUsIGhlIHdyb3RlIGhpbSBhIGxldHRlciBvbiBiZWhhbGYgb2YgcGhpbG9zb3BoeSwgYW5kIHB1dCBpdCBpbiBwbGFpbiBsYW5ndWFnZS4gQW5kIHRoaXMgaXMgYSBjb3B5IG9mIHRoZSBsZXR0ZXIuIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxleGFuZGVyLCB0byBBcmlzdG90bGUsIGdyZWV0aW5nLiBUaG91IGhhc3Qgbm90IGRvbmUgd2VsbCB0byBwdWJsaXNoIHRoeSBhY3JvYW1hdGljIGRvY3RyaW5lczsgZm9yIGluIHdoYXQgc2hhbGwgSSBzdXJwYXNzIG90aGVyIG1lbiBpZiB0aG9zZSBkb2N0cmluZXMgd2hlcmVpbiBJIGhhdmUgYmVlbiB0cmFpbmVkIGFyZSB0byBiZSBhbGwgbWVuJ3MgY29tbW9uIHByb3BlcnR5PyBCdXQgSSBoYWQgcmF0aGVyIGV4Y2VsIGluIG15IGFjcXVhaW50YW5jZSB3aXRoIHRoZSBiZXN0IHRoaW5ncyB0aGFuIGluIG15IHBvd2VyLiBGYXJld2VsbC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBpbiBkZWZlbmRpbmcgaGltc2VsZiwgQXJpc3RvdGxlIGVuY291cmFnZXMgdGhpcyBhbWJpdGlvbiBvZiBBbGV4YW5kZXIgYnkgc2F5aW5nIHRoYXQgdGhlIGRvY3RyaW5lcyBvZiB3aGljaCBoZSBzcG9rZSB3ZXJlIGJvdGggcHVibGlzaGVkIGFuZCBub3QgcHVibGlzaGVkOyBmb3IgaW4gdHJ1dGggaGlzIHRyZWF0aXNlIG9uIG1ldGFwaHlzaWNzIGlzIG9mIG5vIHVzZSBmb3IgdGhvc2Ugd2hvIHdvdWxkIGVpdGhlciB0ZWFjaCBvciBsZWFybiB0aGUgc2NpZW5jZSwgYnV0IGlzIHdyaXR0ZW4gYXMgYSBtZW1vcmFuZHVtIGZvciB0aG9zZSBhbHJlYWR5IHRyYWluZWQgdGhlcmVpbi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBpbiBteSBvcGluaW9uIEFsZXhhbmRlcidzIGxvdmUgb2YgdGhlIGFydCBvZiBoZWFsaW5nIHdhcyBpbmN1bGNhdGVkIGluIGhpbSBieSBBcmlzdG90bGUgcHJlZW1pbmVudGx5LiBGb3IgaGUgd2FzIG5vdCBvbmx5IGZvbmQgb2YgdGhlIHRoZW9yeSBvZiBtZWRpY2luZSwgYnV0IGFjdHVhbGx5IGNhbWUgdG8gdGhlIGFpZCBvZiBoaXMgZnJpZW5kcyB3aGVuIHRoZXkgd2VyZSBzaWNrLCBhbmQgcHJlc2NyaWJlZCBmb3IgdGhlbSBjZXJ0YWluIHRyZWF0bWVudHMgYW5kIHJlZ2ltZW5zLCBhcyBvbmUgY2FuIGdhdGhlciBmcm9tIGhpcyBsZXR0ZXJzLiBIZSB3YXMgYWxzbyBieSBuYXR1cmUgYSBsb3ZlciBvZiBsZWFybmluZyBhbmQgYSBsb3ZlciBvZiByZWFkaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc2luY2UgaGUgdGhvdWdodCBhbmQgY2FsbGVkIHRoZSA8dGl0bGU+SWxpYWQ8L3RpdGxlPiBhIHZpYXRpY3VtIG9mIHRoZSBtaWxpdGFyeSBhcnQsIGhlIHRvb2sgd2l0aCBoaW0gQXJpc3RvdGxlJ3MgcmVjZW5zaW9uIG9mIHRoZSBwb2VtLCBjYWxsZWQgdGhlIElsaWFkIG9mIHRoZSBDYXNrZXQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDI2LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh2aS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGFsd2F5cyBrZXB0IGl0IGx5aW5nIHdpdGggaGlzIGRhZ2dlciB1bmRlciBoaXMgcGlsbG93LCBhcyBPbmVzaWNyaXR1cyBpbmZvcm1zIHVzOyBhbmQgd2hlbiBoZSBjb3VsZCBmaW5kIG5vIG90aGVyIGJvb2tzIGluIHRoZSBpbnRlcmlvciBvZiBBc2lhLCBoZSBvcmRlcmVkIEhhcnBhbHVzIHRvIHNlbmQgaGltIHNvbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIEhhcnBhbHVzIHNlbnQgaGltIHRoZSBib29rcyBvZiBQaGlsaXN0dXMsIGEgZ3JlYXQgbWFueSBvZiB0aGUgdHJhZ2VkaWVzIG9mIEV1cmlwaWRlcywgU29waG9jbGVzLCBhbmQgQWVzY2h5bHVzLCBhbmQgdGhlIGRpdGh5cmFtYmljIHBvZW1zIG9mIFRlbGVzdHVzIGFuZCBQaGlsb3hlbnVzLiBBcmlzdG90bGUgaGUgYWRtaXJlZCBhdCB0aGUgZmlyc3QsIGFuZCBsb3ZlZCBoaW0sIGFzIGhlIGhpbXNlbGYgdXNlZCB0byBzYXksIG1vcmUgdGhhbiBoZSBkaWQgaGlzIGZhdGhlciwgZm9yIHRoYXQgdGhlIG9uZSBoYWQgZ2l2ZW4gaGltIGxpZmUsIGJ1dCB0aGUgb3RoZXIgaGFkIHRhdWdodCBoaW0gYSBub2JsZSBsaWZlOyBsYXRlciwgaG93ZXZlciwgaGUgaGVsZCBoaW0gaW4gbW9yZSBvciBsZXNzIG9mIHN1c3BpY2lvbiwgbm90IHRvIHRoZSBleHRlbnQgb2YgZG9pbmcgaGltIGFueSBoYXJtLCBidXQgaGlzIGtpbmRseSBhdHRlbnRpb25zIGxhY2tlZCB0aGVpciBmb3JtZXIgYXJkb3VyIGFuZCBhZmZlY3Rpb24gdG93YXJkcyBoaW0sIGFuZCB0aGlzIHdhcyBwcm9vZiBvZiBlc3RyYW5nZW1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoYXQgZWFnZXIgeWVhcm5pbmcgZm9yIHBoaWxvc29waHkgd2hpY2ggd2FzIGltYmVkZGVkIGluIGhpcyBuYXR1cmUgYW5kIHdoaWNoIGV2ZXIgZ3JldyB3aXRoIGhpcyBncm93dGgsIGRpZCBub3Qgc3Vic2lkZSBmcm9tIGhpcyBzb3VsLCBhcyBpcyB0ZXN0aWZpZWQgYnkgdGhlIGhvbm91ciBpbiB3aGljaCBoZSBoZWxkIEFuYXhhcmNodXMsIGJ5IGhpcyBnaWZ0IG9mIGZpZnR5IHRhbGVudHMgdG8gWGVub2NyYXRlcywgYW5kIGJ5IHRoZSBhdHRlbnRpb25zIHdoaWNoIGhlIHNvIGxhdmlzaGx5IGJlc3Rvd2VkIHVwb24gRGFuZGFtaXMgYW5kIENhbGFudXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDY1LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgbHh2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgaW4gbXkgb3BpbmlvbiBBbGV4YW5kZXIncyBsb3ZlIG9mIHRoZSBhcnQgb2YgaGVhbGluZyB3YXMgaW5jdWxjYXRlZCBpbiBoaW0gYnkgQXJpc3RvdGxlIHByZWVtaW5lbnRseS4gRm9yIGhlIHdhcyBub3Qgb25seSBmb25kIG9mIHRoZSB0aGVvcnkgb2YgbWVkaWNpbmUsIGJ1dCBhY3R1YWxseSBjYW1lIHRvIHRoZSBhaWQgb2YgaGlzIGZyaWVuZHMgd2hlbiB0aGV5IHdlcmUgc2ljaywgYW5kIHByZXNjcmliZWQgZm9yIHRoZW0gY2VydGFpbiB0cmVhdG1lbnRzIGFuZCByZWdpbWVucywgYXMgb25lIGNhbiBnYXRoZXIgZnJvbSBoaXMgbGV0dGVycy4gSGUgd2FzIGFsc28gYnkgbmF0dXJlIGEgbG92ZXIgb2YgbGVhcm5pbmcgYW5kIGEgbG92ZXIgb2YgcmVhZGluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzaW5jZSBoZSB0aG91Z2h0IGFuZCBjYWxsZWQgdGhlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4gYSB2aWF0aWN1bSBvZiB0aGUgbWlsaXRhcnkgYXJ0LCBoZSB0b29rIHdpdGggaGltIEFyaXN0b3RsZSdzIHJlY2Vuc2lvbiBvZiB0aGUgcG9lbSwgY2FsbGVkIHRoZSBJbGlhZCBvZiB0aGUgQ2Fza2V0LAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gMjYuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHZpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgYWx3YXlzIGtlcHQgaXQgbHlpbmcgd2l0aCBoaXMgZGFnZ2VyIHVuZGVyIGhpcyBwaWxsb3csIGFzIE9uZXNpY3JpdHVzIGluZm9ybXMgdXM7IGFuZCB3aGVuIGhlIGNvdWxkIGZpbmQgbm8gb3RoZXIgYm9va3MgaW4gdGhlIGludGVyaW9yIG9mIEFzaWEsIGhlIG9yZGVyZWQgSGFycGFsdXMgdG8gc2VuZCBoaW0gc29tZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiAyNi4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4dmkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIEhhcnBhbHVzIHNlbnQgaGltIHRoZSBib29rcyBvZiBQaGlsaXN0dXMsIGEgZ3JlYXQgbWFueSBvZiB0aGUgdHJhZ2VkaWVzIG9mIEV1cmlwaWRlcywgU29waG9jbGVzLCBhbmQgQWVzY2h5bHVzLCBhbmQgdGhlIGRpdGh5cmFtYmljIHBvZW1zIG9mIFRlbGVzdHVzIGFuZCBQaGlsb3hlbnVzLiBBcmlzdG90bGUgaGUgYWRtaXJlZCBhdCB0aGUgZmlyc3QsIGFuZCBsb3ZlZCBoaW0sIGFzIGhlIGhpbXNlbGYgdXNlZCB0byBzYXksIG1vcmUgdGhhbiBoZSBkaWQgaGlzIGZhdGhlciwgZm9yIHRoYXQgdGhlIG9uZSBoYWQgZ2l2ZW4gaGltIGxpZmUsIGJ1dCB0aGUgb3RoZXIgaGFkIHRhdWdodCBoaW0gYSBub2JsZSBsaWZlOyBsYXRlciwgaG93ZXZlciwgaGUgaGVsZCBoaW0gaW4gbW9yZSBvciBsZXNzIG9mIHN1c3BpY2lvbiwgbm90IHRvIHRoZSBleHRlbnQgb2YgZG9pbmcgaGltIGFueSBoYXJtLCBidXQgaGlzIGtpbmRseSBhdHRlbnRpb25zIGxhY2tlZCB0aGVpciBmb3JtZXIgYXJkb3VyIGFuZCBhZmZlY3Rpb24gdG93YXJkcyBoaW0sIGFuZCB0aGlzIHdhcyBwcm9vZiBvZiBlc3RyYW5nZW1lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoYXQgZWFnZXIgeWVhcm5pbmcgZm9yIHBoaWxvc29waHkgd2hpY2ggd2FzIGltYmVkZGVkIGluIGhpcyBuYXR1cmUgYW5kIHdoaWNoIGV2ZXIgZ3JldyB3aXRoIGhpcyBncm93dGgsIGRpZCBub3Qgc3Vic2lkZSBmcm9tIGhpcyBzb3VsLCBhcyBpcyB0ZXN0aWZpZWQgYnkgdGhlIGhvbm91ciBpbiB3aGljaCBoZSBoZWxkIEFuYXhhcmNodXMsIGJ5IGhpcyBnaWZ0IG9mIGZpZnR5IHRhbGVudHMgdG8gWGVub2NyYXRlcywgYW5kIGJ5IHRoZSBhdHRlbnRpb25zIHdoaWNoIGhlIHNvIGxhdmlzaGx5IGJlc3Rvd2VkIHVwb24gRGFuZGFtaXMgYW5kIENhbGFudXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiA2NS4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGx4di48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNjUuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBseHYuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIFBoaWxpcCB3YXMgbWFraW5nIGFuIGV4cGVkaXRpb24gYWdhaW5zdCBCeXphbnRpdW0sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNDAgQi5DLjwvbm90ZT4gQWxleGFuZGVyLCB0aG91Z2ggb25seSBzaXh0ZWVuIHllYXJzIG9mIGFnZSwgd2FzIGxlZnQgYmVoaW5kIGFzIHJlZ2VudCBpbiBNYWNlZG9uaWEgYW5kIGtlZXBlciBvZiB0aGUgcm95YWwgc2VhbCwgYW5kIGR1cmluZyB0aGlzIHRpbWUgaGUgc3ViZHVlZCB0aGUgcmViZWxsaW91cyBNYWVkaSwgYW5kIGFmdGVyIHRha2luZyB0aGVpciBjaXR5LCBkcm92ZSBvdXQgdGhlIEJhcmJhcmlhbnMsIHNldHRsZWQgdGhlcmUgYSBtaXhlZCBwb3B1bGF0aW9uLCBhbmQgbmFtZWQgdGhlIGNpdHkgQWxleGFuZHJvcG9saXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHNvIHByZXNlbnQgYXQgQ2hhZXJvbmVpYSBhbmQgdG9vayBwYXJ0IGluIHRoZSBiYXR0bGUgYWdhaW5zdCB0aGUgR3JlZWtzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzM4IEIuQy48L25vdGU+IGFuZCBoZSBpcyBzYWlkIHRvIGhhdmUgYmVlbiB0aGUgZmlyc3QgdG8gYnJlYWsgdGhlIHJhbmtzIG9mIHRoZSBTYWNyZWQgQmFuZCBvZiB0aGUgVGhlYmFucy4gQW5kIGV2ZW4gZG93biB0byBvdXIgZGF5IHRoZXJlIHdhcyBzaG93biBhbiBhbmNpZW50IG9hayBieSB0aGUgQ2VwaGlzdXMsIGNhbGxlZCBBbGV4YW5kZXIncyBvYWssIG5lYXIgd2hpY2ggYXQgdGhhdCB0aW1lIGhlIHBpdGNoZWQgaGlzIHRlbnQ7IGFuZCB0aGUgZ2VuZXJhbCBzZXB1bGNocmUgb2YgdGhlIE1hY2Vkb25pYW5zIGlzIG5vdCBmYXIgYXdheS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBQaGlsaXAgd2FzIG1ha2luZyBhbiBleHBlZGl0aW9uIGFnYWluc3QgQnl6YW50aXVtLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNDAgQi5DLjwvbm90ZT4gQWxleGFuZGVyLCB0aG91Z2ggb25seSBzaXh0ZWVuIHllYXJzIG9mIGFnZSwgd2FzIGxlZnQgYmVoaW5kIGFzIHJlZ2VudCBpbiBNYWNlZG9uaWEgYW5kIGtlZXBlciBvZiB0aGUgcm95YWwgc2VhbCwgYW5kIGR1cmluZyB0aGlzIHRpbWUgaGUgc3ViZHVlZCB0aGUgcmViZWxsaW91cyBNYWVkaSwgYW5kIGFmdGVyIHRha2luZyB0aGVpciBjaXR5LCBkcm92ZSBvdXQgdGhlIEJhcmJhcmlhbnMsIHNldHRsZWQgdGhlcmUgYSBtaXhlZCBwb3B1bGF0aW9uLCBhbmQgbmFtZWQgdGhlIGNpdHkgQWxleGFuZHJvcG9saXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHNvIHByZXNlbnQgYXQgQ2hhZXJvbmVpYSBhbmQgdG9vayBwYXJ0IGluIHRoZSBiYXR0bGUgYWdhaW5zdCB0aGUgR3JlZWtzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzMzggQi5DLjwvbm90ZT4gYW5kIGhlIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIHRoZSBmaXJzdCB0byBicmVhayB0aGUgcmFua3Mgb2YgdGhlIFNhY3JlZCBCYW5kIG9mIHRoZSBUaGViYW5zLiBBbmQgZXZlbiBkb3duIHRvIG91ciBkYXkgdGhlcmUgd2FzIHNob3duIGFuIGFuY2llbnQgb2FrIGJ5IHRoZSBDZXBoaXN1cywgY2FsbGVkIEFsZXhhbmRlcidzIG9haywgbmVhciB3aGljaCBhdCB0aGF0IHRpbWUgaGUgcGl0Y2hlZCBoaXMgdGVudDsgYW5kIHRoZSBnZW5lcmFsIHNlcHVsY2hyZSBvZiB0aGUgTWFjZWRvbmlhbnMgaXMgbm90IGZhciBhd2F5LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoZXNlIGV4cGxvaXRzLCB0aGVuLCBhcyB3YXMgbmF0dXJhbCwgUGhpbGlwIHdhcyBleGNlc3NpdmVseSBmb25kIG9mIGhpcyBzb24sIHNvIHRoYXQgaGUgZXZlbiByZWpvaWNlZCB0byBoZWFyIHRoZSBNYWNlZG9uaWFucyBjYWxsIEFsZXhhbmRlciB0aGVpciBraW5nLCBidXQgUGhpbGlwIHRoZWlyIGdlbmVyYWwuIEhvd2V2ZXIsIHRoZSBkaXNvcmRlcnMgaW4gaGlzIGhvdXNlaG9sZCwgZHVlIHRvIHRoZSBmYWN0IHRoYXQgaGlzIG1hcnJpYWdlcyBhbmQgYW1vdXJzIGNhcnJpZWQgaW50byB0aGUga2luZ2RvbSB0aGUgaW5mZWN0aW9uLCBhcyBpdCB3ZXJlLCB3aGljaCByZWlnbmVkIGluIHRoZSB3b21lbidzIGFwYXJ0bWVudHMsIHByb2R1Y2VkIG1hbnkgZ3JvdW5kcyBvZiBvZmZlbmNlIGFuZCBncmVhdCBxdWFycmVscyBiZXR3ZWVuIGZhdGhlciBhbmQgc29uLCBhbmQgdGhlc2UgdGhlIGJhZCB0ZW1wZXIgb2YgT2x5bXBpYXMsIHdobyB3YXMgYSBqZWFsb3VzIGFuZCBzdWxsZW4gd29tYW4sIG1hZGUgc3RpbGwgZ3JlYXRlciwgc2luY2Ugc2hlIHNwdXJyZWQgQWxleGFuZGVyIG9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbW9zdCBvcGVuIHF1YXJyZWwgd2FzIGJyb3VnaHQgb24gYnkgQXR0YWx1cyBhdCB0aGUgbWFycmlhZ2Ugb2YgQ2xlb3BhdHJhLCBhIG1haWRlbiB3aG9tIFBoaWxpcCB3YXMgdGFraW5nIHRvIHdpZmUsIGhhdmluZyBmYWxsZW4gaW4gbG92ZSB3aXRoIHRoZSBnaXJsIHdoZW4gaGUgd2FzIHBhc3QgdGhlIGFnZSBmb3IgaXQuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbXlvdCwgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImZyIj5ob3JzIGQnYWdlIGV0IGRlIHNhaXNvbjwvZm9yZWlnbj4uPC9xPiBJbiBjb25zZXF1ZW5jZSBvZiB0aGlzIHBhc3Npb24gUGhpbGlwIGhhZCBkaXZvcmNlZCBPbHltcGlhcy48L25vdGU+IEF0dGFsdXMsIG5vdywgd2FzIHRoZSBnaXJsJ3MgdW5jbGUsIGFuZCBiZWluZyBpbiBoaXMgY3VwcywgaGUgY2FsbGVkIHVwb24gdGhlIE1hY2Vkb25pYW5zIHRvIGFzayBvZiB0aGUgZ29kcyB0aGF0IGZyb20gUGhpbGlwIGFuZCBDbGVvcGF0cmEgdGhlcmUgbWlnaHQgYmUgYm9ybiBhIGxlZ2l0aW1hdGUgc3VjY2Vzc29yIHRvIHRoZSBraW5nZG9tLiBBdCB0aGlzIEFsZXhhbmRlciB3YXMgZXhhc3BlcmF0ZWQsIGFuZCB3aXRoIHRoZSB3b3JkcywgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHdoYXQgb2YgbWUsIGJhc2Ugd3JldGNoPyBEb3N0IHRob3UgdGFrZSBtZSBmb3IgYSBiYXN0YXJkPzwvcT4gdGhyZXcgYSBjdXAgYXQgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIFBoaWxpcCByb3NlIHVwIGFnYWluc3QgaGltIHdpdGggZHJhd24gc3dvcmQsIGJ1dCwgZm9ydHVuYXRlbHkgZm9yIGJvdGgsIGhpcyBhbmdlciBhbmQgaGlzIHdpbmUgbWFkZSBoaW0gdHJpcCBhbmQgZmFsbC4gVGhlbiBBbGV4YW5kZXIsIG1vY2tpbmcgb3ZlciBoaW0sIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxvb2sgbm93LCBtZW4hIGhlcmUgaXMgb25lIHdobyB3YXMgcHJlcGFyaW5nIHRvIGNyb3NzIGZyb20gRXVyb3BlIGludG8gQXNpYTsgYW5kIGhlIGlzIHVwc2V0IGluIHRyeWluZyB0byBjcm9zcyBmcm9tIGNvdWNoIHRvIGNvdWNoLjwvcT4gQWZ0ZXIgdGhpcyBkcnVua2VuIGJyb2lsIEFsZXhhbmRlciB0b29rIE9seW1waWFzIGFuZCBlc3RhYmxpc2hlZCBoZXIgaW4gRXBpcnVzLCB3aGlsZSBoZSBoaW1zZWxmIHRhcnJpZWQgaW4gSWxseXJpYS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoZXNlIGV4cGxvaXRzLCB0aGVuLCBhcyB3YXMgbmF0dXJhbCwgUGhpbGlwIHdhcyBleGNlc3NpdmVseSBmb25kIG9mIGhpcyBzb24sIHNvIHRoYXQgaGUgZXZlbiByZWpvaWNlZCB0byBoZWFyIHRoZSBNYWNlZG9uaWFucyBjYWxsIEFsZXhhbmRlciB0aGVpciBraW5nLCBidXQgUGhpbGlwIHRoZWlyIGdlbmVyYWwuIEhvd2V2ZXIsIHRoZSBkaXNvcmRlcnMgaW4gaGlzIGhvdXNlaG9sZCwgZHVlIHRvIHRoZSBmYWN0IHRoYXQgaGlzIG1hcnJpYWdlcyBhbmQgYW1vdXJzIGNhcnJpZWQgaW50byB0aGUga2luZ2RvbSB0aGUgaW5mZWN0aW9uLCBhcyBpdCB3ZXJlLCB3aGljaCByZWlnbmVkIGluIHRoZSB3b21lbidzIGFwYXJ0bWVudHMsIHByb2R1Y2VkIG1hbnkgZ3JvdW5kcyBvZiBvZmZlbmNlIGFuZCBncmVhdCBxdWFycmVscyBiZXR3ZWVuIGZhdGhlciBhbmQgc29uLCBhbmQgdGhlc2UgdGhlIGJhZCB0ZW1wZXIgb2YgT2x5bXBpYXMsIHdobyB3YXMgYSBqZWFsb3VzIGFuZCBzdWxsZW4gd29tYW4sIG1hZGUgc3RpbGwgZ3JlYXRlciwgc2luY2Ugc2hlIHNwdXJyZWQgQWxleGFuZGVyIG9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtb3N0IG9wZW4gcXVhcnJlbCB3YXMgYnJvdWdodCBvbiBieSBBdHRhbHVzIGF0IHRoZSBtYXJyaWFnZSBvZiBDbGVvcGF0cmEsIGEgbWFpZGVuIHdob20gUGhpbGlwIHdhcyB0YWtpbmcgdG8gd2lmZSwgaGF2aW5nIGZhbGxlbiBpbiBsb3ZlIHdpdGggdGhlIGdpcmwgd2hlbiBoZSB3YXMgcGFzdCB0aGUgYWdlIGZvciBpdC4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW15b3QsIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZnIiPmhvcnMgZCdhZ2UgZXQgZGUgc2Fpc29uPC9mb3JlaWduPi48L3E+IEluIGNvbnNlcXVlbmNlIG9mIHRoaXMgcGFzc2lvbiBQaGlsaXAgaGFkIGRpdm9yY2VkIE9seW1waWFzLjwvbm90ZT4gQXR0YWx1cywgbm93LCB3YXMgdGhlIGdpcmwncyB1bmNsZSwgYW5kIGJlaW5nIGluIGhpcyBjdXBzLCBoZSBjYWxsZWQgdXBvbiB0aGUgTWFjZWRvbmlhbnMgdG8gYXNrIG9mIHRoZSBnb2RzIHRoYXQgZnJvbSBQaGlsaXAgYW5kIENsZW9wYXRyYSB0aGVyZSBtaWdodCBiZSBib3JuIGEgbGVnaXRpbWF0ZSBzdWNjZXNzb3IgdG8gdGhlIGtpbmdkb20uIEF0IHRoaXMgQWxleGFuZGVyIHdhcyBleGFzcGVyYXRlZCwgYW5kIHdpdGggdGhlIHdvcmRzLCA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImZyIj5ob3JzIGQnYWdlIGV0IGRlIHNhaXNvbjwvZm9yZWlnbj4uPC9xPiBJbiBjb25zZXF1ZW5jZSBvZiB0aGlzIHBhc3Npb24gUGhpbGlwIGhhZCBkaXZvcmNlZCBPbHltcGlhcy48Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImZyIj5ob3JzIGQnYWdlIGV0IGRlIHNhaXNvbjwvZm9yZWlnbj4uPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgd2hhdCBvZiBtZSwgYmFzZSB3cmV0Y2g/IERvc3QgdGhvdSB0YWtlIG1lIGZvciBhIGJhc3RhcmQ/PC9xPiB0aHJldyBhIGN1cCBhdCBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gUGhpbGlwIHJvc2UgdXAgYWdhaW5zdCBoaW0gd2l0aCBkcmF3biBzd29yZCwgYnV0LCBmb3J0dW5hdGVseSBmb3IgYm90aCwgaGlzIGFuZ2VyIGFuZCBoaXMgd2luZSBtYWRlIGhpbSB0cmlwIGFuZCBmYWxsLiBUaGVuIEFsZXhhbmRlciwgbW9ja2luZyBvdmVyIGhpbSwgc2FpZDogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Mb29rIG5vdywgbWVuISBoZXJlIGlzIG9uZSB3aG8gd2FzIHByZXBhcmluZyB0byBjcm9zcyBmcm9tIEV1cm9wZSBpbnRvIEFzaWE7IGFuZCBoZSBpcyB1cHNldCBpbiB0cnlpbmcgdG8gY3Jvc3MgZnJvbSBjb3VjaCB0byBjb3VjaC48L3E+IEFmdGVyIHRoaXMgZHJ1bmtlbiBicm9pbCBBbGV4YW5kZXIgdG9vayBPbHltcGlhcyBhbmQgZXN0YWJsaXNoZWQgaGVyIGluIEVwaXJ1cywgd2hpbGUgaGUgaGltc2VsZiB0YXJyaWVkIGluIElsbHlyaWEuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIERlbWFyYXR1cyB0aGUgQ29yaW50aGlhbiwgd2hvIHdhcyBhIGd1ZXN0LWZyaWVuZCBvZiB0aGUgaG91c2UgYW5kIGEgbWFuIG9mIGZyYW5rIHNwZWVjaCwgY2FtZSB0byBzZWUgUGhpbGlwLiBBZnRlciB0aGUgZmlyc3QgZ3JlZXRpbmdzIGFuZCB3ZWxjb21lcyB3ZXJlIG92ZXIsIFBoaWxpcCBhc2tlZCBoaW0gaG93IHRoZSBHcmVla3Mgd2VyZSBhZ3JlZWluZyB3aXRoIG9uZSBhbm90aGVyLCBhbmQgRGVtYXJhdHVzIHJlcGxpZWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIHN1cmVseSB2ZXJ5IGZpdHRpbmcsIFBoaWxpcCwgdGhhdCB0aG91IHNob3VsZHN0IGJlIGNvbmNlcm5lZCBhYm91dCBHcmVlY2UsIHdoZW4gdGhvdSBoYXN0IGZpbGxlZCB0aGluZSBvd24gaG91c2Ugd2l0aCBzdWNoIGdyZWF0IGRpc3NlbnNpb24gYW5kIGNhbGFtaXRpZXMuPC9xPiBUaHVzIGJyb3VnaHQgdG8gaGlzIHNlbnNlcywgUGhpbGlwIHNlbnQgYW5kIGZldGNoZWQgQWxleGFuZGVyIGhvbWUsIGhhdmluZyBwZXJzdWFkZWQgaGltIHRvIGNvbWUgdGhyb3VnaCB0aGUgYWdlbmN5IG9mIERlbWFyYXR1cy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSBEZW1hcmF0dXMgdGhlIENvcmludGhpYW4sIHdobyB3YXMgYSBndWVzdC1mcmllbmQgb2YgdGhlIGhvdXNlIGFuZCBhIG1hbiBvZiBmcmFuayBzcGVlY2gsIGNhbWUgdG8gc2VlIFBoaWxpcC4gQWZ0ZXIgdGhlIGZpcnN0IGdyZWV0aW5ncyBhbmQgd2VsY29tZXMgd2VyZSBvdmVyLCBQaGlsaXAgYXNrZWQgaGltIGhvdyB0aGUgR3JlZWtzIHdlcmUgYWdyZWVpbmcgd2l0aCBvbmUgYW5vdGhlciwgYW5kIERlbWFyYXR1cyByZXBsaWVkOiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIHN1cmVseSB2ZXJ5IGZpdHRpbmcsIFBoaWxpcCwgdGhhdCB0aG91IHNob3VsZHN0IGJlIGNvbmNlcm5lZCBhYm91dCBHcmVlY2UsIHdoZW4gdGhvdSBoYXN0IGZpbGxlZCB0aGluZSBvd24gaG91c2Ugd2l0aCBzdWNoIGdyZWF0IGRpc3NlbnNpb24gYW5kIGNhbGFtaXRpZXMuPC9xPiBUaHVzIGJyb3VnaHQgdG8gaGlzIHNlbnNlcywgUGhpbGlwIHNlbnQgYW5kIGZldGNoZWQgQWxleGFuZGVyIGhvbWUsIGhhdmluZyBwZXJzdWFkZWQgaGltIHRvIGNvbWUgdGhyb3VnaCB0aGUgYWdlbmN5IG9mIERlbWFyYXR1cy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBQaXhvZGFydXMsIHRoZSBzYXRyYXAgb2YgQ2FyaWEsIHRyeWluZyBieSBtZWFucyBvZiBhIHRpZSBvZiByZWxhdGlvbnNoaXAgdG8gc3RlYWwgaW50byBhIG1pbGl0YXJ5IGFsbGlhbmNlIHdpdGggUGhpbGlwLCB3aXNoZWQgdG8gZ2l2ZSBoaXMgZWxkZXN0IGRhdWdodGVyIGluIG1hcnJpYWdlIHRvIEFycmhpZGFldXMgdGhlIHNvbiBvZiBQaGlsaXAsIGFuZCBzZW50IEFyaXN0b2NyaXR1cyB0byBNYWNlZG9uaWEgb24gdGhpcyBlcnJhbmQsIG9uY2UgbW9yZSBzbGFuZGVyb3VzIHN0b3JpZXMga2VwdCBjb21pbmcgdG8gQWxleGFuZGVyIGZyb20gaGlzIGZyaWVuZHMgYW5kIGhpcyBtb3RoZXIsIHdobyBzYWlkIHRoYXQgUGhpbGlwLCBieSBtZWFucyBvZiBhIGJyaWxsaWFudCBtYXJyaWFnZSBhbmQgYSBncmVhdCBjb25uZXhpb24sIHdhcyB0cnlpbmcgdG8gc2V0dGxlIHRoZSBraW5nZG9tIHVwb24gQXJyaGlkYWV1cy4gR3JlYXRseSBkaXN0dXJiZWQgYnkgdGhlc2Ugc3RvcmllcywgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWxleGFuZGVyIHNlbnQgVGhlc3NhbHVzLCB0aGUgdHJhZ2ljIGFjdG9yLCB0byBDYXJpYSwgdG8gYXJndWUgd2l0aCBQaXhvZGFydXMgdGhhdCBoZSBvdWdodCB0byBpZ25vcmUgdGhlIGJhc3RhcmQgYnJvdGhlciwgd2hvIHdhcyBhbHNvIGEgZm9vbCwgYW5kIG1ha2UgQWxleGFuZGVyIGhpcyBjb25uZXhpb24gYnkgbWFycmlhZ2UuIEFuZCB0aGlzIHBsYW4gd2FzIHZhc3RseSBtb3JlIHBsZWFzaW5nIHRvIFBpeG9kYXJ1cyB0aGFuIHRoZSBmb3JtZXIuIEJ1dCBQaGlsaXAsIGJlY29taW5nIGF3YXJlIG9mIHRoaXMsIHdlbnQgdG8gQWxleGFuZGVyJ3MgY2hhbWJlciwgdGFraW5nIHdpdGggaGltIG9uZSBvZiBBbGV4YW5kZXIncyBmcmllbmRzIGFuZCBjb21wYW5pb25zLCBQaGlsb3RhcyB0aGUgc29uIG9mIFBhcm1lbmlvLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdXBicmFpZGVkIGhpcyBzb24gc2V2ZXJlbHksIGFuZCBiaXR0ZXJseSByZXZpbGVkIGhpbSBhcyBpZ25vYmxlIGFuZCB1bndvcnRoeSBvZiBoaXMgaGlnaCBlc3RhdGUsIGluIHRoYXQgaGUgZGVzaXJlZCB0byBiZWNvbWUgdGhlIHNvbi1pbi1sYXcgb2YgYSBtYW4gd2hvIHdhcyBhIENhcmlhbiBhbmQgYSBzbGF2ZSB0byBhIGJhcmJhcmlhbiBraW5nLiBBbmQgYXMgZm9yIFRoZXNzYWx1cywgUGhpbGlwIHdyb3RlIHRvIHRoZSBDb3JpbnRoaWFucyB0aGF0IHRoZXkgc2hvdWxkIHNlbmQgaGltIGJhY2sgdG8gTWFjZWRvbmlhIGluIGNoYWlucy4gTW9yZW92ZXIsIG9mIHRoZSBvdGhlciBjb21wYW5pb25zIG9mIEFsZXhhbmRlciwgaGUgYmFuaXNoZWQgZnJvbSBNYWNlZG9uaWEgSGFycGFsdXMgYW5kIE5lYXJjaHVzLCBhcyB3ZWxsIGFzIEVyaWd5aXVzIGFuZCBQdG9sZW15LCBtZW4gd2hvbSBBbGV4YW5kZXIgYWZ0ZXJ3YXJkcyByZWNhbGxlZCBhbmQgaGFkIGluIHRoZSBoaWdoZXN0IGhvbm91cnMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gUGl4b2RhcnVzLCB0aGUgc2F0cmFwIG9mIENhcmlhLCB0cnlpbmcgYnkgbWVhbnMgb2YgYSB0aWUgb2YgcmVsYXRpb25zaGlwIHRvIHN0ZWFsIGludG8gYSBtaWxpdGFyeSBhbGxpYW5jZSB3aXRoIFBoaWxpcCwgd2lzaGVkIHRvIGdpdmUgaGlzIGVsZGVzdCBkYXVnaHRlciBpbiBtYXJyaWFnZSB0byBBcnJoaWRhZXVzIHRoZSBzb24gb2YgUGhpbGlwLCBhbmQgc2VudCBBcmlzdG9jcml0dXMgdG8gTWFjZWRvbmlhIG9uIHRoaXMgZXJyYW5kLCBvbmNlIG1vcmUgc2xhbmRlcm91cyBzdG9yaWVzIGtlcHQgY29taW5nIHRvIEFsZXhhbmRlciBmcm9tIGhpcyBmcmllbmRzIGFuZCBoaXMgbW90aGVyLCB3aG8gc2FpZCB0aGF0IFBoaWxpcCwgYnkgbWVhbnMgb2YgYSBicmlsbGlhbnQgbWFycmlhZ2UgYW5kIGEgZ3JlYXQgY29ubmV4aW9uLCB3YXMgdHJ5aW5nIHRvIHNldHRsZSB0aGUga2luZ2RvbSB1cG9uIEFycmhpZGFldXMuIEdyZWF0bHkgZGlzdHVyYmVkIGJ5IHRoZXNlIHN0b3JpZXMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsZXhhbmRlciBzZW50IFRoZXNzYWx1cywgdGhlIHRyYWdpYyBhY3RvciwgdG8gQ2FyaWEsIHRvIGFyZ3VlIHdpdGggUGl4b2RhcnVzIHRoYXQgaGUgb3VnaHQgdG8gaWdub3JlIHRoZSBiYXN0YXJkIGJyb3RoZXIsIHdobyB3YXMgYWxzbyBhIGZvb2wsIGFuZCBtYWtlIEFsZXhhbmRlciBoaXMgY29ubmV4aW9uIGJ5IG1hcnJpYWdlLiBBbmQgdGhpcyBwbGFuIHdhcyB2YXN0bHkgbW9yZSBwbGVhc2luZyB0byBQaXhvZGFydXMgdGhhbiB0aGUgZm9ybWVyLiBCdXQgUGhpbGlwLCBiZWNvbWluZyBhd2FyZSBvZiB0aGlzLCB3ZW50IHRvIEFsZXhhbmRlcidzIGNoYW1iZXIsIHRha2luZyB3aXRoIGhpbSBvbmUgb2YgQWxleGFuZGVyJ3MgZnJpZW5kcyBhbmQgY29tcGFuaW9ucywgUGhpbG90YXMgdGhlIHNvbiBvZiBQYXJtZW5pbywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB1cGJyYWlkZWQgaGlzIHNvbiBzZXZlcmVseSwgYW5kIGJpdHRlcmx5IHJldmlsZWQgaGltIGFzIGlnbm9ibGUgYW5kIHVud29ydGh5IG9mIGhpcyBoaWdoIGVzdGF0ZSwgaW4gdGhhdCBoZSBkZXNpcmVkIHRvIGJlY29tZSB0aGUgc29uLWluLWxhdyBvZiBhIG1hbiB3aG8gd2FzIGEgQ2FyaWFuIGFuZCBhIHNsYXZlIHRvIGEgYmFyYmFyaWFuIGtpbmcuIEFuZCBhcyBmb3IgVGhlc3NhbHVzLCBQaGlsaXAgd3JvdGUgdG8gdGhlIENvcmludGhpYW5zIHRoYXQgdGhleSBzaG91bGQgc2VuZCBoaW0gYmFjayB0byBNYWNlZG9uaWEgaW4gY2hhaW5zLiBNb3Jlb3Zlciwgb2YgdGhlIG90aGVyIGNvbXBhbmlvbnMgb2YgQWxleGFuZGVyLCBoZSBiYW5pc2hlZCBmcm9tIE1hY2Vkb25pYSBIYXJwYWx1cyBhbmQgTmVhcmNodXMsIGFzIHdlbGwgYXMgRXJpZ3lpdXMgYW5kIFB0b2xlbXksIG1lbiB3aG9tIEFsZXhhbmRlciBhZnRlcndhcmRzIHJlY2FsbGVkIGFuZCBoYWQgaW4gdGhlIGhpZ2hlc3QgaG9ub3Vycy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gd2hlbiBQYXVzYW5pYXMsIHdobyBoYWQgYmVlbiBvdXRyYWdlb3VzbHkgZGVhbHQgd2l0aCBhdCB0aGUgaW5zdGFuY2Ugb2YgQXR0YWx1cyBhbmQgQ2xlb3BhdHJhIGFuZCBjb3VsZCBnZXQgbm8ganVzdGljZSBhdCBQaGlsaXAncyBoYW5kcywgc2xldyBQaGlsaXAsIG1vc3Qgb2YgdGhlIGJsYW1lIGRldm9sdmVkIHVwb24gT2x5bXBpYXMsIG9uIHRoZSBncm91bmQgdGhhdCBzaGUgaGFkIGFkZGVkIGhlciBleGhvcnRhdGlvbnMgdG8gdGhlIHlvdW5nIG1hbidzIGFuZ2VyIGFuZCBpbmNpdGVkIGhpbSB0byB0aGUgZGVlZDsgYnV0IGEgY2VydGFpbiBhbW91bnQgb2YgYWNjdXNhdGlvbiBhdHRhY2hlZCBpdHNlbGYgdG8gQWxleGFuZGVyIGFsc28uIEZvciBpdCBpcyBzYWlkIHRoYXQgd2hlbiBQYXVzYW5pYXMsIGFmdGVyIHRoZSBvdXRyYWdlIHRoYXQgaGUgaGFkIHN1ZmZlcmVkLCBtZXQgQWxleGFuZGVyLCBhbmQgYmV3YWlsZWQgaGlzIGZhdGUsIEFsZXhhbmRlciByZWNpdGVkIHRvIGhpbSB0aGUgaWFtYmljIHZlcnNlIG9mIHRoZSA8dGl0bGU+TWVkZWlhPC90aXRsZT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIE1lZC4gMjg5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1lZGVpYTwvdGl0bGU+IG9mIEV1cmlwaWRlcywgdi4gMjg5PC9iaWJsPiAoS2lyY2hob2ZmKS4gIFRoZSBjb250ZXh0IG1ha2VzIHRoZSB2ZXJzZSBzdWdnZXN0IHRoZSBtdXJkZXIgb2YgQXR0YWx1cywgUGhpbGlwLCBhbmQgQ2xlb3BhdHJhLjwvbm90ZT464oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPgogICAgICAgICAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgZ2l2ZXIgb2YgdGhlIGJyaWRlLCB0aGUgYnJpZGVncm9vbSwgYW5kIHRoZSBicmlkZS48L3E+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCUhvd2V2ZXIsIGhlIGRpZCBzZWVrIG91dCB0aGUgcGFydGljaXBhbnRzIGluIHRoZSBwbG90IGFuZCBwdW5pc2hlZCB0aGVtLCBhbmQgd2FzIGFuZ3J5IHdpdGggT2x5bXBpYXMgZm9yIGhlciBzYXZhZ2UgdHJlYXRtZW50IG9mIENsZW9wYXRyYSBkdXJpbmcgaGlzIGFic2VuY2UuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWZ0ZXIgaGlzIGRlYXRoIE9seW1waWFzIGtpbGxlZCBQaGlsaXAncyBpbmZhbnQgc29uLCB0b2dldGhlciB3aXRoIGhpcyBtb3RoZXIgQ2xlb3BhdHJhLCBuaWVjZSBvZiBBdHRhbHVzLCBieSBkcmFnZ2luZyB0aGVtIG92ZXIgYSBicm9uemUgdmVzc2VsIGZpbGxlZCB3aXRoIGZpcmU8L3E+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gOC43LjUiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcywgdmlpaS4gNywgNTwvYmlibD4pLjwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyB3aGVuIFBhdXNhbmlhcywgd2hvIGhhZCBiZWVuIG91dHJhZ2VvdXNseSBkZWFsdCB3aXRoIGF0IHRoZSBpbnN0YW5jZSBvZiBBdHRhbHVzIGFuZCBDbGVvcGF0cmEgYW5kIGNvdWxkIGdldCBubyBqdXN0aWNlIGF0IFBoaWxpcCdzIGhhbmRzLCBzbGV3IFBoaWxpcCwgbW9zdCBvZiB0aGUgYmxhbWUgZGV2b2x2ZWQgdXBvbiBPbHltcGlhcywgb24gdGhlIGdyb3VuZCB0aGF0IHNoZSBoYWQgYWRkZWQgaGVyIGV4aG9ydGF0aW9ucyB0byB0aGUgeW91bmcgbWFuJ3MgYW5nZXIgYW5kIGluY2l0ZWQgaGltIHRvIHRoZSBkZWVkOyBidXQgYSBjZXJ0YWluIGFtb3VudCBvZiBhY2N1c2F0aW9uIGF0dGFjaGVkIGl0c2VsZiB0byBBbGV4YW5kZXIgYWxzby4gRm9yIGl0IGlzIHNhaWQgdGhhdCB3aGVuIFBhdXNhbmlhcywgYWZ0ZXIgdGhlIG91dHJhZ2UgdGhhdCBoZSBoYWQgc3VmZmVyZWQsIG1ldCBBbGV4YW5kZXIsIGFuZCBiZXdhaWxlZCBoaXMgZmF0ZSwgQWxleGFuZGVyIHJlY2l0ZWQgdG8gaGltIHRoZSBpYW1iaWMgdmVyc2Ugb2YgdGhlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lZGVpYTwvdGl0bGU+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkV1ci4gTWVkLiAyODkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZWRlaWE8L3RpdGxlPiBvZiBFdXJpcGlkZXMsIHYuIDI4OTwvYmlibD4gKEtpcmNoaG9mZikuICBUaGUgY29udGV4dCBtYWtlcyB0aGUgdmVyc2Ugc3VnZ2VzdCB0aGUgbXVyZGVyIG9mIEF0dGFsdXMsIFBoaWxpcCwgYW5kIENsZW9wYXRyYS48L25vdGU+OuKAlAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBNZWQuIDI4OSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lZGVpYTwvdGl0bGU+IG9mIEV1cmlwaWRlcywgdi4gMjg5PC9iaWJsPiAoS2lyY2hob2ZmKS4gIFRoZSBjb250ZXh0IG1ha2VzIHRoZSB2ZXJzZSBzdWdnZXN0IHRoZSBtdXJkZXIgb2YgQXR0YWx1cywgUGhpbGlwLCBhbmQgQ2xlb3BhdHJhLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lZGVpYTwvdGl0bGU+IG9mIEV1cmlwaWRlcywgdi4gMjg5PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIGdpdmVyIG9mIHRoZSBicmlkZSwgdGhlIGJyaWRlZ3Jvb20sIGFuZCB0aGUgYnJpZGUuPC9xPgogICAgICAgICAgICAgICA8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlIb3dldmVyLCBoZSBkaWQgc2VlayBvdXQgdGhlIHBhcnRpY2lwYW50cyBpbiB0aGUgcGxvdCBhbmQgcHVuaXNoZWQgdGhlbSwgYW5kIHdhcyBhbmdyeSB3aXRoIE9seW1waWFzIGZvciBoZXIgc2F2YWdlIHRyZWF0bWVudCBvZiBDbGVvcGF0cmEgZHVyaW5nIGhpcyBhYnNlbmNlLgoJCQkJPGwgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgZ2l2ZXIgb2YgdGhlIGJyaWRlLCB0aGUgYnJpZGVncm9vbSwgYW5kIHRoZSBicmlkZS48L3E+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgZ2l2ZXIgb2YgdGhlIGJyaWRlLCB0aGUgYnJpZGVncm9vbSwgYW5kIHRoZSBicmlkZS48L3E+CiAgICAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWZ0ZXIgaGlzIGRlYXRoIE9seW1waWFzIGtpbGxlZCBQaGlsaXAncyBpbmZhbnQgc29uLCB0b2dldGhlciB3aXRoIGhpcyBtb3RoZXIgQ2xlb3BhdHJhLCBuaWVjZSBvZiBBdHRhbHVzLCBieSBkcmFnZ2luZyB0aGVtIG92ZXIgYSBicm9uemUgdmVzc2VsIGZpbGxlZCB3aXRoIGZpcmU8L3E+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiA4LjcuNSIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCB2aWlpLiA3LCA1PC9iaWJsPikuPC9ub3RlPgogICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFmdGVyIGhpcyBkZWF0aCBPbHltcGlhcyBraWxsZWQgUGhpbGlwJ3MgaW5mYW50IHNvbiwgdG9nZXRoZXIgd2l0aCBoaXMgbW90aGVyIENsZW9wYXRyYSwgbmllY2Ugb2YgQXR0YWx1cywgYnkgZHJhZ2dpbmcgdGhlbSBvdmVyIGEgYnJvbnplIHZlc3NlbCBmaWxsZWQgd2l0aCBmaXJlPC9xPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gOC43LjUiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcywgdmlpaS4gNywgNTwvYmlibD4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgaXQgd2FzIHRoYXQgYXQgdGhlIGFnZSBvZiB0d2VudHkgeWVhcnMgQWxleGFuZGVyIHJlY2VpdmVkIHRoZSBraW5nZG9tLCB3aGljaCB3YXMgZXhwb3NlZCB0byBncmVhdCBqZWFsb3VzaWVzLCBkaXJlIGhhdHJlZHMsIGFuZCBkYW5nZXJzIG9uIGV2ZXJ5IGhhbmQuIEZvciB0aGUgbmVpZ2hib3VyaW5nIHRyaWJlcyBvZiBCYXJiYXJpYW5zIHdvdWxkIG5vdCB0b2xlcmF0ZSB0aGVpciBzZXJ2aXR1ZGUsIGFuZCBsb25nZWQgZm9yIHRoZWlyIGhlcmVkaXRhcnkga2luZ2RvbXM7IGFuZCBhcyBmb3IgR3JlZWNlLCBhbHRob3VnaCBQaGlsaXAgaGFkIGNvbnF1ZXJlZCBoZXIgaW4gdGhlIGZpZWxkLCBoZSBoYWQgbm90IGhhZCB0aW1lIGVub3VnaCB0byBtYWtlIGhlciB0YW1lIHVuZGVyIGhpcyB5b2tlLCBidXQgaGFkIG1lcmVseSBkaXN0dXJiZWQgYW5kIGNoYW5nZWQgdGhlIGNvbmRpdGlvbiBvZiBhZmZhaXJzIHRoZXJlLCBhbmQgdGhlbiBsZWZ0IHRoZW0gaW4gYSBncmVhdCBzdXJnZSBhbmQgY29tbW90aW9uLCBvd2luZyB0byB0aGUgc3RyYW5nZW5lc3Mgb2YgdGhlIHNpdHVhdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIE1hY2Vkb25pYW4gY291bnNlbGxvcnMgb2YgQWxleGFuZGVyIGhhZCBmZWFycyBvZiB0aGUgY3Jpc2lzLCBhbmQgdGhvdWdodCBoZSBzaG91bGQgZ2l2ZSB1cCB0aGUgR3JlZWsgc3RhdGVzIGFsdG9nZXRoZXIgYW5kIHVzZSBubyBtb3JlIGNvbXB1bHNpb24gdGhlcmUsIGFuZCB0aGF0IGhlIHNob3VsZCBjYWxsIHRoZSByZXZvbHRpbmcgQmFyYmFyaWFucyBiYWNrIHRvIHRoZWlyIGFsbGVnaWFuY2UgYnkgbWlsZCBtZWFzdXJlcyBhbmQgdHJ5IHRvIGFycmVzdCB0aGUgZmlyc3Qgc3ltcHRvbXMgb2YgdGhlaXIgcmV2b2x1dGlvbnM7IGJ1dCBoZSBoaW1zZWxmIHNldCBvdXQgZnJvbSBvcHBvc2l0ZSBwcmluY2lwbGVzIHRvIHdpbiBzZWN1cml0eSBhbmQgc2FmZXR5IGZvciBoaXMgcmVhbG0gYnkgYm9sZG5lc3MgYW5kIGEgbG9mdHkgc3Bpcml0LCBhc3N1cmVkIHRoYXQsIHdlcmUgaGUgc2VlbiB0byBhYmF0ZSBoaXMgZGlnbml0eSBldmVuIGJ1dCBhIGxpdHRsZSwgYWxsIGhpcyBlbmVtaWVzIHdvdWxkIHNldCB1cG9uIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGhlIHB1dCBhIHNwZWVkeSBzdG9wIHRvIHRoZSBkaXN0dXJiYW5jZXMgYW5kIHdhcnMgYW1vbmcgdGhlIEJhcmJhcmlhbnMgYnkgb3ZlcnJ1bm5pbmcgdGhlaXIgdGVycml0b3JpZXMgd2l0aCBhbiBhcm15IGFzIGZhciBhcyB0byB0aGUgcml2ZXIgRGFudWJlLCB3aGVyZSBoZSBmb3VnaHQgYSBncmVhdCBiYXR0bGUgd2l0aCBTeXJtdXMsIHRoZSBraW5nIG9mIHRoZSBUcmliYWxsaSwgYW5kIGRlZmVhdGVkIGhpbTsgYW5kIG9uIGxlYXJuaW5nIHRoYXQgdGhlIFRoZWJhbnMgaGFkIHJldm9sdGVkIGFuZCB0aGF0IHRoZSBBdGhlbmlhbnMgd2VyZSBpbiBzeW1wYXRoeSB3aXRoIHRoZW0sIGhlIGltbWVkaWF0ZWx5IGxlZCBoaXMgZm9yY2VzIHRocm91Z2ggdGhlIHBhc3Mgb2YgVGhlcm1vcHlsYWUsIGRlY2xhcmluZyB0aGF0IHNpbmNlIERlbW9zdGhlbmVzIGhhZCBjYWxsZWQgaGltIGEgYm95IHdoaWxlIGhlIHdhcyBhbW9uZyB0aGUgSWxseXJpYW5zIGFuZCBUcmliYWxsaWFucywgYW5kIGEgc3RyaXBsaW5nIHdoZW4gaGUgaGFkIHJlYWNoZWQgVGhlc3NhbHksIGhlIHdpc2hlZCB0byBzaG93IGhpbSB0aGF0IGJlZm9yZSB0aGUgd2FsbHMgb2YgQXRoZW5zIGhlIHdhcyBhIG1hbi48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBpdCB3YXMgdGhhdCBhdCB0aGUgYWdlIG9mIHR3ZW50eSB5ZWFycyBBbGV4YW5kZXIgcmVjZWl2ZWQgdGhlIGtpbmdkb20sIHdoaWNoIHdhcyBleHBvc2VkIHRvIGdyZWF0IGplYWxvdXNpZXMsIGRpcmUgaGF0cmVkcywgYW5kIGRhbmdlcnMgb24gZXZlcnkgaGFuZC4gRm9yIHRoZSBuZWlnaGJvdXJpbmcgdHJpYmVzIG9mIEJhcmJhcmlhbnMgd291bGQgbm90IHRvbGVyYXRlIHRoZWlyIHNlcnZpdHVkZSwgYW5kIGxvbmdlZCBmb3IgdGhlaXIgaGVyZWRpdGFyeSBraW5nZG9tczsgYW5kIGFzIGZvciBHcmVlY2UsIGFsdGhvdWdoIFBoaWxpcCBoYWQgY29ucXVlcmVkIGhlciBpbiB0aGUgZmllbGQsIGhlIGhhZCBub3QgaGFkIHRpbWUgZW5vdWdoIHRvIG1ha2UgaGVyIHRhbWUgdW5kZXIgaGlzIHlva2UsIGJ1dCBoYWQgbWVyZWx5IGRpc3R1cmJlZCBhbmQgY2hhbmdlZCB0aGUgY29uZGl0aW9uIG9mIGFmZmFpcnMgdGhlcmUsIGFuZCB0aGVuIGxlZnQgdGhlbSBpbiBhIGdyZWF0IHN1cmdlIGFuZCBjb21tb3Rpb24sIG93aW5nIHRvIHRoZSBzdHJhbmdlbmVzcyBvZiB0aGUgc2l0dWF0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBNYWNlZG9uaWFuIGNvdW5zZWxsb3JzIG9mIEFsZXhhbmRlciBoYWQgZmVhcnMgb2YgdGhlIGNyaXNpcywgYW5kIHRob3VnaHQgaGUgc2hvdWxkIGdpdmUgdXAgdGhlIEdyZWVrIHN0YXRlcyBhbHRvZ2V0aGVyIGFuZCB1c2Ugbm8gbW9yZSBjb21wdWxzaW9uIHRoZXJlLCBhbmQgdGhhdCBoZSBzaG91bGQgY2FsbCB0aGUgcmV2b2x0aW5nIEJhcmJhcmlhbnMgYmFjayB0byB0aGVpciBhbGxlZ2lhbmNlIGJ5IG1pbGQgbWVhc3VyZXMgYW5kIHRyeSB0byBhcnJlc3QgdGhlIGZpcnN0IHN5bXB0b21zIG9mIHRoZWlyIHJldm9sdXRpb25zOyBidXQgaGUgaGltc2VsZiBzZXQgb3V0IGZyb20gb3Bwb3NpdGUgcHJpbmNpcGxlcyB0byB3aW4gc2VjdXJpdHkgYW5kIHNhZmV0eSBmb3IgaGlzIHJlYWxtIGJ5IGJvbGRuZXNzIGFuZCBhIGxvZnR5IHNwaXJpdCwgYXNzdXJlZCB0aGF0LCB3ZXJlIGhlIHNlZW4gdG8gYWJhdGUgaGlzIGRpZ25pdHkgZXZlbiBidXQgYSBsaXR0bGUsIGFsbCBoaXMgZW5lbWllcyB3b3VsZCBzZXQgdXBvbiBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBwdXQgYSBzcGVlZHkgc3RvcCB0byB0aGUgZGlzdHVyYmFuY2VzIGFuZCB3YXJzIGFtb25nIHRoZSBCYXJiYXJpYW5zIGJ5IG92ZXJydW5uaW5nIHRoZWlyIHRlcnJpdG9yaWVzIHdpdGggYW4gYXJteSBhcyBmYXIgYXMgdG8gdGhlIHJpdmVyIERhbnViZSwgd2hlcmUgaGUgZm91Z2h0IGEgZ3JlYXQgYmF0dGxlIHdpdGggU3lybXVzLCB0aGUga2luZyBvZiB0aGUgVHJpYmFsbGksIGFuZCBkZWZlYXRlZCBoaW07IGFuZCBvbiBsZWFybmluZyB0aGF0IHRoZSBUaGViYW5zIGhhZCByZXZvbHRlZCBhbmQgdGhhdCB0aGUgQXRoZW5pYW5zIHdlcmUgaW4gc3ltcGF0aHkgd2l0aCB0aGVtLCBoZSBpbW1lZGlhdGVseSBsZWQgaGlzIGZvcmNlcyB0aHJvdWdoIHRoZSBwYXNzIG9mIFRoZXJtb3B5bGFlLCBkZWNsYXJpbmcgdGhhdCBzaW5jZSBEZW1vc3RoZW5lcyBoYWQgY2FsbGVkIGhpbSBhIGJveSB3aGlsZSBoZSB3YXMgYW1vbmcgdGhlIElsbHlyaWFucyBhbmQgVHJpYmFsbGlhbnMsIGFuZCBhIHN0cmlwbGluZyB3aGVuIGhlIGhhZCByZWFjaGVkIFRoZXNzYWx5LCBoZSB3aXNoZWQgdG8gc2hvdyBoaW0gdGhhdCBiZWZvcmUgdGhlIHdhbGxzIG9mIEF0aGVucyBoZSB3YXMgYSBtYW4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXJyaXZlZCBiZWZvcmUgVGhlYmVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gU2VwdGVtYmVyLCAzMzUgQi5DLiBQbHV0YXJjaCBtYWtlcyBubyBtZW50aW9uIG9mIGEgcHJldmlvdXMgZXhwZWRpdGlvbiBvZiBBbGV4YW5kZXIgaW50byBTb3V0aGVybiBHcmVlY2UsIGltbWVkaWF0ZWx5IGFmdGVyIFBoaWxpcCdzIGRlYXRoLCB3aGVuIGhlIHJlY2VpdmVkIHRoZSBzdWJtaXNzaW9uIG9mIGFsbCB0aGUgR3JlZWsgc3RhdGVzIGV4Y2VwdCBTcGFydGEsIGFuZCB3YXMgbWFkZSBjb21tYW5kZXItaW4tY2hpZWYgb2YgdGhlIGV4cGVkaXRpb24gYWdhaW5zdCBQZXJzaWEsIGluIFBoaWxpcCdzIHBsYWNlLiBTZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuMS4xIj5BcnJpYW4sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB3aXNoaW5nIHRvIGdpdmUgaGVyIHN0aWxsIGEgY2hhbmNlIHRvIHJlcGVudCBvZiB3aGF0IHNoZSBoYWQgZG9uZSwgaGUgbWVyZWx5IGRlbWFuZGVkIHRoZSBzdXJyZW5kZXIgb2YgUGhvZW5peCBhbmQgUHJvdGh5dGVzLCBhbmQgcHJvY2xhaW1lZCBhbiBhbW5lc3R5IGZvciB0aG9zZSB3aG8gY2FtZSBvdmVyIHRvIGhpcyBzaWRlLiBCdXQgdGhlIFRoZWJhbnMgbWFkZSBhIGNvdW50ZXItZGVtYW5kIHRoYXQgaGUgc2hvdWxkIHN1cnJlbmRlciB0byB0aGVtIFBoaWxvdGFzIGFuZCBBbnRpcGF0ZXIsIGFuZCBtYWRlIGEgY291bnRlci1wcm9jbGFtYXRpb24gdGhhdCBhbGwgd2hvIHdpc2hlZCB0byBoZWxwIGluIHNldHRpbmcgR3JlZWNlIGZyZWUgc2hvdWxkIHJhbmdlIHRoZW1zZWx2ZXMgd2l0aCB0aGVtOyBhbmQgc28gQWxleGFuZGVyIHNldCBoaXMgTWFjZWRvbmlhbnMgdG8gdGhlIHdvcmsgb2Ygd2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgcGFydCBvZiB0aGUgVGhlYmFucywgdGhlbiwgdGhlIHN0cnVnZ2xlIHdhcyBjYXJyaWVkIG9uIHdpdGggYSBzcGlyaXQgYW5kIHZhbG91ciBiZXlvbmQgdGhlaXIgcG93ZXJzLCBzaW5jZSB0aGV5IHdlcmUgYXJyYXllZCBhZ2FpbnN0IGFuIGVuZW15IHdobyB3YXMgbWFueSB0aW1lcyBtb3JlIG51bWVyb3VzIHRoYW4gdGhleTsgYnV0IHdoZW4gdGhlIE1hY2Vkb25pYW4gZ2Fycmlzb24gYWxzbywgbGVhdmluZyB0aGUgY2l0YWRlbCBvZiB0aGUgQ2FkbWVpYSwgZmVsbCB1cG9uIHRoZW0gaW4gdGhlIHJlYXIsIG1vc3Qgb2YgdGhlbSB3ZXJlIHN1cnJvdW5kZWQsIGFuZCBmZWxsIGluIHRoZSBiYXR0bGUgaXRzZWxmIGFuZCB0aGVpciBjaXR5IHdhcyB0YWtlbiwgcGx1bmRlcmVkLCBhbmQgcmF6ZWQgdG8gdGhlIGdyb3VuZC4gVGhpcyB3YXMgZG9uZSwgaW4gdGhlIG1haW4sIGJlY2F1c2UgQWxleGFuZGVyIGV4cGVjdGVkIHRoYXQgdGhlIEdyZWVrcyB3b3VsZCBiZSB0ZXJyaWZpZWQgYnkgc28gZ3JlYXQgYSBkaXNhc3RlciBhbmQgY293ZXIgZG93biBpbiBxdWlldCwgYnV0IGFwYXJ0IGZyb20gdGhpcywgaGUgYWxzbyBwbHVtZWQgaGltc2VsZiBvbiBncmF0aWZ5aW5nIHRoZSBjb21wbGFpbnRzIG9mIGhpcyBhbGxpZXM7IGZvciB0aGUgUGhvY2lhbnMgYW5kIFBsYXRhZWFucyBoYWQgZGVub3VuY2VkIHRoZSBUaGViYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5TbyBhZnRlciBzZXBhcmF0aW5nIG91dCB0aGUgcHJpZXN0cywgYWxsIHdobyB3ZXJlIGd1ZXN0LWZyaWVuZHMgb2YgdGhlIE1hY2Vkb25pYW5zLCB0aGUgZGVzY2VuZGFudHMgb2YgUGluZGFyLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB3ZSBhcmUgdG9sZCB0aGF0IEFsZXhhbmRlciBwcmVzZXJ2ZWQgdGhlIGhvdXNlIG9mIFBpbmRhciB0aGUgcG9ldCwgYW5kIHRoZSBkZXNjZW5kYW50cyBvZiBQaW5kYXIsIG91dCBvZiByZWdhcmQgZm9yIFBpbmRhcjwvcT4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAxLjkuMTAiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gaS4gOSwgMTA8L2JpYmw+KS48L25vdGU+IGFuZCB0aG9zZSB3aG8gaGFkIHZvdGVkIGFnYWluc3QgdGhlIHJldm9sdCwgaGUgc29sZCB0aGUgcmVzdCBpbnRvIHNsYXZlcnksIGFuZCB0aGV5IHByb3ZlZCB0byBiZSBtb3JlIHRoYW4gdGhpcnR5IHRob3VzYW5kOyB0aG9zZSB3aG8gaGFkIGJlZW4gc2xhaW4gd2VyZSBtb3JlIHRoYW4gc2l4IHRob3VzYW5kLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFycml2ZWQgYmVmb3JlIFRoZWJlcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gU2VwdGVtYmVyLCAzMzUgQi5DLiBQbHV0YXJjaCBtYWtlcyBubyBtZW50aW9uIG9mIGEgcHJldmlvdXMgZXhwZWRpdGlvbiBvZiBBbGV4YW5kZXIgaW50byBTb3V0aGVybiBHcmVlY2UsIGltbWVkaWF0ZWx5IGFmdGVyIFBoaWxpcCdzIGRlYXRoLCB3aGVuIGhlIHJlY2VpdmVkIHRoZSBzdWJtaXNzaW9uIG9mIGFsbCB0aGUgR3JlZWsgc3RhdGVzIGV4Y2VwdCBTcGFydGEsIGFuZCB3YXMgbWFkZSBjb21tYW5kZXItaW4tY2hpZWYgb2YgdGhlIGV4cGVkaXRpb24gYWdhaW5zdCBQZXJzaWEsIGluIFBoaWxpcCdzIHBsYWNlLiBTZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMS4xLjEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgd2lzaGluZyB0byBnaXZlIGhlciBzdGlsbCBhIGNoYW5jZSB0byByZXBlbnQgb2Ygd2hhdCBzaGUgaGFkIGRvbmUsIGhlIG1lcmVseSBkZW1hbmRlZCB0aGUgc3VycmVuZGVyIG9mIFBob2VuaXggYW5kIFByb3RoeXRlcywgYW5kIHByb2NsYWltZWQgYW4gYW1uZXN0eSBmb3IgdGhvc2Ugd2hvIGNhbWUgb3ZlciB0byBoaXMgc2lkZS4gQnV0IHRoZSBUaGViYW5zIG1hZGUgYSBjb3VudGVyLWRlbWFuZCB0aGF0IGhlIHNob3VsZCBzdXJyZW5kZXIgdG8gdGhlbSBQaGlsb3RhcyBhbmQgQW50aXBhdGVyLCBhbmQgbWFkZSBhIGNvdW50ZXItcHJvY2xhbWF0aW9uIHRoYXQgYWxsIHdobyB3aXNoZWQgdG8gaGVscCBpbiBzZXR0aW5nIEdyZWVjZSBmcmVlIHNob3VsZCByYW5nZSB0aGVtc2VsdmVzIHdpdGggdGhlbTsgYW5kIHNvIEFsZXhhbmRlciBzZXQgaGlzIE1hY2Vkb25pYW5zIHRvIHRoZSB3b3JrIG9mIHdhci4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAxLjEuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDEuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDEuPC90cmFuc2xhdGlvbj4="
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBwYXJ0IG9mIHRoZSBUaGViYW5zLCB0aGVuLCB0aGUgc3RydWdnbGUgd2FzIGNhcnJpZWQgb24gd2l0aCBhIHNwaXJpdCBhbmQgdmFsb3VyIGJleW9uZCB0aGVpciBwb3dlcnMsIHNpbmNlIHRoZXkgd2VyZSBhcnJheWVkIGFnYWluc3QgYW4gZW5lbXkgd2hvIHdhcyBtYW55IHRpbWVzIG1vcmUgbnVtZXJvdXMgdGhhbiB0aGV5OyBidXQgd2hlbiB0aGUgTWFjZWRvbmlhbiBnYXJyaXNvbiBhbHNvLCBsZWF2aW5nIHRoZSBjaXRhZGVsIG9mIHRoZSBDYWRtZWlhLCBmZWxsIHVwb24gdGhlbSBpbiB0aGUgcmVhciwgbW9zdCBvZiB0aGVtIHdlcmUgc3Vycm91bmRlZCwgYW5kIGZlbGwgaW4gdGhlIGJhdHRsZSBpdHNlbGYgYW5kIHRoZWlyIGNpdHkgd2FzIHRha2VuLCBwbHVuZGVyZWQsIGFuZCByYXplZCB0byB0aGUgZ3JvdW5kLiBUaGlzIHdhcyBkb25lLCBpbiB0aGUgbWFpbiwgYmVjYXVzZSBBbGV4YW5kZXIgZXhwZWN0ZWQgdGhhdCB0aGUgR3JlZWtzIHdvdWxkIGJlIHRlcnJpZmllZCBieSBzbyBncmVhdCBhIGRpc2FzdGVyIGFuZCBjb3dlciBkb3duIGluIHF1aWV0LCBidXQgYXBhcnQgZnJvbSB0aGlzLCBoZSBhbHNvIHBsdW1lZCBoaW1zZWxmIG9uIGdyYXRpZnlpbmcgdGhlIGNvbXBsYWludHMgb2YgaGlzIGFsbGllczsgZm9yIHRoZSBQaG9jaWFucyBhbmQgUGxhdGFlYW5zIGhhZCBkZW5vdW5jZWQgdGhlIFRoZWJhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvIGFmdGVyIHNlcGFyYXRpbmcgb3V0IHRoZSBwcmllc3RzLCBhbGwgd2hvIHdlcmUgZ3Vlc3QtZnJpZW5kcyBvZiB0aGUgTWFjZWRvbmlhbnMsIHRoZSBkZXNjZW5kYW50cyBvZiBQaW5kYXIsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB3ZSBhcmUgdG9sZCB0aGF0IEFsZXhhbmRlciBwcmVzZXJ2ZWQgdGhlIGhvdXNlIG9mIFBpbmRhciB0aGUgcG9ldCwgYW5kIHRoZSBkZXNjZW5kYW50cyBvZiBQaW5kYXIsIG91dCBvZiByZWdhcmQgZm9yIFBpbmRhcjwvcT4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuOS4xMCI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDksIDEwPC9iaWJsPikuPC9ub3RlPiBhbmQgdGhvc2Ugd2hvIGhhZCB2b3RlZCBhZ2FpbnN0IHRoZSByZXZvbHQsIGhlIHNvbGQgdGhlIHJlc3QgaW50byBzbGF2ZXJ5LCBhbmQgdGhleSBwcm92ZWQgdG8gYmUgbW9yZSB0aGFuIHRoaXJ0eSB0aG91c2FuZDsgdGhvc2Ugd2hvIGhhZCBiZWVuIHNsYWluIHdlcmUgbW9yZSB0aGFuIHNpeCB0aG91c2FuZC48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB3ZSBhcmUgdG9sZCB0aGF0IEFsZXhhbmRlciBwcmVzZXJ2ZWQgdGhlIGhvdXNlIG9mIFBpbmRhciB0aGUgcG9ldCwgYW5kIHRoZSBkZXNjZW5kYW50cyBvZiBQaW5kYXIsIG91dCBvZiByZWdhcmQgZm9yIFBpbmRhcjwvcT4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuOS4xMCI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDksIDEwPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiA5LCAxMDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZSBtYW55IGFuZCBncmlldm91cyBjYWxhbWl0aWVzIHdoaWNoIHRodXMgcG9zc2Vzc2VkIHRoZSBjaXR5LCBzb21lIFRocmFjaWFucyBicm9rZSBpbnRvIHRoZSBob3VzZSBvZiBUaW1vY2xlaWEsIGEgd29tYW4gb2YgaGlnaCByZXB1dGUgYW5kIGNoYXN0aXR5LCBhbmQgd2hpbGUgdGhlIHJlc3Qgd2VyZSBwbHVuZGVyaW5nIGhlciBwcm9wZXJ0eSwgdGhlaXIgbGVhZGVyIHNoYW1lZnVsbHkgdmlvbGF0ZWQgaGVyLCBhbmQgdGhlbiBhc2tlZCBoZXIgaWYgc2hlIGhhZCBnb2xkIG9yIHNpbHZlciBjb25jZWFsZWQgYW55d2hlcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNoZSBhZG1pdHRlZCB0aGF0IHNoZSBoYWQsIGFuZCBhZnRlciBsZWFkaW5nIGhpbSBieSBoaW1zZWxmIGludG8gdGhlIGdhcmRlbiBhbmQgc2hvd2luZyBoaW0gYSB3ZWxsLCB0b2xkIGhpbSB0aGF0IHdoZW4gdGhlIGNpdHkgd2FzIHRha2VuIHNoZSBoYWQgd2l0aCBoZXIgb3duIGhhbmRzIGNhc3QgaW4gdGhlcmUgaGVyIG1vc3QgdmFsdWFibGUgcG9zc2Vzc2lvbnMuIFRoZW4sIGFzIHRoZSBUaHJhY2lhbiB3YXMgYmVuZGluZyBvdmVyIGFuZCBpbnNwZWN0aW5nIHRoZSBwbGFjZSwgc2hlIGNhbWUgYmVoaW5kIGhpbSBhbmQgcHVzaGVkIGhpbSBpbiwgY2FzdCBtYW55IHN0b25lcyB1cG9uIGhpbSwgYW5kIGtpbGxlZCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBUaHJhY2lhbnMgbGVkIGhlciwgd2l0aCBoYW5kcyBib3VuZCwgdG8gQWxleGFuZGVyLCBzaGUgc2hvd2VkIGJ5IGhlciBtaWVuIGFuZCBnYWl0IHRoYXQgc2hlIHdhcyBhIHBlcnNvbiBvZiBncmVhdCBkaWduaXR5IGFuZCBsb2Z0eSBzcGlyaXQsIHNvIGNhbG1seSBhbmQgZmVhcmxlc3NseSBkaWQgc2hlIGZvbGxvdyBoZXIgY29uZHVjdG9yczsgYW5kIHdoZW4gdGhlIGtpbmcgYXNrZWQgaGVyIHdobyBzaGUgd2FzLCBzaGUgcmVwbGllZCB0aGF0IHNoZSB3YXMgYSBzaXN0ZXIgb2YgVGhlYWdlbmVzLCB3aG8gZHJldyB1cCB0aGUgZm9yY2VzIHdoaWNoIGZvdWdodCBQaGlsaXAgaW4gYmVoYWxmIG9mIHRoZSBsaWJlcnR5IG9mIHRoZSBHcmVla3MsIGFuZCBmZWxsIGluIGNvbW1hbmQgYXQgQ2hhZXJvbmVpYS4gQW1hemVkLCB0aGVyZWZvcmUsIGF0IGhlciByZXBseSBhbmQgYXQgd2hhdCBzaGUgaGFkIGRvbmUsIEFsZXhhbmRlciBiYWRlIGhlciBkZXBhcnQgaW4gZnJlZWRvbSB3aXRoIGhlciBjaGlsZHJlbi48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW1vbmcgdGhlIG1hbnkgYW5kIGdyaWV2b3VzIGNhbGFtaXRpZXMgd2hpY2ggdGh1cyBwb3NzZXNzZWQgdGhlIGNpdHksIHNvbWUgVGhyYWNpYW5zIGJyb2tlIGludG8gdGhlIGhvdXNlIG9mIFRpbW9jbGVpYSwgYSB3b21hbiBvZiBoaWdoIHJlcHV0ZSBhbmQgY2hhc3RpdHksIGFuZCB3aGlsZSB0aGUgcmVzdCB3ZXJlIHBsdW5kZXJpbmcgaGVyIHByb3BlcnR5LCB0aGVpciBsZWFkZXIgc2hhbWVmdWxseSB2aW9sYXRlZCBoZXIsIGFuZCB0aGVuIGFza2VkIGhlciBpZiBzaGUgaGFkIGdvbGQgb3Igc2lsdmVyIGNvbmNlYWxlZCBhbnl3aGVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNoZSBhZG1pdHRlZCB0aGF0IHNoZSBoYWQsIGFuZCBhZnRlciBsZWFkaW5nIGhpbSBieSBoaW1zZWxmIGludG8gdGhlIGdhcmRlbiBhbmQgc2hvd2luZyBoaW0gYSB3ZWxsLCB0b2xkIGhpbSB0aGF0IHdoZW4gdGhlIGNpdHkgd2FzIHRha2VuIHNoZSBoYWQgd2l0aCBoZXIgb3duIGhhbmRzIGNhc3QgaW4gdGhlcmUgaGVyIG1vc3QgdmFsdWFibGUgcG9zc2Vzc2lvbnMuIFRoZW4sIGFzIHRoZSBUaHJhY2lhbiB3YXMgYmVuZGluZyBvdmVyIGFuZCBpbnNwZWN0aW5nIHRoZSBwbGFjZSwgc2hlIGNhbWUgYmVoaW5kIGhpbSBhbmQgcHVzaGVkIGhpbSBpbiwgY2FzdCBtYW55IHN0b25lcyB1cG9uIGhpbSwgYW5kIGtpbGxlZCBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBUaHJhY2lhbnMgbGVkIGhlciwgd2l0aCBoYW5kcyBib3VuZCwgdG8gQWxleGFuZGVyLCBzaGUgc2hvd2VkIGJ5IGhlciBtaWVuIGFuZCBnYWl0IHRoYXQgc2hlIHdhcyBhIHBlcnNvbiBvZiBncmVhdCBkaWduaXR5IGFuZCBsb2Z0eSBzcGlyaXQsIHNvIGNhbG1seSBhbmQgZmVhcmxlc3NseSBkaWQgc2hlIGZvbGxvdyBoZXIgY29uZHVjdG9yczsgYW5kIHdoZW4gdGhlIGtpbmcgYXNrZWQgaGVyIHdobyBzaGUgd2FzLCBzaGUgcmVwbGllZCB0aGF0IHNoZSB3YXMgYSBzaXN0ZXIgb2YgVGhlYWdlbmVzLCB3aG8gZHJldyB1cCB0aGUgZm9yY2VzIHdoaWNoIGZvdWdodCBQaGlsaXAgaW4gYmVoYWxmIG9mIHRoZSBsaWJlcnR5IG9mIHRoZSBHcmVla3MsIGFuZCBmZWxsIGluIGNvbW1hbmQgYXQgQ2hhZXJvbmVpYS4gQW1hemVkLCB0aGVyZWZvcmUsIGF0IGhlciByZXBseSBhbmQgYXQgd2hhdCBzaGUgaGFkIGRvbmUsIEFsZXhhbmRlciBiYWRlIGhlciBkZXBhcnQgaW4gZnJlZWRvbSB3aXRoIGhlciBjaGlsZHJlbi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgaGUgd2FzIHJlY29uY2lsZWQgd2l0aCB0aGUgQXRoZW5pYW5zLCBhbHRob3VnaCB0aGV5IHNob3dlZCBleGNlZWRpbmcgc29ycm93IGF0IHRoZSBtaXNmb3J0dW5lcyBvZiBUaGViZXM7IGZvciBhbHRob3VnaCB0aGV5IGhhZCBiZWd1biB0aGUgZmVzdGl2YWwgb2YgdGhlIG15c3RlcmllcywgdGhleSBnYXZlIGl0IHVwIGluIGNvbnNlcXVlbmNlIG9mIHRoZWlyIGdyaWVmOwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAxLjEwLjIiPkFycmlhbiAoaS4gMTAsIDIpPC9iaWJsPiwgaXQgd2FzIGZyb20gcGFuaWMgZnJpZ2h0Ljwvbm90ZT4gYW5kIHVwb24gdGhlIFRoZWJhbnMgd2hvIHNvdWdodCByZWZ1Z2UgaW4gdGhlaXIgY2l0eSB0aGV5IGJlc3Rvd2VkIGV2ZXJ5IGtpbmRuZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm90d2l0aHN0YW5kaW5nIHRoaXMsIHdoZXRoZXIgaGlzIHJhZ2Ugd2FzIG5vdyBzYXRlZCwgYXMgYSBsaW9uJ3MgbWlnaHQgYmUsIG9yIHdoZXRoZXIgaGUgd2lzaGVkIHRvIG9mZnNldCBhIGRlZWQgb2YgdGhlIG1vc3Qgc3VsbGVuIHNhdmFnZXJ5IHdpdGggb25lIHRoYXQgd2FzIG1lcmNpZnVsLCBoZSBub3Qgb25seSByZW1pdHRlZCBhbGwgaGlzIGNoYXJnZXMgYWdhaW5zdCB0aGUgY2l0eSwgYnV0IGV2ZW4gYmFkZSBpdCBnaXZlIGdvb2QgaGVlZCB0byBpdHMgYWZmYWlycywgc2luY2UsIGlmIGFueXRoaW5nIHNob3VsZCBoYXBwZW4gdG8gaGltLCBpdCB3b3VsZCBoYXZlIHRoZSBydWxlIG92ZXIgR3JlZWNlLiBJbiBsYXRlciB0aW1lcywgbW9yZW92ZXIsIGFzIHdlIGFyZSB0b2xkLCB0aGUgY2FsYW1pdHkgb2YgdGhlIFRoZWJhbnMgb2Z0ZW4gZ2F2ZSBoaW0gcmVtb3JzZSwgYW5kIG1hZGUgaGltIG1pbGRlciB0b3dhcmRzIG1hbnkgcGVvcGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgY2VydGFpbmx5IHRoZSBtdXJkZXIgb2YgQ2xlaXR1cywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNTEuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBsaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hpY2ggaGUgY29tbWl0dGVkIGluIGhpcyBjdXBzLCBhbmQgdGhlIGNvd2FyZGx5IHJlZnVzYWwgb2YgaGlzIE1hY2Vkb25pYW5zIHRvIGZvbGxvdyBoaW0gYWdhaW5zdCB0aGUgSW5kaWFucywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNjIuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBseGlpPC9iaWJsPi48L25vdGU+IHdoZXJlYnkgdGhleSBhcyBpdCB3ZXJlIHJvYmJlZCBoaXMgZXhwZWRpdGlvbiBhbmQgaGlzIGdsb3J5IG9mIHRoZWlyIGNvbnN1bW1hdGlvbiwgaGUgd2FzIHdvbnQgdG8gYXR0cmlidXRlIHRvIHRoZSB2ZW5nZWZ1bCB3cmF0aCBvZiBEaW9ueXN1cy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgZ29kIHdhcyBzYWlkIHRvIGhhdmUgYmVlbiBib3JuIG9mIFNlbWVsZSwgZGF1Z2h0ZXIgb2YgQ2FkbXVzIHRoZSBmb3VuZGVyIG9mIFRoZWJlcy48L25vdGU+IEFuZCB0aGVyZSB3YXMgbm90IGEgVGhlYmFuIG9mIHRob3NlIHRoYXQgc3Vydml2ZWQgd2hvIGFmdGVyd2FyZHMgY2FtZSB0byBoaW0gd2l0aCBhbnkgcmVxdWVzdCBhbmQgZGlkIG5vdCBnZXQgd2hhdCBoZSB3YW50ZWQgZnJvbSBoaW0uIFRodXMgbXVjaCBjb25jZXJuaW5nIFRoZWJlcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciBhIGZ1bGwgYWNjb3VudCBvZiBBbGV4YW5kZXIncyBjYXB0dXJlIGFuZCBkZXN0cnVjdGlvbiBvZiBUaGViZXMsIHNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMS44LjEiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gaS4gOCBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIGhlIHdhcyByZWNvbmNpbGVkIHdpdGggdGhlIEF0aGVuaWFucywgYWx0aG91Z2ggdGhleSBzaG93ZWQgZXhjZWVkaW5nIHNvcnJvdyBhdCB0aGUgbWlzZm9ydHVuZXMgb2YgVGhlYmVzOyBmb3IgYWx0aG91Z2ggdGhleSBoYWQgYmVndW4gdGhlIGZlc3RpdmFsIG9mIHRoZSBteXN0ZXJpZXMsIHRoZXkgZ2F2ZSBpdCB1cCBpbiBjb25zZXF1ZW5jZSBvZiB0aGVpciBncmllZjsKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuMTAuMiI+QXJyaWFuIChpLiAxMCwgMik8L2JpYmw+LCBpdCB3YXMgZnJvbSBwYW5pYyBmcmlnaHQuPC9ub3RlPiBhbmQgdXBvbiB0aGUgVGhlYmFucyB3aG8gc291Z2h0IHJlZnVnZSBpbiB0aGVpciBjaXR5IHRoZXkgYmVzdG93ZWQgZXZlcnkga2luZG5lc3MuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMS4xMC4yIj5BcnJpYW4gKGkuIDEwLCAyKTwvYmlibD4sIGl0IHdhcyBmcm9tIHBhbmljIGZyaWdodC48L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3R3aXRoc3RhbmRpbmcgdGhpcywgd2hldGhlciBoaXMgcmFnZSB3YXMgbm93IHNhdGVkLCBhcyBhIGxpb24ncyBtaWdodCBiZSwgb3Igd2hldGhlciBoZSB3aXNoZWQgdG8gb2Zmc2V0IGEgZGVlZCBvZiB0aGUgbW9zdCBzdWxsZW4gc2F2YWdlcnkgd2l0aCBvbmUgdGhhdCB3YXMgbWVyY2lmdWwsIGhlIG5vdCBvbmx5IHJlbWl0dGVkIGFsbCBoaXMgY2hhcmdlcyBhZ2FpbnN0IHRoZSBjaXR5LCBidXQgZXZlbiBiYWRlIGl0IGdpdmUgZ29vZCBoZWVkIHRvIGl0cyBhZmZhaXJzLCBzaW5jZSwgaWYgYW55dGhpbmcgc2hvdWxkIGhhcHBlbiB0byBoaW0sIGl0IHdvdWxkIGhhdmUgdGhlIHJ1bGUgb3ZlciBHcmVlY2UuIEluIGxhdGVyIHRpbWVzLCBtb3Jlb3ZlciwgYXMgd2UgYXJlIHRvbGQsIHRoZSBjYWxhbWl0eSBvZiB0aGUgVGhlYmFucyBvZnRlbiBnYXZlIGhpbSByZW1vcnNlLCBhbmQgbWFkZSBoaW0gbWlsZGVyIHRvd2FyZHMgbWFueSBwZW9wbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBjZXJ0YWlubHkgdGhlIG11cmRlciBvZiBDbGVpdHVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNTEuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBsaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hpY2ggaGUgY29tbWl0dGVkIGluIGhpcyBjdXBzLCBhbmQgdGhlIGNvd2FyZGx5IHJlZnVzYWwgb2YgaGlzIE1hY2Vkb25pYW5zIHRvIGZvbGxvdyBoaW0gYWdhaW5zdCB0aGUgSW5kaWFucywKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDUxLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgbGkuPC9iaWJsPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiA2Mi4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGx4aWk8L2JpYmw+Ljwvbm90ZT4gd2hlcmVieSB0aGV5IGFzIGl0IHdlcmUgcm9iYmVkIGhpcyBleHBlZGl0aW9uIGFuZCBoaXMgZ2xvcnkgb2YgdGhlaXIgY29uc3VtbWF0aW9uLCBoZSB3YXMgd29udCB0byBhdHRyaWJ1dGUgdG8gdGhlIHZlbmdlZnVsIHdyYXRoIG9mIERpb255c3VzLgoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNjIuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBseGlpPC9iaWJsPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgZ29kIHdhcyBzYWlkIHRvIGhhdmUgYmVlbiBib3JuIG9mIFNlbWVsZSwgZGF1Z2h0ZXIgb2YgQ2FkbXVzIHRoZSBmb3VuZGVyIG9mIFRoZWJlcy48L25vdGU+IEFuZCB0aGVyZSB3YXMgbm90IGEgVGhlYmFuIG9mIHRob3NlIHRoYXQgc3Vydml2ZWQgd2hvIGFmdGVyd2FyZHMgY2FtZSB0byBoaW0gd2l0aCBhbnkgcmVxdWVzdCBhbmQgZGlkIG5vdCBnZXQgd2hhdCBoZSB3YW50ZWQgZnJvbSBoaW0uIFRodXMgbXVjaCBjb25jZXJuaW5nIFRoZWJlcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIGEgZnVsbCBhY2NvdW50IG9mIEFsZXhhbmRlcidzIGNhcHR1cmUgYW5kIGRlc3RydWN0aW9uIG9mIFRoZWJlcywgc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuOC4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaS4gOCBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAxLjguMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDggZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaS4gOCBmLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgYSBnZW5lcmFsIGFzc2VtYmx5IG9mIHRoZSBHcmVla3Mgd2FzIGhlbGQgYXQgdGhlIElzdGhtdXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIG5vdGUgb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDExLjQiIHZhbGlkPSJ5ZXMiPnhpLiA0PC9iaWJsPi48L25vdGU+IHdoZXJlIGEgdm90ZSB3YXMgcGFzc2VkIHRvIG1ha2UgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IFBlcnNpYSB3aXRoIEFsZXhhbmRlciwgYW5kIGhlIHdhcyBwcm9jbGFpbWVkIHRoZWlyIGxlYWRlci4gVGhlcmV1cG9uIG1hbnkgc3RhdGVzbWVuIGFuZCBwaGlsb3NvcGhlcnMgY2FtZSB0byBoaW0gd2l0aCB0aGVpciBjb25ncmF0dWxhdGlvbnMsIGFuZCBoZSBleHBlY3RlZCB0aGF0IERpb2dlbmVzIG9mIFNpbm9wZSBhbHNvLCB3aG8gd2FzIHRhcnJ5aW5nIGluIENvcmludGgsIHdvdWxkIGRvIGxpa2V3aXNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UgdGhhdCBwaGlsb3NvcGhlciB0b29rIG5vdCB0aGUgc2xpZ2h0ZXN0IG5vdGljZSBvZiBBbGV4YW5kZXIsIGFuZCBjb250aW51ZWQgdG8gZW5qb3kgaGlzIGxlaXN1cmUgaW4gdGhlIHN1YnVyYiBDcmFuZWlvbiwgQWxleGFuZGVyIHdlbnQgaW4gcGVyc29uIHRvIHNlZSBoaW07IGFuZCBoZSBmb3VuZCBoaW0gbHlpbmcgaW4gdGhlIHN1bi4gRGlvZ2VuZXMgcmFpc2VkIGhpbXNlbGYgdXAgYSBsaXR0bGUgd2hlbiBoZSBzYXcgc28gbWFueSBwZXJzb25zIGNvbWluZyB0b3dhcmRzIGhpbSwgYW5kIGZpeGVkIGhpcyBleWVzIHVwb24gQWxleGFuZGVyLiBBbmQgd2hlbiB0aGF0IG1vbmFyY2ggYWRkcmVzc2VkIGhpbSB3aXRoIGdyZWV0aW5ncywgYW5kIGFza2VkIGlmIGhlIHdhbnRlZCBhbnl0aGluZywgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzLDwvcT4gc2FpZCBEaW9nZW5lcywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zdGFuZCBhIGxpdHRsZSBvdXQgb2YgbXkgc3VuLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzYWlkIHRoYXQgQWxleGFuZGVyIHdhcyBzbyBzdHJ1Y2sgYnkgdGhpcywgYW5kIGFkbWlyZWQgc28gbXVjaCB0aGUgaGF1Z2h0aW5lc3MgYW5kIGdyYW5kZXVyIG9mIHRoZSBtYW4gd2hvIGhhZCBub3RoaW5nIGJ1dCBzY29ybiBmb3IgaGltLCB0aGF0IGhlIHNhaWQgdG8gaGlzIGZvbGxvd2Vycywgd2hvIHdlcmUgbGF1Z2hpbmcgYW5kIGplc3RpbmcgYWJvdXQgdGhlIHBoaWxvc29waGVyIGFzIHRoZXkgd2VudCBhd2F5LCA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgdmVyaWx5LCBpZiBJIHdlcmUgbm90IEFsZXhhbmRlciwgSSB3b3VsZCBiZSBEaW9nZW5lcy48L3E+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBhIGdlbmVyYWwgYXNzZW1ibHkgb2YgdGhlIEdyZWVrcyB3YXMgaGVsZCBhdCB0aGUgSXN0aG11cywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDExLjQiIHZhbGlkPSJ5ZXMiPnhpLiA0PC9iaWJsPi48L25vdGU+IHdoZXJlIGEgdm90ZSB3YXMgcGFzc2VkIHRvIG1ha2UgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IFBlcnNpYSB3aXRoIEFsZXhhbmRlciwgYW5kIGhlIHdhcyBwcm9jbGFpbWVkIHRoZWlyIGxlYWRlci4gVGhlcmV1cG9uIG1hbnkgc3RhdGVzbWVuIGFuZCBwaGlsb3NvcGhlcnMgY2FtZSB0byBoaW0gd2l0aCB0aGVpciBjb25ncmF0dWxhdGlvbnMsIGFuZCBoZSBleHBlY3RlZCB0aGF0IERpb2dlbmVzIG9mIFNpbm9wZSBhbHNvLCB3aG8gd2FzIHRhcnJ5aW5nIGluIENvcmludGgsIHdvdWxkIGRvIGxpa2V3aXNlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDExLjQiIHZhbGlkPSJ5ZXMiPnhpLiA0PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSB0aGF0IHBoaWxvc29waGVyIHRvb2sgbm90IHRoZSBzbGlnaHRlc3Qgbm90aWNlIG9mIEFsZXhhbmRlciwgYW5kIGNvbnRpbnVlZCB0byBlbmpveSBoaXMgbGVpc3VyZSBpbiB0aGUgc3VidXJiIENyYW5laW9uLCBBbGV4YW5kZXIgd2VudCBpbiBwZXJzb24gdG8gc2VlIGhpbTsgYW5kIGhlIGZvdW5kIGhpbSBseWluZyBpbiB0aGUgc3VuLiBEaW9nZW5lcyByYWlzZWQgaGltc2VsZiB1cCBhIGxpdHRsZSB3aGVuIGhlIHNhdyBzbyBtYW55IHBlcnNvbnMgY29taW5nIHRvd2FyZHMgaGltLCBhbmQgZml4ZWQgaGlzIGV5ZXMgdXBvbiBBbGV4YW5kZXIuIEFuZCB3aGVuIHRoYXQgbW9uYXJjaCBhZGRyZXNzZWQgaGltIHdpdGggZ3JlZXRpbmdzLCBhbmQgYXNrZWQgaWYgaGUgd2FudGVkIGFueXRoaW5nLCA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcyw8L3E+IHNhaWQgRGlvZ2VuZXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zdGFuZCBhIGxpdHRsZSBvdXQgb2YgbXkgc3VuLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdGhhdCBBbGV4YW5kZXIgd2FzIHNvIHN0cnVjayBieSB0aGlzLCBhbmQgYWRtaXJlZCBzbyBtdWNoIHRoZSBoYXVnaHRpbmVzcyBhbmQgZ3JhbmRldXIgb2YgdGhlIG1hbiB3aG8gaGFkIG5vdGhpbmcgYnV0IHNjb3JuIGZvciBoaW0sIHRoYXQgaGUgc2FpZCB0byBoaXMgZm9sbG93ZXJzLCB3aG8gd2VyZSBsYXVnaGluZyBhbmQgamVzdGluZyBhYm91dCB0aGUgcGhpbG9zb3BoZXIgYXMgdGhleSB3ZW50IGF3YXksIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHZlcmlseSwgaWYgSSB3ZXJlIG5vdCBBbGV4YW5kZXIsIEkgd291bGQgYmUgRGlvZ2VuZXMuPC9xPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93LCB3aXNoaW5nIHRvIGNvbnN1bHQgdGhlIGdvZCBjb25jZXJuaW5nIHRoZSBleHBlZGl0aW9uIGFnYWluc3QgQXNpYSwgaGUgd2VudCB0byBEZWxwaGk7IGFuZCBzaW5jZSBoZSBjaGFuY2VkIHRvIGNvbWUgb24gb25lIG9mIHRoZSBpbmF1c3BpY2lvdXMgZGF5cywgd2hlbiBpdCBpcyBub3QgbGF3ZnVsIHRvIGRlbGl2ZXIgb3JhY2xlcywgaW4gdGhlIGZpcnN0IHBsYWNlIGhlIHNlbnQgYSBzdW1tb25zIHRvIHRoZSBwcm9waGV0ZXNzLiBBbmQgd2hlbiBzaGUgcmVmdXNlZCB0byBwZXJmb3JtIGhlciBvZmZpY2UgYW5kIGNpdGVkIHRoZSBsYXcgaW4gaGVyIGV4Y3VzZSwgaGUgd2VudCB1cCBoaW1zZWxmIGFuZCB0cmllZCB0byBkcmFnIGhlciB0byB0aGUgdGVtcGxlLCB3aGVyZXVwb24sIGFzIGlmIG92ZXJjb21lIGJ5IGhpcyBhcmRvdXIsIHNoZSBzYWlkOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IGFydCBpbnZpbmNpYmxlLCBteSBzb24hPC9xPiBPbiBoZWFyaW5nIHRoaXMsIEFsZXhhbmRlciBzYWlkIGhlIGRlc2lyZWQgbm8gZnVydGhlciBwcm9waGVjeSwgYnV0IGhhZCBmcm9tIGhlciB0aGUgb3JhY2xlIHdoaWNoIGhlIHdhbnRlZC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIHdpc2hpbmcgdG8gY29uc3VsdCB0aGUgZ29kIGNvbmNlcm5pbmcgdGhlIGV4cGVkaXRpb24gYWdhaW5zdCBBc2lhLCBoZSB3ZW50IHRvIERlbHBoaTsgYW5kIHNpbmNlIGhlIGNoYW5jZWQgdG8gY29tZSBvbiBvbmUgb2YgdGhlIGluYXVzcGljaW91cyBkYXlzLCB3aGVuIGl0IGlzIG5vdCBsYXdmdWwgdG8gZGVsaXZlciBvcmFjbGVzLCBpbiB0aGUgZmlyc3QgcGxhY2UgaGUgc2VudCBhIHN1bW1vbnMgdG8gdGhlIHByb3BoZXRlc3MuIEFuZCB3aGVuIHNoZSByZWZ1c2VkIHRvIHBlcmZvcm0gaGVyIG9mZmljZSBhbmQgY2l0ZWQgdGhlIGxhdyBpbiBoZXIgZXhjdXNlLCBoZSB3ZW50IHVwIGhpbXNlbGYgYW5kIHRyaWVkIHRvIGRyYWcgaGVyIHRvIHRoZSB0ZW1wbGUsIHdoZXJldXBvbiwgYXMgaWYgb3ZlcmNvbWUgYnkgaGlzIGFyZG91ciwgc2hlIHNhaWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBhcnQgaW52aW5jaWJsZSwgbXkgc29uITwvcT4gT24gaGVhcmluZyB0aGlzLCBBbGV4YW5kZXIgc2FpZCBoZSBkZXNpcmVkIG5vIGZ1cnRoZXIgcHJvcGhlY3ksIGJ1dCBoYWQgZnJvbSBoZXIgdGhlIG9yYWNsZSB3aGljaCBoZSB3YW50ZWQuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdoZW4gaGUgc2V0IG91dCB1cG9uIGhpcyBleHBlZGl0aW9uLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIGVhcmx5IHNwcmluZyBvZiAzMzQgQi5DLjwvbm90ZT4gaXQgYXBwZWFycyB0aGF0IHRoZXJlIHdlcmUgbWFueSBzaWducyBmcm9tIGhlYXZlbiwgYW5kLCBhbW9uZyB0aGVtLCB0aGUgaW1hZ2Ugb2YgT3JwaGV1cyBhdCBMZWliZXRocmEgKGl0IHdhcyBtYWRlIG9mIGN5cHJlc3Mtd29vZCkgc3dlYXRlZCBwcm9mdXNlbHkgYXQgYWJvdXQgdGhhdCB0aW1lLiBNb3N0IHBlb3BsZSBmZWFyZWQgdGhlIHNpZ24sIGJ1dCBBcmlzdGFuZGVyIGJhZGUgQWxleGFuZGVyIGJlIG9mIGdvb2QgY2hlZXIsIGFzc3VyZWQgdGhhdCBoZSB3YXMgdG8gcGVyZm9ybSBkZWVkcyB3b3J0aHkgb2Ygc29uZyBhbmQgc3RvcnksIHdoaWNoIHdvdWxkIGNvc3QgcG9ldHMgYW5kIG11c2ljaWFucyBtdWNoIHRvaWwgYW5kIHN3ZWF0IHRvIGNlbGVicmF0ZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMS4xMS4yIj5BcnJpYW4sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGkuIDExLCAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIGhlIHNldCBvdXQgdXBvbiBoaXMgZXhwZWRpdGlvbiwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIGVhcmx5IHNwcmluZyBvZiAzMzQgQi5DLjwvbm90ZT4gaXQgYXBwZWFycyB0aGF0IHRoZXJlIHdlcmUgbWFueSBzaWducyBmcm9tIGhlYXZlbiwgYW5kLCBhbW9uZyB0aGVtLCB0aGUgaW1hZ2Ugb2YgT3JwaGV1cyBhdCBMZWliZXRocmEgKGl0IHdhcyBtYWRlIG9mIGN5cHJlc3Mtd29vZCkgc3dlYXRlZCBwcm9mdXNlbHkgYXQgYWJvdXQgdGhhdCB0aW1lLiBNb3N0IHBlb3BsZSBmZWFyZWQgdGhlIHNpZ24sIGJ1dCBBcmlzdGFuZGVyIGJhZGUgQWxleGFuZGVyIGJlIG9mIGdvb2QgY2hlZXIsIGFzc3VyZWQgdGhhdCBoZSB3YXMgdG8gcGVyZm9ybSBkZWVkcyB3b3J0aHkgb2Ygc29uZyBhbmQgc3RvcnksIHdoaWNoIHdvdWxkIGNvc3QgcG9ldHMgYW5kIG11c2ljaWFucyBtdWNoIHRvaWwgYW5kIHN3ZWF0IHRvIGNlbGVicmF0ZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuMTEuMiI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDExLCAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAxLjExLjIiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiAxMSwgMi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaS4gMTEsIDIuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgdG8gdGhlIG51bWJlciBvZiBoaXMgZm9yY2VzLCB0aG9zZSB3aG8gcHV0IGl0IGF0IHRoZSBzbWFsbGVzdCBmaWd1cmUgbWVudGlvbiB0aGlydHkgdGhvdXNhbmQgZm9vdCBhbmQgZm91ciB0aG91c2FuZCBob3JzZTsgdGhvc2Ugd2hvIHB1dCBpdCBhdCB0aGUgaGlnaGVzdCwgZm9ydHktdGhyZWUgdGhvdXNhbmQgZm9vdCBhbmQgZml2ZSB0aG91c2FuZCBob3JzZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3QgbXVjaCBtb3JlIHRoYW4gdGhpcnR5IHRob3VzYW5kIGZvb3QsIGluY2x1ZGluZyBsaWdodC1hcm1lZCB0cm9vcHMgYW5kIGFyY2hlcnMsIGFuZCBvdmVyIGZpdmUgdGhvdXNhbmQgaG9yc2U8L3E+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMS4xMS4zIj5BcnJpYW4sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGkuIDExLCAzPC9iaWJsPikuPC9ub3RlPiBUbyBwcm92aXNpb24gdGhlc2UgZm9yY2VzLCBBcmlzdG9idWx1cyBzYXlzIGhlIGhhZCBub3QgbW9yZSB0aGFuIHNldmVudHkgdGFsZW50czsgRHVyaXMgc3BlYWtzIG9mIG1haW50ZW5hbmNlIGZvciBvbmx5IHRoaXJ0eSBkYXlzOyBhbmQgT25lc2ljcml0dXMgc2F5cyBoZSBvd2VkIHR3byBodW5kcmVkIHRhbGVudHMgYmVzaWRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFsdGhvdWdoIGhlIHNldCBvdXQgd2l0aCBzdWNoIG1lYWdyZSBhbmQgbmFycm93IHJlc291cmNlcywgaGUgd291bGQgbm90IHNldCBmb290IHVwb24gaGlzIHNoaXAgdW50aWwgaGUgaGFkIGVucXVpcmVkIGludG8gdGhlIGNpcmN1bXN0YW5jZXMgb2YgaGlzIGNvbXBhbmlvbnMgYW5kIGFsbG90dGVkIHRvIG9uZSBhIGZhcm0sIHRvIGFub3RoZXIgYSB2aWxsYWdlLCBhbmQgdG8gYW5vdGhlciB0aGUgcmV2ZW51ZSBmcm9tIHNvbWUgaGFtbGV0IG9yIGhhcmJvdXIuIEFuZCB3aGVuIGF0IGxhc3QgbmVhcmx5IGFsbCBvZiB0aGUgY3Jvd24gcHJvcGVydHkgaGFkIGJlZW4gZXhwZW5kZWQgb3IgYWxsb3R0ZWQsIFBlcmRpY2NhcyBzYWlkIHRvIGhpbTogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGZvciB0aHlzZWxmLCBPIGtpbmcsIHdoYXQgYXJ0IHRob3UgbGVhdmluZz88L3E+IEFuZCB3aGVuIHRoZSBraW5nIGFuc3dlcmVkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IGhvcGVzLDwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluIHRoZXNlLCB0aGVuLDwvcT4gc2FpZCBQZXJkaWNjYXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2UgYWxzbyB3aWxsIHNoYXJlIHdobyBtYWtlIHRoZSBleHBlZGl0aW9uIHdpdGggdGhlZS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSBkZWNsaW5lZCB0aGUgcG9zc2Vzc2lvbnMgd2hpY2ggaGFkIGJlZW4gYWxsb3R0ZWQgdG8gaGltLCBhbmQgc29tZSBvZiB0aGUgb3RoZXIgZnJpZW5kcyBvZiBBbGV4YW5kZXIgZGlkIGxpa2V3aXNlLiBCdXQgdXBvbiB0aG9zZSB3aG8gd2FudGVkIGFuZCB3b3VsZCBhY2NlcHQgaGlzIGZhdm91cnMgQWxleGFuZGVyIGJlc3Rvd2VkIHRoZW0gcmVhZGlseSwgYW5kIG1vc3Qgb2Ygd2hhdCBoZSBwb3NzZXNzZWQgaW4gTWFjZWRvbmlhIHdhcyB1c2VkIHVwIGluIHRoZXNlIGRpc3RyaWJ1dGlvbnMuIFN1Y2ggd2FzIHRoZSBhcmRvdXIgYW5kIHN1Y2ggdGhlIGVxdWlwbWVudCB3aXRoIHdoaWNoIGhlIGNyb3NzZWQgdGhlIEhlbGxlc3BvbnQuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgdG8gdGhlIG51bWJlciBvZiBoaXMgZm9yY2VzLCB0aG9zZSB3aG8gcHV0IGl0IGF0IHRoZSBzbWFsbGVzdCBmaWd1cmUgbWVudGlvbiB0aGlydHkgdGhvdXNhbmQgZm9vdCBhbmQgZm91ciB0aG91c2FuZCBob3JzZTsgdGhvc2Ugd2hvIHB1dCBpdCBhdCB0aGUgaGlnaGVzdCwgZm9ydHktdGhyZWUgdGhvdXNhbmQgZm9vdCBhbmQgZml2ZSB0aG91c2FuZCBob3JzZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm90IG11Y2ggbW9yZSB0aGFuIHRoaXJ0eSB0aG91c2FuZCBmb290LCBpbmNsdWRpbmcgbGlnaHQtYXJtZWQgdHJvb3BzIGFuZCBhcmNoZXJzLCBhbmQgb3ZlciBmaXZlIHRob3VzYW5kIGhvcnNlPC9xPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMS4xMS4zIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaS4gMTEsIDM8L2JpYmw+KS48L25vdGU+IFRvIHByb3Zpc2lvbiB0aGVzZSBmb3JjZXMsIEFyaXN0b2J1bHVzIHNheXMgaGUgaGFkIG5vdCBtb3JlIHRoYW4gc2V2ZW50eSB0YWxlbnRzOyBEdXJpcyBzcGVha3Mgb2YgbWFpbnRlbmFuY2UgZm9yIG9ubHkgdGhpcnR5IGRheXM7IGFuZCBPbmVzaWNyaXR1cyBzYXlzIGhlIG93ZWQgdHdvIGh1bmRyZWQgdGFsZW50cyBiZXNpZGVzLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm90IG11Y2ggbW9yZSB0aGFuIHRoaXJ0eSB0aG91c2FuZCBmb290LCBpbmNsdWRpbmcgbGlnaHQtYXJtZWQgdHJvb3BzIGFuZCBhcmNoZXJzLCBhbmQgb3ZlciBmaXZlIHRob3VzYW5kIGhvcnNlPC9xPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMS4xMS4zIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaS4gMTEsIDM8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDExLCAzPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCBoZSBzZXQgb3V0IHdpdGggc3VjaCBtZWFncmUgYW5kIG5hcnJvdyByZXNvdXJjZXMsIGhlIHdvdWxkIG5vdCBzZXQgZm9vdCB1cG9uIGhpcyBzaGlwIHVudGlsIGhlIGhhZCBlbnF1aXJlZCBpbnRvIHRoZSBjaXJjdW1zdGFuY2VzIG9mIGhpcyBjb21wYW5pb25zIGFuZCBhbGxvdHRlZCB0byBvbmUgYSBmYXJtLCB0byBhbm90aGVyIGEgdmlsbGFnZSwgYW5kIHRvIGFub3RoZXIgdGhlIHJldmVudWUgZnJvbSBzb21lIGhhbWxldCBvciBoYXJib3VyLiBBbmQgd2hlbiBhdCBsYXN0IG5lYXJseSBhbGwgb2YgdGhlIGNyb3duIHByb3BlcnR5IGhhZCBiZWVuIGV4cGVuZGVkIG9yIGFsbG90dGVkLCBQZXJkaWNjYXMgc2FpZCB0byBoaW06IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGZvciB0aHlzZWxmLCBPIGtpbmcsIHdoYXQgYXJ0IHRob3UgbGVhdmluZz88L3E+IEFuZCB3aGVuIHRoZSBraW5nIGFuc3dlcmVkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgaG9wZXMsPC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiB0aGVzZSwgdGhlbiw8L3E+IHNhaWQgUGVyZGljY2FzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2UgYWxzbyB3aWxsIHNoYXJlIHdobyBtYWtlIHRoZSBleHBlZGl0aW9uIHdpdGggdGhlZS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgZGVjbGluZWQgdGhlIHBvc3Nlc3Npb25zIHdoaWNoIGhhZCBiZWVuIGFsbG90dGVkIHRvIGhpbSwgYW5kIHNvbWUgb2YgdGhlIG90aGVyIGZyaWVuZHMgb2YgQWxleGFuZGVyIGRpZCBsaWtld2lzZS4gQnV0IHVwb24gdGhvc2Ugd2hvIHdhbnRlZCBhbmQgd291bGQgYWNjZXB0IGhpcyBmYXZvdXJzIEFsZXhhbmRlciBiZXN0b3dlZCB0aGVtIHJlYWRpbHksIGFuZCBtb3N0IG9mIHdoYXQgaGUgcG9zc2Vzc2VkIGluIE1hY2Vkb25pYSB3YXMgdXNlZCB1cCBpbiB0aGVzZSBkaXN0cmlidXRpb25zLiBTdWNoIHdhcyB0aGUgYXJkb3VyIGFuZCBzdWNoIHRoZSBlcXVpcG1lbnQgd2l0aCB3aGljaCBoZSBjcm9zc2VkIHRoZSBIZWxsZXNwb250LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGdvaW5nIHVwIHRvIElsaXVtLCBoZSBzYWNyaWZpY2VkIHRvIEF0aGVuYSBhbmQgcG91cmVkIGxpYmF0aW9ucyB0byB0aGUgaGVyb2VzLiBGdXJ0aGVybW9yZSwgdGhlIGdyYXZlc3RvbmUgb2YgQWNoaWxsZXMgaGUgYW5vaW50ZWQgd2l0aCBvaWwsIHJhbiBhIHJhY2UgYnkgaXQgd2l0aCBoaXMgY29tcGFuaW9ucywgbmFrZWQsIGFzIGlzIHRoZSBjdXN0b20sIGFuZCB0aGVuIGNyb3duZWQgaXQgd2l0aCBnYXJsYW5kcywgcHJvbm91bmNpbmcgdGhlIGhlcm8gaGFwcHkgaW4gaGF2aW5nLCB3aGlsZSBoZSBsaXZlZCwgYSBmYWl0aGZ1bCBmcmllbmQsIGFuZCBhZnRlciBkZWF0aCwgYSBncmVhdCBoZXJhbGQgb2YgaGlzIGZhbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHdhcyBnb2luZyBhYm91dCBhbmQgdmlld2luZyB0aGUgc2lnaHRzIG9mIHRoZSBjaXR5LCBzb21lb25lIGFza2VkIGhpbSBpZiBoZSB3aXNoZWQgdG8gc2VlIHRoZSBseXJlIG9mIFBhcmlzLiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IgdGhhdCBseXJlLDwvcT4gc2FpZCBBbGV4YW5kZXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBjYXJlIHZlcnkgbGl0dGxlOyBidXQgSSB3b3VsZCBnbGFkbHkgc2VlIHRoYXQgb2YgQWNoaWxsZXMsIHRvIHdoaWNoIGhlIHVzZWQgdG8gc2luZyB0aGUgZ2xvcmlvdXMgZGVlZHMgb2YgYnJhdmUgbWVuLjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gOS4xODUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgaXguIDE4NS0xOTE8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGdvaW5nIHVwIHRvIElsaXVtLCBoZSBzYWNyaWZpY2VkIHRvIEF0aGVuYSBhbmQgcG91cmVkIGxpYmF0aW9ucyB0byB0aGUgaGVyb2VzLiBGdXJ0aGVybW9yZSwgdGhlIGdyYXZlc3RvbmUgb2YgQWNoaWxsZXMgaGUgYW5vaW50ZWQgd2l0aCBvaWwsIHJhbiBhIHJhY2UgYnkgaXQgd2l0aCBoaXMgY29tcGFuaW9ucywgbmFrZWQsIGFzIGlzIHRoZSBjdXN0b20sIGFuZCB0aGVuIGNyb3duZWQgaXQgd2l0aCBnYXJsYW5kcywgcHJvbm91bmNpbmcgdGhlIGhlcm8gaGFwcHkgaW4gaGF2aW5nLCB3aGlsZSBoZSBsaXZlZCwgYSBmYWl0aGZ1bCBmcmllbmQsIGFuZCBhZnRlciBkZWF0aCwgYSBncmVhdCBoZXJhbGQgb2YgaGlzIGZhbWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHdhcyBnb2luZyBhYm91dCBhbmQgdmlld2luZyB0aGUgc2lnaHRzIG9mIHRoZSBjaXR5LCBzb21lb25lIGFza2VkIGhpbSBpZiBoZSB3aXNoZWQgdG8gc2VlIHRoZSBseXJlIG9mIFBhcmlzLiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciB0aGF0IGx5cmUsPC9xPiBzYWlkIEFsZXhhbmRlciwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgY2FyZSB2ZXJ5IGxpdHRsZTsgYnV0IEkgd291bGQgZ2xhZGx5IHNlZSB0aGF0IG9mIEFjaGlsbGVzLCB0byB3aGljaCBoZSB1c2VkIHRvIHNpbmcgdGhlIGdsb3Jpb3VzIGRlZWRzIG9mIGJyYXZlIG1lbi48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiA5LjE4NSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGl4LiAxODUtMTkxPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDkuMTg1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgaXguIDE4NS0xOTE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGl4LiAxODUtMTkxPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIHRoZSBnZW5lcmFscyBvZiBEYXJlaXVzIGhhZCBhc3NlbWJsZWQgYSBsYXJnZSBmb3JjZSBhbmQgc2V0IGl0IGluIGFycmF5IGF0IHRoZSBjcm9zc2luZyBvZiB0aGUgcml2ZXIgR3JhbmljdXMsIHNvIHRoYXQgaXQgd2FzIHByYWN0aWNhbGx5IG5lY2Vzc2FyeSB0byBmaWdodCwgYXMgaXQgd2VyZSBhdCB0aGUgZ2F0ZXMgb2YgQXNpYSwgZm9yIGVudHJhbmNlIGFuZCBkb21pbmlvbiB0aGVyZS4gQnV0IG1vc3Qgb2YgdGhlIE1hY2Vkb25pYW4gb2ZmaWNlcnMgd2VyZSBhZnJhaWQgb2YgdGhlIGRlcHRoIG9mIHRoZSByaXZlciwgYW5kIG9mIHRoZSByb3VnaG5lc3MgYW5kIHVuZXZlbm5lc3Mgb2YgdGhlIGZhcnRoZXIgYmFua3MsIHVwIHdoaWNoIHRoZXkgd291bGQgaGF2ZSB0byBjbGltYiB3aGlsZSBmaWdodGluZy4gU29tZSwgdG9vLCB0aG91Z2h0IHRoZXkgb3VnaHQgdG8gb2JzZXJ2ZSBjYXJlZnVsbHkgdGhlIGN1c3RvbWFyeSBwcmFjdGljZSBpbiByZWdhcmQgdG8gdGhlIG1vbnRoIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPihmb3IgaW4gdGhlIG1vbnRoIG9mIERhZXNpdXMgdGhlIGtpbmdzIG9mIE1hY2Vkb25pYSB3ZXJlIG5vdCB3b250IHRvIHRha2UgdGhlIGZpZWxkIHdpdGggYW4gYXJteSkuIFRoaXMgb2JqZWN0aW9uIEFsZXhhbmRlciByZW1vdmVkIGJ5IGJpZGRpbmcgdGhlbSBjYWxsIHRoZSBtb250aCBhIHNlY29uZCBBcnRlbWlzaXVzOyBhbmQgd2hlbiBQYXJtZW5pbywgb24gdGhlIGdyb3VuZCB0aGF0IGl0IHdhcyB0b28gbGF0ZSBpbiB0aGUgZGF5LCBvYmplY3RlZCB0byB0aGVpciByaXNraW5nIHRoZSBwYXNzYWdlLCBoZSBkZWNsYXJlZCB0aGF0IHRoZSBIZWxsZXNwb250IHdvdWxkIGJsdXNoIGZvciBzaGFtZSwgaWYsIGFmdGVyIGhhdmluZyBjcm9zc2VkIHRoYXQgc3RyYWl0LCBoZSBzaG91bGQgYmUgYWZyYWlkIG9mIHRoZSBHcmFuaWN1cywgYW5kIHBsdW5nZWQgaW50byB0aGUgc3RyZWFtIHdpdGggdGhpcnRlZW4gdHJvb3BzIG9mIGhvcnNlbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc2luY2UgaGUgd2FzIGNoYXJnaW5nIGFnYWluc3QgaG9zdGlsZSBtaXNzaWxlcyBhbmQgcHJlY2lwaXRvdXMgcG9zaXRpb25zIGNvdmVyZWQgd2l0aCBpbmZhbnRyeSBhbmQgY2F2YWxyeSwgYW5kIHRocm91Z2ggYSBzdHJlYW0gdGhhdCBzd2VwdCBtZW4gb2ZmIHRoZWlyIGZlZXQgYW5kIHN1cmdlZCBhYm91dCB0aGVtLCBoZSBzZWVtZWQgdG8gYmUgYWN0aW5nIGxpa2UgYSBmcmVuemllZCBhbmQgZm9vbGlzaCBjb21tYW5kZXIgcmF0aGVyIHRoYW4gYSB3aXNlIG9uZS4gSG93ZXZlciwgaGUgcGVyc2lzdGVkIGluIGhpcyBhdHRlbXB0IHRvIGNyb3NzLCBnYWluZWQgdGhlIG9wcG9zaXRlIGJhbmtzIHdpdGggZGlmZmljdWx0eSBhbmQgbXVjaCBhZG8sIHRob3VnaCB0aGV5IHdlcmUgbW9pc3QgYW5kIHNsaXBwZXJ5IHdpdGggbXVkLCBhbmQgd2FzIGF0IG9uY2UgY29tcGVsbGVkIHRvIGZpZ2h0IHBlbGwtbWVsbCBhbmQgZW5nYWdlIGhpcyBhc3NhaWxhbnRzIG1hbiBieSBtYW4sIGJlZm9yZSBoaXMgdHJvb3BzIHdobyB3ZXJlIGNyb3NzaW5nIGNvdWxkIGZvcm0gaW50byBhbnkgb3JkZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZW5lbXkgcHJlc3NlZCB1cG9uIHRoZW0gd2l0aCBsb3VkIHNob3V0cywgYW5kIG1hdGNoaW5nIGhvcnNlIHdpdGggaG9yc2UsIHBsaWVkIHRoZWlyIGxhbmNlcywgYW5kIHRoZWlyIHN3b3JkcyB3aGVuIHRoZWlyIGxhbmNlcyB3ZXJlIHNoYXR0ZXJlZC4gTWFueSBydXNoZWQgdXBvbiBBbGV4YW5kZXIsIGZvciBoZSB3YXMgY29uc3BpY3VvdXMgYnkgaGlzIGJ1Y2tsZXIgYW5kIGJ5IGhpcyBoZWxtZXQncyBjcmVzdCwgb24gZWl0aGVyIHNpZGUgb2Ygd2hpY2ggd2FzIGZpeGVkIGEgcGx1bWUgb2Ygd29uZGVyZnVsIHNpemUgYW5kIHdoaXRlbmVzcy4gQnV0IGFsdGhvdWdoIGEgamF2ZWxpbiBwaWVyY2VkIHRoZSBqb2ludCBvZiBoaXMgYnJlYXN0cGxhdGUsIGhlIHdhcyBub3Qgd291bmRlZDsgYW5kIHdoZW4gUmhvZXNhY2VzIGFuZCBTcGl0aHJpZGF0ZXMsIHR3byBQZXJzaWFuIGNvbW1hbmRlcnMsIG1hZGUgYXQgaGltIHRvZ2V0aGVyLCBoZSBhdm9pZGVkIHRoZSBvbmUsIGFuZCBzbW90ZSBSaG9lc2FjZXMsIHdobyB3b3JlIGEgYnJlYXN0cGxhdGUsIHdpdGggaGlzIHNwZWFyOyBhbmQgd2hlbiB0aGlzIHdlYXBvbiBzbmFwcGVkIGluIHR3byB3aXRoIHRoZSBibG93LCBoZSB0b29rIHRvIGhpcyBzd29yZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgd2hpbGUgaGUgd2FzIHRodXMgZW5nYWdlZCB3aXRoIFJob2VzYWNlcywgU3BpdGhyaWRhdGVzIHJvZGUgdXAgZnJvbSBvbmUgc2lkZSwgcmFpc2VkIGhpbXNlbGYgdXAgb24gaGlzIGhvcnNlLCBhbmQgd2l0aCBhbGwgaGlzIG1pZ2h0IGNhbWUgZG93biB3aXRoIGEgYmFyYmFyaWFuIGJhdHRsZS1heGUgdXBvbiBBbGV4YW5kZXIncyBoZWFkLiBBbGV4YW5kZXIncyBjcmVzdCB3YXMgYnJva2VuIG9mZiB0b2dldGhlciB3aXRoIG9uZSBvZiBpdHMgcGx1bWVzLCBhbmQgaGlzIGhlbG1ldCBjb3VsZCBiYXJlbHkgYW5kIHdpdGggZGlmZmljdWx0eSByZXNpc3QgdGhlIGJsb3csIHNvIHRoYXQgdGhlIGVkZ2Ugb2YgdGhlIGJhdHRsZS1heGUgdG91Y2hlZCB0aGUgdG9wbW9zdCBoYWlyIG9mIGhpcyBoZWFkLiBCdXQgd2hpbGUgU3BpdGhyaWRhdGVzIHdhcyByYWlzaW5nIGhpcyBhcm0gYWdhaW4gZm9yIGFub3RoZXIgc3Ryb2tlLCBDbGVpdHVzLCA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CbGFjayBDbGVpdHVzLDwvcT4gZ290IHRoZSBzdGFydCBvZiBoaW0gYW5kIHJhbiBoaW0gdGhyb3VnaCB0aGUgYm9keSB3aXRoIGhpcyBzcGVhci4gQXQgdGhlIHNhbWUgdGltZSBSaG9lc2FjZXMgYWxzbyBmZWxsLCBzbWl0dGVuIGJ5IEFsZXhhbmRlcidzIHN3b3JkLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIHRoZSBnZW5lcmFscyBvZiBEYXJlaXVzIGhhZCBhc3NlbWJsZWQgYSBsYXJnZSBmb3JjZSBhbmQgc2V0IGl0IGluIGFycmF5IGF0IHRoZSBjcm9zc2luZyBvZiB0aGUgcml2ZXIgR3JhbmljdXMsIHNvIHRoYXQgaXQgd2FzIHByYWN0aWNhbGx5IG5lY2Vzc2FyeSB0byBmaWdodCwgYXMgaXQgd2VyZSBhdCB0aGUgZ2F0ZXMgb2YgQXNpYSwgZm9yIGVudHJhbmNlIGFuZCBkb21pbmlvbiB0aGVyZS4gQnV0IG1vc3Qgb2YgdGhlIE1hY2Vkb25pYW4gb2ZmaWNlcnMgd2VyZSBhZnJhaWQgb2YgdGhlIGRlcHRoIG9mIHRoZSByaXZlciwgYW5kIG9mIHRoZSByb3VnaG5lc3MgYW5kIHVuZXZlbm5lc3Mgb2YgdGhlIGZhcnRoZXIgYmFua3MsIHVwIHdoaWNoIHRoZXkgd291bGQgaGF2ZSB0byBjbGltYiB3aGlsZSBmaWdodGluZy4gU29tZSwgdG9vLCB0aG91Z2h0IHRoZXkgb3VnaHQgdG8gb2JzZXJ2ZSBjYXJlZnVsbHkgdGhlIGN1c3RvbWFyeSBwcmFjdGljZSBpbiByZWdhcmQgdG8gdGhlIG1vbnRoIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPihmb3IgaW4gdGhlIG1vbnRoIG9mIERhZXNpdXMgdGhlIGtpbmdzIG9mIE1hY2Vkb25pYSB3ZXJlIG5vdCB3b250IHRvIHRha2UgdGhlIGZpZWxkIHdpdGggYW4gYXJteSkuIFRoaXMgb2JqZWN0aW9uIEFsZXhhbmRlciByZW1vdmVkIGJ5IGJpZGRpbmcgdGhlbSBjYWxsIHRoZSBtb250aCBhIHNlY29uZCBBcnRlbWlzaXVzOyBhbmQgd2hlbiBQYXJtZW5pbywgb24gdGhlIGdyb3VuZCB0aGF0IGl0IHdhcyB0b28gbGF0ZSBpbiB0aGUgZGF5LCBvYmplY3RlZCB0byB0aGVpciByaXNraW5nIHRoZSBwYXNzYWdlLCBoZSBkZWNsYXJlZCB0aGF0IHRoZSBIZWxsZXNwb250IHdvdWxkIGJsdXNoIGZvciBzaGFtZSwgaWYsIGFmdGVyIGhhdmluZyBjcm9zc2VkIHRoYXQgc3RyYWl0LCBoZSBzaG91bGQgYmUgYWZyYWlkIG9mIHRoZSBHcmFuaWN1cywgYW5kIHBsdW5nZWQgaW50byB0aGUgc3RyZWFtIHdpdGggdGhpcnRlZW4gdHJvb3BzIG9mIGhvcnNlbWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzaW5jZSBoZSB3YXMgY2hhcmdpbmcgYWdhaW5zdCBob3N0aWxlIG1pc3NpbGVzIGFuZCBwcmVjaXBpdG91cyBwb3NpdGlvbnMgY292ZXJlZCB3aXRoIGluZmFudHJ5IGFuZCBjYXZhbHJ5LCBhbmQgdGhyb3VnaCBhIHN0cmVhbSB0aGF0IHN3ZXB0IG1lbiBvZmYgdGhlaXIgZmVldCBhbmQgc3VyZ2VkIGFib3V0IHRoZW0sIGhlIHNlZW1lZCB0byBiZSBhY3RpbmcgbGlrZSBhIGZyZW56aWVkIGFuZCBmb29saXNoIGNvbW1hbmRlciByYXRoZXIgdGhhbiBhIHdpc2Ugb25lLiBIb3dldmVyLCBoZSBwZXJzaXN0ZWQgaW4gaGlzIGF0dGVtcHQgdG8gY3Jvc3MsIGdhaW5lZCB0aGUgb3Bwb3NpdGUgYmFua3Mgd2l0aCBkaWZmaWN1bHR5IGFuZCBtdWNoIGFkbywgdGhvdWdoIHRoZXkgd2VyZSBtb2lzdCBhbmQgc2xpcHBlcnkgd2l0aCBtdWQsIGFuZCB3YXMgYXQgb25jZSBjb21wZWxsZWQgdG8gZmlnaHQgcGVsbC1tZWxsIGFuZCBlbmdhZ2UgaGlzIGFzc2FpbGFudHMgbWFuIGJ5IG1hbiwgYmVmb3JlIGhpcyB0cm9vcHMgd2hvIHdlcmUgY3Jvc3NpbmcgY291bGQgZm9ybSBpbnRvIGFueSBvcmRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZW5lbXkgcHJlc3NlZCB1cG9uIHRoZW0gd2l0aCBsb3VkIHNob3V0cywgYW5kIG1hdGNoaW5nIGhvcnNlIHdpdGggaG9yc2UsIHBsaWVkIHRoZWlyIGxhbmNlcywgYW5kIHRoZWlyIHN3b3JkcyB3aGVuIHRoZWlyIGxhbmNlcyB3ZXJlIHNoYXR0ZXJlZC4gTWFueSBydXNoZWQgdXBvbiBBbGV4YW5kZXIsIGZvciBoZSB3YXMgY29uc3BpY3VvdXMgYnkgaGlzIGJ1Y2tsZXIgYW5kIGJ5IGhpcyBoZWxtZXQncyBjcmVzdCwgb24gZWl0aGVyIHNpZGUgb2Ygd2hpY2ggd2FzIGZpeGVkIGEgcGx1bWUgb2Ygd29uZGVyZnVsIHNpemUgYW5kIHdoaXRlbmVzcy4gQnV0IGFsdGhvdWdoIGEgamF2ZWxpbiBwaWVyY2VkIHRoZSBqb2ludCBvZiBoaXMgYnJlYXN0cGxhdGUsIGhlIHdhcyBub3Qgd291bmRlZDsgYW5kIHdoZW4gUmhvZXNhY2VzIGFuZCBTcGl0aHJpZGF0ZXMsIHR3byBQZXJzaWFuIGNvbW1hbmRlcnMsIG1hZGUgYXQgaGltIHRvZ2V0aGVyLCBoZSBhdm9pZGVkIHRoZSBvbmUsIGFuZCBzbW90ZSBSaG9lc2FjZXMsIHdobyB3b3JlIGEgYnJlYXN0cGxhdGUsIHdpdGggaGlzIHNwZWFyOyBhbmQgd2hlbiB0aGlzIHdlYXBvbiBzbmFwcGVkIGluIHR3byB3aXRoIHRoZSBibG93LCBoZSB0b29rIHRvIGhpcyBzd29yZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoaWxlIGhlIHdhcyB0aHVzIGVuZ2FnZWQgd2l0aCBSaG9lc2FjZXMsIFNwaXRocmlkYXRlcyByb2RlIHVwIGZyb20gb25lIHNpZGUsIHJhaXNlZCBoaW1zZWxmIHVwIG9uIGhpcyBob3JzZSwgYW5kIHdpdGggYWxsIGhpcyBtaWdodCBjYW1lIGRvd24gd2l0aCBhIGJhcmJhcmlhbiBiYXR0bGUtYXhlIHVwb24gQWxleGFuZGVyJ3MgaGVhZC4gQWxleGFuZGVyJ3MgY3Jlc3Qgd2FzIGJyb2tlbiBvZmYgdG9nZXRoZXIgd2l0aCBvbmUgb2YgaXRzIHBsdW1lcywgYW5kIGhpcyBoZWxtZXQgY291bGQgYmFyZWx5IGFuZCB3aXRoIGRpZmZpY3VsdHkgcmVzaXN0IHRoZSBibG93LCBzbyB0aGF0IHRoZSBlZGdlIG9mIHRoZSBiYXR0bGUtYXhlIHRvdWNoZWQgdGhlIHRvcG1vc3QgaGFpciBvZiBoaXMgaGVhZC4gQnV0IHdoaWxlIFNwaXRocmlkYXRlcyB3YXMgcmFpc2luZyBoaXMgYXJtIGFnYWluIGZvciBhbm90aGVyIHN0cm9rZSwgQ2xlaXR1cywgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CbGFjayBDbGVpdHVzLDwvcT4gZ290IHRoZSBzdGFydCBvZiBoaW0gYW5kIHJhbiBoaW0gdGhyb3VnaCB0aGUgYm9keSB3aXRoIGhpcyBzcGVhci4gQXQgdGhlIHNhbWUgdGltZSBSaG9lc2FjZXMgYWxzbyBmZWxsLCBzbWl0dGVuIGJ5IEFsZXhhbmRlcidzIHN3b3JkLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIEFsZXhhbmRlcidzIGNhdmFscnkgd2VyZSBtYWtpbmcgc3VjaCBhIGRhbmdlcm91cyBhbmQgZnVyaW91cyBmaWdodCwgdGhlIE1hY2Vkb25pYW4gcGhhbGFueCBjcm9zc2VkIHRoZSByaXZlciBhbmQgdGhlIGluZmFudHJ5IGZvcmNlcyBvbiBib3RoIHNpZGVzIGVuZ2FnZWQuIFRoZSBlbmVteSwgaG93ZXZlciwgZGlkIG5vdCByZXNpc3Qgdmlnb3JvdXNseSwgbm9yIGZvciBhIGxvbmcgdGltZSwgYnV0IGZsZWQgaW4gYSByb3V0LCBhbGwgZXhjZXB0IHRoZSBHcmVlayBtZXJjZW5hcmllcy4gVGhlc2UgbWFkZSBhIHN0YW5kIGF0IGEgY2VydGFpbiBlbWluZW5jZSwgYW5kIGFza2VkIHRoYXQgQWxleGFuZGVyIHNob3VsZCBwcm9taXNlIHRoZW0gcXVhcnRlci4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlLCBpbmZsdWVuY2VkIGJ5IGFuZ2VyIG1vcmUgdGhhbiBieSByZWFzb24sIGNoYXJnZWQgZm9yZW1vc3QgdXBvbiB0aGVtIGFuZCBsb3N0IGhpcyBob3JzZSwgd2hpY2ggd2FzIHNtaXR0ZW4gdGhyb3VnaCB0aGUgcmlicyB3aXRoIGEgc3dvcmQgKGl0IHdhcyBub3QgQnVjZXBoYWxhcywgYnV0IGFub3RoZXIpOyBhbmQgbW9zdCBvZiB0aGUgTWFjZWRvbmlhbnMgd2hvIHdlcmUgc2xhaW4gb3Igd291bmRlZCBmb3VnaHQgb3IgZmVsbCB0aGVyZSwgc2luY2UgdGhleSBjYW1lIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggbWVuIHdobyBrbmV3IGhvdyB0byBmaWdodCBhbmQgd2VyZSBkZXNwZXJhdGUuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIEFsZXhhbmRlcidzIGNhdmFscnkgd2VyZSBtYWtpbmcgc3VjaCBhIGRhbmdlcm91cyBhbmQgZnVyaW91cyBmaWdodCwgdGhlIE1hY2Vkb25pYW4gcGhhbGFueCBjcm9zc2VkIHRoZSByaXZlciBhbmQgdGhlIGluZmFudHJ5IGZvcmNlcyBvbiBib3RoIHNpZGVzIGVuZ2FnZWQuIFRoZSBlbmVteSwgaG93ZXZlciwgZGlkIG5vdCByZXNpc3Qgdmlnb3JvdXNseSwgbm9yIGZvciBhIGxvbmcgdGltZSwgYnV0IGZsZWQgaW4gYSByb3V0LCBhbGwgZXhjZXB0IHRoZSBHcmVlayBtZXJjZW5hcmllcy4gVGhlc2UgbWFkZSBhIHN0YW5kIGF0IGEgY2VydGFpbiBlbWluZW5jZSwgYW5kIGFza2VkIHRoYXQgQWxleGFuZGVyIHNob3VsZCBwcm9taXNlIHRoZW0gcXVhcnRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSwgaW5mbHVlbmNlZCBieSBhbmdlciBtb3JlIHRoYW4gYnkgcmVhc29uLCBjaGFyZ2VkIGZvcmVtb3N0IHVwb24gdGhlbSBhbmQgbG9zdCBoaXMgaG9yc2UsIHdoaWNoIHdhcyBzbWl0dGVuIHRocm91Z2ggdGhlIHJpYnMgd2l0aCBhIHN3b3JkIChpdCB3YXMgbm90IEJ1Y2VwaGFsYXMsIGJ1dCBhbm90aGVyKTsgYW5kIG1vc3Qgb2YgdGhlIE1hY2Vkb25pYW5zIHdobyB3ZXJlIHNsYWluIG9yIHdvdW5kZWQgZm91Z2h0IG9yIGZlbGwgdGhlcmUsIHNpbmNlIHRoZXkgY2FtZSB0byBjbG9zZSBxdWFydGVycyB3aXRoIG1lbiB3aG8ga25ldyBob3cgdG8gZmlnaHQgYW5kIHdlcmUgZGVzcGVyYXRlLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2YgdGhlIEJhcmJhcmlhbnMsIHdlIGFyZSB0b2xkLCB0d2VudHkgdGhvdXNhbmQgZm9vdG1lbiBmZWxsLCBhbmQgdHdlbnR5LWZpdmUgaHVuZHJlZCBob3JzZW1lbi4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RGlvZG9ydXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE3LjIxLjYiIHZhbGlkPSJ5ZXMiPnh2aWkuIDIxLCA2PC9iaWJsPikgc2F5cyB0aGF0IG1vcmUgdGhhbiB0ZW4gdGhvdXNhbmQgUGVyc2lhbiBmb290bWVuIGZlbGwsIGFuZCBub3QgbGVzcyB0aGFuIHR3byB0aG91c2FuZCBob3JzZW1lbjsgd2hpbGUgb3ZlciB0d2VudHkgdGhvdXNhbmQgd2VyZSB0YWtlbiBwcmlzb25lcnMuPC9ub3RlPiBCdXQgb24gQWxleGFuZGVyJ3Mgc2lkZSwgQXJpc3RvYnVsdXMgc2F5cyB0aGVyZSB3ZXJlIHRoaXJ0eS1mb3VyIGRlYWQgaW4gYWxsLCBvZiB3aG9tIG5pbmUgd2VyZSBmb290bWVuLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZXNlLCB0aGVuLCBBbGV4YW5kZXIgb3JkZXJlZCBzdGF0dWVzIHRvIGJlIHNldCB1cCBpbiBicm9uemUsIGFuZCBMeXNpcHB1cyB3cm91Z2h0IHRoZW0uCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gQXJyaWFuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMS4xNi40Ij4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFuYWIuPC90aXRsZT4gaS4gMTYsIDQ8L2JpYmw+KSwgYWJvdXQgdHdlbnR5LWZpdmUgb2YgQWxleGFuZGVyJ3MgY29tcGFuaW9ucywgYSBzZWxlY3QgY29ycHMsIGZlbGwgYXQgdGhlIGZpcnN0IG9uc2V0LCBhbmQgaXQgd2FzIG9mIHRoZXNlIHRoYXQgQWxleGFuZGVyIG9yZGVyZWQgc3RhdHVlcyB0byBiZSBtYWRlIGJ5IEx5c2lwcHVzLjwvbm90ZT4gTW9yZW92ZXIsIGRlc2lyaW5nIHRvIG1ha2UgdGhlIEdyZWVrcyBwYXJ0bmVycyBpbiBoaXMgdmljdG9yeSwgaGUgc2VudCB0byB0aGUgQXRoZW5pYW5zIGluIHBhcnRpY3VsYXIgdGhyZWUgaHVuZHJlZCBvZiB0aGUgY2FwdHVyZWQgc2hpZWxkcywgYW5kIHVwb24gdGhlIHJlc3Qgb2YgdGhlIHNwb2lscyBpbiBnZW5lcmFsIGhlIG9yZGVyZWQgYSBtb3N0IGFtYml0aW91cyBpbnNjcmlwdGlvbiB0byBiZSB3cm91Z2h0OiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbGV4YW5kZXIgdGhlIHNvbiBvZiBQaGlsaXAgYW5kIGFsbCB0aGUgR3JlZWtzIGV4Y2VwdCB0aGUgTGFjZWRhZW1vbmlhbnMgZnJvbSB0aGUgQmFyYmFyaWFucyB3aG8gZHdlbGwgaW4gQXNpYS48L3E+IEJ1dCB0aGUgZHJpbmtpbmcgdmVzc2VscyBhbmQgdGhlIHB1cnBsZSByb2JlcyBhbmQgd2hhdGV2ZXIgdGhpbmdzIG9mIHRoaXMgbmF0dXJlIGhlIHRvb2sgZnJvbSB0aGUgUGVyc2lhbnMsIGFsbCB0aGVzZSwgZXhjZXB0IGEgZmV3LCBoZSBzZW50IHRvIGhpcyBtb3RoZXIuPC9wPgogICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkRpb2RvcnVzICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNy4yMS42IiB2YWxpZD0ieWVzIj54dmlpLiAyMSwgNjwvYmlibD4pIHNheXMgdGhhdCBtb3JlIHRoYW4gdGVuIHRob3VzYW5kIFBlcnNpYW4gZm9vdG1lbiBmZWxsLCBhbmQgbm90IGxlc3MgdGhhbiB0d28gdGhvdXNhbmQgaG9yc2VtZW47IHdoaWxlIG92ZXIgdHdlbnR5IHRob3VzYW5kIHdlcmUgdGFrZW4gcHJpc29uZXJzLjwvbm90ZT4gQnV0IG9uIEFsZXhhbmRlcidzIHNpZGUsIEFyaXN0b2J1bHVzIHNheXMgdGhlcmUgd2VyZSB0aGlydHktZm91ciBkZWFkIGluIGFsbCwgb2Ygd2hvbSBuaW5lIHdlcmUgZm9vdG1lbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNy4yMS42IiB2YWxpZD0ieWVzIj54dmlpLiAyMSwgNjwvYmlibD4pIHNheXMgdGhhdCBtb3JlIHRoYW4gdGVuIHRob3VzYW5kIFBlcnNpYW4gZm9vdG1lbiBmZWxsLCBhbmQgbm90IGxlc3MgdGhhbiB0d28gdGhvdXNhbmQgaG9yc2VtZW47IHdoaWxlIG92ZXIgdHdlbnR5IHRob3VzYW5kIHdlcmUgdGFrZW4gcHJpc29uZXJzLjwvdHJhbnNsYXRpb24+"
translation['16.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZXNlLCB0aGVuLCBBbGV4YW5kZXIgb3JkZXJlZCBzdGF0dWVzIHRvIGJlIHNldCB1cCBpbiBicm9uemUsIGFuZCBMeXNpcHB1cyB3cm91Z2h0IHRoZW0uCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBBcnJpYW4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuMTYuNCI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaS4gMTYsIDQ8L2JpYmw+KSwgYWJvdXQgdHdlbnR5LWZpdmUgb2YgQWxleGFuZGVyJ3MgY29tcGFuaW9ucywgYSBzZWxlY3QgY29ycHMsIGZlbGwgYXQgdGhlIGZpcnN0IG9uc2V0LCBhbmQgaXQgd2FzIG9mIHRoZXNlIHRoYXQgQWxleGFuZGVyIG9yZGVyZWQgc3RhdHVlcyB0byBiZSBtYWRlIGJ5IEx5c2lwcHVzLjwvbm90ZT4gTW9yZW92ZXIsIGRlc2lyaW5nIHRvIG1ha2UgdGhlIEdyZWVrcyBwYXJ0bmVycyBpbiBoaXMgdmljdG9yeSwgaGUgc2VudCB0byB0aGUgQXRoZW5pYW5zIGluIHBhcnRpY3VsYXIgdGhyZWUgaHVuZHJlZCBvZiB0aGUgY2FwdHVyZWQgc2hpZWxkcywgYW5kIHVwb24gdGhlIHJlc3Qgb2YgdGhlIHNwb2lscyBpbiBnZW5lcmFsIGhlIG9yZGVyZWQgYSBtb3N0IGFtYml0aW91cyBpbnNjcmlwdGlvbiB0byBiZSB3cm91Z2h0OiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAxLjE2LjQiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDE2LCA0PC9iaWJsPiksIGFib3V0IHR3ZW50eS1maXZlIG9mIEFsZXhhbmRlcidzIGNvbXBhbmlvbnMsIGEgc2VsZWN0IGNvcnBzLCBmZWxsIGF0IHRoZSBmaXJzdCBvbnNldCwgYW5kIGl0IHdhcyBvZiB0aGVzZSB0aGF0IEFsZXhhbmRlciBvcmRlcmVkIHN0YXR1ZXMgdG8gYmUgbWFkZSBieSBMeXNpcHB1cy48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDE2LCA0PHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbGV4YW5kZXIgdGhlIHNvbiBvZiBQaGlsaXAgYW5kIGFsbCB0aGUgR3JlZWtzIGV4Y2VwdCB0aGUgTGFjZWRhZW1vbmlhbnMgZnJvbSB0aGUgQmFyYmFyaWFucyB3aG8gZHdlbGwgaW4gQXNpYS48L3E+IEJ1dCB0aGUgZHJpbmtpbmcgdmVzc2VscyBhbmQgdGhlIHB1cnBsZSByb2JlcyBhbmQgd2hhdGV2ZXIgdGhpbmdzIG9mIHRoaXMgbmF0dXJlIGhlIHRvb2sgZnJvbSB0aGUgUGVyc2lhbnMsIGFsbCB0aGVzZSwgZXhjZXB0IGEgZmV3LCBoZSBzZW50IHRvIGhpcyBtb3RoZXIuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBjb250ZXN0IGF0IG9uY2UgbWFkZSBhIGdyZWF0IGNoYW5nZSBpbiB0aGUgc2l0dWF0aW9uIHRvIEFsZXhhbmRlcidzIGFkdmFudGFnZSwgc28gdGhhdCBoZSByZWNlaXZlZCB0aGUgc3VibWlzc2lvbiBldmVuIG9mIFNhcmRpcywgdGhlIGJ1bHdhcmsgb2YgdGhlIGJhcmJhcmlhbiBkb21pbmlvbiBvbiB0aGUgc2VhLWNvYXN0LCBhbmQgYWRkZWQgdGhlIHJlc3Qgb2YgdGhlIGNvdW50cnkgdG8gaGlzIGNvbnF1ZXN0cy4gSGFsaWNhcm5hc3N1cyBhbG9uZSB3aXRoc3Rvb2QgaGltLCBhbmQgTWlsZXR1cywgd2hpY2ggY2l0aWVzIGhlIHRvb2sgYnkgc3Rvcm0KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzaWVnZSBhbmQgY2FwdHVyZSBvZiB0aGVzZSBjaXRpZXMgb2NjdXBpZWQgQWxleGFuZGVyIHRpbGwgdGhlIGxhdGUgYXV0dW1uIG9mIDMzNCBCLkMuPC9ub3RlPiBhbmQgc3ViZHVlZCBhbGwgdGhlIHRlcnJpdG9yaWVzIGFib3V0IHRoZW0uIFRoZW4gaGUgd2FzIGluIGRvdWJ0IGFzIHRvIGhpcyBmdXR1cmUgY291cnNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5NYW55IHRpbWVzIGhlIHdhcyBlYWdlciB0byBlbmNvdW50ZXIgRGFyZWl1cyBhbmQgcHV0IHRoZSB3aG9sZSBpc3N1ZSB0byBoYXphcmQsIGFuZCBtYW55IHRpbWVzIGhlIHdvdWxkIG1ha2UgdXAgaGlzIG1pbmQgdG8gcHJhY3RpY2UgaGltc2VsZiBmaXJzdCwgYXMgaXQgd2VyZSwgYW5kIHN0cmVuZ3RoZW4gaGltc2VsZiBieSBhY3F1aXJpbmcgdGhlIHJlZ2lvbnMgYWxvbmcgdGhlIHNlYSB3aXRoIHRoZWlyIHJlc291cmNlcywgYW5kIHRoZW4gdG8gZ28gdXAgYWdhaW5zdCB0aGF0IG1vbmFyY2guIE5vdywgdGhlcmUgaXMgaW4gTHljaWEsIG5lYXIgdGhlIGNpdHkgb2YgWGFudGh1cywgYSBzcHJpbmcsIHdoaWNoIGF0IHRoaXMgdGltZSwgYXMgd2UgYXJlIHRvbGQsIHdhcyBvZiBpdHMgb3duIG1vdGlvbiB1cGhlYXZlZCBmcm9tIGl0cyBkZXB0aHMsIGFuZCBvdmVyZmxvd2VkLCBhbmQgY2FzdCBmb3J0aCBhIGJyb256ZSB0YWJsZXQgYmVhcmluZyB0aGUgcHJpbnRzIG9mIGFuY2llbnQgbGV0dGVycywgaW4gd2hpY2ggaXQgd2FzIG1hZGUga25vd24gdGhhdCB0aGUgZW1waXJlIG9mIHRoZSBQZXJzaWFucyB3b3VsZCBvbmUgZGF5IGJlIGRlc3Ryb3llZCBieSB0aGUgR3JlZWtzIGFuZCBjb21lIHRvIGFuIGVuZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+RW5jb3VyYWdlZCBieSB0aGlzIHByb3BoZWN5LCBBbGV4YW5kZXIgaGFzdGVuZWQgdG8gY2xlYXIgdXAgdGhlIHNlYWNvYXN0IGFzIGZhciBhcyBDaWxpY2lhIGFuZCBQaG9lbmljaWEuIEhpcyByYXBpZCBwYXNzYWdlIGFsb25nIHRoZSBjb2FzdHMgb2YgUGFtcGh5bGlhIGhhcyBhZmZvcmRlZCBtYW55IGhpc3RvcmlhbnMgbWF0ZXJpYWwgZm9yIGJvbWJhc3RpYyBhbmQgdGVycmlmeWluZyBkZXNjcmlwdGlvbi4gVGhleSBpbXBseSB0aGF0IGJ5IHNvbWUgZ3JlYXQgYW5kIGhlYXZlbi1zZW50IGdvb2QgZm9ydHVuZSB0aGUgc2VhIHJldGlyZWQgdG8gbWFrZSB3YXkgZm9yIEFsZXhhbmRlciwgYWx0aG91Z2ggYXQgb3RoZXIgdGltZXMgaXQgYWx3YXlzIGNhbWUgcm9sbGluZyBpbiB3aXRoIHZpb2xlbmNlIGZyb20gdGhlIG1haW4sIGFuZCBzY2FyY2VseSBldmVyIHJldmVhbGVkIHRvIHNpZ2h0IHRoZSBzbWFsbCByb2NrcyB3aGljaCBsaWUgY2xvc2UgdXAgdW5kZXIgdGhlIHByZWNpcGl0b3VzIGFuZCByaXZlbiBzaWRlcyBvZiB0aGUgbW91bnRhaW4uCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gQXJyaWFuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMS4yNi4xIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFuYWIuPC90aXRsZT4gaS4gMjYsIDEgZi48L2JpYmw+KSwgdGhlcmUgaXMgbm8gcm91dGUgYWxvbmcgdGhpcyBiZWFjaCBleGNlcHQgd2hlbiB0aGUgbm9ydGggd2luZCBibG93cy4gPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGF0IHRoYXQgdGltZSwgYWZ0ZXIgc3Ryb25nIHNvdXRoIHdpbmRzLCB0aGUgbm9ydGggd2luZHMgYmxldyBhbmQgcmVuZGVyZWQgaGlzIHBhc3NhZ2UgZWFzeSBhbmQgcXVpY2ssIG5vdCB3aXRob3V0IHRoZSBkaXZpbmUgaW50ZXJ2ZW50aW9uLCBhcyBib3RoIGhlIGFuZCBoaXMgZm9sbG93ZXJzIGludGVycHJldGVkLjwvcT4KICAgICAgICAgICAgPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgTWVuYW5kZXIsIGluIG9uZSBvZiBoaXMgY29tZWRpZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Lb29rLCA8dGl0bGU+Q29tLiBBdHQuIEZyYWcuPC90aXRsZT4gaWlpLiBwLiAyNDAuPC9ub3RlPiBldmlkZW50bHkgcmVmZXJzIGplc3RpbmdseSB0byB0aGlzIG1hcnZlbDrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+SG93IEFsZXhhbmRlci1saWtlLCBpbmRlZWQsIHRoaXMgaXM7IGFuZCBpZiBJIHNlZWsgc29tZSBvbmUsPC9sPgoJCQkJCSAgICAgICAgICA8bD5TcG9udGFuZW91cyBoZSdsbCBwcmVzZW50IGhpbXNlbGY7IGFuZCBpZiBJIGNsZWFybHkgbXVzdDwvbD4KCQkJCQkgICAgICAgICAgPGw+UGFzcyB0aHJvdWdoIHNvbWUgcGxhY2UgYnkgc2VhLCB0aGlzIHdpbGwgbGllIG9wZW4gdG8gbXkgc3RlcHMuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJQWxleGFuZGVyIGhpbXNlbGY7IGhvd2V2ZXIsIG1hZGUgbm8gc3VjaCBwcm9kaWd5IG91dCBvZiBpdCBpbiBoaXMgbGV0dGVycywgYnV0IHNheXMgdGhhdCBoZSBtYXJjaGVkIGJ5IHdheSBvZiB0aGUgc28tY2FsbGVkIExhZGRlciwgYW5kIHBhc3NlZCB0aHJvdWdoIGl0LCBzZXR0aW5nIG91dCBmcm9tIFBoYXNlbGlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgcmVhc29uIGZvciBoaXMgc3BlbmRpbmcgc2V2ZXJhbCBkYXlzIGluIHRoYXQgY2l0eSwgZHVyaW5nIHdoaWNoIGhlIG5vdGljZWQgdGhhdCBhIHN0YXR1ZSBvZiBUaGVvZGVjdGFzLCBhIGRlY2Vhc2VkIGNpdGl6ZW4gb2YgUGhhc2VsaXMsIGhhZCBiZWVuIGVyZWN0ZWQgaW4gdGhlIG1hcmtldHBsYWNlLiBPbmNlLCB0aGVyZWZvcmUsIGFmdGVyIHN1cHBlciBhbmQgaW4gaGlzIGN1cHMsIGhlIGxlZCBhIGJhbmQgb2YgcmV2ZWxsZXJzIHRvIHRoZSBzdGF0dWUgYW5kIGNyb3duZWQgaXQgd2l0aCBtYW55IG9mIHRoZWlyIGdhcmxhbmRzLCB0aHVzIGluIHBsZWFzYW50cnkgcmV0dXJuaW5nIG5vIHVuZ3JhY2VmdWwgaG9ub3VyIGZvciB0aGUgcGFzdCBhc3NvY2lhdGlvbiB3aXRoIHRoZSBtYW4gd2hpY2ggaGUgb3dlZCB0byBBcmlzdG90bGUgYW5kIHBoaWxvc29waHkuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBjb250ZXN0IGF0IG9uY2UgbWFkZSBhIGdyZWF0IGNoYW5nZSBpbiB0aGUgc2l0dWF0aW9uIHRvIEFsZXhhbmRlcidzIGFkdmFudGFnZSwgc28gdGhhdCBoZSByZWNlaXZlZCB0aGUgc3VibWlzc2lvbiBldmVuIG9mIFNhcmRpcywgdGhlIGJ1bHdhcmsgb2YgdGhlIGJhcmJhcmlhbiBkb21pbmlvbiBvbiB0aGUgc2VhLWNvYXN0LCBhbmQgYWRkZWQgdGhlIHJlc3Qgb2YgdGhlIGNvdW50cnkgdG8gaGlzIGNvbnF1ZXN0cy4gSGFsaWNhcm5hc3N1cyBhbG9uZSB3aXRoc3Rvb2QgaGltLCBhbmQgTWlsZXR1cywgd2hpY2ggY2l0aWVzIGhlIHRvb2sgYnkgc3Rvcm0KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNpZWdlIGFuZCBjYXB0dXJlIG9mIHRoZXNlIGNpdGllcyBvY2N1cGllZCBBbGV4YW5kZXIgdGlsbCB0aGUgbGF0ZSBhdXR1bW4gb2YgMzM0IEIuQy48L25vdGU+IGFuZCBzdWJkdWVkIGFsbCB0aGUgdGVycml0b3JpZXMgYWJvdXQgdGhlbS4gVGhlbiBoZSB3YXMgaW4gZG91YnQgYXMgdG8gaGlzIGZ1dHVyZSBjb3Vyc2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgdGltZXMgaGUgd2FzIGVhZ2VyIHRvIGVuY291bnRlciBEYXJlaXVzIGFuZCBwdXQgdGhlIHdob2xlIGlzc3VlIHRvIGhhemFyZCwgYW5kIG1hbnkgdGltZXMgaGUgd291bGQgbWFrZSB1cCBoaXMgbWluZCB0byBwcmFjdGljZSBoaW1zZWxmIGZpcnN0LCBhcyBpdCB3ZXJlLCBhbmQgc3RyZW5ndGhlbiBoaW1zZWxmIGJ5IGFjcXVpcmluZyB0aGUgcmVnaW9ucyBhbG9uZyB0aGUgc2VhIHdpdGggdGhlaXIgcmVzb3VyY2VzLCBhbmQgdGhlbiB0byBnbyB1cCBhZ2FpbnN0IHRoYXQgbW9uYXJjaC4gTm93LCB0aGVyZSBpcyBpbiBMeWNpYSwgbmVhciB0aGUgY2l0eSBvZiBYYW50aHVzLCBhIHNwcmluZywgd2hpY2ggYXQgdGhpcyB0aW1lLCBhcyB3ZSBhcmUgdG9sZCwgd2FzIG9mIGl0cyBvd24gbW90aW9uIHVwaGVhdmVkIGZyb20gaXRzIGRlcHRocywgYW5kIG92ZXJmbG93ZWQsIGFuZCBjYXN0IGZvcnRoIGEgYnJvbnplIHRhYmxldCBiZWFyaW5nIHRoZSBwcmludHMgb2YgYW5jaWVudCBsZXR0ZXJzLCBpbiB3aGljaCBpdCB3YXMgbWFkZSBrbm93biB0aGF0IHRoZSBlbXBpcmUgb2YgdGhlIFBlcnNpYW5zIHdvdWxkIG9uZSBkYXkgYmUgZGVzdHJveWVkIGJ5IHRoZSBHcmVla3MgYW5kIGNvbWUgdG8gYW4gZW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkVuY291cmFnZWQgYnkgdGhpcyBwcm9waGVjeSwgQWxleGFuZGVyIGhhc3RlbmVkIHRvIGNsZWFyIHVwIHRoZSBzZWFjb2FzdCBhcyBmYXIgYXMgQ2lsaWNpYSBhbmQgUGhvZW5pY2lhLiBIaXMgcmFwaWQgcGFzc2FnZSBhbG9uZyB0aGUgY29hc3RzIG9mIFBhbXBoeWxpYSBoYXMgYWZmb3JkZWQgbWFueSBoaXN0b3JpYW5zIG1hdGVyaWFsIGZvciBib21iYXN0aWMgYW5kIHRlcnJpZnlpbmcgZGVzY3JpcHRpb24uIFRoZXkgaW1wbHkgdGhhdCBieSBzb21lIGdyZWF0IGFuZCBoZWF2ZW4tc2VudCBnb29kIGZvcnR1bmUgdGhlIHNlYSByZXRpcmVkIHRvIG1ha2Ugd2F5IGZvciBBbGV4YW5kZXIsIGFsdGhvdWdoIGF0IG90aGVyIHRpbWVzIGl0IGFsd2F5cyBjYW1lIHJvbGxpbmcgaW4gd2l0aCB2aW9sZW5jZSBmcm9tIHRoZSBtYWluLCBhbmQgc2NhcmNlbHkgZXZlciByZXZlYWxlZCB0byBzaWdodCB0aGUgc21hbGwgcm9ja3Mgd2hpY2ggbGllIGNsb3NlIHVwIHVuZGVyIHRoZSBwcmVjaXBpdG91cyBhbmQgcml2ZW4gc2lkZXMgb2YgdGhlIG1vdW50YWluLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gQXJyaWFuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAxLjI2LjEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDI2LCAxIGYuPC9iaWJsPiksIHRoZXJlIGlzIG5vIHJvdXRlIGFsb25nIHRoaXMgYmVhY2ggZXhjZXB0IHdoZW4gdGhlIG5vcnRoIHdpbmQgYmxvd3MuIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGF0IHRoYXQgdGltZSwgYWZ0ZXIgc3Ryb25nIHNvdXRoIHdpbmRzLCB0aGUgbm9ydGggd2luZHMgYmxldyBhbmQgcmVuZGVyZWQgaGlzIHBhc3NhZ2UgZWFzeSBhbmQgcXVpY2ssIG5vdCB3aXRob3V0IHRoZSBkaXZpbmUgaW50ZXJ2ZW50aW9uLCBhcyBib3RoIGhlIGFuZCBoaXMgZm9sbG93ZXJzIGludGVycHJldGVkLjwvcT4KICAgICAgICAgICAgPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuMjYuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaS4gMjYsIDEgZi48L2JpYmw+KSwgdGhlcmUgaXMgbm8gcm91dGUgYWxvbmcgdGhpcyBiZWFjaCBleGNlcHQgd2hlbiB0aGUgbm9ydGggd2luZCBibG93cy4gPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiAyNiwgMSBmLjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGF0IHRoYXQgdGltZSwgYWZ0ZXIgc3Ryb25nIHNvdXRoIHdpbmRzLCB0aGUgbm9ydGggd2luZHMgYmxldyBhbmQgcmVuZGVyZWQgaGlzIHBhc3NhZ2UgZWFzeSBhbmQgcXVpY2ssIG5vdCB3aXRob3V0IHRoZSBkaXZpbmUgaW50ZXJ2ZW50aW9uLCBhcyBib3RoIGhlIGFuZCBoaXMgZm9sbG93ZXJzIGludGVycHJldGVkLjwvcT4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBNZW5hbmRlciwgaW4gb25lIG9mIGhpcyBjb21lZGllcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+S29vaywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tLiBBdHQuIEZyYWcuPC90aXRsZT4gaWlpLiBwLiAyNDAuPC9ub3RlPiBldmlkZW50bHkgcmVmZXJzIGplc3RpbmdseSB0byB0aGlzIG1hcnZlbDrigJQKCQkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbS4gQXR0LiBGcmFnLjwvdGl0bGU+IGlpaS4gcC4gMjQwLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkhvdyBBbGV4YW5kZXItbGlrZSwgaW5kZWVkLCB0aGlzIGlzOyBhbmQgaWYgSSBzZWVrIHNvbWUgb25lLDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5TcG9udGFuZW91cyBoZSdsbCBwcmVzZW50IGhpbXNlbGY7IGFuZCBpZiBJIGNsZWFybHkgbXVzdDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5QYXNzIHRocm91Z2ggc29tZSBwbGFjZSBieSBzZWEsIHRoaXMgd2lsbCBsaWUgb3BlbiB0byBteSBzdGVwcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlBbGV4YW5kZXIgaGltc2VsZjsgaG93ZXZlciwgbWFkZSBubyBzdWNoIHByb2RpZ3kgb3V0IG9mIGl0IGluIGhpcyBsZXR0ZXJzLCBidXQgc2F5cyB0aGF0IGhlIG1hcmNoZWQgYnkgd2F5IG9mIHRoZSBzby1jYWxsZWQgTGFkZGVyLCBhbmQgcGFzc2VkIHRocm91Z2ggaXQsIHNldHRpbmcgb3V0IGZyb20gUGhhc2VsaXMuIAoJCQkJPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Ib3cgQWxleGFuZGVyLWxpa2UsIGluZGVlZCwgdGhpcyBpczsgYW5kIGlmIEkgc2VlayBzb21lIG9uZSw8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3BvbnRhbmVvdXMgaGUnbGwgcHJlc2VudCBoaW1zZWxmOyBhbmQgaWYgSSBjbGVhcmx5IG11c3Q8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGFzcyB0aHJvdWdoIHNvbWUgcGxhY2UgYnkgc2VhLCB0aGlzIHdpbGwgbGllIG9wZW4gdG8gbXkgc3RlcHMuPC9sPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSByZWFzb24gZm9yIGhpcyBzcGVuZGluZyBzZXZlcmFsIGRheXMgaW4gdGhhdCBjaXR5LCBkdXJpbmcgd2hpY2ggaGUgbm90aWNlZCB0aGF0IGEgc3RhdHVlIG9mIFRoZW9kZWN0YXMsIGEgZGVjZWFzZWQgY2l0aXplbiBvZiBQaGFzZWxpcywgaGFkIGJlZW4gZXJlY3RlZCBpbiB0aGUgbWFya2V0cGxhY2UuIE9uY2UsIHRoZXJlZm9yZSwgYWZ0ZXIgc3VwcGVyIGFuZCBpbiBoaXMgY3VwcywgaGUgbGVkIGEgYmFuZCBvZiByZXZlbGxlcnMgdG8gdGhlIHN0YXR1ZSBhbmQgY3Jvd25lZCBpdCB3aXRoIG1hbnkgb2YgdGhlaXIgZ2FybGFuZHMsIHRodXMgaW4gcGxlYXNhbnRyeSByZXR1cm5pbmcgbm8gdW5ncmFjZWZ1bCBob25vdXIgZm9yIHRoZSBwYXN0IGFzc29jaWF0aW9uIHdpdGggdGhlIG1hbiB3aGljaCBoZSBvd2VkIHRvIEFyaXN0b3RsZSBhbmQgcGhpbG9zb3BoeS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBoZSBvdmVycG93ZXJlZCBzdWNoIG9mIHRoZSBQaXNpZGlhbnMgYXMgaGFkIG9mZmVyZWQgaGltIHJlc2lzdGFuY2UsIGFuZCBzdWJkdWVkIFBocnlnaWE7IGFuZCBhZnRlciBoZSBoYWQgdGFrZW4gdGhlIGNpdHkgb2YgR29yZGl1bSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVhcmx5IGluIDMzMyBCLkMuPC9ub3RlPiByZXB1dGVkIHRvIGhhdmUgYmVlbiB0aGUgaG9tZSBvZiB0aGUgYW5jaWVudCBNaWRhcywgaGUgc2F3IHRoZSBtdWNoLXRhbGtlZC1vZiB3YWdnb24gYm91bmQgZmFzdCB0byBpdHMgeW9rZSB3aXRoIGJhcmsgb2YgdGhlIGNvcm5lbC10cmVlLCBhbmQgaGVhcmQgYSBzdG9yeSBjb25maWRlbnRseSB0b2xkIGFib3V0IGl0IGJ5IHRoZSBCYXJiYXJpYW5zLCB0byB0aGUgZWZmZWN0IHRoYXQgd2hvc29ldmVyIGxvb3NlZCB0aGUgZmFzdGVuaW5nIHdhcyBkZXN0aW5lZCB0byBiZWNvbWUga2luZyBvZiB0aGUgd2hvbGUgd29ybGQuIFdlbGwsIHRoZW4sIG1vc3Qgd3JpdGVycyBzYXkgdGhhdCBzaW5jZSB0aGUgZmFzdGVuaW5ncyBoYWQgdGhlaXIgZW5kcyBjb25jZWFsZWQsIGFuZCB3ZXJlIGludGVydHdpbmVkIG1hbnkgdGltZXMgaW4gY3Jvb2tlZCBjb2lscywgQWxleGFuZGVyIHdhcyBhdCBhIGxvc3MgaG93IHRvIHByb2NlZWQsIGFuZCBmaW5hbGx5IGxvb3NlbmVkIHRoZSBrbm90IGJ5IGN1dHRpbmcgaXQgdGhyb3VnaCB3aXRoIGhpcyBzd29yZCwgYW5kIHRoYXQgd2hlbiBpdCB3YXMgdGh1cyBzbWl0dGVuIG1hbnkgZW5kcyB3ZXJlIHRvIGJlIHNlZW4uIEJ1dCBBcmlzdG9idWx1cyBzYXlzIHRoYXQgaGUgdW5kaWQgaXQgdmVyeSBlYXNpbHksIGJ5IHNpbXBseSB0YWtpbmcgb3V0IHRoZSBzby1jYWxsZWQgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aGVzdG9yLDwvcT4gb3IgcGluLCBvZiB0aGUgd2FnZ29uLXBvbGUsIGJ5IHdoaWNoIHRoZSB5b2tlLWZhc3RlbmluZyB3YXMgaGVsZCB0b2dldGhlciwgYW5kIHRoZW4gZHJhd2luZyBhd2F5IHRoZSB5b2tlLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAyLjMuMSI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiBpaS4gMzwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgb3ZlcnBvd2VyZWQgc3VjaCBvZiB0aGUgUGlzaWRpYW5zIGFzIGhhZCBvZmZlcmVkIGhpbSByZXNpc3RhbmNlLCBhbmQgc3ViZHVlZCBQaHJ5Z2lhOyBhbmQgYWZ0ZXIgaGUgaGFkIHRha2VuIHRoZSBjaXR5IG9mIEdvcmRpdW0sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVhcmx5IGluIDMzMyBCLkMuPC9ub3RlPiByZXB1dGVkIHRvIGhhdmUgYmVlbiB0aGUgaG9tZSBvZiB0aGUgYW5jaWVudCBNaWRhcywgaGUgc2F3IHRoZSBtdWNoLXRhbGtlZC1vZiB3YWdnb24gYm91bmQgZmFzdCB0byBpdHMgeW9rZSB3aXRoIGJhcmsgb2YgdGhlIGNvcm5lbC10cmVlLCBhbmQgaGVhcmQgYSBzdG9yeSBjb25maWRlbnRseSB0b2xkIGFib3V0IGl0IGJ5IHRoZSBCYXJiYXJpYW5zLCB0byB0aGUgZWZmZWN0IHRoYXQgd2hvc29ldmVyIGxvb3NlZCB0aGUgZmFzdGVuaW5nIHdhcyBkZXN0aW5lZCB0byBiZWNvbWUga2luZyBvZiB0aGUgd2hvbGUgd29ybGQuIFdlbGwsIHRoZW4sIG1vc3Qgd3JpdGVycyBzYXkgdGhhdCBzaW5jZSB0aGUgZmFzdGVuaW5ncyBoYWQgdGhlaXIgZW5kcyBjb25jZWFsZWQsIGFuZCB3ZXJlIGludGVydHdpbmVkIG1hbnkgdGltZXMgaW4gY3Jvb2tlZCBjb2lscywgQWxleGFuZGVyIHdhcyBhdCBhIGxvc3MgaG93IHRvIHByb2NlZWQsIGFuZCBmaW5hbGx5IGxvb3NlbmVkIHRoZSBrbm90IGJ5IGN1dHRpbmcgaXQgdGhyb3VnaCB3aXRoIGhpcyBzd29yZCwgYW5kIHRoYXQgd2hlbiBpdCB3YXMgdGh1cyBzbWl0dGVuIG1hbnkgZW5kcyB3ZXJlIHRvIGJlIHNlZW4uIEJ1dCBBcmlzdG9idWx1cyBzYXlzIHRoYXQgaGUgdW5kaWQgaXQgdmVyeSBlYXNpbHksIGJ5IHNpbXBseSB0YWtpbmcgb3V0IHRoZSBzby1jYWxsZWQgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5oZXN0b3IsPC9xPiBvciBwaW4sIG9mIHRoZSB3YWdnb24tcG9sZSwgYnkgd2hpY2ggdGhlIHlva2UtZmFzdGVuaW5nIHdhcyBoZWxkIHRvZ2V0aGVyLCBhbmQgdGhlbiBkcmF3aW5nIGF3YXkgdGhlIHlva2UuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAyLjMuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpLiAzPC9iaWJsPi48L25vdGU+CiAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDIuMy4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWkuIDM8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWkuIDM8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TZXR0aW5nIG91dCBmcm9tIHRoZXJlLCBoZSBzdWJkdWVkIFBhcGhsYWdvbmlhIGFuZCBDYXBwYWRvY2lhLCBhbmQgb24gaGVhcmluZyBvZiB0aGUgZGVhdGggb2YgTWVtbm9uLCBvbmUgb2YgdGhlIGNvbW1hbmRlcnMgb2YgRGFyZWl1cyBvbiB0aGUgc2VhLWJvYXJkLCB3aG8gd2FzIHRob3VnaHQgbGlrZWx5IHRvIGdpdmUgQWxleGFuZGVyIGFidW5kYW50IHRyb3VibGUgYW5kIGluZmluaXRlIGFubm95YW5jZSwgaGUgd2FzIGFsbCB0aGUgbW9yZSBlbmNvdXJhZ2VkIGZvciBoaXMgZXhwZWRpdGlvbiBpbnRvIHRoZSBpbnRlcmlvci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIERhcmVpdXMgd2FzIGFscmVhZHkgY29taW5nIGRvd24gdG8gdGhlIGNvYXN0IGZyb20gU3VzYSwgZXhhbHRlZCBpbiBzcGlyaXQgYnkgdGhlIG1hZ25pdHVkZSBvZiBoaXMgZm9yY2VzIChmb3IgaGUgd2FzIGxlYWRpbmcgYW4gYXJteSBvZiBzaXggaHVuZHJlZCB0aG91c2FuZCBtZW4pLCBhbmQgYWxzbyBlbmNvdXJhZ2VkIGJ5IGEgY2VydGFpbiBkcmVhbSwgd2hpY2ggdGhlIE1hZ2kgaW50ZXJwcmV0ZWQgaW4gYSB3YXkgdG8gcGxlYXNlIGhpbSByYXRoZXIgdGhhbiBhcyB0aGUgcHJvYmFiaWxpdGllcyBkZW1hbmRlZC4gRm9yIGhlIGRyZWFtZWQgdGhhdCB0aGUgTWFjZWRvbmlhbiBwaGFsYW54IHdhcyBhbGwgb24gZmlyZSwgYW5kIHRoYXQgQWxleGFuZGVyLCBhdHRpcmVkIGluIGEgcm9iZSB3aGljaCBoZSBoaW1zZWxmIGZvcm1lcmx5IHVzZWQgdG8gd2VhciB3aGVuIGhlIHdhcyBhIHJveWFsIGNvdXJpZXIsIHdhcyB3YWl0aW5nIHVwb24gaGltLCBhZnRlciB3aGljaCBzZXJ2aWNlIGhlIHBhc3NlZCBpbnRvIHRoZSB0ZW1wbGUgb2YgQmVsdXMgYW5kIGRpc2FwcGVhcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CeSB0aGlzIG1lYW5zLCBhcyBpdCB3b3VsZCBzZWVtLCBpdCB3YXMgc3VnZ2VzdGVkIHRvIERhcmVpdXMgZnJvbSBIZWF2ZW4gdGhhdCB0aGUgZXhwbG9pdHMgb2YgdGhlIE1hY2Vkb25pYW5zIHdvdWxkIGJlIGNvbnNwaWN1b3VzIGFuZCBicmlsbGlhbnQsIHRoYXQgQWxleGFuZGVyIHdvdWxkIGJlIG1hc3RlciBvZiBBc2lhLCBqdXN0IGFzIERhcmVpdXMgYmVjYW1lIGl0cyBtYXN0ZXIgd2hlbiBoZSB3YXMgbWFkZSBraW5nIGluc3RlYWQgb2Ygcm95YWwgY291cmllciwgYW5kIHdvdWxkIHNwZWVkaWx5IGVuZCBoaXMgbGlmZSB3aXRoIGdsb3J5LjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNldHRpbmcgb3V0IGZyb20gdGhlcmUsIGhlIHN1YmR1ZWQgUGFwaGxhZ29uaWEgYW5kIENhcHBhZG9jaWEsIGFuZCBvbiBoZWFyaW5nIG9mIHRoZSBkZWF0aCBvZiBNZW1ub24sIG9uZSBvZiB0aGUgY29tbWFuZGVycyBvZiBEYXJlaXVzIG9uIHRoZSBzZWEtYm9hcmQsIHdobyB3YXMgdGhvdWdodCBsaWtlbHkgdG8gZ2l2ZSBBbGV4YW5kZXIgYWJ1bmRhbnQgdHJvdWJsZSBhbmQgaW5maW5pdGUgYW5ub3lhbmNlLCBoZSB3YXMgYWxsIHRoZSBtb3JlIGVuY291cmFnZWQgZm9yIGhpcyBleHBlZGl0aW9uIGludG8gdGhlIGludGVyaW9yLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBEYXJlaXVzIHdhcyBhbHJlYWR5IGNvbWluZyBkb3duIHRvIHRoZSBjb2FzdCBmcm9tIFN1c2EsIGV4YWx0ZWQgaW4gc3Bpcml0IGJ5IHRoZSBtYWduaXR1ZGUgb2YgaGlzIGZvcmNlcyAoZm9yIGhlIHdhcyBsZWFkaW5nIGFuIGFybXkgb2Ygc2l4IGh1bmRyZWQgdGhvdXNhbmQgbWVuKSwgYW5kIGFsc28gZW5jb3VyYWdlZCBieSBhIGNlcnRhaW4gZHJlYW0sIHdoaWNoIHRoZSBNYWdpIGludGVycHJldGVkIGluIGEgd2F5IHRvIHBsZWFzZSBoaW0gcmF0aGVyIHRoYW4gYXMgdGhlIHByb2JhYmlsaXRpZXMgZGVtYW5kZWQuIEZvciBoZSBkcmVhbWVkIHRoYXQgdGhlIE1hY2Vkb25pYW4gcGhhbGFueCB3YXMgYWxsIG9uIGZpcmUsIGFuZCB0aGF0IEFsZXhhbmRlciwgYXR0aXJlZCBpbiBhIHJvYmUgd2hpY2ggaGUgaGltc2VsZiBmb3JtZXJseSB1c2VkIHRvIHdlYXIgd2hlbiBoZSB3YXMgYSByb3lhbCBjb3VyaWVyLCB3YXMgd2FpdGluZyB1cG9uIGhpbSwgYWZ0ZXIgd2hpY2ggc2VydmljZSBoZSBwYXNzZWQgaW50byB0aGUgdGVtcGxlIG9mIEJlbHVzIGFuZCBkaXNhcHBlYXJlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ5IHRoaXMgbWVhbnMsIGFzIGl0IHdvdWxkIHNlZW0sIGl0IHdhcyBzdWdnZXN0ZWQgdG8gRGFyZWl1cyBmcm9tIEhlYXZlbiB0aGF0IHRoZSBleHBsb2l0cyBvZiB0aGUgTWFjZWRvbmlhbnMgd291bGQgYmUgY29uc3BpY3VvdXMgYW5kIGJyaWxsaWFudCwgdGhhdCBBbGV4YW5kZXIgd291bGQgYmUgbWFzdGVyIG9mIEFzaWEsIGp1c3QgYXMgRGFyZWl1cyBiZWNhbWUgaXRzIG1hc3RlciB3aGVuIGhlIHdhcyBtYWRlIGtpbmcgaW5zdGVhZCBvZiByb3lhbCBjb3VyaWVyLCBhbmQgd291bGQgc3BlZWRpbHkgZW5kIGhpcyBsaWZlIHdpdGggZ2xvcnkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RGFyZWl1cyB3YXMgc3RpbGwgbW9yZSBlbmNvdXJhZ2VkIGJ5IEFsZXhhbmRlcidzIGxvbmcgZGVsYXkgaW4gQ2lsaWNpYSwgd2hpY2ggaGUgYXR0cmlidXRlZCB0byBjb3dhcmRpY2UuIFRoZSBkZWxheSB3YXMgZHVlLCBob3dldmVyLCB0byBhIHNpY2tuZXNzLCB3aGljaCBhc3NhaWxlZCBoaW0gaW4gY29uc2VxdWVuY2Ugb2YgZmF0aWd1ZXMsIGFjY29yZGluZyB0byBzb21lLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U28gQXJpc3RvYnVsdXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAyLjQuNyI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiBpaS4gNCwgNzwvYmlibD4pLjwvbm90ZT4gYnV0IGFjY29yZGluZyB0byBvdGhlcnMsIGJlY2F1c2UgaGUgdG9vayBhIGJhdGggaW4gdGhlIHJpdmVyIEN5ZG51cywgd2hvc2Ugd2F0ZXJzIHdlcmUgaWN5IGNvbGQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJlIHRoYXQgYXMgaXQgbWF5LCBub25lIG9mIHRoZSBvdGhlciBwaHlzaWNpYW5zIGhhZCB0aGUgY291cmFnZSB0byBhZG1pbmlzdGVyIHJlbWVkaWVzLCBidXQgdGhpbmtpbmcgdGhhdCB0aGUgZGFuZ2VyIHdhcyB0b28gZ3JlYXQgdG8gYmUgb3ZlcmNvbWUgYnkgYW55IHJlbWVkeSB3aGF0ZXZlciwgdGhleSB3ZXJlIGFmcmFpZCBvZiB0aGUgY2hhcmdlcyB3aGljaCB3b3VsZCBiZSBtYWRlIGFnYWluc3QgdGhlbSBieSB0aGUgTWFjZWRvbmlhbnMgaW4gY29uc2VxdWVuY2Ugb2YgdGhlaXIgZmFpbHVyZTsgYnV0IFBoaWxpcCB0aGUgQWNhcm5hbmlhbiwgd2hvIHNhdyB0aGF0IHRoZSBraW5nIHdhcyBpbiBhbiBldmlsIHBsaWdodCwgcHV0IGNvbmZpZGVuY2UgaW4gaGlzIGZyaWVuZHNoaXAsIGFuZCB0aGlua2luZyBpdCBhIHNoYW1lZnVsIHRoaW5nIG5vdCB0byBzaGFyZSBoaXMgcGVyaWwgYnkgZXhoYXVzdGluZyB0aGUgcmVzb3VyY2VzIG9mIGFydCBpbiB0cnlpbmcgdG8gaGVscCBoaW0gZXZlbiBhdCBncmVhdCByaXNrLCBwcmVwYXJlZCBhIG1lZGljaW5lIGFuZCBwZXJzdWFkZWQgaGltIHRvIGRyaW5rIGl0IGJvbGRseSwgaWYgaGUgd2FzIGFueGlvdXMgdG8gcmVnYWluIGhpcyBzdHJlbmd0aCBmb3IgdGhlIHdhci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlLCBob3dldmVyLCBQYXJtZW5pbyBzZW50IGEgbGV0dGVyIHRvIEFsZXhhbmRlciBmcm9tIHRoZSBjYW1wLCB1cmdpbmcgaGltIHRvIGhlIG9uIGhpcyBndWFyZCBhZ2FpbnN0IFBoaWxpcCwgZm9yIHRoZSByZWFzb24gdGhhdCBoZSBoYWQgYmVlbiBwZXJzdWFkZWQgYnkgRGFyZWl1cyB3aXRoIHRoZSBwcm9taXNlIG9mIGxhcmdlIGdpZnRzIGFuZCBhIG1hcnJpYWdlIHdpdGggaGlzIGRhdWdodGVyLCB0byBraWxsIEFsZXhhbmRlci4gQWxleGFuZGVyIHJlYWQgdGhlIGxldHRlciBhbmQgcGxhY2VkIGl0IHVuZGVyIGhpcyBwaWxsb3csIHdpdGhvdXQgc2hvd2luZyBpdCB0byBhbnkgb25lIG9mIGhpcyBmcmllbmRzLiBXaGVuIHRoZSB0aW1lIGFwcG9pbnRlZCB3YXMgYXQgaGFuZCwgYW5kIFBoaWxpcCBjYW1lIGluIHdpdGggdGhlIGtpbmcncyBjb21wYW5pb25zLCBjYXJyeWluZyB0aGUgbWVkaWNpbmUgaW4gYSBjdXAsIEFsZXhhbmRlciBoYW5kZWQgaGltIHRoZSBsZXR0ZXIsIHdoaWxlIGhlIGhpbXNlbGYgdG9vayB0aGUgbWVkaWNpbmUgZnJvbSBoaW0gd2l0aCByZWFkaW5lc3MgYW5kIG5vIHNpZ24gb2Ygc3VzcGljaW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgYW4gYW1hemluZyBzaWdodCwgdGhlbiwgYW5kIG9uZSB3ZWxsIHdvcnRoeSBvZiB0aGUgc3RhZ2Us4oCUdGhlIG9uZSByZWFkaW5nIHRoZSBsZXR0ZXIsIHRoZSBvdGhlciBkcmlua2luZyB0aGUgbWVkaWNpbmUsIGFuZCB0aGVuIGJvdGggdG9nZXRoZXIgdHVybmluZyB0aGVpciBleWVzIHVwb24gb25lIGFub3RoZXIsIGJ1dCBub3Qgd2l0aCB0aGUgc2FtZSBleHByZXNzaW9uOyBmb3IgQWxleGFuZGVyLCBieSBoaXMgZ2xhZCBhbmQgb3BlbiBjb3VudGVuYW5jZSwgc2hvd2VkIGhpcyBnb29kIHdpbGwgdG93YXJkcyBQaGlsaXAgYW5kIGhpcyB0cnVzdCBpbiBoaW0sIHdoaWxlIFBoaWxpcCB3YXMgYmVzaWRlIGhpbXNlbGYgYXQgdGhlIGNhbHVtbnksIG5vdyBsaWZ0aW5nIHVwIGhpcyBoYW5kcyB0b3dhcmRzIGhlYXZlbiBhbmQgY2FsbGluZyB1cG9uIHRoZSBnb2RzIHRvIHdpdG5lc3MgaGlzIGlubm9jZW5jZSwgYW5kIG5vdyBmYWxsaW5nIHVwb24gdGhlIGNvdWNoIG9uIHdoaWNoIEFsZXhhbmRlciBsYXkgYW5kIGJlc2VlY2hpbmcgaGltIHRvIGJlIG9mIGdvb2QgY291cmFnZSBhbmQgb2JleSBoaXMgcGh5c2ljaWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYXQgZmlyc3QgdGhlIG1lZGljaW5lIG1hc3RlcmVkIHRoZSBwYXRpZW50LCBhbmQgYXMgaXQgd2VyZSBkcm92ZSBiYWNrIGFuZCBidXJpZWQgZGVlcCBoaXMgYm9kaWx5IHBvd2Vycywgc28gdGhhdCBoaXMgdm9pY2UgZmFpbGVkLCBoZSBmZWxsIGludG8gYSBzd29vbiwgYW5kIGJlY2FtZSBhbG1vc3Qgd2hvbGx5IHVuY29uc2Npb3VzLiBIb3dldmVyLCBoZSB3YXMgc3BlZWRpbHkgcmVzdG9yZWQgdG8gaGlzIHNlbnNlcyBieSBQaGlsaXAsIGFuZCB3aGVuIGhlIGhhZCByZWNvdmVyZWQgc3RyZW5ndGggaGUgc2hvd2VkIGhpbXNlbGYgdG8gdGhlIE1hY2Vkb25pYW5zLCB3aG8gcmVmdXNlZCB0byBiZSBjb21mb3J0ZWQgdW50aWwgdGhleSBoYWQgc2VlbiBBbGV4YW5kZXIuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RGFyZWl1cyB3YXMgc3RpbGwgbW9yZSBlbmNvdXJhZ2VkIGJ5IEFsZXhhbmRlcidzIGxvbmcgZGVsYXkgaW4gQ2lsaWNpYSwgd2hpY2ggaGUgYXR0cmlidXRlZCB0byBjb3dhcmRpY2UuIFRoZSBkZWxheSB3YXMgZHVlLCBob3dldmVyLCB0byBhIHNpY2tuZXNzLCB3aGljaCBhc3NhaWxlZCBoaW0gaW4gY29uc2VxdWVuY2Ugb2YgZmF0aWd1ZXMsIGFjY29yZGluZyB0byBzb21lLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TbyBBcmlzdG9idWx1cyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMi40LjciPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaS4gNCwgNzwvYmlibD4pLjwvbm90ZT4gYnV0IGFjY29yZGluZyB0byBvdGhlcnMsIGJlY2F1c2UgaGUgdG9vayBhIGJhdGggaW4gdGhlIHJpdmVyIEN5ZG51cywgd2hvc2Ugd2F0ZXJzIHdlcmUgaWN5IGNvbGQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMi40LjciPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaS4gNCwgNzwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWkuIDQsIDc8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJlIHRoYXQgYXMgaXQgbWF5LCBub25lIG9mIHRoZSBvdGhlciBwaHlzaWNpYW5zIGhhZCB0aGUgY291cmFnZSB0byBhZG1pbmlzdGVyIHJlbWVkaWVzLCBidXQgdGhpbmtpbmcgdGhhdCB0aGUgZGFuZ2VyIHdhcyB0b28gZ3JlYXQgdG8gYmUgb3ZlcmNvbWUgYnkgYW55IHJlbWVkeSB3aGF0ZXZlciwgdGhleSB3ZXJlIGFmcmFpZCBvZiB0aGUgY2hhcmdlcyB3aGljaCB3b3VsZCBiZSBtYWRlIGFnYWluc3QgdGhlbSBieSB0aGUgTWFjZWRvbmlhbnMgaW4gY29uc2VxdWVuY2Ugb2YgdGhlaXIgZmFpbHVyZTsgYnV0IFBoaWxpcCB0aGUgQWNhcm5hbmlhbiwgd2hvIHNhdyB0aGF0IHRoZSBraW5nIHdhcyBpbiBhbiBldmlsIHBsaWdodCwgcHV0IGNvbmZpZGVuY2UgaW4gaGlzIGZyaWVuZHNoaXAsIGFuZCB0aGlua2luZyBpdCBhIHNoYW1lZnVsIHRoaW5nIG5vdCB0byBzaGFyZSBoaXMgcGVyaWwgYnkgZXhoYXVzdGluZyB0aGUgcmVzb3VyY2VzIG9mIGFydCBpbiB0cnlpbmcgdG8gaGVscCBoaW0gZXZlbiBhdCBncmVhdCByaXNrLCBwcmVwYXJlZCBhIG1lZGljaW5lIGFuZCBwZXJzdWFkZWQgaGltIHRvIGRyaW5rIGl0IGJvbGRseSwgaWYgaGUgd2FzIGFueGlvdXMgdG8gcmVnYWluIGhpcyBzdHJlbmd0aCBmb3IgdGhlIHdhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSwgaG93ZXZlciwgUGFybWVuaW8gc2VudCBhIGxldHRlciB0byBBbGV4YW5kZXIgZnJvbSB0aGUgY2FtcCwgdXJnaW5nIGhpbSB0byBoZSBvbiBoaXMgZ3VhcmQgYWdhaW5zdCBQaGlsaXAsIGZvciB0aGUgcmVhc29uIHRoYXQgaGUgaGFkIGJlZW4gcGVyc3VhZGVkIGJ5IERhcmVpdXMgd2l0aCB0aGUgcHJvbWlzZSBvZiBsYXJnZSBnaWZ0cyBhbmQgYSBtYXJyaWFnZSB3aXRoIGhpcyBkYXVnaHRlciwgdG8ga2lsbCBBbGV4YW5kZXIuIEFsZXhhbmRlciByZWFkIHRoZSBsZXR0ZXIgYW5kIHBsYWNlZCBpdCB1bmRlciBoaXMgcGlsbG93LCB3aXRob3V0IHNob3dpbmcgaXQgdG8gYW55IG9uZSBvZiBoaXMgZnJpZW5kcy4gV2hlbiB0aGUgdGltZSBhcHBvaW50ZWQgd2FzIGF0IGhhbmQsIGFuZCBQaGlsaXAgY2FtZSBpbiB3aXRoIHRoZSBraW5nJ3MgY29tcGFuaW9ucywgY2FycnlpbmcgdGhlIG1lZGljaW5lIGluIGEgY3VwLCBBbGV4YW5kZXIgaGFuZGVkIGhpbSB0aGUgbGV0dGVyLCB3aGlsZSBoZSBoaW1zZWxmIHRvb2sgdGhlIG1lZGljaW5lIGZyb20gaGltIHdpdGggcmVhZGluZXNzIGFuZCBubyBzaWduIG9mIHN1c3BpY2lvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBhbiBhbWF6aW5nIHNpZ2h0LCB0aGVuLCBhbmQgb25lIHdlbGwgd29ydGh5IG9mIHRoZSBzdGFnZSzigJR0aGUgb25lIHJlYWRpbmcgdGhlIGxldHRlciwgdGhlIG90aGVyIGRyaW5raW5nIHRoZSBtZWRpY2luZSwgYW5kIHRoZW4gYm90aCB0b2dldGhlciB0dXJuaW5nIHRoZWlyIGV5ZXMgdXBvbiBvbmUgYW5vdGhlciwgYnV0IG5vdCB3aXRoIHRoZSBzYW1lIGV4cHJlc3Npb247IGZvciBBbGV4YW5kZXIsIGJ5IGhpcyBnbGFkIGFuZCBvcGVuIGNvdW50ZW5hbmNlLCBzaG93ZWQgaGlzIGdvb2Qgd2lsbCB0b3dhcmRzIFBoaWxpcCBhbmQgaGlzIHRydXN0IGluIGhpbSwgd2hpbGUgUGhpbGlwIHdhcyBiZXNpZGUgaGltc2VsZiBhdCB0aGUgY2FsdW1ueSwgbm93IGxpZnRpbmcgdXAgaGlzIGhhbmRzIHRvd2FyZHMgaGVhdmVuIGFuZCBjYWxsaW5nIHVwb24gdGhlIGdvZHMgdG8gd2l0bmVzcyBoaXMgaW5ub2NlbmNlLCBhbmQgbm93IGZhbGxpbmcgdXBvbiB0aGUgY291Y2ggb24gd2hpY2ggQWxleGFuZGVyIGxheSBhbmQgYmVzZWVjaGluZyBoaW0gdG8gYmUgb2YgZ29vZCBjb3VyYWdlIGFuZCBvYmV5IGhpcyBwaHlzaWNpYW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhdCBmaXJzdCB0aGUgbWVkaWNpbmUgbWFzdGVyZWQgdGhlIHBhdGllbnQsIGFuZCBhcyBpdCB3ZXJlIGRyb3ZlIGJhY2sgYW5kIGJ1cmllZCBkZWVwIGhpcyBib2RpbHkgcG93ZXJzLCBzbyB0aGF0IGhpcyB2b2ljZSBmYWlsZWQsIGhlIGZlbGwgaW50byBhIHN3b29uLCBhbmQgYmVjYW1lIGFsbW9zdCB3aG9sbHkgdW5jb25zY2lvdXMuIEhvd2V2ZXIsIGhlIHdhcyBzcGVlZGlseSByZXN0b3JlZCB0byBoaXMgc2Vuc2VzIGJ5IFBoaWxpcCwgYW5kIHdoZW4gaGUgaGFkIHJlY292ZXJlZCBzdHJlbmd0aCBoZSBzaG93ZWQgaGltc2VsZiB0byB0aGUgTWFjZWRvbmlhbnMsIHdobyByZWZ1c2VkIHRvIGJlIGNvbWZvcnRlZCB1bnRpbCB0aGV5IGhhZCBzZWVuIEFsZXhhbmRlci48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZXJlIHdhcyBpbiB0aGUgYXJteSBvZiBEYXJlaXVzIGEgY2VydGFpbiBNYWNlZG9uaWFuIHdobyBoYWQgZmxlZCBmcm9tIGhpcyBjb3VudHJ5LCBBbXludGFzIGJ5IG5hbWUsIGFuZCBoZSB3YXMgd2VsbCBhY3F1YWludGVkIHdpdGggdGhlIG5hdHVyZSBvZiBBbGV4YW5kZXIuIFRoaXMgbWFuLCB3aGVuIGhlIHNhdyB0aGF0IERhcmVpdXMgd2FzIGVhZ2VyIHRvIGF0dGFjayBBbGV4YW5kZXIgd2l0aGluIHRoZSBuYXJyb3cgcGFzc2VzIG9mIHRoZSBtb3VudGFpbnMsIGJlZ2dlZCBoaW0gdG8gcmVtYWluIHdoZXJlIGhlIHdhcywgdGhhdCBoZSBtaWdodCBmaWdodCBhIGRlY2lzaXZlIGJhdHRsZSB3aXRoIGhpcyB2YXN0IGZvcmNlcyBhZ2FpbnN0IGluZmVyaW9yIG51bWJlcnMgaW4gcGxhaW5zIHRoYXQgd2VyZSBicm9hZCBhbmQgc3BhY2lvdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIERhcmVpdXMgcmVwbGllZCB0aGF0IGhlIHdhcyBhZnJhaWQgdGhlIGVuZW15IHdvdWxkIHJ1biBhd2F5IGJlZm9yZSBoZSBjb3VsZCBnZXQgYXQgdGhlbSwgYW5kIEFsZXhhbmRlciB0aHVzIGVzY2FwZSBoaW0sIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluZGVlZCw8L3E+IHNhaWQgQW15bnRhcywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vbiB0aGlzIHBvaW50LCBPIGtpbmcsIHRob3UgbWF5ZXN0IGJlIHdpdGhvdXQgZmVhcjsgZm9yIGhlIHdpbGwgbWFyY2ggYWdhaW5zdCB0aGVlLCBuYXksIGF0IHRoaXMgdmVyeSBtb21lbnQsIHByb2JhYmx5LCBoZSBpcyBvbiB0aGUgbWFyY2guPC9xPiBEYXJlaXVzIHdvdWxkIG5vdCBsaXN0ZW4gdG8gdGhlc2Ugd29yZHMgb2YgQW15bnRhcywgYnV0IGJyb2tlIGNhbXAgYW5kIG1hcmNoZWQgaW50byBDaWxpY2lhLCBhbmQgYXQgdGhlIHNhbWUgdGltZSBBbGV4YW5kZXIgbWFyY2hlZCBpbnRvIFN5cmlhIGFnYWluc3QgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGF2aW5nIG1pc3NlZCBvbmUgYW5vdGhlciBpbiB0aGUgbmlnaHQsIHRoZXkgYm90aCB0dXJuZWQgYmFjayBhZ2FpbiwgQWxleGFuZGVyIHJlam9pY2luZyBpbiBoaXMgZ29vZCBmb3J0dW5lLCBhbmQgZWFnZXIgdG8gbWVldCBoaXMgZW5lbXkgaW4gdGhlIHBhc3Nlcywgd2hpbGUgRGFyZWl1cyB3YXMgYXMgZWFnZXIgdG8gZXh0cmljYXRlIGhpcyBmb3JjZXMgZnJvbSB0aGUgcGFzc2VzIGFuZCByZWdhaW4gaGlzIGZvcm1lciBjYW1waW5nLWdyb3VuZC4gRm9yIGhlIGFscmVhZHkgc2F3IHRoYXQgaGUgaGFkIGRvbmUgd3JvbmcgdG8gdGhyb3cgaGltc2VsZiBpbnRvIHBsYWNlcyB3aGljaCB3ZXJlIHJlbmRlcmVkIHVuZml0IGZvciBjYXZhbHJ5IGJ5IHNlYSBhbmQgbW91bnRhaW5zIGFuZCBhIHJpdmVyIHJ1bm5pbmcgdGhyb3VnaCB0aGUgbWlkZGxlICh0aGUgUGluYXJ1cyksIHdoaWNoIHdlcmUgYnJva2VuIHVwIGluIG1hbnkgcGFydHMsIGFuZCBmYXZvdXJlZCB0aGUgc21hbGwgbnVtYmVycyBvZiBoaXMgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3Qgb25seSB3YXMgdGhlIHBsYWNlIGZvciB0aGUgYmF0dGxlIGEgZ2lmdCBvZiBGb3J0dW5lIHRvIEFsZXhhbmRlciwgYnV0IGhpcyBnZW5lcmFsc2hpcCB3YXMgYmV0dGVyIHRoYW4gdGhlIHByb3Zpc2lvbnMgb2YgRm9ydHVuZSBmb3IgaGlzIHZpY3RvcnkuIEZvciBzaW5jZSBoZSB3YXMgc28gdmFzdGx5IGluZmVyaW9yIGluIG51bWJlcnMgdG8gdGhlIEJhcmJhcmlhbnMsIGhlIGdhdmUgdGhlbSBubyBvcHBvcnR1bml0eSB0byBlbmNpcmNsZSBoaW0sIGJ1dCwgbGVhZGluZyBoaXMgcmlnaHQgd2luZyBpbiBwZXJzb24sIGV4dGVuZGVkIGl0IHBhc3QgdGhlIGVuZW15J3MgbGVmdCwgZ290IG9uIHRoZWlyIGZsYW5rLCBhbmQgcm91dGVkIHRoZSBCYXJiYXJpYW5zIHdobyB3ZXJlIG9wcG9zZWQgdG8gaGltLCBmaWdodGluZyBhbW9uZyB0aGUgZm9yZW1vc3QsIHNvIHRoYXQgaGUgZ290IGEgc3dvcmQtd291bmQgaW4gdGhlIHRoaWdoLiBDaGFyZXMgc2F5cyB0aGlzIHdvdW5kIHdhcyBnaXZlbiBoaW0gYnkgRGFyZWl1cywgd2l0aCB3aG9tIGhlIGhhZCBhIGhhbmQtdG8taGFuZCBjb21iYXQsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBBbGV4YW5kZXIsIGluIGEgbGV0dGVyIHRvIEFudGlwYXRlciBhYm91dCB0aGUgYmF0dGxlLCBkaWQgbm90IHNheSB3aG8gaXQgd2FzIHRoYXQgZ2F2ZSBoaW0gdGhlIHdvdW5kOyBoZSB3cm90ZSB0aGF0IGhlIGhhZCBiZWVuIHdvdW5kZWQgaW4gdGhlIHRoaWdoIHdpdGggYSBkYWdnZXIsIGJ1dCB0aGF0IG5vIHNlcmlvdXMgaGFybSByZXN1bHRlZCBmcm9tIHRoZSB3b3VuZC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGVyZSB3YXMgaW4gdGhlIGFybXkgb2YgRGFyZWl1cyBhIGNlcnRhaW4gTWFjZWRvbmlhbiB3aG8gaGFkIGZsZWQgZnJvbSBoaXMgY291bnRyeSwgQW15bnRhcyBieSBuYW1lLCBhbmQgaGUgd2FzIHdlbGwgYWNxdWFpbnRlZCB3aXRoIHRoZSBuYXR1cmUgb2YgQWxleGFuZGVyLiBUaGlzIG1hbiwgd2hlbiBoZSBzYXcgdGhhdCBEYXJlaXVzIHdhcyBlYWdlciB0byBhdHRhY2sgQWxleGFuZGVyIHdpdGhpbiB0aGUgbmFycm93IHBhc3NlcyBvZiB0aGUgbW91bnRhaW5zLCBiZWdnZWQgaGltIHRvIHJlbWFpbiB3aGVyZSBoZSB3YXMsIHRoYXQgaGUgbWlnaHQgZmlnaHQgYSBkZWNpc2l2ZSBiYXR0bGUgd2l0aCBoaXMgdmFzdCBmb3JjZXMgYWdhaW5zdCBpbmZlcmlvciBudW1iZXJzIGluIHBsYWlucyB0aGF0IHdlcmUgYnJvYWQgYW5kIHNwYWNpb3VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIERhcmVpdXMgcmVwbGllZCB0aGF0IGhlIHdhcyBhZnJhaWQgdGhlIGVuZW15IHdvdWxkIHJ1biBhd2F5IGJlZm9yZSBoZSBjb3VsZCBnZXQgYXQgdGhlbSwgYW5kIEFsZXhhbmRlciB0aHVzIGVzY2FwZSBoaW0sIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kZWVkLDwvcT4gc2FpZCBBbXludGFzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b24gdGhpcyBwb2ludCwgTyBraW5nLCB0aG91IG1heWVzdCBiZSB3aXRob3V0IGZlYXI7IGZvciBoZSB3aWxsIG1hcmNoIGFnYWluc3QgdGhlZSwgbmF5LCBhdCB0aGlzIHZlcnkgbW9tZW50LCBwcm9iYWJseSwgaGUgaXMgb24gdGhlIG1hcmNoLjwvcT4gRGFyZWl1cyB3b3VsZCBub3QgbGlzdGVuIHRvIHRoZXNlIHdvcmRzIG9mIEFteW50YXMsIGJ1dCBicm9rZSBjYW1wIGFuZCBtYXJjaGVkIGludG8gQ2lsaWNpYSwgYW5kIGF0IHRoZSBzYW1lIHRpbWUgQWxleGFuZGVyIG1hcmNoZWQgaW50byBTeXJpYSBhZ2FpbnN0IGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoYXZpbmcgbWlzc2VkIG9uZSBhbm90aGVyIGluIHRoZSBuaWdodCwgdGhleSBib3RoIHR1cm5lZCBiYWNrIGFnYWluLCBBbGV4YW5kZXIgcmVqb2ljaW5nIGluIGhpcyBnb29kIGZvcnR1bmUsIGFuZCBlYWdlciB0byBtZWV0IGhpcyBlbmVteSBpbiB0aGUgcGFzc2VzLCB3aGlsZSBEYXJlaXVzIHdhcyBhcyBlYWdlciB0byBleHRyaWNhdGUgaGlzIGZvcmNlcyBmcm9tIHRoZSBwYXNzZXMgYW5kIHJlZ2FpbiBoaXMgZm9ybWVyIGNhbXBpbmctZ3JvdW5kLiBGb3IgaGUgYWxyZWFkeSBzYXcgdGhhdCBoZSBoYWQgZG9uZSB3cm9uZyB0byB0aHJvdyBoaW1zZWxmIGludG8gcGxhY2VzIHdoaWNoIHdlcmUgcmVuZGVyZWQgdW5maXQgZm9yIGNhdmFscnkgYnkgc2VhIGFuZCBtb3VudGFpbnMgYW5kIGEgcml2ZXIgcnVubmluZyB0aHJvdWdoIHRoZSBtaWRkbGUgKHRoZSBQaW5hcnVzKSwgd2hpY2ggd2VyZSBicm9rZW4gdXAgaW4gbWFueSBwYXJ0cywgYW5kIGZhdm91cmVkIHRoZSBzbWFsbCBudW1iZXJzIG9mIGhpcyBlbmVteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3Qgb25seSB3YXMgdGhlIHBsYWNlIGZvciB0aGUgYmF0dGxlIGEgZ2lmdCBvZiBGb3J0dW5lIHRvIEFsZXhhbmRlciwgYnV0IGhpcyBnZW5lcmFsc2hpcCB3YXMgYmV0dGVyIHRoYW4gdGhlIHByb3Zpc2lvbnMgb2YgRm9ydHVuZSBmb3IgaGlzIHZpY3RvcnkuIEZvciBzaW5jZSBoZSB3YXMgc28gdmFzdGx5IGluZmVyaW9yIGluIG51bWJlcnMgdG8gdGhlIEJhcmJhcmlhbnMsIGhlIGdhdmUgdGhlbSBubyBvcHBvcnR1bml0eSB0byBlbmNpcmNsZSBoaW0sIGJ1dCwgbGVhZGluZyBoaXMgcmlnaHQgd2luZyBpbiBwZXJzb24sIGV4dGVuZGVkIGl0IHBhc3QgdGhlIGVuZW15J3MgbGVmdCwgZ290IG9uIHRoZWlyIGZsYW5rLCBhbmQgcm91dGVkIHRoZSBCYXJiYXJpYW5zIHdobyB3ZXJlIG9wcG9zZWQgdG8gaGltLCBmaWdodGluZyBhbW9uZyB0aGUgZm9yZW1vc3QsIHNvIHRoYXQgaGUgZ290IGEgc3dvcmQtd291bmQgaW4gdGhlIHRoaWdoLiBDaGFyZXMgc2F5cyB0aGlzIHdvdW5kIHdhcyBnaXZlbiBoaW0gYnkgRGFyZWl1cywgd2l0aCB3aG9tIGhlIGhhZCBhIGhhbmQtdG8taGFuZCBjb21iYXQsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBBbGV4YW5kZXIsIGluIGEgbGV0dGVyIHRvIEFudGlwYXRlciBhYm91dCB0aGUgYmF0dGxlLCBkaWQgbm90IHNheSB3aG8gaXQgd2FzIHRoYXQgZ2F2ZSBoaW0gdGhlIHdvdW5kOyBoZSB3cm90ZSB0aGF0IGhlIGhhZCBiZWVuIHdvdW5kZWQgaW4gdGhlIHRoaWdoIHdpdGggYSBkYWdnZXIsIGJ1dCB0aGF0IG5vIHNlcmlvdXMgaGFybSByZXN1bHRlZCBmcm9tIHRoZSB3b3VuZC48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFsdGhvdWdoIGhlIHdvbiBhIGJyaWxsaWFudCB2aWN0b3J5IGFuZCBkZXN0cm95ZWQgbW9yZSB0aGFuIGEgaHVuZHJlZCBhbmQgdGVuIHRob3VzYW5kIG9mIGhpcyBlbmVtaWVzLCBoZSBkaWQgbm90IGNhcHR1cmUgRGFyZWl1cywgd2hvIGdvdCBhIHN0YXJ0IG9mIGZvdXIgb3IgZml2ZSBmdXJsb25ncyBpbiBoaXMgZmxpZ2h0OyBidXQgaGUgZGlkIHRha2UgdGhlIGtpbmcncyBjaGFyaW90LCBhbmQgaGlzIGJvdywgYmVmb3JlIGhlIGNhbWUgYmFjayBmcm9tIHRoZSBwdXJzdWl0LiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIGZvdW5kIGhpcyBNYWNlZG9uaWFucyBjYXJyeWluZyBvZmYgdGhlIHdlYWx0aCBmcm9tIHRoZSBjYW1wIG9mIHRoZSBCYXJiYXJpYW5zLCBhbmQgdGhlIHdlYWx0aCB3YXMgb2Ygc3VycGFzc2luZyBhYnVuZGFuY2UsIGFsdGhvdWdoIGl0cyBvd25lcnMgaGFkIGNvbWUgdG8gdGhlIGJhdHRsZSBpbiBsaWdodCBtYXJjaGluZyBvcmRlciBhbmQgaGFkIGxlZnQgbW9zdCBvZiB0aGVpciBiYWdnYWdlIGluIERhbWFzY3VzOyBoZSBmb3VuZCwgdG9vLCB0aGF0IGhpcyBtZW4gaGFkIHBpY2tlZCBvdXQgZm9yIGhpbSB0aGUgdGVudCBvZiBEYXJlaXVzLCB3aGljaCB3YXMgZnVsbCB0byBvdmVyZmxvd2luZyB3aXRoIGdvcmdlb3VzIHNlcnZpdG9ycyBhbmQgZnVybml0dXJlLCBhbmQgbWFueSB0cmVhc3VyZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlN0cmFpZ2h0d2F5LCB0aGVuLCBBbGV4YW5kZXIgcHV0IG9mZiBoaXMgYXJtb3VyIGFuZCB3ZW50IHRvIHRoZSBiYXRoLCBzYXlpbmc6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCB1cyBnbyBhbmQgd2FzaCBvZmYgdGhlIHN3ZWF0IG9mIHRoZSBiYXR0bGUgaW4gdGhlIGJhdGggb2YgRGFyZWl1cy48L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ObywgaW5kZWVkLDwvcT4gc2FpZCBvbmUgb2YgaGlzIGNvbXBhbmlvbnMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YnV0IHJhdGhlciBpbiB0aGF0IG9mIEFsZXhhbmRlcjsgZm9yIHRoZSBwcm9wZXJ0eSBvZiB0aGUgY29ucXVlcmVkIG11c3QgYmVsb25nIHRvIHRoZSBjb25xdWVyb3IsIGFuZCBiZSBjYWxsZWQgaGlzLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBoZSBzYXcgdGhlIGJhc2lucyBhbmQgcGl0Y2hlcnMgYW5kIHR1YnMgYW5kIGNhc2tldHMsIGFsbCBvZiBnb2xkLCBhbmQgY3VyaW91c2x5IHdyb3VnaHQsIHdoaWxlIHRoZSBhcGFydG1lbnQgd2FzIG1hcnZlbGxvdXNseSBmcmFncmFudCB3aXRoIHNwaWNlcyBhbmQgdW5ndWVudHMsIGFuZCB3aGVuIGhlIHBhc3NlZCBmcm9tIHRoaXMgaW50byBhIHRlbnQgd2hpY2ggd2FzIHdvcnRoeSBvZiBhZG1pcmF0aW9uIGZvciBpdHMgc2l6ZSBhbmQgaGVpZ2h0LCBhbmQgZm9yIHRoZSBhZG9ybm1lbnQgb2YgdGhlIGNvdWNoIGFuZCB0YWJsZXMgYW5kIGJhbnF1ZXQgcHJlcGFyZWQgZm9yIGhpbSwgaGUgdHVybmVkIGhpcyBleWVzIHVwb24gaGlzIGNvbXBhbmlvbnMgYW5kIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMsIGFzIGl0IHdvdWxkIHNlZW0sIGlzIHRvIGJlIGEga2luZy48L3E+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIGZvdW5kIGhpcyBNYWNlZG9uaWFucyBjYXJyeWluZyBvZmYgdGhlIHdlYWx0aCBmcm9tIHRoZSBjYW1wIG9mIHRoZSBCYXJiYXJpYW5zLCBhbmQgdGhlIHdlYWx0aCB3YXMgb2Ygc3VycGFzc2luZyBhYnVuZGFuY2UsIGFsdGhvdWdoIGl0cyBvd25lcnMgaGFkIGNvbWUgdG8gdGhlIGJhdHRsZSBpbiBsaWdodCBtYXJjaGluZyBvcmRlciBhbmQgaGFkIGxlZnQgbW9zdCBvZiB0aGVpciBiYWdnYWdlIGluIERhbWFzY3VzOyBoZSBmb3VuZCwgdG9vLCB0aGF0IGhpcyBtZW4gaGFkIHBpY2tlZCBvdXQgZm9yIGhpbSB0aGUgdGVudCBvZiBEYXJlaXVzLCB3aGljaCB3YXMgZnVsbCB0byBvdmVyZmxvd2luZyB3aXRoIGdvcmdlb3VzIHNlcnZpdG9ycyBhbmQgZnVybml0dXJlLCBhbmQgbWFueSB0cmVhc3VyZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlN0cmFpZ2h0d2F5LCB0aGVuLCBBbGV4YW5kZXIgcHV0IG9mZiBoaXMgYXJtb3VyIGFuZCB3ZW50IHRvIHRoZSBiYXRoLCBzYXlpbmc6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGV0IHVzIGdvIGFuZCB3YXNoIG9mZiB0aGUgc3dlYXQgb2YgdGhlIGJhdHRsZSBpbiB0aGUgYmF0aCBvZiBEYXJlaXVzLjwvcT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm8sIGluZGVlZCw8L3E+IHNhaWQgb25lIG9mIGhpcyBjb21wYW5pb25zLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YnV0IHJhdGhlciBpbiB0aGF0IG9mIEFsZXhhbmRlcjsgZm9yIHRoZSBwcm9wZXJ0eSBvZiB0aGUgY29ucXVlcmVkIG11c3QgYmVsb25nIHRvIHRoZSBjb25xdWVyb3IsIGFuZCBiZSBjYWxsZWQgaGlzLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGhlIHNhdyB0aGUgYmFzaW5zIGFuZCBwaXRjaGVycyBhbmQgdHVicyBhbmQgY2Fza2V0cywgYWxsIG9mIGdvbGQsIGFuZCBjdXJpb3VzbHkgd3JvdWdodCwgd2hpbGUgdGhlIGFwYXJ0bWVudCB3YXMgbWFydmVsbG91c2x5IGZyYWdyYW50IHdpdGggc3BpY2VzIGFuZCB1bmd1ZW50cywgYW5kIHdoZW4gaGUgcGFzc2VkIGZyb20gdGhpcyBpbnRvIGEgdGVudCB3aGljaCB3YXMgd29ydGh5IG9mIGFkbWlyYXRpb24gZm9yIGl0cyBzaXplIGFuZCBoZWlnaHQsIGFuZCBmb3IgdGhlIGFkb3JubWVudCBvZiB0aGUgY291Y2ggYW5kIHRhYmxlcyBhbmQgYmFucXVldCBwcmVwYXJlZCBmb3IgaGltLCBoZSB0dXJuZWQgaGlzIGV5ZXMgdXBvbiBoaXMgY29tcGFuaW9ucyBhbmQgc2FpZDogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzLCBhcyBpdCB3b3VsZCBzZWVtLCBpcyB0byBiZSBhIGtpbmcuPC9xPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBoZSB3YXMgYmV0YWtpbmcgaGltc2VsZiB0byBzdXBwZXIsIHNvbWVvbmUgdG9sZCBoaW0gdGhhdCBhbW9uZyB0aGUgcHJpc29uZXJzIHdlcmUgdGhlIG1vdGhlciwgd2lmZSwgYW5kIHR3byB1bm1hcnJpZWQgZGF1Z2h0ZXJzIG9mIERhcmVpdXMsIGFuZCB0aGF0IGF0IHNpZ2h0IG9mIGhpcyBjaGFyaW90IGFuZCBib3cgdGhleSBiZWF0IHRoZWlyIGJyZWFzdHMgYW5kIGxhbWVudGVkLCBiZWxpZXZpbmcgdGhhdCBoZSB3YXMgZGVhZC4gQWNjb3JkaW5nbHksIGFmdGVyIGEgY29uc2lkZXJhYmxlIHBhdXNlLCBtb3JlIGFmZmVjdGVkIGJ5IHRoZWlyIGFmZmxpY3Rpb24gdGhhbiBieSBoaXMgb3duIHN1Y2Nlc3MsIGhlIHNlbnQgTGVvbm5hdHVzLCB3aXRoIG9yZGVycyB0byB0ZWxsIHRoZW0gdGhhdCBEYXJlaXVzIHdhcyBub3QgZGVhZCwgYW5kIHRoYXQgdGhleSBuZWVkIGhhdmUgbm8gZmVhciBvZiBBbGV4YW5kZXI7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciBpdCB3YXMgRGFyZWl1cyB1cG9uIHdob20gaGUgd2FzIHdhZ2luZyB3YXIgZm9yIHN1cHJlbWFjeSwgYnV0IHRoZXkgc2hvdWxkIGhhdmUgZXZlcnl0aGluZyB3aGljaCB0aGV5IHVzZWQgdG8gdGhpbmsgdGhlaXIgZHVlIHdoZW4gRGFyZWl1cyB3YXMgdW5kaXNwdXRlZCBraW5nLiBJZiB0aGlzIG1lc3NhZ2Ugd2FzIHRob3VnaHQgYnkgdGhlIHdvbWVuIHRvIGJlIG1pbGQgYW5kIGtpbmRseSwgc3RpbGwgbW9yZSBkaWQgdGhlIGFjdGlvbnMgb2YgQWxleGFuZGVyIHByb3ZlIHRvIGJlIGh1bWFuZS4gRm9yIGhlIGdhdmUgdGhlbSBwZXJtaXNzaW9uIHRvIGJ1cnkgd2hvbSB0aGV5IHBsZWFzZWQgb2YgdGhlIFBlcnNpYW5zLCBhbmQgdG8gdXNlIGZvciB0aGlzIHB1cnBvc2UgcmFpbWVudCBhbmQgYWRvcm5tZW50IGZyb20gdGhlIHNwb2lscywgYW5kIGhlIGFiYXRlZCBub3Qgb25lIGpvdCBvZiB0aGVpciBob25vdXJhYmxlIG1haW50ZW5hbmNlLCBuYXksIHRoZXkgZW5qb3llZCBldmVuIGxhcmdlciBhbGxvd2FuY2VzIHRoYW4gYmVmb3JlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIG1vc3QgaG9ub3VyYWJsZSBhbmQgbW9zdCBwcmluY2VseSBmYXZvdXIgd2hpY2ggdGhlc2Ugbm9ibGUgYW5kIGNoYXN0ZSB3b21lbiByZWNlaXZlZCBmcm9tIGhpbSBpbiB0aGVpciBjYXB0aXZpdHkgd2FzIHRoYXQgdGhleSBuZWl0aGVyIGhlYXJkLCBub3Igc3VzcGVjdGVkLCBub3IgYXdhaXRlZCBhbnl0aGluZyB0aGF0IGNvdWxkIGRpc2dyYWNlIHRoZW0sIGJ1dCBsaXZlZCwgYXMgdGhvdWdoIGd1YXJkZWQgaW4gc2FjcmVkIGFuZCBpbnZpb2xhYmxlIHZpcmdpbnMnIGNoYW1iZXJzIGluc3RlYWQgb2YgaW4gYW4gZW5lbXkncyBjYW1wLCBhcGFydCBmcm9tIHRoZSBzcGVlY2ggYW5kIHNpZ2h0IG9mIG1lbi4gQW5kIHlldCBpdCBpcyBzYWlkIHRoYXQgdGhlIHdpZmUgb2YgRGFyZWl1cyB3YXMgZmFyIHRoZSBtb3N0IGNvbWVseSBvZiBhbGwgcm95YWwgd29tZW4sIGp1c3QgYXMgRGFyZWl1cyBoaW1zZWxmIGFsc28gd2FzIGhhbmRzb21lc3QgYW5kIHRhbGxlc3Qgb2YgbWVuLCBhbmQgdGhlIGRhdWdodGVycyByZXNlbWJsZWQgdGhlaXIgcGFyZW50cy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgaGUgd2FzIGJldGFraW5nIGhpbXNlbGYgdG8gc3VwcGVyLCBzb21lb25lIHRvbGQgaGltIHRoYXQgYW1vbmcgdGhlIHByaXNvbmVycyB3ZXJlIHRoZSBtb3RoZXIsIHdpZmUsIGFuZCB0d28gdW5tYXJyaWVkIGRhdWdodGVycyBvZiBEYXJlaXVzLCBhbmQgdGhhdCBhdCBzaWdodCBvZiBoaXMgY2hhcmlvdCBhbmQgYm93IHRoZXkgYmVhdCB0aGVpciBicmVhc3RzIGFuZCBsYW1lbnRlZCwgYmVsaWV2aW5nIHRoYXQgaGUgd2FzIGRlYWQuIEFjY29yZGluZ2x5LCBhZnRlciBhIGNvbnNpZGVyYWJsZSBwYXVzZSwgbW9yZSBhZmZlY3RlZCBieSB0aGVpciBhZmZsaWN0aW9uIHRoYW4gYnkgaGlzIG93biBzdWNjZXNzLCBoZSBzZW50IExlb25uYXR1cywgd2l0aCBvcmRlcnMgdG8gdGVsbCB0aGVtIHRoYXQgRGFyZWl1cyB3YXMgbm90IGRlYWQsIGFuZCB0aGF0IHRoZXkgbmVlZCBoYXZlIG5vIGZlYXIgb2YgQWxleGFuZGVyOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciBpdCB3YXMgRGFyZWl1cyB1cG9uIHdob20gaGUgd2FzIHdhZ2luZyB3YXIgZm9yIHN1cHJlbWFjeSwgYnV0IHRoZXkgc2hvdWxkIGhhdmUgZXZlcnl0aGluZyB3aGljaCB0aGV5IHVzZWQgdG8gdGhpbmsgdGhlaXIgZHVlIHdoZW4gRGFyZWl1cyB3YXMgdW5kaXNwdXRlZCBraW5nLiBJZiB0aGlzIG1lc3NhZ2Ugd2FzIHRob3VnaHQgYnkgdGhlIHdvbWVuIHRvIGJlIG1pbGQgYW5kIGtpbmRseSwgc3RpbGwgbW9yZSBkaWQgdGhlIGFjdGlvbnMgb2YgQWxleGFuZGVyIHByb3ZlIHRvIGJlIGh1bWFuZS4gRm9yIGhlIGdhdmUgdGhlbSBwZXJtaXNzaW9uIHRvIGJ1cnkgd2hvbSB0aGV5IHBsZWFzZWQgb2YgdGhlIFBlcnNpYW5zLCBhbmQgdG8gdXNlIGZvciB0aGlzIHB1cnBvc2UgcmFpbWVudCBhbmQgYWRvcm5tZW50IGZyb20gdGhlIHNwb2lscywgYW5kIGhlIGFiYXRlZCBub3Qgb25lIGpvdCBvZiB0aGVpciBob25vdXJhYmxlIG1haW50ZW5hbmNlLCBuYXksIHRoZXkgZW5qb3llZCBldmVuIGxhcmdlciBhbGxvd2FuY2VzIHRoYW4gYmVmb3JlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgbW9zdCBob25vdXJhYmxlIGFuZCBtb3N0IHByaW5jZWx5IGZhdm91ciB3aGljaCB0aGVzZSBub2JsZSBhbmQgY2hhc3RlIHdvbWVuIHJlY2VpdmVkIGZyb20gaGltIGluIHRoZWlyIGNhcHRpdml0eSB3YXMgdGhhdCB0aGV5IG5laXRoZXIgaGVhcmQsIG5vciBzdXNwZWN0ZWQsIG5vciBhd2FpdGVkIGFueXRoaW5nIHRoYXQgY291bGQgZGlzZ3JhY2UgdGhlbSwgYnV0IGxpdmVkLCBhcyB0aG91Z2ggZ3VhcmRlZCBpbiBzYWNyZWQgYW5kIGludmlvbGFibGUgdmlyZ2lucycgY2hhbWJlcnMgaW5zdGVhZCBvZiBpbiBhbiBlbmVteSdzIGNhbXAsIGFwYXJ0IGZyb20gdGhlIHNwZWVjaCBhbmQgc2lnaHQgb2YgbWVuLiBBbmQgeWV0IGl0IGlzIHNhaWQgdGhhdCB0aGUgd2lmZSBvZiBEYXJlaXVzIHdhcyBmYXIgdGhlIG1vc3QgY29tZWx5IG9mIGFsbCByb3lhbCB3b21lbiwganVzdCBhcyBEYXJlaXVzIGhpbXNlbGYgYWxzbyB3YXMgaGFuZHNvbWVzdCBhbmQgdGFsbGVzdCBvZiBtZW4sIGFuZCB0aGUgZGF1Z2h0ZXJzIHJlc2VtYmxlZCB0aGVpciBwYXJlbnRzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBbGV4YW5kZXIsIGFzIGl0IHdvdWxkIHNlZW0sIGNvbnNpZGVyaW5nIHRoZSBtYXN0ZXJ5IG9mIGhpbXNlbGYgYSBtb3JlIGtpbmdseSB0aGluZyB0aGFuIHRoZSBjb25xdWVzdCBvZiBoaXMgZW5lbWllcywgbmVpdGhlciBsYWlkIGhhbmRzIHVwb24gdGhlc2Ugd29tZW4sIG5vciBkaWQgaGUga25vdyBhbnkgb3RoZXIgYmVmb3JlIG1hcnJpYWdlLCBleGNlcHQgQmFyc2luw6kuIFRoaXMgd29tYW4sIE1lbW5vbidzIHdpZG93LCB3YXMgdGFrZW4gcHJpc29uZXIgYXQgRGFtYXNjdXMuIEFuZCBzaW5jZSBzaGUgaGFkIHJlY2VpdmVkIGEgR3JlZWsgZWR1Y2F0aW9uLCBhbmQgd2FzIG9mIGFuIGFncmVlYWJsZSBkaXNwb3NpdGlvbiwgYW5kIHNpbmNlIGhlciBmYXRoZXIsIEFydGFiYXp1cywgd2FzIHNvbiBvZiBhIGtpbmcncyBkYXVnaHRlciwgQWxleGFuZGVyIGRldGVybWluZWQgKGF0IFBhcm1lbmlvJ3MgaW5zdGlnYXRpb24sIGFzIEFyaXN0b2J1bHVzIHNheXMpIHRvIGF0dGFjaCBoaW1zZWxmIHRvIGEgd29tYW4gb2Ygc3VjaCBoaWdoIGJpcnRoIGFuZCBiZWF1dHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgdGhlIG90aGVyIGNhcHRpdmUgd29tZW4sIHNlZWluZyB0aGF0IHRoZXkgd2VyZSBzdXJwYXNzaW5nbHkgc3RhdGVseSBhbmQgYmVhdXRpZnVsLCBoZSBtZXJlbHkgc2FpZCBqZXN0aW5nbHkgdGhhdCBQZXJzaWFuIHdvbWVuIHdlcmUgdG9ybWVudHMgdG8gdGhlIGV5ZXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhkdC4gNS4xOCIgdmFsaWQ9InllcyI+SGVyb2QuIHYuIDE4PC9iaWJsPi48L25vdGU+IEFuZCBkaXNwbGF5aW5nIGluIHJpdmFscnkgd2l0aCB0aGVpciBmYWlyIGxvb2tzIHRoZSBiZWF1dHkgb2YgaGlzIG93biBzb2JyaWV0eSBhbmQgc2VsZi1jb250cm9sLCBoZSBwYXNzZWQgdGhlbSBieSBhcyB0aG91Z2ggdGhleSB3ZXJlIGxpZmVsZXNzIGltYWdlcyBmb3IgZGlzcGxheS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBbGV4YW5kZXIsIGFzIGl0IHdvdWxkIHNlZW0sIGNvbnNpZGVyaW5nIHRoZSBtYXN0ZXJ5IG9mIGhpbXNlbGYgYSBtb3JlIGtpbmdseSB0aGluZyB0aGFuIHRoZSBjb25xdWVzdCBvZiBoaXMgZW5lbWllcywgbmVpdGhlciBsYWlkIGhhbmRzIHVwb24gdGhlc2Ugd29tZW4sIG5vciBkaWQgaGUga25vdyBhbnkgb3RoZXIgYmVmb3JlIG1hcnJpYWdlLCBleGNlcHQgQmFyc2luw6kuIFRoaXMgd29tYW4sIE1lbW5vbidzIHdpZG93LCB3YXMgdGFrZW4gcHJpc29uZXIgYXQgRGFtYXNjdXMuIEFuZCBzaW5jZSBzaGUgaGFkIHJlY2VpdmVkIGEgR3JlZWsgZWR1Y2F0aW9uLCBhbmQgd2FzIG9mIGFuIGFncmVlYWJsZSBkaXNwb3NpdGlvbiwgYW5kIHNpbmNlIGhlciBmYXRoZXIsIEFydGFiYXp1cywgd2FzIHNvbiBvZiBhIGtpbmcncyBkYXVnaHRlciwgQWxleGFuZGVyIGRldGVybWluZWQgKGF0IFBhcm1lbmlvJ3MgaW5zdGlnYXRpb24sIGFzIEFyaXN0b2J1bHVzIHNheXMpIHRvIGF0dGFjaCBoaW1zZWxmIHRvIGEgd29tYW4gb2Ygc3VjaCBoaWdoIGJpcnRoIGFuZCBiZWF1dHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgdGhlIG90aGVyIGNhcHRpdmUgd29tZW4sIHNlZWluZyB0aGF0IHRoZXkgd2VyZSBzdXJwYXNzaW5nbHkgc3RhdGVseSBhbmQgYmVhdXRpZnVsLCBoZSBtZXJlbHkgc2FpZCBqZXN0aW5nbHkgdGhhdCBQZXJzaWFuIHdvbWVuIHdlcmUgdG9ybWVudHMgdG8gdGhlIGV5ZXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDUuMTgiIHZhbGlkPSJ5ZXMiPkhlcm9kLiB2LiAxODwvYmlibD4uPC9ub3RlPiBBbmQgZGlzcGxheWluZyBpbiByaXZhbHJ5IHdpdGggdGhlaXIgZmFpciBsb29rcyB0aGUgYmVhdXR5IG9mIGhpcyBvd24gc29icmlldHkgYW5kIHNlbGYtY29udHJvbCwgaGUgcGFzc2VkIHRoZW0gYnkgYXMgdGhvdWdoIHRoZXkgd2VyZSBsaWZlbGVzcyBpbWFnZXMgZm9yIGRpc3BsYXkuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA1LjE4IiB2YWxpZD0ieWVzIj5IZXJvZC4gdi4gMTg8L2JpYmw+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIFBoaWxveGVudXMsIHRoZSBjb21tYW5kZXIgb2YgaGlzIGZvcmNlcyBvbiB0aGUgc2VhLWJvYXJkLCB3cm90ZSB0aGF0IHRoZXJlIHdhcyB3aXRoIGhpbSBhIGNlcnRhaW4gVGhlb2RvcnVzLCBvZiBUYXJlbnR1bSwgd2hvIGhhZCB0d28gYm95cyBvZiBzdXJwYXNzaW5nIGJlYXV0eSB0byBzZWxsLCBhbmQgZW5xdWlyZWQgd2hldGhlciBBbGV4YW5kZXIgd291bGQgYnV5IHRoZW0sIEFsZXhhbmRlciB3YXMgaW5jZW5zZWQsIGFuZCBjcmllZCBvdXQgbWFueSB0aW1lcyB0byBoaXMgZnJpZW5kcywgYXNraW5nIHRoZW0gd2hhdCBzaGFtZWZ1bCB0aGluZyBQaGlsb3hlbnVzIGhhZCBldmVyIHNlZW4gaW4gaGltIHRoYXQgaGUgc2hvdWxkIHNwZW5kIGhpcyB0aW1lIGluIG1ha2luZyBzdWNoIGRpc2dyYWNlZnVsIHByb3Bvc2Fscy4gQW5kIG9uIFBoaWxveGVudXMgaGltc2VsZiBoZSBoZWFwZWQgbXVjaCByZXByb2FjaCBpbiBhIGxldHRlciwgYmlkZGluZyBoaW0gc2VuZCBUaGVvZG9ydXMgdG8gcGVyZGl0aW9uLCBtZXJjaGFuZGl6ZSBhbmQgYWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBzZXZlcmVseSByZWJ1a2VkIEhhZ25vbiBhbHNvIGZvciB3cml0aW5nIHRvIGhpbSB0aGF0IGhlIHdhbnRlZCB0byBidXkgQ3JvYnlsdXMsIHdob3NlIGJlYXV0eSB3YXMgZmFtb3VzIGluIENvcmludGgsIGFzIGEgcHJlc2VudCBmb3IgaGltLiBGdXJ0aGVybW9yZSwgb24gbGVhcm5pbmcgdGhhdCBEYW1vbiBhbmQgVGltb3RoZXVzLCB0d28gTWFjZWRvbmlhbiBzb2xkaWVycyB1bmRlciBQYXJtZW5pbydzIGNvbW1hbmQsIGhhZCBydWluZWQgdGhlIHdpdmVzIG9mIGNlcnRhaW4gbWVyY2VuYXJpZXMsIGhlIHdyb3RlIHRvIFBhcm1lbmlvIG9yZGVyaW5nIGhpbSwgaW4gY2FzZSB0aGUgbWVuIHdlcmUgY29udmljdGVkLCB0byBwdW5pc2ggdGhlbSBhbmQgcHV0IHRoZW0gdG8gZGVhdGggYXMgd2lsZCBiZWFzdHMgYm9ybiBmb3IgdGhlIGRlc3RydWN0aW9uIG9mIG1hbmtpbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgbGV0dGVyIGhlIGFsc28gd3JvdGUgZXhwcmVzc2x5IGNvbmNlcm5pbmcgaGltc2VsZjogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXMgZm9yIG1lLCBpbmRlZWQsIGl0IHdpbGwgYmUgZm91bmQgbm90IG9ubHkgdGhhdCBJIGhhdmUgbm90IHNlZW4gdGhlIHdpZmUgb2YgRGFyZWl1cyBvciBkZXNpcmVkIHRvIHNlZSBoZXIsIGJ1dCB0aGF0IEkgaGF2ZSBub3QgZXZlbiBhbGxvd2VkIHBlb3BsZSB0byBzcGVhayB0byBtZSBvZiBoZXIgYmVhdXR5LjwvcT4gQW5kIGhlIHVzZWQgdG8gc2F5IHRoYXQgc2xlZXAgYW5kIHNleHVhbCBpbnRlcmNvdXJzZSwgbW9yZSB0aGFuIGFueSB0aGluZyBlbHNlLCBtYWRlIGhpbSBjb25zY2lvdXMgdGhhdCBoZSB3YXMgbW9ydGFsLCBpbXBseWluZyB0aGF0IGJvdGggd2VhcmluZXNzIGFuZCBwbGVhc3VyZSBhcmlzZSBmcm9tIG9uZSBhbmQgdGhlIHNhbWUgbmF0dXJhbCB3ZWFrbmVzcy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdoZW4gUGhpbG94ZW51cywgdGhlIGNvbW1hbmRlciBvZiBoaXMgZm9yY2VzIG9uIHRoZSBzZWEtYm9hcmQsIHdyb3RlIHRoYXQgdGhlcmUgd2FzIHdpdGggaGltIGEgY2VydGFpbiBUaGVvZG9ydXMsIG9mIFRhcmVudHVtLCB3aG8gaGFkIHR3byBib3lzIG9mIHN1cnBhc3NpbmcgYmVhdXR5IHRvIHNlbGwsIGFuZCBlbnF1aXJlZCB3aGV0aGVyIEFsZXhhbmRlciB3b3VsZCBidXkgdGhlbSwgQWxleGFuZGVyIHdhcyBpbmNlbnNlZCwgYW5kIGNyaWVkIG91dCBtYW55IHRpbWVzIHRvIGhpcyBmcmllbmRzLCBhc2tpbmcgdGhlbSB3aGF0IHNoYW1lZnVsIHRoaW5nIFBoaWxveGVudXMgaGFkIGV2ZXIgc2VlbiBpbiBoaW0gdGhhdCBoZSBzaG91bGQgc3BlbmQgaGlzIHRpbWUgaW4gbWFraW5nIHN1Y2ggZGlzZ3JhY2VmdWwgcHJvcG9zYWxzLiBBbmQgb24gUGhpbG94ZW51cyBoaW1zZWxmIGhlIGhlYXBlZCBtdWNoIHJlcHJvYWNoIGluIGEgbGV0dGVyLCBiaWRkaW5nIGhpbSBzZW5kIFRoZW9kb3J1cyB0byBwZXJkaXRpb24sIG1lcmNoYW5kaXplIGFuZCBhbGwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNldmVyZWx5IHJlYnVrZWQgSGFnbm9uIGFsc28gZm9yIHdyaXRpbmcgdG8gaGltIHRoYXQgaGUgd2FudGVkIHRvIGJ1eSBDcm9ieWx1cywgd2hvc2UgYmVhdXR5IHdhcyBmYW1vdXMgaW4gQ29yaW50aCwgYXMgYSBwcmVzZW50IGZvciBoaW0uIEZ1cnRoZXJtb3JlLCBvbiBsZWFybmluZyB0aGF0IERhbW9uIGFuZCBUaW1vdGhldXMsIHR3byBNYWNlZG9uaWFuIHNvbGRpZXJzIHVuZGVyIFBhcm1lbmlvJ3MgY29tbWFuZCwgaGFkIHJ1aW5lZCB0aGUgd2l2ZXMgb2YgY2VydGFpbiBtZXJjZW5hcmllcywgaGUgd3JvdGUgdG8gUGFybWVuaW8gb3JkZXJpbmcgaGltLCBpbiBjYXNlIHRoZSBtZW4gd2VyZSBjb252aWN0ZWQsIHRvIHB1bmlzaCB0aGVtIGFuZCBwdXQgdGhlbSB0byBkZWF0aCBhcyB3aWxkIGJlYXN0cyBib3JuIGZvciB0aGUgZGVzdHJ1Y3Rpb24gb2YgbWFua2luZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgbGV0dGVyIGhlIGFsc28gd3JvdGUgZXhwcmVzc2x5IGNvbmNlcm5pbmcgaGltc2VsZjogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BcyBmb3IgbWUsIGluZGVlZCwgaXQgd2lsbCBiZSBmb3VuZCBub3Qgb25seSB0aGF0IEkgaGF2ZSBub3Qgc2VlbiB0aGUgd2lmZSBvZiBEYXJlaXVzIG9yIGRlc2lyZWQgdG8gc2VlIGhlciwgYnV0IHRoYXQgSSBoYXZlIG5vdCBldmVuIGFsbG93ZWQgcGVvcGxlIHRvIHNwZWFrIHRvIG1lIG9mIGhlciBiZWF1dHkuPC9xPiBBbmQgaGUgdXNlZCB0byBzYXkgdGhhdCBzbGVlcCBhbmQgc2V4dWFsIGludGVyY291cnNlLCBtb3JlIHRoYW4gYW55IHRoaW5nIGVsc2UsIG1hZGUgaGltIGNvbnNjaW91cyB0aGF0IGhlIHdhcyBtb3J0YWwsIGltcGx5aW5nIHRoYXQgYm90aCB3ZWFyaW5lc3MgYW5kIHBsZWFzdXJlIGFyaXNlIGZyb20gb25lIGFuZCB0aGUgc2FtZSBuYXR1cmFsIHdlYWtuZXNzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBhbHNvIHRoZSBtb3N0IGNvbXBsZXRlIG1hc3Rlcnkgb3ZlciBoaXMgYXBwZXRpdGUsIGFuZCBzaG93ZWQgdGhpcyBib3RoIGluIG1hbnkgb3RoZXIgd2F5cywgYW5kIGVzcGVjaWFsbHkgYnkgd2hhdCBoZSBzYWlkIHRvIEFkYSwgd2hvbSBoZSBob25vdXJlZCB3aXRoIHRoZSB0aXRsZSBvZiBNb3RoZXIgYW5kIG1hZGUgcXVlZW4gb2YgQ2FyaWEuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuMjMuOCI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiBpLiAyMywgODwvYmlibD4uPC9ub3RlPiBXaGVuLCBuYW1lbHksIGluIHRoZSBraW5kbmVzcyBvZiBoZXIgaGVhcnQsIHNoZSB1c2VkIHRvIHNlbmQgaGltIGRheSBieSBkYXkgbWFueSB2aWFuZHMgYW5kIHN3ZWV0bWVhdHMsIGFuZCBmaW5hbGx5IG9mZmVyZWQgaGltIGJha2VycyBhbmQgY29va3MgcmVwdXRlZCB0byBiZSB2ZXJ5IHNraWxmdWwsIGhlIHNhaWQgaGUgd2FudGVkIG5vbmUgb2YgdGhlbSwgZm9yIGhlIGhhZCBiZXR0ZXIgY29va3Mgd2hpY2ggaGFkIGJlZW4gZ2l2ZW4gaGltIGJ5IGhpcyB0dXRvciwgTGVvbmlkYXM7IGZvciBoaXMgYnJlYWtmYXN0LCBuYW1lbHksIGEgbmlnaHQgbWFyY2gsIGFuZCBmb3IgaGlzIHN1cHBlciwgYSBsaWdodCBicmVha2Zhc3QuIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB0aGlzIHNhbWUgTGVvbmlkYXMsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnVzZWQgdG8gY29tZSBhbmQgb3BlbiBteSBjaGVzdHMgb2YgYmVkZGluZyBhbmQgY2xvdGhpbmcsIHRvIHNlZSB0aGF0IG15IG1vdGhlciBkaWQgbm90IGhpZGUgdGhlcmUgZm9yIG1lIHNvbWUgbHV4dXJ5IG9yIHN1cGVyZmx1aXR5LjwvcT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBhbHNvIHRoZSBtb3N0IGNvbXBsZXRlIG1hc3Rlcnkgb3ZlciBoaXMgYXBwZXRpdGUsIGFuZCBzaG93ZWQgdGhpcyBib3RoIGluIG1hbnkgb3RoZXIgd2F5cywgYW5kIGVzcGVjaWFsbHkgYnkgd2hhdCBoZSBzYWlkIHRvIEFkYSwgd2hvbSBoZSBob25vdXJlZCB3aXRoIHRoZSB0aXRsZSBvZiBNb3RoZXIgYW5kIG1hZGUgcXVlZW4gb2YgQ2FyaWEuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAxLjIzLjgiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiAyMywgODwvYmlibD4uPC9ub3RlPiBXaGVuLCBuYW1lbHksIGluIHRoZSBraW5kbmVzcyBvZiBoZXIgaGVhcnQsIHNoZSB1c2VkIHRvIHNlbmQgaGltIGRheSBieSBkYXkgbWFueSB2aWFuZHMgYW5kIHN3ZWV0bWVhdHMsIGFuZCBmaW5hbGx5IG9mZmVyZWQgaGltIGJha2VycyBhbmQgY29va3MgcmVwdXRlZCB0byBiZSB2ZXJ5IHNraWxmdWwsIGhlIHNhaWQgaGUgd2FudGVkIG5vbmUgb2YgdGhlbSwgZm9yIGhlIGhhZCBiZXR0ZXIgY29va3Mgd2hpY2ggaGFkIGJlZW4gZ2l2ZW4gaGltIGJ5IGhpcyB0dXRvciwgTGVvbmlkYXM7IGZvciBoaXMgYnJlYWtmYXN0LCBuYW1lbHksIGEgbmlnaHQgbWFyY2gsIGFuZCBmb3IgaGlzIHN1cHBlciwgYSBsaWdodCBicmVha2Zhc3QuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuMjMuOCI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDIzLCA4PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDIzLCA4PHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgdGhpcyBzYW1lIExlb25pZGFzLDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnVzZWQgdG8gY29tZSBhbmQgb3BlbiBteSBjaGVzdHMgb2YgYmVkZGluZyBhbmQgY2xvdGhpbmcsIHRvIHNlZSB0aGF0IG15IG1vdGhlciBkaWQgbm90IGhpZGUgdGhlcmUgZm9yIG1lIHNvbWUgbHV4dXJ5IG9yIHN1cGVyZmx1aXR5LjwvcT4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhlIHVzZSBvZiB3aW5lIGFsc28gaGUgd2FzIGxlc3MgYWRkaWN0ZWQgdGhhbiB3YXMgZ2VuZXJhbGx5IGJlbGlldmVkLiBUaGUgYmVsaWVmIGFyb3NlIGZyb20gdGhlIHRpbWUgd2hpY2ggaGUgd291bGQgc3BlbmQgb3ZlciBlYWNoIGN1cCwgbW9yZSBpbiB0YWxraW5nIHRoYW4gaW4gZHJpbmtpbmcsIGFsd2F5cyBob2xkaW5nIHNvbWUgbG9uZyBkaXNjb3Vyc2UsIGFuZCB0aGlzIHRvbyB3aGVuIGhlIGhhZCBhYnVuZGFudCBsZWlzdXJlLiBGb3IgaW4gdGhlIHN0cmVzcyBvZiBhZmZhaXJzIGhlIHdhcyBub3QgdG8gYmUgZGV0YWluZWQsIGFzIG90aGVyIGNvbW1hbmRlcnMgd2VyZSwgZWl0aGVyIGJ5IHdpbmUsIG9yIHNsZWVwLCBvciBhbnkgc3BvcnQsIG9yIGFtb3VyLCBvciBzcGVjdGFjbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgcHJvdmVkIGJ5IGhpcyBsaWZlLCB3aGljaCB0aG91Z2ggYWx0b2dldGhlciBicmllZiwgaGUgZmlsbGVkIHRvIG92ZXJmbG93aW5nIHdpdGggdGhlIGdyZWF0ZXN0IGV4cGxvaXRzLiBJbiBoaXMgdGltZXMgb2YgbGVpc3VyZSwgaG93ZXZlciwgYWZ0ZXIgcmlzaW5nIGFuZCBzYWNyaWZpY2luZyB0byB0aGUgZ29kcywgaGUgaW1tZWRpYXRlbHkgdG9vayBicmVha2Zhc3Qgc2l0dGluZzsgdGhlbiwgaGUgd291bGQgc3BlbmQgdGhlIGRheSBpbiBodW50aW5nLCBvciBhZG1pbmlzdGVyaW5nIGp1c3RpY2UsIG9yIGFycmFuZ2luZyBoaXMgbWlsaXRhcnkgYWZmYWlycywgb3IgcmVhZGluZy4gSWYgaGUgd2VyZSBtYWtpbmcgYSBtYXJjaCB3aGljaCB3YXMgbm90IHZlcnkgdXJnZW50LCBoZSB3b3VsZCBwcmFjdGlzZSwgYXMgaGUgd2VudCBhbG9uZywgZWl0aGVyIGFyY2hlcnkgb3IgbW91bnRpbmcgYW5kIGRpc21vdW50aW5nIGZyb20gYSBjaGFyaW90IHRoYXQgd2FzIHVuZGVyIHdheS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T2Z0ZW4sIHRvbywgZm9yIGRpdmVyc2lvbiwgaGUgd291bGQgaHVudCBmb3hlcyBvciBiaXJkcywgYXMgbWF5IGJlIGdhdGhlcmVkIGZyb20gaGlzIGpvdXJuYWxzLiBBZnRlciBoZSBoYWQgdGFrZW4gcXVhcnRlcnMgZm9yIHRoZSBuaWdodCwgYW5kIHdoaWxlIGhlIHdhcyBlbmpveWluZyBiYXRoIG9yIGFub2ludGluZywgaGUgd291bGQgZW5xdWlyZSBvZiBoaXMgY2hpZWYgY29va3MgYW5kIGJha2VycyB3aGV0aGVyIHRoZSBhcnJhbmdlbWVudHMgZm9yIGhpcyBzdXBwZXIgd2VyZSBkdWx5IG1hZGUuIFdoZW4gaXQgd2FzIGxhdGUgYW5kIGFscmVhZHkgZGFyaywgaGUgd291bGQgYmVnaW4gaGlzIHN1cHBlciwgcmVjbGluaW5nIG9uIGEgY291Y2gsIGFuZCBtYXJ2ZWxsb3VzIHdhcyBoaXMgY2FyZSBhbmQgY2lyY3Vtc3BlY3Rpb24gYXQgdGFibGUsIGluIG9yZGVyIHRoYXQgZXZlcnl0aGluZyBtaWdodCBiZSBzZXJ2ZWQgaW1wYXJ0aWFsbHkgYW5kIHdpdGhvdXQgc3RpbnQ7IGJ1dCBvdmVyIHRoZSB3aW5lLCBhcyBJIGhhdmUgc2FpZCwgaGUgd291bGQgc2l0IGxvbmcsIGZvciBjb252ZXJzYXRpb24ncyBzYWtlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWx0aG91Z2ggaW4gb3RoZXIgd2F5cyBoZSB3YXMgb2YgYWxsIHByaW5jZXMgbW9zdCBhZ3JlZWFibGUgaW4gaGlzIGludGVyY291cnNlLCBhbmQgZW5kb3dlZCB3aXRoIGV2ZXJ5IGdyYWNlLCBhdCB0aGlzIHRpbWUgaGlzIGJvYXN0ZnVsbmVzcyB3b3VsZCBtYWtlIGhpbSB1bnBsZWFzYW50IGFuZCB2ZXJ5IGxpa2UgYSBjb21tb24gc29sZGllci4gTm90IG9ubHkgd2FzIGhlIGhpbXNlbGYgY2FycmllZCBhd2F5IGludG8gYmx1c3RlcmluZywgYnV0IGhlIHN1ZmZlcmVkIGhpbXNlbGYgdG8gYmUgcmlkZGVuIGJ5IGhpcyBmbGF0dGVyZXJzLiBUaGVzZSB3ZXJlIGEgZ3JlYXQgYW5ub3lhbmNlIHRvIHRoZSBmaW5lciBzcGlyaXRzIGluIHRoZSBjb21wYW55LCB3aG8gZGVzaXJlZCBuZWl0aGVyIHRvIHZpZSB3aXRoIHRoZSBmbGF0dGVyZXJzLCBub3IgeWV0IHRvIGZhbGwgYmVoaW5kIHRoZW0gaW4gcHJhaXNpbmcgQWxleGFuZGVyLiBUaGUgb25lIGNvdXJzZSB0aGV5IHRob3VnaHQgZGlzZ3JhY2VmdWwsIHRoZSBvdGhlciBoYWQgaXRzIHBlcmlscy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGRyaW5raW5nIHdhcyBvdmVyLCBoZSB3b3VsZCB0YWtlIGEgYmF0aCBhbmQgc2xlZXAsIGZyZXF1ZW50bHkgdW50aWwgbWlkZGF5OyBhbmQgc29tZXRpbWVzIGhlIHdvdWxkIGFjdHVhbGx5IHNwZW5kIHRoZSBlbnRpcmUgZGF5IGluIHNsZWVwLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhlIHVzZSBvZiB3aW5lIGFsc28gaGUgd2FzIGxlc3MgYWRkaWN0ZWQgdGhhbiB3YXMgZ2VuZXJhbGx5IGJlbGlldmVkLiBUaGUgYmVsaWVmIGFyb3NlIGZyb20gdGhlIHRpbWUgd2hpY2ggaGUgd291bGQgc3BlbmQgb3ZlciBlYWNoIGN1cCwgbW9yZSBpbiB0YWxraW5nIHRoYW4gaW4gZHJpbmtpbmcsIGFsd2F5cyBob2xkaW5nIHNvbWUgbG9uZyBkaXNjb3Vyc2UsIGFuZCB0aGlzIHRvbyB3aGVuIGhlIGhhZCBhYnVuZGFudCBsZWlzdXJlLiBGb3IgaW4gdGhlIHN0cmVzcyBvZiBhZmZhaXJzIGhlIHdhcyBub3QgdG8gYmUgZGV0YWluZWQsIGFzIG90aGVyIGNvbW1hbmRlcnMgd2VyZSwgZWl0aGVyIGJ5IHdpbmUsIG9yIHNsZWVwLCBvciBhbnkgc3BvcnQsIG9yIGFtb3VyLCBvciBzcGVjdGFjbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgcHJvdmVkIGJ5IGhpcyBsaWZlLCB3aGljaCB0aG91Z2ggYWx0b2dldGhlciBicmllZiwgaGUgZmlsbGVkIHRvIG92ZXJmbG93aW5nIHdpdGggdGhlIGdyZWF0ZXN0IGV4cGxvaXRzLiBJbiBoaXMgdGltZXMgb2YgbGVpc3VyZSwgaG93ZXZlciwgYWZ0ZXIgcmlzaW5nIGFuZCBzYWNyaWZpY2luZyB0byB0aGUgZ29kcywgaGUgaW1tZWRpYXRlbHkgdG9vayBicmVha2Zhc3Qgc2l0dGluZzsgdGhlbiwgaGUgd291bGQgc3BlbmQgdGhlIGRheSBpbiBodW50aW5nLCBvciBhZG1pbmlzdGVyaW5nIGp1c3RpY2UsIG9yIGFycmFuZ2luZyBoaXMgbWlsaXRhcnkgYWZmYWlycywgb3IgcmVhZGluZy4gSWYgaGUgd2VyZSBtYWtpbmcgYSBtYXJjaCB3aGljaCB3YXMgbm90IHZlcnkgdXJnZW50LCBoZSB3b3VsZCBwcmFjdGlzZSwgYXMgaGUgd2VudCBhbG9uZywgZWl0aGVyIGFyY2hlcnkgb3IgbW91bnRpbmcgYW5kIGRpc21vdW50aW5nIGZyb20gYSBjaGFyaW90IHRoYXQgd2FzIHVuZGVyIHdheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9mdGVuLCB0b28sIGZvciBkaXZlcnNpb24sIGhlIHdvdWxkIGh1bnQgZm94ZXMgb3IgYmlyZHMsIGFzIG1heSBiZSBnYXRoZXJlZCBmcm9tIGhpcyBqb3VybmFscy4gQWZ0ZXIgaGUgaGFkIHRha2VuIHF1YXJ0ZXJzIGZvciB0aGUgbmlnaHQsIGFuZCB3aGlsZSBoZSB3YXMgZW5qb3lpbmcgYmF0aCBvciBhbm9pbnRpbmcsIGhlIHdvdWxkIGVucXVpcmUgb2YgaGlzIGNoaWVmIGNvb2tzIGFuZCBiYWtlcnMgd2hldGhlciB0aGUgYXJyYW5nZW1lbnRzIGZvciBoaXMgc3VwcGVyIHdlcmUgZHVseSBtYWRlLiBXaGVuIGl0IHdhcyBsYXRlIGFuZCBhbHJlYWR5IGRhcmssIGhlIHdvdWxkIGJlZ2luIGhpcyBzdXBwZXIsIHJlY2xpbmluZyBvbiBhIGNvdWNoLCBhbmQgbWFydmVsbG91cyB3YXMgaGlzIGNhcmUgYW5kIGNpcmN1bXNwZWN0aW9uIGF0IHRhYmxlLCBpbiBvcmRlciB0aGF0IGV2ZXJ5dGhpbmcgbWlnaHQgYmUgc2VydmVkIGltcGFydGlhbGx5IGFuZCB3aXRob3V0IHN0aW50OyBidXQgb3ZlciB0aGUgd2luZSwgYXMgSSBoYXZlIHNhaWQsIGhlIHdvdWxkIHNpdCBsb25nLCBmb3IgY29udmVyc2F0aW9uJ3Mgc2FrZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhbHRob3VnaCBpbiBvdGhlciB3YXlzIGhlIHdhcyBvZiBhbGwgcHJpbmNlcyBtb3N0IGFncmVlYWJsZSBpbiBoaXMgaW50ZXJjb3Vyc2UsIGFuZCBlbmRvd2VkIHdpdGggZXZlcnkgZ3JhY2UsIGF0IHRoaXMgdGltZSBoaXMgYm9hc3RmdWxuZXNzIHdvdWxkIG1ha2UgaGltIHVucGxlYXNhbnQgYW5kIHZlcnkgbGlrZSBhIGNvbW1vbiBzb2xkaWVyLiBOb3Qgb25seSB3YXMgaGUgaGltc2VsZiBjYXJyaWVkIGF3YXkgaW50byBibHVzdGVyaW5nLCBidXQgaGUgc3VmZmVyZWQgaGltc2VsZiB0byBiZSByaWRkZW4gYnkgaGlzIGZsYXR0ZXJlcnMuIFRoZXNlIHdlcmUgYSBncmVhdCBhbm5veWFuY2UgdG8gdGhlIGZpbmVyIHNwaXJpdHMgaW4gdGhlIGNvbXBhbnksIHdobyBkZXNpcmVkIG5laXRoZXIgdG8gdmllIHdpdGggdGhlIGZsYXR0ZXJlcnMsIG5vciB5ZXQgdG8gZmFsbCBiZWhpbmQgdGhlbSBpbiBwcmFpc2luZyBBbGV4YW5kZXIuIFRoZSBvbmUgY291cnNlIHRoZXkgdGhvdWdodCBkaXNncmFjZWZ1bCwgdGhlIG90aGVyIGhhZCBpdHMgcGVyaWxzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBkcmlua2luZyB3YXMgb3ZlciwgaGUgd291bGQgdGFrZSBhIGJhdGggYW5kIHNsZWVwLCBmcmVxdWVudGx5IHVudGlsIG1pZGRheTsgYW5kIHNvbWV0aW1lcyBoZSB3b3VsZCBhY3R1YWxseSBzcGVuZCB0aGUgZW50aXJlIGRheSBpbiBzbGVlcC48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtYXR0ZXIgb2YgZGVsaWNhY2llcywgdG9vLCBoZSBoaW1zZWxmLCBhdCBhbGwgZXZlbnRzLCB3YXMgbWFzdGVyIG9mIGhpcyBhcHBldGl0ZSwgc28gdGhhdCBvZnRlbiwgd2hlbiB0aGUgcmFyZXN0IGZydWl0cyBvciBmaXNoIHdlcmUgYnJvdWdodCB0byBoaW0gZnJvbSB0aGUgc2VhLWNvYXN0LCBoZSB3b3VsZCBkaXN0cmlidXRlIHRoZW0gdG8gZWFjaCBvZiBoaXMgY29tcGFuaW9ucyB1bnRpbCBoZSB3YXMgdGhlIG9ubHkgb25lIGZvciB3aG9tIG5vdGhpbmcgcmVtYWluZWQuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHN1cHBlcnMsIGhvd2V2ZXIsIHdlcmUgYWx3YXlzIG1hZ25pZmljZW50LCBhbmQgdGhlIG91dGxheSB1cG9uIHRoZW0gaW5jcmVhc2VkIHdpdGggaGlzIHN1Y2Nlc3NlcyB1bnRpbCBpdCByZWFjaGVkIHRoZSBzdW0gb2YgdGVuIHRob3VzYW5kIGRyYWNobWFzLiBUaGVyZSBpdCBzdG9vZCwgYW5kIHRoYXQgd2FzIHRoZSBwcmVzY3JpYmVkIGxpbWl0IG9mIGV4cGVuZGl0dXJlIGZvciB0aG9zZSB3aG8gZW50ZXJ0YWluZWQgQWxleGFuZGVyLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBzdXBwZXJzLCBob3dldmVyLCB3ZXJlIGFsd2F5cyBtYWduaWZpY2VudCwgYW5kIHRoZSBvdXRsYXkgdXBvbiB0aGVtIGluY3JlYXNlZCB3aXRoIGhpcyBzdWNjZXNzZXMgdW50aWwgaXQgcmVhY2hlZCB0aGUgc3VtIG9mIHRlbiB0aG91c2FuZCBkcmFjaG1hcy4gVGhlcmUgaXQgc3Rvb2QsIGFuZCB0aGF0IHdhcyB0aGUgcHJlc2NyaWJlZCBsaW1pdCBvZiBleHBlbmRpdHVyZSBmb3IgdGhvc2Ugd2hvIGVudGVydGFpbmVkIEFsZXhhbmRlci48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgYmF0dGxlIGF0IElzc3VzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm92ZW1iZXIsIDMzMyBCLkMuPC9ub3RlPiBoZSBzZW50IHRvIERhbWFzY3VzIGFuZCBzZWl6ZWQgdGhlIG1vbmV5IGFuZCBiYWdnYWdlIG9mIHRoZSBQZXJzaWFucyB0b2dldGhlciB3aXRoIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbi4gQW5kIG1vc3Qgb2YgYWxsIGRpZCB0aGUgVGhlc3NhbGlhbiBob3JzZW1lbiBlbnJpY2ggdGhlbXNlbHZlcywgZm9yIHRoZXkgaGFkIHNob3duIHRoZW1zZWx2ZXMgc3VycGFzc2luZ2x5IGJyYXZlIGluIHRoZSBiYXR0bGUsIGFuZCBBbGV4YW5kZXIgc2VudCB0aGVtIG9uIHRoaXMgZXhwZWRpdGlvbiBwdXJwb3NlbHksIHdpc2hpbmcgdG8gaGF2ZSB0aGVtIGVucmljaCB0aGVtc2VsdmVzLiBCdXQgdGhlIHJlc3Qgb2YgdGhlIGFybXkgYWxzbyB3YXMgZmlsbGVkIHdpdGggd2VhbHRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGZvciB0aGUgZmlyc3QgdGltZSB0aGUgTWFjZWRvbmlhbnMgZ290IGEgdGFzdGUgb2YgZ29sZCBhbmQgc2lsdmVyIGFuZCB3b21lbiBhbmQgYmFyYmFyaWMgbHV4dXJ5IG9mIGxpZmUsIGFuZCBub3cgdGhhdCB0aGV5IGhhZCBzdHJ1Y2sgdGhlIHRyYWlsLCB0aGV5IHdlcmUgbGlrZSBkb2dzIGluIHRoZWlyIGVhZ2VybmVzcyB0byBwdXJzdWUgYW5kIHRyYWNrIGRvd24gdGhlIHdlYWx0aCBvZiB0aGUgUGVyc2lhbnMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGJhdHRsZSBhdCBJc3N1cywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm92ZW1iZXIsIDMzMyBCLkMuPC9ub3RlPiBoZSBzZW50IHRvIERhbWFzY3VzIGFuZCBzZWl6ZWQgdGhlIG1vbmV5IGFuZCBiYWdnYWdlIG9mIHRoZSBQZXJzaWFucyB0b2dldGhlciB3aXRoIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbi4gQW5kIG1vc3Qgb2YgYWxsIGRpZCB0aGUgVGhlc3NhbGlhbiBob3JzZW1lbiBlbnJpY2ggdGhlbXNlbHZlcywgZm9yIHRoZXkgaGFkIHNob3duIHRoZW1zZWx2ZXMgc3VycGFzc2luZ2x5IGJyYXZlIGluIHRoZSBiYXR0bGUsIGFuZCBBbGV4YW5kZXIgc2VudCB0aGVtIG9uIHRoaXMgZXhwZWRpdGlvbiBwdXJwb3NlbHksIHdpc2hpbmcgdG8gaGF2ZSB0aGVtIGVucmljaCB0aGVtc2VsdmVzLiBCdXQgdGhlIHJlc3Qgb2YgdGhlIGFybXkgYWxzbyB3YXMgZmlsbGVkIHdpdGggd2VhbHRoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gZm9yIHRoZSBmaXJzdCB0aW1lIHRoZSBNYWNlZG9uaWFucyBnb3QgYSB0YXN0ZSBvZiBnb2xkIGFuZCBzaWx2ZXIgYW5kIHdvbWVuIGFuZCBiYXJiYXJpYyBsdXh1cnkgb2YgbGlmZSwgYW5kIG5vdyB0aGF0IHRoZXkgaGFkIHN0cnVjayB0aGUgdHJhaWwsIHRoZXkgd2VyZSBsaWtlIGRvZ3MgaW4gdGhlaXIgZWFnZXJuZXNzIHRvIHB1cnN1ZSBhbmQgdHJhY2sgZG93biB0aGUgd2VhbHRoIG9mIHRoZSBQZXJzaWFucy48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhvd2V2ZXIsIEFsZXhhbmRlciBkZXRlcm1pbmVkIGZpcnN0IHRvIG1ha2UgaGltc2VsZiBtYXN0ZXIgb2YgdGhlIHNlYS1jb2FzdHMuIEFzIGZvciBDeXBydXMsIHRoZW4sIGl0cyBraW5ncyBjYW1lIGF0IG9uY2UgYW5kIHB1dCB0aGUgaXNsYW5kIGluIGhpcyBoYW5kcywgdG9nZXRoZXIgd2l0aCBQaG9lbmljaWEsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBUeXJlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBUeXJlIGhlIGJlc2llZ2VkIGZvciBzZXZlbiBtb250aHMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5KYW51YXJ54oCUQXVndXN0LCAzMzIgQi5DLjwvbm90ZT4gd2l0aCBtb2xlcywgYW5kIGVuZ2luZXMtb2Ytd2FyLCBhbmQgdHdvIGh1bmRyZWQgdHJpcmVtZXMgYnkgc2VhLiBEdXJpbmcgdGhpcyBzaWVnZSBoZSBoYWQgYSBkcmVhbSBpbiB3aGljaCBoZSBzYXcgSGVyYWNsZXMgc3RyZXRjaGluZyBvdXQgaGlzIGhhbmQgdG8gaGltIGZyb20gdGhlIHdhbGwgYW5kIGNhbGxpbmcgaGltLiBBbmQgbWFueSBvZiB0aGUgVHlyaWFucyBkcmVhbWVkIHRoYXQgQXBvbGxvIHRvbGQgdGhlbSBoZSB3YXMgZ29pbmcgYXdheSB0byBBbGV4YW5kZXIsIHNpbmNlIGhlIHdhcyBkaXNwbGVhc2VkIGF0IHdoYXQgd2FzIGdvaW5nIG9uIGluIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVyZXVwb24sIGFzIGlmIHRoZSBnb2QgaGFkIGJlZW4gYSBjb21tb24gZGVzZXJ0ZXIgY2F1Z2h0IGluIHRoZSBhY3Qgb2YgZ29pbmcgb3ZlciB0byB0aGUgZW5lbXksIHRoZXkgZW5jaXJjbGVkIGhpcyBjb2xvc3NhbCBmaWd1cmUgd2l0aCBjb3JkcyBhbmQgbmFpbGVkIGl0IGRvd24gdG8gaXRzIHBlZGVzdGFsLCBjYWxsaW5nIGhpbSBhbiBBbGV4YW5kcmlzdC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SW4gYW5vdGhlciBkcmVhbSwgdG9vLCBBbGV4YW5kZXIgdGhvdWdodCBoZSBzYXcgYSBzYXR5ciB3aG8gbW9ja2VkIGhpbSBhdCBhIGRpc3RhbmNlLCBhbmQgZWx1ZGVkIGhpcyBncmFzcCB3aGVuIGhlIHRyaWVkIHRvIGNhdGNoIGhpbSwgYnV0IGZpbmFsbHksIGFmdGVyIG11Y2ggY29heGluZyBhbmQgY2hhc2luZywgc3VycmVuZGVyZWQuIFRoZSBzZWVycywgZGl2aWRpbmcgdGhlIHdvcmQgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c2F0eXJvczwvcT4gaW50byB0d28gcGFydHMsIHNhaWQgdG8gaGltLCBwbGF1c2libHkgZW5vdWdoLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlR5cmUgaXMgdG8gYmUgdGhpbmUuPC9xPiBBbmQgYSBzcHJpbmcgaXMgcG9pbnRlZCBvdXQsIG5lYXIgd2hpY2ggQWxleGFuZGVyIGRyZWFtZWQgaGUgc2F3IHRoZSBzYXR5ci48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBUeXJlIGhlIGJlc2llZ2VkIGZvciBzZXZlbiBtb250aHMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkphbnVhcnnigJRBdWd1c3QsIDMzMiBCLkMuPC9ub3RlPiB3aXRoIG1vbGVzLCBhbmQgZW5naW5lcy1vZi13YXIsIGFuZCB0d28gaHVuZHJlZCB0cmlyZW1lcyBieSBzZWEuIER1cmluZyB0aGlzIHNpZWdlIGhlIGhhZCBhIGRyZWFtIGluIHdoaWNoIGhlIHNhdyBIZXJhY2xlcyBzdHJldGNoaW5nIG91dCBoaXMgaGFuZCB0byBoaW0gZnJvbSB0aGUgd2FsbCBhbmQgY2FsbGluZyBoaW0uIEFuZCBtYW55IG9mIHRoZSBUeXJpYW5zIGRyZWFtZWQgdGhhdCBBcG9sbG8gdG9sZCB0aGVtIGhlIHdhcyBnb2luZyBhd2F5IHRvIEFsZXhhbmRlciwgc2luY2UgaGUgd2FzIGRpc3BsZWFzZWQgYXQgd2hhdCB3YXMgZ29pbmcgb24gaW4gdGhlIGNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZXJldXBvbiwgYXMgaWYgdGhlIGdvZCBoYWQgYmVlbiBhIGNvbW1vbiBkZXNlcnRlciBjYXVnaHQgaW4gdGhlIGFjdCBvZiBnb2luZyBvdmVyIHRvIHRoZSBlbmVteSwgdGhleSBlbmNpcmNsZWQgaGlzIGNvbG9zc2FsIGZpZ3VyZSB3aXRoIGNvcmRzIGFuZCBuYWlsZWQgaXQgZG93biB0byBpdHMgcGVkZXN0YWwsIGNhbGxpbmcgaGltIGFuIEFsZXhhbmRyaXN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIGFub3RoZXIgZHJlYW0sIHRvbywgQWxleGFuZGVyIHRob3VnaHQgaGUgc2F3IGEgc2F0eXIgd2hvIG1vY2tlZCBoaW0gYXQgYSBkaXN0YW5jZSwgYW5kIGVsdWRlZCBoaXMgZ3Jhc3Agd2hlbiBoZSB0cmllZCB0byBjYXRjaCBoaW0sIGJ1dCBmaW5hbGx5LCBhZnRlciBtdWNoIGNvYXhpbmcgYW5kIGNoYXNpbmcsIHN1cnJlbmRlcmVkLiBUaGUgc2VlcnMsIGRpdmlkaW5nIHRoZSB3b3JkIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c2F0eXJvczwvcT4gaW50byB0d28gcGFydHMsIHNhaWQgdG8gaGltLCBwbGF1c2libHkgZW5vdWdoLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VHlyZSBpcyB0byBiZSB0aGluZS48L3E+IEFuZCBhIHNwcmluZyBpcyBwb2ludGVkIG91dCwgbmVhciB3aGljaCBBbGV4YW5kZXIgZHJlYW1lZCBoZSBzYXcgdGhlIHNhdHlyLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHRoZSBzaWVnZSBvZiB0aGUgY2l0eSB3YXMgaW4gcHJvZ3Jlc3MsIGhlIG1hZGUgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBBcmFiaWFucyB3aG8gZHdlbHQgaW4gdGhlIG5laWdoYm91cmhvb2Qgb2YgTW91bnQgQW50aWxpYmFudXMuIE9uICB0aGlzIGV4cGVkaXRpb24gaGUgcmlza2VkIGhpcyBsaWZlIHRvIHNhdmUgaGlzIHR1dG9yLCBMeXNpbWFjaHVzLCB3aG8gaW5zaXN0ZWQgb24gZm9sbG93aW5nIGhpbSwgZGVjbGFyaW5nIGhpbXNlbGYgdG8gYmUgbmVpdGhlciBvbGRlciBub3Igd2Vha2VyIHRoYW4gUGhvZW5peC4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNS41IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHYuIDU8L2JpYmw+Ljwvbm90ZT4gQnV0IHdoZW4gdGhlIGZvcmNlIGRyZXcgbmVhciB0aGUgbW91bnRhaW5zLCB0aGV5IGFiYW5kb25lZCB0aGVpciBob3JzZXMgYW5kIHByb2NlZWRlZCBvbiBmb290LCBhbmQgbW9zdCBvZiB0aGVtIGdvdCBmYXIgb24gaW4gYWR2YW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QWxleGFuZGVyIGhpbXNlbGYsIGhvd2V2ZXIsIHdvdWxkIG5vdCBjb25zZW50IHRvIGFiYW5kb24gdGhlIHdvcm4gYW5kIHdlYXJ5IEx5c2ltYWNodXMsIHNpbmNlIGV2ZW5pbmcgd2FzIGFscmVhZHkgY29taW5nIG9uIGFuZCB0aGUgZW5lbXkgd2VyZSBuZWFyLCBidXQgc291Z2h0IHRvIGVuY291cmFnZSBoaW0gYW5kIGNhcnJ5IGhpbSBhbG9uZy4gQmVmb3JlIGhlIHdhcyBhd2FyZSBvZiBpdCwgdGhlcmVmb3JlLCBoZSB3YXMgc2VwYXJhdGVkIGZyb20gaGlzIGFybXkgd2l0aCBhIGZldyBmb2xsb3dlcnMsIGFuZCBoYWQgdG8gc3BlbmQgYSBuaWdodCBvZiBkYXJrbmVzcyBhbmQgaW50ZW5zZSBjb2xkIGluIGEgcmVnaW9uIHRoYXQgd2FzIHJvdWdoIGFuZCBkaWZmaWN1bHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgcGxpZ2h0LCBoZSBzYXcgZmFyIG9mZiBhIG51bWJlciBvZiBzY2F0dGVyZWQgZmlyZXMgd2hpY2ggdGhlIGVuZW15IHdlcmUgYnVybmluZy4gU28sIHNpbmNlIGhlIHdhcyBjb25maWRlbnQgaW4gaGlzIG93biBhZ2lsaXR5LCBhbmQgd2FzIGV2ZXIgd29udCB0byBjaGVlciB0aGUgTWFjZWRvbmlhbnMgaW4gdGhlaXIgcGVycGxleGl0aWVzIGJ5IHNoYXJpbmcgdGhlaXIgdG9pbHMsIGhlIHJhbiB0byB0aGUgbmVhcmVzdCBjYW1wLWZpcmUuIFR3byBCYXJiYXJpYW5zIHdobyB3ZXJlIHNpdHRpbmcgYXQgdGhlIGZpcmUgaGUgZGVzcGF0Y2hlZCB3aXRoIGhpcyBkYWdnZXIsIGFuZCBzbmF0Y2hpbmcgdXAgYSBmaXJlLWJyYW5kLCBicm91Z2h0IGl0IHRvIGhpcyBvd24gcGFydHkuIFRoZXNlIGtpbmRsZWQgYSBncmVhdCBmaXJlIGFuZCBhdCBvbmNlIGZyaWdodGVuZWQgc29tZSBvZiB0aGUgZW5lbXkgaW50byBmbGlnaHQsIHJvdXRlZCBvdGhlcnMgd2hvIGNhbWUgdXAgYWdhaW5zdCB0aGVtLCBhbmQgc3BlbnQgdGhlIG5pZ2h0IHdpdGhvdXQgZnVydGhlciBwZXJpbC4gU3VjaCwgdGhlbiwgaXMgdGhlIGFjY291bnQgd2UgaGF2ZSBmcm9tIENoYXJlcy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHRoZSBzaWVnZSBvZiB0aGUgY2l0eSB3YXMgaW4gcHJvZ3Jlc3MsIGhlIG1hZGUgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBBcmFiaWFucyB3aG8gZHdlbHQgaW4gdGhlIG5laWdoYm91cmhvb2Qgb2YgTW91bnQgQW50aWxpYmFudXMuIE9uICB0aGlzIGV4cGVkaXRpb24gaGUgcmlza2VkIGhpcyBsaWZlIHRvIHNhdmUgaGlzIHR1dG9yLCBMeXNpbWFjaHVzLCB3aG8gaW5zaXN0ZWQgb24gZm9sbG93aW5nIGhpbSwgZGVjbGFyaW5nIGhpbXNlbGYgdG8gYmUgbmVpdGhlciBvbGRlciBub3Igd2Vha2VyIHRoYW4gUGhvZW5peC4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDUuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB2LiA1PC9iaWJsPi48L25vdGU+IEJ1dCB3aGVuIHRoZSBmb3JjZSBkcmV3IG5lYXIgdGhlIG1vdW50YWlucywgdGhleSBhYmFuZG9uZWQgdGhlaXIgaG9yc2VzIGFuZCBwcm9jZWVkZWQgb24gZm9vdCwgYW5kIG1vc3Qgb2YgdGhlbSBnb3QgZmFyIG9uIGluIGFkdmFuY2UuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNS41IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHYuIDU8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['24.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFsZXhhbmRlciBoaW1zZWxmLCBob3dldmVyLCB3b3VsZCBub3QgY29uc2VudCB0byBhYmFuZG9uIHRoZSB3b3JuIGFuZCB3ZWFyeSBMeXNpbWFjaHVzLCBzaW5jZSBldmVuaW5nIHdhcyBhbHJlYWR5IGNvbWluZyBvbiBhbmQgdGhlIGVuZW15IHdlcmUgbmVhciwgYnV0IHNvdWdodCB0byBlbmNvdXJhZ2UgaGltIGFuZCBjYXJyeSBoaW0gYWxvbmcuIEJlZm9yZSBoZSB3YXMgYXdhcmUgb2YgaXQsIHRoZXJlZm9yZSwgaGUgd2FzIHNlcGFyYXRlZCBmcm9tIGhpcyBhcm15IHdpdGggYSBmZXcgZm9sbG93ZXJzLCBhbmQgaGFkIHRvIHNwZW5kIGEgbmlnaHQgb2YgZGFya25lc3MgYW5kIGludGVuc2UgY29sZCBpbiBhIHJlZ2lvbiB0aGF0IHdhcyByb3VnaCBhbmQgZGlmZmljdWx0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgcGxpZ2h0LCBoZSBzYXcgZmFyIG9mZiBhIG51bWJlciBvZiBzY2F0dGVyZWQgZmlyZXMgd2hpY2ggdGhlIGVuZW15IHdlcmUgYnVybmluZy4gU28sIHNpbmNlIGhlIHdhcyBjb25maWRlbnQgaW4gaGlzIG93biBhZ2lsaXR5LCBhbmQgd2FzIGV2ZXIgd29udCB0byBjaGVlciB0aGUgTWFjZWRvbmlhbnMgaW4gdGhlaXIgcGVycGxleGl0aWVzIGJ5IHNoYXJpbmcgdGhlaXIgdG9pbHMsIGhlIHJhbiB0byB0aGUgbmVhcmVzdCBjYW1wLWZpcmUuIFR3byBCYXJiYXJpYW5zIHdobyB3ZXJlIHNpdHRpbmcgYXQgdGhlIGZpcmUgaGUgZGVzcGF0Y2hlZCB3aXRoIGhpcyBkYWdnZXIsIGFuZCBzbmF0Y2hpbmcgdXAgYSBmaXJlLWJyYW5kLCBicm91Z2h0IGl0IHRvIGhpcyBvd24gcGFydHkuIFRoZXNlIGtpbmRsZWQgYSBncmVhdCBmaXJlIGFuZCBhdCBvbmNlIGZyaWdodGVuZWQgc29tZSBvZiB0aGUgZW5lbXkgaW50byBmbGlnaHQsIHJvdXRlZCBvdGhlcnMgd2hvIGNhbWUgdXAgYWdhaW5zdCB0aGVtLCBhbmQgc3BlbnQgdGhlIG5pZ2h0IHdpdGhvdXQgZnVydGhlciBwZXJpbC4gU3VjaCwgdGhlbiwgaXMgdGhlIGFjY291bnQgd2UgaGF2ZSBmcm9tIENoYXJlcy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2llZ2Ugb2YgdGhlIGNpdHkgaGFkIHRoZSBmb2xsb3dpbmcgaXNzdWUuIFdoaWxlIEFsZXhhbmRlciB3YXMgZ2l2aW5nIHRoZSBncmVhdGVyIHBhcnQgb2YgaGlzIGZvcmNlcyBhIHJlc3QgZnJvbSB0aGUgbWFueSBzdHJ1Z2dsZXMgd2hpY2ggdGhleSBoYWQgdW5kZXJnb25lLCBhbmQgd2FzIGxlYWRpbmcgdXAgb25seSBhIGZldyBtZW4gdG8gYXR0YWNrIHRoZSB3YWxscywgaW4gb3JkZXIgdGhhdCB0aGUgZW5lbXkgbWlnaHQgaGF2ZSBubyByZXNwaXRlLCBBcmlzdGFuZGVyIHRoZSBzZWVyIG1hZGUgYSBzYWNyaWZpY2UsIGFuZCBhZnRlciB0YWtpbmcgdGhlIG9tZW5zLCBkZWNsYXJlZCB2ZXJ5IGNvbmZpZGVudGx5IHRvIHRoZSBieXN0YW5kZXJzIHRoYXQgdGhlIGNpdHkgd291bGQgY2VydGFpbmx5IGJlIGNhcHR1cmVkIGR1cmluZyB0aGF0IG1vbnRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgd29yZHMgcHJvZHVjZWQgbGF1Z2h0ZXIgYW5kIGplc3RpbmcsIHNpbmNlIGl0IHdhcyB0aGVuIHRoZSBsYXN0IGRheSBvZiB0aGUgbW9udGgsIGFuZCB0aGUga2luZywgc2VlaW5nIHRoYXQgaGUgd2FzIHBlcnBsZXhlZCwgYW5kIGJlaW5nIGFsd2F5cyBlYWdlciB0byBzdXBwb3J0IGhpcyBwcm9waGVjaWVzLCBnYXZlIG9yZGVycyB0byByZWNrb24gdGhhdCBkYXksIG5vdCBhcyB0aGUgdGhpcnRpZXRoIG9mIHRoZSBtb250aCwgYnV0IGFzIHRoZSB0d2VudHktZWlnaHRoOyBhbmQgdGhlbiwgYWZ0ZXIgdGhlIHRydW1wZXQgaGFkIHNvdW5kZWQgdGhlIHNpZ25hbCwgaGUgYXR0YWNrZWQgdGhlIHdhbGxzIHdpdGggZ3JlYXRlciB2aWdvdXIgdGhhbiBoZSBoYWQgYXQgZmlyc3QgaW50ZW5kZWQuIFRoZSBhc3NhdWx0IGJlY2FtZSBmaWVyY2UsIGFuZCBldmVuIHRob3NlIHRyb29wcyB3aGljaCBoYWQgYmVlbiBsZWZ0IGluIGNhbXAgY291bGQgbm90IHJlc3RyYWluIHRoZW1zZWx2ZXMsIGJ1dCByYW4gaW4gdGhyb25ncyB0byBoZWxwIHRoZSBhc3NhaWxhbnRzLCBhbmQgdGhlIFR5cmlhbnMgZ2F2ZSB1cCB0aGUgZmlnaHQuIFNvIEFsZXhhbmRlciB0b29rIHRoZSBjaXR5IG9uIHRoYXQgZGF5LjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNpZWdlIG9mIHRoZSBjaXR5IGhhZCB0aGUgZm9sbG93aW5nIGlzc3VlLiBXaGlsZSBBbGV4YW5kZXIgd2FzIGdpdmluZyB0aGUgZ3JlYXRlciBwYXJ0IG9mIGhpcyBmb3JjZXMgYSByZXN0IGZyb20gdGhlIG1hbnkgc3RydWdnbGVzIHdoaWNoIHRoZXkgaGFkIHVuZGVyZ29uZSwgYW5kIHdhcyBsZWFkaW5nIHVwIG9ubHkgYSBmZXcgbWVuIHRvIGF0dGFjayB0aGUgd2FsbHMsIGluIG9yZGVyIHRoYXQgdGhlIGVuZW15IG1pZ2h0IGhhdmUgbm8gcmVzcGl0ZSwgQXJpc3RhbmRlciB0aGUgc2VlciBtYWRlIGEgc2FjcmlmaWNlLCBhbmQgYWZ0ZXIgdGFraW5nIHRoZSBvbWVucywgZGVjbGFyZWQgdmVyeSBjb25maWRlbnRseSB0byB0aGUgYnlzdGFuZGVycyB0aGF0IHRoZSBjaXR5IHdvdWxkIGNlcnRhaW5seSBiZSBjYXB0dXJlZCBkdXJpbmcgdGhhdCBtb250aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyB3b3JkcyBwcm9kdWNlZCBsYXVnaHRlciBhbmQgamVzdGluZywgc2luY2UgaXQgd2FzIHRoZW4gdGhlIGxhc3QgZGF5IG9mIHRoZSBtb250aCwgYW5kIHRoZSBraW5nLCBzZWVpbmcgdGhhdCBoZSB3YXMgcGVycGxleGVkLCBhbmQgYmVpbmcgYWx3YXlzIGVhZ2VyIHRvIHN1cHBvcnQgaGlzIHByb3BoZWNpZXMsIGdhdmUgb3JkZXJzIHRvIHJlY2tvbiB0aGF0IGRheSwgbm90IGFzIHRoZSB0aGlydGlldGggb2YgdGhlIG1vbnRoLCBidXQgYXMgdGhlIHR3ZW50eS1laWdodGg7IGFuZCB0aGVuLCBhZnRlciB0aGUgdHJ1bXBldCBoYWQgc291bmRlZCB0aGUgc2lnbmFsLCBoZSBhdHRhY2tlZCB0aGUgd2FsbHMgd2l0aCBncmVhdGVyIHZpZ291ciB0aGFuIGhlIGhhZCBhdCBmaXJzdCBpbnRlbmRlZC4gVGhlIGFzc2F1bHQgYmVjYW1lIGZpZXJjZSwgYW5kIGV2ZW4gdGhvc2UgdHJvb3BzIHdoaWNoIGhhZCBiZWVuIGxlZnQgaW4gY2FtcCBjb3VsZCBub3QgcmVzdHJhaW4gdGhlbXNlbHZlcywgYnV0IHJhbiBpbiB0aHJvbmdzIHRvIGhlbHAgdGhlIGFzc2FpbGFudHMsIGFuZCB0aGUgVHlyaWFucyBnYXZlIHVwIHRoZSBmaWdodC4gU28gQWxleGFuZGVyIHRvb2sgdGhlIGNpdHkgb24gdGhhdCBkYXkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgYXMgaGUgd2FzIGdpdmluZyBzaWVnZSB0byBHYXphLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RHVyaW5nIFNlcHRlbWJlciBhbmQgT2N0b2JlciBvZiAzMzIgQi5DLjwvbm90ZT4gdGhlIHByaW5jaXBhbCBjaXR5IG9mIFN5cmlhLCBhIGNsb2Qgb2YgZWFydGgsIHdoaWNoIGhhZCBiZWVuIGRyb3BwZWQgZnJvbSBvbiBoaWdoIGJ5IGEgYmlyZCwgc3RydWNrIGhpbSBvbiB0aGUgc2hvdWxkZXIuIFRoZSBiaXJkIGFsaWdodGVkIG9uIG9uZSBvZiB0aGUgYmF0dGVyaW5nLWVuZ2luZXMsIGFuZCB3YXMgYXQgb25jZSBjYXVnaHQgaW4gdGhlIG5ldHdvcmsgb2Ygc2luZXdzIHdoaWNoIHdlcmUgdXNlZCB0byBnaXZlIGEgdHdpc3QgdG8gdGhlIHJvcGVzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDdXJ0LiA0LjYuMTEiPkN1cnRpdXMsIDx0aXRsZT5IaXN0LiBBbGV4LjwvdGl0bGU+IGl2LiA2LCAxMSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlIG9tZW4gd2FzIGZ1bGZpbGxlZCBhcyBBcmlzdGFuZGVyIHByZWRpY3RlZDsgZm9yIHRob3VnaCBBbGV4YW5kZXIgd2FzIHdvdW5kZWQgaW4gdGhlIHNob3VsZGVyLCBoZSB0b29rIHRoZSBjaXR5LiBNb3Jlb3ZlciwgYXMgaGUgd2FzIGRpc3BhdGNoaW5nIGdyZWF0IHF1YW50aXRpZXMgb2YgdGhlIHNwb2lscyBob21lIHRvIE9seW1waWFzIGFuZCBDbGVvcGF0cmEgYW5kIGhpcyBmcmllbmRzLCBoZSBzZW50IGFsc28gdG8gTGVvbmlkYXMgaGlzIHR1dG9yIGZpdmUgaHVuZHJlZCB0YWxlbnRzJyB3ZWlnaHQgb2YgZnJhbmtpbmNlbnNlIGFuZCBhIGh1bmRyZWQgb2YgbXlycmgsIGluIHJlbWVtYnJhbmNlIG9mIHRoZSBob3BlIHdpdGggd2hpY2ggdGhhdCB0ZWFjaGVyIGhhZCBpbnNwaXJlZCBoaXMgYm95aG9vZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd291bGQgc2VlbSwgbmFtZWx5LCB0aGF0IExlb25pZGFzLCBhcyBBbGV4YW5kZXIgd2FzIG9uZSBkYXkgc2FjcmlmaWNpbmcgYW5kIHRha2luZyBpbmNlbnNlIHdpdGggYm90aCBoYW5kcyB0byB0aHJvdyB1cG9uIHRoZSBhbHRhci1maXJlLCBzYWlkIHRvIGhpbTrigJQ8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbGV4YW5kZXIsIHdoZW4gdGhvdSBoYXN0IGNvbnF1ZXJlZCB0aGUgc3BpY2UtYmVhcmluZyByZWdpb25zIHRob3UgY2Fuc3QgYmUgdGh1cyBsYXZpc2ggd2l0aCB0aGluZSBpbmNlbnNlOyBub3csIGhvd2V2ZXIsIHVzZSBzcGFyaW5nbHkgd2hhdCB0aG91IGhhc3QuPC9xPiBBY2NvcmRpbmdseSwgQWxleGFuZGVyIG5vdyB3cm90ZSBoaW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoYXZlIHNlbnQgdGhlZSBteXJyaCBhbmQgZnJhbmtpbmNlbnNlIGluIGFidW5kYW5jZSwgdGhhdCB0aG91IG1heWVzdCBzdG9wIGRlYWxpbmcgcGFyc2ltb25pb3VzbHkgd2l0aCB0aGUgZ29kcy48L3E+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIGFzIGhlIHdhcyBnaXZpbmcgc2llZ2UgdG8gR2F6YSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RHVyaW5nIFNlcHRlbWJlciBhbmQgT2N0b2JlciBvZiAzMzIgQi5DLjwvbm90ZT4gdGhlIHByaW5jaXBhbCBjaXR5IG9mIFN5cmlhLCBhIGNsb2Qgb2YgZWFydGgsIHdoaWNoIGhhZCBiZWVuIGRyb3BwZWQgZnJvbSBvbiBoaWdoIGJ5IGEgYmlyZCwgc3RydWNrIGhpbSBvbiB0aGUgc2hvdWxkZXIuIFRoZSBiaXJkIGFsaWdodGVkIG9uIG9uZSBvZiB0aGUgYmF0dGVyaW5nLWVuZ2luZXMsIGFuZCB3YXMgYXQgb25jZSBjYXVnaHQgaW4gdGhlIG5ldHdvcmsgb2Ygc2luZXdzIHdoaWNoIHdlcmUgdXNlZCB0byBnaXZlIGEgdHdpc3QgdG8gdGhlIHJvcGVzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ3VydC4gNC42LjExIj5DdXJ0aXVzLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IaXN0LiBBbGV4LjwvdGl0bGU+IGl2LiA2LCAxMSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkN1cnQuIDQuNi4xMSI+Q3VydGl1cywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGlzdC4gQWxleC48L3RpdGxlPiBpdi4gNiwgMTEgZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhpc3QuIEFsZXguPC90aXRsZT4gaXYuIDYsIDExIGYuPC90cmFuc2xhdGlvbj4="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgb21lbiB3YXMgZnVsZmlsbGVkIGFzIEFyaXN0YW5kZXIgcHJlZGljdGVkOyBmb3IgdGhvdWdoIEFsZXhhbmRlciB3YXMgd291bmRlZCBpbiB0aGUgc2hvdWxkZXIsIGhlIHRvb2sgdGhlIGNpdHkuIE1vcmVvdmVyLCBhcyBoZSB3YXMgZGlzcGF0Y2hpbmcgZ3JlYXQgcXVhbnRpdGllcyBvZiB0aGUgc3BvaWxzIGhvbWUgdG8gT2x5bXBpYXMgYW5kIENsZW9wYXRyYSBhbmQgaGlzIGZyaWVuZHMsIGhlIHNlbnQgYWxzbyB0byBMZW9uaWRhcyBoaXMgdHV0b3IgZml2ZSBodW5kcmVkIHRhbGVudHMnIHdlaWdodCBvZiBmcmFua2luY2Vuc2UgYW5kIGEgaHVuZHJlZCBvZiBteXJyaCwgaW4gcmVtZW1icmFuY2Ugb2YgdGhlIGhvcGUgd2l0aCB3aGljaCB0aGF0IHRlYWNoZXIgaGFkIGluc3BpcmVkIGhpcyBib3lob29kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdvdWxkIHNlZW0sIG5hbWVseSwgdGhhdCBMZW9uaWRhcywgYXMgQWxleGFuZGVyIHdhcyBvbmUgZGF5IHNhY3JpZmljaW5nIGFuZCB0YWtpbmcgaW5jZW5zZSB3aXRoIGJvdGggaGFuZHMgdG8gdGhyb3cgdXBvbiB0aGUgYWx0YXItZmlyZSwgc2FpZCB0byBoaW064oCUPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbGV4YW5kZXIsIHdoZW4gdGhvdSBoYXN0IGNvbnF1ZXJlZCB0aGUgc3BpY2UtYmVhcmluZyByZWdpb25zIHRob3UgY2Fuc3QgYmUgdGh1cyBsYXZpc2ggd2l0aCB0aGluZSBpbmNlbnNlOyBub3csIGhvd2V2ZXIsIHVzZSBzcGFyaW5nbHkgd2hhdCB0aG91IGhhc3QuPC9xPiBBY2NvcmRpbmdseSwgQWxleGFuZGVyIG5vdyB3cm90ZSBoaW06IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGhhdmUgc2VudCB0aGVlIG15cnJoIGFuZCBmcmFua2luY2Vuc2UgaW4gYWJ1bmRhbmNlLCB0aGF0IHRob3UgbWF5ZXN0IHN0b3AgZGVhbGluZyBwYXJzaW1vbmlvdXNseSB3aXRoIHRoZSBnb2RzLjwvcT4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBhIHNtYWxsIGNvZmZlciB3YXMgYnJvdWdodCB0byBoaW0sIHdoaWNoIHRob3NlIGluIGNoYXJnZSBvZiB0aGUgYmFnZ2FnZSBhbmQgd2VhbHRoIG9mIERhcmVpdXMgdGhvdWdodCB0aGUgbW9zdCBwcmVjaW91cyB0aGluZyB0aGVyZSwgaGUgYXNrZWQgaGlzIGZyaWVuZHMgd2hhdCB2YWx1YWJsZSBvYmplY3QgdGhleSB0aG91Z2h0IHdvdWxkIG1vc3QgZml0dGluZ2x5IGJlIGRlcG9zaXRlZCBpbiBpdC4gQW5kIHdoZW4gbWFueSBhbnN3ZXJlZCBhbmQgdGhlcmUgd2VyZSBtYW55IG9waW5pb25zLCBBbGV4YW5kZXIgaGltc2VsZiBzYWlkIGhlIHdhcyBnb2luZyB0byBkZXBvc2l0IHRoZSBJbGlhZCB0aGVyZSBmb3Igc2FmZSBrZWVwaW5nLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiA4LjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmlpaS4gMjwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIGF0dGVzdGVkIGJ5IG1hbnkgdHJ1c3R3b3J0aHkgYXV0aG9yaXRpZXMuIEFuZCBpZiB3aGF0IHRoZSBBbGV4YW5kcmlhbnMgdGVsbCB1cyBvbiB0aGUgYXV0aG9yaXR5IG9mIEhlcmFjbGVpZGVzIGlzIHRydWUsIHRoZW4gaXQgd291bGQgc2VlbSB0aGF0IEhvbWVyIHdhcyBubyBpZGxlIG9yIHVucHJvZml0YWJsZSBjb21wYW5pb24gZm9yIGhpbSBpbiBoaXMgZXhwZWRpdGlvbi4gVGhleSBzYXksIG5hbWVseSwgdGhhdCBhZnRlciBoaXMgY29ucXVlc3Qgb2YgRWd5cHQgaGUgd2lzaGVkIHRvIGZvdW5kIGEgbGFyZ2UgYW5kIHBvcHVsb3VzIEdyZWVrIGNpdHkgd2hpY2ggc2hvdWxkIGJlYXIgaGlzIG5hbWUsIGFuZCBieSB0aGUgYWR2aWNlIG9mIGhpcyBhcmNoaXRlY3RzIHdhcyBvbiB0aGUgcG9pbnQgb2YgbWVhc3VyaW5nIG9mZiBhbmQgZW5jbG9zaW5nIGEgY2VydGFpbiBzaXRlIGZvciBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgaW4gdGhlIG5pZ2h0LCBhcyBoZSBsYXkgYXNsZWVwLCBoZSBzYXcgYSB3b25kZXJmdWwgdmlzaW9uLiBBIG1hbiB3aXRoIHZlcnkgaG9hcnkgbG9ja3MgYW5kIG9mIGEgdmVuZXJhYmxlIGFzcGVjdCBhcHBlYXJlZCB0byBzdGFuZCBieSBoaXMgc2lkZSBhbmQgcmVjaXRlIHRoZXNlIHZlcnNlczrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+Tm93LCB0aGVyZSBpcyBhbiBpc2xhbmQgaW4gdGhlIG11Y2gtZGFzaGluZyBzZWEsIEluIGZyb250IG9mIEVneXB0OyBQaGFyb3MgaXMgd2hhdCBtZW4gY2FsbCBpdC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgoJCQkJCSAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gNC4zNTQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+T2R5c3NleTwvdGl0bGU+LCBpdi4gMzU0IGYuPC9iaWJsPgoJCQkJICAgICAgICA8L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBhIHNtYWxsIGNvZmZlciB3YXMgYnJvdWdodCB0byBoaW0sIHdoaWNoIHRob3NlIGluIGNoYXJnZSBvZiB0aGUgYmFnZ2FnZSBhbmQgd2VhbHRoIG9mIERhcmVpdXMgdGhvdWdodCB0aGUgbW9zdCBwcmVjaW91cyB0aGluZyB0aGVyZSwgaGUgYXNrZWQgaGlzIGZyaWVuZHMgd2hhdCB2YWx1YWJsZSBvYmplY3QgdGhleSB0aG91Z2h0IHdvdWxkIG1vc3QgZml0dGluZ2x5IGJlIGRlcG9zaXRlZCBpbiBpdC4gQW5kIHdoZW4gbWFueSBhbnN3ZXJlZCBhbmQgdGhlcmUgd2VyZSBtYW55IG9waW5pb25zLCBBbGV4YW5kZXIgaGltc2VsZiBzYWlkIGhlIHdhcyBnb2luZyB0byBkZXBvc2l0IHRoZSBJbGlhZCB0aGVyZSBmb3Igc2FmZSBrZWVwaW5nLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gOC4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHZpaWkuIDI8L2JpYmw+Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiA4LjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmlpaS4gMjwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgYXR0ZXN0ZWQgYnkgbWFueSB0cnVzdHdvcnRoeSBhdXRob3JpdGllcy4gQW5kIGlmIHdoYXQgdGhlIEFsZXhhbmRyaWFucyB0ZWxsIHVzIG9uIHRoZSBhdXRob3JpdHkgb2YgSGVyYWNsZWlkZXMgaXMgdHJ1ZSwgdGhlbiBpdCB3b3VsZCBzZWVtIHRoYXQgSG9tZXIgd2FzIG5vIGlkbGUgb3IgdW5wcm9maXRhYmxlIGNvbXBhbmlvbiBmb3IgaGltIGluIGhpcyBleHBlZGl0aW9uLiBUaGV5IHNheSwgbmFtZWx5LCB0aGF0IGFmdGVyIGhpcyBjb25xdWVzdCBvZiBFZ3lwdCBoZSB3aXNoZWQgdG8gZm91bmQgYSBsYXJnZSBhbmQgcG9wdWxvdXMgR3JlZWsgY2l0eSB3aGljaCBzaG91bGQgYmVhciBoaXMgbmFtZSwgYW5kIGJ5IHRoZSBhZHZpY2Ugb2YgaGlzIGFyY2hpdGVjdHMgd2FzIG9uIHRoZSBwb2ludCBvZiBtZWFzdXJpbmcgb2ZmIGFuZCBlbmNsb3NpbmcgYSBjZXJ0YWluIHNpdGUgZm9yIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGluIHRoZSBuaWdodCwgYXMgaGUgbGF5IGFzbGVlcCwgaGUgc2F3IGEgd29uZGVyZnVsIHZpc2lvbi4gQSBtYW4gd2l0aCB2ZXJ5IGhvYXJ5IGxvY2tzIGFuZCBvZiBhIHZlbmVyYWJsZSBhc3BlY3QgYXBwZWFyZWQgdG8gc3RhbmQgYnkgaGlzIHNpZGUgYW5kIHJlY2l0ZSB0aGVzZSB2ZXJzZXM64oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3csIHRoZXJlIGlzIGFuIGlzbGFuZCBpbiB0aGUgbXVjaC1kYXNoaW5nIHNlYSwgSW4gZnJvbnQgb2YgRWd5cHQ7IFBoYXJvcyBpcyB3aGF0IG1lbiBjYWxsIGl0LjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3csIHRoZXJlIGlzIGFuIGlzbGFuZCBpbiB0aGUgbXVjaC1kYXNoaW5nIHNlYSwgSW4gZnJvbnQgb2YgRWd5cHQ7IFBoYXJvcyBpcyB3aGF0IG1lbiBjYWxsIGl0LjwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gNC4zNTQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGl2LiAzNTQgZi48L2JpYmw+CgkJCQkgICAgICAgIDwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gNC4zNTQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGl2LiAzNTQgZi48L2JpYmw+CgkJCQkgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaXYuIDM1NCBmLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWNjb3JkaW5nbHksIGhlIHJvc2UgdXAgYXQgb25jZSBhbmQgd2VudCB0byBQaGFyb3MsIHdoaWNoIGF0IHRoYXQgdGltZSB3YXMgc3RpbGwgYW4gaXNsYW5kLCBhIGxpdHRsZSBhYm92ZSB0aGUgQ2Fub2JpYyBtb3V0aCBvZiB0aGUgTmlsZSwgYnV0IG5vdyBpdCBoYXMgYmVlbiBqb2luZWQgdG8gdGhlIG1haW5sYW5kIGJ5IGEgY2F1c2V3YXkuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gaGUgc2F3IGEgc2l0ZSBvZiBzdXJwYXNzaW5nIG5hdHVyYWwgYWR2YW50YWdlcyAoZm9yIGl0IGlzIGEgc3RyaXAgb2YgbGFuZCBsaWtlIGVub3VnaCB0byBhIGJyb2FkIGlzdGhtdXMgZXh0ZW5kaW5nIGJldHdlZW4gYSBncmVhdCBsYWdvb24gYW5kIGEgc3RyZXRjaCBvZiBzZWEgd2hpY2ggdGVybWluYXRlcyBpbiBhIGxhcmdlIGhhcmJvdXIpLCBoZSBzYWlkIGhlIHNhdyBub3cgdGhhdCBIb21lciB3YXMgbm90IG9ubHkgYWRtaXJhYmxlIGluIG90aGVyIHdheXMsIGJ1dCBhbHNvIGEgdmVyeSB3aXNlIGFyY2hpdGVjdCwgYW5kIG9yZGVyZWQgdGhlIHBsYW4gb2YgdGhlIGNpdHkgdG8gYmUgZHJhd24gaW4gY29uZm9ybWl0eSB3aXRoIHRoaXMgc2l0ZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2FzIG5vIGNoYWxrIGF0IGhhbmQsIHNvIHRoZXkgdG9vayBiYXJsZXktbWVhbAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjIuMSI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiAgaWlpLiAyLCAxPC9iaWJsPi48L25vdGU+IGFuZCBtYXJrZWQgb3V0IHdpdGggaXQgb24gdGhlIGRhcmsgc29pbCBhIHJvdW5kZWQgYXJlYSwgdG8gd2hvc2UgaW5uZXIgYXJjIHN0cmFpZ2h0IGxpbmVzIGV4dGVuZGVkIHNvIGFzIHRvIHByb2R1Y2UgdGhlIGZpZ3VyZSBvZiBhIGNobGFteXMsIG9yIG1pbGl0YXJ5IGNsb2FrLCB0aGUgbGluZXMgYmVnaW5uaW5nIGZyb20gdGhlIHNraXJ0cyAoYXMgb25lIG1heSBzYXkpLCBhbmQgbmFycm93aW5nIHRoZSBicmVhZHRoIG9mIHRoZSBhcmVhIHVuaWZvcm1seS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSBUYXJiZWxsLCA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgRm9ybSBvZiB0aGUgQ2hsYW15cyw8L3E+IAogICAgICAgICAgICAgICA8dGl0bGU+Q2xhc3NpY2FsIFBoaWxvbG9neTwvdGl0bGU+LCAxOTA2LCBwLiAyODUuPC9ub3RlPiBUaGUga2luZyB3YXMgZGVsaWdodGVkIHdpdGggdGhlIGRlc2lnbjsgYnV0IHN1ZGRlbmx5IGJpcmRzIGZyb20gdGhlIHJpdmVyIGFuZCB0aGUgbGFnb29uLCBpbmZpbml0ZSBpbiBudW1iZXIgYW5kIG9mIGV2ZXJ5IHNvcnQgYW5kIHNpemUsIHNldHRsZWQgZG93biB1cG9uIHRoZSBwbGFjZSBsaWtlIGNsb3VkcyBhbmQgZGV2b3VyZWQgZXZlcnkgcGFydGljbGUgb2YgdGhlIGJhcmxleS1tZWFsLCBzbyB0aGF0IGV2ZW4gQWxleGFuZGVyIHdhcyBncmVhdGx5IGRpc3R1cmJlZCBhdCB0aGUgb21lbi48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGhlIHNhdyBhIHNpdGUgb2Ygc3VycGFzc2luZyBuYXR1cmFsIGFkdmFudGFnZXMgKGZvciBpdCBpcyBhIHN0cmlwIG9mIGxhbmQgbGlrZSBlbm91Z2ggdG8gYSBicm9hZCBpc3RobXVzIGV4dGVuZGluZyBiZXR3ZWVuIGEgZ3JlYXQgbGFnb29uIGFuZCBhIHN0cmV0Y2ggb2Ygc2VhIHdoaWNoIHRlcm1pbmF0ZXMgaW4gYSBsYXJnZSBoYXJib3VyKSwgaGUgc2FpZCBoZSBzYXcgbm93IHRoYXQgSG9tZXIgd2FzIG5vdCBvbmx5IGFkbWlyYWJsZSBpbiBvdGhlciB3YXlzLCBidXQgYWxzbyBhIHZlcnkgd2lzZSBhcmNoaXRlY3QsIGFuZCBvcmRlcmVkIHRoZSBwbGFuIG9mIHRoZSBjaXR5IHRvIGJlIGRyYXduIGluIGNvbmZvcm1pdHkgd2l0aCB0aGlzIHNpdGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBubyBjaGFsayBhdCBoYW5kLCBzbyB0aGV5IHRvb2sgYmFybGV5LW1lYWwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMi4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gIGlpaS4gMiwgMTwvYmlibD4uPC9ub3RlPiBhbmQgbWFya2VkIG91dCB3aXRoIGl0IG9uIHRoZSBkYXJrIHNvaWwgYSByb3VuZGVkIGFyZWEsIHRvIHdob3NlIGlubmVyIGFyYyBzdHJhaWdodCBsaW5lcyBleHRlbmRlZCBzbyBhcyB0byBwcm9kdWNlIHRoZSBmaWd1cmUgb2YgYSBjaGxhbXlzLCBvciBtaWxpdGFyeSBjbG9haywgdGhlIGxpbmVzIGJlZ2lubmluZyBmcm9tIHRoZSBza2lydHMgKGFzIG9uZSBtYXkgc2F5KSwgYW5kIG5hcnJvd2luZyB0aGUgYnJlYWR0aCBvZiB0aGUgYXJlYSB1bmlmb3JtbHkuCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjIuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+ICBpaWkuIDIsIDE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gIGlpaS4gMiwgMTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIFRhcmJlbGwsIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIEZvcm0gb2YgdGhlIENobGFteXMsPC9xPiAKICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xhc3NpY2FsIFBoaWxvbG9neTwvdGl0bGU+LCAxOTA2LCBwLiAyODUuPC9ub3RlPiBUaGUga2luZyB3YXMgZGVsaWdodGVkIHdpdGggdGhlIGRlc2lnbjsgYnV0IHN1ZGRlbmx5IGJpcmRzIGZyb20gdGhlIHJpdmVyIGFuZCB0aGUgbGFnb29uLCBpbmZpbml0ZSBpbiBudW1iZXIgYW5kIG9mIGV2ZXJ5IHNvcnQgYW5kIHNpemUsIHNldHRsZWQgZG93biB1cG9uIHRoZSBwbGFjZSBsaWtlIGNsb3VkcyBhbmQgZGV2b3VyZWQgZXZlcnkgcGFydGljbGUgb2YgdGhlIGJhcmxleS1tZWFsLCBzbyB0aGF0IGV2ZW4gQWxleGFuZGVyIHdhcyBncmVhdGx5IGRpc3R1cmJlZCBhdCB0aGUgb21lbi48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSBGb3JtIG9mIHRoZSBDaGxhbXlzLDwvcT4gCiAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsYXNzaWNhbCBQaGlsb2xvZ3k8L3RpdGxlPiwgMTkwNiwgcC4gMjg1LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBzZWVycyBleGhvcnRlZCBoaW0gdG8gYmUgb2YgZ29vZCBjaGVlciwgc2luY2UgdGhlIGNpdHkgaGVyZSBmb3VuZGVkIGJ5IGhpbSB3b3VsZCBoYXZlIG1vc3QgYWJ1bmRhbnQgYW5kIGhlbHBmdWwgcmVzb3VyY2VzIGFuZCBiZSBhIG51cnNpbmcgbW90aGVyIGZvciBtZW4gb2YgZXZlcnkgbmF0aW9uLCBhbmQgc28gaGUgb3JkZXJlZCB0aG9zZSBpbiBjaGFyZ2Ugb2YgdGhlIHdvcmsgdG8gcHJvY2VlZCB3aXRoIGl0LCB3aGlsZSBoZSBoaW1zZWxmIHNldCBvdXQgZm9yIHRoZSB0ZW1wbGUgb2YgQW1tb24uIFRoZSBqb3VybmV5IHRoaXRoZXIgd2FzIGxvbmcsIGZ1bGwgb2YgdG9pbHMgYW5kIGhhcmRzaGlwcywgYW5kIGhhZCB0d28gcGVyaWxzLiBPbmUgaXMgdGhlIGRlYXJ0aCBvZiB3YXRlciwgd2hpY2ggbGVhdmVzIHRoZSB0cmF2ZWxsZXIgZGVzdGl0dXRlIG9mIGl0IGZvciBtYW55IGRheXM7IHRoZSBvdGhlciBhcmlzZXMgd2hlbiBhIGZpZXJjZSBzb3V0aCB3aW5kIHNtaXRlcyBtZW4gdHJhdmVsbGluZyBpbiBzYW5kIG9mIGJvdW5kbGVzcyBkZXB0aCwgYXMgaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGNhc2Ugd2l0aCB0aGUgYXJteSBvZiBDYW1ieXNlcywgbG9uZyBhZ287IHRoZSB3aW5kIHJhaXNlZCBncmVhdCBiaWxsb3dzIG9mIHNhbmQgYWxsIG92ZXIgdGhlIHBsYWluIGFuZCBidXJpZWQgdXAgZmlmdHkgdGhvdXNhbmQgbWVuLCB0byB0aGVpciB1dHRlciBkZXN0cnVjdGlvbi4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSGR0LiAzLjI2IiB2YWxpZD0ieWVzIj5IZXJvZC4gaWlpLiAyNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QWxtb3N0IGFsbCBvZiBBbGV4YW5kZXIncyBmb2xsb3dlcnMgdG9vayBhbGwgdGhlc2UgdGhpbmdzIGludG8gY29uc2lkZXJhdGlvbiwgYnV0IGl0IHdhcyBkaWZmaWN1bHQgdG8gdHVybiBoaW0gYXNpZGUgZnJvbSBhbnkgY291cnNlIHNvIGV2ZXIgd2hlbiBoZSBoYWQgb25jZSBzZXQgb3V0IHVwb24gaXQuIEZvciBGb3J0dW5lLCBieSB5aWVsZGluZyB0byBoaXMgb25zZXRzLCB3YXMgbWFraW5nIGhpcyBwdXJwb3NlIG9ic3RpbmF0ZSwgYW5kIHRoZSBoaWdoIHNwaXJpdCB3aGljaCBoZSBjYXJyaWVkIGludG8gaGlzIHVuZGVydGFraW5ncyByZW5kZXJlZCBoaXMgYW1iaXRpb24gZmluYWxseSBpbnZpbmNpYmxlLCBzbyB0aGF0IGl0IHN1YmR1ZWQgbm90IG9ubHkgZW5lbWllcywgYnV0IGV2ZW4gdGltZXMgYW5kIHBsYWNlcy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBzZWVycyBleGhvcnRlZCBoaW0gdG8gYmUgb2YgZ29vZCBjaGVlciwgc2luY2UgdGhlIGNpdHkgaGVyZSBmb3VuZGVkIGJ5IGhpbSB3b3VsZCBoYXZlIG1vc3QgYWJ1bmRhbnQgYW5kIGhlbHBmdWwgcmVzb3VyY2VzIGFuZCBiZSBhIG51cnNpbmcgbW90aGVyIGZvciBtZW4gb2YgZXZlcnkgbmF0aW9uLCBhbmQgc28gaGUgb3JkZXJlZCB0aG9zZSBpbiBjaGFyZ2Ugb2YgdGhlIHdvcmsgdG8gcHJvY2VlZCB3aXRoIGl0LCB3aGlsZSBoZSBoaW1zZWxmIHNldCBvdXQgZm9yIHRoZSB0ZW1wbGUgb2YgQW1tb24uIFRoZSBqb3VybmV5IHRoaXRoZXIgd2FzIGxvbmcsIGZ1bGwgb2YgdG9pbHMgYW5kIGhhcmRzaGlwcywgYW5kIGhhZCB0d28gcGVyaWxzLiBPbmUgaXMgdGhlIGRlYXJ0aCBvZiB3YXRlciwgd2hpY2ggbGVhdmVzIHRoZSB0cmF2ZWxsZXIgZGVzdGl0dXRlIG9mIGl0IGZvciBtYW55IGRheXM7IHRoZSBvdGhlciBhcmlzZXMgd2hlbiBhIGZpZXJjZSBzb3V0aCB3aW5kIHNtaXRlcyBtZW4gdHJhdmVsbGluZyBpbiBzYW5kIG9mIGJvdW5kbGVzcyBkZXB0aCwgYXMgaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGNhc2Ugd2l0aCB0aGUgYXJteSBvZiBDYW1ieXNlcywgbG9uZyBhZ287IHRoZSB3aW5kIHJhaXNlZCBncmVhdCBiaWxsb3dzIG9mIHNhbmQgYWxsIG92ZXIgdGhlIHBsYWluIGFuZCBidXJpZWQgdXAgZmlmdHkgdGhvdXNhbmQgbWVuLCB0byB0aGVpciB1dHRlciBkZXN0cnVjdGlvbi4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gMy4yNiIgdmFsaWQ9InllcyI+SGVyb2QuIGlpaS4gMjYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiAzLjI2IiB2YWxpZD0ieWVzIj5IZXJvZC4gaWlpLiAyNi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFsbW9zdCBhbGwgb2YgQWxleGFuZGVyJ3MgZm9sbG93ZXJzIHRvb2sgYWxsIHRoZXNlIHRoaW5ncyBpbnRvIGNvbnNpZGVyYXRpb24sIGJ1dCBpdCB3YXMgZGlmZmljdWx0IHRvIHR1cm4gaGltIGFzaWRlIGZyb20gYW55IGNvdXJzZSBzbyBldmVyIHdoZW4gaGUgaGFkIG9uY2Ugc2V0IG91dCB1cG9uIGl0LiBGb3IgRm9ydHVuZSwgYnkgeWllbGRpbmcgdG8gaGlzIG9uc2V0cywgd2FzIG1ha2luZyBoaXMgcHVycG9zZSBvYnN0aW5hdGUsIGFuZCB0aGUgaGlnaCBzcGlyaXQgd2hpY2ggaGUgY2FycmllZCBpbnRvIGhpcyB1bmRlcnRha2luZ3MgcmVuZGVyZWQgaGlzIGFtYml0aW9uIGZpbmFsbHkgaW52aW5jaWJsZSwgc28gdGhhdCBpdCBzdWJkdWVkIG5vdCBvbmx5IGVuZW1pZXMsIGJ1dCBldmVuIHRpbWVzIGFuZCBwbGFjZXMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYWxsIGV2ZW50cywgZHVyaW5nIHRoZSBqb3VybmV5IHdoaWNoIGhlIG1hZGUgYXQgdGhpcyB0aW1lLCB0aGUgYXNzaXN0YW5jZSByZW5kZXJlZCBoaW0gYnkgSGVhdmVuIGluIGhpcyBwZXJwbGV4aXRpZXMgbWV0IHdpdGggbW9yZSBjcmVkZW5jZSB0aGFuIHRoZSBvcmFjbGVzIHdoaWNoIGhlIGFmdGVyd2FyZHMgcmVjZWl2ZWQsIG5heSwgaW4gYSB3YXksIHRoZSBvcmFjbGVzIG9idGFpbmVkIGNyZWRlbmNlIGluIGNvbnNlcXVlbmNlIG9mIHN1Y2ggYXNzaXN0YW5jZS4gRm9yLCB0byBiZWdpbiB3aXRoLCBtdWNoIHJhaW4gZnJvbSBoZWF2ZW4gYW5kIHBlcnNpc3RlbnQgc2hvd2VycyByZW1vdmVkIGFsbCBmZWFyIG9mIHRoaXJzdCwgcXVlbmNoZWQgdGhlIGRyeW5lc3Mgb2YgdGhlIHNhbmQsIHNvIHRoYXQgaXQgYmVjYW1lIG1vaXN0IGFuZCBjb21wYWN0LCBhbmQgbWFkZSB0aGUgYWlyIHB1cmVyIGFuZCBnb29kIHRvIGJyZWF0aGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIHRoZSBtYXJrcyBmb3IgdGhlIGd1aWRlcyBiZWNhbWUgY29uZnVzZWQsIGFuZCB0aGUgdHJhdmVsbGVycyB3ZXJlIHNlcGFyYXRlZCBhbmQgd2FuZGVyZWQgYWJvdXQgaW4gaWdub3JhbmNlIG9mIHRoZSByb3V0ZSwgcmF2ZW5zIGFwcGVhcmVkIGFuZCBhc3N1bWVkIGRpcmVjdGlvbiBvZiB0aGVpciBtYXJjaCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBQdG9sZW15LCBzb24gb2YgTGFndXMsIHR3byBzZXJwZW50cyBzZXJ2ZWQgQWxleGFuZGVyJ3MgYXJteSBhcyBndWlkZXMgdG8gdGhlIG9yYWNsZSBhbmQgYmFjayBhZ2Fpbi4gPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IEFyaXN0b2J1bHVzLCB3aG9zZSBhY2NvdW50IGlzIGdlbmVyYWxseSBhZG1pdHRlZCB0byBiZSBjb3JyZWN0LCBzYXlzIHRoYXQgdHdvIHJhdmVucyBmbGV3IGluIGZyb250IG9mIHRoZSBhcm15IGFuZCBhY3RlZCBhcyBBbGV4YW5kZXIncyBndWlkZXM8L3E+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4zLjUiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gaWlpIDMsIDUgZi48L2JpYmw+KS48L25vdGU+IGZseWluZyBzd2lmdGx5IG9uIGluIGZyb250IG9mIHRoZW0gd2hlbiB0aGV5IGZvbGxvd2VkLCBhbmQgd2FpdGluZyBmb3IgdGhlbSB3aGVuIHRoZXkgbWFyY2hlZCBzbG93bHkgYW5kIGxhZ2dlZCBiZWhpbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGF0IHdhcyBtb3N0IGFzdG9uaXNoaW5nIG9mIGFsbCwgQ2FsbGlzdGhlbmVzIHRlbGxzIHVzIHRoYXQgdGhlIGJpcmRzIGJ5IHRoZWlyIGNyaWVzIGNhbGxlZCBiYWNrIHRob3NlIHdobyBzdHJhZ2dsZWQgYXdheSBpbiB0aGUgbmlnaHQsIGFuZCBjYXdlZCB1bnRpbCB0aGV5IGhhZCBzZXQgdGhlbSBpbiB0aGUgdHJhY2sgb2YgdGhlIG1hcmNoLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYWxsIGV2ZW50cywgZHVyaW5nIHRoZSBqb3VybmV5IHdoaWNoIGhlIG1hZGUgYXQgdGhpcyB0aW1lLCB0aGUgYXNzaXN0YW5jZSByZW5kZXJlZCBoaW0gYnkgSGVhdmVuIGluIGhpcyBwZXJwbGV4aXRpZXMgbWV0IHdpdGggbW9yZSBjcmVkZW5jZSB0aGFuIHRoZSBvcmFjbGVzIHdoaWNoIGhlIGFmdGVyd2FyZHMgcmVjZWl2ZWQsIG5heSwgaW4gYSB3YXksIHRoZSBvcmFjbGVzIG9idGFpbmVkIGNyZWRlbmNlIGluIGNvbnNlcXVlbmNlIG9mIHN1Y2ggYXNzaXN0YW5jZS4gRm9yLCB0byBiZWdpbiB3aXRoLCBtdWNoIHJhaW4gZnJvbSBoZWF2ZW4gYW5kIHBlcnNpc3RlbnQgc2hvd2VycyByZW1vdmVkIGFsbCBmZWFyIG9mIHRoaXJzdCwgcXVlbmNoZWQgdGhlIGRyeW5lc3Mgb2YgdGhlIHNhbmQsIHNvIHRoYXQgaXQgYmVjYW1lIG1vaXN0IGFuZCBjb21wYWN0LCBhbmQgbWFkZSB0aGUgYWlyIHB1cmVyIGFuZCBnb29kIHRvIGJyZWF0aGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIHRoZSBtYXJrcyBmb3IgdGhlIGd1aWRlcyBiZWNhbWUgY29uZnVzZWQsIGFuZCB0aGUgdHJhdmVsbGVycyB3ZXJlIHNlcGFyYXRlZCBhbmQgd2FuZGVyZWQgYWJvdXQgaW4gaWdub3JhbmNlIG9mIHRoZSByb3V0ZSwgcmF2ZW5zIGFwcGVhcmVkIGFuZCBhc3N1bWVkIGRpcmVjdGlvbiBvZiB0aGVpciBtYXJjaCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFB0b2xlbXksIHNvbiBvZiBMYWd1cywgdHdvIHNlcnBlbnRzIHNlcnZlZCBBbGV4YW5kZXIncyBhcm15IGFzIGd1aWRlcyB0byB0aGUgb3JhY2xlIGFuZCBiYWNrIGFnYWluLiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBBcmlzdG9idWx1cywgd2hvc2UgYWNjb3VudCBpcyBnZW5lcmFsbHkgYWRtaXR0ZWQgdG8gYmUgY29ycmVjdCwgc2F5cyB0aGF0IHR3byByYXZlbnMgZmxldyBpbiBmcm9udCBvZiB0aGUgYXJteSBhbmQgYWN0ZWQgYXMgQWxleGFuZGVyJ3MgZ3VpZGVzPC9xPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4zLjUiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkgMywgNSBmLjwvYmlibD4pLjwvbm90ZT4gZmx5aW5nIHN3aWZ0bHkgb24gaW4gZnJvbnQgb2YgdGhlbSB3aGVuIHRoZXkgZm9sbG93ZWQsIGFuZCB3YWl0aW5nIGZvciB0aGVtIHdoZW4gdGhleSBtYXJjaGVkIHNsb3dseSBhbmQgbGFnZ2VkIGJlaGluZC4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBBcmlzdG9idWx1cywgd2hvc2UgYWNjb3VudCBpcyBnZW5lcmFsbHkgYWRtaXR0ZWQgdG8gYmUgY29ycmVjdCwgc2F5cyB0aGF0IHR3byByYXZlbnMgZmxldyBpbiBmcm9udCBvZiB0aGUgYXJteSBhbmQgYWN0ZWQgYXMgQWxleGFuZGVyJ3MgZ3VpZGVzPC9xPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4zLjUiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkgMywgNSBmLjwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpIDMsIDUgZi48L3RyYW5zbGF0aW9uPg=="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGF0IHdhcyBtb3N0IGFzdG9uaXNoaW5nIG9mIGFsbCwgQ2FsbGlzdGhlbmVzIHRlbGxzIHVzIHRoYXQgdGhlIGJpcmRzIGJ5IHRoZWlyIGNyaWVzIGNhbGxlZCBiYWNrIHRob3NlIHdobyBzdHJhZ2dsZWQgYXdheSBpbiB0aGUgbmlnaHQsIGFuZCBjYXdlZCB1bnRpbCB0aGV5IGhhZCBzZXQgdGhlbSBpbiB0aGUgdHJhY2sgb2YgdGhlIG1hcmNoLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiBBbGV4YW5kZXIgaGFkIHBhc3NlZCB0aHJvdWdoIHRoZSBkZXNlcnQgYW5kIHdhcyBjb21lIHRvIHRoZSBwbGFjZSBvZiB0aGUgb3JhY2xlLCB0aGUgcHJvcGhldCBvZiBBbW1vbiBnYXZlIGhpbSBzYWx1dGF0aW9uIGZyb20gdGhlIGdvZCBhcyBmcm9tIGEgZmF0aGVyOyB3aGVyZXVwb24gQWxleGFuZGVyIGFza2VkIGhpbSB3aGV0aGVyIGFueSBvZiB0aGUgbXVyZGVyZXJzIG9mIGhpcyBmYXRoZXIgaGFkIGVzY2FwZWQgaGltLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgdGhlIHByb3BoZXQgYW5zd2VyZWQgYnkgYmlkZGluZyBoaW0gYmUgZ3VhcmRlZCBpbiBoaXMgc3BlZWNoLCBzaW5jZSBoaXMgd2FzIG5vdCBhIG1vcnRhbCBmYXRoZXIuIEFsZXhhbmRlciB0aGVyZWZvcmUgY2hhbmdlZCB0aGUgZm9ybSBvZiBoaXMgcXVlc3Rpb24sIGFuZCBhc2tlZCB3aGV0aGVyIHRoZSBtdXJkZXJlcnMgb2YgUGhpbGlwIGhhZCBhbGwgYmVlbiBwdW5pc2hlZDsgYW5kIHRoZW4sIHJlZ2FyZGluZyBoaXMgb3duIGVtcGlyZSwgaGUgYXNrZWQgd2hldGhlciBpdCB3YXMgZ2l2ZW4gdG8gaGltIHRvIGJlY29tZSBsb3JkIGFuZCBtYXN0ZXIgb2YgYWxsIG1hbmtpbmQuIFRoZSBnb2QgZ2F2ZSBhbnN3ZXIgdGhhdCB0aGlzIHdhcyBnaXZlbiB0byBoaW0sIGFuZCB0aGF0IFBoaWxpcCB3YXMgZnVsbHkgYXZlbmdlZC4gVGhlbiBBbGV4YW5kZXIgbWFkZSBzcGxlbmRpZCBvZmZlcmluZ3MgdG8gdGhlIGdvZCBhbmQgZ2F2ZSBoaXMgcHJpZXN0cyBsYXJnZSBnaWZ0cyBvZiBtb25leS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgdGhlIHByb3BoZXQgYW5zd2VyZWQgYnkgYmlkZGluZyBoaW0gYmUgZ3VhcmRlZCBpbiBoaXMgc3BlZWNoLCBzaW5jZSBoaXMgd2FzIG5vdCBhIG1vcnRhbCBmYXRoZXIuIEFsZXhhbmRlciB0aGVyZWZvcmUgY2hhbmdlZCB0aGUgZm9ybSBvZiBoaXMgcXVlc3Rpb24sIGFuZCBhc2tlZCB3aGV0aGVyIHRoZSBtdXJkZXJlcnMgb2YgUGhpbGlwIGhhZCBhbGwgYmVlbiBwdW5pc2hlZDsgYW5kIHRoZW4sIHJlZ2FyZGluZyBoaXMgb3duIGVtcGlyZSwgaGUgYXNrZWQgd2hldGhlciBpdCB3YXMgZ2l2ZW4gdG8gaGltIHRvIGJlY29tZSBsb3JkIGFuZCBtYXN0ZXIgb2YgYWxsIG1hbmtpbmQuIFRoZSBnb2QgZ2F2ZSBhbnN3ZXIgdGhhdCB0aGlzIHdhcyBnaXZlbiB0byBoaW0sIGFuZCB0aGF0IFBoaWxpcCB3YXMgZnVsbHkgYXZlbmdlZC4gVGhlbiBBbGV4YW5kZXIgbWFkZSBzcGxlbmRpZCBvZmZlcmluZ3MgdG8gdGhlIGdvZCBhbmQgZ2F2ZSBoaXMgcHJpZXN0cyBsYXJnZSBnaWZ0cyBvZiBtb25leS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIHdoYXQgbW9zdCB3cml0ZXJzIHN0YXRlIHJlZ2FyZGluZyB0aGUgb3JhY3VsYXIgcmVzcG9uc2VzOyBidXQgQWxleGFuZGVyIGhpbXNlbGYsIGluIGEgbGV0dGVyIHRvIGhpcyBtb3RoZXIsIHNheXMgdGhhdCBoZSByZWNlaXZlZCBjZXJ0YWluIHNlY3JldCByZXNwb25zZXMsIHdoaWNoIGhlIHdvdWxkIHRlbGwgdG8gaGVyLCBhbmQgdG8gaGVyIGFsb25lLCBvbiBoaXMgcmV0dXJuLiBBbmQgc29tZSBzYXkgdGhhdCB0aGUgcHJvcGhldCwgd2lzaGluZyB0byBzaG93IGhpcyBmcmllbmRsaW5lc3MgYnkgYWRkcmVzc2luZyBoaW0gd2l0aCA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIHBhaWRpb24sPC9xPiBvciA8Z2xvc3M+TyBteSBzb248L2dsb3NzPiwgaW4gaGlzIGZvcmVpZ24gcHJvbnVuY2lhdGlvbiBlbmRlZCB0aGUgd29yZHMgd2l0aCA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zPC9xPiBpbnN0ZWFkIG9mIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+biw8L3E+IGFuZCBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gcGFpZGlvcyw8L3E+IGFuZCB0aGF0IEFsZXhhbmRlciB3YXMgcGxlYXNlZCBhdCB0aGUgc2xpcCBpbiBwcm9udW5jaWF0aW9uLCBhbmQgYSBzdG9yeSBiZWNhbWUgY3VycmVudCB0aGF0IHRoZSBnb2QgaGFkIGFkZHJlc3NlZCBoaW0gd2l0aCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gcGFpIERpb3MsPC9xPiBvciA8Z2xvc3M+TyBzb24gb2YgWmV1czwvZ2xvc3M+LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5XZSBhcmUgdG9sZCwgYWxzbywgdGhhdCBoZSBsaXN0ZW5lZCB0byB0aGUgdGVhY2hpbmdzIG9mIFBzYW1tb24gdGhlIHBoaWxvc29waGVyIGluIEVneXB0LCBhbmQgYWNjZXB0ZWQgbW9zdCByZWFkaWx5IHRoaXMgdXR0ZXJhbmNlIG9mIGhpcywgbmFtZWx5LCB0aGF0IGFsbCBtYW5raW5kIGFyZSB1bmRlciB0aGUga2luZ3NoaXAgb2YgR29kLCBzaW5jZSBpbiBldmVyeSBjYXNlIHRoYXQgd2hpY2ggZ2V0cyB0aGUgbWFzdGVyeSBhbmQgcnVsZXMgaXMgZGl2aW5lLiBTdGlsbCBtb3JlIHBoaWxvc29waGljYWwsIGhvd2V2ZXIsIHdhcyBoaXMgb3duIG9waW5pb24gYW5kIHV0dGVyYW5jZSBvbiB0aGlzIGhlYWQsIG5hbWVseSB0aGF0IGFsdGhvdWdoIEdvZCB3YXMgaW5kZWVkIGEgY29tbW9uIGZhdGhlciBvZiBhbGwgbWFua2luZCwgc3RpbGwsIEhlIG1hZGUgcGVjdWxpYXJseSBIaXMgb3duIHRoZSBub2JsZXN0IGFuZCBiZXN0IG9mIHRoZW0uPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgd2hhdCBtb3N0IHdyaXRlcnMgc3RhdGUgcmVnYXJkaW5nIHRoZSBvcmFjdWxhciByZXNwb25zZXM7IGJ1dCBBbGV4YW5kZXIgaGltc2VsZiwgaW4gYSBsZXR0ZXIgdG8gaGlzIG1vdGhlciwgc2F5cyB0aGF0IGhlIHJlY2VpdmVkIGNlcnRhaW4gc2VjcmV0IHJlc3BvbnNlcywgd2hpY2ggaGUgd291bGQgdGVsbCB0byBoZXIsIGFuZCB0byBoZXIgYWxvbmUsIG9uIGhpcyByZXR1cm4uIEFuZCBzb21lIHNheSB0aGF0IHRoZSBwcm9waGV0LCB3aXNoaW5nIHRvIHNob3cgaGlzIGZyaWVuZGxpbmVzcyBieSBhZGRyZXNzaW5nIGhpbSB3aXRoIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBwYWlkaW9uLDwvcT4gb3IgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TyBteSBzb248L2dsb3NzPiwgaW4gaGlzIGZvcmVpZ24gcHJvbnVuY2lhdGlvbiBlbmRlZCB0aGUgd29yZHMgd2l0aCA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnM8L3E+IGluc3RlYWQgb2YgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPm4sPC9xPiBhbmQgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gcGFpZGlvcyw8L3E+IGFuZCB0aGF0IEFsZXhhbmRlciB3YXMgcGxlYXNlZCBhdCB0aGUgc2xpcCBpbiBwcm9udW5jaWF0aW9uLCBhbmQgYSBzdG9yeSBiZWNhbWUgY3VycmVudCB0aGF0IHRoZSBnb2QgaGFkIGFkZHJlc3NlZCBoaW0gd2l0aCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBwYWkgRGlvcyw8L3E+IG9yIDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPk8gc29uIG9mIFpldXM8L2dsb3NzPi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSB0b2xkLCBhbHNvLCB0aGF0IGhlIGxpc3RlbmVkIHRvIHRoZSB0ZWFjaGluZ3Mgb2YgUHNhbW1vbiB0aGUgcGhpbG9zb3BoZXIgaW4gRWd5cHQsIGFuZCBhY2NlcHRlZCBtb3N0IHJlYWRpbHkgdGhpcyB1dHRlcmFuY2Ugb2YgaGlzLCBuYW1lbHksIHRoYXQgYWxsIG1hbmtpbmQgYXJlIHVuZGVyIHRoZSBraW5nc2hpcCBvZiBHb2QsIHNpbmNlIGluIGV2ZXJ5IGNhc2UgdGhhdCB3aGljaCBnZXRzIHRoZSBtYXN0ZXJ5IGFuZCBydWxlcyBpcyBkaXZpbmUuIFN0aWxsIG1vcmUgcGhpbG9zb3BoaWNhbCwgaG93ZXZlciwgd2FzIGhpcyBvd24gb3BpbmlvbiBhbmQgdXR0ZXJhbmNlIG9uIHRoaXMgaGVhZCwgbmFtZWx5IHRoYXQgYWx0aG91Z2ggR29kIHdhcyBpbmRlZWQgYSBjb21tb24gZmF0aGVyIG9mIGFsbCBtYW5raW5kLCBzdGlsbCwgSGUgbWFkZSBwZWN1bGlhcmx5IEhpcyBvd24gdGhlIG5vYmxlc3QgYW5kIGJlc3Qgb2YgdGhlbS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBnZW5lcmFsLCBoZSBib3JlIGhpbXNlbGYgaGF1Z2h0aWx5IHRvd2FyZHMgdGhlIEJhcmJhcmlhbnMsIGFuZCBsaWtlIG9uZSBmdWxseSBwZXJzdWFkZWQgb2YgaGlzIGRpdmluZSBiaXJ0aCBhbmQgcGFyZW50YWdlLCBidXQgd2l0aCB0aGUgR3JlZWtzIGl0IHdhcyB3aXRoaW4gbGltaXRzIGFuZCBzb21ld2hhdCByYXJlbHkgdGhhdCBoZSBhc3N1bWVkIGhpcyBvd24gZGl2aW5pdHkuIEhvd2V2ZXIsIGluIHdyaXRpbmcgdG8gdGhlIEF0aGVuaWFucyBjb25jZXJuaW5nIFNhbW9zLCBoZSBzYWlkOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGNhbm5vdCBoYXZlIGdpdmVuIHlvdSB0aGF0IGZyZWUgYW5kIGlsbHVzdHJpb3VzIGNpdHk7IGZvciB5ZSByZWNlaXZlZCBpdCBmcm9tIGhpbSB3aG8gd2FzIHRoZW4geW91ciBtYXN0ZXIgYW5kIHdhcyBjYWxsZWQgbXkgZmF0aGVyLDwvcT4gbWVhbmluZyBQaGlsaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGEgbGF0ZXIgdGltZSwgaG93ZXZlciwgd2hlbiBoZSBoYWQgYmVlbiBoaXQgYnkgYW4gYXJyb3cgYW5kIHdhcyBzdWZmZXJpbmcgZ3JlYXQgcGFpbiwgaGUgc2FpZDogPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPlRoaXMsIG15IGZyaWVuZHMsIHRoYXQgZmxvd3MgaGVyZSwgaXMgYmxvb2QsIGFuZCBub3QKCQkJCQk8bD7igJhJY2hvciwgc3VjaCBhcyBmbG93cyBmcm9tIHRoZSB2ZWlucyBvZiB0aGUgYmxlc3NlZCBnb2RzLuKAmTwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiA1LjM0MCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5JbGlhZDwvdGl0bGU+LCB2LiAzNDA8L2JpYmw+Ljwvbm90ZT4KCQkJCU9uY2UsIHRvbywgdGhlcmUgY2FtZSBhIGdyZWF0IHBlYWwgb2YgdGh1bmRlciwgYW5kIGFsbCB3ZXJlIHRlcnJpZmllZCBhdCBpdDsgd2hlcmV1cG9uIEFuYXhhcmNodXMgdGhlIHNvcGhpc3Qgd2hvIHdhcyBwcmVzZW50IHNhaWQgdG8gQWxleGFuZGVyOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db3VsZHN0IHRob3UsIHRoZSBzb24gb2YgWmV1cywgdGh1bmRlciBsaWtlIHRoYXQ/PC9xPiBBdCB0aGlzLCBBbGV4YW5kZXIgbGF1Z2hlZCBhbmQgc2FpZDoKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5heSwgSSBkbyBub3Qgd2lzaCB0byBjYXVzZSBmZWFyIGluIG15IGZyaWVuZHMsIGFzIHRob3Ugd291bGRzdCBoYXZlIG1lIGRvLCB0aG91IHdobyBkZXNwaXNlc3QgbXkgc3VwcGVycyBiZWNhdXNlLCBhcyB0aG91IHNheWVzdCwgdGhvdSBzZWVzdCB0aGUgdGFibGVzIGZ1cm5pc2hlZCB3aXRoIGZpc2gsIGFuZCBub3Qgd2l0aCBzYXRyYXBzJyBoZWFkcy48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXRoLiA2LjI1MCI+QXRoZW5hZXVzLCBwcC4gMjUwIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciwgaW4gZmFjdCwgd2UgYXJlIHRvbGQgdGhhdCBBbmF4YXJjaHVzLCBvbiBzZWVpbmcgYSBwcmVzZW50IG9mIHNtYWxsIGZpc2ggd2hpY2ggdGhlIGtpbmcgaGFkIHNlbnQgdG8gSGVwaGFlc3Rpb24sIGhhZCB1dHRlcmVkIHRoZSBzcGVlY2ggYWJvdmUgbWVudGlvbmVkLCBhcyB0aG91Z2ggaGUgd2VyZSBkaXNwYXJhZ2luZyBhbmQgcmlkaWN1bGluZyB0aG9zZSB3aG8gdW5kZXJnbyBncmVhdCB0b2lscyBhbmQgZGFuZ2VycyBpbiB0aGUgcHVyc3VpdCBvZiBlbWluZW5jZSBhbmQgcG93ZXIsIHNpbmNlIGluIHRoZSB3YXkgb2YgZW5qb3ltZW50cyBhbmQgcGxlYXN1cmVzIHRoZXkgaGF2ZSBsaXR0bGUgb3Igbm90aGluZyBtb3JlIHRoYW4gb3RoZXIgbWVuLiBGcm9tIHdoYXQgaGFzIGJlZW4gc2FpZCwgdGhlbiwgaXQgaXMgY2xlYXIgdGhhdCBBbGV4YW5kZXIgaGltc2VsZiB3YXMgbm90IGZvb2xpc2hseSBhZmZlY3RlZCBvciBwdWZmZWQgdXAgYnkgdGhlIGJlbGllZiBpbiBoaXMgZGl2aW5pdHksIGJ1dCB1c2VkIGl0IGZvciB0aGUgc3VianVnYXRpb24gb2Ygb3RoZXJzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gZ2VuZXJhbCwgaGUgYm9yZSBoaW1zZWxmIGhhdWdodGlseSB0b3dhcmRzIHRoZSBCYXJiYXJpYW5zLCBhbmQgbGlrZSBvbmUgZnVsbHkgcGVyc3VhZGVkIG9mIGhpcyBkaXZpbmUgYmlydGggYW5kIHBhcmVudGFnZSwgYnV0IHdpdGggdGhlIEdyZWVrcyBpdCB3YXMgd2l0aGluIGxpbWl0cyBhbmQgc29tZXdoYXQgcmFyZWx5IHRoYXQgaGUgYXNzdW1lZCBoaXMgb3duIGRpdmluaXR5LiBIb3dldmVyLCBpbiB3cml0aW5nIHRvIHRoZSBBdGhlbmlhbnMgY29uY2VybmluZyBTYW1vcywgaGUgc2FpZDogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGNhbm5vdCBoYXZlIGdpdmVuIHlvdSB0aGF0IGZyZWUgYW5kIGlsbHVzdHJpb3VzIGNpdHk7IGZvciB5ZSByZWNlaXZlZCBpdCBmcm9tIGhpbSB3aG8gd2FzIHRoZW4geW91ciBtYXN0ZXIgYW5kIHdhcyBjYWxsZWQgbXkgZmF0aGVyLDwvcT4gbWVhbmluZyBQaGlsaXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGEgbGF0ZXIgdGltZSwgaG93ZXZlciwgd2hlbiBoZSBoYWQgYmVlbiBoaXQgYnkgYW4gYXJyb3cgYW5kIHdhcyBzdWZmZXJpbmcgZ3JlYXQgcGFpbiwgaGUgc2FpZDogPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+VGhpcywgbXkgZnJpZW5kcywgdGhhdCBmbG93cyBoZXJlLCBpcyBibG9vZCwgYW5kIG5vdAoJCQkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCYSWNob3IsIHN1Y2ggYXMgZmxvd3MgZnJvbSB0aGUgdmVpbnMgb2YgdGhlIGJsZXNzZWQgZ29kcy7igJk8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCYSWNob3IsIHN1Y2ggYXMgZmxvd3MgZnJvbSB0aGUgdmVpbnMgb2YgdGhlIGJsZXNzZWQgZ29kcy7igJk8L2w+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDUuMzQwIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgdi4gMzQwPC9iaWJsPi48L25vdGU+CgkJCQlPbmNlLCB0b28sIHRoZXJlIGNhbWUgYSBncmVhdCBwZWFsIG9mIHRodW5kZXIsIGFuZCBhbGwgd2VyZSB0ZXJyaWZpZWQgYXQgaXQ7IHdoZXJldXBvbiBBbmF4YXJjaHVzIHRoZSBzb3BoaXN0IHdobyB3YXMgcHJlc2VudCBzYWlkIHRvIEFsZXhhbmRlcjogPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gNS4zNDAiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB2LiAzNDA8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHYuIDM0MDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q291bGRzdCB0aG91LCB0aGUgc29uIG9mIFpldXMsIHRodW5kZXIgbGlrZSB0aGF0PzwvcT4gQXQgdGhpcywgQWxleGFuZGVyIGxhdWdoZWQgYW5kIHNhaWQ6CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5heSwgSSBkbyBub3Qgd2lzaCB0byBjYXVzZSBmZWFyIGluIG15IGZyaWVuZHMsIGFzIHRob3Ugd291bGRzdCBoYXZlIG1lIGRvLCB0aG91IHdobyBkZXNwaXNlc3QgbXkgc3VwcGVycyBiZWNhdXNlLCBhcyB0aG91IHNheWVzdCwgdGhvdSBzZWVzdCB0aGUgdGFibGVzIGZ1cm5pc2hlZCB3aXRoIGZpc2gsIGFuZCBub3Qgd2l0aCBzYXRyYXBzJyBoZWFkcy48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkF0aC4gNi4yNTAiPkF0aGVuYWV1cywgcHAuIDI1MCBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkF0aC4gNi4yNTAiPkF0aGVuYWV1cywgcHAuIDI1MCBmLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciwgaW4gZmFjdCwgd2UgYXJlIHRvbGQgdGhhdCBBbmF4YXJjaHVzLCBvbiBzZWVpbmcgYSBwcmVzZW50IG9mIHNtYWxsIGZpc2ggd2hpY2ggdGhlIGtpbmcgaGFkIHNlbnQgdG8gSGVwaGFlc3Rpb24sIGhhZCB1dHRlcmVkIHRoZSBzcGVlY2ggYWJvdmUgbWVudGlvbmVkLCBhcyB0aG91Z2ggaGUgd2VyZSBkaXNwYXJhZ2luZyBhbmQgcmlkaWN1bGluZyB0aG9zZSB3aG8gdW5kZXJnbyBncmVhdCB0b2lscyBhbmQgZGFuZ2VycyBpbiB0aGUgcHVyc3VpdCBvZiBlbWluZW5jZSBhbmQgcG93ZXIsIHNpbmNlIGluIHRoZSB3YXkgb2YgZW5qb3ltZW50cyBhbmQgcGxlYXN1cmVzIHRoZXkgaGF2ZSBsaXR0bGUgb3Igbm90aGluZyBtb3JlIHRoYW4gb3RoZXIgbWVuLiBGcm9tIHdoYXQgaGFzIGJlZW4gc2FpZCwgdGhlbiwgaXQgaXMgY2xlYXIgdGhhdCBBbGV4YW5kZXIgaGltc2VsZiB3YXMgbm90IGZvb2xpc2hseSBhZmZlY3RlZCBvciBwdWZmZWQgdXAgYnkgdGhlIGJlbGllZiBpbiBoaXMgZGl2aW5pdHksIGJ1dCB1c2VkIGl0IGZvciB0aGUgc3VianVnYXRpb24gb2Ygb3RoZXJzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgaGFkIHJldHVybmVkIGZyb20gRWd5cHQgaW50byBQaG9lbmljaWEsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5FYXJseSBpbiAzMzEgQi5DLjwvbm90ZT4gaGUgaG9ub3VyZWQgdGhlIGdvZHMgd2l0aCBzYWNyaWZpY2VzIGFuZCBzb2xlbW4gcHJvY2Vzc2lvbnMsIGFuZCBoZWxkIGNvbnRlc3RzIG9mIGRpdGh5cmFtYmljIGNob3J1c2VzIGFuZCB0cmFnZWRpZXMgd2hpY2ggd2VyZSBtYWRlIGJyaWxsaWFudCwgbm90IG9ubHkgYnkgdGhlaXIgZnVybmlzaGluZ3MsIGJ1dCBhbHNvIGJ5IHRoZSBjb21wZXRpdG9ycyB3aG8gZXhoaWJpdGVkIHRoZW0uIEZvciB0aGUga2luZ3Mgb2YgQ3lwcnVzIHdlcmUgdGhlIGNob3JlZ2ksIG9yIGV4aGliaXRvcnMsIGp1c3QgbGlrZSwgYXQgQXRoZW5zLCB0aG9zZSBjaG9zZW4gYnkgbG90IGZyb20gdGhlIHRyaWJlcywgYW5kIHRoZXkgY29tcGV0ZWQgYWdhaW5zdCBlYWNoIG90aGVyIHdpdGggYW1hemluZyBhbWJpdGlvbi4gTW9zdCBlYWdlciBvZiBhbGwgd2FzIHRoZSBjb250ZW50aW9uIGJldHdlZW4gTmljb2NyZW9uIG9mIFNhbGFtaXMgYW5kIFBhc2ljcmF0ZXMgb2YgU29saS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBsb3QgYXNzaWduZWQgdG8gdGhlc2UgZXhoaWJpdG9ycyB0aGUgbW9zdCBjZWxlYnJhdGVkIGFjdG9ycywgdG8gUGFzaWNyYXRlcyBBdGhlbm9kb3J1cywgYW5kIHRvIE5pY29jcmVvbiBUaGVzc2FsdXMsIGluIHdob3NlIHN1Y2Nlc3MgQWxleGFuZGVyIGhpbXNlbGYgd2FzIGludGVyZXN0ZWQuIEhlIGRpZCBub3QgcmV2ZWFsIHRoaXMgaW50ZXJlc3QsIGhvd2V2ZXIsIHVudGlsLCBieSB0aGUgdm90ZXMgb2YgdGhlIGp1ZGdlcywgQXRoZW5vZG9ydXMgaGFkIGJlZW4gcHJvY2xhaW1lZCB2aWN0b3IuIEJ1dCB0aGVuLCBhcyBpdCB3b3VsZCBhcHBlYXIsIG9uIGxlYXZpbmcgdGhlIHRoZWF0cmUsIGhlIHNhaWQgdGhhdCBoZSBhcHByb3ZlZCB0aGUgZGVjaXNpb24gb2YgdGhlIGp1ZGdlcywgYnV0IHdvdWxkIGdsYWRseSBoYXZlIGdpdmVuIHVwIGEgcGFydCBvZiBoaXMga2luZ2RvbSByYXRoZXIgdGhhbiB0byBoYXZlIHNlZW4gVGhlc3NhbHVzIHZhbnF1aXNoZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIHdoZW4gQXRoZW5vZG9ydXMsIHdobyBoYWQgYmVlbiBmaW5lZCBieSB0aGUgQXRoZW5pYW5zIGZvciBub3Qga2VlcGluZyBoaXMgZW5nYWdlbWVudCBpbiB0aGUgZHJhbWF0aWMgY29udGVzdCBvZiB0aGVpciBEaW9ueXNpYWMgZmVzdGl2YWwsIGFza2VkIHRoZSBraW5nIHRvIHdyaXRlIGEgbGV0dGVyIHRvIHRoZW0gaW4gaGlzIGJlaGFsZiwgdGhvdWdoIGhlIHdvdWxkIG5vdCBkbyB0aGlzLCBoZSBzZW50IHRoZW0gdGhlIGFtb3VudCBvZiB0aGUgZmluZSBmcm9tIGhpcyBvd24gcHVyc2UuIEZ1cnRoZXJtb3JlLCB3aGVuIEx5Y29uIG9mIFNjYXJwaGVpYSwgd2hvIHdhcyBhY3Rpbmcgc3VjY2Vzc2Z1bGx5IGJlZm9yZSBBbGV4YW5kZXIsIGluc2VydGVkIGludG8gdGhlIGNvbWVkeSBhIHZlcnNlIGNvbnRhaW5pbmcgYSByZXF1ZXN0IGZvciB0ZW4gdGFsZW50cywgQWxleGFuZGVyIGxhdWdoZWQgYW5kIGdhdmUgdGhlbSB0byBoaW0uCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gMzM0YSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Nb3JhbHM8L3RpdGxlPiwgcHAuIDMzNCBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBoYWQgcmV0dXJuZWQgZnJvbSBFZ3lwdCBpbnRvIFBob2VuaWNpYSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RWFybHkgaW4gMzMxIEIuQy48L25vdGU+IGhlIGhvbm91cmVkIHRoZSBnb2RzIHdpdGggc2FjcmlmaWNlcyBhbmQgc29sZW1uIHByb2Nlc3Npb25zLCBhbmQgaGVsZCBjb250ZXN0cyBvZiBkaXRoeXJhbWJpYyBjaG9ydXNlcyBhbmQgdHJhZ2VkaWVzIHdoaWNoIHdlcmUgbWFkZSBicmlsbGlhbnQsIG5vdCBvbmx5IGJ5IHRoZWlyIGZ1cm5pc2hpbmdzLCBidXQgYWxzbyBieSB0aGUgY29tcGV0aXRvcnMgd2hvIGV4aGliaXRlZCB0aGVtLiBGb3IgdGhlIGtpbmdzIG9mIEN5cHJ1cyB3ZXJlIHRoZSBjaG9yZWdpLCBvciBleGhpYml0b3JzLCBqdXN0IGxpa2UsIGF0IEF0aGVucywgdGhvc2UgY2hvc2VuIGJ5IGxvdCBmcm9tIHRoZSB0cmliZXMsIGFuZCB0aGV5IGNvbXBldGVkIGFnYWluc3QgZWFjaCBvdGhlciB3aXRoIGFtYXppbmcgYW1iaXRpb24uIE1vc3QgZWFnZXIgb2YgYWxsIHdhcyB0aGUgY29udGVudGlvbiBiZXR3ZWVuIE5pY29jcmVvbiBvZiBTYWxhbWlzIGFuZCBQYXNpY3JhdGVzIG9mIFNvbGkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgbG90IGFzc2lnbmVkIHRvIHRoZXNlIGV4aGliaXRvcnMgdGhlIG1vc3QgY2VsZWJyYXRlZCBhY3RvcnMsIHRvIFBhc2ljcmF0ZXMgQXRoZW5vZG9ydXMsIGFuZCB0byBOaWNvY3Jlb24gVGhlc3NhbHVzLCBpbiB3aG9zZSBzdWNjZXNzIEFsZXhhbmRlciBoaW1zZWxmIHdhcyBpbnRlcmVzdGVkLiBIZSBkaWQgbm90IHJldmVhbCB0aGlzIGludGVyZXN0LCBob3dldmVyLCB1bnRpbCwgYnkgdGhlIHZvdGVzIG9mIHRoZSBqdWRnZXMsIEF0aGVub2RvcnVzIGhhZCBiZWVuIHByb2NsYWltZWQgdmljdG9yLiBCdXQgdGhlbiwgYXMgaXQgd291bGQgYXBwZWFyLCBvbiBsZWF2aW5nIHRoZSB0aGVhdHJlLCBoZSBzYWlkIHRoYXQgaGUgYXBwcm92ZWQgdGhlIGRlY2lzaW9uIG9mIHRoZSBqdWRnZXMsIGJ1dCB3b3VsZCBnbGFkbHkgaGF2ZSBnaXZlbiB1cCBhIHBhcnQgb2YgaGlzIGtpbmdkb20gcmF0aGVyIHRoYW4gdG8gaGF2ZSBzZWVuIFRoZXNzYWx1cyB2YW5xdWlzaGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIHdoZW4gQXRoZW5vZG9ydXMsIHdobyBoYWQgYmVlbiBmaW5lZCBieSB0aGUgQXRoZW5pYW5zIGZvciBub3Qga2VlcGluZyBoaXMgZW5nYWdlbWVudCBpbiB0aGUgZHJhbWF0aWMgY29udGVzdCBvZiB0aGVpciBEaW9ueXNpYWMgZmVzdGl2YWwsIGFza2VkIHRoZSBraW5nIHRvIHdyaXRlIGEgbGV0dGVyIHRvIHRoZW0gaW4gaGlzIGJlaGFsZiwgdGhvdWdoIGhlIHdvdWxkIG5vdCBkbyB0aGlzLCBoZSBzZW50IHRoZW0gdGhlIGFtb3VudCBvZiB0aGUgZmluZSBmcm9tIGhpcyBvd24gcHVyc2UuIEZ1cnRoZXJtb3JlLCB3aGVuIEx5Y29uIG9mIFNjYXJwaGVpYSwgd2hvIHdhcyBhY3Rpbmcgc3VjY2Vzc2Z1bGx5IGJlZm9yZSBBbGV4YW5kZXIsIGluc2VydGVkIGludG8gdGhlIGNvbWVkeSBhIHZlcnNlIGNvbnRhaW5pbmcgYSByZXF1ZXN0IGZvciB0ZW4gdGFsZW50cywgQWxleGFuZGVyIGxhdWdoZWQgYW5kIGdhdmUgdGhlbSB0byBoaW0uCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDMzNGEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcHAuIDMzNCBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDMzNGEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcHAuIDMzNCBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHBwLiAzMzQgZi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIERhcmVpdXMgc2VudCB0byBoaW0gYSBsZXR0ZXIgYW5kIGZyaWVuZHMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGlzIHdhcyBkdXJpbmcgdGhlIHNpZWdlIG9mIFR5cmUsIGFjY29yZGluZyB0byBBcnJpYW4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAyLjI1LjEiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QW5hYi48L3RpdGxlPiBpaS4gMjUuIDE8L2JpYmw+KS48L25vdGU+IGJlZ2dpbmcgaGltIHRvIGFjY2VwdCB0ZW4gdGhvdXNhbmQgdGFsZW50cyBhcyByYW5zb20gZm9yIHRoZSBjYXB0aXZlcywgdG8gaG9sZCBhbGwgdGhlIHRlcnJpdG9yeSB0aGlzIHNpZGUgb2YgdGhlIEV1cGhyYXRlcywgdG8gdGFrZSBvbmUgb2YgaGlzIGRhdWdodGVycyBpbiBtYXJyaWFnZSwgYW5kIG9uIHRoZXNlIHRlcm1zIHRvIGJlIGhpcyBhbGx5IGFuZCBmcmllbmQsIEFsZXhhbmRlciBpbXBhcnRlZCB0aGUgbWF0dGVyIHRvIGhpcyBjb21wYW5pb25zLiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JZiBJIHdlcmUgQWxleGFuZGVyLDwvcT4gc2FpZCBQYXJtZW5pbywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHdvdWxkIGFjY2VwdCB0aGVzZSB0ZXJtcy48L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgc28gaW5kZWVkIHdvdWxkIEksPC9xPiBzYWlkIEFsZXhhbmRlciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj53ZXJlIEkgUGFybWVuaW8uPC9xPiBCdXQgdG8gRGFyZWl1cyBoZSB3cm90ZTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db21lIHRvIG1lLCBhbmQgdGhvdSBzaGFsdCByZWNlaXZlIGV2ZXJ5IGNvdXJ0ZXN5OyBidXQgb3RoZXJ3aXNlIEkgc2hhbGwgbWFyY2ggYXQgb25jZSBhZ2FpbnN0IHRoZWUuPC9xPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGlzIHdhcyBidXQgdGhlIGNvbmNsdXNpb24gb2YgYW4gYXJyb2dhbnQgbGV0dGVyLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDIuMjUuMyI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiBpaS4gMjUsIDM8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gRGFyZWl1cyBzZW50IHRvIGhpbSBhIGxldHRlciBhbmQgZnJpZW5kcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhpcyB3YXMgZHVyaW5nIHRoZSBzaWVnZSBvZiBUeXJlLCBhY2NvcmRpbmcgdG8gQXJyaWFuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAyLjI1LjEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpLiAyNS4gMTwvYmlibD4pLjwvbm90ZT4gYmVnZ2luZyBoaW0gdG8gYWNjZXB0IHRlbiB0aG91c2FuZCB0YWxlbnRzIGFzIHJhbnNvbSBmb3IgdGhlIGNhcHRpdmVzLCB0byBob2xkIGFsbCB0aGUgdGVycml0b3J5IHRoaXMgc2lkZSBvZiB0aGUgRXVwaHJhdGVzLCB0byB0YWtlIG9uZSBvZiBoaXMgZGF1Z2h0ZXJzIGluIG1hcnJpYWdlLCBhbmQgb24gdGhlc2UgdGVybXMgdG8gYmUgaGlzIGFsbHkgYW5kIGZyaWVuZCwgQWxleGFuZGVyIGltcGFydGVkIHRoZSBtYXR0ZXIgdG8gaGlzIGNvbXBhbmlvbnMuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDIuMjUuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWkuIDI1LiAxPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaS4gMjUuIDE8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIEkgd2VyZSBBbGV4YW5kZXIsPC9xPiBzYWlkIFBhcm1lbmlvLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSB3b3VsZCBhY2NlcHQgdGhlc2UgdGVybXMuPC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgc28gaW5kZWVkIHdvdWxkIEksPC9xPiBzYWlkIEFsZXhhbmRlciwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndlcmUgSSBQYXJtZW5pby48L3E+IEJ1dCB0byBEYXJlaXVzIGhlIHdyb3RlOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q29tZSB0byBtZSwgYW5kIHRob3Ugc2hhbHQgcmVjZWl2ZSBldmVyeSBjb3VydGVzeTsgYnV0IG90aGVyd2lzZSBJIHNoYWxsIG1hcmNoIGF0IG9uY2UgYWdhaW5zdCB0aGVlLjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGlzIHdhcyBidXQgdGhlIGNvbmNsdXNpb24gb2YgYW4gYXJyb2dhbnQgbGV0dGVyLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMi4yNS4zIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWkuIDI1LCAzPC9iaWJsPi48L25vdGU+CiAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDIuMjUuMyI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpLiAyNSwgMzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaS4gMjUsIDM8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Tb29uLCBob3dldmVyLCBoZSByZXBlbnRlZCBoaW0gb2YgdGhpcyBhbnN3ZXIsIHdoZW4gdGhlIHdpZmUgb2YgRGFyZWl1cyBkaWVkIGluIGNoaWxkYmlydGgsIGFuZCBpdCB3YXMgZXZpZGVudCB0aGF0IGhlIHdhcyBkaXN0cmVzc2VkIGF0IHRoaXMgbG9zcyBvZiBvcHBvcnR1bml0eSB0byBzaG93IGdyZWF0IGtpbmRuZXNzLiBBY2NvcmRpbmdseSwgaGUgZ2F2ZSB0aGUgd29tYW4gYSBzdW1wdHVvdXMgYnVyaWFsLiBPbmUgb2YgdGhlIGV1bnVjaHMgb2YgdGhlIGJlZC1jaGFtYmVyIHdobyBoYWQgYmVlbiBjYXB0dXJlZCB3aXRoIHRoZSB3b21lbiwgVGVpcmVvcyBieSBuYW1lLCByYW4gYXdheSBmcm9tIHRoZSBjYW1wLCBtYWRlIGhpcyB3YXkgb24gaG9yc2ViYWNrIHRvIERhcmVpdXMsIGFuZCB0b2xkIGhpbSBvZiB0aGUgZGVhdGggb2YgaGlzIHdpZmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIGtpbmcsIGJlYXRpbmcgdXBvbiBoaXMgaGVhZCBhbmQgYnVyc3RpbmcgaW50byBsYW1lbnRhdGlvbiwgc2FpZDogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxhcyBmb3IgdGhlIGV2aWwgZ2VuaXVzIG9mIHRoZSBQZXJzaWFucywgaWYgdGhlIHNpc3RlciBhbmQgd2lmZSBvZiB0aGVpciBraW5nIG11c3Qgbm90IG9ubHkgYmVjb21lIGEgY2FwdGl2ZSBpbiBoZXIgbGlmZSwgYnV0IGFsc28gaW4gaGVyIGRlYXRoIGJlIGRlcHJpdmVkIG9mIHJveWFsIGJ1cmlhbC48L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksIE8gS2luZyw8L3E+IGFuc3dlcmVkIHRoZSBjaGFtYmVybGFpbiwgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXMgcmVnYXJkcyBoZXIgYnVyaWFsLCBhbmQgaGVyIHJlY2VpdmluZyBldmVyeSBmaXR0aW5nIGhvbm91ciwgdGhvdSBoYXN0IG5vIGNoYXJnZSB0byBtYWtlIGFnYWluc3QgdGhlIGV2aWwgZ2VuaXVzIG9mIHRoZSBQZXJzaWFucy4gCgkJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBuZWl0aGVyIGRpZCBteSBtaXN0cmVzcyBTdGF0ZWlyYSwgd2hpbGUgc2hlIGxpdmVkLCBvciB0aHkgbW90aGVyIG9yIHRoeSBjaGlsZHJlbiwgbGFjayBhbnkgb2YgdGhlaXIgZm9ybWVyIGdyZWF0IGJsZXNzaW5ncyBleGNlcHQgdGhlIGxpZ2h0IG9mIHRoeSBjb3VudGVuYW5jZSwgd2hpY2ggTG9yZCBPcm9tYXpkZXMgd2lsbCBjYXVzZSB0byBzaGluZSBhZ2FpbiB3aXRoIGx1c3RyZTsgbm9yIGFmdGVyIGhlciBkZWF0aCB3YXMgc2hlIGRlcHJpdmVkIG9mIGFueSBmdW5lcmFsIGFkb3JubWVudCwgbmF5LCBzaGUgd2FzIGhvbm91cmVkIHdpdGggdGhlIHRlYXJzIG9mIGVuZW1pZXMuIEZvciBBbGV4YW5kZXIgaXMgYXMgZ2VudGxlIGFmdGVyIHZpY3RvcnkgYXMgaGUgaXMgdGVycmlibGUgaW4gYmF0dGxlLjwvcT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U29vbiwgaG93ZXZlciwgaGUgcmVwZW50ZWQgaGltIG9mIHRoaXMgYW5zd2VyLCB3aGVuIHRoZSB3aWZlIG9mIERhcmVpdXMgZGllZCBpbiBjaGlsZGJpcnRoLCBhbmQgaXQgd2FzIGV2aWRlbnQgdGhhdCBoZSB3YXMgZGlzdHJlc3NlZCBhdCB0aGlzIGxvc3Mgb2Ygb3Bwb3J0dW5pdHkgdG8gc2hvdyBncmVhdCBraW5kbmVzcy4gQWNjb3JkaW5nbHksIGhlIGdhdmUgdGhlIHdvbWFuIGEgc3VtcHR1b3VzIGJ1cmlhbC4gT25lIG9mIHRoZSBldW51Y2hzIG9mIHRoZSBiZWQtY2hhbWJlciB3aG8gaGFkIGJlZW4gY2FwdHVyZWQgd2l0aCB0aGUgd29tZW4sIFRlaXJlb3MgYnkgbmFtZSwgcmFuIGF3YXkgZnJvbSB0aGUgY2FtcCwgbWFkZSBoaXMgd2F5IG9uIGhvcnNlYmFjayB0byBEYXJlaXVzLCBhbmQgdG9sZCBoaW0gb2YgdGhlIGRlYXRoIG9mIGhpcyB3aWZlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIGtpbmcsIGJlYXRpbmcgdXBvbiBoaXMgaGVhZCBhbmQgYnVyc3RpbmcgaW50byBsYW1lbnRhdGlvbiwgc2FpZDogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbGFzIGZvciB0aGUgZXZpbCBnZW5pdXMgb2YgdGhlIFBlcnNpYW5zLCBpZiB0aGUgc2lzdGVyIGFuZCB3aWZlIG9mIHRoZWlyIGtpbmcgbXVzdCBub3Qgb25seSBiZWNvbWUgYSBjYXB0aXZlIGluIGhlciBsaWZlLCBidXQgYWxzbyBpbiBoZXIgZGVhdGggYmUgZGVwcml2ZWQgb2Ygcm95YWwgYnVyaWFsLjwvcT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TmF5LCBPIEtpbmcsPC9xPiBhbnN3ZXJlZCB0aGUgY2hhbWJlcmxhaW4sIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXMgcmVnYXJkcyBoZXIgYnVyaWFsLCBhbmQgaGVyIHJlY2VpdmluZyBldmVyeSBmaXR0aW5nIGhvbm91ciwgdGhvdSBoYXN0IG5vIGNoYXJnZSB0byBtYWtlIGFnYWluc3QgdGhlIGV2aWwgZ2VuaXVzIG9mIHRoZSBQZXJzaWFucy4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG5laXRoZXIgZGlkIG15IG1pc3RyZXNzIFN0YXRlaXJhLCB3aGlsZSBzaGUgbGl2ZWQsIG9yIHRoeSBtb3RoZXIgb3IgdGh5IGNoaWxkcmVuLCBsYWNrIGFueSBvZiB0aGVpciBmb3JtZXIgZ3JlYXQgYmxlc3NpbmdzIGV4Y2VwdCB0aGUgbGlnaHQgb2YgdGh5IGNvdW50ZW5hbmNlLCB3aGljaCBMb3JkIE9yb21hemRlcyB3aWxsIGNhdXNlIHRvIHNoaW5lIGFnYWluIHdpdGggbHVzdHJlOyBub3IgYWZ0ZXIgaGVyIGRlYXRoIHdhcyBzaGUgZGVwcml2ZWQgb2YgYW55IGZ1bmVyYWwgYWRvcm5tZW50LCBuYXksIHNoZSB3YXMgaG9ub3VyZWQgd2l0aCB0aGUgdGVhcnMgb2YgZW5lbWllcy4gRm9yIEFsZXhhbmRlciBpcyBhcyBnZW50bGUgYWZ0ZXIgdmljdG9yeSBhcyBoZSBpcyB0ZXJyaWJsZSBpbiBiYXR0bGUuPC9xPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBuZWl0aGVyIGRpZCBteSBtaXN0cmVzcyBTdGF0ZWlyYSwgd2hpbGUgc2hlIGxpdmVkLCBvciB0aHkgbW90aGVyIG9yIHRoeSBjaGlsZHJlbiwgbGFjayBhbnkgb2YgdGhlaXIgZm9ybWVyIGdyZWF0IGJsZXNzaW5ncyBleGNlcHQgdGhlIGxpZ2h0IG9mIHRoeSBjb3VudGVuYW5jZSwgd2hpY2ggTG9yZCBPcm9tYXpkZXMgd2lsbCBjYXVzZSB0byBzaGluZSBhZ2FpbiB3aXRoIGx1c3RyZTsgbm9yIGFmdGVyIGhlciBkZWF0aCB3YXMgc2hlIGRlcHJpdmVkIG9mIGFueSBmdW5lcmFsIGFkb3JubWVudCwgbmF5LCBzaGUgd2FzIGhvbm91cmVkIHdpdGggdGhlIHRlYXJzIG9mIGVuZW1pZXMuIEZvciBBbGV4YW5kZXIgaXMgYXMgZ2VudGxlIGFmdGVyIHZpY3RvcnkgYXMgaGUgaXMgdGVycmlibGUgaW4gYmF0dGxlLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gRGFyZWl1cyBoZWFyZCB0aGlzLCBoaXMgYWdpdGF0aW9uIGFuZCBncmllZiBzd2VwdCBoaW0gaW50byBhYnN1cmQgc3VzcGljaW9ucywgYW5kIGxlYWRpbmcgdGhlIGV1bnVjaCBhd2F5IGludG8gYSBtb3JlIHNlY2x1ZGVkIHBhcnQgb2YgaGlzIHRlbnQsIGhlIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHRob3UgYWxzbywgdG9nZXRoZXIgd2l0aCB0aGUgZm9ydHVuZSBvZiB0aGUgUGVyc2lhbnMsIGRvc3Qgbm90IHNpZGUgd2l0aCB0aGUgTWFjZWRvbmlhbnMsIGFuZCBpZiBJLCBEYXJlaXVzLCBhbSBzdGlsbCB0aHkgbG9yZCBhbmQgbWFzdGVyLCB0ZWxsIG1lLCBhcyB0aG91IHJldmVyZXN0IHRoZSBncmVhdCBsaWdodCBvZiBNaXRocmFzIGFuZCB0aGUgcmlnaHQgaGFuZCBvZiB0aHkga2luZywgaXMgaXQgbm90IHRoZSBsZWFzdCBvZiBTdGF0ZWlyYSdzIG1pc2ZvcnR1bmVzIHRoYXQgSSBhbSBub3cgbGFtZW50aW5nPyBXaGlsZSBzaGUgd2FzIGFsaXZlIGRpZCBJIG5vdCBzdWZmZXIgbW9yZSBwaXRpZnVsIGV2aWxzPyBBbmQgd291bGQgbm90IG15IHdyZXRjaGVkIGZvcnR1bmUgaGF2ZSBiZWVuIG1vcmUgY29tcGF0aWJsZSB3aXRoIG15IGhvbm91ciBpZiBJIGhhZCBtZXQgd2l0aCBhbiBhbmdyeSBhbmQgc2F2YWdlIGVuZW15PyBGb3Igd2hhdCBpbnRlcmNvdXJzZSB0aGF0IGlzIHByb3BlciBjYW4gYSB5b3VuZyBtYW4gaGF2ZSB3aXRoIGFuIGVuZW15J3Mgd2lmZSB3aGVuIGl0IGxlYWRzIHRvIHN1Y2ggbWFya3Mgb2YgaG9ub3VyPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSB0aGUga2luZyB3YXMgc3RpbGwgc3BlYWtpbmcsIFRlaXJlb3MgdGhyZXcgaGltc2VsZiBkb3duIGF0IGhpcyBmZWV0IGFuZCBiZXNvdWdodCBoaW0gdG8gaG9sZCBoaXMgcGVhY2UsIGFuZCBuZWl0aGVyIHRvIHdyb25nIEFsZXhhbmRlciwgbm9yIHNoYW1lIGhpcyBkZWFkIHNpc3RlciBhbmQgd2lmZSwgbm9yIHJvYiBoaW1zZWxmIG9mIHRoZSBncmVhdGVzdCBjb25zb2xhdGlvbiBmb3IgaGlzIGRpc2FzdGVycywgbmFtZWx5LCB0aGUgYmVsaWVmIHRoYXQgaGUgaGFkIGJlZW4gY29ucXVlcmVkIGJ5IGEgbWFuIHdobyB3YXMgc3VwZXJpb3IgdG8gaHVtYW4gbmF0dXJlOyBuYXksIGhlIHNob3VsZCBldmVuIGFkbWlyZSBBbGV4YW5kZXIgZm9yIGhhdmluZyBzaG93biBncmVhdGVyIHNlbGYtcmVzdHJhaW50IGluIGRlYWxpbmcgd2l0aCBQZXJzaWFuIHdvbWVuIHRoYW4gdmFsb3VyIGFnYWluc3QgUGVyc2lhbiBtZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoaWxlIHRoZSBldW51Y2ggd2FzIGNvbmZpcm1pbmcgaGlzIHRlc3RpbW9ueSB3aXRoIHRoZSBtb3N0IHNvbGVtbiBvYXRocywgYW5kIGRpc2NvdXJzaW5nIG9uIHRoZSBnZW5lcmFsIHNlbGYtbWFzdGVyeSBhbmQgbWFnbmFuaW1pdHkgb2YgQWxleGFuZGVyLCBEYXJlaXVzIHdlbnQgb3V0IHRvIGhpcyBjb21wYW5pb25zLCBhbmQgbGlmdGluZyBoaXMgaGFuZHMgdG93YXJkcyBoZWF2ZW4sIHByYXllZDogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyB5ZSBnb2RzIG9mIG15IHJhY2UgYW5kIGtpbmdkb20sIGFib3ZlIGFsbCB0aGluZ3MgZWxzZSBncmFudCB0aGF0IEkgbWF5IGxlYXZlIHRoZSBmb3J0dW5lIG9mIFBlcnNpYSByZWVzdGFibGlzaGVkIGluIHRoZSBwcm9zcGVyaXR5IHdoZXJlaW4gSSBmb3VuZCBpdCwgaW4gb3JkZXIgdGhhdCBteSB2aWN0b3J5IG1heSBlbmFibGUgbWUgdG8gcmVxdWl0ZSBBbGV4YW5kZXIgZm9yIHRoZSBmYXZvdXJzIHdoaWNoIEkgcmVjZWl2ZWQgYXQgaGlzIGhhbmRzIHdoZW4gSSBoYWQgbG9zdCBteSBkZWFyZXN0IHBvc3Nlc3Npb25zOyAKCQkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGlmLCB0aGVuLCBhIGZhdGVkIHRpbWUgaGFzIG5vdyBjb21lLCBkdWUgdG8gZGl2aW5lIGplYWxvdXN5IGFuZCB0aGUgdmljaXNzaXR1ZGVzIG9mIHRoaW5ncywgYW5kIHRoZSBzd2F5IG9mIHRoZSBQZXJzaWFucyBtdXN0IGNlYXNlLCBncmFudCB0aGF0IG5vIG90aGVyIG1hbiBtYXkgc2l0IHVwb24gdGhlIHRocm9uZSBvZiBDeXJ1cyBidXQgQWxleGFuZGVyLjwvcT4gVGhhdCB0aGVzZSB0aGluZ3Mgd2VyZSB0aHVzIGRvbmUgYW5kIHNhaWQgaXMgdGhlIHRlc3RpbW9ueSBvZiBtb3N0IGhpc3RvcmlhbnMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDQuMjAuMSI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiBpdi4gMjAuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gRGFyZWl1cyBoZWFyZCB0aGlzLCBoaXMgYWdpdGF0aW9uIGFuZCBncmllZiBzd2VwdCBoaW0gaW50byBhYnN1cmQgc3VzcGljaW9ucywgYW5kIGxlYWRpbmcgdGhlIGV1bnVjaCBhd2F5IGludG8gYSBtb3JlIHNlY2x1ZGVkIHBhcnQgb2YgaGlzIHRlbnQsIGhlIHNhaWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYgdGhvdSBhbHNvLCB0b2dldGhlciB3aXRoIHRoZSBmb3J0dW5lIG9mIHRoZSBQZXJzaWFucywgZG9zdCBub3Qgc2lkZSB3aXRoIHRoZSBNYWNlZG9uaWFucywgYW5kIGlmIEksIERhcmVpdXMsIGFtIHN0aWxsIHRoeSBsb3JkIGFuZCBtYXN0ZXIsIHRlbGwgbWUsIGFzIHRob3UgcmV2ZXJlc3QgdGhlIGdyZWF0IGxpZ2h0IG9mIE1pdGhyYXMgYW5kIHRoZSByaWdodCBoYW5kIG9mIHRoeSBraW5nLCBpcyBpdCBub3QgdGhlIGxlYXN0IG9mIFN0YXRlaXJhJ3MgbWlzZm9ydHVuZXMgdGhhdCBJIGFtIG5vdyBsYW1lbnRpbmc/IFdoaWxlIHNoZSB3YXMgYWxpdmUgZGlkIEkgbm90IHN1ZmZlciBtb3JlIHBpdGlmdWwgZXZpbHM/IEFuZCB3b3VsZCBub3QgbXkgd3JldGNoZWQgZm9ydHVuZSBoYXZlIGJlZW4gbW9yZSBjb21wYXRpYmxlIHdpdGggbXkgaG9ub3VyIGlmIEkgaGFkIG1ldCB3aXRoIGFuIGFuZ3J5IGFuZCBzYXZhZ2UgZW5lbXk/IEZvciB3aGF0IGludGVyY291cnNlIHRoYXQgaXMgcHJvcGVyIGNhbiBhIHlvdW5nIG1hbiBoYXZlIHdpdGggYW4gZW5lbXkncyB3aWZlIHdoZW4gaXQgbGVhZHMgdG8gc3VjaCBtYXJrcyBvZiBob25vdXI/PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHRoZSBraW5nIHdhcyBzdGlsbCBzcGVha2luZywgVGVpcmVvcyB0aHJldyBoaW1zZWxmIGRvd24gYXQgaGlzIGZlZXQgYW5kIGJlc291Z2h0IGhpbSB0byBob2xkIGhpcyBwZWFjZSwgYW5kIG5laXRoZXIgdG8gd3JvbmcgQWxleGFuZGVyLCBub3Igc2hhbWUgaGlzIGRlYWQgc2lzdGVyIGFuZCB3aWZlLCBub3Igcm9iIGhpbXNlbGYgb2YgdGhlIGdyZWF0ZXN0IGNvbnNvbGF0aW9uIGZvciBoaXMgZGlzYXN0ZXJzLCBuYW1lbHksIHRoZSBiZWxpZWYgdGhhdCBoZSBoYWQgYmVlbiBjb25xdWVyZWQgYnkgYSBtYW4gd2hvIHdhcyBzdXBlcmlvciB0byBodW1hbiBuYXR1cmU7IG5heSwgaGUgc2hvdWxkIGV2ZW4gYWRtaXJlIEFsZXhhbmRlciBmb3IgaGF2aW5nIHNob3duIGdyZWF0ZXIgc2VsZi1yZXN0cmFpbnQgaW4gZGVhbGluZyB3aXRoIFBlcnNpYW4gd29tZW4gdGhhbiB2YWxvdXIgYWdhaW5zdCBQZXJzaWFuIG1lbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoaWxlIHRoZSBldW51Y2ggd2FzIGNvbmZpcm1pbmcgaGlzIHRlc3RpbW9ueSB3aXRoIHRoZSBtb3N0IHNvbGVtbiBvYXRocywgYW5kIGRpc2NvdXJzaW5nIG9uIHRoZSBnZW5lcmFsIHNlbGYtbWFzdGVyeSBhbmQgbWFnbmFuaW1pdHkgb2YgQWxleGFuZGVyLCBEYXJlaXVzIHdlbnQgb3V0IHRvIGhpcyBjb21wYW5pb25zLCBhbmQgbGlmdGluZyBoaXMgaGFuZHMgdG93YXJkcyBoZWF2ZW4sIHByYXllZDogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIHllIGdvZHMgb2YgbXkgcmFjZSBhbmQga2luZ2RvbSwgYWJvdmUgYWxsIHRoaW5ncyBlbHNlIGdyYW50IHRoYXQgSSBtYXkgbGVhdmUgdGhlIGZvcnR1bmUgb2YgUGVyc2lhIHJlZXN0YWJsaXNoZWQgaW4gdGhlIHByb3NwZXJpdHkgd2hlcmVpbiBJIGZvdW5kIGl0LCBpbiBvcmRlciB0aGF0IG15IHZpY3RvcnkgbWF5IGVuYWJsZSBtZSB0byByZXF1aXRlIEFsZXhhbmRlciBmb3IgdGhlIGZhdm91cnMgd2hpY2ggSSByZWNlaXZlZCBhdCBoaXMgaGFuZHMgd2hlbiBJIGhhZCBsb3N0IG15IGRlYXJlc3QgcG9zc2Vzc2lvbnM7IAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpZiwgdGhlbiwgYSBmYXRlZCB0aW1lIGhhcyBub3cgY29tZSwgZHVlIHRvIGRpdmluZSBqZWFsb3VzeSBhbmQgdGhlIHZpY2lzc2l0dWRlcyBvZiB0aGluZ3MsIGFuZCB0aGUgc3dheSBvZiB0aGUgUGVyc2lhbnMgbXVzdCBjZWFzZSwgZ3JhbnQgdGhhdCBubyBvdGhlciBtYW4gbWF5IHNpdCB1cG9uIHRoZSB0aHJvbmUgb2YgQ3lydXMgYnV0IEFsZXhhbmRlci48L3E+IFRoYXQgdGhlc2UgdGhpbmdzIHdlcmUgdGh1cyBkb25lIGFuZCBzYWlkIGlzIHRoZSB0ZXN0aW1vbnkgb2YgbW9zdCBoaXN0b3JpYW5zLgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpZiwgdGhlbiwgYSBmYXRlZCB0aW1lIGhhcyBub3cgY29tZSwgZHVlIHRvIGRpdmluZSBqZWFsb3VzeSBhbmQgdGhlIHZpY2lzc2l0dWRlcyBvZiB0aGluZ3MsIGFuZCB0aGUgc3dheSBvZiB0aGUgUGVyc2lhbnMgbXVzdCBjZWFzZSwgZ3JhbnQgdGhhdCBubyBvdGhlciBtYW4gbWF5IHNpdCB1cG9uIHRoZSB0aHJvbmUgb2YgQ3lydXMgYnV0IEFsZXhhbmRlci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA0LjIwLjEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpdi4gMjAuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CiAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDQuMjAuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGl2LiAyMC48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaXYuIDIwLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0byByZXR1cm4gdG8gQWxleGFuZGVyLCB3aGVuIGhlIGhhZCBzdWJkdWVkIGFsbCB0aGUgY291bnRyeSBvbiB0aGlzIHNpZGUgb2YgdGhlIEV1cGhyYXRlcywgaGUgbWFyY2hlZCBhZ2FpbnN0IERhcmVpdXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBKdW5lIG9yIEp1bHkgb2YgMzMxIEIuQy48L25vdGU+IHdobyB3YXMgY29taW5nIGRvd24gdG8gbWVldCBoaW0gd2l0aCBhIG1pbGxpb24gbWVuLiBPbiB0aGlzIG1hcmNoIG9uZSBvZiBoaXMgY29tcGFuaW9ucyB0b2xkIGhpbSwgYXMgYSBtYXR0ZXIgd29ydGggbGF1Z2hpbmcgYXQsIHRoYXQgdGhlIGNhbXAtZm9sbG93ZXJzLCBpbiBzcG9ydCwgaGFkIGRpdmlkZWQgdGhlbXNlbHZlcyBpbnRvIHR3byBiYW5kcywgYW5kIHNldCBhIGdlbmVyYWwgYW5kIGNvbW1hbmRlciBvdmVyIGVhY2ggb2YgdGhlbSwgb25lIG9mIHdob20gdGhleSBjYWxsZWQgQWxleGFuZGVyLCBhbmQgdGhlIG90aGVyIERhcmVpdXM7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IHRoZXkgaGFkIGJlZ3VuIGJ5IHBlbHRpbmcgb25lIGFub3RoZXIgd2l0aCBjbG9kcyBvZiBlYXJ0aCwgdGhlbiBoYWQgZm91Z2h0IHdpdGggdGhlaXIgZmlzdHMsIGFuZCBmaW5hbGx5LCBoZWF0ZWQgd2l0aCB0aGUgZGVzaXJlIG9mIGJhdHRsZSwgaGFkIHRha2VuIHRvIHN0b25lcyBhbmQgc3RpY2tzLCBiZWluZyBub3cgbWFueSBhbmQgaGFyZCB0byBxdWVsbC4gV2hlbiBoZSBoZWFyZCB0aGlzLCBBbGV4YW5kZXIgb3JkZXJlZCB0aGUgbGVhZGVycyB0aGVtc2VsdmVzIHRvIGZpZ2h0IGluIHNpbmdsZSBjb21iYXQ7IHRvIHRoZSBvbmUgY2FsbGVkIEFsZXhhbmRlciBoZSBoaW1zZWxmIGdhdmUgYXJtb3VyLCBhbmQgdG8gdGhlIG9uZSBjYWxsZWQgRGFyZWl1cywgUGhpbG90YXMuIFRoZSBhcm15IHdlcmUgc3BlY3RhdG9ycyBvZiB0aGUgY29tYmF0LCBjb3VudGluZyB0aGUgaXNzdWUgYXMgaW4gc29tZSBtZWFzdXJlIGFuIG9tZW4gb2YgdGhlIGZ1dHVyZS4gQWZ0ZXIgYSBzdHJlbnVvdXMgYmF0dGxlLCB0aGUgb25lIGNhbGxlZCBBbGV4YW5kZXIgd2FzIHZpY3RvcmlvdXMsIGFuZCByZWNlaXZlZCBhcyBhIHJld2FyZCB0d2VsdmUgdmlsbGFnZXMgYW5kIHRoZSByaWdodCB0byB3ZWFyIFBlcnNpYW4gZHJlc3MuIFRoaXMsIGF0IGFueSByYXRlLCBpcyB3aGF0IHdlIGFyZSB0b2xkIGJ5IEVyYXRvc3RoZW5lcy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHJldHVybiB0byBBbGV4YW5kZXIsIHdoZW4gaGUgaGFkIHN1YmR1ZWQgYWxsIHRoZSBjb3VudHJ5IG9uIHRoaXMgc2lkZSBvZiB0aGUgRXVwaHJhdGVzLCBoZSBtYXJjaGVkIGFnYWluc3QgRGFyZWl1cywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gSnVuZSBvciBKdWx5IG9mIDMzMSBCLkMuPC9ub3RlPiB3aG8gd2FzIGNvbWluZyBkb3duIHRvIG1lZXQgaGltIHdpdGggYSBtaWxsaW9uIG1lbi4gT24gdGhpcyBtYXJjaCBvbmUgb2YgaGlzIGNvbXBhbmlvbnMgdG9sZCBoaW0sIGFzIGEgbWF0dGVyIHdvcnRoIGxhdWdoaW5nIGF0LCB0aGF0IHRoZSBjYW1wLWZvbGxvd2VycywgaW4gc3BvcnQsIGhhZCBkaXZpZGVkIHRoZW1zZWx2ZXMgaW50byB0d28gYmFuZHMsIGFuZCBzZXQgYSBnZW5lcmFsIGFuZCBjb21tYW5kZXIgb3ZlciBlYWNoIG9mIHRoZW0sIG9uZSBvZiB3aG9tIHRoZXkgY2FsbGVkIEFsZXhhbmRlciwgYW5kIHRoZSBvdGhlciBEYXJlaXVzOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IHRoZXkgaGFkIGJlZ3VuIGJ5IHBlbHRpbmcgb25lIGFub3RoZXIgd2l0aCBjbG9kcyBvZiBlYXJ0aCwgdGhlbiBoYWQgZm91Z2h0IHdpdGggdGhlaXIgZmlzdHMsIGFuZCBmaW5hbGx5LCBoZWF0ZWQgd2l0aCB0aGUgZGVzaXJlIG9mIGJhdHRsZSwgaGFkIHRha2VuIHRvIHN0b25lcyBhbmQgc3RpY2tzLCBiZWluZyBub3cgbWFueSBhbmQgaGFyZCB0byBxdWVsbC4gV2hlbiBoZSBoZWFyZCB0aGlzLCBBbGV4YW5kZXIgb3JkZXJlZCB0aGUgbGVhZGVycyB0aGVtc2VsdmVzIHRvIGZpZ2h0IGluIHNpbmdsZSBjb21iYXQ7IHRvIHRoZSBvbmUgY2FsbGVkIEFsZXhhbmRlciBoZSBoaW1zZWxmIGdhdmUgYXJtb3VyLCBhbmQgdG8gdGhlIG9uZSBjYWxsZWQgRGFyZWl1cywgUGhpbG90YXMuIFRoZSBhcm15IHdlcmUgc3BlY3RhdG9ycyBvZiB0aGUgY29tYmF0LCBjb3VudGluZyB0aGUgaXNzdWUgYXMgaW4gc29tZSBtZWFzdXJlIGFuIG9tZW4gb2YgdGhlIGZ1dHVyZS4gQWZ0ZXIgYSBzdHJlbnVvdXMgYmF0dGxlLCB0aGUgb25lIGNhbGxlZCBBbGV4YW5kZXIgd2FzIHZpY3RvcmlvdXMsIGFuZCByZWNlaXZlZCBhcyBhIHJld2FyZCB0d2VsdmUgdmlsbGFnZXMgYW5kIHRoZSByaWdodCB0byB3ZWFyIFBlcnNpYW4gZHJlc3MuIFRoaXMsIGF0IGFueSByYXRlLCBpcyB3aGF0IHdlIGFyZSB0b2xkIGJ5IEVyYXRvc3RoZW5lcy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBncmVhdCBiYXR0bGUgYWdhaW5zdCBEYXJlaXVzIHdhcyBub3QgZm91Z2h0IGF0IEFyYmVsYSwgYXMgbW9zdCB3cml0ZXJzIHN0YXRlLCBidXQgYXQgR2F1Z2FtZWxhLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjguNyI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiBpaWkuIDgsIDc8L2JpYmw+Ljwvbm90ZT4gVGhlIHdvcmQgc2lnbmlmaWVzLCB3ZSBhcmUgdG9sZCwgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y2FtZWwncyBob3VzZSw8L3E+IHNpbmNlIG9uZSBvZiB0aGUgYW5jaWVudCBraW5ncyBvZiB0aGUgY291bnRyeSwgYWZ0ZXIgZXNjYXBpbmcgZnJvbSBoaXMgZW5lbWllcyBvbiBhIHN3aWZ0IGNhbWVsLCBnYXZlIHRoZSBhbmltYWwgYSBob21lIGhlcmUsIGFzc2lnbmluZyBjZXJ0YWluIHZpbGxhZ2VzIGFuZCByZXZlbnVlcyBmb3IgaXRzIG1haW50ZW5hbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBzbyBoYXBwZW5lZCB0aGF0IGluIHRoZSBtb250aCBCb8OrZHJvbWlvbiB0aGUgbW9vbiBzdWZmZXJlZCBhbiBlY2xpcHNlLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VwdGVtYmVyIDIwLCAzMzEgQi5DLjwvbm90ZT4gYWJvdXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgTXlzdGVyaWVzIGF0IEF0aGVucywgYW5kIG9uIHRoZSBlbGV2ZW50aCBuaWdodCBhZnRlciB0aGUgZWNsaXBzZSwgdGhlIGFybWllcyBiZWluZyBub3cgaW4gc2lnaHQgb2Ygb25lIGFub3RoZXIsIERhcmVpdXMga2VwdCBoaXMgZm9yY2VzIHVuZGVyIGFybXMsIGFuZCBoZWxkIGEgcmV2aWV3IG9mIHRoZW0gYnkgdG9yY2gtbGlnaHQ7IGJ1dCBBbGV4YW5kZXIsIHdoaWxlIGhpcyBNYWNlZG9uaWFucyBzbGVwdCwgaGltc2VsZiBwYXNzZWQgdGhlIG5pZ2h0IGluIGZyb250IG9mIGhpcyB0ZW50IHdpdGggaGlzIHNlZXIgQXJpc3RhbmRlciwgY2VsZWJyYXRpbmcgY2VydGFpbiBteXN0ZXJpb3VzIHNhY3JlZCByaXRlcyBhbmQgc2FjcmlmaWNpbmcgdG8gdGhlIGdvZCBGZWFyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5NZWFud2hpbGUgdGhlIG9sZGVyIG9mIGhpcyBjb21wYW5pb25zLCBhbmQgcGFydGljdWxhcmx5IFBhcm1lbmlvLCB3aGVuIHRoZXkgc2F3IHRoZSBwbGFpbiBiZXR3ZWVuIHRoZSBOaXBoYXRlcyBhbmQgdGhlIEdvcmR5YWVhbiBtb3VudGFpbnMgYWxsIGxpZ2h0ZWQgdXAgd2l0aCB0aGUgYmFyYmFyaWFuIHRpcmVzLCB3aGlsZSBhbiBpbmRpc3Rpbmd1aXNoYWJseSBtaW5nbGVkIGFuZCB0dW11bHR1b3VzIHNvdW5kIG9mIHZvaWNlcyBhcm9zZSBmcm9tIHRoZWlyIGNhbXAgYXMgaWYgZnJvbSBhIHZhc3Qgb2NlYW4sIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPndlcmUgYXN0b25pc2hlZCBhdCB0aGVpciBtdWx0aXR1ZGUgYW5kIGFyZ3VlZCB3aXRoIG9uZSBhbm90aGVyIHRoYXQgaXQgd2FzIGEgZ3JlYXQgYW5kIGdyaWV2b3VzIHRhc2sgdG8gcmVwZWwgc3VjaCBhIHRpZGUgb2Ygd2FyIGJ5IGVuZ2FnaW5nIGluIGJyb2FkIGRheS1saWdodC4gVGhleSB0aGVyZWZvcmUgd2FpdGVkIHVwb24gdGhlIGtpbmcgd2hlbiBoZSBoYWQgZmluaXNoZWQgaGlzIHNhY3JpZmljZXMsIGFuZCB0cmllZCB0byBwZXJzdWFkZSBoaW0gdG8gYXR0YWNrIHRoZSBlbmVteSBieSBuaWdodCwgYW5kIHNvIHRvIGNvdmVyIHVwIHdpdGggZGFya25lc3MgdGhlIG1vc3QgZmVhcmZ1bCBhc3BlY3Qgb2YgdGhlIGNvbWluZyBzdHJ1Z2dsZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIGdhdmUgdGhlbSB0aGUgY2VsZWJyYXRlZCBhbnN3ZXIsIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd2lsbCBub3Qgc3RlYWwgbXkgdmljdG9yeTwvcT47IHdoZXJldXBvbiBzb21lIHRob3VnaHQgdGhhdCBoZSBoYWQgbWFkZSBhIHZhaW5nbG9yaW91cyByZXBseSwgYW5kIHdhcyBqZXN0aW5nIGluIHRoZSBwcmVzZW5jZSBvZiBzbyBncmVhdCBhIHBlcmlsLiBPdGhlcnMsIGhvd2V2ZXIsIHRob3VnaHQgdGhhdCBoZSBoYWQgY29uZmlkZW5jZSBpbiB0aGUgcHJlc2VudCBzaXR1YXRpb24gYW5kIGVzdGltYXRlZCB0aGUgZnV0dXJlIGNvcnJlY3RseSwgbm90IG9mZmVyaW5nIERhcmVpdXMgaW4gY2FzZSBvZiBkZWZlYXQgYW4gZXhjdXNlIHRvIHBsdWNrIHVwIGNvdXJhZ2UgYWdhaW4gZm9yIGFub3RoZXIgYXR0ZW1wdCwgYnkgbGF5aW5nIHRoZSBibGFtZSB0aGlzIHRpbWUgdXBvbiBkYXJrbmVzcyBhbmQgbmlnaHQsIGFzIGhlIGhhZCBiZWZvcmUgdXBvbiBtb3VudGFpbnMsIGRlZmlsZXMsIGFuZCBzZWEuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMTAuMSI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiBpaWkuIDEwPC9iaWJsPiwgd2hlcmUgaXQgaXMgUGFybWVuaW8gd2hvIGFkdmlzZXMgYW4gYXR0YWNrIGF0IG5pZ2h0Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIERhcmVpdXMgd291bGQgbm90IGdpdmUgdXAgdGhlIHdhciBmb3IgbGFjayBvZiBhcm1zIG9yIG1lbiB3aGVuIGhlIGNvdWxkIGRyYXcgZnJvbSBzbyBncmVhdCBhIGhvc3QgYW5kIHNvIHZhc3QgYSB0ZXJyaXRvcnksIGJ1dCBvbmx5IHdoZW4gaGUgaGFkIGxvc3QgY291cmFnZSBhbmQgaG9wZSwgdW5kZXIgdGhlIGNvbnZpY3Rpb24gYnJvdWdodCBieSBhIGRvd25yaWdodCBkZWZlYXQgaW4gYnJvYWQgZGF5LWxpZ2h0LjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGdyZWF0IGJhdHRsZSBhZ2FpbnN0IERhcmVpdXMgd2FzIG5vdCBmb3VnaHQgYXQgQXJiZWxhLCBhcyBtb3N0IHdyaXRlcnMgc3RhdGUsIGJ1dCBhdCBHYXVnYW1lbGEuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjguNyI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpaS4gOCwgNzwvYmlibD4uPC9ub3RlPiBUaGUgd29yZCBzaWduaWZpZXMsIHdlIGFyZSB0b2xkLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjguNyI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpaS4gOCwgNzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkuIDgsIDc8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNhbWVsJ3MgaG91c2UsPC9xPiBzaW5jZSBvbmUgb2YgdGhlIGFuY2llbnQga2luZ3Mgb2YgdGhlIGNvdW50cnksIGFmdGVyIGVzY2FwaW5nIGZyb20gaGlzIGVuZW1pZXMgb24gYSBzd2lmdCBjYW1lbCwgZ2F2ZSB0aGUgYW5pbWFsIGEgaG9tZSBoZXJlLCBhc3NpZ25pbmcgY2VydGFpbiB2aWxsYWdlcyBhbmQgcmV2ZW51ZXMgZm9yIGl0cyBtYWludGVuYW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHNvIGhhcHBlbmVkIHRoYXQgaW4gdGhlIG1vbnRoIEJvw6tkcm9taW9uIHRoZSBtb29uIHN1ZmZlcmVkIGFuIGVjbGlwc2UsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlcHRlbWJlciAyMCwgMzMxIEIuQy48L25vdGU+IGFib3V0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIE15c3RlcmllcyBhdCBBdGhlbnMsIGFuZCBvbiB0aGUgZWxldmVudGggbmlnaHQgYWZ0ZXIgdGhlIGVjbGlwc2UsIHRoZSBhcm1pZXMgYmVpbmcgbm93IGluIHNpZ2h0IG9mIG9uZSBhbm90aGVyLCBEYXJlaXVzIGtlcHQgaGlzIGZvcmNlcyB1bmRlciBhcm1zLCBhbmQgaGVsZCBhIHJldmlldyBvZiB0aGVtIGJ5IHRvcmNoLWxpZ2h0OyBidXQgQWxleGFuZGVyLCB3aGlsZSBoaXMgTWFjZWRvbmlhbnMgc2xlcHQsIGhpbXNlbGYgcGFzc2VkIHRoZSBuaWdodCBpbiBmcm9udCBvZiBoaXMgdGVudCB3aXRoIGhpcyBzZWVyIEFyaXN0YW5kZXIsIGNlbGVicmF0aW5nIGNlcnRhaW4gbXlzdGVyaW91cyBzYWNyZWQgcml0ZXMgYW5kIHNhY3JpZmljaW5nIHRvIHRoZSBnb2QgRmVhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSB0aGUgb2xkZXIgb2YgaGlzIGNvbXBhbmlvbnMsIGFuZCBwYXJ0aWN1bGFybHkgUGFybWVuaW8sIHdoZW4gdGhleSBzYXcgdGhlIHBsYWluIGJldHdlZW4gdGhlIE5pcGhhdGVzIGFuZCB0aGUgR29yZHlhZWFuIG1vdW50YWlucyBhbGwgbGlnaHRlZCB1cCB3aXRoIHRoZSBiYXJiYXJpYW4gdGlyZXMsIHdoaWxlIGFuIGluZGlzdGluZ3Vpc2hhYmx5IG1pbmdsZWQgYW5kIHR1bXVsdHVvdXMgc291bmQgb2Ygdm9pY2VzIGFyb3NlIGZyb20gdGhlaXIgY2FtcCBhcyBpZiBmcm9tIGEgdmFzdCBvY2VhbiwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPndlcmUgYXN0b25pc2hlZCBhdCB0aGVpciBtdWx0aXR1ZGUgYW5kIGFyZ3VlZCB3aXRoIG9uZSBhbm90aGVyIHRoYXQgaXQgd2FzIGEgZ3JlYXQgYW5kIGdyaWV2b3VzIHRhc2sgdG8gcmVwZWwgc3VjaCBhIHRpZGUgb2Ygd2FyIGJ5IGVuZ2FnaW5nIGluIGJyb2FkIGRheS1saWdodC4gVGhleSB0aGVyZWZvcmUgd2FpdGVkIHVwb24gdGhlIGtpbmcgd2hlbiBoZSBoYWQgZmluaXNoZWQgaGlzIHNhY3JpZmljZXMsIGFuZCB0cmllZCB0byBwZXJzdWFkZSBoaW0gdG8gYXR0YWNrIHRoZSBlbmVteSBieSBuaWdodCwgYW5kIHNvIHRvIGNvdmVyIHVwIHdpdGggZGFya25lc3MgdGhlIG1vc3QgZmVhcmZ1bCBhc3BlY3Qgb2YgdGhlIGNvbWluZyBzdHJ1Z2dsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSBnYXZlIHRoZW0gdGhlIGNlbGVicmF0ZWQgYW5zd2VyLCA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd2lsbCBub3Qgc3RlYWwgbXkgdmljdG9yeTwvcT47IHdoZXJldXBvbiBzb21lIHRob3VnaHQgdGhhdCBoZSBoYWQgbWFkZSBhIHZhaW5nbG9yaW91cyByZXBseSwgYW5kIHdhcyBqZXN0aW5nIGluIHRoZSBwcmVzZW5jZSBvZiBzbyBncmVhdCBhIHBlcmlsLiBPdGhlcnMsIGhvd2V2ZXIsIHRob3VnaHQgdGhhdCBoZSBoYWQgY29uZmlkZW5jZSBpbiB0aGUgcHJlc2VudCBzaXR1YXRpb24gYW5kIGVzdGltYXRlZCB0aGUgZnV0dXJlIGNvcnJlY3RseSwgbm90IG9mZmVyaW5nIERhcmVpdXMgaW4gY2FzZSBvZiBkZWZlYXQgYW4gZXhjdXNlIHRvIHBsdWNrIHVwIGNvdXJhZ2UgYWdhaW4gZm9yIGFub3RoZXIgYXR0ZW1wdCwgYnkgbGF5aW5nIHRoZSBibGFtZSB0aGlzIHRpbWUgdXBvbiBkYXJrbmVzcyBhbmQgbmlnaHQsIGFzIGhlIGhhZCBiZWZvcmUgdXBvbiBtb3VudGFpbnMsIGRlZmlsZXMsIGFuZCBzZWEuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjEwLjEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkuIDEwPC9iaWJsPiwgd2hlcmUgaXQgaXMgUGFybWVuaW8gd2hvIGFkdmlzZXMgYW4gYXR0YWNrIGF0IG5pZ2h0Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjEwLjEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkuIDEwPC9iaWJsPiwgd2hlcmUgaXQgaXMgUGFybWVuaW8gd2hvIGFkdmlzZXMgYW4gYXR0YWNrIGF0IG5pZ2h0Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAxMDwvdHJhbnNsYXRpb24+"
translation['31.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkZvciBEYXJlaXVzIHdvdWxkIG5vdCBnaXZlIHVwIHRoZSB3YXIgZm9yIGxhY2sgb2YgYXJtcyBvciBtZW4gd2hlbiBoZSBjb3VsZCBkcmF3IGZyb20gc28gZ3JlYXQgYSBob3N0IGFuZCBzbyB2YXN0IGEgdGVycml0b3J5LCBidXQgb25seSB3aGVuIGhlIGhhZCBsb3N0IGNvdXJhZ2UgYW5kIGhvcGUsIHVuZGVyIHRoZSBjb252aWN0aW9uIGJyb3VnaHQgYnkgYSBkb3ducmlnaHQgZGVmZWF0IGluIGJyb2FkIGRheS1saWdodC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgbWVuIHdlcmUgZ29uZSwgQWxleGFuZGVyIGxheSBkb3duIGluIGhpcyB0ZW50LCBhbmQgaXMgc2FpZCB0byBoYXZlIHBhc3NlZCB0aGUgcmVzdCBvZiB0aGUgbmlnaHQgaW4gYSBkZWVwZXIgc2xlZXAgdGhhbiB1c3VhbCwgc28gdGhhdCB3aGVuIGhpcyBvZmZpY2VycyBjYW1lIHRvIGhpbSBpbiB0aGUgZWFybHkgbW9ybmluZyB0aGV5IHdlcmUgYW1hemVkLCBhbmQgb24gdGhlaXIgb3duIGF1dGhvcml0eSBpc3N1ZWQgb3JkZXJzIHRoYXQgdGhlIHNvbGRpZXJzIHNob3VsZCBmaXJzdCB0YWtlIGJyZWFrZmFzdC4gVGhlbiwgc2luY2UgdGhlIG9jY2FzaW9uIHdhcyB1cmdlbnQsIFBhcm1lbmlvIGVudGVyZWQgdGhlIHRlbnQsIGFuZCBzdGFuZGluZyBieSBoaXMgY291Y2ggY2FsbGVkIEFsZXhhbmRlciB0d2ljZSBvciB0aHJpY2UgYnkgbmFtZTsgYW5kIHdoZW4gaGUgaGFkIHRodXMgcm91c2VkIGhpbSwgaGUgYXNrZWQgaGltIGhvdyBoZSBjb3VsZCBwb3NzaWJseSBzbGVlcCBhcyBpZiBoZSB3ZXJlIHZpY3RvcmlvdXMsIGluc3RlYWQgb2YgYmVpbmcgYWJvdXQgdG8gZmlnaHQgdGhlIGdyZWF0ZXN0IG9mIGFsbCBoaXMgYmF0dGxlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBBbGV4YW5kZXIgc2FpZCB3aXRoIGEgc21pbGU6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQsIHByYXk/IERvc3QgdGhvdSBub3QgdGhpbmsgdGhhdCB3ZSBhcmUgYWxyZWFkeSB2aWN0b3Jpb3VzLCBub3cgdGhhdCB3ZSBhcmUgcmVsaWV2ZWQgZnJvbSB3YW5kZXJpbmcgYWJvdXQgaW4gYSB2YXN0IGFuZCBkZXNvbGF0ZWQgY291bnRyeSBpbiBwdXJzdWl0IG9mIGEgRGFyZWl1cyB3aG8gYXZvaWRzIGEgYmF0dGxlPzwvcT4gQW5kIG5vdCBvbmx5IGJlZm9yZSB0aGUgYmF0dGxlLCBidXQgYWxzbyBpbiB0aGUgdmVyeSB0aGljayBvZiB0aGUgc3RydWdnbGUgZGlkIGhlIHNob3cgaGltc2VsZiBncmVhdCwgYW5kIGZpcm0gaW4gaGlzIGNvbmZpZGVudCBjYWxjdWxhdGlvbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiB0aGUgYmF0dGxlIHRoZSBsZWZ0IHdpbmcgdW5kZXIgUGFybWVuaW8gd2FzIHRocm93biBiYWNrIGFuZCBpbiBkaXN0cmVzcywgd2hlbiB0aGUgQmFjdHJpYW4gY2F2YWxyeSBmZWxsIHVwb24gdGhlIE1hY2Vkb25pYW5zIHdpdGggZ3JlYXQgaW1wZXR1b3NpdHkgYW5kIHZpb2xlbmNlLCBhbmQgd2hlbiBNYXphZXVzIHNlbnQgaG9yc2VtZW4gcm91bmQgb3V0c2lkZSB0aGUgbGluZSBvZiBiYXR0bGUgdG8gYXR0YWNrIHRob3NlIHdobyB3ZXJlIGd1YXJkaW5nIHRoZSBNYWNlZG9uaWFuIGJhZ2dhZ2UuIFRoZXJlZm9yZSwgdG9vLCBQYXJtZW5pbywgbXVjaCBkaXN0dXJiZWQgYnkgYm90aCBvY2N1cnJlbmNlcywgc2VudCBtZXNzZW5nZXJzIHRvIEFsZXhhbmRlciB0ZWxsaW5nIGhpbSB0aGF0IGNhbXAgYW5kIGJhZ2dhZ2Ugd2VyZSBnb25lLCB1bmxlc3MgaGUgc3BlZWRpbHkgc2VudCBzdHJvbmcgcmVpbmZvcmNlbWVudHMgZnJvbSBmcm9udCB0byByZWFyLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjE1LjEiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gaWlpLiAxNSwgMTwvYmlibD4sIHdoZXJlIFBhcm1lbmlvJ3MgbWVzc2FnZSByZWNhbGxzIEFsZXhhbmRlciBmcm9tIHRoZSBwdXJzdWl0IG9mIERhcmVpdXMuPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGl0IGNoYW5jZWQgdGhhdCBhdCB0aGF0IGluc3RhbnQgQWxleGFuZGVyIHdhcyBhYm91dCB0byBnaXZlIHRoZSBzaWduYWwgZm9yIHRoZSBvbnNldCB0byB0aG9zZSB1bmRlciBoaXMgY29tbWFuZDsgYnV0IHdoZW4gaGUgaGVhcmQgUGFybWVuaW8ncyBtZXNzYWdlLCBoZSBkZWNsYXJlZCB0aGF0IFBhcm1lbmlvIHdhcyBiZXNpZGUgaGltc2VsZiBhbmQgaGFkIGxvc3QgdGhlIHVzZSBvZiBoaXMgcmVhc29uLCBhbmQgaGFkIGZvcmdvdHRlbiBpbiBoaXMgZGlzdHJlc3MgdGhhdCB2aWN0b3JzIGFkZCB0aGUgYmFnZ2FnZSBvZiB0aGUgZW5lbXkgdG8gdGhlaXIgb3duLCBhbmQgdGhhdCB0aG9zZSB3aG8gYXJlIHZhbnF1aXNoZWQgbXVzdCBub3QgdGhpbmsgYWJvdXQgdGhlaXIgd2VhbHRoIG9yIHRoZWlyIHNsYXZlcywgYnV0IG9ubHkgaG93IHRoZXkgbWF5IGZpZ2h0IGdsb3Jpb3VzbHkgYW5kIGRpZSB3aXRoIGhvbm91ci48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIG1lbiB3ZXJlIGdvbmUsIEFsZXhhbmRlciBsYXkgZG93biBpbiBoaXMgdGVudCwgYW5kIGlzIHNhaWQgdG8gaGF2ZSBwYXNzZWQgdGhlIHJlc3Qgb2YgdGhlIG5pZ2h0IGluIGEgZGVlcGVyIHNsZWVwIHRoYW4gdXN1YWwsIHNvIHRoYXQgd2hlbiBoaXMgb2ZmaWNlcnMgY2FtZSB0byBoaW0gaW4gdGhlIGVhcmx5IG1vcm5pbmcgdGhleSB3ZXJlIGFtYXplZCwgYW5kIG9uIHRoZWlyIG93biBhdXRob3JpdHkgaXNzdWVkIG9yZGVycyB0aGF0IHRoZSBzb2xkaWVycyBzaG91bGQgZmlyc3QgdGFrZSBicmVha2Zhc3QuIFRoZW4sIHNpbmNlIHRoZSBvY2Nhc2lvbiB3YXMgdXJnZW50LCBQYXJtZW5pbyBlbnRlcmVkIHRoZSB0ZW50LCBhbmQgc3RhbmRpbmcgYnkgaGlzIGNvdWNoIGNhbGxlZCBBbGV4YW5kZXIgdHdpY2Ugb3IgdGhyaWNlIGJ5IG5hbWU7IGFuZCB3aGVuIGhlIGhhZCB0aHVzIHJvdXNlZCBoaW0sIGhlIGFza2VkIGhpbSBob3cgaGUgY291bGQgcG9zc2libHkgc2xlZXAgYXMgaWYgaGUgd2VyZSB2aWN0b3Jpb3VzLCBpbnN0ZWFkIG9mIGJlaW5nIGFib3V0IHRvIGZpZ2h0IHRoZSBncmVhdGVzdCBvZiBhbGwgaGlzIGJhdHRsZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gQWxleGFuZGVyIHNhaWQgd2l0aCBhIHNtaWxlOiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQsIHByYXk/IERvc3QgdGhvdSBub3QgdGhpbmsgdGhhdCB3ZSBhcmUgYWxyZWFkeSB2aWN0b3Jpb3VzLCBub3cgdGhhdCB3ZSBhcmUgcmVsaWV2ZWQgZnJvbSB3YW5kZXJpbmcgYWJvdXQgaW4gYSB2YXN0IGFuZCBkZXNvbGF0ZWQgY291bnRyeSBpbiBwdXJzdWl0IG9mIGEgRGFyZWl1cyB3aG8gYXZvaWRzIGEgYmF0dGxlPzwvcT4gQW5kIG5vdCBvbmx5IGJlZm9yZSB0aGUgYmF0dGxlLCBidXQgYWxzbyBpbiB0aGUgdmVyeSB0aGljayBvZiB0aGUgc3RydWdnbGUgZGlkIGhlIHNob3cgaGltc2VsZiBncmVhdCwgYW5kIGZpcm0gaW4gaGlzIGNvbmZpZGVudCBjYWxjdWxhdGlvbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiB0aGUgYmF0dGxlIHRoZSBsZWZ0IHdpbmcgdW5kZXIgUGFybWVuaW8gd2FzIHRocm93biBiYWNrIGFuZCBpbiBkaXN0cmVzcywgd2hlbiB0aGUgQmFjdHJpYW4gY2F2YWxyeSBmZWxsIHVwb24gdGhlIE1hY2Vkb25pYW5zIHdpdGggZ3JlYXQgaW1wZXR1b3NpdHkgYW5kIHZpb2xlbmNlLCBhbmQgd2hlbiBNYXphZXVzIHNlbnQgaG9yc2VtZW4gcm91bmQgb3V0c2lkZSB0aGUgbGluZSBvZiBiYXR0bGUgdG8gYXR0YWNrIHRob3NlIHdobyB3ZXJlIGd1YXJkaW5nIHRoZSBNYWNlZG9uaWFuIGJhZ2dhZ2UuIFRoZXJlZm9yZSwgdG9vLCBQYXJtZW5pbywgbXVjaCBkaXN0dXJiZWQgYnkgYm90aCBvY2N1cnJlbmNlcywgc2VudCBtZXNzZW5nZXJzIHRvIEFsZXhhbmRlciB0ZWxsaW5nIGhpbSB0aGF0IGNhbXAgYW5kIGJhZ2dhZ2Ugd2VyZSBnb25lLCB1bmxlc3MgaGUgc3BlZWRpbHkgc2VudCBzdHJvbmcgcmVpbmZvcmNlbWVudHMgZnJvbSBmcm9udCB0byByZWFyLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4xNS4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAxNSwgMTwvYmlibD4sIHdoZXJlIFBhcm1lbmlvJ3MgbWVzc2FnZSByZWNhbGxzIEFsZXhhbmRlciBmcm9tIHRoZSBwdXJzdWl0IG9mIERhcmVpdXMuPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMTUuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpaS4gMTUsIDE8L2JpYmw+LCB3aGVyZSBQYXJtZW5pbydzIG1lc3NhZ2UgcmVjYWxscyBBbGV4YW5kZXIgZnJvbSB0aGUgcHVyc3VpdCBvZiBEYXJlaXVzLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAxNSwgMTwvdHJhbnNsYXRpb24+"
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaXQgY2hhbmNlZCB0aGF0IGF0IHRoYXQgaW5zdGFudCBBbGV4YW5kZXIgd2FzIGFib3V0IHRvIGdpdmUgdGhlIHNpZ25hbCBmb3IgdGhlIG9uc2V0IHRvIHRob3NlIHVuZGVyIGhpcyBjb21tYW5kOyBidXQgd2hlbiBoZSBoZWFyZCBQYXJtZW5pbydzIG1lc3NhZ2UsIGhlIGRlY2xhcmVkIHRoYXQgUGFybWVuaW8gd2FzIGJlc2lkZSBoaW1zZWxmIGFuZCBoYWQgbG9zdCB0aGUgdXNlIG9mIGhpcyByZWFzb24sIGFuZCBoYWQgZm9yZ290dGVuIGluIGhpcyBkaXN0cmVzcyB0aGF0IHZpY3RvcnMgYWRkIHRoZSBiYWdnYWdlIG9mIHRoZSBlbmVteSB0byB0aGVpciBvd24sIGFuZCB0aGF0IHRob3NlIHdobyBhcmUgdmFucXVpc2hlZCBtdXN0IG5vdCB0aGluayBhYm91dCB0aGVpciB3ZWFsdGggb3IgdGhlaXIgc2xhdmVzLCBidXQgb25seSBob3cgdGhleSBtYXkgZmlnaHQgZ2xvcmlvdXNseSBhbmQgZGllIHdpdGggaG9ub3VyLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHNlbmRpbmcgdGhpcyBtZXNzYWdlIHRvIFBhcm1lbmlvLCBoZSBwdXQgb24gaGlzIGhlbG1ldCwgYnV0IHRoZSByZXN0IG9mIGhpcyBhcm1vdXIgaGUgaGFkIG9uIGFzIGhlIGNhbWUgZnJvbSBoaXMgdGVudCwgbmFtZWx5LCBhIHZlc3Qgb2YgU2ljaWxpYW4gbWFrZSBnaXJ0IGFib3V0IGhpbSwgYW5kIG92ZXIgdGhpcyBhIGJyZWFzdHBsYXRlIG9mIHR3by1wbHkgbGluZW4gZnJvbSB0aGUgc3BvaWxzIHRha2VuIGF0IElzc3VzLiBIaXMgaGVsbWV0IHdhcyBvZiBpcm9uLCBidXQgZ2xlYW1lZCBsaWtlIHBvbGlzaGVkIHNpbHZlciwgYSB3b3JrIG9mIFRoZW9waGlsdXM7IGFuZCB0aGVyZSB3YXMgZml0dGVkIHRvIHRoaXMgYSBnb3JnZXQsIGxpa2V3aXNlIG9mIGlyb24sIHNldCB3aXRoIHByZWNpb3VzIHN0b25lcy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGFkIGEgc3dvcmQsIHRvbywgb2YgYXN0b25pc2hpbmcgdGVtcGVyIGFuZCBsaWdodG5lc3MsIGEgZ2lmdCBmcm9tIHRoZSBraW5nIG9mIHRoZSBDaXRpZWFucywgYW5kIGhlIGhhZCB0cmFpbmVkIGhpbXNlbGYgdG8gdXNlIGEgc3dvcmQgZm9yIHRoZSBtb3N0IHBhcnQgaW4gaGlzIGJhdHRsZXMuIEhlIHdvcmUgYSBiZWx0IGFsc28sIHdoaWNoIHdhcyB0b28gZWxhYm9yYXRlIGZvciB0aGUgcmVzdCBvZiBoaXMgYXJtb3VyOyBmb3IgaXQgd2FzIGEgd29yayBvZiBIZWxpY29uIHRoZSBhbmNpZW50LCBhbmQgYSBtYXJrIG9mIGhvbm91ciBmcm9tIHRoZSBjaXR5IG9mIFJob2Rlcywgd2hpY2ggaGFkIGdpdmVuIGl0IHRvIGhpbTsgdGhpcyBhbHNvIGhlIHdhcyB3b250IHRvIHdlYXIgaW4gaGlzIGJhdHRsZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFzIGxvbmcsIHRoZW4sIGFzIGhlIHdhcyByaWRpbmcgYWJvdXQgYW5kIG1hcnNoYWxsaW5nIHNvbWUgcGFydCBvZiBoaXMgcGhhbGFueCwgb3IgZXhob3J0aW5nIG9yIGluc3RydWN0aW5nIG9yIHJldmlld2luZyBoaXMgbWVuLCBoZSBzcGFyZWQgQnVjZXBoYWxhcywgd2hvIHdhcyBub3cgcGFzdCBoaXMgcHJpbWUsIGFuZCB1c2VkIGFub3RoZXIgaG9yc2U7IGJ1dCB3aGVuZXZlciBoZSB3YXMgZ29pbmcgaW50byBhY3Rpb24sIEJ1Y2VwaGFsYXMgd291bGQgYmUgbGVkIHVwLCBhbmQgaGUgd291bGQgbW91bnQgaGltIGFuZCBhdCBvbmNlIGJlZ2luIHRoZSBhdHRhY2suPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHNlbmRpbmcgdGhpcyBtZXNzYWdlIHRvIFBhcm1lbmlvLCBoZSBwdXQgb24gaGlzIGhlbG1ldCwgYnV0IHRoZSByZXN0IG9mIGhpcyBhcm1vdXIgaGUgaGFkIG9uIGFzIGhlIGNhbWUgZnJvbSBoaXMgdGVudCwgbmFtZWx5LCBhIHZlc3Qgb2YgU2ljaWxpYW4gbWFrZSBnaXJ0IGFib3V0IGhpbSwgYW5kIG92ZXIgdGhpcyBhIGJyZWFzdHBsYXRlIG9mIHR3by1wbHkgbGluZW4gZnJvbSB0aGUgc3BvaWxzIHRha2VuIGF0IElzc3VzLiBIaXMgaGVsbWV0IHdhcyBvZiBpcm9uLCBidXQgZ2xlYW1lZCBsaWtlIHBvbGlzaGVkIHNpbHZlciwgYSB3b3JrIG9mIFRoZW9waGlsdXM7IGFuZCB0aGVyZSB3YXMgZml0dGVkIHRvIHRoaXMgYSBnb3JnZXQsIGxpa2V3aXNlIG9mIGlyb24sIHNldCB3aXRoIHByZWNpb3VzIHN0b25lcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBhIHN3b3JkLCB0b28sIG9mIGFzdG9uaXNoaW5nIHRlbXBlciBhbmQgbGlnaHRuZXNzLCBhIGdpZnQgZnJvbSB0aGUga2luZyBvZiB0aGUgQ2l0aWVhbnMsIGFuZCBoZSBoYWQgdHJhaW5lZCBoaW1zZWxmIHRvIHVzZSBhIHN3b3JkIGZvciB0aGUgbW9zdCBwYXJ0IGluIGhpcyBiYXR0bGVzLiBIZSB3b3JlIGEgYmVsdCBhbHNvLCB3aGljaCB3YXMgdG9vIGVsYWJvcmF0ZSBmb3IgdGhlIHJlc3Qgb2YgaGlzIGFybW91cjsgZm9yIGl0IHdhcyBhIHdvcmsgb2YgSGVsaWNvbiB0aGUgYW5jaWVudCwgYW5kIGEgbWFyayBvZiBob25vdXIgZnJvbSB0aGUgY2l0eSBvZiBSaG9kZXMsIHdoaWNoIGhhZCBnaXZlbiBpdCB0byBoaW07IHRoaXMgYWxzbyBoZSB3YXMgd29udCB0byB3ZWFyIGluIGhpcyBiYXR0bGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFzIGxvbmcsIHRoZW4sIGFzIGhlIHdhcyByaWRpbmcgYWJvdXQgYW5kIG1hcnNoYWxsaW5nIHNvbWUgcGFydCBvZiBoaXMgcGhhbGFueCwgb3IgZXhob3J0aW5nIG9yIGluc3RydWN0aW5nIG9yIHJldmlld2luZyBoaXMgbWVuLCBoZSBzcGFyZWQgQnVjZXBoYWxhcywgd2hvIHdhcyBub3cgcGFzdCBoaXMgcHJpbWUsIGFuZCB1c2VkIGFub3RoZXIgaG9yc2U7IGJ1dCB3aGVuZXZlciBoZSB3YXMgZ29pbmcgaW50byBhY3Rpb24sIEJ1Y2VwaGFsYXMgd291bGQgYmUgbGVkIHVwLCBhbmQgaGUgd291bGQgbW91bnQgaGltIGFuZCBhdCBvbmNlIGJlZ2luIHRoZSBhdHRhY2suPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhpcyBvY2Nhc2lvbiwgaGUgbWFkZSBhIHZlcnkgbG9uZyBzcGVlY2ggdG8gdGhlIFRoZXNzYWxpYW5zIGFuZCB0aGUgb3RoZXIgR3JlZWtzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U29tZXRpbWVzIHRoZSB0ZXJtIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlbGxlbmVzPC9xPiBleGNsdWRlcyBhbmQgc29tZXRpbWVzIGl0IGluY2x1ZGVzLCB0aGUgTWFjZWRvbmlhbnMuIFRoZSBjb250ZXh0IG11c3QgZGVjaWRlLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDQ3LjUiIHZhbGlkPSJ5ZXMiPnhsdmlpLiA1PC9iaWJsPi48L25vdGU+IGFuZCB3aGVuIGhlIHNhdyB0aGF0IHRoZXkgZW5jb3VyYWdlZCBoaW0gd2l0aCBzaG91dHMgdG8gbGVhZCB0aGVtIGFnYWluc3QgdGhlIEJhcmJhcmlhbnMsIGhlIHNoaWZ0ZWQgaGlzIGxhbmNlIGludG8gaGlzIGxlZnQgaGFuZCwgYW5kIHdpdGggaGlzIHJpZ2h0IGFwcGVhbGVkIHRvIHRoZSBnb2RzLCBhcyBDYWxsaXN0aGVuZXMgdGVsbHMgdXMsIHByYXlpbmcgdGhlbSwgaWYgaGUgd2FzIHJlYWxseSBzcHJ1bmcgZnJvbSBaZXVzLCB0byBkZWZlbmQgYW5kIHN0cmVuZ3RoZW4gdGhlIEdyZWVrcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXJpc3RhbmRlciB0aGUgc2VlciwgdG9vLCB3ZWFyaW5nIGEgd2hpdGUgbWFudGxlIGFuZCBoYXZpbmcgYSBjcm93biBvZiBnb2xkIHVwb24gaGlzIGhlYWQsIHJvZGUgYWxvbmcgdGhlIHJhbmtzIHBvaW50aW5nIG91dCB0byB0aGVtIGFuIGVhZ2xlIHdoaWNoIHNvYXJlZCBhYm92ZSB0aGUgaGVhZCBvZiBBbGV4YW5kZXIgYW5kIGRpcmVjdGVkIGhpcyBmbGlnaHQgc3RyYWlnaHQgYWdhaW5zdCB0aGUgZW5lbXksIGF0IHdoaWNoIHNpZ2h0IGdyZWF0IGNvdXJhZ2UgZmlsbGVkIHRoZSBiZWhvbGRlcnMsIGFuZCBhZnRlciBtdXR1YWwgZW5jb3VyYWdlbWVudCBhbmQgZXhob3J0YXRpb24gdGhlIGNhdmFscnkgY2hhcmdlZCBhdCBmdWxsIHNwZWVkIHVwb24gdGhlIGVuZW15IGFuZCB0aGUgcGhhbGFueCByb2xsZWQgb24gYWZ0ZXIgdGhlbSBsaWtlIGEgZmxvb2QuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBiZWZvcmUgdGhlIGZvcmVtb3N0IHJhbmtzIHdlcmUgZW5nYWdlZCB0aGUgQmFyYmFyaWFucyBnYXZlIHdheSwgYW5kIHdlcmUgaG90bHkgcHVyc3VlZCwgQWxleGFuZGVyIGRyaXZpbmcgdGhlIGNvbnF1ZXJlZCBmb2UgdG93YXJkcyB0aGUgY2VudHJlIG9mIHRoZWlyIGFycmF5LCB3aGVyZSBEYXJlaXVzIHdhcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFsZXhhbmRlcidzIHRhY3RpY3MgYXJlIG1pbnV0ZWx5IGRlc2NyaWJlZCBieSBBcnJpYW4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjE0LjEiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QW5hYi48L3RpdGxlPiBpaWkuIDE0LCAxLTM8L2JpYmw+KS48L25vdGU+IEZvciBmcm9tIGFmYXIgaGUgd2FzIHNlZW4gYnkgQWxleGFuZGVyIHRocm91Z2ggdGhlIGRlZXAgcmFua3Mgb2YgdGhlIHJveWFsIHNxdWFkcm9uIG9mIGhvcnNlIGRyYXduIHVwIGluIGZyb250IG9mIGhpbSwgdG93ZXJpbmcgY29uc3BpY3VvdXMsIGEgZmluZS1sb29raW5nIG1hbiBhbmQgdGFsbCwgc3RhbmRpbmcgb24gYSBsb2Z0eSBjaGFyaW90LCBmZW5jZWQgYWJvdXQgYnkgYSBudW1lcm91cyBhbmQgYnJpbGxpYW50IGFycmF5IG9mIGhvcnNlbWVuLCB3aG8gd2VyZSBkZW5zZWx5IG1hc3NlZCBhcm91bmQgaGlzIGNoYXJpb3QgYW5kIGRyYXduIHVwIHRvIHJlY2VpdmUgdGhlIGVuZW15LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGV5IHNhdyBBbGV4YW5kZXIgY2xvc2UgYXQgaGFuZCBhbmQgdGVycmlibGUsIGFuZCBkcml2aW5nIHRob3NlIHdobyBmbGVkIGJlZm9yZSBoaW0gdXBvbiB0aG9zZSB3aG8gaGVsZCB0aGVpciBncm91bmQsIHRoZXkgd2VyZSBzbWl0dGVuIHdpdGggZmVhciBhbmQgc2NhdHRlcmVkLCBmb3IgdGhlIG1vc3QgcGFydC4gVGhlIGJyYXZlc3QgYW5kIG5vYmxlc3Qgb2YgdGhlbSwgaG93ZXZlciwgc2xhaW4gaW4gZnJvbnQgb2YgdGhlaXIga2luZyBhbmQgZmFsbGluZyBpbiBoZWFwcyB1cG9uIG9uZSBhbm90aGVyLCBvYnN0cnVjdGVkIHRoZSBNYWNlZG9uaWFucyBpbiB0aGVpciBwdXJzdWl0LCB3ZWF2aW5nIGFuZCB0d2luaW5nIHRoZW1zZWx2ZXMgaW4gdGhlaXIgbGFzdCBhZ29uaWVzIGFib3V0IHJpZGVycyBhbmQgaG9yc2VzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhpcyBvY2Nhc2lvbiwgaGUgbWFkZSBhIHZlcnkgbG9uZyBzcGVlY2ggdG8gdGhlIFRoZXNzYWxpYW5zIGFuZCB0aGUgb3RoZXIgR3JlZWtzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Tb21ldGltZXMgdGhlIHRlcm0gPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZWxsZW5lczwvcT4gZXhjbHVkZXMgYW5kIHNvbWV0aW1lcyBpdCBpbmNsdWRlcywgdGhlIE1hY2Vkb25pYW5zLiBUaGUgY29udGV4dCBtdXN0IGRlY2lkZS4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDQ3LjUiIHZhbGlkPSJ5ZXMiPnhsdmlpLiA1PC9iaWJsPi48L25vdGU+IGFuZCB3aGVuIGhlIHNhdyB0aGF0IHRoZXkgZW5jb3VyYWdlZCBoaW0gd2l0aCBzaG91dHMgdG8gbGVhZCB0aGVtIGFnYWluc3QgdGhlIEJhcmJhcmlhbnMsIGhlIHNoaWZ0ZWQgaGlzIGxhbmNlIGludG8gaGlzIGxlZnQgaGFuZCwgYW5kIHdpdGggaGlzIHJpZ2h0IGFwcGVhbGVkIHRvIHRoZSBnb2RzLCBhcyBDYWxsaXN0aGVuZXMgdGVsbHMgdXMsIHByYXlpbmcgdGhlbSwgaWYgaGUgd2FzIHJlYWxseSBzcHJ1bmcgZnJvbSBaZXVzLCB0byBkZWZlbmQgYW5kIHN0cmVuZ3RoZW4gdGhlIEdyZWVrcy4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlbGxlbmVzPC9xPiBleGNsdWRlcyBhbmQgc29tZXRpbWVzIGl0IGluY2x1ZGVzLCB0aGUgTWFjZWRvbmlhbnMuIFRoZSBjb250ZXh0IG11c3QgZGVjaWRlLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNDcuNSIgdmFsaWQ9InllcyI+eGx2aWkuIDU8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFyaXN0YW5kZXIgdGhlIHNlZXIsIHRvbywgd2VhcmluZyBhIHdoaXRlIG1hbnRsZSBhbmQgaGF2aW5nIGEgY3Jvd24gb2YgZ29sZCB1cG9uIGhpcyBoZWFkLCByb2RlIGFsb25nIHRoZSByYW5rcyBwb2ludGluZyBvdXQgdG8gdGhlbSBhbiBlYWdsZSB3aGljaCBzb2FyZWQgYWJvdmUgdGhlIGhlYWQgb2YgQWxleGFuZGVyIGFuZCBkaXJlY3RlZCBoaXMgZmxpZ2h0IHN0cmFpZ2h0IGFnYWluc3QgdGhlIGVuZW15LCBhdCB3aGljaCBzaWdodCBncmVhdCBjb3VyYWdlIGZpbGxlZCB0aGUgYmVob2xkZXJzLCBhbmQgYWZ0ZXIgbXV0dWFsIGVuY291cmFnZW1lbnQgYW5kIGV4aG9ydGF0aW9uIHRoZSBjYXZhbHJ5IGNoYXJnZWQgYXQgZnVsbCBzcGVlZCB1cG9uIHRoZSBlbmVteSBhbmQgdGhlIHBoYWxhbnggcm9sbGVkIG9uIGFmdGVyIHRoZW0gbGlrZSBhIGZsb29kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBiZWZvcmUgdGhlIGZvcmVtb3N0IHJhbmtzIHdlcmUgZW5nYWdlZCB0aGUgQmFyYmFyaWFucyBnYXZlIHdheSwgYW5kIHdlcmUgaG90bHkgcHVyc3VlZCwgQWxleGFuZGVyIGRyaXZpbmcgdGhlIGNvbnF1ZXJlZCBmb2UgdG93YXJkcyB0aGUgY2VudHJlIG9mIHRoZWlyIGFycmF5LCB3aGVyZSBEYXJlaXVzIHdhcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWxleGFuZGVyJ3MgdGFjdGljcyBhcmUgbWludXRlbHkgZGVzY3JpYmVkIGJ5IEFycmlhbiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4xNC4xIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkuIDE0LCAxLTM8L2JpYmw+KS48L25vdGU+IEZvciBmcm9tIGFmYXIgaGUgd2FzIHNlZW4gYnkgQWxleGFuZGVyIHRocm91Z2ggdGhlIGRlZXAgcmFua3Mgb2YgdGhlIHJveWFsIHNxdWFkcm9uIG9mIGhvcnNlIGRyYXduIHVwIGluIGZyb250IG9mIGhpbSwgdG93ZXJpbmcgY29uc3BpY3VvdXMsIGEgZmluZS1sb29raW5nIG1hbiBhbmQgdGFsbCwgc3RhbmRpbmcgb24gYSBsb2Z0eSBjaGFyaW90LCBmZW5jZWQgYWJvdXQgYnkgYSBudW1lcm91cyBhbmQgYnJpbGxpYW50IGFycmF5IG9mIGhvcnNlbWVuLCB3aG8gd2VyZSBkZW5zZWx5IG1hc3NlZCBhcm91bmQgaGlzIGNoYXJpb3QgYW5kIGRyYXduIHVwIHRvIHJlY2VpdmUgdGhlIGVuZW15LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMTQuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAxNCwgMS0zPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkuIDE0LCAxLTM8L3RyYW5zbGF0aW9uPg=="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZXkgc2F3IEFsZXhhbmRlciBjbG9zZSBhdCBoYW5kIGFuZCB0ZXJyaWJsZSwgYW5kIGRyaXZpbmcgdGhvc2Ugd2hvIGZsZWQgYmVmb3JlIGhpbSB1cG9uIHRob3NlIHdobyBoZWxkIHRoZWlyIGdyb3VuZCwgdGhleSB3ZXJlIHNtaXR0ZW4gd2l0aCBmZWFyIGFuZCBzY2F0dGVyZWQsIGZvciB0aGUgbW9zdCBwYXJ0LiBUaGUgYnJhdmVzdCBhbmQgbm9ibGVzdCBvZiB0aGVtLCBob3dldmVyLCBzbGFpbiBpbiBmcm9udCBvZiB0aGVpciBraW5nIGFuZCBmYWxsaW5nIGluIGhlYXBzIHVwb24gb25lIGFub3RoZXIsIG9ic3RydWN0ZWQgdGhlIE1hY2Vkb25pYW5zIGluIHRoZWlyIHB1cnN1aXQsIHdlYXZpbmcgYW5kIHR3aW5pbmcgdGhlbXNlbHZlcyBpbiB0aGVpciBsYXN0IGFnb25pZXMgYWJvdXQgcmlkZXJzIGFuZCBob3JzZXMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IERhcmVpdXMsIG5vdyB0aGF0IGFsbCB0aGUgdGVycm9ycyBvZiB0aGUgc3RydWdnbGUgd2VyZSBiZWZvcmUgaGlzIGV5ZXMsIGFuZCBub3cgdGhhdCB0aGUgZm9yY2VzIGRyYXduIHVwIHRvIHByb3RlY3QgaGltIHdlcmUgY3Jvd2RlZCBiYWNrIHVwb24gaGltLCBzaW5jZSBpdCB3YXMgbm90IGFuIGVhc3kgbWF0dGVyIHRvIHR1cm4gaGlzIGNoYXJpb3QgYWJvdXQgYW5kIGRyaXZlIGl0IGF3YXksIHNlZWluZyB0aGF0IHRoZSB3aGVlbHMgd2VyZSBvYnN0cnVjdGVkIGFuZCBlbnRhbmdsZWQgaW4gdGhlIGdyZWF0IG51bWJlcnMgb2YgdGhlIGZhbGxlbiwgd2hpbGUgdGhlIGhvcnNlcywgc3Vycm91bmRlZCBhbmQgaGlkZGVuIGF3YXkgYnkgdGhlIG11bHRpdHVkZSBvZiBkZWFkIGJvZGllcywgd2VyZSByZWFyaW5nIHVwIGFuZCBmcmlnaHRlbmluZyB0aGUgY2hhcmlvdGVlciwgZm9yc29vayBoaXMgY2hhcmlvdCBhbmQgaGlzIGFybW91ciwgbW91bnRlZCBhIG1hcmUgd2hpY2gsIGFzIHRoZXkgc2F5LCBoYWQgbmV3bHkgZm9hbGVkLCBhbmQgdG9vayB0byBmbGlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IGlzIHRob3VnaHQgdGhhdCBoZSB3b3VsZCBub3QgdGhlbiBoYXZlIG1hZGUgaGlzIGVzY2FwZSwgaGFkIG5vdCBmcmVzaCBob3JzZW1lbiBjb21lIGZyb20gUGFybWVuaW8KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFycmlhbiBtYWtlcyBubyBtZW50aW9uIG9mIGEgc2Vjb25kIGFwcGVhbCBmb3IgYWlkIGZyb20gUGFybWVuaW8uPC9ub3RlPiBzdW1tb25pbmcgQWxleGFuZGVyIHRvIGhpcyBhaWQsIG9uIHRoZSBncm91bmQgdGhhdCBhIGxhcmdlIGZvcmNlIG9mIHRoZSBlbmVteSBzdGlsbCBoZWxkIHRvZ2V0aGVyIHRoZXJlIGFuZCB3b3VsZCBub3QgZ2l2ZSBncm91bmQuIEZvciB0aGVyZSBpcyBnZW5lcmFsIGNvbXBsYWludCB0aGF0IGluIHRoYXQgYmF0dGxlIFBhcm1lbmlvIHdhcyBzbHVnZ2lzaCBhbmQgaW5lZmZpY2llbnQsIGVpdGhlciBiZWNhdXNlIG9sZCBhZ2Ugd2FzIG5vdyBpbXBhaXJpbmcgc29tZXdoYXQgaGlzIGNvdXJhZ2UsIG9yIGJlY2F1c2UgaGUgd2FzIG1hZGUgZW52aW91cyBhbmQgcmVzZW50ZnVsIGJ5IHRoZSBhcnJvZ2FuY2UgYW5kIHBvbXAsIHRvIHVzZSB0aGUgd29yZHMgb2YgQ2FsbGlzdGhlbmVzLCBvZiBBbGV4YW5kZXIncyBwb3dlci4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIHRpbWUsIHRoZW4sIGFsdGhvdWdoIGhlIHdhcyBhbm5veWVkIGJ5IHRoZSBzdW1tb25zLCB0aGUga2luZyBkaWQgbm90IHRlbGwgaGlzIHNvbGRpZXJzIHRoZSB0cnV0aCBhYm91dCBpdCwgYnV0IG9uIHRoZSBncm91bmQgdGhhdCBpdCB3YXMgZGFyayBhbmQgaGUgd291bGQgdGhlcmVmb3JlIHJlbWl0IGZ1cnRoZXIgc2xhdWdodGVyLCBzb3VuZGVkIGEgcmVjYWxsOyBhbmQgYXMgaGUgcm9kZSB0b3dhcmRzIHRoZSBlbmRhbmdlcmVkIHBvcnRpb24gb2YgaGlzIGFybXksIGhlIGhlYXJkIGJ5IHRoZSB3YXkgdGhhdCB0aGUgZW5lbXkgaGFkIGJlZW4gdXR0ZXJseSBkZWZlYXRlZCBhbmQgd2FzIGluIGZsaWdodC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBEYXJlaXVzLCBub3cgdGhhdCBhbGwgdGhlIHRlcnJvcnMgb2YgdGhlIHN0cnVnZ2xlIHdlcmUgYmVmb3JlIGhpcyBleWVzLCBhbmQgbm93IHRoYXQgdGhlIGZvcmNlcyBkcmF3biB1cCB0byBwcm90ZWN0IGhpbSB3ZXJlIGNyb3dkZWQgYmFjayB1cG9uIGhpbSwgc2luY2UgaXQgd2FzIG5vdCBhbiBlYXN5IG1hdHRlciB0byB0dXJuIGhpcyBjaGFyaW90IGFib3V0IGFuZCBkcml2ZSBpdCBhd2F5LCBzZWVpbmcgdGhhdCB0aGUgd2hlZWxzIHdlcmUgb2JzdHJ1Y3RlZCBhbmQgZW50YW5nbGVkIGluIHRoZSBncmVhdCBudW1iZXJzIG9mIHRoZSBmYWxsZW4sIHdoaWxlIHRoZSBob3JzZXMsIHN1cnJvdW5kZWQgYW5kIGhpZGRlbiBhd2F5IGJ5IHRoZSBtdWx0aXR1ZGUgb2YgZGVhZCBib2RpZXMsIHdlcmUgcmVhcmluZyB1cCBhbmQgZnJpZ2h0ZW5pbmcgdGhlIGNoYXJpb3RlZXIsIGZvcnNvb2sgaGlzIGNoYXJpb3QgYW5kIGhpcyBhcm1vdXIsIG1vdW50ZWQgYSBtYXJlIHdoaWNoLCBhcyB0aGV5IHNheSwgaGFkIG5ld2x5IGZvYWxlZCwgYW5kIHRvb2sgdG8gZmxpZ2h0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IGlzIHRob3VnaHQgdGhhdCBoZSB3b3VsZCBub3QgdGhlbiBoYXZlIG1hZGUgaGlzIGVzY2FwZSwgaGFkIG5vdCBmcmVzaCBob3JzZW1lbiBjb21lIGZyb20gUGFybWVuaW8KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXJyaWFuIG1ha2VzIG5vIG1lbnRpb24gb2YgYSBzZWNvbmQgYXBwZWFsIGZvciBhaWQgZnJvbSBQYXJtZW5pby48L25vdGU+IHN1bW1vbmluZyBBbGV4YW5kZXIgdG8gaGlzIGFpZCwgb24gdGhlIGdyb3VuZCB0aGF0IGEgbGFyZ2UgZm9yY2Ugb2YgdGhlIGVuZW15IHN0aWxsIGhlbGQgdG9nZXRoZXIgdGhlcmUgYW5kIHdvdWxkIG5vdCBnaXZlIGdyb3VuZC4gRm9yIHRoZXJlIGlzIGdlbmVyYWwgY29tcGxhaW50IHRoYXQgaW4gdGhhdCBiYXR0bGUgUGFybWVuaW8gd2FzIHNsdWdnaXNoIGFuZCBpbmVmZmljaWVudCwgZWl0aGVyIGJlY2F1c2Ugb2xkIGFnZSB3YXMgbm93IGltcGFpcmluZyBzb21ld2hhdCBoaXMgY291cmFnZSwgb3IgYmVjYXVzZSBoZSB3YXMgbWFkZSBlbnZpb3VzIGFuZCByZXNlbnRmdWwgYnkgdGhlIGFycm9nYW5jZSBhbmQgcG9tcCwgdG8gdXNlIHRoZSB3b3JkcyBvZiBDYWxsaXN0aGVuZXMsIG9mIEFsZXhhbmRlcidzIHBvd2VyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lLCB0aGVuLCBhbHRob3VnaCBoZSB3YXMgYW5ub3llZCBieSB0aGUgc3VtbW9ucywgdGhlIGtpbmcgZGlkIG5vdCB0ZWxsIGhpcyBzb2xkaWVycyB0aGUgdHJ1dGggYWJvdXQgaXQsIGJ1dCBvbiB0aGUgZ3JvdW5kIHRoYXQgaXQgd2FzIGRhcmsgYW5kIGhlIHdvdWxkIHRoZXJlZm9yZSByZW1pdCBmdXJ0aGVyIHNsYXVnaHRlciwgc291bmRlZCBhIHJlY2FsbDsgYW5kIGFzIGhlIHJvZGUgdG93YXJkcyB0aGUgZW5kYW5nZXJlZCBwb3J0aW9uIG9mIGhpcyBhcm15LCBoZSBoZWFyZCBieSB0aGUgd2F5IHRoYXQgdGhlIGVuZW15IGhhZCBiZWVuIHV0dGVybHkgZGVmZWF0ZWQgYW5kIHdhcyBpbiBmbGlnaHQuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGJhdHRsZSBoYXZpbmcgaGFkIHRoaXMgaXNzdWUsIHRoZSBlbXBpcmUgb2YgdGhlIFBlcnNpYW5zIHdhcyB0aG91Z2h0IHRvIGJlIHV0dGVybHkgZGlzc29sdmVkLCBhbmQgQWxleGFuZGVyLCBwcm9jbGFpbWVkIGtpbmcgb2YgQXNpYSwgbWFkZSBtYWduaWZpY2VudCBzYWNyaWZpY2VzIHRvIHRoZSBnb2RzIGFuZCByZXdhcmRlZCBoaXMgZnJpZW5kcyB3aXRoIHdlYWx0aCwgZXN0YXRlcywgYW5kIHByb3ZpbmNlcy4gQW5kIGJlaW5nIGRlc2lyb3VzIG9mIGhvbm91ciBhbW9uZyB0aGUgR3JlZWtzLCBoZSB3cm90ZSB0aGVtIHRoYXQgYWxsIHRoZWlyIHR5cmFubmllcyB3ZXJlIGFib2xpc2hlZCBhbmQgdGhleSBtaWdodCBsaXZlIHVuZGVyIHRoZWlyIG93biBsYXdzOyBtb3Jlb3ZlciwgaGUgd3JvdGUgdGhlIFBsYXRhZWFucyBzcGVjaWFsbHkgdGhhdCBoZSB3b3VsZCByZWJ1aWxkIHRoZWlyIGNpdHksIGJlY2F1c2UgdGhlaXIgYW5jZXN0b3JzIGhhZCBmdXJuaXNoZWQgdGhlaXIgdGVycml0b3J5IHRvIHRoZSBHcmVla3MgZm9yIHRoZSBzdHJ1Z2dsZSBpbiBiZWhhbGYgb2YgdGhlaXIgZnJlZWRvbS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDQ3OSBCLkMuPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBzZW50IGFsc28gdG8gdGhlIHBlb3BsZSBvZiBDcm90b24gaW4gSXRhbHkgYSBwb3J0aW9uIG9mIHRoZSBzcG9pbHMsIGhvbm91cmluZyB0aGUgemVhbCBhbmQgdmFsb3VyIG9mIHRoZWlyIGF0aGxldGUgUGjDpHlsbHVzLCB3aG8sIGluIHRoZSBNZWRpYW4gd2Fycywgd2hlbiB0aGUgcmVzdCBvZiB0aGUgR3JlZWtzIGluIEl0YWx5IHJlZnVzZWQgdG8gaGVscCB0aGVpciBicm90aGVyIEdyZWVrcywgZml0dGVkIG91dCBhIHNoaXAgYXQgaGlzIG93biBjb3N0IGFuZCBzYWlsZWQgd2l0aCBpdCB0byBTYWxhbWlzLCB0aGF0IGhlIG1pZ2h0IGhhdmUgc29tZSBzaGFyZSBpbiB0aGUgcGVyaWwgdGhlcmUuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhkdC4gOC40NyIgdmFsaWQ9InllcyI+SGVyb2RvdHVzLCB2aWlpLiA0NzwvYmlibD4uPC9ub3RlPiBTbyBjb25zaWRlcmF0ZSB3YXMgQWxleGFuZGVyIHRvd2FyZHMgZXZlcnkgZm9ybSBvZiB2YWxvdXIsIGFuZCBzdWNoIGEgZnJpZW5kIGFuZCBndWFyZGlhbiBvZiBub2JsZSBkZWVkcy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGJhdHRsZSBoYXZpbmcgaGFkIHRoaXMgaXNzdWUsIHRoZSBlbXBpcmUgb2YgdGhlIFBlcnNpYW5zIHdhcyB0aG91Z2h0IHRvIGJlIHV0dGVybHkgZGlzc29sdmVkLCBhbmQgQWxleGFuZGVyLCBwcm9jbGFpbWVkIGtpbmcgb2YgQXNpYSwgbWFkZSBtYWduaWZpY2VudCBzYWNyaWZpY2VzIHRvIHRoZSBnb2RzIGFuZCByZXdhcmRlZCBoaXMgZnJpZW5kcyB3aXRoIHdlYWx0aCwgZXN0YXRlcywgYW5kIHByb3ZpbmNlcy4gQW5kIGJlaW5nIGRlc2lyb3VzIG9mIGhvbm91ciBhbW9uZyB0aGUgR3JlZWtzLCBoZSB3cm90ZSB0aGVtIHRoYXQgYWxsIHRoZWlyIHR5cmFubmllcyB3ZXJlIGFib2xpc2hlZCBhbmQgdGhleSBtaWdodCBsaXZlIHVuZGVyIHRoZWlyIG93biBsYXdzOyBtb3Jlb3ZlciwgaGUgd3JvdGUgdGhlIFBsYXRhZWFucyBzcGVjaWFsbHkgdGhhdCBoZSB3b3VsZCByZWJ1aWxkIHRoZWlyIGNpdHksIGJlY2F1c2UgdGhlaXIgYW5jZXN0b3JzIGhhZCBmdXJuaXNoZWQgdGhlaXIgdGVycml0b3J5IHRvIHRoZSBHcmVla3MgZm9yIHRoZSBzdHJ1Z2dsZSBpbiBiZWhhbGYgb2YgdGhlaXIgZnJlZWRvbS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDc5IEIuQy48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNlbnQgYWxzbyB0byB0aGUgcGVvcGxlIG9mIENyb3RvbiBpbiBJdGFseSBhIHBvcnRpb24gb2YgdGhlIHNwb2lscywgaG9ub3VyaW5nIHRoZSB6ZWFsIGFuZCB2YWxvdXIgb2YgdGhlaXIgYXRobGV0ZSBQaMOkeWxsdXMsIHdobywgaW4gdGhlIE1lZGlhbiB3YXJzLCB3aGVuIHRoZSByZXN0IG9mIHRoZSBHcmVla3MgaW4gSXRhbHkgcmVmdXNlZCB0byBoZWxwIHRoZWlyIGJyb3RoZXIgR3JlZWtzLCBmaXR0ZWQgb3V0IGEgc2hpcCBhdCBoaXMgb3duIGNvc3QgYW5kIHNhaWxlZCB3aXRoIGl0IHRvIFNhbGFtaXMsIHRoYXQgaGUgbWlnaHQgaGF2ZSBzb21lIHNoYXJlIGluIHRoZSBwZXJpbCB0aGVyZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gOC40NyIgdmFsaWQ9InllcyI+SGVyb2RvdHVzLCB2aWlpLiA0NzwvYmlibD4uPC9ub3RlPiBTbyBjb25zaWRlcmF0ZSB3YXMgQWxleGFuZGVyIHRvd2FyZHMgZXZlcnkgZm9ybSBvZiB2YWxvdXIsIGFuZCBzdWNoIGEgZnJpZW5kIGFuZCBndWFyZGlhbiBvZiBub2JsZSBkZWVkcy48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDguNDciIHZhbGlkPSJ5ZXMiPkhlcm9kb3R1cywgdmlpaS4gNDc8L2JpYmw+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHRyYXZlcnNlZCBhbGwgQmFieWxvbmlhLCB3aGljaCBhdCBvbmNlIHN1Ym1pdHRlZCB0byBoaW0sIGhlIHdhcyBtb3N0IG9mIGFsbCBhbWF6ZWQgYXQgdGhlIGNoYXNtIGZyb20gd2hpY2ggZmlyZSBjb250aW51YWxseSBzdHJlYW1lZCBmb3J0aCBhcyBmcm9tIGEgc3ByaW5nLCBhbmQgYXQgdGhlIHN0cmVhbSBvZiBuYXBodGhhLCBzbyBhYnVuZGFudCBhcyB0byBmb3JtIGEgbGFrZSwgbm90IGZhciBmcm9tIHRoZSBjaGFzbS4gVGhpcyBuYXBodGhhIGlzIGluIG90aGVyIHdheXMgbGlrZSBhc3BoYWx0dW0sIGJ1dCBpcyBzbyBzZW5zaXRpdmUgdG8gZmlyZSB0aGF0LCBiZWZvcmUgdGhlIGZsYW1lIHRvdWNoZXMgaXQsIGl0IGlzIGtpbmRsZWQgYnkgdGhlIHZlcnkgcmFkaWFuY2UgYWJvdXQgdGhlIGZsYW1lIGFuZCBvZnRlbiBzZXRzIGZpcmUgYWxzbyB0byB0aGUgaW50ZXJ2ZW5pbmcgYWlyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UbyBzaG93IGl0cyBuYXR1cmUgYW5kIHBvd2VyLCB0aGUgQmFyYmFyaWFucyBzcHJpbmtsZWQgdGhlIHN0cmVldCBsZWFkaW5nIHRvIEFsZXhhbmRlcidzIHF1YXJ0ZXJzIHdpdGggc21hbGwgcXVhbnRpdGllcyBvZiB0aGUgbGlxdWlkOyB0aGVuLCBzdGFuZGluZyBhdCB0aGUgZmFydGhlciBlbmQgb2YgdGhlIHN0cmVldCwgdGhleSBhcHBsaWVkIHRoZWlyIHRvcmNoZXMgdG8gdGhlIG1vaXN0ZW5lZCBzcG90czsgZm9yIGl0IHdhcyBub3cgZ2V0dGluZyBkYXJrLiBUaGUgZmlyc3Qgc3BvdHMgYXQgb25jZSBjYXVnaHQgZmlyZSwgYW5kIHdpdGhvdXQgYW4gYXBwcmVjaWFibGUgaW50ZXJ2YWwgb2YgdGltZSwgYnV0IHdpdGggdGhlIHNwZWVkIG9mIHRob3VnaHQsIHRoZSBmbGFtZSBkYXJ0ZWQgdG8gdGhlIG90aGVyIGVuZCwgYW5kIHRoZSBzdHJlZXQgd2FzIG9uZSBjb250aW51b3VzIGZpcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2FzIGEgY2VydGFpbiBBdGhlbm9waGFuZXMsIGFuIEF0aGVuaWFuLCBvbmUgb2YgdGhvc2Ugd2hvIHdlcmUgYWNjdXN0b21lZCB0byBtaW5pc3RlciB0byB0aGUgcGVyc29uIG9mIHRoZSBraW5nIHdoZW4gaGUgYmF0aGVkIGFuZCBhbm9pbnRlZCBoaW1zZWxmLCBhbmQgdG8gZnVybmlzaCBzdWl0YWJsZSBkaXZlcnNpb24gZm9yIGhpcyB0aG91Z2h0cy4gVGhpcyBtYW4sIG9uZSB0aW1lIHdoZW4gdGhlcmUgd2FzIHN0YW5kaW5nIGJ5IEFsZXhhbmRlciBpbiB0aGUgYmF0aC1yb29tIGEgeW91dGggd2hvIGhhZCBhIHJpZGljdWxvdXNseSBwbGFpbiBjb3VudGVuYW5jZSwgYnV0IHdhcyBhIGdyYWNlZnVsIHNpbmdlciAoaGlzIG5hbWUgd2FzIFN0ZXBoYW51cyksIHNhaWQsIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldpbHQgdGhvdSwgTyBLaW5nLCB0aGF0IHdlIG1ha2UgYSB0cmlhbCBvZiB0aGUgbGlxdWlkIHVwb24gU3RlcGhhbnVzPyBGb3IgaWYgaXQgc2hvdWxkIGxheSBob2xkIG9mIGhpbSBhbmQgbm90IGJlIGV4dGluZ3Vpc2hlZCwgSSB3b3VsZCBjZXJ0YWlubHkgc2F5IHRoYXQgaXRzIHBvd2VyIHdhcyBpbnZpbmNpYmxlIGFuZCB0ZXJyaWJsZS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHlvdXRoIGFsc28sIHN0cmFuZ2VseSBlbm91Z2gsIG9mZmVyZWQgaGltc2VsZiBmb3IgdGhlIGV4cGVyaW1lbnQsIGFuZCBhcyBzb29uIGFzIGhlIHRvdWNoZWQgdGhlIGxpcXVpZCBhbmQgYmVnYW4gdG8gYW5vaW50IGhpbXNlbGYgd2l0aCBpdCwgaGlzIGJvZHkgYnJva2Ugb3V0IGludG8gc28gZ3JlYXQgYSBmbGFtZSBhbmQgd2FzIHNvIHdob2xseSBwb3NzZXNzZWQgYnkgZmlyZSB0aGF0IEFsZXhhbmRlciBmZWxsIGludG8gZXh0cmVtZSBwZXJwbGV4aXR5IGFuZCBmZWFyOyBhbmQgaGFkIGl0IG5vdCBiZWVuIGJ5IGNoYW5jZSB0aGF0IG1hbnkgd2VyZSBzdGFuZGluZyBieSBob2xkaW5nIHZlc3NlbHMgb2Ygd2F0ZXIgZm9yIHRoZSBiYXRoLCB0aGUgeW91dGggd291bGQgaGF2ZSBiZWVuIGNvbnN1bWVkIGJlZm9yZSBhaWQgcmVhY2hlZCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkV2ZW4gYXMgaXQgd2FzLCB0aGV5IGhhZCBncmVhdCBkaWZmaWN1bHR5IGluIHB1dHRpbmcgb3V0IHRoZSBmaXJlLCBmb3IgaXQgY292ZXJlZCB0aGUgYm95J3Mgd2hvbGUgYm9keSwgYW5kIGFmdGVyIHRoZXkgaGFkIGRvbmUgc28sIGhlIHdhcyBpbiBhIHNvcnJ5IHBsaWdodC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgaGUgdHJhdmVyc2VkIGFsbCBCYWJ5bG9uaWEsIHdoaWNoIGF0IG9uY2Ugc3VibWl0dGVkIHRvIGhpbSwgaGUgd2FzIG1vc3Qgb2YgYWxsIGFtYXplZCBhdCB0aGUgY2hhc20gZnJvbSB3aGljaCBmaXJlIGNvbnRpbnVhbGx5IHN0cmVhbWVkIGZvcnRoIGFzIGZyb20gYSBzcHJpbmcsIGFuZCBhdCB0aGUgc3RyZWFtIG9mIG5hcGh0aGEsIHNvIGFidW5kYW50IGFzIHRvIGZvcm0gYSBsYWtlLCBub3QgZmFyIGZyb20gdGhlIGNoYXNtLiBUaGlzIG5hcGh0aGEgaXMgaW4gb3RoZXIgd2F5cyBsaWtlIGFzcGhhbHR1bSwgYnV0IGlzIHNvIHNlbnNpdGl2ZSB0byBmaXJlIHRoYXQsIGJlZm9yZSB0aGUgZmxhbWUgdG91Y2hlcyBpdCwgaXQgaXMga2luZGxlZCBieSB0aGUgdmVyeSByYWRpYW5jZSBhYm91dCB0aGUgZmxhbWUgYW5kIG9mdGVuIHNldHMgZmlyZSBhbHNvIHRvIHRoZSBpbnRlcnZlbmluZyBhaXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRvIHNob3cgaXRzIG5hdHVyZSBhbmQgcG93ZXIsIHRoZSBCYXJiYXJpYW5zIHNwcmlua2xlZCB0aGUgc3RyZWV0IGxlYWRpbmcgdG8gQWxleGFuZGVyJ3MgcXVhcnRlcnMgd2l0aCBzbWFsbCBxdWFudGl0aWVzIG9mIHRoZSBsaXF1aWQ7IHRoZW4sIHN0YW5kaW5nIGF0IHRoZSBmYXJ0aGVyIGVuZCBvZiB0aGUgc3RyZWV0LCB0aGV5IGFwcGxpZWQgdGhlaXIgdG9yY2hlcyB0byB0aGUgbW9pc3RlbmVkIHNwb3RzOyBmb3IgaXQgd2FzIG5vdyBnZXR0aW5nIGRhcmsuIFRoZSBmaXJzdCBzcG90cyBhdCBvbmNlIGNhdWdodCBmaXJlLCBhbmQgd2l0aG91dCBhbiBhcHByZWNpYWJsZSBpbnRlcnZhbCBvZiB0aW1lLCBidXQgd2l0aCB0aGUgc3BlZWQgb2YgdGhvdWdodCwgdGhlIGZsYW1lIGRhcnRlZCB0byB0aGUgb3RoZXIgZW5kLCBhbmQgdGhlIHN0cmVldCB3YXMgb25lIGNvbnRpbnVvdXMgZmlyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2FzIGEgY2VydGFpbiBBdGhlbm9waGFuZXMsIGFuIEF0aGVuaWFuLCBvbmUgb2YgdGhvc2Ugd2hvIHdlcmUgYWNjdXN0b21lZCB0byBtaW5pc3RlciB0byB0aGUgcGVyc29uIG9mIHRoZSBraW5nIHdoZW4gaGUgYmF0aGVkIGFuZCBhbm9pbnRlZCBoaW1zZWxmLCBhbmQgdG8gZnVybmlzaCBzdWl0YWJsZSBkaXZlcnNpb24gZm9yIGhpcyB0aG91Z2h0cy4gVGhpcyBtYW4sIG9uZSB0aW1lIHdoZW4gdGhlcmUgd2FzIHN0YW5kaW5nIGJ5IEFsZXhhbmRlciBpbiB0aGUgYmF0aC1yb29tIGEgeW91dGggd2hvIGhhZCBhIHJpZGljdWxvdXNseSBwbGFpbiBjb3VudGVuYW5jZSwgYnV0IHdhcyBhIGdyYWNlZnVsIHNpbmdlciAoaGlzIG5hbWUgd2FzIFN0ZXBoYW51cyksIHNhaWQsIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2lsdCB0aG91LCBPIEtpbmcsIHRoYXQgd2UgbWFrZSBhIHRyaWFsIG9mIHRoZSBsaXF1aWQgdXBvbiBTdGVwaGFudXM/IEZvciBpZiBpdCBzaG91bGQgbGF5IGhvbGQgb2YgaGltIGFuZCBub3QgYmUgZXh0aW5ndWlzaGVkLCBJIHdvdWxkIGNlcnRhaW5seSBzYXkgdGhhdCBpdHMgcG93ZXIgd2FzIGludmluY2libGUgYW5kIHRlcnJpYmxlLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB5b3V0aCBhbHNvLCBzdHJhbmdlbHkgZW5vdWdoLCBvZmZlcmVkIGhpbXNlbGYgZm9yIHRoZSBleHBlcmltZW50LCBhbmQgYXMgc29vbiBhcyBoZSB0b3VjaGVkIHRoZSBsaXF1aWQgYW5kIGJlZ2FuIHRvIGFub2ludCBoaW1zZWxmIHdpdGggaXQsIGhpcyBib2R5IGJyb2tlIG91dCBpbnRvIHNvIGdyZWF0IGEgZmxhbWUgYW5kIHdhcyBzbyB3aG9sbHkgcG9zc2Vzc2VkIGJ5IGZpcmUgdGhhdCBBbGV4YW5kZXIgZmVsbCBpbnRvIGV4dHJlbWUgcGVycGxleGl0eSBhbmQgZmVhcjsgYW5kIGhhZCBpdCBub3QgYmVlbiBieSBjaGFuY2UgdGhhdCBtYW55IHdlcmUgc3RhbmRpbmcgYnkgaG9sZGluZyB2ZXNzZWxzIG9mIHdhdGVyIGZvciB0aGUgYmF0aCwgdGhlIHlvdXRoIHdvdWxkIGhhdmUgYmVlbiBjb25zdW1lZCBiZWZvcmUgYWlkIHJlYWNoZWQgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkV2ZW4gYXMgaXQgd2FzLCB0aGV5IGhhZCBncmVhdCBkaWZmaWN1bHR5IGluIHB1dHRpbmcgb3V0IHRoZSBmaXJlLCBmb3IgaXQgY292ZXJlZCB0aGUgYm95J3Mgd2hvbGUgYm9keSwgYW5kIGFmdGVyIHRoZXkgaGFkIGRvbmUgc28sIGhlIHdhcyBpbiBhIHNvcnJ5IHBsaWdodC48cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IGlzIG5hdHVyYWwsIHRoZW4sIHRoYXQgc29tZSB3aG8gd2lzaCB0byBicmluZyBmYWJsZSBpbnRvIGNvbmZvcm1pdHkgd2l0aCB0cnV0aCBzaG91bGQgc2F5IHRoYXQgdGhpcyBuYXBodGhhIGlzIHRoZSBkcnVnIHdoaWNoIE1lZGVpYSB1c2VkLCB3aGVuLCBpbiB0aGUgdHJhZ2VkaWVzLCBzaGUgYW5vaW50cyB0aGUgY3Jvd24gYW5kIHRoZSByb2JlLiBGb3IgaXQgd2FzIG5vdCBmcm9tIHRoZXNlIG9iamVjdHMgdGhlbXNlbHZlcywgdGhleSBzYXksIG5vciBvZiBpdHMgb3duIGFjY29yZCwgdGhhdCB0aGUgZmlyZSBzaG90IHVwLCBidXQgYSBmbGFtZSB3YXMgcGxhY2VkIG5lYXIgdGhlbSwgd2hpY2ggd2FzIHRoZW4gc28gc3dpZnRseSBkcmF3biBpbnRvIGNvbmp1bmN0aW9uIHdpdGggdGhlbSB0aGF0IHRoZSBzZW5zZXMgY291bGQgbm90IHRha2UgY29nbmlzYW5jZSBvZiBpdC4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHJheXMgYW5kIGVtYW5hdGlvbnMgb2YgZmlyZSB3aGljaCBjb21lIGZyb20gYSBkaXN0YW5jZSBpbXBhcnQgdG8gc29tZSBib2RpZXMgbWVyZWx5IGxpZ2h0IGFuZCB3YXJtdGg7IGJ1dCBpbiB0aG9zZSB3aGljaCBhcmUgZHJ5IGFuZCBwb3JvdXMsIG9yIHdoaWNoIGhhdmUgc3VmZmljaWVudGx5IHJpY2ggbW9pc3R1cmUsIHRoZXkgY29sbGVjdCB0aGVtc2VsdmVzIHRvZ2V0aGVyLCBicmVhayBpbnRvIGZpZXJjZSBmbGFtZSwgYW5kIHRyYW5zZm9ybSB0aGUgbWF0ZXJpYWwuIFRoZXJlIGhhcyBiZWVuIG11Y2ggZGlzY3Vzc2lvbiBhYm91dCB0aGUgb3JpZ2luIG9mCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBuYXBodGhhPC9xPiBhbmQgdGhlIGZpcnN0IAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndoZXRoZXI8L3E+LWNsYXVzZSwgaGF2ZSBmYWxsZW4gb3V0IG9mIHRoZSB0ZXh0Ljwvbm90ZT4KCQkJCSAgICAgICAgPGdhcCBkZXNjPSIuLi4uIiAvPiBvciB3aGV0aGVyIHJhdGhlciB0aGUgbGlxdWlkIHN1YnN0YW5jZSB0aGF0IGZlZWRzIHRoZSBmbGFtZSBmbG93cyBvdXQgZnJvbSBhIHNvaWwgd2hpY2ggaXMgcmljaCBhbmQgcHJvZHVjdGl2ZSBvZiBmaXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHNvaWwgb2YgQmFieWxvbmlhIGlzIHZlcnkgZmllcnksIHNvIHRoYXQgZ3JhaW5zIG9mIGJhcmxleSBvZnRlbiBsZWFwIG91dCBvZiB0aGUgZ3JvdW5kIGFuZCBib3VuZCBhd2F5LCBhcyBpZiBpdHMgaW5mbGFtbWF0aW9uIG1hZGUgdGhlIGdyb3VuZCB0aHJvYjsgYW5kIHRoZSBpbmhhYml0YW50cywgZHVyaW5nIHRoZSBob3Qgc2Vhc29uLCBzbGVlcCBvbiBza2lucyBmaWxsZWQgd2l0aCB3YXRlci4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+SGFycGFsdXMsIG1vcmVvdmVyLCB3aGVuIGhlIHdhcyBsZWZ0IGFzIG92ZXJzZWVyIG9mIHRoZSBjb3VudHJ5IGFuZCB3YXMgZWFnZXIgdG8gYWRvcm4gdGhlIHJveWFsIGdhcmRlbnMgYW5kIHdhbGtzIHdpdGggSGVsbGVuaWMgcGxhbnRzLCBzdWNjZWVkZWQgd2l0aCBhbGwgZXhjZXB0IGl2eTsgdGhpcyB0aGUgc29pbCB3b3VsZCBub3Qgc3VwcG9ydCwgYnV0IGFsd2F5cyBraWxsZWQgaXQuIFRoZSBwbGFudCBjb3VsZCBub3QgZW5kdXJlIHRoZSB0ZW1wZXIgb2YgdGhlIHNvaWwsIGZvciB0aGUgc29pbCB3YXMgZmllcnksIHdoaWxlIHRoZSBwbGFudCB3YXMgZm9uZCBvZiBjb29sbmVzcy4gSG93ZXZlciwgaWYgc3VjaCBkaWdyZXNzaW9ucyBhcmUga2VwdCB3aXRoaW4gYm91bmRzLCBwZXJoYXBzIG15IGltcGF0aWVudCByZWFkZXJzIHdpbGwgZmluZCBsZXNzIGZhdWx0IHdpdGggdGhlbS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcmF5cyBhbmQgZW1hbmF0aW9ucyBvZiBmaXJlIHdoaWNoIGNvbWUgZnJvbSBhIGRpc3RhbmNlIGltcGFydCB0byBzb21lIGJvZGllcyBtZXJlbHkgbGlnaHQgYW5kIHdhcm10aDsgYnV0IGluIHRob3NlIHdoaWNoIGFyZSBkcnkgYW5kIHBvcm91cywgb3Igd2hpY2ggaGF2ZSBzdWZmaWNpZW50bHkgcmljaCBtb2lzdHVyZSwgdGhleSBjb2xsZWN0IHRoZW1zZWx2ZXMgdG9nZXRoZXIsIGJyZWFrIGludG8gZmllcmNlIGZsYW1lLCBhbmQgdHJhbnNmb3JtIHRoZSBtYXRlcmlhbC4gVGhlcmUgaGFzIGJlZW4gbXVjaCBkaXNjdXNzaW9uIGFib3V0IHRoZSBvcmlnaW4gb2YKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBuYXBodGhhPC9xPiBhbmQgdGhlIGZpcnN0IAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2hldGhlcjwvcT4tY2xhdXNlLCBoYXZlIGZhbGxlbiBvdXQgb2YgdGhlIHRleHQuPC9ub3RlPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgbmFwaHRoYTwvcT4gYW5kIHRoZSBmaXJzdCAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndoZXRoZXI8L3E+LWNsYXVzZSwgaGF2ZSBmYWxsZW4gb3V0IG9mIHRoZSB0ZXh0LjxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiBkZXNjPSIuLi4uIiAvPiBvciB3aGV0aGVyIHJhdGhlciB0aGUgbGlxdWlkIHN1YnN0YW5jZSB0aGF0IGZlZWRzIHRoZSBmbGFtZSBmbG93cyBvdXQgZnJvbSBhIHNvaWwgd2hpY2ggaXMgcmljaCBhbmQgcHJvZHVjdGl2ZSBvZiBmaXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgc29pbCBvZiBCYWJ5bG9uaWEgaXMgdmVyeSBmaWVyeSwgc28gdGhhdCBncmFpbnMgb2YgYmFybGV5IG9mdGVuIGxlYXAgb3V0IG9mIHRoZSBncm91bmQgYW5kIGJvdW5kIGF3YXksIGFzIGlmIGl0cyBpbmZsYW1tYXRpb24gbWFkZSB0aGUgZ3JvdW5kIHRocm9iOyBhbmQgdGhlIGluaGFiaXRhbnRzLCBkdXJpbmcgdGhlIGhvdCBzZWFzb24sIHNsZWVwIG9uIHNraW5zIGZpbGxlZCB3aXRoIHdhdGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhhcnBhbHVzLCBtb3Jlb3Zlciwgd2hlbiBoZSB3YXMgbGVmdCBhcyBvdmVyc2VlciBvZiB0aGUgY291bnRyeSBhbmQgd2FzIGVhZ2VyIHRvIGFkb3JuIHRoZSByb3lhbCBnYXJkZW5zIGFuZCB3YWxrcyB3aXRoIEhlbGxlbmljIHBsYW50cywgc3VjY2VlZGVkIHdpdGggYWxsIGV4Y2VwdCBpdnk7IHRoaXMgdGhlIHNvaWwgd291bGQgbm90IHN1cHBvcnQsIGJ1dCBhbHdheXMga2lsbGVkIGl0LiBUaGUgcGxhbnQgY291bGQgbm90IGVuZHVyZSB0aGUgdGVtcGVyIG9mIHRoZSBzb2lsLCBmb3IgdGhlIHNvaWwgd2FzIGZpZXJ5LCB3aGlsZSB0aGUgcGxhbnQgd2FzIGZvbmQgb2YgY29vbG5lc3MuIEhvd2V2ZXIsIGlmIHN1Y2ggZGlncmVzc2lvbnMgYXJlIGtlcHQgd2l0aGluIGJvdW5kcywgcGVyaGFwcyBteSBpbXBhdGllbnQgcmVhZGVycyB3aWxsIGZpbmQgbGVzcyBmYXVsdCB3aXRoIHRoZW0uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gbWFraW5nIGhpbXNlbGYgbWFzdGVyIG9mIFN1c2EsIEFsZXhhbmRlciBjYW1lIGludG8gcG9zc2Vzc2lvbiBvZiBmb3J0eSB0aG91c2FuZCB0YWxlbnRzIG9mIGNvaW5lZCBtb25leSBpbiB0aGUgcGFsYWNlLCBhbmQgb2YgdW50b2xkIGZ1cm5pdHVyZSBhbmQgd2VhbHRoIGJlc2lkZXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMTYuNyI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiBpaWkuIDE2LCA3PC9iaWJsPi4gQSB0YWxlbnQncyB3ZWlnaHQgd2FzIHNvbWV0aGluZyBvdmVyIGZpZnR5IHBvdW5kcy48L25vdGU+IEFtb25nIHRoaXMgdGhleSBzYXkgd2FzIGZvdW5kIGZpdmUgdGhvdXNhbmQgdGFsZW50cycgd2VpZ2h0IG9mIHB1cnBsZSBmcm9tIEhlcm1pb25lLCB3aGljaCwgYWx0aG91Z2ggaXQgaGFkIGJlZW4gc3RvcmVkIHRoZXJlIGZvciBhIGh1bmRyZWQgYW5kIG5pbmV0eSB5ZWFycywgc3RpbGwga2VwdCBpdHMgY29sb3VycyBmcmVzaCBhbmQgbGl2ZWx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVhc29uIGZvciB0aGlzLCB0aGV5IHNheSwgaXMgdGhhdCBob25leSB3YXMgdXNlZCBpbiB0aGUgcHVycGxlIGR5ZXMsIGFuZCB3aGl0ZSBvbGl2ZSBvaWwgaW4gdGhlIHdoaXRlIGR5ZXM7IGZvciB0aGVzZSBzdWJzdGFuY2VzLCBhZnRlciB0aGUgbGlrZSBzcGFjZSBvZiB0aW1lLCBhcmUgc2VlbiB0byBoYXZlIGEgYnJpbGxpYW5jeSB0aGF0IGlzIHB1cmUgYW5kIGx1c3Ryb3VzLiBNb3Jlb3ZlciwgRGVpbm9uIHNheXMgdGhhdCB0aGUgUGVyc2lhbiBraW5ncyBoYWQgd2F0ZXIgYWxzbyBicm91Z2h0IGZyb20gdGhlIE5pbGUgYW5kIHRoZSBEYW51YmUgYW5kIHN0b3JlZCB1cCBhbW9uZyB0aGVpciB0cmVhc3VyZXMsIGFzIGEgc29ydCBvZiBjb25maXJtYXRpb24gb2YgdGhlIGdyZWF0bmVzcyBvZiB0aGVpciBlbXBpcmUgYW5kIHRoZSB1bml2ZXJzYWxpdHkgb2YgdGhlaXIgc3dheS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gbWFraW5nIGhpbXNlbGYgbWFzdGVyIG9mIFN1c2EsIEFsZXhhbmRlciBjYW1lIGludG8gcG9zc2Vzc2lvbiBvZiBmb3J0eSB0aG91c2FuZCB0YWxlbnRzIG9mIGNvaW5lZCBtb25leSBpbiB0aGUgcGFsYWNlLCBhbmQgb2YgdW50b2xkIGZ1cm5pdHVyZSBhbmQgd2VhbHRoIGJlc2lkZXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjE2LjciPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkuIDE2LCA3PC9iaWJsPi4gQSB0YWxlbnQncyB3ZWlnaHQgd2FzIHNvbWV0aGluZyBvdmVyIGZpZnR5IHBvdW5kcy48L25vdGU+IEFtb25nIHRoaXMgdGhleSBzYXkgd2FzIGZvdW5kIGZpdmUgdGhvdXNhbmQgdGFsZW50cycgd2VpZ2h0IG9mIHB1cnBsZSBmcm9tIEhlcm1pb25lLCB3aGljaCwgYWx0aG91Z2ggaXQgaGFkIGJlZW4gc3RvcmVkIHRoZXJlIGZvciBhIGh1bmRyZWQgYW5kIG5pbmV0eSB5ZWFycywgc3RpbGwga2VwdCBpdHMgY29sb3VycyBmcmVzaCBhbmQgbGl2ZWx5LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMTYuNyI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpaS4gMTYsIDc8L2JpYmw+LiBBIHRhbGVudCdzIHdlaWdodCB3YXMgc29tZXRoaW5nIG92ZXIgZmlmdHkgcG91bmRzLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAxNiwgNzwvdHJhbnNsYXRpb24+"
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZWFzb24gZm9yIHRoaXMsIHRoZXkgc2F5LCBpcyB0aGF0IGhvbmV5IHdhcyB1c2VkIGluIHRoZSBwdXJwbGUgZHllcywgYW5kIHdoaXRlIG9saXZlIG9pbCBpbiB0aGUgd2hpdGUgZHllczsgZm9yIHRoZXNlIHN1YnN0YW5jZXMsIGFmdGVyIHRoZSBsaWtlIHNwYWNlIG9mIHRpbWUsIGFyZSBzZWVuIHRvIGhhdmUgYSBicmlsbGlhbmN5IHRoYXQgaXMgcHVyZSBhbmQgbHVzdHJvdXMuIE1vcmVvdmVyLCBEZWlub24gc2F5cyB0aGF0IHRoZSBQZXJzaWFuIGtpbmdzIGhhZCB3YXRlciBhbHNvIGJyb3VnaHQgZnJvbSB0aGUgTmlsZSBhbmQgdGhlIERhbnViZSBhbmQgc3RvcmVkIHVwIGFtb25nIHRoZWlyIHRyZWFzdXJlcywgYXMgYSBzb3J0IG9mIGNvbmZpcm1hdGlvbiBvZiB0aGUgZ3JlYXRuZXNzIG9mIHRoZWlyIGVtcGlyZSBhbmQgdGhlIHVuaXZlcnNhbGl0eSBvZiB0aGVpciBzd2F5LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlBlcnNpcyB3YXMgZGlmZmljdWx0IG9mIGFjY2Vzcywgb3dpbmcgdG8gdGhlIHJvdWdobmVzcyBvZiB0aGUgY291bnRyeSwgYW5kIHdhcyBndWFyZGVkIGJ5IHRoZSBub2JsZXN0IG9mIHRoZSBQZXJzaWFucyAoZm9yIERhcmVpdXMgaGFkIHRha2VuIHRvIGZsaWdodCk7IGJ1dCBBbGV4YW5kZXIgZm91bmQgYSBndWlkZSB0byBjb25kdWN0IGhpbSB0aGl0aGVyIGJ5IGEgY2lyY3VpdCBvZiBubyBncmVhdCBleHRlbnQuIFRoZSBtYW4gc3Bva2UgdHdvIGxhbmd1YWdlcywgc2luY2UgaGlzIGZhdGhlciB3YXMgYSBMeWNpYW4gYW5kIGhpcyBtb3RoZXIgYSBQZXJzaWFuOyBhbmQgaXQgd2FzIGhlLCB0aGV5IHNheSwgd2hvbSB0aGUgUHl0aGlhbiBwcmllc3Rlc3MgaGFkIGluIG1pbmQgd2hlbiBzaGUgcHJvcGhlc2llZCwgQWxleGFuZGVyIGJlaW5nIHlldCBhIGJveSwgdGhhdCBhIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmx5Y3VzLDwvcT4gb3IgPGdsb3NzPndvbGY8L2dsb3NzPiwgd291bGQgYmUgQWxleGFuZGVyJ3MgZ3VpZGUgb24gaGlzIG1hcmNoIGFnYWluc3QgdGhlIFBlcnNpYW5zLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXJyaWFuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4xOC4xIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFuYWIuPC90aXRsZT4gaWlpLiAxOCwgMWYuPC9iaWJsPikgc3BlYWtzIG9ubHkgb2YgYSBmb3JjZWQgbWFyY2ggdGhyb3VnaCB0aGUgbW91bnRhaW5zLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyBjb3VudHJ5LCB0aGVuLCBhcyBpdCB0dXJuZWQgb3V0LCB0aGVyZSB3YXMgYSBncmVhdCBzbGF1Z2h0ZXIgb2YgdGhlIHByaXNvbmVycyB0YWtlbjsgZm9yIEFsZXhhbmRlciBoaW1zZWxmIHdyaXRlcyB0aGF0IGhlIGdhdmUgb3JkZXJzIHRvIGhhdmUgdGhlIGluaGFiaXRhbnRzIGJ1dGNoZXJlZCwgdGhpbmtpbmcgdGhhdCB0aGlzIHdvdWxkIGJlIHRvIGhpcyBhZHZhbnRhZ2U7IGFuZCB0aGV5IHNheSB0aGF0IGFzIG11Y2ggY29pbmVkIG1vbmV5IHdhcyBmb3VuZCB0aGVyZQoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gUGVyc2Vwb2xpcy48L25vdGU+IGFzIGF0IFN1c2EsIGFuZCB0aGF0IGl0IHRvb2sgdGVuIHRob3VzYW5kIHBhaXJzIG9mIG11bGVzIGFuZCBmaXZlIHRob3VzYW5kIGNhbWVscyB0byBjYXJyeSBhd2F5IHRoZSBvdGhlciBmdXJuaXR1cmUgYW5kIHdlYWx0aCB0aGVyZS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UGVyc2lzIHdhcyBkaWZmaWN1bHQgb2YgYWNjZXNzLCBvd2luZyB0byB0aGUgcm91Z2huZXNzIG9mIHRoZSBjb3VudHJ5LCBhbmQgd2FzIGd1YXJkZWQgYnkgdGhlIG5vYmxlc3Qgb2YgdGhlIFBlcnNpYW5zIChmb3IgRGFyZWl1cyBoYWQgdGFrZW4gdG8gZmxpZ2h0KTsgYnV0IEFsZXhhbmRlciBmb3VuZCBhIGd1aWRlIHRvIGNvbmR1Y3QgaGltIHRoaXRoZXIgYnkgYSBjaXJjdWl0IG9mIG5vIGdyZWF0IGV4dGVudC4gVGhlIG1hbiBzcG9rZSB0d28gbGFuZ3VhZ2VzLCBzaW5jZSBoaXMgZmF0aGVyIHdhcyBhIEx5Y2lhbiBhbmQgaGlzIG1vdGhlciBhIFBlcnNpYW47IGFuZCBpdCB3YXMgaGUsIHRoZXkgc2F5LCB3aG9tIHRoZSBQeXRoaWFuIHByaWVzdGVzcyBoYWQgaW4gbWluZCB3aGVuIHNoZSBwcm9waGVzaWVkLCBBbGV4YW5kZXIgYmVpbmcgeWV0IGEgYm95LCB0aGF0IGEgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5seWN1cyw8L3E+IG9yIDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPndvbGY8L2dsb3NzPiwgd291bGQgYmUgQWxleGFuZGVyJ3MgZ3VpZGUgb24gaGlzIG1hcmNoIGFnYWluc3QgdGhlIFBlcnNpYW5zLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BcnJpYW4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMTguMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAxOCwgMWYuPC9iaWJsPikgc3BlYWtzIG9ubHkgb2YgYSBmb3JjZWQgbWFyY2ggdGhyb3VnaCB0aGUgbW91bnRhaW5zLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjE4LjEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpaS4gMTgsIDFmLjwvYmlibD4pIHNwZWFrcyBvbmx5IG9mIGEgZm9yY2VkIG1hcmNoIHRocm91Z2ggdGhlIG1vdW50YWlucy48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpaS4gMTgsIDFmLjwvdHJhbnNsYXRpb24+"
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgY291bnRyeSwgdGhlbiwgYXMgaXQgdHVybmVkIG91dCwgdGhlcmUgd2FzIGEgZ3JlYXQgc2xhdWdodGVyIG9mIHRoZSBwcmlzb25lcnMgdGFrZW47IGZvciBBbGV4YW5kZXIgaGltc2VsZiB3cml0ZXMgdGhhdCBoZSBnYXZlIG9yZGVycyB0byBoYXZlIHRoZSBpbmhhYml0YW50cyBidXRjaGVyZWQsIHRoaW5raW5nIHRoYXQgdGhpcyB3b3VsZCBiZSB0byBoaXMgYWR2YW50YWdlOyBhbmQgdGhleSBzYXkgdGhhdCBhcyBtdWNoIGNvaW5lZCBtb25leSB3YXMgZm91bmQgdGhlcmUKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gUGVyc2Vwb2xpcy48L25vdGU+IGFzIGF0IFN1c2EsIGFuZCB0aGF0IGl0IHRvb2sgdGVuIHRob3VzYW5kIHBhaXJzIG9mIG11bGVzIGFuZCBmaXZlIHRob3VzYW5kIGNhbWVscyB0byBjYXJyeSBhd2F5IHRoZSBvdGhlciBmdXJuaXR1cmUgYW5kIHdlYWx0aCB0aGVyZS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5PbiBiZWhvbGRpbmcgYSBncmVhdCBzdGF0dWUgb2YgWGVyeGVzIHdoaWNoIGhhZCBiZWVuIGNhcmVsZXNzbHkgb3ZlcnRocm93biBieSBhIHRocm9uZyB0aGF0IGZvcmNlZCBpdHMgd2F5IGludG8gdGhlIHBhbGFjZSwgQWxleGFuZGVyIHN0b3BwZWQgYmVmb3JlIGl0LCBhbmQgYWNjb3N0aW5nIGl0IGFzIGlmIGl0IGhhZCBiZWVuIGFsaXZlLCBzYWlkOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TaGFsbCBJIHBhc3Mgb24gYW5kIGxlYXZlIHRoZWUgbHlpbmcgdGhlcmUsIGJlY2F1c2Ugb2YgdGhpbmUgZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBIZWxsZW5lcywgb3IsIGJlY2F1c2Ugb2YgdGh5IG1hZ25hbmltaXR5IGFuZCB2aXJ0dWUgaW4gb3RoZXIgd2F5cywgc2hhbGwgSSBzZXQgdGhlZSB1cCBhZ2Fpbj88L3E+IEJ1dCBmaW5hbGx5LCBhZnRlciBjb21tdW5pbmcgd2l0aCBoaW1zZWxmIGEgbG9uZyB0aW1lIGluIHNpbGVuY2UsIGhlIHBhc3NlZCBvbi4gV2lzaGluZyB0byByZWZyZXNoIGhpcyBzb2xkaWVycyAoZm9yIGl0IHdhcyB3aW50ZXIgdGltZSksIGhlIHNwZW50IGZvdXIgbW9udGhzIGluIHRoYXQgcGxhY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgd2hlbiBoZSB0b29rIGhpcyBzZWF0IGZvciB0aGUgZmlyc3QgdGltZSB1bmRlciB0aGUgZ29sZGVuIGNhbm9weSBvbiB0aGUgcm95YWwgdGhyb25lLCBEZW1hcmF0dXMgdGhlIENvcmludGhpYW4sIGEgd2VsbC1tZWFuaW5nIG1hbiBhbmQgYSBmcmllbmQgb2YgQWxleGFuZGVyJ3MsIGFzIGhlIGhhZCBiZWVuIG9mIEFsZXhhbmRlcidzIGZhdGhlciwgYnVyc3QgaW50byB0ZWFycywgYXMgb2xkIG1lbiB3aWxsLCBhbmQgZGVjbGFyZWQgdGhhdCB0aG9zZSBIZWxsZW5lcyB3ZXJlIGRlcHJpdmVkIG9mIGdyZWF0IHBsZWFzdXJlIHdobyBoYWQgZGllZCBiZWZvcmUgc2VlaW5nIEFsZXhhbmRlciBzZWF0ZWQgb24gdGhlIHRocm9uZSBvZiBEYXJlaXVzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIGJlaG9sZGluZyBhIGdyZWF0IHN0YXR1ZSBvZiBYZXJ4ZXMgd2hpY2ggaGFkIGJlZW4gY2FyZWxlc3NseSBvdmVydGhyb3duIGJ5IGEgdGhyb25nIHRoYXQgZm9yY2VkIGl0cyB3YXkgaW50byB0aGUgcGFsYWNlLCBBbGV4YW5kZXIgc3RvcHBlZCBiZWZvcmUgaXQsIGFuZCBhY2Nvc3RpbmcgaXQgYXMgaWYgaXQgaGFkIGJlZW4gYWxpdmUsIHNhaWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U2hhbGwgSSBwYXNzIG9uIGFuZCBsZWF2ZSB0aGVlIGx5aW5nIHRoZXJlLCBiZWNhdXNlIG9mIHRoaW5lIGV4cGVkaXRpb24gYWdhaW5zdCB0aGUgSGVsbGVuZXMsIG9yLCBiZWNhdXNlIG9mIHRoeSBtYWduYW5pbWl0eSBhbmQgdmlydHVlIGluIG90aGVyIHdheXMsIHNoYWxsIEkgc2V0IHRoZWUgdXAgYWdhaW4/PC9xPiBCdXQgZmluYWxseSwgYWZ0ZXIgY29tbXVuaW5nIHdpdGggaGltc2VsZiBhIGxvbmcgdGltZSBpbiBzaWxlbmNlLCBoZSBwYXNzZWQgb24uIFdpc2hpbmcgdG8gcmVmcmVzaCBoaXMgc29sZGllcnMgKGZvciBpdCB3YXMgd2ludGVyIHRpbWUpLCBoZSBzcGVudCBmb3VyIG1vbnRocyBpbiB0aGF0IHBsYWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgd2hlbiBoZSB0b29rIGhpcyBzZWF0IGZvciB0aGUgZmlyc3QgdGltZSB1bmRlciB0aGUgZ29sZGVuIGNhbm9weSBvbiB0aGUgcm95YWwgdGhyb25lLCBEZW1hcmF0dXMgdGhlIENvcmludGhpYW4sIGEgd2VsbC1tZWFuaW5nIG1hbiBhbmQgYSBmcmllbmQgb2YgQWxleGFuZGVyJ3MsIGFzIGhlIGhhZCBiZWVuIG9mIEFsZXhhbmRlcidzIGZhdGhlciwgYnVyc3QgaW50byB0ZWFycywgYXMgb2xkIG1lbiB3aWxsLCBhbmQgZGVjbGFyZWQgdGhhdCB0aG9zZSBIZWxsZW5lcyB3ZXJlIGRlcHJpdmVkIG9mIGdyZWF0IHBsZWFzdXJlIHdobyBoYWQgZGllZCBiZWZvcmUgc2VlaW5nIEFsZXhhbmRlciBzZWF0ZWQgb24gdGhlIHRocm9uZSBvZiBEYXJlaXVzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIGFzIGhlIHdhcyBhYm91dCB0byBtYXJjaCBmb3J0aCBhZ2FpbnN0IERhcmVpdXMsIGl0IGNoYW5jZWQgdGhhdCBoZSBjb25zZW50ZWQgdG8gdGFrZSBwYXJ0IGluIGEgbWVycnkgZHJpbmtpbmcgYm91dCBvZiBoaXMgY29tcGFuaW9ucywgYXQgd2hpY2ggd29tZW4gYWxzbyBjYW1lIHRvIG1lZXQgdGhlaXIgbG92ZXJzIGFuZCBzaGFyZWQgaW4gdGhlaXIgd2luZSBhbmQgcmV2ZWxyeS4gVGhlIG1vc3QgZmFtb3VzIGFtb25nIHRoZXNlIHdvbWVuIHdhcyBUaGHDr3MsIGFuIEF0aGVuaWFuLCB0aGUgbWlzdHJlc3Mgb2YgUHRvbGVteSwgd2hvIHdhcyBhZnRlcndhcmRzIGtpbmcuIFNoZSwgcGFydGx5IGluIGdyYWNlZnVsIHByYWlzZSBvZiBBbGV4YW5kZXIsIGFuZCBwYXJ0bHkgdG8gbWFrZSBzcG9ydCBmb3IgaGltLCBhcyB0aGUgZHJpbmtpbmcgd2VudCBvbiwgd2FzIG1vdmVkIHRvIHV0dGVyIGEgc3BlZWNoIHdoaWNoIGJlZml0dGVkIHRoZSBjaGFyYWN0ZXIgb2YgaGVyIG5hdGl2ZSBjb3VudHJ5LCBidXQgd2FzIHRvbyBsb2Z0eSBmb3Igb25lIG9mIGhlciBraW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TaGUgc2FpZCwgbmFtZWx5LCB0aGF0IGZvciBhbGwgaGVyIGhhcmRzaGlwcyBpbiB3YW5kZXJpbmcgb3ZlciBBc2lhIHNoZSB3YXMgYmVpbmcgcmVxdWl0ZWQgdGhhdCBkYXkgYnkgdGh1cyByZXZlbGxpbmcgbHV4dXJpb3VzbHkgaW4gdGhlIHNwbGVuZGlkIHBhbGFjZSBvZiB0aGUgUGVyc2lhbnM7IGJ1dCBpdCB3b3VsZCBiZSBhIHN0aWxsIGdyZWF0ZXIgcGxlYXN1cmUgdG8gZ28gaW4gcmV2ZWwgcm91dCBhbmQgc2V0IGZpcmUgdG8gdGhlIGhvdXNlIG9mIHRoZSBYZXJ4ZXMgd2hvIGJ1cm5lZCBBdGhlbnMsIHNoZSBoZXJzZWxmIGtpbmRsaW5nIHRoZSBmaXJlIHVuZGVyIHRoZSBleWVzIG9mIEFsZXhhbmRlciwgaW4gb3JkZXIgdGhhdCBhIHRyYWRpdGlvbiBtaWdodCBwcmV2YWlsIGFtb25nIG1lbiB0aGF0IHRoZSB3b21lbiBpbiB0aGUgdHJhaW4gb2YgQWxleGFuZGVyIGluZmxpY3RlZCBhIGdyZWF0ZXIgcHVuaXNobWVudCB1cG9uIHRoZSBQZXJzaWFucyBpbiBiZWhhbGYgb2YgSGVsbGFzIHRoYW4gYWxsIGhlciBmYW1vdXMgY29tbWFuZGVycyBieSBzZWEgYW5kIGxhbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgc2hlIGhhZCB0aHVzIHNwb2tlbiwgdHVtdWx0dW91cyBhcHBsYXVzZSBhcm9zZSwgYW5kIHRoZSBjb21wYW5pb25zIG9mIHRoZSBraW5nIGVhZ2VybHkgdXJnZWQgaGltIG9uLCBzbyB0aGF0IGhlIHlpZWxkZWQgdG8gdGhlaXIgZGVzaXJlcywgYW5kIGxlYXBpbmcgdG8gaGlzIGZlZXQsIHdpdGggYSBnYXJsYW5kIG9uIGhpcyBoZWFkIGFuZCBhIHRvcmNoIGluIGhpcyBoYW5kLCBsZWQgdGhlbSB0aGUgd2F5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29tcGFueSBmb2xsb3dlZCB3aXRoIHNob3V0cyBhbmQgcmV2ZWxyeSBhbmQgc3Vycm91bmRlZCB0aGUgcGFsYWNlLCB3aGlsZSB0aGUgcmVzdCBvZiB0aGUgTWFjZWRvbmlhbnMgd2hvIGxlYXJuZWQgYWJvdXQgaXQgcmFuIHRoaXRoZXIgd2l0aCB0b3JjaGVzIGFuZCB3ZXJlIGZ1bGwgb2Ygam95LiBGb3IgdGhleSBob3BlZCB0aGF0IHRoZSBidXJuaW5nIGFuZCBkZXN0cnVjdGlvbiBvZiB0aGUgcGFsYWNlIHdhcyB0aGUgYWN0IG9mIG9uZSB3aG8gaGFkIGZpeGVkIGhpcyB0aG91Z2h0cyBvbiBob21lLCBhbmQgZGlkIG5vdCBpbnRlbmQgdG8gZHdlbGwgYW1vbmcgQmFyYmFyaWFucy4gVGhpcyBpcyB0aGUgd2F5IHRoZSBkZWVkIHdhcyBkb25lLCBhY2NvcmRpbmcgdG8gc29tZSB3cml0ZXJzOyBidXQgb3RoZXJzIHNheSBpdCB3YXMgcHJlbWVkaXRhdGVkLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U28gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMTguMTEiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gaWlpLiAxOC4gMTEgZi48L2JpYmw+LCB3aGVyZSB0aGVyZSBpcyBub25lIG9mIFBsdXRhcmNoJ3Mgcm9tYW5jZS4gRm9yIHRoaXMsIGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTcuNzIuMSIgdmFsaWQ9InllcyI+RGlvZG9ydXMsIHh2aWkuIDcyPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkN1cnQuIDUuNy4xIj5DdXJ0aXVzLCB2LiA3LCAxLTc8L2JpYmw+Ljwvbm90ZT4gSG93ZXZlciwgaXQgaXMgYWdyZWVkIHRoYXQgQWxleGFuZGVyIHNwZWVkaWx5IHJlcGVudGVkIGFuZCBnYXZlIG9yZGVycyB0byBwdXQgb3V0IHRoZSBmaXJlLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgYXMgaGUgd2FzIGFib3V0IHRvIG1hcmNoIGZvcnRoIGFnYWluc3QgRGFyZWl1cywgaXQgY2hhbmNlZCB0aGF0IGhlIGNvbnNlbnRlZCB0byB0YWtlIHBhcnQgaW4gYSBtZXJyeSBkcmlua2luZyBib3V0IG9mIGhpcyBjb21wYW5pb25zLCBhdCB3aGljaCB3b21lbiBhbHNvIGNhbWUgdG8gbWVldCB0aGVpciBsb3ZlcnMgYW5kIHNoYXJlZCBpbiB0aGVpciB3aW5lIGFuZCByZXZlbHJ5LiBUaGUgbW9zdCBmYW1vdXMgYW1vbmcgdGhlc2Ugd29tZW4gd2FzIFRoYcOvcywgYW4gQXRoZW5pYW4sIHRoZSBtaXN0cmVzcyBvZiBQdG9sZW15LCB3aG8gd2FzIGFmdGVyd2FyZHMga2luZy4gU2hlLCBwYXJ0bHkgaW4gZ3JhY2VmdWwgcHJhaXNlIG9mIEFsZXhhbmRlciwgYW5kIHBhcnRseSB0byBtYWtlIHNwb3J0IGZvciBoaW0sIGFzIHRoZSBkcmlua2luZyB3ZW50IG9uLCB3YXMgbW92ZWQgdG8gdXR0ZXIgYSBzcGVlY2ggd2hpY2ggYmVmaXR0ZWQgdGhlIGNoYXJhY3RlciBvZiBoZXIgbmF0aXZlIGNvdW50cnksIGJ1dCB3YXMgdG9vIGxvZnR5IGZvciBvbmUgb2YgaGVyIGtpbmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNoZSBzYWlkLCBuYW1lbHksIHRoYXQgZm9yIGFsbCBoZXIgaGFyZHNoaXBzIGluIHdhbmRlcmluZyBvdmVyIEFzaWEgc2hlIHdhcyBiZWluZyByZXF1aXRlZCB0aGF0IGRheSBieSB0aHVzIHJldmVsbGluZyBsdXh1cmlvdXNseSBpbiB0aGUgc3BsZW5kaWQgcGFsYWNlIG9mIHRoZSBQZXJzaWFuczsgYnV0IGl0IHdvdWxkIGJlIGEgc3RpbGwgZ3JlYXRlciBwbGVhc3VyZSB0byBnbyBpbiByZXZlbCByb3V0IGFuZCBzZXQgZmlyZSB0byB0aGUgaG91c2Ugb2YgdGhlIFhlcnhlcyB3aG8gYnVybmVkIEF0aGVucywgc2hlIGhlcnNlbGYga2luZGxpbmcgdGhlIGZpcmUgdW5kZXIgdGhlIGV5ZXMgb2YgQWxleGFuZGVyLCBpbiBvcmRlciB0aGF0IGEgdHJhZGl0aW9uIG1pZ2h0IHByZXZhaWwgYW1vbmcgbWVuIHRoYXQgdGhlIHdvbWVuIGluIHRoZSB0cmFpbiBvZiBBbGV4YW5kZXIgaW5mbGljdGVkIGEgZ3JlYXRlciBwdW5pc2htZW50IHVwb24gdGhlIFBlcnNpYW5zIGluIGJlaGFsZiBvZiBIZWxsYXMgdGhhbiBhbGwgaGVyIGZhbW91cyBjb21tYW5kZXJzIGJ5IHNlYSBhbmQgbGFuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgc2hlIGhhZCB0aHVzIHNwb2tlbiwgdHVtdWx0dW91cyBhcHBsYXVzZSBhcm9zZSwgYW5kIHRoZSBjb21wYW5pb25zIG9mIHRoZSBraW5nIGVhZ2VybHkgdXJnZWQgaGltIG9uLCBzbyB0aGF0IGhlIHlpZWxkZWQgdG8gdGhlaXIgZGVzaXJlcywgYW5kIGxlYXBpbmcgdG8gaGlzIGZlZXQsIHdpdGggYSBnYXJsYW5kIG9uIGhpcyBoZWFkIGFuZCBhIHRvcmNoIGluIGhpcyBoYW5kLCBsZWQgdGhlbSB0aGUgd2F5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb21wYW55IGZvbGxvd2VkIHdpdGggc2hvdXRzIGFuZCByZXZlbHJ5IGFuZCBzdXJyb3VuZGVkIHRoZSBwYWxhY2UsIHdoaWxlIHRoZSByZXN0IG9mIHRoZSBNYWNlZG9uaWFucyB3aG8gbGVhcm5lZCBhYm91dCBpdCByYW4gdGhpdGhlciB3aXRoIHRvcmNoZXMgYW5kIHdlcmUgZnVsbCBvZiBqb3kuIEZvciB0aGV5IGhvcGVkIHRoYXQgdGhlIGJ1cm5pbmcgYW5kIGRlc3RydWN0aW9uIG9mIHRoZSBwYWxhY2Ugd2FzIHRoZSBhY3Qgb2Ygb25lIHdobyBoYWQgZml4ZWQgaGlzIHRob3VnaHRzIG9uIGhvbWUsIGFuZCBkaWQgbm90IGludGVuZCB0byBkd2VsbCBhbW9uZyBCYXJiYXJpYW5zLiBUaGlzIGlzIHRoZSB3YXkgdGhlIGRlZWQgd2FzIGRvbmUsIGFjY29yZGluZyB0byBzb21lIHdyaXRlcnM7IGJ1dCBvdGhlcnMgc2F5IGl0IHdhcyBwcmVtZWRpdGF0ZWQuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNvIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMTguMTEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkuIDE4LiAxMSBmLjwvYmlibD4sIHdoZXJlIHRoZXJlIGlzIG5vbmUgb2YgUGx1dGFyY2gncyByb21hbmNlLiBGb3IgdGhpcywgY2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE3LjcyLjEiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzLCB4dmlpLiA3MjwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkN1cnQuIDUuNy4xIj5DdXJ0aXVzLCB2LiA3LCAxLTc8L2JpYmw+Ljwvbm90ZT4gSG93ZXZlciwgaXQgaXMgYWdyZWVkIHRoYXQgQWxleGFuZGVyIHNwZWVkaWx5IHJlcGVudGVkIGFuZCBnYXZlIG9yZGVycyB0byBwdXQgb3V0IHRoZSBmaXJlLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMTguMTEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkuIDE4LiAxMSBmLjwvYmlibD4sIHdoZXJlIHRoZXJlIGlzIG5vbmUgb2YgUGx1dGFyY2gncyByb21hbmNlLiBGb3IgdGhpcywgY2YuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAxOC4gMTEgZi48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNy43Mi4xIiB2YWxpZD0ieWVzIj5EaW9kb3J1cywgeHZpaS4gNzI8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDdXJ0LiA1LjcuMSI+Q3VydGl1cywgdi4gNywgMS03PC9iaWJsPi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbGV4YW5kZXIgd2FzIG5hdHVyYWxseSBtdW5pZmljZW50LCBhbmQgYmVjYW1lIHN0aWxsIG1vcmUgc28gYXMgaGlzIHdlYWx0aCBpbmNyZWFzZWQuIEhpcyBnaWZ0cywgdG9vLCB3ZXJlIGFjY29tcGFuaWVkIGJ5IGEga2luZGx5IHNwaXJpdCwgd2l0aCB3aGljaCBhbG9uZSwgdG8gdGVsbCB0aGUgdHJ1dGgsIGEgZ2l2ZXIgY29uZmVycyBhIGZhdm91ci4gSSB3aWxsIG1lbnRpb24gYSBmZXcgaW5zdGFuY2VzLiBBcmlzdG9uLCB0aGUgY2FwdGFpbiBvZiB0aGUgUGFlb25pYW5zLCBoYXZpbmcgc2xhaW4gYW4gZW5lbXksIGJyb3VnaHQgaGlzIGhlYWQgYW5kIHNob3dlZCBpdCB0byBBbGV4YW5kZXIsIHNheWluZzogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW4gbXkgY291bnRyeSwgTyBLaW5nLCBzdWNoIGEgZ2lmdCBhcyB0aGlzIGlzIHJld2FyZGVkIHdpdGggYSBnb2xkZW4gYmVha2VyLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzLDwvcT4gc2FpZCBBbGV4YW5kZXIgd2l0aCBhIGxhdWdoLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFuIGVtcHR5IG9uZTsgYnV0IEkgd2lsbCBwbGVkZ2UgdGh5IGhlYWx0aCB3aXRoIG9uZSB3aGljaCBpcyBmdWxsIG9mIHB1cmUgd2luZS48L3E+IEFnYWluLCBhIGNvbW1vbiBNYWNlZG9uaWFuIHdhcyBkcml2aW5nIGEgbXVsZSBsYWRlbiB3aXRoIHNvbWUgb2YgdGhlIHJveWFsIGdvbGQsIGFuZCB3aGVuIHRoZSBiZWFzdCBnYXZlIG91dCwgdG9vayB0aGUgbG9hZCBvbiBoaXMgb3duIHNob3VsZGVycyBhbmQgdHJpZWQgdG8gY2FycnkgaXQuIFRoZSBraW5nLCB0aGVuLCBzZWVpbmcgdGhlIG1hbiBpbiBncmVhdCBkaXN0cmVzcyBhbmQgbGVhcm5pbmcgdGhlIGZhY3RzIG9mIHRoZSBjYXNlLCBzYWlkLCBhcyB0aGUgbWFuIHdhcyBhYm91dCB0byBsYXkgaGlzIGJ1cmRlbiBkb3duLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvbid0IGdpdmUgb3V0LCBidXQgZmluaXNoIHlvdXIgam91cm5leSBieSB0YWtpbmcgdGhpcyBsb2FkIHRvIHlvdXIgb3duIHRlbnQuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBoZSB3YXMgZ2VuZXJhbGx5IG1vcmUgZGlzcGxlYXNlZCB3aXRoIHRob3NlIHdobyB3b3VsZCBub3QgdGFrZSBoaXMgZ2lmdHMgdGhhbiB3aXRoIHRob3NlIHdobyBhc2tlZCBmb3IgdGhlbS4gQW5kIHNvIGhlIHdyb3RlIHRvIFBob2Npb24gaW4gYSBsZXR0ZXIgdGhhdCBoZSB3b3VsZCBub3QgdHJlYXQgaGltIGFzIGEgZnJpZW5kIGluIGZ1dHVyZSBpZiBoZSByZWplY3RlZCBoaXMgZmF2b3Vycy4gIEFnYWluLCB0byBTZXJhcGlvbiwgb25lIG9mIHRoZSB5b3V0aHMgd2hvIHBsYXllZCBhdCBiYWxsIHdpdGggaGltLCBoZSB1c2VkIHRvIGdpdmUgbm90aGluZyBiZWNhdXNlIGhlIGFza2VkIGZvciBub3RoaW5nLiBBY2NvcmRpbmdseSwgd2hlbmV2ZXIgU2VyYXBpb24gaGFkIHRoZSBiYWxsLCBoZSB3b3VsZCB0aHJvdyBpdCB0byBvdGhlcnMsIHVudGlsIHRoZSBraW5nIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldvbid0IHlvdSBnaXZlIGl0IHRvIG1lPzwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5vLDwvcT4gc2FpZCBTZXJhcGlvbiwKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJlY2F1c2UgeW91IGRvbid0IGFzayBmb3IgaXQsPC9xPiB3aGVyZWF0IHRoZSBraW5nIGJ1cnN0IG91dCBsYXVnaGluZyBhbmQgbWFkZSBoaW0gbWFueSBwcmVzZW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBQcm90ZWFzLCBob3dldmVyLCBhIGNsZXZlciB3YWcgYW5kIGJvb24gY29tcGFuaW9uLCBoZSBhcHBlYXJlZCB0byBiZSBhbmdyeTsgYnV0IHdoZW4gdGhlIG1hbidzIGZyaWVuZHMgYmVnZ2VkIGhpcyBmb3JnaXZlbmVzcywgYXMgZGlkIFByb3RlYXMgaGltc2VsZiB3aXRoIHRlYXJzLCB0aGUga2luZyBzYWlkIHRoYXQgaGUgd2FzIGhpcyBmcmllbmQgYWdhaW4sIHdoZXJlYXQgUHJvdGVhcyBzYWlkOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiB0aGF0IGNhc2UsIE8gS2luZywgZ2l2ZSBtZSBzb21ldGhpbmcgdG8gcHJvdmUgaXQgZmlyc3QuPC9xPiBBY2NvcmRpbmdseSwgdGhlIGtpbmcgb3JkZXJlZCB0aGF0IGZpdmUgdGFsZW50cyBzaG91bGQgYmUgZ2l2ZW4gaGltLiBXaGF0IGxvZnR5IGFpcnMgaGlzIGZyaWVuZHMgYW5kIGJvZHlndWFyZHMgd2VyZSB3b250IHRvIGRpc3BsYXkgb3ZlciB0aGUgd2VhbHRoIGJlc3Rvd2VkIGJ5IGhpbSwgaXMgcGxhaW4gZnJvbSBhIGxldHRlciB3aGljaCBPbHltcGlhcyB3cm90ZSB0byBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNoZSBzYXlzOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGJlZyB0aGVlIHRvIGZpbmQgb3RoZXIgd2F5cyBvZiBjb25mZXJyaW5nIGZhdm91cnMgb24gdGhvc2UgdGhvdSBsb3Zlc3QgYW5kIGhvbGRlc3QgaW4gaG9ub3VyOyBhcyBpdCBpcywgdGhvdSBtYWtlc3QgdGhlbSBhbGwgdGhlIGVxdWFscyBvZiBraW5ncyBhbmQgcHJvdmlkZXN0IHRoZW0gd2l0aCBhbiBhYnVuZGFuY2Ugb2YgZnJpZW5kcywgd2hpbHN0IHRoeXNlbGYgdGhvdSBzdHJpcHBlc3QgYmFyZS48L3E+IE9seW1waWFzIG9mdGVuIHdyb3RlIGhpbSBpbiBsaWtlIHZlaW4sIGJ1dCBBbGV4YW5kZXIga2VwdCBoZXIgd3JpdGluZ3Mgc2VjcmV0LCBleGNlcHQgb25jZSB3aGVuIEhlcGhhZXN0aW9uLCBhcyB3YXMgaGlzIHdvbnQsIHJlYWQgd2l0aCBoaW0gYSBsZXR0ZXIgd2hpY2ggaGFkIGJlZW4gb3BlbmVkOyB0aGUga2luZyBkaWQgbm90IHByZXZlbnQgaGltLCBidXQgdG9vayB0aGUgcmluZyBmcm9tIGhpcyBvd24gZmluZ2VyIGFuZCBhcHBsaWVkIGl0cyBzZWFsIHRvIHRoZSBsaXBzIG9mIEhlcGhhZXN0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgdGhvdWdoIHRoZSBzb24gb2YgTWF6YWV1cywgdGhlIG1vc3QgaW5mbHVlbnRpYWwgbWFuIGF0IHRoZSBjb3VydCBvZiBEYXJlaXVzLCBhbHJlYWR5IGhhZCBhIHByb3ZpbmNlLCBBbGV4YW5kZXIgZ2F2ZSBoaW0gYSBzZWNvbmQgYW5kIGEgbGFyZ2VyIG9uZS4gSGUsIGhvd2V2ZXIsIGRlY2xpbmVkIGl0IHNheWluZzogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBLaW5nLCBmb3JtZXJseSB0aGVyZSB3YXMgb25lIERhcmVpdXMsIGJ1dCBub3cgdGhvdSBoYXN0IG1hZGUgbWFueSBBbGV4YW5kZXJzLjwvcT4gVG8gUGFybWVuaW8sIG1vcmVvdmVyLCBBbGV4YW5kZXIgZ2F2ZSB0aGUgaG91c2Ugb2YgQmFnb2FzIGF0IFN1c2EsIGluIHdoaWNoIGl0IGlzIHNhaWQgdGhlcmUgd2FzIGZvdW5kIGFwcGFyZWwgd29ydGggYSB0aG91c2FuZCB0YWxlbnRzLiBBZ2FpbiwgaGUgd3JvdGUgdG8gQW50aXBhdGVyIGJpZGRpbmcgaGltIGtlZXAgZ3VhcmRzIGFib3V0IGhpcyBwZXJzb24sIHNpbmNlIHBsb3RzIHdlcmUgYmVpbmcgbGFpZCBhZ2FpbnN0IGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VG8gaGlzIG1vdGhlciwgYWxzbywgaGUgc2VudCBtYW55IHByZXNlbnRzLCBidXQgd291bGQgbm90IHN1ZmZlciBoZXIgdG8gbWVkZGxlIGluIGFmZmFpcnMgbm9yIGludGVyZmVyZSBpbiBoaXMgY2FtcGFpZ25zOyBhbmQgd2hlbiBzaGUgY2hpZGVkIGhpbSBmb3IgdGhpcywgaGUgYm9yZSBoZXIgaGFyc2huZXNzIHBhdGllbnRseS4gT25jZSwgaG93ZXZlciwgYWZ0ZXIgcmVhZGluZyBhIGxvbmcgbGV0dGVyIHdoaWNoIEFudGlwYXRlciBoYWQgd3JpdHRlbiBpbiBkZW51bmNpYXRpb24gb2YgaGVyLCBoZSBzYWlkIEFudGlwYXRlciBrbmV3IG5vdCB0aGF0IG9uZSB0ZWFyIG9mIGEgbW90aGVyIGVmZmFjZWQgdGVuIHRob3VzYW5kIGxldHRlcnMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWxleGFuZGVyIHdhcyBuYXR1cmFsbHkgbXVuaWZpY2VudCwgYW5kIGJlY2FtZSBzdGlsbCBtb3JlIHNvIGFzIGhpcyB3ZWFsdGggaW5jcmVhc2VkLiBIaXMgZ2lmdHMsIHRvbywgd2VyZSBhY2NvbXBhbmllZCBieSBhIGtpbmRseSBzcGlyaXQsIHdpdGggd2hpY2ggYWxvbmUsIHRvIHRlbGwgdGhlIHRydXRoLCBhIGdpdmVyIGNvbmZlcnMgYSBmYXZvdXIuIEkgd2lsbCBtZW50aW9uIGEgZmV3IGluc3RhbmNlcy4gQXJpc3RvbiwgdGhlIGNhcHRhaW4gb2YgdGhlIFBhZW9uaWFucywgaGF2aW5nIHNsYWluIGFuIGVuZW15LCBicm91Z2h0IGhpcyBoZWFkIGFuZCBzaG93ZWQgaXQgdG8gQWxleGFuZGVyLCBzYXlpbmc6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW4gbXkgY291bnRyeSwgTyBLaW5nLCBzdWNoIGEgZ2lmdCBhcyB0aGlzIGlzIHJld2FyZGVkIHdpdGggYSBnb2xkZW4gYmVha2VyLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcyw8L3E+IHNhaWQgQWxleGFuZGVyIHdpdGggYSBsYXVnaCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFuIGVtcHR5IG9uZTsgYnV0IEkgd2lsbCBwbGVkZ2UgdGh5IGhlYWx0aCB3aXRoIG9uZSB3aGljaCBpcyBmdWxsIG9mIHB1cmUgd2luZS48L3E+IEFnYWluLCBhIGNvbW1vbiBNYWNlZG9uaWFuIHdhcyBkcml2aW5nIGEgbXVsZSBsYWRlbiB3aXRoIHNvbWUgb2YgdGhlIHJveWFsIGdvbGQsIGFuZCB3aGVuIHRoZSBiZWFzdCBnYXZlIG91dCwgdG9vayB0aGUgbG9hZCBvbiBoaXMgb3duIHNob3VsZGVycyBhbmQgdHJpZWQgdG8gY2FycnkgaXQuIFRoZSBraW5nLCB0aGVuLCBzZWVpbmcgdGhlIG1hbiBpbiBncmVhdCBkaXN0cmVzcyBhbmQgbGVhcm5pbmcgdGhlIGZhY3RzIG9mIHRoZSBjYXNlLCBzYWlkLCBhcyB0aGUgbWFuIHdhcyBhYm91dCB0byBsYXkgaGlzIGJ1cmRlbiBkb3duLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9uJ3QgZ2l2ZSBvdXQsIGJ1dCBmaW5pc2ggeW91ciBqb3VybmV5IGJ5IHRha2luZyB0aGlzIGxvYWQgdG8geW91ciBvd24gdGVudC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBoZSB3YXMgZ2VuZXJhbGx5IG1vcmUgZGlzcGxlYXNlZCB3aXRoIHRob3NlIHdobyB3b3VsZCBub3QgdGFrZSBoaXMgZ2lmdHMgdGhhbiB3aXRoIHRob3NlIHdobyBhc2tlZCBmb3IgdGhlbS4gQW5kIHNvIGhlIHdyb3RlIHRvIFBob2Npb24gaW4gYSBsZXR0ZXIgdGhhdCBoZSB3b3VsZCBub3QgdHJlYXQgaGltIGFzIGEgZnJpZW5kIGluIGZ1dHVyZSBpZiBoZSByZWplY3RlZCBoaXMgZmF2b3Vycy4gIEFnYWluLCB0byBTZXJhcGlvbiwgb25lIG9mIHRoZSB5b3V0aHMgd2hvIHBsYXllZCBhdCBiYWxsIHdpdGggaGltLCBoZSB1c2VkIHRvIGdpdmUgbm90aGluZyBiZWNhdXNlIGhlIGFza2VkIGZvciBub3RoaW5nLiBBY2NvcmRpbmdseSwgd2hlbmV2ZXIgU2VyYXBpb24gaGFkIHRoZSBiYWxsLCBoZSB3b3VsZCB0aHJvdyBpdCB0byBvdGhlcnMsIHVudGlsIHRoZSBraW5nIHNhaWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V29uJ3QgeW91IGdpdmUgaXQgdG8gbWU/PC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Obyw8L3E+IHNhaWQgU2VyYXBpb24sCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJlY2F1c2UgeW91IGRvbid0IGFzayBmb3IgaXQsPC9xPiB3aGVyZWF0IHRoZSBraW5nIGJ1cnN0IG91dCBsYXVnaGluZyBhbmQgbWFkZSBoaW0gbWFueSBwcmVzZW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldpdGggUHJvdGVhcywgaG93ZXZlciwgYSBjbGV2ZXIgd2FnIGFuZCBib29uIGNvbXBhbmlvbiwgaGUgYXBwZWFyZWQgdG8gYmUgYW5ncnk7IGJ1dCB3aGVuIHRoZSBtYW4ncyBmcmllbmRzIGJlZ2dlZCBoaXMgZm9yZ2l2ZW5lc3MsIGFzIGRpZCBQcm90ZWFzIGhpbXNlbGYgd2l0aCB0ZWFycywgdGhlIGtpbmcgc2FpZCB0aGF0IGhlIHdhcyBoaXMgZnJpZW5kIGFnYWluLCB3aGVyZWF0IFByb3RlYXMgc2FpZDogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiB0aGF0IGNhc2UsIE8gS2luZywgZ2l2ZSBtZSBzb21ldGhpbmcgdG8gcHJvdmUgaXQgZmlyc3QuPC9xPiBBY2NvcmRpbmdseSwgdGhlIGtpbmcgb3JkZXJlZCB0aGF0IGZpdmUgdGFsZW50cyBzaG91bGQgYmUgZ2l2ZW4gaGltLiBXaGF0IGxvZnR5IGFpcnMgaGlzIGZyaWVuZHMgYW5kIGJvZHlndWFyZHMgd2VyZSB3b250IHRvIGRpc3BsYXkgb3ZlciB0aGUgd2VhbHRoIGJlc3Rvd2VkIGJ5IGhpbSwgaXMgcGxhaW4gZnJvbSBhIGxldHRlciB3aGljaCBPbHltcGlhcyB3cm90ZSB0byBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['39.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNoZSBzYXlzOiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgYmVnIHRoZWUgdG8gZmluZCBvdGhlciB3YXlzIG9mIGNvbmZlcnJpbmcgZmF2b3VycyBvbiB0aG9zZSB0aG91IGxvdmVzdCBhbmQgaG9sZGVzdCBpbiBob25vdXI7IGFzIGl0IGlzLCB0aG91IG1ha2VzdCB0aGVtIGFsbCB0aGUgZXF1YWxzIG9mIGtpbmdzIGFuZCBwcm92aWRlc3QgdGhlbSB3aXRoIGFuIGFidW5kYW5jZSBvZiBmcmllbmRzLCB3aGlsc3QgdGh5c2VsZiB0aG91IHN0cmlwcGVzdCBiYXJlLjwvcT4gT2x5bXBpYXMgb2Z0ZW4gd3JvdGUgaGltIGluIGxpa2UgdmVpbiwgYnV0IEFsZXhhbmRlciBrZXB0IGhlciB3cml0aW5ncyBzZWNyZXQsIGV4Y2VwdCBvbmNlIHdoZW4gSGVwaGFlc3Rpb24sIGFzIHdhcyBoaXMgd29udCwgcmVhZCB3aXRoIGhpbSBhIGxldHRlciB3aGljaCBoYWQgYmVlbiBvcGVuZWQ7IHRoZSBraW5nIGRpZCBub3QgcHJldmVudCBoaW0sIGJ1dCB0b29rIHRoZSByaW5nIGZyb20gaGlzIG93biBmaW5nZXIgYW5kIGFwcGxpZWQgaXRzIHNlYWwgdG8gdGhlIGxpcHMgb2YgSGVwaGFlc3Rpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['39.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB0aG91Z2ggdGhlIHNvbiBvZiBNYXphZXVzLCB0aGUgbW9zdCBpbmZsdWVudGlhbCBtYW4gYXQgdGhlIGNvdXJ0IG9mIERhcmVpdXMsIGFscmVhZHkgaGFkIGEgcHJvdmluY2UsIEFsZXhhbmRlciBnYXZlIGhpbSBhIHNlY29uZCBhbmQgYSBsYXJnZXIgb25lLiBIZSwgaG93ZXZlciwgZGVjbGluZWQgaXQgc2F5aW5nOiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gS2luZywgZm9ybWVybHkgdGhlcmUgd2FzIG9uZSBEYXJlaXVzLCBidXQgbm93IHRob3UgaGFzdCBtYWRlIG1hbnkgQWxleGFuZGVycy48L3E+IFRvIFBhcm1lbmlvLCBtb3Jlb3ZlciwgQWxleGFuZGVyIGdhdmUgdGhlIGhvdXNlIG9mIEJhZ29hcyBhdCBTdXNhLCBpbiB3aGljaCBpdCBpcyBzYWlkIHRoZXJlIHdhcyBmb3VuZCBhcHBhcmVsIHdvcnRoIGEgdGhvdXNhbmQgdGFsZW50cy4gQWdhaW4sIGhlIHdyb3RlIHRvIEFudGlwYXRlciBiaWRkaW5nIGhpbSBrZWVwIGd1YXJkcyBhYm91dCBoaXMgcGVyc29uLCBzaW5jZSBwbG90cyB3ZXJlIGJlaW5nIGxhaWQgYWdhaW5zdCBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['39.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRvIGhpcyBtb3RoZXIsIGFsc28sIGhlIHNlbnQgbWFueSBwcmVzZW50cywgYnV0IHdvdWxkIG5vdCBzdWZmZXIgaGVyIHRvIG1lZGRsZSBpbiBhZmZhaXJzIG5vciBpbnRlcmZlcmUgaW4gaGlzIGNhbXBhaWduczsgYW5kIHdoZW4gc2hlIGNoaWRlZCBoaW0gZm9yIHRoaXMsIGhlIGJvcmUgaGVyIGhhcnNobmVzcyBwYXRpZW50bHkuIE9uY2UsIGhvd2V2ZXIsIGFmdGVyIHJlYWRpbmcgYSBsb25nIGxldHRlciB3aGljaCBBbnRpcGF0ZXIgaGFkIHdyaXR0ZW4gaW4gZGVudW5jaWF0aW9uIG9mIGhlciwgaGUgc2FpZCBBbnRpcGF0ZXIga25ldyBub3QgdGhhdCBvbmUgdGVhciBvZiBhIG1vdGhlciBlZmZhY2VkIHRlbiB0aG91c2FuZCBsZXR0ZXJzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNhdyB0aGF0IGhpcyBmYXZvdXJpdGVzIGhhZCBncm93biBhbHRvZ2V0aGVyIGx1eHVyaW91cywgYW5kIHdlcmUgdnVsZ2FyIGluIHRoZSBleHRyYXZhZ2FuY2Ugb2YgdGhlaXIgd2F5cyBvZiBsaXZpbmcuIEZvciBpbnN0YW5jZSwgSGFnbm9uIHRoZSBUZWlhbiB1c2VkIHRvIHdlYXIgc2lsdmVyIG5haWxzIGluIGhpcyBib290czsgTGVvbm5hdHVzIGhhZCBkdXN0IGZvciBoaXMgZ3ltbmFzdGljIGV4ZXJjaXNlcyBicm91Z2h0IHRvIGhpbSBvbiBtYW55IGNhbWVscyBmcm9tIEVneXB0OyBQaGlsb3RhcyBoYWQgaHVudGluZy1uZXRzIGEgaHVuZHJlZCBmdXJsb25ncyBsb25nOyB3aGVuIHRoZXkgdG9vayB0aGVpciBleGVyY2lzZSBhbmQgdGhlaXIgYmF0aHMsIG1vcmUgb2YgdGhlbSBhY3R1YWxseSB1c2VkIG15cnJoIHRoYW4gb2xpdmUgb2lsLCBhbmQgdGhleSBoYWQgaW4gdGhlaXIgdHJhaW4gcnViYmVycyBhbmQgY2hhbWJlcmxhaW5zLiBBbGV4YW5kZXIgdGhlcmVmb3JlIGNoaWRlZCB0aGVtIGluIGdlbnRsZSBhbmQgcmVhc29uYWJsZSBmYXNoaW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgYW1hemVkLCBoZSBzYWlkLCB0aGF0IGFmdGVyIHRoZXkgaGFkIHVuZGVyZ29uZSBzbyBtYW55IGFuZCBzbyBncmVhdCBjb250ZXN0cyB0aGV5IGRpZCBub3QgcmVtZW1iZXIgdGhhdCB0aG9zZSB3aG8gY29ucXVlciBieSB0b2lsIHNsZWVwIG1vcmUgc3dlZXRseSB0aGFuIHRob3NlIHdobyBhcmUgY29ucXVlcmVkIGJ5IHRoZWlyIHRvaWwsIGFuZCBkaWQgbm90IHNlZSwgZnJvbSBhIGNvbXBhcmlzb24gb2YgdGhlaXIgb3duIGxpdmVzIHdpdGggdGhvc2Ugb2YgdGhlIFBlcnNpYW5zLCB0aGF0IGl0IGlzIGEgdmVyeSBzZXJ2aWxlIHRoaW5nIHRvIGJlIGx1eHVyaW91cywgYnV0IGEgdmVyeSByb3lhbCB0aGluZyB0byB0b2lsLiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgeWV0LDwvcT4gc2FpZCBoZSwgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aG93IGNhbiBhIG1hbiB0YWtlIGNhcmUgb2YgaGlzIG93biBob3JzZSBvciBmdXJiaXNoIHVwIGhpcyBzcGVhciBhbmQgaGVsbWV0LCBpZiBoZSBpcyB1bmFjY3VzdG9tZWQgdG8gdXNpbmcgaGlzIGhhbmRzIG9uIGhpcyBvd24gZGVhciBwZXJzb24/IAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Lbm93IHllIG5vdCw8L3E+IHNhaWQgaGUsIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYXQgdGhlIGVuZCBhbmQgb2JqZWN0IG9mIGNvbnF1ZXN0IGlzIHRvIGF2b2lkIGRvaW5nIHRoZSBzYW1lIHRoaW5nIGFzIHRoZSBjb25xdWVyZWQ/PC9xPiBBY2NvcmRpbmdseSwgaGUgZXhlcnRlZCBoaW1zZWxmIHlldCBtb3JlIHN0cmVudW91c2x5IGluIG1pbGl0YXJ5IGFuZCBodW50aW5nIGV4cGVkaXRpb25zLCBzdWZmZXJpbmcgZGlzdHJlc3MgYW5kIHJpc2tpbmcgaGlzIGxpZmUgLCBzbyB0aGF0IGEgU3BhcnRhbiBhbWJhc3NhZG9yIHdobyBjYW1lIHVwIHdpdGggaGltIGFzIGhlIHdhcyBicmluZ2luZyBkb3duIGEgZ3JlYXQgbGlvbiwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob2JseSwgaW5kZWVkLCBBbGV4YW5kZXIsIGhhc3QgdGhvdSBzdHJ1Z2dsZWQgd2l0aCB0aGUgbGlvbiB0byBzZWUgd2hpY2ggc2hvdWxkIGJlIGtpbmcuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaHVudGluZy1zY2VuZSBDcmF0ZXJ1cyBkZWRpY2F0ZWQgYXQgRGVscGhpLCB3aXRoIGJyb256ZSBmaWd1cmVzIG9mIHRoZSBsaW9uLCB0aGUgZG9ncywgdGhlIGtpbmcgZW5nYWdlZCB3aXRoIHRoZSBsaW9uLCBhbmQgaGltc2VsZiBjb21pbmcgdG8gaGlzIGFzc2lzdGFuY2U7IHNvbWUgb2YgdGhlIGZpZ3VyZXMgd2VyZSBtb3VsZGVkIGJ5IEx5c2lwcHVzLCBhbmQgc29tZSBieSBMZW9jaGFyZXMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgc2F3IHRoYXQgaGlzIGZhdm91cml0ZXMgaGFkIGdyb3duIGFsdG9nZXRoZXIgbHV4dXJpb3VzLCBhbmQgd2VyZSB2dWxnYXIgaW4gdGhlIGV4dHJhdmFnYW5jZSBvZiB0aGVpciB3YXlzIG9mIGxpdmluZy4gRm9yIGluc3RhbmNlLCBIYWdub24gdGhlIFRlaWFuIHVzZWQgdG8gd2VhciBzaWx2ZXIgbmFpbHMgaW4gaGlzIGJvb3RzOyBMZW9ubmF0dXMgaGFkIGR1c3QgZm9yIGhpcyBneW1uYXN0aWMgZXhlcmNpc2VzIGJyb3VnaHQgdG8gaGltIG9uIG1hbnkgY2FtZWxzIGZyb20gRWd5cHQ7IFBoaWxvdGFzIGhhZCBodW50aW5nLW5ldHMgYSBodW5kcmVkIGZ1cmxvbmdzIGxvbmc7IHdoZW4gdGhleSB0b29rIHRoZWlyIGV4ZXJjaXNlIGFuZCB0aGVpciBiYXRocywgbW9yZSBvZiB0aGVtIGFjdHVhbGx5IHVzZWQgbXlycmggdGhhbiBvbGl2ZSBvaWwsIGFuZCB0aGV5IGhhZCBpbiB0aGVpciB0cmFpbiBydWJiZXJzIGFuZCBjaGFtYmVybGFpbnMuIEFsZXhhbmRlciB0aGVyZWZvcmUgY2hpZGVkIHRoZW0gaW4gZ2VudGxlIGFuZCByZWFzb25hYmxlIGZhc2hpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbWF6ZWQsIGhlIHNhaWQsIHRoYXQgYWZ0ZXIgdGhleSBoYWQgdW5kZXJnb25lIHNvIG1hbnkgYW5kIHNvIGdyZWF0IGNvbnRlc3RzIHRoZXkgZGlkIG5vdCByZW1lbWJlciB0aGF0IHRob3NlIHdobyBjb25xdWVyIGJ5IHRvaWwgc2xlZXAgbW9yZSBzd2VldGx5IHRoYW4gdGhvc2Ugd2hvIGFyZSBjb25xdWVyZWQgYnkgdGhlaXIgdG9pbCwgYW5kIGRpZCBub3Qgc2VlLCBmcm9tIGEgY29tcGFyaXNvbiBvZiB0aGVpciBvd24gbGl2ZXMgd2l0aCB0aG9zZSBvZiB0aGUgUGVyc2lhbnMsIHRoYXQgaXQgaXMgYSB2ZXJ5IHNlcnZpbGUgdGhpbmcgdG8gYmUgbHV4dXJpb3VzLCBidXQgYSB2ZXJ5IHJveWFsIHRoaW5nIHRvIHRvaWwuIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHlldCw8L3E+IHNhaWQgaGUsIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aG93IGNhbiBhIG1hbiB0YWtlIGNhcmUgb2YgaGlzIG93biBob3JzZSBvciBmdXJiaXNoIHVwIGhpcyBzcGVhciBhbmQgaGVsbWV0LCBpZiBoZSBpcyB1bmFjY3VzdG9tZWQgdG8gdXNpbmcgaGlzIGhhbmRzIG9uIGhpcyBvd24gZGVhciBwZXJzb24/IAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPktub3cgeWUgbm90LDwvcT4gc2FpZCBoZSwgPC90cmFuc2xhdGlvbj4="
translation['40.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPktub3cgeWUgbm90LDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCB0aGUgZW5kIGFuZCBvYmplY3Qgb2YgY29ucXVlc3QgaXMgdG8gYXZvaWQgZG9pbmcgdGhlIHNhbWUgdGhpbmcgYXMgdGhlIGNvbnF1ZXJlZD88L3E+IEFjY29yZGluZ2x5LCBoZSBleGVydGVkIGhpbXNlbGYgeWV0IG1vcmUgc3RyZW51b3VzbHkgaW4gbWlsaXRhcnkgYW5kIGh1bnRpbmcgZXhwZWRpdGlvbnMsIHN1ZmZlcmluZyBkaXN0cmVzcyBhbmQgcmlza2luZyBoaXMgbGlmZSAsIHNvIHRoYXQgYSBTcGFydGFuIGFtYmFzc2Fkb3Igd2hvIGNhbWUgdXAgd2l0aCBoaW0gYXMgaGUgd2FzIGJyaW5naW5nIGRvd24gYSBncmVhdCBsaW9uLCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm9ibHksIGluZGVlZCwgQWxleGFuZGVyLCBoYXN0IHRob3Ugc3RydWdnbGVkIHdpdGggdGhlIGxpb24gdG8gc2VlIHdoaWNoIHNob3VsZCBiZSBraW5nLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaHVudGluZy1zY2VuZSBDcmF0ZXJ1cyBkZWRpY2F0ZWQgYXQgRGVscGhpLCB3aXRoIGJyb256ZSBmaWd1cmVzIG9mIHRoZSBsaW9uLCB0aGUgZG9ncywgdGhlIGtpbmcgZW5nYWdlZCB3aXRoIHRoZSBsaW9uLCBhbmQgaGltc2VsZiBjb21pbmcgdG8gaGlzIGFzc2lzdGFuY2U7IHNvbWUgb2YgdGhlIGZpZ3VyZXMgd2VyZSBtb3VsZGVkIGJ5IEx5c2lwcHVzLCBhbmQgc29tZSBieSBMZW9jaGFyZXMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWxleGFuZGVyLCB0aGVuLCBpbiBleGVyY2lzaW5nIGhpbXNlbGYgYW5kIGF0IHRoZSBzYW1lIHRpbWUgaW5jaXRpbmcgb3RoZXJzIHRvIGRlZWRzIG9mIHZhbG91ciwgd2FzIHdvbnQgdG8gY291cnQgZGFuZ2VyOyBidXQgaGlzIGZyaWVuZHMsIHdob3NlIHdlYWx0aCBhbmQgbWFnbmlmaWNlbmNlIG5vdyBnYXZlIHRoZW0gYSBkZXNpcmUgdG8gbGl2ZSBpbiBsdXh1cnkgYW5kIGlkbGVuZXNzLCB3ZXJlIGltcGF0aWVudCBvZiBoaXMgbG9uZyB3YW5kZXJpbmdzIGFuZCBtaWxpdGFyeSBleHBlZGl0aW9ucywgYW5kIGdyYWR1YWxseSB3ZW50IHNvIGZhciBhcyB0byBhYnVzZSBoaW0gYW5kIHNwZWFrIGlsbCBvZiBoaW0uIEhlLCBob3dldmVyLCB3YXMgdmVyeSBtaWxkbHkgZGlzcG9zZWQgYXQgZmlyc3QgdG93YXJkIHRoaXMgdHJlYXRtZW50IG9mIGhpbXNlbGYgYW5kIHVzZWQgdG8gc2F5IHRoYXQgaXQgd2FzIHRoZSBsb3Qgb2YgYSBraW5nIHRvIGNvbmZlciBmYXZvdXJzIGFuZCBiZSBpbGwtc3Bva2VuIG9mIHRoZXJlZm9yLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGluIHRoZSBtb3N0IHRyaWZsaW5nIGF0dGVudGlvbnMgd2hpY2ggaGUgcGFpZCBoaXMgZmFtaWxpYXIgZnJpZW5kcyB0aGVyZSB3ZXJlIG1hcmtzIG9mIGdyZWF0IGdvb2Qtd2lsbCBhbmQgZXN0ZWVtLiBJIHdpbGwgaW5zdGFuY2UgYSBmZXcgb2YgdGhlc2UuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['41.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWxleGFuZGVyLCB0aGVuLCBpbiBleGVyY2lzaW5nIGhpbXNlbGYgYW5kIGF0IHRoZSBzYW1lIHRpbWUgaW5jaXRpbmcgb3RoZXJzIHRvIGRlZWRzIG9mIHZhbG91ciwgd2FzIHdvbnQgdG8gY291cnQgZGFuZ2VyOyBidXQgaGlzIGZyaWVuZHMsIHdob3NlIHdlYWx0aCBhbmQgbWFnbmlmaWNlbmNlIG5vdyBnYXZlIHRoZW0gYSBkZXNpcmUgdG8gbGl2ZSBpbiBsdXh1cnkgYW5kIGlkbGVuZXNzLCB3ZXJlIGltcGF0aWVudCBvZiBoaXMgbG9uZyB3YW5kZXJpbmdzIGFuZCBtaWxpdGFyeSBleHBlZGl0aW9ucywgYW5kIGdyYWR1YWxseSB3ZW50IHNvIGZhciBhcyB0byBhYnVzZSBoaW0gYW5kIHNwZWFrIGlsbCBvZiBoaW0uIEhlLCBob3dldmVyLCB3YXMgdmVyeSBtaWxkbHkgZGlzcG9zZWQgYXQgZmlyc3QgdG93YXJkIHRoaXMgdHJlYXRtZW50IG9mIGhpbXNlbGYgYW5kIHVzZWQgdG8gc2F5IHRoYXQgaXQgd2FzIHRoZSBsb3Qgb2YgYSBraW5nIHRvIGNvbmZlciBmYXZvdXJzIGFuZCBiZSBpbGwtc3Bva2VuIG9mIHRoZXJlZm9yLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaW4gdGhlIG1vc3QgdHJpZmxpbmcgYXR0ZW50aW9ucyB3aGljaCBoZSBwYWlkIGhpcyBmYW1pbGlhciBmcmllbmRzIHRoZXJlIHdlcmUgbWFya3Mgb2YgZ3JlYXQgZ29vZC13aWxsIGFuZCBlc3RlZW0uIEkgd2lsbCBpbnN0YW5jZSBhIGZldyBvZiB0aGVzZS48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlIGZvdW5kIGZhdWx0IHdpdGggUGV1Y2VzdGFzIGJ5IGxldHRlciBiZWNhdXNlLCBhZnRlciBiZWluZyBiaXR0ZW4gYnkgYSBiZWFyLCBoZSB3cm90ZSBhYm91dCBpdCB0byB0aGUgcmVzdCBvZiBoaXMgZnJpZW5kcyBidXQgZGlkIG5vdCB0ZWxsIGhpbS4gPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3csIGhvd2V2ZXIsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d3JpdGUgbWUgaG93IHlvdSBhcmUsIGFuZCB0ZWxsIG1lIHdoZXRoZXIgYW55IG9mIHlvdXIgZmVsbG93LWh1bnRzbWVuIGxlZnQgeW91IGluIHRoZSBsdXJjaCwgdGhhdCBJIG1heSBwdW5pc2ggdGhlbS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UbyBIZXBoYWVzdGlvbiwgd2hvIHdhcyBhYnNlbnQgb24gc29tZSBidXNpbmVzcywgaGUgd3JvdGUgdGhhdCB3aGlsZSB0aGV5IHdlcmUgZGl2ZXJ0aW5nIHRoZW1zZWx2ZXMgd2l0aCBodW50aW5nIGFuIGljaG5ldW1vbiwgQ3JhdGVydXMgZW5jb3VudGVyZWQgdGhlIGxhbmNlIG9mIFBlcmRpY2NhcyBhbmQgd2FzIHdvdW5kZWQgaW4gdGhlIHRoaWdocy4gQWZ0ZXIgUGV1Y2VzdGFzIGhhZCBzYWZlbHkgcmVjb3ZlcmVkIGZyb20gYW4gaWxsbmVzcywgQWxleGFuZGVyIHdyb3RlIHRvIHRoZSBwaHlzaWNpYW4sIEFsZXhpcHB1cywgZXhwcmVzc2luZyBoaXMgdGhhbmtzLiBXaGlsZSBDcmF0ZXJ1cyB3YXMgc2ljaywgQWxleGFuZGVyIGhhZCBhIHZpc2lvbiBpbiBoaXMgc2xlZXAsIHdoZXJldXBvbiBoZSBvZmZlcmVkIGNlcnRhaW4gc2FjcmlmaWNlcyBoaW1zZWxmIGZvciB0aGUgcmVjb3Zlcnkgb2YgaGlzIGZyaWVuZCwgYW5kIGJhZGUgaGltIGFsc28gc2FjcmlmaWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3cm90ZSBhbHNvIHRvIFBhdXNhbmlhcywgdGhlIHBoeXNpY2lhbiwgd2hvIHdpc2hlZCB0byBhZG1pbmlzdGVyIGhlbGxlYm9yZSB0byBDcmF0ZXJ1cywgcGFydGx5IGV4cHJlc3NpbmcgZGlzdHJlc3MsIGFuZCBwYXJ0bHkgYWR2aXNpbmcgaGltIGhvdyB0byB1c2UgdGhlIG1lZGljaW5lLiBUaG9zZSB3aG8gZmlyc3QgYnJvdWdodCB3b3JkIHRvIGhpbSB0aGF0IEhhcnBhbHVzIGhhZCBhYnNjb25kZWQsIG5hbWVseSwgRXBoaWFsdGVzIGFuZCBDaXNzdXMsIGhlIHB1dCBpbiBmZXR0ZXJzLCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhleSB3ZXJlIGZhbHNlbHkgYWNjdXNpbmcgdGhlIG1hbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSB3YXMgc2VuZGluZyBob21lIGhpcyBhZ2VkIGFuZCBpbmZpcm0gc29sZGllcnMsIEV1cnlsb2NodXMgb2YgQWVnYWUgZ290IGhpbXNlbGYgZW5yb2xsZWQgYW1vbmcgdGhlIHNpY2ssIGFuZCB0aGVuLCB3aGVuIGl0IHdhcyBkaXNjb3ZlcmVkIHRoYXQgaGUgaGFkIG5vdGhpbmcgdGhlIG1hdHRlciB3aXRoIGhpbSwgY29uZmVzc2VkIHRoYXQgaGUgd2FzIGluIGxvdmUgd2l0aCBUZWxlc2lwcGEsIGFuZCB3YXMgYmVudCBvbiBmb2xsb3dpbmcgYWxvbmcgd2l0aCBoZXIgb24gaGVyIGpvdXJuZXkgdG8gdGhlIHNlYS1ib2FyZC4gQWxleGFuZGVyIGFza2VkIG9mIHdoYXQgcGFyZW50YWdlIHRoZSBnaXJsIHdhcywgYW5kIG9uIGhlYXJpbmcgdGhhdCBzaGUgd2FzIGEgZnJlZS1ib3JuIGNvdXJ0ZXNhbiwgc2FpZDogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSB3aWxsIGhlbHAgeW91LCBPIEV1cnlsb2NodXMsIGluIHlvdXIgYW1vdXI7IGJ1dCBzZWUgdG8gaXQgdGhhdCB3ZSB0cnkgdG8gcGVyc3VhZGUgVGVsZXNpcHBhIGVpdGhlciBieSBhcmd1bWVudHMgb3IgYnkgZ2lmdHMsIHNpbmNlIHNoZSBpcyBmcmVlLWJvcm4uPC9xPgogICAgICAgICA8L3A+CiAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm93LCBob3dldmVyLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndyaXRlIG1lIGhvdyB5b3UgYXJlLCBhbmQgdGVsbCBtZSB3aGV0aGVyIGFueSBvZiB5b3VyIGZlbGxvdy1odW50c21lbiBsZWZ0IHlvdSBpbiB0aGUgbHVyY2gsIHRoYXQgSSBtYXkgcHVuaXNoIHRoZW0uPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvIEhlcGhhZXN0aW9uLCB3aG8gd2FzIGFic2VudCBvbiBzb21lIGJ1c2luZXNzLCBoZSB3cm90ZSB0aGF0IHdoaWxlIHRoZXkgd2VyZSBkaXZlcnRpbmcgdGhlbXNlbHZlcyB3aXRoIGh1bnRpbmcgYW4gaWNobmV1bW9uLCBDcmF0ZXJ1cyBlbmNvdW50ZXJlZCB0aGUgbGFuY2Ugb2YgUGVyZGljY2FzIGFuZCB3YXMgd291bmRlZCBpbiB0aGUgdGhpZ2hzLiBBZnRlciBQZXVjZXN0YXMgaGFkIHNhZmVseSByZWNvdmVyZWQgZnJvbSBhbiBpbGxuZXNzLCBBbGV4YW5kZXIgd3JvdGUgdG8gdGhlIHBoeXNpY2lhbiwgQWxleGlwcHVzLCBleHByZXNzaW5nIGhpcyB0aGFua3MuIFdoaWxlIENyYXRlcnVzIHdhcyBzaWNrLCBBbGV4YW5kZXIgaGFkIGEgdmlzaW9uIGluIGhpcyBzbGVlcCwgd2hlcmV1cG9uIGhlIG9mZmVyZWQgY2VydGFpbiBzYWNyaWZpY2VzIGhpbXNlbGYgZm9yIHRoZSByZWNvdmVyeSBvZiBoaXMgZnJpZW5kLCBhbmQgYmFkZSBoaW0gYWxzbyBzYWNyaWZpY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['41.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdyb3RlIGFsc28gdG8gUGF1c2FuaWFzLCB0aGUgcGh5c2ljaWFuLCB3aG8gd2lzaGVkIHRvIGFkbWluaXN0ZXIgaGVsbGVib3JlIHRvIENyYXRlcnVzLCBwYXJ0bHkgZXhwcmVzc2luZyBkaXN0cmVzcywgYW5kIHBhcnRseSBhZHZpc2luZyBoaW0gaG93IHRvIHVzZSB0aGUgbWVkaWNpbmUuIFRob3NlIHdobyBmaXJzdCBicm91Z2h0IHdvcmQgdG8gaGltIHRoYXQgSGFycGFsdXMgaGFkIGFic2NvbmRlZCwgbmFtZWx5LCBFcGhpYWx0ZXMgYW5kIENpc3N1cywgaGUgcHV0IGluIGZldHRlcnMsIG9uIHRoZSBncm91bmQgdGhhdCB0aGV5IHdlcmUgZmFsc2VseSBhY2N1c2luZyB0aGUgbWFuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['41.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgd2FzIHNlbmRpbmcgaG9tZSBoaXMgYWdlZCBhbmQgaW5maXJtIHNvbGRpZXJzLCBFdXJ5bG9jaHVzIG9mIEFlZ2FlIGdvdCBoaW1zZWxmIGVucm9sbGVkIGFtb25nIHRoZSBzaWNrLCBhbmQgdGhlbiwgd2hlbiBpdCB3YXMgZGlzY292ZXJlZCB0aGF0IGhlIGhhZCBub3RoaW5nIHRoZSBtYXR0ZXIgd2l0aCBoaW0sIGNvbmZlc3NlZCB0aGF0IGhlIHdhcyBpbiBsb3ZlIHdpdGggVGVsZXNpcHBhLCBhbmQgd2FzIGJlbnQgb24gZm9sbG93aW5nIGFsb25nIHdpdGggaGVyIG9uIGhlciBqb3VybmV5IHRvIHRoZSBzZWEtYm9hcmQuIEFsZXhhbmRlciBhc2tlZCBvZiB3aGF0IHBhcmVudGFnZSB0aGUgZ2lybCB3YXMsIGFuZCBvbiBoZWFyaW5nIHRoYXQgc2hlIHdhcyBhIGZyZWUtYm9ybiBjb3VydGVzYW4sIHNhaWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSB3aWxsIGhlbHAgeW91LCBPIEV1cnlsb2NodXMsIGluIHlvdXIgYW1vdXI7IGJ1dCBzZWUgdG8gaXQgdGhhdCB3ZSB0cnkgdG8gcGVyc3VhZGUgVGVsZXNpcHBhIGVpdGhlciBieSBhcmd1bWVudHMgb3IgYnkgZ2lmdHMsIHNpbmNlIHNoZSBpcyBmcmVlLWJvcm4uPC9xPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaXMgYXN0b25pc2hpbmcgdGhhdCBoZSBoYWQgdGltZSB0byB3cml0ZSBzbyBtYW55IGxldHRlcnMgZm9yIGhpcyBmcmllbmRzLiBGb3IgaW5zdGFuY2UsIGhlIHdyb3RlIG9uZSBnaXZpbmcgb3JkZXJzIHRvIHNlZWsgb3V0IGEgc2xhdmUgb2YgU2VsZXVjdXMgd2hvIGhhZCBydW4gYXdheSBpbnRvIENpbGljaWE7IGFuZCBvbmUgaW4gY29tbWVuZGF0aW9uIG9mIFBldWNlc3RhcyBmb3IgYXJyZXN0aW5nIE5pY29uLCBhIHNlcnZhbnQgb2YgQ3JhdGVydXM7IGFuZCBvbmUgdG8gTWVnYWJ5enVzIGFib3V0IGFuIGF0dGVuZGFudCB3aG8gaGFkIHRha2VuIHJlZnVnZSBpbiBhIHNhbmN0dWFyeSwgYmlkZGluZyBoaW0sIGlmIHBvc3NpYmxlLCBlbnRpY2UgdGhlIHNsYXZlIG91dHNpZGUgdGhlIHNhbmN0dWFyeSBhbmQgdGhlbiBhcnJlc3QgaGltLCBidXQgbm90IHRvIGxheSBoYW5kcyB1cG9uIGhpbSBpbiB0aGUgc2FuY3R1YXJ5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzYWlkLCB0b28sIHRoYXQgYXQgZmlyc3QsIHdoZW4gaGUgd2FzIHRyeWluZyBjYXBpdGFsIGNhc2VzLCBoZSB3b3VsZCBwdXQgaGlzIGhhbmQgb3ZlciBvbmUgb2YgaGlzIGVhcnMgd2hpbGUgdGhlIGFjY3VzZXIgd2FzIHNwZWFraW5nLCB0aGF0IGhlIG1pZ2h0IGtlZXAgaXQgZnJlZSBhbmQgdW5wcmVqdWRpY2VkIGZvciB0aGUgYWNjdXNlZC4gQnV0IGFmdGVyd2FyZHMgdGhlIG11bHRpdHVkZSBvZiBhY2N1c2F0aW9ucyB3aGljaCBoZSBoZWFyZCByZW5kZXJlZCBoaW0gaGFyc2gsIGFuZCBsZWQgaGltIHRvIGJlbGlldmUgdGhlIGZhbHNlIGJlY2F1c2Ugc28gbWFueSB3ZXJlIHRydWUuIEFuZCBwYXJ0aWN1bGFybHkgd2hlbiBoZSB3YXMgbWFsaWduZWQgaGUgbG9zdCBkaXNjcmV0aW9uIGFuZCB3YXMgY3J1ZWwgYW5kIGluZXhvcmFibGUsIHNpbmNlIGhlIGxvdmVkIGhpcyByZXB1dGF0aW9uIG1vcmUgdGhhbiBoaXMgbGlmZSBvciBoaXMga2luZ2RvbS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIGFzdG9uaXNoaW5nIHRoYXQgaGUgaGFkIHRpbWUgdG8gd3JpdGUgc28gbWFueSBsZXR0ZXJzIGZvciBoaXMgZnJpZW5kcy4gRm9yIGluc3RhbmNlLCBoZSB3cm90ZSBvbmUgZ2l2aW5nIG9yZGVycyB0byBzZWVrIG91dCBhIHNsYXZlIG9mIFNlbGV1Y3VzIHdobyBoYWQgcnVuIGF3YXkgaW50byBDaWxpY2lhOyBhbmQgb25lIGluIGNvbW1lbmRhdGlvbiBvZiBQZXVjZXN0YXMgZm9yIGFycmVzdGluZyBOaWNvbiwgYSBzZXJ2YW50IG9mIENyYXRlcnVzOyBhbmQgb25lIHRvIE1lZ2FieXp1cyBhYm91dCBhbiBhdHRlbmRhbnQgd2hvIGhhZCB0YWtlbiByZWZ1Z2UgaW4gYSBzYW5jdHVhcnksIGJpZGRpbmcgaGltLCBpZiBwb3NzaWJsZSwgZW50aWNlIHRoZSBzbGF2ZSBvdXRzaWRlIHRoZSBzYW5jdHVhcnkgYW5kIHRoZW4gYXJyZXN0IGhpbSwgYnV0IG5vdCB0byBsYXkgaGFuZHMgdXBvbiBoaW0gaW4gdGhlIHNhbmN0dWFyeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIHRvbywgdGhhdCBhdCBmaXJzdCwgd2hlbiBoZSB3YXMgdHJ5aW5nIGNhcGl0YWwgY2FzZXMsIGhlIHdvdWxkIHB1dCBoaXMgaGFuZCBvdmVyIG9uZSBvZiBoaXMgZWFycyB3aGlsZSB0aGUgYWNjdXNlciB3YXMgc3BlYWtpbmcsIHRoYXQgaGUgbWlnaHQga2VlcCBpdCBmcmVlIGFuZCB1bnByZWp1ZGljZWQgZm9yIHRoZSBhY2N1c2VkLiBCdXQgYWZ0ZXJ3YXJkcyB0aGUgbXVsdGl0dWRlIG9mIGFjY3VzYXRpb25zIHdoaWNoIGhlIGhlYXJkIHJlbmRlcmVkIGhpbSBoYXJzaCwgYW5kIGxlZCBoaW0gdG8gYmVsaWV2ZSB0aGUgZmFsc2UgYmVjYXVzZSBzbyBtYW55IHdlcmUgdHJ1ZS4gQW5kIHBhcnRpY3VsYXJseSB3aGVuIGhlIHdhcyBtYWxpZ25lZCBoZSBsb3N0IGRpc2NyZXRpb24gYW5kIHdhcyBjcnVlbCBhbmQgaW5leG9yYWJsZSwgc2luY2UgaGUgbG92ZWQgaGlzIHJlcHV0YXRpb24gbW9yZSB0aGFuIGhpcyBsaWZlIG9yIGhpcyBraW5nZG9tLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaG93ZXZlciwgaGUgbWFyY2hlZCBvdXQgYWdhaW5zdCBEYXJlaXVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNwcmluZyBvZiAzMzAgQi5DLjwvbm90ZT4gZXhwZWN0aW5nIHRvIGZpZ2h0IGFub3RoZXIgYmF0dGxlOyBidXQgd2hlbiBoZSBoZWFyZCB0aGF0IERhcmVpdXMgaGFkIGJlZW4gc2VpemVkIGJ5IEJlc3N1cywgaGUgc2VudCBoaXMgVGhlc3NhbGlhbnMgaG9tZSwgYWZ0ZXIgZGlzdHJpYnV0aW5nIGFtb25nIHRoZW0gYSBsYXJnZXNzIG9mIHR3byB0aG91c2FuZCB0YWxlbnRzIG92ZXIgYW5kIGFib3ZlIHRoZWlyIHBheS4gSW4gY29uc2VxdWVuY2Ugb2YgdGhlIHB1cnN1aXQgb2YgRGFyZWl1cywgd2hpY2ggd2FzIGxvbmcgYW5kIGFyZHVvdXMgKGZvciBpbiBlbGV2ZW4gZGF5cyBoZSByb2RlIHRoaXJ0eS10aHJlZSBodW5kcmVkIGZ1cmxvbmdzKSwgbW9zdCBvZiBoaXMgaG9yc2VtZW4gZ2F2ZSBvdXQsIGFuZCBjaGllZmx5IGZvciBsYWNrIG9mIHdhdGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHBvaW50IHNvbWUgTWFjZWRvbmlhbnMgbWV0IGhpbSB3aG8gd2VyZSBjYXJyeWluZyB3YXRlciBmcm9tIHRoZSByaXZlciBpbiBza2lucyB1cG9uIHRoZWlyIG11bGVzLiBBbmQgd2hlbiB0aGV5IGJlaGVsZCBBbGV4YW5kZXIsIGl0IGJlaW5nIG5vdyBtaWRkYXksIGluIGEgd3JldGNoZWQgcGxpZ2h0IGZyb20gdGhpcnN0LCB0aGV5IHF1aWNrbHkgZmlsbGVkIGEgaGVsbWV0IGFuZCBicm91Z2h0IGl0IHRvIGhpbS4gVG8gaGlzIGVucXVpcnkgZm9yIHdob20gdGhleSB3ZXJlIGNhcnJ5aW5nIHRoZSB3YXRlciwgdGhleSByZXBsaWVkOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3Igb3VyIG93biBzb25zOyBidXQgaWYgdGhvdSBsaXZlc3QsIHdlIGNhbiBnZXQgb3RoZXIgc29ucywgZXZlbiBpZiB3ZSBsb3NlIHRoZXNlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5PbiBoZWFyaW5nIHRoaXMgaGUgdG9vayB0aGUgaGVsbWV0IGludG8gaGlzIGhhbmRzLCBidXQgd2hlbiBoZSBsb29rZWQgYXJvdW5kIGFuZCBzYXcgdGhlIGhvcnNlbWVuIGFib3V0IGhpbSBhbGwgc3RyZXRjaGluZyBvdXQgdGhlaXIgaGVhZHMgYW5kIGdhemluZyBhdCB0aGUgd2F0ZXIsIGhlIGhhbmRlZCBpdCBiYWNrIHdpdGhvdXQgZHJpbmtpbmcgYW55LCBidXQgd2l0aCBwcmFpc2VzIGZvciB0aGUgbWVuIHdobyBoYWQgYnJvdWdodCBpdDsgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiBJIHNob3VsZCBkcmluayBvZiBpdCBhbG9uZSwgdGhlc2UgaG9yc2VtZW4gb2YgbWluZSB3aWxsIGJlIG91dCBvZiBoZWFydC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhleSBiZWhlbGQgaGlzIHNlbGYtY29udHJvbCBhbmQgbG9mdGluZXNzIG9mIHNwaXJpdCwgdGhleSBzaG91dGVkIG91dCB0byBoaW0gdG8gbGVhZCB0aGVtIGZvcndhcmQgYm9sZGx5LCBhbmQgYmVnYW4gdG8gZ29hZCB0aGVpciBob3JzZXMgb24sIGRlY2xhcmluZyB0aGF0IHRoZXkgd291bGQgbm90IHJlZ2FyZCB0aGVtc2VsdmVzIGFzIHdlYXJ5LCBvciB0aGlyc3R5LCBvciBhcyBtb3J0YWxzIGF0IGFsbCwgc28gbG9uZyBhcyB0aGV5IGhhZCBzdWNoIGEga2luZy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaG93ZXZlciwgaGUgbWFyY2hlZCBvdXQgYWdhaW5zdCBEYXJlaXVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc3ByaW5nIG9mIDMzMCBCLkMuPC9ub3RlPiBleHBlY3RpbmcgdG8gZmlnaHQgYW5vdGhlciBiYXR0bGU7IGJ1dCB3aGVuIGhlIGhlYXJkIHRoYXQgRGFyZWl1cyBoYWQgYmVlbiBzZWl6ZWQgYnkgQmVzc3VzLCBoZSBzZW50IGhpcyBUaGVzc2FsaWFucyBob21lLCBhZnRlciBkaXN0cmlidXRpbmcgYW1vbmcgdGhlbSBhIGxhcmdlc3Mgb2YgdHdvIHRob3VzYW5kIHRhbGVudHMgb3ZlciBhbmQgYWJvdmUgdGhlaXIgcGF5LiBJbiBjb25zZXF1ZW5jZSBvZiB0aGUgcHVyc3VpdCBvZiBEYXJlaXVzLCB3aGljaCB3YXMgbG9uZyBhbmQgYXJkdW91cyAoZm9yIGluIGVsZXZlbiBkYXlzIGhlIHJvZGUgdGhpcnR5LXRocmVlIGh1bmRyZWQgZnVybG9uZ3MpLCBtb3N0IG9mIGhpcyBob3JzZW1lbiBnYXZlIG91dCwgYW5kIGNoaWVmbHkgZm9yIGxhY2sgb2Ygd2F0ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['42.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQgc29tZSBNYWNlZG9uaWFucyBtZXQgaGltIHdobyB3ZXJlIGNhcnJ5aW5nIHdhdGVyIGZyb20gdGhlIHJpdmVyIGluIHNraW5zIHVwb24gdGhlaXIgbXVsZXMuIEFuZCB3aGVuIHRoZXkgYmVoZWxkIEFsZXhhbmRlciwgaXQgYmVpbmcgbm93IG1pZGRheSwgaW4gYSB3cmV0Y2hlZCBwbGlnaHQgZnJvbSB0aGlyc3QsIHRoZXkgcXVpY2tseSBmaWxsZWQgYSBoZWxtZXQgYW5kIGJyb3VnaHQgaXQgdG8gaGltLiBUbyBoaXMgZW5xdWlyeSBmb3Igd2hvbSB0aGV5IHdlcmUgY2FycnlpbmcgdGhlIHdhdGVyLCB0aGV5IHJlcGxpZWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIG91ciBvd24gc29uczsgYnV0IGlmIHRob3UgbGl2ZXN0LCB3ZSBjYW4gZ2V0IG90aGVyIHNvbnMsIGV2ZW4gaWYgd2UgbG9zZSB0aGVzZS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['42.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIGhlYXJpbmcgdGhpcyBoZSB0b29rIHRoZSBoZWxtZXQgaW50byBoaXMgaGFuZHMsIGJ1dCB3aGVuIGhlIGxvb2tlZCBhcm91bmQgYW5kIHNhdyB0aGUgaG9yc2VtZW4gYWJvdXQgaGltIGFsbCBzdHJldGNoaW5nIG91dCB0aGVpciBoZWFkcyBhbmQgZ2F6aW5nIGF0IHRoZSB3YXRlciwgaGUgaGFuZGVkIGl0IGJhY2sgd2l0aG91dCBkcmlua2luZyBhbnksIGJ1dCB3aXRoIHByYWlzZXMgZm9yIHRoZSBtZW4gd2hvIGhhZCBicm91Z2h0IGl0OyA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiBJIHNob3VsZCBkcmluayBvZiBpdCBhbG9uZSwgdGhlc2UgaG9yc2VtZW4gb2YgbWluZSB3aWxsIGJlIG91dCBvZiBoZWFydC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['42.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZXkgYmVoZWxkIGhpcyBzZWxmLWNvbnRyb2wgYW5kIGxvZnRpbmVzcyBvZiBzcGlyaXQsIHRoZXkgc2hvdXRlZCBvdXQgdG8gaGltIHRvIGxlYWQgdGhlbSBmb3J3YXJkIGJvbGRseSwgYW5kIGJlZ2FuIHRvIGdvYWQgdGhlaXIgaG9yc2VzIG9uLCBkZWNsYXJpbmcgdGhhdCB0aGV5IHdvdWxkIG5vdCByZWdhcmQgdGhlbXNlbHZlcyBhcyB3ZWFyeSwgb3IgdGhpcnN0eSwgb3IgYXMgbW9ydGFscyBhdCBhbGwsIHNvIGxvbmcgYXMgdGhleSBoYWQgc3VjaCBhIGtpbmcuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHRoZW4sIGFsbCB3ZXJlIGFsaWtlIHJlYWR5IGFuZCB3aWxsaW5nOyBidXQgb25seSBzaXh0eSwgdGhleSBzYXksIHdlcmUgd2l0aCBBbGV4YW5kZXIgd2hlbiBoZSBidXJzdCBpbnRvIHRoZSBjYW1wIG9mIHRoZSBlbmVteS4gVGhlcmUsIGluZGVlZCwgdGhleSByb2RlIG92ZXIgbXVjaCBnb2xkIGFuZCBzaWx2ZXIgdGhhdCB3YXMgdGhyb3duIGF3YXksIHBhc3NlZCBieSBtYW55IHdhZ2dvbnMgZnVsbCBvZiB3b21lbiBhbmQgY2hpbGRyZW4gd2hpY2ggd2VyZSBjb3Vyc2luZyBoaXRoZXIgYW5kIHRoaXRoZXIgd2l0aG91dCB0aGVpciBkcml2ZXJzLCBhbmQgcHVyc3VlZCB0aG9zZSB3aG8gd2VyZSBmb3JlbW9zdCBpbiBmbGlnaHQsIHRoaW5raW5nIHRoYXQgRGFyZWl1cyB3YXMgYW1vbmcgdGhlbS4gQnV0IGF0IGxhc3QgdGhleSBmb3VuZCBoaW0gbHlpbmcgaW4gYSB3YWdnb24sIGhpcyBib2R5IGFsbCBmdWxsIG9mIGphdmVsaW5zLCBhdCB0aGUgcG9pbnQgb2YgZGVhdGguIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgaGUgYXNrZWQgZm9yIHNvbWV0aGluZyB0byBkcmluaywgYW5kIHdoZW4gaGUgaGFkIGRydW5rIHNvbWUgY29sZCB3YXRlciB3aGljaCBQb2x5c3RyYXR1cyBnYXZlIGhpbSwgaGUgc2FpZCB0byBoaW06IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IG1hbiwgdGhpcyBpcyB0aGUgZXh0cmVtaXR5IG9mIGFsbCBteSBpbGwtZm9ydHVuZSwgdGhhdCBJIHJlY2VpdmUgZ29vZCBhdCB0aHkgaGFuZHMgYW5kIGFtIG5vdCBhYmxlIHRvIHJldHVybiBpdDsgYnV0IEFsZXhhbmRlciB3aWxsIHJlcXVpdGUgdGhlZSBmb3IgdGh5IGdvb2Qgb2ZmaWNlcywgYW5kIHRoZSBnb2RzIHdpbGwgcmV3YXJkIEFsZXhhbmRlciBmb3IgaGlzIGtpbmRuZXNzIHRvIG15IG1vdGhlciwgd2lmZSwgYW5kIGNoaWxkcmVuOyB0byBoaW0sIHRocm91Z2ggdGhlZSwgSSBnaXZlIHRoaXMgcmlnaHQgaGFuZC48L3E+IFdpdGggdGhlc2Ugd29yZHMgaGUgdG9vayB0aGUgaGFuZCBvZiBQb2x5c3RyYXR1cyBhbmQgdGhlbiBleHBpcmVkLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlc2UgZGV0YWlscyBvZiB0aGUgZGVhdGggb2YgRGFyZWl1cyBhcmUgbm90IHRvIGJlIGZvdW5kIGluIEFycmlhbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMjEuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGlpaS4gMjEgZmluLjwvYmlibD4pLCBidXQgaW4gQ3VydGl1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkN1cnQuIDUuMTMuMjgiPnYuIDEzLCAyODwvYmlibD4pIGFuZCBEaW9kb3J1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE3LjczLjEiIHZhbGlkPSJ5ZXMiPnh2aWkuIDczPC9iaWJsPikuPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEFsZXhhbmRlciBjYW1lIHVwLCBoZSB3YXMgbWFuaWZlc3RseSBkaXN0cmVzc2VkIGJ5IHdoYXQgaGFkIGhhcHBlbmVkLCBhbmQgdW5mYXN0ZW5pbmcgaGlzIG93biBjbG9hayB0aHJldyBpdCB1cG9uIHRoZSBib2R5IGFuZCBjb3ZlcmVkIGl0LiBBbmQgd2hlbiwgYXQgYSBsYXRlciB0aW1lLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNwcmluZyBvZiAzMjkgQi5DLiBDZi4gQXJyaWFuLCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4zMC41Ij4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFuYWIuPC90aXRsZT4gaWlpLiAzMCwgNTwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA0LjcuMy4iPml2LiA3LCAzIGZmPC9iaWJsPi48L25vdGU+IGhlIGZvdW5kIEJlc3N1cywgaGUgaGFkIGhpbSByZW50IGFzdW5kZXIuIFR3byBzdHJhaWdodCB0cmVlcyB3ZXJlIGJlbnQgdG9nZXRoZXIgYW5kIGEgcGFydCBvZiBoaXMgYm9keSBmYXN0ZW5lZCB0byBlYWNoOyB0aGVuIHdoZW4gZWFjaCB3YXMgcmVsZWFzZWQgYW5kIHNwcmFuZyB2aWdvcm91c2x5IGJhY2ssIHRoZSBwYXJ0IG9mIHRoZSBib2R5IHRoYXQgd2FzIGF0dGFjaGVkIHRvIGl0IGZvbGxvd2VkIGFmdGVyLiBOb3csIGhvd2V2ZXIsIGhlIHNlbnQgdGhlIGJvZHkgb2YgRGFyZWl1cywgbGFpZCBvdXQgaW4gcm95YWwgc3RhdGUsIHRvIGhpcyBtb3RoZXIsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VG8gUGVyc2Vwb2xpcywgd2l0aCBvcmRlcnMgdGhhdCBpdCBzaG91bGQgYmUgYnVyaWVkIGluIHRoZSByb3lhbCBzZXB1bGNocmU8L3E+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4yMi4xIj5BcnJpYW4sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGlpaS4gMjIsIDE8L2JpYmw+KS48L25vdGU+IGFuZCBhZG1pdHRlZCBoaXMgYnJvdGhlciwgRXhhdGhyZXMsIGludG8gdGhlIG51bWJlciBvZiBoaXMgY29tcGFuaW9ucy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['43.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHRoZW4sIGFsbCB3ZXJlIGFsaWtlIHJlYWR5IGFuZCB3aWxsaW5nOyBidXQgb25seSBzaXh0eSwgdGhleSBzYXksIHdlcmUgd2l0aCBBbGV4YW5kZXIgd2hlbiBoZSBidXJzdCBpbnRvIHRoZSBjYW1wIG9mIHRoZSBlbmVteS4gVGhlcmUsIGluZGVlZCwgdGhleSByb2RlIG92ZXIgbXVjaCBnb2xkIGFuZCBzaWx2ZXIgdGhhdCB3YXMgdGhyb3duIGF3YXksIHBhc3NlZCBieSBtYW55IHdhZ2dvbnMgZnVsbCBvZiB3b21lbiBhbmQgY2hpbGRyZW4gd2hpY2ggd2VyZSBjb3Vyc2luZyBoaXRoZXIgYW5kIHRoaXRoZXIgd2l0aG91dCB0aGVpciBkcml2ZXJzLCBhbmQgcHVyc3VlZCB0aG9zZSB3aG8gd2VyZSBmb3JlbW9zdCBpbiBmbGlnaHQsIHRoaW5raW5nIHRoYXQgRGFyZWl1cyB3YXMgYW1vbmcgdGhlbS4gQnV0IGF0IGxhc3QgdGhleSBmb3VuZCBoaW0gbHlpbmcgaW4gYSB3YWdnb24sIGhpcyBib2R5IGFsbCBmdWxsIG9mIGphdmVsaW5zLCBhdCB0aGUgcG9pbnQgb2YgZGVhdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgaGUgYXNrZWQgZm9yIHNvbWV0aGluZyB0byBkcmluaywgYW5kIHdoZW4gaGUgaGFkIGRydW5rIHNvbWUgY29sZCB3YXRlciB3aGljaCBQb2x5c3RyYXR1cyBnYXZlIGhpbSwgaGUgc2FpZCB0byBoaW06IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgbWFuLCB0aGlzIGlzIHRoZSBleHRyZW1pdHkgb2YgYWxsIG15IGlsbC1mb3J0dW5lLCB0aGF0IEkgcmVjZWl2ZSBnb29kIGF0IHRoeSBoYW5kcyBhbmQgYW0gbm90IGFibGUgdG8gcmV0dXJuIGl0OyBidXQgQWxleGFuZGVyIHdpbGwgcmVxdWl0ZSB0aGVlIGZvciB0aHkgZ29vZCBvZmZpY2VzLCBhbmQgdGhlIGdvZHMgd2lsbCByZXdhcmQgQWxleGFuZGVyIGZvciBoaXMga2luZG5lc3MgdG8gbXkgbW90aGVyLCB3aWZlLCBhbmQgY2hpbGRyZW47IHRvIGhpbSwgdGhyb3VnaCB0aGVlLCBJIGdpdmUgdGhpcyByaWdodCBoYW5kLjwvcT4gV2l0aCB0aGVzZSB3b3JkcyBoZSB0b29rIHRoZSBoYW5kIG9mIFBvbHlzdHJhdHVzIGFuZCB0aGVuIGV4cGlyZWQuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXNlIGRldGFpbHMgb2YgdGhlIGRlYXRoIG9mIERhcmVpdXMgYXJlIG5vdCB0byBiZSBmb3VuZCBpbiBBcnJpYW4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMjEuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAyMSBmaW4uPC9iaWJsPiksIGJ1dCBpbiBDdXJ0aXVzICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDdXJ0LiA1LjEzLjI4Ij52LiAxMywgMjg8L2JpYmw+KSBhbmQgRGlvZG9ydXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE3LjczLjEiIHZhbGlkPSJ5ZXMiPnh2aWkuIDczPC9iaWJsPikuPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMjEuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAyMSBmaW4uPC9iaWJsPiksIGJ1dCBpbiBDdXJ0aXVzICg8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpaS4gMjEgZmluLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkN1cnQuIDUuMTMuMjgiPnYuIDEzLCAyODwvYmlibD4pIGFuZCBEaW9kb3J1cyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTcuNzMuMSIgdmFsaWQ9InllcyI+eHZpaS4gNzM8L2JpYmw+KS48L3RyYW5zbGF0aW9uPg=="
translation['43.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQWxleGFuZGVyIGNhbWUgdXAsIGhlIHdhcyBtYW5pZmVzdGx5IGRpc3RyZXNzZWQgYnkgd2hhdCBoYWQgaGFwcGVuZWQsIGFuZCB1bmZhc3RlbmluZyBoaXMgb3duIGNsb2FrIHRocmV3IGl0IHVwb24gdGhlIGJvZHkgYW5kIGNvdmVyZWQgaXQuIEFuZCB3aGVuLCBhdCBhIGxhdGVyIHRpbWUsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBzcHJpbmcgb2YgMzI5IEIuQy4gQ2YuIEFycmlhbiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4zMC41Ij4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkuIDMwLCA1PC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNC43LjMuIj5pdi4gNywgMyBmZjwvYmlibD4uPC9ub3RlPiBoZSBmb3VuZCBCZXNzdXMsIGhlIGhhZCBoaW0gcmVudCBhc3VuZGVyLiBUd28gc3RyYWlnaHQgdHJlZXMgd2VyZSBiZW50IHRvZ2V0aGVyIGFuZCBhIHBhcnQgb2YgaGlzIGJvZHkgZmFzdGVuZWQgdG8gZWFjaDsgdGhlbiB3aGVuIGVhY2ggd2FzIHJlbGVhc2VkIGFuZCBzcHJhbmcgdmlnb3JvdXNseSBiYWNrLCB0aGUgcGFydCBvZiB0aGUgYm9keSB0aGF0IHdhcyBhdHRhY2hlZCB0byBpdCBmb2xsb3dlZCBhZnRlci4gTm93LCBob3dldmVyLCBoZSBzZW50IHRoZSBib2R5IG9mIERhcmVpdXMsIGxhaWQgb3V0IGluIHJveWFsIHN0YXRlLCB0byBoaXMgbW90aGVyLAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4zMC41Ij4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkuIDMwLCA1PC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaWkuIDMwLCA1PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNC43LjMuIj5pdi4gNywgMyBmZjwvYmlibD4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UbyBQZXJzZXBvbGlzLCB3aXRoIG9yZGVycyB0aGF0IGl0IHNob3VsZCBiZSBidXJpZWQgaW4gdGhlIHJveWFsIHNlcHVsY2hyZTwvcT4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDMuMjIuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpaS4gMjIsIDE8L2JpYmw+KS48L25vdGU+IGFuZCBhZG1pdHRlZCBoaXMgYnJvdGhlciwgRXhhdGhyZXMsIGludG8gdGhlIG51bWJlciBvZiBoaXMgY29tcGFuaW9ucy48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRvIFBlcnNlcG9saXMsIHdpdGggb3JkZXJzIHRoYXQgaXQgc2hvdWxkIGJlIGJ1cmllZCBpbiB0aGUgcm95YWwgc2VwdWxjaHJlPC9xPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4yMi4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAyMiwgMTwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAyMiwgMTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYgaG93ZXZlciwgd2l0aCB0aGUgZmxvd2VyIG9mIGhpcyBhcm15LCBtYXJjaGVkIG9uIGludG8gSHlyY2FuaWEuIEhlcmUgaGUgc2F3IGEgZ3VsZiBvZiB0aGUgb3BlbiBzZWEgd2hpY2ggYXBwZWFyZWQgdG8gYmUgYXMgbGFyZ2UgYXMgdGhlIEV1eGluZSwgYnV0IHdhcyBzd2VldGVyIHRoYW4gdGhlIE1lZGl0ZXJyYW5lYW4uIEhlIGNvdWxkIGdldCBubyBjbGVhciBpbmZvcm1hdGlvbiBhYm91dCBpdCwgYnV0IGNvbmplY3R1cmVkIHRoYXQgaW4gYWxsIHByb2JhYmlsaXR5IGl0IHdhcyBhIHN0YWduYW50IG92ZXJmbG93IGZyb20gdGhlIFBhbHVzIE1hZW90aXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgbmF0dXJhbGlzdHMgd2VyZSB3ZWxsIGF3YXJlIG9mIHRoZSB0cnV0aCwgYW5kIG1hbnkgeWVhcnMgYmVmb3JlIEFsZXhhbmRlcidzIGV4cGVkaXRpb24gdGhleSBoYWQgc2V0IGZvcnRoIHRoYXQgdGhpcyB3YXMgdGhlIG1vc3Qgbm9ydGhlcmx5IG9mIGZvdXIgZ3VsZnMgd2hpY2ggc3RyZXRjaCBpbmxhbmQgZnJvbSB0aGUgb3V0ZXIgc2VhLCBhbmQgd2FzIGNhbGxlZCBpbmRpZmZlcmVudGx5IHRoZSBIeXJjYW5pYW4gb3IgQ2FzcGlhbiBTZWEuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGltc2VsZiBob3dldmVyLCB3aXRoIHRoZSBmbG93ZXIgb2YgaGlzIGFybXksIG1hcmNoZWQgb24gaW50byBIeXJjYW5pYS4gSGVyZSBoZSBzYXcgYSBndWxmIG9mIHRoZSBvcGVuIHNlYSB3aGljaCBhcHBlYXJlZCB0byBiZSBhcyBsYXJnZSBhcyB0aGUgRXV4aW5lLCBidXQgd2FzIHN3ZWV0ZXIgdGhhbiB0aGUgTWVkaXRlcnJhbmVhbi4gSGUgY291bGQgZ2V0IG5vIGNsZWFyIGluZm9ybWF0aW9uIGFib3V0IGl0LCBidXQgY29uamVjdHVyZWQgdGhhdCBpbiBhbGwgcHJvYmFiaWxpdHkgaXQgd2FzIGEgc3RhZ25hbnQgb3ZlcmZsb3cgZnJvbSB0aGUgUGFsdXMgTWFlb3Rpcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['44.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgbmF0dXJhbGlzdHMgd2VyZSB3ZWxsIGF3YXJlIG9mIHRoZSB0cnV0aCwgYW5kIG1hbnkgeWVhcnMgYmVmb3JlIEFsZXhhbmRlcidzIGV4cGVkaXRpb24gdGhleSBoYWQgc2V0IGZvcnRoIHRoYXQgdGhpcyB3YXMgdGhlIG1vc3Qgbm9ydGhlcmx5IG9mIGZvdXIgZ3VsZnMgd2hpY2ggc3RyZXRjaCBpbmxhbmQgZnJvbSB0aGUgb3V0ZXIgc2VhLCBhbmQgd2FzIGNhbGxlZCBpbmRpZmZlcmVudGx5IHRoZSBIeXJjYW5pYW4gb3IgQ2FzcGlhbiBTZWEuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5IZXJlIHNvbWUgQmFyYmFyaWFucyB1bmV4cGVjdGVkbHkgZmVsbCBpbiB3aXRoIHRob3NlIHdobyB3ZXJlIGxlYWRpbmcgQWxleGFuZGVyJ3MgaG9yc2UsIEJ1Y2VwaGFsYXMsIGFuZCBjYXB0dXJlZCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWxleGFuZGVyIHdhcyBhbmdyeSBiZXlvbmQgbWVhc3VyZSwgYW5kIHNlbnQgYSBoZXJhbGQgdGhyZWF0ZW5pbmcgdG8gcHV0IHRoZW0gYWxsIHRvIHRoZSBzd29yZCwgdG9nZXRoZXIgd2l0aCB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4sIGlmIHRoZXkgZGlkIG5vdCBzZW5kIGhpbSBiYWNrIGhpcyBob3JzZS4gQnV0IHdoZW4gdGhleSBjYW1lIHdpdGggdGhlIGhvcnNlIGFuZCBhbHNvIHB1dCB0aGVpciBjaXRpZXMgaW50byBoaXMgaGFuZHMsIGhlIHRyZWF0ZWQgdGhlbSBhbGwga2luZGx5LCBhbmQgZ2F2ZSBhIHJhbnNvbSBmb3IgaGlzIGhvcnNlIHRvIHRob3NlIHdobyBoYWQgY2FwdHVyZWQgaGltLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['44.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFsZXhhbmRlciB3YXMgYW5ncnkgYmV5b25kIG1lYXN1cmUsIGFuZCBzZW50IGEgaGVyYWxkIHRocmVhdGVuaW5nIHRvIHB1dCB0aGVtIGFsbCB0byB0aGUgc3dvcmQsIHRvZ2V0aGVyIHdpdGggdGhlaXIgd2l2ZXMgYW5kIGNoaWxkcmVuLCBpZiB0aGV5IGRpZCBub3Qgc2VuZCBoaW0gYmFjayBoaXMgaG9yc2UuIEJ1dCB3aGVuIHRoZXkgY2FtZSB3aXRoIHRoZSBob3JzZSBhbmQgYWxzbyBwdXQgdGhlaXIgY2l0aWVzIGludG8gaGlzIGhhbmRzLCBoZSB0cmVhdGVkIHRoZW0gYWxsIGtpbmRseSwgYW5kIGdhdmUgYSByYW5zb20gZm9yIGhpcyBob3JzZSB0byB0aG9zZSB3aG8gaGFkIGNhcHR1cmVkIGhpbS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIHRoZW5jZSBoZSBtYXJjaGVkIGludG8gUGFydGhpYSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBlYXJseSBhdXR1bW4gb2YgMzMwIEIuQy48L25vdGU+IHdoZXJlLCBkdXJpbmcgYSByZXNwaXRlIGZyb20gZmlnaHRpbmcsIGhlIGZpcnN0IHB1dCBvbiB0aGUgYmFyYmFyaWMgZHJlc3MsIGVpdGhlciBmcm9tIGEgZGVzaXJlIHRvIGFkYXB0IGhpbXNlbGYgdG8gdGhlIG5hdGl2ZSBjdXN0b21zLCBiZWxpZXZpbmcgdGhhdCBjb21tdW5pdHkgb2YgcmFjZSBhbmQgY3VzdG9tIGdvZXMgZmFyIHRvd2FyZHMgc29mdGVuaW5nIHRoZSBoZWFydHMgb2YgbWVuOyBvciBlbHNlIHRoaXMgd2FzIGFuIGF0dGVtcHQgdG8gaW50cm9kdWNlIHRoZSBvYmVpc2FuY2UKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlByb3N0cmF0aW9uIG9uIHRoZSBncm91bmQgYmVmb3JlIGEgZ3JlYXQgcGVyc29uYWdlLCBhIHBlY3VsaWFybHkgUGVyc2lhbiBjdXN0b20uPC9ub3RlPiBhbW9uZyB0aGUgTWFjZWRvbmlhbnMsIGJ5IGFjY3VzdG9taW5nIHRoZW0gbGl0dGxlIGJ5IGxpdHRsZSB0byBwdXQgdXAgd2l0aCBjaGFuZ2VzIGFuZCBhbHRlcmF0aW9ucyBpbiBoaXMgbW9kZSBvZiBsaWZlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSBkaWQgbm90IGFkb3B0IHRoZSBmYW1vdXMgTWVkaWFuIGZhc2hpb24gb2YgZHJlc3MsIHdoaWNoIHdhcyBhbHRvZ2V0aGVyIGJhcmJhcmljIGFuZCBzdHJhbmdlLCBub3IgZGlkIGhlIGFzc3VtZSB0cm91c2Vycywgb3Igc2xlZXZlZCB2ZXN0LCBvciB0aWFyYSwgYnV0IGNhcmVmdWxseSBkZXZpc2VkIGEgZmFzaGlvbiB3aGljaCB3YXMgbWlkd2F5IGJldHdlZW4gdGhlIFBlcnNpYW4gYW5kIHRoZSBNZWRpYW4sIG1vcmUgbW9kZXN0IHRoYW4gdGhlIG9uZSBhbmQgbW9yZSBzdGF0ZWx5IHRoYW4gdGhlIG90aGVyLiBBdCBmaXJzdCBoZSB3b3JlIHRoaXMgb25seSBpbiBpbnRlcmNvdXJzZSB3aXRoIHRoZSBCYXJiYXJpYW5zIGFuZCB3aXRoIGhpcyBjb21wYW5pb25zIGF0IGhvbWUsIHRoZW4gcGVvcGxlIGdlbmVyYWxseSBzYXcgaGltIHJpZGluZyBmb3J0aCBvciBnaXZpbmcgYXVkaWVuY2UgaW4gdGhpcyBhdHRpcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzaWdodCB3YXMgb2ZmZW5zaXZlIHRvIHRoZSBNYWNlZG9uaWFucywgYnV0IHRoZXkgYWRtaXJlZCBoaXMgb3RoZXIgaGlnaCBxdWFsaXRpZXMgYW5kIHRob3VnaHQgdGhleSBvdWdodCB0byB5aWVsZCB0byBoaW0gaW4gc29tZSB0aGluZ3Mgd2hpY2ggbWFkZSBmb3IgaGlzIHBsZWFzdXJlIG9yIGhpcyBmYW1lLiBGb3IsIGluIGFkZGl0aW9uIHRvIGFsbCBoaXMgb3RoZXIgaGFyZHNoaXBzLCBoZSBoYWQgcmVjZW50bHkgYmVlbiBzaG90IGJ5IGFuIGFycm93IGluIHRoZSBsZWcgYmVsb3cgdGhlIGtuZWUsIHNvIHRoYXQgc3BsaW50ZXJzIG9mIHRoZSBsYXJnZXIgYm9uZSBjYW1lIG91dDsgYW5kIGF0IGFub3RoZXIgdGltZSBoZSB3YXMgc21pdHRlbiBpbiB0aGUgbmVjayB3aXRoIGEgc3RvbmUgc28gc2V2ZXJlbHkgdGhhdCBoaXMgZXllLXNpZ2h0IHdhcyBjbG91ZGVkIGFuZCByZW1haW5lZCBzbyBmb3Igc29tZSB0aW1lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5OZXZlcnRoZWxlc3MsIGhlIGRpZCBub3QgY2Vhc2UgZXhwb3NpbmcgaGltc2VsZiB0byBkYW5nZXJzIHdpdGhvdXQgc3RpbnQsIG5heSwgaGUgYWN0dWFsbHkgY3Jvc3NlZCB0aGUgcml2ZXIgT3JleGFydGVzICh3aGljaCBoZSBoaW1zZWxmIHN1cHBvc2VkIHRvIGJlIHRoZSBUYW5hw69zKSwgcHV0IHRoZSBTY3l0aGlhbnMgdG8gcm91dCwgYW5kIHB1cnN1ZWQgdGhlbSBmb3IgYSBodW5kcmVkIGZ1cmxvbmdzLCBhbHRob3VnaCBoZSB3YXMgc3VmZmVyaW5nIGFsbCB0aGUgd2hpbGUgZnJvbSBkaWFycmhvZWEuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['45.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGVuY2UgaGUgbWFyY2hlZCBpbnRvIFBhcnRoaWEsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBlYXJseSBhdXR1bW4gb2YgMzMwIEIuQy48L25vdGU+IHdoZXJlLCBkdXJpbmcgYSByZXNwaXRlIGZyb20gZmlnaHRpbmcsIGhlIGZpcnN0IHB1dCBvbiB0aGUgYmFyYmFyaWMgZHJlc3MsIGVpdGhlciBmcm9tIGEgZGVzaXJlIHRvIGFkYXB0IGhpbXNlbGYgdG8gdGhlIG5hdGl2ZSBjdXN0b21zLCBiZWxpZXZpbmcgdGhhdCBjb21tdW5pdHkgb2YgcmFjZSBhbmQgY3VzdG9tIGdvZXMgZmFyIHRvd2FyZHMgc29mdGVuaW5nIHRoZSBoZWFydHMgb2YgbWVuOyBvciBlbHNlIHRoaXMgd2FzIGFuIGF0dGVtcHQgdG8gaW50cm9kdWNlIHRoZSBvYmVpc2FuY2UKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHJvc3RyYXRpb24gb24gdGhlIGdyb3VuZCBiZWZvcmUgYSBncmVhdCBwZXJzb25hZ2UsIGEgcGVjdWxpYXJseSBQZXJzaWFuIGN1c3RvbS48L25vdGU+IGFtb25nIHRoZSBNYWNlZG9uaWFucywgYnkgYWNjdXN0b21pbmcgdGhlbSBsaXR0bGUgYnkgbGl0dGxlIHRvIHB1dCB1cCB3aXRoIGNoYW5nZXMgYW5kIGFsdGVyYXRpb25zIGluIGhpcyBtb2RlIG9mIGxpZmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['45.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIGRpZCBub3QgYWRvcHQgdGhlIGZhbW91cyBNZWRpYW4gZmFzaGlvbiBvZiBkcmVzcywgd2hpY2ggd2FzIGFsdG9nZXRoZXIgYmFyYmFyaWMgYW5kIHN0cmFuZ2UsIG5vciBkaWQgaGUgYXNzdW1lIHRyb3VzZXJzLCBvciBzbGVldmVkIHZlc3QsIG9yIHRpYXJhLCBidXQgY2FyZWZ1bGx5IGRldmlzZWQgYSBmYXNoaW9uIHdoaWNoIHdhcyBtaWR3YXkgYmV0d2VlbiB0aGUgUGVyc2lhbiBhbmQgdGhlIE1lZGlhbiwgbW9yZSBtb2Rlc3QgdGhhbiB0aGUgb25lIGFuZCBtb3JlIHN0YXRlbHkgdGhhbiB0aGUgb3RoZXIuIEF0IGZpcnN0IGhlIHdvcmUgdGhpcyBvbmx5IGluIGludGVyY291cnNlIHdpdGggdGhlIEJhcmJhcmlhbnMgYW5kIHdpdGggaGlzIGNvbXBhbmlvbnMgYXQgaG9tZSwgdGhlbiBwZW9wbGUgZ2VuZXJhbGx5IHNhdyBoaW0gcmlkaW5nIGZvcnRoIG9yIGdpdmluZyBhdWRpZW5jZSBpbiB0aGlzIGF0dGlyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['45.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzaWdodCB3YXMgb2ZmZW5zaXZlIHRvIHRoZSBNYWNlZG9uaWFucywgYnV0IHRoZXkgYWRtaXJlZCBoaXMgb3RoZXIgaGlnaCBxdWFsaXRpZXMgYW5kIHRob3VnaHQgdGhleSBvdWdodCB0byB5aWVsZCB0byBoaW0gaW4gc29tZSB0aGluZ3Mgd2hpY2ggbWFkZSBmb3IgaGlzIHBsZWFzdXJlIG9yIGhpcyBmYW1lLiBGb3IsIGluIGFkZGl0aW9uIHRvIGFsbCBoaXMgb3RoZXIgaGFyZHNoaXBzLCBoZSBoYWQgcmVjZW50bHkgYmVlbiBzaG90IGJ5IGFuIGFycm93IGluIHRoZSBsZWcgYmVsb3cgdGhlIGtuZWUsIHNvIHRoYXQgc3BsaW50ZXJzIG9mIHRoZSBsYXJnZXIgYm9uZSBjYW1lIG91dDsgYW5kIGF0IGFub3RoZXIgdGltZSBoZSB3YXMgc21pdHRlbiBpbiB0aGUgbmVjayB3aXRoIGEgc3RvbmUgc28gc2V2ZXJlbHkgdGhhdCBoaXMgZXllLXNpZ2h0IHdhcyBjbG91ZGVkIGFuZCByZW1haW5lZCBzbyBmb3Igc29tZSB0aW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['45.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgaGUgZGlkIG5vdCBjZWFzZSBleHBvc2luZyBoaW1zZWxmIHRvIGRhbmdlcnMgd2l0aG91dCBzdGludCwgbmF5LCBoZSBhY3R1YWxseSBjcm9zc2VkIHRoZSByaXZlciBPcmV4YXJ0ZXMgKHdoaWNoIGhlIGhpbXNlbGYgc3VwcG9zZWQgdG8gYmUgdGhlIFRhbmHDr3MpLCBwdXQgdGhlIFNjeXRoaWFucyB0byByb3V0LCBhbmQgcHVyc3VlZCB0aGVtIGZvciBhIGh1bmRyZWQgZnVybG9uZ3MsIGFsdGhvdWdoIGhlIHdhcyBzdWZmZXJpbmcgYWxsIHRoZSB3aGlsZSBmcm9tIGRpYXJyaG9lYS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIHRoZSBxdWVlbiBvZiB0aGUgQW1hem9ucyBjYW1lIHRvIHNlZSBoaW0sIGFzIG1vc3Qgd3JpdGVycyBzYXksIGFtb25nIHdob20gYXJlIENsZWl0YXJjaHVzLCBQb2x5Y2xlaXR1cywgT25lc2ljcml0dXMsIEFudGlnZW5lcywgYW5kIElzdGVyOyBidXQgQXJpc3RvYnVsdXMsIENoYXJlcyB0aGUgcm95YWwgdXNoZXIsIFB0b2xlbXksIEFudGljbGVpZGVzLCBQaGlsbyB0aGUgVGhlYmFuLCBhbmQgUGhpbGlwIG9mIFRoZWFuZ2VsYSwgYmVzaWRlcyBIZWNhdGFldXMgb2YgRXJldHJpYSwgUGhpbGlwIHRoZSBDaGFsY2lkaWFuLCBhbmQgRHVyaXMgb2YgU2Ftb3MsIHNheSB0aGF0IHRoaXMgaXMgYSBmaWN0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgd291bGQgc2VlbSB0aGF0IEFsZXhhbmRlcidzIHRlc3RpbW9ueSBpcyBpbiBmYXZvdXIgb2YgdGhlaXIgc3RhdGVtZW50LiBGb3IgaW4gYSBsZXR0ZXIgdG8gQW50aXBhdGVyIHdoaWNoIGdpdmVzIGFsbCB0aGUgZGV0YWlscyBtaW51dGVseSBoZSBzYXlzIHRoYXQgdGhlIFNjeXRoaWFuIGtpbmcgb2ZmZXJlZCBoaW0gaGlzIGRhdWdodGVyIGluIG1hcnJpYWdlLCBidXQgaGUgbWFrZXMgbm8gbWVudGlvbiBvZiB0aGUgQW1hem9uLiBBbmQgdGhlIHN0b3J5IGlzIHRvbGQgdGhhdCBtYW55IHllYXJzIGFmdGVyd2FyZHMgT25lc2ljcml0dXMgd2FzIHJlYWRpbmcgYWxvdWQgdG8gTHlzaW1hY2h1cywgd2hvIHdhcyBub3cga2luZywgdGhlIGZvdXJ0aCBib29rIG9mIGhpcyBoaXN0b3J5LCBpbiB3aGljaCB3YXMgdGhlIHRhbGUgb2YgdGhlIEFtYXpvbiwgYXQgd2hpY2ggTHlzaW1hY2h1cyBzbWlsZWQgZ2VudGx5IGFuZCBzYWlkOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgd2hlcmUgd2FzIEkgYXQgdGhlIHRpbWU/PC9xPiBIb3dldmVyLCBvdXIsIGJlbGllZiBvciBkaXNiZWxpZWYgb2YgdGhpcyBzdG9yeSB3aWxsIG5laXRoZXIgaW5jcmVhc2Ugbm9yIGRpbWluaXNoIG91ciBhZG1pcmF0aW9uIGZvciBBbGV4YW5kZXIuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['46.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSB0aGUgcXVlZW4gb2YgdGhlIEFtYXpvbnMgY2FtZSB0byBzZWUgaGltLCBhcyBtb3N0IHdyaXRlcnMgc2F5LCBhbW9uZyB3aG9tIGFyZSBDbGVpdGFyY2h1cywgUG9seWNsZWl0dXMsIE9uZXNpY3JpdHVzLCBBbnRpZ2VuZXMsIGFuZCBJc3RlcjsgYnV0IEFyaXN0b2J1bHVzLCBDaGFyZXMgdGhlIHJveWFsIHVzaGVyLCBQdG9sZW15LCBBbnRpY2xlaWRlcywgUGhpbG8gdGhlIFRoZWJhbiwgYW5kIFBoaWxpcCBvZiBUaGVhbmdlbGEsIGJlc2lkZXMgSGVjYXRhZXVzIG9mIEVyZXRyaWEsIFBoaWxpcCB0aGUgQ2hhbGNpZGlhbiwgYW5kIER1cmlzIG9mIFNhbW9zLCBzYXkgdGhhdCB0aGlzIGlzIGEgZmljdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['46.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3b3VsZCBzZWVtIHRoYXQgQWxleGFuZGVyJ3MgdGVzdGltb255IGlzIGluIGZhdm91ciBvZiB0aGVpciBzdGF0ZW1lbnQuIEZvciBpbiBhIGxldHRlciB0byBBbnRpcGF0ZXIgd2hpY2ggZ2l2ZXMgYWxsIHRoZSBkZXRhaWxzIG1pbnV0ZWx5IGhlIHNheXMgdGhhdCB0aGUgU2N5dGhpYW4ga2luZyBvZmZlcmVkIGhpbSBoaXMgZGF1Z2h0ZXIgaW4gbWFycmlhZ2UsIGJ1dCBoZSBtYWtlcyBubyBtZW50aW9uIG9mIHRoZSBBbWF6b24uIEFuZCB0aGUgc3RvcnkgaXMgdG9sZCB0aGF0IG1hbnkgeWVhcnMgYWZ0ZXJ3YXJkcyBPbmVzaWNyaXR1cyB3YXMgcmVhZGluZyBhbG91ZCB0byBMeXNpbWFjaHVzLCB3aG8gd2FzIG5vdyBraW5nLCB0aGUgZm91cnRoIGJvb2sgb2YgaGlzIGhpc3RvcnksIGluIHdoaWNoIHdhcyB0aGUgdGFsZSBvZiB0aGUgQW1hem9uLCBhdCB3aGljaCBMeXNpbWFjaHVzIHNtaWxlZCBnZW50bHkgYW5kIHNhaWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHdoZXJlIHdhcyBJIGF0IHRoZSB0aW1lPzwvcT4gSG93ZXZlciwgb3VyLCBiZWxpZWYgb3IgZGlzYmVsaWVmIG9mIHRoaXMgc3Rvcnkgd2lsbCBuZWl0aGVyIGluY3JlYXNlIG5vciBkaW1pbmlzaCBvdXIgYWRtaXJhdGlvbiBmb3IgQWxleGFuZGVyLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZlYXJpbmcgdGhhdCBoaXMgTWFjZWRvbmlhbnMgbWlnaHQgdGlyZSBvZiB0aGUgcmVzdCBvZiBoaXMgZXhwZWRpdGlvbiwgaGUgbGVmdCB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZW0gaW4gcXVhcnRlcnMsIGFuZCB3aGlsZSBoZSBoYWQgdGhlIGJlc3Qgb2YgdGhlbSB3aXRoIGhpbSBpbiBIeXJjYW5pYSwgdHdlbnR5IHRob3VzYW5kIGZvb3QgYW5kIHRocmVlIHRob3VzYW5kIGhvcnNlLCBoZSBhZGRyZXNzZWQgdGhlbSwgc2F5aW5nIHRoYXQgYXQgcHJlc2VudCB0aGV5IHdlcmUgc2VlbiBieSB0aGUgQmFyYmFyaWFucyBhcyBpbiBhIGRyZWFtLCBidXQgdGhhdCBpZiB0aGV5IHNob3VsZCBtZXJlbHkgdGhyb3cgQXNpYSBpbnRvIGNvbmZ1c2lvbiBhbmQgdGhlbiBsZWF2ZSBpdCB0aGV5IHdvdWxkIGJlIGF0dGFja2VkIGJ5IHRoZW0gYXMgaWYgdGhleSB3ZXJlIHdvbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSBzYWlkLCBoZSBhbGxvd2VkIHRob3NlIHdobyB3aXNoZWQgaXQgdG8gZ28gYXdheSwgY2FsbGluZyB0aGVtIHRvIHdpdG5lc3MgdGhhdCB3aGlsZSBoZSB3YXMgd2lubmluZyB0aGUgaW5oYWJpdGVkIHdvcmxkIGZvciB0aGUgTWFjZWRvbmlhbnMgaGUgaGFkIGJlZW4gbGVmdCBiZWhpbmQgd2l0aCBoaXMgZnJpZW5kcyBhbmQgdGhvc2Ugd2hvIHdlcmUgd2lsbGluZyB0byBjb250aW51ZSB0aGUgZXhwZWRpdGlvbi4gVGhpcyBpcyBhbG1vc3Qgd29yZCBmb3Igd29yZCB3aGF0IGhlIHdyb3RlIGluIGhpcyBsZXR0ZXIgdG8gQW50aXBhdGVyLCBhbmQgaGUgYWRkcyB0aGF0IGFmdGVyIGhlIGhhZCB0aHVzIHNwb2tlbiBhbGwgaGlzIGhlYXJlcnMgY3JpZWQgb3V0IHRvIGhpbSB0byBsZWFkIHRoZW0gdG8gd2hhdGV2ZXIgcGFydCBvZiB0aGUgd29ybGQgaGUgd2lzaGVkLiBBZnRlciB0aGVzZSBoYWQgbWV0IGhpcyB0ZXN0IG9mIHRoZWlyIGxveWFsdHksIGl0IHdhcyBubyBsb25nZXIgYSBoYXJkIG1hdHRlciBmb3IgdGhlIG1haW4gYm9keSB0byBiZSBsZWQgYWxvbmcgdG9vLCBuYXksIHRoZXkgcmVhZGlseSBmb2xsb3dlZCBhZnRlci48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RmVhcmluZyB0aGF0IGhpcyBNYWNlZG9uaWFucyBtaWdodCB0aXJlIG9mIHRoZSByZXN0IG9mIGhpcyBleHBlZGl0aW9uLCBoZSBsZWZ0IHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlbSBpbiBxdWFydGVycywgYW5kIHdoaWxlIGhlIGhhZCB0aGUgYmVzdCBvZiB0aGVtIHdpdGggaGltIGluIEh5cmNhbmlhLCB0d2VudHkgdGhvdXNhbmQgZm9vdCBhbmQgdGhyZWUgdGhvdXNhbmQgaG9yc2UsIGhlIGFkZHJlc3NlZCB0aGVtLCBzYXlpbmcgdGhhdCBhdCBwcmVzZW50IHRoZXkgd2VyZSBzZWVuIGJ5IHRoZSBCYXJiYXJpYW5zIGFzIGluIGEgZHJlYW0sIGJ1dCB0aGF0IGlmIHRoZXkgc2hvdWxkIG1lcmVseSB0aHJvdyBBc2lhIGludG8gY29uZnVzaW9uIGFuZCB0aGVuIGxlYXZlIGl0IHRoZXkgd291bGQgYmUgYXR0YWNrZWQgYnkgdGhlbSBhcyBpZiB0aGV5IHdlcmUgd29tZW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['47.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIHNhaWQsIGhlIGFsbG93ZWQgdGhvc2Ugd2hvIHdpc2hlZCBpdCB0byBnbyBhd2F5LCBjYWxsaW5nIHRoZW0gdG8gd2l0bmVzcyB0aGF0IHdoaWxlIGhlIHdhcyB3aW5uaW5nIHRoZSBpbmhhYml0ZWQgd29ybGQgZm9yIHRoZSBNYWNlZG9uaWFucyBoZSBoYWQgYmVlbiBsZWZ0IGJlaGluZCB3aXRoIGhpcyBmcmllbmRzIGFuZCB0aG9zZSB3aG8gd2VyZSB3aWxsaW5nIHRvIGNvbnRpbnVlIHRoZSBleHBlZGl0aW9uLiBUaGlzIGlzIGFsbW9zdCB3b3JkIGZvciB3b3JkIHdoYXQgaGUgd3JvdGUgaW4gaGlzIGxldHRlciB0byBBbnRpcGF0ZXIsIGFuZCBoZSBhZGRzIHRoYXQgYWZ0ZXIgaGUgaGFkIHRodXMgc3Bva2VuIGFsbCBoaXMgaGVhcmVycyBjcmllZCBvdXQgdG8gaGltIHRvIGxlYWQgdGhlbSB0byB3aGF0ZXZlciBwYXJ0IG9mIHRoZSB3b3JsZCBoZSB3aXNoZWQuIEFmdGVyIHRoZXNlIGhhZCBtZXQgaGlzIHRlc3Qgb2YgdGhlaXIgbG95YWx0eSwgaXQgd2FzIG5vIGxvbmdlciBhIGhhcmQgbWF0dGVyIGZvciB0aGUgbWFpbiBib2R5IHRvIGJlIGxlZCBhbG9uZyB0b28sIG5heSwgdGhleSByZWFkaWx5IGZvbGxvd2VkIGFmdGVyLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlVuZGVyIHRoZXNlIGNpcmN1bXN0YW5jZXMsIHRvbywgaGUgYWRhcHRlZCBoaXMgb3duIG1vZGUgb2YgbGlmZSBzdGlsbCBtb3JlIHRvIHRoZSBjdXN0b21zIG9mIHRoZSBjb3VudHJ5LCBhbmQgdHJpZWQgdG8gYnJpbmcgdGhlc2UgaW50byBjbG9zZXIgYWdyZWVtZW50IHdpdGggTWFjZWRvbmlhbiBjdXN0b21zLCB0aGlua2luZyB0aGF0IGJ5IGEgbWl4dHVyZSBhbmQgY29tbXVuaXR5IG9mIHByYWN0aWNlIHdoaWNoIHByb2R1Y2VkIGdvb2Qgd2lsbCwgcmF0aGVyIHRoYW4gYnkgZm9yY2UsIGhpcyBhdXRob3JpdHkgd291bGQgYmUga2VwdCBzZWN1cmUgd2hpbGUgaGUgd2FzIGZhciBhd2F5LiBGb3IgdGhpcyByZWFzb24sIHRvbywgaGUgY2hvc2Ugb3V0IHRoaXJ0eSB0aG91c2FuZCBib3lzIGFuZCBnYXZlIG9yZGVycyB0aGF0IHRoZXkgc2hvdWxkIGxlYXJuIHRoZSBHcmVlayBsYW5ndWFnZSBhbmQgYmUgdHJhaW5lZCB0byB1c2UgTWFjZWRvbmlhbiB3ZWFwb25zLCBhcHBvaW50aW5nIG1hbnkgaW5zdHJ1Y3RvcnMgZm9yIHRoaXMgd29yay4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIG1hcnJpYWdlIHRvIFJveGFuYSwgd2hvbSBoZSBzYXcgaW4gaGVyIHlvdXRoZnVsIGJlYXV0eSB0YWtpbmcgcGFydCBpbiBhIGRhbmNlIGF0IGEgYmFucXVldCwgd2FzIGEgbG92ZSBhZmZhaXIsIGFuZCB5ZXQgaXQgd2FzIHRob3VnaHQgdG8gaGFybW9uaXplIHdlbGwgd2l0aCB0aGUgbWF0dGVycyB3aGljaCBoZSBoYWQgaW4gaGFuZC4gRm9yIHRoZSBCYXJiYXJpYW5zIHdlcmUgZW5jb3VyYWdlZCBieSB0aGUgcGFydG5lcnNoaXAgaW50byB3aGljaCB0aGUgbWFycmlhZ2UgYnJvdWdodCB0aGVtLCBhbmQgdGhleSB3ZXJlIGJleW9uZCBtZWFzdXJlIGZvbmQgb2YgQWxleGFuZGVyLCBiZWNhdXNlLCBtb3N0IHRlbXBlcmF0ZSBvZiBhbGwgbWVuIHRoYXQgaGUgd2FzIGluIHRoZXNlIG1hdHRlcnMsIGhlIHdvdWxkIG5vdCBjb25zZW50IHRvIGFwcHJvYWNoIGV2ZW4gdGhlIG9ubHkgd29tYW4gd2hvIGV2ZXIgbWFzdGVyZWQgaGlzIGFmZmVjdGlvbnMsIHdpdGhvdXQgdGhlIHNhbmN0aW9uIG9mIGxhdy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlVuZGVyIHRoZXNlIGNpcmN1bXN0YW5jZXMsIHRvbywgaGUgYWRhcHRlZCBoaXMgb3duIG1vZGUgb2YgbGlmZSBzdGlsbCBtb3JlIHRvIHRoZSBjdXN0b21zIG9mIHRoZSBjb3VudHJ5LCBhbmQgdHJpZWQgdG8gYnJpbmcgdGhlc2UgaW50byBjbG9zZXIgYWdyZWVtZW50IHdpdGggTWFjZWRvbmlhbiBjdXN0b21zLCB0aGlua2luZyB0aGF0IGJ5IGEgbWl4dHVyZSBhbmQgY29tbXVuaXR5IG9mIHByYWN0aWNlIHdoaWNoIHByb2R1Y2VkIGdvb2Qgd2lsbCwgcmF0aGVyIHRoYW4gYnkgZm9yY2UsIGhpcyBhdXRob3JpdHkgd291bGQgYmUga2VwdCBzZWN1cmUgd2hpbGUgaGUgd2FzIGZhciBhd2F5LiBGb3IgdGhpcyByZWFzb24sIHRvbywgaGUgY2hvc2Ugb3V0IHRoaXJ0eSB0aG91c2FuZCBib3lzIGFuZCBnYXZlIG9yZGVycyB0aGF0IHRoZXkgc2hvdWxkIGxlYXJuIHRoZSBHcmVlayBsYW5ndWFnZSBhbmQgYmUgdHJhaW5lZCB0byB1c2UgTWFjZWRvbmlhbiB3ZWFwb25zLCBhcHBvaW50aW5nIG1hbnkgaW5zdHJ1Y3RvcnMgZm9yIHRoaXMgd29yay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['47.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBtYXJyaWFnZSB0byBSb3hhbmEsIHdob20gaGUgc2F3IGluIGhlciB5b3V0aGZ1bCBiZWF1dHkgdGFraW5nIHBhcnQgaW4gYSBkYW5jZSBhdCBhIGJhbnF1ZXQsIHdhcyBhIGxvdmUgYWZmYWlyLCBhbmQgeWV0IGl0IHdhcyB0aG91Z2h0IHRvIGhhcm1vbml6ZSB3ZWxsIHdpdGggdGhlIG1hdHRlcnMgd2hpY2ggaGUgaGFkIGluIGhhbmQuIEZvciB0aGUgQmFyYmFyaWFucyB3ZXJlIGVuY291cmFnZWQgYnkgdGhlIHBhcnRuZXJzaGlwIGludG8gd2hpY2ggdGhlIG1hcnJpYWdlIGJyb3VnaHQgdGhlbSwgYW5kIHRoZXkgd2VyZSBiZXlvbmQgbWVhc3VyZSBmb25kIG9mIEFsZXhhbmRlciwgYmVjYXVzZSwgbW9zdCB0ZW1wZXJhdGUgb2YgYWxsIG1lbiB0aGF0IGhlIHdhcyBpbiB0aGVzZSBtYXR0ZXJzLCBoZSB3b3VsZCBub3QgY29uc2VudCB0byBhcHByb2FjaCBldmVuIHRoZSBvbmx5IHdvbWFuIHdobyBldmVyIG1hc3RlcmVkIGhpcyBhZmZlY3Rpb25zLCB3aXRob3V0IHRoZSBzYW5jdGlvbiBvZiBsYXcuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdoZW4gaGUgc2F3IHRoYXQgYW1vbmcgaGlzIGNoaWVmZXN0IGZyaWVuZHMgSGVwaGFlc3Rpb24gYXBwcm92ZWQgaGlzIGNvdXJzZSBhbmQgam9pbmVkIGhpbSBpbiBjaGFuZ2luZyBoaXMgbW9kZSBvZiBsaWZlLCB3aGlsZSBDcmF0ZXJ1cyBjbHVuZyBmYXN0IHRvIGhpcyBuYXRpdmUgd2F5cywgaGUgZW1wbG95ZWQgdGhlIGZvcm1lciBpbiBoaXMgYnVzaW5lc3Mgd2l0aCB0aGUgQmFyYmFyaWFucywgdGhlIGxhdHRlciBpbiB0aGF0IHdpdGggdGhlIEdyZWVrcyBhbmQgTWFjZWRvbmlhbnMuIEFuZCBpbiBnZW5lcmFsIGhlIHNob3dlZCBtb3N0IGFmZmVjdGlvbiBmb3IgSGVwaGFlc3Rpb24sIGJ1dCBtb3N0IGVzdGVlbSBmb3IgQ3JhdGVydXMsIHRoaW5raW5nLCBhbmQgY29uc3RhbnRseSBzYXlpbmcsIHRoYXQgSGVwaGFlc3Rpb24gd2FzIGEgZnJpZW5kIG9mIEFsZXhhbmRlciwgYnV0IENyYXRlcnVzIGEgZnJpZW5kIG9mIHRoZSBraW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyByZWFzb24sIHRvbywgdGhlIG1lbiBjaGVyaXNoZWQgYSBzZWNyZXQgZ3J1ZGdlIGFnYWluc3Qgb25lIGFub3RoZXIgYW5kIG9mdGVuIGNhbWUgaW50byBvcGVuIGNvbGxpc2lvbi4gQW5kIG9uY2UsIG9uIHRoZSBJbmRpYW4gZXhwZWRpdGlvbiwgdGhleSBhY3R1YWxseSBkcmV3IHRoZWlyIHN3b3JkcyBhbmQgY2xvc2VkIHdpdGggb25lIGFub3RoZXIsIGFuZCBhcyB0aGUgZnJpZW5kcyBvZiBlYWNoIHdlcmUgY29taW5nIHRvIGhpcyBhaWQsIEFsZXhhbmRlciByb2RlIHVwIGFuZCBhYnVzZWQgSGVwaGFlc3Rpb24gcHVibGljbHksIGNhbGxpbmcgaGltIGEgZm9vbCBhbmQgYSBtYWRtYW4gZm9yIG5vdCBrbm93aW5nIHRoYXQgd2l0aG91dCBBbGV4YW5kZXIncyBmYXZvdXIgaGUgd2FzIG5vdGhpbmc7IGFuZCBpbiBwcml2YXRlIGhlIGFsc28gc2hhcnBseSByZXByb3ZlZCBDcmF0ZXJ1cy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSBicm91Z2h0IHRoZW0gdG9nZXRoZXIgYW5kIHJlY29uY2lsZWQgdGhlbSwgdGFraW5nIGFuIG9hdGggYnkgQW1tb24gYW5kIHRoZSByZXN0IG9mIHRoZSBnb2RzIHRoYXQgaGUgbG92ZWQgdGhlbSBtb3N0IG9mIGFsbCBtZW47IGJ1dCB0aGF0IGlmIGhlIGhlYXJkIG9mIHRoZWlyIHF1YXJyZWxsaW5nIGFnYWluLCBoZSB3b3VsZCBraWxsIHRoZW0gYm90aCwgb3IgYXQgbGVhc3QgdGhlIG9uZSB3aG8gYmVnYW4gdGhlIHF1YXJyZWwuIFdoZXJlZm9yZSBhZnRlciB0aGlzIHRoZXkgbmVpdGhlciBkaWQgbm9yIHNhaWQgYW55dGhpbmcgdG8gaGFybSBvbmUgYW5vdGhlciwgbm90IGV2ZW4gaW4gamVzdC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIGhlIHNhdyB0aGF0IGFtb25nIGhpcyBjaGllZmVzdCBmcmllbmRzIEhlcGhhZXN0aW9uIGFwcHJvdmVkIGhpcyBjb3Vyc2UgYW5kIGpvaW5lZCBoaW0gaW4gY2hhbmdpbmcgaGlzIG1vZGUgb2YgbGlmZSwgd2hpbGUgQ3JhdGVydXMgY2x1bmcgZmFzdCB0byBoaXMgbmF0aXZlIHdheXMsIGhlIGVtcGxveWVkIHRoZSBmb3JtZXIgaW4gaGlzIGJ1c2luZXNzIHdpdGggdGhlIEJhcmJhcmlhbnMsIHRoZSBsYXR0ZXIgaW4gdGhhdCB3aXRoIHRoZSBHcmVla3MgYW5kIE1hY2Vkb25pYW5zLiBBbmQgaW4gZ2VuZXJhbCBoZSBzaG93ZWQgbW9zdCBhZmZlY3Rpb24gZm9yIEhlcGhhZXN0aW9uLCBidXQgbW9zdCBlc3RlZW0gZm9yIENyYXRlcnVzLCB0aGlua2luZywgYW5kIGNvbnN0YW50bHkgc2F5aW5nLCB0aGF0IEhlcGhhZXN0aW9uIHdhcyBhIGZyaWVuZCBvZiBBbGV4YW5kZXIsIGJ1dCBDcmF0ZXJ1cyBhIGZyaWVuZCBvZiB0aGUga2luZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['47.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiwgdG9vLCB0aGUgbWVuIGNoZXJpc2hlZCBhIHNlY3JldCBncnVkZ2UgYWdhaW5zdCBvbmUgYW5vdGhlciBhbmQgb2Z0ZW4gY2FtZSBpbnRvIG9wZW4gY29sbGlzaW9uLiBBbmQgb25jZSwgb24gdGhlIEluZGlhbiBleHBlZGl0aW9uLCB0aGV5IGFjdHVhbGx5IGRyZXcgdGhlaXIgc3dvcmRzIGFuZCBjbG9zZWQgd2l0aCBvbmUgYW5vdGhlciwgYW5kIGFzIHRoZSBmcmllbmRzIG9mIGVhY2ggd2VyZSBjb21pbmcgdG8gaGlzIGFpZCwgQWxleGFuZGVyIHJvZGUgdXAgYW5kIGFidXNlZCBIZXBoYWVzdGlvbiBwdWJsaWNseSwgY2FsbGluZyBoaW0gYSBmb29sIGFuZCBhIG1hZG1hbiBmb3Igbm90IGtub3dpbmcgdGhhdCB3aXRob3V0IEFsZXhhbmRlcidzIGZhdm91ciBoZSB3YXMgbm90aGluZzsgYW5kIGluIHByaXZhdGUgaGUgYWxzbyBzaGFycGx5IHJlcHJvdmVkIENyYXRlcnVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['47.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgYnJvdWdodCB0aGVtIHRvZ2V0aGVyIGFuZCByZWNvbmNpbGVkIHRoZW0sIHRha2luZyBhbiBvYXRoIGJ5IEFtbW9uIGFuZCB0aGUgcmVzdCBvZiB0aGUgZ29kcyB0aGF0IGhlIGxvdmVkIHRoZW0gbW9zdCBvZiBhbGwgbWVuOyBidXQgdGhhdCBpZiBoZSBoZWFyZCBvZiB0aGVpciBxdWFycmVsbGluZyBhZ2FpbiwgaGUgd291bGQga2lsbCB0aGVtIGJvdGgsIG9yIGF0IGxlYXN0IHRoZSBvbmUgd2hvIGJlZ2FuIHRoZSBxdWFycmVsLiBXaGVyZWZvcmUgYWZ0ZXIgdGhpcyB0aGV5IG5laXRoZXIgZGlkIG5vciBzYWlkIGFueXRoaW5nIHRvIGhhcm0gb25lIGFub3RoZXIsIG5vdCBldmVuIGluIGplc3QuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBQaGlsb3RhcywgdGhlIHNvbiBvZiBQYXJtZW5pbywgaGFkIGEgaGlnaCBwb3NpdGlvbiBhbW9uZyB0aGUgTWFjZWRvbmlhbnM7IGZvciBoZSB3YXMgaGVsZCB0byBiZSB2YWxpYW50IGFuZCBhYmxlIHRvIGVuZHVyZSBoYXJkc2hpcCwgYW5kLCBhZnRlciBBbGV4YW5kZXIgaGltc2VsZiwgbm8gb25lIHdhcyBzbyBmb25kIG9mIGdpdmluZyBhbmQgc28gZm9uZCBvZiBoaXMgY29tcmFkZXMuIEF0IGFueSByYXRlLCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gb25lIG9mIGhpcyBpbnRpbWF0ZXMgYXNrZWQgaGltIGZvciBzb21lIG1vbmV5LCBoZSBvcmRlcmVkIGhpcyBzdGV3YXJkIHRvIGdpdmUgaXQgaGltLCBhbmQgd2hlbiB0aGUgc3Rld2FyZCBzYWlkIGhlIGhhZCBub25lIHRvIGdpdmUsIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgbWVhbmVzdCB0aG91PzwvcT4gY3JpZWQgUGhpbG90YXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aGFzdCB0aG91IG5vdCBldmVuIHBsYXRlIG9yIGNsb3RoaW5nPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSBkaXNwbGF5ZWQgYSBwcmlkZSBvZiBzcGlyaXQsIGFuIGFidW5kYW5jZSBvZiB3ZWFsdGgsIGFuZCBhIGNhcmUgb2YgdGhlIHBlcnNvbiBhbmQgbW9kZSBvZiBsaWZlIHdoaWNoIHdlcmUgdG9vIG9mZmVuc2l2ZSBmb3IgYSBwcml2YXRlIG1hbiwgYW5kIGF0IHRoaXMgdGltZSBwYXJ0aWN1bGFybHkgaGlzIGltaXRhdGlvbiBvZiBtYWplc3R5IGFuZCBsb2Z0aW5lc3Mgd2FzIG5vdCBzdWNjZXNzZnVsIGF0IGFsbCwgYnV0IGNsdW1zeSwgc3B1cmlvdXMsIGFuZCBkZXZvaWQgb2YgZ3JhY2UsIHNvIHRoYXQgaGUgaW5jdXJyZWQgc3VzcGljaW9uIGFuZCBlbnZ5LCBhbmQgZXZlbiBQYXJtZW5pbyBvbmNlIHNhaWQgdG8gaGltOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBzb24sIHByYXkgYmUgbGVzcyBvZiBhIHBlcnNvbmFnZS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGZvciBhIHZlcnkgbG9uZyB0aW1lIGFjY3VzYXRpb25zIGFnYWluc3QgaGltIGhhZCBiZWVuIGJyb3VnaHQgdG8gQWxleGFuZGVyIGhpbXNlbGYuIEZvciB3aGVuIERhcmVpdXMgaGFkIGJlZW4gZGVmZWF0ZWQgaW4gQ2lsaWNpYSBhbmQgdGhlIHdlYWx0aCBvZiBEYW1hc2N1cyB3YXMgdGFrZW4sIGFtb25nIHRoZSBtYW55IHByaXNvbmVycyBicm91Z2h0IGludG8gdGhlIGNhbXAgdGhlcmUgd2FzIGZvdW5kIGEgeW91bmcgd29tYW4sIGJvcm4gaW4gUHlkbmEsIGFuZCBjb21lbHkgdG8gbG9vayB1cG9uOyBoZXIgbmFtZSB3YXMgQW50aWdvbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd29tYW4gUGhpbG90YXMgZ290OyBhbmQgYXMgYSB5b3VuZyBtYW4gd2lsbCBvZnRlbiB0YWxrIGZyZWVseSBpbiB2YXVudGluZyBhbmQgbWFydGlhbCBzdHJhaW4gdG8gaGlzIG1pc3RyZXNzIGFuZCBpbiBoaXMgY3VwcywgaGUgdXNlZCB0byB0ZWxsIGhlciB0aGF0IHRoZSBncmVhdGVzdCBhY2hpZXZlbWVudHMgd2VyZSBwZXJmb3JtZWQgYnkgaGltc2VsZiBhbmQgaGlzIGZhdGhlciwgYW5kIHdvdWxkIGNhbGwgQWxleGFuZGVyIGEgc3RyaXBsaW5nIHdobyB0aHJvdWdoIHRoZWlyIGVmZm9ydHMgZW5qb3llZCB0aGUgdGl0bGUgb2YgcnVsZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdvcmRzIHRoZSB3b21hbiB3b3VsZCByZXBvcnQgdG8gb25lIG9mIGhlciBhY3F1YWludGFuY2VzLCBhbmQgaGUsIGFzIHdhcyBuYXR1cmFsLCB0byBzb21lYm9keSBlbHNlLCB1bnRpbCB0aGUgc3RvcnkgY2FtZSByb3VuZCB0byBDcmF0ZXJ1cywgd2hvIHRvb2sgdGhlIGdpcmwgYW5kIGJyb3VnaHQgaGVyIHNlY3JldGx5IHRvIEFsZXhhbmRlci4gSGUsIG9uIGhlYXJpbmcgaGVyIHN0b3J5LCBvcmRlcmVkIGhlciB0byBjb250aW51ZSBoZXIgbWVldGluZ3Mgd2l0aCBQaGlsb3RhcyBhbmQgdG8gY29tZSBhbmQgcmVwb3J0IHRvIGhpbSB3aGF0ZXZlciBzaGUgbGVhcm5lZCBmcm9tIGhlciBsb3Zlci48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['48.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBQaGlsb3RhcywgdGhlIHNvbiBvZiBQYXJtZW5pbywgaGFkIGEgaGlnaCBwb3NpdGlvbiBhbW9uZyB0aGUgTWFjZWRvbmlhbnM7IGZvciBoZSB3YXMgaGVsZCB0byBiZSB2YWxpYW50IGFuZCBhYmxlIHRvIGVuZHVyZSBoYXJkc2hpcCwgYW5kLCBhZnRlciBBbGV4YW5kZXIgaGltc2VsZiwgbm8gb25lIHdhcyBzbyBmb25kIG9mIGdpdmluZyBhbmQgc28gZm9uZCBvZiBoaXMgY29tcmFkZXMuIEF0IGFueSByYXRlLCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gb25lIG9mIGhpcyBpbnRpbWF0ZXMgYXNrZWQgaGltIGZvciBzb21lIG1vbmV5LCBoZSBvcmRlcmVkIGhpcyBzdGV3YXJkIHRvIGdpdmUgaXQgaGltLCBhbmQgd2hlbiB0aGUgc3Rld2FyZCBzYWlkIGhlIGhhZCBub25lIHRvIGdpdmUsIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBtZWFuZXN0IHRob3U/PC9xPiBjcmllZCBQaGlsb3RhcywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhhc3QgdGhvdSBub3QgZXZlbiBwbGF0ZSBvciBjbG90aGluZz88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIGRpc3BsYXllZCBhIHByaWRlIG9mIHNwaXJpdCwgYW4gYWJ1bmRhbmNlIG9mIHdlYWx0aCwgYW5kIGEgY2FyZSBvZiB0aGUgcGVyc29uIGFuZCBtb2RlIG9mIGxpZmUgd2hpY2ggd2VyZSB0b28gb2ZmZW5zaXZlIGZvciBhIHByaXZhdGUgbWFuLCBhbmQgYXQgdGhpcyB0aW1lIHBhcnRpY3VsYXJseSBoaXMgaW1pdGF0aW9uIG9mIG1hamVzdHkgYW5kIGxvZnRpbmVzcyB3YXMgbm90IHN1Y2Nlc3NmdWwgYXQgYWxsLCBidXQgY2x1bXN5LCBzcHVyaW91cywgYW5kIGRldm9pZCBvZiBncmFjZSwgc28gdGhhdCBoZSBpbmN1cnJlZCBzdXNwaWNpb24gYW5kIGVudnksIGFuZCBldmVuIFBhcm1lbmlvIG9uY2Ugc2FpZCB0byBoaW06IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgc29uLCBwcmF5IGJlIGxlc3Mgb2YgYSBwZXJzb25hZ2UuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBmb3IgYSB2ZXJ5IGxvbmcgdGltZSBhY2N1c2F0aW9ucyBhZ2FpbnN0IGhpbSBoYWQgYmVlbiBicm91Z2h0IHRvIEFsZXhhbmRlciBoaW1zZWxmLiBGb3Igd2hlbiBEYXJlaXVzIGhhZCBiZWVuIGRlZmVhdGVkIGluIENpbGljaWEgYW5kIHRoZSB3ZWFsdGggb2YgRGFtYXNjdXMgd2FzIHRha2VuLCBhbW9uZyB0aGUgbWFueSBwcmlzb25lcnMgYnJvdWdodCBpbnRvIHRoZSBjYW1wIHRoZXJlIHdhcyBmb3VuZCBhIHlvdW5nIHdvbWFuLCBib3JuIGluIFB5ZG5hLCBhbmQgY29tZWx5IHRvIGxvb2sgdXBvbjsgaGVyIG5hbWUgd2FzIEFudGlnb25lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['48.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd29tYW4gUGhpbG90YXMgZ290OyBhbmQgYXMgYSB5b3VuZyBtYW4gd2lsbCBvZnRlbiB0YWxrIGZyZWVseSBpbiB2YXVudGluZyBhbmQgbWFydGlhbCBzdHJhaW4gdG8gaGlzIG1pc3RyZXNzIGFuZCBpbiBoaXMgY3VwcywgaGUgdXNlZCB0byB0ZWxsIGhlciB0aGF0IHRoZSBncmVhdGVzdCBhY2hpZXZlbWVudHMgd2VyZSBwZXJmb3JtZWQgYnkgaGltc2VsZiBhbmQgaGlzIGZhdGhlciwgYW5kIHdvdWxkIGNhbGwgQWxleGFuZGVyIGEgc3RyaXBsaW5nIHdobyB0aHJvdWdoIHRoZWlyIGVmZm9ydHMgZW5qb3llZCB0aGUgdGl0bGUgb2YgcnVsZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['48.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdvcmRzIHRoZSB3b21hbiB3b3VsZCByZXBvcnQgdG8gb25lIG9mIGhlciBhY3F1YWludGFuY2VzLCBhbmQgaGUsIGFzIHdhcyBuYXR1cmFsLCB0byBzb21lYm9keSBlbHNlLCB1bnRpbCB0aGUgc3RvcnkgY2FtZSByb3VuZCB0byBDcmF0ZXJ1cywgd2hvIHRvb2sgdGhlIGdpcmwgYW5kIGJyb3VnaHQgaGVyIHNlY3JldGx5IHRvIEFsZXhhbmRlci4gSGUsIG9uIGhlYXJpbmcgaGVyIHN0b3J5LCBvcmRlcmVkIGhlciB0byBjb250aW51ZSBoZXIgbWVldGluZ3Mgd2l0aCBQaGlsb3RhcyBhbmQgdG8gY29tZSBhbmQgcmVwb3J0IHRvIGhpbSB3aGF0ZXZlciBzaGUgbGVhcm5lZCBmcm9tIGhlciBsb3Zlci48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIFBoaWxvdGFzIHdhcyBpZ25vcmFudCBvZiB0aGUgcGxvdCB0aHVzIGxhaWQgYWdhaW5zdCBoaW0sIGFuZCBpbiBoaXMgZnJlcXVlbnQgaW50ZXJ2aWV3cyB3aXRoIEFudGlnb25lIHdvdWxkIHV0dGVyIG1hbnkgYW5ncnkgYW5kIGJvYXN0ZnVsIHNwZWVjaGVzIGFuZCBtYW55IGltcHJvcGVyIHdvcmRzIGFnYWluc3QgdGhlIGtpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBbGV4YW5kZXIsIGFsdGhvdWdoIHN0cm9uZyB0ZXN0aW1vbnkgYWdhaW5zdCBQaGlsb3RhcyBjYW1lIHRvIGhpcyBlYXJzLCBlbmR1cmVkIGluIHNpbGVuY2UgYW5kIHJlc3RyYWluZWQgaGltc2VsZiBlaXRoZXIgYmVjYXVzZSBoZSBoYWQgY29uZmlkZW5jZSBpbiBQYXJtZW5pbydzIGdvb2Qgd2lsbCB0b3dhcmRzIGhpbSwgb3IgYmVjYXVzZSBoZSBmZWFyZWQgdGhlIHJlcHV0YXRpb24gYW5kIHBvd2VyIG9mIGZhdGhlciBhbmQgc29uLiBNZWFud2hpbGUsIGhvd2V2ZXIsIGEgTWFjZWRvbmlhbiBuYW1lZCBMaW1udXMsIGZyb20gQ2hhbGFlc3RyYSwgY29uc3BpcmVkIGFnYWluc3QgQWxleGFuZGVyJ3MgbGlmZSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBsYXRlIGF1dHVtbiBvZiAzMzAgQi5DLjwvbm90ZT4gYW5kIGludml0ZWQgTmljb21hY2h1cywgb25lIG9mIHRoZSB5b3VuZyBtZW4sIHdob3NlIGxvdmVyIGhlIHdhcywgdG8gdGFrZSBwYXJ0IHdpdGggaGltIGluIHRoZSB1bmRlcnRha2luZy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tmljb21hY2h1cyB3b3VsZCBub3QgYWNjZXB0IHRoZSBpbnZpdGF0aW9uLCBidXQgdG9sZCBoaXMgYnJvdGhlciBDZWJhbGludXMgb2YgdGhlIGF0dGVtcHQsIGFuZCBoZSwgZ29pbmcgdG8gUGhpbG90YXMsIG9yZGVyZWQgaGltIHRvIGNvbmR1Y3QgdGhlbSBpbnRvIHRoZSBwcmVzZW5jZSBvZiBBbGV4YW5kZXIsIG9uIHRoZSBncm91bmQgdGhhdCB0aGVyZSB3ZXJlIG1hdHRlcnMgb2YgZ3JlYXQgaW1wb3J0YW5jZSBhYm91dCB3aGljaCB0aGV5IG11c3Qgc2VlIGhpbS4gQnV0IFBoaWxvdGFzLCBmb3Igd2hhdGV2ZXIgcmVhc29uIChhbmQgdGhlIHJlYXNvbiBpcyBub3Qga25vd24pLCB3b3VsZCBub3QgY29uZHVjdCB0aGVtIGluLCBhbGxlZ2luZyB0aGF0IHRoZSBraW5nIHdhcyBlbmdhZ2VkIG9uIG90aGVyIG1hdHRlcnMgb2YgbW9yZSBpbXBvcnRhbmNlLiBBbmQgaGUgcmVmdXNlZCB0aGVpciByZXF1ZXN0IHR3aWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IG5vdyBiZWNhbWUgc3VzcGljaW91cyBvZiBQaGlsb3RhcyBhbmQgYXBwbGllZCB0byBzb21lb25lIGVsc2UsIGJ5IHdob20gdGhleSB3ZXJlIGJyb3VnaHQgYmVmb3JlIEFsZXhhbmRlci4gSW4gdGhlIGZpcnN0IHBsYWNlIHRoZXkgdG9sZCBoaW0gYWJvdXQgdGhlIHBsb3Qgb2YgTGltbnVzLCBhbmQgdGhlbiB0aHJldyBvdXQgdmVpbGVkIGluc2ludWF0aW9ucyBhZ2FpbnN0IFBoaWxvdGFzLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgaGFkIG5lZ2xlY3RlZCB0aGVpciBwZXRpdGlvbnMgb24gdHdvIG9jY2FzaW9ucy4gVGhpcyBncmVhdGx5IGluY2Vuc2VkIEFsZXhhbmRlcjsgYW5kIHdoZW4gaGUgZm91bmQgdGhhdCBMaW1udXMgaGFkIGRlZmVuZGVkIGhpbXNlbGYgYWdhaW5zdCBhcnJlc3QgYW5kIGhhZCB0aGVyZWZvcmUgYmVlbiBraWxsZWQgYnkgdGhlIG1hbiBzZW50IHRvIGZldGNoIGhpbSwgaGUgd2FzIHN0aWxsIG1vcmUgZGlzdHVyYmVkIGluIG1pbmQsIHRoaW5raW5nIHRoYXQgdGhlIHByb29mIG9mIHRoZSBwbG90IGhhZCBlc2NhcGVkIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNpbmNlIGhlIGZlbHQgYml0dGVyIHRvd2FyZHMgUGhpbG90YXMgaGUgZHJldyB0byBoaW1zZWxmIHRob3NlIHdobyBoYWQgbG9uZyBoYXRlZCB0aGUgbWFuLCBhbmQgdGhleSBub3cgc2FpZCBvcGVubHkgdGhhdCB0aGUga2luZyB0b29rIHRoaW5ncyB0b28gZWFzaWx5IHdoZW4gaGUgc3VwcG9zZWQgdGhhdCBMaW1udXMsIGEgbWFuIG9mIENoYWxhZXN0cmEsIGhhZCBzZXQgaGlzIGhhbmQgdG8gYSBkZWVkIG9mIHNvIGdyZWF0IGRhcmluZyBvbiBoaXMgb3duIGFjY291bnQ7IG5heSwgdGhleSBzYWlkLCBoZSB3YXMgb25seSBhbiBhc3Npc3RhbnQsIG9yIHJhdGhlciBhbiBpbnN0cnVtZW50IHNlbnQgZm9ydGggYnkgYSBoaWdoZXIgcG93ZXIsIGFuZCBlbnF1aXJ5IGludG8gdGhlIHBsb3Qgc2hvdWxkIGJlIG1hZGUgaW4gdGhvc2UgcXVhcnRlcnMgd2hlcmUgdGhlcmUgd2FzIG1vc3QgaW50ZXJlc3QgaW4gaGF2aW5nIGl0IGNvbmNlYWxlZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGtpbmcgaGFkIG9uY2UgZ2l2ZW4gZWFyIHRvIHN1Y2ggc3BlZWNoZXMgYW5kIHN1c3BpY2lvbnMsIHRoZSBlbmVtaWVzIG9mIFBoaWxvdGFzIGJyb3VnaHQgdXAgY291bnRsZXNzIGFjY3VzYXRpb25zIGFnYWluc3QgaGltLiBDb25zZXF1ZW50bHkgaGUgd2FzIGFycmVzdGVkIGFuZCBwdXQgdG8gdGhlIHF1ZXN0aW9uLCB0aGUgY29tcGFuaW9ucyBvZiB0aGUga2luZyBzdGFuZGluZyBieSBhdCB0aGUgdG9ydHVyZSwgd2hpbGUgQWxleGFuZGVyIGhpbXNlbGYgbGlzdGVuZWQgYmVoaW5kIGEgc3RyZXRjaCBvZiB0YXBlc3RyeS4gSGVyZSwgYXMgd2UgYXJlIHRvbGQsIG9uIGhlYXJpbmcgUGhpbG90YXMgYmVzZXQgSGVwaGFlc3Rpb24gd2l0aCBhYmplY3QgYW5kIHBpdGlmdWwgY3JpZXMgYW5kIHN1cHBsaWNhdGlvbnMsIGhlIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNvIGZhaW50LWhlYXJ0ZWQgYXMgdGhvdSBhcnQsIFBoaWxvdGFzLCBhbmQgc28gdW5tYW5seSwgY291bGRzdCB0aG91IGhhdmUgc2V0IGhhbmQgdG8gc28gZ3JlYXQgYW4gdW5kZXJ0YWtpbmc/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIFBoaWxvdGFzIGhhZCBiZWVuIHB1dCB0byBkZWF0aCwgQWxleGFuZGVyIHNlbnQgYXQgb25jZSBpbnRvIE1lZGlhIGFuZCBkaXNwYXRjaGVkIFBhcm1lbmlvIGFsc28sIGEgbWFuIHdob3NlIGFjaGlldmVtZW50cyB3aXRoIFBoaWxpcCBoYWQgYmVlbiBtYW55LCBhbmQgd2hvIHdhcyB0aGUgb25seSBvbmUgb2YgQWxleGFuZGVyJ3Mgb2xkZXIgZnJpZW5kcywgb3IgdGhlIHByaW5jaXBhbCBvbmUsIHRvIHVyZ2UgaGlzIGNyb3NzaW5nIGludG8gQXNpYSwgYW5kIHdobywgb2YgdGhlIHRocmVlIHNvbnMgdGhhdCB3ZXJlIGhpcywgaGFkIHNlZW4gdHdvIGtpbGxlZCBvbiB0aGUgZXhwZWRpdGlvbiBiZWZvcmUgdGhpcywgYW5kIHdhcyBub3cgcHV0IHRvIGRlYXRoIGFsb25nIHdpdGggdGhlIHRoaXJkLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAzLjI2LjEiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gaWlpLiAyNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['49.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBQaGlsb3RhcyB3YXMgaWdub3JhbnQgb2YgdGhlIHBsb3QgdGh1cyBsYWlkIGFnYWluc3QgaGltLCBhbmQgaW4gaGlzIGZyZXF1ZW50IGludGVydmlld3Mgd2l0aCBBbnRpZ29uZSB3b3VsZCB1dHRlciBtYW55IGFuZ3J5IGFuZCBib2FzdGZ1bCBzcGVlY2hlcyBhbmQgbWFueSBpbXByb3BlciB3b3JkcyBhZ2FpbnN0IHRoZSBraW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['49.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBbGV4YW5kZXIsIGFsdGhvdWdoIHN0cm9uZyB0ZXN0aW1vbnkgYWdhaW5zdCBQaGlsb3RhcyBjYW1lIHRvIGhpcyBlYXJzLCBlbmR1cmVkIGluIHNpbGVuY2UgYW5kIHJlc3RyYWluZWQgaGltc2VsZiBlaXRoZXIgYmVjYXVzZSBoZSBoYWQgY29uZmlkZW5jZSBpbiBQYXJtZW5pbydzIGdvb2Qgd2lsbCB0b3dhcmRzIGhpbSwgb3IgYmVjYXVzZSBoZSBmZWFyZWQgdGhlIHJlcHV0YXRpb24gYW5kIHBvd2VyIG9mIGZhdGhlciBhbmQgc29uLiBNZWFud2hpbGUsIGhvd2V2ZXIsIGEgTWFjZWRvbmlhbiBuYW1lZCBMaW1udXMsIGZyb20gQ2hhbGFlc3RyYSwgY29uc3BpcmVkIGFnYWluc3QgQWxleGFuZGVyJ3MgbGlmZSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIGxhdGUgYXV0dW1uIG9mIDMzMCBCLkMuPC9ub3RlPiBhbmQgaW52aXRlZCBOaWNvbWFjaHVzLCBvbmUgb2YgdGhlIHlvdW5nIG1lbiwgd2hvc2UgbG92ZXIgaGUgd2FzLCB0byB0YWtlIHBhcnQgd2l0aCBoaW0gaW4gdGhlIHVuZGVydGFraW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['49.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5pY29tYWNodXMgd291bGQgbm90IGFjY2VwdCB0aGUgaW52aXRhdGlvbiwgYnV0IHRvbGQgaGlzIGJyb3RoZXIgQ2ViYWxpbnVzIG9mIHRoZSBhdHRlbXB0LCBhbmQgaGUsIGdvaW5nIHRvIFBoaWxvdGFzLCBvcmRlcmVkIGhpbSB0byBjb25kdWN0IHRoZW0gaW50byB0aGUgcHJlc2VuY2Ugb2YgQWxleGFuZGVyLCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhlcmUgd2VyZSBtYXR0ZXJzIG9mIGdyZWF0IGltcG9ydGFuY2UgYWJvdXQgd2hpY2ggdGhleSBtdXN0IHNlZSBoaW0uIEJ1dCBQaGlsb3RhcywgZm9yIHdoYXRldmVyIHJlYXNvbiAoYW5kIHRoZSByZWFzb24gaXMgbm90IGtub3duKSwgd291bGQgbm90IGNvbmR1Y3QgdGhlbSBpbiwgYWxsZWdpbmcgdGhhdCB0aGUga2luZyB3YXMgZW5nYWdlZCBvbiBvdGhlciBtYXR0ZXJzIG9mIG1vcmUgaW1wb3J0YW5jZS4gQW5kIGhlIHJlZnVzZWQgdGhlaXIgcmVxdWVzdCB0d2ljZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['49.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgbm93IGJlY2FtZSBzdXNwaWNpb3VzIG9mIFBoaWxvdGFzIGFuZCBhcHBsaWVkIHRvIHNvbWVvbmUgZWxzZSwgYnkgd2hvbSB0aGV5IHdlcmUgYnJvdWdodCBiZWZvcmUgQWxleGFuZGVyLiBJbiB0aGUgZmlyc3QgcGxhY2UgdGhleSB0b2xkIGhpbSBhYm91dCB0aGUgcGxvdCBvZiBMaW1udXMsIGFuZCB0aGVuIHRocmV3IG91dCB2ZWlsZWQgaW5zaW51YXRpb25zIGFnYWluc3QgUGhpbG90YXMsIG9uIHRoZSBncm91bmQgdGhhdCBoZSBoYWQgbmVnbGVjdGVkIHRoZWlyIHBldGl0aW9ucyBvbiB0d28gb2NjYXNpb25zLiBUaGlzIGdyZWF0bHkgaW5jZW5zZWQgQWxleGFuZGVyOyBhbmQgd2hlbiBoZSBmb3VuZCB0aGF0IExpbW51cyBoYWQgZGVmZW5kZWQgaGltc2VsZiBhZ2FpbnN0IGFycmVzdCBhbmQgaGFkIHRoZXJlZm9yZSBiZWVuIGtpbGxlZCBieSB0aGUgbWFuIHNlbnQgdG8gZmV0Y2ggaGltLCBoZSB3YXMgc3RpbGwgbW9yZSBkaXN0dXJiZWQgaW4gbWluZCwgdGhpbmtpbmcgdGhhdCB0aGUgcHJvb2Ygb2YgdGhlIHBsb3QgaGFkIGVzY2FwZWQgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['49.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzaW5jZSBoZSBmZWx0IGJpdHRlciB0b3dhcmRzIFBoaWxvdGFzIGhlIGRyZXcgdG8gaGltc2VsZiB0aG9zZSB3aG8gaGFkIGxvbmcgaGF0ZWQgdGhlIG1hbiwgYW5kIHRoZXkgbm93IHNhaWQgb3Blbmx5IHRoYXQgdGhlIGtpbmcgdG9vayB0aGluZ3MgdG9vIGVhc2lseSB3aGVuIGhlIHN1cHBvc2VkIHRoYXQgTGltbnVzLCBhIG1hbiBvZiBDaGFsYWVzdHJhLCBoYWQgc2V0IGhpcyBoYW5kIHRvIGEgZGVlZCBvZiBzbyBncmVhdCBkYXJpbmcgb24gaGlzIG93biBhY2NvdW50OyBuYXksIHRoZXkgc2FpZCwgaGUgd2FzIG9ubHkgYW4gYXNzaXN0YW50LCBvciByYXRoZXIgYW4gaW5zdHJ1bWVudCBzZW50IGZvcnRoIGJ5IGEgaGlnaGVyIHBvd2VyLCBhbmQgZW5xdWlyeSBpbnRvIHRoZSBwbG90IHNob3VsZCBiZSBtYWRlIGluIHRob3NlIHF1YXJ0ZXJzIHdoZXJlIHRoZXJlIHdhcyBtb3N0IGludGVyZXN0IGluIGhhdmluZyBpdCBjb25jZWFsZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['49.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBraW5nIGhhZCBvbmNlIGdpdmVuIGVhciB0byBzdWNoIHNwZWVjaGVzIGFuZCBzdXNwaWNpb25zLCB0aGUgZW5lbWllcyBvZiBQaGlsb3RhcyBicm91Z2h0IHVwIGNvdW50bGVzcyBhY2N1c2F0aW9ucyBhZ2FpbnN0IGhpbS4gQ29uc2VxdWVudGx5IGhlIHdhcyBhcnJlc3RlZCBhbmQgcHV0IHRvIHRoZSBxdWVzdGlvbiwgdGhlIGNvbXBhbmlvbnMgb2YgdGhlIGtpbmcgc3RhbmRpbmcgYnkgYXQgdGhlIHRvcnR1cmUsIHdoaWxlIEFsZXhhbmRlciBoaW1zZWxmIGxpc3RlbmVkIGJlaGluZCBhIHN0cmV0Y2ggb2YgdGFwZXN0cnkuIEhlcmUsIGFzIHdlIGFyZSB0b2xkLCBvbiBoZWFyaW5nIFBoaWxvdGFzIGJlc2V0IEhlcGhhZXN0aW9uIHdpdGggYWJqZWN0IGFuZCBwaXRpZnVsIGNyaWVzIGFuZCBzdXBwbGljYXRpb25zLCBoZSBzYWlkOiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNvIGZhaW50LWhlYXJ0ZWQgYXMgdGhvdSBhcnQsIFBoaWxvdGFzLCBhbmQgc28gdW5tYW5seSwgY291bGRzdCB0aG91IGhhdmUgc2V0IGhhbmQgdG8gc28gZ3JlYXQgYW4gdW5kZXJ0YWtpbmc/PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['49.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIFBoaWxvdGFzIGhhZCBiZWVuIHB1dCB0byBkZWF0aCwgQWxleGFuZGVyIHNlbnQgYXQgb25jZSBpbnRvIE1lZGlhIGFuZCBkaXNwYXRjaGVkIFBhcm1lbmlvIGFsc28sIGEgbWFuIHdob3NlIGFjaGlldmVtZW50cyB3aXRoIFBoaWxpcCBoYWQgYmVlbiBtYW55LCBhbmQgd2hvIHdhcyB0aGUgb25seSBvbmUgb2YgQWxleGFuZGVyJ3Mgb2xkZXIgZnJpZW5kcywgb3IgdGhlIHByaW5jaXBhbCBvbmUsIHRvIHVyZ2UgaGlzIGNyb3NzaW5nIGludG8gQXNpYSwgYW5kIHdobywgb2YgdGhlIHRocmVlIHNvbnMgdGhhdCB3ZXJlIGhpcywgaGFkIHNlZW4gdHdvIGtpbGxlZCBvbiB0aGUgZXhwZWRpdGlvbiBiZWZvcmUgdGhpcywgYW5kIHdhcyBub3cgcHV0IHRvIGRlYXRoIGFsb25nIHdpdGggdGhlIHRoaXJkLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4yNi4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAyNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gMy4yNi4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAyNi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaWlpLiAyNi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBhY3Rpb25zIG1hZGUgQWxleGFuZGVyIGFuIG9iamVjdCBvZiBmZWFyIHRvIG1hbnkgb2YgaGlzIGZyaWVuZHMsIGFuZCBwYXJ0aWN1bGFybHkgdG8gQW50aXBhdGVyLCB3aG8gc2VudCBzZWNyZXRseSB0byB0aGUgQWV0b2xpYW5zIGFuZCBlbnRlcmVkIGludG8gYW4gYWxsaWFuY2Ugd2l0aCB0aGVtLiBGb3IgdGhlIEFldG9saWFucyBhbHNvIHdlcmUgaW4gZmVhciBvZiBBbGV4YW5kZXIsIGJlY2F1c2UgdGhleSBoYWQgZGVzdHJveWVkIHRoZSBjaXR5IG9mIHRoZSBPZW5pYWRhZSwgYW5kIGJlY2F1c2UgQWxleGFuZGVyLCBvbiBsZWFybmluZyBvZiBpdCwgaGFkIHNhaWQgdGhhdCBpdCB3b3VsZCBub3QgYmUgdGhlIHNvbnMgb2YgdGhlIE9lbmVhZGFlLCBidXQgaGUgaGltc2VsZiB3aG8gd291bGQgcHVuaXNoIHRoZSBBZXRvbGlhbnMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['49.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGFjdGlvbnMgbWFkZSBBbGV4YW5kZXIgYW4gb2JqZWN0IG9mIGZlYXIgdG8gbWFueSBvZiBoaXMgZnJpZW5kcywgYW5kIHBhcnRpY3VsYXJseSB0byBBbnRpcGF0ZXIsIHdobyBzZW50IHNlY3JldGx5IHRvIHRoZSBBZXRvbGlhbnMgYW5kIGVudGVyZWQgaW50byBhbiBhbGxpYW5jZSB3aXRoIHRoZW0uIEZvciB0aGUgQWV0b2xpYW5zIGFsc28gd2VyZSBpbiBmZWFyIG9mIEFsZXhhbmRlciwgYmVjYXVzZSB0aGV5IGhhZCBkZXN0cm95ZWQgdGhlIGNpdHkgb2YgdGhlIE9lbmlhZGFlLCBhbmQgYmVjYXVzZSBBbGV4YW5kZXIsIG9uIGxlYXJuaW5nIG9mIGl0LCBoYWQgc2FpZCB0aGF0IGl0IHdvdWxkIG5vdCBiZSB0aGUgc29ucyBvZiB0aGUgT2VuZWFkYWUsIGJ1dCBoZSBoaW1zZWxmIHdobyB3b3VsZCBwdW5pc2ggdGhlIEFldG9saWFucy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3QgbG9uZyBhZnRlcndhcmRzIGNhbWUgdGhlIGFmZmFpciBvZiBDbGVpdHVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RHVyaW5nIHRoZSBjYW1wYWlnbiBvZiAzMjggQi5DLiwgYXQgU2FtYXJrYW5kLCBpbiBTb2dkaWFuYS4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA0LjguMSI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiBpdi4gOCBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGljaCB0aG9zZSB3aG8gc2ltcGx5IGxlYXJuIHRoZSBpbW1lZGlhdGUgY2lyY3Vtc3RhbmNlcyB3aWxsIHRoaW5rIG1vcmUgc2F2YWdlIHRoYW4gdGhhdCBvZiBQaGlsb3RhczsgaWYgd2UgdGFrZSBpbnRvIGNvbnNpZGVyYXRpb24sIGhvd2V2ZXIsIGFsaWtlIHRoZSBjYXVzZSBhbmQgdGhlIHRpbWUsIHdlIGZpbmQgdGhhdCBpdCBkaWQgbm90IGhhcHBlbiBvZiBzZXQgcHVycG9zZSwgYnV0IHRocm91Z2ggc29tZSBtaXNmb3J0dW5lIG9mIHRoZSBraW5nLCB3aG9zZSBhbmdlciBhbmQgaW50b3hpY2F0aW9uIGZ1cm5pc2hlZCBvY2Nhc2lvbiBmb3IgdGhlIGV2aWwgZ2VuaXVzIG9mIENsZWl0dXMuIEl0IGhhcHBlbmVkIG9uIHRoaXMgd2lzZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSBwZW9wbGUgY2FtZSBicmluZ2luZyBHcmVlayBmcnVpdCB0byB0aGUga2luZyBmcm9tIHRoZSBzZWEtYm9hcmQuIEhlIGFkbWlyZWQgaXRzIHBlcmZlY3Rpb24gYW5kIGJlYXV0eSBhbmQgY2FsbGVkIENsZWl0dXMsIHdpc2hpbmcgdG8gc2hvdyBpdCB0byBoaW0gYW5kIHNoYXJlIGl0IHdpdGggaGltLiBJdCBjaGFuY2VkIHRoYXQgQ2xlaXR1cyB3YXMgc2FjcmlmaWNpbmcsIGJ1dCBoZSBnYXZlIHVwIHRoZSBzYWNyaWZpY2UgYW5kIGNhbWU7IGFuZCB0aHJlZSBvZiB0aGUgc2hlZXAgb24gd2hpY2ggbGliYXRpb25zIGhhZCBhbHJlYWR5IGJlZW4gcG91cmVkIGNhbWUgZm9sbG93aW5nIGFmdGVyIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUga2luZyBsZWFybmVkIG9mIHRoaXMgY2lyY3Vtc3RhbmNlLCBoZSBpbXBhcnRlZCBpdCB0byBoaXMgc29vdGhzYXllcnMsIEFyaXN0YW5kZXIgYW5kIENsZW9tYW50aXMgdGhlIExhY2VkYWVtb25pYW4uIFRoZW4sIG9uIHRoZWlyIHRlbGxpbmcgaGltIHRoYXQgdGhlIG9tZW4gd2FzIGJhZCwgaGUgb3JkZXJlZCB0aGVtIHRvIHNhY3JpZmljZSBpbiBhbGwgaGFzdGUgZm9yIHRoZSBzYWZldHkgb2YgQ2xlaXR1cy4gRm9yIGhlIGhpbXNlbGYsIHR3byBkYXlzIGJlZm9yZSB0aGlzLCBoYWQgc2VlbiBhIHN0cmFuZ2UgdmlzaW9uIGluIGhpcyBzbGVlcDsgaGUgdGhvdWdodCBoZSBzYXcgQ2xlaXR1cyBzaXR0aW5nIHdpdGggdGhlIHNvbnMgb2YgUGFybWVuaW8gaW4gYmxhY2sgcm9iZXMsIGFuZCBhbGwgd2VyZSBkZWFkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBDbGVpdHVzIGRpZCBub3QgZmluaXNoIGhpcyBzYWNyaWZpY2UsIGJ1dCBjYW1lIGF0IG9uY2UgdG8gdGhlIHN1cHBlciBvZiB0aGUga2luZywgd2hvIGhhZCBzYWNyaWZpY2VkIHRvIHRoZSBEaW9zY3VyaS4gQWZ0ZXIgYm9pc3Rlcm91cyBkcmlua2luZyB3YXMgdW5kZXIgd2F5LCB2ZXJzZXMgd2VyZSBzdW5nIHdoaWNoIGhhZCBiZWVuIGNvbXBvc2VkIGJ5IGEgY2VydGFpbiBQcmFuaWNodXMsIG9yLCBhcyBzb21lIHNheSwgUGllcmlvLCB0byBzaGFtZSBhbmQgcmlkaWN1bGUgdGhlIGdlbmVyYWxzIHdobyBoYWQgbGF0ZWx5IGJlZW4gZGVmZWF0ZWQgYnkgdGhlIEJhcmJhcmlhbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvbGRlciBndWVzdHMgd2VyZSBhbm5veWVkIGF0IHRoaXMgYW5kIHJhaWxlZCBhdCBib3RoIHRoZSBwb2V0IGFuZCB0aGUgc2luZ2VyLCBidXQgQWxleGFuZGVyIGFuZCB0aG9zZSBhYm91dCBoaW0gbGlzdGVuZWQgd2l0aCBkZWxpZ2h0IGFuZCBiYWRlIHRoZSBzaW5nZXIgZ28gb24uIFRoZW4gQ2xlaXR1cywgd2hvIHdhcyBhbHJlYWR5IGRydW5rIGFuZCBuYXR1cmFsbHkgb2YgYSBoYXJzaCB0ZW1wZXIgYW5kIHdpbGZ1bCwgd2FzIG1vcmUgdGhhbiBldmVyIHZleGVkLCBhbmQgaW5zaXN0ZWQgdGhhdCBpdCB3YXMgbm90IHdlbGwgZG9uZSwgd2hlbiBhbW9uZyBCYXJiYXJpYW5zIGFuZCBlbmVtaWVzLCB0byBpbnN1bHQgTWFjZWRvbmlhbnMgd2hvIHdlcmUgZmFyIGJldHRlciBtZW4gdGhhbiB0aG9zZSB3aG8gbGF1Z2hlZCBhdCB0aGVtLCBldmVuIHRob3VnaCB0aGV5IGhhZCBtZXQgd2l0aCBtaXNmb3J0dW5lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBBbGV4YW5kZXIgZGVjbGFyZWQgdGhhdCBDbGVpdHVzIHdhcyBwbGVhZGluZyBoaXMgb3duIGNhdXNlIHdoZW4gaGUgZ2F2ZSBjb3dhcmRpY2UgdGhlIG5hbWUgb2YgbWlzZm9ydHVuZSwgQ2xlaXR1cyBzcHJhbmcgdG8gaGlzIGZlZXQgYW5kIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IHdhcyB0aGlzIGNvd2FyZGljZSBvZiBtaW5lLCBob3dldmVyLCB0aGF0IHNhdmVkIHRoeSBsaWZlLCBnb2QtYm9ybiBhcyB0aG91IGFydCwgd2hlbiB0aG91IHdhc3QgYWxyZWFkeSB0dXJuaW5nIHRoeSBiYWNrIHVwb24gdGhlIHNwZWFyIG9mIFNwaXRocmlkYXRlczsKCQkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDE2LjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpLiA1PC9iaWJsPi48L25vdGU+IGFuZCBpdCBpcyBieSB0aGUgYmxvb2Qgb2YgTWFjZWRvbmlhbnMsIGFuZCBieSB0aGVzZSB3b3VuZHMsIHRoYXQgdGhvdSBhcnQgYmVjb21lIHNvIGdyZWF0IGFzIHRvIGRpc293biBQaGlsaXAgYW5kIG1ha2UgdGh5c2VsZiBzb24gdG8gQW1tb24uPC9xPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDI3LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXJzIHh4dmlpLjwvYmlibD4gZi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['50.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IGxvbmcgYWZ0ZXJ3YXJkcyBjYW1lIHRoZSBhZmZhaXIgb2YgQ2xlaXR1cywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RHVyaW5nIHRoZSBjYW1wYWlnbiBvZiAzMjggQi5DLiwgYXQgU2FtYXJrYW5kLCBpbiBTb2dkaWFuYS4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDQuOC4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaXYuIDggZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hpY2ggdGhvc2Ugd2hvIHNpbXBseSBsZWFybiB0aGUgaW1tZWRpYXRlIGNpcmN1bXN0YW5jZXMgd2lsbCB0aGluayBtb3JlIHNhdmFnZSB0aGFuIHRoYXQgb2YgUGhpbG90YXM7IGlmIHdlIHRha2UgaW50byBjb25zaWRlcmF0aW9uLCBob3dldmVyLCBhbGlrZSB0aGUgY2F1c2UgYW5kIHRoZSB0aW1lLCB3ZSBmaW5kIHRoYXQgaXQgZGlkIG5vdCBoYXBwZW4gb2Ygc2V0IHB1cnBvc2UsIGJ1dCB0aHJvdWdoIHNvbWUgbWlzZm9ydHVuZSBvZiB0aGUga2luZywgd2hvc2UgYW5nZXIgYW5kIGludG94aWNhdGlvbiBmdXJuaXNoZWQgb2NjYXNpb24gZm9yIHRoZSBldmlsIGdlbml1cyBvZiBDbGVpdHVzLiBJdCBoYXBwZW5lZCBvbiB0aGlzIHdpc2UuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNC44LjEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpdi4gOCBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpdi4gOCBmLjwvdHJhbnNsYXRpb24+"
translation['50.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgcGVvcGxlIGNhbWUgYnJpbmdpbmcgR3JlZWsgZnJ1aXQgdG8gdGhlIGtpbmcgZnJvbSB0aGUgc2VhLWJvYXJkLiBIZSBhZG1pcmVkIGl0cyBwZXJmZWN0aW9uIGFuZCBiZWF1dHkgYW5kIGNhbGxlZCBDbGVpdHVzLCB3aXNoaW5nIHRvIHNob3cgaXQgdG8gaGltIGFuZCBzaGFyZSBpdCB3aXRoIGhpbS4gSXQgY2hhbmNlZCB0aGF0IENsZWl0dXMgd2FzIHNhY3JpZmljaW5nLCBidXQgaGUgZ2F2ZSB1cCB0aGUgc2FjcmlmaWNlIGFuZCBjYW1lOyBhbmQgdGhyZWUgb2YgdGhlIHNoZWVwIG9uIHdoaWNoIGxpYmF0aW9ucyBoYWQgYWxyZWFkeSBiZWVuIHBvdXJlZCBjYW1lIGZvbGxvd2luZyBhZnRlciBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['50.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGtpbmcgbGVhcm5lZCBvZiB0aGlzIGNpcmN1bXN0YW5jZSwgaGUgaW1wYXJ0ZWQgaXQgdG8gaGlzIHNvb3Roc2F5ZXJzLCBBcmlzdGFuZGVyIGFuZCBDbGVvbWFudGlzIHRoZSBMYWNlZGFlbW9uaWFuLiBUaGVuLCBvbiB0aGVpciB0ZWxsaW5nIGhpbSB0aGF0IHRoZSBvbWVuIHdhcyBiYWQsIGhlIG9yZGVyZWQgdGhlbSB0byBzYWNyaWZpY2UgaW4gYWxsIGhhc3RlIGZvciB0aGUgc2FmZXR5IG9mIENsZWl0dXMuIEZvciBoZSBoaW1zZWxmLCB0d28gZGF5cyBiZWZvcmUgdGhpcywgaGFkIHNlZW4gYSBzdHJhbmdlIHZpc2lvbiBpbiBoaXMgc2xlZXA7IGhlIHRob3VnaHQgaGUgc2F3IENsZWl0dXMgc2l0dGluZyB3aXRoIHRoZSBzb25zIG9mIFBhcm1lbmlvIGluIGJsYWNrIHJvYmVzLCBhbmQgYWxsIHdlcmUgZGVhZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['50.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIENsZWl0dXMgZGlkIG5vdCBmaW5pc2ggaGlzIHNhY3JpZmljZSwgYnV0IGNhbWUgYXQgb25jZSB0byB0aGUgc3VwcGVyIG9mIHRoZSBraW5nLCB3aG8gaGFkIHNhY3JpZmljZWQgdG8gdGhlIERpb3NjdXJpLiBBZnRlciBib2lzdGVyb3VzIGRyaW5raW5nIHdhcyB1bmRlciB3YXksIHZlcnNlcyB3ZXJlIHN1bmcgd2hpY2ggaGFkIGJlZW4gY29tcG9zZWQgYnkgYSBjZXJ0YWluIFByYW5pY2h1cywgb3IsIGFzIHNvbWUgc2F5LCBQaWVyaW8sIHRvIHNoYW1lIGFuZCByaWRpY3VsZSB0aGUgZ2VuZXJhbHMgd2hvIGhhZCBsYXRlbHkgYmVlbiBkZWZlYXRlZCBieSB0aGUgQmFyYmFyaWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['50.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvbGRlciBndWVzdHMgd2VyZSBhbm5veWVkIGF0IHRoaXMgYW5kIHJhaWxlZCBhdCBib3RoIHRoZSBwb2V0IGFuZCB0aGUgc2luZ2VyLCBidXQgQWxleGFuZGVyIGFuZCB0aG9zZSBhYm91dCBoaW0gbGlzdGVuZWQgd2l0aCBkZWxpZ2h0IGFuZCBiYWRlIHRoZSBzaW5nZXIgZ28gb24uIFRoZW4gQ2xlaXR1cywgd2hvIHdhcyBhbHJlYWR5IGRydW5rIGFuZCBuYXR1cmFsbHkgb2YgYSBoYXJzaCB0ZW1wZXIgYW5kIHdpbGZ1bCwgd2FzIG1vcmUgdGhhbiBldmVyIHZleGVkLCBhbmQgaW5zaXN0ZWQgdGhhdCBpdCB3YXMgbm90IHdlbGwgZG9uZSwgd2hlbiBhbW9uZyBCYXJiYXJpYW5zIGFuZCBlbmVtaWVzLCB0byBpbnN1bHQgTWFjZWRvbmlhbnMgd2hvIHdlcmUgZmFyIGJldHRlciBtZW4gdGhhbiB0aG9zZSB3aG8gbGF1Z2hlZCBhdCB0aGVtLCBldmVuIHRob3VnaCB0aGV5IGhhZCBtZXQgd2l0aCBtaXNmb3J0dW5lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['50.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEFsZXhhbmRlciBkZWNsYXJlZCB0aGF0IENsZWl0dXMgd2FzIHBsZWFkaW5nIGhpcyBvd24gY2F1c2Ugd2hlbiBoZSBnYXZlIGNvd2FyZGljZSB0aGUgbmFtZSBvZiBtaXNmb3J0dW5lLCBDbGVpdHVzIHNwcmFuZyB0byBoaXMgZmVldCBhbmQgc2FpZDogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCB3YXMgdGhpcyBjb3dhcmRpY2Ugb2YgbWluZSwgaG93ZXZlciwgdGhhdCBzYXZlZCB0aHkgbGlmZSwgZ29kLWJvcm4gYXMgdGhvdSBhcnQsIHdoZW4gdGhvdSB3YXN0IGFscmVhZHkgdHVybmluZyB0aHkgYmFjayB1cG9uIHRoZSBzcGVhciBvZiBTcGl0aHJpZGF0ZXM7CgkJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gMTYuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmkuIDU8L2JpYmw+Ljwvbm90ZT4gYW5kIGl0IGlzIGJ5IHRoZSBibG9vZCBvZiBNYWNlZG9uaWFucywgYW5kIGJ5IHRoZXNlIHdvdW5kcywgdGhhdCB0aG91IGFydCBiZWNvbWUgc28gZ3JlYXQgYXMgdG8gZGlzb3duIFBoaWxpcCBhbmQgbWFrZSB0aHlzZWxmIHNvbiB0byBBbW1vbi48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDE2LjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpLiA1PC9iaWJsPi48L25vdGU+IGFuZCBpdCBpcyBieSB0aGUgYmxvb2Qgb2YgTWFjZWRvbmlhbnMsIGFuZCBieSB0aGVzZSB3b3VuZHMsIHRoYXQgdGhvdSBhcnQgYmVjb21lIHNvIGdyZWF0IGFzIHRvIGRpc293biBQaGlsaXAgYW5kIG1ha2UgdGh5c2VsZiBzb24gdG8gQW1tb24uPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gMTYuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmkuIDU8L2JpYmw+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDI3LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXJzIHh4dmlpLjwvYmlibD4gZi48L25vdGU+CiAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDI3LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXJzIHh4dmlpLjwvYmlibD4gZi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaG9yb3VnaGx5IGluY2Vuc2VkLCB0aGVuLCBBbGV4YW5kZXIgc2FpZDogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QmFzZSBmZWxsb3csIGRvc3QgdGhvdSB0aGluayB0byBzcGVhayB0aHVzIG9mIG1lIGF0IGFsbCB0aW1lcywgYW5kIHRvIHJhaXNlIGZhY3Rpb24gYW1vbmcgTWFjZWRvbmlhbnMsIHdpdGggaW1wdW5pdHk/PC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TmF5LDwvcT4gc2FpZCBDbGVpdHVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm5vdCBldmVuIG5vdyBkbyB3ZSBlbmpveSBpbXB1bml0eSwgc2luY2Ugc3VjaCBhcmUgdGhlIHJld2FyZHMgd2UgZ2V0IGZvciBvdXIgdG9pbHM7IGFuZCB3ZSBwcm9ub3VuY2UgdGhvc2UgaGFwcHkgd2hvIGFyZSBhbHJlYWR5IGRlYWQsIGFuZCBkaWQgbm90IGxpdmUgdG8gc2VlIHVzIE1hY2Vkb25pYW5zIHRocmFzaGVkIHdpdGggTWVkaWFuIHJvZHMsIG9yIGJlZ2dpbmcgUGVyc2lhbnMgaW4gb3JkZXIgdG8gZ2V0IGF1ZGllbmNlIHdpdGggb3VyIGtpbmcuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIHNwYWtlIENsZWl0dXMgaW4gYWxsIGJvbGRuZXNzLCBhbmQgdGhvc2UgYWJvdXQgQWxleGFuZGVyIHNwcmFuZyB1cCB0byBjb25mcm9udCBoaW0gYW5kIHJldmlsZWQgaGltLCB3aGlsZSB0aGUgZWxkZXIgbWVuIHRyaWVkIHRvIHF1ZWxsIHRoZSB0dW11bHQuIFRoZW4gQWxleGFuZGVyLCB0dXJuaW5nIHRvIFhlbm9kb2NodXMgb2YgQ2FyZGlhIGFuZCBBcnRlbWl1cyBvZiBDb2xvcGhvbiwgc2FpZDogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG8gbm90IHRoZSBHcmVla3MgYXBwZWFyIHRvIHlvdSB0byB3YWxrIGFib3V0IGFtb25nIE1hY2Vkb25pYW5zIGxpa2UgZGVtaS1nb2RzIGFtb25nIHdpbGQgYmVhc3RzID88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Q2xlaXR1cywgaG93ZXZlciwgd291bGQgbm90IHlpZWxkLCBidXQgY2FsbGVkIG9uIEFsZXhhbmRlciB0byBzcGVhayBvdXQgZnJlZWx5IHdoYXQgaGUgd2lzaGVkIHRvIHNheSwgb3IgZWxzZSBub3QgdG8gaW52aXRlIHRvIHN1cHBlciBtZW4gd2hvIHdlcmUgZnJlZSBhbmQgc3Bva2UgdGhlaXIgbWluZHMsIGJ1dCB0byBsaXZlIHdpdGggQmFyYmFyaWFucyBhbmQgc2xhdmVzLCB3aG8gd291bGQgZG8gb2JlaXNhbmNlIHRvIGhpcyB3aGl0ZSB0dW5pYyBhbmQgUGVyc2lhbiBnaXJkbGUuIFRoZW4gQWxleGFuZGVyLCBubyBsb25nZXIgYWJsZSB0byByZXN0cmFpbiBoaXMgYW5nZXIsIHRocmV3IG9uZSBvZiB0aGUgYXBwbGVzIHRoYXQgbGF5IG9uIHRoZSB0YWJsZSBhdCBDbGVpdHVzIGFuZCBoaXQgaGltLCBhbmQgYmVnYW4gbG9va2luZyBhYm91dCBmb3IgaGlzIHN3b3JkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb25lIG9mIGhpcyBib2R5LWd1YXJkcywgQXJpc3RvcGhhbmVzLCBjb252ZXllZCBpdCBhd2F5IGJlZm9yZSBoZSBjb3VsZCBsYXkgaGFuZHMgb24gaXQsIGFuZCB0aGUgcmVzdCBzdXJyb3VuZGVkIGhpbSBhbmQgYmVnZ2VkIGhpbSB0byBkZXNpc3QsIHdoZXJldXBvbiBoZSBzcHJhbmcgdG8gaGlzIGZlZXQgYW5kIGNhbGxlZCBvdXQgaW4gTWFjZWRvbmlhbiBzcGVlY2ggYSBzdW1tb25zIHRvIGhpcyBjb3JwcyBvZiBndWFyZHMgKGFuZCB0aGlzIHdhcyBhIHNpZ24gb2YgZ3JlYXQgZGlzdHVyYmFuY2UpLCBhbmQgb3JkZXJlZCB0aGUgdHJ1bXBldGVyIHRvIHNvdW5kLCBhbmQgc21vdGUgaGltIHdpdGggaGlzIGZpc3QgYmVjYXVzZSBoZSBoZXNpdGF0ZWQgYW5kIHdhcyB1bndpbGxpbmcgdG8gZG8gc28uIFRoaXMgbWFuLCB0aGVuLCB3YXMgYWZ0ZXJ3YXJkcyBoZWxkIGluIGhpZ2ggZXN0ZWVtIG9uIHRoZSBncm91bmQgdGhhdCBpdCB3YXMgZHVlIHRvIGhpbSBtb3JlIHRoYW4gdG8gYW55IG9uZSBlbHNlIHRoYXQgdGhlIGNhbXAgd2FzIG5vdCB0aHJvd24gaW50byBjb21tb3Rpb24uIEJ1dCBDbGVpdHVzIHdvdWxkIG5vdCBnaXZlIGluLCBhbmQgd2l0aCBtdWNoIGFkbyBoaXMgZnJpZW5kcyBwdXNoZWQgaGltIG91dCBvZiB0aGUgYmFucXVldC1oYWxsLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['51.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhvcm91Z2hseSBpbmNlbnNlZCwgdGhlbiwgQWxleGFuZGVyIHNhaWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QmFzZSBmZWxsb3csIGRvc3QgdGhvdSB0aGluayB0byBzcGVhayB0aHVzIG9mIG1lIGF0IGFsbCB0aW1lcywgYW5kIHRvIHJhaXNlIGZhY3Rpb24gYW1vbmcgTWFjZWRvbmlhbnMsIHdpdGggaW1wdW5pdHk/PC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksPC9xPiBzYWlkIENsZWl0dXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ub3QgZXZlbiBub3cgZG8gd2UgZW5qb3kgaW1wdW5pdHksIHNpbmNlIHN1Y2ggYXJlIHRoZSByZXdhcmRzIHdlIGdldCBmb3Igb3VyIHRvaWxzOyBhbmQgd2UgcHJvbm91bmNlIHRob3NlIGhhcHB5IHdobyBhcmUgYWxyZWFkeSBkZWFkLCBhbmQgZGlkIG5vdCBsaXZlIHRvIHNlZSB1cyBNYWNlZG9uaWFucyB0aHJhc2hlZCB3aXRoIE1lZGlhbiByb2RzLCBvciBiZWdnaW5nIFBlcnNpYW5zIGluIG9yZGVyIHRvIGdldCBhdWRpZW5jZSB3aXRoIG91ciBraW5nLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['51.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIHNwYWtlIENsZWl0dXMgaW4gYWxsIGJvbGRuZXNzLCBhbmQgdGhvc2UgYWJvdXQgQWxleGFuZGVyIHNwcmFuZyB1cCB0byBjb25mcm9udCBoaW0gYW5kIHJldmlsZWQgaGltLCB3aGlsZSB0aGUgZWxkZXIgbWVuIHRyaWVkIHRvIHF1ZWxsIHRoZSB0dW11bHQuIFRoZW4gQWxleGFuZGVyLCB0dXJuaW5nIHRvIFhlbm9kb2NodXMgb2YgQ2FyZGlhIGFuZCBBcnRlbWl1cyBvZiBDb2xvcGhvbiwgc2FpZDogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EbyBub3QgdGhlIEdyZWVrcyBhcHBlYXIgdG8geW91IHRvIHdhbGsgYWJvdXQgYW1vbmcgTWFjZWRvbmlhbnMgbGlrZSBkZW1pLWdvZHMgYW1vbmcgd2lsZCBiZWFzdHMgPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['51.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNsZWl0dXMsIGhvd2V2ZXIsIHdvdWxkIG5vdCB5aWVsZCwgYnV0IGNhbGxlZCBvbiBBbGV4YW5kZXIgdG8gc3BlYWsgb3V0IGZyZWVseSB3aGF0IGhlIHdpc2hlZCB0byBzYXksIG9yIGVsc2Ugbm90IHRvIGludml0ZSB0byBzdXBwZXIgbWVuIHdobyB3ZXJlIGZyZWUgYW5kIHNwb2tlIHRoZWlyIG1pbmRzLCBidXQgdG8gbGl2ZSB3aXRoIEJhcmJhcmlhbnMgYW5kIHNsYXZlcywgd2hvIHdvdWxkIGRvIG9iZWlzYW5jZSB0byBoaXMgd2hpdGUgdHVuaWMgYW5kIFBlcnNpYW4gZ2lyZGxlLiBUaGVuIEFsZXhhbmRlciwgbm8gbG9uZ2VyIGFibGUgdG8gcmVzdHJhaW4gaGlzIGFuZ2VyLCB0aHJldyBvbmUgb2YgdGhlIGFwcGxlcyB0aGF0IGxheSBvbiB0aGUgdGFibGUgYXQgQ2xlaXR1cyBhbmQgaGl0IGhpbSwgYW5kIGJlZ2FuIGxvb2tpbmcgYWJvdXQgZm9yIGhpcyBzd29yZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['51.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvbmUgb2YgaGlzIGJvZHktZ3VhcmRzLCBBcmlzdG9waGFuZXMsIGNvbnZleWVkIGl0IGF3YXkgYmVmb3JlIGhlIGNvdWxkIGxheSBoYW5kcyBvbiBpdCwgYW5kIHRoZSByZXN0IHN1cnJvdW5kZWQgaGltIGFuZCBiZWdnZWQgaGltIHRvIGRlc2lzdCwgd2hlcmV1cG9uIGhlIHNwcmFuZyB0byBoaXMgZmVldCBhbmQgY2FsbGVkIG91dCBpbiBNYWNlZG9uaWFuIHNwZWVjaCBhIHN1bW1vbnMgdG8gaGlzIGNvcnBzIG9mIGd1YXJkcyAoYW5kIHRoaXMgd2FzIGEgc2lnbiBvZiBncmVhdCBkaXN0dXJiYW5jZSksIGFuZCBvcmRlcmVkIHRoZSB0cnVtcGV0ZXIgdG8gc291bmQsIGFuZCBzbW90ZSBoaW0gd2l0aCBoaXMgZmlzdCBiZWNhdXNlIGhlIGhlc2l0YXRlZCBhbmQgd2FzIHVud2lsbGluZyB0byBkbyBzby4gVGhpcyBtYW4sIHRoZW4sIHdhcyBhZnRlcndhcmRzIGhlbGQgaW4gaGlnaCBlc3RlZW0gb24gdGhlIGdyb3VuZCB0aGF0IGl0IHdhcyBkdWUgdG8gaGltIG1vcmUgdGhhbiB0byBhbnkgb25lIGVsc2UgdGhhdCB0aGUgY2FtcCB3YXMgbm90IHRocm93biBpbnRvIGNvbW1vdGlvbi4gQnV0IENsZWl0dXMgd291bGQgbm90IGdpdmUgaW4sIGFuZCB3aXRoIG11Y2ggYWRvIGhpcyBmcmllbmRzIHB1c2hlZCBoaW0gb3V0IG9mIHRoZSBiYW5xdWV0LWhhbGwuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgdHJpZWQgdG8gY29tZSBpbiBhZ2FpbiwgaG93ZXZlciwgYnkgYW5vdGhlciBkb29yLCB2ZXJ5IGJvbGRseSBhbmQgY29udGVtcHR1b3VzbHkgcmVjaXRpbmcgdGhlc2UgaWFtYmljcyBmcm9tIHRoZSA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgPHRpdGxlPkFuZHJvbWFjaGU8L3RpdGxlPgogICAgICAgICAgICA8L3E+IG9mIEV1cmlwaWRlczoKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRXVyLiBBbmRyLiA2ODMiIHZhbGlkPSJ5ZXMiPlZlcnNlIDY4MzwvYmlibD4gKEtpcmNoaG9mZikuPC9ub3RlPgoJCQkJICAgICAgICA8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPgogICAgICAgICAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbGFzISBpbiBIZWxsYXMgd2hhdCBhbiBldmlsIGdvdmVybm1lbnQhPC9xPgogICAgICAgICAgICAgICA8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlBbmQgc28sIGF0IGxhc3QsIEFsZXhhbmRlciBzZWl6ZWQgYSBzcGVhciBmcm9tIG9uZSBvZiBoaXMgZ3VhcmRzLCBtZXQgQ2xlaXR1cyBhcyBoZSB3YXMgZHJhd2luZyBhc2lkZSB0aGUgY3VydGFpbiBiZWZvcmUgdGhlIGRvb3IsIGFuZCByYW4gaGltIHRocm91Z2guIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vIHNvb25lciBoYWQgQ2xlaXR1cyBmYWxsZW4gd2l0aCBhIHJvYXIgYW5kIGEgZ3JvYW4gdGhhbiB0aGUga2luZydzIGFuZ2VyIGRlcGFydGVkIGZyb20gaGltLiBBbmQgd2hlbiBoZSB3YXMgY29tZSB0byBoaW1zZWxmIGFuZCBiZWhlbGQgaGlzIGZyaWVuZHMgc3RhbmRpbmcgc3BlZWNobGVzcywgaGUgZHJldyB0aGUgc3BlYXIgZnJvbSB0aGUgZGVhZCBib2R5IGFuZCB3b3VsZCBoYXZlIGRhc2hlZCBpdCBpbnRvIGhpcyBvd24gdGhyb2F0LCBoYWQgbm90IGhpcyBib2R5LWd1YXJkcyBwcmV2ZW50ZWQgdGhpcyBieSBzZWl6aW5nIGhpcyBoYW5kcyBhbmQgY2FycnlpbmcgaGltIGJ5IGZvcmNlIHRvIGhpcyBjaGFtYmVyLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['51.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRyaWVkIHRvIGNvbWUgaW4gYWdhaW4sIGhvd2V2ZXIsIGJ5IGFub3RoZXIgZG9vciwgdmVyeSBib2xkbHkgYW5kIGNvbnRlbXB0dW91c2x5IHJlY2l0aW5nIHRoZXNlIGlhbWJpY3MgZnJvbSB0aGUgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kcm9tYWNoZTwvdGl0bGU+CiAgICAgICAgICAgIDwvcT4gb2YgRXVyaXBpZGVzOgoJCQkJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kcm9tYWNoZTwvdGl0bGU+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkV1ci4gQW5kci4gNjgzIiB2YWxpZD0ieWVzIj5WZXJzZSA2ODM8L2JpYmw+IChLaXJjaGhvZmYpLjwvbm90ZT4KCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBBbmRyLiA2ODMiIHZhbGlkPSJ5ZXMiPlZlcnNlIDY4MzwvYmlibD4gKEtpcmNoaG9mZikuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxhcyEgaW4gSGVsbGFzIHdoYXQgYW4gZXZpbCBnb3Zlcm5tZW50ITwvcT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJQW5kIHNvLCBhdCBsYXN0LCBBbGV4YW5kZXIgc2VpemVkIGEgc3BlYXIgZnJvbSBvbmUgb2YgaGlzIGd1YXJkcywgbWV0IENsZWl0dXMgYXMgaGUgd2FzIGRyYXdpbmcgYXNpZGUgdGhlIGN1cnRhaW4gYmVmb3JlIHRoZSBkb29yLCBhbmQgcmFuIGhpbSB0aHJvdWdoLiAKCQkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxhcyEgaW4gSGVsbGFzIHdoYXQgYW4gZXZpbCBnb3Zlcm5tZW50ITwvcT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFsYXMhIGluIEhlbGxhcyB3aGF0IGFuIGV2aWwgZ292ZXJubWVudCE8L3E+CiAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['51.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vIHNvb25lciBoYWQgQ2xlaXR1cyBmYWxsZW4gd2l0aCBhIHJvYXIgYW5kIGEgZ3JvYW4gdGhhbiB0aGUga2luZydzIGFuZ2VyIGRlcGFydGVkIGZyb20gaGltLiBBbmQgd2hlbiBoZSB3YXMgY29tZSB0byBoaW1zZWxmIGFuZCBiZWhlbGQgaGlzIGZyaWVuZHMgc3RhbmRpbmcgc3BlZWNobGVzcywgaGUgZHJldyB0aGUgc3BlYXIgZnJvbSB0aGUgZGVhZCBib2R5IGFuZCB3b3VsZCBoYXZlIGRhc2hlZCBpdCBpbnRvIGhpcyBvd24gdGhyb2F0LCBoYWQgbm90IGhpcyBib2R5LWd1YXJkcyBwcmV2ZW50ZWQgdGhpcyBieSBzZWl6aW5nIGhpcyBoYW5kcyBhbmQgY2FycnlpbmcgaGltIGJ5IGZvcmNlIHRvIGhpcyBjaGFtYmVyLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgaGUgc3BlbnQgdGhlIG5pZ2h0IGFuZCB0aGUgZm9sbG93aW5nIGRheSBpbiBiaXR0ZXIgbGFtZW50YXRpb25zLCBhbmQgYXQgbGFzdCBsYXkgc3BlZWNobGVzcywgd29ybiBvdXQgd2l0aCBoaXMgY3JpZXMgYW5kIHdhaWxpbmcsIGhlYXZpbmcgZGVlcCBncm9hbnMuIFRoZW4gaGlzIGZyaWVuZHMsIGFsYXJtZWQgYXQgaGlzIHNpbGVuY2UsIGZvcmNlZCB0aGVpciB3YXkgaW4uIFRvIHdoYXQgdGhlIG90aGVycyBzYWlkIGhlIHdvdWxkIHBheSBubyBhdHRlbnRpb24sIGJ1dCB3aGVuIEFyaXN0YW5kZXIgdGhlIHNlZXIgcmVtaW5kZWQgaGltIG9mIHRoZSB2aXNpb24gaGUgaGFkIHNlZW4gY29uY2VybmluZyBDbGVpdHVzLCBhbmQgb2YgdGhlIG9tZW4sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDUwLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgNTAuMjwvYmlibD4gZi48L25vdGU+IGFzc3VyaW5nIGhpbSB0aGF0IGFsbCB0aGlzIGhhZCBsb25nIGFnbyBiZWVuIGRlY3JlZWQgYnkgZmF0ZSwgaGUgc2VlbWVkIHRvIGJlIGxlc3Mgb2JkdXJhdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB0aGV5IGJyb3VnaHQgaW4gdG8gaGltIENhbGxpc3RoZW5lcyB0aGUgcGhpbG9zb3BoZXIsIHdobyB3YXMgYSByZWxhdGl2ZSBvZiBBcmlzdG90bGUsIGFuZCBBbmF4YXJjaHVzIG9mIEFiZGVyYS4gT2YgdGhlc2UsIENhbGxpc3RoZW5lcyB0cmllZCBieSBjb25zaWRlcmF0ZSBhbmQgZ2VudGxlIG1ldGhvZHMgdG8gYWxsZXZpYXRlIHRoZSBraW5nJ3Mgc3VmZmVyaW5nLCBlbXBsb3lpbmcgaW5zaW51YXRpb24gYW5kIGNpcmN1bWxvY3V0aW9uIHNvIGFzIHRvIGF2b2lkIGdpdmluZyBwYWluOyBidXQgQW5heGFyY2h1cywgd2hvIGhhZCBhbHdheXMgdGFrZW4gYSBwYXRoIG9mIGhpcyBvd24gaW4gcGhpbG9zb3BoeSwgYW5kIGhhZCBhY3F1aXJlZCBhIHJlcHV0YXRpb24gZm9yIGRlc3Bpc2luZyBhbmQgc2xpZ2h0aW5nIGhpcyBhc3NvY2lhdGVzLCBzaG91dGVkIG91dCBhcyBzb29uIGFzIGhlIGNhbWUgaW46IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZXJlIGlzIEFsZXhhbmRlciwgdG8gd2hvbSB0aGUgd2hvbGUgd29ybGQgaXMgbm93IGxvb2tpbmc7IGJ1dCBoZSBsaWVzIG9uIHRoZSBmbG9vciB3ZWVwaW5nIGxpa2UgYSBzbGF2ZSwgaW4gZmVhciBvZiB0aGUgbGF3IGFuZCB0aGUgY2Vuc3VyZSBvZiBtZW4sIHVudG8gd2hvbSBoZSBoaW1zZWxmIHNob3VsZCBiZSBhIGxhdyBhbmQgYSBtZWFzdXJlIG9mIGp1c3RpY2UsIHNpbmNlIGhlIGhhcyBjb25xdWVyZWQgdGhlIHJpZ2h0IHRvIHJ1bGUgYW5kIG1hc3RlcnksIGluc3RlYWQgb2Ygc3VibWl0dGluZyBsaWtlIGEgc2xhdmUgdG8gdGhlIG1hc3Rlcnkgb2YgYSB2YWluIG9waW5pb24uIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Lbm93ZXN0IHRob3Ugbm90LDwvcT4gc2FpZCBoZSwgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCBaZXVzIGhhcyBKdXN0aWNlIGFuZCBMYXcgc2VhdGVkIGJlc2lkZSBoaW0sIGluIG9yZGVyIHRoYXQgZXZlcnl0aGluZyB0aGF0IGlzIGRvbmUgYnkgdGhlIG1hc3RlciBvZiB0aGUgd29ybGQgbWF5IGJlIGxhd2Z1bCBhbmQganVzdD88L3E+IEJ5IHVzaW5nIHNvbWUgc3VjaCBhcmd1bWVudHMgYXMgdGhlc2UgQW5heGFyY2h1cyBzdWNjZWVkZWQgaW4gbGlnaHRlbmluZyB0aGUgc3VmZmVyaW5nIG9mIHRoZSBraW5nLCBpdCBpcyB0cnVlLCBidXQgcmVuZGVyZWQgaGlzIGRpc3Bvc2l0aW9uIGluIG1hbnkgd2F5cyBtb3JlIHZhaW5nbG9yaW91cyBhbmQgbGF3bGVzczsgaGUgYWxzbyBtYWRlIGhpbXNlbGYgd29uZGVyZnVsbHkgbGlrZWQgYnkgdGhlIGtpbmcsIGFuZCBicm91Z2h0IHRoZSBpbnRlcmNvdXJzZSBvZiBDYWxsaXN0aGVuZXMgd2l0aCBoaW0sIHdoaWNoIGhhZCBhbHdheXMgYmVlbiB1bnBsZWFzYW50IGJlY2F1c2Ugb2YgdGhlIG1hbidzIGF1c3Rlcml0eSwgaW50byBhZGRpdGlvbmFsIGRpc2Zhdm91ci48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['52.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSBoZSBzcGVudCB0aGUgbmlnaHQgYW5kIHRoZSBmb2xsb3dpbmcgZGF5IGluIGJpdHRlciBsYW1lbnRhdGlvbnMsIGFuZCBhdCBsYXN0IGxheSBzcGVlY2hsZXNzLCB3b3JuIG91dCB3aXRoIGhpcyBjcmllcyBhbmQgd2FpbGluZywgaGVhdmluZyBkZWVwIGdyb2Fucy4gVGhlbiBoaXMgZnJpZW5kcywgYWxhcm1lZCBhdCBoaXMgc2lsZW5jZSwgZm9yY2VkIHRoZWlyIHdheSBpbi4gVG8gd2hhdCB0aGUgb3RoZXJzIHNhaWQgaGUgd291bGQgcGF5IG5vIGF0dGVudGlvbiwgYnV0IHdoZW4gQXJpc3RhbmRlciB0aGUgc2VlciByZW1pbmRlZCBoaW0gb2YgdGhlIHZpc2lvbiBoZSBoYWQgc2VlbiBjb25jZXJuaW5nIENsZWl0dXMsIGFuZCBvZiB0aGUgb21lbiwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDUwLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgNTAuMjwvYmlibD4gZi48L25vdGU+IGFzc3VyaW5nIGhpbSB0aGF0IGFsbCB0aGlzIGhhZCBsb25nIGFnbyBiZWVuIGRlY3JlZWQgYnkgZmF0ZSwgaGUgc2VlbWVkIHRvIGJlIGxlc3Mgb2JkdXJhdGUuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNTAuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciA1MC4yPC9iaWJsPiBmLjwvdHJhbnNsYXRpb24+"
translation['52.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB0aGV5IGJyb3VnaHQgaW4gdG8gaGltIENhbGxpc3RoZW5lcyB0aGUgcGhpbG9zb3BoZXIsIHdobyB3YXMgYSByZWxhdGl2ZSBvZiBBcmlzdG90bGUsIGFuZCBBbmF4YXJjaHVzIG9mIEFiZGVyYS4gT2YgdGhlc2UsIENhbGxpc3RoZW5lcyB0cmllZCBieSBjb25zaWRlcmF0ZSBhbmQgZ2VudGxlIG1ldGhvZHMgdG8gYWxsZXZpYXRlIHRoZSBraW5nJ3Mgc3VmZmVyaW5nLCBlbXBsb3lpbmcgaW5zaW51YXRpb24gYW5kIGNpcmN1bWxvY3V0aW9uIHNvIGFzIHRvIGF2b2lkIGdpdmluZyBwYWluOyBidXQgQW5heGFyY2h1cywgd2hvIGhhZCBhbHdheXMgdGFrZW4gYSBwYXRoIG9mIGhpcyBvd24gaW4gcGhpbG9zb3BoeSwgYW5kIGhhZCBhY3F1aXJlZCBhIHJlcHV0YXRpb24gZm9yIGRlc3Bpc2luZyBhbmQgc2xpZ2h0aW5nIGhpcyBhc3NvY2lhdGVzLCBzaG91dGVkIG91dCBhcyBzb29uIGFzIGhlIGNhbWUgaW46IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['52.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlcmUgaXMgQWxleGFuZGVyLCB0byB3aG9tIHRoZSB3aG9sZSB3b3JsZCBpcyBub3cgbG9va2luZzsgYnV0IGhlIGxpZXMgb24gdGhlIGZsb29yIHdlZXBpbmcgbGlrZSBhIHNsYXZlLCBpbiBmZWFyIG9mIHRoZSBsYXcgYW5kIHRoZSBjZW5zdXJlIG9mIG1lbiwgdW50byB3aG9tIGhlIGhpbXNlbGYgc2hvdWxkIGJlIGEgbGF3IGFuZCBhIG1lYXN1cmUgb2YganVzdGljZSwgc2luY2UgaGUgaGFzIGNvbnF1ZXJlZCB0aGUgcmlnaHQgdG8gcnVsZSBhbmQgbWFzdGVyeSwgaW5zdGVhZCBvZiBzdWJtaXR0aW5nIGxpa2UgYSBzbGF2ZSB0byB0aGUgbWFzdGVyeSBvZiBhIHZhaW4gb3Bpbmlvbi4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+S25vd2VzdCB0aG91IG5vdCw8L3E+IHNhaWQgaGUsIDwvdHJhbnNsYXRpb24+"
translation['52.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPktub3dlc3QgdGhvdSBub3QsPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGF0IFpldXMgaGFzIEp1c3RpY2UgYW5kIExhdyBzZWF0ZWQgYmVzaWRlIGhpbSwgaW4gb3JkZXIgdGhhdCBldmVyeXRoaW5nIHRoYXQgaXMgZG9uZSBieSB0aGUgbWFzdGVyIG9mIHRoZSB3b3JsZCBtYXkgYmUgbGF3ZnVsIGFuZCBqdXN0PzwvcT4gQnkgdXNpbmcgc29tZSBzdWNoIGFyZ3VtZW50cyBhcyB0aGVzZSBBbmF4YXJjaHVzIHN1Y2NlZWRlZCBpbiBsaWdodGVuaW5nIHRoZSBzdWZmZXJpbmcgb2YgdGhlIGtpbmcsIGl0IGlzIHRydWUsIGJ1dCByZW5kZXJlZCBoaXMgZGlzcG9zaXRpb24gaW4gbWFueSB3YXlzIG1vcmUgdmFpbmdsb3Jpb3VzIGFuZCBsYXdsZXNzOyBoZSBhbHNvIG1hZGUgaGltc2VsZiB3b25kZXJmdWxseSBsaWtlZCBieSB0aGUga2luZywgYW5kIGJyb3VnaHQgdGhlIGludGVyY291cnNlIG9mIENhbGxpc3RoZW5lcyB3aXRoIGhpbSwgd2hpY2ggaGFkIGFsd2F5cyBiZWVuIHVucGxlYXNhbnQgYmVjYXVzZSBvZiB0aGUgbWFuJ3MgYXVzdGVyaXR5LCBpbnRvIGFkZGl0aW9uYWwgZGlzZmF2b3VyLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdGhhdCBvbmNlIGF0IHN1cHBlciB0aGUgY29udmVyc2F0aW9uIHR1cm5lZCB1cG9uIHNlYXNvbnMgYW5kIHdlYXRoZXIsIGFuZCB0aGF0IENhbGxpc3RoZW5lcywgd2hvIGhlbGQgd2l0aCB0aG9zZSB3aG8gbWFpbnRhaW4gdGhhdCBpdCBpcyBtb3JlIGNvbGQgYW5kIHdpbnRyeSB0aGVyZSB0aGFuIGluIEdyZWVjZSwgd2FzIHN0b3V0bHkgb3Bwb3NlZCBieSBBbmF4YXJjaHVzLCB3aGVyZXVwb24gaGUgc2FpZDogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91IHN1cmVseSBtdXN0IGFkbWl0IHRoYXQgaXQgaXMgY29sZGVyIGhlcmUgdGhhbiB0aGVyZTsgZm9yIHRoZXJlIHlvdSB1c2VkIHRvIGdvIGFib3V0IGluIHdpbnRlciBpbiBhIGNsb2FrIG1lcmVseSwgYnV0IGhlcmUgeW91IHJlY2xpbmUgYXQgdGFibGUgd2l0aCB0aHJlZSBydWdzIHRocm93biBvdmVyIHlvdS48L3E+IE9mIGNvdXJzZSB0aGlzIGFsc28gYWRkZWQgdG8gdGhlIGlycml0YXRpb24gb2YgQW5heGFyY2h1cy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['52.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdGhhdCBvbmNlIGF0IHN1cHBlciB0aGUgY29udmVyc2F0aW9uIHR1cm5lZCB1cG9uIHNlYXNvbnMgYW5kIHdlYXRoZXIsIGFuZCB0aGF0IENhbGxpc3RoZW5lcywgd2hvIGhlbGQgd2l0aCB0aG9zZSB3aG8gbWFpbnRhaW4gdGhhdCBpdCBpcyBtb3JlIGNvbGQgYW5kIHdpbnRyeSB0aGVyZSB0aGFuIGluIEdyZWVjZSwgd2FzIHN0b3V0bHkgb3Bwb3NlZCBieSBBbmF4YXJjaHVzLCB3aGVyZXVwb24gaGUgc2FpZDogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3Ugc3VyZWx5IG11c3QgYWRtaXQgdGhhdCBpdCBpcyBjb2xkZXIgaGVyZSB0aGFuIHRoZXJlOyBmb3IgdGhlcmUgeW91IHVzZWQgdG8gZ28gYWJvdXQgaW4gd2ludGVyIGluIGEgY2xvYWsgbWVyZWx5LCBidXQgaGVyZSB5b3UgcmVjbGluZSBhdCB0YWJsZSB3aXRoIHRocmVlIHJ1Z3MgdGhyb3duIG92ZXIgeW91LjwvcT4gT2YgY291cnNlIHRoaXMgYWxzbyBhZGRlZCB0byB0aGUgaXJyaXRhdGlvbiBvZiBBbmF4YXJjaHVzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgb3RoZXIgc29waGlzdHMgYW5kIGZsYXR0ZXJlcnMgaW4gdGhlIHRyYWluIG9mIEFsZXhhbmRlciB3ZXJlIGFubm95ZWQgdG8gc2VlIENhbGxpc3RoZW5lcyBlYWdlcmx5IGNvdXJ0ZWQgYnkgdGhlIHlvdW5nIG1lbiBvbiBhY2NvdW50IG9mIGhpcyBlbG9xdWVuY2UsIGFuZCBubyBsZXNzIHBsZWFzaW5nIHRvIHRoZSBvbGRlciBtZW4gb24gYWNjb3VudCBvZiBoaXMgbW9kZSBvZiBsaWZlLCB3aGljaCB3YXMgd2VsbC1vcmRlcmVkLCBkaWduaWZpZWQsIGFuZCBpbmRlcGVuZGVudCwgYW5kIGNvbmZpcm1lZCB0aGUgcmVhc29uIGdpdmVuIGZvciBoaXMgc29qb3VybiBhYnJvYWQsIG5hbWVseSwgdGhhdCBoZSBoYWQgZ29uZSB0byBBbGV4YW5kZXIgZnJvbSBhbiBhcmRlbnQgZGVzaXJlIHRvIHJlc3RvcmUgaGlzIGZlbGxvdy1jaXRpemVucyB0byB0aGVpciBob21lcyBhbmQgcmUtcGVvcGxlIGhpcyBuYXRpdmUgY2l0eS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9seW50aHVzLCB3aGljaCBoYWQgYmVlbiBkZXN0cm95ZWQgYnkgUGhpbGlwIGluIDM0NyBCLkMuPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYmVzaWRlcyBiZWluZyBlbnZpZWQgb24gYWNjb3VudCBvZiBoaXMgcmVwdXRhdGlvbiwgaGUgYWxzbyBhdCB0aW1lcyBieSBoaXMgb3duIGNvbmR1Y3QgZnVybmlzaGVkIG1hdGVyaWFsIGZvciBoaXMgZGV0cmFjdG9ycywgcmVqZWN0aW5nIGludml0YXRpb25zIGZvciB0aGUgbW9zdCBwYXJ0LCBhbmQgd2hlbiBoZSBkaWQgZ28gaW50byBjb21wYW55LCBieSBoaXMgZ3Jhdml0eSBhbmQgc2lsZW5jZSBtYWtpbmcgaXQgYXBwZWFyIHRoYXQgaGUgZGlzYXBwcm92ZWQgb3IgZGlzbGlrZWQgd2hhdCB3YXMgZ29pbmcgb24sIHNvIHRoYXQgZXZlbiBBbGV4YW5kZXIgc2FpZCBpbiBhbGx1c2lvbiB0byBoaW064oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPgogICAgICAgICAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGhhdGUgYSB3aXNlIG1hbiBldmVuIHRvIGhpbXNlbGYgdW53aXNlLjwvcT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBpYW1iaWMgdHJpbWV0ZXIgZnJvbSBhbiB1bmtub3duIHBsYXkgb2YgRXVyaXBpZGVzIChOYXVjaywgPHRpdGxlPlRyYWcuIEdyYWVjLiBGcmFnLiAyPC90aXRsZT4gcC4gNjUyKS48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoZSBvdGhlciBzb3BoaXN0cyBhbmQgZmxhdHRlcmVycyBpbiB0aGUgdHJhaW4gb2YgQWxleGFuZGVyIHdlcmUgYW5ub3llZCB0byBzZWUgQ2FsbGlzdGhlbmVzIGVhZ2VybHkgY291cnRlZCBieSB0aGUgeW91bmcgbWVuIG9uIGFjY291bnQgb2YgaGlzIGVsb3F1ZW5jZSwgYW5kIG5vIGxlc3MgcGxlYXNpbmcgdG8gdGhlIG9sZGVyIG1lbiBvbiBhY2NvdW50IG9mIGhpcyBtb2RlIG9mIGxpZmUsIHdoaWNoIHdhcyB3ZWxsLW9yZGVyZWQsIGRpZ25pZmllZCwgYW5kIGluZGVwZW5kZW50LCBhbmQgY29uZmlybWVkIHRoZSByZWFzb24gZ2l2ZW4gZm9yIGhpcyBzb2pvdXJuIGFicm9hZCwgbmFtZWx5LCB0aGF0IGhlIGhhZCBnb25lIHRvIEFsZXhhbmRlciBmcm9tIGFuIGFyZGVudCBkZXNpcmUgdG8gcmVzdG9yZSBoaXMgZmVsbG93LWNpdGl6ZW5zIHRvIHRoZWlyIGhvbWVzIGFuZCByZS1wZW9wbGUgaGlzIG5hdGl2ZSBjaXR5LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbHludGh1cywgd2hpY2ggaGFkIGJlZW4gZGVzdHJveWVkIGJ5IFBoaWxpcCBpbiAzNDcgQi5DLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['53.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzIGJlaW5nIGVudmllZCBvbiBhY2NvdW50IG9mIGhpcyByZXB1dGF0aW9uLCBoZSBhbHNvIGF0IHRpbWVzIGJ5IGhpcyBvd24gY29uZHVjdCBmdXJuaXNoZWQgbWF0ZXJpYWwgZm9yIGhpcyBkZXRyYWN0b3JzLCByZWplY3RpbmcgaW52aXRhdGlvbnMgZm9yIHRoZSBtb3N0IHBhcnQsIGFuZCB3aGVuIGhlIGRpZCBnbyBpbnRvIGNvbXBhbnksIGJ5IGhpcyBncmF2aXR5IGFuZCBzaWxlbmNlIG1ha2luZyBpdCBhcHBlYXIgdGhhdCBoZSBkaXNhcHByb3ZlZCBvciBkaXNsaWtlZCB3aGF0IHdhcyBnb2luZyBvbiwgc28gdGhhdCBldmVuIEFsZXhhbmRlciBzYWlkIGluIGFsbHVzaW9uIHRvIGhpbTrigJQKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgaGF0ZSBhIHdpc2UgbWFuIGV2ZW4gdG8gaGltc2VsZiB1bndpc2UuPC9xPgogICAgICAgICAgICAgICA8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoYXRlIGEgd2lzZSBtYW4gZXZlbiB0byBoaW1zZWxmIHVud2lzZS48L3E+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGhhdGUgYSB3aXNlIG1hbiBldmVuIHRvIGhpbXNlbGYgdW53aXNlLjwvcT4KICAgICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBpYW1iaWMgdHJpbWV0ZXIgZnJvbSBhbiB1bmtub3duIHBsYXkgb2YgRXVyaXBpZGVzIChOYXVjaywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJhZy4gR3JhZWMuIEZyYWcuIDI8L3RpdGxlPiBwLiA2NTIpLjwvbm90ZT4KICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJhZy4gR3JhZWMuIEZyYWcuIDI8L3RpdGxlPiBwLiA2NTIpLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIG1vcmVvdmVyLCB0aGF0IG9uY2Ugd2hlbiBhIGxhcmdlIGNvbXBhbnkgaGFkIGJlZW4gaW52aXRlZCB0byB0aGUga2luZydzIHN1cHBlciwgQ2FsbGlzdGhlbmVzIHdhcyBiaWRkZW4sIHdoZW4gdGhlIGN1cCBjYW1lIHRvIGhpbSwgdG8gc3BlYWsgaW4gcHJhaXNlIG9mIHRoZSBNYWNlZG9uaWFucywgYW5kIHdhcyBzbyBzdWNjZXNzZnVsIG9uIHRoZSB0aGVtZSB0aGF0IHRoZSBndWVzdHMgcm9zZSB1cCB0byBhcHBsYXVkIGhpbSBhbmQgdGhyZXcgdGhlaXIgZ2FybGFuZHMgYXQgaGltOyB3aGVyZXVwb24gQWxleGFuZGVyIHNhaWQgdGhhdCwgaW4gdGhlIGxhbmd1YWdlIG9mIEV1cmlwaWRlcywgd2hlbiBhIG1hbiBoYXMgZm9yIGhpcyB3b3JkczwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIG1vcmVvdmVyLCB0aGF0IG9uY2Ugd2hlbiBhIGxhcmdlIGNvbXBhbnkgaGFkIGJlZW4gaW52aXRlZCB0byB0aGUga2luZydzIHN1cHBlciwgQ2FsbGlzdGhlbmVzIHdhcyBiaWRkZW4sIHdoZW4gdGhlIGN1cCBjYW1lIHRvIGhpbSwgdG8gc3BlYWsgaW4gcHJhaXNlIG9mIHRoZSBNYWNlZG9uaWFucywgYW5kIHdhcyBzbyBzdWNjZXNzZnVsIG9uIHRoZSB0aGVtZSB0aGF0IHRoZSBndWVzdHMgcm9zZSB1cCB0byBhcHBsYXVkIGhpbSBhbmQgdGhyZXcgdGhlaXIgZ2FybGFuZHMgYXQgaGltOyB3aGVyZXVwb24gQWxleGFuZGVyIHNhaWQgdGhhdCwgaW4gdGhlIGxhbmd1YWdlIG9mIEV1cmlwaWRlcywgd2hlbiBhIG1hbiBoYXMgZm9yIGhpcyB3b3JkczxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgbm9ibGUgc3ViamVjdCwgaXQgaXMgZWFzeSB0byBzcGVhayB3ZWxsOzwvcT4KICAgICAgICAgICAgICAgPC9sPgoJCQkgICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIEJhLiAyNjAiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CYWNjaGFlPC90aXRsZT4sIDI2MDwvYmlibD4gKEtpcmNoaG9mZikuPC9ub3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHNob3cgdXMgdGhlIHBvd2VyIG9mIHlvdXIgZWxvcXVlbmNlLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ieSBhIGRlbnVuY2lhdGlvbiBvZiB0aGUgTWFjZWRvbmlhbnMsIHRoYXQgdGhleSBtYXkgYmVjb21lIGV2ZW4gYmV0dGVyIGJ5IGxlYXJuaW5nIHRoZWlyIGZhdWx0cy48L3E+IEFuZCBzbyBDYWxsaXN0aGVuZXMgYmVnYW4gaGlzIHBhbGlub2RlLCBhbmQgc3Bva2UgbG9uZyBhbmQgYm9sZGx5IGluIGRlbnVuY2lhdGlvbiBvZiB0aGUgTWFjZWRvbmlhbnMsIGFuZCBhZnRlciBzaG93aW5nIHRoYXQgZmFjdGlvbiBhbW9uZyB0aGUgR3JlZWtzIHdhcyB0aGUgY2F1c2Ugb2YgdGhlIGluY3JlYXNlIG9mIFBoaWxpcCdzIHBvd2VyLCBhZGRlZDo8L3A+CiAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgbm9ibGUgc3ViamVjdCwgaXQgaXMgZWFzeSB0byBzcGVhayB3ZWxsOzwvcT4KICAgICAgICAgICAgICAgPC9sPgoJCQkgICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgbm9ibGUgc3ViamVjdCwgaXQgaXMgZWFzeSB0byBzcGVhayB3ZWxsOzwvcT4KICAgICAgICAgICAgICAgPC9sPgoJCQkgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgbm9ibGUgc3ViamVjdCwgaXQgaXMgZWFzeSB0byBzcGVhayB3ZWxsOzwvcT4KICAgICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBCYS4gMjYwIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmFjY2hhZTwvdGl0bGU+LCAyNjA8L2JpYmw+IChLaXJjaGhvZmYpLjwvbm90ZT4KCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBCYS4gMjYwIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmFjY2hhZTwvdGl0bGU+LCAyNjA8L2JpYmw+IChLaXJjaGhvZmYpLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJhY2NoYWU8L3RpdGxlPiwgMjYwPC90cmFuc2xhdGlvbj4="
translation['53.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBzaG93IHVzIHRoZSBwb3dlciBvZiB5b3VyIGVsb3F1ZW5jZSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ieSBhIGRlbnVuY2lhdGlvbiBvZiB0aGUgTWFjZWRvbmlhbnMsIHRoYXQgdGhleSBtYXkgYmVjb21lIGV2ZW4gYmV0dGVyIGJ5IGxlYXJuaW5nIHRoZWlyIGZhdWx0cy48L3E+IEFuZCBzbyBDYWxsaXN0aGVuZXMgYmVnYW4gaGlzIHBhbGlub2RlLCBhbmQgc3Bva2UgbG9uZyBhbmQgYm9sZGx5IGluIGRlbnVuY2lhdGlvbiBvZiB0aGUgTWFjZWRvbmlhbnMsIGFuZCBhZnRlciBzaG93aW5nIHRoYXQgZmFjdGlvbiBhbW9uZyB0aGUgR3JlZWtzIHdhcyB0aGUgY2F1c2Ugb2YgdGhlIGluY3JlYXNlIG9mIFBoaWxpcCdzIHBvd2VyLCBhZGRlZDo8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgaW4gYSB0aW1lIG9mIHNlZGl0aW9uLCB0aGUgYmFzZSBtYW4gdG9vIGlzIGluIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5ob25vdXIuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJCgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBwcm92ZXJiIGluIGhleGFtZXRlciB2ZXJzZSwgc29tZXRpbWVzIGF0dHJpYnV0ZWQgdG8gQ2FsbGltYWNodXMuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTmljLiAxMS4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmljaWFzPC90aXRsZT4sIHhpLiAzPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA0NzlhIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDQ3OWE8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgaW4gYSB0aW1lIG9mIHNlZGl0aW9uLCB0aGUgYmFzZSBtYW4gdG9vIGlzIGluIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5ob25vdXIuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJCgkJCQkgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGluIGEgdGltZSBvZiBzZWRpdGlvbiwgdGhlIGJhc2UgbWFuIHRvbyBpcyBpbiA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aG9ub3VyLjwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIHByb3ZlcmIgaW4gaGV4YW1ldGVyIHZlcnNlLCBzb21ldGltZXMgYXR0cmlidXRlZCB0byBDYWxsaW1hY2h1cy4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDExLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgeGkuIDM8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDQ3OWEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcC4gNDc5YTwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDExLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgeGkuIDM8L2JpYmw+OyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgeGkuIDM8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDQ3OWEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcC4gNDc5YTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDQ3OWE8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGdhdmUgdGhlIE1hY2Vkb25pYW5zIGEgc3Rlcm4gYW5kIGJpdHRlciBoYXRyZWQgb2YgaGltLCBhbmQgQWxleGFuZGVyIGRlY2xhcmVkIHRoYXQgQ2FsbGlzdGhlbmVzIGhhZCBnaXZlbiBhIHByb29mLCBub3Qgb2YgaGlzIGVsb3F1ZW5jZSwgYnV0IG9mIGhpcyBpbGwtd2lsbCB0b3dhcmRzIHRoZSBNYWNlZG9uaWFucy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['53.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZ2F2ZSB0aGUgTWFjZWRvbmlhbnMgYSBzdGVybiBhbmQgYml0dGVyIGhhdHJlZCBvZiBoaW0sIGFuZCBBbGV4YW5kZXIgZGVjbGFyZWQgdGhhdCBDYWxsaXN0aGVuZXMgaGFkIGdpdmVuIGEgcHJvb2YsIG5vdCBvZiBoaXMgZWxvcXVlbmNlLCBidXQgb2YgaGlzIGlsbC13aWxsIHRvd2FyZHMgdGhlIE1hY2Vkb25pYW5zLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIHRoZW4sIGFjY29yZGluZyB0byBIZXJtaXBwdXMsIGlzIHRoZSBzdG9yeSB3aGljaCBTdHJvZWJ1cywgdGhlIHNsYXZlIHdobyByZWFkIGFsb3VkIGZvciBDYWxsaXN0aGVuZXMsIHRvbGQgdG8gQXJpc3RvdGxlLCBhbmQgaGUgc2F5cyB0aGF0IHdoZW4gQ2FsbGlzdGhlbmVzIHdhcyBhd2FyZSBvZiB0aGUgYWxpZW5hdGlvbiBvZiB0aGUga2luZywgdHdpY2Ugb3IgdGhyaWNlLCBhcyBoZSB3YXMgZ29pbmcgYXdheSBmcm9tIGhpbSwgaGUgcmVjaXRlZCB0aGUgdmVyc2U6CgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkRlYWQgaXMgYWxzbyBQYXRyb2NsdXMsIGEgbWFuIGZhciBicmF2ZXIgdGhhbiB0aG91IDwvbD4KCQkJCQkgICAgICAgICAgPGw+YXJ0LjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNoaWxsZXMgdG8gSGVjdG9yLCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMjEuMTA3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPklsaWFkPC90aXRsZT4sIHh4aS4gMTA3PC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['54.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcywgdGhlbiwgYWNjb3JkaW5nIHRvIEhlcm1pcHB1cywgaXMgdGhlIHN0b3J5IHdoaWNoIFN0cm9lYnVzLCB0aGUgc2xhdmUgd2hvIHJlYWQgYWxvdWQgZm9yIENhbGxpc3RoZW5lcywgdG9sZCB0byBBcmlzdG90bGUsIGFuZCBoZSBzYXlzIHRoYXQgd2hlbiBDYWxsaXN0aGVuZXMgd2FzIGF3YXJlIG9mIHRoZSBhbGllbmF0aW9uIG9mIHRoZSBraW5nLCB0d2ljZSBvciB0aHJpY2UsIGFzIGhlIHdhcyBnb2luZyBhd2F5IGZyb20gaGltLCBoZSByZWNpdGVkIHRoZSB2ZXJzZToKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkRlYWQgaXMgYWxzbyBQYXRyb2NsdXMsIGEgbWFuIGZhciBicmF2ZXIgdGhhbiB0aG91IDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5hcnQuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkRlYWQgaXMgYWxzbyBQYXRyb2NsdXMsIGEgbWFuIGZhciBicmF2ZXIgdGhhbiB0aG91IDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5hcnQuPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjaGlsbGVzIHRvIEhlY3RvciwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMjEuMTA3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeHhpLiAxMDc8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMjEuMTA3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeHhpLiAxMDc8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHh4aS4gMTA3PHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGF0IEFyaXN0b3RsZSBzYWlkLCB0aGVuLCB3b3VsZCBzZWVtIHRvIGhhdmUgYmVlbiBubyBpZGxlIHZlcmRpY3QsIG5hbWVseSwgdGhhdCBDYWxsaXN0aGVuZXMgc2hvd2VkIGdyZWF0IGFiaWxpdHkgYXMgYSBzcGVha2VyLCBidXQgbGFja2VkIGNvbW1vbiBzZW5zZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gdGhlIG1hdHRlciBvZiB0aGUgb2JlaXNhbmNlLCBhdCBsZWFzdCwgYnkgcmVmdXNpbmcgc3R1cmRpbHkgYW5kIGxpa2UgYSBwaGlsb3NvcGhlciB0byBwZXJmb3JtIHRoZSBhY3QsIGFuZCBieSBzdGFuZGluZyBmb3J0aCBhbG9uZSBhbmQgcmVoZWFyc2luZyBpbiBwdWJsaWMgdGhlIHJlYXNvbnMgZm9yIHRoZSBpbmRpZ25hdGlvbiB3aGljaCBhbGwgdGhlIG9sZGVzdCBhbmQgYmVzdCBvZiB0aGUgTWFjZWRvbmlhbnMgY2hlcmlzaGVkIGluIHNlY3JldCwgaGUgZGVsaXZlcmVkIHRoZSBHcmVla3MgZnJvbSBhIGdyZWF0IGRpc2dyYWNlLCBhbmQgQWxleGFuZGVyIGZyb20gYSBncmVhdGVyLCBieSBsZWFkaW5nIGhpbSBub3QgdG8gaW5zaXN0IHVwb24gdGhlIG9iZWlzYW5jZTsgYnV0IGhlIGRlc3Ryb3llZCBoaW1zZWxmLCBiZWNhdXNlIGhlIHdhcyB0aG91Z2h0IHRvIHVzZSBmb3JjZSByYXRoZXIgdGhhbiBwZXJzdWFzaW9uIHdpdGggdGhlIGtpbmcuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['54.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgbWF0dGVyIG9mIHRoZSBvYmVpc2FuY2UsIGF0IGxlYXN0LCBieSByZWZ1c2luZyBzdHVyZGlseSBhbmQgbGlrZSBhIHBoaWxvc29waGVyIHRvIHBlcmZvcm0gdGhlIGFjdCwgYW5kIGJ5IHN0YW5kaW5nIGZvcnRoIGFsb25lIGFuZCByZWhlYXJzaW5nIGluIHB1YmxpYyB0aGUgcmVhc29ucyBmb3IgdGhlIGluZGlnbmF0aW9uIHdoaWNoIGFsbCB0aGUgb2xkZXN0IGFuZCBiZXN0IG9mIHRoZSBNYWNlZG9uaWFucyBjaGVyaXNoZWQgaW4gc2VjcmV0LCBoZSBkZWxpdmVyZWQgdGhlIEdyZWVrcyBmcm9tIGEgZ3JlYXQgZGlzZ3JhY2UsIGFuZCBBbGV4YW5kZXIgZnJvbSBhIGdyZWF0ZXIsIGJ5IGxlYWRpbmcgaGltIG5vdCB0byBpbnNpc3QgdXBvbiB0aGUgb2JlaXNhbmNlOyBidXQgaGUgZGVzdHJveWVkIGhpbXNlbGYsIGJlY2F1c2UgaGUgd2FzIHRob3VnaHQgdG8gdXNlIGZvcmNlIHJhdGhlciB0aGFuIHBlcnN1YXNpb24gd2l0aCB0aGUga2luZy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5DaGFyZXMgb2YgTWl0eWxlbmUgc2F5cyB0aGF0IG9uY2UgYXQgYSBiYW5xdWV0IEFsZXhhbmRlciwgYWZ0ZXIgZHJpbmtpbmcsIGhhbmRlZCB0aGUgY3VwIHRvIG9uZSBvZiBoaXMgZnJpZW5kcywgYW5kIGhlLCBvbiByZWNlaXZpbmcgaXQsIHJvc2UgdXAgc28gYXMgdG8gZmFjZSB0aGUgaG91c2Vob2xkIHNocmluZSwgYW5kIHdoZW4gaGUgaGFkIGRydW5rLCBmaXJzdCBtYWRlIG9iZWlzYW5jZSB0byBBbGV4YW5kZXIsIHRoZW4ga2lzc2VkIGhpbSwgYW5kIHRoZW4gcmVzdW1lZCBoaXMgcGxhY2UgdXBvbiB0aGUgY291Y2guIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGFsbCB0aGUgZ3Vlc3RzIHdlcmUgZG9pbmcgdGhpcyBpbiB0dXJuLCBDYWxsaXN0aGVuZXMgdG9vayB0aGUgY3VwLCB0aGUga2luZyBub3QgcGF5aW5nIGF0dGVudGlvbiwgYnV0IGNvbnZlcnNpbmcgd2l0aCBIZXBoYWVzdGlvbiwgYW5kIGFmdGVyIGhlIGhhZCBkcnVuayB3ZW50IHRvd2FyZHMgdGhlIGtpbmcgdG8ga2lzcyBoaW07IGJ1dCBEZW1ldHJpdXMsIHN1cm5hbWVkIFBoZWlkbywgY3JpZWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gS2luZywgZG8gbm90IGFjY2VwdCBoaXMga2lzcywgZm9yIGhlIGFsb25lIGhhcyBub3QgZG9uZSB0aGVlIG9iZWlzYW5jZS48L3E+IFNvIEFsZXhhbmRlciBkZWNsaW5lZCB0aGUga2lzcywgYXQgd2hpY2ggQ2FsbGlzdGhlbmVzIGV4Y2xhaW1lZCBpbiBhIGxvdWQgdm9pY2U6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCwgdGhlbiwgSSdsbCBnbyBhd2F5IHRoZSBwb29yZXIgYnkgYSBraXNzLjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA0LjEyLjEiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gaXYuIDEyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['54.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNoYXJlcyBvZiBNaXR5bGVuZSBzYXlzIHRoYXQgb25jZSBhdCBhIGJhbnF1ZXQgQWxleGFuZGVyLCBhZnRlciBkcmlua2luZywgaGFuZGVkIHRoZSBjdXAgdG8gb25lIG9mIGhpcyBmcmllbmRzLCBhbmQgaGUsIG9uIHJlY2VpdmluZyBpdCwgcm9zZSB1cCBzbyBhcyB0byBmYWNlIHRoZSBob3VzZWhvbGQgc2hyaW5lLCBhbmQgd2hlbiBoZSBoYWQgZHJ1bmssIGZpcnN0IG1hZGUgb2JlaXNhbmNlIHRvIEFsZXhhbmRlciwgdGhlbiBraXNzZWQgaGltLCBhbmQgdGhlbiByZXN1bWVkIGhpcyBwbGFjZSB1cG9uIHRoZSBjb3VjaC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['54.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGFsbCB0aGUgZ3Vlc3RzIHdlcmUgZG9pbmcgdGhpcyBpbiB0dXJuLCBDYWxsaXN0aGVuZXMgdG9vayB0aGUgY3VwLCB0aGUga2luZyBub3QgcGF5aW5nIGF0dGVudGlvbiwgYnV0IGNvbnZlcnNpbmcgd2l0aCBIZXBoYWVzdGlvbiwgYW5kIGFmdGVyIGhlIGhhZCBkcnVuayB3ZW50IHRvd2FyZHMgdGhlIGtpbmcgdG8ga2lzcyBoaW07IGJ1dCBEZW1ldHJpdXMsIHN1cm5hbWVkIFBoZWlkbywgY3JpZWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBLaW5nLCBkbyBub3QgYWNjZXB0IGhpcyBraXNzLCBmb3IgaGUgYWxvbmUgaGFzIG5vdCBkb25lIHRoZWUgb2JlaXNhbmNlLjwvcT4gU28gQWxleGFuZGVyIGRlY2xpbmVkIHRoZSBraXNzLCBhdCB3aGljaCBDYWxsaXN0aGVuZXMgZXhjbGFpbWVkIGluIGEgbG91ZCB2b2ljZTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwsIHRoZW4sIEknbGwgZ28gYXdheSB0aGUgcG9vcmVyIGJ5IGEga2lzcy48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDQuMTIuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGl2LiAxMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNC4xMi4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaXYuIDEyLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpdi4gMTIuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGtpbmcgaGF2aW5nIGJlZW4gdGh1cyBhbGllbmF0ZWQsIGluIHRoZSBmaXJzdCBwbGFjZSwgSGVwaGFlc3Rpb24gZm91bmQgY3JlZGVuY2UgZm9yIGhpcyBzdG9yeSB0aGF0IENhbGxpc3RoZW5lcyBoYWQgcHJvbWlzZWQgaGltIHRvIG1ha2Ugb2JlaXNhbmNlIHRvIHRoZSBraW5nIGFuZCB0aGVuIGhhZCBiZWVuIGZhbHNlIHRvIGhpcyBhZ3JlZW1lbnQuIEFnYWluLCBtZW4gbGlrZSBMeXNpbWFjaHVzIGFuZCBIYWdub24gcGVyc2lzdGVkIGluIHNheWluZyB0aGF0IHRoZSBzb3BoaXN0IHdlbnQgYWJvdXQgd2l0aCBsb2Z0eSB0aG91Z2h0cyBhcyBpZiBiZW50IG9uIGFib2xpc2hpbmcgYSB0eXJhbm55LCBhbmQgdGhhdCB0aGUgeW91bmcgbWVuIGZsb2NrZWQgdG8gaGltIGFuZCBmb2xsb3dlZCBoaW0gYWJvdXQgYXMgaWYgaGUgd2VyZSB0aGUgb25seSBmcmVlbWFuIGFtb25nIHNvIG1hbnkgdGVucyBvZiB0aG91c2FuZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBhbHNvLCB3aGVuIHRoZSBjb25zcGlyYWN5IG9mIEhlcm1vbGHDvHMgYW5kIGhpcyBhc3NvY2lhdGVzCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgY29uc3BpcmFjeSBvZiB0aGUgcGFnZXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA0LjEzLjEiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gaXYuIDEzPC9iaWJsPikuPC9ub3RlPiBhZ2FpbnN0IEFsZXhhbmRlciB3YXMgZGlzY292ZXJlZCwgaXQgd2FzIHRob3VnaHQgdGhhdCB0aGUgYWNjdXNhdGlvbnMgb2YgaGlzIGRldHJhY3RvcnMgaGFkIGFuIGFpciBvZiBwcm9iYWJpbGl0eS4gVGhleSBzYWlkLCBuYW1lbHksIHRoYXQgd2hlbiBIZXJtb2xhw7xzIHB1dCB0aGUgcXVlc3Rpb24gdG8gaGltIGhvdyBoZSBtaWdodCBiZWNvbWUgYSBtb3N0IGlsbHVzdHJpb3VzIG1hbiwgQ2FsbGlzdGhlbmVzIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ5IGtpbGxpbmcgdGhlIG1vc3QgaWxsdXN0cmlvdXM7PC9xPiBhbmQgdGhhdCBpbiBpbmNpdGluZyBIZXJtb2xhw7xzIHRvIHRoZSBkZWVkIGhlIGJhZGUgaGltIGhhdmUgbm8gZmVhciBvZiB0aGUgZ29sZGVuIGNvdWNoLCBidXQgcmVtZW1iZXIgdGhhdCBoZSB3YXMgYXBwcm9hY2hpbmcgYSBtYW4gd2hvIHdhcyBzdWJqZWN0IHRvIHNpY2tuZXNzIGFuZCB3b3VuZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgbm90IG9uZSBvZiB0aGUgYWNjb21wbGljZXMgb2YgSGVybW9sYcO8cywgZXZlbiBpbiB0aGUgbGFzdCBleHRyZW1pdHksIGRlbm91bmNlZCBDYWxsaXN0aGVuZXMuIE5heSwgZXZlbiBBbGV4YW5kZXIgaGltc2VsZiwgaW4gdGhlIGxldHRlcnMgd2hpY2ggaGUgd3JvdGUgYXQgb25jZSB0byBDcmF0ZXJ1cywgQXR0YWx1cywgYW5kIEFsY2V0YXMsIHNheXMgdGhhdCB0aGUgeW91dGhzIGNvbmZlc3NlZCB1bmRlciB0b3J0dXJlIHRoYXQgdGhleSBoYWQgbWFkZSB0aGlzIGF0dGVtcHQgb2YgdGhlbXNlbHZlcywgYW5kIHRoYXQgbm8gb25lIGVsc2Ugd2FzIHByaXZ5IHRvIGl0LiBCdXQgaW4gYSBsZXR0ZXIgd3JpdHRlbiBsYXRlciB0byBBbnRpcGF0ZXIsIHdoZXJlaW4gaGUgYWNjdXNlcyBDYWxsaXN0aGVuZXMgYWxzbyBvZiB0aGUgY3JpbWUsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhlIHNheXM6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSB5b3V0aHMgd2VyZSBzdG9uZWQgdG8gZGVhdGggYnkgdGhlIE1hY2Vkb25pYW5zLCBidXQgdGhlIHNvcGhpc3QgSSB3aWxsIHB1bmlzaCwgdG9nZXRoZXIgd2l0aCB0aG9zZSB3aG8gc2VudCBoaW0gdG8gbWUgYW5kIHRob3NlIHdobyBoYXJib3VyIGluIHRoZWlyIGNpdGllcyBtZW4gd2hvIGNvbnNwaXJlIGFnYWluc3QgbXkgbGlmZTs8L3E+IGFuZCBpbiB0aGVzZSB3b3JkcywgYXQgbGVhc3QsIGhlIGRpcmVjdGx5IHJldmVhbHMgYSBob3N0aWxpdHkgdG8gQXJpc3RvdGxlLCBpbiB3aG9zZSBob3VzZSBDYWxsaXN0aGVuZXMsIG9uIGFjY291bnQgb2YgaGlzIHJlbGF0aW9uc2hpcCwgaGFkIGJlZW4gcmVhcmVkLCBiZWluZyBhIHNvbiBvZiBIZXJvLCB3aG8gd2FzIGEgbmllY2Ugb2YgQXJpc3RvdGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BcyB0byB0aGUgZGVhdGggb2YgQ2FsbGlzdGhlbmVzLCBzb21lIHNheSB0aGF0IGhlIHdhcyBoYW5nZWQgYnkgQWxleGFuZGVyJ3Mgb3JkZXJzLCBvdGhlcnMgdGhhdCBoZSB3YXMgYm91bmQgaGFuZCBhbmQgZm9vdCBhbmQgZGllZCBvZiBzaWNrbmVzcywgYW5kIENoYXJlcyBzYXlzIHRoYXQgYWZ0ZXIgaGlzIGFycmVzdCBoZSB3YXMga2VwdCBpbiBmZXR0ZXJzIHNldmVuIG1vbnRocywgdGhhdCBoZSBtaWdodCBiZSB0cmllZCBiZWZvcmUgYSBmdWxsIGNvdW5jaWwgd2hlbiBBcmlzdG90bGUgd2FzIHByZXNlbnQsIGJ1dCB0aGF0IGFib3V0IHRoZSB0aW1lIHdoZW4gQWxleGFuZGVyIHdhcyB3b3VuZGVkIGluIEluZGlhLCBoZSBkaWVkIGZyb20gb2Jlc2l0eSBhbmQgdGhlIGRpc2Vhc2Ugb2YgbGljZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLjxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA0LjE0LjMiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gaXYuIDE0LCAzPC9iaWJsPiBmLiwgd2hlcmUgb3RoZXIgYWNjb3VudHMgc3RpbGwgYXJlIG1lbnRpb25lZC48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['55.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGtpbmcgaGF2aW5nIGJlZW4gdGh1cyBhbGllbmF0ZWQsIGluIHRoZSBmaXJzdCBwbGFjZSwgSGVwaGFlc3Rpb24gZm91bmQgY3JlZGVuY2UgZm9yIGhpcyBzdG9yeSB0aGF0IENhbGxpc3RoZW5lcyBoYWQgcHJvbWlzZWQgaGltIHRvIG1ha2Ugb2JlaXNhbmNlIHRvIHRoZSBraW5nIGFuZCB0aGVuIGhhZCBiZWVuIGZhbHNlIHRvIGhpcyBhZ3JlZW1lbnQuIEFnYWluLCBtZW4gbGlrZSBMeXNpbWFjaHVzIGFuZCBIYWdub24gcGVyc2lzdGVkIGluIHNheWluZyB0aGF0IHRoZSBzb3BoaXN0IHdlbnQgYWJvdXQgd2l0aCBsb2Z0eSB0aG91Z2h0cyBhcyBpZiBiZW50IG9uIGFib2xpc2hpbmcgYSB0eXJhbm55LCBhbmQgdGhhdCB0aGUgeW91bmcgbWVuIGZsb2NrZWQgdG8gaGltIGFuZCBmb2xsb3dlZCBoaW0gYWJvdXQgYXMgaWYgaGUgd2VyZSB0aGUgb25seSBmcmVlbWFuIGFtb25nIHNvIG1hbnkgdGVucyBvZiB0aG91c2FuZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['55.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBhbHNvLCB3aGVuIHRoZSBjb25zcGlyYWN5IG9mIEhlcm1vbGHDvHMgYW5kIGhpcyBhc3NvY2lhdGVzCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBjb25zcGlyYWN5IG9mIHRoZSBwYWdlcyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNC4xMy4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaXYuIDEzPC9iaWJsPikuPC9ub3RlPiBhZ2FpbnN0IEFsZXhhbmRlciB3YXMgZGlzY292ZXJlZCwgaXQgd2FzIHRob3VnaHQgdGhhdCB0aGUgYWNjdXNhdGlvbnMgb2YgaGlzIGRldHJhY3RvcnMgaGFkIGFuIGFpciBvZiBwcm9iYWJpbGl0eS4gVGhleSBzYWlkLCBuYW1lbHksIHRoYXQgd2hlbiBIZXJtb2xhw7xzIHB1dCB0aGUgcXVlc3Rpb24gdG8gaGltIGhvdyBoZSBtaWdodCBiZWNvbWUgYSBtb3N0IGlsbHVzdHJpb3VzIG1hbiwgQ2FsbGlzdGhlbmVzIHNhaWQ6IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDQuMTMuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGl2LiAxMzwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaXYuIDEzPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CeSBraWxsaW5nIHRoZSBtb3N0IGlsbHVzdHJpb3VzOzwvcT4gYW5kIHRoYXQgaW4gaW5jaXRpbmcgSGVybW9sYcO8cyB0byB0aGUgZGVlZCBoZSBiYWRlIGhpbSBoYXZlIG5vIGZlYXIgb2YgdGhlIGdvbGRlbiBjb3VjaCwgYnV0IHJlbWVtYmVyIHRoYXQgaGUgd2FzIGFwcHJvYWNoaW5nIGEgbWFuIHdobyB3YXMgc3ViamVjdCB0byBzaWNrbmVzcyBhbmQgd291bmRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['55.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgbm90IG9uZSBvZiB0aGUgYWNjb21wbGljZXMgb2YgSGVybW9sYcO8cywgZXZlbiBpbiB0aGUgbGFzdCBleHRyZW1pdHksIGRlbm91bmNlZCBDYWxsaXN0aGVuZXMuIE5heSwgZXZlbiBBbGV4YW5kZXIgaGltc2VsZiwgaW4gdGhlIGxldHRlcnMgd2hpY2ggaGUgd3JvdGUgYXQgb25jZSB0byBDcmF0ZXJ1cywgQXR0YWx1cywgYW5kIEFsY2V0YXMsIHNheXMgdGhhdCB0aGUgeW91dGhzIGNvbmZlc3NlZCB1bmRlciB0b3J0dXJlIHRoYXQgdGhleSBoYWQgbWFkZSB0aGlzIGF0dGVtcHQgb2YgdGhlbXNlbHZlcywgYW5kIHRoYXQgbm8gb25lIGVsc2Ugd2FzIHByaXZ5IHRvIGl0LiBCdXQgaW4gYSBsZXR0ZXIgd3JpdHRlbiBsYXRlciB0byBBbnRpcGF0ZXIsIHdoZXJlaW4gaGUgYWNjdXNlcyBDYWxsaXN0aGVuZXMgYWxzbyBvZiB0aGUgY3JpbWUsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['55.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhlIHNheXM6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIHlvdXRocyB3ZXJlIHN0b25lZCB0byBkZWF0aCBieSB0aGUgTWFjZWRvbmlhbnMsIGJ1dCB0aGUgc29waGlzdCBJIHdpbGwgcHVuaXNoLCB0b2dldGhlciB3aXRoIHRob3NlIHdobyBzZW50IGhpbSB0byBtZSBhbmQgdGhvc2Ugd2hvIGhhcmJvdXIgaW4gdGhlaXIgY2l0aWVzIG1lbiB3aG8gY29uc3BpcmUgYWdhaW5zdCBteSBsaWZlOzwvcT4gYW5kIGluIHRoZXNlIHdvcmRzLCBhdCBsZWFzdCwgaGUgZGlyZWN0bHkgcmV2ZWFscyBhIGhvc3RpbGl0eSB0byBBcmlzdG90bGUsIGluIHdob3NlIGhvdXNlIENhbGxpc3RoZW5lcywgb24gYWNjb3VudCBvZiBoaXMgcmVsYXRpb25zaGlwLCBoYWQgYmVlbiByZWFyZWQsIGJlaW5nIGEgc29uIG9mIEhlcm8sIHdobyB3YXMgYSBuaWVjZSBvZiBBcmlzdG90bGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['55.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIHRvIHRoZSBkZWF0aCBvZiBDYWxsaXN0aGVuZXMsIHNvbWUgc2F5IHRoYXQgaGUgd2FzIGhhbmdlZCBieSBBbGV4YW5kZXIncyBvcmRlcnMsIG90aGVycyB0aGF0IGhlIHdhcyBib3VuZCBoYW5kIGFuZCBmb290IGFuZCBkaWVkIG9mIHNpY2tuZXNzLCBhbmQgQ2hhcmVzIHNheXMgdGhhdCBhZnRlciBoaXMgYXJyZXN0IGhlIHdhcyBrZXB0IGluIGZldHRlcnMgc2V2ZW4gbW9udGhzLCB0aGF0IGhlIG1pZ2h0IGJlIHRyaWVkIGJlZm9yZSBhIGZ1bGwgY291bmNpbCB3aGVuIEFyaXN0b3RsZSB3YXMgcHJlc2VudCwgYnV0IHRoYXQgYWJvdXQgdGhlIHRpbWUgd2hlbiBBbGV4YW5kZXIgd2FzIHdvdW5kZWQgaW4gSW5kaWEsIGhlIGRpZWQgZnJvbSBvYmVzaXR5IGFuZCB0aGUgZGlzZWFzZSBvZiBsaWNlLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA0LjE0LjMiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpdi4gMTQsIDM8L2JpYmw+IGYuLCB3aGVyZSBvdGhlciBhY2NvdW50cyBzdGlsbCBhcmUgbWVudGlvbmVkLjwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNC4xNC4zIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaXYuIDE0LCAzPC9iaWJsPiBmLiwgd2hlcmUgb3RoZXIgYWNjb3VudHMgc3RpbGwgYXJlIG1lbnRpb25lZC48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGl2LiAxNCwgMzxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGhvd2V2ZXIsIGJlbG9uZ3MgdG8gYSBsYXRlciB0aW1lLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNwcmluZyBvZiAzMjcgQi5DLjwvbm90ZT4gTWVhbndoaWxlIERlbWFyYXR1cyB0aGUgQ29yaW50aGlhbiwgd2hvIHdhcyBub3cgd2VsbCBvbiBpbiB5ZWFycywgd2FzIGVhZ2VybHkgZGVzaXJvdXMgb2YgZ29pbmcgdXAgdG8gQWxleGFuZGVyOyBhbmQgd2hlbiBoZSBoYWQgc2VlbiBoaW0sIGhlIHNhaWQgdGhhdCB0aG9zZSBHcmVla3Mgd2VyZSBkZXByaXZlZCBvZiBhIGdyZWF0IHBsZWFzdXJlIHdobyBoYWQgZGllZCBiZWZvcmUgc2VlaW5nIEFsZXhhbmRlciBzZWF0ZWQgb24gdGhlIHRocm9uZSBvZiBEYXJlaXVzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiAzNy40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4eHZpaS4gNDwvYmlibD4uPC9ub3RlPiBIb3dldmVyLCBoZSBkaWQgbm90IGxvbmcgZW5qb3kgdGhlIGtpbmcncyBnb29kIHdpbGwgdG93YXJkcyBoaW0sIGJ1dCBkaWVkIGZyb20gZGViaWxpdHkuIEhpcyBvYnNlcXVpZXMgd2VyZSBtYWduaWZpY2VudCwgYW5kIHRoZSBhcm15IHJhaXNlZCBpbiBoaXMgbWVtb3J5IGEgbW91bmQgb2YgZ3JlYXQgY2lyY3VtZmVyZW5jZSBhbmQgZWlnaHR5IGN1Yml0cyBpbiBoZWlnaHQuIEhpcyBhc2hlcyB3ZXJlIGNhcnJpZWQgZG93biB0byB0aGUgc2VhLWJvYXJkIG9uIGEgZm91ci1ob3JzZSBjaGFyaW90IHNwbGVuZGlkbHkgYWRvcm5lZC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['56.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcywgaG93ZXZlciwgYmVsb25ncyB0byBhIGxhdGVyIHRpbWUuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzcHJpbmcgb2YgMzI3IEIuQy48L25vdGU+IE1lYW53aGlsZSBEZW1hcmF0dXMgdGhlIENvcmludGhpYW4sIHdobyB3YXMgbm93IHdlbGwgb24gaW4geWVhcnMsIHdhcyBlYWdlcmx5IGRlc2lyb3VzIG9mIGdvaW5nIHVwIHRvIEFsZXhhbmRlcjsgYW5kIHdoZW4gaGUgaGFkIHNlZW4gaGltLCBoZSBzYWlkIHRoYXQgdGhvc2UgR3JlZWtzIHdlcmUgZGVwcml2ZWQgb2YgYSBncmVhdCBwbGVhc3VyZSB3aG8gaGFkIGRpZWQgYmVmb3JlIHNlZWluZyBBbGV4YW5kZXIgc2VhdGVkIG9uIHRoZSB0aHJvbmUgb2YgRGFyZWl1cy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDM3LjQiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh4dmlpLiA0PC9iaWJsPi48L25vdGU+IEhvd2V2ZXIsIGhlIGRpZCBub3QgbG9uZyBlbmpveSB0aGUga2luZydzIGdvb2Qgd2lsbCB0b3dhcmRzIGhpbSwgYnV0IGRpZWQgZnJvbSBkZWJpbGl0eS4gSGlzIG9ic2VxdWllcyB3ZXJlIG1hZ25pZmljZW50LCBhbmQgdGhlIGFybXkgcmFpc2VkIGluIGhpcyBtZW1vcnkgYSBtb3VuZCBvZiBncmVhdCBjaXJjdW1mZXJlbmNlIGFuZCBlaWdodHkgY3ViaXRzIGluIGhlaWdodC4gSGlzIGFzaGVzIHdlcmUgY2FycmllZCBkb3duIHRvIHRoZSBzZWEtYm9hcmQgb24gYSBmb3VyLWhvcnNlIGNoYXJpb3Qgc3BsZW5kaWRseSBhZG9ybmVkLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDM3LjQiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh4dmlpLiA0PC9iaWJsPi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbGV4YW5kZXIgd2FzIG5vdyBhYm91dCB0byBjcm9zcyB0aGUgbW91bnRhaW5zIGludG8gSW5kaWEsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgbGF0ZSBzcHJpbmcgb2YgMzI3IEIuQy48L25vdGU+IGFuZCBzaW5jZSBoZSBzYXcgdGhhdCBoaXMgYXJteSB3YXMgYnkgdGhpcyB0aW1lIGN1bWJlcmVkIHdpdGggbXVjaCBib290eSBhbmQgaGFyZCB0byBtb3ZlLCBhdCBicmVhayBvZiBkYXksIGFmdGVyIHRoZSBiYWdnYWdlLXdhZ2dvbnMgaGFkIGJlZW4gbG9hZGVkLCBoZSBidXJuZWQgZmlyc3QgdGhvc2Ugd2hpY2ggYmVsb25nZWQgdG8gaGltc2VsZiBhbmQgaGlzIGNvbXBhbmlvbnMsIGFuZCB0aGVuIGdhdmUgb3JkZXJzIHRvIHNldCBmaXJlIHRvIHRob3NlIG9mIHRoZSBNYWNlZG9uaWFucy4gQW5kIHRoZSBwbGFubmluZyBvZiB0aGUgdGhpbmcgdHVybmVkIG91dCB0byBiZSBhIGxhcmdlciBhbmQgbW9yZSBmb3JtaWRhYmxlIG1hdHRlciB0aGFuIGl0cyBleGVjdXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBnYXZlIGFubm95YW5jZSB0byBhIGZldyBvbmx5IG9mIHRoZSBzb2xkaWVycywgd2hpbGUgdGhlIG1vc3Qgb2YgdGhlbSwgd2l0aCByYXB0dXJvdXMgc2hvdXRzIGFuZCB3YXItY3JpZXMsIHNoYXJlZCB0aGVpciBuZWNlc3NhcmllcyB3aXRoIHRob3NlIHdobyB3ZXJlIGluIG5lZWQgb2YgdGhlbSwgYW5kIHdoYXQgd2FzIHN1cGVyZmx1b3VzIHRoZXkgYnVybmVkIGFuZCBkZXN0cm95ZWQgd2l0aCB0aGVpciBvd24gaGFuZHMsIHRodXMgZmlsbGluZyBBbGV4YW5kZXIgd2l0aCB6ZWFsIGFuZCBlYWdlcm5lc3MuIEJlc2lkZXMsIGhlIHdhcyBhbHJlYWR5IGdyZWF0bHkgZmVhcmVkLCBhbmQgaW5leG9yYWJsZSBpbiB0aGUgY2hhc3Rpc2VtZW50IG9mIGEgdHJhbnNncmVzc29yLiBGb3IgaW5zdGFuY2UsIHdoZW4gYSBjZXJ0YWluIE1lbmFuZGVyLCBvbmUgb2YgaGlzIGNvbXBhbmlvbnMsIHdobyBoYWQgYmVlbiBwdXQgaW4gY29tbWFuZCBvZiBhIGdhcnJpc29uLCByZWZ1c2VkIHRvIHJlbWFpbiB0aGVyZSwgaGUgcHV0IGhpbSB0byBkZWF0aDsgYW5kIE9yc29kYXRlcywgYSBCYXJiYXJpYW4gd2hvIGhhZCByZXZvbHRlZCBmcm9tIGhpbSwgaGUgc2hvdCBkb3duIHdpdGggaGlzIG93biBoYW5kLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWxleGFuZGVyIHdhcyBub3cgYWJvdXQgdG8gY3Jvc3MgdGhlIG1vdW50YWlucyBpbnRvIEluZGlhLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgbGF0ZSBzcHJpbmcgb2YgMzI3IEIuQy48L25vdGU+IGFuZCBzaW5jZSBoZSBzYXcgdGhhdCBoaXMgYXJteSB3YXMgYnkgdGhpcyB0aW1lIGN1bWJlcmVkIHdpdGggbXVjaCBib290eSBhbmQgaGFyZCB0byBtb3ZlLCBhdCBicmVhayBvZiBkYXksIGFmdGVyIHRoZSBiYWdnYWdlLXdhZ2dvbnMgaGFkIGJlZW4gbG9hZGVkLCBoZSBidXJuZWQgZmlyc3QgdGhvc2Ugd2hpY2ggYmVsb25nZWQgdG8gaGltc2VsZiBhbmQgaGlzIGNvbXBhbmlvbnMsIGFuZCB0aGVuIGdhdmUgb3JkZXJzIHRvIHNldCBmaXJlIHRvIHRob3NlIG9mIHRoZSBNYWNlZG9uaWFucy4gQW5kIHRoZSBwbGFubmluZyBvZiB0aGUgdGhpbmcgdHVybmVkIG91dCB0byBiZSBhIGxhcmdlciBhbmQgbW9yZSBmb3JtaWRhYmxlIG1hdHRlciB0aGFuIGl0cyBleGVjdXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['57.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBnYXZlIGFubm95YW5jZSB0byBhIGZldyBvbmx5IG9mIHRoZSBzb2xkaWVycywgd2hpbGUgdGhlIG1vc3Qgb2YgdGhlbSwgd2l0aCByYXB0dXJvdXMgc2hvdXRzIGFuZCB3YXItY3JpZXMsIHNoYXJlZCB0aGVpciBuZWNlc3NhcmllcyB3aXRoIHRob3NlIHdobyB3ZXJlIGluIG5lZWQgb2YgdGhlbSwgYW5kIHdoYXQgd2FzIHN1cGVyZmx1b3VzIHRoZXkgYnVybmVkIGFuZCBkZXN0cm95ZWQgd2l0aCB0aGVpciBvd24gaGFuZHMsIHRodXMgZmlsbGluZyBBbGV4YW5kZXIgd2l0aCB6ZWFsIGFuZCBlYWdlcm5lc3MuIEJlc2lkZXMsIGhlIHdhcyBhbHJlYWR5IGdyZWF0bHkgZmVhcmVkLCBhbmQgaW5leG9yYWJsZSBpbiB0aGUgY2hhc3Rpc2VtZW50IG9mIGEgdHJhbnNncmVzc29yLiBGb3IgaW5zdGFuY2UsIHdoZW4gYSBjZXJ0YWluIE1lbmFuZGVyLCBvbmUgb2YgaGlzIGNvbXBhbmlvbnMsIHdobyBoYWQgYmVlbiBwdXQgaW4gY29tbWFuZCBvZiBhIGdhcnJpc29uLCByZWZ1c2VkIHRvIHJlbWFpbiB0aGVyZSwgaGUgcHV0IGhpbSB0byBkZWF0aDsgYW5kIE9yc29kYXRlcywgYSBCYXJiYXJpYW4gd2hvIGhhZCByZXZvbHRlZCBmcm9tIGhpbSwgaGUgc2hvdCBkb3duIHdpdGggaGlzIG93biBoYW5kLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gYSBzaGVlcCB5ZWFuZWQgYSBsYW1iIHdoaWNoIGhhZCB1cG9uIGl0cyBoZWFkIHdoYXQgbG9va2VkIGxpa2UgYSB0aWFyYSBpbiBmb3JtIGFuZCBjb2xvdXIsIHdpdGggdGVzdGljbGVzIG9uIGVpdGhlciBzaWRlIG9mIGl0LCBBbGV4YW5kZXIgd2FzIGZpbGxlZCB3aXRoIGxvYXRoaW5nIGF0IHRoZSBwb3J0ZW50LCBhbmQgaGFkIGhpbXNlbGYgcHVyaWZpZWQgYnkgdGhlIEJhYnlsb25pYW5zLCB3aG9tIGhlIHdhcyBhY2N1c3RvbWVkIHRvIHRha2UgYWxvbmcgd2l0aCBoaW0gZm9yIHN1Y2ggcHVycG9zZXM7IGFuZCBpbiBjb252ZXJzYXRpb24gd2l0aCBoaXMgZnJpZW5kcyBoZSBzYWlkIHRoYXQgaGUgd2FzIG5vdCBkaXN0dXJiZWQgZm9yIGhpcyBvd24gc2FrZSwgYnV0IGZvciB0aGVpcnMsIGZlYXJpbmcgbGVzdCBhZnRlciBoaXMgZGVhdGggSGVhdmVuIG1pZ2h0IGRldm9sdmUgaGlzIHBvd2VyIHVwb24gYW4gaWdub2JsZSBhbmQgaW1wb3RlbnQgbWFuLiBIb3dldmVyLCBhIGJldHRlciBwb3J0ZW50IG9jY3VycmVkIGFuZCBwdXQgYW4gZW5kIHRvIGhpcyBkZWplY3Rpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBNYWNlZG9uaWFuLCBuYW1lbHksIHdobyB3YXMgc2V0IG92ZXIgdGhvc2UgaW4gY2hhcmdlIG9mIHRoZSByb3lhbCBlcXVpcGFnZSwgUHJveGVudXMgYnkgbmFtZSwgYXMgaGUgd2FzIGRpZ2dpbmcgYSBwbGFjZSBmb3IgdGhlIGtpbmcncyB0ZW50IGFsb25nIHRoZSByaXZlciBPeHVzLCB1bmNvdmVyZWQgYSBzcHJpbmcgb2YgbGlxdWlkIHdoaWNoIHdhcyBvaWx5IGFuZCBmYXR0eTsgYnV0IHdoZW4gdGhlIHRvcCBvZiBpdCB3YXMgZHJhd24gb2ZmLCB0aGVyZSBmbG93ZWQgYXQgb25jZSBhIHB1cmUgYW5kIGNsZWFyIG9pbCwgd2hpY2ggYXBwZWFyZWQgdG8gZGlmZmVyIGZyb20gb2xpdmUgb2lsIG5laXRoZXIgaW4gb2RvdXIgbm9yIGluIGZsYXZvdXIsIGFuZCBpbiBzbW9vdGhuZXNzIGFuZCBsdXN0cmUgd2FzIGFsdG9nZXRoZXIgdGhlIHNhbWUsIGFuZCB0aGF0IHRvbyB0aG91Z2ggdGhlIGNvdW50cnkgcHJvZHVjZWQgbm8gb2xpdmUgdHJlZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIGluZGVlZCwgdGhhdCB0aGUgT3h1cyBpdHNlbGYgYWxzbyBoYXMgYSB2ZXJ5IHNvZnQgd2F0ZXIsIHdoaWNoIGdpdmVzIHNsZWVrbmVzcyB0byB0aGUgc2tpbiBvZiB0aG9zZSB3aG8gYmF0aGUgaW4gaXQuIEhvd2V2ZXIsIHRoYXQgQWxleGFuZGVyIHdhcyBtYXJ2ZWxsb3VzbHkgcGxlYXNlZCBpcyBjbGVhciBmcm9tIHdoYXQgaGUgd3JpdGVzIHRvIEFudGlwYXRlciwgd2hlcmUgaGUgc3BlYWtzIG9mIHRoaXMgYXMgb25lIG9mIHRoZSBncmVhdGVzdCBvbWVucyB2b3VjaHNhZmVkIHRvIGhpbSBmcm9tIEhlYXZlbi4gVGhlIHNlZXJzLCBob3dldmVyLCBoZWxkIHRoYXQgdGhlIG9tZW4gZm9yZXNoYWRvd2VkIGFuIGV4cGVkaXRpb24gd2hpY2ggd291bGQgYmUgZ2xvcmlvdXMsIGJ1dCBkaWZmaWN1bHQgYW5kIHRvaWxzb21lOyBmb3Igb2lsLCB0aGV5IHNhaWQsIHdhcyBnaXZlbiB0byBtZW4gYnkgSGVhdmVuIGFzIGFuIGFpZCB0byB0b2lsLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gYSBzaGVlcCB5ZWFuZWQgYSBsYW1iIHdoaWNoIGhhZCB1cG9uIGl0cyBoZWFkIHdoYXQgbG9va2VkIGxpa2UgYSB0aWFyYSBpbiBmb3JtIGFuZCBjb2xvdXIsIHdpdGggdGVzdGljbGVzIG9uIGVpdGhlciBzaWRlIG9mIGl0LCBBbGV4YW5kZXIgd2FzIGZpbGxlZCB3aXRoIGxvYXRoaW5nIGF0IHRoZSBwb3J0ZW50LCBhbmQgaGFkIGhpbXNlbGYgcHVyaWZpZWQgYnkgdGhlIEJhYnlsb25pYW5zLCB3aG9tIGhlIHdhcyBhY2N1c3RvbWVkIHRvIHRha2UgYWxvbmcgd2l0aCBoaW0gZm9yIHN1Y2ggcHVycG9zZXM7IGFuZCBpbiBjb252ZXJzYXRpb24gd2l0aCBoaXMgZnJpZW5kcyBoZSBzYWlkIHRoYXQgaGUgd2FzIG5vdCBkaXN0dXJiZWQgZm9yIGhpcyBvd24gc2FrZSwgYnV0IGZvciB0aGVpcnMsIGZlYXJpbmcgbGVzdCBhZnRlciBoaXMgZGVhdGggSGVhdmVuIG1pZ2h0IGRldm9sdmUgaGlzIHBvd2VyIHVwb24gYW4gaWdub2JsZSBhbmQgaW1wb3RlbnQgbWFuLiBIb3dldmVyLCBhIGJldHRlciBwb3J0ZW50IG9jY3VycmVkIGFuZCBwdXQgYW4gZW5kIHRvIGhpcyBkZWplY3Rpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['57.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBNYWNlZG9uaWFuLCBuYW1lbHksIHdobyB3YXMgc2V0IG92ZXIgdGhvc2UgaW4gY2hhcmdlIG9mIHRoZSByb3lhbCBlcXVpcGFnZSwgUHJveGVudXMgYnkgbmFtZSwgYXMgaGUgd2FzIGRpZ2dpbmcgYSBwbGFjZSBmb3IgdGhlIGtpbmcncyB0ZW50IGFsb25nIHRoZSByaXZlciBPeHVzLCB1bmNvdmVyZWQgYSBzcHJpbmcgb2YgbGlxdWlkIHdoaWNoIHdhcyBvaWx5IGFuZCBmYXR0eTsgYnV0IHdoZW4gdGhlIHRvcCBvZiBpdCB3YXMgZHJhd24gb2ZmLCB0aGVyZSBmbG93ZWQgYXQgb25jZSBhIHB1cmUgYW5kIGNsZWFyIG9pbCwgd2hpY2ggYXBwZWFyZWQgdG8gZGlmZmVyIGZyb20gb2xpdmUgb2lsIG5laXRoZXIgaW4gb2RvdXIgbm9yIGluIGZsYXZvdXIsIGFuZCBpbiBzbW9vdGhuZXNzIGFuZCBsdXN0cmUgd2FzIGFsdG9nZXRoZXIgdGhlIHNhbWUsIGFuZCB0aGF0IHRvbyB0aG91Z2ggdGhlIGNvdW50cnkgcHJvZHVjZWQgbm8gb2xpdmUgdHJlZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['57.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIGluZGVlZCwgdGhhdCB0aGUgT3h1cyBpdHNlbGYgYWxzbyBoYXMgYSB2ZXJ5IHNvZnQgd2F0ZXIsIHdoaWNoIGdpdmVzIHNsZWVrbmVzcyB0byB0aGUgc2tpbiBvZiB0aG9zZSB3aG8gYmF0aGUgaW4gaXQuIEhvd2V2ZXIsIHRoYXQgQWxleGFuZGVyIHdhcyBtYXJ2ZWxsb3VzbHkgcGxlYXNlZCBpcyBjbGVhciBmcm9tIHdoYXQgaGUgd3JpdGVzIHRvIEFudGlwYXRlciwgd2hlcmUgaGUgc3BlYWtzIG9mIHRoaXMgYXMgb25lIG9mIHRoZSBncmVhdGVzdCBvbWVucyB2b3VjaHNhZmVkIHRvIGhpbSBmcm9tIEhlYXZlbi4gVGhlIHNlZXJzLCBob3dldmVyLCBoZWxkIHRoYXQgdGhlIG9tZW4gZm9yZXNoYWRvd2VkIGFuIGV4cGVkaXRpb24gd2hpY2ggd291bGQgYmUgZ2xvcmlvdXMsIGJ1dCBkaWZmaWN1bHQgYW5kIHRvaWxzb21lOyBmb3Igb2lsLCB0aGV5IHNhaWQsIHdhcyBnaXZlbiB0byBtZW4gYnkgSGVhdmVuIGFzIGFuIGFpZCB0byB0b2lsLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBpdCBwcm92ZWQ7IGZvciBoZSBlbmNvdW50ZXJlZCBtYW55IHBlcmlscyBpbiB0aGUgYmF0dGxlcyB3aGljaCBoZSBmb3VnaHQsIGFuZCByZWNlaXZlZCB2ZXJ5IHNldmVyZSB3b3VuZHM7IGJ1dCB0aGUgZ3JlYXRlc3QgbG9zc2VzIHdoaWNoIGhpcyBhcm15IHN1ZmZlcmVkIHdlcmUgY2F1c2VkIGJ5IGxhY2sgb2YgbmVjZXNzYXJ5IHByb3Zpc2lvbnMgYW5kIHNldmVyaXR5IG9mIHdlYXRoZXIuIFN0aWxsLCBoZSB3YXMgZWFnZXIgdG8gb3ZlcmNvbWUgZm9ydHVuZSBieSBib2xkbmVzcyBhbmQgZm9yY2UgYnkgdmFsb3VyLCBhbmQgdGhvdWdodCBub3RoaW5nIGludmluY2libGUgZm9yIHRoZSBjb3VyYWdlb3VzLCBhbmQgbm90aGluZyBzZWN1cmUgZm9yIHRoZSBjb3dhcmRseS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2FpZCB0aGF0IHdoZW4gaGUgd2FzIGJlc2llZ2luZyB0aGUgY2l0YWRlbCBvZiBTaXNpbWl0aHJlcywgd2hpY2ggd2FzIHN0ZWVwIGFuZCBpbmFjY2Vzc2libGUsIHNvIHRoYXQgaGlzIHNvbGRpZXJzIHdlcmUgZGlzaGVhcnRlbmVkLCBoZSBhc2tlZCBPeHlhcnRlcyB3aGF0IHNvcnQgb2YgYSBtYW4gU2lzaW1pdGhyZXMgaGltc2VsZiB3YXMgaW4gcG9pbnQgb2Ygc3Bpcml0LiBBbmQgd2hlbiBPeHlhcnRlcyByZXBsaWVkIHRoYXQgaGUgd2FzIG1vc3QgY293YXJkbHkgb2YgbWVuLCA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaHkgd29yZHMgbWVhbiw8L3E+IHNhaWQgQWxleGFuZGVyLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYXQgd2UgY2FuIHRha2UgdGhlIGNpdGFkZWwsIHNpbmNlIGhlIHdobyBjb21tYW5kcyBpdCBpcyBhIHdlYWsgdGhpbmcuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgaGUgZGlkIHRha2UgdGhlIGNpdGFkZWwgYnkgZnJpZ2h0ZW5pbmcgU2lzaW1pdGhyZXMuIEFnYWluLCBhZnRlciBhdHRhY2tpbmcgYW5vdGhlciBjaXRhZGVsIGVxdWFsbHkgcHJlY2lwaXRvdXMsIGhlIHdhcyB1cmdpbmcgb24gdGhlIHlvdW5nZXIgTWFjZWRvbmlhbnMsIGFuZCBhZGRyZXNzaW5nIG9uZSB3aG8gYm9yZSB0aGUgbmFtZSBvZiBBbGV4YW5kZXIsIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGJlaG9vdmVzIHRoZWUsIGF0IGxlYXN0LCB0byBiZSBhIGJyYXZlIG1hbiwgZXZlbiBmb3IgdGh5IG5hbWUncyBzYWtlLjwvcT4gQW5kIHdoZW4gdGhlIHlvdW5nIG1hbiwgZmlnaHRpbmcgZ2xvcmlvdXNseSwgZmVsbCwgdGhlIGtpbmcgd2FzIHBhaW5lZCBiZXlvbmQgbWVhc3VyZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGF0IGFub3RoZXIgdGltZSwgd2hlbiBoaXMgTWFjZWRvbmlhbnMgaGVzaXRhdGVkIHRvIGFkdmFuY2UgdXBvbiB0aGUgY2l0YWRlbCBjYWxsZWQgTnlzYSBiZWNhdXNlIHRoZXJlIHdhcyBhIGRlZXAgcml2ZXIgaW4gZnJvbnQgb2YgaXQsIEFsZXhhbmRlciwgaGFsdGluZyBvbiB0aGUgYmFuaywgY3JpZWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1vc3QgbWlzZXJhYmxlIG1hbiB0aGF0IEkgYW0sIHdoeSwgcHJheSwgaGF2ZSBJIG5vdCBsZWFybmVkIHRvIHN3aW0/PC9xPiBhbmQgYXQgb25jZSwgY2FycnlpbmcgaGlzIHNoaWVsZCwgaGUgd291bGQgaGF2ZSB0cmllZCB0byBjcm9zcy4gQW5kIHdoZW4sIGFmdGVyIGhlIGhhZCBwdXQgYSBzdG9wIHRvIHRoZSBmaWdodGluZywgYW1iYXNzYWRvcnMgY2FtZSBmcm9tIHRoZSBiZWxlYWd1ZXJlZCBjaXRpZXMgdG8gYmVnIGZvciB0ZXJtcywgdGhleSB3ZXJlIGFtYXplZCwgdG8gYmVnaW4gd2l0aCwgdG8gc2VlIGhpbSBpbiBmdWxsIGFybW91ciBhbmQgd2l0aG91dCBhbiBhdHRlbmRhbnQ7IGFuZCBiZXNpZGVzLCB3aGVuIGEgY3VzaGlvbiB3YXMgYnJvdWdodCBoaW0gZm9yIGhpcyB1c2UsIGhlIG9yZGVyZWQgdGhlIGVsZGVzdCBvZiB0aGUgYW1iYXNzYWRvcnMsIEFjdXBoaXMgYnkgbmFtZSwgdG8gdGFrZSBpdCBmb3IgaGlzIHNlYXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjdXBoaXMsIGFjY29yZGluZ2x5LCBhc3RvbmlzaGVkIGF0IGhpcyBtYWduYW5pbWl0eSBhbmQgY291cnRlc3ksIGFza2VkIHdoYXQgaGUgd2lzaGVkIHRoZW0gdG8gZG8gaW4gb3JkZXIgdG8gYmUgaGlzIGZyaWVuZHMuIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoeSBjb3VudHJ5bWVuLDwvcT4gc2FpZCBBbGV4YW5kZXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bXVzdCBtYWtlIHRoZWUgdGhlaXIgcnVsZXIsIGFuZCBzZW5kIG1lIGEgaHVuZHJlZCBvZiB0aGVpciBiZXN0IG1lbi48L3E+IEF0IHRoaXMgQWN1cGhpcyBsYXVnaGVkLCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksIE8gS2luZywgSSBzaGFsbCBydWxlIGJldHRlciBpZiBJIHNlbmQgdG8gdGhlZSB0aGUgd29yc3QgbWVuIHJhdGhlciB0aGFuIHRoZSBiZXN0LjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA1LjIuMSI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiB2LiAyLCAxLTM8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['58.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIGl0IHByb3ZlZDsgZm9yIGhlIGVuY291bnRlcmVkIG1hbnkgcGVyaWxzIGluIHRoZSBiYXR0bGVzIHdoaWNoIGhlIGZvdWdodCwgYW5kIHJlY2VpdmVkIHZlcnkgc2V2ZXJlIHdvdW5kczsgYnV0IHRoZSBncmVhdGVzdCBsb3NzZXMgd2hpY2ggaGlzIGFybXkgc3VmZmVyZWQgd2VyZSBjYXVzZWQgYnkgbGFjayBvZiBuZWNlc3NhcnkgcHJvdmlzaW9ucyBhbmQgc2V2ZXJpdHkgb2Ygd2VhdGhlci4gU3RpbGwsIGhlIHdhcyBlYWdlciB0byBvdmVyY29tZSBmb3J0dW5lIGJ5IGJvbGRuZXNzIGFuZCBmb3JjZSBieSB2YWxvdXIsIGFuZCB0aG91Z2h0IG5vdGhpbmcgaW52aW5jaWJsZSBmb3IgdGhlIGNvdXJhZ2VvdXMsIGFuZCBub3RoaW5nIHNlY3VyZSBmb3IgdGhlIGNvd2FyZGx5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['58.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdGhhdCB3aGVuIGhlIHdhcyBiZXNpZWdpbmcgdGhlIGNpdGFkZWwgb2YgU2lzaW1pdGhyZXMsIHdoaWNoIHdhcyBzdGVlcCBhbmQgaW5hY2Nlc3NpYmxlLCBzbyB0aGF0IGhpcyBzb2xkaWVycyB3ZXJlIGRpc2hlYXJ0ZW5lZCwgaGUgYXNrZWQgT3h5YXJ0ZXMgd2hhdCBzb3J0IG9mIGEgbWFuIFNpc2ltaXRocmVzIGhpbXNlbGYgd2FzIGluIHBvaW50IG9mIHNwaXJpdC4gQW5kIHdoZW4gT3h5YXJ0ZXMgcmVwbGllZCB0aGF0IGhlIHdhcyBtb3N0IGNvd2FyZGx5IG9mIG1lbiwgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaHkgd29yZHMgbWVhbiw8L3E+IHNhaWQgQWxleGFuZGVyLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCB3ZSBjYW4gdGFrZSB0aGUgY2l0YWRlbCwgc2luY2UgaGUgd2hvIGNvbW1hbmRzIGl0IGlzIGEgd2VhayB0aGluZy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['58.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgaGUgZGlkIHRha2UgdGhlIGNpdGFkZWwgYnkgZnJpZ2h0ZW5pbmcgU2lzaW1pdGhyZXMuIEFnYWluLCBhZnRlciBhdHRhY2tpbmcgYW5vdGhlciBjaXRhZGVsIGVxdWFsbHkgcHJlY2lwaXRvdXMsIGhlIHdhcyB1cmdpbmcgb24gdGhlIHlvdW5nZXIgTWFjZWRvbmlhbnMsIGFuZCBhZGRyZXNzaW5nIG9uZSB3aG8gYm9yZSB0aGUgbmFtZSBvZiBBbGV4YW5kZXIsIHNhaWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgYmVob292ZXMgdGhlZSwgYXQgbGVhc3QsIHRvIGJlIGEgYnJhdmUgbWFuLCBldmVuIGZvciB0aHkgbmFtZSdzIHNha2UuPC9xPiBBbmQgd2hlbiB0aGUgeW91bmcgbWFuLCBmaWdodGluZyBnbG9yaW91c2x5LCBmZWxsLCB0aGUga2luZyB3YXMgcGFpbmVkIGJleW9uZCBtZWFzdXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['58.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhdCBhbm90aGVyIHRpbWUsIHdoZW4gaGlzIE1hY2Vkb25pYW5zIGhlc2l0YXRlZCB0byBhZHZhbmNlIHVwb24gdGhlIGNpdGFkZWwgY2FsbGVkIE55c2EgYmVjYXVzZSB0aGVyZSB3YXMgYSBkZWVwIHJpdmVyIGluIGZyb250IG9mIGl0LCBBbGV4YW5kZXIsIGhhbHRpbmcgb24gdGhlIGJhbmssIGNyaWVkOiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1vc3QgbWlzZXJhYmxlIG1hbiB0aGF0IEkgYW0sIHdoeSwgcHJheSwgaGF2ZSBJIG5vdCBsZWFybmVkIHRvIHN3aW0/PC9xPiBhbmQgYXQgb25jZSwgY2FycnlpbmcgaGlzIHNoaWVsZCwgaGUgd291bGQgaGF2ZSB0cmllZCB0byBjcm9zcy4gQW5kIHdoZW4sIGFmdGVyIGhlIGhhZCBwdXQgYSBzdG9wIHRvIHRoZSBmaWdodGluZywgYW1iYXNzYWRvcnMgY2FtZSBmcm9tIHRoZSBiZWxlYWd1ZXJlZCBjaXRpZXMgdG8gYmVnIGZvciB0ZXJtcywgdGhleSB3ZXJlIGFtYXplZCwgdG8gYmVnaW4gd2l0aCwgdG8gc2VlIGhpbSBpbiBmdWxsIGFybW91ciBhbmQgd2l0aG91dCBhbiBhdHRlbmRhbnQ7IGFuZCBiZXNpZGVzLCB3aGVuIGEgY3VzaGlvbiB3YXMgYnJvdWdodCBoaW0gZm9yIGhpcyB1c2UsIGhlIG9yZGVyZWQgdGhlIGVsZGVzdCBvZiB0aGUgYW1iYXNzYWRvcnMsIEFjdXBoaXMgYnkgbmFtZSwgdG8gdGFrZSBpdCBmb3IgaGlzIHNlYXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['58.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjdXBoaXMsIGFjY29yZGluZ2x5LCBhc3RvbmlzaGVkIGF0IGhpcyBtYWduYW5pbWl0eSBhbmQgY291cnRlc3ksIGFza2VkIHdoYXQgaGUgd2lzaGVkIHRoZW0gdG8gZG8gaW4gb3JkZXIgdG8gYmUgaGlzIGZyaWVuZHMuIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGh5IGNvdW50cnltZW4sPC9xPiBzYWlkIEFsZXhhbmRlciwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPm11c3QgbWFrZSB0aGVlIHRoZWlyIHJ1bGVyLCBhbmQgc2VuZCBtZSBhIGh1bmRyZWQgb2YgdGhlaXIgYmVzdCBtZW4uPC9xPiBBdCB0aGlzIEFjdXBoaXMgbGF1Z2hlZCwgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksIE8gS2luZywgSSBzaGFsbCBydWxlIGJldHRlciBpZiBJIHNlbmQgdG8gdGhlZSB0aGUgd29yc3QgbWVuIHJhdGhlciB0aGFuIHRoZSBiZXN0LjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNS4yLjEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2LiAyLCAxLTM8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNS4yLjEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2LiAyLCAxLTM8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdi4gMiwgMS0zPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGF4aWxlcywgd2UgYXJlIHRvbGQsIGhhZCBhIHJlYWxtIGluIEluZGlhIGFzIGxhcmdlIGFzIEVneXB0LCB3aXRoIGdvb2QgcGFzdHVyYWdlLCB0b28sIGFuZCBpbiB0aGUgaGlnaGVzdCBkZWdyZWUgcHJvZHVjdGl2ZSBvZiBiZWF1dGlmdWwgZnJ1aXRzLiBIZSB3YXMgYWxzbyBhIHdpc2UgbWFuIGluIGhpcyB3YXksIGFuZCBhZnRlciBoZSBoYWQgZ3JlZXRlZCBBbGV4YW5kZXIsIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSBtdXN0IHdlIHdhciBhbmQgZmlnaHQgd2l0aCBvbmUgYW5vdGhlciwgQWxleGFuZGVyLCBpZiB0aG91IGFydCBub3QgY29tZSB0byByb2IgdXMgb2Ygd2F0ZXIgb3Igb2YgbmVjZXNzYXJ5IHN1c3RlbmFuY2UsIHRoZSBvbmx5IHRoaW5ncyBmb3Igd2hpY2ggbWVuIG9mIHNlbnNlIGFyZSBvYmxpZ2VkIHRvIGZpZ2h0IG9ic3RpbmF0ZWx5PyAKCQkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIG90aGVyIHdlYWx0aCBhbmQgcG9zc2Vzc2lvbnMsIHNvLWNhbGxlZCwgaWYgSSBhbSB0aHkgc3VwZXJpb3IgdGhlcmVpbiwgSSBhbSByZWFkeSB0byBjb25mZXIgZmF2b3VyczsgYnV0IGlmIHRoaW5lIGluZmVyaW9yLCBJIHdpbGwgbm90IG9iamVjdCB0byB0aGFua2luZyB5b3UgZm9yIGZhdm91cnMgY29uZmVycmVkLjwvcT4gQXQgdGhpcyBBbGV4YW5kZXIgd2FzIGRlbGlnaHRlZCwgYW5kIGNsYXNwaW5nIHRoZSBraW5nJ3MgaGFuZCwgc2FpZDogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2Fuc3QgdGhvdSB0aGluaywgcHJheSwgdGhhdCBhZnRlciBzdWNoIHdvcmRzIG9mIGtpbmRuZXNzIG91ciBpbnRlcnZpZXcgaXMgdG8gZW5kIHdpdGhvdXQgYSBiYXR0bGU/IE5heSwgdGhvdSBzaGFsdCBub3QgZ2V0IHRoZSBiZXR0ZXIgb2YgbWU7IGZvciBJIHdpbGwgY29udGVuZCBhZ2FpbnN0IHRoZWUgYW5kIGZpZ2h0IHRvIHRoZSBsYXN0IHdpdGggbXkgZmF2b3VycywgdGhhdCB0aG91IG1heWVzdCBub3Qgc3VycGFzcyBtZSBpbiBnZW5lcm9zaXR5LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TbywgYWZ0ZXIgcmVjZWl2aW5nIG1hbnkgZ2lmdHMgYW5kIGdpdmluZyBtYW55IG1vcmUsIGF0IGxhc3QgaGUgbGF2aXNoZWQgdXBvbiBoaW0gYSB0aG91c2FuZCB0YWxlbnRzIGluIGNvaW5lZCBtb25leS4gVGhpcyBjb25kdWN0IGdyZWF0bHkgdmV4ZWQgQWxleGFuZGVyJ3MgZnJpZW5kcywgYnV0IGl0IG1hZGUgbWFueSBvZiB0aGUgQmFyYmFyaWFucyBsb29rIHVwb24gaGltIG1vcmUga2luZGx5LjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['59.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGF4aWxlcywgd2UgYXJlIHRvbGQsIGhhZCBhIHJlYWxtIGluIEluZGlhIGFzIGxhcmdlIGFzIEVneXB0LCB3aXRoIGdvb2QgcGFzdHVyYWdlLCB0b28sIGFuZCBpbiB0aGUgaGlnaGVzdCBkZWdyZWUgcHJvZHVjdGl2ZSBvZiBiZWF1dGlmdWwgZnJ1aXRzLiBIZSB3YXMgYWxzbyBhIHdpc2UgbWFuIGluIGhpcyB3YXksIGFuZCBhZnRlciBoZSBoYWQgZ3JlZXRlZCBBbGV4YW5kZXIsIHNhaWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5IG11c3Qgd2Ugd2FyIGFuZCBmaWdodCB3aXRoIG9uZSBhbm90aGVyLCBBbGV4YW5kZXIsIGlmIHRob3UgYXJ0IG5vdCBjb21lIHRvIHJvYiB1cyBvZiB3YXRlciBvciBvZiBuZWNlc3Nhcnkgc3VzdGVuYW5jZSwgdGhlIG9ubHkgdGhpbmdzIGZvciB3aGljaCBtZW4gb2Ygc2Vuc2UgYXJlIG9ibGlnZWQgdG8gZmlnaHQgb2JzdGluYXRlbHk/IAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBvdGhlciB3ZWFsdGggYW5kIHBvc3Nlc3Npb25zLCBzby1jYWxsZWQsIGlmIEkgYW0gdGh5IHN1cGVyaW9yIHRoZXJlaW4sIEkgYW0gcmVhZHkgdG8gY29uZmVyIGZhdm91cnM7IGJ1dCBpZiB0aGluZSBpbmZlcmlvciwgSSB3aWxsIG5vdCBvYmplY3QgdG8gdGhhbmtpbmcgeW91IGZvciBmYXZvdXJzIGNvbmZlcnJlZC48L3E+IEF0IHRoaXMgQWxleGFuZGVyIHdhcyBkZWxpZ2h0ZWQsIGFuZCBjbGFzcGluZyB0aGUga2luZydzIGhhbmQsIHNhaWQ6IDwvdHJhbnNsYXRpb24+"
translation['59.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBvdGhlciB3ZWFsdGggYW5kIHBvc3Nlc3Npb25zLCBzby1jYWxsZWQsIGlmIEkgYW0gdGh5IHN1cGVyaW9yIHRoZXJlaW4sIEkgYW0gcmVhZHkgdG8gY29uZmVyIGZhdm91cnM7IGJ1dCBpZiB0aGluZSBpbmZlcmlvciwgSSB3aWxsIG5vdCBvYmplY3QgdG8gdGhhbmtpbmcgeW91IGZvciBmYXZvdXJzIGNvbmZlcnJlZC48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhbnN0IHRob3UgdGhpbmssIHByYXksIHRoYXQgYWZ0ZXIgc3VjaCB3b3JkcyBvZiBraW5kbmVzcyBvdXIgaW50ZXJ2aWV3IGlzIHRvIGVuZCB3aXRob3V0IGEgYmF0dGxlPyBOYXksIHRob3Ugc2hhbHQgbm90IGdldCB0aGUgYmV0dGVyIG9mIG1lOyBmb3IgSSB3aWxsIGNvbnRlbmQgYWdhaW5zdCB0aGVlIGFuZCBmaWdodCB0byB0aGUgbGFzdCB3aXRoIG15IGZhdm91cnMsIHRoYXQgdGhvdSBtYXllc3Qgbm90IHN1cnBhc3MgbWUgaW4gZ2VuZXJvc2l0eS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['59.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvLCBhZnRlciByZWNlaXZpbmcgbWFueSBnaWZ0cyBhbmQgZ2l2aW5nIG1hbnkgbW9yZSwgYXQgbGFzdCBoZSBsYXZpc2hlZCB1cG9uIGhpbSBhIHRob3VzYW5kIHRhbGVudHMgaW4gY29pbmVkIG1vbmV5LiBUaGlzIGNvbmR1Y3QgZ3JlYXRseSB2ZXhlZCBBbGV4YW5kZXIncyBmcmllbmRzLCBidXQgaXQgbWFkZSBtYW55IG9mIHRoZSBCYXJiYXJpYW5zIGxvb2sgdXBvbiBoaW0gbW9yZSBraW5kbHkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgYmVzdCBmaWdodGVycyBhbW9uZyB0aGUgSW5kaWFucywgaG93ZXZlciwgd2VyZSBtZXJjZW5hcmllcywgYW5kIHRoZXkgdXNlZCB0byBnbyBhYm91dCB0byB0aGUgZGlmZmVyZW50IGNpdGllcyBhbmQgZGVmZW5kIHRoZW0gc3R1cmRpbHksIGFuZCB3cm91Z2h0IG11Y2ggaGFybSB0byBBbGV4YW5kZXIncyBjYXVzZS4gVGhlcmVmb3JlLCBhZnRlciBoZSBoYWQgbWFkZSBhIHRydWNlIHdpdGggdGhlbSBpbiBhIGNlcnRhaW4gY2l0eSBhbmQgYWxsb3dlZCB0aGVtIHRvIGRlcGFydCwgaGUgZmVsbCB1cG9uIHRoZW0gYXMgdGhleSBtYXJjaGVkIGFuZCBzbGV3IHRoZW0gYWxsLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIGFjdCBhZGhlcmVzIGxpa2UgYSBzdGFpbiB0byBoaXMgbWlsaXRhcnkgY2FyZWVyOyBpbiBhbGwgb3RoZXIgaW5zdGFuY2VzIGhlIHdhZ2VkIHdhciBhY2NvcmRpbmcgdG8gdXNhZ2UgYW5kIGxpa2UgYSBraW5nLiBUaGUgcGhpbG9zb3BoZXJzLCB0b28sIG5vIGxlc3MgdGhhbiB0aGUgbWVyY2VuYXJpZXMsIGdhdmUgaGltIHRyb3VibGUsIGJ5IGFidXNpbmcgdGhvc2Ugb2YgdGhlIG5hdGl2ZSBwcmluY2VzIHdobyBhdHRhY2hlZCB0aGVtc2VsdmVzIHRvIGhpcyBjYXVzZSwgYW5kIGJ5IGluY2l0aW5nIHRoZSBmcmVlIHBlb3BsZXMgdG8gcmV2b2x0LiBIZSB0aGVyZWZvcmUgdG9vayBtYW55IG9mIHRoZXNlIGFsc28gYW5kIGhhbmdlZCB0aGVtLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['59.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIGFjdCBhZGhlcmVzIGxpa2UgYSBzdGFpbiB0byBoaXMgbWlsaXRhcnkgY2FyZWVyOyBpbiBhbGwgb3RoZXIgaW5zdGFuY2VzIGhlIHdhZ2VkIHdhciBhY2NvcmRpbmcgdG8gdXNhZ2UgYW5kIGxpa2UgYSBraW5nLiBUaGUgcGhpbG9zb3BoZXJzLCB0b28sIG5vIGxlc3MgdGhhbiB0aGUgbWVyY2VuYXJpZXMsIGdhdmUgaGltIHRyb3VibGUsIGJ5IGFidXNpbmcgdGhvc2Ugb2YgdGhlIG5hdGl2ZSBwcmluY2VzIHdobyBhdHRhY2hlZCB0aGVtc2VsdmVzIHRvIGhpcyBjYXVzZSwgYW5kIGJ5IGluY2l0aW5nIHRoZSBmcmVlIHBlb3BsZXMgdG8gcmV2b2x0LiBIZSB0aGVyZWZvcmUgdG9vayBtYW55IG9mIHRoZXNlIGFsc28gYW5kIGhhbmdlZCB0aGVtLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9mIGhpcyBjYW1wYWlnbiBhZ2FpbnN0IFBvcnVzCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgQXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiB2LiA5LTE5LiBJdCB3YXMgaW4gdGhlIHNwcmluZyBvZiAzMjYgQi5DLjwvbm90ZT4gaGUgaGltc2VsZiBoYXMgZ2l2ZW4gYW4gYWNjb3VudCBpbiBoaXMgbGV0dGVycy4gSGUgc2F5cywgbmFtZWx5LCB0aGF0IHRoZSByaXZlciBIeWRhc3BlcyBmbG93ZWQgYmV0d2VlbiB0aGUgdHdvIGNhbXBzLCBhbmQgdGhhdCBQb3J1cyBzdGF0aW9uZWQgaGlzIGVsZXBoYW50cyBvbiB0aGUgb3Bwb3NpdGUgYmFuayBhbmQga2VwdCBjb250aW51YWwgd2F0Y2ggb2YgdGhlIGNyb3NzaW5nLiBIZSBoaW1zZWxmIGFjY29yZGluZ2x5LCBkYXkgYnkgZGF5IGNhdXNlZCBhIGdyZWF0IGRpbiBhbmQgdHVtdWx0IHRvIGJlIG1hZGUgaW4gaGlzIGNhbXAsIGFuZCB0aGVyZWJ5IGFjY3VzdG9tZWQgdGhlIEJhcmJhcmlhbnMgbm90IHRvIGJlIGFsYXJtZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIG9uIGEgZGFyayBhbmQgc3Rvcm15IG5pZ2h0LCBoZSB0b29rIGEgcGFydCBvZiBoaXMgaW5mYW50cnkgYW5kIHRoZSBiZXN0IG9mIGhpcyBob3JzZW1lbiwgYW5kIGFmdGVyIHByb2NlZWRpbmcgYWxvbmcgdGhlIHJpdmVyIHRvIGEgZGlzdGFuY2UgZnJvbSB3aGVyZSB0aGUgZW5lbXkgbGF5LCBjcm9zc2VkIG92ZXIgdG8gYSBzbWFsbCBpc2xhbmQuIEhlcmUgcmFpbiBmZWxsIGluIHRvcnJlbnRzLCBhbmQgbWFueSB0b3JuYWRvZXMgYW5kIHRodW5kZXItYm9sdHMgZGFzaGVkIGRvd24gdXBvbiBoaXMgbWVuOyBidXQgbmV2ZXJ0aGVsZXNzLCBhbHRob3VnaCBoZSBzYXcgdGhhdCBtYW55IG9mIHRoZW0gd2VyZSBiZWluZyBidXJuZWQgdG8gZGVhdGggYnkgdGhlIHRodW5kZXJib2x0cywgaGUgc2V0IG91dCBmcm9tIHRoZSBpc2xldCBhbmQgbWFkZSBmb3IgdGhlIG9wcG9zaXRlIGJhbmtzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIEh5ZGFzcGVzLCBtYWRlIHZpb2xlbnQgYnkgdGhlIHN0b3JtIGFuZCBkYXNoaW5nIGhpZ2ggYWdhaW5zdCBpdHMgYmFuaywgbWFkZSBhIGdyZWF0IGJyZWFjaCBpbiBpdCwgYW5kIGEgbGFyZ2UgcGFydCBvZiB0aGUgc3RyZWFtIHdhcyBzZXR0aW5nIGluIHRoYXQgZGlyZWN0aW9uOyBhbmQgdGhlIHNob3JlIGJldHdlZW4gdGhlIHR3byBjdXJyZW50cyBnYXZlIGhpcyBtZW4gbm8gc3VyZSBmb290aW5nLCBzaW5jZSBpdCB3YXMgYnJva2VuIGFuZCBzbGlwcGVyeS4gQW5kIGhlcmUgaXQgd2FzIHRoYXQgaGUgaXMgc2FpZCB0byBoYXZlIGNyaWVkOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIEF0aGVuaWFucywgY2FuIHllIHBvc3NpYmx5IGJlbGlldmUgd2hhdCBwZXJpbHMgSSBhbSB1bmRlcmdvaW5nIHRvIHdpbiBnbG9yeSBpbiB5b3VyIGV5ZXM/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGhvd2V2ZXIsIGlzIHRoZSBzdG9yeSBvZiBPbmVzaWNyaXR1czsgQWxleGFuZGVyIGhpbXNlbGYgc2F5cyB0aGF0IHRoZXkgbGVmdCB0aGVpciByYWZ0cyBhbmQgY3Jvc3NlZCB0aGUgYnJlYWNoIHdpdGggdGhlaXIgYXJtb3VyIG9uLCB3YWRpbmcgYnJlYXN0LWhpZ2ggaW4gd2F0ZXIsIGFuZCB0aGF0IGFmdGVyIGhlIGhhZCBjcm9zc2VkIGhlIGxlZCBoaXMgaG9yc2VtZW4gdHdlbnR5IGZ1cmxvbmdzIGluIGFkdmFuY2Ugb2YgaGlzIGluZmFudHJ5LCBjYWxjdWxhdGluZyB0aGF0LCBpbiBjYXNlIHRoZSBlbmVteSBhdHRhY2tlZCB3aXRoIHRoZWlyIGNhdmFscnksIGhlIHdvdWxkIGJlIGZhciBzdXBlcmlvciB0byB0aGVtLCBhbmQgaW4gY2FzZSB0aGV5IG1vdmVkIHVwIHRoZWlyIG1lbi1hdC1hcm1zLCBoaXMgaW5mYW50cnkgd291bGQgam9pbiBoaW0gaW4gZ29vZCBzZWFzb24uIEFuZCBvbmUgb2YgdGhlc2Ugc3VwcG9zaXRpb25zIGNhbWUgdG8gcGFzcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGFmdGVyIHJvdXRpbmcgYSB0aG91c2FuZCBvZiB0aGUgZW5lbXkncyBob3JzZW1lbiBhbmQgc2l4dHkgb2YgdGhlaXIgY2hhcmlvdHMgd2hpY2ggZW5nYWdlZCBoaW0sIGhlIGNhcHR1cmVkIGFsbCB0aGUgY2hhcmlvdHMsIGFuZCBzbGV3IGZvdXIgaHVuZHJlZCBvZiB0aGUgaG9yc2VtZW4uIEFuZCBub3cgUG9ydXMsIHRodXMgbGVkIHRvIGJlbGlldmUgdGhhdCBBbGV4YW5kZXIgaGltc2VsZiBoYWQgY3Jvc3NlZCB0aGUgcml2ZXIsIGFkdmFuY2VkIHVwb24gaGltIHdpdGggYWxsIGhpcyBmb3JjZXMsIGV4Y2VwdCB0aGUgcGFydCBoZSBsZWZ0IGJlaGluZCB0byBpbXBlZGUgdGhlIGNyb3NzaW5nIG9mIHRoZSByZW1haW5pbmcgTWFjZWRvbmlhbnMuIEJ1dCBBbGV4YW5kZXIsIGZlYXJpbmcgdGhlIGVsZXBoYW50cyBhbmQgdGhlIGdyZWF0IG51bWJlcnMgb2YgdGhlIGVuZW15LCBoaW1zZWxmIGFzc2F1bHRlZCB0aGVpciBsZWZ0IHdpbmcsIGFuZCBvcmRlcmVkIENvZW51cyB0byBhdHRhY2sgdGhlaXIgcmlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJvdGggd2luZ3MgaGF2aW5nIGJlZW4gcm91dGVkLCB0aGUgdmFucXVpc2hlZCB0cm9vcHMgcmV0aXJlZCBpbiBldmVyeSBjYXNlIHVwb24gdGhlIGVsZXBoYW50cyBpbiB0aGUgY2VudHJlLCBhbmQgd2VyZSB0aGVyZSBjcm93ZGVkIHRvZ2V0aGVyIHdpdGggdGhlbSwgYW5kIGZyb20gdGhpcyBwb2ludCBvbiB0aGUgYmF0dGxlIHdhcyB3YWdlZCBhdCBjbG9zZSBxdWFydGVycywgYW5kIGl0IHdhcyBub3QgdW50aWwgdGhlIGVpZ2h0aCBob3VyIHRoYXQgdGhlIGVuZW15IGdhdmUgdXAuIFN1Y2ggdGhlbiwgaXMgdGhlIGFjY291bnQgb2YgdGhlIGJhdHRsZSB3aGljaCB0aGUgdmljdG9yIGhpbXNlbGYgaGFzIGdpdmVuIGluIGhpcyBsZXR0ZXJzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['60.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2YgaGlzIGNhbXBhaWduIGFnYWluc3QgUG9ydXMKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIEFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2LiA5LTE5LiBJdCB3YXMgaW4gdGhlIHNwcmluZyBvZiAzMjYgQi5DLjwvbm90ZT4gaGUgaGltc2VsZiBoYXMgZ2l2ZW4gYW4gYWNjb3VudCBpbiBoaXMgbGV0dGVycy4gSGUgc2F5cywgbmFtZWx5LCB0aGF0IHRoZSByaXZlciBIeWRhc3BlcyBmbG93ZWQgYmV0d2VlbiB0aGUgdHdvIGNhbXBzLCBhbmQgdGhhdCBQb3J1cyBzdGF0aW9uZWQgaGlzIGVsZXBoYW50cyBvbiB0aGUgb3Bwb3NpdGUgYmFuayBhbmQga2VwdCBjb250aW51YWwgd2F0Y2ggb2YgdGhlIGNyb3NzaW5nLiBIZSBoaW1zZWxmIGFjY29yZGluZ2x5LCBkYXkgYnkgZGF5IGNhdXNlZCBhIGdyZWF0IGRpbiBhbmQgdHVtdWx0IHRvIGJlIG1hZGUgaW4gaGlzIGNhbXAsIGFuZCB0aGVyZWJ5IGFjY3VzdG9tZWQgdGhlIEJhcmJhcmlhbnMgbm90IHRvIGJlIGFsYXJtZWQuIAoJCQkJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2LiA5LTE5LiBJdCB3YXMgaW4gdGhlIHNwcmluZyBvZiAzMjYgQi5DLjwvdHJhbnNsYXRpb24+"
translation['60.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIG9uIGEgZGFyayBhbmQgc3Rvcm15IG5pZ2h0LCBoZSB0b29rIGEgcGFydCBvZiBoaXMgaW5mYW50cnkgYW5kIHRoZSBiZXN0IG9mIGhpcyBob3JzZW1lbiwgYW5kIGFmdGVyIHByb2NlZWRpbmcgYWxvbmcgdGhlIHJpdmVyIHRvIGEgZGlzdGFuY2UgZnJvbSB3aGVyZSB0aGUgZW5lbXkgbGF5LCBjcm9zc2VkIG92ZXIgdG8gYSBzbWFsbCBpc2xhbmQuIEhlcmUgcmFpbiBmZWxsIGluIHRvcnJlbnRzLCBhbmQgbWFueSB0b3JuYWRvZXMgYW5kIHRodW5kZXItYm9sdHMgZGFzaGVkIGRvd24gdXBvbiBoaXMgbWVuOyBidXQgbmV2ZXJ0aGVsZXNzLCBhbHRob3VnaCBoZSBzYXcgdGhhdCBtYW55IG9mIHRoZW0gd2VyZSBiZWluZyBidXJuZWQgdG8gZGVhdGggYnkgdGhlIHRodW5kZXJib2x0cywgaGUgc2V0IG91dCBmcm9tIHRoZSBpc2xldCBhbmQgbWFkZSBmb3IgdGhlIG9wcG9zaXRlIGJhbmtzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['60.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgSHlkYXNwZXMsIG1hZGUgdmlvbGVudCBieSB0aGUgc3Rvcm0gYW5kIGRhc2hpbmcgaGlnaCBhZ2FpbnN0IGl0cyBiYW5rLCBtYWRlIGEgZ3JlYXQgYnJlYWNoIGluIGl0LCBhbmQgYSBsYXJnZSBwYXJ0IG9mIHRoZSBzdHJlYW0gd2FzIHNldHRpbmcgaW4gdGhhdCBkaXJlY3Rpb247IGFuZCB0aGUgc2hvcmUgYmV0d2VlbiB0aGUgdHdvIGN1cnJlbnRzIGdhdmUgaGlzIG1lbiBubyBzdXJlIGZvb3RpbmcsIHNpbmNlIGl0IHdhcyBicm9rZW4gYW5kIHNsaXBwZXJ5LiBBbmQgaGVyZSBpdCB3YXMgdGhhdCBoZSBpcyBzYWlkIHRvIGhhdmUgY3JpZWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBBdGhlbmlhbnMsIGNhbiB5ZSBwb3NzaWJseSBiZWxpZXZlIHdoYXQgcGVyaWxzIEkgYW0gdW5kZXJnb2luZyB0byB3aW4gZ2xvcnkgaW4geW91ciBleWVzPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['60.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGhvd2V2ZXIsIGlzIHRoZSBzdG9yeSBvZiBPbmVzaWNyaXR1czsgQWxleGFuZGVyIGhpbXNlbGYgc2F5cyB0aGF0IHRoZXkgbGVmdCB0aGVpciByYWZ0cyBhbmQgY3Jvc3NlZCB0aGUgYnJlYWNoIHdpdGggdGhlaXIgYXJtb3VyIG9uLCB3YWRpbmcgYnJlYXN0LWhpZ2ggaW4gd2F0ZXIsIGFuZCB0aGF0IGFmdGVyIGhlIGhhZCBjcm9zc2VkIGhlIGxlZCBoaXMgaG9yc2VtZW4gdHdlbnR5IGZ1cmxvbmdzIGluIGFkdmFuY2Ugb2YgaGlzIGluZmFudHJ5LCBjYWxjdWxhdGluZyB0aGF0LCBpbiBjYXNlIHRoZSBlbmVteSBhdHRhY2tlZCB3aXRoIHRoZWlyIGNhdmFscnksIGhlIHdvdWxkIGJlIGZhciBzdXBlcmlvciB0byB0aGVtLCBhbmQgaW4gY2FzZSB0aGV5IG1vdmVkIHVwIHRoZWlyIG1lbi1hdC1hcm1zLCBoaXMgaW5mYW50cnkgd291bGQgam9pbiBoaW0gaW4gZ29vZCBzZWFzb24uIEFuZCBvbmUgb2YgdGhlc2Ugc3VwcG9zaXRpb25zIGNhbWUgdG8gcGFzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['60.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciByb3V0aW5nIGEgdGhvdXNhbmQgb2YgdGhlIGVuZW15J3MgaG9yc2VtZW4gYW5kIHNpeHR5IG9mIHRoZWlyIGNoYXJpb3RzIHdoaWNoIGVuZ2FnZWQgaGltLCBoZSBjYXB0dXJlZCBhbGwgdGhlIGNoYXJpb3RzLCBhbmQgc2xldyBmb3VyIGh1bmRyZWQgb2YgdGhlIGhvcnNlbWVuLiBBbmQgbm93IFBvcnVzLCB0aHVzIGxlZCB0byBiZWxpZXZlIHRoYXQgQWxleGFuZGVyIGhpbXNlbGYgaGFkIGNyb3NzZWQgdGhlIHJpdmVyLCBhZHZhbmNlZCB1cG9uIGhpbSB3aXRoIGFsbCBoaXMgZm9yY2VzLCBleGNlcHQgdGhlIHBhcnQgaGUgbGVmdCBiZWhpbmQgdG8gaW1wZWRlIHRoZSBjcm9zc2luZyBvZiB0aGUgcmVtYWluaW5nIE1hY2Vkb25pYW5zLiBCdXQgQWxleGFuZGVyLCBmZWFyaW5nIHRoZSBlbGVwaGFudHMgYW5kIHRoZSBncmVhdCBudW1iZXJzIG9mIHRoZSBlbmVteSwgaGltc2VsZiBhc3NhdWx0ZWQgdGhlaXIgbGVmdCB3aW5nLCBhbmQgb3JkZXJlZCBDb2VudXMgdG8gYXR0YWNrIHRoZWlyIHJpZ2h0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['60.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJvdGggd2luZ3MgaGF2aW5nIGJlZW4gcm91dGVkLCB0aGUgdmFucXVpc2hlZCB0cm9vcHMgcmV0aXJlZCBpbiBldmVyeSBjYXNlIHVwb24gdGhlIGVsZXBoYW50cyBpbiB0aGUgY2VudHJlLCBhbmQgd2VyZSB0aGVyZSBjcm93ZGVkIHRvZ2V0aGVyIHdpdGggdGhlbSwgYW5kIGZyb20gdGhpcyBwb2ludCBvbiB0aGUgYmF0dGxlIHdhcyB3YWdlZCBhdCBjbG9zZSBxdWFydGVycywgYW5kIGl0IHdhcyBub3QgdW50aWwgdGhlIGVpZ2h0aCBob3VyIHRoYXQgdGhlIGVuZW15IGdhdmUgdXAuIFN1Y2ggdGhlbiwgaXMgdGhlIGFjY291bnQgb2YgdGhlIGJhdHRsZSB3aGljaCB0aGUgdmljdG9yIGhpbXNlbGYgaGFzIGdpdmVuIGluIGhpcyBsZXR0ZXJzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9zdCBoaXN0b3JpYW5zIGFncmVlIHRoYXQgUG9ydXMgd2FzIGZvdXIgY3ViaXRzIGFuZCBhIHNwYW4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2l4IGZlZXQgYW5kIHRocmVlIGluY2hlcy48L25vdGU+IGhpZ2gsIGFuZCB0aGF0IHRoZSBzaXplIGFuZCBtYWplc3R5IG9mIGhpcyBib2R5IG1hZGUgaGlzIGVsZXBoYW50IHNlZW0gYXMgZml0dGluZyBhIG1vdW50IGZvciBoaW0gYXMgYSBob3JzZSBmb3IgYSBob3JzZW1hbi4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGhpcyBlbGVwaGFudCB3YXMgb2YgdGhlIGxhcmdlc3Qgc2l6ZTsgYW5kIGl0IHNob3dlZCByZW1hcmthYmxlIGludGVsbGlnZW5jZSBhbmQgc29saWNpdHVkZSBmb3IgdGhlIGtpbmcsIGJyYXZlbHkgZGVmZW5kaW5nIGhpbSBhbmQgYmVhdGluZyBiYWNrIGhpcyBhc3NhaWxhbnRzIHdoaWxlIGhlIHdhcyBzdGlsbCBpbiBmdWxsIHZpZ291ciwgYW5kIHdoZW4gaXQgcGVyY2VpdmVkIHRoYXQgaXRzIG1hc3RlciB3YXMgd29ybiBvdXQgd2l0aCBhIG11bHRpdHVkZSBvZiBtaXNzaWxlcyBhbmQgd291bmRzLCBmZWFyaW5nIGxlc3QgaGUgc2hvdWxkIGZhbGwgb2ZmIGl0IGtuZWx0IHNvZnRseSBvbiB0aGUgZ3JvdW5kLCBhbmQgd2l0aCBpdHMgcHJvYm9zY2lzIGdlbnRseSB0b29rIGVhY2ggc3BlYXIgYW5kIGRyZXcgaXQgb3V0IG9mIGhpcyBib2R5LiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5Qb3J1cyB3YXMgdGFrZW4gcHJpc29uZXIsIGFuZCB3aGVuIEFsZXhhbmRlciBhc2tlZCBoaW0gaG93IGhlIHdvdWxkIGJlIHRyZWF0ZWQsIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxpa2UgYSBraW5nPC9xPjsgYW5kIHRvIGFub3RoZXIgcXVlc3Rpb24gZnJvbSBBbGV4YW5kZXIgd2hldGhlciBoZSBoYWQgYW55dGhpbmcgZWxzZSB0byBzYXksIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxsIHRoaW5ncyBhcmUgaW5jbHVkZWQgaW4gbXkg4oCYbGlrZSBhIGtpbmcu4oCZPC9xPiBBY2NvcmRpbmdseSwgQWxleGFuZGVyIG5vdCBvbmx5IHBlcm1pdHRlZCBoaW0gdG8gZ292ZXJuIGhpcyBmb3JtZXIga2luZ2RvbSwgZ2l2aW5nIGhpbSB0aGUgdGl0bGUgb2Ygc2F0cmFwLCBidXQgYWxzbyBhZGRlZCB0byBpdCB0aGUgdGVycml0b3J5IG9mIHRoZSBpbmRlcGVuZGVudCBwZW9wbGVzIHdob20gaGUgc3ViZHVlZCwgaW4gd2hpY2ggdGhlcmUgYXJlIHNhaWQgdG8gaGF2ZSBiZWVuIGZpZnRlZW4gbmF0aW9ucywgZml2ZSB0aG91c2FuZCBjaXRpZXMgb2YgY29uc2lkZXJhYmxlIHNpemUsIGFuZCBhIGdyZWF0IG11bHRpdHVkZSBvZiB2aWxsYWdlcy4gSGUgc3ViZHVlZCBvdGhlciB0ZXJyaXRvcnkgYWxzbyB0aHJpY2UgYXMgbGFyZ2UgYXMgdGhpcyBhbmQgYXBwb2ludGVkIFBoaWxpcCwgb25lIG9mIGhpcyBjb21wYW5pb25zLCBzYXRyYXAgb3ZlciBpdC48L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2l4IGZlZXQgYW5kIHRocmVlIGluY2hlcy48L25vdGU+IGhpZ2gsIGFuZCB0aGF0IHRoZSBzaXplIGFuZCBtYWplc3R5IG9mIGhpcyBib2R5IG1hZGUgaGlzIGVsZXBoYW50IHNlZW0gYXMgZml0dGluZyBhIG1vdW50IGZvciBoaW0gYXMgYSBob3JzZSBmb3IgYSBob3JzZW1hbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['60.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaGlzIGVsZXBoYW50IHdhcyBvZiB0aGUgbGFyZ2VzdCBzaXplOyBhbmQgaXQgc2hvd2VkIHJlbWFya2FibGUgaW50ZWxsaWdlbmNlIGFuZCBzb2xpY2l0dWRlIGZvciB0aGUga2luZywgYnJhdmVseSBkZWZlbmRpbmcgaGltIGFuZCBiZWF0aW5nIGJhY2sgaGlzIGFzc2FpbGFudHMgd2hpbGUgaGUgd2FzIHN0aWxsIGluIGZ1bGwgdmlnb3VyLCBhbmQgd2hlbiBpdCBwZXJjZWl2ZWQgdGhhdCBpdHMgbWFzdGVyIHdhcyB3b3JuIG91dCB3aXRoIGEgbXVsdGl0dWRlIG9mIG1pc3NpbGVzIGFuZCB3b3VuZHMsIGZlYXJpbmcgbGVzdCBoZSBzaG91bGQgZmFsbCBvZmYgaXQga25lbHQgc29mdGx5IG9uIHRoZSBncm91bmQsIGFuZCB3aXRoIGl0cyBwcm9ib3NjaXMgZ2VudGx5IHRvb2sgZWFjaCBzcGVhciBhbmQgZHJldyBpdCBvdXQgb2YgaGlzIGJvZHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['60.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlBvcnVzIHdhcyB0YWtlbiBwcmlzb25lciwgYW5kIHdoZW4gQWxleGFuZGVyIGFza2VkIGhpbSBob3cgaGUgd291bGQgYmUgdHJlYXRlZCwgc2FpZDogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MaWtlIGEga2luZzwvcT47IGFuZCB0byBhbm90aGVyIHF1ZXN0aW9uIGZyb20gQWxleGFuZGVyIHdoZXRoZXIgaGUgaGFkIGFueXRoaW5nIGVsc2UgdG8gc2F5LCByZXBsaWVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxsIHRoaW5ncyBhcmUgaW5jbHVkZWQgaW4gbXkg4oCYbGlrZSBhIGtpbmcu4oCZPC9xPiBBY2NvcmRpbmdseSwgQWxleGFuZGVyIG5vdCBvbmx5IHBlcm1pdHRlZCBoaW0gdG8gZ292ZXJuIGhpcyBmb3JtZXIga2luZ2RvbSwgZ2l2aW5nIGhpbSB0aGUgdGl0bGUgb2Ygc2F0cmFwLCBidXQgYWxzbyBhZGRlZCB0byBpdCB0aGUgdGVycml0b3J5IG9mIHRoZSBpbmRlcGVuZGVudCBwZW9wbGVzIHdob20gaGUgc3ViZHVlZCwgaW4gd2hpY2ggdGhlcmUgYXJlIHNhaWQgdG8gaGF2ZSBiZWVuIGZpZnRlZW4gbmF0aW9ucywgZml2ZSB0aG91c2FuZCBjaXRpZXMgb2YgY29uc2lkZXJhYmxlIHNpemUsIGFuZCBhIGdyZWF0IG11bHRpdHVkZSBvZiB2aWxsYWdlcy4gSGUgc3ViZHVlZCBvdGhlciB0ZXJyaXRvcnkgYWxzbyB0aHJpY2UgYXMgbGFyZ2UgYXMgdGhpcyBhbmQgYXBwb2ludGVkIFBoaWxpcCwgb25lIG9mIGhpcyBjb21wYW5pb25zLCBzYXRyYXAgb3ZlciBpdC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgYmF0dGxlIHdpdGggUG9ydXMsIHRvbywgQnVjZXBoYWxhcyBkaWVkLOKAlG5vdCBhdCBvbmNlLCBidXQgc29tZSB0aW1lIGFmdGVyd2FyZHMs4oCUYXMgbW9zdCB3cml0ZXJzIHNheSwgZnJvbSB3b3VuZHMgZm9yIHdoaWNoIGhlIHdhcyB1bmRlciB0cmVhdG1lbnQsIGJ1dCBhY2NvcmRpbmcgdG8gT25lc2ljcml0dXMsIGZyb20gb2xkIGFnZSwgaGF2aW5nIGJlY29tZSBxdWl0ZSB3b3JuIG91dDsKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNS4xOS40Ij5BcnJpYW4sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IHYuIDE5LCA0IGY8L2JpYmw+Ljwvbm90ZT4gZm9yIGhlIHdhcyB0aGlydHkgeWVhcnMgb2xkIHdoZW4gaGUgZGllZC4gSGlzIGRlYXRoIGdyaWV2ZWQgQWxleGFuZGVyIG1pZ2h0aWx5LCB3aG8gZmVsdCB0aGF0IGhlIGhhZCBsb3N0IG5vdGhpbmcgbGVzcyB0aGFuIGEgY29tcmFkZSBhbmQgZnJpZW5kOyBoZSBhbHNvIGJ1aWx0IGEgY2l0eSBpbiBoaXMgbWVtb3J5IG9uIHRoZSBiYW5rcyBvZiB0aGUgSHlkYXNwZXMgYW5kIGNhbGxlZCBpdCBCdWNlcGhhbGlhLiBJdCBpcyBzYWlkLCB0b28sIHRoYXQgd2hlbiBoZSBsb3N0IGEgZG9nIGFsc28sIG5hbWVkIFBlcml0YXMsIHdoaWNoIGhhZCBiZWVuIHJlYXJlZCBieSBoaW0gYW5kIHdhcyBsb3ZlZCBieSBoaW0sIGhlIGZvdW5kZWQgYSBjaXR5IGFuZCBnYXZlIGl0IHRoZSBkb2cncyBuYW1lLiBTb3Rpb24gc2F5cyBoZSBoZWFyZCB0aGlzIGZyb20gUG90YW1vbiB0aGUgTGVzYmlhbi48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['61.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGJhdHRsZSB3aXRoIFBvcnVzLCB0b28sIEJ1Y2VwaGFsYXMgZGllZCzigJRub3QgYXQgb25jZSwgYnV0IHNvbWUgdGltZSBhZnRlcndhcmRzLOKAlGFzIG1vc3Qgd3JpdGVycyBzYXksIGZyb20gd291bmRzIGZvciB3aGljaCBoZSB3YXMgdW5kZXIgdHJlYXRtZW50LCBidXQgYWNjb3JkaW5nIHRvIE9uZXNpY3JpdHVzLCBmcm9tIG9sZCBhZ2UsIGhhdmluZyBiZWNvbWUgcXVpdGUgd29ybiBvdXQ7CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA1LjE5LjQiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2LiAxOSwgNCBmPC9iaWJsPi48L25vdGU+IGZvciBoZSB3YXMgdGhpcnR5IHllYXJzIG9sZCB3aGVuIGhlIGRpZWQuIEhpcyBkZWF0aCBncmlldmVkIEFsZXhhbmRlciBtaWdodGlseSwgd2hvIGZlbHQgdGhhdCBoZSBoYWQgbG9zdCBub3RoaW5nIGxlc3MgdGhhbiBhIGNvbXJhZGUgYW5kIGZyaWVuZDsgaGUgYWxzbyBidWlsdCBhIGNpdHkgaW4gaGlzIG1lbW9yeSBvbiB0aGUgYmFua3Mgb2YgdGhlIEh5ZGFzcGVzIGFuZCBjYWxsZWQgaXQgQnVjZXBoYWxpYS4gSXQgaXMgc2FpZCwgdG9vLCB0aGF0IHdoZW4gaGUgbG9zdCBhIGRvZyBhbHNvLCBuYW1lZCBQZXJpdGFzLCB3aGljaCBoYWQgYmVlbiByZWFyZWQgYnkgaGltIGFuZCB3YXMgbG92ZWQgYnkgaGltLCBoZSBmb3VuZGVkIGEgY2l0eSBhbmQgZ2F2ZSBpdCB0aGUgZG9nJ3MgbmFtZS4gU290aW9uIHNheXMgaGUgaGVhcmQgdGhpcyBmcm9tIFBvdGFtb24gdGhlIExlc2JpYW4uPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNS4xOS40Ij5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdi4gMTksIDQgZjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2LiAxOSwgNCBmPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIHRoZSBNYWNlZG9uaWFucywgaG93ZXZlciwgdGhlaXIgc3RydWdnbGUgd2l0aCBQb3J1cyBibHVudGVkIHRoZWlyIGNvdXJhZ2UgYW5kIHN0YXllZCB0aGVpciBmdXJ0aGVyIGFkdmFuY2UgaW50byBJbmRpYS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFsZXhhbmRlciBjYXJyaWVkIGhpcyBjb25xdWVzdHMgZnJvbSB0aGUgSW5kdXMgdG8gdGhlIEh5cGhhc2lzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNS4yNS4xIj5BcnJpYW4sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IHYuIDI1PC9iaWJsPiksIHN1YmR1aW5nIHRoZSBQdW5qYWIuIEl0IHdhcyBub3cgU2VwdGVtYmVyLCAzMjYgQi5DLjwvbm90ZT4gRm9yIGhhdmluZyBoYWQgYWxsIHRoZXkgY291bGQgZG8gdG8gcmVwdWxzZSBhbiBlbmVteSB3aG8gbXVzdGVyZWQgb25seSB0d2VudHkgdGhvdXNhbmQgaW5mYW50cnkgYW5kIHR3byB0aG91c2FuZCBob3JzZSwgdGhleSB2aW9sZW50bHkgb3Bwb3NlZCBBbGV4YW5kZXIgd2hlbiBoZSBpbnNpc3RlZCBvbiBjcm9zc2luZyB0aGUgcml2ZXIgR2FuZ2VzIGFsc28sIHRoZSB3aWR0aCBvZiB3aGljaCwgYXMgdGhleSBsZWFybmVkLCB3YXMgdGhpcnR5LXR3byBmdXJsb25ncywgaXRzIGRlcHRoIGEgaHVuZHJlZCBmYXRob21zLCB3aGlsZSBpdHMgYmFua3Mgb24gdGhlIGZ1cnRoZXIgc2lkZSB3ZXJlIGNvdmVyZWQgd2l0aCBtdWx0aXR1ZGVzIG9mIG1lbi1hdC1hcm1zIGFuZCBob3JzZW1lbiBhbmQgZWxlcGhhbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSB3ZXJlIHRvbGQgdGhhdCB0aGUga2luZ3Mgb2YgdGhlIEdhbmRlcml0ZXMgYW5kIFByYWVzaWkgd2VyZSBhd2FpdGluZyB0aGVtIHdpdGggZWlnaHR5IHRob3VzYW5kIGhvcnNlbWVuLCB0d28gaHVuZHJlZCB0aG91c2FuZCBmb290bWVuLCBlaWdodCB0aG91c2FuZCBjaGFyaW90cywgYW5kIHNpeCB0aG91c2FuZCBmaWdodGluZyBlbGVwaGFudHMuIEFuZCB0aGVyZSB3YXMgbm8gYm9hc3RpbmcgaW4gdGhlc2UgcmVwb3J0cy4gRm9yIEFuZHJvY290dHVzLCB3aG8gcmVpZ25lZCB0aGVyZSBub3QgbG9uZyBhZnRlcndhcmRzLCBtYWRlIGEgcHJlc2VudCB0byBTZWxldWN1cyBvZiBmaXZlIGh1bmRyZWQgZWxlcGhhbnRzLCBhbmQgd2l0aCBhbiBhcm15IG9mIHNpeCBodW5kcmVkIHRob3VzYW5kIG1lbiBvdmVycmFuIGFuZCBzdWJkdWVkIGFsbCBJbmRpYS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['62.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIHRoZSBNYWNlZG9uaWFucywgaG93ZXZlciwgdGhlaXIgc3RydWdnbGUgd2l0aCBQb3J1cyBibHVudGVkIHRoZWlyIGNvdXJhZ2UgYW5kIHN0YXllZCB0aGVpciBmdXJ0aGVyIGFkdmFuY2UgaW50byBJbmRpYS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWxleGFuZGVyIGNhcnJpZWQgaGlzIGNvbnF1ZXN0cyBmcm9tIHRoZSBJbmR1cyB0byB0aGUgSHlwaGFzaXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDUuMjUuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHYuIDI1PC9iaWJsPiksIHN1YmR1aW5nIHRoZSBQdW5qYWIuIEl0IHdhcyBub3cgU2VwdGVtYmVyLCAzMjYgQi5DLjwvbm90ZT4gRm9yIGhhdmluZyBoYWQgYWxsIHRoZXkgY291bGQgZG8gdG8gcmVwdWxzZSBhbiBlbmVteSB3aG8gbXVzdGVyZWQgb25seSB0d2VudHkgdGhvdXNhbmQgaW5mYW50cnkgYW5kIHR3byB0aG91c2FuZCBob3JzZSwgdGhleSB2aW9sZW50bHkgb3Bwb3NlZCBBbGV4YW5kZXIgd2hlbiBoZSBpbnNpc3RlZCBvbiBjcm9zc2luZyB0aGUgcml2ZXIgR2FuZ2VzIGFsc28sIHRoZSB3aWR0aCBvZiB3aGljaCwgYXMgdGhleSBsZWFybmVkLCB3YXMgdGhpcnR5LXR3byBmdXJsb25ncywgaXRzIGRlcHRoIGEgaHVuZHJlZCBmYXRob21zLCB3aGlsZSBpdHMgYmFua3Mgb24gdGhlIGZ1cnRoZXIgc2lkZSB3ZXJlIGNvdmVyZWQgd2l0aCBtdWx0aXR1ZGVzIG9mIG1lbi1hdC1hcm1zIGFuZCBob3JzZW1lbiBhbmQgZWxlcGhhbnRzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDUuMjUuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHYuIDI1PC9iaWJsPiksIHN1YmR1aW5nIHRoZSBQdW5qYWIuIEl0IHdhcyBub3cgU2VwdGVtYmVyLCAzMjYgQi5DLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdi4gMjU8L3RyYW5zbGF0aW9uPg=="
translation['62.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IHdlcmUgdG9sZCB0aGF0IHRoZSBraW5ncyBvZiB0aGUgR2FuZGVyaXRlcyBhbmQgUHJhZXNpaSB3ZXJlIGF3YWl0aW5nIHRoZW0gd2l0aCBlaWdodHkgdGhvdXNhbmQgaG9yc2VtZW4sIHR3byBodW5kcmVkIHRob3VzYW5kIGZvb3RtZW4sIGVpZ2h0IHRob3VzYW5kIGNoYXJpb3RzLCBhbmQgc2l4IHRob3VzYW5kIGZpZ2h0aW5nIGVsZXBoYW50cy4gQW5kIHRoZXJlIHdhcyBubyBib2FzdGluZyBpbiB0aGVzZSByZXBvcnRzLiBGb3IgQW5kcm9jb3R0dXMsIHdobyByZWlnbmVkIHRoZXJlIG5vdCBsb25nIGFmdGVyd2FyZHMsIG1hZGUgYSBwcmVzZW50IHRvIFNlbGV1Y3VzIG9mIGZpdmUgaHVuZHJlZCBlbGVwaGFudHMsIGFuZCB3aXRoIGFuIGFybXkgb2Ygc2l4IGh1bmRyZWQgdGhvdXNhbmQgbWVuIG92ZXJyYW4gYW5kIHN1YmR1ZWQgYWxsIEluZGlhLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0LCB0aGVuLCBBbGV4YW5kZXIgc2h1dCBoaW1zZWxmIHVwIGluIGhpcyB0ZW50IGZyb20gZGlzcGxlYXN1cmUgYW5kIHdyYXRoIGFuZCBsYXkgdGhlcmUsIGZlZWxpbmcgbm8gZ3JhdGl0dWRlIGZvciB3aGF0IGhlIGhhZCBhbHJlYWR5IGFjaGlldmVkIHVubGVzcyBoZSBzaG91bGQgY3Jvc3MgdGhlIEdhbmdlcywgbmF5LCBjb3VudGluZyBhIHJldHJlYXQgYSBjb25mZXNzaW9uIG9mIGRlZmVhdC4gQnV0IGhpcyBmcmllbmRzIGdhdmUgaGltIGZpdHRpbmcgY29uc29sYXRpb24sIGFuZCBoaXMgc29sZGllcnMgY3Jvd2RlZCBhYm91dCBoaXMgZG9vciBhbmQgYmVzb3VnaHQgaGltIHdpdGggbG91ZCBjcmllcyBhbmQgd2FpbGluZywgdW50aWwgYXQgbGFzdCBoZSByZWxlbnRlZCBhbmQgYmVnYW4gdG8gYnJlYWsgY2FtcCwgcmVzb3J0aW5nIHRvIG1hbnkgZGVjZWl0ZnVsIGFuZCBmYWxsYWNpb3VzIGRldmljZXMgZm9yIHRoZSBlbmhhbmNlbWVudCBvZiBoaXMgZmFtZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluc3RhbmNlLCBoZSBoYWQgYXJtb3VyIHByZXBhcmVkIHRoYXQgd2FzIGxhcmdlciB0aGFuIHVzdWFsLCBhbmQgbWFuZ2VycyBmb3IgaG9yc2VzIHRoYXQgd2VyZSBoaWdoZXIsIGFuZCBiaXRzIHRoYXQgd2VyZSBoZWF2aWVyIHRoYW4gdGhvc2UgaW4gY29tbW9uIHVzZSwgYW5kIGxlZnQgdGhlbSBzY2F0dGVyZWQgdXAgYW5kIGRvd24uIE1vcmVvdmVyLCBoZSBlcmVjdGVkIGFsdGFycyBmb3IgdGhlIGdvZHMsIHdoaWNoIGRvd24gdG8gdGhlIHByZXNlbnQgdGltZSBhcmUgcmV2ZXJlZCBieSB0aGUga2luZ3Mgb2YgdGhlIFByYWVzaWkgd2hlbiB0aGV5IGNyb3NzIHRoZSByaXZlciwgYW5kIG9uIHRoZW0gdGhleSBvZmZlciBzYWNyaWZpY2VzIGluIHRoZSBIZWxsZW5pYyBtYW5uZXIuIEFuZHJvY290dHVzLCB3aGVuIGhlIHdhcyBhIHN0cmlwbGluZywgc2F3IEFsZXhhbmRlciBoaW1zZWxmLCBhbmQgd2UgYXJlIHRvbGQgdGhhdCBoZSBvZnRlbiBzYWlkIGluIGxhdGVyIHRpbWVzIHRoYXQgQWxleGFuZGVyIG5hcnJvd2x5IG1pc3NlZCBtYWtpbmcgaGltc2VsZiBtYXN0ZXIgb2YgdGhlIGNvdW50cnksIHNpbmNlIGl0cyBraW5nIHdhcyBoYXRlZCBhbmQgZGVzcGlzZWQgb24gYWNjb3VudCBvZiBoaXMgYmFzZW5lc3MgYW5kIGxvdyBiaXJ0aC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['62.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0LCB0aGVuLCBBbGV4YW5kZXIgc2h1dCBoaW1zZWxmIHVwIGluIGhpcyB0ZW50IGZyb20gZGlzcGxlYXN1cmUgYW5kIHdyYXRoIGFuZCBsYXkgdGhlcmUsIGZlZWxpbmcgbm8gZ3JhdGl0dWRlIGZvciB3aGF0IGhlIGhhZCBhbHJlYWR5IGFjaGlldmVkIHVubGVzcyBoZSBzaG91bGQgY3Jvc3MgdGhlIEdhbmdlcywgbmF5LCBjb3VudGluZyBhIHJldHJlYXQgYSBjb25mZXNzaW9uIG9mIGRlZmVhdC4gQnV0IGhpcyBmcmllbmRzIGdhdmUgaGltIGZpdHRpbmcgY29uc29sYXRpb24sIGFuZCBoaXMgc29sZGllcnMgY3Jvd2RlZCBhYm91dCBoaXMgZG9vciBhbmQgYmVzb3VnaHQgaGltIHdpdGggbG91ZCBjcmllcyBhbmQgd2FpbGluZywgdW50aWwgYXQgbGFzdCBoZSByZWxlbnRlZCBhbmQgYmVnYW4gdG8gYnJlYWsgY2FtcCwgcmVzb3J0aW5nIHRvIG1hbnkgZGVjZWl0ZnVsIGFuZCBmYWxsYWNpb3VzIGRldmljZXMgZm9yIHRoZSBlbmhhbmNlbWVudCBvZiBoaXMgZmFtZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['62.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgaGUgaGFkIGFybW91ciBwcmVwYXJlZCB0aGF0IHdhcyBsYXJnZXIgdGhhbiB1c3VhbCwgYW5kIG1hbmdlcnMgZm9yIGhvcnNlcyB0aGF0IHdlcmUgaGlnaGVyLCBhbmQgYml0cyB0aGF0IHdlcmUgaGVhdmllciB0aGFuIHRob3NlIGluIGNvbW1vbiB1c2UsIGFuZCBsZWZ0IHRoZW0gc2NhdHRlcmVkIHVwIGFuZCBkb3duLiBNb3Jlb3ZlciwgaGUgZXJlY3RlZCBhbHRhcnMgZm9yIHRoZSBnb2RzLCB3aGljaCBkb3duIHRvIHRoZSBwcmVzZW50IHRpbWUgYXJlIHJldmVyZWQgYnkgdGhlIGtpbmdzIG9mIHRoZSBQcmFlc2lpIHdoZW4gdGhleSBjcm9zcyB0aGUgcml2ZXIsIGFuZCBvbiB0aGVtIHRoZXkgb2ZmZXIgc2FjcmlmaWNlcyBpbiB0aGUgSGVsbGVuaWMgbWFubmVyLiBBbmRyb2NvdHR1cywgd2hlbiBoZSB3YXMgYSBzdHJpcGxpbmcsIHNhdyBBbGV4YW5kZXIgaGltc2VsZiwgYW5kIHdlIGFyZSB0b2xkIHRoYXQgaGUgb2Z0ZW4gc2FpZCBpbiBsYXRlciB0aW1lcyB0aGF0IEFsZXhhbmRlciBuYXJyb3dseSBtaXNzZWQgbWFraW5nIGhpbXNlbGYgbWFzdGVyIG9mIHRoZSBjb3VudHJ5LCBzaW5jZSBpdHMga2luZyB3YXMgaGF0ZWQgYW5kIGRlc3Bpc2VkIG9uIGFjY291bnQgb2YgaGlzIGJhc2VuZXNzIGFuZCBsb3cgYmlydGguPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGVuY2UsIGJlaW5nIGVhZ2VyIHRvIGJlaG9sZCB0aGUgb2NlYW4sIGFuZCBoYXZpbmcgYnVpbHQgbWFueSBwYXNzYWdlLWJvYXRzIGVxdWlwcGVkIHdpdGggb2FycywgYW5kIG1hbnkgcmFmdHMsIGhlIHdhcyBjb252ZXllZCBkb3duIHRoZSByaXZlcnMKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkh5ZGFzcGVzLCBBY2VzaW5lcywgYW5kIEluZHVzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNi4xLjEiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gdmkuIDE8L2JpYmw+KS48L25vdGU+IGluIGEgbGVpc3VyZWx5IGNvdXJzZS4gQW5kIHlldCBoaXMgdm95YWdlIHdhcyBub3QgbWFkZSB3aXRob3V0IGVmZm9ydCBub3IgZXZlbiB3aXRob3V0IHdhciwgYnV0IGhlIHdvdWxkIGxhbmQgYW5kIGFzc2F1bHQgdGhlIGNpdGllcyBvbiBoaXMgcm91dGUgYW5kIHN1YmR1ZSBldmVyeXRoaW5nLiBIb3dldmVyLCBpbiBhdHRhY2tpbmcgdGhlIHBlb3BsZSBjYWxsZWQgTWFsbGksIHdobyBhcmUgc2FpZCB0byBoYXZlIGJlZW4gdGhlIG1vc3Qgd2FybGlrZSBvZiB0aGUgSW5kaWFucywgaGUgY2FtZSB3aXRoaW4gYSBsaXR0bGUgb2YgYmVpbmcgY3V0IGRvd24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciBkaXNwZXJzaW5nIHRoZSBpbmhhYml0YW50cyBmcm9tIHRoZSB3YWxscyB3aXRoIG1pc3NpbGVzLCBoZSB3YXMgdGhlIGZpcnN0IHRvIG1vdW50IHVwb24gdGhlIHdhbGwgYnkgYSBzY2FsaW5nIGxhZGRlciwgYW5kIHNpbmNlIHRoZSBsYWRkZXIgd2FzIGJyb2tlbiB0byBwaWVjZXMgYW5kIGhlIHdhcyBleHBvc2VkIHRvIHRoZSBtaXNzaWxlcyBvZiB0aGUgQmFyYmFyaWFucyB3aG8gc3Rvb2QgYWxvbmcgdGhlIHdhbGwgYmVsb3csIGFsbW9zdCBhbG9uZSBhcyBoZSB3YXMsIGhlIGNyb3VjaGVkIGFuZCB0aHJldyBoaW1zZWxmIGludG8gdGhlIG1pZHN0IG9mIHRoZSBlbmVteSwgYW5kIGJ5IGdvb2QgZm9ydHVuZSBhbGlnaHRlZCBvbiBoaXMgZmVldC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYXMgaGUgYnJhbmRpc2hlZCBoaXMgYXJtcywgdGhlIEJhcmJhcmlhbnMgdGhvdWdodCB0aGF0IGEgc2hhcGUgb2YgZ2xlYW1pbmcgZmlyZSBwbGF5ZWQgaW4gZnJvbnQgb2YgaGlzIHBlcnNvbi4gVGhlcmVmb3JlIGF0IGZpcnN0IHRoZXkgc2NhdHRlcmVkIGFuZCBmbGVkOyBidXQgd2hlbiB0aGV5IHNhdyB0aGF0IGhlIHdhcyBhY2NvbXBhbmllZCBieSBvbmx5IHR3byBvZiBoaXMgZ3VhcmRzLCB0aGV5IHJhbiB1cG9uIGhpbSwgYW5kIHNvbWUgdHJpZWQgdG8gd291bmQgaGltIGJ5IHRocnVzdGluZyB0aGVpciBzd29yZHMgYW5kIHNwZWFycyB0aHJvdWdoIGhpcyBhcm1vdXIgYXMgaGUgZGVmZW5kZWQgaGltc2VsZiwgd2hpbGUgb25lLCBzdGFuZGluZyBhIGxpdHRsZSBmdXJ0aGVyIG9mZiwgc2hvdCBhbiBhcnJvdyBhdCBoaW0gd2l0aCBzdWNoIGFjY3VyYWN5IGFuZCBmb3JjZSB0aGF0IGl0IGN1dCBpdHMgd2F5IHRocm91Z2ggaGlzIGJyZWFzdHBsYXRlIGFuZCBmYXN0ZW5lZCBpdHNlbGYgaW4gaGlzIHJpYnMgYXQgdGhlIGJyZWFzdC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3YXMgdGhlIGZvcmNlIG9mIHRoZSBibG93IHRoYXQgQWxleGFuZGVyIHJlY29pbGVkIGFuZCBzYW5rIHRvIGhpcyBrbmVlcywgd2hlcmV1cG9uIGhpcyBhc3NhaWxhbnQgcmFuIGF0IGhpbSB3aXRoIGRyYXduIHNjaW1pdGFyLCB3aGlsZSBQZXVjZXN0YXMgYW5kIExpbW5hZXVzCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5MZW9ubmF0dXMsIGFjY29yZGluZyB0byA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNi4xMC4yIj5BcnJpYW4sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IHZpLiAxMCwgMjwvYmlibD4uPC9ub3RlPiBkZWZlbmRlZCBoaW0uIEJvdGggb2YgdGhlbSB3ZXJlIHdvdW5kZWQsIGFuZCBMaW1uYWV1cyB3YXMga2lsbGVkOyBidXQgUGV1Y2VzdGFzIGhlbGQgb3V0LCBhbmQgYXQgbGFzdCBBbGV4YW5kZXIga2lsbGVkIHRoZSBCYXJiYXJpYW4uIEJ1dCBoZSBoaW1zZWxmIHJlY2VpdmVkIG1hbnkgd291bmRzLCBhbmQgYXQgbGFzdCB3YXMgc21pdHRlbiBvbiB0aGUgbmVjayB3aXRoIGEgY3VkZ2VsLCBhbmQgbGVhbmVkIGFnYWluc3QgdGhlIHdhbGwsIGhpcyBleWVzIHN0aWxsIGZpeGVkIHVwb24gaGlzIGZvZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgaW5zdGFudCBoaXMgTWFjZWRvbmlhbnMgZmxvY2tlZCBhYm91dCBoaW0sIGNhdWdodCBoaW0gdXAsIGFscmVhZHkgdW5jb25zY2lvdXMgb2Ygd2hhdCB3YXMgZ29pbmcgb24gYWJvdXQgaGltLCBhbmQgY2FycmllZCBoaW0gdG8gaGlzIHRlbnQuIEFuZCBzdHJhaWdodHdheSBhIHJlcG9ydCB0aGF0IGhlIHdhcyBkZWFkIHByZXZhaWxlZCBpbiB0aGUgY2FtcDsgYnV0IHdoZW4gd2l0aCBtdWNoIGRpZmZpY3VsdHkgYW5kIHBhaW5zIHRoZXkgaGFkIHNhd24gb2ZmIHRoZSBzaGFmdCBvZiB0aGUgYXJyb3csIHdoaWNoIHdhcyBvZiB3b29kLCBhbmQgaGFkIHRodXMgc3VjY2VlZGVkIGF0IGxhc3QgaW4gcmVtb3ZpbmcgdGhlIGtpbmcncyBicmVhc3RwbGF0ZSwgdGhleSBjYW1lIHRvIHRoZSBleGNpc2lvbiBvZiB0aGUgYXJyb3doZWFkLCB3aGljaCB3YXMgYnVyaWVkIGluIG9uZSBvZiB0aGUgcmlicy4gV2UgYXJlIHRvbGQsIG1vcmVvdmVyLCB0aGF0IGl0IHdhcyB0aHJlZSBmaW5nZXJzIGJyb2FkIGFuZCBmb3VyIGxvbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0cyByZW1vdmFsLCB0aGVyZWZvcmUsIHRocmV3IHRoZSBraW5nIGludG8gc3dvb25zIGFuZCBicm91Z2h0IGhpbSB0byBkZWF0aCdzIGRvb3IsIGJ1dCBuZXZlcnRoZWxlc3MgaGUgcmVjb3ZlcmVkLiBBbmQgYWZ0ZXIgaGUgd2FzIG91dCBvZiBkYW5nZXIsIHRob3VnaCBoZSB3YXMgc3RpbGwgd2VhayBhbmQga2VwdCBoaW1zZWxmIGZvciBhIGxvbmcgdGltZSB1bmRlciByZWdpbWVuIGFuZCB0cmVhdG1lbnQsIHBlcmNlaXZpbmcgZnJvbSB0aGVpciB0dW11bHQgYXQgaGlzIGRvb3IgdGhhdCBoaXMgTWFjZWRvbmlhbnMgd2VyZSB5ZWFybmluZyB0byBzZWUgaGltLCBoZSB0b29rIGhpcyBjbG9hayBhbmQgd2VudCBvdXQgdG8gdGhlbS4gQW5kIGFmdGVyIHNhY3JpZmljaW5nIHRvIHRoZSBnb2RzIGhlIHdlbnQgb24gYm9hcmQgc2hpcCBhZ2FpbiBhbmQgZHJvcHBlZCBkb3duIHRoZSByaXZlciwgc3ViZHVpbmcgbXVjaCB0ZXJyaXRvcnkgYW5kIGdyZWF0IGNpdGllcyBhcyBoZSB3ZW50LjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['63.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGVuY2UsIGJlaW5nIGVhZ2VyIHRvIGJlaG9sZCB0aGUgb2NlYW4sIGFuZCBoYXZpbmcgYnVpbHQgbWFueSBwYXNzYWdlLWJvYXRzIGVxdWlwcGVkIHdpdGggb2FycywgYW5kIG1hbnkgcmFmdHMsIGhlIHdhcyBjb252ZXllZCBkb3duIHRoZSByaXZlcnMKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SHlkYXNwZXMsIEFjZXNpbmVzLCBhbmQgSW5kdXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDYuMS4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmkuIDE8L2JpYmw+KS48L25vdGU+IGluIGEgbGVpc3VyZWx5IGNvdXJzZS4gQW5kIHlldCBoaXMgdm95YWdlIHdhcyBub3QgbWFkZSB3aXRob3V0IGVmZm9ydCBub3IgZXZlbiB3aXRob3V0IHdhciwgYnV0IGhlIHdvdWxkIGxhbmQgYW5kIGFzc2F1bHQgdGhlIGNpdGllcyBvbiBoaXMgcm91dGUgYW5kIHN1YmR1ZSBldmVyeXRoaW5nLiBIb3dldmVyLCBpbiBhdHRhY2tpbmcgdGhlIHBlb3BsZSBjYWxsZWQgTWFsbGksIHdobyBhcmUgc2FpZCB0byBoYXZlIGJlZW4gdGhlIG1vc3Qgd2FybGlrZSBvZiB0aGUgSW5kaWFucywgaGUgY2FtZSB3aXRoaW4gYSBsaXR0bGUgb2YgYmVpbmcgY3V0IGRvd24uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNi4xLjEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aS4gMTwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmkuIDE8L3RyYW5zbGF0aW9uPg=="
translation['63.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciBkaXNwZXJzaW5nIHRoZSBpbmhhYml0YW50cyBmcm9tIHRoZSB3YWxscyB3aXRoIG1pc3NpbGVzLCBoZSB3YXMgdGhlIGZpcnN0IHRvIG1vdW50IHVwb24gdGhlIHdhbGwgYnkgYSBzY2FsaW5nIGxhZGRlciwgYW5kIHNpbmNlIHRoZSBsYWRkZXIgd2FzIGJyb2tlbiB0byBwaWVjZXMgYW5kIGhlIHdhcyBleHBvc2VkIHRvIHRoZSBtaXNzaWxlcyBvZiB0aGUgQmFyYmFyaWFucyB3aG8gc3Rvb2QgYWxvbmcgdGhlIHdhbGwgYmVsb3csIGFsbW9zdCBhbG9uZSBhcyBoZSB3YXMsIGhlIGNyb3VjaGVkIGFuZCB0aHJldyBoaW1zZWxmIGludG8gdGhlIG1pZHN0IG9mIHRoZSBlbmVteSwgYW5kIGJ5IGdvb2QgZm9ydHVuZSBhbGlnaHRlZCBvbiBoaXMgZmVldC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['63.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFzIGhlIGJyYW5kaXNoZWQgaGlzIGFybXMsIHRoZSBCYXJiYXJpYW5zIHRob3VnaHQgdGhhdCBhIHNoYXBlIG9mIGdsZWFtaW5nIGZpcmUgcGxheWVkIGluIGZyb250IG9mIGhpcyBwZXJzb24uIFRoZXJlZm9yZSBhdCBmaXJzdCB0aGV5IHNjYXR0ZXJlZCBhbmQgZmxlZDsgYnV0IHdoZW4gdGhleSBzYXcgdGhhdCBoZSB3YXMgYWNjb21wYW5pZWQgYnkgb25seSB0d28gb2YgaGlzIGd1YXJkcywgdGhleSByYW4gdXBvbiBoaW0sIGFuZCBzb21lIHRyaWVkIHRvIHdvdW5kIGhpbSBieSB0aHJ1c3RpbmcgdGhlaXIgc3dvcmRzIGFuZCBzcGVhcnMgdGhyb3VnaCBoaXMgYXJtb3VyIGFzIGhlIGRlZmVuZGVkIGhpbXNlbGYsIHdoaWxlIG9uZSwgc3RhbmRpbmcgYSBsaXR0bGUgZnVydGhlciBvZmYsIHNob3QgYW4gYXJyb3cgYXQgaGltIHdpdGggc3VjaCBhY2N1cmFjeSBhbmQgZm9yY2UgdGhhdCBpdCBjdXQgaXRzIHdheSB0aHJvdWdoIGhpcyBicmVhc3RwbGF0ZSBhbmQgZmFzdGVuZWQgaXRzZWxmIGluIGhpcyByaWJzIGF0IHRoZSBicmVhc3QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['63.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggd2FzIHRoZSBmb3JjZSBvZiB0aGUgYmxvdyB0aGF0IEFsZXhhbmRlciByZWNvaWxlZCBhbmQgc2FuayB0byBoaXMga25lZXMsIHdoZXJldXBvbiBoaXMgYXNzYWlsYW50IHJhbiBhdCBoaW0gd2l0aCBkcmF3biBzY2ltaXRhciwgd2hpbGUgUGV1Y2VzdGFzIGFuZCBMaW1uYWV1cwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5MZW9ubmF0dXMsIGFjY29yZGluZyB0byA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA2LjEwLjIiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aS4gMTAsIDI8L2JpYmw+Ljwvbm90ZT4gZGVmZW5kZWQgaGltLiBCb3RoIG9mIHRoZW0gd2VyZSB3b3VuZGVkLCBhbmQgTGltbmFldXMgd2FzIGtpbGxlZDsgYnV0IFBldWNlc3RhcyBoZWxkIG91dCwgYW5kIGF0IGxhc3QgQWxleGFuZGVyIGtpbGxlZCB0aGUgQmFyYmFyaWFuLiBCdXQgaGUgaGltc2VsZiByZWNlaXZlZCBtYW55IHdvdW5kcywgYW5kIGF0IGxhc3Qgd2FzIHNtaXR0ZW4gb24gdGhlIG5lY2sgd2l0aCBhIGN1ZGdlbCwgYW5kIGxlYW5lZCBhZ2FpbnN0IHRoZSB3YWxsLCBoaXMgZXllcyBzdGlsbCBmaXhlZCB1cG9uIGhpcyBmb2VzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDYuMTAuMiI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpLiAxMCwgMjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aS4gMTAsIDI8L3RyYW5zbGF0aW9uPg=="
translation['63.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgaW5zdGFudCBoaXMgTWFjZWRvbmlhbnMgZmxvY2tlZCBhYm91dCBoaW0sIGNhdWdodCBoaW0gdXAsIGFscmVhZHkgdW5jb25zY2lvdXMgb2Ygd2hhdCB3YXMgZ29pbmcgb24gYWJvdXQgaGltLCBhbmQgY2FycmllZCBoaW0gdG8gaGlzIHRlbnQuIEFuZCBzdHJhaWdodHdheSBhIHJlcG9ydCB0aGF0IGhlIHdhcyBkZWFkIHByZXZhaWxlZCBpbiB0aGUgY2FtcDsgYnV0IHdoZW4gd2l0aCBtdWNoIGRpZmZpY3VsdHkgYW5kIHBhaW5zIHRoZXkgaGFkIHNhd24gb2ZmIHRoZSBzaGFmdCBvZiB0aGUgYXJyb3csIHdoaWNoIHdhcyBvZiB3b29kLCBhbmQgaGFkIHRodXMgc3VjY2VlZGVkIGF0IGxhc3QgaW4gcmVtb3ZpbmcgdGhlIGtpbmcncyBicmVhc3RwbGF0ZSwgdGhleSBjYW1lIHRvIHRoZSBleGNpc2lvbiBvZiB0aGUgYXJyb3doZWFkLCB3aGljaCB3YXMgYnVyaWVkIGluIG9uZSBvZiB0aGUgcmlicy4gV2UgYXJlIHRvbGQsIG1vcmVvdmVyLCB0aGF0IGl0IHdhcyB0aHJlZSBmaW5nZXJzIGJyb2FkIGFuZCBmb3VyIGxvbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['63.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0cyByZW1vdmFsLCB0aGVyZWZvcmUsIHRocmV3IHRoZSBraW5nIGludG8gc3dvb25zIGFuZCBicm91Z2h0IGhpbSB0byBkZWF0aCdzIGRvb3IsIGJ1dCBuZXZlcnRoZWxlc3MgaGUgcmVjb3ZlcmVkLiBBbmQgYWZ0ZXIgaGUgd2FzIG91dCBvZiBkYW5nZXIsIHRob3VnaCBoZSB3YXMgc3RpbGwgd2VhayBhbmQga2VwdCBoaW1zZWxmIGZvciBhIGxvbmcgdGltZSB1bmRlciByZWdpbWVuIGFuZCB0cmVhdG1lbnQsIHBlcmNlaXZpbmcgZnJvbSB0aGVpciB0dW11bHQgYXQgaGlzIGRvb3IgdGhhdCBoaXMgTWFjZWRvbmlhbnMgd2VyZSB5ZWFybmluZyB0byBzZWUgaGltLCBoZSB0b29rIGhpcyBjbG9hayBhbmQgd2VudCBvdXQgdG8gdGhlbS4gQW5kIGFmdGVyIHNhY3JpZmljaW5nIHRvIHRoZSBnb2RzIGhlIHdlbnQgb24gYm9hcmQgc2hpcCBhZ2FpbiBhbmQgZHJvcHBlZCBkb3duIHRoZSByaXZlciwgc3ViZHVpbmcgbXVjaCB0ZXJyaXRvcnkgYW5kIGdyZWF0IGNpdGllcyBhcyBoZSB3ZW50LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIGNhcHR1cmVkIHRlbiBvZiB0aGUgR3ltbm9zb3BoaXN0cyB3aG8gaGFkIGRvbmUgbW9zdCB0byBnZXQgU2FiYmFzIHRvIHJldm9sdCwgYW5kIGhhZCBtYWRlIHRoZSBtb3N0IHRyb3VibGUgZm9yIHRoZSBNYWNlZG9uaWFucy4gVGhlc2UgcGhpbG9zb3BoZXJzIHdlcmUgcmVwdXRlZCB0byBiZSBjbGV2ZXIgYW5kIGNvbmNpc2UgaW4gYW5zd2VyaW5nIHF1ZXN0aW9ucywgYW5kIEFsZXhhbmRlciB0aGVyZWZvcmUgcHV0IGRpZmZpY3VsdCBxdWVzdGlvbnMgdG8gdGhlbSwgZGVjbGFyaW5nIHRoYXQgaGUgd291bGQgcHV0IHRvIGRlYXRoIGhpbSB3aG8gZmlyc3QgbWFkZSBhbiBpbmNvcnJlY3QgYW5zd2VyLCBhbmQgdGhlbiB0aGUgcmVzdCwgaW4gYW4gb3JkZXIgZGV0ZXJtaW5lZCBpbiBsaWtlIG1hbm5lcjsgYW5kIGhlIGNvbW1hbmRlZCBvbmUgb2YgdGhlbSwgdGhlIG9sZGVzdCwgdG8gYmUganVkZ2UgaW4gdGhlIGNvbnRlc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBvbmUsIGFjY29yZGluZ2x5LCBiZWluZyBhc2tlZCB3aGljaCwgaW4gaGlzIG9waW5pb24sIHdlcmUgbW9yZSBudW1lcm91cywgdGhlIGxpdmluZyBvciB0aGUgZGVhZCwgc2FpZCB0aGF0IHRoZSBsaXZpbmcgd2VyZSwgc2luY2UgdGhlIGRlYWQgbm8gbG9uZ2VyIGV4aXN0ZWQuIFRoZSBzZWNvbmQsIGJlaW5nIGFza2VkIHdoZXRoZXIgdGhlIGVhcnRoIG9yIHRoZSBzZWEgcHJvZHVjZWQgbGFyZ2VyIGFuaW1hbHMsIHNhaWQgdGhlIGVhcnRoIGRpZCwgc2luY2UgdGhlIHNlYSB3YXMgYnV0IGEgcGFydCBvZiB0aGUgZWFydGguIFRoZSB0aGlyZCwgYmVpbmcgYXNrZWQgd2hhdCBhbmltYWwgd2FzIG1vc3QgY3VubmluZywgc2FpZDogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhhdCB3aGljaCB1cCB0byB0aGlzIHRpbWUgbWFuIGhhcyBub3QgZGlzY292ZXJlZC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZvdXJ0aCwgd2hlbiBhc2tlZCB3aHkgaGUgaGFkIGluZHVjZWQgU2FiYmFzIHRvIHJldm9sdCwgcmVwbGllZDogPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QmVjYXVzZSBJIHdpc2hlZCBoaW0gZWl0aGVyIHRvIGxpdmUgbm9ibHkgb3IgdG8gZGllIG5vYmx5LjwvcT4gVGhlIGZpZnRoLCBiZWluZyBhc2tlZCB3aGljaCwgaW4gaGlzIG9waW5pb24sIHdhcyBvbGRlciwgZGF5IG9yIG5pZ2h0LCByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRheSwgYnkgb25lIGRheTwvcT47IGFuZCBoZSBhZGRlZCwgdXBvbiB0aGUga2luZyBleHByZXNzaW5nIGFtYXplbWVudCwgdGhhdCBoYXJkIHF1ZXN0aW9ucyBtdXN0IGhhdmUgaGFyZCBhbnN3ZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5QYXNzaW5nIG9uLCB0aGVuLCB0byB0aGUgc2l4dGgsIEFsZXhhbmRlciBhc2tlZCBob3cgYSBtYW4gY291bGQgYmUgbW9zdCBsb3ZlZDsgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYsPC9xPiBzYWlkIHRoZSBwaGlsb3NvcGhlciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5oZSBpcyBtb3N0IHBvd2VyZnVsLCBhbmQgeWV0IGRvZXMgbm90IGluc3BpcmUgZmVhci48L3E+IE9mIHRoZSB0aHJlZSByZW1haW5pbmcsIGhlIHdobyB3YXMgYXNrZWQgaG93IG9uZSBtaWdodCBiZWNvbWUgYSBnb2QgaW5zdGVhZCBvZiBtYW4sIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnkgZG9pbmcgc29tZXRoaW5nIHdoaWNoIGEgbWFuIGNhbm5vdCBkbzwvcT47IHRoZSBvbmUgd2hvIHdhcyBhc2tlZCB3aGljaCB3YXMgdGhlIHN0cm9uZ2VyLCBsaWZlIG9yIGRlYXRoLCBhbnN3ZXJlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MaWZlLCBzaW5jZSBpdCBzdXBwb3J0cyBzbyBtYW55IGlsbHMuPC9xPiBBbmQgdGhlIGxhc3QsIGFza2VkIGhvdyBsb25nIGl0IHdlcmUgd2VsbCBmb3IgYSBtYW4gdG8gbGl2ZSwgYW5zd2VyZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VW50aWwgaGUgZG9lcyBub3QgcmVnYXJkIGRlYXRoIGFzIGJldHRlciB0aGFuIGxpZmUuPC9xPiBTbywgdGhlbiwgdHVybmluZyB0byB0aGUganVkZ2UsIEFsZXhhbmRlciBiYWRlIGhpbSBnaXZlIGhpcyBvcGluaW9uLiBUaGUganVkZ2UgZGVjbGFyZWQgdGhhdCB0aGV5IGhhZCBhbnN3ZXJlZCBvbmUgd29yc2UgdGhhbiBhbm90aGVyLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwsIHRoZW4sPC9xPiBzYWlkIEFsZXhhbmRlciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aG91IHNoYWx0IGRpZSBmaXJzdCBmb3IgZ2l2aW5nIHN1Y2ggYSB2ZXJkaWN0LjwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQgY2Fubm90IGJlLCBPIEtpbmcsPC9xPiBzYWlkIHRoZSBqdWRnZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj51bmxlc3MgdGhvdSBmYWxzZWx5IHNhaWRzdCB0aGF0IHRob3Ugd291bGRzdCBwdXQgdG8gZGVhdGggZmlyc3QgaGltIHdobyBhbnN3ZXJlZCB3b3JzdC48L3E+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['64.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgY2FwdHVyZWQgdGVuIG9mIHRoZSBHeW1ub3NvcGhpc3RzIHdobyBoYWQgZG9uZSBtb3N0IHRvIGdldCBTYWJiYXMgdG8gcmV2b2x0LCBhbmQgaGFkIG1hZGUgdGhlIG1vc3QgdHJvdWJsZSBmb3IgdGhlIE1hY2Vkb25pYW5zLiBUaGVzZSBwaGlsb3NvcGhlcnMgd2VyZSByZXB1dGVkIHRvIGJlIGNsZXZlciBhbmQgY29uY2lzZSBpbiBhbnN3ZXJpbmcgcXVlc3Rpb25zLCBhbmQgQWxleGFuZGVyIHRoZXJlZm9yZSBwdXQgZGlmZmljdWx0IHF1ZXN0aW9ucyB0byB0aGVtLCBkZWNsYXJpbmcgdGhhdCBoZSB3b3VsZCBwdXQgdG8gZGVhdGggaGltIHdobyBmaXJzdCBtYWRlIGFuIGluY29ycmVjdCBhbnN3ZXIsIGFuZCB0aGVuIHRoZSByZXN0LCBpbiBhbiBvcmRlciBkZXRlcm1pbmVkIGluIGxpa2UgbWFubmVyOyBhbmQgaGUgY29tbWFuZGVkIG9uZSBvZiB0aGVtLCB0aGUgb2xkZXN0LCB0byBiZSBqdWRnZSBpbiB0aGUgY29udGVzdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['64.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBvbmUsIGFjY29yZGluZ2x5LCBiZWluZyBhc2tlZCB3aGljaCwgaW4gaGlzIG9waW5pb24sIHdlcmUgbW9yZSBudW1lcm91cywgdGhlIGxpdmluZyBvciB0aGUgZGVhZCwgc2FpZCB0aGF0IHRoZSBsaXZpbmcgd2VyZSwgc2luY2UgdGhlIGRlYWQgbm8gbG9uZ2VyIGV4aXN0ZWQuIFRoZSBzZWNvbmQsIGJlaW5nIGFza2VkIHdoZXRoZXIgdGhlIGVhcnRoIG9yIHRoZSBzZWEgcHJvZHVjZWQgbGFyZ2VyIGFuaW1hbHMsIHNhaWQgdGhlIGVhcnRoIGRpZCwgc2luY2UgdGhlIHNlYSB3YXMgYnV0IGEgcGFydCBvZiB0aGUgZWFydGguIFRoZSB0aGlyZCwgYmVpbmcgYXNrZWQgd2hhdCBhbmltYWwgd2FzIG1vc3QgY3VubmluZywgc2FpZDogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGF0IHdoaWNoIHVwIHRvIHRoaXMgdGltZSBtYW4gaGFzIG5vdCBkaXNjb3ZlcmVkLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['64.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmb3VydGgsIHdoZW4gYXNrZWQgd2h5IGhlIGhhZCBpbmR1Y2VkIFNhYmJhcyB0byByZXZvbHQsIHJlcGxpZWQ6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QmVjYXVzZSBJIHdpc2hlZCBoaW0gZWl0aGVyIHRvIGxpdmUgbm9ibHkgb3IgdG8gZGllIG5vYmx5LjwvcT4gVGhlIGZpZnRoLCBiZWluZyBhc2tlZCB3aGljaCwgaW4gaGlzIG9waW5pb24sIHdhcyBvbGRlciwgZGF5IG9yIG5pZ2h0LCByZXBsaWVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RGF5LCBieSBvbmUgZGF5PC9xPjsgYW5kIGhlIGFkZGVkLCB1cG9uIHRoZSBraW5nIGV4cHJlc3NpbmcgYW1hemVtZW50LCB0aGF0IGhhcmQgcXVlc3Rpb25zIG11c3QgaGF2ZSBoYXJkIGFuc3dlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['64.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBhc3Npbmcgb24sIHRoZW4sIHRvIHRoZSBzaXh0aCwgQWxleGFuZGVyIGFza2VkIGhvdyBhIG1hbiBjb3VsZCBiZSBtb3N0IGxvdmVkOyA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmLDwvcT4gc2FpZCB0aGUgcGhpbG9zb3BoZXIsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5oZSBpcyBtb3N0IHBvd2VyZnVsLCBhbmQgeWV0IGRvZXMgbm90IGluc3BpcmUgZmVhci48L3E+IE9mIHRoZSB0aHJlZSByZW1haW5pbmcsIGhlIHdobyB3YXMgYXNrZWQgaG93IG9uZSBtaWdodCBiZWNvbWUgYSBnb2QgaW5zdGVhZCBvZiBtYW4sIHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CeSBkb2luZyBzb21ldGhpbmcgd2hpY2ggYSBtYW4gY2Fubm90IGRvPC9xPjsgdGhlIG9uZSB3aG8gd2FzIGFza2VkIHdoaWNoIHdhcyB0aGUgc3Ryb25nZXIsIGxpZmUgb3IgZGVhdGgsIGFuc3dlcmVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGlmZSwgc2luY2UgaXQgc3VwcG9ydHMgc28gbWFueSBpbGxzLjwvcT4gQW5kIHRoZSBsYXN0LCBhc2tlZCBob3cgbG9uZyBpdCB3ZXJlIHdlbGwgZm9yIGEgbWFuIHRvIGxpdmUsIGFuc3dlcmVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VW50aWwgaGUgZG9lcyBub3QgcmVnYXJkIGRlYXRoIGFzIGJldHRlciB0aGFuIGxpZmUuPC9xPiBTbywgdGhlbiwgdHVybmluZyB0byB0aGUganVkZ2UsIEFsZXhhbmRlciBiYWRlIGhpbSBnaXZlIGhpcyBvcGluaW9uLiBUaGUganVkZ2UgZGVjbGFyZWQgdGhhdCB0aGV5IGhhZCBhbnN3ZXJlZCBvbmUgd29yc2UgdGhhbiBhbm90aGVyLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCwgdGhlbiw8L3E+IHNhaWQgQWxleGFuZGVyLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvdSBzaGFsdCBkaWUgZmlyc3QgZm9yIGdpdmluZyBzdWNoIGEgdmVyZGljdC48L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQgY2Fubm90IGJlLCBPIEtpbmcsPC9xPiBzYWlkIHRoZSBqdWRnZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnVubGVzcyB0aG91IGZhbHNlbHkgc2FpZHN0IHRoYXQgdGhvdSB3b3VsZHN0IHB1dCB0byBkZWF0aCBmaXJzdCBoaW0gd2hvIGFuc3dlcmVkIHdvcnN0LjwvcT4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgcGhpbG9zb3BoZXJzLCB0aGVuLCBoZSBkaXNtaXNzZWQgd2l0aCBnaWZ0czsgYnV0IHRvIHRob3NlIHdobyB3ZXJlIGluIHRoZSBoaWdoZXN0IHJlcHV0ZSBhbmQgbGl2ZWQgcXVpZXRseSBieSB0aGVtc2VsdmVzIGhlIHNlbnQgT25lc2ljcml0dXMsIGFza2luZyB0aGVtIHRvIHBheSBoaW0gYSB2aXNpdC4gTm93LCBPbmVzaWNyaXR1cyB3YXMgYSBwaGlsb3NvcGhlciBvZiB0aGUgc2Nob29sIG9mIERpb2dlbmVzIHRoZSBDeW5pYy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGhlIHRlbGxzIHVzIHRoYXQgQ2FsYW51cyB2ZXJ5IGhhcnNobHkgYW5kIGluc29sZW50bHkgYmFkZSBoaW0gc3RyaXAgb2ZmIGhpcyB0dW5pYyBhbmQgbGlzdGVuIG5ha2VkIHRvIHdoYXQgaGUgaGFkIHRvIHNheSwgb3RoZXJ3aXNlIGhlIHdvdWxkIG5vdCBjb252ZXJzZSB3aXRoIGhpbSwgbm90IGV2ZW4gaWYgaGUgY2FtZSBmcm9tIFpldXM7IGJ1dCBoZSBzYXlzIHRoYXQgRGFuZGFtaXMgd2FzIGdlbnRsZXIsIGFuZCB0aGF0IGFmdGVyIGhlYXJpbmcgZnVsbHkgYWJvdXQgU29jcmF0ZXMsIFB5dGhhZ29yYXMsIGFuZCBEaW9nZW5lcywgaGUgcmVtYXJrZWQgdGhhdCB0aGUgbWVuIGFwcGVhcmVkIHRvIGhpbSB0byBoYXZlIGJlZW4gb2YgZ29vZCBuYXR1cmFsIHBhcnRzIGJ1dCB0byBoYXZlIHBhc3NlZCB0aGVpciBsaXZlcyBpbiB0b28gbXVjaCBhd2Ugb2YgdGhlIGxhd3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk90aGVycywgaG93ZXZlciwgc2F5IHRoYXQgdGhlIG9ubHkgd29yZHMgdXR0ZXJlZCBieSBEYW5kYW1pcyB3ZXJlIHRoZXNlOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHkgZGlkIEFsZXhhbmRlciBtYWtlIHN1Y2ggYSBsb25nIGpvdXJuZXkgaGl0aGVyPzwvcT4gQ2FsYW51cywgbmV2ZXJ0aGVsZXNzLCB3YXMgcGVyc3VhZGVkIGJ5IFRheGlsZXMgdG8gcGF5IGEgdmlzaXQgdG8gQWxleGFuZGVyLiBIaXMgcmVhbCBuYW1lIHdhcyBTcGhpbmVzLCBidXQgYmVjYXVzZSBoZSBncmVldGVkIHRob3NlIHdob20gaGUgbWV0IHdpdGggCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYWxlLDwvcT4gdGhlIEluZGlhbiB3b3JkIG9mIHNhbHV0YXRpb24sIHRoZSBHcmVla3MgY2FsbGVkIGhpbSBDYWxhbnVzLiBJdCB3YXMgQ2FsYW51cywgYXMgd2UgYXJlIHRvbGQsIHdobyBsYWlkIGJlZm9yZSBBbGV4YW5kZXIgdGhlIGZhbW91cyBpbGx1c3RyYXRpb24gb2YgZ292ZXJubWVudC4gSXQgd2FzIHRoaXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRocmV3IGRvd24gdXBvbiB0aGUgZ3JvdW5kIGEgZHJ5IGFuZCBzaHJpdmVsbGVkIGhpZGUsIGFuZCBzZXQgaGlzIGZvb3QgdXBvbiB0aGUgb3V0ZXIgZWRnZSBvZiBpdDsgdGhlIGhpZGUgd2FzIHByZXNzZWQgZG93biBpbiBvbmUgcGxhY2UsIGJ1dCByb3NlIHVwIGluIG90aGVycy4gSGUgd2VudCBhbGwgcm91bmQgdGhlIGhpZGUgYW5kIHNob3dlZCB0aGF0IHRoaXMgd2FzIHRoZSByZXN1bHQgd2hlcmV2ZXIgaGUgcHJlc3NlZCB0aGUgZWRnZSBkb3duLCBhbmQgdGhlbiBhdCBsYXN0IGhlIHN0b29kIGluIHRoZSBtaWRkbGUgb2YgaXQsIGFuZCBsbyEgaXQgd2FzIGFsbCBoZWxkIGRvd24gZmlybSBhbmQgc3RpbGwuIFRoZSBzaW1pbGl0dWRlIHdhcyBkZXNpZ25lZCB0byBzaG93IHRoYXQgQWxleGFuZGVyIG91Z2h0IHRvIHB1dCBtb3N0IGNvbnN0cmFpbnQgdXBvbiB0aGUgbWlkZGxlIG9mIGhpcyBlbXBpcmUgYW5kIG5vdCB3YW5kZXIgZmFyIGF3YXkgZnJvbSBpdC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['65.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgcGhpbG9zb3BoZXJzLCB0aGVuLCBoZSBkaXNtaXNzZWQgd2l0aCBnaWZ0czsgYnV0IHRvIHRob3NlIHdobyB3ZXJlIGluIHRoZSBoaWdoZXN0IHJlcHV0ZSBhbmQgbGl2ZWQgcXVpZXRseSBieSB0aGVtc2VsdmVzIGhlIHNlbnQgT25lc2ljcml0dXMsIGFza2luZyB0aGVtIHRvIHBheSBoaW0gYSB2aXNpdC4gTm93LCBPbmVzaWNyaXR1cyB3YXMgYSBwaGlsb3NvcGhlciBvZiB0aGUgc2Nob29sIG9mIERpb2dlbmVzIHRoZSBDeW5pYy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['65.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSB0ZWxscyB1cyB0aGF0IENhbGFudXMgdmVyeSBoYXJzaGx5IGFuZCBpbnNvbGVudGx5IGJhZGUgaGltIHN0cmlwIG9mZiBoaXMgdHVuaWMgYW5kIGxpc3RlbiBuYWtlZCB0byB3aGF0IGhlIGhhZCB0byBzYXksIG90aGVyd2lzZSBoZSB3b3VsZCBub3QgY29udmVyc2Ugd2l0aCBoaW0sIG5vdCBldmVuIGlmIGhlIGNhbWUgZnJvbSBaZXVzOyBidXQgaGUgc2F5cyB0aGF0IERhbmRhbWlzIHdhcyBnZW50bGVyLCBhbmQgdGhhdCBhZnRlciBoZWFyaW5nIGZ1bGx5IGFib3V0IFNvY3JhdGVzLCBQeXRoYWdvcmFzLCBhbmQgRGlvZ2VuZXMsIGhlIHJlbWFya2VkIHRoYXQgdGhlIG1lbiBhcHBlYXJlZCB0byBoaW0gdG8gaGF2ZSBiZWVuIG9mIGdvb2QgbmF0dXJhbCBwYXJ0cyBidXQgdG8gaGF2ZSBwYXNzZWQgdGhlaXIgbGl2ZXMgaW4gdG9vIG11Y2ggYXdlIG9mIHRoZSBsYXdzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['65.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk90aGVycywgaG93ZXZlciwgc2F5IHRoYXQgdGhlIG9ubHkgd29yZHMgdXR0ZXJlZCBieSBEYW5kYW1pcyB3ZXJlIHRoZXNlOiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSBkaWQgQWxleGFuZGVyIG1ha2Ugc3VjaCBhIGxvbmcgam91cm5leSBoaXRoZXI/PC9xPiBDYWxhbnVzLCBuZXZlcnRoZWxlc3MsIHdhcyBwZXJzdWFkZWQgYnkgVGF4aWxlcyB0byBwYXkgYSB2aXNpdCB0byBBbGV4YW5kZXIuIEhpcyByZWFsIG5hbWUgd2FzIFNwaGluZXMsIGJ1dCBiZWNhdXNlIGhlIGdyZWV0ZWQgdGhvc2Ugd2hvbSBoZSBtZXQgd2l0aCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2FsZSw8L3E+IHRoZSBJbmRpYW4gd29yZCBvZiBzYWx1dGF0aW9uLCB0aGUgR3JlZWtzIGNhbGxlZCBoaW0gQ2FsYW51cy4gSXQgd2FzIENhbGFudXMsIGFzIHdlIGFyZSB0b2xkLCB3aG8gbGFpZCBiZWZvcmUgQWxleGFuZGVyIHRoZSBmYW1vdXMgaWxsdXN0cmF0aW9uIG9mIGdvdmVybm1lbnQuIEl0IHdhcyB0aGlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['65.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRocmV3IGRvd24gdXBvbiB0aGUgZ3JvdW5kIGEgZHJ5IGFuZCBzaHJpdmVsbGVkIGhpZGUsIGFuZCBzZXQgaGlzIGZvb3QgdXBvbiB0aGUgb3V0ZXIgZWRnZSBvZiBpdDsgdGhlIGhpZGUgd2FzIHByZXNzZWQgZG93biBpbiBvbmUgcGxhY2UsIGJ1dCByb3NlIHVwIGluIG90aGVycy4gSGUgd2VudCBhbGwgcm91bmQgdGhlIGhpZGUgYW5kIHNob3dlZCB0aGF0IHRoaXMgd2FzIHRoZSByZXN1bHQgd2hlcmV2ZXIgaGUgcHJlc3NlZCB0aGUgZWRnZSBkb3duLCBhbmQgdGhlbiBhdCBsYXN0IGhlIHN0b29kIGluIHRoZSBtaWRkbGUgb2YgaXQsIGFuZCBsbyEgaXQgd2FzIGFsbCBoZWxkIGRvd24gZmlybSBhbmQgc3RpbGwuIFRoZSBzaW1pbGl0dWRlIHdhcyBkZXNpZ25lZCB0byBzaG93IHRoYXQgQWxleGFuZGVyIG91Z2h0IHRvIHB1dCBtb3N0IGNvbnN0cmFpbnQgdXBvbiB0aGUgbWlkZGxlIG9mIGhpcyBlbXBpcmUgYW5kIG5vdCB3YW5kZXIgZmFyIGF3YXkgZnJvbSBpdC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgZGVzY2VudCBvZiB0aGUgcml2ZXJzIHRvIHRoZSBzZWEgY29uc3VtZWQgc2V2ZW4gbW9udGhzJyB0aW1lLiBBbmQgYWZ0ZXIgZW1lcmdpbmcgd2l0aCBoaXMgZmxlZXQgaW50byB0aGUgb2NlYW4sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBtaWRzdW1tZXIgb2YgMzI1IEIuQy48L25vdGU+IGhlIHNhaWxlZCBvdXQgdG8gYW4gaXNsYW5kIHRvIHdoaWNoIGhlIGhpbXNlbGYgZ2F2ZSB0aGUgbmFtZSBvZiBTY2lsbHVzdGlzLCBvdGhlcnMgdGhhdCBvZiBQc2lsdHVjaXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JdCBpcyBDaWxsdXRhIGluIEFycmlhbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDYuMTkuMyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BbmFiLjwvdGl0bGU+IHZpLiAxOSwgMzwvYmlibD4pLjwvbm90ZT4gIEhlcmUgaGUgbGFuZGVkIGFuZCBzYWNyaWZpY2VkIHRvIHRoZSBnb2RzLCBhbmQgc3R1ZGllZCB0aGUgbmF0dXJlIG9mIHRoZSBzZWEgYW5kIG9mIGFsbCB0aGUgc2VhLWNvYXN0IHRoYXQgd2FzIGFjY2Vzc2libGUuIFRoZW4sIGFmdGVyIHByYXlpbmcgdGhhdCBubyBtYW4gYWZ0ZXIgaGltIG1pZ2h0IHBhc3MgYmV5b25kIHRoZSBib3VuZHMgb2YgaGlzIGV4cGVkaXRpb24sIGhlIHR1cm5lZCB0byBnbyBiYWNrLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgZmxlZXQgaGUgb3JkZXJlZCB0byBnbyByb3VuZCBieSBzZWEsIGtlZXBpbmcgSW5kaWEgb24gdGhlIHJpZ2h0OyBOZWFyY2h1cyB3YXMgYXBwb2ludGVkIGFkbWlyYWwgb2YgdGhlIGZsZWV0LCBPbmVzaWNyaXR1cyBpdHMgY2hpZWYtcGlsb3QuIEJ1dCBoZSBoaW1zZWxmIHByb2NlZWRlZCBieSBsYW5kIHRocm91Z2ggdGhlIGNvdW50cnkgb2YgdGhlIE9yZWl0ZXMsIHdoZXJlIGhlIHdhcyByZWR1Y2VkIHRvIHRoZSBkaXJlc3Qgc3RyYWl0cyBhbmQgbG9zdCBhIG11bHRpdHVkZSBvZiBtZW4sIHNvIHRoYXQgbm90IGV2ZW4gdGhlIGZvdXJ0aCBwYXJ0IG9mIGhpcyBmaWdodGluZyBmb3JjZSB3YXMgYnJvdWdodCBiYWNrIGZyb20gSW5kaWEuIEFuZCB5ZXQgaGlzIGluZmFudHJ5IGhhZCBvbmNlIG51bWJlcmVkIGEgaHVuZHJlZCBhbmQgdHdlbnR5IHRob3VzYW5kLCBhbmQgaGlzIGNhdmFscnkgZmlmdGVlbiB0aG91c2FuZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGdyaWV2b3VzIGRpc2Vhc2VzLCB3cmV0Y2hlZCBmb29kLCBwYXJjaGluZyBoZWF0cywgYW5kLCB3b3JzdCBvZiBhbGwsIGZhbWluZSBkZXN0cm95ZWQgdGhlbSwgc2luY2UgdGhleSB0cmF2ZXJzZWQgYW4gdW4tdGlsbGVkIGNvdW50cnkgb2YgbWVuIHdobyBkcmFnZ2VkIG91dCBhIG1pc2VyYWJsZSBleGlzdGVuY2UsIHdobyBwb3NzZXNzZWQgYnV0IGZldyBzaGVlcCBhbmQgdGhvc2Ugb2YgYSBtaXNlcmFibGUgc29ydCwgc2luY2UgdGhlIHNlYS1maXNoIHdoaWNoIHRoZXkgYXRlIG1hZGUgdGhlaXIgZmxlc2ggdW5zYXZvdXJ5IGFuZCByYW5rLiBJdCB3YXMgd2l0aCBkaWZmaWN1bHR5LCB0aGVuLCB0aGF0IEFsZXhhbmRlciBwYXNzZWQgdGhyb3VnaCB0aGlzIGNvdW50cnkgaW4gc2l4dHkgZGF5czsgYnV0IGFzIHNvb24gYXMgaGUgcmVhY2hlZCBHZWRyb3NpYSBoZSBoYWQgYWxsIHRoaW5ncyBpbiBhYnVuZGFuY2UsIGZvciB0aGUgbmVhcmVzdCBzYXRyYXBzIGFuZCBwcmluY2VzIGhhZCBwcm92aWRlZCB0aGVtLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['66.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGRlc2NlbnQgb2YgdGhlIHJpdmVycyB0byB0aGUgc2VhIGNvbnN1bWVkIHNldmVuIG1vbnRocycgdGltZS4gQW5kIGFmdGVyIGVtZXJnaW5nIHdpdGggaGlzIGZsZWV0IGludG8gdGhlIG9jZWFuLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBtaWRzdW1tZXIgb2YgMzI1IEIuQy48L25vdGU+IGhlIHNhaWxlZCBvdXQgdG8gYW4gaXNsYW5kIHRvIHdoaWNoIGhlIGhpbXNlbGYgZ2F2ZSB0aGUgbmFtZSBvZiBTY2lsbHVzdGlzLCBvdGhlcnMgdGhhdCBvZiBQc2lsdHVjaXMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IGlzIENpbGx1dGEgaW4gQXJyaWFuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA2LjE5LjMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpLiAxOSwgMzwvYmlibD4pLjwvbm90ZT4gIEhlcmUgaGUgbGFuZGVkIGFuZCBzYWNyaWZpY2VkIHRvIHRoZSBnb2RzLCBhbmQgc3R1ZGllZCB0aGUgbmF0dXJlIG9mIHRoZSBzZWEgYW5kIG9mIGFsbCB0aGUgc2VhLWNvYXN0IHRoYXQgd2FzIGFjY2Vzc2libGUuIFRoZW4sIGFmdGVyIHByYXlpbmcgdGhhdCBubyBtYW4gYWZ0ZXIgaGltIG1pZ2h0IHBhc3MgYmV5b25kIHRoZSBib3VuZHMgb2YgaGlzIGV4cGVkaXRpb24sIGhlIHR1cm5lZCB0byBnbyBiYWNrLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDYuMTkuMyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmkuIDE5LCAzPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aS4gMTksIDM8L3RyYW5zbGF0aW9uPg=="
translation['66.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBmbGVldCBoZSBvcmRlcmVkIHRvIGdvIHJvdW5kIGJ5IHNlYSwga2VlcGluZyBJbmRpYSBvbiB0aGUgcmlnaHQ7IE5lYXJjaHVzIHdhcyBhcHBvaW50ZWQgYWRtaXJhbCBvZiB0aGUgZmxlZXQsIE9uZXNpY3JpdHVzIGl0cyBjaGllZi1waWxvdC4gQnV0IGhlIGhpbXNlbGYgcHJvY2VlZGVkIGJ5IGxhbmQgdGhyb3VnaCB0aGUgY291bnRyeSBvZiB0aGUgT3JlaXRlcywgd2hlcmUgaGUgd2FzIHJlZHVjZWQgdG8gdGhlIGRpcmVzdCBzdHJhaXRzIGFuZCBsb3N0IGEgbXVsdGl0dWRlIG9mIG1lbiwgc28gdGhhdCBub3QgZXZlbiB0aGUgZm91cnRoIHBhcnQgb2YgaGlzIGZpZ2h0aW5nIGZvcmNlIHdhcyBicm91Z2h0IGJhY2sgZnJvbSBJbmRpYS4gQW5kIHlldCBoaXMgaW5mYW50cnkgaGFkIG9uY2UgbnVtYmVyZWQgYSBodW5kcmVkIGFuZCB0d2VudHkgdGhvdXNhbmQsIGFuZCBoaXMgY2F2YWxyeSBmaWZ0ZWVuIHRob3VzYW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['66.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBncmlldm91cyBkaXNlYXNlcywgd3JldGNoZWQgZm9vZCwgcGFyY2hpbmcgaGVhdHMsIGFuZCwgd29yc3Qgb2YgYWxsLCBmYW1pbmUgZGVzdHJveWVkIHRoZW0sIHNpbmNlIHRoZXkgdHJhdmVyc2VkIGFuIHVuLXRpbGxlZCBjb3VudHJ5IG9mIG1lbiB3aG8gZHJhZ2dlZCBvdXQgYSBtaXNlcmFibGUgZXhpc3RlbmNlLCB3aG8gcG9zc2Vzc2VkIGJ1dCBmZXcgc2hlZXAgYW5kIHRob3NlIG9mIGEgbWlzZXJhYmxlIHNvcnQsIHNpbmNlIHRoZSBzZWEtZmlzaCB3aGljaCB0aGV5IGF0ZSBtYWRlIHRoZWlyIGZsZXNoIHVuc2F2b3VyeSBhbmQgcmFuay4gSXQgd2FzIHdpdGggZGlmZmljdWx0eSwgdGhlbiwgdGhhdCBBbGV4YW5kZXIgcGFzc2VkIHRocm91Z2ggdGhpcyBjb3VudHJ5IGluIHNpeHR5IGRheXM7IGJ1dCBhcyBzb29uIGFzIGhlIHJlYWNoZWQgR2Vkcm9zaWEgaGUgaGFkIGFsbCB0aGluZ3MgaW4gYWJ1bmRhbmNlLCBmb3IgdGhlIG5lYXJlc3Qgc2F0cmFwcyBhbmQgcHJpbmNlcyBoYWQgcHJvdmlkZWQgdGhlbS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgYWZ0ZXIgcmVmcmVzaGluZyBoaXMgZm9yY2VzIGhlcmUsIGhlIHNldCBvdXQgYW5kIG1hcmNoZWQgZm9yIHNldmVuIGRheXMgdGhyb3VnaCBDYXJtYW5pYSBpbiBhIHJldmVsbGluZyByb3V0LiBIZSBoaW1zZWxmIHdhcyBjb252ZXllZCBzbG93bHkgYWxvbmcgYnkgZWlnaHQgaG9yc2VzLCB3aGlsZSBoZSBmZWFzdGVkIGRheSBhbmQgbmlnaHQgY29udGludW91c2x5IHdpdGggaGlzIGNvbXBhbmlvbnMgb24gYSBkYWlzIGJ1aWx0IHVwb24gYSBsb2Z0eSBhbmQgY29uc3BpY3VvdXMgc2NhZmZvbGRpbmcgb2Ygb2Jsb25nIHNoYXBlOyBhbmQgd2FnZ29ucyB3aXRob3V0IG51bWJlciBmb2xsb3dlZCwgc29tZSB3aXRoIHB1cnBsZSBhbmQgZW1icm9pZGVyZWQgY2Fub3BpZXMsIG90aGVycyBwcm90ZWN0ZWQgZnJvbSB0aGUgc3VuIGJ5IGJvdWdocyBvZiB0cmVlcyB3aGljaCB3ZXJlIGtlcHQgZnJlc2ggYW5kIGdyZWVuLCBjb252ZXlpbmcgdGhlIHJlc3Qgb2YgaGlzIGZyaWVuZHMgYW5kIGNvbW1hbmRlcnMsIHdobyB3ZXJlIGFsbCBnYXJsYW5kZWQgYW5kIGRyaW5raW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3QgYSBzaGllbGQgd2FzIHRvIGJlIHNlZW4sIG5vdCBhIGhlbG1ldCwgbm90IGEgc3BlYXIsIGJ1dCBhbG9uZyB0aGUgd2hvbGUgbWFyY2ggd2l0aCBjdXBzIGFuZCBkcmlua2luZy1ob3JucyBhbmQgZmxhZ29ucyB0aGUgc29sZGllcnMga2VwdCBkaXBwaW5nIHdpbmUgZnJvbSBodWdlIGNhc2tzIGFuZCBtaXhpbmctYm93bHMgYW5kIHBsZWRnaW5nIG9uZSBhbm90aGVyLCBzb21lIGFzIHRoZXkgbWFyY2hlZCBhbG9uZywgb3RoZXJzIGx5aW5nIGRvd247IHdoaWxlIHBpcGVzIGFuZCBmbHV0ZXMsIHN0cmluZ2VkIGluc3RydW1lbnRzIGFuZCBzb25nLCBhbmQgcmV2ZWxsaW5nIGNyaWVzIG9mIHdvbWVuLCBmaWxsZWQgZXZlcnkgcGxhY2Ugd2l0aCBhYnVuZGFudCBtdXNpYy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgdXBvbiB0aGlzIGRpc29yZGVyZWQgYW5kIHN0cmFnZ2xpbmcgcHJvY2Vzc2lvbiB0aGVyZSBmb2xsb3dlZCBhbHNvIHRoZSBzcG9ydHMgb2YgYmFjY2hhbmFsaWFuIGxpY2Vuc2UsIGFzIHRob3VnaCBCYWNjaHVzIGhpbXNlbGYgd2VyZSBwcmVzZW50IGFuZCBjb25kdWN0aW5nIHRoZSByZXZlbC4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBBcnJpYW4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA2LjI4LjEiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QW5hYi48L3RpdGxlPiB2aS4gMjgsIDEgZjwvYmlibD4pLCB0aGlzIGJhY2NoYW5hbGlhbiBwcm9jZXNzaW9uIHRocm91Z2ggQ2FybWFuaWEgcmVzdHMgb24gbm8gY3JlZGlibGUgYXV0aG9yaXR5Ljwvbm90ZT4gTW9yZW92ZXIsIHdoZW4gaGUgY2FtZSB0byB0aGUgcm95YWwgcGFsYWNlIG9mIEdlZHJvc2lhLCBoZSBvbmNlIG1vcmUgZ2F2ZSBoaXMgYXJteSB0aW1lIGZvciByZXN0IGFuZCBoZWxkIGhpZ2ggZmVzdGl2YWwuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSB0b2xkLCB0b28sIHRoYXQgaGUgd2FzIG9uY2Ugdmlld2luZyBzb21lIGNvbnRlc3RzIGluIHNpbmdpbmcgYW5kIGRhbmNpbmcsIGJlaW5nIHdlbGwgaGVhdGVkIHdpdGggd2luZSwgYW5kIHRoYXQgaGlzIGZhdm91cml0ZSwgQmFnb2FzLCB3b24gdGhlIHByaXplIGZvciBzb25nIGFuZCBkYW5jZSwgYW5kIHRoZW4sIGFsbCBpbiBoaXMgZmVzdGFsIGFycmF5LCBwYXNzZWQgdGhyb3VnaCB0aGUgdGhlYXRyZSBhbmQgdG9vayBoaXMgc2VhdCBieSBBbGV4YW5kZXIncyBzaWRlOyBhdCBzaWdodCBvZiB3aGljaCB0aGUgTWFjZWRvbmlhbnMgY2xhcHBlZCB0aGVpciBoYW5kcyBhbmQgbG91ZGx5IGJhZGUgdGhlIGtpbmcga2lzcyB0aGUgdmljdG9yLCB1bnRpbCBhdCBsYXN0IGhlIHRocmV3IGhpcyBhcm1zIGFib3V0IGhpbSBhbmQga2lzc2VkIGhpbSB0ZW5kZXJseS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['67.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGFmdGVyIHJlZnJlc2hpbmcgaGlzIGZvcmNlcyBoZXJlLCBoZSBzZXQgb3V0IGFuZCBtYXJjaGVkIGZvciBzZXZlbiBkYXlzIHRocm91Z2ggQ2FybWFuaWEgaW4gYSByZXZlbGxpbmcgcm91dC4gSGUgaGltc2VsZiB3YXMgY29udmV5ZWQgc2xvd2x5IGFsb25nIGJ5IGVpZ2h0IGhvcnNlcywgd2hpbGUgaGUgZmVhc3RlZCBkYXkgYW5kIG5pZ2h0IGNvbnRpbnVvdXNseSB3aXRoIGhpcyBjb21wYW5pb25zIG9uIGEgZGFpcyBidWlsdCB1cG9uIGEgbG9mdHkgYW5kIGNvbnNwaWN1b3VzIHNjYWZmb2xkaW5nIG9mIG9ibG9uZyBzaGFwZTsgYW5kIHdhZ2dvbnMgd2l0aG91dCBudW1iZXIgZm9sbG93ZWQsIHNvbWUgd2l0aCBwdXJwbGUgYW5kIGVtYnJvaWRlcmVkIGNhbm9waWVzLCBvdGhlcnMgcHJvdGVjdGVkIGZyb20gdGhlIHN1biBieSBib3VnaHMgb2YgdHJlZXMgd2hpY2ggd2VyZSBrZXB0IGZyZXNoIGFuZCBncmVlbiwgY29udmV5aW5nIHRoZSByZXN0IG9mIGhpcyBmcmllbmRzIGFuZCBjb21tYW5kZXJzLCB3aG8gd2VyZSBhbGwgZ2FybGFuZGVkIGFuZCBkcmlua2luZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['67.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdCBhIHNoaWVsZCB3YXMgdG8gYmUgc2Vlbiwgbm90IGEgaGVsbWV0LCBub3QgYSBzcGVhciwgYnV0IGFsb25nIHRoZSB3aG9sZSBtYXJjaCB3aXRoIGN1cHMgYW5kIGRyaW5raW5nLWhvcm5zIGFuZCBmbGFnb25zIHRoZSBzb2xkaWVycyBrZXB0IGRpcHBpbmcgd2luZSBmcm9tIGh1Z2UgY2Fza3MgYW5kIG1peGluZy1ib3dscyBhbmQgcGxlZGdpbmcgb25lIGFub3RoZXIsIHNvbWUgYXMgdGhleSBtYXJjaGVkIGFsb25nLCBvdGhlcnMgbHlpbmcgZG93bjsgd2hpbGUgcGlwZXMgYW5kIGZsdXRlcywgc3RyaW5nZWQgaW5zdHJ1bWVudHMgYW5kIHNvbmcsIGFuZCByZXZlbGxpbmcgY3JpZXMgb2Ygd29tZW4sIGZpbGxlZCBldmVyeSBwbGFjZSB3aXRoIGFidW5kYW50IG11c2ljLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['67.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHVwb24gdGhpcyBkaXNvcmRlcmVkIGFuZCBzdHJhZ2dsaW5nIHByb2Nlc3Npb24gdGhlcmUgZm9sbG93ZWQgYWxzbyB0aGUgc3BvcnRzIG9mIGJhY2NoYW5hbGlhbiBsaWNlbnNlLCBhcyB0aG91Z2ggQmFjY2h1cyBoaW1zZWxmIHdlcmUgcHJlc2VudCBhbmQgY29uZHVjdGluZyB0aGUgcmV2ZWwuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBBcnJpYW4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDYuMjguMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmkuIDI4LCAxIGY8L2JpYmw+KSwgdGhpcyBiYWNjaGFuYWxpYW4gcHJvY2Vzc2lvbiB0aHJvdWdoIENhcm1hbmlhIHJlc3RzIG9uIG5vIGNyZWRpYmxlIGF1dGhvcml0eS48L25vdGU+IE1vcmVvdmVyLCB3aGVuIGhlIGNhbWUgdG8gdGhlIHJveWFsIHBhbGFjZSBvZiBHZWRyb3NpYSwgaGUgb25jZSBtb3JlIGdhdmUgaGlzIGFybXkgdGltZSBmb3IgcmVzdCBhbmQgaGVsZCBoaWdoIGZlc3RpdmFsLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDYuMjguMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmkuIDI4LCAxIGY8L2JpYmw+KSwgdGhpcyBiYWNjaGFuYWxpYW4gcHJvY2Vzc2lvbiB0aHJvdWdoIENhcm1hbmlhIHJlc3RzIG9uIG5vIGNyZWRpYmxlIGF1dGhvcml0eS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpLiAyOCwgMSBmPC90cmFuc2xhdGlvbj4="
translation['67.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSB0b2xkLCB0b28sIHRoYXQgaGUgd2FzIG9uY2Ugdmlld2luZyBzb21lIGNvbnRlc3RzIGluIHNpbmdpbmcgYW5kIGRhbmNpbmcsIGJlaW5nIHdlbGwgaGVhdGVkIHdpdGggd2luZSwgYW5kIHRoYXQgaGlzIGZhdm91cml0ZSwgQmFnb2FzLCB3b24gdGhlIHByaXplIGZvciBzb25nIGFuZCBkYW5jZSwgYW5kIHRoZW4sIGFsbCBpbiBoaXMgZmVzdGFsIGFycmF5LCBwYXNzZWQgdGhyb3VnaCB0aGUgdGhlYXRyZSBhbmQgdG9vayBoaXMgc2VhdCBieSBBbGV4YW5kZXIncyBzaWRlOyBhdCBzaWdodCBvZiB3aGljaCB0aGUgTWFjZWRvbmlhbnMgY2xhcHBlZCB0aGVpciBoYW5kcyBhbmQgbG91ZGx5IGJhZGUgdGhlIGtpbmcga2lzcyB0aGUgdmljdG9yLCB1bnRpbCBhdCBsYXN0IGhlIHRocmV3IGhpcyBhcm1zIGFib3V0IGhpbSBhbmQga2lzc2VkIGhpbSB0ZW5kZXJseS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIE5lYXJjaHVzIGNhbWUgdXAgdG8gbWVldCBoaW0sIGFuZCBBbGV4YW5kZXIgd2FzIHNvIGRlbGlnaHRlZCB0byBoZWFyIG9mIGhpcyB2b3lhZ2UgdGhhdCBoZSBlYWdlcmx5IGRlc2lyZWQgdG8gc2FpbCBkb3duIHRoZSBFdXBocmF0ZXMgaGltc2VsZiB3aXRoIGEgbGFyZ2UgZmxlZXQKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IHdhcyBhZnRlciBoaXMgcmV0dXJuIHRvIFBlcnNlcG9saXMgdGhhdCB0aGlzIGRlc2lyZSBzZWl6ZWQgaGltICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy4xLjEiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gdmlpLiAxLCAxPC9iaWJsPikuPC9ub3RlPiBhbmQgdGhlbiwgYWZ0ZXIgY2lyY3VtbmF2aWdhdGluZyBBcmFiaWEgYW5kIEFmcmljYSwgdG8gZW50ZXIgdGhlIE1lZGl0ZXJyYW5lYW4gYnkgd2F5IG9mIHRoZSBwaWxsYXJzIG9mIEhlcmFjbGVzLiBBbmQgdmVzc2VscyBvZiBldmVyeSBzb3J0IHdlcmUgYnVpbHQgZm9yIGhpbSBhdCBUaGFwc2FjdXMsIGFuZCBzYWlsb3JzIGFuZCBwaWxvdHMgd2VyZSBhc3NlbWJsZWQgZnJvbSBhbGwgcGFydHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgaW5jcmVhc2luZyBkaWZmaWN1bHRpZXMgb2YgaGlzIG1hcmNoIGJhY2ssIGhpcyB3b3VuZCBhbW9uZyB0aGUgTWFsbGksIGFuZCB0aGUgbG9zc2VzIGluIGhpcyBhcm15LCB3aGljaCB3ZXJlIHJlcG9ydGVkIHRvIGJlIGhlYXZ5LCBsZWQgbWVuIHRvIGRvdWJ0IGhpcyBzYWZlIHJldHVybiwgaW5jbGluZWQgc3ViamVjdCBwZW9wbGVzIHRvIHJldm9sdCwgYW5kIGJyZWQgZ3JlYXQgaW5qdXN0aWNlLCByYXBhY2l0eSwgYW5kIGluc29sZW5jZSBpbiB0aGUgZ2VuZXJhbHMgYW5kIHNhdHJhcHMgd2hvbSBoZSBoYWQgYXBwb2ludGVkLiBJbiBhIHdvcmQsIHJlc3RsZXNzbmVzcyBhbmQgYSBkZXNpcmUgZm9yIGNoYW5nZSBzcHJlYWQgZXZlcnl3aGVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGV2ZW4gYWdhaW5zdCBBbnRpcGF0ZXIsIE9seW1waWFzIGFuZCBDbGVvcGF0cmEgaGFkIHJhaXNlZCBhIGZhY3Rpb24sIGFuZCBoYWQgZGl2aWRlZCBoaXMgcmVhbG0gYmV0d2VlbiB0aGVtLCBPbHltcGlhcyB0YWtpbmcgRXBpcnVzLCBhbmQgQ2xlb3BhdHJhIE1hY2Vkb25pYS4gV2hlbiBoZSBoZWFyZCBvZiB0aGlzLCBBbGV4YW5kZXIgc2FpZCB0aGF0IGhpcyBtb3RoZXIgaGFkIG1hZGUgdGhlIGJldHRlciBjaG9pY2U7IGZvciB0aGUgTWFjZWRvbmlhbnMgd291bGQgbm90IHN1Ym1pdCB0byBiZSByZWlnbmVkIG92ZXIgYnkgYSB3b21hbi48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['68.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSBOZWFyY2h1cyBjYW1lIHVwIHRvIG1lZXQgaGltLCBhbmQgQWxleGFuZGVyIHdhcyBzbyBkZWxpZ2h0ZWQgdG8gaGVhciBvZiBoaXMgdm95YWdlIHRoYXQgaGUgZWFnZXJseSBkZXNpcmVkIHRvIHNhaWwgZG93biB0aGUgRXVwaHJhdGVzIGhpbXNlbGYgd2l0aCBhIGxhcmdlIGZsZWV0CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IHdhcyBhZnRlciBoaXMgcmV0dXJuIHRvIFBlcnNlcG9saXMgdGhhdCB0aGlzIGRlc2lyZSBzZWl6ZWQgaGltICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjEuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpaS4gMSwgMTwvYmlibD4pLjwvbm90ZT4gYW5kIHRoZW4sIGFmdGVyIGNpcmN1bW5hdmlnYXRpbmcgQXJhYmlhIGFuZCBBZnJpY2EsIHRvIGVudGVyIHRoZSBNZWRpdGVycmFuZWFuIGJ5IHdheSBvZiB0aGUgcGlsbGFycyBvZiBIZXJhY2xlcy4gQW5kIHZlc3NlbHMgb2YgZXZlcnkgc29ydCB3ZXJlIGJ1aWx0IGZvciBoaW0gYXQgVGhhcHNhY3VzLCBhbmQgc2FpbG9ycyBhbmQgcGlsb3RzIHdlcmUgYXNzZW1ibGVkIGZyb20gYWxsIHBhcnRzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuMS4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiAxLCAxPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDEsIDE8L3RyYW5zbGF0aW9uPg=="
translation['68.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgaW5jcmVhc2luZyBkaWZmaWN1bHRpZXMgb2YgaGlzIG1hcmNoIGJhY2ssIGhpcyB3b3VuZCBhbW9uZyB0aGUgTWFsbGksIGFuZCB0aGUgbG9zc2VzIGluIGhpcyBhcm15LCB3aGljaCB3ZXJlIHJlcG9ydGVkIHRvIGJlIGhlYXZ5LCBsZWQgbWVuIHRvIGRvdWJ0IGhpcyBzYWZlIHJldHVybiwgaW5jbGluZWQgc3ViamVjdCBwZW9wbGVzIHRvIHJldm9sdCwgYW5kIGJyZWQgZ3JlYXQgaW5qdXN0aWNlLCByYXBhY2l0eSwgYW5kIGluc29sZW5jZSBpbiB0aGUgZ2VuZXJhbHMgYW5kIHNhdHJhcHMgd2hvbSBoZSBoYWQgYXBwb2ludGVkLiBJbiBhIHdvcmQsIHJlc3RsZXNzbmVzcyBhbmQgYSBkZXNpcmUgZm9yIGNoYW5nZSBzcHJlYWQgZXZlcnl3aGVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['68.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBldmVuIGFnYWluc3QgQW50aXBhdGVyLCBPbHltcGlhcyBhbmQgQ2xlb3BhdHJhIGhhZCByYWlzZWQgYSBmYWN0aW9uLCBhbmQgaGFkIGRpdmlkZWQgaGlzIHJlYWxtIGJldHdlZW4gdGhlbSwgT2x5bXBpYXMgdGFraW5nIEVwaXJ1cywgYW5kIENsZW9wYXRyYSBNYWNlZG9uaWEuIFdoZW4gaGUgaGVhcmQgb2YgdGhpcywgQWxleGFuZGVyIHNhaWQgdGhhdCBoaXMgbW90aGVyIGhhZCBtYWRlIHRoZSBiZXR0ZXIgY2hvaWNlOyBmb3IgdGhlIE1hY2Vkb25pYW5zIHdvdWxkIG5vdCBzdWJtaXQgdG8gYmUgcmVpZ25lZCBvdmVyIGJ5IGEgd29tYW4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Gb3IgdGhlc2UgcmVhc29ucyBoZSBzZW50IE5lYXJjaHVzIGJhY2sgdG8gdGhlIHNlYSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RWFybHkgaW4gMzI0IEIuQy48L25vdGU+IGRldGVybWluZWQgdG8gZmlsbCBhbGwgdGhlIHJlZ2lvbnMgYWxvbmcgdGhlIHNlYSB3aXRoIHdhcnMsIHdoaWxlIGhlIGhpbXNlbGY7IG1hcmNoaW5nIGRvd24gZnJvbSBVcHBlciBBc2lhLCBjaGFzdGlzZWQgdGhvc2Ugb2YgaGlzIGNvbW1hbmRlcnMgd2hvIGhhZCBkb25lIHdyb25nLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uZSBvZiB0aGUgc29ucyBvZiBBYnVsZXRlcywgT3h5YXJ0ZXMsIGhlIHNsZXcgd2l0aCBoaXMgb3duIGhhbmQsIHJ1bm5pbmcgaGltIHRocm91Z2ggd2l0aCBhIHNwZWFyOyBhbmQgd2hlbiBBYnVsZXRlcyBmYWlsZWQgdG8gZnVybmlzaCBoaW0gd2l0aCB0aGUgbmVjZXNzYXJ5IHByb3Zpc2lvbnMsIGJ1dCBicm91Z2h0IGhpbSBpbnN0ZWFkIHRocmVlIHRob3VzYW5kIHRhbGVudHMgaW4gY29pbiwgQWxleGFuZGVyIG9yZGVyZWQgdGhlIG1vbmV5IHRvIGJlIHRocm93biB0byBoaXMgaG9yc2VzLiBBbmQgd2hlbiB0aGV5IHdvdWxkIG5vdCB0b3VjaCBpdCwgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T2Ygd2hhdCB1c2UgdG8gdXMsIHRoZW4sPC9xPiBoZSBjcmllZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pcyB0aGUgcHJvdmlzaW9uIHlvdSBoYXZlIG1hZGU/PC9xPiBhbmQgdGhyZXcgQWJ1bGV0ZXMgaW50byBwcmlzb24uPC9wPgogICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVhcmx5IGluIDMyNCBCLkMuPC9ub3RlPiBkZXRlcm1pbmVkIHRvIGZpbGwgYWxsIHRoZSByZWdpb25zIGFsb25nIHRoZSBzZWEgd2l0aCB3YXJzLCB3aGlsZSBoZSBoaW1zZWxmOyBtYXJjaGluZyBkb3duIGZyb20gVXBwZXIgQXNpYSwgY2hhc3Rpc2VkIHRob3NlIG9mIGhpcyBjb21tYW5kZXJzIHdobyBoYWQgZG9uZSB3cm9uZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['68.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uZSBvZiB0aGUgc29ucyBvZiBBYnVsZXRlcywgT3h5YXJ0ZXMsIGhlIHNsZXcgd2l0aCBoaXMgb3duIGhhbmQsIHJ1bm5pbmcgaGltIHRocm91Z2ggd2l0aCBhIHNwZWFyOyBhbmQgd2hlbiBBYnVsZXRlcyBmYWlsZWQgdG8gZnVybmlzaCBoaW0gd2l0aCB0aGUgbmVjZXNzYXJ5IHByb3Zpc2lvbnMsIGJ1dCBicm91Z2h0IGhpbSBpbnN0ZWFkIHRocmVlIHRob3VzYW5kIHRhbGVudHMgaW4gY29pbiwgQWxleGFuZGVyIG9yZGVyZWQgdGhlIG1vbmV5IHRvIGJlIHRocm93biB0byBoaXMgaG9yc2VzLiBBbmQgd2hlbiB0aGV5IHdvdWxkIG5vdCB0b3VjaCBpdCwgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PZiB3aGF0IHVzZSB0byB1cywgdGhlbiw8L3E+IGhlIGNyaWVkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aXMgdGhlIHByb3Zpc2lvbiB5b3UgaGF2ZSBtYWRlPzwvcT4gYW5kIHRocmV3IEFidWxldGVzIGludG8gcHJpc29uLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIFBlcnNpYSwgdG8gYmVnaW4gd2l0aCwgaGUgZGlzdHJpYnV0ZWQgdGhlIG1vbmV5IGFtb25nIHRoZSB3b21lbiwganVzdCBhcyB0aGVpciBraW5ncyB3ZXJlIGFjY3VzdG9tZWQsIGFzIG9mdGVuIGFzIHRoZXkgY2FtZSBpbnRvIFBlcnNpYSwgdG8gZ2l2ZSBlYWNoIG9uZSBvZiB0aGVtIGEgZ29sZCBwaWVjZS4gQW5kIGZvciB0aGlzIHJlYXNvbiwgaXQgaXMgc2FpZCwgc29tZSBvZiB0aGVpciBraW5ncyBkaWQgbm90IGNvbWUgb2Z0ZW4gaW50byBQZXJzaWEsIGFuZCBPY2h1cyBub3QgZXZlbiBvbmNlLCBiZWluZyBzbyBwZW51cmlvdXMgYXMgdG8gZXhwYXRyaWF0ZSBoaW1zZWxmLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2Vjb25kIHBsYWNlLCBoYXZpbmcgZGlzY292ZXJlZCB0aGF0IHRoZSB0b21iIG9mIEN5cnVzIGhhZCBiZWVuIHJpZmxlZCwgaGUgcHV0IHRvIGRlYXRoIHRoZSBwZXJwZXRyYXRvciBvZiB0aGUgZGVlZCwgYWx0aG91Z2ggdGhlIGN1bHByaXQgd2FzIGEgcHJvbWluZW50IE1hY2Vkb25pYW4gbmF0aXZlIG9mIFBlbGxhLCBieSBuYW1lIFBvbHltYWNodXMuIEFmdGVyIHJlYWRpbmcgdGhlIGluc2NyaXB0aW9uIHVwb24gdGhpcyB0b21iLCBoZSBvcmRlcmVkIGl0IHRvIGJlIHJlcGVhdGVkIGJlbG93IGluIEdyZWVrIGxldHRlcnMuIEl0IHJhbiB0aHVzOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIG1hbiwgd2hvc29ldmVyIHRob3UgYXJ0IGFuZCB3aGVuY2Vzb2V2ZXIgdGhvdSBjb21lc3QsIGZvciBJIGtub3cgdGhhdCB0aG91IHdpbHQgY29tZSwgSSBhbSBDeXJ1cywgYW5kIEkgd29uIGZvciB0aGUgUGVyc2lhbnMgdGhlaXIgZW1waXJlLiBEbyBub3QsIHRoZXJlZm9yZSwgYmVncnVkZ2UgbWUgdGhpcyBsaXR0bGUgZWFydGggd2hpY2ggY292ZXJzIG15IGJvZHkuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdvcmRzLCB0aGVuLCBkZWVwbHkgYWZmZWN0ZWQgQWxleGFuZGVyLCB3aG8gd2FzIHJlbWluZGVkIG9mIHRoZSB1bmNlcnRhaW50eSBhbmQgbXV0YWJpbGl0eSBvZiBsaWZlLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA2LjI5LjQiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gdmkuIDI5LCA0LTg8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['69.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gUGVyc2lhLCB0byBiZWdpbiB3aXRoLCBoZSBkaXN0cmlidXRlZCB0aGUgbW9uZXkgYW1vbmcgdGhlIHdvbWVuLCBqdXN0IGFzIHRoZWlyIGtpbmdzIHdlcmUgYWNjdXN0b21lZCwgYXMgb2Z0ZW4gYXMgdGhleSBjYW1lIGludG8gUGVyc2lhLCB0byBnaXZlIGVhY2ggb25lIG9mIHRoZW0gYSBnb2xkIHBpZWNlLiBBbmQgZm9yIHRoaXMgcmVhc29uLCBpdCBpcyBzYWlkLCBzb21lIG9mIHRoZWlyIGtpbmdzIGRpZCBub3QgY29tZSBvZnRlbiBpbnRvIFBlcnNpYSwgYW5kIE9jaHVzIG5vdCBldmVuIG9uY2UsIGJlaW5nIHNvIHBlbnVyaW91cyBhcyB0byBleHBhdHJpYXRlIGhpbXNlbGYuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['69.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIGhhdmluZyBkaXNjb3ZlcmVkIHRoYXQgdGhlIHRvbWIgb2YgQ3lydXMgaGFkIGJlZW4gcmlmbGVkLCBoZSBwdXQgdG8gZGVhdGggdGhlIHBlcnBldHJhdG9yIG9mIHRoZSBkZWVkLCBhbHRob3VnaCB0aGUgY3VscHJpdCB3YXMgYSBwcm9taW5lbnQgTWFjZWRvbmlhbiBuYXRpdmUgb2YgUGVsbGEsIGJ5IG5hbWUgUG9seW1hY2h1cy4gQWZ0ZXIgcmVhZGluZyB0aGUgaW5zY3JpcHRpb24gdXBvbiB0aGlzIHRvbWIsIGhlIG9yZGVyZWQgaXQgdG8gYmUgcmVwZWF0ZWQgYmVsb3cgaW4gR3JlZWsgbGV0dGVycy4gSXQgcmFuIHRodXM6IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBtYW4sIHdob3NvZXZlciB0aG91IGFydCBhbmQgd2hlbmNlc29ldmVyIHRob3UgY29tZXN0LCBmb3IgSSBrbm93IHRoYXQgdGhvdSB3aWx0IGNvbWUsIEkgYW0gQ3lydXMsIGFuZCBJIHdvbiBmb3IgdGhlIFBlcnNpYW5zIHRoZWlyIGVtcGlyZS4gRG8gbm90LCB0aGVyZWZvcmUsIGJlZ3J1ZGdlIG1lIHRoaXMgbGl0dGxlIGVhcnRoIHdoaWNoIGNvdmVycyBteSBib2R5LjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['69.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdvcmRzLCB0aGVuLCBkZWVwbHkgYWZmZWN0ZWQgQWxleGFuZGVyLCB3aG8gd2FzIHJlbWluZGVkIG9mIHRoZSB1bmNlcnRhaW50eSBhbmQgbXV0YWJpbGl0eSBvZiBsaWZlLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNi4yOS40Ij5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmkuIDI5LCA0LTg8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNi4yOS40Ij5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmkuIDI5LCA0LTg8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmkuIDI5LCA0LTg8cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIFBlcnNpYSwgdG9vLCBDYWxhbnVzLCB3aG8gaGFkIHN1ZmZlcmVkIGZvciBhIGxpdHRsZSB3aGlsZSBmcm9tIGludGVzdGluYWwgZGlzb3JkZXIsIGFza2VkIHRoYXQgYSBmdW5lcmFsIHB5cmUgbWlnaHQgYmUgcHJlcGFyZWQgZm9yIGhpbS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNlbGYtc2FjcmlmaWNlIG9mIENhbGFudXMgaXMgbmFycmF0ZWQgYnkgQXJyaWFuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjMuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiAzKTwvYmlibD4uPC9ub3RlPiBUbyB0aGlzIGhlIGNhbWUgb24gaG9yc2ViYWNrLCBhbmQgYWZ0ZXIgb2ZmZXJpbmcgcHJheWVycywgc3ByaW5rbGluZyBoaW1zZWxmOyBhbmQgY2FzdGluZyBzb21lIG9mIGhpcyBoYWlyIHVwb24gdGhlIHB5cmUsIGhlIGFzY2VuZGVkIGl0LGdyZWV0aW5nIHRoZSBNYWNlZG9uaWFucyB3aG8gd2VyZSBwcmVzZW50LCBhbmQgZXhob3J0aW5nIHRoZW0gdG8gbWFrZSB0aGF0IGRheSBvbmUgb2YgcGxlYXN1cmUgYW5kIHJldmVscnkgd2l0aCB0aGUga2luZywgd2hvbSwgaGUgZGVjbGFyZWQsIGhlIHNob3VsZCBzb29uIHNlZSBpbiBCYWJ5bG9uLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRodXMgc3BlYWtpbmcsIGhlIGxheSBkb3duIGFuZCBjb3ZlcmVkIGhpcyBoZWFkLCBub3IgZGlkIGhlIG1vdmUgYXMgdGhlIGZpcmUgYXBwcm9hY2hlZCBoaW0sIGJ1dCBjb250aW51ZWQgdG8gbGllIGluIHRoZSBzYW1lIHBvc3R1cmUgYXMgYXQgZmlyc3QsIGFuZCBzbyBzYWNyaWZpY2VkIGhpbXNlbGYgYWNjZXB0YWJseSwgYXMgdGhlIHdpc2UgbWVuIG9mIGhpcyBjb3VudHJ5IGhhZCBkb25lIGZyb20gb2Ygb2xkLiBUaGUgc2FtZSB0aGluZyB3YXMgZG9uZSBtYW55IHllYXJzIGFmdGVyd2FyZHMgYnkgYW5vdGhlciBJbmRpYW4gd2hvIHdhcyBpbiB0aGUgZm9sbG93aW5nIG9mIENhZXNhciwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF1Z3VzdHVzIENhZXNhci48L25vdGU+IGF0IEF0aGVuczsgYW5kIHRoZSA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbmRpYW4ncyBUb21iPC9xPiBpcyBzaG93biB0aGVyZSB0byB0aGlzIGRheS48L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNlbGYtc2FjcmlmaWNlIG9mIENhbGFudXMgaXMgbmFycmF0ZWQgYnkgQXJyaWFuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjMuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiAzKTwvYmlibD4uPC9ub3RlPiBUbyB0aGlzIGhlIGNhbWUgb24gaG9yc2ViYWNrLCBhbmQgYWZ0ZXIgb2ZmZXJpbmcgcHJheWVycywgc3ByaW5rbGluZyBoaW1zZWxmOyBhbmQgY2FzdGluZyBzb21lIG9mIGhpcyBoYWlyIHVwb24gdGhlIHB5cmUsIGhlIGFzY2VuZGVkIGl0LGdyZWV0aW5nIHRoZSBNYWNlZG9uaWFucyB3aG8gd2VyZSBwcmVzZW50LCBhbmQgZXhob3J0aW5nIHRoZW0gdG8gbWFrZSB0aGF0IGRheSBvbmUgb2YgcGxlYXN1cmUgYW5kIHJldmVscnkgd2l0aCB0aGUga2luZywgd2hvbSwgaGUgZGVjbGFyZWQsIGhlIHNob3VsZCBzb29uIHNlZSBpbiBCYWJ5bG9uLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuMy4xIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDMpPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpaS4gMyk8L3RyYW5zbGF0aW9uPg=="
translation['69.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRodXMgc3BlYWtpbmcsIGhlIGxheSBkb3duIGFuZCBjb3ZlcmVkIGhpcyBoZWFkLCBub3IgZGlkIGhlIG1vdmUgYXMgdGhlIGZpcmUgYXBwcm9hY2hlZCBoaW0sIGJ1dCBjb250aW51ZWQgdG8gbGllIGluIHRoZSBzYW1lIHBvc3R1cmUgYXMgYXQgZmlyc3QsIGFuZCBzbyBzYWNyaWZpY2VkIGhpbXNlbGYgYWNjZXB0YWJseSwgYXMgdGhlIHdpc2UgbWVuIG9mIGhpcyBjb3VudHJ5IGhhZCBkb25lIGZyb20gb2Ygb2xkLiBUaGUgc2FtZSB0aGluZyB3YXMgZG9uZSBtYW55IHllYXJzIGFmdGVyd2FyZHMgYnkgYW5vdGhlciBJbmRpYW4gd2hvIHdhcyBpbiB0aGUgZm9sbG93aW5nIG9mIENhZXNhciwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXVndXN0dXMgQ2Flc2FyLjwvbm90ZT4gYXQgQXRoZW5zOyBhbmQgdGhlIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kaWFuJ3MgVG9tYjwvcT4gaXMgc2hvd24gdGhlcmUgdG8gdGhpcyBkYXkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjcwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFsZXhhbmRlciwgYWZ0ZXIgcmV0dXJuaW5nIGZyb20gdGhlIGZ1bmVyYWwgcHlyZSBhbmQgYXNzZW1ibGluZyBtYW55IG9mIGhpcyBmcmllbmRzIGFuZCBvZmZpY2VycyBmb3Igc3VwcGVyLCBwcm9wb3NlZCBhIGNvbnRlc3QgaW4gZHJpbmtpbmcgbmVhdCB3aW5lLCB0aGUgdmljdG9yIHRvIGJlIGNyb3duZWQuIFdlbGwsIHRoZW4sIHRoZSBvbmUgd2hvIGRyYW5rIHRoZSBtb3N0LCBQcm9tYWNodXMsIGdvdCBhcyBmYXIgYXMgZm91ciBwaXRjaGVyczsKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jaG91cyw8L3E+IG9yIDxnbG9zcz5waXRjaGVyPC9nbG9zcz4sIGhlbGQgYWJvdXQgdGhyZWUgcXVhcnRzLjwvbm90ZT4gaGUgdG9vayB0aGUgcHJpemUsIGEgY3Jvd24gb2YgYSB0YWxlbnQncyB3b3J0aCwgYnV0IGxpdmVkIG9ubHkgdGhyZWUgZGF5cyBhZnRlcndhcmRzLiBBbmQgb2YgdGhlIHJlc3QsIGFjY29yZGluZyB0byBDaGFyZXMsIGZvcnR5LW9uZSBkaWVkIG9mIHdoYXQgdGhleSBkcmFuaywgYSB2aW9sZW50IGNoaWxsIGhhdmluZyBzZXQgaW4gYWZ0ZXIgdGhlaXIgZGViYXVjaC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['70.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFsZXhhbmRlciwgYWZ0ZXIgcmV0dXJuaW5nIGZyb20gdGhlIGZ1bmVyYWwgcHlyZSBhbmQgYXNzZW1ibGluZyBtYW55IG9mIGhpcyBmcmllbmRzIGFuZCBvZmZpY2VycyBmb3Igc3VwcGVyLCBwcm9wb3NlZCBhIGNvbnRlc3QgaW4gZHJpbmtpbmcgbmVhdCB3aW5lLCB0aGUgdmljdG9yIHRvIGJlIGNyb3duZWQuIFdlbGwsIHRoZW4sIHRoZSBvbmUgd2hvIGRyYW5rIHRoZSBtb3N0LCBQcm9tYWNodXMsIGdvdCBhcyBmYXIgYXMgZm91ciBwaXRjaGVyczsKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y2hvdXMsPC9xPiBvciA8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5waXRjaGVyPC9nbG9zcz4sIGhlbGQgYWJvdXQgdGhyZWUgcXVhcnRzLjwvbm90ZT4gaGUgdG9vayB0aGUgcHJpemUsIGEgY3Jvd24gb2YgYSB0YWxlbnQncyB3b3J0aCwgYnV0IGxpdmVkIG9ubHkgdGhyZWUgZGF5cyBhZnRlcndhcmRzLiBBbmQgb2YgdGhlIHJlc3QsIGFjY29yZGluZyB0byBDaGFyZXMsIGZvcnR5LW9uZSBkaWVkIG9mIHdoYXQgdGhleSBkcmFuaywgYSB2aW9sZW50IGNoaWxsIGhhdmluZyBzZXQgaW4gYWZ0ZXIgdGhlaXIgZGViYXVjaC48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNob3VzLDwvcT4gb3IgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cGl0Y2hlcjwvZ2xvc3M+LCBoZWxkIGFib3V0IHRocmVlIHF1YXJ0cy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCBTdXNhIGhlIGJyb3VnaHQgdG8gcGFzcyB0aGUgbWFycmlhZ2Ugb2YgaGlzIGNvbXBhbmlvbnMsIHRvb2sgdG8gd2lmZSBoaW1zZWxmIHRoZSBkYXVnaHRlciBvZiBEYXJlaXVzLCBTdGF0ZWlyYSwgYXNzaWduZWQgdGhlIG5vYmxlc3Qgd29tZW4gdG8gaGlzIG5vYmxlc3QgbWVuLCBhbmQgZ2F2ZSBhIGdlbmVyYWwgd2VkZGluZyBmZWFzdCBmb3IgdGhvc2Ugb2YgaGlzIE1hY2Vkb25pYW5zIHdobyBoYWQgYWxyZWFkeSBjb250cmFjdGVkIG90aGVyIG1hcnJpYWdlcy4gQXQgdGhpcyBmZWFzdCwgd2UgYXJlIHRvbGQsIG5pbmUgdGhvdXNhbmQgZ3Vlc3RzIHJlY2xpbmVkIGF0IHN1cHBlciwgdG8gZWFjaCBvZiB3aG9tIGEgZ29sZGVuIGN1cCBmb3IgdGhlIGxpYmF0aW9ucyB3YXMgZ2l2ZW4uIEFsbCB0aGUgb3RoZXIgYXBwb2ludG1lbnRzIHRvbywgd2VyZSBhbWF6aW5nbHkgc3BsZW5kaWQsIGFuZCB0aGUgaG9zdCBwYWlkIGhpbXNlbGYgdGhlIGRlYnRzIHdoaWNoIGhpcyBndWVzdHMgb3dlZCwgdGhlIHdob2xlIG91dGxheSBhbW91bnRpbmcgdG8gbmluZSB0aG91c2FuZCBlaWdodCBodW5kcmVkIGFuZCBzZXZlbnR5IHRhbGVudHMuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbGV4YW5kZXIgYWxzbyBwYWlkIHRoZSBkZWJ0cyBvZiBhbGwgaGlzIHNvbGRpZXJzLCBhbW91bnRpbmcgdG8gMjAsMDAwIHRhbGVudHMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjUuMSI+QXJyaWFuLCA8dGl0bGU+QW5hYi48L3RpdGxlPiB2aWkuIDUsIDEtMzwvYmlibD4pLCB1bmxlc3MgdGhpcyBpcyB0aGUgZG9uYXRpb24gd2hpY2ggUGx1dGFyY2ggaGFzIGhlcmUgZXJyb25lb3VzbHkgY29ubmVjdGVkIHdpdGggdGhlIGdyZWF0IHdlZGRpbmcgZmVhc3QuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXRoLiA1MzgiPkF0aGVuYWV1cywgeGlpLiBwcC4gNTM4IGZmPC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBBbnRpZ2VuZXMsIHRoZSBPbmUtZXllZCwgaGFkIGdvdCBoaW1zZWxmIGVucm9sbGVkIGFzIGEgZGVidG9yIGZyYXVkdWxlbnRseSBhbmQsIG9uIHByb2R1Y2luZyBzb21lYm9keSB3aG8gYWZmaXJtZWQgdGhhdCBoZSBoYWQgbWFkZSBhIGxvYW4gdG8gaGltIGF0IHRoZSBiYW5rLCB0aGUgbW9uZXkgd2FzIHBhaWQgb3ZlcjsgdGhlbiBoaXMgZnJhdWQgd2FzIGRpc2NvdmVyZWQsIGFuZCB0aGUga2luZywgaW4gYW5nZXIsIGRyb3ZlIGhpbSBmcm9tIGhpcyBjb3VydCBhbmQgZGVwcml2ZWQgaGltIG9mIGhpcyBjb21tYW5kLiBBbnRpZ2VuZXMsIGhvd2V2ZXIsIHdhcyBhIHNwbGVuZGlkIHNvbGRpZXIsIGFuZCB3aGlsZSBoZSB3YXMgc3RpbGwgYSB5b3VuZyBtYW4gYW5kIFBoaWxpcCB3YXMgYmVzaWVnaW5nIFBlcmludGh1cywgdGhvdWdoIGEgYm9sdCBmcm9tIGEgY2F0YXB1bHQgc21vdGUgaGltIGluIHRoZSBleWUsIGhlIHdvdWxkIG5vdCBjb25zZW50IHRvIGhhdmUgdGhlIGJvbHQgdGFrZW4gb3V0IG5vciBnaXZlIHVwIGZpZ2h0aW5nIHVudGlsIGhlIGhhZCByZXBlbGxlZCB0aGUgZW5lbXkgYW5kIHNodXQgdGhlbSB1cCB3aXRoaW4gdGhlaXIgd2FsbHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBjb3VsZCBub3QgZW5kdXJlIHdpdGggYW55IGNvbXBsYWNlbmN5IHRoZSBkaXNncmFjZSB0aGF0IG5vdyBmZWxsIHVwb24gaGltLCBidXQgd2FzIGV2aWRlbnRseSBnb2luZyB0byBtYWtlIGF3YXkgd2l0aCBoaW1zZWxmIGZyb20gZ3JpZWYgYW5kIGRlc3BvbmRlbmN5LiBTbyB0aGUga2luZywgZmVhcmluZyB0aGlzLCBwdXQgYXdheSBoaXMgd3JhdGggYW5kIG9yZGVyZWQgaGltIHRvIGtlZXAgdGhlIG1vbmV5LjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['70.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IFN1c2EgaGUgYnJvdWdodCB0byBwYXNzIHRoZSBtYXJyaWFnZSBvZiBoaXMgY29tcGFuaW9ucywgdG9vayB0byB3aWZlIGhpbXNlbGYgdGhlIGRhdWdodGVyIG9mIERhcmVpdXMsIFN0YXRlaXJhLCBhc3NpZ25lZCB0aGUgbm9ibGVzdCB3b21lbiB0byBoaXMgbm9ibGVzdCBtZW4sIGFuZCBnYXZlIGEgZ2VuZXJhbCB3ZWRkaW5nIGZlYXN0IGZvciB0aG9zZSBvZiBoaXMgTWFjZWRvbmlhbnMgd2hvIGhhZCBhbHJlYWR5IGNvbnRyYWN0ZWQgb3RoZXIgbWFycmlhZ2VzLiBBdCB0aGlzIGZlYXN0LCB3ZSBhcmUgdG9sZCwgbmluZSB0aG91c2FuZCBndWVzdHMgcmVjbGluZWQgYXQgc3VwcGVyLCB0byBlYWNoIG9mIHdob20gYSBnb2xkZW4gY3VwIGZvciB0aGUgbGliYXRpb25zIHdhcyBnaXZlbi4gQWxsIHRoZSBvdGhlciBhcHBvaW50bWVudHMgdG9vLCB3ZXJlIGFtYXppbmdseSBzcGxlbmRpZCwgYW5kIHRoZSBob3N0IHBhaWQgaGltc2VsZiB0aGUgZGVidHMgd2hpY2ggaGlzIGd1ZXN0cyBvd2VkLCB0aGUgd2hvbGUgb3V0bGF5IGFtb3VudGluZyB0byBuaW5lIHRob3VzYW5kIGVpZ2h0IGh1bmRyZWQgYW5kIHNldmVudHkgdGFsZW50cy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWxleGFuZGVyIGFsc28gcGFpZCB0aGUgZGVidHMgb2YgYWxsIGhpcyBzb2xkaWVycywgYW1vdW50aW5nIHRvIDIwLDAwMCB0YWxlbnRzICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjUuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpaS4gNSwgMS0zPC9iaWJsPiksIHVubGVzcyB0aGlzIGlzIHRoZSBkb25hdGlvbiB3aGljaCBQbHV0YXJjaCBoYXMgaGVyZSBlcnJvbmVvdXNseSBjb25uZWN0ZWQgd2l0aCB0aGUgZ3JlYXQgd2VkZGluZyBmZWFzdC4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkF0aC4gNTM4Ij5BdGhlbmFldXMsIHhpaS4gcHAuIDUzOCBmZjwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuNS4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiA1LCAxLTM8L2JpYmw+KSwgdW5sZXNzIHRoaXMgaXMgdGhlIGRvbmF0aW9uIHdoaWNoIFBsdXRhcmNoIGhhcyBoZXJlIGVycm9uZW91c2x5IGNvbm5lY3RlZCB3aXRoIHRoZSBncmVhdCB3ZWRkaW5nIGZlYXN0LiBDZi4gPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDUsIDEtMzxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkF0aC4gNTM4Ij5BdGhlbmFldXMsIHhpaS4gcHAuIDUzOCBmZjwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['70.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBBbnRpZ2VuZXMsIHRoZSBPbmUtZXllZCwgaGFkIGdvdCBoaW1zZWxmIGVucm9sbGVkIGFzIGEgZGVidG9yIGZyYXVkdWxlbnRseSBhbmQsIG9uIHByb2R1Y2luZyBzb21lYm9keSB3aG8gYWZmaXJtZWQgdGhhdCBoZSBoYWQgbWFkZSBhIGxvYW4gdG8gaGltIGF0IHRoZSBiYW5rLCB0aGUgbW9uZXkgd2FzIHBhaWQgb3ZlcjsgdGhlbiBoaXMgZnJhdWQgd2FzIGRpc2NvdmVyZWQsIGFuZCB0aGUga2luZywgaW4gYW5nZXIsIGRyb3ZlIGhpbSBmcm9tIGhpcyBjb3VydCBhbmQgZGVwcml2ZWQgaGltIG9mIGhpcyBjb21tYW5kLiBBbnRpZ2VuZXMsIGhvd2V2ZXIsIHdhcyBhIHNwbGVuZGlkIHNvbGRpZXIsIGFuZCB3aGlsZSBoZSB3YXMgc3RpbGwgYSB5b3VuZyBtYW4gYW5kIFBoaWxpcCB3YXMgYmVzaWVnaW5nIFBlcmludGh1cywgdGhvdWdoIGEgYm9sdCBmcm9tIGEgY2F0YXB1bHQgc21vdGUgaGltIGluIHRoZSBleWUsIGhlIHdvdWxkIG5vdCBjb25zZW50IHRvIGhhdmUgdGhlIGJvbHQgdGFrZW4gb3V0IG5vciBnaXZlIHVwIGZpZ2h0aW5nIHVudGlsIGhlIGhhZCByZXBlbGxlZCB0aGUgZW5lbXkgYW5kIHNodXQgdGhlbSB1cCB3aXRoaW4gdGhlaXIgd2FsbHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['70.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBjb3VsZCBub3QgZW5kdXJlIHdpdGggYW55IGNvbXBsYWNlbmN5IHRoZSBkaXNncmFjZSB0aGF0IG5vdyBmZWxsIHVwb24gaGltLCBidXQgd2FzIGV2aWRlbnRseSBnb2luZyB0byBtYWtlIGF3YXkgd2l0aCBoaW1zZWxmIGZyb20gZ3JpZWYgYW5kIGRlc3BvbmRlbmN5LiBTbyB0aGUga2luZywgZmVhcmluZyB0aGlzLCBwdXQgYXdheSBoaXMgd3JhdGggYW5kIG9yZGVyZWQgaGltIHRvIGtlZXAgdGhlIG1vbmV5LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0aGlydHkgdGhvdXNhbmQgYm95cyB3aG9tIGhlIGhhZCBsZWZ0IGJlaGluZCBoaW0gdW5kZXIgaW5zdHJ1Y3Rpb24gYW5kIHRyYWluaW5nCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDQ3LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGx2aWkuIDM8L2JpYmw+Ljwvbm90ZT4gd2VyZSBub3cgc28gdmlnb3JvdXMgaW4gdGhlaXIgYm9kaWVzIGFuZCBzbyBjb21lbHkgaW4gdGhlaXIgbG9va3MsIGFuZCBzaG93ZWQgYmVzaWRlcyBzdWNoIGFkbWlyYWJsZSBkZXh0ZXJpdHkgYW5kIGFnaWxpdHkgaW4gdGhlaXIgZXhlcmNpc2VzLCB0aGF0IEFsZXhhbmRlciBoaW1zZWxmIHdhcyBkZWxpZ2h0ZWQ7IGhpcyBNYWNlZG9uaWFucywgaG93ZXZlciwgd2VyZSBmaWxsZWQgd2l0aCBkZWplY3Rpb24gYW5kIGZlYXIsIHRoaW5raW5nIHRoYXQgdGhlaXIga2luZyB3b3VsZCBub3cgcGF5IGxlc3MgcmVnYXJkIHRvIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB3aGVuIGhlIGFsc28gc2VudCB0aGUgd2VhayBhbmQgbWFpbWVkIGFtb25nIHRoZW0gZG93biB0byB0aGUgc2VhLWJvYXJkLCB0aGV5IHNhaWQgaXQgd2FzIGluc3VsdCBhbmQgYWJ1c2UsIGFmdGVyIHVzaW5nIG1lbiB1cCBpbiBldmVyeSBraW5kIG9mIHNlcnZpY2UsIG5vdyB0byBwdXQgdGhlbSBhd2F5IGluIGRpc2dyYWNlIGFuZCBjYXN0IHRoZW0gYmFjayB1cG9uIHRoZWlyIG5hdGl2ZSBjaXRpZXMgYW5kIHRoZWlyIHBhcmVudHMsIG5vIGxvbmdlciB0aGUgbWVuIHRoZXkgd2VyZSB3aGVuIGhlIHRvb2sgdGhlbS4gQWNjb3JkaW5nbHksIHRoZXkgYmFkZSBoaW0gc2VuZCB0aGVtIGFsbCBhd2F5IGFuZCBob2xkIGFsbCBoaXMgTWFjZWRvbmlhbnMgb2Ygbm8gYWNjb3VudCwgc2luY2UgaGUgaGFkIHRoZXNlIHlvdW5nIHdhci1kYW5jZXJzLCB3aXRoIHdob20gaGUgY291bGQgZ28gb24gYW5kIGNvbnF1ZXIgdGhlIHdvcmxkLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGFjY291bnQgb2YgdGhlIHF1YXJyZWwgYmV0d2VlbiBBbGV4YW5kZXIgYW5kIHRoZSBNYWNlZG9uaWFucyBpbiBBcnJpYW4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjguMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BbmFiLjwvdGl0bGU+IHZpaS4gOMOQMTE8L2JpYmw+KSBkaWZmZXJzIG1hdGVyaWFsbHkgZnJvbSB0aGF0IG9mIFBsdXRhcmNoLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlc2Ugd29yZHMgb2YgdGhlaXJzIEFsZXhhbmRlciB3YXMgZGlzcGxlYXNlZCwgYW5kIGhlYXBlZCBtdWNoIGFidXNlIHVwb24gdGhlbSBpbiBoaXMgYW5nZXIsIGFuZCBkcm92ZSB0aGVtIGF3YXksIGFuZCBjb21taXR0ZWQgaGlzIHdhdGNoZXMgdG8gUGVyc2lhbnMsIGFuZCBvdXQgb2YgdGhlc2UgY29uc3RpdHV0ZWQgaGlzIGJvZHktZ3VhcmRzIGFuZCBhdHRlbmRhbnRzLiBXaGVuIHRoZSBNYWNlZG9uaWFucyBzYXcgaGltIGVzY29ydGVkIGJ5IHRoZXNlLCB3aGlsZSB0aGV5IHRoZW1zZWx2ZXMgd2VyZSBleGNsdWRlZCBmcm9tIGhpbSBhbmQgdHJlYXRlZCB3aXRoIGNvbnR1bWVseSwgdGhleSB3ZXJlIGh1bWJsZWQ7IGFuZCB3aGVuIHRoZXkgcmVhc29uZWQgdGhlIG1hdHRlciBvdXQgdGhleSBmb3VuZCB0aGF0IHRoZXkgaGFkIGJlZW4gYWxtb3N0IG1hZCB3aXRoIGplYWxvdXN5IGFuZCByYWdlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TbyBmaW5hbGx5LCBhZnRlciBjb21pbmcgdG8gdGhlaXIgc2Vuc2VzLCB0aGV5IHdlbnQgdG8gaGlzIHRlbnQsIHdpdGhvdXQgdGhlaXIgYXJtcyBhbmQgd2VhcmluZyB0aGVpciB0dW5pY3Mgb25seSwgYW5kIHdpdGggbG91ZCBjcmllcyBhbmQgbGFtZW50YXRpb25zIHB1dCB0aGVtc2VsdmVzIGF0IGhpcyBtZXJjeSwgYmlkZGluZyBoaW0gZGVhbCB3aXRoIHRoZW0gYXMgYmFzZSBhbmQgdGhhbmtsZXNzIG1lbi4gQnV0IEFsZXhhbmRlciB3b3VsZCBub3Qgc2VlIHRoZW0sIGFsdGhvdWdoIGhpcyBoZWFydCB3YXMgc29mdGVuaW5nLiBBbmQgdGhlIG1lbiB3b3VsZCBub3QgZGVzaXN0LCBidXQgZm9yIHR3byBkYXlzIGFuZCBuaWdodHMgcGVyc2lzdGVkIGluIHN0YW5kaW5nIHRodXMgYmVmb3JlIGhpcyBkb29yLCB3ZWVwaW5nIGFuZCBjYWxsaW5nIHVwb24gdGhlaXIgbWFzdGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBvbiB0aGUgdGhpcmQgZGF5IGhlIGNhbWUgZm9ydGgsIGFuZCB3aGVuIGhlIHNhdyB0aGVpciBwaXRlb3VzIGFuZCBodW1ibGUgcGxpZ2h0LCB3ZXB0IGZvciBzb21lIHRpbWU7IHRoZW4sIGFmdGVyIGNoaWRpbmcgdGhlbSBnZW50bHkgYW5kIHNwZWFraW5nIGtpbmRseSB0byB0aGVtLCBoZSBkaXNtaXNzZWQgdGhvc2Ugd2hvIHdlcmUgcGFzdCBzZXJ2aWNlIHdpdGggbWFnbmlmaWNlbnQgZ2lmdHMsIGFuZCB3cm90ZSB0byBBbnRpcGF0ZXIgdGhhdCBhdCBhbGwgdGhlIHB1YmxpYyBjb250ZXN0cyBhbmQgaW4gdGhlIHRoZWF0cmVzIHRoZXkgc2hvdWxkIGhhdmUgdGhlIGZvcmVtb3N0IHNlYXRzIGFuZCB3ZWFyIGdhcmxhbmRzLiBIZSBhbHNvIG9yZGFpbmVkIHRoYXQgdGhlIG9ycGhhbiBjaGlsZHJlbiBvZiB0aG9zZSB3aG8gaGFkIGxvc3QgdGhlaXIgbGl2ZXMgaW4gaGlzIHNlcnZpY2Ugc2hvdWxkIHJlY2VpdmUgdGhlaXIgZmF0aGVyJ3MgcGF5LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjEyLjEiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gdmlpLiAxMjwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['71.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHRoaXJ0eSB0aG91c2FuZCBib3lzIHdob20gaGUgaGFkIGxlZnQgYmVoaW5kIGhpbSB1bmRlciBpbnN0cnVjdGlvbiBhbmQgdHJhaW5pbmcKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDQ3LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGx2aWkuIDM8L2JpYmw+Ljwvbm90ZT4gd2VyZSBub3cgc28gdmlnb3JvdXMgaW4gdGhlaXIgYm9kaWVzIGFuZCBzbyBjb21lbHkgaW4gdGhlaXIgbG9va3MsIGFuZCBzaG93ZWQgYmVzaWRlcyBzdWNoIGFkbWlyYWJsZSBkZXh0ZXJpdHkgYW5kIGFnaWxpdHkgaW4gdGhlaXIgZXhlcmNpc2VzLCB0aGF0IEFsZXhhbmRlciBoaW1zZWxmIHdhcyBkZWxpZ2h0ZWQ7IGhpcyBNYWNlZG9uaWFucywgaG93ZXZlciwgd2VyZSBmaWxsZWQgd2l0aCBkZWplY3Rpb24gYW5kIGZlYXIsIHRoaW5raW5nIHRoYXQgdGhlaXIga2luZyB3b3VsZCBub3cgcGF5IGxlc3MgcmVnYXJkIHRvIHRoZW0uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNDcuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4bHZpaS4gMzwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['71.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB3aGVuIGhlIGFsc28gc2VudCB0aGUgd2VhayBhbmQgbWFpbWVkIGFtb25nIHRoZW0gZG93biB0byB0aGUgc2VhLWJvYXJkLCB0aGV5IHNhaWQgaXQgd2FzIGluc3VsdCBhbmQgYWJ1c2UsIGFmdGVyIHVzaW5nIG1lbiB1cCBpbiBldmVyeSBraW5kIG9mIHNlcnZpY2UsIG5vdyB0byBwdXQgdGhlbSBhd2F5IGluIGRpc2dyYWNlIGFuZCBjYXN0IHRoZW0gYmFjayB1cG9uIHRoZWlyIG5hdGl2ZSBjaXRpZXMgYW5kIHRoZWlyIHBhcmVudHMsIG5vIGxvbmdlciB0aGUgbWVuIHRoZXkgd2VyZSB3aGVuIGhlIHRvb2sgdGhlbS4gQWNjb3JkaW5nbHksIHRoZXkgYmFkZSBoaW0gc2VuZCB0aGVtIGFsbCBhd2F5IGFuZCBob2xkIGFsbCBoaXMgTWFjZWRvbmlhbnMgb2Ygbm8gYWNjb3VudCwgc2luY2UgaGUgaGFkIHRoZXNlIHlvdW5nIHdhci1kYW5jZXJzLCB3aXRoIHdob20gaGUgY291bGQgZ28gb24gYW5kIGNvbnF1ZXIgdGhlIHdvcmxkLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgYWNjb3VudCBvZiB0aGUgcXVhcnJlbCBiZXR3ZWVuIEFsZXhhbmRlciBhbmQgdGhlIE1hY2Vkb25pYW5zIGluIEFycmlhbiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy44LjEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpaS4gOMOQMTE8L2JpYmw+KSBkaWZmZXJzIG1hdGVyaWFsbHkgZnJvbSB0aGF0IG9mIFBsdXRhcmNoLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjguMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiA4w5AxMTwvYmlibD4pIGRpZmZlcnMgbWF0ZXJpYWxseSBmcm9tIHRoYXQgb2YgUGx1dGFyY2guPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDjDkDExPC90cmFuc2xhdGlvbj4="
translation['71.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZXNlIHdvcmRzIG9mIHRoZWlycyBBbGV4YW5kZXIgd2FzIGRpc3BsZWFzZWQsIGFuZCBoZWFwZWQgbXVjaCBhYnVzZSB1cG9uIHRoZW0gaW4gaGlzIGFuZ2VyLCBhbmQgZHJvdmUgdGhlbSBhd2F5LCBhbmQgY29tbWl0dGVkIGhpcyB3YXRjaGVzIHRvIFBlcnNpYW5zLCBhbmQgb3V0IG9mIHRoZXNlIGNvbnN0aXR1dGVkIGhpcyBib2R5LWd1YXJkcyBhbmQgYXR0ZW5kYW50cy4gV2hlbiB0aGUgTWFjZWRvbmlhbnMgc2F3IGhpbSBlc2NvcnRlZCBieSB0aGVzZSwgd2hpbGUgdGhleSB0aGVtc2VsdmVzIHdlcmUgZXhjbHVkZWQgZnJvbSBoaW0gYW5kIHRyZWF0ZWQgd2l0aCBjb250dW1lbHksIHRoZXkgd2VyZSBodW1ibGVkOyBhbmQgd2hlbiB0aGV5IHJlYXNvbmVkIHRoZSBtYXR0ZXIgb3V0IHRoZXkgZm91bmQgdGhhdCB0aGV5IGhhZCBiZWVuIGFsbW9zdCBtYWQgd2l0aCBqZWFsb3VzeSBhbmQgcmFnZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['71.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIGZpbmFsbHksIGFmdGVyIGNvbWluZyB0byB0aGVpciBzZW5zZXMsIHRoZXkgd2VudCB0byBoaXMgdGVudCwgd2l0aG91dCB0aGVpciBhcm1zIGFuZCB3ZWFyaW5nIHRoZWlyIHR1bmljcyBvbmx5LCBhbmQgd2l0aCBsb3VkIGNyaWVzIGFuZCBsYW1lbnRhdGlvbnMgcHV0IHRoZW1zZWx2ZXMgYXQgaGlzIG1lcmN5LCBiaWRkaW5nIGhpbSBkZWFsIHdpdGggdGhlbSBhcyBiYXNlIGFuZCB0aGFua2xlc3MgbWVuLiBCdXQgQWxleGFuZGVyIHdvdWxkIG5vdCBzZWUgdGhlbSwgYWx0aG91Z2ggaGlzIGhlYXJ0IHdhcyBzb2Z0ZW5pbmcuIEFuZCB0aGUgbWVuIHdvdWxkIG5vdCBkZXNpc3QsIGJ1dCBmb3IgdHdvIGRheXMgYW5kIG5pZ2h0cyBwZXJzaXN0ZWQgaW4gc3RhbmRpbmcgdGh1cyBiZWZvcmUgaGlzIGRvb3IsIHdlZXBpbmcgYW5kIGNhbGxpbmcgdXBvbiB0aGVpciBtYXN0ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['71.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIG9uIHRoZSB0aGlyZCBkYXkgaGUgY2FtZSBmb3J0aCwgYW5kIHdoZW4gaGUgc2F3IHRoZWlyIHBpdGVvdXMgYW5kIGh1bWJsZSBwbGlnaHQsIHdlcHQgZm9yIHNvbWUgdGltZTsgdGhlbiwgYWZ0ZXIgY2hpZGluZyB0aGVtIGdlbnRseSBhbmQgc3BlYWtpbmcga2luZGx5IHRvIHRoZW0sIGhlIGRpc21pc3NlZCB0aG9zZSB3aG8gd2VyZSBwYXN0IHNlcnZpY2Ugd2l0aCBtYWduaWZpY2VudCBnaWZ0cywgYW5kIHdyb3RlIHRvIEFudGlwYXRlciB0aGF0IGF0IGFsbCB0aGUgcHVibGljIGNvbnRlc3RzIGFuZCBpbiB0aGUgdGhlYXRyZXMgdGhleSBzaG91bGQgaGF2ZSB0aGUgZm9yZW1vc3Qgc2VhdHMgYW5kIHdlYXIgZ2FybGFuZHMuIEhlIGFsc28gb3JkYWluZWQgdGhhdCB0aGUgb3JwaGFuIGNoaWxkcmVuIG9mIHRob3NlIHdobyBoYWQgbG9zdCB0aGVpciBsaXZlcyBpbiBoaXMgc2VydmljZSBzaG91bGQgcmVjZWl2ZSB0aGVpciBmYXRoZXIncyBwYXkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjEyLjEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDEyPC9iaWJsPi48L25vdGU+CiAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuMTIuMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpaS4gMTI8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiAxMjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgY2FtZSB0byBFY2JhdGFuYSBpbiBNZWRpYSBhbmQgaGFkIHRyYW5zYWN0ZWQgdGhlIGJ1c2luZXNzIHRoYXQgd2FzIHVyZ2VudCwgaGUgd2FzIG9uY2UgbW9yZSBtdWNoIG9jY3VwaWVkIHdpdGggdGhlYXRyZXMgYW5kIGZlc3RpdmFscywgc2luY2UgdGhyZWUgdGhvdXNhbmQgYXJ0aXN0cyBoYWQgY29tZSB0byBoaW0gZnJvbSBHcmVlY2UuIEJ1dCBkdXJpbmcgdGhpcyB0aW1lIGl0IGNoYW5jZWQgdGhhdCBIZXBoYWVzdGlvbiBoYWQgYSBmZXZlcjsgYW5kIHNpbmNlLCB5b3VuZyBtYW4gYW5kIHNvbGRpZXIgdGhhdCBoZSB3YXMsIGhlIGNvdWxkIG5vdCBzdWJtaXQgdG8gYSBzdHJpY3QgcmVnaW1lbiwgYXMgc29vbiBhcyBHbGF1Y3VzLCBoaXMgcGh5c2ljaWFuLCBoYWQgZ29uZSBvZmYgdG8gdGhlIHRoZWF0cmUsIGhlIHNhdCBkb3duIHRvIGJyZWFrZmFzdCwgYXRlIGEgYm9pbGVkIGZvd2wsIGRyYW5rIGEgaHVnZSBjb29sZXIgb2Ygd2luZSwgZmVsbCBzaWNrLCBhbmQgaW4gYSBsaXR0bGUgd2hpbGUgZGllZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWxleGFuZGVyJ3MgZ3JpZWYgYXQgdGhpcyBsb3NzIGtuZXcgbm8gYm91bmRzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXJyaWFuIGZpbmRzIGdyZWF0IGRpdmVyc2l0eSBpbiB0aGUgYWNjb3VudHMgb2YgQWxleGFuZGVyJ3MgZGlzcGxheXMgb2YgZ3JpZWYgYXQgSGVwaGFlc3Rpb24ncyBkZWF0aCAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuMTQuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BbmFiLjwvdGl0bGU+IHZpaS4gMTQ8L2JpYmw+KS48L25vdGU+IEhlIGltbWVkaWF0ZWx5IG9yZGVyZWQgdGhhdCB0aGUgbWFuZXMgYW5kIHRhaWxzIG9mIGFsbCBob3JzZXMgYW5kIG11bGVzIHNob3VsZCBiZSBzaG9ybiBpbiB0b2tlbiBvZiBtb3VybmluZyBhbmQgdG9vayBhd2F5IHRoZSBiYXR0bGVtZW50cyBvZiB0aGUgY2l0aWVzIHJvdW5kIGFib3V0OyBoZSBhbHNvIGNydWNpZmllZCB0aGUgd3JldGNoZWQgcGh5c2ljaWFuLCBhbmQgcHV0IGEgc3RvcCB0byB0aGUgc291bmQgb2YgZmx1dGVzIGFuZCBldmVyeSBraW5kIG9mIG11c2ljIGluIHRoZSBjYW1wIGZvciBhIGxvbmcgdGltZSwgdW50aWwgYW4gb3JhY3VsYXIgcmVzcG9uc2UgZnJvbSBBbW1vbiBjYW1lIGJpZGRpbmcgaGltIGhvbm91ciBIZXBoYWVzdGlvbiBhcyBhIGhlcm8gYW5kIHNhY3JpZmljZSB0byBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBtYWtpbmcgd2FyIGEgc29sYWNlIGZvciBoaXMgZ3JpZWY7IGhlIHdlbnQgZm9ydGggdG8gaHVudCBhbmQgdHJhY2sgZG93biBtZW4sIGFzIGl0IHdlcmUsIGFuZCBvdmVyd2hlbG1lZCB0aGUgbmF0aW9uIG9mIHRoZSBDb3NzYWVhbnMsIHNsYXVnaHRlcmluZyB0aGVtIGFsbCBmcm9tIHRoZSB5b3V0aCB1cHdhcmRzLiBUaGlzIHdhcyBjYWxsZWQgYW4gb2ZmZXJpbmcgdG8gdGhlIHNoYWRlIG9mIEhlcGhhZXN0aW9uLiBVcG9uIGEgdG9tYiBhbmQgb2JzZXF1aWVzIGZvciBoaXMgZnJpZW5kLCBhbmQgdXBvbiB0aGVpciBlbWJlbGxpc2htZW50cywgaGUgcHVycG9zZWQgdG8gZXhwZW5kIHRlbiB0aG91c2FuZCB0YWxlbnRzLCBhbmQgd2lzaGVkIHRoYXQgdGhlIGluZ2VudWl0eSBhbmQgbm92ZWx0eSBvZiB0aGUgY29uc3RydWN0aW9uIHNob3VsZCBzdXJwYXNzIHRoZSBleHBlbnNlLiBIZSB0aGVyZWZvcmUgbG9uZ2VkIGZvciBTdGFzaWNyYXRlcyBhYm92ZSBhbGwgb3RoZXIgYXJ0aXN0cywgYmVjYXVzZSBpbiBoaXMgaW5ub3ZhdGlvbnMgdGhlcmUgd2FzIGFsd2F5cyBwcm9taXNlIG9mIGdyZWF0IG1hZ25pZmljZW5jZSwgYm9sZG5lc3MsIGFuZCBvc3RlbnRhdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBtYW4sIGluZGVlZCwgaGFkIHNhaWQgdG8gaGltIGF0IGEgZm9ybWVyIGludGVydmlldyB0aGF0IG9mIGFsbCBtb3VudGFpbnMgdGhlIFRocmFjaWFuIEF0aG9zIGNvdWxkIG1vc3QgcmVhZGlseSBiZSBnaXZlbiB0aGUgZm9ybSBhbmQgc2hhcGUgb2YgYSBtYW47IGlmOyB0aGVyZWZvcmUsIEFsZXhhbmRlciBzaG91bGQgc28gb3JkZXIsIGhlIHdvdWxkIG1ha2Ugb3V0IG9mIE1vdW50IEF0aG9zIGEgbW9zdCBlbmR1cmluZyBhbmQgbW9zdCBjb25zcGljdW91cyBzdGF0dWUgb2YgdGhlIGtpbmcsIHdoaWNoIGluIGl0cyBsZWZ0IGhhbmQgc2hvdWxkIGhvbGQgYSBjaXR5IG9mIHRlbiB0aG91c2FuZCBpbmhhYml0YW50cywgYW5kIHdpdGggaXRzIHJpZ2h0IHNob3VsZCBwb3VyIGZvcnRoIGEgcml2ZXIgcnVubmluZyB3aXRoIGdlbmVyb3VzIGN1cnJlbnQgaW50byB0aGUgc2VhLiBUaGlzIHByb2plY3QsIGl0IGlzIHRydWUsIEFsZXhhbmRlciBoYWQgZGVjbGluZWQ7IGJ1dCBub3cgaGUgd2FzIGJ1c3kgZGV2aXNpbmcgYW5kIGNvbnRyaXZpbmcgd2l0aCBoaXMgYXJ0aXN0cyBwcm9qZWN0cyBmYXIgbW9yZSBzdHJhbmdlIGFuZCBleHBlbnNpdmUgdGhhbiB0aGlzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['72.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBjYW1lIHRvIEVjYmF0YW5hIGluIE1lZGlhIGFuZCBoYWQgdHJhbnNhY3RlZCB0aGUgYnVzaW5lc3MgdGhhdCB3YXMgdXJnZW50LCBoZSB3YXMgb25jZSBtb3JlIG11Y2ggb2NjdXBpZWQgd2l0aCB0aGVhdHJlcyBhbmQgZmVzdGl2YWxzLCBzaW5jZSB0aHJlZSB0aG91c2FuZCBhcnRpc3RzIGhhZCBjb21lIHRvIGhpbSBmcm9tIEdyZWVjZS4gQnV0IGR1cmluZyB0aGlzIHRpbWUgaXQgY2hhbmNlZCB0aGF0IEhlcGhhZXN0aW9uIGhhZCBhIGZldmVyOyBhbmQgc2luY2UsIHlvdW5nIG1hbiBhbmQgc29sZGllciB0aGF0IGhlIHdhcywgaGUgY291bGQgbm90IHN1Ym1pdCB0byBhIHN0cmljdCByZWdpbWVuLCBhcyBzb29uIGFzIEdsYXVjdXMsIGhpcyBwaHlzaWNpYW4sIGhhZCBnb25lIG9mZiB0byB0aGUgdGhlYXRyZSwgaGUgc2F0IGRvd24gdG8gYnJlYWtmYXN0LCBhdGUgYSBib2lsZWQgZm93bCwgZHJhbmsgYSBodWdlIGNvb2xlciBvZiB3aW5lLCBmZWxsIHNpY2ssIGFuZCBpbiBhIGxpdHRsZSB3aGlsZSBkaWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['72.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsZXhhbmRlcidzIGdyaWVmIGF0IHRoaXMgbG9zcyBrbmV3IG5vIGJvdW5kcy4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXJyaWFuIGZpbmRzIGdyZWF0IGRpdmVyc2l0eSBpbiB0aGUgYWNjb3VudHMgb2YgQWxleGFuZGVyJ3MgZGlzcGxheXMgb2YgZ3JpZWYgYXQgSGVwaGFlc3Rpb24ncyBkZWF0aCAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy4xNC4xIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDE0PC9iaWJsPikuPC9ub3RlPiBIZSBpbW1lZGlhdGVseSBvcmRlcmVkIHRoYXQgdGhlIG1hbmVzIGFuZCB0YWlscyBvZiBhbGwgaG9yc2VzIGFuZCBtdWxlcyBzaG91bGQgYmUgc2hvcm4gaW4gdG9rZW4gb2YgbW91cm5pbmcgYW5kIHRvb2sgYXdheSB0aGUgYmF0dGxlbWVudHMgb2YgdGhlIGNpdGllcyByb3VuZCBhYm91dDsgaGUgYWxzbyBjcnVjaWZpZWQgdGhlIHdyZXRjaGVkIHBoeXNpY2lhbiwgYW5kIHB1dCBhIHN0b3AgdG8gdGhlIHNvdW5kIG9mIGZsdXRlcyBhbmQgZXZlcnkga2luZCBvZiBtdXNpYyBpbiB0aGUgY2FtcCBmb3IgYSBsb25nIHRpbWUsIHVudGlsIGFuIG9yYWN1bGFyIHJlc3BvbnNlIGZyb20gQW1tb24gY2FtZSBiaWRkaW5nIGhpbSBob25vdXIgSGVwaGFlc3Rpb24gYXMgYSBoZXJvIGFuZCBzYWNyaWZpY2UgdG8gaGltLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuMTQuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiAxNDwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiAxNDwvdHJhbnNsYXRpb24+"
translation['72.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBtYWtpbmcgd2FyIGEgc29sYWNlIGZvciBoaXMgZ3JpZWY7IGhlIHdlbnQgZm9ydGggdG8gaHVudCBhbmQgdHJhY2sgZG93biBtZW4sIGFzIGl0IHdlcmUsIGFuZCBvdmVyd2hlbG1lZCB0aGUgbmF0aW9uIG9mIHRoZSBDb3NzYWVhbnMsIHNsYXVnaHRlcmluZyB0aGVtIGFsbCBmcm9tIHRoZSB5b3V0aCB1cHdhcmRzLiBUaGlzIHdhcyBjYWxsZWQgYW4gb2ZmZXJpbmcgdG8gdGhlIHNoYWRlIG9mIEhlcGhhZXN0aW9uLiBVcG9uIGEgdG9tYiBhbmQgb2JzZXF1aWVzIGZvciBoaXMgZnJpZW5kLCBhbmQgdXBvbiB0aGVpciBlbWJlbGxpc2htZW50cywgaGUgcHVycG9zZWQgdG8gZXhwZW5kIHRlbiB0aG91c2FuZCB0YWxlbnRzLCBhbmQgd2lzaGVkIHRoYXQgdGhlIGluZ2VudWl0eSBhbmQgbm92ZWx0eSBvZiB0aGUgY29uc3RydWN0aW9uIHNob3VsZCBzdXJwYXNzIHRoZSBleHBlbnNlLiBIZSB0aGVyZWZvcmUgbG9uZ2VkIGZvciBTdGFzaWNyYXRlcyBhYm92ZSBhbGwgb3RoZXIgYXJ0aXN0cywgYmVjYXVzZSBpbiBoaXMgaW5ub3ZhdGlvbnMgdGhlcmUgd2FzIGFsd2F5cyBwcm9taXNlIG9mIGdyZWF0IG1hZ25pZmljZW5jZSwgYm9sZG5lc3MsIGFuZCBvc3RlbnRhdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['72.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuLCBpbmRlZWQsIGhhZCBzYWlkIHRvIGhpbSBhdCBhIGZvcm1lciBpbnRlcnZpZXcgdGhhdCBvZiBhbGwgbW91bnRhaW5zIHRoZSBUaHJhY2lhbiBBdGhvcyBjb3VsZCBtb3N0IHJlYWRpbHkgYmUgZ2l2ZW4gdGhlIGZvcm0gYW5kIHNoYXBlIG9mIGEgbWFuOyBpZjsgdGhlcmVmb3JlLCBBbGV4YW5kZXIgc2hvdWxkIHNvIG9yZGVyLCBoZSB3b3VsZCBtYWtlIG91dCBvZiBNb3VudCBBdGhvcyBhIG1vc3QgZW5kdXJpbmcgYW5kIG1vc3QgY29uc3BpY3VvdXMgc3RhdHVlIG9mIHRoZSBraW5nLCB3aGljaCBpbiBpdHMgbGVmdCBoYW5kIHNob3VsZCBob2xkIGEgY2l0eSBvZiB0ZW4gdGhvdXNhbmQgaW5oYWJpdGFudHMsIGFuZCB3aXRoIGl0cyByaWdodCBzaG91bGQgcG91ciBmb3J0aCBhIHJpdmVyIHJ1bm5pbmcgd2l0aCBnZW5lcm91cyBjdXJyZW50IGludG8gdGhlIHNlYS4gVGhpcyBwcm9qZWN0LCBpdCBpcyB0cnVlLCBBbGV4YW5kZXIgaGFkIGRlY2xpbmVkOyBidXQgbm93IGhlIHdhcyBidXN5IGRldmlzaW5nIGFuZCBjb250cml2aW5nIHdpdGggaGlzIGFydGlzdHMgcHJvamVjdHMgZmFyIG1vcmUgc3RyYW5nZSBhbmQgZXhwZW5zaXZlIHRoYW4gdGhpcy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBoZSB3YXMgb24gaGlzIHdheSB0byBlbnRlciBCYWJ5bG9uLCBOZWFyY2h1cyAod2hvIGhhZCBqb2luZWQgaGltIGFnYWluIGFmdGVyIHNhaWxpbmcgdGhyb3VnaCB0aGUgb2NlYW4gaW50byB0aGUgRXVwaHJhdGVzKSB0b2xkIHRoZSBraW5nIHRoYXQgY2VydGFpbiBDaGFsZGFlYW5zIGhhZCBtZXQgaGltIGFuZCBhZHZpc2VkIHRoYXQgQWxleGFuZGVyIHNob3VsZCBrZWVwIGF3YXkgZnJvbSBCYWJ5bG9uLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIEFycmlhbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuMTYuNSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BbmFiLjwvdGl0bGU+IHZpaS4gMTYsIDU8L2JpYmw+KSwgdGhlIENoYWxkYWVhbnMgYmVzb3VnaHQgQWxleGFuZGVyIGluIHBlcnNvbiB0byBzdXNwZW5kIGhpcyBtYXJjaCB0byBCYWJ5bG9uLiBJdCB3YXMgaW4gdGhlIHNwcmluZyBvZiAzMjMgQi5DLjwvbm90ZT4gQWxleGFuZGVyIHBhaWQgbm8gaGVlZCB0byB0aGlzLCBidXQgY29udGludWVkIG9uIGhpcyBtYXJjaDsgYW5kIHdoZW4gaGUgd2FzIGFycml2ZWQgYXQgdGhlIHdhbGxzLCBoZSBzYXcgbWFueSByYXZlbnMgZmx5aW5nIGFib3V0IGFuZCBjbGF3aW5nIG9uZSBhbm90aGVyLCBhbmQgc29tZSBvZiB0aGVtIGZlbGwgZGVhZCBhdCBoaXMgZmVldC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIGJlaW5nIGluZm9ybWVkIHRoYXQgQXBvbGxvZG9ydXMgdGhlIGNvbW1hbmRhbnQgb2YgQmFieWxvbiBoYWQgc2FjcmlmaWNlZCB0byBsZWFybiBBbGV4YW5kZXIncyBmYXRlLCBBbGV4YW5kZXIgY2FsbGVkIFB5dGhhZ29yYXMgdGhlIHNlZXIuIFB5dGhhZ29yYXMgZGlkIG5vdCBkZW55IHRoZSBmYWN0LCB3aGVyZXVwb24gQWxleGFuZGVyIGFza2VkIGhpbSB3aGF0IHdhcyB0aGUgY2hhcmFjdGVyIG9mIHRoZSBzYWNyaWZpY2UuIEFuZCB3aGVuIHRoZSBzZWVyIHRvbGQgdGhhdCB0aGUgdmljdGltJ3MgbGl2ZXIgaGFkIG5vIGxvYmUsIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFoIG1lITwvcT4gc2FpZCBBbGV4YW5kZXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YSBmb3JjaWJsZSBvbWVuITwvcT4gYW5kIGRpZCBQeXRoYWdvcmFzIG5vIGhhcm0uIEhlIHdhcyBzb3JyeSwgdG9vLCB0aGF0IGhlIGhhZCBub3Qgb2JleWVkIE5lYXJjaHVzLCBhbmQgcGFzc2VkIG1vc3Qgb2YgaGlzIHRpbWUgb3V0c2lkZSBvZiBCYWJ5bG9uLCBlaXRoZXIgbGl2aW5nIGluIGhpcyB0ZW50LCBvciBzYWlsaW5nIGFib3V0IG9uIHRoZSBFdXBocmF0ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSB3YXMgdHJvdWJsZWQgYnkgbWFueSBvbWVucy4gRm9yIGluc3RhbmNlLCB0aGUgbGFyZ2VzdCBhbmQgaGFuZHNvbWVzdCBsaW9uIGluIGhpcyBtZW5hZ2VyaWUgd2FzIGF0dGFja2VkIGJ5IGEgdGFtZSBhc3MgYW5kIGtpY2tlZCB0byBkZWF0aC4gQWdhaW4sIGhlIG9uY2UgdG9vayBvZmYgaGlzIGNsb3RoZXMgZm9yIGV4ZXJjaXNlIGFuZCB3YXMgcGxheWluZyBhdCBiYWxsLCBhbmQgd2hlbiBpdCB3YXMgdGltZSB0byBkcmVzcyBhZ2FpbiwgdGhlIHlvdW5nIG1lbiB3aG8gd2VyZSBwbGF5aW5nIHdpdGggaGltIGJlaGVsZCBhIG1hbiBzZWF0ZWQgb24gdGhlIGtpbmcncyB0aHJvbmUsIGluIHNpbGVuY2UsIHdlYXJpbmcgdGhlIHJveWFsIGRpYWRlbSBhbmQgcm9iZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG1hbiB3YXMgYXNrZWQgd2hvIGhlIHdhcywgaGUgd2FzIHNwZWVjaGxlc3MgZm9yIGEgbG9uZyB0aW1lOyBidXQgYXQgbGFzdCBoZSBjYW1lIHRvIGhpcyBzZW5zZXMgYW5kIHNhaWQgdGhhdCBoaXMgbmFtZSB3YXMgRGlvbnlzaXVzLCBhbmQgdGhhdCBoZSB3YXMgYSBuYXRpdmUgb2YgTWVzc2VuaWE7IGluIGNvbnNlcXVlbmNlIG9mIHNvbWUgY2hhcmdlIGJyb3VnaHQgYWdhaW5zdCBoaW0sIGhlIHNhaWQsIGhlIGhhZCBiZWVuIGJyb3VnaHQgdGhpdGhlciBmcm9tIHRoZSBzZWEtYm9hcmQsIGFuZCBmb3IgYSBsb25nIHRpbWUgaGFkIGJlZW4gaW4gY2hhaW5zOyBidXQganVzdCBub3cgdGhlIGdvZCBTZXJhcGlzIGhhZCBjb21lIHRvIGhpbSBhbmQgbG9vc2VkIGhpcyBjaGFpbnMgYW5kIGJyb3VnaHQgaGltIHRvIHRoaXMgc3BvdCwgYmlkZGluZyBoaW0gcHV0IG9uIHRoZSByb2JlIGFuZCBkaWFkZW0gYW5kIHNpdCBvbiB0aGUgdGhyb25lIGFuZCBob2xkIGhpcyBwZWFjZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk90aGVyIHByZWRpY3Rpb25zIG9mIEFsZXhhbmRlcidzIGRlYXRoIGFyZSBnaXZlbiBpbiBBcnJpYW4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjE4LjEiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QW5hYi48L3RpdGxlPiB2aWkuIDE4PC9iaWJsPiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuMjIuMSI+MjI8L2JpYmw+LCBhbmQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuMjQuMSI+MjQ8L2JpYmw+KS48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['73.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgaGUgd2FzIG9uIGhpcyB3YXkgdG8gZW50ZXIgQmFieWxvbiwgTmVhcmNodXMgKHdobyBoYWQgam9pbmVkIGhpbSBhZ2FpbiBhZnRlciBzYWlsaW5nIHRocm91Z2ggdGhlIG9jZWFuIGludG8gdGhlIEV1cGhyYXRlcykgdG9sZCB0aGUga2luZyB0aGF0IGNlcnRhaW4gQ2hhbGRhZWFucyBoYWQgbWV0IGhpbSBhbmQgYWR2aXNlZCB0aGF0IEFsZXhhbmRlciBzaG91bGQga2VlcCBhd2F5IGZyb20gQmFieWxvbi4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIEFycmlhbiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy4xNi41Ij4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDE2LCA1PC9iaWJsPiksIHRoZSBDaGFsZGFlYW5zIGJlc291Z2h0IEFsZXhhbmRlciBpbiBwZXJzb24gdG8gc3VzcGVuZCBoaXMgbWFyY2ggdG8gQmFieWxvbi4gSXQgd2FzIGluIHRoZSBzcHJpbmcgb2YgMzIzIEIuQy48L25vdGU+IEFsZXhhbmRlciBwYWlkIG5vIGhlZWQgdG8gdGhpcywgYnV0IGNvbnRpbnVlZCBvbiBoaXMgbWFyY2g7IGFuZCB3aGVuIGhlIHdhcyBhcnJpdmVkIGF0IHRoZSB3YWxscywgaGUgc2F3IG1hbnkgcmF2ZW5zIGZseWluZyBhYm91dCBhbmQgY2xhd2luZyBvbmUgYW5vdGhlciwgYW5kIHNvbWUgb2YgdGhlbSBmZWxsIGRlYWQgYXQgaGlzIGZlZXQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy4xNi41Ij4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDE2LCA1PC9iaWJsPiksIHRoZSBDaGFsZGFlYW5zIGJlc291Z2h0IEFsZXhhbmRlciBpbiBwZXJzb24gdG8gc3VzcGVuZCBoaXMgbWFyY2ggdG8gQmFieWxvbi4gSXQgd2FzIGluIHRoZSBzcHJpbmcgb2YgMzIzIEIuQy48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpaS4gMTYsIDU8L3RyYW5zbGF0aW9uPg=="
translation['73.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBiZWluZyBpbmZvcm1lZCB0aGF0IEFwb2xsb2RvcnVzIHRoZSBjb21tYW5kYW50IG9mIEJhYnlsb24gaGFkIHNhY3JpZmljZWQgdG8gbGVhcm4gQWxleGFuZGVyJ3MgZmF0ZSwgQWxleGFuZGVyIGNhbGxlZCBQeXRoYWdvcmFzIHRoZSBzZWVyLiBQeXRoYWdvcmFzIGRpZCBub3QgZGVueSB0aGUgZmFjdCwgd2hlcmV1cG9uIEFsZXhhbmRlciBhc2tlZCBoaW0gd2hhdCB3YXMgdGhlIGNoYXJhY3RlciBvZiB0aGUgc2FjcmlmaWNlLiBBbmQgd2hlbiB0aGUgc2VlciB0b2xkIHRoYXQgdGhlIHZpY3RpbSdzIGxpdmVyIGhhZCBubyBsb2JlLCA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFoIG1lITwvcT4gc2FpZCBBbGV4YW5kZXIsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hIGZvcmNpYmxlIG9tZW4hPC9xPiBhbmQgZGlkIFB5dGhhZ29yYXMgbm8gaGFybS4gSGUgd2FzIHNvcnJ5LCB0b28sIHRoYXQgaGUgaGFkIG5vdCBvYmV5ZWQgTmVhcmNodXMsIGFuZCBwYXNzZWQgbW9zdCBvZiBoaXMgdGltZSBvdXRzaWRlIG9mIEJhYnlsb24sIGVpdGhlciBsaXZpbmcgaW4gaGlzIHRlbnQsIG9yIHNhaWxpbmcgYWJvdXQgb24gdGhlIEV1cGhyYXRlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['73.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSB3YXMgdHJvdWJsZWQgYnkgbWFueSBvbWVucy4gRm9yIGluc3RhbmNlLCB0aGUgbGFyZ2VzdCBhbmQgaGFuZHNvbWVzdCBsaW9uIGluIGhpcyBtZW5hZ2VyaWUgd2FzIGF0dGFja2VkIGJ5IGEgdGFtZSBhc3MgYW5kIGtpY2tlZCB0byBkZWF0aC4gQWdhaW4sIGhlIG9uY2UgdG9vayBvZmYgaGlzIGNsb3RoZXMgZm9yIGV4ZXJjaXNlIGFuZCB3YXMgcGxheWluZyBhdCBiYWxsLCBhbmQgd2hlbiBpdCB3YXMgdGltZSB0byBkcmVzcyBhZ2FpbiwgdGhlIHlvdW5nIG1lbiB3aG8gd2VyZSBwbGF5aW5nIHdpdGggaGltIGJlaGVsZCBhIG1hbiBzZWF0ZWQgb24gdGhlIGtpbmcncyB0aHJvbmUsIGluIHNpbGVuY2UsIHdlYXJpbmcgdGhlIHJveWFsIGRpYWRlbSBhbmQgcm9iZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['73.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG1hbiB3YXMgYXNrZWQgd2hvIGhlIHdhcywgaGUgd2FzIHNwZWVjaGxlc3MgZm9yIGEgbG9uZyB0aW1lOyBidXQgYXQgbGFzdCBoZSBjYW1lIHRvIGhpcyBzZW5zZXMgYW5kIHNhaWQgdGhhdCBoaXMgbmFtZSB3YXMgRGlvbnlzaXVzLCBhbmQgdGhhdCBoZSB3YXMgYSBuYXRpdmUgb2YgTWVzc2VuaWE7IGluIGNvbnNlcXVlbmNlIG9mIHNvbWUgY2hhcmdlIGJyb3VnaHQgYWdhaW5zdCBoaW0sIGhlIHNhaWQsIGhlIGhhZCBiZWVuIGJyb3VnaHQgdGhpdGhlciBmcm9tIHRoZSBzZWEtYm9hcmQsIGFuZCBmb3IgYSBsb25nIHRpbWUgaGFkIGJlZW4gaW4gY2hhaW5zOyBidXQganVzdCBub3cgdGhlIGdvZCBTZXJhcGlzIGhhZCBjb21lIHRvIGhpbSBhbmQgbG9vc2VkIGhpcyBjaGFpbnMgYW5kIGJyb3VnaHQgaGltIHRvIHRoaXMgc3BvdCwgYmlkZGluZyBoaW0gcHV0IG9uIHRoZSByb2JlIGFuZCBkaWFkZW0gYW5kIHNpdCBvbiB0aGUgdGhyb25lIGFuZCBob2xkIGhpcyBwZWFjZS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T3RoZXIgcHJlZGljdGlvbnMgb2YgQWxleGFuZGVyJ3MgZGVhdGggYXJlIGdpdmVuIGluIEFycmlhbiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy4xOC4xIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDE4PC9iaWJsPiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy4yMi4xIj4yMjwvYmlibD4sIGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjI0LjEiPjI0PC9iaWJsPikuPC9ub3RlPgogICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjE4LjEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpaS4gMTg8L2JpYmw+LCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpaS4gMTg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjIyLjEiPjIyPC9iaWJsPiwgYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuMjQuMSI+MjQ8L2JpYmw+KS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbiBoZWFyaW5nIG9mIHRoaXMsIEFsZXhhbmRlciBwdXQgdGhlIG1hbiBvdXQgb2YgdGhlIHdheSwgYXMgdGhlIHNlZXJzIGRpcmVjdGVkOyBidXQgaGUgYmVnYW4gdG8gYmUgbG93LXNwaXJpdGVkLCBhbmQgd2FzIGRpc3RydXN0ZnVsIG5vdyBvZiB0aGUgZmF2b3VyIG9mIEhlYXZlbiBhbmQgc3VzcGljaW91cyBvZiBoaXMgZnJpZW5kcy4gSGUgd2FzIHBhcnRpY3VsYXJseSBhZnJhaWQgb2YgQW50aXBhdGVyIGFuZCBvZiBoaXMgc29ucywgb25lIG9mIHdob20sIElvbGFzLCB3YXMgaGlzIGNoaWVmIGN1cGJlYXJlcjsgdGhlIG90aGVyLCBDYXNzYW5kZXIsIGhhZCBvbmx5IHJlY2VudGx5IGNvbWUgdG8gQmFieWxvbiwgYW5kIHdoZW4gaGUgc2F3IHNvbWUgQmFyYmFyaWFucyBkb2luZyBvYmVpc2FuY2UgdG8gQWxleGFuZGVyLCBzaW5jZSBoZSBoYWQgYmVlbiByZWFyZWQgYXMgYSBHcmVlayBhbmQgaGFkIG5ldmVyIHNlZW4gc3VjaCBhIHNpZ2h0IGFzIHRoaXMgYmVmb3JlLCBoZSBsYXVnaGVkIGJvaXN0ZXJvdXNseS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFsZXhhbmRlciB3YXMgZW5yYWdlZCwgYW5kIGNsdXRjaGluZyBoaW0gZmllcmNlbHkgYnkgdGhlIGhhaXIgd2l0aCBib3RoIGhhbmRzIGRhc2hlZCBoaXMgaGVhZCBhZ2FpbnN0IHRoZSB3YWxsLiBBbmQgYXQgYW5vdGhlciB0aW1lLCB3aGVuIENhc3NhbmRlciB3b3VsZCBoYXZlIHNhaWQgc29tZXRoaW5nIGluIG9wcG9zaXRpb24gdG8gdGhvc2Ugd2hvIHdlcmUgYnJpbmdpbmcgY2hhcmdlcyBhZ2FpbnN0IEFudGlwYXRlciwgQWxleGFuZGVyIGludGVycnVwdGVkIGhpbSwgc2F5aW5nOiA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IG1lYW5lc3QgdGhvdT8gV291bGQgbWVuIGNvbWUgc28gbG9uZyBhIGpvdXJuZXkgaWYgdGhleSBoYWQgbm90IGJlZW4gd3JvbmdlZCBhbmQgd2VyZSBtYWtpbmcgZmFsc2UgY2hhcmdlcz88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gQ2Fzc2FuZGVyIGRlY2xhcmVkIHRoYXQgdGhpcyB2ZXJ5IGZhY3Qgb2YgdGhlaXIgY29taW5nIGEgbG9uZyBkaXN0YW5jZSBhd2F5IGZyb20gdGhlIHByb29mcyBzaG93ZWQgdGhhdCB0aGV5IHdlcmUgbWFraW5nIGZhbHNlIGNoYXJnZXMsIEFsZXhhbmRlciBidXJzdCBvdXQgbGF1Z2hpbmcgYW5kIHNhaWQ6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXNlIGFyZSB0aGUgZmFtb3VzIHNvcGhpc21zIG9mIEFyaXN0b3RsZSdzIGRpc2NpcGxlcyBmb3IgZWl0aGVyIHNpZGUgb2YgdGhlIHF1ZXN0aW9uOyBidXQgeWUgc2hhbGwgcnVlIHRoZSBkYXkgaWYgaXQgYXBwZWFyIHRoYXQgeWUgaGF2ZSBkb25lIHRoZXNlIG1lbiBldmVuIGEgc2xpZ2h0IHdyb25nLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW4gZ2VuZXJhbCwgYXMgd2UgYXJlIHRvbGQsIENhc3NhbmRlcidzIHNwaXJpdCB3YXMgZGVlcGx5IHBlbmV0cmF0ZWQgYW5kIGltYnVlZCB3aXRoIGEgZHJlYWRmdWwgZmVhciBvZiBBbGV4YW5kZXIsIHNvIHRoYXQgbWFueSB5ZWFycyBhZnRlcndhcmRzLCB3aGVuIGhlIHdhcyBub3cga2luZyBvZiBNYWNlZG9uaWEgYW5kIG1hc3RlciBvZiBHcmVlY2UsIGFzIGhlIHdhcyB3YWxraW5nIGFib3V0IGFuZCBzdXJ2ZXlpbmcgdGhlIHN0YXR1ZXMgYXQgRGVscGhpLCB0aGUgc2lnaHQgb2YgYW4gaW1hZ2Ugb2YgQWxleGFuZGVyIHNtb3RlIGhpbSBzdWRkZW5seSB3aXRoIGEgc2h1ZGRlcmluZyBhbmQgdHJlbWJsaW5nIGZyb20gd2hpY2ggaGUgY291bGQgc2NhcmNlbHkgcmVjb3ZlciwgYW5kIG1hZGUgaGlzIGhlYWQgc3dpbS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['74.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gaGVhcmluZyBvZiB0aGlzLCBBbGV4YW5kZXIgcHV0IHRoZSBtYW4gb3V0IG9mIHRoZSB3YXksIGFzIHRoZSBzZWVycyBkaXJlY3RlZDsgYnV0IGhlIGJlZ2FuIHRvIGJlIGxvdy1zcGlyaXRlZCwgYW5kIHdhcyBkaXN0cnVzdGZ1bCBub3cgb2YgdGhlIGZhdm91ciBvZiBIZWF2ZW4gYW5kIHN1c3BpY2lvdXMgb2YgaGlzIGZyaWVuZHMuIEhlIHdhcyBwYXJ0aWN1bGFybHkgYWZyYWlkIG9mIEFudGlwYXRlciBhbmQgb2YgaGlzIHNvbnMsIG9uZSBvZiB3aG9tLCBJb2xhcywgd2FzIGhpcyBjaGllZiBjdXBiZWFyZXI7IHRoZSBvdGhlciwgQ2Fzc2FuZGVyLCBoYWQgb25seSByZWNlbnRseSBjb21lIHRvIEJhYnlsb24sIGFuZCB3aGVuIGhlIHNhdyBzb21lIEJhcmJhcmlhbnMgZG9pbmcgb2JlaXNhbmNlIHRvIEFsZXhhbmRlciwgc2luY2UgaGUgaGFkIGJlZW4gcmVhcmVkIGFzIGEgR3JlZWsgYW5kIGhhZCBuZXZlciBzZWVuIHN1Y2ggYSBzaWdodCBhcyB0aGlzIGJlZm9yZSwgaGUgbGF1Z2hlZCBib2lzdGVyb3VzbHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['74.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBbGV4YW5kZXIgd2FzIGVucmFnZWQsIGFuZCBjbHV0Y2hpbmcgaGltIGZpZXJjZWx5IGJ5IHRoZSBoYWlyIHdpdGggYm90aCBoYW5kcyBkYXNoZWQgaGlzIGhlYWQgYWdhaW5zdCB0aGUgd2FsbC4gQW5kIGF0IGFub3RoZXIgdGltZSwgd2hlbiBDYXNzYW5kZXIgd291bGQgaGF2ZSBzYWlkIHNvbWV0aGluZyBpbiBvcHBvc2l0aW9uIHRvIHRob3NlIHdobyB3ZXJlIGJyaW5naW5nIGNoYXJnZXMgYWdhaW5zdCBBbnRpcGF0ZXIsIEFsZXhhbmRlciBpbnRlcnJ1cHRlZCBoaW0sIHNheWluZzogPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IG1lYW5lc3QgdGhvdT8gV291bGQgbWVuIGNvbWUgc28gbG9uZyBhIGpvdXJuZXkgaWYgdGhleSBoYWQgbm90IGJlZW4gd3JvbmdlZCBhbmQgd2VyZSBtYWtpbmcgZmFsc2UgY2hhcmdlcz88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['74.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIENhc3NhbmRlciBkZWNsYXJlZCB0aGF0IHRoaXMgdmVyeSBmYWN0IG9mIHRoZWlyIGNvbWluZyBhIGxvbmcgZGlzdGFuY2UgYXdheSBmcm9tIHRoZSBwcm9vZnMgc2hvd2VkIHRoYXQgdGhleSB3ZXJlIG1ha2luZyBmYWxzZSBjaGFyZ2VzLCBBbGV4YW5kZXIgYnVyc3Qgb3V0IGxhdWdoaW5nIGFuZCBzYWlkOiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXNlIGFyZSB0aGUgZmFtb3VzIHNvcGhpc21zIG9mIEFyaXN0b3RsZSdzIGRpc2NpcGxlcyBmb3IgZWl0aGVyIHNpZGUgb2YgdGhlIHF1ZXN0aW9uOyBidXQgeWUgc2hhbGwgcnVlIHRoZSBkYXkgaWYgaXQgYXBwZWFyIHRoYXQgeWUgaGF2ZSBkb25lIHRoZXNlIG1lbiBldmVuIGEgc2xpZ2h0IHdyb25nLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['74.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiBnZW5lcmFsLCBhcyB3ZSBhcmUgdG9sZCwgQ2Fzc2FuZGVyJ3Mgc3Bpcml0IHdhcyBkZWVwbHkgcGVuZXRyYXRlZCBhbmQgaW1idWVkIHdpdGggYSBkcmVhZGZ1bCBmZWFyIG9mIEFsZXhhbmRlciwgc28gdGhhdCBtYW55IHllYXJzIGFmdGVyd2FyZHMsIHdoZW4gaGUgd2FzIG5vdyBraW5nIG9mIE1hY2Vkb25pYSBhbmQgbWFzdGVyIG9mIEdyZWVjZSwgYXMgaGUgd2FzIHdhbGtpbmcgYWJvdXQgYW5kIHN1cnZleWluZyB0aGUgc3RhdHVlcyBhdCBEZWxwaGksIHRoZSBzaWdodCBvZiBhbiBpbWFnZSBvZiBBbGV4YW5kZXIgc21vdGUgaGltIHN1ZGRlbmx5IHdpdGggYSBzaHVkZGVyaW5nIGFuZCB0cmVtYmxpbmcgZnJvbSB3aGljaCBoZSBjb3VsZCBzY2FyY2VseSByZWNvdmVyLCBhbmQgbWFkZSBoaXMgaGVhZCBzd2ltLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFsZXhhbmRlciwgdGhlbiwgc2luY2UgaGUgaGFkIG5vdyBiZWNvbWUgc2Vuc2l0aXZlIHRvIGluZGljYXRpb25zIG9mIHRoZSBkaXZpbmUgd2lsbCBhbmQgcGVydHVyYmVkIGFuZCBhcHByZWhlbnNpdmUgaW4gaGlzIG1pbmQsIGNvbnZlcnRlZCBldmVyeSB1bnVzdWFsIGFuZCBzdHJhbmdlIG9jY3VycmVuY2UsIHdlcmUgaXQgbmV2ZXIgc28gaW5zaWduaWZpY2FudCBpbnRvIGEgcHJvZGlneSBhbmQgcG9ydGVudDsgYW5kIHNhY3JpZmljZXJzLCBwdXJpZmllcnMsIGFuZCBkaXZpbmVycyBmaWxsZWQgaGlzIHBhbGFjZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHlvdSBzZWUsIHdoaWxlIGl0IGlzIGEgZGlyZSB0aGluZyB0byBiZSBpbmNyZWR1bG91cyB0b3dhcmRzIGluZGljYXRpb25zIG9mIHRoZSBkaXZpbmUgd2lsbCBhbmQgdG8gaGF2ZSBjb250ZW1wdCBmb3IgdGhlbSwgc3VwZXJzdGl0aW9uIGlzIGxpa2V3aXNlIGEgZGlyZSB0aGluZywgd2hpY2gsIGFmdGVyIHRoZSBtYW5uZXIgb2Ygd2F0ZXIgZXZlciBzZWVraW5nIHRoZSBsb3dlciBsZXZlbHMsIGZpbGxlZCB3aXRoIGZvbGx5IHRoZSBBbGV4YW5kZXIgd2hvIHdhcyBub3cgYmVjb21lIGEgcHJleSB0byBoaXMgZmVhcnMuIE5vdHdpdGhzdGFuZGluZywgaW4gY29uc2VxdWVuY2Ugb2Ygb3JhY3VsYXIgcmVzcG9uc2VzIHJlZ2FyZGluZyBIZXBoYWVzdGlvbiB3aGljaCB3ZXJlIGJyb3VnaHQgaGltLCBoZSBsYWlkIGFzaWRlIGhpcyBncmllZiBhbmQgYmV0b29rIGhpbXNlbGYgb25jZSBtb3JlIHRvIHNhY3JpZmljZXMgYW5kIGRyaW5raW5nLWJvdXRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBnYXZlIGEgc3BsZW5kaWQgZW50ZXJ0YWlubWVudCB0byBOZWFyY2h1cywgYW5kIHRoZW4sIGFsdGhvdWdoIGhlIGhhZCB0YWtlbiBoaXMgY3VzdG9tYXJ5IGJhdGggYmVmb3JlIGdvaW5nIHRvIGJlZCwgYXQgdGhlIHJlcXVlc3Qgb2YgTWVkaXVzIGhlIHdlbnQgdG8gaG9sZCBoaWdoIHJldmVsIHdpdGggaGltOwoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjI1LjEiPkFycmlhbiwgPHRpdGxlPkFuYWIuPC90aXRsZT4gdmlpLiAyNTwvYmlibD4uPC9ub3RlPiBhbmQgaGVyZSwgYWZ0ZXIgZHJpbmtpbmcgYWxsIHRoZSBuZXh0IGRheSwgaGUgYmVnYW4gdG8gaGF2ZSBhIGZldmVyLiBUaGlzIGRpZCBub3QgY29tZSB1cG9uIGhpbSBhZnRlciBoZSBoYWQgcXVhZmZlZCBhIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJvd2wgb2YgSGVyYWNsZXMsPC9xPiBub3IgYWZ0ZXIgaGUgaGFkIGJlZW4gc2VpemVkIHdpdGggYSBzdWRkZW4gcGFpbiBpbiB0aGUgYmFjayBhcyB0aG91Z2ggc21pdHRlbiB3aXRoIGEgc3BlYXI7IHRoZXNlIHBhcnRpY3VsYXJzIGNlcnRhaW4gd3JpdGVycyBmZWx0IG9ibGlnZWQgdG8gZ2l2ZSwgYW5kIHNvLCBhcyBpdCB3ZXJlLCBpbnZlbnRlZCBpbiB0cmFnaWMgZmFzaGlvbiBhIG1vdmluZyBmaW5hbGUgZm9yIGEgZ3JlYXQgYWN0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQXJpc3RvYnVsdXMgc2F5cyB0aGF0IGhlIGhhZCBhIHJhZ2luZyBmZXZlciwgYW5kIHRoYXQgd2hlbiBoZSBnb3QgdmVyeSB0aGlyc3R5IGhlIGRyYW5rIHdpbmUsIHdoZXJldXBvbiBoZSBiZWNhbWUgZGVsaXJpb3VzLCBhbmQgZGllZCBvbiB0aGUgdGhpcnRpZXRoIGRheSBvZiB0aGUgbW9udGggRGFlc2l1cy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['75.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWxleGFuZGVyLCB0aGVuLCBzaW5jZSBoZSBoYWQgbm93IGJlY29tZSBzZW5zaXRpdmUgdG8gaW5kaWNhdGlvbnMgb2YgdGhlIGRpdmluZSB3aWxsIGFuZCBwZXJ0dXJiZWQgYW5kIGFwcHJlaGVuc2l2ZSBpbiBoaXMgbWluZCwgY29udmVydGVkIGV2ZXJ5IHVudXN1YWwgYW5kIHN0cmFuZ2Ugb2NjdXJyZW5jZSwgd2VyZSBpdCBuZXZlciBzbyBpbnNpZ25pZmljYW50IGludG8gYSBwcm9kaWd5IGFuZCBwb3J0ZW50OyBhbmQgc2FjcmlmaWNlcnMsIHB1cmlmaWVycywgYW5kIGRpdmluZXJzIGZpbGxlZCBoaXMgcGFsYWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['75.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvLCB5b3Ugc2VlLCB3aGlsZSBpdCBpcyBhIGRpcmUgdGhpbmcgdG8gYmUgaW5jcmVkdWxvdXMgdG93YXJkcyBpbmRpY2F0aW9ucyBvZiB0aGUgZGl2aW5lIHdpbGwgYW5kIHRvIGhhdmUgY29udGVtcHQgZm9yIHRoZW0sIHN1cGVyc3RpdGlvbiBpcyBsaWtld2lzZSBhIGRpcmUgdGhpbmcsIHdoaWNoLCBhZnRlciB0aGUgbWFubmVyIG9mIHdhdGVyIGV2ZXIgc2Vla2luZyB0aGUgbG93ZXIgbGV2ZWxzLCBmaWxsZWQgd2l0aCBmb2xseSB0aGUgQWxleGFuZGVyIHdobyB3YXMgbm93IGJlY29tZSBhIHByZXkgdG8gaGlzIGZlYXJzLiBOb3R3aXRoc3RhbmRpbmcsIGluIGNvbnNlcXVlbmNlIG9mIG9yYWN1bGFyIHJlc3BvbnNlcyByZWdhcmRpbmcgSGVwaGFlc3Rpb24gd2hpY2ggd2VyZSBicm91Z2h0IGhpbSwgaGUgbGFpZCBhc2lkZSBoaXMgZ3JpZWYgYW5kIGJldG9vayBoaW1zZWxmIG9uY2UgbW9yZSB0byBzYWNyaWZpY2VzIGFuZCBkcmlua2luZy1ib3V0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['75.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGdhdmUgYSBzcGxlbmRpZCBlbnRlcnRhaW5tZW50IHRvIE5lYXJjaHVzLCBhbmQgdGhlbiwgYWx0aG91Z2ggaGUgaGFkIHRha2VuIGhpcyBjdXN0b21hcnkgYmF0aCBiZWZvcmUgZ29pbmcgdG8gYmVkLCBhdCB0aGUgcmVxdWVzdCBvZiBNZWRpdXMgaGUgd2VudCB0byBob2xkIGhpZ2ggcmV2ZWwgd2l0aCBoaW07CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA3LjI1LjEiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDI1PC9iaWJsPi48L25vdGU+IGFuZCBoZXJlLCBhZnRlciBkcmlua2luZyBhbGwgdGhlIG5leHQgZGF5LCBoZSBiZWdhbiB0byBoYXZlIGEgZmV2ZXIuIFRoaXMgZGlkIG5vdCBjb21lIHVwb24gaGltIGFmdGVyIGhlIGhhZCBxdWFmZmVkIGEgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy4yNS4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiAyNTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDI1PHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ib3dsIG9mIEhlcmFjbGVzLDwvcT4gbm9yIGFmdGVyIGhlIGhhZCBiZWVuIHNlaXplZCB3aXRoIGEgc3VkZGVuIHBhaW4gaW4gdGhlIGJhY2sgYXMgdGhvdWdoIHNtaXR0ZW4gd2l0aCBhIHNwZWFyOyB0aGVzZSBwYXJ0aWN1bGFycyBjZXJ0YWluIHdyaXRlcnMgZmVsdCBvYmxpZ2VkIHRvIGdpdmUsIGFuZCBzbywgYXMgaXQgd2VyZSwgaW52ZW50ZWQgaW4gdHJhZ2ljIGZhc2hpb24gYSBtb3ZpbmcgZmluYWxlIGZvciBhIGdyZWF0IGFjdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['75.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBcmlzdG9idWx1cyBzYXlzIHRoYXQgaGUgaGFkIGEgcmFnaW5nIGZldmVyLCBhbmQgdGhhdCB3aGVuIGhlIGdvdCB2ZXJ5IHRoaXJzdHkgaGUgZHJhbmsgd2luZSwgd2hlcmV1cG9uIGhlIGJlY2FtZSBkZWxpcmlvdXMsIGFuZCBkaWVkIG9uIHRoZSB0aGlydGlldGggZGF5IG9mIHRoZSBtb250aCBEYWVzaXVzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBpbiB0aGUgY291cnQgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Sm91cm5hbHM8L3E+IHRoZXJlIGFyZSByZWNvcmRlZCB0aGUgZm9sbG93aW5nIHBhcnRpY3VsYXJzIHJlZ2FyZGluZyBoaXMgc2lja25lc3MuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGV5IGFyZSBnaXZlbiBhbHNvIGJ5IEFycmlhbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuMjUuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BbmFiLjwvdGl0bGU+IHZpaS4gMjU8L2JpYmw+KS48L25vdGU+IE9uIHRoZSBlaWdodGVlbnRoIG9mIHRoZSBtb250aCBEYWVzaXVzCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5KdW5lIDIsIDMyMyBCLkMuPC9ub3RlPiBoZSBzbGVwdCBpbiB0aGUgYmF0aGluZy1yb29tIGJlY2F1c2UgaGUgaGFkIGEgZmV2ZXIuIE9uIHRoZSBmb2xsb3dpbmcgZGF5LCBhZnRlciBoaXMgYmF0aCwgaGUgcmVtb3ZlZCBpbnRvIGhpcyBiZWQtY2hhbWJlciwgYW5kIHNwZW50IHRoZSBkYXkgYXQgZGljZSB3aXRoIE1lZGl1cy4gVGhlbiwgd2hlbiBpdCB3YXMgbGF0ZSwgaGUgdG9vayBhIGJhdGgsIHBlcmZvcm1lZCBoaXMgc2FjcmlmaWNlcyB0byB0aGUgZ29kcywgYXRlIGEgbGl0dGxlLCBhbmQgaGFkIGEgZmV2ZXIgdGhyb3VnaCB0aGUgbmlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSB0d2VudGlldGgsIGFmdGVyIGJhdGhpbmcgYWdhaW4sIGhlIHBlcmZvcm1lZCBoaXMgY3VzdG9tYXJ5IHNhY3JpZmljZTsgYW5kIGx5aW5nIGluIHRoZSBiYXRoaW5nLXJvb20gaGUgZGV2b3RlZCBoaW1zZWxmIHRvIE5lYXJjaHVzLCBsaXN0ZW5pbmcgdG8gaGlzIHN0b3J5IG9mIGhpcyB2b3lhZ2UgYW5kIG9mIHRoZSBncmVhdCBzZWEuIFRoZSB0d2VudHktZmlyc3QgaGUgc3BlbnQgaW4gdGhlIHNhbWUgd2F5IGFuZCB3YXMgc3RpbGwgbW9yZSBpbmZsYW1lZCwgYW5kIGR1cmluZyB0aGUgbmlnaHQgaGUgd2FzIGluIGEgZ3JpZXZvdXMgcGxpZ2h0LCBhbmQgYWxsIHRoZSBmb2xsb3dpbmcgZGF5IGhpcyBmZXZlciB3YXMgdmVyeSBoaWdoLiBTbyBoZSBoYWQgaGlzIGJlZCByZW1vdmVkIGFuZCBsYXkgYnkgdGhlIHNpZGUgb2YgdGhlIGdyZWF0IGJhdGgsIHdoZXJlIGhlIGNvbnZlcnNlZCB3aXRoIGhpcyBvZmZpY2VycyBhYm91dCB0aGUgdmFjYW50IHBvc3RzIGluIHRoZSBhcm15LCBhbmQgaG93IHRoZXkgbWlnaHQgYmUgZmlsbGVkIHdpdGggZXhwZXJpZW5jZWQgbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgdHdlbnR5LWZvdXJ0aCBoaXMgZmV2ZXIgd2FzIHZpb2xlbnQgYW5kIGhlIGhhZCB0byBiZSBjYXJyaWVkIGZvcnRoIHRvIHBlcmZvcm0gaGlzIHNhY3JpZmljZXM7IG1vcmVvdmVyLCBoZSBvcmRlcmVkIGhpcyBwcmluY2lwYWwgb2ZmaWNlcnMgdG8gdGFycnkgaW4gdGhlIGNvdXJ0IG9mIHRoZSBwYWxhY2UsIGFuZCB0aGUgY29tbWFuZGVycyBvZiBkaXZpc2lvbnMgYW5kIGNvbXBhbmllcyB0byBzcGVuZCB0aGUgbmlnaHQgb3V0c2lkZS4gSGUgd2FzIGNhcnJpZWQgdG8gdGhlIHBhbGFjZSBvbiB0aGUgb3RoZXIgc2lkZSBvZiB0aGUgcml2ZXIgb24gdGhlIHR3ZW50eS1maWZ0aCwgYW5kIGdvdCBhIGxpdHRsZSBzbGVlcCwgYnV0IGhpcyBmZXZlciBkaWQgbm90IGFiYXRlLiBBbmQgd2hlbiBoaXMgY29tbWFuZGVycyBjYW1lIHRvIGhpcyBiZWRzaWRlLCBoZSB3YXMgc3BlZWNobGVzcywgYXMgaGUgd2FzIGFsc28gb24gdGhlIHR3ZW50eS1zaXh0aDsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+dGhlcmVmb3JlIHRoZSBNYWNlZG9uaWFucyBtYWRlIHVwIHRoZWlyIG1pbmRzIHRoYXQgaGUgd2FzIGRlYWQsIGFuZCBjYW1lIHdpdGggbG91ZCBzaG91dHMgdG8gdGhlIGRvb3JzIG9mIHRoZSBwYWxhY2UsIGFuZCB0aHJlYXRlbmVkIGhpcyBjb21wYW5pb25zIHVudGlsIGFsbCBvcHBvc2l0aW9uIHdhcyBicm9rZW4gZG93bjsgYW5kIHdoZW4gdGhlIGRvb3JzIGhhZCBiZWVuIHRocm93biBvcGVuIHRvIHRoZW0sIHdpdGhvdXQgY2xvYWsgb3IgYXJtb3VyLCBvbmUgYnkgb25lLCB0aGV5IGFsbCBmaWxlZCBzbG93bHkgcGFzdCBoaXMgY291Y2guIER1cmluZyB0aGlzIGRheSwgdG9vLCBQeXRob24gYW5kIFNlbGV1Y3VzIHdlcmUgc2VudCB0byB0aGUgdGVtcGxlIG9mIFNlcmFwaXMgdG8gZW5xdWlyZSB3aGV0aGVyIHRoZXkgc2hvdWxkIGJyaW5nIEFsZXhhbmRlciB0aGl0aGVyOyBhbmQgdGhlIGdvZCBnYXZlIGFuc3dlciB0aGF0IHRoZXkgc2hvdWxkIGxlYXZlIGhpbSB3aGVyZSBoZSB3YXMuIEFuZCBvbiB0aGUgdHdlbnR5LWVpZ2h0aCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkp1bmUgMTMsIDMyMyBCLkMuPC9ub3RlPiB0b3dhcmRzIGV2ZW5pbmcsIGhlIGRpZWQuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['76.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGluIHRoZSBjb3VydCA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkpvdXJuYWxzPC9xPiB0aGVyZSBhcmUgcmVjb3JkZWQgdGhlIGZvbGxvd2luZyBwYXJ0aWN1bGFycyByZWdhcmRpbmcgaGlzIHNpY2tuZXNzLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGV5IGFyZSBnaXZlbiBhbHNvIGJ5IEFycmlhbiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy4yNS4xIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDI1PC9iaWJsPikuPC9ub3RlPiBPbiB0aGUgZWlnaHRlZW50aCBvZiB0aGUgbW9udGggRGFlc2l1cwoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy4yNS4xIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDI1PC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDI1PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5KdW5lIDIsIDMyMyBCLkMuPC9ub3RlPiBoZSBzbGVwdCBpbiB0aGUgYmF0aGluZy1yb29tIGJlY2F1c2UgaGUgaGFkIGEgZmV2ZXIuIE9uIHRoZSBmb2xsb3dpbmcgZGF5LCBhZnRlciBoaXMgYmF0aCwgaGUgcmVtb3ZlZCBpbnRvIGhpcyBiZWQtY2hhbWJlciwgYW5kIHNwZW50IHRoZSBkYXkgYXQgZGljZSB3aXRoIE1lZGl1cy4gVGhlbiwgd2hlbiBpdCB3YXMgbGF0ZSwgaGUgdG9vayBhIGJhdGgsIHBlcmZvcm1lZCBoaXMgc2FjcmlmaWNlcyB0byB0aGUgZ29kcywgYXRlIGEgbGl0dGxlLCBhbmQgaGFkIGEgZmV2ZXIgdGhyb3VnaCB0aGUgbmlnaHQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['76.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSB0d2VudGlldGgsIGFmdGVyIGJhdGhpbmcgYWdhaW4sIGhlIHBlcmZvcm1lZCBoaXMgY3VzdG9tYXJ5IHNhY3JpZmljZTsgYW5kIGx5aW5nIGluIHRoZSBiYXRoaW5nLXJvb20gaGUgZGV2b3RlZCBoaW1zZWxmIHRvIE5lYXJjaHVzLCBsaXN0ZW5pbmcgdG8gaGlzIHN0b3J5IG9mIGhpcyB2b3lhZ2UgYW5kIG9mIHRoZSBncmVhdCBzZWEuIFRoZSB0d2VudHktZmlyc3QgaGUgc3BlbnQgaW4gdGhlIHNhbWUgd2F5IGFuZCB3YXMgc3RpbGwgbW9yZSBpbmZsYW1lZCwgYW5kIGR1cmluZyB0aGUgbmlnaHQgaGUgd2FzIGluIGEgZ3JpZXZvdXMgcGxpZ2h0LCBhbmQgYWxsIHRoZSBmb2xsb3dpbmcgZGF5IGhpcyBmZXZlciB3YXMgdmVyeSBoaWdoLiBTbyBoZSBoYWQgaGlzIGJlZCByZW1vdmVkIGFuZCBsYXkgYnkgdGhlIHNpZGUgb2YgdGhlIGdyZWF0IGJhdGgsIHdoZXJlIGhlIGNvbnZlcnNlZCB3aXRoIGhpcyBvZmZpY2VycyBhYm91dCB0aGUgdmFjYW50IHBvc3RzIGluIHRoZSBhcm15LCBhbmQgaG93IHRoZXkgbWlnaHQgYmUgZmlsbGVkIHdpdGggZXhwZXJpZW5jZWQgbWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['76.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSB0d2VudHktZm91cnRoIGhpcyBmZXZlciB3YXMgdmlvbGVudCBhbmQgaGUgaGFkIHRvIGJlIGNhcnJpZWQgZm9ydGggdG8gcGVyZm9ybSBoaXMgc2FjcmlmaWNlczsgbW9yZW92ZXIsIGhlIG9yZGVyZWQgaGlzIHByaW5jaXBhbCBvZmZpY2VycyB0byB0YXJyeSBpbiB0aGUgY291cnQgb2YgdGhlIHBhbGFjZSwgYW5kIHRoZSBjb21tYW5kZXJzIG9mIGRpdmlzaW9ucyBhbmQgY29tcGFuaWVzIHRvIHNwZW5kIHRoZSBuaWdodCBvdXRzaWRlLiBIZSB3YXMgY2FycmllZCB0byB0aGUgcGFsYWNlIG9uIHRoZSBvdGhlciBzaWRlIG9mIHRoZSByaXZlciBvbiB0aGUgdHdlbnR5LWZpZnRoLCBhbmQgZ290IGEgbGl0dGxlIHNsZWVwLCBidXQgaGlzIGZldmVyIGRpZCBub3QgYWJhdGUuIEFuZCB3aGVuIGhpcyBjb21tYW5kZXJzIGNhbWUgdG8gaGlzIGJlZHNpZGUsIGhlIHdhcyBzcGVlY2hsZXNzLCBhcyBoZSB3YXMgYWxzbyBvbiB0aGUgdHdlbnR5LXNpeHRoOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['76.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnRoZXJlZm9yZSB0aGUgTWFjZWRvbmlhbnMgbWFkZSB1cCB0aGVpciBtaW5kcyB0aGF0IGhlIHdhcyBkZWFkLCBhbmQgY2FtZSB3aXRoIGxvdWQgc2hvdXRzIHRvIHRoZSBkb29ycyBvZiB0aGUgcGFsYWNlLCBhbmQgdGhyZWF0ZW5lZCBoaXMgY29tcGFuaW9ucyB1bnRpbCBhbGwgb3Bwb3NpdGlvbiB3YXMgYnJva2VuIGRvd247IGFuZCB3aGVuIHRoZSBkb29ycyBoYWQgYmVlbiB0aHJvd24gb3BlbiB0byB0aGVtLCB3aXRob3V0IGNsb2FrIG9yIGFybW91ciwgb25lIGJ5IG9uZSwgdGhleSBhbGwgZmlsZWQgc2xvd2x5IHBhc3QgaGlzIGNvdWNoLiBEdXJpbmcgdGhpcyBkYXksIHRvbywgUHl0aG9uIGFuZCBTZWxldWN1cyB3ZXJlIHNlbnQgdG8gdGhlIHRlbXBsZSBvZiBTZXJhcGlzIHRvIGVucXVpcmUgd2hldGhlciB0aGV5IHNob3VsZCBicmluZyBBbGV4YW5kZXIgdGhpdGhlcjsgYW5kIHRoZSBnb2QgZ2F2ZSBhbnN3ZXIgdGhhdCB0aGV5IHNob3VsZCBsZWF2ZSBoaW0gd2hlcmUgaGUgd2FzLiBBbmQgb24gdGhlIHR3ZW50eS1laWdodGgsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkp1bmUgMTMsIDMyMyBCLkMuPC9ub3RlPiB0b3dhcmRzIGV2ZW5pbmcsIGhlIGRpZWQuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijc3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9zdCBvZiB0aGlzIGFjY291bnQgaXMgd29yZCBmb3Igd29yZCBhcyB3cml0dGVuIGluIHRoZSA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Kb3VybmFscy48L3E+IEFuZCBhcyBmb3Igc3VzcGljaW9ucyBvZiBwb2lzb25pbmcsIG5vIG9uZSBoYWQgYW55IGltbWVkaWF0ZWx5LCBidXQgZml2ZSB5ZWFycyBhZnRlcndhcmRzLCBhcyB3ZSBhcmUgdG9sZCwgdXBvbiBpbmZvcm1hdGlvbiBnaXZlbiwgT2x5bXBpYXMgcHV0IG1hbnkgbWVuIHRvIGRlYXRoLCBhbmQgc2NhdHRlcmVkIGFicm9hZCB0aGUgYXNoZXMgb2YgSW9sYXMsIGFsbGVnaW5nIHRoYXQgaGUgaGFkIGFkbWluaXN0ZXJlZCB0aGUgcG9pc29uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhvc2Ugd2hvIGFmZmlybSB0aGF0IEFyaXN0b3RsZSBjb3Vuc2VsbGVkIEFudGlwYXRlciB0byBkbyB0aGUgZGVlZCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy4yOC4xIj5BcnJpYW4sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IHZpaS4gMjg8L2JpYmw+Ljwvbm90ZT4gYW5kIHRoYXQgaXQgd2FzIGVudGlyZWx5IHRocm91Z2ggaGlzIGFnZW5jeSB0aGF0IHRoZSBwb2lzb24gd2FzIHByb3ZpZGVkLCBtZW50aW9uIG9uZSBIYWdub3RoZW1pcyBhcyB0aGVpciBhdXRob3JpdHksIHdobyBwcm9mZXNzZWQgdG8gaGF2ZSBoZWFyZCB0aGUgc3RvcnkgZnJvbSBBbnRpZ29udXMgdGhlIGtpbmc7IGFuZCB0aGUgcG9pc29uIHdhcyB3YXRlciwgaWN5IGNvbGQsIGZyb20gYSBjZXJ0YWluIGNsaWZmIGluIE5vbmFjcmlzOyB0aGlzIHRoZXkgZ2F0aGVyZWQgdXAgbGlrZSBhIGRlbGljYXRlIGRldyBhbmQgc3RvcmVkIGl0IGluIGFuIGFzcydzIGhvb2Y7IGZvciBubyBvdGhlciB2ZXNzZWwgd291bGQgaG9sZCB0aGUgd2F0ZXIsIGJ1dCB3b3VsZCBhbGwgYmUgZWF0ZW4gdGhyb3VnaCBieSBpdCwgb3dpbmcgdG8gaXRzIGNvbGRuZXNzIGFuZCBwdW5nZW5jeS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9zdCB3cml0ZXJzLCBob3dldmVyLCB0aGluayB0aGF0IHRoZSBzdG9yeSBvZiB0aGUgcG9pc29uaW5nIGlzIGFsdG9nZXRoZXIgYSBmYWJyaWNhdGlvbjsgYW5kIGl0IGlzIG5vIHNsaWdodCBldmlkZW5jZSBpbiB0aGVpciBmYXZvdXIgdGhhdCBkdXJpbmcgdGhlIGRpc3NlbnNpb25zIG9mIEFsZXhhbmRlcidzIGNvbW1hbmRlcnMsIHdoaWNoIGxhc3RlZCBtYW55IGRheXMsIGhpcyBib2R5LCBhbHRob3VnaCBpdCBsYXkgd2l0aG91dCBzcGVjaWFsIGNhcmUgaW4gcGxhY2VzIHRoYXQgd2VyZSBtb2lzdCBhbmQgc3RpZmxpbmcsIHNob3dlZCBubyBzaWduIG9mIHN1Y2ggYSBkZXN0cnVjdGl2ZSBpbmZsdWVuY2UsIGJ1dCByZW1haW5lZCBwdXJlIGFuZCBmcmVzaC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['77.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9zdCBvZiB0aGlzIGFjY291bnQgaXMgd29yZCBmb3Igd29yZCBhcyB3cml0dGVuIGluIHRoZSA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkpvdXJuYWxzLjwvcT4gQW5kIGFzIGZvciBzdXNwaWNpb25zIG9mIHBvaXNvbmluZywgbm8gb25lIGhhZCBhbnkgaW1tZWRpYXRlbHksIGJ1dCBmaXZlIHllYXJzIGFmdGVyd2FyZHMsIGFzIHdlIGFyZSB0b2xkLCB1cG9uIGluZm9ybWF0aW9uIGdpdmVuLCBPbHltcGlhcyBwdXQgbWFueSBtZW4gdG8gZGVhdGgsIGFuZCBzY2F0dGVyZWQgYWJyb2FkIHRoZSBhc2hlcyBvZiBJb2xhcywgYWxsZWdpbmcgdGhhdCBoZSBoYWQgYWRtaW5pc3RlcmVkIHRoZSBwb2lzb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['77.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG9zZSB3aG8gYWZmaXJtIHRoYXQgQXJpc3RvdGxlIGNvdW5zZWxsZWQgQW50aXBhdGVyIHRvIGRvIHRoZSBkZWVkLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy4yOC4xIj5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiAyODwvYmlibD4uPC9ub3RlPiBhbmQgdGhhdCBpdCB3YXMgZW50aXJlbHkgdGhyb3VnaCBoaXMgYWdlbmN5IHRoYXQgdGhlIHBvaXNvbiB3YXMgcHJvdmlkZWQsIG1lbnRpb24gb25lIEhhZ25vdGhlbWlzIGFzIHRoZWlyIGF1dGhvcml0eSwgd2hvIHByb2Zlc3NlZCB0byBoYXZlIGhlYXJkIHRoZSBzdG9yeSBmcm9tIEFudGlnb251cyB0aGUga2luZzsgYW5kIHRoZSBwb2lzb24gd2FzIHdhdGVyLCBpY3kgY29sZCwgZnJvbSBhIGNlcnRhaW4gY2xpZmYgaW4gTm9uYWNyaXM7IHRoaXMgdGhleSBnYXRoZXJlZCB1cCBsaWtlIGEgZGVsaWNhdGUgZGV3IGFuZCBzdG9yZWQgaXQgaW4gYW4gYXNzJ3MgaG9vZjsgZm9yIG5vIG90aGVyIHZlc3NlbCB3b3VsZCBob2xkIHRoZSB3YXRlciwgYnV0IHdvdWxkIGFsbCBiZSBlYXRlbiB0aHJvdWdoIGJ5IGl0LCBvd2luZyB0byBpdHMgY29sZG5lc3MgYW5kIHB1bmdlbmN5LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuMjguMSI+QXJyaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IHZpaS4gMjg8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiAyODwvdHJhbnNsYXRpb24+"
translation['77.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgd3JpdGVycywgaG93ZXZlciwgdGhpbmsgdGhhdCB0aGUgc3Rvcnkgb2YgdGhlIHBvaXNvbmluZyBpcyBhbHRvZ2V0aGVyIGEgZmFicmljYXRpb247IGFuZCBpdCBpcyBubyBzbGlnaHQgZXZpZGVuY2UgaW4gdGhlaXIgZmF2b3VyIHRoYXQgZHVyaW5nIHRoZSBkaXNzZW5zaW9ucyBvZiBBbGV4YW5kZXIncyBjb21tYW5kZXJzLCB3aGljaCBsYXN0ZWQgbWFueSBkYXlzLCBoaXMgYm9keSwgYWx0aG91Z2ggaXQgbGF5IHdpdGhvdXQgc3BlY2lhbCBjYXJlIGluIHBsYWNlcyB0aGF0IHdlcmUgbW9pc3QgYW5kIHN0aWZsaW5nLCBzaG93ZWQgbm8gc2lnbiBvZiBzdWNoIGEgZGVzdHJ1Y3RpdmUgaW5mbHVlbmNlLCBidXQgcmVtYWluZWQgcHVyZSBhbmQgZnJlc2guPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBSb3hhbmEgd2FzIHdpdGggY2hpbGQsIGFuZCBvbiB0aGlzIGFjY291bnQgd2FzIGhlbGQgaW4gaG9ub3VyIGFtb25nIHRoZSBNYWNlZG9uaWFuczsgYnV0IHNoZSB3YXMgamVhbG91cyBvZiBTdGF0ZWlyYSwgYW5kIHRoZXJlZm9yZSBkZWNlaXZlZCBoZXIgYnkgYSBmb3JnZWQgbGV0dGVyIGludG8gY29taW5nIHdoZXJlIHNoZSB3YXMsIGFuZCB3aGVuIHNoZSBoYWQgZ290IGhlciB0aGVyZSwgc2xldyBoZXIsIHRvZ2V0aGVyIHdpdGggaGVyIHNpc3RlciwgdGhyZXcgdGhlaXIgYm9kaWVzIGludG8gdGhlIHdlbGwsIGFuZCBmaWxsZWQgdGhlIHdpdGggZWFydGgsIFBlcmRpY2NhcyBiZWluZyBwcml2eSB0byB0aGUgZGVlZCBhbmQgcGFydG5lciBpbiBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGl0IHdhcyBoZSB3aG8gd2FzIGF0IG9uY2UgaW4gdGhlIGdyZWF0ZXN0IGF1dGhvcml0eSwgZHJhZ2dpbmcgQXJyaGlkYWV1cyBhcm91bmQgYWZ0ZXIgaGltIHRvIHNhZmUtZ3VhcmQsIGFzIGl0IHdlcmUsIHRoZSByb3lhbCBwb3dlci4gQXJyaGlkYWV1cyB3YXMgUGhpbGlwJ3Mgc29uIGJ5IGFuIG9ic2N1cmUgYW5kIGNvbW1vbiB3b21hbiBuYW1lZCBQaGlsaW5uYSwgYW5kIHdhcyBkZWZpY2llbnQgaW4gaW50ZWxsZWN0IG93aW5nIHRvIGJvZGlseSBkaXNlYXNlLiBUaGlzLCBob3dldmVyLCBkaWQgbm90IGNvbWUgdXBvbiBoaW0gaW4gdGhlIGNvdXJzZSBvZiBuYXR1cmUgb3Igb2YgaXRzIG93biBhY2NvcmQsIGluZGVlZCwgaXQgaXMgc2FpZCB0aGF0IGFzIGEgYm95IGhlIGRpc3BsYXllZCBhbiBleGNlZWRpbmdseSBnaWZ0ZWQgYW5kIG5vYmxlIGRpc3Bvc2l0aW9uOiBidXQgYWZ0ZXJ3YXJkcyBPbHltcGlhcyBnYXZlIGhpbSBkcnVncyB3aGljaCBpbmp1cmVkIGhpcyBib2R5IGFuZCBydWluZWQgaGlzIG1pbmQuPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['77.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgUm94YW5hIHdhcyB3aXRoIGNoaWxkLCBhbmQgb24gdGhpcyBhY2NvdW50IHdhcyBoZWxkIGluIGhvbm91ciBhbW9uZyB0aGUgTWFjZWRvbmlhbnM7IGJ1dCBzaGUgd2FzIGplYWxvdXMgb2YgU3RhdGVpcmEsIGFuZCB0aGVyZWZvcmUgZGVjZWl2ZWQgaGVyIGJ5IGEgZm9yZ2VkIGxldHRlciBpbnRvIGNvbWluZyB3aGVyZSBzaGUgd2FzLCBhbmQgd2hlbiBzaGUgaGFkIGdvdCBoZXIgdGhlcmUsIHNsZXcgaGVyLCB0b2dldGhlciB3aXRoIGhlciBzaXN0ZXIsIHRocmV3IHRoZWlyIGJvZGllcyBpbnRvIHRoZSB3ZWxsLCBhbmQgZmlsbGVkIHRoZSB3aXRoIGVhcnRoLCBQZXJkaWNjYXMgYmVpbmcgcHJpdnkgdG8gdGhlIGRlZWQgYW5kIHBhcnRuZXIgaW4gaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
