var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = document.getElementsByClassName(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBmaXJzdCBtZW1iZXIgb2YgdGhlIGZhbWlseSB3aG8gd2FzIHN1cm5hbWVkIENpY2VybyBzZWVtcyB0byBoYXZlIGJlZW4gd29ydGh5IG9mIG5vdGUsIGFuZCBmb3IgdGhhdCByZWFzb24gaGlzIHBvc3Rlcml0eSBkaWQgbm90IHJlamVjdCB0aGUgc3VybmFtZSwgYnV0IHdlcmUgZm9uZCBvZiBpdCwgYWx0aG91Z2ggbWFueSBtYWRlIGl0IGEgbWF0dGVyIG9mIHJhaWxsZXJ5LiBGb3IgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNpY2VyPC9xPiBpcyB0aGUgTGF0aW4gbmFtZSBmb3IgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Y2hpY2stcGVhPC9nbG9zcz4sIGFuZCB0aGlzIGFuY2VzdG9yIG9mIENpY2VybywgYXMgaXQgd291bGQgc2VlbSwgaGFkIGEgZmFpbnQgZGVudCBpbiB0aGUgZW5kIG9mIGhpcyBub3NlIGxpa2UgdGhlIGNsZWZ0IG9mIGEgY2hpY2stcGVhLCBmcm9tIHdoaWNoIGhlIGFjcXVpcmVkIGhpcyBzdXJuYW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNpY2VybyBoaW1zZWxmLCBob3dldmVyLCB3aG9zZSBMaWZlIEkgbm93IHdyaXRlLCB3aGVuIGhlIGZpcnN0IGVudGVyZWQgcHVibGljIGxpZmUgYW5kIHN0b29kIGZvciBvZmZpY2UgYW5kIGhpcyBmcmllbmRzIHRob3VnaHQgaGUgb3VnaHQgdG8gZHJvcCBvciBjaGFuZ2UgdGhlIG5hbWUsIGlzIHNhaWQgdG8gaGF2ZSByZXBsaWVkIHdpdGggc3Bpcml0IHRoYXQgaGUgd291bGQgc3RyaXZlIHRvIG1ha2UgdGhlIG5hbWUgb2YgQ2ljZXJvIG1vcmUgaWxsdXN0cmlvdXMgdGhhbiBzdWNoIG5hbWVzIGFzIFNjYXVydXMgb3IgQ2F0dWx1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIGhlIHdhcyBxdWFlc3RvciBpbiBTaWNpbHkgYW5kIHdhcyBkZWRpY2F0aW5nIHRvIHRoZSBnb2RzIGEgcGllY2Ugb2Ygc2lsdmVyIHBsYXRlLCBoZSBoYWQgaGlzIGZpcnN0IHR3byBuYW1lcyBpbnNjcmliZWQgdGhlcmVvbiwgdGhlIE1hcmN1cyBhbmQgdGhlIFR1bGxpdXMsIGJ1dCBpbnN0ZWFkIG9mIHRoZSB0aGlyZCwgYnkgd2F5IG9mIGplc3QsIGhlIG9yZGVyZWQgdGhlIGFydGlmaWNlciB0byBlbmdyYXZlIGEgY2hpY2stcGVhIGluIGR1ZSBzZXF1ZW5jZS4gVGhpcywgdGhlbiwgaXMgd2hhdCBpcyB0b2xkIGFib3V0IGhpcyBuYW1lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdGhhdCBDaWNlcm8gd2FzIGJvcm4sIHdpdGhvdXQgdHJhdmFpbCBvciBwYWluIG9uIHRoZSBwYXJ0IG9mIGhpcyBtb3RoZXIsIG9uIHRoZSB0aGlyZCBkYXkgb2YgdGhlIG5ldyBDYWxlbmRzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkphbnVhcnkgMywgMTA2IEIuQy4gUGx1dGFyY2ggZm9sbG93cyB0aGUgR3JlZWsgbWV0aG9kIG9mIHJlY2tvbmluZyBmcm9tIGEgZml4ZWQgcG9pbnQgaW4gdGhlIG1vbnRoLiBDaWNlcm8gc2F5cyAoPGZvcmVpZ24gbGFuZz0ibGEiPmFudGUgZGllbTwvZm9yZWlnbj4pIElJSS4gPGZvcmVpZ24gbGFuZz0ibGEiPk5vbmFzIEphbnVhcmllYXM8L2ZvcmVpZ24+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDEzLjQyLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+YWQgQXR0LjwvdGl0bGU+IHhpaWkuIDQyLCAyPC9iaWJsPiksIHRoZSBOb25lcyBiZWluZyB0aGUgZmlmdGggb2YgSmFudWFyeS4gU3RyaWN0bHkgc3BlYWtpbmcsIG9ubHkgdGhlIGZpcnN0IGRheSBvZiB0aGUgbW9udGggd2FzIGNhbGxlZCB0aGUgQ2FsZW5kcywgYnV0IFBsdXRhcmNoIHNlZW1zIHRvIGNhbGwgdGhlIG9wZW5pbmcgZGF5cyBvZiB0aGUgbmV3IG9mZmljaWFsIHllYXIgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlIG5ldyBDYWxlbmRzLjwvcT4KICAgICAgICAgICAgPC9ub3RlPiB0aGUgZGF5IG9uIHdoaWNoIGF0IHRoZSBwcmVzZW50IHRpbWUgdGhlIG1hZ2lzdHJhdGVzIG9mZmVyIHNhY3JpZmljZXMgYW5kIHByYXllcnMgZm9yIHRoZSBoZWFsdGggb2YgdGhlIGVtcGVyb3IuIEl0IHdvdWxkIHNlZW0gYWxzbyB0aGF0IGEgcGhhbnRvbSBhcHBlYXJlZCB0byBoaXMgbnVyc2UgYW5kIGZvcmV0b2xkIHRoYXQgaGVyIGNoYXJnZSB3b3VsZCBiZSBhIGdyZWF0IGJsZXNzaW5nIHRvIGFsbCB0aGUgUm9tYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWx0aG91Z2ggdGhlc2UgcHJlc2FnZXMgd2VyZSB0aG91Z2h0IHRvIGJlIG1lcmUgZHJlYW1zIGFuZCBpZGxlIGZhbmNpZXMsIGhlIHNvb24gc2hvd2VkIHRoZW0gdG8gYmUgdHJ1ZSBwcm9waGVjeTsgZm9yIHdoZW4gaGUgd2FzIG9mIGFuIGFnZSBmb3IgdGFraW5nIGxlc3NvbnMsIGhpcyBuYXR1cmFsIHRhbGVudCBzaG9uZSBvdXQgY2xlYXIgYW5kIGhlIHdvbiBuYW1lIGFuZCBmYW1lIGFtb25nIHRoZSBib3lzLCBzbyB0aGF0IHRoZWlyIGZhdGhlcnMgdXNlZCB0byB2aXNpdCB0aGUgc2Nob29scyBpbiBvcmRlciB0byBzZWUgQ2ljZXJvIHdpdGggdGhlaXIgb3duIGV5ZXMgYW5kIG9ic2VydmUgdGhlIHF1aWNrbmVzcyBhbmQgaW50ZWxsaWdlbmNlIGluIGhpcyBzdHVkaWVzIGZvciB3aGljaCBoZSB3YXMgZXh0b2xsZWQsIHRob3VnaCB0aGUgcnVkZXIgb25lcyBhbW9uZyB0aGVtIHdlcmUgYW5ncnkgYXQgdGhlaXIgc29ucyB3aGVuIHRoZXkgc2F3IHRoZW0gd2Fsa2luZyB3aXRoIENpY2VybyBwbGFjZWQgaW4gdGhlaXIgbWlkc3QgYXMgYSBtYXJrIG9mIGhvbm91ci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFsdGhvdWdoIGhlIHNob3dlZCBoaW1zZWxmLCBhcyBQbGF0bzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUmVwLiA0NzViIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlJlcHVibGljPC90aXRsZT4sIHAuIDQ3NSBiLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aG91Z2h0IGEgbmF0dXJlIHNob3VsZCBkbyB3aGljaCB3YXMgZm9uZCBvZiBsZWFybmluZyBhbmQgZm9uZCBvZiB3aXNkb20sIGNhcGFibGUgb2Ygd2VsY29taW5nIGFsbCBrbm93bGVkZ2UgYW5kIGluY2FwYWJsZSBvZiBzbGlnaHRpbmcgYW55IGtpbmQgb2YgbGl0ZXJhdHVyZSBvciB0cmFpbmluZywgaGUgbGVudCBoaW1zZWxmIHdpdGggc29tZXdoYXQgZ3JlYXRlciBhcmRvdXIgdG8gdGhlIGFydCBvZiBwb2V0cnkuIEFuZCBhIGxpdHRsZSBwb2VtIHdoaWNoIGhlIHdyb3RlIHdoZW4gYSBib3kgaXMgc3RpbGwgZXh0YW50LCBjYWxsZWQgUG9udGl1cyBHbGF1Y3VzLCBhbmQgY29tcG9zZWQgaW4gdGV0cmFtZXRlciB2ZXJzZS4gTW9yZW92ZXIsIGFzIGhlIGdyZXcgb2xkZXIgYW5kIGFwcGxpZWQgaGltc2VsZiB3aXRoIGdyZWF0ZXIgdmVyc2F0aWxpdHkgdG8gc3VjaCBhY2NvbXBsaXNobWVudHMsIGhlIGdvdCB0aGUgbmFtZSBvZiBiZWluZyBub3Qgb25seSB0aGUgYmVzdCBvcmF0b3IsIGJ1dCBhbHNvIHRoZSBiZXN0IHBvZXQgYW1vbmcgdGhlIFJvbWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGZhbWUgZm9yIG9yYXRvcnkgYWJpZGVzIHRvIHRoaXMgZGF5LCBhbHRob3VnaCB0aGVyZSBoYXZlIGJlZW4gZ3JlYXQgaW5ub3ZhdGlvbnMgaW4gc3R5bGU7IGJ1dCBoaXMgcG9ldHJ5LCBzaW5jZSBtYW55IGdpZnRlZCBwb2V0cyBoYXZlIGZvbGxvd2VkIGhpbSwgaGFzIGFsdG9nZXRoZXIgZmFsbGVuIGludG8gbmVnbGVjdCBhbmQgZGlzcmVwdXRlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzYWlkIHRoYXQgQ2ljZXJvIHdhcyBib3JuLCB3aXRob3V0IHRyYXZhaWwgb3IgcGFpbiBvbiB0aGUgcGFydCBvZiBoaXMgbW90aGVyLCBvbiB0aGUgdGhpcmQgZGF5IG9mIHRoZSBuZXcgQ2FsZW5kcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkphbnVhcnkgMywgMTA2IEIuQy4gUGx1dGFyY2ggZm9sbG93cyB0aGUgR3JlZWsgbWV0aG9kIG9mIHJlY2tvbmluZyBmcm9tIGEgZml4ZWQgcG9pbnQgaW4gdGhlIG1vbnRoLiBDaWNlcm8gc2F5cyAoPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+YW50ZSBkaWVtPC9mb3JlaWduPikgSUlJLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5Ob25hcyBKYW51YXJpZWFzPC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDEzLjQyLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBBdHQuPC90aXRsZT4geGlpaS4gNDIsIDI8L2JpYmw+KSwgdGhlIE5vbmVzIGJlaW5nIHRoZSBmaWZ0aCBvZiBKYW51YXJ5LiBTdHJpY3RseSBzcGVha2luZywgb25seSB0aGUgZmlyc3QgZGF5IG9mIHRoZSBtb250aCB3YXMgY2FsbGVkIHRoZSBDYWxlbmRzLCBidXQgUGx1dGFyY2ggc2VlbXMgdG8gY2FsbCB0aGUgb3BlbmluZyBkYXlzIG9mIHRoZSBuZXcgb2ZmaWNpYWwgeWVhciAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSBuZXcgQ2FsZW5kcy48L3E+CiAgICAgICAgICAgIDwvbm90ZT4gdGhlIGRheSBvbiB3aGljaCBhdCB0aGUgcHJlc2VudCB0aW1lIHRoZSBtYWdpc3RyYXRlcyBvZmZlciBzYWNyaWZpY2VzIGFuZCBwcmF5ZXJzIGZvciB0aGUgaGVhbHRoIG9mIHRoZSBlbXBlcm9yLiBJdCB3b3VsZCBzZWVtIGFsc28gdGhhdCBhIHBoYW50b20gYXBwZWFyZWQgdG8gaGlzIG51cnNlIGFuZCBmb3JldG9sZCB0aGF0IGhlciBjaGFyZ2Ugd291bGQgYmUgYSBncmVhdCBibGVzc2luZyB0byBhbGwgdGhlIFJvbWFucy4gCgkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5hbnRlIGRpZW08L2ZvcmVpZ24+KSBJSUkuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPk5vbmFzIEphbnVhcmllYXM8L2ZvcmVpZ24+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEF0dC4gMTMuNDIuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIEF0dC48L3RpdGxlPiB4aWlpLiA0MiwgMjwvYmlibD4pLCB0aGUgTm9uZXMgYmVpbmcgdGhlIGZpZnRoIG9mIEphbnVhcnkuIFN0cmljdGx5IHNwZWFraW5nLCBvbmx5IHRoZSBmaXJzdCBkYXkgb2YgdGhlIG1vbnRoIHdhcyBjYWxsZWQgdGhlIENhbGVuZHMsIGJ1dCBQbHV0YXJjaCBzZWVtcyB0byBjYWxsIHRoZSBvcGVuaW5nIGRheXMgb2YgdGhlIG5ldyBvZmZpY2lhbCB5ZWFyIAoJCQkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIEF0dC48L3RpdGxlPiB4aWlpLiA0MiwgMjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlIG5ldyBDYWxlbmRzLjwvcT4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhbHRob3VnaCB0aGVzZSBwcmVzYWdlcyB3ZXJlIHRob3VnaHQgdG8gYmUgbWVyZSBkcmVhbXMgYW5kIGlkbGUgZmFuY2llcywgaGUgc29vbiBzaG93ZWQgdGhlbSB0byBiZSB0cnVlIHByb3BoZWN5OyBmb3Igd2hlbiBoZSB3YXMgb2YgYW4gYWdlIGZvciB0YWtpbmcgbGVzc29ucywgaGlzIG5hdHVyYWwgdGFsZW50IHNob25lIG91dCBjbGVhciBhbmQgaGUgd29uIG5hbWUgYW5kIGZhbWUgYW1vbmcgdGhlIGJveXMsIHNvIHRoYXQgdGhlaXIgZmF0aGVycyB1c2VkIHRvIHZpc2l0IHRoZSBzY2hvb2xzIGluIG9yZGVyIHRvIHNlZSBDaWNlcm8gd2l0aCB0aGVpciBvd24gZXllcyBhbmQgb2JzZXJ2ZSB0aGUgcXVpY2tuZXNzIGFuZCBpbnRlbGxpZ2VuY2UgaW4gaGlzIHN0dWRpZXMgZm9yIHdoaWNoIGhlIHdhcyBleHRvbGxlZCwgdGhvdWdoIHRoZSBydWRlciBvbmVzIGFtb25nIHRoZW0gd2VyZSBhbmdyeSBhdCB0aGVpciBzb25zIHdoZW4gdGhleSBzYXcgdGhlbSB3YWxraW5nIHdpdGggQ2ljZXJvIHBsYWNlZCBpbiB0aGVpciBtaWRzdCBhcyBhIG1hcmsgb2YgaG9ub3VyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhbHRob3VnaCBoZSBzaG93ZWQgaGltc2VsZiwgYXMgUGxhdG88bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBSZXAuIDQ3NWIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZXB1YmxpYzwvdGl0bGU+LCBwLiA0NzUgYi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhvdWdodCBhIG5hdHVyZSBzaG91bGQgZG8gd2hpY2ggd2FzIGZvbmQgb2YgbGVhcm5pbmcgYW5kIGZvbmQgb2Ygd2lzZG9tLCBjYXBhYmxlIG9mIHdlbGNvbWluZyBhbGwga25vd2xlZGdlIGFuZCBpbmNhcGFibGUgb2Ygc2xpZ2h0aW5nIGFueSBraW5kIG9mIGxpdGVyYXR1cmUgb3IgdHJhaW5pbmcsIGhlIGxlbnQgaGltc2VsZiB3aXRoIHNvbWV3aGF0IGdyZWF0ZXIgYXJkb3VyIHRvIHRoZSBhcnQgb2YgcG9ldHJ5LiBBbmQgYSBsaXR0bGUgcG9lbSB3aGljaCBoZSB3cm90ZSB3aGVuIGEgYm95IGlzIHN0aWxsIGV4dGFudCwgY2FsbGVkIFBvbnRpdXMgR2xhdWN1cywgYW5kIGNvbXBvc2VkIGluIHRldHJhbWV0ZXIgdmVyc2UuIE1vcmVvdmVyLCBhcyBoZSBncmV3IG9sZGVyIGFuZCBhcHBsaWVkIGhpbXNlbGYgd2l0aCBncmVhdGVyIHZlcnNhdGlsaXR5IHRvIHN1Y2ggYWNjb21wbGlzaG1lbnRzLCBoZSBnb3QgdGhlIG5hbWUgb2YgYmVpbmcgbm90IG9ubHkgdGhlIGJlc3Qgb3JhdG9yLCBidXQgYWxzbyB0aGUgYmVzdCBwb2V0IGFtb25nIHRoZSBSb21hbnMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUmVwLiA0NzViIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVwdWJsaWM8L3RpdGxlPiwgcC4gNDc1IGIuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZXB1YmxpYzwvdGl0bGU+LCBwLiA0NzUgYi48L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBmYW1lIGZvciBvcmF0b3J5IGFiaWRlcyB0byB0aGlzIGRheSwgYWx0aG91Z2ggdGhlcmUgaGF2ZSBiZWVuIGdyZWF0IGlubm92YXRpb25zIGluIHN0eWxlOyBidXQgaGlzIHBvZXRyeSwgc2luY2UgbWFueSBnaWZ0ZWQgcG9ldHMgaGF2ZSBmb2xsb3dlZCBoaW0sIGhhcyBhbHRvZ2V0aGVyIGZhbGxlbiBpbnRvIG5lZ2xlY3QgYW5kIGRpc3JlcHV0ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoZSBoYWQgZmluaXNoZWQgdGhlIHN0dWRpZXMgb2YgYm95aG9vZCwgaGUgYXR0ZW5kZWQgdGhlIGxlY3R1cmVzIG9mIFBoaWxvbiB0aGUgQWNhZGVtaWMsIHdob20sIGFib3ZlIGFsbCB0aGUgb3RoZXIgZGlzY2lwbGVzIG9mIENsZWl0b21hY2h1cywgdGhlIFJvbWFucyBhZG1pcmVkIGZvciBoaXMgZWxvcXVlbmNlIGFuZCBsb3ZlZCBmb3IgaGlzIGNoYXJhY3Rlci4gQXQgdGhlIHNhbWUgdGltZSBoZSBjb25zb3J0ZWQgd2l0aCBNdWNpdXMgU2NhZXZvbGEsIGEgc3RhdGVzbWFuIGFuZCBsZWFkZXIgb2YgdGhlIHNlbmF0ZSwgYW5kIHdhcyBoZWxwZWQgYnkgaGltIHRvIGFuIGFjcXVhaW50YW5jZSB3aXRoIHRoZSBsYXc7IGFuZCBmb3IgYSBsaXR0bGUgd2hpbGUgaGUgYWxzbyBkaWQgbWlsaXRhcnkgc2VydmljZSB1bmRlciBTdWxsYSBpbiB0aGUgd2FyIGFnYWluc3QgdGhlIE1hcnNpYW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjkwLTg4IEIuQy4gSXQgd2FzIHVuZGVyIFBvbXBleSwgaG93ZXZlciwgdGhhdCBDaWNlcm8gc2VydmVkICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBQaGlsLiAxMi4yNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5QaGlsLjwvdGl0bGU+IHhpaS4gMTEsIDI3PC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHNlZWluZyB0aGF0IHRoZSBjb21tb253ZWFsdGggd2FzIGh1cnJ5aW5nIGludG8gZmFjdGlvbnMsIGFuZCBmcm9tIGZhY3Rpb25zIGludG8gdW5saW1pdGVkIG1vbmFyY2h5LCBoZSBiZXRvb2sgaGltc2VsZiB0byBhIHJldGlyZWQgYW5kIGNvbnRlbXBsYXRpdmUgbGlmZSwgYXNzb2NpYXRlZCB3aXRoIEdyZWVrIHNjaG9sYXJzLCBhbmQgcHVyc3VlZCBoaXMgc3R1ZGllcywgdW50aWwgU3VsbGEgZ290IHRoZSBtYXN0ZXJ5IGFuZCB0aGUgc3RhdGUgYXBwZWFyZWQgdG8gYmUgc29tZXdoYXQgc2V0dGxlZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4MiBCLkMuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoZSBoYWQgZmluaXNoZWQgdGhlIHN0dWRpZXMgb2YgYm95aG9vZCwgaGUgYXR0ZW5kZWQgdGhlIGxlY3R1cmVzIG9mIFBoaWxvbiB0aGUgQWNhZGVtaWMsIHdob20sIGFib3ZlIGFsbCB0aGUgb3RoZXIgZGlzY2lwbGVzIG9mIENsZWl0b21hY2h1cywgdGhlIFJvbWFucyBhZG1pcmVkIGZvciBoaXMgZWxvcXVlbmNlIGFuZCBsb3ZlZCBmb3IgaGlzIGNoYXJhY3Rlci4gQXQgdGhlIHNhbWUgdGltZSBoZSBjb25zb3J0ZWQgd2l0aCBNdWNpdXMgU2NhZXZvbGEsIGEgc3RhdGVzbWFuIGFuZCBsZWFkZXIgb2YgdGhlIHNlbmF0ZSwgYW5kIHdhcyBoZWxwZWQgYnkgaGltIHRvIGFuIGFjcXVhaW50YW5jZSB3aXRoIHRoZSBsYXc7IGFuZCBmb3IgYSBsaXR0bGUgd2hpbGUgaGUgYWxzbyBkaWQgbWlsaXRhcnkgc2VydmljZSB1bmRlciBTdWxsYSBpbiB0aGUgd2FyIGFnYWluc3QgdGhlIE1hcnNpYW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+OTAtODggQi5DLiBJdCB3YXMgdW5kZXIgUG9tcGV5LCBob3dldmVyLCB0aGF0IENpY2VybyBzZXJ2ZWQgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gUGhpbC4gMTIuMjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGlsLjwvdGl0bGU+IHhpaS4gMTEsIDI3PC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBQaGlsLiAxMi4yNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBoaWwuPC90aXRsZT4geGlpLiAxMSwgMjc8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGlsLjwvdGl0bGU+IHhpaS4gMTEsIDI3PC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHNlZWluZyB0aGF0IHRoZSBjb21tb253ZWFsdGggd2FzIGh1cnJ5aW5nIGludG8gZmFjdGlvbnMsIGFuZCBmcm9tIGZhY3Rpb25zIGludG8gdW5saW1pdGVkIG1vbmFyY2h5LCBoZSBiZXRvb2sgaGltc2VsZiB0byBhIHJldGlyZWQgYW5kIGNvbnRlbXBsYXRpdmUgbGlmZSwgYXNzb2NpYXRlZCB3aXRoIEdyZWVrIHNjaG9sYXJzLCBhbmQgcHVyc3VlZCBoaXMgc3R1ZGllcywgdW50aWwgU3VsbGEgZ290IHRoZSBtYXN0ZXJ5IGFuZCB0aGUgc3RhdGUgYXBwZWFyZWQgdG8gYmUgc29tZXdoYXQgc2V0dGxlZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDgyIEIuQy48L25vdGU+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWJvdXQgdGhpcyB0aW1lIENocnlzb2dvbnVzLCBhIGZyZWVkbWFuIG9mIFN1bGxhJ3MsIHB1dCB1cCBhdCBwdWJsaWMgYXVjdGlvbiB0aGUgZXN0YXRlIG9mIGEgbWFuIHdobywgYXMgaXQgd2FzIHNhaWQsIGhhZCBiZWVuIHB1dCB0byBkZWF0aCB1bmRlciBwcm9zY3JpcHRpb24sIGFuZCBib3VnaHQgaXQgaW4gaGltc2VsZiBmb3IgdHdvIHRob3VzYW5kIGRyYWNobWFzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdHJhbnNsYXRpbmcgQ2ljZXJvJ3MgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmR1b2J1cyBtaWxsaWJ1cyBudW1tdW0sPC9xPiBQbHV0YXJjaCBlcnJvbmVvdXNseSByZWNrb25zIGluIGRlbmFyaWkgKHdoaWNoIHdlcmUgZXF1aXZhbGVudCB0byBkcmFjaG1hcywgb3IgZnJhbmNzKSBpbnN0ZWFkIG9mIGluIHNlc3RlcnRpaSAod29ydGggb25seSBvbmUtcXVhcnRlciBhcyBtdWNoKS48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIFJvc2NpdXMsIHRoZSBzb24gYW5kIGhlaXIgb2YgdGhlIGRlY2Vhc2VkLCB3YXMgaW5kaWduYW50IGFuZCBzZXQgZm9ydGggY2xlYXJseSB0aGF0IHRoZSBlc3RhdGUgd2FzIHdvcnRoIHR3byBodW5kcmVkIGFuZCBmaWZ0eSB0YWxlbnRzLCB3aGVyZXVwb24gU3VsbGEsIGVucmFnZWQgdG8gaGF2ZSBoaXMgYWN0aW9ucyBjYWxsZWQgaW4gcXVlc3Rpb24sIGluZGljdGVkIFJvc2NpdXMgZm9yIHRoZSBtdXJkZXIgb2YgaGlzIGZhdGhlciwgQ2hyeXNvZ29udXMgaGF2aW5nIHRydW1wZWQgdXAgdGhlIGV2aWRlbmNlLiBObyBhZHZvY2F0ZSB3b3VsZCBoZWxwIFJvc2NpdXMsIGJ1dCBhbGwgYXZvaWRlZCBoaW0gdGhyb3VnaCB0aGVpciBmZWFyIG9mIFN1bGxhJ3MgY3J1ZWx0eSwgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHNvIGF0IGxhc3QsIGluIGhpcyBkZXN0aXR1dGlvbiwgdGhlIHlvdW5nIG1hbiBoYWQgcmVjb3Vyc2UgdG8gQ2ljZXJvLiBDaWNlcm8ncyBmcmllbmRzIGVuY291cmFnZWQgaGltIHRvIHVuZGVydGFrZSB0aGUgY2FzZSwgYXJndWluZyB0aGF0IGhlIHdvdWxkIG5ldmVyIGFnYWluIGhhdmUgYSBtb3JlIGJyaWxsaWFudCBvciBhIG1vcmUgaG9ub3VyYWJsZSBvcHBvcnR1bml0eSB0byB3aW4gZmFtZS4gQWNjb3JkaW5nbHksIGhlIHVuZGVydG9vayB0aGUgZGVmZW5jZSBvZiBSb3NjaXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgb3JhdGlvbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBTLlJvc2MuIDEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+cHJvIFJvc2NpbyBBbWVyaW5vPC90aXRsZT4KICAgICAgICAgICAgICAgPC9iaWJsPi48L25vdGU+IHdvbiBoaXMgY2F1c2UsIGFuZCBtZW4gYWRtaXJlZCBoaW0gZm9yIGl0OyBidXQgZmVhcmluZyBTdWxsYSwgaGUgbWFkZSBhIGpvdXJuZXkgdG8gR3JlZWNlLCBhZnRlciBzcHJlYWRpbmcgYSByZXBvcnQgdGhhdCBoaXMgaGVhbHRoIG5lZWRlZCBhdHRlbnRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiBmYWN0IGhlIHdhcyBzcGFyZSBhbmQgbGVhbiwgYW5kIG93aW5nIHRvIGEgd2Vha25lc3Mgb2YgdGhlIHN0b21hY2ggY291bGQgb25seSB3aXRoIGRpZmZpY3VsdHkgdGFrZSBhIGxpdHRsZSBsaWdodCBmb29kIGxhdGUgaW4gdGhlIGRheTsgaGlzIHZvaWNlLCBob3dldmVyLCB3YXMgZnVsbCBhbmQgc3Ryb25nLCBidXQgaGFyc2ggYW5kIHVubW9kdWxhdGVkLCBhbmQgc2luY2UsIG93aW5nIHRvIHRoZSB2ZWhlbWVuY2UgYW5kIHBhc3Npb24gb2YgaGlzIG9yYXRvcnksIGl0IHdhcyBhbHdheXMgZm9yY2VkIGludG8gdGhlIGhpZ2hlciB0b25lcywgaXQgbWFkZSBtZW4gYXBwcmVoZW5zaXZlIGZvciBoaXMgaGVhbHRoLgoJCQk8L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdHJhbnNsYXRpbmcgQ2ljZXJvJ3MgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmR1b2J1cyBtaWxsaWJ1cyBudW1tdW0sPC9xPiBQbHV0YXJjaCBlcnJvbmVvdXNseSByZWNrb25zIGluIGRlbmFyaWkgKHdoaWNoIHdlcmUgZXF1aXZhbGVudCB0byBkcmFjaG1hcywgb3IgZnJhbmNzKSBpbnN0ZWFkIG9mIGluIHNlc3RlcnRpaSAod29ydGggb25seSBvbmUtcXVhcnRlciBhcyBtdWNoKS48L25vdGU+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmR1b2J1cyBtaWxsaWJ1cyBudW1tdW0sPC9xPiBQbHV0YXJjaCBlcnJvbmVvdXNseSByZWNrb25zIGluIGRlbmFyaWkgKHdoaWNoIHdlcmUgZXF1aXZhbGVudCB0byBkcmFjaG1hcywgb3IgZnJhbmNzKSBpbnN0ZWFkIG9mIGluIHNlc3RlcnRpaSAod29ydGggb25seSBvbmUtcXVhcnRlciBhcyBtdWNoKS48L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gUm9zY2l1cywgdGhlIHNvbiBhbmQgaGVpciBvZiB0aGUgZGVjZWFzZWQsIHdhcyBpbmRpZ25hbnQgYW5kIHNldCBmb3J0aCBjbGVhcmx5IHRoYXQgdGhlIGVzdGF0ZSB3YXMgd29ydGggdHdvIGh1bmRyZWQgYW5kIGZpZnR5IHRhbGVudHMsIHdoZXJldXBvbiBTdWxsYSwgZW5yYWdlZCB0byBoYXZlIGhpcyBhY3Rpb25zIGNhbGxlZCBpbiBxdWVzdGlvbiwgaW5kaWN0ZWQgUm9zY2l1cyBmb3IgdGhlIG11cmRlciBvZiBoaXMgZmF0aGVyLCBDaHJ5c29nb251cyBoYXZpbmcgdHJ1bXBlZCB1cCB0aGUgZXZpZGVuY2UuIE5vIGFkdm9jYXRlIHdvdWxkIGhlbHAgUm9zY2l1cywgYnV0IGFsbCBhdm9pZGVkIGhpbSB0aHJvdWdoIHRoZWlyIGZlYXIgb2YgU3VsbGEncyBjcnVlbHR5LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBzbyBhdCBsYXN0LCBpbiBoaXMgZGVzdGl0dXRpb24sIHRoZSB5b3VuZyBtYW4gaGFkIHJlY291cnNlIHRvIENpY2Vyby4gQ2ljZXJvJ3MgZnJpZW5kcyBlbmNvdXJhZ2VkIGhpbSB0byB1bmRlcnRha2UgdGhlIGNhc2UsIGFyZ3VpbmcgdGhhdCBoZSB3b3VsZCBuZXZlciBhZ2FpbiBoYXZlIGEgbW9yZSBicmlsbGlhbnQgb3IgYSBtb3JlIGhvbm91cmFibGUgb3Bwb3J0dW5pdHkgdG8gd2luIGZhbWUuIEFjY29yZGluZ2x5LCBoZSB1bmRlcnRvb2sgdGhlIGRlZmVuY2Ugb2YgUm9zY2l1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgb3JhdGlvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFMuUm9zYy4gMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBybyBSb3NjaW8gQW1lcmlubzwvdGl0bGU+CiAgICAgICAgICAgICAgIDwvYmlibD4uPC9ub3RlPiB3b24gaGlzIGNhdXNlLCBhbmQgbWVuIGFkbWlyZWQgaGltIGZvciBpdDsgYnV0IGZlYXJpbmcgU3VsbGEsIGhlIG1hZGUgYSBqb3VybmV5IHRvIEdyZWVjZSwgYWZ0ZXIgc3ByZWFkaW5nIGEgcmVwb3J0IHRoYXQgaGlzIGhlYWx0aCBuZWVkZWQgYXR0ZW50aW9uLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gUy5Sb3NjLiAxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIFJvc2NpbyBBbWVyaW5vPC90aXRsZT4KICAgICAgICAgICAgICAgPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5wcm8gUm9zY2lvIEFtZXJpbm88L3RpdGxlPgogICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiBmYWN0IGhlIHdhcyBzcGFyZSBhbmQgbGVhbiwgYW5kIG93aW5nIHRvIGEgd2Vha25lc3Mgb2YgdGhlIHN0b21hY2ggY291bGQgb25seSB3aXRoIGRpZmZpY3VsdHkgdGFrZSBhIGxpdHRsZSBsaWdodCBmb29kIGxhdGUgaW4gdGhlIGRheTsgaGlzIHZvaWNlLCBob3dldmVyLCB3YXMgZnVsbCBhbmQgc3Ryb25nLCBidXQgaGFyc2ggYW5kIHVubW9kdWxhdGVkLCBhbmQgc2luY2UsIG93aW5nIHRvIHRoZSB2ZWhlbWVuY2UgYW5kIHBhc3Npb24gb2YgaGlzIG9yYXRvcnksIGl0IHdhcyBhbHdheXMgZm9yY2VkIGludG8gdGhlIGhpZ2hlciB0b25lcywgaXQgbWFkZSBtZW4gYXBwcmVoZW5zaXZlIGZvciBoaXMgaGVhbHRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9uIGNvbWluZyB0byBBdGhlbnMgaGUgYXR0ZW5kZWQgdGhlIGxlY3R1cmVzIG9mIEFudGlvY2h1cyBvZiBBc2NhbG9uLCBhbmQgd2FzIGNoYXJtZWQgYnkgaGlzIGZsdWVuY3kgYW5kIGdyYWNlIG9mIGRpY3Rpb24sIGFsdGhvdWdoIGhlIGRpc2FwcHJvdmVkIG9mIGhpcyBpbm5vdmF0aW9ucyBpbiBkb2N0cmluZS4gRm9yIEFudGlvY2h1cyBoYWQgYWxyZWFkeSBmYWxsZW4gYXdheSBmcm9tIHdoYXQgd2FzIGNhbGxlZCB0aGUgTmV3IEFjYWRlbXkgYW5kIGFiYW5kb25lZCB0aGUgc2VjdCBvZiBDYXJuZWFkZXMsIGVpdGhlciBtb3ZlZCB0aGVyZXRvIGJ5IHRoZSBjbGVhciBldmlkZW5jZSBvZiB0aGUgc2Vuc2UtcGVyY2VwdGlvbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhpcyB0aGUgTmV3IEFjYWRlbXkgcmVmdXNlZCB0byBhZG1pdC48L25vdGU+IG9yLCBhcyBzb21lIHNheSwgbGVkIGJ5IGEgZmVlbGluZyBvZiBhbWJpdGlvdXMgb3Bwb3NpdGlvbiB0byB0aGUgZGlzY2lwbGVzIG9mIENsZWl0b21hY2h1cyBhbmQgUGhpbG9uIHRvIGNoYW5nZSBoaXMgdmlld3MgYW5kIGN1bHRpdmF0ZSBpbiBtb3N0IGNhc2VzIHRoZSBkb2N0cmluZSBvZiB0aGUgU3RvaWNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2ljZXJvIGxvdmVkIHRoZSBzeXN0ZW1zIHdoaWNoIEFudGlvY2h1cyBkaXNjYXJkZWQgYW5kIGRldm90ZWQgaGltc2VsZiB0aGUgcmF0aGVyIHRvIHRoZW0sIHB1cnBvc2luZywgaW4gY2FzZSBoZSB3YXMgYWx0b2dldGhlciBkcml2ZW4gb3V0IG9mIGEgcHVibGljIGNhcmVlciwgdG8gY2hhbmdlIGhpcyBob21lIHRvIEF0aGVucywgYXdheSBmcm9tIHRoZSBmb3J1bSBhbmQgdGhlIGJ1c2luZXNzIG9mIHRoZSBzdGF0ZSwgYW5kIHNwZW5kIGhpcyBsaWZlIGluIHRoZSBxdWlldCBwdXJzdWl0IG9mIHBoaWxvc29waHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbiBjb21pbmcgdG8gQXRoZW5zIGhlIGF0dGVuZGVkIHRoZSBsZWN0dXJlcyBvZiBBbnRpb2NodXMgb2YgQXNjYWxvbiwgYW5kIHdhcyBjaGFybWVkIGJ5IGhpcyBmbHVlbmN5IGFuZCBncmFjZSBvZiBkaWN0aW9uLCBhbHRob3VnaCBoZSBkaXNhcHByb3ZlZCBvZiBoaXMgaW5ub3ZhdGlvbnMgaW4gZG9jdHJpbmUuIEZvciBBbnRpb2NodXMgaGFkIGFscmVhZHkgZmFsbGVuIGF3YXkgZnJvbSB3aGF0IHdhcyBjYWxsZWQgdGhlIE5ldyBBY2FkZW15IGFuZCBhYmFuZG9uZWQgdGhlIHNlY3Qgb2YgQ2FybmVhZGVzLCBlaXRoZXIgbW92ZWQgdGhlcmV0byBieSB0aGUgY2xlYXIgZXZpZGVuY2Ugb2YgdGhlIHNlbnNlLXBlcmNlcHRpb25zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhpcyB0aGUgTmV3IEFjYWRlbXkgcmVmdXNlZCB0byBhZG1pdC48L25vdGU+IG9yLCBhcyBzb21lIHNheSwgbGVkIGJ5IGEgZmVlbGluZyBvZiBhbWJpdGlvdXMgb3Bwb3NpdGlvbiB0byB0aGUgZGlzY2lwbGVzIG9mIENsZWl0b21hY2h1cyBhbmQgUGhpbG9uIHRvIGNoYW5nZSBoaXMgdmlld3MgYW5kIGN1bHRpdmF0ZSBpbiBtb3N0IGNhc2VzIHRoZSBkb2N0cmluZSBvZiB0aGUgU3RvaWNzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDaWNlcm8gbG92ZWQgdGhlIHN5c3RlbXMgd2hpY2ggQW50aW9jaHVzIGRpc2NhcmRlZCBhbmQgZGV2b3RlZCBoaW1zZWxmIHRoZSByYXRoZXIgdG8gdGhlbSwgcHVycG9zaW5nLCBpbiBjYXNlIGhlIHdhcyBhbHRvZ2V0aGVyIGRyaXZlbiBvdXQgb2YgYSBwdWJsaWMgY2FyZWVyLCB0byBjaGFuZ2UgaGlzIGhvbWUgdG8gQXRoZW5zLCBhd2F5IGZyb20gdGhlIGZvcnVtIGFuZCB0aGUgYnVzaW5lc3Mgb2YgdGhlIHN0YXRlLCBhbmQgc3BlbmQgaGlzIGxpZmUgaW4gdGhlIHF1aWV0IHB1cnN1aXQgb2YgcGhpbG9zb3BoeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdvcmQgd2FzIG5vdyBicm91Z2h0IHRvIGhpbSB0aGF0IFN1bGxhIHdhcyBkZWFkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDc4IEIuQy48L25vdGU+IGFuZCBzaW5jZSBoaXMgYm9keSwgc3RyZW5ndGhlbmVkIGJ5IGV4ZXJjaXNlLCB3YXMgdGFraW5nIG9uIGEgdmlnb3JvdXMgaGFiaXQsIHdoaWxlIGhpcyB2b2ljZSwgYWNxdWlyaW5nIG1vZHVsYXRpb24sIGhhZCBncm93biBwbGVhc2FudCB0byB0aGUgZWFyLCBhbmQgaGFkIGJlZW4gbW9kZXJhdGVkIGludG8ga2VlcGluZyB3aXRoIHRoZSBoYWJpdCBvZiBoaXMgYm9keTsgYW5kIHNpbmNlLCBtb3Jlb3ZlciwgaGlzIGZyaWVuZHMgYXQgUm9tZSBlYXJuZXN0bHkgYmVzb3VnaHQgaGltIGJ5IGxldHRlciBhbmQgQW50aW9jaHVzIHN0cm9uZ2x5IHVyZ2VkIGhpbSB0byBhcHBseSBoaW1zZWxmIHRvIHB1YmxpYyBhZmZhaXJzLCBoZSBvbmNlIG1vcmUgc291Z2h0IHRvIHByZXBhcmUgZm9yIHNlcnZpY2UgdGhlcmVpbiBoaXMgaW5zdHJ1bWVudCwgYXMgaXQgd2VyZSwgdG8gd2l0IGhpcyByaGV0b3JpY2FsIHN0eWxlLCBhbmQgdG8gcm91c2UgdG8gYWN0aW9uIGhpcyBwb2xpdGljYWwgcG93ZXJzLCBkaWxpZ2VudGx5IGN1bHRpdmF0aW5nIGhpbXNlbGYgaW4gZGVjbGFtYXRpb24gYW5kIHRha2luZyBsZXNzb25zIG9mIHRoZSBwb3B1bGFyIHJoZXRvcmljaWFucy4gV2l0aCB0aGlzIGVuZCBpbiB2aWV3IGhlIG1hZGUgYSB2b3lhZ2UgdG8gQXNpYSBhbmQgUmhvZGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JbiBBc2lhLCBoZSBzdHVkaWVkIG9yYXRvcnkgd2l0aCBYZW5vY2xlcyBvZiBBZHJhbXl0dGl1bSwgRGlvbnlzaXVzIG9mIE1hZ25lc2lhLCBhbmQgTWVuaXBwdXMgdGhlIENhcmlhbjsgaW4gUmhvZGVzLCBvcmF0b3J5IHdpdGggQXBvbGxvbml1cyB0aGUgc29uIG9mIE1vbG9uLCBhbmQgcGhpbG9zb3BoeSB3aXRoIFBvc2VpZG9uaXVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiBDaWNlcm8ncyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBhZCBCcnV0LiA5MSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CcnV0dXM8L3RpdGxlPiwgOTE8L2JpYmw+Ljwvbm90ZT4gQXBvbGxvbml1cywgd2UgYXJlIHRvbGQsIG5vdCB1bmRlcnN0YW5kaW5nIHRoZSBSb21hbiBsYW5ndWFnZSwgcmVxdWVzdGVkIENpY2VybyB0byBkZWNsYWltIGluIEdyZWVrLCB3aXRoIHdoaWNoIHJlcXVlc3QgQ2ljZXJvIHJlYWRpbHkgY29tcGxpZWQsIHRoaW5raW5nIHRoYXQgaW4gdGhpcyB3YXkgaGlzIGZhdWx0cyBjb3VsZCBiZXR0ZXIgYmUgY29ycmVjdGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoZSBoYWQgZGVjbGFpbWVkLCBoaXMgb3RoZXIgaGVhcmVycyB3ZXJlIGFzdG91bmRlZCBhbmQgdmllZCB3aXRoIG9uZSBhbm90aGVyIGluIHRoZWlyIHByYWlzZXMsIGJ1dCBBcG9sbG9uaXVzIHdhcyBub3QgZ3JlYXRseSBtb3ZlZCB3aGlsZSBsaXN0ZW5pbmcgdG8gaGltLCBhbmQgd2hlbiBoZSBoYWQgY2Vhc2VkIHNhdCBmb3IgYSBsb25nIHRpbWUgbG9zdCBpbiB0aG91Z2h0OyB0aGVuLCBzaW5jZSBDaWNlcm8gd2FzIGRpc3RyZXNzZWQgYXQgdGhpcywgaGUgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVlLCBpbmRlZWQsIE8gQ2ljZXJvLCBJIGFkbWlyZSBhbmQgY29tbWVuZDsgYnV0IEdyZWVjZSBJIHBpdHkgZm9yIGhlciBzYWQgZm9ydHVuZSwgc2luY2UgSSBzZWUgdGhhdCBldmVuIHRoZSBvbmx5IGdsb3JpZXMgd2hpY2ggd2VyZSBsZWZ0IHRvIHVzLCBjdWx0dXJlIGFuZCBlbG9xdWVuY2UsIGFyZSB0aHJvdWdoIHRoZWUgdG8gYmVsb25nIGFsc28gdG8gdGhlIFJvbWFucy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3b3JkIHdhcyBub3cgYnJvdWdodCB0byBoaW0gdGhhdCBTdWxsYSB3YXMgZGVhZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDc4IEIuQy48L25vdGU+IGFuZCBzaW5jZSBoaXMgYm9keSwgc3RyZW5ndGhlbmVkIGJ5IGV4ZXJjaXNlLCB3YXMgdGFraW5nIG9uIGEgdmlnb3JvdXMgaGFiaXQsIHdoaWxlIGhpcyB2b2ljZSwgYWNxdWlyaW5nIG1vZHVsYXRpb24sIGhhZCBncm93biBwbGVhc2FudCB0byB0aGUgZWFyLCBhbmQgaGFkIGJlZW4gbW9kZXJhdGVkIGludG8ga2VlcGluZyB3aXRoIHRoZSBoYWJpdCBvZiBoaXMgYm9keTsgYW5kIHNpbmNlLCBtb3Jlb3ZlciwgaGlzIGZyaWVuZHMgYXQgUm9tZSBlYXJuZXN0bHkgYmVzb3VnaHQgaGltIGJ5IGxldHRlciBhbmQgQW50aW9jaHVzIHN0cm9uZ2x5IHVyZ2VkIGhpbSB0byBhcHBseSBoaW1zZWxmIHRvIHB1YmxpYyBhZmZhaXJzLCBoZSBvbmNlIG1vcmUgc291Z2h0IHRvIHByZXBhcmUgZm9yIHNlcnZpY2UgdGhlcmVpbiBoaXMgaW5zdHJ1bWVudCwgYXMgaXQgd2VyZSwgdG8gd2l0IGhpcyByaGV0b3JpY2FsIHN0eWxlLCBhbmQgdG8gcm91c2UgdG8gYWN0aW9uIGhpcyBwb2xpdGljYWwgcG93ZXJzLCBkaWxpZ2VudGx5IGN1bHRpdmF0aW5nIGhpbXNlbGYgaW4gZGVjbGFtYXRpb24gYW5kIHRha2luZyBsZXNzb25zIG9mIHRoZSBwb3B1bGFyIHJoZXRvcmljaWFucy4gV2l0aCB0aGlzIGVuZCBpbiB2aWV3IGhlIG1hZGUgYSB2b3lhZ2UgdG8gQXNpYSBhbmQgUmhvZGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIEFzaWEsIGhlIHN0dWRpZWQgb3JhdG9yeSB3aXRoIFhlbm9jbGVzIG9mIEFkcmFteXR0aXVtLCBEaW9ueXNpdXMgb2YgTWFnbmVzaWEsIGFuZCBNZW5pcHB1cyB0aGUgQ2FyaWFuOyBpbiBSaG9kZXMsIG9yYXRvcnkgd2l0aCBBcG9sbG9uaXVzIHRoZSBzb24gb2YgTW9sb24sIGFuZCBwaGlsb3NvcGh5IHdpdGggUG9zZWlkb25pdXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gQ2ljZXJvJ3MgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBhZCBCcnV0LiA5MSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCA5MTwvYmlibD4uPC9ub3RlPiBBcG9sbG9uaXVzLCB3ZSBhcmUgdG9sZCwgbm90IHVuZGVyc3RhbmRpbmcgdGhlIFJvbWFuIGxhbmd1YWdlLCByZXF1ZXN0ZWQgQ2ljZXJvIHRvIGRlY2xhaW0gaW4gR3JlZWssIHdpdGggd2hpY2ggcmVxdWVzdCBDaWNlcm8gcmVhZGlseSBjb21wbGllZCwgdGhpbmtpbmcgdGhhdCBpbiB0aGlzIHdheSBoaXMgZmF1bHRzIGNvdWxkIGJldHRlciBiZSBjb3JyZWN0ZWQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBhZCBCcnV0LiA5MSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCA5MTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIDkxPC90cmFuc2xhdGlvbj4="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhlIGhhZCBkZWNsYWltZWQsIGhpcyBvdGhlciBoZWFyZXJzIHdlcmUgYXN0b3VuZGVkIGFuZCB2aWVkIHdpdGggb25lIGFub3RoZXIgaW4gdGhlaXIgcHJhaXNlcywgYnV0IEFwb2xsb25pdXMgd2FzIG5vdCBncmVhdGx5IG1vdmVkIHdoaWxlIGxpc3RlbmluZyB0byBoaW0sIGFuZCB3aGVuIGhlIGhhZCBjZWFzZWQgc2F0IGZvciBhIGxvbmcgdGltZSBsb3N0IGluIHRob3VnaHQ7IHRoZW4sIHNpbmNlIENpY2VybyB3YXMgZGlzdHJlc3NlZCBhdCB0aGlzLCBoZSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlZSwgaW5kZWVkLCBPIENpY2VybywgSSBhZG1pcmUgYW5kIGNvbW1lbmQ7IGJ1dCBHcmVlY2UgSSBwaXR5IGZvciBoZXIgc2FkIGZvcnR1bmUsIHNpbmNlIEkgc2VlIHRoYXQgZXZlbiB0aGUgb25seSBnbG9yaWVzIHdoaWNoIHdlcmUgbGVmdCB0byB1cywgY3VsdHVyZSBhbmQgZWxvcXVlbmNlLCBhcmUgdGhyb3VnaCB0aGVlIHRvIGJlbG9uZyBhbHNvIHRvIHRoZSBSb21hbnMuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRob3VnaCBDaWNlcm8sIGZ1bGwgb2YgaG9wZSwgd2FzIGJlaW5nIGJvcm5lIG9uIHRvd2FyZHMgYSBwb2xpdGljYWwgY2FyZWVyLCBhIGNlcnRhaW4gb3JhY2xlIHRvb2sgdGhlIGVkZ2UgZnJvbSBoaXMgZWFnZXIgZGVzaXJlLiBXaGVuIGhlIGlucXVpcmVkLCBuYW1lbHksIG9mIHRoZSBnb2QgYXQgRGVscGhpIGhvdyBoZSBjb3VsZCBiZWNvbWUgbW9zdCBpbGx1c3RyaW91cywgdGhlIFB5dGhpYW4gcHJpZXN0ZXNzIGVuam9pbmVkIHVwb24gaGltIHRvIG1ha2UgaGlzIG93biBuYXR1cmUsIGFuZCBub3QgdGhlIG9waW5pb24gb2YgdGhlIG11bHRpdHVkZSwgaGlzIGd1aWRlIGluIGxpZmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBkdXJpbmcgdGhlIGZpcnN0IHBhcnQgb2YgaGlzIHRpbWUgYXQgUm9tZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNpY2VybyByZXR1cm5lZCB0byBSb21lIGluIDc3IEIuQy4sIGJlaW5nIGluIGhpcyB0aGlydGlldGggeWVhci48L25vdGU+IGhlIGNvbmR1Y3RlZCBoaW1zZWxmIHdpdGggY2F1dGlvbiwgd2FzIHJlbHVjdGFudCB0byBzdWUgZm9yIG9mZmljZSwgYW5kIHdhcyB0aGVyZWZvcmUgbmVnbGVjdGVkLCBiZWluZyBjYWxsZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5HcmVlazwvcT4gYW5kIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U2Nob2xhciw8L3E+IHRob3NlIG5hbWVzIHdoaWNoIHRoZSBsb3cgYW5kIGlnbm9yYW50IGNsYXNzZXMgYXQgUm9tZSB3ZXJlIHdvbnQgdG8gZ2l2ZSBzbyByZWFkaWx5LiBCdXQgaGUgd2FzIG5hdHVyYWxseSBhbWJpdGlvdXMgYW5kIHdhcyB1cmdlZCBvbiBieSBoaXMgZmF0aGVyIGFuZCBoaXMgZnJpZW5kcywgYW5kIHNvIHdoZW4gaGUgZ2F2ZSBoaW1zZWxmIGluIGVhcm5lc3QgdG8gdGhlIHdvcmsgb2YgYW4gYWR2b2NhdGUsIGhlIGRpZCBub3QgYWR2YW5jZSBzbG93bHkgdG8gdGhlIHByaW1hY3ksIGJ1dCBoaXMgZmFtZSBzaG9uZSBmb3J0aCBhdCBvbmNlLCBhbmQgaGUgZmFyIHN1cnBhc3NlZCB0aG9zZSB3aG8gc3Ryb3ZlIHdpdGggaGltIGZvciBkaXN0aW5jdGlvbiBpbiB0aGUgZm9ydW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aG91Z2ggQ2ljZXJvLCBmdWxsIG9mIGhvcGUsIHdhcyBiZWluZyBib3JuZSBvbiB0b3dhcmRzIGEgcG9saXRpY2FsIGNhcmVlciwgYSBjZXJ0YWluIG9yYWNsZSB0b29rIHRoZSBlZGdlIGZyb20gaGlzIGVhZ2VyIGRlc2lyZS4gV2hlbiBoZSBpbnF1aXJlZCwgbmFtZWx5LCBvZiB0aGUgZ29kIGF0IERlbHBoaSBob3cgaGUgY291bGQgYmVjb21lIG1vc3QgaWxsdXN0cmlvdXMsIHRoZSBQeXRoaWFuIHByaWVzdGVzcyBlbmpvaW5lZCB1cG9uIGhpbSB0byBtYWtlIGhpcyBvd24gbmF0dXJlLCBhbmQgbm90IHRoZSBvcGluaW9uIG9mIHRoZSBtdWx0aXR1ZGUsIGhpcyBndWlkZSBpbiBsaWZlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBkdXJpbmcgdGhlIGZpcnN0IHBhcnQgb2YgaGlzIHRpbWUgYXQgUm9tZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2ljZXJvIHJldHVybmVkIHRvIFJvbWUgaW4gNzcgQi5DLiwgYmVpbmcgaW4gaGlzIHRoaXJ0aWV0aCB5ZWFyLjwvbm90ZT4gaGUgY29uZHVjdGVkIGhpbXNlbGYgd2l0aCBjYXV0aW9uLCB3YXMgcmVsdWN0YW50IHRvIHN1ZSBmb3Igb2ZmaWNlLCBhbmQgd2FzIHRoZXJlZm9yZSBuZWdsZWN0ZWQsIGJlaW5nIGNhbGxlZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+R3JlZWs8L3E+IGFuZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U2Nob2xhciw8L3E+IHRob3NlIG5hbWVzIHdoaWNoIHRoZSBsb3cgYW5kIGlnbm9yYW50IGNsYXNzZXMgYXQgUm9tZSB3ZXJlIHdvbnQgdG8gZ2l2ZSBzbyByZWFkaWx5LiBCdXQgaGUgd2FzIG5hdHVyYWxseSBhbWJpdGlvdXMgYW5kIHdhcyB1cmdlZCBvbiBieSBoaXMgZmF0aGVyIGFuZCBoaXMgZnJpZW5kcywgYW5kIHNvIHdoZW4gaGUgZ2F2ZSBoaW1zZWxmIGluIGVhcm5lc3QgdG8gdGhlIHdvcmsgb2YgYW4gYWR2b2NhdGUsIGhlIGRpZCBub3QgYWR2YW5jZSBzbG93bHkgdG8gdGhlIHByaW1hY3ksIGJ1dCBoaXMgZmFtZSBzaG9uZSBmb3J0aCBhdCBvbmNlLCBhbmQgaGUgZmFyIHN1cnBhc3NlZCB0aG9zZSB3aG8gc3Ryb3ZlIHdpdGggaGltIGZvciBkaXN0aW5jdGlvbiBpbiB0aGUgZm9ydW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpdCBpcyBzYWlkIHRoYXQgaGUgdG9vLCBubyBsZXNzIHRoYW4gRGVtb3N0aGVuZXMsIHdhcyB3ZWFrIGluIGhpcyBkZWxpdmVyeSwgYW5kIHRoZXJlZm9yZSBzb3VnaHQgd2l0aCBjYXJlIHRvIGltaXRhdGUgbm93IFJvc2NpdXMgdGhlIGNvbWVkaWFuLCBhbmQgbm93IEFlc29wIHRoZSB0cmFnZWRpYW4uIFRoaXMgQWVzb3AsIHRoZXkgdGVsbCB1cywgd2FzIG9uY2UgYWN0aW5nIGluIGEgdGhlYXRyZSB0aGUgcGFydCBvZiBBdHJldXMgcGxhbm5pbmcgdG8gdGFrZSB2ZW5nZWFuY2Ugb24gVGh5ZXN0ZXMsIHdoZW4gb25lIG9mIHRoZSBhc3Npc3RhbnRzIHN1ZGRlbmx5IHJhbiBhY3Jvc3MgdGhlIHNjZW5lLCBhbmQgdGhlIGFjdG9yLCBsb3NpbmcgY29udHJvbCBvZiBoaW1zZWxmIGluIHRoZSBpbnRlbnNpdHkgb2YgaGlzIHBhc3Npb24sIHNtb3RlIGhpbSB3aXRoIGhpcyBzY2VwdHJlIGFuZCBsYWlkIGhpbSBkZWFkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIENpY2VybydzIGRlbGl2ZXJ5IGNvbnRyaWJ1dGVkIG5vdCBhIGxpdHRsZSB0byBoaXMgcGVyc3Vhc2l2ZSBwb3dlci4gTW9yZW92ZXIsIG9mIHRob3NlIG9yYXRvcnMgd2hvIHdlcmUgZ2l2ZW4gdG8gbG91ZCBzaG91dGluZyBoZSB1c2VkIHRvIHNheSBqZXN0aW5nbHkgdGhhdCB0aGV5IHdlcmUgbGVkIGJ5IHRoZWlyIHdlYWtuZXNzIHRvIHJlc29ydCB0byBjbGFtb3VyIGFzIGNyaXBwbGVzIHdlcmUgdG8gbW91bnQgdXBvbiBhIGhvcnNlLiBBbmQgaGlzIHJlYWRpbmVzcyB0byBpbmR1bGdlIGluIHN1Y2ggamVzdHMgYW5kIHBsZWFzYW50cnkgd2FzIHRob3VnaHQgaW5kZWVkIHRvIGJlIGEgcGxlYXNhbnQgY2hhcmFjdGVyaXN0aWMgb2YgYSBwbGVhZGVyOyBidXQgaGUgY2FycmllZCBpdCB0byBleGNlc3MgYW5kIHNvIGFubm95ZWQgbWFueSBhbmQgZ290IHRoZSByZXB1dGF0aW9uIG9mIGJlaW5nIG1hbGljaW91cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpdCBpcyBzYWlkIHRoYXQgaGUgdG9vLCBubyBsZXNzIHRoYW4gRGVtb3N0aGVuZXMsIHdhcyB3ZWFrIGluIGhpcyBkZWxpdmVyeSwgYW5kIHRoZXJlZm9yZSBzb3VnaHQgd2l0aCBjYXJlIHRvIGltaXRhdGUgbm93IFJvc2NpdXMgdGhlIGNvbWVkaWFuLCBhbmQgbm93IEFlc29wIHRoZSB0cmFnZWRpYW4uIFRoaXMgQWVzb3AsIHRoZXkgdGVsbCB1cywgd2FzIG9uY2UgYWN0aW5nIGluIGEgdGhlYXRyZSB0aGUgcGFydCBvZiBBdHJldXMgcGxhbm5pbmcgdG8gdGFrZSB2ZW5nZWFuY2Ugb24gVGh5ZXN0ZXMsIHdoZW4gb25lIG9mIHRoZSBhc3Npc3RhbnRzIHN1ZGRlbmx5IHJhbiBhY3Jvc3MgdGhlIHNjZW5lLCBhbmQgdGhlIGFjdG9yLCBsb3NpbmcgY29udHJvbCBvZiBoaW1zZWxmIGluIHRoZSBpbnRlbnNpdHkgb2YgaGlzIHBhc3Npb24sIHNtb3RlIGhpbSB3aXRoIGhpcyBzY2VwdHJlIGFuZCBsYWlkIGhpbSBkZWFkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQ2ljZXJvJ3MgZGVsaXZlcnkgY29udHJpYnV0ZWQgbm90IGEgbGl0dGxlIHRvIGhpcyBwZXJzdWFzaXZlIHBvd2VyLiBNb3Jlb3Zlciwgb2YgdGhvc2Ugb3JhdG9ycyB3aG8gd2VyZSBnaXZlbiB0byBsb3VkIHNob3V0aW5nIGhlIHVzZWQgdG8gc2F5IGplc3RpbmdseSB0aGF0IHRoZXkgd2VyZSBsZWQgYnkgdGhlaXIgd2Vha25lc3MgdG8gcmVzb3J0IHRvIGNsYW1vdXIgYXMgY3JpcHBsZXMgd2VyZSB0byBtb3VudCB1cG9uIGEgaG9yc2UuIEFuZCBoaXMgcmVhZGluZXNzIHRvIGluZHVsZ2UgaW4gc3VjaCBqZXN0cyBhbmQgcGxlYXNhbnRyeSB3YXMgdGhvdWdodCBpbmRlZWQgdG8gYmUgYSBwbGVhc2FudCBjaGFyYWN0ZXJpc3RpYyBvZiBhIHBsZWFkZXI7IGJ1dCBoZSBjYXJyaWVkIGl0IHRvIGV4Y2VzcyBhbmQgc28gYW5ub3llZCBtYW55IGFuZCBnb3QgdGhlIHJlcHV0YXRpb24gb2YgYmVpbmcgbWFsaWNpb3VzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhcHBvaW50ZWQgcXVhZXN0b3I8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA3NSBCLkMuPC9ub3RlPiBhdCBhIHRpbWUgd2hlbiBncmFpbiB3YXMgc2NhcmNlLCBhbmQgaGFkIHRoZSBwcm92aW5jZSBvZiBTaWNpbHkgYWxsb3R0ZWQgdG8gaGltLCB3aGVyZSBoZSBhbm5veWVkIHBlb3BsZSBhdCBmaXJzdCBieSBjb21wZWxsaW5nIHRoZW0gdG8gc2VuZCBncmFpbiB0byBSb21lLiBCdXQgYWZ0ZXJ3YXJkcyB0aGV5IGZvdW5kIGhpbSBjYXJlZnVsLCBqdXN0LCBhbmQgbWlsZCwgYW5kIGhvbm91cmVkIGhpbSBiZXlvbmQgYW55IGdvdmVybm9yIHRoZXkgaGFkIGV2ZXIgaGFkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgd2hlbiBsYXJnZSBudW1iZXJzIG9mIHlvdW5nIG1lbiBmcm9tIFJvbWUsIG9mIGlsbHVzdHJpb3VzIGFuZCBub2JsZSBmYW1pbGllcywgd2VyZSBhY2N1c2VkIG9mIGxhY2sgb2YgZGlzY2lwbGluZSBhbmQgY291cmFnZSBpbiB0aGUgd2FyIGFuZCBzZW50IHVwIGZvciB0cmlhbCB0byB0aGUgcHJhZXRvciBvZiBTaWNpbHksIENpY2VybyBwbGVhZGVkIHRoZWlyIGNhdXNlIGJyaWxsaWFudGx5IGFuZCB3b24gdGhlIGRheS4gV2hpbGUgaGUgd2FzIGpvdXJuZXlpbmcgdG8gUm9tZSwgdGhlbiwgaGlnaGx5IGVsYXRlZCBvdmVyIHRoZXNlIHN1Y2Nlc3NlcywgaGUgaGFkIGEgbGF1Z2hhYmxlIGV4cGVyaWVuY2UsIGFzIGhlIHRlbGxzIHVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBQbGFuYy4gMjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+T3IuIHBybyBQbGFuY2lvPC90aXRsZT4sIDI2PC9iaWJsPi4gVGhpcyB3YXMgaW4gdGhlIHN1Y2NlZWRpbmcgeWVhciAoNzQgQi5DLikuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIENhbXBhbmlhLCBuYW1lbHksIGhlIGZlbGwgaW4gd2l0aCBhbiBlbWluZW50IG1hbiB3aG9tIGhlIGRlZW1lZCBoaXMgZnJpZW5kLCBhbmQgYXNrZWQgaGltIHdoYXQgdGhlIFJvbWFucyB3ZXJlIHNheWluZyBhbmQgdGhpbmtpbmcgYWJvdXQgaGlzIGFjaGlldmVtZW50cywgc3VwcG9zaW5nIHRoYXQgaGUgaGFkIGZpbGxlZCB0aGUgd2hvbGUgY2l0eSB3aXRoIHRoZSBuYW1lIGFuZCBmYW1lIG9mIHRoZW07IGJ1dCBoaXMgZnJpZW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hlcmUsIHByYXksIGhhdmUgeW91IGJlZW4sIENpY2VybywgYWxsIHRoaXMgd2hpbGU/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoYXQgdGltZSwgdGhlbiwgYXMgaGUgdGVsbHMgdXMsIGhlIHdhcyBhbHRvZ2V0aGVyIGRpc2hlYXJ0ZW5lZCwgc2VlaW5nIHRoYXQgdGhlIHN0b3J5IG9mIGhpcyBkb2luZ3MgaGFkIHN1bmsgaW50byB0aGUgY2l0eSBhcyBpbnRvIGEgYm90dG9tbGVzcyBzZWEsIHdpdGhvdXQgYW55IHZpc2libGUgZWZmZWN0IHVwb24gaGlzIHJlcHV0YXRpb247IGJ1dCBhZnRlcndhcmRzIGhlIHJlYXNvbmVkIHdpdGggaGltc2VsZiBhbmQgYWJhdGVkIG11Y2ggb2YgaGlzIGFtYml0aW9uLCBjb252aW5jZWQgdGhhdCB0aGUgZmFtZSB0b3dhcmRzIHdoaWNoIGhlIHdhcyBlbXVsb3VzbHkgc3RydWdnbGluZyB3YXMgYSB0aGluZyB0aGF0IGtuZXcgbm8gYm91bmRzIGFuZCBoYWQgbm8gdGFuZ2libGUgbGltaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhpcyBleGNlc3NpdmUgZGVsaWdodCBpbiB0aGUgcHJhaXNlIG9mIG90aGVycyBhbmQgaGlzIHRvbyBwYXNzaW9uYXRlIGRlc2lyZSBmb3IgZ2xvcnkgcmVtYWluZWQgd2l0aCBoaW0gdW50aWwgdGhlIHZlcnkgZW5kLCBhbmQgdmVyeSBvZnRlbiBjb25mb3VuZGVkIGhpcyBzYW5lciByZWFzb25pbmdzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgYXBwb2ludGVkIHF1YWVzdG9yPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA3NSBCLkMuPC9ub3RlPiBhdCBhIHRpbWUgd2hlbiBncmFpbiB3YXMgc2NhcmNlLCBhbmQgaGFkIHRoZSBwcm92aW5jZSBvZiBTaWNpbHkgYWxsb3R0ZWQgdG8gaGltLCB3aGVyZSBoZSBhbm5veWVkIHBlb3BsZSBhdCBmaXJzdCBieSBjb21wZWxsaW5nIHRoZW0gdG8gc2VuZCBncmFpbiB0byBSb21lLiBCdXQgYWZ0ZXJ3YXJkcyB0aGV5IGZvdW5kIGhpbSBjYXJlZnVsLCBqdXN0LCBhbmQgbWlsZCwgYW5kIGhvbm91cmVkIGhpbSBiZXlvbmQgYW55IGdvdmVybm9yIHRoZXkgaGFkIGV2ZXIgaGFkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIGxhcmdlIG51bWJlcnMgb2YgeW91bmcgbWVuIGZyb20gUm9tZSwgb2YgaWxsdXN0cmlvdXMgYW5kIG5vYmxlIGZhbWlsaWVzLCB3ZXJlIGFjY3VzZWQgb2YgbGFjayBvZiBkaXNjaXBsaW5lIGFuZCBjb3VyYWdlIGluIHRoZSB3YXIgYW5kIHNlbnQgdXAgZm9yIHRyaWFsIHRvIHRoZSBwcmFldG9yIG9mIFNpY2lseSwgQ2ljZXJvIHBsZWFkZWQgdGhlaXIgY2F1c2UgYnJpbGxpYW50bHkgYW5kIHdvbiB0aGUgZGF5LiBXaGlsZSBoZSB3YXMgam91cm5leWluZyB0byBSb21lLCB0aGVuLCBoaWdobHkgZWxhdGVkIG92ZXIgdGhlc2Ugc3VjY2Vzc2VzLCBoZSBoYWQgYSBsYXVnaGFibGUgZXhwZXJpZW5jZSwgYXMgaGUgdGVsbHMgdXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBQbGFuYy4gMjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci4gcHJvIFBsYW5jaW88L3RpdGxlPiwgMjY8L2JpYmw+LiBUaGlzIHdhcyBpbiB0aGUgc3VjY2VlZGluZyB5ZWFyICg3NCBCLkMuKS48L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFBsYW5jLiAyNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLiBwcm8gUGxhbmNpbzwvdGl0bGU+LCAyNjwvYmlibD4uIFRoaXMgd2FzIGluIHRoZSBzdWNjZWVkaW5nIHllYXIgKDc0IEIuQy4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLiBwcm8gUGxhbmNpbzwvdGl0bGU+LCAyNjwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIENhbXBhbmlhLCBuYW1lbHksIGhlIGZlbGwgaW4gd2l0aCBhbiBlbWluZW50IG1hbiB3aG9tIGhlIGRlZW1lZCBoaXMgZnJpZW5kLCBhbmQgYXNrZWQgaGltIHdoYXQgdGhlIFJvbWFucyB3ZXJlIHNheWluZyBhbmQgdGhpbmtpbmcgYWJvdXQgaGlzIGFjaGlldmVtZW50cywgc3VwcG9zaW5nIHRoYXQgaGUgaGFkIGZpbGxlZCB0aGUgd2hvbGUgY2l0eSB3aXRoIHRoZSBuYW1lIGFuZCBmYW1lIG9mIHRoZW07IGJ1dCBoaXMgZnJpZW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVyZSwgcHJheSwgaGF2ZSB5b3UgYmVlbiwgQ2ljZXJvLCBhbGwgdGhpcyB3aGlsZT88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoYXQgdGltZSwgdGhlbiwgYXMgaGUgdGVsbHMgdXMsIGhlIHdhcyBhbHRvZ2V0aGVyIGRpc2hlYXJ0ZW5lZCwgc2VlaW5nIHRoYXQgdGhlIHN0b3J5IG9mIGhpcyBkb2luZ3MgaGFkIHN1bmsgaW50byB0aGUgY2l0eSBhcyBpbnRvIGEgYm90dG9tbGVzcyBzZWEsIHdpdGhvdXQgYW55IHZpc2libGUgZWZmZWN0IHVwb24gaGlzIHJlcHV0YXRpb247IGJ1dCBhZnRlcndhcmRzIGhlIHJlYXNvbmVkIHdpdGggaGltc2VsZiBhbmQgYWJhdGVkIG11Y2ggb2YgaGlzIGFtYml0aW9uLCBjb252aW5jZWQgdGhhdCB0aGUgZmFtZSB0b3dhcmRzIHdoaWNoIGhlIHdhcyBlbXVsb3VzbHkgc3RydWdnbGluZyB3YXMgYSB0aGluZyB0aGF0IGtuZXcgbm8gYm91bmRzIGFuZCBoYWQgbm8gdGFuZ2libGUgbGltaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhpcyBleGNlc3NpdmUgZGVsaWdodCBpbiB0aGUgcHJhaXNlIG9mIG90aGVycyBhbmQgaGlzIHRvbyBwYXNzaW9uYXRlIGRlc2lyZSBmb3IgZ2xvcnkgcmVtYWluZWQgd2l0aCBoaW0gdW50aWwgdGhlIHZlcnkgZW5kLCBhbmQgdmVyeSBvZnRlbiBjb25mb3VuZGVkIGhpcyBzYW5lciByZWFzb25pbmdzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgdGhhdCBoZSB3YXMgZW5nYWdpbmcgaW4gcHVibGljIGxpZmUgd2l0aCBncmVhdGVyIGFyZG91ciwgaGUgY29uc2lkZXJlZCBpdCBhIHNoYW1lZnVsIHRoaW5nIHRoYXQgd2hpbGUgY3JhZnRzbWVuLCB1c2luZyB2ZXNzZWxzIGFuZCBpbnN0cnVtZW50cyB0aGF0IGFyZSBsaWZlbGVzcywga25vdyB0aGUgbmFtZSBhbmQgcGxhY2UgYW5kIGNhcGFjaXR5IG9mIGV2ZXJ5IG9uZSBvZiB0aGVtLCB0aGUgc3RhdGVzbWFuLCBvbiB0aGUgY29udHJhcnksIHdob3NlIGluc3RydW1lbnRzIGZvciBjYXJyeWluZyBvdXQgcHVibGljIG1lYXN1cmVzIGFyZSBtZW4sIHNob3VsZCBiZSBpbmRpZmZlcmVudCBhbmQgY2FyZWxlc3MgYWJvdXQga25vd2luZyBoaXMgZmVsbG93LWNpdGl6ZW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVyZWZvcmUgaGUgbm90IG9ubHkgYWNjdXN0b21lZCBoaW1zZWxmIHRvIHJlbWVtYmVyIHRoZWlyIG5hbWVzLCBidXQgYWxzbyBsZWFybmVkIHRvIGtub3cgdGhlIHF1YXJ0ZXIgb2YgdGhlIGNpdHkgaW4gd2hpY2ggZXZlcnkgbm90YWJsZSBwZXJzb24gZHdlbHQsIHdoZXJlIGhlIG93bmVkIGEgY291bnRyeS1wbGFjZSwgd2hhdCBmcmllbmRzIGhlIGhhZCwgYW5kIHdoYXQgbmVpZ2hib3Vyczsgc28gdGhhdCB3aGF0ZXZlciByb2FkIGluIEl0YWx5IENpY2VybyB0cmF2ZWxsZWQsIGl0IHdhcyBlYXN5IGZvciBoaW0gdG8gbmFtZSBhbmQgcG9pbnQgb3V0IHRoZSBlc3RhdGVzIGFuZCB2aWxsYXMgb2YgaGlzIGZyaWVuZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IHRoYXQgaGUgd2FzIGVuZ2FnaW5nIGluIHB1YmxpYyBsaWZlIHdpdGggZ3JlYXRlciBhcmRvdXIsIGhlIGNvbnNpZGVyZWQgaXQgYSBzaGFtZWZ1bCB0aGluZyB0aGF0IHdoaWxlIGNyYWZ0c21lbiwgdXNpbmcgdmVzc2VscyBhbmQgaW5zdHJ1bWVudHMgdGhhdCBhcmUgbGlmZWxlc3MsIGtub3cgdGhlIG5hbWUgYW5kIHBsYWNlIGFuZCBjYXBhY2l0eSBvZiBldmVyeSBvbmUgb2YgdGhlbSwgdGhlIHN0YXRlc21hbiwgb24gdGhlIGNvbnRyYXJ5LCB3aG9zZSBpbnN0cnVtZW50cyBmb3IgY2Fycnlpbmcgb3V0IHB1YmxpYyBtZWFzdXJlcyBhcmUgbWVuLCBzaG91bGQgYmUgaW5kaWZmZXJlbnQgYW5kIGNhcmVsZXNzIGFib3V0IGtub3dpbmcgaGlzIGZlbGxvdy1jaXRpemVucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSBoZSBub3Qgb25seSBhY2N1c3RvbWVkIGhpbXNlbGYgdG8gcmVtZW1iZXIgdGhlaXIgbmFtZXMsIGJ1dCBhbHNvIGxlYXJuZWQgdG8ga25vdyB0aGUgcXVhcnRlciBvZiB0aGUgY2l0eSBpbiB3aGljaCBldmVyeSBub3RhYmxlIHBlcnNvbiBkd2VsdCwgd2hlcmUgaGUgb3duZWQgYSBjb3VudHJ5LXBsYWNlLCB3aGF0IGZyaWVuZHMgaGUgaGFkLCBhbmQgd2hhdCBuZWlnaGJvdXJzOyBzbyB0aGF0IHdoYXRldmVyIHJvYWQgaW4gSXRhbHkgQ2ljZXJvIHRyYXZlbGxlZCwgaXQgd2FzIGVhc3kgZm9yIGhpbSB0byBuYW1lIGFuZCBwb2ludCBvdXQgdGhlIGVzdGF0ZXMgYW5kIHZpbGxhcyBvZiBoaXMgZnJpZW5kcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHByb3BlcnR5LCB0aG91Z2ggc3VmZmljaWVudCB0byBtZWV0IGhpcyBleHBlbnNlcywgd2FzIG5ldmVydGhlbGVzcyBzbWFsbCwgYW5kIHRoZXJlZm9yZSBtZW4gd29uZGVyZWQgdGhhdCBoZSB3b3VsZCBhY2NlcHQgbmVpdGhlciBmZWVzIG5vciBnaWZ0cyBmb3IgaGlzIHNlcnZpY2VzIGFzIGFkdm9jYXRlLCBhbmQgYWJvdmUgYWxsIHdoZW4gaGUgdW5kZXJ0b29rIHRoZSBwcm9zZWN1dGlvbiBvZiBWZXJyZXMuIFRoaXMgbWFuLCB3aG8gaGFkIGJlZW4gcHJhZXRvciBvZiBTaWNpbHksIGFuZCB3aG9tIHRoZSBTaWNpbGlhbnMgcHJvc2VjdXRlZCBmb3IgbWFueSB2aWxsYWlub3VzIGFjdHMsIENpY2VybyBjb252aWN0ZWQsIG5vdCBieSBzcGVha2luZywgYnV0LCBpbiBhIHdheSwgYnkgYWN0dWFsbHkgbm90IHNwZWFraW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHByYWV0b3JzIGZhdm91cmVkIFZlcnJlcywgYW5kIGJ5IG1hbnkgb2JzdGFjbGVzIGFuZCBkZWxheXMgaGFkIHB1dCBvZmYgdGhlIGNhc2UgdW50aWwgdGhlIHZlcnkgbGFzdCBkYXksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhhdCBpcywgdGhlIGxhc3QgZGF5IG9uIHdoaWNoIHRoZSBjYXNlIGNvdWxkIGJlIHRyaWVkIGR1cmluZyB0aGF0IHllYXIuIFRoZSBjaXR5IHByYWV0b3IgYWxyZWFkeSBlbGVjdGVkIGZvciB0aGUgY29taW5nIHllYXIgKDY5IEIuQy4pIGZhdm91cmVkIFZlcnJlcywgYW5kIEhvcnRlbnNpdXMsIHRoZSBhZHZvY2F0ZSBvZiBWZXJyZXMsIHdhcyB0byBiZSBjb25zdWwgaW4gdGhhdCB5ZWFyLiBIZSB0aGVyZWZvcmUgdXNlZCBldmVyeSBhcnRpZmljZSB0byBkZWxheSB0aGUgY2FzZS4gU2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFZlci4gMS4xLjMxIiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZT5pbiBWZXJyZW08L3RpdGxlPiwgaS4gMTAsIDMxIGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzaW5jZSBpdCB3YXMgY2xlYXIgdGhhdCBhIGRheSdzIHRpbWUgd291bGQgbm90IGJlIGVub3VnaCBmb3IgdGhlIHNwZWVjaGVzIG9mIHRoZSBhZHZvY2F0ZXMgYW5kIHNvIHRoZSB0cmlhbCB3b3VsZCBub3QgYmUgZmluaXNoZWQuIEJ1dCBDaWNlcm8gcm9zZSBhbmQgc2FpZCB0aGVyZSB3YXMgbm8gbmVlZCBvZiBzcGVlY2hlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PZiB0aGUgc2V2ZW4gb3JhdGlvbnMgYWdhaW5zdCBWZXJyZXMgKGluY2x1ZGluZyB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gRGl2LiBDYWVjLiAxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRpdmluYXRpbyBpbiBDYWVjaWxpdW08L3RpdGxlPgogICAgICAgICAgICAgICA8L2JpYmw+KSBvbmx5IHRoZSBmaXJzdCB0d28gd2VyZSBkZWxpdmVyZWQ7IHRoZSBvdGhlcnMgd2VyZSBjb21waWxlZCBhZnRlciB0aGUgdmVyZGljdCBoYWQgYmVlbiBwcm9ub3VuY2VkLjwvbm90ZT4gYW5kIHRoZW4gYnJvdWdodCB1cCBhbmQgZXhhbWluZWQgaGlzIHdpdG5lc3NlcyBhbmQgYmFkZSB0aGUganVyb3JzIGNhc3QgdGhlaXIgdm90ZXMuIE5ldmVydGhlbGVzcywgbWFueSB3aXR0eSBzYXlpbmdzIG9mIGhpcyBpbiBjb25uZWN0aW9uIHdpdGggdGhpcyB0cmlhbCBhcmUgb24gcmVjb3JkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW5zdGFuY2UsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dmVycmVzPC9xPiBpcyB0aGUgUm9tYW4gd29yZCBmb3IgYSBjYXN0cmF0ZWQgPGdsb3NzPnBvcmtlcjwvZ2xvc3M+OyB3aGVuLCBhY2NvcmRpbmdseSwgYSBmcmVlZG1hbiBuYW1lZCBDYWVjaWxpdXMsIHdobyB3YXMgc3VzcGVjdGVkIG9mIEpld2lzaCBwcmFjdGljZXMsIHdhbnRlZCB0byB0aHJ1c3QgYXNpZGUgdGhlIFNpY2lsaWFuIGFjY3VzZXJzIGFuZCBkZW5vdW5jZSBWZXJyZXMgaGltc2VsZiwgQ2ljZXJvIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBoYXMgYSBKZXcgdG8gZG8gd2l0aCBhIFZlcnJlcz88L3E+IE1vcmVvdmVyLCBWZXJyZXMgaGFkIGEgeW91bmcgc29uLCB3aG8gaGFkIHRoZSBuYW1lIG9mIGxlbmRpbmcgaGltc2VsZiB0byBiYXNlIHByYWN0aWNlcy4gQWNjb3JkaW5nbHksIHdoZW4gQ2ljZXJvIHdhcyByZXZpbGVkIGJ5IFZlcnJlcyBmb3IgZWZmZW1pbmFjeSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3Ugb3VnaHQsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRvIHJldmlsZSB5b3VyIHNvbnMgYXQgaG9tZS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFnYWluLCB0aGUgb3JhdG9yIEhvcnRlbnNpdXMgZGlkIG5vdCB2ZW50dXJlIHRvIHBsZWFkIHRoZSBjYXVzZSBvZiBWZXJyZXMgZGlyZWN0bHksIGJ1dCB3YXMgcGVyc3VhZGVkIHRvIGFwcGVhciBmb3IgaGltIGF0IHRoZSBhc3Nlc3NtZW50IG9mIHRoZSBmaW5lLCBhbmQgcmVjZWl2ZWQgYW4gaXZvcnkgc3BoaW54IGFzIGhpcyByZXdhcmQ7IGFuZCB3aGVuIENpY2VybyBtYWRlIHNvbWUgb2JsaXF1ZSByZWZlcmVuY2UgdG8gaGltIGFuZCBIb3J0ZW5zaXVzIGRlY2xhcmVkIHRoYXQgaGUgaGFkIG5vIHNraWxsIGluIHNvbHZpbmcgcmlkZGxlcywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgeWV0LDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvdSBoYXN0IHRoZSBTcGhpbnggYXQgdGh5IGhvdXNlLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBwcm9wZXJ0eSwgdGhvdWdoIHN1ZmZpY2llbnQgdG8gbWVldCBoaXMgZXhwZW5zZXMsIHdhcyBuZXZlcnRoZWxlc3Mgc21hbGwsIGFuZCB0aGVyZWZvcmUgbWVuIHdvbmRlcmVkIHRoYXQgaGUgd291bGQgYWNjZXB0IG5laXRoZXIgZmVlcyBub3IgZ2lmdHMgZm9yIGhpcyBzZXJ2aWNlcyBhcyBhZHZvY2F0ZSwgYW5kIGFib3ZlIGFsbCB3aGVuIGhlIHVuZGVydG9vayB0aGUgcHJvc2VjdXRpb24gb2YgVmVycmVzLiBUaGlzIG1hbiwgd2hvIGhhZCBiZWVuIHByYWV0b3Igb2YgU2ljaWx5LCBhbmQgd2hvbSB0aGUgU2ljaWxpYW5zIHByb3NlY3V0ZWQgZm9yIG1hbnkgdmlsbGFpbm91cyBhY3RzLCBDaWNlcm8gY29udmljdGVkLCBub3QgYnkgc3BlYWtpbmcsIGJ1dCwgaW4gYSB3YXksIGJ5IGFjdHVhbGx5IG5vdCBzcGVha2luZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcHJhZXRvcnMgZmF2b3VyZWQgVmVycmVzLCBhbmQgYnkgbWFueSBvYnN0YWNsZXMgYW5kIGRlbGF5cyBoYWQgcHV0IG9mZiB0aGUgY2FzZSB1bnRpbCB0aGUgdmVyeSBsYXN0IGRheSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoYXQgaXMsIHRoZSBsYXN0IGRheSBvbiB3aGljaCB0aGUgY2FzZSBjb3VsZCBiZSB0cmllZCBkdXJpbmcgdGhhdCB5ZWFyLiBUaGUgY2l0eSBwcmFldG9yIGFscmVhZHkgZWxlY3RlZCBmb3IgdGhlIGNvbWluZyB5ZWFyICg2OSBCLkMuKSBmYXZvdXJlZCBWZXJyZXMsIGFuZCBIb3J0ZW5zaXVzLCB0aGUgYWR2b2NhdGUgb2YgVmVycmVzLCB3YXMgdG8gYmUgY29uc3VsIGluIHRoYXQgeWVhci4gSGUgdGhlcmVmb3JlIHVzZWQgZXZlcnkgYXJ0aWZpY2UgdG8gZGVsYXkgdGhlIGNhc2UuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFZlci4gMS4xLjMxIiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIFZlcnJlbTwvdGl0bGU+LCBpLiAxMCwgMzEgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHNpbmNlIGl0IHdhcyBjbGVhciB0aGF0IGEgZGF5J3MgdGltZSB3b3VsZCBub3QgYmUgZW5vdWdoIGZvciB0aGUgc3BlZWNoZXMgb2YgdGhlIGFkdm9jYXRlcyBhbmQgc28gdGhlIHRyaWFsIHdvdWxkIG5vdCBiZSBmaW5pc2hlZC4gQnV0IENpY2VybyByb3NlIGFuZCBzYWlkIHRoZXJlIHdhcyBubyBuZWVkIG9mIHNwZWVjaGVzLDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gVmVyLiAxLjEuMzEiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aW4gVmVycmVtPC90aXRsZT4sIGkuIDEwLCAzMSBmZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIFZlcnJlbTwvdGl0bGU+LCBpLiAxMCwgMzEgZmYuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PZiB0aGUgc2V2ZW4gb3JhdGlvbnMgYWdhaW5zdCBWZXJyZXMgKGluY2x1ZGluZyB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBEaXYuIENhZWMuIDEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZpbmF0aW8gaW4gQ2FlY2lsaXVtPC90aXRsZT4KICAgICAgICAgICAgICAgPC9iaWJsPikgb25seSB0aGUgZmlyc3QgdHdvIHdlcmUgZGVsaXZlcmVkOyB0aGUgb3RoZXJzIHdlcmUgY29tcGlsZWQgYWZ0ZXIgdGhlIHZlcmRpY3QgaGFkIGJlZW4gcHJvbm91bmNlZC48L25vdGU+IGFuZCB0aGVuIGJyb3VnaHQgdXAgYW5kIGV4YW1pbmVkIGhpcyB3aXRuZXNzZXMgYW5kIGJhZGUgdGhlIGp1cm9ycyBjYXN0IHRoZWlyIHZvdGVzLiBOZXZlcnRoZWxlc3MsIG1hbnkgd2l0dHkgc2F5aW5ncyBvZiBoaXMgaW4gY29ubmVjdGlvbiB3aXRoIHRoaXMgdHJpYWwgYXJlIG9uIHJlY29yZC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIERpdi4gQ2FlYy4gMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdmluYXRpbyBpbiBDYWVjaWxpdW08L3RpdGxlPgogICAgICAgICAgICAgICA8L2JpYmw+KSBvbmx5IHRoZSBmaXJzdCB0d28gd2VyZSBkZWxpdmVyZWQ7IHRoZSBvdGhlcnMgd2VyZSBjb21waWxlZCBhZnRlciB0aGUgdmVyZGljdCBoYWQgYmVlbiBwcm9ub3VuY2VkLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdmluYXRpbyBpbiBDYWVjaWxpdW08L3RpdGxlPgogICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnZlcnJlczwvcT4gaXMgdGhlIFJvbWFuIHdvcmQgZm9yIGEgY2FzdHJhdGVkIDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPnBvcmtlcjwvZ2xvc3M+OyB3aGVuLCBhY2NvcmRpbmdseSwgYSBmcmVlZG1hbiBuYW1lZCBDYWVjaWxpdXMsIHdobyB3YXMgc3VzcGVjdGVkIG9mIEpld2lzaCBwcmFjdGljZXMsIHdhbnRlZCB0byB0aHJ1c3QgYXNpZGUgdGhlIFNpY2lsaWFuIGFjY3VzZXJzIGFuZCBkZW5vdW5jZSBWZXJyZXMgaGltc2VsZiwgQ2ljZXJvIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGhhcyBhIEpldyB0byBkbyB3aXRoIGEgVmVycmVzPzwvcT4gTW9yZW92ZXIsIFZlcnJlcyBoYWQgYSB5b3VuZyBzb24sIHdobyBoYWQgdGhlIG5hbWUgb2YgbGVuZGluZyBoaW1zZWxmIHRvIGJhc2UgcHJhY3RpY2VzLiBBY2NvcmRpbmdseSwgd2hlbiBDaWNlcm8gd2FzIHJldmlsZWQgYnkgVmVycmVzIGZvciBlZmZlbWluYWN5LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91IG91Z2h0LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRvIHJldmlsZSB5b3VyIHNvbnMgYXQgaG9tZS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZ2FpbiwgdGhlIG9yYXRvciBIb3J0ZW5zaXVzIGRpZCBub3QgdmVudHVyZSB0byBwbGVhZCB0aGUgY2F1c2Ugb2YgVmVycmVzIGRpcmVjdGx5LCBidXQgd2FzIHBlcnN1YWRlZCB0byBhcHBlYXIgZm9yIGhpbSBhdCB0aGUgYXNzZXNzbWVudCBvZiB0aGUgZmluZSwgYW5kIHJlY2VpdmVkIGFuIGl2b3J5IHNwaGlueCBhcyBoaXMgcmV3YXJkOyBhbmQgd2hlbiBDaWNlcm8gbWFkZSBzb21lIG9ibGlxdWUgcmVmZXJlbmNlIHRvIGhpbSBhbmQgSG9ydGVuc2l1cyBkZWNsYXJlZCB0aGF0IGhlIGhhZCBubyBza2lsbCBpbiBzb2x2aW5nIHJpZGRsZXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgeWV0LDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aG91IGhhc3QgdGhlIFNwaGlueCBhdCB0aHkgaG91c2UuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gVmVycmVzIGhhZCB0aHVzIGJlZW4gY29udmljdGVkLCBDaWNlcm8gYXNzZXNzZWQgaGlzIGZpbmUgYXQgc2V2ZW4gaHVuZHJlZCBhbmQgZmlmdHkgdGhvdXNhbmQgZGVuYXJpaSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIG5vdGUgb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMy4yIiB2YWxpZD0ieWVzIj5paWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB3YXMgdGhlcmVmb3JlIGFjY3VzZWQgb2YgaGF2aW5nIGJlZW4gYnJpYmVkIHRvIG1ha2UgdGhlIGZpbmUgYSBsb3cgb25lLiBUaGUgU2ljaWxpYW5zLCBob3dldmVyLCB3ZXJlIGdyYXRlZnVsIHRvIGhpbSwgYW5kIHdoZW4gaGUgd2FzIGFlZGlsZSBicm91Z2h0IGhpbSBmcm9tIHRoZWlyIGlzbGFuZCBhbGwgc29ydHMgb2YgbGl2ZSBzdG9jayBhbmQgcHJvZHVjZTsgZnJvbSB0aGVzZSBoZSBkZXJpdmVkIG5vIHBlcnNvbmFsIHByb2ZpdCwgYnV0IHVzZWQgdGhlIGdlbmVyb3NpdHkgb2YgdGhlIGlzbGFuZGVycyBvbmx5IHRvIGxvd2VyIHRoZSBwcmljZSBvZiBwcm92aXNpb25zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFZlcnJlcyBoYWQgdGh1cyBiZWVuIGNvbnZpY3RlZCwgQ2ljZXJvIGFzc2Vzc2VkIGhpcyBmaW5lIGF0IHNldmVuIGh1bmRyZWQgYW5kIGZpZnR5IHRob3VzYW5kIGRlbmFyaWksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIG5vdGUgb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAzLjIiIHZhbGlkPSJ5ZXMiPmlpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHdhcyB0aGVyZWZvcmUgYWNjdXNlZCBvZiBoYXZpbmcgYmVlbiBicmliZWQgdG8gbWFrZSB0aGUgZmluZSBhIGxvdyBvbmUuIFRoZSBTaWNpbGlhbnMsIGhvd2V2ZXIsIHdlcmUgZ3JhdGVmdWwgdG8gaGltLCBhbmQgd2hlbiBoZSB3YXMgYWVkaWxlIGJyb3VnaHQgaGltIGZyb20gdGhlaXIgaXNsYW5kIGFsbCBzb3J0cyBvZiBsaXZlIHN0b2NrIGFuZCBwcm9kdWNlOyBmcm9tIHRoZXNlIGhlIGRlcml2ZWQgbm8gcGVyc29uYWwgcHJvZml0LCBidXQgdXNlZCB0aGUgZ2VuZXJvc2l0eSBvZiB0aGUgaXNsYW5kZXJzIG9ubHkgdG8gbG93ZXIgdGhlIHByaWNlIG9mIHByb3Zpc2lvbnMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMy4yIiB2YWxpZD0ieWVzIj5paWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBvd25lZCBhIHBsZWFzYW50IGNvdW50cnktc2VhdCBhdCBBcnBpbnVtLCBhbmQgaGFkIGEgZmFybSBuZWFyIE5hcGxlcyBhbmQgYW5vdGhlciBuZWFyIFBvbXBlaWksIGJvdGggc21hbGwuIEhpcyB3aWZlIFRlcmVudGlhIGJyb3VnaHQgaGltIGJlc2lkZXMgYSBkb3dyeSBvZiBhIGh1bmRyZWQgdGhvdXNhbmQgZGVuYXJpaSwgYW5kIGhlIHJlY2VpdmVkIGEgYmVxdWVzdCB3aGljaCBhbW91bnRlZCB0byBuaW5ldHkgdGhvdXNhbmQuIEZyb20gdGhlc2UgaGUgbGl2ZWQsIGluIGEgZ2VuZXJvdXMgYW5kIGF0IHRoZSBzYW1lIHRpbWUgbW9kZXN0IG1hbm5lciwgd2l0aCB0aGUgR3JlZWsgYW5kIFJvbWFuIG1lbiBvZiBsZXR0ZXJzIHdobyB3ZXJlIGhpcyBhc3NvY2lhdGVzLiBIZSByYXJlbHksIGlmIGV2ZXIsIGNhbWUgdG8gdGFibGUgYmVmb3JlIHN1bnNldCwgbm90IHNvIG11Y2ggb24gYWNjb3VudCBvZiBidXNpbmVzcywgYXMgYmVjYXVzZSBoaXMgc3RvbWFjaCBrZXB0IGhpbSBpbiBwb29yIGhlYWx0aC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gb3RoZXIgd2F5cywgdG9vLCBiZSB3YXMgZXhhY3QgYW5kIG92ZXItc2NydXB1bG91cyBpbiB0aGUgY2FyZSBvZiBoaXMgYm9keSwgc28gdGhhdCBoZSBhY3R1YWxseSB0b29rIGEgc2V0IG51bWJlciBvZiBydWJiaW5ncyBhbmQgd2Fsa3MuIEJ5IGNhcmVmdWxseSBtYW5hZ2luZyBoaXMgaGVhbHRoIGluIHRoaXMgd2F5IGhlIGtlcHQgaXQgZnJlZSBmcm9tIHNpY2tuZXNzIGFuZCBhYmxlIHRvIG1lZXQgdGhlIGRlbWFuZHMgb2YgbWFueSBncmVhdCBzdHJ1Z2dsZXMgYW5kIHRvaWxzLiBUaGUgaG91c2Ugd2hpY2ggaGFkIGJlZW4gaGlzIGZhdGhlcidzIGhlIG1hZGUgb3ZlciB0byBoaXMgYnJvdGhlciwgYW5kIGR3ZWx0IGhpbXNlbGYgbmVhciB0aGUgUGFsYXRpbmUgaGlsbCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBhIGhvdXNlIHB1cmNoYXNlZCBhZnRlciBoaXMgY29uc3Vsc2hpcCAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gRmFtLiA1LjYuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5hZCBmYW0uPC90aXRsZT4gdi4gNiwgMjwvYmlibD4pLjwvbm90ZT4gaW4gb3JkZXIgdGhhdCB0aG9zZSB3aG8gY2FtZSB0byBwYXkgdGhlaXIgY291cnQgdG8gaGltIG1pZ2h0IG5vdCBoYXZlIHRoZSB0cm91YmxlIG9mIGEgbG9uZyB3YWxrLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMzIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5NYXJpdXM8L3RpdGxlPiwgeHh4aWkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG1lbiBjYW1lIHRvIGhpcyBob3VzZSBldmVyeSBkYXkgdG8gcGF5IGhpbSBjb3VydCwgbm8gZmV3ZXIgdGhhbiBjYW1lIHRvIENyYXNzdXMgZm9yIGhpcyB3ZWFsdGggb3IgdG8gUG9tcGV5IGJlY2F1c2Ugb2YgaGlzIGluZmx1ZW5jZSB3aXRoIHRoZSBzb2xkaWVyeSwgYW5kIHRoZXNlIHdlcmUgdGhlIHR3byBncmVhdGVzdCBtZW4gYW1vbmcgdGhlIFJvbWFucyBhbmQgdGhlIG1vc3QgYWRtaXJlZC4gTmF5LCBQb21wZXkgYWN0dWFsbHkgcGFpZCBjb3VydCB0byBDaWNlcm8sIGFuZCBDaWNlcm8ncyBwb2xpdGljYWwgZWZmb3J0cyBjb250cmlidXRlZCBtdWNoIHRvd2FyZHMgUG9tcGV5J3MgcG93ZXIgYW5kIGZhbWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIG93bmVkIGEgcGxlYXNhbnQgY291bnRyeS1zZWF0IGF0IEFycGludW0sIGFuZCBoYWQgYSBmYXJtIG5lYXIgTmFwbGVzIGFuZCBhbm90aGVyIG5lYXIgUG9tcGVpaSwgYm90aCBzbWFsbC4gSGlzIHdpZmUgVGVyZW50aWEgYnJvdWdodCBoaW0gYmVzaWRlcyBhIGRvd3J5IG9mIGEgaHVuZHJlZCB0aG91c2FuZCBkZW5hcmlpLCBhbmQgaGUgcmVjZWl2ZWQgYSBiZXF1ZXN0IHdoaWNoIGFtb3VudGVkIHRvIG5pbmV0eSB0aG91c2FuZC4gRnJvbSB0aGVzZSBoZSBsaXZlZCwgaW4gYSBnZW5lcm91cyBhbmQgYXQgdGhlIHNhbWUgdGltZSBtb2Rlc3QgbWFubmVyLCB3aXRoIHRoZSBHcmVlayBhbmQgUm9tYW4gbWVuIG9mIGxldHRlcnMgd2hvIHdlcmUgaGlzIGFzc29jaWF0ZXMuIEhlIHJhcmVseSwgaWYgZXZlciwgY2FtZSB0byB0YWJsZSBiZWZvcmUgc3Vuc2V0LCBub3Qgc28gbXVjaCBvbiBhY2NvdW50IG9mIGJ1c2luZXNzLCBhcyBiZWNhdXNlIGhpcyBzdG9tYWNoIGtlcHQgaGltIGluIHBvb3IgaGVhbHRoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIG90aGVyIHdheXMsIHRvbywgYmUgd2FzIGV4YWN0IGFuZCBvdmVyLXNjcnVwdWxvdXMgaW4gdGhlIGNhcmUgb2YgaGlzIGJvZHksIHNvIHRoYXQgaGUgYWN0dWFsbHkgdG9vayBhIHNldCBudW1iZXIgb2YgcnViYmluZ3MgYW5kIHdhbGtzLiBCeSBjYXJlZnVsbHkgbWFuYWdpbmcgaGlzIGhlYWx0aCBpbiB0aGlzIHdheSBoZSBrZXB0IGl0IGZyZWUgZnJvbSBzaWNrbmVzcyBhbmQgYWJsZSB0byBtZWV0IHRoZSBkZW1hbmRzIG9mIG1hbnkgZ3JlYXQgc3RydWdnbGVzIGFuZCB0b2lscy4gVGhlIGhvdXNlIHdoaWNoIGhhZCBiZWVuIGhpcyBmYXRoZXIncyBoZSBtYWRlIG92ZXIgdG8gaGlzIGJyb3RoZXIsIGFuZCBkd2VsdCBoaW1zZWxmIG5lYXIgdGhlIFBhbGF0aW5lIGhpbGwsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBhIGhvdXNlIHB1cmNoYXNlZCBhZnRlciBoaXMgY29uc3Vsc2hpcCAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBGYW0uIDUuNi4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgZmFtLjwvdGl0bGU+IHYuIDYsIDI8L2JpYmw+KS48L25vdGU+IGluIG9yZGVyIHRoYXQgdGhvc2Ugd2hvIGNhbWUgdG8gcGF5IHRoZWlyIGNvdXJ0IHRvIGhpbSBtaWdodCBub3QgaGF2ZSB0aGUgdHJvdWJsZSBvZiBhIGxvbmcgd2Fsay48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEZhbS4gNS42LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBmYW0uPC90aXRsZT4gdi4gNiwgMjwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIGZhbS48L3RpdGxlPiB2LiA2LCAyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMzIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCB4eHhpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMzIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCB4eHhpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCB4eHhpaS4gMS48L3RyYW5zbGF0aW9uPg=="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBtZW4gY2FtZSB0byBoaXMgaG91c2UgZXZlcnkgZGF5IHRvIHBheSBoaW0gY291cnQsIG5vIGZld2VyIHRoYW4gY2FtZSB0byBDcmFzc3VzIGZvciBoaXMgd2VhbHRoIG9yIHRvIFBvbXBleSBiZWNhdXNlIG9mIGhpcyBpbmZsdWVuY2Ugd2l0aCB0aGUgc29sZGllcnksIGFuZCB0aGVzZSB3ZXJlIHRoZSB0d28gZ3JlYXRlc3QgbWVuIGFtb25nIHRoZSBSb21hbnMgYW5kIHRoZSBtb3N0IGFkbWlyZWQuIE5heSwgUG9tcGV5IGFjdHVhbGx5IHBhaWQgY291cnQgdG8gQ2ljZXJvLCBhbmQgQ2ljZXJvJ3MgcG9saXRpY2FsIGVmZm9ydHMgY29udHJpYnV0ZWQgbXVjaCB0b3dhcmRzIFBvbXBleSdzIHBvd2VyIGFuZCBmYW1lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFsdGhvdWdoIG1hbnkgbWVuIG9mIGltcG9ydGFuY2Ugc3Rvb2QgZm9yIHRoZSBwcmFldG9yc2hpcCBhbG9uZyB3aXRoIENpY2VybywgaGUgd2FzIGFwcG9pbnRlZCBmaXJzdCBvZiB0aGVtIGFsbDs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2NiBCLkMuIEVpZ2h0IHByYWV0b3JzIHdlcmUgYXBwb2ludGVkLCBhbmQgdGhlIG9uZSB3aG8gcmVjZWl2ZWQgbW9zdCB2b3RlcyB3YXMgbWFkZSBjaXR5IHByYWV0b3IsIG9yIGNoaWVmIG1hZ2lzdHJhdGUuPC9ub3RlPiBhbmQgbWVuIHRob3VnaHQgdGhhdCBoZSBtYW5hZ2VkIHRoZSBjYXNlcyB3aGljaCBjYW1lIGJlZm9yZSBoaW0gd2l0aCBpbnRlZ3JpdHkgYW5kIGZhaXJuZXNzLiBJdCBpcyBzYWlkLCB0b28sIHRoYXQgTGljaW5pdXMgTWFjZXIsIGEgbWFuIHdobyBoYWQgZ3JlYXQgcG93ZXIgaW4gdGhlIGNpdHkgb24gaGlzIG93biBhY2NvdW50IGFuZCBhbHNvIGVuam95ZWQgdGhlIGhlbHAgb2YgQ3Jhc3N1cywgd2FzIHRyaWVkIGJlZm9yZSBDaWNlcm8gZm9yIGZyYXVkLCBhbmQgdGhhdCwgcmVseWluZyB1cG9uIGhpcyBpbmZsdWVuY2UgYW5kIHRoZSBlZmZvcnRzIG1hZGUgaW4gaGlzIGJlaGFsZiwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+aGUgd2VudCBvZmYgaG9tZSB3aGlsZSB0aGUganVyb3JzIHdlcmUgc3RpbGwgdm90aW5nLCBoYXN0aWx5IHRyaW1tZWQgaGlzIGhhaXIgYW5kIHB1dCBvbiBhIHdoaXRlIHRvZ2EgaW4gdGhlIGJlbGllZiB0aGF0IGhlIGhhZCBiZWVuIGFjcXVpdHRlZCwgYW5kIHdhcyBnb2luZyBmb3J0aCBhZ2FpbiB0byB0aGUgZm9ydW07IGJ1dCBDcmFzc3VzIG1ldCBoaW0gYXQgdGhlIGhvdXNlLWRvb3IgYW5kIHRvbGQgaGltIHRoYXQgaGUgaGFkIGJlZW4gY29udmljdGVkIHVuYW5pbW91c2x5LCB3aGVyZXVwb24gaGUgdHVybmVkIGJhY2ssIGxheSBkb3duIHVwb24gaGlzIGJlZCwgYW5kIGRpZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgY2FzZSBicm91Z2h0IENpY2VybyB0aGUgcmVwdXRhdGlvbiBvZiBoYXZpbmcgYmVlbiBhIHNjcnVwdWxvdXMgcHJlc2lkaW5nIG9mZmljZXIuIEFnYWluLCB0aGVyZSB3YXMgVmF0aW5pdXMsIGEgbWFuIHdobyBoYWQgYSBoYXJzaCBtYW5uZXIgYW5kIG9uZSB3aGljaCBzaG93ZWQgY29udGVtcHQgZm9yIHRoZSBtYWdpc3RyYXRlcyBiZWZvcmUgd2hvbSBoZSBwbGVhZGVkOyBoaXMgbmVjayBhbHNvIHdhcyBjb3ZlcmVkIHdpdGggc3dlbGxpbmdzLiBBcyB0aGlzIG1hbiBvbmNlIHN0b29kIGF0IENpY2VybydzIHRyaWJ1bmFsIGFuZCBtYWRlIHNvbWUgcmVxdWVzdCBvZiBoaW0sIENpY2VybyBkaWQgbm90IGdyYW50IGl0IGF0IG9uY2UsIGJ1dCB0b29rIGEgbG9uZyB0aW1lIGZvciBkZWxpYmVyYXRpb24sIHdoZXJldXBvbiBWYXRpbml1cyBzYWlkIHRoYXQgaGUgaGltc2VsZiB3b3VsZCBub3QgaGF2ZSBzdHVjayBhdCB0aGUgbWF0dGVyIGhhZCBoZSBiZWVuIHByYWV0b3IuIEF0IHRoaXMgQ2ljZXJvIHR1cm5lZCB1cG9uIGhpbSBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgSSBoYXZlIG5vdCB0aGUgbmVjayB0aGF0IHlvdSBoYXZlLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbHRob3VnaCBtYW55IG1lbiBvZiBpbXBvcnRhbmNlIHN0b29kIGZvciB0aGUgcHJhZXRvcnNoaXAgYWxvbmcgd2l0aCBDaWNlcm8sIGhlIHdhcyBhcHBvaW50ZWQgZmlyc3Qgb2YgdGhlbSBhbGw7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2NiBCLkMuIEVpZ2h0IHByYWV0b3JzIHdlcmUgYXBwb2ludGVkLCBhbmQgdGhlIG9uZSB3aG8gcmVjZWl2ZWQgbW9zdCB2b3RlcyB3YXMgbWFkZSBjaXR5IHByYWV0b3IsIG9yIGNoaWVmIG1hZ2lzdHJhdGUuPC9ub3RlPiBhbmQgbWVuIHRob3VnaHQgdGhhdCBoZSBtYW5hZ2VkIHRoZSBjYXNlcyB3aGljaCBjYW1lIGJlZm9yZSBoaW0gd2l0aCBpbnRlZ3JpdHkgYW5kIGZhaXJuZXNzLiBJdCBpcyBzYWlkLCB0b28sIHRoYXQgTGljaW5pdXMgTWFjZXIsIGEgbWFuIHdobyBoYWQgZ3JlYXQgcG93ZXIgaW4gdGhlIGNpdHkgb24gaGlzIG93biBhY2NvdW50IGFuZCBhbHNvIGVuam95ZWQgdGhlIGhlbHAgb2YgQ3Jhc3N1cywgd2FzIHRyaWVkIGJlZm9yZSBDaWNlcm8gZm9yIGZyYXVkLCBhbmQgdGhhdCwgcmVseWluZyB1cG9uIGhpcyBpbmZsdWVuY2UgYW5kIHRoZSBlZmZvcnRzIG1hZGUgaW4gaGlzIGJlaGFsZiwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIHdlbnQgb2ZmIGhvbWUgd2hpbGUgdGhlIGp1cm9ycyB3ZXJlIHN0aWxsIHZvdGluZywgaGFzdGlseSB0cmltbWVkIGhpcyBoYWlyIGFuZCBwdXQgb24gYSB3aGl0ZSB0b2dhIGluIHRoZSBiZWxpZWYgdGhhdCBoZSBoYWQgYmVlbiBhY3F1aXR0ZWQsIGFuZCB3YXMgZ29pbmcgZm9ydGggYWdhaW4gdG8gdGhlIGZvcnVtOyBidXQgQ3Jhc3N1cyBtZXQgaGltIGF0IHRoZSBob3VzZS1kb29yIGFuZCB0b2xkIGhpbSB0aGF0IGhlIGhhZCBiZWVuIGNvbnZpY3RlZCB1bmFuaW1vdXNseSwgd2hlcmV1cG9uIGhlIHR1cm5lZCBiYWNrLCBsYXkgZG93biB1cG9uIGhpcyBiZWQsIGFuZCBkaWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgY2FzZSBicm91Z2h0IENpY2VybyB0aGUgcmVwdXRhdGlvbiBvZiBoYXZpbmcgYmVlbiBhIHNjcnVwdWxvdXMgcHJlc2lkaW5nIG9mZmljZXIuIEFnYWluLCB0aGVyZSB3YXMgVmF0aW5pdXMsIGEgbWFuIHdobyBoYWQgYSBoYXJzaCBtYW5uZXIgYW5kIG9uZSB3aGljaCBzaG93ZWQgY29udGVtcHQgZm9yIHRoZSBtYWdpc3RyYXRlcyBiZWZvcmUgd2hvbSBoZSBwbGVhZGVkOyBoaXMgbmVjayBhbHNvIHdhcyBjb3ZlcmVkIHdpdGggc3dlbGxpbmdzLiBBcyB0aGlzIG1hbiBvbmNlIHN0b29kIGF0IENpY2VybydzIHRyaWJ1bmFsIGFuZCBtYWRlIHNvbWUgcmVxdWVzdCBvZiBoaW0sIENpY2VybyBkaWQgbm90IGdyYW50IGl0IGF0IG9uY2UsIGJ1dCB0b29rIGEgbG9uZyB0aW1lIGZvciBkZWxpYmVyYXRpb24sIHdoZXJldXBvbiBWYXRpbml1cyBzYWlkIHRoYXQgaGUgaGltc2VsZiB3b3VsZCBub3QgaGF2ZSBzdHVjayBhdCB0aGUgbWF0dGVyIGhhZCBoZSBiZWVuIHByYWV0b3IuIEF0IHRoaXMgQ2ljZXJvIHR1cm5lZCB1cG9uIGhpbSBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBJIGhhdmUgbm90IHRoZSBuZWNrIHRoYXQgeW91IGhhdmUuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ud28gb3IgdGhyZWUgZGF5cyBiZWZvcmUgaGlzIHRlcm0gb2Ygb2ZmaWNlIGV4cGlyZWQsIE1hbmlsaXVzIHdhcyBicm91Z2h0IGJlZm9yZSBoaW0gb24gYSBjaGFyZ2Ugb2YgZnJhdWR1bGVudCBhY2NvdW50aW5nLiBUaGlzIE1hbmlsaXVzIGhhZCB0aGUgZ29vZCB3aWxsIGFuZCBlYWdlciBzdXBwb3J0IG9mIHRoZSBwZW9wbGUsIHNpbmNlIGl0IHdhcyB0aG91Z2h0IHRoYXQgaGUgd2FzIHByb3NlY3V0ZWQgb24gUG9tcGV5J3MgYWNjb3VudCwgYmVpbmcgYSBmcmllbmQgb2YgaGlzLiBPbiBoaXMgZGVtYW5kaW5nIHNldmVyYWwgZGF5cyBpbiB3aGljaCB0byBtYWtlIGhpcyBkZWZlbmNlLCBDaWNlcm8gZ3JhbnRlZCBoaW0gb25seSBvbmUsIGFuZCB0aGF0IHRoZSBuZXh0OyBhbmQgdGhlIHBlb3BsZSB3ZXJlIGluZGlnbmFudCBiZWNhdXNlIGl0IHdhcyBjdXN0b21hcnkgZm9yIHRoZSBwcmFldG9yIHRvIGdyYW50IHRlbiBkYXlzIGF0IGxlYXN0IHRvIHRoZSBhY2N1c2VkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiB0aGUgdHJpYnVuZXMgYnJvdWdodCBDaWNlcm8gdG8gdGhlIHJvc3RyYSBhbmQgZGVub3VuY2VkIGhpbSwgaGUgYmVnZ2VkIGZvciBhIGhlYXJpbmcsIGFuZCB0aGVuIHNhaWQgdGhhdCBoZSBoYWQgYWx3YXlzIHRyZWF0ZWQgZGVmZW5kYW50cywgc28gZmFyIGFzIHRoZSBsYXdzIGFsbG93ZWQsIHdpdGggY2xlbWVuY3kgYW5kIGtpbmRuZXNzLCBhbmQgdGhvdWdodCBpdCBhbiB1bmZvcnR1bmF0ZSB0aGluZyB0aGF0IE1hbmlsaXVzIHNob3VsZCBub3QgaGF2ZSB0aGlzIGFkdmFudGFnZTsgd2hlcmVmb3JlLCBzaW5jZSBvbmx5IG9uZSBkYXkgd2FzIGxlZnQgdG8gaGlzIGRpc3Bvc2FsIGFzIHByYWV0b3IsIGhlIGhhZCBwdXJwb3NlbHkgc2V0IHRoaXMgZGF5IGZvciB0aGUgdHJpYWwsIGFuZCBzdXJlbHkgaXQgd2FzIG5vdCB0aGUgcGFydCBvZiBvbmUgd2hvIHdpc2hlZCB0byBoZWxwIE1hbmlsaXVzIHRvIGRlZmVyIGl0IHRvIGFub3RoZXIgcHJhZXRvcidzIHRlcm0uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdvcmRzIHByb2R1Y2VkIGEgd29uZGVyZnVsIGNoYW5nZSBpbiB0aGUgZmVlbGluZ3Mgb2YgdGhlIHBlb3BsZSwgYW5kIHdpdGggbWFueSBleHByZXNzaW9ucyBvZiBhcHByb3ZhbCB0aGV5IGJlZ2dlZCBDaWNlcm8gdG8gYXNzdW1lIHRoZSBkZWZlbmNlIG9mIE1hbmlsaXVzLiBUaGlzIGhlIHdpbGxpbmdseSBjb25zZW50ZWQgdG8gZG8sIGNoaWVmbHkgZm9yIHRoZSBzYWtlIG9mIFBvbXBleSwgd2hvIHdhcyBhYnNlbnQsIGFuZCBvbmNlIG1vcmUgbW91bnRpbmcgdGhlIHJvc3RyYSBoYXJhbmd1ZWQgdGhlIHBlb3BsZSBhbmV3LCB2aWdvcm91c2x5IGF0dGFja2luZyB0aGUgb2xpZ2FyY2hpY2FsIHBhcnR5IGFuZCB0aG9zZSB3aG8gd2VyZSBqZWFsb3VzIG9mIFBvbXBleS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlR3byBvciB0aHJlZSBkYXlzIGJlZm9yZSBoaXMgdGVybSBvZiBvZmZpY2UgZXhwaXJlZCwgTWFuaWxpdXMgd2FzIGJyb3VnaHQgYmVmb3JlIGhpbSBvbiBhIGNoYXJnZSBvZiBmcmF1ZHVsZW50IGFjY291bnRpbmcuIFRoaXMgTWFuaWxpdXMgaGFkIHRoZSBnb29kIHdpbGwgYW5kIGVhZ2VyIHN1cHBvcnQgb2YgdGhlIHBlb3BsZSwgc2luY2UgaXQgd2FzIHRob3VnaHQgdGhhdCBoZSB3YXMgcHJvc2VjdXRlZCBvbiBQb21wZXkncyBhY2NvdW50LCBiZWluZyBhIGZyaWVuZCBvZiBoaXMuIE9uIGhpcyBkZW1hbmRpbmcgc2V2ZXJhbCBkYXlzIGluIHdoaWNoIHRvIG1ha2UgaGlzIGRlZmVuY2UsIENpY2VybyBncmFudGVkIGhpbSBvbmx5IG9uZSwgYW5kIHRoYXQgdGhlIG5leHQ7IGFuZCB0aGUgcGVvcGxlIHdlcmUgaW5kaWduYW50IGJlY2F1c2UgaXQgd2FzIGN1c3RvbWFyeSBmb3IgdGhlIHByYWV0b3IgdG8gZ3JhbnQgdGVuIGRheXMgYXQgbGVhc3QgdG8gdGhlIGFjY3VzZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSB0cmlidW5lcyBicm91Z2h0IENpY2VybyB0byB0aGUgcm9zdHJhIGFuZCBkZW5vdW5jZWQgaGltLCBoZSBiZWdnZWQgZm9yIGEgaGVhcmluZywgYW5kIHRoZW4gc2FpZCB0aGF0IGhlIGhhZCBhbHdheXMgdHJlYXRlZCBkZWZlbmRhbnRzLCBzbyBmYXIgYXMgdGhlIGxhd3MgYWxsb3dlZCwgd2l0aCBjbGVtZW5jeSBhbmQga2luZG5lc3MsIGFuZCB0aG91Z2h0IGl0IGFuIHVuZm9ydHVuYXRlIHRoaW5nIHRoYXQgTWFuaWxpdXMgc2hvdWxkIG5vdCBoYXZlIHRoaXMgYWR2YW50YWdlOyB3aGVyZWZvcmUsIHNpbmNlIG9ubHkgb25lIGRheSB3YXMgbGVmdCB0byBoaXMgZGlzcG9zYWwgYXMgcHJhZXRvciwgaGUgaGFkIHB1cnBvc2VseSBzZXQgdGhpcyBkYXkgZm9yIHRoZSB0cmlhbCwgYW5kIHN1cmVseSBpdCB3YXMgbm90IHRoZSBwYXJ0IG9mIG9uZSB3aG8gd2lzaGVkIHRvIGhlbHAgTWFuaWxpdXMgdG8gZGVmZXIgaXQgdG8gYW5vdGhlciBwcmFldG9yJ3MgdGVybS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdvcmRzIHByb2R1Y2VkIGEgd29uZGVyZnVsIGNoYW5nZSBpbiB0aGUgZmVlbGluZ3Mgb2YgdGhlIHBlb3BsZSwgYW5kIHdpdGggbWFueSBleHByZXNzaW9ucyBvZiBhcHByb3ZhbCB0aGV5IGJlZ2dlZCBDaWNlcm8gdG8gYXNzdW1lIHRoZSBkZWZlbmNlIG9mIE1hbmlsaXVzLiBUaGlzIGhlIHdpbGxpbmdseSBjb25zZW50ZWQgdG8gZG8sIGNoaWVmbHkgZm9yIHRoZSBzYWtlIG9mIFBvbXBleSwgd2hvIHdhcyBhYnNlbnQsIGFuZCBvbmNlIG1vcmUgbW91bnRpbmcgdGhlIHJvc3RyYSBoYXJhbmd1ZWQgdGhlIHBlb3BsZSBhbmV3LCB2aWdvcm91c2x5IGF0dGFja2luZyB0aGUgb2xpZ2FyY2hpY2FsIHBhcnR5IGFuZCB0aG9zZSB3aG8gd2VyZSBqZWFsb3VzIG9mIFBvbXBleS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IGhlIHdhcyBhZHZhbmNlZCB0byB0aGUgY29uc3Vsc2hpcCBubyBsZXNzIGJ5IHRoZSBhcmlzdG9jcmF0cyB0aGFuIGJ5IHRoZSBjb21tb24gcGVvcGxlLCBhbmQgaW4gdGhlIGludGVyZXN0cyBvZiB0aGUgY2l0eSwgYm90aCBwYXJ0aWVzIHNlY29uZGluZyBoaXMgZWZmb3J0cyBmb3IgdGhlIGZvbGxvd2luZyByZWFzb25zLiBUaGUgY2hhbmdlIHdoaWNoIFN1bGxhIGhhZCBtYWRlIGluIHRoZSBjb25zdGl0dXRpb24gYXQgZmlyc3QgYXBwZWFyZWQgYWJzdXJkLCBidXQgbm93IGl0IHNlZW1lZCB0byB0aGUgbWFqb3JpdHksIG93aW5nIHRvIGxhcHNlIG9mIHRpbWUgYW5kIHRoZWlyIGZhbWlsaWFyaXR5IHdpdGggaXQsIHRvIGFmZm9yZCBhdCBsYXN0IGEga2luZCBvZiBzZXR0bGVtZW50IHdoaWNoIHdhcyBub3QgdG8gYmUgZGVzcGlzZWQuIFRoZXJlIHdlcmUgdGhvc2UsIGhvd2V2ZXIsIHdobyBzb3VnaHQgdG8gYWdpdGF0ZSBhbmQgY2hhbmdlIHRoZSBleGlzdGluZyBzdGF0dXMgZm9yIHRoZSBzYWtlIG9mIHRoZWlyIG93biBnYWluLCBhbmQgbm90IGZvciB0aGUgYmVzdCBpbnRlcmVzdHMgb2YgdGhlIHN0YXRlLCB3aGlsZSBQb21wZXkgd2FzIHN0aWxsIGNhcnJ5aW5nIG9uIHdhciB3aXRoIHRoZSBraW5ncyBpbiBQb250dXMgYW5kIEFybWVuaWEsIGFuZCB0aGVyZSB3YXMgbm8gcG93ZXIgaW4gUm9tZSB3aGljaCB3YXMgYWJsZSB0byBjb3BlIHdpdGggdGhlIHJldm9sdXRpb25hcmllcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgaGFkIGZvciB0aGVpciBjaGllZiBhIG1hbiBvZiBib2xkLCBlbnRlcnByaXNpbmcsIGFuZCB2ZXJzYXRpbGUgY2hhcmFjdGVyLCBMdWNpdXMgQ2F0aWxpbmUsIHdobywgaW4gYWRkaXRpb24gdG8gb3RoZXIgZ3JlYXQgY3JpbWVzLCBoYWQgb25jZSBiZWVuIGFjY3VzZWQgb2YgZGVmbG93ZXJpbmcgaGlzIG93biBkYXVnaHRlciBhbmQgb2Yga2lsbGluZyBoaXMgb3duIGJyb3RoZXI7IGFuZCBmZWFyaW5nIHByb3NlY3V0aW9uIGZvciB0aGlzIG11cmRlciwgaGUgcGVyc3VhZGVkIFN1bGxhIHRvIHB1dCBoaXMgYnJvdGhlcidzIG5hbWUsIGFzIHRob3VnaCBoZSB3ZXJlIHN0aWxsIGFsaXZlLCBpbiB0aGUgbGlzdCBvZiB0aG9zZSB3aG8gd2VyZSB0byBiZSBwdXQgdG8gZGVhdGggdW5kZXIgcHJvc2NyaXB0aW9uLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDMyLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+U3VsbGE8L3RpdGxlPiwgeHh4aWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGFraW5nIHRoaXMgbWFuLCB0aGVuLCBhcyB0aGVpciBsZWFkZXIsIHRoZSBtaXNjcmVhbnRzIGdhdmUgdmFyaW91cyBwbGVkZ2VzIHRvIG9uZSBhbm90aGVyLCBvbmUgb2Ygd2hpY2ggd2FzIHRoZSBzYWNyaWZpY2Ugb2YgYSBtYW4gYW5kIHRoZSB0YXN0aW5nIG9mIGhpcyBmbGVzaC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuQy4gMzcuMzAuMyI+RGlvbiBDYXNzaXVzLCA8dGl0bGU+SGlzdC4gUm9tLjwvdGl0bGU+IHh4eHZpaS4gMzAsIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IE1vcmVvdmVyLCBDYXRpbGluZSBoYWQgY29ycnVwdGVkIGEgbGFyZ2UgcGFydCBvZiB0aGUgeW91bmcgbWVuIGluIHRoZSBjaXR5LCBzdXBwbHlpbmcgZWFjaCBvZiB0aGVtIGNvbnRpbnVhbGx5IHdpdGggYW11c2VtZW50cywgYmFucXVldHMsIGFuZCBhbW91cnMsIGFuZCBmdXJuaXNoaW5nIHdpdGhvdXQgc3RpbnQgdGhlIG1vbmV5IHRvIHNwZW5kIG9uIHRoZXNlIHRoaW5ncy4gQmVzaWRlcywgYWxsIEV0cnVyaWEgd2FzIHJvdXNlZCB0byByZXZvbHQsIGFzIHdlbGwgYXMgbW9zdCBvZiBDaXNhbHBpbmUgR2F1bC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIFJvbWUgd2FzIG1vc3QgZGFuZ2Vyb3VzbHkgZGlzcG9zZWQgdG93YXJkcyBjaGFuZ2Ugb24gYWNjb3VudCBvZiB0aGUgaXJyZWd1bGFyaXR5IGluIHRoZSBkaXN0cmlidXRpb24gb2YgcHJvcGVydHksIHNpbmNlIG1lbiBvZiB0aGUgaGlnaGVzdCByZXB1dGF0aW9uIGFuZCBzcGlyaXQgaGFkIGJlZ2dhcmVkIHRoZW1zZWx2ZXMgb24gc2hvd3MsIGZlYXN0cywgcHVyc3VpdCBvZiBvZmZpY2UsIGFuZCBidWlsZGluZ3MsIGFuZCByaWNoZXMgaGFkIHN0cmVhbWVkIGludG8gdGhlIGNvZmZlcnMgb2YgbG93LWJvcm4gYW5kIG1lYW4gbWVuLCBzbyB0aGF0IG1hdHRlcnMgbmVlZGVkIG9ubHkgYSBzbGlnaHQgaW1wdWxzZSB0byBkaXN0dXJiIHRoZW0sIGFuZCBpdCB3YXMgaW4gdGhlIHBvd2VyIG9mIGFueSBib2xkIG1hbiB0byBvdmVydGhyb3cgdGhlIGNvbW1vbndlYWx0aCwgd2hpY2ggb2YgaXRzZWxmIHdhcyBpbiBhIGRpc2Vhc2VkIGNvbmRpdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IGhlIHdhcyBhZHZhbmNlZCB0byB0aGUgY29uc3Vsc2hpcCBubyBsZXNzIGJ5IHRoZSBhcmlzdG9jcmF0cyB0aGFuIGJ5IHRoZSBjb21tb24gcGVvcGxlLCBhbmQgaW4gdGhlIGludGVyZXN0cyBvZiB0aGUgY2l0eSwgYm90aCBwYXJ0aWVzIHNlY29uZGluZyBoaXMgZWZmb3J0cyBmb3IgdGhlIGZvbGxvd2luZyByZWFzb25zLiBUaGUgY2hhbmdlIHdoaWNoIFN1bGxhIGhhZCBtYWRlIGluIHRoZSBjb25zdGl0dXRpb24gYXQgZmlyc3QgYXBwZWFyZWQgYWJzdXJkLCBidXQgbm93IGl0IHNlZW1lZCB0byB0aGUgbWFqb3JpdHksIG93aW5nIHRvIGxhcHNlIG9mIHRpbWUgYW5kIHRoZWlyIGZhbWlsaWFyaXR5IHdpdGggaXQsIHRvIGFmZm9yZCBhdCBsYXN0IGEga2luZCBvZiBzZXR0bGVtZW50IHdoaWNoIHdhcyBub3QgdG8gYmUgZGVzcGlzZWQuIFRoZXJlIHdlcmUgdGhvc2UsIGhvd2V2ZXIsIHdobyBzb3VnaHQgdG8gYWdpdGF0ZSBhbmQgY2hhbmdlIHRoZSBleGlzdGluZyBzdGF0dXMgZm9yIHRoZSBzYWtlIG9mIHRoZWlyIG93biBnYWluLCBhbmQgbm90IGZvciB0aGUgYmVzdCBpbnRlcmVzdHMgb2YgdGhlIHN0YXRlLCB3aGlsZSBQb21wZXkgd2FzIHN0aWxsIGNhcnJ5aW5nIG9uIHdhciB3aXRoIHRoZSBraW5ncyBpbiBQb250dXMgYW5kIEFybWVuaWEsIGFuZCB0aGVyZSB3YXMgbm8gcG93ZXIgaW4gUm9tZSB3aGljaCB3YXMgYWJsZSB0byBjb3BlIHdpdGggdGhlIHJldm9sdXRpb25hcmllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGhhZCBmb3IgdGhlaXIgY2hpZWYgYSBtYW4gb2YgYm9sZCwgZW50ZXJwcmlzaW5nLCBhbmQgdmVyc2F0aWxlIGNoYXJhY3RlciwgTHVjaXVzIENhdGlsaW5lLCB3aG8sIGluIGFkZGl0aW9uIHRvIG90aGVyIGdyZWF0IGNyaW1lcywgaGFkIG9uY2UgYmVlbiBhY2N1c2VkIG9mIGRlZmxvd2VyaW5nIGhpcyBvd24gZGF1Z2h0ZXIgYW5kIG9mIGtpbGxpbmcgaGlzIG93biBicm90aGVyOyBhbmQgZmVhcmluZyBwcm9zZWN1dGlvbiBmb3IgdGhpcyBtdXJkZXIsIGhlIHBlcnN1YWRlZCBTdWxsYSB0byBwdXQgaGlzIGJyb3RoZXIncyBuYW1lLCBhcyB0aG91Z2ggaGUgd2VyZSBzdGlsbCBhbGl2ZSwgaW4gdGhlIGxpc3Qgb2YgdGhvc2Ugd2hvIHdlcmUgdG8gYmUgcHV0IHRvIGRlYXRoIHVuZGVyIHByb3NjcmlwdGlvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMzIuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIHh4eGlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMzIuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIHh4eGlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3VsbGE8L3RpdGxlPiwgeHh4aWkuIDIuPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRha2luZyB0aGlzIG1hbiwgdGhlbiwgYXMgdGhlaXIgbGVhZGVyLCB0aGUgbWlzY3JlYW50cyBnYXZlIHZhcmlvdXMgcGxlZGdlcyB0byBvbmUgYW5vdGhlciwgb25lIG9mIHdoaWNoIHdhcyB0aGUgc2FjcmlmaWNlIG9mIGEgbWFuIGFuZCB0aGUgdGFzdGluZyBvZiBoaXMgZmxlc2guPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiAzNy4zMC4zIj5EaW9uIENhc3NpdXMsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhpc3QuIFJvbS48L3RpdGxlPiB4eHh2aWkuIDMwLCAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBNb3Jlb3ZlciwgQ2F0aWxpbmUgaGFkIGNvcnJ1cHRlZCBhIGxhcmdlIHBhcnQgb2YgdGhlIHlvdW5nIG1lbiBpbiB0aGUgY2l0eSwgc3VwcGx5aW5nIGVhY2ggb2YgdGhlbSBjb250aW51YWxseSB3aXRoIGFtdXNlbWVudHMsIGJhbnF1ZXRzLCBhbmQgYW1vdXJzLCBhbmQgZnVybmlzaGluZyB3aXRob3V0IHN0aW50IHRoZSBtb25leSB0byBzcGVuZCBvbiB0aGVzZSB0aGluZ3MuIEJlc2lkZXMsIGFsbCBFdHJ1cmlhIHdhcyByb3VzZWQgdG8gcmV2b2x0LCBhcyB3ZWxsIGFzIG1vc3Qgb2YgQ2lzYWxwaW5lIEdhdWwuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiAzNy4zMC4zIj5EaW9uIENhc3NpdXMsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhpc3QuIFJvbS48L3RpdGxlPiB4eHh2aWkuIDMwLCAzLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGlzdC4gUm9tLjwvdGl0bGU+IHh4eHZpaS4gMzAsIDMuPC90cmFuc2xhdGlvbj4="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBSb21lIHdhcyBtb3N0IGRhbmdlcm91c2x5IGRpc3Bvc2VkIHRvd2FyZHMgY2hhbmdlIG9uIGFjY291bnQgb2YgdGhlIGlycmVndWxhcml0eSBpbiB0aGUgZGlzdHJpYnV0aW9uIG9mIHByb3BlcnR5LCBzaW5jZSBtZW4gb2YgdGhlIGhpZ2hlc3QgcmVwdXRhdGlvbiBhbmQgc3Bpcml0IGhhZCBiZWdnYXJlZCB0aGVtc2VsdmVzIG9uIHNob3dzLCBmZWFzdHMsIHB1cnN1aXQgb2Ygb2ZmaWNlLCBhbmQgYnVpbGRpbmdzLCBhbmQgcmljaGVzIGhhZCBzdHJlYW1lZCBpbnRvIHRoZSBjb2ZmZXJzIG9mIGxvdy1ib3JuIGFuZCBtZWFuIG1lbiwgc28gdGhhdCBtYXR0ZXJzIG5lZWRlZCBvbmx5IGEgc2xpZ2h0IGltcHVsc2UgdG8gZGlzdHVyYiB0aGVtLCBhbmQgaXQgd2FzIGluIHRoZSBwb3dlciBvZiBhbnkgYm9sZCBtYW4gdG8gb3ZlcnRocm93IHRoZSBjb21tb253ZWFsdGgsIHdoaWNoIG9mIGl0c2VsZiB3YXMgaW4gYSBkaXNlYXNlZCBjb25kaXRpb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIENhdGlsaW5lIHdpc2hlZCB0byBvYnRhaW4gZmlyc3QgYSBzdHJvbmcgYmFzZSBvZiBvcGVyYXRpb25zLCBhbmQgdGhlcmVmb3JlIHN1ZWQgZm9yIHRoZSBjb25zdWxzaGlwOyBhbmQgaGUgaGFkIGJyaWdodCBob3BlcyB0aGF0IGhlIHdvdWxkIHNoYXJlIHRoZSBjb25zdWxzaGlwIHdpdGggQ2FpdXMgQW50b25pdXMsIGEgbWFuIHdobywgb2YgaGltc2VsZiwgd291bGQgcHJvYmFibHkgbm90IHRha2UgdGhlIGxlYWQgZWl0aGVyIGZvciBnb29kIG9yIGZvciBiYWQsIGJ1dCB3b3VsZCBhZGQgc3RyZW5ndGggdG8gYW5vdGhlciB3aG8gdG9vayB0aGUgbGVhZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TW9zdCBvZiB0aGUgYmV0dGVyIGNsYXNzIG9mIGNpdGl6ZW5zIHdlcmUgYXdhcmUgb2YgdGhpcywgYW5kIHRoZXJlZm9yZSBwdXQgZm9yd2FyZCBDaWNlcm8gZm9yIHRoZSBjb25zdWxzaGlwLCBhbmQgYXMgdGhlIHBlb3BsZSByZWFkaWx5IGFjY2VwdGVkIGhpbSwgQ2F0aWxpbmUgd2FzIGRlZmVhdGVkLCBhbmQgQ2ljZXJvIGFuZCBDYWl1cyBBbnRvbml1cyB3ZXJlIGVsZWN0ZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDYzIEIuQy48L25vdGU+IEFuZCB5ZXQgQ2ljZXJvIHdhcyB0aGUgb25seSBvbmUgb2YgdGhlIGNhbmRpZGF0ZXMgd2hvIHdhcyB0aGUgc29uLCBub3Qgb2YgYSBzZW5hdG9yLCBidXQgb2YgYSBrbmlnaHQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgQ2F0aWxpbmUgd2lzaGVkIHRvIG9idGFpbiBmaXJzdCBhIHN0cm9uZyBiYXNlIG9mIG9wZXJhdGlvbnMsIGFuZCB0aGVyZWZvcmUgc3VlZCBmb3IgdGhlIGNvbnN1bHNoaXA7IGFuZCBoZSBoYWQgYnJpZ2h0IGhvcGVzIHRoYXQgaGUgd291bGQgc2hhcmUgdGhlIGNvbnN1bHNoaXAgd2l0aCBDYWl1cyBBbnRvbml1cywgYSBtYW4gd2hvLCBvZiBoaW1zZWxmLCB3b3VsZCBwcm9iYWJseSBub3QgdGFrZSB0aGUgbGVhZCBlaXRoZXIgZm9yIGdvb2Qgb3IgZm9yIGJhZCwgYnV0IHdvdWxkIGFkZCBzdHJlbmd0aCB0byBhbm90aGVyIHdobyB0b29rIHRoZSBsZWFkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlIGJldHRlciBjbGFzcyBvZiBjaXRpemVucyB3ZXJlIGF3YXJlIG9mIHRoaXMsIGFuZCB0aGVyZWZvcmUgcHV0IGZvcndhcmQgQ2ljZXJvIGZvciB0aGUgY29uc3Vsc2hpcCwgYW5kIGFzIHRoZSBwZW9wbGUgcmVhZGlseSBhY2NlcHRlZCBoaW0sIENhdGlsaW5lIHdhcyBkZWZlYXRlZCwgYW5kIENpY2VybyBhbmQgQ2FpdXMgQW50b25pdXMgd2VyZSBlbGVjdGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDYzIEIuQy48L25vdGU+IEFuZCB5ZXQgQ2ljZXJvIHdhcyB0aGUgb25seSBvbmUgb2YgdGhlIGNhbmRpZGF0ZXMgd2hvIHdhcyB0aGUgc29uLCBub3Qgb2YgYSBzZW5hdG9yLCBidXQgb2YgYSBrbmlnaHQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzY2hlbWVzIG9mIENhdGlsaW5lIHdlcmUgc3RpbGwgdG8gcmVtYWluIGNvbmNlYWxlZCBmcm9tIHRoZSBtdWx0aXR1ZGUsIGJ1dCBncmVhdCBwcmVsaW1pbmFyeSBzdHJ1Z2dsZXMgYXdhaXRlZCB0aGUgY29uc3Vsc2hpcCBvZiBDaWNlcm8uIEZvciwgaW4gdGhlIGZpcnN0IHBsYWNlLCB0aG9zZSB3aG8gd2VyZSBwcmV2ZW50ZWQgZnJvbSBob2xkaW5nIG9mZmljZSBieSB0aGUgbGF3cyBvZiBTdWxsYSwgYW5kIHRoZXkgd2VyZSBuZWl0aGVyIGZldyBub3Igd2Vhaywgc3VlZCBmb3Igb2ZmaWNlcyBhbmQgdHJpZWQgdG8gd2luIHRoZSBmYXZvdXIgb2YgdGhlIHBlb3BsZSwgbWFraW5nIG1hbnkgY2hhcmdlcyBhZ2FpbnN0IHRoZSB0eXJhbm55IG9mIFN1bGxhIHdoaWNoIHdlcmUganVzdCBhbmQgdHJ1ZSwgaW5kZWVkLCBidXQgZGlzdHVyYmluZyB0aGUgZ292ZXJubWVudCBhdCBhbiBpbXByb3BlciBhbmQgdW5zZWFzb25hYmxlIHRpbWU7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCwgaW4gdGhlIHNlY29uZCBwbGFjZSwgdGhlIHRyaWJ1bmVzIHdlcmUgaW50cm9kdWNpbmcgbGF3cyB0byB0aGUgc2FtZSBwdXJwb3NlLCBhcHBvaW50aW5nIGEgY29tbWlzc2lvbiBvZiB0ZW4gbWVuIHdpdGggdW5saW1pdGVkIHBvd2VycywgdG8gd2hvbSB3YXMgY29tbWl0dGVkLCBhcyBzdXByZW1lIG1hc3RlcnMgb2YgYWxsIEl0YWx5LCBvZiBhbGwgU3lyaWEsIGFuZCBvZiBhbGwgdGhlIHRlcnJpdG9yaWVzIHdoaWNoIFBvbXBleSBoYWQgbGF0ZWx5IGFkZGVkIHRvIHRoZSBlbXBpcmUsIHRoZSByaWdodCB0byBzZWxsIHRoZSBwdWJsaWMgbGFuZHMsIHRvIHRyeSB3aG9tIHRoZXkgcGxlYXNlZCwgdG8gc2VuZCBpbnRvIGV4aWxlLCB0byBzZXR0bGUgY2l0aWVzLCB0byB0YWtlIG1vbmV5cyBmcm9tIHRoZSBwdWJsaWMgdHJlYXN1cnksIGFuZCB0byBsZXZ5IGFuZCBtYWludGFpbiBhcyBtYW55IHNvbGRpZXJzIGFzIHRoZXkgd2FudGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgbWFueSBvZiB0aGUgcHJvbWluZW50IG1lbiBhbHNvIHdlcmUgaW4gZmF2b3VyIG9mIHRoZSBsYXcsIGFuZCBmb3JlbW9zdCBhbW9uZyB0aGVtIEFudG9uaXVzIHRoZSBjb2xsZWFndWUgb2YgQ2ljZXJvLCB3aG8gZXhwZWN0ZWQgdG8gYmUgb25lIG9mIHRoZSB0ZW4uIEl0IHdhcyB0aG91Z2h0IGFsc28gdGhhdCBoZSBrbmV3IGFib3V0IHRoZSBjb25zcGlyYWN5IG9mIENhdGlsaW5lIGFuZCB3YXMgbm90IGF2ZXJzZSB0byBpdCwgb3dpbmcgdG8gdGhlIG1hZ25pdHVkZSBvZiBoaXMgZGVidHM7IGFuZCB0aGlzIHdhcyB3aGF0IGdhdmUgbW9zdCBhbGFybSB0byB0aGUgbm9ibGVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNjaGVtZXMgb2YgQ2F0aWxpbmUgd2VyZSBzdGlsbCB0byByZW1haW4gY29uY2VhbGVkIGZyb20gdGhlIG11bHRpdHVkZSwgYnV0IGdyZWF0IHByZWxpbWluYXJ5IHN0cnVnZ2xlcyBhd2FpdGVkIHRoZSBjb25zdWxzaGlwIG9mIENpY2Vyby4gRm9yLCBpbiB0aGUgZmlyc3QgcGxhY2UsIHRob3NlIHdobyB3ZXJlIHByZXZlbnRlZCBmcm9tIGhvbGRpbmcgb2ZmaWNlIGJ5IHRoZSBsYXdzIG9mIFN1bGxhLCBhbmQgdGhleSB3ZXJlIG5laXRoZXIgZmV3IG5vciB3ZWFrLCBzdWVkIGZvciBvZmZpY2VzIGFuZCB0cmllZCB0byB3aW4gdGhlIGZhdm91ciBvZiB0aGUgcGVvcGxlLCBtYWtpbmcgbWFueSBjaGFyZ2VzIGFnYWluc3QgdGhlIHR5cmFubnkgb2YgU3VsbGEgd2hpY2ggd2VyZSBqdXN0IGFuZCB0cnVlLCBpbmRlZWQsIGJ1dCBkaXN0dXJiaW5nIHRoZSBnb3Zlcm5tZW50IGF0IGFuIGltcHJvcGVyIGFuZCB1bnNlYXNvbmFibGUgdGltZTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCwgaW4gdGhlIHNlY29uZCBwbGFjZSwgdGhlIHRyaWJ1bmVzIHdlcmUgaW50cm9kdWNpbmcgbGF3cyB0byB0aGUgc2FtZSBwdXJwb3NlLCBhcHBvaW50aW5nIGEgY29tbWlzc2lvbiBvZiB0ZW4gbWVuIHdpdGggdW5saW1pdGVkIHBvd2VycywgdG8gd2hvbSB3YXMgY29tbWl0dGVkLCBhcyBzdXByZW1lIG1hc3RlcnMgb2YgYWxsIEl0YWx5LCBvZiBhbGwgU3lyaWEsIGFuZCBvZiBhbGwgdGhlIHRlcnJpdG9yaWVzIHdoaWNoIFBvbXBleSBoYWQgbGF0ZWx5IGFkZGVkIHRvIHRoZSBlbXBpcmUsIHRoZSByaWdodCB0byBzZWxsIHRoZSBwdWJsaWMgbGFuZHMsIHRvIHRyeSB3aG9tIHRoZXkgcGxlYXNlZCwgdG8gc2VuZCBpbnRvIGV4aWxlLCB0byBzZXR0bGUgY2l0aWVzLCB0byB0YWtlIG1vbmV5cyBmcm9tIHRoZSBwdWJsaWMgdHJlYXN1cnksIGFuZCB0byBsZXZ5IGFuZCBtYWludGFpbiBhcyBtYW55IHNvbGRpZXJzIGFzIHRoZXkgd2FudGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBtYW55IG9mIHRoZSBwcm9taW5lbnQgbWVuIGFsc28gd2VyZSBpbiBmYXZvdXIgb2YgdGhlIGxhdywgYW5kIGZvcmVtb3N0IGFtb25nIHRoZW0gQW50b25pdXMgdGhlIGNvbGxlYWd1ZSBvZiBDaWNlcm8sIHdobyBleHBlY3RlZCB0byBiZSBvbmUgb2YgdGhlIHRlbi4gSXQgd2FzIHRob3VnaHQgYWxzbyB0aGF0IGhlIGtuZXcgYWJvdXQgdGhlIGNvbnNwaXJhY3kgb2YgQ2F0aWxpbmUgYW5kIHdhcyBub3QgYXZlcnNlIHRvIGl0LCBvd2luZyB0byB0aGUgbWFnbml0dWRlIG9mIGhpcyBkZWJ0czsgYW5kIHRoaXMgd2FzIHdoYXQgZ2F2ZSBtb3N0IGFsYXJtIHRvIHRoZSBub2JsZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYWxhcm0gQ2ljZXJvIGZpcnN0IHNvdWdodCB0byBhbGxheSBieSBnZXR0aW5nIHRoZSBwcm92aW5jZSBvZiBNYWNlZG9uaWEgdm90ZWQgdG8gaGlzIGNvbGxlYWd1ZSwgd2hpbGUgaGUgaGltc2VsZiBkZWNsaW5lZCB0aGUgcHJvZmZlcmVkIHByb3ZpbmNlIG9mIEdhdWw7IGFuZCBieSB0aGlzIGZhdm91ciBoZSBpbmR1Y2VkIEFudG9uaXVzLCBsaWtlIGEgaGlyZWQgYWN0b3IsIHRvIHBsYXkgdGhlIHNlY29uZCByb2xlIHRvIGhpbSBpbiBkZWZlbmNlIG9mIHRoZWlyIGNvdW50cnkuIFRoZW4sIGFzIHNvb24gYXMgQW50b25pdXMgaGFkIGJlZW4gY2F1Z2h0IGFuZCB3YXMgdHJhY3RhYmxlLCBDaWNlcm8gb3Bwb3NlZCBoaW1zZWxmIHdpdGggbW9yZSBjb3VyYWdlIHRvIHRoZSBpbm5vdmF0b3JzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgaGUgZGVub3VuY2VkIHRoZSBwcm9wb3NlZCBsYXcgaW4gdGhlIHNlbmF0ZSBhdCBncmVhdCBsZW5ndGgsIGFuZCBzbyB0ZXJyaWZpZWQgdGhlIHZlcnkgcHJvbW90ZXJzIG9mIGl0IHRoYXQgdGhleSBoYWQgbm8gcmVwbHkgdG8gbWFrZSB0byBoaW0uIEFuZCB3aGVuIHRoZXkgbWFkZSBhIHNlY29uZCBhdHRlbXB0IGFuZCBhZnRlciBmdWxsIHByZXBhcmF0aW9uIHN1bW1vbmVkIHRoZSBjb25zdWxzIHRvIGFwcGVhciBiZWZvcmUgdGhlIHBlb3BsZSwgQ2ljZXJvIGhhZCBub3QgdGhlIHNsaWdodGVzdCBmZWFyLCBidXQgYmlkZGluZyB0aGUgc2VuYXRlIGZvbGxvdyBoaW0gYW5kIGxlYWRpbmcgdGhlIHdheSwgaGUgbm90IG9ubHkgZ290IHRoZSBsYXcgcmVqZWN0ZWQsIGJ1dCBhbHNvIGluZHVjZWQgdGhlIHRyaWJ1bmVzIHRvIGRlc2lzdCBmcm9tIHRoZSByZXN0IG9mIHRoZWlyIG1lYXN1cmVzLCBzbyBvdmVycG93ZXJlZCB3ZXJlIHRoZXkgYnkgaGlzIGVsb3F1ZW5jZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIHRocmVlIG9yYXRpb25zIDx0aXRsZT5kZSBsZWdlIEFncmFyaWE8L3RpdGxlPiwgd2hpY2ggaGF2ZSBjb21lIGRvd24gdG8gdXMgYWxtb3N0IGludGFjdC48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYWxhcm0gQ2ljZXJvIGZpcnN0IHNvdWdodCB0byBhbGxheSBieSBnZXR0aW5nIHRoZSBwcm92aW5jZSBvZiBNYWNlZG9uaWEgdm90ZWQgdG8gaGlzIGNvbGxlYWd1ZSwgd2hpbGUgaGUgaGltc2VsZiBkZWNsaW5lZCB0aGUgcHJvZmZlcmVkIHByb3ZpbmNlIG9mIEdhdWw7IGFuZCBieSB0aGlzIGZhdm91ciBoZSBpbmR1Y2VkIEFudG9uaXVzLCBsaWtlIGEgaGlyZWQgYWN0b3IsIHRvIHBsYXkgdGhlIHNlY29uZCByb2xlIHRvIGhpbSBpbiBkZWZlbmNlIG9mIHRoZWlyIGNvdW50cnkuIFRoZW4sIGFzIHNvb24gYXMgQW50b25pdXMgaGFkIGJlZW4gY2F1Z2h0IGFuZCB3YXMgdHJhY3RhYmxlLCBDaWNlcm8gb3Bwb3NlZCBoaW1zZWxmIHdpdGggbW9yZSBjb3VyYWdlIHRvIHRoZSBpbm5vdmF0b3JzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBkZW5vdW5jZWQgdGhlIHByb3Bvc2VkIGxhdyBpbiB0aGUgc2VuYXRlIGF0IGdyZWF0IGxlbmd0aCwgYW5kIHNvIHRlcnJpZmllZCB0aGUgdmVyeSBwcm9tb3RlcnMgb2YgaXQgdGhhdCB0aGV5IGhhZCBubyByZXBseSB0byBtYWtlIHRvIGhpbS4gQW5kIHdoZW4gdGhleSBtYWRlIGEgc2Vjb25kIGF0dGVtcHQgYW5kIGFmdGVyIGZ1bGwgcHJlcGFyYXRpb24gc3VtbW9uZWQgdGhlIGNvbnN1bHMgdG8gYXBwZWFyIGJlZm9yZSB0aGUgcGVvcGxlLCBDaWNlcm8gaGFkIG5vdCB0aGUgc2xpZ2h0ZXN0IGZlYXIsIGJ1dCBiaWRkaW5nIHRoZSBzZW5hdGUgZm9sbG93IGhpbSBhbmQgbGVhZGluZyB0aGUgd2F5LCBoZSBub3Qgb25seSBnb3QgdGhlIGxhdyByZWplY3RlZCwgYnV0IGFsc28gaW5kdWNlZCB0aGUgdHJpYnVuZXMgdG8gZGVzaXN0IGZyb20gdGhlIHJlc3Qgb2YgdGhlaXIgbWVhc3VyZXMsIHNvIG92ZXJwb3dlcmVkIHdlcmUgdGhleSBieSBoaXMgZWxvcXVlbmNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSB0aHJlZSBvcmF0aW9ucyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5kZSBsZWdlIEFncmFyaWE8L3RpdGxlPiwgd2hpY2ggaGF2ZSBjb21lIGRvd24gdG8gdXMgYWxtb3N0IGludGFjdC48L25vdGU+CgkJCSAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmRlIGxlZ2UgQWdyYXJpYTwvdGl0bGU+LCB3aGljaCBoYXZlIGNvbWUgZG93biB0byB1cyBhbG1vc3QgaW50YWN0LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIG1hbiBiZXlvbmQgYWxsIG90aGVycyBzaG93ZWQgdGhlIFJvbWFucyBob3cgZ3JlYXQgYSBjaGFybSBlbG9xdWVuY2UgYWRkcyB0byB0aGUgcmlnaHQsIGFuZCB0aGF0IGp1c3RpY2UgaXMgaW52aW5jaWJsZSBpZiBpdCBpcyBjb3JyZWN0bHkgcHV0IGluIHdvcmRzLCBhbmQgdGhhdCBpdCBiZWhvb3ZlcyB0aGUgY2FyZWZ1bCBzdGF0ZXNtYW4gYWx3YXlzIGluIGhpcyBhY3RzIHRvIGNob29zZSB0aGUgcmlnaHQgaW5zdGVhZCBvZiB0aGUgYWdyZWVhYmxlLCBhbmQgaW4gaGlzIHdvcmRzIHRvIHRha2UgYXdheSBhbGwgdmV4YXRpb3VzIGZlYXR1cmVzIGZyb20gd2hhdCBpcyBhZHZhbnRhZ2VvdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkEgcHJvb2Ygb2YgdGhlIGNoYXJtIG9mIGhpcyBkaXNjb3Vyc2UgbWF5IGJlIGZvdW5kIGluIGFuIGluY2lkZW50IG9mIGhpcyBjb25zdWxzaGlwIGNvbm5lY3RlZCB3aXRoIHRoZSBwdWJsaWMgc3BlY3RhY2xlcy4gSW4gZWFybGllciB0aW1lcywgaXQgc2VlbXMsIHRoZSBtZW4gb2YgdGhlIGVxdWVzdHJpYW4gb3JkZXIgd2VyZSBtaW5nbGVkIHdpdGggdGhlIG11bHRpdHVkZXMgaW4gdGhlIHRoZWF0cmVzIGFuZCBzYXcgdGhlIHNwZWN0YWNsZXMgYWxvbmcgd2l0aCB0aGUgcGVvcGxlLCBzZWF0ZWQgYXMgY2hhbmNlIHdvdWxkIGhhdmUgaXQ7IE1hcmN1cyBPdGhvIHdhcyB0aGUgZmlyc3QgdG8gc2VwYXJhdGUgaW4gcG9pbnQgb2YgaG9ub3VyIHRoZSBrbmlnaHRzIGZyb20gdGhlIHJlc3Qgb2YgdGhlIGNpdGl6ZW5zLCB3aGljaCBoZSBkaWQgd2hlbiBoZSB3YXMgcHJhZXRvciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JdCB3YXMgaW4gNjcgQi5DLiwgZm91ciB5ZWFycyBiZWZvcmUgQ2ljZXJvJ3MgY29uc3Vsc2hpcCwgdGhhdCBMdWNpdXMgUm9zY2l1cyBPdGhvLCBhcyB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGludHJvZHVjZWQgaGlzIGxhdyBnaXZpbmcgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5lcXVpdGVzPC9mb3JlaWduPiBhIHNwZWNpYWwgcGxhY2UgYXQgdGhlIHNwZWN0YWNsZXMsIG5hbWVseSwgdGhlIGZvdXJ0ZWVuIHJvd3Mgb2Ygc2VhdHMgbmV4dCB0aG9zZSBvZiB0aGUgc2VuYXRvcnMuIFRoZSBsYXcsIGhvd2V2ZXIsIGhhZCBvbmx5IHJlY2VudGx5IGJlZW4gZW5hY3RlZC48L25vdGU+IGFuZCBnYXZlIHRoZW0gYSBwYXJ0aWN1bGFyIHBsYWNlIG9mIHRoZWlyIG93biBhdCB0aGUgc3BlY3RhY2xlcywgd2hpY2ggdGhleSBzdGlsbCByZXRhaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUgdG9vayB0aGlzIGFzIGEgbWFyayBvZiBkaXNob25vdXIgdG8gdGhlbXNlbHZlcywgYW5kIHdoZW4gT3RobyBhcHBlYXJlZCBpbiB0aGUgdGhlYXRyZSB0aGV5IGhpc3NlZCBoaW0gaW5zdWx0aW5nbHksIHdoaWxlIHRoZSBrbmlnaHRzIHJlY2VpdmVkIGhpbSB3aXRoIGxvdWQgYXBwbGF1c2UuIFRoZSBwZW9wbGUgcmVuZXdlZCBhbmQgaW5jcmVhc2VkIHRoZWlyIGhpc3NlcywgYW5kIHRoZW4gdGhlIGtuaWdodHMgdGhlaXIgYXBwbGF1c2UuIEFmdGVyIHRoaXMgdGhleSB0dXJuZWQgdXBvbiBvbmUgYW5vdGhlciB3aXRoIHJldmlsaW5nIHdvcmRzLCBhbmQgZGlzb3JkZXIgcmVpZ25lZCBpbiB0aGUgdGhlYXRyZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDaWNlcm8gaGVhcmQgb2YgdGhpcyBoZSBjYW1lIGFuZCBzdW1tb25lZCB0aGUgcGVvcGxlIHRvIHRoZSB0ZW1wbGUgb2YgQmVsbG9uYSwgd2hlcmUgaGUgcmVidWtlZCBhbmQgZXhob3J0ZWQgdGhlbSwgd2hlcmV1cG9uIHRoZXkgd2VudCBiYWNrIGFnYWluIHRvIHRoZSB0aGVhdHJlIGFuZCBhcHBsYXVkZWQgT3RobyBsb3VkbHksIGFuZCB2aWVkIHdpdGggdGhlIGtuaWdodHMgaW4gc2hvd2luZyBoaW0gaG9ub3VyIGFuZCBlc3RlZW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgbWFuIGJleW9uZCBhbGwgb3RoZXJzIHNob3dlZCB0aGUgUm9tYW5zIGhvdyBncmVhdCBhIGNoYXJtIGVsb3F1ZW5jZSBhZGRzIHRvIHRoZSByaWdodCwgYW5kIHRoYXQganVzdGljZSBpcyBpbnZpbmNpYmxlIGlmIGl0IGlzIGNvcnJlY3RseSBwdXQgaW4gd29yZHMsIGFuZCB0aGF0IGl0IGJlaG9vdmVzIHRoZSBjYXJlZnVsIHN0YXRlc21hbiBhbHdheXMgaW4gaGlzIGFjdHMgdG8gY2hvb3NlIHRoZSByaWdodCBpbnN0ZWFkIG9mIHRoZSBhZ3JlZWFibGUsIGFuZCBpbiBoaXMgd29yZHMgdG8gdGFrZSBhd2F5IGFsbCB2ZXhhdGlvdXMgZmVhdHVyZXMgZnJvbSB3aGF0IGlzIGFkdmFudGFnZW91cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkEgcHJvb2Ygb2YgdGhlIGNoYXJtIG9mIGhpcyBkaXNjb3Vyc2UgbWF5IGJlIGZvdW5kIGluIGFuIGluY2lkZW50IG9mIGhpcyBjb25zdWxzaGlwIGNvbm5lY3RlZCB3aXRoIHRoZSBwdWJsaWMgc3BlY3RhY2xlcy4gSW4gZWFybGllciB0aW1lcywgaXQgc2VlbXMsIHRoZSBtZW4gb2YgdGhlIGVxdWVzdHJpYW4gb3JkZXIgd2VyZSBtaW5nbGVkIHdpdGggdGhlIG11bHRpdHVkZXMgaW4gdGhlIHRoZWF0cmVzIGFuZCBzYXcgdGhlIHNwZWN0YWNsZXMgYWxvbmcgd2l0aCB0aGUgcGVvcGxlLCBzZWF0ZWQgYXMgY2hhbmNlIHdvdWxkIGhhdmUgaXQ7IE1hcmN1cyBPdGhvIHdhcyB0aGUgZmlyc3QgdG8gc2VwYXJhdGUgaW4gcG9pbnQgb2YgaG9ub3VyIHRoZSBrbmlnaHRzIGZyb20gdGhlIHJlc3Qgb2YgdGhlIGNpdGl6ZW5zLCB3aGljaCBoZSBkaWQgd2hlbiBoZSB3YXMgcHJhZXRvciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IHdhcyBpbiA2NyBCLkMuLCBmb3VyIHllYXJzIGJlZm9yZSBDaWNlcm8ncyBjb25zdWxzaGlwLCB0aGF0IEx1Y2l1cyBSb3NjaXVzIE90aG8sIGFzIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgaW50cm9kdWNlZCBoaXMgbGF3IGdpdmluZyB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZXF1aXRlczwvZm9yZWlnbj4gYSBzcGVjaWFsIHBsYWNlIGF0IHRoZSBzcGVjdGFjbGVzLCBuYW1lbHksIHRoZSBmb3VydGVlbiByb3dzIG9mIHNlYXRzIG5leHQgdGhvc2Ugb2YgdGhlIHNlbmF0b3JzLiBUaGUgbGF3LCBob3dldmVyLCBoYWQgb25seSByZWNlbnRseSBiZWVuIGVuYWN0ZWQuPC9ub3RlPiBhbmQgZ2F2ZSB0aGVtIGEgcGFydGljdWxhciBwbGFjZSBvZiB0aGVpciBvd24gYXQgdGhlIHNwZWN0YWNsZXMsIHdoaWNoIHRoZXkgc3RpbGwgcmV0YWluLiAKCQkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmVxdWl0ZXM8L2ZvcmVpZ24+IGEgc3BlY2lhbCBwbGFjZSBhdCB0aGUgc3BlY3RhY2xlcywgbmFtZWx5LCB0aGUgZm91cnRlZW4gcm93cyBvZiBzZWF0cyBuZXh0IHRob3NlIG9mIHRoZSBzZW5hdG9ycy4gVGhlIGxhdywgaG93ZXZlciwgaGFkIG9ubHkgcmVjZW50bHkgYmVlbiBlbmFjdGVkLjwvdHJhbnNsYXRpb24+"
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUgdG9vayB0aGlzIGFzIGEgbWFyayBvZiBkaXNob25vdXIgdG8gdGhlbXNlbHZlcywgYW5kIHdoZW4gT3RobyBhcHBlYXJlZCBpbiB0aGUgdGhlYXRyZSB0aGV5IGhpc3NlZCBoaW0gaW5zdWx0aW5nbHksIHdoaWxlIHRoZSBrbmlnaHRzIHJlY2VpdmVkIGhpbSB3aXRoIGxvdWQgYXBwbGF1c2UuIFRoZSBwZW9wbGUgcmVuZXdlZCBhbmQgaW5jcmVhc2VkIHRoZWlyIGhpc3NlcywgYW5kIHRoZW4gdGhlIGtuaWdodHMgdGhlaXIgYXBwbGF1c2UuIEFmdGVyIHRoaXMgdGhleSB0dXJuZWQgdXBvbiBvbmUgYW5vdGhlciB3aXRoIHJldmlsaW5nIHdvcmRzLCBhbmQgZGlzb3JkZXIgcmVpZ25lZCBpbiB0aGUgdGhlYXRyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ2ljZXJvIGhlYXJkIG9mIHRoaXMgaGUgY2FtZSBhbmQgc3VtbW9uZWQgdGhlIHBlb3BsZSB0byB0aGUgdGVtcGxlIG9mIEJlbGxvbmEsIHdoZXJlIGhlIHJlYnVrZWQgYW5kIGV4aG9ydGVkIHRoZW0sIHdoZXJldXBvbiB0aGV5IHdlbnQgYmFjayBhZ2FpbiB0byB0aGUgdGhlYXRyZSBhbmQgYXBwbGF1ZGVkIE90aG8gbG91ZGx5LCBhbmQgdmllZCB3aXRoIHRoZSBrbmlnaHRzIGluIHNob3dpbmcgaGltIGhvbm91ciBhbmQgZXN0ZWVtLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2F0aWxpbmUgYW5kIGhpcyBmZWxsb3ctY29uc3BpcmF0b3JzLCB3aG8gYXQgZmlyc3Qgd2VyZSBjb3dlZCBhbmQgdGVycmlmaWVkLCBiZWdhbiBvbmNlIG1vcmUgdG8gdGFrZSBjb3VyYWdlLCBhbmQgYXNzZW1ibGluZyB0aGVtc2VsdmVzIHRvZ2V0aGVyIGV4aG9ydGVkIG9uZSBhbm90aGVyIHRvIHRha2UgbWF0dGVycyBpbiBoYW5kIG1vcmUgYm9sZGx5IGJlZm9yZSBQb21wZXkgY2FtZSBiYWNrLCBhbmQgaGUgd2FzIHNhaWQgdG8gYmUgbm93IHJldHVybmluZyB3aXRoIGhpcyBhcm15LiBJdCB3YXMgdGhlIG9sZCBzb2xkaWVycyBvZiBTdWxsYSwgaG93ZXZlciwgd2hvIHdlcmUgbW9zdCBvZiBhbGwgdXJnaW5nIENhdGlsaW5lIG9uIHRvIGFjdGlvbi4gVGhlc2Ugd2VyZSB0byBiZSBmb3VuZCBpbiBhbGwgcGFydHMgb2YgSXRhbHksIGJ1dCB0aGUgZ3JlYXRlc3QgbnVtYmVycyBhbmQgdGhlIG1vc3Qgd2FybGlrZSBvZiB0aGVtIGhhZCBiZWVuIHNjYXR0ZXJlZCBhbW9uZyB0aGUgY2l0aWVzIG9mIEV0cnVyaWEsIGFuZCB3ZXJlIGFnYWluIGRyZWFtaW5nIG9mIHJvYmJpbmcgYW5kIHBsdW5kZXJpbmcgdGhlIHdlYWx0aCB0aGF0IGxheSByZWFkeSB0byBoYW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBtZW4sIEkgc2F5LCB3aXRoIE1hbmxpdXMgZm9yIGEgbGVhZGVyLCBvbmUgb2YgdGhlIG1lbiB3aG8gaGFkIHNlcnZlZCB3aXRoIGRpc3RpbmN0aW9uIHVuZGVyIFN1bGxhLCBhc3NvY2lhdGVkIHRoZW1zZWx2ZXMgd2l0aCBDYXRpbGluZSBhbmQgY2FtZSB0byBSb21lIHRvIHRha2UgcGFydCBpbiB0aGUgY29uc3VsYXIgZWxlY3Rpb25zLiBGb3IgQ2F0aWxpbmUgd2FzIGFnYWluIGEgY2FuZGlkYXRlIGZvciB0aGUgY29uc3Vsc2hpcCwgYW5kIGhhZCBkZXRlcm1pbmVkIHRvIGtpbGwgQ2ljZXJvIGluIHRoZSB2ZXJ5IHR1bXVsdCBvZiB0aGUgZWxlY3Rpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgZXZlbiB0aGUgaGVhdmVubHkgcG93ZXJzIHNlZW1lZCwgYnkgZWFydGhxdWFrZXMgYW5kIHRodW5kZXJib2x0cyBhbmQgYXBwYXJpdGlvbnMsIHRvIGZvcmVzaG93IHdoYXQgd2FzIGNvbWluZyB0byBwYXNzLiBBbmQgdGhlcmUgd2VyZSBhbHNvIGh1bWFuIHRlc3RpbW9uaWVzIHdoaWNoIHdlcmUgdHJ1ZSwgaW5kZWVkLCBidXQgbm90IHN1ZmZpY2llbnQgZm9yIHRoZSBjb252aWN0aW9uIG9mIGEgbWFuIG9mIHJlcHV0YXRpb24gYW5kIGdyZWF0IHBvd2VyIGxpa2UgQ2F0aWxpbmUuIEZvciB0aGlzIHJlYXNvbiBDaWNlcm8gcG9zdHBvbmVkIHRoZSBkYXkgb2YgdGhlIGVsZWN0aW9ucywgYW5kIHN1bW1vbmluZyBDYXRpbGluZSB0byB0aGUgc2VuYXRlLCBleGFtaW5lZCBoaW0gY29uY2VybmluZyB3aGF0IHdhcyByZXBvcnRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhdGlsaW5lLCB0aGlua2luZyB0aGF0IHRoZXJlIHdlcmUgbWFueSBpbiB0aGUgc2VuYXRlIHdobyB3ZXJlIGRlc2lyb3VzIG9mIGEgcmV2b2x1dGlvbiwgYW5kIGF0IHRoZSBzYW1lIHRpbWUgbWFraW5nIGEgZGlzcGxheSBvZiBoaW1zZWxmIHRvIHRoZSBjb25zcGlyYXRvcnMsIGdhdmUgQ2ljZXJvIHRoZSBhbnN3ZXIgb2YgYSBtYWRtYW46IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBkcmVhZGZ1bCB0aGluZywgcHJheSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW0gSSBkb2luZywgaWYsIHdoZW4gdGhlcmUgYXJlIHR3byBib2RpZXMsIG9uZSBsZWFuIGFuZCB3YXN0ZWQsIGJ1dCB3aXRoIGEgaGVhZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPlVudW0gZGViaWxlLCBpbmZpcm1vIGNhcGl0ZTwvZm9yZWlnbj4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIE11ci4gNTEiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlPnBybyBNdXJlbmE8L3RpdGxlPiwgMjUsIDUxPC9iaWJsPikuPC9ub3RlPiBhbmQgdGhlIG90aGVyIGhlYWRsZXNzLCBidXQgc3Ryb25nIGFuZCBsYXJnZSwgSSBteXNlbGYgYmVjb21lIGEgaGVhZCBmb3IgdGhpcz88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UgdGhpcyByaWRkbGUgb2YgQ2F0aWxpbmUncyByZWZlcnJlZCB0byB0aGUgc2VuYXRlIGFuZCB0aGUgcGVvcGxlLCBDaWNlcm8gd2FzIGFsbCB0aGUgbW9yZSBhbGFybWVkLCBhbmQgaGUgd29yZSBhIGJyZWFzdHBsYXRlIHdoZW4gYWxsIHRoZSBub2JsZXMgYW5kIG1hbnkgb2YgdGhlIHlvdW5nIG1lbiBlc2NvcnRlZCBoaW0gZnJvbSBoaXMgaG91c2UgdG8gdGhlIENhbXB1cyBNYXJ0aXVzLiBNb3Jlb3ZlciwgaGUgcHVycG9zZWx5IGFsbG93ZWQgdGhlIHNwZWN0YXRvcnMgdG8gZ2V0IGEgZ2xpbXBzZSBvZiBoaXMgYnJlYXN0cGxhdGUgYnkgbG9vc2luZyBoaXMgdHVuaWMgZnJvbSBoaXMgc2hvdWxkZXJzLCB0aHVzIHNob3dpbmcgdGhlbSBoaXMgcGVyaWwuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUgd2VyZSBpbmNlbnNlZCBhbmQgcmFsbGllZCBhYm91dCBoaW07IGFuZCBmaW5hbGx5LCB3aGVuIHRoZXkgdm90ZWQsIHRoZXkgcmVqZWN0ZWQgQ2F0aWxpbmUgb25jZSBtb3JlLCBhbmQgZWxlY3RlZCBTaWxhbnVzIGFuZCBNdXJlbmEgY29uc3Vscy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gb3IgdGhlIHllYXIgNjIgQi5DLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhdGlsaW5lIGFuZCBoaXMgZmVsbG93LWNvbnNwaXJhdG9ycywgd2hvIGF0IGZpcnN0IHdlcmUgY293ZWQgYW5kIHRlcnJpZmllZCwgYmVnYW4gb25jZSBtb3JlIHRvIHRha2UgY291cmFnZSwgYW5kIGFzc2VtYmxpbmcgdGhlbXNlbHZlcyB0b2dldGhlciBleGhvcnRlZCBvbmUgYW5vdGhlciB0byB0YWtlIG1hdHRlcnMgaW4gaGFuZCBtb3JlIGJvbGRseSBiZWZvcmUgUG9tcGV5IGNhbWUgYmFjaywgYW5kIGhlIHdhcyBzYWlkIHRvIGJlIG5vdyByZXR1cm5pbmcgd2l0aCBoaXMgYXJteS4gSXQgd2FzIHRoZSBvbGQgc29sZGllcnMgb2YgU3VsbGEsIGhvd2V2ZXIsIHdobyB3ZXJlIG1vc3Qgb2YgYWxsIHVyZ2luZyBDYXRpbGluZSBvbiB0byBhY3Rpb24uIFRoZXNlIHdlcmUgdG8gYmUgZm91bmQgaW4gYWxsIHBhcnRzIG9mIEl0YWx5LCBidXQgdGhlIGdyZWF0ZXN0IG51bWJlcnMgYW5kIHRoZSBtb3N0IHdhcmxpa2Ugb2YgdGhlbSBoYWQgYmVlbiBzY2F0dGVyZWQgYW1vbmcgdGhlIGNpdGllcyBvZiBFdHJ1cmlhLCBhbmQgd2VyZSBhZ2FpbiBkcmVhbWluZyBvZiByb2JiaW5nIGFuZCBwbHVuZGVyaW5nIHRoZSB3ZWFsdGggdGhhdCBsYXkgcmVhZHkgdG8gaGFuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiwgSSBzYXksIHdpdGggTWFubGl1cyBmb3IgYSBsZWFkZXIsIG9uZSBvZiB0aGUgbWVuIHdobyBoYWQgc2VydmVkIHdpdGggZGlzdGluY3Rpb24gdW5kZXIgU3VsbGEsIGFzc29jaWF0ZWQgdGhlbXNlbHZlcyB3aXRoIENhdGlsaW5lIGFuZCBjYW1lIHRvIFJvbWUgdG8gdGFrZSBwYXJ0IGluIHRoZSBjb25zdWxhciBlbGVjdGlvbnMuIEZvciBDYXRpbGluZSB3YXMgYWdhaW4gYSBjYW5kaWRhdGUgZm9yIHRoZSBjb25zdWxzaGlwLCBhbmQgaGFkIGRldGVybWluZWQgdG8ga2lsbCBDaWNlcm8gaW4gdGhlIHZlcnkgdHVtdWx0IG9mIHRoZSBlbGVjdGlvbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBldmVuIHRoZSBoZWF2ZW5seSBwb3dlcnMgc2VlbWVkLCBieSBlYXJ0aHF1YWtlcyBhbmQgdGh1bmRlcmJvbHRzIGFuZCBhcHBhcml0aW9ucywgdG8gZm9yZXNob3cgd2hhdCB3YXMgY29taW5nIHRvIHBhc3MuIEFuZCB0aGVyZSB3ZXJlIGFsc28gaHVtYW4gdGVzdGltb25pZXMgd2hpY2ggd2VyZSB0cnVlLCBpbmRlZWQsIGJ1dCBub3Qgc3VmZmljaWVudCBmb3IgdGhlIGNvbnZpY3Rpb24gb2YgYSBtYW4gb2YgcmVwdXRhdGlvbiBhbmQgZ3JlYXQgcG93ZXIgbGlrZSBDYXRpbGluZS4gRm9yIHRoaXMgcmVhc29uIENpY2VybyBwb3N0cG9uZWQgdGhlIGRheSBvZiB0aGUgZWxlY3Rpb25zLCBhbmQgc3VtbW9uaW5nIENhdGlsaW5lIHRvIHRoZSBzZW5hdGUsIGV4YW1pbmVkIGhpbSBjb25jZXJuaW5nIHdoYXQgd2FzIHJlcG9ydGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRpbGluZSwgdGhpbmtpbmcgdGhhdCB0aGVyZSB3ZXJlIG1hbnkgaW4gdGhlIHNlbmF0ZSB3aG8gd2VyZSBkZXNpcm91cyBvZiBhIHJldm9sdXRpb24sIGFuZCBhdCB0aGUgc2FtZSB0aW1lIG1ha2luZyBhIGRpc3BsYXkgb2YgaGltc2VsZiB0byB0aGUgY29uc3BpcmF0b3JzLCBnYXZlIENpY2VybyB0aGUgYW5zd2VyIG9mIGEgbWFkbWFuOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBkcmVhZGZ1bCB0aGluZywgcHJheSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hbSBJIGRvaW5nLCBpZiwgd2hlbiB0aGVyZSBhcmUgdHdvIGJvZGllcywgb25lIGxlYW4gYW5kIHdhc3RlZCwgYnV0IHdpdGggYSBoZWFkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlVudW0gZGViaWxlLCBpbmZpcm1vIGNhcGl0ZTwvZm9yZWlnbj4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gTXVyLiA1MSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5wcm8gTXVyZW5hPC90aXRsZT4sIDI1LCA1MTwvYmlibD4pLjwvbm90ZT4gYW5kIHRoZSBvdGhlciBoZWFkbGVzcywgYnV0IHN0cm9uZyBhbmQgbGFyZ2UsIEkgbXlzZWxmIGJlY29tZSBhIGhlYWQgZm9yIHRoaXM/PC9xPiAKCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+VW51bSBkZWJpbGUsIGluZmlybW8gY2FwaXRlPC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBNdXIuIDUxIiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBybyBNdXJlbmE8L3RpdGxlPiwgMjUsIDUxPC9iaWJsPikuPC9ub3RlPiBhbmQgdGhlIG90aGVyIGhlYWRsZXNzLCBidXQgc3Ryb25nIGFuZCBsYXJnZSwgSSBteXNlbGYgYmVjb21lIGEgaGVhZCBmb3IgdGhpcz88Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5VbnVtIGRlYmlsZSwgaW5maXJtbyBjYXBpdGU8L2ZvcmVpZ24+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIE11ci4gNTEiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIE11cmVuYTwvdGl0bGU+LCAyNSwgNTE8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5wcm8gTXVyZW5hPC90aXRsZT4sIDI1LCA1MTwvdHJhbnNsYXRpb24+"
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIHRoaXMgcmlkZGxlIG9mIENhdGlsaW5lJ3MgcmVmZXJyZWQgdG8gdGhlIHNlbmF0ZSBhbmQgdGhlIHBlb3BsZSwgQ2ljZXJvIHdhcyBhbGwgdGhlIG1vcmUgYWxhcm1lZCwgYW5kIGhlIHdvcmUgYSBicmVhc3RwbGF0ZSB3aGVuIGFsbCB0aGUgbm9ibGVzIGFuZCBtYW55IG9mIHRoZSB5b3VuZyBtZW4gZXNjb3J0ZWQgaGltIGZyb20gaGlzIGhvdXNlIHRvIHRoZSBDYW1wdXMgTWFydGl1cy4gTW9yZW92ZXIsIGhlIHB1cnBvc2VseSBhbGxvd2VkIHRoZSBzcGVjdGF0b3JzIHRvIGdldCBhIGdsaW1wc2Ugb2YgaGlzIGJyZWFzdHBsYXRlIGJ5IGxvb3NpbmcgaGlzIHR1bmljIGZyb20gaGlzIHNob3VsZGVycywgdGh1cyBzaG93aW5nIHRoZW0gaGlzIHBlcmlsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUgd2VyZSBpbmNlbnNlZCBhbmQgcmFsbGllZCBhYm91dCBoaW07IGFuZCBmaW5hbGx5LCB3aGVuIHRoZXkgdm90ZWQsIHRoZXkgcmVqZWN0ZWQgQ2F0aWxpbmUgb25jZSBtb3JlLCBhbmQgZWxlY3RlZCBTaWxhbnVzIGFuZCBNdXJlbmEgY29uc3Vscy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciA2MiBCLkMuPC9ub3RlPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3QgbG9uZyBhZnRlciB0aGlzLCB3aGVuIENhdGlsaW5lJ3Mgc29sZGllcnMgaW4gRXRydXJpYSB3ZXJlIGFscmVhZHkgYXNzZW1ibGluZyBhbmQgZm9ybWluZyBpbnRvIGNvbXBhbmllcywgYW5kIHdoZW4gdGhlIGRheSBzZXQgZm9yIHRoZWlyIGF0dGFjayB3YXMgbmVhciwgdGhlcmUgY2FtZSB0byB0aGUgaG91c2Ugb2YgQ2ljZXJvIGF0IG1pZG5pZ2h0IG1lbiB3aG8gd2VyZSB0aGUgbGVhZGluZyBhbmQgbW9zdCBwb3dlcmZ1bCBSb21hbnMsIE1hcmN1cyBDcmFzc3VzLCBNYXJjdXMgTWFyY2VsbHVzLCBhbmQgU2NpcGlvIE1ldGVsbHVzOyBhbmQga25vY2tpbmcgYXQgdGhlIGRvb3IgYW5kIHN1bW1vbmluZyB0aGUgZG9vcmtlZXBlciwgdGhleSBiYWRlIGhpbSB3YWtlIENpY2VybyBhbmQgdGVsbCBoaW0gdGhleSB3ZXJlIHRoZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVpciBidXNpbmVzcyB3YXMgd2hhdCBJIHNoYWxsIG5vdyByZWxhdGUuIEFmdGVyIENyYXNzdXMgaGFkIGRpbmVkLCBoaXMgZG9vcmtlZXBlciBoYW5kZWQgaGltIHNvbWUgbGV0dGVycyB3aGljaCBhbiB1bmtub3duIG1hbiBoYWQgYnJvdWdodDsgdGhleSB3ZXJlIGFkZHJlc3NlZCB0byBkaWZmZXJlbnQgcGVyc29ucywgYW5kIG9uZSwgd2hpY2ggaGFkIG5vIHNpZ25hdHVyZSwgd2FzIGZvciBDcmFzc3VzIGhpbXNlbGYuIENyYXNzdXMgcmVhZCB0aGlzIGxldHRlciBvbmx5LCBhbmQgc2luY2UgaXRzIGNvbnRlbnRzIHRvbGQgaGltIHRoYXQgdGhlcmUgd2FzIHRvIGJlIG11Y2ggYmxvb2RzaGVkIGNhdXNlZCBieSBDYXRpbGluZSwgYW5kIGFkdmlzZWQgaGltIHRvIGVzY2FwZSBzZWNyZXRseSBmcm9tIHRoZSBjaXR5LCBoZSBkaWQgbm90IG9wZW4gdGhlIHJlc3QsIGJ1dCBjYW1lIGF0IG9uY2UgdG8gQ2ljZXJvLCB0ZXJyaWZpZWQgYnkgdGhlIGRhbmdlciwgYW5kIHNlZWtpbmcgdG8gZnJlZSBoaW1zZWxmIHNvbWV3aGF0IGZyb20gY2hhcmdlcyB0aGF0IGhhZCBiZWVuIG1hZGUgYWdhaW5zdCBoaW0gb24gYWNjb3VudCBvZiBoaXMgZnJpZW5kc2hpcCBmb3IgQ2F0aWxpbmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDEzLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q3Jhc3N1czwvdGl0bGU+LCB4aWlpIDM8L2JpYmw+LiBDaWNlcm8ncyB0cmVhdGlzZSBvbiBoaXMgY29uc3Vsc2hpcCwgdGhlcmUgcmVmZXJyZWQgdG8sIHdhcyB3cml0dGVuIGluIEdyZWVrLCBhbmQgaXMgbm90IGV4dGFudC4gPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IGxvbmcgYWZ0ZXIgdGhpcywgd2hlbiBDYXRpbGluZSdzIHNvbGRpZXJzIGluIEV0cnVyaWEgd2VyZSBhbHJlYWR5IGFzc2VtYmxpbmcgYW5kIGZvcm1pbmcgaW50byBjb21wYW5pZXMsIGFuZCB3aGVuIHRoZSBkYXkgc2V0IGZvciB0aGVpciBhdHRhY2sgd2FzIG5lYXIsIHRoZXJlIGNhbWUgdG8gdGhlIGhvdXNlIG9mIENpY2VybyBhdCBtaWRuaWdodCBtZW4gd2hvIHdlcmUgdGhlIGxlYWRpbmcgYW5kIG1vc3QgcG93ZXJmdWwgUm9tYW5zLCBNYXJjdXMgQ3Jhc3N1cywgTWFyY3VzIE1hcmNlbGx1cywgYW5kIFNjaXBpbyBNZXRlbGx1czsgYW5kIGtub2NraW5nIGF0IHRoZSBkb29yIGFuZCBzdW1tb25pbmcgdGhlIGRvb3JrZWVwZXIsIHRoZXkgYmFkZSBoaW0gd2FrZSBDaWNlcm8gYW5kIHRlbGwgaGltIHRoZXkgd2VyZSB0aGVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIGJ1c2luZXNzIHdhcyB3aGF0IEkgc2hhbGwgbm93IHJlbGF0ZS4gQWZ0ZXIgQ3Jhc3N1cyBoYWQgZGluZWQsIGhpcyBkb29ya2VlcGVyIGhhbmRlZCBoaW0gc29tZSBsZXR0ZXJzIHdoaWNoIGFuIHVua25vd24gbWFuIGhhZCBicm91Z2h0OyB0aGV5IHdlcmUgYWRkcmVzc2VkIHRvIGRpZmZlcmVudCBwZXJzb25zLCBhbmQgb25lLCB3aGljaCBoYWQgbm8gc2lnbmF0dXJlLCB3YXMgZm9yIENyYXNzdXMgaGltc2VsZi4gQ3Jhc3N1cyByZWFkIHRoaXMgbGV0dGVyIG9ubHksIGFuZCBzaW5jZSBpdHMgY29udGVudHMgdG9sZCBoaW0gdGhhdCB0aGVyZSB3YXMgdG8gYmUgbXVjaCBibG9vZHNoZWQgY2F1c2VkIGJ5IENhdGlsaW5lLCBhbmQgYWR2aXNlZCBoaW0gdG8gZXNjYXBlIHNlY3JldGx5IGZyb20gdGhlIGNpdHksIGhlIGRpZCBub3Qgb3BlbiB0aGUgcmVzdCwgYnV0IGNhbWUgYXQgb25jZSB0byBDaWNlcm8sIHRlcnJpZmllZCBieSB0aGUgZGFuZ2VyLCBhbmQgc2Vla2luZyB0byBmcmVlIGhpbXNlbGYgc29tZXdoYXQgZnJvbSBjaGFyZ2VzIHRoYXQgaGFkIGJlZW4gbWFkZSBhZ2FpbnN0IGhpbSBvbiBhY2NvdW50IG9mIGhpcyBmcmllbmRzaGlwIGZvciBDYXRpbGluZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDEzLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIHhpaWkgMzwvYmlibD4uIENpY2VybydzIHRyZWF0aXNlIG9uIGhpcyBjb25zdWxzaGlwLCB0aGVyZSByZWZlcnJlZCB0bywgd2FzIHdyaXR0ZW4gaW4gR3JlZWssIGFuZCBpcyBub3QgZXh0YW50LiA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAxMy4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCB4aWlpIDM8L2JpYmw+LiBDaWNlcm8ncyB0cmVhdGlzZSBvbiBoaXMgY29uc3Vsc2hpcCwgdGhlcmUgcmVmZXJyZWQgdG8sIHdhcyB3cml0dGVuIGluIEdyZWVrLCBhbmQgaXMgbm90IGV4dGFudC4gPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCB4aWlpIDM8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5DaWNlcm8sIGFjY29yZGluZ2x5LCBhZnRlciBkZWxpYmVyYXRpb24sIGNvbnZlbmVkIHRoZSBzZW5hdGUgYXQgYnJlYWsgb2YgZGF5LCBhbmQgY2FycnlpbmcgdGhlIGxldHRlcnMgdGhpdGhlciBnYXZlIHRoZW0gdG8gdGhlIHBlcnNvbnMgdG8gd2hvbSB0aGV5IGhhZCBiZWVuIHNlbnQsIHdpdGggb3JkZXJzIHRvIHJlYWQgdGhlbSBhbG91ZC4gQWxsIHRoZSBsZXR0ZXJzIGFsaWtlIHdlcmUgZm91bmQgdG8gdGVsbCBvZiBhIHBsb3QuIEFuZCB3aGVuIGFsc28gUXVpbnR1cyBBcnJpdXMsIGEgbWFuIG9mIHByYWV0b3JpYW4gZGlnbml0eSwgYnJvdWdodCB3b3JkIG9mIHRoZSBzb2xkaWVycyB3aG8gd2VyZSBiZWluZyBtdXN0ZXJlZCBpbnRvIGNvbXBhbmllcyBpbiBFdHJ1cmlhLCBhbmQgTWFubGl1cyB3YXMgcmVwb3J0ZWQgdG8gYmUgaG92ZXJpbmcgYWJvdXQgdGhlIGNpdGllcyB0aGVyZSB3aXRoIGEgbGFyZ2UgZm9yY2UsIGluIGNvbnN0YW50IGV4cGVjdGF0aW9uIG9mIHNvbWUgbmV3cyBmcm9tIFJvbWUsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnRoZSBzZW5hdGUgcGFzc2VkIGEgZGVjcmVlIHRoYXQgbWF0dGVycyBzaG91bGQgYmUgcHV0IGluIHRoZSBoYW5kcyBvZiB0aGUgY29uc3Vscywgd2hvIHdlcmUgdG8gYWNjZXB0IHRoZSBjaGFyZ2UgYW5kIG1hbmFnZSBhcyBiZXN0IHRoZXkga25ldyBob3cgZm9yIHRoZSBwcmVzZXJ2YXRpb24gb2YgdGhlIGNpdHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5EZW50IG9wZXJhbSBjb25zdWxlcyBuZSBxdWlkIHJlc3B1YmxpY2EgZGV0cmltZW50aSBjYXBpYXQ8L2ZvcmVpZ24+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU2FsLiBDYXQuIDI5IiB2YWxpZD0ieWVzIj5TYWxsdXN0LCA8dGl0bGU+Q2F0aWxpbmU8L3RpdGxlPiwgMjk8L2JpYmw+KTsgPGZvcmVpZ24gbGFuZz0ibGEiPmRlY3Jldml0IHF1b25kYW0gc2VuYXR1cyB1dCBMLiBPcGltaXVzIGNvbnN1bCB2aWRlcmV0IG5lIHF1aWQgcmVzIHB1YmxpY2EgZGV0cmltZW50aSBjYXBlcmV0PC9mb3JlaWduPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDEuNCIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+aW4gQ2F0aWwuPC90aXRsZT4gaS4gMiwgNDwvYmlibD4pLjwvbm90ZT4gTm93LCB0aGUgc2VuYXRlIGlzIG5vdCB3b250IHRvIGRvIHRoaXMgb2Z0ZW4sIGJ1dCBvbmx5IHdoZW4gaXQgZmVhcnMgc29tZSBncmVhdCBkYW5nZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNpY2VybywgYWNjb3JkaW5nbHksIGFmdGVyIGRlbGliZXJhdGlvbiwgY29udmVuZWQgdGhlIHNlbmF0ZSBhdCBicmVhayBvZiBkYXksIGFuZCBjYXJyeWluZyB0aGUgbGV0dGVycyB0aGl0aGVyIGdhdmUgdGhlbSB0byB0aGUgcGVyc29ucyB0byB3aG9tIHRoZXkgaGFkIGJlZW4gc2VudCwgd2l0aCBvcmRlcnMgdG8gcmVhZCB0aGVtIGFsb3VkLiBBbGwgdGhlIGxldHRlcnMgYWxpa2Ugd2VyZSBmb3VuZCB0byB0ZWxsIG9mIGEgcGxvdC4gQW5kIHdoZW4gYWxzbyBRdWludHVzIEFycml1cywgYSBtYW4gb2YgcHJhZXRvcmlhbiBkaWduaXR5LCBicm91Z2h0IHdvcmQgb2YgdGhlIHNvbGRpZXJzIHdobyB3ZXJlIGJlaW5nIG11c3RlcmVkIGludG8gY29tcGFuaWVzIGluIEV0cnVyaWEsIGFuZCBNYW5saXVzIHdhcyByZXBvcnRlZCB0byBiZSBob3ZlcmluZyBhYm91dCB0aGUgY2l0aWVzIHRoZXJlIHdpdGggYSBsYXJnZSBmb3JjZSwgaW4gY29uc3RhbnQgZXhwZWN0YXRpb24gb2Ygc29tZSBuZXdzIGZyb20gUm9tZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnRoZSBzZW5hdGUgcGFzc2VkIGEgZGVjcmVlIHRoYXQgbWF0dGVycyBzaG91bGQgYmUgcHV0IGluIHRoZSBoYW5kcyBvZiB0aGUgY29uc3Vscywgd2hvIHdlcmUgdG8gYWNjZXB0IHRoZSBjaGFyZ2UgYW5kIG1hbmFnZSBhcyBiZXN0IHRoZXkga25ldyBob3cgZm9yIHRoZSBwcmVzZXJ2YXRpb24gb2YgdGhlIGNpdHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+RGVudCBvcGVyYW0gY29uc3VsZXMgbmUgcXVpZCByZXNwdWJsaWNhIGRldHJpbWVudGkgY2FwaWF0PC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU2FsLiBDYXQuIDI5IiB2YWxpZD0ieWVzIj5TYWxsdXN0LCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRpbGluZTwvdGl0bGU+LCAyOTwvYmlibD4pOyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5kZWNyZXZpdCBxdW9uZGFtIHNlbmF0dXMgdXQgTC4gT3BpbWl1cyBjb25zdWwgdmlkZXJldCBuZSBxdWlkIHJlcyBwdWJsaWNhIGRldHJpbWVudGkgY2FwZXJldDwvZm9yZWlnbj4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDEuNCIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBDYXRpbC48L3RpdGxlPiBpLiAyLCA0PC9iaWJsPikuPC9ub3RlPiBOb3csIHRoZSBzZW5hdGUgaXMgbm90IHdvbnQgdG8gZG8gdGhpcyBvZnRlbiwgYnV0IG9ubHkgd2hlbiBpdCBmZWFycyBzb21lIGdyZWF0IGRhbmdlci4KCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+RGVudCBvcGVyYW0gY29uc3VsZXMgbmUgcXVpZCByZXNwdWJsaWNhIGRldHJpbWVudGkgY2FwaWF0PC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU2FsLiBDYXQuIDI5IiB2YWxpZD0ieWVzIj5TYWxsdXN0LCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRpbGluZTwvdGl0bGU+LCAyOTwvYmlibD4pOyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRpbGluZTwvdGl0bGU+LCAyOTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmRlY3Jldml0IHF1b25kYW0gc2VuYXR1cyB1dCBMLiBPcGltaXVzIGNvbnN1bCB2aWRlcmV0IG5lIHF1aWQgcmVzIHB1YmxpY2EgZGV0cmltZW50aSBjYXBlcmV0PC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gMS40IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIENhdGlsLjwvdGl0bGU+IGkuIDIsIDQ8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBDYXRpbC48L3RpdGxlPiBpLiAyLCA0PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gcmVjZWl2aW5nIHRoaXMgcG93ZXIgQ2ljZXJvIGVudHJ1c3RlZCBtYXR0ZXJzIG91dHNpZGUgdG8gUXVpbnR1cyBNZXRlbGx1cywgd2hpbGUgaGUgaGltc2VsZiBrZXB0IHRoZSBjaXR5IGluIGhhbmQgYW5kIGRhaWx5IHdlbnQgZm9ydGggYXR0ZW5kZWQgYnkgc28gbGFyZ2UgYSBib2R5Z3VhcmQgdGhhdCBhIGdyZWF0IHBhcnQgb2YgdGhlIGZvcnVtIHdhcyBvY2N1cGllZCB3aGVuIGhlIGVudGVyZWQgaXQgd2l0aCBoaXMgZXNjb3J0LiBUaGVyZXVwb24gQ2F0aWxpbmUsIG5vIGxvbmdlciBhYmxlIHRvIGVuZHVyZSB0aGUgZGVsYXksIHJlc29sdmVkIHRvIGhhc3RlbiBmb3J0aCB0byBNYW5saXVzIGFuZCBoaXMgYXJteSwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIG9yZGVyZWQgTWFyY2l1cyBhbmQgQ2V0aGVndXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gcm9tIENpY2VybydzIG9yYXRpb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gU3VsLiAxOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5wcm8gU3VsbGE8L3RpdGxlPiAoNiwgMTgpPC9iaWJsPiBhbmQgU2FsbHVzdCdzIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTYWwuIENhdC4gMjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2F0aWxpbmU8L3RpdGxlPiAoMjgpPC9iaWJsPiBpdCBhcHBlYXJzIHRoYXQgdGhlIG5hbWVzIG9mIHRoZXNlIHdvdWxkLWJlIG11cmRlcnMgd2VyZSBDYWl1cyBDb3JuZWxpdXMgYW5kIEx1Y2l1cyBWYXJndW50ZWl1cy48L25vdGU+IHRvIHRha2UgdGhlaXIgc3dvcmRzIGFuZCBnbyBlYXJseSBpbiB0aGUgbW9ybmluZyB0byB0aGUgaG91c2Ugb2YgQ2ljZXJvIG9uIHByZXRlbmNlIG9mIHBheWluZyBoaW0gdGhlaXIgcmVzcGVjdHMsIGFuZCB0aGVyZSB0byBmYWxsIHVwb24gaGltIGFuZCBkaXNwYXRjaCBoaW0uIFRoaXMgc2NoZW1lIEZ1bHZpYSwgYSB3b21hbiBvZiBoaWdoIHJhbmssIG1hZGUga25vd24gdG8gQ2ljZXJvLCBjb21pbmcgdG8gaGltIGJ5IG5pZ2h0IGFuZCB1cmdpbmcgaGltIHRvIGJlIG9uIGhpcyBndWFyZCBhZ2FpbnN0IENldGhlZ3VzIGFuZCBoaXMgY29tcGFuaW9uLiBUaGUgbWVuIGNhbWUgYXQgYnJlYWsgb2YgZGF5LCBhbmQgd2hlbiB0aGV5IHdlcmUgcHJldmVudGVkIGZyb20gZW50ZXJpbmcsIHRoZXkgd2VyZSBpbmNlbnNlZCBhbmQgbWFkZSBhbiBvdXRjcnkgYXQgdGhlIGRvb3IsIHdoaWNoIG1hZGUgdGhlbSB0aGUgbW9yZSBzdXNwZWN0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gQ2ljZXJvIHdlbnQgZm9ydGggYW5kIHN1bW1vbmVkIHRoZSBzZW5hdGUgdG8gdGhlIHRlbXBsZSBvZiBKdXBpdGVyIFN0ZXNpdXMgKG9yIFN0YXRvciwgYXMgdGhlIFJvbWFucyBzYXkpLCB3aGljaCB3YXMgc2l0dWF0ZWQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgVmlhIFNhY3JhLCBhcyB5b3UgZ28gdXAgdG8gdGhlIFBhbGF0aW5lIGhpbGwuIFRoaXRoZXIgQ2F0aWxpbmUgYWxzbyBjYW1lIHdpdGggdGhlIHJlc3QgaW4gb3JkZXIgdG8gbWFrZSBoaXMgZGVmZW5jZTsgbm8gc2VuYXRvciwgaG93ZXZlciwgd291bGQgc2l0IHdpdGggaGltLCBidXQgYWxsIG1vdmVkIGF3YXkgZnJvbSB0aGUgYmVuY2ggd2hlcmUgaGUgd2FzLiBBbmQgd2hlbiBoZSBiZWdhbiB0byBzcGVhayBoZSB3YXMgaW50ZXJydXB0ZWQgYnkgb3V0Y3JpZXMsIGFuZCBhdCBsYXN0IENpY2VybyByb3NlIGFuZCBvcmRlcmVkIGhpbSB0byBkZXBhcnQgZnJvbSB0aGUgY2l0eSwgc2F5aW5nIHRoYXQsIHNpbmNlIG9uZSBvZiB0aGVtIGRpZCBoaXMgd29yayB3aXRoIHdvcmRzIGFuZCB0aGUgb3RoZXIgd2l0aCBhcm1zLCB0aGUgY2l0eSB3YWxsIG11c3QgbmVlZHMgbGllIGJldHdlZW4gdGhlbS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDEuMTAiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlPmluIENhdGlsLjwvdGl0bGU+IGkuIDUsIDEwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhdGlsaW5lLCBhY2NvcmRpbmdseSwgbGVmdCB0aGUgY2l0eSBhdCBvbmNlIHdpdGggdGhyZWUgaHVuZHJlZCBhcm1lZCBmb2xsb3dlcnMsIGFzc3VtZWQgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+IGFuZCBheGVzIGFzIHRob3VnaCBoZSB3ZXJlIGEgbWFnaXN0cmF0ZSwgcmFpc2VkIHN0YW5kYXJkcywgYW5kIG1hcmNoZWQgdG8gam9pbiBNYW5saXVzOyBhbmQgc2luY2UgYWJvdXQgdHdlbnR5IHRob3VzYW5kIG1lbiBhbHRvZ2V0aGVyIGhhZCBiZWVuIGNvbGxlY3RlZCwgaGUgbWFyY2hlZCByb3VuZCB0byB0aGUgdmFyaW91cyBjaXRpZXMgZW5kZWF2b3VyaW5nIHRvIHBlcnN1YWRlIHRoZW0gdG8gcmV2b2x0LCBzbyB0aGF0IHRoZXJlIHdhcyBub3cgb3BlbiB3YXIsIGFuZCBBbnRvbml1cyB3YXMgc2VudCBvZmYgdG8gZmlnaHQgaXQgb3V0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gcmVjZWl2aW5nIHRoaXMgcG93ZXIgQ2ljZXJvIGVudHJ1c3RlZCBtYXR0ZXJzIG91dHNpZGUgdG8gUXVpbnR1cyBNZXRlbGx1cywgd2hpbGUgaGUgaGltc2VsZiBrZXB0IHRoZSBjaXR5IGluIGhhbmQgYW5kIGRhaWx5IHdlbnQgZm9ydGggYXR0ZW5kZWQgYnkgc28gbGFyZ2UgYSBib2R5Z3VhcmQgdGhhdCBhIGdyZWF0IHBhcnQgb2YgdGhlIGZvcnVtIHdhcyBvY2N1cGllZCB3aGVuIGhlIGVudGVyZWQgaXQgd2l0aCBoaXMgZXNjb3J0LiBUaGVyZXVwb24gQ2F0aWxpbmUsIG5vIGxvbmdlciBhYmxlIHRvIGVuZHVyZSB0aGUgZGVsYXksIHJlc29sdmVkIHRvIGhhc3RlbiBmb3J0aCB0byBNYW5saXVzIGFuZCBoaXMgYXJteSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBvcmRlcmVkIE1hcmNpdXMgYW5kIENldGhlZ3VzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gcm9tIENpY2VybydzIG9yYXRpb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBTdWwuIDE4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIFN1bGxhPC90aXRsZT4gKDYsIDE4KTwvYmlibD4gYW5kIFNhbGx1c3QncyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTYWwuIENhdC4gMjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRpbGluZTwvdGl0bGU+ICgyOCk8L2JpYmw+IGl0IGFwcGVhcnMgdGhhdCB0aGUgbmFtZXMgb2YgdGhlc2Ugd291bGQtYmUgbXVyZGVycyB3ZXJlIENhaXVzIENvcm5lbGl1cyBhbmQgTHVjaXVzIFZhcmd1bnRlaXVzLjwvbm90ZT4gdG8gdGFrZSB0aGVpciBzd29yZHMgYW5kIGdvIGVhcmx5IGluIHRoZSBtb3JuaW5nIHRvIHRoZSBob3VzZSBvZiBDaWNlcm8gb24gcHJldGVuY2Ugb2YgcGF5aW5nIGhpbSB0aGVpciByZXNwZWN0cywgYW5kIHRoZXJlIHRvIGZhbGwgdXBvbiBoaW0gYW5kIGRpc3BhdGNoIGhpbS4gVGhpcyBzY2hlbWUgRnVsdmlhLCBhIHdvbWFuIG9mIGhpZ2ggcmFuaywgbWFkZSBrbm93biB0byBDaWNlcm8sIGNvbWluZyB0byBoaW0gYnkgbmlnaHQgYW5kIHVyZ2luZyBoaW0gdG8gYmUgb24gaGlzIGd1YXJkIGFnYWluc3QgQ2V0aGVndXMgYW5kIGhpcyBjb21wYW5pb24uIFRoZSBtZW4gY2FtZSBhdCBicmVhayBvZiBkYXksIGFuZCB3aGVuIHRoZXkgd2VyZSBwcmV2ZW50ZWQgZnJvbSBlbnRlcmluZywgdGhleSB3ZXJlIGluY2Vuc2VkIGFuZCBtYWRlIGFuIG91dGNyeSBhdCB0aGUgZG9vciwgd2hpY2ggbWFkZSB0aGVtIHRoZSBtb3JlIHN1c3BlY3RlZC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFN1bC4gMTgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5wcm8gU3VsbGE8L3RpdGxlPiAoNiwgMTgpPC9iaWJsPiBhbmQgU2FsbHVzdCdzIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBybyBTdWxsYTwvdGl0bGU+ICg2LCAxOCk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTYWwuIENhdC4gMjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRpbGluZTwvdGl0bGU+ICgyOCk8L2JpYmw+IGl0IGFwcGVhcnMgdGhhdCB0aGUgbmFtZXMgb2YgdGhlc2Ugd291bGQtYmUgbXVyZGVycyB3ZXJlIENhaXVzIENvcm5lbGl1cyBhbmQgTHVjaXVzIFZhcmd1bnRlaXVzLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdGlsaW5lPC90aXRsZT4gKDI4KTwvdHJhbnNsYXRpb24+"
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gQ2ljZXJvIHdlbnQgZm9ydGggYW5kIHN1bW1vbmVkIHRoZSBzZW5hdGUgdG8gdGhlIHRlbXBsZSBvZiBKdXBpdGVyIFN0ZXNpdXMgKG9yIFN0YXRvciwgYXMgdGhlIFJvbWFucyBzYXkpLCB3aGljaCB3YXMgc2l0dWF0ZWQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgVmlhIFNhY3JhLCBhcyB5b3UgZ28gdXAgdG8gdGhlIFBhbGF0aW5lIGhpbGwuIFRoaXRoZXIgQ2F0aWxpbmUgYWxzbyBjYW1lIHdpdGggdGhlIHJlc3QgaW4gb3JkZXIgdG8gbWFrZSBoaXMgZGVmZW5jZTsgbm8gc2VuYXRvciwgaG93ZXZlciwgd291bGQgc2l0IHdpdGggaGltLCBidXQgYWxsIG1vdmVkIGF3YXkgZnJvbSB0aGUgYmVuY2ggd2hlcmUgaGUgd2FzLiBBbmQgd2hlbiBoZSBiZWdhbiB0byBzcGVhayBoZSB3YXMgaW50ZXJydXB0ZWQgYnkgb3V0Y3JpZXMsIGFuZCBhdCBsYXN0IENpY2VybyByb3NlIGFuZCBvcmRlcmVkIGhpbSB0byBkZXBhcnQgZnJvbSB0aGUgY2l0eSwgc2F5aW5nIHRoYXQsIHNpbmNlIG9uZSBvZiB0aGVtIGRpZCBoaXMgd29yayB3aXRoIHdvcmRzIGFuZCB0aGUgb3RoZXIgd2l0aCBhcm1zLCB0aGUgY2l0eSB3YWxsIG11c3QgbmVlZHMgbGllIGJldHdlZW4gdGhlbS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIENhdGlsLiAxLjEwIiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIENhdGlsLjwvdGl0bGU+IGkuIDUsIDEwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gMS4xMCIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBDYXRpbC48L3RpdGxlPiBpLiA1LCAxMC48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIENhdGlsLjwvdGl0bGU+IGkuIDUsIDEwLjwvdHJhbnNsYXRpb24+"
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhdGlsaW5lLCBhY2NvcmRpbmdseSwgbGVmdCB0aGUgY2l0eSBhdCBvbmNlIHdpdGggdGhyZWUgaHVuZHJlZCBhcm1lZCBmb2xsb3dlcnMsIGFzc3VtZWQgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmZhc2NlczwvZm9yZWlnbj4gYW5kIGF4ZXMgYXMgdGhvdWdoIGhlIHdlcmUgYSBtYWdpc3RyYXRlLCByYWlzZWQgc3RhbmRhcmRzLCBhbmQgbWFyY2hlZCB0byBqb2luIE1hbmxpdXM7IGFuZCBzaW5jZSBhYm91dCB0d2VudHkgdGhvdXNhbmQgbWVuIGFsdG9nZXRoZXIgaGFkIGJlZW4gY29sbGVjdGVkLCBoZSBtYXJjaGVkIHJvdW5kIHRvIHRoZSB2YXJpb3VzIGNpdGllcyBlbmRlYXZvdXJpbmcgdG8gcGVyc3VhZGUgdGhlbSB0byByZXZvbHQsIHNvIHRoYXQgdGhlcmUgd2FzIG5vdyBvcGVuIHdhciwgYW5kIEFudG9uaXVzIHdhcyBzZW50IG9mZiB0byBmaWdodCBpdCBvdXQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjcmVhdHVyZXMgb2YgQ2F0aWxpbmUgd2hvIGhhZCBiZWVuIGxlZnQgYmVoaW5kIGluIHRoZSBjaXR5IHdlcmUgYnJvdWdodCB0b2dldGhlciBhbmQgZW5jb3VyYWdlZCBieSBDb3JuZWxpdXMgTGVudHVsdXMsIHN1cm5hbWVkIFN1cmEsIGEgbWFuIG9mIGlsbHVzdHJpb3VzIGJpcnRoLCBidXQgb25lIHdobyBoYWQgbGVkIGEgbG93IGxpZmUgYW5kIGZvciBoaXMgbGljZW50aW91c25lc3MgaGFkIGZvcm1lcmx5IGJlZW4gZXhwZWxsZWQgZnJvbSB0aGUgc2VuYXRlLCB0aG91Z2ggbm93IGhlIHdhcyBzZXJ2aW5nIGFzIHByYWV0b3IgZm9yIHRoZSBzZWNvbmQgdGltZSwgYXMgaXMgdGhlIGN1c3RvbSB3aXRoIHRob3NlIHdobyBoYXZlIHJlY292ZXJlZCB0aGVpciBzZW5hdG9yaWFsIGRpZ25pdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdG9vIHRoYXQgaGUgZ290IGhpcyBzdXJuYW1lIG9mIFN1cmEgZm9yIHRoZSBmb2xsb3dpbmcgcmVhc29uLiBJbiBTdWxsYSdzIHRpbWUgaGUgd2FzIHF1YWVzdG9yIGFuZCBsb3N0IGFuZCB3YXN0ZWQgbGFyZ2UgYW1vdW50cyBvZiB0aGUgcHVibGljIG1vbmV5cy4gU3VsbGEgd2FzIGFuZ3J5IGF0IHRoaXMgYW5kIGRlbWFuZGVkIGFuIGFjY291bnRpbmcgZnJvbSBoaW0gaW4gdGhlIHNlbmF0ZSwgd2hlcmV1cG9uIExlbnR1bHVzIGNhbWUgZm9yd2FyZCB3aXRoIGEgdmVyeSBjYXJlbGVzcyBhbmQgY29udGVtcHR1b3VzIGFpciBhbmQgc2FpZCB0aGF0IGhlIHdvdWxkIG5vdCBnaXZlIGFuIGFjY291bnQsIGJ1dCB3b3VsZCBvZmZlciBoaXMgbGVnLCBhcyBib3lzIHdlcmUgYWNjdXN0b21lZCB0byBkbyB3aGVuIHRoZXkgd2VyZSBwbGF5aW5nIGJhbGwgYW5kIG1hZGUgYSBtaXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGlzIGFjY291bnQgaGUgd2FzIHN1cm5hbWVkIFN1cmEsIGZvciAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+c3VyYTwvZm9yZWlnbj4KICAgICAgICAgICAgPC9xPiBpcyB0aGUgUm9tYW4gd29yZCBmb3IgPGdsb3NzPmxlZzwvZ2xvc3M+LiBBdCBhbm90aGVyIHRpbWUsIHRvbywgaGUgd2FzIHVuZGVyIHByb3NlY3V0aW9uIGFuZCBoYWQgYnJpYmVkIHNvbWUgb2YgdGhlIGp1cm9ycywgYW5kIHdoZW4gaGUgd2FzIGFjcXVpdHRlZCBieSBvbmx5IHR3byB2b3RlcywgaGUgc2FpZCB0aGF0IHdoYXQgaGUgaGFkIGdpdmVuIHRvIHRoZSBzZWNvbmQganVyb3Igd2FzIHdhc3RlZCBtb25leSwgc2luY2UgaXQgd291bGQgaGF2ZSBzdWZmaWNlZCBpZiBoZSBoYWQgYmVlbiBhY3F1aXR0ZWQgYnkgb25lIHZvdGUgb25seS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNyZWF0dXJlcyBvZiBDYXRpbGluZSB3aG8gaGFkIGJlZW4gbGVmdCBiZWhpbmQgaW4gdGhlIGNpdHkgd2VyZSBicm91Z2h0IHRvZ2V0aGVyIGFuZCBlbmNvdXJhZ2VkIGJ5IENvcm5lbGl1cyBMZW50dWx1cywgc3VybmFtZWQgU3VyYSwgYSBtYW4gb2YgaWxsdXN0cmlvdXMgYmlydGgsIGJ1dCBvbmUgd2hvIGhhZCBsZWQgYSBsb3cgbGlmZSBhbmQgZm9yIGhpcyBsaWNlbnRpb3VzbmVzcyBoYWQgZm9ybWVybHkgYmVlbiBleHBlbGxlZCBmcm9tIHRoZSBzZW5hdGUsIHRob3VnaCBub3cgaGUgd2FzIHNlcnZpbmcgYXMgcHJhZXRvciBmb3IgdGhlIHNlY29uZCB0aW1lLCBhcyBpcyB0aGUgY3VzdG9tIHdpdGggdGhvc2Ugd2hvIGhhdmUgcmVjb3ZlcmVkIHRoZWlyIHNlbmF0b3JpYWwgZGlnbml0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdG9vIHRoYXQgaGUgZ290IGhpcyBzdXJuYW1lIG9mIFN1cmEgZm9yIHRoZSBmb2xsb3dpbmcgcmVhc29uLiBJbiBTdWxsYSdzIHRpbWUgaGUgd2FzIHF1YWVzdG9yIGFuZCBsb3N0IGFuZCB3YXN0ZWQgbGFyZ2UgYW1vdW50cyBvZiB0aGUgcHVibGljIG1vbmV5cy4gU3VsbGEgd2FzIGFuZ3J5IGF0IHRoaXMgYW5kIGRlbWFuZGVkIGFuIGFjY291bnRpbmcgZnJvbSBoaW0gaW4gdGhlIHNlbmF0ZSwgd2hlcmV1cG9uIExlbnR1bHVzIGNhbWUgZm9yd2FyZCB3aXRoIGEgdmVyeSBjYXJlbGVzcyBhbmQgY29udGVtcHR1b3VzIGFpciBhbmQgc2FpZCB0aGF0IGhlIHdvdWxkIG5vdCBnaXZlIGFuIGFjY291bnQsIGJ1dCB3b3VsZCBvZmZlciBoaXMgbGVnLCBhcyBib3lzIHdlcmUgYWNjdXN0b21lZCB0byBkbyB3aGVuIHRoZXkgd2VyZSBwbGF5aW5nIGJhbGwgYW5kIG1hZGUgYSBtaXNzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoaXMgYWNjb3VudCBoZSB3YXMgc3VybmFtZWQgU3VyYSwgZm9yIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+c3VyYTwvZm9yZWlnbj4KICAgICAgICAgICAgPC9xPiBpcyB0aGUgUm9tYW4gd29yZCBmb3IgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+c3VyYTwvZm9yZWlnbj4KICAgICAgICAgICAgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+bGVnPC9nbG9zcz4uIEF0IGFub3RoZXIgdGltZSwgdG9vLCBoZSB3YXMgdW5kZXIgcHJvc2VjdXRpb24gYW5kIGhhZCBicmliZWQgc29tZSBvZiB0aGUganVyb3JzLCBhbmQgd2hlbiBoZSB3YXMgYWNxdWl0dGVkIGJ5IG9ubHkgdHdvIHZvdGVzLCBoZSBzYWlkIHRoYXQgd2hhdCBoZSBoYWQgZ2l2ZW4gdG8gdGhlIHNlY29uZCBqdXJvciB3YXMgd2FzdGVkIG1vbmV5LCBzaW5jZSBpdCB3b3VsZCBoYXZlIHN1ZmZpY2VkIGlmIGhlIGhhZCBiZWVuIGFjcXVpdHRlZCBieSBvbmUgdm90ZSBvbmx5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIHdhcyB0aGUgbmF0dXJlIG9mIHRoaXMgbWFuIHdobyBoYWQgYmVlbiBzdGlycmVkIHVwIGJ5IENhdGlsaW5lLCBhbmQgaGUgd2FzIGZ1cnRoZXIgY29ycnVwdGVkIGJ5IHZhaW4gaG9wZXMgaGVsZCBvdXQgdG8gaGltIGJ5IGZhbHNlIHByb3BoZXRzIGFuZCBqdWdnbGVycy4gVGhlc2UgcmVjaXRlZCBmb3JnZWQgb3JhY2xlcyBpbiB2ZXJzZSBwdXJwb3J0aW5nIHRvIGNvbWUgZnJvbSB0aGUgU2lieWxsaW5lIGJvb2tzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gMy45IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZT5pbiBDYXRpbC48L3RpdGxlPiBpaWkuIDQsIDkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoaWNoIHNldCBmb3J0aCB0aGF0IHRocmVlIENvcm5lbGlpIHdlcmUgZmF0ZWQgdG8gYmUgbW9uYXJjaHMgaW4gUm9tZSwgdHdvIG9mIHdob20gaGFkIGFscmVhZHkgZnVsZmlsbGVkIHRoZWlyIGRlc3RpbnksIG5hbWVseSwgQ2lubmEgYW5kIFN1bGxhLCBhbmQgdGhhdCBub3cgdG8gaGltLCB0aGUgdGhpcmQgYW5kIHJlbWFpbmluZyBDb3JuZWxpdXMsIHRoZSBoZWF2ZW5seSBwb3dlcnMgd2VyZSBjb21lIHdpdGggYSBwcm9mZmVyIG9mIHRoZSBtb25hcmNoeSwgd2hpY2ggaGUgbXVzdCBieSBhbGwgbWVhbnMgYWNjZXB0LCBhbmQgbm90IHJ1aW4gaGlzIG9wcG9ydHVuaXRpZXMgYnkgZGVsYXksIGxpa2UgQ2F0aWxpbmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggd2FzIHRoZSBuYXR1cmUgb2YgdGhpcyBtYW4gd2hvIGhhZCBiZWVuIHN0aXJyZWQgdXAgYnkgQ2F0aWxpbmUsIGFuZCBoZSB3YXMgZnVydGhlciBjb3JydXB0ZWQgYnkgdmFpbiBob3BlcyBoZWxkIG91dCB0byBoaW0gYnkgZmFsc2UgcHJvcGhldHMgYW5kIGp1Z2dsZXJzLiBUaGVzZSByZWNpdGVkIGZvcmdlZCBvcmFjbGVzIGluIHZlcnNlIHB1cnBvcnRpbmcgdG8gY29tZSBmcm9tIHRoZSBTaWJ5bGxpbmUgYm9va3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gMy45IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIENhdGlsLjwvdGl0bGU+IGlpaS4gNCwgOS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hpY2ggc2V0IGZvcnRoIHRoYXQgdGhyZWUgQ29ybmVsaWkgd2VyZSBmYXRlZCB0byBiZSBtb25hcmNocyBpbiBSb21lLCB0d28gb2Ygd2hvbSBoYWQgYWxyZWFkeSBmdWxmaWxsZWQgdGhlaXIgZGVzdGlueSwgbmFtZWx5LCBDaW5uYSBhbmQgU3VsbGEsIGFuZCB0aGF0IG5vdyB0byBoaW0sIHRoZSB0aGlyZCBhbmQgcmVtYWluaW5nIENvcm5lbGl1cywgdGhlIGhlYXZlbmx5IHBvd2VycyB3ZXJlIGNvbWUgd2l0aCBhIHByb2ZmZXIgb2YgdGhlIG1vbmFyY2h5LCB3aGljaCBoZSBtdXN0IGJ5IGFsbCBtZWFucyBhY2NlcHQsIGFuZCBub3QgcnVpbiBoaXMgb3Bwb3J0dW5pdGllcyBieSBkZWxheSwgbGlrZSBDYXRpbGluZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gMy45IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIENhdGlsLjwvdGl0bGU+IGlpaS4gNCwgOS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIENhdGlsLjwvdGl0bGU+IGlpaS4gNCwgOS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgaXQgd2FzIG5vIHRyaWZsaW5nIG9yIGluc2lnbmlmaWNhbnQgcGxhbiB3aGljaCBMZW50dWx1cyB3YXMgY2hlcmlzaGluZywgbmF5LCBpdCB3YXMgZGVjaWRlZCB0byBraWxsIGFsbCB0aGUgc2VuYXRvcnMgYW5kIGFzIG1hbnkgb2YgdGhlIG90aGVyIGNpdGl6ZW5zIGFzIHRoZXkgY291bGQsIHRvIGJ1cm4gZG93biB0aGUgY2l0eSBpdHNlbGYsIGFuZCB0byBzcGFyZSBubyBvbmUgZXhjZXB0IHRoZSBjaGlsZHJlbiBvZiBQb21wZXk7IHRoZXNlIHRoZXkgd2VyZSB0byBzZWl6ZSBhbmQgaG9sZCBpbiB0aGVpciBvd24gY3VzdG9keSBhbmQga2VlcCBhcyBob3N0YWdlcyBmb3IgdGhlaXIgcmVjb25jaWxpYXRpb24gd2l0aCBQb21wZXk7IGZvciBhbHJlYWR5IHRoZXJlIHdhcyBjdXJyZW50IGEgd2lkZS1zcHJlYWQgYW5kIHN1cmUgcmVwb3J0IG9mIGhpcyBjb21pbmcgYmFjayBmcm9tIGhpcyBncmVhdCBleHBlZGl0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BIG5pZ2h0IGhhZCBhbHNvIGJlZW4gZml4ZWQgZm9yIHRoZSBhdHRlbXB0LCBhIG5pZ2h0IG9mIHRoZSBTYXR1cm5hbGlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IHRoZSB0aW1lIG9mIHRoZSBjb25zcGlyYWN5IG9mIENhdGlsaW5lIHRoZSBTYXR1cm5hbGlhIGxhc3RlZCBvbmx5IG9uZSBkYXksIERlY2VtYmVyIDE5OyBpbiB0aGUgdGltZSBvZiBBdWd1c3R1cyB0aHJlZSBkYXlzIHdlcmUgZGV2b3RlZCB0byB0aGVtIChEZWNlbWJlciAxNy0xOSkuIFNlZSB0aGUgbm90ZSBvbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTguNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TdWxsYTwvdGl0bGU+LCB4dmlpaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHN3b3JkcywgdG93LCBhbmQgYnJpbXN0b25lIGhhZCBiZWVuIGNhcnJpZWQgdG8gdGhlIGhvdXNlIG9mIENldGhlZ3VzIGFuZCBoaWRkZW4gdGhlcmUuIE1vcmVvdmVyLCB0aGV5IGhhZCBhcHBvaW50ZWQgYSBodW5kcmVkIG1lbiBhbmQgYXNzaWduZWQgYnkgbG90IGFzIG1hbnkgcXVhcnRlcnMgb2YgUm9tZSB0byBlYWNoIG9uZSBzZXZlcmFsbHksIGluIG9yZGVyIHRoYXQgd2l0aGluIGEgc2hvcnQgdGltZSBtYW55IG1pZ2h0IHBsYXkgdGhlIGluY2VuZGlhcnkgYW5kIHRoZSBjaXR5IGJlIGV2ZXJ5d2hlcmUgaW4gYSBibGF6ZS4gT3RoZXJzLCB0b28sIHdlcmUgdG8gc3RvcCB1cCB0aGUgYXF1ZWR1Y3RzIGFuZCBraWxsIHRob3NlIHdobyB0cmllZCB0byBicmluZyB3YXRlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGl0IHdhcyBubyB0cmlmbGluZyBvciBpbnNpZ25pZmljYW50IHBsYW4gd2hpY2ggTGVudHVsdXMgd2FzIGNoZXJpc2hpbmcsIG5heSwgaXQgd2FzIGRlY2lkZWQgdG8ga2lsbCBhbGwgdGhlIHNlbmF0b3JzIGFuZCBhcyBtYW55IG9mIHRoZSBvdGhlciBjaXRpemVucyBhcyB0aGV5IGNvdWxkLCB0byBidXJuIGRvd24gdGhlIGNpdHkgaXRzZWxmLCBhbmQgdG8gc3BhcmUgbm8gb25lIGV4Y2VwdCB0aGUgY2hpbGRyZW4gb2YgUG9tcGV5OyB0aGVzZSB0aGV5IHdlcmUgdG8gc2VpemUgYW5kIGhvbGQgaW4gdGhlaXIgb3duIGN1c3RvZHkgYW5kIGtlZXAgYXMgaG9zdGFnZXMgZm9yIHRoZWlyIHJlY29uY2lsaWF0aW9uIHdpdGggUG9tcGV5OyBmb3IgYWxyZWFkeSB0aGVyZSB3YXMgY3VycmVudCBhIHdpZGUtc3ByZWFkIGFuZCBzdXJlIHJlcG9ydCBvZiBoaXMgY29taW5nIGJhY2sgZnJvbSBoaXMgZ3JlYXQgZXhwZWRpdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkEgbmlnaHQgaGFkIGFsc28gYmVlbiBmaXhlZCBmb3IgdGhlIGF0dGVtcHQsIGEgbmlnaHQgb2YgdGhlIFNhdHVybmFsaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCB0aGUgdGltZSBvZiB0aGUgY29uc3BpcmFjeSBvZiBDYXRpbGluZSB0aGUgU2F0dXJuYWxpYSBsYXN0ZWQgb25seSBvbmUgZGF5LCBEZWNlbWJlciAxOTsgaW4gdGhlIHRpbWUgb2YgQXVndXN0dXMgdGhyZWUgZGF5cyB3ZXJlIGRldm90ZWQgdG8gdGhlbSAoRGVjZW1iZXIgMTctMTkpLiBTZWUgdGhlIG5vdGUgb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTguNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIHh2aWlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgc3dvcmRzLCB0b3csIGFuZCBicmltc3RvbmUgaGFkIGJlZW4gY2FycmllZCB0byB0aGUgaG91c2Ugb2YgQ2V0aGVndXMgYW5kIGhpZGRlbiB0aGVyZS4gTW9yZW92ZXIsIHRoZXkgaGFkIGFwcG9pbnRlZCBhIGh1bmRyZWQgbWVuIGFuZCBhc3NpZ25lZCBieSBsb3QgYXMgbWFueSBxdWFydGVycyBvZiBSb21lIHRvIGVhY2ggb25lIHNldmVyYWxseSwgaW4gb3JkZXIgdGhhdCB3aXRoaW4gYSBzaG9ydCB0aW1lIG1hbnkgbWlnaHQgcGxheSB0aGUgaW5jZW5kaWFyeSBhbmQgdGhlIGNpdHkgYmUgZXZlcnl3aGVyZSBpbiBhIGJsYXplLiBPdGhlcnMsIHRvbywgd2VyZSB0byBzdG9wIHVwIHRoZSBhcXVlZHVjdHMgYW5kIGtpbGwgdGhvc2Ugd2hvIHRyaWVkIHRvIGJyaW5nIHdhdGVyLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxOC41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3VsbGE8L3RpdGxlPiwgeHZpaWkuIDUuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWxsYTwvdGl0bGU+LCB4dmlpaS4gNS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hpbGUgdGhpcyB3YXMgZ29pbmcgb24sIHRoZXJlIGNoYW5jZWQgdG8gYmUgc3RheWluZyBhdCBSb21lIHR3byBhbWJhc3NhZG9ycyBvZiB0aGUgQWxsb2Jyb2dlcywgYSBuYXRpb24gd2hpY2ggYXQgdGhhdCB0aW1lIHdhcyBpbiBhIHBhcnRpY3VsYXJseSBldmlsIHBsaWdodCBhbmQgZmVsdCBvcHByZXNzZWQgYnkgdGhlIFJvbWFuIHN3YXkuIFRoZXNlIG1lbiBMZW50dWx1cyBhbmQgaGlzIHBhcnRpc2FucyB0aG91Z2h0IHdvdWxkIGJlIHVzZWZ1bCBpbiBzdGlycmluZyB1cCBHYXVsIHRvIHJldm9sdCwgYW5kIHRoZXJlZm9yZSB0b29rIHRoZW0gaW50byB0aGUgY29uc3BpcmFjeS4gVGhleSBhbHNvIGdhdmUgdGhlbSBsZXR0ZXJzIHRvIHRoZWlyIHNlbmF0ZSwgYW5kIGxldHRlcnMgdG8gQ2F0aWxpbmUsIG1ha2luZyB0aGUgc2VuYXRlIHByb21pc2VzIG9mIGZyZWVkb20gYW5kIHVyZ2luZyBDYXRpbGluZSB0byBzZXQgdGhlIHNsYXZlcyBmcmVlIGFuZCBtYXJjaCB1cG9uIFJvbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgYWxzbyBzZW50IHdpdGggdGhlbSB0byBDYXRpbGluZSBhIGNlcnRhaW4gVGl0dXMgb2YgQ3JvdG9uLCB3aG8gd2FzIHRvIGNhcnJ5IHRoZSBsZXR0ZXJzLiBCdXQgdGhlIGNvbnNwaXJhdG9ycyB3ZXJlIHVuYmFsYW5jZWQgbWVuIHdobyBzZWxkb20gbWV0IHRvZ2V0aGVyIHdpdGhvdXQgd2luZSBhbmQgd29tZW4sIHdoaWxlIENpY2VybyB3YXMgZm9sbG93aW5nIHRoZWlyIHNjaGVtZXMgaW5kdXN0cmlvdXNseSwgd2l0aCBzb2JlciBqdWRnZW1lbnQgYW5kIHN1cnBhc3Npbmcgc2FnYWNpdHk7IGhlIGFsc28gaGFkIG1hbnkgbWVuIG91dHNpZGUgb2YgdGhlaXIgY29uc3BpcmFjeSB3aG8ga2VwdCB3YXRjaCB1cG9uIHRoZWlyIGRvaW5ncyBhbmQgaGVscGVkIGhpbSB0cmFjayB0aGVtIGRvd24sIGFuZCBoZSBjb25mZXJyZWQgc2VjcmV0bHkgYW5kIGNvbmZpZGVudGlhbGx5IHdpdGggbWFueSB3aG8gd2VyZSBzdXBwb3NlZCB0byBiZWxvbmcgdG8gdGhlIGNvbnNwaXJhY3k7IGhlIHRoZXJlZm9yZSBjYW1lIHRvIGtub3cgb2YgdGhlaXIgY29uZmVyZW5jZSB3aXRoIHRoZSBzdHJhbmdlcnMsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCwgbGF5aW5nIGFuIGFtYnVzaCBieSBuaWdodCwgaGUgc2VpemVkIHRoZSBtYW4gb2YgQ3JvdG9uIGFuZCBoaXMgbGV0dGVycyB3aXRoIHRoZSBzZWNyZXQgY28tb3BlcmF0aW9uIG9mIHRoZSBBbGxvYnJvZ2VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gMy40IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZT5pbiBDYXRpbC48L3RpdGxlPiBpaWkuIDIsIDQtNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSB0aGlzIHdhcyBnb2luZyBvbiwgdGhlcmUgY2hhbmNlZCB0byBiZSBzdGF5aW5nIGF0IFJvbWUgdHdvIGFtYmFzc2Fkb3JzIG9mIHRoZSBBbGxvYnJvZ2VzLCBhIG5hdGlvbiB3aGljaCBhdCB0aGF0IHRpbWUgd2FzIGluIGEgcGFydGljdWxhcmx5IGV2aWwgcGxpZ2h0IGFuZCBmZWx0IG9wcHJlc3NlZCBieSB0aGUgUm9tYW4gc3dheS4gVGhlc2UgbWVuIExlbnR1bHVzIGFuZCBoaXMgcGFydGlzYW5zIHRob3VnaHQgd291bGQgYmUgdXNlZnVsIGluIHN0aXJyaW5nIHVwIEdhdWwgdG8gcmV2b2x0LCBhbmQgdGhlcmVmb3JlIHRvb2sgdGhlbSBpbnRvIHRoZSBjb25zcGlyYWN5LiBUaGV5IGFsc28gZ2F2ZSB0aGVtIGxldHRlcnMgdG8gdGhlaXIgc2VuYXRlLCBhbmQgbGV0dGVycyB0byBDYXRpbGluZSwgbWFraW5nIHRoZSBzZW5hdGUgcHJvbWlzZXMgb2YgZnJlZWRvbSBhbmQgdXJnaW5nIENhdGlsaW5lIHRvIHNldCB0aGUgc2xhdmVzIGZyZWUgYW5kIG1hcmNoIHVwb24gUm9tZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgYWxzbyBzZW50IHdpdGggdGhlbSB0byBDYXRpbGluZSBhIGNlcnRhaW4gVGl0dXMgb2YgQ3JvdG9uLCB3aG8gd2FzIHRvIGNhcnJ5IHRoZSBsZXR0ZXJzLiBCdXQgdGhlIGNvbnNwaXJhdG9ycyB3ZXJlIHVuYmFsYW5jZWQgbWVuIHdobyBzZWxkb20gbWV0IHRvZ2V0aGVyIHdpdGhvdXQgd2luZSBhbmQgd29tZW4sIHdoaWxlIENpY2VybyB3YXMgZm9sbG93aW5nIHRoZWlyIHNjaGVtZXMgaW5kdXN0cmlvdXNseSwgd2l0aCBzb2JlciBqdWRnZW1lbnQgYW5kIHN1cnBhc3Npbmcgc2FnYWNpdHk7IGhlIGFsc28gaGFkIG1hbnkgbWVuIG91dHNpZGUgb2YgdGhlaXIgY29uc3BpcmFjeSB3aG8ga2VwdCB3YXRjaCB1cG9uIHRoZWlyIGRvaW5ncyBhbmQgaGVscGVkIGhpbSB0cmFjayB0aGVtIGRvd24sIGFuZCBoZSBjb25mZXJyZWQgc2VjcmV0bHkgYW5kIGNvbmZpZGVudGlhbGx5IHdpdGggbWFueSB3aG8gd2VyZSBzdXBwb3NlZCB0byBiZWxvbmcgdG8gdGhlIGNvbnNwaXJhY3k7IGhlIHRoZXJlZm9yZSBjYW1lIHRvIGtub3cgb2YgdGhlaXIgY29uZmVyZW5jZSB3aXRoIHRoZSBzdHJhbmdlcnMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCwgbGF5aW5nIGFuIGFtYnVzaCBieSBuaWdodCwgaGUgc2VpemVkIHRoZSBtYW4gb2YgQ3JvdG9uIGFuZCBoaXMgbGV0dGVycyB3aXRoIHRoZSBzZWNyZXQgY28tb3BlcmF0aW9uIG9mIHRoZSBBbGxvYnJvZ2VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDMuNCIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBDYXRpbC48L3RpdGxlPiBpaWkuIDIsIDQtNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gMy40IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIENhdGlsLjwvdGl0bGU+IGlpaS4gMiwgNC02LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aW4gQ2F0aWwuPC90aXRsZT4gaWlpLiAyLCA0LTYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYnJlYWsgb2YgZGF5LCB0aGVuLCBoZSBhc3NlbWJsZWQgdGhlIHNlbmF0ZSBpbiB0aGUgdGVtcGxlIG9mIENvbmNvcmQsIHJlYWQgdGhlIGxldHRlcnMgYWxvdWQsIGFuZCBleGFtaW5lZCB0aGUgaW5mb3JtZXJzLiBTaWxhbnVzIEp1bml1cyBhbHNvIHNhaWQgdGhhdCBjZXJ0YWluIG9uZXMgaGFkIGhlYXJkIENldGhlZ3VzIGRlY2xhcmUgdGhhdCB0aHJlZSBjb25zdWxzIGFuZCBmb3VyIHByYWV0b3JzIHdlcmUgZ29pbmcgdG8gYmUgdGFrZW4gb2ZmLiBQaXNvLCB0b28sIGEgbWFuIG9mIGNvbnN1bGFyIGRpZ25pdHksIGJyb3VnaHQgaW4gb3RoZXIgcmVwb3J0cyBvZiBhIGxpa2UgbmF0dXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgQ2FpdXMgU3VscGljaXVzLCBvbmUgb2YgdGhlIHByYWV0b3JzLCBvbiBiZWluZyBzZW50IHRvIHRoZSBob3VzZSBvZiBDZXRoZWd1cywgZm91bmQgaW4gaXQgbWFueSBtaXNzaWxlcyBhbmQgd2VhcG9ucywgYW5kIGEgaHVnZSBxdWFudGl0eSBvZiBzd29yZHMgYW5kIGtuaXZlcywgYWxsIG5ld2x5IHNoYXJwZW5lZC4gQW5kIGZpbmFsbHksIGFmdGVyIHRoZSBzZW5hdGUgaGFkIHZvdGVkIGltbXVuaXR5IHRvIHRoZSBtYW4gb2YgQ3JvdG9uIG9uIGNvbmRpdGlvbiB0aGF0IGhlIGdhdmUgaW5mb3JtYXRpb24sIExlbnR1bHVzIHdhcyBjb252aWN0ZWQsIHJlc2lnbmVkIGhpcyBvZmZpY2UgKGhlIHdhcyB0aGVuIHByYWV0b3IpLCBhbmQgbGF5aW5nIGFzaWRlIGhpcyBwdXJwbGUtYm9yZGVyZWQgdG9nYSBpbiB0aGUgc2VuYXRlLCBhc3N1bWVkIGluIGl0cyBwbGFjZSBhIGdhcm1lbnQgc3VpdGFibGUgdG8gaGlzIHByZWRpY2FtZW50LiBIZSBhbmQgaGlzIGFzc29jaWF0ZXMsIHRoZXJlZm9yZSwgd2VyZSBoYW5kZWQgb3ZlciB0byB0aGUgcHJhZXRvcnMgZm9yIGN1c3RvZHkgd2l0aG91dCBmZXR0ZXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPmkuZS4gZm9yIGNvbmZpbmVtZW50IHVuZGVyIGd1YXJkIGluIHRoZWlyIG93biBob3VzZXMgKDxmb3JlaWduIGxhbmc9ImxhIj5saWJlcmEgY3VzdG9kaWE8L2ZvcmVpZ24+KS48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYnJlYWsgb2YgZGF5LCB0aGVuLCBoZSBhc3NlbWJsZWQgdGhlIHNlbmF0ZSBpbiB0aGUgdGVtcGxlIG9mIENvbmNvcmQsIHJlYWQgdGhlIGxldHRlcnMgYWxvdWQsIGFuZCBleGFtaW5lZCB0aGUgaW5mb3JtZXJzLiBTaWxhbnVzIEp1bml1cyBhbHNvIHNhaWQgdGhhdCBjZXJ0YWluIG9uZXMgaGFkIGhlYXJkIENldGhlZ3VzIGRlY2xhcmUgdGhhdCB0aHJlZSBjb25zdWxzIGFuZCBmb3VyIHByYWV0b3JzIHdlcmUgZ29pbmcgdG8gYmUgdGFrZW4gb2ZmLiBQaXNvLCB0b28sIGEgbWFuIG9mIGNvbnN1bGFyIGRpZ25pdHksIGJyb3VnaHQgaW4gb3RoZXIgcmVwb3J0cyBvZiBhIGxpa2UgbmF0dXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBDYWl1cyBTdWxwaWNpdXMsIG9uZSBvZiB0aGUgcHJhZXRvcnMsIG9uIGJlaW5nIHNlbnQgdG8gdGhlIGhvdXNlIG9mIENldGhlZ3VzLCBmb3VuZCBpbiBpdCBtYW55IG1pc3NpbGVzIGFuZCB3ZWFwb25zLCBhbmQgYSBodWdlIHF1YW50aXR5IG9mIHN3b3JkcyBhbmQga25pdmVzLCBhbGwgbmV3bHkgc2hhcnBlbmVkLiBBbmQgZmluYWxseSwgYWZ0ZXIgdGhlIHNlbmF0ZSBoYWQgdm90ZWQgaW1tdW5pdHkgdG8gdGhlIG1hbiBvZiBDcm90b24gb24gY29uZGl0aW9uIHRoYXQgaGUgZ2F2ZSBpbmZvcm1hdGlvbiwgTGVudHVsdXMgd2FzIGNvbnZpY3RlZCwgcmVzaWduZWQgaGlzIG9mZmljZSAoaGUgd2FzIHRoZW4gcHJhZXRvciksIGFuZCBsYXlpbmcgYXNpZGUgaGlzIHB1cnBsZS1ib3JkZXJlZCB0b2dhIGluIHRoZSBzZW5hdGUsIGFzc3VtZWQgaW4gaXRzIHBsYWNlIGEgZ2FybWVudCBzdWl0YWJsZSB0byBoaXMgcHJlZGljYW1lbnQuIEhlIGFuZCBoaXMgYXNzb2NpYXRlcywgdGhlcmVmb3JlLCB3ZXJlIGhhbmRlZCBvdmVyIHRvIHRoZSBwcmFldG9ycyBmb3IgY3VzdG9keSB3aXRob3V0IGZldHRlcnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5pLmUuIGZvciBjb25maW5lbWVudCB1bmRlciBndWFyZCBpbiB0aGVpciBvd24gaG91c2VzICg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5saWJlcmEgY3VzdG9kaWE8L2ZvcmVpZ24+KS48L25vdGU+CgkJCSAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxpYmVyYSBjdXN0b2RpYTwvZm9yZWlnbj4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUl0IHdhcyBub3cgZXZlbmluZywgYW5kIHRoZSBwZW9wbGUgd2VyZSB3YWl0aW5nIGFib3V0IHRoZSB0ZW1wbGUgaW4gdGhyb25ncywgd2hlbiBDaWNlcm8gY29tZSBmb3J0aCBhbmQgdG9sZCBoaXMgZmVsbG93LWNpdGl6ZW5zIHdoYXQgaGFkIGJlZW4gZG9uZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDMuMSIgdmFsaWQ9InllcyI+dGhpcmQgb3JhdGlvbiA8dGl0bGU+aW4gQ2F0aWxpbmFtPC90aXRsZT4KICAgICAgICAgICAgICAgPC9iaWJsPi48L25vdGU+IFRoZXkgdGhlbiBlc2NvcnRlZCBoaW0gdG8gdGhlIGhvdXNlIG9mIGEgZnJpZW5kIGFuZCBuZWlnaGJvdXIsIHNpbmNlIGhpcyBvd24gd2FzIG9jY3VwaWVkIGJ5IHRoZSB3b21lbiwgd2hvIHdlcmUgY2VsZWJyYXRpbmcgbXlzdGVyaW91cyByaXRlcyB0byBhIGdvZGRlc3Mgd2hvbSB0aGUgUm9tYW5zIGNhbGwgQm9uYSBEZWEsIGFuZCB0aGUgR3JlZWtzLCBHeW5hZWNlaWEuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNhY3JpZmljZSBpcyBvZmZlcmVkIHRvIGhlciBhbm51YWxseSBpbiB0aGUgaG91c2Ugb2YgdGhlIGNvbnN1bCBieSBoaXMgd2lmZSBvciBoaXMgbW90aGVyLCBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIFZlc3RhbCBWaXJnaW5zLiBDaWNlcm8sIHRoZW4sIGhhdmluZyBnb25lIGludG8gaGlzIGZyaWVuZCdzIGhvdXNlLCBiZWdhbiB0byBkZWxpYmVyYXRlIHdpdGggaGltc2VsZuKAlGFuZCBoZSBoYWQgb25seSB2ZXJ5IGZldyBjb21wYW5pb25z4oCUd2hhdCBoZSBzaG91bGQgZG8gd2l0aCB0aGUgbWVuLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTYWwuIENhdC4gNDYiIHZhbGlkPSJ5ZXMiPlNhbGx1c3QncyA8dGl0bGU+Q2F0aWxpbmU8L3RpdGxlPiwgNDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEZvciBoZSBzaHJhbmsgZnJvbSBpbmZsaWN0aW5nIHRoZSBleHRyZW1lIHBlbmFsdHksIGFuZCB0aGUgb25lIGJlZml0dGluZyBzdWNoIGdyZWF0IGNyaW1lcywgYW5kIGhlIGhlc2l0YXRlZCB0byBkbyBpdCBiZWNhdXNlIG9mIHRoZSBraW5kbGluZXNzIG9mIGhpcyBuYXR1cmUsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIHRoYXQgaGUgbWlnaHQgbm90IGFwcGVhciB0byBtYWtlIGFuIGV4Y2Vzc2l2ZSB1c2Ugb2YgaGlzIHBvd2VyIGFuZCB0byB0cmFtcGxlIHJ1dGhsZXNzbHkgdXBvbiBtZW4gd2hvIHdlcmUgb2YgdGhlIGhpZ2hlc3QgYmlydGggYW5kIGhhZCBwb3dlcmZ1bCBmcmllbmRzIGluIHRoZSBjaXR5OyBhbmQgaWYgaGUgdHJlYXRlZCB0aGVtIHdpdGggbGVzcyBzZXZlcml0eSwgaGUgd2FzIGFmcmFpZCBvZiB0aGUgcGVyaWwgaW50byB3aGljaCB0aGV5IHdvdWxkIGJyaW5nIHRoZSBzdGF0ZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmIHRoZXkgc3VmZmVyZWQgYW55IG1pbGRlciBwZW5hbHR5IHRoYW4gZGVhdGgsIGhlIHdhcyBzdXJlIHRoZXkgd291bGQgbm90IGJlIHNhdGlzZmllZCwgYnV0IHdvdWxkIGJyZWFrIG91dCBpbnRvIGV2ZXJ5IGV4dHJlbWUgb2YgYm9sZG5lc3MsIGhhdmluZyBhZGRlZCBmcmVzaCByYWdlIHRvIHRoZWlyIG9sZCB2aWxsYWlueTogYW5kIGhlIGhpbXNlbGYgd291bGQgYmUgdGhvdWdodCB1bm1hbmx5IGFuZCB3ZWFrLCBlc3BlY2lhbGx5IGFzIHRoZSBtdWx0aXR1ZGUgYWxyZWFkeSB0aG91Z2h0IGhpbSB2ZXJ5IGZhciBmcm9tIGNvdXJhZ2VvdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJSXQgd2FzIG5vdyBldmVuaW5nLCBhbmQgdGhlIHBlb3BsZSB3ZXJlIHdhaXRpbmcgYWJvdXQgdGhlIHRlbXBsZSBpbiB0aHJvbmdzLCB3aGVuIENpY2VybyBjb21lIGZvcnRoIGFuZCB0b2xkIGhpcyBmZWxsb3ctY2l0aXplbnMgd2hhdCBoYWQgYmVlbiBkb25lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDMuMSIgdmFsaWQ9InllcyI+dGhpcmQgb3JhdGlvbiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBDYXRpbGluYW08L3RpdGxlPgogICAgICAgICAgICAgICA8L2JpYmw+Ljwvbm90ZT4gVGhleSB0aGVuIGVzY29ydGVkIGhpbSB0byB0aGUgaG91c2Ugb2YgYSBmcmllbmQgYW5kIG5laWdoYm91ciwgc2luY2UgaGlzIG93biB3YXMgb2NjdXBpZWQgYnkgdGhlIHdvbWVuLCB3aG8gd2VyZSBjZWxlYnJhdGluZyBteXN0ZXJpb3VzIHJpdGVzIHRvIGEgZ29kZGVzcyB3aG9tIHRoZSBSb21hbnMgY2FsbCBCb25hIERlYSwgYW5kIHRoZSBHcmVla3MsIEd5bmFlY2VpYS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIENhdGlsLiAzLjEiIHZhbGlkPSJ5ZXMiPnRoaXJkIG9yYXRpb24gPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aW4gQ2F0aWxpbmFtPC90aXRsZT4KICAgICAgICAgICAgICAgPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBDYXRpbGluYW08L3RpdGxlPgogICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNhY3JpZmljZSBpcyBvZmZlcmVkIHRvIGhlciBhbm51YWxseSBpbiB0aGUgaG91c2Ugb2YgdGhlIGNvbnN1bCBieSBoaXMgd2lmZSBvciBoaXMgbW90aGVyLCBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIFZlc3RhbCBWaXJnaW5zLiBDaWNlcm8sIHRoZW4sIGhhdmluZyBnb25lIGludG8gaGlzIGZyaWVuZCdzIGhvdXNlLCBiZWdhbiB0byBkZWxpYmVyYXRlIHdpdGggaGltc2VsZuKAlGFuZCBoZSBoYWQgb25seSB2ZXJ5IGZldyBjb21wYW5pb25z4oCUd2hhdCBoZSBzaG91bGQgZG8gd2l0aCB0aGUgbWVuLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU2FsLiBDYXQuIDQ2IiB2YWxpZD0ieWVzIj5TYWxsdXN0J3MgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0aWxpbmU8L3RpdGxlPiwgNDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEZvciBoZSBzaHJhbmsgZnJvbSBpbmZsaWN0aW5nIHRoZSBleHRyZW1lIHBlbmFsdHksIGFuZCB0aGUgb25lIGJlZml0dGluZyBzdWNoIGdyZWF0IGNyaW1lcywgYW5kIGhlIGhlc2l0YXRlZCB0byBkbyBpdCBiZWNhdXNlIG9mIHRoZSBraW5kbGluZXNzIG9mIGhpcyBuYXR1cmUsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIHRoYXQgaGUgbWlnaHQgbm90IGFwcGVhciB0byBtYWtlIGFuIGV4Y2Vzc2l2ZSB1c2Ugb2YgaGlzIHBvd2VyIGFuZCB0byB0cmFtcGxlIHJ1dGhsZXNzbHkgdXBvbiBtZW4gd2hvIHdlcmUgb2YgdGhlIGhpZ2hlc3QgYmlydGggYW5kIGhhZCBwb3dlcmZ1bCBmcmllbmRzIGluIHRoZSBjaXR5OyBhbmQgaWYgaGUgdHJlYXRlZCB0aGVtIHdpdGggbGVzcyBzZXZlcml0eSwgaGUgd2FzIGFmcmFpZCBvZiB0aGUgcGVyaWwgaW50byB3aGljaCB0aGV5IHdvdWxkIGJyaW5nIHRoZSBzdGF0ZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTYWwuIENhdC4gNDYiIHZhbGlkPSJ5ZXMiPlNhbGx1c3QncyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRpbGluZTwvdGl0bGU+LCA0Ni48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdGlsaW5lPC90aXRsZT4sIDQ2LjwvdHJhbnNsYXRpb24+"
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiB0aGV5IHN1ZmZlcmVkIGFueSBtaWxkZXIgcGVuYWx0eSB0aGFuIGRlYXRoLCBoZSB3YXMgc3VyZSB0aGV5IHdvdWxkIG5vdCBiZSBzYXRpc2ZpZWQsIGJ1dCB3b3VsZCBicmVhayBvdXQgaW50byBldmVyeSBleHRyZW1lIG9mIGJvbGRuZXNzLCBoYXZpbmcgYWRkZWQgZnJlc2ggcmFnZSB0byB0aGVpciBvbGQgdmlsbGFpbnk6IGFuZCBoZSBoaW1zZWxmIHdvdWxkIGJlIHRob3VnaHQgdW5tYW5seSBhbmQgd2VhaywgZXNwZWNpYWxseSBhcyB0aGUgbXVsdGl0dWRlIGFscmVhZHkgdGhvdWdodCBoaW0gdmVyeSBmYXIgZnJvbSBjb3VyYWdlb3VzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBDaWNlcm8gd2FzIGluIHRoaXMgcGVycGxleGl0eSwgYSBzaWduIHdhcyBnaXZlbiB0byB0aGUgd29tZW4gd2hvIHdlcmUgc2FjcmlmaWNpbmcuIFRoZSBhbHRhciwgaXQgc2VlbXMsIGFsdGhvdWdoIHRoZSBmaXJlIHdhcyBhbHJlYWR5IHRob3VnaHQgdG8gaGF2ZSBnb25lIG91dCwgc2VudCBmb3J0aCBmcm9tIHRoZSBhc2hlcyBhbmQgYnVybnQgYmFyayB1cG9uIGl0IGEgZ3JlYXQgYnJpZ2h0IGJsYXplLiBUaGUgcmVzdCBvZiB0aGUgd29tZW4gd2VyZSB0ZXJyaWZpZWQgYXQgdGhpcywgYnV0IHRoZSBzYWNyZWQgdmlyZ2lucyBiYWRlIFRlcmVudGlhIHRoZSB3aWZlIG9mIENpY2VybyBnbyB3aXRoIGFsbCBzcGVlZCB0byBoZXIgaHVzYmFuZCBhbmQgdGVsbCBoaW0gdG8gY2Fycnkgb3V0IGhpcyByZXNvbHV0aW9ucyBpbiBiZWhhbGYgb2YgdGhlIGNvdW50cnksIHNpbmNlIHRoZSBnb2RkZXNzIHdhcyBnaXZpbmcgaGltIGEgZ3JlYXQgbGlnaHQgb24gdGhpcyBwYXRoIHRvIHNhZmV0eSBhbmQgZ2xvcnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIFRlcmVudGlhLCB3aG8gd2FzIGdlbmVyYWxseSBvZiBubyBtaWxkIHNwaXJpdCBub3Igd2l0aG91dCBuYXR1cmFsIGNvdXJhZ2UsIGJ1dCBhbiBhbWJpdGlvdXMgd29tYW4sIGFuZCwgYXMgQ2ljZXJvIGhpbXNlbGYgdGVsbHMgdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBzb21lIHBhc3NhZ2Ugbm8gbG9uZ2VyIGV4dGFudC48L25vdGU+IG1vcmUgaW5jbGluZWQgdG8gbWFrZSBoZXJzZWxmIGEgcGFydG5lciBpbiBoaXMgcG9saXRpY2FsIHBlcnBsZXhpdGllcyB0aGFuIHRvIHNoYXJlIHdpdGggaGltIGhlciBkb21lc3RpYyBjb25jZXJucywgZ2F2ZSBoaW0gdGhpcyBtZXNzYWdlIGFuZCBpbmNpdGVkIGhpbSBhZ2FpbnN0IHRoZSBjb25zcGlyYXRvcnM7IHNvIGxpa2V3aXNlIGRpZCBRdWludHVzLCBoaXMgYnJvdGhlciwgYW5kIFB1YmxpdXMgTmlnaWRpdXMsIG9uZSBvZiBoaXMgcGhpbG9zb3BoaWNhbCBjb21wYW5pb25zLCB0byB3aG9tIGhlIG1hZGUgdGhlIG1vc3QgYW5kIGdyZWF0ZXN0IHVzZSBpbiBoaXMgcG9saXRpY2FsIHVuZGVydGFraW5ncy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgQ2ljZXJvIHdhcyBpbiB0aGlzIHBlcnBsZXhpdHksIGEgc2lnbiB3YXMgZ2l2ZW4gdG8gdGhlIHdvbWVuIHdobyB3ZXJlIHNhY3JpZmljaW5nLiBUaGUgYWx0YXIsIGl0IHNlZW1zLCBhbHRob3VnaCB0aGUgZmlyZSB3YXMgYWxyZWFkeSB0aG91Z2h0IHRvIGhhdmUgZ29uZSBvdXQsIHNlbnQgZm9ydGggZnJvbSB0aGUgYXNoZXMgYW5kIGJ1cm50IGJhcmsgdXBvbiBpdCBhIGdyZWF0IGJyaWdodCBibGF6ZS4gVGhlIHJlc3Qgb2YgdGhlIHdvbWVuIHdlcmUgdGVycmlmaWVkIGF0IHRoaXMsIGJ1dCB0aGUgc2FjcmVkIHZpcmdpbnMgYmFkZSBUZXJlbnRpYSB0aGUgd2lmZSBvZiBDaWNlcm8gZ28gd2l0aCBhbGwgc3BlZWQgdG8gaGVyIGh1c2JhbmQgYW5kIHRlbGwgaGltIHRvIGNhcnJ5IG91dCBoaXMgcmVzb2x1dGlvbnMgaW4gYmVoYWxmIG9mIHRoZSBjb3VudHJ5LCBzaW5jZSB0aGUgZ29kZGVzcyB3YXMgZ2l2aW5nIGhpbSBhIGdyZWF0IGxpZ2h0IG9uIHRoaXMgcGF0aCB0byBzYWZldHkgYW5kIGdsb3J5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIFRlcmVudGlhLCB3aG8gd2FzIGdlbmVyYWxseSBvZiBubyBtaWxkIHNwaXJpdCBub3Igd2l0aG91dCBuYXR1cmFsIGNvdXJhZ2UsIGJ1dCBhbiBhbWJpdGlvdXMgd29tYW4sIGFuZCwgYXMgQ2ljZXJvIGhpbXNlbGYgdGVsbHMgdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHNvbWUgcGFzc2FnZSBubyBsb25nZXIgZXh0YW50Ljwvbm90ZT4gbW9yZSBpbmNsaW5lZCB0byBtYWtlIGhlcnNlbGYgYSBwYXJ0bmVyIGluIGhpcyBwb2xpdGljYWwgcGVycGxleGl0aWVzIHRoYW4gdG8gc2hhcmUgd2l0aCBoaW0gaGVyIGRvbWVzdGljIGNvbmNlcm5zLCBnYXZlIGhpbSB0aGlzIG1lc3NhZ2UgYW5kIGluY2l0ZWQgaGltIGFnYWluc3QgdGhlIGNvbnNwaXJhdG9yczsgc28gbGlrZXdpc2UgZGlkIFF1aW50dXMsIGhpcyBicm90aGVyLCBhbmQgUHVibGl1cyBOaWdpZGl1cywgb25lIG9mIGhpcyBwaGlsb3NvcGhpY2FsIGNvbXBhbmlvbnMsIHRvIHdob20gaGUgbWFkZSB0aGUgbW9zdCBhbmQgZ3JlYXRlc3QgdXNlIGluIGhpcyBwb2xpdGljYWwgdW5kZXJ0YWtpbmdzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgZm9sbG93aW5nIGRheSB0aGUgc2VuYXRlIGRpc2N1c3NlZCB0aGUgcHVuaXNobWVudCBvZiB0aGUgY29uc3BpcmF0b3JzLCBhbmQgU2lsYW51cywgd2hvIHdhcyB0aGUgZmlyc3QgdG8gYmUgYXNrZWQgdG8gZ2l2ZSBoaXMgb3Bpbmlvbiwgc2FpZCB0aGF0IHRoZXkgb3VnaHQgdG8gYmUgdGFrZW4gdG8gcHJpc29uIGFuZCB0aGVyZSBzdWZmZXIgZXh0cmVtZXN0IHB1bmlzaG1lbnQuIEFsbCB0aGUgc2VuYXRvcnMgYWNjZWRlZCB0byBoaXMgb3BpbmlvbiBvbmUgYWZ0ZXIgdGhlIG90aGVyLCB1bnRpbCBpdCBjYW1lIHRvIENhaXVzIENhZXNhciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDQuNyIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+aW4gQ2F0aWwuPC90aXRsZT4gaXYuIDQsIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdobyBhZnRlcndhcmRzIGJlY2FtZSBkaWN0YXRvci4gQXQgdGhpcyB0aW1lLCBob3dldmVyLCBoZSB3YXMgYSB5b3VuZyBtYW4gc3RpbGwgYW5kIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiBoaXMgcmlzZSB0byBwb3dlciwgYnV0IGluIGhpcyBwdWJsaWMgcG9saWN5IGFuZCBoaXMgaG9wZXMgaGUgaGFkIGFscmVhZHkgZW50ZXJlZCB1cG9uIHRoYXQgcm9hZCBieSB3aGljaCBoZSBjaGFuZ2VkIHRoZSBSb21hbiBzdGF0ZSBpbnRvIGEgbW9uYXJjaHkuIEhpcyBkZXNpZ25zIHdlcmUgc3RpbGwgdW5ub3RpY2VkIGJ5IHRoZSByZXN0LCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5idXQgdG8gQ2ljZXJvIGhlIGhhZCBnaXZlbiBtYW55IGdyb3VuZHMgZm9yIHN1c3BpY2lvbiwgYW5kIHlldCBubyBob2xkIHdoaWNoIGNvdWxkIGxlYWQgdG8gaGlzIGNvbnZpY3Rpb24sIGFsdGhvdWdoIG1hbnkgd2VyZSBoZWFyZCB0byBzYXkgdGhhdCBoZSBoYWQgY29tZSBuZWFyIGJlaW5nIGNhdWdodCBieSBDaWNlcm8sIGJ1dCBoYWQgZWx1ZGVkIGhpbS4gU29tZSwgaG93ZXZlciwgc2F5IHRoYXQgQ2ljZXJvIHB1cnBvc2VseSBvdmVybG9va2VkIGFuZCBuZWdsZWN0ZWQgdGhlIGluZm9ybWF0aW9uIGFnYWluc3QgaGltIHRocm91Z2ggZmVhciBvZiBoaXMgZnJpZW5kcyBhbmQgaGlzIHBvd2VyLCBzaW5jZSBpdCB3YXMgY2xlYXIgdG8gZXZlcnkgb25lIHRoYXQgdGhlIG90aGVyIGNvbnNwaXJhdG9ycyB3b3VsZCBiZSBpbmNsdWRlZCBpbiBDYWVzYXIncyBhY3F1aXR0YWwsIHJhdGhlciB0aGFuIENhZXNhciBpbiB0aGVpciBwdW5pc2htZW50LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBmb2xsb3dpbmcgZGF5IHRoZSBzZW5hdGUgZGlzY3Vzc2VkIHRoZSBwdW5pc2htZW50IG9mIHRoZSBjb25zcGlyYXRvcnMsIGFuZCBTaWxhbnVzLCB3aG8gd2FzIHRoZSBmaXJzdCB0byBiZSBhc2tlZCB0byBnaXZlIGhpcyBvcGluaW9uLCBzYWlkIHRoYXQgdGhleSBvdWdodCB0byBiZSB0YWtlbiB0byBwcmlzb24gYW5kIHRoZXJlIHN1ZmZlciBleHRyZW1lc3QgcHVuaXNobWVudC4gQWxsIHRoZSBzZW5hdG9ycyBhY2NlZGVkIHRvIGhpcyBvcGluaW9uIG9uZSBhZnRlciB0aGUgb3RoZXIsIHVudGlsIGl0IGNhbWUgdG8gQ2FpdXMgQ2Flc2FyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDQuNyIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBDYXRpbC48L3RpdGxlPiBpdi4gNCwgNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hvIGFmdGVyd2FyZHMgYmVjYW1lIGRpY3RhdG9yLiBBdCB0aGlzIHRpbWUsIGhvd2V2ZXIsIGhlIHdhcyBhIHlvdW5nIG1hbiBzdGlsbCBhbmQgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIGhpcyByaXNlIHRvIHBvd2VyLCBidXQgaW4gaGlzIHB1YmxpYyBwb2xpY3kgYW5kIGhpcyBob3BlcyBoZSBoYWQgYWxyZWFkeSBlbnRlcmVkIHVwb24gdGhhdCByb2FkIGJ5IHdoaWNoIGhlIGNoYW5nZWQgdGhlIFJvbWFuIHN0YXRlIGludG8gYSBtb25hcmNoeS4gSGlzIGRlc2lnbnMgd2VyZSBzdGlsbCB1bm5vdGljZWQgYnkgdGhlIHJlc3QsIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gNC43IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIENhdGlsLjwvdGl0bGU+IGl2LiA0LCA3LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aW4gQ2F0aWwuPC90aXRsZT4gaXYuIDQsIDcuPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0byBDaWNlcm8gaGUgaGFkIGdpdmVuIG1hbnkgZ3JvdW5kcyBmb3Igc3VzcGljaW9uLCBhbmQgeWV0IG5vIGhvbGQgd2hpY2ggY291bGQgbGVhZCB0byBoaXMgY29udmljdGlvbiwgYWx0aG91Z2ggbWFueSB3ZXJlIGhlYXJkIHRvIHNheSB0aGF0IGhlIGhhZCBjb21lIG5lYXIgYmVpbmcgY2F1Z2h0IGJ5IENpY2VybywgYnV0IGhhZCBlbHVkZWQgaGltLiBTb21lLCBob3dldmVyLCBzYXkgdGhhdCBDaWNlcm8gcHVycG9zZWx5IG92ZXJsb29rZWQgYW5kIG5lZ2xlY3RlZCB0aGUgaW5mb3JtYXRpb24gYWdhaW5zdCBoaW0gdGhyb3VnaCBmZWFyIG9mIGhpcyBmcmllbmRzIGFuZCBoaXMgcG93ZXIsIHNpbmNlIGl0IHdhcyBjbGVhciB0byBldmVyeSBvbmUgdGhhdCB0aGUgb3RoZXIgY29uc3BpcmF0b3JzIHdvdWxkIGJlIGluY2x1ZGVkIGluIENhZXNhcidzIGFjcXVpdHRhbCwgcmF0aGVyIHRoYW4gQ2Flc2FyIGluIHRoZWlyIHB1bmlzaG1lbnQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZW4sIGl0IHdhcyBDYWVzYXIncyB0dXJuIHRvIGdpdmUgaGlzIG9waW5pb24sIGhlIHJvc2UgYW5kIGRlY2xhcmVkIGl0IHRvIGJlIGFnYWluc3QgcHV0dGluZyB0aGUgY29uc3BpcmF0b3JzIHRvIGRlYXRoLCBidXQgaW4gZmF2b3VyIG9mIGNvbmZpc2NhdGluZyB0aGVpciBwcm9wZXJ0eSBhbmQgcmVtb3ZpbmcgdGhlbSB0byB3aGF0ZXZlciBjaXRpZXMgb2YgSXRhbHkgQ2ljZXJvIG1pZ2h0IGRlZW0gYmVzdCwgdGhlcmUgdG8gYmUgcHV0IGluIGZldHRlcnMgYW5kIGNsb3NlbHkgZ3VhcmRlZCB1bnRpbCBDYXRpbGluZSBzaG91bGQgYmUgZGVmZWF0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwcm9wb3NhbCBvZiBDYWVzYXIgd2FzIG1lcmNpZnVsIGFuZCBpdHMgYXV0aG9yIGEgdmVyeSBhYmxlIHNwZWFrZXIsIGFuZCBDaWNlcm8gYWRkZWQgbm8gbGl0dGxlIHdlaWdodCB0byBpdC4gRm9yIHdoZW4gaGUgcm9zZSB0byBzcGVhayBoaW1zZWxmLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gNC4xIiB2YWxpZD0ieWVzIj5mb3VydGggb3JhdGlvbiA8dGl0bGU+aW4gQ2F0aWxpbmFtPC90aXRsZT4KICAgICAgICAgICAgICAgPC9iaWJsPi48L25vdGU+IGhlIGhhbmRsZWQgdGhlIHN1YmplY3QgaW4gYm90aCB3YXlzLCBub3cgZmF2b3VyaW5nIHRoZSBmaXJzdCBwcm9wb3NhbCBhbmQgbm93IHRoYXQgb2YgQ2Flc2FyLiBBbGwgaGlzIGZyaWVuZHMsIHRvbywgdGhpbmtpbmcgdGhhdCBDYWVzYXIncyBwcm9wb3NhbCB3YXMgYW4gYWR2YW50YWdlb3VzIG9uZSBmb3IgQ2ljZXJvLCB3aG8gd291bGQgYmUgbGVzcyBzdWJqZWN0IHRvIGNlbnN1cmUgaWYgaGUgZGlkIG5vdCBwdXQgdGhlIGNvbnNwaXJhdG9ycyB0byBkZWF0aCwgY2hvc2UgdGhlIHNlY29uZCBwcm9wb3NhbCByYXRoZXIsIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoYXQgU2lsYW51cyBhbHNvIGNoYW5nZWQgaGlzIHBvc2l0aW9uIGFuZCBleGN1c2VkIGhpbXNlbGYgYnkgc2F5aW5nIHRoYXQgZXZlbiBoaXMgcHJvcG9zYWwgaGFkIG5vdCBtZWFudCBkZWF0aDogZm9yIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXh0cmVtZXN0IHB1bmlzaG1lbnQsPC9xPiBpbiB0aGUgY2FzZSBvZiBhIFJvbWFuIHNlbmF0b3IsIG1lYW50IHRoZSBwcmlzb24uIEx1dGF0aXVzIENhdHVsdXMgd2FzIHRoZSBmaXJzdCB0byBvcHBvc2UgdGhlIG9waW5pb24gd2hpY2ggQ2Flc2FyIGhhZCBnaXZlbjsgdGhlbiBDYXRvIGZvbGxvd2VkIGhpbSwgaGVscGluZyBieSB0aGUgdmVoZW1lbmNlIG9mIGhpcyBzcGVlY2ggdG8gZml4IHN1c3BpY2lvbiB1cG9uIENhZXNhciwgYW5kIGZpbGxlZCB0aGUgc2VuYXRlIHdpdGggYW5ncnkgcmVzb2x1dGlvbiwgc28gdGhhdCBhIGRlY3JlZSBvZiBkZWF0aCB3YXMgcGFzc2VkIHVwb24gdGhlIGNvbnNwaXJhdG9ycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXMgcmVnYXJkZWQgdGhlIGNvbmZpc2NhdGlvbiBvZiB0aGVpciBwcm9wZXJ0eSwgaG93ZXZlciwgQ2Flc2FyIG1hZGUgb3Bwb3NpdGlvbiwgZGVlbWluZyBpdCB3cm9uZyB0aGF0IHRoZSBtZXJjaWZ1bCBwYXJ0IG9mIGhpcyBvd24gcHJvcG9zYWwgc2hvdWxkIGJlIHJlamVjdGVkIGFuZCB0aGUgb25lIHBhcnQgdGhhdCB3YXMgbW9zdCBzZXZlcmUgYWRvcHRlZC4gQW5kIHdoZW4gbWFueSBvZiB0aGUgc2VuYXRvcnMgaW5zaXN0ZWQgdXBvbiBpdCwgaGUgaW52b2tlZCB0aGUgYWlkIG9mIHRoZSB0cmlidW5lcywgYnV0IHRoZXkgd291bGQgbm90IGxpc3RlbiB0byBoaXMgYXBwZWFsOyBDaWNlcm8gaGltc2VsZiwgaG93ZXZlciwgeWllbGRlZCB0aGUgcG9pbnQsIGFuZCByZW1pdHRlZCB0aGF0IHBhcnQgb2YgdGhlIHZvdGUgd2hpY2ggY2FsbGVkIGZvciBjb25maXNjYXRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgdGhlbiwgaXQgd2FzIENhZXNhcidzIHR1cm4gdG8gZ2l2ZSBoaXMgb3BpbmlvbiwgaGUgcm9zZSBhbmQgZGVjbGFyZWQgaXQgdG8gYmUgYWdhaW5zdCBwdXR0aW5nIHRoZSBjb25zcGlyYXRvcnMgdG8gZGVhdGgsIGJ1dCBpbiBmYXZvdXIgb2YgY29uZmlzY2F0aW5nIHRoZWlyIHByb3BlcnR5IGFuZCByZW1vdmluZyB0aGVtIHRvIHdoYXRldmVyIGNpdGllcyBvZiBJdGFseSBDaWNlcm8gbWlnaHQgZGVlbSBiZXN0LCB0aGVyZSB0byBiZSBwdXQgaW4gZmV0dGVycyBhbmQgY2xvc2VseSBndWFyZGVkIHVudGlsIENhdGlsaW5lIHNob3VsZCBiZSBkZWZlYXRlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwcm9wb3NhbCBvZiBDYWVzYXIgd2FzIG1lcmNpZnVsIGFuZCBpdHMgYXV0aG9yIGEgdmVyeSBhYmxlIHNwZWFrZXIsIGFuZCBDaWNlcm8gYWRkZWQgbm8gbGl0dGxlIHdlaWdodCB0byBpdC4gRm9yIHdoZW4gaGUgcm9zZSB0byBzcGVhayBoaW1zZWxmLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDQuMSIgdmFsaWQ9InllcyI+Zm91cnRoIG9yYXRpb24gPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aW4gQ2F0aWxpbmFtPC90aXRsZT4KICAgICAgICAgICAgICAgPC9iaWJsPi48L25vdGU+IGhlIGhhbmRsZWQgdGhlIHN1YmplY3QgaW4gYm90aCB3YXlzLCBub3cgZmF2b3VyaW5nIHRoZSBmaXJzdCBwcm9wb3NhbCBhbmQgbm93IHRoYXQgb2YgQ2Flc2FyLiBBbGwgaGlzIGZyaWVuZHMsIHRvbywgdGhpbmtpbmcgdGhhdCBDYWVzYXIncyBwcm9wb3NhbCB3YXMgYW4gYWR2YW50YWdlb3VzIG9uZSBmb3IgQ2ljZXJvLCB3aG8gd291bGQgYmUgbGVzcyBzdWJqZWN0IHRvIGNlbnN1cmUgaWYgaGUgZGlkIG5vdCBwdXQgdGhlIGNvbnNwaXJhdG9ycyB0byBkZWF0aCwgY2hvc2UgdGhlIHNlY29uZCBwcm9wb3NhbCByYXRoZXIsIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gNC4xIiB2YWxpZD0ieWVzIj5mb3VydGggb3JhdGlvbiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBDYXRpbGluYW08L3RpdGxlPgogICAgICAgICAgICAgICA8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIENhdGlsaW5hbTwvdGl0bGU+CiAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoYXQgU2lsYW51cyBhbHNvIGNoYW5nZWQgaGlzIHBvc2l0aW9uIGFuZCBleGN1c2VkIGhpbXNlbGYgYnkgc2F5aW5nIHRoYXQgZXZlbiBoaXMgcHJvcG9zYWwgaGFkIG5vdCBtZWFudCBkZWF0aDogZm9yIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5leHRyZW1lc3QgcHVuaXNobWVudCw8L3E+IGluIHRoZSBjYXNlIG9mIGEgUm9tYW4gc2VuYXRvciwgbWVhbnQgdGhlIHByaXNvbi4gTHV0YXRpdXMgQ2F0dWx1cyB3YXMgdGhlIGZpcnN0IHRvIG9wcG9zZSB0aGUgb3BpbmlvbiB3aGljaCBDYWVzYXIgaGFkIGdpdmVuOyB0aGVuIENhdG8gZm9sbG93ZWQgaGltLCBoZWxwaW5nIGJ5IHRoZSB2ZWhlbWVuY2Ugb2YgaGlzIHNwZWVjaCB0byBmaXggc3VzcGljaW9uIHVwb24gQ2Flc2FyLCBhbmQgZmlsbGVkIHRoZSBzZW5hdGUgd2l0aCBhbmdyeSByZXNvbHV0aW9uLCBzbyB0aGF0IGEgZGVjcmVlIG9mIGRlYXRoIHdhcyBwYXNzZWQgdXBvbiB0aGUgY29uc3BpcmF0b3JzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIHJlZ2FyZGVkIHRoZSBjb25maXNjYXRpb24gb2YgdGhlaXIgcHJvcGVydHksIGhvd2V2ZXIsIENhZXNhciBtYWRlIG9wcG9zaXRpb24sIGRlZW1pbmcgaXQgd3JvbmcgdGhhdCB0aGUgbWVyY2lmdWwgcGFydCBvZiBoaXMgb3duIHByb3Bvc2FsIHNob3VsZCBiZSByZWplY3RlZCBhbmQgdGhlIG9uZSBwYXJ0IHRoYXQgd2FzIG1vc3Qgc2V2ZXJlIGFkb3B0ZWQuIEFuZCB3aGVuIG1hbnkgb2YgdGhlIHNlbmF0b3JzIGluc2lzdGVkIHVwb24gaXQsIGhlIGludm9rZWQgdGhlIGFpZCBvZiB0aGUgdHJpYnVuZXMsIGJ1dCB0aGV5IHdvdWxkIG5vdCBsaXN0ZW4gdG8gaGlzIGFwcGVhbDsgQ2ljZXJvIGhpbXNlbGYsIGhvd2V2ZXIsIHlpZWxkZWQgdGhlIHBvaW50LCBhbmQgcmVtaXR0ZWQgdGhhdCBwYXJ0IG9mIHRoZSB2b3RlIHdoaWNoIGNhbGxlZCBmb3IgY29uZmlzY2F0aW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhlIHdlbnQgd2l0aCB0aGUgc2VuYXRlIHRvIGZldGNoIHRoZSBjb25zcGlyYXRvcnMuIFRoZXNlIHdlcmUgbm90IGFsbCBpbiB0aGUgc2FtZSBwbGFjZSwgYnV0IGRpZmZlcmVudCBwcmFldG9ycyBoYWQgZGlmZmVyZW50IG9uZXMgdW5kZXIgZ3VhcmQuIEFuZCBmaXJzdCBoZSB0b29rIExlbnR1bHVzIGZyb20gdGhlIFBhbGF0aW5lIGhpbGwgYW5kIGxlZCBoaW0gYWxvbmcgdGhlIFZpYSBTYWNyYSBhbmQgdGhyb3VnaCB0aGUgbWlkZGxlIG9mIHRoZSBmb3J1bSwgdGhlIG1lbiBvZiBoaWdoZXN0IGF1dGhvcml0eSBzdXJyb3VuZGluZyBoaW0gYXMgYSBib2R5LWd1YXJkLCBhbmQgdGhlIHBlb3BsZSBzaHVkZGVyaW5nIGF0IHdoYXQgd2FzIGJlaW5nIGRvbmUgYW5kIHBhc3NpbmcgYWxvbmcgaW4gc2lsZW5jZSwgYW5kIGVzcGVjaWFsbHkgdGhlIHlvdW5nIG1lbiwgYXMgdGhvdWdoIHRoZXkgdGhvdWdodCB0aGV5IHdlcmUgYmVpbmcgaW5pdGlhdGVkIHdpdGggZmVhciBhbmQgdHJlbWJsaW5nIGludG8gc29tZSBhbmNpZW50IG15c3RlcmllcyBvZiBhbiBhcmlzdG9jcmF0aWMgcmVnaW1lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENpY2VybyBoYWQgcGFzc2VkIHRocm91Z2ggdGhlIGZvcnVtIGFuZCByZWFjaGVkIHRoZSBwcmlzb24sIGhlIGRlbGl2ZXJlZCBMZW50dWx1cyB0byB0aGUgcHVibGljIGV4ZWN1dGlvbmVyIHdpdGggdGhlIG9yZGVyIHRvIHB1dCBoaW0gdG8gZGVhdGguIFRoZW4gQ2V0aGVndXMgaW4gaGlzIHR1cm4sIGFuZCBzbyBlYWNoIG9uZSBvZiB0aGUgb3RoZXJzLCBoZSBicm91Z2h0IGRvd24gdG8gdGhlIHByaXNvbiBhbmQgaGFkIGhpbSBleGVjdXRlZC4gQW5kIHNlZWluZyB0aGF0IG1hbnkgbWVtYmVycyBvZiB0aGUgY29uc3BpcmFjeSB3ZXJlIHN0aWxsIGFzc2VtYmxlZCBpbiB0aGUgZm9ydW0gaW4gaWdub3JhbmNlIG9mIHdoYXQgaGFkIGJlZW4gZG9uZSBhbmQgd2FpdGluZyBmb3IgbmlnaHQgdG8gY29tZSwgd2l0aCB0aGUgaWRlYSB0aGF0IHRoZSBtZW4gd2VyZSBzdGlsbCBsaXZpbmcgYW5kIG1pZ2h0IGJlIHJlc2N1ZWQsIGhlIGNyaWVkIG91dCB0byB0aGVtIHdpdGggYSBsb3VkIHZvaWNlIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXkgaGF2ZSBsaXZlZC48L3E+IEZvciB0aHVzIHRoZSBSb21hbnMgd2hvIHdpc2ggdG8gYXZvaWQgd29yZHMgb2YgaWxsIG9tZW4gaW5kaWNhdGUgZGVhdGguCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSB3ZW50IHdpdGggdGhlIHNlbmF0ZSB0byBmZXRjaCB0aGUgY29uc3BpcmF0b3JzLiBUaGVzZSB3ZXJlIG5vdCBhbGwgaW4gdGhlIHNhbWUgcGxhY2UsIGJ1dCBkaWZmZXJlbnQgcHJhZXRvcnMgaGFkIGRpZmZlcmVudCBvbmVzIHVuZGVyIGd1YXJkLiBBbmQgZmlyc3QgaGUgdG9vayBMZW50dWx1cyBmcm9tIHRoZSBQYWxhdGluZSBoaWxsIGFuZCBsZWQgaGltIGFsb25nIHRoZSBWaWEgU2FjcmEgYW5kIHRocm91Z2ggdGhlIG1pZGRsZSBvZiB0aGUgZm9ydW0sIHRoZSBtZW4gb2YgaGlnaGVzdCBhdXRob3JpdHkgc3Vycm91bmRpbmcgaGltIGFzIGEgYm9keS1ndWFyZCwgYW5kIHRoZSBwZW9wbGUgc2h1ZGRlcmluZyBhdCB3aGF0IHdhcyBiZWluZyBkb25lIGFuZCBwYXNzaW5nIGFsb25nIGluIHNpbGVuY2UsIGFuZCBlc3BlY2lhbGx5IHRoZSB5b3VuZyBtZW4sIGFzIHRob3VnaCB0aGV5IHRob3VnaHQgdGhleSB3ZXJlIGJlaW5nIGluaXRpYXRlZCB3aXRoIGZlYXIgYW5kIHRyZW1ibGluZyBpbnRvIHNvbWUgYW5jaWVudCBteXN0ZXJpZXMgb2YgYW4gYXJpc3RvY3JhdGljIHJlZ2ltZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ2ljZXJvIGhhZCBwYXNzZWQgdGhyb3VnaCB0aGUgZm9ydW0gYW5kIHJlYWNoZWQgdGhlIHByaXNvbiwgaGUgZGVsaXZlcmVkIExlbnR1bHVzIHRvIHRoZSBwdWJsaWMgZXhlY3V0aW9uZXIgd2l0aCB0aGUgb3JkZXIgdG8gcHV0IGhpbSB0byBkZWF0aC4gVGhlbiBDZXRoZWd1cyBpbiBoaXMgdHVybiwgYW5kIHNvIGVhY2ggb25lIG9mIHRoZSBvdGhlcnMsIGhlIGJyb3VnaHQgZG93biB0byB0aGUgcHJpc29uIGFuZCBoYWQgaGltIGV4ZWN1dGVkLiBBbmQgc2VlaW5nIHRoYXQgbWFueSBtZW1iZXJzIG9mIHRoZSBjb25zcGlyYWN5IHdlcmUgc3RpbGwgYXNzZW1ibGVkIGluIHRoZSBmb3J1bSBpbiBpZ25vcmFuY2Ugb2Ygd2hhdCBoYWQgYmVlbiBkb25lIGFuZCB3YWl0aW5nIGZvciBuaWdodCB0byBjb21lLCB3aXRoIHRoZSBpZGVhIHRoYXQgdGhlIG1lbiB3ZXJlIHN0aWxsIGxpdmluZyBhbmQgbWlnaHQgYmUgcmVzY3VlZCwgaGUgY3JpZWQgb3V0IHRvIHRoZW0gd2l0aCBhIGxvdWQgdm9pY2UgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGV5IGhhdmUgbGl2ZWQuPC9xPiBGb3IgdGh1cyB0aGUgUm9tYW5zIHdobyB3aXNoIHRvIGF2b2lkIHdvcmRzIG9mIGlsbCBvbWVuIGluZGljYXRlIGRlYXRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgbm93IGV2ZW5pbmcsIGFuZCBDaWNlcm8gd2VudCB1cCB0aHJvdWdoIHRoZSBmb3J1bSB0byBoaXMgaG91c2UsIHRoZSBjaXRpemVucyBubyBsb25nZXIgZXNjb3J0aW5nIGhpbSBvbiBoaXMgd2F5IHdpdGggc2lsZW50IGRlY29ydW0sIGJ1dCByZWNlaXZpbmcgaGltIHdpdGggY3JpZXMgYW5kIGNsYXBwaW5nIG9mIGhhbmRzIGFzIGhlIHBhc3NlZCBhbG9uZywgY2FsbGluZyBoaW0gdGhlIHNhdmlvdXIgYW5kIGZvdW5kZXIgb2YgaGlzIGNvdW50cnkuIEFuZCBtYW55IGxpZ2h0cyBpbGx1bWluYXRlZCB0aGUgc3RyZWV0cywgc2luY2UgcGVvcGxlIHBsYWNlZCBsYW1wcyBhbmQgdG9yY2hlcyBhdCB0aGVpciBkb29ycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdvbWVuLCB0b28sIGRpc3BsYXllZCBsaWdodHMgdXBvbiB0aGUgaG91c2V0b3BzIGluIGhvbm91ciBvZiB0aGUgbWFuLCBhbmQgdGhhdCB0aGV5IG1pZ2h0IHNlZSBoaW0gZ29pbmcgdXAgdG8gaGlzIGhvbWUgaW4gZ3JlYXQgc3RhdGUgdW5kZXIgZXNjb3J0IG9mIHRoZSBub2JsZXN0IGNpdGl6ZW5zLiBNb3N0IG9mIHRoZXNlIGhhZCBicm91Z2h0IHRvIGFuIGVuZCBncmVhdCB3YXJzIGFuZCBlbnRlcmVkIHRoZSBjaXR5IGluIHRyaXVtcGgsIGFuZCBoYWQgYWRkZWQgdG8gdGhlIFJvbWFuIGRvbWluaW9uIG5vIHNtYWxsIGV4dGVudCBvZiBsYW5kIGFuZCBzZWE7IGJ1dCB0aGV5IG5vdyB3YWxrZWQgYWxvbmcgY29uZmVzc2luZyB0byBvbmUgYW5vdGhlciB0aGF0IHRvIG1hbnkgb2YgdGhlIGNvbW1hbmRlcnMgYW5kIGdlbmVyYWxzIG9mIHRoZSB0aW1lIHRoZSBSb21hbiBwZW9wbGUgd2VyZSBpbmRlYnRlZCBmb3Igd2VhbHRoIGFuZCBzcG9pbHMgYW5kIHBvd2VyLCBidXQgZm9yIHByZXNlcnZhdGlvbiBhbmQgc2FmZXR5IHRvIENpY2VybyBhbG9uZSwgd2hvIGhhZCBmcmVlZCB0aGVtIGZyb20gc28gcGVjdWxpYXIgYW5kIHNvIGdyZWF0IGEgcGVyaWwuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgbm90IGhpcyBwcmV2ZW50aW5nIHRoZWlyIHNjaGVtZXMgYW5kIHB1bmlzaGluZyB0aGUgc2NoZW1lcnMgd2hpY2ggc2VlbWVkIHNvIHdvbmRlcmZ1bCwgYnV0IGhpcyBxdWVuY2hpbmcgdGhlIGdyZWF0ZXN0IG9mIGFsbCByZXZvbHV0aW9ucyB3aXRoIHRoZSBmZXdlc3QgcG9zc2libGUgZXZpbHMsIHdpdGhvdXQgc2VkaXRpb24gYW5kIGNvbW1vdGlvbi4gRm9yIG1vc3Qgb2YgdGhvc2Ugd2hvIGhhZCBmbG9ja2VkIHRvIHRoZSBzdGFuZGFyZCBvciBDYXRpbGluZSwgYXMgc29vbiBhcyB0aGV5IGxlYXJuZWQgdGhlIGZhdGUgb2YgTGVudHVsdXMgYW5kIENldGhlZ3VzLCBkZXNlcnRlZCBoaW0gYW5kIHdlbnQgYXdheTsgYW5kIENhdGlsaW5lLCBhZnRlciBhIGNvbmZsaWN0IHdpdGggaGlzIHJlbWFpbmluZyBmb3JjZXMgYWdhaW5zdCBBbnRvbml1cywgcGVyaXNoZWQgaGltc2VsZiBhbmQgaGlzIGFybXkgd2l0aCBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TmVhciB0aGUgYmVnaW5uaW5nIG9mIDYyIEIuQy48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBub3cgZXZlbmluZywgYW5kIENpY2VybyB3ZW50IHVwIHRocm91Z2ggdGhlIGZvcnVtIHRvIGhpcyBob3VzZSwgdGhlIGNpdGl6ZW5zIG5vIGxvbmdlciBlc2NvcnRpbmcgaGltIG9uIGhpcyB3YXkgd2l0aCBzaWxlbnQgZGVjb3J1bSwgYnV0IHJlY2VpdmluZyBoaW0gd2l0aCBjcmllcyBhbmQgY2xhcHBpbmcgb2YgaGFuZHMgYXMgaGUgcGFzc2VkIGFsb25nLCBjYWxsaW5nIGhpbSB0aGUgc2F2aW91ciBhbmQgZm91bmRlciBvZiBoaXMgY291bnRyeS4gQW5kIG1hbnkgbGlnaHRzIGlsbHVtaW5hdGVkIHRoZSBzdHJlZXRzLCBzaW5jZSBwZW9wbGUgcGxhY2VkIGxhbXBzIGFuZCB0b3JjaGVzIGF0IHRoZWlyIGRvb3JzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3b21lbiwgdG9vLCBkaXNwbGF5ZWQgbGlnaHRzIHVwb24gdGhlIGhvdXNldG9wcyBpbiBob25vdXIgb2YgdGhlIG1hbiwgYW5kIHRoYXQgdGhleSBtaWdodCBzZWUgaGltIGdvaW5nIHVwIHRvIGhpcyBob21lIGluIGdyZWF0IHN0YXRlIHVuZGVyIGVzY29ydCBvZiB0aGUgbm9ibGVzdCBjaXRpemVucy4gTW9zdCBvZiB0aGVzZSBoYWQgYnJvdWdodCB0byBhbiBlbmQgZ3JlYXQgd2FycyBhbmQgZW50ZXJlZCB0aGUgY2l0eSBpbiB0cml1bXBoLCBhbmQgaGFkIGFkZGVkIHRvIHRoZSBSb21hbiBkb21pbmlvbiBubyBzbWFsbCBleHRlbnQgb2YgbGFuZCBhbmQgc2VhOyBidXQgdGhleSBub3cgd2Fsa2VkIGFsb25nIGNvbmZlc3NpbmcgdG8gb25lIGFub3RoZXIgdGhhdCB0byBtYW55IG9mIHRoZSBjb21tYW5kZXJzIGFuZCBnZW5lcmFscyBvZiB0aGUgdGltZSB0aGUgUm9tYW4gcGVvcGxlIHdlcmUgaW5kZWJ0ZWQgZm9yIHdlYWx0aCBhbmQgc3BvaWxzIGFuZCBwb3dlciwgYnV0IGZvciBwcmVzZXJ2YXRpb24gYW5kIHNhZmV0eSB0byBDaWNlcm8gYWxvbmUsIHdobyBoYWQgZnJlZWQgdGhlbSBmcm9tIHNvIHBlY3VsaWFyIGFuZCBzbyBncmVhdCBhIHBlcmlsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgbm90IGhpcyBwcmV2ZW50aW5nIHRoZWlyIHNjaGVtZXMgYW5kIHB1bmlzaGluZyB0aGUgc2NoZW1lcnMgd2hpY2ggc2VlbWVkIHNvIHdvbmRlcmZ1bCwgYnV0IGhpcyBxdWVuY2hpbmcgdGhlIGdyZWF0ZXN0IG9mIGFsbCByZXZvbHV0aW9ucyB3aXRoIHRoZSBmZXdlc3QgcG9zc2libGUgZXZpbHMsIHdpdGhvdXQgc2VkaXRpb24gYW5kIGNvbW1vdGlvbi4gRm9yIG1vc3Qgb2YgdGhvc2Ugd2hvIGhhZCBmbG9ja2VkIHRvIHRoZSBzdGFuZGFyZCBvciBDYXRpbGluZSwgYXMgc29vbiBhcyB0aGV5IGxlYXJuZWQgdGhlIGZhdGUgb2YgTGVudHVsdXMgYW5kIENldGhlZ3VzLCBkZXNlcnRlZCBoaW0gYW5kIHdlbnQgYXdheTsgYW5kIENhdGlsaW5lLCBhZnRlciBhIGNvbmZsaWN0IHdpdGggaGlzIHJlbWFpbmluZyBmb3JjZXMgYWdhaW5zdCBBbnRvbml1cywgcGVyaXNoZWQgaGltc2VsZiBhbmQgaGlzIGFybXkgd2l0aCBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5OZWFyIHRoZSBiZWdpbm5pbmcgb2YgNjIgQi5DLjwvbm90ZT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhlcmUgd2VyZSB0aG9zZSB3aG8gd2VyZSByZWFkeSB0byBhYnVzZSBDaWNlcm8gZm9yIHdoYXQgaGUgaGFkIGRvbmUsIGFuZCB0byB3b3JrIGhpbSBoYXJtLCBhbmQgdGhleSBoYWQgYXMgbGVhZGVycywgYW1vbmcgdGhlIG1hZ2lzdHJhdGVzLWVsZWN0LCBDYWVzYXIgYXMgcHJhZXRvciwgYW5kIE1ldGVsbHVzIGFuZCBCZXN0aWE8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5CZXN0aWEgd2FzIHRyaWJ1bmUgaW4gNjMgQi5DLiwgYW5kIGNvdWxkIG5vdCBoYXZlIGhhZCBhbnkgcGFydCBpbiBkaWN0YXRpbmcgdGhlIHByb2NlZHVyZSBvZiBDaWNlcm8uPC9ub3RlPiBhcyB0cmlidW5lcy4gV2hlbiB0aGVzZSBhc3N1bWVkIG9mZmljZSwgQ2ljZXJvIGhhdmluZyBzdGlsbCBhIGZldyBkYXlzIG9mIGNvbnN1bGFyIGF1dGhvcml0eSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWVzYXIsIGFzIHByYWV0b3IsIGFzc3VtZWQgb2ZmaWNlIEphbnVhcnkgMSwgNjIgQi5DLiwgdGhlIGRheSBhZnRlciBDaWNlcm8gbGFpZCBkb3duIHRoZSBjb25zdWxzaGlwOyBidXQgdGhlIG5ldyB0cmlidW5lcyBmb3IgdGhlIHllYXIgNjIgYXNzdW1lZCBvZmZpY2UgZWFybHkgaW4gRGVjZW1iZXIgb2YgNjMuPC9ub3RlPiB0aGV5IHdvdWxkIG5vdCBwZXJtaXQgaGltIHRvIGhhcmFuZ3VlIHRoZSBwZW9wbGUsIGJ1dCBwbGFjaW5nIHRoZWlyIGJlbmNoZXMgc28gYXMgdG8gY29tbWFuZCB0aGUgcm9zdHJhLCB3b3VsZCBub3Qgc3VmZmVyIG9yIGFsbG93IGhpbSB0byBzcGVhazsgaW5zdGVhZCwgdGhleSBvcmRlcmVkIGhpbSwgaWYgaGUgd2lzaGVkLCBtZXJlbHkgdG8gcHJvbm91bmNlIHRoZSBvYXRoIHVzdWFsIG9uIGdpdmluZyB1cCBvZmZpY2UsIGFuZCB0aGVuIGNvbWUgZG93bi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Q2ljZXJvIGFjY2VwdGVkIHRoZXNlIHRlcm1zIGFuZCBjYW1lIGZvcndhcmQgdG8gcHJvbm91bmNlIGhpcyBvYXRoOyBhbmQgd2hlbiBoZSBoYWQgb2J0YWluZWQgc2lsZW5jZSwgaGUgcHJvbm91bmNlZCwgbm90IHRoZSB1c3VhbCBvYXRoLCBidXQgb25lIG9mIGhpcyBvd24gYW5kIGEgbmV3IG9uZSwgc3dlYXJpbmcgdGhhdCBpbiB2ZXJ5IHRydXRoIGhlIGhhZCBzYXZlZCBoaXMgY291bnRyeSBhbmQgbWFpbnRhaW5lZCBoZXIgc3VwcmVtYWN5LiBBbmQgYWxsIHRoZSBwZW9wbGUgY29uZmlybWVkIGhpcyBvYXRoIGZvciBoaW0uIEF0IHRoaXMgQ2Flc2FyIGFuZCB0aGUgdHJpYnVuZXMgd2VyZSBzdGlsbCBtb3JlIHZleGVkIGFuZCBjb250cml2ZWQgZnJlc2ggdHJvdWJsZXMgZm9yIENpY2Vyby4gQW1vbmcgb3RoZXIgdGhpbmdzLCBhIGxhdyB3YXMgaW50cm9kdWNlZCBieSB0aGVtIGZvciBjYWxsaW5nIFBvbXBleSBob21lIHdpdGggaGlzIGFybXksIGluIG9yZGVyLCBmb3Jzb290aCwgdGhhdCBoZSBtaWdodCBwdXQgZG93biB0aGUgYXJiaXRyYXJ5IHBvd2VyIG9mIENpY2Vyby4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhdG8sIHdobyB3YXMgdHJpYnVuZSBhdCB0aGlzIHRpbWUsIHdhcyBhIGdyZWF0IGhlbHAgdG8gQ2ljZXJvIGFuZCB0byB0aGUgd2hvbGUgc3RhdGUsIGFuZCBvcHBvc2VkIHRoZSBtZWFzdXJlcyBvZiB0aGUgb3RoZXIgdHJpYnVuZXMgd2l0aCBhbiBhdXRob3JpdHkgZXF1YWwgdG8gdGhlaXJzIGFuZCBhIGdyZWF0ZXIgZ29vZCByZXB1dGUuIEZvciBoZSBlYXNpbHkgcHV0IGEgc3RvcCB0byB0aGVpciBvdGhlciBwcm9qZWN0cywgYW5kIHNvIGhpZ2hseSBleHRvbGxlZCB0aGUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hcmJpdHJhcnkgcG93ZXI8L3E+IG9mIENpY2VybyBpbiBhIHNwZWVjaCB0byB0aGUgcGVvcGxlLCB0aGF0IHRoZXkgdm90ZWQgaGltIHRoZSBncmVhdGVzdCBob25vdXJzIGV2ZXIgY29uZmVycmVkIGFuZCBjYWxsZWQgaGltIHRoZSBmYXRoZXIgb2YgaGlzIGNvdW50cnkuIEZvciBoZSB3YXMgdGhlIGZpcnN0LCBhcyBpdCBzZWVtcywgdG8gcmVjZWl2ZSB0aGlzIHRpdGxlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNpY2VybyBoaW1zZWxmIG5vd2hlcmUgc2F5cyB0aGlzLCBub3IgZG9lcyBoZSBtZW50aW9uIENhdG8gaW4gY29ubmVjdGlvbiB3aXRoIHRoZSB0aXRsZS4gSW4gaGlzIG9yYXRpb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gUGlzLiA2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPmluIFBpc29uZW08L3RpdGxlPiwgMywgNjwvYmlibD4sIGhlIHNheXMgdGhhdCBRdWludHVzIENhdHVsdXMgZ2F2ZSBoaW0gdGhlIHRpdGxlIGluIHRoZSBTZW5hdGUuPC9ub3RlPiBhZnRlciBDYXRvIGhhZCBnaXZlbiBpdCB0byBoaW0gYmVmb3JlIHRoZSBwZW9wbGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhlcmUgd2VyZSB0aG9zZSB3aG8gd2VyZSByZWFkeSB0byBhYnVzZSBDaWNlcm8gZm9yIHdoYXQgaGUgaGFkIGRvbmUsIGFuZCB0byB3b3JrIGhpbSBoYXJtLCBhbmQgdGhleSBoYWQgYXMgbGVhZGVycywgYW1vbmcgdGhlIG1hZ2lzdHJhdGVzLWVsZWN0LCBDYWVzYXIgYXMgcHJhZXRvciwgYW5kIE1ldGVsbHVzIGFuZCBCZXN0aWE8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkJlc3RpYSB3YXMgdHJpYnVuZSBpbiA2MyBCLkMuLCBhbmQgY291bGQgbm90IGhhdmUgaGFkIGFueSBwYXJ0IGluIGRpY3RhdGluZyB0aGUgcHJvY2VkdXJlIG9mIENpY2Vyby48L25vdGU+IGFzIHRyaWJ1bmVzLiBXaGVuIHRoZXNlIGFzc3VtZWQgb2ZmaWNlLCBDaWNlcm8gaGF2aW5nIHN0aWxsIGEgZmV3IGRheXMgb2YgY29uc3VsYXIgYXV0aG9yaXR5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Flc2FyLCBhcyBwcmFldG9yLCBhc3N1bWVkIG9mZmljZSBKYW51YXJ5IDEsIDYyIEIuQy4sIHRoZSBkYXkgYWZ0ZXIgQ2ljZXJvIGxhaWQgZG93biB0aGUgY29uc3Vsc2hpcDsgYnV0IHRoZSBuZXcgdHJpYnVuZXMgZm9yIHRoZSB5ZWFyIDYyIGFzc3VtZWQgb2ZmaWNlIGVhcmx5IGluIERlY2VtYmVyIG9mIDYzLjwvbm90ZT4gdGhleSB3b3VsZCBub3QgcGVybWl0IGhpbSB0byBoYXJhbmd1ZSB0aGUgcGVvcGxlLCBidXQgcGxhY2luZyB0aGVpciBiZW5jaGVzIHNvIGFzIHRvIGNvbW1hbmQgdGhlIHJvc3RyYSwgd291bGQgbm90IHN1ZmZlciBvciBhbGxvdyBoaW0gdG8gc3BlYWs7IGluc3RlYWQsIHRoZXkgb3JkZXJlZCBoaW0sIGlmIGhlIHdpc2hlZCwgbWVyZWx5IHRvIHByb25vdW5jZSB0aGUgb2F0aCB1c3VhbCBvbiBnaXZpbmcgdXAgb2ZmaWNlLCBhbmQgdGhlbiBjb21lIGRvd24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNpY2VybyBhY2NlcHRlZCB0aGVzZSB0ZXJtcyBhbmQgY2FtZSBmb3J3YXJkIHRvIHByb25vdW5jZSBoaXMgb2F0aDsgYW5kIHdoZW4gaGUgaGFkIG9idGFpbmVkIHNpbGVuY2UsIGhlIHByb25vdW5jZWQsIG5vdCB0aGUgdXN1YWwgb2F0aCwgYnV0IG9uZSBvZiBoaXMgb3duIGFuZCBhIG5ldyBvbmUsIHN3ZWFyaW5nIHRoYXQgaW4gdmVyeSB0cnV0aCBoZSBoYWQgc2F2ZWQgaGlzIGNvdW50cnkgYW5kIG1haW50YWluZWQgaGVyIHN1cHJlbWFjeS4gQW5kIGFsbCB0aGUgcGVvcGxlIGNvbmZpcm1lZCBoaXMgb2F0aCBmb3IgaGltLiBBdCB0aGlzIENhZXNhciBhbmQgdGhlIHRyaWJ1bmVzIHdlcmUgc3RpbGwgbW9yZSB2ZXhlZCBhbmQgY29udHJpdmVkIGZyZXNoIHRyb3VibGVzIGZvciBDaWNlcm8uIEFtb25nIG90aGVyIHRoaW5ncywgYSBsYXcgd2FzIGludHJvZHVjZWQgYnkgdGhlbSBmb3IgY2FsbGluZyBQb21wZXkgaG9tZSB3aXRoIGhpcyBhcm15LCBpbiBvcmRlciwgZm9yc29vdGgsIHRoYXQgaGUgbWlnaHQgcHV0IGRvd24gdGhlIGFyYml0cmFyeSBwb3dlciBvZiBDaWNlcm8uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvLCB3aG8gd2FzIHRyaWJ1bmUgYXQgdGhpcyB0aW1lLCB3YXMgYSBncmVhdCBoZWxwIHRvIENpY2VybyBhbmQgdG8gdGhlIHdob2xlIHN0YXRlLCBhbmQgb3Bwb3NlZCB0aGUgbWVhc3VyZXMgb2YgdGhlIG90aGVyIHRyaWJ1bmVzIHdpdGggYW4gYXV0aG9yaXR5IGVxdWFsIHRvIHRoZWlycyBhbmQgYSBncmVhdGVyIGdvb2QgcmVwdXRlLiBGb3IgaGUgZWFzaWx5IHB1dCBhIHN0b3AgdG8gdGhlaXIgb3RoZXIgcHJvamVjdHMsIGFuZCBzbyBoaWdobHkgZXh0b2xsZWQgdGhlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hcmJpdHJhcnkgcG93ZXI8L3E+IG9mIENpY2VybyBpbiBhIHNwZWVjaCB0byB0aGUgcGVvcGxlLCB0aGF0IHRoZXkgdm90ZWQgaGltIHRoZSBncmVhdGVzdCBob25vdXJzIGV2ZXIgY29uZmVycmVkIGFuZCBjYWxsZWQgaGltIHRoZSBmYXRoZXIgb2YgaGlzIGNvdW50cnkuIEZvciBoZSB3YXMgdGhlIGZpcnN0LCBhcyBpdCBzZWVtcywgdG8gcmVjZWl2ZSB0aGlzIHRpdGxlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2ljZXJvIGhpbXNlbGYgbm93aGVyZSBzYXlzIHRoaXMsIG5vciBkb2VzIGhlIG1lbnRpb24gQ2F0byBpbiBjb25uZWN0aW9uIHdpdGggdGhlIHRpdGxlLiBJbiBoaXMgb3JhdGlvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFBpcy4gNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIFBpc29uZW08L3RpdGxlPiwgMywgNjwvYmlibD4sIGhlIHNheXMgdGhhdCBRdWludHVzIENhdHVsdXMgZ2F2ZSBoaW0gdGhlIHRpdGxlIGluIHRoZSBTZW5hdGUuPC9ub3RlPiBhZnRlciBDYXRvIGhhZCBnaXZlbiBpdCB0byBoaW0gYmVmb3JlIHRoZSBwZW9wbGUuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gUGlzLiA2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aW4gUGlzb25lbTwvdGl0bGU+LCAzLCA2PC9iaWJsPiwgaGUgc2F5cyB0aGF0IFF1aW50dXMgQ2F0dWx1cyBnYXZlIGhpbSB0aGUgdGl0bGUgaW4gdGhlIFNlbmF0ZS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBQaXNvbmVtPC90aXRsZT4sIDMsIDY8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBhdCB0aGlzIHRpbWUgQ2ljZXJvIGhhZCB0aGUgZ3JlYXRlc3QgcG93ZXIgaW4gdGhlIHN0YXRlLCBidXQgaGUgbWFkZSBoaW1zZWxmIGdlbmVyYWxseSBvZGlvdXMsIG5vdCBieSBhbnkgYmFzZSBhY3Rpb24sIGJ1dCBieSBjb250aW51YWxseSBwcmFpc2luZyBhbmQgbWFnbmlmeWluZyBoaW1zZWxmLCB3aGljaCBtYWRlIGhpbSBoYXRlZnVsIHRvIG1hbnkuIEZvciB0aGVyZSBjb3VsZCBiZSBubyBzZXNzaW9uIGVpdGhlciBvZiBzZW5hdGUgb3IgYXNzZW1ibHkgb3IgY291cnQgb2YganVzdGljZSBpbiB3aGljaCBvbmUgd2FzIG5vdCBvYmxpZ2VkIHRvIGhlYXIgQ2F0aWxpbmUgYW5kIExlbnR1bHVzIGVuZGxlc3NseSB0YWxrZWQgYWJvdXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5heSwgaGUgZXZlbiB3ZW50IHNvIGZhciBhcyB0byBmaWxsIGhpcyBib29rcyBhbmQgd3JpdGluZ3Mgd2l0aCB0aGVzZSBwcmFpc2VzIG9mIGhpbXNlbGY7IGFuZCBoZSBtYWRlIGhpcyBvcmF0b3J5LCB3aGljaCB3YXMgbmF0dXJhbGx5IHZlcnkgcGxlYXNhbnQgYW5kIGhhZCB0aGUgZ3JlYXRlc3QgY2hhcm0sIGlya3NvbWUgYW5kIHRlZGlvdXMgdG8gaGlzIGhlYXJlcnMsIHNpbmNlIHRoaXMgdW5wbGVhc2FudCBwcmFjdGljZSBjbHVuZyB0byBoaW0gbGlrZSBhIGZhdGFsaXR5LiBCdXQgbmV2ZXJ0aGVsZXNzLCBhbHRob3VnaCBoZSBjaGVyaXNoZWQgc28gc3Ryb25nIGFuIGFtYml0aW9uLCBoZSB3YXMgZnJlZSBmcm9tIGVudnlpbmcgb3RoZXJzLCBzaW5jZSBoZSB3YXMgbW9zdCB1bmdydWRnaW5nIGluIGhpcyBlbmNvbWl1bXMgdXBvbiBoaXMgcHJlZGVjZXNzb3JzIGFuZCBjb250ZW1wb3JhcmllcywgYXMgbWF5IGJlIGdhdGhlcmVkIGZyb20gaGlzIHdyaXRpbmdzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBhcmUgYWxzbyBtYW55IHNheWluZ3Mgb2YgaGlzIG9uIHJlY29yZCB3aGljaCBwcm92ZSB0aGlzOyBmb3IgaW5zdGFuY2UsIGhlIHNhaWQgb2YgQXJpc3RvdGxlIHRoYXQgaGUgd2FzIGEgcml2ZXIgb2YgbGlxdWlkIGdvbGQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEx1Yy4gMTE5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFjYWQuIFByaW9yLjwvdGl0bGU+IGlpLiAzOCwgMTE5LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgb2YgdGhlIGRpYWxvZ3VlcyBvZiBQbGF0byB0aGF0IEp1cGl0ZXIsIHdlcmUgaXQgaGlzIG5hdHVyZSB0byB1c2UgaHVtYW4gc3BlZWNoLCB3b3VsZCB0aHVzIGRpc2NvdXJzZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gYWQgQnJ1dC4gMTIxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJydXR1czwvdGl0bGU+LCAzMSwgMTIxPC9iaWJsPiAoPGZvcmVpZ24gbGFuZz0ibGEiPnNpIDxlbXBoPkdyYWVjZTwvZW1waD4gbG9xdWF0dXI8L2ZvcmVpZ24+KS48L25vdGU+IFRoZW9waHJhc3R1cywgdG9vLCBoZSB1c2VkIHRvIGNhbGwgaGlzIG93biBzcGVjaWFsIGRlbGlnaHQuIEFuZCB3aGVuIGhlIHdhcyBhc2tlZCB3aGljaCBvZiB0aGUgc3BlZWNoZXMgb2YgRGVtb3N0aGVuZXMgaGUgdGhvdWdodCB0aGUgYmVzdCwgaGUgcmVwbGllZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgbG9uZ2VzdC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBzb21lIG9mIHRob3NlIHdobyBwcmV0ZW5kIHRvIGJlIGltaXRhdG9ycyBvZiBEZW1vc3RoZW5lcyBkd2VsbCBtdWNoIHVwb24gYW4gZXhwcmVzc2lvbiB3aGljaCBDaWNlcm8gdXNlZCBpbiBhIGxldHRlciB0byBvbmUgb2YgaGlzIGZyaWVuZHMsIHRvIHRoZSBlZmZlY3QgdGhhdCBpbiBzb21lIHBhcnRzIG9mIGhpcyBzcGVlY2hlcyBEZW1vc3RoZW5lcyBub2RzOyBidXQgb2YgdGhlIGdyZWF0IGFuZCBhZG1pcmFibGUgcHJhaXNlcyB3aGljaCBoZSBvZnRlbiBiZXN0b3dzIHVwb24gaGltLCBhbmQgb2YgdGhlIGZhY3QgdGhhdCB0aG9zZSBzcGVlY2hlcyBvZiBoaXMgb3duIHRvIHdoaWNoIGhlIGRldm90ZWQgbW9zdCBsYWJvdXIsIG5hbWVseSwgdGhlIHNwZWVjaGVzIGFnYWluc3QgQW50b255LCB3ZXJlIGVudGl0bGVkIGJ5IGhpbSBQaGlsaXBwaWNzLCB0aGV5IHNheSBub3RoaW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gYXQgdGhpcyB0aW1lIENpY2VybyBoYWQgdGhlIGdyZWF0ZXN0IHBvd2VyIGluIHRoZSBzdGF0ZSwgYnV0IGhlIG1hZGUgaGltc2VsZiBnZW5lcmFsbHkgb2Rpb3VzLCBub3QgYnkgYW55IGJhc2UgYWN0aW9uLCBidXQgYnkgY29udGludWFsbHkgcHJhaXNpbmcgYW5kIG1hZ25pZnlpbmcgaGltc2VsZiwgd2hpY2ggbWFkZSBoaW0gaGF0ZWZ1bCB0byBtYW55LiBGb3IgdGhlcmUgY291bGQgYmUgbm8gc2Vzc2lvbiBlaXRoZXIgb2Ygc2VuYXRlIG9yIGFzc2VtYmx5IG9yIGNvdXJ0IG9mIGp1c3RpY2UgaW4gd2hpY2ggb25lIHdhcyBub3Qgb2JsaWdlZCB0byBoZWFyIENhdGlsaW5lIGFuZCBMZW50dWx1cyBlbmRsZXNzbHkgdGFsa2VkIGFib3V0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5heSwgaGUgZXZlbiB3ZW50IHNvIGZhciBhcyB0byBmaWxsIGhpcyBib29rcyBhbmQgd3JpdGluZ3Mgd2l0aCB0aGVzZSBwcmFpc2VzIG9mIGhpbXNlbGY7IGFuZCBoZSBtYWRlIGhpcyBvcmF0b3J5LCB3aGljaCB3YXMgbmF0dXJhbGx5IHZlcnkgcGxlYXNhbnQgYW5kIGhhZCB0aGUgZ3JlYXRlc3QgY2hhcm0sIGlya3NvbWUgYW5kIHRlZGlvdXMgdG8gaGlzIGhlYXJlcnMsIHNpbmNlIHRoaXMgdW5wbGVhc2FudCBwcmFjdGljZSBjbHVuZyB0byBoaW0gbGlrZSBhIGZhdGFsaXR5LiBCdXQgbmV2ZXJ0aGVsZXNzLCBhbHRob3VnaCBoZSBjaGVyaXNoZWQgc28gc3Ryb25nIGFuIGFtYml0aW9uLCBoZSB3YXMgZnJlZSBmcm9tIGVudnlpbmcgb3RoZXJzLCBzaW5jZSBoZSB3YXMgbW9zdCB1bmdydWRnaW5nIGluIGhpcyBlbmNvbWl1bXMgdXBvbiBoaXMgcHJlZGVjZXNzb3JzIGFuZCBjb250ZW1wb3JhcmllcywgYXMgbWF5IGJlIGdhdGhlcmVkIGZyb20gaGlzIHdyaXRpbmdzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGFyZSBhbHNvIG1hbnkgc2F5aW5ncyBvZiBoaXMgb24gcmVjb3JkIHdoaWNoIHByb3ZlIHRoaXM7IGZvciBpbnN0YW5jZSwgaGUgc2FpZCBvZiBBcmlzdG90bGUgdGhhdCBoZSB3YXMgYSByaXZlciBvZiBsaXF1aWQgZ29sZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEx1Yy4gMTE5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWNhZC4gUHJpb3IuPC90aXRsZT4gaWkuIDM4LCAxMTkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBvZiB0aGUgZGlhbG9ndWVzIG9mIFBsYXRvIHRoYXQgSnVwaXRlciwgd2VyZSBpdCBoaXMgbmF0dXJlIHRvIHVzZSBodW1hbiBzcGVlY2gsIHdvdWxkIHRodXMgZGlzY291cnNlLDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gTHVjLiAxMTkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BY2FkLiBQcmlvci48L3RpdGxlPiBpaS4gMzgsIDExOS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFjYWQuIFByaW9yLjwvdGl0bGU+IGlpLiAzOCwgMTE5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gYWQgQnJ1dC4gMTIxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIDMxLCAxMjE8L2JpYmw+ICg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5zaSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkdyYWVjZTwvZW1waD4gbG9xdWF0dXI8L2ZvcmVpZ24+KS48L25vdGU+IFRoZW9waHJhc3R1cywgdG9vLCBoZSB1c2VkIHRvIGNhbGwgaGlzIG93biBzcGVjaWFsIGRlbGlnaHQuIEFuZCB3aGVuIGhlIHdhcyBhc2tlZCB3aGljaCBvZiB0aGUgc3BlZWNoZXMgb2YgRGVtb3N0aGVuZXMgaGUgdGhvdWdodCB0aGUgYmVzdCwgaGUgcmVwbGllZCwgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIGFkIEJydXQuIDEyMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCAzMSwgMTIxPC9iaWJsPiAoPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIDMxLCAxMjE8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5zaSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkdyYWVjZTwvZW1waD4gbG9xdWF0dXI8L2ZvcmVpZ24+KS48ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkdyYWVjZTwvZW1waD4gbG9xdWF0dXI8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSBsb25nZXN0LjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgc29tZSBvZiB0aG9zZSB3aG8gcHJldGVuZCB0byBiZSBpbWl0YXRvcnMgb2YgRGVtb3N0aGVuZXMgZHdlbGwgbXVjaCB1cG9uIGFuIGV4cHJlc3Npb24gd2hpY2ggQ2ljZXJvIHVzZWQgaW4gYSBsZXR0ZXIgdG8gb25lIG9mIGhpcyBmcmllbmRzLCB0byB0aGUgZWZmZWN0IHRoYXQgaW4gc29tZSBwYXJ0cyBvZiBoaXMgc3BlZWNoZXMgRGVtb3N0aGVuZXMgbm9kczsgYnV0IG9mIHRoZSBncmVhdCBhbmQgYWRtaXJhYmxlIHByYWlzZXMgd2hpY2ggaGUgb2Z0ZW4gYmVzdG93cyB1cG9uIGhpbSwgYW5kIG9mIHRoZSBmYWN0IHRoYXQgdGhvc2Ugc3BlZWNoZXMgb2YgaGlzIG93biB0byB3aGljaCBoZSBkZXZvdGVkIG1vc3QgbGFib3VyLCBuYW1lbHksIHRoZSBzcGVlY2hlcyBhZ2FpbnN0IEFudG9ueSwgd2VyZSBlbnRpdGxlZCBieSBoaW0gUGhpbGlwcGljcywgdGhleSBzYXkgbm90aGluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIG9mIHRoZSBtZW4gb2YgaGlzIG93biB0aW1lIHdobyB3ZXJlIGZhbW91cyBmb3IgZWxvcXVlbmNlIG9yIGxlYXJuaW5nLCB0aGVyZSBpcyBub3Qgb25lIHdob20gaGUgZGlkIG5vdCBtYWtlIG1vcmUgZmFtb3VzIGJ5IHdoYXQgaGUgc2FpZCBvciB3cm90ZSBpbiBmYXZvdXIgb2YgaGltLiBGb3IgQ3JhdGlwcHVzIHRoZSBQZXJpcGF0ZXRpYyBoZSBvYnRhaW5lZCB0aGUgUm9tYW4gY2l0aXplbnNoaXAgZnJvbSBDYWVzYXIsIG5vdyBpbiBwb3dlciwgYW5kIGhlIGFsc28gaW5kdWNlZCB0aGUgY291bmNpbCBvZiB0aGUgQXJlaW9wYWd1cyB0byBwYXNzIGEgZGVjcmVlIHJlcXVlc3RpbmcgaGltIHRvIHJlbWFpbiBhdCBBdGhlbnMgYW5kIGRpc2NvdXJzZSB3aXRoIHRoZSB5b3VuZyBtZW4sIGFuZCB0aHVzIGJlIGFuIG9ybmFtZW50IHRvIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgdGhlcmUgYXJlIGxldHRlcnMgZnJvbSBDaWNlcm8gdG8gSGVyb2RlcywgYW5kIG90aGVycyB0byBoaXMgc29uLCBpbiB3aGljaCBoZSB1cmdlcyB0aGVtIHRvIHN0dWR5IHBoaWxvc29waHkgd2l0aCBDcmF0aXBwdXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlc2UgbGV0dGVycyBhcmUgbm90IGV4dGFudC48L25vdGU+IEJ1dCBHb3JnaWFzIHRoZSByaGV0b3JpY2lhbiBoZSBjZW5zdXJlZCBmb3IgbGVhZGluZyB0aGUgeW91bmcgbWFuIGludG8gcGxlYXN1cmVzIGFuZCBkcmlua2luZyBwYXJ0aWVzLCBhbmQgYmFuaXNoZWQgaGltIGZyb20gaGlzIHNvbidzIHNvY2lldHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHlvdW5nZXIgQ2ljZXJvLCBpbiBhIGxldHRlciB0byBUaXJvICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBGYW0uIDE2LjIxLjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+YWQgZmFtLjwvdGl0bGU+IHh2aS4gMjEsIDY8L2JpYmw+KSwgc2F5cyB0aGF0IGhlIGhhZCBmb3VuZCBHb3JnaWFzIHVzZWZ1bCBhcyBhIHRlYWNoZXIgb2YgZGVjbGFtYXRpb24sIGJ1dCBoYWQgZGlzbWlzc2VkIGhpbSBpbiBvYmVkaWVuY2UgdG8gaGlzIGZhdGhlcidzIHBvc2l0aXZlIGNvbW1hbmQuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgYWxtb3N0IHRoZSBvbmx5IG9uZSBvZiBoaXMgR3JlZWsgbGV0dGVycyAodGhlcmUgaXMgYWxzbyBhIHNlY29uZCwgYWRkcmVzc2VkIHRvIFBlbG9wcyBvZiBCeXphbnRpdW0pIHdoaWNoIHdhcyB3cml0dGVuIGluIGEgc3Bpcml0IG9mIGFuZ2VyOyBhbmQgR29yZ2lhcyBoZSBwcm9wZXJseSByZWJ1a2VzLCBpZiwgYXMgaGUgd2FzIHRob3VnaHQgdG8gYmUsIGhlIHdhcyB3b3J0aGxlc3MgYW5kIGludGVtcGVyYXRlOyBidXQgdG93YXJkcyBQZWxvcHMgaGUgc2hvd3MgYSBtZWFuIGFuZCBxdWVydWxvdXMgc3Bpcml0IGZvciBoYXZpbmcgbmVnbGVjdGVkIHRvIG9idGFpbiBmb3IgaGltIGNlcnRhaW4gaG9ub3JhcnkgZGVjcmVlcyBmcm9tIHRoZSBCeXphbnRpYW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBvZiB0aGUgbWVuIG9mIGhpcyBvd24gdGltZSB3aG8gd2VyZSBmYW1vdXMgZm9yIGVsb3F1ZW5jZSBvciBsZWFybmluZywgdGhlcmUgaXMgbm90IG9uZSB3aG9tIGhlIGRpZCBub3QgbWFrZSBtb3JlIGZhbW91cyBieSB3aGF0IGhlIHNhaWQgb3Igd3JvdGUgaW4gZmF2b3VyIG9mIGhpbS4gRm9yIENyYXRpcHB1cyB0aGUgUGVyaXBhdGV0aWMgaGUgb2J0YWluZWQgdGhlIFJvbWFuIGNpdGl6ZW5zaGlwIGZyb20gQ2Flc2FyLCBub3cgaW4gcG93ZXIsIGFuZCBoZSBhbHNvIGluZHVjZWQgdGhlIGNvdW5jaWwgb2YgdGhlIEFyZWlvcGFndXMgdG8gcGFzcyBhIGRlY3JlZSByZXF1ZXN0aW5nIGhpbSB0byByZW1haW4gYXQgQXRoZW5zIGFuZCBkaXNjb3Vyc2Ugd2l0aCB0aGUgeW91bmcgbWVuLCBhbmQgdGh1cyBiZSBhbiBvcm5hbWVudCB0byB0aGUgY2l0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCB0aGVyZSBhcmUgbGV0dGVycyBmcm9tIENpY2VybyB0byBIZXJvZGVzLCBhbmQgb3RoZXJzIHRvIGhpcyBzb24sIGluIHdoaWNoIGhlIHVyZ2VzIHRoZW0gdG8gc3R1ZHkgcGhpbG9zb3BoeSB3aXRoIENyYXRpcHB1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXNlIGxldHRlcnMgYXJlIG5vdCBleHRhbnQuPC9ub3RlPiBCdXQgR29yZ2lhcyB0aGUgcmhldG9yaWNpYW4gaGUgY2Vuc3VyZWQgZm9yIGxlYWRpbmcgdGhlIHlvdW5nIG1hbiBpbnRvIHBsZWFzdXJlcyBhbmQgZHJpbmtpbmcgcGFydGllcywgYW5kIGJhbmlzaGVkIGhpbSBmcm9tIGhpcyBzb24ncyBzb2NpZXR5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHlvdW5nZXIgQ2ljZXJvLCBpbiBhIGxldHRlciB0byBUaXJvICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEZhbS4gMTYuMjEuNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIGZhbS48L3RpdGxlPiB4dmkuIDIxLCA2PC9iaWJsPiksIHNheXMgdGhhdCBoZSBoYWQgZm91bmQgR29yZ2lhcyB1c2VmdWwgYXMgYSB0ZWFjaGVyIG9mIGRlY2xhbWF0aW9uLCBidXQgaGFkIGRpc21pc3NlZCBoaW0gaW4gb2JlZGllbmNlIHRvIGhpcyBmYXRoZXIncyBwb3NpdGl2ZSBjb21tYW5kLjwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gRmFtLiAxNi4yMS42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgZmFtLjwvdGl0bGU+IHh2aS4gMjEsIDY8L2JpYmw+KSwgc2F5cyB0aGF0IGhlIGhhZCBmb3VuZCBHb3JnaWFzIHVzZWZ1bCBhcyBhIHRlYWNoZXIgb2YgZGVjbGFtYXRpb24sIGJ1dCBoYWQgZGlzbWlzc2VkIGhpbSBpbiBvYmVkaWVuY2UgdG8gaGlzIGZhdGhlcidzIHBvc2l0aXZlIGNvbW1hbmQuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgZmFtLjwvdGl0bGU+IHh2aS4gMjEsIDY8L3RyYW5zbGF0aW9uPg=="
translation['24.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgYWxtb3N0IHRoZSBvbmx5IG9uZSBvZiBoaXMgR3JlZWsgbGV0dGVycyAodGhlcmUgaXMgYWxzbyBhIHNlY29uZCwgYWRkcmVzc2VkIHRvIFBlbG9wcyBvZiBCeXphbnRpdW0pIHdoaWNoIHdhcyB3cml0dGVuIGluIGEgc3Bpcml0IG9mIGFuZ2VyOyBhbmQgR29yZ2lhcyBoZSBwcm9wZXJseSByZWJ1a2VzLCBpZiwgYXMgaGUgd2FzIHRob3VnaHQgdG8gYmUsIGhlIHdhcyB3b3J0aGxlc3MgYW5kIGludGVtcGVyYXRlOyBidXQgdG93YXJkcyBQZWxvcHMgaGUgc2hvd3MgYSBtZWFuIGFuZCBxdWVydWxvdXMgc3Bpcml0IGZvciBoYXZpbmcgbmVnbGVjdGVkIHRvIG9idGFpbiBmb3IgaGltIGNlcnRhaW4gaG9ub3JhcnkgZGVjcmVlcyBmcm9tIHRoZSBCeXphbnRpYW5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBjb21wbGFpbnRzIHdlcmUgY2hhcmFjdGVyaXN0aWMgb2YgYW1iaXRpb24sIGFzIHdlbGwgYXMgdGhlIGZhY3QgdGhhdCBoZSB3YXMgb2Z0ZW4gbGVkIG9uIGJ5IHRoZSBjbGV2ZXJuZXNzIG9mIGhpcyBzcGVlY2ggdG8gZGlzcmVnYXJkIHByb3ByaWV0eS4gRm9yIGluc3RhbmNlLCBoZSBvbmNlIHNlcnZlZCBhcyBhZHZvY2F0ZSBmb3IgTXVuYXRpdXMsIHdobyB3YXMgbm8gc29vbmVyIGFjcXVpdHRlZCB0aGFuIGhlIHByb3NlY3V0ZWQgYSBmcmllbmQgb2YgQ2ljZXJvJ3MsIFNhYmludXMsIHdoZXJldXBvbiwgaXQgaXMgc2FpZCwgQ2ljZXJvIHdhcyBzbyB0cmFuc3BvcnRlZCB3aXRoIGFuZ2VyIGFzIHRvIHNheTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XYXMgaXQsIHByYXksIG9uIHlvdXIgb3duIG1lcml0cywgTXVuYXRpdXMsIHRoYXQgeW91IHdlcmUgYWNxdWl0dGVkLCBhbmQgbm90IGJlY2F1c2UgSSBzcHJlYWQgbXVjaCBkYXJrbmVzcyBhYm91dCB0aGUgY291cnQgd2hlbiBiZWZvcmUgdGhlcmUgd2FzIGxpZ2h0PzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWdhaW4sIGhlIGdhaW5lZCBncmVhdCBhcHBsYXVzZSBieSBhbiBlbmNvbWl1bSBvbiBNYXJjdXMgQ3Jhc3N1cyBmcm9tIHRoZSByb3N0cmEsIGFuZCB0aGVuIGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcyBhcyBwdWJsaWNseSByZXZpbGVkIGhpbSwgd2hlcmV1cG9uIENyYXNzdXMgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0LCBkaWQgeW91IG5vdCBzdGFuZCB0aGVyZSB5b3Vyc2VsZiBhIGRheSBvciB0d28gYWdvIGFuZCBwcmFpc2UgbWU/PC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVhLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXhlcmNpc2luZyBteSBlbG9xdWVuY2UgYnkgd2F5IG9mIHByYWN0aWNlIG9uIGEgYmFkIHN1YmplY3QuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBDcmFzc3VzIG9uY2Ugc2FpZCB0aGF0IG5vIENyYXNzdXMgaGFkIGxpdmVkIGluIFJvbWUgdG8gYmUgb2xkZXIgdGhhbiBzaXh0eSB5ZWFycywgYW5kIHRoZW4gdHJpZWQgdG8gZGVueSBpdCwgZXhjbGFpbWluZywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGNvdWxkIGhhdmUgbGVkIG1lIHRvIHNheSB0aGlzPzwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdSBrbmV3LDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCB0aGUgUm9tYW5zIHdvdWxkIGJlIGRlbGlnaHRlZCB0byBoZWFyIGl0LCBhbmQgYnkgdGhhdCBtZWFucyB5b3UgdHJpZWQgdG8gY291cnQgdGhlaXIgZmF2b3VyLjwvcT4gQW5kIHdoZW4gQ3Jhc3N1cyBleHByZXNzZWQgaGlzIHNhdGlzZmFjdGlvbiB3aXRoIHRoZSBTdG9pY3MgYmVjYXVzZSB0aGV5IHJlcHJlc2VudGVkIHRoZSBnb29kIG1hbiBhcyByaWNoLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNvbnNpZGVyLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2hldGhlciB5b3VyIHNhdGlzZmFjdGlvbiBpcyBub3QgcmF0aGVyIGR1ZSB0byB0aGVpciBkZWNsYXJhdGlvbiB0aGF0IGFsbCB0aGluZ3MgYmVsb25nIHRvIHRoZSB3aXNlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIENyYXNzdXMgd2FzIGFjY3VzZWQgb2YgY292ZXRvdXNuZXNzLiBBZ2Fpbiwgb25lIG9mIHRoZSBzb25zIG9mIENyYXNzdXMgd2hvIHdhcyB0aG91Z2h0IHRvIHJlc2VtYmxlIGEgY2VydGFpbiBBeGl1cywgYW5kIG9uIHRoaXMgYWNjb3VudCBoYWQgYnJvdWdodCBoaXMgbW90aGVyJ3MgbmFtZSBpbnRvIHNjYW5kYWxvdXMgY29ubmVjdGlvbiB3aXRoIHRoYXQgb2YgQXhpdXMsIG9uY2UgbWFkZSBhIHN1Y2Nlc3NmdWwgc3BlZWNoIGluIHRoZSBzZW5hdGUsIGFuZCB3aGVuIENpY2VybyB3YXMgYXNrZWQgd2hhdCBoZSB0aG91Z2h0IG9mIGhpbSwgaGUgYW5zd2VyZWQgd2l0aCB0aGUgR3JlZWsgd29yZHMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BeGlvcyBLcmFzc291LjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CgkJCQkJICAgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldvcnRoeSBvZiBDcmFzc3VzLjwvcT4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgY29tcGxhaW50cyB3ZXJlIGNoYXJhY3RlcmlzdGljIG9mIGFtYml0aW9uLCBhcyB3ZWxsIGFzIHRoZSBmYWN0IHRoYXQgaGUgd2FzIG9mdGVuIGxlZCBvbiBieSB0aGUgY2xldmVybmVzcyBvZiBoaXMgc3BlZWNoIHRvIGRpc3JlZ2FyZCBwcm9wcmlldHkuIEZvciBpbnN0YW5jZSwgaGUgb25jZSBzZXJ2ZWQgYXMgYWR2b2NhdGUgZm9yIE11bmF0aXVzLCB3aG8gd2FzIG5vIHNvb25lciBhY3F1aXR0ZWQgdGhhbiBoZSBwcm9zZWN1dGVkIGEgZnJpZW5kIG9mIENpY2VybydzLCBTYWJpbnVzLCB3aGVyZXVwb24sIGl0IGlzIHNhaWQsIENpY2VybyB3YXMgc28gdHJhbnNwb3J0ZWQgd2l0aCBhbmdlciBhcyB0byBzYXk6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XYXMgaXQsIHByYXksIG9uIHlvdXIgb3duIG1lcml0cywgTXVuYXRpdXMsIHRoYXQgeW91IHdlcmUgYWNxdWl0dGVkLCBhbmQgbm90IGJlY2F1c2UgSSBzcHJlYWQgbXVjaCBkYXJrbmVzcyBhYm91dCB0aGUgY291cnQgd2hlbiBiZWZvcmUgdGhlcmUgd2FzIGxpZ2h0PzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZ2FpbiwgaGUgZ2FpbmVkIGdyZWF0IGFwcGxhdXNlIGJ5IGFuIGVuY29taXVtIG9uIE1hcmN1cyBDcmFzc3VzIGZyb20gdGhlIHJvc3RyYSwgYW5kIHRoZW4gYSBmZXcgZGF5cyBhZnRlcndhcmRzIGFzIHB1YmxpY2x5IHJldmlsZWQgaGltLCB3aGVyZXVwb24gQ3Jhc3N1cyBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCwgZGlkIHlvdSBub3Qgc3RhbmQgdGhlcmUgeW91cnNlbGYgYSBkYXkgb3IgdHdvIGFnbyBhbmQgcHJhaXNlIG1lPzwvcT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVhLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5leGVyY2lzaW5nIG15IGVsb3F1ZW5jZSBieSB3YXkgb2YgcHJhY3RpY2Ugb24gYSBiYWQgc3ViamVjdC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBDcmFzc3VzIG9uY2Ugc2FpZCB0aGF0IG5vIENyYXNzdXMgaGFkIGxpdmVkIGluIFJvbWUgdG8gYmUgb2xkZXIgdGhhbiBzaXh0eSB5ZWFycywgYW5kIHRoZW4gdHJpZWQgdG8gZGVueSBpdCwgZXhjbGFpbWluZywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgY291bGQgaGF2ZSBsZWQgbWUgdG8gc2F5IHRoaXM/PC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3Uga25ldyw8L3E+IHNhaWQgQ2ljZXJvLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCB0aGUgUm9tYW5zIHdvdWxkIGJlIGRlbGlnaHRlZCB0byBoZWFyIGl0LCBhbmQgYnkgdGhhdCBtZWFucyB5b3UgdHJpZWQgdG8gY291cnQgdGhlaXIgZmF2b3VyLjwvcT4gQW5kIHdoZW4gQ3Jhc3N1cyBleHByZXNzZWQgaGlzIHNhdGlzZmFjdGlvbiB3aXRoIHRoZSBTdG9pY3MgYmVjYXVzZSB0aGV5IHJlcHJlc2VudGVkIHRoZSBnb29kIG1hbiBhcyByaWNoLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q29uc2lkZXIsPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndoZXRoZXIgeW91ciBzYXRpc2ZhY3Rpb24gaXMgbm90IHJhdGhlciBkdWUgdG8gdGhlaXIgZGVjbGFyYXRpb24gdGhhdCBhbGwgdGhpbmdzIGJlbG9uZyB0byB0aGUgd2lzZS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQ3Jhc3N1cyB3YXMgYWNjdXNlZCBvZiBjb3ZldG91c25lc3MuIEFnYWluLCBvbmUgb2YgdGhlIHNvbnMgb2YgQ3Jhc3N1cyB3aG8gd2FzIHRob3VnaHQgdG8gcmVzZW1ibGUgYSBjZXJ0YWluIEF4aXVzLCBhbmQgb24gdGhpcyBhY2NvdW50IGhhZCBicm91Z2h0IGhpcyBtb3RoZXIncyBuYW1lIGludG8gc2NhbmRhbG91cyBjb25uZWN0aW9uIHdpdGggdGhhdCBvZiBBeGl1cywgb25jZSBtYWRlIGEgc3VjY2Vzc2Z1bCBzcGVlY2ggaW4gdGhlIHNlbmF0ZSwgYW5kIHdoZW4gQ2ljZXJvIHdhcyBhc2tlZCB3aGF0IGhlIHRob3VnaHQgb2YgaGltLCBoZSBhbnN3ZXJlZCB3aXRoIHRoZSBHcmVlayB3b3JkcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXhpb3MgS3Jhc3NvdS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CgkJCQkJICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V29ydGh5IG9mIENyYXNzdXMuPC9xPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V29ydGh5IG9mIENyYXNzdXMuPC9xPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENyYXNzdXMgd2FzIGFib3V0IHRvIHNldCBvdXQgZm9yIFN5cmlhLCB3aXNoaW5nIHRoYXQgQ2ljZXJvIHNob3VsZCBiZSBhIGZyaWVuZCByYXRoZXIgdGhhbiBhbiBlbmVteSwgaGUgc2FpZCB0byBoaW0gaW4gYSBmcmllbmRseSBtYW5uZXIgdGhhdCBoZSB3aXNoZWQgdG8gZGluZSB3aXRoIGhpbTsgYW5kIENpY2VybyByZWFkaWx5IHJlY2VpdmVkIGhpbSBpbnRvIGhpcyBob3VzZS4gQnV0IGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcywgd2hlbiBzb21lIGZyaWVuZHMgaW50ZXJjZWRlZCB3aXRoIGhpbSBmb3IgVmF0aW5pdXMsIHNheWluZyB0aGF0IHRoZSBtYW4gc291Z2h0IHJlY29uY2lsaWF0aW9uIGFuZCBmcmllbmRzaGlwIChmb3IgaGUgd2FzIGFuIGVuZW15KSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBzdXJlbHkgY2Fubm90IGJlLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCBWYXRpbml1cyBhbHNvIHdpc2hlcyB0byBkaW5lIHdpdGggbWUuPC9xPiBTdWNoLCB0aGVuLCB3YXMgaGlzIHRyZWF0bWVudCBvZiBDcmFzc3VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIFZhdGluaXVzIGhpbXNlbGYgaGFkIHN3ZWxsaW5ncyBvbiBoaXMgbmVjaywgYW5kIG9uY2Ugd2hlbiBoZSB3YXMgcGxlYWRpbmcgYSBjYXNlIENpY2VybyBjYWxsZWQgaGltIGEgPGVtcGg+dHVtaWQgPC9lbXBoPm9yYXRvci4gQWdhaW4sIGFmdGVyIGhlYXJpbmcgdGhhdCBWYXRpbml1cyB3YXMgZGVhZCwgYW5kIHRoZW4gYWZ0ZXIgYSBsaXR0bGUgbGVhcm5pbmcgZm9yIGEgc3VyZXR5IHRoYXQgaGUgd2FzIGFsaXZlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldyZXRjaGVkbHkgcGVyaXNoLCB0aGVuLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlIHdyZXRjaCB3aG8gbGllZCE8L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFnYWluLCBDYWVzYXIgb25jZSBnb3QgYSBkZWNyZWUgcGFzc2VkIHRoYXQgdGhlIGxhbmQgaW4gQ2FtcGFuaWEgc2hvdWxkIGJlIGRpdmlkZWQgYW1vbmcgaGlzIHNvbGRpZXJzLCBhbmQgbWFueSBvZiB0aGUgc2VuYXRvcnMgd2VyZSBkaXNzYXRpc2ZpZWQsIGFuZCBMdWNpdXMgR2VsbGl1cywgd2hvIHdhcyBhYm91dCB0aGUgb2xkZXN0IG9mIHRoZW0sIGRlY2xhcmVkIHRoYXQgaXQgc2hvdWxkIG5ldmVyIGJlIGRvbmUgd2hpbGUgaGUgd2FzIGFsaXZlOyB3aGVyZXVwb24gQ2ljZXJvIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGV0IHVzIHdhaXQsIHNpbmNlIEdlbGxpdXMgZG9lcyBub3QgYXNrIGZvciBhIGxvbmcgcG9zdHBvbmVtZW50LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3YXMgYSBjZXJ0YWluIE9jdGF2aXVzLCB0b28sIHdobyB3YXMgcmVwdXRlZCB0byBiZSBvZiBBZnJpY2FuIGRlc2NlbnQ7IHRvIHRoaXMgbWFuLCB3aG8gc2FpZCBhdCBhIGNlcnRhaW4gdHJpYWwgdGhhdCBoZSBjb3VsZCBub3QgaGVhciBDaWNlcm8sIHRoZSBvcmF0b3IgcmVwbGllZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgeWV0IHlvdXIgZWFyIGlzIG5vdCB3aXRob3V0IGEgcGVyZm9yYXRpb24uPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Vc3VhbGx5IHRoZSBtYXJrIG9mIGEgc2xhdmUuPC9ub3RlPiBBbmQgd2hlbiBNZXRlbGx1cyBOZXBvcyBkZWNsYXJlZCB0aGF0IENpY2VybyBoYWQgYnJvdWdodCBtb3JlIG1lbiB0byBkZWF0aCBhcyBhIGhvc3RpbGUgd2l0bmVzcyB0aGFuIGhlIGhhZCBzYXZlZCBmcm9tIGl0IGFzIGFuIGFkdm9jYXRlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcyw8L3E+IHNhaWQgQ2ljZXJvLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgYWRtaXQgdGhhdCBteSBjcmVkaWJpbGl0eSBpcyBncmVhdGVyIHRoYW4gbXkgZWxvcXVlbmNlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2Fpbiwgd2hlbiBhIGNlcnRhaW4geW91bmcgbWFuIHdobyB3YXMgYWNjdXNlZCBvZiBoYXZpbmcgZ2l2ZW4gaGlzIGZhdGhlciBwb2lzb24gaW4gYSBjYWtlIHB1dCBvbiBib2xkIGFpcnMgYW5kIHRocmVhdGVuZWQgdG8gY292ZXIgQ2ljZXJvIHdpdGggYWJ1c2UsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhhdCw8L3E+IHNhaWQgQ2ljZXJvLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd291bGQgcmF0aGVyIGhhdmUgZnJvbSB5b3UgdGhhbiBhIGNha2UuPC9xPiBUaGVyZSB3YXMgUHVibGl1cyBTZXh0aXVzLCB0b28sIHdobyByZXRhaW5lZCBDaWNlcm8gYXMgYW4gYWR2b2NhdGUgaW4gYSBjYXNlLCBhbG9uZyB3aXRoIG90aGVycywgYW5kIHRoZW4gd2FudGVkIHRvIGRvIGFsbCB0aGUgc3BlYWtpbmcgaGltc2VsZiwgYW5kIHdvdWxkIGFsbG93IG5vIG9uZSBlbHNlIGEgd29yZDsgd2hlbiBpdCB3YXMgY2xlYXIgdGhhdCBoZSB3YXMgZ29pbmcgdG8gYmUgYWNxdWl0dGVkIGJ5IHRoZSBqdXJvcnMgYW5kIHRoZSB2b3RlIHdhcyBhbHJlYWR5IGJlaW5nIGdpdmVuLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlVzZSB5b3VyIG9wcG9ydHVuaXR5IHRvZGF5LCBTZXh0aXVzLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Zm9yIHRvLW1vcnJvdyB5b3UgYXJlIGdvaW5nIHRvIGJlIGEgbm9ib2R5LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5QdWJsaXVzIENvbnN0YSwgdG9vLCB3aG8gd2FudGVkIHRvIGJlIGEgbGF3eWVyLCBidXQgd2FzIGlnbm9yYW50IGFuZCBzdHVwaWQsIHdhcyBvbmNlIHN1bW1vbmVkIGJ5IENpY2VybyBhcyB3aXRuZXNzIGluIGEgY2FzZTsgYW5kIHdoZW4gaGUga2VwdCBzYXlpbmcgdGhhdCBoZSBrbmV3IG5vdGhpbmcsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UGVyaGFwcyw8L3E+IHNhaWQgQ2ljZXJvLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnlvdSB0aGluayB5b3UgYXJlIGJlaW5nIHF1ZXN0aW9uZWQgb24gcG9pbnRzIG9mIGxhdy48L3E+IEFnYWluLCBpbiBhIGRpc3B1dGUgd2l0aCBDaWNlcm8sIE1ldGVsbHVzIE5lcG9zIGFza2VkIHJlcGVhdGVkbHkgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaG8gaXMgeW91ciBmYXRoZXI/PC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW4geW91ciBjYXNlLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+eW91ciBtb3RoZXIgaGFzIG1hZGUgdGhlIGFuc3dlciB0byB0aGlzIHF1ZXN0aW9uIHJhdGhlciBkaWZmaWN1bHQuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIG1vdGhlciBvZiBOZXBvcyB3YXMgdGhvdWdodCB0byBiZSB1bmNoYXN0ZSwgYW5kIGhlIGhpbXNlbGYgYSBmaWNrbGUgc29ydCBvZiBtYW4uIEhlIG9uY2Ugc3VkZGVubHkgZGVzZXJ0ZWQgaGlzIG9mZmljZSBvZiB0cmlidW5lIGFuZCBzYWlsZWQgb2ZmIHRvIGpvaW4gUG9tcGV5IGluIFN5cmlhLCBhbmQgdGhlbiBjYW1lIGJhY2sgZnJvbSB0aGVyZSB3aXRoIGV2ZW4gbGVzcyByZWFzb24uIE1vcmVvdmVyLCBhZnRlciBidXJ5aW5nIGhpcyB0ZWFjaGVyIFBoaWxhZ3J1cyB3aXRoIG1vcmUgdGhhbiB1c3VhbCBjZXJlbW9ueSwgaGUgc2V0IHVwb24gaGlzIHRvbWIgYSByYXZlbiBpbiBzdG9uZTsgd2hlcmV1cG9uIENpY2VybyByZW1hcmtlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiB0aGlzIHlvdSBoYXZlIGFjdGVkIG1vcmUgd2lzZWx5IHRoYW4gaXMgeW91ciB3b250LCBmb3IgaGUgdGF1Z2h0IHlvdSB0byBmbHkgcmF0aGVyIHRoYW4gdG8gc3BlYWsuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZ2Fpbiwgd2hlbiBNYXJjdXMgQXBwaXVzIHByZWZhY2VkIGhpcyBzcGVlY2ggaW4gYSBjYXNlIGJ5IHNheWluZyB0aGF0IGhpcyBmcmllbmQgaGFkIGJlZ2dlZCBoaW0gdG8gZXhoaWJpdCBkaWxpZ2VuY2UsIGVsb3F1ZW5jZSwgYW5kIGZpZGVsaXR5LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB0aGVuLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXJlIHlvdSBzbyBoYXJkLWhlYXJ0ZWQgYXMgdG8gZXhoaWJpdCBub25lIG9mIHRob3NlIGdyZWF0IHF1YWxpdGllcyB3aGljaCB5b3VyIGZyaWVuZCBkZW1hbmRlZD88L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDcmFzc3VzIHdhcyBhYm91dCB0byBzZXQgb3V0IGZvciBTeXJpYSwgd2lzaGluZyB0aGF0IENpY2VybyBzaG91bGQgYmUgYSBmcmllbmQgcmF0aGVyIHRoYW4gYW4gZW5lbXksIGhlIHNhaWQgdG8gaGltIGluIGEgZnJpZW5kbHkgbWFubmVyIHRoYXQgaGUgd2lzaGVkIHRvIGRpbmUgd2l0aCBoaW07IGFuZCBDaWNlcm8gcmVhZGlseSByZWNlaXZlZCBoaW0gaW50byBoaXMgaG91c2UuIEJ1dCBhIGZldyBkYXlzIGFmdGVyd2FyZHMsIHdoZW4gc29tZSBmcmllbmRzIGludGVyY2VkZWQgd2l0aCBoaW0gZm9yIFZhdGluaXVzLCBzYXlpbmcgdGhhdCB0aGUgbWFuIHNvdWdodCByZWNvbmNpbGlhdGlvbiBhbmQgZnJpZW5kc2hpcCAoZm9yIGhlIHdhcyBhbiBlbmVteSksIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBzdXJlbHkgY2Fubm90IGJlLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGF0IFZhdGluaXVzIGFsc28gd2lzaGVzIHRvIGRpbmUgd2l0aCBtZS48L3E+IFN1Y2gsIHRoZW4sIHdhcyBoaXMgdHJlYXRtZW50IG9mIENyYXNzdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgVmF0aW5pdXMgaGltc2VsZiBoYWQgc3dlbGxpbmdzIG9uIGhpcyBuZWNrLCBhbmQgb25jZSB3aGVuIGhlIHdhcyBwbGVhZGluZyBhIGNhc2UgQ2ljZXJvIGNhbGxlZCBoaW0gYSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnR1bWlkIDwvZW1waD5vcmF0b3IuIEFnYWluLCBhZnRlciBoZWFyaW5nIHRoYXQgVmF0aW5pdXMgd2FzIGRlYWQsIGFuZCB0aGVuIGFmdGVyIGEgbGl0dGxlIGxlYXJuaW5nIGZvciBhIHN1cmV0eSB0aGF0IGhlIHdhcyBhbGl2ZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldyZXRjaGVkbHkgcGVyaXNoLCB0aGVuLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgd3JldGNoIHdobyBsaWVkITwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZ2FpbiwgQ2Flc2FyIG9uY2UgZ290IGEgZGVjcmVlIHBhc3NlZCB0aGF0IHRoZSBsYW5kIGluIENhbXBhbmlhIHNob3VsZCBiZSBkaXZpZGVkIGFtb25nIGhpcyBzb2xkaWVycywgYW5kIG1hbnkgb2YgdGhlIHNlbmF0b3JzIHdlcmUgZGlzc2F0aXNmaWVkLCBhbmQgTHVjaXVzIEdlbGxpdXMsIHdobyB3YXMgYWJvdXQgdGhlIG9sZGVzdCBvZiB0aGVtLCBkZWNsYXJlZCB0aGF0IGl0IHNob3VsZCBuZXZlciBiZSBkb25lIHdoaWxlIGhlIHdhcyBhbGl2ZTsgd2hlcmV1cG9uIENpY2VybyBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGV0IHVzIHdhaXQsIHNpbmNlIEdlbGxpdXMgZG9lcyBub3QgYXNrIGZvciBhIGxvbmcgcG9zdHBvbmVtZW50LjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBhIGNlcnRhaW4gT2N0YXZpdXMsIHRvbywgd2hvIHdhcyByZXB1dGVkIHRvIGJlIG9mIEFmcmljYW4gZGVzY2VudDsgdG8gdGhpcyBtYW4sIHdobyBzYWlkIGF0IGEgY2VydGFpbiB0cmlhbCB0aGF0IGhlIGNvdWxkIG5vdCBoZWFyIENpY2VybywgdGhlIG9yYXRvciByZXBsaWVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHlldCB5b3VyIGVhciBpcyBub3Qgd2l0aG91dCBhIHBlcmZvcmF0aW9uLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Vc3VhbGx5IHRoZSBtYXJrIG9mIGEgc2xhdmUuPC9ub3RlPiBBbmQgd2hlbiBNZXRlbGx1cyBOZXBvcyBkZWNsYXJlZCB0aGF0IENpY2VybyBoYWQgYnJvdWdodCBtb3JlIG1lbiB0byBkZWF0aCBhcyBhIGhvc3RpbGUgd2l0bmVzcyB0aGFuIGhlIGhhZCBzYXZlZCBmcm9tIGl0IGFzIGFuIGFkdm9jYXRlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGFkbWl0IHRoYXQgbXkgY3JlZGliaWxpdHkgaXMgZ3JlYXRlciB0aGFuIG15IGVsb3F1ZW5jZS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIGEgY2VydGFpbiB5b3VuZyBtYW4gd2hvIHdhcyBhY2N1c2VkIG9mIGhhdmluZyBnaXZlbiBoaXMgZmF0aGVyIHBvaXNvbiBpbiBhIGNha2UgcHV0IG9uIGJvbGQgYWlycyBhbmQgdGhyZWF0ZW5lZCB0byBjb3ZlciBDaWNlcm8gd2l0aCBhYnVzZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQsPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd291bGQgcmF0aGVyIGhhdmUgZnJvbSB5b3UgdGhhbiBhIGNha2UuPC9xPiBUaGVyZSB3YXMgUHVibGl1cyBTZXh0aXVzLCB0b28sIHdobyByZXRhaW5lZCBDaWNlcm8gYXMgYW4gYWR2b2NhdGUgaW4gYSBjYXNlLCBhbG9uZyB3aXRoIG90aGVycywgYW5kIHRoZW4gd2FudGVkIHRvIGRvIGFsbCB0aGUgc3BlYWtpbmcgaGltc2VsZiwgYW5kIHdvdWxkIGFsbG93IG5vIG9uZSBlbHNlIGEgd29yZDsgd2hlbiBpdCB3YXMgY2xlYXIgdGhhdCBoZSB3YXMgZ29pbmcgdG8gYmUgYWNxdWl0dGVkIGJ5IHRoZSBqdXJvcnMgYW5kIHRoZSB2b3RlIHdhcyBhbHJlYWR5IGJlaW5nIGdpdmVuLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VXNlIHlvdXIgb3Bwb3J0dW5pdHkgdG9kYXksIFNleHRpdXMsPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZvciB0by1tb3Jyb3cgeW91IGFyZSBnb2luZyB0byBiZSBhIG5vYm9keS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlB1YmxpdXMgQ29uc3RhLCB0b28sIHdobyB3YW50ZWQgdG8gYmUgYSBsYXd5ZXIsIGJ1dCB3YXMgaWdub3JhbnQgYW5kIHN0dXBpZCwgd2FzIG9uY2Ugc3VtbW9uZWQgYnkgQ2ljZXJvIGFzIHdpdG5lc3MgaW4gYSBjYXNlOyBhbmQgd2hlbiBoZSBrZXB0IHNheWluZyB0aGF0IGhlIGtuZXcgbm90aGluZywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlBlcmhhcHMsPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnlvdSB0aGluayB5b3UgYXJlIGJlaW5nIHF1ZXN0aW9uZWQgb24gcG9pbnRzIG9mIGxhdy48L3E+IEFnYWluLCBpbiBhIGRpc3B1dGUgd2l0aCBDaWNlcm8sIE1ldGVsbHVzIE5lcG9zIGFza2VkIHJlcGVhdGVkbHkgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldobyBpcyB5b3VyIGZhdGhlcj88L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluIHlvdXIgY2FzZSw8L3E+IHNhaWQgQ2ljZXJvLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+eW91ciBtb3RoZXIgaGFzIG1hZGUgdGhlIGFuc3dlciB0byB0aGlzIHF1ZXN0aW9uIHJhdGhlciBkaWZmaWN1bHQuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIG1vdGhlciBvZiBOZXBvcyB3YXMgdGhvdWdodCB0byBiZSB1bmNoYXN0ZSwgYW5kIGhlIGhpbXNlbGYgYSBmaWNrbGUgc29ydCBvZiBtYW4uIEhlIG9uY2Ugc3VkZGVubHkgZGVzZXJ0ZWQgaGlzIG9mZmljZSBvZiB0cmlidW5lIGFuZCBzYWlsZWQgb2ZmIHRvIGpvaW4gUG9tcGV5IGluIFN5cmlhLCBhbmQgdGhlbiBjYW1lIGJhY2sgZnJvbSB0aGVyZSB3aXRoIGV2ZW4gbGVzcyByZWFzb24uIE1vcmVvdmVyLCBhZnRlciBidXJ5aW5nIGhpcyB0ZWFjaGVyIFBoaWxhZ3J1cyB3aXRoIG1vcmUgdGhhbiB1c3VhbCBjZXJlbW9ueSwgaGUgc2V0IHVwb24gaGlzIHRvbWIgYSByYXZlbiBpbiBzdG9uZTsgd2hlcmV1cG9uIENpY2VybyByZW1hcmtlZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluIHRoaXMgeW91IGhhdmUgYWN0ZWQgbW9yZSB3aXNlbHkgdGhhbiBpcyB5b3VyIHdvbnQsIGZvciBoZSB0YXVnaHQgeW91IHRvIGZseSByYXRoZXIgdGhhbiB0byBzcGVhay48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZ2Fpbiwgd2hlbiBNYXJjdXMgQXBwaXVzIHByZWZhY2VkIGhpcyBzcGVlY2ggaW4gYSBjYXNlIGJ5IHNheWluZyB0aGF0IGhpcyBmcmllbmQgaGFkIGJlZ2dlZCBoaW0gdG8gZXhoaWJpdCBkaWxpZ2VuY2UsIGVsb3F1ZW5jZSwgYW5kIGZpZGVsaXR5LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHRoZW4sPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFyZSB5b3Ugc28gaGFyZC1oZWFydGVkIGFzIHRvIGV4aGliaXQgbm9uZSBvZiB0aG9zZSBncmVhdCBxdWFsaXRpZXMgd2hpY2ggeW91ciBmcmllbmQgZGVtYW5kZWQ/PC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoaXMgdXNlIG9mIHZlcnkgYml0aW5nIGplc3RzIGFnYWluc3QgZW5lbWllcyBvciBsZWdhbCBvcHBvbmVudHMgc2VlbXMgdG8gYmUgcGFydCBvZiB0aGUgb3JhdG9yJ3MgYnVzaW5lc3M7IGJ1dCBoaXMgaW5kaXNjcmltaW5hdGUgYXR0YWNrcyBmb3IgdGhlIHNha2Ugb2YgcmFpc2luZyBhIGxhdWdoIG1hZGUgbWFueSBwZW9wbGUgaGF0ZSBDaWNlcm8uIEFuZCBJIHdpbGwgZ2l2ZSBhIGZldyBpbnN0YW5jZXMgb2YgdGhpcyBhbHNvLiBNYXJjdXMgQXF1aW5pdXMsIHdobyBoYWQgdHdvIHNvbnMtaW4tbGF3IGluIGV4aWxlLCBoZSBjYWxsZWQgQWRyYXN0dXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWRyYXN0dXMsIG15dGhpY2FsIGtpbmcgb2YgQXJnb3MsIGdhdmUgaGlzIHR3byBkYXVnaHRlcnMgaW4gbWFycmlhZ2UgdG8gVHlkZXVzIGFuZCBQb2x5bmVpY2VzLCBib3RoIG9mIHdob20gd2VyZSBmdWdpdGl2ZXMgZnJvbSB0aGVpciBuYXRpdmUgY2l0aWVzLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgTHVjaXVzIENvdHRhLCB3aG8gaGVsZCB0aGUgb2ZmaWNlIG9mIGNlbnNvciwgd2FzIHZlcnkgZm9uZCBvZiB3aW5lLCBhbmQgQ2ljZXJvLCB3aGVuIGNhbnZhc3NpbmcgZm9yIHRoZSBjb25zdWxzaGlwLCB3YXMgYS10aGlyc3QsIGFuZCBhcyBoaXMgZnJpZW5kcyBzdG9vZCBhYm91dCBoaW0gd2hpbGUgaGUgZHJhbmssIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91IGhhdmUgZ29vZCByZWFzb24gdG8gZmVhciB0aGF0IHRoZSBjZW5zb3Igd2lsbCBkZWFsIGhhcnNobHkgd2l0aCBtZeKAlGZvciBkcmlua2luZyB3YXRlci48L3E+IEFuZCB3aGVuIGhlIG1ldCBWb2Nvbml1cyBlc2NvcnRpbmcgdGhyZWUgdmVyeSB1Z2x5IGRhdWdodGVycywgaGUgY3JpZWQgb3V0OuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5JdCB3YXMgYWdhaW5zdCB0aGUgd2lsbCBvZiBQaG9lYnVzIHRoYXQgaGUgYmVnYXQgY2hpbGRyZW4uPC9sPgoJCQkJCcOlPC9xdW90ZT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gaWFtYmljIHRyaW1ldGVyIGZyb20gc29tZSBsb3N0IHRyYWdlZHksIHBlcmhhcHMgdGhlIDx0aXRsZT5PZWRpcHVzPC90aXRsZT4gb2YgRXVyaXBpZGVzIChOYXVjaywgPHRpdGxlPlRyYWcuR3JhZWMuRnJhZy4yPC90aXRsZT4sIHAuIDkxMSkuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQWdhaW4sIHdoZW4gTWFyY3VzIEdlbGxpdXMsIHdobyB3YXMgdGhvdWdodCB0byBiZSBvZiBzZXJ2aWxlIGJpcnRoLCBoYWQgcmVhZCBsZXR0ZXJzIHRvIHRoZSBzZW5hdGUgaW4gYSBsb3VkIGFuZCBjbGVhciB2b2ljZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EbyBub3QgbWFydmVsLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aGUgdG9vIGlzIG9uZSBvZiB0aG9zZSB3aG8gaGF2ZSBjcmllZCBhbG91ZCBmb3IgdGhlaXIgZnJlZWRvbS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgcGxheSB1cG9uIHRoZSBwaHJhc2UgKHVzZWQgb2YgYSBzbGF2ZSkgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5pbiBsaWJlcnRhdGVtIHJlY2xhbWFyZS48L2ZvcmVpZ24+CiAgICAgICAgICAgICAgIDwvcT4KICAgICAgICAgICAgPC9ub3RlPiBBbmQgd2hlbiBGYXVzdHVzLCB0aGUgc29uIG9mIHRoZSBTdWxsYSB3aG8gd2FzIGRpY3RhdG9yIGF0IFJvbWUgYW5kIHBsYWNhcmRlZCBtYW55IHBlb3BsZSBmb3IgZGVhdGgsIGdvdCBpbnRvIGRlYnQsIHNxdWFuZGVyZWQgbXVjaCBvZiBoaXMgc3Vic3RhbmNlLCBhbmQgcGxhY2FyZGVkIGhpcyBob3VzZWhvbGQgZ29vZHMgZm9yIHNhbGUsIENpY2VybyBzYWlkIGhlIGxpa2VkIHRoaXMgcGxhY2FyZGluZyBiZXR0ZXIgdGhhbiBoaXMgZmF0aGVyJ3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGlzIHVzZSBvZiB2ZXJ5IGJpdGluZyBqZXN0cyBhZ2FpbnN0IGVuZW1pZXMgb3IgbGVnYWwgb3Bwb25lbnRzIHNlZW1zIHRvIGJlIHBhcnQgb2YgdGhlIG9yYXRvcidzIGJ1c2luZXNzOyBidXQgaGlzIGluZGlzY3JpbWluYXRlIGF0dGFja3MgZm9yIHRoZSBzYWtlIG9mIHJhaXNpbmcgYSBsYXVnaCBtYWRlIG1hbnkgcGVvcGxlIGhhdGUgQ2ljZXJvLiBBbmQgSSB3aWxsIGdpdmUgYSBmZXcgaW5zdGFuY2VzIG9mIHRoaXMgYWxzby4gTWFyY3VzIEFxdWluaXVzLCB3aG8gaGFkIHR3byBzb25zLWluLWxhdyBpbiBleGlsZSwgaGUgY2FsbGVkIEFkcmFzdHVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWRyYXN0dXMsIG15dGhpY2FsIGtpbmcgb2YgQXJnb3MsIGdhdmUgaGlzIHR3byBkYXVnaHRlcnMgaW4gbWFycmlhZ2UgdG8gVHlkZXVzIGFuZCBQb2x5bmVpY2VzLCBib3RoIG9mIHdob20gd2VyZSBmdWdpdGl2ZXMgZnJvbSB0aGVpciBuYXRpdmUgY2l0aWVzLjwvbm90ZT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBMdWNpdXMgQ290dGEsIHdobyBoZWxkIHRoZSBvZmZpY2Ugb2YgY2Vuc29yLCB3YXMgdmVyeSBmb25kIG9mIHdpbmUsIGFuZCBDaWNlcm8sIHdoZW4gY2FudmFzc2luZyBmb3IgdGhlIGNvbnN1bHNoaXAsIHdhcyBhLXRoaXJzdCwgYW5kIGFzIGhpcyBmcmllbmRzIHN0b29kIGFib3V0IGhpbSB3aGlsZSBoZSBkcmFuaywgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdSBoYXZlIGdvb2QgcmVhc29uIHRvIGZlYXIgdGhhdCB0aGUgY2Vuc29yIHdpbGwgZGVhbCBoYXJzaGx5IHdpdGggbWXigJRmb3IgZHJpbmtpbmcgd2F0ZXIuPC9xPiBBbmQgd2hlbiBoZSBtZXQgVm9jb25pdXMgZXNjb3J0aW5nIHRocmVlIHZlcnkgdWdseSBkYXVnaHRlcnMsIGhlIGNyaWVkIG91dDrigJQKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IHdhcyBhZ2FpbnN0IHRoZSB3aWxsIG9mIFBob2VidXMgdGhhdCBoZSBiZWdhdCBjaGlsZHJlbi48L2w+CgkJCQkJw6U8L3F1b3RlPgogICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IHdhcyBhZ2FpbnN0IHRoZSB3aWxsIG9mIFBob2VidXMgdGhhdCBoZSBiZWdhdCBjaGlsZHJlbi48L2w+CgkJCQkJw6U8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGlhbWJpYyB0cmltZXRlciBmcm9tIHNvbWUgbG9zdCB0cmFnZWR5LCBwZXJoYXBzIHRoZSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZWRpcHVzPC90aXRsZT4gb2YgRXVyaXBpZGVzIChOYXVjaywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJhZy5HcmFlYy5GcmFnLjI8L3RpdGxlPiwgcC4gOTExKS48L25vdGU+IAoJCQkJICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZWRpcHVzPC90aXRsZT4gb2YgRXVyaXBpZGVzIChOYXVjaywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJhZy5HcmFlYy5GcmFnLjI8L3RpdGxlPiwgcC4gOTExKS48L3RyYW5zbGF0aW9uPg=="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQWdhaW4sIHdoZW4gTWFyY3VzIEdlbGxpdXMsIHdobyB3YXMgdGhvdWdodCB0byBiZSBvZiBzZXJ2aWxlIGJpcnRoLCBoYWQgcmVhZCBsZXR0ZXJzIHRvIHRoZSBzZW5hdGUgaW4gYSBsb3VkIGFuZCBjbGVhciB2b2ljZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvIG5vdCBtYXJ2ZWwsPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhlIHRvbyBpcyBvbmUgb2YgdGhvc2Ugd2hvIGhhdmUgY3JpZWQgYWxvdWQgZm9yIHRoZWlyIGZyZWVkb20uPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgcGxheSB1cG9uIHRoZSBwaHJhc2UgKHVzZWQgb2YgYSBzbGF2ZSkgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW4gbGliZXJ0YXRlbSByZWNsYW1hcmUuPC9mb3JlaWduPgogICAgICAgICAgICAgICA8L3E+CiAgICAgICAgICAgIDwvbm90ZT4gQW5kIHdoZW4gRmF1c3R1cywgdGhlIHNvbiBvZiB0aGUgU3VsbGEgd2hvIHdhcyBkaWN0YXRvciBhdCBSb21lIGFuZCBwbGFjYXJkZWQgbWFueSBwZW9wbGUgZm9yIGRlYXRoLCBnb3QgaW50byBkZWJ0LCBzcXVhbmRlcmVkIG11Y2ggb2YgaGlzIHN1YnN0YW5jZSwgYW5kIHBsYWNhcmRlZCBoaXMgaG91c2Vob2xkIGdvb2RzIGZvciBzYWxlLCBDaWNlcm8gc2FpZCBoZSBsaWtlZCB0aGlzIHBsYWNhcmRpbmcgYmV0dGVyIHRoYW4gaGlzIGZhdGhlcidzLgoJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbiBsaWJlcnRhdGVtIHJlY2xhbWFyZS48L2ZvcmVpZ24+CiAgICAgICAgICAgICAgIDwvcT4KICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW4gbGliZXJ0YXRlbSByZWNsYW1hcmUuPC9mb3JlaWduPgogICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBhIGNvbnNlcXVlbmNlIG9mIHRoaXMgaGUgYmVjYW1lIG9kaW91cyB0byBtYW55OyBhbmQgYmVzaWRlcywgdGhlIHBhcnRpc2FucyBvZiBDbG9kaXVzIGNvbWJpbmVkIGFnYWluc3QgaGltIG9uIHRoZSBmb2xsb3dpbmcgZ3JvdW5kLiBDbG9kaXVzIHdhcyBhIG1hbiBvZiBub2JsZSBiaXJ0aCwgeW91bmcgaW4geWVhcnMsIGJ1dCBib2xkIGFuZCBwcmVzdW1wdHVvdXMgaW4gc3Bpcml0LiBUaGlzIG1hbiwgYmVpbmcgaW4gbG92ZSB3aXRoIFBvbXBlaWEsIENhZXNhcidzIHdpZmUsIGdvdCBpbnRvIGhpcyBob3VzZSBzZWNyZXRseSwgYnkgYXNzdW1pbmcgdGhlIGRyZXNzIGFuZCBndWlzZSBvZiBhIGx1dGUtcGxheWVyOyBmb3IgdGhlIHdvbWVuIG9mIFJvbWUgd2VyZSBjZWxlYnJhdGluZyBpbiBDYWVzYXIncyBob3VzZSB0aGF0IG15c3RlcmlvdXMgcml0ZSB3aGljaCBtZW4gd2VyZSBub3QgYWxsb3dlZCB0byB3aXRuZXNzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAxOS4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpeC4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIG5vIG1hbiB3YXMgdGhlcmU7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBiZWluZyBzdGlsbCBhIGJlYXJkbGVzcyB5b3V0aCBDbG9kaXVzIGhvcGVkIHdpdGhvdXQgYmVpbmcgbm90aWNlZCB0byBzbGlwIHRocm91Z2ggdG8gUG9tcGVpYSBhbG9uZyB3aXRoIHRoZSB3b21lbi4gQnV0IHNpbmNlIGhlIGdvdCBpbiBhdCBuaWdodCBhbmQgdGhlIGhvdXNlIHdhcyBsYXJnZSwgaGUgbG9zdCBoaXMgd2F5IGluIHRoZSBwYXNzYWdlczsgYW5kIGFzIGhlIHdhcyB3YW5kZXJpbmcgYWJvdXQsIGEgbWFpZCBvZiBBdXJlbGlhLCBDYWVzYXIncyBtb3RoZXIsIGNhdWdodCBzaWdodCBvZiBoaW0gYW5kIGFza2VkIGhpbSBoaXMgbmFtZS4gQmVpbmcgdGh1cyBjb21wZWxsZWQgdG8gc3BlYWssIGhlIHNhaWQgdGhhdCBoZSB3YXMgbG9va2luZyBmb3IgYW4gYXR0ZW5kYW50IG9mIFBvbXBlaWEgbmFtZWQgQWJyYSwgd2hlcmV1cG9uIHRoZSBtYWlkLCBwZXJjZWl2aW5nIHRoYXQgaGlzIHZvaWNlIHdhcyBub3QgdGhhdCBvZiBhIHdvbWFuLCByYWlzZWQgYSBjcnkgYW5kIGNhbGxlZCB0aGUgd29tZW4gdG9nZXRoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHNodXQgdGhlIGRvb3JzLCBzZWFyY2hlZCBjYXJlZnVsbHkgYWxsIGFib3V0LCBhbmQgZm91bmQgQ2xvZGl1cywgd2hvIGhhZCB0YWtlbiByZWZ1Z2UgaW4gdGhlIGNoYW1iZXIgb2YgdGhlIGdpcmwgd2l0aCB3aG9tIGhlIGNhbWUgaW50byB0aGUgaG91c2UuIFRoZSBhZmZhaXIgaGF2aW5nIGJlY29tZSBub2lzZWQgYWJyb2FkLCBDYWVzYXIgZGl2b3JjZWQgUG9tcGVpYSBhbmQgaGFkIGFuIGFjdGlvbiBmb3Igc2FjcmlsZWdlIGJyb3VnaHQgYWdhaW5zdCBDbG9kaXVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgYSBjb25zZXF1ZW5jZSBvZiB0aGlzIGhlIGJlY2FtZSBvZGlvdXMgdG8gbWFueTsgYW5kIGJlc2lkZXMsIHRoZSBwYXJ0aXNhbnMgb2YgQ2xvZGl1cyBjb21iaW5lZCBhZ2FpbnN0IGhpbSBvbiB0aGUgZm9sbG93aW5nIGdyb3VuZC4gQ2xvZGl1cyB3YXMgYSBtYW4gb2Ygbm9ibGUgYmlydGgsIHlvdW5nIGluIHllYXJzLCBidXQgYm9sZCBhbmQgcHJlc3VtcHR1b3VzIGluIHNwaXJpdC4gVGhpcyBtYW4sIGJlaW5nIGluIGxvdmUgd2l0aCBQb21wZWlhLCBDYWVzYXIncyB3aWZlLCBnb3QgaW50byBoaXMgaG91c2Ugc2VjcmV0bHksIGJ5IGFzc3VtaW5nIHRoZSBkcmVzcyBhbmQgZ3Vpc2Ugb2YgYSBsdXRlLXBsYXllcjsgZm9yIHRoZSB3b21lbiBvZiBSb21lIHdlcmUgY2VsZWJyYXRpbmcgaW4gQ2Flc2FyJ3MgaG91c2UgdGhhdCBteXN0ZXJpb3VzIHJpdGUgd2hpY2ggbWVuIHdlcmUgbm90IGFsbG93ZWQgdG8gd2l0bmVzcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDE5LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGl4LiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgbm8gbWFuIHdhcyB0aGVyZTsgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDE5LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGl4LiAzLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBiZWluZyBzdGlsbCBhIGJlYXJkbGVzcyB5b3V0aCBDbG9kaXVzIGhvcGVkIHdpdGhvdXQgYmVpbmcgbm90aWNlZCB0byBzbGlwIHRocm91Z2ggdG8gUG9tcGVpYSBhbG9uZyB3aXRoIHRoZSB3b21lbi4gQnV0IHNpbmNlIGhlIGdvdCBpbiBhdCBuaWdodCBhbmQgdGhlIGhvdXNlIHdhcyBsYXJnZSwgaGUgbG9zdCBoaXMgd2F5IGluIHRoZSBwYXNzYWdlczsgYW5kIGFzIGhlIHdhcyB3YW5kZXJpbmcgYWJvdXQsIGEgbWFpZCBvZiBBdXJlbGlhLCBDYWVzYXIncyBtb3RoZXIsIGNhdWdodCBzaWdodCBvZiBoaW0gYW5kIGFza2VkIGhpbSBoaXMgbmFtZS4gQmVpbmcgdGh1cyBjb21wZWxsZWQgdG8gc3BlYWssIGhlIHNhaWQgdGhhdCBoZSB3YXMgbG9va2luZyBmb3IgYW4gYXR0ZW5kYW50IG9mIFBvbXBlaWEgbmFtZWQgQWJyYSwgd2hlcmV1cG9uIHRoZSBtYWlkLCBwZXJjZWl2aW5nIHRoYXQgaGlzIHZvaWNlIHdhcyBub3QgdGhhdCBvZiBhIHdvbWFuLCByYWlzZWQgYSBjcnkgYW5kIGNhbGxlZCB0aGUgd29tZW4gdG9nZXRoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHNodXQgdGhlIGRvb3JzLCBzZWFyY2hlZCBjYXJlZnVsbHkgYWxsIGFib3V0LCBhbmQgZm91bmQgQ2xvZGl1cywgd2hvIGhhZCB0YWtlbiByZWZ1Z2UgaW4gdGhlIGNoYW1iZXIgb2YgdGhlIGdpcmwgd2l0aCB3aG9tIGhlIGNhbWUgaW50byB0aGUgaG91c2UuIFRoZSBhZmZhaXIgaGF2aW5nIGJlY29tZSBub2lzZWQgYWJyb2FkLCBDYWVzYXIgZGl2b3JjZWQgUG9tcGVpYSBhbmQgaGFkIGFuIGFjdGlvbiBmb3Igc2FjcmlsZWdlIGJyb3VnaHQgYWdhaW5zdCBDbG9kaXVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIENpY2VybyB3YXMgYSBmcmllbmQgb2YgQ2xvZGl1cywgYW5kIGluIHRoZSBhZmZhaXIgb2YgQ2F0aWxpbmUgaGFkIGZvdW5kIGhpbSBhIG1vc3QgZWFnZXIgY28td29ya2VyIGFuZCBndWFyZGlhbiBvZiBoaXMgcGVyc29uOyBidXQgd2hlbiBDbG9kaXVzIHJlcGxpZWQgdG8gdGhlIGNoYXJnZSBhZ2FpbnN0IGhpbSBieSBpbnNpc3RpbmcgdGhhdCBoZSBoYWQgbm90IGV2ZW4gYmVlbiBpbiBSb21lIGF0IHRoZSB0aW1lLCBidXQgaGFkIGJlZW4gc3RheWluZyBpbiBwbGFjZXMgYXQgdGhlIGZhcnRoZXN0IHJlbW92ZSBmcm9tIHRoZXJlLCBDaWNlcm8gdGVzdGlmaWVkIGFnYWluc3QgaGltLCBkZWNsYXJpbmcgdGhhdCBDbG9kaXVzIGhhZCBjb21lIHRvIGhpcyBob3VzZSBhbmQgY29uc3VsdGVkIGhpbSBvbiBjZXJ0YWluIG1hdHRlcnM7IHdoaWNoIHdhcyB0cnVlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBpdCB3YXMgdGhvdWdodCB0aGF0IENpY2VybyBkaWQgbm90IGdpdmUgaGlzIHRlc3RpbW9ueSBmb3IgdGhlIHRydXRoJ3Mgc2FrZSwgYnV0IGJ5IHdheSBvZiBkZWZlbmNlIGFnYWluc3QgdGhlIGNoYXJnZXMgb2YgaGlzIG93biB3aWZlIFRlcmVudGlhLiBGb3IgdGhlcmUgd2FzIGVubWl0eSBiZXR3ZWVuIGhlciBhbmQgQ2xvZGl1cyBvbiBhY2NvdW50IG9mIGhpcyBzaXN0ZXIgQ2xvZGlhLCB3aG9tIFRlcmVudGlhIHRob3VnaHQgdG8gYmUgZGVzaXJvdXMgb2YgbWFycnlpbmcgQ2ljZXJvIGFuZCB0byBiZSBjb250cml2aW5nIHRoaXMgd2l0aCB0aGUgYWlkIG9mIGEgY2VydGFpbiBUdWxsdXM7IG5vdywgVHVsbHVzIHdhcyBhIGNvbXBhbmlvbiBhbmQgYW4gZXNwZWNpYWwgaW50aW1hdGUgb2YgQ2ljZXJvLCBhbmQgaGlzIGNvbnN0YW50IHZpc2l0cyBhbmQgYXR0ZW50aW9ucyB0byBDbG9kaWEsIHdobyBsaXZlZCBuZWFyIGJ5LCBtYWRlIFRlcmVudGlhIHN1c3BpY2lvdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvLCBiZWluZyBhIHdvbWFuIG9mIGhhcnNoIG5hdHVyZSwgYW5kIGhhdmluZyBzd2F5IG92ZXIgQ2ljZXJvLCBzaGUgaW5jaXRlZCBoaW0gdG8gam9pbiBpbiB0aGUgYXR0YWNrIHVwb24gQ2xvZGl1cyBhbmQgZ2l2ZSB0ZXN0aW1vbnkgYWdhaW5zdCBoaW0uIE1vcmVvdmVyLCBtYW55IG1lbiBvZiB0aGUgYmV0dGVyIGNsYXNzIGJvcmUgd2l0bmVzcyBhZ2FpbnN0IENsb2RpdXMgZm9yIHBlcmp1cnksIHJlY2tsZXNzbmVzcywgYnJpYmVyeSBvZiB0aGUgbXVsdGl0dWRlLCBhbmQgZGViYXVjaGluZyBvZiB3b21lbi4gQW5kIEx1Y3VsbHVzIGFjdHVhbGx5IHByb2R1Y2VkIGZlbWFsZSBzbGF2ZXMgd2hvIHRlc3RpZmllZCB0aGF0IENsb2RpdXMgaGFkIGNvbW1lcmNlIHdpdGggaGlzIHlvdW5nZXN0IHNpc3RlciB3aGVuIHNoZSB3YXMgbGl2aW5nIHdpdGggTHVjdWxsdXMgYXMgaGlzIHdpZmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBhbHNvIGEgZ2VuZXJhbCBiZWxpZWYgdGhhdCBDbG9kaXVzIGhhZCBpbnRlcmNvdXJzZSB3aXRoIGhpcyBvdGhlciB0d28gc2lzdGVycywgb2Ygd2hvbSBUZXJ0aWEgd2FzIHRoZSB3aWZlIG9mIE1hcmNpdXMgUmV4LCBhbmQgQ2xvZGlhIG9mIE1ldGVsbHVzIENlbGVyOyB0aGUgbGF0dGVyIHdhcyBjYWxsZWQgUXVhZHJhbnRpYSwgYmVjYXVzZSBvbmUgb2YgaGVyIGxvdmVycyBoYWQgcHV0IGNvcHBlciBjb2lucyBpbnRvIGEgcHVyc2UgYW5kIHNlbnQgdGhlbSB0byBoZXIgZm9yIHNpbHZlciwgYW5kIHRoZSBzbWFsbGVzdCBjb3BwZXIgY29pbiB3YXMgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cXVhZHJhbnMuPC9xPiBJdCB3YXMgd2l0aCByZWdhcmQgdG8gdGhpcyBzaXN0ZXIgaW4gcGFydGljdWxhciB0aGF0IENsb2RpdXMgd2FzIGluIGV2aWwgcmVwdXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBzaW5jZSB0aGUgcGVvcGxlIGF0IHRoaXMgdGltZSBzZXQgdGhlbXNlbHZlcyBhZ2FpbnN0IHRob3NlIHdobyBjb21iaW5lZCBhbmQgdGVzdGlmaWVkIGFnYWluc3QgaGltLCB0aGUganVyb3JzIHdlcmUgZnJpZ2h0ZW5lZCBhbmQgc3Vycm91bmRlZCB0aGVtc2VsdmVzIHdpdGggYSBndWFyZCwgYW5kIG1vc3Qgb2YgdGhlbSBjYXN0IHRoZWlyIHZvdGluZy10YWJsZXRzIHdpdGggdGhlIHdyaXRpbmcgb24gdGhlbSBjb25mdXNlZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gYWxzbyB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDEwLjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2Flc2FyPC90aXRsZT4sIHguIDc8L2JpYmw+LiBFYWNoIGp1cm9yIHdhcyBwcm92aWRlZCB3aXRoIHRocmVlIHRhYmxldHMsIG9uIG9uZSBvZiB3aGljaCB3YXMgbWFya2VkIEEgKDxmb3JlaWduIGxhbmc9ImxhIj5hYnNvbHZvPC9mb3JlaWduPik7IG9uIGEgc2Vjb25kIEMgKDxmb3JlaWduIGxhbmc9ImxhIj5jb25kZW1ubzwvZm9yZWlnbj4pOyBhbmQgb24gYSB0aGlyZCBOLkwuICg8Zm9yZWlnbiBsYW5nPSJsYSI+bm9uIGxpcXVldDwvZm9yZWlnbj4pLiBUaGUganVyb3JzIHZvdGVkIGJ5IHBsYWNpbmcgb25lIG9mIHRoZXNlIHRhYmxldHMgaW4gdGhlIHVybi4gUGx1dGFyY2ggbXVzdCBoYXZlIG1pc3VuZGVyc3Rvb2QgaGlzIHNvdXJjZS48L25vdGU+IEJ1dCBuZXZlcnRoZWxlc3MgdGhvc2Ugd2hvIHdlcmUgZm9yIGFjcXVpdHRhbCBhcHBlYXJlZCB0byBiZSBpbiB0aGUgbWFqb3JpdHk7IGFuZCBzb21lIGJyaWJlcnkgYWxzbyB3YXMgc2FpZCB0byBoYXZlIGJlZW4gdXNlZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBsZWQgQ2F0dWx1cyB0byBzYXksIHdoZW4gaGUgbWV0IHRoZSBqdXJvcnMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgd2FzIGluZGVlZCBhcyBhIG1lYXN1cmUgb2Ygc2FmZXR5IHRoYXQgeW91IGFza2VkIGZvciB5b3VyIGd1YXJkOyB5b3Ugd2VyZSBhZnJhaWQgdGhhdCBzb21lb25lIHdvdWxkIHRha2UgeW91ciBtb25leSBhd2F5IGZyb20geW91LjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEF0dC4gMS4xNi41IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZT5hZCBBdHQuPC90aXRsZT4gaS4gMTYsIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFuZCBDaWNlcm8sIHdoZW4gQ2xvZGl1cyB0b2xkIGhpbSB0aGF0IGFzIGEgd2l0bmVzcyBoZSBoYWQgZm91bmQgbm8gY3JlZGl0IHdpdGggdGhlIGp1cm9ycywgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksIHR3ZW50eS1maXZlIG9mIHRoZSBqdXJvcnMgZ2F2ZSBtZSBjcmVkaXQsIGZvciBzbyBtYW55IHZvdGVkIGFnYWluc3QgeW91OyBhbmQgdGhpcnR5IG9mIHRoZW0gZ2F2ZSB5b3Ugbm8gY3JlZGl0LCBmb3IgdGhleSBkaWQgbm90IHZvdGUgdG8gYWNxdWl0IHlvdSB1bnRpbCB0aGV5IGhhZCBnb3QgeW91ciBtb25leS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDEuMTYuMTAiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPGVtcGg+aWJpZC48L2VtcGg+IDE2LCAxMC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIsIGhvd2V2ZXIsIHdoZW4gc3VtbW9uZWQgYXMgYSB3aXRuZXNzLCBnYXZlIG5vIHRlc3RpbW9ueSBhZ2FpbnN0IENsb2RpdXMsIGFuZCBkZW5pZWQgdGhhdCBoZSBoYWQgY29uZGVtbmVkIGhpcyB3aWZlIGZvciBhZHVsdGVyeSwgYnV0IHNhaWQgdGhhdCBoZSBoYWQgcHV0IGhlciBhd2F5IGJlY2F1c2UgQ2Flc2FyJ3Mgd2lmZSBtdXN0IGJlIGZyZWUgbm90IG9ubHkgZnJvbSBzaGFtZWZ1bCBjb25kdWN0LCBidXQgZXZlbiBmcm9tIHNoYW1lZnVsIHJlcG9ydC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBDaWNlcm8gd2FzIGEgZnJpZW5kIG9mIENsb2RpdXMsIGFuZCBpbiB0aGUgYWZmYWlyIG9mIENhdGlsaW5lIGhhZCBmb3VuZCBoaW0gYSBtb3N0IGVhZ2VyIGNvLXdvcmtlciBhbmQgZ3VhcmRpYW4gb2YgaGlzIHBlcnNvbjsgYnV0IHdoZW4gQ2xvZGl1cyByZXBsaWVkIHRvIHRoZSBjaGFyZ2UgYWdhaW5zdCBoaW0gYnkgaW5zaXN0aW5nIHRoYXQgaGUgaGFkIG5vdCBldmVuIGJlZW4gaW4gUm9tZSBhdCB0aGUgdGltZSwgYnV0IGhhZCBiZWVuIHN0YXlpbmcgaW4gcGxhY2VzIGF0IHRoZSBmYXJ0aGVzdCByZW1vdmUgZnJvbSB0aGVyZSwgQ2ljZXJvIHRlc3RpZmllZCBhZ2FpbnN0IGhpbSwgZGVjbGFyaW5nIHRoYXQgQ2xvZGl1cyBoYWQgY29tZSB0byBoaXMgaG91c2UgYW5kIGNvbnN1bHRlZCBoaW0gb24gY2VydGFpbiBtYXR0ZXJzOyB3aGljaCB3YXMgdHJ1ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IHdhcyB0aG91Z2h0IHRoYXQgQ2ljZXJvIGRpZCBub3QgZ2l2ZSBoaXMgdGVzdGltb255IGZvciB0aGUgdHJ1dGgncyBzYWtlLCBidXQgYnkgd2F5IG9mIGRlZmVuY2UgYWdhaW5zdCB0aGUgY2hhcmdlcyBvZiBoaXMgb3duIHdpZmUgVGVyZW50aWEuIEZvciB0aGVyZSB3YXMgZW5taXR5IGJldHdlZW4gaGVyIGFuZCBDbG9kaXVzIG9uIGFjY291bnQgb2YgaGlzIHNpc3RlciBDbG9kaWEsIHdob20gVGVyZW50aWEgdGhvdWdodCB0byBiZSBkZXNpcm91cyBvZiBtYXJyeWluZyBDaWNlcm8gYW5kIHRvIGJlIGNvbnRyaXZpbmcgdGhpcyB3aXRoIHRoZSBhaWQgb2YgYSBjZXJ0YWluIFR1bGx1czsgbm93LCBUdWxsdXMgd2FzIGEgY29tcGFuaW9uIGFuZCBhbiBlc3BlY2lhbCBpbnRpbWF0ZSBvZiBDaWNlcm8sIGFuZCBoaXMgY29uc3RhbnQgdmlzaXRzIGFuZCBhdHRlbnRpb25zIHRvIENsb2RpYSwgd2hvIGxpdmVkIG5lYXIgYnksIG1hZGUgVGVyZW50aWEgc3VzcGljaW91cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvLCBiZWluZyBhIHdvbWFuIG9mIGhhcnNoIG5hdHVyZSwgYW5kIGhhdmluZyBzd2F5IG92ZXIgQ2ljZXJvLCBzaGUgaW5jaXRlZCBoaW0gdG8gam9pbiBpbiB0aGUgYXR0YWNrIHVwb24gQ2xvZGl1cyBhbmQgZ2l2ZSB0ZXN0aW1vbnkgYWdhaW5zdCBoaW0uIE1vcmVvdmVyLCBtYW55IG1lbiBvZiB0aGUgYmV0dGVyIGNsYXNzIGJvcmUgd2l0bmVzcyBhZ2FpbnN0IENsb2RpdXMgZm9yIHBlcmp1cnksIHJlY2tsZXNzbmVzcywgYnJpYmVyeSBvZiB0aGUgbXVsdGl0dWRlLCBhbmQgZGViYXVjaGluZyBvZiB3b21lbi4gQW5kIEx1Y3VsbHVzIGFjdHVhbGx5IHByb2R1Y2VkIGZlbWFsZSBzbGF2ZXMgd2hvIHRlc3RpZmllZCB0aGF0IENsb2RpdXMgaGFkIGNvbW1lcmNlIHdpdGggaGlzIHlvdW5nZXN0IHNpc3RlciB3aGVuIHNoZSB3YXMgbGl2aW5nIHdpdGggTHVjdWxsdXMgYXMgaGlzIHdpZmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBhbHNvIGEgZ2VuZXJhbCBiZWxpZWYgdGhhdCBDbG9kaXVzIGhhZCBpbnRlcmNvdXJzZSB3aXRoIGhpcyBvdGhlciB0d28gc2lzdGVycywgb2Ygd2hvbSBUZXJ0aWEgd2FzIHRoZSB3aWZlIG9mIE1hcmNpdXMgUmV4LCBhbmQgQ2xvZGlhIG9mIE1ldGVsbHVzIENlbGVyOyB0aGUgbGF0dGVyIHdhcyBjYWxsZWQgUXVhZHJhbnRpYSwgYmVjYXVzZSBvbmUgb2YgaGVyIGxvdmVycyBoYWQgcHV0IGNvcHBlciBjb2lucyBpbnRvIGEgcHVyc2UgYW5kIHNlbnQgdGhlbSB0byBoZXIgZm9yIHNpbHZlciwgYW5kIHRoZSBzbWFsbGVzdCBjb3BwZXIgY29pbiB3YXMgY2FsbGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5xdWFkcmFucy48L3E+IEl0IHdhcyB3aXRoIHJlZ2FyZCB0byB0aGlzIHNpc3RlciBpbiBwYXJ0aWN1bGFyIHRoYXQgQ2xvZGl1cyB3YXMgaW4gZXZpbCByZXB1dGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHNpbmNlIHRoZSBwZW9wbGUgYXQgdGhpcyB0aW1lIHNldCB0aGVtc2VsdmVzIGFnYWluc3QgdGhvc2Ugd2hvIGNvbWJpbmVkIGFuZCB0ZXN0aWZpZWQgYWdhaW5zdCBoaW0sIHRoZSBqdXJvcnMgd2VyZSBmcmlnaHRlbmVkIGFuZCBzdXJyb3VuZGVkIHRoZW1zZWx2ZXMgd2l0aCBhIGd1YXJkLCBhbmQgbW9zdCBvZiB0aGVtIGNhc3QgdGhlaXIgdm90aW5nLXRhYmxldHMgd2l0aCB0aGUgd3JpdGluZyBvbiB0aGVtIGNvbmZ1c2VkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIGFsc28gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDEwLjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeC4gNzwvYmlibD4uIEVhY2gganVyb3Igd2FzIHByb3ZpZGVkIHdpdGggdGhyZWUgdGFibGV0cywgb24gb25lIG9mIHdoaWNoIHdhcyBtYXJrZWQgQSAoPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+YWJzb2x2bzwvZm9yZWlnbj4pOyBvbiBhIHNlY29uZCBDICg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb25kZW1ubzwvZm9yZWlnbj4pOyBhbmQgb24gYSB0aGlyZCBOLkwuICg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5ub24gbGlxdWV0PC9mb3JlaWduPikuIFRoZSBqdXJvcnMgdm90ZWQgYnkgcGxhY2luZyBvbmUgb2YgdGhlc2UgdGFibGV0cyBpbiB0aGUgdXJuLiBQbHV0YXJjaCBtdXN0IGhhdmUgbWlzdW5kZXJzdG9vZCBoaXMgc291cmNlLjwvbm90ZT4gQnV0IG5ldmVydGhlbGVzcyB0aG9zZSB3aG8gd2VyZSBmb3IgYWNxdWl0dGFsIGFwcGVhcmVkIHRvIGJlIGluIHRoZSBtYWpvcml0eTsgYW5kIHNvbWUgYnJpYmVyeSBhbHNvIHdhcyBzYWlkIHRvIGhhdmUgYmVlbiB1c2VkLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDEwLjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeC4gNzwvYmlibD4uIEVhY2gganVyb3Igd2FzIHByb3ZpZGVkIHdpdGggdGhyZWUgdGFibGV0cywgb24gb25lIG9mIHdoaWNoIHdhcyBtYXJrZWQgQSAoPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHguIDc8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5hYnNvbHZvPC9mb3JlaWduPik7IG9uIGEgc2Vjb25kIEMgKDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbmRlbW5vPC9mb3JlaWduPik7IGFuZCBvbiBhIHRoaXJkIE4uTC4gKDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPm5vbiBsaXF1ZXQ8L2ZvcmVpZ24+KS4gVGhlIGp1cm9ycyB2b3RlZCBieSBwbGFjaW5nIG9uZSBvZiB0aGVzZSB0YWJsZXRzIGluIHRoZSB1cm4uIFBsdXRhcmNoIG11c3QgaGF2ZSBtaXN1bmRlcnN0b29kIGhpcyBzb3VyY2UuPC90cmFuc2xhdGlvbj4="
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbGVkIENhdHVsdXMgdG8gc2F5LCB3aGVuIGhlIG1ldCB0aGUganVyb3JzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgd2FzIGluZGVlZCBhcyBhIG1lYXN1cmUgb2Ygc2FmZXR5IHRoYXQgeW91IGFza2VkIGZvciB5b3VyIGd1YXJkOyB5b3Ugd2VyZSBhZnJhaWQgdGhhdCBzb21lb25lIHdvdWxkIHRha2UgeW91ciBtb25leSBhd2F5IGZyb20geW91LjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDEuMTYuNSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBBdHQuPC90aXRsZT4gaS4gMTYsIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFuZCBDaWNlcm8sIHdoZW4gQ2xvZGl1cyB0b2xkIGhpbSB0aGF0IGFzIGEgd2l0bmVzcyBoZSBoYWQgZm91bmQgbm8gY3JlZGl0IHdpdGggdGhlIGp1cm9ycywgc2FpZDogCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEF0dC4gMS4xNi41IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIEF0dC48L3RpdGxlPiBpLiAxNiwgNS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIEF0dC48L3RpdGxlPiBpLiAxNiwgNS48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5heSwgdHdlbnR5LWZpdmUgb2YgdGhlIGp1cm9ycyBnYXZlIG1lIGNyZWRpdCwgZm9yIHNvIG1hbnkgdm90ZWQgYWdhaW5zdCB5b3U7IGFuZCB0aGlydHkgb2YgdGhlbSBnYXZlIHlvdSBubyBjcmVkaXQsIGZvciB0aGV5IGRpZCBub3Qgdm90ZSB0byBhY3F1aXQgeW91IHVudGlsIHRoZXkgaGFkIGdvdCB5b3VyIG1vbmV5LjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDEuMTYuMTAiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5pYmlkLjwvZW1waD4gMTYsIDEwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDEuMTYuMTAiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5pYmlkLjwvZW1waD4gMTYsIDEwLjwvYmlibD4KICAgICAgICAgICAgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5pYmlkLjwvZW1waD4gMTYsIDEwLjwvdHJhbnNsYXRpb24+"
translation['29.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciwgaG93ZXZlciwgd2hlbiBzdW1tb25lZCBhcyBhIHdpdG5lc3MsIGdhdmUgbm8gdGVzdGltb255IGFnYWluc3QgQ2xvZGl1cywgYW5kIGRlbmllZCB0aGF0IGhlIGhhZCBjb25kZW1uZWQgaGlzIHdpZmUgZm9yIGFkdWx0ZXJ5LCBidXQgc2FpZCB0aGF0IGhlIGhhZCBwdXQgaGVyIGF3YXkgYmVjYXVzZSBDYWVzYXIncyB3aWZlIG11c3QgYmUgZnJlZSBub3Qgb25seSBmcm9tIHNoYW1lZnVsIGNvbmR1Y3QsIGJ1dCBldmVuIGZyb20gc2hhbWVmdWwgcmVwb3J0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2xvZGl1cywgaGF2aW5nIGVzY2FwZWQgaGlzIHBlcmlsLCBhbmQgaGF2aW5nIGJlZW4gY2hvc2VuIHRyaWJ1bmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDU4IEIuQy48L25vdGU+IGF0IG9uY2UgYmVnYW4gdG8gYXR0YWNrIENpY2VybywgYXJyYXlpbmcgYW5kIHN0aXJyaW5nIHVwIGFnYWluc3QgaGltIGFsbCB0aGluZ3MgYW5kIGFsbCBtZW4gYWxpa2UuIEhlIHdvbiB0aGUgZmF2b3VyIG9mIHRoZSBwZW9wbGUgYnkgYmVuZXZvbGVudCBsYXdzLCBnb3QgbGFyZ2UgcHJvdmluY2VzIHZvdGVkIHRvIGVhY2ggb2YgdGhlIGNvbnN1bHMgKE1hY2Vkb25pYSB0byBQaXNvLCBhbmQgU3lyaWEgdG8gR2FiaW5pdXMpLCBicm91Z2h0IG1hbnkgb2YgdGhlIHBvb3JlciBjbGFzcyBpbnRvIG9yZ2FuaXplZCBwb2xpdGljYWwgYWN0aXZpdHksIGFuZCBrZXB0IGFybWVkIHNsYXZlcyBhYm91dCBoaXMgcGVyc29uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIG9mIHRoZSB0aHJlZSBtZW4gd2hvIGF0IHRoYXQgdGltZSBoYWQgbW9zdCBwb3dlciwgQ3Jhc3N1cyB3YXMgYW4gb3V0LWFuZC1vdXQgZm9lIG9mIENpY2VybywgUG9tcGV5IHdhcyBkYWxseWluZyB3aXRoIGJvdGgsIGFuZCBDYWVzYXIgd2FzIGFib3V0IHRvIHNldCBvdXQgZm9yIEdhdWwgd2l0aCBhbiBhcm15OyBpbnRvIENhZXNhcidzIGZhdm91ciwgdGhlcmVmb3JlLCBDaWNlcm8gaW5zaW51YXRlZCBoaW1zZWxmIChhbHRob3VnaCBDYWVzYXIgd2FzIG5vdCBhIGZyaWVuZCwgYnV0IGFuIG9iamVjdCBvZiBzdXNwaWNpb24gb3dpbmcgdG8gdGhlIGFmZmFpciBvZiBDYXRpbGluZSksIGFuZCBhc2tlZCB0byBhY2NvbXBhbnkgaGltIG9uIGhpcyBjYW1wYWlnbiBhcyBsZWdhdGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIENpY2VybyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQXR0LiAyLjE4LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+YWQgQXR0LjwvdGl0bGU+IGlpLiAxOCwgMzwvYmlibD4pLCBpdCB3YXMgQ2Flc2FyIHdobyBtYWRlIHRoZSByZXF1ZXN0Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm8gc29vbmVyIGhhZCBDYWVzYXIgZ3JhbnRlZCB0aGUgcmVxdWVzdCB0aGFuIENsb2RpdXMsIHNlZWluZyB0aGF0IENpY2VybyB3YXMgdGh1cyBlc2NhcGluZyBoaXMgdHJpYnVuaWNpYWwgcG93ZXIsIHByZXRlbmRlZCB0byBiZSBkZXNpcm91cyBvZiBhIHJlY29uY2lsaWF0aW9uLCBhbmQgYnkgbGF5aW5nIHRoZSBjaGllZiBibGFtZSB1cG9uIFRlcmVudGlhLCBhbmQgYWx3YXlzIHNwZWFraW5nIG9mIENpY2VybyBpbiBmcmllbmRseSB0ZXJtcyBhbmQgdXNpbmcga2luZGx5IGV4cHJlc3Npb25zIGFib3V0IGhpbSwgYXMgb25lIHdobyBib3JlIGhpbSBubyBoYXRyZWQgb3IgZXZlbiBpbGwtd2lsbCwgYnV0IGhhZCBtb2RlcmF0ZSBjb21wbGFpbnRzIHRvIG1ha2Ugb2YgaGltIGluIGEgZnJpZW5kbHkgd2F5LCBoZSBhbHRvZ2V0aGVyIHRvb2sgYXdheSBoaXMgZmVhciwgc28gdGhhdCBoZSBkZWNsaW5lZCB0aGUgb2ZmaWNlIG9mIGxlZ2F0ZSB1bmRlciBDYWVzYXIgYW5kIGFnYWluIGFwcGxpZWQgaGltc2VsZiB0byBwdWJsaWMgbWF0dGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGF0IHRoaXMgY29uZHVjdCBDYWVzYXIgd2FzIGV4YXNwZXJhdGVkLCBhbmQgZW5jb3VyYWdlZCBDbG9kaXVzIGFnYWluc3QgQ2ljZXJvLCBhbmQgY29tcGxldGVseSBhbGllbmF0ZWQgUG9tcGV5IGZyb20gaGltLCB3aGlsZSBoZSBoaW1zZWxmIHRlc3RpZmllZCBiZWZvcmUgdGhlIHBlb3BsZSB0aGF0IGhlIGRpZCBub3QgdGhpbmsgaXQgcmlnaHQgb3IgbGF3ZnVsIHRoYXQgbWVuIHNob3VsZCBiZSBwdXQgdG8gZGVhdGggd2l0aG91dCBhIHRyaWFsLCBhcyBpbiB0aGUgY2FzZSBvZiBMZW50dWx1cywgQ2V0aGVndXMsIGFuZCB0aGVpciBhY2NvbXBsaWNlcy4gRm9yIHRoaXMgd2FzIHRoZSBkZW51bmNpYXRpb24gbWFkZSBhZ2FpbnN0IENpY2VybywgYW5kIHRvIHRoaXMgaGUgd2FzIHN1bW1vbmVkIHRvIG1ha2UgYW5zd2VyLiBBbmQgc28sIGJlaW5nIGluIHBlcmlsIG9mIHByb3NlY3V0aW9uLCBoZSBjaGFuZ2VkIGhpcyBhdHRpcmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VG8gYSBnYXJiIG9mIG1vdXJuaW5nLjwvbm90ZT4gYW5kIHdpdGggaGlzIGhhaXIgdW50cmltbWVkIHdlbnQgYWJvdXQgc3VwcGxpY2F0aW5nIHRoZSBwZW9wbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDbG9kaXVzIG1ldCBoaW0gZXZlcnl3aGVyZSBpbiB0aGUgc3RyZWV0cywgd2l0aCBhIGJhbmQgb2YgYm9sZCBhbmQgaW5zb2xlbnQgbWVuIGFib3V0IGhpbSwgd2hvIG1hZGUgbWFueSB1bmJyaWRsZWQgamVzdHMgdXBvbiBDaWNlcm8ncyBjaGFuZ2Ugb2YgYXR0aXJlLCBhbmQgb2Z0ZW4gcGVsdGVkIGhpbSB3aXRoIG11ZCBhbmQgc3RvbmVzLCBhbmQgc28gaW50ZXJmZXJlZCB3aXRoIGhpcyBzdXBwbGljYXRpb25zIHRvIHRoZSBwZW9wbGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENsb2RpdXMsIGhhdmluZyBlc2NhcGVkIGhpcyBwZXJpbCwgYW5kIGhhdmluZyBiZWVuIGNob3NlbiB0cmlidW5lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDU4IEIuQy48L25vdGU+IGF0IG9uY2UgYmVnYW4gdG8gYXR0YWNrIENpY2VybywgYXJyYXlpbmcgYW5kIHN0aXJyaW5nIHVwIGFnYWluc3QgaGltIGFsbCB0aGluZ3MgYW5kIGFsbCBtZW4gYWxpa2UuIEhlIHdvbiB0aGUgZmF2b3VyIG9mIHRoZSBwZW9wbGUgYnkgYmVuZXZvbGVudCBsYXdzLCBnb3QgbGFyZ2UgcHJvdmluY2VzIHZvdGVkIHRvIGVhY2ggb2YgdGhlIGNvbnN1bHMgKE1hY2Vkb25pYSB0byBQaXNvLCBhbmQgU3lyaWEgdG8gR2FiaW5pdXMpLCBicm91Z2h0IG1hbnkgb2YgdGhlIHBvb3JlciBjbGFzcyBpbnRvIG9yZ2FuaXplZCBwb2xpdGljYWwgYWN0aXZpdHksIGFuZCBrZXB0IGFybWVkIHNsYXZlcyBhYm91dCBoaXMgcGVyc29uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgb2YgdGhlIHRocmVlIG1lbiB3aG8gYXQgdGhhdCB0aW1lIGhhZCBtb3N0IHBvd2VyLCBDcmFzc3VzIHdhcyBhbiBvdXQtYW5kLW91dCBmb2Ugb2YgQ2ljZXJvLCBQb21wZXkgd2FzIGRhbGx5aW5nIHdpdGggYm90aCwgYW5kIENhZXNhciB3YXMgYWJvdXQgdG8gc2V0IG91dCBmb3IgR2F1bCB3aXRoIGFuIGFybXk7IGludG8gQ2Flc2FyJ3MgZmF2b3VyLCB0aGVyZWZvcmUsIENpY2VybyBpbnNpbnVhdGVkIGhpbXNlbGYgKGFsdGhvdWdoIENhZXNhciB3YXMgbm90IGEgZnJpZW5kLCBidXQgYW4gb2JqZWN0IG9mIHN1c3BpY2lvbiBvd2luZyB0byB0aGUgYWZmYWlyIG9mIENhdGlsaW5lKSwgYW5kIGFza2VkIHRvIGFjY29tcGFueSBoaW0gb24gaGlzIGNhbXBhaWduIGFzIGxlZ2F0ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBDaWNlcm8gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQXR0LiAyLjE4LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBBdHQuPC90aXRsZT4gaWkuIDE4LCAzPC9iaWJsPiksIGl0IHdhcyBDYWVzYXIgd2hvIG1hZGUgdGhlIHJlcXVlc3QuPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDIuMTguMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIEF0dC48L3RpdGxlPiBpaS4gMTgsIDM8L2JpYmw+KSwgaXQgd2FzIENhZXNhciB3aG8gbWFkZSB0aGUgcmVxdWVzdC48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBBdHQuPC90aXRsZT4gaWkuIDE4LCAzPC90cmFuc2xhdGlvbj4="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBubyBzb29uZXIgaGFkIENhZXNhciBncmFudGVkIHRoZSByZXF1ZXN0IHRoYW4gQ2xvZGl1cywgc2VlaW5nIHRoYXQgQ2ljZXJvIHdhcyB0aHVzIGVzY2FwaW5nIGhpcyB0cmlidW5pY2lhbCBwb3dlciwgcHJldGVuZGVkIHRvIGJlIGRlc2lyb3VzIG9mIGEgcmVjb25jaWxpYXRpb24sIGFuZCBieSBsYXlpbmcgdGhlIGNoaWVmIGJsYW1lIHVwb24gVGVyZW50aWEsIGFuZCBhbHdheXMgc3BlYWtpbmcgb2YgQ2ljZXJvIGluIGZyaWVuZGx5IHRlcm1zIGFuZCB1c2luZyBraW5kbHkgZXhwcmVzc2lvbnMgYWJvdXQgaGltLCBhcyBvbmUgd2hvIGJvcmUgaGltIG5vIGhhdHJlZCBvciBldmVuIGlsbC13aWxsLCBidXQgaGFkIG1vZGVyYXRlIGNvbXBsYWludHMgdG8gbWFrZSBvZiBoaW0gaW4gYSBmcmllbmRseSB3YXksIGhlIGFsdG9nZXRoZXIgdG9vayBhd2F5IGhpcyBmZWFyLCBzbyB0aGF0IGhlIGRlY2xpbmVkIHRoZSBvZmZpY2Ugb2YgbGVnYXRlIHVuZGVyIENhZXNhciBhbmQgYWdhaW4gYXBwbGllZCBoaW1zZWxmIHRvIHB1YmxpYyBtYXR0ZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCB0aGlzIGNvbmR1Y3QgQ2Flc2FyIHdhcyBleGFzcGVyYXRlZCwgYW5kIGVuY291cmFnZWQgQ2xvZGl1cyBhZ2FpbnN0IENpY2VybywgYW5kIGNvbXBsZXRlbHkgYWxpZW5hdGVkIFBvbXBleSBmcm9tIGhpbSwgd2hpbGUgaGUgaGltc2VsZiB0ZXN0aWZpZWQgYmVmb3JlIHRoZSBwZW9wbGUgdGhhdCBoZSBkaWQgbm90IHRoaW5rIGl0IHJpZ2h0IG9yIGxhd2Z1bCB0aGF0IG1lbiBzaG91bGQgYmUgcHV0IHRvIGRlYXRoIHdpdGhvdXQgYSB0cmlhbCwgYXMgaW4gdGhlIGNhc2Ugb2YgTGVudHVsdXMsIENldGhlZ3VzLCBhbmQgdGhlaXIgYWNjb21wbGljZXMuIEZvciB0aGlzIHdhcyB0aGUgZGVudW5jaWF0aW9uIG1hZGUgYWdhaW5zdCBDaWNlcm8sIGFuZCB0byB0aGlzIGhlIHdhcyBzdW1tb25lZCB0byBtYWtlIGFuc3dlci4gQW5kIHNvLCBiZWluZyBpbiBwZXJpbCBvZiBwcm9zZWN1dGlvbiwgaGUgY2hhbmdlZCBoaXMgYXR0aXJlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VG8gYSBnYXJiIG9mIG1vdXJuaW5nLjwvbm90ZT4gYW5kIHdpdGggaGlzIGhhaXIgdW50cmltbWVkIHdlbnQgYWJvdXQgc3VwcGxpY2F0aW5nIHRoZSBwZW9wbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDbG9kaXVzIG1ldCBoaW0gZXZlcnl3aGVyZSBpbiB0aGUgc3RyZWV0cywgd2l0aCBhIGJhbmQgb2YgYm9sZCBhbmQgaW5zb2xlbnQgbWVuIGFib3V0IGhpbSwgd2hvIG1hZGUgbWFueSB1bmJyaWRsZWQgamVzdHMgdXBvbiBDaWNlcm8ncyBjaGFuZ2Ugb2YgYXR0aXJlLCBhbmQgb2Z0ZW4gcGVsdGVkIGhpbSB3aXRoIG11ZCBhbmQgc3RvbmVzLCBhbmQgc28gaW50ZXJmZXJlZCB3aXRoIGhpcyBzdXBwbGljYXRpb25zIHRvIHRoZSBwZW9wbGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGluIHRoZSBmaXJzdCBwbGFjZSwgbmVhcmx5IHRoZSB3aG9sZSBib2R5IG9mIGtuaWdodHMgY2hhbmdlZCB0aGVpciBhdHRpcmUgd2l0aCBDaWNlcm8sIGFuZCBhcyBtYW55IGFzIHR3ZW50eSB0aG91c2FuZCB5b3VuZyBtZW4gZXNjb3J0ZWQgaGltIHdpdGggdGhlaXIgaGFpciB1bnRyaW1tZWQgYW5kIGpvaW5lZCBpbiBoaXMgc3VwcGxpYW50IGVudHJlYXRpZXMgdG8gdGhlIHBlb3BsZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gQ2ljZXJvJ3Mgb3JhdGlvbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBSZWQuIFBvcC4gMS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPnBvc3QgcmVkLiBhZCBRdWlyLjwvdGl0bGU+IDMsIDg8L2JpYmw+Ljwvbm90ZT4gYW5kIGJlc2lkZXMsIHdoZW4gdGhlIHNlbmF0ZSBoYWQgbWV0IGluIG9yZGVyIHRvIHBhc3MgYSB2b3RlIHRoYXQgdGhlIHBlb3BsZSBzaG91bGQgY2hhbmdlIHRoZWlyIGRyZXNzIGluIHRva2VuIG9mIHB1YmxpYyBjYWxhbWl0eSwgYW5kIHRoZSBjb25zdWxzIGhhZCBvcHBvc2VkIGl0LCBhbmQgQ2xvZGl1cyB3YXMgaW4gYXJtcyBhYm91dCB0aGUgc2VuYXRlLWhvdXNlLCBub3QgYSBmZXcgb2YgdGhlIHNlbmF0b3JzIHJhbiBvdXQsIHJlbmRpbmcgdGhlaXIgZ2FybWVudHMgYW5kIGNyeWluZyBhbG91ZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNpbmNlIHRoaXMgc2lnaHQgYXdha2VuZWQgbmVpdGhlciBwaXR5IG5vciBhbnkgbWVyY3ksIGJ1dCBDaWNlcm8gd2FzIG9ibGlnZWQgZWl0aGVyIHRvIGdvIGludG8gZXhpbGUgb3IgdG8gYXBwZWFsIHRvIGZvcmNlIGFuZCB0aGUgc3dvcmQgYWdhaW5zdCBDbG9kaXVzLCBoZSBiZWdnZWQgZm9yIGFpZCBmcm9tIFBvbXBleSwgd2hvIGhhZCBwdXJwb3NlbHkgZ290IG91dCBvZiB0aGUgd2F5IGFuZCB3YXMgc3RheWluZyBhdCBoaXMgY291bnRyeSBzZWF0IGluIHRoZSBBbGJhbiBoaWxscy4gRmlyc3QgQ2ljZXJvIHNlbnQgUGlzbyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Ob3QgdGhlIGNvbnN1bCB3aG8gaXMgbWVudGlvbmVkIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDMwLjEiIHZhbGlkPSJ5ZXMiPnh4eC4gMTwvYmlibD4gYW5kIGJlbG93IGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDMwLjQiIHZhbGlkPSJ5ZXMiPsKnIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhpcyBzb24taW4tbGF3LCB0byBlbnRyZWF0IGZvciBoaW07IHRoZW4gaGUgd2VudCB1cCB0aGl0aGVyIGhpbXNlbGYgYWxzby4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5LCBob3dldmVyLCBvbiBsZWFybmluZyBvZiBoaXMgY29taW5nLCBjb3VsZCBub3QgZW5kdXJlIHRvIHNlZSBoaW0sIGZvciBoZSBmZWx0IGEgc3Ryb25nIHNlbnNlIG9mIHNoYW1lIHRvd2FyZHMgdGhlIG1hbiB3aG8gaGFkIG1hZGUgZ3JlYXQgc3RydWdnbGVzIGluIGhpcyBiZWhhbGYgYW5kIGhhZCBvZnRlbiBhZG9wdGVkIGEgcG9saXRpY2FsIGNvdXJzZSB0byBwbGVhc2UgaGltOyBidXQgc2luY2UgaGUgd2FzIENhZXNhcidzIHNvbi1pbi1sYXcsIGF0IGhpcyByZXF1ZXN0IGhlIHByb3ZlZCBmYWxzZSB0byBoaXMgb2xkIG9ibGlnYXRpb25zLCBzbGlwcGVkIG91dCBieSBhbm90aGVyIGRvb3IsIGFuZCBzbyByYW4gYXdheSBmcm9tIHRoZSBpbnRlcnZpZXcuIFRodXMgYmV0cmF5ZWQgYnkgaGltIGFuZCBsZWZ0IGRlc29sYXRlLCBDaWNlcm8gZmxlZCBmb3IgcmVmdWdlIHRvIHRoZSBjb25zdWxzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5HYWJpbml1cyB3YXMgYWx3YXlzIHNldmVyZSB3aXRoIGhpbSwgYnV0IFBpc28gZGVhbHQgd2l0aCBoaW0gbW9yZSBnZW50bHksIGFkdmlzaW5nIGhpbSB0byBzdGFuZCBhc2lkZSBhbmQgeWllbGQgdG8gdGhlIGltcGV0dW91cyBhc3NhdWx0cyBvZiBDbG9kaXVzLCB0byBzdWJtaXQgdG8gdGhlIGNoYW5nZSBpbiB0aGUgdGltZXMsIGFuZCB0byBiZWNvbWUgb25jZSBtb3JlIGEgc2F2aW91ciBvZiBoaXMgY291bnRyeSB3aGVuIHNoZSB3YXMgaW52b2x2ZWQgaW4gc2VkaXRpb25zIGFuZCBtaXNmb3J0dW5lcyB0aHJvdWdoIENsb2RpdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaW4gdGhlIGZpcnN0IHBsYWNlLCBuZWFybHkgdGhlIHdob2xlIGJvZHkgb2Yga25pZ2h0cyBjaGFuZ2VkIHRoZWlyIGF0dGlyZSB3aXRoIENpY2VybywgYW5kIGFzIG1hbnkgYXMgdHdlbnR5IHRob3VzYW5kIHlvdW5nIG1lbiBlc2NvcnRlZCBoaW0gd2l0aCB0aGVpciBoYWlyIHVudHJpbW1lZCBhbmQgam9pbmVkIGluIGhpcyBzdXBwbGlhbnQgZW50cmVhdGllcyB0byB0aGUgcGVvcGxlOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIENpY2VybydzIG9yYXRpb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBSZWQuIFBvcC4gMS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cG9zdCByZWQuIGFkIFF1aXIuPC90aXRsZT4gMywgODwvYmlibD4uPC9ub3RlPiBhbmQgYmVzaWRlcywgd2hlbiB0aGUgc2VuYXRlIGhhZCBtZXQgaW4gb3JkZXIgdG8gcGFzcyBhIHZvdGUgdGhhdCB0aGUgcGVvcGxlIHNob3VsZCBjaGFuZ2UgdGhlaXIgZHJlc3MgaW4gdG9rZW4gb2YgcHVibGljIGNhbGFtaXR5LCBhbmQgdGhlIGNvbnN1bHMgaGFkIG9wcG9zZWQgaXQsIGFuZCBDbG9kaXVzIHdhcyBpbiBhcm1zIGFib3V0IHRoZSBzZW5hdGUtaG91c2UsIG5vdCBhIGZldyBvZiB0aGUgc2VuYXRvcnMgcmFuIG91dCwgcmVuZGluZyB0aGVpciBnYXJtZW50cyBhbmQgY3J5aW5nIGFsb3VkLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gUmVkLiBQb3AuIDEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBvc3QgcmVkLiBhZCBRdWlyLjwvdGl0bGU+IDMsIDg8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBvc3QgcmVkLiBhZCBRdWlyLjwvdGl0bGU+IDMsIDg8L3RyYW5zbGF0aW9uPg=="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSB0aGlzIHNpZ2h0IGF3YWtlbmVkIG5laXRoZXIgcGl0eSBub3IgYW55IG1lcmN5LCBidXQgQ2ljZXJvIHdhcyBvYmxpZ2VkIGVpdGhlciB0byBnbyBpbnRvIGV4aWxlIG9yIHRvIGFwcGVhbCB0byBmb3JjZSBhbmQgdGhlIHN3b3JkIGFnYWluc3QgQ2xvZGl1cywgaGUgYmVnZ2VkIGZvciBhaWQgZnJvbSBQb21wZXksIHdobyBoYWQgcHVycG9zZWx5IGdvdCBvdXQgb2YgdGhlIHdheSBhbmQgd2FzIHN0YXlpbmcgYXQgaGlzIGNvdW50cnkgc2VhdCBpbiB0aGUgQWxiYW4gaGlsbHMuIEZpcnN0IENpY2VybyBzZW50IFBpc28sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Ob3QgdGhlIGNvbnN1bCB3aG8gaXMgbWVudGlvbmVkIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMzAuMSIgdmFsaWQ9InllcyI+eHh4LiAxPC9iaWJsPiBhbmQgYmVsb3cgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAzMC40IiB2YWxpZD0ieWVzIj7CpyA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBoaXMgc29uLWluLWxhdywgdG8gZW50cmVhdCBmb3IgaGltOyB0aGVuIGhlIHdlbnQgdXAgdGhpdGhlciBoaW1zZWxmIGFsc28uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAzMC4xIiB2YWxpZD0ieWVzIj54eHguIDE8L2JpYmw+IGFuZCBiZWxvdyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDMwLjQiIHZhbGlkPSJ5ZXMiPsKnIDQuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgaG93ZXZlciwgb24gbGVhcm5pbmcgb2YgaGlzIGNvbWluZywgY291bGQgbm90IGVuZHVyZSB0byBzZWUgaGltLCBmb3IgaGUgZmVsdCBhIHN0cm9uZyBzZW5zZSBvZiBzaGFtZSB0b3dhcmRzIHRoZSBtYW4gd2hvIGhhZCBtYWRlIGdyZWF0IHN0cnVnZ2xlcyBpbiBoaXMgYmVoYWxmIGFuZCBoYWQgb2Z0ZW4gYWRvcHRlZCBhIHBvbGl0aWNhbCBjb3Vyc2UgdG8gcGxlYXNlIGhpbTsgYnV0IHNpbmNlIGhlIHdhcyBDYWVzYXIncyBzb24taW4tbGF3LCBhdCBoaXMgcmVxdWVzdCBoZSBwcm92ZWQgZmFsc2UgdG8gaGlzIG9sZCBvYmxpZ2F0aW9ucywgc2xpcHBlZCBvdXQgYnkgYW5vdGhlciBkb29yLCBhbmQgc28gcmFuIGF3YXkgZnJvbSB0aGUgaW50ZXJ2aWV3LiBUaHVzIGJldHJheWVkIGJ5IGhpbSBhbmQgbGVmdCBkZXNvbGF0ZSwgQ2ljZXJvIGZsZWQgZm9yIHJlZnVnZSB0byB0aGUgY29uc3Vscy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkdhYmluaXVzIHdhcyBhbHdheXMgc2V2ZXJlIHdpdGggaGltLCBidXQgUGlzbyBkZWFsdCB3aXRoIGhpbSBtb3JlIGdlbnRseSwgYWR2aXNpbmcgaGltIHRvIHN0YW5kIGFzaWRlIGFuZCB5aWVsZCB0byB0aGUgaW1wZXR1b3VzIGFzc2F1bHRzIG9mIENsb2RpdXMsIHRvIHN1Ym1pdCB0byB0aGUgY2hhbmdlIGluIHRoZSB0aW1lcywgYW5kIHRvIGJlY29tZSBvbmNlIG1vcmUgYSBzYXZpb3VyIG9mIGhpcyBjb3VudHJ5IHdoZW4gc2hlIHdhcyBpbnZvbHZlZCBpbiBzZWRpdGlvbnMgYW5kIG1pc2ZvcnR1bmVzIHRocm91Z2ggQ2xvZGl1cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BZnRlciBnZXR0aW5nIHN1Y2ggYW5zd2VyIHRvIGhpcyBhcHBlYWwsIENpY2VybyB0b29rIGNvdW5zZWwgd2l0aCBoaXMgZnJpZW5kczogTHVjdWxsdXMgdXJnZWQgaGltIHRvIHJlbWFpbiBpbiB0aGUgY2l0eSwgYmVsaWV2aW5nIHRoYXQgaGUgd291bGQgcHJldmFpbDsgYnV0IG90aGVycyBhZHZpc2VkIGhpbSB0byBnbyBpbnRvIGV4aWxlLCBiZWxpZXZpbmcgdGhhdCB0aGUgcGVvcGxlIHdvdWxkIHF1aWNrbHkgbG9uZyBmb3IgaGltIHdoZW4gdGhleSB3ZXJlIHNhdGVkIHdpdGggdGhlIGZvbGx5IGFuZCBtYWRuZXNzIG9mIENsb2RpdXMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBDaWNlcm8gZGVjaWRlZCB0byBkbzsgc28gaGUgdG9vayB0aGUgc3RhdHVlIG9mIE1pbmVydmEgd2hpY2ggaGFkIGxvbmcgc3Rvb2QgaW4gaGlzIGhvdXNlLCBhbmQgd2hpY2ggaGUgaG9ub3VyZWQgZXhjZWVkaW5nbHksIGNhcnJpZWQgaXQgdG8gdGhlIGNhcGl0b2wsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIExlZy4gMi40MiIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+ZGUgbGVnLjwvdGl0bGU+IGlpLiAxNywgNDI8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBGYW0uIDEyLjI1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+YWQgZmFtLjwvdGl0bGU+IHhpaS4gMjUsIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBkZWRpY2F0ZWQgaXQgdGhlcmUgd2l0aCB0aGUgaW5zY3JpcHRpb24gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UbyBNaW5lcnZhLCBHdWFyZGlhbiBvZiBSb21lPC9xPjsgdGhlbiwgYWNjZXB0aW5nIGFuIGVzY29ydCBmcm9tIGhpcyBmcmllbmRzLCBhYm91dCBtaWRuaWdodCBoZSBzbGlwcGVkIG91dCBvZiB0aGUgY2l0eSwgYW5kIHNldCBvdXQgb24gZm9vdCB0aHJvdWdoIEx1Y2FuaWEsIGRlc2lyaW5nIHRvIHJlYWNoIFNpY2lseS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgQ2ljZXJvIGRlY2lkZWQgdG8gZG87IHNvIGhlIHRvb2sgdGhlIHN0YXR1ZSBvZiBNaW5lcnZhIHdoaWNoIGhhZCBsb25nIHN0b29kIGluIGhpcyBob3VzZSwgYW5kIHdoaWNoIGhlIGhvbm91cmVkIGV4Y2VlZGluZ2x5LCBjYXJyaWVkIGl0IHRvIHRoZSBjYXBpdG9sLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gTGVnLiAyLjQyIiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmRlIGxlZy48L3RpdGxlPiBpaS4gMTcsIDQyPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBGYW0uIDEyLjI1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBmYW0uPC90aXRsZT4geGlpLiAyNSwgMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGRlZGljYXRlZCBpdCB0aGVyZSB3aXRoIHRoZSBpbnNjcmlwdGlvbiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gTGVnLiAyLjQyIiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmRlIGxlZy48L3RpdGxlPiBpaS4gMTcsIDQyPC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+ZGUgbGVnLjwvdGl0bGU+IGlpLiAxNywgNDI8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEZhbS4gMTIuMjUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIGZhbS48L3RpdGxlPiB4aWkuIDI1LCAxLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgZmFtLjwvdGl0bGU+IHhpaS4gMjUsIDEuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UbyBNaW5lcnZhLCBHdWFyZGlhbiBvZiBSb21lPC9xPjsgdGhlbiwgYWNjZXB0aW5nIGFuIGVzY29ydCBmcm9tIGhpcyBmcmllbmRzLCBhYm91dCBtaWRuaWdodCBoZSBzbGlwcGVkIG91dCBvZiB0aGUgY2l0eSwgYW5kIHNldCBvdXQgb24gZm9vdCB0aHJvdWdoIEx1Y2FuaWEsIGRlc2lyaW5nIHRvIHJlYWNoIFNpY2lseS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIHNvb24gYXMgaXQgd2FzIGtub3duIHRoYXQgaGUgaGFkIGZsZWQsIENsb2RpdXMgY2F1c2VkIGEgdm90ZSBvZiBiYW5pc2htZW50IHRvIGJlIHBhc3NlZCB1cG9uIGhpbSwgYW5kIGlzc3VlZCBhbiBlZGljdCB0aGF0IGFsbCBtZW4gc2hvdWxkIHJlZnVzZSBoaW0gZmlyZSBhbmQgd2F0ZXIgYW5kIHRoYXQgbm8gbWFuIHNob3VsZCBnaXZlIGhpbSBzaGVsdGVyIHdpdGhpbiBmaXZlIGh1bmRyZWQgbWlsZXMgb2YgSXRhbHkuIE5vdywgbW9zdCBtZW4gcGFpZCBub3QgdGhlIHNsaWdodGVzdCBoZWVkIHRvIHRoaXMgZWRpY3Qgb3V0IG9mIHJlc3BlY3QgZm9yIENpY2VybywgYW5kIGVzY29ydGVkIGhpbSBvbiBoaXMgd2F5IHdpdGggZXZlcnkgbWFyayBvZiBraW5kbmVzczsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGF0IEhpcHBvbml1bSwgYSBjaXR5IG9mIEx1Y2FuaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UmF0aGVyIEJydXR0aXVtLjwvbm90ZT4gd2hpY2ggaXMgbm93IGNhbGxlZCBWaWJvLCBWaWJpdXMsIGEgU2ljaWxpYW4sIHdobyBoYWQgcHJvZml0ZWQgbXVjaCBmcm9tIENpY2VybydzIGZyaWVuZHNoaXAgYW5kIHBhcnRpY3VsYXJseSBieSBiZWluZyBtYWRlIHByZWZlY3Qgb2YgZW5naW5lZXJzIGR1cmluZyBoaXMgY29uc3Vsc2hpcCwgd291bGQgbm90IHJlY2VpdmUgaGltIGluIGhpcyBob3VzZSwgYnV0IHNlbnQgaGltIHdvcmQgdGhhdCBoZSB3b3VsZCBhc3NpZ24gaGltIGhpcyBjb3VudHJ5LXBsYWNlIGZvciByZXNpZGVuY2U7IGFuZCBDYWl1cyBWZXJnaWxpdXMsIHRoZSBwcmFldG9yIG9mIFNpY2lseSwgd2hvIGhhZCBiZWVuIG9uIG1vc3QgaW50aW1hdGUgdGVybXMgd2l0aCBDaWNlcm8sIHdyb3RlIGhpbSB0byBrZWVwIGF3YXkgZnJvbSBTaWNpbHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFBsYW5jLiA5NSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+cHJvIFBsYW5jaW88L3RpdGxlPiwgNDAsIDk1IGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkRpc2hlYXJ0ZW5lZCBhdCB0aGlzIHRyZWF0bWVudCwgaGUgc2V0IG91dCBmb3IgQnJ1bmRpc2l1bSwgYW5kIGZyb20gdGhlcmUgdHJpZWQgdG8gY3Jvc3MgdG8gRHlycmhhY2hpdW0gd2l0aCBhIGZhaXIgYnJlZXplLCBidXQgc2luY2UgaGUgbWV0IGEgY291bnRlci13aW5kIGF0IHNlYSBoZSBjYW1lIGJhY2sgdGhlIG5leHQgZGF5LCBhbmQgdGhlbiBzZXQgc2FpbCBhZ2Fpbi4gSXQgaXMgc2FpZCwgdG9vLCB0aGF0IGFmdGVyIGhlIGhhZCBwdXQgaW4gYXQgRHlycmhhY2hpdW0gYW5kIHdhcyBhYm91dCB0byBsYW5kLCB0aGVyZSB3YXMgYW4gZWFydGhxdWFrZSBhY2NvbXBhbmllZCBieSBhIHZpb2xlbnQgY29udnVsc2lvbiBvZiB0aGUgc2VhLiBXaGVyZWZvcmUgdGhlIHNvb3Roc2F5ZXJzIGNvbmplY3R1cmVkIHRoYXQgaGlzIGV4aWxlIHdvdWxkIG5vdCBiZSBsYXN0aW5nLCBzaW5jZSB0aGVzZSB3ZXJlIHNpZ25zIG9mIGNoYW5nZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFsdGhvdWdoIG1hbnkgcGVvcGxlIHZpc2l0ZWQgaGltIG91dCBvZiBnb29kd2lsbCwgYW5kIHRoZSBHcmVlayBjaXRpZXMgdmllZCB3aXRoIG9uZSBhbm90aGVyIGluIHNlbmRpbmcgaGltIGRlcHV0YXRpb25zLCBzdGlsbCwgaGUgcGFzc2VkIGhpcyB0aW1lIGZvciB0aGUgbW9zdCBwYXJ0IGluIGRlamVjdGlvbiBhbmQgZ3JlYXQgZ3JpZWYsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXMgaGlzIGxldHRlcnMgdG8gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQXR0LiAzLjgiIHZhbGlkPSJ5ZXMiPkF0dGljdXMgKGlpaS4gOC0yMSk8L2JpYmw+IHNob3cuPC9ub3RlPiBsb29raW5nIG9mZiB0b3dhcmRzIEl0YWx5IGxpa2UgYSBkaXNjb25zb2xhdGUgbG92ZXIsIHdoaWxlIGhpcyBzcGlyaXQgaGUgYmVjYW1lIHZlcnkgcGV0dHkgYW5kIG1lYW4gYnkgcmVhc29uIG9mIGhpcyBtaXNmb3J0dW5lLCBhbmQgd2FzIG1vcmUgaHVtYmxlZCB0aGFuIG9uZSB3b3VsZCBoYXZlIGV4cGVjdGVkIGluIGEgbWFuIHdobyBoYWQgZW5qb3llZCBzbyBsb2Z0eSBhIGRpc2NpcGxpbmUgYXMgaGlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGhlIG9mdGVuIGFza2VkIGhpcyBmcmllbmRzIG5vdCB0byBjYWxsIGhpbSBhbiBvcmF0b3IsIGJ1dCBhIHBoaWxvc29waGVyLCBiZWNhdXNlIGhlIGhhZCBjaG9zZW4gcGhpbG9zb3BoeSBhcyBhbiBvY2N1cGF0aW9uLCBidXQgdXNlZCBvcmF0b3J5IG1lcmVseSBhcyBhbiBpbnN0cnVtZW50IGZvciBhdHRhaW5pbmcgdGhlIG5lZWRmdWwgZW5kcyBvZiBhIHBvbGl0aWNhbCBjYXJlZXIuIEJ1dCBwdWJsaWMgb3BpbmlvbiBoYXMgZ3JlYXQgcG93ZXIgdG8gd2FzaCBhd2F5IHJlYXNvbiwgbGlrZSBhIGR5ZSwgZnJvbSB0aGUgc291bCBvZiBtYW4sIGFuZCBieSBmb3JjZSBvZiBmYW1pbGlhciBhc3NvY2lhdGlvbiB0byBpbXByZXNzIHRoZSBmZWVsaW5ncyBvZiB0aGUgdnVsZ2FyIG9uIHRob3NlIHdobyBlbmdhZ2UgaW4gcG9saXRpY2FsIGxpZmUsIHVubGVzcyBvbmUgaXMgcmlnaHQgd2VsbCBvbiBoaXMgZ3VhcmQgd2hlbiBoZSBlbmdhZ2VzIGhpbXNlbGYgaW4gdGhpbmdzIGV4dGVybmFsLCBhbmQgaXMgcmVzb2x2ZWQgdG8gcGFydGljaXBhdGUgb25seSBpbiB0aGUgdGhpbmdzIHRoZW1zZWx2ZXMsIGFuZCBub3QgaW4gdGhlIGZlZWxpbmdzIGF0dGVuZGFudCB1cG9uIHRoZW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIHNvb24gYXMgaXQgd2FzIGtub3duIHRoYXQgaGUgaGFkIGZsZWQsIENsb2RpdXMgY2F1c2VkIGEgdm90ZSBvZiBiYW5pc2htZW50IHRvIGJlIHBhc3NlZCB1cG9uIGhpbSwgYW5kIGlzc3VlZCBhbiBlZGljdCB0aGF0IGFsbCBtZW4gc2hvdWxkIHJlZnVzZSBoaW0gZmlyZSBhbmQgd2F0ZXIgYW5kIHRoYXQgbm8gbWFuIHNob3VsZCBnaXZlIGhpbSBzaGVsdGVyIHdpdGhpbiBmaXZlIGh1bmRyZWQgbWlsZXMgb2YgSXRhbHkuIE5vdywgbW9zdCBtZW4gcGFpZCBub3QgdGhlIHNsaWdodGVzdCBoZWVkIHRvIHRoaXMgZWRpY3Qgb3V0IG9mIHJlc3BlY3QgZm9yIENpY2VybywgYW5kIGVzY29ydGVkIGhpbSBvbiBoaXMgd2F5IHdpdGggZXZlcnkgbWFyayBvZiBraW5kbmVzczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhdCBIaXBwb25pdW0sIGEgY2l0eSBvZiBMdWNhbmlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UmF0aGVyIEJydXR0aXVtLjwvbm90ZT4gd2hpY2ggaXMgbm93IGNhbGxlZCBWaWJvLCBWaWJpdXMsIGEgU2ljaWxpYW4sIHdobyBoYWQgcHJvZml0ZWQgbXVjaCBmcm9tIENpY2VybydzIGZyaWVuZHNoaXAgYW5kIHBhcnRpY3VsYXJseSBieSBiZWluZyBtYWRlIHByZWZlY3Qgb2YgZW5naW5lZXJzIGR1cmluZyBoaXMgY29uc3Vsc2hpcCwgd291bGQgbm90IHJlY2VpdmUgaGltIGluIGhpcyBob3VzZSwgYnV0IHNlbnQgaGltIHdvcmQgdGhhdCBoZSB3b3VsZCBhc3NpZ24gaGltIGhpcyBjb3VudHJ5LXBsYWNlIGZvciByZXNpZGVuY2U7IGFuZCBDYWl1cyBWZXJnaWxpdXMsIHRoZSBwcmFldG9yIG9mIFNpY2lseSwgd2hvIGhhZCBiZWVuIG9uIG1vc3QgaW50aW1hdGUgdGVybXMgd2l0aCBDaWNlcm8sIHdyb3RlIGhpbSB0byBrZWVwIGF3YXkgZnJvbSBTaWNpbHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBQbGFuYy4gOTUiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIFBsYW5jaW88L3RpdGxlPiwgNDAsIDk1IGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBQbGFuYy4gOTUiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIFBsYW5jaW88L3RpdGxlPiwgNDAsIDk1IGZmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIFBsYW5jaW88L3RpdGxlPiwgNDAsIDk1IGZmLjwvdHJhbnNsYXRpb24+"
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkRpc2hlYXJ0ZW5lZCBhdCB0aGlzIHRyZWF0bWVudCwgaGUgc2V0IG91dCBmb3IgQnJ1bmRpc2l1bSwgYW5kIGZyb20gdGhlcmUgdHJpZWQgdG8gY3Jvc3MgdG8gRHlycmhhY2hpdW0gd2l0aCBhIGZhaXIgYnJlZXplLCBidXQgc2luY2UgaGUgbWV0IGEgY291bnRlci13aW5kIGF0IHNlYSBoZSBjYW1lIGJhY2sgdGhlIG5leHQgZGF5LCBhbmQgdGhlbiBzZXQgc2FpbCBhZ2Fpbi4gSXQgaXMgc2FpZCwgdG9vLCB0aGF0IGFmdGVyIGhlIGhhZCBwdXQgaW4gYXQgRHlycmhhY2hpdW0gYW5kIHdhcyBhYm91dCB0byBsYW5kLCB0aGVyZSB3YXMgYW4gZWFydGhxdWFrZSBhY2NvbXBhbmllZCBieSBhIHZpb2xlbnQgY29udnVsc2lvbiBvZiB0aGUgc2VhLiBXaGVyZWZvcmUgdGhlIHNvb3Roc2F5ZXJzIGNvbmplY3R1cmVkIHRoYXQgaGlzIGV4aWxlIHdvdWxkIG5vdCBiZSBsYXN0aW5nLCBzaW5jZSB0aGVzZSB3ZXJlIHNpZ25zIG9mIGNoYW5nZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCBtYW55IHBlb3BsZSB2aXNpdGVkIGhpbSBvdXQgb2YgZ29vZHdpbGwsIGFuZCB0aGUgR3JlZWsgY2l0aWVzIHZpZWQgd2l0aCBvbmUgYW5vdGhlciBpbiBzZW5kaW5nIGhpbSBkZXB1dGF0aW9ucywgc3RpbGwsIGhlIHBhc3NlZCBoaXMgdGltZSBmb3IgdGhlIG1vc3QgcGFydCBpbiBkZWplY3Rpb24gYW5kIGdyZWF0IGdyaWVmLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXMgaGlzIGxldHRlcnMgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDMuOCIgdmFsaWQ9InllcyI+QXR0aWN1cyAoaWlpLiA4LTIxKTwvYmlibD4gc2hvdy48L25vdGU+IGxvb2tpbmcgb2ZmIHRvd2FyZHMgSXRhbHkgbGlrZSBhIGRpc2NvbnNvbGF0ZSBsb3Zlciwgd2hpbGUgaGlzIHNwaXJpdCBoZSBiZWNhbWUgdmVyeSBwZXR0eSBhbmQgbWVhbiBieSByZWFzb24gb2YgaGlzIG1pc2ZvcnR1bmUsIGFuZCB3YXMgbW9yZSBodW1ibGVkIHRoYW4gb25lIHdvdWxkIGhhdmUgZXhwZWN0ZWQgaW4gYSBtYW4gd2hvIGhhZCBlbmpveWVkIHNvIGxvZnR5IGEgZGlzY2lwbGluZSBhcyBoaXMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDMuOCIgdmFsaWQ9InllcyI+QXR0aWN1cyAoaWlpLiA4LTIxKTwvYmlibD4gc2hvdy48L3RyYW5zbGF0aW9uPg=="
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaGUgb2Z0ZW4gYXNrZWQgaGlzIGZyaWVuZHMgbm90IHRvIGNhbGwgaGltIGFuIG9yYXRvciwgYnV0IGEgcGhpbG9zb3BoZXIsIGJlY2F1c2UgaGUgaGFkIGNob3NlbiBwaGlsb3NvcGh5IGFzIGFuIG9jY3VwYXRpb24sIGJ1dCB1c2VkIG9yYXRvcnkgbWVyZWx5IGFzIGFuIGluc3RydW1lbnQgZm9yIGF0dGFpbmluZyB0aGUgbmVlZGZ1bCBlbmRzIG9mIGEgcG9saXRpY2FsIGNhcmVlci4gQnV0IHB1YmxpYyBvcGluaW9uIGhhcyBncmVhdCBwb3dlciB0byB3YXNoIGF3YXkgcmVhc29uLCBsaWtlIGEgZHllLCBmcm9tIHRoZSBzb3VsIG9mIG1hbiwgYW5kIGJ5IGZvcmNlIG9mIGZhbWlsaWFyIGFzc29jaWF0aW9uIHRvIGltcHJlc3MgdGhlIGZlZWxpbmdzIG9mIHRoZSB2dWxnYXIgb24gdGhvc2Ugd2hvIGVuZ2FnZSBpbiBwb2xpdGljYWwgbGlmZSwgdW5sZXNzIG9uZSBpcyByaWdodCB3ZWxsIG9uIGhpcyBndWFyZCB3aGVuIGhlIGVuZ2FnZXMgaGltc2VsZiBpbiB0aGluZ3MgZXh0ZXJuYWwsIGFuZCBpcyByZXNvbHZlZCB0byBwYXJ0aWNpcGF0ZSBvbmx5IGluIHRoZSB0aGluZ3MgdGhlbXNlbHZlcywgYW5kIG5vdCBpbiB0aGUgZmVlbGluZ3MgYXR0ZW5kYW50IHVwb24gdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIENsb2RpdXMsIGFmdGVyIGRyaXZpbmcgQ2ljZXJvIGF3YXkgaGUgYnVybmVkIGRvd24gaGlzIHZpbGxhcywgYW5kIGJ1cm5lZCBkb3duIGhpcyBob3VzZSwgYW5kIGVyZWN0ZWQgb24gaXRzIHNpdGUgYSB0ZW1wbGUgdG8gTGliZXJ0eTsgdGhlIHJlc3Qgb2YgaGlzIHByb3BlcnR5IGhlIG9mZmVyZWQgZm9yIHNhbGUgYW5kIGhhZCBpdCBwcm9jbGFpbWVkIGRhaWx5LCBidXQgbm9ib2R5IHdvdWxkIGJ1eSBhbnl0aGluZy4gQmVpbmcgdGhlcmVmb3JlIGZvcm1pZGFibGUgdG8gdGhlIHBhdHJpY2lhbnMsIGFuZCBkcmFnZ2luZyBhbG9uZyB3aXRoIGhpbSB0aGUgcGVvcGxlLCB3aG8gaW5kdWxnZWQgaW4gZ3JlYXQgYm9sZG5lc3MgYW5kIGVmZnJvbnRlcnksIGhlIGFzc2FpbGVkIFBvbXBleSwgYXR0YWNraW5nIGZpZXJjZWx5IHNvbWUgb2YgdGhlIGFycmFuZ2VtZW50cyBtYWRlIGJ5IGhpbSBvbiBoaXMgZXhwZWRpdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGRpc2dyYWNlIHdoaWNoIHRoaXMgYnJvdWdodCB1cG9uIFBvbXBleSBsZWQgaGltIHRvIHJlcHJvYWNoIGhpbXNlbGYgZm9yIGhpcyBhYmFuZG9ubWVudCBvZiBDaWNlcm87IGFuZCBjaGFuZ2luZyBmcm9udCBoZSB1c2VkIGV2ZXJ5IGVmZm9ydCB0byBlZmZlY3QgQ2ljZXJvJ3MgcmV0dXJuLCBhbmQgc28gZGlkIGhpcyBmcmllbmRzLiBCdXQgc2luY2UgQ2xvZGl1cyBvcHBvc2VkIGhpbXNlbGYgdG8gdGhpcywgdGhlIHNlbmF0ZSBkZWNpZGVkIHRvIHJhdGlmeSBubyBtZWFzdXJlIHRoYXQgY2FtZSB1cCBpbiB0aGUgbWVhbiB0aW1lIGFuZCB0byBkbyBubyBwdWJsaWMgYnVzaW5lc3MsIHVubGVzcyBDaWNlcm8gc2hvdWxkIGJlIHBlcm1pdHRlZCB0byByZXR1cm4uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFNlc3QuIDY3IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZT5wcm8gU2VzdC48L3RpdGxlPiAzMSwgNjcgZi48L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDkuMSIgdmFsaWQ9InllcyI+UGx1dGFyY2gsIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgeGxpeC4gMS0zLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkR1cmluZyB0aGUgY29uc3Vsc2hpcCBvZiBMZW50dWx1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj41NyBCLkMuPC9ub3RlPiBob3dldmVyLCB3aGVuIHRoZSBkaXNvcmRlciB3ZW50IG9uIGluY3JlYXNpbmcsIHNvIHRoYXQgdHJpYnVuZXMgd2VyZSB3b3VuZGVkIGluIHRoZSBmb3J1bSBhbmQgUXVpbnR1cyB0aGUgYnJvdGhlciBvZiBDaWNlcm8gbGF5IHVubm90aWNlZCBmb3IgZGVhZCBhbW9uZyB0aGUgc2xhaW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFNlc3QuIDc1IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZT5wcm8gU2VzdC48L3RpdGxlPiAzNSwgNzUgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhlIHBlb3BsZSBiZWdhbiB0byBjaGFuZ2UgdGhlaXIgbWluZHMsIGFuZCBBbm5pdXMgTWlsbywgb25lIG9mIHRoZSB0cmlidW5lcywgZmlyc3QgdmVudHVyZWQgdG8gcHJvc2VjdXRlIENsb2RpdXMgZm9yIHZpb2xlbmNlLCBhbmQgbWFueSBqb2luZWQgdGhlbXNlbHZlcyB0byBQb21wZXkgYm90aCBmcm9tIHRoZSBwZW9wbGUgYW5kIGZyb20gdGhlIHN1cnJvdW5kaW5nIGNpdGllcy4gV2l0aCB0aGVzZSBQb21wZXkgY2FtZSBmb3J0aCwgZHJvdmUgQ2xvZGl1cyBmcm9tIHRoZSBmb3J1bSwgYW5kIHN1bW1vbmVkIHRoZSBjaXRpemVucyB0byB0aGUgdm90ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbiB0aGUgcXVlc3Rpb24gb2YgQ2ljZXJvJ3MgcmVjYWxsLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaXMgc2FpZCB0aGF0IHRoZSBwZW9wbGUgbmV2ZXIgcGFzc2VkIGFueSB2b3RlIHdpdGggc3VjaCB1bmFuaW1pdHkuIFRoZSBzZW5hdGUsIHRvbywgdnlpbmcgd2l0aCB0aGUgcGVvcGxlLCB3cm90ZSBsZXR0ZXJzIG9mIHRoYW5rcyB0byBhbGwgdGhlIGNpdGllcyB3aGljaCBoYWQgbWluaXN0ZXJlZCB0byBDaWNlcm8gZHVyaW5nIGhpcyBleGlsZSwgYW5kIGRlY3JlZWQgdGhhdCBoaXMgaG91c2UgYW5kIGhpcyB2aWxsYXMsIHdoaWNoIENsb2RpdXMgaGFkIGRlc3Ryb3llZCwgc2hvdWxkIGJlIHJlc3RvcmVkIGF0IHRoZSBwdWJsaWMgY29zdC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gUGlzLiA1MiIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+aW4gUGlzb25lbTwvdGl0bGU+LCAyMiwgNTIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIENsb2RpdXMsIGFmdGVyIGRyaXZpbmcgQ2ljZXJvIGF3YXkgaGUgYnVybmVkIGRvd24gaGlzIHZpbGxhcywgYW5kIGJ1cm5lZCBkb3duIGhpcyBob3VzZSwgYW5kIGVyZWN0ZWQgb24gaXRzIHNpdGUgYSB0ZW1wbGUgdG8gTGliZXJ0eTsgdGhlIHJlc3Qgb2YgaGlzIHByb3BlcnR5IGhlIG9mZmVyZWQgZm9yIHNhbGUgYW5kIGhhZCBpdCBwcm9jbGFpbWVkIGRhaWx5LCBidXQgbm9ib2R5IHdvdWxkIGJ1eSBhbnl0aGluZy4gQmVpbmcgdGhlcmVmb3JlIGZvcm1pZGFibGUgdG8gdGhlIHBhdHJpY2lhbnMsIGFuZCBkcmFnZ2luZyBhbG9uZyB3aXRoIGhpbSB0aGUgcGVvcGxlLCB3aG8gaW5kdWxnZWQgaW4gZ3JlYXQgYm9sZG5lc3MgYW5kIGVmZnJvbnRlcnksIGhlIGFzc2FpbGVkIFBvbXBleSwgYXR0YWNraW5nIGZpZXJjZWx5IHNvbWUgb2YgdGhlIGFycmFuZ2VtZW50cyBtYWRlIGJ5IGhpbSBvbiBoaXMgZXhwZWRpdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBkaXNncmFjZSB3aGljaCB0aGlzIGJyb3VnaHQgdXBvbiBQb21wZXkgbGVkIGhpbSB0byByZXByb2FjaCBoaW1zZWxmIGZvciBoaXMgYWJhbmRvbm1lbnQgb2YgQ2ljZXJvOyBhbmQgY2hhbmdpbmcgZnJvbnQgaGUgdXNlZCBldmVyeSBlZmZvcnQgdG8gZWZmZWN0IENpY2VybydzIHJldHVybiwgYW5kIHNvIGRpZCBoaXMgZnJpZW5kcy4gQnV0IHNpbmNlIENsb2RpdXMgb3Bwb3NlZCBoaW1zZWxmIHRvIHRoaXMsIHRoZSBzZW5hdGUgZGVjaWRlZCB0byByYXRpZnkgbm8gbWVhc3VyZSB0aGF0IGNhbWUgdXAgaW4gdGhlIG1lYW4gdGltZSBhbmQgdG8gZG8gbm8gcHVibGljIGJ1c2luZXNzLCB1bmxlc3MgQ2ljZXJvIHNob3VsZCBiZSBwZXJtaXR0ZWQgdG8gcmV0dXJuLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gU2VzdC4gNjciIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIFNlc3QuPC90aXRsZT4gMzEsIDY3IGYuPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDkuMSIgdmFsaWQ9InllcyI+UGx1dGFyY2gsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4bGl4LiAxLTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFNlc3QuIDY3IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBybyBTZXN0LjwvdGl0bGU+IDMxLCA2NyBmLjwvYmlibD47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBybyBTZXN0LjwvdGl0bGU+IDMxLCA2NyBmLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDQ5LjEiIHZhbGlkPSJ5ZXMiPlBsdXRhcmNoLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeGxpeC4gMS0zLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsaXguIDEtMy48L3RyYW5zbGF0aW9uPg=="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkR1cmluZyB0aGUgY29uc3Vsc2hpcCBvZiBMZW50dWx1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjU3IEIuQy48L25vdGU+IGhvd2V2ZXIsIHdoZW4gdGhlIGRpc29yZGVyIHdlbnQgb24gaW5jcmVhc2luZywgc28gdGhhdCB0cmlidW5lcyB3ZXJlIHdvdW5kZWQgaW4gdGhlIGZvcnVtIGFuZCBRdWludHVzIHRoZSBicm90aGVyIG9mIENpY2VybyBsYXkgdW5ub3RpY2VkIGZvciBkZWFkIGFtb25nIHRoZSBzbGFpbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFNlc3QuIDc1IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBybyBTZXN0LjwvdGl0bGU+IDM1LCA3NSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGUgcGVvcGxlIGJlZ2FuIHRvIGNoYW5nZSB0aGVpciBtaW5kcywgYW5kIEFubml1cyBNaWxvLCBvbmUgb2YgdGhlIHRyaWJ1bmVzLCBmaXJzdCB2ZW50dXJlZCB0byBwcm9zZWN1dGUgQ2xvZGl1cyBmb3IgdmlvbGVuY2UsIGFuZCBtYW55IGpvaW5lZCB0aGVtc2VsdmVzIHRvIFBvbXBleSBib3RoIGZyb20gdGhlIHBlb3BsZSBhbmQgZnJvbSB0aGUgc3Vycm91bmRpbmcgY2l0aWVzLiBXaXRoIHRoZXNlIFBvbXBleSBjYW1lIGZvcnRoLCBkcm92ZSBDbG9kaXVzIGZyb20gdGhlIGZvcnVtLCBhbmQgc3VtbW9uZWQgdGhlIGNpdGl6ZW5zIHRvIHRoZSB2b3RlLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gU2VzdC4gNzUiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIFNlc3QuPC90aXRsZT4gMzUsIDc1IGYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5wcm8gU2VzdC48L3RpdGxlPiAzNSwgNzUgZi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9uIHRoZSBxdWVzdGlvbiBvZiBDaWNlcm8ncyByZWNhbGwuPC9ub3RlPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgdGhlIHBlb3BsZSBuZXZlciBwYXNzZWQgYW55IHZvdGUgd2l0aCBzdWNoIHVuYW5pbWl0eS4gVGhlIHNlbmF0ZSwgdG9vLCB2eWluZyB3aXRoIHRoZSBwZW9wbGUsIHdyb3RlIGxldHRlcnMgb2YgdGhhbmtzIHRvIGFsbCB0aGUgY2l0aWVzIHdoaWNoIGhhZCBtaW5pc3RlcmVkIHRvIENpY2VybyBkdXJpbmcgaGlzIGV4aWxlLCBhbmQgZGVjcmVlZCB0aGF0IGhpcyBob3VzZSBhbmQgaGlzIHZpbGxhcywgd2hpY2ggQ2xvZGl1cyBoYWQgZGVzdHJveWVkLCBzaG91bGQgYmUgcmVzdG9yZWQgYXQgdGhlIHB1YmxpYyBjb3N0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gUGlzLiA1MiIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBQaXNvbmVtPC90aXRsZT4sIDIyLCA1Mi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBQaXMuIDUyIiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIFBpc29uZW08L3RpdGxlPiwgMjIsIDUyLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aW4gUGlzb25lbTwvdGl0bGU+LCAyMiwgNTIuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBDaWNlcm8gY2FtZSBob21lIGluIHRoZSBzaXh0ZWVudGggbW9udGggYWZ0ZXIgaGlzIGV4aWxlOyBhbmQgc28gZ3JlYXQgd2FzIHRoZSBqb3kgb2YgdGhlIGNpdGllcyBhbmQgdGhlIGVhZ2VybmVzcyBvZiBtZW4gdG8gbWVldCBoaW0gdGhhdCB3aGF0IHdhcyBzYWlkIGJ5IENpY2VybyBhZnRlcndhcmRzIGZlbGwgc2hvcnQgb2YgdGhlIHRydXRoLiBIZSBzYWlkLCBuYW1lbHksIHRoYXQgSXRhbHkgaGFkIHRha2VuIGhpbSBvbiBoZXIgc2hvdWxkZXJzIGFuZCBjYXJyaWVkIGhpbSBpbnRvIFJvbWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFJlZC4gU2VuLiAzOSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+cG9zdCByZWQuIGluIHNlbi48L3RpdGxlPiAxNSwgMzkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFuZCB0aGVyZSBDcmFzc3VzIGFsc28sIHdobyB3YXMgaGlzIGVuZW15IGJlZm9yZSBoaXMgZXhpbGUsIG5vdyByZWFkaWx5IG1ldCBoaW0gYW5kIHdhcyByZWNvbmNpbGVkIHdpdGggaGltLCB0byBncmF0aWZ5IGhpcyBzb24gUHVibGl1cywgYXMgaGUgc2FpZCwgd2hvIHdhcyBhbiBhcmRlbnQgYWRtaXJlciBvZiBDaWNlcm8uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgQ2ljZXJvIGNhbWUgaG9tZSBpbiB0aGUgc2l4dGVlbnRoIG1vbnRoIGFmdGVyIGhpcyBleGlsZTsgYW5kIHNvIGdyZWF0IHdhcyB0aGUgam95IG9mIHRoZSBjaXRpZXMgYW5kIHRoZSBlYWdlcm5lc3Mgb2YgbWVuIHRvIG1lZXQgaGltIHRoYXQgd2hhdCB3YXMgc2FpZCBieSBDaWNlcm8gYWZ0ZXJ3YXJkcyBmZWxsIHNob3J0IG9mIHRoZSB0cnV0aC4gSGUgc2FpZCwgbmFtZWx5LCB0aGF0IEl0YWx5IGhhZCB0YWtlbiBoaW0gb24gaGVyIHNob3VsZGVycyBhbmQgY2FycmllZCBoaW0gaW50byBSb21lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gUmVkLiBTZW4uIDM5IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBvc3QgcmVkLiBpbiBzZW4uPC90aXRsZT4gMTUsIDM5LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBbmQgdGhlcmUgQ3Jhc3N1cyBhbHNvLCB3aG8gd2FzIGhpcyBlbmVteSBiZWZvcmUgaGlzIGV4aWxlLCBub3cgcmVhZGlseSBtZXQgaGltIGFuZCB3YXMgcmVjb25jaWxlZCB3aXRoIGhpbSwgdG8gZ3JhdGlmeSBoaXMgc29uIFB1YmxpdXMsIGFzIGhlIHNhaWQsIHdobyB3YXMgYW4gYXJkZW50IGFkbWlyZXIgb2YgQ2ljZXJvLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFJlZC4gU2VuLiAzOSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5wb3N0IHJlZC4gaW4gc2VuLjwvdGl0bGU+IDE1LCAzOS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBvc3QgcmVkLiBpbiBzZW4uPC90aXRsZT4gMTUsIDM5LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGFsbG93aW5nIG9ubHkgYSBzaG9ydCB0aW1lIHRvIHBhc3MgYW5kIHdhdGNoaW5nIGZvciBhbiBvcHBvcnR1bml0eSB3aGVuIENsb2RpdXMgd2FzIGFic2VudCBmcm9tIHRoZSBjaXR5LCBDaWNlcm8gd2VudCB1cCB3aXRoIGEgZ3JlYXQgY29tcGFueSB0byB0aGUgY2FwaXRvbCwgYW5kIHRoZXJlIHRvcmUgYXdheSBhbmQgZGVzdHJveWVkIHRoZSB0YWJsZXRzIG9mIHRoZSB0cmlidW5lcywgaW4gd2hpY2ggd2VyZSB0aGUgcmVjb3JkcyBvZiB0aGVpciBhZG1pbmlzdHJhdGlvbi4gV2hlbiBDbG9kaXVzIGJyb3VnaHQgY2hhcmdlcyBhZ2FpbnN0IGhpbSBmb3IgdGhpcyBhbmQgQ2ljZXJvIGFyZ3VlZCB0aGF0IGl0IHdhcyBpbGxlZ2FsIGZvciBDbG9kaXVzIHRvIHBhc3MgZnJvbSB0aGUgcmFua3Mgb2YgdGhlIHBhdHJpY2lhbnMgaW50byB0aGUgdHJpYnVuYXRlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNsb2RpdXMgaGFkIHNlY3VyZWQgYW4gYWRvcHRpb24gaW50byBhIHBsZWJlaWFuIGZhbWlseSBpbiBvcmRlciB0byBiZWNvbWUgYSBjYW5kaWRhdGUgZm9yIHRoZSB0cmlidW5lc2hpcC4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIERvbS4gNzciIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlPnBybyBkb21vIHN1YTwvdGl0bGU+LCAyOSwgNzcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB0aGF0IHRoZXJlZm9yZSBub25lIG9mIGhpcyBhY3RzIHdhcyB2YWxpZCwgQ2F0byB3YXMgaW5kaWduYW50IGFuZCBzcG9rZSBhZ2FpbnN0IENpY2VybzsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+bm90IHRoYXQgaGUgYXBwcm92ZWQgb2YgQ2xvZGl1cywgbmF5LCBoZSB3YXMgYWN0dWFsbHkgZGlzcGxlYXNlZCBhdCBoaXMgcG9saXRpY2FsIGNvdXJzZSwgYnV0IGhlIHNldCBmb3J0aCB0aGF0IGl0IHdhcyBhIHN0cmFuZ2UgYW5kIHZpb2xlbnQgbWVhc3VyZSBmb3IgdGhlIHNlbmF0ZSB0byB2b3RlIHRoZSBhYnJvZ2F0aW9uIG9mIHNvIG1hbnkgYWN0cyBhbmQgZGVjcmVlcywgYW1vbmcgd2hpY2ggd2VyZSB0aG9zZSBmb3IgaGlzIG93biBhZG1pbmlzdHJhdGlvbiBpbiBDeXBydXMgYW5kIEJ5emFudGl1bS4gVGhpcyBsZWQgdG8gYW4gYW50YWdvbmlzbSBiZXR3ZWVuIGhpbSBhbmQgQ2ljZXJvIHdoaWNoIGNhbWUgdG8gbm8gb3BlbiBtYW5pZmVzdGF0aW9uLCBidXQgbWFkZSB0aGVpciBmcmllbmRseSB0cmVhdG1lbnQgb2Ygb25lIGFub3RoZXIgbGVzcyBtYXJrZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgYWxsb3dpbmcgb25seSBhIHNob3J0IHRpbWUgdG8gcGFzcyBhbmQgd2F0Y2hpbmcgZm9yIGFuIG9wcG9ydHVuaXR5IHdoZW4gQ2xvZGl1cyB3YXMgYWJzZW50IGZyb20gdGhlIGNpdHksIENpY2VybyB3ZW50IHVwIHdpdGggYSBncmVhdCBjb21wYW55IHRvIHRoZSBjYXBpdG9sLCBhbmQgdGhlcmUgdG9yZSBhd2F5IGFuZCBkZXN0cm95ZWQgdGhlIHRhYmxldHMgb2YgdGhlIHRyaWJ1bmVzLCBpbiB3aGljaCB3ZXJlIHRoZSByZWNvcmRzIG9mIHRoZWlyIGFkbWluaXN0cmF0aW9uLiBXaGVuIENsb2RpdXMgYnJvdWdodCBjaGFyZ2VzIGFnYWluc3QgaGltIGZvciB0aGlzIGFuZCBDaWNlcm8gYXJndWVkIHRoYXQgaXQgd2FzIGlsbGVnYWwgZm9yIENsb2RpdXMgdG8gcGFzcyBmcm9tIHRoZSByYW5rcyBvZiB0aGUgcGF0cmljaWFucyBpbnRvIHRoZSB0cmlidW5hdGUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DbG9kaXVzIGhhZCBzZWN1cmVkIGFuIGFkb3B0aW9uIGludG8gYSBwbGViZWlhbiBmYW1pbHkgaW4gb3JkZXIgdG8gYmVjb21lIGEgY2FuZGlkYXRlIGZvciB0aGUgdHJpYnVuZXNoaXAuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIERvbS4gNzciIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIGRvbW8gc3VhPC90aXRsZT4sIDI5LCA3Ny48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHRoYXQgdGhlcmVmb3JlIG5vbmUgb2YgaGlzIGFjdHMgd2FzIHZhbGlkLCBDYXRvIHdhcyBpbmRpZ25hbnQgYW5kIHNwb2tlIGFnYWluc3QgQ2ljZXJvOyAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gRG9tLiA3NyIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5wcm8gZG9tbyBzdWE8L3RpdGxlPiwgMjksIDc3LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIGRvbW8gc3VhPC90aXRsZT4sIDI5LCA3Ny48L3RyYW5zbGF0aW9uPg=="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm5vdCB0aGF0IGhlIGFwcHJvdmVkIG9mIENsb2RpdXMsIG5heSwgaGUgd2FzIGFjdHVhbGx5IGRpc3BsZWFzZWQgYXQgaGlzIHBvbGl0aWNhbCBjb3Vyc2UsIGJ1dCBoZSBzZXQgZm9ydGggdGhhdCBpdCB3YXMgYSBzdHJhbmdlIGFuZCB2aW9sZW50IG1lYXN1cmUgZm9yIHRoZSBzZW5hdGUgdG8gdm90ZSB0aGUgYWJyb2dhdGlvbiBvZiBzbyBtYW55IGFjdHMgYW5kIGRlY3JlZXMsIGFtb25nIHdoaWNoIHdlcmUgdGhvc2UgZm9yIGhpcyBvd24gYWRtaW5pc3RyYXRpb24gaW4gQ3lwcnVzIGFuZCBCeXphbnRpdW0uIFRoaXMgbGVkIHRvIGFuIGFudGFnb25pc20gYmV0d2VlbiBoaW0gYW5kIENpY2VybyB3aGljaCBjYW1lIHRvIG5vIG9wZW4gbWFuaWZlc3RhdGlvbiwgYnV0IG1hZGUgdGhlaXIgZnJpZW5kbHkgdHJlYXRtZW50IG9mIG9uZSBhbm90aGVyIGxlc3MgbWFya2VkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIENsb2RpdXMgd2FzIGtpbGxlZCBieSBNaWxvOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVhcmx5IGluIDUyIEIuQy4gRm9yIHRoaXMgeWVhciBQb21wZXkgaGFkIGJlZW4gbWFkZSBzb2xlIGNvbnN1bC48L25vdGU+IGFuZCBNaWxvLCBiZWluZyBwcm9zZWN1dGVkIGZvciBtdXJkZXIsIGVuZ2FnZWQgQ2ljZXJvIGFzIGhpcyBhZHZvY2F0ZS4gQnV0IHRoZSBzZW5hdGUgd2FzIGFmcmFpZCB0aGF0IGF0IHRoZSB0cmlhbCBvZiBNaWxvLCB3aG8gd2FzIGEgbWFuIG9mIHJlcHV0ZSBhbmQgaGlnaCBzcGlyaXQsIHRoZXJlIG1pZ2h0IGJlIGEgZGlzdHVyYmFuY2UgaW4gdGhlIGNpdHksIGFuZCB0aGVyZWZvcmUgaW50cnVzdGVkIHRoZSBzdXBlcmludGVuZGVuY2Ugb2YgdGhpcyBhbmQgdGhlIG90aGVyIHRyaWFscyB0byBQb21wZXksIHdobyB3YXMgdG8gZnVybmlzaCBzZWN1cml0eSBmb3IgdGhlIGNpdHkgYW5kIHRoZSBjb3VydHMgb2YganVzdGljZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U28gUG9tcGV5LCB3aGlsZSBpdCB3YXMgc3RpbGwgbmlnaHQsIHBvc3RlZCBoaXMgc29sZGllcnMgb24gdGhlIGhlaWdodHMgc28gYXMgdG8gY29tbWFuZCB0aGUgZm9ydW0sIGFuZCBNaWxvLCBmZWFyaW5nIHRoYXQgQ2ljZXJvIG1pZ2h0IGJlIGRpc3R1cmJlZCBhdCB0aGUgdW51c3VhbCBzaWdodCBhbmQgY29uZHVjdCBoaXMgY2FzZSBsZXNzIHN1Y2Nlc3NmdWxseSwgcGVyc3VhZGVkIGhpbSB0byBiZSBicm91Z2h0IGluIGEgbGl0dGVyIHRvIHRoZSBmb3J1bSBhbmQgdG8gd2FpdCB0aGVyZSBxdWlldGx5IHVudGlsIHRoZSBqdXJvcnMgYXNzZW1ibGVkIGFuZCB0aGUgY291cnQtcm9vbSB3YXMgZmlsbGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgQ2ljZXJvLCBhcyBpdCB3b3VsZCBzZWVtLCB3YXMgbm90IG9ubHkgd2l0aG91dCBjb3VyYWdlIHVuZGVyIGFybXMsIGJ1dCBhbHNvIGZlbHQgZmVhciB3aGVuIGhlIGJlZ2FuIHRvIHNwZWFrLCBhbmQgaW4gbWFueSB0cmlhbHMgaGUgaGFyZGx5IGNlYXNlZCBxdWl2ZXJpbmcgYW5kIHRyZW1ibGluZyBhZnRlciBoaXMgZWxvcXVlbmNlIGhhZCBiZWNvbWUgaGlnaCBhbmQgc3VzdGFpbmVkLiBXaGVuIGhlIHdhcyB0byBwbGVhZCBmb3IgTGljaW5pdXMgTXVyZW5hIGluIGEgY2FzZSBicm91Z2h0IGFnYWluc3QgaGltIGJ5IENhdG8sIGFuZCB3YXMgYW1iaXRpb3VzIHRvIHN1cnBhc3MgSG9ydGVuc2l1cywgd2hvbSBoYWQgbWFkZSBhIHN1Y2Nlc3NmdWwgcGxlYSwgaGUgdG9vayBubyByZXN0IGF0IGFsbCBkdXJpbmcgdGhlIG5pZ2h0IGJlZm9yZSwgc28gdGhhdCBoaXMgbGFjayBvZiBzbGVlcCBhbmQgaGlzIGdyZWF0IGFueGlldHkgZGlkIGhpbSBoYXJtLCBhbmQgaGUgd2FzIHRob3VnaHQgaW5mZXJpb3IgdG8gaGltc2VsZiBpbiBoaXMgcGxlYS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIGF0IHRoaXMgdGltZSwgd2hlbiBoZSBjYW1lIG91dCBvZiBoaXMgbGl0dGVyIHRvIHBsZWFkIE1pbG8ncyBjYXVzZSBhbmQgc2F3IFBvbXBleSBzdGF0aW9uZWQgb24gdGhlIGhlaWdodHMgYXMgaW4gYSBjYW1wLCBhbmQgYXJtcyBmbGFzaGluZyBhbGwgYXJvdW5kIHRoZSBmb3J1bSwgaGUgd2FzIGNvbmZvdW5kZWQgYW5kIGNvdWxkIHNjYXJjZWx5IGJlZ2luIGhpcyBzcGVlY2gsIGZvciBoaXMgYm9keSBxdWl2ZXJlZCBhbmQgaGlzIHZvaWNlIGZhbHRlcmVkOyB3aGVyZWFzIE1pbG8gc2hvd2VkIHRoZSBnb29kIGNvdXJhZ2Ugb2YgYSBicmF2ZSBtYW4gYXQgdGhlIHRyaWFsIGFuZCBoYWQgbm90IGRlaWduZWQgdG8gbGV0IGhpcyBoYWlyIGdvIHVudHJpbW1lZCBvciB0byBjaGFuZ2UgaGlzIGF0dGlyZSB0byBhIGRhcmsgb25lOyBhbmQgdGhpcyBzZWVtcyBtb3N0IG9mIGFsbCB0byBoYXZlIGNvbnRyaWJ1dGVkIHRvIGhpcyBjb25kZW1uYXRpb24uIEhvd2V2ZXIsIENpY2VybydzIGJlaGF2aW91ciBsZWQgbWVuIHRvIHRoaW5rIGhpbSBkZXZvdGVkIHRvIGhpcyBmcmllbmRzIHJhdGhlciB0aGFuIGNvd2FyZGx5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBDbG9kaXVzIHdhcyBraWxsZWQgYnkgTWlsbzs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVhcmx5IGluIDUyIEIuQy4gRm9yIHRoaXMgeWVhciBQb21wZXkgaGFkIGJlZW4gbWFkZSBzb2xlIGNvbnN1bC48L25vdGU+IGFuZCBNaWxvLCBiZWluZyBwcm9zZWN1dGVkIGZvciBtdXJkZXIsIGVuZ2FnZWQgQ2ljZXJvIGFzIGhpcyBhZHZvY2F0ZS4gQnV0IHRoZSBzZW5hdGUgd2FzIGFmcmFpZCB0aGF0IGF0IHRoZSB0cmlhbCBvZiBNaWxvLCB3aG8gd2FzIGEgbWFuIG9mIHJlcHV0ZSBhbmQgaGlnaCBzcGlyaXQsIHRoZXJlIG1pZ2h0IGJlIGEgZGlzdHVyYmFuY2UgaW4gdGhlIGNpdHksIGFuZCB0aGVyZWZvcmUgaW50cnVzdGVkIHRoZSBzdXBlcmludGVuZGVuY2Ugb2YgdGhpcyBhbmQgdGhlIG90aGVyIHRyaWFscyB0byBQb21wZXksIHdobyB3YXMgdG8gZnVybmlzaCBzZWN1cml0eSBmb3IgdGhlIGNpdHkgYW5kIHRoZSBjb3VydHMgb2YganVzdGljZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIFBvbXBleSwgd2hpbGUgaXQgd2FzIHN0aWxsIG5pZ2h0LCBwb3N0ZWQgaGlzIHNvbGRpZXJzIG9uIHRoZSBoZWlnaHRzIHNvIGFzIHRvIGNvbW1hbmQgdGhlIGZvcnVtLCBhbmQgTWlsbywgZmVhcmluZyB0aGF0IENpY2VybyBtaWdodCBiZSBkaXN0dXJiZWQgYXQgdGhlIHVudXN1YWwgc2lnaHQgYW5kIGNvbmR1Y3QgaGlzIGNhc2UgbGVzcyBzdWNjZXNzZnVsbHksIHBlcnN1YWRlZCBoaW0gdG8gYmUgYnJvdWdodCBpbiBhIGxpdHRlciB0byB0aGUgZm9ydW0gYW5kIHRvIHdhaXQgdGhlcmUgcXVpZXRseSB1bnRpbCB0aGUganVyb3JzIGFzc2VtYmxlZCBhbmQgdGhlIGNvdXJ0LXJvb20gd2FzIGZpbGxlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBDaWNlcm8sIGFzIGl0IHdvdWxkIHNlZW0sIHdhcyBub3Qgb25seSB3aXRob3V0IGNvdXJhZ2UgdW5kZXIgYXJtcywgYnV0IGFsc28gZmVsdCBmZWFyIHdoZW4gaGUgYmVnYW4gdG8gc3BlYWssIGFuZCBpbiBtYW55IHRyaWFscyBoZSBoYXJkbHkgY2Vhc2VkIHF1aXZlcmluZyBhbmQgdHJlbWJsaW5nIGFmdGVyIGhpcyBlbG9xdWVuY2UgaGFkIGJlY29tZSBoaWdoIGFuZCBzdXN0YWluZWQuIFdoZW4gaGUgd2FzIHRvIHBsZWFkIGZvciBMaWNpbml1cyBNdXJlbmEgaW4gYSBjYXNlIGJyb3VnaHQgYWdhaW5zdCBoaW0gYnkgQ2F0bywgYW5kIHdhcyBhbWJpdGlvdXMgdG8gc3VycGFzcyBIb3J0ZW5zaXVzLCB3aG9tIGhhZCBtYWRlIGEgc3VjY2Vzc2Z1bCBwbGVhLCBoZSB0b29rIG5vIHJlc3QgYXQgYWxsIGR1cmluZyB0aGUgbmlnaHQgYmVmb3JlLCBzbyB0aGF0IGhpcyBsYWNrIG9mIHNsZWVwIGFuZCBoaXMgZ3JlYXQgYW54aWV0eSBkaWQgaGltIGhhcm0sIGFuZCBoZSB3YXMgdGhvdWdodCBpbmZlcmlvciB0byBoaW1zZWxmIGluIGhpcyBwbGVhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBhdCB0aGlzIHRpbWUsIHdoZW4gaGUgY2FtZSBvdXQgb2YgaGlzIGxpdHRlciB0byBwbGVhZCBNaWxvJ3MgY2F1c2UgYW5kIHNhdyBQb21wZXkgc3RhdGlvbmVkIG9uIHRoZSBoZWlnaHRzIGFzIGluIGEgY2FtcCwgYW5kIGFybXMgZmxhc2hpbmcgYWxsIGFyb3VuZCB0aGUgZm9ydW0sIGhlIHdhcyBjb25mb3VuZGVkIGFuZCBjb3VsZCBzY2FyY2VseSBiZWdpbiBoaXMgc3BlZWNoLCBmb3IgaGlzIGJvZHkgcXVpdmVyZWQgYW5kIGhpcyB2b2ljZSBmYWx0ZXJlZDsgd2hlcmVhcyBNaWxvIHNob3dlZCB0aGUgZ29vZCBjb3VyYWdlIG9mIGEgYnJhdmUgbWFuIGF0IHRoZSB0cmlhbCBhbmQgaGFkIG5vdCBkZWlnbmVkIHRvIGxldCBoaXMgaGFpciBnbyB1bnRyaW1tZWQgb3IgdG8gY2hhbmdlIGhpcyBhdHRpcmUgdG8gYSBkYXJrIG9uZTsgYW5kIHRoaXMgc2VlbXMgbW9zdCBvZiBhbGwgdG8gaGF2ZSBjb250cmlidXRlZCB0byBoaXMgY29uZGVtbmF0aW9uLiBIb3dldmVyLCBDaWNlcm8ncyBiZWhhdmlvdXIgbGVkIG1lbiB0byB0aGluayBoaW0gZGV2b3RlZCB0byBoaXMgZnJpZW5kcyByYXRoZXIgdGhhbiBjb3dhcmRseS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYmVjYW1lIGFsc28gb25lIG9mIHRoZSBwcmllc3RzIHdob20gdGhlIFJvbWFucyBjYWxsIEF1Z3VycywgaW4gcGxhY2Ugb2YgdGhlIHlvdW5nZXIgQ3Jhc3N1cywgd2hvIGhhZCBkaWVkIGFtb25nIHRoZSBQYXJ0aGlhbnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNTMgQi5DLiBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDcmFzcy4gMjUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DcmFzc3VzPC90aXRsZT4sIGNoYXB0ZXIgeHh2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGVuIHRoZSBsb3QgZ2F2ZSBoaW0gQ2lsaWNpYSBhcyBoaXMgcHJvdmluY2UsIHdpdGggYW4gYXJteSBvZiB0d2VsdmUgdGhvdXNhbmQgbWVuLWF0LWFybXMgYW5kIHR3ZW50eS1zaXggaHVuZHJlZCBob3JzZW1lbiwgYW5kIGhlIHNldCBzYWlsLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDUxIEIuQy48L25vdGU+IHdpdGggaW5zdHJ1Y3Rpb25zIHRvIGtlZXAgQ2FwcGFkb2NpYSBmcmllbmRseSBhbmQgb2JlZGllbnQgdG8gS2luZyBBcmlvYmFyemFuZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaGUgYWNjb21wbGlzaGVkIGFuZCBhcnJhbmdlZCBzYXRpc2ZhY3RvcmlseSB3aXRob3V0IHdhciwgYW5kIHNlZWluZyB0aGF0IHRoZSBDaWxpY2lhbnMsIGluIHZpZXcgb2YgdGhlIFBhcnRoaWFuIGRpc2FzdGVyIHRvIHRoZSBSb21hbnMgYW5kIHRoZSB1cHJpc2luZyBpbiBTeXJpYSwgd2VyZSBpbiBhbiBhZ2l0YXRlZCBzdGF0ZSwgaGUgcGFjaWZpZWQgdGhlbSBieSBoaXMgbWlsZCBnb3Zlcm5tZW50LiBHaWZ0cyBoZSB3b3VsZCBub3QgcmVjZWl2ZSwgbm90IGV2ZW4gd2hlbiB0aGUga2luZ3Mgb2ZmZXJlZCB0aGVtLCBhbmQgaGUgcmVsaWV2ZWQgdGhlIHByb3ZpbmNpYWxzIGZyb20gdGhlIGV4cGVuc2Ugb2YgZW50ZXJ0YWlubWVudHM7IGJ1dCBoZSBoaW1zZWxmIGRhaWx5IHJlY2VpdmVkIG1lbiBvZiBwbGVhc2luZyBhY2NvbXBsaXNobWVudHMgYXQgYmFucXVldHMgd2hpY2ggd2VyZSBub3QgZXhwZW5zaXZlLCBhbHRob3VnaCBnZW5lcm91cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGhvdXNlLCB0b28sIGhhZCBubyBkb29yLWtlZXBlciwgbm9yIGRpZCBhbnlvbmUgZXZlciBzZWUgaGltIGx5aW5nIGEtYmVkLCBidXQgZWFybHkgaW4gdGhlIG1vcm5pbmcgaGUgd291bGQgc3RhbmQgb3Igd2FsayBpbiBmcm9udCBvZiBoaXMgY2hhbWJlciBhbmQgcmVjZWl2ZSB0aG9zZSB3aG8gY2FtZSB0byBwYXkgaGltIHRoZWlyIHJlc3BlY3RzLiBJdCBpcyBzYWlkLCBtb3Jlb3ZlciwgdGhhdCBoZSBuZXZlciBvcmRlcmVkIGFueSBtYW4gdG8gYmUgY2hhc3Rpc2VkIHdpdGggcm9kcyBvciB0byBoYXZlIGhpcyByYWltZW50IHRvcm4gZnJvbSBoaW0sIGFuZCB0aGF0IGhlIG5ldmVyIGluZmxpY3RlZCBhbmdyeSBhYnVzZSBvciBjb250dW1lbGlvdXMgcHVuaXNobWVudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGRpc2NvdmVyZWQgdGhhdCBtdWNoIG9mIHRoZSBwdWJsaWMgcHJvcGVydHkgaGFkIGJlZW4gZW1iZXp6bGVkLCBhbmQgYnkgcmVzdG9yaW5nIGl0IGhlIG1hZGUgdGhlIGNpdGllcyB3ZWxsLXRvLWRvLCBhbmQgbWVuIHdobyBtYWRlIHJlc3RpdHV0aW9uIGhlIG1haW50YWluZWQgaW4gdGhlaXIgY2l2aWwgcmlnaHRzIHdpdGhvdXQgZnVydGhlciBwZW5hbHRpZXMuIEhlIGVuZ2FnZWQgaW4gd2FyLCB0b28sIGFuZCByb3V0ZWQgdGhlIHJvYmJlcnMgd2hvIG1hZGUgdGhlaXIgaG9tZXMgb24gTW91bnQgQW1hbnVzOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBGYW0uIDIuMTAuMiIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+YWQgZmFtLjwvdGl0bGU+IGlpLiAxMCwgMiBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgZm9yIHRoaXMgaGUgd2FzIGFjdHVhbGx5IHNhbHV0ZWQgYnkgaGlzIHNvbGRpZXJzIGFzIEltcGVyYXRvci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYWVsaXVzIHRoZSBvcmF0b3IgYXNrZWQgQ2ljZXJvIHRvIHNlbmQgaGltIHBhbnRoZXJzIGZyb20gQ2lsaWNpYSBmb3IgYSBjZXJ0YWluIHNwZWN0YWNsZSBhdCBSb21lLCBDaWNlcm8sIHBsdW1pbmcgaGltc2VsZiB1cG9uIGhpcyBleHBsb2l0cywgd3JvdGUgdG8gaGltIHRoYXQgdGhlcmUgd2VyZSBubyBwYW50aGVycyBpbiBDaWxpY2lhOyBmb3IgdGhleSBoYWQgZmxlZCB0byBDYXJpYSBpbiBpbmRpZ25hdGlvbiBiZWNhdXNlIHRoZXkgYWxvbmUgd2VyZSB3YXJyZWQgdXBvbiwgd2hpbGUgZXZlcnl0aGluZyBlbHNlIGVuam95ZWQgcGVhY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEZhbS4gMi4xMS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFkIGZhbS48L3RpdGxlPiBpaS4gMTEsIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IE9uIGhpcyB2b3lhZ2UgYmFjayBmcm9tIGhpcyBwcm92aW5jZSBoZSBmaXJzdCB0b3VjaGVkIGF0IFJob2RlcywgYW5kIHRoZW4gZ2xhZGx5IHNwZW50IHNvbWUgdGltZSBhdCBBdGhlbnMgaW4gZm9uZCByZW1lbWJyYW5jZSBvZiBoaXMgb2xkIHB1cnN1aXRzIGluIHRoYXQgcGxhY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIGFzc29jaWF0aW5nIHdpdGggbWVuIHdobyB3ZXJlIGZvcmVtb3N0IGZvciB0aGVpciBsZWFybmluZywgYW5kIGFmdGVyIGdyZWV0aW5nIGhpcyBvbGQtdGltZSBmcmllbmRzIGFuZCBpbnRpbWF0ZXMsIGFuZCBhZnRlciByZWNlaXZpbmcgZnJvbSBHcmVlY2UgdGhlIHRva2VucyBvZiBhZG1pcmF0aW9uIHRoYXQgd2VyZSBoaXMgZHVlLCBoZSByZXR1cm5lZCB0byBSb21lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkphbnVhcnkgNCwgNDkgQi5DLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gRmFtLiAxNi4xMS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPmFkIGZhbS48L3RpdGxlPiB4dmkuIDExLCAyIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoZXJlIGEgdmlvbGVudCBpbmZsYW1tYXRpb24sIGFzIGl0IHdlcmUsIHdhcyBhbHJlYWR5IGZvcmNpbmcgbWF0dGVycyBvbiB0b3dhcmRzIHRoZSBjaXZpbCB3YXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYmVjYW1lIGFsc28gb25lIG9mIHRoZSBwcmllc3RzIHdob20gdGhlIFJvbWFucyBjYWxsIEF1Z3VycywgaW4gcGxhY2Ugb2YgdGhlIHlvdW5nZXIgQ3Jhc3N1cywgd2hvIGhhZCBkaWVkIGFtb25nIHRoZSBQYXJ0aGlhbnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA1MyBCLkMuIFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDI1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIGNoYXB0ZXIgeHh2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGVuIHRoZSBsb3QgZ2F2ZSBoaW0gQ2lsaWNpYSBhcyBoaXMgcHJvdmluY2UsIHdpdGggYW4gYXJteSBvZiB0d2VsdmUgdGhvdXNhbmQgbWVuLWF0LWFybXMgYW5kIHR3ZW50eS1zaXggaHVuZHJlZCBob3JzZW1lbiwgYW5kIGhlIHNldCBzYWlsLDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAyNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCBjaGFwdGVyIHh4di48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgY2hhcHRlciB4eHYuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA1MSBCLkMuPC9ub3RlPiB3aXRoIGluc3RydWN0aW9ucyB0byBrZWVwIENhcHBhZG9jaWEgZnJpZW5kbHkgYW5kIG9iZWRpZW50IHRvIEtpbmcgQXJpb2JhcnphbmVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaGUgYWNjb21wbGlzaGVkIGFuZCBhcnJhbmdlZCBzYXRpc2ZhY3RvcmlseSB3aXRob3V0IHdhciwgYW5kIHNlZWluZyB0aGF0IHRoZSBDaWxpY2lhbnMsIGluIHZpZXcgb2YgdGhlIFBhcnRoaWFuIGRpc2FzdGVyIHRvIHRoZSBSb21hbnMgYW5kIHRoZSB1cHJpc2luZyBpbiBTeXJpYSwgd2VyZSBpbiBhbiBhZ2l0YXRlZCBzdGF0ZSwgaGUgcGFjaWZpZWQgdGhlbSBieSBoaXMgbWlsZCBnb3Zlcm5tZW50LiBHaWZ0cyBoZSB3b3VsZCBub3QgcmVjZWl2ZSwgbm90IGV2ZW4gd2hlbiB0aGUga2luZ3Mgb2ZmZXJlZCB0aGVtLCBhbmQgaGUgcmVsaWV2ZWQgdGhlIHByb3ZpbmNpYWxzIGZyb20gdGhlIGV4cGVuc2Ugb2YgZW50ZXJ0YWlubWVudHM7IGJ1dCBoZSBoaW1zZWxmIGRhaWx5IHJlY2VpdmVkIG1lbiBvZiBwbGVhc2luZyBhY2NvbXBsaXNobWVudHMgYXQgYmFucXVldHMgd2hpY2ggd2VyZSBub3QgZXhwZW5zaXZlLCBhbHRob3VnaCBnZW5lcm91cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBob3VzZSwgdG9vLCBoYWQgbm8gZG9vci1rZWVwZXIsIG5vciBkaWQgYW55b25lIGV2ZXIgc2VlIGhpbSBseWluZyBhLWJlZCwgYnV0IGVhcmx5IGluIHRoZSBtb3JuaW5nIGhlIHdvdWxkIHN0YW5kIG9yIHdhbGsgaW4gZnJvbnQgb2YgaGlzIGNoYW1iZXIgYW5kIHJlY2VpdmUgdGhvc2Ugd2hvIGNhbWUgdG8gcGF5IGhpbSB0aGVpciByZXNwZWN0cy4gSXQgaXMgc2FpZCwgbW9yZW92ZXIsIHRoYXQgaGUgbmV2ZXIgb3JkZXJlZCBhbnkgbWFuIHRvIGJlIGNoYXN0aXNlZCB3aXRoIHJvZHMgb3IgdG8gaGF2ZSBoaXMgcmFpbWVudCB0b3JuIGZyb20gaGltLCBhbmQgdGhhdCBoZSBuZXZlciBpbmZsaWN0ZWQgYW5ncnkgYWJ1c2Ugb3IgY29udHVtZWxpb3VzIHB1bmlzaG1lbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGRpc2NvdmVyZWQgdGhhdCBtdWNoIG9mIHRoZSBwdWJsaWMgcHJvcGVydHkgaGFkIGJlZW4gZW1iZXp6bGVkLCBhbmQgYnkgcmVzdG9yaW5nIGl0IGhlIG1hZGUgdGhlIGNpdGllcyB3ZWxsLXRvLWRvLCBhbmQgbWVuIHdobyBtYWRlIHJlc3RpdHV0aW9uIGhlIG1haW50YWluZWQgaW4gdGhlaXIgY2l2aWwgcmlnaHRzIHdpdGhvdXQgZnVydGhlciBwZW5hbHRpZXMuIEhlIGVuZ2FnZWQgaW4gd2FyLCB0b28sIGFuZCByb3V0ZWQgdGhlIHJvYmJlcnMgd2hvIG1hZGUgdGhlaXIgaG9tZXMgb24gTW91bnQgQW1hbnVzOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gRmFtLiAyLjEwLjIiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgZmFtLjwvdGl0bGU+IGlpLiAxMCwgMiBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgZm9yIHRoaXMgaGUgd2FzIGFjdHVhbGx5IHNhbHV0ZWQgYnkgaGlzIHNvbGRpZXJzIGFzIEltcGVyYXRvci4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEZhbS4gMi4xMC4yIiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIGZhbS48L3RpdGxlPiBpaS4gMTAsIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIGZhbS48L3RpdGxlPiBpaS4gMTAsIDIgZi48L3RyYW5zbGF0aW9uPg=="
translation['36.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ2FlbGl1cyB0aGUgb3JhdG9yIGFza2VkIENpY2VybyB0byBzZW5kIGhpbSBwYW50aGVycyBmcm9tIENpbGljaWEgZm9yIGEgY2VydGFpbiBzcGVjdGFjbGUgYXQgUm9tZSwgQ2ljZXJvLCBwbHVtaW5nIGhpbXNlbGYgdXBvbiBoaXMgZXhwbG9pdHMsIHdyb3RlIHRvIGhpbSB0aGF0IHRoZXJlIHdlcmUgbm8gcGFudGhlcnMgaW4gQ2lsaWNpYTsgZm9yIHRoZXkgaGFkIGZsZWQgdG8gQ2FyaWEgaW4gaW5kaWduYXRpb24gYmVjYXVzZSB0aGV5IGFsb25lIHdlcmUgd2FycmVkIHVwb24sIHdoaWxlIGV2ZXJ5dGhpbmcgZWxzZSBlbmpveWVkIHBlYWNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gRmFtLiAyLjExLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZCBmYW0uPC90aXRsZT4gaWkuIDExLCAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBPbiBoaXMgdm95YWdlIGJhY2sgZnJvbSBoaXMgcHJvdmluY2UgaGUgZmlyc3QgdG91Y2hlZCBhdCBSaG9kZXMsIGFuZCB0aGVuIGdsYWRseSBzcGVudCBzb21lIHRpbWUgYXQgQXRoZW5zIGluIGZvbmQgcmVtZW1icmFuY2Ugb2YgaGlzIG9sZCBwdXJzdWl0cyBpbiB0aGF0IHBsYWNlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gRmFtLiAyLjExLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZCBmYW0uPC90aXRsZT4gaWkuIDExLCAyLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWQgZmFtLjwvdGl0bGU+IGlpLiAxMSwgMi48L3RyYW5zbGF0aW9uPg=="
translation['36.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIGFzc29jaWF0aW5nIHdpdGggbWVuIHdobyB3ZXJlIGZvcmVtb3N0IGZvciB0aGVpciBsZWFybmluZywgYW5kIGFmdGVyIGdyZWV0aW5nIGhpcyBvbGQtdGltZSBmcmllbmRzIGFuZCBpbnRpbWF0ZXMsIGFuZCBhZnRlciByZWNlaXZpbmcgZnJvbSBHcmVlY2UgdGhlIHRva2VucyBvZiBhZG1pcmF0aW9uIHRoYXQgd2VyZSBoaXMgZHVlLCBoZSByZXR1cm5lZCB0byBSb21lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SmFudWFyeSA0LCA0OSBCLkMuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEZhbS4gMTYuMTEuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIGZhbS48L3RpdGxlPiB4dmkuIDExLCAyIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoZXJlIGEgdmlvbGVudCBpbmZsYW1tYXRpb24sIGFzIGl0IHdlcmUsIHdhcyBhbHJlYWR5IGZvcmNpbmcgbWF0dGVycyBvbiB0b3dhcmRzIHRoZSBjaXZpbCB3YXIuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gRmFtLiAxNi4xMS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgZmFtLjwvdGl0bGU+IHh2aS4gMTEsIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIGZhbS48L3RpdGxlPiB4dmkuIDExLCAyIGYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gdGhlIHNlbmF0b3JzIHdlcmUgdm90aW5nIGhpbSBhIHRyaXVtcGgsIGhlIHNhaWQgaGUgd291bGQgbW9yZSBnbGFkbHkgZm9sbG93IGluIENhZXNhcidzIHRyaXVtcGhhbCBwcm9jZXNzaW9uIGlmIG1hdHRlcnMgY291bGQgYmUgc2V0dGxlZDsgYW5kIHByaXZhdGVseSBoZSBnYXZlIG11Y2ggYWR2aWNlIHRvIENhZXNhciBieSBsZXR0ZXIsIGFuZCBtdWNoIHRvIFBvbXBleSBpbiBwZXJzb24gYnkgd2F5IG9mIHBlcnNvbmFsIGVudHJlYXR5LCB0cnlpbmcgdG8gbW9sbGlmeSBhbmQgcGFjaWZ5IGVhY2ggb2YgdGhlbS4gQnV0IHdoZW4gdGhpbmdzIHdlcmUgcGFzdCBoZWFsaW5nLCBhbmQgQ2Flc2FyIHdhcyBhZHZhbmNpbmcgdXBvbiB0aGUgY2l0eSwgYW5kIFBvbXBleSBkaWQgbm90IHN0YXkgdGhlcmUsIGJ1dCBhYmFuZG9uZWQgdGhlIGNpdHkgaW4gdGhlIGNvbXBhbnkgb2YgbWFueSBnb29kIG1lbiwgQ2ljZXJvIGRpZCBub3QgdGFrZSBwYXJ0IGluIHRoaXMgZmxpZ2h0LCBhbmQgd2FzIHRob3VnaHQgdG8gYmUgYXR0YWNoaW5nIGhpbXNlbGYgdG8gQ2Flc2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaXMgY2xlYXIgdGhhdCBoaXMganVkZ2VtZW50IGRyZXcgaGltIHN0cm9uZ2x5IGluIGJvdGggZGlyZWN0aW9ucyBhbmQgdGhhdCBoZSB3YXMgaW4gZGlzdHJlc3MuIEZvciBoZSB3cml0ZXMgaW4gaGlzIGxldHRlcnMgdGhhdCBoZSBrbmV3IG5vdCB3aGljaCB3YXkgaGUgb3VnaHQgdG8gdHVybiwgc2luY2UgUG9tcGV5IGhhZCBob25vdXJhYmxlIGFuZCBnb29kIGdyb3VuZHMgZm9yIGdvaW5nIHRvIHdhciwgd2hpbGUgQ2Flc2FyIG1hbmFnZWQgbWF0dGVycyBiZXR0ZXIgYW5kIGhhZCBtb3JlIGFiaWxpdHkgdG8gc2F2ZSBoaW1zZWxmIGFuZCBoaXMgZnJpZW5kczsgaGUgdGhlcmVmb3JlIGtuZXcgZnJvbSB3aG9tIGhlIHNob3VsZCBmbGVlLCBidXQgbm90IHRvIHdob20gaGUgc2hvdWxkIGZsZWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5FZ28gdmVybyBxdWVtIGZ1Z2lhbSBoYWJlbywgcXVlbSBzZXF1YXIgbm9uIGhhYmVvPC9mb3JlaWduPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQXR0LiA4LjcuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5hZCBBdHQuPC90aXRsZT4gdmlpaS4gNywgMjwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBUcmViYXRpdXMsIG9uZSBvZiB0aGUgY29tcGFuaW9ucyBvZiBDYWVzYXIsIHdyb3RlIGhpbSBhIGxldHRlciBzdGF0aW5nIHRoYXQgQ2Flc2FyIHRob3VnaHQgaGUgb3VnaHQgYWJvdmUgYWxsIHRoaW5ncyB0byByYW5nZSBoaW1zZWxmIG9uIGhpcyBzaWRlIGFuZCBzaGFyZSBoaXMgaG9wZXMsIGJ1dCB0aGF0IGlmIGhlIGRlY2xpbmVkIHRvIGRvIHRoaXMgYnkgcmVhc29uIG9mIGhpcyBhZ2UsIGhlIG91Z2h0IHRvIGdvIHRvIEdyZWVjZSBhbmQgdGFrZSB1cCBhIHF1aWV0IGxpZmUgdGhlcmUgb3V0IG9mIHRoZSB3YXkgb2YgYm90aCwgQ2ljZXJvIHdhcyBhbWF6ZWQgdGhhdCBDYWVzYXIgaGltc2VsZiBkaWQgbm90IHdyaXRlLCBhbmQgcmVwbGllZCBpbiBhIHBhc3Npb24gdGhhdCBoZSB3b3VsZCBkbyBub3RoaW5nIHVud29ydGh5IG9mIGhpcyBwb2xpdGljYWwgY2FyZWVyLiBTdWNoLCB0aGVuLCBpcyB0aGUgcHVycG9ydCBvZiBoaXMgbGV0dGVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gdGhlIHNlbmF0b3JzIHdlcmUgdm90aW5nIGhpbSBhIHRyaXVtcGgsIGhlIHNhaWQgaGUgd291bGQgbW9yZSBnbGFkbHkgZm9sbG93IGluIENhZXNhcidzIHRyaXVtcGhhbCBwcm9jZXNzaW9uIGlmIG1hdHRlcnMgY291bGQgYmUgc2V0dGxlZDsgYW5kIHByaXZhdGVseSBoZSBnYXZlIG11Y2ggYWR2aWNlIHRvIENhZXNhciBieSBsZXR0ZXIsIGFuZCBtdWNoIHRvIFBvbXBleSBpbiBwZXJzb24gYnkgd2F5IG9mIHBlcnNvbmFsIGVudHJlYXR5LCB0cnlpbmcgdG8gbW9sbGlmeSBhbmQgcGFjaWZ5IGVhY2ggb2YgdGhlbS4gQnV0IHdoZW4gdGhpbmdzIHdlcmUgcGFzdCBoZWFsaW5nLCBhbmQgQ2Flc2FyIHdhcyBhZHZhbmNpbmcgdXBvbiB0aGUgY2l0eSwgYW5kIFBvbXBleSBkaWQgbm90IHN0YXkgdGhlcmUsIGJ1dCBhYmFuZG9uZWQgdGhlIGNpdHkgaW4gdGhlIGNvbXBhbnkgb2YgbWFueSBnb29kIG1lbiwgQ2ljZXJvIGRpZCBub3QgdGFrZSBwYXJ0IGluIHRoaXMgZmxpZ2h0LCBhbmQgd2FzIHRob3VnaHQgdG8gYmUgYXR0YWNoaW5nIGhpbXNlbGYgdG8gQ2Flc2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBjbGVhciB0aGF0IGhpcyBqdWRnZW1lbnQgZHJldyBoaW0gc3Ryb25nbHkgaW4gYm90aCBkaXJlY3Rpb25zIGFuZCB0aGF0IGhlIHdhcyBpbiBkaXN0cmVzcy4gRm9yIGhlIHdyaXRlcyBpbiBoaXMgbGV0dGVycyB0aGF0IGhlIGtuZXcgbm90IHdoaWNoIHdheSBoZSBvdWdodCB0byB0dXJuLCBzaW5jZSBQb21wZXkgaGFkIGhvbm91cmFibGUgYW5kIGdvb2QgZ3JvdW5kcyBmb3IgZ29pbmcgdG8gd2FyLCB3aGlsZSBDYWVzYXIgbWFuYWdlZCBtYXR0ZXJzIGJldHRlciBhbmQgaGFkIG1vcmUgYWJpbGl0eSB0byBzYXZlIGhpbXNlbGYgYW5kIGhpcyBmcmllbmRzOyBoZSB0aGVyZWZvcmUga25ldyBmcm9tIHdob20gaGUgc2hvdWxkIGZsZWUsIGJ1dCBub3QgdG8gd2hvbSBoZSBzaG91bGQgZmxlZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5FZ28gdmVybyBxdWVtIGZ1Z2lhbSBoYWJlbywgcXVlbSBzZXF1YXIgbm9uIGhhYmVvPC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDguNy4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgQXR0LjwvdGl0bGU+IHZpaWkuIDcsIDI8L2JpYmw+KS48L25vdGU+IAoJCQkJICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5FZ28gdmVybyBxdWVtIGZ1Z2lhbSBoYWJlbywgcXVlbSBzZXF1YXIgbm9uIGhhYmVvPC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDguNy4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgQXR0LjwvdGl0bGU+IHZpaWkuIDcsIDI8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBBdHQuPC90aXRsZT4gdmlpaS4gNywgMjwvdHJhbnNsYXRpb24+"
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFRyZWJhdGl1cywgb25lIG9mIHRoZSBjb21wYW5pb25zIG9mIENhZXNhciwgd3JvdGUgaGltIGEgbGV0dGVyIHN0YXRpbmcgdGhhdCBDYWVzYXIgdGhvdWdodCBoZSBvdWdodCBhYm92ZSBhbGwgdGhpbmdzIHRvIHJhbmdlIGhpbXNlbGYgb24gaGlzIHNpZGUgYW5kIHNoYXJlIGhpcyBob3BlcywgYnV0IHRoYXQgaWYgaGUgZGVjbGluZWQgdG8gZG8gdGhpcyBieSByZWFzb24gb2YgaGlzIGFnZSwgaGUgb3VnaHQgdG8gZ28gdG8gR3JlZWNlIGFuZCB0YWtlIHVwIGEgcXVpZXQgbGlmZSB0aGVyZSBvdXQgb2YgdGhlIHdheSBvZiBib3RoLCBDaWNlcm8gd2FzIGFtYXplZCB0aGF0IENhZXNhciBoaW1zZWxmIGRpZCBub3Qgd3JpdGUsIGFuZCByZXBsaWVkIGluIGEgcGFzc2lvbiB0aGF0IGhlIHdvdWxkIGRvIG5vdGhpbmcgdW53b3J0aHkgb2YgaGlzIHBvbGl0aWNhbCBjYXJlZXIuIFN1Y2gsIHRoZW4sIGlzIHRoZSBwdXJwb3J0IG9mIGhpcyBsZXR0ZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBDYWVzYXIgc2V0IG91dCBmb3IgU3BhaW4sIENpY2VybyBhdCBvbmNlIHNhaWxlZCB0byBQb21wZXkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gQXByaWwsIDQ5IEIuQy4sIENhZXNhciBzZXQgb3V0IGZvciBTcGFpbiBhbmQgaW4gSnVuZSBDaWNlcm8gc2FpbGVkIGZvciBHcmVlY2UuPC9ub3RlPiBUaGUgcmVzdCBvZiBQb21wZXkncyBmb2xsb3dlcnMgd2VyZSBnbGFkIHRvIHNlZSBoaW0sIGJ1dCB3aGVuIENhdG8gc2F3IGhpbSwgaGUgcHJpdmF0ZWx5IGJsYW1lZCBoaW0gbXVjaCBmb3IgYXR0YWNoaW5nIGhpbXNlbGYgdG8gUG9tcGV5LiBJbiBoaXMgb3duIGNhc2UsIENhdG8gc2FpZCwgaXQgd2FzIG5vdCBob25vdXJhYmxlIHRvIGFiYW5kb24gdGhlIGxpbmUgb2YgcHVibGljIHBvbGljeSB3aGljaCBoZSBoYWQgY2hvc2VuIGZyb20gdGhlIGJlZ2lubmluZzsgYnV0IENpY2VybywgdGhvdWdoIGhlIHdhcyBvZiBtb3JlIHNlcnZpY2UgdG8gaGlzIGNvdW50cnkgYW5kIGhpcyBmcmllbmRzIGlmIGhlIHJlbWFpbmVkIGF0IGhvbWUgd2l0aG91dCB0YWtpbmcgc2lkZXMgYW5kIGFjY29tbW9kYXRlZCBoaW1zZWxmIHRvIHRoZSBpc3N1ZSBvZiBldmVudHMsIHdpdGhvdXQgYW55IHJlYXNvbiBhbmQgdW5kZXIgbm8gY29tcHVsc2lvbiBoYWQgbWFkZSBoaW1zZWxmIGFuIGVuZW15IG9mIENhZXNhciwgYW5kIGhhZCBjb21lIHRoaXRoZXIgdG8gc2hhcmUgaW4gdGhlaXIgZ3JlYXQgZGFuZ2VyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gQ2Flc2FyIHNldCBvdXQgZm9yIFNwYWluLCBDaWNlcm8gYXQgb25jZSBzYWlsZWQgdG8gUG9tcGV5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gQXByaWwsIDQ5IEIuQy4sIENhZXNhciBzZXQgb3V0IGZvciBTcGFpbiBhbmQgaW4gSnVuZSBDaWNlcm8gc2FpbGVkIGZvciBHcmVlY2UuPC9ub3RlPiBUaGUgcmVzdCBvZiBQb21wZXkncyBmb2xsb3dlcnMgd2VyZSBnbGFkIHRvIHNlZSBoaW0sIGJ1dCB3aGVuIENhdG8gc2F3IGhpbSwgaGUgcHJpdmF0ZWx5IGJsYW1lZCBoaW0gbXVjaCBmb3IgYXR0YWNoaW5nIGhpbXNlbGYgdG8gUG9tcGV5LiBJbiBoaXMgb3duIGNhc2UsIENhdG8gc2FpZCwgaXQgd2FzIG5vdCBob25vdXJhYmxlIHRvIGFiYW5kb24gdGhlIGxpbmUgb2YgcHVibGljIHBvbGljeSB3aGljaCBoZSBoYWQgY2hvc2VuIGZyb20gdGhlIGJlZ2lubmluZzsgYnV0IENpY2VybywgdGhvdWdoIGhlIHdhcyBvZiBtb3JlIHNlcnZpY2UgdG8gaGlzIGNvdW50cnkgYW5kIGhpcyBmcmllbmRzIGlmIGhlIHJlbWFpbmVkIGF0IGhvbWUgd2l0aG91dCB0YWtpbmcgc2lkZXMgYW5kIGFjY29tbW9kYXRlZCBoaW1zZWxmIHRvIHRoZSBpc3N1ZSBvZiBldmVudHMsIHdpdGhvdXQgYW55IHJlYXNvbiBhbmQgdW5kZXIgbm8gY29tcHVsc2lvbiBoYWQgbWFkZSBoaW1zZWxmIGFuIGVuZW15IG9mIENhZXNhciwgYW5kIGhhZCBjb21lIHRoaXRoZXIgdG8gc2hhcmUgaW4gdGhlaXIgZ3JlYXQgZGFuZ2VyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CeSB0aGVzZSB3b3JkcyB0aGUgcHVycG9zZSBvZiBDaWNlcm8gd2FzIHVwc2V0LCBhcyB3ZWxsIGFzIGJ5IHRoZSBmYWN0IHRoYXQgUG9tcGV5IG1hZGUgbm8gZ3JlYXQgdXNlIG9mIGhpbS4gQnV0IGhlIHdhcyBoaW1zZWxmIHRvIGJsYW1lIGZvciB0aGlzLCBzaW5jZSBoZSBtYWRlIG5vIGRlbmlhbCB0aGF0IGhlIHdhcyBzb3JyeSBoZSBoYWQgY29tZSwgbWFkZSBsaWdodCBvZiBQb21wZXkncyBwcmVwYXJhdGlvbnMgYW5kIHNob3dlZCBhIGx1cmtpbmcgZGlzcGxlYXN1cmUgYXQgaGlzIHBsYW5zLCBhbmQgZGlkIG5vdCByZWZyYWluIGZyb20gamVzdHMgYW5kIHdpdHR5IHJlbWFya3MgYWJvdXQgaGlzIGNvbXJhZGVzIGluIGFybXM7IG5heSwgYWx0aG91Z2ggaGUgaGltc2VsZiBhbHdheXMgd2VudCBhYm91dCBpbiB0aGUgY2FtcCB3aXRob3V0IGEgc21pbGUgYW5kIHNjb3dsaW5nLCBzdGlsbCBoZSBtYWRlIG90aGVycyBsYXVnaCBpbiBzcGl0ZSBvZiB0aGVtc2VsdmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgd2lsbCBiZSB3ZWxsIHRvIGdpdmUgYSBmZXcgaW5zdGFuY2VzIG9mIHRoaXMgYWxzby4gV2hlbiBEb21pdGl1cywgdGhlbiwgd2FzIGFkdmFuY2luZyB0byBhIHBvc3Qgb2YgY29tbWFuZCBhIG1hbiB3aG8gd2FzIG5vIHNvbGRpZXIsIHdpdGggdGhlIHJlbWFyayB0aGF0IGhlIHdhcyBnZW50bGUgaW4gaGlzIGRpc3Bvc2l0aW9uIGFuZCBwcnVkZW50LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgdGhlbiw8L3E+IHNhaWQgQ2ljZXJvLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRvIHlvdSBub3Qga2VlcCBoaW0gYXMgYSBndWFyZGlhbiBvZiB5b3VyIGNoaWxkcmVuPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBjZXJ0YWluIG9uZXMgd2VyZSBwcmFpc2luZyBUaGVvcGhhbmVzIHRoZSBMZXNiaWFuLCB3aG8gd2FzIHByZWZlY3Qgb2YgZW5naW5lZXJzIGluIHRoZSBjYW1wLCBiZWNhdXNlIGhlIGhhZCBnaXZlbiBleGNlbGxlbnQgY29uc29sYXRpb24gdG8gdGhlIFJob2RpYW5zIG9uIHRoZSBsb3NzIG9mIHRoZWlyIGZsZWV0LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgYSBncmVhdCBibGVzc2luZyBpdCBpcyw8L3E+IHNhaWQgQ2ljZXJvLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRvIGhhdmUgYSBHcmVlayBhcyBwcmVmZWN0ITwvcT4gQWdhaW4sIHdoZW4gQ2Flc2FyIHdhcyBzdWNjZXNzZnVsIGZvciB0aGUgbW9zdCBwYXJ0IGFuZCBpbiBhIHdheSB3YXMgbGF5aW5nIHNpZWdlIHRvIHRoZW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXQgRHlycmhhY2hpdW0uIFNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDM5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2Flc2FyPC90aXRsZT4sIHh4eGl4LjwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuNDEiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlPkIuQy48L3RpdGxlPiBpaWkuIDQxLTU1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBMZW50dWx1cyBzYWlkIGhlIGhhZCBoZWFyZCB0aGF0IENhZXNhcidzIGZyaWVuZHMgd2VyZSBnbG9vbXksIHRvIHdoaWNoIENpY2VybyByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdSBtZWFuIHRoYXQgdGhleSBhcmUgaWxsLWRpc3Bvc2VkIHRvIENhZXNhci48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gYSBjZXJ0YWluIE1hcmNpdXMsIHdobyBoYWQgcmVjZW50bHkgY29tZSBmcm9tIEl0YWx5LCBzcG9rZSBvZiBhIHJlcG9ydCB3aGljaCBwcmV2YWlsZWQgaW4gUm9tZSB0aGF0IFBvbXBleSB3YXMgYmVzaWVnZWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHRoZW4sPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kaWQgeW91IHNhaWwgb2ZmIHRoYXQgeW91IG1pZ2h0IHNlZSB3aXRoIHlvdXIgb3duIGV5ZXMgYW5kIGJlbGlldmU/PC9xPiBBZ2FpbiwgYWZ0ZXIgdGhlIGRlZmVhdCwgd2hlbiBOb25uaXVzIHNhaWQgdGhleSBvdWdodCB0byBoYXZlIGdvb2QgaG9wZXMsIHNpbmNlIHNldmVuIGVhZ2xlcyB3ZXJlIGxlZnQgaW4gdGhlIGNhbXAgb2YgUG9tcGV5LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdXIgYWR2aWNlIHdvdWxkIGJlIGdvb2QsPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiB3ZSB3ZXJlIGF0IHdhciB3aXRoIGphY2tkYXdzLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBMYWJpZW51cywgaW5zaXN0aW5nIG9uIGNlcnRhaW4gb3JhY2xlcywgc2FpZCB0aGF0IFBvbXBleSBtdXN0IHByZXZhaWwsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhpcyBpcyB0aGUgZ2VuZXJhbHNoaXAgdGhhdCBoYXMgbm93IGNvc3QgdXMgb3VyIGNhbXAuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ5IHRoZXNlIHdvcmRzIHRoZSBwdXJwb3NlIG9mIENpY2VybyB3YXMgdXBzZXQsIGFzIHdlbGwgYXMgYnkgdGhlIGZhY3QgdGhhdCBQb21wZXkgbWFkZSBubyBncmVhdCB1c2Ugb2YgaGltLiBCdXQgaGUgd2FzIGhpbXNlbGYgdG8gYmxhbWUgZm9yIHRoaXMsIHNpbmNlIGhlIG1hZGUgbm8gZGVuaWFsIHRoYXQgaGUgd2FzIHNvcnJ5IGhlIGhhZCBjb21lLCBtYWRlIGxpZ2h0IG9mIFBvbXBleSdzIHByZXBhcmF0aW9ucyBhbmQgc2hvd2VkIGEgbHVya2luZyBkaXNwbGVhc3VyZSBhdCBoaXMgcGxhbnMsIGFuZCBkaWQgbm90IHJlZnJhaW4gZnJvbSBqZXN0cyBhbmQgd2l0dHkgcmVtYXJrcyBhYm91dCBoaXMgY29tcmFkZXMgaW4gYXJtczsgbmF5LCBhbHRob3VnaCBoZSBoaW1zZWxmIGFsd2F5cyB3ZW50IGFib3V0IGluIHRoZSBjYW1wIHdpdGhvdXQgYSBzbWlsZSBhbmQgc2Nvd2xpbmcsIHN0aWxsIGhlIG1hZGUgb3RoZXJzIGxhdWdoIGluIHNwaXRlIG9mIHRoZW1zZWx2ZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3aWxsIGJlIHdlbGwgdG8gZ2l2ZSBhIGZldyBpbnN0YW5jZXMgb2YgdGhpcyBhbHNvLiBXaGVuIERvbWl0aXVzLCB0aGVuLCB3YXMgYWR2YW5jaW5nIHRvIGEgcG9zdCBvZiBjb21tYW5kIGEgbWFuIHdobyB3YXMgbm8gc29sZGllciwgd2l0aCB0aGUgcmVtYXJrIHRoYXQgaGUgd2FzIGdlbnRsZSBpbiBoaXMgZGlzcG9zaXRpb24gYW5kIHBydWRlbnQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHksIHRoZW4sPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRvIHlvdSBub3Qga2VlcCBoaW0gYXMgYSBndWFyZGlhbiBvZiB5b3VyIGNoaWxkcmVuPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGNlcnRhaW4gb25lcyB3ZXJlIHByYWlzaW5nIFRoZW9waGFuZXMgdGhlIExlc2JpYW4sIHdobyB3YXMgcHJlZmVjdCBvZiBlbmdpbmVlcnMgaW4gdGhlIGNhbXAsIGJlY2F1c2UgaGUgaGFkIGdpdmVuIGV4Y2VsbGVudCBjb25zb2xhdGlvbiB0byB0aGUgUmhvZGlhbnMgb24gdGhlIGxvc3Mgb2YgdGhlaXIgZmxlZXQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGEgZ3JlYXQgYmxlc3NpbmcgaXQgaXMsPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRvIGhhdmUgYSBHcmVlayBhcyBwcmVmZWN0ITwvcT4gQWdhaW4sIHdoZW4gQ2Flc2FyIHdhcyBzdWNjZXNzZnVsIGZvciB0aGUgbW9zdCBwYXJ0IGFuZCBpbiBhIHdheSB3YXMgbGF5aW5nIHNpZWdlIHRvIHRoZW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBEeXJyaGFjaGl1bS4gU2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAzOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHh4eGl4LjwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy40MSIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLkMuPC90aXRsZT4gaWlpLiA0MS01NS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gTGVudHVsdXMgc2FpZCBoZSBoYWQgaGVhcmQgdGhhdCBDYWVzYXIncyBmcmllbmRzIHdlcmUgZ2xvb215LCB0byB3aGljaCBDaWNlcm8gcmVwbGllZDogCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAzOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHh4eGl4LjwvYmlibD47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4eHhpeC48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuNDEiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi5DLjwvdGl0bGU+IGlpaS4gNDEtNTUuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLkMuPC90aXRsZT4gaWlpLiA0MS01NS48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdSBtZWFuIHRoYXQgdGhleSBhcmUgaWxsLWRpc3Bvc2VkIHRvIENhZXNhci48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['38.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGEgY2VydGFpbiBNYXJjaXVzLCB3aG8gaGFkIHJlY2VudGx5IGNvbWUgZnJvbSBJdGFseSwgc3Bva2Ugb2YgYSByZXBvcnQgd2hpY2ggcHJldmFpbGVkIGluIFJvbWUgdGhhdCBQb21wZXkgd2FzIGJlc2llZ2VkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHRoZW4sPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpZCB5b3Ugc2FpbCBvZmYgdGhhdCB5b3UgbWlnaHQgc2VlIHdpdGggeW91ciBvd24gZXllcyBhbmQgYmVsaWV2ZT88L3E+IEFnYWluLCBhZnRlciB0aGUgZGVmZWF0LCB3aGVuIE5vbm5pdXMgc2FpZCB0aGV5IG91Z2h0IHRvIGhhdmUgZ29vZCBob3Blcywgc2luY2Ugc2V2ZW4gZWFnbGVzIHdlcmUgbGVmdCBpbiB0aGUgY2FtcCBvZiBQb21wZXksIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3VyIGFkdmljZSB3b3VsZCBiZSBnb29kLDwvcT4gc2FpZCBDaWNlcm8sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiB3ZSB3ZXJlIGF0IHdhciB3aXRoIGphY2tkYXdzLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIExhYmllbnVzLCBpbnNpc3Rpbmcgb24gY2VydGFpbiBvcmFjbGVzLCBzYWlkIHRoYXQgUG9tcGV5IG11c3QgcHJldmFpbCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcyw8L3E+IHNhaWQgQ2ljZXJvLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhpcyBpcyB0aGUgZ2VuZXJhbHNoaXAgdGhhdCBoYXMgbm93IGNvc3QgdXMgb3VyIGNhbXAuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhZnRlciB0aGUgYmF0dGxlIGF0IFBoYXJzYWx1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBBdWd1c3QsIDQ4IEIuQy48L25vdGU+IGluIHdoaWNoIENpY2VybyB0b29rIG5vIHBhcnQgYmVjYXVzZSBvZiBpbGxuZXNzLCBoYWQgYmVlbiBmb3VnaHQsIGFuZCBQb21wZXkgd2FzIGluIGZsaWdodCwgQ2F0bywgd2hvIGhhZCBhIGNvbnNpZGVyYWJsZSBhcm15IGFuZCBhIGxhcmdlIGZsZWV0IGF0IER5cnJoYWNoaXVtLCBhc2tlZCBDaWNlcm8gdG8gdGFrZSB0aGUgY29tbWFuZCBpbiBhY2NvcmRhbmNlIHdpdGggY3VzdG9tIGFuZCBiZWNhdXNlIG9mIGhpcyBzdXBlcmlvciBjb25zdWxhciByYW5rLiBCdXQgQ2ljZXJvIHJlamVjdGVkIHRoZSBjb21tYW5kIGFuZCB3YXMgYWx0b2dldGhlciBhdmVyc2UgdG8gc2hhcmluZyBpbiB0aGUgY2FtcGFpZ24sIHdoZXJldXBvbiBoZSBjYW1lIG5lYXIgYmVpbmcga2lsbGVkOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgdGhlIHlvdW5nIFBvbXBleSBhbmQgaGlzIGZyaWVuZHMgY2FsbGVkIGhpbSBhIHRyYWl0b3IgYW5kIGRyZXcgdGhlaXIgc3dvcmRzIHVwb24gaGltLCBhbmQgdGhhdCB3b3VsZCBoYXZlIGJlZW4gdGhlIGVuZCBvZiBoaW0gaGFkIG5vdCBDYXRvIGludGVycG9zZWQgYW5kIHdpdGggZGlmZmljdWx0eSByZXNjdWVkIGhpbSBhbmQgc2VudCBoaW0gYXdheSBmcm9tIHRoZSBjYW1wLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNTUuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIHRoZSBZb3VuZ2VyPC90aXRsZT4sIGx2LiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBTbyBDaWNlcm8gcHV0IGluIGF0IEJydW5kaXNpdW0gYW5kIHRhcnJpZWQgdGhlcmUsIHdhaXRpbmcgZm9yIENhZXNhciwgd2hvIHdhcyBkZWxheWVkIGJ5IGhpcyBhZmZhaXJzIGluIEFzaWEgYW5kIEVneXB0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB3b3JkIHdhcyBicm91Z2h0IHRoYXQgQ2Flc2FyIGhhZCBsYW5kZWQgYXQgVGFyZW50dW08bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBTZXB0ZW1iZXIsIDQ3IEIuQy48L25vdGU+IGFuZCB3YXMgY29taW5nIHJvdW5kIGJ5IGxhbmQgZnJvbSB0aGVyZSB0byBCcnVuZGlzaXVtLCBDaWNlcm8gaGFzdGVuZWQgdG8gbWVldCBoaW0sIGJlaW5nIG5vdCBhbHRvZ2V0aGVyIGRlc3BvbmRlbnQsIGJ1dCBmZWVsaW5nIHNoYW1lIHRvIHRlc3QgaW4gdGhlIHByZXNlbmNlIG9mIG1hbnkgd2l0bmVzc2VzIHRoZSB0ZW1wZXIgb2YgYSBtYW4gd2hvIHdhcyBhbiBlbmVteSBhbmQgdmljdG9yaW91cy4gSG93ZXZlciwgdGhlcmUgd2FzIG5vIG5lZWQgdGhhdCBoZSBzaG91bGQgZG8gb3Igc2F5IGFueXRoaW5nIHVud29ydGh5IG9mIGhpbXNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBDYWVzYXIsIHdoZW4gaGUgc2F3IGhpbSBhcHByb2FjaGluZyBmYXIgaW4gYWR2YW5jZSBvZiB0aGUgcmVzdCwgZ290IGRvd24gYW5kIGVtYnJhY2VkIGhpbSBhbmQgam91cm5leWVkIG9uIGZvciBtYW55IGZ1cmxvbmdzIGNvbnZlcnNpbmcgd2l0aCBoaW0gYWxvbmUuIEFuZCBhZnRlciB0aGlzIGhlIGNvbnRpbnVlZCB0byBzaG93IGhpbSBob25vdXIgYW5kIGtpbmRuZXNzLCBzbyB0aGF0IGluIGhpcyByZXBseSB0byB0aGUgZW5jb21pdW0gdXBvbiBDYXRvIHdoaWNoIENpY2VybyB3cm90ZSBoZSBwcmFpc2VkIENpY2VybydzIGVsb3F1ZW5jZSBhbmQgaGlzIGxpZmUsIGFzIG1vc3QgcmVzZW1ibGluZyB0aGF0IG9mIFBlcmljbGVzIGFuZCBUaGVyYW1lbmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBkaXNjb3Vyc2Ugb2YgQ2ljZXJvIHdhcyBlbnRpdGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhdG8sPC9xPiBhbmQgdGhhdCBvZiBDYWVzYXIgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbnRpLUNhdG8uPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYWZ0ZXIgdGhlIGJhdHRsZSBhdCBQaGFyc2FsdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBBdWd1c3QsIDQ4IEIuQy48L25vdGU+IGluIHdoaWNoIENpY2VybyB0b29rIG5vIHBhcnQgYmVjYXVzZSBvZiBpbGxuZXNzLCBoYWQgYmVlbiBmb3VnaHQsIGFuZCBQb21wZXkgd2FzIGluIGZsaWdodCwgQ2F0bywgd2hvIGhhZCBhIGNvbnNpZGVyYWJsZSBhcm15IGFuZCBhIGxhcmdlIGZsZWV0IGF0IER5cnJoYWNoaXVtLCBhc2tlZCBDaWNlcm8gdG8gdGFrZSB0aGUgY29tbWFuZCBpbiBhY2NvcmRhbmNlIHdpdGggY3VzdG9tIGFuZCBiZWNhdXNlIG9mIGhpcyBzdXBlcmlvciBjb25zdWxhciByYW5rLiBCdXQgQ2ljZXJvIHJlamVjdGVkIHRoZSBjb21tYW5kIGFuZCB3YXMgYWx0b2dldGhlciBhdmVyc2UgdG8gc2hhcmluZyBpbiB0aGUgY2FtcGFpZ24sIHdoZXJldXBvbiBoZSBjYW1lIG5lYXIgYmVpbmcga2lsbGVkOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciB0aGUgeW91bmcgUG9tcGV5IGFuZCBoaXMgZnJpZW5kcyBjYWxsZWQgaGltIGEgdHJhaXRvciBhbmQgZHJldyB0aGVpciBzd29yZHMgdXBvbiBoaW0sIGFuZCB0aGF0IHdvdWxkIGhhdmUgYmVlbiB0aGUgZW5kIG9mIGhpbSBoYWQgbm90IENhdG8gaW50ZXJwb3NlZCBhbmQgd2l0aCBkaWZmaWN1bHR5IHJlc2N1ZWQgaGltIGFuZCBzZW50IGhpbSBhd2F5IGZyb20gdGhlIGNhbXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNTUuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIFlvdW5nZXI8L3RpdGxlPiwgbHYuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFNvIENpY2VybyBwdXQgaW4gYXQgQnJ1bmRpc2l1bSBhbmQgdGFycmllZCB0aGVyZSwgd2FpdGluZyBmb3IgQ2Flc2FyLCB3aG8gd2FzIGRlbGF5ZWQgYnkgaGlzIGFmZmFpcnMgaW4gQXNpYSBhbmQgRWd5cHQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNTUuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIFlvdW5nZXI8L3RpdGxlPiwgbHYuIDMuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIHRoZSBZb3VuZ2VyPC90aXRsZT4sIGx2LiAzLjwvdHJhbnNsYXRpb24+"
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHdvcmQgd2FzIGJyb3VnaHQgdGhhdCBDYWVzYXIgaGFkIGxhbmRlZCBhdCBUYXJlbnR1bTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gU2VwdGVtYmVyLCA0NyBCLkMuPC9ub3RlPiBhbmQgd2FzIGNvbWluZyByb3VuZCBieSBsYW5kIGZyb20gdGhlcmUgdG8gQnJ1bmRpc2l1bSwgQ2ljZXJvIGhhc3RlbmVkIHRvIG1lZXQgaGltLCBiZWluZyBub3QgYWx0b2dldGhlciBkZXNwb25kZW50LCBidXQgZmVlbGluZyBzaGFtZSB0byB0ZXN0IGluIHRoZSBwcmVzZW5jZSBvZiBtYW55IHdpdG5lc3NlcyB0aGUgdGVtcGVyIG9mIGEgbWFuIHdobyB3YXMgYW4gZW5lbXkgYW5kIHZpY3RvcmlvdXMuIEhvd2V2ZXIsIHRoZXJlIHdhcyBubyBuZWVkIHRoYXQgaGUgc2hvdWxkIGRvIG9yIHNheSBhbnl0aGluZyB1bndvcnRoeSBvZiBoaW1zZWxmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBDYWVzYXIsIHdoZW4gaGUgc2F3IGhpbSBhcHByb2FjaGluZyBmYXIgaW4gYWR2YW5jZSBvZiB0aGUgcmVzdCwgZ290IGRvd24gYW5kIGVtYnJhY2VkIGhpbSBhbmQgam91cm5leWVkIG9uIGZvciBtYW55IGZ1cmxvbmdzIGNvbnZlcnNpbmcgd2l0aCBoaW0gYWxvbmUuIEFuZCBhZnRlciB0aGlzIGhlIGNvbnRpbnVlZCB0byBzaG93IGhpbSBob25vdXIgYW5kIGtpbmRuZXNzLCBzbyB0aGF0IGluIGhpcyByZXBseSB0byB0aGUgZW5jb21pdW0gdXBvbiBDYXRvIHdoaWNoIENpY2VybyB3cm90ZSBoZSBwcmFpc2VkIENpY2VybydzIGVsb3F1ZW5jZSBhbmQgaGlzIGxpZmUsIGFzIG1vc3QgcmVzZW1ibGluZyB0aGF0IG9mIFBlcmljbGVzIGFuZCBUaGVyYW1lbmVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGRpc2NvdXJzZSBvZiBDaWNlcm8gd2FzIGVudGl0bGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYXRvLDwvcT4gYW5kIHRoYXQgb2YgQ2Flc2FyIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbnRpLUNhdG8uPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IGlzIHNhaWQgYWxzbyB0aGF0IHdoZW4gUXVpbnR1cyBMaWdhcml1cyB3YXMgdW5kZXIgcHJvc2VjdXRpb24gYmVjYXVzZSBoZSBoYWQgYmVlbiBvbmUgb2YgdGhlIGVuZW1pZXMgb2YgQ2Flc2FyLCBhbmQgQ2ljZXJvIHdhcyBoaXMgYWR2b2NhdGUsIENhZXNhciBzYWlkIHRvIGhpcyBmcmllbmRzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBpcyB0byBwcmV2ZW50IG91ciBoZWFyaW5nIGEgc3BlZWNoIGZyb20gQ2ljZXJvIGFmdGVyIGFsbCB0aGlzIHdoaWxlLCBzaW5jZSBMaWdhcml1cyBoYXMgbG9uZyBiZWVuIGFkanVkZ2VkIGEgdmlsbGFpbiBhbmQgYW4gZW5lbXk/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gQ2ljZXJvIGhhZCBiZWd1biB0byBzcGVhayBhbmQgd2FzIG1vdmluZyBoaXMgaGVhcmVycyBiZXlvbmQgbWVhc3VyZSwgYW5kIGhpcyBzcGVlY2gsIGFzIGl0IHByb2NlZWRlZCwgc2hvd2VkIHZhcnlpbmcgcGF0aG9zIGFuZCBhbWF6aW5nIGdyYWNlLCBDYWVzYXIncyBmYWNlIG9mdGVuIGNoYW5nZWQgY29sb3VyIGFuZCBpdCB3YXMgbWFuaWZlc3QgdGhhdCBhbGwgdGhlIGVtb3Rpb25zIG9mIGhpcyBzb3VsIHdlcmUgc3RpcnJlZDsgYW5kIGF0IGxhc3QsIHdoZW4gdGhlIG9yYXRvciB0b3VjaGVkIHVwb24gdGhlIHN0cnVnZ2xlcyBhdCBQaGFyc2FsdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIExpZy4gMjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+cHJvIExpZ2FyaW88L3RpdGxlPiwgOSwgMjcgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGUgd2FzIHNvIGdyZWF0bHkgYWZmZWN0ZWQgdGhhdCBoaXMgYm9keSBzaG9vayBhbmQgaGUgZHJvcHBlZCBmcm9tIGhpcyBoYW5kIHNvbWUgb2YgaGlzIGRvY3VtZW50cy4gQXQgYW55IHJhdGUgaGUgYWNxdWl0dGVkIExpZ2FyaXVzIHVuZGVyIGNvbXB1bHNpb24uCgkJCTwvcD4KICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGlzIHRvIHByZXZlbnQgb3VyIGhlYXJpbmcgYSBzcGVlY2ggZnJvbSBDaWNlcm8gYWZ0ZXIgYWxsIHRoaXMgd2hpbGUsIHNpbmNlIExpZ2FyaXVzIGhhcyBsb25nIGJlZW4gYWRqdWRnZWQgYSB2aWxsYWluIGFuZCBhbiBlbmVteT88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIENpY2VybyBoYWQgYmVndW4gdG8gc3BlYWsgYW5kIHdhcyBtb3ZpbmcgaGlzIGhlYXJlcnMgYmV5b25kIG1lYXN1cmUsIGFuZCBoaXMgc3BlZWNoLCBhcyBpdCBwcm9jZWVkZWQsIHNob3dlZCB2YXJ5aW5nIHBhdGhvcyBhbmQgYW1hemluZyBncmFjZSwgQ2Flc2FyJ3MgZmFjZSBvZnRlbiBjaGFuZ2VkIGNvbG91ciBhbmQgaXQgd2FzIG1hbmlmZXN0IHRoYXQgYWxsIHRoZSBlbW90aW9ucyBvZiBoaXMgc291bCB3ZXJlIHN0aXJyZWQ7IGFuZCBhdCBsYXN0LCB3aGVuIHRoZSBvcmF0b3IgdG91Y2hlZCB1cG9uIHRoZSBzdHJ1Z2dsZXMgYXQgUGhhcnNhbHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gTGlnLiAyNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBybyBMaWdhcmlvPC90aXRsZT4sIDksIDI3IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhlIHdhcyBzbyBncmVhdGx5IGFmZmVjdGVkIHRoYXQgaGlzIGJvZHkgc2hvb2sgYW5kIGhlIGRyb3BwZWQgZnJvbSBoaXMgaGFuZCBzb21lIG9mIGhpcyBkb2N1bWVudHMuIEF0IGFueSByYXRlIGhlIGFjcXVpdHRlZCBMaWdhcml1cyB1bmRlciBjb21wdWxzaW9uLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIExpZy4gMjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5wcm8gTGlnYXJpbzwvdGl0bGU+LCA5LCAyNyBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIExpZ2FyaW88L3RpdGxlPiwgOSwgMjcgZi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCB3aGVuIHRoZSBnb3Zlcm5tZW50IGhhZCBiZWVuIGNoYW5nZWQgdG8gYSBtb25hcmNoeSwgQ2ljZXJvIGFic3RhaW5lZCBmcm9tIHB1YmxpYyBhZmZhaXJzIGFuZCBkZXZvdGVkIGhpcyB0aW1lIHRvIHRob3NlIG9mIHRoZSB5b3VuZyBtZW4gd2hvIHdpc2hlZCB0byBzdHVkeSBwaGlsb3NvcGh5LCBhbmQgbWFpbmx5IGZyb20gaGlzIGludGltYWN5IHdpdGggdGhlc2UsIHNpbmNlIHRoZXkgd2VyZSBvZiB0aGUgaGlnaGVzdCBiaXJ0aCBhbmQgc3RhbmRpbmcsIGhlIHdhcyBvbmNlIG1vcmUgdmVyeSBpbmZsdWVudGlhbCBpbiB0aGUgc3RhdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIG1hZGUgaXQgaGlzIGJ1c2luZXNzIGFsc28gdG8gY29tcG9zZSBhbmQgdHJhbnNsYXRlIHBoaWxvc29waGljYWwgZGlhbG9ndWVzLCBhbmQgdG8gcmVuZGVyIGludG8gTGF0aW4gdGhlIHNldmVyYWwgdGVybXMgb2YgZGlhbGVjdGljcyBhbmQgbmF0dXJhbCBwaGlsb3NvcGh5OyBmb3IgaGUgaXQgd2FzLCBhcyB0aGV5IHNheSwgd2hvIGZpcnN0LCBvciBwcmluY2lwYWxseSwgcHJvdmlkZWQgTGF0aW4gbmFtZXMgZm9yIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGhhbnRhc2lhLDwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnN5bmthdGF0aGVzaXMsPC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXBva2hlLDwvcT4gYW5kIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+a2F0YWxlcHNpcyw8L3E+IGFzIHdlbGwgYXMgZm9yIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXRvbW9uLDwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFtZXJlcyw8L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5rZXJ0b24sPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBMYXRpbiwgcmVzcGVjdGl2ZWx5LCA8Zm9yZWlnbiBsYW5nPSJsYSI+dmlzdW08L2ZvcmVpZ24+ICg8Z2xvc3M+Y29uY2VwdGlvbjwvZ2xvc3M+KSwgPGZvcmVpZ24gbGFuZz0ibGEiPmFzc2Vuc2lvPC9mb3JlaWduPiAoPGdsb3NzPmFzc2VudDwvZ2xvc3M+KSwgPGZvcmVpZ24gbGFuZz0ibGEiPmFzc2Vuc2lvbmlzIHJldGVudGlvPC9mb3JlaWduPiAoPGdsb3NzPndpdGhob2xkaW5nIG9mIGFzc2VudDwvZ2xvc3M+KSwgPGZvcmVpZ24gbGFuZz0ibGEiPmNvbXByZWhlbnNpbzwvZm9yZWlnbj4gKDxnbG9zcz5wZXJjZXB0aW9uPC9nbG9zcz4pLCA8Zm9yZWlnbiBsYW5nPSJsYSI+aW5kaXZpZHV1bTwvZm9yZWlnbj4gKDxnbG9zcz5hdG9tPC9nbG9zcz4pLCA8Zm9yZWlnbiBsYW5nPSJsYSI+dmFjdXVtPC9mb3JlaWduPiAoPGdsb3NzPnZvaWQ8L2dsb3NzPik7IAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+YW1lcmVzPC9mb3JlaWduPgogICAgICAgICAgICAgICA8L3E+ICg8Z2xvc3M+aW5kaXZpc2libGU8L2dsb3NzPiksIHdpdGggaXRzIExhdGluIGVxdWl2YWxlbnQsIGRvZXMgbm90IG9jY3VyIGluIHRoZSBleHRhbnQgd29ya3Mgb2YgQ2ljZXJvIChHdWRlbWFuKS48L25vdGU+IGFuZCBtYW55IG90aGVycyBsaWtlIHRoZXNlLCBjb250cml2aW5nIHBhcnRseSBieSBtZXRhcGhvcnMgYW5kIHBhcnRseSBieSBuZXcgYW5kIGZpdHRpbmcgdGVybXMgdG8gbWFrZSB0aGVtIGludGVsbGlnaWJsZSBhbmQgZmFtaWxpYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBmYWNpbGl0eSBpbiB2ZXJzZS1tYWtpbmcsIHRvbywgaGUgZW1wbG95ZWQgdG8gZGl2ZXJ0IGhpbXNlbGYuIEl0IGlzIHNhaWQsIGluZGVlZCwgdGhhdCB3aGVuIGhlIGFwcGxpZWQgaGltc2VsZiB0byBzdWNoIHdvcmssIGhlIHdvdWxkIG1ha2UgZml2ZSBodW5kcmVkIHZlcnNlcyBpbiBhIG5pZ2h0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgd2hlbiB0aGUgZ292ZXJubWVudCBoYWQgYmVlbiBjaGFuZ2VkIHRvIGEgbW9uYXJjaHksIENpY2VybyBhYnN0YWluZWQgZnJvbSBwdWJsaWMgYWZmYWlycyBhbmQgZGV2b3RlZCBoaXMgdGltZSB0byB0aG9zZSBvZiB0aGUgeW91bmcgbWVuIHdobyB3aXNoZWQgdG8gc3R1ZHkgcGhpbG9zb3BoeSwgYW5kIG1haW5seSBmcm9tIGhpcyBpbnRpbWFjeSB3aXRoIHRoZXNlLCBzaW5jZSB0aGV5IHdlcmUgb2YgdGhlIGhpZ2hlc3QgYmlydGggYW5kIHN0YW5kaW5nLCBoZSB3YXMgb25jZSBtb3JlIHZlcnkgaW5mbHVlbnRpYWwgaW4gdGhlIHN0YXRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIG1hZGUgaXQgaGlzIGJ1c2luZXNzIGFsc28gdG8gY29tcG9zZSBhbmQgdHJhbnNsYXRlIHBoaWxvc29waGljYWwgZGlhbG9ndWVzLCBhbmQgdG8gcmVuZGVyIGludG8gTGF0aW4gdGhlIHNldmVyYWwgdGVybXMgb2YgZGlhbGVjdGljcyBhbmQgbmF0dXJhbCBwaGlsb3NvcGh5OyBmb3IgaGUgaXQgd2FzLCBhcyB0aGV5IHNheSwgd2hvIGZpcnN0LCBvciBwcmluY2lwYWxseSwgcHJvdmlkZWQgTGF0aW4gbmFtZXMgZm9yIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waGFudGFzaWEsPC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zeW5rYXRhdGhlc2lzLDwvcT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXBva2hlLDwvcT4gYW5kIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5rYXRhbGVwc2lzLDwvcT4gYXMgd2VsbCBhcyBmb3IgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmF0b21vbiw8L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFtZXJlcyw8L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmtlcnRvbiw8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gTGF0aW4sIHJlc3BlY3RpdmVseSwgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dmlzdW08L2ZvcmVpZ24+ICg8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5jb25jZXB0aW9uPC9nbG9zcz4pLCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5hc3NlbnNpbzwvZm9yZWlnbj4gKDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPmFzc2VudDwvZ2xvc3M+KSwgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+YXNzZW5zaW9uaXMgcmV0ZW50aW88L2ZvcmVpZ24+ICg8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj53aXRoaG9sZGluZyBvZiBhc3NlbnQ8L2dsb3NzPiksIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbXByZWhlbnNpbzwvZm9yZWlnbj4gKDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPnBlcmNlcHRpb248L2dsb3NzPiksIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmluZGl2aWR1dW08L2ZvcmVpZ24+ICg8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5hdG9tPC9nbG9zcz4pLCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj52YWN1dW08L2ZvcmVpZ24+ICg8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj52b2lkPC9nbG9zcz4pOyAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5hbWVyZXM8L2ZvcmVpZ24+CiAgICAgICAgICAgICAgIDwvcT4gKDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPmluZGl2aXNpYmxlPC9nbG9zcz4pLCB3aXRoIGl0cyBMYXRpbiBlcXVpdmFsZW50LCBkb2VzIG5vdCBvY2N1ciBpbiB0aGUgZXh0YW50IHdvcmtzIG9mIENpY2VybyAoR3VkZW1hbikuPC9ub3RlPiBhbmQgbWFueSBvdGhlcnMgbGlrZSB0aGVzZSwgY29udHJpdmluZyBwYXJ0bHkgYnkgbWV0YXBob3JzIGFuZCBwYXJ0bHkgYnkgbmV3IGFuZCBmaXR0aW5nIHRlcm1zIHRvIG1ha2UgdGhlbSBpbnRlbGxpZ2libGUgYW5kIGZhbWlsaWFyLiAKCQkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnZpc3VtPC9mb3JlaWduPiAoPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Y29uY2VwdGlvbjwvZ2xvc3M+KSwgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+YXNzZW5zaW88L2ZvcmVpZ24+ICg8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5hc3NlbnQ8L2dsb3NzPiksIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmFzc2Vuc2lvbmlzIHJldGVudGlvPC9mb3JlaWduPiAoPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+d2l0aGhvbGRpbmcgb2YgYXNzZW50PC9nbG9zcz4pLCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21wcmVoZW5zaW88L2ZvcmVpZ24+ICg8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5wZXJjZXB0aW9uPC9nbG9zcz4pLCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbmRpdmlkdXVtPC9mb3JlaWduPiAoPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YXRvbTwvZ2xvc3M+KSwgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dmFjdXVtPC9mb3JlaWduPiAoPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+dm9pZDwvZ2xvc3M+KTsgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+YW1lcmVzPC9mb3JlaWduPgogICAgICAgICAgICAgICA8L3E+ICg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5hbWVyZXM8L2ZvcmVpZ24+CiAgICAgICAgICAgICAgIDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPmluZGl2aXNpYmxlPC9nbG9zcz4pLCB3aXRoIGl0cyBMYXRpbiBlcXVpdmFsZW50LCBkb2VzIG5vdCBvY2N1ciBpbiB0aGUgZXh0YW50IHdvcmtzIG9mIENpY2VybyAoR3VkZW1hbikuPC90cmFuc2xhdGlvbj4="
translation['40.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBmYWNpbGl0eSBpbiB2ZXJzZS1tYWtpbmcsIHRvbywgaGUgZW1wbG95ZWQgdG8gZGl2ZXJ0IGhpbXNlbGYuIEl0IGlzIHNhaWQsIGluZGVlZCwgdGhhdCB3aGVuIGhlIGFwcGxpZWQgaGltc2VsZiB0byBzdWNoIHdvcmssIGhlIHdvdWxkIG1ha2UgZml2ZSBodW5kcmVkIHZlcnNlcyBpbiBhIG5pZ2h0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkR1cmluZyB0aGlzIHRpbWUsIHRoZW4sIGhlIGxpdmVkIGZvciB0aGUgbW9zdCBwYXJ0IGF0IGhpcyBjb3VudHJ5LXNlYXQgaW4gVHVzY3VsdW0sIGFuZCBoZSB1c2VkIHRvIHdyaXRlIHRvIGhpcyBmcmllbmRzIHRoYXQgaGUgd2FzIGxpdmluZyB0aGUgbGlmZSBvZiBMYWVydGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDEuMTg5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCBpLiAxODkgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGVpdGhlciBqZXN0aW5nLCBhcyB3YXMgaGlzIHdvbnQsIG9yIGJlY2F1c2UgaGlzIGFtYml0aW9uIGZpbGxlZCBoaW0gd2l0aCBhIGRlc2lyZSBmb3IgcHVibGljIGFjdGl2aXR5IGFuZCBtYWRlIGhpbSBkaXNzYXRpc2ZpZWQgd2l0aCB0aGUgdHVybiB0aGluZ3MgaGFkIHRha2VuLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHJhcmVseSB3ZW50IGRvd24gdG8gdGhlIGNpdHksIGFuZCB0aGVuIG9ubHkgdG8gcGF5IGNvdXJ0IHRvIENhZXNhciwgYW5kIGhlIHdhcyBmb3JlbW9zdCBhbW9uZyB0aG9zZSB3aG8gYWR2b2NhdGVkIENhZXNhcidzIGhvbm91cnMgYW5kIHdlcmUgZWFnZXIgdG8gYmUgZXZlciBzYXlpbmcgc29tZXRoaW5nIG5ldyBhYm91dCBoaW0gYW5kIGhpcyBtZWFzdXJlcy4gT2YgdGhpcyBzb3J0IGlzIHdoYXQgaGUgc2FpZCBhYm91dCB0aGUgc3RhdHVlcyBvZiBQb21wZXkuIFRoZXNlIENhZXNhciBvcmRlcmVkIHRvIGJlIHNldCB1cCBhZ2FpbiBhZnRlciB0aGV5IGhhZCBiZWVuIHRocm93biBkb3duIGFuZCB0YWtlbiBhd2F5OyBhbmQgdGhleSB3ZXJlIHNldCB1cCBhZ2Fpbi4gV2hhdCBDaWNlcm8gc2FpZCB3YXMgdGhhdCBieSB0aGlzIGFjdCBvZiBnZW5lcm9zaXR5IENhZXNhciBkaWQgaW5kZWVkIHNldCB1cCB0aGUgc3RhdHVlcyBvZiBQb21wZXksIGJ1dCBmaXJtbHkgcGxhbnRlZCBoaXMgb3duIGFsc28uCgkJCTwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gMS4xODkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGkuIDE4OSBmZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gZWl0aGVyIGplc3RpbmcsIGFzIHdhcyBoaXMgd29udCwgb3IgYmVjYXVzZSBoaXMgYW1iaXRpb24gZmlsbGVkIGhpbSB3aXRoIGEgZGVzaXJlIGZvciBwdWJsaWMgYWN0aXZpdHkgYW5kIG1hZGUgaGltIGRpc3NhdGlzZmllZCB3aXRoIHRoZSB0dXJuIHRoaW5ncyBoYWQgdGFrZW4uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gMS4xODkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGkuIDE4OSBmZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaS4gMTg5IGZmLjwvdHJhbnNsYXRpb24+"
translation['40.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHJhcmVseSB3ZW50IGRvd24gdG8gdGhlIGNpdHksIGFuZCB0aGVuIG9ubHkgdG8gcGF5IGNvdXJ0IHRvIENhZXNhciwgYW5kIGhlIHdhcyBmb3JlbW9zdCBhbW9uZyB0aG9zZSB3aG8gYWR2b2NhdGVkIENhZXNhcidzIGhvbm91cnMgYW5kIHdlcmUgZWFnZXIgdG8gYmUgZXZlciBzYXlpbmcgc29tZXRoaW5nIG5ldyBhYm91dCBoaW0gYW5kIGhpcyBtZWFzdXJlcy4gT2YgdGhpcyBzb3J0IGlzIHdoYXQgaGUgc2FpZCBhYm91dCB0aGUgc3RhdHVlcyBvZiBQb21wZXkuIFRoZXNlIENhZXNhciBvcmRlcmVkIHRvIGJlIHNldCB1cCBhZ2FpbiBhZnRlciB0aGV5IGhhZCBiZWVuIHRocm93biBkb3duIGFuZCB0YWtlbiBhd2F5OyBhbmQgdGhleSB3ZXJlIHNldCB1cCBhZ2Fpbi4gV2hhdCBDaWNlcm8gc2FpZCB3YXMgdGhhdCBieSB0aGlzIGFjdCBvZiBnZW5lcm9zaXR5IENhZXNhciBkaWQgaW5kZWVkIHNldCB1cCB0aGUgc3RhdHVlcyBvZiBQb21wZXksIGJ1dCBmaXJtbHkgcGxhbnRlZCBoaXMgb3duIGFsc28uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIHB1cnBvc2VkLCBhcyB3ZSBhcmUgdG9sZCwgdG8gd3JpdGUgYSBjb21wcmVoZW5zaXZlIGhpc3Rvcnkgb2YgaGlzIG5hdGl2ZSBjb3VudHJ5LCBjb21iaW5pbmcgd2l0aCBpdCBtYW55IEdyZWVrIGRldGFpbHMsIGFuZCBpbnRyb2R1Y2luZyB0aGVyZSBhbGwgdGhlIHRhbGVzIGFuZCBteXRocyB3aGljaCBoZSBoYWQgY29sbGVjdGVkOyBidXQgaGUgd2FzIHByZXZlbnRlZCBieSBtYW55IHB1YmxpYyBhZmZhaXJzIHdoaWNoIHdlcmUgY29udHJhcnkgdG8gaGlzIHdpc2hlcywgYW5kIGJ5IG1hbnkgcHJpdmF0ZSB0cm91YmxlcywgbW9zdCBvZiB3aGljaCBzZWVtIHRvIGhhdmUgYmVlbiBvZiBoaXMgb3duIGNob29zaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gdGhlIGZpcnN0IHBsYWNlIGhlIGRpdm9yY2VkIGhpcyB3aWZlIFRlcmVudGlhIGJlY2F1c2UgaGUgaGFkIGJlZW4gbmVnbGVjdGVkIGJ5IGhlciBkdXJpbmcgdGhlIHdhciwgc28gdGhhdCBoZSBzZXQgb3V0IGluIGxhY2sgb2YgdGhlIG5lY2Vzc2FyeSBtZWFucyBmb3IgaGlzIGpvdXJuZXksIGFuZCBldmVuIHdoZW4gaGUgY2FtZSBiYWNrIGFnYWluIHRvIEl0YWx5IGRpZCBub3QgZmluZCBoZXIgY29uc2lkZXJhdGUgb2YgaGltLiBGb3Igc2hlIGRpZCBub3QgY29tZSB0byBoaW0gaGVyc2VsZiwgYWx0aG91Z2ggaGUgdGFycmllZCBhIGxvbmcgdGltZSBhdCBCcnVuZGlzaXVtLCBhbmQgd2hlbiBoZXIgZGF1Z2h0ZXIsIGEgeW91bmcgZ2lybCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UdWxsaWEgd2FzIG9sZCBlbm91Z2ggdG8gaGF2ZSBsb3N0IGhlciBmaXJzdCBodXNiYW5kIGFuZCBtYXJyaWVkIGEgc2Vjb25kICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiA0MS41IiB2YWxpZD0ieWVzIj7CpyA1PC9iaWJsPikuPC9ub3RlPiBtYWRlIHRoZSBsb25nIGpvdXJuZXkgdGhpdGhlciwgc2hlIHN1cHBsaWVkIGhlciB3aXRoIG5vIGZpdHRpbmcgZXNjb3J0IGFuZCB3aXRoIG5vIG1lYW5zOyBuYXksIHNoZSBhY3R1YWxseSBzdHJpcHBlZCBhbmQgZW1wdGllZCBDaWNlcm8ncyBob3VzZSBvZiBhbGwgdGhhdCBpdCBjb250YWluZWQsIGJlc2lkZXMgaW5jdXJyaW5nIG1hbnkgbGFyZ2UgZGVidHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlLCBpbmRlZWQsIGFyZSB0aGUgbW9zdCBwbGF1c2libGUgcmVhc29ucyBnaXZlbiBmb3IgdGhlIGRpdm9yY2UuIFRlcmVudGlhLCBob3dldmVyLCBkZW5pZWQgdGhhdCB0aGVzZSB3ZXJlIHRoZSByZWFzb25zLCBhbmQgQ2ljZXJvIGhpbXNlbGYgbWFkZSBoZXIgZGVmZW5jZSBhIHRlbGxpbmcgb25lIGJ5IG1hcnJ5aW5nIHNob3J0bHkgYWZ0ZXJ3YXJkcyBhIG1haWRlbi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QdWJsaWxpYSwgb2YgcGF0cmljaWFuIGZhbWlseS48L25vdGU+IFRoaXMgaGUgZGlkLCBhcyBUZXJlbnRpYSBhc3NlcnRlZCwgb3V0IG9mIGxvdmUgZm9yIGhlciB5b3V0aGZ1bCBiZWF1dHk7IGJ1dCBhcyBUaXJvLCBDaWNlcm8ncyBmcmVlZG1hbiwgaGFzIHdyaXR0ZW4sIHRvIGdldCBtZWFucyBmb3IgdGhlIHBheW1lbnQgb2YgaGlzIGRlYnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGdpcmwgd2FzIHZlcnkgd2VhbHRoeSwgYW5kIENpY2VybyBoYWQgYmVlbiBsZWZ0IGhlciB0cnVzdGVlIGFuZCBoYWQgY2hhcmdlIG9mIGhlciBwcm9wZXJ0eS4gU28gc2luY2UgaGUgb3dlZCBtYW55IHRlbnMgb2YgdGhvdXNhbmRzIGhlIHdhcyBwZXJzdWFkZWQgYnkgaGlzIGZyaWVuZHMgYW5kIHJlbGF0aXZlcyB0byBtYXJyeSB0aGUgZ2lybCwgb2xkIGFzIGhlIHdhcywgYW5kIHRvIGdldCByaWQgb2YgaGlzIGNyZWRpdG9ycyBieSB1c2luZyBoZXIgbW9uZXkuIEJ1dCBBbnRvbnksIHdobyBzcG9rZSBvZiB0aGUgbWFycmlhZ2UgaW4gaGlzIHJlcGxpZXMgdG8gQ2ljZXJvJ3MgUGhpbGlwcGljcywgc2F5cyB0aGF0IGhlIGNhc3Qgb3V0IG9mIGRvb3JzIHRoZSB3aWZlIHdpdGggd2hvbSBoZSBoYWQgZ3Jvd24gb2xkLCBhbmQgYXQgdGhlIHNhbWUgdGltZSBtYWtlcyB3aXR0eSBqaWJlcyB1cG9uIHRoZSBzdGF5LWF0LWhvbWUgaGFiaXRzIG9mIENpY2Vybywgd2hvIHdhcywgaGUgc2FpZCwgdW5maXQgZm9yIGJ1c2luZXNzIG9yIG1pbGl0YXJ5IHNlcnZpY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdCBsb25nIGFmdGVyIENpY2VybydzIG1hcnJpYWdlIGhpcyBkYXVnaHRlciBkaWVkIGluIGNoaWxkLWJpcnRoIGF0IHRoZSBob3VzZSBvZiBMZW50dWx1cywgdG8gd2hvbSBzaGUgaGFkIGJlZW4gbWFycmllZCBhZnRlciB0aGUgZGVhdGggb2YgUGlzbywgaGVyIGZvcm1lciBodXNiYW5kLiBIaXMgZnJpZW5kcyBjYW1lIHRvZ2V0aGVyIGZyb20gYWxsIHF1YXJ0ZXJzIHRvIGNvbWZvcnQgQ2ljZXJvOyBidXQgaGlzIGdyaWVmIGF0IGhpcyBtaXNmb3J0dW5lIHdhcyBleGNlc3NpdmUsIHNvIHRoYXQgaGUgYWN0dWFsbHkgZGl2b3JjZWQgdGhlIHdpZmUgaGUgaGFkIHdlZGRlZCwgYmVjYXVzZSBzaGUgd2FzIHRob3VnaHQgdG8gYmUgcGxlYXNlZCBhdCB0aGUgZGVhdGggb2YgVHVsbGlhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['41.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgcHVycG9zZWQsIGFzIHdlIGFyZSB0b2xkLCB0byB3cml0ZSBhIGNvbXByZWhlbnNpdmUgaGlzdG9yeSBvZiBoaXMgbmF0aXZlIGNvdW50cnksIGNvbWJpbmluZyB3aXRoIGl0IG1hbnkgR3JlZWsgZGV0YWlscywgYW5kIGludHJvZHVjaW5nIHRoZXJlIGFsbCB0aGUgdGFsZXMgYW5kIG15dGhzIHdoaWNoIGhlIGhhZCBjb2xsZWN0ZWQ7IGJ1dCBoZSB3YXMgcHJldmVudGVkIGJ5IG1hbnkgcHVibGljIGFmZmFpcnMgd2hpY2ggd2VyZSBjb250cmFyeSB0byBoaXMgd2lzaGVzLCBhbmQgYnkgbWFueSBwcml2YXRlIHRyb3VibGVzLCBtb3N0IG9mIHdoaWNoIHNlZW0gdG8gaGF2ZSBiZWVuIG9mIGhpcyBvd24gY2hvb3NpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiB0aGUgZmlyc3QgcGxhY2UgaGUgZGl2b3JjZWQgaGlzIHdpZmUgVGVyZW50aWEgYmVjYXVzZSBoZSBoYWQgYmVlbiBuZWdsZWN0ZWQgYnkgaGVyIGR1cmluZyB0aGUgd2FyLCBzbyB0aGF0IGhlIHNldCBvdXQgaW4gbGFjayBvZiB0aGUgbmVjZXNzYXJ5IG1lYW5zIGZvciBoaXMgam91cm5leSwgYW5kIGV2ZW4gd2hlbiBoZSBjYW1lIGJhY2sgYWdhaW4gdG8gSXRhbHkgZGlkIG5vdCBmaW5kIGhlciBjb25zaWRlcmF0ZSBvZiBoaW0uIEZvciBzaGUgZGlkIG5vdCBjb21lIHRvIGhpbSBoZXJzZWxmLCBhbHRob3VnaCBoZSB0YXJyaWVkIGEgbG9uZyB0aW1lIGF0IEJydW5kaXNpdW0sIGFuZCB3aGVuIGhlciBkYXVnaHRlciwgYSB5b3VuZyBnaXJsLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VHVsbGlhIHdhcyBvbGQgZW5vdWdoIHRvIGhhdmUgbG9zdCBoZXIgZmlyc3QgaHVzYmFuZCBhbmQgbWFycmllZCBhIHNlY29uZCAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiA0MS41IiB2YWxpZD0ieWVzIj7CpyA1PC9iaWJsPikuPC9ub3RlPiBtYWRlIHRoZSBsb25nIGpvdXJuZXkgdGhpdGhlciwgc2hlIHN1cHBsaWVkIGhlciB3aXRoIG5vIGZpdHRpbmcgZXNjb3J0IGFuZCB3aXRoIG5vIG1lYW5zOyBuYXksIHNoZSBhY3R1YWxseSBzdHJpcHBlZCBhbmQgZW1wdGllZCBDaWNlcm8ncyBob3VzZSBvZiBhbGwgdGhhdCBpdCBjb250YWluZWQsIGJlc2lkZXMgaW5jdXJyaW5nIG1hbnkgbGFyZ2UgZGVidHMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiA0MS41IiB2YWxpZD0ieWVzIj7CpyA1PC9iaWJsPikuPC90cmFuc2xhdGlvbj4="
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlLCBpbmRlZWQsIGFyZSB0aGUgbW9zdCBwbGF1c2libGUgcmVhc29ucyBnaXZlbiBmb3IgdGhlIGRpdm9yY2UuIFRlcmVudGlhLCBob3dldmVyLCBkZW5pZWQgdGhhdCB0aGVzZSB3ZXJlIHRoZSByZWFzb25zLCBhbmQgQ2ljZXJvIGhpbXNlbGYgbWFkZSBoZXIgZGVmZW5jZSBhIHRlbGxpbmcgb25lIGJ5IG1hcnJ5aW5nIHNob3J0bHkgYWZ0ZXJ3YXJkcyBhIG1haWRlbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlB1YmxpbGlhLCBvZiBwYXRyaWNpYW4gZmFtaWx5Ljwvbm90ZT4gVGhpcyBoZSBkaWQsIGFzIFRlcmVudGlhIGFzc2VydGVkLCBvdXQgb2YgbG92ZSBmb3IgaGVyIHlvdXRoZnVsIGJlYXV0eTsgYnV0IGFzIFRpcm8sIENpY2VybydzIGZyZWVkbWFuLCBoYXMgd3JpdHRlbiwgdG8gZ2V0IG1lYW5zIGZvciB0aGUgcGF5bWVudCBvZiBoaXMgZGVidHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['41.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZ2lybCB3YXMgdmVyeSB3ZWFsdGh5LCBhbmQgQ2ljZXJvIGhhZCBiZWVuIGxlZnQgaGVyIHRydXN0ZWUgYW5kIGhhZCBjaGFyZ2Ugb2YgaGVyIHByb3BlcnR5LiBTbyBzaW5jZSBoZSBvd2VkIG1hbnkgdGVucyBvZiB0aG91c2FuZHMgaGUgd2FzIHBlcnN1YWRlZCBieSBoaXMgZnJpZW5kcyBhbmQgcmVsYXRpdmVzIHRvIG1hcnJ5IHRoZSBnaXJsLCBvbGQgYXMgaGUgd2FzLCBhbmQgdG8gZ2V0IHJpZCBvZiBoaXMgY3JlZGl0b3JzIGJ5IHVzaW5nIGhlciBtb25leS4gQnV0IEFudG9ueSwgd2hvIHNwb2tlIG9mIHRoZSBtYXJyaWFnZSBpbiBoaXMgcmVwbGllcyB0byBDaWNlcm8ncyBQaGlsaXBwaWNzLCBzYXlzIHRoYXQgaGUgY2FzdCBvdXQgb2YgZG9vcnMgdGhlIHdpZmUgd2l0aCB3aG9tIGhlIGhhZCBncm93biBvbGQsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIG1ha2VzIHdpdHR5IGppYmVzIHVwb24gdGhlIHN0YXktYXQtaG9tZSBoYWJpdHMgb2YgQ2ljZXJvLCB3aG8gd2FzLCBoZSBzYWlkLCB1bmZpdCBmb3IgYnVzaW5lc3Mgb3IgbWlsaXRhcnkgc2VydmljZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['41.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdCBsb25nIGFmdGVyIENpY2VybydzIG1hcnJpYWdlIGhpcyBkYXVnaHRlciBkaWVkIGluIGNoaWxkLWJpcnRoIGF0IHRoZSBob3VzZSBvZiBMZW50dWx1cywgdG8gd2hvbSBzaGUgaGFkIGJlZW4gbWFycmllZCBhZnRlciB0aGUgZGVhdGggb2YgUGlzbywgaGVyIGZvcm1lciBodXNiYW5kLiBIaXMgZnJpZW5kcyBjYW1lIHRvZ2V0aGVyIGZyb20gYWxsIHF1YXJ0ZXJzIHRvIGNvbWZvcnQgQ2ljZXJvOyBidXQgaGlzIGdyaWVmIGF0IGhpcyBtaXNmb3J0dW5lIHdhcyBleGNlc3NpdmUsIHNvIHRoYXQgaGUgYWN0dWFsbHkgZGl2b3JjZWQgdGhlIHdpZmUgaGUgaGFkIHdlZGRlZCwgYmVjYXVzZSBzaGUgd2FzIHRob3VnaHQgdG8gYmUgcGxlYXNlZCBhdCB0aGUgZGVhdGggb2YgVHVsbGlhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoLCB0aGVuLCB3ZXJlIENpY2VybydzIGRvbWVzdGljIGFmZmFpcnMuIEJ1dCBpbiB0aGUgZGVzaWduIHRoYXQgd2FzIGZvcm1pbmcgYWdhaW5zdCBDYWVzYXIgaGUgdG9vayBubyBwYXJ0LCBhbHRob3VnaCBoZSB3YXMgb25lIG9mIHRoZSBjbG9zZXN0IGNvbXBhbmlvbnMgb2YgQnJ1dHVzIGFuZCB3YXMgdGhvdWdodCB0byBiZSBkaXN0cmVzc2VkIGF0IHRoZSBwcmVzZW50IGFuZCB0byBsb25nIGZvciB0aGUgb2xkIHN0YXRlIG9mIGFmZmFpcnMgbW9yZSB0aGFuIGFueWJvZHkgZWxzZS4gQnV0IHRoZSBjb25zcGlyYXRvcnMgZmVhcmVkIGhpcyBuYXR1cmFsIGRpc3Bvc2l0aW9uIGFzIGJlaW5nIGRlZmljaWVudCBpbiBkYXJpbmcsIGFuZCBoaXMgdGltZSBvZiBsaWZlLCBpbiB3aGljaCBjb3VyYWdlIGZhaWxzIHRoZSBzdHJvbmdlc3QgbmF0dXJlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvLCB3aGVuIHRoZSBkZWVkIGhhZCBiZWVuIGFjY29tcGxpc2hlZCBieSB0aGUgcGFydGlzYW5zIG9mIEJydXR1cyBhbmQgQ2Fzc2l1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbiB0aGUgSWRlcyBvZiBNYXJjaCwgNDQgQi5DLjwvbm90ZT4gYW5kIHRoZSBmcmllbmRzIG9mIENhZXNhciB3ZXJlIGNvbWJpbmluZyBhZ2FpbnN0IHRoZSBwZXJwZXRyYXRvcnMgb2YgaXQsIGFuZCBpdCB3YXMgZmVhcmVkIHRoYXQgdGhlIGNpdHkgd291bGQgYWdhaW4gYmUgcGx1bmdlZCBpbnRvIGNpdmlsIHdhcnMsIEFudG9ueSwgYXMgY29uc3VsLCBjb252ZW5lZCB0aGUgc2VuYXRlIGFuZCBzYWlkIGEgZmV3IHdvcmRzIGFib3V0IGNvbmNvcmQsIHdoaWxlIENpY2VybywgYWZ0ZXIgYSBsZW5ndGh5IHNwZWVjaCBhcHByb3ByaWF0ZSB0byB0aGUgb2NjYXNpb24sIHBlcnN1YWRlZCB0aGUgc2VuYXRlIHRvIGltaXRhdGUgdGhlIEF0aGVuaWFuczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXNlIGRlY2xhcmVkIGEgZ2VuZXJhbCBhbW5lc3R5IGFmdGVyIHRoZSBvdmVydGhyb3cgb2YgdGhlIFRoaXJ0eSBUeXJhbnRzIGJ5IFRocmFzeWJ1bHVzIGluIDQwMyBCLkMuPC9ub3RlPiBhbmQgZGVjcmVlIGFuIGFtbmVzdHkgZm9yIHRoZSBhdHRhY2sgdXBvbiBDYWVzYXIsIGFuZCB0byBhc3NpZ24gcHJvdmluY2VzIHRvIENhc3NpdXMgYW5kIEJydXR1cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vbmUgb2YgdGhlc2UgdGhpbmdzIGNhbWUgdG8gcGFzcy4gRm9yIHdoZW4gdGhlIHBlb3BsZSwgd2hvIG9mIHRoZW1zZWx2ZXMgd2VyZSBzdHJvbmdseSBtb3ZlZCB0byBwaXR5LCBzYXcgQ2Flc2FyJ3MgYm9keSBjYXJyaWVkIHRocm91Z2ggdGhlIGZvcnVtLCBhbmQgd2hlbiBBbnRvbnkgc2hvd2VkIHRoZW0gdGhlIGdhcm1lbnRzIGRyZW5jaGVkIHdpdGggYmxvb2QgYW5kIHBpZXJjZWQgZXZlcnl3aGVyZSB3aXRoIHRoZSBzd29yZHMsIHRoZXkgd2VudCBtYWQgd2l0aCByYWdlIGFuZCBzb3VnaHQgZm9yIHRoZSBtdXJkZXJlcnMgaW4gdGhlIGZvcnVtLCBhbmQgcmFuIHRvIHRoZWlyIGhvdXNlcyB3aXRoIGZpcmUtYnJhbmRzIGluIG9yZGVyIHRvIHNldCB0aGVtIGFibGF6ZS4gRm9yIHRoaXMgZGFuZ2VyIHRoZSBjb25zcGlyYXRvcnMgd2VyZSBwcmVwYXJlZCBiZWZvcmVoYW5kIGFuZCBzbyBlc2NhcGVkIGl0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gMjAuMSIgdmFsaWQ9InllcyI+UGx1dGFyY2gncyA8dGl0bGU+QnJ1dHVzPC90aXRsZT4sIGNoYXB0ZXIgeHguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ1dCBleHBlY3Rpbmcgb3RoZXJzIG1hbnkgYW5kIGdyZWF0LCB0aGV5IGZvcnNvb2sgdGhlIGNpdHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgd2VyZSBDaWNlcm8ncyBkb21lc3RpYyBhZmZhaXJzLiBCdXQgaW4gdGhlIGRlc2lnbiB0aGF0IHdhcyBmb3JtaW5nIGFnYWluc3QgQ2Flc2FyIGhlIHRvb2sgbm8gcGFydCwgYWx0aG91Z2ggaGUgd2FzIG9uZSBvZiB0aGUgY2xvc2VzdCBjb21wYW5pb25zIG9mIEJydXR1cyBhbmQgd2FzIHRob3VnaHQgdG8gYmUgZGlzdHJlc3NlZCBhdCB0aGUgcHJlc2VudCBhbmQgdG8gbG9uZyBmb3IgdGhlIG9sZCBzdGF0ZSBvZiBhZmZhaXJzIG1vcmUgdGhhbiBhbnlib2R5IGVsc2UuIEJ1dCB0aGUgY29uc3BpcmF0b3JzIGZlYXJlZCBoaXMgbmF0dXJhbCBkaXNwb3NpdGlvbiBhcyBiZWluZyBkZWZpY2llbnQgaW4gZGFyaW5nLCBhbmQgaGlzIHRpbWUgb2YgbGlmZSwgaW4gd2hpY2ggY291cmFnZSBmYWlscyB0aGUgc3Ryb25nZXN0IG5hdHVyZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbywgd2hlbiB0aGUgZGVlZCBoYWQgYmVlbiBhY2NvbXBsaXNoZWQgYnkgdGhlIHBhcnRpc2FucyBvZiBCcnV0dXMgYW5kIENhc3NpdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbiB0aGUgSWRlcyBvZiBNYXJjaCwgNDQgQi5DLjwvbm90ZT4gYW5kIHRoZSBmcmllbmRzIG9mIENhZXNhciB3ZXJlIGNvbWJpbmluZyBhZ2FpbnN0IHRoZSBwZXJwZXRyYXRvcnMgb2YgaXQsIGFuZCBpdCB3YXMgZmVhcmVkIHRoYXQgdGhlIGNpdHkgd291bGQgYWdhaW4gYmUgcGx1bmdlZCBpbnRvIGNpdmlsIHdhcnMsIEFudG9ueSwgYXMgY29uc3VsLCBjb252ZW5lZCB0aGUgc2VuYXRlIGFuZCBzYWlkIGEgZmV3IHdvcmRzIGFib3V0IGNvbmNvcmQsIHdoaWxlIENpY2VybywgYWZ0ZXIgYSBsZW5ndGh5IHNwZWVjaCBhcHByb3ByaWF0ZSB0byB0aGUgb2NjYXNpb24sIHBlcnN1YWRlZCB0aGUgc2VuYXRlIHRvIGltaXRhdGUgdGhlIEF0aGVuaWFuczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlc2UgZGVjbGFyZWQgYSBnZW5lcmFsIGFtbmVzdHkgYWZ0ZXIgdGhlIG92ZXJ0aHJvdyBvZiB0aGUgVGhpcnR5IFR5cmFudHMgYnkgVGhyYXN5YnVsdXMgaW4gNDAzIEIuQy48L25vdGU+IGFuZCBkZWNyZWUgYW4gYW1uZXN0eSBmb3IgdGhlIGF0dGFjayB1cG9uIENhZXNhciwgYW5kIHRvIGFzc2lnbiBwcm92aW5jZXMgdG8gQ2Fzc2l1cyBhbmQgQnJ1dHVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub25lIG9mIHRoZXNlIHRoaW5ncyBjYW1lIHRvIHBhc3MuIEZvciB3aGVuIHRoZSBwZW9wbGUsIHdobyBvZiB0aGVtc2VsdmVzIHdlcmUgc3Ryb25nbHkgbW92ZWQgdG8gcGl0eSwgc2F3IENhZXNhcidzIGJvZHkgY2FycmllZCB0aHJvdWdoIHRoZSBmb3J1bSwgYW5kIHdoZW4gQW50b255IHNob3dlZCB0aGVtIHRoZSBnYXJtZW50cyBkcmVuY2hlZCB3aXRoIGJsb29kIGFuZCBwaWVyY2VkIGV2ZXJ5d2hlcmUgd2l0aCB0aGUgc3dvcmRzLCB0aGV5IHdlbnQgbWFkIHdpdGggcmFnZSBhbmQgc291Z2h0IGZvciB0aGUgbXVyZGVyZXJzIGluIHRoZSBmb3J1bSwgYW5kIHJhbiB0byB0aGVpciBob3VzZXMgd2l0aCBmaXJlLWJyYW5kcyBpbiBvcmRlciB0byBzZXQgdGhlbSBhYmxhemUuIEZvciB0aGlzIGRhbmdlciB0aGUgY29uc3BpcmF0b3JzIHdlcmUgcHJlcGFyZWQgYmVmb3JlaGFuZCBhbmQgc28gZXNjYXBlZCBpdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiAyMC4xIiB2YWxpZD0ieWVzIj5QbHV0YXJjaCdzIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCBjaGFwdGVyIHh4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBidXQgZXhwZWN0aW5nIG90aGVycyBtYW55IGFuZCBncmVhdCwgdGhleSBmb3Jzb29rIHRoZSBjaXR5LgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiAyMC4xIiB2YWxpZD0ieWVzIj5QbHV0YXJjaCdzIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCBjaGFwdGVyIHh4LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIGNoYXB0ZXIgeHguPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlbiwgQW50b255IHdhcyBoaWdobHkgZWxhdGVkLCBhbmQgYWxsIG1lbiB3ZXJlIGZlYXJmdWwgdGhhdCBoZSB3b3VsZCBtYWtlIGhpbXNlbGYgc29sZSBydWxlciwgYW5kIENpY2VybyBtb3N0IGZlYXJmdWwgb2YgYWxsLiBGb3IgQW50b255IHNhdyB0aGF0IENpY2VybydzIHBvd2VyIGluIHRoZSBzdGF0ZSB3YXMgcmV2aXZpbmcsIGFuZCBrbmV3IHRoYXQgaGUgd2FzIGF0dGFjaGVkIHRvIEJydXR1cyBhbmQgaGlzIHBhcnR5LCBhbmQgd2FzIHRoZXJlZm9yZSBkaXN0dXJiZWQgYXQgaGlzIHByZXNlbmNlIGluIHRoZSBjaXR5LiBBbmQgYmVzaWRlcywgdGhleSBoYWQgcHJldmlvdXNseSBiZWVuIHNvbWV3aGF0IHN1c3BpY2lvdXMgb2Ygb25lIGFub3RoZXIgYmVjYXVzZSBvZiB0aGUgbWFya2VkIGRpZmZlcmVuY2UgaW4gdGhlaXIgbGl2ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZlYXJpbmcgdGhlc2UgdGhpbmdzIENpY2VybyBhdCBmaXJzdCB3YXMgaW5jbGluZWQgdG8gc2FpbCB0byBTeXJpYSB3aXRoIERvbGFiZWxsYSwgYXMgaGlzIGxlZ2F0ZTsgYnV0IHRoZSBjb25zdWxzIGVsZWN0IHRvIHN1Y2NlZWQgQW50b255LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDQzIEIuQy48L25vdGU+IEhpcnRpdXMgYW5kIFBhbnNhLCB3aG8gd2VyZSBnb29kIG1lbiBhbmQgYWRtaXJlcnMgb2YgQ2ljZXJvLCBiZWdnZWQgaGltIG5vdCB0byBkZXNlcnQgdGhlbSwgYW5kIHVuZGVydG9vayB0byBwdXQgZG93biBBbnRvbnkgaWYgQ2ljZXJvIHdvdWxkIHJlbWFpbiBhdCBSb21lLiBTbyBDaWNlcm8sIHdobyBuZWl0aGVyIGRpc3RydXN0ZWQgbm9yIHRydXN0ZWQgdGhlbSBhbHRvZ2V0aGVyLCBsZXQgRG9sYWJlbGxhIGdvIHdpdGhvdXQgaGltLCBhbmQgYWZ0ZXIgYWdyZWVpbmcgd2l0aCBIaXJ0aXVzIGFuZCBQYW5zYSB0byBzcGVuZCB0aGUgc3VtbWVyIGF0IEF0aGVucywgYW5kIHRvIGNvbWUgYmFjayBhZ2FpbiB3aGVuIHRoZXkgaGFkIGFzc3VtZWQgb2ZmaWNlLCBzZXQgb2ZmIGJ5IGhpbXNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVyZSB3YXMgc29tZSBkZWxheSBhYm91dCBoaXMgdm95YWdlLCBhbmQsIGFzIGlzIG9mdGVuIHRoZSBjYXNlLCBuZXcgYW5kIHVuZXhwZWN0ZWQgcmVwb3J0cyBjYW1lIGZyb20gUm9tZSwgdG8gdGhlIGVmZmVjdCB0aGF0IEFudG9ueSBoYWQgdW5kZXJnb25lIGEgd29uZGVyZnVsIGNoYW5nZSBhbmQgd2FzIGRvaW5nIGFuZCBhZG1pbmlzdGVyaW5nIGV2ZXJ5dGhpbmcgdG8gcGxlYXNlIHRoZSBzZW5hdGUsIGFuZCB0aGF0IG1hdHRlcnMgbmVlZGVkIG9ubHkgQ2ljZXJvJ3MgcHJlc2VuY2UgdG8gYXNzdW1lIHRoZSBiZXN0IHBvc3NpYmxlIGNvbXBsZXhpb247IGhlIHRoZXJlZm9yZSBibGFtZWQgaGltc2VsZiBmb3IgaGlzIGV4Y2Vzc2l2ZSBjYXV0aW9uIGFuZCB0dXJuZWQgYmFjayBhZ2FpbiB0byBSb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW4gaGlzIGZpcnN0IGV4cGVjdGF0aW9ucyBoZSB3YXMgbm90IGRpc2FwcG9pbnRlZDsgZm9yIGEgZ3JlYXQgY3Jvd2Qgb2YgcGVvcGxlLCBtb3ZlZCB3aXRoIGpveSBhbmQgbG9uZ2luZyBmb3IgaGltLCBwb3VyZWQgZm9ydGggdG8gbWVldCBoaW0sIGFuZCBhbG1vc3QgYSBkYXkncyB0aW1lIHdhcyBjb25zdW1lZCBpbiB0aGUgZnJpZW5kbHkgZ3JlZXRpbmdzIGdpdmVuIGhpbSBhdCB0aGUgZ2F0ZXMgYW5kIGFzIGhlIGVudGVyZWQgdGhlIGNpdHkuIE9uIHRoZSBmb2xsb3dpbmcgZGF5LCBob3dldmVyLCB3aGVuIEFudG9ueSBjb252ZW5lZCB0aGUgc2VuYXRlIGFuZCBpbnZpdGVkIGhpbSB0byBiZSBwcmVzZW50LCBDaWNlcm8gZGlkIG5vdCBjb21lLCBidXQga2VwdCBoaXMgYmVkLCBwcmV0ZW5kaW5nIHRvIGJlIGluZGlzcG9zZWQgZnJvbSBmYXRpZ3VlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgdHJ1dGgsIGhvd2V2ZXIsIHNlZW1lZCB0byBiZSB0aGF0IGhlIHdhcyBhZnJhaWQgb2YgYSBwbG90IGFnYWluc3QgaGltLCBpbiBjb25zZXF1ZW5jZSBvZiBzb21lIHN1c3BpY2lvbiBhbmQgb2YgaW5mb3JtYXRpb24gdGhhdCBoYWQgdW5leHBlY3RlZGx5IGNvbWUgdG8gaGltIG9uIHRoZSByb2FkLiBCdXQgQW50b255IHdhcyBpbmRpZ25hbnQgYXQgdGhlIGltcGxpY2F0aW9uIGFuZCBzZW50IHNvbGRpZXJzIHdpdGggb3JkZXJzIHRvIGJyaW5nIENpY2VybyBvciBidXJuIGRvd24gaGlzIGhvdXNlOyBidXQgc2luY2UgbWFueSBvcHBvc2VkIHRoaXMgY291cnNlIGFuZCBlbnRyZWF0ZWQgaGltIHRvIGRlc2lzdCwgaGUgZGlkIHNvLCBhZnRlciBtZXJlbHkgdGFraW5nIHN1cmV0aWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlbmNlZm9yd2FyZCB0aGV5IGtlcHQgdXAgdGhpcyBhdHRpdHVkZSwgcXVpZXRseSBpZ25vcmluZyBvbmUgYW5vdGhlciBhbmQgbXV0dWFsbHkgb24gdGhlaXIgZ3VhcmQsIHVudGlsIHRoZSB5b3VuZyBDYWVzYXIgY2FtZSBmcm9tIEFwb2xsb25pYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5XaGVyZSBoZSB3YXMgc3R1ZHlpbmcuPC9ub3RlPiBhc3N1bWVkIHRoZSBpbmhlcml0YW5jZSBvZiB0aGUgZWxkZXIgQ2Flc2FyLCBhbmQgZW5nYWdlZCBpbiBhIGRpc3B1dGUgd2l0aCBBbnRvbnkgY29uY2VybmluZyB0aGUgdHdlbnR5LWZpdmUgbWlsbGlvbiBkcmFjaG1hcyB3aGljaCBBbnRvbnkgd2FzIGRldGFpbmluZyBmcm9tIHRoZSBlc3RhdGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Flc2FyJ3Mgd2lkb3cgaGFkIG1hZGUgQW50b255IGd1YXJkaWFuIG9mIHRoZSBlc3RhdGUuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['43.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlbiwgQW50b255IHdhcyBoaWdobHkgZWxhdGVkLCBhbmQgYWxsIG1lbiB3ZXJlIGZlYXJmdWwgdGhhdCBoZSB3b3VsZCBtYWtlIGhpbXNlbGYgc29sZSBydWxlciwgYW5kIENpY2VybyBtb3N0IGZlYXJmdWwgb2YgYWxsLiBGb3IgQW50b255IHNhdyB0aGF0IENpY2VybydzIHBvd2VyIGluIHRoZSBzdGF0ZSB3YXMgcmV2aXZpbmcsIGFuZCBrbmV3IHRoYXQgaGUgd2FzIGF0dGFjaGVkIHRvIEJydXR1cyBhbmQgaGlzIHBhcnR5LCBhbmQgd2FzIHRoZXJlZm9yZSBkaXN0dXJiZWQgYXQgaGlzIHByZXNlbmNlIGluIHRoZSBjaXR5LiBBbmQgYmVzaWRlcywgdGhleSBoYWQgcHJldmlvdXNseSBiZWVuIHNvbWV3aGF0IHN1c3BpY2lvdXMgb2Ygb25lIGFub3RoZXIgYmVjYXVzZSBvZiB0aGUgbWFya2VkIGRpZmZlcmVuY2UgaW4gdGhlaXIgbGl2ZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZlYXJpbmcgdGhlc2UgdGhpbmdzIENpY2VybyBhdCBmaXJzdCB3YXMgaW5jbGluZWQgdG8gc2FpbCB0byBTeXJpYSB3aXRoIERvbGFiZWxsYSwgYXMgaGlzIGxlZ2F0ZTsgYnV0IHRoZSBjb25zdWxzIGVsZWN0IHRvIHN1Y2NlZWQgQW50b255LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDMgQi5DLjwvbm90ZT4gSGlydGl1cyBhbmQgUGFuc2EsIHdobyB3ZXJlIGdvb2QgbWVuIGFuZCBhZG1pcmVycyBvZiBDaWNlcm8sIGJlZ2dlZCBoaW0gbm90IHRvIGRlc2VydCB0aGVtLCBhbmQgdW5kZXJ0b29rIHRvIHB1dCBkb3duIEFudG9ueSBpZiBDaWNlcm8gd291bGQgcmVtYWluIGF0IFJvbWUuIFNvIENpY2Vybywgd2hvIG5laXRoZXIgZGlzdHJ1c3RlZCBub3IgdHJ1c3RlZCB0aGVtIGFsdG9nZXRoZXIsIGxldCBEb2xhYmVsbGEgZ28gd2l0aG91dCBoaW0sIGFuZCBhZnRlciBhZ3JlZWluZyB3aXRoIEhpcnRpdXMgYW5kIFBhbnNhIHRvIHNwZW5kIHRoZSBzdW1tZXIgYXQgQXRoZW5zLCBhbmQgdG8gY29tZSBiYWNrIGFnYWluIHdoZW4gdGhleSBoYWQgYXNzdW1lZCBvZmZpY2UsIHNldCBvZmYgYnkgaGltc2VsZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['43.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVyZSB3YXMgc29tZSBkZWxheSBhYm91dCBoaXMgdm95YWdlLCBhbmQsIGFzIGlzIG9mdGVuIHRoZSBjYXNlLCBuZXcgYW5kIHVuZXhwZWN0ZWQgcmVwb3J0cyBjYW1lIGZyb20gUm9tZSwgdG8gdGhlIGVmZmVjdCB0aGF0IEFudG9ueSBoYWQgdW5kZXJnb25lIGEgd29uZGVyZnVsIGNoYW5nZSBhbmQgd2FzIGRvaW5nIGFuZCBhZG1pbmlzdGVyaW5nIGV2ZXJ5dGhpbmcgdG8gcGxlYXNlIHRoZSBzZW5hdGUsIGFuZCB0aGF0IG1hdHRlcnMgbmVlZGVkIG9ubHkgQ2ljZXJvJ3MgcHJlc2VuY2UgdG8gYXNzdW1lIHRoZSBiZXN0IHBvc3NpYmxlIGNvbXBsZXhpb247IGhlIHRoZXJlZm9yZSBibGFtZWQgaGltc2VsZiBmb3IgaGlzIGV4Y2Vzc2l2ZSBjYXV0aW9uIGFuZCB0dXJuZWQgYmFjayBhZ2FpbiB0byBSb21lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['43.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiBoaXMgZmlyc3QgZXhwZWN0YXRpb25zIGhlIHdhcyBub3QgZGlzYXBwb2ludGVkOyBmb3IgYSBncmVhdCBjcm93ZCBvZiBwZW9wbGUsIG1vdmVkIHdpdGggam95IGFuZCBsb25naW5nIGZvciBoaW0sIHBvdXJlZCBmb3J0aCB0byBtZWV0IGhpbSwgYW5kIGFsbW9zdCBhIGRheSdzIHRpbWUgd2FzIGNvbnN1bWVkIGluIHRoZSBmcmllbmRseSBncmVldGluZ3MgZ2l2ZW4gaGltIGF0IHRoZSBnYXRlcyBhbmQgYXMgaGUgZW50ZXJlZCB0aGUgY2l0eS4gT24gdGhlIGZvbGxvd2luZyBkYXksIGhvd2V2ZXIsIHdoZW4gQW50b255IGNvbnZlbmVkIHRoZSBzZW5hdGUgYW5kIGludml0ZWQgaGltIHRvIGJlIHByZXNlbnQsIENpY2VybyBkaWQgbm90IGNvbWUsIGJ1dCBrZXB0IGhpcyBiZWQsIHByZXRlbmRpbmcgdG8gYmUgaW5kaXNwb3NlZCBmcm9tIGZhdGlndWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0cnV0aCwgaG93ZXZlciwgc2VlbWVkIHRvIGJlIHRoYXQgaGUgd2FzIGFmcmFpZCBvZiBhIHBsb3QgYWdhaW5zdCBoaW0sIGluIGNvbnNlcXVlbmNlIG9mIHNvbWUgc3VzcGljaW9uIGFuZCBvZiBpbmZvcm1hdGlvbiB0aGF0IGhhZCB1bmV4cGVjdGVkbHkgY29tZSB0byBoaW0gb24gdGhlIHJvYWQuIEJ1dCBBbnRvbnkgd2FzIGluZGlnbmFudCBhdCB0aGUgaW1wbGljYXRpb24gYW5kIHNlbnQgc29sZGllcnMgd2l0aCBvcmRlcnMgdG8gYnJpbmcgQ2ljZXJvIG9yIGJ1cm4gZG93biBoaXMgaG91c2U7IGJ1dCBzaW5jZSBtYW55IG9wcG9zZWQgdGhpcyBjb3Vyc2UgYW5kIGVudHJlYXRlZCBoaW0gdG8gZGVzaXN0LCBoZSBkaWQgc28sIGFmdGVyIG1lcmVseSB0YWtpbmcgc3VyZXRpZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVuY2Vmb3J3YXJkIHRoZXkga2VwdCB1cCB0aGlzIGF0dGl0dWRlLCBxdWlldGx5IGlnbm9yaW5nIG9uZSBhbm90aGVyIGFuZCBtdXR1YWxseSBvbiB0aGVpciBndWFyZCwgdW50aWwgdGhlIHlvdW5nIENhZXNhciBjYW1lIGZyb20gQXBvbGxvbmlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+V2hlcmUgaGUgd2FzIHN0dWR5aW5nLjwvbm90ZT4gYXNzdW1lZCB0aGUgaW5oZXJpdGFuY2Ugb2YgdGhlIGVsZGVyIENhZXNhciwgYW5kIGVuZ2FnZWQgaW4gYSBkaXNwdXRlIHdpdGggQW50b255IGNvbmNlcm5pbmcgdGhlIHR3ZW50eS1maXZlIG1pbGxpb24gZHJhY2htYXMgd2hpY2ggQW50b255IHdhcyBkZXRhaW5pbmcgZnJvbSB0aGUgZXN0YXRlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Flc2FyJ3Mgd2lkb3cgaGFkIG1hZGUgQW50b255IGd1YXJkaWFuIG9mIHRoZSBlc3RhdGUuPC9ub3RlPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBQaGlsaXAsIHdobyBoYWQgbWFycmllZCB0aGUgbW90aGVyLCBhbmQgTWFyY2VsbHVzLCB3aG8gaGFkIG1hcnJpZWQgdGhlIHNpc3RlciBvZiB0aGUgeW91bmcgQ2Flc2FyLCBjYW1lIHdpdGggdGhlIHlvdW5nIG1hbiB0byBDaWNlcm8gYW5kIG1hZGUgYSBjb21wYWN0IHRoYXQgQ2ljZXJvIHNob3VsZCBnaXZlIENhZXNhciB0aGUgaW5mbHVlbmNlIGRlcml2ZWQgZnJvbSBoaXMgZWxvcXVlbmNlIGFuZCBwb2xpdGljYWwgcG9zaXRpb24sIGJvdGggaW4gdGhlIHNlbmF0ZSBhbmQgYmVmb3JlIHRoZSBwZW9wbGUsIGFuZCB0aGF0IENhZXNhciBzaG91bGQgZ2l2ZSBDaWNlcm8gdGhlIHNlY3VyaXR5IHRvIGJlIGRlcml2ZWQgZnJvbSBoaXMgd2VhbHRoIGFuZCBoaXMgYXJtZWQgZm9yY2VzLiBGb3IgYWxyZWFkeSB0aGUgeW91bmcgbWFuIGhhZCBhYm91dCBoaW0gbWFueSBvZiB0aGUgc29sZGllcnMgd2hvIGhhZCBzZXJ2ZWQgdW5kZXIgdGhlIGVsZGVyIENhZXNhci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIHRob3VnaHQsIHRvbywgdGhhdCB0aGVyZSB3YXMgYSBzdHJvbmdlciByZWFzb24gd2h5IENpY2VybyByZWFkaWx5IGFjY2VwdGVkIHRoZSB5b3VuZyBtYW4ncyBmcmllbmRzaGlwLiBGb3IgaXQgd291bGQgYXBwZWFyIHRoYXQgd2hpbGUgUG9tcGV5IGFuZCBDYWVzYXIgd2VyZSBzdGlsbCBsaXZpbmcgQ2ljZXJvIGRyZWFtZWQgdGhhdCBzb21lb25lIGludml0ZWQgdGhlIHNvbnMgb2YgdGhlIHNlbmF0b3JzIHRvIHRoZSBDYXBpdG9sLCBvbiB0aGUgZ3JvdW5kIHRoYXQgSnVwaXRlciB3YXMgZ29pbmcgdG8gYXBwb2ludCBvbmUgb2YgdGhlaXIgbnVtYmVyIHJ1bGVyIG9mIFJvbWU7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IHRoZSBjaXRpemVucyBlYWdlcmx5IHJhbiBhbmQgc3RhdGlvbmVkIHRoZW1zZWx2ZXMgYWJvdXQgdGhlIHRlbXBsZSwgd2hpbGUgdGhlIHlvdXRocywgaW4gdGhlaXIgcHVycGxlLWJvcmRlcmVkIHRvZ2FzLCBzZWF0ZWQgdGhlbXNlbHZlcyB0aGVyZSBpbiBzaWxlbmNlLiBTdWRkZW5seSB0aGUgZG9vciBvZiB0aGUgdGVtcGxlIG9wZW5lZCwgYW5kIG9uZSBieSBvbmUgdGhlIHlvdXRocyByb3NlIGFuZCB3YWxrZWQgcm91bmQgcGFzdCB0aGUgZ29kLCB3aG8gcmV2aWV3ZWQgdGhlbSBhbGwgYW5kIHNlbnQgdGhlbSBhd2F5IHNvcnJvd2luZy4gQnV0IHdoZW4gdGhpcyB5b3VuZyBDYWVzYXIgYWR2YW5jZWQgaW50byBoaXMgcHJlc2VuY2UgdGhlIGdvZCBzdHJldGNoZWQgb3V0IGhpcyBoYW5kIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gUm9tYW5zLCB5ZSBzaGFsbCBoYXZlIGFuIGVuZCBvZiBjaXZpbCB3YXJzIHdoZW4gdGhpcyB5b3V0aCBoYXMgYmVjb21lIHlvdXIgcnVsZXIuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ5IHN1Y2ggYSBkcmVhbSBhcyB0aGlzLCB0aGV5IHNheSwgQ2ljZXJvIGhhZCBpbXByZXNzZWQgdXBvbiBoaW0gdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIHlvdXRoLCBhbmQgcmV0YWluZWQgaXQgZGlzdGluY3RseSwgYnV0IGRpZCBub3Qga25vdyBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkMuIDQ1LjIiPkRpb24gQ2Fzc2l1cyAoeGx2LiAyKTwvYmlibD4gYW5kIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBBdWcuIDk0IiB2YWxpZD0ieWVzIj5TdWV0b25pdXMgKDx0aXRsZT5EaXZ1cyBBdWd1c3R1czwvdGl0bGU+LCA5NDwvYmlibD4pLCBDaWNlcm8gZHJlYW1lZCB0aGF0IE9jdGF2aXVzIHdhcyBsZXQgZG93biBmcm9tIGhlYXZlbiBieSBhIGNoYWluIG9mIGdvbGQsIGFuZCBwcmVzZW50ZWQgd2l0aCBhIHdoaXAgYnkgSnVwaXRlci48L25vdGU+IFRoZSBuZXh0IGRheSwgaG93ZXZlciwgYXMgaGUgd2FzIGdvaW5nIGRvd24gdG8gdGhlIENhbXB1cyBNYXJ0aXVzLCB0aGUgeW91dGhzLCB3aG8gaGFkIGp1c3QgZmluaXNoZWQgZXhlcmNpc2luZyB0aGVyZSwgd2VyZSBjb21pbmcgYXdheSwgYW5kIHRoZSB5b3V0aCBvZiBoaXMgZHJlYW0gd2FzIHNlZW4gYnkgQ2ljZXJvIGZvciB0aGUgZmlyc3QgdGltZSwgYW5kIENpY2VybywgYW1hemVkLCBpbnF1aXJlZCB3aG8gaGlzIHBhcmVudHMgd2VyZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBoaXMgZmF0aGVyIHdhcyBPY3Rhdml1cywgYSBtYW4gb2Ygbm8gZ3JlYXQgcHJvbWluZW5jZSwgYnV0IGhpcyBtb3RoZXIgd2FzIEF0dGlhLCBhIGRhdWdodGVyIG9mIENhZXNhcidzIHNpc3Rlci4gRm9yIHRoaXMgcmVhc29uIENhZXNhciwgd2hvIGhhZCBubyBjaGlsZHJlbiBvZiBoaXMgb3duLCB3aWxsZWQgaGlzIHByb3BlcnR5IGFuZCBoaXMgZmFtaWx5IG5hbWUgdG8gaGltLiBBZnRlciB0aGlzLCBpdCBpcyBzYWlkLCBDaWNlcm8gdG9vayBwYWlucyB0byBjb252ZXJzZSB3aXRoIHRoZSB5b3V0aCB3aGVuIHRoZXkgbWV0LCBhbmQgdGhlIHlvdXRoIHdlbGNvbWVkIGhpcyBraW5kIGF0dGVudGlvbnM7IGFuZCBpbmRlZWQgaXQgaGFwcGVuZWQgdGhhdCBoZSB3YXMgYm9ybiBkdXJpbmcgQ2ljZXJvJ3MgY29uc3Vsc2hpcC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgUGhpbGlwLCB3aG8gaGFkIG1hcnJpZWQgdGhlIG1vdGhlciwgYW5kIE1hcmNlbGx1cywgd2hvIGhhZCBtYXJyaWVkIHRoZSBzaXN0ZXIgb2YgdGhlIHlvdW5nIENhZXNhciwgY2FtZSB3aXRoIHRoZSB5b3VuZyBtYW4gdG8gQ2ljZXJvIGFuZCBtYWRlIGEgY29tcGFjdCB0aGF0IENpY2VybyBzaG91bGQgZ2l2ZSBDYWVzYXIgdGhlIGluZmx1ZW5jZSBkZXJpdmVkIGZyb20gaGlzIGVsb3F1ZW5jZSBhbmQgcG9saXRpY2FsIHBvc2l0aW9uLCBib3RoIGluIHRoZSBzZW5hdGUgYW5kIGJlZm9yZSB0aGUgcGVvcGxlLCBhbmQgdGhhdCBDYWVzYXIgc2hvdWxkIGdpdmUgQ2ljZXJvIHRoZSBzZWN1cml0eSB0byBiZSBkZXJpdmVkIGZyb20gaGlzIHdlYWx0aCBhbmQgaGlzIGFybWVkIGZvcmNlcy4gRm9yIGFscmVhZHkgdGhlIHlvdW5nIG1hbiBoYWQgYWJvdXQgaGltIG1hbnkgb2YgdGhlIHNvbGRpZXJzIHdobyBoYWQgc2VydmVkIHVuZGVyIHRoZSBlbGRlciBDYWVzYXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['44.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB0aG91Z2h0LCB0b28sIHRoYXQgdGhlcmUgd2FzIGEgc3Ryb25nZXIgcmVhc29uIHdoeSBDaWNlcm8gcmVhZGlseSBhY2NlcHRlZCB0aGUgeW91bmcgbWFuJ3MgZnJpZW5kc2hpcC4gRm9yIGl0IHdvdWxkIGFwcGVhciB0aGF0IHdoaWxlIFBvbXBleSBhbmQgQ2Flc2FyIHdlcmUgc3RpbGwgbGl2aW5nIENpY2VybyBkcmVhbWVkIHRoYXQgc29tZW9uZSBpbnZpdGVkIHRoZSBzb25zIG9mIHRoZSBzZW5hdG9ycyB0byB0aGUgQ2FwaXRvbCwgb24gdGhlIGdyb3VuZCB0aGF0IEp1cGl0ZXIgd2FzIGdvaW5nIHRvIGFwcG9pbnQgb25lIG9mIHRoZWlyIG51bWJlciBydWxlciBvZiBSb21lOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['44.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IHRoZSBjaXRpemVucyBlYWdlcmx5IHJhbiBhbmQgc3RhdGlvbmVkIHRoZW1zZWx2ZXMgYWJvdXQgdGhlIHRlbXBsZSwgd2hpbGUgdGhlIHlvdXRocywgaW4gdGhlaXIgcHVycGxlLWJvcmRlcmVkIHRvZ2FzLCBzZWF0ZWQgdGhlbXNlbHZlcyB0aGVyZSBpbiBzaWxlbmNlLiBTdWRkZW5seSB0aGUgZG9vciBvZiB0aGUgdGVtcGxlIG9wZW5lZCwgYW5kIG9uZSBieSBvbmUgdGhlIHlvdXRocyByb3NlIGFuZCB3YWxrZWQgcm91bmQgcGFzdCB0aGUgZ29kLCB3aG8gcmV2aWV3ZWQgdGhlbSBhbGwgYW5kIHNlbnQgdGhlbSBhd2F5IHNvcnJvd2luZy4gQnV0IHdoZW4gdGhpcyB5b3VuZyBDYWVzYXIgYWR2YW5jZWQgaW50byBoaXMgcHJlc2VuY2UgdGhlIGdvZCBzdHJldGNoZWQgb3V0IGhpcyBoYW5kIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBSb21hbnMsIHllIHNoYWxsIGhhdmUgYW4gZW5kIG9mIGNpdmlsIHdhcnMgd2hlbiB0aGlzIHlvdXRoIGhhcyBiZWNvbWUgeW91ciBydWxlci48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ5IHN1Y2ggYSBkcmVhbSBhcyB0aGlzLCB0aGV5IHNheSwgQ2ljZXJvIGhhZCBpbXByZXNzZWQgdXBvbiBoaW0gdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIHlvdXRoLCBhbmQgcmV0YWluZWQgaXQgZGlzdGluY3RseSwgYnV0IGRpZCBub3Qga25vdyBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiA0NS4yIj5EaW9uIENhc3NpdXMgKHhsdi4gMik8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBBdWcuIDk0IiB2YWxpZD0ieWVzIj5TdWV0b25pdXMgKDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdnVzIEF1Z3VzdHVzPC90aXRsZT4sIDk0PC9iaWJsPiksIENpY2VybyBkcmVhbWVkIHRoYXQgT2N0YXZpdXMgd2FzIGxldCBkb3duIGZyb20gaGVhdmVuIGJ5IGEgY2hhaW4gb2YgZ29sZCwgYW5kIHByZXNlbnRlZCB3aXRoIGEgd2hpcCBieSBKdXBpdGVyLjwvbm90ZT4gVGhlIG5leHQgZGF5LCBob3dldmVyLCBhcyBoZSB3YXMgZ29pbmcgZG93biB0byB0aGUgQ2FtcHVzIE1hcnRpdXMsIHRoZSB5b3V0aHMsIHdobyBoYWQganVzdCBmaW5pc2hlZCBleGVyY2lzaW5nIHRoZXJlLCB3ZXJlIGNvbWluZyBhd2F5LCBhbmQgdGhlIHlvdXRoIG9mIGhpcyBkcmVhbSB3YXMgc2VlbiBieSBDaWNlcm8gZm9yIHRoZSBmaXJzdCB0aW1lLCBhbmQgQ2ljZXJvLCBhbWF6ZWQsIGlucXVpcmVkIHdobyBoaXMgcGFyZW50cyB3ZXJlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuQy4gNDUuMiI+RGlvbiBDYXNzaXVzICh4bHYuIDIpPC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU3VldC4gQXVnLiA5NCIgdmFsaWQ9InllcyI+U3VldG9uaXVzICg8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZ1cyBBdWd1c3R1czwvdGl0bGU+LCA5NDwvYmlibD4pLCBDaWNlcm8gZHJlYW1lZCB0aGF0IE9jdGF2aXVzIHdhcyBsZXQgZG93biBmcm9tIGhlYXZlbiBieSBhIGNoYWluIG9mIGdvbGQsIGFuZCBwcmVzZW50ZWQgd2l0aCBhIHdoaXAgYnkgSnVwaXRlci48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZ1cyBBdWd1c3R1czwvdGl0bGU+LCA5NDwvdHJhbnNsYXRpb24+"
translation['44.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaGlzIGZhdGhlciB3YXMgT2N0YXZpdXMsIGEgbWFuIG9mIG5vIGdyZWF0IHByb21pbmVuY2UsIGJ1dCBoaXMgbW90aGVyIHdhcyBBdHRpYSwgYSBkYXVnaHRlciBvZiBDYWVzYXIncyBzaXN0ZXIuIEZvciB0aGlzIHJlYXNvbiBDYWVzYXIsIHdobyBoYWQgbm8gY2hpbGRyZW4gb2YgaGlzIG93biwgd2lsbGVkIGhpcyBwcm9wZXJ0eSBhbmQgaGlzIGZhbWlseSBuYW1lIHRvIGhpbS4gQWZ0ZXIgdGhpcywgaXQgaXMgc2FpZCwgQ2ljZXJvIHRvb2sgcGFpbnMgdG8gY29udmVyc2Ugd2l0aCB0aGUgeW91dGggd2hlbiB0aGV5IG1ldCwgYW5kIHRoZSB5b3V0aCB3ZWxjb21lZCBoaXMga2luZCBhdHRlbnRpb25zOyBhbmQgaW5kZWVkIGl0IGhhcHBlbmVkIHRoYXQgaGUgd2FzIGJvcm4gZHVyaW5nIENpY2VybydzIGNvbnN1bHNoaXAuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlLCB0aGVuLCB3ZXJlIHRoZSByZWFzb25zIHRoYXQgd2VyZSBtZW50aW9uZWQ7IGJ1dCBpdCB3YXMgQ2ljZXJvJ3MgaGF0cmVkIGZvciBBbnRvbnkgaW4gdGhlIGZpcnN0IHBsYWNlLCBhbmQgdGhlbiBoaXMgbmF0dXJhbCBjcmF2aW5nIGZvciBob25vdXIsIHRoYXQgYXR0YWNoZWQgaGltIHRvIHRoZSB5b3VuZyBDYWVzYXIsIHNpbmNlIGhlIHRob3VnaHQgdG8gYWRkIENhZXNhcidzIHBvd2VyIHRvIGhpcyBvd24gcG9saXRpY2FsIGluZmx1ZW5jZS4gQW5kIGluZGVlZCB0aGUgeW91bmcgbWFuIGNhcnJpZWQgaGlzIGNvdXJ0IHRvIGhpbSBzbyBmYXIgYXMgYWN0dWFsbHkgdG8gY2FsbCBoaW0gZmF0aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIEJydXR1cyB3YXMgdmVyeSBhbmdyeSwgYW5kIGluIGhpcyBsZXR0ZXJzIHRvIEF0dGljdXMgYXR0YWNrZWQgQ2ljZXJvLCBzYXlpbmcgdGhhdCBpbiBwYXlpbmcgY291cnQgdG8gQ2Flc2FyIHRocm91Z2ggZmVhciBvZiBBbnRvbnkgaGUgd2FzIHBsYWlubHkgbm90IG9idGFpbmluZyBsaWJlcnR5IGZvciBoaXMgY291bnRyeSwgYnV0IHdvb2luZyBhIGtpbmQgbWFzdGVyIGZvciBoaW1zZWxmLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBhZCBCcnV0LiAxLjE3LjUiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlPmFkIEJydXR1bTwvdGl0bGU+LCBpLiAxNywgNTwvYmlibD4gKEJydXR1cyB0byBBdHRpY3VzKS48L25vdGU+IEhvd2V2ZXIsIEJydXR1cyB0b29rIHVwIENpY2VybydzIHNvbiB3aG8gd2FzIHN0dWR5aW5nIHBoaWxvc29waHkgYXQgQXRoZW5zLCBnYXZlIGhpbSBhIGNvbW1hbmQsIGFuZCBhY2hpZXZlZCBtYW55IHN1Y2Nlc3NlcyB0aHJvdWdoIGhpcyBpbnN0cnVtZW50YWxpdHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gMjQuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CcnV0dXM8L3RpdGxlPiwgeHhpdi4gMjwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiAyNi4zIiB2YWxpZD0ieWVzIj54eHZpLiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['45.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UsIHRoZW4sIHdlcmUgdGhlIHJlYXNvbnMgdGhhdCB3ZXJlIG1lbnRpb25lZDsgYnV0IGl0IHdhcyBDaWNlcm8ncyBoYXRyZWQgZm9yIEFudG9ueSBpbiB0aGUgZmlyc3QgcGxhY2UsIGFuZCB0aGVuIGhpcyBuYXR1cmFsIGNyYXZpbmcgZm9yIGhvbm91ciwgdGhhdCBhdHRhY2hlZCBoaW0gdG8gdGhlIHlvdW5nIENhZXNhciwgc2luY2UgaGUgdGhvdWdodCB0byBhZGQgQ2Flc2FyJ3MgcG93ZXIgdG8gaGlzIG93biBwb2xpdGljYWwgaW5mbHVlbmNlLiBBbmQgaW5kZWVkIHRoZSB5b3VuZyBtYW4gY2FycmllZCBoaXMgY291cnQgdG8gaGltIHNvIGZhciBhcyBhY3R1YWxseSB0byBjYWxsIGhpbSBmYXRoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['45.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgQnJ1dHVzIHdhcyB2ZXJ5IGFuZ3J5LCBhbmQgaW4gaGlzIGxldHRlcnMgdG8gQXR0aWN1cyBhdHRhY2tlZCBDaWNlcm8sIHNheWluZyB0aGF0IGluIHBheWluZyBjb3VydCB0byBDYWVzYXIgdGhyb3VnaCBmZWFyIG9mIEFudG9ueSBoZSB3YXMgcGxhaW5seSBub3Qgb2J0YWluaW5nIGxpYmVydHkgZm9yIGhpcyBjb3VudHJ5LCBidXQgd29vaW5nIGEga2luZCBtYXN0ZXIgZm9yIGhpbXNlbGYuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBhZCBCcnV0LiAxLjE3LjUiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgQnJ1dHVtPC90aXRsZT4sIGkuIDE3LCA1PC9iaWJsPiAoQnJ1dHVzIHRvIEF0dGljdXMpLjwvbm90ZT4gSG93ZXZlciwgQnJ1dHVzIHRvb2sgdXAgQ2ljZXJvJ3Mgc29uIHdobyB3YXMgc3R1ZHlpbmcgcGhpbG9zb3BoeSBhdCBBdGhlbnMsIGdhdmUgaGltIGEgY29tbWFuZCwgYW5kIGFjaGlldmVkIG1hbnkgc3VjY2Vzc2VzIHRocm91Z2ggaGlzIGluc3RydW1lbnRhbGl0eS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIGFkIEJydXQuIDEuMTcuNSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBCcnV0dW08L3RpdGxlPiwgaS4gMTcsIDU8L2JpYmw+IChCcnV0dXMgdG8gQXR0aWN1cykuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgQnJ1dHVtPC90aXRsZT4sIGkuIDE3LCA1PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDI0LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcnV0dXM8L3RpdGxlPiwgeHhpdi4gMjwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDI2LjMiIHZhbGlkPSJ5ZXMiPnh4dmkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDI0LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcnV0dXM8L3RpdGxlPiwgeHhpdi4gMjwvYmlibD47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCB4eGl2LiAyPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gMjYuMyIgdmFsaWQ9InllcyI+eHh2aS4gMy48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNpY2VybydzIHBvd2VyIGluIHRoZSBjaXR5IHJlYWNoZWQgaXRzIGdyZWF0ZXN0IGhlaWdodCBhdCB0aGlzIHRpbWUsIGFuZCBzaW5jZSBoZSBjb3VsZCBkbyB3aGF0IGhlIHBsZWFzZWQsIGhlIHJhaXNlZCBhIHN1Y2Nlc3NmdWwgZmFjdGlvbiBhZ2FpbnN0IEFudG9ueSwgZHJvdmUgaGltIG91dCBvZiB0aGUgY2l0eSwgYW5kIHNlbnQgb3V0IHRoZSB0d28gY29uc3VscywgSGlydGl1cyBhbmQgUGFuc2EsIHRvIHdhZ2Ugd2FyIHVwb24gaGltLCB3aGlsZSBoZSBwZXJzdWFkZWQgdGhlIHNlbmF0ZSB0byB2b3RlIENhZXNhciB0aGUgbGljdG9ycyBhbmQgaW5zaWduaWEgb2YgYSBwcmFldG9yLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgd2FzIGZpZ2h0aW5nIGluIGRlZmVuY2Ugb2YgdGhlIGNvdW50cnkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBBbnRvbnkgaGFkIGJlZW4gZGVmZWF0ZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TmVhciBNdXRpbmEsIGEgY2l0eSBpbiBHYWxsaWEgQ2lzcGFkYW5hLCBlYXJseSBpbiB0aGUgeWVhciA0MyBCLkMuIE9jdGF2aXVzIENhZXNhciBhY3RlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSB0d28gY29uc3Vscy4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDMuMTAuNzEiIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlPkIuQy48L3RpdGxlPiwgaWlpLiA3MS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kLCBib3RoIGNvbnN1bHMgaGF2aW5nIGRpZWQgYWZ0ZXIgdGhlIGJhdHRsZSwgdGhlIGZvcmNlcyBoYWQgdW5pdGVkIHVuZGVyIENhZXNhciwgdGhlIHNlbmF0ZSBiZWNhbWUgYWZyYWlkIG9mIGEgeW91bmcgbWFuIHdobyBoYWQgZW5qb3llZCBzdWNoIGJyaWxsaWFudCBnb29kIGZvcnR1bmUsIGFuZCBlbmRlYXZvdXJlZCBieSBob25vdXJzIGFuZCBnaWZ0cyB0byBjYWxsIGhpcyB0cm9vcHMgYXdheSBmcm9tIGhpbSBhbmQgdG8gY2lyY3Vtc2NyaWJlIGhpcyBwb3dlciwgb24gdGhlIGdyb3VuZCB0aGF0IHRoZXJlIHdhcyBubyBuZWVkIG9mIGRlZmVuc2l2ZSBhcm1pZXMgbm93IHRoYXQgQW50b255IGhhZCB0YWtlbiB0byBmbGlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlVuZGVyIHRoZXNlIGNpcmN1bXN0YW5jZXMgQ2Flc2FyIHRvb2sgYWxhcm0gYW5kIHNlY3JldGx5IHNlbnQgbWVzc2VuZ2VycyB0byBDaWNlcm8gYmVnZ2luZyBhbmQgdXJnaW5nIGhpbSB0byBvYnRhaW4gdGhlIGNvbnN1bHNoaXAgZm9yIHRoZW0gYm90aCwgYnV0IHRvIG1hbmFnZSBhZmZhaXJzIGFzIGhlIGhpbXNlbGYgdGhvdWdodCBiZXN0LCBhZnRlciBhc3N1bWluZyB0aGUgb2ZmaWNlLCBhbmQgdG8gZGlyZWN0IGluIGFsbCB0aGluZ3MgYSB5b3V0aGZ1bCBjb2xsZWFndWUgd2hvIG9ubHkgY3JhdmVkIG5hbWUgYW5kIGZhbWUuIEFuZCBDYWVzYXIgaGltc2VsZiBhZG1pdHRlZCBhZnRlcndhcmRzIHRoYXQgaXQgd2FzIHRoZSBmZWFyIG9mIGhhdmluZyBoaXMgdHJvb3BzIGRpc2JhbmRlZCBhbmQgdGhlIGRhbmdlciBvZiBmaW5kaW5nIGhpbXNlbGYgbGVmdCBhbG9uZSB3aGljaCBsZWQgaGltIHRvIG1ha2UgdXNlIGluIGFuIGVtZXJnZW5jeSBvZiBDaWNlcm8ncyBsb3ZlIG9mIHBvd2VyLCBieSBpbmR1Y2luZyBoaW0gdG8gc3VlIGZvciB0aGUgY29uc3Vsc2hpcCB3aXRoIGhpcyBjby1vcGVyYXRpb24gYW5kIGFzc2lzdGFuY2UgaW4gdGhlIGNhbnZhc3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['45.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNpY2VybydzIHBvd2VyIGluIHRoZSBjaXR5IHJlYWNoZWQgaXRzIGdyZWF0ZXN0IGhlaWdodCBhdCB0aGlzIHRpbWUsIGFuZCBzaW5jZSBoZSBjb3VsZCBkbyB3aGF0IGhlIHBsZWFzZWQsIGhlIHJhaXNlZCBhIHN1Y2Nlc3NmdWwgZmFjdGlvbiBhZ2FpbnN0IEFudG9ueSwgZHJvdmUgaGltIG91dCBvZiB0aGUgY2l0eSwgYW5kIHNlbnQgb3V0IHRoZSB0d28gY29uc3VscywgSGlydGl1cyBhbmQgUGFuc2EsIHRvIHdhZ2Ugd2FyIHVwb24gaGltLCB3aGlsZSBoZSBwZXJzdWFkZWQgdGhlIHNlbmF0ZSB0byB2b3RlIENhZXNhciB0aGUgbGljdG9ycyBhbmQgaW5zaWduaWEgb2YgYSBwcmFldG9yLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgd2FzIGZpZ2h0aW5nIGluIGRlZmVuY2Ugb2YgdGhlIGNvdW50cnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['45.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBBbnRvbnkgaGFkIGJlZW4gZGVmZWF0ZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5OZWFyIE11dGluYSwgYSBjaXR5IGluIEdhbGxpYSBDaXNwYWRhbmEsIGVhcmx5IGluIHRoZSB5ZWFyIDQzIEIuQy4gT2N0YXZpdXMgQ2Flc2FyIGFjdGVkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIHR3byBjb25zdWxzLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAzLjEwLjcxIiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuQy48L3RpdGxlPiwgaWlpLiA3MS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kLCBib3RoIGNvbnN1bHMgaGF2aW5nIGRpZWQgYWZ0ZXIgdGhlIGJhdHRsZSwgdGhlIGZvcmNlcyBoYWQgdW5pdGVkIHVuZGVyIENhZXNhciwgdGhlIHNlbmF0ZSBiZWNhbWUgYWZyYWlkIG9mIGEgeW91bmcgbWFuIHdobyBoYWQgZW5qb3llZCBzdWNoIGJyaWxsaWFudCBnb29kIGZvcnR1bmUsIGFuZCBlbmRlYXZvdXJlZCBieSBob25vdXJzIGFuZCBnaWZ0cyB0byBjYWxsIGhpcyB0cm9vcHMgYXdheSBmcm9tIGhpbSBhbmQgdG8gY2lyY3Vtc2NyaWJlIGhpcyBwb3dlciwgb24gdGhlIGdyb3VuZCB0aGF0IHRoZXJlIHdhcyBubyBuZWVkIG9mIGRlZmVuc2l2ZSBhcm1pZXMgbm93IHRoYXQgQW50b255IGhhZCB0YWtlbiB0byBmbGlnaHQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAzLjEwLjcxIiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuQy48L3RpdGxlPiwgaWlpLiA3MS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuQy48L3RpdGxlPiwgaWlpLiA3MS48L3RyYW5zbGF0aW9uPg=="
translation['45.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlVuZGVyIHRoZXNlIGNpcmN1bXN0YW5jZXMgQ2Flc2FyIHRvb2sgYWxhcm0gYW5kIHNlY3JldGx5IHNlbnQgbWVzc2VuZ2VycyB0byBDaWNlcm8gYmVnZ2luZyBhbmQgdXJnaW5nIGhpbSB0byBvYnRhaW4gdGhlIGNvbnN1bHNoaXAgZm9yIHRoZW0gYm90aCwgYnV0IHRvIG1hbmFnZSBhZmZhaXJzIGFzIGhlIGhpbXNlbGYgdGhvdWdodCBiZXN0LCBhZnRlciBhc3N1bWluZyB0aGUgb2ZmaWNlLCBhbmQgdG8gZGlyZWN0IGluIGFsbCB0aGluZ3MgYSB5b3V0aGZ1bCBjb2xsZWFndWUgd2hvIG9ubHkgY3JhdmVkIG5hbWUgYW5kIGZhbWUuIEFuZCBDYWVzYXIgaGltc2VsZiBhZG1pdHRlZCBhZnRlcndhcmRzIHRoYXQgaXQgd2FzIHRoZSBmZWFyIG9mIGhhdmluZyBoaXMgdHJvb3BzIGRpc2JhbmRlZCBhbmQgdGhlIGRhbmdlciBvZiBmaW5kaW5nIGhpbXNlbGYgbGVmdCBhbG9uZSB3aGljaCBsZWQgaGltIHRvIG1ha2UgdXNlIGluIGFuIGVtZXJnZW5jeSBvZiBDaWNlcm8ncyBsb3ZlIG9mIHBvd2VyLCBieSBpbmR1Y2luZyBoaW0gdG8gc3VlIGZvciB0aGUgY29uc3Vsc2hpcCB3aXRoIGhpcyBjby1vcGVyYXRpb24gYW5kIGFzc2lzdGFuY2UgaW4gdGhlIGNhbnZhc3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIGluZGVlZCwgbW9yZSB0aGFuIGF0IGFueSBvdGhlciB0aW1lLCBDaWNlcm8gd2FzIGxlZCBvbiBhbmQgY2hlYXRlZCwgYW4gb2xkIG1hbiBieSBhIHlvdW5nIG1hbi4gSGUgYXNzaXN0ZWQgQ2Flc2FyIGluIGhpcyBjYW52YXNzIGFuZCBpbmR1Y2VkIHRoZSBzZW5hdGUgdG8gZmF2b3VyIGhpbS4gRm9yIHRoaXMgaGUgd2FzIGJsYW1lZCBieSBoaXMgZnJpZW5kcyBhdCB0aGUgdGltZSwgYW5kIHNob3J0bHkgYWZ0ZXJ3YXJkcyBoZSBwZXJjZWl2ZWQgdGhhdCBoZSBoYWQgcnVpbmVkIGhpbXNlbGYgYW5kIGJldHJheWVkIHRoZSBsaWJlcnR5IG9mIHRoZSBwZW9wbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciB0aGUgeW91bmcgbWFuIGhhZCB3YXhlZCBzdHJvbmcgYW5kIG9idGFpbmVkIHRoZSBjb25zdWxzaGlwLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIEF1Z3VzdCwgNDMgQi5DLiwgd2hlbiBvbmx5IHR3ZW50eSB5ZWFycyBvZiBhZ2UuPC9ub3RlPiBoZSBnYXZlIENpY2VybyB0aGUgZ28tYnksIGFuZCBhZnRlciBtYWtpbmcgZnJpZW5kcyB3aXRoIEFudG9ueSBhbmQgTGVwaWR1cyBhbmQgdW5pdGluZyBoaXMgZm9yY2VzIHdpdGggdGhlaXJzLCBoZSBkaXZpZGVkIHRoZSBzb3ZlcmVpZ250eSB3aXRoIHRoZW0sIGxpa2UgYW55IG90aGVyIHBpZWNlIG9mIHByb3BlcnR5LiBBbmQgYSBsaXN0IHdhcyBtYWRlIG91dCBieSB0aGVtIG9mIG1lbiB3aG8gbXVzdCBiZSBwdXQgdG8gZGVhdGgsIG1vcmUgdGhhbiB0d28gaHVuZHJlZCBpbiBudW1iZXIuIFRoZSBwcm9zY3JpcHRpb24gb2YgQ2ljZXJvLCBob3dldmVyLCBjYXVzZWQgbW9zdCBzdHJpZmUgaW4gdGhlaXIgZGViYXRlcywgQW50b255IGNvbnNlbnRpbmcgdG8gbm8gdGVybXMgdW5sZXNzIENpY2VybyBzaG91bGQgYmUgdGhlIGZpcnN0IG1hbiB0byBiZSBwdXQgdG8gZGVhdGgsIExlcGlkdXMgc2lkaW5nIHdpdGggQW50b255LCBhbmQgQ2Flc2FyIGhvbGRpbmcgb3V0IGFnYWluc3QgdGhlbSBib3RoLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGhlbGQgc2VjcmV0IG1lZXRpbmdzIGJ5IHRoZW1zZWx2ZXMgbmVhciB0aGUgY2l0eSBvZiBCb25vbmlhIGZvciB0aHJlZSBkYXlzLCBjb21pbmcgdG9nZXRoZXIgaW4gYSBwbGFjZSBhdCBzb21lIGRpc3RhbmNlIGZyb20gdGhlIGNhbXBzIGFuZCBzdXJyb3VuZGVkIGJ5IGEgcml2ZXIuIEl0IGlzIHNhaWQgdGhhdCBmb3IgdGhlIGZpcnN0IHR3byBkYXlzIENhZXNhciBrZXB0IHVwIGhpcyBzdHJ1Z2dsZSB0byBzYXZlIENpY2VybywgYnV0IHlpZWxkZWQgb24gdGhlIHRoaXJkIGFuZCBnYXZlIGhpbSB1cC4gVGhlIHRlcm1zIG9mIHRoZWlyIG11dHVhbCBjb25jZXNzaW9ucyB3ZXJlIGFzIGZvbGxvd3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciB3YXMgdG8gYWJhbmRvbiBDaWNlcm8sIExlcGlkdXMgaGlzIGJyb3RoZXIgUGF1bHVzLCBhbmQgQW50b255IEx1Y2l1cyBDYWVzYXIsIHdobyB3YXMgaGlzIHVuY2xlIG9uIHRoZSBtb3RoZXIncyBzaWRlLiBTbyBmYXIgZGlkIGFuZ2VyIGFuZCBmdXJ5IGxlYWQgdGhlbSB0byByZW5vdW5jZSB0aGVpciBodW1hbiBzZW50aW1lbnRzLCBvciByYXRoZXIsIHRoZXkgc2hvd2VkIHRoYXQgbm8gd2lsZCBiZWFzdCBpcyBtb3JlIHNhdmFnZSB0aGFuIG1hbiB3aGVuIGhpcyBwYXNzaW9uIGlzIHN1cHBsZW1lbnRlZCBieSBwb3dlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['46.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSwgaW5kZWVkLCBtb3JlIHRoYW4gYXQgYW55IG90aGVyIHRpbWUsIENpY2VybyB3YXMgbGVkIG9uIGFuZCBjaGVhdGVkLCBhbiBvbGQgbWFuIGJ5IGEgeW91bmcgbWFuLiBIZSBhc3Npc3RlZCBDYWVzYXIgaW4gaGlzIGNhbnZhc3MgYW5kIGluZHVjZWQgdGhlIHNlbmF0ZSB0byBmYXZvdXIgaGltLiBGb3IgdGhpcyBoZSB3YXMgYmxhbWVkIGJ5IGhpcyBmcmllbmRzIGF0IHRoZSB0aW1lLCBhbmQgc2hvcnRseSBhZnRlcndhcmRzIGhlIHBlcmNlaXZlZCB0aGF0IGhlIGhhZCBydWluZWQgaGltc2VsZiBhbmQgYmV0cmF5ZWQgdGhlIGxpYmVydHkgb2YgdGhlIHBlb3BsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['46.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciB0aGUgeW91bmcgbWFuIGhhZCB3YXhlZCBzdHJvbmcgYW5kIG9idGFpbmVkIHRoZSBjb25zdWxzaGlwLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gQXVndXN0LCA0MyBCLkMuLCB3aGVuIG9ubHkgdHdlbnR5IHllYXJzIG9mIGFnZS48L25vdGU+IGhlIGdhdmUgQ2ljZXJvIHRoZSBnby1ieSwgYW5kIGFmdGVyIG1ha2luZyBmcmllbmRzIHdpdGggQW50b255IGFuZCBMZXBpZHVzIGFuZCB1bml0aW5nIGhpcyBmb3JjZXMgd2l0aCB0aGVpcnMsIGhlIGRpdmlkZWQgdGhlIHNvdmVyZWlnbnR5IHdpdGggdGhlbSwgbGlrZSBhbnkgb3RoZXIgcGllY2Ugb2YgcHJvcGVydHkuIEFuZCBhIGxpc3Qgd2FzIG1hZGUgb3V0IGJ5IHRoZW0gb2YgbWVuIHdobyBtdXN0IGJlIHB1dCB0byBkZWF0aCwgbW9yZSB0aGFuIHR3byBodW5kcmVkIGluIG51bWJlci4gVGhlIHByb3NjcmlwdGlvbiBvZiBDaWNlcm8sIGhvd2V2ZXIsIGNhdXNlZCBtb3N0IHN0cmlmZSBpbiB0aGVpciBkZWJhdGVzLCBBbnRvbnkgY29uc2VudGluZyB0byBubyB0ZXJtcyB1bmxlc3MgQ2ljZXJvIHNob3VsZCBiZSB0aGUgZmlyc3QgbWFuIHRvIGJlIHB1dCB0byBkZWF0aCwgTGVwaWR1cyBzaWRpbmcgd2l0aCBBbnRvbnksIGFuZCBDYWVzYXIgaG9sZGluZyBvdXQgYWdhaW5zdCB0aGVtIGJvdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['46.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgaGVsZCBzZWNyZXQgbWVldGluZ3MgYnkgdGhlbXNlbHZlcyBuZWFyIHRoZSBjaXR5IG9mIEJvbm9uaWEgZm9yIHRocmVlIGRheXMsIGNvbWluZyB0b2dldGhlciBpbiBhIHBsYWNlIGF0IHNvbWUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtcHMgYW5kIHN1cnJvdW5kZWQgYnkgYSByaXZlci4gSXQgaXMgc2FpZCB0aGF0IGZvciB0aGUgZmlyc3QgdHdvIGRheXMgQ2Flc2FyIGtlcHQgdXAgaGlzIHN0cnVnZ2xlIHRvIHNhdmUgQ2ljZXJvLCBidXQgeWllbGRlZCBvbiB0aGUgdGhpcmQgYW5kIGdhdmUgaGltIHVwLiBUaGUgdGVybXMgb2YgdGhlaXIgbXV0dWFsIGNvbmNlc3Npb25zIHdlcmUgYXMgZm9sbG93cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['46.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciB3YXMgdG8gYWJhbmRvbiBDaWNlcm8sIExlcGlkdXMgaGlzIGJyb3RoZXIgUGF1bHVzLCBhbmQgQW50b255IEx1Y2l1cyBDYWVzYXIsIHdobyB3YXMgaGlzIHVuY2xlIG9uIHRoZSBtb3RoZXIncyBzaWRlLiBTbyBmYXIgZGlkIGFuZ2VyIGFuZCBmdXJ5IGxlYWQgdGhlbSB0byByZW5vdW5jZSB0aGVpciBodW1hbiBzZW50aW1lbnRzLCBvciByYXRoZXIsIHRoZXkgc2hvd2VkIHRoYXQgbm8gd2lsZCBiZWFzdCBpcyBtb3JlIHNhdmFnZSB0aGFuIG1hbiB3aGVuIGhpcyBwYXNzaW9uIGlzIHN1cHBsZW1lbnRlZCBieSBwb3dlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgdGhpcyB3YXMgZ29pbmcgb24sIENpY2VybyB3YXMgYXQgaGlzIG93biBjb3VudHJ5LXNlYXQgaW4gVHVzY3VsdW0sIGhhdmluZyBoaXMgYnJvdGhlciB3aXRoIGhpbTsgYnV0IHdoZW4gdGhleSBsZWFybmVkIG9mIHRoZSBwcm9zY3JpcHRpb25zIHRoZXkgZGV0ZXJtaW5lZCB0byByZW1vdmUgdG8gQXN0dXJhLCBhIHBsYWNlIG9mIENpY2VybydzIG9uIHRoZSBzZWEtY29hc3QsIGFuZCBmcm9tIHRoZXJlIHRvIHNhaWwgdG8gQnJ1dHVzIGluIE1hY2Vkb25pYTsgZm9yIGFscmVhZHkgYSByZXBvcnQgd2FzIGN1cnJlbnQgdGhhdCBoZSB3YXMgaW4gZm9yY2UgdGhlcmUuIFNvIHRoZXkgd2VyZSBjYXJyaWVkIGFsb25nIGluIGxpdHRlcnMsIGJlaW5nIHdvcm4gb3V0IHdpdGggZ3JpZWY7IGFuZCBvbiB0aGUgd2F5IHRoZXkgd291bGQgaGFsdCwgYW5kIHdpdGggdGhlaXIgbGl0dGVycyBwbGFjZWQgc2lkZSBieSBzaWRlIHdvdWxkIGxhbWVudCB0byBvbmUgYW5vdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFF1aW50dXMgd2FzIHRoZSBtb3JlIGRlamVjdGVkIGFuZCBiZWdhbiB0byByZWZsZWN0IHVwb24gaGlzIGRlc3RpdHV0ZSBjb25kaXRpb247IGZvciBoZSBzYWlkIHRoYXQgaGUgaGFkIHRha2VuIG5vdGhpbmcgZnJvbSBob21lLCBuYXksIENpY2VybyB0b28gaGFkIHNjYW50eSBwcm92aXNpb24gZm9yIHRoZSBqb3VybmV5OyBpdCB3YXMgYmV0dGVyLCB0aGVuLCBoZSBzYWlkLCB0aGF0IENpY2VybyBzaG91bGQgcHJlc3Mgb24gaW4gaGlzIGZsaWdodCwgYnV0IHRoYXQgaGUgaGltc2VsZiBzaG91bGQgZ2V0IHdoYXQgaGUgd2FudGVkIGZyb20gaG9tZSBhbmQgdGhlbiBoYXN0ZW4gYWZ0ZXIgaGltLiBUaGlzIHRoZXkgZGVjaWRlZCB0byBkbywgYW5kIGFmdGVyIGVtYnJhY2luZyBvbmUgYW5vdGhlciBhbmQgd2VlcGluZyBhbG91ZCwgdGhleSBwYXJ0ZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgdGhpcyB3YXMgZ29pbmcgb24sIENpY2VybyB3YXMgYXQgaGlzIG93biBjb3VudHJ5LXNlYXQgaW4gVHVzY3VsdW0sIGhhdmluZyBoaXMgYnJvdGhlciB3aXRoIGhpbTsgYnV0IHdoZW4gdGhleSBsZWFybmVkIG9mIHRoZSBwcm9zY3JpcHRpb25zIHRoZXkgZGV0ZXJtaW5lZCB0byByZW1vdmUgdG8gQXN0dXJhLCBhIHBsYWNlIG9mIENpY2VybydzIG9uIHRoZSBzZWEtY29hc3QsIGFuZCBmcm9tIHRoZXJlIHRvIHNhaWwgdG8gQnJ1dHVzIGluIE1hY2Vkb25pYTsgZm9yIGFscmVhZHkgYSByZXBvcnQgd2FzIGN1cnJlbnQgdGhhdCBoZSB3YXMgaW4gZm9yY2UgdGhlcmUuIFNvIHRoZXkgd2VyZSBjYXJyaWVkIGFsb25nIGluIGxpdHRlcnMsIGJlaW5nIHdvcm4gb3V0IHdpdGggZ3JpZWY7IGFuZCBvbiB0aGUgd2F5IHRoZXkgd291bGQgaGFsdCwgYW5kIHdpdGggdGhlaXIgbGl0dGVycyBwbGFjZWQgc2lkZSBieSBzaWRlIHdvdWxkIGxhbWVudCB0byBvbmUgYW5vdGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['47.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBRdWludHVzIHdhcyB0aGUgbW9yZSBkZWplY3RlZCBhbmQgYmVnYW4gdG8gcmVmbGVjdCB1cG9uIGhpcyBkZXN0aXR1dGUgY29uZGl0aW9uOyBmb3IgaGUgc2FpZCB0aGF0IGhlIGhhZCB0YWtlbiBub3RoaW5nIGZyb20gaG9tZSwgbmF5LCBDaWNlcm8gdG9vIGhhZCBzY2FudHkgcHJvdmlzaW9uIGZvciB0aGUgam91cm5leTsgaXQgd2FzIGJldHRlciwgdGhlbiwgaGUgc2FpZCwgdGhhdCBDaWNlcm8gc2hvdWxkIHByZXNzIG9uIGluIGhpcyBmbGlnaHQsIGJ1dCB0aGF0IGhlIGhpbXNlbGYgc2hvdWxkIGdldCB3aGF0IGhlIHdhbnRlZCBmcm9tIGhvbWUgYW5kIHRoZW4gaGFzdGVuIGFmdGVyIGhpbS4gVGhpcyB0aGV5IGRlY2lkZWQgdG8gZG8sIGFuZCBhZnRlciBlbWJyYWNpbmcgb25lIGFub3RoZXIgYW5kIHdlZXBpbmcgYWxvdWQsIHRoZXkgcGFydGVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0aGVuIFF1aW50dXMsIG5vdCBtYW55IGRheXMgYWZ0ZXJ3YXJkcywgd2FzIGJldHJheWVkIGJ5IGhpcyBzZXJ2YW50cyB0byB0aG9zZSB3aG8gd2VyZSBpbiBzZWFyY2ggb2YgaGltLCBhbmQgcHV0IHRvIGRlYXRoLCB0b2dldGhlciB3aXRoIGhpcyBzb24uIEJ1dCBDaWNlcm8gd2FzIGJyb3VnaHQgdG8gQXN0dXJhLCBhbmQgZmluZGluZyBhIHZlc3NlbCB0aGVyZSBoZSBlbWJhcmtlZCBhdCBvbmNlIGFuZCBjb2FzdGVkIGFsb25nIGFzIGZhciBhcyBDaXJjYWV1bSwgd2l0aCB0aGUgd2luZCBpbiBoaXMgZmF2b3VyLiBGcm9tIHRoZXJlIGhpcyBwaWxvdHMgd2lzaGVkIHRvIHNldCBzYWlsIGF0IG9uY2UsIGJ1dCBDaWNlcm8sIHdoZXRoZXIgaXQgd2FzIHRoYXQgaGUgZmVhcmVkIHRoZSBzZWEsIG9yIGhhZCBub3QgeWV0IGFsdG9nZXRoZXIgZ2l2ZW4gdXAgaGlzIHRydXN0IGluIENhZXNhciwgd2VudCBhc2hvcmUgYW5kIHRyYXZlbGxlZCBhbG9uZyBvbiBmb290IGEgaHVuZHJlZCBmdXJsb25ncyBpbiB0aGUgZGlyZWN0aW9uIG9mIFJvbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZ2FpbiBsb3NpbmcgcmVzb2x1dGlvbiBhbmQgY2hhbmdpbmcgaGlzIG1pbmQsIGhlIHdlbnQgZG93biB0byB0aGUgc2VhIGF0IEFzdHVyYS4gQW5kIHRoZXJlIGhlIHNwZW50IHRoZSBuaWdodCBpbiBkcmVhZGZ1bCBhbmQgZGVzcGVyYXRlIGNhbGN1bGF0aW9uczsgaGUgYWN0dWFsbHkgbWFkZSB1cCBoaXMgbWluZCB0byBlbnRlciBDYWVzYXIncyBob3VzZSBieSBzdGVhbHRoLCB0byBzbGF5IGhpbXNlbGYgdXBvbiB0aGUgaGVhcnRoLCBhbmQgc28gdG8gZmFzdGVuIHVwb24gQ2Flc2FyIGFuIGF2ZW5naW5nIGRhZW1vbi4gQnV0IGEgZmVhciBvZiB0b3J0dXJlcyBkcm92ZSBoaW0gZnJvbSB0aGlzIGNvdXJzZSBhbHNvOyB0aGVuLCByZXZvbHZpbmcgaW4gaGlzIG1pbmQgbWFueSBjb25mdXNlZCBhbmQgY29udHJhZGljdG9yeSBwdXJwb3NlcywgaGUgcHV0IGhpbXNlbGYgaW4gdGhlIGhhbmRzIG9mIGhpcyBzZXJ2YW50cyB0byBiZSB0YWtlbiBieSBzZWEgdG8gQ2FpZXRhLCB3aGVyZSBoZSBoYWQgbGFuZHMgYW5kIGFuIGFncmVlYWJsZSByZXRyZWF0IGluIHN1bW1lciB0aW1lLCB3aGVuIHRoZSBicmVhdGggb2YgdGhlIEV0ZXNpYW4gd2luZHMgaXMgbW9zdCBwbGVhc2FudC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['47.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZW4gUXVpbnR1cywgbm90IG1hbnkgZGF5cyBhZnRlcndhcmRzLCB3YXMgYmV0cmF5ZWQgYnkgaGlzIHNlcnZhbnRzIHRvIHRob3NlIHdobyB3ZXJlIGluIHNlYXJjaCBvZiBoaW0sIGFuZCBwdXQgdG8gZGVhdGgsIHRvZ2V0aGVyIHdpdGggaGlzIHNvbi4gQnV0IENpY2VybyB3YXMgYnJvdWdodCB0byBBc3R1cmEsIGFuZCBmaW5kaW5nIGEgdmVzc2VsIHRoZXJlIGhlIGVtYmFya2VkIGF0IG9uY2UgYW5kIGNvYXN0ZWQgYWxvbmcgYXMgZmFyIGFzIENpcmNhZXVtLCB3aXRoIHRoZSB3aW5kIGluIGhpcyBmYXZvdXIuIEZyb20gdGhlcmUgaGlzIHBpbG90cyB3aXNoZWQgdG8gc2V0IHNhaWwgYXQgb25jZSwgYnV0IENpY2Vybywgd2hldGhlciBpdCB3YXMgdGhhdCBoZSBmZWFyZWQgdGhlIHNlYSwgb3IgaGFkIG5vdCB5ZXQgYWx0b2dldGhlciBnaXZlbiB1cCBoaXMgdHJ1c3QgaW4gQ2Flc2FyLCB3ZW50IGFzaG9yZSBhbmQgdHJhdmVsbGVkIGFsb25nIG9uIGZvb3QgYSBodW5kcmVkIGZ1cmxvbmdzIGluIHRoZSBkaXJlY3Rpb24gb2YgUm9tZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['47.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZ2FpbiBsb3NpbmcgcmVzb2x1dGlvbiBhbmQgY2hhbmdpbmcgaGlzIG1pbmQsIGhlIHdlbnQgZG93biB0byB0aGUgc2VhIGF0IEFzdHVyYS4gQW5kIHRoZXJlIGhlIHNwZW50IHRoZSBuaWdodCBpbiBkcmVhZGZ1bCBhbmQgZGVzcGVyYXRlIGNhbGN1bGF0aW9uczsgaGUgYWN0dWFsbHkgbWFkZSB1cCBoaXMgbWluZCB0byBlbnRlciBDYWVzYXIncyBob3VzZSBieSBzdGVhbHRoLCB0byBzbGF5IGhpbXNlbGYgdXBvbiB0aGUgaGVhcnRoLCBhbmQgc28gdG8gZmFzdGVuIHVwb24gQ2Flc2FyIGFuIGF2ZW5naW5nIGRhZW1vbi4gQnV0IGEgZmVhciBvZiB0b3J0dXJlcyBkcm92ZSBoaW0gZnJvbSB0aGlzIGNvdXJzZSBhbHNvOyB0aGVuLCByZXZvbHZpbmcgaW4gaGlzIG1pbmQgbWFueSBjb25mdXNlZCBhbmQgY29udHJhZGljdG9yeSBwdXJwb3NlcywgaGUgcHV0IGhpbXNlbGYgaW4gdGhlIGhhbmRzIG9mIGhpcyBzZXJ2YW50cyB0byBiZSB0YWtlbiBieSBzZWEgdG8gQ2FpZXRhLCB3aGVyZSBoZSBoYWQgbGFuZHMgYW5kIGFuIGFncmVlYWJsZSByZXRyZWF0IGluIHN1bW1lciB0aW1lLCB3aGVuIHRoZSBicmVhdGggb2YgdGhlIEV0ZXNpYW4gd2luZHMgaXMgbW9zdCBwbGVhc2FudC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBsYWNlIGhhcyBhbHNvIGEgdGVtcGxlIG9mIEFwb2xsbywgYSBsaXR0bGUgYWJvdmUgdGhlIHNlYS4gRnJvbSB0aGVuY2UgYSBmbG9jayBvZiBjcm93cyBmbGV3IHdpdGggbG91ZCBjbGFtb3VyIHRvd2FyZHMgdGhlIHZlc3NlbCBvZiBDaWNlcm8gYXMgaXQgd2FzIHJvd2VkIHRvd2FyZHMgbGFuZDsgYW5kIGFsaWdodGluZyBvbiBlaXRoZXIgZW5kIG9mIHRoZSBzYWlsLXlhcmQsIHNvbWUgY2F3ZWQsIGFuZCBvdGhlcnMgcGVja2VkIGF0IHRoZSBlbmRzIG9mIHRoZSByb3BlcywgYW5kIGV2ZXJ5Ym9keSB0aG91Z2h0IHRoYXQgdGhlIG9tZW4gd2FzIGJhZC4gTmV2ZXJ0aGVsZXNzIENpY2VybyBsYW5kZWQsIGFuZCBnb2luZyB0byBoaXMgdmlsbGEgbGF5IGRvd24gdG8gcmVzdC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBtb3N0IG9mIHRoZSBjcm93cyBwZXJjaGVkIHRoZW1zZWx2ZXMgYWJvdXQgdGhlIHdpbmRvdywgY2F3aW5nIHR1bXVsdHVvdXNseSwgYnV0IG9uZSBvZiB0aGVtIGZsZXcgZG93biB1cG9uIHRoZSBjb3VjaCB3aGVyZSBDaWNlcm8gbGF5IHdpdGggbXVmZmxlZCBoZWFkLCBhbmQgd2l0aCBpdHMgYmVhaywgbGl0dGxlIGJ5IGxpdHRsZSwgdHJpZWQgdG8gcmVtb3ZlIHRoZSBnYXJtZW50IGZyb20gaGlzIGZhY2UuIFRoZSBzZXJ2YW50cywgb24gc2VlaW5nIHRoaXMsIHJlYnVrZWQgdGhlbXNlbHZlcyBmb3Igd2FpdGluZyB0byBiZSBzcGVjdGF0b3JzIG9mIHRoZWlyIG1hc3RlcidzIG11cmRlciwgd2hpbGUgd2lsZCBiZWFzdHMgY2FtZSB0byBoaXMgaGVscCBhbmQgY2FyZWQgZm9yIGhpbSBpbiBoaXMgdW5kZXNlcnZlZCBtaXNmb3J0dW5lLCBidXQgdGhleSB0aGVtc2VsdmVzIGRpZCBub3RoaW5nIGluIGhpcyBkZWZlbmNlLiBTbyBwYXJ0bHkgYnkgZW50cmVhdHksIGFuZCBwYXJ0bHkgYnkgZm9yY2UsIHRoZXkgdG9vayBoaW0gYW5kIGNhcnJpZWQgaGltIGluIGhpcyBsaXR0ZXIgdG93YXJkcyB0aGUgc2VhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwbGFjZSBoYXMgYWxzbyBhIHRlbXBsZSBvZiBBcG9sbG8sIGEgbGl0dGxlIGFib3ZlIHRoZSBzZWEuIEZyb20gdGhlbmNlIGEgZmxvY2sgb2YgY3Jvd3MgZmxldyB3aXRoIGxvdWQgY2xhbW91ciB0b3dhcmRzIHRoZSB2ZXNzZWwgb2YgQ2ljZXJvIGFzIGl0IHdhcyByb3dlZCB0b3dhcmRzIGxhbmQ7IGFuZCBhbGlnaHRpbmcgb24gZWl0aGVyIGVuZCBvZiB0aGUgc2FpbC15YXJkLCBzb21lIGNhd2VkLCBhbmQgb3RoZXJzIHBlY2tlZCBhdCB0aGUgZW5kcyBvZiB0aGUgcm9wZXMsIGFuZCBldmVyeWJvZHkgdGhvdWdodCB0aGF0IHRoZSBvbWVuIHdhcyBiYWQuIE5ldmVydGhlbGVzcyBDaWNlcm8gbGFuZGVkLCBhbmQgZ29pbmcgdG8gaGlzIHZpbGxhIGxheSBkb3duIHRvIHJlc3QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['47.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gbW9zdCBvZiB0aGUgY3Jvd3MgcGVyY2hlZCB0aGVtc2VsdmVzIGFib3V0IHRoZSB3aW5kb3csIGNhd2luZyB0dW11bHR1b3VzbHksIGJ1dCBvbmUgb2YgdGhlbSBmbGV3IGRvd24gdXBvbiB0aGUgY291Y2ggd2hlcmUgQ2ljZXJvIGxheSB3aXRoIG11ZmZsZWQgaGVhZCwgYW5kIHdpdGggaXRzIGJlYWssIGxpdHRsZSBieSBsaXR0bGUsIHRyaWVkIHRvIHJlbW92ZSB0aGUgZ2FybWVudCBmcm9tIGhpcyBmYWNlLiBUaGUgc2VydmFudHMsIG9uIHNlZWluZyB0aGlzLCByZWJ1a2VkIHRoZW1zZWx2ZXMgZm9yIHdhaXRpbmcgdG8gYmUgc3BlY3RhdG9ycyBvZiB0aGVpciBtYXN0ZXIncyBtdXJkZXIsIHdoaWxlIHdpbGQgYmVhc3RzIGNhbWUgdG8gaGlzIGhlbHAgYW5kIGNhcmVkIGZvciBoaW0gaW4gaGlzIHVuZGVzZXJ2ZWQgbWlzZm9ydHVuZSwgYnV0IHRoZXkgdGhlbXNlbHZlcyBkaWQgbm90aGluZyBpbiBoaXMgZGVmZW5jZS4gU28gcGFydGx5IGJ5IGVudHJlYXR5LCBhbmQgcGFydGx5IGJ5IGZvcmNlLCB0aGV5IHRvb2sgaGltIGFuZCBjYXJyaWVkIGhpbSBpbiBoaXMgbGl0dGVyIHRvd2FyZHMgdGhlIHNlYS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG1lYW50aW1lIGhpcyBhc3Nhc3NpbnMgY2FtZSB0byB0aGUgdmlsbGEsIEhlcmVubml1cyBhIGNlbnR1cmlvbiwgYW5kIFBvcGlsbGl1cyBhIHRyaWJ1bmUsIHdobyBoYWQgb25jZSBiZWVuIHByb3NlY3V0ZWQgZm9yIHBhcnJpY2lkZSBhbmQgZGVmZW5kZWQgYnkgQ2ljZXJvOyBhbmQgdGhleSBoYWQgaGVscGVycy4gQWZ0ZXIgdGhleSBoYWQgYnJva2VuIGluIHRoZSBkb29yLCB3aGljaCB0aGV5IGZvdW5kIGNsb3NlZCwgQ2ljZXJvIHdhcyBub3QgdG8gYmUgc2VlbiwgYW5kIHRoZSBpbm1hdGVzIHNhaWQgdGhleSBrbmV3IG5vdCB3aGVyZSBoZSB3YXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdlIGFyZSB0b2xkLCBhIHlvdXRoIHdobyBoYWQgYmVlbiBsaWJlcmFsbHkgZWR1Y2F0ZWQgYnkgQ2ljZXJvLCBhbmQgd2hvIHdhcyBhIGZyZWVkbWFuIG9mIENpY2VybydzIGJyb3RoZXIgUXVpbnR1cywgUGhpbG9sb2d1cyBieSBuYW1lLCB0b2xkIHRoZSB0cmlidW5lIHRoYXQgdGhlIGxpdHRlciB3YXMgYmVpbmcgY2FycmllZCB0aHJvdWdoIHRoZSB3b29kZWQgYW5kIHNoYWR5IHdhbGtzIHRvd2FyZHMgdGhlIHNlYS4gVGhlIHRyaWJ1bmUsIGFjY29yZGluZ2x5LCB0YWtpbmcgYSBmZXcgaGVscGVycyB3aXRoIGhpbSwgcmFuIHJvdW5kIHRvd2FyZHMgdGhlIGV4aXQsIGJ1dCBIZXJlbm5pdXMgaGFzdGVuZWQgb24gdGhlIHJ1biB0aHJvdWdoIHRoZSB3YWxrcywgYW5kIENpY2VybywgcGVyY2VpdmluZyBoaW0sIG9yZGVyZWQgdGhlIHNlcnZhbnRzIHRvIHNldCB0aGUgbGl0dGVyIGRvd24gd2hlcmUgdGhleSB3ZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhlIGhpbXNlbGYsIGNsYXNwaW5nIGhpcyBjaGluIHdpdGggaGlzIGxlZnQgaGFuZCwgYXMgd2FzIGhpcyB3b250LCBsb29rZWQgc3RlYWRmYXN0bHkgYXQgaGlzIHNsYXllcnMsIGhpcyBoZWFkIGFsbCBzcXVhbGlkIGFuZCB1bmtlbXB0LCBhbmQgaGlzIGZhY2Ugd2FzdGVkIHdpdGggYW54aWV0eSwgc28gdGhhdCBtb3N0IG9mIHRob3NlIHRoYXQgc3Rvb2QgYnkgY292ZXJlZCB0aGVpciBmYWNlcyB3aGlsZSBIZXJlbm5pdXMgd2FzIHNsYXlpbmcgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgc3RyZXRjaGVkIGhpcyBuZWNrIGZvcnRoIGZyb20gdGhlIGxpdHRlciBhbmQgd2FzIHNsYWluLCBiZWluZyB0aGVuIGluIGhpcyBzaXh0eS1mb3VydGggeWVhci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DaWNlcm8gd2FzIG11cmRlcmVkIG9uIHRoZSBzZXZlbnRoIG9mIERlY2VtYmVyLCA0MyBCLkMuPC9ub3RlPiBIZXJlbm5pdXMgY3V0IG9mZiBoaXMgaGVhZCwgYnkgQW50b255J3MgY29tbWFuZCwgYW5kIGhpcyBoYW5kc+KAlHRoZSBoYW5kcyB3aXRoIHdoaWNoIGhlIHdyb3RlIHRoZSBQaGlsaXBwaWNzLiBGb3IgQ2ljZXJvIGhpbXNlbGYgZW50aXRsZWQgaGlzIHNwZWVjaGVzIGFnYWluc3QgQW50b255IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UGhpbGlwcGljcyw8L3E+IGFuZCB0byB0aGlzIGRheSB0aGUgZG9jdW1lbnRzIGFyZSBjYWxsZWQgUGhpbGlwcGljcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG1lYW50aW1lIGhpcyBhc3Nhc3NpbnMgY2FtZSB0byB0aGUgdmlsbGEsIEhlcmVubml1cyBhIGNlbnR1cmlvbiwgYW5kIFBvcGlsbGl1cyBhIHRyaWJ1bmUsIHdobyBoYWQgb25jZSBiZWVuIHByb3NlY3V0ZWQgZm9yIHBhcnJpY2lkZSBhbmQgZGVmZW5kZWQgYnkgQ2ljZXJvOyBhbmQgdGhleSBoYWQgaGVscGVycy4gQWZ0ZXIgdGhleSBoYWQgYnJva2VuIGluIHRoZSBkb29yLCB3aGljaCB0aGV5IGZvdW5kIGNsb3NlZCwgQ2ljZXJvIHdhcyBub3QgdG8gYmUgc2VlbiwgYW5kIHRoZSBpbm1hdGVzIHNhaWQgdGhleSBrbmV3IG5vdCB3aGVyZSBoZSB3YXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['48.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdlIGFyZSB0b2xkLCBhIHlvdXRoIHdobyBoYWQgYmVlbiBsaWJlcmFsbHkgZWR1Y2F0ZWQgYnkgQ2ljZXJvLCBhbmQgd2hvIHdhcyBhIGZyZWVkbWFuIG9mIENpY2VybydzIGJyb3RoZXIgUXVpbnR1cywgUGhpbG9sb2d1cyBieSBuYW1lLCB0b2xkIHRoZSB0cmlidW5lIHRoYXQgdGhlIGxpdHRlciB3YXMgYmVpbmcgY2FycmllZCB0aHJvdWdoIHRoZSB3b29kZWQgYW5kIHNoYWR5IHdhbGtzIHRvd2FyZHMgdGhlIHNlYS4gVGhlIHRyaWJ1bmUsIGFjY29yZGluZ2x5LCB0YWtpbmcgYSBmZXcgaGVscGVycyB3aXRoIGhpbSwgcmFuIHJvdW5kIHRvd2FyZHMgdGhlIGV4aXQsIGJ1dCBIZXJlbm5pdXMgaGFzdGVuZWQgb24gdGhlIHJ1biB0aHJvdWdoIHRoZSB3YWxrcywgYW5kIENpY2VybywgcGVyY2VpdmluZyBoaW0sIG9yZGVyZWQgdGhlIHNlcnZhbnRzIHRvIHNldCB0aGUgbGl0dGVyIGRvd24gd2hlcmUgdGhleSB3ZXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['48.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgaGltc2VsZiwgY2xhc3BpbmcgaGlzIGNoaW4gd2l0aCBoaXMgbGVmdCBoYW5kLCBhcyB3YXMgaGlzIHdvbnQsIGxvb2tlZCBzdGVhZGZhc3RseSBhdCBoaXMgc2xheWVycywgaGlzIGhlYWQgYWxsIHNxdWFsaWQgYW5kIHVua2VtcHQsIGFuZCBoaXMgZmFjZSB3YXN0ZWQgd2l0aCBhbnhpZXR5LCBzbyB0aGF0IG1vc3Qgb2YgdGhvc2UgdGhhdCBzdG9vZCBieSBjb3ZlcmVkIHRoZWlyIGZhY2VzIHdoaWxlIEhlcmVubml1cyB3YXMgc2xheWluZyBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['48.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBzdHJldGNoZWQgaGlzIG5lY2sgZm9ydGggZnJvbSB0aGUgbGl0dGVyIGFuZCB3YXMgc2xhaW4sIGJlaW5nIHRoZW4gaW4gaGlzIHNpeHR5LWZvdXJ0aCB5ZWFyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2ljZXJvIHdhcyBtdXJkZXJlZCBvbiB0aGUgc2V2ZW50aCBvZiBEZWNlbWJlciwgNDMgQi5DLjwvbm90ZT4gSGVyZW5uaXVzIGN1dCBvZmYgaGlzIGhlYWQsIGJ5IEFudG9ueSdzIGNvbW1hbmQsIGFuZCBoaXMgaGFuZHPigJR0aGUgaGFuZHMgd2l0aCB3aGljaCBoZSB3cm90ZSB0aGUgUGhpbGlwcGljcy4gRm9yIENpY2VybyBoaW1zZWxmIGVudGl0bGVkIGhpcyBzcGVlY2hlcyBhZ2FpbnN0IEFudG9ueSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UGhpbGlwcGljcyw8L3E+IGFuZCB0byB0aGlzIGRheSB0aGUgZG9jdW1lbnRzIGFyZSBjYWxsZWQgUGhpbGlwcGljcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDaWNlcm8ncyBleHRyZW1pdGllcyB3ZXJlIGJyb3VnaHQgdG8gUm9tZSwgaXQgY2hhbmNlZCB0aGF0IEFudG9ueSB3YXMgY29uZHVjdGluZyBhbiBlbGVjdGlvbiwgYnV0IHdoZW4gaGUgaGVhcmQgb2YgdGhlaXIgYXJyaXZhbCBhbmQgc2F3IHRoZW0sIGhlIGNyaWVkIG91dCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3cgbGV0IG91ciBwcm9zY3JpcHRpb25zIGhhdmUgYW4gZW5kLjwvcT4gVGhlbiBoZSBvcmRlcmVkIHRoZSBoZWFkIGFuZCBoYW5kcyB0byBiZSBwbGFjZWQgb3ZlciB0aGUgc2hpcHMnIGJlYWtzIG9uIHRoZSByb3N0cmEsIGEgc2lnaHQgdGhhdCBtYWRlIHRoZSBSb21hbnMgc2h1ZGRlcjsgZm9yIHRoZXkgdGhvdWdodCB0aGV5IHNhdyB0aGVyZSwgbm90IHRoZSBmYWNlIG9mIENpY2VybywgYnV0IGFuIGltYWdlIG9mIHRoZSBzb3VsIG9mIEFudG9ueS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaGUgc2hvd2VkIGF0IGxlYXN0IG9uZSBzZW50aW1lbnQgb2YgZmFpciBkZWFsaW5nIGluIHRoZSBjYXNlIHdoZW4gaGUgaGFuZGVkIG92ZXIgUGhpbG9sb2d1cyB0byBQb21wb25pYSwgdGhlIHdpZmUgb2YgUXVpbnR1cy4gQW5kIHNoZSwgaGF2aW5nIGdvdCB0aGUgbWFuIGludG8gaGVyIHBvd2VyLCBiZXNpZGVzIG90aGVyIGRyZWFkZnVsIHB1bmlzaG1lbnRzIHdoaWNoIHNoZSBpbmZsaWN0ZWQgdXBvbiBoaW0sIGZvcmNlZCBoaW0gdG8gY3V0IG9mZiBoaXMgb3duIGZsZXNoIGJpdCBieSBiaXQgYW5kIHJvYXN0IGl0LCBhbmQgdGhlbiB0byBlYXQgaXQuIFRoaXMsIGluZGVlZCwgaXMgd2hhdCBzb21lIG9mIHRoZSBoaXN0b3JpYW5zIHNheTsgYnV0IENpY2VybydzIG93biBmcmVlZG1hbiwgVGlybywgbWFrZXMgbm8gbWVudGlvbiBhdCBhbGwgb2YgdGhlIHRyZWFjaGVyeSBvZiBQaGlsb2xvZ3VzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['49.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDaWNlcm8ncyBleHRyZW1pdGllcyB3ZXJlIGJyb3VnaHQgdG8gUm9tZSwgaXQgY2hhbmNlZCB0aGF0IEFudG9ueSB3YXMgY29uZHVjdGluZyBhbiBlbGVjdGlvbiwgYnV0IHdoZW4gaGUgaGVhcmQgb2YgdGhlaXIgYXJyaXZhbCBhbmQgc2F3IHRoZW0sIGhlIGNyaWVkIG91dCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5vdyBsZXQgb3VyIHByb3NjcmlwdGlvbnMgaGF2ZSBhbiBlbmQuPC9xPiBUaGVuIGhlIG9yZGVyZWQgdGhlIGhlYWQgYW5kIGhhbmRzIHRvIGJlIHBsYWNlZCBvdmVyIHRoZSBzaGlwcycgYmVha3Mgb24gdGhlIHJvc3RyYSwgYSBzaWdodCB0aGF0IG1hZGUgdGhlIFJvbWFucyBzaHVkZGVyOyBmb3IgdGhleSB0aG91Z2h0IHRoZXkgc2F3IHRoZXJlLCBub3QgdGhlIGZhY2Ugb2YgQ2ljZXJvLCBidXQgYW4gaW1hZ2Ugb2YgdGhlIHNvdWwgb2YgQW50b255LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['49.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIHNob3dlZCBhdCBsZWFzdCBvbmUgc2VudGltZW50IG9mIGZhaXIgZGVhbGluZyBpbiB0aGUgY2FzZSB3aGVuIGhlIGhhbmRlZCBvdmVyIFBoaWxvbG9ndXMgdG8gUG9tcG9uaWEsIHRoZSB3aWZlIG9mIFF1aW50dXMuIEFuZCBzaGUsIGhhdmluZyBnb3QgdGhlIG1hbiBpbnRvIGhlciBwb3dlciwgYmVzaWRlcyBvdGhlciBkcmVhZGZ1bCBwdW5pc2htZW50cyB3aGljaCBzaGUgaW5mbGljdGVkIHVwb24gaGltLCBmb3JjZWQgaGltIHRvIGN1dCBvZmYgaGlzIG93biBmbGVzaCBiaXQgYnkgYml0IGFuZCByb2FzdCBpdCwgYW5kIHRoZW4gdG8gZWF0IGl0LiBUaGlzLCBpbmRlZWQsIGlzIHdoYXQgc29tZSBvZiB0aGUgaGlzdG9yaWFucyBzYXk7IGJ1dCBDaWNlcm8ncyBvd24gZnJlZWRtYW4sIFRpcm8sIG1ha2VzIG5vIG1lbnRpb24gYXQgYWxsIG9mIHRoZSB0cmVhY2hlcnkgb2YgUGhpbG9sb2d1cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SSBsZWFybiB0aGF0IENhZXNhciwgYSBsb25nIHRpbWUgYWZ0ZXIgdGhpcywgcGFpZCBhIHZpc2l0IHRvIG9uZSBvZiBoaXMgZGF1Z2h0ZXIncyBzb25zOyBhbmQgdGhlIGJveSwgc2luY2UgaGUgaGFkIGluIGhpcyBoYW5kcyBhIGJvb2sgb2YgQ2ljZXJvJ3MsIHdhcyB0ZXJyaWZpZWQgYW5kIHNvdWdodCB0byBoaWRlIGl0IGluIGhpcyBnb3duOyBidXQgQ2Flc2FyIHNhdyBpdCwgYW5kIHRvb2sgdGhlIGJvb2ssIGFuZCByZWFkIGEgZ3JlYXQgcGFydCBvZiBpdCBhcyBoZSBzdG9vZCwgYW5kIHRoZW4gZ2F2ZSBpdCBiYWNrIHRvIHRoZSB5b3V0aCwgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgbGVhcm5lZCBtYW4sIG15IGNoaWxkLCBhIGxlYXJuZWQgbWFuIGFuZCBhIGxvdmVyIG9mIGhpcyBjb3VudHJ5LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgYXMgc29vbiBhcyBoZSBoYWQgZmluYWxseSBkZWZlYXRlZCBBbnRvbnksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXQgQWxleGFuZHJpYSwgaW4gMzAgQi5DLiAoc2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQW50LiA4MS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFudG9ueTwvdGl0bGU+LCBseHh4aS4gMSBmLjwvYmlibD4pLjwvbm90ZT4gYW5kIHdoZW4gaGUgd2FzIGhpbXNlbGYgY29uc3VsLCBoZSBjaG9zZSBDaWNlcm8ncyBzb24gYXMgaGlzIGNvbGxlYWd1ZSBpbiB0aGUgb2ZmaWNlLCBhbmQgaXQgd2FzIGluIGhpcyBjb25zdWxzaGlwIHRoYXQgdGhlIHNlbmF0ZSB0b29rIGRvd24gdGhlIHN0YXR1ZXMgb2YgQW50b255LCBtYWRlIHZvaWQgdGhlIG90aGVyIGhvbm91cnMgdGhhdCBoYWQgYmVlbiBwYWlkIGhpbSwgYW5kIGRlY3JlZWQgYmVzaWRlcyB0aGF0IG5vIEFudG9ueSBzaG91bGQgaGF2ZSB0aGUgbmFtZSBvZiBNYXJjdXMuIFRodXMgdGhlIGhlYXZlbmx5IHBvd2VycyBkZXZvbHZlZCB1cG9uIHRoZSBmYW1pbHkgb2YgQ2ljZXJvIHRoZSBmaW5hbCBzdGVwcyBpbiB0aGUgcHVuaXNobWVudCBvZiBBbnRvbnkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['49.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgbGVhcm4gdGhhdCBDYWVzYXIsIGEgbG9uZyB0aW1lIGFmdGVyIHRoaXMsIHBhaWQgYSB2aXNpdCB0byBvbmUgb2YgaGlzIGRhdWdodGVyJ3Mgc29uczsgYW5kIHRoZSBib3ksIHNpbmNlIGhlIGhhZCBpbiBoaXMgaGFuZHMgYSBib29rIG9mIENpY2VybydzLCB3YXMgdGVycmlmaWVkIGFuZCBzb3VnaHQgdG8gaGlkZSBpdCBpbiBoaXMgZ293bjsgYnV0IENhZXNhciBzYXcgaXQsIGFuZCB0b29rIHRoZSBib29rLCBhbmQgcmVhZCBhIGdyZWF0IHBhcnQgb2YgaXQgYXMgaGUgc3Rvb2QsIGFuZCB0aGVuIGdhdmUgaXQgYmFjayB0byB0aGUgeW91dGgsIHNheWluZzogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgbGVhcm5lZCBtYW4sIG15IGNoaWxkLCBhIGxlYXJuZWQgbWFuIGFuZCBhIGxvdmVyIG9mIGhpcyBjb3VudHJ5LjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
