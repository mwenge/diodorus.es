var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    translatedSection.style.backgroundColor = "";
  }
  translatedSection = document.getElementById(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  translatedSection.style.backgroundColor = "yellow";
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  translatedSection.style.backgroundColor = "";
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNpY2Vybywgb24gdGhlIG90aGVyIGhhbmQsIGJlY2FtZSB3aWRlbHkgbGVhcm5lZCBhbmQgaGFkIGEgdmFyaWV0eSBvZiBpbnRlcmVzdCBpbiB0aGUgcHVyc3VpdCBvZiBsZXR0ZXJzLCBhbmQgbGVmdCBiZWhpbmQgaGltIG5vdCBhIGZldyBwaGlsb3NvcGhpY2FsIHRyZWF0aXNlcyBvZiBoaXMgb3duIGNvbmZvcm1pbmcgdG8gdGhlIGZhc2hpb24gb2YgdGhlIEFjYWRlbXk7IGluZGVlZCwgZXZlbiBpbiB0aGUgc3BlZWNoZXMgd2hpY2ggaGUgd3JvdGUgZm9yIHRoZSBmb3J1bSBhbmQgdGhlIGNvdXJ0cyBoZSBjbGVhcmx5IGRlc2lyZXMgdG8gZGlzcGxheSBieSB0aGUgd2F5IGEgY29uc2lkZXJhYmxlIGFjcXVhaW50YW5jZSB3aXRoIGxldHRlcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHBvc3NpYmxlLCB0b28sIHRvIGdldCBhIGdsaW1wc2Ugb2YgdGhlIGNoYXJhY3RlciBvZiBlYWNoIGluIGhpcyBzdHlsZSBvZiBzcGVha2luZy4gRm9yIHRoYXQgb2YgRGVtb3N0aGVuZXMsIHdoaWNoIGhhZCBubyBwcmV0dGluZXNzIG9yIHBsZWFzYW50cnksIGFuZCB3YXMgY29uZGVuc2VkIHdpdGggYSB2aWV3IHRvIHBvd2VyIGFuZCBlYXJuZXN0bmVzcywgZGlkIG5vdCBzbWVsbCBvZiBsYW1wLXdpY2tzLCBhcyBQeXRoZWFzIHNjb2ZmaW5nbHkgc2FpZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDguMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EZW1vc3RoZW5lczwvdGl0bGU+LCB2aWlpLiAzPC9iaWJsPi48L25vdGU+IGJ1dCBvZiB3YXRlci1kcmlua2luZyBhbmQgYW54aW91cyB0aG91Z2h0LCBhbmQgb2Ygd2hhdCBtZW4gY2FsbGVkIHRoZSBiaXR0ZXJuZXNzIGFuZCBzdWxsZW5uZXNzIG9mIGhpcyBkaXNwb3NpdGlvbjsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+d2hlcmVhcyBDaWNlcm8gd2FzIG9mdGVuIGNhcnJpZWQgYXdheSBieSBoaXMgbG92ZSBvZiBqZXN0aW5nIGludG8gc2N1cnJpbGl0eSwgYW5kIHdoZW4sIHRvIGdhaW4gaGlzIGVuZHMgaW4gaGlzIGNhc2VzLCBoZSB0cmVhdGVkIG1hdHRlcnMgd29ydGh5IG9mIHNlcmlvdXMgYXR0ZW50aW9uIHdpdGggaXJvbmljYWwgbWlydGggYW5kIHBsZWFzYW50cnksIGhlIHdhcyBjYXJlbGVzcyBvZiBwcm9wcmlldHkuIFRodXMsIGluIGhpcyBkZWZlbmNlIG9mIENhZWxpdXMsIGhlIHNhaWQgdGhhdCBoaXMgY2xpZW50LCBzdXJyb3VuZGVkIGFzIGhlIHdhcyBieSBncmVhdCBsdXh1cnkgYW5kIGV4dHJhdmFnYW5jZSwgZGlkIG5vdGhpbmcgb3V0IG9mIHRoZSB3YXkgd2hlbiBpbmR1bGdpbmcgaW4gcGxlYXN1cmVzOyBmb3Igbm90IHRvIGVuam95IHdoYXQgaXMgaW4gb25lJ3MgcG9zc2Vzc2lvbiB3YXMgbWFkbmVzcywgaGUgc2FpZCwgcGFydGljdWxhcmx5IHdoZW4gdGhlIG1vc3QgZW1pbmVudCBwaGlsb3NvcGhlcnMgYXNzZXJ0IHRoYXQgdHJ1ZSBoYXBwaW5lc3MgY29uc2lzdHMgaW4gcGxlYXN1cmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIENhZWwuIDI4IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZT5wcm8gQ2FlbGlvPC90aXRsZT4sIDEyLCAyODwvYmlibD47IGJ1dCBQbHV0YXJjaCdzIGludGVycHJldGF0aW9uIGRvZXMgQ2ljZXJvIGdyZWF0IGluanVzdGljZS4gIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYWVsLiAzOSIgdmFsaWQ9InllcyI+MTcsIDM5IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdlIGFyZSB0b2xkIHRoYXQgd2hlbiBDYXRvIHByb3NlY3V0ZWQgTXVyZW5hLCBDaWNlcm8sIHdobyB3YXMgdGhlbiBjb25zdWwsIGRlZmVuZGVkIGhpbSwgYW5kIGJlY2F1c2Ugb2YgQ2F0bydzIGJlbGllZnMgbWFkZSBtdWNoIGZ1biBvZiB0aGUgU3RvaWMgc2VjdCwgaW4gdmlldyBvZiB0aGUgYWJzdXJkaXRpZXMgb2YgdGhlaXIgc28tY2FsbGVkIHBhcmFkb3hlczs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gTXVyLiAyOSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5wcm8gTXVyZW5hPC90aXRsZT4sIDI5LTMxPC9iaWJsPi48L25vdGU+ICBhbmQgd2hlbiBsb3VkIGxhdWdodGVyIHNwcmVhZCBmcm9tIHRoZSBhdWRpZW5jZSB0byB0aGUganVyb3JzLCBDYXRvLCB3aXRoIGEgcXVpZXQgc21pbGUsIHNhaWQgdG8gdGhvc2Ugd2hvIHNhdCBieTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGEgZnVubnkgbWFuIHdlIGhhdmUsIG15IGZyaWVuZHMsIGZvciBjb25zdWwhPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3b3VsZCBzZWVtIHRoYXQgQ2ljZXJvIHdhcyBuYXR1cmFsbHkgcHJvbmUgdG8gbGF1Z2h0ZXIgYW5kIGZvbmQgb2YgamVzdGluZzsgaGlzIGZhY2UsIHRvbywgd2FzIHNtaWxpbmcgYW5kIHBlYWNlZnVsLiBCdXQgaW4gdGhhdCBvZiBEZW1vc3RoZW5lcyB0aGVyZSB3YXMgYWx3YXlzIGEgY2VydGFpbiBpbnRlbnNlIHNlcmlvdXNuZXNzLCBhbmQgdGhpcyBsb29rIG9mIHRob3VnaHRmdWxuZXNzIGFuZCBhbnhpZXR5IGhlIGRpZCBub3QgZWFzaWx5IGxheSBhc2lkZS4gRm9yIHRoaXMgcmVhc29uIGhpcyBlbmVtaWVzLCBhcyBoZSBoaW1zZWxmIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gUGhpbC4gMi4zMCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5QaGlsLjwvdGl0bGU+IGlpLiAzMDwvYmlibD4uPC9ub3RlPiBjYWxsZWQgaGltIG1vcm9zZSBhbmQgaWxsLW1hbm5lcmVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHBvc3NpYmxlLCB0b28sIHRvIGdldCBhIGdsaW1wc2Ugb2YgdGhlIGNoYXJhY3RlciBvZiBlYWNoIGluIGhpcyBzdHlsZSBvZiBzcGVha2luZy4gRm9yIHRoYXQgb2YgRGVtb3N0aGVuZXMsIHdoaWNoIGhhZCBubyBwcmV0dGluZXNzIG9yIHBsZWFzYW50cnksIGFuZCB3YXMgY29uZGVuc2VkIHdpdGggYSB2aWV3IHRvIHBvd2VyIGFuZCBlYXJuZXN0bmVzcywgZGlkIG5vdCBzbWVsbCBvZiBsYW1wLXdpY2tzLCBhcyBQeXRoZWFzIHNjb2ZmaW5nbHkgc2FpZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtLiA4LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1vc3RoZW5lczwvdGl0bGU+LCB2aWlpLiAzPC9iaWJsPi48L25vdGU+IGJ1dCBvZiB3YXRlci1kcmlua2luZyBhbmQgYW54aW91cyB0aG91Z2h0LCBhbmQgb2Ygd2hhdCBtZW4gY2FsbGVkIHRoZSBiaXR0ZXJuZXNzIGFuZCBzdWxsZW5uZXNzIG9mIGhpcyBkaXNwb3NpdGlvbjsgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDguMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbW9zdGhlbmVzPC90aXRsZT4sIHZpaWkuIDM8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbW9zdGhlbmVzPC90aXRsZT4sIHZpaWkuIDM8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMgQ2ljZXJvIHdhcyBvZnRlbiBjYXJyaWVkIGF3YXkgYnkgaGlzIGxvdmUgb2YgamVzdGluZyBpbnRvIHNjdXJyaWxpdHksIGFuZCB3aGVuLCB0byBnYWluIGhpcyBlbmRzIGluIGhpcyBjYXNlcywgaGUgdHJlYXRlZCBtYXR0ZXJzIHdvcnRoeSBvZiBzZXJpb3VzIGF0dGVudGlvbiB3aXRoIGlyb25pY2FsIG1pcnRoIGFuZCBwbGVhc2FudHJ5LCBoZSB3YXMgY2FyZWxlc3Mgb2YgcHJvcHJpZXR5LiBUaHVzLCBpbiBoaXMgZGVmZW5jZSBvZiBDYWVsaXVzLCBoZSBzYWlkIHRoYXQgaGlzIGNsaWVudCwgc3Vycm91bmRlZCBhcyBoZSB3YXMgYnkgZ3JlYXQgbHV4dXJ5IGFuZCBleHRyYXZhZ2FuY2UsIGRpZCBub3RoaW5nIG91dCBvZiB0aGUgd2F5IHdoZW4gaW5kdWxnaW5nIGluIHBsZWFzdXJlczsgZm9yIG5vdCB0byBlbmpveSB3aGF0IGlzIGluIG9uZSdzIHBvc3Nlc3Npb24gd2FzIG1hZG5lc3MsIGhlIHNhaWQsIHBhcnRpY3VsYXJseSB3aGVuIHRoZSBtb3N0IGVtaW5lbnQgcGhpbG9zb3BoZXJzIGFzc2VydCB0aGF0IHRydWUgaGFwcGluZXNzIGNvbnNpc3RzIGluIHBsZWFzdXJlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2FlbC4gMjgiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIENhZWxpbzwvdGl0bGU+LCAxMiwgMjg8L2JpYmw+OyBidXQgUGx1dGFyY2gncyBpbnRlcnByZXRhdGlvbiBkb2VzIENpY2VybyBncmVhdCBpbmp1c3RpY2UuICBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYWVsLiAzOSIgdmFsaWQ9InllcyI+MTcsIDM5IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIENhZWwuIDI4IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBybyBDYWVsaW88L3RpdGxlPiwgMTIsIDI4PC9iaWJsPjsgYnV0IFBsdXRhcmNoJ3MgaW50ZXJwcmV0YXRpb24gZG9lcyBDaWNlcm8gZ3JlYXQgaW5qdXN0aWNlLiAgQ2YuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPnBybyBDYWVsaW88L3RpdGxlPiwgMTIsIDI4PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYWVsLiAzOSIgdmFsaWQ9InllcyI+MTcsIDM5IGYuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gQ2F0byBwcm9zZWN1dGVkIE11cmVuYSwgQ2ljZXJvLCB3aG8gd2FzIHRoZW4gY29uc3VsLCBkZWZlbmRlZCBoaW0sIGFuZCBiZWNhdXNlIG9mIENhdG8ncyBiZWxpZWZzIG1hZGUgbXVjaCBmdW4gb2YgdGhlIFN0b2ljIHNlY3QsIGluIHZpZXcgb2YgdGhlIGFic3VyZGl0aWVzIG9mIHRoZWlyIHNvLWNhbGxlZCBwYXJhZG94ZXM7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBNdXIuIDI5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIE11cmVuYTwvdGl0bGU+LCAyOS0zMTwvYmlibD4uPC9ub3RlPiAgYW5kIHdoZW4gbG91ZCBsYXVnaHRlciBzcHJlYWQgZnJvbSB0aGUgYXVkaWVuY2UgdG8gdGhlIGp1cm9ycywgQ2F0bywgd2l0aCBhIHF1aWV0IHNtaWxlLCBzYWlkIHRvIHRob3NlIHdobyBzYXQgYnk6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBNdXIuIDI5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIE11cmVuYTwvdGl0bGU+LCAyOS0zMTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvIE11cmVuYTwvdGl0bGU+LCAyOS0zMTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBhIGZ1bm55IG1hbiB3ZSBoYXZlLCBteSBmcmllbmRzLCBmb3IgY29uc3VsITwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3b3VsZCBzZWVtIHRoYXQgQ2ljZXJvIHdhcyBuYXR1cmFsbHkgcHJvbmUgdG8gbGF1Z2h0ZXIgYW5kIGZvbmQgb2YgamVzdGluZzsgaGlzIGZhY2UsIHRvbywgd2FzIHNtaWxpbmcgYW5kIHBlYWNlZnVsLiBCdXQgaW4gdGhhdCBvZiBEZW1vc3RoZW5lcyB0aGVyZSB3YXMgYWx3YXlzIGEgY2VydGFpbiBpbnRlbnNlIHNlcmlvdXNuZXNzLCBhbmQgdGhpcyBsb29rIG9mIHRob3VnaHRmdWxuZXNzIGFuZCBhbnhpZXR5IGhlIGRpZCBub3QgZWFzaWx5IGxheSBhc2lkZS4gRm9yIHRoaXMgcmVhc29uIGhpcyBlbmVtaWVzLCBhcyBoZSBoaW1zZWxmIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFBoaWwuIDIuMzAiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGlsLjwvdGl0bGU+IGlpLiAzMDwvYmlibD4uPC9ub3RlPiBjYWxsZWQgaGltIG1vcm9zZSBhbmQgaWxsLW1hbm5lcmVkLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFBoaWwuIDIuMzAiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGlsLjwvdGl0bGU+IGlpLiAzMDwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhpbC48L3RpdGxlPiBpaS4gMzA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsIGZ1cnRoZXIsIHRoZW4sIGluIHRoZWlyIHdyaXRpbmdzIGl0IGlzIHBvc3NpYmxlIHRvIHNlZSB0aGF0IHRoZSBvbmUgdG91Y2hlcyB1cG9uIGhpcyBvd24gcHJhaXNlcyBjYXV0aW91c2x5IGFuZCBzbyBhcyBub3QgdG8gZ2l2ZSBvZmZlbmNlLCB3aGVuIHRoZXJlIHdhcyBuZWVkIG9mIHRoaXMgZm9yIHNvbWUgd2VpZ2h0aWVyIGVuZCwgd2hpbGUgb24gb3RoZXIgb2NjYXNpb25zIGhlIGlzIGNhcmVmdWwgYW5kIG1vZGVyYXRlOyB3aGVyZWFzIENpY2VybydzIGltbW9kZXJhdGUgYm9hc3Rpbmcgb2YgaGltc2VsZiBpbiBoaXMgc3BlZWNoZXMgcHJvdmVzIHRoYXQgaGUgaGFkIGFuIGludGVtcGVyYXRlIGRlc2lyZSBmb3IgZmFtZSwgaGlzIGNyeSBiZWluZyB0aGF0IGFybXMgbXVzdCBnaXZlIHBsYWNlIHRvIHRoZSB0b2dhIGFuZCB0aGUgbGF1cmVsIG9mIHRyaXVtcGggdG8gdGhlIHRvbmd1ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPkNlZGFudCBhcm1hIHRvZ2FlLCBjb25jZWRhdCBsYXVyZWEgbGF1ZGk8L2ZvcmVpZ24+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBQaXMuIDcyIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPmluIFBpc29uZW08L3RpdGxlPiwgMjksIDcyIGZmLjwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXQgbGFzdCBoZSBwcmFpc2VzIG5vdCBvbmx5IGhpcyBkZWVkcyBhbmQgYWN0aW9ucywgYnV0IGFsc28gaGlzIHNwZWVjaGVzLCBib3RoIHRob3NlIHdoaWNoIGhlIGRlbGl2ZXJlZCBoaW1zZWxmIGFuZCB0aG9zZSB3aGljaCBoZSBjb21taXR0ZWQgdG8gd3JpdGluZywgYXMgaWYgaGUgd2VyZSBpbXBldHVvdXNseSB2eWluZyB3aXRoIElzb2NyYXRlcyBhbmQgQW5heGltZW5lcyB0aGUgc29waGlzdHMsIGluc3RlYWQgb2YgY2xhaW1pbmcgdGhlIHJpZ2h0IHRvIGxlYWQgYW5kIGluc3RydWN0IHRoZSBSb21hbiBwZW9wbGUsCgkJCQkKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+U3RlYWRmYXN0LCBpbiBoZWF2eSBhcm1vdXIgY2xhZCwgZGVzdHJ1Y3RpdmUgdG8gZm9lcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzZWNvbmQgdmVyc2Ugb2YgYW4gZWxlZ2lhYyBkaXN0aWNoIGF0dHJpYnV0ZWQgdG8gQWVzY2h5bHVzIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDMzNGQiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TW9yYWxzPC90aXRsZT4sIHAuIDMzNCBkPC9iaWJsPi4gQ2YuIEJlcmdrLCA8dGl0bGU+UG9ldC4gTHlyLiBHcmFlY2k8L3RpdGxlPiwgIGlpLjQgcC4gMjQyLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlJdCBpcyBuZWNlc3NhcnksIGluZGVlZCwgdGhhdCBhIHBvbGl0aWNhbCBsZWFkZXIgc2hvdWxkIHByZXZhaWwgYnkgcmVhc29uIG9mIGhpcyBlbG9xdWVuY2UsIGJ1dCBpZ25vYmxlIGZvciBoaW0gdG8gYWRtaXJlIGFuZCBjcmF2ZSB0aGUgZmFtZSB0aGF0IHNwcmluZ3MgZnJvbSBoaXMgZWxvcXVlbmNlLiBXaGVyZWZvcmUgaW4gdGhpcyByZWdhcmQgRGVtb3N0aGVuZXMgaXMgbW9yZSBzdGF0ZWx5IGFuZCBtYWduaWZpY2VudCwgc2luY2UgaGUgZGVjbGFyZXMgdGhhdCBoaXMgYWJpbGl0eSBpbiBzcGVha2luZyB3YXMgYSBtZXJlIG1hdHRlciBvZiBleHBlcmllbmNlLCBkZXBlbmRpbmcgZ3JlYXRseSB1cG9uIHRoZSBnb29kd2lsbCBvZiBoaXMgaGVhcmVycyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjc3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk9uIHRoZSBDcm93bjwvdGl0bGU+LCAyNzc8L2JpYmw+Ljwvbm90ZT4gYW5kIGNvbnNpZGVycyBpbGxpYmVyYWwgYW5kIHZ1bGdhciwgYXMgdGhleSBhcmUsIHRob3NlIHdobyBhcmUgcHVmZmVkIHVwIGF0IHN1Y2ggc3VjY2Vzcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdGlsbCBmdXJ0aGVyLCB0aGVuLCBpbiB0aGVpciB3cml0aW5ncyBpdCBpcyBwb3NzaWJsZSB0byBzZWUgdGhhdCB0aGUgb25lIHRvdWNoZXMgdXBvbiBoaXMgb3duIHByYWlzZXMgY2F1dGlvdXNseSBhbmQgc28gYXMgbm90IHRvIGdpdmUgb2ZmZW5jZSwgd2hlbiB0aGVyZSB3YXMgbmVlZCBvZiB0aGlzIGZvciBzb21lIHdlaWdodGllciBlbmQsIHdoaWxlIG9uIG90aGVyIG9jY2FzaW9ucyBoZSBpcyBjYXJlZnVsIGFuZCBtb2RlcmF0ZTsgd2hlcmVhcyBDaWNlcm8ncyBpbW1vZGVyYXRlIGJvYXN0aW5nIG9mIGhpbXNlbGYgaW4gaGlzIHNwZWVjaGVzIHByb3ZlcyB0aGF0IGhlIGhhZCBhbiBpbnRlbXBlcmF0ZSBkZXNpcmUgZm9yIGZhbWUsIGhpcyBjcnkgYmVpbmcgdGhhdCBhcm1zIG11c3QgZ2l2ZSBwbGFjZSB0byB0aGUgdG9nYSBhbmQgdGhlIGxhdXJlbCBvZiB0cml1bXBoIHRvIHRoZSB0b25ndWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Q2VkYW50IGFybWEgdG9nYWUsIGNvbmNlZGF0IGxhdXJlYSBsYXVkaTwvZm9yZWlnbj4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gUGlzLiA3MiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmluIFBpc29uZW08L3RpdGxlPiwgMjksIDcyIGZmLjwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkNlZGFudCBhcm1hIHRvZ2FlLCBjb25jZWRhdCBsYXVyZWEgbGF1ZGk8L2ZvcmVpZ24+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFBpcy4gNzIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBQaXNvbmVtPC90aXRsZT4sIDI5LCA3MiBmZi48L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5pbiBQaXNvbmVtPC90aXRsZT4sIDI5LCA3MiBmZi48L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhdCBsYXN0IGhlIHByYWlzZXMgbm90IG9ubHkgaGlzIGRlZWRzIGFuZCBhY3Rpb25zLCBidXQgYWxzbyBoaXMgc3BlZWNoZXMsIGJvdGggdGhvc2Ugd2hpY2ggaGUgZGVsaXZlcmVkIGhpbXNlbGYgYW5kIHRob3NlIHdoaWNoIGhlIGNvbW1pdHRlZCB0byB3cml0aW5nLCBhcyBpZiBoZSB3ZXJlIGltcGV0dW91c2x5IHZ5aW5nIHdpdGggSXNvY3JhdGVzIGFuZCBBbmF4aW1lbmVzIHRoZSBzb3BoaXN0cywgaW5zdGVhZCBvZiBjbGFpbWluZyB0aGUgcmlnaHQgdG8gbGVhZCBhbmQgaW5zdHJ1Y3QgdGhlIFJvbWFuIHBlb3BsZSwKCQkJCQoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3RlYWRmYXN0LCBpbiBoZWF2eSBhcm1vdXIgY2xhZCwgZGVzdHJ1Y3RpdmUgdG8gZm9lcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3RlYWRmYXN0LCBpbiBoZWF2eSBhcm1vdXIgY2xhZCwgZGVzdHJ1Y3RpdmUgdG8gZm9lcy48L2w+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNlY29uZCB2ZXJzZSBvZiBhbiBlbGVnaWFjIGRpc3RpY2ggYXR0cmlidXRlZCB0byBBZXNjaHlsdXMgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAzMzRkIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDMzNCBkPC9iaWJsPi4gQ2YuIEJlcmdrLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb2V0LiBMeXIuIEdyYWVjaTwvdGl0bGU+LCAgaWkuNCBwLiAyNDIuPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gMzM0ZCI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwLiAzMzQgZDwvYmlibD4uIENmLiBCZXJnaywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDMzNCBkPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9ldC4gTHlyLiBHcmFlY2k8L3RpdGxlPiwgIGlpLjQgcC4gMjQyLjwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJSXQgaXMgbmVjZXNzYXJ5LCBpbmRlZWQsIHRoYXQgYSBwb2xpdGljYWwgbGVhZGVyIHNob3VsZCBwcmV2YWlsIGJ5IHJlYXNvbiBvZiBoaXMgZWxvcXVlbmNlLCBidXQgaWdub2JsZSBmb3IgaGltIHRvIGFkbWlyZSBhbmQgY3JhdmUgdGhlIGZhbWUgdGhhdCBzcHJpbmdzIGZyb20gaGlzIGVsb3F1ZW5jZS4gV2hlcmVmb3JlIGluIHRoaXMgcmVnYXJkIERlbW9zdGhlbmVzIGlzIG1vcmUgc3RhdGVseSBhbmQgbWFnbmlmaWNlbnQsIHNpbmNlIGhlIGRlY2xhcmVzIHRoYXQgaGlzIGFiaWxpdHkgaW4gc3BlYWtpbmcgd2FzIGEgbWVyZSBtYXR0ZXIgb2YgZXhwZXJpZW5jZSwgZGVwZW5kaW5nIGdyZWF0bHkgdXBvbiB0aGUgZ29vZHdpbGwgb2YgaGlzIGhlYXJlcnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yNzciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PbiB0aGUgQ3Jvd248L3RpdGxlPiwgMjc3PC9iaWJsPi48L25vdGU+IGFuZCBjb25zaWRlcnMgaWxsaWJlcmFsIGFuZCB2dWxnYXIsIGFzIHRoZXkgYXJlLCB0aG9zZSB3aG8gYXJlIHB1ZmZlZCB1cCBhdCBzdWNoIHN1Y2Nlc3MuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjc3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4sIDI3NzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4sIDI3NzxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgdHJ1ZSB0aGF0IGluIGhhcmFuZ3VpbmcgYW5kIGd1aWRpbmcgdGhlIHBlb3BsZSBib3RoIGhhZCBlcXVhbCBwb3dlciwgc28gdGhhdCBldmVuIHRob3NlIHdobyBjb250cm9sbGVkIGFybWllcyBhbmQgY2FtcHMgaGFkIG5lZWQgb2YgdGhlaXIgc2VydmljZXM7IENoYXJlcywgRGlvcGVpdGhlcywgYW5kIExlb3N0aGVuZXMgbmVlZGVkIERlbW9zdGhlbmVzLCBhbmQgUG9tcGV5IGFuZCB0aGUgeW91bmcgQ2Flc2FyIG5lZWRlZCBDaWNlcm8sIGFzIENhZXNhciBoaW1zZWxmIHNheXMgaW4gaGlzIE1lbW9pcnMgYWRkcmVzc2VkIHRvIEFncmlwcGEgYW5kIE1hZWNlbmFzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hhdCBpcyB0aG91Z2h0IGFuZCBzYWlkIG1vc3Qgb2YgYWxsIHRvIHJldmVhbCBhbmQgdGVzdCB0aGUgY2hhcmFjdGVyIG9mIGEgbWFuLCBuYW1lbHkgcG93ZXIgYW5kIGF1dGhvcml0eSwgd2hpY2ggcm91c2VzIGV2ZXJ5IHBhc3Npb24gYW5kIHVuY292ZXJzIGV2ZXJ5IGJhc2VuZXNzLCB0aGlzIERlbW9zdGhlbmVzIGRpZCBub3QgaGF2ZSwgbm9yIGRpZCBoZSBnaXZlIGFueSBzdWNoIHByb29mIG9mIGhpbXNlbGYsIHNpbmNlIGhlIGhlbGQgbm8gY29uc3BpY3VvdXMgb2ZmaWNlLCBub3IgZGlkIGhlIGV2ZW4gY29tbWFuZCB0aGUgZm9yY2Ugd2hpY2ggd2FzIHJhaXNlZCBieSBoaW0gYWdhaW5zdCBQaGlsaXA7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMgQ2ljZXJvIHdhcyBzZW50IG91dCBhcyBxdWFlc3RvciB0byBTaWNpbHksIGFuZCBhcyBwcm8tY29uc3VsIHRvIENpbGljaWEgYW5kIENhcHBhZG9jaWEsIGF0IGEgdGltZSB3aGVuIHRoZSBsb3ZlIG9mIHdlYWx0aCB3YXMgYXQgaXRzIGdyZWF0ZXN0IGhlaWdodCwgYW5kIHdoZW4gdGhvc2Ugd2hvIHdlcmUgc2VudCBvdXQgYXMgcHJhZXRvcnMgYW5kIGdvdmVybm9ycywgZmVlbGluZyB0aGF0IHRoZWZ0IHdhcyBhbiBpZ25vYmxlIHRoaW5nLCByZXNvcnRlZCB0byBvcGVuIHBsdW5kZXJpbmcsIHNvIHRoYXQgdGhlIHRha2luZyBvZiBwcm9wZXJ0eSB3YXMgbm90IHRob3VnaHQgaGVpbm91cywgYnV0IGhlIHdobyBkaWQgdGhpcyBpbiBtb2RlcmF0aW9uIHdhcyBoZWxkIGluIGhpZ2ggZXN0ZWVtOyBhbmQgeWV0IENpY2VybyBnYXZlIG1hbnkgcHJvb2ZzIG9mIGhpcyBjb250ZW1wdCBmb3Igd2VhbHRoLCBhbmQgbWFueSBvZiBoaXMgaHVtYW5pdHkgYW5kIGdvb2RuZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBpbiBSb21lIGl0c2VsZiBoZSB3YXMgYXBwb2ludGVkIGNvbnN1bCBpbiBuYW1lLCBidXQgcmVhbGx5IHJlY2VpdmVkIHRoZSBwb3dlciBvZiBhIGRpY3RhdG9yIGFuZCBzb2xlIHJ1bGVyIGFnYWluc3QgQ2F0aWxpbmUgYW5kIGhpcyBjb25zcGlyYXRvcnMsIGhlIGJvcmUgd2l0bmVzcyB0byB0aGUgdHJ1dGggb2YgUGxhdG8ncyBwcm9waGVjeTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUmVwLiA0NzNkIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlJlcHVibGljPC90aXRsZT4sICBwLiA0NzMgZDwvYmlibD4uPC9ub3RlPiB0aGF0IHN0YXRlcyB3b3VsZCB0aGVuIGhhdmUgcmVzcGl0ZSBmcm9tIGV2aWwsIHdoZW4gaW4gb25lIGFuZCB0aGUgc2FtZSBwZXJzb24sIGJ5IHNvbWUgaGFwcHkgZm9ydHVuZSwgZ3JlYXQgcG93ZXIgYW5kIHdpc2RvbSBzaG91bGQgYmUgY29uam9pbmVkIHdpdGgganVzdGljZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyB0cnVlIHRoYXQgaW4gaGFyYW5ndWluZyBhbmQgZ3VpZGluZyB0aGUgcGVvcGxlIGJvdGggaGFkIGVxdWFsIHBvd2VyLCBzbyB0aGF0IGV2ZW4gdGhvc2Ugd2hvIGNvbnRyb2xsZWQgYXJtaWVzIGFuZCBjYW1wcyBoYWQgbmVlZCBvZiB0aGVpciBzZXJ2aWNlczsgQ2hhcmVzLCBEaW9wZWl0aGVzLCBhbmQgTGVvc3RoZW5lcyBuZWVkZWQgRGVtb3N0aGVuZXMsIGFuZCBQb21wZXkgYW5kIHRoZSB5b3VuZyBDYWVzYXIgbmVlZGVkIENpY2VybywgYXMgQ2Flc2FyIGhpbXNlbGYgc2F5cyBpbiBoaXMgTWVtb2lycyBhZGRyZXNzZWQgdG8gQWdyaXBwYSBhbmQgTWFlY2VuYXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGF0IGlzIHRob3VnaHQgYW5kIHNhaWQgbW9zdCBvZiBhbGwgdG8gcmV2ZWFsIGFuZCB0ZXN0IHRoZSBjaGFyYWN0ZXIgb2YgYSBtYW4sIG5hbWVseSBwb3dlciBhbmQgYXV0aG9yaXR5LCB3aGljaCByb3VzZXMgZXZlcnkgcGFzc2lvbiBhbmQgdW5jb3ZlcnMgZXZlcnkgYmFzZW5lc3MsIHRoaXMgRGVtb3N0aGVuZXMgZGlkIG5vdCBoYXZlLCBub3IgZGlkIGhlIGdpdmUgYW55IHN1Y2ggcHJvb2Ygb2YgaGltc2VsZiwgc2luY2UgaGUgaGVsZCBubyBjb25zcGljdW91cyBvZmZpY2UsIG5vciBkaWQgaGUgZXZlbiBjb21tYW5kIHRoZSBmb3JjZSB3aGljaCB3YXMgcmFpc2VkIGJ5IGhpbSBhZ2FpbnN0IFBoaWxpcDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMgQ2ljZXJvIHdhcyBzZW50IG91dCBhcyBxdWFlc3RvciB0byBTaWNpbHksIGFuZCBhcyBwcm8tY29uc3VsIHRvIENpbGljaWEgYW5kIENhcHBhZG9jaWEsIGF0IGEgdGltZSB3aGVuIHRoZSBsb3ZlIG9mIHdlYWx0aCB3YXMgYXQgaXRzIGdyZWF0ZXN0IGhlaWdodCwgYW5kIHdoZW4gdGhvc2Ugd2hvIHdlcmUgc2VudCBvdXQgYXMgcHJhZXRvcnMgYW5kIGdvdmVybm9ycywgZmVlbGluZyB0aGF0IHRoZWZ0IHdhcyBhbiBpZ25vYmxlIHRoaW5nLCByZXNvcnRlZCB0byBvcGVuIHBsdW5kZXJpbmcsIHNvIHRoYXQgdGhlIHRha2luZyBvZiBwcm9wZXJ0eSB3YXMgbm90IHRob3VnaHQgaGVpbm91cywgYnV0IGhlIHdobyBkaWQgdGhpcyBpbiBtb2RlcmF0aW9uIHdhcyBoZWxkIGluIGhpZ2ggZXN0ZWVtOyBhbmQgeWV0IENpY2VybyBnYXZlIG1hbnkgcHJvb2ZzIG9mIGhpcyBjb250ZW1wdCBmb3Igd2VhbHRoLCBhbmQgbWFueSBvZiBoaXMgaHVtYW5pdHkgYW5kIGdvb2RuZXNzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGluIFJvbWUgaXRzZWxmIGhlIHdhcyBhcHBvaW50ZWQgY29uc3VsIGluIG5hbWUsIGJ1dCByZWFsbHkgcmVjZWl2ZWQgdGhlIHBvd2VyIG9mIGEgZGljdGF0b3IgYW5kIHNvbGUgcnVsZXIgYWdhaW5zdCBDYXRpbGluZSBhbmQgaGlzIGNvbnNwaXJhdG9ycywgaGUgYm9yZSB3aXRuZXNzIHRvIHRoZSB0cnV0aCBvZiBQbGF0bydzIHByb3BoZWN5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUmVwLiA0NzNkIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVwdWJsaWM8L3RpdGxlPiwgIHAuIDQ3MyBkPC9iaWJsPi48L25vdGU+IHRoYXQgc3RhdGVzIHdvdWxkIHRoZW4gaGF2ZSByZXNwaXRlIGZyb20gZXZpbCwgd2hlbiBpbiBvbmUgYW5kIHRoZSBzYW1lIHBlcnNvbiwgYnkgc29tZSBoYXBweSBmb3J0dW5lLCBncmVhdCBwb3dlciBhbmQgd2lzZG9tIHNob3VsZCBiZSBjb25qb2luZWQgd2l0aCBqdXN0aWNlLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBSZXAuIDQ3M2QiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZXB1YmxpYzwvdGl0bGU+LCAgcC4gNDczIGQ8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlcHVibGljPC90aXRsZT4sICBwLiA0NzMgZDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBpdCBpcyBzYWlkIHRvIHRoZSByZXByb2FjaCBvZiBEZW1vc3RoZW5lcyB0aGF0IGhlIG1hZGUgbW9uZXkgYnkgaGlzIGVsb3F1ZW5jZSwgc2luY2UgaGUgc2VjcmV0bHkgd3JvdGUgc3BlZWNoZXMgZm9yIFBob3JtaW8gYW5kIEFwb2xsb2RvcnVzLCB3aG8gd2VyZSBhZHZlcnNhcmllcyBpbiB0aGUgc2FtZSBjYXNlLCBhbmQgc2luY2UgaGUgd2FzIGFjY3VzZWQgaW4gdGhlIG1hdHRlciBvZiB0aGUgR3JlYXQgS2luZydzIG1vbmV5LCBhbmQgY29uZGVtbmVkIGZvciB0YWtpbmcgdGhhdCBvZiBIYXJwYWx1cy4gQW5kIGlmIHdlIHNob3VsZCBzYXkgdGhhdCB0aG9zZSB3aG8gd3JpdGUgdGhpbmdzIChhbmQgdGhlc2Ugd3JpdGVycyBhcmUgbm90IGZldykgdGVsbCB3aGF0IGlzIHVudHJ1ZSwgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+c3RpbGwsIGF0IGxlYXN0LCB0aGF0IERlbW9zdGhlbmVzIGNvdWxkIG5vdCBicmluZyBoaW1zZWxmIHRvIGxvb2sgd2l0aGluIGluZGlmZmVyZW5jZSB1cG9uIGdpZnRzIHdoaWNoIGtpbmdzIG9mZmVyZWQgYXMgbWFya3Mgb2YgaG9ub3VyIGFuZCBmYXZvdXIsIGFuZCB0aGF0IHRoaXMgd2FzIG5vdCB0byBiZSBleHBlY3RlZCBvZiBhIG1hbiB3aG8gbGVudCBtb25leSBvbiBib3R0b21yeSwgaXQgaXMgaW1wb3NzaWJsZSB0byBkZW55OyB3aGVyZWFzLCBpbiB0aGUgY2FzZSBvZiBDaWNlcm8sIHRoYXQgdGhlIFNpY2lsaWFucyB3aGVuIGhlIHdhcyBxdWFlc3RvciwgYW5kIHRoZSBraW5nIG9mIENhcHBhZG9jaWEgd2hlbiBoZSB3YXMgcHJvLWNvbnN1bCwgYW5kIGhpcyBmcmllbmRzIGluIFJvbWUgd2hlbiBoZSB3YXMgZ29pbmcgaW50byBleGlsZSwgb2ZmZXJlZCBoaW0gbGFyZ2Ugc3VtcyBhbmQgYmVnZ2VkIGhpbSB0byB0YWtlIHRoZW0sIG9ubHkgdG8gbWVldCB3aXRoIGhpcyByZWZ1c2FsLCBoYXMgYmVlbiBzYWlkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBpdCBpcyBzYWlkIHRvIHRoZSByZXByb2FjaCBvZiBEZW1vc3RoZW5lcyB0aGF0IGhlIG1hZGUgbW9uZXkgYnkgaGlzIGVsb3F1ZW5jZSwgc2luY2UgaGUgc2VjcmV0bHkgd3JvdGUgc3BlZWNoZXMgZm9yIFBob3JtaW8gYW5kIEFwb2xsb2RvcnVzLCB3aG8gd2VyZSBhZHZlcnNhcmllcyBpbiB0aGUgc2FtZSBjYXNlLCBhbmQgc2luY2UgaGUgd2FzIGFjY3VzZWQgaW4gdGhlIG1hdHRlciBvZiB0aGUgR3JlYXQgS2luZydzIG1vbmV5LCBhbmQgY29uZGVtbmVkIGZvciB0YWtpbmcgdGhhdCBvZiBIYXJwYWx1cy4gQW5kIGlmIHdlIHNob3VsZCBzYXkgdGhhdCB0aG9zZSB3aG8gd3JpdGUgdGhpbmdzIChhbmQgdGhlc2Ugd3JpdGVycyBhcmUgbm90IGZldykgdGVsbCB3aGF0IGlzIHVudHJ1ZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnN0aWxsLCBhdCBsZWFzdCwgdGhhdCBEZW1vc3RoZW5lcyBjb3VsZCBub3QgYnJpbmcgaGltc2VsZiB0byBsb29rIHdpdGhpbiBpbmRpZmZlcmVuY2UgdXBvbiBnaWZ0cyB3aGljaCBraW5ncyBvZmZlcmVkIGFzIG1hcmtzIG9mIGhvbm91ciBhbmQgZmF2b3VyLCBhbmQgdGhhdCB0aGlzIHdhcyBub3QgdG8gYmUgZXhwZWN0ZWQgb2YgYSBtYW4gd2hvIGxlbnQgbW9uZXkgb24gYm90dG9tcnksIGl0IGlzIGltcG9zc2libGUgdG8gZGVueTsgd2hlcmVhcywgaW4gdGhlIGNhc2Ugb2YgQ2ljZXJvLCB0aGF0IHRoZSBTaWNpbGlhbnMgd2hlbiBoZSB3YXMgcXVhZXN0b3IsIGFuZCB0aGUga2luZyBvZiBDYXBwYWRvY2lhIHdoZW4gaGUgd2FzIHByby1jb25zdWwsIGFuZCBoaXMgZnJpZW5kcyBpbiBSb21lIHdoZW4gaGUgd2FzIGdvaW5nIGludG8gZXhpbGUsIG9mZmVyZWQgaGltIGxhcmdlIHN1bXMgYW5kIGJlZ2dlZCBoaW0gdG8gdGFrZSB0aGVtLCBvbmx5IHRvIG1lZXQgd2l0aCBoaXMgcmVmdXNhbCwgaGFzIGJlZW4gc2FpZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc3VyZWx5IGluIHRoZSBtYXR0ZXIgb2YgYmFuaXNobWVudCwgYXQgbGVhc3QsIGZvciB0aGUgb25lIGl0IHdhcyBkaXNncmFjZWZ1bCwgc2luY2UgaGUgaGFkIGJlZW4gY29udmljdGVkIG9mIHRoZWZ0OyBidXQgZm9yIHRoZSBvdGhlciBpdCB3YXMgYSBtb3N0IGhvbm91cmFibGUgcmVzdWx0LCBzaW5jZSBoZSBoYWQgcmlkIGhpcyBjb3VudHJ5IG9mIGJhbGVmdWwgbWVuLiBUaGVyZWZvcmUgbm8gYWNjb3VudCB3YXMgbWFkZSBvZiB0aGUgb25lIHdoZW4gaGUgd2VudCBpbnRvIGV4aWxlOyBidXQgZm9yIHRoZSBvdGhlciB0aGUgc2VuYXRlIGNoYW5nZWQgaXRzIGdhcmIgYW5kIHB1dCBvbiBtb3VybmluZyBhbmQgY291bGQgbm90IGJlIGluZHVjZWQgdG8gZGlzY3VzcyBhbnkgYnVzaW5lc3MgdW50aWwgQ2ljZXJvJ3MgcmV0dXJuIGhhZCBiZWVuIGRlY3JlZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIENpY2VybyBzcGVudCBoaXMgZXhpbGUgaWRseSwgcmVtYWluaW5nIHF1aWV0bHkgaW4gTWFjZWRvbmlhOyBidXQgdGhlIGV4aWxlIG9mIERlbW9zdGhlbmVzIHByb3ZlZCB0byBiZSBhIGdyZWF0IHBhcnQgb2YgaGlzIHNlcnZpY2UgdG8gdGhlIHN0YXRlLiBGb3IgaGUgdG9vayBwYXJ0IGluIHRoZSBzdHJ1Z2dsZXMgb2YgdGhlIEdyZWVrcywgYXMgaGFzIGJlZW4gc2FpZCwgYW5kIGRyb3ZlIG91dCB0aGUgTWFjZWRvbmlhbiBlbnZveXMgaW4gdGhlIHZhcmlvdXMgY2l0aWVzIHdoaWNoIGhlIHZpc2l0ZWQsIGFuZCBzbyBzaG93ZWQgaGltc2VsZiB0byBiZSBhIGZhciBiZXR0ZXIgY2l0aXplbiB0aGFuIFRoZW1pc3RvY2xlcyBvciBBbGNpYmlhZGVzIHdoZW4gdGhleSB3ZXJlIGhhdmluZyB0aGUgc2FtZSBmb3J0dW5lOyBhbmQgZnVydGhlcm1vcmUsIHdoZW4gaGUgcmV0dXJuZWQgZnJvbSBleGlsZSwgaGUgYWdhaW4gZGV2b3RlZCBoaW1zZWxmIHRvIHRoaXMgc2FtZSBwdWJsaWMgc2VydmljZSwgYW5kIHN0ZWFkZmFzdGx5IGNvbnRpbnVlZCB3YWdpbmcgd2FyIHVwb24gQW50aXBhdGVyIGFuZCB0aGUgTWFjZWRvbmlhbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNpY2Vybywgb24gdGhlIGNvbnRyYXJ5LCB3YXMgcmVwcm9hY2hlZCBpbiB0aGUgc2VuYXRlIGJ5IExhZWxpdXMgZm9yIHNpdHRpbmcgc2lsZW50IHdoZW4gQ2Flc2FyIGFza2VkIGxlYXZlIHRvIHN0YW5kIGZvciB0aGUgY29uc3Vsc2hpcCwgd2hpY2ggd2FzIGNvbnRyYXJ5IHRvIGxhdywgc2luY2UgaGUgd2FzIHN0aWxsIGEgYmVhcmRsZXNzIHlvdXRoLiBBbmQgQnJ1dHVzIGFsc28sIGluIG9uZSBvZiBoaXMgbGV0dGVycywgYWNjdXNlZCBoaW0gb2YgaGF2aW5nIHJlYXJlZCB1cCBhIHR5cmFubnkgZ3JlYXRlciBhbmQgbW9yZSBzZXZlcmUgdGhhbiB0aGF0IHdoaWNoIHRoZSB3cml0ZXIgaGltc2VsZiBoYWQgb3ZlcnRocm93bi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gYWQgQnJ1dC4gMS4xNy4yIiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZT5hZCBCcnV0dW08L3RpdGxlPiwgaS4gMTcsIDI8L2JpYmw+IChCcnV0dXMgdG8gQXR0aWN1cykuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc3VyZWx5IGluIHRoZSBtYXR0ZXIgb2YgYmFuaXNobWVudCwgYXQgbGVhc3QsIGZvciB0aGUgb25lIGl0IHdhcyBkaXNncmFjZWZ1bCwgc2luY2UgaGUgaGFkIGJlZW4gY29udmljdGVkIG9mIHRoZWZ0OyBidXQgZm9yIHRoZSBvdGhlciBpdCB3YXMgYSBtb3N0IGhvbm91cmFibGUgcmVzdWx0LCBzaW5jZSBoZSBoYWQgcmlkIGhpcyBjb3VudHJ5IG9mIGJhbGVmdWwgbWVuLiBUaGVyZWZvcmUgbm8gYWNjb3VudCB3YXMgbWFkZSBvZiB0aGUgb25lIHdoZW4gaGUgd2VudCBpbnRvIGV4aWxlOyBidXQgZm9yIHRoZSBvdGhlciB0aGUgc2VuYXRlIGNoYW5nZWQgaXRzIGdhcmIgYW5kIHB1dCBvbiBtb3VybmluZyBhbmQgY291bGQgbm90IGJlIGluZHVjZWQgdG8gZGlzY3VzcyBhbnkgYnVzaW5lc3MgdW50aWwgQ2ljZXJvJ3MgcmV0dXJuIGhhZCBiZWVuIGRlY3JlZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIENpY2VybyBzcGVudCBoaXMgZXhpbGUgaWRseSwgcmVtYWluaW5nIHF1aWV0bHkgaW4gTWFjZWRvbmlhOyBidXQgdGhlIGV4aWxlIG9mIERlbW9zdGhlbmVzIHByb3ZlZCB0byBiZSBhIGdyZWF0IHBhcnQgb2YgaGlzIHNlcnZpY2UgdG8gdGhlIHN0YXRlLiBGb3IgaGUgdG9vayBwYXJ0IGluIHRoZSBzdHJ1Z2dsZXMgb2YgdGhlIEdyZWVrcywgYXMgaGFzIGJlZW4gc2FpZCwgYW5kIGRyb3ZlIG91dCB0aGUgTWFjZWRvbmlhbiBlbnZveXMgaW4gdGhlIHZhcmlvdXMgY2l0aWVzIHdoaWNoIGhlIHZpc2l0ZWQsIGFuZCBzbyBzaG93ZWQgaGltc2VsZiB0byBiZSBhIGZhciBiZXR0ZXIgY2l0aXplbiB0aGFuIFRoZW1pc3RvY2xlcyBvciBBbGNpYmlhZGVzIHdoZW4gdGhleSB3ZXJlIGhhdmluZyB0aGUgc2FtZSBmb3J0dW5lOyBhbmQgZnVydGhlcm1vcmUsIHdoZW4gaGUgcmV0dXJuZWQgZnJvbSBleGlsZSwgaGUgYWdhaW4gZGV2b3RlZCBoaW1zZWxmIHRvIHRoaXMgc2FtZSBwdWJsaWMgc2VydmljZSwgYW5kIHN0ZWFkZmFzdGx5IGNvbnRpbnVlZCB3YWdpbmcgd2FyIHVwb24gQW50aXBhdGVyIGFuZCB0aGUgTWFjZWRvbmlhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNpY2Vybywgb24gdGhlIGNvbnRyYXJ5LCB3YXMgcmVwcm9hY2hlZCBpbiB0aGUgc2VuYXRlIGJ5IExhZWxpdXMgZm9yIHNpdHRpbmcgc2lsZW50IHdoZW4gQ2Flc2FyIGFza2VkIGxlYXZlIHRvIHN0YW5kIGZvciB0aGUgY29uc3Vsc2hpcCwgd2hpY2ggd2FzIGNvbnRyYXJ5IHRvIGxhdywgc2luY2UgaGUgd2FzIHN0aWxsIGEgYmVhcmRsZXNzIHlvdXRoLiBBbmQgQnJ1dHVzIGFsc28sIGluIG9uZSBvZiBoaXMgbGV0dGVycywgYWNjdXNlZCBoaW0gb2YgaGF2aW5nIHJlYXJlZCB1cCBhIHR5cmFubnkgZ3JlYXRlciBhbmQgbW9yZSBzZXZlcmUgdGhhbiB0aGF0IHdoaWNoIHRoZSB3cml0ZXIgaGltc2VsZiBoYWQgb3ZlcnRocm93bi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIGFkIEJydXQuIDEuMTcuMiIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBCcnV0dW08L3RpdGxlPiwgaS4gMTcsIDI8L2JpYmw+IChCcnV0dXMgdG8gQXR0aWN1cykuPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIGFkIEJydXQuIDEuMTcuMiIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBCcnV0dW08L3RpdGxlPiwgaS4gMTcsIDI8L2JpYmw+IChCcnV0dXMgdG8gQXR0aWN1cykuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgQnJ1dHVtPC90aXRsZT4sIGkuIDE3LCAyPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWZ0ZXIgYWxsLCB0aGUgb25lIGlzIHRvIGJlIHBpdGllZCBmb3IgdGhlIG1hbm5lciBvZiBoaXMgZGVhdGjigJRhbiBvbGQgbWFuIGlnbm9ibHkgY2FycmllZCB1cCBhbmQgZG93biBieSBzZXJ2YW50cywgdHJ5aW5nIHRvIGVzY2FwZSBkZWF0aCwgaGlkaW5nIGhpbXNlbGYgZnJvbSB0aG9zZSB3aG8gd2VyZSBjb21pbmcgYWZ0ZXIgaGltIG5vdCBtdWNoIGluIGFkdmFuY2Ugb2YgbmF0dXJlJ3MgZmluYWwgc3VtbW9ucywgYW5kIHRoZW4gYmVoZWFkZWQ7IHdoZXJlYXMgaW4gdGhhdCBvZiB0aGUgb3RoZXIsIGV2ZW4gdGhvdWdoIGl0IGhhZCBhIHNsaWdodCB0b3VjaCBvZiBzdXBwbGljYXRpb24sIHdlIG11c3QgYWRtaXJlIHRoZSBwcmVwYXJhdGlvbiBvZiB0aGUgcG9pc29uIGFuZCBpdHMgcGxhY2Ugb2YgY3VzdG9keSwgbXVzdCBhZG1pcmUsIHRvbywgdGhlIHVzZSBoZSBtYWRlIG9mIGl0LCBiZWNhdXNlLCBzaW5jZSB0aGUgZ29kIHdvdWxkIG5vdCBhZmZvcmQgaGltIGFzeWx1bSwgaGUgdG9vayByZWZ1Z2UgYXQgYSBncmVhdGVyIGFsdGFyLCBhcyBpdCB3ZXJlLCBtYWRlIGhpcyBlc2NhcGUgZnJvbSBhcm1zIGFuZCBtZXJjZW5hcmllcywgYW5kIGxhdWdoZWQgdG8gc2Nvcm4gdGhlIGNydWVsdHkgb2YgQW50aXBhdGVyLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
