var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGVuIGhlIHdhcyBraWxsZWQgYnkgYSB0aHVuZGVyYm9sdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg3IEIuQy48L25vdGU+IGFuZCBoaXMgYm9keSB3YXMgb24gaXRzIHdheSB0byB0aGUgZnVuZXJhbCBweXJlLCB0aGV5IGRyYWdnZWQgaXQgZnJvbSBpdHMgYmllciBhbmQgaGVhcGVkIGluc3VsdHMgdXBvbiBpdC4gT24gdGhlIG90aGVyIGhhbmQsIG5vIFJvbWFuIGV2ZXIgZW5qb3llZCBhIGhlYXJ0aWVyIGdvb2R3aWxsIG9uIHRoZSBwYXJ0IG9mIGhpcyBjb3VudHJ5bWVuLCBvciBvbmUgd2hpY2ggYmVnYW4gc29vbmVyLCBvciByZWFjaGVkIGEgZ3JlYXRlciBoZWlnaHQgaW4gaGlzIHByb3NwZXJpdHksIG9yIHJlbWFpbmVkIG1vcmUgY29uc3RhbnQgaW4gaGlzIGFkdmVyc2l0eSwgdGhhbiBQb21wZXkgZGlkLiBBbmQgd2hlcmVhcyB0aGVyZSB3YXMgb25lIHNvbGUgcmVhc29uIGZvciB0aGUgaGF0cmVkIGZlbHQgdG93YXJkcyBTdHJhYm8sIG5hbWVseSwgaGlzIGluc2F0aWFibGUgZGVzaXJlIGZvciBtb25leSwgdGhlcmUgd2VyZSBtYW55IHJlYXNvbnMgZm9yIHRoZSBsb3ZlIGJlc3Rvd2VkIG9uIFBvbXBleTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmhpcyBtb2Rlc3QgYW5kIHRlbXBlcmF0ZSB3YXkgb2YgbGl2aW5nLCBoaXMgdHJhaW5pbmcgaW4gdGhlIGFydHMgb2Ygd2FyLCBoaXMgcGVyc3Vhc2l2ZSBzcGVlY2gsIGhpcyB0cnVzdHdvcnRoeSBjaGFyYWN0ZXIsIGFuZCBoaXMgdGFjdCBpbiBtZWV0aW5nIHBlb3BsZSwgc28gdGhhdCBubyBtYW4gYXNrZWQgYSBmYXZvdXIgd2l0aCBsZXNzIG9mZmVuY2UsIG9yIGJlc3Rvd2VkIG9uZSB3aXRoIGEgYmV0dGVyIG1pZW4uIEZvciwgaW4gYWRkaXRpb24gdG8gaGlzIG90aGVyIGdyYWNlcywgaGUgaGFkIHRoZSBhcnQgb2YgZ2l2aW5nIHdpdGhvdXQgYXJyb2dhbmNlLCBhbmQgb2YgcmVjZWl2aW5nIHdpdGhvdXQgbG9zcyBvZiBkaWduaXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBvdXRzZXQsIHRvbywgaGUgaGFkIGEgY291bnRlbmFuY2Ugd2hpY2ggaGVscGVkIGhpbSBpbiBubyBzbWFsbCBkZWdyZWUgdG8gd2luIHRoZSBmYXZvdXIgb2YgdGhlIHBlb3BsZSwgYW5kIHdoaWNoIHBsZWFkZWQgZm9yIGhpbSBiZWZvcmUgaGUgc3Bva2UuIEZvciBldmVuIGhpcyBib3lpc2ggbG92ZWxpbmVzcyBoYWQgYSBnZW50bGUgZGlnbml0eSBhYm91dCBpdCwgYW5kIGluIHRoZSBwcmltZSBhbmQgZmxvd2VyIG9mIGhpcyB5b3V0aGZ1bCBiZWF1dHkgdGhlcmUgd2FzIGF0IG9uY2UgbWFuaWZlc3QgdGhlIG1hamVzdHkgYW5kIGtpbmdsaW5lc3Mgb2YgaGlzIG5hdHVyZS4gSGlzIGhhaXIgd2FzIGluY2xpbmVkIHRvIGxpZnQgaXRzZWxmIHNsaWdodGx5IGZyb20gaGlzIGZvcmVoZWFkLCBhbmQgdGhpcywgd2l0aCBhIGdyYWNlZnVsIGNvbnRvdXIgb2YgZmFjZSBhYm91dCB0aGUgZXllcywgcHJvZHVjZWQgYSByZXNlbWJsYW5jZSwgbW9yZSB0YWxrZWQgYWJvdXQgdGhhbiBhY3R1YWxseSBhcHBhcmVudCwgdG8gdGhlIHBvcnRyYWl0IHN0YXR1ZXMgb2YgS2luZyBBbGV4YW5kZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgc2luY2UgbWFueSBhbHNvIGFwcGxpZWQgdGhlIG5hbWUgdG8gaGltIGluIGhpcyBlYXJsaWVyIHllYXJzLCBQb21wZXkgZGlkIG5vdCBkZWNsaW5lIGl0LCBzbyB0aGF0IHByZXNlbnRseSBzb21lIGNhbGxlZCBoaW0gQWxleGFuZGVyIGluIGRlcmlzaW9uLiBIZW5jZSwgdG9vLCBMdWNpdXMgUGhpbGlwcHVzLCBhIG1hbiBvZiBjb25zdWxhciByYW5rLCB3aGVuIHBsZWFkaW5nIGluIGhpcyBiZWhhbGYsIHNhaWQgdGhhdCBoZSB3YXMgZG9pbmcgbm90aGluZyBzdHJhbmdlIGlmLCBiZWluZyBQaGlsaXAsIGhlIGxvdmVkIEFsZXhhbmRlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGUgb3V0c2V0LCB0b28sIGhlIGhhZCBhIGNvdW50ZW5hbmNlIHdoaWNoIGhlbHBlZCBoaW0gaW4gbm8gc21hbGwgZGVncmVlIHRvIHdpbiB0aGUgZmF2b3VyIG9mIHRoZSBwZW9wbGUsIGFuZCB3aGljaCBwbGVhZGVkIGZvciBoaW0gYmVmb3JlIGhlIHNwb2tlLiBGb3IgZXZlbiBoaXMgYm95aXNoIGxvdmVsaW5lc3MgaGFkIGEgZ2VudGxlIGRpZ25pdHkgYWJvdXQgaXQsIGFuZCBpbiB0aGUgcHJpbWUgYW5kIGZsb3dlciBvZiBoaXMgeW91dGhmdWwgYmVhdXR5IHRoZXJlIHdhcyBhdCBvbmNlIG1hbmlmZXN0IHRoZSBtYWplc3R5IGFuZCBraW5nbGluZXNzIG9mIGhpcyBuYXR1cmUuIEhpcyBoYWlyIHdhcyBpbmNsaW5lZCB0byBsaWZ0IGl0c2VsZiBzbGlnaHRseSBmcm9tIGhpcyBmb3JlaGVhZCwgYW5kIHRoaXMsIHdpdGggYSBncmFjZWZ1bCBjb250b3VyIG9mIGZhY2UgYWJvdXQgdGhlIGV5ZXMsIHByb2R1Y2VkIGEgcmVzZW1ibGFuY2UsIG1vcmUgdGFsa2VkIGFib3V0IHRoYW4gYWN0dWFsbHkgYXBwYXJlbnQsIHRvIHRoZSBwb3J0cmFpdCBzdGF0dWVzIG9mIEtpbmcgQWxleGFuZGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgc2luY2UgbWFueSBhbHNvIGFwcGxpZWQgdGhlIG5hbWUgdG8gaGltIGluIGhpcyBlYXJsaWVyIHllYXJzLCBQb21wZXkgZGlkIG5vdCBkZWNsaW5lIGl0LCBzbyB0aGF0IHByZXNlbnRseSBzb21lIGNhbGxlZCBoaW0gQWxleGFuZGVyIGluIGRlcmlzaW9uLiBIZW5jZSwgdG9vLCBMdWNpdXMgUGhpbGlwcHVzLCBhIG1hbiBvZiBjb25zdWxhciByYW5rLCB3aGVuIHBsZWFkaW5nIGluIGhpcyBiZWhhbGYsIHNhaWQgdGhhdCBoZSB3YXMgZG9pbmcgbm90aGluZyBzdHJhbmdlIGlmLCBiZWluZyBQaGlsaXAsIGhlIGxvdmVkIEFsZXhhbmRlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XZSBhcmUgdG9sZCB0aGF0IEZsb3JhIHRoZSBjb3VydGVzYW4sIHdoZW4gc2hlIHdhcyBub3cgcXVpdGUgb2xkLCBhbHdheXMgdG9vayBkZWxpZ2h0IGluIHRlbGxpbmcgYWJvdXQgaGVyIGZvcm1lciBpbnRpbWFjeSB3aXRoIFBvbXBleSwgc2F5aW5nIHRoYXQgc2hlIG5ldmVyIGxlZnQgaGlzIGVtYnJhY2VzIHdpdGhvdXQgYmVhcmluZyB0aGUgbWFya3Mgb2YgaGlzIHRlZXRoLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBGbG9yYSB3b3VsZCB0ZWxsIGhvdyBHZW1pbml1cywgb25lIG9mIFBvbXBleSdzIGNvbXBhbmlvbnMsIGZlbGwgaW4gbG92ZSB3aXRoIGhlciBhbmQgYW5ub3llZCBoZXIgZ3JlYXRseSBieSBoaXMgYXR0ZW50aW9uczsgYW5kIHdoZW4gc2hlIGRlY2xhcmVkIHRoYXQgc2hlIGNvdWxkIG5vdCBjb25zZW50IHRvIGhpcyB3aXNoZXMgYmVjYXVzZSBvZiBQb21wZXksIEdlbWluaXVzIGxhaWQgdGhlIG1hdHRlciBiZWZvcmUgUG9tcGV5LiBQb21wZXksIGFjY29yZGluZ2x5LCB0dXJuZWQgaGVyIG92ZXIgdG8gR2VtaW5pdXMsIGJ1dCBuZXZlciBhZnRlcndhcmRzIGhhZCBhbnkgdGhpbmcgYXQgYWxsIHRvIGRvIHdpdGggaGVyIGhpbXNlbGYsIGFsdGhvdWdoIGhlIHdhcyB0aG91Z2h0IHRvIGJlIGVuYW1vdXJlZCBvZiBoZXI7IGFuZCBzaGUgaGVyc2VsZiBkaWQgbm90IHRha2UgdGhpcyB0cmVhdG1lbnQgYXMgYSBtZXJlIGNvdXJ0ZXNhbiB3b3VsZCwgYnV0IHdhcyBzaWNrIGZvciBhIGxvbmcgdGltZSB3aXRoIGdyaWVmIGFuZCBsb25naW5nIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgRmxvcmEgaXMgc2FpZCB0byBoYXZlIGZsb3dlcmVkIGludG8gc3VjaCBiZWF1dHksIGFuZCB0byBoYXZlIGJlZW4gc28gZmFtb3VzIGZvciBpdCwgdGhhdCB3aGVuIENhZWNpbGl1cyBNZXRlbGx1cyB3YXMgZGVjb3JhdGluZyB0aGUgdGVtcGxlIG9mIENhc3RvciBhbmQgUG9sbHV4IHdpdGggcGFpbnRpbmdzIGFuZCBzdGF0dWVzLCBoZSBnYXZlIGhlciBwb3J0cmFpdCBhbHNvIGEgcGxhY2UgYW1vbmcgaGlzIGRlZGljYXRpb25zLiBNb3Jlb3ZlciwgUG9tcGV5IGFsc28gdHJlYXRlZCB0aGUgd2lmZSBvZiBEZW1ldHJpdXMgaGlzIGZyZWVkbWFuICh3aG8gaGFkIHRoZSBncmVhdGVzdCBpbmZsdWVuY2Ugd2l0aCBoaW0gYW5kIGxlZnQgYW4gZXN0YXRlIG9mIGZvdXIgdGhvdXNhbmQgdGFsZW50cykgd2l0aCBhIGxhY2sgb2YgY291cnRlc3kgYW5kIGdlbmVyb3NpdHkgdW51c3VhbCBpbiBoaW0sIGZlYXJpbmcgbGVzdCBtZW4gc2hvdWxkIHRoaW5rIGhpbSBjb25xdWVyZWQgYnkgaGVyIGJlYXV0eSwgd2hpY2ggd2FzIGlycmVzaXN0aWJsZSBhbmQgZmFyLWZhbWVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhvdWdoIGhlIHdhcyBzbyBleHRyZW1lbHkgY2F1dGlvdXMgaW4gc3VjaCBtYXR0ZXJzIGFuZCBvbiBoaXMgZ3VhcmQsIHN0aWxsIGhlIGNvdWxkIG5vdCBlc2NhcGUgdGhlIGNlbnN1cmVzIG9mIGhpcyBlbmVtaWVzIG9uIHRoaXMgaGVhZCwgYnV0IHdhcyBhY2N1c2VkIG9mIGlsbGljaXQgcmVsYXRpb25zIHdpdGggbWFycmllZCB3b21lbiwgdG8gZ3JhdGlmeSB3aG9tLCBpdCB3YXMgc2FpZCwgaGUgbmVnbGVjdGVkIGFuZCBiZXRyYXllZCBtYW55IHB1YmxpYyBpbnRlcmVzdHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBGbG9yYSB3b3VsZCB0ZWxsIGhvdyBHZW1pbml1cywgb25lIG9mIFBvbXBleSdzIGNvbXBhbmlvbnMsIGZlbGwgaW4gbG92ZSB3aXRoIGhlciBhbmQgYW5ub3llZCBoZXIgZ3JlYXRseSBieSBoaXMgYXR0ZW50aW9uczsgYW5kIHdoZW4gc2hlIGRlY2xhcmVkIHRoYXQgc2hlIGNvdWxkIG5vdCBjb25zZW50IHRvIGhpcyB3aXNoZXMgYmVjYXVzZSBvZiBQb21wZXksIEdlbWluaXVzIGxhaWQgdGhlIG1hdHRlciBiZWZvcmUgUG9tcGV5LiBQb21wZXksIGFjY29yZGluZ2x5LCB0dXJuZWQgaGVyIG92ZXIgdG8gR2VtaW5pdXMsIGJ1dCBuZXZlciBhZnRlcndhcmRzIGhhZCBhbnkgdGhpbmcgYXQgYWxsIHRvIGRvIHdpdGggaGVyIGhpbXNlbGYsIGFsdGhvdWdoIGhlIHdhcyB0aG91Z2h0IHRvIGJlIGVuYW1vdXJlZCBvZiBoZXI7IGFuZCBzaGUgaGVyc2VsZiBkaWQgbm90IHRha2UgdGhpcyB0cmVhdG1lbnQgYXMgYSBtZXJlIGNvdXJ0ZXNhbiB3b3VsZCwgYnV0IHdhcyBzaWNrIGZvciBhIGxvbmcgdGltZSB3aXRoIGdyaWVmIGFuZCBsb25naW5nIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgRmxvcmEgaXMgc2FpZCB0byBoYXZlIGZsb3dlcmVkIGludG8gc3VjaCBiZWF1dHksIGFuZCB0byBoYXZlIGJlZW4gc28gZmFtb3VzIGZvciBpdCwgdGhhdCB3aGVuIENhZWNpbGl1cyBNZXRlbGx1cyB3YXMgZGVjb3JhdGluZyB0aGUgdGVtcGxlIG9mIENhc3RvciBhbmQgUG9sbHV4IHdpdGggcGFpbnRpbmdzIGFuZCBzdGF0dWVzLCBoZSBnYXZlIGhlciBwb3J0cmFpdCBhbHNvIGEgcGxhY2UgYW1vbmcgaGlzIGRlZGljYXRpb25zLiBNb3Jlb3ZlciwgUG9tcGV5IGFsc28gdHJlYXRlZCB0aGUgd2lmZSBvZiBEZW1ldHJpdXMgaGlzIGZyZWVkbWFuICh3aG8gaGFkIHRoZSBncmVhdGVzdCBpbmZsdWVuY2Ugd2l0aCBoaW0gYW5kIGxlZnQgYW4gZXN0YXRlIG9mIGZvdXIgdGhvdXNhbmQgdGFsZW50cykgd2l0aCBhIGxhY2sgb2YgY291cnRlc3kgYW5kIGdlbmVyb3NpdHkgdW51c3VhbCBpbiBoaW0sIGZlYXJpbmcgbGVzdCBtZW4gc2hvdWxkIHRoaW5rIGhpbSBjb25xdWVyZWQgYnkgaGVyIGJlYXV0eSwgd2hpY2ggd2FzIGlycmVzaXN0aWJsZSBhbmQgZmFyLWZhbWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG91Z2ggaGUgd2FzIHNvIGV4dHJlbWVseSBjYXV0aW91cyBpbiBzdWNoIG1hdHRlcnMgYW5kIG9uIGhpcyBndWFyZCwgc3RpbGwgaGUgY291bGQgbm90IGVzY2FwZSB0aGUgY2Vuc3VyZXMgb2YgaGlzIGVuZW1pZXMgb24gdGhpcyBoZWFkLCBidXQgd2FzIGFjY3VzZWQgb2YgaWxsaWNpdCByZWxhdGlvbnMgd2l0aCBtYXJyaWVkIHdvbWVuLCB0byBncmF0aWZ5IHdob20sIGl0IHdhcyBzYWlkLCBoZSBuZWdsZWN0ZWQgYW5kIGJldHJheWVkIG1hbnkgcHVibGljIGludGVyZXN0cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BcyByZWdhcmRzIGhpcyBzaW1wbGljaXR5IGFuZCBpbmRpZmZlcmVuY2UgaW4gbWF0dGVycyBwZXJ0YWluaW5nIHRvIHRoZSB0YWJsZSwgYSBzdG9yeSBpcyB0b2xkIGFzIGZvbGxvd3MuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+T25jZSB3aGVuIGhlIHdhcyBzaWNrIGFuZCBsb2F0aGVkIGhpcyBmb29kLCBhIHBoeXNpY2lhbiBwcmVzY3JpYmVkIGEgdGhydXNoIGZvciBoaW0uIEJ1dCB3aGVuLCBvbiBlbnF1aXJ5LCBoaXMgc2VydmFudHMgY291bGQgbm90IGZpbmQgb25lIGZvciBzYWxlIChmb3IgaXQgd2FzIHBhc3QgdGhlIHNlYXNvbiBmb3IgdGhlbSksIGFuZCBzb21lb25lIHNhaWQgdGhleSBjb3VsZCBiZSBmb3VuZCBhdCBMdWN1bGx1cydzLCB3aGVyZSB0aGV5IHdlcmUga2VwdCB0aGUgeWVhciByb3VuZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IHRoZW4sPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIEx1Y3VsbHVzIHdlcmUgbm90IGx1eHVyaW91cyBtdXN0IFBvbXBleSBoYXZlIGRpZWQ/PC9xPiBhbmQgcGF5aW5nIG5vIHJlZ2FyZCB0byB0aGUgcGh5c2ljaWFuIGhlIHRvb2sgc29tZXRoaW5nIHRoYXQgY291bGQgZWFzaWx5IGJlIHByb2N1cmVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gNDAuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MdWN1bGx1czwvdGl0bGU+LCB4bC4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhpcywgaG93ZXZlciwgd2FzIGF0IGEgbGF0ZXIgdGltZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9uY2Ugd2hlbiBoZSB3YXMgc2ljayBhbmQgbG9hdGhlZCBoaXMgZm9vZCwgYSBwaHlzaWNpYW4gcHJlc2NyaWJlZCBhIHRocnVzaCBmb3IgaGltLiBCdXQgd2hlbiwgb24gZW5xdWlyeSwgaGlzIHNlcnZhbnRzIGNvdWxkIG5vdCBmaW5kIG9uZSBmb3Igc2FsZSAoZm9yIGl0IHdhcyBwYXN0IHRoZSBzZWFzb24gZm9yIHRoZW0pLCBhbmQgc29tZW9uZSBzYWlkIHRoZXkgY291bGQgYmUgZm91bmQgYXQgTHVjdWxsdXMncywgd2hlcmUgdGhleSB3ZXJlIGtlcHQgdGhlIHllYXIgcm91bmQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IHRoZW4sPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aWYgTHVjdWxsdXMgd2VyZSBub3QgbHV4dXJpb3VzIG11c3QgUG9tcGV5IGhhdmUgZGllZD88L3E+IGFuZCBwYXlpbmcgbm8gcmVnYXJkIHRvIHRoZSBwaHlzaWNpYW4gaGUgdG9vayBzb21ldGhpbmcgdGhhdCBjb3VsZCBlYXNpbHkgYmUgcHJvY3VyZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gNDAuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHhsLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGlzLCBob3dldmVyLCB3YXMgYXQgYSBsYXRlciB0aW1lLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDQwLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1czwvdGl0bGU+LCB4bC4gMi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHhsLiAyLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgaGUgd2FzIHN0aWxsIHF1aXRlIGEgc3RyaXBsaW5nIGFuZCB3YXMgb24gYSBjYW1wYWlnbiB3aXRoIGhpcyBmYXRoZXIsIHdobyB3YXMgYXJyYXllZCBhZ2FpbnN0IENpbm5hLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg3IEIuQy48L25vdGU+IGhlIGhhZCBhIGNlcnRhaW4gTHVjaXVzIFRlcmVudGl1cyBhcyB0ZW50bWF0ZSBhbmQgY29tcGFuaW9uLiBUaGlzIG1hbiB3YXMgYnJpYmVkIGJ5IENpbm5hLCBhbmQgd2FzIGhpbXNlbGYgdG8ga2lsbCBQb21wZXksIHdoaWxlIG90aGVycyB3ZXJlIHRvIHNldCBmaXJlIHRvIHRoZSB0ZW50IG9mIHRoZSBjb21tYW5kZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQb21wZXkgZ290IGluZm9ybWF0aW9uIG9mIHRoZSBwbG90IHdoaWxlIGhlIHdhcyBhdCBzdXBwZXIuIEhlIHdhcyBub3QgYXQgYWxsIGRpc3R1cmJlZCwgYnV0IGFmdGVyIGRyaW5raW5nIG1vcmUgZnJlZWx5IGV2ZW4gdGhhbiB1c3VhbCBhbmQgdHJlYXRpbmcgVGVyZW50aXVzIHdpdGgga2luZG5lc3MsIGFzIHNvb24gYXMgaGUgcmV0aXJlZCB0byByZXN0IHN0b2xlIG91dCBvZiB0aGUgdGVudCB1bnBlcmNlaXZlZCwgc2V0IGEgZ3VhcmQgYWJvdXQgaGlzIGZhdGhlciwgYW5kIHF1aWV0bHkgYXdhaXRlZCB0aGUgZXZlbnQuIFRlcmVudGl1cywgd2hlbiBoZSB0aG91Z2h0IHRoZSBwcm9wZXIgdGltZSB3YXMgY29tZSwgYXJvc2UsIGFuZCBhcHByb2FjaGluZyB0aGUgY291Y2ggb2YgUG9tcGV5IHdpdGggZHJhd24gc3dvcmQsIHN0YWJiZWQgdGhlIGJlZC1jbG90aGluZyBtYW55IHRpbWVzLCBzdXBwb3NpbmcgaGltIHRvIGJlIGx5aW5nIHRoZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIHRoZXJlIHdhcyBhIGdyZWF0IGNvbW1vdGlvbiwgb3dpbmcgdG8gdGhlIGhhdHJlZCBmZWx0IHRvd2FyZHMgdGhlIGdlbmVyYWwsIGFuZCBhIHJ1c2ggdG8gcmV2b2x0IG9uIHRoZSBwYXJ0IG9mIHRoZSBzb2xkaWVycywgd2hvIHRvcmUgZG93biB0aGVpciB0ZW50cyBhbmQgc2VpemVkIHRoZWlyIGFybXMuIFRoZSBnZW5lcmFsIGRpZCBub3QgdmVudHVyZSBmb3J0aCBmb3IgZmVhciBvZiB0aGUgdHVtdWx0LCBidXQgUG9tcGV5IHdlbnQgdXAgYW5kIGRvd24gYW1vbmcgdGhlIHNvbGRpZXJzIGJlc2VlY2hpbmcgdGhlbSB3aXRoIHRlYXJzLCBhbmQgZmluYWxseSB0aHJldyBoaW1zZWxmIG9uIGhpcyBmYWNlIGluIGZyb250IG9mIHRoZSBnYXRlIG9mIHRoZSBjYW1wIGFuZCBsYXkgdGhlcmUgaW4gdGhlIHdheSwgd2VlcGluZyBhbmQgYmlkZGluZyB0aG9zZSB3aG8gd2VyZSBnb2luZyBvdXQgdG8gdHJhbXBsZSBvbiBoaW0uIEFzIGEgY29uc2VxdWVuY2UsIGV2ZXJ5b25lIGRyZXcgYmFjayBvdXQgb2Ygc2hhbWUsIGFuZCBhbGwgZXhjZXB0IGVpZ2h0IGh1bmRyZWQgY2hhbmdlZCB0aGVpciBtaW5kcyBhbmQgd2VyZSByZWNvbmNpbGVkIHRvIHRoZWlyIGdlbmVyYWwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBoZSB3YXMgc3RpbGwgcXVpdGUgYSBzdHJpcGxpbmcgYW5kIHdhcyBvbiBhIGNhbXBhaWduIHdpdGggaGlzIGZhdGhlciwgd2hvIHdhcyBhcnJheWVkIGFnYWluc3QgQ2lubmEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4NyBCLkMuPC9ub3RlPiBoZSBoYWQgYSBjZXJ0YWluIEx1Y2l1cyBUZXJlbnRpdXMgYXMgdGVudG1hdGUgYW5kIGNvbXBhbmlvbi4gVGhpcyBtYW4gd2FzIGJyaWJlZCBieSBDaW5uYSwgYW5kIHdhcyBoaW1zZWxmIHRvIGtpbGwgUG9tcGV5LCB3aGlsZSBvdGhlcnMgd2VyZSB0byBzZXQgZmlyZSB0byB0aGUgdGVudCBvZiB0aGUgY29tbWFuZGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQb21wZXkgZ290IGluZm9ybWF0aW9uIG9mIHRoZSBwbG90IHdoaWxlIGhlIHdhcyBhdCBzdXBwZXIuIEhlIHdhcyBub3QgYXQgYWxsIGRpc3R1cmJlZCwgYnV0IGFmdGVyIGRyaW5raW5nIG1vcmUgZnJlZWx5IGV2ZW4gdGhhbiB1c3VhbCBhbmQgdHJlYXRpbmcgVGVyZW50aXVzIHdpdGgga2luZG5lc3MsIGFzIHNvb24gYXMgaGUgcmV0aXJlZCB0byByZXN0IHN0b2xlIG91dCBvZiB0aGUgdGVudCB1bnBlcmNlaXZlZCwgc2V0IGEgZ3VhcmQgYWJvdXQgaGlzIGZhdGhlciwgYW5kIHF1aWV0bHkgYXdhaXRlZCB0aGUgZXZlbnQuIFRlcmVudGl1cywgd2hlbiBoZSB0aG91Z2h0IHRoZSBwcm9wZXIgdGltZSB3YXMgY29tZSwgYXJvc2UsIGFuZCBhcHByb2FjaGluZyB0aGUgY291Y2ggb2YgUG9tcGV5IHdpdGggZHJhd24gc3dvcmQsIHN0YWJiZWQgdGhlIGJlZC1jbG90aGluZyBtYW55IHRpbWVzLCBzdXBwb3NpbmcgaGltIHRvIGJlIGx5aW5nIHRoZXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgdGhlcmUgd2FzIGEgZ3JlYXQgY29tbW90aW9uLCBvd2luZyB0byB0aGUgaGF0cmVkIGZlbHQgdG93YXJkcyB0aGUgZ2VuZXJhbCwgYW5kIGEgcnVzaCB0byByZXZvbHQgb24gdGhlIHBhcnQgb2YgdGhlIHNvbGRpZXJzLCB3aG8gdG9yZSBkb3duIHRoZWlyIHRlbnRzIGFuZCBzZWl6ZWQgdGhlaXIgYXJtcy4gVGhlIGdlbmVyYWwgZGlkIG5vdCB2ZW50dXJlIGZvcnRoIGZvciBmZWFyIG9mIHRoZSB0dW11bHQsIGJ1dCBQb21wZXkgd2VudCB1cCBhbmQgZG93biBhbW9uZyB0aGUgc29sZGllcnMgYmVzZWVjaGluZyB0aGVtIHdpdGggdGVhcnMsIGFuZCBmaW5hbGx5IHRocmV3IGhpbXNlbGYgb24gaGlzIGZhY2UgaW4gZnJvbnQgb2YgdGhlIGdhdGUgb2YgdGhlIGNhbXAgYW5kIGxheSB0aGVyZSBpbiB0aGUgd2F5LCB3ZWVwaW5nIGFuZCBiaWRkaW5nIHRob3NlIHdobyB3ZXJlIGdvaW5nIG91dCB0byB0cmFtcGxlIG9uIGhpbS4gQXMgYSBjb25zZXF1ZW5jZSwgZXZlcnlvbmUgZHJldyBiYWNrIG91dCBvZiBzaGFtZSwgYW5kIGFsbCBleGNlcHQgZWlnaHQgaHVuZHJlZCBjaGFuZ2VkIHRoZWlyIG1pbmRzIGFuZCB3ZXJlIHJlY29uY2lsZWQgdG8gdGhlaXIgZ2VuZXJhbC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIFN0cmFibyB3YXMgZGVhZCwgUG9tcGV5LCBhcyBoaXMgaGVpciwgd2FzIHB1dCBvbiB0cmlhbCBmb3IgdGhlZnQgb2YgcHVibGljIHByb3BlcnR5LiBBbmQgYWx0aG91Z2ggUG9tcGV5IGRpc2NvdmVyZWQgdGhhdCBtb3N0IG9mIHRoZSB0aGVmdHMgd2VyZSBjb21taXR0ZWQgYnkgQWxleGFuZGVyLCBvbmUgb2YgaGlzIGZhdGhlcidzIGZyZWVkbWVuLCBhbmQgcHJvdmVkIGl0IHRvIHRoZSBtYWdpc3RyYXRlcywgc3RpbGwgaGUgaGltc2VsZiB3YXMgYWNjdXNlZCBvZiBoYXZpbmcgaW4gaGlzIHBvc3Nlc3Npb24gaHVudGluZyBuZXRzIGFuZCBib29rcyBmcm9tIHRoZSBib290eSBvZiBBc2N1bHVtLiBOb3csIGhlIGRpZCByZWNlaXZlIHRoZXNlIHRoaW5ncyBmcm9tIGhpcyBmYXRoZXIgd2hlbiBoZSB0b29rIEFzY3VsdW08bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4OSBCLkMuPC9ub3RlPiwgYnV0IGhlIGxvc3QgdGhlbSB3aGVuIENpbm5hJ3MgZ3VhcmRzLCBvbiB0aGF0IGdlbmVyYWwncyByZXR1cm4gdG8gUm9tZSwgYnJva2UgaW50byBoaXMgaG91c2UgYW5kIHJhbnNhY2tlZCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGFkIG1hbnkgcHJlbGltaW5hcnkgYm91dHMgaW4gdGhlIGNhc2Ugd2l0aCBoaXMgYWNjdXNlciwgYW5kIHNpbmNlIGluIHRoZXNlIGhlIHNob3dlZCBhbiBhY3VtZW4gYW5kIHBvaXNlIGJleW9uZCBoaXMgeWVhcnMsIGhlIHdvbiBncmVhdCByZXB1dGF0aW9uIGFuZCBmYXZvdXIsIGluc29tdWNoIHRoYXQgQW50aXN0aXVzLCB0aGUgcHJhZXRvciBhbmQganVkZ2UgaW4gdGhlIGNhc2UsIHRvb2sgYSBncmVhdCBsaWtpbmcgdG8gaGltIGFuZCBvZmZlcmVkIGhpbSBoaXMgb3duIGRhdWdodGVyIGluIG1hcnJpYWdlLCBhbmQgY29uZmVycmVkIHdpdGggaGlzIGZyaWVuZHMgYWJvdXQgdGhlIG1hdHRlci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5IGFjY2VwdGVkIHRoZSBvZmZlciBhbmQgYSBzZWNyZXQgYWdyZWVtZW50IHdhcyBtYWRlIGJldHdlZW4gdGhlbSwgYnV0IG5ldmVydGhlbGVzcyB0aGUgcGVvcGxlIGdvdCB3aW5kIG9mIHRoZSBtYXR0ZXIsIG93aW5nIHRvIHRoZSBwYWlucyB3aGljaCBBbnRpc3RpdXMgdG9vayB0byBmYXZvdXIgUG9tcGV5LiBBbmQgZmluYWxseSwgd2hlbiBBbnRpc3RpdXMgcHJvbm91bmNlZCB0aGUgdmVyZGljdCBvZiB0aGUganVkZ2VzIGluIGFjcXVpdHRhbCwgdGhlIHBlb3BsZSwgYXMgaWYgdXBvbiBhIHNpZ25hbCBnaXZlbiwgYnJva2Ugb3V0IGluIHRoZSBhbmNpZW50IGFuZCBjdXN0b21hcnkgbWFycmlhZ2UgYWNjbGFtYXRpb24sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGFsYXNpby48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIFN0cmFibyB3YXMgZGVhZCwgUG9tcGV5LCBhcyBoaXMgaGVpciwgd2FzIHB1dCBvbiB0cmlhbCBmb3IgdGhlZnQgb2YgcHVibGljIHByb3BlcnR5LiBBbmQgYWx0aG91Z2ggUG9tcGV5IGRpc2NvdmVyZWQgdGhhdCBtb3N0IG9mIHRoZSB0aGVmdHMgd2VyZSBjb21taXR0ZWQgYnkgQWxleGFuZGVyLCBvbmUgb2YgaGlzIGZhdGhlcidzIGZyZWVkbWVuLCBhbmQgcHJvdmVkIGl0IHRvIHRoZSBtYWdpc3RyYXRlcywgc3RpbGwgaGUgaGltc2VsZiB3YXMgYWNjdXNlZCBvZiBoYXZpbmcgaW4gaGlzIHBvc3Nlc3Npb24gaHVudGluZyBuZXRzIGFuZCBib29rcyBmcm9tIHRoZSBib290eSBvZiBBc2N1bHVtLiBOb3csIGhlIGRpZCByZWNlaXZlIHRoZXNlIHRoaW5ncyBmcm9tIGhpcyBmYXRoZXIgd2hlbiBoZSB0b29rIEFzY3VsdW08bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg5IEIuQy48L25vdGU+LCBidXQgaGUgbG9zdCB0aGVtIHdoZW4gQ2lubmEncyBndWFyZHMsIG9uIHRoYXQgZ2VuZXJhbCdzIHJldHVybiB0byBSb21lLCBicm9rZSBpbnRvIGhpcyBob3VzZSBhbmQgcmFuc2Fja2VkIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBtYW55IHByZWxpbWluYXJ5IGJvdXRzIGluIHRoZSBjYXNlIHdpdGggaGlzIGFjY3VzZXIsIGFuZCBzaW5jZSBpbiB0aGVzZSBoZSBzaG93ZWQgYW4gYWN1bWVuIGFuZCBwb2lzZSBiZXlvbmQgaGlzIHllYXJzLCBoZSB3b24gZ3JlYXQgcmVwdXRhdGlvbiBhbmQgZmF2b3VyLCBpbnNvbXVjaCB0aGF0IEFudGlzdGl1cywgdGhlIHByYWV0b3IgYW5kIGp1ZGdlIGluIHRoZSBjYXNlLCB0b29rIGEgZ3JlYXQgbGlraW5nIHRvIGhpbSBhbmQgb2ZmZXJlZCBoaW0gaGlzIG93biBkYXVnaHRlciBpbiBtYXJyaWFnZSwgYW5kIGNvbmZlcnJlZCB3aXRoIGhpcyBmcmllbmRzIGFib3V0IHRoZSBtYXR0ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSBhY2NlcHRlZCB0aGUgb2ZmZXIgYW5kIGEgc2VjcmV0IGFncmVlbWVudCB3YXMgbWFkZSBiZXR3ZWVuIHRoZW0sIGJ1dCBuZXZlcnRoZWxlc3MgdGhlIHBlb3BsZSBnb3Qgd2luZCBvZiB0aGUgbWF0dGVyLCBvd2luZyB0byB0aGUgcGFpbnMgd2hpY2ggQW50aXN0aXVzIHRvb2sgdG8gZmF2b3VyIFBvbXBleS4gQW5kIGZpbmFsbHksIHdoZW4gQW50aXN0aXVzIHByb25vdW5jZWQgdGhlIHZlcmRpY3Qgb2YgdGhlIGp1ZGdlcyBpbiBhY3F1aXR0YWwsIHRoZSBwZW9wbGUsIGFzIGlmIHVwb24gYSBzaWduYWwgZ2l2ZW4sIGJyb2tlIG91dCBpbiB0aGUgYW5jaWVudCBhbmQgY3VzdG9tYXJ5IG1hcnJpYWdlIGFjY2xhbWF0aW9uLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGFsYXNpby48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvcmlnaW4gb2YgdGhlIGN1c3RvbSBpcyBzYWlkIHRvIGhhdmUgYmVlbiB0aGlzLiBBdCB0aGUgdGltZSB3aGVuIHRoZSBkYXVnaHRlcnMgb2YgdGhlIFNhYmluZXMsIHdobyBoYWQgY29tZSB0byBSb21lIHRvIHNlZSBhIHNwZWN0YWNsZSBvZiBnYW1lcywgd2VyZSBoYWxlZCBhd2F5IGJ5IHRoZSBtb3N0IGRpc3Rpbmd1aXNoZWQgUm9tYW5zIHRvIGJlIHRoZWlyIHdpdmVzLCBjZXJ0YWluIGhpcmVsaW5ncyBhbmQgaGVyZHNtZW4gb2YgdGhlIG1lYW5lciBzb3J0IHNlaXplZCBhIGZhaXIgYW5kIHN0YXRlbHkgbWFpZGVuIGFuZCB3ZXJlIGNhcnJ5aW5nIGhlciBvZmYuIEluIG9yZGVyLCB0aGVyZWZvcmUsIHRoYXQgbm8gb25lIG9mIHRoZWlyIGJldHRlcnMsIG9uIG1lZXRpbmcgdGhlbSwgbWlnaHQgcm9iIHRoZW0gb2YgdGhlaXIgcHJpemUsIHRoZXkgc2hvdXRlZCB3aXRoIG9uZSB2b2ljZSBhcyB0aGV5IHJhbiwgPGVtcGg+CgkJCQkJICAgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciBUYWxhc2l1cyw8L3E+CiAgICAgICAgICAgIDwvZW1waD4gVGFsYXNpdXMgYmVpbmcgYSB3ZWxsLWtub3duIGFuZCBwb3B1bGFyIHBlcnNvbmFnZS4gQ29uc2VxdWVudGx5LCB0aG9zZSB3aG8gaGVhcmQgdGhlIG5hbWUgY2xhcHBlZCB0aGVpciBoYW5kcyBhbmQgc2hvdXRlZCBpdCB0aGVtc2VsdmVzLCBhcyBpZiByZWpvaWNpbmcgd2l0aCB0aGUgb3RoZXJzIGFuZCBhcHByb3Zpbmcgd2hhdCB0aGV5IGRpZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGlzIGNpcmN1bXN0YW5jZSwgdGhleSBzYXks4oCUYW5kIGluZGVlZCB0aGUgbWFycmlhZ2UgcHJvdmVkIGEgaGFwcHkgb25lIGZvciBUYWxhc2l1cyzigJR0aGlzIGFjY2xhbWF0aW9uIGlzIHVzZWQgaW4gbWlydGhmdWwgZ3JlZXRpbmcgb2YgdGhlIG5ld2x5IHdlZGRlZC4gVGhpcyBpcyB0aGUgbW9zdCBjcmVkaWJsZSBvZiB0aGUgc3RvcmllcyB0b2xkIGFib3V0IFRhbGFzaXVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFJvbS4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Sb211bHVzPC90aXRsZT4sIGNoYXB0ZXIgeHYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEJ1dCBiZSBpdCB0cnVlIG9yIG5vdCwgYSBmZXcgZGF5cyBhZnRlcndhcmRzIFBvbXBleSBtYXJyaWVkIEFudGlzdGlhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvcmlnaW4gb2YgdGhlIGN1c3RvbSBpcyBzYWlkIHRvIGhhdmUgYmVlbiB0aGlzLiBBdCB0aGUgdGltZSB3aGVuIHRoZSBkYXVnaHRlcnMgb2YgdGhlIFNhYmluZXMsIHdobyBoYWQgY29tZSB0byBSb21lIHRvIHNlZSBhIHNwZWN0YWNsZSBvZiBnYW1lcywgd2VyZSBoYWxlZCBhd2F5IGJ5IHRoZSBtb3N0IGRpc3Rpbmd1aXNoZWQgUm9tYW5zIHRvIGJlIHRoZWlyIHdpdmVzLCBjZXJ0YWluIGhpcmVsaW5ncyBhbmQgaGVyZHNtZW4gb2YgdGhlIG1lYW5lciBzb3J0IHNlaXplZCBhIGZhaXIgYW5kIHN0YXRlbHkgbWFpZGVuIGFuZCB3ZXJlIGNhcnJ5aW5nIGhlciBvZmYuIEluIG9yZGVyLCB0aGVyZWZvcmUsIHRoYXQgbm8gb25lIG9mIHRoZWlyIGJldHRlcnMsIG9uIG1lZXRpbmcgdGhlbSwgbWlnaHQgcm9iIHRoZW0gb2YgdGhlaXIgcHJpemUsIHRoZXkgc2hvdXRlZCB3aXRoIG9uZSB2b2ljZSBhcyB0aGV5IHJhbiwgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCQkgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IgVGFsYXNpdXMsPC9xPgogICAgICAgICAgICA8L2VtcGg+IFRhbGFzaXVzIGJlaW5nIGEgd2VsbC1rbm93biBhbmQgcG9wdWxhciBwZXJzb25hZ2UuIENvbnNlcXVlbnRseSwgdGhvc2Ugd2hvIGhlYXJkIHRoZSBuYW1lIGNsYXBwZWQgdGhlaXIgaGFuZHMgYW5kIHNob3V0ZWQgaXQgdGhlbXNlbHZlcywgYXMgaWYgcmVqb2ljaW5nIHdpdGggdGhlIG90aGVycyBhbmQgYXBwcm92aW5nIHdoYXQgdGhleSBkaWQuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IgVGFsYXNpdXMsPC9xPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhpcyBjaXJjdW1zdGFuY2UsIHRoZXkgc2F5LOKAlGFuZCBpbmRlZWQgdGhlIG1hcnJpYWdlIHByb3ZlZCBhIGhhcHB5IG9uZSBmb3IgVGFsYXNpdXMs4oCUdGhpcyBhY2NsYW1hdGlvbiBpcyB1c2VkIGluIG1pcnRoZnVsIGdyZWV0aW5nIG9mIHRoZSBuZXdseSB3ZWRkZWQuIFRoaXMgaXMgdGhlIG1vc3QgY3JlZGlibGUgb2YgdGhlIHN0b3JpZXMgdG9sZCBhYm91dCBUYWxhc2l1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tdWx1czwvdGl0bGU+LCBjaGFwdGVyIHh2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBCdXQgYmUgaXQgdHJ1ZSBvciBub3QsIGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcyBQb21wZXkgbWFycmllZCBBbnRpc3RpYS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tdWx1czwvdGl0bGU+LCBjaGFwdGVyIHh2LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tdWx1czwvdGl0bGU+LCBjaGFwdGVyIHh2LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSBiZXRvb2sgaGltc2VsZiB0byBDaW5uYSdzIGNhbXAsIGJ1dCBiZWNhdXNlIG9mIHNvbWUgY2FsdW1uaW91cyBhY2N1c2F0aW9uIGdyZXcgZmVhcmZ1bCBhbmQgcXVpY2tseSB3aXRoZHJldyB1bm5vdGljZWQuIE9uIGhpcyBkaXNhcHBlYXJhbmNlLCB0aGVyZSB3ZW50IGEgcnVtb3VyIHRocm91Z2ggdGhlIGNhbXAgd2hpY2ggc2FpZCB0aGF0IENpbm5hIGhhZCBzbGFpbiB0aGUgeW91bmcgbWFuLCBhbmQgaW4gY29uc2VxdWVuY2Ugb2YgdGhpcyB0aG9zZSB3aG8gaGFkIGxvbmcgaGF0ZWQgQ2lubmEgYW5kIGZlbHQgb3BwcmVzc2VkIGJ5IGhpbSBtYWRlIGFuIG9uc2xhdWdodCB1cG9uIGhpbS4gQ2lubmEsIGFzIGhlIGZsZWQsIGhhdmluZyBiZWVuIHNlaXplZCBieSBvbmUgb2YgdGhlIGNlbnR1cmlvbnMgd2hvIHB1cnN1ZWQgaGltIHdpdGggZHJhd24gc3dvcmQsIGNsYXNwZWQgaGltIGJ5IHRoZSBrbmVlcyBhbmQgaGVsZCBvdXQgaGlzIHNlYWwtcmluZywgd2hpY2ggd2FzIG9mIGdyZWF0IHByaWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGNlbnR1cmlvbiwgd2l0aCBncmVhdCBpbnNvbGVuY2UsIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kZWVkLCBJIGFtIG5vdCBjb21lIHRvIHNlYWwgYSBzdXJldHksIGJ1dCB0byBwdW5pc2ggYSBsYXdsZXNzIGFuZCB3aWNrZWQgdHlyYW50LDwvcT4gYW5kIHNsZXcgaGltLiBXaGVuIENpbm5hIGhhZCBjb21lIHRvIHN1Y2ggYW4gZW5kLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg0IEIuQyZndDs8L25vdGU+IENhcmJvLCBhIHR5cmFudCBtb3JlIGNhcHJpY2lvdXMgdGhhbiBoZSwgcmVjZWl2ZWQgYW5kIGV4ZXJjaXNlZCB0aGUgY2hpZWYgYXV0aG9yaXR5LiBCdXQgU3VsbGEgd2FzIGFwcHJvYWNoaW5nLCB0byB0aGUgZ3JlYXQgZGVsaWdodCBvZiBtb3N0IG1lbiwgd2hvIHdlcmUgbGVkIGJ5IHRoZWlyIHByZXNlbnQgZXZpbHMgdG8gdGhpbmsgZXZlbiBhIGNoYW5nZSBvZiBtYXN0ZXJzIG5vIHNsaWdodCBnb29kLiBUbyBzdWNoIGEgcGFzcyBoYWQgaGVyIGNhbGFtaXRpZXMgYnJvdWdodCB0aGUgY2l0eSB0aGF0LCBpbiBkZXNwYWlyIG9mIGZyZWVkb20sIHNoZSBzb3VnaHQgYSBtb3JlIHRvbGVyYWJsZSBzZXJ2aXR1ZGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhlIGJldG9vayBoaW1zZWxmIHRvIENpbm5hJ3MgY2FtcCwgYnV0IGJlY2F1c2Ugb2Ygc29tZSBjYWx1bW5pb3VzIGFjY3VzYXRpb24gZ3JldyBmZWFyZnVsIGFuZCBxdWlja2x5IHdpdGhkcmV3IHVubm90aWNlZC4gT24gaGlzIGRpc2FwcGVhcmFuY2UsIHRoZXJlIHdlbnQgYSBydW1vdXIgdGhyb3VnaCB0aGUgY2FtcCB3aGljaCBzYWlkIHRoYXQgQ2lubmEgaGFkIHNsYWluIHRoZSB5b3VuZyBtYW4sIGFuZCBpbiBjb25zZXF1ZW5jZSBvZiB0aGlzIHRob3NlIHdobyBoYWQgbG9uZyBoYXRlZCBDaW5uYSBhbmQgZmVsdCBvcHByZXNzZWQgYnkgaGltIG1hZGUgYW4gb25zbGF1Z2h0IHVwb24gaGltLiBDaW5uYSwgYXMgaGUgZmxlZCwgaGF2aW5nIGJlZW4gc2VpemVkIGJ5IG9uZSBvZiB0aGUgY2VudHVyaW9ucyB3aG8gcHVyc3VlZCBoaW0gd2l0aCBkcmF3biBzd29yZCwgY2xhc3BlZCBoaW0gYnkgdGhlIGtuZWVzIGFuZCBoZWxkIG91dCBoaXMgc2VhbC1yaW5nLCB3aGljaCB3YXMgb2YgZ3JlYXQgcHJpY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgY2VudHVyaW9uLCB3aXRoIGdyZWF0IGluc29sZW5jZSwgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluZGVlZCwgSSBhbSBub3QgY29tZSB0byBzZWFsIGEgc3VyZXR5LCBidXQgdG8gcHVuaXNoIGEgbGF3bGVzcyBhbmQgd2lja2VkIHR5cmFudCw8L3E+IGFuZCBzbGV3IGhpbS4gV2hlbiBDaW5uYSBoYWQgY29tZSB0byBzdWNoIGFuIGVuZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg0IEIuQyZndDs8L25vdGU+IENhcmJvLCBhIHR5cmFudCBtb3JlIGNhcHJpY2lvdXMgdGhhbiBoZSwgcmVjZWl2ZWQgYW5kIGV4ZXJjaXNlZCB0aGUgY2hpZWYgYXV0aG9yaXR5LiBCdXQgU3VsbGEgd2FzIGFwcHJvYWNoaW5nLCB0byB0aGUgZ3JlYXQgZGVsaWdodCBvZiBtb3N0IG1lbiwgd2hvIHdlcmUgbGVkIGJ5IHRoZWlyIHByZXNlbnQgZXZpbHMgdG8gdGhpbmsgZXZlbiBhIGNoYW5nZSBvZiBtYXN0ZXJzIG5vIHNsaWdodCBnb29kLiBUbyBzdWNoIGEgcGFzcyBoYWQgaGVyIGNhbGFtaXRpZXMgYnJvdWdodCB0aGUgY2l0eSB0aGF0LCBpbiBkZXNwYWlyIG9mIGZyZWVkb20sIHNoZSBzb3VnaHQgYSBtb3JlIHRvbGVyYWJsZSBzZXJ2aXR1ZGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lLCB0aGVuLCBQb21wZXkgd2FzIHRhcnJ5aW5nIGluIHRoZSBJdGFsaWFuIHByb3ZpbmNlIG9mIFBpY2VudW0sIHBhcnRseSBiZWNhdXNlIGhlIGhhZCBlc3RhdGVzIHRoZXJlLCBidXQgbW9yZSBiZWNhdXNlIGhlIGhhZCBhIGxpa2luZyBmb3IgaXRzIGNpdGllcywgd2hpY2ggd2VyZSBkdXRpZnVsbHkgYW5kIGtpbmRseSBkaXNwb3NlZCB0b3dhcmRzIGhpbSBhcyBoaXMgZmF0aGVyJ3Mgc29uLiBBbmQgd2hlbiBoZSBzYXcgdGhlIGJlc3QgYW5kIG1vc3QgcHJvbWluZW50IGNpdGl6ZW5zIGZvcnNha2luZyB0aGVpciBob21lcyBhbmQgaGFzdGVuaW5nIGZyb20gYWxsIHF1YXJ0ZXJzIHRvIHRoZSBjYW1wIG9mIFN1bGxhIGFzIHRvIGEgaGF2ZW4gb2YgcmVmdWdlLCBoZSBoaW1zZWxmIHdvdWxkIG5vdCBkZWlnbiB0byBnbyB0byBoaW0gYXMgYSBmdWdpdGl2ZSwgbm9yIGVtcHR5LWhhbmRlZCwgbm9yIHdpdGggcmVxdWVzdHMgZm9yIGhlbHAsIGJ1dCBvbmx5IGFmdGVyIGNvbmZlcnJpbmcgc29tZSBmYXZvdXIgZmlyc3QsIGluIGEgd2F5IHRoYXQgd291bGQgZ2FpbiBoaW0gaG9ub3VyLCBhbmQgd2l0aCBhbiBhcm1lZCBmb3JjZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlIGhlIHRyaWVkIHRvIHJvdXNlIHVwIHRoZSBwZW9wbGUgb2YgUGljZW51bSBhbmQgbWFkZSB0ZXN0IG9mIHRoZWlyIGFsbGVnaWFuY2UuIFRoZXkgcmVhZGlseSBsaXN0ZW5lZCB0byBoaW0gYW5kIHBhaWQgbm8gaGVlZCB0byB0aGUgZW1pc3NhcmllcyBvZiBDYXJiby4gSW5kZWVkLCB3aGVuIGEgY2VydGFpbiBWZWRpdXMgcmVtYXJrZWQgdGhhdCBQb21wZXkgaGFkIHJ1biBhd2F5IGZyb20gcGVkYWdvZ3VlcyB0byBiZSBhIGRlbWFnb2d1ZSBhbW9uZyB0aGVtLCB0aGV5IHdlcmUgc28gaW5jZW5zZWQgdGhhdCB0aGV5IGZlbGwgdXBvbiBWZWRpdXMgYXQgb25jZSBhbmQga2lsbGVkIGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUsIHRoZW4sIFBvbXBleSB3YXMgdGFycnlpbmcgaW4gdGhlIEl0YWxpYW4gcHJvdmluY2Ugb2YgUGljZW51bSwgcGFydGx5IGJlY2F1c2UgaGUgaGFkIGVzdGF0ZXMgdGhlcmUsIGJ1dCBtb3JlIGJlY2F1c2UgaGUgaGFkIGEgbGlraW5nIGZvciBpdHMgY2l0aWVzLCB3aGljaCB3ZXJlIGR1dGlmdWxseSBhbmQga2luZGx5IGRpc3Bvc2VkIHRvd2FyZHMgaGltIGFzIGhpcyBmYXRoZXIncyBzb24uIEFuZCB3aGVuIGhlIHNhdyB0aGUgYmVzdCBhbmQgbW9zdCBwcm9taW5lbnQgY2l0aXplbnMgZm9yc2FraW5nIHRoZWlyIGhvbWVzIGFuZCBoYXN0ZW5pbmcgZnJvbSBhbGwgcXVhcnRlcnMgdG8gdGhlIGNhbXAgb2YgU3VsbGEgYXMgdG8gYSBoYXZlbiBvZiByZWZ1Z2UsIGhlIGhpbXNlbGYgd291bGQgbm90IGRlaWduIHRvIGdvIHRvIGhpbSBhcyBhIGZ1Z2l0aXZlLCBub3IgZW1wdHktaGFuZGVkLCBub3Igd2l0aCByZXF1ZXN0cyBmb3IgaGVscCwgYnV0IG9ubHkgYWZ0ZXIgY29uZmVycmluZyBzb21lIGZhdm91ciBmaXJzdCwgaW4gYSB3YXkgdGhhdCB3b3VsZCBnYWluIGhpbSBob25vdXIsIGFuZCB3aXRoIGFuIGFybWVkIGZvcmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSBoZSB0cmllZCB0byByb3VzZSB1cCB0aGUgcGVvcGxlIG9mIFBpY2VudW0gYW5kIG1hZGUgdGVzdCBvZiB0aGVpciBhbGxlZ2lhbmNlLiBUaGV5IHJlYWRpbHkgbGlzdGVuZWQgdG8gaGltIGFuZCBwYWlkIG5vIGhlZWQgdG8gdGhlIGVtaXNzYXJpZXMgb2YgQ2FyYm8uIEluZGVlZCwgd2hlbiBhIGNlcnRhaW4gVmVkaXVzIHJlbWFya2VkIHRoYXQgUG9tcGV5IGhhZCBydW4gYXdheSBmcm9tIHBlZGFnb2d1ZXMgdG8gYmUgYSBkZW1hZ29ndWUgYW1vbmcgdGhlbSwgdGhleSB3ZXJlIHNvIGluY2Vuc2VkIHRoYXQgdGhleSBmZWxsIHVwb24gVmVkaXVzIGF0IG9uY2UgYW5kIGtpbGxlZCBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIFBvbXBleSwgd2hvIHdhcyBvbmx5IHR3ZW50eS10aHJlZSB5ZWFycyBvbGQsIGFuZCB3aG8gaGFkIG5vdCBiZWVuIGFwcG9pbnRlZCBnZW5lcmFsIGJ5IGFueWJvZHkgd2hvbXNvZXZlciwgY29uZmVycmVkIHRoZSBjb21tYW5kIHVwb24gaGltc2VsZjsgYW5kIHNldHRpbmcgdXAgYSB0cmlidW5hbCBpbiB0aGUgbWFya2V0LXBsYWNlIG9mIEF1eGltdW0sIGEgbGFyZ2UgY2l0eSwgaXNzdWVkIGFuIGVkaWN0IG9yZGVyaW5nIHRoZSBjaGllZiBtZW4gdGhlcmUsIHR3byBicm90aGVycyBuYW1lZCBWZW50aWRpdXMsIHdobyB3ZXJlIGFjdGluZyBhZ2FpbnN0IGhpbSBpbiBDYXJibydzIGludGVyZXN0LCB0byBsZWF2ZSB0aGUgY2l0eS4gVGhlbiBoZSBwcm9jZWVkZWQgdG8gbGV2eSBzb2xkaWVycywgYW5kIGFmdGVyIGFwcG9pbnRpbmcgY2VudHVyaW9ucyBhbmQgY29tbWFuZGVycyBmb3IgdGhlbSBhbGwgaW4gZHVlIGZvcm0sIG1hZGUgYSBjaXJjdWl0IG9mIHRoZSBvdGhlciBjaXRpZXMsIGRvaW5nIHRoZSBzYW1lIHRoaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhlIHBhcnRpc2FucyBvZiBDYXJibyB3aXRoZHJldyBhbmQgZ2F2ZSBwbGFjZSB0byBoaW0sIGFuZCB0aGUgcmVzdCBnbGFkbHkgb2ZmZXJlZCB0aGVpciBzZXJ2aWNlcyB0byBoaW0sIHNvIHRoYXQgaW4gYSBzaG9ydCB0aW1lIGhlIGhhZCBtdXN0ZXJlZCB0aHJlZSBjb21wbGV0ZSBsZWdpb25zLCBhbmQgcHJvdmlkZWQgdGhlbSB3aXRoIGZvb2QsIGJhZ2dhZ2Utd2FnZ29ucywgY2FycmlhZ2VzLCBhbmQgb3RoZXIgbmVlZGZ1bCBlcXVpcG1lbnQuIFRoZW4gaGUgbGVkIGhpcyBmb3JjZXMgdG93YXJkcyBTdWxsYSwgbm90IGluIGhhc3RlLCBub3IgZXZlbiB3aXRoIGEgZGVzaXJlIHRvIGVzY2FwZSBvYnNlcnZhdGlvbiwgYnV0IHRhcnJ5aW5nIG9uIHRoZSBtYXJjaCBhcyBoZSBoYXJyaWVkIHRoZSBlbmVteSwgYW5kIGVuZGVhdm91cmluZyB0byBkZXRhY2ggZnJvbSBDYXJibydzIGludGVyZXN0IGFsbCB0aGF0IHBhcnQgb2YgSXRhbHkgdGhyb3VnaCB3aGljaCBoZSBwYXNzZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIFBvbXBleSwgd2hvIHdhcyBvbmx5IHR3ZW50eS10aHJlZSB5ZWFycyBvbGQsIGFuZCB3aG8gaGFkIG5vdCBiZWVuIGFwcG9pbnRlZCBnZW5lcmFsIGJ5IGFueWJvZHkgd2hvbXNvZXZlciwgY29uZmVycmVkIHRoZSBjb21tYW5kIHVwb24gaGltc2VsZjsgYW5kIHNldHRpbmcgdXAgYSB0cmlidW5hbCBpbiB0aGUgbWFya2V0LXBsYWNlIG9mIEF1eGltdW0sIGEgbGFyZ2UgY2l0eSwgaXNzdWVkIGFuIGVkaWN0IG9yZGVyaW5nIHRoZSBjaGllZiBtZW4gdGhlcmUsIHR3byBicm90aGVycyBuYW1lZCBWZW50aWRpdXMsIHdobyB3ZXJlIGFjdGluZyBhZ2FpbnN0IGhpbSBpbiBDYXJibydzIGludGVyZXN0LCB0byBsZWF2ZSB0aGUgY2l0eS4gVGhlbiBoZSBwcm9jZWVkZWQgdG8gbGV2eSBzb2xkaWVycywgYW5kIGFmdGVyIGFwcG9pbnRpbmcgY2VudHVyaW9ucyBhbmQgY29tbWFuZGVycyBmb3IgdGhlbSBhbGwgaW4gZHVlIGZvcm0sIG1hZGUgYSBjaXJjdWl0IG9mIHRoZSBvdGhlciBjaXRpZXMsIGRvaW5nIHRoZSBzYW1lIHRoaW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgcGFydGlzYW5zIG9mIENhcmJvIHdpdGhkcmV3IGFuZCBnYXZlIHBsYWNlIHRvIGhpbSwgYW5kIHRoZSByZXN0IGdsYWRseSBvZmZlcmVkIHRoZWlyIHNlcnZpY2VzIHRvIGhpbSwgc28gdGhhdCBpbiBhIHNob3J0IHRpbWUgaGUgaGFkIG11c3RlcmVkIHRocmVlIGNvbXBsZXRlIGxlZ2lvbnMsIGFuZCBwcm92aWRlZCB0aGVtIHdpdGggZm9vZCwgYmFnZ2FnZS13YWdnb25zLCBjYXJyaWFnZXMsIGFuZCBvdGhlciBuZWVkZnVsIGVxdWlwbWVudC4gVGhlbiBoZSBsZWQgaGlzIGZvcmNlcyB0b3dhcmRzIFN1bGxhLCBub3QgaW4gaGFzdGUsIG5vciBldmVuIHdpdGggYSBkZXNpcmUgdG8gZXNjYXBlIG9ic2VydmF0aW9uLCBidXQgdGFycnlpbmcgb24gdGhlIG1hcmNoIGFzIGhlIGhhcnJpZWQgdGhlIGVuZW15LCBhbmQgZW5kZWF2b3VyaW5nIHRvIGRldGFjaCBmcm9tIENhcmJvJ3MgaW50ZXJlc3QgYWxsIHRoYXQgcGFydCBvZiBJdGFseSB0aHJvdWdoIHdoaWNoIGhlIHBhc3NlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBjYW1lIHVwIGFnYWluc3QgaGltLCBhY2NvcmRpbmdseSwgdGhyZWUgaG9zdGlsZSBnZW5lcmFscyBhdCBvbmNlLCBDYXJpbmFzLCBDbG9lbGl1cywgYW5kIEJydXR1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbGwgYmVsb25naW5nIHRvIHRoZSBNYXJpYW4gcGFydHkuPC9ub3RlPiBub3QgYWxsIGluIGZyb250IG9mIGhpbSwgbm9yIGZyb20gYW55IG9uZSBkaXJlY3Rpb24sIGJ1dCBlbmNvbXBhc3NpbmcgaGltIHJvdW5kIHdpdGggdGhyZWUgYXJtaWVzLCBpbiBvcmRlciB0byBhbm5paGlsYXRlIGhpbS4gUG9tcGV5LCBob3dldmVyLCB3YXMgbm90IGFsYXJtZWQsIGJ1dCBjb2xsZWN0ZWQgYWxsIGhpcyBmb3JjZXMgaW50byBvbmUgYm9keSBhbmQgaGFzdGVuZWQgdG8gYXR0YWNrIG9uZSBvZiB0aGUgaG9zdGlsZSBhcm1pZXMsIHRoYXQgb2YgQnJ1dHVzLCBwdXR0aW5nIGhpcyBjYXZhbHJ5LCBhbW9uZyB3aG9tIGhlIGhpbXNlbGYgcm9kZSwgaW4gdGhlIHZhbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gZnJvbSB0aGUgZW5lbXkncyBzaWRlIGFsc28gdGhlIENlbHRpYyBob3JzZW1lbiByb2RlIG91dCBhZ2FpbnN0IGhpbSwgaGUgcHJvbXB0bHkgY2xvc2VkIHdpdGggdGhlIGZvcmVtb3N0IGFuZCBzdHVyZGllc3Qgb2YgdGhlbSwgc21vdGUgaGltIHdpdGggaGlzIHNwZWFyLCBhbmQgYnJvdWdodCBoaW0gZG93bi4gVGhlbiB0aGUgcmVzdCB0dXJuZWQgYW5kIGZsZWQgYW5kIHRocmV3IHRoZWlyIGluZmFudHJ5IGFsc28gaW50byBjb25mdXNpb24gc28gdGhhdCB0aGVyZSB3YXMgYSBnZW5lcmFsIHJvdXQuIEFmdGVyIHRoaXMgdGhlIG9wcG9zaW5nIGdlbmVyYWxzIGZlbGwgb3V0IHdpdGggb25lIGFub3RoZXIgYW5kIHJldGlyZWQsIGFzIGVhY2ggYmVzdCBjb3VsZCwgYW5kIHRoZSBjaXRpZXMgY2FtZSBvdmVyIHRvIFBvbXBleSdzIHNpZGUsIGFyZ3VpbmcgdGhhdCBmZWFyIGhhZCBzY2F0dGVyZWQgaGlzIGVuZW1pZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5leHQsIFNjaXBpbyB0aGUgY29uc3VsIGNhbWUgdXAgYWdhaW5zdCBoaW0sIGJ1dCBiZWZvcmUgdGhlIGxpbmVzIG9mIGJhdHRsZSB3ZXJlIHdpdGhpbiByZWFjaCBvZiBlYWNoIG90aGVyJ3MgamF2ZWxpbnMsIFNjaXBpbydzIHNvbGRpZXJzIHNhbHV0ZWQgUG9tcGV5J3MgYW5kIGNhbWUgb3ZlciB0byB0aGVpciBzaWRlLCBhbmQgU2NpcGlvIHRvb2sgdG8gZmxpZ2h0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIHNlZW1zIHRvIGhhdmUgdHJhbnNmZXJyZWQgdGhpcyBleHBsb2l0IGZyb20gU3VsbGEgdG8gUG9tcGV5LiBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAyOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlN1bGxhPC90aXRsZT4sIHh4dmlpaS4gMS0zPC9iaWJsPiwgYW5kIGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAxLjEwLjg1IiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZT5CZWxsLiBDaXYuPC90aXRsZT4gaS4gODUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEZpbmFsbHksIHdoZW4gQ2FyYm8gaGltc2VsZiBzZW50IG1hbnkgdHJvb3BzIG9mIGNhdmFscnkgYWdhaW5zdCBoaW0gYnkgdGhlIHJpdmVyIEFyc2lzLCBoZSBtZXQgdGhlaXIgb25zZXQgdmlnb3JvdXNseSwgcm91dGVkIHRoZW0sIGFuZCBpbiBoaXMgcHVyc3VpdCBmb3JjZWQgdGhlbSBhbGwgdXBvbiBkaWZmaWN1bHQgZ3JvdW5kIGltcHJhY3RpY2FibGUgZm9yIGhvcnNlOyB0aGVyZSwgc2VlaW5nIG5vIGhvcGUgb2YgZXNjYXBlLCB0aGV5IHN1cnJlbmRlcmVkIHRoZW1zZWx2ZXMgdG8gaGltLCB3aXRoIHRoZWlyIGFybW91ciBhbmQgaG9yc2VzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBjYW1lIHVwIGFnYWluc3QgaGltLCBhY2NvcmRpbmdseSwgdGhyZWUgaG9zdGlsZSBnZW5lcmFscyBhdCBvbmNlLCBDYXJpbmFzLCBDbG9lbGl1cywgYW5kIEJydXR1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFsbCBiZWxvbmdpbmcgdG8gdGhlIE1hcmlhbiBwYXJ0eS48L25vdGU+IG5vdCBhbGwgaW4gZnJvbnQgb2YgaGltLCBub3IgZnJvbSBhbnkgb25lIGRpcmVjdGlvbiwgYnV0IGVuY29tcGFzc2luZyBoaW0gcm91bmQgd2l0aCB0aHJlZSBhcm1pZXMsIGluIG9yZGVyIHRvIGFubmloaWxhdGUgaGltLiBQb21wZXksIGhvd2V2ZXIsIHdhcyBub3QgYWxhcm1lZCwgYnV0IGNvbGxlY3RlZCBhbGwgaGlzIGZvcmNlcyBpbnRvIG9uZSBib2R5IGFuZCBoYXN0ZW5lZCB0byBhdHRhY2sgb25lIG9mIHRoZSBob3N0aWxlIGFybWllcywgdGhhdCBvZiBCcnV0dXMsIHB1dHRpbmcgaGlzIGNhdmFscnksIGFtb25nIHdob20gaGUgaGltc2VsZiByb2RlLCBpbiB0aGUgdmFuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGZyb20gdGhlIGVuZW15J3Mgc2lkZSBhbHNvIHRoZSBDZWx0aWMgaG9yc2VtZW4gcm9kZSBvdXQgYWdhaW5zdCBoaW0sIGhlIHByb21wdGx5IGNsb3NlZCB3aXRoIHRoZSBmb3JlbW9zdCBhbmQgc3R1cmRpZXN0IG9mIHRoZW0sIHNtb3RlIGhpbSB3aXRoIGhpcyBzcGVhciwgYW5kIGJyb3VnaHQgaGltIGRvd24uIFRoZW4gdGhlIHJlc3QgdHVybmVkIGFuZCBmbGVkIGFuZCB0aHJldyB0aGVpciBpbmZhbnRyeSBhbHNvIGludG8gY29uZnVzaW9uIHNvIHRoYXQgdGhlcmUgd2FzIGEgZ2VuZXJhbCByb3V0LiBBZnRlciB0aGlzIHRoZSBvcHBvc2luZyBnZW5lcmFscyBmZWxsIG91dCB3aXRoIG9uZSBhbm90aGVyIGFuZCByZXRpcmVkLCBhcyBlYWNoIGJlc3QgY291bGQsIGFuZCB0aGUgY2l0aWVzIGNhbWUgb3ZlciB0byBQb21wZXkncyBzaWRlLCBhcmd1aW5nIHRoYXQgZmVhciBoYWQgc2NhdHRlcmVkIGhpcyBlbmVtaWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5leHQsIFNjaXBpbyB0aGUgY29uc3VsIGNhbWUgdXAgYWdhaW5zdCBoaW0sIGJ1dCBiZWZvcmUgdGhlIGxpbmVzIG9mIGJhdHRsZSB3ZXJlIHdpdGhpbiByZWFjaCBvZiBlYWNoIG90aGVyJ3MgamF2ZWxpbnMsIFNjaXBpbydzIHNvbGRpZXJzIHNhbHV0ZWQgUG9tcGV5J3MgYW5kIGNhbWUgb3ZlciB0byB0aGVpciBzaWRlLCBhbmQgU2NpcGlvIHRvb2sgdG8gZmxpZ2h0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGx1dGFyY2ggc2VlbXMgdG8gaGF2ZSB0cmFuc2ZlcnJlZCB0aGlzIGV4cGxvaXQgZnJvbSBTdWxsYSB0byBQb21wZXkuIFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIHh4dmlpaS4gMS0zPC9iaWJsPiwgYW5kIGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDEuMTAuODUiIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGkuIDg1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBGaW5hbGx5LCB3aGVuIENhcmJvIGhpbXNlbGYgc2VudCBtYW55IHRyb29wcyBvZiBjYXZhbHJ5IGFnYWluc3QgaGltIGJ5IHRoZSByaXZlciBBcnNpcywgaGUgbWV0IHRoZWlyIG9uc2V0IHZpZ29yb3VzbHksIHJvdXRlZCB0aGVtLCBhbmQgaW4gaGlzIHB1cnN1aXQgZm9yY2VkIHRoZW0gYWxsIHVwb24gZGlmZmljdWx0IGdyb3VuZCBpbXByYWN0aWNhYmxlIGZvciBob3JzZTsgdGhlcmUsIHNlZWluZyBubyBob3BlIG9mIGVzY2FwZSwgdGhleSBzdXJyZW5kZXJlZCB0aGVtc2VsdmVzIHRvIGhpbSwgd2l0aCB0aGVpciBhcm1vdXIgYW5kIGhvcnNlcy4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIHh4dmlpaS4gMS0zPC9iaWJsPiwgYW5kIGNmLiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWxsYTwvdGl0bGU+LCB4eHZpaWkuIDEtMzxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS4xMC44NSIgdmFsaWQ9InllcyI+QXBwaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaS4gODUuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaS4gODUuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWxsYSBoYWQgbm90IHlldCBsZWFybmVkIG9mIHRoZXNlIHJlc3VsdHMsIGJ1dCBhdCB0aGUgZmlyc3QgdGlkaW5ncyBhbmQgcmVwb3J0cyBhYm91dCBQb21wZXkgaGFkIGZlYXJlZCBmb3IgaGlzIHNhZmV0eSwgdGh1cyBlbmdhZ2VkIHdpdGggc28gbWFueSBhbmQgc3VjaCBhYmxlIGdlbmVyYWxzIG9mIHRoZSBlbmVteSwgYW5kIHdhcyBoYXN0ZW5pbmcgdG8gaGlzIGFzc2lzdGFuY2UuIEJ1dCB3aGVuIFBvbXBleSBsZWFybmVkIHRoYXQgaGUgd2FzIG5lYXIsIGhlIG9yZGVyZWQgaGlzIG9mZmljZXJzIHRvIGhhdmUgdGhlIGZvcmNlcyBmdWxseSBhcm1lZCBhbmQgaW4gY29tcGxldGUgYXJyYXksIHRoYXQgdGhleSBtaWdodCBwcmVzZW50IGEgdmVyeSBmaW5lIGFuZCBicmlsbGlhbnQgYXBwZWFyYW5jZSB0byB0aGUgaW1wZXJhdG9yOyBmb3IgaGUgZXhwZWN0ZWQgZ3JlYXQgaG9ub3VycyBmcm9tIGhpbSwgYW5kIGhlIHJlY2VpdmVkIGV2ZW4gZ3JlYXRlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoZW4gU3VsbGEgc2F3IGhpbSBhZHZhbmNpbmcgd2l0aCBhbiBhZG1pcmFibGUgYXJteSBvZiB5b3VuZyBhbmQgdmlnb3JvdXMgc29sZGllcnMgZWxhdGVkIGFuZCBpbiBoaWdoIHNwaXJpdHMgYmVjYXVzZSBvZiB0aGVpciBzdWNjZXNzZXMsIGhlIGFsaWdodGVkIGZyb20gb2ZmIGhpcyBob3JzZSwgYW5kIGFmdGVyIGJlaW5nIHNhbHV0ZWQsIGFzIHdhcyBoaXMgZHVlLCB3aXRoIHRoZSB0aXRsZSBvZiBJbXBlcmF0b3IsIGhlIHNhbHV0ZWQgUG9tcGV5IGluIHJldHVybiBhcyBJbXBlcmF0b3IuIEFuZCB5ZXQgbm8gb25lIGNvdWxkIGhhdmUgZXhwZWN0ZWQgdGhhdCBhIHlvdW5nIG1hbiwgYW5kIG9uZSB3aG8gd2FzIG5vdCB5ZXQgYSBzZW5hdG9yLCB3b3VsZCByZWNlaXZlIGZyb20gU3VsbGEgdGhpcyB0aXRsZSwgdG8gd2luIHdoaWNoIFN1bGxhIHdhcyBhdCB3YXIgd2l0aCBzdWNoIG1lbiBhcyBTY2lwaW8gYW5kIE1hcml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSByZXN0IG9mIGhpcyBiZWhhdmlvdXIgdG8gUG9tcGV5IHdhcyBjb25zb25hbnQgd2l0aCBoaXMgZmlyc3QgdG9rZW5zIG9mIGZyaWVuZGxpbmVzczsgaGUgd291bGQgcmlzZSB0byBoaXMgZmVldCB3aGVuIFBvbXBleSBhcHByb2FjaGVkLCBhbmQgdW5jb3ZlciBoaXMgaGVhZCBiZWZvcmUgaGltLCB0aGluZ3Mgd2hpY2ggaGUgd2FzIHJhcmVseSBzZWVuIHRvIGRvIGZvciBhbnkgb25lIGVsc2UsIGFsdGhvdWdoIHRoZXJlIHdlcmUgbWFueSBhYm91dCBoaW0gd2hvIHdlcmUgb2YgaGlnaCByYW5rLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWxsYSBoYWQgbm90IHlldCBsZWFybmVkIG9mIHRoZXNlIHJlc3VsdHMsIGJ1dCBhdCB0aGUgZmlyc3QgdGlkaW5ncyBhbmQgcmVwb3J0cyBhYm91dCBQb21wZXkgaGFkIGZlYXJlZCBmb3IgaGlzIHNhZmV0eSwgdGh1cyBlbmdhZ2VkIHdpdGggc28gbWFueSBhbmQgc3VjaCBhYmxlIGdlbmVyYWxzIG9mIHRoZSBlbmVteSwgYW5kIHdhcyBoYXN0ZW5pbmcgdG8gaGlzIGFzc2lzdGFuY2UuIEJ1dCB3aGVuIFBvbXBleSBsZWFybmVkIHRoYXQgaGUgd2FzIG5lYXIsIGhlIG9yZGVyZWQgaGlzIG9mZmljZXJzIHRvIGhhdmUgdGhlIGZvcmNlcyBmdWxseSBhcm1lZCBhbmQgaW4gY29tcGxldGUgYXJyYXksIHRoYXQgdGhleSBtaWdodCBwcmVzZW50IGEgdmVyeSBmaW5lIGFuZCBicmlsbGlhbnQgYXBwZWFyYW5jZSB0byB0aGUgaW1wZXJhdG9yOyBmb3IgaGUgZXhwZWN0ZWQgZ3JlYXQgaG9ub3VycyBmcm9tIGhpbSwgYW5kIGhlIHJlY2VpdmVkIGV2ZW4gZ3JlYXRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIFN1bGxhIHNhdyBoaW0gYWR2YW5jaW5nIHdpdGggYW4gYWRtaXJhYmxlIGFybXkgb2YgeW91bmcgYW5kIHZpZ29yb3VzIHNvbGRpZXJzIGVsYXRlZCBhbmQgaW4gaGlnaCBzcGlyaXRzIGJlY2F1c2Ugb2YgdGhlaXIgc3VjY2Vzc2VzLCBoZSBhbGlnaHRlZCBmcm9tIG9mZiBoaXMgaG9yc2UsIGFuZCBhZnRlciBiZWluZyBzYWx1dGVkLCBhcyB3YXMgaGlzIGR1ZSwgd2l0aCB0aGUgdGl0bGUgb2YgSW1wZXJhdG9yLCBoZSBzYWx1dGVkIFBvbXBleSBpbiByZXR1cm4gYXMgSW1wZXJhdG9yLiBBbmQgeWV0IG5vIG9uZSBjb3VsZCBoYXZlIGV4cGVjdGVkIHRoYXQgYSB5b3VuZyBtYW4sIGFuZCBvbmUgd2hvIHdhcyBub3QgeWV0IGEgc2VuYXRvciwgd291bGQgcmVjZWl2ZSBmcm9tIFN1bGxhIHRoaXMgdGl0bGUsIHRvIHdpbiB3aGljaCBTdWxsYSB3YXMgYXQgd2FyIHdpdGggc3VjaCBtZW4gYXMgU2NpcGlvIGFuZCBNYXJpdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgcmVzdCBvZiBoaXMgYmVoYXZpb3VyIHRvIFBvbXBleSB3YXMgY29uc29uYW50IHdpdGggaGlzIGZpcnN0IHRva2VucyBvZiBmcmllbmRsaW5lc3M7IGhlIHdvdWxkIHJpc2UgdG8gaGlzIGZlZXQgd2hlbiBQb21wZXkgYXBwcm9hY2hlZCwgYW5kIHVuY292ZXIgaGlzIGhlYWQgYmVmb3JlIGhpbSwgdGhpbmdzIHdoaWNoIGhlIHdhcyByYXJlbHkgc2VlbiB0byBkbyBmb3IgYW55IG9uZSBlbHNlLCBhbHRob3VnaCB0aGVyZSB3ZXJlIG1hbnkgYWJvdXQgaGltIHdobyB3ZXJlIG9mIGhpZ2ggcmFuay4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5LCBob3dldmVyLCB3YXMgbm90IG1hZGUgdmFpbiBieSB0aGVzZSB0aGluZ3MsIGJ1dCB3aGVuIFN1bGxhIHdvdWxkIGhhdmUgc2VudCBoaW0gZm9ydGh3aXRoIGludG8gR2F1bCwgd2hlcmUsIGFzIGl0IHdhcyB0aG91Z2h0LCBNZXRlbGx1cyB3YXMgZG9pbmcgbm90aGluZyB3b3J0aHkgb2YgdGhlIGFybWFtZW50IGF0IGhpcyBkaXNwb3NhbCwgaGUgc2FpZCBpdCB3YXMgbm90IHJpZ2h0IGZvciBoaW0gdG8gdGFrZSB0aGUgY29tbWFuZCBhd2F5IGZyb20gYSBtYW4gb2YgZ3JlYXQgcmVwdXRhdGlvbiB3aG8gd2FzIGhpcyBzZW5pb3IsIGJ1dCB0aGF0IGlmIE1ldGVsbHVzIHdpc2hlZCBhbmQgYmFkZSBoaW0gZG8gc28sIGhlIHdhcyByZWFkeSB0byBhc3Npc3QgaGltIGluIGNhcnJ5aW5nIG9uIHRoZSB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIE1ldGVsbHVzIGFjY2VwdGVkIHRoZSBwcm9wb3NhbCBhbmQgd3JvdGUgaGltIHRvIGNvbWUsIGhlIGh1cnJpZWQgaW50byBHYXVsLCBhbmQgbm90IG9ubHkgcGVyZm9ybWVkIHdvbmRlcmZ1bCBleHBsb2l0cyBoaW1zZWxmLCBidXQgYWxzbyBmYW5uZWQgaW50byBmcmVzaCBoZWF0IGFuZCBmbGFtZSB0aGUgYm9sZCBhbmQgd2FybGlrZSBzcGlyaXQgb2YgTWV0ZWxsdXMgd2hpY2ggb2xkIGFnZSB3YXMgbm93IHF1ZW5jaGluZywganVzdCBhcyBtb2x0ZW4gYW5kIGdsb3dpbmcgYnJvbnplLCB3aGVuIHBvdXJlZCByb3VuZCB0aGF0IHdoaWNoIGlzIGNvbGQgYW5kIHJpZ2lkLCBpcyBzYWlkIHRvIHNvZnRlbiBpdCBtb3JlIHRoYW4gZmlyZSBkb2VzLCBhbmQgdG8gbWVsdCBpdCBhbHNvIGRvd24uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGp1c3QgYXMgYXRobGV0ZXMgd2hvIGhhdmUgd29uIHRoZSBwcmltYWN5IGFtb25nIG1lbiBhbmQgYm9ybmUgYXdheSBnbG9yaW91cyBwcml6ZXMgZXZlcnl3aGVyZSwgbWFrZSBubyBhY2NvdW50IG9mIHRoZWlyIGJveWlzaCB2aWN0b3JpZXMgYW5kIGV2ZW4gbGVhdmUgdGhlbSB1bnJlY29yZGVkLCBzbyBpdCBpcyB3aXRoIHRoZSBkZWVkcyB3aGljaCBQb21wZXkgcGVyZm9ybWVkIGF0IHRoaXMgdGltZTsgdGhleSB3ZXJlIGV4dHJhb3JkaW5hcnkgaW4gdGhlbXNlbHZlcywgYnV0IHdlcmUgYnVyaWVkIGF3YXkgYnkgdGhlIG11bHRpdHVkZSBhbmQgbWFnbml0dWRlIG9mIGhpcyBsYXRlciB3YXJzIGFuZCBjb250ZXN0cywgYW5kIEkgYW0gYWZyYWlkIHRvIHJldml2ZSB0aGVtLCBsZXN0IGJ5IGxpbmdlcmluZyB0b28gbG9uZyB1cG9uIGhpcyBmaXJzdCBlc3NheXMsIEkgc2hvdWxkIGxlYXZlIG15c2VsZiBubyByb29tIGZvciB0aG9zZSBhY2hpZXZlbWVudHMgYW5kIGV4cGVyaWVuY2VzIG9mIHRoZSBtYW4gd2hpY2ggd2VyZSBncmVhdGVzdCwgYW5kIG1vc3QgaWxsdXN0cmF0aXZlIG9mIGhpcyBjaGFyYWN0ZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgaG93ZXZlciwgd2FzIG5vdCBtYWRlIHZhaW4gYnkgdGhlc2UgdGhpbmdzLCBidXQgd2hlbiBTdWxsYSB3b3VsZCBoYXZlIHNlbnQgaGltIGZvcnRod2l0aCBpbnRvIEdhdWwsIHdoZXJlLCBhcyBpdCB3YXMgdGhvdWdodCwgTWV0ZWxsdXMgd2FzIGRvaW5nIG5vdGhpbmcgd29ydGh5IG9mIHRoZSBhcm1hbWVudCBhdCBoaXMgZGlzcG9zYWwsIGhlIHNhaWQgaXQgd2FzIG5vdCByaWdodCBmb3IgaGltIHRvIHRha2UgdGhlIGNvbW1hbmQgYXdheSBmcm9tIGEgbWFuIG9mIGdyZWF0IHJlcHV0YXRpb24gd2hvIHdhcyBoaXMgc2VuaW9yLCBidXQgdGhhdCBpZiBNZXRlbGx1cyB3aXNoZWQgYW5kIGJhZGUgaGltIGRvIHNvLCBoZSB3YXMgcmVhZHkgdG8gYXNzaXN0IGhpbSBpbiBjYXJyeWluZyBvbiB0aGUgd2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIE1ldGVsbHVzIGFjY2VwdGVkIHRoZSBwcm9wb3NhbCBhbmQgd3JvdGUgaGltIHRvIGNvbWUsIGhlIGh1cnJpZWQgaW50byBHYXVsLCBhbmQgbm90IG9ubHkgcGVyZm9ybWVkIHdvbmRlcmZ1bCBleHBsb2l0cyBoaW1zZWxmLCBidXQgYWxzbyBmYW5uZWQgaW50byBmcmVzaCBoZWF0IGFuZCBmbGFtZSB0aGUgYm9sZCBhbmQgd2FybGlrZSBzcGlyaXQgb2YgTWV0ZWxsdXMgd2hpY2ggb2xkIGFnZSB3YXMgbm93IHF1ZW5jaGluZywganVzdCBhcyBtb2x0ZW4gYW5kIGdsb3dpbmcgYnJvbnplLCB3aGVuIHBvdXJlZCByb3VuZCB0aGF0IHdoaWNoIGlzIGNvbGQgYW5kIHJpZ2lkLCBpcyBzYWlkIHRvIHNvZnRlbiBpdCBtb3JlIHRoYW4gZmlyZSBkb2VzLCBhbmQgdG8gbWVsdCBpdCBhbHNvIGRvd24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGp1c3QgYXMgYXRobGV0ZXMgd2hvIGhhdmUgd29uIHRoZSBwcmltYWN5IGFtb25nIG1lbiBhbmQgYm9ybmUgYXdheSBnbG9yaW91cyBwcml6ZXMgZXZlcnl3aGVyZSwgbWFrZSBubyBhY2NvdW50IG9mIHRoZWlyIGJveWlzaCB2aWN0b3JpZXMgYW5kIGV2ZW4gbGVhdmUgdGhlbSB1bnJlY29yZGVkLCBzbyBpdCBpcyB3aXRoIHRoZSBkZWVkcyB3aGljaCBQb21wZXkgcGVyZm9ybWVkIGF0IHRoaXMgdGltZTsgdGhleSB3ZXJlIGV4dHJhb3JkaW5hcnkgaW4gdGhlbXNlbHZlcywgYnV0IHdlcmUgYnVyaWVkIGF3YXkgYnkgdGhlIG11bHRpdHVkZSBhbmQgbWFnbml0dWRlIG9mIGhpcyBsYXRlciB3YXJzIGFuZCBjb250ZXN0cywgYW5kIEkgYW0gYWZyYWlkIHRvIHJldml2ZSB0aGVtLCBsZXN0IGJ5IGxpbmdlcmluZyB0b28gbG9uZyB1cG9uIGhpcyBmaXJzdCBlc3NheXMsIEkgc2hvdWxkIGxlYXZlIG15c2VsZiBubyByb29tIGZvciB0aG9zZSBhY2hpZXZlbWVudHMgYW5kIGV4cGVyaWVuY2VzIG9mIHRoZSBtYW4gd2hpY2ggd2VyZSBncmVhdGVzdCwgYW5kIG1vc3QgaWxsdXN0cmF0aXZlIG9mIGhpcyBjaGFyYWN0ZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhlbiwgd2hlbiBTdWxsYSBoYWQgbWFkZSBoaW1zZWxmIG1hc3RlciBvZiBJdGFseSBhbmQgaGFkIGJlZW4gcHJvY2xhaW1lZCBkaWN0YXRvciwgaGUgc291Z2h0IHRvIHJld2FyZCB0aGUgcmVzdCBvZiBoaXMgb2ZmaWNlcnMgYW5kIGdlbmVyYWxzIGJ5IG1ha2luZyB0aGVtIHJpY2ggYW5kIGFkdmFuY2luZyB0aGVtIHRvIG9mZmljZSBhbmQgZ3JhdGlmeWluZyB3aXRob3V0IHJlc2VydmUgb3Igc3RpbnQgdGhlaXIgc2V2ZXJhbCByZXF1ZXN0czsgYnV0IHNpbmNlIGhlIGFkbWlyZWQgUG9tcGV5IGZvciBoaXMgaGlnaCBxdWFsaXRpZXMgYW5kIHRob3VnaHQgaGltIGEgZ3JlYXQgaGVscCBpbiBoaXMgYWRtaW5pc3RyYXRpb24gb2YgYWZmYWlycywgaGUgd2FzIGFueGlvdXMgdG8gYXR0YWNoIGhpbSB0byBoaW1zZWxmIGJ5IHNvbWUgc29ydCBvZiBhIG1hcnJpYWdlIGFsbGlhbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgd2lmZSBNZXRlbGxhIHNoYXJlZCBoaXMgd2lzaGVzLCBhbmQgdG9nZXRoZXIgdGhleSBwZXJzdWFkZWQgUG9tcGV5IHRvIGRpdm9yY2UgQW50aXN0aWEgYW5kIG1hcnJ5IEFlbWlsaWEsIHRoZSBzdGVwLWRhdWdodGVyIG9mIFN1bGxhLCB3aG9tIE1ldGVsbGEgaGFkIGJvcm5lIHRvIFNjYXVydXMsIGFuZCB3aG8gd2FzIGxpdmluZyB3aXRoIGEgaHVzYmFuZCBhbHJlYWR5IGFuZCB3YXMgd2l0aCBjaGlsZCBieSBoaW0gYXQgdGhpcyB0aW1lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDMzLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+U3VsbGE8L3RpdGxlPiwgeHh4aWlpLiAzLjwvYmlibD4gVGhpcyB3YXMgaW4gODIgQi5DLiBXaXRoIGEgc2ltaWxhciBwdXJwb3NlIFN1bGxhIHRyaWVkIHRvIG1ha2UgSnVsaXVzIENhZXNhciBwYXJ0IHdpdGggaGlzIHdpZmUsIGJ1dCBDYWVzYXIgcmVmdXNlZCAoY2YuIFBsdXRhcmNoJ3MgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXI8L3RpdGxlPiwgaS4gMTwvYmlibD4pLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0aGVuLCB3aGVuIFN1bGxhIGhhZCBtYWRlIGhpbXNlbGYgbWFzdGVyIG9mIEl0YWx5IGFuZCBoYWQgYmVlbiBwcm9jbGFpbWVkIGRpY3RhdG9yLCBoZSBzb3VnaHQgdG8gcmV3YXJkIHRoZSByZXN0IG9mIGhpcyBvZmZpY2VycyBhbmQgZ2VuZXJhbHMgYnkgbWFraW5nIHRoZW0gcmljaCBhbmQgYWR2YW5jaW5nIHRoZW0gdG8gb2ZmaWNlIGFuZCBncmF0aWZ5aW5nIHdpdGhvdXQgcmVzZXJ2ZSBvciBzdGludCB0aGVpciBzZXZlcmFsIHJlcXVlc3RzOyBidXQgc2luY2UgaGUgYWRtaXJlZCBQb21wZXkgZm9yIGhpcyBoaWdoIHF1YWxpdGllcyBhbmQgdGhvdWdodCBoaW0gYSBncmVhdCBoZWxwIGluIGhpcyBhZG1pbmlzdHJhdGlvbiBvZiBhZmZhaXJzLCBoZSB3YXMgYW54aW91cyB0byBhdHRhY2ggaGltIHRvIGhpbXNlbGYgYnkgc29tZSBzb3J0IG9mIGEgbWFycmlhZ2UgYWxsaWFuY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyB3aWZlIE1ldGVsbGEgc2hhcmVkIGhpcyB3aXNoZXMsIGFuZCB0b2dldGhlciB0aGV5IHBlcnN1YWRlZCBQb21wZXkgdG8gZGl2b3JjZSBBbnRpc3RpYSBhbmQgbWFycnkgQWVtaWxpYSwgdGhlIHN0ZXAtZGF1Z2h0ZXIgb2YgU3VsbGEsIHdob20gTWV0ZWxsYSBoYWQgYm9ybmUgdG8gU2NhdXJ1cywgYW5kIHdobyB3YXMgbGl2aW5nIHdpdGggYSBodXNiYW5kIGFscmVhZHkgYW5kIHdhcyB3aXRoIGNoaWxkIGJ5IGhpbSBhdCB0aGlzIHRpbWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDMzLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWxsYTwvdGl0bGU+LCB4eHhpaWkuIDMuPC9iaWJsPiBUaGlzIHdhcyBpbiA4MiBCLkMuIFdpdGggYSBzaW1pbGFyIHB1cnBvc2UgU3VsbGEgdHJpZWQgdG8gbWFrZSBKdWxpdXMgQ2Flc2FyIHBhcnQgd2l0aCBoaXMgd2lmZSwgYnV0IENhZXNhciByZWZ1c2VkIChjZi4gUGx1dGFyY2gncyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgaS4gMTwvYmlibD4pLjwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMzMuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIHh4eGlpaS4gMy48L2JpYmw+IFRoaXMgd2FzIGluIDgyIEIuQy4gV2l0aCBhIHNpbWlsYXIgcHVycG9zZSBTdWxsYSB0cmllZCB0byBtYWtlIEp1bGl1cyBDYWVzYXIgcGFydCB3aXRoIGhpcyB3aWZlLCBidXQgQ2Flc2FyIHJlZnVzZWQgKGNmLiBQbHV0YXJjaCdzIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIHh4eGlpaS4gMy48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgaS4gMTwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCBpLiAxPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGlzIG1hcnJpYWdlIHdhcyB0aGVyZWZvcmUgY2hhcmFjdGVyaXN0aWMgb2YgYSB0eXJhbm55LCBhbmQgYmVmaXR0ZWQgdGhlIG5lZWRzIG9mIFN1bGxhIHJhdGhlciB0aGFuIHRoZSBuYXR1cmUgYW5kIGhhYml0cyBvZiBQb21wZXksIEFlbWlsaWEgYmVpbmcgZ2l2ZW4gdG8gaGltIGluIG1hcnJpYWdlIHdoZW4gc2hlIHdhcyB3aXRoIGNoaWxkIGJ5IGFub3RoZXIgbWFuLCAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBBbnRpc3RpYSBiZWluZyBkcml2ZW4gYXdheSBmcm9tIGhpbSBpbiBkaXNob25vdXIsIGFuZCBpbiBwaXRlb3VzIHBsaWdodCB0b28sIHNpbmNlIHNoZSBoYWQgbGF0ZWx5IGJlZW4gZGVwcml2ZWQgb2YgaGVyIGZhdGhlciBiZWNhdXNlIG9mIGhlciBodXNiYW5kIChmb3IgQW50aXN0aXVzIGhhZCBiZWVuIGtpbGxlZCBpbiB0aGUgc2VuYXRlLWhvdXNlPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RWFybGllciBpbiB0aGUgc2FtZSB5ZWFyLCA4MiBCLkMuLCBieSBvcmRlciBvZiB0aGUgeW91bmdlciBNYXJpdXMsIG9uZSBvZiB0aGUgY29uc3VscyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS4xMC44OCIgdmFsaWQ9InllcyI+QXBwaWFuLCA8dGl0bGU+QmVsbC4gQ2l2LjwvdGl0bGU+IGkuIDg4PC9iaWJsPikuPC9ub3RlPiBiZWNhdXNlIGhlIHdhcyB0aG91Z2h0IHRvIGJlIGEgcGFydGlzYW4gb2YgU3VsbGEgZm9yIFBvbXBleSdzIHNha2UpLCBhbmQgaGVyIG1vdGhlciwgb24gYmVob2xkaW5nIHRoZXNlIGluZGlnbml0aWVzLCBoYWQgdGFrZW4gaGVyIG93biBsaWZlLiBUaGlzIGNhbGFtaXR5IHdhcyBhZGRlZCB0byB0aGUgdHJhZ2VkeSBvZiB0aGF0IHNlY29uZCBtYXJyaWFnZSwgYW5kIGl0IHdhcyBub3QgdGhlIG9ubHkgb25lLCBpbmRlZWQsIHNpbmNlIEFlbWlsaWEgaGFkIHNjYXJjZWx5IGVudGVyZWQgUG9tcGV5J3MgaG91c2UgYmVmb3JlIHNoZSBzdWNjdW1iZWQgdG8gdGhlIHBhaW5zIG9mIGNoaWxkYmlydGguCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBBbnRpc3RpYSBiZWluZyBkcml2ZW4gYXdheSBmcm9tIGhpbSBpbiBkaXNob25vdXIsIGFuZCBpbiBwaXRlb3VzIHBsaWdodCB0b28sIHNpbmNlIHNoZSBoYWQgbGF0ZWx5IGJlZW4gZGVwcml2ZWQgb2YgaGVyIGZhdGhlciBiZWNhdXNlIG9mIGhlciBodXNiYW5kIChmb3IgQW50aXN0aXVzIGhhZCBiZWVuIGtpbGxlZCBpbiB0aGUgc2VuYXRlLWhvdXNlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5FYXJsaWVyIGluIHRoZSBzYW1lIHllYXIsIDgyIEIuQy4sIGJ5IG9yZGVyIG9mIHRoZSB5b3VuZ2VyIE1hcml1cywgb25lIG9mIHRoZSBjb25zdWxzICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDEuMTAuODgiIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGkuIDg4PC9iaWJsPikuPC9ub3RlPiBiZWNhdXNlIGhlIHdhcyB0aG91Z2h0IHRvIGJlIGEgcGFydGlzYW4gb2YgU3VsbGEgZm9yIFBvbXBleSdzIHNha2UpLCBhbmQgaGVyIG1vdGhlciwgb24gYmVob2xkaW5nIHRoZXNlIGluZGlnbml0aWVzLCBoYWQgdGFrZW4gaGVyIG93biBsaWZlLiBUaGlzIGNhbGFtaXR5IHdhcyBhZGRlZCB0byB0aGUgdHJhZ2VkeSBvZiB0aGF0IHNlY29uZCBtYXJyaWFnZSwgYW5kIGl0IHdhcyBub3QgdGhlIG9ubHkgb25lLCBpbmRlZWQsIHNpbmNlIEFlbWlsaWEgaGFkIHNjYXJjZWx5IGVudGVyZWQgUG9tcGV5J3MgaG91c2UgYmVmb3JlIHNoZSBzdWNjdW1iZWQgdG8gdGhlIHBhaW5zIG9mIGNoaWxkYmlydGguCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS4xMC44OCIgdmFsaWQ9InllcyI+QXBwaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaS4gODg8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaS4gODg8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCB3b3JkIHdhcyBicm91Z2h0IHRvIFN1bGxhIHRoYXQgUGVycGVubmEgd2FzIG1ha2luZyBoaW1zZWxmIG1hc3RlciBvZiBTaWNpbHkgYW5kIGZ1cm5pc2hpbmcgYSByZWZ1Z2UgaW4gdGhhdCBpc2xhbmQgZm9yIHRoZSBzdXJ2aXZvcnMgb2YgdGhlIG9wcG9zaXRlIGZhY3Rpb248bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgTWFyaWFuIHBhcnR5Ljwvbm90ZT4sIHRoYXQgQ2FyYm8gd2FzIGhvdmVyaW5nIGluIHRob3NlIHdhdGVycyB3aXRoIGEgZmxlZXQsIHRoYXQgRG9taXRpdXMgaGFkIGZvcmNlZCBhbiBlbnRyeSBpbnRvIEFmcmljYSwgYW5kIHRoYXQgbWFueSBvdGhlciBleGlsZWQgbWVuIG9mIG5vdGUgd2VyZSB0aHJvbmdpbmcgdG8gdGhvc2UgcGFydHMsIGFsbCwgaW4gZmFjdCwgd2hvIGhhZCBzdWNjZWVkZWQgaW4gZXNjYXBpbmcgaGlzIHByb3NjcmlwdGlvbnMuIEFnYWluc3QgdGhlc2UgbWVuIFBvbXBleSB3YXMgc2VudCB3aXRoIGEgbGFyZ2UgZm9yY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBlcnBlbm5hIGF0IG9uY2UgYWJhbmRvbmVkIFNpY2lseSB0byBoaW0sIGFuZCBoZSByZWNvdmVyZWQgdGhlIGNpdGllcyB0aGVyZS4gVGhleSBoYWQgYmVlbiBoYXJzaGx5IHVzZWQgYnkgUGVycGVubmEsIGJ1dCBQb21wZXkgdHJlYXRlZCB0aGVtIGFsbCB3aXRoIGtpbmRuZXNzIGV4Y2VwdCB0aGUgTWFtZXJ0aW5lcyBpbiBNZXNzYW5hLiBUaGVzZSBkZWNsaW5lZCBoaXMgdHJpYnVuYWwgYW5kIGp1cmlzZGljdGlvbiBvbiB0aGUgcGxlYSB0aGF0IHRoZXkgd2VyZSBmb3JiaWRkZW4gYnkgYW4gYW5jaWVudCBsYXcgb2YgdGhlIFJvbWFucywgYXQgd2hpY2ggUG9tcGV5IHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2Vhc2UgcXVvdGluZyBsYXdzIHRvIHVzIHRoYXQgaGF2ZSBzd29yZHMgZ2lydCBhYm91dCB1cyE8L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGhlIHdhcyB0aG91Z2h0IHRvIGhhdmUgdHJlYXRlZCBDYXJibyBpbiBoaXMgbWlzZm9ydHVuZXMgd2l0aCBhbiB1bm5hdHVyYWwgaW5zb2xlbmNlLiBGb3IgaWYgaXQgd2FzIG5lY2Vzc2FyeSwgYXMgcGVyaGFwcyBpdCB3YXMsIHRvIHB1dCB0aGUgbWFuIHRvIGRlYXRoLCB0aGlzIG91Z2h0IHRvIGhhdmUgYmVlbiBkb25lIGFzIHNvb24gYXMgaGUgd2FzIHNlaXplZCwgYW5kIHRoZSBkZWVkIHdvdWxkIGhhdmUgYmVlbiBoaXMgd2hvIG9yZGVyZWQgaXQuIEJ1dCBhcyBpdCB3YXMsIFBvbXBleSBjYXVzZWQgYSBSb21hbiB3aG8gaGFkIHRocmljZSBiZWVuIGNvbnN1bCB0byBiZSBicm91Z2h0IGluIGZldHRlcnMgYW5kIHNldCBiZWZvcmUgdGhlIHRyaWJ1bmFsIHdoZXJlIGhlIGhpbXNlbGYgd2FzIHNpdHRpbmcsIGFuZCBleGFtaW5lZCBoaW0gY2xvc2VseSB0aGVyZSwgdG8gdGhlIGRpc3RyZXNzIGFuZCB2ZXhhdGlvbiBvZiB0aGUgYXVkaWVuY2UuIFRoZW4gaGUgb3JkZXJlZCBoaW0gdG8gYmUgbGVkIGF3YXkgYW5kIHB1dCB0byBkZWF0aC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBzYXksIG1vcmVvdmVyLCB0aGF0IGFmdGVyIENhcmJvIGhhZCBiZWVuIGxlZCBhd2F5IHRvIGV4ZWN1dGlvbiwgd2hlbiBoZSBzYXcgdGhlIHN3b3JkIGFscmVhZHkgZHJhd24sIGhlIGJlZ2dlZCB0aGF0IGEgc2hvcnQgcmVzcGl0ZSBhbmQgYSBjb252ZW5pZW50IHBsYWNlIG1pZ2h0IGJlIGFmZm9yZGVkIGhpbSwgc2luY2UgaGlzIGJvd2VscyBkaXN0cmVzc2VkIGhpbS4gRnVydGhlcm1vcmUsIENhaXVzIE9wcGl1cywgdGhlIGZyaWVuZCBvZiBDYWVzYXIsIHNheXMgdGhhdCBQb21wZXkgdHJlYXRlZCBRdWludHVzIFZhbGVyaXVzIGFsc28gd2l0aCB1bm5hdHVyYWwgY3J1ZWx0eS4gRm9yLCB1bmRlcnN0YW5kaW5nIHRoYXQgVmFsZXJpdXMgd2FzIGEgbWFuIG9mIHJhcmUgc2Nob2xhcnNoaXAgYW5kIGxlYXJuaW5nLCB3aGVuIGhlIHdhcyBicm91Z2h0IHRvIGhpbSwgT3BwaXVzIHNheXMsIFBvbXBleSB0b29rIGhpbSBhc2lkZSwgd2Fsa2VkIHVwIGFuZCBkb3duIHdpdGggaGltLCBhc2tlZCBhbmQgbGVhcm5lZCB3aGF0IGhlIHdpc2hlZCBmcm9tIGhpbSwgYW5kIHRoZW4gb3JkZXJlZCBoaXMgYXR0ZW5kYW50cyB0byBsZWFkIGhpbSBhd2F5IGFuZCBwdXQgaGltIHRvIGRlYXRoIGF0IG9uY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgd29yZCB3YXMgYnJvdWdodCB0byBTdWxsYSB0aGF0IFBlcnBlbm5hIHdhcyBtYWtpbmcgaGltc2VsZiBtYXN0ZXIgb2YgU2ljaWx5IGFuZCBmdXJuaXNoaW5nIGEgcmVmdWdlIGluIHRoYXQgaXNsYW5kIGZvciB0aGUgc3Vydml2b3JzIG9mIHRoZSBvcHBvc2l0ZSBmYWN0aW9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgTWFyaWFuIHBhcnR5Ljwvbm90ZT4sIHRoYXQgQ2FyYm8gd2FzIGhvdmVyaW5nIGluIHRob3NlIHdhdGVycyB3aXRoIGEgZmxlZXQsIHRoYXQgRG9taXRpdXMgaGFkIGZvcmNlZCBhbiBlbnRyeSBpbnRvIEFmcmljYSwgYW5kIHRoYXQgbWFueSBvdGhlciBleGlsZWQgbWVuIG9mIG5vdGUgd2VyZSB0aHJvbmdpbmcgdG8gdGhvc2UgcGFydHMsIGFsbCwgaW4gZmFjdCwgd2hvIGhhZCBzdWNjZWVkZWQgaW4gZXNjYXBpbmcgaGlzIHByb3NjcmlwdGlvbnMuIEFnYWluc3QgdGhlc2UgbWVuIFBvbXBleSB3YXMgc2VudCB3aXRoIGEgbGFyZ2UgZm9yY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBlcnBlbm5hIGF0IG9uY2UgYWJhbmRvbmVkIFNpY2lseSB0byBoaW0sIGFuZCBoZSByZWNvdmVyZWQgdGhlIGNpdGllcyB0aGVyZS4gVGhleSBoYWQgYmVlbiBoYXJzaGx5IHVzZWQgYnkgUGVycGVubmEsIGJ1dCBQb21wZXkgdHJlYXRlZCB0aGVtIGFsbCB3aXRoIGtpbmRuZXNzIGV4Y2VwdCB0aGUgTWFtZXJ0aW5lcyBpbiBNZXNzYW5hLiBUaGVzZSBkZWNsaW5lZCBoaXMgdHJpYnVuYWwgYW5kIGp1cmlzZGljdGlvbiBvbiB0aGUgcGxlYSB0aGF0IHRoZXkgd2VyZSBmb3JiaWRkZW4gYnkgYW4gYW5jaWVudCBsYXcgb2YgdGhlIFJvbWFucywgYXQgd2hpY2ggUG9tcGV5IHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DZWFzZSBxdW90aW5nIGxhd3MgdG8gdXMgdGhhdCBoYXZlIHN3b3JkcyBnaXJ0IGFib3V0IHVzITwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBoZSB3YXMgdGhvdWdodCB0byBoYXZlIHRyZWF0ZWQgQ2FyYm8gaW4gaGlzIG1pc2ZvcnR1bmVzIHdpdGggYW4gdW5uYXR1cmFsIGluc29sZW5jZS4gRm9yIGlmIGl0IHdhcyBuZWNlc3NhcnksIGFzIHBlcmhhcHMgaXQgd2FzLCB0byBwdXQgdGhlIG1hbiB0byBkZWF0aCwgdGhpcyBvdWdodCB0byBoYXZlIGJlZW4gZG9uZSBhcyBzb29uIGFzIGhlIHdhcyBzZWl6ZWQsIGFuZCB0aGUgZGVlZCB3b3VsZCBoYXZlIGJlZW4gaGlzIHdobyBvcmRlcmVkIGl0LiBCdXQgYXMgaXQgd2FzLCBQb21wZXkgY2F1c2VkIGEgUm9tYW4gd2hvIGhhZCB0aHJpY2UgYmVlbiBjb25zdWwgdG8gYmUgYnJvdWdodCBpbiBmZXR0ZXJzIGFuZCBzZXQgYmVmb3JlIHRoZSB0cmlidW5hbCB3aGVyZSBoZSBoaW1zZWxmIHdhcyBzaXR0aW5nLCBhbmQgZXhhbWluZWQgaGltIGNsb3NlbHkgdGhlcmUsIHRvIHRoZSBkaXN0cmVzcyBhbmQgdmV4YXRpb24gb2YgdGhlIGF1ZGllbmNlLiBUaGVuIGhlIG9yZGVyZWQgaGltIHRvIGJlIGxlZCBhd2F5IGFuZCBwdXQgdG8gZGVhdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgc2F5LCBtb3Jlb3ZlciwgdGhhdCBhZnRlciBDYXJibyBoYWQgYmVlbiBsZWQgYXdheSB0byBleGVjdXRpb24sIHdoZW4gaGUgc2F3IHRoZSBzd29yZCBhbHJlYWR5IGRyYXduLCBoZSBiZWdnZWQgdGhhdCBhIHNob3J0IHJlc3BpdGUgYW5kIGEgY29udmVuaWVudCBwbGFjZSBtaWdodCBiZSBhZmZvcmRlZCBoaW0sIHNpbmNlIGhpcyBib3dlbHMgZGlzdHJlc3NlZCBoaW0uIEZ1cnRoZXJtb3JlLCBDYWl1cyBPcHBpdXMsIHRoZSBmcmllbmQgb2YgQ2Flc2FyLCBzYXlzIHRoYXQgUG9tcGV5IHRyZWF0ZWQgUXVpbnR1cyBWYWxlcml1cyBhbHNvIHdpdGggdW5uYXR1cmFsIGNydWVsdHkuIEZvciwgdW5kZXJzdGFuZGluZyB0aGF0IFZhbGVyaXVzIHdhcyBhIG1hbiBvZiByYXJlIHNjaG9sYXJzaGlwIGFuZCBsZWFybmluZywgd2hlbiBoZSB3YXMgYnJvdWdodCB0byBoaW0sIE9wcGl1cyBzYXlzLCBQb21wZXkgdG9vayBoaW0gYXNpZGUsIHdhbGtlZCB1cCBhbmQgZG93biB3aXRoIGhpbSwgYXNrZWQgYW5kIGxlYXJuZWQgd2hhdCBoZSB3aXNoZWQgZnJvbSBoaW0sIGFuZCB0aGVuIG9yZGVyZWQgaGlzIGF0dGVuZGFudHMgdG8gbGVhZCBoaW0gYXdheSBhbmQgcHV0IGhpbSB0byBkZWF0aCBhdCBvbmNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBPcHBpdXMgZGlzY291cnNlcyBhYm91dCB0aGUgZW5lbWllcyBvciBmcmllbmRzIG9mIENhZXNhciwgb25lIG11c3QgYmUgdmVyeSBjYXV0aW91cyBhYm91dCBiZWxpZXZpbmcgaGltLiBQb21wZXkgd2FzIGNvbXBlbGxlZCB0byBwdW5pc2ggdGhvc2UgZW5lbWllcyBvZiBTdWxsYSB3aG8gd2VyZSBtb3N0IGVtaW5lbnQsIGFuZCB3aG9zZSBjYXB0dXJlIHdhcyBub3RvcmlvdXM7IGJ1dCBhcyB0byB0aGUgcmVzdCwgaGUgc3VmZmVyZWQgYXMgbWFueSBhcyBwb3NzaWJsZSB0byBlc2NhcGUgZGV0ZWN0aW9uLCBhbmQgZXZlbiBoZWxwZWQgdG8gc2VuZCBzb21lIG91dCBvZiB0aGUgY291bnRyeS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIHdoZW4gaGUgaGFkIG1hZGUgdXAgaGlzIG1pbmQgdG8gY2hhc3Rpc2UgdGhlIGNpdHkgb2YgSGltZXJhIGJlY2F1c2UgaXQgaGFkIHNpZGVkIHdpdGggdGhlIGVuZW15LCBTdGhlbmlzLCB0aGUgcG9wdWxhciBsZWFkZXIgdGhlcmUsIHJlcXVlc3RlZCBhdWRpZW5jZSBvZiBoaW0sIGFuZCB0b2xkIGhpbSB0aGF0IGhlIHdvdWxkIGNvbW1pdCBhbiBpbmp1c3RpY2UgaWYgaGUgc2hvdWxkIGxldCB0aGUgcmVhbCBjdWxwcml0IGdvIGFuZCBkZXN0cm95IHRob3NlIHdobyBoYWQgZG9uZSBubyB3cm9uZy4gQW5kIHdoZW4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5IGFza2VkIGhpbSB3aG9tIGhlIG1lYW50IGJ5IHRoZSByZWFsIGN1bHByaXQsIFN0aGVuaXMgc2FpZCBoZSBtZWFudCBoaW1zZWxmLCBzaW5jZSBoZSBoYWQgcGVyc3VhZGVkIGhpcyBmcmllbmRzIGFtb25nIHRoZSBjaXRpemVucywgYW5kIGZvcmNlZCBoaXMgZW5lbWllcywgaW50byB0aGVpciBjb3Vyc2UuIFBvbXBleSwgdGhlbiwgYWRtaXJpbmcgdGhlIG1hbidzIGZyYW5rIHNwZWVjaCBhbmQgbm9ibGUgc3Bpcml0LCBwYXJkb25lZCBoaW0gZmlyc3QgYW5kIHRoZW4gYWxsIHRoZSByZXN0LiBBbmQgYWdhaW4sIG9uIGhlYXJpbmcgdGhhdCBoaXMgc29sZGllcnMgd2VyZSBkaXNvcmRlcmx5IGluIHRoZWlyIGpvdXJuZXlzLCBoZSBwdXQgYSBzZWFsIHVwb24gdGhlaXIgc3dvcmRzLCBhbmQgd2hvc29ldmVyIGJyb2tlIHRoZSBzZWFsIHdhcyBwdW5pc2hlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIE9wcGl1cyBkaXNjb3Vyc2VzIGFib3V0IHRoZSBlbmVtaWVzIG9yIGZyaWVuZHMgb2YgQ2Flc2FyLCBvbmUgbXVzdCBiZSB2ZXJ5IGNhdXRpb3VzIGFib3V0IGJlbGlldmluZyBoaW0uIFBvbXBleSB3YXMgY29tcGVsbGVkIHRvIHB1bmlzaCB0aG9zZSBlbmVtaWVzIG9mIFN1bGxhIHdobyB3ZXJlIG1vc3QgZW1pbmVudCwgYW5kIHdob3NlIGNhcHR1cmUgd2FzIG5vdG9yaW91czsgYnV0IGFzIHRvIHRoZSByZXN0LCBoZSBzdWZmZXJlZCBhcyBtYW55IGFzIHBvc3NpYmxlIHRvIGVzY2FwZSBkZXRlY3Rpb24sIGFuZCBldmVuIGhlbHBlZCB0byBzZW5kIHNvbWUgb3V0IG9mIHRoZSBjb3VudHJ5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIGhlIGhhZCBtYWRlIHVwIGhpcyBtaW5kIHRvIGNoYXN0aXNlIHRoZSBjaXR5IG9mIEhpbWVyYSBiZWNhdXNlIGl0IGhhZCBzaWRlZCB3aXRoIHRoZSBlbmVteSwgU3RoZW5pcywgdGhlIHBvcHVsYXIgbGVhZGVyIHRoZXJlLCByZXF1ZXN0ZWQgYXVkaWVuY2Ugb2YgaGltLCBhbmQgdG9sZCBoaW0gdGhhdCBoZSB3b3VsZCBjb21taXQgYW4gaW5qdXN0aWNlIGlmIGhlIHNob3VsZCBsZXQgdGhlIHJlYWwgY3VscHJpdCBnbyBhbmQgZGVzdHJveSB0aG9zZSB3aG8gaGFkIGRvbmUgbm8gd3JvbmcuIEFuZCB3aGVuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSBhc2tlZCBoaW0gd2hvbSBoZSBtZWFudCBieSB0aGUgcmVhbCBjdWxwcml0LCBTdGhlbmlzIHNhaWQgaGUgbWVhbnQgaGltc2VsZiwgc2luY2UgaGUgaGFkIHBlcnN1YWRlZCBoaXMgZnJpZW5kcyBhbW9uZyB0aGUgY2l0aXplbnMsIGFuZCBmb3JjZWQgaGlzIGVuZW1pZXMsIGludG8gdGhlaXIgY291cnNlLiBQb21wZXksIHRoZW4sIGFkbWlyaW5nIHRoZSBtYW4ncyBmcmFuayBzcGVlY2ggYW5kIG5vYmxlIHNwaXJpdCwgcGFyZG9uZWQgaGltIGZpcnN0IGFuZCB0aGVuIGFsbCB0aGUgcmVzdC4gQW5kIGFnYWluLCBvbiBoZWFyaW5nIHRoYXQgaGlzIHNvbGRpZXJzIHdlcmUgZGlzb3JkZXJseSBpbiB0aGVpciBqb3VybmV5cywgaGUgcHV0IGEgc2VhbCB1cG9uIHRoZWlyIHN3b3JkcywgYW5kIHdob3NvZXZlciBicm9rZSB0aGUgc2VhbCB3YXMgcHVuaXNoZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIGhlIHdhcyB0aHVzIGVuZ2FnZWQgaW4gc2V0dGxpbmcgdGhlIGFmZmFpcnMgb2YgU2ljaWx5LCBoZSByZWNlaXZlZCBhIGRlY3JlZSBvZiB0aGUgc2VuYXRlIGFuZCBhIGxldHRlciBmcm9tIFN1bGxhIG9yZGVyaW5nIGhpbSB0byBzYWlsIHRvIEFmcmljYSBhbmQgd2FnZSB3YXIgd2l0aCBhbGwgaGlzIG1pZ2h0IGFnYWluc3QgRG9taXRpdXMuIEZvciBEb21pdGl1cyBoYWQgYXNzZW1ibGVkIHRoZXJlIGEgbXVjaCBsYXJnZXIgZm9yY2UgdGhhbiB0aGF0IHdpdGggd2hpY2ggTWFyaXVzLCBubyBsb25nIHRpbWUgYWdvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg3IEIuQy48L25vdGU+IGhhZCBjcm9zc2VkIGZyb20gQWZyaWNhIGludG8gSXRhbHkgYW5kIGNvbmZvdW5kZWQgdGhlIFJvbWFuIHN0YXRlLCBtYWtpbmcgaGltc2VsZiB0eXJhbnQgaW5zdGVhZCBvZiBleGlsZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGFmdGVyIG1ha2luZyBhbGwgaGlzIHByZXBhcmF0aW9ucyB3aXRoIGdyZWF0IHNwZWVkLCBQb21wZXkgbGVmdCBNZW1taXVzLCBoaXMgc2lzdGVyJ3MgaHVzYmFuZCwgYXMgZ292ZXJub3Igb2YgU2ljaWx5LCB3aGlsZSBoZSBoaW1zZWxmIHB1dCBvdXQgdG8gc2VhIHdpdGggYSBodW5kcmVkIGFuZCB0d2VudHkgZ2FsbGV5cywgYW5kIGVpZ2h0IGh1bmRyZWQgdHJhbnNwb3J0cyBjb252ZXlpbmcgcHJvdmlzaW9ucywgYW1tdW5pdGlvbiwgbW9uZXksIGFuZCBlbmdpbmVzIG9mIHdhci4gTm8gc29vbmVyIGhhZCBoZSBsYW5kZWQgd2l0aCBwYXJ0IG9mIGhpcyBzaGlwcyBhdCBVdGljYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4MSBCLkMuPC9ub3RlPiBhbmQgd2l0aCBwYXJ0IGF0IENhcnRoYWdlLCB0aGFuIHNldmVuIHRob3VzYW5kIG9mIHRoZSBlbmVteSBkZXNlcnRlZCBhbmQgY2FtZSBvdmVyIHRvIGhpbTsgYW5kIGhpcyBvd24gYXJteSBjb250YWluZWQgc2l4IGNvbXBsZXRlIGxlZ2lvbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgaGUgd2FzIHRodXMgZW5nYWdlZCBpbiBzZXR0bGluZyB0aGUgYWZmYWlycyBvZiBTaWNpbHksIGhlIHJlY2VpdmVkIGEgZGVjcmVlIG9mIHRoZSBzZW5hdGUgYW5kIGEgbGV0dGVyIGZyb20gU3VsbGEgb3JkZXJpbmcgaGltIHRvIHNhaWwgdG8gQWZyaWNhIGFuZCB3YWdlIHdhciB3aXRoIGFsbCBoaXMgbWlnaHQgYWdhaW5zdCBEb21pdGl1cy4gRm9yIERvbWl0aXVzIGhhZCBhc3NlbWJsZWQgdGhlcmUgYSBtdWNoIGxhcmdlciBmb3JjZSB0aGFuIHRoYXQgd2l0aCB3aGljaCBNYXJpdXMsIG5vIGxvbmcgdGltZSBhZ28sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4NyBCLkMuPC9ub3RlPiBoYWQgY3Jvc3NlZCBmcm9tIEFmcmljYSBpbnRvIEl0YWx5IGFuZCBjb25mb3VuZGVkIHRoZSBSb21hbiBzdGF0ZSwgbWFraW5nIGhpbXNlbGYgdHlyYW50IGluc3RlYWQgb2YgZXhpbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhZnRlciBtYWtpbmcgYWxsIGhpcyBwcmVwYXJhdGlvbnMgd2l0aCBncmVhdCBzcGVlZCwgUG9tcGV5IGxlZnQgTWVtbWl1cywgaGlzIHNpc3RlcidzIGh1c2JhbmQsIGFzIGdvdmVybm9yIG9mIFNpY2lseSwgd2hpbGUgaGUgaGltc2VsZiBwdXQgb3V0IHRvIHNlYSB3aXRoIGEgaHVuZHJlZCBhbmQgdHdlbnR5IGdhbGxleXMsIGFuZCBlaWdodCBodW5kcmVkIHRyYW5zcG9ydHMgY29udmV5aW5nIHByb3Zpc2lvbnMsIGFtbXVuaXRpb24sIG1vbmV5LCBhbmQgZW5naW5lcyBvZiB3YXIuIE5vIHNvb25lciBoYWQgaGUgbGFuZGVkIHdpdGggcGFydCBvZiBoaXMgc2hpcHMgYXQgVXRpY2EsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4MSBCLkMuPC9ub3RlPiBhbmQgd2l0aCBwYXJ0IGF0IENhcnRoYWdlLCB0aGFuIHNldmVuIHRob3VzYW5kIG9mIHRoZSBlbmVteSBkZXNlcnRlZCBhbmQgY2FtZSBvdmVyIHRvIGhpbTsgYW5kIGhpcyBvd24gYXJteSBjb250YWluZWQgc2l4IGNvbXBsZXRlIGxlZ2lvbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIHdlIGFyZSB0b2xkLCBhIGx1ZGljcm91cyB0aGluZyBoYXBwZW5lZCB0byBoaW0uIFNvbWUgc29sZGllcnMsIGl0IHdvdWxkIHNlZW0sIHN0dW1ibGVkIHVwb24gYSB0cmVhc3VyZSBhbmQgZ290IGNvbnNpZGVyYWJsZSBhbW91bnRzIG9mIG1vbmV5LiBXaGVuIHRoZSBtYXR0ZXIgYmVjYW1lIHB1YmxpYywgdGhlIHJlc3Qgb2YgdGhlIGFybXkgYWxsIGZhbmNpZWQgdGhhdCB0aGUgcGxhY2Ugd2FzIGZ1bGwgb2YgbW9uZXkgd2hpY2ggdGhlIENhcnRoYWdpbmlhbnMgaGFkIGhpZGRlbiBhd2F5IGluIHNvbWUgdGltZSBvZiBjYWxhbWl0eS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIFBvbXBleSBjb3VsZCBkbyBub3RoaW5nIHdpdGggaGlzIHNvbGRpZXJzIGZvciBtYW55IGRheXMgYmVjYXVzZSB0aGV5IHdlcmUgaHVudGluZyB0cmVhc3VyZXMsIGJ1dCBoZSB3ZW50IGFib3V0IGxhdWdoaW5nIGF0IHRoZSBzcGVjdGFjbGUgb2Ygc28gbWFueSBteXJpYWRzIG9mIG1lbiBkaWdnaW5nIGFuZCBzdGlycmluZyB1cCB0aGUgZ3JvdW5kIEF0IGxhc3QgdGhleSBncmV3IHdlYXJ5IG9mIHRoZSBzZWFyY2ggYW5kIGJhZGUgUG9tcGV5IGxlYWQgdGhlbSB3aGVyZSBoZSBwbGVhc2VkLCBhc3N1cmluZyBoaW0gdGhhdCB0aGV5IGhhZCBiZWVuIHN1ZmZpY2llbnRseSBwdW5pc2hlZCBmb3IgdGhlaXIgZm9sbHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIHdlIGFyZSB0b2xkLCBhIGx1ZGljcm91cyB0aGluZyBoYXBwZW5lZCB0byBoaW0uIFNvbWUgc29sZGllcnMsIGl0IHdvdWxkIHNlZW0sIHN0dW1ibGVkIHVwb24gYSB0cmVhc3VyZSBhbmQgZ290IGNvbnNpZGVyYWJsZSBhbW91bnRzIG9mIG1vbmV5LiBXaGVuIHRoZSBtYXR0ZXIgYmVjYW1lIHB1YmxpYywgdGhlIHJlc3Qgb2YgdGhlIGFybXkgYWxsIGZhbmNpZWQgdGhhdCB0aGUgcGxhY2Ugd2FzIGZ1bGwgb2YgbW9uZXkgd2hpY2ggdGhlIENhcnRoYWdpbmlhbnMgaGFkIGhpZGRlbiBhd2F5IGluIHNvbWUgdGltZSBvZiBjYWxhbWl0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBQb21wZXkgY291bGQgZG8gbm90aGluZyB3aXRoIGhpcyBzb2xkaWVycyBmb3IgbWFueSBkYXlzIGJlY2F1c2UgdGhleSB3ZXJlIGh1bnRpbmcgdHJlYXN1cmVzLCBidXQgaGUgd2VudCBhYm91dCBsYXVnaGluZyBhdCB0aGUgc3BlY3RhY2xlIG9mIHNvIG1hbnkgbXlyaWFkcyBvZiBtZW4gZGlnZ2luZyBhbmQgc3RpcnJpbmcgdXAgdGhlIGdyb3VuZCBBdCBsYXN0IHRoZXkgZ3JldyB3ZWFyeSBvZiB0aGUgc2VhcmNoIGFuZCBiYWRlIFBvbXBleSBsZWFkIHRoZW0gd2hlcmUgaGUgcGxlYXNlZCwgYXNzdXJpbmcgaGltIHRoYXQgdGhleSBoYWQgYmVlbiBzdWZmaWNpZW50bHkgcHVuaXNoZWQgZm9yIHRoZWlyIGZvbGx5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Eb21pdGl1cyBub3cgZHJldyB1cCBoaXMgYXJteSBhZ2FpbnN0IFBvbXBleSwgd2l0aCBhIHJhdmluZSBpbiBmcm9udCBvZiBoaW0gd2hpY2ggd2FzIHJvdWdoIGFuZCBkaWZmaWN1bHQgdG8gY3Jvc3MgYnV0IGEgdmlvbGVudCBzdG9ybSBvZiB3aW5kIGFuZCByYWluIGJlZ2FuIGluIHRoZSBtb3JuaW5nIGFuZCBjb250aW51ZWQgdG8gcmFnZSwgc28gdGhhdCBoZSBnYXZlIHVwIHRoZSBpZGVhIG9mIGZpZ2h0aW5nIHRoYXQgZGF5IGFuZCBvcmRlcmVkIGEgcmV0cmVhdC4gQnV0IFBvbXBleSwgdGFraW5nIGFkdmFudGFnZSBvZiB0aGlzIG9wcG9ydHVuaXR5LCBhZHZhbmNlZCBzd2lmdGx5IHRvIHRoZSBhdHRhY2ssIGFuZCBjcm9zc2VkIHRoZSByYXZpbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbmVteSBtZXQgaGlzIGF0dGFjayBpbiBhIGRpc29yZGVybHkgYW5kIHR1bXVsdHVvdXMgZmFzaGlvbiwgbm90IGFsbCBvZiB0aGVtIGluZGVlZCwgbm9yIHdpdGggYW55IHVuaWZvcm1pdHk7IGJlc2lkZXMsIHRoZSB3aW5kIHZlZXJlZCByb3VuZCBhbmQgZHJvdmUgdGhlIHJhaW4gaW50byB0aGVpciBmYWNlcy4gSG93ZXZlciwgdGhlIFJvbWFucyBhbHNvIHdlcmUgdHJvdWJsZWQgYnkgdGhlIHN0b3JtLCBzaW5jZSB0aGV5IGNvdWxkIG5vdCBzZWUgb25lIGFub3RoZXIgY2xlYXJseSwgYW5kIFBvbXBleSBoaW1zZWxmIG5hcnJvd2x5IGVzY2FwZWQgZGVhdGggYnkgbm90IGJlaW5nIHJlY29nbml6ZWQsIHdoZW4gYSBzb2xkaWVyIGRlbWFuZGVkIHRoZSBjb3VudGVyc2lnbiBmcm9tIGhpbSBhbmQgaGUgZ2F2ZSBpdCByYXRoZXIgc2xvd2x5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RG9taXRpdXMgbm93IGRyZXcgdXAgaGlzIGFybXkgYWdhaW5zdCBQb21wZXksIHdpdGggYSByYXZpbmUgaW4gZnJvbnQgb2YgaGltIHdoaWNoIHdhcyByb3VnaCBhbmQgZGlmZmljdWx0IHRvIGNyb3NzIGJ1dCBhIHZpb2xlbnQgc3Rvcm0gb2Ygd2luZCBhbmQgcmFpbiBiZWdhbiBpbiB0aGUgbW9ybmluZyBhbmQgY29udGludWVkIHRvIHJhZ2UsIHNvIHRoYXQgaGUgZ2F2ZSB1cCB0aGUgaWRlYSBvZiBmaWdodGluZyB0aGF0IGRheSBhbmQgb3JkZXJlZCBhIHJldHJlYXQuIEJ1dCBQb21wZXksIHRha2luZyBhZHZhbnRhZ2Ugb2YgdGhpcyBvcHBvcnR1bml0eSwgYWR2YW5jZWQgc3dpZnRseSB0byB0aGUgYXR0YWNrLCBhbmQgY3Jvc3NlZCB0aGUgcmF2aW5lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbmVteSBtZXQgaGlzIGF0dGFjayBpbiBhIGRpc29yZGVybHkgYW5kIHR1bXVsdHVvdXMgZmFzaGlvbiwgbm90IGFsbCBvZiB0aGVtIGluZGVlZCwgbm9yIHdpdGggYW55IHVuaWZvcm1pdHk7IGJlc2lkZXMsIHRoZSB3aW5kIHZlZXJlZCByb3VuZCBhbmQgZHJvdmUgdGhlIHJhaW4gaW50byB0aGVpciBmYWNlcy4gSG93ZXZlciwgdGhlIFJvbWFucyBhbHNvIHdlcmUgdHJvdWJsZWQgYnkgdGhlIHN0b3JtLCBzaW5jZSB0aGV5IGNvdWxkIG5vdCBzZWUgb25lIGFub3RoZXIgY2xlYXJseSwgYW5kIFBvbXBleSBoaW1zZWxmIG5hcnJvd2x5IGVzY2FwZWQgZGVhdGggYnkgbm90IGJlaW5nIHJlY29nbml6ZWQsIHdoZW4gYSBzb2xkaWVyIGRlbWFuZGVkIHRoZSBjb3VudGVyc2lnbiBmcm9tIGhpbSBhbmQgaGUgZ2F2ZSBpdCByYXRoZXIgc2xvd2x5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5OZXZlcnRoZWxlc3MsIHRoZXkgcm91dGVkIHRoZSBlbmVteSB3aXRoIGdyZWF0IHNsYXVnaHRlciAoaXQgaXMgc2FpZCB0aGF0IG91dCBvZiB0d2VudHkgdGhvdXNhbmQgb25seSB0aHJlZSB0aG91c2FuZCBlc2NhcGVkKSwgYW5kIGhhaWxlZCBQb21wZXkgYXMgSW1wZXJhdG9yLiBBbmQgd2hlbiBoZSBzYWlkIGhlIHdvdWxkIG5vdCBhY2NlcHQgdGhlIGhvbm91ciBhcyBsb25nIGFzIHRoZSBjYW1wIG9mIHRoZSBlbmVteSB3YXMgaW50YWN0LCBidXQgdGhhdCBpZiB0aGV5IHRob3VnaHQgaGltIHdvcnRoeSBvZiB0aGUgYXBwZWxsYXRpb24sIHRoZXkgbXVzdCBmaXJzdCBkZXN0cm95IHRoYXQsIGhpcyBzb2xkaWVycyBpbW1lZGlhdGVseSBtYWRlIGFuIGFzc2F1bHQgdXBvbiB0aGUgcmFtcGFydHM7IGFuZCBQb21wZXkgZm91Z2h0IHdpdGhvdXQgaGlzIGhlbG1ldCwgZm9yIGZlYXIgb2YgYSBwZXJpbCBsaWtlIHRoZSBvbmUgaGUgaGFkIGp1c3QgZXNjYXBlZC4gVGhlIGNhbXAgd2FzIHNvb24gdGFrZW4sIGFuZCBEb21pdGl1cyB3YXMgc2xhaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gc29tZSBvZiB0aGUgY2l0aWVzIHN1Ym1pdHRlZCBhdCBvbmNlIHRvIFBvbXBleSwgYW5kIG90aGVycyB3ZXJlIHRha2VuIGJ5IHN0b3JtLiBLaW5nIElhcmJ1cyBhbHNvLCB0aGUgY29uZmVkZXJhdGUgb2YgRG9taXRpdXMsIHdhcyBjYXB0dXJlZCwgYW5kIGhpcyBraW5nZG9tIGdpdmVuIHRvIEhpZW1wc2FsLiBUYWtpbmcgYWR2YW50YWdlIG9mIHRoZSBnb29kIGZvcnR1bmUgYW5kIG1vbWVudHVtIG9mIGhpcyBhcm15LCBQb21wZXkgbm93IGludmFkZWQgTnVtaWRpYS4gSGUgbWFyY2hlZCB0aHJvdWdoIHRoZSBjb3VudHJ5IGZvciBtYW55IGRheXMsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmNvbnF1ZXJlZCBhbGwgd2hvIGNhbWUgaW4gaGlzIHdheSwgYW5kIG1hZGUgcG90ZW50IGFuZCB0ZXJyaWJsZSBhZ2FpbiB0aGUgQmFyYmFyaWFucycgZmVhciBvZiB0aGUgUm9tYW5zLCB3aGljaCBoYWQgcmVhY2hlZCBhIGxvdyBlYmIuIE5heSwgaGUgZGVjbGFyZWQgdGhhdCBldmVuIHRoZSB3aWxkIGJlYXN0cyBpbiBBZnJpY2FuIGxhaXJzIG11c3Qgbm90IGJlIGxlZnQgd2l0aG91dCBleHBlcmllbmNlIG9mIHRoZSBjb3VyYWdlIGFuZCBzdHJlbmd0aCBvZiB0aGUgUm9tYW5zLCBhbmQgdGhlcmVmb3JlIHNwZW50IGEgZmV3IGRheXMgaW4gaHVudGluZyBsaW9ucyBhbmQgZWxlcGhhbnRzLiBJdCB0b29rIGhpbSBvbmx5IGZvcnR5IGRheXMgYWxsIHRvbGQsIHRoZXkgc2F5LCB0byBicmluZyBoaXMgZW5lbWllcyB0byBuYXVnaHQsIGdldCBBZnJpY2EgaW50byBoaXMgcG93ZXIsIGFuZCBhZGp1c3QgdGhlIHJlbGF0aW9ucyBvZiBpdHMga2luZ3MsIHRob3VnaCBoZSB3YXMgYnV0IHR3ZW50eS1mb3VyIHllYXJzIG9mIGFnZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgdGhleSByb3V0ZWQgdGhlIGVuZW15IHdpdGggZ3JlYXQgc2xhdWdodGVyIChpdCBpcyBzYWlkIHRoYXQgb3V0IG9mIHR3ZW50eSB0aG91c2FuZCBvbmx5IHRocmVlIHRob3VzYW5kIGVzY2FwZWQpLCBhbmQgaGFpbGVkIFBvbXBleSBhcyBJbXBlcmF0b3IuIEFuZCB3aGVuIGhlIHNhaWQgaGUgd291bGQgbm90IGFjY2VwdCB0aGUgaG9ub3VyIGFzIGxvbmcgYXMgdGhlIGNhbXAgb2YgdGhlIGVuZW15IHdhcyBpbnRhY3QsIGJ1dCB0aGF0IGlmIHRoZXkgdGhvdWdodCBoaW0gd29ydGh5IG9mIHRoZSBhcHBlbGxhdGlvbiwgdGhleSBtdXN0IGZpcnN0IGRlc3Ryb3kgdGhhdCwgaGlzIHNvbGRpZXJzIGltbWVkaWF0ZWx5IG1hZGUgYW4gYXNzYXVsdCB1cG9uIHRoZSByYW1wYXJ0czsgYW5kIFBvbXBleSBmb3VnaHQgd2l0aG91dCBoaXMgaGVsbWV0LCBmb3IgZmVhciBvZiBhIHBlcmlsIGxpa2UgdGhlIG9uZSBoZSBoYWQganVzdCBlc2NhcGVkLiBUaGUgY2FtcCB3YXMgc29vbiB0YWtlbiwgYW5kIERvbWl0aXVzIHdhcyBzbGFpbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gc29tZSBvZiB0aGUgY2l0aWVzIHN1Ym1pdHRlZCBhdCBvbmNlIHRvIFBvbXBleSwgYW5kIG90aGVycyB3ZXJlIHRha2VuIGJ5IHN0b3JtLiBLaW5nIElhcmJ1cyBhbHNvLCB0aGUgY29uZmVkZXJhdGUgb2YgRG9taXRpdXMsIHdhcyBjYXB0dXJlZCwgYW5kIGhpcyBraW5nZG9tIGdpdmVuIHRvIEhpZW1wc2FsLiBUYWtpbmcgYWR2YW50YWdlIG9mIHRoZSBnb29kIGZvcnR1bmUgYW5kIG1vbWVudHVtIG9mIGhpcyBhcm15LCBQb21wZXkgbm93IGludmFkZWQgTnVtaWRpYS4gSGUgbWFyY2hlZCB0aHJvdWdoIHRoZSBjb3VudHJ5IGZvciBtYW55IGRheXMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmNvbnF1ZXJlZCBhbGwgd2hvIGNhbWUgaW4gaGlzIHdheSwgYW5kIG1hZGUgcG90ZW50IGFuZCB0ZXJyaWJsZSBhZ2FpbiB0aGUgQmFyYmFyaWFucycgZmVhciBvZiB0aGUgUm9tYW5zLCB3aGljaCBoYWQgcmVhY2hlZCBhIGxvdyBlYmIuIE5heSwgaGUgZGVjbGFyZWQgdGhhdCBldmVuIHRoZSB3aWxkIGJlYXN0cyBpbiBBZnJpY2FuIGxhaXJzIG11c3Qgbm90IGJlIGxlZnQgd2l0aG91dCBleHBlcmllbmNlIG9mIHRoZSBjb3VyYWdlIGFuZCBzdHJlbmd0aCBvZiB0aGUgUm9tYW5zLCBhbmQgdGhlcmVmb3JlIHNwZW50IGEgZmV3IGRheXMgaW4gaHVudGluZyBsaW9ucyBhbmQgZWxlcGhhbnRzLiBJdCB0b29rIGhpbSBvbmx5IGZvcnR5IGRheXMgYWxsIHRvbGQsIHRoZXkgc2F5LCB0byBicmluZyBoaXMgZW5lbWllcyB0byBuYXVnaHQsIGdldCBBZnJpY2EgaW50byBoaXMgcG93ZXIsIGFuZCBhZGp1c3QgdGhlIHJlbGF0aW9ucyBvZiBpdHMga2luZ3MsIHRob3VnaCBoZSB3YXMgYnV0IHR3ZW50eS1mb3VyIHllYXJzIG9mIGFnZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gaGlzIHJldHVybiB0byBVdGljYSwgYSBsZXR0ZXIgZnJvbSBTdWxsYSB3YXMgYnJvdWdodCB0byBoaW0sIGluIHdoaWNoIGhlIHdhcyBjb21tYW5kZWQgdG8gc2VuZCBob21lIHRoZSByZXN0IG9mIGhpcyBhcm15LCBidXQgdG8gcmVtYWluIHRoZXJlIGhpbXNlbGYgd2l0aCBvbmUgbGVnaW9uLCBhd2FpdGluZyB0aGUgYXJyaXZhbCBvZiB0aGUgZ2VuZXJhbCB3aG8gd2FzIHRvIHN1Y2NlZWQgaGltLiBQb21wZXkgaGltc2VsZiBnYXZlIG5vIHNpZ24gb2YgdGhlIGRlZXAgZGlzdHJlc3Mgd2hpY2ggdGhlc2Ugb3JkZXJzIGNhdXNlZCBoaW0sIGJ1dCBoaXMgc29sZGllcnMgbWFkZSB0aGVpciBpbmRpZ25hdGlvbiBtYW5pZmVzdC4gV2hlbiBQb21wZXkgYXNrZWQgdGhlbSB0byBnbyBob21lIGJlZm9yZSBoaW0sIHRoZXkgYmVnYW4gdG8gcmV2aWxlIFN1bGxhLCBkZWNsYXJlZCB0aGV5IHdvdWxkIG5vdCBmb3JzYWtlIHRoZWlyIGdlbmVyYWwsIGFuZCBpbnNpc3RlZCB0aGF0IGhlIHNob3VsZCBub3QgdHJ1c3QgdGhlIHR5cmFudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QsIHRoZW4sIFBvbXBleSB0cmllZCB3aGF0IHdvcmRzIGNvdWxkIGRvIHRvIGFwcGVhc2UgYW5kIG1vbGxpZnkgdGhlbTsgYnV0IHdoZW4gaGUgd2FzIHVuYWJsZSB0byBwZXJzdWFkZSB0aGVtLCBoZSBjYW1lIGRvd24gZnJvbSBoaXMgdHJpYnVuYWwgYW5kIHdpdGhkcmV3IHRvIGhpcyB0ZW50IGluIHRlYXJzLiBUaGVuIGhpcyBzb2xkaWVycyBzZWl6ZWQgaGltIGFuZCBzZXQgaGltIGFnYWluIHVwb24gaGlzIHRyaWJ1bmFsLCBhbmQgYSBncmVhdCBwYXJ0IG9mIHRoZSBkYXkgd2FzIGNvbnN1bWVkIGluIHRoaXMgd2F5LCB0aGV5IHVyZ2luZyBoaW0gdG8gcmVtYWluIGFuZCBrZWVwIGhpcyBjb21tYW5kLCBhbmQgaGUgYmVnZ2luZyB0aGVtIHRvIG9iZXkgYW5kIG5vdCB0byByYWlzZSBhIHNlZGl0aW9uLiBBdCBsYXN0LCB3aGVuIHRoZWlyIGNsYW1vdXJzIGFuZCBlbnRyZWF0aWVzIGluY3JlYXNlZCwgaGUgc3dvcmUgd2l0aCBhbiBvYXRoIHRoYXQgaGUgd291bGQga2lsbCBoaW1zZWxmIGlmIHRoZXkgdXNlZCBmb3JjZSB3aXRoIGhpbSwgYW5kIGV2ZW4gdGhlbiB0aGV5IHdvdWxkIGhhcmRseSBzdG9wLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gaGlzIHJldHVybiB0byBVdGljYSwgYSBsZXR0ZXIgZnJvbSBTdWxsYSB3YXMgYnJvdWdodCB0byBoaW0sIGluIHdoaWNoIGhlIHdhcyBjb21tYW5kZWQgdG8gc2VuZCBob21lIHRoZSByZXN0IG9mIGhpcyBhcm15LCBidXQgdG8gcmVtYWluIHRoZXJlIGhpbXNlbGYgd2l0aCBvbmUgbGVnaW9uLCBhd2FpdGluZyB0aGUgYXJyaXZhbCBvZiB0aGUgZ2VuZXJhbCB3aG8gd2FzIHRvIHN1Y2NlZWQgaGltLiBQb21wZXkgaGltc2VsZiBnYXZlIG5vIHNpZ24gb2YgdGhlIGRlZXAgZGlzdHJlc3Mgd2hpY2ggdGhlc2Ugb3JkZXJzIGNhdXNlZCBoaW0sIGJ1dCBoaXMgc29sZGllcnMgbWFkZSB0aGVpciBpbmRpZ25hdGlvbiBtYW5pZmVzdC4gV2hlbiBQb21wZXkgYXNrZWQgdGhlbSB0byBnbyBob21lIGJlZm9yZSBoaW0sIHRoZXkgYmVnYW4gdG8gcmV2aWxlIFN1bGxhLCBkZWNsYXJlZCB0aGV5IHdvdWxkIG5vdCBmb3JzYWtlIHRoZWlyIGdlbmVyYWwsIGFuZCBpbnNpc3RlZCB0aGF0IGhlIHNob3VsZCBub3QgdHJ1c3QgdGhlIHR5cmFudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0LCB0aGVuLCBQb21wZXkgdHJpZWQgd2hhdCB3b3JkcyBjb3VsZCBkbyB0byBhcHBlYXNlIGFuZCBtb2xsaWZ5IHRoZW07IGJ1dCB3aGVuIGhlIHdhcyB1bmFibGUgdG8gcGVyc3VhZGUgdGhlbSwgaGUgY2FtZSBkb3duIGZyb20gaGlzIHRyaWJ1bmFsIGFuZCB3aXRoZHJldyB0byBoaXMgdGVudCBpbiB0ZWFycy4gVGhlbiBoaXMgc29sZGllcnMgc2VpemVkIGhpbSBhbmQgc2V0IGhpbSBhZ2FpbiB1cG9uIGhpcyB0cmlidW5hbCwgYW5kIGEgZ3JlYXQgcGFydCBvZiB0aGUgZGF5IHdhcyBjb25zdW1lZCBpbiB0aGlzIHdheSwgdGhleSB1cmdpbmcgaGltIHRvIHJlbWFpbiBhbmQga2VlcCBoaXMgY29tbWFuZCwgYW5kIGhlIGJlZ2dpbmcgdGhlbSB0byBvYmV5IGFuZCBub3QgdG8gcmFpc2UgYSBzZWRpdGlvbi4gQXQgbGFzdCwgd2hlbiB0aGVpciBjbGFtb3VycyBhbmQgZW50cmVhdGllcyBpbmNyZWFzZWQsIGhlIHN3b3JlIHdpdGggYW4gb2F0aCB0aGF0IGhlIHdvdWxkIGtpbGwgaGltc2VsZiBpZiB0aGV5IHVzZWQgZm9yY2Ugd2l0aCBoaW0sIGFuZCBldmVuIHRoZW4gdGhleSB3b3VsZCBoYXJkbHkgc3RvcC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEncyBmaXJzdCB0aWRpbmdzIG9mIHRoZSBhZmZhaXIgd2VyZSB0aGF0IFBvbXBleSB3YXMgaW4gcmV2b2x0LCBhbmQgaGUgdG9sZCBoaXMgZnJpZW5kcyB0aGF0IGl0IHdhcyBldmlkZW50bHkgaGlzIGZhdGUsIG5vdyB0aGF0IGhlIHdhcyBhbiBvbGQgbWFuLCB0byBoYXZlIGhpcyBjb250ZXN0cyB3aXRoIGJveXMuIFRoaXMgaGUgc2FpZCBiZWNhdXNlIE1hcml1cyBhbHNvLCB3aG8gd2FzIHF1aXRlIGEgeW91bmcgbWFuLCBoYWQgZ2l2ZW4gaGltIHZlcnkgZ3JlYXQgdHJvdWJsZSBhbmQgaW52b2x2ZWQgaGltIGluIHRoZSBtb3N0IGV4dHJlbWUgcGVyaWxzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBoZSBsZWFybmVkIHRoZSB0cnV0aCwgYW5kIHBlcmNlaXZlZCB0aGF0IGV2ZXJ5Ym9keSB3YXMgc2FsbHlpbmcgZm9ydGggdG8gd2VsY29tZSBQb21wZXkgYW5kIGFjY29tcGFueSBoaW0gaG9tZSB3aXRoIG1hcmtzIG9mIGdvb2R3aWxsLCBoZSB3YXMgZWFnZXIgdG8gb3V0ZG8gdGhlbS4gU28gaGUgd2VudCBvdXQgYW5kIG1ldCBoaW0sIGFuZCBhZnRlciBnaXZpbmcgaGltIHRoZSB3YXJtZXN0IHdlbGNvbWUsIHNhbHV0ZWQgaGltIGluIGEgbG91ZCB2b2ljZSBhcyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1hZ251cyw8L3E+IG9yIDxlbXBoPlRoZSBHcmVhdDwvZW1waD4sIGFuZCBvcmRlcmVkIHRob3NlIHdobyB3ZXJlIGJ5IHRvIGdpdmUgaGltIHRoaXMgc3VybmFtZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+T3RoZXJzLCBob3dldmVyLCBzYXkgdGhhdCB0aGlzIHRpdGxlIHdhcyBmaXJzdCBnaXZlbiBoaW0gaW4gQWZyaWNhIGJ5IHRoZSB3aG9sZSBhcm15LCBidXQgcmVjZWl2ZWQgYXV0aG9yaXR5IGFuZCB3ZWlnaHQgd2hlbiB0aHVzIGNvbmZpcm1lZCBieSBTdWxsYS4gUG9tcGV5IGhpbXNlbGYsIGhvd2V2ZXIsIHdhcyBsYXN0IG9mIGFsbCB0byB1c2UgaXQsIGFuZCBpdCB3YXMgb25seSBhZnRlciBhIGxvbmcgdGltZSwgd2hlbiBoZSB3YXMgc2VudCBhcyBwcm8tY29uc3VsIHRvIFNwYWluIGFnYWluc3QgU2VydG9yaXVzLCB0aGF0IGhlIGJlZ2FuIHRvIHN1YnNjcmliZSBoaW1zZWxmIGluIGhpcyBsZXR0ZXJzIGFuZCBvcmRpbmFuY2VzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UG9tcGVpdXMgTWFnbnVzPC9xPiA7IGZvciB0aGUgbmFtZSBoYWQgYmVjb21lIGZhbWlsaWFyIGFuZCB3YXMgbm8gbG9uZ2VyIGludmlkaW91cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1bGxhJ3MgZmlyc3QgdGlkaW5ncyBvZiB0aGUgYWZmYWlyIHdlcmUgdGhhdCBQb21wZXkgd2FzIGluIHJldm9sdCwgYW5kIGhlIHRvbGQgaGlzIGZyaWVuZHMgdGhhdCBpdCB3YXMgZXZpZGVudGx5IGhpcyBmYXRlLCBub3cgdGhhdCBoZSB3YXMgYW4gb2xkIG1hbiwgdG8gaGF2ZSBoaXMgY29udGVzdHMgd2l0aCBib3lzLiBUaGlzIGhlIHNhaWQgYmVjYXVzZSBNYXJpdXMgYWxzbywgd2hvIHdhcyBxdWl0ZSBhIHlvdW5nIG1hbiwgaGFkIGdpdmVuIGhpbSB2ZXJ5IGdyZWF0IHRyb3VibGUgYW5kIGludm9sdmVkIGhpbSBpbiB0aGUgbW9zdCBleHRyZW1lIHBlcmlscy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIGxlYXJuZWQgdGhlIHRydXRoLCBhbmQgcGVyY2VpdmVkIHRoYXQgZXZlcnlib2R5IHdhcyBzYWxseWluZyBmb3J0aCB0byB3ZWxjb21lIFBvbXBleSBhbmQgYWNjb21wYW55IGhpbSBob21lIHdpdGggbWFya3Mgb2YgZ29vZHdpbGwsIGhlIHdhcyBlYWdlciB0byBvdXRkbyB0aGVtLiBTbyBoZSB3ZW50IG91dCBhbmQgbWV0IGhpbSwgYW5kIGFmdGVyIGdpdmluZyBoaW0gdGhlIHdhcm1lc3Qgd2VsY29tZSwgc2FsdXRlZCBoaW0gaW4gYSBsb3VkIHZvaWNlIGFzIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NYWdudXMsPC9xPiBvciA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBHcmVhdDwvZW1waD4sIGFuZCBvcmRlcmVkIHRob3NlIHdobyB3ZXJlIGJ5IHRvIGdpdmUgaGltIHRoaXMgc3VybmFtZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk90aGVycywgaG93ZXZlciwgc2F5IHRoYXQgdGhpcyB0aXRsZSB3YXMgZmlyc3QgZ2l2ZW4gaGltIGluIEFmcmljYSBieSB0aGUgd2hvbGUgYXJteSwgYnV0IHJlY2VpdmVkIGF1dGhvcml0eSBhbmQgd2VpZ2h0IHdoZW4gdGh1cyBjb25maXJtZWQgYnkgU3VsbGEuIFBvbXBleSBoaW1zZWxmLCBob3dldmVyLCB3YXMgbGFzdCBvZiBhbGwgdG8gdXNlIGl0LCBhbmQgaXQgd2FzIG9ubHkgYWZ0ZXIgYSBsb25nIHRpbWUsIHdoZW4gaGUgd2FzIHNlbnQgYXMgcHJvLWNvbnN1bCB0byBTcGFpbiBhZ2FpbnN0IFNlcnRvcml1cywgdGhhdCBoZSBiZWdhbiB0byBzdWJzY3JpYmUgaGltc2VsZiBpbiBoaXMgbGV0dGVycyBhbmQgb3JkaW5hbmNlcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UG9tcGVpdXMgTWFnbnVzPC9xPiA7IGZvciB0aGUgbmFtZSBoYWQgYmVjb21lIGZhbWlsaWFyIGFuZCB3YXMgbm8gbG9uZ2VyIGludmlkaW91cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGhlcmVpbiB3ZSBtYXkgZml0dGluZ2x5IHJlc3BlY3QgYW5kIGFkbWlyZSB0aGUgYW5jaWVudCBSb21hbnM7IHRoZXkgZGlkIG5vdCBiZXN0b3cgc3VjaCB0aXRsZXMgYW5kIHN1cm5hbWVzIGFzIGEgcmV3YXJkIGZvciBzdWNjZXNzZXMgaW4gd2FyIGFuZCBtaWxpdGFyeSBjb21tYW5kIGFsb25lLCBidXQgYWxzbyBhZG9ybmVkIHdpdGggdGhlbSB0aGUgaGlnaCBxdWFsaXRpZXMgYW5kIGFjaGlldmVtZW50cyBvZiB0aGVpciBzdGF0ZXNtZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCBpbiB0d28gc3VjaCBjYXNlcyB0aGUgcGVvcGxlIGJlc3Rvd2VkIHRoZSB0aXRsZSBvZiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1heGltdXMsPC9xPiB3aGljaCBzaWduaWZpZXMgdGhlIEdyZWF0ZXN0IHVwb24gVmFsZXJpdXMsIGZvciByZWNvbmNpbGluZyB0aGVtIHdpdGggdGhlIHNlbmF0ZSB3aGVuIGl0IHdhcyBhdCB2YXJpYW5jZSB3aXRoIHRoZW08bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BZnRlciB0aGUgZmFtb3VzIHNlY2Vzc2lvbiBvZiB0aGUgcGxlYnMsIGluIDQ5NCBCLkMuPC9ub3RlPjsgYW5kIHVwb24gRmFiaXVzIFJ1bGx1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDEuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5GYWJpdXMgTWF4aW11czwvdGl0bGU+LCBpLiAyLjwvYmlibD4gSXQgd2FzIGluIHRoZSBjYXBhY2l0eSBvZiBjZW5zb3IsIDMwNCBCLkMuLCB0aGF0IFJ1bGx1cyB0aHVzIHB1cmlmaWVkIHRoZSBzZW5hdGUuPC9ub3RlPiBiZWNhdXNlIGhlIGV4cGVsbGVkIGZyb20gdGhlIHNlbmF0ZSBjZXJ0YWluIGRlc2NlbmRhbnRzIG9mIGZyZWVkbWVuIHdobyBoYWQgYmVlbiBlbnJvbGxlZCBpbiBpdCBvbiBhY2NvdW50IG9mIHRoZWlyIHdlYWx0aC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZXJlaW4gd2UgbWF5IGZpdHRpbmdseSByZXNwZWN0IGFuZCBhZG1pcmUgdGhlIGFuY2llbnQgUm9tYW5zOyB0aGV5IGRpZCBub3QgYmVzdG93IHN1Y2ggdGl0bGVzIGFuZCBzdXJuYW1lcyBhcyBhIHJld2FyZCBmb3Igc3VjY2Vzc2VzIGluIHdhciBhbmQgbWlsaXRhcnkgY29tbWFuZCBhbG9uZSwgYnV0IGFsc28gYWRvcm5lZCB3aXRoIHRoZW0gdGhlIGhpZ2ggcXVhbGl0aWVzIGFuZCBhY2hpZXZlbWVudHMgb2YgdGhlaXIgc3RhdGVzbWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCBpbiB0d28gc3VjaCBjYXNlcyB0aGUgcGVvcGxlIGJlc3Rvd2VkIHRoZSB0aXRsZSBvZiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWF4aW11cyw8L3E+IHdoaWNoIHNpZ25pZmllcyB0aGUgR3JlYXRlc3QgdXBvbiBWYWxlcml1cywgZm9yIHJlY29uY2lsaW5nIHRoZW0gd2l0aCB0aGUgc2VuYXRlIHdoZW4gaXQgd2FzIGF0IHZhcmlhbmNlIHdpdGggdGhlbTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWZ0ZXIgdGhlIGZhbW91cyBzZWNlc3Npb24gb2YgdGhlIHBsZWJzLCBpbiA0OTQgQi5DLjwvbm90ZT47IGFuZCB1cG9uIEZhYml1cyBSdWxsdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZhYi4gMS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmFiaXVzIE1heGltdXM8L3RpdGxlPiwgaS4gMi48L2JpYmw+IEl0IHdhcyBpbiB0aGUgY2FwYWNpdHkgb2YgY2Vuc29yLCAzMDQgQi5DLiwgdGhhdCBSdWxsdXMgdGh1cyBwdXJpZmllZCB0aGUgc2VuYXRlLjwvbm90ZT4gYmVjYXVzZSBoZSBleHBlbGxlZCBmcm9tIHRoZSBzZW5hdGUgY2VydGFpbiBkZXNjZW5kYW50cyBvZiBmcmVlZG1lbiB3aG8gaGFkIGJlZW4gZW5yb2xsZWQgaW4gaXQgb24gYWNjb3VudCBvZiB0aGVpciB3ZWFsdGguCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZhYi4gMS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmFiaXVzIE1heGltdXM8L3RpdGxlPiwgaS4gMi48L2JpYmw+IEl0IHdhcyBpbiB0aGUgY2FwYWNpdHkgb2YgY2Vuc29yLCAzMDQgQi5DLiwgdGhhdCBSdWxsdXMgdGh1cyBwdXJpZmllZCB0aGUgc2VuYXRlLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZhYml1cyBNYXhpbXVzPC90aXRsZT4sIGkuIDIuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgUG9tcGV5IGFza2VkIGZvciBhIHRyaXVtcGgsIGJ1dCBTdWxsYSBvcHBvc2VkIGhpcyByZXF1ZXN0LiBUaGUgbGF3LCBoZSBzYWlkLCBwZXJtaXR0ZWQgb25seSBhIGNvbnN1bCBvciBhIHByYWV0b3IgdG8gY2VsZWJyYXRlIGEgdHJpdW1waCwgYnV0IG5vIG9uZSBlbHNlLiBUaGVyZWZvcmUgdGhlIGZpcnN0IFNjaXBpbywgYWZ0ZXIgY29ucXVlcmluZyB0aGUgQ2FydGhhZ2luaWFucyBpbiBTcGFpbiBpbiBmYXIgZ3JlYXRlciBjb25mbGljdHMsIGRpZCBub3QgYXNrIGZvciBhIHRyaXVtcGg7IGZvciBoZSB3YXMgbm90IGNvbnN1bCwgbm9yIGV2ZW4gcHJhZXRvci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGlmIFBvbXBleSwgd2hvIGhhZCBzY2FyY2VseSBncm93biBhIGJlYXJkIGFzIHlldCwgYW5kIHdobyB3YXMgdG9vIHlvdW5nIHRvIGJlIGEgc2VuYXRvciwgc2hvdWxkIHJpZGUgaW50byB0aGUgY2l0eSBpbiBhIHRyaXVtcGgsIGl0IHdvdWxkIG5vdCBvbmx5IG1ha2UgU3VsbGEncyBnb3Zlcm5tZW50IGFsdG9nZXRoZXIgb2Rpb3VzLCBidXQgYWxzbyBQb21wZXkncyBob25vdXIuIFRoaXMgd2FzIHdoYXQgU3VsbGEgc2FpZCB0byBQb21wZXksIGRlY2xhcmluZyB0aGF0IGhlIHdvdWxkIG5vdCBhbGxvdyBoaXMgcmVxdWVzdCwgYnV0IHdvdWxkIG9wcG9zZSBoaW0gYW5kIHRod2FydCBoaXMgYW1iaXRpb24gaWYgaGUgcmVmdXNlZCB0byBsaXN0ZW4gdG8gaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgUG9tcGV5IGFza2VkIGZvciBhIHRyaXVtcGgsIGJ1dCBTdWxsYSBvcHBvc2VkIGhpcyByZXF1ZXN0LiBUaGUgbGF3LCBoZSBzYWlkLCBwZXJtaXR0ZWQgb25seSBhIGNvbnN1bCBvciBhIHByYWV0b3IgdG8gY2VsZWJyYXRlIGEgdHJpdW1waCwgYnV0IG5vIG9uZSBlbHNlLiBUaGVyZWZvcmUgdGhlIGZpcnN0IFNjaXBpbywgYWZ0ZXIgY29ucXVlcmluZyB0aGUgQ2FydGhhZ2luaWFucyBpbiBTcGFpbiBpbiBmYXIgZ3JlYXRlciBjb25mbGljdHMsIGRpZCBub3QgYXNrIGZvciBhIHRyaXVtcGg7IGZvciBoZSB3YXMgbm90IGNvbnN1bCwgbm9yIGV2ZW4gcHJhZXRvci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpZiBQb21wZXksIHdobyBoYWQgc2NhcmNlbHkgZ3Jvd24gYSBiZWFyZCBhcyB5ZXQsIGFuZCB3aG8gd2FzIHRvbyB5b3VuZyB0byBiZSBhIHNlbmF0b3IsIHNob3VsZCByaWRlIGludG8gdGhlIGNpdHkgaW4gYSB0cml1bXBoLCBpdCB3b3VsZCBub3Qgb25seSBtYWtlIFN1bGxhJ3MgZ292ZXJubWVudCBhbHRvZ2V0aGVyIG9kaW91cywgYnV0IGFsc28gUG9tcGV5J3MgaG9ub3VyLiBUaGlzIHdhcyB3aGF0IFN1bGxhIHNhaWQgdG8gUG9tcGV5LCBkZWNsYXJpbmcgdGhhdCBoZSB3b3VsZCBub3QgYWxsb3cgaGlzIHJlcXVlc3QsIGJ1dCB3b3VsZCBvcHBvc2UgaGltIGFuZCB0aHdhcnQgaGlzIGFtYml0aW9uIGlmIGhlIHJlZnVzZWQgdG8gbGlzdGVuIHRvIGhpbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5LCBob3dldmVyLCB3YXMgbm90IGNvd2VkLCBidXQgYmFkZSBTdWxsYSByZWZsZWN0IHRoYXQgbW9yZSB3b3JzaGlwcGVkIHRoZSByaXNpbmcgdGhhbiB0aGUgc2V0dGluZyBzdW4sIGludGltYXRpbmcgdGhhdCBoaXMgb3duIHBvd2VyIHdhcyBvbiB0aGUgaW5jcmVhc2UsIHdoaWxlIHRoYXQgb2YgU3VsbGEgd2FzIG9uIHRoZSB3YW5lIGFuZCBmYWRpbmcgYXdheS4gU3VsbGEgZGlkIG5vdCBoZWFyIHRoZSB3b3JkcyBkaXN0aW5jdGx5LCBidXQgc2VlaW5nLCBmcm9tIHRoZWlyIGxvb2tzIGFuZCBnZXN0dXJlcywgdGhhdCB0aG9zZSB3aG8gZGlkIGhlYXIgdGhlbSB3ZXJlIGFtYXplZCwgaGUgYXNrZWQgd2hhdCBpdCB3YXMgdGhhdCBoYWQgYmVlbiBzYWlkLiBXaGVuIGhlIGxlYXJuZWQgd2hhdCBpdCB3YXMsIGhlIHdhcyBhc3RvdW5kZWQgYXQgdGhlIGJvbGRuZXNzIG9mIFBvbXBleSwgYW5kIGNyaWVkIG91dCB0d2ljZSBpbiBzdWNjZXNzaW9uOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCBoaW0gdHJpdW1waCE8L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlciwgd2hlbiBtYW55IHNob3dlZCBkaXNwbGVhc3VyZSBhbmQgaW5kaWduYXRpb24gYXQgaGlzIHByb2plY3QsIFBvbXBleSwgd2UgYXJlIHRvbGQsIHdhcyBhbGwgdGhlIG1vcmUgZGVzaXJvdXMgb2YgYW5ub3lpbmcgdGhlbSwgYW5kIHRyaWVkIHRvIHJpZGUgaW50byB0aGUgY2l0eSBvbiBhIGNoYXJpb3QgZHJhd24gYnkgZm91ciBlbGVwaGFudHM7IGZvciBoZSBoYWQgYnJvdWdodCBtYW55IGZyb20gQWZyaWNhIHdoaWNoIGhlIGhhZCBjYXB0dXJlZCBmcm9tIGl0cyBraW5ncy4gQnV0IHRoZSBnYXRlIG9mIHRoZSBjaXR5IHdhcyB0b28gbmFycm93LCBhbmQgaGUgdGhlcmVmb3JlIGdhdmUgdXAgdGhlIGF0dGVtcHQgYW5kIGNoYW5nZWQgb3ZlciB0byBoaXMgaG9yc2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgd2hlbiBoaXMgc29sZGllcnMsIHdobyBoYWQgbm90IGdvdCBhcyBtdWNoIGFzIHRoZXkgZXhwZWN0ZWQsIHdlcmUgaW5jbGluZWQgdG8gcmFpc2UgYSB0dW11bHQgYW5kIGltcGVkZSB0aGUgdHJpdW1waCwgaGUgc2FpZCBoZSBkaWQgbm90IGNhcmUgYXQgYWxsLCBidXQgd291bGQgcmF0aGVyIGdpdmUgdXAgaGlzIHRyaXVtcGggdGhhbiB0cnVja2xlIHRvIHRoZW0uIFRoZW4gU2VydmlsaXVzLCBhIG1hbiBvZiBkaXN0aW5jdGlvbiwgYW5kIG9uZSB3aG8gaGFkIGJlZW4gbW9zdCBvcHBvc2VkIHRvIFBvbXBleSdzIHRyaXVtcGgsIHNhaWQgaGUgbm93IHNhdyB0aGF0IFBvbXBleSB3YXMgcmVhbGx5IGdyZWF0LCBhbmQgd29ydGh5IG9mIHRoZSBob25vdXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBjbGVhciB0aGF0IGhlIG1pZ2h0IGFsc28gaGF2ZSBiZWVuIGVhc2lseSBtYWRlIGEgc2VuYXRvciBhdCB0aGF0IHRpbWUsIGhhZCBoZSB3aXNoZWQgaXQ7IGJ1dCBoZSB3YXMgbm90IGVhZ2VyIGZvciB0aGlzLCBhcyB0aGV5IHNheSwgc2luY2UgaGUgd2FzIGluIHRoZSBjaGFzZSBmb3IgcmVwdXRhdGlvbiBvZiBhIHN1cnByaXNpbmcgc29ydC4gQW5kIGluZGVlZCBpdCB3b3VsZCBoYXZlIGJlZW4gbm90aGluZyB3b25kZXJmdWwgZm9yIFBvbXBleSB0byBiZSBhIHNlbmF0b3IgYmVmb3JlIGhlIHdhcyBvZiBhZ2UgZm9yIGl0OyBidXQgaXQgd2FzIGEgZGF6emxpbmcgaG9ub3VyIGZvciBoaW0gdG8gY2VsZWJyYXRlIGEgdHJpdW1waCBiZWZvcmUgaGUgd2FzIGEgc2VuYXRvci4gQW5kIHRoaXMgY29udHJpYnV0ZWQgbm90IGEgbGl0dGxlIHRvIHdpbiBoaW0gdGhlIGZhdm91ciBvZiB0aGUgbXVsdGl0dWRlOyBmb3IgdGhlIHBlb3BsZSB3ZXJlIGRlbGlnaHRlZCB0byBoYXZlIGhpbSBzdGlsbCBjbGFzc2VkIGFtb25nIHRoZSBrbmlnaHRzIGFmdGVyIGEgdHJpdW1waC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgaG93ZXZlciwgd2FzIG5vdCBjb3dlZCwgYnV0IGJhZGUgU3VsbGEgcmVmbGVjdCB0aGF0IG1vcmUgd29yc2hpcHBlZCB0aGUgcmlzaW5nIHRoYW4gdGhlIHNldHRpbmcgc3VuLCBpbnRpbWF0aW5nIHRoYXQgaGlzIG93biBwb3dlciB3YXMgb24gdGhlIGluY3JlYXNlLCB3aGlsZSB0aGF0IG9mIFN1bGxhIHdhcyBvbiB0aGUgd2FuZSBhbmQgZmFkaW5nIGF3YXkuIFN1bGxhIGRpZCBub3QgaGVhciB0aGUgd29yZHMgZGlzdGluY3RseSwgYnV0IHNlZWluZywgZnJvbSB0aGVpciBsb29rcyBhbmQgZ2VzdHVyZXMsIHRoYXQgdGhvc2Ugd2hvIGRpZCBoZWFyIHRoZW0gd2VyZSBhbWF6ZWQsIGhlIGFza2VkIHdoYXQgaXQgd2FzIHRoYXQgaGFkIGJlZW4gc2FpZC4gV2hlbiBoZSBsZWFybmVkIHdoYXQgaXQgd2FzLCBoZSB3YXMgYXN0b3VuZGVkIGF0IHRoZSBib2xkbmVzcyBvZiBQb21wZXksIGFuZCBjcmllZCBvdXQgdHdpY2UgaW4gc3VjY2Vzc2lvbjogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCBoaW0gdHJpdW1waCE8L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXIsIHdoZW4gbWFueSBzaG93ZWQgZGlzcGxlYXN1cmUgYW5kIGluZGlnbmF0aW9uIGF0IGhpcyBwcm9qZWN0LCBQb21wZXksIHdlIGFyZSB0b2xkLCB3YXMgYWxsIHRoZSBtb3JlIGRlc2lyb3VzIG9mIGFubm95aW5nIHRoZW0sIGFuZCB0cmllZCB0byByaWRlIGludG8gdGhlIGNpdHkgb24gYSBjaGFyaW90IGRyYXduIGJ5IGZvdXIgZWxlcGhhbnRzOyBmb3IgaGUgaGFkIGJyb3VnaHQgbWFueSBmcm9tIEFmcmljYSB3aGljaCBoZSBoYWQgY2FwdHVyZWQgZnJvbSBpdHMga2luZ3MuIEJ1dCB0aGUgZ2F0ZSBvZiB0aGUgY2l0eSB3YXMgdG9vIG5hcnJvdywgYW5kIGhlIHRoZXJlZm9yZSBnYXZlIHVwIHRoZSBhdHRlbXB0IGFuZCBjaGFuZ2VkIG92ZXIgdG8gaGlzIGhvcnNlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIGhpcyBzb2xkaWVycywgd2hvIGhhZCBub3QgZ290IGFzIG11Y2ggYXMgdGhleSBleHBlY3RlZCwgd2VyZSBpbmNsaW5lZCB0byByYWlzZSBhIHR1bXVsdCBhbmQgaW1wZWRlIHRoZSB0cml1bXBoLCBoZSBzYWlkIGhlIGRpZCBub3QgY2FyZSBhdCBhbGwsIGJ1dCB3b3VsZCByYXRoZXIgZ2l2ZSB1cCBoaXMgdHJpdW1waCB0aGFuIHRydWNrbGUgdG8gdGhlbS4gVGhlbiBTZXJ2aWxpdXMsIGEgbWFuIG9mIGRpc3RpbmN0aW9uLCBhbmQgb25lIHdobyBoYWQgYmVlbiBtb3N0IG9wcG9zZWQgdG8gUG9tcGV5J3MgdHJpdW1waCwgc2FpZCBoZSBub3cgc2F3IHRoYXQgUG9tcGV5IHdhcyByZWFsbHkgZ3JlYXQsIGFuZCB3b3J0aHkgb2YgdGhlIGhvbm91ci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBjbGVhciB0aGF0IGhlIG1pZ2h0IGFsc28gaGF2ZSBiZWVuIGVhc2lseSBtYWRlIGEgc2VuYXRvciBhdCB0aGF0IHRpbWUsIGhhZCBoZSB3aXNoZWQgaXQ7IGJ1dCBoZSB3YXMgbm90IGVhZ2VyIGZvciB0aGlzLCBhcyB0aGV5IHNheSwgc2luY2UgaGUgd2FzIGluIHRoZSBjaGFzZSBmb3IgcmVwdXRhdGlvbiBvZiBhIHN1cnByaXNpbmcgc29ydC4gQW5kIGluZGVlZCBpdCB3b3VsZCBoYXZlIGJlZW4gbm90aGluZyB3b25kZXJmdWwgZm9yIFBvbXBleSB0byBiZSBhIHNlbmF0b3IgYmVmb3JlIGhlIHdhcyBvZiBhZ2UgZm9yIGl0OyBidXQgaXQgd2FzIGEgZGF6emxpbmcgaG9ub3VyIGZvciBoaW0gdG8gY2VsZWJyYXRlIGEgdHJpdW1waCBiZWZvcmUgaGUgd2FzIGEgc2VuYXRvci4gQW5kIHRoaXMgY29udHJpYnV0ZWQgbm90IGEgbGl0dGxlIHRvIHdpbiBoaW0gdGhlIGZhdm91ciBvZiB0aGUgbXVsdGl0dWRlOyBmb3IgdGhlIHBlb3BsZSB3ZXJlIGRlbGlnaHRlZCB0byBoYXZlIGhpbSBzdGlsbCBjbGFzc2VkIGFtb25nIHRoZSBrbmlnaHRzIGFmdGVyIGEgdHJpdW1waC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEsIGhvd2V2ZXIsIHdhcyBhbm5veWVkIGF0IHNlZWluZyB0byB3aGF0IGEgaGVpZ2h0IG9mIHJlcHV0YXRpb24gYW5kIHBvd2VyIFBvbXBleSB3YXMgYWR2YW5jaW5nLCBidXQgYmVpbmcgYXNoYW1lZCB0byBvYnN0cnVjdCBoaXMgY2FyZWVyLCBoZSBrZXB0IHF1aWV0LiBPbmx5LCB3aGVuIGluIHNwaXRlIG9mIGhpbSBhbmQgYWdhaW5zdCBoaXMgd2lzaGVzIFBvbXBleSBtYWRlIExlcGlkdXMgY29uc3VsLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDc5IEIuQy48L25vdGU+IGJ5IGNhbnZhc3NpbmcgZm9yIGhpbSBhbmQgbWFraW5nIHRoZSBwZW9wbGUgemVhbG91c2x5IHN1cHBvcnQgaGltIHRocm91Z2ggdGhlaXIgZ29vZHdpbGwgdG93YXJkcyBoaW1zZWxmLCBzZWVpbmcgUG9tcGV5IGdvaW5nIG9mZiB0aHJvdWdoIHRoZSBmb3J1bSB3aXRoIGEgdGhyb25nLCBTdWxsYSBzYWlkOiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBzZWUsIHlvdW5nIG1hbiwgdGhhdCB5b3UgcmVqb2ljZSBpbiB5b3VyIHZpY3Rvcnk7IGFuZCBzdXJlbHkgaXQgd2FzIGEgZ2VuZXJvdXMgYW5kIG5vYmxlIHRoaW5nIGZvciBMZXBpZHVzLCB0aGUgd29yc3Qgb2YgbWVuLCB0byBiZSBwcm9jbGFpbWVkIGNvbnN1bCBieSBhIGxhcmdlciB2b3RlIHRoYW4gQ2F0dWx1cywgdGhlIGJlc3Qgb2YgbWVuLCBiZWNhdXNlIHlvdSBpbmZsdWVuY2VkIHRoZSBwZW9wbGUgdG8gdGFrZSB0aGlzIGNvdXJzZS4gTm93LCBob3dldmVyLCBpdCBpcyB0aW1lIGZvciB5b3UgdG8gYmUgd2lkZSBhd2FrZSBhbmQgd2F0Y2hmdWwgb2YgeW91ciBpbnRlcmVzdHM7IHlvdSBoYXZlIG1hZGUgeW91ciBhZHZlcnNhcnkgc3Ryb25nZXIgdGhhbiB5b3Vyc2VsZi48L3E+IEJ1dCBTdWxsYSBzaG93ZWQgbW9zdCBjbGVhcmx5IHRoYXQgaGUgd2FzIG5vdCB3ZWxsLWRpc3Bvc2VkIHRvIFBvbXBleSBieSB0aGUgd2lsbCB3aGljaCBoZSB3cm90ZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoZXJlYXMgaGUgYmVxdWVhdGhlZCBnaWZ0cyB0byBvdGhlciBmcmllbmRzLCBhbmQgbWFkZSBzb21lIG9mIHRoZW0gZ3VhcmRpYW5zIG9mIGhpcyBzb24sIGhlIG9taXR0ZWQgYWxsIG1lbnRpb24gb2YgUG9tcGV5LiBBbmQgeWV0IFBvbXBleSBib3JlIHRoaXMgd2l0aCBncmVhdCBjb21wb3N1cmUsIGFuZCBsb3lhbGx5LCBpbnNvbXVjaCB0aGF0IHdoZW4gTGVwaWR1cyBhbmQgc3VuZHJ5IG90aGVycyB0cmllZCB0byBwcmV2ZW50IHRoZSBib2R5IG9mIFN1bGxhIGZyb20gYmVpbmcgYnVyaWVkIGluIHRoZSBDYW1wdXMgTWFydGl1cywgb3IgZXZlbiBmcm9tIHJlY2VpdmluZyBwdWJsaWMgYnVyaWFsIGhvbm91cnMsIGhlIGNhbWUgdG8gdGhlIHJlc2N1ZSwgYW5kIGdhdmUgdG8gdGhlIGludGVybWVudCBhbGlrZSBob25vdXIgYW5kIHNlY3VyaXR5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDM4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+U3VsbGE8L3RpdGxlPiwgY2hhcHRlciB4eHh2aWlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEsIGhvd2V2ZXIsIHdhcyBhbm5veWVkIGF0IHNlZWluZyB0byB3aGF0IGEgaGVpZ2h0IG9mIHJlcHV0YXRpb24gYW5kIHBvd2VyIFBvbXBleSB3YXMgYWR2YW5jaW5nLCBidXQgYmVpbmcgYXNoYW1lZCB0byBvYnN0cnVjdCBoaXMgY2FyZWVyLCBoZSBrZXB0IHF1aWV0LiBPbmx5LCB3aGVuIGluIHNwaXRlIG9mIGhpbSBhbmQgYWdhaW5zdCBoaXMgd2lzaGVzIFBvbXBleSBtYWRlIExlcGlkdXMgY29uc3VsLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNzkgQi5DLjwvbm90ZT4gYnkgY2FudmFzc2luZyBmb3IgaGltIGFuZCBtYWtpbmcgdGhlIHBlb3BsZSB6ZWFsb3VzbHkgc3VwcG9ydCBoaW0gdGhyb3VnaCB0aGVpciBnb29kd2lsbCB0b3dhcmRzIGhpbXNlbGYsIHNlZWluZyBQb21wZXkgZ29pbmcgb2ZmIHRocm91Z2ggdGhlIGZvcnVtIHdpdGggYSB0aHJvbmcsIFN1bGxhIHNhaWQ6IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc2VlLCB5b3VuZyBtYW4sIHRoYXQgeW91IHJlam9pY2UgaW4geW91ciB2aWN0b3J5OyBhbmQgc3VyZWx5IGl0IHdhcyBhIGdlbmVyb3VzIGFuZCBub2JsZSB0aGluZyBmb3IgTGVwaWR1cywgdGhlIHdvcnN0IG9mIG1lbiwgdG8gYmUgcHJvY2xhaW1lZCBjb25zdWwgYnkgYSBsYXJnZXIgdm90ZSB0aGFuIENhdHVsdXMsIHRoZSBiZXN0IG9mIG1lbiwgYmVjYXVzZSB5b3UgaW5mbHVlbmNlZCB0aGUgcGVvcGxlIHRvIHRha2UgdGhpcyBjb3Vyc2UuIE5vdywgaG93ZXZlciwgaXQgaXMgdGltZSBmb3IgeW91IHRvIGJlIHdpZGUgYXdha2UgYW5kIHdhdGNoZnVsIG9mIHlvdXIgaW50ZXJlc3RzOyB5b3UgaGF2ZSBtYWRlIHlvdXIgYWR2ZXJzYXJ5IHN0cm9uZ2VyIHRoYW4geW91cnNlbGYuPC9xPiBCdXQgU3VsbGEgc2hvd2VkIG1vc3QgY2xlYXJseSB0aGF0IGhlIHdhcyBub3Qgd2VsbC1kaXNwb3NlZCB0byBQb21wZXkgYnkgdGhlIHdpbGwgd2hpY2ggaGUgd3JvdGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVyZWFzIGhlIGJlcXVlYXRoZWQgZ2lmdHMgdG8gb3RoZXIgZnJpZW5kcywgYW5kIG1hZGUgc29tZSBvZiB0aGVtIGd1YXJkaWFucyBvZiBoaXMgc29uLCBoZSBvbWl0dGVkIGFsbCBtZW50aW9uIG9mIFBvbXBleS4gQW5kIHlldCBQb21wZXkgYm9yZSB0aGlzIHdpdGggZ3JlYXQgY29tcG9zdXJlLCBhbmQgbG95YWxseSwgaW5zb211Y2ggdGhhdCB3aGVuIExlcGlkdXMgYW5kIHN1bmRyeSBvdGhlcnMgdHJpZWQgdG8gcHJldmVudCB0aGUgYm9keSBvZiBTdWxsYSBmcm9tIGJlaW5nIGJ1cmllZCBpbiB0aGUgQ2FtcHVzIE1hcnRpdXMsIG9yIGV2ZW4gZnJvbSByZWNlaXZpbmcgcHVibGljIGJ1cmlhbCBob25vdXJzLCBoZSBjYW1lIHRvIHRoZSByZXNjdWUsIGFuZCBnYXZlIHRvIHRoZSBpbnRlcm1lbnQgYWxpa2UgaG9ub3VyIGFuZCBzZWN1cml0eS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMzguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIGNoYXB0ZXIgeHh4dmlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMzguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIGNoYXB0ZXIgeHh4dmlpaS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIGNoYXB0ZXIgeHh4dmlpaS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Tb29uIGFmdGVyIHRoZSBkZWF0aCBvZiBTdWxsYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj43OCBCLkMuPC9ub3RlPiBoaXMgcHJvcGhlY2llcyB3ZXJlIGZ1bGZpbGxlZCwgYW5kIExlcGlkdXMgdHJpZWQgdG8gYXNzdW1lIFN1bGxhJ3MgcG93ZXJzLiBIZSB0b29rIG5vIGNpcmN1aXRvdXMgcm91dGUgYW5kIHVzZWQgbm8gcHJldGVuY2UsIGJ1dCBhcHBlYXJlZCBhdCBvbmNlIGluIGFybXMsIHN0aXJyaW5nIHVwIGFuZXcgYW5kIGdhdGhlcmluZyBhYm91dCBoaW1zZWxmIHRoZSByZW1uYW50cyBvZiBmYWN0aW9uLCBsb25nIGVuZmVlYmxlZCwgd2hpY2ggaGFkIGVzY2FwZWQgdGhlIGhhbmQgb2YgU3VsbGEuIEhpcyBjb2xsZWFndWUsIENhdHVsdXMsIHRvIHdob20gdGhlIGluY29ycnVwdCBhbmQgc291bmRlciBlbGVtZW50IGluIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBhdHRhY2hlZCB0aGVtc2VsdmVzLCB3YXMgdGhlIGdyZWF0ZXN0IFJvbWFuIG9mIHRoZSB0aW1lIGluIHRoZSBlc3RpbWF0ZSBzZXQgdXBvbiBoaXMgd2lzZG9tIGFuZCBqdXN0aWNlLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgd2FzIHRob3VnaHQgYmV0dGVyIGFkYXB0ZWQgZm9yIHBvbGl0aWNhbCB0aGFuIG1pbGl0YXJ5IGxlYWRlcnNoaXAuIFRoZSBzaXR1YXRpb24gaXRzZWxmLCB0aGVyZWZvcmUgZGVtYW5kZWQgUG9tcGV5LCB3aG8gd2FzIG5vdCBsb25nIGluIGRlY2lkaW5nIHdoYXQgY291cnNlIHRvIHRha2UuIEhlIHRvb2sgdGhlIHNpZGUgb2YgdGhlIG5vYmlsaXR5LCBhbmQgd2FzIGFwcG9pbnRlZCBjb21tYW5kZXIgb2YgYW4gYXJteSBhZ2FpbnN0IExlcGlkdXMsIHdobyBoYWQgYWxyZWFkeSBzdGlycmVkIHVwIGEgbGFyZ2UgcGFydCBvZiBJdGFseSBhbmQgd2FzIGVtcGxveWluZyBCcnV0dXMgdG8gaG9sZCBDaXNhbHBpbmUgR2F1bCB3aXRoIGFuIGFybXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U29vbiBhZnRlciB0aGUgZGVhdGggb2YgU3VsbGEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj43OCBCLkMuPC9ub3RlPiBoaXMgcHJvcGhlY2llcyB3ZXJlIGZ1bGZpbGxlZCwgYW5kIExlcGlkdXMgdHJpZWQgdG8gYXNzdW1lIFN1bGxhJ3MgcG93ZXJzLiBIZSB0b29rIG5vIGNpcmN1aXRvdXMgcm91dGUgYW5kIHVzZWQgbm8gcHJldGVuY2UsIGJ1dCBhcHBlYXJlZCBhdCBvbmNlIGluIGFybXMsIHN0aXJyaW5nIHVwIGFuZXcgYW5kIGdhdGhlcmluZyBhYm91dCBoaW1zZWxmIHRoZSByZW1uYW50cyBvZiBmYWN0aW9uLCBsb25nIGVuZmVlYmxlZCwgd2hpY2ggaGFkIGVzY2FwZWQgdGhlIGhhbmQgb2YgU3VsbGEuIEhpcyBjb2xsZWFndWUsIENhdHVsdXMsIHRvIHdob20gdGhlIGluY29ycnVwdCBhbmQgc291bmRlciBlbGVtZW50IGluIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBhdHRhY2hlZCB0aGVtc2VsdmVzLCB3YXMgdGhlIGdyZWF0ZXN0IFJvbWFuIG9mIHRoZSB0aW1lIGluIHRoZSBlc3RpbWF0ZSBzZXQgdXBvbiBoaXMgd2lzZG9tIGFuZCBqdXN0aWNlLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3YXMgdGhvdWdodCBiZXR0ZXIgYWRhcHRlZCBmb3IgcG9saXRpY2FsIHRoYW4gbWlsaXRhcnkgbGVhZGVyc2hpcC4gVGhlIHNpdHVhdGlvbiBpdHNlbGYsIHRoZXJlZm9yZSBkZW1hbmRlZCBQb21wZXksIHdobyB3YXMgbm90IGxvbmcgaW4gZGVjaWRpbmcgd2hhdCBjb3Vyc2UgdG8gdGFrZS4gSGUgdG9vayB0aGUgc2lkZSBvZiB0aGUgbm9iaWxpdHksIGFuZCB3YXMgYXBwb2ludGVkIGNvbW1hbmRlciBvZiBhbiBhcm15IGFnYWluc3QgTGVwaWR1cywgd2hvIGhhZCBhbHJlYWR5IHN0aXJyZWQgdXAgYSBsYXJnZSBwYXJ0IG9mIEl0YWx5IGFuZCB3YXMgZW1wbG95aW5nIEJydXR1cyB0byBob2xkIENpc2FscGluZSBHYXVsIHdpdGggYW4gYXJteS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T3RoZXIgb3Bwb25lbnRzIGFnYWluc3Qgd2hvbSBQb21wZXkgY2FtZSB3ZXJlIGVhc2lseSBtYXN0ZXJlZCBieSBoaW0sIGJ1dCBhdCBNdXRpbmEsIGluIEdhdWwsIGhlIGxheSBhIGxvbmcgd2hpbGUgYmVzaWVnaW5nIEJydXR1cy4gTWVhbndoaWxlLCBMZXBpZHVzIGhhZCBtYWRlIGEgaGFzdHkgcnVzaCB1cG9uIFJvbWUsIGFuZCBzaXR0aW5nIGRvd24gYmVmb3JlIGl0LCB3YXMgZGVtYW5kaW5nIGEgc2Vjb25kIGNvbnN1bHNoaXAsIGFuZCB0ZXJyaWZ5aW5nIHRoZSBjaXRpemVucyB3aXRoIGEgdmFzdCB0aHJvbmcgb2YgZm9sbG93ZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlaXIgZmVhciB3YXMgZGlzc2lwYXRlZCBieSBhIGxldHRlciBicm91Z2h0IGZyb20gUG9tcGV5LCBhbm5vdW5jaW5nIHRoYXQgaGUgaGFkIGJyb3VnaHQgdGhlIHdhciB0byBhIGNsb3NlIHdpdGhvdXQgYSBiYXR0bGUuIEZvciBCcnV0dXMsIHdoZXRoZXIgaGUgaGltc2VsZiBiZXRyYXllZCBoaXMgYXJteSwgb3Igd2hldGhlciBoaXMgYXJteSBjaGFuZ2VkIHNpZGVzIGFuZCBiZXRyYXllZCBoaW0sIHB1dCBoaW1zZWxmIGluIHRoZSBoYW5kcyBvZiBQb21wZXksIGFuZCByZWNlaXZpbmcgYW4gZXNjb3J0IG9mIGhvcnNlbWVuLCByZXRpcmVkIHRvIGEgbGl0dGxlIHRvd24gdXBvbiB0aGUgUG8uIEhlcmUsIGFmdGVyIGEgc2luZ2xlIGRheSBoYWQgcGFzc2VkLCBoZSB3YXMgc2xhaW4gYnkgR2VtaW5pdXMsIHdobyB3YXMgc2VudCBieSBQb21wZXkgdG8gZG8gdGhlIGRlZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQb21wZXkgd2FzIG11Y2ggYmxhbWVkIGZvciB0aGlzLiBGb3IgYXMgc29vbiBhcyB0aGUgYXJteSBvZiBCcnV0dXMgY2hhbmdlZCBzaWRlcywgaGUgd3JvdGUgdG8gdGhlIHNlbmF0ZSB0aGF0IEJydXR1cyBoYWQgc3VycmVuZGVyZWQgdG8gaGltIG9mIGhpcyBvd24gYWNjb3JkOyB0aGVuIGhlIHNlbnQgYW5vdGhlciBsZXR0ZXIgZGVub3VuY2luZyB0aGUgbWFuIGFmdGVyIGhlIGhhZCBiZWVuIHB1dCB0byBkZWF0aC4gVGhlIEJydXR1cyB3aG8sIHdpdGggQ2Fzc2l1cywga2lsbGVkIENhZXNhciwgd2FzIGEgc29uIG9mIHRoaXMgQnJ1dHVzLCBhIG1hbiB3aG8gd2FzIGxpa2UgaGlzIGZhdGhlciBuZWl0aGVyIGluIGhpcyB3YXJzIG5vciBpbiBoaXMgZGVhdGgsIGFzIGlzIHdyaXR0ZW4gaW4gaGlzIExpZmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBMZXBpZHVzLCBtb3Jlb3ZlciwgYXMgc29vbiBhcyBoZSB3YXMgZXhwZWxsZWQgZnJvbSBJdGFseSwgaGUgbWFkZSBoaXMgd2F5IG92ZXIgdG8gU2FyZGluaWEuIFRoZXJlIGhlIGZlbGwgc2ljayBhbmQgZGllZCBvZiBkZXNwb25kZW5jeSwgd2hpY2ggd2FzIGR1ZSwgYXMgd2UgYXJlIHRvbGQsIG5vdCB0byB0aGUgbG9zcyBvZiBoaXMgY2F1c2UsIGJ1dCB0byBoaXMgY29taW5nIGFjY2lkZW50YWxseSB1cG9uIGEgd3JpdGluZyBmcm9tIHdoaWNoIGhlIGRpc2NvdmVyZWQgdGhhdCBoaXMgd2lmZSB3YXMgYW4gYWR1bHRlcmVzcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk90aGVyIG9wcG9uZW50cyBhZ2FpbnN0IHdob20gUG9tcGV5IGNhbWUgd2VyZSBlYXNpbHkgbWFzdGVyZWQgYnkgaGltLCBidXQgYXQgTXV0aW5hLCBpbiBHYXVsLCBoZSBsYXkgYSBsb25nIHdoaWxlIGJlc2llZ2luZyBCcnV0dXMuIE1lYW53aGlsZSwgTGVwaWR1cyBoYWQgbWFkZSBhIGhhc3R5IHJ1c2ggdXBvbiBSb21lLCBhbmQgc2l0dGluZyBkb3duIGJlZm9yZSBpdCwgd2FzIGRlbWFuZGluZyBhIHNlY29uZCBjb25zdWxzaGlwLCBhbmQgdGVycmlmeWluZyB0aGUgY2l0aXplbnMgd2l0aCBhIHZhc3QgdGhyb25nIG9mIGZvbGxvd2Vycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVpciBmZWFyIHdhcyBkaXNzaXBhdGVkIGJ5IGEgbGV0dGVyIGJyb3VnaHQgZnJvbSBQb21wZXksIGFubm91bmNpbmcgdGhhdCBoZSBoYWQgYnJvdWdodCB0aGUgd2FyIHRvIGEgY2xvc2Ugd2l0aG91dCBhIGJhdHRsZS4gRm9yIEJydXR1cywgd2hldGhlciBoZSBoaW1zZWxmIGJldHJheWVkIGhpcyBhcm15LCBvciB3aGV0aGVyIGhpcyBhcm15IGNoYW5nZWQgc2lkZXMgYW5kIGJldHJheWVkIGhpbSwgcHV0IGhpbXNlbGYgaW4gdGhlIGhhbmRzIG9mIFBvbXBleSwgYW5kIHJlY2VpdmluZyBhbiBlc2NvcnQgb2YgaG9yc2VtZW4sIHJldGlyZWQgdG8gYSBsaXR0bGUgdG93biB1cG9uIHRoZSBQby4gSGVyZSwgYWZ0ZXIgYSBzaW5nbGUgZGF5IGhhZCBwYXNzZWQsIGhlIHdhcyBzbGFpbiBieSBHZW1pbml1cywgd2hvIHdhcyBzZW50IGJ5IFBvbXBleSB0byBkbyB0aGUgZGVlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQb21wZXkgd2FzIG11Y2ggYmxhbWVkIGZvciB0aGlzLiBGb3IgYXMgc29vbiBhcyB0aGUgYXJteSBvZiBCcnV0dXMgY2hhbmdlZCBzaWRlcywgaGUgd3JvdGUgdG8gdGhlIHNlbmF0ZSB0aGF0IEJydXR1cyBoYWQgc3VycmVuZGVyZWQgdG8gaGltIG9mIGhpcyBvd24gYWNjb3JkOyB0aGVuIGhlIHNlbnQgYW5vdGhlciBsZXR0ZXIgZGVub3VuY2luZyB0aGUgbWFuIGFmdGVyIGhlIGhhZCBiZWVuIHB1dCB0byBkZWF0aC4gVGhlIEJydXR1cyB3aG8sIHdpdGggQ2Fzc2l1cywga2lsbGVkIENhZXNhciwgd2FzIGEgc29uIG9mIHRoaXMgQnJ1dHVzLCBhIG1hbiB3aG8gd2FzIGxpa2UgaGlzIGZhdGhlciBuZWl0aGVyIGluIGhpcyB3YXJzIG5vciBpbiBoaXMgZGVhdGgsIGFzIGlzIHdyaXR0ZW4gaW4gaGlzIExpZmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBMZXBpZHVzLCBtb3Jlb3ZlciwgYXMgc29vbiBhcyBoZSB3YXMgZXhwZWxsZWQgZnJvbSBJdGFseSwgaGUgbWFkZSBoaXMgd2F5IG92ZXIgdG8gU2FyZGluaWEuIFRoZXJlIGhlIGZlbGwgc2ljayBhbmQgZGllZCBvZiBkZXNwb25kZW5jeSwgd2hpY2ggd2FzIGR1ZSwgYXMgd2UgYXJlIHRvbGQsIG5vdCB0byB0aGUgbG9zcyBvZiBoaXMgY2F1c2UsIGJ1dCB0byBoaXMgY29taW5nIGFjY2lkZW50YWxseSB1cG9uIGEgd3JpdGluZyBmcm9tIHdoaWNoIGhlIGRpc2NvdmVyZWQgdGhhdCBoaXMgd2lmZSB3YXMgYW4gYWR1bHRlcmVzcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGEgZ2VuZXJhbCBxdWl0ZSB1bmxpa2UgTGVwaWR1cywgbmFtZWx5IFNlcnRvcml1cywgd2FzIGluIHBvc3Nlc3Npb24gb2YgU3BhaW4sIGFuZCB3YXMgdGhyZWF0ZW5pbmcgdGhlIFJvbWFucyBsaWtlIGEgZm9ybWlkYWJsZSBjbG91ZC4gQXMgaWYgZm9yIGEgZmluYWwgZGlzZWFzZSBvZiB0aGUgc3RhdGUsIHRoZSBjaXZpbCB3YXJzIGhhZCBwb3VyZWQgYWxsIHRoZWlyIHZlbm9tIGludG8gdGhpcyBtYW4uIEhlIGhhZCBhbHJlYWR5IHNsYWluIG1hbnkgb2YgdGhlIGluZmVyaW9yIGNvbW1hbmRlcnMsIGFuZCB3YXMgbm93IGVuZ2FnZWQgd2l0aCBNZXRlbGx1cyBQaXVzLCBhbiBpbGx1c3RyaW91cyBtYW4gYW5kIGEgZ29vZCBzb2xkaWVyLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQsIGFzIG1lbiB0aG91Z2h0LCB0b28gc2xvdyBieSByZWFzb24gb2YgaGlzIHllYXJzIGluIGZvbGxvd2luZyB1cCB0aGUgb3Bwb3J0dW5pdGllcyBvZiB3YXIsIGFuZCBvdXRkaXN0YW5jZWQgd2hlbiBldmVudHMgc3dlcHQgYWxvbmcgYXQgaGlnaCBzcGVlZC4gRm9yIFNlcnRvcml1cyBhdHRhY2tlZCBoaW0gcmVja2xlc3NseSBhbmQgaW4gcm9iYmVyIGZhc2hpb24sIGFuZCBieSBoaXMgYW1idXNjYWRlcyBhbmQgZmxhbmtpbmcgbW92ZW1lbnRzIGNvbmZvdW5kZWQgYSBtYW4gd2hvIHdhcyBwcmFjdGlzZWQgaW4gcmVndWxhciBjb250ZXN0cyBvbmx5LCBhbmQgY29tbWFuZGVkIGltbW9iaWxlIGFuZCBoZWF2eS1hcm1lZCB0cm9vcHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU2VydC4gMTIuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TZXJ0b3JpdXM8L3RpdGxlPiwgeGlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgdGhlcmVmb3JlLCB3aG8ga2VwdCBoaXMgYXJteSB1bmRlciBoaXMgY29tbWFuZCwgdHJpZWQgdG8gZ2V0IGhpbXNlbGYgc2VudCBvdXQgdG8gcmVpbmZvcmNlIE1ldGVsbHVzLCBhbmQgYWx0aG91Z2ggQ2F0dWx1cyBvcmRlcmVkIGhpbSB0byBkaXNiYW5kIGhpcyBzb2xkaWVycywgaGUgd291bGQgbm90IGRvIHNvLCBidXQgcmVtYWluZWQgdW5kZXIgYXJtcyBuZWFyIHRoZSBjaXR5LCBldmVyIG1ha2luZyBzb21lIGV4Y3VzZSBvciBvdGhlciwgdW50aWwgdGhlIHNlbmF0ZSBnYXZlIGhpbSB0aGUgY29tbWFuZCwgb24gbW90aW9uIG9mIEx1Y2l1cyBQaGlsaXBwdXMuCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+IE9uIHRoaXMgb2NjYXNpb24sIHRvbywgdGhleSBzYXkgdGhhdCBhIGNlcnRhaW4gc2VuYXRvciBhc2tlZCB3aXRoIGFtYXplbWVudCBpZiBQaGlsaXBwdXMgdGhvdWdodCBpdCBuZWNlc3NhcnkgdG8gc2VuZCBQb21wZXkgb3V0IGFzIHByby1jb25zdWwuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm8gaW5kZWVkITwvcT4gc2FpZCBQaGlsaXBwdXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YnV0IGFzIHByby1jb25zdWxzLDwvcT4gaW1wbHlpbmcgdGhhdCBib3RoIHRoZSBjb25zdWxzIG9mIHRoYXQgeWVhciB3ZXJlIGdvb2QgZm9yIG5vdGhpbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGEgZ2VuZXJhbCBxdWl0ZSB1bmxpa2UgTGVwaWR1cywgbmFtZWx5IFNlcnRvcml1cywgd2FzIGluIHBvc3Nlc3Npb24gb2YgU3BhaW4sIGFuZCB3YXMgdGhyZWF0ZW5pbmcgdGhlIFJvbWFucyBsaWtlIGEgZm9ybWlkYWJsZSBjbG91ZC4gQXMgaWYgZm9yIGEgZmluYWwgZGlzZWFzZSBvZiB0aGUgc3RhdGUsIHRoZSBjaXZpbCB3YXJzIGhhZCBwb3VyZWQgYWxsIHRoZWlyIHZlbm9tIGludG8gdGhpcyBtYW4uIEhlIGhhZCBhbHJlYWR5IHNsYWluIG1hbnkgb2YgdGhlIGluZmVyaW9yIGNvbW1hbmRlcnMsIGFuZCB3YXMgbm93IGVuZ2FnZWQgd2l0aCBNZXRlbGx1cyBQaXVzLCBhbiBpbGx1c3RyaW91cyBtYW4gYW5kIGEgZ29vZCBzb2xkaWVyLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCwgYXMgbWVuIHRob3VnaHQsIHRvbyBzbG93IGJ5IHJlYXNvbiBvZiBoaXMgeWVhcnMgaW4gZm9sbG93aW5nIHVwIHRoZSBvcHBvcnR1bml0aWVzIG9mIHdhciwgYW5kIG91dGRpc3RhbmNlZCB3aGVuIGV2ZW50cyBzd2VwdCBhbG9uZyBhdCBoaWdoIHNwZWVkLiBGb3IgU2VydG9yaXVzIGF0dGFja2VkIGhpbSByZWNrbGVzc2x5IGFuZCBpbiByb2JiZXIgZmFzaGlvbiwgYW5kIGJ5IGhpcyBhbWJ1c2NhZGVzIGFuZCBmbGFua2luZyBtb3ZlbWVudHMgY29uZm91bmRlZCBhIG1hbiB3aG8gd2FzIHByYWN0aXNlZCBpbiByZWd1bGFyIGNvbnRlc3RzIG9ubHksIGFuZCBjb21tYW5kZWQgaW1tb2JpbGUgYW5kIGhlYXZ5LWFybWVkIHRyb29wcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU2VydC4gMTIuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcnRvcml1czwvdGl0bGU+LCB4aWkuIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAxMi41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VydG9yaXVzPC90aXRsZT4sIHhpaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcnRvcml1czwvdGl0bGU+LCB4aWkuIDUuPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgdGhlcmVmb3JlLCB3aG8ga2VwdCBoaXMgYXJteSB1bmRlciBoaXMgY29tbWFuZCwgdHJpZWQgdG8gZ2V0IGhpbXNlbGYgc2VudCBvdXQgdG8gcmVpbmZvcmNlIE1ldGVsbHVzLCBhbmQgYWx0aG91Z2ggQ2F0dWx1cyBvcmRlcmVkIGhpbSB0byBkaXNiYW5kIGhpcyBzb2xkaWVycywgaGUgd291bGQgbm90IGRvIHNvLCBidXQgcmVtYWluZWQgdW5kZXIgYXJtcyBuZWFyIHRoZSBjaXR5LCBldmVyIG1ha2luZyBzb21lIGV4Y3VzZSBvciBvdGhlciwgdW50aWwgdGhlIHNlbmF0ZSBnYXZlIGhpbSB0aGUgY29tbWFuZCwgb24gbW90aW9uIG9mIEx1Y2l1cyBQaGlsaXBwdXMuCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBPbiB0aGlzIG9jY2FzaW9uLCB0b28sIHRoZXkgc2F5IHRoYXQgYSBjZXJ0YWluIHNlbmF0b3IgYXNrZWQgd2l0aCBhbWF6ZW1lbnQgaWYgUGhpbGlwcHVzIHRob3VnaHQgaXQgbmVjZXNzYXJ5IHRvIHNlbmQgUG9tcGV5IG91dCBhcyBwcm8tY29uc3VsLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm8gaW5kZWVkITwvcT4gc2FpZCBQaGlsaXBwdXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5idXQgYXMgcHJvLWNvbnN1bHMsPC9xPiBpbXBseWluZyB0aGF0IGJvdGggdGhlIGNvbnN1bHMgb2YgdGhhdCB5ZWFyIHdlcmUgZ29vZCBmb3Igbm90aGluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBQb21wZXkgYXJyaXZlZCBpbiBTcGFpbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA3NiBCLkMuPC9ub3RlPiB0aGUgcmVwdXRhdGlvbiBvZiBhIG5ldyBjb21tYW5kZXIgcHJvZHVjZWQgdGhlIHVzdWFsIHJlc3VsdHM7IGhlIHRyYW5zZm9ybWVkIHRoZSBtZW4gb2YgTWV0ZWxsdXMgd2l0aCBmcmVzaCBob3BlcywgYW5kIHRob3NlIG5hdGlvbnMgd2hpY2ggd2VyZSBub3QgdmVyeSBmaXJtbHkgbGVhZ3VlZCB3aXRoIFNlcnRvcml1cyBiZWdhbiB0byBiZSByZXN0bGVzcyBhbmQgY2hhbmdlIHNpZGVzLiBUaGVyZXVwb24gU2VydG9yaXVzIGRpc3NlbWluYXRlZCBoYXVnaHR5IHNwZWVjaGVzIGFnYWluc3QgUG9tcGV5LCBhbmQgc2NvZmZpbmdseSBzYWlkIGhlIHNob3VsZCBoYXZlIG5lZWRlZCBidXQgYSBjYW5lIGFuZCB3aGlwIGZvciB0aGlzIGJveSwgd2VyZSBoZSBub3QgaW4gZmVhciBvZiB0aGF0IG9sZCB3b21hbiwgbWVhbmluZyBNZXRlbGx1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAxOS42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlNlcnRvcml1czwvdGl0bGU+LCB4aXguIDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gZmFjdCwgaG93ZXZlciwgaGUga2VwdCB2ZXJ5IGNsb3NlIHdhdGNoIG9uIFBvbXBleSwgYW5kIHdhcyBhZnJhaWQgb2YgaGltLCBhbmQgdGhlcmVmb3JlIGNvbmR1Y3RlZCBoaXMgY2FtcGFpZ24gd2l0aCBtb3JlIGNhdXRpb24uIEZvciBNZXRlbGx1cywgY29udHJhcnkgdG8gYWxsIGV4cGVjdGF0aW9uLCBoYWQgYmVjb21lIGx1eHVyaW91cyBpbiBoaXMgd2F5IG9mIGxpdmluZyBhbmQgaGFkIGdpdmVuIGhpbXNlbGYgdXAgY29tcGxldGVseSB0byBoaXMgcGxlYXN1cmVzOyBpbiBmYWN0LCB0aGVyZSBoYWQgYmVlbiBhbGwgYXQgb25jZSBhIGdyZWF0IGNoYW5jZSBpbiBoaW0gdG93YXJkcyBwb21wIGFuZCBleHRyYXZhZ2FuY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU2VydC4gMTMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TZXJ0b3JpdXM8L3RpdGxlPiwgeGlpLiAxLiBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzbyB0aGF0IHRoaXMgY2lyY3Vtc3RhbmNlIGFsc28gYnJvdWdodCBQb21wZXkgYW4gYXN0b25pc2hpbmcgZ29vZHdpbGwsIGFuZCBlbmhhbmNlZCBoaXMgcmVwdXRhdGlvbiwgc2luY2UgaGUgYWx3YXlzIG1haW50YWluZWQgdGhhdCBzaW1wbGljaXR5IGluIGhpcyBoYWJpdHMgd2hpY2ggY29zdCBoaW0gbm8gZ3JlYXQgZWZmb3J0OyBmb3IgaGUgd2FzIG5hdHVyYWxseSB0ZW1wZXJhdGUgYW5kIG9yZGVybHkgaW4gaGlzIGRlc2lyZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBQb21wZXkgYXJyaXZlZCBpbiBTcGFpbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDc2IEIuQy48L25vdGU+IHRoZSByZXB1dGF0aW9uIG9mIGEgbmV3IGNvbW1hbmRlciBwcm9kdWNlZCB0aGUgdXN1YWwgcmVzdWx0czsgaGUgdHJhbnNmb3JtZWQgdGhlIG1lbiBvZiBNZXRlbGx1cyB3aXRoIGZyZXNoIGhvcGVzLCBhbmQgdGhvc2UgbmF0aW9ucyB3aGljaCB3ZXJlIG5vdCB2ZXJ5IGZpcm1seSBsZWFndWVkIHdpdGggU2VydG9yaXVzIGJlZ2FuIHRvIGJlIHJlc3RsZXNzIGFuZCBjaGFuZ2Ugc2lkZXMuIFRoZXJldXBvbiBTZXJ0b3JpdXMgZGlzc2VtaW5hdGVkIGhhdWdodHkgc3BlZWNoZXMgYWdhaW5zdCBQb21wZXksIGFuZCBzY29mZmluZ2x5IHNhaWQgaGUgc2hvdWxkIGhhdmUgbmVlZGVkIGJ1dCBhIGNhbmUgYW5kIHdoaXAgZm9yIHRoaXMgYm95LCB3ZXJlIGhlIG5vdCBpbiBmZWFyIG9mIHRoYXQgb2xkIHdvbWFuLCBtZWFuaW5nIE1ldGVsbHVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAxOS42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VydG9yaXVzPC90aXRsZT4sIHhpeC4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNlcnQuIDE5LjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXJ0b3JpdXM8L3RpdGxlPiwgeGl4LiA2LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VydG9yaXVzPC90aXRsZT4sIHhpeC4gNi48L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGZhY3QsIGhvd2V2ZXIsIGhlIGtlcHQgdmVyeSBjbG9zZSB3YXRjaCBvbiBQb21wZXksIGFuZCB3YXMgYWZyYWlkIG9mIGhpbSwgYW5kIHRoZXJlZm9yZSBjb25kdWN0ZWQgaGlzIGNhbXBhaWduIHdpdGggbW9yZSBjYXV0aW9uLiBGb3IgTWV0ZWxsdXMsIGNvbnRyYXJ5IHRvIGFsbCBleHBlY3RhdGlvbiwgaGFkIGJlY29tZSBsdXh1cmlvdXMgaW4gaGlzIHdheSBvZiBsaXZpbmcgYW5kIGhhZCBnaXZlbiBoaW1zZWxmIHVwIGNvbXBsZXRlbHkgdG8gaGlzIHBsZWFzdXJlczsgaW4gZmFjdCwgdGhlcmUgaGFkIGJlZW4gYWxsIGF0IG9uY2UgYSBncmVhdCBjaGFuY2UgaW4gaGltIHRvd2FyZHMgcG9tcCBhbmQgZXh0cmF2YWdhbmNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAxMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VydG9yaXVzPC90aXRsZT4sIHhpaS4gMS4gZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gc28gdGhhdCB0aGlzIGNpcmN1bXN0YW5jZSBhbHNvIGJyb3VnaHQgUG9tcGV5IGFuIGFzdG9uaXNoaW5nIGdvb2R3aWxsLCBhbmQgZW5oYW5jZWQgaGlzIHJlcHV0YXRpb24sIHNpbmNlIGhlIGFsd2F5cyBtYWludGFpbmVkIHRoYXQgc2ltcGxpY2l0eSBpbiBoaXMgaGFiaXRzIHdoaWNoIGNvc3QgaGltIG5vIGdyZWF0IGVmZm9ydDsgZm9yIGhlIHdhcyBuYXR1cmFsbHkgdGVtcGVyYXRlIGFuZCBvcmRlcmx5IGluIGhpcyBkZXNpcmVzLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAxMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VydG9yaXVzPC90aXRsZT4sIHhpaS4gMS4gZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcnRvcml1czwvdGl0bGU+LCB4aWkuIDEuIGYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdhciBoYWQgbWFueSBwaGFzZXMsIGJ1dCB3aGF0IG1vc3QgdmV4ZWQgUG9tcGV5IHdhcyB0aGUgY2FwdHVyZSBvZiBMYXVyb24gYnkgU2VydG9yaXVzLiBGb3Igd2hlbiBoZSBzdXBwb3NlZCB0aGF0IGhpcyBlbmVteSB3YXMgc3Vycm91bmRlZCwgYW5kIGhhZCBtYWRlIHNvbWUgYm9hc3RzIGFib3V0IGl0LCBhbGwgb2YgYSBzdWRkZW4gaXQgdHVybmVkIG91dCB0aGF0IGhlIHdhcyBoaW1zZWxmIGNvbXBsZXRlbHkgZW52ZWxvcGVkLiBIZSB3YXMgdGhlcmVmb3JlIGFmcmFpZCB0byBzdGlyLCBhbmQgaGFkIHRvIGxvb2sgb24gd2hpbGUgdGhlIGNpdHkgd2FzIGJ1cm5lZCBiZWZvcmUgaGlzIGV5ZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU2VydC4gMTguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TZXJ0b3JpdXM8L3RpdGxlPiwgY2hhcHRlciB4dmlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gSG93ZXZlciwgbmVhciBWYWxlbnRpYSBoZSBjb25xdWVyZWQgSGVyZW5uaXVzIGFuZCBQZXJwZW5uYSwgbWVuIG9mIG1pbGl0YXJ5IGV4cGVyaWVuY2UgYW1vbmcgdGhlIHJlZnVnZWVzIHdpdGggU2VydG9yaXVzLCBhbmQgZ2VuZXJhbHMgdW5kZXIgaGltLCBhbmQgc2xldyBtb3JlIHRoYW4gdGVuIHRob3VzYW5kIG9mIHRoZWlyIG1lbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3YXIgaGFkIG1hbnkgcGhhc2VzLCBidXQgd2hhdCBtb3N0IHZleGVkIFBvbXBleSB3YXMgdGhlIGNhcHR1cmUgb2YgTGF1cm9uIGJ5IFNlcnRvcml1cy4gRm9yIHdoZW4gaGUgc3VwcG9zZWQgdGhhdCBoaXMgZW5lbXkgd2FzIHN1cnJvdW5kZWQsIGFuZCBoYWQgbWFkZSBzb21lIGJvYXN0cyBhYm91dCBpdCwgYWxsIG9mIGEgc3VkZGVuIGl0IHR1cm5lZCBvdXQgdGhhdCBoZSB3YXMgaGltc2VsZiBjb21wbGV0ZWx5IGVudmVsb3BlZC4gSGUgd2FzIHRoZXJlZm9yZSBhZnJhaWQgdG8gc3RpciwgYW5kIGhhZCB0byBsb29rIG9uIHdoaWxlIHRoZSBjaXR5IHdhcyBidXJuZWQgYmVmb3JlIGhpcyBleWVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAxOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VydG9yaXVzPC90aXRsZT4sIGNoYXB0ZXIgeHZpaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEhvd2V2ZXIsIG5lYXIgVmFsZW50aWEgaGUgY29ucXVlcmVkIEhlcmVubml1cyBhbmQgUGVycGVubmEsIG1lbiBvZiBtaWxpdGFyeSBleHBlcmllbmNlIGFtb25nIHRoZSByZWZ1Z2VlcyB3aXRoIFNlcnRvcml1cywgYW5kIGdlbmVyYWxzIHVuZGVyIGhpbSwgYW5kIHNsZXcgbW9yZSB0aGFuIHRlbiB0aG91c2FuZCBvZiB0aGVpciBtZW4uCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNlcnQuIDE4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXJ0b3JpdXM8L3RpdGxlPiwgY2hhcHRlciB4dmlpaS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcnRvcml1czwvdGl0bGU+LCBjaGFwdGVyIHh2aWlpLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkVsYXRlZCBieSB0aGlzIGFjaGlldmVtZW50IGFuZCBmdWxsIG9mIHByaWRlLCBoZSBtYWRlIGFsbCBoYXN0ZSB0byBhdHRhY2sgU2VydG9yaXVzIGhpbXNlbGYsIHRoYXQgTWV0ZWxsdXMgbWlnaHQgbm90IHNoYXJlIGluIHRoZSB2aWN0b3J5LiBCeSB0aGUgcml2ZXIgU3Vjcm8sIHRob3VnaCBpdCB3YXMgbm93IGxhdGUgaW4gdGhlIGRheSwgdGhleSBqb2luZWQgYmF0dGxlLCBib3RoIGZlYXJpbmcgdGhlIGFycml2YWwgb2YgTWV0ZWxsdXM7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoZSBvbmUgd2lzaGVkIHRvIGZpZ2h0IGFsb25lLCB0aGUgb3RoZXIgd2lzaGVkIHRvIGhhdmUgb25seSBvbmUgYW50YWdvbmlzdC4gV2VsbCwgdGhlbiwgdGhlIHN0cnVnZ2xlIGhhZCBhIGRvdWJ0ZnVsIGlzc3VlLCBmb3Igb25lIHdpbmcgb24gZWFjaCBzaWRlIHdhcyB2aWN0b3Jpb3VzOyBidXQgb2YgdGhlIGdlbmVyYWxzLCBTZXJ0b3JpdXMgYm9yZSBhd2F5IHRoZSBtb3JlIGhvbm91ciwgZm9yIGhlIHB1dCB0byBmbGlnaHQgdGhlIGVuZW15IGluIGZyb250IG9mIGhpcyBwb3NpdGlvbi4gQnV0IFBvbXBleSwgd2hvIHdhcyBvbiBob3JzZWJhY2ssIHdhcyBhdHRhY2tlZCBieSBhIHRhbGwgbWFuIHdobyBmb3VnaHQgb24gZm9vdDsgd2hlbiB0aGV5IGNhbWUgdG8gY2xvc2UgcXVhcnRlcnMgYW5kIHdlcmUgYXQgZ3JpcHMsIHRoZSBzdHJva2VzIG9mIHRoZWlyIHN3b3JkcyBmZWxsIHVwb24gZWFjaCBvdGhlcidzIGhhbmRzLCBidXQgbm90IHdpdGggbGlrZSByZXN1bHQsIGZvciBQb21wZXkgd2FzIG1lcmVseSB3b3VuZGVkLCB3aGVyZWFzIGhlIGxvcHBlZCBvZmYgdGhlIGhhbmQgb2YgaGlzIG9wcG9uZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCB3aGVuIG1vcmUgZm9lcyBydXNoZWQgdXBvbiBoaW0gdG9nZXRoZXIsIGhpcyB0cm9vcHMgYmVpbmcgbm93IHJvdXRlZCwgaGUgbWFkZSBoaXMgZXNjYXBlLCBjb250cmFyeSB0byBhbGwgZXhwZWN0YXRpb24sIGJ5IGFiYW5kb25pbmcgdG8gdGhlIGVuZW15IGhpcyBob3JzZSwgd2hpY2ggaGFkIGdvbGRlbiBoZWFkLWdlYXIgYW5kIG9ybmFtZW50ZWQgdHJhcHBpbmdzIG9mIGdyZWF0IHZhbHVlLiBUaGV5IGZvdWdodCB3aXRoIG9uZSBhbm90aGVyIG92ZXIgdGhlIGRpdmlzaW9uIG9mIHRoZXNlIHNwb2lscywgYW5kIHNvIHdlcmUgbGVmdCBiZWhpbmQgaW4gdGhlIHB1cnN1aXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU2VydC4gMTkuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TZXJ0b3JpdXM8L3RpdGxlPiwgeGl4LiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGJyZWFrIG9mIGRheSwgaG93ZXZlciwgYm90aCBnZW5lcmFscyBkcmV3IHVwIHRoZWlyIGZvcmNlcyBhZ2FpbiB0byBtYWtlIHRoZSB2aWN0b3J5IGFzc3VyZWQsIGJ1dCBvbiB0aGUgYXBwcm9hY2ggb2YgTWV0ZWxsdXMsIFNlcnRvcml1cyByZXRpcmVkIGFuZCBoaXMgYXJteSBkaXNwZXJzZWQuIEhpcyBtZW4gd2VyZSBhY2N1c3RvbWVkIHRvIHNjYXR0ZXIgaW4gdGhpcyB3YXksIGFuZCB0aGVuIHRvIGNvbWUgdG9nZXRoZXIgYWdhaW4sIHNvIHRoYXQgb2Z0ZW4gU2VydG9yaXVzIHdhbmRlcmVkIGFib3V0IGFsb25lLCBhbmQgb2Z0ZW4gdG9vayB0aGUgZmllbGQgYWdhaW4gd2l0aCBhbiBhcm15IG9mIGEgaHVuZHJlZCBhbmQgZmlmdHkgdGhvdXNhbmQgbWVuLCBsaWtlIGEgd2ludGVyIHRvcnJlbnQgc3VkZGVubHkgc3dvbGxlbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RWxhdGVkIGJ5IHRoaXMgYWNoaWV2ZW1lbnQgYW5kIGZ1bGwgb2YgcHJpZGUsIGhlIG1hZGUgYWxsIGhhc3RlIHRvIGF0dGFjayBTZXJ0b3JpdXMgaGltc2VsZiwgdGhhdCBNZXRlbGx1cyBtaWdodCBub3Qgc2hhcmUgaW4gdGhlIHZpY3RvcnkuIEJ5IHRoZSByaXZlciBTdWNybywgdGhvdWdoIGl0IHdhcyBub3cgbGF0ZSBpbiB0aGUgZGF5LCB0aGV5IGpvaW5lZCBiYXR0bGUsIGJvdGggZmVhcmluZyB0aGUgYXJyaXZhbCBvZiBNZXRlbGx1czsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoZSBvbmUgd2lzaGVkIHRvIGZpZ2h0IGFsb25lLCB0aGUgb3RoZXIgd2lzaGVkIHRvIGhhdmUgb25seSBvbmUgYW50YWdvbmlzdC4gV2VsbCwgdGhlbiwgdGhlIHN0cnVnZ2xlIGhhZCBhIGRvdWJ0ZnVsIGlzc3VlLCBmb3Igb25lIHdpbmcgb24gZWFjaCBzaWRlIHdhcyB2aWN0b3Jpb3VzOyBidXQgb2YgdGhlIGdlbmVyYWxzLCBTZXJ0b3JpdXMgYm9yZSBhd2F5IHRoZSBtb3JlIGhvbm91ciwgZm9yIGhlIHB1dCB0byBmbGlnaHQgdGhlIGVuZW15IGluIGZyb250IG9mIGhpcyBwb3NpdGlvbi4gQnV0IFBvbXBleSwgd2hvIHdhcyBvbiBob3JzZWJhY2ssIHdhcyBhdHRhY2tlZCBieSBhIHRhbGwgbWFuIHdobyBmb3VnaHQgb24gZm9vdDsgd2hlbiB0aGV5IGNhbWUgdG8gY2xvc2UgcXVhcnRlcnMgYW5kIHdlcmUgYXQgZ3JpcHMsIHRoZSBzdHJva2VzIG9mIHRoZWlyIHN3b3JkcyBmZWxsIHVwb24gZWFjaCBvdGhlcidzIGhhbmRzLCBidXQgbm90IHdpdGggbGlrZSByZXN1bHQsIGZvciBQb21wZXkgd2FzIG1lcmVseSB3b3VuZGVkLCB3aGVyZWFzIGhlIGxvcHBlZCBvZmYgdGhlIGhhbmQgb2YgaGlzIG9wcG9uZW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoZW4gbW9yZSBmb2VzIHJ1c2hlZCB1cG9uIGhpbSB0b2dldGhlciwgaGlzIHRyb29wcyBiZWluZyBub3cgcm91dGVkLCBoZSBtYWRlIGhpcyBlc2NhcGUsIGNvbnRyYXJ5IHRvIGFsbCBleHBlY3RhdGlvbiwgYnkgYWJhbmRvbmluZyB0byB0aGUgZW5lbXkgaGlzIGhvcnNlLCB3aGljaCBoYWQgZ29sZGVuIGhlYWQtZ2VhciBhbmQgb3JuYW1lbnRlZCB0cmFwcGluZ3Mgb2YgZ3JlYXQgdmFsdWUuIFRoZXkgZm91Z2h0IHdpdGggb25lIGFub3RoZXIgb3ZlciB0aGUgZGl2aXNpb24gb2YgdGhlc2Ugc3BvaWxzLCBhbmQgc28gd2VyZSBsZWZ0IGJlaGluZCBpbiB0aGUgcHVyc3VpdC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU2VydC4gMTkuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcnRvcml1czwvdGl0bGU+LCB4aXguIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAxOS40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VydG9yaXVzPC90aXRsZT4sIHhpeC4gNC48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcnRvcml1czwvdGl0bGU+LCB4aXguIDQuPC90cmFuc2xhdGlvbj4="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGJyZWFrIG9mIGRheSwgaG93ZXZlciwgYm90aCBnZW5lcmFscyBkcmV3IHVwIHRoZWlyIGZvcmNlcyBhZ2FpbiB0byBtYWtlIHRoZSB2aWN0b3J5IGFzc3VyZWQsIGJ1dCBvbiB0aGUgYXBwcm9hY2ggb2YgTWV0ZWxsdXMsIFNlcnRvcml1cyByZXRpcmVkIGFuZCBoaXMgYXJteSBkaXNwZXJzZWQuIEhpcyBtZW4gd2VyZSBhY2N1c3RvbWVkIHRvIHNjYXR0ZXIgaW4gdGhpcyB3YXksIGFuZCB0aGVuIHRvIGNvbWUgdG9nZXRoZXIgYWdhaW4sIHNvIHRoYXQgb2Z0ZW4gU2VydG9yaXVzIHdhbmRlcmVkIGFib3V0IGFsb25lLCBhbmQgb2Z0ZW4gdG9vayB0aGUgZmllbGQgYWdhaW4gd2l0aCBhbiBhcm15IG9mIGEgaHVuZHJlZCBhbmQgZmlmdHkgdGhvdXNhbmQgbWVuLCBsaWtlIGEgd2ludGVyIHRvcnJlbnQgc3VkZGVubHkgc3dvbGxlbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5LCB0aGVuLCB3aGVuIGhlIHdlbnQgdG8gbWVldCBNZXRlbGx1cyBhZnRlciB0aGUgYmF0dGxlIGFuZCB0aGV5IHdlcmUgbmVhciBlYWNoIG90aGVyLCBvcmRlcmVkIGhpcyBsaWN0b3JzIHRvIGxvd2VyIHRoZWlyIGZhc2Nlcywgb3V0IG9mIGRlZmVyZW5jZSB0byBNZXRlbGx1cyBhcyBoaXMgc3VwZXJpb3IgaW4gcmFuay4gQnV0IE1ldGVsbHVzIHdvdWxkIG5vdCBhbGxvdyB0aGlzLCBhbmQgaW4gYWxsIG90aGVyIHdheXMgd2FzIGNvbnNpZGVyYXRlIG9mIGhpbSwgbm90IGFzc3VtaW5nIGFueSBzdXBlcmlvcml0eSBhcyBhIG1hbiBvZiBjb25zdWxhciByYW5rIGFuZCB0aGUgZWxkZXIsIGV4Y2VwdCB0aGF0IHdoZW4gdGhleSBzaGFyZWQgdGhlIHNhbWUgY2FtcCB0aGUgd2F0Y2h3b3JkIHdhcyBnaXZlbiBvdXQgdG8gYWxsIGZyb20gdGhlIHRlbnQgb2YgTWV0ZWxsdXM7IGJ1dCBmb3IgdGhlIG1vc3QgcGFydCB0aGV5IGVuY2FtcGVkIGFwYXJ0LiBGb3IgdGhlaXIgdmVyc2F0aWxlIGVuZW15IHVzZWQgdG8gY3V0IG9mZiB0aGVpciBjb21tdW5pY2F0aW9ucyBhbmQgc2VwYXJhdGUgdGhlbSwgYW5kIHNob3dlZCBncmVhdCBza2lsbCBpbiBhcHBlYXJpbmcgaW4gbWFueSBwbGFjZXMgd2l0aGluIGEgc2hvcnQgdGltZSwgYW5kIGluIGRyYXdpbmcgdGhlbSBmcm9tIG9uZSBjb250ZXN0IGludG8gYW5vdGhlci4gQW5kIGZpbmFsbHksIGJ5IGN1dHRpbmcgb2ZmIHRoZWlyIHN1cHBsaWVzLCBwbHVuZGVyaW5nIHRoZSBjb3VudHJ5LCBhbmQgZ2V0dGluZyBjb250cm9sIG9mIHRoZSBzZWEsIGhlIGRyb3ZlIGJvdGggb2YgdGhlbSBvdXQgb2YgdGhhdCBwYXJ0IG9mIFNwYWluIHdoaWNoIHdhcyB1bmRlciBoaW0sIGFuZCBmb3JjZWQgdGhlbSB0byB0YWtlIHJlZnVnZSBpbiBvdGhlciBwcm92aW5jZXMgZm9yIGxhY2sgb2YgcHJvdmlzaW9ucy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAyMS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlNlcnRvcml1czwvdGl0bGU+LCBjaGFwdGVyIHh4aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgdGhlbiwgd2hlbiBoZSB3ZW50IHRvIG1lZXQgTWV0ZWxsdXMgYWZ0ZXIgdGhlIGJhdHRsZSBhbmQgdGhleSB3ZXJlIG5lYXIgZWFjaCBvdGhlciwgb3JkZXJlZCBoaXMgbGljdG9ycyB0byBsb3dlciB0aGVpciBmYXNjZXMsIG91dCBvZiBkZWZlcmVuY2UgdG8gTWV0ZWxsdXMgYXMgaGlzIHN1cGVyaW9yIGluIHJhbmsuIEJ1dCBNZXRlbGx1cyB3b3VsZCBub3QgYWxsb3cgdGhpcywgYW5kIGluIGFsbCBvdGhlciB3YXlzIHdhcyBjb25zaWRlcmF0ZSBvZiBoaW0sIG5vdCBhc3N1bWluZyBhbnkgc3VwZXJpb3JpdHkgYXMgYSBtYW4gb2YgY29uc3VsYXIgcmFuayBhbmQgdGhlIGVsZGVyLCBleGNlcHQgdGhhdCB3aGVuIHRoZXkgc2hhcmVkIHRoZSBzYW1lIGNhbXAgdGhlIHdhdGNod29yZCB3YXMgZ2l2ZW4gb3V0IHRvIGFsbCBmcm9tIHRoZSB0ZW50IG9mIE1ldGVsbHVzOyBidXQgZm9yIHRoZSBtb3N0IHBhcnQgdGhleSBlbmNhbXBlZCBhcGFydC4gRm9yIHRoZWlyIHZlcnNhdGlsZSBlbmVteSB1c2VkIHRvIGN1dCBvZmYgdGhlaXIgY29tbXVuaWNhdGlvbnMgYW5kIHNlcGFyYXRlIHRoZW0sIGFuZCBzaG93ZWQgZ3JlYXQgc2tpbGwgaW4gYXBwZWFyaW5nIGluIG1hbnkgcGxhY2VzIHdpdGhpbiBhIHNob3J0IHRpbWUsIGFuZCBpbiBkcmF3aW5nIHRoZW0gZnJvbSBvbmUgY29udGVzdCBpbnRvIGFub3RoZXIuIEFuZCBmaW5hbGx5LCBieSBjdXR0aW5nIG9mZiB0aGVpciBzdXBwbGllcywgcGx1bmRlcmluZyB0aGUgY291bnRyeSwgYW5kIGdldHRpbmcgY29udHJvbCBvZiB0aGUgc2VhLCBoZSBkcm92ZSBib3RoIG9mIHRoZW0gb3V0IG9mIHRoYXQgcGFydCBvZiBTcGFpbiB3aGljaCB3YXMgdW5kZXIgaGltLCBhbmQgZm9yY2VkIHRoZW0gdG8gdGFrZSByZWZ1Z2UgaW4gb3RoZXIgcHJvdmluY2VzIGZvciBsYWNrIG9mIHByb3Zpc2lvbnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNlcnQuIDIxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXJ0b3JpdXM8L3RpdGxlPiwgY2hhcHRlciB4eGkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNlcnQuIDIxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXJ0b3JpdXM8L3RpdGxlPiwgY2hhcHRlciB4eGkuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXJ0b3JpdXM8L3RpdGxlPiwgY2hhcHRlciB4eGkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBQb21wZXkgaGFkIGV4aGF1c3RlZCBtb3N0IG9mIGhpcyBwcml2YXRlIHJlc291cmNlcyBhbmQgc3BlbnQgdGhlbSBvbiB0aGUgd2FyLCBoZSBhc2tlZCBtb25leSBvZiB0aGUgc2VuYXRlLCB0aHJlYXRlbmluZyB0byBjb21lIGJhY2sgdG8gSXRhbHkgd2l0aCBoaXMgYXJteSBpZiB0aGV5IGRpZCBub3Qgc2VuZCBpdC4gTHVjdWxsdXMgd2FzIGNvbnN1bCBhdCB0aGlzIHRpbWUsIGFuZCB3YXMgbm90IG9uIGdvb2QgdGVybXMgd2l0aCBQb21wZXksIGJ1dCBzaW5jZSBoZSB3YXMgc29saWNpdGluZyB0aGUgY29uZHVjdCBvZiB0aGUgTWl0aHJpZGF0aWMgd2FyIGZvciBoaW1zZWxmLCBtYWRlIGdyZWF0IGVmZm9ydHMgdG8gaGF2ZSB0aGUgbW9uZXkgc2VudCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDUuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MdWN1bGx1czwvdGl0bGU+LCB2LiAyLiBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBmb3IgZmVhciBvZiBmdXJ0aGVyaW5nIFBvbXBleSdzIGRlc2lyZSB0byBsZXQgU2VydG9yaXVzIGdvLCBhbmQgbWFyY2ggYWdhaW5zdCBNaXRocmlkYXRlcywgYW4gYW50YWdvbmlzdCB3aG9zZSBzdWJqZWN0aW9uLCBhcyBpdCB3YXMgdGhvdWdodCwgd291bGQgYnJpbmcgZ3JlYXQgZ2xvcnkgYW5kIGludm9sdmUgbGl0dGxlIGRpZmZpY3VsdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgbWVhbnRpbWUgU2VydG9yaXVzIHdhcyB0cmVhY2hlcm91c2x5IGtpbGxlZCBieSBoaXMgZnJpZW5kcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA3MiBCLkMuLCB0d28geWVhcnMgYWZ0ZXIgTHVjdWxsdXMgaGFkIHNldCBvdXQgYWdhaW5zdCBNaXRocmlkYXRlcy48L25vdGU+IGFuZCBQZXJwZW5uYSwgdGhlIHJpbmdsZWFkZXIgYW1vbmcgdGhlbSwgYXR0ZW1wdGVkIHRvIGNhcnJ5IG9uIGhpcyB3b3JrLiBIZSBoYWQgaW5kZWVkIHRoZSBzYW1lIGZvcmNlcyBhbmQgZXF1aXBtZW50LCBidXQgbGFja2VkIGVxdWFsIGp1ZGdlbWVudCBpbiB0aGUgdXNlIG9mIHRoZW0uIEFjY29yZGluZ2x5LCBQb21wZXkgdG9vayB0aGUgZmllbGQgYWdhaW5zdCBoaW0gYXQgb25jZSwgYW5kIHBlcmNlaXZpbmcgdGhhdCBoZSBoYWQgbm8gZml4ZWQgcGxhbiBvZiBjYW1wYWlnbiwgc2VudCBvdXQgdGVuIGNvaG9ydHMgYXMgYSBkZWNveSBmb3IgaGltLCBnaXZpbmcgdGhlbSBvcmRlcnMgdG8gc2NhdHRlciBhdCByYW5kb20gb3ZlciB0aGUgcGxhaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBlcnBlbm5hIGF0dGFja2VkIHRoZXNlIGNvaG9ydHMsIGFuZCB3YXMgZW5nYWdlZCBpbiB0aGVpciBwdXJzdWl0LCB3aGVuIFBvbXBleSBhcHBlYXJlZCBpbiBmb3JjZSwgam9pbmVkIGJhdHRsZSwgYW5kIHdvbiBhIGNvbXBsZXRlIHZpY3RvcnkuIE1vc3Qgb2YgUGVycGVubmEncyBvZmZpY2VycyBwZXJpc2hlZCBpbiB0aGUgYmF0dGxlLCBidXQgUGVycGVubmEgaGltc2VsZiB3YXMgYnJvdWdodCBiZWZvcmUgUG9tcGV5LCB3aG8gb3JkZXJlZCBoaW0gdG8gYmUgcHV0IHRvIGRlYXRoLiBJbiB0aGlzIGhlIGRpZCBub3Qgc2hvdyBpbmdyYXRpdHVkZSwgbm9yIHRoYXQgaGUgd2FzIHVubWluZGZ1bCBvZiB3aGF0IGhhZCBoYXBwZW5lZCBpbiBTaWNpbHksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAxMC4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHguIDI8L2JpYmw+LCB3aGVyZSB0aGVyZSBpcyBub3RoaW5nIHRvIGltcGx5IHRoYXQgUGVycGVubmEgcHV0IFBvbXBleSB1bmRlciBhbnkgb2JsaWdhdGlvbnMgdG8gaGltLCBleGNlcHQgdGhhdCBoZSBtYWRlIG5vIHJlc2lzdGFuY2UuPC9ub3RlPiBhcyBzb21lIGFsbGVnZSBhZ2FpbnN0IGhpbSwgYnV0IGV4ZXJjaXNlZCBncmVhdCBmb3JldGhvdWdodCBhbmQgc2FsdXRhcnkganVkZ2VtZW50IGZvciB0aGUgY29tbW9ud2VhbHRoLiBGb3IgUGVycGVubmEsIHdobyBoYWQgY29tZSBpbnRvIHBvc3Nlc3Npb24gb2YgdGhlIHBhcGVycyBvZiBTZXJ0b3JpdXMsIG9mZmVyZWQgdG8gcHJvZHVjZSBsZXR0ZXJzIGZyb20gdGhlIGNoaWVmIG1lbiBhdCBSb21lLCB3aG8gaGFkIGRlc2lyZWQgdG8gc3VidmVydCB0aGUgZXhpc3Rpbmcgb3JkZXIgYW5kIGNoYW5nZSB0aGUgZm9ybSBvZiBnb3Zlcm5tZW50LCBhbmQgaGFkIHRoZXJlZm9yZSBpbnZpdGVkIFNlcnRvcml1cyBpbnRvIEl0YWx5LiBQb21wZXksIHRoZXJlZm9yZSwgZmVhcmluZyB0aGF0IHRoaXMgbWlnaHQgc3RpciB1cCBncmVhdGVyIHdhcnMgdGhhbiB0aG9zZSBub3cgZW5kZWQsIHB1dCBQZXJwZW5uYSB0byBkZWF0aCBhbmQgYnVybmVkIHRoZSBsZXR0ZXJzIHdpdGhvdXQgZXZlbiByZWFkaW5nIHRoZW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBQb21wZXkgaGFkIGV4aGF1c3RlZCBtb3N0IG9mIGhpcyBwcml2YXRlIHJlc291cmNlcyBhbmQgc3BlbnQgdGhlbSBvbiB0aGUgd2FyLCBoZSBhc2tlZCBtb25leSBvZiB0aGUgc2VuYXRlLCB0aHJlYXRlbmluZyB0byBjb21lIGJhY2sgdG8gSXRhbHkgd2l0aCBoaXMgYXJteSBpZiB0aGV5IGRpZCBub3Qgc2VuZCBpdC4gTHVjdWxsdXMgd2FzIGNvbnN1bCBhdCB0aGlzIHRpbWUsIGFuZCB3YXMgbm90IG9uIGdvb2QgdGVybXMgd2l0aCBQb21wZXksIGJ1dCBzaW5jZSBoZSB3YXMgc29saWNpdGluZyB0aGUgY29uZHVjdCBvZiB0aGUgTWl0aHJpZGF0aWMgd2FyIGZvciBoaW1zZWxmLCBtYWRlIGdyZWF0IGVmZm9ydHMgdG8gaGF2ZSB0aGUgbW9uZXkgc2VudCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHVjLiA1LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1czwvdGl0bGU+LCB2LiAyLiBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBmb3IgZmVhciBvZiBmdXJ0aGVyaW5nIFBvbXBleSdzIGRlc2lyZSB0byBsZXQgU2VydG9yaXVzIGdvLCBhbmQgbWFyY2ggYWdhaW5zdCBNaXRocmlkYXRlcywgYW4gYW50YWdvbmlzdCB3aG9zZSBzdWJqZWN0aW9uLCBhcyBpdCB3YXMgdGhvdWdodCwgd291bGQgYnJpbmcgZ3JlYXQgZ2xvcnkgYW5kIGludm9sdmUgbGl0dGxlIGRpZmZpY3VsdHkuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHVjLiA1LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1czwvdGl0bGU+LCB2LiAyLiBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgdi4gMi4gZi48L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgbWVhbnRpbWUgU2VydG9yaXVzIHdhcyB0cmVhY2hlcm91c2x5IGtpbGxlZCBieSBoaXMgZnJpZW5kcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDcyIEIuQy4sIHR3byB5ZWFycyBhZnRlciBMdWN1bGx1cyBoYWQgc2V0IG91dCBhZ2FpbnN0IE1pdGhyaWRhdGVzLjwvbm90ZT4gYW5kIFBlcnBlbm5hLCB0aGUgcmluZ2xlYWRlciBhbW9uZyB0aGVtLCBhdHRlbXB0ZWQgdG8gY2Fycnkgb24gaGlzIHdvcmsuIEhlIGhhZCBpbmRlZWQgdGhlIHNhbWUgZm9yY2VzIGFuZCBlcXVpcG1lbnQsIGJ1dCBsYWNrZWQgZXF1YWwganVkZ2VtZW50IGluIHRoZSB1c2Ugb2YgdGhlbS4gQWNjb3JkaW5nbHksIFBvbXBleSB0b29rIHRoZSBmaWVsZCBhZ2FpbnN0IGhpbSBhdCBvbmNlLCBhbmQgcGVyY2VpdmluZyB0aGF0IGhlIGhhZCBubyBmaXhlZCBwbGFuIG9mIGNhbXBhaWduLCBzZW50IG91dCB0ZW4gY29ob3J0cyBhcyBhIGRlY295IGZvciBoaW0sIGdpdmluZyB0aGVtIG9yZGVycyB0byBzY2F0dGVyIGF0IHJhbmRvbSBvdmVyIHRoZSBwbGFpbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBlcnBlbm5hIGF0dGFja2VkIHRoZXNlIGNvaG9ydHMsIGFuZCB3YXMgZW5nYWdlZCBpbiB0aGVpciBwdXJzdWl0LCB3aGVuIFBvbXBleSBhcHBlYXJlZCBpbiBmb3JjZSwgam9pbmVkIGJhdHRsZSwgYW5kIHdvbiBhIGNvbXBsZXRlIHZpY3RvcnkuIE1vc3Qgb2YgUGVycGVubmEncyBvZmZpY2VycyBwZXJpc2hlZCBpbiB0aGUgYmF0dGxlLCBidXQgUGVycGVubmEgaGltc2VsZiB3YXMgYnJvdWdodCBiZWZvcmUgUG9tcGV5LCB3aG8gb3JkZXJlZCBoaW0gdG8gYmUgcHV0IHRvIGRlYXRoLiBJbiB0aGlzIGhlIGRpZCBub3Qgc2hvdyBpbmdyYXRpdHVkZSwgbm9yIHRoYXQgaGUgd2FzIHVubWluZGZ1bCBvZiB3aGF0IGhhZCBoYXBwZW5lZCBpbiBTaWNpbHksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTAuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4LiAyPC9iaWJsPiwgd2hlcmUgdGhlcmUgaXMgbm90aGluZyB0byBpbXBseSB0aGF0IFBlcnBlbm5hIHB1dCBQb21wZXkgdW5kZXIgYW55IG9ibGlnYXRpb25zIHRvIGhpbSwgZXhjZXB0IHRoYXQgaGUgbWFkZSBubyByZXNpc3RhbmNlLjwvbm90ZT4gYXMgc29tZSBhbGxlZ2UgYWdhaW5zdCBoaW0sIGJ1dCBleGVyY2lzZWQgZ3JlYXQgZm9yZXRob3VnaHQgYW5kIHNhbHV0YXJ5IGp1ZGdlbWVudCBmb3IgdGhlIGNvbW1vbndlYWx0aC4gRm9yIFBlcnBlbm5hLCB3aG8gaGFkIGNvbWUgaW50byBwb3NzZXNzaW9uIG9mIHRoZSBwYXBlcnMgb2YgU2VydG9yaXVzLCBvZmZlcmVkIHRvIHByb2R1Y2UgbGV0dGVycyBmcm9tIHRoZSBjaGllZiBtZW4gYXQgUm9tZSwgd2hvIGhhZCBkZXNpcmVkIHRvIHN1YnZlcnQgdGhlIGV4aXN0aW5nIG9yZGVyIGFuZCBjaGFuZ2UgdGhlIGZvcm0gb2YgZ292ZXJubWVudCwgYW5kIGhhZCB0aGVyZWZvcmUgaW52aXRlZCBTZXJ0b3JpdXMgaW50byBJdGFseS4gUG9tcGV5LCB0aGVyZWZvcmUsIGZlYXJpbmcgdGhhdCB0aGlzIG1pZ2h0IHN0aXIgdXAgZ3JlYXRlciB3YXJzIHRoYW4gdGhvc2Ugbm93IGVuZGVkLCBwdXQgUGVycGVubmEgdG8gZGVhdGggYW5kIGJ1cm5lZCB0aGUgbGV0dGVycyB3aXRob3V0IGV2ZW4gcmVhZGluZyB0aGVtLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAxMC4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHguIDI8L2JpYmw+LCB3aGVyZSB0aGVyZSBpcyBub3RoaW5nIHRvIGltcGx5IHRoYXQgUGVycGVubmEgcHV0IFBvbXBleSB1bmRlciBhbnkgb2JsaWdhdGlvbnMgdG8gaGltLCBleGNlcHQgdGhhdCBoZSBtYWRlIG5vIHJlc2lzdGFuY2UuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgcmVtYWluZWQgaW4gU3BhaW4gbG9uZyBlbm91Z2ggdG8gcXVlbGwgdGhlIGdyZWF0ZXN0IGRpc29yZGVycyBhbmQgY29tcG9zZSBhbmQgc2V0dGxlIHN1Y2ggYWZmYWlycyBhcyB3ZXJlIGluIHRoZSBtb3N0IGluZmxhbW1hdG9yeSBzdGF0ZTsgdGhlbiBoZSBsZWQgaGlzIGFybXkgYmFjayB0byBJdGFseSwgd2hlcmUsIGFzIGNoYW5jZSB3b3VsZCBoYXZlIGl0LCBoZSBmb3VuZCB0aGUgc2VydmlsZSB3YXIgYXQgaXRzIGhlaWdodC4gRm9yIHRoaXMgcmVhc29uLCB0b28sIENyYXNzdXMsIHdobyBoYWQgdGhlIGNvbW1hbmQgaW4gdGhhdCB3YXIsIHByZWNpcGl0YXRlZCB0aGUgYmF0dGxlIGF0IGdyZWF0IGhhemFyZCwgYW5kIHdhcyBzdWNjZXNzZnVsLCBraWxsaW5nIHR3ZWx2ZSB0aG91c2FuZCB0aHJlZSBodW5kcmVkIG9mIHRoZSBlbmVteS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+RXZlbiBpbiB0aGlzIHN1Y2Nlc3MsIGhvd2V2ZXIsIGZvcnR1bmUgc29tZWhvdyBvciBvdGhlciBpbmNsdWRlZCBQb21wZXksIHNpbmNlIGZpdmUgdGhvdXNhbmQgZnVnaXRpdmVzIGZyb20gdGhlIGJhdHRsZSBmZWxsIGluIGhpcyB3YXksIGFsbCBvZiB3aG9tIGhlIHNsZXcsIGFuZCB0aGVuIHN0b2xlIGEgbWFyY2ggb24gQ3Jhc3N1cyBieSB3cml0aW5nIHRvIHRoZSBzZW5hdGUgdGhhdCBDcmFzc3VzIGhhZCBjb25xdWVyZWQgdGhlIGdsYWRpYXRvcnMgaW4gYSBwaXRjaGVkIGJhdHRsZSwgYnV0IHRoYXQgaGUgaGltc2VsZiBoYWQgZXh0aXJwYXRlZCB0aGUgd2FyIGVudGlyZWx5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAxMS43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNyYXNzdXM8L3RpdGxlPiwgeGkuIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFuZCBpdCB3YXMgYWdyZWVhYmxlIHRvIHRoZSBSb21hbnMgdG8gaGVhciB0aGlzIHNhaWQgYW5kIHRvIHJlcGVhdCBpdCwgc28ga2luZGx5IGRpZCB0aGV5IGZlZWwgdG93YXJkcyBoaW07IHdoaWxlIGFzIGZvciBTcGFpbiBhbmQgU2VydG9yaXVzLCB0aGVyZSB3YXMgbm8gb25lIHdobyB3b3VsZCBoYXZlIHNhaWQsIGV2ZW4gaW4gamVzdCwgdGhhdCB0aGUgZW50aXJlIHdvcmsgb2YgdGhlaXIgc3VianVnYXRpb24gd2FzIHBlcmZvcm1lZCBieSBhbnkgb25lIGVsc2UgdGhhbiBQb21wZXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgcmVtYWluZWQgaW4gU3BhaW4gbG9uZyBlbm91Z2ggdG8gcXVlbGwgdGhlIGdyZWF0ZXN0IGRpc29yZGVycyBhbmQgY29tcG9zZSBhbmQgc2V0dGxlIHN1Y2ggYWZmYWlycyBhcyB3ZXJlIGluIHRoZSBtb3N0IGluZmxhbW1hdG9yeSBzdGF0ZTsgdGhlbiBoZSBsZWQgaGlzIGFybXkgYmFjayB0byBJdGFseSwgd2hlcmUsIGFzIGNoYW5jZSB3b3VsZCBoYXZlIGl0LCBoZSBmb3VuZCB0aGUgc2VydmlsZSB3YXIgYXQgaXRzIGhlaWdodC4gRm9yIHRoaXMgcmVhc29uLCB0b28sIENyYXNzdXMsIHdobyBoYWQgdGhlIGNvbW1hbmQgaW4gdGhhdCB3YXIsIHByZWNpcGl0YXRlZCB0aGUgYmF0dGxlIGF0IGdyZWF0IGhhemFyZCwgYW5kIHdhcyBzdWNjZXNzZnVsLCBraWxsaW5nIHR3ZWx2ZSB0aG91c2FuZCB0aHJlZSBodW5kcmVkIG9mIHRoZSBlbmVteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkV2ZW4gaW4gdGhpcyBzdWNjZXNzLCBob3dldmVyLCBmb3J0dW5lIHNvbWVob3cgb3Igb3RoZXIgaW5jbHVkZWQgUG9tcGV5LCBzaW5jZSBmaXZlIHRob3VzYW5kIGZ1Z2l0aXZlcyBmcm9tIHRoZSBiYXR0bGUgZmVsbCBpbiBoaXMgd2F5LCBhbGwgb2Ygd2hvbSBoZSBzbGV3LCBhbmQgdGhlbiBzdG9sZSBhIG1hcmNoIG9uIENyYXNzdXMgYnkgd3JpdGluZyB0byB0aGUgc2VuYXRlIHRoYXQgQ3Jhc3N1cyBoYWQgY29ucXVlcmVkIHRoZSBnbGFkaWF0b3JzIGluIGEgcGl0Y2hlZCBiYXR0bGUsIGJ1dCB0aGF0IGhlIGhpbXNlbGYgaGFkIGV4dGlycGF0ZWQgdGhlIHdhciBlbnRpcmVseS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDExLjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIHhpLiA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBbmQgaXQgd2FzIGFncmVlYWJsZSB0byB0aGUgUm9tYW5zIHRvIGhlYXIgdGhpcyBzYWlkIGFuZCB0byByZXBlYXQgaXQsIHNvIGtpbmRseSBkaWQgdGhleSBmZWVsIHRvd2FyZHMgaGltOyB3aGlsZSBhcyBmb3IgU3BhaW4gYW5kIFNlcnRvcml1cywgdGhlcmUgd2FzIG5vIG9uZSB3aG8gd291bGQgaGF2ZSBzYWlkLCBldmVuIGluIGplc3QsIHRoYXQgdGhlIGVudGlyZSB3b3JrIG9mIHRoZWlyIHN1Ymp1Z2F0aW9uIHdhcyBwZXJmb3JtZWQgYnkgYW55IG9uZSBlbHNlIHRoYW4gUG9tcGV5LgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDcmFzcy4gMTEuNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgeGkuIDcuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIHhpLiA3LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgbWluZ2xlZCB3aXRoIHRoZSBncmVhdCBob25vdXIgc2hvd24gdGhlIG1hbiBhbmQgdGhlIGdyZWF0IGV4cGVjdGF0aW9ucyBjaGVyaXNoZWQgb2YgaGltLCB0aGVyZSB3YXMgYWxzbyBjb25zaWRlcmFibGUgc3VzcGljaW9uIGFuZCBmZWFyOyBtZW4gc2FpZCBoZSB3b3VsZCBub3QgZGlzYmFuZCBoaXMgYXJteSwgYnV0IHdvdWxkIG1ha2UgaGlzIHdheSBieSBmb3JjZSBvZiBhcm1zIGFuZCBhYnNvbHV0ZSBwb3dlciBzdHJhaWdodCB0byB0aGUgcG9saXR5IG9mIFN1bGxhLiBXaGVyZWZvcmUgdGhvc2Ugd2hvIHJhbiBvdXQgYW5kIGdyZWV0ZWQgaGltIG9uIGhpcyB3YXksIG91dCBvZiB0aGVpciBnb29kd2lsbCwgd2VyZSBubyBtb3JlIG51bWVyb3VzIHRoYW4gdGhvc2Ugd2hvIGRpZCBpdCBvdXQgb2YgZmVhci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFBvbXBleSBzb29uIHJlbW92ZWQgdGhpcyBzdXNwaWNpb24gYWxzbyBieSBkZWNsYXJpbmcgdGhhdCBoZSB3b3VsZCBkaXNiYW5kIGhpcyBhcm15IGFmdGVyIGhpcyB0cml1bXBoLiBUaGVuIHRoZXJlIHJlbWFpbmVkIGJ1dCBvbmUgYWNjdXNhdGlvbiBmb3IgZW52aW91cyB0b25ndWVzIHRvIG1ha2UsIG5hbWVseSwgdGhhdCBoZSBkZXZvdGVkIGhpbXNlbGYgbW9yZSB0byB0aGUgcGVvcGxlIHRoYW4gdG8gdGhlIHNlbmF0ZSwgYW5kIGhhZCBkZXRlcm1pbmVkIHRvIHJlc3RvcmUgdGhlIGF1dGhvcml0eSBvZiB0aGUgdHJpYnVuYXRlLCB3aGljaCBTdWxsYSBoYWQgb3ZlcnRocm93biwgYW5kIHRvIGNvdXJ0IHRoZSBmYXZvdXIgb2YgdGhlIG1hbnk7IHdoaWNoIHdhcyB0cnVlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlcmUgd2FzIG5vdGhpbmcgb24gd2hpY2ggdGhlIFJvbWFuIHBlb3BsZSBoYWQgbW9yZSBmcmFudGljYWxseSBzZXQgdGhlaXIgYWZmZWN0aW9ucywgb3IgZm9yIHdoaWNoIHRoZXkgaGFkIGEgZ3JlYXRlciB5ZWFybmluZywgdGhhbiB0byBiZWhvbGQgdGhhdCBvZmZpY2UgYWdhaW4uIFBvbXBleSB0aGVyZWZvcmUgcmVnYXJkZWQgaXQgYXMgYSBncmVhdCBnb29kIGZvcnR1bmUgdGhhdCBoZSBoYWQgdGhlIG9wcG9ydHVuaXR5IGZvciB0aGlzIHBvbGl0aWNhbCBtZWFzdXJlLCBzaW5jZSBoZSBjb3VsZCBoYXZlIGZvdW5kIG5vIG90aGVyIGZhdm91ciB3aXRoIHdoaWNoIHRvIHJlcGF5IHRoZSBnb29kd2lsbCBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLCBpZiBhbm90aGVyIGhhZCBhbnRpY2lwYXRlZCBoaW0gaW4gdGhpcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgbWluZ2xlZCB3aXRoIHRoZSBncmVhdCBob25vdXIgc2hvd24gdGhlIG1hbiBhbmQgdGhlIGdyZWF0IGV4cGVjdGF0aW9ucyBjaGVyaXNoZWQgb2YgaGltLCB0aGVyZSB3YXMgYWxzbyBjb25zaWRlcmFibGUgc3VzcGljaW9uIGFuZCBmZWFyOyBtZW4gc2FpZCBoZSB3b3VsZCBub3QgZGlzYmFuZCBoaXMgYXJteSwgYnV0IHdvdWxkIG1ha2UgaGlzIHdheSBieSBmb3JjZSBvZiBhcm1zIGFuZCBhYnNvbHV0ZSBwb3dlciBzdHJhaWdodCB0byB0aGUgcG9saXR5IG9mIFN1bGxhLiBXaGVyZWZvcmUgdGhvc2Ugd2hvIHJhbiBvdXQgYW5kIGdyZWV0ZWQgaGltIG9uIGhpcyB3YXksIG91dCBvZiB0aGVpciBnb29kd2lsbCwgd2VyZSBubyBtb3JlIG51bWVyb3VzIHRoYW4gdGhvc2Ugd2hvIGRpZCBpdCBvdXQgb2YgZmVhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQb21wZXkgc29vbiByZW1vdmVkIHRoaXMgc3VzcGljaW9uIGFsc28gYnkgZGVjbGFyaW5nIHRoYXQgaGUgd291bGQgZGlzYmFuZCBoaXMgYXJteSBhZnRlciBoaXMgdHJpdW1waC4gVGhlbiB0aGVyZSByZW1haW5lZCBidXQgb25lIGFjY3VzYXRpb24gZm9yIGVudmlvdXMgdG9uZ3VlcyB0byBtYWtlLCBuYW1lbHksIHRoYXQgaGUgZGV2b3RlZCBoaW1zZWxmIG1vcmUgdG8gdGhlIHBlb3BsZSB0aGFuIHRvIHRoZSBzZW5hdGUsIGFuZCBoYWQgZGV0ZXJtaW5lZCB0byByZXN0b3JlIHRoZSBhdXRob3JpdHkgb2YgdGhlIHRyaWJ1bmF0ZSwgd2hpY2ggU3VsbGEgaGFkIG92ZXJ0aHJvd24sIGFuZCB0byBjb3VydCB0aGUgZmF2b3VyIG9mIHRoZSBtYW55OyB3aGljaCB3YXMgdHJ1ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3YXMgbm90aGluZyBvbiB3aGljaCB0aGUgUm9tYW4gcGVvcGxlIGhhZCBtb3JlIGZyYW50aWNhbGx5IHNldCB0aGVpciBhZmZlY3Rpb25zLCBvciBmb3Igd2hpY2ggdGhleSBoYWQgYSBncmVhdGVyIHllYXJuaW5nLCB0aGFuIHRvIGJlaG9sZCB0aGF0IG9mZmljZSBhZ2Fpbi4gUG9tcGV5IHRoZXJlZm9yZSByZWdhcmRlZCBpdCBhcyBhIGdyZWF0IGdvb2QgZm9ydHVuZSB0aGF0IGhlIGhhZCB0aGUgb3Bwb3J0dW5pdHkgZm9yIHRoaXMgcG9saXRpY2FsIG1lYXN1cmUsIHNpbmNlIGhlIGNvdWxkIGhhdmUgZm91bmQgbm8gb3RoZXIgZmF2b3VyIHdpdGggd2hpY2ggdG8gcmVwYXkgdGhlIGdvb2R3aWxsIG9mIGhpcyBmZWxsb3ctY2l0aXplbnMsIGlmIGFub3RoZXIgaGFkIGFudGljaXBhdGVkIGhpbSBpbiB0aGlzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgYSBzZWNvbmQgdHJpdW1waCB3YXMgZGVjcmVlZCBoaW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNzEgQi5DLjwvbm90ZT4gYW5kIHRoZSBjb25zdWxzaGlwLiBJdCB3YXMgbm90IG9uIHRoaXMgYWNjb3VudCwgaG93ZXZlciwgdGhhdCBtZW4gdGhvdWdodCBoaW0gYWRtaXJhYmxlIGFuZCBncmVhdCwgbmF5LCB0aGV5IGNvbnNpZGVyZWQgdGhpcyBjaXJjdW1zdGFuY2UgYSBwcm9vZiBvZiBoaXMgc3BsZW5kaWQgZGlzdGluY3Rpb24sIHRoYXQgQ3Jhc3N1cywgdGhlIHJpY2hlc3Qgc3RhdGVzbWFuIG9mIGhpcyB0aW1lLCB0aGUgYWJsZXN0IHNwZWFrZXIsIGFuZCB0aGUgZ3JlYXRlc3QgbWFuLCB3aG8gbG9va2VkIGRvd24gb24gUG9tcGV5IGhpbXNlbGYgYW5kIGV2ZXJ5Ym9keSBlbHNlLCBoYWQgbm90IHRoZSBjb3VyYWdlIHRvIHN1ZSBmb3IgdGhlIGNvbnN1bHNoaXAgdW50aWwgaGUgaGFkIGFza2VkIHRoZSBzdXBwb3J0IG9mIFBvbXBleS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5LCBtb3Jlb3Zlciwgd2FzIGRlbGlnaHRlZCwgc2luY2UgaGUgaGFkIGxvbmcgd2FudGVkIGFuIG9wcG9ydHVuaXR5IG9mIGRvaW5nIGhpbSBzb21lIHNlcnZpY2UgYW5kIGtpbmRuZXNzLCBhbmQgdGhlcmVmb3JlIGdyYW50ZWQgaGlzIHJlcXVlc3QgcmVhZGlseSBhbmQgc29saWNpdGVkIHRoZSBwZW9wbGUgaW4gaGlzIGJlaGFsZjsgYW5ub3VuY2luZyB0aGF0IGhlIHNob3VsZCBiZSBubyBsZXNzIGdyYXRlZnVsIHRvIHRoZW0gZm9yIHN1Y2ggYSBjb2xsZWFndWUgdGhhbiBmb3IgdGhlIGNvbnN1bHNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdHdpdGhzdGFuZGluZywgYWZ0ZXIgdGhleSBoYWQgYmVlbiBlbGVjdGVkIGNvbnN1bHMsIHRoZXkgZGlmZmVyZWQgb24gYWxsIHBvaW50cywgYW5kIHdlcmUgY29uc3RhbnRseSBpbiBjb2xsaXNpb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDEyLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q3Jhc3N1czwvdGl0bGU+LCB4aWkuIDEuZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gSW4gdGhlIHNlbmF0ZSwgQ3Jhc3N1cyBoYWQgbW9yZSB3ZWlnaHQ7IGJ1dCBhbW9uZyB0aGUgcGVvcGxlIHRoZSBwb3dlciBvZiBQb21wZXkgd2FzIGdyZWF0LiBGb3IgaGUgZ2F2ZSB0aGVtIGJhY2sgdGhlaXIgdHJpYnVuYXRlLCBhbmQgc3VmZmVyZWQgdGhlIGNvdXJ0cyBvZiBqdXN0aWNlIHRvIGJlIHRyYW5zZmVycmVkIGFnYWluIHRvIHRoZSBrbmlnaHRzIGJ5IGxhdy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5CeSBhIGxhdyBwYXNzZWQgaW4gdGhlIHRpbWUgb2YgU3VsbGEsIG9ubHkgc2VuYXRvcnMgd2VyZSBlbGlnaWJsZSBhcyBqdWRnZXMuPC9ub3RlPiBCdXQgdGhlIG1vc3QgYWdyZWVhYmxlIG9mIGFsbCBzcGVjdGFjbGVzIHdhcyB0aGF0IHdoaWNoIGhlIGFmZm9yZGVkIHRoZSBwZW9wbGUgd2hlbiBoZSBhcHBlYXJlZCBpbiBwZXJzb24gYW5kIHNvbGljaXRlZCBoaXMgZGlzY2hhcmdlIGZyb20gbWlsaXRhcnkgc2VydmljZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGEgc2Vjb25kIHRyaXVtcGggd2FzIGRlY3JlZWQgaGltLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNzEgQi5DLjwvbm90ZT4gYW5kIHRoZSBjb25zdWxzaGlwLiBJdCB3YXMgbm90IG9uIHRoaXMgYWNjb3VudCwgaG93ZXZlciwgdGhhdCBtZW4gdGhvdWdodCBoaW0gYWRtaXJhYmxlIGFuZCBncmVhdCwgbmF5LCB0aGV5IGNvbnNpZGVyZWQgdGhpcyBjaXJjdW1zdGFuY2UgYSBwcm9vZiBvZiBoaXMgc3BsZW5kaWQgZGlzdGluY3Rpb24sIHRoYXQgQ3Jhc3N1cywgdGhlIHJpY2hlc3Qgc3RhdGVzbWFuIG9mIGhpcyB0aW1lLCB0aGUgYWJsZXN0IHNwZWFrZXIsIGFuZCB0aGUgZ3JlYXRlc3QgbWFuLCB3aG8gbG9va2VkIGRvd24gb24gUG9tcGV5IGhpbXNlbGYgYW5kIGV2ZXJ5Ym9keSBlbHNlLCBoYWQgbm90IHRoZSBjb3VyYWdlIHRvIHN1ZSBmb3IgdGhlIGNvbnN1bHNoaXAgdW50aWwgaGUgaGFkIGFza2VkIHRoZSBzdXBwb3J0IG9mIFBvbXBleS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgbW9yZW92ZXIsIHdhcyBkZWxpZ2h0ZWQsIHNpbmNlIGhlIGhhZCBsb25nIHdhbnRlZCBhbiBvcHBvcnR1bml0eSBvZiBkb2luZyBoaW0gc29tZSBzZXJ2aWNlIGFuZCBraW5kbmVzcywgYW5kIHRoZXJlZm9yZSBncmFudGVkIGhpcyByZXF1ZXN0IHJlYWRpbHkgYW5kIHNvbGljaXRlZCB0aGUgcGVvcGxlIGluIGhpcyBiZWhhbGY7IGFubm91bmNpbmcgdGhhdCBoZSBzaG91bGQgYmUgbm8gbGVzcyBncmF0ZWZ1bCB0byB0aGVtIGZvciBzdWNoIGEgY29sbGVhZ3VlIHRoYW4gZm9yIHRoZSBjb25zdWxzaGlwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdHdpdGhzdGFuZGluZywgYWZ0ZXIgdGhleSBoYWQgYmVlbiBlbGVjdGVkIGNvbnN1bHMsIHRoZXkgZGlmZmVyZWQgb24gYWxsIHBvaW50cywgYW5kIHdlcmUgY29uc3RhbnRseSBpbiBjb2xsaXNpb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAxMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCB4aWkuIDEuZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gSW4gdGhlIHNlbmF0ZSwgQ3Jhc3N1cyBoYWQgbW9yZSB3ZWlnaHQ7IGJ1dCBhbW9uZyB0aGUgcGVvcGxlIHRoZSBwb3dlciBvZiBQb21wZXkgd2FzIGdyZWF0LiBGb3IgaGUgZ2F2ZSB0aGVtIGJhY2sgdGhlaXIgdHJpYnVuYXRlLCBhbmQgc3VmZmVyZWQgdGhlIGNvdXJ0cyBvZiBqdXN0aWNlIHRvIGJlIHRyYW5zZmVycmVkIGFnYWluIHRvIHRoZSBrbmlnaHRzIGJ5IGxhdy48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDcmFzcy4gMTIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgeGlpLiAxLmYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIHhpaS4gMS5mLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QnkgYSBsYXcgcGFzc2VkIGluIHRoZSB0aW1lIG9mIFN1bGxhLCBvbmx5IHNlbmF0b3JzIHdlcmUgZWxpZ2libGUgYXMganVkZ2VzLjwvbm90ZT4gQnV0IHRoZSBtb3N0IGFncmVlYWJsZSBvZiBhbGwgc3BlY3RhY2xlcyB3YXMgdGhhdCB3aGljaCBoZSBhZmZvcmRlZCB0aGUgcGVvcGxlIHdoZW4gaGUgYXBwZWFyZWQgaW4gcGVyc29uIGFuZCBzb2xpY2l0ZWQgaGlzIGRpc2NoYXJnZSBmcm9tIG1pbGl0YXJ5IHNlcnZpY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIGN1c3RvbWFyeSBmb3IgYSBSb21hbiBrbmlnaHQsIHdoZW4gaGUgaGFzIHNlcnZlZCBmb3IgdGhlIHRpbWUgZml4ZWQgYnkgbGF3LCB0byBsZWFkIGhpcyBob3JzZSBpbnRvIHRoZSBmb3J1bSBiZWZvcmUgdGhlIHR3byBtZW4gd2hvIGFyZSBjYWxsZWQgY2Vuc29ycywgYW5kIGFmdGVyIGVudW1lcmF0aW5nIGFsbCB0aGUgZ2VuZXJhbHMgYW5kIGltcGVyYXRvcnMgdW5kZXIgd2hvbSBoZSBoYXMgc2VydmVkLCBhbmQgcmVuZGVyaW5nIGFuIGFjY291bnQgb2YgaGlzIHNlcnZpY2UgaW4gdGhlIGZpZWxkLCB0byByZWNlaXZlIGhpcyBkaXNjaGFyZ2UuIEhvbm91cnMgYW5kIHBlbmFsdGllcyBhcmUgYWxzbyBhd2FyZGVkLCBhY2NvcmRpbmcgdG8gdGhlIGNhcmVlciBvZiBlYWNoLiAKCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIGN1c3RvbWFyeSBmb3IgYSBSb21hbiBrbmlnaHQsIHdoZW4gaGUgaGFzIHNlcnZlZCBmb3IgdGhlIHRpbWUgZml4ZWQgYnkgbGF3LCB0byBsZWFkIGhpcyBob3JzZSBpbnRvIHRoZSBmb3J1bSBiZWZvcmUgdGhlIHR3byBtZW4gd2hvIGFyZSBjYWxsZWQgY2Vuc29ycywgYW5kIGFmdGVyIGVudW1lcmF0aW5nIGFsbCB0aGUgZ2VuZXJhbHMgYW5kIGltcGVyYXRvcnMgdW5kZXIgd2hvbSBoZSBoYXMgc2VydmVkLCBhbmQgcmVuZGVyaW5nIGFuIGFjY291bnQgb2YgaGlzIHNlcnZpY2UgaW4gdGhlIGZpZWxkLCB0byByZWNlaXZlIGhpcyBkaXNjaGFyZ2UuIEhvbm91cnMgYW5kIHBlbmFsdGllcyBhcmUgYWxzbyBhd2FyZGVkLCBhY2NvcmRpbmcgdG8gdGhlIGNhcmVlciBvZiBlYWNoLiAKCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQXQgdGhpcyB0aW1lLCB0aGVuLCB0aGUgY2Vuc29ycyBHZWxsaXVzIGFuZCBMZW50dWx1cyB3ZXJlIHNpdHRpbmcgaW4gc3RhdGUsIGFuZCB0aGUga25pZ2h0cyB3ZXJlIHBhc3NpbmcgaW4gcmV2aWV3IGJlZm9yZSB0aGVtLCB3aGVuIFBvbXBleSB3YXMgc2VlbiBjb21pbmcgZG93biB0aGUgZGVzY2VudCBpbnRvIHRoZSBmb3J1bSwgb3RoZXJ3aXNlIG1hcmtlZCBieSB0aGUgaW5zaWduaWEgb2YgaGlzIG9mZmljZSwgYnV0IGxlYWRpbmcgaGlzIGhvcnNlIHdpdGggaGlzIG93biBoYW5kLiBXaGVuIGhlIHdhcyBuZWFyIGFuZCBjb3VsZCBiZSBwbGFpbmx5IHNlZW4sIGhlIG9yZGVyZWQgaGlzIGxpY3RvcnMgdG8gbWFrZSB3YXkgZm9yIGhpbSwgYW5kIGxlZCBoaXMgaG9yc2UgdXAgdG8gdGhlIHRyaWJ1bmFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGVvcGxlIHdlcmUgYXN0b25pc2hlZCBhbmQga2VwdCBwZXJmZWN0IHNpbGVuY2UsIGFuZCB0aGUgbWFnaXN0cmF0ZXMgd2VyZSBhd2VkIGFuZCBkZWxpZ2h0ZWQgYXQgdGhlIHNpZ2h0LiBUaGVuIHRoZSBzZW5pb3IgY2Vuc29yIHB1dCB0aGUgcXVlc3Rpb246IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UG9tcGVpdXMgTWFnbnVzLCBJIGFzayB0aGVlIHdoZXRoZXIgdGhvdSBoYXN0IHBlcmZvcm1lZCBhbGwgdGhlIG1pbGl0YXJ5IHNlcnZpY2VzIHJlcXVpcmVkIGJ5IGxhdz88L3E+IFRoZW4gUG9tcGV5IHNhaWQgd2l0aCBhIGxvdWQgdm9pY2U6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoYXZlIHBlcmZvcm1lZCB0aGVtIGFsbCwgYW5kIGFsbCB1bmRlciBteXNlbGYgYXMgaW1wZXJhdG9yLjwvcT4gT24gaGVhcmluZyB0aGlzLCB0aGUgcGVvcGxlIGdhdmUgYSBsb3VkIHNob3V0LCBhbmQgaXQgd2FzIG5vIGxvbmdlciBwb3NzaWJsZSB0byBjaGVjayB0aGVpciBjcmllcyBvZiBqb3ksIGJ1dCB0aGUgY2Vuc29ycyByb3NlIHVwIGFuZCBhY2NvbXBhbmllZCBQb21wZXkgdG8gaGlzIGhvbWUsIHRodXMgZ3JhdGlmeWluZyB0aGUgY2l0aXplbnMsIHdobyBmb2xsb3dlZCB3aXRoIGFwcGxhdXNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQXQgdGhpcyB0aW1lLCB0aGVuLCB0aGUgY2Vuc29ycyBHZWxsaXVzIGFuZCBMZW50dWx1cyB3ZXJlIHNpdHRpbmcgaW4gc3RhdGUsIGFuZCB0aGUga25pZ2h0cyB3ZXJlIHBhc3NpbmcgaW4gcmV2aWV3IGJlZm9yZSB0aGVtLCB3aGVuIFBvbXBleSB3YXMgc2VlbiBjb21pbmcgZG93biB0aGUgZGVzY2VudCBpbnRvIHRoZSBmb3J1bSwgb3RoZXJ3aXNlIG1hcmtlZCBieSB0aGUgaW5zaWduaWEgb2YgaGlzIG9mZmljZSwgYnV0IGxlYWRpbmcgaGlzIGhvcnNlIHdpdGggaGlzIG93biBoYW5kLiBXaGVuIGhlIHdhcyBuZWFyIGFuZCBjb3VsZCBiZSBwbGFpbmx5IHNlZW4sIGhlIG9yZGVyZWQgaGlzIGxpY3RvcnMgdG8gbWFrZSB3YXkgZm9yIGhpbSwgYW5kIGxlZCBoaXMgaG9yc2UgdXAgdG8gdGhlIHRyaWJ1bmFsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUgd2VyZSBhc3RvbmlzaGVkIGFuZCBrZXB0IHBlcmZlY3Qgc2lsZW5jZSwgYW5kIHRoZSBtYWdpc3RyYXRlcyB3ZXJlIGF3ZWQgYW5kIGRlbGlnaHRlZCBhdCB0aGUgc2lnaHQuIFRoZW4gdGhlIHNlbmlvciBjZW5zb3IgcHV0IHRoZSBxdWVzdGlvbjogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlBvbXBlaXVzIE1hZ251cywgSSBhc2sgdGhlZSB3aGV0aGVyIHRob3UgaGFzdCBwZXJmb3JtZWQgYWxsIHRoZSBtaWxpdGFyeSBzZXJ2aWNlcyByZXF1aXJlZCBieSBsYXc/PC9xPiBUaGVuIFBvbXBleSBzYWlkIHdpdGggYSBsb3VkIHZvaWNlOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoYXZlIHBlcmZvcm1lZCB0aGVtIGFsbCwgYW5kIGFsbCB1bmRlciBteXNlbGYgYXMgaW1wZXJhdG9yLjwvcT4gT24gaGVhcmluZyB0aGlzLCB0aGUgcGVvcGxlIGdhdmUgYSBsb3VkIHNob3V0LCBhbmQgaXQgd2FzIG5vIGxvbmdlciBwb3NzaWJsZSB0byBjaGVjayB0aGVpciBjcmllcyBvZiBqb3ksIGJ1dCB0aGUgY2Vuc29ycyByb3NlIHVwIGFuZCBhY2NvbXBhbmllZCBQb21wZXkgdG8gaGlzIGhvbWUsIHRodXMgZ3JhdGlmeWluZyB0aGUgY2l0aXplbnMsIHdobyBmb2xsb3dlZCB3aXRoIGFwcGxhdXNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFBvbXBleSdzIHRlcm0gb2Ygb2ZmaWNlIHdhcyBub3cgYWJvdXQgdG8gZXhwaXJlLCBhbmQgaGlzIGRpZmZlcmVuY2VzIHdpdGggQ3Jhc3N1cyB3ZXJlIGluY3JlYXNpbmcsIGEgY2VydGFpbiBDYWl1cyBBdXJlbGl1cywgd2hvLCB0aG91Z2ggYmVsb25naW5nIHRvIHRoZSBlcXVlc3RyaWFuIG9yZGVyLCBoYWQgbmV2ZXIgbWVkZGxlZCBpbiBwdWJsaWMgYWZmYWlycywgYXNjZW5kZWQgdGhlIHJvc3RyYSBhdCBhbiBhc3NlbWJseSBvZiB0aGUgcGVvcGxlLCBhbmQgY2FtZSBmb3J3YXJkIHRvIHNheSB0aGF0IEp1cGl0ZXIgaGFkIGFwcGVhcmVkIHRvIGhpbSBpbiBoaXMgc2xlZXAsIGJpZGRpbmcgaGltIHRlbGwgdGhlIGNvbnN1bHMgbm90IHRvIGxheSBkb3duIHRoZWlyIG9mZmljZSBiZWZvcmUgdGhleSBoYWQgYmVjb21lIGZyaWVuZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXNlIHdvcmRzIGhhZCBiZWVuIHNhaWQsIFBvbXBleSBzdG9vZCBtb3Rpb25sZXNzLCBidXQgQ3Jhc3N1cyB0b29rIHRoZSBpbml0aWF0aXZlLCBjbGFzcGVkIGhpcyBoYW5kIGFuZCBncmVldGVkIGhpbSwgYW5kIHRoZW4gc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHRoaW5rIEkgZG8gbm90aGluZyBpZ25vYmxlIG9yIG1lYW4sIG15IGZlbGxvdy1jaXRpemVucywgaW4geWllbGRpbmcgZmlyc3QgdG8gUG9tcGV5LCB3aG9tIHlvdSB3ZXJlIHBsZWFzZWQgdG8gY2FsbCBNYWdudXMgd2hlbiBoZSB3YXMgc3RpbGwgYmVhcmRsZXNzLCBhbmQgdG8gd2hvbSB5b3UgZGVjcmVlZCB0d28gdHJpdW1waHMgYmVmb3JlIGhlIHdhcyBhIHNlbmF0b3IuPC9xPiBVcG9uIHRoaXMsIHRoZXkgd2VyZSByZWNvbmNpbGVkLCBhbmQgYWZ0ZXJ3YXJkcyBsYWlkIGRvd24gdGhlaXIgb2ZmaWNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAxMi4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNyYXNzdXM8L3RpdGxlPiwgeGlpLiAzLiBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBQb21wZXkncyB0ZXJtIG9mIG9mZmljZSB3YXMgbm93IGFib3V0IHRvIGV4cGlyZSwgYW5kIGhpcyBkaWZmZXJlbmNlcyB3aXRoIENyYXNzdXMgd2VyZSBpbmNyZWFzaW5nLCBhIGNlcnRhaW4gQ2FpdXMgQXVyZWxpdXMsIHdobywgdGhvdWdoIGJlbG9uZ2luZyB0byB0aGUgZXF1ZXN0cmlhbiBvcmRlciwgaGFkIG5ldmVyIG1lZGRsZWQgaW4gcHVibGljIGFmZmFpcnMsIGFzY2VuZGVkIHRoZSByb3N0cmEgYXQgYW4gYXNzZW1ibHkgb2YgdGhlIHBlb3BsZSwgYW5kIGNhbWUgZm9yd2FyZCB0byBzYXkgdGhhdCBKdXBpdGVyIGhhZCBhcHBlYXJlZCB0byBoaW0gaW4gaGlzIHNsZWVwLCBiaWRkaW5nIGhpbSB0ZWxsIHRoZSBjb25zdWxzIG5vdCB0byBsYXkgZG93biB0aGVpciBvZmZpY2UgYmVmb3JlIHRoZXkgaGFkIGJlY29tZSBmcmllbmRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXNlIHdvcmRzIGhhZCBiZWVuIHNhaWQsIFBvbXBleSBzdG9vZCBtb3Rpb25sZXNzLCBidXQgQ3Jhc3N1cyB0b29rIHRoZSBpbml0aWF0aXZlLCBjbGFzcGVkIGhpcyBoYW5kIGFuZCBncmVldGVkIGhpbSwgYW5kIHRoZW4gc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgdGhpbmsgSSBkbyBub3RoaW5nIGlnbm9ibGUgb3IgbWVhbiwgbXkgZmVsbG93LWNpdGl6ZW5zLCBpbiB5aWVsZGluZyBmaXJzdCB0byBQb21wZXksIHdob20geW91IHdlcmUgcGxlYXNlZCB0byBjYWxsIE1hZ251cyB3aGVuIGhlIHdhcyBzdGlsbCBiZWFyZGxlc3MsIGFuZCB0byB3aG9tIHlvdSBkZWNyZWVkIHR3byB0cml1bXBocyBiZWZvcmUgaGUgd2FzIGEgc2VuYXRvci48L3E+IFVwb24gdGhpcywgdGhleSB3ZXJlIHJlY29uY2lsZWQsIGFuZCBhZnRlcndhcmRzIGxhaWQgZG93biB0aGVpciBvZmZpY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAxMi4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCB4aWkuIDMuIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAxMi4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCB4aWkuIDMuIGYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIHhpaS4gMy4gZi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIENyYXNzdXMgY29udGludWVkIHRoZSBtYW5uZXIgb2YgbGlmZSB3aGljaCBoZSBoYWQgY2hvc2VuIGF0IHRoZSBvdXRzZXQ7IGJ1dCBQb21wZXkgY2Vhc2VkIGhpcyBmcmVxdWVudCBhcHBlYXJhbmNlcyBhcyBhbiBhZHZvY2F0ZSwgZ3JhZHVhbGx5IGZvcnNvb2sgdGhlIGZvcnVtLCByYXJlbHkgc2hvd2VkIGhpbXNlbGYgaW4gcHVibGljLCBhbmQgd2hlbiBoZSBkaWQsIGl0IHdhcyBhbHdheXMgd2l0aCBhIHJldGludWUgb2YgZm9sbG93ZXJzLiBJbiBmYWN0LCBpdCB3YXMgbm8gbG9uZ2VyIGVhc3kgdG8gbWVldCBoaW0gb3IgZXZlbiB0byBzZWUgaGltIHdpdGhvdXQgYSB0aHJvbmcgYXJvdW5kIGhpbSwgYnV0IGhlIHRvb2sgdGhlIGdyZWF0ZXN0IHBsZWFzdXJlIGluIG1ha2luZyBoaXMgYXBwZWFyYW5jZSBhdHRlbmRlZCBieSBsYXJnZSBjcm93ZHMsIGVuY29tcGFzc2luZyBoaXMgcHJlc2VuY2UgdGh1cyB3aXRoIG1hamVzdHkgYW5kIHBvbXAsIGFuZCB0aGlua2luZyB0aGF0IGhlIG11c3Qga2VlcCBoaXMgZGlnbml0eSBmcmVlIGZyb20gY29udGFjdCBhbmQgZmFtaWxpYXIgYXNzb2NpYXRpb24gd2l0aCB0aGUgbXVsdGl0dWRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbGlmZSBpbiB0aGUgcm9iZXMgb2YgcGVhY2UgaGFzIGEgZGFuZ2Vyb3VzIHRlbmRlbmN5IHRvIGRpbWluaXNoIHRoZSByZXB1dGF0aW9uIG9mIHRob3NlIHdob20gd2FyIGhhcyBtYWRlIGdyZWF0IGFuZCBpbGwgc3VpdGVkIGZvciBkZW1vY3JhdGljIGVxdWFsaXR5LiBTdWNoIG1lbiBjbGFpbSB0aGF0IHByZWNlZGVuY2UgaW4gdGhlIGNpdHkgYWxzbyB3aGljaCB0aGV5IGhhdmUgaW4gdGhlIGZpZWxkLCB3aGlsZSB0aG9zZSB3aG8gYWNoaWV2ZSBsZXNzIGRpc3RpbmN0aW9uIGluIHRoZSBmaWVsZCBmZWVsIGl0IHRvIGJlIGludG9sZXJhYmxlIGlmIGluIHRoZSBjaXR5IGF0IGFueSByYXRlIHRoZXkgaGF2ZSBubyBhZHZhbnRhZ2UuIFRoZXJlZm9yZSB3aGVuIHRoZSBwZW9wbGUgZmluZCBhIG1hbiBhY3RpdmUgaW4gdGhlIGZvcnVtIHdobyBoYXMgc2hvbmUgaW4gY2FtcHMgYW5kIHRyaXVtcGhzLCB0aGV5IGRlcHJlc3MgYW5kIGh1bWlsaWF0ZSBoaW0sIGJ1dCB3aGVuIGhlIHJlbm91bmNlcyBhbmQgd2l0aGRyYXdzIGZyb20gc3VjaCBhY3Rpdml0eSwgdGhleSBsZWF2ZSBoaXMgbWlsaXRhcnkgcmVwdXRhdGlvbiBhbmQgcG93ZXIgdW50b3VjaGVkIGJ5IHRoZWlyIGVudnkuIEhvdyB0cnVlIHRoaXMgaXMsIGV2ZW50cyB0aGVtc2VsdmVzIHNvb24gc2hvd2VkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQ3Jhc3N1cyBjb250aW51ZWQgdGhlIG1hbm5lciBvZiBsaWZlIHdoaWNoIGhlIGhhZCBjaG9zZW4gYXQgdGhlIG91dHNldDsgYnV0IFBvbXBleSBjZWFzZWQgaGlzIGZyZXF1ZW50IGFwcGVhcmFuY2VzIGFzIGFuIGFkdm9jYXRlLCBncmFkdWFsbHkgZm9yc29vayB0aGUgZm9ydW0sIHJhcmVseSBzaG93ZWQgaGltc2VsZiBpbiBwdWJsaWMsIGFuZCB3aGVuIGhlIGRpZCwgaXQgd2FzIGFsd2F5cyB3aXRoIGEgcmV0aW51ZSBvZiBmb2xsb3dlcnMuIEluIGZhY3QsIGl0IHdhcyBubyBsb25nZXIgZWFzeSB0byBtZWV0IGhpbSBvciBldmVuIHRvIHNlZSBoaW0gd2l0aG91dCBhIHRocm9uZyBhcm91bmQgaGltLCBidXQgaGUgdG9vayB0aGUgZ3JlYXRlc3QgcGxlYXN1cmUgaW4gbWFraW5nIGhpcyBhcHBlYXJhbmNlIGF0dGVuZGVkIGJ5IGxhcmdlIGNyb3dkcywgZW5jb21wYXNzaW5nIGhpcyBwcmVzZW5jZSB0aHVzIHdpdGggbWFqZXN0eSBhbmQgcG9tcCwgYW5kIHRoaW5raW5nIHRoYXQgaGUgbXVzdCBrZWVwIGhpcyBkaWduaXR5IGZyZWUgZnJvbSBjb250YWN0IGFuZCBmYW1pbGlhciBhc3NvY2lhdGlvbiB3aXRoIHRoZSBtdWx0aXR1ZGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBsaWZlIGluIHRoZSByb2JlcyBvZiBwZWFjZSBoYXMgYSBkYW5nZXJvdXMgdGVuZGVuY3kgdG8gZGltaW5pc2ggdGhlIHJlcHV0YXRpb24gb2YgdGhvc2Ugd2hvbSB3YXIgaGFzIG1hZGUgZ3JlYXQgYW5kIGlsbCBzdWl0ZWQgZm9yIGRlbW9jcmF0aWMgZXF1YWxpdHkuIFN1Y2ggbWVuIGNsYWltIHRoYXQgcHJlY2VkZW5jZSBpbiB0aGUgY2l0eSBhbHNvIHdoaWNoIHRoZXkgaGF2ZSBpbiB0aGUgZmllbGQsIHdoaWxlIHRob3NlIHdobyBhY2hpZXZlIGxlc3MgZGlzdGluY3Rpb24gaW4gdGhlIGZpZWxkIGZlZWwgaXQgdG8gYmUgaW50b2xlcmFibGUgaWYgaW4gdGhlIGNpdHkgYXQgYW55IHJhdGUgdGhleSBoYXZlIG5vIGFkdmFudGFnZS4gVGhlcmVmb3JlIHdoZW4gdGhlIHBlb3BsZSBmaW5kIGEgbWFuIGFjdGl2ZSBpbiB0aGUgZm9ydW0gd2hvIGhhcyBzaG9uZSBpbiBjYW1wcyBhbmQgdHJpdW1waHMsIHRoZXkgZGVwcmVzcyBhbmQgaHVtaWxpYXRlIGhpbSwgYnV0IHdoZW4gaGUgcmVub3VuY2VzIGFuZCB3aXRoZHJhd3MgZnJvbSBzdWNoIGFjdGl2aXR5LCB0aGV5IGxlYXZlIGhpcyBtaWxpdGFyeSByZXB1dGF0aW9uIGFuZCBwb3dlciB1bnRvdWNoZWQgYnkgdGhlaXIgZW52eS4gSG93IHRydWUgdGhpcyBpcywgZXZlbnRzIHRoZW1zZWx2ZXMgc29vbiBzaG93ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwb3dlciBvZiB0aGUgcGlyYXRlcyBoYWQgaXRzIHNlYXQgaW4gQ2lsaWNpYSBhdCBmaXJzdCwgYW5kIGF0IHRoZSBvdXRzZXQgaXQgd2FzIHZlbnR1cmVzb21lIGFuZCBlbHVzaXZlOyBidXQgaXQgdG9vayBvbiBjb25maWRlbmNlIGFuZCBib2xkbmVzcyBkdXJpbmcgdGhlIE1pdGhyaWRhdGljIHdhciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj44OC04NSwgODMtODEsIDc0IEIuQy48L25vdGU+IGJlY2F1c2UgaXQgbGVudCBpdHNlbGYgdG8gdGhlIGtpbmcncyBzZXJ2aWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCB3aGlsZSB0aGUgUm9tYW5zIHdlcmUgZW1icm9pbGVkIGluIGNpdmlsIHdhcnMgYXQgdGhlIGdhdGVzIG9mIFJvbWUsIHRoZSBzZWEgd2FzIGxlZnQgdW5ndWFyZGVkLCBhbmQgZ3JhZHVhbGx5IGRyZXcgYW5kIGVudGljZWQgdGhlbSBvbiB1bnRpbCB0aGV5IG5vIGxvbmdlciBhdHRhY2tlZCBuYXZpZ2F0b3JzIG9ubHksIGJ1dCBhbHNvIGxhaWQgd2FzdGUgaXNsYW5kcyBhbmQgbWFyaXRpbWUgY2l0aWVzLiBBbmQgcHJlc2VudGx5IG1lbiB3aG9zZSB3ZWFsdGggZ2F2ZSB0aGVtIHBvd2VyLCBhbmQgdGhvc2Ugd2hvc2UgbGluZWFnZSB3YXMgaWxsdXN0cmlvdXMsIGFuZCB0aG9zZSB3aG8gbGFpZCBjbGFpbSB0byBzdXBlcmlvciBpbnRlbGxpZ2VuY2UsIGJlZ2FuIHRvIGVtYmFyayBvbiBwaXJhdGljYWwgY3JhZnQgYW5kIHNoYXJlIHRoZWlyIGVudGVycHJpc2VzLCBmZWVsaW5nIHRoYXQgdGhlIG9jY3VwYXRpb24gYnJvdWdodCB0aGVtIGEgY2VydGFpbiByZXB1dGF0aW9uIGFuZCBkaXN0aW5jdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2VyZSBhbHNvIGZvcnRpZmllZCByb2Fkc3RlYWRzIGFuZCBzaWduYWwtc3RhdGlvbnMgZm9yIHBpcmF0aWNhbCBjcmFmdCBpbiBtYW55IHBsYWNlcywgYW5kIGZsZWV0cyBwdXQgaW4gaGVyZSB3aGljaCB3ZXJlIG5vdCBtZXJlbHkgZnVybmlzaGVkIGZvciB0aGVpciBwZWN1bGlhciB3b3JrIHdpdGggc3R1cmR5IGNyZXdzLCBza2lsZnVsIHBpbG90cywgYW5kIGxpZ2h0IGFuZCBzcGVlZHkgc2hpcHM7IG5heSwgbW9yZSBhbm5veWluZyB0aGFuIHRoZSBmZWFyIHdoaWNoIHRoZXkgaW5zcGlyZWQgd2FzIHRoZSBvZGlvdXMgZXh0cmF2YWdhbmNlIG9mIHRoZWlyIGVxdWlwbWVudCwgd2l0aCB0aGVpciBnaWxkZWQgc2FpbHMsIGFuZCBwdXJwbGUgYXduaW5ncywgYW5kIHNpbHZlcmVkIG9hcnMsIGFzIGlmIHRoZXkgcmlvdGVkIGluIHRoZWlyIGluaXF1aXR5IGFuZCBwbHVtZWQgdGhlbXNlbHZlcyB1cG9uIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVpciBmbHV0ZXMgYW5kIHN0cmluZ2VkIGluc3RydW1lbnRzIGFuZCBkcmlua2luZyBib3V0cyBhbG9uZyBldmVyeSBjb2FzdCwgdGhlaXIgc2VpenVyZXMgb2YgcGVyc29ucyBpbiBoaWdoIGNvbW1hbmQsIGFuZCB0aGVpciByYW5zb21pbmdzIG9mIGNhcHR1cmVkIGNpdGllcywgd2VyZSBhIGRpc2dyYWNlIHRvIHRoZSBSb21hbiBzdXByZW1hY3kuIEZvciwgeW91IHNlZSwgdGhlIHNoaXBzIG9mIHRoZSBwaXJhdGVzIG51bWJlcmVkIG1vcmUgdGhhbiBhIHRob3VzYW5kLCBhbmQgdGhlIGNpdGllcyBjYXB0dXJlZCBieSB0aGVtIGZvdXIgaHVuZHJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcywgdGhleSBhdHRhY2tlZCBhbmQgcGx1bmRlcmVkIHBsYWNlcyBvZiByZWZ1Z2UgYW5kIHNhbmN0dWFyaWVzIGhpdGhlcnRvIGludmlvbGF0ZSwgc3VjaCBhcyB0aG9zZSBvZiBDbGFyb3MsIERpZHltYSwgYW5kIFNhbW90aHJhY2U7IHRoZSB0ZW1wbGUgb2YgQ2h0aG9uaWFuIEVhcnRoIGF0IEhlcm1pb25lOyB0aGF0IG9mIEFzY2xlcGl1cyBpbiBFcGlkYXVydXM7IHRob3NlIG9mIFBvc2VpZG9uIGF0IHRoZSBJc3RobXVzLCBhdCBUYWVuYXJ1bSwgYW5kIGF0IENhbGF1cmlhOyB0aG9zZSBvZiBBcG9sbG8gYXQgQWN0aXVtIGFuZCBMZXVjYXM7IGFuZCB0aG9zZSBvZiBIZXJhIGF0IFNhbW9zLCBhdCBBcmdvcywgYW5kIGF0IExhY2luaXVtLiBUaGV5IGFsc28gb2ZmZXJlZCBzdHJhbmdlIHNhY3JpZmljZXMgb2YgdGhlaXIgb3duIGF0IE9seW1wdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSB0b3duIGluIHNvdXRoZXJuIEFzaWEgTWlub3IsIG9uZSBvZiB0aGUgc3Ryb25naG9sZHMgb2YgdGhlIHBpcmF0ZXMuPC9ub3RlPiBhbmQgY2VsZWJyYXRlZCB0aGVyZSBjZXJ0YWluIHNlY3JldCByaXRlcywgYW1vbmcgd2hpY2ggdGhvc2Ugb2YgTWl0aHJhcyBjb250aW51ZSB0byB0aGUgcHJlc2VudCB0aW1lLCBoYXZpbmcgYmVlbiBmaXJzdCBpbnN0aXR1dGVkIGJ5IHRoZW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBvd2VyIG9mIHRoZSBwaXJhdGVzIGhhZCBpdHMgc2VhdCBpbiBDaWxpY2lhIGF0IGZpcnN0LCBhbmQgYXQgdGhlIG91dHNldCBpdCB3YXMgdmVudHVyZXNvbWUgYW5kIGVsdXNpdmU7IGJ1dCBpdCB0b29rIG9uIGNvbmZpZGVuY2UgYW5kIGJvbGRuZXNzIGR1cmluZyB0aGUgTWl0aHJpZGF0aWMgd2FyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+ODgtODUsIDgzLTgxLCA3NCBCLkMuPC9ub3RlPiBiZWNhdXNlIGl0IGxlbnQgaXRzZWxmIHRvIHRoZSBraW5nJ3Mgc2VydmljZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoaWxlIHRoZSBSb21hbnMgd2VyZSBlbWJyb2lsZWQgaW4gY2l2aWwgd2FycyBhdCB0aGUgZ2F0ZXMgb2YgUm9tZSwgdGhlIHNlYSB3YXMgbGVmdCB1bmd1YXJkZWQsIGFuZCBncmFkdWFsbHkgZHJldyBhbmQgZW50aWNlZCB0aGVtIG9uIHVudGlsIHRoZXkgbm8gbG9uZ2VyIGF0dGFja2VkIG5hdmlnYXRvcnMgb25seSwgYnV0IGFsc28gbGFpZCB3YXN0ZSBpc2xhbmRzIGFuZCBtYXJpdGltZSBjaXRpZXMuIEFuZCBwcmVzZW50bHkgbWVuIHdob3NlIHdlYWx0aCBnYXZlIHRoZW0gcG93ZXIsIGFuZCB0aG9zZSB3aG9zZSBsaW5lYWdlIHdhcyBpbGx1c3RyaW91cywgYW5kIHRob3NlIHdobyBsYWlkIGNsYWltIHRvIHN1cGVyaW9yIGludGVsbGlnZW5jZSwgYmVnYW4gdG8gZW1iYXJrIG9uIHBpcmF0aWNhbCBjcmFmdCBhbmQgc2hhcmUgdGhlaXIgZW50ZXJwcmlzZXMsIGZlZWxpbmcgdGhhdCB0aGUgb2NjdXBhdGlvbiBicm91Z2h0IHRoZW0gYSBjZXJ0YWluIHJlcHV0YXRpb24gYW5kIGRpc3RpbmN0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgYWxzbyBmb3J0aWZpZWQgcm9hZHN0ZWFkcyBhbmQgc2lnbmFsLXN0YXRpb25zIGZvciBwaXJhdGljYWwgY3JhZnQgaW4gbWFueSBwbGFjZXMsIGFuZCBmbGVldHMgcHV0IGluIGhlcmUgd2hpY2ggd2VyZSBub3QgbWVyZWx5IGZ1cm5pc2hlZCBmb3IgdGhlaXIgcGVjdWxpYXIgd29yayB3aXRoIHN0dXJkeSBjcmV3cywgc2tpbGZ1bCBwaWxvdHMsIGFuZCBsaWdodCBhbmQgc3BlZWR5IHNoaXBzOyBuYXksIG1vcmUgYW5ub3lpbmcgdGhhbiB0aGUgZmVhciB3aGljaCB0aGV5IGluc3BpcmVkIHdhcyB0aGUgb2Rpb3VzIGV4dHJhdmFnYW5jZSBvZiB0aGVpciBlcXVpcG1lbnQsIHdpdGggdGhlaXIgZ2lsZGVkIHNhaWxzLCBhbmQgcHVycGxlIGF3bmluZ3MsIGFuZCBzaWx2ZXJlZCBvYXJzLCBhcyBpZiB0aGV5IHJpb3RlZCBpbiB0aGVpciBpbmlxdWl0eSBhbmQgcGx1bWVkIHRoZW1zZWx2ZXMgdXBvbiBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIGZsdXRlcyBhbmQgc3RyaW5nZWQgaW5zdHJ1bWVudHMgYW5kIGRyaW5raW5nIGJvdXRzIGFsb25nIGV2ZXJ5IGNvYXN0LCB0aGVpciBzZWl6dXJlcyBvZiBwZXJzb25zIGluIGhpZ2ggY29tbWFuZCwgYW5kIHRoZWlyIHJhbnNvbWluZ3Mgb2YgY2FwdHVyZWQgY2l0aWVzLCB3ZXJlIGEgZGlzZ3JhY2UgdG8gdGhlIFJvbWFuIHN1cHJlbWFjeS4gRm9yLCB5b3Ugc2VlLCB0aGUgc2hpcHMgb2YgdGhlIHBpcmF0ZXMgbnVtYmVyZWQgbW9yZSB0aGFuIGEgdGhvdXNhbmQsIGFuZCB0aGUgY2l0aWVzIGNhcHR1cmVkIGJ5IHRoZW0gZm91ciBodW5kcmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMsIHRoZXkgYXR0YWNrZWQgYW5kIHBsdW5kZXJlZCBwbGFjZXMgb2YgcmVmdWdlIGFuZCBzYW5jdHVhcmllcyBoaXRoZXJ0byBpbnZpb2xhdGUsIHN1Y2ggYXMgdGhvc2Ugb2YgQ2xhcm9zLCBEaWR5bWEsIGFuZCBTYW1vdGhyYWNlOyB0aGUgdGVtcGxlIG9mIENodGhvbmlhbiBFYXJ0aCBhdCBIZXJtaW9uZTsgdGhhdCBvZiBBc2NsZXBpdXMgaW4gRXBpZGF1cnVzOyB0aG9zZSBvZiBQb3NlaWRvbiBhdCB0aGUgSXN0aG11cywgYXQgVGFlbmFydW0sIGFuZCBhdCBDYWxhdXJpYTsgdGhvc2Ugb2YgQXBvbGxvIGF0IEFjdGl1bSBhbmQgTGV1Y2FzOyBhbmQgdGhvc2Ugb2YgSGVyYSBhdCBTYW1vcywgYXQgQXJnb3MsIGFuZCBhdCBMYWNpbml1bS4gVGhleSBhbHNvIG9mZmVyZWQgc3RyYW5nZSBzYWNyaWZpY2VzIG9mIHRoZWlyIG93biBhdCBPbHltcHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSB0b3duIGluIHNvdXRoZXJuIEFzaWEgTWlub3IsIG9uZSBvZiB0aGUgc3Ryb25naG9sZHMgb2YgdGhlIHBpcmF0ZXMuPC9ub3RlPiBhbmQgY2VsZWJyYXRlZCB0aGVyZSBjZXJ0YWluIHNlY3JldCByaXRlcywgYW1vbmcgd2hpY2ggdGhvc2Ugb2YgTWl0aHJhcyBjb250aW51ZSB0byB0aGUgcHJlc2VudCB0aW1lLCBoYXZpbmcgYmVlbiBmaXJzdCBpbnN0aXR1dGVkIGJ5IHRoZW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5IGhlYXBlZCBtb3N0IGluc3VsdHMgdXBvbiB0aGUgUm9tYW5zLCBldmVuIGdvaW5nIHVwIGZyb20gdGhlIHNlYSBhbG9uZyB0aGVpciByb2FkcyBhbmQgcGx1bmRlcmluZyB0aGVyZSwgYW5kIHNhY2tpbmcgdGhlIG5laWdoYm91cmluZyB2aWxsYXMuIE9uY2UsIHRvbywgdGhleSBzZWl6ZWQgdHdvIHByYWV0b3JzLCBTZXh0aWxpdXMgYW5kIEJlbGxpbnVzLCBpbiB0aGVpciBwdXJwbGUtZWRnZWQgcm9iZXMsIGFuZCBjYXJyaWVkIHRoZW0gYXdheSwgdG9nZXRoZXIgd2l0aCB0aGVpciBhdHRlbmRhbnRzIGFuZCBsaWN0b3JzLiBUaGV5IGFsc28gY2FwdHVyZWQgYSBkYXVnaHRlciBvZiBBbnRvbml1cywgYSBtYW4gd2hvIGhhZCBjZWxlYnJhdGVkIGEgdHJpdW1waCwgYXMgc2hlIHdhcyBnb2luZyBpbnRvIHRoZSBjb3VudHJ5LCBhbmQgZXhhY3RlZCBhIGxhcmdlIHJhbnNvbSBmb3IgaGVyLiBCdXQgdGhlaXIgY3Jvd25pbmcgaW5zb2xlbmNlIHdhcyB0aGlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuZXZlciBhIGNhcHRpdmUgY3JpZWQgb3V0IHRoYXQgaGUgd2FzIGEgUm9tYW4gYW5kIGdhdmUgaGlzIG5hbWUsIHRoZXkgd291bGQgcHJldGVuZCB0byBiZSBmcmlnaHRlbmVkIG91dCBvZiB0aGVpciBzZW5zZXMsIGFuZCB3b3VsZCBzbWl0ZSB0aGVpciB0aGlnaHMsIGFuZCBmYWxsIGRvd24gYmVmb3JlIGhpbSBlbnRyZWF0aW5nIGhpbSB0byBwYXJkb24gdGhlbTsgYW5kIGhlIHdvdWxkIGJlIGNvbnZpbmNlZCBvZiB0aGVpciBzaW5jZXJpdHksIHNlZWluZyB0aGVtIHNvIGh1bWJseSBzdXBwbGlhbnQuIFRoZW4gc29tZSB3b3VsZCBwdXQgUm9tYW4gYm9vdHMgb24gaGlzIGZlZXQsIGFuZCBvdGhlcnMgd291bGQgdGhyb3cgYSB0b2dhIHJvdW5kIGhpbSwgaW4gb3JkZXIsIGZvcnNvb3RoLCB0aGF0IHRoZXJlIG1pZ2h0IGJlIG5vIG1pc3Rha2UgYWJvdXQgaGltIGFnYWluLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWZ0ZXIgdGh1cyBtb2NraW5nIHRoZSBtYW4gZm9yIGEgbG9uZyB0aW1lIGFuZCBnZXR0aW5nIHRoZWlyIGZpbGwgb2YgYW11c2VtZW50IGZyb20gaGltLCBhdCBsYXN0IHRoZXkgd291bGQgbGV0IGRvd24gYSBsYWRkZXIgaW4gbWlkIG9jZWFuIGFuZCBiaWQgaGltIGRpc2VtYmFyayBhbmQgZ28gb24gaGlzIHdheSByZWpvaWNpbmc7IGFuZCBpZiBoZSBkaWQgbm90IHdpc2ggdG8gZ28sIHRoZXkgd291bGQgcHVzaCBoaW0gb3ZlcmJvYXJkIHRoZW1zZWx2ZXMgYW5kIGRyb3duIGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5IGhlYXBlZCBtb3N0IGluc3VsdHMgdXBvbiB0aGUgUm9tYW5zLCBldmVuIGdvaW5nIHVwIGZyb20gdGhlIHNlYSBhbG9uZyB0aGVpciByb2FkcyBhbmQgcGx1bmRlcmluZyB0aGVyZSwgYW5kIHNhY2tpbmcgdGhlIG5laWdoYm91cmluZyB2aWxsYXMuIE9uY2UsIHRvbywgdGhleSBzZWl6ZWQgdHdvIHByYWV0b3JzLCBTZXh0aWxpdXMgYW5kIEJlbGxpbnVzLCBpbiB0aGVpciBwdXJwbGUtZWRnZWQgcm9iZXMsIGFuZCBjYXJyaWVkIHRoZW0gYXdheSwgdG9nZXRoZXIgd2l0aCB0aGVpciBhdHRlbmRhbnRzIGFuZCBsaWN0b3JzLiBUaGV5IGFsc28gY2FwdHVyZWQgYSBkYXVnaHRlciBvZiBBbnRvbml1cywgYSBtYW4gd2hvIGhhZCBjZWxlYnJhdGVkIGEgdHJpdW1waCwgYXMgc2hlIHdhcyBnb2luZyBpbnRvIHRoZSBjb3VudHJ5LCBhbmQgZXhhY3RlZCBhIGxhcmdlIHJhbnNvbSBmb3IgaGVyLiBCdXQgdGhlaXIgY3Jvd25pbmcgaW5zb2xlbmNlIHdhcyB0aGlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPldoZW5ldmVyIGEgY2FwdGl2ZSBjcmllZCBvdXQgdGhhdCBoZSB3YXMgYSBSb21hbiBhbmQgZ2F2ZSBoaXMgbmFtZSwgdGhleSB3b3VsZCBwcmV0ZW5kIHRvIGJlIGZyaWdodGVuZWQgb3V0IG9mIHRoZWlyIHNlbnNlcywgYW5kIHdvdWxkIHNtaXRlIHRoZWlyIHRoaWdocywgYW5kIGZhbGwgZG93biBiZWZvcmUgaGltIGVudHJlYXRpbmcgaGltIHRvIHBhcmRvbiB0aGVtOyBhbmQgaGUgd291bGQgYmUgY29udmluY2VkIG9mIHRoZWlyIHNpbmNlcml0eSwgc2VlaW5nIHRoZW0gc28gaHVtYmx5IHN1cHBsaWFudC4gVGhlbiBzb21lIHdvdWxkIHB1dCBSb21hbiBib290cyBvbiBoaXMgZmVldCwgYW5kIG90aGVycyB3b3VsZCB0aHJvdyBhIHRvZ2Egcm91bmQgaGltLCBpbiBvcmRlciwgZm9yc29vdGgsIHRoYXQgdGhlcmUgbWlnaHQgYmUgbm8gbWlzdGFrZSBhYm91dCBoaW0gYWdhaW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciB0aHVzIG1vY2tpbmcgdGhlIG1hbiBmb3IgYSBsb25nIHRpbWUgYW5kIGdldHRpbmcgdGhlaXIgZmlsbCBvZiBhbXVzZW1lbnQgZnJvbSBoaW0sIGF0IGxhc3QgdGhleSB3b3VsZCBsZXQgZG93biBhIGxhZGRlciBpbiBtaWQgb2NlYW4gYW5kIGJpZCBoaW0gZGlzZW1iYXJrIGFuZCBnbyBvbiBoaXMgd2F5IHJlam9pY2luZzsgYW5kIGlmIGhlIGRpZCBub3Qgd2lzaCB0byBnbywgdGhleSB3b3VsZCBwdXNoIGhpbSBvdmVyYm9hcmQgdGhlbXNlbHZlcyBhbmQgZHJvd24gaGltLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHBvd2VyIGV4dGVuZGVkIGl0cyBvcGVyYXRpb25zIG92ZXIgdGhlIHdob2xlIG9mIG91ciBNZWRpdGVycmFuZWFuIFNlYSwgbWFraW5nIGl0IHVubmF2aWdhYmxlIGFuZCBjbG9zZWQgdG8gYWxsIGNvbW1lcmNlLiBUaGlzIHdhcyB3aGF0IG1vc3Qgb2YgYWxsIGluY2xpbmVkIHRoZSBSb21hbnMsIHdobyB3ZXJlIGhhcmQgcHV0IHRvIGl0IHRvIGdldCBwcm92aXNpb25zIGFuZCBleHBlY3RlZCBhIGdyZWF0IHNjYXJjaXR5LCB0byBzZW5kIG91dCBQb21wZXkgd2l0aCBhIGNvbW1pc3Npb24gdG8gdGFrZSB0aGUgc2VhIGF3YXkgZnJvbSB0aGUgcGlyYXRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+R2FiaW5pdXMsIG9uZSBvZiBQb21wZXkncyBpbnRpbWF0ZXMsIGRyZXcgdXAgYSBsYXcgd2hpY2ggZ2F2ZSBoaW0sIG5vdCBhbiBhZG1pcmFsdHksIGJ1dCBhbiBvdXQtYW5kLW91dCBtb25hcmNoeSBhbmQgaXJyZXNwb25zaWJsZSBwb3dlciBvdmVyIGFsbCBtZW4uIEZvciB0aGUgbGF3IGdhdmUgaGltIGRvbWluaW9uIG92ZXIgdGhlIHNlYSB0aGlzIHNpZGUgb2YgdGhlIHBpbGxhcnMgb2YgSGVyY3VsZXMsIGFuZCBvdmVyIGFsbCB0aGUgbWFpbmxhbmQgdG8gdGhlIGRpc3RhbmNlIG9mIGZvdXIgaHVuZHJlZCBmdXJsb25ncyBmcm9tIHRoZSBzZWEuIFRoZXNlIGxpbWl0cyBpbmNsdWRlZCBhbG1vc3QgYWxsIHBsYWNlcyBpbiB0aGUgUm9tYW4gd29ybGQsIGFuZCB0aGUgZ3JlYXRlc3QgbmF0aW9ucyBhbmQgbW9zdCBwb3dlcmZ1bCBraW5ncyB3ZXJlIGNvbXByaXNlZCB3aXRoaW4gdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcyB0aGlzLCBoZSB3YXMgZW1wb3dlcmVkIHRvIGNob29zZSBmaWZ0ZWVuIGxlZ2F0ZXMgZnJvbSB0aGUgc2VuYXRlIGZvciB0aGUgc2V2ZXJhbCBwcmluY2lwYWxpdGllcywgYW5kIHRvIHRha2UgZnJvbSB0aGUgcHVibGljIHRyZWFzdXJpZXMgYW5kIHRoZSB0YXgtY29sbGVjdG9ycyBhcyBtdWNoIG1vbmV5IGFzIGhlIHdpc2hlZCwgYW5kIHRvIGhhdmUgdHdvIGh1bmRyZWQgc2hpcHMsIHdpdGggZnVsbCBwb3dlciBvdmVyIHRoZSBudW1iZXIgYW5kIGxldnlpbmcgb2Ygc29sZGllcnMgYW5kIG9hcnNtZW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBwb3dlciBleHRlbmRlZCBpdHMgb3BlcmF0aW9ucyBvdmVyIHRoZSB3aG9sZSBvZiBvdXIgTWVkaXRlcnJhbmVhbiBTZWEsIG1ha2luZyBpdCB1bm5hdmlnYWJsZSBhbmQgY2xvc2VkIHRvIGFsbCBjb21tZXJjZS4gVGhpcyB3YXMgd2hhdCBtb3N0IG9mIGFsbCBpbmNsaW5lZCB0aGUgUm9tYW5zLCB3aG8gd2VyZSBoYXJkIHB1dCB0byBpdCB0byBnZXQgcHJvdmlzaW9ucyBhbmQgZXhwZWN0ZWQgYSBncmVhdCBzY2FyY2l0eSwgdG8gc2VuZCBvdXQgUG9tcGV5IHdpdGggYSBjb21taXNzaW9uIHRvIHRha2UgdGhlIHNlYSBhd2F5IGZyb20gdGhlIHBpcmF0ZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkdhYmluaXVzLCBvbmUgb2YgUG9tcGV5J3MgaW50aW1hdGVzLCBkcmV3IHVwIGEgbGF3IHdoaWNoIGdhdmUgaGltLCBub3QgYW4gYWRtaXJhbHR5LCBidXQgYW4gb3V0LWFuZC1vdXQgbW9uYXJjaHkgYW5kIGlycmVzcG9uc2libGUgcG93ZXIgb3ZlciBhbGwgbWVuLiBGb3IgdGhlIGxhdyBnYXZlIGhpbSBkb21pbmlvbiBvdmVyIHRoZSBzZWEgdGhpcyBzaWRlIG9mIHRoZSBwaWxsYXJzIG9mIEhlcmN1bGVzLCBhbmQgb3ZlciBhbGwgdGhlIG1haW5sYW5kIHRvIHRoZSBkaXN0YW5jZSBvZiBmb3VyIGh1bmRyZWQgZnVybG9uZ3MgZnJvbSB0aGUgc2VhLiBUaGVzZSBsaW1pdHMgaW5jbHVkZWQgYWxtb3N0IGFsbCBwbGFjZXMgaW4gdGhlIFJvbWFuIHdvcmxkLCBhbmQgdGhlIGdyZWF0ZXN0IG5hdGlvbnMgYW5kIG1vc3QgcG93ZXJmdWwga2luZ3Mgd2VyZSBjb21wcmlzZWQgd2l0aGluIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMgdGhpcywgaGUgd2FzIGVtcG93ZXJlZCB0byBjaG9vc2UgZmlmdGVlbiBsZWdhdGVzIGZyb20gdGhlIHNlbmF0ZSBmb3IgdGhlIHNldmVyYWwgcHJpbmNpcGFsaXRpZXMsIGFuZCB0byB0YWtlIGZyb20gdGhlIHB1YmxpYyB0cmVhc3VyaWVzIGFuZCB0aGUgdGF4LWNvbGxlY3RvcnMgYXMgbXVjaCBtb25leSBhcyBoZSB3aXNoZWQsIGFuZCB0byBoYXZlIHR3byBodW5kcmVkIHNoaXBzLCB3aXRoIGZ1bGwgcG93ZXIgb3ZlciB0aGUgbnVtYmVyIGFuZCBsZXZ5aW5nIG9mIHNvbGRpZXJzIGFuZCBvYXJzbWVuLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gdGhlc2UgcHJvdmlzaW9ucyBvZiB0aGUgbGF3IHdlcmUgcmVhZCBpbiB0aGUgYXNzZW1ibHksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2NyBCLkMuLCBQb21wZXkgYmVpbmcgdGhlbiB0aGlydHktbmluZSB5ZWFycyBvbGQuPC9ub3RlPiB0aGUgcGVvcGxlIHJlY2VpdmVkIHRoZW0gd2l0aCBleGNlc3NpdmUgcGxlYXN1cmUsIGJ1dCB0aGUgY2hpZWYgYW5kIG1vc3QgaW5mbHVlbnRpYWwgbWVuIG9mIHRoZSBzZW5hdGUgdGhvdWdodCB0aGF0IHN1Y2ggdW5saW1pdGVkIGFuZCBhYnNvbHV0ZSBwb3dlciwgd2hpbGUgaXQgd2FzIGJleW9uZCB0aGUgcmVhY2ggb2YgZW52eSwgd2FzIHlldCBhIHRoaW5nIHRvIGJlIGZlYXJlZC4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgdGhleSBhbGwgb3Bwb3NlZCB0aGUgbGF3LCB3aXRoIHRoZSBleGNlcHRpb24gb2YgQ2Flc2FyOyBoZSBhZHZvY2F0ZWQgdGhlIGxhdywgbm90IGJlY2F1c2UgaGUgY2FyZWQgaW4gdGhlIGxlYXN0IGZvciBQb21wZXksIGJ1dCBiZWNhdXNlIGZyb20gdGhlIG91dHNldCBoZSBzb3VnaHQgdG8gaW5ncmF0aWF0ZSBoaW1zZWxmIHdpdGggdGhlIHBlb3BsZSBhbmQgd2luIHRoZWlyIHN1cHBvcnQuIFRoZSByZXN0IHZlaGVtZW50bHkgYXR0YWNrZWQgUG9tcGV5LiBBbmQgd2hlbiBvbmUgb2YgdGhlIGNvbnN1bHMgdG9sZCBoaW0gdGhhdCBpZiBoZSBlbXVsYXRlZCBSb211bHVzIGhlIHdvdWxkIG5vdCBlc2NhcGUgdGhlIGZhdGUgb2YgUm9tdWx1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGF0IGlzLCBoZSB3b3VsZCBiZSBteXN0ZXJpb3VzbHkgcHV0IG91dCBvZiB0aGUgd2F5LiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDI3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Um9tdWx1czwvdGl0bGU+LCBjaGFwdGVyIHh4dmlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBoZSB3YXMgbmVhciBiZWluZyB0b3JuIGluIHBpZWNlcyBieSB0aGUgbXVsdGl0dWRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgd2hlbiBDYXR1bHVzIGNhbWUgZm9yd2FyZCB0byBzcGVhayBhZ2FpbnN0IHRoZSBsYXcgdGhlIHBlb3BsZSBoYWQgcmVnYXJkIGVub3VnaCBmb3IgaGltIHRvIGJlIHF1aWV0IGZvciBzb21lIHRpbWU7IGJ1dCBhZnRlciBoZSBoYWQgc3Bva2VuIGF0IGxlbmd0aCBpbiBQb21wZXkncyBwcmFpc2UgYW5kIHdpdGhvdXQgYW55IGRpc3BhcmFnZW1lbnQgb2YgaGltLCBhbmQgdGhlbiBjb3Vuc2VsbGVkIHRoZSBwZW9wbGUgdG8gc3BhcmUgc3VjaCBhIG1hbiBhbmQgbm90IGV4cG9zZSBoaW0gdG8gc3VjY2Vzc2l2ZSB3YXJzIGFuZCBwZXJpbHMsIGFza2luZywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaG9tIGVsc2Ugd2lsbCB5b3UgaGF2ZSBpZiB5b3UgbG9zZSBoaW0/PC9xPiBhbGwgd2l0aCBvbmUgYWNjb3JkIHJlcGxpZWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGh5c2VsZi48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0dWx1cywgYWNjb3JkaW5nbHksIHNpbmNlIGhlIGNvdWxkIG5vdCBwZXJzdWFkZSB0aGVtLCByZXRpcmVkOyBidXQgd2hlbiBSb3NjaXVzIGNhbWUgZm9yd2FyZCB0byBzcGVhaywgbm8gb25lIHdvdWxkIGxpc3RlbiB0byBoaW0uIEhlIHRoZXJlZm9yZSBtYWRlIHNpZ25zIHdpdGggaGlzIGZpbmdlcnMgdGhhdCB0aGV5IHNob3VsZCBub3QgY2hvb3NlIFBvbXBleSBhbG9uZSB0byB0aGlzIGNvbW1hbmQsIGJ1dCBnaXZlIGhpbSBhIGNvbGxlYWd1ZS4gQXQgdGhpcywgd2UgYXJlIHRvbGQsIHRoZSBwZW9wbGUgd2VyZSBpbmNlbnNlZCBhbmQgZ2F2ZSBmb3J0aCBzdWNoIGEgc2hvdXQgdGhhdCBhIHJhdmVuIGZseWluZyBvdmVyIHRoZSBmb3J1bSB3YXMgc3R1bm5lZCBieSBpdCBhbmQgZmVsbCBkb3duIGludG8gdGhlIHRocm9uZy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGlzIGl0IGFwcGVhcnMgdGhhdCBzdWNoIGZhbGxpbmcgb2YgYmlyZHMgaXMgbm90IGR1ZSB0byBhIHJ1cHR1cmUgYW5kIGRpdmlzaW9uIG9mIHRoZSBhaXIgd2hlcmVpbiBhIGdyZWF0IHZhY3V1bSBpcyBwcm9kdWNlZCwgYnV0IHRoYXQgdGhleSBhcmUgc3RydWNrIGJ5IHRoZSBibG93IG9mIHRoZSB2b2ljZSwgd2hpY2ggcmFpc2VzIGEgc3VyZ2UgYW5kIGJpbGxvdyBpbiB0aGUgYWlyIHdoZW4gaXQgaXMgYm9ybmUgYWxvZnQgbG91ZCBhbmQgc3Ryb25nLgoJCQk8L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjcgQi5DLiwgUG9tcGV5IGJlaW5nIHRoZW4gdGhpcnR5LW5pbmUgeWVhcnMgb2xkLjwvbm90ZT4gdGhlIHBlb3BsZSByZWNlaXZlZCB0aGVtIHdpdGggZXhjZXNzaXZlIHBsZWFzdXJlLCBidXQgdGhlIGNoaWVmIGFuZCBtb3N0IGluZmx1ZW50aWFsIG1lbiBvZiB0aGUgc2VuYXRlIHRob3VnaHQgdGhhdCBzdWNoIHVubGltaXRlZCBhbmQgYWJzb2x1dGUgcG93ZXIsIHdoaWxlIGl0IHdhcyBiZXlvbmQgdGhlIHJlYWNoIG9mIGVudnksIHdhcyB5ZXQgYSB0aGluZyB0byBiZSBmZWFyZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB0aGV5IGFsbCBvcHBvc2VkIHRoZSBsYXcsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBDYWVzYXI7IGhlIGFkdm9jYXRlZCB0aGUgbGF3LCBub3QgYmVjYXVzZSBoZSBjYXJlZCBpbiB0aGUgbGVhc3QgZm9yIFBvbXBleSwgYnV0IGJlY2F1c2UgZnJvbSB0aGUgb3V0c2V0IGhlIHNvdWdodCB0byBpbmdyYXRpYXRlIGhpbXNlbGYgd2l0aCB0aGUgcGVvcGxlIGFuZCB3aW4gdGhlaXIgc3VwcG9ydC4gVGhlIHJlc3QgdmVoZW1lbnRseSBhdHRhY2tlZCBQb21wZXkuIEFuZCB3aGVuIG9uZSBvZiB0aGUgY29uc3VscyB0b2xkIGhpbSB0aGF0IGlmIGhlIGVtdWxhdGVkIFJvbXVsdXMgaGUgd291bGQgbm90IGVzY2FwZSB0aGUgZmF0ZSBvZiBSb211bHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhhdCBpcywgaGUgd291bGQgYmUgbXlzdGVyaW91c2x5IHB1dCBvdXQgb2YgdGhlIHdheS4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDI3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Sb211bHVzPC90aXRsZT4sIGNoYXB0ZXIgeHh2aWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhlIHdhcyBuZWFyIGJlaW5nIHRvcm4gaW4gcGllY2VzIGJ5IHRoZSBtdWx0aXR1ZGUuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAyNy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tdWx1czwvdGl0bGU+LCBjaGFwdGVyIHh4dmlpLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tdWx1czwvdGl0bGU+LCBjaGFwdGVyIHh4dmlpLjwvdHJhbnNsYXRpb24+"
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIENhdHVsdXMgY2FtZSBmb3J3YXJkIHRvIHNwZWFrIGFnYWluc3QgdGhlIGxhdyB0aGUgcGVvcGxlIGhhZCByZWdhcmQgZW5vdWdoIGZvciBoaW0gdG8gYmUgcXVpZXQgZm9yIHNvbWUgdGltZTsgYnV0IGFmdGVyIGhlIGhhZCBzcG9rZW4gYXQgbGVuZ3RoIGluIFBvbXBleSdzIHByYWlzZSBhbmQgd2l0aG91dCBhbnkgZGlzcGFyYWdlbWVudCBvZiBoaW0sIGFuZCB0aGVuIGNvdW5zZWxsZWQgdGhlIHBlb3BsZSB0byBzcGFyZSBzdWNoIGEgbWFuIGFuZCBub3QgZXhwb3NlIGhpbSB0byBzdWNjZXNzaXZlIHdhcnMgYW5kIHBlcmlscywgYXNraW5nLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hvbSBlbHNlIHdpbGwgeW91IGhhdmUgaWYgeW91IGxvc2UgaGltPzwvcT4gYWxsIHdpdGggb25lIGFjY29yZCByZXBsaWVkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGh5c2VsZi48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkNhdHVsdXMsIGFjY29yZGluZ2x5LCBzaW5jZSBoZSBjb3VsZCBub3QgcGVyc3VhZGUgdGhlbSwgcmV0aXJlZDsgYnV0IHdoZW4gUm9zY2l1cyBjYW1lIGZvcndhcmQgdG8gc3BlYWssIG5vIG9uZSB3b3VsZCBsaXN0ZW4gdG8gaGltLiBIZSB0aGVyZWZvcmUgbWFkZSBzaWducyB3aXRoIGhpcyBmaW5nZXJzIHRoYXQgdGhleSBzaG91bGQgbm90IGNob29zZSBQb21wZXkgYWxvbmUgdG8gdGhpcyBjb21tYW5kLCBidXQgZ2l2ZSBoaW0gYSBjb2xsZWFndWUuIEF0IHRoaXMsIHdlIGFyZSB0b2xkLCB0aGUgcGVvcGxlIHdlcmUgaW5jZW5zZWQgYW5kIGdhdmUgZm9ydGggc3VjaCBhIHNob3V0IHRoYXQgYSByYXZlbiBmbHlpbmcgb3ZlciB0aGUgZm9ydW0gd2FzIHN0dW5uZWQgYnkgaXQgYW5kIGZlbGwgZG93biBpbnRvIHRoZSB0aHJvbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhpcyBpdCBhcHBlYXJzIHRoYXQgc3VjaCBmYWxsaW5nIG9mIGJpcmRzIGlzIG5vdCBkdWUgdG8gYSBydXB0dXJlIGFuZCBkaXZpc2lvbiBvZiB0aGUgYWlyIHdoZXJlaW4gYSBncmVhdCB2YWN1dW0gaXMgcHJvZHVjZWQsIGJ1dCB0aGF0IHRoZXkgYXJlIHN0cnVjayBieSB0aGUgYmxvdyBvZiB0aGUgdm9pY2UsIHdoaWNoIHJhaXNlcyBhIHN1cmdlIGFuZCBiaWxsb3cgaW4gdGhlIGFpciB3aGVuIGl0IGlzIGJvcm5lIGFsb2Z0IGxvdWQgYW5kIHN0cm9uZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSB0aW1lIGJlaW5nLCB0aGVuLCB0aGUgYXNzZW1ibHkgd2FzIGRpc3NvbHZlZDsgYnV0IHdoZW4gdGhlIGRheSBjYW1lIGZvciB0aGUgdm90ZSB1cG9uIHRoZSBsYXcsIFBvbXBleSB3aXRoZHJldyBwcml2YXRlbHkgaW50byB0aGUgY291bnRyeS4gT24gaGVhcmluZywgaG93ZXZlciwgdGhhdCB0aGUgbGF3IGhhZCBiZWVuIHBhc3NlZCwgaGUgZW50ZXJlZCB0aGUgY2l0eSBieSBuaWdodCwgZmVlbGluZyB0aGF0IGhlIHdhcyBzdXJlIHRvIGF3YWtlbiBlbnZ5IGlmIHRoZSBwZW9wbGUgdGhyb25nZWQgdG8gbWVldCBoaW0uIEJ1dCB3aGVuIGRheSBjYW1lLCBoZSBhcHBlYXJlZCBpbiBwdWJsaWMgYW5kIG9mZmVyZWQgc2FjcmlmaWNlLCBhbmQgYXQgYW4gYXNzZW1ibHkgaGVsZCBmb3IgaGltIGhlIG1hbmFnZWQgdG8gZ2V0IG1hbnkgb3RoZXIgdGhpbmdzIGJlc2lkZXMgdGhvc2UgYWxyZWFkeSB2b3RlZCwgYW5kIGFsbW9zdCBkb3VibGVkIGhpcyBhcm1hbWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGZpdmUgaHVuZHJlZCBzaGlwcyB3ZXJlIG1hbm5lZCBmb3IgaGltLCBhbmQgYSBodW5kcmVkIGFuZCB0d2VudHkgdGhvdXNhbmQgbWVuLWF0LWFybXMgYW5kIGZpdmUgdGhvdXNhbmQgaG9yc2VtZW4gd2VyZSByYWlzZWQuIFR3ZW50eS1mb3VyIG1lbiB3aG8gaGFkIGhlbGQgY29tbWFuZCBvciBzZXJ2ZWQgYXMgcHJhZXRvcnMgd2VyZSBjaG9zZW4gZnJvbSB0aGUgc2VuYXRlIGJ5IGhpbSwgYW5kIGhlIGhhZCB0d28gcXVhZXN0b3JzLiBBbmQgc2luY2UgdGhlIHByaWNlcyBvZiBwcm92aXNpb25zIGltbWVkaWF0ZWx5IGZlbGwsIHRoZSBwZW9wbGUgd2VyZSBtb3ZlZCB0byBzYXkgaW4gdGhlaXIgam95IHRoYXQgdGhlIHZlcnkgbmFtZSBvZiBQb21wZXkgaGFkIHB1dCBhbiBlbmQgdG8gdGhlIHdhci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSB0aW1lIGJlaW5nLCB0aGVuLCB0aGUgYXNzZW1ibHkgd2FzIGRpc3NvbHZlZDsgYnV0IHdoZW4gdGhlIGRheSBjYW1lIGZvciB0aGUgdm90ZSB1cG9uIHRoZSBsYXcsIFBvbXBleSB3aXRoZHJldyBwcml2YXRlbHkgaW50byB0aGUgY291bnRyeS4gT24gaGVhcmluZywgaG93ZXZlciwgdGhhdCB0aGUgbGF3IGhhZCBiZWVuIHBhc3NlZCwgaGUgZW50ZXJlZCB0aGUgY2l0eSBieSBuaWdodCwgZmVlbGluZyB0aGF0IGhlIHdhcyBzdXJlIHRvIGF3YWtlbiBlbnZ5IGlmIHRoZSBwZW9wbGUgdGhyb25nZWQgdG8gbWVldCBoaW0uIEJ1dCB3aGVuIGRheSBjYW1lLCBoZSBhcHBlYXJlZCBpbiBwdWJsaWMgYW5kIG9mZmVyZWQgc2FjcmlmaWNlLCBhbmQgYXQgYW4gYXNzZW1ibHkgaGVsZCBmb3IgaGltIGhlIG1hbmFnZWQgdG8gZ2V0IG1hbnkgb3RoZXIgdGhpbmdzIGJlc2lkZXMgdGhvc2UgYWxyZWFkeSB2b3RlZCwgYW5kIGFsbW9zdCBkb3VibGVkIGhpcyBhcm1hbWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBmaXZlIGh1bmRyZWQgc2hpcHMgd2VyZSBtYW5uZWQgZm9yIGhpbSwgYW5kIGEgaHVuZHJlZCBhbmQgdHdlbnR5IHRob3VzYW5kIG1lbi1hdC1hcm1zIGFuZCBmaXZlIHRob3VzYW5kIGhvcnNlbWVuIHdlcmUgcmFpc2VkLiBUd2VudHktZm91ciBtZW4gd2hvIGhhZCBoZWxkIGNvbW1hbmQgb3Igc2VydmVkIGFzIHByYWV0b3JzIHdlcmUgY2hvc2VuIGZyb20gdGhlIHNlbmF0ZSBieSBoaW0sIGFuZCBoZSBoYWQgdHdvIHF1YWVzdG9ycy4gQW5kIHNpbmNlIHRoZSBwcmljZXMgb2YgcHJvdmlzaW9ucyBpbW1lZGlhdGVseSBmZWxsLCB0aGUgcGVvcGxlIHdlcmUgbW92ZWQgdG8gc2F5IGluIHRoZWlyIGpveSB0aGF0IHRoZSB2ZXJ5IG5hbWUgb2YgUG9tcGV5IGhhZCBwdXQgYW4gZW5kIHRvIHRoZSB3YXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIGRpdmlkZWQgdGhlIHdhdGVycyBhbmQgdGhlIGFkamFjZW50IGNvYXN0czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMjUuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHYuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG9mIHRoZSBNZWRpdGVycmFuZWFuIFNlYSBpbnRvIHRoaXJ0ZWVuIGRpc3RyaWN0cywgYW5kIGFzc2lnbmVkIHRvIGVhY2ggYSBjZXJ0YWluIG51bWJlciBvZiBzaGlwcyB3aXRoIGEgY29tbWFuZGVyLCBhbmQgd2l0aCBoaXMgZm9yY2VzIHRodXMgc2NhdHRlcmVkIGluIGFsbCBxdWFydGVycyBoZSBlbmNvbXBhc3NlZCB3aG9sZSBmbGVldHMgb2YgcGlyYXRpY2FsIHNoaXBzIHRoYXQgZmVsbCBpbiBoaXMgd2F5LCBhbmQgc3RyYWlnaHQtd2F5IGh1bnRlZCB0aGVtIGRvd24gYW5kIGJyb3VnaHQgdGhlbSBpbnRvIHBvcnQ7IG90aGVycyBzdWNjZWVkZWQgaW4gZGlzcGVyc2luZyBhbmQgZXNjYXBpbmcsIGFuZCBzb3VnaHQgdGhlaXIgaGl2ZSwgYXMgaXQgd2VyZSwgaHVycnlpbmcgZnJvbSBhbGwgcXVhcnRlcnMgaW50byBDaWxpY2lhLiBBZ2FpbnN0IHRoZXNlIFBvbXBleSBpbnRlbmRlZCB0byBwcm9jZWVkIGluIHBlcnNvbiB3aXRoIGhpcyBzaXh0eSBiZXN0IHNoaXBzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBkaWQgbm90LCBob3dldmVyLCBzYWlsIGFnYWluc3QgdGhlbSB1bnRpbCBoZSBoYWQgZW50aXJlbHkgY2xlYXJlZCBvZiB0aGVpciBwaXJhdGVzIHRoZSBUeXJyaGVuaWFuIFNlYSwgdGhlIExpYnlhbiBTZWEsIGFuZCB0aGUgc2VhIGFib3V0IFNhcmRpbmlhLCBDb3JzaWNhLCBhbmQgU2ljaWx5LCBpbiBmb3J0eSBkYXlzIGFsbCB0b2xkLiBUaGlzIHdhcyBvd2luZyB0byBoaXMgb3duIHRpcmVsZXNzIGVuZXJneSBhbmQgdGhlIHplYWwgb2YgaGlzIGxpZXV0ZW5hbnRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIGRpdmlkZWQgdGhlIHdhdGVycyBhbmQgdGhlIGFkamFjZW50IGNvYXN0czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDI1LjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh2LiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBvZiB0aGUgTWVkaXRlcnJhbmVhbiBTZWEgaW50byB0aGlydGVlbiBkaXN0cmljdHMsIGFuZCBhc3NpZ25lZCB0byBlYWNoIGEgY2VydGFpbiBudW1iZXIgb2Ygc2hpcHMgd2l0aCBhIGNvbW1hbmRlciwgYW5kIHdpdGggaGlzIGZvcmNlcyB0aHVzIHNjYXR0ZXJlZCBpbiBhbGwgcXVhcnRlcnMgaGUgZW5jb21wYXNzZWQgd2hvbGUgZmxlZXRzIG9mIHBpcmF0aWNhbCBzaGlwcyB0aGF0IGZlbGwgaW4gaGlzIHdheSwgYW5kIHN0cmFpZ2h0LXdheSBodW50ZWQgdGhlbSBkb3duIGFuZCBicm91Z2h0IHRoZW0gaW50byBwb3J0OyBvdGhlcnMgc3VjY2VlZGVkIGluIGRpc3BlcnNpbmcgYW5kIGVzY2FwaW5nLCBhbmQgc291Z2h0IHRoZWlyIGhpdmUsIGFzIGl0IHdlcmUsIGh1cnJ5aW5nIGZyb20gYWxsIHF1YXJ0ZXJzIGludG8gQ2lsaWNpYS4gQWdhaW5zdCB0aGVzZSBQb21wZXkgaW50ZW5kZWQgdG8gcHJvY2VlZCBpbiBwZXJzb24gd2l0aCBoaXMgc2l4dHkgYmVzdCBzaGlwcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAyNS4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4di4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGRpZCBub3QsIGhvd2V2ZXIsIHNhaWwgYWdhaW5zdCB0aGVtIHVudGlsIGhlIGhhZCBlbnRpcmVseSBjbGVhcmVkIG9mIHRoZWlyIHBpcmF0ZXMgdGhlIFR5cnJoZW5pYW4gU2VhLCB0aGUgTGlieWFuIFNlYSwgYW5kIHRoZSBzZWEgYWJvdXQgU2FyZGluaWEsIENvcnNpY2EsIGFuZCBTaWNpbHksIGluIGZvcnR5IGRheXMgYWxsIHRvbGQuIFRoaXMgd2FzIG93aW5nIHRvIGhpcyBvd24gdGlyZWxlc3MgZW5lcmd5IGFuZCB0aGUgemVhbCBvZiBoaXMgbGlldXRlbmFudHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgY29uc3VsIFBpc28gYXQgUm9tZSwgb3V0IG9mIHdyYXRoIGFuZCBlbnZ5LCB3YXMgaW50ZXJmZXJpbmcgd2l0aCBQb21wZXkncyBlcXVpcG1lbnQgYW5kIGRpc2NoYXJnaW5nIGhpcyBjcmV3cyA7IFBvbXBleSB0aGVyZWZvcmUgc2VudCBoaXMgZmxlZXQgcm91bmQgdG8gQnJ1bmRpc2l1bSwgd2hpbGUgaGUgaGltc2VsZiB3ZW50IHVwIGJ5IHdheSBvZiBUdXNjYW55IHRvIFJvbWUuIE9uIGxlYXJuaW5nIG9mIHRoaXMsIHRoZSBjaXRpemVucyBhbGwgc3RyZWFtZWQgb3V0IGludG8gdGhlIHJvYWQsIGp1c3QgYXMgaWYgdGhleSBoYWQgbm90IGVzY29ydGVkIGhpbSBmb3J0aCBvbmx5IGEgZmV3IGRheXMgYmVmb3JlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGNhdXNlZCB0aGVpciBqb3kgd2FzIHRoZSB1bmhvcGVkIGZvciByYXBpZGl0eSBvZiB0aGUgY2hhbmdlLCB0aGUgbWFya2V0IGJlaW5nIG5vdyBmaWxsZWQgdG8gb3ZlcmZsb3dpbmcgd2l0aCBwcm92aXNpb25zLiBBcyBhIGNvbnNlcXVlbmNlIFBpc28gY2FtZSBuZWFyIGJlaW5nIGRlcHJpdmVkIG9mIGhpcyBjb25zdWxzaGlwLCBhbmQgR2FiaW5pdXMgaGFkIHRoZSByZXF1aXNpdGUgbGF3IGFscmVhZHkgd3JpdHRlbiBvdXQuIEJ1dCBQb21wZXkgcHJldmVudGVkIHRoaXMsIGFzIHdlbGwgYXMgb3RoZXIgaG9zdGlsZSBhY3RzLCBhbmQgYWZ0ZXIgYXJyYW5naW5nIGV2ZXJ5dGhpbmcgZWxzZSBpbiBhIHJlYXNvbmFibGUgbWFubmVyIGFuZCBnZXR0aW5nIHdoYXQgaGUgd2FudGVkLCB3ZW50IGRvd24gdG8gQnJ1bmRpc2l1bSBhbmQgc2V0IHNhaWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG91Z2ggaGlzIGltbWVkaWF0ZSBidXNpbmVzcyB3YXMgdXJnZW50IGFuZCBoZSBzYWlsZWQgcGFzdCBvdGhlciBjaXRpZXMgaW4gaGlzIGhhc3RlLCBzdGlsbCwgaGUgY291bGQgbm90IHBhc3MgQXRoZW5zIGJ5LCBidXQgd2VudCB1cCBpbnRvIHRoZSBjaXR5LCBzYWNyaWZpY2VkIHRvIHRoZSBnb2RzLCBhbmQgYWRkcmVzc2VkIHRoZSBwZW9wbGUuIEp1c3QgYXMgaGUgd2FzIGxlYXZpbmcgdGhlIGNpdHksIGhlIHJlYWQgdHdvIGluc2NyaXB0aW9ucywgZWFjaCBvZiBhIHNpbmdsZSB2ZXJzZSwgYWRkcmVzc2VkIHRvIGhpbSwgb25lIGluc2lkZSB0aGUgZ2F0ZTrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+QXMgdGhvdSBrbm93ZXN0IHRob3UgYXJ0IG1vcnRhbCwgaW4gc28gZmFyIHRob3UgYXJ0IGEgZ29kOzwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4gYW5kIHRoZSBvdGhlciBvdXRzaWRlIAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5XZSBhd2FpdGVkLCB3ZSBzYWx1dGVkLCB3ZSBoYXZlIHNlZW4sIGFuZCBub3cgY29uZHVjdCB0aGVlIGZvcnRoLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIG9mIHRoZSBwaXJhdGUgYmFuZHMgdGhhdCB3ZXJlIHN0aWxsIHJvdmluZyBhdCBsYXJnZSBiZWdnZWQgZm9yIG1lcmN5LCBhbmQgc2luY2UgaGUgdHJlYXRlZCB0aGVtIGh1bWFuZWx5LCBhbmQgYWZ0ZXIgc2VpemluZyB0aGVpciBzaGlwcyBhbmQgcGVyc29ucyBkaWQgdGhlbSBubyBmdXJ0aGVyIGhhcm0sIHRoZSByZXN0IGJlY2FtZSBob3BlZnVsIG9mIG1lcmN5IHRvbywgYW5kIG1hZGUgdGhlaXIgZXNjYXBlIGZyb20gdGhlIG90aGVyIGNvbW1hbmRlcnMsIGJldG9vayB0aGVtc2VsdmVzIHRvIFBvbXBleSB3aXRoIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiwgYW5kIHN1cnJlbmRlcmVkIHRvIGhpbS4gQWxsIHRoZXNlIGhlIHNwYXJlZCwgYW5kIGl0IHdhcyBjaGllZmx5IGJ5IHRoZWlyIGFpZCB0aGF0IGhlIHRyYWNrZWQgZG93biwgc2VpemVkLCBhbmQgcHVuaXNoZWQgdGhvc2Ugd2hvIHdlcmUgc3RpbGwgbHVya2luZyBpbiBjb25jZWFsbWVudCBiZWNhdXNlIGNvbnNjaW91cyBvZiB1bnBhcmRvbmFibGUgY3JpbWVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBjb25zdWwgUGlzbyBhdCBSb21lLCBvdXQgb2Ygd3JhdGggYW5kIGVudnksIHdhcyBpbnRlcmZlcmluZyB3aXRoIFBvbXBleSdzIGVxdWlwbWVudCBhbmQgZGlzY2hhcmdpbmcgaGlzIGNyZXdzIDsgUG9tcGV5IHRoZXJlZm9yZSBzZW50IGhpcyBmbGVldCByb3VuZCB0byBCcnVuZGlzaXVtLCB3aGlsZSBoZSBoaW1zZWxmIHdlbnQgdXAgYnkgd2F5IG9mIFR1c2NhbnkgdG8gUm9tZS4gT24gbGVhcm5pbmcgb2YgdGhpcywgdGhlIGNpdGl6ZW5zIGFsbCBzdHJlYW1lZCBvdXQgaW50byB0aGUgcm9hZCwganVzdCBhcyBpZiB0aGV5IGhhZCBub3QgZXNjb3J0ZWQgaGltIGZvcnRoIG9ubHkgYSBmZXcgZGF5cyBiZWZvcmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoYXQgY2F1c2VkIHRoZWlyIGpveSB3YXMgdGhlIHVuaG9wZWQgZm9yIHJhcGlkaXR5IG9mIHRoZSBjaGFuZ2UsIHRoZSBtYXJrZXQgYmVpbmcgbm93IGZpbGxlZCB0byBvdmVyZmxvd2luZyB3aXRoIHByb3Zpc2lvbnMuIEFzIGEgY29uc2VxdWVuY2UgUGlzbyBjYW1lIG5lYXIgYmVpbmcgZGVwcml2ZWQgb2YgaGlzIGNvbnN1bHNoaXAsIGFuZCBHYWJpbml1cyBoYWQgdGhlIHJlcXVpc2l0ZSBsYXcgYWxyZWFkeSB3cml0dGVuIG91dC4gQnV0IFBvbXBleSBwcmV2ZW50ZWQgdGhpcywgYXMgd2VsbCBhcyBvdGhlciBob3N0aWxlIGFjdHMsIGFuZCBhZnRlciBhcnJhbmdpbmcgZXZlcnl0aGluZyBlbHNlIGluIGEgcmVhc29uYWJsZSBtYW5uZXIgYW5kIGdldHRpbmcgd2hhdCBoZSB3YW50ZWQsIHdlbnQgZG93biB0byBCcnVuZGlzaXVtIGFuZCBzZXQgc2FpbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG91Z2ggaGlzIGltbWVkaWF0ZSBidXNpbmVzcyB3YXMgdXJnZW50IGFuZCBoZSBzYWlsZWQgcGFzdCBvdGhlciBjaXRpZXMgaW4gaGlzIGhhc3RlLCBzdGlsbCwgaGUgY291bGQgbm90IHBhc3MgQXRoZW5zIGJ5LCBidXQgd2VudCB1cCBpbnRvIHRoZSBjaXR5LCBzYWNyaWZpY2VkIHRvIHRoZSBnb2RzLCBhbmQgYWRkcmVzc2VkIHRoZSBwZW9wbGUuIEp1c3QgYXMgaGUgd2FzIGxlYXZpbmcgdGhlIGNpdHksIGhlIHJlYWQgdHdvIGluc2NyaXB0aW9ucywgZWFjaCBvZiBhIHNpbmdsZSB2ZXJzZSwgYWRkcmVzc2VkIHRvIGhpbSwgb25lIGluc2lkZSB0aGUgZ2F0ZTrigJQKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkFzIHRob3Uga25vd2VzdCB0aG91IGFydCBtb3J0YWwsIGluIHNvIGZhciB0aG91IGFydCBhIGdvZDs8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+IGFuZCB0aGUgb3RoZXIgb3V0c2lkZSAKCQkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXMgdGhvdSBrbm93ZXN0IHRob3UgYXJ0IG1vcnRhbCwgaW4gc28gZmFyIHRob3UgYXJ0IGEgZ29kOzwvbD4KCQkJCSAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2UgYXdhaXRlZCwgd2Ugc2FsdXRlZCwgd2UgaGF2ZSBzZWVuLCBhbmQgbm93IGNvbmR1Y3QgdGhlZSBmb3J0aC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+IAoJCQkJICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPldlIGF3YWl0ZWQsIHdlIHNhbHV0ZWQsIHdlIGhhdmUgc2VlbiwgYW5kIG5vdyBjb25kdWN0IHRoZWUgZm9ydGguPC9sPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgb2YgdGhlIHBpcmF0ZSBiYW5kcyB0aGF0IHdlcmUgc3RpbGwgcm92aW5nIGF0IGxhcmdlIGJlZ2dlZCBmb3IgbWVyY3ksIGFuZCBzaW5jZSBoZSB0cmVhdGVkIHRoZW0gaHVtYW5lbHksIGFuZCBhZnRlciBzZWl6aW5nIHRoZWlyIHNoaXBzIGFuZCBwZXJzb25zIGRpZCB0aGVtIG5vIGZ1cnRoZXIgaGFybSwgdGhlIHJlc3QgYmVjYW1lIGhvcGVmdWwgb2YgbWVyY3kgdG9vLCBhbmQgbWFkZSB0aGVpciBlc2NhcGUgZnJvbSB0aGUgb3RoZXIgY29tbWFuZGVycywgYmV0b29rIHRoZW1zZWx2ZXMgdG8gUG9tcGV5IHdpdGggdGhlaXIgd2l2ZXMgYW5kIGNoaWxkcmVuLCBhbmQgc3VycmVuZGVyZWQgdG8gaGltLiBBbGwgdGhlc2UgaGUgc3BhcmVkLCBhbmQgaXQgd2FzIGNoaWVmbHkgYnkgdGhlaXIgYWlkIHRoYXQgaGUgdHJhY2tlZCBkb3duLCBzZWl6ZWQsIGFuZCBwdW5pc2hlZCB0aG9zZSB3aG8gd2VyZSBzdGlsbCBsdXJraW5nIGluIGNvbmNlYWxtZW50IGJlY2F1c2UgY29uc2Npb3VzIG9mIHVucGFyZG9uYWJsZSBjcmltZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgbW9zdCBudW1lcm91cyBhbmQgcG93ZXJmdWwgaGFkIGJlc3Rvd2VkIHRoZWlyIGZhbWlsaWVzIGFuZCB0cmVhc3VyZXMgYW5kIHVzZWxlc3MgZm9sayBpbiBmb3J0cyBhbmQgc3Ryb25nIGNpdGFkZWxzIG5lYXIgdGhlIFRhdXJ1cyBtb3VudGFpbnMsIHdoaWxlIHRoZXkgdGhlbXNlbHZlcyBtYW5uZWQgdGhlaXIgc2hpcHMgYW5kIGF3YWl0ZWQgUG9tcGV5J3MgYXR0YWNrIG5lYXIgdGhlIHByb21vbnRvcnkgb2YgQ29yYWNlc2l1bSBpbiBDaWxpY2lhOyBoZXJlIHRoZXkgd2VyZSBkZWZlYXRlZCBpbiBhIGJhdHRsZSBhbmQgdGhlbiBiZXNpZWdlZC4gQXQgbGFzdCwgaG93ZXZlciwgdGhleSBzZW50IHN1cHBsaWFudCBtZXNzYWdlcyBhbmQgc3VycmVuZGVyZWQgdGhlbXNlbHZlcywgdG9nZXRoZXIgd2l0aCB0aGUgY2l0aWVzIGFuZCBpc2xhbmRzIG9mIHdoaWNoIHRoZXkgd2VyZSBpbiBjb250cm9sOyB0aGVzZSB0aGV5IGhhZCBmb3J0aWZpZWQsIG1ha2luZyB0aGVtIGhhcmQgdG8gZ2V0IGF0IGFuZCBkaWZmaWN1bHQgdG8gdGFrZSBieSBzdG9ybS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdhciB3YXMgdGhlcmVmb3JlIGJyb3VnaHQgdG8gYW4gZW5kIGFuZCBhbGwgcGlyYWN5IGRyaXZlbiBmcm9tIHRoZSBzZWEgaW4gbGVzcyB0aGFuIHRocmVlIG1vbnRocywgYW5kIGJlc2lkZXMgbWFueSBvdGhlciBzaGlwcywgUG9tcGV5IHJlY2VpdmVkIGluIHN1cnJlbmRlciBuaW5ldHkgd2hpY2ggaGFkIGJyYXplbiBiZWFrcy4gVGhlIG1lbiB0aGVtc2VsdmVzLCB3aG8gd2VyZSBtb3JlIHRoYW4gdHdlbnR5IHRob3VzYW5kIGluIG51bWJlciwgaGUgZGlkIG5vdCBvbmNlIHRoaW5rIG9mIHB1dHRpbmcgdG8gZGVhdGg7IGFuZCB5ZXQgdG8gbGV0IHRoZW0gZ28gYW5kIHN1ZmZlciB0aGVtIHRvIGRpc3BlcnNlIG9yIGJhbmQgdG9nZXRoZXIgYWdhaW4sIHBvb3IsIHdhcmxpa2UsIGFuZCBudW1lcm91cyBhcyB0aGV5IHdlcmUsIGhlIHRob3VnaHQgd2FzIG5vdCB3ZWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5SZWZsZWN0aW5nLCB0aGVyZWZvcmUsIHRoYXQgYnkgbmF0dXJlIG1hbiBuZWl0aGVyIGlzIG5vciBiZWNvbWVzIGEgd2lsZCBvciBhbiB1bnNvY2lhbCBjcmVhdHVyZSwgYnV0IGlzIHRyYW5zZm9ybWVkIGJ5IHRoZSB1bm5hdHVyYWwgcHJhY3RpY2Ugb2YgdmljZSwgd2hlcmVhcyBoZSBtYXkgYmUgc29mdGVuZWQgYnkgbmV3IGN1c3RvbXMgYW5kIGEgY2hhbmdlIG9mIHBsYWNlIGFuZCBsaWZlOyBhbHNvIHRoYXQgZXZlbiB3aWxkIGJlYXN0cyBwdXQgb2ZmIHRoZWlyIGZpZXJjZSBhbmQgc2F2YWdlIHdheXMgd2hlbiB0aGV5IHBhcnRha2Ugb2YgYSBnZW50bGVyIG1vZGUgb2YgbGlmZSwgaGUgZGV0ZXJtaW5lZCB0byB0cmFuc2ZlciB0aGUgbWVuIGZyb20gdGhlIHNlYSB0byBsYW5kLCBhbmQgbGV0IHRoZW0gaGF2ZSBhIHRhc3RlIG9mIGdlbnRsZSBsaWZlIGJ5IGJlaW5nIGFjY3VzdG9tZWQgdG8gZHdlbGwgaW4gY2l0aWVzIGFuZCB0byB0aWxsIHRoZSBncm91bmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgb2YgdGhlbSwgdGhlcmVmb3JlLCB3ZXJlIHJlY2VpdmVkIGFuZCBpbmNvcnBvcmF0ZWQgaW50byB0aGUgc21hbGwgYW5kIGhhbGYtZGVzZXJ0ZWQgY2l0aWVzIG9mIENpbGljaWEsIHdoaWNoIGFjcXVpcmVkIGFkZGl0aW9uYWwgdGVycml0b3J5OyBhbmQgYWZ0ZXIgcmVzdG9yaW5nIHRoZSBjaXR5IG9mIFNvbGksIHdoaWNoIGhhZCBsYXRlbHkgYmVlbiBkZXZhc3RhdGVkIGJ5IFRpZ3JhbmVzLCB0aGUga2luZyBvZiBBcm1lbmlhLCBQb21wZXkgc2V0dGxlZCBtYW55IHRoZXJlLiBUbyBtb3N0IG9mIHRoZW0sIGhvd2V2ZXIsIGhlIGdhdmUgYXMgYSByZXNpZGVuY2UgRHltZSBpbiBBY2hhZWEsIHdoaWNoIHdhcyB0aGVuIGJlcmVmdCBvZiBtZW4gYW5kIGhhZCBtdWNoIGdvb2QgbGFuZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBtb3N0IG51bWVyb3VzIGFuZCBwb3dlcmZ1bCBoYWQgYmVzdG93ZWQgdGhlaXIgZmFtaWxpZXMgYW5kIHRyZWFzdXJlcyBhbmQgdXNlbGVzcyBmb2xrIGluIGZvcnRzIGFuZCBzdHJvbmcgY2l0YWRlbHMgbmVhciB0aGUgVGF1cnVzIG1vdW50YWlucywgd2hpbGUgdGhleSB0aGVtc2VsdmVzIG1hbm5lZCB0aGVpciBzaGlwcyBhbmQgYXdhaXRlZCBQb21wZXkncyBhdHRhY2sgbmVhciB0aGUgcHJvbW9udG9yeSBvZiBDb3JhY2VzaXVtIGluIENpbGljaWE7IGhlcmUgdGhleSB3ZXJlIGRlZmVhdGVkIGluIGEgYmF0dGxlIGFuZCB0aGVuIGJlc2llZ2VkLiBBdCBsYXN0LCBob3dldmVyLCB0aGV5IHNlbnQgc3VwcGxpYW50IG1lc3NhZ2VzIGFuZCBzdXJyZW5kZXJlZCB0aGVtc2VsdmVzLCB0b2dldGhlciB3aXRoIHRoZSBjaXRpZXMgYW5kIGlzbGFuZHMgb2Ygd2hpY2ggdGhleSB3ZXJlIGluIGNvbnRyb2w7IHRoZXNlIHRoZXkgaGFkIGZvcnRpZmllZCwgbWFraW5nIHRoZW0gaGFyZCB0byBnZXQgYXQgYW5kIGRpZmZpY3VsdCB0byB0YWtlIGJ5IHN0b3JtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3YXIgd2FzIHRoZXJlZm9yZSBicm91Z2h0IHRvIGFuIGVuZCBhbmQgYWxsIHBpcmFjeSBkcml2ZW4gZnJvbSB0aGUgc2VhIGluIGxlc3MgdGhhbiB0aHJlZSBtb250aHMsIGFuZCBiZXNpZGVzIG1hbnkgb3RoZXIgc2hpcHMsIFBvbXBleSByZWNlaXZlZCBpbiBzdXJyZW5kZXIgbmluZXR5IHdoaWNoIGhhZCBicmF6ZW4gYmVha3MuIFRoZSBtZW4gdGhlbXNlbHZlcywgd2hvIHdlcmUgbW9yZSB0aGFuIHR3ZW50eSB0aG91c2FuZCBpbiBudW1iZXIsIGhlIGRpZCBub3Qgb25jZSB0aGluayBvZiBwdXR0aW5nIHRvIGRlYXRoOyBhbmQgeWV0IHRvIGxldCB0aGVtIGdvIGFuZCBzdWZmZXIgdGhlbSB0byBkaXNwZXJzZSBvciBiYW5kIHRvZ2V0aGVyIGFnYWluLCBwb29yLCB3YXJsaWtlLCBhbmQgbnVtZXJvdXMgYXMgdGhleSB3ZXJlLCBoZSB0aG91Z2h0IHdhcyBub3Qgd2VsbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlJlZmxlY3RpbmcsIHRoZXJlZm9yZSwgdGhhdCBieSBuYXR1cmUgbWFuIG5laXRoZXIgaXMgbm9yIGJlY29tZXMgYSB3aWxkIG9yIGFuIHVuc29jaWFsIGNyZWF0dXJlLCBidXQgaXMgdHJhbnNmb3JtZWQgYnkgdGhlIHVubmF0dXJhbCBwcmFjdGljZSBvZiB2aWNlLCB3aGVyZWFzIGhlIG1heSBiZSBzb2Z0ZW5lZCBieSBuZXcgY3VzdG9tcyBhbmQgYSBjaGFuZ2Ugb2YgcGxhY2UgYW5kIGxpZmU7IGFsc28gdGhhdCBldmVuIHdpbGQgYmVhc3RzIHB1dCBvZmYgdGhlaXIgZmllcmNlIGFuZCBzYXZhZ2Ugd2F5cyB3aGVuIHRoZXkgcGFydGFrZSBvZiBhIGdlbnRsZXIgbW9kZSBvZiBsaWZlLCBoZSBkZXRlcm1pbmVkIHRvIHRyYW5zZmVyIHRoZSBtZW4gZnJvbSB0aGUgc2VhIHRvIGxhbmQsIGFuZCBsZXQgdGhlbSBoYXZlIGEgdGFzdGUgb2YgZ2VudGxlIGxpZmUgYnkgYmVpbmcgYWNjdXN0b21lZCB0byBkd2VsbCBpbiBjaXRpZXMgYW5kIHRvIHRpbGwgdGhlIGdyb3VuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgb2YgdGhlbSwgdGhlcmVmb3JlLCB3ZXJlIHJlY2VpdmVkIGFuZCBpbmNvcnBvcmF0ZWQgaW50byB0aGUgc21hbGwgYW5kIGhhbGYtZGVzZXJ0ZWQgY2l0aWVzIG9mIENpbGljaWEsIHdoaWNoIGFjcXVpcmVkIGFkZGl0aW9uYWwgdGVycml0b3J5OyBhbmQgYWZ0ZXIgcmVzdG9yaW5nIHRoZSBjaXR5IG9mIFNvbGksIHdoaWNoIGhhZCBsYXRlbHkgYmVlbiBkZXZhc3RhdGVkIGJ5IFRpZ3JhbmVzLCB0aGUga2luZyBvZiBBcm1lbmlhLCBQb21wZXkgc2V0dGxlZCBtYW55IHRoZXJlLiBUbyBtb3N0IG9mIHRoZW0sIGhvd2V2ZXIsIGhlIGdhdmUgYXMgYSByZXNpZGVuY2UgRHltZSBpbiBBY2hhZWEsIHdoaWNoIHdhcyB0aGVuIGJlcmVmdCBvZiBtZW4gYW5kIGhhZCBtdWNoIGdvb2QgbGFuZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgaGlzIG1hbGlnbmVycyBmb3VuZCBmYXVsdCB3aXRoIHRoZXNlIG1lYXN1cmVzLCBhbmQgZXZlbiBoaXMgYmVzdCBmcmllbmRzIHdlcmUgbm90IHBsZWFzZWQgd2l0aCBoaXMgdHJlYXRtZW50IG9mIE1ldGVsbHVzIGluIENyZXRlLiBNZXRlbGx1cywgYSBraW5zbWFuIG9mIHRoZSBNZXRlbGx1cyB3aG8gd2FzIGEgY29sbGVhZ3VlIG9mIFBvbXBleSBpbiBTcGFpbiwgaGFkIGJlZW4gc2VudCBhcyBnZW5lcmFsIHRvIENyZXRlIGJlZm9yZSBQb21wZXkgd2FzIGNob3NlbiB0byBoaXMgY29tbWFuZDsgZm9yIENyZXRlIHdhcyBhIGtpbmQgb2Ygc2Vjb25kIHNvdXJjZSBmb3IgcGlyYXRlcywgbmV4dCB0byBDaWxpY2lhLiBNZXRlbGx1cyBoZW1tZWQgaW4gbWFueSBvZiB0aGVtIGFuZCB3YXMga2lsbGluZyBhbmQgZGVzdHJveWluZyB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhvc2Ugd2hvIHN0aWxsIHN1cnZpdmVkIGFuZCB3ZXJlIGJlc2llZ2VkIHNlbnQgc3VwcGxpYW50IG1lc3NhZ2VzIHRvIFBvbXBleSBhbmQgaW52aXRlZCBoaW0gaW50byB0aGUgaXNsYW5kLCBhbGxlZ2luZyB0aGF0IGl0IHdhcyBhIHBhcnQgb2YgaGlzIGdvdmVybm1lbnQsIGFuZCB0aGF0IGFsbCBwYXJ0cyBvZiBpdCB3ZXJlIHdpdGhpbiB0aGUgbGltaXQgdG8gYmUgbWVhc3VyZWQgZnJvbSB0aGUgc2VhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMjUuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHYuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFBvbXBleSBhY2NlcHRlZCB0aGUgaW52aXRhdGlvbiBhbmQgd3JvdGUgdG8gTWV0ZWxsdXMgcHV0dGluZyBhIHN0b3AgdG8gaGlzIHdhci4gSGUgYWxzbyB3cm90ZSB0aGUgY2l0aWVzIG5vdCB0byBwYXkgYW55IGF0dGVudGlvbiB0byBNZXRlbGx1cywgYW5kIHNlbnQgdGhlbSBvbmUgb2YgaGlzIG93biBvZmZpY2VycyBhcyBnZW5lcmFsLCBuYW1lbHksIEx1Y2l1cyBPY3Rhdml1cywgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+d2hvIGVudGVyZWQgdGhlIHN0cm9uZ2hvbGRzIG9mIHRoZSBiZXNpZWdlZCBwaXJhdGVzIGFuZCBmb3VnaHQgb24gdGhlaXIgc2lkZSwgdGh1cyBtYWtpbmcgUG9tcGV5IG5vdCBvbmx5IG9kaW91cyBhbmQgb3BwcmVzc2l2ZSwgYnV0IGFjdHVhbGx5IHJpZGljdWxvdXMsIHNpbmNlIGhlIGxlbnQgaGlzIG5hbWUgdG8gZ29kbGVzcyBtaXNjcmVhbnRzLCBhbmQgdGhyZXcgYXJvdW5kIHRoZW0gdGhlIG1hbnRsZSBvZiBoaXMgcmVwdXRhdGlvbiB0byBzZXJ2ZSBsaWtlIGEgY2hhcm0gYWdhaW5zdCBldmlsLCB0aHJvdWdoIGVudnkgYW5kIGplYWxvdXN5IG9mIE1ldGVsbHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm90IGV2ZW4gQWNoaWxsZXMgcGxheWVkIHRoZSBwYXJ0IG9mIGEgbWFuLCBtZW4gc2FpZCwgYnV0IHRoYXQgb2YgYSB5b3V0aCB3aG9sbHkgY3JhemVkIGFuZCBmcmFudGljIGluIGhpcyBxdWVzdCBvZiBnbG9yeSwgd2hlbiBoZSBtYWRlIGEgc2lnbiB0byB0aGUgcmVzdCB3aGljaCBwcmV2ZW50ZWQgdGhlbSBmcm9tIHNtaXRpbmcgSGVjdG9yLCAKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+TGVzdCBzb21lIG9uZSBlbHNlIHdpbiBob25vdXIgYnkgdGhlIGJsb3csIGFuZCBoZSBjb21lIG9ubHkgc2Vjb25kOzwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAyMi4yMDciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgeHhpaS4gMjA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGVyZWFzIFBvbXBleSBhY3R1YWxseSBmb3VnaHQgaW4gYmVoYWxmIG9mIHRoZSBjb21tb24gZW5lbXkgYW5kIHNhdmVkIHRoZWlyIGxpdmVzLCB0aGF0IGhlIG1pZ2h0IHJvYiBvZiBoaXMgdHJpdW1waCBhIGdlbmVyYWwgd2hvIGhhZCB0b2lsZWQgaGFyZCB0byB3aW4gaXQuIE1ldGVsbHVzLCBob3dldmVyLCB3b3VsZCBub3QgZ2l2ZSBpbiwgYnV0IGNhcHR1cmVkIHRoZSBwaXJhdGVzIGFuZCBwdW5pc2hlZCB0aGVtLCBhbmQgdGhlbiBzZW50IE9jdGF2aXVzIGF3YXkgYWZ0ZXIgaW5zdWx0aW5nIGFuZCBhYnVzaW5nIGhpbSBiZWZvcmUgdGhlIGFybXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgaGlzIG1hbGlnbmVycyBmb3VuZCBmYXVsdCB3aXRoIHRoZXNlIG1lYXN1cmVzLCBhbmQgZXZlbiBoaXMgYmVzdCBmcmllbmRzIHdlcmUgbm90IHBsZWFzZWQgd2l0aCBoaXMgdHJlYXRtZW50IG9mIE1ldGVsbHVzIGluIENyZXRlLiBNZXRlbGx1cywgYSBraW5zbWFuIG9mIHRoZSBNZXRlbGx1cyB3aG8gd2FzIGEgY29sbGVhZ3VlIG9mIFBvbXBleSBpbiBTcGFpbiwgaGFkIGJlZW4gc2VudCBhcyBnZW5lcmFsIHRvIENyZXRlIGJlZm9yZSBQb21wZXkgd2FzIGNob3NlbiB0byBoaXMgY29tbWFuZDsgZm9yIENyZXRlIHdhcyBhIGtpbmQgb2Ygc2Vjb25kIHNvdXJjZSBmb3IgcGlyYXRlcywgbmV4dCB0byBDaWxpY2lhLiBNZXRlbGx1cyBoZW1tZWQgaW4gbWFueSBvZiB0aGVtIGFuZCB3YXMga2lsbGluZyBhbmQgZGVzdHJveWluZyB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG9zZSB3aG8gc3RpbGwgc3Vydml2ZWQgYW5kIHdlcmUgYmVzaWVnZWQgc2VudCBzdXBwbGlhbnQgbWVzc2FnZXMgdG8gUG9tcGV5IGFuZCBpbnZpdGVkIGhpbSBpbnRvIHRoZSBpc2xhbmQsIGFsbGVnaW5nIHRoYXQgaXQgd2FzIGEgcGFydCBvZiBoaXMgZ292ZXJubWVudCwgYW5kIHRoYXQgYWxsIHBhcnRzIG9mIGl0IHdlcmUgd2l0aGluIHRoZSBsaW1pdCB0byBiZSBtZWFzdXJlZCBmcm9tIHRoZSBzZWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMjUuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHYuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFBvbXBleSBhY2NlcHRlZCB0aGUgaW52aXRhdGlvbiBhbmQgd3JvdGUgdG8gTWV0ZWxsdXMgcHV0dGluZyBhIHN0b3AgdG8gaGlzIHdhci4gSGUgYWxzbyB3cm90ZSB0aGUgY2l0aWVzIG5vdCB0byBwYXkgYW55IGF0dGVudGlvbiB0byBNZXRlbGx1cywgYW5kIHNlbnQgdGhlbSBvbmUgb2YgaGlzIG93biBvZmZpY2VycyBhcyBnZW5lcmFsLCBuYW1lbHksIEx1Y2l1cyBPY3Rhdml1cywgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAyNS4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4di4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndobyBlbnRlcmVkIHRoZSBzdHJvbmdob2xkcyBvZiB0aGUgYmVzaWVnZWQgcGlyYXRlcyBhbmQgZm91Z2h0IG9uIHRoZWlyIHNpZGUsIHRodXMgbWFraW5nIFBvbXBleSBub3Qgb25seSBvZGlvdXMgYW5kIG9wcHJlc3NpdmUsIGJ1dCBhY3R1YWxseSByaWRpY3Vsb3VzLCBzaW5jZSBoZSBsZW50IGhpcyBuYW1lIHRvIGdvZGxlc3MgbWlzY3JlYW50cywgYW5kIHRocmV3IGFyb3VuZCB0aGVtIHRoZSBtYW50bGUgb2YgaGlzIHJlcHV0YXRpb24gdG8gc2VydmUgbGlrZSBhIGNoYXJtIGFnYWluc3QgZXZpbCwgdGhyb3VnaCBlbnZ5IGFuZCBqZWFsb3VzeSBvZiBNZXRlbGx1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3QgZXZlbiBBY2hpbGxlcyBwbGF5ZWQgdGhlIHBhcnQgb2YgYSBtYW4sIG1lbiBzYWlkLCBidXQgdGhhdCBvZiBhIHlvdXRoIHdob2xseSBjcmF6ZWQgYW5kIGZyYW50aWMgaW4gaGlzIHF1ZXN0IG9mIGdsb3J5LCB3aGVuIGhlIG1hZGUgYSBzaWduIHRvIHRoZSByZXN0IHdoaWNoIHByZXZlbnRlZCB0aGVtIGZyb20gc21pdGluZyBIZWN0b3IsIAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGVzdCBzb21lIG9uZSBlbHNlIHdpbiBob25vdXIgYnkgdGhlIGJsb3csIGFuZCBoZSBjb21lIG9ubHkgc2Vjb25kOzwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXN0IHNvbWUgb25lIGVsc2Ugd2luIGhvbm91ciBieSB0aGUgYmxvdywgYW5kIGhlIGNvbWUgb25seSBzZWNvbmQ7PC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAyMi4yMDciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB4eGlpLiAyMDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoZXJlYXMgUG9tcGV5IGFjdHVhbGx5IGZvdWdodCBpbiBiZWhhbGYgb2YgdGhlIGNvbW1vbiBlbmVteSBhbmQgc2F2ZWQgdGhlaXIgbGl2ZXMsIHRoYXQgaGUgbWlnaHQgcm9iIG9mIGhpcyB0cml1bXBoIGEgZ2VuZXJhbCB3aG8gaGFkIHRvaWxlZCBoYXJkIHRvIHdpbiBpdC4gTWV0ZWxsdXMsIGhvd2V2ZXIsIHdvdWxkIG5vdCBnaXZlIGluLCBidXQgY2FwdHVyZWQgdGhlIHBpcmF0ZXMgYW5kIHB1bmlzaGVkIHRoZW0sIGFuZCB0aGVuIHNlbnQgT2N0YXZpdXMgYXdheSBhZnRlciBpbnN1bHRpbmcgYW5kIGFidXNpbmcgaGltIGJlZm9yZSB0aGUgYXJteS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMjIuMjA3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeHhpaS4gMjA3LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeHhpaS4gMjA3LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gd29yZCB3YXMgYnJvdWdodCB0byBSb21lIHRoYXQgdGhlIHdhciBhZ2FpbnN0IHRoZSBwaXJhdGVzIHdhcyBhdCBhbiBlbmQsIGFuZCB0aGF0IFBvbXBleSwgbm93IGF0IGxlaXN1cmUsIHdhcyB2aXNpdGluZyB0aGUgY2l0aWVzLCBNYW5saXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk1vcmUgY29ycmVjdGx5LCBNYW5pbGl1cy4gVGhlIE1hbmlsaWFuIGxhdyB3YXMgcGFzc2VkIGluIDY2IEIuQy4gQ2YuIHRoZSBvcmF0aW9uIG9mIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIE1hbi4gMSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+UHJvIExlZ2UgTWFuaWxpYTwvdGl0bGU+LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBvbmUgb2YgdGhlIHBvcHVsYXIgdHJpYnVuZXMsIHByb3Bvc2VkIGEgbGF3IGdpdmluZyBQb21wZXkgYWxsIHRoZSBjb3VudHJ5IGFuZCBmb3JjZXMgd2hpY2ggTHVjdWxsdXMgY29tbWFuZGVkLCB3aXRoIHRoZSBhZGRpdGlvbiwgdG9vLCBvZiBCaXRoeW5pYSwgd2hpY2ggR2xhYnJpbzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkdsYWJyaW8sIGNvbnN1bCBpbiA2NyBCLkMuLCBoYWQgYmVlbiBzZW50IG91dCB0byBzdXBlcnNlZGUgTHVjdWxsdXMuPC9ub3RlPiBoYWQsIGFuZCB0aGUgY29tbWlzc2lvbiB0byB3YWdlIHdhciB1cG9uIE1pdGhyaWRhdGVzIGFuZCBUaWdyYW5lcywgdGhlIGtpbmdzLCByZXRhaW5pbmcgYWxzbyBoaXMgbmF2YWwgZm9yY2UgYW5kIGhpcyBkb21pbmlvbiBvdmVyIHRoZSBzZWEgYXMgaGUgaGFkIG9yaWdpbmFsbHkgcmVjZWl2ZWQgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoaXMgbWVhbnQgdGhlIHBsYWNpbmcgb2YgdGhlIFJvbWFuIHN1cHJlbWFjeSBlbnRpcmVseSBpbiB0aGUgaGFuZHMgb2Ygb25lIG1hbjsgZm9yIHRoZSBvbmx5IHByb3ZpbmNlcyB3aGljaCB3ZXJlIGhlbGQgdG8gYmUgZXhjbHVkZWQgZnJvbSBoaXMgc3dheSBieSB0aGUgZm9ybWVyIGxhdywgbmFtZWx5LCBQaHJ5Z2lhLCBMeWNhb25pYSwgR2FsYXRpYSwgQ2FwcGFkb2NpYSwgQ2lsaWNpYSwgVXBwZXIgQ29sY2hpcywgYW5kIEFybWVuaWEsIHRoZXNlIHdlcmUgbm93IGFkZGVkIHRvIGl0LCB0b2dldGhlciB3aXRoIHRoZSBtaWxpdGFyeSBmb3JjZXMgd2hpY2ggTHVjdWxsdXMgaGFkIHVzZWQgaW4gaGlzIGNvbnF1ZXN0IG9mIE1pdGhyaWRhdGVzIGFuZCBUaWdyYW5lcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRob3VnaCBMdWN1bGx1cyB3YXMgdGh1cyByb2JiZWQgb2YgdGhlIGdsb3J5IG9mIGhpcyBhY2hpZXZlbWVudHMsIGFuZCB3YXMgcmVjZWl2aW5nIGEgc3VjY2Vzc29yIHdobyB3b3VsZCBlbmpveSBoaXMgdHJpdW1waCByYXRoZXIgdGhhbiBwcm9zZWN1dGUgdGhlIHdhciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDM1LjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THVjdWxsdXM8L3RpdGxlPiwgeHh4di4gNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhpcyB3YXMgb2YgbGVzcyBjb25jZXJuIHRvIHRoZSBhcmlzdG9jcmF0aWMgcGFydHksIGFsdGhvdWdoIHRoZXkgZGlkIHRoaW5rIHRoYXQgdGhlIG1hbiB3YXMgdW5qdXN0bHkgYW5kIHRoYW5rbGVzc2x5IHRyZWF0ZWQ7IHRoZXkgd2VyZSwgaG93ZXZlciwgZGlzcGxlYXNlZCBhdCB0aGUgcG93ZXIgZ2l2ZW4gdG8gUG9tcGV5LCB3aGljaCB0aGV5IHJlZ2FyZGVkIGFzIGVzdGFibGlzaGluZyBhIHR5cmFubnksIGFuZCBwcml2YXRlbHkgZXhob3J0ZWQgYW5kIGVuY291cmFnZWQgb25lIGFub3RoZXIgdG8gYXR0YWNrIHRoZSBsYXcsIGFuZCBub3QgdG8gc3VycmVuZGVyIHRoZWlyIGZyZWVkb20uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSB0aW1lIGNhbWUsIHRoZWlyIGhlYXJ0cyBmYWlsZWQgdGhlbSB0aHJvdWdoIGZlYXIgb2YgdGhlIHBlb3BsZSwgYW5kIGFsbCBoZWxkIHRoZWlyIHBlYWNlIGV4Y2VwdCBDYXR1bHVzOyBoZSBkZW5vdW5jZWQgdGhlIGxhdyBhdCBncmVhdCBsZW5ndGggYW5kIHRoZSB0cmlidW5lIHdobyBwcm9wb3NlZCBpdCwgYW5kIHdoZW4gbm9uZSBvZiB0aGUgcGVvcGxlIHdvdWxkIGxpc3RlbiB0byBoaW0sIGhlIGNhbGxlZCBvdXQgaW4gbG91ZCB0b25lcyBmcm9tIHRoZSByb3N0cmEgdXJnaW5nIHRoZSBzZW5hdGUgYWdhaW4gYW5kIGFnYWluIHRvIHNlZWsgb3V0IGEgbW91bnRhaW4sIGFzIHRoZWlyIGZvcmVmYXRoZXJzIGhhZCBkb25lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSByZWZlcmVuY2UgdG8gc2VjZXNzaW9uIG9mIHRoZSBwbGVicyB0byBNb25zIFNhY2VyLiBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDb3IuIDYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Db3Jpb2xhbnVzPC90aXRsZT4sIGNoYXB0ZXIgdmkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG9yIGEgbG9mdHkgcm9jaywgd2hpdGhlciB0aGV5IG1pZ2h0IGZseSBmb3IgcmVmdWdlIGFuZCBwcmVzZXJ2ZSB0aGVpciBmcmVlZG9tLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc3RpbGwgdGhlIGxhdyB3YXMgcGFzc2VkIGJ5IGFsbCB0aGUgdHJpYmVzLCBhcyB3ZSBhcmUgdG9sZCwgYW5kIFBvbXBleSwgaW4gaGlzIGFic2VuY2UsIHdhcyBwcm9jbGFpbWVkIG1hc3RlciBvZiBhbG1vc3QgYWxsIHRoZSBwb3dlcnMgd2hpY2ggU3VsbGEgaGFkIGV4ZXJjaXNlZCBhZnRlciBzdWJkdWluZyB0aGUgY2l0eSBpbiBhcm1lZCB3YXJmYXJlLiBQb21wZXkgaGltc2VsZiwgaG93ZXZlciwgb24gcmVjZWl2aW5nIGhpcyBsZXR0ZXJzIGFuZCBsZWFybmluZyB3aGF0IGhhZCBiZWVuIGRlY3JlZWQsIHdoaWxlIGhpcyBmcmllbmRzIHN1cnJvdW5kZWQgaGltIHdpdGggdGhlaXIgY29uZ3JhdHVsYXRpb25zLCBmcm93bmVkLCB3ZSBhcmUgdG9sZCwgc21vdGUgaGlzIHRoaWdoLCBhbmQgc2FpZCwgaW4gdGhlIHRvbmUgb2Ygb25lIHdobyB3YXMgYWxyZWFkeSBvcHByZXNzZWQgYW5kIGJ1cmRlbmVkIHdpdGggY29tbWFuZDogCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFsYXMgZm9yIG15IGVuZGxlc3MgdGFza3MhIEhvdyBtdWNoIGJldHRlciBpdCB3ZXJlIHRvIGJlIGFuIHVua25vd24gbWFuLCBpZiBJIGFtIG5ldmVyIHRvIGNlYXNlIGZyb20gbWlsaXRhcnkgc2VydmljZSwgYW5kIGNhbm5vdCBsYXkgYXNpZGUgdGhpcyBsb2FkIG9mIGVudnkgYW5kIHNwZW5kIG15IHRpbWUgaW4gdGhlIGNvdW50cnkgd2l0aCBteSB3aWZlITwvcT4gQXMgaGUgc2FpZCB0aGlzLCBldmVuIGhpcyBpbnRpbWF0ZSBmcmllbmRzIGNvdWxkIG5vdCBhYmlkZSBoaXMgZGlzc2ltdWxhdGlvbjsgdGhleSBrbmV3IHRoYXQgaGlzIGVubWl0eSB0b3dhcmRzIEx1Y3VsbHVzIGdhdmUgZnVlbCB0byBoaXMgaW5uYXRlIGFtYml0aW9uIGFuZCBsb3ZlIG9mIHBvd2VyLCBhbmQgbWFkZSBoaW0gYWxsIHRoZSBtb3JlIGRlbGlnaHRlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB3b3JkIHdhcyBicm91Z2h0IHRvIFJvbWUgdGhhdCB0aGUgd2FyIGFnYWluc3QgdGhlIHBpcmF0ZXMgd2FzIGF0IGFuIGVuZCwgYW5kIHRoYXQgUG9tcGV5LCBub3cgYXQgbGVpc3VyZSwgd2FzIHZpc2l0aW5nIHRoZSBjaXRpZXMsIE1hbmxpdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Nb3JlIGNvcnJlY3RseSwgTWFuaWxpdXMuIFRoZSBNYW5pbGlhbiBsYXcgd2FzIHBhc3NlZCBpbiA2NiBCLkMuIENmLiB0aGUgb3JhdGlvbiBvZiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIE1hbi4gMSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qcm8gTGVnZSBNYW5pbGlhPC90aXRsZT4uPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG9uZSBvZiB0aGUgcG9wdWxhciB0cmlidW5lcywgcHJvcG9zZWQgYSBsYXcgZ2l2aW5nIFBvbXBleSBhbGwgdGhlIGNvdW50cnkgYW5kIGZvcmNlcyB3aGljaCBMdWN1bGx1cyBjb21tYW5kZWQsIHdpdGggdGhlIGFkZGl0aW9uLCB0b28sIG9mIEJpdGh5bmlhLCB3aGljaCBHbGFicmlvPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBNYW4uIDEiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHJvIExlZ2UgTWFuaWxpYTwvdGl0bGU+LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHJvIExlZ2UgTWFuaWxpYTwvdGl0bGU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+R2xhYnJpbywgY29uc3VsIGluIDY3IEIuQy4sIGhhZCBiZWVuIHNlbnQgb3V0IHRvIHN1cGVyc2VkZSBMdWN1bGx1cy48L25vdGU+IGhhZCwgYW5kIHRoZSBjb21taXNzaW9uIHRvIHdhZ2Ugd2FyIHVwb24gTWl0aHJpZGF0ZXMgYW5kIFRpZ3JhbmVzLCB0aGUga2luZ3MsIHJldGFpbmluZyBhbHNvIGhpcyBuYXZhbCBmb3JjZSBhbmQgaGlzIGRvbWluaW9uIG92ZXIgdGhlIHNlYSBhcyBoZSBoYWQgb3JpZ2luYWxseSByZWNlaXZlZCB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIG1lYW50IHRoZSBwbGFjaW5nIG9mIHRoZSBSb21hbiBzdXByZW1hY3kgZW50aXJlbHkgaW4gdGhlIGhhbmRzIG9mIG9uZSBtYW47IGZvciB0aGUgb25seSBwcm92aW5jZXMgd2hpY2ggd2VyZSBoZWxkIHRvIGJlIGV4Y2x1ZGVkIGZyb20gaGlzIHN3YXkgYnkgdGhlIGZvcm1lciBsYXcsIG5hbWVseSwgUGhyeWdpYSwgTHljYW9uaWEsIEdhbGF0aWEsIENhcHBhZG9jaWEsIENpbGljaWEsIFVwcGVyIENvbGNoaXMsIGFuZCBBcm1lbmlhLCB0aGVzZSB3ZXJlIG5vdyBhZGRlZCB0byBpdCwgdG9nZXRoZXIgd2l0aCB0aGUgbWlsaXRhcnkgZm9yY2VzIHdoaWNoIEx1Y3VsbHVzIGhhZCB1c2VkIGluIGhpcyBjb25xdWVzdCBvZiBNaXRocmlkYXRlcyBhbmQgVGlncmFuZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG91Z2ggTHVjdWxsdXMgd2FzIHRodXMgcm9iYmVkIG9mIHRoZSBnbG9yeSBvZiBoaXMgYWNoaWV2ZW1lbnRzLCBhbmQgd2FzIHJlY2VpdmluZyBhIHN1Y2Nlc3NvciB3aG8gd291bGQgZW5qb3kgaGlzIHRyaXVtcGggcmF0aGVyIHRoYW4gcHJvc2VjdXRlIHRoZSB3YXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gMzUuNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHh4eHYuIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoaXMgd2FzIG9mIGxlc3MgY29uY2VybiB0byB0aGUgYXJpc3RvY3JhdGljIHBhcnR5LCBhbHRob3VnaCB0aGV5IGRpZCB0aGluayB0aGF0IHRoZSBtYW4gd2FzIHVuanVzdGx5IGFuZCB0aGFua2xlc3NseSB0cmVhdGVkOyB0aGV5IHdlcmUsIGhvd2V2ZXIsIGRpc3BsZWFzZWQgYXQgdGhlIHBvd2VyIGdpdmVuIHRvIFBvbXBleSwgd2hpY2ggdGhleSByZWdhcmRlZCBhcyBlc3RhYmxpc2hpbmcgYSB0eXJhbm55LCBhbmQgcHJpdmF0ZWx5IGV4aG9ydGVkIGFuZCBlbmNvdXJhZ2VkIG9uZSBhbm90aGVyIHRvIGF0dGFjayB0aGUgbGF3LCBhbmQgbm90IHRvIHN1cnJlbmRlciB0aGVpciBmcmVlZG9tLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gMzUuNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHh4eHYuIDcuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1czwvdGl0bGU+LCB4eHh2LiA3LjwvdHJhbnNsYXRpb24+"
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSB0aW1lIGNhbWUsIHRoZWlyIGhlYXJ0cyBmYWlsZWQgdGhlbSB0aHJvdWdoIGZlYXIgb2YgdGhlIHBlb3BsZSwgYW5kIGFsbCBoZWxkIHRoZWlyIHBlYWNlIGV4Y2VwdCBDYXR1bHVzOyBoZSBkZW5vdW5jZWQgdGhlIGxhdyBhdCBncmVhdCBsZW5ndGggYW5kIHRoZSB0cmlidW5lIHdobyBwcm9wb3NlZCBpdCwgYW5kIHdoZW4gbm9uZSBvZiB0aGUgcGVvcGxlIHdvdWxkIGxpc3RlbiB0byBoaW0sIGhlIGNhbGxlZCBvdXQgaW4gbG91ZCB0b25lcyBmcm9tIHRoZSByb3N0cmEgdXJnaW5nIHRoZSBzZW5hdGUgYWdhaW4gYW5kIGFnYWluIHRvIHNlZWsgb3V0IGEgbW91bnRhaW4sIGFzIHRoZWlyIGZvcmVmYXRoZXJzIGhhZCBkb25lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHJlZmVyZW5jZSB0byBzZWNlc3Npb24gb2YgdGhlIHBsZWJzIHRvIE1vbnMgU2FjZXIuIFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ29yLiA2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3Jpb2xhbnVzPC90aXRsZT4sIGNoYXB0ZXIgdmkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG9yIGEgbG9mdHkgcm9jaywgd2hpdGhlciB0aGV5IG1pZ2h0IGZseSBmb3IgcmVmdWdlIGFuZCBwcmVzZXJ2ZSB0aGVpciBmcmVlZG9tLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvci4gNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29yaW9sYW51czwvdGl0bGU+LCBjaGFwdGVyIHZpLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29yaW9sYW51czwvdGl0bGU+LCBjaGFwdGVyIHZpLjwvdHJhbnNsYXRpb24+"
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzdGlsbCB0aGUgbGF3IHdhcyBwYXNzZWQgYnkgYWxsIHRoZSB0cmliZXMsIGFzIHdlIGFyZSB0b2xkLCBhbmQgUG9tcGV5LCBpbiBoaXMgYWJzZW5jZSwgd2FzIHByb2NsYWltZWQgbWFzdGVyIG9mIGFsbW9zdCBhbGwgdGhlIHBvd2VycyB3aGljaCBTdWxsYSBoYWQgZXhlcmNpc2VkIGFmdGVyIHN1YmR1aW5nIHRoZSBjaXR5IGluIGFybWVkIHdhcmZhcmUuIFBvbXBleSBoaW1zZWxmLCBob3dldmVyLCBvbiByZWNlaXZpbmcgaGlzIGxldHRlcnMgYW5kIGxlYXJuaW5nIHdoYXQgaGFkIGJlZW4gZGVjcmVlZCwgd2hpbGUgaGlzIGZyaWVuZHMgc3Vycm91bmRlZCBoaW0gd2l0aCB0aGVpciBjb25ncmF0dWxhdGlvbnMsIGZyb3duZWQsIHdlIGFyZSB0b2xkLCBzbW90ZSBoaXMgdGhpZ2gsIGFuZCBzYWlkLCBpbiB0aGUgdG9uZSBvZiBvbmUgd2hvIHdhcyBhbHJlYWR5IG9wcHJlc3NlZCBhbmQgYnVyZGVuZWQgd2l0aCBjb21tYW5kOiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFsYXMgZm9yIG15IGVuZGxlc3MgdGFza3MhIEhvdyBtdWNoIGJldHRlciBpdCB3ZXJlIHRvIGJlIGFuIHVua25vd24gbWFuLCBpZiBJIGFtIG5ldmVyIHRvIGNlYXNlIGZyb20gbWlsaXRhcnkgc2VydmljZSwgYW5kIGNhbm5vdCBsYXkgYXNpZGUgdGhpcyBsb2FkIG9mIGVudnkgYW5kIHNwZW5kIG15IHRpbWUgaW4gdGhlIGNvdW50cnkgd2l0aCBteSB3aWZlITwvcT4gQXMgaGUgc2FpZCB0aGlzLCBldmVuIGhpcyBpbnRpbWF0ZSBmcmllbmRzIGNvdWxkIG5vdCBhYmlkZSBoaXMgZGlzc2ltdWxhdGlvbjsgdGhleSBrbmV3IHRoYXQgaGlzIGVubWl0eSB0b3dhcmRzIEx1Y3VsbHVzIGdhdmUgZnVlbCB0byBoaXMgaW5uYXRlIGFtYml0aW9uIGFuZCBsb3ZlIG9mIHBvd2VyLCBhbmQgbWFkZSBoaW0gYWxsIHRoZSBtb3JlIGRlbGlnaHRlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGNlcnRhaW5seSBoaXMgYWN0aW9ucyBzb29uIHVubWFza2VkIGhpbS4gRm9yIGhlIHNlbnQgb3V0IGVkaWN0cyBpbiBhbGwgZGlyZWN0aW9ucyBjYWxsaW5nIHRoZSBzb2xkaWVycyB0byBoaXMgc3RhbmRhcmQsIGFuZCBzdW1tb25lZCB0aGUgc3ViamVjdCBwb3RlbnRhdGVzIGFuZCBraW5ncyBpbnRvIGhpcyBwcmVzZW5jZS4gTW9yZW92ZXIsIGFzIGhlIHRyYXZlcnNlZCB0aGUgY291bnRyeSwgaGUgbGVmdCBub3RoaW5nIHVuZGlzdHVyYmVkIHRoYXQgTHVjdWxsdXMgaGFkIGRvbmUsIGJ1dCByZW1pdHRlZCBwdW5pc2htZW50cyBpbiBtYW55IGNhc2VzLCBhbmQgdG9vayBhd2F5IHJld2FyZHMsIGFuZCBkaWQgZXZlcnl0aGluZywgaW4gYSB3b3JkLCB3aXRoIGFuIGVhZ2VyIGRlc2lyZSB0byBzaG93IHRoZSBhZG1pcmVycyBvZiB0aGF0IGdlbmVyYWwgdGhhdCBoZSB3YXMgd2hvbGx5IHdpdGhvdXQgcG93ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIGV4cG9zdHVsYXRlZCB0aHJvdWdoIGhpcyBmcmllbmRzLCBhbmQgaXQgd2FzIGRlY2lkZWQgdGhhdCB0aGV5IHNob3VsZCBoYXZlIGEgbWVldGluZzsgdGhleSBtZXQsIHRoZXJlZm9yZSwgaW4gR2FsYXRpYS4gQW5kIHNpbmNlIGJvdGggd2VyZSB2ZXJ5IGdyZWF0IGFuZCB2ZXJ5IHN1Y2Nlc3NmdWwgZ2VuZXJhbHMsIHRoZWlyIGxpY3RvcnMgaGFkIHRoZWlyIHJvZHMgYWxpa2Ugd3JlYXRoZWQgd2l0aCBsYXVyZWwgd2hlbiB0aGV5IG1ldDsgYnV0IEx1Y3VsbHVzIHdhcyBhZHZhbmNpbmcgZnJvbSBncmVlbiBhbmQgc2hhZHkgcmVnaW9ucywgd2hpbGUgUG9tcGV5IGNoYW5jZWQgdG8gaGF2ZSBtYWRlIGEgbG9uZyBtYXJjaCB0aHJvdWdoIGEgcGFyY2hlZCBhbmQgdHJlZWxlc3MgY291bnRyeS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gdGhlIGxpY3RvcnMgb2YgTHVjdWxsdXMgc2F3IHRoYXQgUG9tcGV5J3MgbGF1cmVscyB3ZXJlIHdpdGhlcmVkIGFuZCBhbHRvZ2V0aGVyIGZhZGVkLCB0aGV5IHRvb2sgc29tZSBvZiB0aGVpciBvd24sIHdoaWNoIHdlcmUgZnJlc2gsIGFuZCB3aXRoIHRoZW0gd3JlYXRoZWQgYW5kIGRlY29yYXRlZCBoaXMgcm9kcy4gVGhpcyB3YXMgaGVsZCB0byBiZSBhIHNpZ24gdGhhdCBQb21wZXkgd2FzIGNvbWluZyB0byByb2IgTHVjdWxsdXMgb2YgdGhlIGZydWl0cyBvZiBoaXMgdmljdG9yaWVzIGFuZCBvZiBoaXMgZ2xvcnkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgTHVjdWxsdXMgaGFkIGJlZW4gY29uc3VsIGJlZm9yZSBQb21wZXksIGFuZCB3YXMgb2xkZXIgdGhhbiBoZTsgYnV0IFBvbXBleSdzIHR3byB0cml1bXBocyBnYXZlIGhpbSBhIGdyZWF0ZXIgZGlnbml0eS4gQXQgZmlyc3QsIGhvd2V2ZXIsIHRoZWlyIGludGVydmlldyB3YXMgY29uZHVjdGVkIHdpdGggYWxsIHBvc3NpYmxlIGNpdmlsaXR5IGFuZCBmcmllbmRsaW5lc3MsIGVhY2ggbWFnbmlmeWluZyB0aGUgb3RoZXIncyBleHBsb2l0cyBhbmQgY29uZ3JhdHVsYXRpbmcgaGltIG9uIGhpcyBzdWNjZXNzZXM7IGJ1dCBpbiB0aGUgY29uZmVyZW5jZXMgd2hpY2ggZm9sbG93ZWQgdGhleSBjb3VsZCBjb21lIHRvIG5vIGZhaXIgb3IgcmVhc29uYWJsZSBhZ3JlZW1lbnQsIG5heSwgdGhleSBhY3R1YWxseSBhYnVzZWQgZWFjaCBvdGhlciwgUG9tcGV5IGNoYXJnaW5nIEx1Y3VsbHVzIHdpdGggbG92ZSBvZiBtb25leSwgYW5kIEx1Y3VsbHVzIGNoYXJnaW5nIFBvbXBleSB3aXRoIGxvdmUgb2YgcG93ZXIsIGFuZCB0aGV5IHdlcmUgd2l0aCBkaWZmaWN1bHR5IHNlcGFyYXRlZCBieSB0aGVpciBmcmllbmRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGNlcnRhaW5seSBoaXMgYWN0aW9ucyBzb29uIHVubWFza2VkIGhpbS4gRm9yIGhlIHNlbnQgb3V0IGVkaWN0cyBpbiBhbGwgZGlyZWN0aW9ucyBjYWxsaW5nIHRoZSBzb2xkaWVycyB0byBoaXMgc3RhbmRhcmQsIGFuZCBzdW1tb25lZCB0aGUgc3ViamVjdCBwb3RlbnRhdGVzIGFuZCBraW5ncyBpbnRvIGhpcyBwcmVzZW5jZS4gTW9yZW92ZXIsIGFzIGhlIHRyYXZlcnNlZCB0aGUgY291bnRyeSwgaGUgbGVmdCBub3RoaW5nIHVuZGlzdHVyYmVkIHRoYXQgTHVjdWxsdXMgaGFkIGRvbmUsIGJ1dCByZW1pdHRlZCBwdW5pc2htZW50cyBpbiBtYW55IGNhc2VzLCBhbmQgdG9vayBhd2F5IHJld2FyZHMsIGFuZCBkaWQgZXZlcnl0aGluZywgaW4gYSB3b3JkLCB3aXRoIGFuIGVhZ2VyIGRlc2lyZSB0byBzaG93IHRoZSBhZG1pcmVycyBvZiB0aGF0IGdlbmVyYWwgdGhhdCBoZSB3YXMgd2hvbGx5IHdpdGhvdXQgcG93ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIGV4cG9zdHVsYXRlZCB0aHJvdWdoIGhpcyBmcmllbmRzLCBhbmQgaXQgd2FzIGRlY2lkZWQgdGhhdCB0aGV5IHNob3VsZCBoYXZlIGEgbWVldGluZzsgdGhleSBtZXQsIHRoZXJlZm9yZSwgaW4gR2FsYXRpYS4gQW5kIHNpbmNlIGJvdGggd2VyZSB2ZXJ5IGdyZWF0IGFuZCB2ZXJ5IHN1Y2Nlc3NmdWwgZ2VuZXJhbHMsIHRoZWlyIGxpY3RvcnMgaGFkIHRoZWlyIHJvZHMgYWxpa2Ugd3JlYXRoZWQgd2l0aCBsYXVyZWwgd2hlbiB0aGV5IG1ldDsgYnV0IEx1Y3VsbHVzIHdhcyBhZHZhbmNpbmcgZnJvbSBncmVlbiBhbmQgc2hhZHkgcmVnaW9ucywgd2hpbGUgUG9tcGV5IGNoYW5jZWQgdG8gaGF2ZSBtYWRlIGEgbG9uZyBtYXJjaCB0aHJvdWdoIGEgcGFyY2hlZCBhbmQgdHJlZWxlc3MgY291bnRyeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIHRoZSBsaWN0b3JzIG9mIEx1Y3VsbHVzIHNhdyB0aGF0IFBvbXBleSdzIGxhdXJlbHMgd2VyZSB3aXRoZXJlZCBhbmQgYWx0b2dldGhlciBmYWRlZCwgdGhleSB0b29rIHNvbWUgb2YgdGhlaXIgb3duLCB3aGljaCB3ZXJlIGZyZXNoLCBhbmQgd2l0aCB0aGVtIHdyZWF0aGVkIGFuZCBkZWNvcmF0ZWQgaGlzIHJvZHMuIFRoaXMgd2FzIGhlbGQgdG8gYmUgYSBzaWduIHRoYXQgUG9tcGV5IHdhcyBjb21pbmcgdG8gcm9iIEx1Y3VsbHVzIG9mIHRoZSBmcnVpdHMgb2YgaGlzIHZpY3RvcmllcyBhbmQgb2YgaGlzIGdsb3J5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgTHVjdWxsdXMgaGFkIGJlZW4gY29uc3VsIGJlZm9yZSBQb21wZXksIGFuZCB3YXMgb2xkZXIgdGhhbiBoZTsgYnV0IFBvbXBleSdzIHR3byB0cml1bXBocyBnYXZlIGhpbSBhIGdyZWF0ZXIgZGlnbml0eS4gQXQgZmlyc3QsIGhvd2V2ZXIsIHRoZWlyIGludGVydmlldyB3YXMgY29uZHVjdGVkIHdpdGggYWxsIHBvc3NpYmxlIGNpdmlsaXR5IGFuZCBmcmllbmRsaW5lc3MsIGVhY2ggbWFnbmlmeWluZyB0aGUgb3RoZXIncyBleHBsb2l0cyBhbmQgY29uZ3JhdHVsYXRpbmcgaGltIG9uIGhpcyBzdWNjZXNzZXM7IGJ1dCBpbiB0aGUgY29uZmVyZW5jZXMgd2hpY2ggZm9sbG93ZWQgdGhleSBjb3VsZCBjb21lIHRvIG5vIGZhaXIgb3IgcmVhc29uYWJsZSBhZ3JlZW1lbnQsIG5heSwgdGhleSBhY3R1YWxseSBhYnVzZWQgZWFjaCBvdGhlciwgUG9tcGV5IGNoYXJnaW5nIEx1Y3VsbHVzIHdpdGggbG92ZSBvZiBtb25leSwgYW5kIEx1Y3VsbHVzIGNoYXJnaW5nIFBvbXBleSB3aXRoIGxvdmUgb2YgcG93ZXIsIGFuZCB0aGV5IHdlcmUgd2l0aCBkaWZmaWN1bHR5IHNlcGFyYXRlZCBieSB0aGVpciBmcmllbmRzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIEx1Y3VsbHVzLCByZW1haW5pbmcgaW4gR2FsYXRpYSwgYXNzaWduZWQgcGFydHMgb2YgdGhlIGNvbnF1ZXJlZCB0ZXJyaXRvcnkgYW5kIG1hZGUgb3RoZXIgZ2lmdHMgdG8gd2hvbSBoZSBwbGVhc2VkOyB3aGlsZSBQb21wZXksIGVuY2FtcGVkIGF0IGEgbGl0dGxlIGRpc3RhbmNlIGZyb20gaGltLCB0cmllZCB0byBwcmV2ZW50IGFueSBhdHRlbnRpb24gdG8gaGlzIGNvbW1hbmRzLCBhbmQgdG9vayBhd2F5IGFsbCBoaXMgc29sZGllcnMgZnJvbSBoaW0sIGV4Y2VwdCBzaXh0ZWVuIGh1bmRyZWQsIHdob3NlIG11dGlub3VzIHNwaXJpdCBtYWRlIHRoZW0sIGFzIGhlIHRob3VnaHQsIHVzZWxlc3MgdG8gaGltc2VsZiBhbmQgaG9zdGlsZSB0byBMdWN1bGx1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDE2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THVjdWxsdXM8L3RpdGxlPiwgeHZpLiAxLTQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcyB0aGlzLCBoZSB3b3VsZCBiZWxpdHRsZSB0aGUgYWNoaWV2ZW1lbnRzIG9mIEx1Y3VsbHVzLCBkZWNsYXJpbmcgdGhhdCBoZSBoYWQgd2FnZWQgd2FyIGFnYWluc3QgbWltaWMgYW5kIHNoYWRvd3kga2luZ3Mgb25seSwgd2hpbGUgdG8gaGltc2VsZiB0aGVyZSB3YXMgbm93IGxlZnQgdGhlIHN0cnVnZ2xlIGFnYWluc3QgYSByZWFsIG1pbGl0YXJ5IGZvcmNlLCBhbmQgb25lIGRpc2NpcGxpbmVkIGJ5IGRlZmVhdCwgc2luY2UgTWl0aHJpZGF0ZXMgaGFkIG5vdyBiZXRha2VuIGhpbXNlbGYgdG8gc2hpZWxkcywgc3dvcmRzLCBhbmQgaG9yc2VzLiBUbyB0aGlzIEx1Y3VsbHVzIHJldG9ydGVkIHRoYXQgUG9tcGV5IHdhcyBnb2luZyBmb3J0aCB0byBmaWdodCBhbiBpbWFnZSBhbmQgc2hhZG93IG9mIHdhciwgZm9sbG93aW5nIGhpcyBjdXN0b20gb2YgYWxpZ2h0aW5nLCBsaWtlIGEgbGF6eSBjYXJyaW9uLWJpcmQsIG9uIGJvZGllcyB0aGF0IG90aGVycyBoYWQga2lsbGVkLCBhbmQgdGVhcmluZyB0byBwaWVjZXMgdGhlIHNjYXR0ZXJlZCByZW1uYW50cyBvZiB3YXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgd2FzIGluIHRoaXMgd2F5IHRoYXQgaGUgaGFkIGFwcHJvcHJpYXRlZCB0byBoaW1zZWxmIHRoZSB2aWN0b3JpZXMgb3ZlciBTZXJ0b3JpdXMsIExlcGlkdXMsIGFuZCB0aGUgZm9sbG93ZXJzIG9mIFNwYXJ0YWN1cywgYWx0aG91Z2ggdGhleSBoYWQgYWN0dWFsbHkgYmVlbiB3b24gYnkgTWV0ZWxsdXMsIENhdHVsdXMsIGFuZCBDcmFzc3VzLiBUaGVyZWZvcmUgaXQgd2FzIG5vIHdvbmRlciB0aGF0IGhlIHdhcyB0cnlpbmcgdG8gdXN1cnAgdGhlIGdsb3J5IG9mIHRoZSBQb250aWMgYW5kIEFybWVuaWFuIHdhcnMsIGEgbWFuIHdobyBoYWQgY29udHJpdmVkIHRvIHRocnVzdCBoaW1zZWxmIGluIHNvbWUgd2F5IG9yIG90aGVyIGludG8gdGhlIGhvbm91ciBvZiBhIHRyaXVtcGggZm9yIGRlZmVhdGluZyBydW5hd2F5IHNsYXZlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDIxLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBMdWN1bGx1cywgcmVtYWluaW5nIGluIEdhbGF0aWEsIGFzc2lnbmVkIHBhcnRzIG9mIHRoZSBjb25xdWVyZWQgdGVycml0b3J5IGFuZCBtYWRlIG90aGVyIGdpZnRzIHRvIHdob20gaGUgcGxlYXNlZDsgd2hpbGUgUG9tcGV5LCBlbmNhbXBlZCBhdCBhIGxpdHRsZSBkaXN0YW5jZSBmcm9tIGhpbSwgdHJpZWQgdG8gcHJldmVudCBhbnkgYXR0ZW50aW9uIHRvIGhpcyBjb21tYW5kcywgYW5kIHRvb2sgYXdheSBhbGwgaGlzIHNvbGRpZXJzIGZyb20gaGltLCBleGNlcHQgc2l4dGVlbiBodW5kcmVkLCB3aG9zZSBtdXRpbm91cyBzcGlyaXQgbWFkZSB0aGVtLCBhcyBoZSB0aG91Z2h0LCB1c2VsZXNzIHRvIGhpbXNlbGYgYW5kIGhvc3RpbGUgdG8gTHVjdWxsdXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gMTYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHh2aS4gMS00LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHVjLiAxNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgeHZpLiAxLTQuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1czwvdGl0bGU+LCB4dmkuIDEtNC48L3RyYW5zbGF0aW9uPg=="
translation['31.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMgdGhpcywgaGUgd291bGQgYmVsaXR0bGUgdGhlIGFjaGlldmVtZW50cyBvZiBMdWN1bGx1cywgZGVjbGFyaW5nIHRoYXQgaGUgaGFkIHdhZ2VkIHdhciBhZ2FpbnN0IG1pbWljIGFuZCBzaGFkb3d5IGtpbmdzIG9ubHksIHdoaWxlIHRvIGhpbXNlbGYgdGhlcmUgd2FzIG5vdyBsZWZ0IHRoZSBzdHJ1Z2dsZSBhZ2FpbnN0IGEgcmVhbCBtaWxpdGFyeSBmb3JjZSwgYW5kIG9uZSBkaXNjaXBsaW5lZCBieSBkZWZlYXQsIHNpbmNlIE1pdGhyaWRhdGVzIGhhZCBub3cgYmV0YWtlbiBoaW1zZWxmIHRvIHNoaWVsZHMsIHN3b3JkcywgYW5kIGhvcnNlcy4gVG8gdGhpcyBMdWN1bGx1cyByZXRvcnRlZCB0aGF0IFBvbXBleSB3YXMgZ29pbmcgZm9ydGggdG8gZmlnaHQgYW4gaW1hZ2UgYW5kIHNoYWRvdyBvZiB3YXIsIGZvbGxvd2luZyBoaXMgY3VzdG9tIG9mIGFsaWdodGluZywgbGlrZSBhIGxhenkgY2Fycmlvbi1iaXJkLCBvbiBib2RpZXMgdGhhdCBvdGhlcnMgaGFkIGtpbGxlZCwgYW5kIHRlYXJpbmcgdG8gcGllY2VzIHRoZSBzY2F0dGVyZWQgcmVtbmFudHMgb2Ygd2Fycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgaW4gdGhpcyB3YXkgdGhhdCBoZSBoYWQgYXBwcm9wcmlhdGVkIHRvIGhpbXNlbGYgdGhlIHZpY3RvcmllcyBvdmVyIFNlcnRvcml1cywgTGVwaWR1cywgYW5kIHRoZSBmb2xsb3dlcnMgb2YgU3BhcnRhY3VzLCBhbHRob3VnaCB0aGV5IGhhZCBhY3R1YWxseSBiZWVuIHdvbiBieSBNZXRlbGx1cywgQ2F0dWx1cywgYW5kIENyYXNzdXMuIFRoZXJlZm9yZSBpdCB3YXMgbm8gd29uZGVyIHRoYXQgaGUgd2FzIHRyeWluZyB0byB1c3VycCB0aGUgZ2xvcnkgb2YgdGhlIFBvbnRpYyBhbmQgQXJtZW5pYW4gd2FycywgYSBtYW4gd2hvIGhhZCBjb250cml2ZWQgdG8gdGhydXN0IGhpbXNlbGYgaW4gc29tZSB3YXkgb3Igb3RoZXIgaW50byB0aGUgaG9ub3VyIG9mIGEgdHJpdW1waCBmb3IgZGVmZWF0aW5nIHJ1bmF3YXkgc2xhdmVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDIxLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAyMS4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4aS4gMi48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIEx1Y3VsbHVzIHdpdGhkcmV3IGZyb20gdGhvc2UgcGFydHMsIGFuZCBQb21wZXksIGhhdmluZyBkaXN0cmlidXRlZCBoaXMgd2hvbGUgZmxlZXQgc28gYXMgdG8gZ3VhcmQgdGhlIHNlYSBiZXR3ZWVuIFBob2VuaWNpYSBhbmQgdGhlIEJvc3BvcnVzLCBoaW1zZWxmIG1hcmNoZWQgYWdhaW5zdCBNaXRocmlkYXRlcywgd2hvIGhhZCBhIGZpZ2h0aW5nIGZvcmNlIG9mIHRoaXJ0eSB0aG91c2FuZCBmb290IGFuZCB0d28gdGhvdXNhbmQgaG9yc2UsIGJ1dCBkaWQgbm90IGRhcmUgdG8gb2ZmZXIgYmF0dGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UbyBiZWdpbiB3aXRoLCB0aGUga2luZyB3YXMgc3Ryb25nbHkgZW5jYW1wZWQgb24gYSBtb3VudGFpbiB3aGljaCB3YXMgZGlmZmljdWx0IG9mIGFzc2F1bHQsIGJ1dCBhYmFuZG9uZWQgaXQsIHN1cHBvc2luZyB0aGF0IGl0IGhhZCBubyB3YXRlci4gUG9tcGV5IHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGlzIHZlcnkgbW91bnRhaW4sIGFuZCBqdWRnaW5nIGJ5IHRoZSBuYXR1cmUgb2YgdGhlIHZlZ2V0YXRpb24gYW5kIGJ5IHRoZSBjaGFubmVscyBpbiB0aGUgc2xvcGVzIHRoYXQgdGhlIHBsYWNlIGhhZCBzcHJpbmdzLCBvcmRlcmVkIGhpcyBtZW4gdG8gc2luayB3ZWxscyBldmVyeXdoZXJlLiBBdCBvbmNlLCB0aGVuLCBoaXMgY2FtcCB3YXMgYWJ1bmRhbnRseSBzdXBwbGllZCB3aXRoIHdhdGVyLCBhbmQgbWVuIHdvbmRlcmVkIHRoYXQgaW4gYWxsIHRoZSB0aW1lIG9mIGhpcyBlbmNhbXBtZW50IHRoZXJlIE1pdGhyaWRhdGVzIGhhZCBiZWVuIGlnbm9yYW50IG9mIHRoaXMgcG9zc2liaWxpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5leHQsIGhlIGludmVzdGVkIHRoZSBraW5nJ3MgY2FtcCBhbmQgd2FsbGVkIGhpbSBpbi4gQnV0IGFmdGVyIGVuZHVyaW5nIGEgc2llZ2Ugb2YgZm9ydHktZml2ZSBkYXlzLCBNaXRocmlkYXRlcyBzdWNjZWVkZWQgaW4gc3RlYWxpbmcgb2ZmIHdpdGggaGlzIG1vc3QgZWZmZWN0aXZlIHRyb29wczsgdGhlIHNpY2sgYW5kIHVuc2VydmljZWFibGUgaGUga2lsbGVkLiBUaGVuLCBob3dldmVyLCBQb21wZXkgb3ZlcnRvb2sgaGltIG5lYXIgdGhlIEV1cGhyYXRlcyByaXZlciwgYW5kIGVuY2FtcGVkIGNsb3NlIGJ5OyBhbmQgZmVhcmluZyBsZXN0IHRoZSBraW5nIHNob3VsZCBnZXQgdGhlIGFkdmFudGFnZSBvZiBoaW0gYnkgY3Jvc3NpbmcgdGhlIEV1cGhyYXRlcywgaGUgcHV0IGhpcyBhcm15IGluIGJhdHRsZSBhcnJheSBhbmQgbGVkIGl0IGFnYWluc3QgaGltIGF0IG1pZG5pZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUgTWl0aHJpZGF0ZXMgaXMgc2FpZCB0byBoYXZlIHNlZW4gYSB2aXNpb24gaW4gaGlzIHNsZWVwLCByZXZlYWxpbmcgd2hhdCBzaG91bGQgY29tZSB0byBwYXNzLiBIZSBkcmVhbWVkIHRoYXQgaGUgd2FzIHNhaWxpbmcgdGhlIFBvbnRpYyBTZWEgd2l0aCBhIGZhaXIgd2luZCwgYW5kIHdhcyBhbHJlYWR5IGluIHNpZ2h0IG9mIHRoZSBCb3Nwb3J1cywgYW5kIHdhcyBncmVldGluZyBwbGVhc2FudGx5IGhpcyBmZWxsb3ctdm95YWdlcnMsIGFzIGEgbWFuIHdvdWxkIGRvIGluIGhpcyBqb3kgb3ZlciBhIG1hbmlmZXN0IGFuZCBzdXJlIGRlbGl2ZXJhbmNlOyBidXQgc3VkZGVubHkgaGUgc2F3IGhpbXNlbGYgYmVyZWZ0IG9mIGFsbCBoaXMgY29tcGFuaW9ucyBhbmQgdG9zc2VkIGFib3V0IG9uIGEgc21hbGwgcGllY2Ugb2Ygd3JlY2thZ2UuIEFzIGhlIGRyZWFtZWQgb2Ygc3VjaCBkaXN0cmVzcywgaGlzIGZyaWVuZHMgY2FtZSB0byBoaXMgY291Y2ggYW5kIHJvdXNlZCBoaW0gd2l0aCB0aGUgbmV3cyB0aGF0IFBvbXBleSB3YXMgYWR2YW5jaW5nIHRvIHRoZSBhdHRhY2suIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyB0aGVyZWZvcmUgY29tcGVsbGVkIHRvIGdpdmUgYmF0dGxlIGluIGRlZmVuY2Ugb2YgaGlzIGNhbXAsIGFuZCBoaXMgZ2VuZXJhbHMgbGVkIG91dCB0aGVpciB0cm9vcHMgYW5kIHB1dCB0aGVtIGluIGFycmF5LiBCdXQgd2hlbiBQb21wZXkgcGVyY2VpdmVkIHRoZWlyIHByZXBhcmF0aW9ucyB0byBtZWV0IGhpbSwgaGUgaGVzaXRhdGVkIHRvIGhhemFyZCBtYXR0ZXJzIGluIHRoZSBkYXJrLCBhbmQgdGhvdWdodCBpdCBuZWNlc3NhcnkgbWVyZWx5IHRvIHN1cnJvdW5kIHRoZW0sIGluIG9yZGVyIHRvIHByZXZlbnQgdGhlaXIgZXNjYXBlLCBhbmQgdGhlbiB0byBhdHRhY2sgdGhlbSB3aGVuIGl0IHdhcyBkYXksIHNpbmNlIHRoZXkgd2VyZSBzdXBlcmlvciBpbiBudW1iZXJzLiBCdXQgaGlzIG9sZGVzdCBvZmZpY2VycywgYnkgdGhlaXIgZW50cmVhdGllcyBhbmQgZXhob3J0YXRpb25zLCBwcmV2YWlsZWQgdXBvbiBoaW0gdG8gYXR0YWNrIGF0IG9uY2U7IGZvciBpdCB3YXMgbm90IHdob2xseSBkYXJrLCBidXQgdGhlIG1vb24sIHdoaWNoIHdhcyBzZXR0aW5nLCBtYWRlIGl0IHN0aWxsIHBvc3NpYmxlIHRvIGRpc3Rpbmd1aXNoIHBlcnNvbnMgY2xlYXJseSBlbm91Z2g7IGluZGVlZCwgaXQgd2FzIHRoaXMgY2lyY3Vtc3RhbmNlIHRoYXQgYnJvdWdodCBtb3N0IGhhcm0gdG8gdGhlIGtpbmcncyB0cm9vcHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgUm9tYW5zIGNhbWUgdG8gdGhlIGF0dGFjayB3aXRoIHRoZSBtb29uIGF0IHRoZWlyIGJhY2tzLCBhbmQgc2luY2UgaGVyIGxpZ2h0IHdhcyBjbG9zZSB0byB0aGUgaG9yaXpvbiwgdGhlIHNoYWRvd3MgbWFkZSBieSB0aGVpciBib2RpZXMgd2VyZSB0aHJvd24gZmFyIGluIGFkdmFuY2UgYW5kIGZlbGwgdXBvbiB0aGUgZW5lbXksIHdobyB3ZXJlIHRodXMgdW5hYmxlIHRvIGVzdGltYXRlIGNvcnJlY3RseSB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGVtc2VsdmVzIGFuZCB0aGVpciBmb2VzLCBidXQgc3VwcG9zaW5nIHRoYXQgdGhleSB3ZXJlIGFscmVhZHkgYXQgY2xvc2UgcXVhcnRlcnMsIHRoZXkgaHVybGVkIHRoZWlyIGphdmVsaW5zIHRvIG5vIHB1cnBvc2UgYW5kIGhpdCBub2JvZHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMsIHNlZWluZyB0aGlzLCBjaGFyZ2VkIHVwb24gdGhlbSB3aXRoIGxvdWQgY3JpZXMsIGFuZCB3aGVuIHRoZSBlbmVteSBubyBsb25nZXIgdmVudHVyZWQgdG8gc3RhbmQgdGhlaXIgZ3JvdW5kLCBidXQgZmxlZCBpbiBwYW5pYyBmZWFyLCB0aGV5IGN1dCB0aGVtIGRvd24sIHNvIHRoYXQgbWFueSBtb3JlIHRoYW4gdGVuIHRob3VzYW5kIG9mIHRoZW0gd2VyZSBzbGFpbiwgYW5kIHRoZWlyIGNhbXAgd2FzIGNhcHR1cmVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgTHVjdWxsdXMgd2l0aGRyZXcgZnJvbSB0aG9zZSBwYXJ0cywgYW5kIFBvbXBleSwgaGF2aW5nIGRpc3RyaWJ1dGVkIGhpcyB3aG9sZSBmbGVldCBzbyBhcyB0byBndWFyZCB0aGUgc2VhIGJldHdlZW4gUGhvZW5pY2lhIGFuZCB0aGUgQm9zcG9ydXMsIGhpbXNlbGYgbWFyY2hlZCBhZ2FpbnN0IE1pdGhyaWRhdGVzLCB3aG8gaGFkIGEgZmlnaHRpbmcgZm9yY2Ugb2YgdGhpcnR5IHRob3VzYW5kIGZvb3QgYW5kIHR3byB0aG91c2FuZCBob3JzZSwgYnV0IGRpZCBub3QgZGFyZSB0byBvZmZlciBiYXR0bGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRvIGJlZ2luIHdpdGgsIHRoZSBraW5nIHdhcyBzdHJvbmdseSBlbmNhbXBlZCBvbiBhIG1vdW50YWluIHdoaWNoIHdhcyBkaWZmaWN1bHQgb2YgYXNzYXVsdCwgYnV0IGFiYW5kb25lZCBpdCwgc3VwcG9zaW5nIHRoYXQgaXQgaGFkIG5vIHdhdGVyLiBQb21wZXkgdG9vayBwb3NzZXNzaW9uIG9mIHRoaXMgdmVyeSBtb3VudGFpbiwgYW5kIGp1ZGdpbmcgYnkgdGhlIG5hdHVyZSBvZiB0aGUgdmVnZXRhdGlvbiBhbmQgYnkgdGhlIGNoYW5uZWxzIGluIHRoZSBzbG9wZXMgdGhhdCB0aGUgcGxhY2UgaGFkIHNwcmluZ3MsIG9yZGVyZWQgaGlzIG1lbiB0byBzaW5rIHdlbGxzIGV2ZXJ5d2hlcmUuIEF0IG9uY2UsIHRoZW4sIGhpcyBjYW1wIHdhcyBhYnVuZGFudGx5IHN1cHBsaWVkIHdpdGggd2F0ZXIsIGFuZCBtZW4gd29uZGVyZWQgdGhhdCBpbiBhbGwgdGhlIHRpbWUgb2YgaGlzIGVuY2FtcG1lbnQgdGhlcmUgTWl0aHJpZGF0ZXMgaGFkIGJlZW4gaWdub3JhbnQgb2YgdGhpcyBwb3NzaWJpbGl0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5leHQsIGhlIGludmVzdGVkIHRoZSBraW5nJ3MgY2FtcCBhbmQgd2FsbGVkIGhpbSBpbi4gQnV0IGFmdGVyIGVuZHVyaW5nIGEgc2llZ2Ugb2YgZm9ydHktZml2ZSBkYXlzLCBNaXRocmlkYXRlcyBzdWNjZWVkZWQgaW4gc3RlYWxpbmcgb2ZmIHdpdGggaGlzIG1vc3QgZWZmZWN0aXZlIHRyb29wczsgdGhlIHNpY2sgYW5kIHVuc2VydmljZWFibGUgaGUga2lsbGVkLiBUaGVuLCBob3dldmVyLCBQb21wZXkgb3ZlcnRvb2sgaGltIG5lYXIgdGhlIEV1cGhyYXRlcyByaXZlciwgYW5kIGVuY2FtcGVkIGNsb3NlIGJ5OyBhbmQgZmVhcmluZyBsZXN0IHRoZSBraW5nIHNob3VsZCBnZXQgdGhlIGFkdmFudGFnZSBvZiBoaW0gYnkgY3Jvc3NpbmcgdGhlIEV1cGhyYXRlcywgaGUgcHV0IGhpcyBhcm15IGluIGJhdHRsZSBhcnJheSBhbmQgbGVkIGl0IGFnYWluc3QgaGltIGF0IG1pZG5pZ2h0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSBNaXRocmlkYXRlcyBpcyBzYWlkIHRvIGhhdmUgc2VlbiBhIHZpc2lvbiBpbiBoaXMgc2xlZXAsIHJldmVhbGluZyB3aGF0IHNob3VsZCBjb21lIHRvIHBhc3MuIEhlIGRyZWFtZWQgdGhhdCBoZSB3YXMgc2FpbGluZyB0aGUgUG9udGljIFNlYSB3aXRoIGEgZmFpciB3aW5kLCBhbmQgd2FzIGFscmVhZHkgaW4gc2lnaHQgb2YgdGhlIEJvc3BvcnVzLCBhbmQgd2FzIGdyZWV0aW5nIHBsZWFzYW50bHkgaGlzIGZlbGxvdy12b3lhZ2VycywgYXMgYSBtYW4gd291bGQgZG8gaW4gaGlzIGpveSBvdmVyIGEgbWFuaWZlc3QgYW5kIHN1cmUgZGVsaXZlcmFuY2U7IGJ1dCBzdWRkZW5seSBoZSBzYXcgaGltc2VsZiBiZXJlZnQgb2YgYWxsIGhpcyBjb21wYW5pb25zIGFuZCB0b3NzZWQgYWJvdXQgb24gYSBzbWFsbCBwaWVjZSBvZiB3cmVja2FnZS4gQXMgaGUgZHJlYW1lZCBvZiBzdWNoIGRpc3RyZXNzLCBoaXMgZnJpZW5kcyBjYW1lIHRvIGhpcyBjb3VjaCBhbmQgcm91c2VkIGhpbSB3aXRoIHRoZSBuZXdzIHRoYXQgUG9tcGV5IHdhcyBhZHZhbmNpbmcgdG8gdGhlIGF0dGFjay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyB0aGVyZWZvcmUgY29tcGVsbGVkIHRvIGdpdmUgYmF0dGxlIGluIGRlZmVuY2Ugb2YgaGlzIGNhbXAsIGFuZCBoaXMgZ2VuZXJhbHMgbGVkIG91dCB0aGVpciB0cm9vcHMgYW5kIHB1dCB0aGVtIGluIGFycmF5LiBCdXQgd2hlbiBQb21wZXkgcGVyY2VpdmVkIHRoZWlyIHByZXBhcmF0aW9ucyB0byBtZWV0IGhpbSwgaGUgaGVzaXRhdGVkIHRvIGhhemFyZCBtYXR0ZXJzIGluIHRoZSBkYXJrLCBhbmQgdGhvdWdodCBpdCBuZWNlc3NhcnkgbWVyZWx5IHRvIHN1cnJvdW5kIHRoZW0sIGluIG9yZGVyIHRvIHByZXZlbnQgdGhlaXIgZXNjYXBlLCBhbmQgdGhlbiB0byBhdHRhY2sgdGhlbSB3aGVuIGl0IHdhcyBkYXksIHNpbmNlIHRoZXkgd2VyZSBzdXBlcmlvciBpbiBudW1iZXJzLiBCdXQgaGlzIG9sZGVzdCBvZmZpY2VycywgYnkgdGhlaXIgZW50cmVhdGllcyBhbmQgZXhob3J0YXRpb25zLCBwcmV2YWlsZWQgdXBvbiBoaW0gdG8gYXR0YWNrIGF0IG9uY2U7IGZvciBpdCB3YXMgbm90IHdob2xseSBkYXJrLCBidXQgdGhlIG1vb24sIHdoaWNoIHdhcyBzZXR0aW5nLCBtYWRlIGl0IHN0aWxsIHBvc3NpYmxlIHRvIGRpc3Rpbmd1aXNoIHBlcnNvbnMgY2xlYXJseSBlbm91Z2g7IGluZGVlZCwgaXQgd2FzIHRoaXMgY2lyY3Vtc3RhbmNlIHRoYXQgYnJvdWdodCBtb3N0IGhhcm0gdG8gdGhlIGtpbmcncyB0cm9vcHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgUm9tYW5zIGNhbWUgdG8gdGhlIGF0dGFjayB3aXRoIHRoZSBtb29uIGF0IHRoZWlyIGJhY2tzLCBhbmQgc2luY2UgaGVyIGxpZ2h0IHdhcyBjbG9zZSB0byB0aGUgaG9yaXpvbiwgdGhlIHNoYWRvd3MgbWFkZSBieSB0aGVpciBib2RpZXMgd2VyZSB0aHJvd24gZmFyIGluIGFkdmFuY2UgYW5kIGZlbGwgdXBvbiB0aGUgZW5lbXksIHdobyB3ZXJlIHRodXMgdW5hYmxlIHRvIGVzdGltYXRlIGNvcnJlY3RseSB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGVtc2VsdmVzIGFuZCB0aGVpciBmb2VzLCBidXQgc3VwcG9zaW5nIHRoYXQgdGhleSB3ZXJlIGFscmVhZHkgYXQgY2xvc2UgcXVhcnRlcnMsIHRoZXkgaHVybGVkIHRoZWlyIGphdmVsaW5zIHRvIG5vIHB1cnBvc2UgYW5kIGhpdCBub2JvZHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMsIHNlZWluZyB0aGlzLCBjaGFyZ2VkIHVwb24gdGhlbSB3aXRoIGxvdWQgY3JpZXMsIGFuZCB3aGVuIHRoZSBlbmVteSBubyBsb25nZXIgdmVudHVyZWQgdG8gc3RhbmQgdGhlaXIgZ3JvdW5kLCBidXQgZmxlZCBpbiBwYW5pYyBmZWFyLCB0aGV5IGN1dCB0aGVtIGRvd24sIHNvIHRoYXQgbWFueSBtb3JlIHRoYW4gdGVuIHRob3VzYW5kIG9mIHRoZW0gd2VyZSBzbGFpbiwgYW5kIHRoZWlyIGNhbXAgd2FzIGNhcHR1cmVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPk1pdGhyaWRhdGVzIGhpbXNlbGYsIGhvd2V2ZXIsIGF0IHRoZSBvdXRzZXQsIGN1dCBhbmQgY2hhcmdlZCBoaXMgd2F5IHRocm91Z2ggdGhlIFJvbWFucyB3aXRoIGVpZ2h0IGh1bmRyZWQgaG9yc2VtZW47IGJ1dCB0aGUgcmVzdCB3ZXJlIHNvb24gZGlzcGVyc2VkIGFuZCBoZSB3YXMgbGVmdCB3aXRoIHRocmVlIGNvbXBhbmlvbnMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+T25lIG9mIHRoZXNlIHdhcyBIeXBzaWNyYXRlaWEsIGEgY29uY3ViaW5lLCB3aG8gYWx3YXlzIGRpc3BsYXllZCBhIHJpZ2h0IG1hbmx5IHNwaXJpdCBhbmQgZXh0cmF2YWdhbnQgZGFyaW5nIChmb3Igd2hpY2ggcmVhc29uIHRoZSBraW5nIHdhcyB3b250IHRvIGNhbGwgaGVyIEh5cHNpY3JhdGVzKSwgYW5kIGF0IHRoaXMgdGltZSwgbW91bnRlZCBhbmQgYWNjb3V0cmVkIGxpa2UgYSBQZXJzaWFuLCBzaGUgd2FzIG5laXRoZXIgZXhoYXVzdGVkIGJ5IHRoZSBsb25nIGpvdXJuZXlzLCBub3IgZGlkIHNoZSB3ZWFyeSBvZiBjYXJpbmcgZm9yIHRoZSBraW5nJ3MgcGVyc29uIGFuZCBmb3IgaGlzIGhvcnNlLCB1bnRpbCB0aGV5IGNhbWUgdG8gYSBwbGFjZSBjYWxsZWQgU2lub3JhLCB3aGljaCB3YXMgZnVsbCBvZiB0aGUga2luZydzIG1vbmV5IGFuZCB0cmVhc3VyZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoZW5jZSBNaXRocmlkYXRlcyB0b29rIGNvc3RseSByYWltZW50IGFuZCBkaXN0cmlidXRlZCBpdCB0byB0aG9zZSB3aG8gaGFkIGZsb2NrZWQgdG8gaGltIGluIGhpcyBmbGlnaHQuIEhlIGFsc28gZ2F2ZSBlYWNoIG9mIGhpcyBmcmllbmRzIGEgZGVhZGx5IHBvaXNvbiB0byBjYXJyeSB3aXRoIHRoZW0sIHRoYXQgbm8gb25lIG9mIHRoZW0gbWlnaHQgZmFsbCBpbnRvIHRoZSBoYW5kcyBvZiB0aGUgZW5lbXkgYWdhaW5zdCBoaXMgd2lsbC4gRnJvbSB0aGVuY2UgaGUgc2V0IG91dCB0b3dhcmRzIEFybWVuaWEgb24gaGlzIHdheSB0byBUaWdyYW5lczsgYnV0IHRoYXQgbW9uYXJjaCBmb3JiYWRlIGhpcyBjb21pbmcgYW5kIHByb2NsYWltZWQgYSByZXdhcmQgb2YgYSBodW5kcmVkIHRhbGVudHMgZm9yIGhpcyBwZXJzb247IGhlIHRoZXJlZm9yZSBwYXNzZWQgYnkgdGhlIHNvdXJjZXMgb2YgdGhlIEV1cGhyYXRlcyBhbmQgY29udGludWVkIGhpcyBmbGlnaHQgdGhyb3VnaCBDb2xjaGlzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk9uZSBvZiB0aGVzZSB3YXMgSHlwc2ljcmF0ZWlhLCBhIGNvbmN1YmluZSwgd2hvIGFsd2F5cyBkaXNwbGF5ZWQgYSByaWdodCBtYW5seSBzcGlyaXQgYW5kIGV4dHJhdmFnYW50IGRhcmluZyAoZm9yIHdoaWNoIHJlYXNvbiB0aGUga2luZyB3YXMgd29udCB0byBjYWxsIGhlciBIeXBzaWNyYXRlcyksIGFuZCBhdCB0aGlzIHRpbWUsIG1vdW50ZWQgYW5kIGFjY291dHJlZCBsaWtlIGEgUGVyc2lhbiwgc2hlIHdhcyBuZWl0aGVyIGV4aGF1c3RlZCBieSB0aGUgbG9uZyBqb3VybmV5cywgbm9yIGRpZCBzaGUgd2Vhcnkgb2YgY2FyaW5nIGZvciB0aGUga2luZydzIHBlcnNvbiBhbmQgZm9yIGhpcyBob3JzZSwgdW50aWwgdGhleSBjYW1lIHRvIGEgcGxhY2UgY2FsbGVkIFNpbm9yYSwgd2hpY2ggd2FzIGZ1bGwgb2YgdGhlIGtpbmcncyBtb25leSBhbmQgdHJlYXN1cmVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoZW5jZSBNaXRocmlkYXRlcyB0b29rIGNvc3RseSByYWltZW50IGFuZCBkaXN0cmlidXRlZCBpdCB0byB0aG9zZSB3aG8gaGFkIGZsb2NrZWQgdG8gaGltIGluIGhpcyBmbGlnaHQuIEhlIGFsc28gZ2F2ZSBlYWNoIG9mIGhpcyBmcmllbmRzIGEgZGVhZGx5IHBvaXNvbiB0byBjYXJyeSB3aXRoIHRoZW0sIHRoYXQgbm8gb25lIG9mIHRoZW0gbWlnaHQgZmFsbCBpbnRvIHRoZSBoYW5kcyBvZiB0aGUgZW5lbXkgYWdhaW5zdCBoaXMgd2lsbC4gRnJvbSB0aGVuY2UgaGUgc2V0IG91dCB0b3dhcmRzIEFybWVuaWEgb24gaGlzIHdheSB0byBUaWdyYW5lczsgYnV0IHRoYXQgbW9uYXJjaCBmb3JiYWRlIGhpcyBjb21pbmcgYW5kIHByb2NsYWltZWQgYSByZXdhcmQgb2YgYSBodW5kcmVkIHRhbGVudHMgZm9yIGhpcyBwZXJzb247IGhlIHRoZXJlZm9yZSBwYXNzZWQgYnkgdGhlIHNvdXJjZXMgb2YgdGhlIEV1cGhyYXRlcyBhbmQgY29udGludWVkIGhpcyBmbGlnaHQgdGhyb3VnaCBDb2xjaGlzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Qb21wZXkgdGhlbiBpbnZhZGVkIEFybWVuaWEgb24gdGhlIGludml0YXRpb24gb2YgeW91bmcgVGlncmFuZXMsIHdobyB3YXMgbm93IGluIHJldm9sdCBmcm9tIGhpcyBmYXRoZXIsIGFuZCB3aG8gbWV0IFBvbXBleSBuZWFyIHRoZSByaXZlciBBcmF4ZXMsIHdoaWNoIHRha2VzIGl0cyByaXNlIGluIHRoZSBzYW1lIHJlZ2lvbnMgYXMgdGhlIEV1cGhyYXRlcywgYnV0IHR1cm5zIHRvd2FyZHMgdGhlIGVhc3QgYW5kIGVtcHRpZXMgaW50byB0aGUgQ2FzcGlhbiBTZWEuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHR3bywgdGhlbiwgbWFyY2hlZCBmb3J3YXJkIHRvZ2V0aGVyLCByZWNlaXZpbmcgdGhlIHN1Ym1pc3Npb24gb2YgdGhlIGNpdGllcyBhcyB0aGV5IHBhc3NlZDsgS2luZyBUaWdyYW5lcywgaG93ZXZlciwgd2hvIGhhZCByZWNlbnRseSBiZWVuIGNydXNoZWQgYnkgTHVjdWxsdXMsIGJ1dCBub3cgbGVhcm5lZCB0aGF0IFBvbXBleSB3YXMgcmF0aGVyIG1pbGQgYW5kIGdlbnRsZSBpbiBoaXMgZGlzcG9zaXRpb24sIHJlY2VpdmVkIGEgUm9tYW4gZ2Fycmlzb24gaW50byBoaXMgcGFsYWNlLCBhbmQgdGFraW5nIHdpdGggaGltIGhpcyBmcmllbmRzIGFuZCBraW5kcmVkLCBzZXQgb3V0IG9mIGhpcyBvd24gYWNjb3JkIHRvIHN1cnJlbmRlciBoaW1zZWxmLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIHJvZGUgdXAgdG8gdGhlIFJvbWFuIGNhbXAsIHR3byBvZiBQb21wZXkncyBsaWN0b3JzIGNhbWUgdG8gaGltIGFuZCBiYWRlIGhpbSBkaXNtb3VudCBmcm9tIGhpcyBob3JzZSBhbmQgZ28gb24gZm9vdDsgZm9yIG5vIG1hbiBtb3VudGVkIG9uIGhvcnNlYmFjayBoYWQgZXZlciBiZWVuIHNlZW4gaW4gYSBSb21hbiBjYW1wLiBUaWdyYW5lcywgYWNjb3JkaW5nbHksIG5vdCBvbmx5IG9iZXllZCB0aGVtIGluIHRoaXMsIGJ1dCBhbHNvIHVubG9vc2VkIGhpcyBzd29yZCBhbmQgZ2F2ZSBpdCB0byB0aGVtOyBhbmQgZmluYWxseSwgd2hlbiBoZSBjYW1lIGludG8gdGhlIHByZXNlbmNlIG9mIFBvbXBleSBoaW1zZWxmLCBoZSB0b29rIG9mZiBoaXMgcm95YWwgdGlhcmEgYW5kIG1hZGUgYXMgaWYgdG8gbGF5IGl0IGF0IGhpcyBmZWV0LCBhbmQgd2hhdCB3YXMgbW9zdCBodW1pbGlhdGluZyBvZiBhbGwsIHdvdWxkIGhhdmUgdGhyb3duIGhpbXNlbGYgZG93biBhbmQgY2xhc3BlZCBoaXMga25lZXMgaW4gc3VwcGxpY2F0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYmVmb3JlIGhlIGNvdWxkIGRvIHRoaXMsIFBvbXBleSBjYXVnaHQgaGltIGJ5IHRoZSBoYW5kIGFuZCBkcmV3IGhpbSBmb3J3YXJkLCBhbmQgYWZ0ZXIgZ2l2aW5nIGhpbSBhIHNlYXQgbmVhciBoaW1zZWxmLCBhbmQgcHV0dGluZyBoaXMgc29uIG9uIHRoZSBvdGhlciBzaWRlLCB0b2xkIGhpbSB0aGF0IGhlIG11c3QgbGF5IHRoZSByZXN0IG9mIGhpcyBsb3NzZXMgdG8gTHVjdWxsdXMsIHdobyBoYWQgcm9iYmVkIGhpbSBvZiBTeXJpYSwgUGhvZW5pY2lhLCBDaWxpY2lhLCBHYWxhdGlhLCBhbmQgU29waGVuZTsgYnV0IHRoYXQgd2hhdCBoZSBoYWQga2VwdCB1cCB0byB0aGUgcHJlc2VudCB0aW1lIGhlIHNob3VsZCBjb250aW51ZSB0byBob2xkIGlmIGhlIHBhaWQgc2l4IHRob3VzYW5kIHRhbGVudHMgdG8gdGhlIFJvbWFucyBhcyBhIHBlbmFsdHkgZm9yIGhpcyB3cm9uZ2RvaW5nOyBhbmQgdGhhdCBoaXMgc29uIHNob3VsZCBiZSBraW5nIG9mIFNvcGhlbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlc2UgdGVybXMgVGlncmFuZXMgd2FzIHdlbGwgcGxlYXNlZCwgYW5kIHdoZW4gdGhlIFJvbWFucyBoYWlsZWQgaGltIGFzIEtpbmcsIGhlIHdhcyBvdmVyam95ZWQsIGFuZCBwcm9taXNlZCB0byBnaXZlIGVhY2ggc29sZGllciBoYWxmIGEgbWluYSBvZiBzaWx2ZXIsIHRvIGVhY2ggY2VudHVyaW9uIHRlbiBtaW5hcywgYW5kIHRvIGVhY2ggdHJpYnVuZSBhIHRhbGVudC4gQnV0IGhpcyBzb24gd2FzIGRpc3NhdGlzZmllZCwgYW5kIHdoZW4gaGUgd2FzIGludml0ZWQgdG8gc3VwcGVyLCBzYWlkIHRoYXQgaGUgd2FzIG5vdCBkZXBlbmRlbnQgb24gUG9tcGV5IGZvciBzdWNoIGhvbm91cnMsIGZvciBoZSBoaW1zZWxmIGNvdWxkIGZpbmQgYW5vdGhlciBSb21hbiB0byBiZXN0b3cgdGhlbS4gVXBvbiB0aGlzLCBoZSB3YXMgcHV0IGluIGNoYWlucyBhbmQgcmVzZXJ2ZWQgZm9yIHRoZSB0cml1bXBoLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3QgbG9uZyBhZnRlciB0aGlzLCBQaHJhYXRlcyB0aGUgUGFydGhpYW4gc2VudCBhIGRlbWFuZCBmb3IgdGhlIHlvdW5nIG1hbiwgb24gaGUgcGxlYSB0aGF0IGhlIHdhcyBoaXMgc29uLWluLWxhdywgYW5kIGEgcHJvcG9zaXRpb24gdGhhdCB0aGUgRXVwaHJhdGVzIGJlIGFkb3B0ZWQgYXMgYSBib3VuZGFyeSBiZXR3ZWVuIGhpcyBlbXBpcmUgYW5kIHRoYXQgb2YgdGhlIFJvbWFucy4gUG9tcGV5IHJlcGxpZWQgdGhhdCBhcyBmb3IgVGlncmFuZXMsIGhlIGJlbG9uZ2VkIHRvIGhpcyBmYXRoZXIgbW9yZSB0aGFuIHRvIGhpcyBmYXRoZXItaW4tbGF3OyBhbmQgYXMgZm9yIGEgYm91bmRhcnksIHRoZSBqdXN0IG9uZSB3b3VsZCBiZSBhZG9wdGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5IHRoZW4gaW52YWRlZCBBcm1lbmlhIG9uIHRoZSBpbnZpdGF0aW9uIG9mIHlvdW5nIFRpZ3JhbmVzLCB3aG8gd2FzIG5vdyBpbiByZXZvbHQgZnJvbSBoaXMgZmF0aGVyLCBhbmQgd2hvIG1ldCBQb21wZXkgbmVhciB0aGUgcml2ZXIgQXJheGVzLCB3aGljaCB0YWtlcyBpdHMgcmlzZSBpbiB0aGUgc2FtZSByZWdpb25zIGFzIHRoZSBFdXBocmF0ZXMsIGJ1dCB0dXJucyB0b3dhcmRzIHRoZSBlYXN0IGFuZCBlbXB0aWVzIGludG8gdGhlIENhc3BpYW4gU2VhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHR3bywgdGhlbiwgbWFyY2hlZCBmb3J3YXJkIHRvZ2V0aGVyLCByZWNlaXZpbmcgdGhlIHN1Ym1pc3Npb24gb2YgdGhlIGNpdGllcyBhcyB0aGV5IHBhc3NlZDsgS2luZyBUaWdyYW5lcywgaG93ZXZlciwgd2hvIGhhZCByZWNlbnRseSBiZWVuIGNydXNoZWQgYnkgTHVjdWxsdXMsIGJ1dCBub3cgbGVhcm5lZCB0aGF0IFBvbXBleSB3YXMgcmF0aGVyIG1pbGQgYW5kIGdlbnRsZSBpbiBoaXMgZGlzcG9zaXRpb24sIHJlY2VpdmVkIGEgUm9tYW4gZ2Fycmlzb24gaW50byBoaXMgcGFsYWNlLCBhbmQgdGFraW5nIHdpdGggaGltIGhpcyBmcmllbmRzIGFuZCBraW5kcmVkLCBzZXQgb3V0IG9mIGhpcyBvd24gYWNjb3JkIHRvIHN1cnJlbmRlciBoaW1zZWxmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgcm9kZSB1cCB0byB0aGUgUm9tYW4gY2FtcCwgdHdvIG9mIFBvbXBleSdzIGxpY3RvcnMgY2FtZSB0byBoaW0gYW5kIGJhZGUgaGltIGRpc21vdW50IGZyb20gaGlzIGhvcnNlIGFuZCBnbyBvbiBmb290OyBmb3Igbm8gbWFuIG1vdW50ZWQgb24gaG9yc2ViYWNrIGhhZCBldmVyIGJlZW4gc2VlbiBpbiBhIFJvbWFuIGNhbXAuIFRpZ3JhbmVzLCBhY2NvcmRpbmdseSwgbm90IG9ubHkgb2JleWVkIHRoZW0gaW4gdGhpcywgYnV0IGFsc28gdW5sb29zZWQgaGlzIHN3b3JkIGFuZCBnYXZlIGl0IHRvIHRoZW07IGFuZCBmaW5hbGx5LCB3aGVuIGhlIGNhbWUgaW50byB0aGUgcHJlc2VuY2Ugb2YgUG9tcGV5IGhpbXNlbGYsIGhlIHRvb2sgb2ZmIGhpcyByb3lhbCB0aWFyYSBhbmQgbWFkZSBhcyBpZiB0byBsYXkgaXQgYXQgaGlzIGZlZXQsIGFuZCB3aGF0IHdhcyBtb3N0IGh1bWlsaWF0aW5nIG9mIGFsbCwgd291bGQgaGF2ZSB0aHJvd24gaGltc2VsZiBkb3duIGFuZCBjbGFzcGVkIGhpcyBrbmVlcyBpbiBzdXBwbGljYXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBiZWZvcmUgaGUgY291bGQgZG8gdGhpcywgUG9tcGV5IGNhdWdodCBoaW0gYnkgdGhlIGhhbmQgYW5kIGRyZXcgaGltIGZvcndhcmQsIGFuZCBhZnRlciBnaXZpbmcgaGltIGEgc2VhdCBuZWFyIGhpbXNlbGYsIGFuZCBwdXR0aW5nIGhpcyBzb24gb24gdGhlIG90aGVyIHNpZGUsIHRvbGQgaGltIHRoYXQgaGUgbXVzdCBsYXkgdGhlIHJlc3Qgb2YgaGlzIGxvc3NlcyB0byBMdWN1bGx1cywgd2hvIGhhZCByb2JiZWQgaGltIG9mIFN5cmlhLCBQaG9lbmljaWEsIENpbGljaWEsIEdhbGF0aWEsIGFuZCBTb3BoZW5lOyBidXQgdGhhdCB3aGF0IGhlIGhhZCBrZXB0IHVwIHRvIHRoZSBwcmVzZW50IHRpbWUgaGUgc2hvdWxkIGNvbnRpbnVlIHRvIGhvbGQgaWYgaGUgcGFpZCBzaXggdGhvdXNhbmQgdGFsZW50cyB0byB0aGUgUm9tYW5zIGFzIGEgcGVuYWx0eSBmb3IgaGlzIHdyb25nZG9pbmc7IGFuZCB0aGF0IGhpcyBzb24gc2hvdWxkIGJlIGtpbmcgb2YgU29waGVuZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlc2UgdGVybXMgVGlncmFuZXMgd2FzIHdlbGwgcGxlYXNlZCwgYW5kIHdoZW4gdGhlIFJvbWFucyBoYWlsZWQgaGltIGFzIEtpbmcsIGhlIHdhcyBvdmVyam95ZWQsIGFuZCBwcm9taXNlZCB0byBnaXZlIGVhY2ggc29sZGllciBoYWxmIGEgbWluYSBvZiBzaWx2ZXIsIHRvIGVhY2ggY2VudHVyaW9uIHRlbiBtaW5hcywgYW5kIHRvIGVhY2ggdHJpYnVuZSBhIHRhbGVudC4gQnV0IGhpcyBzb24gd2FzIGRpc3NhdGlzZmllZCwgYW5kIHdoZW4gaGUgd2FzIGludml0ZWQgdG8gc3VwcGVyLCBzYWlkIHRoYXQgaGUgd2FzIG5vdCBkZXBlbmRlbnQgb24gUG9tcGV5IGZvciBzdWNoIGhvbm91cnMsIGZvciBoZSBoaW1zZWxmIGNvdWxkIGZpbmQgYW5vdGhlciBSb21hbiB0byBiZXN0b3cgdGhlbS4gVXBvbiB0aGlzLCBoZSB3YXMgcHV0IGluIGNoYWlucyBhbmQgcmVzZXJ2ZWQgZm9yIHRoZSB0cml1bXBoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vdCBsb25nIGFmdGVyIHRoaXMsIFBocmFhdGVzIHRoZSBQYXJ0aGlhbiBzZW50IGEgZGVtYW5kIGZvciB0aGUgeW91bmcgbWFuLCBvbiBoZSBwbGVhIHRoYXQgaGUgd2FzIGhpcyBzb24taW4tbGF3LCBhbmQgYSBwcm9wb3NpdGlvbiB0aGF0IHRoZSBFdXBocmF0ZXMgYmUgYWRvcHRlZCBhcyBhIGJvdW5kYXJ5IGJldHdlZW4gaGlzIGVtcGlyZSBhbmQgdGhhdCBvZiB0aGUgUm9tYW5zLiBQb21wZXkgcmVwbGllZCB0aGF0IGFzIGZvciBUaWdyYW5lcywgaGUgYmVsb25nZWQgdG8gaGlzIGZhdGhlciBtb3JlIHRoYW4gdG8gaGlzIGZhdGhlci1pbi1sYXc7IGFuZCBhcyBmb3IgYSBib3VuZGFyeSwgdGhlIGp1c3Qgb25lIHdvdWxkIGJlIGFkb3B0ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gbGVhdmluZyBBZnJhbml1cyBpbiBjaGFyZ2Ugb2YgQXJtZW5pYSwgUG9tcGV5IGhpbXNlbGYgcHJvY2VlZGVkIGFnYWluc3QgTWl0aHJpZGF0ZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjUgQi5DLjwvbm90ZT4gYW5kIG9mIG5lY2Vzc2l0eSBwYXNzZWQgdGhyb3VnaCB0aGUgcGVvcGxlcyBkd2VsbGluZyBhYm91dCB0aGUgQ2F1Y2FzdXMgbW91bnRhaW5zLiBUaGUgZ3JlYXRlc3Qgb2YgdGhlc2UgcGVvcGxlcyBhcmUgdGhlIEFsYmFuaWFucyBhbmQgdGhlIEliZXJpYW5zLCBvZiB3aG9tIHRoZSBJYmVyaWFucyBleHRlbmQgdG8gdGhlIE1vc2NoaWFuIG1vdW50YWlucyBhbmQgdGhlIEV1eGluZSBTZWEsIHdoaWxlIHRoZSBBbGJhbmlhbnMgbGllIHRvIHRoZSBlYXN0d2FyZCBhcyBmYXIgYXMgdGhlIENhc3BpYW4gU2VhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBsYXR0ZXIgYXQgZmlyc3QgZ3JhbnRlZCBQb21wZXkncyByZXF1ZXN0IGZvciBhIGZyZWUgcGFzc2FnZTsgYnV0IHdoZW4gd2ludGVyIGhhZCBvdmVydGFrZW4gaGlzIGFybXkgaW4gdGhlaXIgY291bnRyeSBhbmQgaXQgd2FzIG9jY3VwaWVkIGluIGNlbGVicmF0aW5nIHRoZSBSb21hbiBmZXN0aXZhbCBvZiB0aGUgU2F0dXJuYWxpYSwgdGhleSBtdXN0ZXJlZCBubyBsZXNzIHRoYW4gZm9ydHkgdGhvdXNhbmQgbWVuIGFuZCBtYWRlIGFuIGF0dGFjayB1cG9uIGl0LiBUbyBkbyB0aGlzLCB0aGV5IGNyb3NzZWQgdGhlIHJpdmVyIEN5cm51cywgd2hpY2ggcmlzZXMgaW4gdGhlIEliZXJpYW4gbW91bnRhaW5zLCBhbmQgcmVjZWl2aW5nIHRoZSBBcmF4ZXMgYXMgaXQgaXNzdWVzIGZyb20gQXJtZW5pYSwgZW1wdGllcyBpdHNlbGYgYnkgdHdlbHZlIG1vdXRocyBpbnRvIHRoZSBDYXNwaWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5PdGhlcnMgc2F5IHRoYXQgdGhlIEFyYXhlcyBtYWtlcyBubyBqdW5jdGlvbiB3aXRoIHRoaXMgc3RyZWFtLCBidXQgdGFrZXMgYSBjb3Vyc2Ugb2YgaXRzIG93biwgYW5kIGVtcHRpZXMgaXRzZWxmIGNsb3NlIGJ5IGludG8gdGhlIHNhbWUgc2VhLiBBbHRob3VnaCBQb21wZXkgY291bGQgaGF2ZSBvcHBvc2VkIHRoZSBlbmVteSdzIHBhc3NhZ2Ugb2YgdGhlIHJpdmVyLCBoZSBzdWZmZXJlZCB0aGVtIHRvIGNyb3NzIHVuZGlzdHVyYmVkOyB0aGVuIGhlIGF0dGFja2VkIHRoZW0sIHJvdXRlZCB0aGVtLCBhbmQgc2xldyBncmVhdCBudW1iZXJzIG9mIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZWlyIGtpbmcgc2VudCBlbnZveXMgYW5kIGJlZ2dlZCBmb3IgbWVyY3ksIFBvbXBleSBjb25kb25lZCBoaXMgd3JvbmctZG9pbmcgYW5kIG1hZGUgYSB0cmVhdHkgd2l0aCBoaW07IHRoZW4gaGUgbWFyY2hlZCBhZ2FpbnN0IHRoZSBJYmVyaWFucywgd2hvIHdlcmUgbm90IGxlc3MgbnVtZXJvdXMgdGhhbiB0aGUgb3RoZXJzIGFuZCBtb3JlIHdhcmxpa2UsIGFuZCBoYWQgYSBzdHJvbmcgZGVzaXJlIHRvIGdyYXRpZnkgTWl0aHJpZGF0ZXMgYnkgcmVwdWxzaW5nIFBvbXBleS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBJYmVyaWFucyBoYWQgbm90IGJlZW4gc3ViamVjdCBlaXRoZXIgdG8gdGhlIE1lZGVzIG9yIHRoZSBQZXJzaWFucywgYW5kIHRoZXkgZXNjYXBlZCB0aGUgTWFjZWRvbmlhbiBkb21pbmlvbiBhbHNvLCBzaW5jZSBBbGV4YW5kZXIgZGVwYXJ0ZWQgZnJvbSBIeXJjYW5pYSBpbiBoYXN0ZS4gTm90d2l0aHN0YW5kaW5nLCBQb21wZXkgcm91dGVkIHRoaXMgcGVvcGxlIGFsc28gaW4gYSBncmVhdCBiYXR0bGUsIGluIHdoaWNoIG5pbmUgdGhvdXNhbmQgb2YgdGhlbSB3ZXJlIHNsYWluIGFuZCBtb3JlIHRoYW4gdGVuIHRob3VzYW5kIHRha2VuIHByaXNvbmVyczsgdGhlbiBoZSBpbnZhZGVkIENvbGNoaXMsIHdoZXJlLCBhdCB0aGUgcml2ZXIgUGhhc2lzLCBTZXJ2aWxpdXMgbWV0IGhpbSwgYXQgdGhlIGhlYWQgb2YgdGhlIGZsZWV0IHdpdGggd2hpY2ggaGUgd2FzIGd1YXJkaW5nIHRoZSBFdXhpbmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBsZWF2aW5nIEFmcmFuaXVzIGluIGNoYXJnZSBvZiBBcm1lbmlhLCBQb21wZXkgaGltc2VsZiBwcm9jZWVkZWQgYWdhaW5zdCBNaXRocmlkYXRlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDY1IEIuQy48L25vdGU+IGFuZCBvZiBuZWNlc3NpdHkgcGFzc2VkIHRocm91Z2ggdGhlIHBlb3BsZXMgZHdlbGxpbmcgYWJvdXQgdGhlIENhdWNhc3VzIG1vdW50YWlucy4gVGhlIGdyZWF0ZXN0IG9mIHRoZXNlIHBlb3BsZXMgYXJlIHRoZSBBbGJhbmlhbnMgYW5kIHRoZSBJYmVyaWFucywgb2Ygd2hvbSB0aGUgSWJlcmlhbnMgZXh0ZW5kIHRvIHRoZSBNb3NjaGlhbiBtb3VudGFpbnMgYW5kIHRoZSBFdXhpbmUgU2VhLCB3aGlsZSB0aGUgQWxiYW5pYW5zIGxpZSB0byB0aGUgZWFzdHdhcmQgYXMgZmFyIGFzIHRoZSBDYXNwaWFuIFNlYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGxhdHRlciBhdCBmaXJzdCBncmFudGVkIFBvbXBleSdzIHJlcXVlc3QgZm9yIGEgZnJlZSBwYXNzYWdlOyBidXQgd2hlbiB3aW50ZXIgaGFkIG92ZXJ0YWtlbiBoaXMgYXJteSBpbiB0aGVpciBjb3VudHJ5IGFuZCBpdCB3YXMgb2NjdXBpZWQgaW4gY2VsZWJyYXRpbmcgdGhlIFJvbWFuIGZlc3RpdmFsIG9mIHRoZSBTYXR1cm5hbGlhLCB0aGV5IG11c3RlcmVkIG5vIGxlc3MgdGhhbiBmb3J0eSB0aG91c2FuZCBtZW4gYW5kIG1hZGUgYW4gYXR0YWNrIHVwb24gaXQuIFRvIGRvIHRoaXMsIHRoZXkgY3Jvc3NlZCB0aGUgcml2ZXIgQ3lybnVzLCB3aGljaCByaXNlcyBpbiB0aGUgSWJlcmlhbiBtb3VudGFpbnMsIGFuZCByZWNlaXZpbmcgdGhlIEFyYXhlcyBhcyBpdCBpc3N1ZXMgZnJvbSBBcm1lbmlhLCBlbXB0aWVzIGl0c2VsZiBieSB0d2VsdmUgbW91dGhzIGludG8gdGhlIENhc3BpYW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk90aGVycyBzYXkgdGhhdCB0aGUgQXJheGVzIG1ha2VzIG5vIGp1bmN0aW9uIHdpdGggdGhpcyBzdHJlYW0sIGJ1dCB0YWtlcyBhIGNvdXJzZSBvZiBpdHMgb3duLCBhbmQgZW1wdGllcyBpdHNlbGYgY2xvc2UgYnkgaW50byB0aGUgc2FtZSBzZWEuIEFsdGhvdWdoIFBvbXBleSBjb3VsZCBoYXZlIG9wcG9zZWQgdGhlIGVuZW15J3MgcGFzc2FnZSBvZiB0aGUgcml2ZXIsIGhlIHN1ZmZlcmVkIHRoZW0gdG8gY3Jvc3MgdW5kaXN0dXJiZWQ7IHRoZW4gaGUgYXR0YWNrZWQgdGhlbSwgcm91dGVkIHRoZW0sIGFuZCBzbGV3IGdyZWF0IG51bWJlcnMgb2YgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZWlyIGtpbmcgc2VudCBlbnZveXMgYW5kIGJlZ2dlZCBmb3IgbWVyY3ksIFBvbXBleSBjb25kb25lZCBoaXMgd3JvbmctZG9pbmcgYW5kIG1hZGUgYSB0cmVhdHkgd2l0aCBoaW07IHRoZW4gaGUgbWFyY2hlZCBhZ2FpbnN0IHRoZSBJYmVyaWFucywgd2hvIHdlcmUgbm90IGxlc3MgbnVtZXJvdXMgdGhhbiB0aGUgb3RoZXJzIGFuZCBtb3JlIHdhcmxpa2UsIGFuZCBoYWQgYSBzdHJvbmcgZGVzaXJlIHRvIGdyYXRpZnkgTWl0aHJpZGF0ZXMgYnkgcmVwdWxzaW5nIFBvbXBleS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgSWJlcmlhbnMgaGFkIG5vdCBiZWVuIHN1YmplY3QgZWl0aGVyIHRvIHRoZSBNZWRlcyBvciB0aGUgUGVyc2lhbnMsIGFuZCB0aGV5IGVzY2FwZWQgdGhlIE1hY2Vkb25pYW4gZG9taW5pb24gYWxzbywgc2luY2UgQWxleGFuZGVyIGRlcGFydGVkIGZyb20gSHlyY2FuaWEgaW4gaGFzdGUuIE5vdHdpdGhzdGFuZGluZywgUG9tcGV5IHJvdXRlZCB0aGlzIHBlb3BsZSBhbHNvIGluIGEgZ3JlYXQgYmF0dGxlLCBpbiB3aGljaCBuaW5lIHRob3VzYW5kIG9mIHRoZW0gd2VyZSBzbGFpbiBhbmQgbW9yZSB0aGFuIHRlbiB0aG91c2FuZCB0YWtlbiBwcmlzb25lcnM7IHRoZW4gaGUgaW52YWRlZCBDb2xjaGlzLCB3aGVyZSwgYXQgdGhlIHJpdmVyIFBoYXNpcywgU2VydmlsaXVzIG1ldCBoaW0sIGF0IHRoZSBoZWFkIG9mIHRoZSBmbGVldCB3aXRoIHdoaWNoIGhlIHdhcyBndWFyZGluZyB0aGUgRXV4aW5lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBwdXJzdWl0IG9mIE1pdGhyaWRhdGVzLCB3aG8gaGFkIHRocm93biBoaW1zZWxmIGFtb25nIHRoZSBwZW9wbGVzIGFib3V0IHRoZSBCb3Nwb3J1cyBhbmQgdGhlIE1hZW90aWMgU2VhLCB3YXMgYXR0ZW5kZWQgd2l0aCBncmVhdCBkaWZmaWN1bHRpZXM7IGJlc2lkZXMsIHdvcmQgd2FzIGJyb3VnaHQgdG8gUG9tcGV5IHRoYXQgdGhlIEFsYmFuaWFucyBoYWQgYWdhaW4gcmV2b2x0ZWQuIFR1cm5pbmcgYmFjayBhZ2FpbnN0IHRoZXNlIGluIHJlc2VudG1lbnQgYW5kIHdyYXRoLCBoZSBjcm9zc2VkIHRoZSBDeXJudXMgYWdhaW4gd2l0aCBncmVhdCBkaWZmaWN1bHR5IGFuZCBoYXphcmQsIHNpbmNlIHRoZSBCYXJiYXJpYW5zIGhhZCBmZW5jZWQgb2ZmIGl0cyBiYW5rcyB3aXRoIGxvbmcgc3RyZXRjaGVzIG9mIHBhbGlzYWRlczsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+dGhlbiwgc2luY2UgaGUgbXVzdCBtYWtlIGEgbG9uZyBtYXJjaCB0aHJvdWdoIGEgd2F0ZXJsZXNzIGFuZCBkaWZmaWN1bHQgY291bnRyeSwgaGUgb3JkZXJlZCB0ZW4gdGhvdXNhbmQgc2tpbnMgdG8gYmUgZmlsbGVkIHdpdGggd2F0ZXIsIGFuZCB3aXRoIHRoaXMgcHJvdmlzaW9uIGFkdmFuY2VkIHVwb24gdGhlIGVuZW15LiBIZSBmb3VuZCB0aGVtIGRyYXduIHVwIG9uIHRoZSByaXZlciBBYmFzLCBzaXh0eSB0aG91c2FuZCBmb290IGFuZCB0d2VsdmUgdGhvdXNhbmQgaG9yc2UsIGJ1dCB3cmV0Y2hlZGx5IGFybWVkLCBhbmQgY2xhZCBmb3IgdGhlIG1vc3QgcGFydCBpbiB0aGUgc2tpbnMgb2Ygd2lsZCBiZWFzdHMuIFRoZXkgd2VyZSBsZWQgYnkgYSBicm90aGVyIG9mIHRoZSBraW5nLCBuYW1lZCBDb3NpcywgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+d2hvLCBhcyBzb29uIGFzIHRoZSBmaWdodGluZyB3YXMgYXQgY2xvc2UgcXVhcnRlcnMsIHJ1c2hlZCB1cG9uIFBvbXBleSBoaW1zZWxmIGFuZCBzbW90ZSBoaW0gd2l0aCBhIGphdmVsaW4gb24gdGhlIGZvbGQgb2YgaGlzIGJyZWFzdHBsYXRlOyBidXQgUG9tcGV5IHJhbiBoaW0gdGhyb3VnaCB0aGUgYm9keSBhbmQga2lsbGVkIGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGUgcHVyc3VpdCBvZiBNaXRocmlkYXRlcywgd2hvIGhhZCB0aHJvd24gaGltc2VsZiBhbW9uZyB0aGUgcGVvcGxlcyBhYm91dCB0aGUgQm9zcG9ydXMgYW5kIHRoZSBNYWVvdGljIFNlYSwgd2FzIGF0dGVuZGVkIHdpdGggZ3JlYXQgZGlmZmljdWx0aWVzOyBiZXNpZGVzLCB3b3JkIHdhcyBicm91Z2h0IHRvIFBvbXBleSB0aGF0IHRoZSBBbGJhbmlhbnMgaGFkIGFnYWluIHJldm9sdGVkLiBUdXJuaW5nIGJhY2sgYWdhaW5zdCB0aGVzZSBpbiByZXNlbnRtZW50IGFuZCB3cmF0aCwgaGUgY3Jvc3NlZCB0aGUgQ3lybnVzIGFnYWluIHdpdGggZ3JlYXQgZGlmZmljdWx0eSBhbmQgaGF6YXJkLCBzaW5jZSB0aGUgQmFyYmFyaWFucyBoYWQgZmVuY2VkIG9mZiBpdHMgYmFua3Mgd2l0aCBsb25nIHN0cmV0Y2hlcyBvZiBwYWxpc2FkZXM7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoZW4sIHNpbmNlIGhlIG11c3QgbWFrZSBhIGxvbmcgbWFyY2ggdGhyb3VnaCBhIHdhdGVybGVzcyBhbmQgZGlmZmljdWx0IGNvdW50cnksIGhlIG9yZGVyZWQgdGVuIHRob3VzYW5kIHNraW5zIHRvIGJlIGZpbGxlZCB3aXRoIHdhdGVyLCBhbmQgd2l0aCB0aGlzIHByb3Zpc2lvbiBhZHZhbmNlZCB1cG9uIHRoZSBlbmVteS4gSGUgZm91bmQgdGhlbSBkcmF3biB1cCBvbiB0aGUgcml2ZXIgQWJhcywgc2l4dHkgdGhvdXNhbmQgZm9vdCBhbmQgdHdlbHZlIHRob3VzYW5kIGhvcnNlLCBidXQgd3JldGNoZWRseSBhcm1lZCwgYW5kIGNsYWQgZm9yIHRoZSBtb3N0IHBhcnQgaW4gdGhlIHNraW5zIG9mIHdpbGQgYmVhc3RzLiBUaGV5IHdlcmUgbGVkIGJ5IGEgYnJvdGhlciBvZiB0aGUga2luZywgbmFtZWQgQ29zaXMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndobywgYXMgc29vbiBhcyB0aGUgZmlnaHRpbmcgd2FzIGF0IGNsb3NlIHF1YXJ0ZXJzLCBydXNoZWQgdXBvbiBQb21wZXkgaGltc2VsZiBhbmQgc21vdGUgaGltIHdpdGggYSBqYXZlbGluIG9uIHRoZSBmb2xkIG9mIGhpcyBicmVhc3RwbGF0ZTsgYnV0IFBvbXBleSByYW4gaGltIHRocm91Z2ggdGhlIGJvZHkgYW5kIGtpbGxlZCBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gdGhpcyBiYXR0bGUgaXQgaXMgc2FpZCB0aGF0IHRoZXJlIHdlcmUgYWxzbyBBbWF6b25zIGZpZ2h0aW5nIG9uIHRoZSBzaWRlIG9mIHRoZSBCYXJiYXJpYW5zLCBhbmQgdGhhdCB0aGV5IGNhbWUgZG93biBmcm9tIHRoZSBtb3VudGFpbnMgYWJvdXQgdGhlIHJpdmVyIFRoZXJtb2Rvbi4gRm9yIHdoZW4gdGhlIFJvbWFucyB3ZXJlIGRlc3BvaWxpbmcgdGhlIEJhcmJhcmlhbnMgYWZ0ZXIgdGhlIGJhdHRsZSwgdGhleSBjYW1lIHVwb24gQW1hem9uaWFuIHNoaWVsZHMgYW5kIGJ1c2tpbnM7IGJ1dCBubyBib2R5IG9mIGEgd29tYW4gd2FzIHNlZW4uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIEFtYXpvbnMgaW5oYWJpdCB0aGUgcGFydHMgb2YgdGhlIENhdWNhc3VzIG1vdW50YWlucyB0aGF0IHJlYWNoIGRvd24gdG8gdGhlIEh5cmNhbmlhbiBTZWEsIGFuZCB0aGV5IGRvIG5vdCBib3JkZXIgb24gdGhlIEFsYmFuaSwgYnV0IEdlbGFlIGFuZCBMZWdlcyBkd2VsbCBiZXR3ZWVuLiBXaXRoIHRoZXNlIHBlb3BsZXMsIHdobyBtZWV0IHRoZW0gYnkgdGhlIHJpdmVyIFRoZXJtb2RvbiwgdGhleSBjb25zb3J0IGZvciB0d28gbW9udGhzIGV2ZXJ5IHllYXI7IHRoZW4gdGhleSBnbyBhd2F5IGFuZCBsaXZlIGJ5IHRoZW1zZWx2ZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBBbWF6b25zIGluaGFiaXQgdGhlIHBhcnRzIG9mIHRoZSBDYXVjYXN1cyBtb3VudGFpbnMgdGhhdCByZWFjaCBkb3duIHRvIHRoZSBIeXJjYW5pYW4gU2VhLCBhbmQgdGhleSBkbyBub3QgYm9yZGVyIG9uIHRoZSBBbGJhbmksIGJ1dCBHZWxhZSBhbmQgTGVnZXMgZHdlbGwgYmV0d2Vlbi4gV2l0aCB0aGVzZSBwZW9wbGVzLCB3aG8gbWVldCB0aGVtIGJ5IHRoZSByaXZlciBUaGVybW9kb24sIHRoZXkgY29uc29ydCBmb3IgdHdvIG1vbnRocyBldmVyeSB5ZWFyOyB0aGVuIHRoZXkgZ28gYXdheSBhbmQgbGl2ZSBieSB0aGVtc2VsdmVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgYmF0dGxlLCBQb21wZXkgc2V0IG91dCB0byBtYXJjaCB0byB0aGUgSHlyY2FuaWFuIGFuZCBDYXNwaWFuIFNlYSwgYnV0IHdhcyB0dXJuZWQgYmFjayBieSBhIG11bHRpdHVkZSBvZiBkZWFkbHkgcmVwdGlsZXMgd2hlbiBoZSB3YXMgb25seSB0aHJlZSBkYXlzIG1hcmNoIGRpc3RhbnQsIGFuZCB3aXRoZHJldyBpbnRvIExlc3NlciBBcm1lbmlhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIHRoZSBraW5ncyBvZiB0aGUgRWx5bWFlYW5zIGFuZCB0aGUgTWVkZXMgc2VudCBhbWJhc3NhZG9ycyB0byBoaW0sIGFuZCBoZSB3cm90ZSB0aGVtIGEgZnJpZW5kbHkgYW5zd2VyOyBidXQgYWdhaW5zdCB0aGUgUGFydGhpYW4ga2luZywgd2hvIGhhZCBidXJzdCBpbnRvIEdvcmR5ZW5lIGFuZCB3YXMgcGx1bmRlcmluZyB0aGUgc3ViamVjdHMgb2YgVGlncmFuZXMsIGhlIHNlbnQgYW4gYXJtZWQgZm9yY2UgdW5kZXIgQWZyYW5pdXMsIHdoaWNoIGRyb3ZlIGhpbSBvdXQgb2YgdGhlIGNvdW50cnkgYW5kIHB1cnN1ZWQgaGltIGFzIGZhciBhcyB0aGUgZGlzdHJpY3Qgb2YgQXJiZWxhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGJhdHRsZSwgUG9tcGV5IHNldCBvdXQgdG8gbWFyY2ggdG8gdGhlIEh5cmNhbmlhbiBhbmQgQ2FzcGlhbiBTZWEsIGJ1dCB3YXMgdHVybmVkIGJhY2sgYnkgYSBtdWx0aXR1ZGUgb2YgZGVhZGx5IHJlcHRpbGVzIHdoZW4gaGUgd2FzIG9ubHkgdGhyZWUgZGF5cyBtYXJjaCBkaXN0YW50LCBhbmQgd2l0aGRyZXcgaW50byBMZXNzZXIgQXJtZW5pYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgdGhlIGtpbmdzIG9mIHRoZSBFbHltYWVhbnMgYW5kIHRoZSBNZWRlcyBzZW50IGFtYmFzc2Fkb3JzIHRvIGhpbSwgYW5kIGhlIHdyb3RlIHRoZW0gYSBmcmllbmRseSBhbnN3ZXI7IGJ1dCBhZ2FpbnN0IHRoZSBQYXJ0aGlhbiBraW5nLCB3aG8gaGFkIGJ1cnN0IGludG8gR29yZHllbmUgYW5kIHdhcyBwbHVuZGVyaW5nIHRoZSBzdWJqZWN0cyBvZiBUaWdyYW5lcywgaGUgc2VudCBhbiBhcm1lZCBmb3JjZSB1bmRlciBBZnJhbml1cywgd2hpY2ggZHJvdmUgaGltIG91dCBvZiB0aGUgY291bnRyeSBhbmQgcHVyc3VlZCBoaW0gYXMgZmFyIGFzIHRoZSBkaXN0cmljdCBvZiBBcmJlbGEuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2YgYWxsIHRoZSBjb25jdWJpbmVzIG9mIE1pdGhyaWRhdGVzIHRoYXQgd2VyZSBicm91Z2h0IHRvIFBvbXBleSwgaGUgdXNlZCBub3Qgb25lLCBidXQgcmVzdG9yZWQgdGhlbSBhbGwgdG8gdGhlaXIgcGFyZW50cyBhbmQga2luZHJlZDsgZm9yIG1vc3Qgb2YgdGhlbSB3ZXJlIGRhdWdodGVycyBhbmQgd2l2ZXMgb2YgZ2VuZXJhbHMgYW5kIHByaW5jZXMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFN0cmF0b25pY2UsIHdobyB3YXMgaGVsZCBpbiBoaWdoZXN0IGVzdGVlbSBieSB0aGUga2luZyBhbmQgaGFkIHRoZSBjdXN0b2R5IG9mIHRoZSByaWNoZXN0IG9mIGhpcyBmb3J0cmVzc2VzLCB3YXMsIGl0IHdvdWxkIHNlZW0sIHRoZSBkYXVnaHRlciBvZiBhIGh1bWJsZSBoYXJwaXN0LCBhbiBvbGQgbWFuLCBhbmQgcG9vciBiZXNpZGVzOyBidXQgc2hlIG1hZGUgc3VjaCBhIHN3aWZ0IGNvbnF1ZXN0IG9mIE1pdGhyaWRhdGVzIGFzIHNoZSBvbmNlIHBsYXllZCBmb3IgaGltIGF0IGhpcyB3aW5lLCB0aGF0IGhlIHRvb2sgaGVyIHdpdGggaGltIHRvIGhpcyBiZWQsIGJ1dCBzZW50IHRoZSBvbGQgbWFuIGF3YXkgaW4gZ3JlYXQgZGlzcGxlYXN1cmUgYXQgbm90IGdldHRpbmcgc28gbXVjaCBhcyBhIGtpbmRseSBncmVldGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG1vcm5pbmcsIGhvd2V2ZXIsIHdoZW4gdGhlIG9sZCBtYW4gcm9zZSBhbmQgc2F3IGluIGhpcyBob3VzZSB0YWJsZXMgbG9hZGVkIHdpdGggZ29sZCBhbmQgc2lsdmVyIGJlYWtlcnMsIGEgbGFyZ2UgcmV0aW51ZSBvZiBzZXJ2YW50cywgYW5kIGV1bnVjaHMgYW5kIHBhZ2VzIGJyaW5naW5nIGNvc3RseSBnYXJtZW50cyB0byBoaW0sIGFuZCBhIGhvcnNlIHN0YW5kaW5nIGJlZm9yZSBoaXMgZG9vciBjYXBhcmlzb25lZCBsaWtlIHRob3NlIG9mIHRoZSBraW5nJ3MgZnJpZW5kcywgaGUgdGhvdWdodCB0aGUgdGhpbmcgYSBtb2NrZXJ5IGFuZCBhIGpva2UsIGFuZCB0cmllZCB0byBydW4gb3V0IG9mIGRvb3JzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHNlcnZhbnRzIGxhaWQgaG9sZCBvZiBoaW0gYW5kIHRvbGQgaGltIHRoYXQgdGhlIGtpbmcgaGFkIGJlc3Rvd2VkIG9uIGhpbSB0aGUgbGFyZ2UgZXN0YXRlIG9mIGEgcmljaCBtYW4gd2hvIGhhZCByZWNlbnRseSBkaWVkLCBhbmQgdGhhdCB0aGVzZSB0aGluZ3Mgd2VyZSBvbmx5IHNtYWxsIGZvcmV0YXN0ZXMgYW5kIHNwZWNpbWVucyBvZiB0aGUgZ29vZHMgYW5kIGNoYXR0ZWxzIHN0aWxsIHJlbWFpbmluZy4gSW4gdGhpcyB3YXkgaGUgd2FzIHdpdGggZGlmZmljdWx0eSBwZXJzdWFkZWQsIGFuZCBwdXR0aW5nIG9uIGhpcyBwdXJwbGUgcm9iZXMgYW5kIGxlYXBpbmcgdXBvbiBoaXMgaG9yc2UsIGhlIHJvZGUgdGhyb3VnaCB0aGUgY2l0eSwgY3J5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFsbCB0aGlzIGlzIG1pbmUuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRob3NlIHdobyBsYXVnaGVkIGF0IGhpbSBoZSBzYWlkIHRoYXQgd2hhdCBoZSB3YXMgZG9pbmcgd2FzIG5vIHdvbmRlcjsgdGhlIHdvbmRlciB3YXMgdGhhdCBoZSBkaWQgbm90IHRocm93IHN0b25lcyBhdCB0aG9zZSB3aG8gbWV0IGhpbSwgZm9yIGhlIHdhcyBtYWQgd2l0aCBqb3kuIE9mIHN1Y2ggYSBzdG9jayBhbmQgbGluZWFnZSB3YXMgU3RyYXRvbmljZS4gQnV0IHNoZSBzdXJyZW5kZXJlZCB0aGlzIHN0cm9uZ2hvbGQgdG8gUG9tcGV5LCBhbmQgYnJvdWdodCBoaW0gbWFueSBnaWZ0cywgb2Ygd2hpY2ggaGUgYWNjZXB0ZWQgb25seSB0aG9zZSB3aGljaCB3ZXJlIGxpa2VseSB0byBhZG9ybiB0aGUgdGVtcGxlcyBhdCBSb21lIGFuZCBhZGQgc3BsZW5kb3VyIHRvIGhpcyB0cml1bXBoOyB0aGUgcmVzdCBoZSBiYWRlIFN0cmF0b25pY2Uga2VlcCBhbmQgd2VsY29tZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+SW4gbGlrZSBtYW5uZXIsIHRvbywgd2hlbiB0aGUga2luZyBvZiB0aGUgSWJlcmlhbnMgc2VudCBoaW0gYSBjb3VjaCwgYSB0YWJsZSwgYW5kIGEgdGhyb25lLCBhbGwgb2YgZ29sZCwgYW5kIGJlZ2dlZCBoaW0gdG8gYWNjZXB0IHRoZW0sIGhlIGRlbGl2ZXJlZCB0aGVzZSBhbHNvIHRvIHRoZSBxdWFlc3RvcnMsIGZvciB0aGUgcHVibGljIHRyZWFzdXJ5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTdHJhdG9uaWNlLCB3aG8gd2FzIGhlbGQgaW4gaGlnaGVzdCBlc3RlZW0gYnkgdGhlIGtpbmcgYW5kIGhhZCB0aGUgY3VzdG9keSBvZiB0aGUgcmljaGVzdCBvZiBoaXMgZm9ydHJlc3Nlcywgd2FzLCBpdCB3b3VsZCBzZWVtLCB0aGUgZGF1Z2h0ZXIgb2YgYSBodW1ibGUgaGFycGlzdCwgYW4gb2xkIG1hbiwgYW5kIHBvb3IgYmVzaWRlczsgYnV0IHNoZSBtYWRlIHN1Y2ggYSBzd2lmdCBjb25xdWVzdCBvZiBNaXRocmlkYXRlcyBhcyBzaGUgb25jZSBwbGF5ZWQgZm9yIGhpbSBhdCBoaXMgd2luZSwgdGhhdCBoZSB0b29rIGhlciB3aXRoIGhpbSB0byBoaXMgYmVkLCBidXQgc2VudCB0aGUgb2xkIG1hbiBhd2F5IGluIGdyZWF0IGRpc3BsZWFzdXJlIGF0IG5vdCBnZXR0aW5nIHNvIG11Y2ggYXMgYSBraW5kbHkgZ3JlZXRpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBtb3JuaW5nLCBob3dldmVyLCB3aGVuIHRoZSBvbGQgbWFuIHJvc2UgYW5kIHNhdyBpbiBoaXMgaG91c2UgdGFibGVzIGxvYWRlZCB3aXRoIGdvbGQgYW5kIHNpbHZlciBiZWFrZXJzLCBhIGxhcmdlIHJldGludWUgb2Ygc2VydmFudHMsIGFuZCBldW51Y2hzIGFuZCBwYWdlcyBicmluZ2luZyBjb3N0bHkgZ2FybWVudHMgdG8gaGltLCBhbmQgYSBob3JzZSBzdGFuZGluZyBiZWZvcmUgaGlzIGRvb3IgY2FwYXJpc29uZWQgbGlrZSB0aG9zZSBvZiB0aGUga2luZydzIGZyaWVuZHMsIGhlIHRob3VnaHQgdGhlIHRoaW5nIGEgbW9ja2VyeSBhbmQgYSBqb2tlLCBhbmQgdHJpZWQgdG8gcnVuIG91dCBvZiBkb29ycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgc2VydmFudHMgbGFpZCBob2xkIG9mIGhpbSBhbmQgdG9sZCBoaW0gdGhhdCB0aGUga2luZyBoYWQgYmVzdG93ZWQgb24gaGltIHRoZSBsYXJnZSBlc3RhdGUgb2YgYSByaWNoIG1hbiB3aG8gaGFkIHJlY2VudGx5IGRpZWQsIGFuZCB0aGF0IHRoZXNlIHRoaW5ncyB3ZXJlIG9ubHkgc21hbGwgZm9yZXRhc3RlcyBhbmQgc3BlY2ltZW5zIG9mIHRoZSBnb29kcyBhbmQgY2hhdHRlbHMgc3RpbGwgcmVtYWluaW5nLiBJbiB0aGlzIHdheSBoZSB3YXMgd2l0aCBkaWZmaWN1bHR5IHBlcnN1YWRlZCwgYW5kIHB1dHRpbmcgb24gaGlzIHB1cnBsZSByb2JlcyBhbmQgbGVhcGluZyB1cG9uIGhpcyBob3JzZSwgaGUgcm9kZSB0aHJvdWdoIHRoZSBjaXR5LCBjcnlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbGwgdGhpcyBpcyBtaW5lLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRob3NlIHdobyBsYXVnaGVkIGF0IGhpbSBoZSBzYWlkIHRoYXQgd2hhdCBoZSB3YXMgZG9pbmcgd2FzIG5vIHdvbmRlcjsgdGhlIHdvbmRlciB3YXMgdGhhdCBoZSBkaWQgbm90IHRocm93IHN0b25lcyBhdCB0aG9zZSB3aG8gbWV0IGhpbSwgZm9yIGhlIHdhcyBtYWQgd2l0aCBqb3kuIE9mIHN1Y2ggYSBzdG9jayBhbmQgbGluZWFnZSB3YXMgU3RyYXRvbmljZS4gQnV0IHNoZSBzdXJyZW5kZXJlZCB0aGlzIHN0cm9uZ2hvbGQgdG8gUG9tcGV5LCBhbmQgYnJvdWdodCBoaW0gbWFueSBnaWZ0cywgb2Ygd2hpY2ggaGUgYWNjZXB0ZWQgb25seSB0aG9zZSB3aGljaCB3ZXJlIGxpa2VseSB0byBhZG9ybiB0aGUgdGVtcGxlcyBhdCBSb21lIGFuZCBhZGQgc3BsZW5kb3VyIHRvIGhpcyB0cml1bXBoOyB0aGUgcmVzdCBoZSBiYWRlIFN0cmF0b25pY2Uga2VlcCBhbmQgd2VsY29tZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkluIGxpa2UgbWFubmVyLCB0b28sIHdoZW4gdGhlIGtpbmcgb2YgdGhlIEliZXJpYW5zIHNlbnQgaGltIGEgY291Y2gsIGEgdGFibGUsIGFuZCBhIHRocm9uZSwgYWxsIG9mIGdvbGQsIGFuZCBiZWdnZWQgaGltIHRvIGFjY2VwdCB0aGVtLCBoZSBkZWxpdmVyZWQgdGhlc2UgYWxzbyB0byB0aGUgcXVhZXN0b3JzLCBmb3IgdGhlIHB1YmxpYyB0cmVhc3VyeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGZvcnRyZXNzIG9mIENhZW51bSBQb21wZXkgZm91bmQgYWxzbyBwcml2YXRlIGRvY3VtZW50cyBiZWxvbmdpbmcgdG8gTWl0aHJpZGF0ZXMsIGFuZCByZWFkIHRoZW0gd2l0aCBubyBsaXR0bGUgc2F0aXNmYWN0aW9uLCBzaW5jZSB0aGV5IHNoZWQgbXVjaCBsaWdodCB1cG9uIHRoZSBraW5nJ3MgY2hhcmFjdGVyLiBGb3IgdGhlcmUgd2VyZSBtZW1vcmFuZGEgYW1vbmcgdGhlbSBmcm9tIHdoaWNoIGl0IHdhcyBkaXNjb3ZlcmVkIHRoYXQsIGJlc2lkZXMgbWFueSBvdGhlcnMsIGhlIGhhZCBwb2lzb25lZCB0byBkZWF0aCBoaXMgc29uIEFyaWFyYXRoZXMsIGFuZCBhbHNvIEFsY2FldXMgb2YgU2FyZGlzLCBiZWNhdXNlIGhlIGhhZCBzdXJwYXNzZWQgaGltIGluIGRyaXZpbmcgcmFjZS1ob3JzZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZSB3cml0aW5ncyB3ZXJlIGFsc28gaW50ZXJwcmV0YXRpb25zIG9mIGRyZWFtcywgc29tZSBvZiB3aGljaCBoZSBoaW1zZWxmIGhhZCBkcmVhbWVkLCBhbmQgb3RoZXJzLCBzb21lIG9mIGhpcyB3aXZlcy4gVGhlcmUgd2VyZSBhbHNvIGxldHRlcnMgZnJvbSBNb25pbWUgdG8gaGltLCBvZiBhIGxhc2NpdmlvdXMgbmF0dXJlLCBhbmQgYW5zd2VyaW5nIGxldHRlcnMgZnJvbSBoaW0gdG8gaGVyLiBNb3Jlb3ZlciwgVGhlb3BoYW5lcyBzYXlzIHRoZXJlIHdhcyBmb3VuZCBoZXJlIGFuIGFkZHJlc3Mgb2YgUnV0aWxpdXMsIHdoaWNoIGluY2l0ZWQgdGhlIGtpbmcgdG8gdGhlIG1hc3NhY3JlIG9mIHRoZSBSb21hbnMgaW4gQXNpYS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG1vc3QgcGVvcGxlIHJpZ2h0bHkgY29uamVjdHVyZSB0aGF0IHRoaXMgd2FzIGEgbWFsaWNpb3VzIGludmVudGlvbiBvbiB0aGUgcGFydCBvZiBUaGVvcGhhbmVzLCBwZXJoYXBzIGJlY2F1c2UgaGUgaGF0ZWQgUnV0aWxpdXMsIHdobyB3YXMgd2hvbGx5IHVubGlrZSBoaW1zZWxmLCBidXQgcHJvYmFibHkgYWxzbyB0byBwbGVhc2UgUG9tcGV5LCB3aG9zZSBmYXRoZXIgaGFkIGJlZW4gcmVwcmVzZW50ZWQgYXMgYW4gdXR0ZXIgd3JldGNoIGJ5IFJ1dGlsaXVzIGluIGhpcyBoaXN0b3JpZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGZvcnRyZXNzIG9mIENhZW51bSBQb21wZXkgZm91bmQgYWxzbyBwcml2YXRlIGRvY3VtZW50cyBiZWxvbmdpbmcgdG8gTWl0aHJpZGF0ZXMsIGFuZCByZWFkIHRoZW0gd2l0aCBubyBsaXR0bGUgc2F0aXNmYWN0aW9uLCBzaW5jZSB0aGV5IHNoZWQgbXVjaCBsaWdodCB1cG9uIHRoZSBraW5nJ3MgY2hhcmFjdGVyLiBGb3IgdGhlcmUgd2VyZSBtZW1vcmFuZGEgYW1vbmcgdGhlbSBmcm9tIHdoaWNoIGl0IHdhcyBkaXNjb3ZlcmVkIHRoYXQsIGJlc2lkZXMgbWFueSBvdGhlcnMsIGhlIGhhZCBwb2lzb25lZCB0byBkZWF0aCBoaXMgc29uIEFyaWFyYXRoZXMsIGFuZCBhbHNvIEFsY2FldXMgb2YgU2FyZGlzLCBiZWNhdXNlIGhlIGhhZCBzdXJwYXNzZWQgaGltIGluIGRyaXZpbmcgcmFjZS1ob3JzZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZSB3cml0aW5ncyB3ZXJlIGFsc28gaW50ZXJwcmV0YXRpb25zIG9mIGRyZWFtcywgc29tZSBvZiB3aGljaCBoZSBoaW1zZWxmIGhhZCBkcmVhbWVkLCBhbmQgb3RoZXJzLCBzb21lIG9mIGhpcyB3aXZlcy4gVGhlcmUgd2VyZSBhbHNvIGxldHRlcnMgZnJvbSBNb25pbWUgdG8gaGltLCBvZiBhIGxhc2NpdmlvdXMgbmF0dXJlLCBhbmQgYW5zd2VyaW5nIGxldHRlcnMgZnJvbSBoaW0gdG8gaGVyLiBNb3Jlb3ZlciwgVGhlb3BoYW5lcyBzYXlzIHRoZXJlIHdhcyBmb3VuZCBoZXJlIGFuIGFkZHJlc3Mgb2YgUnV0aWxpdXMsIHdoaWNoIGluY2l0ZWQgdGhlIGtpbmcgdG8gdGhlIG1hc3NhY3JlIG9mIHRoZSBSb21hbnMgaW4gQXNpYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IHBlb3BsZSByaWdodGx5IGNvbmplY3R1cmUgdGhhdCB0aGlzIHdhcyBhIG1hbGljaW91cyBpbnZlbnRpb24gb24gdGhlIHBhcnQgb2YgVGhlb3BoYW5lcywgcGVyaGFwcyBiZWNhdXNlIGhlIGhhdGVkIFJ1dGlsaXVzLCB3aG8gd2FzIHdob2xseSB1bmxpa2UgaGltc2VsZiwgYnV0IHByb2JhYmx5IGFsc28gdG8gcGxlYXNlIFBvbXBleSwgd2hvc2UgZmF0aGVyIGhhZCBiZWVuIHJlcHJlc2VudGVkIGFzIGFuIHV0dGVyIHdyZXRjaCBieSBSdXRpbGl1cyBpbiBoaXMgaGlzdG9yaWVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIENhZW51bSBQb21wZXkgd2VudCB0byBBbWlzdXMsIHdoZXJlIGhpcyBhbWJpdGlvbiBsZWQgaGltIGludG8gb2Jub3hpb3VzIGNvdXJzZXMuIEZvciB3aGVyZWFzIGhlIGhhZCByb3VuZGx5IGFidXNlZCBMdWN1bGx1cyBiZWNhdXNlLCB3aGlsZSBoaXMgZW5lbXkgd2FzIHN0aWxsIGFsaXZlLCBoZSB3b3VsZCBpc3N1ZSBlZGljdHMgYW5kIGRpc3RyaWJ1dGUgZ2lmdHMgYW5kIGhvbm91cnMs4oCUdGhpbmdzIHdoaWNoIHZpY3RvcnMgYXJlIHdvbnQgdG8gZG8gb25seSB3aGVuIGEgd2FyIGhhcyBiZWVuIGJyb3VnaHQgdG8gYW4gZW5kIGFuZCBmaW5pc2hlZCzigJR5ZXQgaGUgaGltc2VsZiwgd2hpbGUgTWl0aHJpZGF0ZXMgd2FzIHN1cHJlbWUgaW4gQm9zcG9ydXMgYW5kIGhhZCBjb2xsZWN0ZWQgYSBmb3JtaWRhYmxlIGZvcmNlLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5qdXN0IGFzIHRob3VnaCB0aGUgd2hvbGUgc3RydWdnbGUgd2FzIGVuZGVkLCB0b29rIHRoZSBzYW1lIGNvdXJzZSwgcmVndWxhdGluZyB0aGUgcHJvdmluY2VzIGFuZCBkaXN0cmlidXRpbmcgZ2lmdHM7IGZvciBtYW55IGxlYWRlcnMgYW5kIHByaW5jZXMgYW5kIHR3ZWx2ZSBiYXJiYXJpYW4ga2luZ3MgaGFkIGNvbWUgdG8gaGltLiBXaGVyZWZvcmUsIHRvIGdyYXRpZnkgdGhlc2Ugb3RoZXIga2luZ3MsIGhlIHdvdWxkIG5vdCBkZWlnbiwgaW4gYW5zd2VyaW5nIGEgbGV0dGVyIGZyb20gdGhlIGtpbmcgb2YgUGFydGhpYSwgdG8gYWRkcmVzcyBoaW0gYXMgS2luZyBvZiBLaW5ncywgd2hpY2ggd2FzIGhpcyB1c3VhbCB0aXRsZS4gTW9yZW92ZXIsIGEgZ3JlYXQgYW5kIGVhZ2VyIHBhc3Npb24gcG9zc2Vzc2VkIGhpbSB0byByZWNvdmVyIFN5cmlhLCBhbmQgbWFyY2ggdGhyb3VnaCBBcmFiaWEgdG8gdGhlIFJlZCBTZWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+aS5lLiB0aGUgUGVyc2lhbiBHdWxmLjwvbm90ZT4gaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBicmluZyBoaXMgdmljdG9yaW91cyBjYXJlZXIgaW50byB0b3VjaCB3aXRoIHRoZSBPY2VhbiB3aGljaCBzdXJyb3VuZHMgdGhlIHdvcmxkIG9uIGFsbCBzaWRlczsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIGluIEFmcmljYSBoZSBoYWQgYmVlbiB0aGUgZmlyc3QgdG8gY2FycnkgaGlzIGNvbnF1ZXN0cyBhcyBmYXIgYXMgdGhlIE91dGVyIFNlYSwgYW5kIGFnYWluIGluIFNwYWluIGhlIGhhZCBtYWRlIHRoZSBBdGxhbnRpYyBPY2VhbiB0aGUgYm91bmRhcnkgb2YgdGhlIFJvbWFuIGRvbWluaW9uLCBhbmQgdGhpcmRseSwgaW4gaGlzIHJlY2VudCBwdXJzdWl0IG9mIHRoZSBBbGJhbmksIGhlIGhhZCBuYXJyb3dseSBtaXNzZWQgcmVhY2hpbmcgdGhlIEh5cmNhbmlhbiBTZWEuIEluIG9yZGVyLCB0aGVyZWZvcmUsIHRoYXQgaGUgbWlnaHQgY29ubmVjdCB0aGUgY2lyY3VpdCBvZiBoaXMgbWlsaXRhcnkgZXhwZWRpdGlvbnMgd2l0aCB0aGUgUmVkIFNlYSwgaGUgcHV0IGhpcyBhcm15IGluIG1vdGlvbi4gQW5kLCBiZXNpZGVzLCBoZSBzYXcgdGhhdCBpdCB3YXMgZGlmZmljdWx0IHRvIGh1bnQgTWl0aHJpZGF0ZXMgZG93biB3aXRoIGFuIGFybWVkIGZvcmNlLCBhbmQgdGhhdCBoZSB3YXMgaGFyZGVyIHRvIGRlYWwgd2l0aCB3aGVuIGhlIGZsZWQgdGhhbiB3aGVuIGhlIGdhdmUgYmF0dGxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSBDYWVudW0gUG9tcGV5IHdlbnQgdG8gQW1pc3VzLCB3aGVyZSBoaXMgYW1iaXRpb24gbGVkIGhpbSBpbnRvIG9ibm94aW91cyBjb3Vyc2VzLiBGb3Igd2hlcmVhcyBoZSBoYWQgcm91bmRseSBhYnVzZWQgTHVjdWxsdXMgYmVjYXVzZSwgd2hpbGUgaGlzIGVuZW15IHdhcyBzdGlsbCBhbGl2ZSwgaGUgd291bGQgaXNzdWUgZWRpY3RzIGFuZCBkaXN0cmlidXRlIGdpZnRzIGFuZCBob25vdXJzLOKAlHRoaW5ncyB3aGljaCB2aWN0b3JzIGFyZSB3b250IHRvIGRvIG9ubHkgd2hlbiBhIHdhciBoYXMgYmVlbiBicm91Z2h0IHRvIGFuIGVuZCBhbmQgZmluaXNoZWQs4oCUeWV0IGhlIGhpbXNlbGYsIHdoaWxlIE1pdGhyaWRhdGVzIHdhcyBzdXByZW1lIGluIEJvc3BvcnVzIGFuZCBoYWQgY29sbGVjdGVkIGEgZm9ybWlkYWJsZSBmb3JjZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmp1c3QgYXMgdGhvdWdoIHRoZSB3aG9sZSBzdHJ1Z2dsZSB3YXMgZW5kZWQsIHRvb2sgdGhlIHNhbWUgY291cnNlLCByZWd1bGF0aW5nIHRoZSBwcm92aW5jZXMgYW5kIGRpc3RyaWJ1dGluZyBnaWZ0czsgZm9yIG1hbnkgbGVhZGVycyBhbmQgcHJpbmNlcyBhbmQgdHdlbHZlIGJhcmJhcmlhbiBraW5ncyBoYWQgY29tZSB0byBoaW0uIFdoZXJlZm9yZSwgdG8gZ3JhdGlmeSB0aGVzZSBvdGhlciBraW5ncywgaGUgd291bGQgbm90IGRlaWduLCBpbiBhbnN3ZXJpbmcgYSBsZXR0ZXIgZnJvbSB0aGUga2luZyBvZiBQYXJ0aGlhLCB0byBhZGRyZXNzIGhpbSBhcyBLaW5nIG9mIEtpbmdzLCB3aGljaCB3YXMgaGlzIHVzdWFsIHRpdGxlLiBNb3Jlb3ZlciwgYSBncmVhdCBhbmQgZWFnZXIgcGFzc2lvbiBwb3NzZXNzZWQgaGltIHRvIHJlY292ZXIgU3lyaWEsIGFuZCBtYXJjaCB0aHJvdWdoIEFyYWJpYSB0byB0aGUgUmVkIFNlYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPmkuZS4gdGhlIFBlcnNpYW4gR3VsZi48L25vdGU+IGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgYnJpbmcgaGlzIHZpY3RvcmlvdXMgY2FyZWVyIGludG8gdG91Y2ggd2l0aCB0aGUgT2NlYW4gd2hpY2ggc3Vycm91bmRzIHRoZSB3b3JsZCBvbiBhbGwgc2lkZXM7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmZvciBpbiBBZnJpY2EgaGUgaGFkIGJlZW4gdGhlIGZpcnN0IHRvIGNhcnJ5IGhpcyBjb25xdWVzdHMgYXMgZmFyIGFzIHRoZSBPdXRlciBTZWEsIGFuZCBhZ2FpbiBpbiBTcGFpbiBoZSBoYWQgbWFkZSB0aGUgQXRsYW50aWMgT2NlYW4gdGhlIGJvdW5kYXJ5IG9mIHRoZSBSb21hbiBkb21pbmlvbiwgYW5kIHRoaXJkbHksIGluIGhpcyByZWNlbnQgcHVyc3VpdCBvZiB0aGUgQWxiYW5pLCBoZSBoYWQgbmFycm93bHkgbWlzc2VkIHJlYWNoaW5nIHRoZSBIeXJjYW5pYW4gU2VhLiBJbiBvcmRlciwgdGhlcmVmb3JlLCB0aGF0IGhlIG1pZ2h0IGNvbm5lY3QgdGhlIGNpcmN1aXQgb2YgaGlzIG1pbGl0YXJ5IGV4cGVkaXRpb25zIHdpdGggdGhlIFJlZCBTZWEsIGhlIHB1dCBoaXMgYXJteSBpbiBtb3Rpb24uIEFuZCwgYmVzaWRlcywgaGUgc2F3IHRoYXQgaXQgd2FzIGRpZmZpY3VsdCB0byBodW50IE1pdGhyaWRhdGVzIGRvd24gd2l0aCBhbiBhcm1lZCBmb3JjZSwgYW5kIHRoYXQgaGUgd2FzIGhhcmRlciB0byBkZWFsIHdpdGggd2hlbiBoZSBmbGVkIHRoYW4gd2hlbiBoZSBnYXZlIGJhdHRsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlLCByZW1hcmtpbmcgdGhhdCBoZSB3b3VsZCBsZWF2ZSBiZWhpbmQgaGltIGZvciB0aGlzIGZ1Z2l0aXZlIGEgbWlnaHRpZXIgZW5lbXkgdGhhbiBoaW1zZWxmLCB0byB3aXQsIGZhbWluZSwgaGUgc3RhdGlvbmVkIHNoaXBzIHRvIGtlZXAgZ3VhcmQgYWdhaW5zdCB0aGUgbWVyY2hhbnRzIHNhaWxpbmcgdG8gQm9zcG9ydXM7IGFuZCBkZWF0aCB3YXMgdGhlIHBlbmFsdHkgZm9yIHN1Y2ggYXMgd2VyZSBjYXVnaHQuIFRoZW4gdGFraW5nIHRoZSBncmVhdCBtYXNzIG9mIGhpcyBhcm15LCBoZSBzZXQgb3V0IG9uIGhpcyBtYXJjaCwgYW5kIHdoZW4gaGUgY2FtZSB1cG9uIHRoZSBzdGlsbCB1bmJ1cmllZCBib2RpZXMgb2YgdGhvc2Ugd2hvLCBsZWQgYnkgVHJpYXJpdXMsIGhhZCBmYWxsZW4gaW4gYW4gdW5zdWNjZXNzZnVsIGNvbWJhdCB3aXRoIE1pdGhyaWRhdGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRocmVlIHllYXJzIGVhcmxpZXIuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gMzUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MdWN1bGx1czwvdGl0bGU+LCB4eHh2LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBoZSBnYXZlIHRoZW0gYWxsIGFuIGhvbm91cmFibGUgYW5kIHNwbGVuZGlkIGJ1cmlhbC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG5lZ2xlY3Qgb2YgdGhpcyBpcyB0aG91Z2h0IHRvIGhhdmUgYmVlbiB0aGUgY2hpZWYgcmVhc29uIHdoeSBMdWN1bGx1cyB3YXMgaGF0ZWQgYnkgaGlzIHNvbGRpZXJzLiBBZnRlciBoaXMgbGVnYXRlIEFmcmFuaXVzIGhhZCBzdWJkdWVkIGZvciBoaW0gdGhlIEFyYWJpYW5zIGFib3V0IEFtYW51cywgaGUgaGltc2VsZiB3ZW50IGRvd24gaW50byBTeXJpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc3ByaW5nIG9mIDY0IEIuQy48L25vdGU+IGFuZCBzaW5jZSB0aGlzIGNvdW50cnkgaGFkIG5vIGxlZ2l0aW1hdGUga2luZ3MsIGhlIGRlY2xhcmVkIGl0IHRvIGJlIGEgcHJvdmluY2UgYW5kIHBvc3Nlc3Npb24gb2YgdGhlIFJvbWFuIHBlb3BsZTsgaGUgYWxzbyBzdWJkdWVkIEp1ZGFlYSwgYW5kIG1hZGUgYSBwcmlzb25lciBvZiBBcmlzdG9idWx1cyB0aGUga2luZy4gU29tZSBjaXRpZXMgaGUgYnVpbHQgdXAsIG90aGVycyBoZSBzZXQgZnJlZSwgY2hhc3Rpc2luZyB0aGVpciB0eXJhbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbW9zdCBvZiBoaXMgdGltZSBoZSBzcGVudCBpbiBqdWRpY2lhbCBidXNpbmVzcywgc2V0dGxpbmcgdGhlIGRpc3B1dGVzIG9mIGNpdGllcyBhbmQga2luZ3MsIGFuZCBmb3IgdGhvc2UgdG8gd2hpY2ggaGUgaGltc2VsZiBjb3VsZCBub3QgYXR0ZW5kLCBzZW5kaW5nIGhpcyBmcmllbmRzLiBUaHVzIHdoZW4gdGhlIEFybWVuaWFucyBhbmQgUGFydGhpYW5zIHJlZmVycmVkIHRvIGhpbSB0aGUgZGVjaXNpb24gb2YgYSB0ZXJyaXRvcmlhbCBxdWFycmVsLCBoZSBzZW50IHRoZW0gdGhyZWUgYXJiaXRlcnMgYW5kIGp1ZGdlcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGdyZWF0IHdhcyB0aGUgbmFtZSBvZiBoaXMgcG93ZXIgYW5kIG5vdCBsZXNzIHRoYXQgb2YgaGlzIHZpcnR1ZSBhbmQgY2xlbWVuY3kuIFRoaXMgZW5hYmxlZCBoaW0gdG8gaGlkZSBhd2F5IG1vc3Qgb2YgdGhlIHRyYW5zZ3Jlc3Npb25zIG9mIGhpcyBmcmllbmRzIGFuZCBpbnRpbWF0ZXMsIHNpbmNlIGhlIHdhcyBub3QgZml0dGVkIGJ5IG5hdHVyZSB0byByZXN0cmFpbiBvciBjaGFzdGlzZSBldmlsIGRvZXJzOyBidXQgaGUgd2FzIHNvIGhlbHBmdWwgaGltc2VsZiB0byB0aG9zZSB3aG8gaGFkIGRlYWxpbmdzIHdpdGggaGltIHRoYXQgdGhleSB3ZXJlIGNvbnRlbnQgdG8gZW5kdXJlIHRoZSByYXBhY2l0eSBhbmQgc2V2ZXJpdHkgb2YgaGlzIGZyaWVuZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlLCByZW1hcmtpbmcgdGhhdCBoZSB3b3VsZCBsZWF2ZSBiZWhpbmQgaGltIGZvciB0aGlzIGZ1Z2l0aXZlIGEgbWlnaHRpZXIgZW5lbXkgdGhhbiBoaW1zZWxmLCB0byB3aXQsIGZhbWluZSwgaGUgc3RhdGlvbmVkIHNoaXBzIHRvIGtlZXAgZ3VhcmQgYWdhaW5zdCB0aGUgbWVyY2hhbnRzIHNhaWxpbmcgdG8gQm9zcG9ydXM7IGFuZCBkZWF0aCB3YXMgdGhlIHBlbmFsdHkgZm9yIHN1Y2ggYXMgd2VyZSBjYXVnaHQuIFRoZW4gdGFraW5nIHRoZSBncmVhdCBtYXNzIG9mIGhpcyBhcm15LCBoZSBzZXQgb3V0IG9uIGhpcyBtYXJjaCwgYW5kIHdoZW4gaGUgY2FtZSB1cG9uIHRoZSBzdGlsbCB1bmJ1cmllZCBib2RpZXMgb2YgdGhvc2Ugd2hvLCBsZWQgYnkgVHJpYXJpdXMsIGhhZCBmYWxsZW4gaW4gYW4gdW5zdWNjZXNzZnVsIGNvbWJhdCB3aXRoIE1pdGhyaWRhdGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhyZWUgeWVhcnMgZWFybGllci4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDM1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1czwvdGl0bGU+LCB4eHh2LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBoZSBnYXZlIHRoZW0gYWxsIGFuIGhvbm91cmFibGUgYW5kIHNwbGVuZGlkIGJ1cmlhbC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDM1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1czwvdGl0bGU+LCB4eHh2LiAxLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgeHh4di4gMS48L3RyYW5zbGF0aW9uPg=="
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBuZWdsZWN0IG9mIHRoaXMgaXMgdGhvdWdodCB0byBoYXZlIGJlZW4gdGhlIGNoaWVmIHJlYXNvbiB3aHkgTHVjdWxsdXMgd2FzIGhhdGVkIGJ5IGhpcyBzb2xkaWVycy4gQWZ0ZXIgaGlzIGxlZ2F0ZSBBZnJhbml1cyBoYWQgc3ViZHVlZCBmb3IgaGltIHRoZSBBcmFiaWFucyBhYm91dCBBbWFudXMsIGhlIGhpbXNlbGYgd2VudCBkb3duIGludG8gU3lyaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc3ByaW5nIG9mIDY0IEIuQy48L25vdGU+IGFuZCBzaW5jZSB0aGlzIGNvdW50cnkgaGFkIG5vIGxlZ2l0aW1hdGUga2luZ3MsIGhlIGRlY2xhcmVkIGl0IHRvIGJlIGEgcHJvdmluY2UgYW5kIHBvc3Nlc3Npb24gb2YgdGhlIFJvbWFuIHBlb3BsZTsgaGUgYWxzbyBzdWJkdWVkIEp1ZGFlYSwgYW5kIG1hZGUgYSBwcmlzb25lciBvZiBBcmlzdG9idWx1cyB0aGUga2luZy4gU29tZSBjaXRpZXMgaGUgYnVpbHQgdXAsIG90aGVycyBoZSBzZXQgZnJlZSwgY2hhc3Rpc2luZyB0aGVpciB0eXJhbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IG9mIGhpcyB0aW1lIGhlIHNwZW50IGluIGp1ZGljaWFsIGJ1c2luZXNzLCBzZXR0bGluZyB0aGUgZGlzcHV0ZXMgb2YgY2l0aWVzIGFuZCBraW5ncywgYW5kIGZvciB0aG9zZSB0byB3aGljaCBoZSBoaW1zZWxmIGNvdWxkIG5vdCBhdHRlbmQsIHNlbmRpbmcgaGlzIGZyaWVuZHMuIFRodXMgd2hlbiB0aGUgQXJtZW5pYW5zIGFuZCBQYXJ0aGlhbnMgcmVmZXJyZWQgdG8gaGltIHRoZSBkZWNpc2lvbiBvZiBhIHRlcnJpdG9yaWFsIHF1YXJyZWwsIGhlIHNlbnQgdGhlbSB0aHJlZSBhcmJpdGVycyBhbmQganVkZ2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBncmVhdCB3YXMgdGhlIG5hbWUgb2YgaGlzIHBvd2VyIGFuZCBub3QgbGVzcyB0aGF0IG9mIGhpcyB2aXJ0dWUgYW5kIGNsZW1lbmN5LiBUaGlzIGVuYWJsZWQgaGltIHRvIGhpZGUgYXdheSBtb3N0IG9mIHRoZSB0cmFuc2dyZXNzaW9ucyBvZiBoaXMgZnJpZW5kcyBhbmQgaW50aW1hdGVzLCBzaW5jZSBoZSB3YXMgbm90IGZpdHRlZCBieSBuYXR1cmUgdG8gcmVzdHJhaW4gb3IgY2hhc3Rpc2UgZXZpbCBkb2VyczsgYnV0IGhlIHdhcyBzbyBoZWxwZnVsIGhpbXNlbGYgdG8gdGhvc2Ugd2hvIGhhZCBkZWFsaW5ncyB3aXRoIGhpbSB0aGF0IHRoZXkgd2VyZSBjb250ZW50IHRvIGVuZHVyZSB0aGUgcmFwYWNpdHkgYW5kIHNldmVyaXR5IG9mIGhpcyBmcmllbmRzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgb25lIHdobyBoYWQgbW9zdCBpbmZsdWVuY2Ugd2l0aCBoaW0gd2FzIERlbWV0cml1cywgYSBmcmVlZG1hbiwgYSB5b3VuZyBtYW4gb2Ygc29tZSBpbnRlbGxpZ2VuY2Ugb3RoZXJ3aXNlLCBidXQgd2hvIGFidXNlZCBoaXMgZ29vZCBmb3J0dW5lLiBUaGUgZm9sbG93aW5nIHN0b3J5IGlzIHRvbGQgYWJvdXQgaGltLiBDYXRvIHRoZSBwaGlsb3NvcGhlciwgd2hlbiBoZSB3YXMgc3RpbGwgYSB5b3VuZyBtYW4sIGJ1dCBoYWQgYWxyZWFkeSBncmVhdCByZXB1dGF0aW9uIGFuZCBsb2Z0eSBwdXJwb3Nlcywgd2VudCB1cCB0byBBbnRpb2NoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMTMuMSIgdmFsaWQ9InllcyI+Q2F0byB0aGUgWW91bmdlciwgY2hhcHRlciB4aWlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhdCBhIHRpbWUgd2hlbiBQb21wZXkgd2FzIG5vdCB0aGVyZSwgd2lzaGluZyB0byBpbnNwZWN0IHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5DYXRvIGhpbXNlbGYsIHRoZSBzdG9yeSBnb2VzLCBtYXJjaGVkIG9uIGZvb3QsIGFzIGFsd2F5cywgYnV0IHRoZSBmcmllbmRzIHdobyBqb3VybmV5ZWQgd2l0aCBoaW0gd2VyZSBvbiBob3JzZWJhY2suIFdoZW4gaGUgYmVoZWxkIGJlZm9yZSB0aGUgZ2F0ZSBvZiB0aGUgY2l0eSBhIHRocm9uZyBvZiBtZW4gaW4gd2hpdGUgcmFpbWVudCwgYW5kIGRyYXduIHVwIGFsb25nIHRoZSByb2FkIHRoZSB5b3V0aHMgb24gb25lIHNpZGUsIGFuZCB0aGUgYm95cyBvbiB0aGUgb3RoZXIsIGhlIHdhcyB2ZXhlZCwgc3VwcG9zaW5nIHRoaXMgdG8gYmUgZG9uZSBvdXQgb2YgZGVmZXJlbmNlIGFuZCBob25vdXIgdG8gaGltc2VsZiwgd2hvIGRlc2lyZWQgbm90aGluZyBvZiB0aGUga2luZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaGUgb3JkZXJlZCBoaXMgZnJpZW5kcyB0byBkaXNtb3VudCBhbmQgd2FsayB3aXRoIGhpbTsgYnV0IHdoZW4gdGhleSBkcmV3IG5lYXIsIHRoZSBtYXN0ZXIgb2YgYWxsIHRoZXNlIGNlcmVtb25pZXMgbWV0IHRoZW0sIHdpdGggYSB3cmVhdGggb24gaGlzIGhlYWQgYW5kIGEgd2FuZCBpbiBoaXMgaGFuZCwgYW5kIGFza2VkIHRoZW0gd2hlcmUgdGhleSBoYWQgbGVmdCBEZW1ldHJpdXMsIGFuZCB3aGVuIGhlIHdvdWxkIGNvbWUuIFRoZSBmcmllbmRzIG9mIENhdG8sIGFjY29yZGluZ2x5LCBidXJzdCBvdXQgbGF1Z2hpbmcsIGJ1dCBDYXRvIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyB0aGUgd3JldGNoZWQgY2l0eSE8L3E+IGFuZCBwYXNzZWQgb24gd2l0aG91dCBhbnkgZnVydGhlciBhbnN3ZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG9uZSB3aG8gaGFkIG1vc3QgaW5mbHVlbmNlIHdpdGggaGltIHdhcyBEZW1ldHJpdXMsIGEgZnJlZWRtYW4sIGEgeW91bmcgbWFuIG9mIHNvbWUgaW50ZWxsaWdlbmNlIG90aGVyd2lzZSwgYnV0IHdobyBhYnVzZWQgaGlzIGdvb2QgZm9ydHVuZS4gVGhlIGZvbGxvd2luZyBzdG9yeSBpcyB0b2xkIGFib3V0IGhpbS4gQ2F0byB0aGUgcGhpbG9zb3BoZXIsIHdoZW4gaGUgd2FzIHN0aWxsIGEgeW91bmcgbWFuLCBidXQgaGFkIGFscmVhZHkgZ3JlYXQgcmVwdXRhdGlvbiBhbmQgbG9mdHkgcHVycG9zZXMsIHdlbnQgdXAgdG8gQW50aW9jaCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAxMy4xIiB2YWxpZD0ieWVzIj5DYXRvIHRoZSBZb3VuZ2VyLCBjaGFwdGVyIHhpaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGF0IGEgdGltZSB3aGVuIFBvbXBleSB3YXMgbm90IHRoZXJlLCB3aXNoaW5nIHRvIGluc3BlY3QgdGhlIGNpdHkuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMTMuMSIgdmFsaWQ9InllcyI+Q2F0byB0aGUgWW91bmdlciwgY2hhcHRlciB4aWlpLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gaGltc2VsZiwgdGhlIHN0b3J5IGdvZXMsIG1hcmNoZWQgb24gZm9vdCwgYXMgYWx3YXlzLCBidXQgdGhlIGZyaWVuZHMgd2hvIGpvdXJuZXllZCB3aXRoIGhpbSB3ZXJlIG9uIGhvcnNlYmFjay4gV2hlbiBoZSBiZWhlbGQgYmVmb3JlIHRoZSBnYXRlIG9mIHRoZSBjaXR5IGEgdGhyb25nIG9mIG1lbiBpbiB3aGl0ZSByYWltZW50LCBhbmQgZHJhd24gdXAgYWxvbmcgdGhlIHJvYWQgdGhlIHlvdXRocyBvbiBvbmUgc2lkZSwgYW5kIHRoZSBib3lzIG9uIHRoZSBvdGhlciwgaGUgd2FzIHZleGVkLCBzdXBwb3NpbmcgdGhpcyB0byBiZSBkb25lIG91dCBvZiBkZWZlcmVuY2UgYW5kIGhvbm91ciB0byBoaW1zZWxmLCB3aG8gZGVzaXJlZCBub3RoaW5nIG9mIHRoZSBraW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['40.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIG9yZGVyZWQgaGlzIGZyaWVuZHMgdG8gZGlzbW91bnQgYW5kIHdhbGsgd2l0aCBoaW07IGJ1dCB3aGVuIHRoZXkgZHJldyBuZWFyLCB0aGUgbWFzdGVyIG9mIGFsbCB0aGVzZSBjZXJlbW9uaWVzIG1ldCB0aGVtLCB3aXRoIGEgd3JlYXRoIG9uIGhpcyBoZWFkIGFuZCBhIHdhbmQgaW4gaGlzIGhhbmQsIGFuZCBhc2tlZCB0aGVtIHdoZXJlIHRoZXkgaGFkIGxlZnQgRGVtZXRyaXVzLCBhbmQgd2hlbiBoZSB3b3VsZCBjb21lLiBUaGUgZnJpZW5kcyBvZiBDYXRvLCBhY2NvcmRpbmdseSwgYnVyc3Qgb3V0IGxhdWdoaW5nLCBidXQgQ2F0byBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyB0aGUgd3JldGNoZWQgY2l0eSE8L3E+IGFuZCBwYXNzZWQgb24gd2l0aG91dCBhbnkgZnVydGhlciBhbnN3ZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIFBvbXBleSBoaW1zZWxmIG1hZGUgdGhpcyBEZW1ldHJpdXMgbGVzcyBvZGlvdXMgdG8gdGhlIHJlc3QgYnkgZW5kdXJpbmcgaGlzIGNhcHJpY2VzIHdpdGhvdXQgdmV4YXRpb24uIEZvciBpbnN0YW5jZSwgaXQgaXMgc2FpZCB0aGF0IG1hbnkgdGltZXMgYXQgaGlzIGVudGVydGFpbm1lbnRzLCB3aGVuIFBvbXBleSB3YXMgYXdhaXRpbmcgYW5kIHJlY2VpdmluZyBoaXMgb3RoZXIgZ3Vlc3RzLCB0aGF0IGZlbGxvdyB3b3VsZCBiZSBhbHJlYWR5IHJlY2xpbmluZyBhdCB0YWJsZSBpbiBncmVhdCBzdGF0ZSwgd2l0aCB0aGUgaG9vZCBvZiBoaXMgdG9nYSBkcmF3biBkb3duIGJlaGluZCBoaXMgZWFycy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIG1hcmsgb2Ygc2xvdmVubGluZXNzLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CZWZvcmUgaGlzIHJldHVybiB0byBJdGFseSwgaGUgaGFkIHB1cmNoYXNlZCB0aGUgcGxlYXNhbnRlc3Qgc3VidXJicyBvZiBSb21lIGFuZCB0aGUgbW9zdCBiZWF1dGlmdWwgcGxhY2VzIG9mIGVudGVydGFpbm1lbnQsIGFuZCB2ZXJ5IGNvc3RseSBnYXJkZW5zIHdlcmUgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RGVtZXRyaWFuPC9xPiBhZnRlciBoaW07IGFuZCB5ZXQgUG9tcGV5IGhpbXNlbGYsIHVwIHRvIHRoZSB0aW1lIG9mIGhpcyB0aGlyZCB0cml1bXBoLCBoYWQgYSBzaW1wbGUgYW5kIG1vZGVzdCBob3VzZS4gQWZ0ZXIgdGhhdCwgaXQgaXMgdHJ1ZSwgd2hlbiBoZSB3YXMgZXJlY3RpbmcgdGhlIGZhbW91cyBhbmQgYmVhdXRpZnVsIHRoZWF0cmUgd2hpY2ggYmVhcnMgaGlzIG5hbWUsIGhlIGJ1aWx0IGNsb3NlIGJ5IGl0LCBsaWtlIGEgc21hbGwgYm9hdCB0b3dlZCBiZWhpbmQgYSBzaGlwLCBhIG1vcmUgc3BsZW5kaWQgaG91c2UgdGhhbiB0aGUgb25lIGhlIGhhZCBiZWZvcmUuIEJ1dCBldmVuIHRoaXMgd2FzIG5vdCBsYXJnZSBlbm91Z2ggdG8gZXhjaXRlIGVudnksIHNvIHRoYXQgd2hlbiBoZSB3aG8gc3VjY2VlZGVkIFBvbXBleSBhcyBpdHMgb3duZXIgZW50ZXJlZCBpdCwgaGUgd2FzIGFtYXplZCwgYW5kIGlucXVpcmVkIHdoZXJlIFBvbXBleSB0aGUgR3JlYXQgdXNlZCB0byBzdXAuIEF0IGFueSByYXRlLCBzbyB0aGUgc3RvcnkgcnVucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIFBvbXBleSBoaW1zZWxmIG1hZGUgdGhpcyBEZW1ldHJpdXMgbGVzcyBvZGlvdXMgdG8gdGhlIHJlc3QgYnkgZW5kdXJpbmcgaGlzIGNhcHJpY2VzIHdpdGhvdXQgdmV4YXRpb24uIEZvciBpbnN0YW5jZSwgaXQgaXMgc2FpZCB0aGF0IG1hbnkgdGltZXMgYXQgaGlzIGVudGVydGFpbm1lbnRzLCB3aGVuIFBvbXBleSB3YXMgYXdhaXRpbmcgYW5kIHJlY2VpdmluZyBoaXMgb3RoZXIgZ3Vlc3RzLCB0aGF0IGZlbGxvdyB3b3VsZCBiZSBhbHJlYWR5IHJlY2xpbmluZyBhdCB0YWJsZSBpbiBncmVhdCBzdGF0ZSwgd2l0aCB0aGUgaG9vZCBvZiBoaXMgdG9nYSBkcmF3biBkb3duIGJlaGluZCBoaXMgZWFycy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgbWFyayBvZiBzbG92ZW5saW5lc3MuPC9ub3RlPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJlZm9yZSBoaXMgcmV0dXJuIHRvIEl0YWx5LCBoZSBoYWQgcHVyY2hhc2VkIHRoZSBwbGVhc2FudGVzdCBzdWJ1cmJzIG9mIFJvbWUgYW5kIHRoZSBtb3N0IGJlYXV0aWZ1bCBwbGFjZXMgb2YgZW50ZXJ0YWlubWVudCwgYW5kIHZlcnkgY29zdGx5IGdhcmRlbnMgd2VyZSBjYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRlbWV0cmlhbjwvcT4gYWZ0ZXIgaGltOyBhbmQgeWV0IFBvbXBleSBoaW1zZWxmLCB1cCB0byB0aGUgdGltZSBvZiBoaXMgdGhpcmQgdHJpdW1waCwgaGFkIGEgc2ltcGxlIGFuZCBtb2Rlc3QgaG91c2UuIEFmdGVyIHRoYXQsIGl0IGlzIHRydWUsIHdoZW4gaGUgd2FzIGVyZWN0aW5nIHRoZSBmYW1vdXMgYW5kIGJlYXV0aWZ1bCB0aGVhdHJlIHdoaWNoIGJlYXJzIGhpcyBuYW1lLCBoZSBidWlsdCBjbG9zZSBieSBpdCwgbGlrZSBhIHNtYWxsIGJvYXQgdG93ZWQgYmVoaW5kIGEgc2hpcCwgYSBtb3JlIHNwbGVuZGlkIGhvdXNlIHRoYW4gdGhlIG9uZSBoZSBoYWQgYmVmb3JlLiBCdXQgZXZlbiB0aGlzIHdhcyBub3QgbGFyZ2UgZW5vdWdoIHRvIGV4Y2l0ZSBlbnZ5LCBzbyB0aGF0IHdoZW4gaGUgd2hvIHN1Y2NlZWRlZCBQb21wZXkgYXMgaXRzIG93bmVyIGVudGVyZWQgaXQsIGhlIHdhcyBhbWF6ZWQsIGFuZCBpbnF1aXJlZCB3aGVyZSBQb21wZXkgdGhlIEdyZWF0IHVzZWQgdG8gc3VwLiBBdCBhbnkgcmF0ZSwgc28gdGhlIHN0b3J5IHJ1bnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBraW5nIG9mIHRoZSBBcmFiaWFucyBhYm91dCBQZXRyYSBoYWQgaGl0aGVydG8gbWFkZSBubyBhY2NvdW50IG9mIHRoZSBSb21hbiBwb3dlciwgYnV0IG5vdyBoZSB3YXMgdGhvcm91Z2hseSBhbGFybWVkIGFuZCB3cm90ZSB0aGF0IGhlIGhhZCBkZXRlcm1pbmVkIHRvIG9iZXkgYW5kIHBlcmZvcm0gYWxsIGNvbW1hbmRzLiBQb21wZXksIHRoZXJlZm9yZSwgd2lzaGluZyB0byBjb25maXJtIGhpbSBpbiBoaXMgcHVycG9zZSwgbWFyY2hlZCB0b3dhcmRzIFBldHJhLCBhbiBleHBlZGl0aW9uIHdoaWNoIHdhcyBub3QgYSBsaXR0bGUgY2Vuc3VyZWQgYnkgbW9zdCBvZiBoaXMgZm9sbG93ZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSB0aG91Z2h0IGl0IGFuIGV2YXNpb24gb2YgdGhlIHB1cnN1aXQgb2YgTWl0aHJpZGF0ZXMsIGFuZCBkZW1hbmRlZCB0aGF0IGhlIHNob3VsZCByYXRoZXIgdHVybiBhZ2FpbnN0IHRoYXQgaW52ZXRlcmF0ZSBlbmVteSwgd2hvIHdhcyBhZ2FpbiBraW5kbGluZyB0aGUgZmxhbWVzIG9mIHdhciBhbmQgcHJlcGFyaW5nLCBhcyBpdCB3YXMgcmVwb3J0ZWQsIHRvIG1hcmNoIGFuIGFybXkgdGhyb3VnaCBTY3l0aGlhIGFuZCBQYWVvbmlhIGFnYWluc3QgSXRhbHkuIFBvbXBleSwgaG93ZXZlciwgdGhpbmtpbmcgaXQgZWFzaWVyIHRvIGNydXNoIHRoZSBraW5nJ3MgZm9yY2VzIHdoZW4gaGUgbWFkZSB3YXIgdGhhbiB0byBzZWl6ZSBoaXMgcGVyc29uIHdoZW4gaGUgd2FzIGluIGZsaWdodCwgd2FzIG5vdCB3aWxsaW5nIHRvIHdlYXIgb3V0IGhpcyBvd24gc3RyZW5ndGggaW4gYSB2YWluIHB1cnN1aXQsIGFuZCB0aGVyZWZvcmUgc291Z2h0IG90aGVyIGVtcGxveW1lbnQgaW4gdGhlIGludGVydmFsIG9mIHRoZSB3YXIgYW5kIHRodXMgcHJvdHJhY3RlZCB0aGUgdGltZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['41.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGtpbmcgb2YgdGhlIEFyYWJpYW5zIGFib3V0IFBldHJhIGhhZCBoaXRoZXJ0byBtYWRlIG5vIGFjY291bnQgb2YgdGhlIFJvbWFuIHBvd2VyLCBidXQgbm93IGhlIHdhcyB0aG9yb3VnaGx5IGFsYXJtZWQgYW5kIHdyb3RlIHRoYXQgaGUgaGFkIGRldGVybWluZWQgdG8gb2JleSBhbmQgcGVyZm9ybSBhbGwgY29tbWFuZHMuIFBvbXBleSwgdGhlcmVmb3JlLCB3aXNoaW5nIHRvIGNvbmZpcm0gaGltIGluIGhpcyBwdXJwb3NlLCBtYXJjaGVkIHRvd2FyZHMgUGV0cmEsIGFuIGV4cGVkaXRpb24gd2hpY2ggd2FzIG5vdCBhIGxpdHRsZSBjZW5zdXJlZCBieSBtb3N0IG9mIGhpcyBmb2xsb3dlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IHRob3VnaHQgaXQgYW4gZXZhc2lvbiBvZiB0aGUgcHVyc3VpdCBvZiBNaXRocmlkYXRlcywgYW5kIGRlbWFuZGVkIHRoYXQgaGUgc2hvdWxkIHJhdGhlciB0dXJuIGFnYWluc3QgdGhhdCBpbnZldGVyYXRlIGVuZW15LCB3aG8gd2FzIGFnYWluIGtpbmRsaW5nIHRoZSBmbGFtZXMgb2Ygd2FyIGFuZCBwcmVwYXJpbmcsIGFzIGl0IHdhcyByZXBvcnRlZCwgdG8gbWFyY2ggYW4gYXJteSB0aHJvdWdoIFNjeXRoaWEgYW5kIFBhZW9uaWEgYWdhaW5zdCBJdGFseS4gUG9tcGV5LCBob3dldmVyLCB0aGlua2luZyBpdCBlYXNpZXIgdG8gY3J1c2ggdGhlIGtpbmcncyBmb3JjZXMgd2hlbiBoZSBtYWRlIHdhciB0aGFuIHRvIHNlaXplIGhpcyBwZXJzb24gd2hlbiBoZSB3YXMgaW4gZmxpZ2h0LCB3YXMgbm90IHdpbGxpbmcgdG8gd2VhciBvdXQgaGlzIG93biBzdHJlbmd0aCBpbiBhIHZhaW4gcHVyc3VpdCwgYW5kIHRoZXJlZm9yZSBzb3VnaHQgb3RoZXIgZW1wbG95bWVudCBpbiB0aGUgaW50ZXJ2YWwgb2YgdGhlIHdhciBhbmQgdGh1cyBwcm90cmFjdGVkIHRoZSB0aW1lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZm9ydHVuZSByZXNvbHZlZCB0aGUgZGlmZmljdWx0eS4gRm9yIHdoZW4gaGUgd2FzIGNvbWUgd2l0aGluIGEgc2hvcnQgZGlzdGFuY2Ugb2YgUGV0cmEsIGFuZCBoYWQgYWxyZWFkeSBwaXRjaGVkIGhpcyBjYW1wIGZvciB0aGF0IGRheSBhbmQgd2FzIGV4ZXJjaXNpbmcgaGltc2VsZiBvbiBob3JzZWJhY2sgbmVhciBieSwgZGlzcGF0Y2gtYmVhcmVycyByb2RlIHVwIGZyb20gUG9udHVzIGJyaW5naW5nIGdvb2QgdGlkaW5ncy4gU3VjaCBtZXNzZW5nZXJzIGFyZSBrbm93biBhdCBvbmNlIGJ5IHRoZSB0aXBzIG9mIHRoZWlyIHNwZWFycywgd2hpY2ggYXJlIHdyZWF0aGVkIHdpdGggbGF1cmVsLiBBcyBzb29uIGFzIHRoZSBzb2xkaWVycyBzYXcgdGhlc2UgY291cmllcnMgdGhleSByYW4gaW4gdGhyb25ncyB0byBQb21wZXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0IGhlIHdhcyBkaXNwb3NlZCB0byBmaW5pc2ggaGlzIGV4ZXJjaXNlLCBidXQgYXQgdGhlaXIgc2hvdXRzIGFuZCBlbnRyZWF0aWVzIGhlIGRpc21vdW50ZWQgZnJvbSBoaXMgaG9yc2UsIHRvb2sgdGhlIGRpc3BhdGNoZXMsIGFuZCBsZWQgdGhlIHdheSBpbnRvIGNhbXAuIFRoZXJlIHdhcyBubyByZWd1bGFyIHRyaWJ1bmFscyBub3IgaGFkIHRoZXJlIGJlZW4gdGltZSB0byBlcmVjdCB0aGUgbWlsaXRhcnkgc3Vic3RpdHV0ZSwgd2hpY2ggdGhlIHNvbGRpZXJzIG1ha2Ugd2l0aCB0aGVpciBvd24gaGFuZHMgYnkgZGlnZ2luZyB1cCBsYXJnZSBjbG9kcyBvZiBlYXJ0aCBhbmQgaGVhcGluZyB0aGVtIG9uZSB1cG9uIGFub3RoZXI7IGJ1dCBpbiB0aGUgZWFnZXIgaGFzdGUgb2YgdGhlIG1vbWVudCB0aGV5IHBpbGVkIHVwIHRoZSBwYWNrLXNhZGRsZXMgb2YgdGhlIGJlYXN0cyBvZiBidXJkZW4gYW5kIG1hZGUgYW4gZW1pbmVuY2Ugb2YgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5IGFzY2VuZGVkIHRoaXMgYW5kIGFubm91bmNlZCB0byBoaXMgc29sZGllcnMgdGhhdCBNaXRocmlkYXRlcyB3YXMgZGVhZCwgaGF2aW5nIG1hZGUgYXdheSB3aXRoIGhpbXNlbGYgYmVjYXVzZSBoaXMgc29uIFBoYXJuYWNlcyBoYWQgcmV2b2x0ZWQgZnJvbSBoaW0sIGFuZCB0aGF0IFBoYXJuYWNlcyBoYWQgY29tZSBpbnRvIHBvc3Nlc3Npb24gb2YgYWxsIHRoZSBwb3dlciB0aGVyZSwgYWN0aW5nLCBhcyBoZSB3cm90ZSwgaW4gYmVoYWxmIG9mIGhpbXNlbGYgYW5kIHRoZSBSb21hbnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhpcyB3YXMgaW4gNjMgQi5DLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmb3J0dW5lIHJlc29sdmVkIHRoZSBkaWZmaWN1bHR5LiBGb3Igd2hlbiBoZSB3YXMgY29tZSB3aXRoaW4gYSBzaG9ydCBkaXN0YW5jZSBvZiBQZXRyYSwgYW5kIGhhZCBhbHJlYWR5IHBpdGNoZWQgaGlzIGNhbXAgZm9yIHRoYXQgZGF5IGFuZCB3YXMgZXhlcmNpc2luZyBoaW1zZWxmIG9uIGhvcnNlYmFjayBuZWFyIGJ5LCBkaXNwYXRjaC1iZWFyZXJzIHJvZGUgdXAgZnJvbSBQb250dXMgYnJpbmdpbmcgZ29vZCB0aWRpbmdzLiBTdWNoIG1lc3NlbmdlcnMgYXJlIGtub3duIGF0IG9uY2UgYnkgdGhlIHRpcHMgb2YgdGhlaXIgc3BlYXJzLCB3aGljaCBhcmUgd3JlYXRoZWQgd2l0aCBsYXVyZWwuIEFzIHNvb24gYXMgdGhlIHNvbGRpZXJzIHNhdyB0aGVzZSBjb3VyaWVycyB0aGV5IHJhbiBpbiB0aHJvbmdzIHRvIFBvbXBleS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['41.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0IGhlIHdhcyBkaXNwb3NlZCB0byBmaW5pc2ggaGlzIGV4ZXJjaXNlLCBidXQgYXQgdGhlaXIgc2hvdXRzIGFuZCBlbnRyZWF0aWVzIGhlIGRpc21vdW50ZWQgZnJvbSBoaXMgaG9yc2UsIHRvb2sgdGhlIGRpc3BhdGNoZXMsIGFuZCBsZWQgdGhlIHdheSBpbnRvIGNhbXAuIFRoZXJlIHdhcyBubyByZWd1bGFyIHRyaWJ1bmFscyBub3IgaGFkIHRoZXJlIGJlZW4gdGltZSB0byBlcmVjdCB0aGUgbWlsaXRhcnkgc3Vic3RpdHV0ZSwgd2hpY2ggdGhlIHNvbGRpZXJzIG1ha2Ugd2l0aCB0aGVpciBvd24gaGFuZHMgYnkgZGlnZ2luZyB1cCBsYXJnZSBjbG9kcyBvZiBlYXJ0aCBhbmQgaGVhcGluZyB0aGVtIG9uZSB1cG9uIGFub3RoZXI7IGJ1dCBpbiB0aGUgZWFnZXIgaGFzdGUgb2YgdGhlIG1vbWVudCB0aGV5IHBpbGVkIHVwIHRoZSBwYWNrLXNhZGRsZXMgb2YgdGhlIGJlYXN0cyBvZiBidXJkZW4gYW5kIG1hZGUgYW4gZW1pbmVuY2Ugb2YgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['41.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSBhc2NlbmRlZCB0aGlzIGFuZCBhbm5vdW5jZWQgdG8gaGlzIHNvbGRpZXJzIHRoYXQgTWl0aHJpZGF0ZXMgd2FzIGRlYWQsIGhhdmluZyBtYWRlIGF3YXkgd2l0aCBoaW1zZWxmIGJlY2F1c2UgaGlzIHNvbiBQaGFybmFjZXMgaGFkIHJldm9sdGVkIGZyb20gaGltLCBhbmQgdGhhdCBQaGFybmFjZXMgaGFkIGNvbWUgaW50byBwb3NzZXNzaW9uIG9mIGFsbCB0aGUgcG93ZXIgdGhlcmUsIGFjdGluZywgYXMgaGUgd3JvdGUsIGluIGJlaGFsZiBvZiBoaW1zZWxmIGFuZCB0aGUgUm9tYW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhpcyB3YXMgaW4gNjMgQi5DLjwvbm90ZT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiB0aGlzIHRoZSBhcm15LCBmaWxsZWQgd2l0aCBqb3ksIGFzIHdhcyBuYXR1cmFsLCBnYXZlIGl0c2VsZiB1cCB0byBzYWNyaWZpY2VzIGFuZCBlbnRlcnRhaW5tZW50cywgZmVlbGluZyB0aGF0IGluIHRoZSBwZXJzb24gb2YgTWl0aHJpZGF0ZXMgdGVuIHRob3VzYW5kIGVuZW1pZXMgaGFkIGRpZWQuIFRoZW4gUG9tcGV5LCBoYXZpbmcgYnJvdWdodCBoaXMgYWNoaWV2ZW1lbnRzIGFuZCBleHBlZGl0aW9ucyB0byBzdWNoIGFuIHVuZXhwZWN0ZWRseSBlYXN5IGNvbXBsZXRpb24sIHN0cmFpZ2h0d2F5IHdpdGhkcmV3IGZyb20gQXJhYmlhLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgcGFzc2luZyByYXBpZGx5IHRocm91Z2ggdGhlIGludGVydmVuaW5nIHByb3ZpbmNlcywgY2FtZSB0byBBbWlzdXMuIEhlcmUgaGUgZm91bmQgbWFueSBnaWZ0cyB0aGF0IGhhZCBiZWVuIGJyb3VnaHQgZnJvbSBQaGFybmFjZXMsIGFuZCBtYW55IGRlYWQgYm9kaWVzIG9mIHRoZSByb3lhbCBmYW1pbHksIGFuZCB0aGUgY29ycHNlIG9mIE1pdGhyaWRhdGVzIGhpbXNlbGYsIHdoaWNoIHdhcyBub3QgZWFzeSB0byByZWNvZ25pemUgYnkgdGhlIGZhY2UgKGZvciB0aGUgZW1iYWxtZXJzIGhhZCBuZWdsZWN0ZWQgdG8gcmVtb3ZlIHRoZSBicmFpbiksIGJ1dCB0aG9zZSB3aG8gY2FyZWQgdG8gc2VlIHRoZSBib2R5IHJlY29nbml6ZWQgaXQgYnkgdGhlIHNjYXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Qb21wZXkgaGltc2VsZiBjb3VsZCBub3QgYnJpbmcgaGltc2VsZiB0byBsb29rIHVwb24gdGhlIGJvZHksIGJ1dCB0byBwcm9waXRpYXRlIHRoZSBkaXZpbmUgamVhbG91c3kgc2VudCBpdCBhd2F5IHRvIFNpbm9wZS4gSGUgd2FzIGFtYXplZCBhdCB0aGUgc2l6ZSBhbmQgc3BsZW5kb3VyIG9mIHRoZSBhcm1zIGFuZCByYWltZW50IHdoaWNoIE1pdGhyaWRhdGVzIHVzZWQgdG8gd2VhcjsgYWx0aG91Z2ggdGhlIHN3b3JkLWJlbHQsIHdoaWNoIGNvc3QgZm91ciBodW5kcmVkIHRhbGVudHMsIHdhcyBzdG9sZW4gYnkgUHVibGl1cyBhbmQgc29sZCB0byBBcmlhcmF0aGVzLCBhbmQgdGhlIHRpYXJhIHdhcyBzZWNyZXRseSBnaXZlbiBieSBDYWl1cywgdGhlIGZvc3RlciBicm90aGVyIG9mIE1pdGhyaWRhdGVzLCB0byBGYXVzdHVzIHRoZSBzb24gb2YgU3VsbGEsIGF0IGhpcyByZXF1ZXN0OyBpdCB3YXMgYSBwaWVjZSBvZiB3b25kZXJmdWwgd29ya21hbnNoaXAuIEFsbCB0aGlzIGVzY2FwZWQgdGhlIGtub3dsZWRnZSBvZiBQb21wZXkgYXQgdGhlIHRpbWUsIGJ1dCBQaGFybmFjZXMgYWZ0ZXJ3YXJkcyBsZWFybmVkIG9mIGl0IGFuZCBwdW5pc2hlZCB0aGUgdGhpZXZlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiB0aGlzIHRoZSBhcm15LCBmaWxsZWQgd2l0aCBqb3ksIGFzIHdhcyBuYXR1cmFsLCBnYXZlIGl0c2VsZiB1cCB0byBzYWNyaWZpY2VzIGFuZCBlbnRlcnRhaW5tZW50cywgZmVlbGluZyB0aGF0IGluIHRoZSBwZXJzb24gb2YgTWl0aHJpZGF0ZXMgdGVuIHRob3VzYW5kIGVuZW1pZXMgaGFkIGRpZWQuIFRoZW4gUG9tcGV5LCBoYXZpbmcgYnJvdWdodCBoaXMgYWNoaWV2ZW1lbnRzIGFuZCBleHBlZGl0aW9ucyB0byBzdWNoIGFuIHVuZXhwZWN0ZWRseSBlYXN5IGNvbXBsZXRpb24sIHN0cmFpZ2h0d2F5IHdpdGhkcmV3IGZyb20gQXJhYmlhLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBwYXNzaW5nIHJhcGlkbHkgdGhyb3VnaCB0aGUgaW50ZXJ2ZW5pbmcgcHJvdmluY2VzLCBjYW1lIHRvIEFtaXN1cy4gSGVyZSBoZSBmb3VuZCBtYW55IGdpZnRzIHRoYXQgaGFkIGJlZW4gYnJvdWdodCBmcm9tIFBoYXJuYWNlcywgYW5kIG1hbnkgZGVhZCBib2RpZXMgb2YgdGhlIHJveWFsIGZhbWlseSwgYW5kIHRoZSBjb3Jwc2Ugb2YgTWl0aHJpZGF0ZXMgaGltc2VsZiwgd2hpY2ggd2FzIG5vdCBlYXN5IHRvIHJlY29nbml6ZSBieSB0aGUgZmFjZSAoZm9yIHRoZSBlbWJhbG1lcnMgaGFkIG5lZ2xlY3RlZCB0byByZW1vdmUgdGhlIGJyYWluKSwgYnV0IHRob3NlIHdobyBjYXJlZCB0byBzZWUgdGhlIGJvZHkgcmVjb2duaXplZCBpdCBieSB0aGUgc2NhcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['42.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSBoaW1zZWxmIGNvdWxkIG5vdCBicmluZyBoaW1zZWxmIHRvIGxvb2sgdXBvbiB0aGUgYm9keSwgYnV0IHRvIHByb3BpdGlhdGUgdGhlIGRpdmluZSBqZWFsb3VzeSBzZW50IGl0IGF3YXkgdG8gU2lub3BlLiBIZSB3YXMgYW1hemVkIGF0IHRoZSBzaXplIGFuZCBzcGxlbmRvdXIgb2YgdGhlIGFybXMgYW5kIHJhaW1lbnQgd2hpY2ggTWl0aHJpZGF0ZXMgdXNlZCB0byB3ZWFyOyBhbHRob3VnaCB0aGUgc3dvcmQtYmVsdCwgd2hpY2ggY29zdCBmb3VyIGh1bmRyZWQgdGFsZW50cywgd2FzIHN0b2xlbiBieSBQdWJsaXVzIGFuZCBzb2xkIHRvIEFyaWFyYXRoZXMsIGFuZCB0aGUgdGlhcmEgd2FzIHNlY3JldGx5IGdpdmVuIGJ5IENhaXVzLCB0aGUgZm9zdGVyIGJyb3RoZXIgb2YgTWl0aHJpZGF0ZXMsIHRvIEZhdXN0dXMgdGhlIHNvbiBvZiBTdWxsYSwgYXQgaGlzIHJlcXVlc3Q7IGl0IHdhcyBhIHBpZWNlIG9mIHdvbmRlcmZ1bCB3b3JrbWFuc2hpcC4gQWxsIHRoaXMgZXNjYXBlZCB0aGUga25vd2xlZGdlIG9mIFBvbXBleSBhdCB0aGUgdGltZSwgYnV0IFBoYXJuYWNlcyBhZnRlcndhcmRzIGxlYXJuZWQgb2YgaXQgYW5kIHB1bmlzaGVkIHRoZSB0aGlldmVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBhcnJhbmdpbmcgYW5kIHNldHRsaW5nIGFmZmFpcnMgaW4gdGhvc2UgcGFydHMsIFBvbXBleSBwcm9jZWVkZWQgb24gaGlzIGpvdXJuZXksIGFuZCBub3cgd2l0aCBncmVhdGVyIHBvbXAgYW5kIGNlcmVtb255LiBGb3IgaW5zdGFuY2UsIHdoZW4gaGUgY2FtZSB0byBNaXR5bGVuZSwgaGUgZ2F2ZSB0aGUgY2l0eSBpdHMgZnJlZWRvbSwgZm9yIHRoZSBzYWtlIG9mIFRoZW9waGFuZXMsIGFuZCB3aXRuZXNzZWQgdGhlIHRyYWRpdGlvbmFsIGNvbnRlc3Qgb2YgdGhlIHBvZXRzIHRoZXJlLCB3aG8gbm93IHRvb2sgYXMgdGhlaXIgc29sZSB0aGVtZSBoaXMgb3duIGV4cGxvaXRzLiBBbmQgYmVpbmcgcGxlYXNlZCB3aXRoIHRoZSB0aGVhdHJlLCBoZSBoYWQgc2tldGNoZXMgYW5kIHBsYW5zIG9mIGl0IG1hZGUgZm9yIGhpbSwgdGhhdCBoZSBtaWdodCBidWlsZCBvbmUgbGlrZSBpdCBpbiBSb21lLCBvbmx5IGxhcmdlciBhbmQgbW9yZSBzcGxlbmRpZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDQwLjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGwuIDU8L2JpYmw+LiBUaGUgdGhlYXRyZSB3YXMgb3BlbmVkIGluIDU1IEIuQy4sIGFuZCBhY2NvbW1vZGF0ZWQgNDAsMDAwIHBlcnNvbnMuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGhlIHdhcyBpbiBSaG9kZXMsIGhlIGhlYXJkIGFsbCB0aGUgc29waGlzdHMgdGhlcmUsIGFuZCBtYWRlIGVhY2ggb2YgdGhlbSBhIHByZXNlbnQgb2YgYSB0YWxlbnQuIFBvc2VpZG9uaXVzIGhhcyBhY3R1YWxseSBkZXNjcmliZWQgdGhlIGRpc2NvdXJzZSB3aGljaCBoZSBoZWxkIGJlZm9yZSBoaW0sIGFnYWluc3QgSGVybWFnb3JhcyB0aGUgcmhldG9yaWNpYW4sIG9uIEludmVzdGlnYXRpb24gaW4gR2VuZXJhbC4gQXQgQXRoZW5zLCB0b28sIGhlIG5vdCBvbmx5IHRyZWF0ZWQgdGhlIHBoaWxvc29waGVycyB3aXRoIGxpa2UgbXVuaWZpY2VuY2UsIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhbHNvIGdhdmUgZmlmdHkgdGFsZW50cyB0byB0aGUgY2l0eSB0b3dhcmRzIGl0cyByZXN0b3JhdGlvbi4gSGUgdGhlcmVmb3JlIGhvcGVkIHRvIHNldCBmb290IGluIEl0YWx5IHdpdGggYSByZXB1dGF0aW9uIG1vcmUgYnJpbGxpYW50IHRoYW4gdGhhdCBvZiBhbnkgb3RoZXIgbWFuLCBhbmQgdGhhdCBoaXMgZmFtaWx5IHdvdWxkIGJlIGFzIGVhZ2VyIHRvIHNlZSBoaW0gYXMgaGUgd2FzIHRvIHNlZSB0aGVtLiBCdXQgdGhhdCBkaXZpbmUgYWdlbmN5IHdoaWNoIGFsd2F5cyB0YWtlcyBwYWlucyB0byBtaW5nbGUgd2l0aCB0aGUgZ3JlYXQgYW5kIHNwbGVuZGlkIGdpZnRzIG9mIGZvcnR1bmUgYSBjZXJ0YWluIHBvcnRpb24gb2YgZXZpbCwgaGFkIGxvbmcgYmVlbiBzZWNyZXRseSBhdCB3b3JrIHByZXBhcmluZyB0byBtYWtlIGhpcyByZXR1cm4gYSB2ZXJ5IGJpdHRlciBvbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBNdWNpYSBoaXMgd2lmZSBoYWQgcGxheWVkIHRoZSB3YW50b24gZHVyaW5nIGhpcyBhYnNlbmNlLiBXaGlsZSBQb21wZXkgd2FzIGZhciBhd2F5LCBoZSBoYWQgdHJlYXRlZCB0aGUgcmVwb3J0IG9mIGl0IHdpdGggY29udGVtcHQ7IGJ1dCB3aGVuIGhlIHdhcyBuZWFyZXIgSXRhbHkgYW5kLCBhcyBpdCB3b3VsZCBzZWVtLCBoYWQgZXhhbWluZWQgdGhlIGNoYXJnZSBtb3JlIGF0IGhpcyBsZWlzdXJlLCBoZSBzZW50IGhlciBhIGJpbGwgb2YgZGl2b3JjZSwgYWx0aG91Z2ggaGUgbmVpdGhlciB3cm90ZSBhdCB0aGF0IHRpbWUsIG5vciBhZnRlcndhcmRzIGRlY2xhcmVkLCB0aGUgZ3JvdW5kcyBvbiB3aGljaCBoZSBwdXQgaGVyIGF3YXk7IGJ1dCB0aGUgcmVhc29uIGlzIHN0YXRlZCBpbiBDaWNlcm8ncyBsZXR0ZXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5vdCBpbiBhbnkgd2hpY2ggYXJlIGV4dGFudC4gSW4gYSBsZXR0ZXIgdG8gQXR0aWN1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQXR0LiAxLjEyLjMiIHZhbGlkPSJ5ZXMiPmkuIDEyLCAzPC9iaWJsPikgQ2ljZXJvIHNheXMgdGhhdCBQb21wZXkncyBkaXZvcmNlIG9mIE11Y2lhIHdhcyBoZWFydGlseSBhcHByb3ZlZC48L25vdGU+IAoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGFycmFuZ2luZyBhbmQgc2V0dGxpbmcgYWZmYWlycyBpbiB0aG9zZSBwYXJ0cywgUG9tcGV5IHByb2NlZWRlZCBvbiBoaXMgam91cm5leSwgYW5kIG5vdyB3aXRoIGdyZWF0ZXIgcG9tcCBhbmQgY2VyZW1vbnkuIEZvciBpbnN0YW5jZSwgd2hlbiBoZSBjYW1lIHRvIE1pdHlsZW5lLCBoZSBnYXZlIHRoZSBjaXR5IGl0cyBmcmVlZG9tLCBmb3IgdGhlIHNha2Ugb2YgVGhlb3BoYW5lcywgYW5kIHdpdG5lc3NlZCB0aGUgdHJhZGl0aW9uYWwgY29udGVzdCBvZiB0aGUgcG9ldHMgdGhlcmUsIHdobyBub3cgdG9vayBhcyB0aGVpciBzb2xlIHRoZW1lIGhpcyBvd24gZXhwbG9pdHMuIEFuZCBiZWluZyBwbGVhc2VkIHdpdGggdGhlIHRoZWF0cmUsIGhlIGhhZCBza2V0Y2hlcyBhbmQgcGxhbnMgb2YgaXQgbWFkZSBmb3IgaGltLCB0aGF0IGhlIG1pZ2h0IGJ1aWxkIG9uZSBsaWtlIGl0IGluIFJvbWUsIG9ubHkgbGFyZ2VyIGFuZCBtb3JlIHNwbGVuZGlkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDQwLjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGwuIDU8L2JpYmw+LiBUaGUgdGhlYXRyZSB3YXMgb3BlbmVkIGluIDU1IEIuQy4sIGFuZCBhY2NvbW1vZGF0ZWQgNDAsMDAwIHBlcnNvbnMuPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDAuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4bC4gNTwvYmlibD4uIFRoZSB0aGVhdHJlIHdhcyBvcGVuZWQgaW4gNTUgQi5DLiwgYW5kIGFjY29tbW9kYXRlZCA0MCwwMDAgcGVyc29ucy48L3RyYW5zbGF0aW9uPg=="
translation['42.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGhlIHdhcyBpbiBSaG9kZXMsIGhlIGhlYXJkIGFsbCB0aGUgc29waGlzdHMgdGhlcmUsIGFuZCBtYWRlIGVhY2ggb2YgdGhlbSBhIHByZXNlbnQgb2YgYSB0YWxlbnQuIFBvc2VpZG9uaXVzIGhhcyBhY3R1YWxseSBkZXNjcmliZWQgdGhlIGRpc2NvdXJzZSB3aGljaCBoZSBoZWxkIGJlZm9yZSBoaW0sIGFnYWluc3QgSGVybWFnb3JhcyB0aGUgcmhldG9yaWNpYW4sIG9uIEludmVzdGlnYXRpb24gaW4gR2VuZXJhbC4gQXQgQXRoZW5zLCB0b28sIGhlIG5vdCBvbmx5IHRyZWF0ZWQgdGhlIHBoaWxvc29waGVycyB3aXRoIGxpa2UgbXVuaWZpY2VuY2UsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['42.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhbHNvIGdhdmUgZmlmdHkgdGFsZW50cyB0byB0aGUgY2l0eSB0b3dhcmRzIGl0cyByZXN0b3JhdGlvbi4gSGUgdGhlcmVmb3JlIGhvcGVkIHRvIHNldCBmb290IGluIEl0YWx5IHdpdGggYSByZXB1dGF0aW9uIG1vcmUgYnJpbGxpYW50IHRoYW4gdGhhdCBvZiBhbnkgb3RoZXIgbWFuLCBhbmQgdGhhdCBoaXMgZmFtaWx5IHdvdWxkIGJlIGFzIGVhZ2VyIHRvIHNlZSBoaW0gYXMgaGUgd2FzIHRvIHNlZSB0aGVtLiBCdXQgdGhhdCBkaXZpbmUgYWdlbmN5IHdoaWNoIGFsd2F5cyB0YWtlcyBwYWlucyB0byBtaW5nbGUgd2l0aCB0aGUgZ3JlYXQgYW5kIHNwbGVuZGlkIGdpZnRzIG9mIGZvcnR1bmUgYSBjZXJ0YWluIHBvcnRpb24gb2YgZXZpbCwgaGFkIGxvbmcgYmVlbiBzZWNyZXRseSBhdCB3b3JrIHByZXBhcmluZyB0byBtYWtlIGhpcyByZXR1cm4gYSB2ZXJ5IGJpdHRlciBvbmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['42.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBNdWNpYSBoaXMgd2lmZSBoYWQgcGxheWVkIHRoZSB3YW50b24gZHVyaW5nIGhpcyBhYnNlbmNlLiBXaGlsZSBQb21wZXkgd2FzIGZhciBhd2F5LCBoZSBoYWQgdHJlYXRlZCB0aGUgcmVwb3J0IG9mIGl0IHdpdGggY29udGVtcHQ7IGJ1dCB3aGVuIGhlIHdhcyBuZWFyZXIgSXRhbHkgYW5kLCBhcyBpdCB3b3VsZCBzZWVtLCBoYWQgZXhhbWluZWQgdGhlIGNoYXJnZSBtb3JlIGF0IGhpcyBsZWlzdXJlLCBoZSBzZW50IGhlciBhIGJpbGwgb2YgZGl2b3JjZSwgYWx0aG91Z2ggaGUgbmVpdGhlciB3cm90ZSBhdCB0aGF0IHRpbWUsIG5vciBhZnRlcndhcmRzIGRlY2xhcmVkLCB0aGUgZ3JvdW5kcyBvbiB3aGljaCBoZSBwdXQgaGVyIGF3YXk7IGJ1dCB0aGUgcmVhc29uIGlzIHN0YXRlZCBpbiBDaWNlcm8ncyBsZXR0ZXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm90IGluIGFueSB3aGljaCBhcmUgZXh0YW50LiBJbiBhIGxldHRlciB0byBBdHRpY3VzICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEF0dC4gMS4xMi4zIiB2YWxpZD0ieWVzIj5pLiAxMiwgMzwvYmlibD4pIENpY2VybyBzYXlzIHRoYXQgUG9tcGV5J3MgZGl2b3JjZSBvZiBNdWNpYSB3YXMgaGVhcnRpbHkgYXBwcm92ZWQuPC9ub3RlPiAKCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDEuMTIuMyIgdmFsaWQ9InllcyI+aS4gMTIsIDM8L2JpYmw+KSBDaWNlcm8gc2F5cyB0aGF0IFBvbXBleSdzIGRpdm9yY2Ugb2YgTXVjaWEgd2FzIGhlYXJ0aWx5IGFwcHJvdmVkLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFsbCBzb3J0cyBvZiBzdG9yaWVzIGFib3V0IFBvbXBleSBrZXB0IHRyYXZlbGxpbmcgdG8gUm9tZSBiZWZvcmUgaGltLCBhbmQgdGhlcmUgd2FzIG11Y2ggY29tbW90aW9uIHRoZXJlLCB3aGVyZSBpdCB3YXMgdGhvdWdodCB0aGF0IGhlIHdvdWxkIHN0cmFpZ2h0d2F5IGxlYWQgaGlzIGFybXkgYWdhaW5zdCB0aGUgY2l0eSwgYW5kIHRoYXQgYSBtb25hcmNoeSB3b3VsZCBiZSBzZWN1cmVseSBlc3RhYmxpc2hlZC4gQ3Jhc3N1cyB0b29rIGhpcyBjaGlsZHJlbiBhbmQgaGlzIG1vbmV5IGFuZCBzZWNyZXRseSB3aXRoZHJldywgd2hldGhlciBpdCB3YXMgdGhhdCBoZSB3YXMgcmVhbGx5IGFmcmFpZCwgb3IgcmF0aGVyLCBhcyBzZWVtZWQgbGlrZWx5LCBiZWNhdXNlIGhlIHdpc2hlZCB0byBnaXZlIGNyZWRpYmlsaXR5IHRvIHRoZSBjYWx1bW55IGFuZCBtYWtlIHRoZSBlbnZpb3VzIGhhdHJlZCBvZiBQb21wZXkgbW9yZSBzZXZlcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgYWNjb3JkaW5nbHksIGFzIHNvb24gYXMgaGUgc2V0IGZvb3QgaW4gSXRhbHksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjIgQi5DLjwvbm90ZT4gaGVsZCBhbiBhc3NlbWJseSBvZiBoaXMgc29sZGllcnMsIGFuZCBhZnRlciBoZSBoYWQgc2FpZCB3aGF0IGZpdHRlZCB0aGUgb2NjYXNpb24sIGFuZCBoYWQgZXhwcmVzc2VkIGhpcyBncmF0aXR1ZGUgYW5kIGFmZmVjdGlvbiBmb3IgdGhlbSwgaGUgYmFkZSB0aGVtIGRpc3BlcnNlIHRvIHRoZWlyIHNldmVyYWwgY2l0aWVzIGFuZCBzZWVrIHRoZWlyIGhvbWVzLCByZW1lbWJlcmluZyB0byBjb21lIHRvZ2V0aGVyIGFnYWluIGZvciB0aGUgY2VsZWJyYXRpb24gb2YgaGlzIHRyaXVtcGguIFdoZW4gdGhlIGFybXkgaGFkIGJlZW4gdGh1cyBkaXNiYW5kZWQgYW5kIGFsbCB0aGUgd29ybGQgaGFkIGxlYXJuZWQgYWJvdXQgaXQsIGEgd29uZGVyZnVsIHRoaW5nIGhhcHBlbmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBjaXRpZXMgc2F3IFBvbXBleSB0aGUgR3JlYXQgam91cm5leWluZyBhbG9uZyB1bmFybWVkIGFuZCB3aXRoIG9ubHkgYSBmZXcgaW50aW1hdGUgZnJpZW5kcywgYXMgdGhvdWdoIHJldHVybmluZyBmcm9tIGFuIG9yZGluYXJ5IHNvam91cm4gYWJyb2FkLCB0aGUgcGVvcGxlIHN0cmVhbWVkIGZvcnRoIHRvIHNob3cgdGhlaXIgZ29vZCB3aWxsLCBhbmQgZXNjb3J0aW5nIGhpbSBvbiBoaXMgd2F5IHdpdGggYSBsYXJnZXIgZm9yY2UsIGJyb3VnaHQgaGltIHdpdGggdGhlbSBiYWNrIHRvIFJvbWUsIHdoZXJlLCBoYWQgaGUgcHVycG9zZWQgYW55IHJldm9sdXRpb25hcnkgY2hhbmdlcyBhdCB0aGF0IHRpbWUsIGhlIGhhZCBubyBuZWVkIG9mIHRoZSBhcm15IHRoYXQgaGUgaGFkIGRpc2JhbmRlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['43.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHNvcnRzIG9mIHN0b3JpZXMgYWJvdXQgUG9tcGV5IGtlcHQgdHJhdmVsbGluZyB0byBSb21lIGJlZm9yZSBoaW0sIGFuZCB0aGVyZSB3YXMgbXVjaCBjb21tb3Rpb24gdGhlcmUsIHdoZXJlIGl0IHdhcyB0aG91Z2h0IHRoYXQgaGUgd291bGQgc3RyYWlnaHR3YXkgbGVhZCBoaXMgYXJteSBhZ2FpbnN0IHRoZSBjaXR5LCBhbmQgdGhhdCBhIG1vbmFyY2h5IHdvdWxkIGJlIHNlY3VyZWx5IGVzdGFibGlzaGVkLiBDcmFzc3VzIHRvb2sgaGlzIGNoaWxkcmVuIGFuZCBoaXMgbW9uZXkgYW5kIHNlY3JldGx5IHdpdGhkcmV3LCB3aGV0aGVyIGl0IHdhcyB0aGF0IGhlIHdhcyByZWFsbHkgYWZyYWlkLCBvciByYXRoZXIsIGFzIHNlZW1lZCBsaWtlbHksIGJlY2F1c2UgaGUgd2lzaGVkIHRvIGdpdmUgY3JlZGliaWxpdHkgdG8gdGhlIGNhbHVtbnkgYW5kIG1ha2UgdGhlIGVudmlvdXMgaGF0cmVkIG9mIFBvbXBleSBtb3JlIHNldmVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['43.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgYWNjb3JkaW5nbHksIGFzIHNvb24gYXMgaGUgc2V0IGZvb3QgaW4gSXRhbHksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2MiBCLkMuPC9ub3RlPiBoZWxkIGFuIGFzc2VtYmx5IG9mIGhpcyBzb2xkaWVycywgYW5kIGFmdGVyIGhlIGhhZCBzYWlkIHdoYXQgZml0dGVkIHRoZSBvY2Nhc2lvbiwgYW5kIGhhZCBleHByZXNzZWQgaGlzIGdyYXRpdHVkZSBhbmQgYWZmZWN0aW9uIGZvciB0aGVtLCBoZSBiYWRlIHRoZW0gZGlzcGVyc2UgdG8gdGhlaXIgc2V2ZXJhbCBjaXRpZXMgYW5kIHNlZWsgdGhlaXIgaG9tZXMsIHJlbWVtYmVyaW5nIHRvIGNvbWUgdG9nZXRoZXIgYWdhaW4gZm9yIHRoZSBjZWxlYnJhdGlvbiBvZiBoaXMgdHJpdW1waC4gV2hlbiB0aGUgYXJteSBoYWQgYmVlbiB0aHVzIGRpc2JhbmRlZCBhbmQgYWxsIHRoZSB3b3JsZCBoYWQgbGVhcm5lZCBhYm91dCBpdCwgYSB3b25kZXJmdWwgdGhpbmcgaGFwcGVuZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGNpdGllcyBzYXcgUG9tcGV5IHRoZSBHcmVhdCBqb3VybmV5aW5nIGFsb25nIHVuYXJtZWQgYW5kIHdpdGggb25seSBhIGZldyBpbnRpbWF0ZSBmcmllbmRzLCBhcyB0aG91Z2ggcmV0dXJuaW5nIGZyb20gYW4gb3JkaW5hcnkgc29qb3VybiBhYnJvYWQsIHRoZSBwZW9wbGUgc3RyZWFtZWQgZm9ydGggdG8gc2hvdyB0aGVpciBnb29kIHdpbGwsIGFuZCBlc2NvcnRpbmcgaGltIG9uIGhpcyB3YXkgd2l0aCBhIGxhcmdlciBmb3JjZSwgYnJvdWdodCBoaW0gd2l0aCB0aGVtIGJhY2sgdG8gUm9tZSwgd2hlcmUsIGhhZCBoZSBwdXJwb3NlZCBhbnkgcmV2b2x1dGlvbmFyeSBjaGFuZ2VzIGF0IHRoYXQgdGltZSwgaGUgaGFkIG5vIG5lZWQgb2YgdGhlIGFybXkgdGhhdCBoZSBoYWQgZGlzYmFuZGVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHNpbmNlIHRoZSBsYXcgZGlkIG5vdCBwZXJtaXQgYSBjb21tYW5kZXIgdG8gZW50ZXIgdGhlIGNpdHkgYmVmb3JlIGhpcyB0cml1bXBoLCBQb21wZXkgc2VudCBhIHJlcXVlc3QgdG8gdGhlIHNlbmF0ZSB0aGF0IHRoZXkgc2hvdWxkIHB1dCBvZmYgdGhlIGNvbnN1bGFyIGVsZWN0aW9ucywgYXNraW5nIHRoZW0gdG8gZ3JhbnQgaGltIHRoaXMgZmF2b3VyIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgcGVyc29uYWxseSBhc3Npc3QgUGlzbyBpbiBoaXMgY2FuZGlkYWN5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2F0byBvcHBvc2VkIHRoZSByZXF1ZXN0LCBhbmQgUG9tcGV5IGRpZCBub3QgZ2V0IHdoYXQgaGUgd2lzaGVkLiBIb3dldmVyLCBQb21wZXkgYWRtaXJlZCBDYXRvJ3MgYm9sZG5lc3Mgb2Ygc3BlZWNoIGFuZCB0aGUgZmlybW5lc3Mgd2hpY2ggaGUgYWxvbmUgcHVibGljbHkgZGlzcGxheWVkIGluIGRlZmVuY2Ugb2YgbGF3IGFuZCBqdXN0aWNlLCBhbmQgdGhlcmVmb3JlIHNldCBoaXMgaGVhcnQgb24gd2lubmluZyBoaW0gb3ZlciBpbiBzb21lIHdheSBvciBvdGhlcjsgYW5kIHNpbmNlIENhdG8gaGFkIHR3byBuaWVjZXMsIFBvbXBleSB3aXNoZWQgdG8gdGFrZSBvbmUgb2YgdGhlbSB0byB3aWZlIGhpbXNlbGYsIGFuZCB0byBtYXJyeSB0aGUgb3RoZXIgdG8gaGlzIHNvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhdG8gc2F3IHRocm91Z2ggdGhlIGRlc2lnbiwgd2hpY2ggaGUgdGhvdWdodCBhaW1lZCBhdCBjb3JydXB0aW5nIGhpbSBhbmQgaW4gYSBtYW5uZXIgYnJpYmluZyBoaW0gYnkgbWVhbnMgb2YgbWFycmlhZ2UgYWxsaWFuY2UsIGFsdGhvdWdoIGhpcyBzaXN0ZXIgYW5kIGhpcyB3aWZlIHdlcmUgZGlzcGxlYXNlZCB0aGF0IGhlIHNob3VsZCByZWplY3QgUG9tcGV5IHRoZSBHcmVhdCBhcyBhIGZhbWlseSBjb25uZWN0aW9uLiBJbiB0aGUgbWVhbnRpbWUsIGhvd2V2ZXIsIHdpc2hpbmcgdG8gaGF2ZSBBZnJhbml1cyBtYWRlIGNvbnN1bCwgUG9tcGV5IHNwZW50IG1vbmV5IGxhdmlzaGx5IG9uIGhpcyBiZWhhbGYgYW1vbmcgdGhlIHRyaWJlcywgYW5kIHRoZSBwZW9wbGUgd2VudCBkb3duIHRvIFBvbXBleSdzIGdhcmRlbnMgdG8gZ2V0IGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBhIGNvbnNlcXVlbmNlLCB0aGUgbWF0dGVyIGJlY2FtZSBub3RvcmlvdXMgYW5kIFBvbXBleSB3YXMgaW4gaWxsIHJlcHV0ZTsgdGhlIG9mZmljZSBvZiBjb25zdWwgd2FzIGhpZ2hlc3Qgb2YgYWxsLCBhbmQgaGUgaGltc2VsZiBoYWQgdGhlcmVmb3JlIHJlY2VpdmVkIGl0IGFzIGEgcmV3YXJkIGZvciBoaXMgc3VjY2Vzc2VzLCBhbmQgeWV0IGhlIHdhcyBtYWtpbmcgdGhpcyBvZmZpY2UgYSB0aGluZyB0byBiZSBib3VnaHQgYnkgdGhvc2Ugd2hvIHdlcmUgdW5hYmxlIHRvIHdpbiBpdCBieSBtZXJpdC4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiB0aGVzZSByZXByb2FjaGVzLCBob3dldmVyLDwvcT4gc2FpZCBDYXRvIHRvIHRoZSB3b21lbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj53ZSBtdXN0IGhhdmUgdGFrZW4gb3VyIHNoYXJlLCBpZiB3ZSBoYWQgYmVjb21lIGFsbGllZCB0byBQb21wZXkuPC9xPiBBbmQgd2hlbiB0aGV5IGhlYXJkIHRoaXMsIHRoZXkgYWdyZWVkIHRoYXQgaGlzIGVzdGltYXRlIG9mIHRoZSBmaXQgYW5kIHByb3BlciB3YXMgYmV0dGVyIHRoYW4gdGhlaXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIHRoZSBZb3VuZ2VyPC90aXRsZT4sIHh4eC4gMS01LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['44.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBzaW5jZSB0aGUgbGF3IGRpZCBub3QgcGVybWl0IGEgY29tbWFuZGVyIHRvIGVudGVyIHRoZSBjaXR5IGJlZm9yZSBoaXMgdHJpdW1waCwgUG9tcGV5IHNlbnQgYSByZXF1ZXN0IHRvIHRoZSBzZW5hdGUgdGhhdCB0aGV5IHNob3VsZCBwdXQgb2ZmIHRoZSBjb25zdWxhciBlbGVjdGlvbnMsIGFza2luZyB0aGVtIHRvIGdyYW50IGhpbSB0aGlzIGZhdm91ciBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0IHBlcnNvbmFsbHkgYXNzaXN0IFBpc28gaW4gaGlzIGNhbmRpZGFjeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['44.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvIG9wcG9zZWQgdGhlIHJlcXVlc3QsIGFuZCBQb21wZXkgZGlkIG5vdCBnZXQgd2hhdCBoZSB3aXNoZWQuIEhvd2V2ZXIsIFBvbXBleSBhZG1pcmVkIENhdG8ncyBib2xkbmVzcyBvZiBzcGVlY2ggYW5kIHRoZSBmaXJtbmVzcyB3aGljaCBoZSBhbG9uZSBwdWJsaWNseSBkaXNwbGF5ZWQgaW4gZGVmZW5jZSBvZiBsYXcgYW5kIGp1c3RpY2UsIGFuZCB0aGVyZWZvcmUgc2V0IGhpcyBoZWFydCBvbiB3aW5uaW5nIGhpbSBvdmVyIGluIHNvbWUgd2F5IG9yIG90aGVyOyBhbmQgc2luY2UgQ2F0byBoYWQgdHdvIG5pZWNlcywgUG9tcGV5IHdpc2hlZCB0byB0YWtlIG9uZSBvZiB0aGVtIHRvIHdpZmUgaGltc2VsZiwgYW5kIHRvIG1hcnJ5IHRoZSBvdGhlciB0byBoaXMgc29uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['44.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvIHNhdyB0aHJvdWdoIHRoZSBkZXNpZ24sIHdoaWNoIGhlIHRob3VnaHQgYWltZWQgYXQgY29ycnVwdGluZyBoaW0gYW5kIGluIGEgbWFubmVyIGJyaWJpbmcgaGltIGJ5IG1lYW5zIG9mIG1hcnJpYWdlIGFsbGlhbmNlLCBhbHRob3VnaCBoaXMgc2lzdGVyIGFuZCBoaXMgd2lmZSB3ZXJlIGRpc3BsZWFzZWQgdGhhdCBoZSBzaG91bGQgcmVqZWN0IFBvbXBleSB0aGUgR3JlYXQgYXMgYSBmYW1pbHkgY29ubmVjdGlvbi4gSW4gdGhlIG1lYW50aW1lLCBob3dldmVyLCB3aXNoaW5nIHRvIGhhdmUgQWZyYW5pdXMgbWFkZSBjb25zdWwsIFBvbXBleSBzcGVudCBtb25leSBsYXZpc2hseSBvbiBoaXMgYmVoYWxmIGFtb25nIHRoZSB0cmliZXMsIGFuZCB0aGUgcGVvcGxlIHdlbnQgZG93biB0byBQb21wZXkncyBnYXJkZW5zIHRvIGdldCBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['44.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGEgY29uc2VxdWVuY2UsIHRoZSBtYXR0ZXIgYmVjYW1lIG5vdG9yaW91cyBhbmQgUG9tcGV5IHdhcyBpbiBpbGwgcmVwdXRlOyB0aGUgb2ZmaWNlIG9mIGNvbnN1bCB3YXMgaGlnaGVzdCBvZiBhbGwsIGFuZCBoZSBoaW1zZWxmIGhhZCB0aGVyZWZvcmUgcmVjZWl2ZWQgaXQgYXMgYSByZXdhcmQgZm9yIGhpcyBzdWNjZXNzZXMsIGFuZCB5ZXQgaGUgd2FzIG1ha2luZyB0aGlzIG9mZmljZSBhIHRoaW5nIHRvIGJlIGJvdWdodCBieSB0aG9zZSB3aG8gd2VyZSB1bmFibGUgdG8gd2luIGl0IGJ5IG1lcml0LiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW4gdGhlc2UgcmVwcm9hY2hlcywgaG93ZXZlciw8L3E+IHNhaWQgQ2F0byB0byB0aGUgd29tZW4sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj53ZSBtdXN0IGhhdmUgdGFrZW4gb3VyIHNoYXJlLCBpZiB3ZSBoYWQgYmVjb21lIGFsbGllZCB0byBQb21wZXkuPC9xPiBBbmQgd2hlbiB0aGV5IGhlYXJkIHRoaXMsIHRoZXkgYWdyZWVkIHRoYXQgaGlzIGVzdGltYXRlIG9mIHRoZSBmaXQgYW5kIHByb3BlciB3YXMgYmV0dGVyIHRoYW4gdGhlaXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIHRoZSBZb3VuZ2VyPC90aXRsZT4sIHh4eC4gMS01LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAzMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byB0aGUgWW91bmdlcjwvdGl0bGU+LCB4eHguIDEtNS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIFlvdW5nZXI8L3RpdGxlPiwgeHh4LiAxLTUuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHRyaXVtcGggaGFkIHN1Y2ggYSBtYWduaXR1ZGUgdGhhdCwgYWx0aG91Z2ggaXQgd2FzIGRpc3RyaWJ1dGVkIG92ZXIgdHdvIGRheXMsIHN0aWxsIHRoZSB0aW1lIHdvdWxkIG5vdCBzdWZmaWNlLCBidXQgbXVjaCBvZiB3aGF0IGhhZCBiZWVuIHByZXBhcmVkIGNvdWxkIG5vdCBmaW5kIGEgcGxhY2UgaW4gdGhlIHNwZWN0YWNsZSwgZW5vdWdoIHRvIGRpZ25pZnkgYW5kIGFkb3JuIGFub3RoZXIgdHJpdW1waGFsIHByb2Nlc3Npb24uIEluc2NyaXB0aW9ucyBib3JuZSBpbiBhZHZhbmNlIG9mIHRoZSBwcm9jZXNzaW9uIGluZGljYXRlZCB0aGUgbmF0aW9ucyBvdmVyIHdoaWNoIGhlIHRyaXVtcGhlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2Ugd2VyZTogUG9udHVzLCBBcm1lbmlhLCBDYXBwYWRvY2lhLCBQYXBobGFnb25pYSwgTWVkaWEsIENvbGNoaXMsIEliZXJpYSwgQWxiYW5pYSwgU3lyaWEsIENpbGljaWEsIE1lc29wb3RhbWlhLCBQaG9lbmljaWEgYW5kIFBhbGVzdGluZSwgSnVkYWVhLCBBcmFiaWEsIGFuZCBhbGwgdGhlIHBvd2VyIG9mIHRoZSBwaXJhdGVzIGJ5IHNlYSBhbmQgbGFuZCB3aGljaCBoYWQgYmVlbiBvdmVydGhyb3duLiBBbW9uZyB0aGVzZSBwZW9wbGVzIG5vIGxlc3MgdGhhbiBhIHRob3VzYW5kIHN0cm9uZ2hvbGRzIGhhZCBiZWVuIGNhcHR1cmVkLCBhY2NvcmRpbmcgdG8gdGhlIGluc2NyaXB0aW9ucywgYW5kIGNpdGllcyBub3QgbXVjaCB1bmRlciBuaW5lIGh1bmRyZWQgaW4gbnVtYmVyLCBiZXNpZGVzIGVpZ2h0IGh1bmRyZWQgcGlyYXRpY2FsIHNoaXBzLCB3aGlsZSB0aGlydHktbmluZSBjaXRpZXMgaGFkIGJlZW4gZm91bmRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gYWRkaXRpb24gdG8gYWxsIHRoaXMgdGhlIGluc2NyaXB0aW9ucyBzZXQgZm9ydGggdGhhdCB3aGVyZWFzIHRoZSBwdWJsaWMgcmV2ZW51ZXMgZnJvbSB0YXhlcyBoYWQgYmVlbiBmaWZ0eSBtaWxsaW9uIGRyYWNobWFzLCB0aGV5IHdlcmUgcmVjZWl2aW5nIGZyb20gdGhlIGFkZGl0aW9ucyB3aGljaCBQb21wZXkgaGFkIG1hZGUgdG8gdGhlIGNpdHkncyBwb3dlciBlaWdodHktZml2ZSBtaWxsaW9uLCBhbmQgdGhhdCBoZSB3YXMgYnJpbmdpbmcgaW50byB0aGUgcHVibGljIHRyZWFzdXJ5IGluIGNvaW5lZCBtb25leSBhbmQgdmVzc2VscyBvZiBnb2xkIGFuZCBzaWx2ZXIgdHdlbnR5IHRob3VzYW5kIHRhbGVudHMsIGFwYXJ0IGZyb20gdGhlIG1vbmV5IHdoaWNoIGhhZCBiZWVuIGdpdmVuIHRvIGhpcyBzb2xkaWVycywgb2Ygd2hvbSB0aGUgb25lIHdob3NlIHNoYXJlIHdhcyB0aGUgc21hbGxlc3QgaGFkIHJlY2VpdmVkIGZpZnRlZW4gaHVuZHJlZCBkcmFjaG1hcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNhcHRpdmVzIGxlZCBpbiB0cml1bXBoLCBiZXNpZGVzIHRoZSBjaGllZiBwaXJhdGVzLCB3ZXJlIHRoZSBzb24gb2YgVGlncmFuZXMgdGhlIEFybWVuaWFuIHdpdGggaGlzIHdpZmUgYW5kIGRhdWdodGVyLCBab3NpbWUsIGEgd2lmZSBvZiBLaW5nIFRpZ3JhbmVzIGhpbXNlbGYsIEFyaXN0b2J1bHVzLCBraW5nIG9mIHRoZSBKZXdzLCBhIHNpc3RlciBhbmQgZml2ZSBjaGlsZHJlbiBvZiBNaXRocmlkYXRlcywgU2N5dGhpYW4gd29tZW4sIGFuZCBob3N0YWdlcyBnaXZlbiBieSB0aGUgSWJlcmlhbnMsIGJ5IHRoZSBBbGJhbmlhbnMsIGFuZCBieSB0aGUga2luZyBvZiBDb21tYWdlbmU7IHRoZXJlIHdlcmUgYWxzbyB2ZXJ5IG1hbnkgdHJvcGhpZXMsIGVxdWFsIGluIG51bWJlciB0byBhbGwgdGhlIGJhdHRsZXMgaW4gd2hpY2ggUG9tcGV5IGhhZCBiZWVuIHZpY3RvcmlvdXMgZWl0aGVyIGluIHBlcnNvbiBvciBpbiB0aGUgcGVyc29ucyBvZiBoaXMgbGlldXRlbmFudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IHdoaWNoIG1vc3QgZW5oYW5jZWQgaGlzIGdsb3J5IGFuZCBoYWQgbmV2ZXIgYmVlbiB0aGUgbG90IG9mIGFueSBSb21hbiBiZWZvcmUsIHdhcyB0aGF0IGhlIGNlbGVicmF0ZWQgaGlzIHRoaXJkIHRyaXVtcGggb3ZlciB0aGUgdGhpcmQgY29udGluZW50LiBGb3Igb3RoZXJzIGJlZm9yZSBoaW0gaGFkIGNlbGVicmF0ZWQgdGhyZWUgdHJpdW1waHM7IGJ1dCBoZSBjZWxlYnJhdGVkIGhpcyBmaXJzdCBvdmVyIExpYnlhLCBoaXMgc2Vjb25kIG92ZXIgRXVyb3BlLCBhbmQgdGhpcyBoaXMgbGFzdCBvdmVyIEFzaWEsIHNvIHRoYXQgaGUgc2VlbWVkIGluIGEgd2F5IHRvIGhhdmUgaW5jbHVkZWQgdGhlIHdob2xlIHdvcmxkIGluIGhpcyB0aHJlZSB0cml1bXBocy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['45.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHRyaXVtcGggaGFkIHN1Y2ggYSBtYWduaXR1ZGUgdGhhdCwgYWx0aG91Z2ggaXQgd2FzIGRpc3RyaWJ1dGVkIG92ZXIgdHdvIGRheXMsIHN0aWxsIHRoZSB0aW1lIHdvdWxkIG5vdCBzdWZmaWNlLCBidXQgbXVjaCBvZiB3aGF0IGhhZCBiZWVuIHByZXBhcmVkIGNvdWxkIG5vdCBmaW5kIGEgcGxhY2UgaW4gdGhlIHNwZWN0YWNsZSwgZW5vdWdoIHRvIGRpZ25pZnkgYW5kIGFkb3JuIGFub3RoZXIgdHJpdW1waGFsIHByb2Nlc3Npb24uIEluc2NyaXB0aW9ucyBib3JuZSBpbiBhZHZhbmNlIG9mIHRoZSBwcm9jZXNzaW9uIGluZGljYXRlZCB0aGUgbmF0aW9ucyBvdmVyIHdoaWNoIGhlIHRyaXVtcGhlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['45.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdlcmU6IFBvbnR1cywgQXJtZW5pYSwgQ2FwcGFkb2NpYSwgUGFwaGxhZ29uaWEsIE1lZGlhLCBDb2xjaGlzLCBJYmVyaWEsIEFsYmFuaWEsIFN5cmlhLCBDaWxpY2lhLCBNZXNvcG90YW1pYSwgUGhvZW5pY2lhIGFuZCBQYWxlc3RpbmUsIEp1ZGFlYSwgQXJhYmlhLCBhbmQgYWxsIHRoZSBwb3dlciBvZiB0aGUgcGlyYXRlcyBieSBzZWEgYW5kIGxhbmQgd2hpY2ggaGFkIGJlZW4gb3ZlcnRocm93bi4gQW1vbmcgdGhlc2UgcGVvcGxlcyBubyBsZXNzIHRoYW4gYSB0aG91c2FuZCBzdHJvbmdob2xkcyBoYWQgYmVlbiBjYXB0dXJlZCwgYWNjb3JkaW5nIHRvIHRoZSBpbnNjcmlwdGlvbnMsIGFuZCBjaXRpZXMgbm90IG11Y2ggdW5kZXIgbmluZSBodW5kcmVkIGluIG51bWJlciwgYmVzaWRlcyBlaWdodCBodW5kcmVkIHBpcmF0aWNhbCBzaGlwcywgd2hpbGUgdGhpcnR5LW5pbmUgY2l0aWVzIGhhZCBiZWVuIGZvdW5kZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['45.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIGFkZGl0aW9uIHRvIGFsbCB0aGlzIHRoZSBpbnNjcmlwdGlvbnMgc2V0IGZvcnRoIHRoYXQgd2hlcmVhcyB0aGUgcHVibGljIHJldmVudWVzIGZyb20gdGF4ZXMgaGFkIGJlZW4gZmlmdHkgbWlsbGlvbiBkcmFjaG1hcywgdGhleSB3ZXJlIHJlY2VpdmluZyBmcm9tIHRoZSBhZGRpdGlvbnMgd2hpY2ggUG9tcGV5IGhhZCBtYWRlIHRvIHRoZSBjaXR5J3MgcG93ZXIgZWlnaHR5LWZpdmUgbWlsbGlvbiwgYW5kIHRoYXQgaGUgd2FzIGJyaW5naW5nIGludG8gdGhlIHB1YmxpYyB0cmVhc3VyeSBpbiBjb2luZWQgbW9uZXkgYW5kIHZlc3NlbHMgb2YgZ29sZCBhbmQgc2lsdmVyIHR3ZW50eSB0aG91c2FuZCB0YWxlbnRzLCBhcGFydCBmcm9tIHRoZSBtb25leSB3aGljaCBoYWQgYmVlbiBnaXZlbiB0byBoaXMgc29sZGllcnMsIG9mIHdob20gdGhlIG9uZSB3aG9zZSBzaGFyZSB3YXMgdGhlIHNtYWxsZXN0IGhhZCByZWNlaXZlZCBmaWZ0ZWVuIGh1bmRyZWQgZHJhY2htYXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['45.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjYXB0aXZlcyBsZWQgaW4gdHJpdW1waCwgYmVzaWRlcyB0aGUgY2hpZWYgcGlyYXRlcywgd2VyZSB0aGUgc29uIG9mIFRpZ3JhbmVzIHRoZSBBcm1lbmlhbiB3aXRoIGhpcyB3aWZlIGFuZCBkYXVnaHRlciwgWm9zaW1lLCBhIHdpZmUgb2YgS2luZyBUaWdyYW5lcyBoaW1zZWxmLCBBcmlzdG9idWx1cywga2luZyBvZiB0aGUgSmV3cywgYSBzaXN0ZXIgYW5kIGZpdmUgY2hpbGRyZW4gb2YgTWl0aHJpZGF0ZXMsIFNjeXRoaWFuIHdvbWVuLCBhbmQgaG9zdGFnZXMgZ2l2ZW4gYnkgdGhlIEliZXJpYW5zLCBieSB0aGUgQWxiYW5pYW5zLCBhbmQgYnkgdGhlIGtpbmcgb2YgQ29tbWFnZW5lOyB0aGVyZSB3ZXJlIGFsc28gdmVyeSBtYW55IHRyb3BoaWVzLCBlcXVhbCBpbiBudW1iZXIgdG8gYWxsIHRoZSBiYXR0bGVzIGluIHdoaWNoIFBvbXBleSBoYWQgYmVlbiB2aWN0b3Jpb3VzIGVpdGhlciBpbiBwZXJzb24gb3IgaW4gdGhlIHBlcnNvbnMgb2YgaGlzIGxpZXV0ZW5hbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['45.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IHdoaWNoIG1vc3QgZW5oYW5jZWQgaGlzIGdsb3J5IGFuZCBoYWQgbmV2ZXIgYmVlbiB0aGUgbG90IG9mIGFueSBSb21hbiBiZWZvcmUsIHdhcyB0aGF0IGhlIGNlbGVicmF0ZWQgaGlzIHRoaXJkIHRyaXVtcGggb3ZlciB0aGUgdGhpcmQgY29udGluZW50LiBGb3Igb3RoZXJzIGJlZm9yZSBoaW0gaGFkIGNlbGVicmF0ZWQgdGhyZWUgdHJpdW1waHM7IGJ1dCBoZSBjZWxlYnJhdGVkIGhpcyBmaXJzdCBvdmVyIExpYnlhLCBoaXMgc2Vjb25kIG92ZXIgRXVyb3BlLCBhbmQgdGhpcyBoaXMgbGFzdCBvdmVyIEFzaWEsIHNvIHRoYXQgaGUgc2VlbWVkIGluIGEgd2F5IHRvIGhhdmUgaW5jbHVkZWQgdGhlIHdob2xlIHdvcmxkIGluIGhpcyB0aHJlZSB0cml1bXBocy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGFnZSBhdCB0aGlzIHRpbWUsIGFzIHRob3NlIGluc2lzdCB3aG8gY29tcGFyZSBoaW0gaW4gYWxsIHBvaW50cyB0byBBbGV4YW5kZXIgYW5kIGZvcmNlIHRoZSBwYXJhbGxlbCwgd2FzIGxlc3MgdGhhbiB0aGlydHktZm91ciB5ZWFycywgdGhvdWdoIGluIGZhY3QgaGUgd2FzIG5lYXJseSBmb3J0eS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2MSBCLkMuLCB3aGVuIHRoaXMgdHJpdW1waCB3YXMgY2VsZWJyYXRlZCwgUG9tcGV5IHdhcyBpbiBoaXMgZm9ydHktc2l4dGggeWVhci48L25vdGU+IEhvdyBoYXBweSB3b3VsZCBpdCBoYXZlIGJlZW4gZm9yIGhpbSBpZiBoZSBoYWQgZW5kZWQgaGlzIGxpZmUgYXQgdGhpcyBwb2ludCwgdXAgdG8gd2hpY2ggaGUgZW5qb3llZCB0aGUgZ29vZCBmb3J0dW5lIG9mIEFsZXhhbmRlciEgRm9yIHN1Y2NlZWRpbmcgdGltZSBicm91Z2h0IGhpbSBvbmx5IHN1Y2Nlc3MgdGhhdCBtYWRlIGhpbSBvZGlvdXMsIGFuZCBmYWlsdXJlIHRoYXQgd2FzIGlycmVwYXJhYmxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IHBvbGl0aWNhbCBwb3dlciB3aGljaCBoZSBoYWQgd29uIGJ5IGhpcyBvd24gbGVnaXRpbWF0ZSBlZmZvcnRzLCB0aGlzIGhlIHVzZWQgaW4gdGhlIGludGVyZXN0cyBvZiBvdGhlcnMgaWxsZWdhbGx5LCB0aHVzIHdlYWtlbmluZyBoaXMgb3duIHJlcHV0YXRpb24gaW4gcHJvcG9ydGlvbiBhcyBoZSBzdHJlbmd0aGVuZWQgdGhlbSwgc28gdGhhdCBiZWZvcmUgaGUgd2FzIGF3YXJlIG9mIGl0IGhlIHdhcyBydWluZWQgYnkgdGhlIHZlcnkgdmlnb3VyIGFuZCBtYWduaXR1ZGUgb2YgaGlzIG93biBwb3dlci4gQW5kIGp1c3QgYXMgdGhlIHN0cm9uZ2VzdCBwYXJ0cyBvZiBhIGNpdHkncyBkZWZlbmNlcywgd2hlbiB0aGV5IGFyZSBjYXB0dXJlZCBieSBhbiBlbmVteSwgaW1wYXJ0IHRvIGhpbSB0aGVpciBvd24gaW5oZXJlbnQgc3RyZW5ndGgsIHNvIGl0IHdhcyBieSBQb21wZXkncyBwb3dlciBhbmQgaW5mbHVlbmNlIHRoYXQgQ2Flc2FyIHdhcyByYWlzZWQgdXAgYWdhaW5zdCB0aGUgY2l0eSwgYW5kIENhZXNhciBvdmVydGhyZXcgYW5kIGNhc3QgZG93biB0aGUgdmVyeSBtYW4gYnkgd2hvc2UgYWlkIGhlIGhhZCB3YXhlZCBzdHJvbmcgYWdhaW5zdCB0aGUgcmVzdC4gQW5kIHRoaXMgd2FzIHRoZSB3YXkgaXQgY2FtZSBhYm91dC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['46.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGFnZSBhdCB0aGlzIHRpbWUsIGFzIHRob3NlIGluc2lzdCB3aG8gY29tcGFyZSBoaW0gaW4gYWxsIHBvaW50cyB0byBBbGV4YW5kZXIgYW5kIGZvcmNlIHRoZSBwYXJhbGxlbCwgd2FzIGxlc3MgdGhhbiB0aGlydHktZm91ciB5ZWFycywgdGhvdWdoIGluIGZhY3QgaGUgd2FzIG5lYXJseSBmb3J0eS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDYxIEIuQy4sIHdoZW4gdGhpcyB0cml1bXBoIHdhcyBjZWxlYnJhdGVkLCBQb21wZXkgd2FzIGluIGhpcyBmb3J0eS1zaXh0aCB5ZWFyLjwvbm90ZT4gSG93IGhhcHB5IHdvdWxkIGl0IGhhdmUgYmVlbiBmb3IgaGltIGlmIGhlIGhhZCBlbmRlZCBoaXMgbGlmZSBhdCB0aGlzIHBvaW50LCB1cCB0byB3aGljaCBoZSBlbmpveWVkIHRoZSBnb29kIGZvcnR1bmUgb2YgQWxleGFuZGVyISBGb3Igc3VjY2VlZGluZyB0aW1lIGJyb3VnaHQgaGltIG9ubHkgc3VjY2VzcyB0aGF0IG1hZGUgaGltIG9kaW91cywgYW5kIGZhaWx1cmUgdGhhdCB3YXMgaXJyZXBhcmFibGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['46.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgcG9saXRpY2FsIHBvd2VyIHdoaWNoIGhlIGhhZCB3b24gYnkgaGlzIG93biBsZWdpdGltYXRlIGVmZm9ydHMsIHRoaXMgaGUgdXNlZCBpbiB0aGUgaW50ZXJlc3RzIG9mIG90aGVycyBpbGxlZ2FsbHksIHRodXMgd2Vha2VuaW5nIGhpcyBvd24gcmVwdXRhdGlvbiBpbiBwcm9wb3J0aW9uIGFzIGhlIHN0cmVuZ3RoZW5lZCB0aGVtLCBzbyB0aGF0IGJlZm9yZSBoZSB3YXMgYXdhcmUgb2YgaXQgaGUgd2FzIHJ1aW5lZCBieSB0aGUgdmVyeSB2aWdvdXIgYW5kIG1hZ25pdHVkZSBvZiBoaXMgb3duIHBvd2VyLiBBbmQganVzdCBhcyB0aGUgc3Ryb25nZXN0IHBhcnRzIG9mIGEgY2l0eSdzIGRlZmVuY2VzLCB3aGVuIHRoZXkgYXJlIGNhcHR1cmVkIGJ5IGFuIGVuZW15LCBpbXBhcnQgdG8gaGltIHRoZWlyIG93biBpbmhlcmVudCBzdHJlbmd0aCwgc28gaXQgd2FzIGJ5IFBvbXBleSdzIHBvd2VyIGFuZCBpbmZsdWVuY2UgdGhhdCBDYWVzYXIgd2FzIHJhaXNlZCB1cCBhZ2FpbnN0IHRoZSBjaXR5LCBhbmQgQ2Flc2FyIG92ZXJ0aHJldyBhbmQgY2FzdCBkb3duIHRoZSB2ZXJ5IG1hbiBieSB3aG9zZSBhaWQgaGUgaGFkIHdheGVkIHN0cm9uZyBhZ2FpbnN0IHRoZSByZXN0LiBBbmQgdGhpcyB3YXMgdGhlIHdheSBpdCBjYW1lIGFib3V0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEx1Y3VsbHVzIGNhbWUgYmFjayBmcm9tIEFzaWEsIHdoZXJlIGhlIGhhZCBiZWVuIG91dHJhZ2VvdXNseSB0cmVhdGVkIGJ5IFBvbXBleSwgdGhlIHNlbmF0ZSBhdCBvbmNlIGdhdmUgaGltIGEgc3BsZW5kaWQgcmVjZXB0aW9uLCBhbmQgYWZ0ZXIgUG9tcGV5J3MgYXJyaXZhbCwgd2lzaGluZyB0byBvYnN0cnVjdCB0aGF0IGxlYWRlcidzIHJlcHV0YXRpb24sIGl0IHVyZ2VkIEx1Y3VsbHVzIGFsbCB0aGUgbW9yZSB0byB0YWtlIHBhcnQgaW4gcHVibGljIGxpZmUuIEluIG90aGVyIG1hdHRlcnMgTHVjdWxsdXMgd2FzIGFscmVhZHkgZHVsbGVkIGFuZCBjaGlsbGVkIHBhc3QgYWxsIGVmZmljaWVuY3ksIGhhdmluZyBnaXZlbiBoaW1zZWxmIG92ZXIgdG8gdGhlIHBsZWFzdXJlcyBvZiBlYXNlIGFuZCB0aGUgZW5qb3ltZW50IG9mIGhpcyB3ZWFsdGg7IGJ1dCBoZSBzcHJhbmcgYXQgb25jZSB1cG9uIFBvbXBleSBhbmQgYnkgYSB2aWdvcm91cyBhdHRhY2sgd29uIGEgdmljdG9yeSBvdmVyIGhpbSBpbiB0aGUgbWF0dGVyIG9mIHRob3NlIG9yZGluYW5jZXMgb2YgaGlzIG93biB3aGljaCBQb21wZXkgaGFkIGFubnVsbGVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMzEuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHhpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgY2FycmllZCB0aGUgZGF5IGluIHRoZSBzZW5hdGUgd2l0aCB0aGUgc3VwcG9ydCBvZiBDYXRvLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIHdvcnN0ZWQgYW5kIGhhcmQgcHJlc3NlZCwgUG9tcGV5IHdhcyBmb3JjZWQgdG8gZmx5IGZvciByZWZ1Z2UgdG8gcG9wdWxhciB0cmlidW5lcyBhbmQgYXR0YWNoIGhpbXNlbGYgdG8geW91bmcgYWR2ZW50dXJlcnMuIEFtb25nIHRoZXNlIHRoZSBib2xkZXN0IGFuZCB2aWxlc3Qgd2FzIENsb2RpdXMsIHdobyB0b29rIGhpbSB1cCBhbmQgdGhyZXcgaGltIGRvd24gdW5kZXIgdGhlIGZlZXQgb2YgdGhlIHBlb3BsZSwgYW5kIGtlZXBpbmcgaGltIGlnbm9ibHkgcm9sbGVkIGFib3V0IGluIHRoZSBkdXN0IG9mIHRoZSBmb3J1bSwgYW5kIGRyYWdnaW5nIGhpbSB0byBhbmQgZnJvIHRoZXJlLCBoZSB1c2VkIGhpbSBmb3IgdGhlIGNvbmZpcm1hdGlvbiBvZiB3aGF0IHdhcyBzYWlkIGFuZCBwcm9wb3NlZCB0byBncmF0aWZ5IGFuZCBmbGF0dGVyIHRoZSBwZW9wbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIGV2ZW4gd2VudCBzbyBmYXIgYXMgdG8gYXNrIGEgcmV3YXJkIGZvciBoaXMgc2VydmljZXMgZnJvbSBQb21wZXksIGFzIGlmIGhlIHdlcmUgaGVscGluZyBoaW0gaW5zdGVhZCBvZiBkaXNncmFjaW5nIGhpbSwgYW5kIHRoaXMgcmV3YXJkIGhlIHN1YnNlcXVlbnRseSBnb3QgaW4gdGhlIGJldHJheWFsIG9mIENpY2Vybywgd2hvIHdhcyBQb21wZXkncyBmcmllbmQgYW5kIGhhZCBkb25lIGhpbSBtb3JlIHBvbGl0aWNhbCBmYXZvdXJzIHRoYW4gYW55IG9uZSBlbHNlLiBGb3Igd2hlbiBDaWNlcm8gd2FzIGluIGRhbmdlciBvZiBjb25kZW1uYXRpb24gYW5kIGJlZ2dlZCBoaXMgYWlkLCBQb21wZXkgd291bGQgbm90IGV2ZW4gc2VlIGhpbSwgYnV0IHNodXQgaGlzIGZyb250IGRvb3IgdXBvbiB0aG9zZSB3aG8gY2FtZSBpbiBDaWNlcm8ncyBiZWhhbGYsIGFuZCBzbGlwcGVkIGF3YXkgYnkgYW5vdGhlci4gQ2ljZXJvLCB0aGVyZWZvcmUsIGZlYXJpbmcgdGhlIHJlc3VsdCBvZiBoaXMgdHJpYWwsIHdpdGhkcmV3IHNlY3JldGx5IGZyb20gUm9tZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5IYXZpbmcgYmVlbiBpbXBlYWNoZWQgZm9yIGlsbGVnYWxseSBwdXR0aW5nIExlbnR1bHVzIGFuZCBDZXRoZWd1cyB0byBkZWF0aCwgaGUgd2VudCBpbnRvIHZvbHVudGFyeSBleGlsZSBpbiA1OCBCLkMuIFNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DaWNlcm88L3RpdGxlPiwgY2hhcHRlcnMgeHh4LiBhbmQgeHh4aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['46.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gTHVjdWxsdXMgY2FtZSBiYWNrIGZyb20gQXNpYSwgd2hlcmUgaGUgaGFkIGJlZW4gb3V0cmFnZW91c2x5IHRyZWF0ZWQgYnkgUG9tcGV5LCB0aGUgc2VuYXRlIGF0IG9uY2UgZ2F2ZSBoaW0gYSBzcGxlbmRpZCByZWNlcHRpb24sIGFuZCBhZnRlciBQb21wZXkncyBhcnJpdmFsLCB3aXNoaW5nIHRvIG9ic3RydWN0IHRoYXQgbGVhZGVyJ3MgcmVwdXRhdGlvbiwgaXQgdXJnZWQgTHVjdWxsdXMgYWxsIHRoZSBtb3JlIHRvIHRha2UgcGFydCBpbiBwdWJsaWMgbGlmZS4gSW4gb3RoZXIgbWF0dGVycyBMdWN1bGx1cyB3YXMgYWxyZWFkeSBkdWxsZWQgYW5kIGNoaWxsZWQgcGFzdCBhbGwgZWZmaWNpZW5jeSwgaGF2aW5nIGdpdmVuIGhpbXNlbGYgb3ZlciB0byB0aGUgcGxlYXN1cmVzIG9mIGVhc2UgYW5kIHRoZSBlbmpveW1lbnQgb2YgaGlzIHdlYWx0aDsgYnV0IGhlIHNwcmFuZyBhdCBvbmNlIHVwb24gUG9tcGV5IGFuZCBieSBhIHZpZ29yb3VzIGF0dGFjayB3b24gYSB2aWN0b3J5IG92ZXIgaGltIGluIHRoZSBtYXR0ZXIgb2YgdGhvc2Ugb3JkaW5hbmNlcyBvZiBoaXMgb3duIHdoaWNoIFBvbXBleSBoYWQgYW5udWxsZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMzEuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHhpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgY2FycmllZCB0aGUgZGF5IGluIHRoZSBzZW5hdGUgd2l0aCB0aGUgc3VwcG9ydCBvZiBDYXRvLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDMxLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh4aS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['46.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgd29yc3RlZCBhbmQgaGFyZCBwcmVzc2VkLCBQb21wZXkgd2FzIGZvcmNlZCB0byBmbHkgZm9yIHJlZnVnZSB0byBwb3B1bGFyIHRyaWJ1bmVzIGFuZCBhdHRhY2ggaGltc2VsZiB0byB5b3VuZyBhZHZlbnR1cmVycy4gQW1vbmcgdGhlc2UgdGhlIGJvbGRlc3QgYW5kIHZpbGVzdCB3YXMgQ2xvZGl1cywgd2hvIHRvb2sgaGltIHVwIGFuZCB0aHJldyBoaW0gZG93biB1bmRlciB0aGUgZmVldCBvZiB0aGUgcGVvcGxlLCBhbmQga2VlcGluZyBoaW0gaWdub2JseSByb2xsZWQgYWJvdXQgaW4gdGhlIGR1c3Qgb2YgdGhlIGZvcnVtLCBhbmQgZHJhZ2dpbmcgaGltIHRvIGFuZCBmcm8gdGhlcmUsIGhlIHVzZWQgaGltIGZvciB0aGUgY29uZmlybWF0aW9uIG9mIHdoYXQgd2FzIHNhaWQgYW5kIHByb3Bvc2VkIHRvIGdyYXRpZnkgYW5kIGZsYXR0ZXIgdGhlIHBlb3BsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['46.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIGV2ZW4gd2VudCBzbyBmYXIgYXMgdG8gYXNrIGEgcmV3YXJkIGZvciBoaXMgc2VydmljZXMgZnJvbSBQb21wZXksIGFzIGlmIGhlIHdlcmUgaGVscGluZyBoaW0gaW5zdGVhZCBvZiBkaXNncmFjaW5nIGhpbSwgYW5kIHRoaXMgcmV3YXJkIGhlIHN1YnNlcXVlbnRseSBnb3QgaW4gdGhlIGJldHJheWFsIG9mIENpY2Vybywgd2hvIHdhcyBQb21wZXkncyBmcmllbmQgYW5kIGhhZCBkb25lIGhpbSBtb3JlIHBvbGl0aWNhbCBmYXZvdXJzIHRoYW4gYW55IG9uZSBlbHNlLiBGb3Igd2hlbiBDaWNlcm8gd2FzIGluIGRhbmdlciBvZiBjb25kZW1uYXRpb24gYW5kIGJlZ2dlZCBoaXMgYWlkLCBQb21wZXkgd291bGQgbm90IGV2ZW4gc2VlIGhpbSwgYnV0IHNodXQgaGlzIGZyb250IGRvb3IgdXBvbiB0aG9zZSB3aG8gY2FtZSBpbiBDaWNlcm8ncyBiZWhhbGYsIGFuZCBzbGlwcGVkIGF3YXkgYnkgYW5vdGhlci4gQ2ljZXJvLCB0aGVyZWZvcmUsIGZlYXJpbmcgdGhlIHJlc3VsdCBvZiBoaXMgdHJpYWwsIHdpdGhkcmV3IHNlY3JldGx5IGZyb20gUm9tZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkhhdmluZyBiZWVuIGltcGVhY2hlZCBmb3IgaWxsZWdhbGx5IHB1dHRpbmcgTGVudHVsdXMgYW5kIENldGhlZ3VzIHRvIGRlYXRoLCBoZSB3ZW50IGludG8gdm9sdW50YXJ5IGV4aWxlIGluIDU4IEIuQy4gU2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgY2hhcHRlcnMgeHh4LiBhbmQgeHh4aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAzMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ljZXJvPC90aXRsZT4sIGNoYXB0ZXJzIHh4eC4gYW5kIHh4eGkuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgY2hhcHRlcnMgeHh4LiBhbmQgeHh4aS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUgQ2Flc2FyIGhhZCByZXR1cm5lZCBmcm9tIGhpcyBwcm92aW5jZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkhlIHJldHVybmVkIGZyb20gU3BhaW4gaW4gNjAgQi5DLiBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAxMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhZXNhcjwvdGl0bGU+LCBjaGFwdGVycyB4aWlpLiBhbmQgeGl2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgaGFkIGluYXVndXJhdGVkIGEgcG9saWN5IHdoaWNoIGJyb3VnaHQgaGltIHRoZSBncmVhdGVzdCBmYXZvdXIgZm9yIHRoZSBwcmVzZW50IGFuZCBwb3dlciBmb3IgdGhlIGZ1dHVyZSwgYnV0IHByb3ZlZCBtb3N0IGluanVyaW91cyB0byBQb21wZXkgYW5kIHRoZSBjaXR5LiBIZSB3YXMgYSBjYW5kaWRhdGUgZm9yIGhpcyBmaXJzdCBjb25zdWxzaGlwLCBhbmQgc2VlaW5nIHRoYXQsIHdoaWxlIENyYXNzdXMgYW5kIFBvbXBleSB3ZXJlIGF0IHZhcmlhbmNlLCBpZiBoZSBhdHRhY2hlZCBoaW1zZWxmIHRvIHRoZSBvbmUgaGUgd291bGQgbWFrZSBhbiBlbmVteSBvZiB0aGUgb3RoZXIsIGhlIHNvdWdodCB0byByZWNvbmNpbGUgdGhlbSB3aXRoIG9uZSBhbm90aGVyLOKAlGEgdGhpbmcgd2hpY2ggd2FzIGhvbm91cmFibGUgaW4gaXRzZWxmIGFuZCBjb25kdWNpdmUgdG8gdGhlIHB1YmxpYyBnb29kLCBidXQgaGUgdW5kZXJ0b29rIGl0IGZvciBhbiB1bndvcnRoeSByZWFzb24gYW5kIHdpdGggYWxsIHRoZSBjbGV2ZXJuZXNzIG9mIGFuIGludHJpZ3Vlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRob3NlIG9wcG9zaW5nIGZvcmNlcyB3aGljaCwgYXMgaW4gYSB2ZXNzZWwsIHByZXZlbnRlZCB0aGUgY2l0eSBmcm9tIHJvY2tpbmcgdG8gYW5kIGZybywgd2VyZSB1bml0ZWQgaW50byBvbmUsIHRoZXJlYnkgZ2l2aW5nIHRvIGZhY3Rpb24gYW4gaXJyZXNpc3RpYmxlIG1vbWVudHVtIHRoYXQgb3ZlcnBvd2VyZWQgYW5kIG92ZXJ0aHJldyBldmVyeXRoaW5nLiBBdCBhbGwgZXZlbnRzLCBDYXRvLCB3aGVuIG1lbiBzYWlkIHRoYXQgdGhlIHN0YXRlIGhhZCBiZWVuIG92ZXJ0dXJuZWQgYnkgdGhlIHF1YXJyZWwgd2hpY2ggYWZ0ZXJ3YXJkcyBhcm9zZSBiZXR3ZWVuIENhZXNhciBhbmQgUG9tcGV5LCBkZWNsYXJlZCB0aGF0IHRoZXkgd3JvbmdseSBsYWlkIHRoZSBibGFtZSBvbiB3aGF0IGhhZCBtZXJlbHkgaGFwcGVuZWQgbGFzdDsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIGl0IHdhcyBub3QgdGhlaXIgZGlzY29yZCBub3IgeWV0IHRoZWlyIGVubWl0eSwgYnV0IHRoZWlyIGNvbmNvcmQgYW5kIGhhcm1vbnkgd2hpY2ggd2FzIHRoZSBmaXJzdCBhbmQgZ3JlYXRlc3QgZXZpbCB0byBiZWZhbGwgdGhlIGNpdHkuIENhZXNhciB3YXMsIGluZGVlZCwgY2hvc2VuIGNvbnN1bDsgYnV0IGhlIGF0IG9uY2UgcGFpZCBoaXMgY291cnQgdG8gdGhlIGluZGlnZW50IGFuZCBwYXVwZXIgY2xhc3NlcyBieSBwcm9wb3NpbmcgbWVhc3VyZXMgZm9yIHRoZSBmb3VuZGluZyBvZiBjaXRpZXMgYW5kIHRoZSBkaXN0cmlidXRpb24gb2YgbGFuZHMsIHRoZXJlYnkgbG93ZXJpbmcgdGhlIGRpZ25pdHkgb2YgaGlzIG9mZmljZSBhbmQgbWFraW5nIHRoZSBjb25zdWxhdGUgYSBraW5kIG9mIHRyaWJ1bmF0ZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gaGUgd2FzIG9wcG9zZWQgYnkgaGlzIGNvbGxlYWd1ZSBCaWJ1bHVzLCBhbmQgQ2F0byBzdG9vZCByZWFkeSB0byBzdXBwb3J0IEJpYnVsdXMgd2l0aCBhbGwgaGlzIG1pZ2h0LCBDYWVzYXIgYnJvdWdodCBQb21wZXkgb24gdGhlIHJvc3RyYSBiZWZvcmUgdGhlIHBlb3BsZSwgYW5kIGFza2VkIGhpbSBpbiBzbyBtYW55IHdvcmRzIHdoZXRoZXIgaGUgYXBwcm92ZWQgdGhlIHByb3Bvc2VkIGxhd3M6IGFuZCB3aGVuIFBvbXBleSBzYWlkIGhlIGRpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVuLDwvcT4gc2FpZCBDYWVzYXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW4gY2FzZSBhbnkgcmVzaXN0YW5jZSBzaG91bGQgYmUgbWFkZSB0byB0aGUgbGF3cywgd2lsbCB5b3UgY29tZSB0byB0aGUgYWlkIG9mIHRoZSBwZW9wbGU/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZXMsIGluZGVlZCw8L3E+IHNhaWQgUG9tcGV5LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd2lsbCBjb21lLCBicmluZ2luZywgYWdhaW5zdCB0aG9zZSB3aG8gdGhyZWF0ZW4gc3dvcmRzLCBib3RoIHN3b3JkIGFuZCBidWNrbGVyLjwvcT4gTmV2ZXIgdXAgdG8gdGhhdCBkYXkgaGFkIFBvbXBleSBzYWlkIG9yIGRvbmUgYW55dGhpbmcgbW9yZSB2dWxnYXIgYW5kIGFycm9nYW50LCBhcyBpdCB3YXMgdGhvdWdodCwgc28gdGhhdCBldmVuIGhpcyBmcmllbmRzIGFwb2xvZ2l6ZWQgZm9yIGhpbSBhbmQgc2FpZCB0aGUgd29yZHMgbXVzdCBoYXZlIGVzY2FwZWQgaGltIGluIHRoZSBzcHVyIG9mIHRoZSBtb21lbnQuIEhvd2V2ZXIsIGJ5IGhpcyBzdWJzZXF1ZW50IGFjdHMgaGUgbWFkZSBpdCBjbGVhciB0aGF0IGhlIGhhZCBub3cgd2hvbGx5IGdpdmVuIGhpbXNlbGYgdXAgdG8gZG8gQ2Flc2FyJ3MgYmlkZGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRvIGV2ZXJ5Ym9keSdzIHN1cnByaXNlIGhlIG1hcnJpZWQgSnVsaWEsIHRoZSBkYXVnaHRlciBvZiBDYWVzYXIsIGFsdGhvdWdoIHNoZSB3YXMgYmV0cm90aGVkIHRvIENhZXBpbyBhbmQgd2FzIGdvaW5nIHRvIGJlIG1hcnJpZWQgdG8gaGltIHdpdGhpbiBhIGZldyBkYXlzOyBhbmQgdG8gYXBwZWFzZSB0aGUgd3JhdGggb2YgQ2FlcGlvLCBQb21wZXkgcHJvbWlzZWQgaGltIGhpcyBvd24gZGF1Z2h0ZXIgaW4gbWFycmlhZ2UsIGFsdGhvdWdoIHNoZSB3YXMgYWxyZWFkeSBlbmdhZ2VkIHRvIEZhdXN0dXMgdGhlIHNvbiBvZiBTdWxsYS4gQ2Flc2FyIGhpbXNlbGYgbWFycmllZCBDYWxwdXJuaWEsIHRoZSBkYXVnaHRlciBvZiBQaXNvLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lIENhZXNhciBoYWQgcmV0dXJuZWQgZnJvbSBoaXMgcHJvdmluY2U8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkhlIHJldHVybmVkIGZyb20gU3BhaW4gaW4gNjAgQi5DLiBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDEzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgY2hhcHRlcnMgeGlpaS4gYW5kIHhpdi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGhhZCBpbmF1Z3VyYXRlZCBhIHBvbGljeSB3aGljaCBicm91Z2h0IGhpbSB0aGUgZ3JlYXRlc3QgZmF2b3VyIGZvciB0aGUgcHJlc2VudCBhbmQgcG93ZXIgZm9yIHRoZSBmdXR1cmUsIGJ1dCBwcm92ZWQgbW9zdCBpbmp1cmlvdXMgdG8gUG9tcGV5IGFuZCB0aGUgY2l0eS4gSGUgd2FzIGEgY2FuZGlkYXRlIGZvciBoaXMgZmlyc3QgY29uc3Vsc2hpcCwgYW5kIHNlZWluZyB0aGF0LCB3aGlsZSBDcmFzc3VzIGFuZCBQb21wZXkgd2VyZSBhdCB2YXJpYW5jZSwgaWYgaGUgYXR0YWNoZWQgaGltc2VsZiB0byB0aGUgb25lIGhlIHdvdWxkIG1ha2UgYW4gZW5lbXkgb2YgdGhlIG90aGVyLCBoZSBzb3VnaHQgdG8gcmVjb25jaWxlIHRoZW0gd2l0aCBvbmUgYW5vdGhlcizigJRhIHRoaW5nIHdoaWNoIHdhcyBob25vdXJhYmxlIGluIGl0c2VsZiBhbmQgY29uZHVjaXZlIHRvIHRoZSBwdWJsaWMgZ29vZCwgYnV0IGhlIHVuZGVydG9vayBpdCBmb3IgYW4gdW53b3J0aHkgcmVhc29uIGFuZCB3aXRoIGFsbCB0aGUgY2xldmVybmVzcyBvZiBhbiBpbnRyaWd1ZXIuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMTMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCBjaGFwdGVycyB4aWlpLiBhbmQgeGl2LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIGNoYXB0ZXJzIHhpaWkuIGFuZCB4aXYuPC90cmFuc2xhdGlvbj4="
translation['47.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aG9zZSBvcHBvc2luZyBmb3JjZXMgd2hpY2gsIGFzIGluIGEgdmVzc2VsLCBwcmV2ZW50ZWQgdGhlIGNpdHkgZnJvbSByb2NraW5nIHRvIGFuZCBmcm8sIHdlcmUgdW5pdGVkIGludG8gb25lLCB0aGVyZWJ5IGdpdmluZyB0byBmYWN0aW9uIGFuIGlycmVzaXN0aWJsZSBtb21lbnR1bSB0aGF0IG92ZXJwb3dlcmVkIGFuZCBvdmVydGhyZXcgZXZlcnl0aGluZy4gQXQgYWxsIGV2ZW50cywgQ2F0bywgd2hlbiBtZW4gc2FpZCB0aGF0IHRoZSBzdGF0ZSBoYWQgYmVlbiBvdmVydHVybmVkIGJ5IHRoZSBxdWFycmVsIHdoaWNoIGFmdGVyd2FyZHMgYXJvc2UgYmV0d2VlbiBDYWVzYXIgYW5kIFBvbXBleSwgZGVjbGFyZWQgdGhhdCB0aGV5IHdyb25nbHkgbGFpZCB0aGUgYmxhbWUgb24gd2hhdCBoYWQgbWVyZWx5IGhhcHBlbmVkIGxhc3Q7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['47.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmZvciBpdCB3YXMgbm90IHRoZWlyIGRpc2NvcmQgbm9yIHlldCB0aGVpciBlbm1pdHksIGJ1dCB0aGVpciBjb25jb3JkIGFuZCBoYXJtb255IHdoaWNoIHdhcyB0aGUgZmlyc3QgYW5kIGdyZWF0ZXN0IGV2aWwgdG8gYmVmYWxsIHRoZSBjaXR5LiBDYWVzYXIgd2FzLCBpbmRlZWQsIGNob3NlbiBjb25zdWw7IGJ1dCBoZSBhdCBvbmNlIHBhaWQgaGlzIGNvdXJ0IHRvIHRoZSBpbmRpZ2VudCBhbmQgcGF1cGVyIGNsYXNzZXMgYnkgcHJvcG9zaW5nIG1lYXN1cmVzIGZvciB0aGUgZm91bmRpbmcgb2YgY2l0aWVzIGFuZCB0aGUgZGlzdHJpYnV0aW9uIG9mIGxhbmRzLCB0aGVyZWJ5IGxvd2VyaW5nIHRoZSBkaWduaXR5IG9mIGhpcyBvZmZpY2UgYW5kIG1ha2luZyB0aGUgY29uc3VsYXRlIGEga2luZCBvZiB0cmlidW5hdGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['47.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGhlIHdhcyBvcHBvc2VkIGJ5IGhpcyBjb2xsZWFndWUgQmlidWx1cywgYW5kIENhdG8gc3Rvb2QgcmVhZHkgdG8gc3VwcG9ydCBCaWJ1bHVzIHdpdGggYWxsIGhpcyBtaWdodCwgQ2Flc2FyIGJyb3VnaHQgUG9tcGV5IG9uIHRoZSByb3N0cmEgYmVmb3JlIHRoZSBwZW9wbGUsIGFuZCBhc2tlZCBoaW0gaW4gc28gbWFueSB3b3JkcyB3aGV0aGVyIGhlIGFwcHJvdmVkIHRoZSBwcm9wb3NlZCBsYXdzOiBhbmQgd2hlbiBQb21wZXkgc2FpZCBoZSBkaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVuLDwvcT4gc2FpZCBDYWVzYXIsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pbiBjYXNlIGFueSByZXNpc3RhbmNlIHNob3VsZCBiZSBtYWRlIHRvIHRoZSBsYXdzLCB3aWxsIHlvdSBjb21lIHRvIHRoZSBhaWQgb2YgdGhlIHBlb3BsZT88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['47.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcywgaW5kZWVkLDwvcT4gc2FpZCBQb21wZXksIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHdpbGwgY29tZSwgYnJpbmdpbmcsIGFnYWluc3QgdGhvc2Ugd2hvIHRocmVhdGVuIHN3b3JkcywgYm90aCBzd29yZCBhbmQgYnVja2xlci48L3E+IE5ldmVyIHVwIHRvIHRoYXQgZGF5IGhhZCBQb21wZXkgc2FpZCBvciBkb25lIGFueXRoaW5nIG1vcmUgdnVsZ2FyIGFuZCBhcnJvZ2FudCwgYXMgaXQgd2FzIHRob3VnaHQsIHNvIHRoYXQgZXZlbiBoaXMgZnJpZW5kcyBhcG9sb2dpemVkIGZvciBoaW0gYW5kIHNhaWQgdGhlIHdvcmRzIG11c3QgaGF2ZSBlc2NhcGVkIGhpbSBpbiB0aGUgc3B1ciBvZiB0aGUgbW9tZW50LiBIb3dldmVyLCBieSBoaXMgc3Vic2VxdWVudCBhY3RzIGhlIG1hZGUgaXQgY2xlYXIgdGhhdCBoZSBoYWQgbm93IHdob2xseSBnaXZlbiBoaW1zZWxmIHVwIHRvIGRvIENhZXNhcidzIGJpZGRpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['47.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0byBldmVyeWJvZHkncyBzdXJwcmlzZSBoZSBtYXJyaWVkIEp1bGlhLCB0aGUgZGF1Z2h0ZXIgb2YgQ2Flc2FyLCBhbHRob3VnaCBzaGUgd2FzIGJldHJvdGhlZCB0byBDYWVwaW8gYW5kIHdhcyBnb2luZyB0byBiZSBtYXJyaWVkIHRvIGhpbSB3aXRoaW4gYSBmZXcgZGF5czsgYW5kIHRvIGFwcGVhc2UgdGhlIHdyYXRoIG9mIENhZXBpbywgUG9tcGV5IHByb21pc2VkIGhpbSBoaXMgb3duIGRhdWdodGVyIGluIG1hcnJpYWdlLCBhbHRob3VnaCBzaGUgd2FzIGFscmVhZHkgZW5nYWdlZCB0byBGYXVzdHVzIHRoZSBzb24gb2YgU3VsbGEuIENhZXNhciBoaW1zZWxmIG1hcnJpZWQgQ2FscHVybmlhLCB0aGUgZGF1Z2h0ZXIgb2YgUGlzby4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgUG9tcGV5IGZpbGxlZCB0aGUgY2l0eSB3aXRoIHNvbGRpZXJzIGFuZCBjYXJyaWVkIGV2ZXJ5dGhpbmcgd2l0aCBhIGhpZ2ggaGFuZC4gQXMgQmlidWx1cyB0aGUgY29uc3VsIHdhcyBnb2luZyBkb3duIGludG8gdGhlIGZvcnVtIHdpdGggTHVjdWxsdXMgYW5kIENhdG8sIHRoZSBjcm93ZCBmZWxsIHVwb24gaGltIGFuZCBicm9rZSB0aGUgZmFzY2VzIG9mIGhpcyBsaWN0b3JzLCBhbmQgc29tZWJvZHkgdGhyZXcgYSBiYXNrZXQgb2Ygb3JkdXJlIGFsbCBvdmVyIHRoZSBoZWFkIG9mIEJpYnVsdXMgaGltc2VsZiwgYW5kIHR3byBvZiB0aGUgdHJpYnVuZXMgd2hvIHdlcmUgZXNjb3J0aW5nIGhpbSB3ZXJlIHdvdW5kZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhleSBoYWQgdGh1cyBjbGVhcmVkIHRoZSBmb3J1bSBvZiB0aGVpciBvcHBvbmVudHMsIHRoZXkgcGFzc2VkIHRoZSBsYXcgY29uY2VybmluZyB0aGUgZGlzdHJpYnV0aW9uIG9mIGxhbmRzOyBhbmQgdGhlIHBlb3BsZSwgY2F1Z2h0IGJ5IHRoaXMgYmFpdCwgYmVjYW1lIHRhbWUgYXQgb25jZSBpbiB0aGVpciBoYW5kcywgYW5kIHJlYWR5IHRvIHN1cHBvcnQgYW55IHByb2plY3QsIG5vdCBtZWRkbGluZyBhdCBhbGwsIGJ1dCBzaWxlbnRseSB2b3RpbmcgZm9yIHdoYXQgd2FzIHByb3Bvc2VkIHRvIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBQb21wZXkgZ290IHRob3NlIGVuYWN0bWVudHMgb2YgaGlzIHJhdGlmaWVkIHdoaWNoIEx1Y3VsbHVzIGNvbnRlc3RlZDsgQ2Flc2FyIHJlY2VpdmVkIHRoZSB0d28gR2F1bHMgYW5kIElsbHlyaWN1bSBmb3IgZml2ZSB5ZWFycywgdG9nZXRoZXIgd2l0aCBmb3VyIGNvbXBsZXRlIGxlZ2lvbnM7IGFuZCBpdCB3YXMgZGVjaWRlZCB0aGF0IHRoZSBjb25zdWxzIGZvciB0aGUgZW5zdWluZyB5ZWFyPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NTggQi5DLjwvbm90ZT4gc2hvdWxkIGJlIFBpc28sIHRoZSBmYXRoZXItaW4tbGF3IG9mIENhZXNhciwgYW5kIEdhYmluaXVzLCB3aG8gd2FzIHRoZSBtb3N0IGV4dHJhdmFnYW50IG9mIFBvbXBleSdzIGZsYXR0ZXJlcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgUG9tcGV5IGZpbGxlZCB0aGUgY2l0eSB3aXRoIHNvbGRpZXJzIGFuZCBjYXJyaWVkIGV2ZXJ5dGhpbmcgd2l0aCBhIGhpZ2ggaGFuZC4gQXMgQmlidWx1cyB0aGUgY29uc3VsIHdhcyBnb2luZyBkb3duIGludG8gdGhlIGZvcnVtIHdpdGggTHVjdWxsdXMgYW5kIENhdG8sIHRoZSBjcm93ZCBmZWxsIHVwb24gaGltIGFuZCBicm9rZSB0aGUgZmFzY2VzIG9mIGhpcyBsaWN0b3JzLCBhbmQgc29tZWJvZHkgdGhyZXcgYSBiYXNrZXQgb2Ygb3JkdXJlIGFsbCBvdmVyIHRoZSBoZWFkIG9mIEJpYnVsdXMgaGltc2VsZiwgYW5kIHR3byBvZiB0aGUgdHJpYnVuZXMgd2hvIHdlcmUgZXNjb3J0aW5nIGhpbSB3ZXJlIHdvdW5kZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['48.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhleSBoYWQgdGh1cyBjbGVhcmVkIHRoZSBmb3J1bSBvZiB0aGVpciBvcHBvbmVudHMsIHRoZXkgcGFzc2VkIHRoZSBsYXcgY29uY2VybmluZyB0aGUgZGlzdHJpYnV0aW9uIG9mIGxhbmRzOyBhbmQgdGhlIHBlb3BsZSwgY2F1Z2h0IGJ5IHRoaXMgYmFpdCwgYmVjYW1lIHRhbWUgYXQgb25jZSBpbiB0aGVpciBoYW5kcywgYW5kIHJlYWR5IHRvIHN1cHBvcnQgYW55IHByb2plY3QsIG5vdCBtZWRkbGluZyBhdCBhbGwsIGJ1dCBzaWxlbnRseSB2b3RpbmcgZm9yIHdoYXQgd2FzIHByb3Bvc2VkIHRvIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['48.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBQb21wZXkgZ290IHRob3NlIGVuYWN0bWVudHMgb2YgaGlzIHJhdGlmaWVkIHdoaWNoIEx1Y3VsbHVzIGNvbnRlc3RlZDsgQ2Flc2FyIHJlY2VpdmVkIHRoZSB0d28gR2F1bHMgYW5kIElsbHlyaWN1bSBmb3IgZml2ZSB5ZWFycywgdG9nZXRoZXIgd2l0aCBmb3VyIGNvbXBsZXRlIGxlZ2lvbnM7IGFuZCBpdCB3YXMgZGVjaWRlZCB0aGF0IHRoZSBjb25zdWxzIGZvciB0aGUgZW5zdWluZyB5ZWFyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj41OCBCLkMuPC9ub3RlPiBzaG91bGQgYmUgUGlzbywgdGhlIGZhdGhlci1pbi1sYXcgb2YgQ2Flc2FyLCBhbmQgR2FiaW5pdXMsIHdobyB3YXMgdGhlIG1vc3QgZXh0cmF2YWdhbnQgb2YgUG9tcGV5J3MgZmxhdHRlcmVycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgdGhpcyB3YXMgZ29pbmcgb24sIEJpYnVsdXMgc2h1dCBoaW1zZWxmIHVwIGluIGhpcyBob3VzZSBhbmQgZm9yIHRoZSBlaWdodCBtb250aHMgcmVtYWluaW5nIG9mIGhpcyBjb25zdWxzaGlwIGRpZCBub3QgYXBwZWFyIGluIHB1YmxpYywgYnV0IGlzc3VlZCBlZGljdHMgd2hpY2ggd2VyZSBmdWxsIG9mIGFjY3VzYXRpb25zIGFuZCBzbGFuZGVycyBhZ2FpbnN0IFBvbXBleSBhbmQgQ2Flc2FyOyBDYXRvLCBhcyB0aG91Z2ggaW5zcGlyZWQgYW5kIHBvc3Nlc3NlZCBieSBhIHNwaXJpdCBvZiBwcm9waGVjeSwgZm9yZXRvbGQgaW4gdGhlIHNlbmF0ZSB3aGF0IHRoZSBmdXR1cmUgd291bGQgYnJpbmcgdG8gdGhlIGNpdHkgYW5kIHRvIFBvbXBleTsgd2hpbGUgTHVjdWxsdXMgcmVub3VuY2VkIHRoZSBzdHJ1Z2dsZSBhbmQgbGVkIGEgbGlmZSBvZiBlYXNlLCBvbiB0aGUgcGxlYSB0aGF0IGhlIHdhcyBwYXN0IHRoZSBhZ2UgZm9yIHBvbGl0aWNhbCBhZmZhaXJzOyB3aGVyZWF0IFBvbXBleSByZW1hcmtlZCB0aGF0IGZvciBhbiBvbGQgbWFuIGx1eHVyaW91cyBsaXZpbmcgd2FzIG1vcmUgdW5zZWFzb25hYmxlIHRoYW4gcG9saXRpY2FsIGFjdGl2aXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBQb21wZXkgaGltc2VsZiBhbHNvIHNvb24gZ2F2ZSB3YXkgd2Vha2x5IHRvIGhpcyBwYXNzaW9uIGZvciBoaXMgeW91bmcgd2lmZSwgZGV2b3RlZCBoaW1zZWxmIGZvciB0aGUgbW9zdCBwYXJ0IHRvIGhlciwgc3BlbnQgaGlzIHRpbWUgd2l0aCBoZXIgaW4gdmlsbGFzIGFuZCBnYXJkZW5zLCBhbmQgbmVnbGVjdGVkIHdoYXQgd2FzIGdvaW5nIG9uIGluIHRoZSBmb3J1bSwgc28gdGhhdCBldmVuIENsb2RpdXMsIHdobyB3YXMgdGhlbiBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgZGVzcGlzZWQgaGltIGFuZCBlbmdhZ2VkIGluIG1vc3QgZGFyaW5nIG1lYXN1cmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYWZ0ZXIgaGUgaGFkIGRyaXZlbiBDaWNlcm8gaW50byBiYW5pc2htZW50LCBhbmQgc2VudCBDYXRvIG9mZiB0byBDeXBydXMgdW5kZXIgcHJldGVuY2Ugb2YgZ2l2aW5nIGhpbSBtaWxpdGFyeSBjb21tYW5kLCBhbmQgQ2Flc2FyIHdhcyBnb25lIG9mZiB0byBHYXVsLCBhbmQgd2hlbiBoZSBzYXcgdGhhdCB0aGUgcGVvcGxlIHdlcmUgZGV2b3RlZCB0byBoaW0gYmVjYXVzZSBhbGwgaGlzIHBvbGl0aWNhbCBtZWFzdXJlcyB3ZXJlIHVuZGVydGFrZW4gdG8gcGxlYXNlIHRoZW0sIGhlIHN0cmFpZ2h0d2F5IGF0dGVtcHRlZCB0byByZXBlYWwgc29tZSBvZiB0aGUgYXJyYW5nZW1lbnRzIHdoaWNoIFBvbXBleSBoYWQgbWFkZTsgaGUgdG9vayBhd2F5IGhpcyBwcmlzb25lciwgVGlncmFuZXMsIGFuZCBrZXB0IGhpbSBhYm91dCBoaXMgb3duIHBlcnNvbjsgYW5kIGhlIHByb3NlY3V0ZWQgc29tZSBvZiBoaXMgZnJpZW5kcywgbWFraW5nIGEgdGVzdCBvZiB0aGUgcG93ZXIgb2YgUG9tcGV5IGJ5IGhpcyBwcm9jZWVkaW5ncyBhZ2FpbnN0IHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCB3aGVuIFBvbXBleSBhcHBlYXJlZCBhdCBhIHB1YmxpYyB0cmlhbCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgdHJpYWwgb2YgTWlsbywgaW4gNTYgQi5DLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuQy4gMzkuMTkiPkRpbyBDYXNzaXVzLCB4eHhpeC4gMTkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IENsb2RpdXMsIGhhdmluZyBhdCBoaXMgYmVjayBhbmQgY2FsbCBhIHJhYmJsZSBvZiB0aGUgbGV3ZGVzdCBhbmQgbW9zdCBhcnJvZ2FudCBydWZmaWFucywgc3RhdGlvbmVkIGhpbXNlbGYgaW4gYSBjb25zcGljdW91cyBwbGFjZSBhbmQgcHV0IHRvIHRoZW0gc3VjaCBxdWVzdGlvbnMgYXMgdGhlc2U6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hvIGlzIGEgbGljZW50aW91cyBpbXBlcmF0b3I/PC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBtYW4gc2Vla3MgZm9yIGEgbWFuPzwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldobyBzY3JhdGNoZXMgaGlzIGhlYWQgd2l0aCBvbmUgZmluZ2VyPzwvcT4gQW5kIHRoZXksIGxpa2UgYSBjaG9ydXMgdHJhaW5lZCBpbiByZXNwb25zaXZlIHNvbmcsIGFzIGhlIHNob29rIGhpcyB0b2dhLCB3b3VsZCBhbnN3ZXIgZWFjaCBxdWVzdGlvbiBieSBzaG91dGluZyBvdXQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Qb21wZXkuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['48.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHRoaXMgd2FzIGdvaW5nIG9uLCBCaWJ1bHVzIHNodXQgaGltc2VsZiB1cCBpbiBoaXMgaG91c2UgYW5kIGZvciB0aGUgZWlnaHQgbW9udGhzIHJlbWFpbmluZyBvZiBoaXMgY29uc3Vsc2hpcCBkaWQgbm90IGFwcGVhciBpbiBwdWJsaWMsIGJ1dCBpc3N1ZWQgZWRpY3RzIHdoaWNoIHdlcmUgZnVsbCBvZiBhY2N1c2F0aW9ucyBhbmQgc2xhbmRlcnMgYWdhaW5zdCBQb21wZXkgYW5kIENhZXNhcjsgQ2F0bywgYXMgdGhvdWdoIGluc3BpcmVkIGFuZCBwb3NzZXNzZWQgYnkgYSBzcGlyaXQgb2YgcHJvcGhlY3ksIGZvcmV0b2xkIGluIHRoZSBzZW5hdGUgd2hhdCB0aGUgZnV0dXJlIHdvdWxkIGJyaW5nIHRvIHRoZSBjaXR5IGFuZCB0byBQb21wZXk7IHdoaWxlIEx1Y3VsbHVzIHJlbm91bmNlZCB0aGUgc3RydWdnbGUgYW5kIGxlZCBhIGxpZmUgb2YgZWFzZSwgb24gdGhlIHBsZWEgdGhhdCBoZSB3YXMgcGFzdCB0aGUgYWdlIGZvciBwb2xpdGljYWwgYWZmYWlyczsgd2hlcmVhdCBQb21wZXkgcmVtYXJrZWQgdGhhdCBmb3IgYW4gb2xkIG1hbiBsdXh1cmlvdXMgbGl2aW5nIHdhcyBtb3JlIHVuc2Vhc29uYWJsZSB0aGFuIHBvbGl0aWNhbCBhY3Rpdml0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['48.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIFBvbXBleSBoaW1zZWxmIGFsc28gc29vbiBnYXZlIHdheSB3ZWFrbHkgdG8gaGlzIHBhc3Npb24gZm9yIGhpcyB5b3VuZyB3aWZlLCBkZXZvdGVkIGhpbXNlbGYgZm9yIHRoZSBtb3N0IHBhcnQgdG8gaGVyLCBzcGVudCBoaXMgdGltZSB3aXRoIGhlciBpbiB2aWxsYXMgYW5kIGdhcmRlbnMsIGFuZCBuZWdsZWN0ZWQgd2hhdCB3YXMgZ29pbmcgb24gaW4gdGhlIGZvcnVtLCBzbyB0aGF0IGV2ZW4gQ2xvZGl1cywgd2hvIHdhcyB0aGVuIGEgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBkZXNwaXNlZCBoaW0gYW5kIGVuZ2FnZWQgaW4gbW9zdCBkYXJpbmcgbWVhc3VyZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['48.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciBoZSBoYWQgZHJpdmVuIENpY2VybyBpbnRvIGJhbmlzaG1lbnQsIGFuZCBzZW50IENhdG8gb2ZmIHRvIEN5cHJ1cyB1bmRlciBwcmV0ZW5jZSBvZiBnaXZpbmcgaGltIG1pbGl0YXJ5IGNvbW1hbmQsIGFuZCBDYWVzYXIgd2FzIGdvbmUgb2ZmIHRvIEdhdWwsIGFuZCB3aGVuIGhlIHNhdyB0aGF0IHRoZSBwZW9wbGUgd2VyZSBkZXZvdGVkIHRvIGhpbSBiZWNhdXNlIGFsbCBoaXMgcG9saXRpY2FsIG1lYXN1cmVzIHdlcmUgdW5kZXJ0YWtlbiB0byBwbGVhc2UgdGhlbSwgaGUgc3RyYWlnaHR3YXkgYXR0ZW1wdGVkIHRvIHJlcGVhbCBzb21lIG9mIHRoZSBhcnJhbmdlbWVudHMgd2hpY2ggUG9tcGV5IGhhZCBtYWRlOyBoZSB0b29rIGF3YXkgaGlzIHByaXNvbmVyLCBUaWdyYW5lcywgYW5kIGtlcHQgaGltIGFib3V0IGhpcyBvd24gcGVyc29uOyBhbmQgaGUgcHJvc2VjdXRlZCBzb21lIG9mIGhpcyBmcmllbmRzLCBtYWtpbmcgYSB0ZXN0IG9mIHRoZSBwb3dlciBvZiBQb21wZXkgYnkgaGlzIHByb2NlZWRpbmdzIGFnYWluc3QgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['48.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCB3aGVuIFBvbXBleSBhcHBlYXJlZCBhdCBhIHB1YmxpYyB0cmlhbCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSB0cmlhbCBvZiBNaWxvLCBpbiA1NiBCLkMuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkMuIDM5LjE5Ij5EaW8gQ2Fzc2l1cywgeHh4aXguIDE5LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBDbG9kaXVzLCBoYXZpbmcgYXQgaGlzIGJlY2sgYW5kIGNhbGwgYSByYWJibGUgb2YgdGhlIGxld2Rlc3QgYW5kIG1vc3QgYXJyb2dhbnQgcnVmZmlhbnMsIHN0YXRpb25lZCBoaW1zZWxmIGluIGEgY29uc3BpY3VvdXMgcGxhY2UgYW5kIHB1dCB0byB0aGVtIHN1Y2ggcXVlc3Rpb25zIGFzIHRoZXNlOiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuQy4gMzkuMTkiPkRpbyBDYXNzaXVzLCB4eHhpeC4gMTkuPC9iaWJsPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldobyBpcyBhIGxpY2VudGlvdXMgaW1wZXJhdG9yPzwvcT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBtYW4gc2Vla3MgZm9yIGEgbWFuPzwvcT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hvIHNjcmF0Y2hlcyBoaXMgaGVhZCB3aXRoIG9uZSBmaW5nZXI/PC9xPiBBbmQgdGhleSwgbGlrZSBhIGNob3J1cyB0cmFpbmVkIGluIHJlc3BvbnNpdmUgc29uZywgYXMgaGUgc2hvb2sgaGlzIHRvZ2EsIHdvdWxkIGFuc3dlciBlYWNoIHF1ZXN0aW9uIGJ5IHNob3V0aW5nIG91dCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UG9tcGV5LjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2YgY291cnNlIHRoaXMgYWxzbyB3YXMgYW5ub3lpbmcgdG8gUG9tcGV5LCB3aG8gd2FzIG5vdCBhY2N1c3RvbWVkIHRvIHZpbGlmaWNhdGlvbiBhbmQgd2FzIGluZXhwZXJpZW5jZWQgaW4gdGhpcyBzb3J0IG9mIHdhcmZhcmU7IGJ1dCBoZSB3YXMgbW9yZSBkaXN0cmVzc2VkIHdoZW4gaGUgcGVyY2VpdmVkIHRoYXQgdGhlIHNlbmF0ZSB3YXMgZGVsaWdodGVkIHRvIHNlZSBoaW0gaW5zdWx0ZWQgYW5kIHBheWluZyBhIHBlbmFsdHkgZm9yIGhpcyBiZXRyYXlhbCBvZiBDaWNlcm8uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIGl0IGhhZCBjb21lIHRvIGJsb3dzIGFuZCBldmVuIHdvdW5kcyBpbiB0aGUgZm9ydW0gYW5kIGEgc2VydmFudCBvZiBDbG9kaXVzLCBzdGVhbGluZyBhbG9uZyB0aHJvdWdoIHRoZSBjcm93ZCBvZiBieXN0YW5kZXJzIHRvd2FyZHMgUG9tcGV5LCB3YXMgZm91bmQgdG8gaGF2ZSBhIHN3b3JkIGluIGhpcyBoYW5kLCBQb21wZXkgbWFkZSB0aGlzIGhpcyBleGN1c2UsIGFsdGhvdWdoIGhlIHdhcyBhbHNvIGFmcmFpZCBvZiB0aGUgaW5zb2xlbnQgYWJ1c2Ugb2YgQ2xvZGl1cywgYW5kIGNhbWUgbm8gbW9yZSBpbnRvIHRoZSBmb3J1bSBhcyBsb25nIGFzIENsb2RpdXMgd2FzIHRyaWJ1bmUsIGJ1dCBrZXB0IGhpbXNlbGYgY29udGludWFsbHkgYXQgaG9tZSwgd2hlcmUgaGUgd2FzIGV2ZXIgZGViYXRpbmcgd2l0aCBoaXMgZnJpZW5kcyBob3cgaGUgbWlnaHQgYXBwZWFzZSB0aGUgYW5nZXIgb2YgdGhlIHNlbmF0ZSBhbmQgdGhlIG5vYmlsaXR5IGFnYWluc3QgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UbyBDdWxsZW8sIGhvd2V2ZXIsIHdobyB1cmdlZCBoaW0gdG8gZGl2b3JjZSBKdWxpYSBhbmQgZXhjaGFuZ2UgdGhlIGZyaWVuZHNoaXAgb2YgQ2Flc2FyIGZvciB0aGF0IG9mIHRoZSBzZW5hdGUsIGhlIHdvdWxkIG5vdCBsaXN0ZW4sIGJ1dCBoZSB5aWVsZGVkIHRvIHRoZSBhcmd1bWVudHMgb2YgdGhvc2Ugd2hvIHRob3VnaHQgaGUgb3VnaHQgdG8gYnJpbmcgQ2ljZXJvIGJhY2ssIHdobyB3YXMgdGhlIGdyZWF0ZXN0IGVuZW15IG9mIENsb2RpdXMgYW5kIG1vc3QgYmVsb3ZlZCBpbiB0aGUgc2VuYXRlLCBhbmQgaGUgZXNjb3J0ZWQgQ2ljZXJvJ3MgYnJvdGhlciwgd2hvIHdhcyBhIHBldGl0aW9uZXIgZm9yIGhpcyByZXR1cm4sIHdpdGggYSBsYXJnZSBmb3JjZSBpbnRvIHRoZSBmb3J1bSwgd2hlcmUsIHRob3VnaCBzb21lIHdlcmUgd291bmRlZCBhbmQgc29tZSBraWxsZWQsIGhlIG5ldmVydGhlbGVzcyBnb3QgdGhlIGJldHRlciBvZiBDbG9kaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBDaWNlcm8gcmV0dXJuZWQgdG8gdGhlIGNpdHk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA1NyBCLkMuPC9ub3RlPiBieSB2aXJ0dWUgb2YgdGhlIGxhdyB0aGVuIHBhc3NlZCwgaGUgaW1tZWRpYXRlbHkgcmVjb25jaWxlZCBQb21wZXkgdG8gdGhlIHNlbmF0ZSwgYW5kIGJ5IGhpcyBhZHZvY2FjeSBvZiB0aGUgY29ybiBsYXcgaGUgaW4gYSBtYW5uZXIgb25jZSBtb3JlIG1hZGUgUG9tcGV5IG1hc3RlciBvZiBhbGwgdGhlIGxhbmQgYW5kIHNlYSBpbiBSb21hbiBwb3NzZXNzaW9uLiBGb3IgdW5kZXIgaGlzIGRpcmVjdGlvbiB3ZXJlIHBsYWNlZCBoYXJib3VycywgdHJhZGluZy1wbGFjZXMsIGRpc3RyaWJ1dGlvbnMgb2YgY3JvcHMs4oCUaW4gYSB3b3JkLCBuYXZpZ2F0aW9uIGFuZCBhZ3JpY3VsdHVyZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgbGF3IG1hZGUgUG9tcGV5IDxmb3JlaWduIGxhbmc9ImxhIj5QcmFlZmVjdHVzIEFubm9uYWU8L2ZvcmVpZ24+IGZvciBmaXZlIHllYXJzLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5DbG9kaXVzIGFsbGVnZWQgdGhhdCB0aGUgbGF3IGhhZCBub3QgYmVlbiBwcm9wb3NlZCBvbiBhY2NvdW50IG9mIHRoZSBzY2FyY2l0eSBvZiBncmFpbiwgYnV0IHRoZSBzY2FyY2l0eSBvZiBncmFpbiBoYWQgYXJpc2VuIGluIG9yZGVyIHRoYXQgdGhlIGxhdyBtaWdodCBiZSBwcm9wb3NlZCwgYSBsYXcgd2hlcmVieSB0aGUgcG93ZXIgb2YgUG9tcGV5LCB3aGljaCB3YXMgd2l0aGVyaW5nIGF3YXksIGFzIGl0IHdlcmUsIGluIGNvbnNlcXVlbmNlIG9mIGhpcyBmYWlsaW5nIHNwaXJpdHMsIG1pZ2h0IGJlIHJla2luZGxlZCBhZ2FpbiBhbmQgcmVjb3ZlcmVkIGluIGEgbmV3IG9mZmljZS4gQnV0IG90aGVycyBkZWNsYXJlIHRoYXQgdGhpcyB3YXMgYSBkZXZpY2Ugb2YgdGhlIGNvbnN1bCBTcGludGhlciwgd2hvc2UgYWltIHdhcyB0byBjb25maW5lIFBvbXBleSBpbiBhIGhpZ2hlciBvZmZpY2UsIGluIG9yZGVyIHRoYXQgaGUgaGltc2VsZiBtaWdodCBiZSBzZW50IG91dCB0byBhaWQgS2luZyBQdG9sZW15Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlB0b2xlbXkgaGFkIHRha2VuIHJlZnVnZSBmcm9tIGhpcyBkaXNzYXRpc2ZpZWQgc3ViamVjdHMgaW4gUm9tZSwgYW5kIHdpc2hlZCB0byBiZSByZXN0b3JlZC4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkMuIDM5LjEyIj5EaW8gQ2Fzc2l1cywgeHh4aXguIDEyLTE3PC9iaWJsPi4gSGUgaXMgcmVmZXJyZWQgdG8gYWdhaW4gaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDc2LjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgbHh4dmkuIDU8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBDYW5pZGl1cywgYXMgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBicm91Z2h0IGluIGEgbGF3IHByb3ZpZGluZyB0aGF0IFBvbXBleSwgd2l0aG91dCBhbiBhcm15LCBhbmQgd2l0aCB0d28gbGljdG9ycyBvbmx5LCBzaG91bGQgZ28gb3V0IGFzIGEgbWVkaXRhdG9yIGJldHdlZW4gdGhlIGtpbmcgYW5kIHRoZSBwZW9wbGUgb2YgQWxleGFuZHJpYS4gUG9tcGV5IHdhcyB0aG91Z2h0IHRvIHJlZ2FyZCB0aGUgbGF3IHdpdGggbm8gZGlzZmF2b3VyLCBidXQgdGhlIHNlbmF0ZSByZWplY3RlZCBpdCwgb24gdGhlIHBsYXVzaWJsZSBwcmV0ZW5jZSB0aGF0IGl0IGZlYXJlZCBmb3IgaGlzIHNhZmV0eS4gQmVzaWRlcywgd3JpdGluZ3Mgd2VyZSB0byBiZSBmb3VuZCBzY2F0dGVyZWQgYWJvdXQgdGhlIGZvcnVtIGFuZCBuZWFyIHRoZSBzZW5hdGUtaG91c2UsIHN0YXRpbmcgdGhhdCBpdCB3YXMgUHRvbGVteSdzIHdpc2ggdG8gaGF2ZSBQb21wZXkgZ2l2ZW4gdG8gaGltIGFzIGEgY29tbWFuZGVyIGluc3RlYWQgb2YgU3BpbnRoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBUaW1hZ2VuZXMgYWN0dWFsbHkgc2F5cyB0aGF0IFB0b2xlbXkgbGVmdCBob21lIHdpdGhvdXQgc3VmZmljaWVudCByZWFzb24gYW5kIHVuZGVyIG5vIG5lY2Vzc2l0eSwgYW5kIHRoYXQgaGlzIGFiYW5kb25tZW50IG9mIEVneXB0IHdhcyBvd2luZyB0byB0aGUgcGVyc3Vhc2lvbnMgb2YgVGhlb3BoYW5lcywgd2hvIHdhcyBhaW1pbmcgdG8gZ2l2ZSBQb21wZXkgcHJvZml0YWJsZSBvY2N1cGF0aW9uIGluIHRoZSBob2xkaW5nIG9mIGEgbmV3IGNvbW1hbmQuIEJ1dCB0aGlzIGlzIG5vdCBtYWRlIGNyZWRpYmxlIGJ5IHRoZSBiYXNlbmVzcyBvZiBUaGVvcGhhbmVzIGFzIG11Y2ggYXMgaXQgaXMgbWFkZSBpbmNyZWRpYmxlIGJ5IHRoZSBuYXR1cmUgb2YgUG9tcGV5LCBpbiB3aGljaCBhbWJpdGlvbiB3YXMgbm90IG9mIHN1Y2ggYSBtZWFuIGFuZCBiYXNlIG9yZGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['49.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2YgY291cnNlIHRoaXMgYWxzbyB3YXMgYW5ub3lpbmcgdG8gUG9tcGV5LCB3aG8gd2FzIG5vdCBhY2N1c3RvbWVkIHRvIHZpbGlmaWNhdGlvbiBhbmQgd2FzIGluZXhwZXJpZW5jZWQgaW4gdGhpcyBzb3J0IG9mIHdhcmZhcmU7IGJ1dCBoZSB3YXMgbW9yZSBkaXN0cmVzc2VkIHdoZW4gaGUgcGVyY2VpdmVkIHRoYXQgdGhlIHNlbmF0ZSB3YXMgZGVsaWdodGVkIHRvIHNlZSBoaW0gaW5zdWx0ZWQgYW5kIHBheWluZyBhIHBlbmFsdHkgZm9yIGhpcyBiZXRyYXlhbCBvZiBDaWNlcm8uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['49.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIGl0IGhhZCBjb21lIHRvIGJsb3dzIGFuZCBldmVuIHdvdW5kcyBpbiB0aGUgZm9ydW0gYW5kIGEgc2VydmFudCBvZiBDbG9kaXVzLCBzdGVhbGluZyBhbG9uZyB0aHJvdWdoIHRoZSBjcm93ZCBvZiBieXN0YW5kZXJzIHRvd2FyZHMgUG9tcGV5LCB3YXMgZm91bmQgdG8gaGF2ZSBhIHN3b3JkIGluIGhpcyBoYW5kLCBQb21wZXkgbWFkZSB0aGlzIGhpcyBleGN1c2UsIGFsdGhvdWdoIGhlIHdhcyBhbHNvIGFmcmFpZCBvZiB0aGUgaW5zb2xlbnQgYWJ1c2Ugb2YgQ2xvZGl1cywgYW5kIGNhbWUgbm8gbW9yZSBpbnRvIHRoZSBmb3J1bSBhcyBsb25nIGFzIENsb2RpdXMgd2FzIHRyaWJ1bmUsIGJ1dCBrZXB0IGhpbXNlbGYgY29udGludWFsbHkgYXQgaG9tZSwgd2hlcmUgaGUgd2FzIGV2ZXIgZGViYXRpbmcgd2l0aCBoaXMgZnJpZW5kcyBob3cgaGUgbWlnaHQgYXBwZWFzZSB0aGUgYW5nZXIgb2YgdGhlIHNlbmF0ZSBhbmQgdGhlIG5vYmlsaXR5IGFnYWluc3QgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['49.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvIEN1bGxlbywgaG93ZXZlciwgd2hvIHVyZ2VkIGhpbSB0byBkaXZvcmNlIEp1bGlhIGFuZCBleGNoYW5nZSB0aGUgZnJpZW5kc2hpcCBvZiBDYWVzYXIgZm9yIHRoYXQgb2YgdGhlIHNlbmF0ZSwgaGUgd291bGQgbm90IGxpc3RlbiwgYnV0IGhlIHlpZWxkZWQgdG8gdGhlIGFyZ3VtZW50cyBvZiB0aG9zZSB3aG8gdGhvdWdodCBoZSBvdWdodCB0byBicmluZyBDaWNlcm8gYmFjaywgd2hvIHdhcyB0aGUgZ3JlYXRlc3QgZW5lbXkgb2YgQ2xvZGl1cyBhbmQgbW9zdCBiZWxvdmVkIGluIHRoZSBzZW5hdGUsIGFuZCBoZSBlc2NvcnRlZCBDaWNlcm8ncyBicm90aGVyLCB3aG8gd2FzIGEgcGV0aXRpb25lciBmb3IgaGlzIHJldHVybiwgd2l0aCBhIGxhcmdlIGZvcmNlIGludG8gdGhlIGZvcnVtLCB3aGVyZSwgdGhvdWdoIHNvbWUgd2VyZSB3b3VuZGVkIGFuZCBzb21lIGtpbGxlZCwgaGUgbmV2ZXJ0aGVsZXNzIGdvdCB0aGUgYmV0dGVyIG9mIENsb2RpdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['49.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIENpY2VybyByZXR1cm5lZCB0byB0aGUgY2l0eTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNTcgQi5DLjwvbm90ZT4gYnkgdmlydHVlIG9mIHRoZSBsYXcgdGhlbiBwYXNzZWQsIGhlIGltbWVkaWF0ZWx5IHJlY29uY2lsZWQgUG9tcGV5IHRvIHRoZSBzZW5hdGUsIGFuZCBieSBoaXMgYWR2b2NhY3kgb2YgdGhlIGNvcm4gbGF3IGhlIGluIGEgbWFubmVyIG9uY2UgbW9yZSBtYWRlIFBvbXBleSBtYXN0ZXIgb2YgYWxsIHRoZSBsYW5kIGFuZCBzZWEgaW4gUm9tYW4gcG9zc2Vzc2lvbi4gRm9yIHVuZGVyIGhpcyBkaXJlY3Rpb24gd2VyZSBwbGFjZWQgaGFyYm91cnMsIHRyYWRpbmctcGxhY2VzLCBkaXN0cmlidXRpb25zIG9mIGNyb3BzLOKAlGluIGEgd29yZCwgbmF2aWdhdGlvbiBhbmQgYWdyaWN1bHR1cmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgbGF3IG1hZGUgUG9tcGV5IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlByYWVmZWN0dXMgQW5ub25hZTwvZm9yZWlnbj4gZm9yIGZpdmUgeWVhcnMuPC9ub3RlPiAKCQkJCSAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UHJhZWZlY3R1cyBBbm5vbmFlPC9mb3JlaWduPiBmb3IgZml2ZSB5ZWFycy48L3RyYW5zbGF0aW9uPg=="
translation['49.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNsb2RpdXMgYWxsZWdlZCB0aGF0IHRoZSBsYXcgaGFkIG5vdCBiZWVuIHByb3Bvc2VkIG9uIGFjY291bnQgb2YgdGhlIHNjYXJjaXR5IG9mIGdyYWluLCBidXQgdGhlIHNjYXJjaXR5IG9mIGdyYWluIGhhZCBhcmlzZW4gaW4gb3JkZXIgdGhhdCB0aGUgbGF3IG1pZ2h0IGJlIHByb3Bvc2VkLCBhIGxhdyB3aGVyZWJ5IHRoZSBwb3dlciBvZiBQb21wZXksIHdoaWNoIHdhcyB3aXRoZXJpbmcgYXdheSwgYXMgaXQgd2VyZSwgaW4gY29uc2VxdWVuY2Ugb2YgaGlzIGZhaWxpbmcgc3Bpcml0cywgbWlnaHQgYmUgcmVraW5kbGVkIGFnYWluIGFuZCByZWNvdmVyZWQgaW4gYSBuZXcgb2ZmaWNlLiBCdXQgb3RoZXJzIGRlY2xhcmUgdGhhdCB0aGlzIHdhcyBhIGRldmljZSBvZiB0aGUgY29uc3VsIFNwaW50aGVyLCB3aG9zZSBhaW0gd2FzIHRvIGNvbmZpbmUgUG9tcGV5IGluIGEgaGlnaGVyIG9mZmljZSwgaW4gb3JkZXIgdGhhdCBoZSBoaW1zZWxmIG1pZ2h0IGJlIHNlbnQgb3V0IHRvIGFpZCBLaW5nIFB0b2xlbXkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QdG9sZW15IGhhZCB0YWtlbiByZWZ1Z2UgZnJvbSBoaXMgZGlzc2F0aXNmaWVkIHN1YmplY3RzIGluIFJvbWUsIGFuZCB3aXNoZWQgdG8gYmUgcmVzdG9yZWQuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkMuIDM5LjEyIj5EaW8gQ2Fzc2l1cywgeHh4aXguIDEyLTE3PC9iaWJsPi4gSGUgaXMgcmVmZXJyZWQgdG8gYWdhaW4gaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNzYuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciBseHh2aS4gNTwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiAzOS4xMiI+RGlvIENhc3NpdXMsIHh4eGl4LiAxMi0xNzwvYmlibD4uIEhlIGlzIHJlZmVycmVkIHRvIGFnYWluIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDc2LjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgbHh4dmkuIDU8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['49.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIENhbmlkaXVzLCBhcyB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGJyb3VnaHQgaW4gYSBsYXcgcHJvdmlkaW5nIHRoYXQgUG9tcGV5LCB3aXRob3V0IGFuIGFybXksIGFuZCB3aXRoIHR3byBsaWN0b3JzIG9ubHksIHNob3VsZCBnbyBvdXQgYXMgYSBtZWRpdGF0b3IgYmV0d2VlbiB0aGUga2luZyBhbmQgdGhlIHBlb3BsZSBvZiBBbGV4YW5kcmlhLiBQb21wZXkgd2FzIHRob3VnaHQgdG8gcmVnYXJkIHRoZSBsYXcgd2l0aCBubyBkaXNmYXZvdXIsIGJ1dCB0aGUgc2VuYXRlIHJlamVjdGVkIGl0LCBvbiB0aGUgcGxhdXNpYmxlIHByZXRlbmNlIHRoYXQgaXQgZmVhcmVkIGZvciBoaXMgc2FmZXR5LiBCZXNpZGVzLCB3cml0aW5ncyB3ZXJlIHRvIGJlIGZvdW5kIHNjYXR0ZXJlZCBhYm91dCB0aGUgZm9ydW0gYW5kIG5lYXIgdGhlIHNlbmF0ZS1ob3VzZSwgc3RhdGluZyB0aGF0IGl0IHdhcyBQdG9sZW15J3Mgd2lzaCB0byBoYXZlIFBvbXBleSBnaXZlbiB0byBoaW0gYXMgYSBjb21tYW5kZXIgaW5zdGVhZCBvZiBTcGludGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['49.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBUaW1hZ2VuZXMgYWN0dWFsbHkgc2F5cyB0aGF0IFB0b2xlbXkgbGVmdCBob21lIHdpdGhvdXQgc3VmZmljaWVudCByZWFzb24gYW5kIHVuZGVyIG5vIG5lY2Vzc2l0eSwgYW5kIHRoYXQgaGlzIGFiYW5kb25tZW50IG9mIEVneXB0IHdhcyBvd2luZyB0byB0aGUgcGVyc3Vhc2lvbnMgb2YgVGhlb3BoYW5lcywgd2hvIHdhcyBhaW1pbmcgdG8gZ2l2ZSBQb21wZXkgcHJvZml0YWJsZSBvY2N1cGF0aW9uIGluIHRoZSBob2xkaW5nIG9mIGEgbmV3IGNvbW1hbmQuIEJ1dCB0aGlzIGlzIG5vdCBtYWRlIGNyZWRpYmxlIGJ5IHRoZSBiYXNlbmVzcyBvZiBUaGVvcGhhbmVzIGFzIG11Y2ggYXMgaXQgaXMgbWFkZSBpbmNyZWRpYmxlIGJ5IHRoZSBuYXR1cmUgb2YgUG9tcGV5LCBpbiB3aGljaCBhbWJpdGlvbiB3YXMgbm90IG9mIHN1Y2ggYSBtZWFuIGFuZCBiYXNlIG9yZGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgdGh1cyBiZWVuIHNldCBvdmVyIHRoZSBhZG1pbmlzdHJhdGlvbiBhbmQgbWFuYWdlbWVudCBvZiB0aGUgZ3JhaW4gdHJhZGUsIFBvbXBleSBzZW50IG91dCBoaXMgYWdlbnRzIGFuZCBmcmllbmRzIGluIHZhcmlvdXMgZGlyZWN0aW9ucywgd2hpbGUgaGUgaGltc2VsZiBzYWlsZWQgdG8gU2ljaWx5LCBTYXJkaW5pYSBhbmQgQWZyaWNhLCBhbmQgY29sbGVjdGVkIGdyYWluLiBXaGVuIGhlIHdhcyBhYm91dCB0byBzZXQgc2FpbCB3aXRoIGl0LCB0aGVyZSB3YXMgYSB2aW9sZW50IHN0b3JtIGF0IHNlYSwgYW5kIHRoZSBzaGlwLWNhcHRhaW5zIGhlc2l0YXRlZCB0byBwdXQgb3V0OyBidXQgaGUgbGVkIHRoZSB3YXkgb24gYm9hcmQgYW5kIG9yZGVyZWQgdGhlbSB0byB3ZWlnaCBhbmNob3IsIGNyeWluZyB3aXRoIGEgbG91ZCB2b2ljZTogCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRvIHNhaWwgaXMgbmVjZXNzYXJ5OyB0byBsaXZlIGlzIG5vdC48L3E+IEJ5IHRoaXMgZXhlcmNpc2Ugb2YgemVhbCBhbmQgY291cmFnZSBhdHRlbmRlZCBieSBnb29kIGZvcnR1bmUsIGhlIGZpbGxlZCB0aGUgc2VhIHdpdGggc2hpcHMgYW5kIHRoZSBtYXJrZXRzIHdpdGggZ3JhaW4sIHNvIHRoYXQgdGhlIGV4Y2VzcyBvZiB3aGF0IGhlIGhhZCBwcm92aWRlZCBzdWZmaWNlZCBhbHNvIGZvciBmb3JlaWduIHBlb3BsZXMsIGFuZCB0aGVyZSB3YXMgYW4gYWJ1bmRhbnQgb3ZlcmZsb3csIGFzIGZyb20gYSBzcHJpbmcsIGZvciBhbGwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['50.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIHRodXMgYmVlbiBzZXQgb3ZlciB0aGUgYWRtaW5pc3RyYXRpb24gYW5kIG1hbmFnZW1lbnQgb2YgdGhlIGdyYWluIHRyYWRlLCBQb21wZXkgc2VudCBvdXQgaGlzIGFnZW50cyBhbmQgZnJpZW5kcyBpbiB2YXJpb3VzIGRpcmVjdGlvbnMsIHdoaWxlIGhlIGhpbXNlbGYgc2FpbGVkIHRvIFNpY2lseSwgU2FyZGluaWEgYW5kIEFmcmljYSwgYW5kIGNvbGxlY3RlZCBncmFpbi4gV2hlbiBoZSB3YXMgYWJvdXQgdG8gc2V0IHNhaWwgd2l0aCBpdCwgdGhlcmUgd2FzIGEgdmlvbGVudCBzdG9ybSBhdCBzZWEsIGFuZCB0aGUgc2hpcC1jYXB0YWlucyBoZXNpdGF0ZWQgdG8gcHV0IG91dDsgYnV0IGhlIGxlZCB0aGUgd2F5IG9uIGJvYXJkIGFuZCBvcmRlcmVkIHRoZW0gdG8gd2VpZ2ggYW5jaG9yLCBjcnlpbmcgd2l0aCBhIGxvdWQgdm9pY2U6IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['50.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRvIHNhaWwgaXMgbmVjZXNzYXJ5OyB0byBsaXZlIGlzIG5vdC48L3E+IEJ5IHRoaXMgZXhlcmNpc2Ugb2YgemVhbCBhbmQgY291cmFnZSBhdHRlbmRlZCBieSBnb29kIGZvcnR1bmUsIGhlIGZpbGxlZCB0aGUgc2VhIHdpdGggc2hpcHMgYW5kIHRoZSBtYXJrZXRzIHdpdGggZ3JhaW4sIHNvIHRoYXQgdGhlIGV4Y2VzcyBvZiB3aGF0IGhlIGhhZCBwcm92aWRlZCBzdWZmaWNlZCBhbHNvIGZvciBmb3JlaWduIHBlb3BsZXMsIGFuZCB0aGVyZSB3YXMgYW4gYWJ1bmRhbnQgb3ZlcmZsb3csIGFzIGZyb20gYSBzcHJpbmcsIGZvciBhbGwuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSwgaGlzIEdhbGxpYyB3YXJzIHJhaXNlZCBDYWVzYXIgdG8gZ3JlYXRuZXNzOyBhbmQgdGhvdWdoIGhlIHdhcyB0aG91Z2h0IHRvIGJlIHZlcnkgZmFyIHJlbW92ZWQgZnJvbSBSb21lLCBhbmQgdG8gYmUgb2NjdXBpZWQgd2l0aCBCZWxnYWUsIFN1ZXZpLCBhbmQgQnJpdGFubmksIGhlIHNlY3JldGx5IGFuZCBjbGV2ZXJseSBjb250cml2ZWQgdG8gdGh3YXJ0IFBvbXBleSdzIGRlc2lnbnMgaW4gdGhlIGhlYXJ0IG9mIHRoZSBjaXR5IGFuZCBpbiB0aGUgbW9zdCBpbXBvcnRhbnQgbWF0dGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGhpbXNlbGYsIHdpdGggaGlzIG1pbGl0YXJ5IGZvcmNlIGNsb3RoaW5nIGhpbSBhcyB0aGUgYm9keSBkb2VzIHRoZSBzb3VsLCB3YXMgY2FyZWZ1bGx5IHRyYWluaW5nIGl0LCBub3QgYWdhaW5zdCB0aGUgQmFyYmFyaWFucyBtZXJlbHksIG5heSwgaGUgdXNlZCBpdHMgY29tYmF0cyB3aXRoIHRoZXNlIG9ubHkgdG8gZ2l2ZSBpdCBleGVyY2lzZSwgYXMgaWYgaW4gaHVudGluZyBhbmQgdGhlIGNoYXNlLOKAlGFuZCB3YXMgbWFraW5nIGl0IGludmluY2libGUgYW5kIHRlcnJpYmxlOyBidXQgYWxsIHRoZSB3aGlsZSBoZSB3YXMgc2VuZGluZyBiYWNrIHRvIFJvbWUgZ29sZCBhbmQgc2lsdmVyIGFuZCB0aGUgb3RoZXIgc3BvaWxzIGFuZCB0aGUgcmVzdCBvZiB0aGUgd2VhbHRoIHdoaWNoIGNhbWUgdG8gaGltIGluIGFidW5kYW5jZSBmcm9tIGhpcyBudW1lcm91cyB3YXJzLCBhbmQgYnkgdGVtcHRpbmcgcGVvcGxlIHdpdGggaGlzIGJyaWJlcywgYW5kIGNvbnRyaWJ1dGluZyB0byB0aGUgZXhwZW5zZXMgb2YgYWVkaWxlcywgcHJhZXRvcnMsIGNvbnN1bHMsIGFuZCB0aGVpciB3aXZlcywgaGUgd2FzIHdpbm5pbmcgbWFueSB0byBoaXMgc2lkZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIHdoZW4gaGUgY3Jvc3NlZCB0aGUgQWxwcyBhbmQgc3BlbnQgdGhlIHdpbnRlciBpbiBMdWNhLCBhIGdyZWF0IGNyb3dkIG9mIG9yZGluYXJ5IG1lbiBhbmQgd29tZW4gZ2F0aGVyZWQgdGhlcmUgaW4gZWFnZXIgaGFzdGUgdG8gc2VlIGhpbSwgd2hpbGUgdHdvIGh1bmRyZWQgbWVuIG9mIHNlbmF0b3JpYWwgcmFuaywgYW1vbmcgd2hvbSB3ZXJlIFBvbXBleSBhbmQgQ3Jhc3N1cywgYW5kIGEgaHVuZHJlZCBhbmQgdHdlbnR5IGZhc2NlcyBvZiBwcm9jb25zdWxzIGFuZCBwcmFldG9ycyB3ZXJlIHNlZW4gYXQgQ2Flc2FyJ3MgZG9vci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGlzIHdhcyBpbiA1NiBCLkMuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDIxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2Flc2FyPC90aXRsZT4sIGNoYXB0ZXIgeHhpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBmaWxsZWQgYWxsIHRoZSByZXN0IHdpdGggaG9wZXMgYW5kIGxvYWRlZCB0aGVtIHdpdGggbW9uZXksIGFuZCBzZW50IHRoZW0gYXdheTsgYnV0IGJldHdlZW4gaGltc2VsZiwgUG9tcGV5LCBhbmQgQ3Jhc3N1cyB0aGUgZm9sbG93aW5nIGNvbXBhY3Qgd2FzIG1hZGU6IHRoZXNlIHR3byB3ZXJlIHRvIHN0YW5kIGZvciB0aGUgY29uc3Vsc2hpcCwgYW5kIENhZXNhciB3YXMgdG8gYXNzaXN0IHRoZWlyIGNhbmRpZGFjeSBieSBzZW5kaW5nIGxhcmdlIG51bWJlcnMgb2YgaGlzIHNvbGRpZXJzIGhvbWUgdG8gdm90ZSBmb3IgdGhlbTsgYXMgc29vbiBhcyB0aGV5IHdlcmUgZWxlY3RlZCwgdGhleSB3ZXJlIHRvIHNlY3VyZSBmb3IgdGhlbXNlbHZlcyBjb21tYW5kcyBvZiBwcm92aW5jZXMgYW5kIGFybWllcywgYW5kIHRvIGNvbmZpcm0gQ2Flc2FyJ3MgcHJlc2VudCBwcm92aW5jZXMgdG8gaGltIGZvciBhbm90aGVyIHRlcm0gb2YgZml2ZSB5ZWFycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBhbGwgdGhpcyB3YXMgcHVibGljbHkga25vd24sIGl0IGdhdmUgZGlzcGxlYXN1cmUgdG8gdGhlIGNoaWVmIG1lbiBvZiB0aGUgc3RhdGUsIGFuZCBNYXJjZWxsaW51cyByb3NlIGluIHRoZSBhc3NlbWJseSBhbmQgYXNrZWQgUG9tcGV5IGFuZCBDcmFzc3VzIHRvIHRoZWlyIGZhY2VzIHdoZXRoZXIgdGhleSB3ZXJlIGdvaW5nIHRvIGJlIGNhbmRpZGF0ZXMgZm9yIHRoZSBjb25zdWxzaGlwLiBBcyB0aGUgbWFqb3JpdHkgb2YgdGhlIHBlb3BsZSBiYWRlIHRoZW0gYW5zd2VyLCBQb21wZXkgZGlkIHNvIGZpcnN0LCBhbmQgc2FpZCB0aGF0IHBlcmhhcHMgaGUgd291bGQgYmUgYSBjYW5kaWRhdGUsIGFuZCBwZXJoYXBzIGhlIHdvdWxkIG5vdDsgYnV0IENyYXNzdXMgZ2F2ZSBhIG1vcmUgcG9saXRpYyBhbnN3ZXIsIGZvciBoZSBzYWlkIGhlIHdvdWxkIHRha2Ugd2hpY2hldmVyIGNvdXJzZSBoZSB0aG91Z2h0IHdvdWxkIGJlIGZvciB0aGUgYWR2YW50YWdlIG9mIHRoZSBjb21tb24gd2VhbHRoLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNyYXNzdXM8L3RpdGxlPiwgeHYuIDEgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBNYXJjZWxsaW51cyBwZXJzaXN0ZWQgaW4gaGlzIGF0dGFjayB1cG9uIFBvbXBleSBhbmQgd2FzIHRob3VnaHQgdG8gYmUgbWFraW5nIGEgc3Ryb25nIHNwZWVjaCwgUG9tcGV5IHJlbWFya2VkIHRoYXQgTWFyY2VsbGludXMgd2FzIG9mIGFsbCBtZW4gbW9zdCB1bmp1c3QsIHNpbmNlIGhlIHdhcyBub3QgZ3JhdGVmdWwgdG8gaGltIGZvciBtYWtpbmcgaGltIGVsb3F1ZW50IGluc3RlYWQgb2Ygc3BlZWNobGVzcywgYW5kIGZ1bGwgdG8gdm9taXRpbmcgaW5zdGVhZCBvZiBmYW1pc2hlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['51.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlLCBoaXMgR2FsbGljIHdhcnMgcmFpc2VkIENhZXNhciB0byBncmVhdG5lc3M7IGFuZCB0aG91Z2ggaGUgd2FzIHRob3VnaHQgdG8gYmUgdmVyeSBmYXIgcmVtb3ZlZCBmcm9tIFJvbWUsIGFuZCB0byBiZSBvY2N1cGllZCB3aXRoIEJlbGdhZSwgU3VldmksIGFuZCBCcml0YW5uaSwgaGUgc2VjcmV0bHkgYW5kIGNsZXZlcmx5IGNvbnRyaXZlZCB0byB0aHdhcnQgUG9tcGV5J3MgZGVzaWducyBpbiB0aGUgaGVhcnQgb2YgdGhlIGNpdHkgYW5kIGluIHRoZSBtb3N0IGltcG9ydGFudCBtYXR0ZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['51.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoaW1zZWxmLCB3aXRoIGhpcyBtaWxpdGFyeSBmb3JjZSBjbG90aGluZyBoaW0gYXMgdGhlIGJvZHkgZG9lcyB0aGUgc291bCwgd2FzIGNhcmVmdWxseSB0cmFpbmluZyBpdCwgbm90IGFnYWluc3QgdGhlIEJhcmJhcmlhbnMgbWVyZWx5LCBuYXksIGhlIHVzZWQgaXRzIGNvbWJhdHMgd2l0aCB0aGVzZSBvbmx5IHRvIGdpdmUgaXQgZXhlcmNpc2UsIGFzIGlmIGluIGh1bnRpbmcgYW5kIHRoZSBjaGFzZSzigJRhbmQgd2FzIG1ha2luZyBpdCBpbnZpbmNpYmxlIGFuZCB0ZXJyaWJsZTsgYnV0IGFsbCB0aGUgd2hpbGUgaGUgd2FzIHNlbmRpbmcgYmFjayB0byBSb21lIGdvbGQgYW5kIHNpbHZlciBhbmQgdGhlIG90aGVyIHNwb2lscyBhbmQgdGhlIHJlc3Qgb2YgdGhlIHdlYWx0aCB3aGljaCBjYW1lIHRvIGhpbSBpbiBhYnVuZGFuY2UgZnJvbSBoaXMgbnVtZXJvdXMgd2FycywgYW5kIGJ5IHRlbXB0aW5nIHBlb3BsZSB3aXRoIGhpcyBicmliZXMsIGFuZCBjb250cmlidXRpbmcgdG8gdGhlIGV4cGVuc2VzIG9mIGFlZGlsZXMsIHByYWV0b3JzLCBjb25zdWxzLCBhbmQgdGhlaXIgd2l2ZXMsIGhlIHdhcyB3aW5uaW5nIG1hbnkgdG8gaGlzIHNpZGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['51.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB3aGVuIGhlIGNyb3NzZWQgdGhlIEFscHMgYW5kIHNwZW50IHRoZSB3aW50ZXIgaW4gTHVjYSwgYSBncmVhdCBjcm93ZCBvZiBvcmRpbmFyeSBtZW4gYW5kIHdvbWVuIGdhdGhlcmVkIHRoZXJlIGluIGVhZ2VyIGhhc3RlIHRvIHNlZSBoaW0sIHdoaWxlIHR3byBodW5kcmVkIG1lbiBvZiBzZW5hdG9yaWFsIHJhbmssIGFtb25nIHdob20gd2VyZSBQb21wZXkgYW5kIENyYXNzdXMsIGFuZCBhIGh1bmRyZWQgYW5kIHR3ZW50eSBmYXNjZXMgb2YgcHJvY29uc3VscyBhbmQgcHJhZXRvcnMgd2VyZSBzZWVuIGF0IENhZXNhcidzIGRvb3IuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGlzIHdhcyBpbiA1NiBCLkMuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMjEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCBjaGFwdGVyIHh4aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDIxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgY2hhcHRlciB4eGkuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgY2hhcHRlciB4eGkuPC90cmFuc2xhdGlvbj4="
translation['51.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBmaWxsZWQgYWxsIHRoZSByZXN0IHdpdGggaG9wZXMgYW5kIGxvYWRlZCB0aGVtIHdpdGggbW9uZXksIGFuZCBzZW50IHRoZW0gYXdheTsgYnV0IGJldHdlZW4gaGltc2VsZiwgUG9tcGV5LCBhbmQgQ3Jhc3N1cyB0aGUgZm9sbG93aW5nIGNvbXBhY3Qgd2FzIG1hZGU6IHRoZXNlIHR3byB3ZXJlIHRvIHN0YW5kIGZvciB0aGUgY29uc3Vsc2hpcCwgYW5kIENhZXNhciB3YXMgdG8gYXNzaXN0IHRoZWlyIGNhbmRpZGFjeSBieSBzZW5kaW5nIGxhcmdlIG51bWJlcnMgb2YgaGlzIHNvbGRpZXJzIGhvbWUgdG8gdm90ZSBmb3IgdGhlbTsgYXMgc29vbiBhcyB0aGV5IHdlcmUgZWxlY3RlZCwgdGhleSB3ZXJlIHRvIHNlY3VyZSBmb3IgdGhlbXNlbHZlcyBjb21tYW5kcyBvZiBwcm92aW5jZXMgYW5kIGFybWllcywgYW5kIHRvIGNvbmZpcm0gQ2Flc2FyJ3MgcHJlc2VudCBwcm92aW5jZXMgdG8gaGltIGZvciBhbm90aGVyIHRlcm0gb2YgZml2ZSB5ZWFycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['51.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gYWxsIHRoaXMgd2FzIHB1YmxpY2x5IGtub3duLCBpdCBnYXZlIGRpc3BsZWFzdXJlIHRvIHRoZSBjaGllZiBtZW4gb2YgdGhlIHN0YXRlLCBhbmQgTWFyY2VsbGludXMgcm9zZSBpbiB0aGUgYXNzZW1ibHkgYW5kIGFza2VkIFBvbXBleSBhbmQgQ3Jhc3N1cyB0byB0aGVpciBmYWNlcyB3aGV0aGVyIHRoZXkgd2VyZSBnb2luZyB0byBiZSBjYW5kaWRhdGVzIGZvciB0aGUgY29uc3Vsc2hpcC4gQXMgdGhlIG1ham9yaXR5IG9mIHRoZSBwZW9wbGUgYmFkZSB0aGVtIGFuc3dlciwgUG9tcGV5IGRpZCBzbyBmaXJzdCwgYW5kIHNhaWQgdGhhdCBwZXJoYXBzIGhlIHdvdWxkIGJlIGEgY2FuZGlkYXRlLCBhbmQgcGVyaGFwcyBoZSB3b3VsZCBub3Q7IGJ1dCBDcmFzc3VzIGdhdmUgYSBtb3JlIHBvbGl0aWMgYW5zd2VyLCBmb3IgaGUgc2FpZCBoZSB3b3VsZCB0YWtlIHdoaWNoZXZlciBjb3Vyc2UgaGUgdGhvdWdodCB3b3VsZCBiZSBmb3IgdGhlIGFkdmFudGFnZSBvZiB0aGUgY29tbW9uIHdlYWx0aC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDE1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIHh2LiAxIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDcmFzcy4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgeHYuIDEgZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgeHYuIDEgZi48L3RyYW5zbGF0aW9uPg=="
translation['51.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIE1hcmNlbGxpbnVzIHBlcnNpc3RlZCBpbiBoaXMgYXR0YWNrIHVwb24gUG9tcGV5IGFuZCB3YXMgdGhvdWdodCB0byBiZSBtYWtpbmcgYSBzdHJvbmcgc3BlZWNoLCBQb21wZXkgcmVtYXJrZWQgdGhhdCBNYXJjZWxsaW51cyB3YXMgb2YgYWxsIG1lbiBtb3N0IHVuanVzdCwgc2luY2UgaGUgd2FzIG5vdCBncmF0ZWZ1bCB0byBoaW0gZm9yIG1ha2luZyBoaW0gZWxvcXVlbnQgaW5zdGVhZCBvZiBzcGVlY2hsZXNzLCBhbmQgZnVsbCB0byB2b21pdGluZyBpbnN0ZWFkIG9mIGZhbWlzaGVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aG91Z2ggYWxsIHRoZSByZXN0IGRlY2xpbmVkIHRvIGJlIGNhbmRpZGF0ZXMgZm9yIHRoZSBjb25zdWxzaGlwLCBDYXRvIGVuY291cmFnZWQgYW5kIHBlcnN1YWRlZCBMdWNpdXMgRG9taXRpdXMgbm90IHRvIGRlc2lzdCwgZm9yIHRoZSBzdHJ1Z2dsZSB3aXRoIHRoZSB0eXJhbnRzLCBoZSBzYWlkLCB3YXMgbm90IGZvciBvZmZpY2UsIGJ1dCBmb3IgbGliZXJ0eS4gQnV0IFBvbXBleSBhbmQgaGlzIHBhcnRpc2Fucywgc2VlaW5nIHRoZSBmaXJtbmVzcyBvZiBDYXRvLCBhbmQgZmVhcmluZyBsZXN0LCBoYXZpbmcgYWxsIHRoZSBzZW5hdGUgd2l0aCBoaW0sIGhlIHNob3VsZCBkcmF3IGF3YXkgYW5kIHBlcnZlcnQgdGhlIHNvdW5kLW1pbmRlZCBhbW9uZyB0aGUgcGVvcGxlLCB3b3VsZCBub3Qgc3VmZmVyIERvbWl0aXVzIHRvIGdvIGRvd24gaW50byB0aGUgZm9ydW0sIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBzZW50IGFybWVkIG1lbiBhbmQgc2xldyB0aGUgbGluay1iZWFyZXIgd2hvIHdhcyBsZWFkaW5nIGhpcyBjb21wYW55LCBhbmQgcHV0IHRoZSByZXN0IHRvIGZsaWdodDsgQ2F0byB3YXMgdGhlIGxhc3QgdG8gcmV0aXJlLCBhZnRlciBiZWluZyB3b3VuZGVkIGluIHRoZSByaWdodCBhcm0gd2hpbGUgaGUgd2FzIGZpZ2h0aW5nIHRvIGRlZmVuZCBEb21pdGl1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['52.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhvdWdoIGFsbCB0aGUgcmVzdCBkZWNsaW5lZCB0byBiZSBjYW5kaWRhdGVzIGZvciB0aGUgY29uc3Vsc2hpcCwgQ2F0byBlbmNvdXJhZ2VkIGFuZCBwZXJzdWFkZWQgTHVjaXVzIERvbWl0aXVzIG5vdCB0byBkZXNpc3QsIGZvciB0aGUgc3RydWdnbGUgd2l0aCB0aGUgdHlyYW50cywgaGUgc2FpZCwgd2FzIG5vdCBmb3Igb2ZmaWNlLCBidXQgZm9yIGxpYmVydHkuIEJ1dCBQb21wZXkgYW5kIGhpcyBwYXJ0aXNhbnMsIHNlZWluZyB0aGUgZmlybW5lc3Mgb2YgQ2F0bywgYW5kIGZlYXJpbmcgbGVzdCwgaGF2aW5nIGFsbCB0aGUgc2VuYXRlIHdpdGggaGltLCBoZSBzaG91bGQgZHJhdyBhd2F5IGFuZCBwZXJ2ZXJ0IHRoZSBzb3VuZC1taW5kZWQgYW1vbmcgdGhlIHBlb3BsZSwgd291bGQgbm90IHN1ZmZlciBEb21pdGl1cyB0byBnbyBkb3duIGludG8gdGhlIGZvcnVtLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['52.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBzZW50IGFybWVkIG1lbiBhbmQgc2xldyB0aGUgbGluay1iZWFyZXIgd2hvIHdhcyBsZWFkaW5nIGhpcyBjb21wYW55LCBhbmQgcHV0IHRoZSByZXN0IHRvIGZsaWdodDsgQ2F0byB3YXMgdGhlIGxhc3QgdG8gcmV0aXJlLCBhZnRlciBiZWluZyB3b3VuZGVkIGluIHRoZSByaWdodCBhcm0gd2hpbGUgaGUgd2FzIGZpZ2h0aW5nIHRvIGRlZmVuZCBEb21pdGl1cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CeSBzdWNoIGEgcGF0aCB0aGV5IG1hZGUgdGhlaXIgd2F5IGludG8gdGhlIG9mZmljZSB0aGV5IHNvdWdodCwgbm9yIGV2ZW4gdGhlbiBkaWQgdGhleSBiZWhhdmUgbW9yZSBkZWNlbnRseS4gQnV0IGZpcnN0IG9mIGFsbCwgd2hpbGUgdGhlIHBlb3BsZSB3ZXJlIGNhc3RpbmcgdGhlaXIgdm90ZXMgZm9yIHRoZSBlbGVjdGlvbiBvZiBDYXRvIHRvIHRoZSBwcmFldG9yc2hpcCwgUG9tcGV5IGRpc3NvbHZlZCB0aGUgYXNzZW1ibHksIGFsbGVnaW5nIGFuIGluYXVzcGljaW91cyBvbWVuLCBhbmQgYWZ0ZXIgY29ycnVwdGluZyB0aGUgdHJpYmVzIHdpdGggbW9uZXksIHRoZXkgcHJvY2xhaW1lZCBWYXRpbml1cyBwcmFldG9yIGluc3RlYWQgb2YgQ2F0by4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBieSBtZWFucyBvZiBUcmVib25pdXMsIGEgdHJpYnVuZSwgdGhleSBpbnRyb2R1Y2VkIGxhd3Mgd2hpY2gsIGFjY29yZGluZyB0byB0aGUgYWdyZWVtZW50LCBjb250aW51ZWQgaGlzIHByb3ZpbmNlcyB0byBDYWVzYXIgZm9yIGEgc2Vjb25kIHRlcm0gb2YgZml2ZSB5ZWFycywgZ2F2ZSBDcmFzc3VzIFN5cmlhIGFuZCB0aGUgZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBQYXJ0aGlhbnMsIGFuZCB0byBQb21wZXkgaGltc2VsZiB0aGUgd2hvbGUgb2YgQWZyaWNhLCBib3RoIFNwYWlucywgYW5kIGZvdXIgbGVnaW9uczsgb2YgdGhlc2UgaGUgbGVudCB0d28gdG8gQ2Flc2FyLCBhdCBoaXMgcmVxdWVzdCwgZm9yIHRoZSB3YXIgaW4gR2F1bC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFsdGhvdWdoIENyYXNzdXMgd2VudCBvdXQgdG8gaGlzIHByb3ZpbmNlIGF0IHRoZSBleHBpcmF0aW9uIG9mIGhpcyBjb25zdWxzaGlwLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDU0IEIuQy48L25vdGU+IFBvbXBleSBvcGVuZWQgaGlzIHRoZWF0cmUgYW5kIGhlbGQgZ3ltbmFzdGljIGFuZCBtdXNpY2FsIGNvbnRlc3RzIGF0IGl0cyBkZWRpY2F0aW9uLCBhbmQgZnVybmlzaGVkIGNvbWJhdHMgb2Ygd2lsZCBiZWFzdHMgaW4gd2hpY2ggZml2ZSBodW5kcmVkIGxpb25zIHdlcmUga2lsbGVkLCBhbmQgYWJvdmUgYWxsLCBhbiBlbGVwaGFudCBmaWdodCwgYSBtb3N0IHRlcnJpZnlpbmcgc3BlY3RhY2xlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['52.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGJ5IG1lYW5zIG9mIFRyZWJvbml1cywgYSB0cmlidW5lLCB0aGV5IGludHJvZHVjZWQgbGF3cyB3aGljaCwgYWNjb3JkaW5nIHRvIHRoZSBhZ3JlZW1lbnQsIGNvbnRpbnVlZCBoaXMgcHJvdmluY2VzIHRvIENhZXNhciBmb3IgYSBzZWNvbmQgdGVybSBvZiBmaXZlIHllYXJzLCBnYXZlIENyYXNzdXMgU3lyaWEgYW5kIHRoZSBleHBlZGl0aW9uIGFnYWluc3QgdGhlIFBhcnRoaWFucywgYW5kIHRvIFBvbXBleSBoaW1zZWxmIHRoZSB3aG9sZSBvZiBBZnJpY2EsIGJvdGggU3BhaW5zLCBhbmQgZm91ciBsZWdpb25zOyBvZiB0aGVzZSBoZSBsZW50IHR3byB0byBDYWVzYXIsIGF0IGhpcyByZXF1ZXN0LCBmb3IgdGhlIHdhciBpbiBHYXVsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['52.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCBDcmFzc3VzIHdlbnQgb3V0IHRvIGhpcyBwcm92aW5jZSBhdCB0aGUgZXhwaXJhdGlvbiBvZiBoaXMgY29uc3Vsc2hpcCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDU0IEIuQy48L25vdGU+IFBvbXBleSBvcGVuZWQgaGlzIHRoZWF0cmUgYW5kIGhlbGQgZ3ltbmFzdGljIGFuZCBtdXNpY2FsIGNvbnRlc3RzIGF0IGl0cyBkZWRpY2F0aW9uLCBhbmQgZnVybmlzaGVkIGNvbWJhdHMgb2Ygd2lsZCBiZWFzdHMgaW4gd2hpY2ggZml2ZSBodW5kcmVkIGxpb25zIHdlcmUga2lsbGVkLCBhbmQgYWJvdmUgYWxsLCBhbiBlbGVwaGFudCBmaWdodCwgYSBtb3N0IHRlcnJpZnlpbmcgc3BlY3RhY2xlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhpcyB3b24gaGltIGFkbWlyYXRpb24gYW5kIGFmZmVjdGlvbjsgYnV0IG9uIHRoZSBvdGhlciBoYW5kIGhlIGluY3VycmVkIGEgY29ycmVzcG9uZGluZyBkaXNwbGVhc3VyZSwgYmVjYXVzZSBoZSBoYW5kZWQgb3ZlciBoaXMgcHJvdmluY2VzIGFuZCBoaXMgYXJtaWVzIHRvIGxlZ2F0ZXMgd2hvIHdlcmUgaGlzIGZyaWVuZHMsIHdoaWxlIGhlIGhpbXNlbGYgc3BlbnQgaGlzIHRpbWUgd2l0aCBoaXMgd2lmZSBhbW9uZyB0aGUgcGxlYXN1cmUtcGxhY2VzIG9mIEl0YWx5LCBnb2luZyBmcm9tIG9uZSB0byBhbm90aGVyLCBlaXRoZXIgYmVjYXVzZSBoZSBsb3ZlZCBoZXIsIG9yIGJlY2F1c2Ugc2hlIGxvdmVkIGhpbSBzbyB0aGF0IGhlIGNvdWxkIG5vdCBiZWFyIHRvIGxlYXZlIGhlcjsgZm9yIHRoaXMgcmVhc29uIHRvbyBpcyBnaXZlbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW5kZWVkLCB0aGUgZm9uZG5lc3Mgb2YgdGhlIHlvdW5nIHdvbWFuIGZvciBoZXIgaHVzYmFuZCB3YXMgbm90b3Jpb3VzLCBhbHRob3VnaCB0aGUgbWF0dXJlIGFnZSBvZiBQb21wZXkgZGlkIG5vdCBpbnZpdGUgc3VjaCBkZXZvdGlvbi4gVGhlIHJlYXNvbiBmb3IgaXQsIGhvd2V2ZXIsIHNlZW1zIHRvIGhhdmUgbGFpbiBpbiB0aGUgY2hhc3RlIHJlc3RyYWludCBvZiBoZXIgaHVzYmFuZCwgd2hvIGtuZXcgb25seSBoaXMgd2VkZGVkIHdpZmUsIGFuZCBpbiB0aGUgZGlnbml0eSBvZiBoaXMgbWFubmVycywgd2hpY2ggd2VyZSBub3Qgc2V2ZXJlLCBidXQgZnVsbCBvZiBncmFjZSwgYW5kIGVzcGVjaWFsbHkgYXR0cmFjdGl2ZSB0byB3b21lbiwgYXMgZXZlbiBGbG9yYSB0aGUgY291cnRlc2FuIG1heSBiZSBhbGxvd2VkIHRvIHRlc3RpZnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IG9uY2UgaGFwcGVuZWQgdGhhdCBhdCBhbiBlbGVjdGlvbiBvZiBhZWRpbGVzIHBlb3BsZSBjYW1lIHRvIGJsb3dzLCBhbmQgbWFueSB3ZXJlIGtpbGxlZCBpbiB0aGUgdmljaW5pdHkgb2YgUG9tcGV5IGFuZCBoZSB3YXMgY292ZXJlZCB3aXRoIHRoZWlyIGJsb29kLCBzbyB0aGF0IGhlIGNoYW5nZWQgaGlzIGdhcm1lbnRzLiBIaXMgc2VydmFudHMgY2FycmllZCB0aGVzZSBnYXJtZW50cyB0byBoaXMgaG91c2Ugd2l0aCBtdWNoIGNvbmZ1c2lvbiBhbmQgaGFzdGUsIGFuZCBoaXMgeW91bmcgd2lmZSwgd2hvIGNoYW5jZWQgdG8gYmUgd2l0aCBjaGlsZCwgYXQgc2lnaHQgb2YgdGhlIGJsb29kLXN0YWluZWQgdG9nYSwgZmFpbnRlZCBhd2F5IGFuZCB3aXRoIGRpZmZpY3VsdHkgcmVnYWluZWQgaGVyIHNlbnNlcywgYW5kIGluIGNvbnNlcXVlbmNlIG9mIHRoZSBzaG9jayBhbmQgaGVyIHN1ZmZlcmluZ3MsIG1pc2NhcnJpZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgaXQgY2FtZSB0byBwYXNzIHRoYXQgZXZlbiB0aG9zZSB3aG8gZm91bmQgbW9zdCBmYXVsdCB3aXRoIFBvbXBleSdzIGZyaWVuZHNoaXAgZm9yIENhZXNhciBjb3VsZCBub3QgYmxhbWUgaGltIGZvciB0aGUgbG92ZSBoZSBib3JlIGhpcyB3aWZlLiBIb3dldmVyLCBzaGUgY29uY2VpdmVkIGFnYWluIGFuZCBnYXZlIGJpcnRoIHRvIGEgZmVtYWxlIGNoaWxkLCBidXQgZGllZCBmcm9tIHRoZSBwYWlucyBvZiB0cmF2YWlsLCBhbmQgdGhlIGNoaWxkIHN1cnZpdmVkIGhlciBvbmx5IGEgZmV3IGRheXMuIFBvbXBleSBtYWRlIHByZXBhcmF0aW9ucyB0byBidXJ5IGhlciBib2R5IGF0IGhpcyBBbGJhbiB2aWxsYSwgYnV0IHRoZSBwZW9wbGUgdG9vayBpdCBieSBmb3JjZSBhbmQgY2FycmllZCBpdCBkb3duIHRvIHRoZSBDYW1wdXMgTWFydGl1cyBmb3IgYnVyaWFsLCBtb3JlIG91dCBvZiBwaXR5IGZvciB0aGUgeW91bmcgd29tYW4gdGhhbiBhcyBhIGZhdm91ciB0byBQb21wZXkgYW5kIENhZXNhci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG9mIHRoZXNlIHR3bywgaXQgd2FzIHRob3VnaHQgdGhhdCB0aGUgcGVvcGxlIGdhdmUgYSBsYXJnZXIgc2hhcmUgb2YgdGhlIGhvbm91ciB0byBDYWVzYXIsIHdobyB3YXMgYWJzZW50LCB0aGFuIHRvIFBvbXBleSwgd2hvIHdhcyBwcmVzZW50LiBGb3IgdGhlIGNpdHkgYmVjYW1lIGF0IG9uY2UgYSB0b3NzaW5nIHNlYSwgYW5kIGV2ZXJ5d2hlcmUgc3VyZ2luZyB0dW11bHQgYW5kIGRpc2NvcmRhbnQgc3BlZWNoZXMgcHJldmFpbGVkLCBzaW5jZSB0aGUgbWFycmlhZ2UgYWxsaWFuY2Ugd2hpY2ggaGFkIGhpdGhlcnRvIHZlaWxlZCByYXRoZXIgdGhhbiByZXN0cmFpbmVkIHRoZSBhbWJpdGlvbiBvZiB0aGUgdHdvIG1lbiB3YXMgbm93IGF0IGFuIGVuZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgYSBzaG9ydCB0aW1lLCB0b28sIHRpZGluZ3MgY2FtZSB0aGF0IENyYXNzdXMgaGFkIGxvc3QgaGlzIGxpZmUgaW4gUGFydGhpYSwgYW5kIHNvIHdoYXQgaGFkIGJlZW4gYSBncmVhdCBoaW5kcmFuY2UgdG8gdGhlIGJyZWFraW5nIG91dCBvZiBjaXZpbCB3YXIgd2FzIHJlbW92ZWQ7IGZvciB0aHJvdWdoIGZlYXIgb2YgaGltIGJvdGggUG9tcGV5IGFuZCBDYWVzYXIgaGFkIHNvbWVob3cgb3Igb3RoZXIgY29udGludWVkIHRvIHRyZWF0IG9uZSBhbm90aGVyIGZhaXJseS4gQnV0IHdoZW4gZm9ydHVuZSBoYWQgcmVtb3ZlZCB0aGUgdGhpcmQgY2hhbXBpb24gd2hvIHdhaXRlZCB0byBjb21wZXRlIHdpdGggdGhlIHZpY3RvciBpbiB0aGVpciBzdHJ1Z2dsZSwgYXQgb25jZSB0aGUgY29taWMgcG9ldCdzIHdvcmRzIHdlcmUgYXB0LCBhbmQgCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPmVhY2ggd3Jlc3RsZXIgYWdhaW5zdCB0aGUgb3RoZXIgPC9sPgoJCQkJCSAgICAgICAgICA8bD5Bbm9pbnRzIGhpbXNlbGYgd2l0aCBvaWwgYW5kIHNtZWFycyBoaXMgaGFuZHMgd2l0aCBkdXN0LjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIEtvY2ssIDx0aXRsZT5Db20uIEdyYWVjLiBGcmFnLjwvdGl0bGU+IGlpaS4gcC4gNDg0Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5TbyBzbGlnaHQgYSB0aGluZyBpcyBmb3J0dW5lIHdoZW4gY29tcGFyZWQgd2l0aCBodW1hbiBuYXR1cmU7IGZvciBzaGUgY2Fubm90IHNhdGlzZnkgaXRzIGRlc2lyZXMsIHNpbmNlIGFsbCB0aGF0IGV4dGVudCBvZiBlbXBpcmUgYW5kIG1hZ25pdHVkZSBvZiB3aWRlLXN0cmV0Y2hpbmcgZG9tYWluIGNvdWxkIG5vdCBzdWZmaWNlIGZvciB0d28gbWVuLiBUaGV5IGhhZCBoZWFyZCBhbmQgcmVhZCB0aGF0IHRoZSBnb2RzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+WmV1cywgUG9zZWlkb24sIGFuZCBQbHV0bzsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDE1LjE4OSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5JbGlhZDwvdGl0bGU+LCB4di4gMTg5LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZGl2aWRlZCB0aGUgdW5pdmVyc2UgaW50byB0aHJlZSBwYXJ0cywgYW5kIGVhY2ggZ290IGhpcyBzaGFyZSBvZiBwb3dlciw8L3E+IGFuZCB5ZXQgdGhleSBkaWQgbm90IHRoaW5rIHRoZSBSb21hbiBkb21pbmlvbiBlbm91Z2ggZm9yIHRoZW1zZWx2ZXMsIHdobyB3ZXJlIGJ1dCB0d28uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoaXMgd29uIGhpbSBhZG1pcmF0aW9uIGFuZCBhZmZlY3Rpb247IGJ1dCBvbiB0aGUgb3RoZXIgaGFuZCBoZSBpbmN1cnJlZCBhIGNvcnJlc3BvbmRpbmcgZGlzcGxlYXN1cmUsIGJlY2F1c2UgaGUgaGFuZGVkIG92ZXIgaGlzIHByb3ZpbmNlcyBhbmQgaGlzIGFybWllcyB0byBsZWdhdGVzIHdobyB3ZXJlIGhpcyBmcmllbmRzLCB3aGlsZSBoZSBoaW1zZWxmIHNwZW50IGhpcyB0aW1lIHdpdGggaGlzIHdpZmUgYW1vbmcgdGhlIHBsZWFzdXJlLXBsYWNlcyBvZiBJdGFseSwgZ29pbmcgZnJvbSBvbmUgdG8gYW5vdGhlciwgZWl0aGVyIGJlY2F1c2UgaGUgbG92ZWQgaGVyLCBvciBiZWNhdXNlIHNoZSBsb3ZlZCBoaW0gc28gdGhhdCBoZSBjb3VsZCBub3QgYmVhciB0byBsZWF2ZSBoZXI7IGZvciB0aGlzIHJlYXNvbiB0b28gaXMgZ2l2ZW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['53.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgdGhlIGZvbmRuZXNzIG9mIHRoZSB5b3VuZyB3b21hbiBmb3IgaGVyIGh1c2JhbmQgd2FzIG5vdG9yaW91cywgYWx0aG91Z2ggdGhlIG1hdHVyZSBhZ2Ugb2YgUG9tcGV5IGRpZCBub3QgaW52aXRlIHN1Y2ggZGV2b3Rpb24uIFRoZSByZWFzb24gZm9yIGl0LCBob3dldmVyLCBzZWVtcyB0byBoYXZlIGxhaW4gaW4gdGhlIGNoYXN0ZSByZXN0cmFpbnQgb2YgaGVyIGh1c2JhbmQsIHdobyBrbmV3IG9ubHkgaGlzIHdlZGRlZCB3aWZlLCBhbmQgaW4gdGhlIGRpZ25pdHkgb2YgaGlzIG1hbm5lcnMsIHdoaWNoIHdlcmUgbm90IHNldmVyZSwgYnV0IGZ1bGwgb2YgZ3JhY2UsIGFuZCBlc3BlY2lhbGx5IGF0dHJhY3RpdmUgdG8gd29tZW4sIGFzIGV2ZW4gRmxvcmEgdGhlIGNvdXJ0ZXNhbiBtYXkgYmUgYWxsb3dlZCB0byB0ZXN0aWZ5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['53.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IG9uY2UgaGFwcGVuZWQgdGhhdCBhdCBhbiBlbGVjdGlvbiBvZiBhZWRpbGVzIHBlb3BsZSBjYW1lIHRvIGJsb3dzLCBhbmQgbWFueSB3ZXJlIGtpbGxlZCBpbiB0aGUgdmljaW5pdHkgb2YgUG9tcGV5IGFuZCBoZSB3YXMgY292ZXJlZCB3aXRoIHRoZWlyIGJsb29kLCBzbyB0aGF0IGhlIGNoYW5nZWQgaGlzIGdhcm1lbnRzLiBIaXMgc2VydmFudHMgY2FycmllZCB0aGVzZSBnYXJtZW50cyB0byBoaXMgaG91c2Ugd2l0aCBtdWNoIGNvbmZ1c2lvbiBhbmQgaGFzdGUsIGFuZCBoaXMgeW91bmcgd2lmZSwgd2hvIGNoYW5jZWQgdG8gYmUgd2l0aCBjaGlsZCwgYXQgc2lnaHQgb2YgdGhlIGJsb29kLXN0YWluZWQgdG9nYSwgZmFpbnRlZCBhd2F5IGFuZCB3aXRoIGRpZmZpY3VsdHkgcmVnYWluZWQgaGVyIHNlbnNlcywgYW5kIGluIGNvbnNlcXVlbmNlIG9mIHRoZSBzaG9jayBhbmQgaGVyIHN1ZmZlcmluZ3MsIG1pc2NhcnJpZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['53.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgaXQgY2FtZSB0byBwYXNzIHRoYXQgZXZlbiB0aG9zZSB3aG8gZm91bmQgbW9zdCBmYXVsdCB3aXRoIFBvbXBleSdzIGZyaWVuZHNoaXAgZm9yIENhZXNhciBjb3VsZCBub3QgYmxhbWUgaGltIGZvciB0aGUgbG92ZSBoZSBib3JlIGhpcyB3aWZlLiBIb3dldmVyLCBzaGUgY29uY2VpdmVkIGFnYWluIGFuZCBnYXZlIGJpcnRoIHRvIGEgZmVtYWxlIGNoaWxkLCBidXQgZGllZCBmcm9tIHRoZSBwYWlucyBvZiB0cmF2YWlsLCBhbmQgdGhlIGNoaWxkIHN1cnZpdmVkIGhlciBvbmx5IGEgZmV3IGRheXMuIFBvbXBleSBtYWRlIHByZXBhcmF0aW9ucyB0byBidXJ5IGhlciBib2R5IGF0IGhpcyBBbGJhbiB2aWxsYSwgYnV0IHRoZSBwZW9wbGUgdG9vayBpdCBieSBmb3JjZSBhbmQgY2FycmllZCBpdCBkb3duIHRvIHRoZSBDYW1wdXMgTWFydGl1cyBmb3IgYnVyaWFsLCBtb3JlIG91dCBvZiBwaXR5IGZvciB0aGUgeW91bmcgd29tYW4gdGhhbiBhcyBhIGZhdm91ciB0byBQb21wZXkgYW5kIENhZXNhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['53.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvZiB0aGVzZSB0d28sIGl0IHdhcyB0aG91Z2h0IHRoYXQgdGhlIHBlb3BsZSBnYXZlIGEgbGFyZ2VyIHNoYXJlIG9mIHRoZSBob25vdXIgdG8gQ2Flc2FyLCB3aG8gd2FzIGFic2VudCwgdGhhbiB0byBQb21wZXksIHdobyB3YXMgcHJlc2VudC4gRm9yIHRoZSBjaXR5IGJlY2FtZSBhdCBvbmNlIGEgdG9zc2luZyBzZWEsIGFuZCBldmVyeXdoZXJlIHN1cmdpbmcgdHVtdWx0IGFuZCBkaXNjb3JkYW50IHNwZWVjaGVzIHByZXZhaWxlZCwgc2luY2UgdGhlIG1hcnJpYWdlIGFsbGlhbmNlIHdoaWNoIGhhZCBoaXRoZXJ0byB2ZWlsZWQgcmF0aGVyIHRoYW4gcmVzdHJhaW5lZCB0aGUgYW1iaXRpb24gb2YgdGhlIHR3byBtZW4gd2FzIG5vdyBhdCBhbiBlbmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['53.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGEgc2hvcnQgdGltZSwgdG9vLCB0aWRpbmdzIGNhbWUgdGhhdCBDcmFzc3VzIGhhZCBsb3N0IGhpcyBsaWZlIGluIFBhcnRoaWEsIGFuZCBzbyB3aGF0IGhhZCBiZWVuIGEgZ3JlYXQgaGluZHJhbmNlIHRvIHRoZSBicmVha2luZyBvdXQgb2YgY2l2aWwgd2FyIHdhcyByZW1vdmVkOyBmb3IgdGhyb3VnaCBmZWFyIG9mIGhpbSBib3RoIFBvbXBleSBhbmQgQ2Flc2FyIGhhZCBzb21laG93IG9yIG90aGVyIGNvbnRpbnVlZCB0byB0cmVhdCBvbmUgYW5vdGhlciBmYWlybHkuIEJ1dCB3aGVuIGZvcnR1bmUgaGFkIHJlbW92ZWQgdGhlIHRoaXJkIGNoYW1waW9uIHdobyB3YWl0ZWQgdG8gY29tcGV0ZSB3aXRoIHRoZSB2aWN0b3IgaW4gdGhlaXIgc3RydWdnbGUsIGF0IG9uY2UgdGhlIGNvbWljIHBvZXQncyB3b3JkcyB3ZXJlIGFwdCwgYW5kIAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+ZWFjaCB3cmVzdGxlciBhZ2FpbnN0IHRoZSBvdGhlciA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5vaW50cyBoaW1zZWxmIHdpdGggb2lsIGFuZCBzbWVhcnMgaGlzIGhhbmRzIHdpdGggZHVzdC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+ZWFjaCB3cmVzdGxlciBhZ2FpbnN0IHRoZSBvdGhlciA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5vaW50cyBoaW1zZWxmIHdpdGggb2lsIGFuZCBzbWVhcnMgaGlzIGhhbmRzIHdpdGggZHVzdC48L2w+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIEtvY2ssIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbS4gR3JhZWMuIEZyYWcuPC90aXRsZT4gaWlpLiBwLiA0ODQuPC9ub3RlPiAKCQkJCSAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tLiBHcmFlYy4gRnJhZy48L3RpdGxlPiBpaWkuIHAuIDQ4NC48L3RyYW5zbGF0aW9uPg=="
translation['53.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlNvIHNsaWdodCBhIHRoaW5nIGlzIGZvcnR1bmUgd2hlbiBjb21wYXJlZCB3aXRoIGh1bWFuIG5hdHVyZTsgZm9yIHNoZSBjYW5ub3Qgc2F0aXNmeSBpdHMgZGVzaXJlcywgc2luY2UgYWxsIHRoYXQgZXh0ZW50IG9mIGVtcGlyZSBhbmQgbWFnbml0dWRlIG9mIHdpZGUtc3RyZXRjaGluZyBkb21haW4gY291bGQgbm90IHN1ZmZpY2UgZm9yIHR3byBtZW4uIFRoZXkgaGFkIGhlYXJkIGFuZCByZWFkIHRoYXQgdGhlIGdvZHM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlpldXMsIFBvc2VpZG9uLCBhbmQgUGx1dG87IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDE1LjE4OSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHh2LiAxODkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxNS4xODkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB4di4gMTg5LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeHYuIDE4OS48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpdmlkZWQgdGhlIHVuaXZlcnNlIGludG8gdGhyZWUgcGFydHMsIGFuZCBlYWNoIGdvdCBoaXMgc2hhcmUgb2YgcG93ZXIsPC9xPiBhbmQgeWV0IHRoZXkgZGlkIG5vdCB0aGluayB0aGUgUm9tYW4gZG9taW5pb24gZW5vdWdoIGZvciB0aGVtc2VsdmVzLCB3aG8gd2VyZSBidXQgdHdvLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdGlsbCwgUG9tcGV5IG9uY2Ugc2FpZCBpbiBhZGRyZXNzaW5nIHRoZSBwZW9wbGUgdGhhdCBoZSBoYWQgcmVjZWl2ZWQgZXZlcnkgb2ZmaWNlIGVhcmxpZXIgdGhhbiBoZSBoYWQgZXhwZWN0ZWQsIGFuZCBoYWQgbGFpZCBpdCBkb3duIG1vcmUgcXVpY2tseSB0aGFuIG90aGVycyBoYWQgZXhwZWN0ZWQuIEFuZCBpbiB0cnV0aCBoaXMgZGlzYmFuZGluZyBvZiBoaXMgYXJtaWVzIHdhcyBhIHBlcnBldHVhbCB3aXRuZXNzIHRvIHRoZSB0cnV0aCBvZiBoaXMgd29yZHMuIEJ1dCBhdCB0aGlzIHRpbWUgaGUgdGhvdWdodCB0aGF0IENhZXNhciB3YXMgbm90IGdvaW5nIHRvIGRpc21pc3MgaGlzIGZvcmNlcywgYW5kIHRoZXJlZm9yZSBzb3VnaHQgdG8gbWFrZSBoaW1zZWxmIHN0cm9uZyBhZ2FpbnN0IGhpbSBieSBtZWFucyBvZiBtYWdpc3RyYWNpZXMgaW4gdGhlIGNpdHkuIEJleW9uZCB0aGlzLCBob3dldmVyLCBoZSBhdHRlbXB0ZWQgbm8gcmV2b2x1dGlvbmFyeSBjaGFuZ2VzLCBub3IgZGlkIGhlIHdpc2ggdG8gYmUgdGhvdWdodCB0byBkaXN0cnVzdCBDYWVzYXIsIGJ1dCByYXRoZXIgdG8gbmVnbGVjdCBhbmQgZGVzcGlzZSBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHNhdyB0aGF0IHRoZSBtYWdpc3RyYWNpZXMgd2VyZSBub3QgYmVzdG93ZWQgYWNjb3JkaW5nIHRvIGhpcyB3aXNoZXMsIGJlY2F1c2UgdGhlIGNpdGl6ZW5zIHdlcmUgYnJpYmVkLCBoZSBzdWZmZXJlZCBhbiBhbmFyY2h5IHRvIGFyaXNlIGluIHRoZSBjaXR5PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhhdCBpcywgbm8gY29uc3VscyB3ZXJlIGVsZWN0ZWQuPC9ub3RlPjsgYW5kIGZvcnRod2l0aCB0aGVyZSB3YXMgcHJldmFsZW50IG11Y2ggdGFsayBpbiBmYXZvdXIgb2YgYSBkaWN0YXRvciwgd2hpY2ggTHVjaWxpdXMgdGhlIHBvcHVsYXIgdHJpYnVuZSBmaXJzdCB2ZW50dXJlZCB0byBtYWtlIHB1YmxpYywgd2hlbiBoZSBhZHZpc2VkIHRoZSBwZW9wbGUgdG8gZWxlY3QgUG9tcGV5IGRpY3RhdG9yLiBCdXQgQ2F0byBhdHRhY2tlZCBoaW0sIGFuZCBMdWNpbGl1cyBjYW1lIG5lYXIgbG9zaW5nIGhpcyB0cmlidW5hdGUsIGFuZCBtYW55IG9mIFBvbXBleSdzIGZyaWVuZHMgY2FtZSBmb3J3YXJkIGluIGRlZmVuY2Ugb2YgaGltLCBkZWNsYXJpbmcgdGhhdCBoZSBuZWl0aGVyIGFza2VkIG5vciBkZXNpcmVkIHRoYXQgb2ZmaWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBDYXRvIGFwcGxhdWRlZCBQb21wZXkgYW5kIHVyZ2VkIGhpbSB0byBkZXZvdGUgaGltc2VsZiB0byB0aGUgY2F1c2Ugb2YgbGF3IGFuZCBvcmRlciwgZm9yIHRoZSB0aW1lIGJlaW5nIGhlIGRpZCBzbywgb3V0IG9mIHNoYW1lLCBhbmQgRG9taXRpdXMgYW5kIE1lc3NhbGEgd2VyZSBpbnN0YWxsZWQgaW4gdGhlIGNvbnN1bHNoaXA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA1MyBCLkMuLCBzZXZlbiBtb250aHMgYWZ0ZXIgdGhlIHJlZ3VsYXIgdGltZS48L25vdGU+OyBidXQgYWZ0ZXJ3YXJkcyBhbiBhbmFyY2h5IGFyb3NlIGFnYWluLCBhbmQgbW9yZSBwZW9wbGUgbm93IGFnaXRhdGVkIHRoZSBxdWVzdGlvbiBvZiBhIGRpY3RhdG9yc2hpcCBtb3JlIGJvbGRseS4gVGhlcmVmb3JlIENhdG8gYW5kIGhpcyBwYXJ0eSwgZmVhcmluZyBsZXN0IHRoZXkgc2hvdWxkIGJlIG92ZXJib3JuZSwgZGV0ZXJtaW5lZCB0byBhbGxvdyBQb21wZXkgYSBjZXJ0YWluIGxlZ2FsaXplZCBvZmZpY2UsIGFuZCBzbyB0byBkaXZlcnQgaGltIGZyb20gdGhlIHVubWl4ZWQgdHlyYW5ueSBvZiBhIGRpY3RhdG9yc2hpcC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Q29uc2VxdWVudGx5LCBCaWJ1bHVzLCB3aG8gd2FzIGFuIGVuZW15IG9mIFBvbXBleSwgd2FzIGZpcnN0IHRvIHByb3Bvc2UgaW4gdGhlIHNlbmF0ZSB0aGF0IFBvbXBleSBiZSBjaG9zZW4gc29sZSBjb25zdWw7IGZvciB0aHVzLCBoZSBzYWlkLCB0aGUgY2l0eSB3b3VsZCBlaXRoZXIgYmUgc2V0IGZyZWUgZnJvbSB0aGUgcHJldmFpbGluZyBkaXNvcmRlciwgb3Igd291bGQgYmVjb21lIHRoZSBzbGF2ZSBvZiBpdHMgc3Ryb25nZXN0IG1hbi4gVGhlIHByb3Bvc2FsIHNlZW1lZCBzdHJhbmdlLCBjb25zaWRlcmluZyB0aGUgbWFuIHdobyBtYWRlIGl0OyBidXQgQ2F0byByb3NlLCBsZWFkaW5nIGV2ZXJ5Ym9keSB0byB0aGluayB0aGF0IGhlIHdhcyBnb2luZyB0byBzcGVhayBhZ2FpbnN0IGl0LCBhbmQgd2hlbiBzaWxlbmNlIHdhcyBtYWRlLCBzYWlkIHRoYXQgaGUgaGltc2VsZiB3b3VsZCBub3QgaGF2ZSBpbnRyb2R1Y2VkIHRoZSBwcm9wb3NlZCBtZWFzdXJlLCBidXQgdGhhdCBzaW5jZSBpdCBoYWQgYmVlbiBpbnRyb2R1Y2VkIGJ5IGFub3RoZXIsIGhlIHVyZ2VkIGl0cyBhZG9wdGlvbiwgYmVjYXVzZSBoZSBwcmVmZXJyZWQgYW55IGdvdmVybm1lbnQgd2hhdGV2ZXIgdG8gbm8gZ292ZXJubWVudCBhdCBhbGwsIGFuZCB0aG91Z2h0IHRoYXQgbm8gb25lIHdvdWxkIGdvdmVybiBiZXR0ZXIgdGhhbiBQb21wZXkgaW4gYSB0aW1lIG9mIHN1Y2ggZGlzb3JkZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgYWNjZXB0ZWQgdGhlIG1lYXN1cmUsIGFuZCBkZWNyZWVkIHRoYXQgUG9tcGV5LCBpZiBlbGVjdGVkIGNvbnN1bCwgc2hvdWxkIGdvdmVybiBhbG9uZSwgYnV0IHRoYXQgaWYgaGUgaGltc2VsZiBkZXNpcmVkIGEgY29sbGVhZ3VlLCBoZSBtaWdodCBjaG9vc2Ugd2hvbSBoZSB0aG91Z2h0IGZpdCBhZnRlciB0d28gbW9udGhzIGhhZCBmdWxseSBleHBpcmVkLiBIYXZpbmcgaW4gdGhpcyB3YXkgYmVlbiBtYWRlIGNvbnN1bDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDUyIEIuQy48L25vdGU+IGFuZCBzbyBkZWNsYXJlZCBieSBTdWxwaWNpdXMsIHRoZSBJbnRlcnJleCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbmUgd2hvIGhlbGQgc3VwcmVtZSBwb3dlciBpbiB0aGUgYWJzZW5jZSBvZiByZWd1bGFybHkgZWxlY3RlZCBjb25zdWxzLjwvbm90ZT4gUG9tcGV5IGFkZHJlc3NlZCBoaW1zZWxmIGluIGEgZnJpZW5kbHkgbWFubmVyIHRvIENhdG8sIGFja25vd2xlZGdpbmcgdGhhdCBoZSB3YXMgbXVjaCBpbmRlYnRlZCB0byBoaW0sIGFuZCBpbnZpdGluZyBoaW0gdG8gZ2l2ZSBhZHZpY2UgaW4gYSBwcml2YXRlIGNhcGFjaXR5IG9uIHRoZSBjb25kdWN0IG9mIHRoZSBnb3Zlcm5tZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2F0byB3b3VsZCBub3QgYWRtaXQgdGhhdCBQb21wZXkgd2FzIGluZGVidGVkIHRvIGhpbSwgZGVjbGFyaW5nIHRoYXQgbm9uZSBvZiBoaXMgd29yZHMgaGFkIGJlZW4gc3Bva2VuIGluIHRoZSBpbnRlcmVzdHMgb2YgUG9tcGV5LCBidXQgaW4gdGhlIGludGVyZXN0cyBvZiB0aGUgY2l0eTsgYW5kIHRoYXQgaGUgd291bGQgZ2l2ZSBoaW0gYWR2aWNlIGluIGEgcHJpdmF0ZSBjYXBhY2l0eSBpZiBoZSB3ZXJlIGludml0ZWQsIGFuZCBpbiBjYXNlIGhlIHNob3VsZCBub3QgYmUgaW52aXRlZCwgd291bGQgcHVibGljbHkgbWFrZSBrbm93biBoaXMgb3Bpbmlvbi4gU3VjaCwgaW5kZWVkLCB3YXMgQ2F0byBpbiBldmVyeXRoaW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['54.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3RpbGwsIFBvbXBleSBvbmNlIHNhaWQgaW4gYWRkcmVzc2luZyB0aGUgcGVvcGxlIHRoYXQgaGUgaGFkIHJlY2VpdmVkIGV2ZXJ5IG9mZmljZSBlYXJsaWVyIHRoYW4gaGUgaGFkIGV4cGVjdGVkLCBhbmQgaGFkIGxhaWQgaXQgZG93biBtb3JlIHF1aWNrbHkgdGhhbiBvdGhlcnMgaGFkIGV4cGVjdGVkLiBBbmQgaW4gdHJ1dGggaGlzIGRpc2JhbmRpbmcgb2YgaGlzIGFybWllcyB3YXMgYSBwZXJwZXR1YWwgd2l0bmVzcyB0byB0aGUgdHJ1dGggb2YgaGlzIHdvcmRzLiBCdXQgYXQgdGhpcyB0aW1lIGhlIHRob3VnaHQgdGhhdCBDYWVzYXIgd2FzIG5vdCBnb2luZyB0byBkaXNtaXNzIGhpcyBmb3JjZXMsIGFuZCB0aGVyZWZvcmUgc291Z2h0IHRvIG1ha2UgaGltc2VsZiBzdHJvbmcgYWdhaW5zdCBoaW0gYnkgbWVhbnMgb2YgbWFnaXN0cmFjaWVzIGluIHRoZSBjaXR5LiBCZXlvbmQgdGhpcywgaG93ZXZlciwgaGUgYXR0ZW1wdGVkIG5vIHJldm9sdXRpb25hcnkgY2hhbmdlcywgbm9yIGRpZCBoZSB3aXNoIHRvIGJlIHRob3VnaHQgdG8gZGlzdHJ1c3QgQ2Flc2FyLCBidXQgcmF0aGVyIHRvIG5lZ2xlY3QgYW5kIGRlc3Bpc2UgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['54.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHNhdyB0aGF0IHRoZSBtYWdpc3RyYWNpZXMgd2VyZSBub3QgYmVzdG93ZWQgYWNjb3JkaW5nIHRvIGhpcyB3aXNoZXMsIGJlY2F1c2UgdGhlIGNpdGl6ZW5zIHdlcmUgYnJpYmVkLCBoZSBzdWZmZXJlZCBhbiBhbmFyY2h5IHRvIGFyaXNlIGluIHRoZSBjaXR5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGF0IGlzLCBubyBjb25zdWxzIHdlcmUgZWxlY3RlZC48L25vdGU+OyBhbmQgZm9ydGh3aXRoIHRoZXJlIHdhcyBwcmV2YWxlbnQgbXVjaCB0YWxrIGluIGZhdm91ciBvZiBhIGRpY3RhdG9yLCB3aGljaCBMdWNpbGl1cyB0aGUgcG9wdWxhciB0cmlidW5lIGZpcnN0IHZlbnR1cmVkIHRvIG1ha2UgcHVibGljLCB3aGVuIGhlIGFkdmlzZWQgdGhlIHBlb3BsZSB0byBlbGVjdCBQb21wZXkgZGljdGF0b3IuIEJ1dCBDYXRvIGF0dGFja2VkIGhpbSwgYW5kIEx1Y2lsaXVzIGNhbWUgbmVhciBsb3NpbmcgaGlzIHRyaWJ1bmF0ZSwgYW5kIG1hbnkgb2YgUG9tcGV5J3MgZnJpZW5kcyBjYW1lIGZvcndhcmQgaW4gZGVmZW5jZSBvZiBoaW0sIGRlY2xhcmluZyB0aGF0IGhlIG5laXRoZXIgYXNrZWQgbm9yIGRlc2lyZWQgdGhhdCBvZmZpY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['54.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIENhdG8gYXBwbGF1ZGVkIFBvbXBleSBhbmQgdXJnZWQgaGltIHRvIGRldm90ZSBoaW1zZWxmIHRvIHRoZSBjYXVzZSBvZiBsYXcgYW5kIG9yZGVyLCBmb3IgdGhlIHRpbWUgYmVpbmcgaGUgZGlkIHNvLCBvdXQgb2Ygc2hhbWUsIGFuZCBEb21pdGl1cyBhbmQgTWVzc2FsYSB3ZXJlIGluc3RhbGxlZCBpbiB0aGUgY29uc3Vsc2hpcDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNTMgQi5DLiwgc2V2ZW4gbW9udGhzIGFmdGVyIHRoZSByZWd1bGFyIHRpbWUuPC9ub3RlPjsgYnV0IGFmdGVyd2FyZHMgYW4gYW5hcmNoeSBhcm9zZSBhZ2FpbiwgYW5kIG1vcmUgcGVvcGxlIG5vdyBhZ2l0YXRlZCB0aGUgcXVlc3Rpb24gb2YgYSBkaWN0YXRvcnNoaXAgbW9yZSBib2xkbHkuIFRoZXJlZm9yZSBDYXRvIGFuZCBoaXMgcGFydHksIGZlYXJpbmcgbGVzdCB0aGV5IHNob3VsZCBiZSBvdmVyYm9ybmUsIGRldGVybWluZWQgdG8gYWxsb3cgUG9tcGV5IGEgY2VydGFpbiBsZWdhbGl6ZWQgb2ZmaWNlLCBhbmQgc28gdG8gZGl2ZXJ0IGhpbSBmcm9tIHRoZSB1bm1peGVkIHR5cmFubnkgb2YgYSBkaWN0YXRvcnNoaXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['54.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNvbnNlcXVlbnRseSwgQmlidWx1cywgd2hvIHdhcyBhbiBlbmVteSBvZiBQb21wZXksIHdhcyBmaXJzdCB0byBwcm9wb3NlIGluIHRoZSBzZW5hdGUgdGhhdCBQb21wZXkgYmUgY2hvc2VuIHNvbGUgY29uc3VsOyBmb3IgdGh1cywgaGUgc2FpZCwgdGhlIGNpdHkgd291bGQgZWl0aGVyIGJlIHNldCBmcmVlIGZyb20gdGhlIHByZXZhaWxpbmcgZGlzb3JkZXIsIG9yIHdvdWxkIGJlY29tZSB0aGUgc2xhdmUgb2YgaXRzIHN0cm9uZ2VzdCBtYW4uIFRoZSBwcm9wb3NhbCBzZWVtZWQgc3RyYW5nZSwgY29uc2lkZXJpbmcgdGhlIG1hbiB3aG8gbWFkZSBpdDsgYnV0IENhdG8gcm9zZSwgbGVhZGluZyBldmVyeWJvZHkgdG8gdGhpbmsgdGhhdCBoZSB3YXMgZ29pbmcgdG8gc3BlYWsgYWdhaW5zdCBpdCwgYW5kIHdoZW4gc2lsZW5jZSB3YXMgbWFkZSwgc2FpZCB0aGF0IGhlIGhpbXNlbGYgd291bGQgbm90IGhhdmUgaW50cm9kdWNlZCB0aGUgcHJvcG9zZWQgbWVhc3VyZSwgYnV0IHRoYXQgc2luY2UgaXQgaGFkIGJlZW4gaW50cm9kdWNlZCBieSBhbm90aGVyLCBoZSB1cmdlZCBpdHMgYWRvcHRpb24sIGJlY2F1c2UgaGUgcHJlZmVycmVkIGFueSBnb3Zlcm5tZW50IHdoYXRldmVyIHRvIG5vIGdvdmVybm1lbnQgYXQgYWxsLCBhbmQgdGhvdWdodCB0aGF0IG5vIG9uZSB3b3VsZCBnb3Zlcm4gYmV0dGVyIHRoYW4gUG9tcGV5IGluIGEgdGltZSBvZiBzdWNoIGRpc29yZGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['54.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgYWNjZXB0ZWQgdGhlIG1lYXN1cmUsIGFuZCBkZWNyZWVkIHRoYXQgUG9tcGV5LCBpZiBlbGVjdGVkIGNvbnN1bCwgc2hvdWxkIGdvdmVybiBhbG9uZSwgYnV0IHRoYXQgaWYgaGUgaGltc2VsZiBkZXNpcmVkIGEgY29sbGVhZ3VlLCBoZSBtaWdodCBjaG9vc2Ugd2hvbSBoZSB0aG91Z2h0IGZpdCBhZnRlciB0d28gbW9udGhzIGhhZCBmdWxseSBleHBpcmVkLiBIYXZpbmcgaW4gdGhpcyB3YXkgYmVlbiBtYWRlIGNvbnN1bDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNTIgQi5DLjwvbm90ZT4gYW5kIHNvIGRlY2xhcmVkIGJ5IFN1bHBpY2l1cywgdGhlIEludGVycmV4LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T25lIHdobyBoZWxkIHN1cHJlbWUgcG93ZXIgaW4gdGhlIGFic2VuY2Ugb2YgcmVndWxhcmx5IGVsZWN0ZWQgY29uc3Vscy48L25vdGU+IFBvbXBleSBhZGRyZXNzZWQgaGltc2VsZiBpbiBhIGZyaWVuZGx5IG1hbm5lciB0byBDYXRvLCBhY2tub3dsZWRnaW5nIHRoYXQgaGUgd2FzIG11Y2ggaW5kZWJ0ZWQgdG8gaGltLCBhbmQgaW52aXRpbmcgaGltIHRvIGdpdmUgYWR2aWNlIGluIGEgcHJpdmF0ZSBjYXBhY2l0eSBvbiB0aGUgY29uZHVjdCBvZiB0aGUgZ292ZXJubWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['54.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvIHdvdWxkIG5vdCBhZG1pdCB0aGF0IFBvbXBleSB3YXMgaW5kZWJ0ZWQgdG8gaGltLCBkZWNsYXJpbmcgdGhhdCBub25lIG9mIGhpcyB3b3JkcyBoYWQgYmVlbiBzcG9rZW4gaW4gdGhlIGludGVyZXN0cyBvZiBQb21wZXksIGJ1dCBpbiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBjaXR5OyBhbmQgdGhhdCBoZSB3b3VsZCBnaXZlIGhpbSBhZHZpY2UgaW4gYSBwcml2YXRlIGNhcGFjaXR5IGlmIGhlIHdlcmUgaW52aXRlZCwgYW5kIGluIGNhc2UgaGUgc2hvdWxkIG5vdCBiZSBpbnZpdGVkLCB3b3VsZCBwdWJsaWNseSBtYWtlIGtub3duIGhpcyBvcGluaW9uLiBTdWNoLCBpbmRlZWQsIHdhcyBDYXRvIGluIGV2ZXJ5dGhpbmcuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPiBQb21wZXkgbm93IGVudGVyZWQgdGhlIGNpdHksIGFuZCBtYXJyaWVkIENvcm5lbGlhLCBhIGRhdWdodGVyIG9mIE1ldGVsbHVzIFNjaXBpby4gU2hlIHdhcyBub3QgYSB2aXJnaW4sIGJ1dCBoYWQgbGF0ZWx5IGJlZW4gbGVmdCBhIHdpZG93IGJ5IFB1YmxpdXMsIHRoZSBzb24gb2YgQ3Jhc3N1cywgd2hvc2UgdmlyZ2luIGJyaWRlIHNoZSBoYWQgYmVlbiBiZWZvcmUgaGlzIGRlYXRoIGluIFBhcnRoaWEuIFRoZSB5b3VuZyB3b21hbiBoYWQgbWFueSBjaGFybXMgYXBhcnQgZnJvbSBoZXIgeW91dGhmdWwgYmVhdXR5LiBTaGUgd2FzIHdlbGwgdmVyc2VkIGluIGxpdGVyYXR1cmUsIGluIHBsYXlpbmcgdGhlIGx5cmUsIGFuZCBpbiBnZW9tZXRyeSwgYW5kIGhhZCBiZWVuIGFjY3VzdG9tZWQgdG8gbGlzdGVuIHRvIHBoaWxvc29waGljYWwgZGlzY291cnNlcyB3aXRoIHByb2ZpdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gYWRkaXRpb24gdG8gdGhpcywgc2hlIGhhZCBhIG5hdHVyZSB3aGljaCB3YXMgZnJlZSBmcm9tIHRoYXQgdW5wbGVhc2FudCBvZmZpY2lvdXNuZXNzIHdoaWNoIHN1Y2ggYWNjb21wbGlzaG1lbnRzIGFyZSBhcHQgdG8gaW1wYXJ0IHRvIHlvdW5nIHdvbWVuOyBhbmQgaGVyIGZhdGhlcidzIGxpbmVhZ2UgYW5kIHJlcHV0YXRpb24gd2VyZSBhYm92ZSByZXByb2FjaC4gTmV2ZXJ0aGVsZXNzLCB0aGUgbWFycmlhZ2Ugd2FzIGRpc3BsZWFzaW5nIHRvIHNvbWUgb24gYWNjb3VudCBvZiB0aGUgZGlzcGFyaXR5IGluIHllYXJzOyBmb3IgQ29ybmVsaWEncyB5b3V0aCBtYWRlIGhlciBhIGZpdHRlciBtYXRjaCBmb3IgYSBzb24gb2YgUG9tcGV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSwgdG9vLCB3aG8gd2VyZSBtb3JlIGNyaXRpY2FsLCBjb25zaWRlcmVkIHRoYXQgUG9tcGV5IHdhcyBuZWdsZWN0ZnVsIG9mIHRoZSB1bmhhcHB5IGNvbmRpdGlvbiBvZiB0aGUgY2l0eSwgd2hpY2ggaGFkIGNob3NlbiBoaW0gYXMgaGVyIHBoeXNpY2lhbiBhbmQgcHV0IGhlcnNlbGYgaW4gaGlzIHNvbGUgY2hhcmdlOyB3aGVyZWFzIGhlIHdhcyBkZWNraW5nIGhpbXNlbGYgd2l0aCBnYXJsYW5kcyBhbmQgY2VsZWJyYXRpbmcgbnVwdGlhbHMsIHRob3VnaCBoZSBvdWdodCB0byBoYXZlIHJlZ2FyZGVkIGhpcyB2ZXJ5IGNvbnN1bHNoaXAgYXMgYSBjYWxhbWl0eSwgc2luY2UgaXQgd291bGQgbm90IGhhdmUgYmVlbiBnaXZlbiBoaW0gaW4gc3VjaCBhbiBpbGxlZ2FsIG1hbm5lciBoYWQgaGlzIGNvdW50cnkgYmVlbiBwcm9zcGVyb3VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgYWx0aG91Z2ggaGUgcHJlc2lkZWQgb3ZlciB0aGUgc3VpdHMgZm9yIGNvcnJ1cHRpb24gYW5kIGJyaWJlcnksIGFuZCBpbnRyb2R1Y2VkIGxhd3MgZm9yIHRoZSBjb25kdWN0IG9mIHRoZSB0cmlhbHMsIGFuZCBpbiBhbGwgb3RoZXIgY2FzZXMgYWN0ZWQgYXMgYXJiaXRlciB3aXRoIGRpZ25pdHkgYW5kIGZhaXJuZXNzLCBtYWtpbmcgdGhlIGNvdXJ0LXJvb21zIHNhZmUsIG9yZGVybHksIGFuZCBxdWlldCBieSBoaXMgcHJlc2VuY2UgdGhlcmUgd2l0aCBhbiBhcm1lZCBmb3JjZSwgc3RpbGwsIHdoZW4gU2NpcGlvLCBoaXMgZmF0aGVyLWluLWxhdywgd2FzIHB1dCBvbiB0cmlhbCwgaGUgc3VtbW9uZWQgdGhlIHRocmVlIGh1bmRyZWQgYW5kIHNpeHR5IGp1cm9ycyB0byBoaXMgaG91c2UgYW5kIHNvbGljaXRlZCB0aGVpciBzdXBwb3J0LCBhbmQgdGhlIHByb3NlY3V0b3IgYWJhbmRvbmVkIHRoZSBjYXNlIHdoZW4gaGUgc2F3IFNjaXBpbyBjb25kdWN0ZWQgZnJvbSB0aGUgZm9ydW0gYnkgdGhlIGp1cm9ycy4gT25jZSBtb3JlLCB0aGVyZWZvcmUsIFBvbXBleSB3YXMgaW4gaWxsIHJlcHV0ZSwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoaXMgd2FzIHN0aWxsIGZ1cnRoZXIgaW5jcmVhc2VkIGJlY2F1c2UsIGFsdGhvdWdoIGhlIGhhZCBwdXQgYSBzdG9wIGJ5IGxhdyB0byBlbmNvbWl1bXMgb24gcGVyc29ucyB1bmRlciB0cmlhbCwgaGUgaGltc2VsZiBjYW1lIGludG8gY291cnQgdG8gcHJvbm91bmNlIGFuIGVuY29taXVtIG9uIFBsYW5jdXMuIENhdG8sIHdobyBoYXBwZW5lZCB0byBiZSBvbmUgb2YgdGhlIGp1cm9ycywgY2xhcHBlZCBoaXMgaGFuZHMgdG8gaGlzIGVhcnMgYW5kIHNhaWQgaXQgd2FzIG5vdCByaWdodCBmb3IgaGltLCBjb250cmFyeSB0byB0aGUgbGF3LCB0byBsaXN0ZW4gdG8gZW5jb21pdW1zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5DYXRvIHdhcyB0aGVyZWZvcmUgc2V0IGFzaWRlIGJlZm9yZSBoZSBjb3VsZCBjYXN0IGhpcyB2b3RlLCBidXQgUGxhbmN1cyB3YXMgY29udmljdGVkIGJ5IHRoZSBvdGhlciB2b3RlcywgdG8gdGhlIGRpc2dyYWNlIG9mIFBvbXBleS4gRm9yLCBhIGZldyBkYXlzIGFmdGVyd2FyZHMsIEh5cHNhZXVzLCBhIG1hbiBvZiBjb25zdWxhciBkaWduaXR5LCB3aG8gd2FzIHVuZGVyIHByb3NlY3V0aW9uLCBsYXkgaW4gd2FpdCBmb3IgUG9tcGV5IGFzIGhlIHdhcyByZXR1cm5pbmcgZnJvbSBoaXMgYmF0aCBmb3Igc3VwcGVyLCBjbGFzcGVkIGhpcyBrbmVlcywgYW5kIHN1cHBsaWNhdGVkIGhpcyBmYXZvdXI7IGJ1dCBQb21wZXkgcGFzc2VkIGFsb25nIGNvbnRlbXB0dW91c2x5LCB0ZWxsaW5nIGhpbSB0aGF0LCBleGNlcHQgZm9yIHNwb2lsaW5nIGhpcyBzdXBwZXIsIGhlIHdhcyBhY2NvbXBsaXNoaW5nIG5vdGhpbmcuIEluIHRoaXMgd2F5IGhlIGdvdCB0aGUgcmVwdXRhdGlvbiBvZiBiZWluZyBwYXJ0aWFsLCBhbmQgd2FzIGJsYW1lZCBmb3IgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkV2ZXJ5dGhpbmcgZWxzZSwgaG93ZXZlciwgaGUgc3VjY2VlZGVkIGluIGJyaW5naW5nIGludG8gZ29vZCBvcmRlciwgYW5kIGNob3NlIGhpcyBmYXRoZXItaW4tbGF3IGFzIGhpcyBjb2xsZWFndWUgZm9yIHRoZSByZW1haW5pbmcgZml2ZSBtb250aHMgb2YgdGhlIHllYXIuIEl0IHdhcyBhbHNvIGRlY3JlZWQgdGhhdCBoZSBzaG91bGQgcmV0YWluIGhpcyBwcm92aW5jZXMgZm9yIGFub3RoZXIgZm91ciB5ZWFycywgYW5kIHJlY2VpdmUgYSB0aG91c2FuZCB0YWxlbnRzIHllYXJseSwgb3V0IG9mIHdoaWNoIGhlIHdhcyB0byBmZWVkIGFuZCBtYWludGFpbiBoaXMgc29sZGllcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['55.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IFBvbXBleSBub3cgZW50ZXJlZCB0aGUgY2l0eSwgYW5kIG1hcnJpZWQgQ29ybmVsaWEsIGEgZGF1Z2h0ZXIgb2YgTWV0ZWxsdXMgU2NpcGlvLiBTaGUgd2FzIG5vdCBhIHZpcmdpbiwgYnV0IGhhZCBsYXRlbHkgYmVlbiBsZWZ0IGEgd2lkb3cgYnkgUHVibGl1cywgdGhlIHNvbiBvZiBDcmFzc3VzLCB3aG9zZSB2aXJnaW4gYnJpZGUgc2hlIGhhZCBiZWVuIGJlZm9yZSBoaXMgZGVhdGggaW4gUGFydGhpYS4gVGhlIHlvdW5nIHdvbWFuIGhhZCBtYW55IGNoYXJtcyBhcGFydCBmcm9tIGhlciB5b3V0aGZ1bCBiZWF1dHkuIFNoZSB3YXMgd2VsbCB2ZXJzZWQgaW4gbGl0ZXJhdHVyZSwgaW4gcGxheWluZyB0aGUgbHlyZSwgYW5kIGluIGdlb21ldHJ5LCBhbmQgaGFkIGJlZW4gYWNjdXN0b21lZCB0byBsaXN0ZW4gdG8gcGhpbG9zb3BoaWNhbCBkaXNjb3Vyc2VzIHdpdGggcHJvZml0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['55.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGFkZGl0aW9uIHRvIHRoaXMsIHNoZSBoYWQgYSBuYXR1cmUgd2hpY2ggd2FzIGZyZWUgZnJvbSB0aGF0IHVucGxlYXNhbnQgb2ZmaWNpb3VzbmVzcyB3aGljaCBzdWNoIGFjY29tcGxpc2htZW50cyBhcmUgYXB0IHRvIGltcGFydCB0byB5b3VuZyB3b21lbjsgYW5kIGhlciBmYXRoZXIncyBsaW5lYWdlIGFuZCByZXB1dGF0aW9uIHdlcmUgYWJvdmUgcmVwcm9hY2guIE5ldmVydGhlbGVzcywgdGhlIG1hcnJpYWdlIHdhcyBkaXNwbGVhc2luZyB0byBzb21lIG9uIGFjY291bnQgb2YgdGhlIGRpc3Bhcml0eSBpbiB5ZWFyczsgZm9yIENvcm5lbGlhJ3MgeW91dGggbWFkZSBoZXIgYSBmaXR0ZXIgbWF0Y2ggZm9yIGEgc29uIG9mIFBvbXBleS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['55.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRob3NlLCB0b28sIHdobyB3ZXJlIG1vcmUgY3JpdGljYWwsIGNvbnNpZGVyZWQgdGhhdCBQb21wZXkgd2FzIG5lZ2xlY3RmdWwgb2YgdGhlIHVuaGFwcHkgY29uZGl0aW9uIG9mIHRoZSBjaXR5LCB3aGljaCBoYWQgY2hvc2VuIGhpbSBhcyBoZXIgcGh5c2ljaWFuIGFuZCBwdXQgaGVyc2VsZiBpbiBoaXMgc29sZSBjaGFyZ2U7IHdoZXJlYXMgaGUgd2FzIGRlY2tpbmcgaGltc2VsZiB3aXRoIGdhcmxhbmRzIGFuZCBjZWxlYnJhdGluZyBudXB0aWFscywgdGhvdWdoIGhlIG91Z2h0IHRvIGhhdmUgcmVnYXJkZWQgaGlzIHZlcnkgY29uc3Vsc2hpcCBhcyBhIGNhbGFtaXR5LCBzaW5jZSBpdCB3b3VsZCBub3QgaGF2ZSBiZWVuIGdpdmVuIGhpbSBpbiBzdWNoIGFuIGlsbGVnYWwgbWFubmVyIGhhZCBoaXMgY291bnRyeSBiZWVuIHByb3NwZXJvdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['55.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhbHRob3VnaCBoZSBwcmVzaWRlZCBvdmVyIHRoZSBzdWl0cyBmb3IgY29ycnVwdGlvbiBhbmQgYnJpYmVyeSwgYW5kIGludHJvZHVjZWQgbGF3cyBmb3IgdGhlIGNvbmR1Y3Qgb2YgdGhlIHRyaWFscywgYW5kIGluIGFsbCBvdGhlciBjYXNlcyBhY3RlZCBhcyBhcmJpdGVyIHdpdGggZGlnbml0eSBhbmQgZmFpcm5lc3MsIG1ha2luZyB0aGUgY291cnQtcm9vbXMgc2FmZSwgb3JkZXJseSwgYW5kIHF1aWV0IGJ5IGhpcyBwcmVzZW5jZSB0aGVyZSB3aXRoIGFuIGFybWVkIGZvcmNlLCBzdGlsbCwgd2hlbiBTY2lwaW8sIGhpcyBmYXRoZXItaW4tbGF3LCB3YXMgcHV0IG9uIHRyaWFsLCBoZSBzdW1tb25lZCB0aGUgdGhyZWUgaHVuZHJlZCBhbmQgc2l4dHkganVyb3JzIHRvIGhpcyBob3VzZSBhbmQgc29saWNpdGVkIHRoZWlyIHN1cHBvcnQsIGFuZCB0aGUgcHJvc2VjdXRvciBhYmFuZG9uZWQgdGhlIGNhc2Ugd2hlbiBoZSBzYXcgU2NpcGlvIGNvbmR1Y3RlZCBmcm9tIHRoZSBmb3J1bSBieSB0aGUganVyb3JzLiBPbmNlIG1vcmUsIHRoZXJlZm9yZSwgUG9tcGV5IHdhcyBpbiBpbGwgcmVwdXRlLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['55.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGlzIHdhcyBzdGlsbCBmdXJ0aGVyIGluY3JlYXNlZCBiZWNhdXNlLCBhbHRob3VnaCBoZSBoYWQgcHV0IGEgc3RvcCBieSBsYXcgdG8gZW5jb21pdW1zIG9uIHBlcnNvbnMgdW5kZXIgdHJpYWwsIGhlIGhpbXNlbGYgY2FtZSBpbnRvIGNvdXJ0IHRvIHByb25vdW5jZSBhbiBlbmNvbWl1bSBvbiBQbGFuY3VzLiBDYXRvLCB3aG8gaGFwcGVuZWQgdG8gYmUgb25lIG9mIHRoZSBqdXJvcnMsIGNsYXBwZWQgaGlzIGhhbmRzIHRvIGhpcyBlYXJzIGFuZCBzYWlkIGl0IHdhcyBub3QgcmlnaHQgZm9yIGhpbSwgY29udHJhcnkgdG8gdGhlIGxhdywgdG8gbGlzdGVuIHRvIGVuY29taXVtcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['55.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gd2FzIHRoZXJlZm9yZSBzZXQgYXNpZGUgYmVmb3JlIGhlIGNvdWxkIGNhc3QgaGlzIHZvdGUsIGJ1dCBQbGFuY3VzIHdhcyBjb252aWN0ZWQgYnkgdGhlIG90aGVyIHZvdGVzLCB0byB0aGUgZGlzZ3JhY2Ugb2YgUG9tcGV5LiBGb3IsIGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcywgSHlwc2FldXMsIGEgbWFuIG9mIGNvbnN1bGFyIGRpZ25pdHksIHdobyB3YXMgdW5kZXIgcHJvc2VjdXRpb24sIGxheSBpbiB3YWl0IGZvciBQb21wZXkgYXMgaGUgd2FzIHJldHVybmluZyBmcm9tIGhpcyBiYXRoIGZvciBzdXBwZXIsIGNsYXNwZWQgaGlzIGtuZWVzLCBhbmQgc3VwcGxpY2F0ZWQgaGlzIGZhdm91cjsgYnV0IFBvbXBleSBwYXNzZWQgYWxvbmcgY29udGVtcHR1b3VzbHksIHRlbGxpbmcgaGltIHRoYXQsIGV4Y2VwdCBmb3Igc3BvaWxpbmcgaGlzIHN1cHBlciwgaGUgd2FzIGFjY29tcGxpc2hpbmcgbm90aGluZy4gSW4gdGhpcyB3YXkgaGUgZ290IHRoZSByZXB1dGF0aW9uIG9mIGJlaW5nIHBhcnRpYWwsIGFuZCB3YXMgYmxhbWVkIGZvciBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['55.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkV2ZXJ5dGhpbmcgZWxzZSwgaG93ZXZlciwgaGUgc3VjY2VlZGVkIGluIGJyaW5naW5nIGludG8gZ29vZCBvcmRlciwgYW5kIGNob3NlIGhpcyBmYXRoZXItaW4tbGF3IGFzIGhpcyBjb2xsZWFndWUgZm9yIHRoZSByZW1haW5pbmcgZml2ZSBtb250aHMgb2YgdGhlIHllYXIuIEl0IHdhcyBhbHNvIGRlY3JlZWQgdGhhdCBoZSBzaG91bGQgcmV0YWluIGhpcyBwcm92aW5jZXMgZm9yIGFub3RoZXIgZm91ciB5ZWFycywgYW5kIHJlY2VpdmUgYSB0aG91c2FuZCB0YWxlbnRzIHllYXJseSwgb3V0IG9mIHdoaWNoIGhlIHdhcyB0byBmZWVkIGFuZCBtYWludGFpbiBoaXMgc29sZGllcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgdGhlIGZyaWVuZHMgb2YgQ2Flc2FyIHRvb2sgb2NjYXNpb24gZnJvbSB0aGlzIHRvIGRlbWFuZCB0aGF0IHNvbWUgY29uc2lkZXJhdGlvbiBiZSBzaG93biBmb3IgQ2Flc2FyIGFsc28sIHdobyB3YXMgd2FnaW5nIHNvIG1hbnkgY29udGVzdHMgaW4gYmVoYWxmIG9mIHRoZSBSb21hbiBzdXByZW1hY3k7IHRoZXkgc2FpZCBoZSBkZXNlcnZlZCBlaXRoZXIgYW5vdGhlciBjb25zdWxzaGlwLCBvciB0aGUgcHJvbG9uZ2F0aW9uIG9mIGhpcyBjb21tYW5kLCBzbyB0aGF0IG5vIG9uZSBlbHNlIG1pZ2h0IHN1Y2NlZWQgdG8gaGlzIGxhYm91cnMgYW5kIHJvYiBoaW0gb2YgdGhlIGdsb3J5IG9mIHRoZW0sIGJ1dCB0aGF0IHRoZSBvbmUgd2hvIGhhZCBwZXJmb3JtZWQgdGhlbSBtaWdodCBoaW1zZWxmIGNvbnRpbnVlIGluIHBvd2VyIGFuZCBlbmpveSBoaXMgaG9ub3VycyB1bmRpc3R1cmJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QSBkZWJhdGUgYXJvc2Ugb24gdGhlc2UgbWF0dGVycywgZHVyaW5nIHdoaWNoIFBvbXBleSwgZ2l2aW5nIHRoZSBpbXByZXNzaW9uIHRoYXQgaXQgd2FzIGdvb2R3aWxsIHRvd2FyZHMgQ2Flc2FyIHRoYXQgbGVkIGhpbSB0byBkZXByZWNhdGUgdGhlIG9kaXVtIGluIHdoaWNoIENhZXNhciBzdG9vZCwgc2FpZCBoZSBoYWQgbGV0dGVycyBmcm9tIENhZXNhciB3aGVyZWluIGhlIGV4cHJlc3NlZCBhIHdpc2ggdG8gaGF2ZSBhIHN1Y2Nlc3NvciBhbmQgYmUgcmVsaWV2ZWQgb2YgaGlzIGNvbW1hbmQ7IGhlIHRob3VnaHQgaXQgcmlnaHQsIGhvd2V2ZXIsIHRoYXQgaGUgc2hvdWxkIGJlIHBlcm1pdHRlZCB0byBzdGFuZCBmb3IgdGhlIGNvbnN1bHNoaXAgZXZlbiBpbiBoaXMgYWJzZW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T3Bwb3NpdGlvbiB0byB0aGlzIHdhcyBtYWRlIGJ5IENhdG8gYW5kIGhpcyBwYXJ0eSwgd2hvIHVyZ2VkIHRoYXQgQ2Flc2FyIG11c3QgbGF5IGRvd24gaGlzIGFybXMgYW5kIGJlY29tZSBhIHByaXZhdGUgY2l0aXplbiBiZWZvcmUgaGUgY291bGQgb2J0YWluIGFueSBmYXZvdXIgZnJvbSBoaXMgZmVsbG93LWNpdGl6ZW5zOyBhbmQgc2luY2UgUG9tcGV5IG1hZGUgbm8gY29udGVudGlvbiwgYnV0IGFzIGl0IHdlcmUgYWNjZXB0ZWQgZGVmZWF0LCB0aGVyZSB3YXMgbW9yZSBzdXNwaWNpb24gYWJvdXQgaGlzIHNlbnRpbWVudHMgdG93YXJkcyBDYWVzYXIuIEhlIGFsc28gc2VudCBhbmQgYXNrZWQgYmFjayB0aGUgdHJvb3BzIHdoaWNoIGhlIGhhZCBsZW50IGhpbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDUyLjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgbGlpLiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBtYWtpbmcgdGhlIFBhcnRoaWFuIHdhciBoaXMgcHJldGV4dCBmb3IgZG9pbmcgc28uIEFuZCBhbHRob3VnaCBDYWVzYXIga25ldyB0aGUgcmVhbCByZWFzb25zIGZvciBhc2tpbmcgYmFjayB0aGUgc29sZGllcnMsIGhlIHNlbnQgdGhlbSBob21lIHdpdGggZ2VuZXJvdXMgZ2lmdHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['56.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCB0aGUgZnJpZW5kcyBvZiBDYWVzYXIgdG9vayBvY2Nhc2lvbiBmcm9tIHRoaXMgdG8gZGVtYW5kIHRoYXQgc29tZSBjb25zaWRlcmF0aW9uIGJlIHNob3duIGZvciBDYWVzYXIgYWxzbywgd2hvIHdhcyB3YWdpbmcgc28gbWFueSBjb250ZXN0cyBpbiBiZWhhbGYgb2YgdGhlIFJvbWFuIHN1cHJlbWFjeTsgdGhleSBzYWlkIGhlIGRlc2VydmVkIGVpdGhlciBhbm90aGVyIGNvbnN1bHNoaXAsIG9yIHRoZSBwcm9sb25nYXRpb24gb2YgaGlzIGNvbW1hbmQsIHNvIHRoYXQgbm8gb25lIGVsc2UgbWlnaHQgc3VjY2VlZCB0byBoaXMgbGFib3VycyBhbmQgcm9iIGhpbSBvZiB0aGUgZ2xvcnkgb2YgdGhlbSwgYnV0IHRoYXQgdGhlIG9uZSB3aG8gaGFkIHBlcmZvcm1lZCB0aGVtIG1pZ2h0IGhpbXNlbGYgY29udGludWUgaW4gcG93ZXIgYW5kIGVuam95IGhpcyBob25vdXJzIHVuZGlzdHVyYmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['56.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkEgZGViYXRlIGFyb3NlIG9uIHRoZXNlIG1hdHRlcnMsIGR1cmluZyB3aGljaCBQb21wZXksIGdpdmluZyB0aGUgaW1wcmVzc2lvbiB0aGF0IGl0IHdhcyBnb29kd2lsbCB0b3dhcmRzIENhZXNhciB0aGF0IGxlZCBoaW0gdG8gZGVwcmVjYXRlIHRoZSBvZGl1bSBpbiB3aGljaCBDYWVzYXIgc3Rvb2QsIHNhaWQgaGUgaGFkIGxldHRlcnMgZnJvbSBDYWVzYXIgd2hlcmVpbiBoZSBleHByZXNzZWQgYSB3aXNoIHRvIGhhdmUgYSBzdWNjZXNzb3IgYW5kIGJlIHJlbGlldmVkIG9mIGhpcyBjb21tYW5kOyBoZSB0aG91Z2h0IGl0IHJpZ2h0LCBob3dldmVyLCB0aGF0IGhlIHNob3VsZCBiZSBwZXJtaXR0ZWQgdG8gc3RhbmQgZm9yIHRoZSBjb25zdWxzaGlwIGV2ZW4gaW4gaGlzIGFic2VuY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['56.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9wcG9zaXRpb24gdG8gdGhpcyB3YXMgbWFkZSBieSBDYXRvIGFuZCBoaXMgcGFydHksIHdobyB1cmdlZCB0aGF0IENhZXNhciBtdXN0IGxheSBkb3duIGhpcyBhcm1zIGFuZCBiZWNvbWUgYSBwcml2YXRlIGNpdGl6ZW4gYmVmb3JlIGhlIGNvdWxkIG9idGFpbiBhbnkgZmF2b3VyIGZyb20gaGlzIGZlbGxvdy1jaXRpemVuczsgYW5kIHNpbmNlIFBvbXBleSBtYWRlIG5vIGNvbnRlbnRpb24sIGJ1dCBhcyBpdCB3ZXJlIGFjY2VwdGVkIGRlZmVhdCwgdGhlcmUgd2FzIG1vcmUgc3VzcGljaW9uIGFib3V0IGhpcyBzZW50aW1lbnRzIHRvd2FyZHMgQ2Flc2FyLiBIZSBhbHNvIHNlbnQgYW5kIGFza2VkIGJhY2sgdGhlIHRyb29wcyB3aGljaCBoZSBoYWQgbGVudCBoaW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTIuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciBsaWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG1ha2luZyB0aGUgUGFydGhpYW4gd2FyIGhpcyBwcmV0ZXh0IGZvciBkb2luZyBzby4gQW5kIGFsdGhvdWdoIENhZXNhciBrbmV3IHRoZSByZWFsIHJlYXNvbnMgZm9yIGFza2luZyBiYWNrIHRoZSBzb2xkaWVycywgaGUgc2VudCB0aGVtIGhvbWUgd2l0aCBnZW5lcm91cyBnaWZ0cy4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTIuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciBsaWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4gQWZ0ZXIgdGhpcyBQb21wZXkgaGFkIGEgZGFuZ2Vyb3VzIGlsbG5lc3MgYXQgTmFwbGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDUwIEIuQy48L25vdGU+IGJ1dCByZWNvdmVyZWQgZnJvbSBpdCwgYW5kIG9uIHRoZSBhZHZpY2Ugb2YgUHJheGFnb3JhcyB0aGUgTmVhcG9saXRhbnMgb2ZmZXJlZCBzYWNyaWZpY2VzIG9mIHRoYW5rc2dpdmluZyBmb3IgaGlzIHByZXNlcnZhdGlvbi4gVGhlaXIgZXhhbXBsZSB3YXMgZm9sbG93ZWQgYnkgdGhlIG5laWdoYm91cmluZyBwZW9wbGVzLCBhbmQgc28gdGhlIHRoaW5nIG1hZGUgaXRzIHdheSB0aHJvdWdob3V0IGFsbCBJdGFseSwgYW5kIGV2ZXJ5IGNpdHksIHNtYWxsIGFuZCBncmVhdCwgaGVsZCBmZXN0aXZhbCBmb3IgbWFueSBkYXlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5ObyBwbGFjZSBjb3VsZCBjb250YWluIHRob3NlIHdobyBjYW1lIHRvIGdyZWV0IGhpbSBmcm9tIGFsbCBxdWFydGVycywgYnV0IHJvYWRzIGFuZCB2aWxsYWdlcyBhbmQgcG9ydHMgd2VyZSBmaWxsZWQgd2l0aCBzYWNyaWZpY2luZyBhbmQgZmVhc3RpbmcgdGhyb25ncy4gTWFueSBhbHNvIHdpdGggZ2FybGFuZHMgb24gdGhlaXIgaGVhZHMgYW5kIGxpZ2h0ZWQgdG9yY2hlcyBpbiB0aGVpciBoYW5kcyB3ZWxjb21lZCBhbmQgZXNjb3J0ZWQgaGltIG9uIGhpcyB3YXksIHBlbHRpbmcgaGltIHdpdGggZmxvd2Vycywgc28gdGhhdCBoaXMgcHJvZ3Jlc3MgYW5kIHJldHVybiB0byBSb21lIHdhcyBhIG1vc3QgYmVhdXRpZnVsIGFuZCBzcGxlbmRpZCBzaWdodC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCB0aGlzIGlzIHNhaWQgdG8gaGF2ZSBkb25lIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlIHRvIGJyaW5nIGFib3V0IHRoZSB3YXIuIEZvciB3aGlsZSB0aGUgcHVibGljIHJlam9pY2luZyB3YXMgc28gZ3JlYXQsIGEgc3Bpcml0IG9mIGFycm9nYW5jZSBjYW1lIHVwb24gUG9tcGV5LCB3aGljaCB3ZW50IGJleW9uZCB0aGUgY2FsY3VsYXRpb25zIGJhc2VkIHVwb24gZmFjdHMsIGFuZCwgdGhyb3dpbmcgdG8gdGhlIHdpbmRzIHRoYXQgY2F1dGlvbiB3aGljaCBoYWQgdGh1cyBmYXIgYWx3YXlzIGdpdmVuIHNlY3VyaXR5IHRvIGhpcyBzdWNjZXNzZnVsIGFjaGlldmVtZW50cywgaGUgaW5kdWxnZWQgaGltc2VsZiBpbiB1bmxpbWl0ZWQgY29uZmlkZW5jZSBhbmQgY29udGVtcHQgZm9yIENhZXNhcidzIHBvd2VyLCBmZWVsaW5nIHRoYXQgaGUgd291bGQgbmVlZCBuZWl0aGVyIGFuIGFybWVkIGZvcmNlIHRvIG9wcG9zZSBoaW0gbm9yIGFueSBpcmtzb21lIGxhYm91ciBvZiBwcmVwYXJhdGlvbiwgYnV0IHRoYXQgaGUgd291bGQgcHVsbCBoaW0gZG93biBtdWNoIG1vcmUgZWFzaWx5IHRoYW4gaGUgaGFkIHJhaXNlZCBoaW0gdXAuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMgdGhpcywgQXBwaXVzIGNhbWUsIGJyaW5naW5nIGZyb20gR2F1bCB0aGUgdHJvb3BzIHdoaWNoIFBvbXBleSBoYWQgbGVudCBDYWVzYXIuIEhlIHNhaWQgbXVjaCB0byBiZWxpdHRsZSBDYWVzYXIncyBhY2hpZXZlbWVudHMgdGhlcmUsIGFuZCBnYXZlIG91dCBzY2FuZGFsb3VzIHN0b3JpZXMgYWJvdXQgQ2Flc2FyLiBIZSBhbHNvIHNhaWQgdGhhdCBQb21wZXkga25ldyBub3QgaGlzIG93biBwb3dlciBhbmQgcmVwdXRhdGlvbiBpZiBoZSBzdXJyb3VuZGVkIGhpbXNlbGYgd2l0aCBvdGhlciB0cm9vcHMgYWdhaW5zdCBDYWVzYXIsIGZvciBoZSBjb3VsZCBwdXQgZG93biBDYWVzYXIgd2l0aCBDYWVzYXIncyBvd24gc29sZGllcnMgYXMgc29vbiBhcyBoZSBhcHBlYXJlZCBvbiB0aGUgc2NlbmUsIHNvIGdyZWF0IHdhcyB0aGVpciBoYXRyZWQgb2YgQ2Flc2FyIGFuZCB0aGVpciB3YXJtIGFmZmVjdGlvbiBmb3IgUG9tcGV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIHdheSwgdGhlbiwgUG9tcGV5IHdhcyBlbGF0ZWQsIGFuZCBoaXMgY29uZmlkZW5jZSBmaWxsZWQgaGltIHdpdGggc28gZ3JlYXQgYSBjb250ZW1wdCBmb3IgaGlzIGFkdmVyc2FyeSB0aGF0IGhlIG1vY2tlZCBhdCB0aG9zZSB3aG8gd2VyZSBhZnJhaWQgb2YgdGhlIHdhcjsgYW5kIHdoZW4gc29tZSBzYWlkIHRoYXQgaWYgQ2Flc2FyIHNob3VsZCBtYXJjaCB1cG9uIHRoZSBjaXR5LCB0aGV5IGRpZCBub3Qgc2VlIGFueSBmb3JjZXMgd2l0aCB3aGljaCB0byBkZWZlbmQgaXQgZnJvbSBoaW0sIHdpdGggYSBzbWlsaW5nIGNvdW50ZW5hbmNlIGFuZCBjYWxtIG1pZW4gaGUgYmFkZSB0aGVtIGJlIGluIG5vIGNvbmNlcm47IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmluIHdoYXRldmVyIHBhcnQgb2YgSXRhbHkgSSBzdGFtcCB1cG9uIHRoZSBncm91bmQsIHRoZXJlIHdpbGwgc3ByaW5nIHVwIGFybWllcyBvZiBmb290IGFuZCBob3JzZS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IEFmdGVyIHRoaXMgUG9tcGV5IGhhZCBhIGRhbmdlcm91cyBpbGxuZXNzIGF0IE5hcGxlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDUwIEIuQy48L25vdGU+IGJ1dCByZWNvdmVyZWQgZnJvbSBpdCwgYW5kIG9uIHRoZSBhZHZpY2Ugb2YgUHJheGFnb3JhcyB0aGUgTmVhcG9saXRhbnMgb2ZmZXJlZCBzYWNyaWZpY2VzIG9mIHRoYW5rc2dpdmluZyBmb3IgaGlzIHByZXNlcnZhdGlvbi4gVGhlaXIgZXhhbXBsZSB3YXMgZm9sbG93ZWQgYnkgdGhlIG5laWdoYm91cmluZyBwZW9wbGVzLCBhbmQgc28gdGhlIHRoaW5nIG1hZGUgaXRzIHdheSB0aHJvdWdob3V0IGFsbCBJdGFseSwgYW5kIGV2ZXJ5IGNpdHksIHNtYWxsIGFuZCBncmVhdCwgaGVsZCBmZXN0aXZhbCBmb3IgbWFueSBkYXlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['57.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vIHBsYWNlIGNvdWxkIGNvbnRhaW4gdGhvc2Ugd2hvIGNhbWUgdG8gZ3JlZXQgaGltIGZyb20gYWxsIHF1YXJ0ZXJzLCBidXQgcm9hZHMgYW5kIHZpbGxhZ2VzIGFuZCBwb3J0cyB3ZXJlIGZpbGxlZCB3aXRoIHNhY3JpZmljaW5nIGFuZCBmZWFzdGluZyB0aHJvbmdzLiBNYW55IGFsc28gd2l0aCBnYXJsYW5kcyBvbiB0aGVpciBoZWFkcyBhbmQgbGlnaHRlZCB0b3JjaGVzIGluIHRoZWlyIGhhbmRzIHdlbGNvbWVkIGFuZCBlc2NvcnRlZCBoaW0gb24gaGlzIHdheSwgcGVsdGluZyBoaW0gd2l0aCBmbG93ZXJzLCBzbyB0aGF0IGhpcyBwcm9ncmVzcyBhbmQgcmV0dXJuIHRvIFJvbWUgd2FzIGEgbW9zdCBiZWF1dGlmdWwgYW5kIHNwbGVuZGlkIHNpZ2h0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['57.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhpcyBpcyBzYWlkIHRvIGhhdmUgZG9uZSBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSB0byBicmluZyBhYm91dCB0aGUgd2FyLiBGb3Igd2hpbGUgdGhlIHB1YmxpYyByZWpvaWNpbmcgd2FzIHNvIGdyZWF0LCBhIHNwaXJpdCBvZiBhcnJvZ2FuY2UgY2FtZSB1cG9uIFBvbXBleSwgd2hpY2ggd2VudCBiZXlvbmQgdGhlIGNhbGN1bGF0aW9ucyBiYXNlZCB1cG9uIGZhY3RzLCBhbmQsIHRocm93aW5nIHRvIHRoZSB3aW5kcyB0aGF0IGNhdXRpb24gd2hpY2ggaGFkIHRodXMgZmFyIGFsd2F5cyBnaXZlbiBzZWN1cml0eSB0byBoaXMgc3VjY2Vzc2Z1bCBhY2hpZXZlbWVudHMsIGhlIGluZHVsZ2VkIGhpbXNlbGYgaW4gdW5saW1pdGVkIGNvbmZpZGVuY2UgYW5kIGNvbnRlbXB0IGZvciBDYWVzYXIncyBwb3dlciwgZmVlbGluZyB0aGF0IGhlIHdvdWxkIG5lZWQgbmVpdGhlciBhbiBhcm1lZCBmb3JjZSB0byBvcHBvc2UgaGltIG5vciBhbnkgaXJrc29tZSBsYWJvdXIgb2YgcHJlcGFyYXRpb24sIGJ1dCB0aGF0IGhlIHdvdWxkIHB1bGwgaGltIGRvd24gbXVjaCBtb3JlIGVhc2lseSB0aGFuIGhlIGhhZCByYWlzZWQgaGltIHVwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['57.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMgdGhpcywgQXBwaXVzIGNhbWUsIGJyaW5naW5nIGZyb20gR2F1bCB0aGUgdHJvb3BzIHdoaWNoIFBvbXBleSBoYWQgbGVudCBDYWVzYXIuIEhlIHNhaWQgbXVjaCB0byBiZWxpdHRsZSBDYWVzYXIncyBhY2hpZXZlbWVudHMgdGhlcmUsIGFuZCBnYXZlIG91dCBzY2FuZGFsb3VzIHN0b3JpZXMgYWJvdXQgQ2Flc2FyLiBIZSBhbHNvIHNhaWQgdGhhdCBQb21wZXkga25ldyBub3QgaGlzIG93biBwb3dlciBhbmQgcmVwdXRhdGlvbiBpZiBoZSBzdXJyb3VuZGVkIGhpbXNlbGYgd2l0aCBvdGhlciB0cm9vcHMgYWdhaW5zdCBDYWVzYXIsIGZvciBoZSBjb3VsZCBwdXQgZG93biBDYWVzYXIgd2l0aCBDYWVzYXIncyBvd24gc29sZGllcnMgYXMgc29vbiBhcyBoZSBhcHBlYXJlZCBvbiB0aGUgc2NlbmUsIHNvIGdyZWF0IHdhcyB0aGVpciBoYXRyZWQgb2YgQ2Flc2FyIGFuZCB0aGVpciB3YXJtIGFmZmVjdGlvbiBmb3IgUG9tcGV5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['57.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgd2F5LCB0aGVuLCBQb21wZXkgd2FzIGVsYXRlZCwgYW5kIGhpcyBjb25maWRlbmNlIGZpbGxlZCBoaW0gd2l0aCBzbyBncmVhdCBhIGNvbnRlbXB0IGZvciBoaXMgYWR2ZXJzYXJ5IHRoYXQgaGUgbW9ja2VkIGF0IHRob3NlIHdobyB3ZXJlIGFmcmFpZCBvZiB0aGUgd2FyOyBhbmQgd2hlbiBzb21lIHNhaWQgdGhhdCBpZiBDYWVzYXIgc2hvdWxkIG1hcmNoIHVwb24gdGhlIGNpdHksIHRoZXkgZGlkIG5vdCBzZWUgYW55IGZvcmNlcyB3aXRoIHdoaWNoIHRvIGRlZmVuZCBpdCBmcm9tIGhpbSwgd2l0aCBhIHNtaWxpbmcgY291bnRlbmFuY2UgYW5kIGNhbG0gbWllbiBoZSBiYWRlIHRoZW0gYmUgaW4gbm8gY29uY2VybjsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvcjwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmluIHdoYXRldmVyIHBhcnQgb2YgSXRhbHkgSSBzdGFtcCB1cG9uIHRoZSBncm91bmQsIHRoZXJlIHdpbGwgc3ByaW5nIHVwIGFybWllcyBvZiBmb290IGFuZCBob3JzZS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgbm93LCB0b28sIENhZXNhciBkZXZvdGVkIGhpbXNlbGYgdG8gcHVibGljIGFmZmFpcnMgd2l0aCBncmVhdGVyIHZpZ291ci4gSGUgbm8gbG9uZ2VyIGtlcHQgaGltc2VsZiBmYXIgYXdheSBmcm9tIEl0YWx5LCB3YXMgYWx3YXlzIHNlbmRpbmcgaGlzIHNvbGRpZXJzIGJhY2sgdG8gdGhlIGNpdHkgdG8gdGFrZSBwYXJ0IGluIHRoZSBlbGVjdGlvbnMsIGFuZCBieSBtZWFucyBvZiBoaXMgbW9uZXkgd2FzIHNlY3JldGx5IHdvcmtpbmcgdXBvbiBtYW55IG9mIHRoZSBtYWdpc3RyYXRlcyBhbmQgY29ycnVwdGluZyB0aGVtLiBBbW9uZyB0aGVzZSB3YXMgUGF1bHVzIHRoZSBjb25zdWwsIHdobyB3YXMgd29uIG92ZXIgYnkgYSBicmliZSBvZiBmaWZ0ZWVuIGh1bmRyZWQgdGFsZW50czsgYW5kIEN1cmlvIHRoZSBwb3B1bGFyIHRyaWJ1bmUsIHdob20gQ2Flc2FyIHNldCBmcmVlIGZyb20gaW5udW1lcmFibGUgZGVidHM7IGFuZCBNYXJrIEFudG9ueSwgd2hvc2UgZnJpZW5kc2hpcCBmb3IgQ3VyaW8gaGFkIGludm9sdmVkIGhpbSBpbiBDdXJpbydzIG9ibGlnYXRpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgc2FpZCwgaW5kZWVkLCB0aGF0IG9uZSBvZiBDYWVzYXIncyBjZW50dXJpb25zIHdobyBoYWQgY29tZSBiYWNrIHRvIFJvbWUgYW5kIHdhcyBzdGFuZGluZyBuZWFyIHRoZSBzZW5hdGUtaG91c2UsIHdoZW4gaGUgaGVhcmQgdGhhdCB0aGUgc2VuYXRlIHdvdWxkIG5vdCBnaXZlIENhZXNhciBhIHByb2xvbmdhdGlvbiBvZiBoaXMgdGVybSBvZiBvZmZpY2UsIHN0cnVjayBoaXMgaGFuZCB1cG9uIGhpcyBzd29yZCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgdGhpcyB3aWxsIGdpdmUgaXQuPC9xPiBBbmQgQ2Flc2FyJ3MgaW50cmlndWVzIGFuZCBwcmVwYXJhdGlvbnMgaGFkIHRoaXMgcHVycG9zZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['58.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBub3csIHRvbywgQ2Flc2FyIGRldm90ZWQgaGltc2VsZiB0byBwdWJsaWMgYWZmYWlycyB3aXRoIGdyZWF0ZXIgdmlnb3VyLiBIZSBubyBsb25nZXIga2VwdCBoaW1zZWxmIGZhciBhd2F5IGZyb20gSXRhbHksIHdhcyBhbHdheXMgc2VuZGluZyBoaXMgc29sZGllcnMgYmFjayB0byB0aGUgY2l0eSB0byB0YWtlIHBhcnQgaW4gdGhlIGVsZWN0aW9ucywgYW5kIGJ5IG1lYW5zIG9mIGhpcyBtb25leSB3YXMgc2VjcmV0bHkgd29ya2luZyB1cG9uIG1hbnkgb2YgdGhlIG1hZ2lzdHJhdGVzIGFuZCBjb3JydXB0aW5nIHRoZW0uIEFtb25nIHRoZXNlIHdhcyBQYXVsdXMgdGhlIGNvbnN1bCwgd2hvIHdhcyB3b24gb3ZlciBieSBhIGJyaWJlIG9mIGZpZnRlZW4gaHVuZHJlZCB0YWxlbnRzOyBhbmQgQ3VyaW8gdGhlIHBvcHVsYXIgdHJpYnVuZSwgd2hvbSBDYWVzYXIgc2V0IGZyZWUgZnJvbSBpbm51bWVyYWJsZSBkZWJ0czsgYW5kIE1hcmsgQW50b255LCB3aG9zZSBmcmllbmRzaGlwIGZvciBDdXJpbyBoYWQgaW52b2x2ZWQgaGltIGluIEN1cmlvJ3Mgb2JsaWdhdGlvbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['58.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBzYWlkLCBpbmRlZWQsIHRoYXQgb25lIG9mIENhZXNhcidzIGNlbnR1cmlvbnMgd2hvIGhhZCBjb21lIGJhY2sgdG8gUm9tZSBhbmQgd2FzIHN0YW5kaW5nIG5lYXIgdGhlIHNlbmF0ZS1ob3VzZSwgd2hlbiBoZSBoZWFyZCB0aGF0IHRoZSBzZW5hdGUgd291bGQgbm90IGdpdmUgQ2Flc2FyIGEgcHJvbG9uZ2F0aW9uIG9mIGhpcyB0ZXJtIG9mIG9mZmljZSwgc3RydWNrIGhpcyBoYW5kIHVwb24gaGlzIHN3b3JkIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHRoaXMgd2lsbCBnaXZlIGl0LjwvcT4gQW5kIENhZXNhcidzIGludHJpZ3VlcyBhbmQgcHJlcGFyYXRpb25zIGhhZCB0aGlzIHB1cnBvc2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlIHJlcXVlc3RzIGFuZCBkZW1hbmRzIHdoaWNoIEN1cmlvIG1hZGUgaW4gYmVoYWxmIG9mIENhZXNhciBzZWVtZWQgdG8gYmUgdmVyeSBwb3B1bGFyIGluIHRoZWlyIGNoYXJhY3Rlci4gRm9yIGhlIGRlbWFuZGVkIG9uZSBvZiB0d28gdGhpbmdzOiBlaXRoZXIgdGhhdCBQb21wZXkgYWxzbyBzaG91bGQgYmUgcmVxdWlyZWQgdG8gZ2l2ZSB1cCBoaXMgc29sZGllcnksIG9yIGVsc2UgdGhhdCBDYWVzYXIncyBzaG91bGQgbm90IGJlIHRha2VuIGF3YXkgZnJvbSBoaW07IGZvciB3aGV0aGVyIHRoZXkgYmVjYW1lIHByaXZhdGUgcGVyc29ucyBvbiBqdXN0IGFuZCBlcXVhbCB0ZXJtcywgb3IgcmVtYWluZWQgYSBtYXRjaCBmb3IgZWFjaCBvdGhlciB3aXRoIHRoZWlyIHByZXNlbnQgZm9yY2VzLCB0aGV5IHdvdWxkIG1ha2Ugbm8gZGlzdHVyYmFuY2U7IGJ1dCBoZSB3aG8gd2Vha2VuZWQgb25lIG9mIHRoZW0gZG91YmxlZCB0aGUgcG93ZXIgb2Ygd2hpY2ggaGUgc3Rvb2QgaW4gZmVhci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhpcyBNYXJjZWxsdXMgdGhlIGNvbnN1bCByZXBsaWVkIGJ5IGNhbGxpbmcgQ2Flc2FyIGEgcm9iYmVyLCBhbmQgdXJnaW5nIHRoYXQgaGUgYmUgdm90ZWQgYSBwdWJsaWMgZW5lbXkgdW5sZXNzIGhlIHNob3VsZCBsYXkgZG93biBoaXMgYXJtczsgbmV2ZXJ0aGVsZXNzLCBDdXJpbywgYWlkZWQgYnkgQW50b255IGFuZCBQaXNvLCBwcmV2YWlsZWQgc28gZmFyIGFzIHRvIGhhdmUgdGhlIG9waW5pb24gb2YgdGhlIHNlbmF0ZSB0YWtlbi4gSGUgdGhlcmVmb3JlIG1vdmVkIHRoYXQgdGhvc2Ugc2hvdWxkIHdpdGhkcmF3IHRvIG9uZSBzaWRlIHdobyB3aXNoZWQgdGhhdCBDYWVzYXIgb25seSBzaG91bGQgbGF5IGRvd24gaGlzIGFybXMgYW5kIHRoYXQgUG9tcGV5IHNob3VsZCByZW1haW4gaW4gY29tbWFuZDsgYW5kIHRoZSBtYWpvcml0eSB3aXRoZHJldy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gaGUgbW92ZWQgYWdhaW4gdGhhdCBhbGwgdGhvc2Ugc2hvdWxkIHdpdGhkcmF3IHdobyB3aXNoZWQgYm90aCB0byBsYXkgZG93biB0aGVpciBhcm1zIGFuZCBuZWl0aGVyIHRvIHJlbWFpbiBpbiBjb21tYW5kLCBvbmx5IHR3ZW50eS10d28gZmF2b3VyZWQgUG9tcGV5LCB3aGlsZSBhbGwgdGhlIHJlc3Qgc2lkZWQgd2l0aCBDdXJpby4gQ3VyaW8sIHRoZXJlZm9yZSwgZmVsdCB0aGF0IGhlIGhhZCB3b24gdGhlIGRheSwgYW5kIHdpdGggYSBqb3lmdWwgY291bnRlbmFuY2UgcnVzaGVkIGJlZm9yZSB0aGUgcGVvcGxlLCB3aG8gY2xhcHBlZCB0aGVpciBoYW5kcyBpbiB3ZWxjb21lIGFuZCBwZWx0ZWQgaGltIHdpdGggZ2FybGFuZHMgYW5kIGZsb3dlcnMuIFBvbXBleSB3YXMgbm90IHByZXNlbnQgaW4gdGhlIHNlbmF0ZSwgc2luY2UgY29tbWFuZGVycyBvZiBhcm1pZXMgY2Fubm90IGVudGVyIHRoZSBjaXR5OyAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5NYXJjZWxsdXMsIGhvd2V2ZXIsIHJvc2UgYW5kIGRlY2xhcmVkIHRoYXQgaGUgd291bGQgbm90IHNpdCB0aGVyZSBsaXN0ZW5pbmcgdG8gc3BlZWNoZXMsIGJ1dCBzaW5jZSBoZSBzYXcgdGVuIGxlZ2lvbnMgYWxyZWFkeSBsb29taW5nIHVwIGluIHRoZWlyIG1hcmNoIG92ZXIgdGhlIEFscHMsIGhlIGhpbXNlbGYgYWxzbyB3b3VsZCBzZW5kIGZvcnRoIGEgbWFuIHdobyB3b3VsZCBvcHBvc2UgdGhlbSBpbiBkZWZlbmNlIG9mIGhpcyBjb3VudHJ5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlIHJlcXVlc3RzIGFuZCBkZW1hbmRzIHdoaWNoIEN1cmlvIG1hZGUgaW4gYmVoYWxmIG9mIENhZXNhciBzZWVtZWQgdG8gYmUgdmVyeSBwb3B1bGFyIGluIHRoZWlyIGNoYXJhY3Rlci4gRm9yIGhlIGRlbWFuZGVkIG9uZSBvZiB0d28gdGhpbmdzOiBlaXRoZXIgdGhhdCBQb21wZXkgYWxzbyBzaG91bGQgYmUgcmVxdWlyZWQgdG8gZ2l2ZSB1cCBoaXMgc29sZGllcnksIG9yIGVsc2UgdGhhdCBDYWVzYXIncyBzaG91bGQgbm90IGJlIHRha2VuIGF3YXkgZnJvbSBoaW07IGZvciB3aGV0aGVyIHRoZXkgYmVjYW1lIHByaXZhdGUgcGVyc29ucyBvbiBqdXN0IGFuZCBlcXVhbCB0ZXJtcywgb3IgcmVtYWluZWQgYSBtYXRjaCBmb3IgZWFjaCBvdGhlciB3aXRoIHRoZWlyIHByZXNlbnQgZm9yY2VzLCB0aGV5IHdvdWxkIG1ha2Ugbm8gZGlzdHVyYmFuY2U7IGJ1dCBoZSB3aG8gd2Vha2VuZWQgb25lIG9mIHRoZW0gZG91YmxlZCB0aGUgcG93ZXIgb2Ygd2hpY2ggaGUgc3Rvb2QgaW4gZmVhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['58.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgTWFyY2VsbHVzIHRoZSBjb25zdWwgcmVwbGllZCBieSBjYWxsaW5nIENhZXNhciBhIHJvYmJlciwgYW5kIHVyZ2luZyB0aGF0IGhlIGJlIHZvdGVkIGEgcHVibGljIGVuZW15IHVubGVzcyBoZSBzaG91bGQgbGF5IGRvd24gaGlzIGFybXM7IG5ldmVydGhlbGVzcywgQ3VyaW8sIGFpZGVkIGJ5IEFudG9ueSBhbmQgUGlzbywgcHJldmFpbGVkIHNvIGZhciBhcyB0byBoYXZlIHRoZSBvcGluaW9uIG9mIHRoZSBzZW5hdGUgdGFrZW4uIEhlIHRoZXJlZm9yZSBtb3ZlZCB0aGF0IHRob3NlIHNob3VsZCB3aXRoZHJhdyB0byBvbmUgc2lkZSB3aG8gd2lzaGVkIHRoYXQgQ2Flc2FyIG9ubHkgc2hvdWxkIGxheSBkb3duIGhpcyBhcm1zIGFuZCB0aGF0IFBvbXBleSBzaG91bGQgcmVtYWluIGluIGNvbW1hbmQ7IGFuZCB0aGUgbWFqb3JpdHkgd2l0aGRyZXcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['58.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIG1vdmVkIGFnYWluIHRoYXQgYWxsIHRob3NlIHNob3VsZCB3aXRoZHJhdyB3aG8gd2lzaGVkIGJvdGggdG8gbGF5IGRvd24gdGhlaXIgYXJtcyBhbmQgbmVpdGhlciB0byByZW1haW4gaW4gY29tbWFuZCwgb25seSB0d2VudHktdHdvIGZhdm91cmVkIFBvbXBleSwgd2hpbGUgYWxsIHRoZSByZXN0IHNpZGVkIHdpdGggQ3VyaW8uIEN1cmlvLCB0aGVyZWZvcmUsIGZlbHQgdGhhdCBoZSBoYWQgd29uIHRoZSBkYXksIGFuZCB3aXRoIGEgam95ZnVsIGNvdW50ZW5hbmNlIHJ1c2hlZCBiZWZvcmUgdGhlIHBlb3BsZSwgd2hvIGNsYXBwZWQgdGhlaXIgaGFuZHMgaW4gd2VsY29tZSBhbmQgcGVsdGVkIGhpbSB3aXRoIGdhcmxhbmRzIGFuZCBmbG93ZXJzLiBQb21wZXkgd2FzIG5vdCBwcmVzZW50IGluIHRoZSBzZW5hdGUsIHNpbmNlIGNvbW1hbmRlcnMgb2YgYXJtaWVzIGNhbm5vdCBlbnRlciB0aGUgY2l0eTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['58.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1hcmNlbGx1cywgaG93ZXZlciwgcm9zZSBhbmQgZGVjbGFyZWQgdGhhdCBoZSB3b3VsZCBub3Qgc2l0IHRoZXJlIGxpc3RlbmluZyB0byBzcGVlY2hlcywgYnV0IHNpbmNlIGhlIHNhdyB0ZW4gbGVnaW9ucyBhbHJlYWR5IGxvb21pbmcgdXAgaW4gdGhlaXIgbWFyY2ggb3ZlciB0aGUgQWxwcywgaGUgaGltc2VsZiBhbHNvIHdvdWxkIHNlbmQgZm9ydGggYSBtYW4gd2hvIHdvdWxkIG9wcG9zZSB0aGVtIGluIGRlZmVuY2Ugb2YgaGlzIGNvdW50cnkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPiBVcG9uIHRoaXMsIHRoZSBjaXR5IHdlbnQgaW50byBtb3VybmluZywgYXMgaW4gdGhlIHByZXNlbmNlIG9mIGEgcHVibGljIGNhbGFtaXR5OyBhbmQgTWFyY2VsbHVzLCBmb2xsb3dlZCBieSB0aGUgc2VuYXRlLCBtYXJjaGVkIHRocm91Z2ggdGhlIGZvcnVtIHRvIG1lZXQgUG9tcGV5LCBhbmQgc3RhbmRpbmcgYmVmb3JlIGhpbSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgYmlkIHRoZWUsIFBvbXBleSwgdG8gZGVmZW5kIHRoeSBjb3VudHJ5LCB0byBlbXBsb3kgdGhlIGZvcmNlcyBub3cgaW4gcmVhZGluZXNzLCBhbmQgdG8gbGV2eSBvdGhlcnMuPC9xPiBMZW50dWx1cyBhbHNvIHNhaWQgdGhlIHNhbWUsIGJlaW5nIG9uZSBvZiB0aGUgY29uc3VscyBlbGVjdGVkIGZvciB0aGUgY29taW5nIHllYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIFBvbXBleSBiZWdhbiB0byBsZXZ5IHJlY3J1aXRzLCBzb21lIHJlZnVzZWQgdG8gb2JleSB0aGUgc3VtbW9ucywgYW5kIGEgZmV3IGNhbWUgdG9nZXRoZXIgcmVsdWN0YW50bHkgYW5kIHdpdGhvdXQgemVzdCwgYnV0IHRoZSBncmVhdGVyIHBhcnQgY3JpZWQgb3V0IGZvciBhIHNldHRsZW1lbnQgb2YgdGhlIGNvbnRyb3ZlcnN5LiBGb3IgQW50b255LCBpbiBkZWZpYW5jZSBvZiB0aGUgc2VuYXRlLCBoYWQgcmVhZCBiZWZvcmUgdGhlIHBlb3BsZSBhIGxldHRlciBvZiBDYWVzYXIgY29udGFpbmluZyBwcm9wb3NpdGlvbnMgd2hpY2ggd2VyZSBhdHRyYWN0aXZlIHRvIHRoZSBtdWx0aXR1ZGUuIEhlIGFza2VkLCBuYW1lbHksIHRoYXQgYm90aCBQb21wZXkgYW5kIGhlIHNob3VsZCBnaXZlIHVwIHRoZWlyIHByb3ZpbmNlcywgZGlzYmFuZCB0aGVpciBhcm1pZXMsIHB1dCB0aGVtc2VsdmVzIGluIHRoZSBoYW5kcyBvZiB0aGUgcGVvcGxlLCBhbmQgcmVuZGVyIGFuIGFjY291bnQgb2Ygd2hhdCB0aGV5IGhhZCBkb25lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTGVudHVsdXMsIHdobyB3YXMgYnkgdGhpcyB0aW1lIGNvbnN1bCwgd291bGQgbm90IGNhbGwgdGhlIHNlbmF0ZSB0b2dldGhlcjsgQ2ljZXJvLCBob3dldmVyLCB3aG8gd2FzIGp1c3QgcmV0dXJuZWQgZnJvbSBDaWxpY2lhLCB0cmllZCB0byBlZmZlY3QgYSBzZXR0bGVtZW50IG9mIHRoZSBkaXNwdXRlIG9uIHRoZXNlIHRlcm1zLCBuYW1lbHksIHRoYXQgQ2Flc2FyIHNob3VsZCByZW5vdW5jZSBHYXVsIGFuZCBkaXNtaXNzIHRoZSByZXN0IG9mIGhpcyBmb3JjZXMsIGJ1dCBzaG91bGQgcmV0YWluIHR3byBsZWdpb25zIGFuZCBJbGx5cmljdW0sIGFuZCB3YWl0IGZvciBoaXMgc2Vjb25kIGNvbnN1bHNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFBvbXBleSB3YXMgZGlzc2F0aXNmaWVkIHdpdGggdGhpcywgdGhlIGZyaWVuZHMgb2YgQ2Flc2FyIGNvbmNlZGVkIHRoYXQgaGUgc2hvdWxkIGRpc21pc3Mgb25lIG9mIHRoZSB0d28gbGVnaW9uczsgYnV0IHNpbmNlIExlbnR1bHVzIHN0aWxsIG9wcG9zZWQsIGFuZCBDYXRvIGNyaWVkIG91dCB0aGF0IFBvbXBleSB3YXMgYmx1bmRlcmluZyBhZ2FpbiBpbiBhbGxvd2luZyBoaW1zZWxmIHRvIGJlIGRlY2VpdmVkLCB0aGUgc2V0dGxlbWVudCBjYW1lIHRvIG5hdWdodC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['59.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IFVwb24gdGhpcywgdGhlIGNpdHkgd2VudCBpbnRvIG1vdXJuaW5nLCBhcyBpbiB0aGUgcHJlc2VuY2Ugb2YgYSBwdWJsaWMgY2FsYW1pdHk7IGFuZCBNYXJjZWxsdXMsIGZvbGxvd2VkIGJ5IHRoZSBzZW5hdGUsIG1hcmNoZWQgdGhyb3VnaCB0aGUgZm9ydW0gdG8gbWVldCBQb21wZXksIGFuZCBzdGFuZGluZyBiZWZvcmUgaGltIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGJpZCB0aGVlLCBQb21wZXksIHRvIGRlZmVuZCB0aHkgY291bnRyeSwgdG8gZW1wbG95IHRoZSBmb3JjZXMgbm93IGluIHJlYWRpbmVzcywgYW5kIHRvIGxldnkgb3RoZXJzLjwvcT4gTGVudHVsdXMgYWxzbyBzYWlkIHRoZSBzYW1lLCBiZWluZyBvbmUgb2YgdGhlIGNvbnN1bHMgZWxlY3RlZCBmb3IgdGhlIGNvbWluZyB5ZWFyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['59.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIFBvbXBleSBiZWdhbiB0byBsZXZ5IHJlY3J1aXRzLCBzb21lIHJlZnVzZWQgdG8gb2JleSB0aGUgc3VtbW9ucywgYW5kIGEgZmV3IGNhbWUgdG9nZXRoZXIgcmVsdWN0YW50bHkgYW5kIHdpdGhvdXQgemVzdCwgYnV0IHRoZSBncmVhdGVyIHBhcnQgY3JpZWQgb3V0IGZvciBhIHNldHRsZW1lbnQgb2YgdGhlIGNvbnRyb3ZlcnN5LiBGb3IgQW50b255LCBpbiBkZWZpYW5jZSBvZiB0aGUgc2VuYXRlLCBoYWQgcmVhZCBiZWZvcmUgdGhlIHBlb3BsZSBhIGxldHRlciBvZiBDYWVzYXIgY29udGFpbmluZyBwcm9wb3NpdGlvbnMgd2hpY2ggd2VyZSBhdHRyYWN0aXZlIHRvIHRoZSBtdWx0aXR1ZGUuIEhlIGFza2VkLCBuYW1lbHksIHRoYXQgYm90aCBQb21wZXkgYW5kIGhlIHNob3VsZCBnaXZlIHVwIHRoZWlyIHByb3ZpbmNlcywgZGlzYmFuZCB0aGVpciBhcm1pZXMsIHB1dCB0aGVtc2VsdmVzIGluIHRoZSBoYW5kcyBvZiB0aGUgcGVvcGxlLCBhbmQgcmVuZGVyIGFuIGFjY291bnQgb2Ygd2hhdCB0aGV5IGhhZCBkb25lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['59.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBMZW50dWx1cywgd2hvIHdhcyBieSB0aGlzIHRpbWUgY29uc3VsLCB3b3VsZCBub3QgY2FsbCB0aGUgc2VuYXRlIHRvZ2V0aGVyOyBDaWNlcm8sIGhvd2V2ZXIsIHdobyB3YXMganVzdCByZXR1cm5lZCBmcm9tIENpbGljaWEsIHRyaWVkIHRvIGVmZmVjdCBhIHNldHRsZW1lbnQgb2YgdGhlIGRpc3B1dGUgb24gdGhlc2UgdGVybXMsIG5hbWVseSwgdGhhdCBDYWVzYXIgc2hvdWxkIHJlbm91bmNlIEdhdWwgYW5kIGRpc21pc3MgdGhlIHJlc3Qgb2YgaGlzIGZvcmNlcywgYnV0IHNob3VsZCByZXRhaW4gdHdvIGxlZ2lvbnMgYW5kIElsbHlyaWN1bSwgYW5kIHdhaXQgZm9yIGhpcyBzZWNvbmQgY29uc3Vsc2hpcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['59.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFBvbXBleSB3YXMgZGlzc2F0aXNmaWVkIHdpdGggdGhpcywgdGhlIGZyaWVuZHMgb2YgQ2Flc2FyIGNvbmNlZGVkIHRoYXQgaGUgc2hvdWxkIGRpc21pc3Mgb25lIG9mIHRoZSB0d28gbGVnaW9uczsgYnV0IHNpbmNlIExlbnR1bHVzIHN0aWxsIG9wcG9zZWQsIGFuZCBDYXRvIGNyaWVkIG91dCB0aGF0IFBvbXBleSB3YXMgYmx1bmRlcmluZyBhZ2FpbiBpbiBhbGxvd2luZyBoaW1zZWxmIHRvIGJlIGRlY2VpdmVkLCB0aGUgc2V0dGxlbWVudCBjYW1lIHRvIG5hdWdodC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBub3cgd29yZCB3YXMgYnJvdWdodCB0aGF0IENhZXNhciBoYWQgc2VpemVkIEFyaW1pbnVtLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIEphbnVhcnksIDQ5IEIuQy4gU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMzIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXI8L3RpdGxlPiwgY2hhcHRlciB4eHhpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYSBsYXJnZSBjaXR5IG9mIEl0YWx5LCBhbmQgd2FzIG1hcmNoaW5nIGRpcmVjdGx5IHVwb24gUm9tZSB3aXRoIGFsbCBoaXMgZm9yY2VzLiBCdXQgdGhpcyB3YXMgZmFsc2UuIEZvciBoZSB3YXMgbWFyY2hpbmcgd2l0aCBubyBtb3JlIHRoYW4gdGhyZWUgaHVuZHJlZCBob3JzZW1lbiBhbmQgZml2ZSB0aG91c2FuZCBtZW4tYXQtYXJtczsgdGhlIHJlc3Qgb2YgaGlzIGZvcmNlcyB3ZXJlIGJleW9uZCB0aGUgQWxwcywgYW5kIGhlIGRpZCBub3Qgd2FpdCBmb3IgdGhlbSwgc2luY2UgaGUgd2lzaGVkIHRvIGZhbGwgdXBvbiBoaXMgZW5lbWllcyBzdWRkZW5seSwgd2hlbiB0aGV5IHdlcmUgaW4gY29uZnVzaW9uIGFuZCBkaWQgbm90IGV4cGVjdCBoaW0sIHJhdGhlciB0aGFuIHRvIGdpdmUgdGhlbSB0aW1lIGFuZCBmaWdodCB0aGVtIGFmdGVyIHRoZXkgd2VyZSBwcmVwYXJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvLCB3aGVuIGhlIHdhcyBjb21lIHRvIHRoZSByaXZlciBSdWJpY29uLCB3aGljaCB3YXMgdGhlIGJvdW5kYXJ5IG9mIHRoZSBwcm92aW5jZSBhbGxvdHRlZCB0byBoaW0sIGhlIHN0b29kIGluIHNpbGVuY2UgYW5kIGRlbGF5ZWQgdG8gY3Jvc3MsIHJlYXNvbmluZyB3aXRoIGhpbXNlbGYsIG9mIGNvdXJzZSwgdXBvbiB0aGUgbWFnbml0dWRlIG9mIGhpcyBhZHZlbnR1cmUuIFRoZW4sIGxpa2Ugb25lIHdobyBjYXN0cyBoaW1zZWxmIGZyb20gYSBwcmVjaXBpY2UgaW50byBhIHlhd25pbmcgYWJ5c3MsIGhlIGNsb3NlZCB0aGUgZXllcyBvZiByZWFzb24gYW5kIHB1dCBhIHZlaWwgYmV0d2VlbiB0aGVtIGFuZCBoaXMgcGVyaWwsIGFuZCBjYWxsaW5nIG91dCBpbiBHcmVlayB0byB0aGUgYnlzdGFuZGVycyB0aGVzZSB3b3JkcyBvbmx5LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCB0aGUgZGllIGJlIGNhc3QsPC9xPiBoZSBzZXQgaGlzIGFybXkgYWNyb3NzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['60.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBub3cgd29yZCB3YXMgYnJvdWdodCB0aGF0IENhZXNhciBoYWQgc2VpemVkIEFyaW1pbnVtLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gSmFudWFyeSwgNDkgQi5DLiBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDMyLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgY2hhcHRlciB4eHhpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYSBsYXJnZSBjaXR5IG9mIEl0YWx5LCBhbmQgd2FzIG1hcmNoaW5nIGRpcmVjdGx5IHVwb24gUm9tZSB3aXRoIGFsbCBoaXMgZm9yY2VzLiBCdXQgdGhpcyB3YXMgZmFsc2UuIEZvciBoZSB3YXMgbWFyY2hpbmcgd2l0aCBubyBtb3JlIHRoYW4gdGhyZWUgaHVuZHJlZCBob3JzZW1lbiBhbmQgZml2ZSB0aG91c2FuZCBtZW4tYXQtYXJtczsgdGhlIHJlc3Qgb2YgaGlzIGZvcmNlcyB3ZXJlIGJleW9uZCB0aGUgQWxwcywgYW5kIGhlIGRpZCBub3Qgd2FpdCBmb3IgdGhlbSwgc2luY2UgaGUgd2lzaGVkIHRvIGZhbGwgdXBvbiBoaXMgZW5lbWllcyBzdWRkZW5seSwgd2hlbiB0aGV5IHdlcmUgaW4gY29uZnVzaW9uIGFuZCBkaWQgbm90IGV4cGVjdCBoaW0sIHJhdGhlciB0aGFuIHRvIGdpdmUgdGhlbSB0aW1lIGFuZCBmaWdodCB0aGVtIGFmdGVyIHRoZXkgd2VyZSBwcmVwYXJlZC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAzMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIGNoYXB0ZXIgeHh4aWkuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgY2hhcHRlciB4eHhpaS48L3RyYW5zbGF0aW9uPg=="
translation['60.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbywgd2hlbiBoZSB3YXMgY29tZSB0byB0aGUgcml2ZXIgUnViaWNvbiwgd2hpY2ggd2FzIHRoZSBib3VuZGFyeSBvZiB0aGUgcHJvdmluY2UgYWxsb3R0ZWQgdG8gaGltLCBoZSBzdG9vZCBpbiBzaWxlbmNlIGFuZCBkZWxheWVkIHRvIGNyb3NzLCByZWFzb25pbmcgd2l0aCBoaW1zZWxmLCBvZiBjb3Vyc2UsIHVwb24gdGhlIG1hZ25pdHVkZSBvZiBoaXMgYWR2ZW50dXJlLiBUaGVuLCBsaWtlIG9uZSB3aG8gY2FzdHMgaGltc2VsZiBmcm9tIGEgcHJlY2lwaWNlIGludG8gYSB5YXduaW5nIGFieXNzLCBoZSBjbG9zZWQgdGhlIGV5ZXMgb2YgcmVhc29uIGFuZCBwdXQgYSB2ZWlsIGJldHdlZW4gdGhlbSBhbmQgaGlzIHBlcmlsLCBhbmQgY2FsbGluZyBvdXQgaW4gR3JlZWsgdG8gdGhlIGJ5c3RhbmRlcnMgdGhlc2Ugd29yZHMgb25seSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCB0aGUgZGllIGJlIGNhc3QsPC9xPiBoZSBzZXQgaGlzIGFybXkgYWNyb3NzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIHRoZSByZXBvcnQgb2YgdGhpcyBjYW1lIGZseWluZyB0byBSb21lIGFuZCB0aGUgY2l0eSB3YXMgZmlsbGVkIHdpdGggdHVtdWx0LCBjb25zdGVybmF0aW9uLCBhbmQgYSBmZWFyIHRoYXQgd2FzIGJleW9uZCBjb21wYXJlLCB0aGUgc2VuYXRlIGF0IG9uY2Ugd2VudCBpbiBhIGJvZHkgYW5kIGluIGFsbCBoYXN0ZSB0byBQb21wZXksIGFuZCB0aGUgbWFnaXN0cmF0ZXMgY2FtZSB0b28uIEFuZCB3aGVuIFR1bGx1cyBhc2tlZCBQb21wZXkgYWJvdXQgYW4gYXJteSBhbmQgYSBtaWxpdGFyeSBmb3JjZSwgYW5kIFBvbXBleSwgYWZ0ZXIgc29tZSBkZWxheSwgc2FpZCB0aW1pZGx5IHRoYXQgaGUgaGFkIGluIHJlYWRpbmVzcyB0aGUgc29sZGllcnMgd2hvIGhhZCBjb21lIGZyb20gQ2Flc2FyLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhvdWdodCB0aGF0IGhlIGNvdWxkIHNwZWVkaWx5IGFzc2VtYmxlIGFsc28gdGhvc2Ugd2hvIGhhZCBiZWVuIHByZXZpb3VzbHkgbGV2aWVkLCB0aGlydHkgdGhvdXNhbmQgaW4gbnVtYmVyLCBUdWxsdXMgY3JpZWQgYWxvdWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBoYXN0IGRlY2VpdmVkIHVzLCBQb21wZXkhPC9xPiBhbmQgYWR2aXNlZCBzZW5kaW5nIGVudm95cyB0byBDYWVzYXI7IGFuZCBhIGNlcnRhaW4gRmF2b25pdXMsIGEgbWFuIG90aGVyd2lzZSBvZiBubyBiYWQgY2hhcmFjdGVyLCBidXQgd2hvIG9mdGVuIHRob3VnaHQgdGhhdCBoaXMgaW5zb2xlbnQgcHJlc3VtcHRpb24gd2FzIGFuIGltaXRhdGlvbiBvZiBDYXRvJ3MgYm9sZG5lc3Mgb2Ygc3BlZWNoLCBvcmRlcmVkIFBvbXBleSB0byBzdGFtcCB1cG9uIHRoZSBncm91bmQgYW5kIGNhbGwgdXAgdGhlIGZvcmNlcyB3aGljaCBoZSB1c2VkIHRvIHByb21pc2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQb21wZXkgYm9yZSB0aGlzIGlsbC10aW1lZCByYWlsbGVyeSB3aXRoIG1lZWtuZXNzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMi41LjM3IiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZT5CZWxsLiBDaXYuPC90aXRsZT4gaWkuIDM3PC9iaWJsPiwgUG9tcGV5IHJlcGxpZXM6IAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdSB3aWxsIGhhdmUgdGhlbSBpZiB5b3UgZm9sbG93IG1lLCBhbmQgZG8gbm90IHRoaW5rIGl0IGEgdGVycmlibGUgdGhpbmcgdG8gbGVhdmUgUm9tZSwgYW5kIEl0YWx5LCB0b28sIGlmIGl0IHNob3VsZCBiZSBuZWNlc3NhcnkuPC9xPgogICAgICAgICAgICA8L25vdGU+OyBhbmQgd2hlbiBDYXRvIHJlbWluZGVkIGhpbSBvZiB3aGF0IGhlIGhhZCBzYWlkIHRvIGhpbSBhdCB0aGUgb3V0c2V0IGFib3V0IENhZXNhciwgaGUgcmVwbGllZCB0aGF0IHdoYXQgQ2F0byBoYWQgc2FpZCB3YXMgbW9yZSBwcm9waGV0aWMsIGJ1dCB3aGF0IGhlIGhpbXNlbGYgaGFkIGRvbmUgd2FzIG1vcmUgZnJpZW5kbHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['60.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgdGhlIHJlcG9ydCBvZiB0aGlzIGNhbWUgZmx5aW5nIHRvIFJvbWUgYW5kIHRoZSBjaXR5IHdhcyBmaWxsZWQgd2l0aCB0dW11bHQsIGNvbnN0ZXJuYXRpb24sIGFuZCBhIGZlYXIgdGhhdCB3YXMgYmV5b25kIGNvbXBhcmUsIHRoZSBzZW5hdGUgYXQgb25jZSB3ZW50IGluIGEgYm9keSBhbmQgaW4gYWxsIGhhc3RlIHRvIFBvbXBleSwgYW5kIHRoZSBtYWdpc3RyYXRlcyBjYW1lIHRvby4gQW5kIHdoZW4gVHVsbHVzIGFza2VkIFBvbXBleSBhYm91dCBhbiBhcm15IGFuZCBhIG1pbGl0YXJ5IGZvcmNlLCBhbmQgUG9tcGV5LCBhZnRlciBzb21lIGRlbGF5LCBzYWlkIHRpbWlkbHkgdGhhdCBoZSBoYWQgaW4gcmVhZGluZXNzIHRoZSBzb2xkaWVycyB3aG8gaGFkIGNvbWUgZnJvbSBDYWVzYXIsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['60.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aG91Z2h0IHRoYXQgaGUgY291bGQgc3BlZWRpbHkgYXNzZW1ibGUgYWxzbyB0aG9zZSB3aG8gaGFkIGJlZW4gcHJldmlvdXNseSBsZXZpZWQsIHRoaXJ0eSB0aG91c2FuZCBpbiBudW1iZXIsIFR1bGx1cyBjcmllZCBhbG91ZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3UgaGFzdCBkZWNlaXZlZCB1cywgUG9tcGV5ITwvcT4gYW5kIGFkdmlzZWQgc2VuZGluZyBlbnZveXMgdG8gQ2Flc2FyOyBhbmQgYSBjZXJ0YWluIEZhdm9uaXVzLCBhIG1hbiBvdGhlcndpc2Ugb2Ygbm8gYmFkIGNoYXJhY3RlciwgYnV0IHdobyBvZnRlbiB0aG91Z2h0IHRoYXQgaGlzIGluc29sZW50IHByZXN1bXB0aW9uIHdhcyBhbiBpbWl0YXRpb24gb2YgQ2F0bydzIGJvbGRuZXNzIG9mIHNwZWVjaCwgb3JkZXJlZCBQb21wZXkgdG8gc3RhbXAgdXBvbiB0aGUgZ3JvdW5kIGFuZCBjYWxsIHVwIHRoZSBmb3JjZXMgd2hpY2ggaGUgdXNlZCB0byBwcm9taXNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['60.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQb21wZXkgYm9yZSB0aGlzIGlsbC10aW1lZCByYWlsbGVyeSB3aXRoIG1lZWtuZXNzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDIuNS4zNyIgdmFsaWQ9InllcyI+QXBwaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaWkuIDM3PC9iaWJsPiwgUG9tcGV5IHJlcGxpZXM6IAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91IHdpbGwgaGF2ZSB0aGVtIGlmIHlvdSBmb2xsb3cgbWUsIGFuZCBkbyBub3QgdGhpbmsgaXQgYSB0ZXJyaWJsZSB0aGluZyB0byBsZWF2ZSBSb21lLCBhbmQgSXRhbHksIHRvbywgaWYgaXQgc2hvdWxkIGJlIG5lY2Vzc2FyeS48L3E+CiAgICAgICAgICAgIDwvbm90ZT47IGFuZCB3aGVuIENhdG8gcmVtaW5kZWQgaGltIG9mIHdoYXQgaGUgaGFkIHNhaWQgdG8gaGltIGF0IHRoZSBvdXRzZXQgYWJvdXQgQ2Flc2FyLCBoZSByZXBsaWVkIHRoYXQgd2hhdCBDYXRvIGhhZCBzYWlkIHdhcyBtb3JlIHByb3BoZXRpYywgYnV0IHdoYXQgaGUgaGltc2VsZiBoYWQgZG9uZSB3YXMgbW9yZSBmcmllbmRseS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAyLjUuMzciIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpLiAzNzwvYmlibD4sIFBvbXBleSByZXBsaWVzOiAKCQkJCQk8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaWkuIDM3PHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3Ugd2lsbCBoYXZlIHRoZW0gaWYgeW91IGZvbGxvdyBtZSwgYW5kIGRvIG5vdCB0aGluayBpdCBhIHRlcnJpYmxlIHRoaW5nIHRvIGxlYXZlIFJvbWUsIGFuZCBJdGFseSwgdG9vLCBpZiBpdCBzaG91bGQgYmUgbmVjZXNzYXJ5LjwvcT4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IENhdG8gbm93IGFkdmlzZWQgdGhhdCBQb21wZXkgc2hvdWxkIGJlIGVsZWN0ZWQgZ2VuZXJhbCB3aXRoIHVubGltaXRlZCBwb3dlcnMsIGFkZGluZyB0aGF0IHRoZSB2ZXJ5IG1lbiB3aG8gY2F1c2VkIGdyZWF0IG1pc2NoaWVmIG11c3QgYWxzbyBwdXQgYW4gZW5kIHRvIGl0LiBUaGVuIGhlIHNldCBvdXQgYXQgb25jZSBmb3IgU2ljaWx5LCB0aGUgcHJvdmluY2Ugd2hpY2ggaGFkIGZhbGxlbiB0byBoaXMgbG90LCBhbmQgdGhlIG90aGVyIHNlbmF0b3JzIGxpa2V3aXNlIGRlcGFydGVkIGZvciB0aGUgcHJvdmluY2VzIHdoaWNoIGhhZCBzZXZlcmFsbHkgYmVlbiBhbGxvdHRlZCB0byB0aGVtLiBCdXQgc2luY2UgbmVhcmx5IGFsbCBJdGFseSB3YXMgaW4gY29tbW90aW9uLCB0aGUgY291cnNlIG9mIHRoaW5ncyB3YXMgcGVycGxleGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRob3NlIHdobyBkd2VsdCBvdXRzaWRlIHRoZSBjaXR5IGNhbWUgcnVzaGluZyBpbiBodXJyaWVkIGZsaWdodCBmcm9tIGFsbCBxdWFydGVycyBpbnRvIFJvbWUsIGFuZCB0aG9zZSB3aG8gZHdlbHQgaW4gUm9tZSB3ZXJlIHJ1c2hpbmcgb3V0IG9mIGl0IGFuZCBhYmFuZG9uaW5nIHRoZSBjaXR5LCB3aGVyZSwgaW4gc3VjaCB0ZW1wZXN0dW91cyBjb25mdXNpb24sIHRoZSBiZXR0ZXIgZWxlbWVudCB3YXMgd2VhaywgYW5kIHRoZSBpbnN1Ym9yZGluYXRlIGVsZW1lbnQgc3Ryb25nIGFuZCBoYXJkIGZvciB0aGUgbWFnaXN0cmF0ZXMgdG8gbWFuYWdlLiBGb3IgaXQgd2FzIGltcG9zc2libGUgdG8gY2hlY2sgdGhlIHJlaWduaW5nIGZlYXIsIG5vciB3b3VsZCBhbnkgb25lIHN1ZmZlciBQb21wZXkgdG8gZm9sbG93IHRoZSBkaWN0YXRlcyBvZiBoaXMgb3duIGp1ZGdlbWVudCwgYnV0IHdoYXRldmVyIGZlZWxpbmcgZWFjaCBvbmUgaGFkLCB3aGV0aGVyIGZlYXIsIG9yIGRpc3RyZXNzLCBvciBwZXJwbGV4aXR5LCBoZSBwcm9tcHRseSBpbmZlY3RlZCBQb21wZXkncyBtaW5kIHdpdGggdGhpcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIG9wcG9zaXRlIGNvdW5zZWxzIHByZXZhaWxlZCBpbiB0aGUgc2FtZSBkYXksIGFuZCBpdCB3YXMgaW1wb3NzaWJsZSBmb3IgUG9tcGV5IHRvIGdldCBhbnkgdHJ1ZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZW5lbXksIHNpbmNlIG1hbnkgcmVwb3J0ZWQgdG8gaGltIHdoYXRldmVyIHRoZXkgaGFwcGVuZWQgdG8gaGVhciwgYW5kIHRoZW4gd2VyZSB2ZXhlZCBpZiBoZSBkaWQgbm90IGJlbGlldmUgdGhlbS4gVW5kZXIgdGhlc2UgY2lyY3Vtc3RhbmNlcyBoZSBpc3N1ZWQgYW4gZWRpY3QgaW4gd2hpY2ggaGUgcmVjb2duaXplZCBhIHN0YXRlIG9mIGNpdmlsIHdhciwgb3JkZXJlZCBhbGwgdGhlIHNlbmF0b3JzIHRvIGZvbGxvdyBoaW0sIGRlY2xhcmVkIHRoYXQgaGUgd291bGQgcmVnYXJkIGFzIGEgcGFydGlzYW4gb2YgQ2Flc2FyIGFueSBvbmUgd2hvIHJlbWFpbmVkIGJlaGluZCwgYW5kIGxhdGUgaW4gdGhlIGV2ZW5pbmcgbGVmdCB0aGUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNvbnN1bHMgYWxzbyBmbGVkLCB3aXRob3V0IGV2ZW4gbWFraW5nIHRoZSBzYWNyaWZpY2VzIGN1c3RvbWFyeSBiZWZvcmUgYSB3YXIuIEJ1dCBldmVuIGFtaWQgdGhlIGFjdHVhbCB0ZXJyb3JzIG9mIHRoZSBob3VyIFBvbXBleSB3YXMgYSBtYW4gdG8gYmUgZW52aWVkIGZvciB0aGUgdW5pdmVyc2FsIGdvb2Qgd2lsbCBmZWx0IHRvd2FyZHMgaGltLCBiZWNhdXNlLCB0aG91Z2ggbWFueSBibGFtZWQgaGlzIGdlbmVyYWxzaGlwLCB0aGVyZSB3YXMgbm8gb25lIHdobyBoYXRlZCB0aGUgZ2VuZXJhbC4gSW5kZWVkLCBvbmUgd291bGQgaGF2ZSBmb3VuZCB0aGF0IHRob3NlIHdobyBmbGVkIHRoZSBjaXR5IGZvciB0aGUgc2FrZSBvZiBsaWJlcnR5IHdlcmUgbm90IHNvIG51bWVyb3VzIGFzIHRob3NlIHdobyBkaWQgc28gYmVjYXVzZSB0aGV5IHdlcmUgdW5hYmxlIHRvIGZvcnNha2UgUG9tcGV5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['61.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IENhdG8gbm93IGFkdmlzZWQgdGhhdCBQb21wZXkgc2hvdWxkIGJlIGVsZWN0ZWQgZ2VuZXJhbCB3aXRoIHVubGltaXRlZCBwb3dlcnMsIGFkZGluZyB0aGF0IHRoZSB2ZXJ5IG1lbiB3aG8gY2F1c2VkIGdyZWF0IG1pc2NoaWVmIG11c3QgYWxzbyBwdXQgYW4gZW5kIHRvIGl0LiBUaGVuIGhlIHNldCBvdXQgYXQgb25jZSBmb3IgU2ljaWx5LCB0aGUgcHJvdmluY2Ugd2hpY2ggaGFkIGZhbGxlbiB0byBoaXMgbG90LCBhbmQgdGhlIG90aGVyIHNlbmF0b3JzIGxpa2V3aXNlIGRlcGFydGVkIGZvciB0aGUgcHJvdmluY2VzIHdoaWNoIGhhZCBzZXZlcmFsbHkgYmVlbiBhbGxvdHRlZCB0byB0aGVtLiBCdXQgc2luY2UgbmVhcmx5IGFsbCBJdGFseSB3YXMgaW4gY29tbW90aW9uLCB0aGUgY291cnNlIG9mIHRoaW5ncyB3YXMgcGVycGxleGluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['61.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aG9zZSB3aG8gZHdlbHQgb3V0c2lkZSB0aGUgY2l0eSBjYW1lIHJ1c2hpbmcgaW4gaHVycmllZCBmbGlnaHQgZnJvbSBhbGwgcXVhcnRlcnMgaW50byBSb21lLCBhbmQgdGhvc2Ugd2hvIGR3ZWx0IGluIFJvbWUgd2VyZSBydXNoaW5nIG91dCBvZiBpdCBhbmQgYWJhbmRvbmluZyB0aGUgY2l0eSwgd2hlcmUsIGluIHN1Y2ggdGVtcGVzdHVvdXMgY29uZnVzaW9uLCB0aGUgYmV0dGVyIGVsZW1lbnQgd2FzIHdlYWssIGFuZCB0aGUgaW5zdWJvcmRpbmF0ZSBlbGVtZW50IHN0cm9uZyBhbmQgaGFyZCBmb3IgdGhlIG1hZ2lzdHJhdGVzIHRvIG1hbmFnZS4gRm9yIGl0IHdhcyBpbXBvc3NpYmxlIHRvIGNoZWNrIHRoZSByZWlnbmluZyBmZWFyLCBub3Igd291bGQgYW55IG9uZSBzdWZmZXIgUG9tcGV5IHRvIGZvbGxvdyB0aGUgZGljdGF0ZXMgb2YgaGlzIG93biBqdWRnZW1lbnQsIGJ1dCB3aGF0ZXZlciBmZWVsaW5nIGVhY2ggb25lIGhhZCwgd2hldGhlciBmZWFyLCBvciBkaXN0cmVzcywgb3IgcGVycGxleGl0eSwgaGUgcHJvbXB0bHkgaW5mZWN0ZWQgUG9tcGV5J3MgbWluZCB3aXRoIHRoaXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['61.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBvcHBvc2l0ZSBjb3Vuc2VscyBwcmV2YWlsZWQgaW4gdGhlIHNhbWUgZGF5LCBhbmQgaXQgd2FzIGltcG9zc2libGUgZm9yIFBvbXBleSB0byBnZXQgYW55IHRydWUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGVuZW15LCBzaW5jZSBtYW55IHJlcG9ydGVkIHRvIGhpbSB3aGF0ZXZlciB0aGV5IGhhcHBlbmVkIHRvIGhlYXIsIGFuZCB0aGVuIHdlcmUgdmV4ZWQgaWYgaGUgZGlkIG5vdCBiZWxpZXZlIHRoZW0uIFVuZGVyIHRoZXNlIGNpcmN1bXN0YW5jZXMgaGUgaXNzdWVkIGFuIGVkaWN0IGluIHdoaWNoIGhlIHJlY29nbml6ZWQgYSBzdGF0ZSBvZiBjaXZpbCB3YXIsIG9yZGVyZWQgYWxsIHRoZSBzZW5hdG9ycyB0byBmb2xsb3cgaGltLCBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIHJlZ2FyZCBhcyBhIHBhcnRpc2FuIG9mIENhZXNhciBhbnkgb25lIHdobyByZW1haW5lZCBiZWhpbmQsIGFuZCBsYXRlIGluIHRoZSBldmVuaW5nIGxlZnQgdGhlIGNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['61.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb25zdWxzIGFsc28gZmxlZCwgd2l0aG91dCBldmVuIG1ha2luZyB0aGUgc2FjcmlmaWNlcyBjdXN0b21hcnkgYmVmb3JlIGEgd2FyLiBCdXQgZXZlbiBhbWlkIHRoZSBhY3R1YWwgdGVycm9ycyBvZiB0aGUgaG91ciBQb21wZXkgd2FzIGEgbWFuIHRvIGJlIGVudmllZCBmb3IgdGhlIHVuaXZlcnNhbCBnb29kIHdpbGwgZmVsdCB0b3dhcmRzIGhpbSwgYmVjYXVzZSwgdGhvdWdoIG1hbnkgYmxhbWVkIGhpcyBnZW5lcmFsc2hpcCwgdGhlcmUgd2FzIG5vIG9uZSB3aG8gaGF0ZWQgdGhlIGdlbmVyYWwuIEluZGVlZCwgb25lIHdvdWxkIGhhdmUgZm91bmQgdGhhdCB0aG9zZSB3aG8gZmxlZCB0aGUgY2l0eSBmb3IgdGhlIHNha2Ugb2YgbGliZXJ0eSB3ZXJlIG5vdCBzbyBudW1lcm91cyBhcyB0aG9zZSB3aG8gZGlkIHNvIGJlY2F1c2UgdGhleSB3ZXJlIHVuYWJsZSB0byBmb3JzYWtlIFBvbXBleS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IEEgZmV3IGRheXMgYWZ0ZXIgdGhpcywgQ2Flc2FyIGVudGVyZWQgYW5kIHRvb2sgcG9zc2Vzc2lvbiBvZiBSb21lLiBIZSB0cmVhdGVkIGV2ZXJ5Ym9keSB3aXRoIGtpbmRuZXNzIGFuZCBjYWxtZWQgdGhlaXIgZmVhcnMsIGV4Y2VwdCB0aGF0IHdoZW4gTWV0ZWxsdXMsIG9uZSBvZiB0aGUgdHJpYnVuZXMsIGF0dGVtcHRlZCB0byBwcmV2ZW50IGhpbSBmcm9tIHRha2luZyBtb25leSBvdXQgb2YgdGhlIHB1YmxpYyB0cmVhc3VyeSwgaGUgdGhyZWF0ZW5lZCB0byBraWxsIGhpbSwgYW5kIGFkZGVkIHRvIHRoZSB0aHJlYXQgYSBzdGlsbCBoYXJzaGVyIHNwZWVjaCwgbmFtZWx5LCB0aGF0IGl0IHdhcyBlYXNpZXIgZm9yIGhpbSB0byBleGVjdXRlIGl0IHRoYW4gdG8gdXR0ZXIgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMzUuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXI8L3RpdGxlPiwgeHh4di4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgdGh1cyBkcml2ZW4gYXdheSBNZXRlbGx1cywgaGUgdG9vayB3aGF0IGhlIHdhbnRlZCwgYW5kIHRoZW4gc2V0IG91dCBpbiBwdXJzdWl0IG9mIFBvbXBleSwgYmVpbmcgYW54aW91cyB0byBkcml2ZSBoaW0gb3V0IG9mIEl0YWx5IGJlZm9yZSBoaXMgZm9yY2VzIGNhbWUgYmFjayBmcm9tIFNwYWluLiBCdXQgUG9tcGV5LCBoYXZpbmcgdGFrZW4gcG9zc2Vzc2lvbiBvZiBCcnVuZGlzaXVtLCB3aGVyZSBoZSBmb3VuZCBwbGVudHkgb2YgdHJhbnNwb3J0cywgaW1tZWRpYXRlbHkgZW1iYXJrZWQgdGhlIGNvbnN1bHMsIGFuZCB3aXRoIHRoZW0gdGhpcnR5IGNvaG9ydHMgb2Ygc29sZGllcnMsIGFuZCBzZW50IHRoZW0gYmVmb3JlIGhpbSB0byBEeXJyYWNoaXVtOyBTY2lwaW8gaGlzIGZhdGhlci1pbi1sYXcsIGhvd2V2ZXIsIGFuZCBHbmFldXMgaGlzIHNvbiwgaGUgc2VudCB0byBTeXJpYSB0byByYWlzZSBhIGZsZWV0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBoaW1zZWxmLCBhZnRlciBiYXJyaWNhZGluZyB0aGUgZ2F0ZXMgYW5kIG1hbm5pbmcgdGhlIHdhbGxzIHdpdGggaGlzIGxpZ2h0ZXN0LWFybWVkIHNvbGRpZXJzLCBvcmRlcmVkIHRoZSBCcnVuZGlzaWFucyB0byByZW1haW4gcXVpZXRseSBpbiB0aGVpciBob3VzZXMsIGFuZCB0aGVuIGR1ZyB1cCBhbGwgdGhlIGdyb3VuZCBpbnNpZGUgdGhlIGNpdHkgaW50byB0cmVuY2hlcywgYW5kIGZpbGxlZCB0aGUgc3RyZWV0cyB3aXRoIHN1bmtlbiBzdGFrZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5EaXRjaGVzIHdlcmUgZHVnIGFjcm9zcyB0aGUgc3RyZWV0cywgc2hhcnBlbmVkIHN0YWtlcyBwbGFjZWQgaW4gdGhlIGRpdGNoZXMsIGFuZCB0aGUgd2hvbGUgd29yayBsaWdodGx5IGNvdmVyZWQgc28gYXMgdG8gbG9vayB1bmRpc3R1cmJlZC4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDEuMjciIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlPkJlbGwuIENpdi48L3RpdGxlPiBJLiB4eHZpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYWxsIGV4Y2VwdCB0d28sIGJ5IHdoaWNoIGhlIGhpbXNlbGYgZmluYWxseSB3ZW50IGRvd24gdG8gdGhlIHNlYS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBvbiB0aGUgdGhpcmQgZGF5LCB3aGVuIGhlIGhhZCBhbHJlYWR5IGVtYmFya2VkIHRoZSByZXN0IG9mIGhpcyBob3N0IGF0IGhpcyBsZWlzdXJlLCBoZSBzdWRkZW5seSByYWlzZWQgYSBzaWduYWwgZm9yIHRob3NlIHdobyB3ZXJlIHN0aWxsIGd1YXJkaW5nIHRoZSB3YWxscyB0byBydW4gc3dpZnRseSBkb3duIHRvIHRoZSBzZWEsIHRvb2sgdGhlbSBvbiBib2FyZCwgYW5kIHNldCB0aGVtIGFjcm9zcyB0byBEeXJyYWNoaXVtLiBDYWVzYXIsIGhvd2V2ZXIsIHdoZW4gaGUgc2F3IHRoZSB3YWxscyBkZXNlcnRlZCwgcGVyY2VpdmVkIHRoYXQgUG9tcGV5IGhhZCBmbGVkLCBhbmQgaW4gaGlzIHB1cnN1aXQgb2YgaGltIGNhbWUgbmVhciBnZXR0aW5nIGVudGFuZ2xlZCBpbiB0aGUgZGl0Y2hlcyBhbmQgc3Rha2VzOyBidXQgc2luY2UgdGhlIEJydW5kaXNpYW5zIHRvbGQgaGltIGFib3V0IHRoZW0sIGhlIGF2b2lkZWQgdGhlIGNpdHksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGUgaGFkIGJlc2llZ2VkIGl0IGZvciBuaW5lIGRheXMsIGFuZCBoYWQgYWxzbyBiZWd1biB0byBjbG9zZSB1cCB0aGUgaGFyYm91ciAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMS4yNSIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+QmVsbC4gQ2l2LjwvdGl0bGU+IEkuIHh4di48L2JpYmw+LTxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDEuMjcuMSIgdmFsaWQ9InllcyI+eHh2aWkuPC9iaWJsPikuPC9ub3RlPiBhbmQgbWFraW5nIGEgY2lyY3VpdCByb3VuZCBpdCwgZm91bmQgdGhhdCBhbGwgdGhlIHRyYW5zcG9ydHMgaGFkIHB1dCBvdXQgdG8gc2VhIGV4Y2VwdCB0d28sIHdoaWNoIGhhZCBvbmx5IGEgZmV3IHNvbGRpZXJzIGFib2FyZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['62.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IEEgZmV3IGRheXMgYWZ0ZXIgdGhpcywgQ2Flc2FyIGVudGVyZWQgYW5kIHRvb2sgcG9zc2Vzc2lvbiBvZiBSb21lLiBIZSB0cmVhdGVkIGV2ZXJ5Ym9keSB3aXRoIGtpbmRuZXNzIGFuZCBjYWxtZWQgdGhlaXIgZmVhcnMsIGV4Y2VwdCB0aGF0IHdoZW4gTWV0ZWxsdXMsIG9uZSBvZiB0aGUgdHJpYnVuZXMsIGF0dGVtcHRlZCB0byBwcmV2ZW50IGhpbSBmcm9tIHRha2luZyBtb25leSBvdXQgb2YgdGhlIHB1YmxpYyB0cmVhc3VyeSwgaGUgdGhyZWF0ZW5lZCB0byBraWxsIGhpbSwgYW5kIGFkZGVkIHRvIHRoZSB0aHJlYXQgYSBzdGlsbCBoYXJzaGVyIHNwZWVjaCwgbmFtZWx5LCB0aGF0IGl0IHdhcyBlYXNpZXIgZm9yIGhpbSB0byBleGVjdXRlIGl0IHRoYW4gdG8gdXR0ZXIgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDM1LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeHh4di4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDM1LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeHh4di4gNC48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4eHh2LiA0LjwvdHJhbnNsYXRpb24+"
translation['62.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyB0aHVzIGRyaXZlbiBhd2F5IE1ldGVsbHVzLCBoZSB0b29rIHdoYXQgaGUgd2FudGVkLCBhbmQgdGhlbiBzZXQgb3V0IGluIHB1cnN1aXQgb2YgUG9tcGV5LCBiZWluZyBhbnhpb3VzIHRvIGRyaXZlIGhpbSBvdXQgb2YgSXRhbHkgYmVmb3JlIGhpcyBmb3JjZXMgY2FtZSBiYWNrIGZyb20gU3BhaW4uIEJ1dCBQb21wZXksIGhhdmluZyB0YWtlbiBwb3NzZXNzaW9uIG9mIEJydW5kaXNpdW0sIHdoZXJlIGhlIGZvdW5kIHBsZW50eSBvZiB0cmFuc3BvcnRzLCBpbW1lZGlhdGVseSBlbWJhcmtlZCB0aGUgY29uc3VscywgYW5kIHdpdGggdGhlbSB0aGlydHkgY29ob3J0cyBvZiBzb2xkaWVycywgYW5kIHNlbnQgdGhlbSBiZWZvcmUgaGltIHRvIER5cnJhY2hpdW07IFNjaXBpbyBoaXMgZmF0aGVyLWluLWxhdywgaG93ZXZlciwgYW5kIEduYWV1cyBoaXMgc29uLCBoZSBzZW50IHRvIFN5cmlhIHRvIHJhaXNlIGEgZmxlZXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['62.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYsIGFmdGVyIGJhcnJpY2FkaW5nIHRoZSBnYXRlcyBhbmQgbWFubmluZyB0aGUgd2FsbHMgd2l0aCBoaXMgbGlnaHRlc3QtYXJtZWQgc29sZGllcnMsIG9yZGVyZWQgdGhlIEJydW5kaXNpYW5zIHRvIHJlbWFpbiBxdWlldGx5IGluIHRoZWlyIGhvdXNlcywgYW5kIHRoZW4gZHVnIHVwIGFsbCB0aGUgZ3JvdW5kIGluc2lkZSB0aGUgY2l0eSBpbnRvIHRyZW5jaGVzLCBhbmQgZmlsbGVkIHRoZSBzdHJlZXRzIHdpdGggc3Vua2VuIHN0YWtlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RGl0Y2hlcyB3ZXJlIGR1ZyBhY3Jvc3MgdGhlIHN0cmVldHMsIHNoYXJwZW5lZCBzdGFrZXMgcGxhY2VkIGluIHRoZSBkaXRjaGVzLCBhbmQgdGhlIHdob2xlIHdvcmsgbGlnaHRseSBjb3ZlcmVkIHNvIGFzIHRvIGxvb2sgdW5kaXN0dXJiZWQuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDEuMjciIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IEkuIHh4dmlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbGwgZXhjZXB0IHR3bywgYnkgd2hpY2ggaGUgaGltc2VsZiBmaW5hbGx5IHdlbnQgZG93biB0byB0aGUgc2VhLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMS4yNyIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gSS4geHh2aWkuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gSS4geHh2aWkuPC90cmFuc2xhdGlvbj4="
translation['62.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gb24gdGhlIHRoaXJkIGRheSwgd2hlbiBoZSBoYWQgYWxyZWFkeSBlbWJhcmtlZCB0aGUgcmVzdCBvZiBoaXMgaG9zdCBhdCBoaXMgbGVpc3VyZSwgaGUgc3VkZGVubHkgcmFpc2VkIGEgc2lnbmFsIGZvciB0aG9zZSB3aG8gd2VyZSBzdGlsbCBndWFyZGluZyB0aGUgd2FsbHMgdG8gcnVuIHN3aWZ0bHkgZG93biB0byB0aGUgc2VhLCB0b29rIHRoZW0gb24gYm9hcmQsIGFuZCBzZXQgdGhlbSBhY3Jvc3MgdG8gRHlycmFjaGl1bS4gQ2Flc2FyLCBob3dldmVyLCB3aGVuIGhlIHNhdyB0aGUgd2FsbHMgZGVzZXJ0ZWQsIHBlcmNlaXZlZCB0aGF0IFBvbXBleSBoYWQgZmxlZCwgYW5kIGluIGhpcyBwdXJzdWl0IG9mIGhpbSBjYW1lIG5lYXIgZ2V0dGluZyBlbnRhbmdsZWQgaW4gdGhlIGRpdGNoZXMgYW5kIHN0YWtlczsgYnV0IHNpbmNlIHRoZSBCcnVuZGlzaWFucyB0b2xkIGhpbSBhYm91dCB0aGVtLCBoZSBhdm9pZGVkIHRoZSBjaXR5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGUgaGFkIGJlc2llZ2VkIGl0IGZvciBuaW5lIGRheXMsIGFuZCBoYWQgYWxzbyBiZWd1biB0byBjbG9zZSB1cCB0aGUgaGFyYm91ciAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAxLjI1IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBJLiB4eHYuPC9iaWJsPi08YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDEuMjcuMSIgdmFsaWQ9InllcyI+eHh2aWkuPC9iaWJsPikuPC9ub3RlPiBhbmQgbWFraW5nIGEgY2lyY3VpdCByb3VuZCBpdCwgZm91bmQgdGhhdCBhbGwgdGhlIHRyYW5zcG9ydHMgaGFkIHB1dCBvdXQgdG8gc2VhIGV4Y2VwdCB0d28sIHdoaWNoIGhhZCBvbmx5IGEgZmV3IHNvbGRpZXJzIGFib2FyZC4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAxLjI1IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBJLiB4eHYuPC9iaWJsPi08dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gSS4geHh2LjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMS4yNy4xIiB2YWxpZD0ieWVzIj54eHZpaS48L2JpYmw+KS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4gT3RoZXIgcGVvcGxlLCBub3csIGNvdW50IHRoaXMgc2FpbGluZyBhd2F5IG9mIFBvbXBleSBhbW9uZyBoaXMgYmVzdCBzdHJhdGFnZW1zLCBidXQgQ2Flc2FyIGhpbXNlbGYgd2FzIGFzdG9uaXNoZWQgdGhhdCB3aGVuIGhlIHdhcyBpbiBwb3NzZXNzaW9uIG9mIGEgc3Ryb25nIGNpdHkgYW5kIGV4cGVjdGVkIGhpcyBmb3JjZXMgZnJvbSBTcGFpbiBhbmQgd2FzIG1hc3RlciBvZiB0aGUgc2VhLCBoZSBnYXZlIHVwIGFuZCBhYmFuZG9uZWQgSXRhbHkuIENpY2VybyBhbHNvIGJsYW1lcyBoaW08bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQXR0LiA3LjExIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkVwaXN0LiBhZCBBdHQuPC90aXRsZT4gdmlpLiAxMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gZm9yIGltaXRhdGluZyB0aGUgZ2VuZXJhbHNoaXAgb2YgVGhlbWlzdG9jbGVzIHJhdGhlciB0aGFuIHRoYXQgb2YgUGVyaWNsZXMsIGFsdGhvdWdoIGhlIHdhcyBzaXR1YXRlZCBsaWtlIFBlcmljbGVzLCBhbmQgbm90IGxpa2UgVGhlbWlzdG9jbGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgQ2Flc2FyIGhhZCBzaG93biBieSB3aGF0IGhlIGRpZCB0aGF0IGhlIGdyZWF0bHkgZmVhcmVkIGEgcHJvdHJhY3Rpb24gb2YgdGhlIHdhci4gRm9yIGFmdGVyIGNhcHR1cmluZyBOdW1lcml1cywgYSBmcmllbmQgb2YgUG9tcGV5LCBoZSBzZW50IGhpbSB0byBCcnVuZGlzaXVtIHdpdGggYSByZXF1ZXN0IGZvciBhIHJlY29uY2lsaWF0aW9uIG9uIGVxdWFsIHRlcm1zLiBCdXQgTnVtZXJpdXMgc2FpbGVkIGF3YXkgd2l0aCBQb21wZXkuIFRoZW4gQ2Flc2FyLCB3aG8gaW4gc2l4dHkgZGF5cyBoYWQgYmVjb21lIG1hc3RlciBvZiBhbGwgSXRhbHkgd2l0aG91dCBibG9vZHNoZWQsIHdpc2hlZCB0byBwdXJzdWUgUG9tcGV5IGF0IG9uY2UsIGJ1dCBzaW5jZSBoZSBoYWQgbm8gdHJhbnNwb3J0cywgaGUgdHVybmVkIGJhY2sgYW5kIG1hcmNoZWQgaW50byBTcGFpbiwgZGVzaXJpbmcgdG8gd2luIG92ZXIgdG8gaGltc2VsZiB0aGUgZm9yY2VzIHRoZXJlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['63.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IE90aGVyIHBlb3BsZSwgbm93LCBjb3VudCB0aGlzIHNhaWxpbmcgYXdheSBvZiBQb21wZXkgYW1vbmcgaGlzIGJlc3Qgc3RyYXRhZ2VtcywgYnV0IENhZXNhciBoaW1zZWxmIHdhcyBhc3RvbmlzaGVkIHRoYXQgd2hlbiBoZSB3YXMgaW4gcG9zc2Vzc2lvbiBvZiBhIHN0cm9uZyBjaXR5IGFuZCBleHBlY3RlZCBoaXMgZm9yY2VzIGZyb20gU3BhaW4gYW5kIHdhcyBtYXN0ZXIgb2YgdGhlIHNlYSwgaGUgZ2F2ZSB1cCBhbmQgYWJhbmRvbmVkIEl0YWx5LiBDaWNlcm8gYWxzbyBibGFtZXMgaGltPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDcuMTEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcGlzdC4gYWQgQXR0LjwvdGl0bGU+IHZpaS4gMTEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGZvciBpbWl0YXRpbmcgdGhlIGdlbmVyYWxzaGlwIG9mIFRoZW1pc3RvY2xlcyByYXRoZXIgdGhhbiB0aGF0IG9mIFBlcmljbGVzLCBhbHRob3VnaCBoZSB3YXMgc2l0dWF0ZWQgbGlrZSBQZXJpY2xlcywgYW5kIG5vdCBsaWtlIFRoZW1pc3RvY2xlcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEF0dC4gNy4xMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwaXN0LiBhZCBBdHQuPC90aXRsZT4gdmlpLiAxMS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwaXN0LiBhZCBBdHQuPC90aXRsZT4gdmlpLiAxMS48L3RyYW5zbGF0aW9uPg=="
translation['63.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBDYWVzYXIgaGFkIHNob3duIGJ5IHdoYXQgaGUgZGlkIHRoYXQgaGUgZ3JlYXRseSBmZWFyZWQgYSBwcm90cmFjdGlvbiBvZiB0aGUgd2FyLiBGb3IgYWZ0ZXIgY2FwdHVyaW5nIE51bWVyaXVzLCBhIGZyaWVuZCBvZiBQb21wZXksIGhlIHNlbnQgaGltIHRvIEJydW5kaXNpdW0gd2l0aCBhIHJlcXVlc3QgZm9yIGEgcmVjb25jaWxpYXRpb24gb24gZXF1YWwgdGVybXMuIEJ1dCBOdW1lcml1cyBzYWlsZWQgYXdheSB3aXRoIFBvbXBleS4gVGhlbiBDYWVzYXIsIHdobyBpbiBzaXh0eSBkYXlzIGhhZCBiZWNvbWUgbWFzdGVyIG9mIGFsbCBJdGFseSB3aXRob3V0IGJsb29kc2hlZCwgd2lzaGVkIHRvIHB1cnN1ZSBQb21wZXkgYXQgb25jZSwgYnV0IHNpbmNlIGhlIGhhZCBubyB0cmFuc3BvcnRzLCBoZSB0dXJuZWQgYmFjayBhbmQgbWFyY2hlZCBpbnRvIFNwYWluLCBkZXNpcmluZyB0byB3aW4gb3ZlciB0byBoaW1zZWxmIHRoZSBmb3JjZXMgdGhlcmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPiBJbiB0aGUgbWVhbnRpbWUgYSBncmVhdCBmb3JjZSB3YXMgZ2F0aGVyZWQgYnkgUG9tcGV5LiBIaXMgbmF2eSB3YXMgc2ltcGx5IGlycmVzaXN0aWJsZSwgc2luY2UgaGUgaGFkIGZpdmUgaHVuZHJlZCBzaGlwcyBvZiB3YXIsIHdoaWxlIHRoZSBudW1iZXIgb2YgaGlzIGxpZ2h0IGdhbGxleXMgYW5kIGZhc3QgY3J1aXNlcnMgd2FzIGltbWVuc2U7IGhpcyBjYXZhbHJ5IG51bWJlcmVkIHNldmVuIHRob3VzYW5kLCB0aGUgZmxvd2VyIG9mIFJvbWUgYW5kIEl0YWx5LCBwcmVlbWluZW50IGluIGxpbmVhZ2UsIHdlYWx0aCwgYW5kIGNvdXJhZ2U7IGFuZCBoaXMgaW5mYW50cnksIHdoaWNoIHdhcyBhIG1peGVkIG11bHRpdHVkZSBhbmQgaW4gbmVlZCBvZiB0cmFpbmluZywgaGUgZXhlcmNpc2VkIGF0IEJlcm9lYSwgbm90IHNpdHRpbmcgaWRseSBieSwgYnV0IHRha2luZyBwYXJ0IGluIHRoZWlyIGV4ZXJjaXNlcyBoaW1zZWxmLCBhcyBpZiBoZSBoYWQgYmVlbiBpbiB0aGUgZmxvd2VyIG9mIGhpcyBhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgaXQgd2FzIGEgZ3JlYXQgaW5jZW50aXZlIHRvIGNvbmZpZGVuY2Ugd2hlbiB0aGV5IHNhdyBQb21wZXkgdGhlIEdyZWF0LCB3aG8gd2FzIG5vdyBzaXh0eSB5ZWFycyBvZiBhZ2UgbGVzcyB0d28sIGJ1dCB3aG8gbmV2ZXJ0aGVsZXNzIGNvbXBldGVkIGluIGZ1bGwgYXJtb3VyIGFzIGEgZm9vdC1zb2xkaWVyLCBhbmQgdGhlbiBhZ2FpbiwgYXMgYSBob3JzZW1hbiwgZHJldyBoaXMgc3dvcmQgd2l0aG91dCB0cm91YmxlIHdoaWxlIGhpcyBob3JzZSB3YXMgYXQgYSBnYWxsb3AgYW5kIHB1dCBpdCBiYWNrIGluIGl0cyBzaGVhdGggd2l0aCBlYXNlOyB3aGlsZSBpbiBodXJsaW5nIHRoZSBqYXZlbGluIGhlIG5vdCBvbmx5IGRpc3BsYXllZCBhY2N1cmFjeSwgYnV0IGFsc28gdmlnb3VyIGluIHRoZSBsZW5ndGggb2YgaGlzIGNhc3QsIHdoaWNoIG1hbnkgb2YgdGhlIHlvdW5nIG1lbiBjb3VsZCBub3Qgc3VycGFzcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUga2VwdCBjb21pbmcgdG8gaGltIGFsc28ga2luZ3Mgb2YgbmF0aW9ucyBhbmQgcG90ZW50YXRlcywgYW5kIG9mIHRoZSBsZWFkaW5nIG1lbiBmcm9tIFJvbWUgdGhlcmUgd2VyZSBlbm91Z2ggYWJvdXQgaGltIHRvIGZvcm0gYSBmdWxsIHNlbmF0ZS4gTGFiaWVudXMgYWxzbyBjYW1lLCBoYXZpbmcgZGVzZXJ0ZWQgQ2Flc2FyLCB0aG91Z2ggaGUgaGFkIGJlZW4gaGlzIGZyaWVuZCBhbmQgaGFkIHNlcnZlZCB1bmRlciBoaW0gaW4gR2F1bDsgYW5kIEJydXR1cywgYSBzb24gb2YgdGhlIEJydXR1cyB3aG8gaGFkIGJlZW4gcHV0IHRvIGRlYXRoIGJ5IFBvbXBleSBpbiBHYXVsLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTYuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmkuIDMgZi48L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJydXR1czwvdGl0bGU+LCBpdi4gMSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhIG1hbiBvZiBsb2Z0eSBzcGlyaXQsIHdobyBoYWQgbmV2ZXIgc3Bva2VuIHRvIFBvbXBleSBub3IgZXZlbiBzYWx1dGVkIGhpbSBiZWZvcmUsIGJlY2F1c2UgaGUgaGVsZCBoaW0gdG8gYmUgdGhlIG11cmRlcmVyIG9mIGhpcyBmYXRoZXIsIGJ1dCBub3cgaGUgcHV0IGhpbXNlbGYgdW5kZXIgaGlzIGNvbW1hbmQsIGJlbGlldmluZyBoaW0gdG8gYmUgYSBkZWxpdmVyZXIgb2YgUm9tZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Q2ljZXJvLCB0b28sIGFsdGhvdWdoIGhlIGhhZCBhZHZvY2F0ZWQgb3RoZXIgbWVhc3VyZXMgaW4gaGlzIHdyaXRpbmdzIGFuZCBoaXMgc3BlZWNoZXMgaW4gdGhlIHNlbmF0ZSwgbmV2ZXJ0aGVsZXNzIHdhcyBhc2hhbWVkIG5vdCB0byBiZSBvZiB0aGUgbnVtYmVyIG9mIHRob3NlIHdobyByaXNrZWQgYWxsIGZvciB0aGVpciBjb3VudHJ5LiBUaGVyZSBjYW1lIGFsc28gVGlkaXVzIFNleHRpdXMsIGEgbWFuIG9mIGV4dHJlbWUgb2xkIGFnZSBhbmQgbGFtZSBvZiBvbmUgbGVnLCBpbnRvIE1hY2Vkb25pYS4gVGhlIHJlc3QgbGF1Z2hlZCBhbmQgamVlcmVkIGF0IGhpbSwgYnV0IHdoZW4gUG9tcGV5IHNhdyBoaW0sIGhlIHJvc2UgYW5kIHJhbiB0byBtZWV0IGhpbSwgY291bnRpbmcgaXQgYSBncmVhdCB0ZXN0aW1vbnkgdGhhdCBtZW4gcGFzdCB0aGUgeWVhcnMgYW5kIHBhc3QgdGhlIHBvd2VyIG9mIHNlcnZpY2Ugc2hvdWxkIGNob29zZSBkYW5nZXIgd2l0aCBoaW0gaW4gcHJlZmVyZW5jZSB0byB0aGVpciBzYWZldHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['64.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IEluIHRoZSBtZWFudGltZSBhIGdyZWF0IGZvcmNlIHdhcyBnYXRoZXJlZCBieSBQb21wZXkuIEhpcyBuYXZ5IHdhcyBzaW1wbHkgaXJyZXNpc3RpYmxlLCBzaW5jZSBoZSBoYWQgZml2ZSBodW5kcmVkIHNoaXBzIG9mIHdhciwgd2hpbGUgdGhlIG51bWJlciBvZiBoaXMgbGlnaHQgZ2FsbGV5cyBhbmQgZmFzdCBjcnVpc2VycyB3YXMgaW1tZW5zZTsgaGlzIGNhdmFscnkgbnVtYmVyZWQgc2V2ZW4gdGhvdXNhbmQsIHRoZSBmbG93ZXIgb2YgUm9tZSBhbmQgSXRhbHksIHByZWVtaW5lbnQgaW4gbGluZWFnZSwgd2VhbHRoLCBhbmQgY291cmFnZTsgYW5kIGhpcyBpbmZhbnRyeSwgd2hpY2ggd2FzIGEgbWl4ZWQgbXVsdGl0dWRlIGFuZCBpbiBuZWVkIG9mIHRyYWluaW5nLCBoZSBleGVyY2lzZWQgYXQgQmVyb2VhLCBub3Qgc2l0dGluZyBpZGx5IGJ5LCBidXQgdGFraW5nIHBhcnQgaW4gdGhlaXIgZXhlcmNpc2VzIGhpbXNlbGYsIGFzIGlmIGhlIGhhZCBiZWVuIGluIHRoZSBmbG93ZXIgb2YgaGlzIGFnZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['64.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgaXQgd2FzIGEgZ3JlYXQgaW5jZW50aXZlIHRvIGNvbmZpZGVuY2Ugd2hlbiB0aGV5IHNhdyBQb21wZXkgdGhlIEdyZWF0LCB3aG8gd2FzIG5vdyBzaXh0eSB5ZWFycyBvZiBhZ2UgbGVzcyB0d28sIGJ1dCB3aG8gbmV2ZXJ0aGVsZXNzIGNvbXBldGVkIGluIGZ1bGwgYXJtb3VyIGFzIGEgZm9vdC1zb2xkaWVyLCBhbmQgdGhlbiBhZ2FpbiwgYXMgYSBob3JzZW1hbiwgZHJldyBoaXMgc3dvcmQgd2l0aG91dCB0cm91YmxlIHdoaWxlIGhpcyBob3JzZSB3YXMgYXQgYSBnYWxsb3AgYW5kIHB1dCBpdCBiYWNrIGluIGl0cyBzaGVhdGggd2l0aCBlYXNlOyB3aGlsZSBpbiBodXJsaW5nIHRoZSBqYXZlbGluIGhlIG5vdCBvbmx5IGRpc3BsYXllZCBhY2N1cmFjeSwgYnV0IGFsc28gdmlnb3VyIGluIHRoZSBsZW5ndGggb2YgaGlzIGNhc3QsIHdoaWNoIG1hbnkgb2YgdGhlIHlvdW5nIG1lbiBjb3VsZCBub3Qgc3VycGFzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['64.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGtlcHQgY29taW5nIHRvIGhpbSBhbHNvIGtpbmdzIG9mIG5hdGlvbnMgYW5kIHBvdGVudGF0ZXMsIGFuZCBvZiB0aGUgbGVhZGluZyBtZW4gZnJvbSBSb21lIHRoZXJlIHdlcmUgZW5vdWdoIGFib3V0IGhpbSB0byBmb3JtIGEgZnVsbCBzZW5hdGUuIExhYmllbnVzIGFsc28gY2FtZSwgaGF2aW5nIGRlc2VydGVkIENhZXNhciwgdGhvdWdoIGhlIGhhZCBiZWVuIGhpcyBmcmllbmQgYW5kIGhhZCBzZXJ2ZWQgdW5kZXIgaGltIGluIEdhdWw7IGFuZCBCcnV0dXMsIGEgc29uIG9mIHRoZSBCcnV0dXMgd2hvIGhhZCBiZWVuIHB1dCB0byBkZWF0aCBieSBQb21wZXkgaW4gR2F1bCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAxNi4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh2aS4gMyBmLjwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCBpdi4gMSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhIG1hbiBvZiBsb2Z0eSBzcGlyaXQsIHdobyBoYWQgbmV2ZXIgc3Bva2VuIHRvIFBvbXBleSBub3IgZXZlbiBzYWx1dGVkIGhpbSBiZWZvcmUsIGJlY2F1c2UgaGUgaGVsZCBoaW0gdG8gYmUgdGhlIG11cmRlcmVyIG9mIGhpcyBmYXRoZXIsIGJ1dCBub3cgaGUgcHV0IGhpbXNlbGYgdW5kZXIgaGlzIGNvbW1hbmQsIGJlbGlldmluZyBoaW0gdG8gYmUgYSBkZWxpdmVyZXIgb2YgUm9tZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAxNi4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh2aS4gMyBmLjwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCBpdi4gMSBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIGl2LiAxIGYuPC90cmFuc2xhdGlvbj4="
translation['64.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNpY2VybywgdG9vLCBhbHRob3VnaCBoZSBoYWQgYWR2b2NhdGVkIG90aGVyIG1lYXN1cmVzIGluIGhpcyB3cml0aW5ncyBhbmQgaGlzIHNwZWVjaGVzIGluIHRoZSBzZW5hdGUsIG5ldmVydGhlbGVzcyB3YXMgYXNoYW1lZCBub3QgdG8gYmUgb2YgdGhlIG51bWJlciBvZiB0aG9zZSB3aG8gcmlza2VkIGFsbCBmb3IgdGhlaXIgY291bnRyeS4gVGhlcmUgY2FtZSBhbHNvIFRpZGl1cyBTZXh0aXVzLCBhIG1hbiBvZiBleHRyZW1lIG9sZCBhZ2UgYW5kIGxhbWUgb2Ygb25lIGxlZywgaW50byBNYWNlZG9uaWEuIFRoZSByZXN0IGxhdWdoZWQgYW5kIGplZXJlZCBhdCBoaW0sIGJ1dCB3aGVuIFBvbXBleSBzYXcgaGltLCBoZSByb3NlIGFuZCByYW4gdG8gbWVldCBoaW0sIGNvdW50aW5nIGl0IGEgZ3JlYXQgdGVzdGltb255IHRoYXQgbWVuIHBhc3QgdGhlIHllYXJzIGFuZCBwYXN0IHRoZSBwb3dlciBvZiBzZXJ2aWNlIHNob3VsZCBjaG9vc2UgZGFuZ2VyIHdpdGggaGltIGluIHByZWZlcmVuY2UgdG8gdGhlaXIgc2FmZXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlbiB0aGVpciBzZW5hdGUgY29udmVuZWQgYW5kIGEgZGVjcmVlIHdhcyBwYXNzZWQsIG9uIG1vdGlvbiBvZiBDYXRvLCB0aGF0IG5vIFJvbWFuIHNob3VsZCBiZSBraWxsZWQgZXhjZXB0IG9uIGEgZmllbGQgb2YgYmF0dGxlLCBhbmQgdGhhdCBubyBjaXR5IHN1YmplY3QgdG8gUm9tZSBzaG91bGQgYmUgcGx1bmRlcmVkLCB0aGUgcGFydHkgb2YgUG9tcGV5IHdhcyBoZWxkIGluIHN0aWxsIGdyZWF0ZXIgZmF2b3VyLiBGb3IgdGhvc2UgZXZlbiB3aG8gdG9vayBubyBwYXJ0IGluIHRoZSB3YXIsIGVpdGhlciBiZWNhdXNlIHRoZXkgZHdlbHQgdG9vIGZhciBhd2F5LCBvciB3ZXJlIHRvbyB3ZWFrIHRvIGJlIHJlZ2FyZGVkLCBhdHRhY2hlZCB0aGVtc2VsdmVzIHRvIGl0IGluIHRoZWlyIHdpc2hlcyBhdCBsZWFzdCwgYW5kLCBhcyBmYXIgYXMgdGhlaXIgd29yZHMgd2VudCwgZm91Z2h0IHdpdGggaXQgaW4gYmVoYWxmIG9mIHRoZSByaWdodCwgY29uc2lkZXJpbmcgaGltIGEgZm9lIHRvIGdvZHMgYW5kIG1lbiB3aG8gZGlkIG5vdCB3aXNoIFBvbXBleSB0byBiZSB2aWN0b3Jpb3VzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['65.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IFdoZW4gdGhlaXIgc2VuYXRlIGNvbnZlbmVkIGFuZCBhIGRlY3JlZSB3YXMgcGFzc2VkLCBvbiBtb3Rpb24gb2YgQ2F0bywgdGhhdCBubyBSb21hbiBzaG91bGQgYmUga2lsbGVkIGV4Y2VwdCBvbiBhIGZpZWxkIG9mIGJhdHRsZSwgYW5kIHRoYXQgbm8gY2l0eSBzdWJqZWN0IHRvIFJvbWUgc2hvdWxkIGJlIHBsdW5kZXJlZCwgdGhlIHBhcnR5IG9mIFBvbXBleSB3YXMgaGVsZCBpbiBzdGlsbCBncmVhdGVyIGZhdm91ci4gRm9yIHRob3NlIGV2ZW4gd2hvIHRvb2sgbm8gcGFydCBpbiB0aGUgd2FyLCBlaXRoZXIgYmVjYXVzZSB0aGV5IGR3ZWx0IHRvbyBmYXIgYXdheSwgb3Igd2VyZSB0b28gd2VhayB0byBiZSByZWdhcmRlZCwgYXR0YWNoZWQgdGhlbXNlbHZlcyB0byBpdCBpbiB0aGVpciB3aXNoZXMgYXQgbGVhc3QsIGFuZCwgYXMgZmFyIGFzIHRoZWlyIHdvcmRzIHdlbnQsIGZvdWdodCB3aXRoIGl0IGluIGJlaGFsZiBvZiB0aGUgcmlnaHQsIGNvbnNpZGVyaW5nIGhpbSBhIGZvZSB0byBnb2RzIGFuZCBtZW4gd2hvIGRpZCBub3Qgd2lzaCBQb21wZXkgdG8gYmUgdmljdG9yaW91cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaXQgaXMgYWxzbyB0cnVlIHRoYXQgQ2Flc2FyIHNob3dlZCBoaW1zZWxmIG1lcmNpZnVsIGFzIGEgY29ucXVlcm9yOyBhZnRlciBkZWZlYXRpbmcgYW5kIGNhcHR1cmluZyB0aGUgZm9yY2VzIG9mIFBvbXBleSBpbiBTcGFpbiwgaGUgc2VudCBhd2F5IHRoZWlyIGNvbW1hbmRlcnMsIGFuZCB0b29rIHRoZSBzb2xkaWVycyBpbnRvIGhpcyBzZXJ2aWNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAxLjQxIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZT5CZWxsLiBDaXYuPC90aXRsZT4gSS4geGxpLjwvYmlibD4tPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMS44NyIgdmFsaWQ9InllcyI+bHh4eHZpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlbiBoZSByZS1jcm9zc2VkIHRoZSBBbHBzLCBtYXJjaGVkIHJhcGlkbHkgdGhyb3VnaCBJdGFseSwgYW5kIGNhbWUgdG8gQnJ1bmRpc2l1bSBzaG9ydGx5IGFmdGVyIHRoZSB3aW50ZXIgc29sc3RpY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T2YgNDkgQi5DLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Dcm9zc2luZyB0aGUgc2VhIHRoZXJlLCBoZSBoaW1zZWxmIHB1dCBpbiBhdCBPcmljdW0sIGJ1dCBoZSBkaXNwYXRjaGVkIFZpYnVsbGl1cywgdGhlIGZyaWVuZCBvZiBQb21wZXksIHdobyB3YXMgaGlzIHByaXNvbmVyIG9mIHdhciwgdG8gUG9tcGV5LCB3aXRoIGEgcHJvcG9zaXRpb24gdGhhdCB0aGV5IHNob3VsZCBob2xkIGEgY29uZmVyZW5jZSwgZGlzYmFuZCBhbGwgdGhlaXIgYXJtaWVzIHdpdGhpbiB0aHJlZSBkYXlzLCBhbmQgYWZ0ZXIgcmVuZXdpbmcgdGhlaXIgZnJpZW5kc2hpcCB1bmRlciBvYXRoLCByZXR1cm4gdG8gSXRhbHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgUG9tcGV5IHRob3VnaHQgdG8gYmUgYW5vdGhlciBzbmFyZSwgYW5kIG1hcmNoaW5nIHN3aWZ0bHkgZG93biB0byB0aGUgc2VhLCBoZSB0b29rIHBvc3Nlc3Npb24gb2YgdGhlIHBvc3RzLCByZWdpb25zLCBhbmQgc2l0ZXMgd2hpY2ggb2ZmZXJlZCBzdHJvbmcgcG9zaXRpb25zIGZvciBsYW5kIGZvcmNlcywgYXMgd2VsbCBhcyBvZiB0aGUgbmF2YWwgc3RhdGlvbnMgYW5kIGxhbmRpbmctcGxhY2VzIHdoaWNoIHdlcmUgZmF2b3VyYWJsZSBmb3IgdGhvc2Ugd2hvIGNhbWUgYnkgc2VhLCBzbyB0aGF0IGV2ZXJ5IHdpbmQgdGhhdCBibGV3IGJyb3VnaHQgUG9tcGV5IGdyYWluLCBvciB0cm9vcHMsIG9yIG1vbmV5OyB3aGlsZSBDYWVzYXIsIG9uIHRoZSBvdGhlciBoYW5kLCByZWR1Y2VkIHRvIHN0cmFpdHMgYnkgc2VhIGFuZCBsYW5kLCB3YXMgZm9yY2VkIHRvIHNlZWsgYSBiYXR0bGUsIGF0dGFja2luZyBQb21wZXkncyBkZWZlbmNlcyBhbmQgY2hhbGxlbmdpbmcgaGltIHRvIGNvbWUgb3V0IGFsbCB0aGUgd2hpbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZXNlIHNraXJtaXNoZXMgQ2Flc2FyIHdhcyBmb3IgdGhlIG1vc3QgcGFydCB2aWN0b3Jpb3VzIGFuZCBjYXJyaWVkIHRoZSBkYXk7IGJ1dCBvbmNlIGhlIG5hcnJvd2x5IGVzY2FwZWQgYmVpbmcgdXR0ZXJseSBjcnVzaGVkIGFuZCBsb3NpbmcgaGlzIGFybXksIGZvciBQb21wZXkgbWFkZSBhIGJyaWxsaWFudCBmaWdodCBhbmQgYXQgbGFzdCByb3V0ZWQgQ2Flc2FyJ3Mgd2hvbGUgZm9yY2UgYW5kIGtpbGxlZCB0d28gdGhvdXNhbmQgb2YgdGhlbS4gSGUgZGlkIG5vdCwgaG93ZXZlciwgZm9yY2UgaGlzIHdheSBpbnRvIHRoZWlyIGNhbXAgd2l0aCB0aGUgZnVnaXRpdmVzLCBlaXRoZXIgYmVjYXVzZSBoZSBjb3VsZCBub3QsIG9yIGJlY2F1c2UgaGUgZmVhcmVkIHRvIGRvIHNvLCBhbmQgdGhpcyBsZWQgQ2Flc2FyIHRvIHNheSB0byBoaXMgZnJpZW5kczogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Uby1kYXkgdmljdG9yeSB3b3VsZCBoYXZlIGJlZW4gd2l0aCB0aGUgZW5lbXkgaWYgdGhleSBoYWQgaGFkIGEgdmljdG9yIGluIGNvbW1hbmQuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['65.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IGlzIGFsc28gdHJ1ZSB0aGF0IENhZXNhciBzaG93ZWQgaGltc2VsZiBtZXJjaWZ1bCBhcyBhIGNvbnF1ZXJvcjsgYWZ0ZXIgZGVmZWF0aW5nIGFuZCBjYXB0dXJpbmcgdGhlIGZvcmNlcyBvZiBQb21wZXkgaW4gU3BhaW4sIGhlIHNlbnQgYXdheSB0aGVpciBjb21tYW5kZXJzLCBhbmQgdG9vayB0aGUgc29sZGllcnMgaW50byBoaXMgc2VydmljZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDEuNDEiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IEkuIHhsaS48L2JpYmw+LTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMS44NyIgdmFsaWQ9InllcyI+bHh4eHZpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlbiBoZSByZS1jcm9zc2VkIHRoZSBBbHBzLCBtYXJjaGVkIHJhcGlkbHkgdGhyb3VnaCBJdGFseSwgYW5kIGNhbWUgdG8gQnJ1bmRpc2l1bSBzaG9ydGx5IGFmdGVyIHRoZSB3aW50ZXIgc29sc3RpY2UuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAxLjQxIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBJLiB4bGkuPC9iaWJsPi08dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gSS4geGxpLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMS44NyIgdmFsaWQ9InllcyI+bHh4eHZpaS48L2JpYmw+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T2YgNDkgQi5DLjwvbm90ZT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['65.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNyb3NzaW5nIHRoZSBzZWEgdGhlcmUsIGhlIGhpbXNlbGYgcHV0IGluIGF0IE9yaWN1bSwgYnV0IGhlIGRpc3BhdGNoZWQgVmlidWxsaXVzLCB0aGUgZnJpZW5kIG9mIFBvbXBleSwgd2hvIHdhcyBoaXMgcHJpc29uZXIgb2Ygd2FyLCB0byBQb21wZXksIHdpdGggYSBwcm9wb3NpdGlvbiB0aGF0IHRoZXkgc2hvdWxkIGhvbGQgYSBjb25mZXJlbmNlLCBkaXNiYW5kIGFsbCB0aGVpciBhcm1pZXMgd2l0aGluIHRocmVlIGRheXMsIGFuZCBhZnRlciByZW5ld2luZyB0aGVpciBmcmllbmRzaGlwIHVuZGVyIG9hdGgsIHJldHVybiB0byBJdGFseS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['65.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgUG9tcGV5IHRob3VnaHQgdG8gYmUgYW5vdGhlciBzbmFyZSwgYW5kIG1hcmNoaW5nIHN3aWZ0bHkgZG93biB0byB0aGUgc2VhLCBoZSB0b29rIHBvc3Nlc3Npb24gb2YgdGhlIHBvc3RzLCByZWdpb25zLCBhbmQgc2l0ZXMgd2hpY2ggb2ZmZXJlZCBzdHJvbmcgcG9zaXRpb25zIGZvciBsYW5kIGZvcmNlcywgYXMgd2VsbCBhcyBvZiB0aGUgbmF2YWwgc3RhdGlvbnMgYW5kIGxhbmRpbmctcGxhY2VzIHdoaWNoIHdlcmUgZmF2b3VyYWJsZSBmb3IgdGhvc2Ugd2hvIGNhbWUgYnkgc2VhLCBzbyB0aGF0IGV2ZXJ5IHdpbmQgdGhhdCBibGV3IGJyb3VnaHQgUG9tcGV5IGdyYWluLCBvciB0cm9vcHMsIG9yIG1vbmV5OyB3aGlsZSBDYWVzYXIsIG9uIHRoZSBvdGhlciBoYW5kLCByZWR1Y2VkIHRvIHN0cmFpdHMgYnkgc2VhIGFuZCBsYW5kLCB3YXMgZm9yY2VkIHRvIHNlZWsgYSBiYXR0bGUsIGF0dGFja2luZyBQb21wZXkncyBkZWZlbmNlcyBhbmQgY2hhbGxlbmdpbmcgaGltIHRvIGNvbWUgb3V0IGFsbCB0aGUgd2hpbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['65.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZXNlIHNraXJtaXNoZXMgQ2Flc2FyIHdhcyBmb3IgdGhlIG1vc3QgcGFydCB2aWN0b3Jpb3VzIGFuZCBjYXJyaWVkIHRoZSBkYXk7IGJ1dCBvbmNlIGhlIG5hcnJvd2x5IGVzY2FwZWQgYmVpbmcgdXR0ZXJseSBjcnVzaGVkIGFuZCBsb3NpbmcgaGlzIGFybXksIGZvciBQb21wZXkgbWFkZSBhIGJyaWxsaWFudCBmaWdodCBhbmQgYXQgbGFzdCByb3V0ZWQgQ2Flc2FyJ3Mgd2hvbGUgZm9yY2UgYW5kIGtpbGxlZCB0d28gdGhvdXNhbmQgb2YgdGhlbS4gSGUgZGlkIG5vdCwgaG93ZXZlciwgZm9yY2UgaGlzIHdheSBpbnRvIHRoZWlyIGNhbXAgd2l0aCB0aGUgZnVnaXRpdmVzLCBlaXRoZXIgYmVjYXVzZSBoZSBjb3VsZCBub3QsIG9yIGJlY2F1c2UgaGUgZmVhcmVkIHRvIGRvIHNvLCBhbmQgdGhpcyBsZWQgQ2Flc2FyIHRvIHNheSB0byBoaXMgZnJpZW5kczogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRvLWRheSB2aWN0b3J5IHdvdWxkIGhhdmUgYmVlbiB3aXRoIHRoZSBlbmVteSBpZiB0aGV5IGhhZCBoYWQgYSB2aWN0b3IgaW4gY29tbWFuZC48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgc3VjY2VzcyB0aGUgZm9sbG93ZXJzIG9mIFBvbXBleSB3ZXJlIHNvIGVsYXRlZCB0aGF0IHRoZXkgd2VyZSBlYWdlciB0byBoYXZlIHRoZSBpc3N1ZSBkZWNpZGVkIGJ5IGEgYmF0dGxlLiBQb21wZXksIGhvd2V2ZXIsIGFsdGhvdWdoIGhlIHdyb3RlIHRvIGRpc3RhbnQga2luZ3MgYW5kIGdlbmVyYWxzIGFuZCBjaXRpZXMgaW4gdGhlIHRvbmUgb2YgYSB2aWN0b3IsIGZlYXJlZCB0aGUgcmlzayBvZiBzdWNoIGEgYmF0dGxlLCB0aGlua2luZyB0aGF0IGJ5IGltcG9zaW5nIGRlbGF5cyBhbmQgZGlzdHJlc3NlcyB1cG9uIHRoZW0gaGUgd291bGQgZmluYWxseSBzdWJkdWUgbWVuIHdobyB3ZXJlIGludmluY2libGUgaW4gYXJtcyBhbmQgaGFkIGJlZW4gYWNjdXN0b21lZCB0byBjb25xdWVyIHRvZ2V0aGVyIG5vdyBmb3IgYSBsb25nIHRpbWUsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aG8gZm9yIHRoZSBvdGhlciBkdXRpZXMgb2YgYSBjYW1wYWlnbiwgc3VjaCBhcyBsb25nIG1hcmNoZXMsIGNoYW5nZXMgb2YgcG9zaXRpb24sIHRoZSBkaWdnaW5nIG9mIHRyZW5jaGVzLCBhbmQgdGhlIGJ1aWxkaW5nIG9mIHdhbGxzLCB3ZXJlIGluY2FwYWNpdGF0ZWQgYnkgb2xkIGFnZSwgYW5kIHRoZXJlZm9yZSBlYWdlciB0byBjb21lIHRvIGNsb3NlIHF1YXJ0ZXJzIGFuZCBmaWdodCBoYW5kIHRvIGhhbmQgd2l0aG91dCBkZWxheS4gTm90d2l0aHN0YW5kaW5nIHRoZWlyIG92ZXItY29uZmlkZW5jZSwgUG9tcGV5IGhhZCBoaXRoZXJ0byBzb21laG93IG9yIG90aGVyIHN1Y2NlZWRlZCBpbiBpbmR1Y2luZyBoaXMgZm9sbG93ZXJzIHRvIGtlZXAgcXVpZXQ7IGJ1dCB3aGVuIGFmdGVyIHRoZSBiYXR0bGUgQ2Flc2FyIHdhcyBjb21wZWxsZWQgYnkgaGlzIGxhY2sgb2Ygc3VwcGxpZXMgdG8gYnJlYWsgY2FtcCBhbmQgbWFyY2ggdGhyb3VnaCBBdGhhbWFuaWEgaW50byBUaGVzc2FseSwgdGhlaXIgc3Bpcml0cyBjb3VsZCBubyBsb25nZXIgYmUgcmVzdHJhaW5lZCwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YnV0LCBjcnlpbmcgb3V0IHRoYXQgQ2Flc2FyIHdhcyBpbiBmbGlnaHQsIHNvbWUgb2YgdGhlbSB3ZXJlIGZvciBmb2xsb3dpbmcgaW4gcHVyc3VpdCBvZiBoaW0sIG90aGVycyBmb3IgY3Jvc3Npbmcgb3ZlciBpbnRvIEl0YWx5LCBhbmQgb3RoZXJzIHdlcmUgc2VuZGluZyB0aGVpciBhdHRlbmRhbnRzIGFuZCBmcmllbmRzIHRvIFJvbWUgaW4gb3JkZXIgdG8gcHJlb2NjdXB5IGhvdXNlcyBuZWFyIHRoZSBmb3J1bSwgcHVycG9zaW5nIGF0IG9uY2UgdG8gYmVjb21lIGNhbmRpZGF0ZXMgZm9yIG9mZmljZS4gTWFueSwgdG9vLCBvZiB0aGVpciBvd24gYWNjb3JkIHNhaWxlZCB0byBDb3JuZWxpYSBpbiBMZXNib3Mgd2l0aCB0aGUgZ2xhZCB0aWRpbmdzIHRoYXQgdGhlIHdhciB3YXMgYXQgYW4gZW5kOyBmb3IgUG9tcGV5IGhhZCBzZW50IGhlciB0aGVyZSBmb3Igc2FmZXR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['66.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyBzdWNjZXNzIHRoZSBmb2xsb3dlcnMgb2YgUG9tcGV5IHdlcmUgc28gZWxhdGVkIHRoYXQgdGhleSB3ZXJlIGVhZ2VyIHRvIGhhdmUgdGhlIGlzc3VlIGRlY2lkZWQgYnkgYSBiYXR0bGUuIFBvbXBleSwgaG93ZXZlciwgYWx0aG91Z2ggaGUgd3JvdGUgdG8gZGlzdGFudCBraW5ncyBhbmQgZ2VuZXJhbHMgYW5kIGNpdGllcyBpbiB0aGUgdG9uZSBvZiBhIHZpY3RvciwgZmVhcmVkIHRoZSByaXNrIG9mIHN1Y2ggYSBiYXR0bGUsIHRoaW5raW5nIHRoYXQgYnkgaW1wb3NpbmcgZGVsYXlzIGFuZCBkaXN0cmVzc2VzIHVwb24gdGhlbSBoZSB3b3VsZCBmaW5hbGx5IHN1YmR1ZSBtZW4gd2hvIHdlcmUgaW52aW5jaWJsZSBpbiBhcm1zIGFuZCBoYWQgYmVlbiBhY2N1c3RvbWVkIHRvIGNvbnF1ZXIgdG9nZXRoZXIgbm93IGZvciBhIGxvbmcgdGltZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['66.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aG8gZm9yIHRoZSBvdGhlciBkdXRpZXMgb2YgYSBjYW1wYWlnbiwgc3VjaCBhcyBsb25nIG1hcmNoZXMsIGNoYW5nZXMgb2YgcG9zaXRpb24sIHRoZSBkaWdnaW5nIG9mIHRyZW5jaGVzLCBhbmQgdGhlIGJ1aWxkaW5nIG9mIHdhbGxzLCB3ZXJlIGluY2FwYWNpdGF0ZWQgYnkgb2xkIGFnZSwgYW5kIHRoZXJlZm9yZSBlYWdlciB0byBjb21lIHRvIGNsb3NlIHF1YXJ0ZXJzIGFuZCBmaWdodCBoYW5kIHRvIGhhbmQgd2l0aG91dCBkZWxheS4gTm90d2l0aHN0YW5kaW5nIHRoZWlyIG92ZXItY29uZmlkZW5jZSwgUG9tcGV5IGhhZCBoaXRoZXJ0byBzb21laG93IG9yIG90aGVyIHN1Y2NlZWRlZCBpbiBpbmR1Y2luZyBoaXMgZm9sbG93ZXJzIHRvIGtlZXAgcXVpZXQ7IGJ1dCB3aGVuIGFmdGVyIHRoZSBiYXR0bGUgQ2Flc2FyIHdhcyBjb21wZWxsZWQgYnkgaGlzIGxhY2sgb2Ygc3VwcGxpZXMgdG8gYnJlYWsgY2FtcCBhbmQgbWFyY2ggdGhyb3VnaCBBdGhhbWFuaWEgaW50byBUaGVzc2FseSwgdGhlaXIgc3Bpcml0cyBjb3VsZCBubyBsb25nZXIgYmUgcmVzdHJhaW5lZCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['66.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCwgY3J5aW5nIG91dCB0aGF0IENhZXNhciB3YXMgaW4gZmxpZ2h0LCBzb21lIG9mIHRoZW0gd2VyZSBmb3IgZm9sbG93aW5nIGluIHB1cnN1aXQgb2YgaGltLCBvdGhlcnMgZm9yIGNyb3NzaW5nIG92ZXIgaW50byBJdGFseSwgYW5kIG90aGVycyB3ZXJlIHNlbmRpbmcgdGhlaXIgYXR0ZW5kYW50cyBhbmQgZnJpZW5kcyB0byBSb21lIGluIG9yZGVyIHRvIHByZW9jY3VweSBob3VzZXMgbmVhciB0aGUgZm9ydW0sIHB1cnBvc2luZyBhdCBvbmNlIHRvIGJlY29tZSBjYW5kaWRhdGVzIGZvciBvZmZpY2UuIE1hbnksIHRvbywgb2YgdGhlaXIgb3duIGFjY29yZCBzYWlsZWQgdG8gQ29ybmVsaWEgaW4gTGVzYm9zIHdpdGggdGhlIGdsYWQgdGlkaW5ncyB0aGF0IHRoZSB3YXIgd2FzIGF0IGFuIGVuZDsgZm9yIFBvbXBleSBoYWQgc2VudCBoZXIgdGhlcmUgZm9yIHNhZmV0eS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QSBzZW5hdGUgaGF2aW5nIGJlZW4gYXNzZW1ibGVkLCBBZnJhbml1cyBnYXZlIGl0IGFzIGhpcyBvcGluaW9uIHRoYXQgdGhleSBzaG91bGQgbWFrZSBzdXJlIG9mIEl0YWx5LCBmb3IgSXRhbHkgd2FzIHRoZSBncmVhdGVzdCBwcml6ZSBvZiB0aGUgd2FyLCBhbmQgd291bGQgYXQgb25jZSBwdXQgYWxzbyBpbnRvIHRoZSBoYW5kcyBvZiBoZXIgbWFzdGVycyBTaWNpbHksIFNhcmRpbmlhLCBDb3JzaWNhLCBTcGFpbiwgYW5kIGFsbCBHYXVsOyBhbmQgc2luY2UgaGlzIG5hdGl2ZSBsYW5kLCB3aGljaCB3YXMgb2YgdGhlIGdyZWF0ZXN0IGNvbmNlcm4gdG8gUG9tcGV5LCBzdHJldGNoZWQgb3V0IHN1cHBsaWFudCBoYW5kcyB0byBoaW0gY2xvc2UgYnksIGl0IHdhcyBub3QgcmlnaHQgdG8gYWxsb3cgaGVyIHRvIGJlIGVuc2xhdmVkIGFuZCBpbnN1bHRlZCBieSBzZXJ2YW50cyBhbmQgZmxhdHRlcmVycyBvZiB0eXJhbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Qb21wZXkgaGltc2VsZiwgaG93ZXZlciwgdGhvdWdodCBpdCBuZWl0aGVyIHdlbGwgZm9yIGhpcyBvd24gcmVwdXRhdGlvbiB0byBydW4gYXdheSBhIHNlY29uZCB0aW1lIGZyb20gQ2Flc2FyIGFuZCB0byBiZSBwdXJzdWVkIGJ5IGhpbSwgd2hlbiBmb3J0dW5lIG1hZGUgaGltIHRoZSBwdXJzdWVyLCBub3IgcmlnaHQgYmVmb3JlIEhlYXZlbiB0byBhYmFuZG9uIFNjaXBpbyBhbmQgdGhlIG1lbiBvZiBjb25zdWxhciByYW5rIGluIFRoZXNzYWx5IGFuZCBIZWxsYXMsIHdobyB3b3VsZCBhdCBvbmNlIGNvbWUgaW50byB0aGUgcG93ZXIgb2YgQ2Flc2FyIHRvZ2V0aGVyIHdpdGggdGhlaXIgbW9uZXlzIGFuZCBsYXJnZSBmb3JjZXM7IGJ1dCB0aGF0IGhlIGNhcmVkIG1vc3QgZm9yIFJvbWUgd2hvIGZvdWdodCBmb3IgaGVyIGF0IHRoZSBmYXJ0aGVzdCByZW1vdmUsIGluIG9yZGVyIHRoYXQgc2hlIG1pZ2h0IG5laXRoZXIgc3VmZmVyIG5vciBoZWFyIGFib3V0IGFueSBldmlsLCBidXQgcXVpZXRseSBhd2FpdCBoZXIgbWFzdGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['66.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkEgc2VuYXRlIGhhdmluZyBiZWVuIGFzc2VtYmxlZCwgQWZyYW5pdXMgZ2F2ZSBpdCBhcyBoaXMgb3BpbmlvbiB0aGF0IHRoZXkgc2hvdWxkIG1ha2Ugc3VyZSBvZiBJdGFseSwgZm9yIEl0YWx5IHdhcyB0aGUgZ3JlYXRlc3QgcHJpemUgb2YgdGhlIHdhciwgYW5kIHdvdWxkIGF0IG9uY2UgcHV0IGFsc28gaW50byB0aGUgaGFuZHMgb2YgaGVyIG1hc3RlcnMgU2ljaWx5LCBTYXJkaW5pYSwgQ29yc2ljYSwgU3BhaW4sIGFuZCBhbGwgR2F1bDsgYW5kIHNpbmNlIGhpcyBuYXRpdmUgbGFuZCwgd2hpY2ggd2FzIG9mIHRoZSBncmVhdGVzdCBjb25jZXJuIHRvIFBvbXBleSwgc3RyZXRjaGVkIG91dCBzdXBwbGlhbnQgaGFuZHMgdG8gaGltIGNsb3NlIGJ5LCBpdCB3YXMgbm90IHJpZ2h0IHRvIGFsbG93IGhlciB0byBiZSBlbnNsYXZlZCBhbmQgaW5zdWx0ZWQgYnkgc2VydmFudHMgYW5kIGZsYXR0ZXJlcnMgb2YgdHlyYW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['66.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSBoaW1zZWxmLCBob3dldmVyLCB0aG91Z2h0IGl0IG5laXRoZXIgd2VsbCBmb3IgaGlzIG93biByZXB1dGF0aW9uIHRvIHJ1biBhd2F5IGEgc2Vjb25kIHRpbWUgZnJvbSBDYWVzYXIgYW5kIHRvIGJlIHB1cnN1ZWQgYnkgaGltLCB3aGVuIGZvcnR1bmUgbWFkZSBoaW0gdGhlIHB1cnN1ZXIsIG5vciByaWdodCBiZWZvcmUgSGVhdmVuIHRvIGFiYW5kb24gU2NpcGlvIGFuZCB0aGUgbWVuIG9mIGNvbnN1bGFyIHJhbmsgaW4gVGhlc3NhbHkgYW5kIEhlbGxhcywgd2hvIHdvdWxkIGF0IG9uY2UgY29tZSBpbnRvIHRoZSBwb3dlciBvZiBDYWVzYXIgdG9nZXRoZXIgd2l0aCB0aGVpciBtb25leXMgYW5kIGxhcmdlIGZvcmNlczsgYnV0IHRoYXQgaGUgY2FyZWQgbW9zdCBmb3IgUm9tZSB3aG8gZm91Z2h0IGZvciBoZXIgYXQgdGhlIGZhcnRoZXN0IHJlbW92ZSwgaW4gb3JkZXIgdGhhdCBzaGUgbWlnaHQgbmVpdGhlciBzdWZmZXIgbm9yIGhlYXIgYWJvdXQgYW55IGV2aWwsIGJ1dCBxdWlldGx5IGF3YWl0IGhlciBtYXN0ZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyBkZWNpZGVkIHRoZSBtYXR0ZXIgaW4gdGhpcyB3YXksIFBvbXBleSBzZXQgb3V0IGluIHB1cnN1aXQgb2YgQ2Flc2FyLCBkZXRlcm1pbmVkIHRvIGF2b2lkIGEgYmF0dGxlLCBidXQgdG8ga2VlcCBoaW0gdW5kZXIgc2llZ2UgYW5kIGhhcmFzcyBoaW0gd2l0aCBsYWNrIG9mIHN1cHBsaWVzIGJ5IGZvbGxvd2luZyBjbG9zZSB1cG9uIGhpbS4gSGUgaGFkIHJlYXNvbnMgZm9yIHRoaW5raW5nIHRoaXMgdGhlIGJlc3QgY291cnNlLCBhbmQgYmVzaWRlcywgYSBzYXlpbmcgY3VycmVudCBhbW9uZyB0aGUgY2F2YWxyeSByZWFjaGVkIGhpcyBlYXJzLCB0byB0aGUgZWZmZWN0IHRoYXQgYXMgc29vbiBhcyB0aGV5IGhhZCByb3V0ZWQgQ2Flc2FyIHRoZXkgbXVzdCBwdXQgZG93biBQb21wZXkgaGltc2VsZiBhbHNvLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc29tZSBzYXkgdGhpcyB3YXMgYWxzbyB0aGUgcmVhc29uIHdoeSBQb21wZXkgY2FsbGVkIHVwb24gQ2F0byBmb3Igbm8gc2VydmljZSBvZiBhbnkgaW1wb3J0YW5jZSwgYnV0IGV2ZW4gd2hlbiBtYXJjaGluZyBhZ2FpbnN0IENhZXNhciBsZWZ0IGhpbSBhdCB0aGUgY29hc3QgaW4gY2hhcmdlIG9mIHRoZSBiYWdnYWdlLCBmZWFyaW5nIGxlc3QsIGlmIENhZXNhciBzaG91bGQgYmUgdGFrZW4gb2ZmLCBoZSBoaW1zZWxmIGFsc28gbWlnaHQgYmUgZm9yY2VkIGJ5IENhdG8gdG8gbGF5IGRvd24gaGlzIGNvbW1hbmQgYXQgb25jZS4gV2hpbGUgaGUgd2FzIHRodXMgcXVpZXRseSBmb2xsb3dpbmcgdGhlIGVuZW15IGhlIHdhcyBsb3VkbHkgZGVub3VuY2VkLCBhbmQgY2hhcmdlcyB3ZXJlIHJpZmUgdGhhdCBoZSB3YXMgZGlyZWN0aW5nIGhpcyBjYW1wYWlnbiwgbm90IGFnYWluc3QgQ2Flc2FyLCBidXQgYWdhaW5zdCBoaXMgY291bnRyeSBhbmQgdGhlIHNlbmF0ZSwgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBhbHdheXMgYmUgaW4gb2ZmaWNlIGFuZCBuZXZlciBjZWFzZSB0byBoYXZlIGZvciBoaXMgYXR0ZW5kYW50cyBhbmQgZ3VhcmRzIG1lbiB3aG8gY2xhaW1lZCB0byBydWxlIHRoZSB3b3JsZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+RG9taXRpdXMgQWhlbm9iYXJidXMsIHRvbywgYnkgY2FsbGluZyBoaW0gQWdhbWVtbm9uLCBhbmQgS2luZyBvZiBLaW5ncywgbWFkZSBoaW0gb2Rpb3VzLiBBbmQgRmF2b25pdXMgd2FzIG5vIGxlc3MgZGlzcGxlYXNpbmcgdG8gaGltIHRoYW4gdGhvc2Ugd2hvIHVzZWQgYSBib2xkZXIgc3BlZWNoLCB3aGVuIGhlIGJhd2xlZCBvdXQgaGlzIHVudGltZWx5IGplc3Q6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBtZW4sIHRoaXMgeWVhciwgYWxzbywgc2hhbGwgd2UgZWF0IG5vIGZpZ3Mgb2YgVHVzY3VsdW0/PC9xPiBBbmQgTHVjaXVzIEFmcmFuaXVzLCB3aG8gbGF5IHVuZGVyIGEgY2hhcmdlIG9mIHRyZWFjaGVyeSBmb3IgaGF2aW5nIGxvc3QgaGlzIGZvcmNlcyBpbiBTcGFpbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5IZSB3YXMgYWNjdXNlZCBvZiB0YWtpbmcgYSBicmliZSBmcm9tIENhZXNhciBmb3IgdGhlIHN1cnJlbmRlciBvZiB0aGUgU3BhaW5zIChzZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA0MS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhZXNhcjwvdGl0bGU+LCB4bGkuIDI8L2JpYmw+KS48L25vdGU+IG9uIHNlZWluZyBQb21wZXkgbm93IGF2b2lkaW5nIGEgYmF0dGxlIHdpdGggQ2Flc2FyLCBzYWlkIGhlIHdhcyBhc3RvbmlzaGVkIHRoYXQgaGlzIGFjY3VzZXJzIGRpZCBub3QgZ28gZm9ydGggYW5kIGZpZ2h0IHRoaXMgdHJhZmZpY2tlciBpbiBwcm92aW5jZXMuIAoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['67.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIGRlY2lkZWQgdGhlIG1hdHRlciBpbiB0aGlzIHdheSwgUG9tcGV5IHNldCBvdXQgaW4gcHVyc3VpdCBvZiBDYWVzYXIsIGRldGVybWluZWQgdG8gYXZvaWQgYSBiYXR0bGUsIGJ1dCB0byBrZWVwIGhpbSB1bmRlciBzaWVnZSBhbmQgaGFyYXNzIGhpbSB3aXRoIGxhY2sgb2Ygc3VwcGxpZXMgYnkgZm9sbG93aW5nIGNsb3NlIHVwb24gaGltLiBIZSBoYWQgcmVhc29ucyBmb3IgdGhpbmtpbmcgdGhpcyB0aGUgYmVzdCBjb3Vyc2UsIGFuZCBiZXNpZGVzLCBhIHNheWluZyBjdXJyZW50IGFtb25nIHRoZSBjYXZhbHJ5IHJlYWNoZWQgaGlzIGVhcnMsIHRvIHRoZSBlZmZlY3QgdGhhdCBhcyBzb29uIGFzIHRoZXkgaGFkIHJvdXRlZCBDYWVzYXIgdGhleSBtdXN0IHB1dCBkb3duIFBvbXBleSBoaW1zZWxmIGFsc28uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['67.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzb21lIHNheSB0aGlzIHdhcyBhbHNvIHRoZSByZWFzb24gd2h5IFBvbXBleSBjYWxsZWQgdXBvbiBDYXRvIGZvciBubyBzZXJ2aWNlIG9mIGFueSBpbXBvcnRhbmNlLCBidXQgZXZlbiB3aGVuIG1hcmNoaW5nIGFnYWluc3QgQ2Flc2FyIGxlZnQgaGltIGF0IHRoZSBjb2FzdCBpbiBjaGFyZ2Ugb2YgdGhlIGJhZ2dhZ2UsIGZlYXJpbmcgbGVzdCwgaWYgQ2Flc2FyIHNob3VsZCBiZSB0YWtlbiBvZmYsIGhlIGhpbXNlbGYgYWxzbyBtaWdodCBiZSBmb3JjZWQgYnkgQ2F0byB0byBsYXkgZG93biBoaXMgY29tbWFuZCBhdCBvbmNlLiBXaGlsZSBoZSB3YXMgdGh1cyBxdWlldGx5IGZvbGxvd2luZyB0aGUgZW5lbXkgaGUgd2FzIGxvdWRseSBkZW5vdW5jZWQsIGFuZCBjaGFyZ2VzIHdlcmUgcmlmZSB0aGF0IGhlIHdhcyBkaXJlY3RpbmcgaGlzIGNhbXBhaWduLCBub3QgYWdhaW5zdCBDYWVzYXIsIGJ1dCBhZ2FpbnN0IGhpcyBjb3VudHJ5IGFuZCB0aGUgc2VuYXRlLCBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0IGFsd2F5cyBiZSBpbiBvZmZpY2UgYW5kIG5ldmVyIGNlYXNlIHRvIGhhdmUgZm9yIGhpcyBhdHRlbmRhbnRzIGFuZCBndWFyZHMgbWVuIHdobyBjbGFpbWVkIHRvIHJ1bGUgdGhlIHdvcmxkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['67.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkRvbWl0aXVzIEFoZW5vYmFyYnVzLCB0b28sIGJ5IGNhbGxpbmcgaGltIEFnYW1lbW5vbiwgYW5kIEtpbmcgb2YgS2luZ3MsIG1hZGUgaGltIG9kaW91cy4gQW5kIEZhdm9uaXVzIHdhcyBubyBsZXNzIGRpc3BsZWFzaW5nIHRvIGhpbSB0aGFuIHRob3NlIHdobyB1c2VkIGEgYm9sZGVyIHNwZWVjaCwgd2hlbiBoZSBiYXdsZWQgb3V0IGhpcyB1bnRpbWVseSBqZXN0OiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBtZW4sIHRoaXMgeWVhciwgYWxzbywgc2hhbGwgd2UgZWF0IG5vIGZpZ3Mgb2YgVHVzY3VsdW0/PC9xPiBBbmQgTHVjaXVzIEFmcmFuaXVzLCB3aG8gbGF5IHVuZGVyIGEgY2hhcmdlIG9mIHRyZWFjaGVyeSBmb3IgaGF2aW5nIGxvc3QgaGlzIGZvcmNlcyBpbiBTcGFpbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkhlIHdhcyBhY2N1c2VkIG9mIHRha2luZyBhIGJyaWJlIGZyb20gQ2Flc2FyIGZvciB0aGUgc3VycmVuZGVyIG9mIHRoZSBTcGFpbnMgKHNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNDEuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4bGkuIDI8L2JpYmw+KS48L25vdGU+IG9uIHNlZWluZyBQb21wZXkgbm93IGF2b2lkaW5nIGEgYmF0dGxlIHdpdGggQ2Flc2FyLCBzYWlkIGhlIHdhcyBhc3RvbmlzaGVkIHRoYXQgaGlzIGFjY3VzZXJzIGRpZCBub3QgZ28gZm9ydGggYW5kIGZpZ2h0IHRoaXMgdHJhZmZpY2tlciBpbiBwcm92aW5jZXMuIAoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA0MS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHhsaS4gMjwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4bGkuIDI8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHRoZXNlIGFuZCBtYW55IHNpbWlsYXIgc3BlZWNoZXMgdGhleSBmb3JjZWQgUG9tcGV5IGZyb20gaGlzIHNldHRsZWQgcHVycG9zZSzigJRhIG1hbiB3aG8gd2FzIGEgc2xhdmUgdG8gZmFtZSBhbmQgbG9hdGggdG8gZGlzYXBwb2ludCBoaXMgZnJpZW5kcyzigJRhbmQgZHJhZ2dlZCBoaW0gaW50byBmb2xsb3dpbmcgYWZ0ZXIgdGhlaXIgb3duIGhvcGVzIGFuZCBpbXB1bHNlcywgYWJhbmRvbmluZyBoaXMgYmVzdCBsYWlkIHBsYW5zLCBhIHRoaW5nIHdoaWNoIGV2ZW4gaW4gdGhlIG1hc3RlciBvZiBhIHNoaXAsIHRvIHNheSBub3RoaW5nIG9mIGEgZ2VuZXJhbCBpbiBzb2xlIGNvbW1hbmQgb2Ygc28gbWFueSBuYXRpb25zIGFuZCBhcm1pZXMsIHdvdWxkIGhhdmUgYmVlbiB1bmJlY29taW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Qb21wZXkgaGltc2VsZiBhcHByb3ZlZCBvZiB0aG9zZSBwaHlzaWNpYW5zIHdobyBuZXZlciBncmF0aWZ5IHRoZSBtb3JiaWQgZGVzaXJlcyBvZiB0aGVpciBwYXRpZW50cywgYW5kIHlldCBoZSB5aWVsZGVkIHRvIHRoZSBkaXNlYXNlZCBwYXNzaW9uIG9mIGhpcyBmb2xsb3dlcnMsIGZvciBmZWFyIG9mIG9mZmVuZGluZyBpZiBoZSB0cmllZCB0byBoZWFsIGFuZCBzYXZlIHRoZW0uIEZvciBob3cgY2FuIG9uZSBzYXkgdGhhdCB0aG9zZSBtZW4gd2VyZSBzb3VuZCBhbmQgd2VsbCwgc29tZSBvZiB3aG9tIHdlcmUgYWxyZWFkeSBnb2luZyBhYm91dCBhbW9uZyB0aGUgc29sZGllcnMgYW5kIGNhbnZhc3NpbmcgZm9yIGNvbnN1bHNoaXBzIGFuZCBwcmFldG9yc2hpcHMsIHdoaWxlIFNwaW50aGVyLCBEb21pdGl1cywgYW5kIFNjaXBpbyB3ZXJlIHF1YXJyZWxsaW5nLCBzY2hlbWluZywgYW5kIGNvbnNwaXJpbmcgb3ZlciB0aGUgcG9udGlmaWNhdGUgb2YgQ2Flc2FyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNpbmNlIDYzIEIuQy4sIENhZXNhciBoYWQgYmVlbiA8Zm9yZWlnbiBsYW5nPSJsYSI+cG9udGlmZXggbWF4aW11czwvZm9yZWlnbj4uIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjgzIiB2YWxpZD0ieWVzIj5CZWxsLiBDaXYuIGlpaS4gODMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+anVzdCBhcyB0aG91Z2ggVGlncmFuZXMgdGhlIEFybWVuaWFuIHdlcmUgZW5jYW1wZWQgb3ZlciBhZ2FpbnN0IHRoZW0sIG9yIHRoZSBraW5nIG9mIHRoZSBOYWJhdGFlYW5zLCBhbmQgbm90IHRoYXQgQ2Flc2FyLCBhbmQgdGhhdCBhcm15LCB3aG8gaGFkIHRha2VuIGJ5IHN0b3JtIGEgdGhvdXNhbmQgY2l0aWVzLCBzdWJkdWVkIG1vcmUgdGhhbiB0aHJlZSBodW5kcmVkIG5hdGlvbnMsIGFuZCBmb3VnaHQgdW52YW5xdWlzaGVkIHdpdGggR2VybWFucyBhbmQgR2F1bHMgaW4gbW9yZSBiYXR0bGVzIHRoYW4gb25lIGNvdWxkIG51bWJlciwgdGFraW5nIGEgaHVuZHJlZCB0aW1lcyB0ZW4gdGhvdXNhbmQgcHJpc29uZXJzLCBhbmQgc2xheWluZyBhcyBtYW55LCBhZnRlciByb3V0aW5nIHRoZW0gb24gdGhlIGJhdHRsZS1maWVsZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['67.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlc2UgYW5kIG1hbnkgc2ltaWxhciBzcGVlY2hlcyB0aGV5IGZvcmNlZCBQb21wZXkgZnJvbSBoaXMgc2V0dGxlZCBwdXJwb3NlLOKAlGEgbWFuIHdobyB3YXMgYSBzbGF2ZSB0byBmYW1lIGFuZCBsb2F0aCB0byBkaXNhcHBvaW50IGhpcyBmcmllbmRzLOKAlGFuZCBkcmFnZ2VkIGhpbSBpbnRvIGZvbGxvd2luZyBhZnRlciB0aGVpciBvd24gaG9wZXMgYW5kIGltcHVsc2VzLCBhYmFuZG9uaW5nIGhpcyBiZXN0IGxhaWQgcGxhbnMsIGEgdGhpbmcgd2hpY2ggZXZlbiBpbiB0aGUgbWFzdGVyIG9mIGEgc2hpcCwgdG8gc2F5IG5vdGhpbmcgb2YgYSBnZW5lcmFsIGluIHNvbGUgY29tbWFuZCBvZiBzbyBtYW55IG5hdGlvbnMgYW5kIGFybWllcywgd291bGQgaGF2ZSBiZWVuIHVuYmVjb21pbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['67.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSBoaW1zZWxmIGFwcHJvdmVkIG9mIHRob3NlIHBoeXNpY2lhbnMgd2hvIG5ldmVyIGdyYXRpZnkgdGhlIG1vcmJpZCBkZXNpcmVzIG9mIHRoZWlyIHBhdGllbnRzLCBhbmQgeWV0IGhlIHlpZWxkZWQgdG8gdGhlIGRpc2Vhc2VkIHBhc3Npb24gb2YgaGlzIGZvbGxvd2VycywgZm9yIGZlYXIgb2Ygb2ZmZW5kaW5nIGlmIGhlIHRyaWVkIHRvIGhlYWwgYW5kIHNhdmUgdGhlbS4gRm9yIGhvdyBjYW4gb25lIHNheSB0aGF0IHRob3NlIG1lbiB3ZXJlIHNvdW5kIGFuZCB3ZWxsLCBzb21lIG9mIHdob20gd2VyZSBhbHJlYWR5IGdvaW5nIGFib3V0IGFtb25nIHRoZSBzb2xkaWVycyBhbmQgY2FudmFzc2luZyBmb3IgY29uc3Vsc2hpcHMgYW5kIHByYWV0b3JzaGlwcywgd2hpbGUgU3BpbnRoZXIsIERvbWl0aXVzLCBhbmQgU2NpcGlvIHdlcmUgcXVhcnJlbGxpbmcsIHNjaGVtaW5nLCBhbmQgY29uc3BpcmluZyBvdmVyIHRoZSBwb250aWZpY2F0ZSBvZiBDYWVzYXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TaW5jZSA2MyBCLkMuLCBDYWVzYXIgaGFkIGJlZW4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cG9udGlmZXggbWF4aW11czwvZm9yZWlnbj4uIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuODMiIHZhbGlkPSJ5ZXMiPkJlbGwuIENpdi4gaWlpLiA4My48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBvbnRpZmV4IG1heGltdXM8L2ZvcmVpZ24+LiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjgzIiB2YWxpZD0ieWVzIj5CZWxsLiBDaXYuIGlpaS4gODMuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['67.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmp1c3QgYXMgdGhvdWdoIFRpZ3JhbmVzIHRoZSBBcm1lbmlhbiB3ZXJlIGVuY2FtcGVkIG92ZXIgYWdhaW5zdCB0aGVtLCBvciB0aGUga2luZyBvZiB0aGUgTmFiYXRhZWFucywgYW5kIG5vdCB0aGF0IENhZXNhciwgYW5kIHRoYXQgYXJteSwgd2hvIGhhZCB0YWtlbiBieSBzdG9ybSBhIHRob3VzYW5kIGNpdGllcywgc3ViZHVlZCBtb3JlIHRoYW4gdGhyZWUgaHVuZHJlZCBuYXRpb25zLCBhbmQgZm91Z2h0IHVudmFucXVpc2hlZCB3aXRoIEdlcm1hbnMgYW5kIEdhdWxzIGluIG1vcmUgYmF0dGxlcyB0aGFuIG9uZSBjb3VsZCBudW1iZXIsIHRha2luZyBhIGh1bmRyZWQgdGltZXMgdGVuIHRob3VzYW5kIHByaXNvbmVycywgYW5kIHNsYXlpbmcgYXMgbWFueSwgYWZ0ZXIgcm91dGluZyB0aGVtIG9uIHRoZSBiYXR0bGUtZmllbGQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3R3aXRoc3RhbmRpbmcsIGJ5IHRoZWlyIGltcG9ydHVuaXRpZXMgYW5kIGFnaXRhdGlvbnMsIGFmdGVyIHRoZXkgaGFkIGdvbmUgZG93biBpbnRvIHRoZSBwbGFpbiBvZiBQaGFyc2FsaWEsIHRoZXkgZm9yY2VkIFBvbXBleSB0byBob2xkIGEgY291bmNpbCBvZiB3YXIsIHdoZXJlIExhYmllbnVzLCB0aGUgY29tbWFuZGVyIG9mIHRoZSBjYXZhbHJ5LCByb3NlIGZpcnN0IGFuZCB0b29rIGFuIG9hdGggdGhhdCBoZSB3b3VsZCBub3QgY29tZSBiYWNrIGZyb20gdGhlIGJhdHRsZSB1bmxlc3MgaGUgcm91dGVkIHRoZSBlbmVteTsgdGhlbiBhbGwgbGlrZXdpc2Ugc3dvcmUgdGhlIHNhbWUgb2F0aC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCBuaWdodCBQb21wZXkgZHJlYW1lZCB0aGF0IGFzIGhlIGVudGVyZWQgaGlzIHRoZWF0cmUgdGhlIHBlb3BsZSBjbGFwcGVkIHRoZWlyIGhhbmRzLCBhbmQgdGhhdCBoZSBkZWNvcmF0ZWQgYSB0ZW1wbGUgb2YgVmVudXMgVmljdHJpeCB3aXRoIG1hbnkgc3BvaWxzLiBPbiBzb21lIGFjY291bnRzIGhlIHdhcyBlbmNvdXJhZ2VkLCBidXQgb24gb3RoZXJzIGRlcHJlc3NlZCwgYnkgdGhlIGRyZWFtOyBoZSBmZWFyZWQgbGVzdCB0aGUgcmFjZSBvZiBDYWVzYXIsIHdoaWNoIHdlbnQgYmFjayB0byBWZW51cywgd2FzIHRvIHJlY2VpdmUgZ2xvcnkgYW5kIHNwbGVuZG91ciB0aHJvdWdoIGhpbTsgYW5kIGNlcnRhaW4gcGFuaWMgdHVtdWx0cyB3aGljaCB3ZW50IHJ1c2hpbmcgdGhyb3VnaCB0aGUgY2FtcCByb3VzZWQgaGltIGZyb20gc2xlZXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBkdXJpbmcgdGhlIG1vcm5pbmcgd2F0Y2ggYSBncmVhdCBsaWdodCBzaG9uZSBvdXQgYWJvdmUgdGhlIGNhbXAgb2YgQ2Flc2FyLCB3aGljaCB3YXMgcGVyZmVjdGx5IHF1aWV0LCBhbmQgYSBmbGFtaW5nIHRvcmNoIHJvc2UgZnJvbSBpdCBhbmQgZGFydGVkIGRvd24gdXBvbiB0aGUgY2FtcCBvZiBQb21wZXk7IENhZXNhciBoaW1zZWxmIHNheXMgaGUgc2F3IHRoaXMgYXMgaGUgd2FzIHZpc2l0aW5nIHRoZSB3YXRjaGVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDQzLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2Flc2FyPC90aXRsZT4sIHhsaWlpLiAzPC9iaWJsPi4gSXQgaXMgbm90IG1lbnRpb25lZCBpbiB0aGUgPHRpdGxlPkNvbW1lbnRhcmllczwvdGl0bGU+Ljwvbm90ZT4gQXQgYnJlYWsgb2YgZGF5LCBDYWVzYXIgd2FzIGFib3V0IHRvIGRlY2FtcCBhbmQgbW92ZSB0byBTY290dXNzYSwgYW5kIGhpcyBzb2xkaWVycyB3ZXJlIHRha2luZyBkb3duIHRoZWlyIHRlbnRzIGFuZCBzZW5kaW5nIG9uIGFoZWFkIHRoZSBiZWFzdHMgb2YgYnVyZGVuIGFuZCBzZXJ2YW50cywgd2hlbiB0aGUgc2NvdXRzIGNhbWUgaW4gd2l0aCBhIHJlcG9ydCB0aGF0IHRoZXkgc2F3IG1hbnkgc2hpZWxkcyBtb3ZpbmcgdG8gYW5kIGZybyBpbiB0aGUgZW5lbXkncyBjYW1wLCBhbmQgdGhhdCB0aGVyZSB3YXMgYSBub2lzeSBtb3ZlbWVudCB0aGVyZSBvZiBtZW4gY29taW5nIG91dCB0byBiYXR0bGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXNlLCBvdGhlcnMgY2FtZSBhbm5vdW5jaW5nIHRoYXQgdGhlIGZvcmVtb3N0IHJhbmtzIHdlcmUgYWxyZWFkeSBmb3JtaW5nIGluIGJhdHRsZSBhcnJheS4gQ2Flc2FyLCB0aGVyZWZvcmUsIGFmdGVyIHNheWluZyB0aGF0IHRoZSBleHBlY3RlZCBkYXkgaGFkIGNvbWUsIG9uIHdoaWNoIHRoZXkgd291bGQgZmlnaHQgYWdhaW5zdCBtZW4sIGFuZCBub3QgYWdhaW5zdCB3YW50IGFuZCBodW5nZXIsIHF1aWNrbHkgb3JkZXJlZCB0aGUgcHVycGxlIHR1bmljIHRvIGJlIGh1bmcgdXAgaW4gZnJvbnQgb2YgaGlzIHRlbnQsIHRoYXQgYmVpbmcgdGhlIFJvbWFuIHNpZ25hbCBmb3IgYmF0dGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgc29sZGllcnMsIG9uIHNlZWluZyB0aGlzLCBsZWZ0IHRoZWlyIHRlbnRzIHdpdGggc2hvdXRzIG9mIGpveSwgYW5kIGh1cnJpZWQgdG8gYXJtcy4gQW5kIHdoZW4gdGhlaXIgb2ZmaWNlcnMgbGVkIHRoZW0gdG8gdGhlIHByb3BlciBwbGFjZSwgZWFjaCBtYW4sIGFzIGlmIGluIGEgY2hvcnVzLCBub3QgdHVtdWx0dW91c2x5LCBidXQgd2l0aCB0aGUgcXVpZXQgZWFzZSB3aGljaCB0cmFpbmluZyBnaXZlcywgZmVsbCBpbnRvIGxpbmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['68.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdHdpdGhzdGFuZGluZywgYnkgdGhlaXIgaW1wb3J0dW5pdGllcyBhbmQgYWdpdGF0aW9ucywgYWZ0ZXIgdGhleSBoYWQgZ29uZSBkb3duIGludG8gdGhlIHBsYWluIG9mIFBoYXJzYWxpYSwgdGhleSBmb3JjZWQgUG9tcGV5IHRvIGhvbGQgYSBjb3VuY2lsIG9mIHdhciwgd2hlcmUgTGFiaWVudXMsIHRoZSBjb21tYW5kZXIgb2YgdGhlIGNhdmFscnksIHJvc2UgZmlyc3QgYW5kIHRvb2sgYW4gb2F0aCB0aGF0IGhlIHdvdWxkIG5vdCBjb21lIGJhY2sgZnJvbSB0aGUgYmF0dGxlIHVubGVzcyBoZSByb3V0ZWQgdGhlIGVuZW15OyB0aGVuIGFsbCBsaWtld2lzZSBzd29yZSB0aGUgc2FtZSBvYXRoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['68.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgbmlnaHQgUG9tcGV5IGRyZWFtZWQgdGhhdCBhcyBoZSBlbnRlcmVkIGhpcyB0aGVhdHJlIHRoZSBwZW9wbGUgY2xhcHBlZCB0aGVpciBoYW5kcywgYW5kIHRoYXQgaGUgZGVjb3JhdGVkIGEgdGVtcGxlIG9mIFZlbnVzIFZpY3RyaXggd2l0aCBtYW55IHNwb2lscy4gT24gc29tZSBhY2NvdW50cyBoZSB3YXMgZW5jb3VyYWdlZCwgYnV0IG9uIG90aGVycyBkZXByZXNzZWQsIGJ5IHRoZSBkcmVhbTsgaGUgZmVhcmVkIGxlc3QgdGhlIHJhY2Ugb2YgQ2Flc2FyLCB3aGljaCB3ZW50IGJhY2sgdG8gVmVudXMsIHdhcyB0byByZWNlaXZlIGdsb3J5IGFuZCBzcGxlbmRvdXIgdGhyb3VnaCBoaW07IGFuZCBjZXJ0YWluIHBhbmljIHR1bXVsdHMgd2hpY2ggd2VudCBydXNoaW5nIHRocm91Z2ggdGhlIGNhbXAgcm91c2VkIGhpbSBmcm9tIHNsZWVwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['68.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBkdXJpbmcgdGhlIG1vcm5pbmcgd2F0Y2ggYSBncmVhdCBsaWdodCBzaG9uZSBvdXQgYWJvdmUgdGhlIGNhbXAgb2YgQ2Flc2FyLCB3aGljaCB3YXMgcGVyZmVjdGx5IHF1aWV0LCBhbmQgYSBmbGFtaW5nIHRvcmNoIHJvc2UgZnJvbSBpdCBhbmQgZGFydGVkIGRvd24gdXBvbiB0aGUgY2FtcCBvZiBQb21wZXk7IENhZXNhciBoaW1zZWxmIHNheXMgaGUgc2F3IHRoaXMgYXMgaGUgd2FzIHZpc2l0aW5nIHRoZSB3YXRjaGVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA0My4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHhsaWlpLiAzPC9iaWJsPi4gSXQgaXMgbm90IG1lbnRpb25lZCBpbiB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tbWVudGFyaWVzPC90aXRsZT4uPC9ub3RlPiBBdCBicmVhayBvZiBkYXksIENhZXNhciB3YXMgYWJvdXQgdG8gZGVjYW1wIGFuZCBtb3ZlIHRvIFNjb3R1c3NhLCBhbmQgaGlzIHNvbGRpZXJzIHdlcmUgdGFraW5nIGRvd24gdGhlaXIgdGVudHMgYW5kIHNlbmRpbmcgb24gYWhlYWQgdGhlIGJlYXN0cyBvZiBidXJkZW4gYW5kIHNlcnZhbnRzLCB3aGVuIHRoZSBzY291dHMgY2FtZSBpbiB3aXRoIGEgcmVwb3J0IHRoYXQgdGhleSBzYXcgbWFueSBzaGllbGRzIG1vdmluZyB0byBhbmQgZnJvIGluIHRoZSBlbmVteSdzIGNhbXAsIGFuZCB0aGF0IHRoZXJlIHdhcyBhIG5vaXN5IG1vdmVtZW50IHRoZXJlIG9mIG1lbiBjb21pbmcgb3V0IHRvIGJhdHRsZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA0My4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHhsaWlpLiAzPC9iaWJsPi4gSXQgaXMgbm90IG1lbnRpb25lZCBpbiB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHhsaWlpLiAzPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tbWVudGFyaWVzPC90aXRsZT4uPC90cmFuc2xhdGlvbj4="
translation['68.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXNlLCBvdGhlcnMgY2FtZSBhbm5vdW5jaW5nIHRoYXQgdGhlIGZvcmVtb3N0IHJhbmtzIHdlcmUgYWxyZWFkeSBmb3JtaW5nIGluIGJhdHRsZSBhcnJheS4gQ2Flc2FyLCB0aGVyZWZvcmUsIGFmdGVyIHNheWluZyB0aGF0IHRoZSBleHBlY3RlZCBkYXkgaGFkIGNvbWUsIG9uIHdoaWNoIHRoZXkgd291bGQgZmlnaHQgYWdhaW5zdCBtZW4sIGFuZCBub3QgYWdhaW5zdCB3YW50IGFuZCBodW5nZXIsIHF1aWNrbHkgb3JkZXJlZCB0aGUgcHVycGxlIHR1bmljIHRvIGJlIGh1bmcgdXAgaW4gZnJvbnQgb2YgaGlzIHRlbnQsIHRoYXQgYmVpbmcgdGhlIFJvbWFuIHNpZ25hbCBmb3IgYmF0dGxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['68.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBzb2xkaWVycywgb24gc2VlaW5nIHRoaXMsIGxlZnQgdGhlaXIgdGVudHMgd2l0aCBzaG91dHMgb2Ygam95LCBhbmQgaHVycmllZCB0byBhcm1zLiBBbmQgd2hlbiB0aGVpciBvZmZpY2VycyBsZWQgdGhlbSB0byB0aGUgcHJvcGVyIHBsYWNlLCBlYWNoIG1hbiwgYXMgaWYgaW4gYSBjaG9ydXMsIG5vdCB0dW11bHR1b3VzbHksIGJ1dCB3aXRoIHRoZSBxdWlldCBlYXNlIHdoaWNoIHRyYWluaW5nIGdpdmVzLCBmZWxsIGludG8gbGluZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5IGhpbXNlbGYsIHdpdGggdGhlIHJpZ2h0IHdpbmcsIGludGVuZGVkIHRvIG9wcG9zZSBBbnRvbnk7IGluIHRoZSBjZW50ZXIgaGUgc3RhdGlvbmVkIFNjaXBpbywgaGlzIGZhdGhlci1pbi1sYXcsIG92ZXIgYWdhaW5zdCBMdWNpdXMgQ2FsdmludXM7IGhpcyBsZWZ0IHdpbmcgd2FzIGNvbW1hbmRlZCBieSBMdWNpdXMgRG9taXRpdXMsIGFuZCB3YXMgc3VwcG9ydGVkIGJ5IHRoZSBtYWluIGJvZHkgb2YgdGhlIGNhdmFscnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Qm90aCBQbHV0YXJjaCAobm90IG9ubHkgaGVyZSwgYnV0IGFsc28gaW4gaGlzIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA0NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhZXNhcjwvdGl0bGU+LCB4bGl2LiAxIGYuPC9iaWJsPikgYW5kIEFwcGlhbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMi4xMS43NiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CZWxsLiBDaXYuPC90aXRsZT4gaWkuIDc2PC9iaWJsPikgZGlmZmVyIGluIHRoZWlyIGFjY291bnRzIG9mIHRoZSBvcmRlciBvZiBiYXR0bGUgZnJvbSB0aGF0IHdoaWNoIENhZXNhciBoaW1zZWxmIGdpdmVzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjg4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJlbGwuIENpdi48L3RpdGxlPiBpaWkuIDg4LiBmLjwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYWxtb3N0IGFsbCB0aGUgaG9yc2VtZW4gaGFkIGNyb3dkZWQgdG8gdGhpcyBwb2ludCwgaW4gb3JkZXIgdG8gb3ZlcnBvd2VyIENhZXNhciBhbmQgY3V0IHRvIHBpZWNlcyB0aGUgdGVudGggbGVnaW9uOyBmb3IgdGhpcyB3YXMgZ2VuZXJhbGx5IHNhaWQgdG8gZmlnaHQgYmV0dGVyIHRoYW4gYW55IG90aGVyLCBhbmQgaW4gaXRzIHJhbmtzIENhZXNhciB1c3VhbGx5IHN0b29kIHdoZW4gaGUgZm91Z2h0IGEgYmF0dGxlLiBCdXQgQ2Flc2FyLCBvYnNlcnZpbmcgdGhhdCB0aGUgbGVmdCB3aW5nIG9mIHRoZSBlbmVteSB3YXMgZW5jbG9zZWQgYnkgc3VjaCBhIGxhcmdlIGJvZHkgb2YgaG9yc2VtZW4sIGFuZCBhbGFybWVkIGF0IHRoZWlyIGJyaWxsaWFudCBhcnJheSwgc2VudCBmb3Igc2l4IGNvaG9ydHMgZnJvbSBoaXMgcmVzZXJ2ZXMgYW5kIHN0YXRpb25lZCB0aGVtIGJlaGluZCB0aGUgdGVudGggbGVnaW9uLCB3aXRoIG9yZGVycyB0byBrZWVwIHF1aWV0IGFuZCBvdXQgb2YgdGhlIGVuZW15J3Mgc2lnaHQ7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGVuZXZlciB0aGUgY2F2YWxyeSBjaGFyZ2VkLCB0aGV5IHdlcmUgdG8gcnVuIG91dCB0aHJvdWdoIHRoZSBmcm9udCByYW5rcywgYW5kIHdlcmUgbm90IHRvIGh1cmwgdGhlaXIgamF2ZWxpbnMsIGFzIHRoZSBiZXN0IHNvbGRpZXJzIHVzdWFsbHkgZGlkIGluIHRoZWlyIGVhZ2VybmVzcyB0byBkcmF3IHRoZWlyIHN3b3JkcywgYnV0IHRvIHN0cmlrZSB1cHdhcmRzIHdpdGggdGhlbSBhbmQgd291bmQgdGhlIGZhY2VzIGFuZCBleWVzIG9mIHRoZSBlbmVteTsgZm9yIHRoZXNlIGJsb29taW5nIGFuZCBoYW5kc29tZSB3YXItZGFuY2VycyAoaGUgc2FpZCkgd291bGQgbm90IHN0YW5kIHRoZWlyIGdyb3VuZCBmb3IgZmVhciBvZiBoYXZpbmcgdGhlaXIgeW91dGhmdWwgYmVhdXR5IG1hcnJlZCwgbm9yIHdvdWxkIHRoZXkgZmFjZSB0aGUgc3RlZWwgd2hlbiBpdCB3YXMgcmlnaHQgYXQgdGhlaXIgZXllcy4gQ2Flc2FyLCB0aGVuLCB3YXMgdGh1cyBlbmdhZ2VkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['69.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5IGhpbXNlbGYsIHdpdGggdGhlIHJpZ2h0IHdpbmcsIGludGVuZGVkIHRvIG9wcG9zZSBBbnRvbnk7IGluIHRoZSBjZW50ZXIgaGUgc3RhdGlvbmVkIFNjaXBpbywgaGlzIGZhdGhlci1pbi1sYXcsIG92ZXIgYWdhaW5zdCBMdWNpdXMgQ2FsdmludXM7IGhpcyBsZWZ0IHdpbmcgd2FzIGNvbW1hbmRlZCBieSBMdWNpdXMgRG9taXRpdXMsIGFuZCB3YXMgc3VwcG9ydGVkIGJ5IHRoZSBtYWluIGJvZHkgb2YgdGhlIGNhdmFscnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Cb3RoIFBsdXRhcmNoIChub3Qgb25seSBoZXJlLCBidXQgYWxzbyBpbiBoaXMgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4bGl2LiAxIGYuPC9iaWJsPikgYW5kIEFwcGlhbiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAyLjExLjc2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpLiA3NjwvYmlibD4pIGRpZmZlciBpbiB0aGVpciBhY2NvdW50cyBvZiB0aGUgb3JkZXIgb2YgYmF0dGxlIGZyb20gdGhhdCB3aGljaCBDYWVzYXIgaGltc2VsZiBnaXZlcyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjg4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpaS4gODguIGYuPC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4bGl2LiAxIGYuPC9iaWJsPikgYW5kIEFwcGlhbiAoPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHhsaXYuIDEgZi48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDIuMTEuNzYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaWkuIDc2PC9iaWJsPikgZGlmZmVyIGluIHRoZWlyIGFjY291bnRzIG9mIHRoZSBvcmRlciBvZiBiYXR0bGUgZnJvbSB0aGF0IHdoaWNoIENhZXNhciBoaW1zZWxmIGdpdmVzICg8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaWkuIDc2PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjg4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpaS4gODguIGYuPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpaS4gODguIGYuPC90cmFuc2xhdGlvbj4="
translation['69.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbG1vc3QgYWxsIHRoZSBob3JzZW1lbiBoYWQgY3Jvd2RlZCB0byB0aGlzIHBvaW50LCBpbiBvcmRlciB0byBvdmVycG93ZXIgQ2Flc2FyIGFuZCBjdXQgdG8gcGllY2VzIHRoZSB0ZW50aCBsZWdpb247IGZvciB0aGlzIHdhcyBnZW5lcmFsbHkgc2FpZCB0byBmaWdodCBiZXR0ZXIgdGhhbiBhbnkgb3RoZXIsIGFuZCBpbiBpdHMgcmFua3MgQ2Flc2FyIHVzdWFsbHkgc3Rvb2Qgd2hlbiBoZSBmb3VnaHQgYSBiYXR0bGUuIEJ1dCBDYWVzYXIsIG9ic2VydmluZyB0aGF0IHRoZSBsZWZ0IHdpbmcgb2YgdGhlIGVuZW15IHdhcyBlbmNsb3NlZCBieSBzdWNoIGEgbGFyZ2UgYm9keSBvZiBob3JzZW1lbiwgYW5kIGFsYXJtZWQgYXQgdGhlaXIgYnJpbGxpYW50IGFycmF5LCBzZW50IGZvciBzaXggY29ob3J0cyBmcm9tIGhpcyByZXNlcnZlcyBhbmQgc3RhdGlvbmVkIHRoZW0gYmVoaW5kIHRoZSB0ZW50aCBsZWdpb24sIHdpdGggb3JkZXJzIHRvIGtlZXAgcXVpZXQgYW5kIG91dCBvZiB0aGUgZW5lbXkncyBzaWdodDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['69.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGVuZXZlciB0aGUgY2F2YWxyeSBjaGFyZ2VkLCB0aGV5IHdlcmUgdG8gcnVuIG91dCB0aHJvdWdoIHRoZSBmcm9udCByYW5rcywgYW5kIHdlcmUgbm90IHRvIGh1cmwgdGhlaXIgamF2ZWxpbnMsIGFzIHRoZSBiZXN0IHNvbGRpZXJzIHVzdWFsbHkgZGlkIGluIHRoZWlyIGVhZ2VybmVzcyB0byBkcmF3IHRoZWlyIHN3b3JkcywgYnV0IHRvIHN0cmlrZSB1cHdhcmRzIHdpdGggdGhlbSBhbmQgd291bmQgdGhlIGZhY2VzIGFuZCBleWVzIG9mIHRoZSBlbmVteTsgZm9yIHRoZXNlIGJsb29taW5nIGFuZCBoYW5kc29tZSB3YXItZGFuY2VycyAoaGUgc2FpZCkgd291bGQgbm90IHN0YW5kIHRoZWlyIGdyb3VuZCBmb3IgZmVhciBvZiBoYXZpbmcgdGhlaXIgeW91dGhmdWwgYmVhdXR5IG1hcnJlZCwgbm9yIHdvdWxkIHRoZXkgZmFjZSB0aGUgc3RlZWwgd2hlbiBpdCB3YXMgcmlnaHQgYXQgdGhlaXIgZXllcy4gQ2Flc2FyLCB0aGVuLCB3YXMgdGh1cyBlbmdhZ2VkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgUG9tcGV5LCB3aG8gd2FzIHN1cnZleWluZyBvbiBob3JzZWJhY2sgdGhlIGJhdHRsZSBhcnJheSwgd2hlbiBoZSBzYXcgdGhhdCBoaXMgYW50YWdvbmlzdHMgd2VyZSBzdGFuZGluZyBxdWlldGx5IGluIHRoZWlyIHJhbmtzIGFuZCBhd2FpdGluZyB0aGUgbW9tZW50IG9mIGF0dGFjaywgd2hpbGUgdGhlIGdyZWF0ZXIgcGFydCBvZiBoaXMgb3duIGFybXkgd2FzIG5vdCBhdCByZXN0LCBidXQgdG9zc2luZyBhYm91dCBpbiB3YXZlcyBvZiB0dW11bHQsIG93aW5nIHRvIGl0cyBpbmV4cGVyaWVuY2UsIHdhcyBhZnJhaWQgdGhhdCBoaXMgYXJyYXkgd291bGQgYmUgY29tcGxldGVseSBicm9rZW4gdXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYmF0dGxlLCBhbmQgdGhlcmVmb3JlIG9yZGVyZWQgaGlzIGZyb250IHJhbmtzIHRvIHN0YW5kIHdpdGggdGhlaXIgc3BlYXJzIGFkdmFuY2VkLCB0byByZW1haW4gZml4ZWQgaW4gdGhlaXIgcGxhY2VzLCBhbmQgc28gdG8gcmVjZWl2ZSB0aGUgZW5lbXkncyBvbnNldC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBDYWVzYXIgZmluZHMgZmF1bHQgd2l0aCB0aGVzZSB0YWN0aWNzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpaS4gOTI8L2JpYmw+LiBBcHBpYW4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDIuMTEuNzkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpLiA3OTwvYmlibD4pIHNheXMgQ2Flc2FyIGRvZXMgdGhpcyBpbiBoaXMgbGV0dGVycy48L25vdGU+OyBoZSBzYXlzIHRoYXQgUG9tcGV5IHRoZXJlYnkgcm9iYmVkIHRoZSBibG93cyBvZiBoaXMgd2VhcG9ucyBvZiB0aGF0IGltcGV0dXMgd2hpY2ggYSByYXBpZCBjaGFyZ2Ugd291bGQgaGF2ZSBnaXZlbiB0aGVtOyBhbmQgYXMgZm9yIHRoYXQgcnVzaGluZyBjb3VudGVyLWNoYXJnZSwgd2hpY2ggbW9yZSB0aGFuIGFueSB0aGluZyBlbHNlIGZpbGxzIG1vc3Qgc29sZGllcnMgd2l0aCBpbXBldHVvdXMgZW50aHVzaWFzbSBhcyB0aGV5IGNsb3NlIHdpdGggdGhlaXIgZW5lbWllcywgYW5kIGNvbWJpbmVzIHdpdGggdGhlaXIgc2hvdXRzIGFuZCBydW5uaW5nIHRvIGluY3JlYXNlIHRoZWlyIGNvdXJhZ2UgUG9tcGV5IGRlcHJpdmVkIGhpcyBtZW4gb2YgdGhpcywgYW5kIHNvIHJvb3RlZCB0aGVtIHRvIHRoZSBzcG90IHdoZXJlIHRoZXkgc3Rvb2QsIGFuZCBjaGlsbGVkIHRoZWlyIHNwaXJpdHMuIEFuZCB5ZXQgQ2Flc2FyJ3MgZm9yY2VzIG51bWJlcmVkIHR3ZW50eS10d28gdGhvdXNhbmQsIHdoaWxlIHRob3NlIG9mIFBvbXBleSB3ZXJlIGEgbGl0dGxlIG1vcmUgdGhhbiB0d2ljZSBhcyBtYW55LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['69.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQb21wZXksIHdobyB3YXMgc3VydmV5aW5nIG9uIGhvcnNlYmFjayB0aGUgYmF0dGxlIGFycmF5LCB3aGVuIGhlIHNhdyB0aGF0IGhpcyBhbnRhZ29uaXN0cyB3ZXJlIHN0YW5kaW5nIHF1aWV0bHkgaW4gdGhlaXIgcmFua3MgYW5kIGF3YWl0aW5nIHRoZSBtb21lbnQgb2YgYXR0YWNrLCB3aGlsZSB0aGUgZ3JlYXRlciBwYXJ0IG9mIGhpcyBvd24gYXJteSB3YXMgbm90IGF0IHJlc3QsIGJ1dCB0b3NzaW5nIGFib3V0IGluIHdhdmVzIG9mIHR1bXVsdCwgb3dpbmcgdG8gaXRzIGluZXhwZXJpZW5jZSwgd2FzIGFmcmFpZCB0aGF0IGhpcyBhcnJheSB3b3VsZCBiZSBjb21wbGV0ZWx5IGJyb2tlbiB1cCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBiYXR0bGUsIGFuZCB0aGVyZWZvcmUgb3JkZXJlZCBoaXMgZnJvbnQgcmFua3MgdG8gc3RhbmQgd2l0aCB0aGVpciBzcGVhcnMgYWR2YW5jZWQsIHRvIHJlbWFpbiBmaXhlZCBpbiB0aGVpciBwbGFjZXMsIGFuZCBzbyB0byByZWNlaXZlIHRoZSBlbmVteSdzIG9uc2V0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['69.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQ2Flc2FyIGZpbmRzIGZhdWx0IHdpdGggdGhlc2UgdGFjdGljczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy45MiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBpaWkuIDkyPC9iaWJsPi4gQXBwaWFuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDIuMTEuNzkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaWkuIDc5PC9iaWJsPikgc2F5cyBDYWVzYXIgZG9lcyB0aGlzIGluIGhpcyBsZXR0ZXJzLjwvbm90ZT47IGhlIHNheXMgdGhhdCBQb21wZXkgdGhlcmVieSByb2JiZWQgdGhlIGJsb3dzIG9mIGhpcyB3ZWFwb25zIG9mIHRoYXQgaW1wZXR1cyB3aGljaCBhIHJhcGlkIGNoYXJnZSB3b3VsZCBoYXZlIGdpdmVuIHRoZW07IGFuZCBhcyBmb3IgdGhhdCBydXNoaW5nIGNvdW50ZXItY2hhcmdlLCB3aGljaCBtb3JlIHRoYW4gYW55IHRoaW5nIGVsc2UgZmlsbHMgbW9zdCBzb2xkaWVycyB3aXRoIGltcGV0dW91cyBlbnRodXNpYXNtIGFzIHRoZXkgY2xvc2Ugd2l0aCB0aGVpciBlbmVtaWVzLCBhbmQgY29tYmluZXMgd2l0aCB0aGVpciBzaG91dHMgYW5kIHJ1bm5pbmcgdG8gaW5jcmVhc2UgdGhlaXIgY291cmFnZSBQb21wZXkgZGVwcml2ZWQgaGlzIG1lbiBvZiB0aGlzLCBhbmQgc28gcm9vdGVkIHRoZW0gdG8gdGhlIHNwb3Qgd2hlcmUgdGhleSBzdG9vZCwgYW5kIGNoaWxsZWQgdGhlaXIgc3Bpcml0cy4gQW5kIHlldCBDYWVzYXIncyBmb3JjZXMgbnVtYmVyZWQgdHdlbnR5LXR3byB0aG91c2FuZCwgd2hpbGUgdGhvc2Ugb2YgUG9tcGV5IHdlcmUgYSBsaXR0bGUgbW9yZSB0aGFuIHR3aWNlIGFzIG1hbnkuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy45MiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBpaWkuIDkyPC9iaWJsPi4gQXBwaWFuICg8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaWlpLiA5MjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMi4xMS43OSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBpaS4gNzk8L2JpYmw+KSBzYXlzIENhZXNhciBkb2VzIHRoaXMgaW4gaGlzIGxldHRlcnMuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpLiA3OTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgYXQgbGFzdCB0aGUgc2lnbmFsIHdhcyBnaXZlbiBvbiBib3RoIHNpZGVzIGFuZCB0aGUgdHJ1bXBldCBiZWdhbiB0byBjYWxsIHRvIHRoZSBjb25mbGljdCwgYW5kIG9mIHRoYXQgZ3JlYXQgaG9zdCBldmVyeSBtYW4gc291Z2h0IHRvIGRvIGhpcyBwYXJ0OyBidXQgYSBmZXcgUm9tYW5zLCB0aGUgbm9ibGVzdCwgYW5kIHNvbWUgR3JlZWtzLCBtZW4gd2hvIHdlcmUgcHJlc2VudCB3aXRob3V0IHRha2luZyBwYXJ0IGluIHRoZSBiYXR0bGUsIG5vdyB0aGF0IHRoZSBkcmVhZGZ1bCBjcmlzaXMgd2FzIG5lYXIsIGJlZ2FuIHRvIHJlZmxlY3QgdXBvbiB0aGUgcGFzcyB0byB3aGljaCBjb250ZW50aW91c25lc3MgYW5kIGdyZWVkIGhhZCBicm91Z2h0IHRoZSBzb3ZlcmVpZ24gUm9tYW4gc3RhdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aXRoIGtpbmRyZWQgYXJtcywgZnJhdGVybmFsIHJhbmtzLCBhbmQgY29tbW9uIHN0YW5kYXJkcywgdGhlIHN0cm9uZyBtYW5ob29kIGFuZCBtaWdodCBvZiBhIHNpbmdsZSBjaXR5IGluIHN1Y2ggbnVtYmVycyB3YXMgdHVybmluZyBpdHMgb3duIGhhbmQgYWdhaW5zdCBpdHNlbGYsIHNob3dpbmcgaG93IGJsaW5kIGFuZCBmcmVuemllZCBhIHRoaW5nIGh1bWFuIG5hdHVyZSBpcyB3aGVuIHBhc3Npb24gcmVpZ25zLiBGb3IgaGFkIHRoZXkgbm93IGJlZW4gd2lsbGluZyBxdWlldGx5IHRvIGdvdmVybiBhbmQgZW5qb3kgd2hhdCB0aGV5IGhhZCBjb25xdWVyZWQsIHRoZSBncmVhdGVzdCBhbmQgYmVzdCBwYXJ0IG9mIGVhcnRoIGFuZCBzZWEgd2FzIHN1YmplY3QgdG8gdGhlbSwgYW5kIGlmIHRoZXkgc3RpbGwgZGVzaXJlZCB0byBncmF0aWZ5IHRoZWlyIHRoaXJzdCBmb3IgdHJvcGhpZXMgYW5kIHRyaXVtcGhzLCB0aGV5IG1pZ2h0IGhhdmUgaGFkIHRoZWlyIGZpbGwgb2Ygd2FycyB3aXRoIFBhcnRoaWFucyBvciBHZXJtYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzLCBhIGdyZWF0IHRhc2sgc3RpbGwgcmVtYWluZWQgaW4gdGhlIHN1Ymp1Z2F0aW9uIG9mIFNjeXRoaWEgYW5kIEluZGlhLCBhbmQgaGVyZSB0aGVpciBncmVlZCB3b3VsZCBoYXZlIGhhZCBubyBpbmdsb3Jpb3VzIGV4Y3VzZSBpbiB0aGUgY2l2aWxpemF0aW9uIG9mIGJhcmJhcm91cyBwZW9wbGVzLiBBbmQgd2hhdCBTY3l0aGlhbiBob3JzZSBvciBQYXJ0aGlhbiBhcmNoZXJ5IG9yIEluZGlhbiB3ZWFsdGggY291bGQgaGF2ZSBjaGVja2VkIHNldmVudHkgdGhvdXNhbmQgUm9tYW5zIGNvbWluZyB1cCBpbiBhcm1zIHVuZGVyIHRoZSBsZWFkZXJzaGlwIG9mIFBvbXBleSBhbmQgQ2Flc2FyLCB3aG9zZSBuYW1lcyB0aG9zZSBuYXRpb25zIGhhZCBoZWFyZCBvZiBsb25nIGJlZm9yZSB0aGF0IG9mIFJvbWUsIHNvIHJlbW90ZSBhbmQgdmFyaW91cyBhbmQgc2F2YWdlIHdlcmUgdGhlIHBlb3BsZXMgd2hpY2ggdGhleSBoYWQgYXR0YWNrZWQgYW5kIGNvbnF1ZXJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdyB0aGV5IHdlcmUgYWJvdXQgdG8gam9pbiBiYXR0bGUgd2l0aCBvbmUgYW5vdGhlciwgbm9yIHdlcmUgdGhleSBtb3ZlZCBldmVuIGJ5IGEgY29tcGFzc2lvbiBmb3IgdGhlaXIgb3duIGdsb3J5IHRvIHNwYXJlIHRoZWlyIGNvdW50cnksIG1lbiB3aG8gdXAgdG8gdGhhdCBkYXkgaGFkIGJlZW4gY2FsbGVkIGludmluY2libGUhIEZvciB0aGUgZmFtaWx5IGFsbGlhbmNlIHdoaWNoIGhhZCBiZWVuIG1hZGUgYmV0d2VlbiB0aGVtLCBhbmQgdGhlIGNoYXJtcyBvZiBKdWxpYSwgYW5kIGhlciBtYXJyaWFnZSwgd2VyZSBub3cgc2VlbiB0byBoYXZlIGJlZW4gZnJvbSB0aGUgZmlyc3Qgc3VzcGljaW91cyBhbmQgZGVjZXB0aXZlIHBsZWRnZXMgb2YgYSBwYXJ0bmVyc2hpcCBiYXNlZCBvbiBzZWxmLWludGVyZXN0OyB0aGVyZSB3YXMgbm8gcmVhbCBmcmllbmRzaGlwIGluIGl0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['70.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBhdCBsYXN0IHRoZSBzaWduYWwgd2FzIGdpdmVuIG9uIGJvdGggc2lkZXMgYW5kIHRoZSB0cnVtcGV0IGJlZ2FuIHRvIGNhbGwgdG8gdGhlIGNvbmZsaWN0LCBhbmQgb2YgdGhhdCBncmVhdCBob3N0IGV2ZXJ5IG1hbiBzb3VnaHQgdG8gZG8gaGlzIHBhcnQ7IGJ1dCBhIGZldyBSb21hbnMsIHRoZSBub2JsZXN0LCBhbmQgc29tZSBHcmVla3MsIG1lbiB3aG8gd2VyZSBwcmVzZW50IHdpdGhvdXQgdGFraW5nIHBhcnQgaW4gdGhlIGJhdHRsZSwgbm93IHRoYXQgdGhlIGRyZWFkZnVsIGNyaXNpcyB3YXMgbmVhciwgYmVnYW4gdG8gcmVmbGVjdCB1cG9uIHRoZSBwYXNzIHRvIHdoaWNoIGNvbnRlbnRpb3VzbmVzcyBhbmQgZ3JlZWQgaGFkIGJyb3VnaHQgdGhlIHNvdmVyZWlnbiBSb21hbiBzdGF0ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['70.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aXRoIGtpbmRyZWQgYXJtcywgZnJhdGVybmFsIHJhbmtzLCBhbmQgY29tbW9uIHN0YW5kYXJkcywgdGhlIHN0cm9uZyBtYW5ob29kIGFuZCBtaWdodCBvZiBhIHNpbmdsZSBjaXR5IGluIHN1Y2ggbnVtYmVycyB3YXMgdHVybmluZyBpdHMgb3duIGhhbmQgYWdhaW5zdCBpdHNlbGYsIHNob3dpbmcgaG93IGJsaW5kIGFuZCBmcmVuemllZCBhIHRoaW5nIGh1bWFuIG5hdHVyZSBpcyB3aGVuIHBhc3Npb24gcmVpZ25zLiBGb3IgaGFkIHRoZXkgbm93IGJlZW4gd2lsbGluZyBxdWlldGx5IHRvIGdvdmVybiBhbmQgZW5qb3kgd2hhdCB0aGV5IGhhZCBjb25xdWVyZWQsIHRoZSBncmVhdGVzdCBhbmQgYmVzdCBwYXJ0IG9mIGVhcnRoIGFuZCBzZWEgd2FzIHN1YmplY3QgdG8gdGhlbSwgYW5kIGlmIHRoZXkgc3RpbGwgZGVzaXJlZCB0byBncmF0aWZ5IHRoZWlyIHRoaXJzdCBmb3IgdHJvcGhpZXMgYW5kIHRyaXVtcGhzLCB0aGV5IG1pZ2h0IGhhdmUgaGFkIHRoZWlyIGZpbGwgb2Ygd2FycyB3aXRoIFBhcnRoaWFucyBvciBHZXJtYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['70.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMsIGEgZ3JlYXQgdGFzayBzdGlsbCByZW1haW5lZCBpbiB0aGUgc3VianVnYXRpb24gb2YgU2N5dGhpYSBhbmQgSW5kaWEsIGFuZCBoZXJlIHRoZWlyIGdyZWVkIHdvdWxkIGhhdmUgaGFkIG5vIGluZ2xvcmlvdXMgZXhjdXNlIGluIHRoZSBjaXZpbGl6YXRpb24gb2YgYmFyYmFyb3VzIHBlb3BsZXMuIEFuZCB3aGF0IFNjeXRoaWFuIGhvcnNlIG9yIFBhcnRoaWFuIGFyY2hlcnkgb3IgSW5kaWFuIHdlYWx0aCBjb3VsZCBoYXZlIGNoZWNrZWQgc2V2ZW50eSB0aG91c2FuZCBSb21hbnMgY29taW5nIHVwIGluIGFybXMgdW5kZXIgdGhlIGxlYWRlcnNoaXAgb2YgUG9tcGV5IGFuZCBDYWVzYXIsIHdob3NlIG5hbWVzIHRob3NlIG5hdGlvbnMgaGFkIGhlYXJkIG9mIGxvbmcgYmVmb3JlIHRoYXQgb2YgUm9tZSwgc28gcmVtb3RlIGFuZCB2YXJpb3VzIGFuZCBzYXZhZ2Ugd2VyZSB0aGUgcGVvcGxlcyB3aGljaCB0aGV5IGhhZCBhdHRhY2tlZCBhbmQgY29ucXVlcmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['70.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3cgdGhleSB3ZXJlIGFib3V0IHRvIGpvaW4gYmF0dGxlIHdpdGggb25lIGFub3RoZXIsIG5vciB3ZXJlIHRoZXkgbW92ZWQgZXZlbiBieSBhIGNvbXBhc3Npb24gZm9yIHRoZWlyIG93biBnbG9yeSB0byBzcGFyZSB0aGVpciBjb3VudHJ5LCBtZW4gd2hvIHVwIHRvIHRoYXQgZGF5IGhhZCBiZWVuIGNhbGxlZCBpbnZpbmNpYmxlISBGb3IgdGhlIGZhbWlseSBhbGxpYW5jZSB3aGljaCBoYWQgYmVlbiBtYWRlIGJldHdlZW4gdGhlbSwgYW5kIHRoZSBjaGFybXMgb2YgSnVsaWEsIGFuZCBoZXIgbWFycmlhZ2UsIHdlcmUgbm93IHNlZW4gdG8gaGF2ZSBiZWVuIGZyb20gdGhlIGZpcnN0IHN1c3BpY2lvdXMgYW5kIGRlY2VwdGl2ZSBwbGVkZ2VzIG9mIGEgcGFydG5lcnNoaXAgYmFzZWQgb24gc2VsZi1pbnRlcmVzdDsgdGhlcmUgd2FzIG5vIHJlYWwgZnJpZW5kc2hpcCBpbiBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjcxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhlbiwgd2hlbiB0aGUgUGhhcnNhbGlhbiBwbGFpbiB3YXMgZmlsbGVkIHdpdGggbWVuIGFuZCBob3JzZXMgYW5kIGFybXMgYW5kIHRoZSBzaWduYWxzIGZvciBiYXR0bGUgaGFkIGJlZW4gbGlmdGVkIG9uIGJvdGggc2lkZXMsIHRoZSBmaXJzdCB0byBydXNoIG91dCBmcm9tIENhZXNhcidzIGxpbmVzIHdhcyBDYWl1cyBDcmFzc2lhbnVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBuYW1lIGlzIENyYXN0aW51cyBpbiBDYWVzYXIncyBvd24gc3Rvcnkgb2YgdGhlIGJhdHRsZSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy45MSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CZWxsLiBDaXYuPC90aXRsZT4gaWlpLiA5MTwvYmlibD4pLjwvbm90ZT4gYSBjZW50dXJpb24gaW4gY29tbWFuZCBvZiBvbmUgaHVuZHJlZCBhbmQgdHdlbnR5IG1lbiwgd2hvIHdhcyB0aHVzIHJlZGVlbWluZyBhIGdyZWF0IHByb21pc2UgbWFkZSB0byBDYWVzYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoYWQgYmVlbiB0aGUgZmlyc3QgbWFuIHdob20gQ2Flc2FyIHNhdyBhcyBoZSBpc3N1ZWQgZnJvbSB0aGUgY2FtcCwgYW5kIGFkZHJlc3NpbmcgaGltLCBoZSBoYWQgYXNrZWQgaGltIHdoYXQgYmUgdGhvdWdodCBhYm91dCB0aGUgYmF0dGxlLiBUaGUgY2VudHVyaW9uIHN0cmV0Y2hlZCBmb3J0aCBoaXMgcmlnaHQgaGFuZCBhbmQgY3JpZWQgd2l0aCBhIGxvdWQgdm9pY2U6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSB3aWx0IHdpbiBhIHNwbGVuZGlkIHZpY3RvcnksIE8gQ2Flc2FyOyBhbmQgSSBzaGFsbCBoYXZlIHRoeSBwcmFpc2UgdG8tZGF5LCB3aGV0aGVyIEkgbGl2ZSBvciBkaWUuPC9xPiBNaW5kZnVsIG5vdyBvZiB0aGVzZSB3b3JkcyBvZiBoaXMsIGhlIHJ1c2hlZCBmb3J3YXJkLCBjYXJyeWluZyBtYW55IGFsb25nIHdpdGggaGltLCBhbmQgdGhyZXcgaGltc2VsZiBpbnRvIHRoZSBtaWRzdCBvZiB0aGUgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb21iYXRhbnRzIGF0IG9uY2UgdG9vayB0byB0aGVpciBzd29yZHMgYW5kIG1hbnkgd2VyZSBzbGFpbiwgYW5kIGFzIHRoZSBjZW50dXJpb24gd2FzIGZvcmNpbmcgaGlzIHdheSBhbG9uZyBhbmQgY3V0dGluZyBkb3duIHRoZSBtZW4gaW4gdGhlIGZyb250IHJhbmtzLCBvbmUgb2YgdGhlbSBjb25mcm9udGVkIGhpbSBhbmQgZHJvdmUgaGlzIHN3b3JkIGluIGF0IGhpcyBtb3V0aCB3aXRoIHN1Y2ggZm9yY2UgdGhhdCBpdHMgcG9pbnQgd2VudCB0aHJvdWdoIHRvIHRoZSBuYXBlIG9mIGhpcyBuZWNrLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjk5IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDxlbXBoPm9wLiBjaXQuPC9lbXBoPiBpaWkuIDk5PC9iaWJsPiwgd2hlcmUgQ2Flc2FyIGdpdmVzIENyYXN0aW51cyB0aGF0IGhpZ2ggcHJhaXNlIGZvciB3aGljaCBoZSB3YXMgd2lsbGluZyB0byBkaWUuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['71.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhlbiwgd2hlbiB0aGUgUGhhcnNhbGlhbiBwbGFpbiB3YXMgZmlsbGVkIHdpdGggbWVuIGFuZCBob3JzZXMgYW5kIGFybXMgYW5kIHRoZSBzaWduYWxzIGZvciBiYXR0bGUgaGFkIGJlZW4gbGlmdGVkIG9uIGJvdGggc2lkZXMsIHRoZSBmaXJzdCB0byBydXNoIG91dCBmcm9tIENhZXNhcidzIGxpbmVzIHdhcyBDYWl1cyBDcmFzc2lhbnVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIG5hbWUgaXMgQ3Jhc3RpbnVzIGluIENhZXNhcidzIG93biBzdG9yeSBvZiB0aGUgYmF0dGxlICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaWlpLiA5MTwvYmlibD4pLjwvbm90ZT4gYSBjZW50dXJpb24gaW4gY29tbWFuZCBvZiBvbmUgaHVuZHJlZCBhbmQgdHdlbnR5IG1lbiwgd2hvIHdhcyB0aHVzIHJlZGVlbWluZyBhIGdyZWF0IHByb21pc2UgbWFkZSB0byBDYWVzYXIuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjkxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpaS4gOTE8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaWlpLiA5MTwvdHJhbnNsYXRpb24+"
translation['71.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoYWQgYmVlbiB0aGUgZmlyc3QgbWFuIHdob20gQ2Flc2FyIHNhdyBhcyBoZSBpc3N1ZWQgZnJvbSB0aGUgY2FtcCwgYW5kIGFkZHJlc3NpbmcgaGltLCBoZSBoYWQgYXNrZWQgaGltIHdoYXQgYmUgdGhvdWdodCBhYm91dCB0aGUgYmF0dGxlLiBUaGUgY2VudHVyaW9uIHN0cmV0Y2hlZCBmb3J0aCBoaXMgcmlnaHQgaGFuZCBhbmQgY3JpZWQgd2l0aCBhIGxvdWQgdm9pY2U6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IHdpbHQgd2luIGEgc3BsZW5kaWQgdmljdG9yeSwgTyBDYWVzYXI7IGFuZCBJIHNoYWxsIGhhdmUgdGh5IHByYWlzZSB0by1kYXksIHdoZXRoZXIgSSBsaXZlIG9yIGRpZS48L3E+IE1pbmRmdWwgbm93IG9mIHRoZXNlIHdvcmRzIG9mIGhpcywgaGUgcnVzaGVkIGZvcndhcmQsIGNhcnJ5aW5nIG1hbnkgYWxvbmcgd2l0aCBoaW0sIGFuZCB0aHJldyBoaW1zZWxmIGludG8gdGhlIG1pZHN0IG9mIHRoZSBlbmVteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['71.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb21iYXRhbnRzIGF0IG9uY2UgdG9vayB0byB0aGVpciBzd29yZHMgYW5kIG1hbnkgd2VyZSBzbGFpbiwgYW5kIGFzIHRoZSBjZW50dXJpb24gd2FzIGZvcmNpbmcgaGlzIHdheSBhbG9uZyBhbmQgY3V0dGluZyBkb3duIHRoZSBtZW4gaW4gdGhlIGZyb250IHJhbmtzLCBvbmUgb2YgdGhlbSBjb25mcm9udGVkIGhpbSBhbmQgZHJvdmUgaGlzIHN3b3JkIGluIGF0IGhpcyBtb3V0aCB3aXRoIHN1Y2ggZm9yY2UgdGhhdCBpdHMgcG9pbnQgd2VudCB0aHJvdWdoIHRvIHRoZSBuYXBlIG9mIGhpcyBuZWNrLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy45OSIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPm9wLiBjaXQuPC9lbXBoPiBpaWkuIDk5PC9iaWJsPiwgd2hlcmUgQ2Flc2FyIGdpdmVzIENyYXN0aW51cyB0aGF0IGhpZ2ggcHJhaXNlIGZvciB3aGljaCBoZSB3YXMgd2lsbGluZyB0byBkaWUuPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTkiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5vcC4gY2l0LjwvZW1waD4gaWlpLiA5OTwvYmlibD4sIHdoZXJlIENhZXNhciBnaXZlcyBDcmFzdGludXMgdGhhdCBoaWdoIHByYWlzZSBmb3Igd2hpY2ggaGUgd2FzIHdpbGxpbmcgdG8gZGllLjxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+b3AuIGNpdC48L2VtcGg+IGlpaS4gOTk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIENyYXNzaWFudXMgaGFkIGZhbGxlbiwgdGhlIGJhdHRsZSB3YXMgZXZlbmx5IGNvbnRlc3RlZCBhdCB0aGlzIHBvaW50OyBQb21wZXksIGhvd2V2ZXIsIGRpZCBub3QgbGVhZCB1cCBoaXMgcmlnaHQgd2luZyBzd2lmdGx5LCBidXQga2VwdCBsb29raW5nIGFueGlvdXNseSB0b3dhcmRzIHRoZSBvdGhlciBwYXJ0cyBvZiB0aGUgZmllbGQsIGFuZCBhd2FpdGVkIHRoZSBhY3Rpb24gb2YgaGlzIGNhdmFscnkgb24gdGhlIGxlZnQsIHRodXMgbG9zaW5nIHRpbWUuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgYXQgbGFzdCBkZXBsb3llZCB0aGVpciBzcXVhZHJvbnMgd2l0aCBhIHZpZXcgdG8gZW52ZWxvcCBDYWVzYXIsIGFuZCB0byBodXJsIGJhY2sgdXBvbiB0aGVpciBzdXBwb3J0aW5nIGxpbmVzIHRoZSBob3JzZW1lbiB3aG9tIGhlIGhhZCBzdGF0aW9uZWQgaW4gZnJvbnQsIG9ubHkgYSBmZXcgaW4gbnVtYmVyLiBCdXQgQ2Flc2FyIGdhdmUgYSBzaWduYWwsIGhpcyBjYXZhbHJ5IHJldGlyZWQsIGFuZCB0aGUgY29ob3J0cyBkcmF3biB1cCB0byBvcHBvc2UgdGhlIGVudmVsb3BpbmcgbW92ZW1lbnQgcmFuIG91dCwgdGhyZWUgdGhvdXNhbmQgbWVuLCBhbmQgY29uZnJvbnRlZCB0aGVpciBlbmVtaWVzLCBhbmQgc3RhbmRpbmcgY2xvc2UgYnkgdGhlIGhvcnNlcywgYXMgdGhleSBoYWQgYmVlbiBkaXJlY3RlZCwgdGhleSB0aHJ1c3QgdGhlaXIgamF2ZWxpbnMgdXB3YXJkcywgYWltaW5nIGF0IHRoZSBmYWNlcyBvZiB0aGUgcmlkZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSwgc2luY2UgdGhleSB3ZXJlIHdpdGhvdXQgZXhwZXJpZW5jZSBpbiBldmVyeSBraW5kIG9mIGZpZ2h0aW5nLCBhbmQgZGlkIG5vdCBleHBlY3Qgb3IgZXZlbiBrbm93IGFueXRoaW5nIGFib3V0IHN1Y2ggYSBraW5kIGFzIHRoaXMsIGhhZCBuZWl0aGVyIGNvdXJhZ2Ugbm9yIGVuZHVyYW5jZSB0byBtZWV0IHRoZSBibG93cyB3aGljaCB3ZXJlIGFpbWVkIGF0IHRoZWlyIG1vdXRocyBhbmQgZXllcywgYnV0IHdoZWVsaW5nIGFib3V0IGFuZCBwdXR0aW5nIHRoZWlyIGhhbmRzIGJlZm9yZSB0aGVpciBmYWNlcywgdGhleSBpbmdsb3Jpb3VzbHkgdG9vayB0byBmbGlnaHQuIFRoZW4gQ2Flc2FyJ3Mgc29sZGllcnMsIHN1ZmZlcmluZyB0aGVzZSB0byBtYWtlIHRoZWlyIGVzY2FwZSwgYWR2YW5jZWQgdXBvbiB0aGUgZW5lbXkncyBpbmZhbnRyeSwgYXR0YWNraW5nIGF0IGp1c3QgdGhhdCBwb2ludCB3aGVyZSB0aGUgd2luZywgbGVmdCB1bnByb3RlY3RlZCBieSB0aGUgZmxpZ2h0IG9mIHRoZSBjYXZhbHJ5LCBjb3VsZCBiZSBzdXJyb3VuZGVkIGFuZCBlbmNsb3NlZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNpbmNlIHRoaXMgYm9keSBhdHRhY2tlZCB0aGVtIG9uIHRoZSBmbGFuaywgd2hpbGUgYXQgdGhlIHNhbWUgdGltZSB0aGUgdGVudGggbGVnaW9uIGZlbGwgdXBvbiB0aGVpciBmcm9udCwgdGhlIGVuZW15IGRpZCBub3Qgc3RhbmQgdGhlaXIgZ3JvdW5kIG5vciBldmVuIGhvbGQgdG9nZXRoZXIsIGZvciB0aGV5IHNhdyB0aGF0IHdoaWxlIHRoZXkgd2VyZSBleHBlY3RpbmcgdG8gc3Vycm91bmQgdGhlIGVuZW15LCB0aGV5IHdlcmUgdGhlbXNlbHZlcyBiZWluZyBzdXJyb3VuZGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['71.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGF0IGxhc3QgZGVwbG95ZWQgdGhlaXIgc3F1YWRyb25zIHdpdGggYSB2aWV3IHRvIGVudmVsb3AgQ2Flc2FyLCBhbmQgdG8gaHVybCBiYWNrIHVwb24gdGhlaXIgc3VwcG9ydGluZyBsaW5lcyB0aGUgaG9yc2VtZW4gd2hvbSBoZSBoYWQgc3RhdGlvbmVkIGluIGZyb250LCBvbmx5IGEgZmV3IGluIG51bWJlci4gQnV0IENhZXNhciBnYXZlIGEgc2lnbmFsLCBoaXMgY2F2YWxyeSByZXRpcmVkLCBhbmQgdGhlIGNvaG9ydHMgZHJhd24gdXAgdG8gb3Bwb3NlIHRoZSBlbnZlbG9waW5nIG1vdmVtZW50IHJhbiBvdXQsIHRocmVlIHRob3VzYW5kIG1lbiwgYW5kIGNvbmZyb250ZWQgdGhlaXIgZW5lbWllcywgYW5kIHN0YW5kaW5nIGNsb3NlIGJ5IHRoZSBob3JzZXMsIGFzIHRoZXkgaGFkIGJlZW4gZGlyZWN0ZWQsIHRoZXkgdGhydXN0IHRoZWlyIGphdmVsaW5zIHVwd2FyZHMsIGFpbWluZyBhdCB0aGUgZmFjZXMgb2YgdGhlIHJpZGVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['71.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlLCBzaW5jZSB0aGV5IHdlcmUgd2l0aG91dCBleHBlcmllbmNlIGluIGV2ZXJ5IGtpbmQgb2YgZmlnaHRpbmcsIGFuZCBkaWQgbm90IGV4cGVjdCBvciBldmVuIGtub3cgYW55dGhpbmcgYWJvdXQgc3VjaCBhIGtpbmQgYXMgdGhpcywgaGFkIG5laXRoZXIgY291cmFnZSBub3IgZW5kdXJhbmNlIHRvIG1lZXQgdGhlIGJsb3dzIHdoaWNoIHdlcmUgYWltZWQgYXQgdGhlaXIgbW91dGhzIGFuZCBleWVzLCBidXQgd2hlZWxpbmcgYWJvdXQgYW5kIHB1dHRpbmcgdGhlaXIgaGFuZHMgYmVmb3JlIHRoZWlyIGZhY2VzLCB0aGV5IGluZ2xvcmlvdXNseSB0b29rIHRvIGZsaWdodC4gVGhlbiBDYWVzYXIncyBzb2xkaWVycywgc3VmZmVyaW5nIHRoZXNlIHRvIG1ha2UgdGhlaXIgZXNjYXBlLCBhZHZhbmNlZCB1cG9uIHRoZSBlbmVteSdzIGluZmFudHJ5LCBhdHRhY2tpbmcgYXQganVzdCB0aGF0IHBvaW50IHdoZXJlIHRoZSB3aW5nLCBsZWZ0IHVucHJvdGVjdGVkIGJ5IHRoZSBmbGlnaHQgb2YgdGhlIGNhdmFscnksIGNvdWxkIGJlIHN1cnJvdW5kZWQgYW5kIGVuY2xvc2VkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['71.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzaW5jZSB0aGlzIGJvZHkgYXR0YWNrZWQgdGhlbSBvbiB0aGUgZmxhbmssIHdoaWxlIGF0IHRoZSBzYW1lIHRpbWUgdGhlIHRlbnRoIGxlZ2lvbiBmZWxsIHVwb24gdGhlaXIgZnJvbnQsIHRoZSBlbmVteSBkaWQgbm90IHN0YW5kIHRoZWlyIGdyb3VuZCBub3IgZXZlbiBob2xkIHRvZ2V0aGVyLCBmb3IgdGhleSBzYXcgdGhhdCB3aGlsZSB0aGV5IHdlcmUgZXhwZWN0aW5nIHRvIHN1cnJvdW5kIHRoZSBlbmVteSwgdGhleSB3ZXJlIHRoZW1zZWx2ZXMgYmVpbmcgc3Vycm91bmRlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjcyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGlzIGluZmFudHJ5IHdhcyB0aHVzIHJvdXRlZCwgYW5kIHdoZW4sIGZyb20gdGhlIGNsb3VkIG9mIGR1c3Qgd2hpY2ggaGUgc2F3LCBQb21wZXkgY29uamVjdHVyZWQgdGhlIGZhdGUgb2YgaGlzIGNhdmFscnksIHdoYXQgdGhvdWdodHMgcGFzc2VkIHRocm91Z2ggaGlzIG1pbmQgaXQgd2VyZSBkaWZmaWN1bHQgdG8gc2F5OyBidXQgaGUgd2FzIG1vc3QgbGlrZSBhIG1hbiBiZXJlZnQgb2Ygc2Vuc2UgYW5kIGNyYXplZCwgd2hvIGhhZCB1dHRlcmx5IGZvcmdvdHRlbiB0aGF0IGhlIHdhcyBQb21wZXkgdGhlIEdyZWF0LCBhbmQgd2l0aG91dCBhIHdvcmQgdG8gYW55IG9uZSwgaGUgd2Fsa2VkIHNsb3dseSBvZmYgdG8gaGlzIGNhbXAsIGV4ZW1wbGlmeWluZyB0aG9zZSB2ZXJzZXMgb2YgSG9tZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDExLjU0NCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5JbGlhZDwvdGl0bGU+LCB4aS4gNTQ0IGZmLjwvYmlibD4sIHdoZXJlIFRlbGFtb25pYW4gQWpheCByZXRpcmVzIGJlZm9yZSBIZWN0b3IgYW5kIGhpcyBUcm9qYW5zLjwvbm90ZT46IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkJ1dCBaZXVzIHRoZSBmYXRoZXIsIHRocm9uZWQgb24gaGlnaCwgaW4gQWpheCBzdGlycmVkIHVwIGZlYXI7IDwvbD4KCQkJCQkgICAgICAgICAgPGw+SGUgc3Rvb2QgY29uZm91bmRlZCwgYW5kIGJlaGluZCBoaW0gY2FzdCBoaXMgc2hpZWxkIG9mIHNldmVuIG94LWhpZGVzLCA8L2w+CgkJCQkJICAgICAgICAgIDxsPkFuZCB0cmVtYmxlZCBhcyBoZSBwZWVyZWQgYXJvdW5kIHVwb24gdGhlIHRocm9uZy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+IEluIHN1Y2ggYSBzdGF0ZSBvZiBtaW5kIGhlIHdlbnQgdG8gaGlzIHRlbnQgYW5kIHNhdCBkb3duIHNwZWVjaGxlc3MsIHVudGlsIG1hbnkgcHVyc3VlcnMgYnVyc3QgaW50byB0aGUgY2FtcCB3aXRoIHRoZSBmdWdpdGl2ZXM7IHRoZW4gaGUgbWVyZWx5IGVqYWN1bGF0ZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCEgZXZlbiB0byBteSBxdWFydGVycz88L3E+IGFuZCB3aXRob3V0IGFub3RoZXIgd29yZCByb3NlIHVwLCB0b29rIGNsb3RoaW5nIHN1aXRhYmxlIHRvIGhpcyBwcmVzZW50IGZvcnR1bmUsIGFuZCBtYWRlIGhpcyBlc2NhcGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIGhpcyBsZWdpb25zIGFsc28gZmxlZCwgYW5kIHRoZXJlIHdhcyBhIGdyZWF0IHNsYXVnaHRlciBpbiB0aGUgY2FtcCBvZiB0ZW50LWd1YXJkcyBhbmQgc2VydmFudHM7IGJ1dCBvbmx5IHNpeCB0aG91c2FuZCBzb2xkaWVycyBmZWxsLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhZXNhciBzYXlzIHRoYXQgZmlmdGVlbiB0aG91c2FuZCBvZiBQb21wZXkncyBzb2xkaWVycyBmZWxsLCBhbmQgdHdlbnR5LWZvdXIgdGhvdXNhbmQgc3VycmVuZGVyZWQuIEhpcyBvd24gbG9zc2VzIGhlIHB1dHMgYXQgdHdvIGh1bmRyZWQgc29sZGllcnMgYW5kIHRoaXJ0eSBjZW50dXJpb25zICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjk5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJlbGwuIENpdi48L3RpdGxlPiBpaWkuIDk5PC9iaWJsPikuPC9ub3RlPiBhY2NvcmRpbmcgdG8gQXNpbml1cyBQb2xsaW8sIHdobyBmb3VnaHQgaW4gdGhhdCBiYXR0bGUgb24gdGhlIHNpZGUgb2YgQ2Flc2FyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['72.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGlzIGluZmFudHJ5IHdhcyB0aHVzIHJvdXRlZCwgYW5kIHdoZW4sIGZyb20gdGhlIGNsb3VkIG9mIGR1c3Qgd2hpY2ggaGUgc2F3LCBQb21wZXkgY29uamVjdHVyZWQgdGhlIGZhdGUgb2YgaGlzIGNhdmFscnksIHdoYXQgdGhvdWdodHMgcGFzc2VkIHRocm91Z2ggaGlzIG1pbmQgaXQgd2VyZSBkaWZmaWN1bHQgdG8gc2F5OyBidXQgaGUgd2FzIG1vc3QgbGlrZSBhIG1hbiBiZXJlZnQgb2Ygc2Vuc2UgYW5kIGNyYXplZCwgd2hvIGhhZCB1dHRlcmx5IGZvcmdvdHRlbiB0aGF0IGhlIHdhcyBQb21wZXkgdGhlIEdyZWF0LCBhbmQgd2l0aG91dCBhIHdvcmQgdG8gYW55IG9uZSwgaGUgd2Fsa2VkIHNsb3dseSBvZmYgdG8gaGlzIGNhbXAsIGV4ZW1wbGlmeWluZyB0aG9zZSB2ZXJzZXMgb2YgSG9tZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxMS41NDQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB4aS4gNTQ0IGZmLjwvYmlibD4sIHdoZXJlIFRlbGFtb25pYW4gQWpheCByZXRpcmVzIGJlZm9yZSBIZWN0b3IgYW5kIGhpcyBUcm9qYW5zLjwvbm90ZT46IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMTEuNTQ0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeGkuIDU0NCBmZi48L2JpYmw+LCB3aGVyZSBUZWxhbW9uaWFuIEFqYXggcmV0aXJlcyBiZWZvcmUgSGVjdG9yIGFuZCBoaXMgVHJvamFucy48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB4aS4gNTQ0IGZmLjwvdHJhbnNsYXRpb24+"
translation['72.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgWmV1cyB0aGUgZmF0aGVyLCB0aHJvbmVkIG9uIGhpZ2gsIGluIEFqYXggc3RpcnJlZCB1cCBmZWFyOyA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgc3Rvb2QgY29uZm91bmRlZCwgYW5kIGJlaGluZCBoaW0gY2FzdCBoaXMgc2hpZWxkIG9mIHNldmVuIG94LWhpZGVzLCA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHRyZW1ibGVkIGFzIGhlIHBlZXJlZCBhcm91bmQgdXBvbiB0aGUgdGhyb25nLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4gSW4gc3VjaCBhIHN0YXRlIG9mIG1pbmQgaGUgd2VudCB0byBoaXMgdGVudCBhbmQgc2F0IGRvd24gc3BlZWNobGVzcywgdW50aWwgbWFueSBwdXJzdWVycyBidXJzdCBpbnRvIHRoZSBjYW1wIHdpdGggdGhlIGZ1Z2l0aXZlczsgdGhlbiBoZSBtZXJlbHkgZWphY3VsYXRlZDogCgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBaZXVzIHRoZSBmYXRoZXIsIHRocm9uZWQgb24gaGlnaCwgaW4gQWpheCBzdGlycmVkIHVwIGZlYXI7IDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5IZSBzdG9vZCBjb25mb3VuZGVkLCBhbmQgYmVoaW5kIGhpbSBjYXN0IGhpcyBzaGllbGQgb2Ygc2V2ZW4gb3gtaGlkZXMsIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgdHJlbWJsZWQgYXMgaGUgcGVlcmVkIGFyb3VuZCB1cG9uIHRoZSB0aHJvbmcuPC9sPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQhIGV2ZW4gdG8gbXkgcXVhcnRlcnM/PC9xPiBhbmQgd2l0aG91dCBhbm90aGVyIHdvcmQgcm9zZSB1cCwgdG9vayBjbG90aGluZyBzdWl0YWJsZSB0byBoaXMgcHJlc2VudCBmb3J0dW5lLCBhbmQgbWFkZSBoaXMgZXNjYXBlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['72.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIGhpcyBsZWdpb25zIGFsc28gZmxlZCwgYW5kIHRoZXJlIHdhcyBhIGdyZWF0IHNsYXVnaHRlciBpbiB0aGUgY2FtcCBvZiB0ZW50LWd1YXJkcyBhbmQgc2VydmFudHM7IGJ1dCBvbmx5IHNpeCB0aG91c2FuZCBzb2xkaWVycyBmZWxsLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Flc2FyIHNheXMgdGhhdCBmaWZ0ZWVuIHRob3VzYW5kIG9mIFBvbXBleSdzIHNvbGRpZXJzIGZlbGwsIGFuZCB0d2VudHktZm91ciB0aG91c2FuZCBzdXJyZW5kZXJlZC4gSGlzIG93biBsb3NzZXMgaGUgcHV0cyBhdCB0d28gaHVuZHJlZCBzb2xkaWVycyBhbmQgdGhpcnR5IGNlbnR1cmlvbnMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy45OSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBpaWkuIDk5PC9iaWJsPikuPC9ub3RlPiBhY2NvcmRpbmcgdG8gQXNpbml1cyBQb2xsaW8sIHdobyBmb3VnaHQgaW4gdGhhdCBiYXR0bGUgb24gdGhlIHNpZGUgb2YgQ2Flc2FyLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaWlpLiA5OTwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBpaWkuIDk5PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJV2hlbiBDYWVzYXIncyB0cm9vcHMgY2FwdHVyZWQgdGhlIGNhbXAsIHRoZXkgYmVoZWxkIHRoZSB2YW5pdHkgYW5kIGZvbGx5IG9mIHRoZSBlbmVteS4gRm9yIGV2ZXJ5IHRlbnQgd2FzIHdyZWF0aGVkIHdpdGggbXlydGxlIGJvdWdocyBhbmQgZGVja2VkIG91dCB3aXRoIGZsb3dlcmVkIGNvdWNoZXMgYW5kIHRhYmxlcyBsb2FkZWQgd2l0aCBiZWFrZXJzOyBib3dscyBvZiB3aW5lIGFsc28gd2VyZSBsYWlkIG91dCwgYW5kIHByZXBhcmF0aW9uIGFuZCBhZG9ybm1lbnQgd2VyZSB0aG9zZSBvZiBtZW4gd2hvIGhhZCBzYWNyaWZpY2VkIGFuZCB3ZXJlIGhvbGRpbmcgZmVzdGl2YWwgcmF0aGVyIHRoYW4gb2YgbWVuIHdobyB3ZXJlIGFybWluZyB0aGVtc2VsdmVzIGZvciBiYXR0bGUuIFdpdGggc3VjaCBpbmZhdHVhdGVkIGhvcGVzIGFuZCBzdWNoIGEgc3RvcmUgb2YgZm9vbGlzaCBjb25maWRlbmNlIGRpZCB0aGV5IGdvIGZvcnRoIHRvIHdhci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy45NiIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8ZW1waD5vcC4gY2l0LjwvZW1waD4gaWlpLiA5Ni48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['72.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJV2hlbiBDYWVzYXIncyB0cm9vcHMgY2FwdHVyZWQgdGhlIGNhbXAsIHRoZXkgYmVoZWxkIHRoZSB2YW5pdHkgYW5kIGZvbGx5IG9mIHRoZSBlbmVteS4gRm9yIGV2ZXJ5IHRlbnQgd2FzIHdyZWF0aGVkIHdpdGggbXlydGxlIGJvdWdocyBhbmQgZGVja2VkIG91dCB3aXRoIGZsb3dlcmVkIGNvdWNoZXMgYW5kIHRhYmxlcyBsb2FkZWQgd2l0aCBiZWFrZXJzOyBib3dscyBvZiB3aW5lIGFsc28gd2VyZSBsYWlkIG91dCwgYW5kIHByZXBhcmF0aW9uIGFuZCBhZG9ybm1lbnQgd2VyZSB0aG9zZSBvZiBtZW4gd2hvIGhhZCBzYWNyaWZpY2VkIGFuZCB3ZXJlIGhvbGRpbmcgZmVzdGl2YWwgcmF0aGVyIHRoYW4gb2YgbWVuIHdobyB3ZXJlIGFybWluZyB0aGVtc2VsdmVzIGZvciBiYXR0bGUuIFdpdGggc3VjaCBpbmZhdHVhdGVkIGhvcGVzIGFuZCBzdWNoIGEgc3RvcmUgb2YgZm9vbGlzaCBjb25maWRlbmNlIGRpZCB0aGV5IGdvIGZvcnRoIHRvIHdhci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTYiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5vcC4gY2l0LjwvZW1waD4gaWlpLiA5Ni48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjk2IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+b3AuIGNpdC48L2VtcGg+IGlpaS4gOTYuPC9iaWJsPgogICAgICAgICAgICA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPm9wLiBjaXQuPC9lbXBoPiBpaWkuIDk2LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQb21wZXksIHdoZW4gaGUgaGFkIGdvbmUgYSBsaXR0bGUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtcCwgZ2F2ZSBoaXMgaG9yc2UgdGhlIHJlaW4sIGFuZCB3aXRoIG9ubHkgYSBmZXcgZm9sbG93ZXJzLCBzaW5jZSBubyBvbmUgcHVyc3VlZCBoaW0sIHdlbnQgcXVpZXRseSBhd2F5LCBpbmR1bGdpbmcgaW4gc3VjaCByZWZsZWN0aW9ucyBhcyBhIG1hbiB3b3VsZCBuYXR1cmFsbHkgbWFrZSB3aG8gZm9yIGZvdXIgYW5kIHRoaXJ0eSB5ZWFycyBoYWQgYmVlbiBhY2N1c3RvbWVkIHRvIGNvbnF1ZXIgYW5kIGdldCB0aGUgbWFzdGVyeSBpbiBldmVyeXRoaW5nLCBhbmQgd2hvIG5vdyBmb3IgdGhlIGZpcnN0IHRpbWUsIGluIGhpcyBvbGQgYWdlLCBnb3QgZXhwZXJpZW5jZSBvZiBkZWZlYXQgYW5kIGZsaWdodDsgaGUgdGhvdWdodCBob3cgaW4gYSBzaW5nbGUgaG91ciBoZSBoYWQgbG9zdCB0aGUgcG93ZXIgYW5kIGdsb3J5IGdhaW5lZCBpbiBzbyBtYW55IHdhcnMgYW5kIGNvbmZsaWN0cywgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+aGUgd2hvIGEgbGl0dGxlIHdoaWxlIGFnbyB3YXMgZ3VhcmRlZCBieSBzdWNoIGFuIGFycmF5IG9mIGluZmFudHJ5IGFuZCBob3JzZSwgYnV0IHdhcyBub3cgZ29pbmcgYXdheSBzbyBpbnNpZ25pZmljYW50IGFuZCBodW1ibGVkIGFzIHRvIGVzY2FwZSB0aGUgbm90aWNlIG9mIHRoZSBlbmVtaWVzIHdobyB3ZXJlIGluIHNlYXJjaCBvZiBoaW0uIEFmdGVyIHBhc3NpbmcgYnkgTGFyaXNzYSwgaGUgY2FtZSB0byB0aGUgVmFsZSBvZiBUZW1wZSwgYW5kIHRoZXJlLCBiZWluZyB0aGlyc3R5LCBoZSB0aHJldyBoaW1zZWxmIGRvd24gb24gaGlzIGZhY2UgYW5kIGRyYW5rIG9mIHRoZSByaXZlcjsgdGhlbiwgcmlzaW5nIHVwIGFnYWluLCBoZSB3ZW50IG9uIGhpcyB3YXkgdGhyb3VnaCBUZW1wZSwgYW5kIGF0IGxhc3QgY2FtZSBkb3duIHRvIHRoZSBzZWEuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGhlIHJlc3RlZCBmb3IgdGhlIHJlbWFpbmRlciBvZiB0aGUgbmlnaHQgaW4gYSBmaXNoZXJtYW4ncyBodXQuIEF0IGVhcmx5IGRhd24gaGUgd2VudCBhYm9hcmQgYSByaXZlci1ib2F0LCB0YWtpbmcgd2l0aCBoaW0gc3VjaCBvZiBoaXMgZm9sbG93ZXJzIGFzIHdlcmUgZnJlZW1lbiwgYnV0IGJpZGRpbmcgaGlzIHNlcnZhbnRzIHRvIGdvIGJhY2sgdG8gQ2Flc2FyIGFuZCB0byBoYXZlIG5vIGZlYXIuIFRoZW4gaGUgY29hc3RlZCBhbG9uZyB1bnRpbCBoZSBzYXcgYSBtZXJjaGFudC1zaGlwIG9mIGdvb2RseSBzaXplIGFib3V0IHRvIHB1dCB0byBzZWEsIHRoZSBtYXN0ZXIgb2Ygd2hpY2ggd2FzIGEgUm9tYW4gd2hvLCB0aG91Z2ggbm90IGludGltYXRlbHkgYWNxdWFpbnRlZCB3aXRoIFBvbXBleSwgbmV2ZXJ0aGVsZXNzIGtuZXcgaGltIGJ5IHNpZ2h0OyBoaXMgbmFtZSB3YXMgUGV0aWNpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuLCBhcyBpdCBoYXBwZW5lZCwgaGFkIGRyZWFtZWQgdGhlIG5pZ2h0IGJlZm9yZSB0aGF0IFBvbXBleSwgbm90IGFzIGhlIGhhZCBvZnRlbiBzZWVuIGhpbSwgYnV0IGh1bWJsZSBhbmQgZG93bmNhc3QsIHdhcyBhZGRyZXNzaW5nIGhpbS4gSGUgd2FzIGp1c3QgdGVsbGluZyB0aGlzIGRyZWFtIHRvIGhpcyBzaGlwbWF0ZXMsIGFzIG1lbiB3aG8gYXJlIGF0IGxlaXN1cmUgYXJlIHdvbnQgdG8gbWFrZSBtdWNoIG9mIHN1Y2ggbWF0dGVycywgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+d2hlbiBzdWRkZW5seSBvbmUgb2YgdGhlIHNhaWxvcnMgdG9sZCBoaW0gdGhhdCBoZSBzYXcgYSByaXZlci1ib2F0IHJvd2luZyBvdXQgZnJvbSB0aGUgc2hvcmUsIGFuZCBzb21lIG1lbiBpbiBpdCB3YXZpbmcgdGhlaXIgZ2FybWVudHMgYW5kIHN0cmV0Y2hpbmcgb3V0IHRoZWlyIGhhbmRzIHRvd2FyZHMgdGhlbS4gUGV0aWNpdXMsIGFjY29yZGluZ2x5LCB0dXJuZWQgaGlzIGF0dGVudGlvbiBpbiB0aGF0IGRpcmVjdGlvbiwgYW5kIGF0IG9uY2UgcmVjb2duaXNlZCBQb21wZXksIGFzIGhlIGhhZCBzZWVuIGhpbSBpbiBoaXMgZHJlYW07IHRoZW4sIHNtaXRpbmcgaGlzIGhlYWQsIGhlIG9yZGVyZWQgdGhlIHNhaWxvcnMgdG8gYnJpbmcgdGhlIGxpdHRsZSBib2F0IGFsb25nc2lkZSwgYW5kIHN0cmV0Y2hpbmcgb3V0IGhpcyBoYW5kLCBoYWlsZWQgUG9tcGV5LCBhbHJlYWR5IGNvbXByZWhlbmRpbmcgZnJvbSBoaXMgZ2FyYiB0aGUgY2hhbmdlIG9mIGZvcnR1bmUgd2hpY2ggdGhlIG1hbiBoYWQgc3VmZmVyZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgd2l0aG91dCB3YWl0aW5nIGZvciBhcmd1bWVudCBvciBlbnRyZWF0eSwgaGUgdG9vayBQb21wZXkgb24gYm9hcmQsIGFuZCBhbHNvIGFsbCB3aG9tIFBvbXBleSB3aXNoZWQgdG8gaGF2ZSB3aXRoIGhpbSAodGhlc2Ugd2VyZSB0aGUgdHdvIExlbnR1bGkgYW5kIEZhdm9uaXVzKSwgYW5kIHNldCBzYWlsOyBhbmQgc2hvcnRseSBhZnRlciwgc2VlaW5nIERlaW90YXJ1cyB0aGUga2luZyBodXJyeWluZyBvdXQgZnJvbSBzaG9yZSwgdGhleSB0b29rIGhpbSBvbiBib2FyZCBhbHNvLiBOb3csIHdoZW4gaXQgd2FzIHRpbWUgZm9yIHN1cHBlciBhbmQgdGhlIG1hc3RlciBvZiB0aGUgc2hpcCBoYWQgbWFkZSBzdWNoIHByb3Zpc2lvbiBmb3IgdGhlbSBhcyBoZSBjb3VsZCwgRmF2b25pdXMsIHNlZWluZyB0aGF0IFBvbXBleSwgZm9yIGxhY2sgb2Ygc2VydmFudHMsIHdhcyBiZWdpbm5pbmcgdG8gdGFrZSBvZmYgaGlzIG93biBzaG9lcywgcmFuIHRvIGhpbSBhbmQgdG9vayBvZmYgaGlzIHNob2VzIGZvciBoaW0sIGFuZCBoZWxwZWQgaGltIHRvIGFub2ludCBoaW1zZWxmLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnJvbSB0aGF0IHRpbWUgb24gaGUgY29udGludWVkIHRvIGdpdmUgUG9tcGV5IHN1Y2ggbWluaXN0cnkgYW5kIHNlcnZpY2UgYXMgc2xhdmVzIGdpdmUgdGhlaXIgbWFzdGVycywgZXZlbiBkb3duIHRvIHRoZSB3YXNoaW5nIG9mIGhpcyBmZWV0IGFuZCB0aGUgcHJlcGFyYXRpb24gb2YgaGlzIG1lYWxzLCBzbyB0aGF0IGFueSBvbmUgd2hvIGJlaGVsZCB0aGUgY291cnRlc3kgYW5kIHRoZSB1bmZlaWduZWQgc2ltcGxpY2l0eSBvZiB0aGF0IHNlcnZpY2UgbWlnaHQgaGF2ZSBleGNsYWltZWQ6IAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5BaCwgeWVzISB0byBnZW5lcm91cyBzb3VscyBob3cgbm9ibGUgZXZlcnkgdGFzayE8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSB2ZXJzZSBpcyBhc3NpZ25lZCB0byBFdXJpcGlkZXMgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gODVhIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1vcmFsczwvdGl0bGU+LCBwLiA4NWE8L2JpYmw+IChOYXVjaywgPHRpdGxlPlRyYWcuIEdyYWVjLiBGcmFnLjI8L3RpdGxlPiwgcC4gNjcxKS48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['73.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFBvbXBleSwgd2hlbiBoZSBoYWQgZ29uZSBhIGxpdHRsZSBkaXN0YW5jZSBmcm9tIHRoZSBjYW1wLCBnYXZlIGhpcyBob3JzZSB0aGUgcmVpbiwgYW5kIHdpdGggb25seSBhIGZldyBmb2xsb3dlcnMsIHNpbmNlIG5vIG9uZSBwdXJzdWVkIGhpbSwgd2VudCBxdWlldGx5IGF3YXksIGluZHVsZ2luZyBpbiBzdWNoIHJlZmxlY3Rpb25zIGFzIGEgbWFuIHdvdWxkIG5hdHVyYWxseSBtYWtlIHdobyBmb3IgZm91ciBhbmQgdGhpcnR5IHllYXJzIGhhZCBiZWVuIGFjY3VzdG9tZWQgdG8gY29ucXVlciBhbmQgZ2V0IHRoZSBtYXN0ZXJ5IGluIGV2ZXJ5dGhpbmcsIGFuZCB3aG8gbm93IGZvciB0aGUgZmlyc3QgdGltZSwgaW4gaGlzIG9sZCBhZ2UsIGdvdCBleHBlcmllbmNlIG9mIGRlZmVhdCBhbmQgZmxpZ2h0OyBoZSB0aG91Z2h0IGhvdyBpbiBhIHNpbmdsZSBob3VyIGhlIGhhZCBsb3N0IHRoZSBwb3dlciBhbmQgZ2xvcnkgZ2FpbmVkIGluIHNvIG1hbnkgd2FycyBhbmQgY29uZmxpY3RzLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['73.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIHdobyBhIGxpdHRsZSB3aGlsZSBhZ28gd2FzIGd1YXJkZWQgYnkgc3VjaCBhbiBhcnJheSBvZiBpbmZhbnRyeSBhbmQgaG9yc2UsIGJ1dCB3YXMgbm93IGdvaW5nIGF3YXkgc28gaW5zaWduaWZpY2FudCBhbmQgaHVtYmxlZCBhcyB0byBlc2NhcGUgdGhlIG5vdGljZSBvZiB0aGUgZW5lbWllcyB3aG8gd2VyZSBpbiBzZWFyY2ggb2YgaGltLiBBZnRlciBwYXNzaW5nIGJ5IExhcmlzc2EsIGhlIGNhbWUgdG8gdGhlIFZhbGUgb2YgVGVtcGUsIGFuZCB0aGVyZSwgYmVpbmcgdGhpcnN0eSwgaGUgdGhyZXcgaGltc2VsZiBkb3duIG9uIGhpcyBmYWNlIGFuZCBkcmFuayBvZiB0aGUgcml2ZXI7IHRoZW4sIHJpc2luZyB1cCBhZ2FpbiwgaGUgd2VudCBvbiBoaXMgd2F5IHRocm91Z2ggVGVtcGUsIGFuZCBhdCBsYXN0IGNhbWUgZG93biB0byB0aGUgc2VhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['73.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGhlIHJlc3RlZCBmb3IgdGhlIHJlbWFpbmRlciBvZiB0aGUgbmlnaHQgaW4gYSBmaXNoZXJtYW4ncyBodXQuIEF0IGVhcmx5IGRhd24gaGUgd2VudCBhYm9hcmQgYSByaXZlci1ib2F0LCB0YWtpbmcgd2l0aCBoaW0gc3VjaCBvZiBoaXMgZm9sbG93ZXJzIGFzIHdlcmUgZnJlZW1lbiwgYnV0IGJpZGRpbmcgaGlzIHNlcnZhbnRzIHRvIGdvIGJhY2sgdG8gQ2Flc2FyIGFuZCB0byBoYXZlIG5vIGZlYXIuIFRoZW4gaGUgY29hc3RlZCBhbG9uZyB1bnRpbCBoZSBzYXcgYSBtZXJjaGFudC1zaGlwIG9mIGdvb2RseSBzaXplIGFib3V0IHRvIHB1dCB0byBzZWEsIHRoZSBtYXN0ZXIgb2Ygd2hpY2ggd2FzIGEgUm9tYW4gd2hvLCB0aG91Z2ggbm90IGludGltYXRlbHkgYWNxdWFpbnRlZCB3aXRoIFBvbXBleSwgbmV2ZXJ0aGVsZXNzIGtuZXcgaGltIGJ5IHNpZ2h0OyBoaXMgbmFtZSB3YXMgUGV0aWNpdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['73.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuLCBhcyBpdCBoYXBwZW5lZCwgaGFkIGRyZWFtZWQgdGhlIG5pZ2h0IGJlZm9yZSB0aGF0IFBvbXBleSwgbm90IGFzIGhlIGhhZCBvZnRlbiBzZWVuIGhpbSwgYnV0IGh1bWJsZSBhbmQgZG93bmNhc3QsIHdhcyBhZGRyZXNzaW5nIGhpbS4gSGUgd2FzIGp1c3QgdGVsbGluZyB0aGlzIGRyZWFtIHRvIGhpcyBzaGlwbWF0ZXMsIGFzIG1lbiB3aG8gYXJlIGF0IGxlaXN1cmUgYXJlIHdvbnQgdG8gbWFrZSBtdWNoIG9mIHN1Y2ggbWF0dGVycywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['73.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPndoZW4gc3VkZGVubHkgb25lIG9mIHRoZSBzYWlsb3JzIHRvbGQgaGltIHRoYXQgaGUgc2F3IGEgcml2ZXItYm9hdCByb3dpbmcgb3V0IGZyb20gdGhlIHNob3JlLCBhbmQgc29tZSBtZW4gaW4gaXQgd2F2aW5nIHRoZWlyIGdhcm1lbnRzIGFuZCBzdHJldGNoaW5nIG91dCB0aGVpciBoYW5kcyB0b3dhcmRzIHRoZW0uIFBldGljaXVzLCBhY2NvcmRpbmdseSwgdHVybmVkIGhpcyBhdHRlbnRpb24gaW4gdGhhdCBkaXJlY3Rpb24sIGFuZCBhdCBvbmNlIHJlY29nbmlzZWQgUG9tcGV5LCBhcyBoZSBoYWQgc2VlbiBoaW0gaW4gaGlzIGRyZWFtOyB0aGVuLCBzbWl0aW5nIGhpcyBoZWFkLCBoZSBvcmRlcmVkIHRoZSBzYWlsb3JzIHRvIGJyaW5nIHRoZSBsaXR0bGUgYm9hdCBhbG9uZ3NpZGUsIGFuZCBzdHJldGNoaW5nIG91dCBoaXMgaGFuZCwgaGFpbGVkIFBvbXBleSwgYWxyZWFkeSBjb21wcmVoZW5kaW5nIGZyb20gaGlzIGdhcmIgdGhlIGNoYW5nZSBvZiBmb3J0dW5lIHdoaWNoIHRoZSBtYW4gaGFkIHN1ZmZlcmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['73.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgd2l0aG91dCB3YWl0aW5nIGZvciBhcmd1bWVudCBvciBlbnRyZWF0eSwgaGUgdG9vayBQb21wZXkgb24gYm9hcmQsIGFuZCBhbHNvIGFsbCB3aG9tIFBvbXBleSB3aXNoZWQgdG8gaGF2ZSB3aXRoIGhpbSAodGhlc2Ugd2VyZSB0aGUgdHdvIExlbnR1bGkgYW5kIEZhdm9uaXVzKSwgYW5kIHNldCBzYWlsOyBhbmQgc2hvcnRseSBhZnRlciwgc2VlaW5nIERlaW90YXJ1cyB0aGUga2luZyBodXJyeWluZyBvdXQgZnJvbSBzaG9yZSwgdGhleSB0b29rIGhpbSBvbiBib2FyZCBhbHNvLiBOb3csIHdoZW4gaXQgd2FzIHRpbWUgZm9yIHN1cHBlciBhbmQgdGhlIG1hc3RlciBvZiB0aGUgc2hpcCBoYWQgbWFkZSBzdWNoIHByb3Zpc2lvbiBmb3IgdGhlbSBhcyBoZSBjb3VsZCwgRmF2b25pdXMsIHNlZWluZyB0aGF0IFBvbXBleSwgZm9yIGxhY2sgb2Ygc2VydmFudHMsIHdhcyBiZWdpbm5pbmcgdG8gdGFrZSBvZmYgaGlzIG93biBzaG9lcywgcmFuIHRvIGhpbSBhbmQgdG9vayBvZmYgaGlzIHNob2VzIGZvciBoaW0sIGFuZCBoZWxwZWQgaGltIHRvIGFub2ludCBoaW1zZWxmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['73.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmcm9tIHRoYXQgdGltZSBvbiBoZSBjb250aW51ZWQgdG8gZ2l2ZSBQb21wZXkgc3VjaCBtaW5pc3RyeSBhbmQgc2VydmljZSBhcyBzbGF2ZXMgZ2l2ZSB0aGVpciBtYXN0ZXJzLCBldmVuIGRvd24gdG8gdGhlIHdhc2hpbmcgb2YgaGlzIGZlZXQgYW5kIHRoZSBwcmVwYXJhdGlvbiBvZiBoaXMgbWVhbHMsIHNvIHRoYXQgYW55IG9uZSB3aG8gYmVoZWxkIHRoZSBjb3VydGVzeSBhbmQgdGhlIHVuZmVpZ25lZCBzaW1wbGljaXR5IG9mIHRoYXQgc2VydmljZSBtaWdodCBoYXZlIGV4Y2xhaW1lZDogCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BaCwgeWVzISB0byBnZW5lcm91cyBzb3VscyBob3cgbm9ibGUgZXZlcnkgdGFzayE8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWgsIHllcyEgdG8gZ2VuZXJvdXMgc291bHMgaG93IG5vYmxlIGV2ZXJ5IHRhc2shPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSB2ZXJzZSBpcyBhc3NpZ25lZCB0byBFdXJpcGlkZXMgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA4NWEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcC4gODVhPC9iaWJsPiAoTmF1Y2ssIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyYWcuIEdyYWVjLiBGcmFnLjI8L3RpdGxlPiwgcC4gNjcxKS48L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gODVhIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDg1YTwvYmlibD4gKE5hdWNrLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcC4gODVhPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJhZy4gR3JhZWMuIEZyYWcuMjwvdGl0bGU+LCBwLiA2NzEpLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbywgYWZ0ZXIgY29hc3RpbmcgYWxvbmcgdG93YXJkcyBBbXBoaXBvbGlzLCBoZSBjcm9zc2VkIG92ZXIgdG8gTWl0eWxlbmUsIGRlc2lyaW5nIHRvIHRha2Ugb24gYm9hcmQgQ29ybmVsaWEgYW5kIGhpcyBzb24uIEFuZCB3aGVuIGhlIGhhZCByZWFjaGVkIHRoZSBzaG9yZSBvZiB0aGUgaXNsYW5kLCBoZSBzZW50IGEgbWVzc2VuZ2VyIHRvIHRoZSBjaXR5LCBub3Qgc3VjaCBhIG9uZSBhcyBDb3JuZWxpYSB3YXMgZXhwZWN0aW5nIGluIHZpZXcgb2YgdGhlIGpveWZ1bCBtZXNzYWdlcyBhbmQgbGV0dGVycyBzaGUgaGFkIHJlY2VpdmVkLCBmb3Igc2hlIHdhcyBob3BpbmcgdGhhdCB0aGUgd2FyIHdhcyBlbmRlZCBhdCBEeXJyYWNoaXVtLCBhbmQgdGhhdCB0aGUgb25seSB0YXNrIGxlZnQgZm9yIFBvbXBleSB3YXMgdGhlIHB1cnN1aXQgb2YgQ2Flc2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbWVzc2VuZ2VyLCBmaW5kaW5nIGhlciBpbiB0aGlzIG1vb2QsIGNvdWxkIG5vdCBicmluZyBoaW1zZWxmIHRvIHNhbHV0ZSBoZXIsIGJ1dCBpbmRpY2F0ZWQgdG8gaGVyIHRoZSBtb3N0IGFuZCBncmVhdGVzdCBvZiBoZXIgbWlzZm9ydHVuZXMgYnkgaGlzIHRlYXJzIHJhdGhlciB0aGFuIGJ5IGhpcyBzcGVlY2gsIGFuZCBtZXJlbHkgYmFkZSBoZXIgaGFzdGVuIGlmIHNoZSBoYWQgYW55IHdpc2ggdG8gc2VlIFBvbXBleSB3aXRoIG9uZSBzaGlwIG9ubHksIGFuZCB0aGF0IG5vdCBoaXMgb3duLiBXaGVuIHNoZSBoZWFyZCB0aGlzLCBzaGUgY2FzdCBoZXJzZWxmIHVwb24gdGhlIGdyb3VuZCBhbmQgbGF5IHRoZXJlIGEgbG9uZyB0aW1lIGJlcmVmdCBvZiBzZW5zZSBhbmQgc3BlZWNoLiBBdCBsYXN0LCBob3dldmVyLCBhbmQgd2l0aCBkaWZmaWN1bHR5LCBzaGUgcmVnYWluZWQgaGVyIHNlbnNlcywgYW5kIHBlcmNlaXZpbmcgdGhhdCB0aGUgb2NjYXNpb24gd2FzIG5vdCBvbmUgZm9yIHRlYXJzIGFuZCBsYW1lbnRhdGlvbnMsIHNoZSByYW4gb3V0IHRocm91Z2ggdGhlIGNpdHkgdG8gdGhlIHNlYS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5IG1ldCBoZXIgYW5kIGNhdWdodCBoZXIgaW4gaGlzIGFybXMgYXMgc2hlIHRvdHRlcmVkIGFuZCB3YXMgZmFsbGluZy4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHNlZSB0aGVlLDwvcT4gc2hlIGNyaWVkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmh1c2JhbmQsIG5vdCBieSB0aHkgZm9ydHVuZSwgYnV0IGJ5IG1pbmUsIHJlZHVjZWQgdG8gb25lIHNtYWxsIHZlc3NlbCwgdGhvdSB3aG8gYmVmb3JlIHRoeSBtYXJyaWFnZSB3aXRoIENvcm5lbGlhIGRpZHN0IHNhaWwgdGhpcyBzZWEgd2l0aCBmaXZlIGh1bmRyZWQgc2hpcHMuIFdoeSBoYXN0IHRob3UgY29tZSB0byBzZWUgbWUsIGFuZCB3aHkgZGlkc3QgdGhvdSBub3QgbGVhdmUgdG8gaGVyIGNydWVsIGRlc3Rpbnkgb25lIHdobyBoYXMgaW5mZWN0ZWQgdGhlZSBhbHNvIHdpdGggYW4gZXZpbCBmb3J0dW5lIHNvIGdyZWF0PyBXaGF0IGEgaGFwcHkgd29tYW4gSSBoYWQgYmVlbiBpZiBJIGhhZCBkaWVkIGJlZm9yZSBoZWFyaW5nIHRoYXQgUHVibGl1cywgd2hvc2UgdmlyZ2luIGJyaWRlIEkgd2FzLCB3YXMgc2xhaW4gYW1vbmcgdGhlIFBhcnRoaWFucyEgQW5kIGhvdyB3aXNlIGlmLCBldmVuIGFmdGVyIGhpcyBkZWF0aCwgYXMgSSBlc3NheWVkIHRvIGRvLCBJIGhhZCBwdXQgYW4gZW5kIHRvIG15IG93biBsaWZlISBCdXQgSSB3YXMgc3BhcmVkLCBpdCBzZWVtcywgdG8gYnJpbmcgcnVpbiBhbHNvIHVwb24gUG9tcGV5IHRoZSBHcmVhdC48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['74.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvLCBhZnRlciBjb2FzdGluZyBhbG9uZyB0b3dhcmRzIEFtcGhpcG9saXMsIGhlIGNyb3NzZWQgb3ZlciB0byBNaXR5bGVuZSwgZGVzaXJpbmcgdG8gdGFrZSBvbiBib2FyZCBDb3JuZWxpYSBhbmQgaGlzIHNvbi4gQW5kIHdoZW4gaGUgaGFkIHJlYWNoZWQgdGhlIHNob3JlIG9mIHRoZSBpc2xhbmQsIGhlIHNlbnQgYSBtZXNzZW5nZXIgdG8gdGhlIGNpdHksIG5vdCBzdWNoIGEgb25lIGFzIENvcm5lbGlhIHdhcyBleHBlY3RpbmcgaW4gdmlldyBvZiB0aGUgam95ZnVsIG1lc3NhZ2VzIGFuZCBsZXR0ZXJzIHNoZSBoYWQgcmVjZWl2ZWQsIGZvciBzaGUgd2FzIGhvcGluZyB0aGF0IHRoZSB3YXIgd2FzIGVuZGVkIGF0IER5cnJhY2hpdW0sIGFuZCB0aGF0IHRoZSBvbmx5IHRhc2sgbGVmdCBmb3IgUG9tcGV5IHdhcyB0aGUgcHVyc3VpdCBvZiBDYWVzYXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['74.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtZXNzZW5nZXIsIGZpbmRpbmcgaGVyIGluIHRoaXMgbW9vZCwgY291bGQgbm90IGJyaW5nIGhpbXNlbGYgdG8gc2FsdXRlIGhlciwgYnV0IGluZGljYXRlZCB0byBoZXIgdGhlIG1vc3QgYW5kIGdyZWF0ZXN0IG9mIGhlciBtaXNmb3J0dW5lcyBieSBoaXMgdGVhcnMgcmF0aGVyIHRoYW4gYnkgaGlzIHNwZWVjaCwgYW5kIG1lcmVseSBiYWRlIGhlciBoYXN0ZW4gaWYgc2hlIGhhZCBhbnkgd2lzaCB0byBzZWUgUG9tcGV5IHdpdGggb25lIHNoaXAgb25seSwgYW5kIHRoYXQgbm90IGhpcyBvd24uIFdoZW4gc2hlIGhlYXJkIHRoaXMsIHNoZSBjYXN0IGhlcnNlbGYgdXBvbiB0aGUgZ3JvdW5kIGFuZCBsYXkgdGhlcmUgYSBsb25nIHRpbWUgYmVyZWZ0IG9mIHNlbnNlIGFuZCBzcGVlY2guIEF0IGxhc3QsIGhvd2V2ZXIsIGFuZCB3aXRoIGRpZmZpY3VsdHksIHNoZSByZWdhaW5lZCBoZXIgc2Vuc2VzLCBhbmQgcGVyY2VpdmluZyB0aGF0IHRoZSBvY2Nhc2lvbiB3YXMgbm90IG9uZSBmb3IgdGVhcnMgYW5kIGxhbWVudGF0aW9ucywgc2hlIHJhbiBvdXQgdGhyb3VnaCB0aGUgY2l0eSB0byB0aGUgc2VhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['74.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSBtZXQgaGVyIGFuZCBjYXVnaHQgaGVyIGluIGhpcyBhcm1zIGFzIHNoZSB0b3R0ZXJlZCBhbmQgd2FzIGZhbGxpbmcuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHNlZSB0aGVlLDwvcT4gc2hlIGNyaWVkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aHVzYmFuZCwgbm90IGJ5IHRoeSBmb3J0dW5lLCBidXQgYnkgbWluZSwgcmVkdWNlZCB0byBvbmUgc21hbGwgdmVzc2VsLCB0aG91IHdobyBiZWZvcmUgdGh5IG1hcnJpYWdlIHdpdGggQ29ybmVsaWEgZGlkc3Qgc2FpbCB0aGlzIHNlYSB3aXRoIGZpdmUgaHVuZHJlZCBzaGlwcy4gV2h5IGhhc3QgdGhvdSBjb21lIHRvIHNlZSBtZSwgYW5kIHdoeSBkaWRzdCB0aG91IG5vdCBsZWF2ZSB0byBoZXIgY3J1ZWwgZGVzdGlueSBvbmUgd2hvIGhhcyBpbmZlY3RlZCB0aGVlIGFsc28gd2l0aCBhbiBldmlsIGZvcnR1bmUgc28gZ3JlYXQ/IFdoYXQgYSBoYXBweSB3b21hbiBJIGhhZCBiZWVuIGlmIEkgaGFkIGRpZWQgYmVmb3JlIGhlYXJpbmcgdGhhdCBQdWJsaXVzLCB3aG9zZSB2aXJnaW4gYnJpZGUgSSB3YXMsIHdhcyBzbGFpbiBhbW9uZyB0aGUgUGFydGhpYW5zISBBbmQgaG93IHdpc2UgaWYsIGV2ZW4gYWZ0ZXIgaGlzIGRlYXRoLCBhcyBJIGVzc2F5ZWQgdG8gZG8sIEkgaGFkIHB1dCBhbiBlbmQgdG8gbXkgb3duIGxpZmUhIEJ1dCBJIHdhcyBzcGFyZWQsIGl0IHNlZW1zLCB0byBicmluZyBydWluIGFsc28gdXBvbiBQb21wZXkgdGhlIEdyZWF0LjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijc1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gc3Bha2UgQ29ybmVsaWEsIGFzIHdlIGFyZSB0b2xkLCBhbmQgUG9tcGV5IGFuc3dlcmVkLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgdHJ1ZSwgQ29ybmVsaWEsIHRob3UgaGFzdCBrbm93biBidXQgb25lIGZvcnR1bmUgdG8gYmUgbWluZSwgdGhlIGJldHRlciBvbmUsIGFuZCB0aGlzIGhhcyBwZXJoYXBzIGRlY2VpdmVkIHRoZWUgdG9vLCBhcyB3ZWxsIGFzIG1lLCBpbiB0aGF0IGl0IHJlbWFpbmVkIHdpdGggbWUgbG9uZ2VyIHRoYW4gaXMgY3VzdG9tYXJ5LiBCdXQgdGhpcyByZXZlcnNlIGFsc28gd2UgbXVzdCBiZWFyLCBzaW5jZSB3ZSBhcmUgbW9ydGFscywgYW5kIHdlIG11c3Qgc3RpbGwgcHV0IGZvcnR1bmUgdG8gdGhlIHRlc3QuIEZvciBJIGNhbiBoYXZlIHNvbWUgaG9wZSBvZiByaXNpbmcgYWdhaW4gZnJvbSB0aGlzIGxvdyBlc3RhdGUgdG8gbXkgZm9ybWVyIGhpZ2ggZXN0YXRlLCBzaW5jZSBJIGZlbGwgZnJvbSB0aGF0IHRvIHRoaXMuPC9xPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['75.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gc3Bha2UgQ29ybmVsaWEsIGFzIHdlIGFyZSB0b2xkLCBhbmQgUG9tcGV5IGFuc3dlcmVkLCBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBpcyB0cnVlLCBDb3JuZWxpYSwgdGhvdSBoYXN0IGtub3duIGJ1dCBvbmUgZm9ydHVuZSB0byBiZSBtaW5lLCB0aGUgYmV0dGVyIG9uZSwgYW5kIHRoaXMgaGFzIHBlcmhhcHMgZGVjZWl2ZWQgdGhlZSB0b28sIGFzIHdlbGwgYXMgbWUsIGluIHRoYXQgaXQgcmVtYWluZWQgd2l0aCBtZSBsb25nZXIgdGhhbiBpcyBjdXN0b21hcnkuIEJ1dCB0aGlzIHJldmVyc2UgYWxzbyB3ZSBtdXN0IGJlYXIsIHNpbmNlIHdlIGFyZSBtb3J0YWxzLCBhbmQgd2UgbXVzdCBzdGlsbCBwdXQgZm9ydHVuZSB0byB0aGUgdGVzdC4gRm9yIEkgY2FuIGhhdmUgc29tZSBob3BlIG9mIHJpc2luZyBhZ2FpbiBmcm9tIHRoaXMgbG93IGVzdGF0ZSB0byBteSBmb3JtZXIgaGlnaCBlc3RhdGUsIHNpbmNlIEkgZmVsbCBmcm9tIHRoYXQgdG8gdGhpcy48L3E+IAoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgd2lmZSwgYWNjb3JkaW5nbHksIHNlbnQgZm9yIGhlciBnb29kcyBhbmQgc2VydmFudHMgZnJvbSB0aGUgY2l0eTsgYW5kIHRob3VnaCB0aGUgTWl0eWxlbmFlYW5zIGdhdmUgUG9tcGV5IGEgd2VsY29tZSBhbmQgaW52aXRlZCBoaW0gdG8gZW50ZXIgdGhlaXIgY2l0eSwgaGUgd291bGQgbm90IGNvbnNlbnQgdG8gZG8gc28sIGJ1dCBiYWRlIHRoZW0gYWxzbyB0byBzdWJtaXQgdG8gdGhlIGNvbnF1ZXJvciwgYW5kIHRvIGJlIG9mIGdvb2QgaGVhcnQsIGZvciBDYWVzYXIgd2FzIGh1bWFuZSBhbmQgbWVyY2lmdWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYsIGhvd2V2ZXIsIHR1cm5pbmcgdG8gQ3JhdGlwcHVzIHRoZSBwaGlsb3NvcGhlciwgd2hvIGhhZCBjb21lIGRvd24gZnJvbSB0aGUgY2l0eSB0byBzZWUgaGltLCBjb21wbGFpbmVkIGFuZCBhcmd1ZWQgYnJpZWZseSB3aXRoIGhpbSBhYm91dCBQcm92aWRlbmNlLCBDcmF0aXBwdXMgeWllbGRpbmcgc29tZXdoYXQgdG8gaGlzIHJlYXNvbmluZyBhbmQgdHJ5aW5nIHRvIGxlYWQgaGltIG9uIHRvIGJldHRlciBob3BlcywgdGhhdCBoZSBtaWdodCBub3QgZ2l2ZSBoaW0gcGFpbiBieSBhcmd1aW5nIGFnYWluc3QgaGltIGF0IHN1Y2ggYSB0aW1lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiBQb21wZXkgcmFpc2VkIHF1ZXN0aW9ucyBhYm91dCBQcm92aWRlbmNlLCBDcmF0aXBwdXMgbWlnaHQgaGF2ZSBhbnN3ZXJlZCB0aGF0IHRoZSBzdGF0ZSBub3cgcmVxdWlyZWQgYSBtb25hcmNoeSBiZWNhdXNlIGl0IHdhcyBzbyBiYWRseSBhZG1pbmlzdGVyZWQ7IGFuZCBoZSBtaWdodCBoYXZlIGFza2VkIFBvbXBleTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ib3csIE8gUG9tcGV5LCBhbmQgYnkgd2hhdCBldmlkZW5jZSwgY2FuIHdlIGJlIHBlcnN1YWRlZCB0aGF0IHRob3Ugd291bGRzdCBoYXZlIG1hZGUgYSBiZXR0ZXIgdXNlIG9mIGZvcnR1bmUgdGhhbiBDYWVzYXIsIGhhZHN0IHRob3UgZ290IHRoZSBtYXN0ZXJ5PzwvcT4gQnV0IHRoaXMgbWF0dGVyIG9mIHRoZSBkaXZpbmUgb3JkZXJpbmcgb2YgZXZlbnRzIG11c3QgYmUgbGVmdCB3aXRob3V0IGZ1cnRoZXIgZGlzY3Vzc2lvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TaW50ZW5zaXMgMiBmb2xsb3dzIEFteW90IGluIGluY2x1ZGluZyB0aGlzIGxhc3Qgc2VudGVuY2Ugd2l0aCB0aGUgd29yZHMgc3VwcG9zZWQgdG8gYmUgc3Bva2VuIGJ5IENyYXRpcHB1czogCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHRoZXNlIG1hdHRlcnMgbXVzdCBiZSBsZWZ0IHRvIHRoZSB3aWxsIG9mIHRoZSBnb2RzLjwvcT4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['75.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyB3aWZlLCBhY2NvcmRpbmdseSwgc2VudCBmb3IgaGVyIGdvb2RzIGFuZCBzZXJ2YW50cyBmcm9tIHRoZSBjaXR5OyBhbmQgdGhvdWdoIHRoZSBNaXR5bGVuYWVhbnMgZ2F2ZSBQb21wZXkgYSB3ZWxjb21lIGFuZCBpbnZpdGVkIGhpbSB0byBlbnRlciB0aGVpciBjaXR5LCBoZSB3b3VsZCBub3QgY29uc2VudCB0byBkbyBzbywgYnV0IGJhZGUgdGhlbSBhbHNvIHRvIHN1Ym1pdCB0byB0aGUgY29ucXVlcm9yLCBhbmQgdG8gYmUgb2YgZ29vZCBoZWFydCwgZm9yIENhZXNhciB3YXMgaHVtYW5lIGFuZCBtZXJjaWZ1bC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['75.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYsIGhvd2V2ZXIsIHR1cm5pbmcgdG8gQ3JhdGlwcHVzIHRoZSBwaGlsb3NvcGhlciwgd2hvIGhhZCBjb21lIGRvd24gZnJvbSB0aGUgY2l0eSB0byBzZWUgaGltLCBjb21wbGFpbmVkIGFuZCBhcmd1ZWQgYnJpZWZseSB3aXRoIGhpbSBhYm91dCBQcm92aWRlbmNlLCBDcmF0aXBwdXMgeWllbGRpbmcgc29tZXdoYXQgdG8gaGlzIHJlYXNvbmluZyBhbmQgdHJ5aW5nIHRvIGxlYWQgaGltIG9uIHRvIGJldHRlciBob3BlcywgdGhhdCBoZSBtaWdodCBub3QgZ2l2ZSBoaW0gcGFpbiBieSBhcmd1aW5nIGFnYWluc3QgaGltIGF0IHN1Y2ggYSB0aW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['75.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIFBvbXBleSByYWlzZWQgcXVlc3Rpb25zIGFib3V0IFByb3ZpZGVuY2UsIENyYXRpcHB1cyBtaWdodCBoYXZlIGFuc3dlcmVkIHRoYXQgdGhlIHN0YXRlIG5vdyByZXF1aXJlZCBhIG1vbmFyY2h5IGJlY2F1c2UgaXQgd2FzIHNvIGJhZGx5IGFkbWluaXN0ZXJlZDsgYW5kIGhlIG1pZ2h0IGhhdmUgYXNrZWQgUG9tcGV5OiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SG93LCBPIFBvbXBleSwgYW5kIGJ5IHdoYXQgZXZpZGVuY2UsIGNhbiB3ZSBiZSBwZXJzdWFkZWQgdGhhdCB0aG91IHdvdWxkc3QgaGF2ZSBtYWRlIGEgYmV0dGVyIHVzZSBvZiBmb3J0dW5lIHRoYW4gQ2Flc2FyLCBoYWRzdCB0aG91IGdvdCB0aGUgbWFzdGVyeT88L3E+IEJ1dCB0aGlzIG1hdHRlciBvZiB0aGUgZGl2aW5lIG9yZGVyaW5nIG9mIGV2ZW50cyBtdXN0IGJlIGxlZnQgd2l0aG91dCBmdXJ0aGVyIGRpc2N1c3Npb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TaW50ZW5zaXMgMiBmb2xsb3dzIEFteW90IGluIGluY2x1ZGluZyB0aGlzIGxhc3Qgc2VudGVuY2Ugd2l0aCB0aGUgd29yZHMgc3VwcG9zZWQgdG8gYmUgc3Bva2VuIGJ5IENyYXRpcHB1czogCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgdGhlc2UgbWF0dGVycyBtdXN0IGJlIGxlZnQgdG8gdGhlIHdpbGwgb2YgdGhlIGdvZHMuPC9xPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHRoZXNlIG1hdHRlcnMgbXVzdCBiZSBsZWZ0IHRvIHRoZSB3aWxsIG9mIHRoZSBnb2RzLjwvcT4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijc2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGFraW5nIG9uIGJvYXJkIGhpcyB3aWZlIGFuZCBoaXMgZnJpZW5kcywgUG9tcGV5IHdlbnQgb24gaGlzIHdheSwgcHV0dGluZyBpbiBhdCBoYXJib3VycyBvbmx5IHdoZW4gaGUgd2FzIGNvbXBlbGxlZCB0byBnZXQgZm9vZCBvciB3YXRlciB0aGVyZS4gVGhlIGZpcnN0IGNpdHkgdGhhdCBoZSBlbnRlcmVkIHdhcyBBdHRhbGVpYSBpbiBQYW1waHlsaWE7IHRoZXJlIHNvbWUgdHJpcmVtZXMgZnJvbSBDaWxpY2lhIG1ldCBoaW0sIHNvbGRpZXJzIHdlcmUgYXNzZW1ibGVkIGZvciBoaW0sIGFuZCBoZSB3YXMgc3Vycm91bmRlZCBhZ2FpbiBieSBzZW5hdG9ycywgc2l4dHkgb2YgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T24gaGVhcmluZywgdG9vLCB0aGF0IGhpcyBmbGVldCBzdGlsbCBoZWxkIHRvZ2V0aGVyLCBhbmQgdGhhdCBDYXRvIGhhZCB0YWtlbiBtYW55IHNvbGRpZXJzIGFib2FyZCBhbmQgd2FzIGNyb3NzaW5nIHRoZSBzZWEgdG8gQWZyaWNhLCBoZSBsYW1lbnRlZCB0byBoaXMgZnJpZW5kcywgYmxhbWluZyBoaW1zZWxmIGZvciBoYXZpbmcgYmVlbiBmb3JjZWQgdG8gZG8gYmF0dGxlIHdpdGggaGlzIGxhbmQgZm9yY2VzLCB3aGlsZSBoZSBtYWRlIG5vIHVzZSBvZiBoaXMgbmF2eSwgd2hpY2ggd2FzIGluZGlzcHV0YWJseSBzdXBlcmlvciwgYW5kIGhhZCBub3QgZXZlbiBzdGF0aW9uZWQgaXQgYXQgYSBwb2ludCB3aGVyZSwgaWYgZGVmZWF0ZWQgb24gbGFuZCwgaGUgbWlnaHQgaGF2ZSBoYWQgdGhpcyBwb3dlcmZ1bCBmb3JjZSBjbG9zZSBhdCBoYW5kIGJ5IHNlYSB0byBtYWtlIGhpbSBhIG1hdGNoIGZvciBoaXMgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCwgaW4gdHJ1dGgsIFBvbXBleSBtYWRlIG5vIGdyZWF0ZXIgbWlzdGFrZSwgYW5kIENhZXNhciBzaG93ZWQgbm8gYWJsZXIgZ2VuZXJhbHNoaXAsIHRoYW4gaW4gcmVtb3ZpbmcgdGhlIGJhdHRsZSBzbyBmYXIgZnJvbSBuYXZhbCBhc3Npc3RhbmNlLiBIb3dldmVyLCBzaW5jZSBoZSB3YXMgY29tcGVsbGVkIHRvIGRlY2lkZSBhbmQgYWN0IGFzIGJlc3QgaGUgY291bGQgdW5kZXIgdGhlIGNpcmN1bXN0YW5jZXMsIGhlIHNlbnQgbWVzc2VuZ2VycyByb3VuZCB0byB0aGUgY2l0aWVzOyB0byBzb21lIGFsc28gaGUgc2FpbGVkIGFib3V0IGluIHBlcnNvbiwgYXNraW5nIGZvciBtb25leSBhbmQgbWFubmluZyBzaGlwcy4gQnV0IGZlYXJpbmcgdGhlIHF1aWNrbmVzcyBhbmQgc3BlZWQgb2YgaGlzIGVuZW15LCB3aG8gbWlnaHQgY29tZSB1cG9uIGhpbSBhbmQgc2VpemUgaGltIGJlZm9yZSBoZSB3YXMgcHJlcGFyZWQsIGhlIGJlZ2FuIHRvIGxvb2sgYWJvdXQgZm9yIGEgdGVtcG9yYXJ5IHJlZnVnZSBhbmQgcmV0cmVhdC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGFzIGhlIGRlbGliZXJhdGVkIHdpdGggaGlzIGZvbGxvd2VycywgdGhlcmUgYXBwZWFyZWQgdG8gYmUgbm8gcHJvdmluY2UgdG8gd2hpY2ggdGhleSBjb3VsZCBzYWZlbHkgZmx5LCBhbmQgYXMgZm9yIHRoZSBraW5nZG9tcywgaGUgaGltc2VsZiBleHByZXNzZWQgdGhlIG9waW5pb24gdGhhdCB0aGUgUGFydGhpYW4gd2FzIGJlc3QgYWJsZSBmb3IgdGhlIHByZXNlbnQgdG8gcmVjZWl2ZSBhbmQgcHJvdGVjdCB0aGVtIGluIHRoZWlyIHdlYWsgY29uZGl0aW9uLCBhbmQgbGF0ZXIgb24gdG8gc3RyZW5ndGhlbiB0aGVtIGFuZCBzZW5kIHRoZW0gZm9ydGggd2l0aCBhIGxhcmdlIGZvcmNlOyAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5vZiB0aGUgcmVzdCwgc29tZSB0dXJuZWQgdGhlaXIgdGhvdWdodHMgdG8gQWZyaWNhIGFuZCBKdWJhLiBCdXQgVGhlb3BoYW5lcyB0aGUgTGVzYmlhbiB0aG91Z2h0IGl0IGEgY3JhenkgdGhpbmcgZm9yIFBvbXBleSB0byBkZWNpZGUgYWdhaW5zdCBFZ3lwdCwgd2hpY2ggd2FzIG9ubHkgdGhyZWUgZGF5cycgc2FpbCBhd2F5LCBhbmQgUHRvbGVteSwgd2hvIHdhcyBhIG1lcmUgeW91dGggYW5kIGluZGVidGVkIHRvIFBvbXBleSBmb3IgZnJpZW5kc2hpcCBhbmQga2luZG5lc3Mgc2hvd24gaGlzIGZhdGhlciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5IaXMgZmF0aGVyIHdhcyBQdG9sZW15IEF1bGV0ZXMsIG1lbnRpb25lZCBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDkuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4bGl4LiA1PC9iaWJsPi4gSGUgaGFkIGJlZW4gcmVzdG9yZWQgdG8gaGlzIHRocm9uZSBpbiA1NSBCLkMuIHRocm91Z2ggUG9tcGV5J3MgaW5mbHVlbmNlLiBUaGUgc29uLCBQdG9sZW15IERpb255c2l1cywgbm93IGZpZnRlZW4geWVhcnMgb2YgYWdlLCBoYWQgYmVlbiBsZWZ0IGpvaW50IHJ1bGVyIG9mIEVneXB0IHdpdGggaGlzIHNpc3RlciwgQ2xlb3BhdHJhLjwvbm90ZT4gYW5kIHB1dCBoaW1zZWxmIGluIHRoZSBwb3dlciBvZiBQYXJ0aGlhbnMsIGEgbW9zdCB0cmVhY2hlcm91cyByYWNlOyB0byByZWZ1c2UgdG8gdGFrZSB0aGUgc2Vjb25kIHBsYWNlIHVuZGVyIGEgUm9tYW4gd2hvIGhhZCBiZWVuIGNvbm5lY3RlZCB3aXRoIGhpbSBieSBtYXJyaWFnZSwgYW5kIHRvIGJlIHNlY29uZCB0byBub25lIG90aGVyLCBuYXksIHRvIHJlZnVzZSBldmVuIHRvIG1ha2UgdHJpYWwgb2YgdGhhdCBSb21hbidzIG1vZGVyYXRpb24sIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpbnN0ZWFkIHRvIG1ha2UgQXJzYWNlcyBoaXMgbG9yZCBhbmQgbWFzdGVyLCBhIHRoaW5nIHdoaWNoIGV2ZW4gQ3Jhc3N1cyBjb3VsZCBub3QgYmUgbWFkZSB0byBkbyB3aGlsZSBoZSBsaXZlZDsgYW5kIHRvIGNhcnJ5IGEgeW91bmcgd2lmZSwgb2YgdGhlIGZhbWlseSBvZiBTY2lwaW8sIGFtb25nIEJhcmJhcmlhbnMgd2hvIG1lYXN1cmUgdGhlaXIgcG93ZXIgYnkgdGhlaXIgaW5zb2xlbmNlIGFuZCBsaWNlbnRpb3VzbmVzcywgd2hlcmUsIGV2ZW4gaWYgc2hlIHN1ZmZlciBubyBoYXJtLCBidXQgaXMgb25seSB0aG91Z2h0IHRvIGhhdmUgc3VmZmVyZWQgaGFybSwgaGVyIGZhdGUgaXMgYSB0ZXJyaWJsZSBvbmUsIHNpbmNlIHNoZSBoYXMgY29tZSBpbnRvIHRoZSBwb3dlciBvZiB0aG9zZSB3aG8gYXJlIGFibGUgdG8gZG8gaGVyIGhhcm0uIFRoaXMgY29uc2lkZXJhdGlvbiBhbG9uZSwgYXMgd2UgYXJlIHRvbGQsIGRpdmVydGVkIFBvbXBleSBmcm9tIGpvdXJuZXlpbmcgdG8gdGhlIEV1cGhyYXRlcywgaWYgaW5kZWVkIGl0IHdhcyBsb25nZXIgYW55IGNhbGN1bGF0aW9uIG9mIFBvbXBleSdzLCBhbmQgbm90IHJhdGhlciBhbiBldmlsIGdlbml1cywgdGhhdCB3YXMgZ3VpZGluZyBoaW0gb24gdGhpcyBsYXN0IGpvdXJuZXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['76.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGFraW5nIG9uIGJvYXJkIGhpcyB3aWZlIGFuZCBoaXMgZnJpZW5kcywgUG9tcGV5IHdlbnQgb24gaGlzIHdheSwgcHV0dGluZyBpbiBhdCBoYXJib3VycyBvbmx5IHdoZW4gaGUgd2FzIGNvbXBlbGxlZCB0byBnZXQgZm9vZCBvciB3YXRlciB0aGVyZS4gVGhlIGZpcnN0IGNpdHkgdGhhdCBoZSBlbnRlcmVkIHdhcyBBdHRhbGVpYSBpbiBQYW1waHlsaWE7IHRoZXJlIHNvbWUgdHJpcmVtZXMgZnJvbSBDaWxpY2lhIG1ldCBoaW0sIHNvbGRpZXJzIHdlcmUgYXNzZW1ibGVkIGZvciBoaW0sIGFuZCBoZSB3YXMgc3Vycm91bmRlZCBhZ2FpbiBieSBzZW5hdG9ycywgc2l4dHkgb2YgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['76.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIGhlYXJpbmcsIHRvbywgdGhhdCBoaXMgZmxlZXQgc3RpbGwgaGVsZCB0b2dldGhlciwgYW5kIHRoYXQgQ2F0byBoYWQgdGFrZW4gbWFueSBzb2xkaWVycyBhYm9hcmQgYW5kIHdhcyBjcm9zc2luZyB0aGUgc2VhIHRvIEFmcmljYSwgaGUgbGFtZW50ZWQgdG8gaGlzIGZyaWVuZHMsIGJsYW1pbmcgaGltc2VsZiBmb3IgaGF2aW5nIGJlZW4gZm9yY2VkIHRvIGRvIGJhdHRsZSB3aXRoIGhpcyBsYW5kIGZvcmNlcywgd2hpbGUgaGUgbWFkZSBubyB1c2Ugb2YgaGlzIG5hdnksIHdoaWNoIHdhcyBpbmRpc3B1dGFibHkgc3VwZXJpb3IsIGFuZCBoYWQgbm90IGV2ZW4gc3RhdGlvbmVkIGl0IGF0IGEgcG9pbnQgd2hlcmUsIGlmIGRlZmVhdGVkIG9uIGxhbmQsIGhlIG1pZ2h0IGhhdmUgaGFkIHRoaXMgcG93ZXJmdWwgZm9yY2UgY2xvc2UgYXQgaGFuZCBieSBzZWEgdG8gbWFrZSBoaW0gYSBtYXRjaCBmb3IgaGlzIGVuZW15LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['76.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCwgaW4gdHJ1dGgsIFBvbXBleSBtYWRlIG5vIGdyZWF0ZXIgbWlzdGFrZSwgYW5kIENhZXNhciBzaG93ZWQgbm8gYWJsZXIgZ2VuZXJhbHNoaXAsIHRoYW4gaW4gcmVtb3ZpbmcgdGhlIGJhdHRsZSBzbyBmYXIgZnJvbSBuYXZhbCBhc3Npc3RhbmNlLiBIb3dldmVyLCBzaW5jZSBoZSB3YXMgY29tcGVsbGVkIHRvIGRlY2lkZSBhbmQgYWN0IGFzIGJlc3QgaGUgY291bGQgdW5kZXIgdGhlIGNpcmN1bXN0YW5jZXMsIGhlIHNlbnQgbWVzc2VuZ2VycyByb3VuZCB0byB0aGUgY2l0aWVzOyB0byBzb21lIGFsc28gaGUgc2FpbGVkIGFib3V0IGluIHBlcnNvbiwgYXNraW5nIGZvciBtb25leSBhbmQgbWFubmluZyBzaGlwcy4gQnV0IGZlYXJpbmcgdGhlIHF1aWNrbmVzcyBhbmQgc3BlZWQgb2YgaGlzIGVuZW15LCB3aG8gbWlnaHQgY29tZSB1cG9uIGhpbSBhbmQgc2VpemUgaGltIGJlZm9yZSBoZSB3YXMgcHJlcGFyZWQsIGhlIGJlZ2FuIHRvIGxvb2sgYWJvdXQgZm9yIGEgdGVtcG9yYXJ5IHJlZnVnZSBhbmQgcmV0cmVhdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['76.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhcyBoZSBkZWxpYmVyYXRlZCB3aXRoIGhpcyBmb2xsb3dlcnMsIHRoZXJlIGFwcGVhcmVkIHRvIGJlIG5vIHByb3ZpbmNlIHRvIHdoaWNoIHRoZXkgY291bGQgc2FmZWx5IGZseSwgYW5kIGFzIGZvciB0aGUga2luZ2RvbXMsIGhlIGhpbXNlbGYgZXhwcmVzc2VkIHRoZSBvcGluaW9uIHRoYXQgdGhlIFBhcnRoaWFuIHdhcyBiZXN0IGFibGUgZm9yIHRoZSBwcmVzZW50IHRvIHJlY2VpdmUgYW5kIHByb3RlY3QgdGhlbSBpbiB0aGVpciB3ZWFrIGNvbmRpdGlvbiwgYW5kIGxhdGVyIG9uIHRvIHN0cmVuZ3RoZW4gdGhlbSBhbmQgc2VuZCB0aGVtIGZvcnRoIHdpdGggYSBsYXJnZSBmb3JjZTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['76.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPm9mIHRoZSByZXN0LCBzb21lIHR1cm5lZCB0aGVpciB0aG91Z2h0cyB0byBBZnJpY2EgYW5kIEp1YmEuIEJ1dCBUaGVvcGhhbmVzIHRoZSBMZXNiaWFuIHRob3VnaHQgaXQgYSBjcmF6eSB0aGluZyBmb3IgUG9tcGV5IHRvIGRlY2lkZSBhZ2FpbnN0IEVneXB0LCB3aGljaCB3YXMgb25seSB0aHJlZSBkYXlzJyBzYWlsIGF3YXksIGFuZCBQdG9sZW15LCB3aG8gd2FzIGEgbWVyZSB5b3V0aCBhbmQgaW5kZWJ0ZWQgdG8gUG9tcGV5IGZvciBmcmllbmRzaGlwIGFuZCBraW5kbmVzcyBzaG93biBoaXMgZmF0aGVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGlzIGZhdGhlciB3YXMgUHRvbGVteSBBdWxldGVzLCBtZW50aW9uZWQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDkuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4bGl4LiA1PC9iaWJsPi4gSGUgaGFkIGJlZW4gcmVzdG9yZWQgdG8gaGlzIHRocm9uZSBpbiA1NSBCLkMuIHRocm91Z2ggUG9tcGV5J3MgaW5mbHVlbmNlLiBUaGUgc29uLCBQdG9sZW15IERpb255c2l1cywgbm93IGZpZnRlZW4geWVhcnMgb2YgYWdlLCBoYWQgYmVlbiBsZWZ0IGpvaW50IHJ1bGVyIG9mIEVneXB0IHdpdGggaGlzIHNpc3RlciwgQ2xlb3BhdHJhLjwvbm90ZT4gYW5kIHB1dCBoaW1zZWxmIGluIHRoZSBwb3dlciBvZiBQYXJ0aGlhbnMsIGEgbW9zdCB0cmVhY2hlcm91cyByYWNlOyB0byByZWZ1c2UgdG8gdGFrZSB0aGUgc2Vjb25kIHBsYWNlIHVuZGVyIGEgUm9tYW4gd2hvIGhhZCBiZWVuIGNvbm5lY3RlZCB3aXRoIGhpbSBieSBtYXJyaWFnZSwgYW5kIHRvIGJlIHNlY29uZCB0byBub25lIG90aGVyLCBuYXksIHRvIHJlZnVzZSBldmVuIHRvIG1ha2UgdHJpYWwgb2YgdGhhdCBSb21hbidzIG1vZGVyYXRpb24sIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDkuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4bGl4LiA1PC9iaWJsPi4gSGUgaGFkIGJlZW4gcmVzdG9yZWQgdG8gaGlzIHRocm9uZSBpbiA1NSBCLkMuIHRocm91Z2ggUG9tcGV5J3MgaW5mbHVlbmNlLiBUaGUgc29uLCBQdG9sZW15IERpb255c2l1cywgbm93IGZpZnRlZW4geWVhcnMgb2YgYWdlLCBoYWQgYmVlbiBsZWZ0IGpvaW50IHJ1bGVyIG9mIEVneXB0IHdpdGggaGlzIHNpc3RlciwgQ2xlb3BhdHJhLjwvdHJhbnNsYXRpb24+"
translation['76.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpbnN0ZWFkIHRvIG1ha2UgQXJzYWNlcyBoaXMgbG9yZCBhbmQgbWFzdGVyLCBhIHRoaW5nIHdoaWNoIGV2ZW4gQ3Jhc3N1cyBjb3VsZCBub3QgYmUgbWFkZSB0byBkbyB3aGlsZSBoZSBsaXZlZDsgYW5kIHRvIGNhcnJ5IGEgeW91bmcgd2lmZSwgb2YgdGhlIGZhbWlseSBvZiBTY2lwaW8sIGFtb25nIEJhcmJhcmlhbnMgd2hvIG1lYXN1cmUgdGhlaXIgcG93ZXIgYnkgdGhlaXIgaW5zb2xlbmNlIGFuZCBsaWNlbnRpb3VzbmVzcywgd2hlcmUsIGV2ZW4gaWYgc2hlIHN1ZmZlciBubyBoYXJtLCBidXQgaXMgb25seSB0aG91Z2h0IHRvIGhhdmUgc3VmZmVyZWQgaGFybSwgaGVyIGZhdGUgaXMgYSB0ZXJyaWJsZSBvbmUsIHNpbmNlIHNoZSBoYXMgY29tZSBpbnRvIHRoZSBwb3dlciBvZiB0aG9zZSB3aG8gYXJlIGFibGUgdG8gZG8gaGVyIGhhcm0uIFRoaXMgY29uc2lkZXJhdGlvbiBhbG9uZSwgYXMgd2UgYXJlIHRvbGQsIGRpdmVydGVkIFBvbXBleSBmcm9tIGpvdXJuZXlpbmcgdG8gdGhlIEV1cGhyYXRlcywgaWYgaW5kZWVkIGl0IHdhcyBsb25nZXIgYW55IGNhbGN1bGF0aW9uIG9mIFBvbXBleSdzLCBhbmQgbm90IHJhdGhlciBhbiBldmlsIGdlbml1cywgdGhhdCB3YXMgZ3VpZGluZyBoaW0gb24gdGhpcyBsYXN0IGpvdXJuZXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvIHdoZW4gaXQgd2FzIGRlY2lkZWQgdGhhdCBoZSBzaG91bGQgZmx5IHRvIEVneXB0LCBoZSBzZXQgc2FpbCBmcm9tIEN5cHJ1cyBvbiBhIFNlbGV1Y2lhbiB0cmlyZW1lIHdpdGggaGlzIHdpZmUgKG9mIHRoZSByZXN0LCBzb21lIHNhaWxlZCBhbG9uZyB3aXRoIGhpbSBpbiBzaGlwcyBvZiB3YXIgbGlrZSBoaXMgb3duLCBhbmQgb3RoZXJzIGluIG1lcmNoYW50IHZlc3NlbHMpLCBhbmQgY3Jvc3NlZCB0aGUgc2VhIGluIHNhZmV0eTsgYnV0IG9uIGxlYXJuaW5nIHRoYXQgUHRvbGVteSB3YXMgcG9zdGVkIGF0IFBlbHVzaXVtIHdpdGggYW4gYXJteSwgbWFraW5nIHdhciB1cG9uIGhpcyBzaXN0ZXIsIGhlIHB1dCBpbiB0aGVyZSwgYW5kIHNlbnQgb24gYSBtZXNzZW5nZXIgdG8gYW5ub3VuY2UgaGlzIGFycml2YWwgdG8gdGhlIGtpbmcgYW5kIHRvIGFzayBoaXMgYWlkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIFB0b2xlbXkgd2FzIHF1aXRlIHlvdW5nOyBidXQgUG90aGVpbnVzLCB3aG8gbWFuYWdlZCBhbGwgaGlzIGFmZmFpcnMsIGFzc2VtYmxlZCBhIGNvdW5jaWwgb2YgdGhlIG1vc3QgaW5mbHVlbnRpYWwgbWVuIChhbmQgdGhvc2Ugd2VyZSBtb3N0IGluZmx1ZW50aWFsIHdob20gaGUgd2lzaGVkIHRvIGJlIHNvKSwgYW5kIGJhZGUgZWFjaCBvbmUgZ2l2ZSBoaXMgb3Bpbmlvbi4gSXQgd2FzIGNlcnRhaW5seSBhIGRyZWFkZnVsIHRoaW5nIHRoYXQgdGhlIGZhdGUgb2YgUG9tcGV5IHRoZSBHcmVhdCB3YXMgdG8gYmUgZGVjaWRlZCBieSBQb3RoZWludXMgdGhlIGV1bnVjaCwgYW5kIFRoZW9kb3R1cyBvZiBDaGlvcywgd2hvIHdhcyBhIGhpcmVkIHRlYWNoZXIgb2YgcmhldG9yaWMsIGFuZCBBY2hpbGxhcyB0aGUgRWd5cHRpYW47IGZvciB0aGVzZSB3ZXJlIHRoZSBjaGllZiBjb3Vuc2VsbG9ycyBvZiB0aGUga2luZyBhbW9uZyB0aGUgY2hhbWJlcmxhaW5zIGFuZCB0dXRvcnMgYWxzbyBnYXRoZXJlZCB0aGVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IHdhcyBzdWNoIGEgdHJpYnVuYWwncyB2ZXJkaWN0IHdoaWNoIFBvbXBleSwgdG9zc2luZyBhdCBhbmNob3Igc29tZSBkaXN0YW5jZSBvZmYgdGhlIHNob3JlLCB3YXMgd2FpdGluZyBmb3IsIGEgbWFuIHdobyB3b3VsZCBub3QgZGVpZ24gdG8gYmUgdW5kZXIgb2JsaWdhdGlvbnMgdG8gQ2Flc2FyIGZvciBoaXMgbGlmZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['77.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gd2hlbiBpdCB3YXMgZGVjaWRlZCB0aGF0IGhlIHNob3VsZCBmbHkgdG8gRWd5cHQsIGhlIHNldCBzYWlsIGZyb20gQ3lwcnVzIG9uIGEgU2VsZXVjaWFuIHRyaXJlbWUgd2l0aCBoaXMgd2lmZSAob2YgdGhlIHJlc3QsIHNvbWUgc2FpbGVkIGFsb25nIHdpdGggaGltIGluIHNoaXBzIG9mIHdhciBsaWtlIGhpcyBvd24sIGFuZCBvdGhlcnMgaW4gbWVyY2hhbnQgdmVzc2VscyksIGFuZCBjcm9zc2VkIHRoZSBzZWEgaW4gc2FmZXR5OyBidXQgb24gbGVhcm5pbmcgdGhhdCBQdG9sZW15IHdhcyBwb3N0ZWQgYXQgUGVsdXNpdW0gd2l0aCBhbiBhcm15LCBtYWtpbmcgd2FyIHVwb24gaGlzIHNpc3RlciwgaGUgcHV0IGluIHRoZXJlLCBhbmQgc2VudCBvbiBhIG1lc3NlbmdlciB0byBhbm5vdW5jZSBoaXMgYXJyaXZhbCB0byB0aGUga2luZyBhbmQgdG8gYXNrIGhpcyBhaWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['77.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgUHRvbGVteSB3YXMgcXVpdGUgeW91bmc7IGJ1dCBQb3RoZWludXMsIHdobyBtYW5hZ2VkIGFsbCBoaXMgYWZmYWlycywgYXNzZW1ibGVkIGEgY291bmNpbCBvZiB0aGUgbW9zdCBpbmZsdWVudGlhbCBtZW4gKGFuZCB0aG9zZSB3ZXJlIG1vc3QgaW5mbHVlbnRpYWwgd2hvbSBoZSB3aXNoZWQgdG8gYmUgc28pLCBhbmQgYmFkZSBlYWNoIG9uZSBnaXZlIGhpcyBvcGluaW9uLiBJdCB3YXMgY2VydGFpbmx5IGEgZHJlYWRmdWwgdGhpbmcgdGhhdCB0aGUgZmF0ZSBvZiBQb21wZXkgdGhlIEdyZWF0IHdhcyB0byBiZSBkZWNpZGVkIGJ5IFBvdGhlaW51cyB0aGUgZXVudWNoLCBhbmQgVGhlb2RvdHVzIG9mIENoaW9zLCB3aG8gd2FzIGEgaGlyZWQgdGVhY2hlciBvZiByaGV0b3JpYywgYW5kIEFjaGlsbGFzIHRoZSBFZ3lwdGlhbjsgZm9yIHRoZXNlIHdlcmUgdGhlIGNoaWVmIGNvdW5zZWxsb3JzIG9mIHRoZSBraW5nIGFtb25nIHRoZSBjaGFtYmVybGFpbnMgYW5kIHR1dG9ycyBhbHNvIGdhdGhlcmVkIHRoZXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['77.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3YXMgc3VjaCBhIHRyaWJ1bmFsJ3MgdmVyZGljdCB3aGljaCBQb21wZXksIHRvc3NpbmcgYXQgYW5jaG9yIHNvbWUgZGlzdGFuY2Ugb2ZmIHRoZSBzaG9yZSwgd2FzIHdhaXRpbmcgZm9yLCBhIG1hbiB3aG8gd291bGQgbm90IGRlaWduIHRvIGJlIHVuZGVyIG9ibGlnYXRpb25zIHRvIENhZXNhciBmb3IgaGlzIGxpZmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIG9waW5pb25zIG9mIHRoZSBvdGhlciBjb3Vuc2VsbG9ycyB3ZXJlIHNvIGZhciBkaXZlcmdlbnQgdGhhdCBzb21lIGFkdmlzZWQgdG8gZHJpdmUgUG9tcGV5IGF3YXksIGFuZCBvdGhlcnMgdG8gaW52aXRlIGhpbSBpbiBhbmQgcmVjZWl2ZSBoaW0uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFRoZW9kb3R1cywgbWFraW5nIGEgZGlzcGxheSBvZiBoaXMgcG93ZXJmdWwgc3BlZWNoIGFuZCByaGV0b3JpY2FsIGFydCwgc2V0IGZvcnRoIHRoYXQgbmVpdGhlciBjb3Vyc2Ugd2FzIHNhZmUgZm9yIHRoZW0sIGJ1dCB0aGF0IGlmIHRoZXkgcmVjZWl2ZWQgUG9tcGV5LCB0aGV5IHdvdWxkIGhhdmUgQ2Flc2FyIGZvciBhbiBlbmVteSBhbmQgUG9tcGV5IGZvciBhIG1hc3Rlcjsgd2hpbGUgaWYgdGhleSByZWplY3RlZCBoaW0sIFBvbXBleSB3b3VsZCBibGFtZSB0aGVtIGZvciBjYXN0aW5nIGhpbSBvZmYsIGFuZCBDYWVzYXIgZm9yIG1ha2luZyBoaW0gY29udGludWUgaGlzIHB1cnN1aXQ7IHRoZSBiZXN0IGNvdXJzZSwgdGhlcmVmb3JlLCB3YXMgdG8gc2VuZCBmb3IgdGhlIG1hbiBhbmQgcHV0IGhpbSB0byBkZWF0aCwgZm9yIGJ5IHNvIGRvaW5nIHRoZXkgd291bGQgZ3JhdGlmeSBDYWVzYXIgYW5kIGhhdmUgbm90aGluZyB0byBmZWFyIGZyb20gUG9tcGV5LiBUbyB0aGlzIGhlIHNtaWxpbmdseSBhZGRlZCwgd2UgYXJlIHRvbGQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QSBkZWFkIG1hbiBkb2VzIG5vdCBiaXRlLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['77.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBUaGVvZG90dXMsIG1ha2luZyBhIGRpc3BsYXkgb2YgaGlzIHBvd2VyZnVsIHNwZWVjaCBhbmQgcmhldG9yaWNhbCBhcnQsIHNldCBmb3J0aCB0aGF0IG5laXRoZXIgY291cnNlIHdhcyBzYWZlIGZvciB0aGVtLCBidXQgdGhhdCBpZiB0aGV5IHJlY2VpdmVkIFBvbXBleSwgdGhleSB3b3VsZCBoYXZlIENhZXNhciBmb3IgYW4gZW5lbXkgYW5kIFBvbXBleSBmb3IgYSBtYXN0ZXI7IHdoaWxlIGlmIHRoZXkgcmVqZWN0ZWQgaGltLCBQb21wZXkgd291bGQgYmxhbWUgdGhlbSBmb3IgY2FzdGluZyBoaW0gb2ZmLCBhbmQgQ2Flc2FyIGZvciBtYWtpbmcgaGltIGNvbnRpbnVlIGhpcyBwdXJzdWl0OyB0aGUgYmVzdCBjb3Vyc2UsIHRoZXJlZm9yZSwgd2FzIHRvIHNlbmQgZm9yIHRoZSBtYW4gYW5kIHB1dCBoaW0gdG8gZGVhdGgsIGZvciBieSBzbyBkb2luZyB0aGV5IHdvdWxkIGdyYXRpZnkgQ2Flc2FyIGFuZCBoYXZlIG5vdGhpbmcgdG8gZmVhciBmcm9tIFBvbXBleS4gVG8gdGhpcyBoZSBzbWlsaW5nbHkgYWRkZWQsIHdlIGFyZSB0b2xkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QSBkZWFkIG1hbiBkb2VzIG5vdCBiaXRlLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijc4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIGRldGVybWluZWQgdXBvbiB0aGlzIHBsYW4sIHRoZXkgZW50cnVzdGVkIHRoZSBleGVjdXRpb24gb2YgaXQgdG8gQWNoaWxsYXMuIFNvIGhlIHRvb2sgd2l0aCBoaW0gYSBjZXJ0YWluIFNlcHRpbWl1cywgd2hvIGhhZCBvbmNlIGJlZW4gYSB0cmlidW5lIG9mIFBvbXBleSdzLCBhbmQgU2Fsdml1cyBiZXNpZGVzLCBhIGNlbnR1cmlvbiwgd2l0aCB0aHJlZSBvciBmb3VyIHNlcnZhbnRzLCBhbmQgcHV0IG91dCB0b3dhcmRzIHRoZSBzaGlwIG9mIFBvbXBleS4gTm93LCBhbGwgdGhlIG1vc3QgZGlzdGluZ3Vpc2hlZCBvZiBQb21wZXkncyBmZWxsb3ctdm95YWdlcnMgaGFkIGNvbWUgYWJvYXJkIG9mIGhlciB0byBzZWUgd2hhdCB3YXMgZ29pbmcgb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIHRoZXkgc2F3IGEgcmVjZXB0aW9uIHRoYXQgd2FzIG5vdCByb3lhbCwgbm9yIHNwbGVuZGlkLCBub3IgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBob3BlcyBvZiBUaGVvcGhhbmVzLCBidXQgYSBmZXcgbWVuIHNhaWxpbmcgdXAgaW4gYSBzaW5nbGUgZmlzaGluZy1ib2F0LCB0aGV5IHZpZXdlZCB0aGlzIGxhY2sgb2YgcmVzcGVjdCB3aXRoIHN1c3BpY2lvbiwgYW5kIGFkdmlzZWQgUG9tcGV5IHRvIGhhdmUgaGlzIHNoaXAgcm93ZWQgYmFjayBpbnRvIHRoZSBvcGVuIHNlYSwgd2hpbGUgdGhleSB3ZXJlIGJleW9uZCByZWFjaCBvZiBtaXNzaWxlcy4gQnV0IG1lYW53aGlsZSB0aGUgYm9hdCBkcmV3IG5lYXIsIGFuZCBmaXJzdCBTZXB0aW1pdXMgcm9zZSB1cCBhbmQgYWRkcmVzc2VkIFBvbXBleSBpbiB0aGUgUm9tYW4gdG9uZ3VlIGFzIEltcGVyYXRvci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBBY2hpbGxhcyBzYWx1dGVkIGhpbSBpbiBHcmVlaywgYW5kIGludml0ZWQgaGltIHRvIGNvbWUgYWJvYXJkIHRoZSBib2F0LCB0ZWxsaW5nIGhpbSB0aGF0IHRoZSBzaGFsbG93cyB3ZXJlIGV4dGVuc2l2ZSwgYW5kIHRoYXQgdGhlIHNlYSwgd2hpY2ggaGFkIGEgc2FuZHkgYm90dG9tLCB3YXMgbm90IGRlZXAgZW5vdWdoIHRvIGZsb2F0IGEgdHJpcmVtZS4gQXQgdGhlIHNhbWUgdGltZSBzb21lIG9mIHRoZSByb3lhbCBzaGlwcyB3ZXJlIHNlZW4gdG8gYmUgdGFraW5nIHRoZWlyIGNyZXdzIGFib2FyZCwgYW5kIG1lbi1hdC1hcm1zIHdlcmUgb2NjdXB5aW5nIHRoZSBzaG9yZSwgc28gdGhhdCB0aGVyZSBzZWVtZWQgdG8gYmUgbm8gZXNjYXBlIGV2ZW4gaWYgdGhleSBjaGFuZ2VkIHRoZWlyIG1pbmRzOyBhbmQgYmVzaWRlcywgdGhpcyB2ZXJ5IGxhY2sgb2YgY29uZmlkZW5jZSBtaWdodCBnaXZlIHRoZSBtdXJkZXJlcnMgYW4gZXhjdXNlIGZvciB0aGVpciBjcmltZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGFmdGVyIGVtYnJhY2luZyBDb3JuZWxpYSwgd2hvIHdhcyBiZXdhaWxpbmcgaGlzIGFwcHJvYWNoaW5nIGRlYXRoLCBoZSBvcmRlcmVkIHR3byBjZW50dXJpb25zIHRvIGdvIGludG8gdGhlIGJvYXQgYmVmb3JlIGhpbSwgYmVzaWRlcyBQaGlsaXAsIG9uZSBvZiBoaXMgZnJlZWRtZW4sIGFuZCBhIHNlcnZhbnQgbmFtZWQgU2N5dGhlcywgYW5kIHdoaWxlIEFjaGlsbGFzIHdhcyBhbHJlYWR5IHN0cmV0Y2hpbmcgb3V0IGhpcyBoYW5kIHRvIGhpbSBmcm9tIHRoZSBib2F0LCB0dXJuZWQgdG93YXJkcyBoaXMgd2lmZSBhbmQgc29uIGFuZCByZXBlYXRlZCB0aGUgdmVyc2VzIG9mIFNvcGhvY2xlczrigJQgCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPldoYXRldmVyIG1hbiB1bnRvIGEgdHlyYW50IHRha2VzIGhpcyB3YXksIDwvbD4KCQkJCQkgICAgICAgICAgPGw+SGlzIHNsYXZlIGhlIGlzLCBldmVuIHRob3VnaCBhIGZyZWVtYW4gd2hlbiBoZSBnb2VzLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TmF1Y2ssIDx0aXRsZT5UcmFnLiBHcmFlYy4gRnJhZy4yPC90aXRsZT4gcC4gMzE2LiBUaGUgcmVjaXRhdGlvbiBvZiB0aGVzZSB2ZXJzZXMgaXMgYSBmZWF0dXJlIGNvbW1vbiBhbHNvIHRvIHRoZSBhY2NvdW50cyBvZiB0aGUgdHJhZ2VkeSBpbiBBcHBpYW4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDIuMTIuODQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpLiA4NDwvYmlibD4pIGFuZCBEaW8gQ2Fzc2l1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuQy4gNDIuNCI+eGxpaS4gNC48L2JpYmw+KS48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['78.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIGRldGVybWluZWQgdXBvbiB0aGlzIHBsYW4sIHRoZXkgZW50cnVzdGVkIHRoZSBleGVjdXRpb24gb2YgaXQgdG8gQWNoaWxsYXMuIFNvIGhlIHRvb2sgd2l0aCBoaW0gYSBjZXJ0YWluIFNlcHRpbWl1cywgd2hvIGhhZCBvbmNlIGJlZW4gYSB0cmlidW5lIG9mIFBvbXBleSdzLCBhbmQgU2Fsdml1cyBiZXNpZGVzLCBhIGNlbnR1cmlvbiwgd2l0aCB0aHJlZSBvciBmb3VyIHNlcnZhbnRzLCBhbmQgcHV0IG91dCB0b3dhcmRzIHRoZSBzaGlwIG9mIFBvbXBleS4gTm93LCBhbGwgdGhlIG1vc3QgZGlzdGluZ3Vpc2hlZCBvZiBQb21wZXkncyBmZWxsb3ctdm95YWdlcnMgaGFkIGNvbWUgYWJvYXJkIG9mIGhlciB0byBzZWUgd2hhdCB3YXMgZ29pbmcgb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['78.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIHRoZXkgc2F3IGEgcmVjZXB0aW9uIHRoYXQgd2FzIG5vdCByb3lhbCwgbm9yIHNwbGVuZGlkLCBub3IgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBob3BlcyBvZiBUaGVvcGhhbmVzLCBidXQgYSBmZXcgbWVuIHNhaWxpbmcgdXAgaW4gYSBzaW5nbGUgZmlzaGluZy1ib2F0LCB0aGV5IHZpZXdlZCB0aGlzIGxhY2sgb2YgcmVzcGVjdCB3aXRoIHN1c3BpY2lvbiwgYW5kIGFkdmlzZWQgUG9tcGV5IHRvIGhhdmUgaGlzIHNoaXAgcm93ZWQgYmFjayBpbnRvIHRoZSBvcGVuIHNlYSwgd2hpbGUgdGhleSB3ZXJlIGJleW9uZCByZWFjaCBvZiBtaXNzaWxlcy4gQnV0IG1lYW53aGlsZSB0aGUgYm9hdCBkcmV3IG5lYXIsIGFuZCBmaXJzdCBTZXB0aW1pdXMgcm9zZSB1cCBhbmQgYWRkcmVzc2VkIFBvbXBleSBpbiB0aGUgUm9tYW4gdG9uZ3VlIGFzIEltcGVyYXRvci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['78.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gQWNoaWxsYXMgc2FsdXRlZCBoaW0gaW4gR3JlZWssIGFuZCBpbnZpdGVkIGhpbSB0byBjb21lIGFib2FyZCB0aGUgYm9hdCwgdGVsbGluZyBoaW0gdGhhdCB0aGUgc2hhbGxvd3Mgd2VyZSBleHRlbnNpdmUsIGFuZCB0aGF0IHRoZSBzZWEsIHdoaWNoIGhhZCBhIHNhbmR5IGJvdHRvbSwgd2FzIG5vdCBkZWVwIGVub3VnaCB0byBmbG9hdCBhIHRyaXJlbWUuIEF0IHRoZSBzYW1lIHRpbWUgc29tZSBvZiB0aGUgcm95YWwgc2hpcHMgd2VyZSBzZWVuIHRvIGJlIHRha2luZyB0aGVpciBjcmV3cyBhYm9hcmQsIGFuZCBtZW4tYXQtYXJtcyB3ZXJlIG9jY3VweWluZyB0aGUgc2hvcmUsIHNvIHRoYXQgdGhlcmUgc2VlbWVkIHRvIGJlIG5vIGVzY2FwZSBldmVuIGlmIHRoZXkgY2hhbmdlZCB0aGVpciBtaW5kczsgYW5kIGJlc2lkZXMsIHRoaXMgdmVyeSBsYWNrIG9mIGNvbmZpZGVuY2UgbWlnaHQgZ2l2ZSB0aGUgbXVyZGVyZXJzIGFuIGV4Y3VzZSBmb3IgdGhlaXIgY3JpbWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['78.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhZnRlciBlbWJyYWNpbmcgQ29ybmVsaWEsIHdobyB3YXMgYmV3YWlsaW5nIGhpcyBhcHByb2FjaGluZyBkZWF0aCwgaGUgb3JkZXJlZCB0d28gY2VudHVyaW9ucyB0byBnbyBpbnRvIHRoZSBib2F0IGJlZm9yZSBoaW0sIGJlc2lkZXMgUGhpbGlwLCBvbmUgb2YgaGlzIGZyZWVkbWVuLCBhbmQgYSBzZXJ2YW50IG5hbWVkIFNjeXRoZXMsIGFuZCB3aGlsZSBBY2hpbGxhcyB3YXMgYWxyZWFkeSBzdHJldGNoaW5nIG91dCBoaXMgaGFuZCB0byBoaW0gZnJvbSB0aGUgYm9hdCwgdHVybmVkIHRvd2FyZHMgaGlzIHdpZmUgYW5kIHNvbiBhbmQgcmVwZWF0ZWQgdGhlIHZlcnNlcyBvZiBTb3Bob2NsZXM64oCUIAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdGV2ZXIgbWFuIHVudG8gYSB0eXJhbnQgdGFrZXMgaGlzIHdheSwgPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkhpcyBzbGF2ZSBoZSBpcywgZXZlbiB0aG91Z2ggYSBmcmVlbWFuIHdoZW4gaGUgZ29lcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdGV2ZXIgbWFuIHVudG8gYSB0eXJhbnQgdGFrZXMgaGlzIHdheSwgPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkhpcyBzbGF2ZSBoZSBpcywgZXZlbiB0aG91Z2ggYSBmcmVlbWFuIHdoZW4gaGUgZ29lcy48L2w+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TmF1Y2ssIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyYWcuIEdyYWVjLiBGcmFnLjI8L3RpdGxlPiBwLiAzMTYuIFRoZSByZWNpdGF0aW9uIG9mIHRoZXNlIHZlcnNlcyBpcyBhIGZlYXR1cmUgY29tbW9uIGFsc28gdG8gdGhlIGFjY291bnRzIG9mIHRoZSB0cmFnZWR5IGluIEFwcGlhbiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAyLjEyLjg0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpLiA4NDwvYmlibD4pIGFuZCBEaW8gQ2Fzc2l1cyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiA0Mi40Ij54bGlpLiA0LjwvYmlibD4pLjwvbm90ZT4KCQkJICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJhZy4gR3JhZWMuIEZyYWcuMjwvdGl0bGU+IHAuIDMxNi4gVGhlIHJlY2l0YXRpb24gb2YgdGhlc2UgdmVyc2VzIGlzIGEgZmVhdHVyZSBjb21tb24gYWxzbyB0byB0aGUgYWNjb3VudHMgb2YgdGhlIHRyYWdlZHkgaW4gQXBwaWFuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDIuMTIuODQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaWkuIDg0PC9iaWJsPikgYW5kIERpbyBDYXNzaXVzICg8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaWkuIDg0PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiA0Mi40Ij54bGlpLiA0LjwvYmlibD4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXNlIGxhc3Qgd29yZHMgdG8gaGlzIGZyaWVuZHMsIGhlIHdlbnQgaW50byB0aGUgYm9hdC4gQW5kIHNpbmNlIGl0IHdhcyBhIGxvbmcgZGlzdGFuY2UgZnJvbSB0aGUgdHJpcmVtZSB0byB0aGUgbGFuZCwgYW5kIG5vbmUgb2YgaGlzIGNvbXBhbmlvbnMgaW4gdGhlIGJvYXQgaGFkIGFueSBmcmllbmRseSB3b3JkIGZvciBoaW0sIHR1cm5pbmcgaGlzIGV5ZXMgdXBvbiBTZXB0aW1pdXMgaGUgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TdXJlbHkgSSBhbSBub3QgbWlzdGFrZW4sIGFuZCB5b3UgYXJlIGFuIG9sZCBjb21yYWRlIG9mIG1pbmUhPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNlcHRpbWl1cyBub2RkZWQgbWVyZWx5LCB3aXRob3V0IHNheWluZyBhbnl0aGluZyB0byBoaW0gb3Igc2hvd2luZyBhbnkgZnJpZW5kbGluZXNzLiBTbyB0aGVuLCBhcyB0aGVyZSB3YXMgcHJvZm91bmQgc2lsZW5jZSBhZ2FpbiwgUG9tcGV5IHRvb2sgYSBsaXR0bGUgcm9sbCBjb250YWluaW5nIGEgc3BlZWNoIHdyaXR0ZW4gYnkgaGltIGluIEdyZWVrLCB3aGljaCBoZSBoYWQgcHJlcGFyZWQgZm9yIGhpcyB1c2UgaW4gYWRkcmVzc2luZyBQdG9sZW15LCBhbmQgYmVnYW4gdG8gcmVhZCBpbiBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYXMgdGhleSBkcmV3IG5lYXIgdGhlIHNob3JlLCBDb3JuZWxpYSwgdG9nZXRoZXIgd2l0aCBoaXMgZnJpZW5kcywgc3Rvb2Qgb24gdGhlIHRyaXJlbWUgd2F0Y2hpbmcgd2l0aCBncmVhdCBhbnhpZXR5IGZvciB0aGUgb3V0Y29tZSwgYW5kIGJlZ2FuIHRvIHRha2UgaGVhcnQgd2hlbiBzaGUgc2F3IG1hbnkgb2YgdGhlIGtpbmcncyBwZW9wbGUgYXNzZW1ibGluZyBhdCB0aGUgbGFuZGluZyBhcyBpZiB0byBnaXZlIGhpbSBhbiBob25vdXJhYmxlIHdlbGNvbWUuIEJ1dCBhdCB0aGlzIHBvaW50LCB3aGlsZSBQb21wZXkgd2FzIGNsYXNwaW5nIHRoZSBoYW5kIG9mIFBoaWxpcCB0aGF0IGhlIG1pZ2h0IHJpc2UgdG8gaGlzIGZlZXQgbW9yZSBlYXNpbHksIFNlcHRpbWl1cywgZnJvbSBiZWhpbmQsIHJhbiBoaW0gdGhyb3VnaCB0aGUgYm9keSB3aXRoIGhpcyBzd29yZCwgdGhlbiBTYWx2aXVzIG5leHQsIGFuZCB0aGVuIEFjaGlsbGFzLCBkcmV3IHRoZWlyIGRhZ2dlcnMgYW5kIHN0YWJiZWQgaGltLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+SWJpIGFiIEFjaGlsbGEgZXQgU2VwdGltaW8gaW50ZXJmaWNpdHVyPC9mb3JlaWduPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy4xMDQiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlPkJlbGwuIENpdi48L3RpdGxlPiBpaWkuIDEwNDwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgUG9tcGV5LCBkcmF3aW5nIGhpcyB0b2dhIGRvd24gb3ZlciBoaXMgZmFjZSB3aXRoIGJvdGggaGFuZHMsIHdpdGhvdXQgYW4gYWN0IG9yIGEgd29yZCB0aGF0IHdhcyB1bndvcnRoeSBvZiBoaW1zZWxmLCBidXQgd2l0aCBhIGdyb2FuIG1lcmVseSwgc3VibWl0dGVkIHRvIHRoZWlyIGJsb3dzLCBiZWluZyBzaXh0eSB5ZWFycyBvZiBhZ2UgbGVzcyBvbmUsIGFuZCBlbmRpbmcgaGlzIGxpZmUgb25seSBvbmUgZGF5IGFmdGVyIGhpcyBiaXJ0aC1kYXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['79.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlc2UgbGFzdCB3b3JkcyB0byBoaXMgZnJpZW5kcywgaGUgd2VudCBpbnRvIHRoZSBib2F0LiBBbmQgc2luY2UgaXQgd2FzIGEgbG9uZyBkaXN0YW5jZSBmcm9tIHRoZSB0cmlyZW1lIHRvIHRoZSBsYW5kLCBhbmQgbm9uZSBvZiBoaXMgY29tcGFuaW9ucyBpbiB0aGUgYm9hdCBoYWQgYW55IGZyaWVuZGx5IHdvcmQgZm9yIGhpbSwgdHVybmluZyBoaXMgZXllcyB1cG9uIFNlcHRpbWl1cyBoZSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3VyZWx5IEkgYW0gbm90IG1pc3Rha2VuLCBhbmQgeW91IGFyZSBhbiBvbGQgY29tcmFkZSBvZiBtaW5lITwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['79.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNlcHRpbWl1cyBub2RkZWQgbWVyZWx5LCB3aXRob3V0IHNheWluZyBhbnl0aGluZyB0byBoaW0gb3Igc2hvd2luZyBhbnkgZnJpZW5kbGluZXNzLiBTbyB0aGVuLCBhcyB0aGVyZSB3YXMgcHJvZm91bmQgc2lsZW5jZSBhZ2FpbiwgUG9tcGV5IHRvb2sgYSBsaXR0bGUgcm9sbCBjb250YWluaW5nIGEgc3BlZWNoIHdyaXR0ZW4gYnkgaGltIGluIEdyZWVrLCB3aGljaCBoZSBoYWQgcHJlcGFyZWQgZm9yIGhpcyB1c2UgaW4gYWRkcmVzc2luZyBQdG9sZW15LCBhbmQgYmVnYW4gdG8gcmVhZCBpbiBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['79.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFzIHRoZXkgZHJldyBuZWFyIHRoZSBzaG9yZSwgQ29ybmVsaWEsIHRvZ2V0aGVyIHdpdGggaGlzIGZyaWVuZHMsIHN0b29kIG9uIHRoZSB0cmlyZW1lIHdhdGNoaW5nIHdpdGggZ3JlYXQgYW54aWV0eSBmb3IgdGhlIG91dGNvbWUsIGFuZCBiZWdhbiB0byB0YWtlIGhlYXJ0IHdoZW4gc2hlIHNhdyBtYW55IG9mIHRoZSBraW5nJ3MgcGVvcGxlIGFzc2VtYmxpbmcgYXQgdGhlIGxhbmRpbmcgYXMgaWYgdG8gZ2l2ZSBoaW0gYW4gaG9ub3VyYWJsZSB3ZWxjb21lLiBCdXQgYXQgdGhpcyBwb2ludCwgd2hpbGUgUG9tcGV5IHdhcyBjbGFzcGluZyB0aGUgaGFuZCBvZiBQaGlsaXAgdGhhdCBoZSBtaWdodCByaXNlIHRvIGhpcyBmZWV0IG1vcmUgZWFzaWx5LCBTZXB0aW1pdXMsIGZyb20gYmVoaW5kLCByYW4gaGltIHRocm91Z2ggdGhlIGJvZHkgd2l0aCBoaXMgc3dvcmQsIHRoZW4gU2Fsdml1cyBuZXh0LCBhbmQgdGhlbiBBY2hpbGxhcywgZHJldyB0aGVpciBkYWdnZXJzIGFuZCBzdGFiYmVkIGhpbS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5JYmkgYWIgQWNoaWxsYSBldCBTZXB0aW1pbyBpbnRlcmZpY2l0dXI8L2ZvcmVpZ24+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuMTA0IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBpaWkuIDEwNDwvYmlibD4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkliaSBhYiBBY2hpbGxhIGV0IFNlcHRpbWlvIGludGVyZmljaXR1cjwvZm9yZWlnbj4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy4xMDQiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpaS4gMTA0PC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+IGlpaS4gMTA0PC90cmFuc2xhdGlvbj4="
translation['79.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQb21wZXksIGRyYXdpbmcgaGlzIHRvZ2EgZG93biBvdmVyIGhpcyBmYWNlIHdpdGggYm90aCBoYW5kcywgd2l0aG91dCBhbiBhY3Qgb3IgYSB3b3JkIHRoYXQgd2FzIHVud29ydGh5IG9mIGhpbXNlbGYsIGJ1dCB3aXRoIGEgZ3JvYW4gbWVyZWx5LCBzdWJtaXR0ZWQgdG8gdGhlaXIgYmxvd3MsIGJlaW5nIHNpeHR5IHllYXJzIG9mIGFnZSBsZXNzIG9uZSwgYW5kIGVuZGluZyBoaXMgbGlmZSBvbmx5IG9uZSBkYXkgYWZ0ZXIgaGlzIGJpcnRoLWRheS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgcGVvcGxlIG9uIHRoZSBzaGlwcyBiZWhlbGQgdGhlIG11cmRlciwgdGhleSB1dHRlcmVkIGEgd2FpbGluZyBjcnkgdGhhdCBjb3VsZCBiZSBoZWFyZCBhcyBmYXIgYXMgdGhlIHNob3JlLCBhbmQgd2VpZ2hpbmcgYW5jaG9yIHF1aWNrbHksIHRvb2sgdG8gZmxpZ2h0LiBBbmQgYSBzdHJvbmcgd2luZCBjYW1lIHRvIHRoZWlyIGFpZCBhcyB0aGV5IHJhbiBvdXQgdG8gc2VhLCBzbyB0aGF0IHRoZSBFZ3lwdGlhbnMsIHRob3VnaCBkZXNpcm91cyBvZiBwdXJzdWluZywgdHVybmVkIGJhY2suIEJ1dCB0aGV5IGN1dCBvZmYgUG9tcGV5J3MgaGVhZCwgYW5kIHRocmV3IHRoZSByZXN0IG9mIGhpcyBib2R5IHVuY2xvdGhlZCBvdXQgb2YgdGhlIGJvYXQsIGFuZCBsZWZ0IGl0IGZvciB0aG9zZSB3aG8gY3JhdmVkIHNvIHBpdGlmdWwgYSBzaWdodC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+UGhpbGlwLCBob3dldmVyLCBzdGF5ZWQgYnkgdGhlIGJvZHksIHVudGlsIHN1Y2ggaGFkIHRha2VuIHRoZWlyIGZpbGwgb2YgZ2F6aW5nOyB0aGVuIGhlIHdhc2hlZCBpdCBpbiBzZWEtd2F0ZXIsIHdyYXBwZWQgaXQgaW4gYSB0dW5pYyBvZiBoaXMgb3duLCBhbmQgc2luY2UgaGUgaGFkIG5vIG90aGVyIHN1cHBseSwgc291Z2h0IGFsb25nIHRoZSBjb2FzdCB1bnRpbCBoZSBmb3VuZCB0aGUgcmVtbmFudHMgb2YgYSBzbWFsbCBmaXNoaW5nLWJvYXQsIG9sZCBzdHVmZiwgaW5kZWVkLCBidXQgc3VmZmljaWVudCB0byBmdXJuaXNoIGEgZnVuZXJhbCBweXJlIHRoYXQgd291bGQgYW5zd2VyIGZvciBhbiB1bmNsb3RoZWQgY29ycHNlLCBhbmQgdGhhdCB0b28gbm90IGVudGlyZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgaGUgd2FzIGdhdGhlcmluZyB0aGUgd29vZCBhbmQgYnVpbGRpbmcgdGhlIHB5cmUsIHRoZXJlIGNhbWUgdXAgYSBSb21hbiB3aG8gd2FzIG5vdyBhbiBvbGQgbWFuLCBidXQgd2hvIGluIGhpcyB5b3V0aCBoYWQgc2VydmVkIGhpcyBmaXJzdCBjYW1wYWlnbnMgd2l0aCBQb21wZXksIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldobyBhcnQgdGhvdSwgbXkgbWFuLCB0aGF0IHRoaW5rZXN0IHRvIGdpdmUgYnVyaWFsIHJpdGVzIHRvIFBvbXBleSB0aGUgR3JlYXQ/PC9xPiBBbmQgd2hlbiBQaGlsaXAgc2FpZCB0aGF0IGhlIHdhcyBoaXMgZnJlZWRtYW4sIHRoZSBtYW4gc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgdGhvdSBzaGFsdCBub3QgaGF2ZSB0aGlzIGhvbm91ciBhbGwgdG8gdGh5c2VsZjsgbGV0IG1lIHRvbyBzaGFyZSBpbiBhIHBpb3VzIHByaXZpbGVnZSB0aHVzIG9mZmVyZWQsIHRoYXQgSSBtYXkgbm90IGFsdG9nZXRoZXIgcmVncmV0IG15IHNvam91cm4gaW4gYSBmb3JlaWduIGxhbmQsIGlmIGluIHJlcXVpdGFsIGZvciBtYW55IGhhcmRzaGlwcyBJIGZpbmQgdGhpcyBoYXBwaW5lc3MgYXQgbGVhc3QsIHRvIHRvdWNoIHdpdGggbXkgaGFuZHMgYW5kIGFycmF5IGZvciBidXJpYWwgdGhlIGdyZWF0ZXN0IG9mIFJvbWFuIGltcGVyYXRvcnMuPC9xPiBTdWNoIHdlcmUgdGhlIG9ic2VxdWllcyBvZiBQb21wZXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbiB0aGUgZm9sbG93aW5nIGRheSBMdWNpdXMgTGVudHVsdXMsIGFzIGhlIGNhbWUgc2FpbGluZyBmcm9tIEN5cHJ1cyBhbmQgY29hc3RlZCBhbG9uZyB0aGUgc2hvcmUgbm90IGtub3dpbmcgd2hhdCBoYWQgaGFwcGVuZWQsIHNhdyBhIGZ1bmVyYWwgcHlyZSBhbmQgUGhpbGlwIHN0YW5kaW5nIGJlc2lkZSBpdCwgYW5kIGJlZm9yZSBoZSBoYWQgYmVlbiBzZWVuIGhpbXNlbGYgZXhjbGFpbWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldobywgcHJheSwgcmVzdHMgaGVyZSBhdCB0aGUgZW5kIG9mIGhpcyBhbGxvdHRlZCBkYXlzPzwvcT4gVGhlbiwgYWZ0ZXIgYSBzbGlnaHQgcGF1c2UgYW5kIHdpdGggYSBncm9hbiBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBwZXJoYXBzIGl0IGlzIHRob3UsIFBvbXBleSB0aGUgR3JlYXQhPC9xPiBBbmQgYWZ0ZXIgYSBsaXR0bGUgaGUgd2VudCBhc2hvcmUsIHdhcyBzZWl6ZWQsIGFuZCBwdXQgdG8gZGVhdGguCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['80.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgcGVvcGxlIG9uIHRoZSBzaGlwcyBiZWhlbGQgdGhlIG11cmRlciwgdGhleSB1dHRlcmVkIGEgd2FpbGluZyBjcnkgdGhhdCBjb3VsZCBiZSBoZWFyZCBhcyBmYXIgYXMgdGhlIHNob3JlLCBhbmQgd2VpZ2hpbmcgYW5jaG9yIHF1aWNrbHksIHRvb2sgdG8gZmxpZ2h0LiBBbmQgYSBzdHJvbmcgd2luZCBjYW1lIHRvIHRoZWlyIGFpZCBhcyB0aGV5IHJhbiBvdXQgdG8gc2VhLCBzbyB0aGF0IHRoZSBFZ3lwdGlhbnMsIHRob3VnaCBkZXNpcm91cyBvZiBwdXJzdWluZywgdHVybmVkIGJhY2suIEJ1dCB0aGV5IGN1dCBvZmYgUG9tcGV5J3MgaGVhZCwgYW5kIHRocmV3IHRoZSByZXN0IG9mIGhpcyBib2R5IHVuY2xvdGhlZCBvdXQgb2YgdGhlIGJvYXQsIGFuZCBsZWZ0IGl0IGZvciB0aG9zZSB3aG8gY3JhdmVkIHNvIHBpdGlmdWwgYSBzaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['80.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpcCwgaG93ZXZlciwgc3RheWVkIGJ5IHRoZSBib2R5LCB1bnRpbCBzdWNoIGhhZCB0YWtlbiB0aGVpciBmaWxsIG9mIGdhemluZzsgdGhlbiBoZSB3YXNoZWQgaXQgaW4gc2VhLXdhdGVyLCB3cmFwcGVkIGl0IGluIGEgdHVuaWMgb2YgaGlzIG93biwgYW5kIHNpbmNlIGhlIGhhZCBubyBvdGhlciBzdXBwbHksIHNvdWdodCBhbG9uZyB0aGUgY29hc3QgdW50aWwgaGUgZm91bmQgdGhlIHJlbW5hbnRzIG9mIGEgc21hbGwgZmlzaGluZy1ib2F0LCBvbGQgc3R1ZmYsIGluZGVlZCwgYnV0IHN1ZmZpY2llbnQgdG8gZnVybmlzaCBhIGZ1bmVyYWwgcHlyZSB0aGF0IHdvdWxkIGFuc3dlciBmb3IgYW4gdW5jbG90aGVkIGNvcnBzZSwgYW5kIHRoYXQgdG9vIG5vdCBlbnRpcmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['80.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHdhcyBnYXRoZXJpbmcgdGhlIHdvb2QgYW5kIGJ1aWxkaW5nIHRoZSBweXJlLCB0aGVyZSBjYW1lIHVwIGEgUm9tYW4gd2hvIHdhcyBub3cgYW4gb2xkIG1hbiwgYnV0IHdobyBpbiBoaXMgeW91dGggaGFkIHNlcnZlZCBoaXMgZmlyc3QgY2FtcGFpZ25zIHdpdGggUG9tcGV5LCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldobyBhcnQgdGhvdSwgbXkgbWFuLCB0aGF0IHRoaW5rZXN0IHRvIGdpdmUgYnVyaWFsIHJpdGVzIHRvIFBvbXBleSB0aGUgR3JlYXQ/PC9xPiBBbmQgd2hlbiBQaGlsaXAgc2FpZCB0aGF0IGhlIHdhcyBoaXMgZnJlZWRtYW4sIHRoZSBtYW4gc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCB0aG91IHNoYWx0IG5vdCBoYXZlIHRoaXMgaG9ub3VyIGFsbCB0byB0aHlzZWxmOyBsZXQgbWUgdG9vIHNoYXJlIGluIGEgcGlvdXMgcHJpdmlsZWdlIHRodXMgb2ZmZXJlZCwgdGhhdCBJIG1heSBub3QgYWx0b2dldGhlciByZWdyZXQgbXkgc29qb3VybiBpbiBhIGZvcmVpZ24gbGFuZCwgaWYgaW4gcmVxdWl0YWwgZm9yIG1hbnkgaGFyZHNoaXBzIEkgZmluZCB0aGlzIGhhcHBpbmVzcyBhdCBsZWFzdCwgdG8gdG91Y2ggd2l0aCBteSBoYW5kcyBhbmQgYXJyYXkgZm9yIGJ1cmlhbCB0aGUgZ3JlYXRlc3Qgb2YgUm9tYW4gaW1wZXJhdG9ycy48L3E+IFN1Y2ggd2VyZSB0aGUgb2JzZXF1aWVzIG9mIFBvbXBleS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['80.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbiB0aGUgZm9sbG93aW5nIGRheSBMdWNpdXMgTGVudHVsdXMsIGFzIGhlIGNhbWUgc2FpbGluZyBmcm9tIEN5cHJ1cyBhbmQgY29hc3RlZCBhbG9uZyB0aGUgc2hvcmUgbm90IGtub3dpbmcgd2hhdCBoYWQgaGFwcGVuZWQsIHNhdyBhIGZ1bmVyYWwgcHlyZSBhbmQgUGhpbGlwIHN0YW5kaW5nIGJlc2lkZSBpdCwgYW5kIGJlZm9yZSBoZSBoYWQgYmVlbiBzZWVuIGhpbXNlbGYgZXhjbGFpbWVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hvLCBwcmF5LCByZXN0cyBoZXJlIGF0IHRoZSBlbmQgb2YgaGlzIGFsbG90dGVkIGRheXM/PC9xPiBUaGVuLCBhZnRlciBhIHNsaWdodCBwYXVzZSBhbmQgd2l0aCBhIGdyb2FuIGhlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgcGVyaGFwcyBpdCBpcyB0aG91LCBQb21wZXkgdGhlIEdyZWF0ITwvcT4gQW5kIGFmdGVyIGEgbGl0dGxlIGhlIHdlbnQgYXNob3JlLCB3YXMgc2VpemVkLCBhbmQgcHV0IHRvIGRlYXRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgZW5kIG9mIFBvbXBleS4gQnV0IG5vdCBsb25nIGFmdGVyd2FyZHMgQ2Flc2FyIGNhbWUgdG8gRWd5cHQsIGFuZCBmb3VuZCBpdCBmaWxsZWQgd2l0aCB0aGlzIGdyZWF0IGRlZWQgb2YgYWJvbWluYXRpb24uIEZyb20gdGhlIG1hbiB3aG8gYnJvdWdodCBoaW0gUG9tcGV5J3MgaGVhZCBoZSB0dXJuZWQgYXdheSB3aXRoIGxvYXRoaW5nLCBhcyBmcm9tIGFuIGFzc2Fzc2luOyBhbmQgb24gcmVjZWl2aW5nIFBvbXBleSdzIHNlYWwtcmluZywgaGUgYnVyc3QgaW50byB0ZWFyczsgdGhlIGRldmljZSB3YXMgYSBsaW9uIGhvbGRpbmcgYSBzd29yZCBpbiBoaXMgcGF3cy4gQnV0IEFjaGlsbGFzIGFuZCBQb3RoZWludXMgaGUgcHV0IHRvIGRlYXRoLiBUaGUga2luZyBoaW1zZWxmLCBtb3Jlb3Zlciwgd2FzIGRlZmVhdGVkIGluIGJhdHRsZSBhbG9uZyB0aGUgcml2ZXIsIGFuZCBkaXNhcHBlYXJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlb2RvdHVzIHRoZSBzb3BoaXN0LCBob3dldmVyLCBlc2NhcGVkIHRoZSB2ZW5nZWFuY2Ugb2YgQ2Flc2FyOyBmb3IgaGUgZmxlZCBvdXQgb2YgRWd5cHQgYW5kIHdhbmRlcmVkIGFib3V0IGluIHdyZXRjaGVkbmVzcyBhbmQgaGF0ZWQgb2YgYWxsIG1lbi4gQnV0IE1hcmN1cyBCcnV0dXMsIGFmdGVyIGhlIGhhZCBzbGFpbiBDYWVzYXIgYW5kIGNvbWUgaW50byBwb3dlciwgZGlzY292ZXJlZCBoaW0gaW4gQXNpYSwgYW5kIHB1dCBoaW0gdG8gZGVhdGggd2l0aCBldmVyeSBwb3NzaWJsZSB0b3J0dXJlLiBUaGUgcmVtYWlucyBvZiBQb21wZXkgd2VyZSB0YWtlbiB0byBDb3JuZWxpYSwgd2hvIGdhdmUgdGhlbSBidXJpYWwgYXQgaGlzIEFsYmFuIHZpbGxhLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
translation['80.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBlbmQgb2YgUG9tcGV5LiBCdXQgbm90IGxvbmcgYWZ0ZXJ3YXJkcyBDYWVzYXIgY2FtZSB0byBFZ3lwdCwgYW5kIGZvdW5kIGl0IGZpbGxlZCB3aXRoIHRoaXMgZ3JlYXQgZGVlZCBvZiBhYm9taW5hdGlvbi4gRnJvbSB0aGUgbWFuIHdobyBicm91Z2h0IGhpbSBQb21wZXkncyBoZWFkIGhlIHR1cm5lZCBhd2F5IHdpdGggbG9hdGhpbmcsIGFzIGZyb20gYW4gYXNzYXNzaW47IGFuZCBvbiByZWNlaXZpbmcgUG9tcGV5J3Mgc2VhbC1yaW5nLCBoZSBidXJzdCBpbnRvIHRlYXJzOyB0aGUgZGV2aWNlIHdhcyBhIGxpb24gaG9sZGluZyBhIHN3b3JkIGluIGhpcyBwYXdzLiBCdXQgQWNoaWxsYXMgYW5kIFBvdGhlaW51cyBoZSBwdXQgdG8gZGVhdGguIFRoZSBraW5nIGhpbXNlbGYsIG1vcmVvdmVyLCB3YXMgZGVmZWF0ZWQgaW4gYmF0dGxlIGFsb25nIHRoZSByaXZlciwgYW5kIGRpc2FwcGVhcmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
