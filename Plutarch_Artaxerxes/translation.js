var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkN5cnVzIHRvb2sgaGlzIG5hbWUgZnJvbSBDeXJ1cyBvZiBvbGQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DeXJ1cyB0aGUgRWxkZXIsIDU1OS01MjkgQi5DLjwvbm90ZT4gd2hvLCBhcyB0aGV5IHNheSwgd2FzIG5hbWVkIGZyb20gdGhlIHN1bjsgZm9yIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DeXJ1czwvcT4gaXMgdGhlIFBlcnNpYW4gd29yZCBmb3IgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5zdW48L2VtcGg+LiBBcnRheGVyeGVzIHdhcyBhdCBmaXJzdCBjYWxsZWQgQXJzaWNhczsgYWx0aG91Z2ggRGVpbm9uIGdpdmVzIHRoZSBuYW1lIGFzIE9hcnNlcy4gQnV0IGl0IGlzIHVubGlrZWx5IHRoYXQgQ3Rlc2lhcywgZXZlbiBpZiBiZSBoYXMgcHV0IGludG8gaGlzIHdvcmsgYSBwZXJmZWN0IGZhcnJhZ28gb2YgZXh0cmF2YWdhbnQgYW5kIGluY3JlZGlibGUgdGFsZXMsIHNob3VsZCBiZSBpZ25vcmFudCBvZiB0aGUgbmFtZSBvZiB0aGUga2luZyBhdCB3aG9zZSBjb3VydCBoZSBsaXZlZCBhcyBwaHlzaWNpYW4gdG8gdGhlIGtpbmcncyB3aWZlIGFuZCBtb3RoZXIgYW5kIGNoaWxkcmVuLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBDeXJ1cywgZnJvbSBoaXMgdmVyeSBlYXJsaWVzdCB5ZWFycywgd2FzIGhpZ2gtc3RydW5nIGFuZCBpbXBldHVvdXMsIGJ1dCBBcnRheGVyeGVzIHNlZW1lZCBnZW50bGVyIGluIGV2ZXJ5dGhpbmcgYW5kIG5hdHVyYWxseSBtaWxkZXIgaW4gaGlzIGltcHVsc2VzLiBIaXMgd2lmZSwgYSBiZWF1dGlmdWwgYW5kIGV4Y2VsbGVudCB3b21hbiwgaGUgbWFycmllZCBpbiBjb21wbGlhbmNlIHdpdGggaGlzIHBhcmVudHMnIGJpZGRpbmcsIGFuZCBrZXB0IGhlciBpbiBkZWZpYW5jZSBvZiB0aGVtOyBmb3IgYWZ0ZXIgdGhlIGtpbmcgaGFkIHB1dCBoZXIgYnJvdGhlciB0byBkZWF0aCwgaGUgd2lzaGVkIHRvIGtpbGwgaGVyIGFsc28uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBcnNpY2FzLCB0aHJvd2luZyBoaW1zZWxmIGF0IGhpcyBtb3RoZXIncyBmZWV0IGFuZCBzdXBwbGljYXRpbmcgaGVyIHdpdGggbWFueSB0ZWFycywgYXQgbGFzdCBvYnRhaW5lZCBoZXIgcHJvbWlzZSB0aGF0IGhpcyB3aWZlIHNob3VsZCBuZWl0aGVyIGJlIGtpbGxlZCBub3Igc2VwYXJhdGVkIGZyb20gaGltLiBCdXQgdGhlIG1vdGhlciBoYWQgbW9yZSBsb3ZlIGZvciBDeXJ1cywgYW5kIHdpc2hlZCB0aGF0IGhlIHNob3VsZCBzdWNjZWVkIHRvIHRoZSB0aHJvbmUuIFRoZXJlZm9yZSwgd2hlbiBoaXMgZmF0aGVyIHdhcyBub3cgbHlpbmcgc2ljaywgQ3lydXMgd2FzIHN1bW1vbmVkIGhvbWUgZnJvbSB0aGUgc2VhLWNvYXN0LCBhbmQgd2VudCB1cCBpbiBmdWxsIGhvcGUgdGhhdCBieSBoaXMgbW90aGVyJ3MgZWZmb3J0cyBoZSBoYWQgYmVlbiBkZXNpZ25hdGVkIGFzIHN1Y2Nlc3NvciB0byB0aGUga2luZ2RvbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIFBhcnlzYXRpcyBoYWQgYSBzcGVjaW91cyBhcmd1bWVudCAodGhlIHNhbWUgdGhhdCBYZXJ4ZXMgdGhlIEVsZGVyIGVtcGxveWVkIG9uIHRoZSBhZHZpY2Ugb2YgRGVtYXJhdHVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDcuMyIgdmFsaWQ9InllcyI+SGVyb2RvdHVzLCB2aWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+KSwgdG8gdGhlIGVmZmVjdCB0aGF0IHNoZSBoYWQgYm9ybmUgQXJzaWNhcyB0byBEYXJlaXVzIHdoZW4gaGUgd2FzIGluIHByaXZhdGUgc3RhdGlvbiwgYnV0IEN5cnVzIHdoZW4gaGUgd2FzIGEga2luZy4gSG93ZXZlciwgc2hlIGNvdWxkIG5vdCBwcmV2YWlsLCBidXQgdGhlIGVsZGVyIHNvbiB3YXMgZGVjbGFyZWQga2luZywgdW5kZXIgdGhlIG5ldyBuYW1lIG9mIEFydGF4ZXJ4ZXMsIHdoaWxlIEN5cnVzIHJlbWFpbmVkIHNhdHJhcCBvZiBMeWRpYSBhbmQgY29tbWFuZGVyIG9mIHRoZSBmb3JjZXMgaW4gdGhlIG1hcml0aW1lIHByb3ZpbmNlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMS4xLjEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGU+QW5hYi48L3RpdGxlPiBpLiAxLCAxIGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgQ3lydXMsIGZyb20gaGlzIHZlcnkgZWFybGllc3QgeWVhcnMsIHdhcyBoaWdoLXN0cnVuZyBhbmQgaW1wZXR1b3VzLCBidXQgQXJ0YXhlcnhlcyBzZWVtZWQgZ2VudGxlciBpbiBldmVyeXRoaW5nIGFuZCBuYXR1cmFsbHkgbWlsZGVyIGluIGhpcyBpbXB1bHNlcy4gSGlzIHdpZmUsIGEgYmVhdXRpZnVsIGFuZCBleGNlbGxlbnQgd29tYW4sIGhlIG1hcnJpZWQgaW4gY29tcGxpYW5jZSB3aXRoIGhpcyBwYXJlbnRzJyBiaWRkaW5nLCBhbmQga2VwdCBoZXIgaW4gZGVmaWFuY2Ugb2YgdGhlbTsgZm9yIGFmdGVyIHRoZSBraW5nIGhhZCBwdXQgaGVyIGJyb3RoZXIgdG8gZGVhdGgsIGhlIHdpc2hlZCB0byBraWxsIGhlciBhbHNvLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBcnNpY2FzLCB0aHJvd2luZyBoaW1zZWxmIGF0IGhpcyBtb3RoZXIncyBmZWV0IGFuZCBzdXBwbGljYXRpbmcgaGVyIHdpdGggbWFueSB0ZWFycywgYXQgbGFzdCBvYnRhaW5lZCBoZXIgcHJvbWlzZSB0aGF0IGhpcyB3aWZlIHNob3VsZCBuZWl0aGVyIGJlIGtpbGxlZCBub3Igc2VwYXJhdGVkIGZyb20gaGltLiBCdXQgdGhlIG1vdGhlciBoYWQgbW9yZSBsb3ZlIGZvciBDeXJ1cywgYW5kIHdpc2hlZCB0aGF0IGhlIHNob3VsZCBzdWNjZWVkIHRvIHRoZSB0aHJvbmUuIFRoZXJlZm9yZSwgd2hlbiBoaXMgZmF0aGVyIHdhcyBub3cgbHlpbmcgc2ljaywgQ3lydXMgd2FzIHN1bW1vbmVkIGhvbWUgZnJvbSB0aGUgc2VhLWNvYXN0LCBhbmQgd2VudCB1cCBpbiBmdWxsIGhvcGUgdGhhdCBieSBoaXMgbW90aGVyJ3MgZWZmb3J0cyBoZSBoYWQgYmVlbiBkZXNpZ25hdGVkIGFzIHN1Y2Nlc3NvciB0byB0aGUga2luZ2RvbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBQYXJ5c2F0aXMgaGFkIGEgc3BlY2lvdXMgYXJndW1lbnQgKHRoZSBzYW1lIHRoYXQgWGVyeGVzIHRoZSBFbGRlciBlbXBsb3llZCBvbiB0aGUgYWR2aWNlIG9mIERlbWFyYXR1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gNy4zIiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIHZpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4pLCB0byB0aGUgZWZmZWN0IHRoYXQgc2hlIGhhZCBib3JuZSBBcnNpY2FzIHRvIERhcmVpdXMgd2hlbiBoZSB3YXMgaW4gcHJpdmF0ZSBzdGF0aW9uLCBidXQgQ3lydXMgd2hlbiBoZSB3YXMgYSBraW5nLiBIb3dldmVyLCBzaGUgY291bGQgbm90IHByZXZhaWwsIGJ1dCB0aGUgZWxkZXIgc29uIHdhcyBkZWNsYXJlZCBraW5nLCB1bmRlciB0aGUgbmV3IG5hbWUgb2YgQXJ0YXhlcnhlcywgd2hpbGUgQ3lydXMgcmVtYWluZWQgc2F0cmFwIG9mIEx5ZGlhIGFuZCBjb21tYW5kZXIgb2YgdGhlIGZvcmNlcyBpbiB0aGUgbWFyaXRpbWUgcHJvdmluY2VzLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gNy4zIiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIHZpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMS4xLjEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDEsIDEgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMS4xLjEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDEsIDEgZmYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDEsIDEgZmYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIGxpdHRsZSB3aGlsZSBhZnRlciB0aGUgZGVhdGggb2YgRGFyZWl1cywgdGhlIG5ldyBraW5nIG1hZGUgYW4gZXhwZWRpdGlvbiB0byBQYXNhcmdhZGFlLCB0aGF0IGhlIG1pZ2h0IHJlY2VpdmUgdGhlIHJveWFsIGluaXRpYXRpb24gYXQgdGhlIGhhbmRzIG9mIHRoZSBQZXJzaWFuIHByaWVzdHMuIEhlcmUgdGhlcmUgaXMgYSBzYW5jdHVhcnkgb2YgYSB3YXJsaWtlIGdvZGRlc3Mgd2hvbSBvbmUgbWlnaHQgY29uamVjdHVyZSB0byBiZSBBdGhlbmEuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkludG8gdGhpcyBzYW5jdHVhcnkgdGhlIGNhbmRpZGF0ZSBmb3IgaW5pdGlhdGlvbiBtdXN0IHBhc3MsIGFuZCBhZnRlciBsYXlpbmcgYXNpZGUgaGlzIG93biBwcm9wZXIgcm9iZSwgbXVzdCBwdXQgb24gdGhhdCB3aGljaCBDeXJ1cyB0aGUgRWxkZXIgdXNlZCB0byB3ZWFyIGJlZm9yZSBoZSBiZWNhbWUga2luZyB0aGVuIGhlIG11c3QgZWF0IG9mIGEgY2FrZSBvZiBmaWdzLCBjaGV3IHNvbWUgdHVycGVudGluZS13b29kLCBhbmQgZHJpbmsgYSBjdXAgb2Ygc291ciBtaWxrLiBXaGF0ZXZlciBlbHNlIGlzIGRvbmUgYmVzaWRlcyB0aGlzIGlzIHVua25vd24gdG8gb3V0c2lkZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BcyBBcnRheGVyeGVzIHdhcyBhYm91dCB0byBwZXJmb3JtIHRoZXNlIHJpdGVzLCBUaXNzYXBoZXJuZXMgYnJvdWdodCB0byBoaW0gYSBjZXJ0YWluIHByaWVzdCB3aG8gaGFkIGNvbmR1Y3RlZCBDeXJ1cyB0aHJvdWdoIHRoZSBjdXN0b21hcnkgZGlzY2lwbGluZSBmb3IgYm95cywgaGFkIHRhdWdodCBoaW0gdGhlIHdpc2RvbSBvZiB0aGUgTWFnaSwgYW5kIHdhcyB0aG91Z2h0IHRvIGJlIG1vcmUgZGlzdHJlc3NlZCB0aGFuIGFueSBvbmUgaW4gUGVyc2lhIGJlY2F1c2UgaGlzIHB1cGlsIGhhZCBub3QgYmVlbiBkZWNsYXJlZCBraW5nLiBGb3IgdGhpcyByZWFzb24sIHRvbywgaGlzIGFjY3VzYXRpb24gYWdhaW5zdCBDeXJ1cyB3b24gY3JlZGVuY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBhY2N1c2VkIGhpbSBvZiBwbGFubmluZyB0byBsaWUgaW4gd2FpdCBmb3IgdGhlIGtpbmcgaW4gdGhlIHNhbmN0dWFyeSB1bnRpbCBoZSBzaG91bGQgcHV0IG9mZiBoaXMgZ2FybWVudCwgYW5kIHRoZW4gdG8gZmFsbCB1cG9uIGhpbSBhbmQga2lsbCBoaW0uIFNvbWUgc2F5IHRoYXQgQ3lydXMgd2FzIGFycmVzdGVkIGluIGNvbnNlcXVlbmNlIG9mIHRoaXMgZmFsc2UgY2hhcmdlLCBvdGhlcnMgdGhhdCBoZSBhY3R1YWxseSBtYWRlIGhpcyB3YXkgaW50byB0aGUgc2FuY3R1YXJ5IGFuZCBoaWQgaGltc2VsZiB0aGVyZSwgYW5kIHdhcyBkZWxpdmVyZWQgaW50byBjdXN0b2R5IGJ5IHRoZSBwcmllc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3csIGFzIGhlIHdhcyBhYm91dCB0byBiZSBwdXQgdG8gZGVhdGgsIGhpcyBtb3RoZXIgY2xhc3BlZCBoaW0gaW4gaGVyIGFybXMsIHR3aW5lZCBoZXIgdHJlc3NlcyBhYm91dCBoaW0sIHByZXNzZWQgaGlzIG5lY2sgYWdhaW5zdCBoZXIgb3duLCBhbmQgYnkgbXVjaCBsYW1lbnRhdGlvbiBhbmQgZW50cmVhdHkgcHJldmFpbGVkIHVwb24gdGhlIGtpbmcgdG8gc3BhcmUgaGltLCBhbmQgc2VudCBoaW0gYmFjayB0byB0aGUgc2VhLWNvYXN0LiBIZXJlIGhlIHdhcyBub3Qgc2F0aXNmaWVkIHdpdGggdGhlIG9mZmljZSBhc3NpZ25lZCB0byBoaW0sIG5vciBtaW5kZnVsIG9mIGhpcyByZWxlYXNlLCBidXQgb25seSBvZiBoaXMgYXJyZXN0OyBhbmQgaGlzIGFuZ2VyIG1hZGUgaGltIG1vcmUgZWFnZXIgdGhhbiBiZWZvcmUgdG8gc2VjdXJlIHRoZSBraW5nZG9tLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIGxpdHRsZSB3aGlsZSBhZnRlciB0aGUgZGVhdGggb2YgRGFyZWl1cywgdGhlIG5ldyBraW5nIG1hZGUgYW4gZXhwZWRpdGlvbiB0byBQYXNhcmdhZGFlLCB0aGF0IGhlIG1pZ2h0IHJlY2VpdmUgdGhlIHJveWFsIGluaXRpYXRpb24gYXQgdGhlIGhhbmRzIG9mIHRoZSBQZXJzaWFuIHByaWVzdHMuIEhlcmUgdGhlcmUgaXMgYSBzYW5jdHVhcnkgb2YgYSB3YXJsaWtlIGdvZGRlc3Mgd2hvbSBvbmUgbWlnaHQgY29uamVjdHVyZSB0byBiZSBBdGhlbmEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkludG8gdGhpcyBzYW5jdHVhcnkgdGhlIGNhbmRpZGF0ZSBmb3IgaW5pdGlhdGlvbiBtdXN0IHBhc3MsIGFuZCBhZnRlciBsYXlpbmcgYXNpZGUgaGlzIG93biBwcm9wZXIgcm9iZSwgbXVzdCBwdXQgb24gdGhhdCB3aGljaCBDeXJ1cyB0aGUgRWxkZXIgdXNlZCB0byB3ZWFyIGJlZm9yZSBoZSBiZWNhbWUga2luZyB0aGVuIGhlIG11c3QgZWF0IG9mIGEgY2FrZSBvZiBmaWdzLCBjaGV3IHNvbWUgdHVycGVudGluZS13b29kLCBhbmQgZHJpbmsgYSBjdXAgb2Ygc291ciBtaWxrLiBXaGF0ZXZlciBlbHNlIGlzIGRvbmUgYmVzaWRlcyB0aGlzIGlzIHVua25vd24gdG8gb3V0c2lkZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIEFydGF4ZXJ4ZXMgd2FzIGFib3V0IHRvIHBlcmZvcm0gdGhlc2Ugcml0ZXMsIFRpc3NhcGhlcm5lcyBicm91Z2h0IHRvIGhpbSBhIGNlcnRhaW4gcHJpZXN0IHdobyBoYWQgY29uZHVjdGVkIEN5cnVzIHRocm91Z2ggdGhlIGN1c3RvbWFyeSBkaXNjaXBsaW5lIGZvciBib3lzLCBoYWQgdGF1Z2h0IGhpbSB0aGUgd2lzZG9tIG9mIHRoZSBNYWdpLCBhbmQgd2FzIHRob3VnaHQgdG8gYmUgbW9yZSBkaXN0cmVzc2VkIHRoYW4gYW55IG9uZSBpbiBQZXJzaWEgYmVjYXVzZSBoaXMgcHVwaWwgaGFkIG5vdCBiZWVuIGRlY2xhcmVkIGtpbmcuIEZvciB0aGlzIHJlYXNvbiwgdG9vLCBoaXMgYWNjdXNhdGlvbiBhZ2FpbnN0IEN5cnVzIHdvbiBjcmVkZW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBhY2N1c2VkIGhpbSBvZiBwbGFubmluZyB0byBsaWUgaW4gd2FpdCBmb3IgdGhlIGtpbmcgaW4gdGhlIHNhbmN0dWFyeSB1bnRpbCBoZSBzaG91bGQgcHV0IG9mZiBoaXMgZ2FybWVudCwgYW5kIHRoZW4gdG8gZmFsbCB1cG9uIGhpbSBhbmQga2lsbCBoaW0uIFNvbWUgc2F5IHRoYXQgQ3lydXMgd2FzIGFycmVzdGVkIGluIGNvbnNlcXVlbmNlIG9mIHRoaXMgZmFsc2UgY2hhcmdlLCBvdGhlcnMgdGhhdCBoZSBhY3R1YWxseSBtYWRlIGhpcyB3YXkgaW50byB0aGUgc2FuY3R1YXJ5IGFuZCBoaWQgaGltc2VsZiB0aGVyZSwgYW5kIHdhcyBkZWxpdmVyZWQgaW50byBjdXN0b2R5IGJ5IHRoZSBwcmllc3QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3csIGFzIGhlIHdhcyBhYm91dCB0byBiZSBwdXQgdG8gZGVhdGgsIGhpcyBtb3RoZXIgY2xhc3BlZCBoaW0gaW4gaGVyIGFybXMsIHR3aW5lZCBoZXIgdHJlc3NlcyBhYm91dCBoaW0sIHByZXNzZWQgaGlzIG5lY2sgYWdhaW5zdCBoZXIgb3duLCBhbmQgYnkgbXVjaCBsYW1lbnRhdGlvbiBhbmQgZW50cmVhdHkgcHJldmFpbGVkIHVwb24gdGhlIGtpbmcgdG8gc3BhcmUgaGltLCBhbmQgc2VudCBoaW0gYmFjayB0byB0aGUgc2VhLWNvYXN0LiBIZXJlIGhlIHdhcyBub3Qgc2F0aXNmaWVkIHdpdGggdGhlIG9mZmljZSBhc3NpZ25lZCB0byBoaW0sIG5vciBtaW5kZnVsIG9mIGhpcyByZWxlYXNlLCBidXQgb25seSBvZiBoaXMgYXJyZXN0OyBhbmQgaGlzIGFuZ2VyIG1hZGUgaGltIG1vcmUgZWFnZXIgdGhhbiBiZWZvcmUgdG8gc2VjdXJlIHRoZSBraW5nZG9tLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgc2F5IHRoYXQgaGUgcmV2b2x0ZWQgZnJvbSB0aGUga2luZyBiZWNhdXNlIGhpcyBhbGxvd2FuY2UgZGlkIG5vdCBzdWZmaWNlIGZvciBoaXMgZGFpbHkgbWVhbHMsIHdoaWNoIGlzIGFic3VyZC4gRm9yIGhhZCBubyBvdGhlciByZXNvdXJjZSBiZWVuIGhpcywgc3RpbGwsIGhpcyBtb3RoZXIgd2FzIHJlc291cmNlIGVub3VnaCwgd2hvIGdhdmUgZnJlZWx5IGZyb20gaGVyIG93biB3ZWFsdGggYWxsIHRoYXQgaGUgd2lzaGVkIHRvIHRha2UgYW5kIHVzZS4gQW5kIHRoYXQgaGUgaGFkIHdlYWx0aCBpcyBwcm92ZWQgYnkgdGhlIG1lcmNlbmFyeSB0cm9vcHMgdGhhdCB3ZXJlIG1haW50YWluZWQgZm9yIGhpbSBpbiBtYW55IHBsYWNlcyBieSBoaXMgZnJpZW5kcyBhbmQgY29ubmVjdGlvbnMsIGFzIFhlbm9waG9uIHRlbGxzIHVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAxLjEuNiIgdmFsaWQ9InllcyI+QW5hYi4gaS4gMSwgNi0xMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gRm9yIGhlIGRpZCBub3QgYnJpbmcgdGhlc2UgdG9nZXRoZXIgaW50byBvbmUgYm9keSwgc2luY2UgaGUgd2FzIHN0aWxsIHRyeWluZyB0byBjb25jZWFsIGhpcyBwcmVwYXJhdGlvbnMsIGJ1dCBpbiBvbmUgcGxhY2UgYW5kIGFub3RoZXIsIGFuZCBvbiBtYW55IHByZXRleHRzLCBoZSBrZXB0IHJlY3J1aXRpbmctYWdlbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXMgZm9yIHRoZSBraW5nJ3Mgc3VzcGljaW9ucywgaGlzIG1vdGhlciwgd2hvIHdhcyBhdCBjb3VydCwgdHJpZWQgdG8gcmVtb3ZlIHRoZW0sIGFuZCBDeXJ1cyBoaW1zZWxmIHdvdWxkIGFsd2F5cyB3cml0ZSBpbiBhIHN1Ym1pc3NpdmUgdmVpbiwgc29tZXRpbWVzIGFza2luZyBmYXZvdXJzIGZyb20gaGltLCBhbmQgc29tZXRpbWVzIG1ha2luZyBjb3VudGVyY2hhcmdlcyBhZ2FpbnN0IFRpc3NhcGhlcm5lcyBhcyBpZiBoaXMgZWFnZXIgY29udGVudGlvbiB3ZXJlIGFnYWluc3QgaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIHNheSB0aGF0IGhlIHJldm9sdGVkIGZyb20gdGhlIGtpbmcgYmVjYXVzZSBoaXMgYWxsb3dhbmNlIGRpZCBub3Qgc3VmZmljZSBmb3IgaGlzIGRhaWx5IG1lYWxzLCB3aGljaCBpcyBhYnN1cmQuIEZvciBoYWQgbm8gb3RoZXIgcmVzb3VyY2UgYmVlbiBoaXMsIHN0aWxsLCBoaXMgbW90aGVyIHdhcyByZXNvdXJjZSBlbm91Z2gsIHdobyBnYXZlIGZyZWVseSBmcm9tIGhlciBvd24gd2VhbHRoIGFsbCB0aGF0IGhlIHdpc2hlZCB0byB0YWtlIGFuZCB1c2UuIEFuZCB0aGF0IGhlIGhhZCB3ZWFsdGggaXMgcHJvdmVkIGJ5IHRoZSBtZXJjZW5hcnkgdHJvb3BzIHRoYXQgd2VyZSBtYWludGFpbmVkIGZvciBoaW0gaW4gbWFueSBwbGFjZXMgYnkgaGlzIGZyaWVuZHMgYW5kIGNvbm5lY3Rpb25zLCBhcyBYZW5vcGhvbiB0ZWxscyB1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFuYWIuIDEuMS42IiB2YWxpZD0ieWVzIj5BbmFiLiBpLiAxLCA2LTExLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBGb3IgaGUgZGlkIG5vdCBicmluZyB0aGVzZSB0b2dldGhlciBpbnRvIG9uZSBib2R5LCBzaW5jZSBoZSB3YXMgc3RpbGwgdHJ5aW5nIHRvIGNvbmNlYWwgaGlzIHByZXBhcmF0aW9ucywgYnV0IGluIG9uZSBwbGFjZSBhbmQgYW5vdGhlciwgYW5kIG9uIG1hbnkgcHJldGV4dHMsIGhlIGtlcHQgcmVjcnVpdGluZy1hZ2VudHMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAxLjEuNiIgdmFsaWQ9InllcyI+QW5hYi4gaS4gMSwgNi0xMS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgdGhlIGtpbmcncyBzdXNwaWNpb25zLCBoaXMgbW90aGVyLCB3aG8gd2FzIGF0IGNvdXJ0LCB0cmllZCB0byByZW1vdmUgdGhlbSwgYW5kIEN5cnVzIGhpbXNlbGYgd291bGQgYWx3YXlzIHdyaXRlIGluIGEgc3VibWlzc2l2ZSB2ZWluLCBzb21ldGltZXMgYXNraW5nIGZhdm91cnMgZnJvbSBoaW0sIGFuZCBzb21ldGltZXMgbWFraW5nIGNvdW50ZXJjaGFyZ2VzIGFnYWluc3QgVGlzc2FwaGVybmVzIGFzIGlmIGhpcyBlYWdlciBjb250ZW50aW9uIHdlcmUgYWdhaW5zdCBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcywgdG9vLCBhIGNlcnRhaW4gZGlsYXRvcmluZXNzIGluIHRoZSBuYXR1cmUgb2YgdGhlIGtpbmcsIHdoaWNoIG1vc3QgcGVvcGxlIHRvb2sgZm9yIGNsZW1lbmN5LiBNb3Jlb3ZlciwgaW4gdGhlIGJlZ2lubmluZyBoZSBhcHBlYXJlZCB0byBiZSBhbHRvZ2V0aGVyIGVtdWxvdXMgb2YgdGhlIGdlbnRsZW5lc3Mgb2YgdGhlIEFydGF4ZXJ4ZXMgd2hvc2UgbmFtZSBoZSBib3JlLCBzaG93aW5nIGhpbXNlbGYgdmVyeSBhZ3JlZWFibGUgaW4gaW50ZXJjb3Vyc2UsIGFuZCBiZXN0b3dpbmcgZ3JlYXRlciBob25vdXJzIGFuZCBmYXZvdXJzIHRoYW4gd2VyZSByZWFsbHkgZGVzZXJ2ZWQsIHdoaWxlIGZyb20gYWxsIGhpcyBwdW5pc2htZW50cyBoZSB0b29rIGF3YXkgdGhlIGVsZW1lbnQgb2YgaW5zdWx0IG9yIHZpbmRpY3RpdmUgcGxlYXN1cmUsIGFuZCBpbiBoaXMgYWNjZXB0YW5jZSBhbmQgYmVzdG93YWwgb2YgZmF2b3VycyBhcHBlYXJlZCBubyBsZXNzIGdyYWNpb3VzIGFuZCBraW5kbHkgdG8gdGhlIGdpdmVycyB0aGFuIHRvIHRoZSByZWNpcGllbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlcmUgd2FzIG5vIGdpZnQgc28gc21hbGwgdGhhdCBoZSBkaWQgbm90IGFjY2VwdCBpdCB3aXRoIGFsYWNyaXR5OyBpbmRlZWQsIHdoZW4gYSBjZXJ0YWluIE9taXN1cyBicm91Z2h0IGhpbSBhIHNpbmdsZSBwb21lZ3JhbmF0ZSBvZiBzdXJwYXNzaW5nIHNpemUsIGhlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnkgTWl0aHJhLCB0aGlzIG1hbiB3b3VsZCBzcGVlZGlseSBtYWtlIGEgY2l0eSBncmVhdCBpbnN0ZWFkIG9mIHNtYWxsIHdlcmUgaGUgZW50cnVzdGVkIHdpdGggaXQuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcywgdG9vLCBhIGNlcnRhaW4gZGlsYXRvcmluZXNzIGluIHRoZSBuYXR1cmUgb2YgdGhlIGtpbmcsIHdoaWNoIG1vc3QgcGVvcGxlIHRvb2sgZm9yIGNsZW1lbmN5LiBNb3Jlb3ZlciwgaW4gdGhlIGJlZ2lubmluZyBoZSBhcHBlYXJlZCB0byBiZSBhbHRvZ2V0aGVyIGVtdWxvdXMgb2YgdGhlIGdlbnRsZW5lc3Mgb2YgdGhlIEFydGF4ZXJ4ZXMgd2hvc2UgbmFtZSBoZSBib3JlLCBzaG93aW5nIGhpbXNlbGYgdmVyeSBhZ3JlZWFibGUgaW4gaW50ZXJjb3Vyc2UsIGFuZCBiZXN0b3dpbmcgZ3JlYXRlciBob25vdXJzIGFuZCBmYXZvdXJzIHRoYW4gd2VyZSByZWFsbHkgZGVzZXJ2ZWQsIHdoaWxlIGZyb20gYWxsIGhpcyBwdW5pc2htZW50cyBoZSB0b29rIGF3YXkgdGhlIGVsZW1lbnQgb2YgaW5zdWx0IG9yIHZpbmRpY3RpdmUgcGxlYXN1cmUsIGFuZCBpbiBoaXMgYWNjZXB0YW5jZSBhbmQgYmVzdG93YWwgb2YgZmF2b3VycyBhcHBlYXJlZCBubyBsZXNzIGdyYWNpb3VzIGFuZCBraW5kbHkgdG8gdGhlIGdpdmVycyB0aGFuIHRvIHRoZSByZWNpcGllbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3YXMgbm8gZ2lmdCBzbyBzbWFsbCB0aGF0IGhlIGRpZCBub3QgYWNjZXB0IGl0IHdpdGggYWxhY3JpdHk7IGluZGVlZCwgd2hlbiBhIGNlcnRhaW4gT21pc3VzIGJyb3VnaHQgaGltIGEgc2luZ2xlIHBvbWVncmFuYXRlIG9mIHN1cnBhc3Npbmcgc2l6ZSwgaGUgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ5IE1pdGhyYSwgdGhpcyBtYW4gd291bGQgc3BlZWRpbHkgbWFrZSBhIGNpdHkgZ3JlYXQgaW5zdGVhZCBvZiBzbWFsbCB3ZXJlIGhlIGVudHJ1c3RlZCB3aXRoIGl0LjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbmNlIHdoZW4gaGUgd2FzIG9uIGEgam91cm5leSBhbmQgdmFyaW91cyBwZW9wbGUgd2VyZSBwcmVzZW50aW5nIGhpbSB3aXRoIHZhcmlvdXMgdGhpbmdzLCBhIGxhYm91cmluZyBtYW4sIHdobyBjb3VsZCBmaW5kIG5vdGhpbmcgZWxzZSBhdCB0aGUgbW9tZW50LCByYW4gdG8gdGhlIHJpdmVyLCBhbmQsIHRha2luZyBzb21lIG9mIHRoZSB3YXRlciBpbiBoaXMgaGFuZHMsIG9mZmVyZWQgaXQgdG8gaGltOyBhdCB3aGljaCBBcnRheGVyeGVzIHdhcyBzbyBwbGVhc2VkIHRoYXQgaGUgc2VudCBoaW0gYSBnb2JsZXQgb2YgZ29sZCBhbmQgYSB0aG91c2FuZCBkYXJpY3MuIFRvIEV1Y2xlaWRhcyB0aGUgTGFjZWRhZW1vbmlhbiwgd2hvIHdvdWxkIG9mdGVuIHNheSBib2xkIGFuZCBpbXB1ZGVudCB0aGluZ3MgdG8gaGltLCBoZSBzZW50IHRoaXMgd29yZCBieSBoaXMgb2ZmaWNlciBvZiB0aGUgZ3VhcmQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgaW4gdGh5IHBvd2VyIHRvIHNheSB3aGF0IHRob3UgcGxlYXNlc3QsIGJ1dCBpdCBpcyBpbiBtaW5lIGJvdGggdG8gc2F5IGFuZCB0byBkby48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIHdoZW4gaGUgd2FzIGh1bnRpbmcgb25jZSBhbmQgVGVyaWJhenVzIHBvaW50ZWQgb3V0IHRoYXQgdGhlIGtpbmcncyBjb2F0IHdhcyByZW50LCBoZSBhc2tlZCBoaW0gd2hhdCB3YXMgdG8gYmUgZG9uZS4gQW5kIHdoZW4gVGVyaWJhenVzIHJlcGxpZWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UHV0IG9uIGFub3RoZXIgZm9yIHRoeXNlbGYsIGJ1dCBnaXZlIHRoaXMgb25lIHRvIG1lLDwvcT4gdGhlIGtpbmcgZGlkIHNvLCBzYXlpbmcsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBnaXZlIHRoaXMgdG8gdGhlZSwgVGVyaWJhenVzLCBidXQgSSBmb3JiaWQgdGhlZSB0byB3ZWFyIGl0LjwvcT4gVGVyaWJhenVzIGdhdmUgbm8gaGVlZCB0byB0aGlzIGNvbW1hbmQgKGJlaW5nIG5vdCBhIGJhZCBtYW4sIGJ1dCByYXRoZXIgbGlnaHQtaGVhZGVkIGFuZCB3aXRsZXNzKSwgYW5kIGF0IG9uY2UgcHV0IG9uIHRoZSBraW5nJ3MgY29hdCwgYW5kIGRlY2tlZCBoaW1zZWxmIHdpdGggZ29sZGVuIG5lY2tsYWNlcyBhbmQgd29tZW4ncyBvcm5hbWVudHMgb2Ygcm95YWwgc3BsZW5kb3VyLiBFdmVyeWJvZHkgd2FzIGluZGlnbmFudCBhdCB0aGlzIChmb3IgaXQgd2FzIGEgZm9yYmlkZGVuIHRoaW5nKTsgYnV0IHRoZSBraW5nIG1lcmVseSBsYXVnaGVkLCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHBlcm1pdCB0aGVlIHRvIHdlYXIgdGhlIHRyaW5rZXRzIGFzIGEgd29tYW4sIGFuZCB0aGUgcm9iZSBhcyBhIG1hZG1hbi48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIG5vIG9uZSBzaGFyZWQgdGhlIHRhYmxlIG9mIGEgUGVyc2lhbiBraW5nIGV4Y2VwdCBoaXMgbW90aGVyIG9yIGhpcyB3ZWRkZWQgd2lmZSwgdGhlIHdpZmUgc2l0dGluZyBiZWxvdyBoaW0sIHRoZSBtb3RoZXIgYWJvdmUgaGltOyBidXQgQXJ0YXhlcnhlcyBpbnZpdGVkIHRvIHRoZSBzYW1lIHRhYmxlIHdpdGggaGltIGhpcyBicm90aGVycyBPc3RhbmVzIGFuZCBPeGF0aHJlcywgYWx0aG91Z2ggdGhleSB3ZXJlIGhpcyBqdW5pb3JzLiBCdXQgd2hhdCBncmF0aWZpZWQgdGhlIFBlcnNpYW5zIG1vc3Qgb2YgYWxsIHdhcyB0aGUgc2lnaHQgb2YgaGlzIHdpZmUgU3RhdGVpcmEncyBjYXJyaWFnZSwgd2hpY2ggYWx3YXlzIGFwcGVhcmVkIHdpdGggaXRzIGN1cnRhaW5zIHVwLCBhbmQgdGh1cyBwZXJtaXR0ZWQgdGhlIHdvbWVuIG9mIHRoZSBwZW9wbGUgdG8gYXBwcm9hY2ggYW5kIGdyZWV0IHRoZSBxdWVlbi4gVGhpcyBtYWRlIGhlciBiZWxvdmVkIG9mIHRoZSBjb21tb24gZm9say4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbmNlIHdoZW4gaGUgd2FzIG9uIGEgam91cm5leSBhbmQgdmFyaW91cyBwZW9wbGUgd2VyZSBwcmVzZW50aW5nIGhpbSB3aXRoIHZhcmlvdXMgdGhpbmdzLCBhIGxhYm91cmluZyBtYW4sIHdobyBjb3VsZCBmaW5kIG5vdGhpbmcgZWxzZSBhdCB0aGUgbW9tZW50LCByYW4gdG8gdGhlIHJpdmVyLCBhbmQsIHRha2luZyBzb21lIG9mIHRoZSB3YXRlciBpbiBoaXMgaGFuZHMsIG9mZmVyZWQgaXQgdG8gaGltOyBhdCB3aGljaCBBcnRheGVyeGVzIHdhcyBzbyBwbGVhc2VkIHRoYXQgaGUgc2VudCBoaW0gYSBnb2JsZXQgb2YgZ29sZCBhbmQgYSB0aG91c2FuZCBkYXJpY3MuIFRvIEV1Y2xlaWRhcyB0aGUgTGFjZWRhZW1vbmlhbiwgd2hvIHdvdWxkIG9mdGVuIHNheSBib2xkIGFuZCBpbXB1ZGVudCB0aGluZ3MgdG8gaGltLCBoZSBzZW50IHRoaXMgd29yZCBieSBoaXMgb2ZmaWNlciBvZiB0aGUgZ3VhcmQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBpcyBpbiB0aHkgcG93ZXIgdG8gc2F5IHdoYXQgdGhvdSBwbGVhc2VzdCwgYnV0IGl0IGlzIGluIG1pbmUgYm90aCB0byBzYXkgYW5kIHRvIGRvLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIGhlIHdhcyBodW50aW5nIG9uY2UgYW5kIFRlcmliYXp1cyBwb2ludGVkIG91dCB0aGF0IHRoZSBraW5nJ3MgY29hdCB3YXMgcmVudCwgaGUgYXNrZWQgaGltIHdoYXQgd2FzIHRvIGJlIGRvbmUuIEFuZCB3aGVuIFRlcmliYXp1cyByZXBsaWVkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UHV0IG9uIGFub3RoZXIgZm9yIHRoeXNlbGYsIGJ1dCBnaXZlIHRoaXMgb25lIHRvIG1lLDwvcT4gdGhlIGtpbmcgZGlkIHNvLCBzYXlpbmcsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGdpdmUgdGhpcyB0byB0aGVlLCBUZXJpYmF6dXMsIGJ1dCBJIGZvcmJpZCB0aGVlIHRvIHdlYXIgaXQuPC9xPiBUZXJpYmF6dXMgZ2F2ZSBubyBoZWVkIHRvIHRoaXMgY29tbWFuZCAoYmVpbmcgbm90IGEgYmFkIG1hbiwgYnV0IHJhdGhlciBsaWdodC1oZWFkZWQgYW5kIHdpdGxlc3MpLCBhbmQgYXQgb25jZSBwdXQgb24gdGhlIGtpbmcncyBjb2F0LCBhbmQgZGVja2VkIGhpbXNlbGYgd2l0aCBnb2xkZW4gbmVja2xhY2VzIGFuZCB3b21lbidzIG9ybmFtZW50cyBvZiByb3lhbCBzcGxlbmRvdXIuIEV2ZXJ5Ym9keSB3YXMgaW5kaWduYW50IGF0IHRoaXMgKGZvciBpdCB3YXMgYSBmb3JiaWRkZW4gdGhpbmcpOyBidXQgdGhlIGtpbmcgbWVyZWx5IGxhdWdoZWQsIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBwZXJtaXQgdGhlZSB0byB3ZWFyIHRoZSB0cmlua2V0cyBhcyBhIHdvbWFuLCBhbmQgdGhlIHJvYmUgYXMgYSBtYWRtYW4uPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBubyBvbmUgc2hhcmVkIHRoZSB0YWJsZSBvZiBhIFBlcnNpYW4ga2luZyBleGNlcHQgaGlzIG1vdGhlciBvciBoaXMgd2VkZGVkIHdpZmUsIHRoZSB3aWZlIHNpdHRpbmcgYmVsb3cgaGltLCB0aGUgbW90aGVyIGFib3ZlIGhpbTsgYnV0IEFydGF4ZXJ4ZXMgaW52aXRlZCB0byB0aGUgc2FtZSB0YWJsZSB3aXRoIGhpbSBoaXMgYnJvdGhlcnMgT3N0YW5lcyBhbmQgT3hhdGhyZXMsIGFsdGhvdWdoIHRoZXkgd2VyZSBoaXMganVuaW9ycy4gQnV0IHdoYXQgZ3JhdGlmaWVkIHRoZSBQZXJzaWFucyBtb3N0IG9mIGFsbCB3YXMgdGhlIHNpZ2h0IG9mIGhpcyB3aWZlIFN0YXRlaXJhJ3MgY2FycmlhZ2UsIHdoaWNoIGFsd2F5cyBhcHBlYXJlZCB3aXRoIGl0cyBjdXJ0YWlucyB1cCwgYW5kIHRodXMgcGVybWl0dGVkIHRoZSB3b21lbiBvZiB0aGUgcGVvcGxlIHRvIGFwcHJvYWNoIGFuZCBncmVldCB0aGUgcXVlZW4uIFRoaXMgbWFkZSBoZXIgYmVsb3ZlZCBvZiB0aGUgY29tbW9uIGZvbGsuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzLCByZXN0bGVzcyBhbmQgZmFjdGlvdXMgbWVuIHRob3VnaHQgdGhhdCBhZmZhaXJzIGRlbWFuZGVkIEN5cnVzLCBhIG1hbiB3aG8gaGFkIGEgYnJpbGxpYW50IHNwaXJpdCwgc3VycGFzc2luZyBza2lsbCBpbiB3YXIsIGFuZCBncmVhdCBsb3ZlIGZvciBoaXMgZnJpZW5kczsgYW5kIHRoYXQgdGhlIG1hZ25pdHVkZSBvZiB0aGUgZW1waXJlIHJlcXVpcmVkIGEga2luZyBvZiBsb2Z0eSBwdXJwb3NlIGFuZCBhbWJpdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIEN5cnVzIHJlbGllZCBxdWl0ZSBhcyBtdWNoIHVwb24gdGhlIHBlb3BsZSBvZiB0aGUgaW50ZXJpb3IgYXMgdXBvbiB0aG9zZSBvZiBoaXMgb3duIHByb3ZpbmNlIGFuZCBjb21tYW5kLCB3aGVuIGhlIGJlZ2FuIHRoZSB3YXIuIEhlIGFsc28gd3JvdGUgdG8gdGhlIExhY2VkYWVtb25pYW5zLCBpbnZpdGluZyB0aGVtIHRvIGFpZCBoaW0gYW5kIHNlbmQgaGltIG1lbiwgYW5kIHByb21pc2luZyB0aGF0IGhlIHdvdWxkIGdpdmUgdG8gdGhvc2Ugd2hvIGNhbWUsIGlmIHRoZXkgd2VyZSBmb290bWVuLCBob3JzZXM7IGlmIHRoZXkgd2VyZSBob3JzZW1lbiwgY2hhcmlvdHMgYW5kIHBhaXJzOyBpZiB0aGV5IGhhZCBmYXJtcywgaGUgd291bGQgZ2l2ZSB0aGVtIHZpbGxhZ2VzOyBpZiB0aGV5IGhhZCB2aWxsYWdlcywgY2l0aWVzOyBhbmQgdGhlIHBheSBvZiB0aGUgc29sZGllcnMgc2hvdWxkIG5vdCBiZSBjb3VudGVkLCBidXQgbWVhc3VyZWQgb3V0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgYWxvbmcgd2l0aCBtdWNoIGhpZ2gtc291bmRpbmcgdGFsayBhYm91dCBoaW1zZWxmLCBoZSBzYWlkIGhlIGNhcnJpZWQgYSBzdHVyZGllciBoZWFydCB0aGFuIGhpcyBicm90aGVyLCB3YXMgbW9yZSBvZiBhIHBoaWxvc29waGVyLCBiZXR0ZXIgdmVyc2VkIGluIHRoZSB3aXNkb20gb2YgdGhlIE1hZ2ksIGFuZCBjb3VsZCBkcmluayBhbmQgY2FycnkgbW9yZSB3aW5lIHRoYW4gaGUuIEhpcyBicm90aGVyLCBoZSBzYWlkLCB3YXMgdG9vIGVmZmVtaW5hdGUgYW5kIGNvd2FyZGx5IGVpdGhlciB0byBzaXQgaGlzIGhvcnNlIGluIGEgaHVudCwgb3IgaGlzIHRocm9uZSBpbiBhIHRpbWUgb2YgcGVyaWwuIFRoZSBMYWNlZGFlbW9uaWFucywgYWNjb3JkaW5nbHksIHNlbnQgYSBkaXNwYXRjaC1yb2xsIHRvIENsZWFyY2h1cyBvcmRlcmluZyBoaW0gdG8gZ2l2ZSBDeXJ1cyBldmVyeSBhc3Npc3RhbmNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAxLjEuOSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGkuIDEsIDk8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAxLjIuMjEiIHZhbGlkPSJ5ZXMiPjIsIDIxPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMS40LjMiIHZhbGlkPSJ5ZXMiPjQsIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U28gQ3lydXMgbWFyY2hlZCB1cCBhZ2FpbnN0IHRoZSBraW5nIHdpdGggYSBsYXJnZSBmb3JjZSBvZiBCYXJiYXJpYW5zIGFuZCBuZWFybHkgdGhpcnRlZW4gdGhvdXNhbmQgR3JlZWsgbWVyY2VuYXJpZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFuYWIuIDEuNy4xMCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGkuIDcsIDEwPC9iaWJsPiwgd2hlcmUgdGhlIGZvcmNlIG9mIEJhcmJhcmlhbnMgaXMgc2FpZCB0byBoYXZlIG51bWJlcmVkIG9uZSBodW5kcmVkIHRob3VzYW5kLjwvbm90ZT4gYWxsZWdpbmcgb25lIHByZXRleHQgYWZ0ZXIgYW5vdGhlciBmb3IgaGlzIGV4cGVkaXRpb24uIEJ1dCB0aGUgcmVhbCBvYmplY3Qgb2YgaXQgd2FzIG5vdCBsb25nIGNvbmNlYWxlZCwgZm9yIFRpc3NhcGhlcm5lcyB3ZW50IGluIHBlcnNvbiB0byB0aGUga2luZyBhbmQgaW5mb3JtZWQgaGltIG9mIGl0LiBUaGVuIHRoZXJlIHdhcyBhIGdyZWF0IGNvbW1vdGlvbiBhdCB0aGUgY291cnQsIFBhcnlzYXRpcyBiZWluZyBtb3N0IGJsYW1lZCBmb3IgdGhlIHdhciwgYW5kIGhlciBmcmllbmRzIHVuZGVyZ29pbmcgc3VzcGljaW9uIGFuZCBhY2N1c2F0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWJvdmUgYWxsIHdhcyBzaGUgdmV4ZWQgYnkgU3RhdGVpcmEsIHdobyB3YXMgZ3JlYXRseSBkaXN0cmVzc2VkIGF0IHRoZSB3YXIsIGFuZCBrZXB0IGNyeWluZzogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVyZSBub3cgYXJlIHRob3NlIHBsZWRnZXMgb2YgdGhpbmU/IEFuZCB3aGVyZSBhcmUgdGhlIGVudHJlYXRpZXMgYnkgd2hpY2ggdGhvdSBkaWRzdCByZXNjdWUgdGhlIG1hbiB3aG8gaGFkIHBsb3R0ZWQgYWdhaW5zdCB0aGUgbGlmZSBvZiBoaXMgYnJvdGhlciwgb25seSB0byBpbnZvbHZlIHVzIGluIHdhciBhbmQgY2FsYW1pdHk/PC9xPiBUaGVyZWZvcmUgUGFyeXNhdGlzIGhhdGVkIFN0YXRlaXJhLCBhbmQgYmVpbmcgbmF0dXJhbGx5IG9mIGEgaGFyc2ggdGVtcGVyIGFuZCBzYXZhZ2UgaW4gaGVyIHdyYXRoIGFuZCByZXNlbnRtZW50LCBzaGUgcGxvdHRlZCB0byBraWxsIGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+RGVpbm9uIHNheXMgdGhhdCBoZXIgcGxvdCB3YXMgY2FycmllZCBvdXQgZHVyaW5nIHRoZSB3YXIuIEN0ZXNpYXMsIGhvd2V2ZXIsIHNheXMgdGhhdCBpdCB3YXMgYWNjb21wbGlzaGVkIGFmdGVyd2FyZHMsIGFuZCBuZWl0aGVyIGlzIGl0IGxpa2VseSB0aGF0IGhlIHdhcyBpZ25vcmFudCBvZiB0aGUgdGltZSBzaW5jZSBoZSB3YXMgYXQgdGhlIHNjZW5lIG9mIGFjdGlvbiwgbm9yIGhhZCBoZSBhbnkgb2NjYXNpb24sIGluIGhpcyBuYXJyYXRpdmUgb2YgdGhlIGRlZWQsIHRvIGNoYW5nZSB0aGUgdGltZSBvZiBpdCBvbiBwdXJwb3NlLCBob3dldmVyIG9mdGVuIGhpcyBzdG9yeSB0dXJucyBhc2lkZSBmcm9tIHRoZSB0cnV0aCBpbnRvIGZhYmxlIGFuZCByb21hbmNlLiBJIHNoYWxsIHRoZXJlZm9yZSBnaXZlIHRoZSBldmVudCB0aGUgcGxhY2Ugd2hpY2ggaGUgaGFzIGFzc2lnbmVkIHRvIGl0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJ0LiAxOS4xIiB2YWxpZD0ieWVzIj5jaGFwLiB4aXguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5OZXZlcnRoZWxlc3MsIHJlc3RsZXNzIGFuZCBmYWN0aW91cyBtZW4gdGhvdWdodCB0aGF0IGFmZmFpcnMgZGVtYW5kZWQgQ3lydXMsIGEgbWFuIHdobyBoYWQgYSBicmlsbGlhbnQgc3Bpcml0LCBzdXJwYXNzaW5nIHNraWxsIGluIHdhciwgYW5kIGdyZWF0IGxvdmUgZm9yIGhpcyBmcmllbmRzOyBhbmQgdGhhdCB0aGUgbWFnbml0dWRlIG9mIHRoZSBlbXBpcmUgcmVxdWlyZWQgYSBraW5nIG9mIGxvZnR5IHB1cnBvc2UgYW5kIGFtYml0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBDeXJ1cyByZWxpZWQgcXVpdGUgYXMgbXVjaCB1cG9uIHRoZSBwZW9wbGUgb2YgdGhlIGludGVyaW9yIGFzIHVwb24gdGhvc2Ugb2YgaGlzIG93biBwcm92aW5jZSBhbmQgY29tbWFuZCwgd2hlbiBoZSBiZWdhbiB0aGUgd2FyLiBIZSBhbHNvIHdyb3RlIHRvIHRoZSBMYWNlZGFlbW9uaWFucywgaW52aXRpbmcgdGhlbSB0byBhaWQgaGltIGFuZCBzZW5kIGhpbSBtZW4sIGFuZCBwcm9taXNpbmcgdGhhdCBoZSB3b3VsZCBnaXZlIHRvIHRob3NlIHdobyBjYW1lLCBpZiB0aGV5IHdlcmUgZm9vdG1lbiwgaG9yc2VzOyBpZiB0aGV5IHdlcmUgaG9yc2VtZW4sIGNoYXJpb3RzIGFuZCBwYWlyczsgaWYgdGhleSBoYWQgZmFybXMsIGhlIHdvdWxkIGdpdmUgdGhlbSB2aWxsYWdlczsgaWYgdGhleSBoYWQgdmlsbGFnZXMsIGNpdGllczsgYW5kIHRoZSBwYXkgb2YgdGhlIHNvbGRpZXJzIHNob3VsZCBub3QgYmUgY291bnRlZCwgYnV0IG1lYXN1cmVkIG91dC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhbG9uZyB3aXRoIG11Y2ggaGlnaC1zb3VuZGluZyB0YWxrIGFib3V0IGhpbXNlbGYsIGhlIHNhaWQgaGUgY2FycmllZCBhIHN0dXJkaWVyIGhlYXJ0IHRoYW4gaGlzIGJyb3RoZXIsIHdhcyBtb3JlIG9mIGEgcGhpbG9zb3BoZXIsIGJldHRlciB2ZXJzZWQgaW4gdGhlIHdpc2RvbSBvZiB0aGUgTWFnaSwgYW5kIGNvdWxkIGRyaW5rIGFuZCBjYXJyeSBtb3JlIHdpbmUgdGhhbiBoZS4gSGlzIGJyb3RoZXIsIGhlIHNhaWQsIHdhcyB0b28gZWZmZW1pbmF0ZSBhbmQgY293YXJkbHkgZWl0aGVyIHRvIHNpdCBoaXMgaG9yc2UgaW4gYSBodW50LCBvciBoaXMgdGhyb25lIGluIGEgdGltZSBvZiBwZXJpbC4gVGhlIExhY2VkYWVtb25pYW5zLCBhY2NvcmRpbmdseSwgc2VudCBhIGRpc3BhdGNoLXJvbGwgdG8gQ2xlYXJjaHVzIG9yZGVyaW5nIGhpbSB0byBnaXZlIEN5cnVzIGV2ZXJ5IGFzc2lzdGFuY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAxLjEuOSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaS4gMSwgOTwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMS4yLjIxIiB2YWxpZD0ieWVzIj4yLCAyMTwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMS40LjMiIHZhbGlkPSJ5ZXMiPjQsIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFuYWIuIDEuMS45IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiAxLCA5PC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiAxLCA5PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAxLjIuMjEiIHZhbGlkPSJ5ZXMiPjIsIDIxPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAxLjQuMyIgdmFsaWQ9InllcyI+NCwgMy48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIEN5cnVzIG1hcmNoZWQgdXAgYWdhaW5zdCB0aGUga2luZyB3aXRoIGEgbGFyZ2UgZm9yY2Ugb2YgQmFyYmFyaWFucyBhbmQgbmVhcmx5IHRoaXJ0ZWVuIHRob3VzYW5kIEdyZWVrIG1lcmNlbmFyaWVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMS43LjEwIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiA3LCAxMDwvYmlibD4sIHdoZXJlIHRoZSBmb3JjZSBvZiBCYXJiYXJpYW5zIGlzIHNhaWQgdG8gaGF2ZSBudW1iZXJlZCBvbmUgaHVuZHJlZCB0aG91c2FuZC48L25vdGU+IGFsbGVnaW5nIG9uZSBwcmV0ZXh0IGFmdGVyIGFub3RoZXIgZm9yIGhpcyBleHBlZGl0aW9uLiBCdXQgdGhlIHJlYWwgb2JqZWN0IG9mIGl0IHdhcyBub3QgbG9uZyBjb25jZWFsZWQsIGZvciBUaXNzYXBoZXJuZXMgd2VudCBpbiBwZXJzb24gdG8gdGhlIGtpbmcgYW5kIGluZm9ybWVkIGhpbSBvZiBpdC4gVGhlbiB0aGVyZSB3YXMgYSBncmVhdCBjb21tb3Rpb24gYXQgdGhlIGNvdXJ0LCBQYXJ5c2F0aXMgYmVpbmcgbW9zdCBibGFtZWQgZm9yIHRoZSB3YXIsIGFuZCBoZXIgZnJpZW5kcyB1bmRlcmdvaW5nIHN1c3BpY2lvbiBhbmQgYWNjdXNhdGlvbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFuYWIuIDEuNy4xMCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaS4gNywgMTA8L2JpYmw+LCB3aGVyZSB0aGUgZm9yY2Ugb2YgQmFyYmFyaWFucyBpcyBzYWlkIHRvIGhhdmUgbnVtYmVyZWQgb25lIGh1bmRyZWQgdGhvdXNhbmQuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiA3LCAxMDwvdHJhbnNsYXRpb24+"
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhYm92ZSBhbGwgd2FzIHNoZSB2ZXhlZCBieSBTdGF0ZWlyYSwgd2hvIHdhcyBncmVhdGx5IGRpc3RyZXNzZWQgYXQgdGhlIHdhciwgYW5kIGtlcHQgY3J5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hlcmUgbm93IGFyZSB0aG9zZSBwbGVkZ2VzIG9mIHRoaW5lPyBBbmQgd2hlcmUgYXJlIHRoZSBlbnRyZWF0aWVzIGJ5IHdoaWNoIHRob3UgZGlkc3QgcmVzY3VlIHRoZSBtYW4gd2hvIGhhZCBwbG90dGVkIGFnYWluc3QgdGhlIGxpZmUgb2YgaGlzIGJyb3RoZXIsIG9ubHkgdG8gaW52b2x2ZSB1cyBpbiB3YXIgYW5kIGNhbGFtaXR5PzwvcT4gVGhlcmVmb3JlIFBhcnlzYXRpcyBoYXRlZCBTdGF0ZWlyYSwgYW5kIGJlaW5nIG5hdHVyYWxseSBvZiBhIGhhcnNoIHRlbXBlciBhbmQgc2F2YWdlIGluIGhlciB3cmF0aCBhbmQgcmVzZW50bWVudCwgc2hlIHBsb3R0ZWQgdG8ga2lsbCBoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkRlaW5vbiBzYXlzIHRoYXQgaGVyIHBsb3Qgd2FzIGNhcnJpZWQgb3V0IGR1cmluZyB0aGUgd2FyLiBDdGVzaWFzLCBob3dldmVyLCBzYXlzIHRoYXQgaXQgd2FzIGFjY29tcGxpc2hlZCBhZnRlcndhcmRzLCBhbmQgbmVpdGhlciBpcyBpdCBsaWtlbHkgdGhhdCBoZSB3YXMgaWdub3JhbnQgb2YgdGhlIHRpbWUgc2luY2UgaGUgd2FzIGF0IHRoZSBzY2VuZSBvZiBhY3Rpb24sIG5vciBoYWQgaGUgYW55IG9jY2FzaW9uLCBpbiBoaXMgbmFycmF0aXZlIG9mIHRoZSBkZWVkLCB0byBjaGFuZ2UgdGhlIHRpbWUgb2YgaXQgb24gcHVycG9zZSwgaG93ZXZlciBvZnRlbiBoaXMgc3RvcnkgdHVybnMgYXNpZGUgZnJvbSB0aGUgdHJ1dGggaW50byBmYWJsZSBhbmQgcm9tYW5jZS4gSSBzaGFsbCB0aGVyZWZvcmUgZ2l2ZSB0aGUgZXZlbnQgdGhlIHBsYWNlIHdoaWNoIGhlIGhhcyBhc3NpZ25lZCB0byBpdC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcnQuIDE5LjEiIHZhbGlkPSJ5ZXMiPmNoYXAuIHhpeC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJ0LiAxOS4xIiB2YWxpZD0ieWVzIj5jaGFwLiB4aXguPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIEN5cnVzIHByb2NlZWRlZCBvbiBoaXMgbWFyY2gsIHJ1bW91cnMgYW5kIHJlcG9ydHMga2VwdCBjb21pbmcgdG8gaGlzIGVhcnMgdGhhdCB0aGUga2luZyBoYWQgZGVjaWRlZCBub3QgdG8gZ2l2ZSBiYXR0bGUgYXQgb25jZSwgYW5kIHdhcyBub3QgZGVzaXJvdXMgb2YgY29taW5nIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggaGltLCBidXQgcmF0aGVyIG9mIHdhaXRpbmcgaW4gUGVyc2lhIHVudGlsIGhpcyBmb3JjZXMgc2hvdWxkIGFzc2VtYmxlIHRoZXJlIGZyb20gYWxsIHBhcnRzLiBGb3IgaGUgaGFkIHJ1biBhIHRyZW5jaCwgdGVuIGZhdGhvbXMgaW4gd2lkdGggYW5kIGFzIG1hbnkgaW4gZGVwdGgsIGZvdXIgaHVuZHJlZCBmdXJsb25ncyB0aHJvdWdoIHRoZSBwbGFpbjsgYW5kIHlldCBoZSBhbGxvd2VkIEN5cnVzIHRvIGNyb3NzIHRoaXMgYW5kIHRvIGNvbWUgd2l0aGluIGEgc2hvcnQgZGlzdGFuY2Ugb2YgQmFieWxvbiBpdHNlbGYuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFuYWIuIDEuNy4xNCIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGkuIDcsIDE0LTE3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3YXMgVGVyaWJhenVzLCBhcyB3ZSBhcmUgdG9sZCwgd2hvIGZpcnN0IHBsdWNrZWQgdXAgY291cmFnZSB0byB0ZWxsIHRoZSBraW5nIHRoYXQgaGUgb3VnaHQgbm90IHRvIHNodW4gYSBiYXR0bGUsIG5vciB0byByZXRpcmUgZnJvbSBNZWRpYSBhbmQgQmFieWxvbiwgYXMgd2VsbCBhcyBTdXNhLCBhbmQgaGlkZSBoaW1zZWxmIGluIFBlcnNpYSwgd2hlbiBoZSBoYWQgYSBmb3JjZSBtYW55IHRpbWVzIGFzIG51bWVyb3VzIGFzIHRoYXQgb2YgdGhlIGVuZW15LCBhbmQgY291bnRsZXNzIHNhdHJhcHMgYW5kIGdlbmVyYWxzIHdobyBzdXJwYXNzZWQgQ3lydXMgaW4gd2lzZG9tIGFuZCBtaWxpdGFyeSBza2lsbC4gVGhlIGtpbmcgdGhlcmVmb3JlIGRldGVybWluZWQgdG8gZmlnaHQgdGhlIGlzc3VlIG91dCBhcyBzb29uIGFzIHBvc3NpYmxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBDeXJ1cyBwcm9jZWVkZWQgb24gaGlzIG1hcmNoLCBydW1vdXJzIGFuZCByZXBvcnRzIGtlcHQgY29taW5nIHRvIGhpcyBlYXJzIHRoYXQgdGhlIGtpbmcgaGFkIGRlY2lkZWQgbm90IHRvIGdpdmUgYmF0dGxlIGF0IG9uY2UsIGFuZCB3YXMgbm90IGRlc2lyb3VzIG9mIGNvbWluZyB0byBjbG9zZSBxdWFydGVycyB3aXRoIGhpbSwgYnV0IHJhdGhlciBvZiB3YWl0aW5nIGluIFBlcnNpYSB1bnRpbCBoaXMgZm9yY2VzIHNob3VsZCBhc3NlbWJsZSB0aGVyZSBmcm9tIGFsbCBwYXJ0cy4gRm9yIGhlIGhhZCBydW4gYSB0cmVuY2gsIHRlbiBmYXRob21zIGluIHdpZHRoIGFuZCBhcyBtYW55IGluIGRlcHRoLCBmb3VyIGh1bmRyZWQgZnVybG9uZ3MgdGhyb3VnaCB0aGUgcGxhaW47IGFuZCB5ZXQgaGUgYWxsb3dlZCBDeXJ1cyB0byBjcm9zcyB0aGlzIGFuZCB0byBjb21lIHdpdGhpbiBhIHNob3J0IGRpc3RhbmNlIG9mIEJhYnlsb24gaXRzZWxmLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMS43LjE0IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiA3LCAxNC0xNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMS43LjE0IiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiA3LCAxNC0xNy48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaS4gNywgMTQtMTcuPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3YXMgVGVyaWJhenVzLCBhcyB3ZSBhcmUgdG9sZCwgd2hvIGZpcnN0IHBsdWNrZWQgdXAgY291cmFnZSB0byB0ZWxsIHRoZSBraW5nIHRoYXQgaGUgb3VnaHQgbm90IHRvIHNodW4gYSBiYXR0bGUsIG5vciB0byByZXRpcmUgZnJvbSBNZWRpYSBhbmQgQmFieWxvbiwgYXMgd2VsbCBhcyBTdXNhLCBhbmQgaGlkZSBoaW1zZWxmIGluIFBlcnNpYSwgd2hlbiBoZSBoYWQgYSBmb3JjZSBtYW55IHRpbWVzIGFzIG51bWVyb3VzIGFzIHRoYXQgb2YgdGhlIGVuZW15LCBhbmQgY291bnRsZXNzIHNhdHJhcHMgYW5kIGdlbmVyYWxzIHdobyBzdXJwYXNzZWQgQ3lydXMgaW4gd2lzZG9tIGFuZCBtaWxpdGFyeSBza2lsbC4gVGhlIGtpbmcgdGhlcmVmb3JlIGRldGVybWluZWQgdG8gZmlnaHQgdGhlIGlzc3VlIG91dCBhcyBzb29uIGFzIHBvc3NpYmxlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TbywgdG8gYmVnaW4gd2l0aCwgYnkgaGlzIHN1ZGRlbiBhcHBlYXJhbmNlIHdpdGggYW4gYXJteSBvZiBuaW5lIGh1bmRyZWQgdGhvdXNhbmQgbWVuIGluIGJyaWxsaWFudCBhcnJheSwgaGUgc28gdGVycmlmaWVkIGFuZCBjb25mb3VuZGVkIHRoZSBlbmVteSwgd2hvIHdlcmUgbWFyY2hpbmcgYWxvbmcgaW4gbG9vc2Ugb3JkZXIgYW5kIHdpdGhvdXQgYXJtcyBiZWNhdXNlIG9mIHRoZWlyIGJvbGRuZXNzIGFuZCBjb250ZW1wdCBmb3IgdGhlIGtpbmcsIHRoYXQgQ3lydXMgY291bGQgd2l0aCBkaWZmaWN1bHR5IGJyaW5nIHRoZW0gaW50byBiYXR0bGUgYXJyYXkgYW1pZCBtdWNoIHR1bXVsdCBhbmQgc2hvdXRpbmc7IGFuZCBhZ2FpbiwgYnkgbGVhZGluZyBoaXMgZm9yY2VzIHVwIHNsb3dseSBhbmQgaW4gc2lsZW5jZSwgaGUgZmlsbGVkIHRoZSBHcmVla3Mgd2l0aCBhbWF6ZW1lbnQgYXQgaGlzIGdvb2QgZGlzY2lwbGluZSwgc2luY2UgdGhleSBoYWQgZXhwZWN0ZWQgaW4gc28gdmFzdCBhIGhvc3QgcmFuZG9tIHNob3V0aW5nLCBhbmQgbGVhcGluZywgd2l0aCBncmVhdCBjb25mdXNpb24gYW5kIGRpc3NpcGF0aW9uIG9mIHRoZWlyIGxpbmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzIHRoaXMsIGhlIGRpZCB3ZWxsIHRvIGRyYXcgdXAgaW4gZnJvbnQgb2YgaGlzIG93biBsaW5lLCBhbmQgb3ZlciBhZ2FpbnN0IHRoZSBHcmVla3MsIHRoZSBtaWdodGllc3Qgb2YgaGlzIHNjeXRoZS1iZWFyaW5nIGNoYXJpb3RzLCBpbiBvcmRlciB0aGF0IGJ5IHRoZSBmb3JjZSBvZiB0aGVpciBjaGFyZ2UgdGhleSBtaWdodCBjdXQgdG8gcGllY2VzIHRoZSByYW5rcyBvZiB0aGUgR3JlZWtzIGJlZm9yZSB0aGV5IGhhZCBjb21lIHRvIGNsb3NlIHF1YXJ0ZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0byBiZWdpbiB3aXRoLCBieSBoaXMgc3VkZGVuIGFwcGVhcmFuY2Ugd2l0aCBhbiBhcm15IG9mIG5pbmUgaHVuZHJlZCB0aG91c2FuZCBtZW4gaW4gYnJpbGxpYW50IGFycmF5LCBoZSBzbyB0ZXJyaWZpZWQgYW5kIGNvbmZvdW5kZWQgdGhlIGVuZW15LCB3aG8gd2VyZSBtYXJjaGluZyBhbG9uZyBpbiBsb29zZSBvcmRlciBhbmQgd2l0aG91dCBhcm1zIGJlY2F1c2Ugb2YgdGhlaXIgYm9sZG5lc3MgYW5kIGNvbnRlbXB0IGZvciB0aGUga2luZywgdGhhdCBDeXJ1cyBjb3VsZCB3aXRoIGRpZmZpY3VsdHkgYnJpbmcgdGhlbSBpbnRvIGJhdHRsZSBhcnJheSBhbWlkIG11Y2ggdHVtdWx0IGFuZCBzaG91dGluZzsgYW5kIGFnYWluLCBieSBsZWFkaW5nIGhpcyBmb3JjZXMgdXAgc2xvd2x5IGFuZCBpbiBzaWxlbmNlLCBoZSBmaWxsZWQgdGhlIEdyZWVrcyB3aXRoIGFtYXplbWVudCBhdCBoaXMgZ29vZCBkaXNjaXBsaW5lLCBzaW5jZSB0aGV5IGhhZCBleHBlY3RlZCBpbiBzbyB2YXN0IGEgaG9zdCByYW5kb20gc2hvdXRpbmcsIGFuZCBsZWFwaW5nLCB3aXRoIGdyZWF0IGNvbmZ1c2lvbiBhbmQgZGlzc2lwYXRpb24gb2YgdGhlaXIgbGluZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMgdGhpcywgaGUgZGlkIHdlbGwgdG8gZHJhdyB1cCBpbiBmcm9udCBvZiBoaXMgb3duIGxpbmUsIGFuZCBvdmVyIGFnYWluc3QgdGhlIEdyZWVrcywgdGhlIG1pZ2h0aWVzdCBvZiBoaXMgc2N5dGhlLWJlYXJpbmcgY2hhcmlvdHMsIGluIG9yZGVyIHRoYXQgYnkgdGhlIGZvcmNlIG9mIHRoZWlyIGNoYXJnZSB0aGV5IG1pZ2h0IGN1dCB0byBwaWVjZXMgdGhlIHJhbmtzIG9mIHRoZSBHcmVla3MgYmVmb3JlIHRoZXkgaGFkIGNvbWUgdG8gY2xvc2UgcXVhcnRlcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBzaW5jZSBtYW55IHdyaXRlcnMgaGF2ZSByZXBvcnRlZCB0byB1cyB0aGlzIGJhdHRsZSwgYW5kIHNpbmNlIFhlbm9waG9uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFuYWIuIDEuOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGkuIDguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJyaW5ncyBpdCBhbGwgYnV0IGJlZm9yZSBvdXIgZXllcywgYW5kIGJ5IHRoZSB2aWdvdXIgb2YgaGlzIGRlc2NyaXB0aW9uIG1ha2VzIGhpcyByZWFkZXIgYWx3YXlzIGEgcGFydGljaXBhbnQgaW4gdGhlIGVtb3Rpb25zIGFuZCBwZXJpbHMgb2YgdGhlIHN0cnVnZ2xlLCBhcyB0aG91Z2ggaXQgYmVsb25nZWQsIG5vdCB0byB0aGUgcGFzdCwgYnV0IHRvIHRoZSBwcmVzZW50LCBpdCB3b3VsZCBiZSBmb2xseSB0byBkZXNjcmliZSBpdCBhZ2FpbiwgZXhjZXB0IHNvIGZhciBhcyBoZSBoYXMgcGFzc2VkIG92ZXIgdGhpbmdzIHdvcnRoeSBvZiBtZW50aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGxhY2UsIHRoZW4sIHdoZXJlIHRoZSBhcm1pZXMgd2VyZSBkcmF3biB1cCwgaXMgY2FsbGVkIEN1bmF4YSwgYW5kIGl0IGlzIGZpdmUgaHVuZHJlZCBmdXJsb25ncyBkaXN0YW50IGZyb20gQmFieWxvbi4gQW5kIHdlIGFyZSB0b2xkIHRoYXQgQ3lydXMsIGJlZm9yZSB0aGUgYmF0dGxlLCB3aGVuIENsZWFyY2h1cyBiZXNvdWdodCBoaW0gdG8gcmVtYWluIGJlaGluZCB0aGUgY29tYmF0YW50cyBhbmQgbm90IHJpc2sgaGlzIGxpZmUsIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBzYXllc3QgdGhvdSwgQ2xlYXJjaHVzPyBEb3N0IHRob3UgYmlkIG1lLCB3aG8gYW0gcmVhY2hpbmcgb3V0IGZvciBhIGtpbmdkb20sIHRvIGJlIHVud29ydGh5IG9mIGEga2luZ2RvbT88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGEgZ3JlYXQgbWlzdGFrZSBmb3IgQ3lydXMgdG8gcGx1bmdlIGhlYWRsb25nIGludG8gdGhlIG1pZHN0IG9mIHRoZSBmcmF5LCBpbnN0ZWFkIG9mIHRyeWluZyB0byBhdm9pZCBpdHMgZGFuZ2VyczsgYnV0IGl0IHdhcyBubyBsZXNzIGEgbWlzdGFrZSwgbmF5LCBldmVuIGEgZ3JlYXRlciBvbmUsIGZvciBDbGVhcmNodXMgdG8gcmVmdXNlIHRvIGFycmF5IGhpcyBHcmVla3Mgb3ZlciBhZ2FpbnN0IHRoZSBraW5nLCBhbmQgdG8ga2VlcCBoaXMgcmlnaHQgd2luZyBjbG9zZSB0byB0aGUgcml2ZXIsIHRoYXQgaGUgbWlnaHQgbm90IGJlIHN1cnJvdW5kZWQuIEZvciBpZiBoZSBzb3VnaHQgc2FmZXR5IGFib3ZlIGV2ZXJ5dGhpbmcgZWxzZSBhbmQgbWFkZSBpdCBoaXMgY2hpZWYgb2JqZWN0IHRvIGF2b2lkIGxvc3NlcywgaXQgaGFkIGJlZW4gYmVzdCBmb3IgaGltIHRvIHN0YXkgYXQgaG9tZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIGhhZCBtYXJjaGVkIHRlbiB0aG91c2FuZCBmdXJsb25ncyB1cCBmcm9tIHRoZSBzZWEtY29hc3QgdW5kZXIgYXJtcywgd2l0aCBubyBjb21wdWxzaW9uIHVwb24gaGltLCBidXQgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBwbGFjZSBDeXJ1cyB1cG9uIHRoZSByb3lhbCB0aHJvbmU7IGFuZCB0aGVuLCBpbiBsb29raW5nIGFib3V0IGZvciBhIHBsYWNlIGFuZCBwb3NpdGlvbiB3aGljaCB3b3VsZCBlbmFibGUgaGltLCBub3QgdG8gc2F2ZSBoaXMgbGVhZGVyIGFuZCBlbXBsb3llciwgYnV0IHRvIGZpZ2h0IHNhZmVseSBhbmQgYXMgaGUgcGxlYXNlZCwgaGUgd2FzIGxpa2Ugb25lIHdobywgdGhyb3VnaCBmZWFyIG9mIGluc3RhbnQgcGVyaWwsIGhhZCBjYXN0IGFzaWRlIHRoZSBwbGFucyBtYWRlIGZvciBnZW5lcmFsIHN1Y2Nlc3MgYW5kIGFiYW5kb25lZCB0aGUgb2JqZWN0IG9mIHRoZSBleHBlZGl0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGFkIHRoZSBHcmVla3MgY2hhcmdlZCB1cG9uIHRoZSBmb3JjZXMgYXJyYXllZCBhYm91dCB0aGUga2luZywgbm90IGEgbWFuIG9mIHRoZW0gd291bGQgaGF2ZSBzdG9vZCBoaXMgZ3JvdW5kOyBhbmQgaGFkIHRoZXNlIGJlZW4gcm91dGVkIGFuZCB0aGUga2luZyBlaXRoZXIgc2xhaW4gb3IgcHV0IHRvIGZsaWdodCwgQ3lydXMgd291bGQgaGF2ZSB3b24gYnkgaGlzIHZpY3RvcnksIG5vdCBvbmx5IHNhZmV0eSwgYnV0IGEga2luZ2RvbS4gVGhpcyBpcyBjbGVhciBmcm9tIHRoZSBjb3Vyc2Ugb2YgdGhlIGFjdGlvbi4gVGhlcmVmb3JlIHRoZSBjYXV0aW9uIG9mIENsZWFyY2h1cyByYXRoZXIgdGhhbiB0aGUgdGVtZXJpdHkgb2YgQ3lydXMgbXVzdCBiZSBoZWxkIHJlc3BvbnNpYmxlIGZvciB0aGUgcnVpbiBvZiBDeXJ1cyBhbmQgaGlzIGNhdXNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgdGhlIGtpbmcgaGltc2VsZiBoYWQgc291Z2h0IG91dCBhIHBsYWNlIHRvIGFycmF5IHRoZSBHcmVla3MgaW4gd2hpY2ggdGhlaXIgYXR0YWNrIHdvdWxkIGJlIGxlYXN0IGluanVyaW91cyB0byBoaW0sIGhlIGNvdWxkIGhhdmUgZm91bmQgbm8gb3RoZXIgdGhhbiB0aGF0IHdoaWNoIHdhcyBtb3N0IHJlbW90ZSBmcm9tIGhpbXNlbGYgYW5kIGhpcyBpbW1lZGlhdGUgZm9sbG93aW5nLCBzaW5jZSBoZSBoaW1zZWxmIGRpZCBub3Qga25vdyB0aGF0IGhpcyBmb3JjZXMgaGFkIGJlZW4gZGVmZWF0ZWQgdGhlcmUsIGFuZCBDeXJ1cyBjb3VsZCB0YWtlIG5vIGFkdmFudGFnZSBhdCBhbGwgb2YgdGhlIHZpY3Rvcnkgb2YgQ2xlYXJjaHVzLCBiZWNhdXNlIGhlIHdhcyBjdXQgZG93biB0b28gc29vbi4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBDeXJ1cyB3ZWxsIGtuZXcgd2hhdCB3YXMgZm9yIHRoZSBiZXN0LCBhbmQgb3JkZXJlZCBDbGVhcmNodXMgdG8gdGFrZSBoaXMgcG9zaXRpb24gYWNjb3JkaW5nbHkgaW4gdGhlIGNlbnRyZS4gQnV0IENsZWFyY2h1cywgYWZ0ZXIgdGVsbGluZyBDeXJ1cyBoZSB3b3VsZCBzZWUgdG8gaXQgdGhhdCB0aGUgYmVzdCB3YXMgZG9uZSwgcnVpbmVkIGV2ZXJ5dGhpbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHNpbmNlIG1hbnkgd3JpdGVycyBoYXZlIHJlcG9ydGVkIHRvIHVzIHRoaXMgYmF0dGxlLCBhbmQgc2luY2UgWGVub3Bob248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFuYWIuIDEuOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gaS4gOC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYnJpbmdzIGl0IGFsbCBidXQgYmVmb3JlIG91ciBleWVzLCBhbmQgYnkgdGhlIHZpZ291ciBvZiBoaXMgZGVzY3JpcHRpb24gbWFrZXMgaGlzIHJlYWRlciBhbHdheXMgYSBwYXJ0aWNpcGFudCBpbiB0aGUgZW1vdGlvbnMgYW5kIHBlcmlscyBvZiB0aGUgc3RydWdnbGUsIGFzIHRob3VnaCBpdCBiZWxvbmdlZCwgbm90IHRvIHRoZSBwYXN0LCBidXQgdG8gdGhlIHByZXNlbnQsIGl0IHdvdWxkIGJlIGZvbGx5IHRvIGRlc2NyaWJlIGl0IGFnYWluLCBleGNlcHQgc28gZmFyIGFzIGhlIGhhcyBwYXNzZWQgb3ZlciB0aGluZ3Mgd29ydGh5IG9mIG1lbnRpb24uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAxLjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDguPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDguPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwbGFjZSwgdGhlbiwgd2hlcmUgdGhlIGFybWllcyB3ZXJlIGRyYXduIHVwLCBpcyBjYWxsZWQgQ3VuYXhhLCBhbmQgaXQgaXMgZml2ZSBodW5kcmVkIGZ1cmxvbmdzIGRpc3RhbnQgZnJvbSBCYWJ5bG9uLiBBbmQgd2UgYXJlIHRvbGQgdGhhdCBDeXJ1cywgYmVmb3JlIHRoZSBiYXR0bGUsIHdoZW4gQ2xlYXJjaHVzIGJlc291Z2h0IGhpbSB0byByZW1haW4gYmVoaW5kIHRoZSBjb21iYXRhbnRzIGFuZCBub3QgcmlzayBoaXMgbGlmZSwgcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgc2F5ZXN0IHRob3UsIENsZWFyY2h1cz8gRG9zdCB0aG91IGJpZCBtZSwgd2hvIGFtIHJlYWNoaW5nIG91dCBmb3IgYSBraW5nZG9tLCB0byBiZSB1bndvcnRoeSBvZiBhIGtpbmdkb20/PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBhIGdyZWF0IG1pc3Rha2UgZm9yIEN5cnVzIHRvIHBsdW5nZSBoZWFkbG9uZyBpbnRvIHRoZSBtaWRzdCBvZiB0aGUgZnJheSwgaW5zdGVhZCBvZiB0cnlpbmcgdG8gYXZvaWQgaXRzIGRhbmdlcnM7IGJ1dCBpdCB3YXMgbm8gbGVzcyBhIG1pc3Rha2UsIG5heSwgZXZlbiBhIGdyZWF0ZXIgb25lLCBmb3IgQ2xlYXJjaHVzIHRvIHJlZnVzZSB0byBhcnJheSBoaXMgR3JlZWtzIG92ZXIgYWdhaW5zdCB0aGUga2luZywgYW5kIHRvIGtlZXAgaGlzIHJpZ2h0IHdpbmcgY2xvc2UgdG8gdGhlIHJpdmVyLCB0aGF0IGhlIG1pZ2h0IG5vdCBiZSBzdXJyb3VuZGVkLiBGb3IgaWYgaGUgc291Z2h0IHNhZmV0eSBhYm92ZSBldmVyeXRoaW5nIGVsc2UgYW5kIG1hZGUgaXQgaGlzIGNoaWVmIG9iamVjdCB0byBhdm9pZCBsb3NzZXMsIGl0IGhhZCBiZWVuIGJlc3QgZm9yIGhpbSB0byBzdGF5IGF0IGhvbWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSBoYWQgbWFyY2hlZCB0ZW4gdGhvdXNhbmQgZnVybG9uZ3MgdXAgZnJvbSB0aGUgc2VhLWNvYXN0IHVuZGVyIGFybXMsIHdpdGggbm8gY29tcHVsc2lvbiB1cG9uIGhpbSwgYnV0IGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgcGxhY2UgQ3lydXMgdXBvbiB0aGUgcm95YWwgdGhyb25lOyBhbmQgdGhlbiwgaW4gbG9va2luZyBhYm91dCBmb3IgYSBwbGFjZSBhbmQgcG9zaXRpb24gd2hpY2ggd291bGQgZW5hYmxlIGhpbSwgbm90IHRvIHNhdmUgaGlzIGxlYWRlciBhbmQgZW1wbG95ZXIsIGJ1dCB0byBmaWdodCBzYWZlbHkgYW5kIGFzIGhlIHBsZWFzZWQsIGhlIHdhcyBsaWtlIG9uZSB3aG8sIHRocm91Z2ggZmVhciBvZiBpbnN0YW50IHBlcmlsLCBoYWQgY2FzdCBhc2lkZSB0aGUgcGxhbnMgbWFkZSBmb3IgZ2VuZXJhbCBzdWNjZXNzIGFuZCBhYmFuZG9uZWQgdGhlIG9iamVjdCBvZiB0aGUgZXhwZWRpdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoYWQgdGhlIEdyZWVrcyBjaGFyZ2VkIHVwb24gdGhlIGZvcmNlcyBhcnJheWVkIGFib3V0IHRoZSBraW5nLCBub3QgYSBtYW4gb2YgdGhlbSB3b3VsZCBoYXZlIHN0b29kIGhpcyBncm91bmQ7IGFuZCBoYWQgdGhlc2UgYmVlbiByb3V0ZWQgYW5kIHRoZSBraW5nIGVpdGhlciBzbGFpbiBvciBwdXQgdG8gZmxpZ2h0LCBDeXJ1cyB3b3VsZCBoYXZlIHdvbiBieSBoaXMgdmljdG9yeSwgbm90IG9ubHkgc2FmZXR5LCBidXQgYSBraW5nZG9tLiBUaGlzIGlzIGNsZWFyIGZyb20gdGhlIGNvdXJzZSBvZiB0aGUgYWN0aW9uLiBUaGVyZWZvcmUgdGhlIGNhdXRpb24gb2YgQ2xlYXJjaHVzIHJhdGhlciB0aGFuIHRoZSB0ZW1lcml0eSBvZiBDeXJ1cyBtdXN0IGJlIGhlbGQgcmVzcG9uc2libGUgZm9yIHRoZSBydWluIG9mIEN5cnVzIGFuZCBoaXMgY2F1c2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiB0aGUga2luZyBoaW1zZWxmIGhhZCBzb3VnaHQgb3V0IGEgcGxhY2UgdG8gYXJyYXkgdGhlIEdyZWVrcyBpbiB3aGljaCB0aGVpciBhdHRhY2sgd291bGQgYmUgbGVhc3QgaW5qdXJpb3VzIHRvIGhpbSwgaGUgY291bGQgaGF2ZSBmb3VuZCBubyBvdGhlciB0aGFuIHRoYXQgd2hpY2ggd2FzIG1vc3QgcmVtb3RlIGZyb20gaGltc2VsZiBhbmQgaGlzIGltbWVkaWF0ZSBmb2xsb3dpbmcsIHNpbmNlIGhlIGhpbXNlbGYgZGlkIG5vdCBrbm93IHRoYXQgaGlzIGZvcmNlcyBoYWQgYmVlbiBkZWZlYXRlZCB0aGVyZSwgYW5kIEN5cnVzIGNvdWxkIHRha2Ugbm8gYWR2YW50YWdlIGF0IGFsbCBvZiB0aGUgdmljdG9yeSBvZiBDbGVhcmNodXMsIGJlY2F1c2UgaGUgd2FzIGN1dCBkb3duIHRvbyBzb29uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgQ3lydXMgd2VsbCBrbmV3IHdoYXQgd2FzIGZvciB0aGUgYmVzdCwgYW5kIG9yZGVyZWQgQ2xlYXJjaHVzIHRvIHRha2UgaGlzIHBvc2l0aW9uIGFjY29yZGluZ2x5IGluIHRoZSBjZW50cmUuIEJ1dCBDbGVhcmNodXMsIGFmdGVyIHRlbGxpbmcgQ3lydXMgaGUgd291bGQgc2VlIHRvIGl0IHRoYXQgdGhlIGJlc3Qgd2FzIGRvbmUsIHJ1aW5lZCBldmVyeXRoaW5nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgR3JlZWtzIHdlcmUgdmljdG9yaW91cyB0byB0aGVpciBoZWFydHMnIGNvbnRlbnQgb3ZlciB0aGUgQmFyYmFyaWFucywgYW5kIHdlbnQgZm9yd2FyZCBhIHZlcnkgZ3JlYXQgZGlzdGFuY2UgaW4gcHVyc3VpdCBvZiB0aGVtOyBidXQgQ3lydXMsIHJpZGluZyBhIGhvcnNlIHRoYXQgd2FzIGhpZ2gtYnJlZCwgYnV0IGZpZXJjZSBhbmQgaGFyZCB0byBndWlkZSAoaGlzIG5hbWUgd2FzIFBhc2FjYXMsIGFzIEN0ZXNpYXMgdGVsbHMgdXMpLCB3YXMgbWV0IGluIGZ1bGwgY291cnNlIGJ5IEFydGFnZXJzZXMsIGNvbW1hbmRlciBvZiB0aGUgQ2FkdXNpYW5zLCB3aG8gY3JpZWQgd2l0aCBhIGxvdWQgdm9pY2U6IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIHRob3Ugd2hvIGRpc2dyYWNlc3QgdGhlIG5hbWUgb2YgQ3lydXMsIHRoYXQgbm9ibGVzdCBuYW1lIGFtb25nIHRoZSBQZXJzaWFucywgdGhvdSBtb3N0IHVuanVzdCBhbmQgc2Vuc2VsZXNzIG9mIG1lbiwgdGhvdSBhcnQgY29tZSB3aXRoIGV2aWwgR3JlZWtzIG9uIGFuIGV2aWwgam91cm5leSBhZnRlciB0aGUgZ29vZCB0aGluZ3Mgb2YgdGhlIFBlcnNpYW5zLCBhbmQgdGhvdSBob3Blc3QgdG8gc2xheSB0aGluZSBvd24gYnJvdGhlciBhbmQgdGh5IG1hc3Rlciwgd2hvIGhhdGggYSBtaWxsaW9uIHNlcnZhbnRzIHRoYXQgYXJlIGJldHRlciBtZW4gdGhhbiB0aG91LiBBbmQgdGhvdSBzaGFsdCBhdCBvbmNlIGhhdmUgcHJvb2Ygb2YgdGhpczsgZm9yIHRob3Ugc2hhbHQgbG9zZSB0aGluZSBvd24gaGVhZCBoZXJlIGJlZm9yZSB0aG91IGhhc3Qgc2VlbiB0aGUgZmFjZSBvZiB0aGUga2luZy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCB0aGVzZSB3b3JkcyBoZSBodXJsZWQgaGlzIHNwZWFyIGF0IEN5cnVzLiBCdXQgdGhlIGJyZWFzdHBsYXRlIG9mIEN5cnVzIHN0b3V0bHkgcmVzaXN0ZWQsIGFuZCBpdHMgd2VhcmVyIHdhcyBub3Qgd291bmRlZCwgdGhvdWdoIGhlIHJlZWxlZCB1bmRlciB0aGUgc2hvY2sgb2YgdGhlIG1pZ2h0eSBibG93LiBUaGVuLCBhcyBBcnRhZ2Vyc2VzIHR1cm5lZCBoaXMgaG9yc2UgYXdheSwgQ3lydXMgaHVybGVkIGhpcyBzcGVhciBhbmQgaGl0IGhpbSwgYW5kIGRyb3ZlIGl0cyBoZWFkIHRocm91Z2ggaGlzIG5lY2sgcGFzdCB0aGUgY29sbGFyLWJvbmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIEdyZWVrcyB3ZXJlIHZpY3RvcmlvdXMgdG8gdGhlaXIgaGVhcnRzJyBjb250ZW50IG92ZXIgdGhlIEJhcmJhcmlhbnMsIGFuZCB3ZW50IGZvcndhcmQgYSB2ZXJ5IGdyZWF0IGRpc3RhbmNlIGluIHB1cnN1aXQgb2YgdGhlbTsgYnV0IEN5cnVzLCByaWRpbmcgYSBob3JzZSB0aGF0IHdhcyBoaWdoLWJyZWQsIGJ1dCBmaWVyY2UgYW5kIGhhcmQgdG8gZ3VpZGUgKGhpcyBuYW1lIHdhcyBQYXNhY2FzLCBhcyBDdGVzaWFzIHRlbGxzIHVzKSwgd2FzIG1ldCBpbiBmdWxsIGNvdXJzZSBieSBBcnRhZ2Vyc2VzLCBjb21tYW5kZXIgb2YgdGhlIENhZHVzaWFucywgd2hvIGNyaWVkIHdpdGggYSBsb3VkIHZvaWNlOiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gdGhvdSB3aG8gZGlzZ3JhY2VzdCB0aGUgbmFtZSBvZiBDeXJ1cywgdGhhdCBub2JsZXN0IG5hbWUgYW1vbmcgdGhlIFBlcnNpYW5zLCB0aG91IG1vc3QgdW5qdXN0IGFuZCBzZW5zZWxlc3Mgb2YgbWVuLCB0aG91IGFydCBjb21lIHdpdGggZXZpbCBHcmVla3Mgb24gYW4gZXZpbCBqb3VybmV5IGFmdGVyIHRoZSBnb29kIHRoaW5ncyBvZiB0aGUgUGVyc2lhbnMsIGFuZCB0aG91IGhvcGVzdCB0byBzbGF5IHRoaW5lIG93biBicm90aGVyIGFuZCB0aHkgbWFzdGVyLCB3aG8gaGF0aCBhIG1pbGxpb24gc2VydmFudHMgdGhhdCBhcmUgYmV0dGVyIG1lbiB0aGFuIHRob3UuIEFuZCB0aG91IHNoYWx0IGF0IG9uY2UgaGF2ZSBwcm9vZiBvZiB0aGlzOyBmb3IgdGhvdSBzaGFsdCBsb3NlIHRoaW5lIG93biBoZWFkIGhlcmUgYmVmb3JlIHRob3UgaGFzdCBzZWVuIHRoZSBmYWNlIG9mIHRoZSBraW5nLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlc2Ugd29yZHMgaGUgaHVybGVkIGhpcyBzcGVhciBhdCBDeXJ1cy4gQnV0IHRoZSBicmVhc3RwbGF0ZSBvZiBDeXJ1cyBzdG91dGx5IHJlc2lzdGVkLCBhbmQgaXRzIHdlYXJlciB3YXMgbm90IHdvdW5kZWQsIHRob3VnaCBoZSByZWVsZWQgdW5kZXIgdGhlIHNob2NrIG9mIHRoZSBtaWdodHkgYmxvdy4gVGhlbiwgYXMgQXJ0YWdlcnNlcyB0dXJuZWQgaGlzIGhvcnNlIGF3YXksIEN5cnVzIGh1cmxlZCBoaXMgc3BlYXIgYW5kIGhpdCBoaW0sIGFuZCBkcm92ZSBpdHMgaGVhZCB0aHJvdWdoIGhpcyBuZWNrIHBhc3QgdGhlIGNvbGxhci1ib25lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIEFydGFnZXJzZXMgZGllZCBhdCB0aGUgaGFuZHMgb2YgQ3lydXMsIGFzIG5lYXJseSBhbGwgd3JpdGVycyBhcmUgYWdyZWVkIGluIHNheWluZzsgYnV0IGFzIHJlZ2FyZHMgdGhlIGRlYXRoIG9mIEN5cnVzIGhpbXNlbGYsIHNpbmNlIFhlbm9waG9uIG1ha2VzIHNpbXBsZSBhbmQgYnJpZWYgbWVudGlvbiBvZiBpdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMS44LjI2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFuYWIuPC90aXRsZT4sIEkuIHZpaWkuIDI2IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJlY2F1c2UgaGUgd2FzIG5vdCBwcmVzZW50IGhpbXNlbGYgd2hlbiBpdCBoYXBwZW5lZCwgdGhlcmUgaXMgbm8gb2JqZWN0aW9uIHBlcmhhcHMgdG8gbXkgcmVjb3VudGluZywgZmlyc3Qgd2hhdCBEZWlub24gc2F5cyBhYm91dCBpdCwgYW5kIHRoZW4gd2hhdCBDdGVzaWFzIHNheXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgQXJ0YWdlcnNlcyBkaWVkIGF0IHRoZSBoYW5kcyBvZiBDeXJ1cywgYXMgbmVhcmx5IGFsbCB3cml0ZXJzIGFyZSBhZ3JlZWQgaW4gc2F5aW5nOyBidXQgYXMgcmVnYXJkcyB0aGUgZGVhdGggb2YgQ3lydXMgaGltc2VsZiwgc2luY2UgWGVub3Bob24gbWFrZXMgc2ltcGxlIGFuZCBicmllZiBtZW50aW9uIG9mIGl0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMS44LjI2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiwgSS4gdmlpaS4gMjYgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYmVjYXVzZSBoZSB3YXMgbm90IHByZXNlbnQgaGltc2VsZiB3aGVuIGl0IGhhcHBlbmVkLCB0aGVyZSBpcyBubyBvYmplY3Rpb24gcGVyaGFwcyB0byBteSByZWNvdW50aW5nLCBmaXJzdCB3aGF0IERlaW5vbiBzYXlzIGFib3V0IGl0LCBhbmQgdGhlbiB3aGF0IEN0ZXNpYXMgc2F5cy4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAxLjguMjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+LCBJLiB2aWlpLiAyNiBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiwgSS4gdmlpaS4gMjYgZi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgRGVpbm9uIHNheXMgdGhhdCBhZnRlciBBcnRhZ2Vyc2VzIGhhZCBmYWxsZW4sIEN5cnVzIGNoYXJnZWQgZnVyaW91c2x5IGludG8gdGhvc2UgZHJhd24gdXAgaW4gZnJvbnQgb2YgdGhlIGtpbmcsIGFuZCB3b3VuZGVkIHRoZSBraW5nJ3MgaG9yc2UsIGFuZCB0aGF0IHRoZSBraW5nIGZlbGwgdG8gdGhlIGdyb3VuZDsgYnV0IFRlcmliYXp1cyBxdWlja2x5IG1vdW50ZWQgaGltIHVwb24gYW5vdGhlciBob3JzZSwgc2F5aW5nLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8ga2luZywgcmVtZW1iZXIgdGhpcyBkYXksIGZvciBpdCBkZXNlcnZlcyBub3QgdG8gYmUgZm9yZ290dGVuPC9xPjsgd2hlcmV1cG9uIEN5cnVzIGFnYWluIHBsdW5nZWQgaW4gYW5kIGRpc21vdW50ZWQgQXJ0YXhlcnhlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGF0IGhpcyB0aGlyZCBhc3NhdWx0LCB0aGUga2luZywgYmVpbmcgZW5yYWdlZCwgYW5kIHNheWluZyB0byB0aG9zZSB3aG8gd2VyZSB3aXRoIGhpbSB0aGF0IGRlYXRoIHdhcyBiZXR0ZXIsIHJvZGUgb3V0IGFnYWluc3QgQ3lydXMsIHdobyB3YXMgcmFzaGx5IGFuZCBpbXBldHVvdXNseSBydXNoaW5nIHVwb24gdGhlIG1pc3NpbGVzIG9mIGhpcyBvcHBvbmVudHMuIFRoZSBraW5nIGhpbXNlbGYgaGl0IGhpbSB3aXRoIGEgc3BlYXIsIGFuZCBoZSB3YXMgaGl0IGJ5IHRoZSBhdHRlbmRhbnRzIG9mIHRoZSBraW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIEN5cnVzIGZlbGwsIGFzIHNvbWUgc2F5LCBieSBhIHdvdW5kIGF0IHRoZSBoYW5kcyBvZiB0aGUga2luZywgYnV0IGFzIHN1bmRyeSBvdGhlcnMgaGF2ZSBpdCwgZnJvbSB0aGUgYmxvdyBvZiBhIENhcmlhbiwgd2hvIHdhcyByZXdhcmRlZCBieSB0aGUga2luZyBmb3IgdGhpcyBleHBsb2l0IHdpdGggdGhlIHByaXZpbGVnZSBvZiBhbHdheXMgY2FycnlpbmcgYSBnb2xkZW4gY29jayB1cG9uIGhpcyBzcGVhciBpbiBmcm9udCBvZiB0aGUgbGluZSBkdXJpbmcgYW4gZXhwZWRpdGlvbjsgZm9yIHRoZSBQZXJzaWFucyBjYWxsIHRoZSBDYXJpYW5zIHRoZW1zZWx2ZXMgY29ja3MsIGJlY2F1c2Ugb2YgdGhlIGNyZXN0cyB3aXRoIHdoaWNoIHRoZXkgYWRvcm4gdGhlaXIgaGVsbWV0cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIERlaW5vbiBzYXlzIHRoYXQgYWZ0ZXIgQXJ0YWdlcnNlcyBoYWQgZmFsbGVuLCBDeXJ1cyBjaGFyZ2VkIGZ1cmlvdXNseSBpbnRvIHRob3NlIGRyYXduIHVwIGluIGZyb250IG9mIHRoZSBraW5nLCBhbmQgd291bmRlZCB0aGUga2luZydzIGhvcnNlLCBhbmQgdGhhdCB0aGUga2luZyBmZWxsIHRvIHRoZSBncm91bmQ7IGJ1dCBUZXJpYmF6dXMgcXVpY2tseSBtb3VudGVkIGhpbSB1cG9uIGFub3RoZXIgaG9yc2UsIHNheWluZywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8ga2luZywgcmVtZW1iZXIgdGhpcyBkYXksIGZvciBpdCBkZXNlcnZlcyBub3QgdG8gYmUgZm9yZ290dGVuPC9xPjsgd2hlcmV1cG9uIEN5cnVzIGFnYWluIHBsdW5nZWQgaW4gYW5kIGRpc21vdW50ZWQgQXJ0YXhlcnhlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCBoaXMgdGhpcmQgYXNzYXVsdCwgdGhlIGtpbmcsIGJlaW5nIGVucmFnZWQsIGFuZCBzYXlpbmcgdG8gdGhvc2Ugd2hvIHdlcmUgd2l0aCBoaW0gdGhhdCBkZWF0aCB3YXMgYmV0dGVyLCByb2RlIG91dCBhZ2FpbnN0IEN5cnVzLCB3aG8gd2FzIHJhc2hseSBhbmQgaW1wZXR1b3VzbHkgcnVzaGluZyB1cG9uIHRoZSBtaXNzaWxlcyBvZiBoaXMgb3Bwb25lbnRzLiBUaGUga2luZyBoaW1zZWxmIGhpdCBoaW0gd2l0aCBhIHNwZWFyLCBhbmQgaGUgd2FzIGhpdCBieSB0aGUgYXR0ZW5kYW50cyBvZiB0aGUga2luZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgQ3lydXMgZmVsbCwgYXMgc29tZSBzYXksIGJ5IGEgd291bmQgYXQgdGhlIGhhbmRzIG9mIHRoZSBraW5nLCBidXQgYXMgc3VuZHJ5IG90aGVycyBoYXZlIGl0LCBmcm9tIHRoZSBibG93IG9mIGEgQ2FyaWFuLCB3aG8gd2FzIHJld2FyZGVkIGJ5IHRoZSBraW5nIGZvciB0aGlzIGV4cGxvaXQgd2l0aCB0aGUgcHJpdmlsZWdlIG9mIGFsd2F5cyBjYXJyeWluZyBhIGdvbGRlbiBjb2NrIHVwb24gaGlzIHNwZWFyIGluIGZyb250IG9mIHRoZSBsaW5lIGR1cmluZyBhbiBleHBlZGl0aW9uOyBmb3IgdGhlIFBlcnNpYW5zIGNhbGwgdGhlIENhcmlhbnMgdGhlbXNlbHZlcyBjb2NrcywgYmVjYXVzZSBvZiB0aGUgY3Jlc3RzIHdpdGggd2hpY2ggdGhleSBhZG9ybiB0aGVpciBoZWxtZXRzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIG5hcnJhdGl2ZSBvZiBDdGVzaWFzLCB0byBnaXZlIGl0IGluIGEgbXVjaC1hYmJyZXZpYXRlZCBmb3JtLCBpcyBzb21ldGhpbmcgYXMgZm9sbG93cy4gQWZ0ZXIgaGUgaGFkIHNsYWluIEFydGFnZXJzZXMsIEN5cnVzIHJvZGUgYWdhaW5zdCB0aGUga2luZyBoaW1zZWxmLCBhbmQgdGhlIGtpbmcgYWdhaW5zdCBoaW0sIGJvdGggd2l0aG91dCBhIHdvcmQuIEJ1dCBBcmlhZXVzLCB0aGUgZnJpZW5kIG9mIEN5cnVzLCB3YXMgYmVmb3JlaGFuZCBpbiBodXJsaW5nIGhpcyBzcGVhciBhdCB0aGUga2luZywgdGhvdWdoIGhlIGRpZCBub3Qgd291bmQgaGltLiBBbmQgdGhlIGtpbmcsIGNhc3RpbmcgaGlzIHNwZWFyIGF0IEN5cnVzLCBkaWQgbm90IGhpdCBoaW0sIGJ1dCBzdHJ1Y2sgYW5kIGtpbGxlZCBTYXRpcGhlcm5lcywgYSB0cnVzdGVkIGZyaWVuZCBvZiBDeXJ1cyBhbmQgYSBtYW4gb2Ygbm9ibGUgYmlydGguIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDeXJ1cyB0aHJldyBoaXMgc3BlYXIgYXQgdGhlIGtpbmcgYW5kIHdvdW5kZWQgaGltIGluIHRoZSBicmVhc3QgdGhyb3VnaCB0aGUgY3VpcmFzcywgc28gdGhhdCB0aGUgd2VhcG9uIHNhbmsgaW4gdHdvIGZpbmdlcnMgZGVlcCwgYW5kIHRoZSBraW5nIGZlbGwgZnJvbSBoaXMgaG9yc2Ugd2l0aCB0aGUgYmxvdy4gQW1pZCB0aGUgZW5zdWluZyBjb25mdXNpb24gYW5kIGZsaWdodCBvZiBoaXMgaW1tZWRpYXRlIGZvbGxvd2VycywgdGhlIGtpbmcgcm9zZSB0byBoaXMgZmVldCwgYW5kIHdpdGggYSBmZXcgY29tcGFuaW9ucyBhbW9uZyB3aG9tIGFsc28gd2FzIEN0ZXNpYXMsIHRvb2sgcG9zc2Vzc2lvbiBvZiBhIGNlcnRhaW4gaGlsbCBuZWFyIGJ5IGFuZCByZW1haW5lZCB0aGVyZSBxdWlldGx5OyBidXQgQ3lydXMsIGVudmVsb3BlZCBieSBoaXMgZW5lbWllcywgd2FzIGJvcm5lIG9uIGEgbG9uZyBkaXN0YW5jZSBieSBoaXMgc3Bpcml0ZWQgaG9yc2UsIGFuZCBzaW5jZSBpdCB3YXMgbm93IGRhcmssIGhpcyBlbmVtaWVzIGRpZCBub3QgcmVjb2duaXplIGhpbSBhbmQgaGlzIGZyaWVuZHMgY291bGQgbm90IGZpbmQgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbGlmdGVkIHVwIGJ5IGhpcyB2aWN0b3J5LCBhbmQgZnVsbCBvZiBpbXBldHVvc2l0eSBhbmQgY29uZmlkZW5jZSwgaGUgcm9kZSBvbiB0aHJvdWdoIGhpcyBmb2VzLCBjcnlpbmcgb3V0LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNsZWFyIHRoZSB3YXksIHllIGJlZ2dhcnMhPC9xPiBUaHVzIGhlIGNyaWVkIG91dCBtYW55IHRpbWVzLCBpbiBQZXJzaWFuLCBhbmQgdGhleSBjbGVhcmVkIHRoZSB3YXksIGFuZCBtYWRlIGhpbSB0aGVpciBvYmVpc2FuY2UuIEJ1dCB0aGUgdHVyYmFuIG9mIEN5cnVzIGZlbGwgZnJvbSBoaXMgaGVhZCwgYW5kIGEgeW91bmcgUGVyc2lhbiwgTWl0aHJpZGF0ZXMgYnkgbmFtZSwgcnVubmluZyB0byBoaXMgc2lkZSwgc21vdGUgaGltIHdpdGggaGlzIHNwZWFyIGluIHRoZSB0ZW1wbGUsIG5lYXIgdGhlIGV5ZSwgbm90IGtub3dpbmcgd2hvIGhlIHdhcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TXVjaCBibG9vZCBndXNoZWQgZnJvbSB0aGUgd291bmQsIGFuZCBDeXJ1cywgc3R1bm5lZCBhbmQgZ2lkZHksIGZlbGwgdG8gdGhlIGdyb3VuZC4gSGlzIGhvcnNlIGVzY2FwZWQgYW5kIHdhbmRlcmVkIGFib3V0IHRoZSBmaWVsZCwgYnV0IHRoZSBob3JzZSdzIHNhZGRsZS1jbG90aCwgd2hpY2ggaGFkIHNsaXBwZWQgb2ZmLCB3YXMgY2FwdHVyZWQgYnkgdGhlIGF0dGVuZGFudCBvZiB0aGUgbWFuIHdobyBoYWQgc3RydWNrIEN5cnVzLCBhbmQgaXQgd2FzIHNvYWtlZCB3aXRoIGJsb29kLiBUaGVuLCBhcyBDeXJ1cyB3YXMgc2xvd2x5IGFuZCB3aXRoIGRpZmZpY3VsdHkgcmVjb3ZlcmluZyBmcm9tIHRoZSBibG93LCBhIGZldyBldW51Y2hzIHdobyB3ZXJlIGF0IGhhbmQgdHJpZWQgdG8gcHV0IGhpbSB1cG9uIGFub3RoZXIgaG9yc2UgYW5kIGJyaW5nIGhpbSB0byBhIHBsYWNlIG9mIHNhZmV0eS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNpbmNlIGhlIHdhcyB1bmFibGUgdG8gcmlkZSBhbmQgZGVzaXJlZCB0byBnbyBvbiBoaXMgb3duIGZlZXQsIHRoZXkgc3VwcG9ydGVkIGhpbSBhbmQgbGVkIGhpbSBhbG9uZy4gSGlzIGhlYWQgd2FzIGhlYXZ5IGFuZCBoZSByZWVsZWQgdG8gYW5kIGZybywgYnV0IGhlIHRob3VnaHQgaGUgd2FzIHZpY3RvcmlvdXMgYmVjYXVzZSBoZSBoZWFyZCB0aGUgZnVnaXRpdmVzIHNhbHV0aW5nIEN5cnVzIGFzIGtpbmcgYW5kIGJlZ2dpbmcgaGltIHRvIHNwYXJlIHRoZW0uIE1lYW53aGlsZSBzb21lIENhdW5pYW5z4oCUbG93IGFuZCBwb3ZlcnR5LXN0cmlja2VuIG1lbiB3aG8gZm9sbG93ZWQgdGhlIGtpbmcncyBhcm15IHRvIGRvIG1lbmlhbCBzZXJ2aWNl4oCUY2hhbmNlZCB0byBqb2luIHRoZSBwYXJ0eSBhYm91dCBDeXJ1cywgc3VwcG9zaW5nIHRoZW0gdG8gYmUgZnJpZW5kcy4gQnV0IHdoZW4gYXQgbGFzdCB0aGV5IHBlcmNlaXZlZCB0aGF0IHRoZSB0dW5pY3Mgb3ZlciB0aGVpciBicmVhc3RwbGF0ZXMgd2VyZSBvZiBhIHB1cnBsZSBjb2xvdXIsIHdoZXJlYXMgYWxsIHRoZSBraW5nJ3MgcGVvcGxlIHdvcmUgd2hpdGUgb25lcywgdGhleSBrbmV3IHRoYXQgdGhleSB3ZXJlIGVuZW1pZXMuIEFjY29yZGluZ2x5LCBvbmUgb2YgdGhlbSwgbm90IGtub3dpbmcgd2hvIEN5cnVzIHdhcywgdmVudHVyZWQgdG8gc21pdGUgaGltIGZyb20gYmVoaW5kIHdpdGggaGlzIHNwZWFyLiBUaGUgdmVpbiBpbiB0aGUgaGFtIG9mIEN5cnVzIHdhcyBydXB0dXJlZCBhbmQgaGUgZmVsbCwgYW5kIGF0IHRoZSBzYW1lIHRpbWUgc3RydWNrIGhpcyB3b3VuZGVkIHRlbXBsZSBhZ2FpbnN0IGEgc3RvbmUsIGFuZCBzbyBkaWVkLiBTdWNoIGlzIHRoZSBzdG9yeSBvZiBDdGVzaWFzLCBpbiB3aGljaCwgYXMgd2l0aCBhIGJsdW50IHN3b3JkLCBoZSBpcyBsb25nIGluIGtpbGxpbmcgQ3lydXMsIGJ1dCBraWxscyBoaW0gYXQgbGFzdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBuYXJyYXRpdmUgb2YgQ3Rlc2lhcywgdG8gZ2l2ZSBpdCBpbiBhIG11Y2gtYWJicmV2aWF0ZWQgZm9ybSwgaXMgc29tZXRoaW5nIGFzIGZvbGxvd3MuIEFmdGVyIGhlIGhhZCBzbGFpbiBBcnRhZ2Vyc2VzLCBDeXJ1cyByb2RlIGFnYWluc3QgdGhlIGtpbmcgaGltc2VsZiwgYW5kIHRoZSBraW5nIGFnYWluc3QgaGltLCBib3RoIHdpdGhvdXQgYSB3b3JkLiBCdXQgQXJpYWV1cywgdGhlIGZyaWVuZCBvZiBDeXJ1cywgd2FzIGJlZm9yZWhhbmQgaW4gaHVybGluZyBoaXMgc3BlYXIgYXQgdGhlIGtpbmcsIHRob3VnaCBoZSBkaWQgbm90IHdvdW5kIGhpbS4gQW5kIHRoZSBraW5nLCBjYXN0aW5nIGhpcyBzcGVhciBhdCBDeXJ1cywgZGlkIG5vdCBoaXQgaGltLCBidXQgc3RydWNrIGFuZCBraWxsZWQgU2F0aXBoZXJuZXMsIGEgdHJ1c3RlZCBmcmllbmQgb2YgQ3lydXMgYW5kIGEgbWFuIG9mIG5vYmxlIGJpcnRoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDeXJ1cyB0aHJldyBoaXMgc3BlYXIgYXQgdGhlIGtpbmcgYW5kIHdvdW5kZWQgaGltIGluIHRoZSBicmVhc3QgdGhyb3VnaCB0aGUgY3VpcmFzcywgc28gdGhhdCB0aGUgd2VhcG9uIHNhbmsgaW4gdHdvIGZpbmdlcnMgZGVlcCwgYW5kIHRoZSBraW5nIGZlbGwgZnJvbSBoaXMgaG9yc2Ugd2l0aCB0aGUgYmxvdy4gQW1pZCB0aGUgZW5zdWluZyBjb25mdXNpb24gYW5kIGZsaWdodCBvZiBoaXMgaW1tZWRpYXRlIGZvbGxvd2VycywgdGhlIGtpbmcgcm9zZSB0byBoaXMgZmVldCwgYW5kIHdpdGggYSBmZXcgY29tcGFuaW9ucyBhbW9uZyB3aG9tIGFsc28gd2FzIEN0ZXNpYXMsIHRvb2sgcG9zc2Vzc2lvbiBvZiBhIGNlcnRhaW4gaGlsbCBuZWFyIGJ5IGFuZCByZW1haW5lZCB0aGVyZSBxdWlldGx5OyBidXQgQ3lydXMsIGVudmVsb3BlZCBieSBoaXMgZW5lbWllcywgd2FzIGJvcm5lIG9uIGEgbG9uZyBkaXN0YW5jZSBieSBoaXMgc3Bpcml0ZWQgaG9yc2UsIGFuZCBzaW5jZSBpdCB3YXMgbm93IGRhcmssIGhpcyBlbmVtaWVzIGRpZCBub3QgcmVjb2duaXplIGhpbSBhbmQgaGlzIGZyaWVuZHMgY291bGQgbm90IGZpbmQgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBsaWZ0ZWQgdXAgYnkgaGlzIHZpY3RvcnksIGFuZCBmdWxsIG9mIGltcGV0dW9zaXR5IGFuZCBjb25maWRlbmNlLCBoZSByb2RlIG9uIHRocm91Z2ggaGlzIGZvZXMsIGNyeWluZyBvdXQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DbGVhciB0aGUgd2F5LCB5ZSBiZWdnYXJzITwvcT4gVGh1cyBoZSBjcmllZCBvdXQgbWFueSB0aW1lcywgaW4gUGVyc2lhbiwgYW5kIHRoZXkgY2xlYXJlZCB0aGUgd2F5LCBhbmQgbWFkZSBoaW0gdGhlaXIgb2JlaXNhbmNlLiBCdXQgdGhlIHR1cmJhbiBvZiBDeXJ1cyBmZWxsIGZyb20gaGlzIGhlYWQsIGFuZCBhIHlvdW5nIFBlcnNpYW4sIE1pdGhyaWRhdGVzIGJ5IG5hbWUsIHJ1bm5pbmcgdG8gaGlzIHNpZGUsIHNtb3RlIGhpbSB3aXRoIGhpcyBzcGVhciBpbiB0aGUgdGVtcGxlLCBuZWFyIHRoZSBleWUsIG5vdCBrbm93aW5nIHdobyBoZSB3YXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk11Y2ggYmxvb2QgZ3VzaGVkIGZyb20gdGhlIHdvdW5kLCBhbmQgQ3lydXMsIHN0dW5uZWQgYW5kIGdpZGR5LCBmZWxsIHRvIHRoZSBncm91bmQuIEhpcyBob3JzZSBlc2NhcGVkIGFuZCB3YW5kZXJlZCBhYm91dCB0aGUgZmllbGQsIGJ1dCB0aGUgaG9yc2UncyBzYWRkbGUtY2xvdGgsIHdoaWNoIGhhZCBzbGlwcGVkIG9mZiwgd2FzIGNhcHR1cmVkIGJ5IHRoZSBhdHRlbmRhbnQgb2YgdGhlIG1hbiB3aG8gaGFkIHN0cnVjayBDeXJ1cywgYW5kIGl0IHdhcyBzb2FrZWQgd2l0aCBibG9vZC4gVGhlbiwgYXMgQ3lydXMgd2FzIHNsb3dseSBhbmQgd2l0aCBkaWZmaWN1bHR5IHJlY292ZXJpbmcgZnJvbSB0aGUgYmxvdywgYSBmZXcgZXVudWNocyB3aG8gd2VyZSBhdCBoYW5kIHRyaWVkIHRvIHB1dCBoaW0gdXBvbiBhbm90aGVyIGhvcnNlIGFuZCBicmluZyBoaW0gdG8gYSBwbGFjZSBvZiBzYWZldHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBoZSB3YXMgdW5hYmxlIHRvIHJpZGUgYW5kIGRlc2lyZWQgdG8gZ28gb24gaGlzIG93biBmZWV0LCB0aGV5IHN1cHBvcnRlZCBoaW0gYW5kIGxlZCBoaW0gYWxvbmcuIEhpcyBoZWFkIHdhcyBoZWF2eSBhbmQgaGUgcmVlbGVkIHRvIGFuZCBmcm8sIGJ1dCBoZSB0aG91Z2h0IGhlIHdhcyB2aWN0b3Jpb3VzIGJlY2F1c2UgaGUgaGVhcmQgdGhlIGZ1Z2l0aXZlcyBzYWx1dGluZyBDeXJ1cyBhcyBraW5nIGFuZCBiZWdnaW5nIGhpbSB0byBzcGFyZSB0aGVtLiBNZWFud2hpbGUgc29tZSBDYXVuaWFuc+KAlGxvdyBhbmQgcG92ZXJ0eS1zdHJpY2tlbiBtZW4gd2hvIGZvbGxvd2VkIHRoZSBraW5nJ3MgYXJteSB0byBkbyBtZW5pYWwgc2VydmljZeKAlGNoYW5jZWQgdG8gam9pbiB0aGUgcGFydHkgYWJvdXQgQ3lydXMsIHN1cHBvc2luZyB0aGVtIHRvIGJlIGZyaWVuZHMuIEJ1dCB3aGVuIGF0IGxhc3QgdGhleSBwZXJjZWl2ZWQgdGhhdCB0aGUgdHVuaWNzIG92ZXIgdGhlaXIgYnJlYXN0cGxhdGVzIHdlcmUgb2YgYSBwdXJwbGUgY29sb3VyLCB3aGVyZWFzIGFsbCB0aGUga2luZydzIHBlb3BsZSB3b3JlIHdoaXRlIG9uZXMsIHRoZXkga25ldyB0aGF0IHRoZXkgd2VyZSBlbmVtaWVzLiBBY2NvcmRpbmdseSwgb25lIG9mIHRoZW0sIG5vdCBrbm93aW5nIHdobyBDeXJ1cyB3YXMsIHZlbnR1cmVkIHRvIHNtaXRlIGhpbSBmcm9tIGJlaGluZCB3aXRoIGhpcyBzcGVhci4gVGhlIHZlaW4gaW4gdGhlIGhhbSBvZiBDeXJ1cyB3YXMgcnVwdHVyZWQgYW5kIGhlIGZlbGwsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIHN0cnVjayBoaXMgd291bmRlZCB0ZW1wbGUgYWdhaW5zdCBhIHN0b25lLCBhbmQgc28gZGllZC4gU3VjaCBpcyB0aGUgc3Rvcnkgb2YgQ3Rlc2lhcywgaW4gd2hpY2gsIGFzIHdpdGggYSBibHVudCBzd29yZCwgaGUgaXMgbG9uZyBpbiBraWxsaW5nIEN5cnVzLCBidXQga2lsbHMgaGltIGF0IGxhc3QuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ3lydXMgd2FzIG5vdyBkZWFkLCBBcnRhc3lyYXMsIHRoZSBraW5nJ3MgRXllLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgY29uZmlkZW50aWFsIG9mZmljZXIgb2YgaGlnaCByYW5rLCBhIFN1cGVyaW50ZW5kZW50IG9mIHRoZSBSZWFsbS48L25vdGU+IGNoYW5jZWQgdG8gcGFzcyBieSBvbiBob3JzZWJhY2ssIGFuZCByZWNvZ25pemluZyB0aGUgZXVudWNocyBhcyB0aGV5IGxhbWVudGVkLCBoZSBhc2tlZCB0aGUgdHJ1c3RpZXN0IG9mIHRoZW0sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hvIGlzIHRoaXMgbWFuLCBQYXJpc2NhcywgYnkgd2hvbSB0aG91IHNpdHRlc3QgbW91cm5pbmc/PC9xPiBBbmQgUGFyaXNjYXMgYW5zd2VyZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBBcnRhc3lyYXMsIGRvc3QgdGhvdSBub3Qgc2VlIEN5cnVzIGRlYWQ/PC9xPiBBc3RvbmlzaGVkIGF0IHRoaXMsIHRoZW4sIEFydGFzeXJhcyBiYWRlIHRoZSBldW51Y2ggYmUgb2YgZ29vZCBjb3VyYWdlIGFuZCBndWFyZCB0aGUgZGVhZCBib2R5LCBidXQgaGUgaGltc2VsZiB3ZW50IGluIGhvdCBoYXN0ZSB0byBBcnRheGVyeGVzIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPih3aG8gaGFkIGFscmVhZHkgZ2l2ZW4gdXAgaGlzIGNhdXNlIGZvciBsb3N0LCBhbmQgYmVzaWRlcyB3YXMgcGh5c2ljYWxseSBpbiBhIHdyZXRjaGVkIHBsaWdodCBmcm9tIHRoaXJzdCBhbmQgZnJvbSBoaXMgd291bmQpLCBhbmQgam95ZnVsbHkgdG9sZCBoaW0gdGhhdCB3aXRoIGhpcyBvd24gZXllcyBoZSBoYWQgc2VlbiBDeXJ1cyBkZWFkLiBBdCBmaXJzdCB0aGUga2luZyBwcm9tcHRseSBzZXQgb3V0IHRvIGdvIGluIHBlcnNvbiB0byB0aGUgcGxhY2UsIGFuZCBvcmRlcmVkIEFydGFzeXJhcyB0byBjb25kdWN0IGhpbSB0aGl0aGVyOyBidXQgc2luY2UgdGhlcmUgd2FzIG11Y2ggdGFsayBhYm91dCB0aGUgR3JlZWtzLCBhbmQgaXQgd2FzIGZlYXJlZCB0aGF0IHRoZXkgd2VyZSBwdXJzdWluZyBhbmQgY29ucXVlcmluZyBhbmQgbWFraW5nIHRoZW1zZWx2ZXMgbWFzdGVycyBldmVyeXdoZXJlLCBoZSBkZWNpZGVkIHRvIHNlbmQgYSBsYXJnZXIgY29tcGFueSB0byBzZWUgd2hlcmUgQ3lydXMgbGF5LiBTbyB0aGlydHkgbWVuIHdlcmUgc2VudCwgd2l0aCB0b3JjaGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5NZWFud2hpbGUsIHNpbmNlIHRoZSBraW5nIHdhcyBhbG1vc3QgZGVhZCB3aXRoIHRoaXJzdCwgU2F0aWJhcnphbmVzIHRoZSBldW51Y2ggcmFuIGFib3V0IGluIHF1ZXN0IG9mIGEgZHJpbmsgZm9yIGhpbTsgZm9yIHRoZSBwbGFjZSBoYWQgbm8gd2F0ZXIsIGFuZCB0aGUgY2FtcCB3YXMgZmFyIGF3YXkuIEF0IGxhc3QsIHRoZW4sIGhlIGNhbWUgdXBvbiBvbmUgb2YgdGhvc2UgbG93IENhdW5pYW5zLCB3aG8gaGFkIHZpbGUgYW5kIHBvbGx1dGVkIHdhdGVyIGluIGEgd3JldGNoZWQgc2tpbiwgYWJvdXQgdHdvIHF1YXJ0cyBpbiBhbGw6IHRoaXMgaGUgdG9vaywgYnJvdWdodCBpdCB0byB0aGUga2luZywgYW5kIGdhdmUgaXQgdG8gaGltLiBBZnRlciB0aGUga2luZyBoYWQgZHJ1bmsgaXQgYWxsIG9mZiwgdGhlIGV1bnVjaCBhc2tlZCBoaW0gaWYgaGUgd2FzIG5vdCBhbHRvZ2V0aGVyIGRpc2d1c3RlZCB3aXRoIHRoZSBkcmluay4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBraW5nIHN3b3JlIGJ5IHRoZSBnb2RzIHRoYXQgaGUgaGFkIG5ldmVyIGRydW5rIHdpbmUsIG9yIHRoZSBsaWdodGVzdCBhbmQgcHVyZXN0IHdhdGVyLCB3aXRoIHNvIG11Y2ggcGxlYXN1cmUuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlcmVmb3JlLDwvcT4gc2FpZCB0aGUga2luZywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiBJIHNob3VsZCBiZSB1bmFibGUgdG8gZmluZCBhbmQgcmV3YXJkIHRoZSBtYW4gd2hvIGdhdmUgdGhlZSB0aGlzIGRyaW5rLCBJIHByYXkgdGhlIGdvZHMgdG8gbWFrZSBoaW0gcmljaCBhbmQgaGFwcHkuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDeXJ1cyB3YXMgbm93IGRlYWQsIEFydGFzeXJhcywgdGhlIGtpbmcncyBFeWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGNvbmZpZGVudGlhbCBvZmZpY2VyIG9mIGhpZ2ggcmFuaywgYSBTdXBlcmludGVuZGVudCBvZiB0aGUgUmVhbG0uPC9ub3RlPiBjaGFuY2VkIHRvIHBhc3MgYnkgb24gaG9yc2ViYWNrLCBhbmQgcmVjb2duaXppbmcgdGhlIGV1bnVjaHMgYXMgdGhleSBsYW1lbnRlZCwgaGUgYXNrZWQgdGhlIHRydXN0aWVzdCBvZiB0aGVtLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hvIGlzIHRoaXMgbWFuLCBQYXJpc2NhcywgYnkgd2hvbSB0aG91IHNpdHRlc3QgbW91cm5pbmc/PC9xPiBBbmQgUGFyaXNjYXMgYW5zd2VyZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIEFydGFzeXJhcywgZG9zdCB0aG91IG5vdCBzZWUgQ3lydXMgZGVhZD88L3E+IEFzdG9uaXNoZWQgYXQgdGhpcywgdGhlbiwgQXJ0YXN5cmFzIGJhZGUgdGhlIGV1bnVjaCBiZSBvZiBnb29kIGNvdXJhZ2UgYW5kIGd1YXJkIHRoZSBkZWFkIGJvZHksIGJ1dCBoZSBoaW1zZWxmIHdlbnQgaW4gaG90IGhhc3RlIHRvIEFydGF4ZXJ4ZXMgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPih3aG8gaGFkIGFscmVhZHkgZ2l2ZW4gdXAgaGlzIGNhdXNlIGZvciBsb3N0LCBhbmQgYmVzaWRlcyB3YXMgcGh5c2ljYWxseSBpbiBhIHdyZXRjaGVkIHBsaWdodCBmcm9tIHRoaXJzdCBhbmQgZnJvbSBoaXMgd291bmQpLCBhbmQgam95ZnVsbHkgdG9sZCBoaW0gdGhhdCB3aXRoIGhpcyBvd24gZXllcyBoZSBoYWQgc2VlbiBDeXJ1cyBkZWFkLiBBdCBmaXJzdCB0aGUga2luZyBwcm9tcHRseSBzZXQgb3V0IHRvIGdvIGluIHBlcnNvbiB0byB0aGUgcGxhY2UsIGFuZCBvcmRlcmVkIEFydGFzeXJhcyB0byBjb25kdWN0IGhpbSB0aGl0aGVyOyBidXQgc2luY2UgdGhlcmUgd2FzIG11Y2ggdGFsayBhYm91dCB0aGUgR3JlZWtzLCBhbmQgaXQgd2FzIGZlYXJlZCB0aGF0IHRoZXkgd2VyZSBwdXJzdWluZyBhbmQgY29ucXVlcmluZyBhbmQgbWFraW5nIHRoZW1zZWx2ZXMgbWFzdGVycyBldmVyeXdoZXJlLCBoZSBkZWNpZGVkIHRvIHNlbmQgYSBsYXJnZXIgY29tcGFueSB0byBzZWUgd2hlcmUgQ3lydXMgbGF5LiBTbyB0aGlydHkgbWVuIHdlcmUgc2VudCwgd2l0aCB0b3JjaGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSwgc2luY2UgdGhlIGtpbmcgd2FzIGFsbW9zdCBkZWFkIHdpdGggdGhpcnN0LCBTYXRpYmFyemFuZXMgdGhlIGV1bnVjaCByYW4gYWJvdXQgaW4gcXVlc3Qgb2YgYSBkcmluayBmb3IgaGltOyBmb3IgdGhlIHBsYWNlIGhhZCBubyB3YXRlciwgYW5kIHRoZSBjYW1wIHdhcyBmYXIgYXdheS4gQXQgbGFzdCwgdGhlbiwgaGUgY2FtZSB1cG9uIG9uZSBvZiB0aG9zZSBsb3cgQ2F1bmlhbnMsIHdobyBoYWQgdmlsZSBhbmQgcG9sbHV0ZWQgd2F0ZXIgaW4gYSB3cmV0Y2hlZCBza2luLCBhYm91dCB0d28gcXVhcnRzIGluIGFsbDogdGhpcyBoZSB0b29rLCBicm91Z2h0IGl0IHRvIHRoZSBraW5nLCBhbmQgZ2F2ZSBpdCB0byBoaW0uIEFmdGVyIHRoZSBraW5nIGhhZCBkcnVuayBpdCBhbGwgb2ZmLCB0aGUgZXVudWNoIGFza2VkIGhpbSBpZiBoZSB3YXMgbm90IGFsdG9nZXRoZXIgZGlzZ3VzdGVkIHdpdGggdGhlIGRyaW5rLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUga2luZyBzd29yZSBieSB0aGUgZ29kcyB0aGF0IGhlIGhhZCBuZXZlciBkcnVuayB3aW5lLCBvciB0aGUgbGlnaHRlc3QgYW5kIHB1cmVzdCB3YXRlciwgd2l0aCBzbyBtdWNoIHBsZWFzdXJlLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlcmVmb3JlLDwvcT4gc2FpZCB0aGUga2luZywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIEkgc2hvdWxkIGJlIHVuYWJsZSB0byBmaW5kIGFuZCByZXdhcmQgdGhlIG1hbiB3aG8gZ2F2ZSB0aGVlIHRoaXMgZHJpbmssIEkgcHJheSB0aGUgZ29kcyB0byBtYWtlIGhpbSByaWNoIGFuZCBoYXBweS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgdGhlIHRoaXJ0eSBtZXNzZW5nZXJzIGNhbWUgcmlkaW5nIHVwIHdpdGggam95IGFuZCBleHVsdGF0aW9uIGluIHRoZWlyIGZhY2VzLCBhbm5vdW5jaW5nIHRvIHRoZSBraW5nIGhpcyB1bmV4cGVjdGVkIGdvb2QgZm9ydHVuZS4gUHJlc2VudGx5LCB0b28sIGhlIHdhcyBlbmNvdXJhZ2VkIGJ5IHRoZSBudW1iZXIgb2YgbWVuIHdobyBmbG9ja2VkIGJhY2sgdG8gaGltIGFuZCBmb3JtZWQgaW4gYmF0dGxlIGFycmF5LCBhbmQgc28gaGUgY2FtZSBkb3duIGZyb20gdGhlIGhpbGwgdW5kZXIgdGhlIGxpZ2h0IG9mIG1hbnkgdG9yY2hlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFmdGVyIGhlIGhhZCBoYWx0ZWQgYXQgdGhlIGRlYWQgYm9keSBvZiBDeXJ1cywgYW5kIGl0cyByaWdodCBoYW5kIGFuZCBoZWFkIGhhZCBiZWVuIGN1dCBvZmYgKGluIGFjY29yZGFuY2Ugd2l0aCBhIGxhdyBvZiB0aGUgUGVyc2lhbnMpLCBoZSBvcmRlcmVkIHRoZSBoZWFkIHRvIGJlIGJyb3VnaHQgdG8gaGltOyBhbmQgZ3Jhc3BpbmcgaXQgYnkgdGhlIGhhaXIsIHdoaWNoIHdhcyBsb25nIGFuZCBidXNoeSwgaGUgc2hvd2VkIGl0IHRvIHRob3NlIHdobyB3ZXJlIHN0aWxsIHdhdmVyaW5nIGFuZCBkaXNwb3NlZCB0byBmbHkuIFRoZXNlIHdlcmUgYW1hemVkLCBhbmQgbWFkZSBvYmVpc2FuY2UgdG8gdGhlIGtpbmcsIHNvIHRoYXQgdmVyeSBzb29uIHNldmVudHkgdGhvdXNhbmQgbWVuIHdlcmUgYWJvdXQgaGltIGFuZCBtYXJjaGVkIGJhY2sgd2l0aCBoaW0gdG8gdGhlaXIgY2FtcC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGFkIG1hcmNoZWQgb3V0IHRvIHRoZSBiYXR0bGUsIGFzIEN0ZXNpYXMgc2F5cywgd2l0aCBmb3VyIGh1bmRyZWQgdGhvdXNhbmQgbWVuLiBCdXQgRGVpbm9uIGFuZCBYZW5vcGhvbiBzYXkgdGhhdCB0aGUgYXJteSB3aGljaCBmb3VnaHQgdW5kZXIgaGltIHdhcyBtdWNoIGxhcmdlci4gQXMgdG8gdGhlIG51bWJlciBvZiBoaXMgZGVhZCwgQ3Rlc2lhcyBzYXlzIHRoYXQgaXQgd2FzIHJlcG9ydGVkIHRvIEFydGF4ZXJ4ZXMgYXMgbmluZSB0aG91c2FuZCwgYnV0IHRoYXQgaGUgaGltc2VsZiB0aG91Z2h0IHRoZSBzbGFpbiBubyBmZXdlciB0aGFuIHR3ZW50eSB0aG91c2FuZC4gVGhpcyBtYXR0ZXIsIHRoZW4sIGlzIGluIGRpc3B1dGUuIEJ1dCBpdCBpcyBjZXJ0YWlubHkgYSBnbGFyaW5nIGZhbHNlaG9vZCBvbiB0aGUgcGFydCBvZiBDdGVzaWFzIHRvIHNheSB0aGF0IGhlIHdhcyBzZW50IHRvIHRoZSBHcmVla3MgYWxvbmcgd2l0aCBQaGFsaW51cyB0aGUgWmFjeW50aGlhbiBhbmQgY2VydGFpbiBvdGhlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBYZW5vcGhvbiBrbmV3IHRoYXQgQ3Rlc2lhcyB3YXMgaW4gYXR0ZW5kYW5jZSB1cG9uIHRoZSBraW5nLCBzaW5jZSBoZSBtYWtlcyBtZW50aW9uIG9mIGhpbSBhbmQgaGFkIGV2aWRlbnRseSByZWFkIGhpcyB3b3JrczsgaWYsIHRoZW4sIEN0ZXNpYXMgaGFkIGNvbWUgdG8gdGhlIEdyZWVrcyBhbmQgc2VydmVkIGFzIGFuIGludGVycHJldGVyIGluIHNvIG1vbWVudG91cyBhIGNvbGxvcXV5LCBYZW5vcGhvbiB3b3VsZCBub3QgaGF2ZSBsZWZ0IGhpbSBuYW1lbGVzcyBhbmQgbmFtZWQgb25seSBQaGFsaW51cyB0aGUgWmFjeW50aGlhbi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMi4xLjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QW5hYi48L3RpdGxlPiBpaS4gMS4gNy0yMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlIHRydXRoIGlzIHRoYXQgQ3Rlc2lhcywgYmVpbmcgcHJvZGlnaW91c2x5IGFtYml0aW91cywgYXMgaXQgd291bGQgc2VlbSwgYW5kIG5vbmUgdGhlIGxlc3MgcGFydGlhbCB0byBTcGFydGEgYW5kIHRvIENsZWFyY2h1cywgYWx3YXlzIGFsbG93cyBjb25zaWRlcmFibGUgc3BhY2UgaW4gaGlzIG5hcnJhdGl2ZSBmb3IgaGltc2VsZiwgYW5kIHRoZXJlIGhlIHdpbGwgc2F5IG1hbnkgZmluZSB0aGluZ3MgYWJvdXQgQ2xlYXJjaHVzIGFuZCBTcGFydGEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0aGUgdGhpcnR5IG1lc3NlbmdlcnMgY2FtZSByaWRpbmcgdXAgd2l0aCBqb3kgYW5kIGV4dWx0YXRpb24gaW4gdGhlaXIgZmFjZXMsIGFubm91bmNpbmcgdG8gdGhlIGtpbmcgaGlzIHVuZXhwZWN0ZWQgZ29vZCBmb3J0dW5lLiBQcmVzZW50bHksIHRvbywgaGUgd2FzIGVuY291cmFnZWQgYnkgdGhlIG51bWJlciBvZiBtZW4gd2hvIGZsb2NrZWQgYmFjayB0byBoaW0gYW5kIGZvcm1lZCBpbiBiYXR0bGUgYXJyYXksIGFuZCBzbyBoZSBjYW1lIGRvd24gZnJvbSB0aGUgaGlsbCB1bmRlciB0aGUgbGlnaHQgb2YgbWFueSB0b3JjaGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciBoZSBoYWQgaGFsdGVkIGF0IHRoZSBkZWFkIGJvZHkgb2YgQ3lydXMsIGFuZCBpdHMgcmlnaHQgaGFuZCBhbmQgaGVhZCBoYWQgYmVlbiBjdXQgb2ZmIChpbiBhY2NvcmRhbmNlIHdpdGggYSBsYXcgb2YgdGhlIFBlcnNpYW5zKSwgaGUgb3JkZXJlZCB0aGUgaGVhZCB0byBiZSBicm91Z2h0IHRvIGhpbTsgYW5kIGdyYXNwaW5nIGl0IGJ5IHRoZSBoYWlyLCB3aGljaCB3YXMgbG9uZyBhbmQgYnVzaHksIGhlIHNob3dlZCBpdCB0byB0aG9zZSB3aG8gd2VyZSBzdGlsbCB3YXZlcmluZyBhbmQgZGlzcG9zZWQgdG8gZmx5LiBUaGVzZSB3ZXJlIGFtYXplZCwgYW5kIG1hZGUgb2JlaXNhbmNlIHRvIHRoZSBraW5nLCBzbyB0aGF0IHZlcnkgc29vbiBzZXZlbnR5IHRob3VzYW5kIG1lbiB3ZXJlIGFib3V0IGhpbSBhbmQgbWFyY2hlZCBiYWNrIHdpdGggaGltIHRvIHRoZWlyIGNhbXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBtYXJjaGVkIG91dCB0byB0aGUgYmF0dGxlLCBhcyBDdGVzaWFzIHNheXMsIHdpdGggZm91ciBodW5kcmVkIHRob3VzYW5kIG1lbi4gQnV0IERlaW5vbiBhbmQgWGVub3Bob24gc2F5IHRoYXQgdGhlIGFybXkgd2hpY2ggZm91Z2h0IHVuZGVyIGhpbSB3YXMgbXVjaCBsYXJnZXIuIEFzIHRvIHRoZSBudW1iZXIgb2YgaGlzIGRlYWQsIEN0ZXNpYXMgc2F5cyB0aGF0IGl0IHdhcyByZXBvcnRlZCB0byBBcnRheGVyeGVzIGFzIG5pbmUgdGhvdXNhbmQsIGJ1dCB0aGF0IGhlIGhpbXNlbGYgdGhvdWdodCB0aGUgc2xhaW4gbm8gZmV3ZXIgdGhhbiB0d2VudHkgdGhvdXNhbmQuIFRoaXMgbWF0dGVyLCB0aGVuLCBpcyBpbiBkaXNwdXRlLiBCdXQgaXQgaXMgY2VydGFpbmx5IGEgZ2xhcmluZyBmYWxzZWhvb2Qgb24gdGhlIHBhcnQgb2YgQ3Rlc2lhcyB0byBzYXkgdGhhdCBoZSB3YXMgc2VudCB0byB0aGUgR3JlZWtzIGFsb25nIHdpdGggUGhhbGludXMgdGhlIFphY3ludGhpYW4gYW5kIGNlcnRhaW4gb3RoZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBYZW5vcGhvbiBrbmV3IHRoYXQgQ3Rlc2lhcyB3YXMgaW4gYXR0ZW5kYW5jZSB1cG9uIHRoZSBraW5nLCBzaW5jZSBoZSBtYWtlcyBtZW50aW9uIG9mIGhpbSBhbmQgaGFkIGV2aWRlbnRseSByZWFkIGhpcyB3b3JrczsgaWYsIHRoZW4sIEN0ZXNpYXMgaGFkIGNvbWUgdG8gdGhlIEdyZWVrcyBhbmQgc2VydmVkIGFzIGFuIGludGVycHJldGVyIGluIHNvIG1vbWVudG91cyBhIGNvbGxvcXV5LCBYZW5vcGhvbiB3b3VsZCBub3QgaGF2ZSBsZWZ0IGhpbSBuYW1lbGVzcyBhbmQgbmFtZWQgb25seSBQaGFsaW51cyB0aGUgWmFjeW50aGlhbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFuYWIuIDIuMS43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaS4gMS4gNy0yMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlIHRydXRoIGlzIHRoYXQgQ3Rlc2lhcywgYmVpbmcgcHJvZGlnaW91c2x5IGFtYml0aW91cywgYXMgaXQgd291bGQgc2VlbSwgYW5kIG5vbmUgdGhlIGxlc3MgcGFydGlhbCB0byBTcGFydGEgYW5kIHRvIENsZWFyY2h1cywgYWx3YXlzIGFsbG93cyBjb25zaWRlcmFibGUgc3BhY2UgaW4gaGlzIG5hcnJhdGl2ZSBmb3IgaGltc2VsZiwgYW5kIHRoZXJlIGhlIHdpbGwgc2F5IG1hbnkgZmluZSB0aGluZ3MgYWJvdXQgQ2xlYXJjaHVzIGFuZCBTcGFydGEuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMi4xLjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpLiAxLiA3LTIzLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaS4gMS4gNy0yMy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgYmF0dGxlLCB0aGUga2luZyBzZW50IHRoZSBsYXJnZXN0IGFuZCBtb3N0IGJlYXV0aWZ1bCBnaWZ0cyB0byB0aGUgc29uIG9mIHRoYXQgQXJ0YWdlcnNlcyB3aG8gZmVsbCBhdCB0aGUgaGFuZHMgb2YgQ3lydXM7IGhlIGFsc28gZ2F2ZSBnZW5lcm91cyByZXdhcmRzIHRvIEN0ZXNpYXMgYW5kIG90aGVycywgYW5kIHdoZW4gaGUgaGFkIGZvdW5kIG91dCB0aGUgQ2F1bmlhbiB3aG8gaGFkIGdpdmVuIGhpbSB0aGUgc2tpbiBvZiB3YXRlciwgaGUgcmFpc2VkIGhpbSBmcm9tIG9ic2N1cml0eSBhbmQgcG92ZXJ0eSB0byBob25vdXIgYW5kIHdlYWx0aC4gVGhlcmUgd2FzIG11Y2ggd2F0Y2hmdWwgY2FyZSBhbHNvIGluIGhpcyBwdW5pc2htZW50IG9mIHRob3NlIHdobyBoYWQgZ29uZSB3cm9uZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGV4YW1wbGUsIGluIHRoZSBjYXNlIG9mIEFyYmFjZXMsIGEgTWVkZSwgd2hvIGhhZCBydW4gYXdheSB0byBDeXJ1cyBkdXJpbmcgdGhlIGJhdHRsZSwgYW5kLCB3aGVuIEN5cnVzIGZlbGwsIGhhZCBjaGFuZ2VkIGJhY2sgYWdhaW4sIHRoZSBraW5nIHByb25vdW5jZWQgaGltIGd1aWx0eSwgbm90IG9mIHRyZWFjaGVyeSwgbm9yIGV2ZW4gb2YgbWFsaWNlLCBidXQgb2YgY293YXJkaWNlIGFuZCB3ZWFrbmVzcywgYW5kIG9yZGVyZWQgaGltIHRvIHRha2UgYSBuYWtlZCBoYXJsb3QgYXN0cmlkZSBoaXMgbmVjayBhbmQgY2FycnkgaGVyIGFib3V0IGluIHRoZSBtYXJrZXQtcGxhY2UgZm9yIGEgd2hvbGUgZGF5LiBBbmQgaW4gdGhlIGNhc2Ugb2YgYW5vdGhlciBtYW4sIHdobywgYmVzaWRlcyBnb2luZyBvdmVyIHRvIHRoZSBlbmVteSwgaGFkIGx5aW5nbHkgYm9hc3RlZCB0aGF0IGhlIGhhZCBzbGFpbiB0d28gb2YgdGhlbSwgdGhlIGtpbmcgb3JkZXJlZCB0aGF0IGhpcyB0b25ndWUgc2hvdWxkIGJlIHBpZXJjZWQgd2l0aCB0aHJlZSBuZWVkbGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgYmVsaWV2aW5nLCBhbmQgd2lzaGluZyBhbGwgbWVuIHRvIHRoaW5rLCBhbmQgc2F5LCB0aGF0IGhlIGhhZCBraWxsZWQgQ3lydXMgd2l0aCBoaXMgb3duIGhhbmQsIGhlIHNlbnQgZ2lmdHMgdG8gTWl0aHJpZGF0ZXMsIHRoZSBvbmUgd2hvIGZpcnN0IGhpdCBDeXJ1cywgYW5kIG9yZGVyZWQgdGhlIGJlYXJlcnMgb2YgdGhlIGdpZnRzIHRvIHNheTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGlzIHRoeSByZXdhcmQgZnJvbSB0aGUga2luZyBiZWNhdXNlIHRob3UgZGlkc3QgZmluZCBhbmQgYnJpbmcgdG8gaGltIHRoZSB0cmFwcGluZ3Mgb2YgdGhlIGhvcnNlIG9mIEN5cnVzLjwvcT4gQWdhaW4sIHdoZW4gdGhlIENhcmlhbiwgZnJvbSB3aG9tIEN5cnVzIHJlY2VpdmVkIHRoZSBibG93IGluIHRoZSBoYW0gd2hpY2ggYnJvdWdodCBoaW0gZG93biwgYXNrZWQgdGhhdCBoZSBhbHNvIHNob3VsZCByZWNlaXZlIGEgZ2lmdCwgdGhlIGtpbmcgb3JkZXJlZCBpdHMgYmVhcmVycyB0byBzYXk6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIGtpbmcgZ2l2ZXMgdGhlZSB0aGVzZSB0aGluZ3MgYXMgYSBzZWNvbmQgcHJpemUgZm9yIGdvb2QgdGlkaW5nczsgZm9yIEFydGFzeXJhcyBjYW1lIGZpcnN0LCBhbmQgYWZ0ZXIgaGltIHRob3UgZGlkc3QgY29tZSwgd2l0aCB0aWRpbmdzIG9mIHRoZSBkZWF0aCBvZiBDeXJ1cy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBNaXRocmlkYXRlcyB3ZW50IGF3YXkgd2l0aG91dCBhIHdvcmQsIGFsdGhvdWdoIGhlIHdhcyB2ZXhlZDsgYnV0IHRoZSB3cmV0Y2hlZCBDYXJpYW4sIGluIGhpcyBmb2xseSwgZ2F2ZSB3YXkgdG8gYSBjb21tb24gZmVlbGluZy4gVGhhdCBpcywgaGUgd2FzIGNvcnJ1cHRlZCwgaXQgd291bGQgc2VlbSwgYnkgdGhlIGdvb2QgdGhpbmdzIHdoaWNoIGhlIGhhZCwgYW5kIGxlZCBieSB0aGVtIHRvIGFzcGlyZSBhdCBvbmNlIHRvIHRoaW5ncyBiZXlvbmQgaGlzIHJlYWNoLCBzbyB0aGF0IGhlIHdvdWxkIG5vdCBkZWlnbiB0byB0YWtlIHRoZSBnaWZ0cyBhcyBhIHJld2FyZCBmb3IgZ29vZCB0aWRpbmdzLCBidXQgd2FzIGluZGlnbmFudCwgY2FsbGluZyBtZW4gdG8gd2l0bmVzcyBhbmQgY3J5aW5nIGluIGxvdWQgdG9uZXMgdGhhdCBpdCB3YXMgaGUgaGltc2VsZiwgYW5kIG5vIG9uZSBlbHNlLCB3aG8gaGFkIGtpbGxlZCBDeXJ1cywgYW5kIHRoYXQgaGUgd2FzIHVuanVzdGx5IHJvYmJlZCBvZiBoaXMgZ2xvcnkuIFdoZW4gdGhlIGtpbmcgaGVhcmQgb2YgdGhpcywgaGUgd2FzIHZlaGVtZW50bHkgYW5ncnkgYW5kIGdhdmUgb3JkZXJzIHRoYXQgdGhlIG1hbiBzaG91bGQgYmUgYmVoZWFkZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZXJldXBvbiB0aGUga2luZydzIG1vdGhlciwgd2hvIHdhcyBwcmVzZW50LCBzYWlkIHRvIGhpbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIEtpbmcsIGRvIG5vdCBsZXQgdGhpcyBhY2N1cnNlZCBDYXJpYW4gb2ZmIHNvIGVhc2lseSwgYnV0IGxlYXZlIGhpbSB0byBtZSwgYW5kIGhlIHNoYWxsIHJlY2VpdmUgdGhlIGZpdHRpbmcgcmV3YXJkIGZvciBoaXMgZGFyaW5nIHdvcmRzLjwvcT4gU28gdGhlIGtpbmcgY29uc2lnbmVkIHRoZSBtYW4gdG8gUGFyeXNhdGlzLCB3aG8gb3JkZXJlZCB0aGUgZXhlY3V0aW9uZXJzIHRvIHRha2UgaGltIGFuZCByYWNrIGhpbSBvbiB0aGUgd2hlZWwgZm9yIHRlbiBkYXlzLCB0aGVuIHRvIGdvdWdlIG91dCBoaXMgZXllcywgYW5kIGZpbmFsbHkgdG8gZHJvcCBtb2x0ZW4gYnJhc3MgaW50byBoaXMgZWFycyB1bnRpbCBoZSBkaWVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGJhdHRsZSwgdGhlIGtpbmcgc2VudCB0aGUgbGFyZ2VzdCBhbmQgbW9zdCBiZWF1dGlmdWwgZ2lmdHMgdG8gdGhlIHNvbiBvZiB0aGF0IEFydGFnZXJzZXMgd2hvIGZlbGwgYXQgdGhlIGhhbmRzIG9mIEN5cnVzOyBoZSBhbHNvIGdhdmUgZ2VuZXJvdXMgcmV3YXJkcyB0byBDdGVzaWFzIGFuZCBvdGhlcnMsIGFuZCB3aGVuIGhlIGhhZCBmb3VuZCBvdXQgdGhlIENhdW5pYW4gd2hvIGhhZCBnaXZlbiBoaW0gdGhlIHNraW4gb2Ygd2F0ZXIsIGhlIHJhaXNlZCBoaW0gZnJvbSBvYnNjdXJpdHkgYW5kIHBvdmVydHkgdG8gaG9ub3VyIGFuZCB3ZWFsdGguIFRoZXJlIHdhcyBtdWNoIHdhdGNoZnVsIGNhcmUgYWxzbyBpbiBoaXMgcHVuaXNobWVudCBvZiB0aG9zZSB3aG8gaGFkIGdvbmUgd3JvbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBleGFtcGxlLCBpbiB0aGUgY2FzZSBvZiBBcmJhY2VzLCBhIE1lZGUsIHdobyBoYWQgcnVuIGF3YXkgdG8gQ3lydXMgZHVyaW5nIHRoZSBiYXR0bGUsIGFuZCwgd2hlbiBDeXJ1cyBmZWxsLCBoYWQgY2hhbmdlZCBiYWNrIGFnYWluLCB0aGUga2luZyBwcm9ub3VuY2VkIGhpbSBndWlsdHksIG5vdCBvZiB0cmVhY2hlcnksIG5vciBldmVuIG9mIG1hbGljZSwgYnV0IG9mIGNvd2FyZGljZSBhbmQgd2Vha25lc3MsIGFuZCBvcmRlcmVkIGhpbSB0byB0YWtlIGEgbmFrZWQgaGFybG90IGFzdHJpZGUgaGlzIG5lY2sgYW5kIGNhcnJ5IGhlciBhYm91dCBpbiB0aGUgbWFya2V0LXBsYWNlIGZvciBhIHdob2xlIGRheS4gQW5kIGluIHRoZSBjYXNlIG9mIGFub3RoZXIgbWFuLCB3aG8sIGJlc2lkZXMgZ29pbmcgb3ZlciB0byB0aGUgZW5lbXksIGhhZCBseWluZ2x5IGJvYXN0ZWQgdGhhdCBoZSBoYWQgc2xhaW4gdHdvIG9mIHRoZW0sIHRoZSBraW5nIG9yZGVyZWQgdGhhdCBoaXMgdG9uZ3VlIHNob3VsZCBiZSBwaWVyY2VkIHdpdGggdGhyZWUgbmVlZGxlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBiZWxpZXZpbmcsIGFuZCB3aXNoaW5nIGFsbCBtZW4gdG8gdGhpbmssIGFuZCBzYXksIHRoYXQgaGUgaGFkIGtpbGxlZCBDeXJ1cyB3aXRoIGhpcyBvd24gaGFuZCwgaGUgc2VudCBnaWZ0cyB0byBNaXRocmlkYXRlcywgdGhlIG9uZSB3aG8gZmlyc3QgaGl0IEN5cnVzLCBhbmQgb3JkZXJlZCB0aGUgYmVhcmVycyBvZiB0aGUgZ2lmdHMgdG8gc2F5OiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBpcyB0aHkgcmV3YXJkIGZyb20gdGhlIGtpbmcgYmVjYXVzZSB0aG91IGRpZHN0IGZpbmQgYW5kIGJyaW5nIHRvIGhpbSB0aGUgdHJhcHBpbmdzIG9mIHRoZSBob3JzZSBvZiBDeXJ1cy48L3E+IEFnYWluLCB3aGVuIHRoZSBDYXJpYW4sIGZyb20gd2hvbSBDeXJ1cyByZWNlaXZlZCB0aGUgYmxvdyBpbiB0aGUgaGFtIHdoaWNoIGJyb3VnaHQgaGltIGRvd24sIGFza2VkIHRoYXQgaGUgYWxzbyBzaG91bGQgcmVjZWl2ZSBhIGdpZnQsIHRoZSBraW5nIG9yZGVyZWQgaXRzIGJlYXJlcnMgdG8gc2F5OiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIGtpbmcgZ2l2ZXMgdGhlZSB0aGVzZSB0aGluZ3MgYXMgYSBzZWNvbmQgcHJpemUgZm9yIGdvb2QgdGlkaW5nczsgZm9yIEFydGFzeXJhcyBjYW1lIGZpcnN0LCBhbmQgYWZ0ZXIgaGltIHRob3UgZGlkc3QgY29tZSwgd2l0aCB0aWRpbmdzIG9mIHRoZSBkZWF0aCBvZiBDeXJ1cy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgTWl0aHJpZGF0ZXMgd2VudCBhd2F5IHdpdGhvdXQgYSB3b3JkLCBhbHRob3VnaCBoZSB3YXMgdmV4ZWQ7IGJ1dCB0aGUgd3JldGNoZWQgQ2FyaWFuLCBpbiBoaXMgZm9sbHksIGdhdmUgd2F5IHRvIGEgY29tbW9uIGZlZWxpbmcuIFRoYXQgaXMsIGhlIHdhcyBjb3JydXB0ZWQsIGl0IHdvdWxkIHNlZW0sIGJ5IHRoZSBnb29kIHRoaW5ncyB3aGljaCBoZSBoYWQsIGFuZCBsZWQgYnkgdGhlbSB0byBhc3BpcmUgYXQgb25jZSB0byB0aGluZ3MgYmV5b25kIGhpcyByZWFjaCwgc28gdGhhdCBoZSB3b3VsZCBub3QgZGVpZ24gdG8gdGFrZSB0aGUgZ2lmdHMgYXMgYSByZXdhcmQgZm9yIGdvb2QgdGlkaW5ncywgYnV0IHdhcyBpbmRpZ25hbnQsIGNhbGxpbmcgbWVuIHRvIHdpdG5lc3MgYW5kIGNyeWluZyBpbiBsb3VkIHRvbmVzIHRoYXQgaXQgd2FzIGhlIGhpbXNlbGYsIGFuZCBubyBvbmUgZWxzZSwgd2hvIGhhZCBraWxsZWQgQ3lydXMsIGFuZCB0aGF0IGhlIHdhcyB1bmp1c3RseSByb2JiZWQgb2YgaGlzIGdsb3J5LiBXaGVuIHRoZSBraW5nIGhlYXJkIG9mIHRoaXMsIGhlIHdhcyB2ZWhlbWVudGx5IGFuZ3J5IGFuZCBnYXZlIG9yZGVycyB0aGF0IHRoZSBtYW4gc2hvdWxkIGJlIGJlaGVhZGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZXJldXBvbiB0aGUga2luZydzIG1vdGhlciwgd2hvIHdhcyBwcmVzZW50LCBzYWlkIHRvIGhpbTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gS2luZywgZG8gbm90IGxldCB0aGlzIGFjY3Vyc2VkIENhcmlhbiBvZmYgc28gZWFzaWx5LCBidXQgbGVhdmUgaGltIHRvIG1lLCBhbmQgaGUgc2hhbGwgcmVjZWl2ZSB0aGUgZml0dGluZyByZXdhcmQgZm9yIGhpcyBkYXJpbmcgd29yZHMuPC9xPiBTbyB0aGUga2luZyBjb25zaWduZWQgdGhlIG1hbiB0byBQYXJ5c2F0aXMsIHdobyBvcmRlcmVkIHRoZSBleGVjdXRpb25lcnMgdG8gdGFrZSBoaW0gYW5kIHJhY2sgaGltIG9uIHRoZSB3aGVlbCBmb3IgdGVuIGRheXMsIHRoZW4gdG8gZ291Z2Ugb3V0IGhpcyBleWVzLCBhbmQgZmluYWxseSB0byBkcm9wIG1vbHRlbiBicmFzcyBpbnRvIGhpcyBlYXJzIHVudGlsIGhlIGRpZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1pdGhyaWRhdGVzIGFsc28gY2FtZSB0byBhIG1pc2VyYWJsZSBlbmQgYSBsaXR0bGUgd2hpbGUgYWZ0ZXIsIG93aW5nIHRvIHRoZSBzYW1lIGZvbGx5LiBGb3IgYmVpbmcgaW52aXRlZCB0byBhIGJhbnF1ZXQgYXQgd2hpY2ggZXVudWNocyBvZiB0aGUga2luZyBhbmQgb2YgdGhlIHF1ZWVuLW1vdGhlciB3ZXJlIHByZXNlbnQsIGhlIGNhbWUgZGVja2VkIG91dCB3aXRoIHJhaW1lbnQgYW5kIGdvbGQgd2hpY2ggaGUgaGFkIHJlY2VpdmVkIGZyb20gdGhlIGtpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBjb21wYW55IHdlcmUgYXQgdGhlaXIgY3VwcywgdGhlIGNoaWVmIGV1bnVjaCBvZiBQYXJ5c2F0aXMgc2FpZCB0byBoaW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWl0aHJpZGF0ZXMsIGhvdyBiZWF1dGlmdWwgdGhpcyByYWltZW50IGlzIHdoaWNoIHRoZSBraW5nIGdhdmUgdGhlZSwgYW5kIGhvdyBiZWF1dGlmdWwgdGhlIGNvbGxhcnMgYW5kIGJyYWNlbGV0cyEgQ29zdGx5LCB0b28sIGlzIHRoeSBzY2ltaXRhci4gVmVyaWx5IHRoZSBraW5nIGhhcyBtYWRlIHRoZWUgaGFwcHkgaW4gdGhlIGFkbWlyaW5nIGV5ZXMgb2YgYWxsIG1lbi48L3E+IFRoZW4gTWl0aHJpZGF0ZXMsIG5vdyBmbHVzaGVkIHdpdGggd2luZSwgcmVwbGllZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TcGFyYW1pemVzLCB3aGF0IGRvIHRoZXNlIHRoaW5ncyBhbW91bnQgdG8/IFN1cmVseSBteSBzZXJ2aWNlcyB0byB0aGUga2luZyBvbiB0aGF0IGRheSB3ZXJlIHdvcnRoeSBvZiBncmVhdGVyIGFuZCBtb3JlIGJlYXV0aWZ1bCBnaWZ0cy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSBTcGFyYW1pemVzIHNtaWxlZCBhdCBoaW0gYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlcmUncyBubyBncnVkZ2luZyB0aGVtIHRvIHRoZWUsIE1pdGhyaWRhdGVzOyBidXQgc2luY2UsIGFjY29yZGluZyB0byB0aGUgR3JlZWsgbWF4aW0sIHRoZXJlIGlzIHRydXRoIGluIHdpbmUsIHdoYXQgZ3JlYXQgb3IgYnJpbGxpYW50IGV4cGxvaXQgd2FzIGl0LCBteSBnb29kIGZlbGxvdywgdG8gZmluZCBhIGhvcnNlJ3MgdHJhcHBpbmdzIHRoYXQgaGFkIHNsaXBwZWQgb2ZmIGFuZCBicmluZyB0aGVtIHRvIHRoZSBraW5nPzwvcT4gSW4gc2F5aW5nIHRoaXMsIFNwYXJhbWl6ZXMgd2FzIG5vdCBpZ25vcmFudCBvZiB0aGUgdHJ1dGgsIGJ1dCBoZSB3aXNoZWQgdG8gdW52ZWlsIE1pdGhyaWRhdGVzIHRvIHRoZSBjb21wYW55LCBhbmQgdGhlcmVmb3JlIHNseWx5IHN0aXJyZWQgdXAgaGlzIHZhbml0eSB3aGVuIHdpbmUgaGFkIG1hZGUgaGltIHRhbGthdGl2ZSBhbmQgcm9iYmVkIGhpbSBvZiBzZWxmLWNvbnRyb2wuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBNaXRocmlkYXRlcyB0aHJldyBhd2F5IGNvbnN0cmFpbnQgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWUgbWF5IHRhbGsgYXMgeWUgcGxlYXNlIGFib3V0IGhvcnNlLXRyYXBwaW5ncyBhbmQgc3VjaCBub25zZW5zZTsgYnV0IEkgZGVjbGFyZSB0byB5b3UgZXhwbGljaXRseSB0aGF0IEN5cnVzIHdhcyBzbGFpbiBieSB0aGlzIGhhbmQgb2YgbWluZTsgZm9yIEkgZGlkIG5vdCwgbGlrZSBBcnRhZ2Vyc2VzLCBtYWtlIGEgZnV0aWxlIGFuZCBhbiBpZGxlIGNhc3Qgb2Ygc3BlYXIsIGJ1dCBJIG5hcnJvd2x5IG1pc3NlZCBoaXMgZXllLCBzdHJ1Y2sgaGltIGluIHRoZSB0ZW1wbGUsIHBpZXJjZWQgaXQsIGFuZCBicm91Z2h0IHRoZSBtYW4gZG93bjsgYW5kIGl0IHdhcyBvZiB0aGF0IHdvdW5kIHRoYXQgaGUgZGllZC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHJlc3Qgb2YgdGhlIGNvbXBhbnksIHRoZW4sIHdobyBhbHJlYWR5IHNhdyB0aGUgZW5kIG9mIE1pdGhyaWRhdGVzIGFuZCBoaXMgaGFwbGVzcyBmYXRlLCBib3dlZCB0aGVpciBmYWNlcyB0b3dhcmRzIHRoZSBncm91bmQ7IGFuZCB0aGVpciBob3N0IHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgZ29vZCBNaXRocmlkYXRlcywgbGV0IHVzIGVhdCBhbmQgZHJpbmsgbm93LCByZXZlcmluZyB0aGUgZ29vZCBnZW5pdXMgb2YgdGhlIGtpbmcsIGFuZCBsZXQgdXMgd2FpdmUgZGlzY291cnNlIHRoYXQgaXMgdG9vIHdlaWdodHkgZm9yIHVzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWl0aHJpZGF0ZXMgYWxzbyBjYW1lIHRvIGEgbWlzZXJhYmxlIGVuZCBhIGxpdHRsZSB3aGlsZSBhZnRlciwgb3dpbmcgdG8gdGhlIHNhbWUgZm9sbHkuIEZvciBiZWluZyBpbnZpdGVkIHRvIGEgYmFucXVldCBhdCB3aGljaCBldW51Y2hzIG9mIHRoZSBraW5nIGFuZCBvZiB0aGUgcXVlZW4tbW90aGVyIHdlcmUgcHJlc2VudCwgaGUgY2FtZSBkZWNrZWQgb3V0IHdpdGggcmFpbWVudCBhbmQgZ29sZCB3aGljaCBoZSBoYWQgcmVjZWl2ZWQgZnJvbSB0aGUga2luZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBjb21wYW55IHdlcmUgYXQgdGhlaXIgY3VwcywgdGhlIGNoaWVmIGV1bnVjaCBvZiBQYXJ5c2F0aXMgc2FpZCB0byBoaW06IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NaXRocmlkYXRlcywgaG93IGJlYXV0aWZ1bCB0aGlzIHJhaW1lbnQgaXMgd2hpY2ggdGhlIGtpbmcgZ2F2ZSB0aGVlLCBhbmQgaG93IGJlYXV0aWZ1bCB0aGUgY29sbGFycyBhbmQgYnJhY2VsZXRzISBDb3N0bHksIHRvbywgaXMgdGh5IHNjaW1pdGFyLiBWZXJpbHkgdGhlIGtpbmcgaGFzIG1hZGUgdGhlZSBoYXBweSBpbiB0aGUgYWRtaXJpbmcgZXllcyBvZiBhbGwgbWVuLjwvcT4gVGhlbiBNaXRocmlkYXRlcywgbm93IGZsdXNoZWQgd2l0aCB3aW5lLCByZXBsaWVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3BhcmFtaXplcywgd2hhdCBkbyB0aGVzZSB0aGluZ3MgYW1vdW50IHRvPyBTdXJlbHkgbXkgc2VydmljZXMgdG8gdGhlIGtpbmcgb24gdGhhdCBkYXkgd2VyZSB3b3J0aHkgb2YgZ3JlYXRlciBhbmQgbW9yZSBiZWF1dGlmdWwgZ2lmdHMuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgU3BhcmFtaXplcyBzbWlsZWQgYXQgaGltIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlcmUncyBubyBncnVkZ2luZyB0aGVtIHRvIHRoZWUsIE1pdGhyaWRhdGVzOyBidXQgc2luY2UsIGFjY29yZGluZyB0byB0aGUgR3JlZWsgbWF4aW0sIHRoZXJlIGlzIHRydXRoIGluIHdpbmUsIHdoYXQgZ3JlYXQgb3IgYnJpbGxpYW50IGV4cGxvaXQgd2FzIGl0LCBteSBnb29kIGZlbGxvdywgdG8gZmluZCBhIGhvcnNlJ3MgdHJhcHBpbmdzIHRoYXQgaGFkIHNsaXBwZWQgb2ZmIGFuZCBicmluZyB0aGVtIHRvIHRoZSBraW5nPzwvcT4gSW4gc2F5aW5nIHRoaXMsIFNwYXJhbWl6ZXMgd2FzIG5vdCBpZ25vcmFudCBvZiB0aGUgdHJ1dGgsIGJ1dCBoZSB3aXNoZWQgdG8gdW52ZWlsIE1pdGhyaWRhdGVzIHRvIHRoZSBjb21wYW55LCBhbmQgdGhlcmVmb3JlIHNseWx5IHN0aXJyZWQgdXAgaGlzIHZhbml0eSB3aGVuIHdpbmUgaGFkIG1hZGUgaGltIHRhbGthdGl2ZSBhbmQgcm9iYmVkIGhpbSBvZiBzZWxmLWNvbnRyb2wuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBNaXRocmlkYXRlcyB0aHJldyBhd2F5IGNvbnN0cmFpbnQgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZSBtYXkgdGFsayBhcyB5ZSBwbGVhc2UgYWJvdXQgaG9yc2UtdHJhcHBpbmdzIGFuZCBzdWNoIG5vbnNlbnNlOyBidXQgSSBkZWNsYXJlIHRvIHlvdSBleHBsaWNpdGx5IHRoYXQgQ3lydXMgd2FzIHNsYWluIGJ5IHRoaXMgaGFuZCBvZiBtaW5lOyBmb3IgSSBkaWQgbm90LCBsaWtlIEFydGFnZXJzZXMsIG1ha2UgYSBmdXRpbGUgYW5kIGFuIGlkbGUgY2FzdCBvZiBzcGVhciwgYnV0IEkgbmFycm93bHkgbWlzc2VkIGhpcyBleWUsIHN0cnVjayBoaW0gaW4gdGhlIHRlbXBsZSwgcGllcmNlZCBpdCwgYW5kIGJyb3VnaHQgdGhlIG1hbiBkb3duOyBhbmQgaXQgd2FzIG9mIHRoYXQgd291bmQgdGhhdCBoZSBkaWVkLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIHRoZSBjb21wYW55LCB0aGVuLCB3aG8gYWxyZWFkeSBzYXcgdGhlIGVuZCBvZiBNaXRocmlkYXRlcyBhbmQgaGlzIGhhcGxlc3MgZmF0ZSwgYm93ZWQgdGhlaXIgZmFjZXMgdG93YXJkcyB0aGUgZ3JvdW5kOyBhbmQgdGhlaXIgaG9zdCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgZ29vZCBNaXRocmlkYXRlcywgbGV0IHVzIGVhdCBhbmQgZHJpbmsgbm93LCByZXZlcmluZyB0aGUgZ29vZCBnZW5pdXMgb2YgdGhlIGtpbmcsIGFuZCBsZXQgdXMgd2FpdmUgZGlzY291cnNlIHRoYXQgaXMgdG9vIHdlaWdodHkgZm9yIHVzLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXJ3YXJkcyB0aGUgZXVudWNoIHRvbGQgdGhlIG1hdHRlciB0byBQYXJ5c2F0aXMsIGFuZCBzaGUgdG8gdGhlIGtpbmc7IGFuZCB0aGUga2luZyB3YXMgaW5jZW5zZWQsIGFzIGJlaW5nIG9wZW5seSBjb252aWN0ZWQgb2YgZmFsc2Vob29kLCBhbmQgbGlrZWx5IHRvIGZvcmZlaXQgdGhlIGZhaXJlc3QgYW5kIG1vc3QgcGxlYXNpbmcgZmVhdHVyZSBvZiBoaXMgdmljdG9yeS4gRm9yIGhlIHdpc2hlZCB0aGF0IGFsbCBCYXJiYXJpYW5zIGFuZCBhbGwgR3JlZWtzIHNob3VsZCBiZSBmdWxseSBwZXJzdWFkZWQgdGhhdCB3aGVuIGhlIGFuZCBoaXMgYnJvdGhlciBoYWQgY2hhcmdlZCBhbmQgZ3JhcHBsZWQgd2l0aCBlYWNoIG90aGVyLCBoZSBoYWQgZ2l2ZW4gYW5kIHJlY2VpdmVkIGEgYmxvdywgYmVpbmcgb25seSB3b3VuZGVkIGhpbXNlbGYsIGJ1dCBraWxsaW5nIGhpcyBicm90aGVyLiBIZSB0aGVyZWZvcmUgZ2F2ZSBvcmRlcnMgdGhhdCBNaXRocmlkYXRlcyBzaG91bGQgYmUgcHV0IHRvIGRlYXRoIGJ5IHRoZSB0b3J0dXJlIG9mIHRoZSBib2F0cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXJ3YXJkcyB0aGUgZXVudWNoIHRvbGQgdGhlIG1hdHRlciB0byBQYXJ5c2F0aXMsIGFuZCBzaGUgdG8gdGhlIGtpbmc7IGFuZCB0aGUga2luZyB3YXMgaW5jZW5zZWQsIGFzIGJlaW5nIG9wZW5seSBjb252aWN0ZWQgb2YgZmFsc2Vob29kLCBhbmQgbGlrZWx5IHRvIGZvcmZlaXQgdGhlIGZhaXJlc3QgYW5kIG1vc3QgcGxlYXNpbmcgZmVhdHVyZSBvZiBoaXMgdmljdG9yeS4gRm9yIGhlIHdpc2hlZCB0aGF0IGFsbCBCYXJiYXJpYW5zIGFuZCBhbGwgR3JlZWtzIHNob3VsZCBiZSBmdWxseSBwZXJzdWFkZWQgdGhhdCB3aGVuIGhlIGFuZCBoaXMgYnJvdGhlciBoYWQgY2hhcmdlZCBhbmQgZ3JhcHBsZWQgd2l0aCBlYWNoIG90aGVyLCBoZSBoYWQgZ2l2ZW4gYW5kIHJlY2VpdmVkIGEgYmxvdywgYmVpbmcgb25seSB3b3VuZGVkIGhpbXNlbGYsIGJ1dCBraWxsaW5nIGhpcyBicm90aGVyLiBIZSB0aGVyZWZvcmUgZ2F2ZSBvcmRlcnMgdGhhdCBNaXRocmlkYXRlcyBzaG91bGQgYmUgcHV0IHRvIGRlYXRoIGJ5IHRoZSB0b3J0dXJlIG9mIHRoZSBib2F0cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGlzIHRvcnR1cmUgb2YgdGhlIGJvYXRzIGlzIGFzIGZvbGxvd3MuIFR3byBib2F0cyBhcmUgdGFrZW4sIHdoaWNoIGFyZSBzbyBtYWRlIGFzIHRvIGZpdCBvdmVyIG9uZSBhbm90aGVyIGNsb3NlbHk7IGluIG9uZSBvZiB0aGVzZSB0aGUgdmljdGltIGlzIGxhaWQsIGZsYXQgdXBvbiBoaXMgYmFjazsgdGhlbiB0aGUgb3RoZXIgaXMgbGFpZCBvdmVyIHRoZSBmaXJzdCBhbmQgY2FyZWZ1bGx5IGFkanVzdGVkLCBzbyB0aGF0IHRoZSB2aWN0aW0ncyBoZWFkLCBoYW5kcywgYW5kIGZlZXQgYXJlIGxlZnQgcHJvamVjdGluZywgd2hpbGUgdGhlIHJlc3Qgb2YgaGlzIGJvZHkgaXMgY29tcGxldGVseSBjb3ZlcmVkIHVwLiBUaGVuIHRoZXkgZ2l2ZSBoaW0gZm9vZCB0byBlYXQsIGFuZCBpZiBoZSByZWZ1c2UgaXQsIHRoZXkgZm9yY2UgaGltIHRvIHRha2UgaXQgYnkgcHJpY2tpbmcgaGlzIGV5ZXMuIEFmdGVyIGhlIGhhcyBlYXRlbiwgdGhleSBnaXZlIGhpbSBhIG1peHR1cmUgb2YgbWlsayBhbmQgaG9uZXkgdG8gZHJpbmssIHBvdXJpbmcgaXQgaW50byBoaXMgbW91dGgsIGFuZCBhbHNvIGRlbHVnZSBoaXMgZmFjZSB3aXRoIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZXkga2VlcCBoaXMgZXllcyBhbHdheXMgdHVybmVkIHRvd2FyZHMgdGhlIHN1biwgYW5kIGEgc3dhcm0gb2YgZmxpZXMgc2V0dGxlcyBkb3duIHVwb24gaGlzIGZhY2UgYW5kIGhpZGVzIGl0IGNvbXBsZXRlbHkuIEFuZCBzaW5jZSBpbnNpZGUgdGhlIGJvYXRzIGhlIGRvZXMgd2hhdCBtdXN0IG5lZWRzIGJlIGRvbmUgd2hlbiBtZW4gZWF0IGFuZCBkcmluaywgd29ybXMgYW5kIG1hZ2dvdHMgc2VldGhlIHVwIGZyb20gdGhlIGNvcnJ1cHRpb24gYW5kIHJvdHRlbm5lc3Mgb2YgdGhlIGV4Y3JlbWVudCwgZGV2b3VyaW5nIGhpcyBib2R5LCBhbmQgZWF0aW5nIHRoZWlyIHdheSBpbnRvIGhpcyB2aXRhbHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIGF0IGxhc3QgdGhlIG1hbiBpcyBjbGVhcmx5IGRlYWQgYW5kIHRoZSB1cHBlciBib2F0IGhhcyBiZWVuIHJlbW92ZWQsIGhpcyBmbGVzaCBpcyBzZWVuIHRvIGhhdmUgYmVlbiBjb25zdW1lZCBhd2F5LCB3aGlsZSBhYm91dCBoaXMgZW50cmFpbHMgc3dhcm1zIG9mIHN1Y2ggYW5pbWFscyBhcyBJIGhhdmUgbWVudGlvbmVkIGFyZSBjbGluZ2luZyBmYXN0IGFuZCBlYXRpbmcuIEluIHRoaXMgd2F5IE1pdGhyaWRhdGVzIHdhcyBzbG93bHkgY29uc3VtZWQgZm9yIHNldmVudGVlbiBkYXlzLCBhbmQgYXQgbGFzdCBkaWVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhpcyB0b3J0dXJlIG9mIHRoZSBib2F0cyBpcyBhcyBmb2xsb3dzLiBUd28gYm9hdHMgYXJlIHRha2VuLCB3aGljaCBhcmUgc28gbWFkZSBhcyB0byBmaXQgb3ZlciBvbmUgYW5vdGhlciBjbG9zZWx5OyBpbiBvbmUgb2YgdGhlc2UgdGhlIHZpY3RpbSBpcyBsYWlkLCBmbGF0IHVwb24gaGlzIGJhY2s7IHRoZW4gdGhlIG90aGVyIGlzIGxhaWQgb3ZlciB0aGUgZmlyc3QgYW5kIGNhcmVmdWxseSBhZGp1c3RlZCwgc28gdGhhdCB0aGUgdmljdGltJ3MgaGVhZCwgaGFuZHMsIGFuZCBmZWV0IGFyZSBsZWZ0IHByb2plY3RpbmcsIHdoaWxlIHRoZSByZXN0IG9mIGhpcyBib2R5IGlzIGNvbXBsZXRlbHkgY292ZXJlZCB1cC4gVGhlbiB0aGV5IGdpdmUgaGltIGZvb2QgdG8gZWF0LCBhbmQgaWYgaGUgcmVmdXNlIGl0LCB0aGV5IGZvcmNlIGhpbSB0byB0YWtlIGl0IGJ5IHByaWNraW5nIGhpcyBleWVzLiBBZnRlciBoZSBoYXMgZWF0ZW4sIHRoZXkgZ2l2ZSBoaW0gYSBtaXh0dXJlIG9mIG1pbGsgYW5kIGhvbmV5IHRvIGRyaW5rLCBwb3VyaW5nIGl0IGludG8gaGlzIG1vdXRoLCBhbmQgYWxzbyBkZWx1Z2UgaGlzIGZhY2Ugd2l0aCBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhleSBrZWVwIGhpcyBleWVzIGFsd2F5cyB0dXJuZWQgdG93YXJkcyB0aGUgc3VuLCBhbmQgYSBzd2FybSBvZiBmbGllcyBzZXR0bGVzIGRvd24gdXBvbiBoaXMgZmFjZSBhbmQgaGlkZXMgaXQgY29tcGxldGVseS4gQW5kIHNpbmNlIGluc2lkZSB0aGUgYm9hdHMgaGUgZG9lcyB3aGF0IG11c3QgbmVlZHMgYmUgZG9uZSB3aGVuIG1lbiBlYXQgYW5kIGRyaW5rLCB3b3JtcyBhbmQgbWFnZ290cyBzZWV0aGUgdXAgZnJvbSB0aGUgY29ycnVwdGlvbiBhbmQgcm90dGVubmVzcyBvZiB0aGUgZXhjcmVtZW50LCBkZXZvdXJpbmcgaGlzIGJvZHksIGFuZCBlYXRpbmcgdGhlaXIgd2F5IGludG8gaGlzIHZpdGFscy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIGF0IGxhc3QgdGhlIG1hbiBpcyBjbGVhcmx5IGRlYWQgYW5kIHRoZSB1cHBlciBib2F0IGhhcyBiZWVuIHJlbW92ZWQsIGhpcyBmbGVzaCBpcyBzZWVuIHRvIGhhdmUgYmVlbiBjb25zdW1lZCBhd2F5LCB3aGlsZSBhYm91dCBoaXMgZW50cmFpbHMgc3dhcm1zIG9mIHN1Y2ggYW5pbWFscyBhcyBJIGhhdmUgbWVudGlvbmVkIGFyZSBjbGluZ2luZyBmYXN0IGFuZCBlYXRpbmcuIEluIHRoaXMgd2F5IE1pdGhyaWRhdGVzIHdhcyBzbG93bHkgY29uc3VtZWQgZm9yIHNldmVudGVlbiBkYXlzLCBhbmQgYXQgbGFzdCBkaWVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IHRoZXJlIHdhcyBvbmUgbWFyayBsZWZ0IGZvciB0aGUgdmVuZ2VhbmNlIG9mIFBhcnlzYXRpc+KAlHRoZSBtYW4gd2hvIGhhZCBjdXQgb2ZmIHRoZSBoZWFkIGFuZCByaWdodCBoYW5kIG9mIEN5cnVzLCBNYXNhYmF0ZXMsIGFuIGV1bnVjaCBvZiB0aGUga2luZy4gQWdhaW5zdCB0aGlzIG1hbiwgdGhlbiwgc2luY2UgaGUgaGltc2VsZiBnYXZlIGhlciBubyBjaGFuY2UgdG8gZ2V0IGF0IGhpbSwgUGFyeXNhdGlzIGNvbmNvY3RlZCBhIHBsb3Qgb2YgdGhlIGZvbGxvd2luZyBzb3J0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TaGUgd2FzIGluIGdlbmVyYWwgYW4gaW5nZW5pb3VzIHdvbWFuLCBhbmQgZ3JlYXRseSBhZGRpY3RlZCB0byBwbGF5aW5nIGF0IGRpY2UuIEZvciB0aGlzIHJlYXNvbiBzaGUgZnJlcXVlbnRseSBwbGF5ZWQgYXQgZGljZSB3aXRoIHRoZSBraW5nIGJlZm9yZSB0aGUgd2FyLCBhbmQgYWZ0ZXIgdGhlIHdhciB3YXMgb3ZlciBhbmQgc2hlIGhhZCBiZWVuIHJlY29uY2lsZWQgd2l0aCBoaW0sIHNoZSBkaWQgbm90IHRyeSB0byBhdm9pZCBoaXMgZnJpZW5kbHkgb3ZlcnR1cmVzLCBidXQgYWN0dWFsbHkgam9pbmVkIGluIGhpcyBkaXZlcnNpb25zLCBhbmQgdG9vayBwYXJ0IGluIGhpcyBhbW91cnMgYnkgaGVyIGNvb3BlcmF0aW9uIGFuZCBwcmVzZW5jZSwgYW5kLCBpbiBhIHdvcmQsIGxlZnQgdmVyeSBsaXR0bGUgb2YgdGhlIGtpbmcgZm9yIFN0YXRlaXJhJ3MgdXNlIGFuZCBzb2NpZXR5LiBGb3Igc2hlIGhhdGVkIFN0YXRlaXJhIGFib3ZlIGFsbCBvdGhlcnMsIGFuZCB3aXNoZWQgdG8gaGF2ZSB0aGUgY2hpZWYgaW5mbHVlbmNlIGhlcnNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvLCBvbmUgZGF5LCBmaW5kaW5nIEFydGF4ZXJ4ZXMgdHJ5aW5nIHRvIGFtdXNlIGhpbXNlbGYgaW4gYSB2YWNhbnQgaG91ciwgc2hlIGNoYWxsZW5nZWQgaGltIHRvIHBsYXkgYXQgZGljZSBmb3IgYSB0aG91c2FuZCBkYXJpY3MsIGFsbG93ZWQgaGltIHRvIHdpbiB0aGUgZ2FtZSwgYW5kIHBhaWQgdGhlIG1vbmV5IGRvd24uIFRoZW4sIHByZXRlbmRpbmcgdG8gYmUgY2hhZ3JpbmVkIGF0IGhlciBsb3NzIGFuZCB0byBzZWVrIHJldmVuZ2UsIHNoZSBjaGFsbGVuZ2VkIHRoZSBraW5nIHRvIHBsYXkgYSBzZWNvbmQgZ2FtZSwgd2l0aCBhbiBldW51Y2ggZm9yIHRoZSBzdGFrZSwgYW5kIHRoZSBraW5nIGNvbnNlbnRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBhZ3JlZWQgdGhhdCBib3RoIG1pZ2h0IHJlc2VydmUgZml2ZSBvZiB0aGVpciBtb3N0IHRydXN0eSBldW51Y2hzLCBidXQgdGhhdCBmcm9tIHRoZSByZXN0IHRoZSBsb3NlciBtdXN0IGdpdmUgd2hpY2hldmVyIG9uZSB0aGUgd2lubmVyIG1pZ2h0IHNlbGVjdCwgYW5kIG9uIHRoZXNlIGNvbmRpdGlvbnMgcGxheWVkIHRoZWlyIGdhbWUuIFBhcnlzYXRpcyB0b29rIHRoZSBtYXR0ZXIgbXVjaCB0byBoZWFydCBhbmQgd2FzIGluIGdyZWF0IGVhcm5lc3Qgd2l0aCBoZXIgcGxheWluZywgYW5kIHNpbmNlIHRoZSBkaWNlIGFsc28gZmVsbCBpbiBoZXIgZmF2b3VyLCBzaGUgd29uIHRoZSBnYW1lLCBhbmQgc2VsZWN0ZWQgTWFzYWJhdGVzOyBmb3IgaGUgd2FzIG5vdCBhbW9uZyB0aG9zZSB3aG8gaGFkIGJlZW4gZXhjZXB0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZWZvcmUgdGhlIGtpbmcgc3VzcGVjdGVkIGhlciBkZXNpZ24sIHNoZSBwdXQgdGhlIGV1bnVjaCBpbiB0aGUgaGFuZHMgb2YgdGhlIGV4ZWN1dGlvbmVycywgd2hvIHdlcmUgb3JkZXJlZCB0byBmbGF5IGhpbSBhbGl2ZSwgdG8gc2V0IHVwIGhpcyBib2R5IHNsYW50d2lzZSBvbiB0aHJlZSBzdGFrZXMsIGFuZCB0byBuYWlsIHVwIGhpcyBza2luIHRvIGEgZm91cnRoLiBUaGlzIHdhcyBkb25lLCBhbmQgd2hlbiB0aGUga2luZyB3YXMgYml0dGVybHkgaW5jZW5zZWQgYXQgaGVyLCBzaGUgc2FpZCB0byBoaW0sIHdpdGggYSBtb2NraW5nIGxhdWdoOiAiCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGEgYmxlc3NlZCBzaW1wbGV0b24gdGhvdSBhcnQsIHRvIGJlIGluY2Vuc2VkIG9uIGFjY291bnQgb2YgYSB3cmV0Y2hlZCBvbGQgZXVudWNoLCB3aGVuIEksIHdobyBoYXZlIGRpY2VkIGF3YXkgYSB0aG91c2FuZCBkYXJpY3MsIGFjY2VwdCBteSBsb3NzIHdpdGhvdXQgYSB3b3JkLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0aGUga2luZywgYWx0aG91Z2ggc29ycnkgdGhhdCBoZSBoYWQgYmVlbiBkZWNlaXZlZCwga2VwdCBxdWlldCBpbiB0aGUgbWF0dGVyLCBidXQgU3RhdGVpcmEgb3Blbmx5IG9wcG9zZWQgUGFyeXNhdGlzIGluIG90aGVyIHRoaW5ncywgYW5kIGFib3ZlIGFsbCB3YXMgYW5ncnkgd2l0aCBoZXIgYmVjYXVzZSwgZm9yIHRoZSBzYWtlIG9mIEN5cnVzLCBzaGUgd2FzIGNydWVsbHkgYW5kIGxhd2xlc3NseSBwdXR0aW5nIHRvIGRlYXRoIGV1bnVjaHMgYW5kIG90aGVycyB3aG8gd2VyZSBmYWl0aGZ1bCB0byB0aGUga2luZy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0aGVyZSB3YXMgb25lIG1hcmsgbGVmdCBmb3IgdGhlIHZlbmdlYW5jZSBvZiBQYXJ5c2F0aXPigJR0aGUgbWFuIHdobyBoYWQgY3V0IG9mZiB0aGUgaGVhZCBhbmQgcmlnaHQgaGFuZCBvZiBDeXJ1cywgTWFzYWJhdGVzLCBhbiBldW51Y2ggb2YgdGhlIGtpbmcuIEFnYWluc3QgdGhpcyBtYW4sIHRoZW4sIHNpbmNlIGhlIGhpbXNlbGYgZ2F2ZSBoZXIgbm8gY2hhbmNlIHRvIGdldCBhdCBoaW0sIFBhcnlzYXRpcyBjb25jb2N0ZWQgYSBwbG90IG9mIHRoZSBmb2xsb3dpbmcgc29ydC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNoZSB3YXMgaW4gZ2VuZXJhbCBhbiBpbmdlbmlvdXMgd29tYW4sIGFuZCBncmVhdGx5IGFkZGljdGVkIHRvIHBsYXlpbmcgYXQgZGljZS4gRm9yIHRoaXMgcmVhc29uIHNoZSBmcmVxdWVudGx5IHBsYXllZCBhdCBkaWNlIHdpdGggdGhlIGtpbmcgYmVmb3JlIHRoZSB3YXIsIGFuZCBhZnRlciB0aGUgd2FyIHdhcyBvdmVyIGFuZCBzaGUgaGFkIGJlZW4gcmVjb25jaWxlZCB3aXRoIGhpbSwgc2hlIGRpZCBub3QgdHJ5IHRvIGF2b2lkIGhpcyBmcmllbmRseSBvdmVydHVyZXMsIGJ1dCBhY3R1YWxseSBqb2luZWQgaW4gaGlzIGRpdmVyc2lvbnMsIGFuZCB0b29rIHBhcnQgaW4gaGlzIGFtb3VycyBieSBoZXIgY29vcGVyYXRpb24gYW5kIHByZXNlbmNlLCBhbmQsIGluIGEgd29yZCwgbGVmdCB2ZXJ5IGxpdHRsZSBvZiB0aGUga2luZyBmb3IgU3RhdGVpcmEncyB1c2UgYW5kIHNvY2lldHkuIEZvciBzaGUgaGF0ZWQgU3RhdGVpcmEgYWJvdmUgYWxsIG90aGVycywgYW5kIHdpc2hlZCB0byBoYXZlIHRoZSBjaGllZiBpbmZsdWVuY2UgaGVyc2VsZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvLCBvbmUgZGF5LCBmaW5kaW5nIEFydGF4ZXJ4ZXMgdHJ5aW5nIHRvIGFtdXNlIGhpbXNlbGYgaW4gYSB2YWNhbnQgaG91ciwgc2hlIGNoYWxsZW5nZWQgaGltIHRvIHBsYXkgYXQgZGljZSBmb3IgYSB0aG91c2FuZCBkYXJpY3MsIGFsbG93ZWQgaGltIHRvIHdpbiB0aGUgZ2FtZSwgYW5kIHBhaWQgdGhlIG1vbmV5IGRvd24uIFRoZW4sIHByZXRlbmRpbmcgdG8gYmUgY2hhZ3JpbmVkIGF0IGhlciBsb3NzIGFuZCB0byBzZWVrIHJldmVuZ2UsIHNoZSBjaGFsbGVuZ2VkIHRoZSBraW5nIHRvIHBsYXkgYSBzZWNvbmQgZ2FtZSwgd2l0aCBhbiBldW51Y2ggZm9yIHRoZSBzdGFrZSwgYW5kIHRoZSBraW5nIGNvbnNlbnRlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgYWdyZWVkIHRoYXQgYm90aCBtaWdodCByZXNlcnZlIGZpdmUgb2YgdGhlaXIgbW9zdCB0cnVzdHkgZXVudWNocywgYnV0IHRoYXQgZnJvbSB0aGUgcmVzdCB0aGUgbG9zZXIgbXVzdCBnaXZlIHdoaWNoZXZlciBvbmUgdGhlIHdpbm5lciBtaWdodCBzZWxlY3QsIGFuZCBvbiB0aGVzZSBjb25kaXRpb25zIHBsYXllZCB0aGVpciBnYW1lLiBQYXJ5c2F0aXMgdG9vayB0aGUgbWF0dGVyIG11Y2ggdG8gaGVhcnQgYW5kIHdhcyBpbiBncmVhdCBlYXJuZXN0IHdpdGggaGVyIHBsYXlpbmcsIGFuZCBzaW5jZSB0aGUgZGljZSBhbHNvIGZlbGwgaW4gaGVyIGZhdm91ciwgc2hlIHdvbiB0aGUgZ2FtZSwgYW5kIHNlbGVjdGVkIE1hc2FiYXRlczsgZm9yIGhlIHdhcyBub3QgYW1vbmcgdGhvc2Ugd2hvIGhhZCBiZWVuIGV4Y2VwdGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZWZvcmUgdGhlIGtpbmcgc3VzcGVjdGVkIGhlciBkZXNpZ24sIHNoZSBwdXQgdGhlIGV1bnVjaCBpbiB0aGUgaGFuZHMgb2YgdGhlIGV4ZWN1dGlvbmVycywgd2hvIHdlcmUgb3JkZXJlZCB0byBmbGF5IGhpbSBhbGl2ZSwgdG8gc2V0IHVwIGhpcyBib2R5IHNsYW50d2lzZSBvbiB0aHJlZSBzdGFrZXMsIGFuZCB0byBuYWlsIHVwIGhpcyBza2luIHRvIGEgZm91cnRoLiBUaGlzIHdhcyBkb25lLCBhbmQgd2hlbiB0aGUga2luZyB3YXMgYml0dGVybHkgaW5jZW5zZWQgYXQgaGVyLCBzaGUgc2FpZCB0byBoaW0sIHdpdGggYSBtb2NraW5nIGxhdWdoOiAiCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgYSBibGVzc2VkIHNpbXBsZXRvbiB0aG91IGFydCwgdG8gYmUgaW5jZW5zZWQgb24gYWNjb3VudCBvZiBhIHdyZXRjaGVkIG9sZCBldW51Y2gsIHdoZW4gSSwgd2hvIGhhdmUgZGljZWQgYXdheSBhIHRob3VzYW5kIGRhcmljcywgYWNjZXB0IG15IGxvc3Mgd2l0aG91dCBhIHdvcmQuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZSBraW5nLCBhbHRob3VnaCBzb3JyeSB0aGF0IGhlIGhhZCBiZWVuIGRlY2VpdmVkLCBrZXB0IHF1aWV0IGluIHRoZSBtYXR0ZXIsIGJ1dCBTdGF0ZWlyYSBvcGVubHkgb3Bwb3NlZCBQYXJ5c2F0aXMgaW4gb3RoZXIgdGhpbmdzLCBhbmQgYWJvdmUgYWxsIHdhcyBhbmdyeSB3aXRoIGhlciBiZWNhdXNlLCBmb3IgdGhlIHNha2Ugb2YgQ3lydXMsIHNoZSB3YXMgY3J1ZWxseSBhbmQgbGF3bGVzc2x5IHB1dHRpbmcgdG8gZGVhdGggZXVudWNocyBhbmQgb3RoZXJzIHdobyB3ZXJlIGZhaXRoZnVsIHRvIHRoZSBraW5nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHdoZW4gQ2xlYXJjaHVzIGFuZCBoaXMgZmVsbG93LWdlbmVyYWxzIGhhZCBiZWVuIGNvbXBsZXRlbHkgZGVjZWl2ZWQgYnkgVGlzc2FwaGVybmVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAyLjUuMSIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQsIGNvbnRyYXJ5IHRvIHNvbGVtbiBvYXRocywgaGFkIGJlZW4gc2VpemVkIGFuZCBzZW50IHVwIHRvIHRoZSBraW5nIGluIGNoYWlucywgQ3Rlc2lhcyB0ZWxscyB1cyB0aGF0IGhlIHdhcyBhc2tlZCBieSBDbGVhcmNodXMgdG8gcHJvdmlkZSBoaW0gd2l0aCBhIGNvbWIuIENsZWFyY2h1cyBnb3QgdGhlIGNvbWIgYW5kIGRyZXNzZWQgaGlzIGhhaXIsIGFuZCBiZWluZyBwbGVhc2VkIGF0IHRoZSBzZXJ2aWNlIHJlbmRlcmVkLCBnYXZlIEN0ZXNpYXMgaGlzIHJpbmcgYXMgYSB0b2tlbiBvZiBmcmllbmRzaGlwIHdoaWNoIGhlIG1pZ2h0IHNob3cgdG8gaGlzIGtpbmRyZWQgYW5kIGZyaWVuZHMgaW4gU3BhcnRhOyBhbmQgdGhlIGRldmljZSBpbiB0aGUgc2VhbCB3YXMgYSBncm91cCBvZiBkYW5jaW5nIENhcnlhdGlkZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhcyBDdGVzaWFzIHNheXMsIHRoZSBwcm92aXNpb25zIHNlbnQgdG8gQ2xlYXJjaHVzIHdlcmUgc2VpemVkIGJ5IHRoZSBzb2xkaWVycyBpbiBjYXB0aXZpdHkgd2l0aCBoaW0sIHdobyBjb25zdW1lZCB0aGVtIGZyZWVseSBhbmQgZ2F2ZSBvbmx5IGEgc21hbGwgcGFydCBvZiB0aGVtIHRvIENsZWFyY2h1cy4gVGhpcyBoYXJkc2hpcCBhbHNvIEN0ZXNpYXMgc2F5cyBoZSByZW1lZGllZCwgYnkgZ2V0dGluZyBtb3JlIHByb3Zpc2lvbnMgc2VudCB0byBDbGVhcmNodXMsIGFuZCBhIHNlcGFyYXRlIHN1cHBseSBnaXZlbiB0byB0aGUgc29sZGllcnM7IGFuZCB0aGVzZSBzZXJ2aWNlcyBoZSBzYXlzIGhlIHJlbmRlcmVkIGFuZCBwZXJmb3JtZWQgdG8gcGxlYXNlIFBhcnlzYXRpcywgYW5kIGF0IGhlciBzdWdnZXN0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBzYXlzIGZ1cnRoZXIgdGhhdCBhIGZsaXRjaCBvZiBiYWNvbiB3YXMgc2VudCB0byBDbGVhcmNodXMgZXZlcnkgZGF5IHRvIHN1cHBsZW1lbnQgaGlzIHJhdGlvbnMsIGFuZCB0aGF0IENsZWFyY2h1cyBlYXJuZXN0bHkgYWR2aXNlZCBoaW0gdGhhdCBoZSBvdWdodCB0byBidXJ5IGEgc21hbGwga25pZmUgaW4gdGhlIG1lYXQgYW5kIHNlbmQgaXQgdG8gaGltIHRodXMgaGlkZGVuIGF3YXksIGFuZCBub3QgYWxsb3cgaGlzIGZhdGUgdG8gYmUgZGV0ZXJtaW5lZCBieSB0aGUgY3J1ZWx0eSBvZiB0aGUga2luZzsgYnV0IGhlIHdhcyBhZnJhaWQsIGFuZCB3b3VsZCBub3QgY29uc2VudCB0byBkbyB0aGlzLiBUaGUga2luZywgQ3Rlc2lhcyBzYXlzLCBhdCB0aGUgc29saWNpdGF0aW9uIG9mIGhpcyBtb3RoZXIsIGFncmVlZCBhbmQgc3dvcmUgbm90IHRvIGtpbGwgQ2xlYXJjaHVzOyBidXQgaGUgd2FzIHdvbiBiYWNrIGFnYWluIGJ5IFN0YXRlaXJhLCBhbmQgcHV0IGFsbCB0aGUgZ2VuZXJhbHMgdG8gZGVhdGggZXhjZXB0IE1lbm9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgYmVjYXVzZSBvZiB0aGlzLCBDdGVzaWFzIHNheXMsIHRoYXQgUGFyeXNhdGlzIHBsb3R0ZWQgYWdhaW5zdCB0aGUgbGlmZSBvZiBTdGF0ZWlyYSBhbmQgcHJlcGFyZWQgdGhlIHBvaXNvbiBmb3IgaGVyLiBCdXQgaXQgaXMgYW4gdW5saWtlbHkgc3RvcnksIGFuZCBvbmUgdGhhdCBnaXZlcyBhbiBhYnN1cmQgbW90aXZlIGZvciBoZXIgY291cnNlLCB0byBzYXkgdGhhdCBQYXJ5c2F0aXMgdGh1cyByaXNrZWQgYW5kIHdyb3VnaHQgYSBkcmVhZGZ1bCBkZWVkIGJlY2F1c2Ugb2YgQ2xlYXJjaHVzLCBhbmQgZGFyZWQgdG8ga2lsbCB0aGUga2luZydzIGxhd2Z1bCB3aWZlLCB3aG8gd2FzIHRoZSBtb3RoZXIgYnkgaGltIG9mIGNoaWxkcmVuIHJlYXJlZCBmb3IgdGhlIHRocm9uZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TmF5LCBpdCBpcyBxdWl0ZSBldmlkZW50IHRoYXQgaGUgYWRkcyB0aGlzIHNlbnNhdGlvbmFsIGRldGFpbCBvdXQgb2YgcmVnYXJkIGZvciB0aGUgbWVtb3J5IG9mIENsZWFyY2h1cy4gRm9yIGhlIHNheXMgdGhhdCBhZnRlciB0aGUgZ2VuZXJhbHMgaGFkIGJlZW4gcHV0IHRvIGRlYXRoLCB0aGUgcmVzdCBvZiB0aGVtIHdlcmUgdG9ybiBieSBkb2dzIGFuZCBiaXJkcywgYnV0IHRoYXQgaW4gdGhlIGNhc2Ugb2YgQ2xlYXJjaHVzLCBhIGJsYXN0IG9mIHdpbmQgY2FycmllZCBhIGdyZWF0IG1hc3Mgb2YgZWFydGggYW5kIGhlYXBlZCBpdCBpbiBhIG1vdW5kIHdoaWNoIGNvdmVyZWQgaGlzIGJvZHk7IHVwb24gdGhpcyBzb21lIGRhdGVzIGZlbGwgaGVyZSBhbmQgdGhlcmUsIGFuZCBpbiBhIHNob3J0IHRpbWUgYSB3b25kZXJmdWwgZ3JvdmUgb2YgdHJlZXMgc3ByYW5nIHVwIGFuZCBvdmVyc2hhZG93ZWQgdGhlIHBsYWNlLCBzbyB0aGF0IGV2ZW4gdGhlIGtpbmcgd2FzIHNvcmVseSByZXBlbnRhbnQsIGJlbGlldmluZyB0aGF0IGluIENsZWFyY2h1cyBoZSBoYWQga2lsbGVkIGEgbWFuIHdob20gdGhlIGdvZHMgbG92ZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB3aGVuIENsZWFyY2h1cyBhbmQgaGlzIGZlbGxvdy1nZW5lcmFscyBoYWQgYmVlbiBjb21wbGV0ZWx5IGRlY2VpdmVkIGJ5IFRpc3NhcGhlcm5lcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFuYWIuIDIuNS4xIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kLCBjb250cmFyeSB0byBzb2xlbW4gb2F0aHMsIGhhZCBiZWVuIHNlaXplZCBhbmQgc2VudCB1cCB0byB0aGUga2luZyBpbiBjaGFpbnMsIEN0ZXNpYXMgdGVsbHMgdXMgdGhhdCBoZSB3YXMgYXNrZWQgYnkgQ2xlYXJjaHVzIHRvIHByb3ZpZGUgaGltIHdpdGggYSBjb21iLiBDbGVhcmNodXMgZ290IHRoZSBjb21iIGFuZCBkcmVzc2VkIGhpcyBoYWlyLCBhbmQgYmVpbmcgcGxlYXNlZCBhdCB0aGUgc2VydmljZSByZW5kZXJlZCwgZ2F2ZSBDdGVzaWFzIGhpcyByaW5nIGFzIGEgdG9rZW4gb2YgZnJpZW5kc2hpcCB3aGljaCBoZSBtaWdodCBzaG93IHRvIGhpcyBraW5kcmVkIGFuZCBmcmllbmRzIGluIFNwYXJ0YTsgYW5kIHRoZSBkZXZpY2UgaW4gdGhlIHNlYWwgd2FzIGEgZ3JvdXAgb2YgZGFuY2luZyBDYXJ5YXRpZGVzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gMi41LjEiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpaS4gNS48L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhcyBDdGVzaWFzIHNheXMsIHRoZSBwcm92aXNpb25zIHNlbnQgdG8gQ2xlYXJjaHVzIHdlcmUgc2VpemVkIGJ5IHRoZSBzb2xkaWVycyBpbiBjYXB0aXZpdHkgd2l0aCBoaW0sIHdobyBjb25zdW1lZCB0aGVtIGZyZWVseSBhbmQgZ2F2ZSBvbmx5IGEgc21hbGwgcGFydCBvZiB0aGVtIHRvIENsZWFyY2h1cy4gVGhpcyBoYXJkc2hpcCBhbHNvIEN0ZXNpYXMgc2F5cyBoZSByZW1lZGllZCwgYnkgZ2V0dGluZyBtb3JlIHByb3Zpc2lvbnMgc2VudCB0byBDbGVhcmNodXMsIGFuZCBhIHNlcGFyYXRlIHN1cHBseSBnaXZlbiB0byB0aGUgc29sZGllcnM7IGFuZCB0aGVzZSBzZXJ2aWNlcyBoZSBzYXlzIGhlIHJlbmRlcmVkIGFuZCBwZXJmb3JtZWQgdG8gcGxlYXNlIFBhcnlzYXRpcywgYW5kIGF0IGhlciBzdWdnZXN0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgZnVydGhlciB0aGF0IGEgZmxpdGNoIG9mIGJhY29uIHdhcyBzZW50IHRvIENsZWFyY2h1cyBldmVyeSBkYXkgdG8gc3VwcGxlbWVudCBoaXMgcmF0aW9ucywgYW5kIHRoYXQgQ2xlYXJjaHVzIGVhcm5lc3RseSBhZHZpc2VkIGhpbSB0aGF0IGhlIG91Z2h0IHRvIGJ1cnkgYSBzbWFsbCBrbmlmZSBpbiB0aGUgbWVhdCBhbmQgc2VuZCBpdCB0byBoaW0gdGh1cyBoaWRkZW4gYXdheSwgYW5kIG5vdCBhbGxvdyBoaXMgZmF0ZSB0byBiZSBkZXRlcm1pbmVkIGJ5IHRoZSBjcnVlbHR5IG9mIHRoZSBraW5nOyBidXQgaGUgd2FzIGFmcmFpZCwgYW5kIHdvdWxkIG5vdCBjb25zZW50IHRvIGRvIHRoaXMuIFRoZSBraW5nLCBDdGVzaWFzIHNheXMsIGF0IHRoZSBzb2xpY2l0YXRpb24gb2YgaGlzIG1vdGhlciwgYWdyZWVkIGFuZCBzd29yZSBub3QgdG8ga2lsbCBDbGVhcmNodXM7IGJ1dCBoZSB3YXMgd29uIGJhY2sgYWdhaW4gYnkgU3RhdGVpcmEsIGFuZCBwdXQgYWxsIHRoZSBnZW5lcmFscyB0byBkZWF0aCBleGNlcHQgTWVub24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBiZWNhdXNlIG9mIHRoaXMsIEN0ZXNpYXMgc2F5cywgdGhhdCBQYXJ5c2F0aXMgcGxvdHRlZCBhZ2FpbnN0IHRoZSBsaWZlIG9mIFN0YXRlaXJhIGFuZCBwcmVwYXJlZCB0aGUgcG9pc29uIGZvciBoZXIuIEJ1dCBpdCBpcyBhbiB1bmxpa2VseSBzdG9yeSwgYW5kIG9uZSB0aGF0IGdpdmVzIGFuIGFic3VyZCBtb3RpdmUgZm9yIGhlciBjb3Vyc2UsIHRvIHNheSB0aGF0IFBhcnlzYXRpcyB0aHVzIHJpc2tlZCBhbmQgd3JvdWdodCBhIGRyZWFkZnVsIGRlZWQgYmVjYXVzZSBvZiBDbGVhcmNodXMsIGFuZCBkYXJlZCB0byBraWxsIHRoZSBraW5nJ3MgbGF3ZnVsIHdpZmUsIHdobyB3YXMgdGhlIG1vdGhlciBieSBoaW0gb2YgY2hpbGRyZW4gcmVhcmVkIGZvciB0aGUgdGhyb25lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5heSwgaXQgaXMgcXVpdGUgZXZpZGVudCB0aGF0IGhlIGFkZHMgdGhpcyBzZW5zYXRpb25hbCBkZXRhaWwgb3V0IG9mIHJlZ2FyZCBmb3IgdGhlIG1lbW9yeSBvZiBDbGVhcmNodXMuIEZvciBoZSBzYXlzIHRoYXQgYWZ0ZXIgdGhlIGdlbmVyYWxzIGhhZCBiZWVuIHB1dCB0byBkZWF0aCwgdGhlIHJlc3Qgb2YgdGhlbSB3ZXJlIHRvcm4gYnkgZG9ncyBhbmQgYmlyZHMsIGJ1dCB0aGF0IGluIHRoZSBjYXNlIG9mIENsZWFyY2h1cywgYSBibGFzdCBvZiB3aW5kIGNhcnJpZWQgYSBncmVhdCBtYXNzIG9mIGVhcnRoIGFuZCBoZWFwZWQgaXQgaW4gYSBtb3VuZCB3aGljaCBjb3ZlcmVkIGhpcyBib2R5OyB1cG9uIHRoaXMgc29tZSBkYXRlcyBmZWxsIGhlcmUgYW5kIHRoZXJlLCBhbmQgaW4gYSBzaG9ydCB0aW1lIGEgd29uZGVyZnVsIGdyb3ZlIG9mIHRyZWVzIHNwcmFuZyB1cCBhbmQgb3ZlcnNoYWRvd2VkIHRoZSBwbGFjZSwgc28gdGhhdCBldmVuIHRoZSBraW5nIHdhcyBzb3JlbHkgcmVwZW50YW50LCBiZWxpZXZpbmcgdGhhdCBpbiBDbGVhcmNodXMgaGUgaGFkIGtpbGxlZCBhIG1hbiB3aG9tIHRoZSBnb2RzIGxvdmVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5QYXJ5c2F0aXMsIGFjY29yZGluZ2x5LCB3aG8gZnJvbSB0aGUgb3V0c2V0IGhhZCBhIGx1cmtpbmcgaGF0cmVkIGFuZCBqZWFsb3VzeSBvZiBTdGF0ZWlyYSwgc2F3IHRoYXQgaGVyIG93biBpbmZsdWVuY2Ugd2l0aCB0aGUga2luZyB3YXMgYmFzZWQgb24gZmVlbGluZ3Mgb2YgcmVzcGVjdCBhbmQgaG9ub3VyLCB3aGlsZSB0aGF0IG9mIFN0YXRlaXJhIHdhcyBncm91bmRlZCBmYXN0IGFuZCBzdHJvbmcgaW4gbG92ZSBhbmQgY29uZmlkZW5jZTsgc2hlIHRoZXJlZm9yZSBwbG90dGVkIGFnYWluc3QgaGVyIGxpZmUgYW5kIHBsYXllZCBmb3Igd2hhdCBzaGUgdGhvdWdodCB0aGUgaGlnaGVzdCBzdGFrZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U2hlIGhhZCBhIHRydXN0ZWQgbWFpZHNlcnZhbnQgbmFtZWQgR2lnaXMsIHdobyBoYWQgbW9zdCBpbmZsdWVuY2Ugd2l0aCBoZXIgYW5kIGFzc2lzdGVkIGhlciBpbiBwcmVwYXJpbmcgdGhlIHBvaXNvbiwgYWNjb3JkaW5nIHRvIERlaW5vbiwgYWx0aG91Z2ggQ3Rlc2lhcyBzYXlzIHNoZSB3YXMgbWVyZWx5IHByaXZ5IHRvIHRoZSBkZWVkLCBhbmQgdGhhdCBhZ2FpbnN0IGhlciB3aWxsLiBUaGUgcG9pc29uIHdhcyBhY3R1YWxseSBnaXZlbiBieSBhIG1hbiBuYW1lZCBCZWxpdGFyYXMsIGFjY29yZGluZyB0byBDdGVzaWFzOyBEZWlub24gZ2l2ZXMgaGlzIG5hbWUgYXMgTWVsYW50YXMuIEFmdGVyIGEgcGVyaW9kIG9mIGRpc3NlbnNpb24gYW5kIHN1c3BpY2lvbiwgdGhlIHR3byB3b21lbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPmkuZS4sIFBhcnlzYXRpcyBhbmQgU3RhdGVpcmEuPC9ub3RlPiBoYWQgYmVndW4gYWdhaW4gdG8gbWVldCBhbmQgZWF0IHdpdGggb25lIGFub3RoZXIsIGFsdGhvdWdoIHRoZWlyIG11dHVhbCBmZWFyIGFuZCBjYXV0aW9uIGxlZCB0aGVtIHRvIHBhcnRha2Ugb2YgdGhlIHNhbWUgZGlzaGVzIHNlcnZlZCBieSB0aGUgc2FtZSBoYW5kcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGVyZSBpcyBhIGxpdHRsZSBQZXJzaWFuIGJpcmQgd2hpY2ggaGFzIG5vIGV4Y3JlbWVudCwgYnV0IGlzIGFsbCBmdWxsIG9mIGZhdCBpbnNpZGU7IGFuZCB0aGUgY3JlYXR1cmUgaXMgdGhvdWdodCB0byBsaXZlIHVwb24gYWlyIGFuZCBkZXc7IHRoZSBuYW1lIG9mIGl0IGlzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cmh5bnRhY2VzLjwvcT4gSXQgd2FzIGEgYmlyZCBvZiB0aGlzIHNwZWNpZXMsIGFjY29yZGluZyB0byBDdGVzaWFzLCB0aGF0IFBhcnlzYXRpcyBjdXQgaW4gdHdvIHdpdGggYSBsaXR0bGUga25pZmUgc21lYXJlZCB3aXRoIHBvaXNvbiBvbiBvbmUgc2lkZSwgdGh1cyB3aXBpbmcgdGhlIHBvaXNvbiBvZmYgdXBvbiBvbmUgcGFydCBvbmx5IG9mIHRoZSBiaXJkOyB0aGUgdW5kZWZpbGVkIGFuZCB3aG9sZXNvbWUgcGFydCBzaGUgdGhlbiBwdXQgaW50byBoZXIgb3duIG1vdXRoIGFuZCBhdGUsIGJ1dCBnYXZlIHRvIFN0YXRlaXJhIHRoZSBwb2lzb25lZCBwYXJ0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5EZWlub24sIGhvd2V2ZXIsIHNheXMgaXQgd2FzIG5vdCBQYXJ5c2F0aXMsIGJ1dCBNZWxhbnRhcyB3aG8gY3V0IHRoZSBiaXJkIHdpdGggdGhlIGtuaWZlIGFuZCBwbGFjZWQgdGhlIGZsZXNoIHRoYXQgd2FzIHBvaXNvbmVkIGJlZm9yZSBTdGF0ZWlyYS4gQmUgdGhhdCBhcyBpdCBtYXksIHRoZSB3b21hbiBkaWVkLCBpbiBjb252dWxzaW9ucyBhbmQgZ3JlYXQgc3VmZmVyaW5nLCBhbmQgc2hlIGNvbXByZWhlbmRlZCB0aGUgZXZpbCB0aGF0IGhhZCBiZWZhbGxlbiBoZXIsIGFuZCBicm91Z2h0IHRoZSBraW5nIHRvIHN1c3BlY3QgaGlzIG1vdGhlciwgd2hvc2UgZmllcmNlIGFuZCBpbXBsYWNhYmxlIG5hdHVyZSBoZSBrbmV3LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUga2luZywgdGhlcmVmb3JlLCBhdCBvbmNlIHNldCBvdXQgdXBvbiB0aGUgaW5xdWVzdCwgYXJyZXN0ZWQgdGhlIHNlcnZhbnRzIGFuZCB0YWJsZS1hdHRlbmRhbnRzIG9mIGhpcyBtb3RoZXIsIGFuZCBwdXQgdGhlbSBvbiB0aGUgcmFjay4gR2lnaXMsIGhvd2V2ZXIsIFBhcnlzYXRpcyBrZXB0IGZvciBhIGxvbmcgdGltZSBhdCBob21lIHdpdGggaGVyLCBhbmQgd291bGQgbm90IGdpdmUgaGVyIHVwIGF0IHRoZSBraW5nJ3MgZGVtYW5kLiBCdXQgYWZ0ZXIgYSB3aGlsZSBHaWdpcyBoZXJzZWxmIGJlZ2dlZCB0byBiZSBkaXNtaXNzZWQgdG8gaGVyIG93biBob21lIGJ5IG5pZ2h0LiBUaGUga2luZyBsZWFybmVkIG9mIHRoaXMsIHNldCBhbiBhbWJ1c2ggZm9yIGhlciwgc2VpemVkIGhlciwgYW5kIGNvbmRlbW5lZCBoZXIgdG8gZGVhdGguIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGxlZ2FsIG1vZGUgb2YgZGVhdGggZm9yIHByaXNvbmVycyBpbiBQZXJzaWEgaXMgYXMgZm9sbG93cy4gVGhlcmUgaXMgYSBicm9hZCBzdG9uZSwgYW5kIG9uIHRoaXMgdGhlIGhlYWQgb2YgdGhlIGN1bHByaXQgaXMgcGxhY2VkOyBhbmQgdGhlbiB3aXRoIGFub3RoZXIgc3RvbmUgdGhleSBzbWl0ZSBhbmQgcG91bmQgdW50aWwgdGhleSBjcnVzaCB0aGUgZmFjZSBhbmQgaGVhZCB0byBwdWxwLiBJdCB3YXMgaW4gdGhpcyBtYW5uZXIsIHRoZW4sIHRoYXQgR2lnaXMgZGllZDsgYnV0IFBhcnlzYXRpcyB3YXMgbm90IGZ1cnRoZXIgcmVidWtlZCBvciBoYXJtZWQgYnkgQXJ0YXhlcnhlcywgZXhjZXB0IHRoYXQgaGUgc2VudCBoZXIgb2ZmIHRvIEJhYnlsb24sIGluIGFjY29yZGFuY2Ugd2l0aCBoZXIgd2lzaCwgc2F5aW5nIHRoYXQgYXMgbG9uZyBhcyBzaGUgbGl2ZWQgaGUgaGltc2VsZiB3b3VsZCBub3Qgc2VlIEJhYnlsb24uIFN1Y2ggd2FzIHRoZSBzdGF0ZSBvZiB0aGUga2luZydzIGRvbWVzdGljIGFmZmFpcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UGFyeXNhdGlzLCBhY2NvcmRpbmdseSwgd2hvIGZyb20gdGhlIG91dHNldCBoYWQgYSBsdXJraW5nIGhhdHJlZCBhbmQgamVhbG91c3kgb2YgU3RhdGVpcmEsIHNhdyB0aGF0IGhlciBvd24gaW5mbHVlbmNlIHdpdGggdGhlIGtpbmcgd2FzIGJhc2VkIG9uIGZlZWxpbmdzIG9mIHJlc3BlY3QgYW5kIGhvbm91ciwgd2hpbGUgdGhhdCBvZiBTdGF0ZWlyYSB3YXMgZ3JvdW5kZWQgZmFzdCBhbmQgc3Ryb25nIGluIGxvdmUgYW5kIGNvbmZpZGVuY2U7IHNoZSB0aGVyZWZvcmUgcGxvdHRlZCBhZ2FpbnN0IGhlciBsaWZlIGFuZCBwbGF5ZWQgZm9yIHdoYXQgc2hlIHRob3VnaHQgdGhlIGhpZ2hlc3Qgc3Rha2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNoZSBoYWQgYSB0cnVzdGVkIG1haWRzZXJ2YW50IG5hbWVkIEdpZ2lzLCB3aG8gaGFkIG1vc3QgaW5mbHVlbmNlIHdpdGggaGVyIGFuZCBhc3Npc3RlZCBoZXIgaW4gcHJlcGFyaW5nIHRoZSBwb2lzb24sIGFjY29yZGluZyB0byBEZWlub24sIGFsdGhvdWdoIEN0ZXNpYXMgc2F5cyBzaGUgd2FzIG1lcmVseSBwcml2eSB0byB0aGUgZGVlZCwgYW5kIHRoYXQgYWdhaW5zdCBoZXIgd2lsbC4gVGhlIHBvaXNvbiB3YXMgYWN0dWFsbHkgZ2l2ZW4gYnkgYSBtYW4gbmFtZWQgQmVsaXRhcmFzLCBhY2NvcmRpbmcgdG8gQ3Rlc2lhczsgRGVpbm9uIGdpdmVzIGhpcyBuYW1lIGFzIE1lbGFudGFzLiBBZnRlciBhIHBlcmlvZCBvZiBkaXNzZW5zaW9uIGFuZCBzdXNwaWNpb24sIHRoZSB0d28gd29tZW48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPmkuZS4sIFBhcnlzYXRpcyBhbmQgU3RhdGVpcmEuPC9ub3RlPiBoYWQgYmVndW4gYWdhaW4gdG8gbWVldCBhbmQgZWF0IHdpdGggb25lIGFub3RoZXIsIGFsdGhvdWdoIHRoZWlyIG11dHVhbCBmZWFyIGFuZCBjYXV0aW9uIGxlZCB0aGVtIHRvIHBhcnRha2Ugb2YgdGhlIHNhbWUgZGlzaGVzIHNlcnZlZCBieSB0aGUgc2FtZSBoYW5kcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgaXMgYSBsaXR0bGUgUGVyc2lhbiBiaXJkIHdoaWNoIGhhcyBubyBleGNyZW1lbnQsIGJ1dCBpcyBhbGwgZnVsbCBvZiBmYXQgaW5zaWRlOyBhbmQgdGhlIGNyZWF0dXJlIGlzIHRob3VnaHQgdG8gbGl2ZSB1cG9uIGFpciBhbmQgZGV3OyB0aGUgbmFtZSBvZiBpdCBpcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cmh5bnRhY2VzLjwvcT4gSXQgd2FzIGEgYmlyZCBvZiB0aGlzIHNwZWNpZXMsIGFjY29yZGluZyB0byBDdGVzaWFzLCB0aGF0IFBhcnlzYXRpcyBjdXQgaW4gdHdvIHdpdGggYSBsaXR0bGUga25pZmUgc21lYXJlZCB3aXRoIHBvaXNvbiBvbiBvbmUgc2lkZSwgdGh1cyB3aXBpbmcgdGhlIHBvaXNvbiBvZmYgdXBvbiBvbmUgcGFydCBvbmx5IG9mIHRoZSBiaXJkOyB0aGUgdW5kZWZpbGVkIGFuZCB3aG9sZXNvbWUgcGFydCBzaGUgdGhlbiBwdXQgaW50byBoZXIgb3duIG1vdXRoIGFuZCBhdGUsIGJ1dCBnYXZlIHRvIFN0YXRlaXJhIHRoZSBwb2lzb25lZCBwYXJ0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkRlaW5vbiwgaG93ZXZlciwgc2F5cyBpdCB3YXMgbm90IFBhcnlzYXRpcywgYnV0IE1lbGFudGFzIHdobyBjdXQgdGhlIGJpcmQgd2l0aCB0aGUga25pZmUgYW5kIHBsYWNlZCB0aGUgZmxlc2ggdGhhdCB3YXMgcG9pc29uZWQgYmVmb3JlIFN0YXRlaXJhLiBCZSB0aGF0IGFzIGl0IG1heSwgdGhlIHdvbWFuIGRpZWQsIGluIGNvbnZ1bHNpb25zIGFuZCBncmVhdCBzdWZmZXJpbmcsIGFuZCBzaGUgY29tcHJlaGVuZGVkIHRoZSBldmlsIHRoYXQgaGFkIGJlZmFsbGVuIGhlciwgYW5kIGJyb3VnaHQgdGhlIGtpbmcgdG8gc3VzcGVjdCBoaXMgbW90aGVyLCB3aG9zZSBmaWVyY2UgYW5kIGltcGxhY2FibGUgbmF0dXJlIGhlIGtuZXcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBraW5nLCB0aGVyZWZvcmUsIGF0IG9uY2Ugc2V0IG91dCB1cG9uIHRoZSBpbnF1ZXN0LCBhcnJlc3RlZCB0aGUgc2VydmFudHMgYW5kIHRhYmxlLWF0dGVuZGFudHMgb2YgaGlzIG1vdGhlciwgYW5kIHB1dCB0aGVtIG9uIHRoZSByYWNrLiBHaWdpcywgaG93ZXZlciwgUGFyeXNhdGlzIGtlcHQgZm9yIGEgbG9uZyB0aW1lIGF0IGhvbWUgd2l0aCBoZXIsIGFuZCB3b3VsZCBub3QgZ2l2ZSBoZXIgdXAgYXQgdGhlIGtpbmcncyBkZW1hbmQuIEJ1dCBhZnRlciBhIHdoaWxlIEdpZ2lzIGhlcnNlbGYgYmVnZ2VkIHRvIGJlIGRpc21pc3NlZCB0byBoZXIgb3duIGhvbWUgYnkgbmlnaHQuIFRoZSBraW5nIGxlYXJuZWQgb2YgdGhpcywgc2V0IGFuIGFtYnVzaCBmb3IgaGVyLCBzZWl6ZWQgaGVyLCBhbmQgY29uZGVtbmVkIGhlciB0byBkZWF0aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGxlZ2FsIG1vZGUgb2YgZGVhdGggZm9yIHByaXNvbmVycyBpbiBQZXJzaWEgaXMgYXMgZm9sbG93cy4gVGhlcmUgaXMgYSBicm9hZCBzdG9uZSwgYW5kIG9uIHRoaXMgdGhlIGhlYWQgb2YgdGhlIGN1bHByaXQgaXMgcGxhY2VkOyBhbmQgdGhlbiB3aXRoIGFub3RoZXIgc3RvbmUgdGhleSBzbWl0ZSBhbmQgcG91bmQgdW50aWwgdGhleSBjcnVzaCB0aGUgZmFjZSBhbmQgaGVhZCB0byBwdWxwLiBJdCB3YXMgaW4gdGhpcyBtYW5uZXIsIHRoZW4sIHRoYXQgR2lnaXMgZGllZDsgYnV0IFBhcnlzYXRpcyB3YXMgbm90IGZ1cnRoZXIgcmVidWtlZCBvciBoYXJtZWQgYnkgQXJ0YXhlcnhlcywgZXhjZXB0IHRoYXQgaGUgc2VudCBoZXIgb2ZmIHRvIEJhYnlsb24sIGluIGFjY29yZGFuY2Ugd2l0aCBoZXIgd2lzaCwgc2F5aW5nIHRoYXQgYXMgbG9uZyBhcyBzaGUgbGl2ZWQgaGUgaGltc2VsZiB3b3VsZCBub3Qgc2VlIEJhYnlsb24uIFN1Y2ggd2FzIHRoZSBzdGF0ZSBvZiB0aGUga2luZydzIGRvbWVzdGljIGFmZmFpcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGtpbmcgd2FzIG5vIGxlc3MgZWFnZXIgdG8gY2FwdHVyZSB0aGUgR3JlZWtzIHdobyBoYWQgY29tZSB1cCB3aXRoIEN5cnVzIHRoYW4gaGUgaGFkIGJlZW4gdG8gY29ucXVlciBDeXJ1cyBhbmQgcHJlc2VydmUgaGlzIHRocm9uZS4gTmV2ZXJ0aGVsZXNzLCBoZSBjb3VsZCBub3QgY2FwdHVyZSB0aGVtLCBidXQgdGhvdWdoIHRoZXkgaGFkIGxvc3QgQ3lydXMgdGhlaXIgbGVhZGVyIGFuZCB0aGVpciBvd24gY29tbWFuZGVycywgdGhleSByZXNjdWVkIHRoZW1zZWx2ZXMgZnJvbSBoaXMgdmVyeSBwYWxhY2UsIGFzIG9uZSBtaWdodCBzYXksIHRodXMgcHJvdmluZyBjbGVhcmx5IHRvIHRoZSB3b3JsZCB0aGF0IHRoZSBlbXBpcmUgb2YgdGhlIFBlcnNpYW5zIGFuZCB0aGVpciBraW5nIGFib3VuZGVkIGluIGdvbGQgYW5kIGx1eHVyeSBhbmQgd29tZW4sIGJ1dCBpbiBhbGwgZWxzZSB3YXMgYW4gZW1wdHkgdmF1bnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBhbGwgR3JlZWNlIHRvb2sgaGVhcnQgYW5kIGRlc3Bpc2VkIHRoZSBCYXJiYXJpYW5zLCBhbmQgdGhlIExhY2VkYWVtb25pYW5zIGluIHBhcnRpY3VsYXIgdGhvdWdodCBpdCBzdHJhbmdlIGlmIG5vdyBhdCBsZWFzdCB0aGV5IGNvdWxkIG5vdCByZXNjdWUgdGhlIEdyZWVrcyB0aGF0IGR3ZWx0IGluIEFzaWEgZnJvbSBzZXJ2aXR1ZGUsIGFuZCBwdXQgYSBzdG9wIHRvIHRoZWlyIG91dHJhZ2VvdXMgdHJlYXRtZW50IGF0IHRoZSBoYW5kcyBvZiB0aGUgUGVyc2lhbnMuIFRoZSB3YXIgdGhleSB3YWdlZCB3YXMgYXQgZmlyc3QgY29uZHVjdGVkIGJ5IFRoaW1icm9uLCBhbmQgdGhlbiBieSBEZXJjeWxsaWRhcywgYnV0IHNpbmNlIHRoZXkgYWNjb21wbGlzaGVkIG5vdGhpbmcgd29ydGh5IG9mIG5vdGUsIHRoZXkgYXQgbGFzdCBwdXQgdGhlIGNvbmR1Y3Qgb2YgdGhlIHdhciBpbiB0aGUgaGFuZHMgb2YgdGhlaXIga2luZywgQWdlc2lsYcO8cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgY3Jvc3NlZCBvdmVyIHRvIEFzaWEgd2l0aCBhIGZsZWV0LCB3ZW50IHRvIHdvcmsgYXQgb25jZSwgd29uIGdyZWF0IGZhbWUsIGRlZmVhdGVkIFRpc3NhcGhlcm5lcyBpbiBhIHBpdGNoZWQgYmF0dGxlLCBhbmQgc2V0IHRoZSBHcmVlayBjaXRpZXMgaW4gcmV2b2x0LiBUaGlzIGJlaW5nIHRoZSBjYXNlLCBBcnRheGVyeGVzIGNvbnNpZGVyZWQgaG93IGhlIG11c3QgY2Fycnkgb24gdGhlIHdhciB3aXRoIEFnZXNpbGHDvHMsIGFuZCBzZW50IFRpbW9jcmVvbiB0aGUgUmhvZGlhbiBpbnRvIEdyZWVjZSB3aXRoIGEgZ3JlYXQgc3VtIG9mIG1vbmV5LCBiaWRkaW5nIGhpbSB1c2UgaXQgZm9yIHRoZSBjb3JydXB0aW9uIG9mIHRoZSBtb3N0IGluZmx1ZW50aWFsIG1lbiBpbiB0aGUgY2l0aWVzIHRoZXJlLCBhbmQgZm9yIHN0aXJyaW5nIHVwIHRoZSBHcmVla3MgdG8gbWFrZSB3YXIgdXBvbiBTcGFydGEuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRpbW9jcmF0ZXMgZGlkIGFzIGhlIHdhcyBiaWRkZW4sIHRoZSBtb3N0IGltcG9ydGFudCBjaXRpZXMgY29uc3BpcmVkIHRvZ2V0aGVyIGFnYWluc3QgU3BhcnRhLCBQZWxvcG9ubmVzdXMgd2FzIGluIGEgdHVybW9pbCwgYW5kIHRoZSBTcGFydGFuIG1hZ2lzdHJhdGVzIHN1bW1vbmVkIEFnZXNpbGHDvHMgaG9tZSBmcm9tIEFzaWEuIEl0IHdhcyBhdCB0aGlzIHRpbWUsIGFzIHdlIGFyZSB0b2xkLCBhbmQgYXMgaGUgd2FzIGdvaW5nIGhvbWUsIHRoYXQgQWdlc2lsYcO8cyBzYWlkIHRvIGhpcyBmcmllbmRzOyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSBraW5nIGhhcyBkcml2ZW4gbWUgb3V0IG9mIEFzaWEgd2l0aCB0aGlydHkgdGhvdXNhbmQgYXJjaGVyczwvcT47IGZvciB0aGUgUGVyc2lhbiBjb2luIGhhcyB0aGUgZmlndXJlIG9mIGFuIGFyY2hlciBzdGFtcGVkIHVwb24gaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMTUuNi4iIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWdlc2lsYcO8czwvdGl0bGU+LCB4di4gNi4gPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGUga2luZyB3YXMgbm8gbGVzcyBlYWdlciB0byBjYXB0dXJlIHRoZSBHcmVla3Mgd2hvIGhhZCBjb21lIHVwIHdpdGggQ3lydXMgdGhhbiBoZSBoYWQgYmVlbiB0byBjb25xdWVyIEN5cnVzIGFuZCBwcmVzZXJ2ZSBoaXMgdGhyb25lLiBOZXZlcnRoZWxlc3MsIGhlIGNvdWxkIG5vdCBjYXB0dXJlIHRoZW0sIGJ1dCB0aG91Z2ggdGhleSBoYWQgbG9zdCBDeXJ1cyB0aGVpciBsZWFkZXIgYW5kIHRoZWlyIG93biBjb21tYW5kZXJzLCB0aGV5IHJlc2N1ZWQgdGhlbXNlbHZlcyBmcm9tIGhpcyB2ZXJ5IHBhbGFjZSwgYXMgb25lIG1pZ2h0IHNheSwgdGh1cyBwcm92aW5nIGNsZWFybHkgdG8gdGhlIHdvcmxkIHRoYXQgdGhlIGVtcGlyZSBvZiB0aGUgUGVyc2lhbnMgYW5kIHRoZWlyIGtpbmcgYWJvdW5kZWQgaW4gZ29sZCBhbmQgbHV4dXJ5IGFuZCB3b21lbiwgYnV0IGluIGFsbCBlbHNlIHdhcyBhbiBlbXB0eSB2YXVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBhbGwgR3JlZWNlIHRvb2sgaGVhcnQgYW5kIGRlc3Bpc2VkIHRoZSBCYXJiYXJpYW5zLCBhbmQgdGhlIExhY2VkYWVtb25pYW5zIGluIHBhcnRpY3VsYXIgdGhvdWdodCBpdCBzdHJhbmdlIGlmIG5vdyBhdCBsZWFzdCB0aGV5IGNvdWxkIG5vdCByZXNjdWUgdGhlIEdyZWVrcyB0aGF0IGR3ZWx0IGluIEFzaWEgZnJvbSBzZXJ2aXR1ZGUsIGFuZCBwdXQgYSBzdG9wIHRvIHRoZWlyIG91dHJhZ2VvdXMgdHJlYXRtZW50IGF0IHRoZSBoYW5kcyBvZiB0aGUgUGVyc2lhbnMuIFRoZSB3YXIgdGhleSB3YWdlZCB3YXMgYXQgZmlyc3QgY29uZHVjdGVkIGJ5IFRoaW1icm9uLCBhbmQgdGhlbiBieSBEZXJjeWxsaWRhcywgYnV0IHNpbmNlIHRoZXkgYWNjb21wbGlzaGVkIG5vdGhpbmcgd29ydGh5IG9mIG5vdGUsIHRoZXkgYXQgbGFzdCBwdXQgdGhlIGNvbmR1Y3Qgb2YgdGhlIHdhciBpbiB0aGUgaGFuZHMgb2YgdGhlaXIga2luZywgQWdlc2lsYcO8cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGNyb3NzZWQgb3ZlciB0byBBc2lhIHdpdGggYSBmbGVldCwgd2VudCB0byB3b3JrIGF0IG9uY2UsIHdvbiBncmVhdCBmYW1lLCBkZWZlYXRlZCBUaXNzYXBoZXJuZXMgaW4gYSBwaXRjaGVkIGJhdHRsZSwgYW5kIHNldCB0aGUgR3JlZWsgY2l0aWVzIGluIHJldm9sdC4gVGhpcyBiZWluZyB0aGUgY2FzZSwgQXJ0YXhlcnhlcyBjb25zaWRlcmVkIGhvdyBoZSBtdXN0IGNhcnJ5IG9uIHRoZSB3YXIgd2l0aCBBZ2VzaWxhw7xzLCBhbmQgc2VudCBUaW1vY3Jlb24gdGhlIFJob2RpYW4gaW50byBHcmVlY2Ugd2l0aCBhIGdyZWF0IHN1bSBvZiBtb25leSwgYmlkZGluZyBoaW0gdXNlIGl0IGZvciB0aGUgY29ycnVwdGlvbiBvZiB0aGUgbW9zdCBpbmZsdWVudGlhbCBtZW4gaW4gdGhlIGNpdGllcyB0aGVyZSwgYW5kIGZvciBzdGlycmluZyB1cCB0aGUgR3JlZWtzIHRvIG1ha2Ugd2FyIHVwb24gU3BhcnRhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRpbW9jcmF0ZXMgZGlkIGFzIGhlIHdhcyBiaWRkZW4sIHRoZSBtb3N0IGltcG9ydGFudCBjaXRpZXMgY29uc3BpcmVkIHRvZ2V0aGVyIGFnYWluc3QgU3BhcnRhLCBQZWxvcG9ubmVzdXMgd2FzIGluIGEgdHVybW9pbCwgYW5kIHRoZSBTcGFydGFuIG1hZ2lzdHJhdGVzIHN1bW1vbmVkIEFnZXNpbGHDvHMgaG9tZSBmcm9tIEFzaWEuIEl0IHdhcyBhdCB0aGlzIHRpbWUsIGFzIHdlIGFyZSB0b2xkLCBhbmQgYXMgaGUgd2FzIGdvaW5nIGhvbWUsIHRoYXQgQWdlc2lsYcO8cyBzYWlkIHRvIGhpcyBmcmllbmRzOyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIGtpbmcgaGFzIGRyaXZlbiBtZSBvdXQgb2YgQXNpYSB3aXRoIHRoaXJ0eSB0aG91c2FuZCBhcmNoZXJzPC9xPjsgZm9yIHRoZSBQZXJzaWFuIGNvaW4gaGFzIHRoZSBmaWd1cmUgb2YgYW4gYXJjaGVyIHN0YW1wZWQgdXBvbiBpdC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMTUuNi4iIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHh2LiA2LiA8L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMTUuNi4iIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHh2LiA2LiA8L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgeHYuIDYuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBraW5nIGFsc28gZXhwZWxsZWQgdGhlIExhY2VkYWVtb25pYW5zIGZyb20gdGhlIHNlYSwgZW1wbG95aW5nIENvbm9uIHRoZSBBdGhlbmlhbiBhcyBoaXMgY29tbWFuZGVyIGFsb25nIHdpdGggUGhhcm5hYmF6dXMuIEZvciBDb25vbiBwYXNzZWQgdGhlIHRpbWUgYXQgQ3lwcnVzLCBhZnRlciB0aGUgc2VhLWZpZ2h0IGF0IEFlZ29zcG90YW1pLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjQwNS4gQi5DLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDM3LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWxjaWJpYWRlczwvdGl0bGU+IHh4eHZpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbm90IHNhdGlzZmllZCB3aXRoIG1lcmUgc2FmZXR5LCBidXQgYXdhaXRpbmcgYSByZXZlcnNhbCBpbiB0aGUgY291cnNlIG9mIGFmZmFpcnMsIGFzIGhlIHdvdWxkIGEgY2hhbmdlIG9mIHdpbmQgYXQgc2VhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc2VlaW5nIHRoYXQgaGlzIG93biBwbGFucyBuZWVkZWQgYSBtaWxpdGFyeSBmb3JjZSwgYW5kIHRoZSBraW5nJ3MgZm9yY2UgbmVlZGVkIGEgc2FnYWNpb3VzIGxlYWRlciwgaGUgd3JvdGUgYSBsZXR0ZXIgdG8gdGhlIGtpbmcgZXhwbGFpbmluZyBoaXMgcHVycG9zZXMuIFRoaXMgbGV0dGVyIGhlIG9yZGVyZWQgdGhlIGJlYXJlciwgaWYgcG9zc2libGUsIHRvIGdpdmUgdGhlIGtpbmcgYnkgdGhlIGhhbmQgb2YgWmVubyB0aGUgQ3JldGFuIG9yIFBvbHljcml0dXMgdGhlIE1lbmRhZWFuIChaZW5vIHdhcyBhIHRlYWNoZXIgb2YgZGFuY2luZywgYW5kIFBvbHljcml0dXMgd2FzIGEgcGh5c2ljaWFuKTsgYnV0IGlmIHRoZXNlIHdlcmUgbm90IGF0IGNvdXJ0LCBieSB0aGUgaGFuZCBvZiBDdGVzaWFzIHRoZSBwaHlzaWNpYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgQ3Rlc2lhcywgb24gcmVjZWl2aW5nIHRoZSBsZXR0ZXIsIGFkZGVkIHRvIHRoZSBzdWdnZXN0aW9ucyB3aGljaCBDb25vbiBtYWRlIHRvIHRoZSBraW5nIGEgcmVxdWVzdCB0byBzZW5kIEN0ZXNpYXMgYWxzbyB0byBoaW0sIGFzIGxpa2VseSB0byBiZSBvZiBzZXJ2aWNlIGluIG1hdHRlcnMgb24gdGhlIHNlYS1jb2FzdC4gQ3Rlc2lhcywgaG93ZXZlciwgc2F5cyB0aGF0IHRoZSBraW5nIG9mIGhpcyBvd24gYWNjb3JkIGNvbmZlcnJlZCB1cG9uIGhpbSB0aGlzIG5ldyBkdXR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGtpbmcgYWxzbyBleHBlbGxlZCB0aGUgTGFjZWRhZW1vbmlhbnMgZnJvbSB0aGUgc2VhLCBlbXBsb3lpbmcgQ29ub24gdGhlIEF0aGVuaWFuIGFzIGhpcyBjb21tYW5kZXIgYWxvbmcgd2l0aCBQaGFybmFiYXp1cy4gRm9yIENvbm9uIHBhc3NlZCB0aGUgdGltZSBhdCBDeXBydXMsIGFmdGVyIHRoZSBzZWEtZmlnaHQgYXQgQWVnb3Nwb3RhbWksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj40MDUuIEIuQy4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDM3LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGNpYmlhZGVzPC90aXRsZT4geHh4dmlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBub3Qgc2F0aXNmaWVkIHdpdGggbWVyZSBzYWZldHksIGJ1dCBhd2FpdGluZyBhIHJldmVyc2FsIGluIHRoZSBjb3Vyc2Ugb2YgYWZmYWlycywgYXMgaGUgd291bGQgYSBjaGFuZ2Ugb2Ygd2luZCBhdCBzZWEuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAzNy4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxjaWJpYWRlczwvdGl0bGU+IHh4eHZpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsY2liaWFkZXM8L3RpdGxlPiB4eHh2aWkuIDIuPC90cmFuc2xhdGlvbj4="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzZWVpbmcgdGhhdCBoaXMgb3duIHBsYW5zIG5lZWRlZCBhIG1pbGl0YXJ5IGZvcmNlLCBhbmQgdGhlIGtpbmcncyBmb3JjZSBuZWVkZWQgYSBzYWdhY2lvdXMgbGVhZGVyLCBoZSB3cm90ZSBhIGxldHRlciB0byB0aGUga2luZyBleHBsYWluaW5nIGhpcyBwdXJwb3Nlcy4gVGhpcyBsZXR0ZXIgaGUgb3JkZXJlZCB0aGUgYmVhcmVyLCBpZiBwb3NzaWJsZSwgdG8gZ2l2ZSB0aGUga2luZyBieSB0aGUgaGFuZCBvZiBaZW5vIHRoZSBDcmV0YW4gb3IgUG9seWNyaXR1cyB0aGUgTWVuZGFlYW4gKFplbm8gd2FzIGEgdGVhY2hlciBvZiBkYW5jaW5nLCBhbmQgUG9seWNyaXR1cyB3YXMgYSBwaHlzaWNpYW4pOyBidXQgaWYgdGhlc2Ugd2VyZSBub3QgYXQgY291cnQsIGJ5IHRoZSBoYW5kIG9mIEN0ZXNpYXMgdGhlIHBoeXNpY2lhbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgQ3Rlc2lhcywgb24gcmVjZWl2aW5nIHRoZSBsZXR0ZXIsIGFkZGVkIHRvIHRoZSBzdWdnZXN0aW9ucyB3aGljaCBDb25vbiBtYWRlIHRvIHRoZSBraW5nIGEgcmVxdWVzdCB0byBzZW5kIEN0ZXNpYXMgYWxzbyB0byBoaW0sIGFzIGxpa2VseSB0byBiZSBvZiBzZXJ2aWNlIGluIG1hdHRlcnMgb24gdGhlIHNlYS1jb2FzdC4gQ3Rlc2lhcywgaG93ZXZlciwgc2F5cyB0aGF0IHRoZSBraW5nIG9mIGhpcyBvd24gYWNjb3JkIGNvbmZlcnJlZCB1cG9uIGhpbSB0aGlzIG5ldyBkdXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWZ0ZXIgQXJ0YXhlcnhlcywgYnkgdGhlIHNlYS1maWdodCB3aGljaCBQaGFybmFiYXp1cyBhbmQgQ29ub24gd29uIGZvciBoaW0gb2ZmIENuaWR1cywgaGFkIHN0cmlwcGVkIHRoZSBMYWNlZGFlbW9uaWFucyBvZiB0aGVpciBwb3dlciBvbiB0aGUgc2VhLCBoZSBicm91Z2h0IHRoZSB3aG9sZSBvZiBHcmVlY2UgaW50byBkZXBlbmRlbmNlIHVwb24gaGltLCBzbyB0aGF0IGhlIGRpY3RhdGVkIHRvIHRoZSBHcmVla3MgdGhlIGNlbGVicmF0ZWQgcGVhY2UgY2FsbGVkIHRoZSBQZWFjZSBvZiBBbnRhbGNpZGFzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM4NyBCLkMuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDIzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWdlc2lsYcO8czwvdGl0bGU+LCB4eGlpaS4gMS4gZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEFudGFsY2lkYXMgd2FzIGEgU3BhcnRhbiwgc29uIG9mIExlb24sIGFuZCBhY3RpbmcgaW4gdGhlIGludGVyZXN0cyBvZiB0aGUga2luZyBoZSBpbmR1Y2VkIHRoZSBMYWNlZGFlbW9uaWFucyB0byBzdXJyZW5kZXIgdG8gdGhlIGtpbmcgYWxsIHRoZSBHcmVlayBjaXRpZXMgb2YgQXNpYSwgYW5kIGFsbCB0aGUgaXNsYW5kcyBhZGphY2VudCB0byBBc2lhLCB0byBwb3NzZXNzIHRoZW0gb24gcGF5bWVudCBvZiB0cmlidXRlOyBhbmQgcGVhY2Ugd2FzIHRodXMgZXN0YWJsaXNoZWQgYW1vbmcgdGhlIEdyZWVrcywgaWYgdGhlIG1vY2tlcnkgYW5kIGJldHJheWFsIG9mIEdyZWVjZSBjYW4gYmUgY2FsbGVkIHBlYWNlLCBhIHBlYWNlIHRoYW4gd2hpY2ggbm8gd2FyIGV2ZXIgYnJvdWdodCBhIG1vcmUgaW5nbG9yaW91cyBjb25zdW1tYXRpb24gdG8gdGhlIGRlZmVhdGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBBcnRheGVyeGVzLCBieSB0aGUgc2VhLWZpZ2h0IHdoaWNoIFBoYXJuYWJhenVzIGFuZCBDb25vbiB3b24gZm9yIGhpbSBvZmYgQ25pZHVzLCBoYWQgc3RyaXBwZWQgdGhlIExhY2VkYWVtb25pYW5zIG9mIHRoZWlyIHBvd2VyIG9uIHRoZSBzZWEsIGhlIGJyb3VnaHQgdGhlIHdob2xlIG9mIEdyZWVjZSBpbnRvIGRlcGVuZGVuY2UgdXBvbiBoaW0sIHNvIHRoYXQgaGUgZGljdGF0ZWQgdG8gdGhlIEdyZWVrcyB0aGUgY2VsZWJyYXRlZCBwZWFjZSBjYWxsZWQgdGhlIFBlYWNlIG9mIEFudGFsY2lkYXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzODcgQi5DLiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDIzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHh4aWlpLiAxLiBmZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDIzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHh4aWlpLiAxLiBmZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgeHhpaWkuIDEuIGZmLjwvdHJhbnNsYXRpb24+"
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBBbnRhbGNpZGFzIHdhcyBhIFNwYXJ0YW4sIHNvbiBvZiBMZW9uLCBhbmQgYWN0aW5nIGluIHRoZSBpbnRlcmVzdHMgb2YgdGhlIGtpbmcgaGUgaW5kdWNlZCB0aGUgTGFjZWRhZW1vbmlhbnMgdG8gc3VycmVuZGVyIHRvIHRoZSBraW5nIGFsbCB0aGUgR3JlZWsgY2l0aWVzIG9mIEFzaWEsIGFuZCBhbGwgdGhlIGlzbGFuZHMgYWRqYWNlbnQgdG8gQXNpYSwgdG8gcG9zc2VzcyB0aGVtIG9uIHBheW1lbnQgb2YgdHJpYnV0ZTsgYW5kIHBlYWNlIHdhcyB0aHVzIGVzdGFibGlzaGVkIGFtb25nIHRoZSBHcmVla3MsIGlmIHRoZSBtb2NrZXJ5IGFuZCBiZXRyYXlhbCBvZiBHcmVlY2UgY2FuIGJlIGNhbGxlZCBwZWFjZSwgYSBwZWFjZSB0aGFuIHdoaWNoIG5vIHdhciBldmVyIGJyb3VnaHQgYSBtb3JlIGluZ2xvcmlvdXMgY29uc3VtbWF0aW9uIHRvIHRoZSBkZWZlYXRlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uIEFydGF4ZXJ4ZXMsIGFsdGhvdWdoIGhlIGFsd2F5cyBoZWxkIG90aGVyIFNwYXJ0YW5zIGluIGFib21pbmF0aW9uLCBhbmQgY29uc2lkZXJlZCB0aGVtLCBhcyBEZWlub24gdGVsbHMgdXMsIHRoZSBtb3N0IHNoYW1lbGVzcyBvZiBhbGwgbWFua2luZCwgc2hvd2VkIGdyZWF0IGFmZmVjdGlvbiBmb3IgQW50YWxjaWRhcyB3aGVuIGhlIGNhbWUgdXAgdG8gUGVyc2lhLiBPbiBvbmUgb2NjYXNpb24gaGUgYWN0dWFsbHkgdG9vayBhIHdyZWF0aCBvZiBmbG93ZXJzLCBkaXBwZWQgaXQgaW4gdGhlIG1vc3QgY29zdGx5IG9pbnRtZW50LCBhbmQgc2VudCBpdCB0byBBbnRhbGNpZGFzIGFmdGVyIHN1cHBlcjsgYW5kIGFsbCBtZW4gd29uZGVyZWQgYXQgdGhlIGtpbmRuZXNzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMzAuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5QZWxvcGlkYXM8L3RpdGxlPiwgeHh4LiA0LiA8L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQW50YWxjaWRhcyB3YXMgYSBmaXQgcGVyc29uLCBhcyBpdCB3b3VsZCBzZWVtLCB0byBiZSBleHF1aXNpdGVseSB0cmVhdGVkIGFuZCB0byByZWNlaXZlIHN1Y2ggYSB3cmVhdGgsIG5vdyB0aGF0IGhlIGhhZCBkYW5jZWQgYXdheSBhbW9uZyB0aGUgUGVyc2lhbnMgdGhlIGZhaXIgZmFtZSBvZiBMZW9uaWRhcyBhbmQgQ2FsbGljcmF0aWRhcy4gRm9yIEFnZXNpbGHDvHMsIGFzIGl0IHdvdWxkIGFwcGVhciwgd2hlbiBzb21lb25lIHNhaWQgdG8gaGltOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFsYXMgZm9yIEdyZWVjZSwgbm93IHRoYXQgdGhlIFNwYXJ0YW5zIGFyZSBtZWRpemluZyw8L3E+IHJlcGxpZWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXJlIG5vdCB0aGUgTWVkZXMgdGhlIHJhdGhlciBzcGFydGFuaXppbmc/PC9xPiBIb3dldmVyLCB0aGUgd2l0dGluZXNzIG9mIHRoZSBzcGVlY2ggY291bGQgbm90IHJlbW92ZSB0aGUgc2hhbWUgb2YgdGhlIGRlZWQsIGFuZCB0aGUgU3BhcnRhbnMgbG9zdCB0aGVpciBzdXByZW1hY3kgaW4gdGhlIGRpc2FzdHJvdXMgYmF0dGxlIG9mIExldWN0cmEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzcxIEIuQy4gQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMjguNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BZ2VzaWxhw7xzPC90aXRsZT4sIHh4dmlpaS4gNS4gPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRob3VnaCB0aGUgZ2xvcnkgb2YgU3BhcnRhIGhhZCBiZWVuIGxvc3QgYmVmb3JlIHRoYXQgYnkgdGhpcyB0cmVhdHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uIEFydGF4ZXJ4ZXMsIGFsdGhvdWdoIGhlIGFsd2F5cyBoZWxkIG90aGVyIFNwYXJ0YW5zIGluIGFib21pbmF0aW9uLCBhbmQgY29uc2lkZXJlZCB0aGVtLCBhcyBEZWlub24gdGVsbHMgdXMsIHRoZSBtb3N0IHNoYW1lbGVzcyBvZiBhbGwgbWFua2luZCwgc2hvd2VkIGdyZWF0IGFmZmVjdGlvbiBmb3IgQW50YWxjaWRhcyB3aGVuIGhlIGNhbWUgdXAgdG8gUGVyc2lhLiBPbiBvbmUgb2NjYXNpb24gaGUgYWN0dWFsbHkgdG9vayBhIHdyZWF0aCBvZiBmbG93ZXJzLCBkaXBwZWQgaXQgaW4gdGhlIG1vc3QgY29zdGx5IG9pbnRtZW50LCBhbmQgc2VudCBpdCB0byBBbnRhbGNpZGFzIGFmdGVyIHN1cHBlcjsgYW5kIGFsbCBtZW4gd29uZGVyZWQgYXQgdGhlIGtpbmRuZXNzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDMwLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QZWxvcGlkYXM8L3RpdGxlPiwgeHh4LiA0LiA8L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMzAuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBlbG9waWRhczwvdGl0bGU+LCB4eHguIDQuIDwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzPC90aXRsZT4sIHh4eC4gNC4gPC90cmFuc2xhdGlvbj4="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBbnRhbGNpZGFzIHdhcyBhIGZpdCBwZXJzb24sIGFzIGl0IHdvdWxkIHNlZW0sIHRvIGJlIGV4cXVpc2l0ZWx5IHRyZWF0ZWQgYW5kIHRvIHJlY2VpdmUgc3VjaCBhIHdyZWF0aCwgbm93IHRoYXQgaGUgaGFkIGRhbmNlZCBhd2F5IGFtb25nIHRoZSBQZXJzaWFucyB0aGUgZmFpciBmYW1lIG9mIExlb25pZGFzIGFuZCBDYWxsaWNyYXRpZGFzLiBGb3IgQWdlc2lsYcO8cywgYXMgaXQgd291bGQgYXBwZWFyLCB3aGVuIHNvbWVvbmUgc2FpZCB0byBoaW06IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbGFzIGZvciBHcmVlY2UsIG5vdyB0aGF0IHRoZSBTcGFydGFucyBhcmUgbWVkaXppbmcsPC9xPiByZXBsaWVkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXJlIG5vdCB0aGUgTWVkZXMgdGhlIHJhdGhlciBzcGFydGFuaXppbmc/PC9xPiBIb3dldmVyLCB0aGUgd2l0dGluZXNzIG9mIHRoZSBzcGVlY2ggY291bGQgbm90IHJlbW92ZSB0aGUgc2hhbWUgb2YgdGhlIGRlZWQsIGFuZCB0aGUgU3BhcnRhbnMgbG9zdCB0aGVpciBzdXByZW1hY3kgaW4gdGhlIGRpc2FzdHJvdXMgYmF0dGxlIG9mIExldWN0cmEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNzEgQi5DLiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDI4LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHh4dmlpaS4gNS4gPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRob3VnaCB0aGUgZ2xvcnkgb2YgU3BhcnRhIGhhZCBiZWVuIGxvc3QgYmVmb3JlIHRoYXQgYnkgdGhpcyB0cmVhdHkuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDI4LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHh4dmlpaS4gNS4gPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHh4dmlpaS4gNS4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28gbG9uZywgdGhlbiwgYXMgU3BhcnRhIGtlcHQgdGhlIGZpcnN0IHBsYWNlIGluIEdyZWVjZSwgQXJ0YXhlcnhlcyB0cmVhdGVkIEFudGFsY2lkYXMgYXMgaGlzIGd1ZXN0IGFuZCBjYWxsZWQgaGltIGhpcyBmcmllbmQ7IGJ1dCBhZnRlciB0aGUgU3BhcnRhbnMgaGFkIGJlZW4gZGVmZWF0ZWQgYXQgTGV1Y3RyYSwgdGhleSBmZWxsIHNvIGxvdyBhcyB0byBiZWcgZm9yIG1vbmV5LCBhbmQgc2VudCBBZ2VzaWxhw7xzIHRvIEVneXB0LCB3aGlsZSBBbnRhbGNpZGFzIHdlbnQgdXAgdG8gQXJ0YXhlcnhlcyB0byBhc2sgaGltIHRvIHN1cHBseSB0aGUgd2FudHMgb2YgdGhlIExhY2VkYWVtb25pYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUga2luZywgaG93ZXZlciwgc28gbmVnbGVjdGVkIGFuZCBzbGlnaHRlZCBhbmQgcmVqZWN0ZWQgaGltIHRoYXQsIHdoZW4gaGUgY2FtZSBiYWNrIGhvbWUsIGJlaW5nIHJhaWxlZCBhdCBieSBoaXMgZW5lbWllcywgYW5kIGJlaW5nIGluIGZlYXIgb2YgdGhlIGVwaG9ycywgaGUgc3RhcnZlZCBoaW1zZWxmIHRvIGRlYXRoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIGxvbmcsIHRoZW4sIGFzIFNwYXJ0YSBrZXB0IHRoZSBmaXJzdCBwbGFjZSBpbiBHcmVlY2UsIEFydGF4ZXJ4ZXMgdHJlYXRlZCBBbnRhbGNpZGFzIGFzIGhpcyBndWVzdCBhbmQgY2FsbGVkIGhpbSBoaXMgZnJpZW5kOyBidXQgYWZ0ZXIgdGhlIFNwYXJ0YW5zIGhhZCBiZWVuIGRlZmVhdGVkIGF0IExldWN0cmEsIHRoZXkgZmVsbCBzbyBsb3cgYXMgdG8gYmVnIGZvciBtb25leSwgYW5kIHNlbnQgQWdlc2lsYcO8cyB0byBFZ3lwdCwgd2hpbGUgQW50YWxjaWRhcyB3ZW50IHVwIHRvIEFydGF4ZXJ4ZXMgdG8gYXNrIGhpbSB0byBzdXBwbHkgdGhlIHdhbnRzIG9mIHRoZSBMYWNlZGFlbW9uaWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBraW5nLCBob3dldmVyLCBzbyBuZWdsZWN0ZWQgYW5kIHNsaWdodGVkIGFuZCByZWplY3RlZCBoaW0gdGhhdCwgd2hlbiBoZSBjYW1lIGJhY2sgaG9tZSwgYmVpbmcgcmFpbGVkIGF0IGJ5IGhpcyBlbmVtaWVzLCBhbmQgYmVpbmcgaW4gZmVhciBvZiB0aGUgZXBob3JzLCBoZSBzdGFydmVkIGhpbXNlbGYgdG8gZGVhdGguCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXNtZW5pYXMgdGhlIFRoZWJhbiBhbHNvLCBhbmQgUGVsb3BpZGFzLCB3aG8gaGFkIGp1c3QgYmVlbiB2aWN0b3Jpb3VzIGluIHRoZSBiYXR0bGUgb2YgTGV1Y3RyYSwgd2VudCB1cCB0byB0aGUga2luZy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAzMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzPC90aXRsZT4sIHh4eC4gMS0zLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBQZWxvcGlkYXMgZGlkIG5vdGhpbmcgdG8gZGlzZ3JhY2UgaGltc2VsZjsgYnV0IElzbWVuaWFzLCB3aGVuIG9yZGVyZWQgdG8gbWFrZSB0aGUgb2JlaXNhbmNlIHRvIHRoZSBraW5nLCB0aHJldyBoaXMgcmluZyBkb3duIG9uIHRoZSBncm91bmQgaW4gZnJvbnQgb2YgaGltLCBhbmQgdGhlbiBzdG9vcGVkIGFuZCBwaWNrZWQgaXQgdXAsIHRodXMgZ2l2aW5nIG1lbiB0byB0aGluayB0aGF0IGhlIHdhcyBtYWtpbmcgdGhlIG9iZWlzYW5jZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIFRpbWFnb3JhcyB0aGUgQXRoZW5pYW4sIGhvd2V2ZXIsIHdobyBzZW50IHRvIGhpbSBieSBoaXMgc2VjcmV0YXJ5LCBCZWx1cmlzLCBhIHNlY3JldCBtZXNzYWdlIGluIHdyaXRpbmcsIHRoZSBraW5nIHdhcyBzbyBwbGVhc2VkIHRoYXQgaGUgZ2F2ZSBoaW0gdGVuIHRob3VzYW5kIGRhcmljcywgYW5kIGVpZ2h0eSBtaWxrIGNvd3MgdG8gZm9sbG93IGluIGhpcyB0cmFpbiBiZWNhdXNlIGhlIHdhcyBzaWNrIGFuZCByZXF1aXJlZCBjb3cncyBtaWxrOyBhbmQgYmVzaWRlcywgaGUgc2VudCBoaW0gYSBjb3VjaCwgd2l0aCBiZWRkaW5nIGZvciBpdCwgYW5kIHNlcnZhbnRzIHRvIG1ha2UgdGhlIGJlZCAob24gdGhlIGdyb3VuZCB0aGF0IHRoZSBHcmVla3MgaGFkIG5vdCBsZWFybmVkIHRoZSBhcnQgb2YgbWFraW5nIGJlZHMpLCBhbmQgYmVhcmVycyB0byBjYXJyeSBoaW0gZG93biB0byB0aGUgc2VhLWNvYXN0LCBlbmZlZWJsZWQgYXMgaGUgd2FzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgZHVyaW5nIGhpcyBwcmVzZW5jZSBhdCBjb3VydCwgaGUgdXNlZCB0byBzZW5kIGhpbSBhIG1vc3Qgc3BsZW5kaWQgc3VwcGVyLCBzbyB0aGF0IE9zdGFuZXMsIHRoZSBicm90aGVyIG9mIHRoZSBraW5nLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRpbWFnb3JhcywgcmVtZW1iZXIgdGhpcyB0YWJsZTsgaXQgaXMgbm8gc2xpZ2h0IHJldHVybiB3aGljaCB0aG91IG11c3QgbWFrZSBmb3Igc3VjaCBhbiBhcnJheS48L3E+IE5vdyB0aGlzIHdhcyBhIHJlcHJvYWNoIGZvciBoaXMgdHJlYWNoZXJ5IHJhdGhlciB0aGFuIGEgcmVtaW5kZXIgb2YgdGhlIGtpbmcncyBmYXZvdXIuIEF0IGFueSByYXRlLCBmb3IgaGlzIHZlbmFsaXR5LCBUaW1hZ29yYXMgd2FzIGNvbmRlbW5lZCB0byBkZWF0aCBieSB0aGUgQXRoZW5pYW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMzAuNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5QZWxvcGlkYXM8L3RpdGxlPiwgeHh4LiA2IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBlbG9waWRhczwvdGl0bGU+LCB4eHguIDEtMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gUGVsb3BpZGFzIGRpZCBub3RoaW5nIHRvIGRpc2dyYWNlIGhpbXNlbGY7IGJ1dCBJc21lbmlhcywgd2hlbiBvcmRlcmVkIHRvIG1ha2UgdGhlIG9iZWlzYW5jZSB0byB0aGUga2luZywgdGhyZXcgaGlzIHJpbmcgZG93biBvbiB0aGUgZ3JvdW5kIGluIGZyb250IG9mIGhpbSwgYW5kIHRoZW4gc3Rvb3BlZCBhbmQgcGlja2VkIGl0IHVwLCB0aHVzIGdpdmluZyBtZW4gdG8gdGhpbmsgdGhhdCBoZSB3YXMgbWFraW5nIHRoZSBvYmVpc2FuY2UuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAzMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzPC90aXRsZT4sIHh4eC4gMS0zLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzPC90aXRsZT4sIHh4eC4gMS0zLjwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldpdGggVGltYWdvcmFzIHRoZSBBdGhlbmlhbiwgaG93ZXZlciwgd2hvIHNlbnQgdG8gaGltIGJ5IGhpcyBzZWNyZXRhcnksIEJlbHVyaXMsIGEgc2VjcmV0IG1lc3NhZ2UgaW4gd3JpdGluZywgdGhlIGtpbmcgd2FzIHNvIHBsZWFzZWQgdGhhdCBoZSBnYXZlIGhpbSB0ZW4gdGhvdXNhbmQgZGFyaWNzLCBhbmQgZWlnaHR5IG1pbGsgY293cyB0byBmb2xsb3cgaW4gaGlzIHRyYWluIGJlY2F1c2UgaGUgd2FzIHNpY2sgYW5kIHJlcXVpcmVkIGNvdydzIG1pbGs7IGFuZCBiZXNpZGVzLCBoZSBzZW50IGhpbSBhIGNvdWNoLCB3aXRoIGJlZGRpbmcgZm9yIGl0LCBhbmQgc2VydmFudHMgdG8gbWFrZSB0aGUgYmVkIChvbiB0aGUgZ3JvdW5kIHRoYXQgdGhlIEdyZWVrcyBoYWQgbm90IGxlYXJuZWQgdGhlIGFydCBvZiBtYWtpbmcgYmVkcyksIGFuZCBiZWFyZXJzIHRvIGNhcnJ5IGhpbSBkb3duIHRvIHRoZSBzZWEtY29hc3QsIGVuZmVlYmxlZCBhcyBoZSB3YXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBkdXJpbmcgaGlzIHByZXNlbmNlIGF0IGNvdXJ0LCBoZSB1c2VkIHRvIHNlbmQgaGltIGEgbW9zdCBzcGxlbmRpZCBzdXBwZXIsIHNvIHRoYXQgT3N0YW5lcywgdGhlIGJyb3RoZXIgb2YgdGhlIGtpbmcsIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaW1hZ29yYXMsIHJlbWVtYmVyIHRoaXMgdGFibGU7IGl0IGlzIG5vIHNsaWdodCByZXR1cm4gd2hpY2ggdGhvdSBtdXN0IG1ha2UgZm9yIHN1Y2ggYW4gYXJyYXkuPC9xPiBOb3cgdGhpcyB3YXMgYSByZXByb2FjaCBmb3IgaGlzIHRyZWFjaGVyeSByYXRoZXIgdGhhbiBhIHJlbWluZGVyIG9mIHRoZSBraW5nJ3MgZmF2b3VyLiBBdCBhbnkgcmF0ZSwgZm9yIGhpcyB2ZW5hbGl0eSwgVGltYWdvcmFzIHdhcyBjb25kZW1uZWQgdG8gZGVhdGggYnkgdGhlIEF0aGVuaWFucy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAzMC42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzPC90aXRsZT4sIHh4eC4gNiBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDMwLjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QZWxvcGlkYXM8L3RpdGxlPiwgeHh4LiA2IGYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QZWxvcGlkYXM8L3RpdGxlPiwgeHh4LiA2IGYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXJlIHdhcyBvbmUgdGhpbmcgYnkgd2hpY2ggQXJ0YXhlcnhlcyBnbGFkZGVuZWQgdGhlIGhlYXJ0cyBvZiB0aGUgR3JlZWtzLCBpbiByZXR1cm4gZm9yIGFsbCB0aGUgZXZpbHMgd2hpY2ggaGUgd3JvdWdodCB0aGVtLCBhbmQgdGhhdCB3YXMgaGlzIHB1dHRpbmcgVGlzc2FwaGVybmVzIHRvIGRlYXRoLCB0aGVpciBtb3N0IGhhdGVkIGFuZCBtYWxpY2lvdXMgZW5lbXkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMTAuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BZ2VzaWxhw7xzPC90aXRsZT4sIHguIDMgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQW5kIGhlIHB1dCBoaW0gdG8gZGVhdGggaW4gY29uc2VxdWVuY2Ugb2YgYWNjdXNhdGlvbnMgYWdhaW5zdCBoaW0gd2hpY2ggd2VyZSBzZWNvbmRlZCBieSBQYXJ5c2F0aXMuIEZvciB0aGUga2luZyBkaWQgbm90IGxvbmcgcGVyc2lzdCBpbiBoaXMgd3JhdGggYWdhaW5zdCBoaXMgbW90aGVyLCBidXQgd2FzIHJlY29uY2lsZWQgd2l0aCBoZXIgYW5kIHN1bW1vbmVkIGhlciB0byBjb3VydCwgc2luY2UgaGUgaGFkIHRoYXQgc2hlIGhhZCBpbnRlbGxlY3QgYW5kIGEgbG9mdHkgc3Bpcml0IHdvcnRoeSBvZiBhIHF1ZWVuLCBhbmQgc2luY2UgdGhlcmUgd2FzIG5vIGxvbmdlciBhbnkgZ3JvdW5kIGZvciB0aGVpciBzdXNwZWN0aW5nIGFuZCBpbmp1cmluZyBvbmUgYW5vdGhlciBpZiB0aGV5IHdlcmUgdG9nZXRoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgc2hlIGNvbnN1bHRlZCB0aGUga2luZydzIHBsZWFzdXJlIGluIGFsbCB0aGluZ3MsIGFuZCBieSBhcHByb3Zpbmcgb2YgZXZlcnl0aGluZyB0aGF0IGhlIGRpZCwgYWNxdWlyZWQgaW5mbHVlbmNlIHdpdGggaGltIGFuZCBhY2hpZXZlZCBhbGwgaGVyIGVuZHMuIFNoZSBwZXJjZWl2ZWQgdGhhdCB0aGUga2luZyB3YXMgZGVzcGVyYXRlbHkgaW4gbG92ZSB3aXRoIG9uZSBvZiBoaXMgdHdvIGRhdWdodGVycywgQXRvc3NhLCBhbmQgdGhhdCwgY2hpZWZseSBvbiBoaXMgbW90aGVyJ3MgYWNjb3VudCwgaGUgd2FzIHRyeWluZyB0byBjb25jZWFsIGFuZCByZXN0cmFpbiBoaXMgcGFzc2lvbiwgYWx0aG91Z2ggc29tZSBzYXkgdGhhdCBoZSBoYWQgYWxyZWFkeSBoYWQgc2VjcmV0IGludGVyY291cnNlIHdpdGggdGhlIGdpcmwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGFjY29yZGluZ2x5LCBQYXJ5c2F0aXMgYmVjYW1lIHN1c3BpY2lvdXMgb2YgdGhlIG1hdHRlciwgc2hlIHNob3dlZCB0aGUgZ2lybCBtb3JlIGFmZmVjdGlvbiB0aGFuIGJlZm9yZSwgYW5kIHdvdWxkIHNwZWFrIHRvIEFydGF4ZXJ4ZXMgaW4gcHJhaXNlIG9mIGhlciBiZWF1dHkgYW5kIGhlciBkaXNwb3NpdGlvbiwgc2F5aW5nIHRoYXQgc2hlIHdhcyB0cnVseSByb3lhbCBhbmQgbWFnbmlmaWNlbnQuIEF0IGxhc3QsIHRoZW4sIHNoZSBwZXJzdWFkZWQgdGhlIGtpbmcgdG8gbWFycnkgdGhlIGdpcmwgYW5kIHByb2NsYWltIGhlciBoaXMgbGF3ZnVsIHdpZmUsIGlnbm9yaW5nIHRoZSBvcGluaW9ucyBhbmQgbGF3cyBvZiB0aGUgR3JlZWtzLCBhbmQgcmVnYXJkaW5nIGhpbXNlbGYgYXMgYXBwb2ludGVkIGJ5IEhlYXZlbiB0byBiZSBhIGxhdyB1bnRvIHRoZSBQZXJzaWFucyBhbmQgYW4gYXJiaXRyYXRvciBvZiBnb29kIGFuZCBldmlsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lLCBob3dldmVyLCBzYXksIGFuZCBhbW9uZyB0aGVtIGlzIEhlcmFjbGVpZGVzIG9mIEN5bcOpLCB0aGF0IEFydGF4ZXJ4ZXMgbWFycmllZCwgbm90IG9uZSBvZiBoaXMgZGF1Z2h0ZXJzIG9ubHksIGJ1dCBhbHNvIGEgc2Vjb25kLCBBbWVzdHJpcywgb2Ygd2hvbSB3ZSBzaGFsbCBzcGVhayBhIGxpdHRsZSBsYXRlci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFydC4gMjcuNCIgdmFsaWQ9InllcyI+Q2hhcC4geHh2aWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEF0b3NzYSwgaG93ZXZlciwgd2FzIHNvIGJlbG92ZWQgYnkgaGVyIGZhdGhlciBhcyBoaXMgY29uc29ydCwgdGhhdCB3aGVuIGhlciBib2R5IHdhcyBjb3ZlcmVkIHdpdGggbGVwcm9zeSBoZSB3YXMgbm90IG9mZmVuZGVkIGF0IHRoaXMgaW4gdGhlIGxlYXN0LCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgb2ZmZXJlZCBwcmF5ZXJzIHRvIEhlcmEgaW4gaGVyIGJlaGFsZiwgbWFraW5nIGhpcyBvYmVpc2FuY2UgYW5kIGNsdXRjaGluZyB0aGUgZWFydGggYmVmb3JlIHRoaXMgZ29kZGVzcyBhcyBoZSBkaWQgYmVmb3JlIG5vIG90aGVyOyB3aGlsZSBoaXMgc2F0cmFwcyBhbmQgZnJpZW5kcywgYXQgaGlzIGNvbW1hbmQsIHNlbnQgdGhlIGdvZGRlc3Mgc28gbWFueSBnaWZ0cyB0aGF0IHRoZSBzaXh0ZWVuIGZ1cmxvbmdzIGJldHdlZW4gaGVyIHNhbmN0dWFyeSBhbmQgdGhlIHJveWFsIHBhbGFjZSB3ZXJlIGZpbGxlZCB3aXRoIGdvbGQgYW5kIHNpbHZlciBhbmQgcHVycGxlIGFuZCBob3JzZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXJlIHdhcyBvbmUgdGhpbmcgYnkgd2hpY2ggQXJ0YXhlcnhlcyBnbGFkZGVuZWQgdGhlIGhlYXJ0cyBvZiB0aGUgR3JlZWtzLCBpbiByZXR1cm4gZm9yIGFsbCB0aGUgZXZpbHMgd2hpY2ggaGUgd3JvdWdodCB0aGVtLCBhbmQgdGhhdCB3YXMgaGlzIHB1dHRpbmcgVGlzc2FwaGVybmVzIHRvIGRlYXRoLCB0aGVpciBtb3N0IGhhdGVkIGFuZCBtYWxpY2lvdXMgZW5lbXkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDEwLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHguIDMgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQW5kIGhlIHB1dCBoaW0gdG8gZGVhdGggaW4gY29uc2VxdWVuY2Ugb2YgYWNjdXNhdGlvbnMgYWdhaW5zdCBoaW0gd2hpY2ggd2VyZSBzZWNvbmRlZCBieSBQYXJ5c2F0aXMuIEZvciB0aGUga2luZyBkaWQgbm90IGxvbmcgcGVyc2lzdCBpbiBoaXMgd3JhdGggYWdhaW5zdCBoaXMgbW90aGVyLCBidXQgd2FzIHJlY29uY2lsZWQgd2l0aCBoZXIgYW5kIHN1bW1vbmVkIGhlciB0byBjb3VydCwgc2luY2UgaGUgaGFkIHRoYXQgc2hlIGhhZCBpbnRlbGxlY3QgYW5kIGEgbG9mdHkgc3Bpcml0IHdvcnRoeSBvZiBhIHF1ZWVuLCBhbmQgc2luY2UgdGhlcmUgd2FzIG5vIGxvbmdlciBhbnkgZ3JvdW5kIGZvciB0aGVpciBzdXNwZWN0aW5nIGFuZCBpbmp1cmluZyBvbmUgYW5vdGhlciBpZiB0aGV5IHdlcmUgdG9nZXRoZXIuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMTAuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgeC4gMyBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB4LiAzIGYuPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgc2hlIGNvbnN1bHRlZCB0aGUga2luZydzIHBsZWFzdXJlIGluIGFsbCB0aGluZ3MsIGFuZCBieSBhcHByb3Zpbmcgb2YgZXZlcnl0aGluZyB0aGF0IGhlIGRpZCwgYWNxdWlyZWQgaW5mbHVlbmNlIHdpdGggaGltIGFuZCBhY2hpZXZlZCBhbGwgaGVyIGVuZHMuIFNoZSBwZXJjZWl2ZWQgdGhhdCB0aGUga2luZyB3YXMgZGVzcGVyYXRlbHkgaW4gbG92ZSB3aXRoIG9uZSBvZiBoaXMgdHdvIGRhdWdodGVycywgQXRvc3NhLCBhbmQgdGhhdCwgY2hpZWZseSBvbiBoaXMgbW90aGVyJ3MgYWNjb3VudCwgaGUgd2FzIHRyeWluZyB0byBjb25jZWFsIGFuZCByZXN0cmFpbiBoaXMgcGFzc2lvbiwgYWx0aG91Z2ggc29tZSBzYXkgdGhhdCBoZSBoYWQgYWxyZWFkeSBoYWQgc2VjcmV0IGludGVyY291cnNlIHdpdGggdGhlIGdpcmwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGFjY29yZGluZ2x5LCBQYXJ5c2F0aXMgYmVjYW1lIHN1c3BpY2lvdXMgb2YgdGhlIG1hdHRlciwgc2hlIHNob3dlZCB0aGUgZ2lybCBtb3JlIGFmZmVjdGlvbiB0aGFuIGJlZm9yZSwgYW5kIHdvdWxkIHNwZWFrIHRvIEFydGF4ZXJ4ZXMgaW4gcHJhaXNlIG9mIGhlciBiZWF1dHkgYW5kIGhlciBkaXNwb3NpdGlvbiwgc2F5aW5nIHRoYXQgc2hlIHdhcyB0cnVseSByb3lhbCBhbmQgbWFnbmlmaWNlbnQuIEF0IGxhc3QsIHRoZW4sIHNoZSBwZXJzdWFkZWQgdGhlIGtpbmcgdG8gbWFycnkgdGhlIGdpcmwgYW5kIHByb2NsYWltIGhlciBoaXMgbGF3ZnVsIHdpZmUsIGlnbm9yaW5nIHRoZSBvcGluaW9ucyBhbmQgbGF3cyBvZiB0aGUgR3JlZWtzLCBhbmQgcmVnYXJkaW5nIGhpbXNlbGYgYXMgYXBwb2ludGVkIGJ5IEhlYXZlbiB0byBiZSBhIGxhdyB1bnRvIHRoZSBQZXJzaWFucyBhbmQgYW4gYXJiaXRyYXRvciBvZiBnb29kIGFuZCBldmlsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSwgYW5kIGFtb25nIHRoZW0gaXMgSGVyYWNsZWlkZXMgb2YgQ3ltw6ksIHRoYXQgQXJ0YXhlcnhlcyBtYXJyaWVkLCBub3Qgb25lIG9mIGhpcyBkYXVnaHRlcnMgb25seSwgYnV0IGFsc28gYSBzZWNvbmQsIEFtZXN0cmlzLCBvZiB3aG9tIHdlIHNoYWxsIHNwZWFrIGEgbGl0dGxlIGxhdGVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFydC4gMjcuNCIgdmFsaWQ9InllcyI+Q2hhcC4geHh2aWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEF0b3NzYSwgaG93ZXZlciwgd2FzIHNvIGJlbG92ZWQgYnkgaGVyIGZhdGhlciBhcyBoaXMgY29uc29ydCwgdGhhdCB3aGVuIGhlciBib2R5IHdhcyBjb3ZlcmVkIHdpdGggbGVwcm9zeSBoZSB3YXMgbm90IG9mZmVuZGVkIGF0IHRoaXMgaW4gdGhlIGxlYXN0LCAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFydC4gMjcuNCIgdmFsaWQ9InllcyI+Q2hhcC4geHh2aWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBvZmZlcmVkIHByYXllcnMgdG8gSGVyYSBpbiBoZXIgYmVoYWxmLCBtYWtpbmcgaGlzIG9iZWlzYW5jZSBhbmQgY2x1dGNoaW5nIHRoZSBlYXJ0aCBiZWZvcmUgdGhpcyBnb2RkZXNzIGFzIGhlIGRpZCBiZWZvcmUgbm8gb3RoZXI7IHdoaWxlIGhpcyBzYXRyYXBzIGFuZCBmcmllbmRzLCBhdCBoaXMgY29tbWFuZCwgc2VudCB0aGUgZ29kZGVzcyBzbyBtYW55IGdpZnRzIHRoYXQgdGhlIHNpeHRlZW4gZnVybG9uZ3MgYmV0d2VlbiBoZXIgc2FuY3R1YXJ5IGFuZCB0aGUgcm95YWwgcGFsYWNlIHdlcmUgZmlsbGVkIHdpdGggZ29sZCBhbmQgc2lsdmVyIGFuZCBwdXJwbGUgYW5kIGhvcnNlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIHdhciB3aGljaCBQaGFybmFiYXp1cyBhbmQgSXBoaWNyYXRlcyBjb25kdWN0ZWQgZm9yIGhpbSBhZ2FpbnN0IEVneXB0IGhlIHdhcyB1bnN1Y2Nlc3NmdWwsIG93aW5nIHRvIHRoZSBkaXNzZW5zaW9ucyBvZiB0aGVzZSBjb21tYW5kZXJzOyBhZ2FpbnN0IHRoZSBDYWR1c2lhbnMsIHRoZXJlZm9yZSwgaGUgbWFkZSBhbiBleHBlZGl0aW9uIGluIHBlcnNvbiwgd2l0aCB0aHJlZSBodW5kcmVkIHRob3VzYW5kIGZvb3RtZW4gYW5kIHRlbiB0aG91c2FuZCBob3JzZS4gQnV0IHRoZSBjb3VudHJ5IHdoaWNoIGhlIHBlbmV0cmF0ZWQgd2FzIHJvdWdoIGFuZCBoYXJkIHRvIHRyYXZlcnNlLCBhYm91bmRlZCBpbiBtaXN0cywgYW5kIHByb2R1Y2VkIG5vIGdyYWlucywgYWx0aG91Z2ggaXRzIHBlYXJzIGFuZCBhcHBsZXMgYW5kIG90aGVyIHN1Y2ggdHJlZS1mcnVpdHMgc3VwcG9ydGVkIGEgd2FybGlrZSBhbmQgY291cmFnZW91cyBwb3B1bGF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5VbmF3YXJlcywgdGhlcmVmb3JlLCBoZSBiZWNhbWUgaW52b2x2ZWQgaW4gZ3JlYXQgZGlzdHJlc3MgYW5kIHBlcmlsLiBGb3Igbm8gZm9vZCB3YXMgdG8gYmUgZ290IGluIHRoZSBjb3VudHJ5IG9yIGltcG9ydGVkIGZyb20gb3V0c2lkZSwgYW5kIHRoZXkgY291bGQgb25seSBidXRjaGVyIHRoZWlyIGJlYXN0cyBvZiBidXJkZW4sIHNvIHRoYXQgYW4gYXNzJ3MgaGVhZCB3YXMgc2NhcmNlbHkgdG8gYmUgYm91Z2h0IGZvciBzaXh0eSBkcmFjaG1hcy4gTW9yZW92ZXIsIHRoZSByb3lhbCBiYW5xdWV0cyB3ZXJlIGFiYW5kb25lZDsgYW5kIG9mIHRoZWlyIGhvcnNlcyBvbmx5IGEgZmV3IHdlcmUgbGVmdCwgdGhlIHJlc3QgaGF2aW5nIGJlZW4gY29uc3VtZWQgZm9yIGZvb2QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIHdhciB3aGljaCBQaGFybmFiYXp1cyBhbmQgSXBoaWNyYXRlcyBjb25kdWN0ZWQgZm9yIGhpbSBhZ2FpbnN0IEVneXB0IGhlIHdhcyB1bnN1Y2Nlc3NmdWwsIG93aW5nIHRvIHRoZSBkaXNzZW5zaW9ucyBvZiB0aGVzZSBjb21tYW5kZXJzOyBhZ2FpbnN0IHRoZSBDYWR1c2lhbnMsIHRoZXJlZm9yZSwgaGUgbWFkZSBhbiBleHBlZGl0aW9uIGluIHBlcnNvbiwgd2l0aCB0aHJlZSBodW5kcmVkIHRob3VzYW5kIGZvb3RtZW4gYW5kIHRlbiB0aG91c2FuZCBob3JzZS4gQnV0IHRoZSBjb3VudHJ5IHdoaWNoIGhlIHBlbmV0cmF0ZWQgd2FzIHJvdWdoIGFuZCBoYXJkIHRvIHRyYXZlcnNlLCBhYm91bmRlZCBpbiBtaXN0cywgYW5kIHByb2R1Y2VkIG5vIGdyYWlucywgYWx0aG91Z2ggaXRzIHBlYXJzIGFuZCBhcHBsZXMgYW5kIG90aGVyIHN1Y2ggdHJlZS1mcnVpdHMgc3VwcG9ydGVkIGEgd2FybGlrZSBhbmQgY291cmFnZW91cyBwb3B1bGF0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlVuYXdhcmVzLCB0aGVyZWZvcmUsIGhlIGJlY2FtZSBpbnZvbHZlZCBpbiBncmVhdCBkaXN0cmVzcyBhbmQgcGVyaWwuIEZvciBubyBmb29kIHdhcyB0byBiZSBnb3QgaW4gdGhlIGNvdW50cnkgb3IgaW1wb3J0ZWQgZnJvbSBvdXRzaWRlLCBhbmQgdGhleSBjb3VsZCBvbmx5IGJ1dGNoZXIgdGhlaXIgYmVhc3RzIG9mIGJ1cmRlbiwgc28gdGhhdCBhbiBhc3MncyBoZWFkIHdhcyBzY2FyY2VseSB0byBiZSBib3VnaHQgZm9yIHNpeHR5IGRyYWNobWFzLiBNb3Jlb3ZlciwgdGhlIHJveWFsIGJhbnF1ZXRzIHdlcmUgYWJhbmRvbmVkOyBhbmQgb2YgdGhlaXIgaG9yc2VzIG9ubHkgYSBmZXcgd2VyZSBsZWZ0LCB0aGUgcmVzdCBoYXZpbmcgYmVlbiBjb25zdW1lZCBmb3IgZm9vZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5IZXJlIGl0IHdhcyB0aGF0IFRlcmliYXp1cywgYSBtYW4gd2hvc2UgYnJhdmVyeSBvZnRlbiBzZXQgaGltIGluIGEgbGVhZGluZyBwbGFjZSwgYnV0IHdob3NlIGxldml0eSBhcyBvZnRlbiBjYXN0IGhpbSBkb3duLCBzbyB0aGF0IGF0IHRoaXMgdGltZSBoZSB3YXMgaW4gZGlzZ3JhY2UgYW5kIG92ZXJsb29rZWQsIHNhdmVkIHRoZSBraW5nIGFuZCBoaXMgYXJteS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIENhZHVzaWFucyBoYWQgdHdvIGtpbmdzLCBhbmQgZWFjaCBvZiB0aGVtIGVuY2FtcGVkIHNlcGFyYXRlbHkuIFNvIFRlcmliYXp1cywgYWZ0ZXIgYW4gaW50ZXJ2aWV3IHdpdGggQXJ0YXhlcnhlcyBpbiB3aGljaCBoZSB0b2xkIGhpbSB3aGF0IGhlIHB1cnBvc2VkIHRvIGRvLCB3ZW50IGhpbXNlbGYgdG8gb25lIG9mIHRoZSBDYWR1c2lhbiBraW5ncywgYW5kIHNlbnQgaGlzIHNvbiBzZWNyZXRseSB0byB0aGUgb3RoZXIuIEVhY2ggZW52b3ksIHRoZW4sIGRlY2VpdmVkIGhpcyBtYW4sIHRlbGxpbmcgaGltIHRoYXQgdGhlIG90aGVyIGtpbmcgd2FzIHNlbmRpbmcgYW4gZW1iYXNzeSB0byBBcnRheGVyeGVzIHRvIHNlY3VyZSBmcmllbmRzaGlwIGFuZCBhbGxpYW5jZSBmb3IgaGltc2VsZiBhbG9uZTogaGUgc2hvdWxkLCB0aGVyZWZvcmUsIGlmIGhlIHdlcmUgd2lzZSwgaGF2ZSBhbiBpbnRlcnZpZXcgd2l0aCBBcnRheGVyeGVzIGJlZm9yZSB0aGUgb3RoZXIgZGlkLCBhbmQgaGUgaGltc2VsZiB3b3VsZCBoZWxwIGhpbSBhbGwgaGUgY291bGQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJvdGgga2luZ3Mgd2VyZSBwZXJzdWFkZWQgYnkgdGhpcyBhcmd1bWVudCwgYW5kIGVhY2ggdGhpbmtpbmcgdGhhdCBoZSB3YXMgYW50aWNpcGF0aW5nIHRoZSBvdGhlciwgb25lIHNlbnQgaGlzIGVudm95cyBhbG9uZyB3aXRoIFRlcmliYXp1cywgYW5kIHRoZSBvdGhlciB3aXRoIHRoZSBzb24gb2YgVGVyaWJhenVzLiBCdXQgbWF0dGVycyB3ZXJlIGRlbGF5ZWQsIGFuZCBzdXNwaWNpb25zIGFuZCBjYWx1bW5pZXMgYWdhaW5zdCBUZXJpYmF6dXMgY2FtZSB0byB0aGUgZWFycyBvZiBBcnRheGVyeGVzOyBoZSBoaW1zZWxmIGFsc28gd2FzIGlsbCBhdCBlYXNlLCBhbmQgcmVwZW50ZWQgaGltIG9mIGhhdmluZyBwdXQgY29uZmlkZW5jZSBpbiBUZXJpYmF6dXMsIGFuZCBnYXZlIG9jY2FzaW9uIHRvIGhpcyByaXZhbHMgdG8gbWFsaWduIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGF0IGxhc3QgVGVyaWJhenVzIGNhbWUsIGFuZCBoaXMgc29uIGNhbWUgdG9vLCBib3RoIGJyaW5naW5nIHRoZWlyIENhZHVzaWFuIGVudm95cywgYW5kIGEgcGVhY2Ugd2FzIHJhdGlmaWVkIHdpdGggYm90aCBraW5nczsgd2hlcmV1cG9uIFRlcmliYXp1cywgbm93IGEgZ3JlYXQgYW5kIHNwbGVuZGlkIHBlcnNvbmFnZSwgc2V0IG91dCBmb3IgaG9tZSB3aXRoIHRoZSBraW5nLiBBbmQgdGhlIGtpbmcgbm93IG1hZGUgaXQgcGxhaW4gdGhhdCBjb3dhcmRpY2UgYW5kIGVmZmVtaW5hY3kgYXJlIG5vdCBhbHdheXMgZHVlIHRvIGx1eHVyeSBhbmQgZXh0cmF2YWdhbmNlLCBhcyBtb3N0IHBlb3BsZSBzdXBwb3NlLCBidXQgdG8gYSBiYXNlIGFuZCBpZ25vYmxlIG5hdHVyZSB1bmRlciB0aGUgc3dheSBvZiBldmlsIGRvY3RyaW5lcy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG5laXRoZXIgZ29sZCBub3Igcm9iZSBvZiBzdGF0ZSBub3IgdGhlIHR3ZWx2ZSB0aG91c2FuZCB0YWxlbnRzJyB3b3J0aCBvZiBhZG9ybm1lbnQgd2hpY2ggYWx3YXlzIGVudmVsb3BlZCB0aGUgcGVyc29uIG9mIHRoZSBraW5nIHByZXZlbnRlZCBoaW0gZnJvbSB1bmRlcmdvaW5nIHRvaWxzIGFuZCBoYXJkc2hpcHMgbGlrZSBhbiBvcmRpbmFyeSBzb2xkaWVyOyBuYXksIHdpdGggaGlzIHF1aXZlciBnaXJ0IHVwb24gaGltIGFuZCBoaXMgc2hpZWxkIG9uIGhpcyBhcm0gaGUgbWFyY2hlZCBpbiBwZXJzb24gYXQgdGhlIGhlYWQgb2YgaGlzIHRyb29wcywgb3ZlciBwcmVjaXBpdG91cyBtb3VudGFpbiByb2FkcywgYWJhbmRvbmluZyBoaXMgaG9yc2UsIHNvIHRoYXQgdGhlIHJlc3Qgb2YgdGhlIGFybXkgaGFkIHdpbmdzIGdpdmVuIHRoZW0gYW5kIGZlbHQgdGhlaXIgYnVyZGVucyBsaWdodGVuZWQgd2hlbiB0aGV5IHNhdyBoaXMgYXJkb3VyIGFuZCB2aWdvdXI7IGZvciBoZSBtYWRlIGRhaWx5IG1hcmNoZXMgb2YgdHdvIGh1bmRyZWQgZnVybG9uZ3MgYW5kIG1vcmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgQ2FkdXNpYW5zIGhhZCB0d28ga2luZ3MsIGFuZCBlYWNoIG9mIHRoZW0gZW5jYW1wZWQgc2VwYXJhdGVseS4gU28gVGVyaWJhenVzLCBhZnRlciBhbiBpbnRlcnZpZXcgd2l0aCBBcnRheGVyeGVzIGluIHdoaWNoIGhlIHRvbGQgaGltIHdoYXQgaGUgcHVycG9zZWQgdG8gZG8sIHdlbnQgaGltc2VsZiB0byBvbmUgb2YgdGhlIENhZHVzaWFuIGtpbmdzLCBhbmQgc2VudCBoaXMgc29uIHNlY3JldGx5IHRvIHRoZSBvdGhlci4gRWFjaCBlbnZveSwgdGhlbiwgZGVjZWl2ZWQgaGlzIG1hbiwgdGVsbGluZyBoaW0gdGhhdCB0aGUgb3RoZXIga2luZyB3YXMgc2VuZGluZyBhbiBlbWJhc3N5IHRvIEFydGF4ZXJ4ZXMgdG8gc2VjdXJlIGZyaWVuZHNoaXAgYW5kIGFsbGlhbmNlIGZvciBoaW1zZWxmIGFsb25lOiBoZSBzaG91bGQsIHRoZXJlZm9yZSwgaWYgaGUgd2VyZSB3aXNlLCBoYXZlIGFuIGludGVydmlldyB3aXRoIEFydGF4ZXJ4ZXMgYmVmb3JlIHRoZSBvdGhlciBkaWQsIGFuZCBoZSBoaW1zZWxmIHdvdWxkIGhlbHAgaGltIGFsbCBoZSBjb3VsZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJvdGgga2luZ3Mgd2VyZSBwZXJzdWFkZWQgYnkgdGhpcyBhcmd1bWVudCwgYW5kIGVhY2ggdGhpbmtpbmcgdGhhdCBoZSB3YXMgYW50aWNpcGF0aW5nIHRoZSBvdGhlciwgb25lIHNlbnQgaGlzIGVudm95cyBhbG9uZyB3aXRoIFRlcmliYXp1cywgYW5kIHRoZSBvdGhlciB3aXRoIHRoZSBzb24gb2YgVGVyaWJhenVzLiBCdXQgbWF0dGVycyB3ZXJlIGRlbGF5ZWQsIGFuZCBzdXNwaWNpb25zIGFuZCBjYWx1bW5pZXMgYWdhaW5zdCBUZXJpYmF6dXMgY2FtZSB0byB0aGUgZWFycyBvZiBBcnRheGVyeGVzOyBoZSBoaW1zZWxmIGFsc28gd2FzIGlsbCBhdCBlYXNlLCBhbmQgcmVwZW50ZWQgaGltIG9mIGhhdmluZyBwdXQgY29uZmlkZW5jZSBpbiBUZXJpYmF6dXMsIGFuZCBnYXZlIG9jY2FzaW9uIHRvIGhpcyByaXZhbHMgdG8gbWFsaWduIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCBsYXN0IFRlcmliYXp1cyBjYW1lLCBhbmQgaGlzIHNvbiBjYW1lIHRvbywgYm90aCBicmluZ2luZyB0aGVpciBDYWR1c2lhbiBlbnZveXMsIGFuZCBhIHBlYWNlIHdhcyByYXRpZmllZCB3aXRoIGJvdGgga2luZ3M7IHdoZXJldXBvbiBUZXJpYmF6dXMsIG5vdyBhIGdyZWF0IGFuZCBzcGxlbmRpZCBwZXJzb25hZ2UsIHNldCBvdXQgZm9yIGhvbWUgd2l0aCB0aGUga2luZy4gQW5kIHRoZSBraW5nIG5vdyBtYWRlIGl0IHBsYWluIHRoYXQgY293YXJkaWNlIGFuZCBlZmZlbWluYWN5IGFyZSBub3QgYWx3YXlzIGR1ZSB0byBsdXh1cnkgYW5kIGV4dHJhdmFnYW5jZSwgYXMgbW9zdCBwZW9wbGUgc3VwcG9zZSwgYnV0IHRvIGEgYmFzZSBhbmQgaWdub2JsZSBuYXR1cmUgdW5kZXIgdGhlIHN3YXkgb2YgZXZpbCBkb2N0cmluZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBuZWl0aGVyIGdvbGQgbm9yIHJvYmUgb2Ygc3RhdGUgbm9yIHRoZSB0d2VsdmUgdGhvdXNhbmQgdGFsZW50cycgd29ydGggb2YgYWRvcm5tZW50IHdoaWNoIGFsd2F5cyBlbnZlbG9wZWQgdGhlIHBlcnNvbiBvZiB0aGUga2luZyBwcmV2ZW50ZWQgaGltIGZyb20gdW5kZXJnb2luZyB0b2lscyBhbmQgaGFyZHNoaXBzIGxpa2UgYW4gb3JkaW5hcnkgc29sZGllcjsgbmF5LCB3aXRoIGhpcyBxdWl2ZXIgZ2lydCB1cG9uIGhpbSBhbmQgaGlzIHNoaWVsZCBvbiBoaXMgYXJtIGhlIG1hcmNoZWQgaW4gcGVyc29uIGF0IHRoZSBoZWFkIG9mIGhpcyB0cm9vcHMsIG92ZXIgcHJlY2lwaXRvdXMgbW91bnRhaW4gcm9hZHMsIGFiYW5kb25pbmcgaGlzIGhvcnNlLCBzbyB0aGF0IHRoZSByZXN0IG9mIHRoZSBhcm15IGhhZCB3aW5ncyBnaXZlbiB0aGVtIGFuZCBmZWx0IHRoZWlyIGJ1cmRlbnMgbGlnaHRlbmVkIHdoZW4gdGhleSBzYXcgaGlzIGFyZG91ciBhbmQgdmlnb3VyOyBmb3IgaGUgbWFkZSBkYWlseSBtYXJjaGVzIG9mIHR3byBodW5kcmVkIGZ1cmxvbmdzIGFuZCBtb3JlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBsZW5ndGggaGUgY2FtZSBkb3duIHRvIGEgcm95YWwgaGFsdGluZy1wbGFjZSB3aGljaCBoYWQgYWRtaXJhYmxlIHBhcmtzIGluIGVsYWJvcmF0ZSBjdWx0aXZhdGlvbiwgYWx0aG91Z2ggdGhlIHJlZ2lvbiByb3VuZCBhYm91dCB3YXMgYmFyZSBhbmQgdHJlZWxlc3M7IGFuZCBzaW5jZSBpdCB3YXMgY29sZCwgaGUgZ2F2ZSBwZXJtaXNzaW9uIHRvIGhpcyBzb2xkaWVycyB0byBjdXQgdGhlIHRyZWVzIG9mIHRoZSBwYXJrIGZvciB3b29kLCBzcGFyaW5nIG5laXRoZXIgcGluZSBub3IgY3lwcmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gdGhleSBoZXNpdGF0ZWQgYW5kIHdlcmUgaW5jbGluZWQgdG8gc3BhcmUgdGhlIHRyZWVzIG9uIGFjY291bnQgb2YgdGhlaXIgZ3JlYXQgc2l6ZSBhbmQgYmVhdXR5LCBoZSB0b29rIGFuIGF4ZSBoaW1zZWxmIGFuZCBjdXQgZG93biB0aGUgbGFyZ2VzdCBhbmQgbW9zdCBiZWF1dGlmdWwgdHJlZS4gQWZ0ZXIgdGhpcyB0aGUgbWVuIHByb3ZpZGVkIHRoZW1zZWx2ZXMgd2l0aCB3b29kLCBhbmQgbWFraW5nIG1hbnkgZmlyZXMsIHBhc3NlZCB0aGUgbmlnaHQgaW4gY29tZm9ydC4gTmV2ZXJ0aGVsZXNzLCBoZSBsb3N0IG1hbnkgYW5kIGJyYXZlIG1lbiwgYW5kIGFsbW9zdCBhbGwgaGlzIGhvcnNlcyBiZWZvcmUgaGUgcmVhY2hlZCBob21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93LCB0aGlua2luZyB0aGF0IGhpcyBzdWJqZWN0cyBkZXNwaXNlZCBoaW0gYmVjYXVzZSBvZiB0aGUgZGlzYXN0cm91cyBmYWlsdXJlIG9mIGhpcyBleHBlZGl0aW9uLCBoZSB3YXMgc3VzcGljaW91cyBvZiBoaXMgY2hpZWYgbWVuOyBtYW55IG9mIHRoZXNlIGhlIHB1dCB0byBkZWF0aCBpbiBhbmdlciwgYW5kIG1vcmUgb3V0IG9mIGZlYXIuIEZvciBpdCBpcyBjb3dhcmRseSBmZWFyIGluIGEgdHlyYW50IHRoYXQgbGVhZHMgdG8gbW9zdCBibG9vZHNoZWQ7IGJ1dCBib2xkIGNvbmZpZGVuY2UgbWFrZXMgaGltIGdyYWNpb3VzIGFuZCBtaWxkIGFuZCB1bnN1c3BpY2lvdXMuIFNvIGFsc28gYW1vbmcgd2lsZCBiZWFzdHMsIHRob3NlIHRoYXQgYXJlIHJlZnJhY3RvcnkgYW5kIGhhcmRlc3QgdG8gdGFtZSBhcmUgdGltb3JvdXMgYW5kIGZlYXJmdWwsIHdoZXJlYXMgdGhlIG5vYmxlciBzb3J0cyBhcmUgbGVkIGJ5IHRoZWlyIGNvdXJhZ2UgdG8gcHV0IG1vcmUgY29uZmlkZW5jZSBpbiBtZW4sIGFuZCBkbyBub3QgcmVqZWN0IGZyaWVuZGx5IGFkdmFuY2VzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgbGVuZ3RoIGhlIGNhbWUgZG93biB0byBhIHJveWFsIGhhbHRpbmctcGxhY2Ugd2hpY2ggaGFkIGFkbWlyYWJsZSBwYXJrcyBpbiBlbGFib3JhdGUgY3VsdGl2YXRpb24sIGFsdGhvdWdoIHRoZSByZWdpb24gcm91bmQgYWJvdXQgd2FzIGJhcmUgYW5kIHRyZWVsZXNzOyBhbmQgc2luY2UgaXQgd2FzIGNvbGQsIGhlIGdhdmUgcGVybWlzc2lvbiB0byBoaXMgc29sZGllcnMgdG8gY3V0IHRoZSB0cmVlcyBvZiB0aGUgcGFyayBmb3Igd29vZCwgc3BhcmluZyBuZWl0aGVyIHBpbmUgbm9yIGN5cHJlc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZXkgaGVzaXRhdGVkIGFuZCB3ZXJlIGluY2xpbmVkIHRvIHNwYXJlIHRoZSB0cmVlcyBvbiBhY2NvdW50IG9mIHRoZWlyIGdyZWF0IHNpemUgYW5kIGJlYXV0eSwgaGUgdG9vayBhbiBheGUgaGltc2VsZiBhbmQgY3V0IGRvd24gdGhlIGxhcmdlc3QgYW5kIG1vc3QgYmVhdXRpZnVsIHRyZWUuIEFmdGVyIHRoaXMgdGhlIG1lbiBwcm92aWRlZCB0aGVtc2VsdmVzIHdpdGggd29vZCwgYW5kIG1ha2luZyBtYW55IGZpcmVzLCBwYXNzZWQgdGhlIG5pZ2h0IGluIGNvbWZvcnQuIE5ldmVydGhlbGVzcywgaGUgbG9zdCBtYW55IGFuZCBicmF2ZSBtZW4sIGFuZCBhbG1vc3QgYWxsIGhpcyBob3JzZXMgYmVmb3JlIGhlIHJlYWNoZWQgaG9tZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIHRoaW5raW5nIHRoYXQgaGlzIHN1YmplY3RzIGRlc3Bpc2VkIGhpbSBiZWNhdXNlIG9mIHRoZSBkaXNhc3Ryb3VzIGZhaWx1cmUgb2YgaGlzIGV4cGVkaXRpb24sIGhlIHdhcyBzdXNwaWNpb3VzIG9mIGhpcyBjaGllZiBtZW47IG1hbnkgb2YgdGhlc2UgaGUgcHV0IHRvIGRlYXRoIGluIGFuZ2VyLCBhbmQgbW9yZSBvdXQgb2YgZmVhci4gRm9yIGl0IGlzIGNvd2FyZGx5IGZlYXIgaW4gYSB0eXJhbnQgdGhhdCBsZWFkcyB0byBtb3N0IGJsb29kc2hlZDsgYnV0IGJvbGQgY29uZmlkZW5jZSBtYWtlcyBoaW0gZ3JhY2lvdXMgYW5kIG1pbGQgYW5kIHVuc3VzcGljaW91cy4gU28gYWxzbyBhbW9uZyB3aWxkIGJlYXN0cywgdGhvc2UgdGhhdCBhcmUgcmVmcmFjdG9yeSBhbmQgaGFyZGVzdCB0byB0YW1lIGFyZSB0aW1vcm91cyBhbmQgZmVhcmZ1bCwgd2hlcmVhcyB0aGUgbm9ibGVyIHNvcnRzIGFyZSBsZWQgYnkgdGhlaXIgY291cmFnZSB0byBwdXQgbW9yZSBjb25maWRlbmNlIGluIG1lbiwgYW5kIGRvIG5vdCByZWplY3QgZnJpZW5kbHkgYWR2YW5jZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBcnRheGVyeGVzLCBiZWluZyBub3cgYWR2YW5jZWQgaW4geWVhcnMsIHBlcmNlaXZlZCB0aGF0IGhpcyBzb25zIHdlcmUgZm9ybWluZyByaXZhbCBwYXJ0aWVzIGFtb25nIGhpcyBmcmllbmRzIGFuZCBjaGllZiBtZW4gd2l0aCByZWZlcmVuY2UgdG8gdGhlIHJveWFsIHN1Y2Nlc3Npb24uIEZvciB0aGUgY29uc2VydmF0aXZlcyB0aG91Z2h0IGl0IHJpZ2h0IHRoYXQsIGFzIGhlIGhpbXNlbGYgaGFkIHJlY2VpdmVkIHRoZSByb3lhbCBwb3dlciBieSB2aXJ0dWUgb2Ygc2VuaW9yaXR5LCBpbiBsaWtlIG1hbm5lciBoZSBzaG91bGQgbGVhdmUgaXQgdG8gRGFyZWl1cy4gQnV0IGhpcyB5b3VuZ2VzdCBzb24sIE9jaHVzLCB3aG8gd2FzIG9mIGFuIGltcGV0dW91cyBhbmQgdmlvbGVudCBkaXNwb3NpdGlvbiwgbm90IG9ubHkgaGFkIG1hbnkgYWRoZXJlbnRzIGFtb25nIHRoZSBjb3VydGllcnMsIGJ1dCBob3BlZCBmb3IgbW9zdCBzdWNjZXNzIGluIHdpbm5pbmcgb3ZlciBoaXMgZmF0aGVyIHRocm91Z2ggdGhlIGFpZCBvZiBBdG9zc2EuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBzb3VnaHQgdG8gZ2FpbiBBdG9zc2EncyBmYXZvdXIgYnkgcHJvbWlzaW5nIHRoYXQgc2hlIHNob3VsZCBiZSBoaXMgd2lmZSBhbmQgc2hhcmUgdGhlIHRocm9uZSB3aXRoIGhpbSBhZnRlciB0aGUgZGVhdGggb2YgaGlzIGZhdGhlci4gQW5kIHRoZXJlIHdhcyBhIHJlcG9ydCB0aGF0IGV2ZW4gd2hpbGUgaGlzIGZhdGhlciB3YXMgYWxpdmUgT2NodXMgaGFkIHNlY3JldCByZWxhdGlvbnMgd2l0aCBBdG9zc2EuIEJ1dCBBcnRheGVyeGVzIHdhcyBpZ25vcmFudCBvZiB0aGlzOyBhbmQgd2lzaGluZyB0byBzaGF0dGVyIGF0IG9uY2UgdGhlIGhvcGVzIG9mIE9jaHVzLCB0aGF0IGhlIG1pZ2h0IG5vdCB2ZW50dXJlIHVwb24gdGhlIHNhbWUgY291cnNlIGFzIEN5cnVzIGFuZCBzbyBpbnZvbHZlIHRoZSBraW5nZG9tIGFuZXcgaW4gd2FycyBhbmQgY29udGVzdHMsIGhlIHByb2NsYWltZWQgRGFyZWl1cywgdGhlbiBmaWZ0eSB5ZWFycyBvZiBhZ2UsIGhpcyBzdWNjZXNzb3IgdG8gdGhlIHRocm9uZSwgYW5kIGdhdmUgaGltIHBlcm1pc3Npb24gdG8gd2VhciB0aGUgdXByaWdodCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmtpdGFuaXMsPC9xPiBhcyB0aGUgdGlhcmEgd2FzIGNhbGxlZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGVyZSB3YXMgYSBjdXN0b20gYW1vbmcgdGhlIFBlcnNpYW5zIHRoYXQgdGhlIG9uZSBhcHBvaW50ZWQgdG8gdGhlIHJveWFsIHN1Y2Nlc3Npb24gc2hvdWxkIGFzayBhIGJvb24sIGFuZCB0aGF0IHRoZSBvbmUgd2hvIGFwcG9pbnRlZCBoaW0gc2hvdWxkIGdpdmUgd2hhdGV2ZXIgd2FzIGFza2VkLCBpZiBpdCB3YXMgd2l0aGluIGhpcyBwb3dlci4gQWNjb3JkaW5nbHksIERhcmVpdXMgYXNrZWQgZm9yIEFzcGFzaWEsIHdobyBoYWQgYmVlbiB0aGUgc3BlY2lhbCBmYXZvdXJpdGUgb2YgQ3lydXMsIGFuZCB3YXMgdGhlbiBhIGNvbmN1YmluZSBvZiB0aGUga2luZy4gU2hlIHdhcyBhIG5hdGl2ZSBvZiBQaG9jYWVhLCBpbiBJb25pYSwgYm9ybiBvZiBmcmVlIHBhcmVudHMsIGFuZCBmaXR0aW5nbHkgZWR1Y2F0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uY2Ugd2hlbiBDeXJ1cyB3YXMgYXQgc3VwcGVyIHNoZSB3YXMgbGVkIGluIHRvIGhpbSBhbG9uZyB3aXRoIG90aGVyIHdvbWVuLiBUaGUgcmVzdCBvZiB0aGUgd29tZW4gdG9vayB0aGUgc2VhdHMgZ2l2ZW4gdGhlbSwgYW5kIHdoZW4gQ3lydXMgcHJvY2VlZGVkIHRvIHNwb3J0IGFuZCBkYWxseSBhbmQgamVzdCB3aXRoIHRoZW0sIHNob3dlZCBubyBkaXNwbGVhc3VyZSBhdCBoaXMgZnJpZW5kbHkgYWR2YW5jZXMuIEJ1dCBBc3Bhc2lhIHN0b29kIGJ5IGhlciBjb3VjaCBpbiBzaWxlbmNlLCBhbmQgd291bGQgbm90IG9iZXkgd2hlbiBDeXJ1cyBjYWxsZWQgaGVyOyBhbmQgd2hlbiBoaXMgY2hhbWJlcmxhaW5zIHdvdWxkIGhhdmUgbGVkIGhlciB0byBoaW0sIHNoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlZlcmlseSwgd2hvc29ldmVyIGxheXMgaGlzIGhhbmRzIHVwb24gbWUgc2hhbGwgcnVlIHRoZSBkYXkuPC9xPiBUaGUgZ3Vlc3RzIHRoZXJlZm9yZSB0aG91Z2h0IGhlciBhIGdyYWNlbGVzcyBhbmQgcnVkZSBjcmVhdHVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEN5cnVzIHdhcyBkZWxpZ2h0ZWQsIGFuZCBsYXVnaGVkLCBhbmQgc2FpZCB0byB0aGUgbWFuIHdobyBoYWQgYnJvdWdodCB0aGUgd29tZW46IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9zdCB0aG91IG5vdCBzZWUgYXQgb25jZSB0aGF0IHRoaXMgaXMgdGhlIG9ubHkgZnJlZSBhbmQgdW5wZXJ2ZXJ0ZWQgd29tYW4gdGhvdSBoYXN0IGJyb3VnaHQgbWU/PC9xPiBGcm9tIHRoaXMgdGltZSBvbiBoZSB3YXMgZGV2b3RlZCB0byBoZXIsIGFuZCBsb3ZlZCBoZXIgYWJvdmUgYWxsIHdvbWVuLCBhbmQgY2FsbGVkIGhlciBUaGUgV2lzZS4gU2hlIHdhcyB0YWtlbiBwcmlzb25lciB3aGVuIEN5cnVzIGZlbGwgaW4gdGhlIGJhdHRsZSBhdCBDdW5heGEgYW5kIGhpcyBjYW1wIHdhcyBwbHVuZGVyZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEFuYWIuIDEuMTAuMiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGkuIDEwLiAyPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlci4gMjQuNyIgdmFsaWQ9InllcyI+UGx1dGFyY2gsIDx0aXRsZT5QZXJpY2xlczwvdGl0bGU+LCB4eGl2LiA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFydGF4ZXJ4ZXMsIGJlaW5nIG5vdyBhZHZhbmNlZCBpbiB5ZWFycywgcGVyY2VpdmVkIHRoYXQgaGlzIHNvbnMgd2VyZSBmb3JtaW5nIHJpdmFsIHBhcnRpZXMgYW1vbmcgaGlzIGZyaWVuZHMgYW5kIGNoaWVmIG1lbiB3aXRoIHJlZmVyZW5jZSB0byB0aGUgcm95YWwgc3VjY2Vzc2lvbi4gRm9yIHRoZSBjb25zZXJ2YXRpdmVzIHRob3VnaHQgaXQgcmlnaHQgdGhhdCwgYXMgaGUgaGltc2VsZiBoYWQgcmVjZWl2ZWQgdGhlIHJveWFsIHBvd2VyIGJ5IHZpcnR1ZSBvZiBzZW5pb3JpdHksIGluIGxpa2UgbWFubmVyIGhlIHNob3VsZCBsZWF2ZSBpdCB0byBEYXJlaXVzLiBCdXQgaGlzIHlvdW5nZXN0IHNvbiwgT2NodXMsIHdobyB3YXMgb2YgYW4gaW1wZXR1b3VzIGFuZCB2aW9sZW50IGRpc3Bvc2l0aW9uLCBub3Qgb25seSBoYWQgbWFueSBhZGhlcmVudHMgYW1vbmcgdGhlIGNvdXJ0aWVycywgYnV0IGhvcGVkIGZvciBtb3N0IHN1Y2Nlc3MgaW4gd2lubmluZyBvdmVyIGhpcyBmYXRoZXIgdGhyb3VnaCB0aGUgYWlkIG9mIEF0b3NzYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBzb3VnaHQgdG8gZ2FpbiBBdG9zc2EncyBmYXZvdXIgYnkgcHJvbWlzaW5nIHRoYXQgc2hlIHNob3VsZCBiZSBoaXMgd2lmZSBhbmQgc2hhcmUgdGhlIHRocm9uZSB3aXRoIGhpbSBhZnRlciB0aGUgZGVhdGggb2YgaGlzIGZhdGhlci4gQW5kIHRoZXJlIHdhcyBhIHJlcG9ydCB0aGF0IGV2ZW4gd2hpbGUgaGlzIGZhdGhlciB3YXMgYWxpdmUgT2NodXMgaGFkIHNlY3JldCByZWxhdGlvbnMgd2l0aCBBdG9zc2EuIEJ1dCBBcnRheGVyeGVzIHdhcyBpZ25vcmFudCBvZiB0aGlzOyBhbmQgd2lzaGluZyB0byBzaGF0dGVyIGF0IG9uY2UgdGhlIGhvcGVzIG9mIE9jaHVzLCB0aGF0IGhlIG1pZ2h0IG5vdCB2ZW50dXJlIHVwb24gdGhlIHNhbWUgY291cnNlIGFzIEN5cnVzIGFuZCBzbyBpbnZvbHZlIHRoZSBraW5nZG9tIGFuZXcgaW4gd2FycyBhbmQgY29udGVzdHMsIGhlIHByb2NsYWltZWQgRGFyZWl1cywgdGhlbiBmaWZ0eSB5ZWFycyBvZiBhZ2UsIGhpcyBzdWNjZXNzb3IgdG8gdGhlIHRocm9uZSwgYW5kIGdhdmUgaGltIHBlcm1pc3Npb24gdG8gd2VhciB0aGUgdXByaWdodCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+a2l0YW5pcyw8L3E+IGFzIHRoZSB0aWFyYSB3YXMgY2FsbGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2FzIGEgY3VzdG9tIGFtb25nIHRoZSBQZXJzaWFucyB0aGF0IHRoZSBvbmUgYXBwb2ludGVkIHRvIHRoZSByb3lhbCBzdWNjZXNzaW9uIHNob3VsZCBhc2sgYSBib29uLCBhbmQgdGhhdCB0aGUgb25lIHdobyBhcHBvaW50ZWQgaGltIHNob3VsZCBnaXZlIHdoYXRldmVyIHdhcyBhc2tlZCwgaWYgaXQgd2FzIHdpdGhpbiBoaXMgcG93ZXIuIEFjY29yZGluZ2x5LCBEYXJlaXVzIGFza2VkIGZvciBBc3Bhc2lhLCB3aG8gaGFkIGJlZW4gdGhlIHNwZWNpYWwgZmF2b3VyaXRlIG9mIEN5cnVzLCBhbmQgd2FzIHRoZW4gYSBjb25jdWJpbmUgb2YgdGhlIGtpbmcuIFNoZSB3YXMgYSBuYXRpdmUgb2YgUGhvY2FlYSwgaW4gSW9uaWEsIGJvcm4gb2YgZnJlZSBwYXJlbnRzLCBhbmQgZml0dGluZ2x5IGVkdWNhdGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uY2Ugd2hlbiBDeXJ1cyB3YXMgYXQgc3VwcGVyIHNoZSB3YXMgbGVkIGluIHRvIGhpbSBhbG9uZyB3aXRoIG90aGVyIHdvbWVuLiBUaGUgcmVzdCBvZiB0aGUgd29tZW4gdG9vayB0aGUgc2VhdHMgZ2l2ZW4gdGhlbSwgYW5kIHdoZW4gQ3lydXMgcHJvY2VlZGVkIHRvIHNwb3J0IGFuZCBkYWxseSBhbmQgamVzdCB3aXRoIHRoZW0sIHNob3dlZCBubyBkaXNwbGVhc3VyZSBhdCBoaXMgZnJpZW5kbHkgYWR2YW5jZXMuIEJ1dCBBc3Bhc2lhIHN0b29kIGJ5IGhlciBjb3VjaCBpbiBzaWxlbmNlLCBhbmQgd291bGQgbm90IG9iZXkgd2hlbiBDeXJ1cyBjYWxsZWQgaGVyOyBhbmQgd2hlbiBoaXMgY2hhbWJlcmxhaW5zIHdvdWxkIGhhdmUgbGVkIGhlciB0byBoaW0sIHNoZSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VmVyaWx5LCB3aG9zb2V2ZXIgbGF5cyBoaXMgaGFuZHMgdXBvbiBtZSBzaGFsbCBydWUgdGhlIGRheS48L3E+IFRoZSBndWVzdHMgdGhlcmVmb3JlIHRob3VnaHQgaGVyIGEgZ3JhY2VsZXNzIGFuZCBydWRlIGNyZWF0dXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDeXJ1cyB3YXMgZGVsaWdodGVkLCBhbmQgbGF1Z2hlZCwgYW5kIHNhaWQgdG8gdGhlIG1hbiB3aG8gaGFkIGJyb3VnaHQgdGhlIHdvbWVuOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9zdCB0aG91IG5vdCBzZWUgYXQgb25jZSB0aGF0IHRoaXMgaXMgdGhlIG9ubHkgZnJlZSBhbmQgdW5wZXJ2ZXJ0ZWQgd29tYW4gdGhvdSBoYXN0IGJyb3VnaHQgbWU/PC9xPiBGcm9tIHRoaXMgdGltZSBvbiBoZSB3YXMgZGV2b3RlZCB0byBoZXIsIGFuZCBsb3ZlZCBoZXIgYWJvdmUgYWxsIHdvbWVuLCBhbmQgY2FsbGVkIGhlciBUaGUgV2lzZS4gU2hlIHdhcyB0YWtlbiBwcmlzb25lciB3aGVuIEN5cnVzIGZlbGwgaW4gdGhlIGJhdHRsZSBhdCBDdW5heGEgYW5kIGhpcyBjYW1wIHdhcyBwbHVuZGVyZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAxLjEwLjIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDEwLiAyPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVyLiAyNC43IiB2YWxpZD0ieWVzIj5QbHV0YXJjaCwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVyaWNsZXM8L3RpdGxlPiwgeHhpdi4gNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiAxLjEwLjIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGkuIDEwLiAyPC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpLiAxMC4gMjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlci4gMjQuNyIgdmFsaWQ9InllcyI+UGx1dGFyY2gsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBlcmljbGVzPC90aXRsZT4sIHh4aXYuIDcuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QZXJpY2xlczwvdGl0bGU+LCB4eGl2LiA3LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSB3b21hbiBmb3Igd2hvbSBEYXJlaXVzIGFza2VkLCBhbmQgaGUgZ2F2ZSBvZmZlbmNlIHRoZXJlYnkgdG8gaGlzIGZhdGhlcjsgZm9yIHRoZSBCYXJiYXJpYW4gZm9sayBhcmUgdGVycmlibHkgamVhbG91cyBpbiBhbGwgdGhhdCBwZXJ0YWlucyB0byB0aGUgcGxlYXN1cmVzIG9mIGxvdmUsIHNvIHRoYXQgaXQgaXMgZGVhdGggZm9yIGEgbWFuLCBub3Qgb25seSB0byBjb21lIHVwIGFuZCB0b3VjaCBvbmUgb2YgdGhlIHJveWFsIGNvbmN1YmluZXMsIGJ1dCBldmVuIGluIGpvdXJuZXlpbmcgdG8gZ28gYWxvbmcgcGFzdCB0aGUgd2FnZ29ucyBvbiB3aGljaCB0aGV5IGFyZSBjb252ZXllZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCB0aGVyZSB3YXMgQXRvc3NhLCB3aG9tIHRoZSBraW5nIHBhc3Npb25hdGVseSBsb3ZlZCBhbmQgaGFkIG1hZGUgaGlzIHdpZmUgY29udHJhcnkgdG8gdGhlIGxhdywgYW5kIGhlIGtlcHQgdGhyZWUgaHVuZHJlZCBhbmQgc2l4dHkgY29uY3ViaW5lcyBhbHNvLCB3aG8gd2VyZSBvZiBzdXJwYXNzaW5nIGJlYXV0eS4gSG93ZXZlciwgc2luY2UgaGUgaGFkIGJlZW4gYXNrZWQgZm9yIEFzcGFzaWEsIGhlIHNhaWQgdGhhdCBzaGUgd2FzIGEgZnJlZSB3b21hbiwgYW5kIGJhZGUgaGlzIHNvbiB0YWtlIGhlciBpZiBzaGUgd2FzIHdpbGxpbmcsIGJ1dCBub3QgdG8gY29uc3RyYWluIGhlciBhZ2FpbnN0IGhlciB3aXNoZXMuIFNvIEFzcGFzaWEgd2FzIHN1bW1vbmVkLCBhbmQgY29udHJhcnkgdG8gdGhlIGhvcGVzIG9mIHRoZSBraW5nLCBjaG9zZSBEYXJlaXVzLiBBbmQgdGhlIGtpbmcgZ2F2ZSBoZXIgdG8gRGFyZWl1cyB1bmRlciBjb25zdHJhaW50IG9mIHRoZSBjdXN0b20gdGhhdCBwcmV2YWlsZWQsIGJ1dCBhIGxpdHRsZSB3aGlsZSBhZnRlciBoZSBoYWQgZ2l2ZW4gaGVyLCBoZSB0b29rIGhlciBhd2F5IGFnYWluLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IGlzLCBoZSBhcHBvaW50ZWQgaGVyIGEgcHJpZXN0ZXNzIG9mIHRoZSBBcnRlbWlzIG9mIEVjYmF0YW5hLCB3aG8gYmVhcnMgdGhlIG5hbWUgb2YgQW5hw690aXMsIGluIG9yZGVyIHRoYXQgc2hlIG1pZ2h0IHJlbWFpbiBjaGFzdGUgZm9yIHRoZSByZXN0IG9mIGhlciBsaWZlLCB0aGlua2luZyB0aGF0IGluIHRoaXMgd2F5IGhlIHdvdWxkIGluZmxpY3QgYSBwdW5pc2htZW50IHVwb24gaGlzIHNvbiB3aGljaCB3YXMgbm90IGdyaWV2b3VzLCBidXQgYWN0dWFsbHkgcXVpdGUgd2l0aGluIGJvdW5kcyBhbmQgdGluY3R1cmVkIHdpdGggcGxlYXNhbnRyeS4gVGhlIHJlc2VudG1lbnQgb2YgRGFyZWl1cywgaG93ZXZlciwga25ldyBubyBib3VuZHMsIGVpdGhlciBiZWNhdXNlIGhlIHdhcyBkZWVwbHkgc3RpcnJlZCBieSBoaXMgcGFzc2lvbiBmb3IgQXNwYXNpYSwgb3IgYmVjYXVzZSBoZSB0aG91Z2h0IHRoYXQgaGUgaGFkIGJlZW4gaW5zdWx0ZWQgYW5kIG1vY2tlZCBieSBoaXMgZmF0aGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgdGhlIHdvbWFuIGZvciB3aG9tIERhcmVpdXMgYXNrZWQsIGFuZCBoZSBnYXZlIG9mZmVuY2UgdGhlcmVieSB0byBoaXMgZmF0aGVyOyBmb3IgdGhlIEJhcmJhcmlhbiBmb2xrIGFyZSB0ZXJyaWJseSBqZWFsb3VzIGluIGFsbCB0aGF0IHBlcnRhaW5zIHRvIHRoZSBwbGVhc3VyZXMgb2YgbG92ZSwgc28gdGhhdCBpdCBpcyBkZWF0aCBmb3IgYSBtYW4sIG5vdCBvbmx5IHRvIGNvbWUgdXAgYW5kIHRvdWNoIG9uZSBvZiB0aGUgcm95YWwgY29uY3ViaW5lcywgYnV0IGV2ZW4gaW4gam91cm5leWluZyB0byBnbyBhbG9uZyBwYXN0IHRoZSB3YWdnb25zIG9uIHdoaWNoIHRoZXkgYXJlIGNvbnZleWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlcmUgd2FzIEF0b3NzYSwgd2hvbSB0aGUga2luZyBwYXNzaW9uYXRlbHkgbG92ZWQgYW5kIGhhZCBtYWRlIGhpcyB3aWZlIGNvbnRyYXJ5IHRvIHRoZSBsYXcsIGFuZCBoZSBrZXB0IHRocmVlIGh1bmRyZWQgYW5kIHNpeHR5IGNvbmN1YmluZXMgYWxzbywgd2hvIHdlcmUgb2Ygc3VycGFzc2luZyBiZWF1dHkuIEhvd2V2ZXIsIHNpbmNlIGhlIGhhZCBiZWVuIGFza2VkIGZvciBBc3Bhc2lhLCBoZSBzYWlkIHRoYXQgc2hlIHdhcyBhIGZyZWUgd29tYW4sIGFuZCBiYWRlIGhpcyBzb24gdGFrZSBoZXIgaWYgc2hlIHdhcyB3aWxsaW5nLCBidXQgbm90IHRvIGNvbnN0cmFpbiBoZXIgYWdhaW5zdCBoZXIgd2lzaGVzLiBTbyBBc3Bhc2lhIHdhcyBzdW1tb25lZCwgYW5kIGNvbnRyYXJ5IHRvIHRoZSBob3BlcyBvZiB0aGUga2luZywgY2hvc2UgRGFyZWl1cy4gQW5kIHRoZSBraW5nIGdhdmUgaGVyIHRvIERhcmVpdXMgdW5kZXIgY29uc3RyYWludCBvZiB0aGUgY3VzdG9tIHRoYXQgcHJldmFpbGVkLCBidXQgYSBsaXR0bGUgd2hpbGUgYWZ0ZXIgaGUgaGFkIGdpdmVuIGhlciwgaGUgdG9vayBoZXIgYXdheSBhZ2Fpbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgaXMsIGhlIGFwcG9pbnRlZCBoZXIgYSBwcmllc3Rlc3Mgb2YgdGhlIEFydGVtaXMgb2YgRWNiYXRhbmEsIHdobyBiZWFycyB0aGUgbmFtZSBvZiBBbmHDr3RpcywgaW4gb3JkZXIgdGhhdCBzaGUgbWlnaHQgcmVtYWluIGNoYXN0ZSBmb3IgdGhlIHJlc3Qgb2YgaGVyIGxpZmUsIHRoaW5raW5nIHRoYXQgaW4gdGhpcyB3YXkgaGUgd291bGQgaW5mbGljdCBhIHB1bmlzaG1lbnQgdXBvbiBoaXMgc29uIHdoaWNoIHdhcyBub3QgZ3JpZXZvdXMsIGJ1dCBhY3R1YWxseSBxdWl0ZSB3aXRoaW4gYm91bmRzIGFuZCB0aW5jdHVyZWQgd2l0aCBwbGVhc2FudHJ5LiBUaGUgcmVzZW50bWVudCBvZiBEYXJlaXVzLCBob3dldmVyLCBrbmV3IG5vIGJvdW5kcywgZWl0aGVyIGJlY2F1c2UgaGUgd2FzIGRlZXBseSBzdGlycmVkIGJ5IGhpcyBwYXNzaW9uIGZvciBBc3Bhc2lhLCBvciBiZWNhdXNlIGhlIHRob3VnaHQgdGhhdCBoZSBoYWQgYmVlbiBpbnN1bHRlZCBhbmQgbW9ja2VkIGJ5IGhpcyBmYXRoZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgVGVyaWJhenVzLCB3aG8gYmVjYW1lIGF3YXJlIG9mIHRoZSBwcmluY2UncyBmZWVsaW5ncywgc291Z2h0IHRvIGVtYml0dGVyIGhpbSBzdGlsbCBtb3JlLCBmaW5kaW5nIGluIGhpcyBncmlldmFuY2UgYSBjb3VudGVycGFydCBvZiBoaXMgb3duLCB3aGljaCB3YXMgYXMgZm9sbG93cy4gVGhlIGtpbmcgaGFkIHNldmVyYWwgZGF1Z2h0ZXJzLCBhbmQgcHJvbWlzZWQgdG8gZ2l2ZSBBcGFtYSBpbiBtYXJyaWFnZSB0byBQaGFybmFiYXp1cywgUmhvZG9ndW5lIHRvIE9yb250ZXMsIGFuZCBBbWVzdHJpcyB0byBUZXJpYmF6dXMuIEhlIGtlcHQgaGlzIHByb21pc2UgdG8gdGhlIG90aGVyIHR3bywgYnV0IGJyb2tlIGhpcyB3b3JkIHRvIFRlcmliYXp1cyBhbmQgbWFycmllZCBBbWVzdHJpcyBoaW1zZWxmLCBiZXRyb3RoaW5nIGluIGhlciBzdGVhZCB0byBUZXJpYmF6dXMgaGlzIHlvdW5nZXN0IGRhdWdodGVyLCBBdG9zc2EuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzb29uIGhlIGZlbGwgZW5hbW91cmVkIG9mIEF0b3NzYSBhbHNvIGFuZCBtYXJyaWVkIGhlciwgYXMgaGFzIGJlZW4gc2FpZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFydC4gMjMuMiIgdmFsaWQ9InllcyI+Q2hhcC4geHhpaWkuIDIgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB0aGVuIFRlcmliYXp1cyBiZWNhbWUgYSBkb3ducmlnaHQgZm9lIHRvIGhpbS4gVGVyaWJhenVzIHdhcyBhdCBubyB0aW1lIG9mIGEgc3RhYmxlIGRpc3Bvc2l0aW9uLCBidXQgdW5ldmVuIGFuZCBwcmVjaXBpdGF0ZS4gQW5kIHNvLCB3aGVuIGhlIHdvdWxkIGJlIGF0IG9uZSB0aW1lIGluIGhpZ2hlc3QgZmF2b3VyLCBhbmQgYXQgYW5vdGhlciB3b3VsZCBmaW5kIGhpbXNlbGYgaW4gZGlzZ3JhY2UgYW5kIHNwdXJuZWQgYXNpZGUsIGhlIGNvdWxkIG5vdCBiZWFyIGVpdGhlciBjaGFuZ2Ugb2YgZm9ydHVuZSB3aXRoIGVxdWFuaW1pdHksIGh1dCBpZiBoZSB3YXMgaGVsZCBpbiBob25vdXIgaGlzIHZhbml0eSBtYWRlIGhpbSBvZmZlbnNpdmUsIGFuZCB3aGVuIGhlIGZlbGwgZnJvbSBmYXZvdXIgaGUgd2FzIG5vdCBodW1ibGUgb3IgcXVpZXQsIGJ1dCBoYXJzaCBhbmQgZmVyb2Npb3VzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgVGVyaWJhenVzLCB3aG8gYmVjYW1lIGF3YXJlIG9mIHRoZSBwcmluY2UncyBmZWVsaW5ncywgc291Z2h0IHRvIGVtYml0dGVyIGhpbSBzdGlsbCBtb3JlLCBmaW5kaW5nIGluIGhpcyBncmlldmFuY2UgYSBjb3VudGVycGFydCBvZiBoaXMgb3duLCB3aGljaCB3YXMgYXMgZm9sbG93cy4gVGhlIGtpbmcgaGFkIHNldmVyYWwgZGF1Z2h0ZXJzLCBhbmQgcHJvbWlzZWQgdG8gZ2l2ZSBBcGFtYSBpbiBtYXJyaWFnZSB0byBQaGFybmFiYXp1cywgUmhvZG9ndW5lIHRvIE9yb250ZXMsIGFuZCBBbWVzdHJpcyB0byBUZXJpYmF6dXMuIEhlIGtlcHQgaGlzIHByb21pc2UgdG8gdGhlIG90aGVyIHR3bywgYnV0IGJyb2tlIGhpcyB3b3JkIHRvIFRlcmliYXp1cyBhbmQgbWFycmllZCBBbWVzdHJpcyBoaW1zZWxmLCBiZXRyb3RoaW5nIGluIGhlciBzdGVhZCB0byBUZXJpYmF6dXMgaGlzIHlvdW5nZXN0IGRhdWdodGVyLCBBdG9zc2EuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzb29uIGhlIGZlbGwgZW5hbW91cmVkIG9mIEF0b3NzYSBhbHNvIGFuZCBtYXJyaWVkIGhlciwgYXMgaGFzIGJlZW4gc2FpZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcnQuIDIzLjIiIHZhbGlkPSJ5ZXMiPkNoYXAuIHh4aWlpLiAyIGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgdGhlbiBUZXJpYmF6dXMgYmVjYW1lIGEgZG93bnJpZ2h0IGZvZSB0byBoaW0uIFRlcmliYXp1cyB3YXMgYXQgbm8gdGltZSBvZiBhIHN0YWJsZSBkaXNwb3NpdGlvbiwgYnV0IHVuZXZlbiBhbmQgcHJlY2lwaXRhdGUuIEFuZCBzbywgd2hlbiBoZSB3b3VsZCBiZSBhdCBvbmUgdGltZSBpbiBoaWdoZXN0IGZhdm91ciwgYW5kIGF0IGFub3RoZXIgd291bGQgZmluZCBoaW1zZWxmIGluIGRpc2dyYWNlIGFuZCBzcHVybmVkIGFzaWRlLCBoZSBjb3VsZCBub3QgYmVhciBlaXRoZXIgY2hhbmdlIG9mIGZvcnR1bmUgd2l0aCBlcXVhbmltaXR5LCBodXQgaWYgaGUgd2FzIGhlbGQgaW4gaG9ub3VyIGhpcyB2YW5pdHkgbWFkZSBoaW0gb2ZmZW5zaXZlLCBhbmQgd2hlbiBoZSBmZWxsIGZyb20gZmF2b3VyIGhlIHdhcyBub3QgaHVtYmxlIG9yIHF1aWV0LCBidXQgaGFyc2ggYW5kIGZlcm9jaW91cy4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJ0LiAyMy4yIiB2YWxpZD0ieWVzIj5DaGFwLiB4eGlpaS4gMiBmZi48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBpdCB3YXMgYWRkaW5nIGZpcmUgdG8gZmlyZSB3aGVuIFRlcmliYXp1cyBhdHRhY2hlZCBoaW1zZWxmIHRvIHRoZSB5b3VuZyBwcmluY2UgYW5kIHdhcyBmb3JldmVyIHRlbGxpbmcgaGltIHRoYXQgdGhlIHRpYXJhIHN0YW5kaW5nIHVwcmlnaHQgb24gdGhlIGhlYWQ8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFydC4gMjYuMiIgdmFsaWQ9InllcyI+Y2hhcC4geHh2aS4gMi4gPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdhcyBvZiBubyB1c2UgdG8gdGhvc2Ugd2hvIGRpZCBub3Qgc2VlayBieSB0aGVpciBvd24gZWZmb3J0cyB0byBzdGFuZCB1cHJpZ2h0IGluIGFmZmFpcnMgb2Ygc3RhdGUsIGFuZCB0aGF0IGhlIHdhcyB2ZXJ5IGZvb2xpc2ggaWYsIHdoZW4gaGlzIGJyb3RoZXIgd2FzIGluc2ludWF0aW5nIGhpbXNlbGYgaW50byBhZmZhaXJzIG9mIHN0YXRlIGJ5IHdheSBvZiB0aGUgaGFyZW0sIGFuZCBoaXMgZmF0aGVyIHdhcyBvZiBhIG5hdHVyZSBzbyBmaWNrbGUgYW5kIGluc2VjdXJlLCBoZSBjb3VsZCBzdXBwb3NlIHRoYXQgdGhlIHN1Y2Nlc3Npb24gdG8gdGhlIHRocm9uZSB3YXMgc2VjdXJlbHkgaGlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TdXJlbHkgaGUgd2hvbSByZWdhcmQgZm9yIGEgR3JlZWsgY291cnRlc2FuIGhhZCBsZWQgdG8gdmlvbGF0ZSB0aGUgaW52aW9sYWJsZSBjdXN0b20gb2YgdGhlIFBlcnNpYW5zLCBjb3VsZCBub3QgYmUgdHJ1c3RlZCB0byBhYmlkZSBieSBoaXMgYWdyZWVtZW50cyBpbiB0aGUgbW9zdCBpbXBvcnRhbnQgbWF0dGVycy4gTW9yZW92ZXIsIGhlIHNhaWQgaXQgd2FzIG5vdCB0aGUgc2FtZSB0aGluZyBmb3IgT2NodXMgbm90IHRvIGdldCB0aGUga2luZ2RvbSBhbmQgZm9yIERhcmVpdXMgdG8gYmUgZGVwcml2ZWQgb2YgaXQ7IGZvciBubyBvbmUgd291bGQgaGluZGVyIE9jaHVzIGZyb20gbGl2aW5nIGhhcHBpbHkgaW4gcHJpdmF0ZSBzdGF0aW9uLCBidXQgRGFyZWl1cyBoYWQgYmVlbiBkZWNsYXJlZCBraW5nLCBhbmQgbXVzdCBuZWVkcyBiZSBraW5nIG9yIG5vdCBsaXZlIGF0IGFsbC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGl0IHdhcyBhZGRpbmcgZmlyZSB0byBmaXJlIHdoZW4gVGVyaWJhenVzIGF0dGFjaGVkIGhpbXNlbGYgdG8gdGhlIHlvdW5nIHByaW5jZSBhbmQgd2FzIGZvcmV2ZXIgdGVsbGluZyBoaW0gdGhhdCB0aGUgdGlhcmEgc3RhbmRpbmcgdXByaWdodCBvbiB0aGUgaGVhZDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFydC4gMjYuMiIgdmFsaWQ9InllcyI+Y2hhcC4geHh2aS4gMi4gPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdhcyBvZiBubyB1c2UgdG8gdGhvc2Ugd2hvIGRpZCBub3Qgc2VlayBieSB0aGVpciBvd24gZWZmb3J0cyB0byBzdGFuZCB1cHJpZ2h0IGluIGFmZmFpcnMgb2Ygc3RhdGUsIGFuZCB0aGF0IGhlIHdhcyB2ZXJ5IGZvb2xpc2ggaWYsIHdoZW4gaGlzIGJyb3RoZXIgd2FzIGluc2ludWF0aW5nIGhpbXNlbGYgaW50byBhZmZhaXJzIG9mIHN0YXRlIGJ5IHdheSBvZiB0aGUgaGFyZW0sIGFuZCBoaXMgZmF0aGVyIHdhcyBvZiBhIG5hdHVyZSBzbyBmaWNrbGUgYW5kIGluc2VjdXJlLCBoZSBjb3VsZCBzdXBwb3NlIHRoYXQgdGhlIHN1Y2Nlc3Npb24gdG8gdGhlIHRocm9uZSB3YXMgc2VjdXJlbHkgaGlzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFydC4gMjYuMiIgdmFsaWQ9InllcyI+Y2hhcC4geHh2aS4gMi4gPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1cmVseSBoZSB3aG9tIHJlZ2FyZCBmb3IgYSBHcmVlayBjb3VydGVzYW4gaGFkIGxlZCB0byB2aW9sYXRlIHRoZSBpbnZpb2xhYmxlIGN1c3RvbSBvZiB0aGUgUGVyc2lhbnMsIGNvdWxkIG5vdCBiZSB0cnVzdGVkIHRvIGFiaWRlIGJ5IGhpcyBhZ3JlZW1lbnRzIGluIHRoZSBtb3N0IGltcG9ydGFudCBtYXR0ZXJzLiBNb3Jlb3ZlciwgaGUgc2FpZCBpdCB3YXMgbm90IHRoZSBzYW1lIHRoaW5nIGZvciBPY2h1cyBub3QgdG8gZ2V0IHRoZSBraW5nZG9tIGFuZCBmb3IgRGFyZWl1cyB0byBiZSBkZXByaXZlZCBvZiBpdDsgZm9yIG5vIG9uZSB3b3VsZCBoaW5kZXIgT2NodXMgZnJvbSBsaXZpbmcgaGFwcGlseSBpbiBwcml2YXRlIHN0YXRpb24sIGJ1dCBEYXJlaXVzIGhhZCBiZWVuIGRlY2xhcmVkIGtpbmcsIGFuZCBtdXN0IG5lZWRzIGJlIGtpbmcgb3Igbm90IGxpdmUgYXQgYWxsLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHBlcmhhcHMgaXQgaXMgZ2VuZXJhbGx5IHRydWUsIGFzIFNvcGhvY2xlcyBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyb20gYW4gdW5rbm93biBwbGF5LCBOYXVjaywgPHRpdGxlPlRyYWcuIEdyYWVjLiBGcmFnLjI8L3RpdGxlPiwgcC4gMzE1Ljwvbm90ZT4gdGhhdOKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5Td2lmdGx5IGRvdGggcGVyc3Vhc2lvbiB1bnRvIGV2aWwgY29uZHVjdCBtYWtlPC9sPgoJCQkJCSAgICAgICAgICA8bD5pdHMgd2F5OzwvbD4KICAgICAgICAgICAgPC9xdW90ZT4KCQkJCWZvciBzbW9vdGggYW5kIGRvd253YXJkIHNsb3BpbmcgaXMgdGhlIHBhc3NhZ2UgdG8gd2hhdCBhIG1hbiBkZXNpcmVzLCBhbmQgbW9zdCBtZW4gZGVzaXJlIHRoZSBiYWQgdGhyb3VnaCBpbmV4cGVyaWVuY2UgYW5kIGlnbm9yYW5jZSBvZiB0aGUgZ29vZC4gSG93ZXZlciwgaXQgd2FzIHRoZSBncmVhdG5lc3Mgb2YgdGhlIGVtcGlyZSBhbmQgdGhlIGZlYXIgd2hpY2ggRGFyZWl1cyBmZWx0IHRvd2FyZHMgT2NodXMgdGhhdCBwYXZlZCB0aGUgd2F5IGZvciBUZXJpYmF6dXMgYWx0aG91Z2gsIHNpbmNlIEFzcGFzaWEgaGFkIGJlZW4gdGFrZW4gYXdheSwgdGhlIEN5cHJ1cy1ib3JuIGdvZGRlc3Mgb2YgbG92ZSB3YXMgbm90IGFsdG9nZXRoZXIgd2l0aG91dCBpbmZsdWVuY2UgaW4gdGhlIGNhc2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgcGVyaGFwcyBpdCBpcyBnZW5lcmFsbHkgdHJ1ZSwgYXMgU29waG9jbGVzIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gcm9tIGFuIHVua25vd24gcGxheSwgTmF1Y2ssIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyYWcuIEdyYWVjLiBGcmFnLjI8L3RpdGxlPiwgcC4gMzE1Ljwvbm90ZT4gdGhhdOKAlAoJCQkJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJhZy4gR3JhZWMuIEZyYWcuMjwvdGl0bGU+LCBwLiAzMTUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3dpZnRseSBkb3RoIHBlcnN1YXNpb24gdW50byBldmlsIGNvbmR1Y3QgbWFrZTwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5pdHMgd2F5OzwvbD4KICAgICAgICAgICAgPC9xdW90ZT4KCQkJCWZvciBzbW9vdGggYW5kIGRvd253YXJkIHNsb3BpbmcgaXMgdGhlIHBhc3NhZ2UgdG8gd2hhdCBhIG1hbiBkZXNpcmVzLCBhbmQgbW9zdCBtZW4gZGVzaXJlIHRoZSBiYWQgdGhyb3VnaCBpbmV4cGVyaWVuY2UgYW5kIGlnbm9yYW5jZSBvZiB0aGUgZ29vZC4gSG93ZXZlciwgaXQgd2FzIHRoZSBncmVhdG5lc3Mgb2YgdGhlIGVtcGlyZSBhbmQgdGhlIGZlYXIgd2hpY2ggRGFyZWl1cyBmZWx0IHRvd2FyZHMgT2NodXMgdGhhdCBwYXZlZCB0aGUgd2F5IGZvciBUZXJpYmF6dXMgYWx0aG91Z2gsIHNpbmNlIEFzcGFzaWEgaGFkIGJlZW4gdGFrZW4gYXdheSwgdGhlIEN5cHJ1cy1ib3JuIGdvZGRlc3Mgb2YgbG92ZSB3YXMgbm90IGFsdG9nZXRoZXIgd2l0aG91dCBpbmZsdWVuY2UgaW4gdGhlIGNhc2UuCgkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3dpZnRseSBkb3RoIHBlcnN1YXNpb24gdW50byBldmlsIGNvbmR1Y3QgbWFrZTwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5pdHMgd2F5OzwvbD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIERhcmVpdXMgcHV0IGhpbXNlbGYgaW4gdGhlIGhhbmRzIG9mIFRlcmliYXp1czsgYW5kIHByZXNlbnRseSwgd2hlbiBtYW55IHdlcmUgaW4gdGhlIGNvbnNwaXJhY3ksIGFuIGV1bnVjaCBtYWRlIGtub3duIHRvIHRoZSBraW5nIHRoZSBwbG90IGFuZCB0aGUgbWFubmVyIG9mIGl0LCBoYXZpbmcgYWNjdXJhdGUga25vd2xlZGdlIHRoYXQgdGhlIGNvbnNwaXJhdG9ycyBoYWQgcmVzb2x2ZWQgdG8gZW50ZXIgdGhlIGtpbmcncyBjaGFtYmVyIGJ5IG5pZ2h0IGFuZCBraWxsIGhpbSBpbiBoaXMgYmVkLiBXaGVuIEFydGF4ZXJ4ZXMgaGVhcmQgdGhlIGV1bnVjaCdzIHN0b3J5LCBoZSB0aG91Z2h0IGl0IGEgZ3JhdmUgbWF0dGVyIHRvIG5lZ2xlY3QgdGhlIGluZm9ybWF0aW9uIGFuZCBpZ25vcmUgc28gZ3JlYXQgYSBwZXJpbCwgYW5kIGEgZ3JhdmVyIHN0aWxsIHRvIGJlbGlldmUgaXQgd2l0aG91dCBhbnkgcHJvb2YuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZXJlZm9yZSBhY3RlZCBvbiB0aGlzIHdpc2UuIEhlIGNoYXJnZWQgdGhlIGV1bnVjaCB0byBhdHRlbmQgY2xvc2VseSB1cG9uIHRoZSBjb25zcGlyYXRvcnM7IG1lYW53aGlsZSBoZSBoaW1zZWxmIGN1dCBhd2F5IHRoZSB3YWxsIG9mIGhpcyBjaGFtYmVyIGJlaGluZCB0aGUgYmVkLCBwdXQgYSBkb29yd2F5IHRoZXJlLCBhbmQgY292ZXJlZCB0aGUgZG9vciB3aXRoIGEgaGFuZ2luZy4gVGhlbiwgd2hlbiB0aGUgYXBwb2ludGVkIGhvdXIgd2FzIGF0IGhhbmQgYW5kIHRoZSBldW51Y2ggdG9sZCBoaW0gdGhlIGV4YWN0IHRpbWUsIGhlIGtlcHQgaGlzIGJlZCBhbWlkIGRpZCBub3QgcmlzZSBmcm9tIGl0IHVudGlsIGhlIHNhdyB0aGUgZmFjZXMgb2YgaGlzIGFzc2FpbGFudHMgYW5kIHJlY29nbmlzZWQgZWFjaCBtYW4gY2xlYXJseS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gaGUgc2F3IHRoZW0gYWR2YW5jaW5nIHVwb24gaGltIHdpdGggZHJhd24gc3dvcmRzLCBoZSBxdWlja2x5IGRyZXcgYXNpZGUgdGhlIGhhbmdpbmcsIHJldGlyZWQgaW50byB0aGUgaW5uZXIgY2hhbWJlciwgY2xvc2VkIHRoZSBkb29yIHdpdGggYSBzbGFtLCBhbmQgcmFpc2VkIGEgY3J5LiBUaGUgbXVyZGVyZXJzIGFjY29yZGluZ2x5LCBoYXZpbmcgYmVlbiBzZWVuIGJ5IHRoZSBraW5nLCBhbmQgaGF2aW5nIGFjY29tcGxpc2hlZCBub3RoaW5nLCBmbGVkIGJhY2sgdGhyb3VnaCB0aGUgZG9vciBieSB3aGljaCB0aGV5IGhhZCBjb21lLCBhbmQgdG9sZCBUZXJpYmF6dXMgYW5kIGhpcyBmcmllbmRzIHRvIGJlIG9mZiBzaW5jZSB0aGVpciBwbG90IHdhcyBrbm93bi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHJlc3QsIHRoZW4sIHdlcmUgZGlzcGVyc2VkIGFuZCBmbGVkOyBidXQgVGVyaWJhenVzIHNsZXcgbWFueSBvZiB0aGUga2luZydzIGd1YXJkcyBhcyB0aGV5IHNvdWdodCB0byBhcnJlc3QgaGltLCBhbmQgYXQgbGFzdCB3YXMgc21pdHRlbiBieSBhIHNwZWFyIGF0IGxvbmcgcmFuZ2UsIGFuZCBmZWxsLiBEYXJlaXVzLCB0b2dldGhlciB3aXRoIGhpcyBjaGlsZHJlbiwgd2FzIGJyb3VnaHQgdG8gdGhlIGtpbmcsIHdobyBjb25zaWduZWQgaGltIHRvIHRoZSByb3lhbCBqdWRnZXMgZm9yIHRyaWFsLiBUaGUga2luZyB3YXMgbm90IHByZXNlbnQgaW4gcGVyc29uIGF0IHRoZSB0cmlhbCwgYnV0IG90aGVycyBicm91Z2h0IGluIHRoZSBpbmRpY3RtZW50LiBIb3dldmVyLCB0aGUga2luZyBvcmRlcmVkIGNsZXJrcyB0byB0YWtlIGRvd24gaW4gd3JpdGluZyB0aGUgb3BpbmlvbiBvZiBlYWNoIGp1ZGdlIGFuZCBicmluZyB0aGVtIGFsbCB0byBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUganVkZ2VzIHdlcmUgb2Ygb25lIG9waW5pb24gYW5kIGNvbmRlbW5lZCBEYXJlaXVzIHRvIGRlYXRoLCB3aGVyZXVwb24gdGhlIHNlcnZhbnRzIG9mIHRoZSBraW5nIHNlaXplZCBoaW0gYW5kIGxlZCBoaW0gYXdheSBpbnRvIGEgY2hhbWJlciBuZWFyIGJ5LCB3aGl0aGVyIHRoZSBleGVjdXRpb25lciB3YXMgc3VtbW9uZWQuIFRoZSBleGVjdXRpb25lciBjYW1lLCB3aXRoIGEgc2hhcnAga25pZmUgaW4gaGlzIGhhbmQsIHdoZXJld2l0aCB0aGUgaGVhZHMgb2YgY29uZGVtbmVkIHBlcnNvbnMgYXJlIGN1dCBvZmY7IGJ1dCB3aGVuIGhlIHNhdyBEYXJlaXVzLCBoZSB3YXMgY29uZm91bmRlZCwgYW5kIHJldGlyZWQgdG93YXJkcyB0aGUgZG9vciB3aXRoIGF2ZXJ0ZWQgZ2F6ZSwgZGVjbGFyaW5nIHRoYXQgaGUgY291bGQgbm90IGFuZCB3b3VsZCBub3QgdGFrZSB0aGUgbGlmZSBvZiBhIGtpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSB0aGUganVkZ2VzIG91dHNpZGUgdGhlIGRvb3IgcGxpZWQgaGltIHdpdGggdGhyZWF0cyBhbmQgY29tbWFuZHMsIGhlIHR1cm5lZCBiYWNrLCBhcmlkIHdpdGggb25lIGhhbmQgY2x1dGNoaW5nIERhcmVpdXMgYnkgdGhlIGhhaXIsIGRyYWdnZWQgaGltIHRvIHRoZSBncm91bmQsIGFuZCBjdXQgb2ZmIGhpcyBoZWFkIHdpdGggdGhlIGtuaWZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIERhcmVpdXMgcHV0IGhpbXNlbGYgaW4gdGhlIGhhbmRzIG9mIFRlcmliYXp1czsgYW5kIHByZXNlbnRseSwgd2hlbiBtYW55IHdlcmUgaW4gdGhlIGNvbnNwaXJhY3ksIGFuIGV1bnVjaCBtYWRlIGtub3duIHRvIHRoZSBraW5nIHRoZSBwbG90IGFuZCB0aGUgbWFubmVyIG9mIGl0LCBoYXZpbmcgYWNjdXJhdGUga25vd2xlZGdlIHRoYXQgdGhlIGNvbnNwaXJhdG9ycyBoYWQgcmVzb2x2ZWQgdG8gZW50ZXIgdGhlIGtpbmcncyBjaGFtYmVyIGJ5IG5pZ2h0IGFuZCBraWxsIGhpbSBpbiBoaXMgYmVkLiBXaGVuIEFydGF4ZXJ4ZXMgaGVhcmQgdGhlIGV1bnVjaCdzIHN0b3J5LCBoZSB0aG91Z2h0IGl0IGEgZ3JhdmUgbWF0dGVyIHRvIG5lZ2xlY3QgdGhlIGluZm9ybWF0aW9uIGFuZCBpZ25vcmUgc28gZ3JlYXQgYSBwZXJpbCwgYW5kIGEgZ3JhdmVyIHN0aWxsIHRvIGJlbGlldmUgaXQgd2l0aG91dCBhbnkgcHJvb2YuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZXJlZm9yZSBhY3RlZCBvbiB0aGlzIHdpc2UuIEhlIGNoYXJnZWQgdGhlIGV1bnVjaCB0byBhdHRlbmQgY2xvc2VseSB1cG9uIHRoZSBjb25zcGlyYXRvcnM7IG1lYW53aGlsZSBoZSBoaW1zZWxmIGN1dCBhd2F5IHRoZSB3YWxsIG9mIGhpcyBjaGFtYmVyIGJlaGluZCB0aGUgYmVkLCBwdXQgYSBkb29yd2F5IHRoZXJlLCBhbmQgY292ZXJlZCB0aGUgZG9vciB3aXRoIGEgaGFuZ2luZy4gVGhlbiwgd2hlbiB0aGUgYXBwb2ludGVkIGhvdXIgd2FzIGF0IGhhbmQgYW5kIHRoZSBldW51Y2ggdG9sZCBoaW0gdGhlIGV4YWN0IHRpbWUsIGhlIGtlcHQgaGlzIGJlZCBhbWlkIGRpZCBub3QgcmlzZSBmcm9tIGl0IHVudGlsIGhlIHNhdyB0aGUgZmFjZXMgb2YgaGlzIGFzc2FpbGFudHMgYW5kIHJlY29nbmlzZWQgZWFjaCBtYW4gY2xlYXJseS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHNhdyB0aGVtIGFkdmFuY2luZyB1cG9uIGhpbSB3aXRoIGRyYXduIHN3b3JkcywgaGUgcXVpY2tseSBkcmV3IGFzaWRlIHRoZSBoYW5naW5nLCByZXRpcmVkIGludG8gdGhlIGlubmVyIGNoYW1iZXIsIGNsb3NlZCB0aGUgZG9vciB3aXRoIGEgc2xhbSwgYW5kIHJhaXNlZCBhIGNyeS4gVGhlIG11cmRlcmVycyBhY2NvcmRpbmdseSwgaGF2aW5nIGJlZW4gc2VlbiBieSB0aGUga2luZywgYW5kIGhhdmluZyBhY2NvbXBsaXNoZWQgbm90aGluZywgZmxlZCBiYWNrIHRocm91Z2ggdGhlIGRvb3IgYnkgd2hpY2ggdGhleSBoYWQgY29tZSwgYW5kIHRvbGQgVGVyaWJhenVzIGFuZCBoaXMgZnJpZW5kcyB0byBiZSBvZmYgc2luY2UgdGhlaXIgcGxvdCB3YXMga25vd24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0LCB0aGVuLCB3ZXJlIGRpc3BlcnNlZCBhbmQgZmxlZDsgYnV0IFRlcmliYXp1cyBzbGV3IG1hbnkgb2YgdGhlIGtpbmcncyBndWFyZHMgYXMgdGhleSBzb3VnaHQgdG8gYXJyZXN0IGhpbSwgYW5kIGF0IGxhc3Qgd2FzIHNtaXR0ZW4gYnkgYSBzcGVhciBhdCBsb25nIHJhbmdlLCBhbmQgZmVsbC4gRGFyZWl1cywgdG9nZXRoZXIgd2l0aCBoaXMgY2hpbGRyZW4sIHdhcyBicm91Z2h0IHRvIHRoZSBraW5nLCB3aG8gY29uc2lnbmVkIGhpbSB0byB0aGUgcm95YWwganVkZ2VzIGZvciB0cmlhbC4gVGhlIGtpbmcgd2FzIG5vdCBwcmVzZW50IGluIHBlcnNvbiBhdCB0aGUgdHJpYWwsIGJ1dCBvdGhlcnMgYnJvdWdodCBpbiB0aGUgaW5kaWN0bWVudC4gSG93ZXZlciwgdGhlIGtpbmcgb3JkZXJlZCBjbGVya3MgdG8gdGFrZSBkb3duIGluIHdyaXRpbmcgdGhlIG9waW5pb24gb2YgZWFjaCBqdWRnZSBhbmQgYnJpbmcgdGhlbSBhbGwgdG8gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUganVkZ2VzIHdlcmUgb2Ygb25lIG9waW5pb24gYW5kIGNvbmRlbW5lZCBEYXJlaXVzIHRvIGRlYXRoLCB3aGVyZXVwb24gdGhlIHNlcnZhbnRzIG9mIHRoZSBraW5nIHNlaXplZCBoaW0gYW5kIGxlZCBoaW0gYXdheSBpbnRvIGEgY2hhbWJlciBuZWFyIGJ5LCB3aGl0aGVyIHRoZSBleGVjdXRpb25lciB3YXMgc3VtbW9uZWQuIFRoZSBleGVjdXRpb25lciBjYW1lLCB3aXRoIGEgc2hhcnAga25pZmUgaW4gaGlzIGhhbmQsIHdoZXJld2l0aCB0aGUgaGVhZHMgb2YgY29uZGVtbmVkIHBlcnNvbnMgYXJlIGN1dCBvZmY7IGJ1dCB3aGVuIGhlIHNhdyBEYXJlaXVzLCBoZSB3YXMgY29uZm91bmRlZCwgYW5kIHJldGlyZWQgdG93YXJkcyB0aGUgZG9vciB3aXRoIGF2ZXJ0ZWQgZ2F6ZSwgZGVjbGFyaW5nIHRoYXQgaGUgY291bGQgbm90IGFuZCB3b3VsZCBub3QgdGFrZSB0aGUgbGlmZSBvZiBhIGtpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSB0aGUganVkZ2VzIG91dHNpZGUgdGhlIGRvb3IgcGxpZWQgaGltIHdpdGggdGhyZWF0cyBhbmQgY29tbWFuZHMsIGhlIHR1cm5lZCBiYWNrLCBhcmlkIHdpdGggb25lIGhhbmQgY2x1dGNoaW5nIERhcmVpdXMgYnkgdGhlIGhhaXIsIGRyYWdnZWQgaGltIHRvIHRoZSBncm91bmQsIGFuZCBjdXQgb2ZmIGhpcyBoZWFkIHdpdGggdGhlIGtuaWZlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPlNvbWUgc2F5LCBob3dldmVyLCB0aGF0IHRoZSB0cmlhbCB3YXMgaGVsZCBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIGtpbmcsIGFuZCB0aGF0IERhcmVpdXMsIHdoZW4gaGUgd2FzIG92ZXJ3aGVsbWVkIGJ5IHRoZSBwcm9vZnMsIGZlbGwgdXBvbiBoaXMgZmFjZSBhbmQgYmVnZ2VkIGFuZCBzdWVkIGZvciBtZXJjeTsgCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5idXQgQXJ0YXhlcnhlcyByb3NlIHVwIGluIGFuZ2VyLCBkcmV3IGhpcyBzY2ltaXRhciwgYW5kIHNtb3RlIGhpbSB0aWxsIGhlIGhhZCBraWxsZWQgaGltOyB0aGVuLCBnb2luZyBmb3J0aCBpbnRvIGNvdXJ0LCBoZSBtYWRlIG9iZWlzYW5jZSB0byB0aGUgc3VuIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRlcGFydCBpbiBqb3kgYW5kIHBlYWNlLCB5ZSBQZXJzaWFucywgYW5kIHNheSB0byBhbGwgd2hvbSB5ZSBtZWV0IHRoYXQgdGhvc2Ugd2hvIGNvbnRyaXZlZCBpbXBpb3VzIGFuZCB1bmxhd2Z1bCB0aGluZ3MgaGF2ZSBiZWVuIHB1bmlzaGVkIGJ5IGdyZWF0IE9yb21hc2Rlcy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBBcnRheGVyeGVzIHJvc2UgdXAgaW4gYW5nZXIsIGRyZXcgaGlzIHNjaW1pdGFyLCBhbmQgc21vdGUgaGltIHRpbGwgaGUgaGFkIGtpbGxlZCBoaW07IHRoZW4sIGdvaW5nIGZvcnRoIGludG8gY291cnQsIGhlIG1hZGUgb2JlaXNhbmNlIHRvIHRoZSBzdW4gYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EZXBhcnQgaW4gam95IGFuZCBwZWFjZSwgeWUgUGVyc2lhbnMsIGFuZCBzYXkgdG8gYWxsIHdob20geWUgbWVldCB0aGF0IHRob3NlIHdobyBjb250cml2ZWQgaW1waW91cyBhbmQgdW5sYXdmdWwgdGhpbmdzIGhhdmUgYmVlbiBwdW5pc2hlZCBieSBncmVhdCBPcm9tYXNkZXMuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoLCB0aGVuLCB3YXMgdGhlIGVuZCBvZiB0aGUgY29uc3BpcmFjeS4gQW5kIG5vdyBPY2h1cyB3YXMgc2FuZ3VpbmUgaW4gdGhlIGhvcGVzIHdpdGggd2hpY2ggQXRvc3NhIGluc3BpcmVkIGhpbSwgYnV0IGhlIHdhcyBzdGlsbCBhZnJhaWQgb2YgQXJpYXNwZXMsIHRoZSBvbmx5IGxlZ2l0aW1hdGUgc29uIG9mIHRoZSBraW5nIHJlbWFpbmluZywgYW5kIGFsc28gb2YgQXJzYW1lcyBhbW9uZyB0aGUgaWxsZWdpdGltYXRlIHNvbnMuIEZvciBBcmlhc3Blcywgbm90IGJlY2F1c2UgaGUgd2FzIG9sZGVyIHRoYW4gT2NodXMsIGJ1dCBiZWNhdXNlIGhlIHdhcyBtaWxkIGFuZCBzdHJhaWdodGZvcndhcmQgYW5kIGh1bWFuZSwgd2FzIGRlZW1lZCBieSB0aGUgUGVyc2lhbnMgd29ydGh5IHRvIGJlIHRoZWlyIGtpbmc7IEFyc2FtZXMsIGhvd2V2ZXIsIHdhcyB0aG91Z2h0IHRvIGhhdmUgd2lzZG9tLCBhbmQgdGhlIGZhY3QgdGhhdCBoZSB3YXMgZXNwZWNpYWxseSBkZWFyIHRvIGhpcyBmYXRoZXIgd2FzIG5vdCB1bmtub3duIHRvIE9jaHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgaGUgcGxvdHRlZCBhZ2FpbnN0IHRoZSBsaXZlcyBvZiBib3RoLCBhbmQgYmVpbmcgYXQgb25jZSB3aWx5IGFuZCBibG9vZHktbWluZGVkLCBoZSBicm91Z2h0IHRoZSBjcnVlbHR5IG9mIGhpcyBuYXR1cmUgaW50byBwbGF5IGFnYWluc3QgQXJzYW1lcywgYnV0IGhpcyB2aWxsYWlueSBhbmQgY3JhZnQgYWdhaW5zdCBBcmlhc3Blcy4gRm9yIGhlIHNlY3JldGx5IHNlbnQgdG8gQXJpYXNwZXMgZXVudWNocyBhbmQgZnJpZW5kcyBvZiB0aGUga2luZywgd2hvIGNvbnN0YW50bHkgYnJvdWdodCBoaW0gd29yZCBvZiBzdW5kcnkgdGhyZWF0ZW5pbmcgYW5kIHRlcnJpZnlpbmcgdXR0ZXJhbmNlcyBpbXBseWluZyB0aGF0IGhpcyBmYXRoZXIgaGFkIGRldGVybWluZWQgdG8gcHV0IGhpbSB0byBhIGNydWVsIGFuZCBzaGFtZWZ1bCBkZWF0aC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UgdGhleSBwcmV0ZW5kZWQgdGhhdCB0aGVzZSBkYWlseSByZXBvcnRzIG9mIHRoZWlycyB3ZXJlIHNlY3JldHMgb2Ygc3RhdGUsIGFuZCBkZWNsYXJlZCwgbm93IHRoYXQgdGhlIGtpbmcgd2FzIGRlbGF5aW5nIGluIHRoZSBtYXR0ZXIsIGFuZCBub3cgdGhhdCBoZSB3YXMgb24gdGhlIHBvaW50IG9mIGFjdGluZywgdGhleSBzbyB0ZXJyaWZpZWQgdGhlIHByaW5jZSwgYW5kIGZpbGxlZCBoaXMgbWluZCB3aXRoIHNvIGdyZWF0IHRyZXBpZGF0aW9uLCBjb25mdXNpb24sIGFuZCBkZXNwYWlyLCB0aGF0IGhlIGRyYW5rIGEgZGVhZGx5IHBvaXNvbiB3aGljaCBoZSBoYWQgcHJlcGFyZWQsIGFuZCB0aHVzIHJpZCBoaW1zZWxmIG9mIGxpZmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGtpbmcgd2FzIGluZm9ybWVkIG9mIHRoZSBtYW5uZXIgb2YgaGlzIGRlYXRoLCBoZSBiZXdhaWxlZCBoaXMgc29uLiBIZSBhbHNvIHN1c3BlY3RlZCB3aGF0IGhhZCBjYXVzZWQgaGlzIGRlYXRoLCBidXQgYmVpbmcgdW5hYmxlIGJ5IHJlYXNvbiBvZiBoaXMgYWdlIHRvIHNlYXJjaCBvdXQgYW5kIGNvbnZpY3QgdGhlIGd1aWx0eSBvbmUsIGhlIHdhcyBzdGlsbCBtb3JlIHdlbGwtYWZmZWN0aW9uZWQgdG93YXJkcyBBcnNhbWVzLCBhbmQgY2xlYXJseSBtYWRlIGhpbSBoaXMgY2hpZWYgc3VwcG9ydCBhbmQgY29uZmlkYW50LiBXaGVyZWZvcmUgT2NodXMgd291bGQgbm90IHBvc3Rwb25lIGhpcyBkZXNpZ24sIGJ1dCBzZXQgQXJwYXRlcywgYSBzb24gb2YgVGVyaWJhenVzLCB0byB0aGUgdGFzayBhbmQgYnkgaGlzIGhhbmQgc2xldyB0aGUgcHJpbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgQXJ0YXhlcnhlcywgYnkgcmVhc29uIG9mIGhpcyBhZ2UsIHdhcyBhbHJlYWR5IGhvdmVyaW5nIGJldHdlZW4gbGlmZSBhbmQgZGVhdGg7IGFuZCB3aGVuIHRoZSBzYWQgZmF0ZSBvZiBBcnNhbWVzIGNhbWUgdG8gaGlzIGVhcnMsIGhlIGNvdWxkIG5vdCBob2xkIG91dCBldmVuIGEgbGl0dGxlIHdoaWxlLCBidXQgc3RyYWlnaHR3YXkgZXhwaXJlZCBvZiBncmllZiBhbmQgZGVzcGFpci4gSGUgaGFkIGxpdmVkIG5pbmV0eS1mb3VyIHllYXJzLCBhbmQgaGFkIGJlZW4ga2luZyBzaXh0eS10d28sIGFuZCBoYWQgdGhlIHJlcHV0YXRpb24gb2YgYmVpbmcgZ2VudGxlIGFuZCBmb25kIG9mIGhpcyBzdWJqZWN0czsgdGhvdWdoIHRoaXMgd2FzIGNoaWVmbHkgZHVlIHRvIGhpcyBzb24gT2NodXMsIHdobyBzdXJwYXNzZWQgYWxsIG1lbiBpbiBjcnVlbHR5IGFuZCBibG9vZGd1aWx0aW5lc3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgd2FzIHRoZSBlbmQgb2YgdGhlIGNvbnNwaXJhY3kuIEFuZCBub3cgT2NodXMgd2FzIHNhbmd1aW5lIGluIHRoZSBob3BlcyB3aXRoIHdoaWNoIEF0b3NzYSBpbnNwaXJlZCBoaW0sIGJ1dCBoZSB3YXMgc3RpbGwgYWZyYWlkIG9mIEFyaWFzcGVzLCB0aGUgb25seSBsZWdpdGltYXRlIHNvbiBvZiB0aGUga2luZyByZW1haW5pbmcsIGFuZCBhbHNvIG9mIEFyc2FtZXMgYW1vbmcgdGhlIGlsbGVnaXRpbWF0ZSBzb25zLiBGb3IgQXJpYXNwZXMsIG5vdCBiZWNhdXNlIGhlIHdhcyBvbGRlciB0aGFuIE9jaHVzLCBidXQgYmVjYXVzZSBoZSB3YXMgbWlsZCBhbmQgc3RyYWlnaHRmb3J3YXJkIGFuZCBodW1hbmUsIHdhcyBkZWVtZWQgYnkgdGhlIFBlcnNpYW5zIHdvcnRoeSB0byBiZSB0aGVpciBraW5nOyBBcnNhbWVzLCBob3dldmVyLCB3YXMgdGhvdWdodCB0byBoYXZlIHdpc2RvbSwgYW5kIHRoZSBmYWN0IHRoYXQgaGUgd2FzIGVzcGVjaWFsbHkgZGVhciB0byBoaXMgZmF0aGVyIHdhcyBub3QgdW5rbm93biB0byBPY2h1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBwbG90dGVkIGFnYWluc3QgdGhlIGxpdmVzIG9mIGJvdGgsIGFuZCBiZWluZyBhdCBvbmNlIHdpbHkgYW5kIGJsb29keS1taW5kZWQsIGhlIGJyb3VnaHQgdGhlIGNydWVsdHkgb2YgaGlzIG5hdHVyZSBpbnRvIHBsYXkgYWdhaW5zdCBBcnNhbWVzLCBidXQgaGlzIHZpbGxhaW55IGFuZCBjcmFmdCBhZ2FpbnN0IEFyaWFzcGVzLiBGb3IgaGUgc2VjcmV0bHkgc2VudCB0byBBcmlhc3BlcyBldW51Y2hzIGFuZCBmcmllbmRzIG9mIHRoZSBraW5nLCB3aG8gY29uc3RhbnRseSBicm91Z2h0IGhpbSB3b3JkIG9mIHN1bmRyeSB0aHJlYXRlbmluZyBhbmQgdGVycmlmeWluZyB1dHRlcmFuY2VzIGltcGx5aW5nIHRoYXQgaGlzIGZhdGhlciBoYWQgZGV0ZXJtaW5lZCB0byBwdXQgaGltIHRvIGEgY3J1ZWwgYW5kIHNoYW1lZnVsIGRlYXRoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIHRoZXkgcHJldGVuZGVkIHRoYXQgdGhlc2UgZGFpbHkgcmVwb3J0cyBvZiB0aGVpcnMgd2VyZSBzZWNyZXRzIG9mIHN0YXRlLCBhbmQgZGVjbGFyZWQsIG5vdyB0aGF0IHRoZSBraW5nIHdhcyBkZWxheWluZyBpbiB0aGUgbWF0dGVyLCBhbmQgbm93IHRoYXQgaGUgd2FzIG9uIHRoZSBwb2ludCBvZiBhY3RpbmcsIHRoZXkgc28gdGVycmlmaWVkIHRoZSBwcmluY2UsIGFuZCBmaWxsZWQgaGlzIG1pbmQgd2l0aCBzbyBncmVhdCB0cmVwaWRhdGlvbiwgY29uZnVzaW9uLCBhbmQgZGVzcGFpciwgdGhhdCBoZSBkcmFuayBhIGRlYWRseSBwb2lzb24gd2hpY2ggaGUgaGFkIHByZXBhcmVkLCBhbmQgdGh1cyByaWQgaGltc2VsZiBvZiBsaWZlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGtpbmcgd2FzIGluZm9ybWVkIG9mIHRoZSBtYW5uZXIgb2YgaGlzIGRlYXRoLCBoZSBiZXdhaWxlZCBoaXMgc29uLiBIZSBhbHNvIHN1c3BlY3RlZCB3aGF0IGhhZCBjYXVzZWQgaGlzIGRlYXRoLCBidXQgYmVpbmcgdW5hYmxlIGJ5IHJlYXNvbiBvZiBoaXMgYWdlIHRvIHNlYXJjaCBvdXQgYW5kIGNvbnZpY3QgdGhlIGd1aWx0eSBvbmUsIGhlIHdhcyBzdGlsbCBtb3JlIHdlbGwtYWZmZWN0aW9uZWQgdG93YXJkcyBBcnNhbWVzLCBhbmQgY2xlYXJseSBtYWRlIGhpbSBoaXMgY2hpZWYgc3VwcG9ydCBhbmQgY29uZmlkYW50LiBXaGVyZWZvcmUgT2NodXMgd291bGQgbm90IHBvc3Rwb25lIGhpcyBkZXNpZ24sIGJ1dCBzZXQgQXJwYXRlcywgYSBzb24gb2YgVGVyaWJhenVzLCB0byB0aGUgdGFzayBhbmQgYnkgaGlzIGhhbmQgc2xldyB0aGUgcHJpbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
