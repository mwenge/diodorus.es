var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMgdGhvdWdodCB0aGlzIGEgYnJpbGxpYW50IHN0cm9rZSwgYW5kIHRoZSBjYXNlIHdhcyBpbiBldmVyeWJvZHkncyBtb3V0aCwgbGlrZSBhIGdyZWF0IGRlZWQgb2YgcHJvd2Vzcy4gSW5kZWVkLCB0aGV5IHRob3VnaHQgdGhlIGJ1c2luZXNzIG9mIGltcGVhY2htZW50LCBvbiBnZW5lcmFsIHByaW5jaXBsZXMgYW5kIHdpdGhvdXQgc3BlY2lhbCBwcm92b2NhdGlvbiwgbm8gaWdub2JsZSB0aGluZywgYnV0IHdlcmUgdmVyeSBkZXNpcm91cyB0byBzZWUgdGhlaXIgeW91bmcgbWVuIGZhc3RlbmluZyB0aGVtc2VsdmVzIG9uIG1hbGVmYWN0b3JzIGxpa2UgaGlnaC1icmVkIHdoZWxwcyBvbiB3aWxkIGJlYXN0cy4gSG93ZXZlciwgdGhlIGNhc2Ugc3RpcnJlZCB1cCBncmVhdCBhbmltb3NpdHksIHNvIHRoYXQgc3VuZHJ5IHBlcnNvbnMgd2VyZSBhY3R1YWxseSB3b3VuZGVkIGFuZCBzbGFpbiwgYW5kIFNlcnZpbGl1cyB3YXMgYWNxdWl0dGVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5MdWN1bGx1cyB3YXMgdHJhaW5lZCB0byBzcGVhayBmbHVlbnRseSBib3RoIExhdGluIGFuZCBHcmVlaywgc28gdGhhdCBTdWxsYSwgaW4gd3JpdGluZyBoaXMgb3duIG1lbW9pcnMsIGRlZGljYXRlZCB0aGVtIHRvIGhpbSwgYXMgYSBtYW4gd2hvIHdvdWxkIHNldCBpbiBvcmRlciBhbmQgZHVseSBhcnJhbmdlIHRoZSBoaXN0b3J5IG9mIHRoZSB0aW1lcyBiZXR0ZXIgdGhhbiBoaW1zZWxmLiBGb3IgdGhlIHN0eWxlIG9mIEx1Y3VsbHVzIHdhcyBub3Qgb25seSBidXNpbmVzc2xpa2UgYW5kIHJlYWR5OyB0aGUgc2FtZSB3YXMgdHJ1ZSBvZiBtYW55IGFub3RoZXIgbWFuJ3MgaW4gdGhlIEZvcnVtLiBUaGVyZSwKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+TGlrZSBzbWl0dGVuIHR1bm55LCB0aHJvdWdoIHRoZSBiaWxsb3d5IHNlYSBpdCBkYXNoZWQsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJYWx0aG91Z2ggb3V0c2lkZSBvZiB0aGUgRm9ydW0gaXQgd2FzCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPldpdGhlcmVkLCBpbmVsZWdhbnQsIGFuZCBkZWFkLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQnV0IEx1Y3VsbHVzLCBmcm9tIGhpcyB5b3V0aCB1cCwgd2FzIGRldm90ZWQgdG8gdGhlIGdlbmlhbCBhbmQgc28tY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bGliZXJhbDwvcT4gY3VsdHVyZSB0aGVuIGluIHZvZ3VlLCB3aGVyZWluIHRoZSBCZWF1dGlmdWwgd2FzIHNvdWdodC4gQW5kIHdoZW4gaGUgY2FtZSB0byBiZSB3ZWxsIG9uIGluIHllYXJzLCBoZSBzdWZmZXJlZCBoaXMgbWluZCB0byBmaW5kIGNvbXBsZXRlIGxlaXN1cmUgYW5kIHJlcG9zZSwgYXMgaXQgd2VyZSBhZnRlciBtYW55IHN0cnVnZ2xlcywgaW4gcGhpbG9zb3BoeSwgZW5jb3VyYWdpbmcgdGhlIGNvbnRlbXBsYXRpdmUgc2lkZSBvZiBoaXMgbmF0dXJlLCBhbmQgZ2l2aW5nIHRpbWVseSBoYWx0IGFuZCBjaGVjaywgYWZ0ZXIgaGlzIGRpZmZlcmVuY2Ugd2l0aCBQb21wZXksIHRvIHRoZSBwbGF5IG9mIGhpcyBhbWJpdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBhcyB0byBoaXMgbG92ZSBvZiBsaXRlcmF0dXJlLCB0aGlzIGFsc28gaXMgcmVwb3J0ZWQsIGluIGFkZGl0aW9uIHRvIHdoYXQgaGFzIGFscmVhZHkgYmVlbiBzYWlkOiB3aGVuIGhlIHdhcyBhIHlvdW5nIG1hbiwgcHJvY2VlZGluZyBmcm9tIGplc3QgdG8gZWFybmVzdCBpbiBhIGNvbnZlcnNhdGlvbiB3aXRoIEhvcnRlbnNpdXMsIHRoZSBvcmF0b3IsIGFuZCBTaXNlbm5hLCB0aGUgaGlzdG9yaWFuLCBoZSBhZ3JlZWQsIG9uIHRoZWlyIHN1Z2dlc3Rpb24gb2YgYSBwb2VtIGFuZCBhIGhpc3RvcnksIGJvdGggaW4gR3JlZWsgYW5kIExhdGluLCB0aGF0IGhlIHdvdWxkIHRyZWF0IHRoZSBNYXJzaWMgd2FyIGluIHdoaWNoZXZlciBvZiB0aGVzZSBmb3JtcyB0aGUgbG90IHNob3VsZCBwcmVzY3JpYmUuIEFuZCBpdCB3b3VsZCBzZWVtIHRoYXQgdGhlIGxvdCBwcmVzY3JpYmVkIGEgR3JlZWsgaGlzdG9yeSwgZm9yIHRoZXJlIGlzIGV4dGFudCBhIEdyZWVrIGhpc3Rvcnkgb2YgdGhlIE1hcnNpYyB3YXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIHdhcyB0cmFpbmVkIHRvIHNwZWFrIGZsdWVudGx5IGJvdGggTGF0aW4gYW5kIEdyZWVrLCBzbyB0aGF0IFN1bGxhLCBpbiB3cml0aW5nIGhpcyBvd24gbWVtb2lycywgZGVkaWNhdGVkIHRoZW0gdG8gaGltLCBhcyBhIG1hbiB3aG8gd291bGQgc2V0IGluIG9yZGVyIGFuZCBkdWx5IGFycmFuZ2UgdGhlIGhpc3Rvcnkgb2YgdGhlIHRpbWVzIGJldHRlciB0aGFuIGhpbXNlbGYuIEZvciB0aGUgc3R5bGUgb2YgTHVjdWxsdXMgd2FzIG5vdCBvbmx5IGJ1c2luZXNzbGlrZSBhbmQgcmVhZHk7IHRoZSBzYW1lIHdhcyB0cnVlIG9mIG1hbnkgYW5vdGhlciBtYW4ncyBpbiB0aGUgRm9ydW0uIFRoZXJlLAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlrZSBzbWl0dGVuIHR1bm55LCB0aHJvdWdoIHRoZSBiaWxsb3d5IHNlYSBpdCBkYXNoZWQsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJYWx0aG91Z2ggb3V0c2lkZSBvZiB0aGUgRm9ydW0gaXQgd2FzCgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPkxpa2Ugc21pdHRlbiB0dW5ueSwgdGhyb3VnaCB0aGUgYmlsbG93eSBzZWEgaXQgZGFzaGVkLDwvbD4KCQkJCSAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0aGVyZWQsIGluZWxlZ2FudCwgYW5kIGRlYWQuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPldpdGhlcmVkLCBpbmVsZWdhbnQsIGFuZCBkZWFkLjwvbD4KCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQnV0IEx1Y3VsbHVzLCBmcm9tIGhpcyB5b3V0aCB1cCwgd2FzIGRldm90ZWQgdG8gdGhlIGdlbmlhbCBhbmQgc28tY2FsbGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5saWJlcmFsPC9xPiBjdWx0dXJlIHRoZW4gaW4gdm9ndWUsIHdoZXJlaW4gdGhlIEJlYXV0aWZ1bCB3YXMgc291Z2h0LiBBbmQgd2hlbiBoZSBjYW1lIHRvIGJlIHdlbGwgb24gaW4geWVhcnMsIGhlIHN1ZmZlcmVkIGhpcyBtaW5kIHRvIGZpbmQgY29tcGxldGUgbGVpc3VyZSBhbmQgcmVwb3NlLCBhcyBpdCB3ZXJlIGFmdGVyIG1hbnkgc3RydWdnbGVzLCBpbiBwaGlsb3NvcGh5LCBlbmNvdXJhZ2luZyB0aGUgY29udGVtcGxhdGl2ZSBzaWRlIG9mIGhpcyBuYXR1cmUsIGFuZCBnaXZpbmcgdGltZWx5IGhhbHQgYW5kIGNoZWNrLCBhZnRlciBoaXMgZGlmZmVyZW5jZSB3aXRoIFBvbXBleSwgdG8gdGhlIHBsYXkgb2YgaGlzIGFtYml0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgYXMgdG8gaGlzIGxvdmUgb2YgbGl0ZXJhdHVyZSwgdGhpcyBhbHNvIGlzIHJlcG9ydGVkLCBpbiBhZGRpdGlvbiB0byB3aGF0IGhhcyBhbHJlYWR5IGJlZW4gc2FpZDogd2hlbiBoZSB3YXMgYSB5b3VuZyBtYW4sIHByb2NlZWRpbmcgZnJvbSBqZXN0IHRvIGVhcm5lc3QgaW4gYSBjb252ZXJzYXRpb24gd2l0aCBIb3J0ZW5zaXVzLCB0aGUgb3JhdG9yLCBhbmQgU2lzZW5uYSwgdGhlIGhpc3RvcmlhbiwgaGUgYWdyZWVkLCBvbiB0aGVpciBzdWdnZXN0aW9uIG9mIGEgcG9lbSBhbmQgYSBoaXN0b3J5LCBib3RoIGluIEdyZWVrIGFuZCBMYXRpbiwgdGhhdCBoZSB3b3VsZCB0cmVhdCB0aGUgTWFyc2ljIHdhciBpbiB3aGljaGV2ZXIgb2YgdGhlc2UgZm9ybXMgdGhlIGxvdCBzaG91bGQgcHJlc2NyaWJlLiBBbmQgaXQgd291bGQgc2VlbSB0aGF0IHRoZSBsb3QgcHJlc2NyaWJlZCBhIEdyZWVrIGhpc3RvcnksIGZvciB0aGVyZSBpcyBleHRhbnQgYSBHcmVlayBoaXN0b3J5IG9mIHRoZSBNYXJzaWMgd2FyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5PZiBoaXMgYWZmZWN0aW9uIGZvciBoaXMgYnJvdGhlciBNYXJjdXMgdGhlcmUgYXJlIG1hbnkgcHJvb2ZzLCBidXQgdGhlIFJvbWFucyBkd2VsbCBtb3N0IHVwb24gdGhlIGZpcnN0LiBBbHRob3VnaCwgbmFtZWx5LCBoZSB3YXMgb2xkZXIgdGhhbiBoaXMgYnJvdGhlciwgaGUgd2FzIHVud2lsbGluZyB0byBob2xkIG9mZmljZSBhbG9uZSwgYnV0IHdhaXRlZCB1bnRpbCBoaXMgYnJvdGhlciB3YXMgb2YgdGhlIHByb3BlciBhZ2UsIGFuZCB0aHVzIGdhaW5lZCB0aGUgZmF2b3VyIG9mIHRoZSBwZW9wbGUgdG8gc3VjaCBhbiBleHRlbnQgdGhhdCwgYWx0aG91Z2ggaW4gYWJzZW5jZSBmcm9tIHRoZSBjaXR5LCBoZSB3YXMgZWxlY3RlZCBhZWRpbGUgYWxvbmcgd2l0aCBoaXMgYnJvdGhlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9mIGhpcyBhZmZlY3Rpb24gZm9yIGhpcyBicm90aGVyIE1hcmN1cyB0aGVyZSBhcmUgbWFueSBwcm9vZnMsIGJ1dCB0aGUgUm9tYW5zIGR3ZWxsIG1vc3QgdXBvbiB0aGUgZmlyc3QuIEFsdGhvdWdoLCBuYW1lbHksIGhlIHdhcyBvbGRlciB0aGFuIGhpcyBicm90aGVyLCBoZSB3YXMgdW53aWxsaW5nIHRvIGhvbGQgb2ZmaWNlIGFsb25lLCBidXQgd2FpdGVkIHVudGlsIGhpcyBicm90aGVyIHdhcyBvZiB0aGUgcHJvcGVyIGFnZSwgYW5kIHRodXMgZ2FpbmVkIHRoZSBmYXZvdXIgb2YgdGhlIHBlb3BsZSB0byBzdWNoIGFuIGV4dGVudCB0aGF0LCBhbHRob3VnaCBpbiBhYnNlbmNlIGZyb20gdGhlIGNpdHksIGhlIHdhcyBlbGVjdGVkIGFlZGlsZSBhbG9uZyB3aXRoIGhpcyBicm90aGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRob3VnaCBoZSB3YXMgYnV0IGEgeW91bmcgbWFuIGluIHRoZSBNYXJzaWMgd2FyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjkwLTg5IEIuQy48L25vdGU+IGhlIGdhdmUgbWFueSBwcm9vZnMgb2YgY291cmFnZSBhbmQgdW5kZXJzdGFuZGluZy4gSXQgd2FzLCBob3dldmVyLCBtb3JlIG93aW5nIHRvIGhpcyBjb25zdGFuY3kgYW5kIG1pbGRuZXNzIHRoYXQgU3VsbGEgYXR0YWNoZWQgaGltIHRvIGhpbXNlbGYgYW5kIGVtcGxveWVkIGhpbSBmcm9tIGZpcnN0IHRvIGxhc3Qgb24gYnVzaW5lc3Mgb2YgdGhlIGhpZ2hlc3QgaW1wb3J0YW5jZS4gU3VjaCwgZm9yIGluc3RhbmNlLCB3YXMgdGhlIG1hbmFnZW1lbnQgb2YgdGhlIG1pbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlIG1vbmV5IHVzZWQgaW4gUGVsb3Bvbm5lc3VzIGR1cmluZyB0aGUgTWl0aHJpZGF0aWMgd2FyIHdhcyBjb2luZWQgYnkgaGltLCBhbmQgd2FzIGNhbGxlZCBMdWN1bGxlYW4gYWZ0ZXIgaGltLiBJdCByZW1haW5lZCBjdXJyZW50IGZvciBhIGxvbmcgdGltZSwgc2luY2UgdGhlIHdhbnRzIG9mIHRoZSBzb2xkaWVyeSBkdXJpbmcgdGhlIHdhciBnYXZlIGl0IHJhcGlkIGNpcmN1bGF0aW9uLiBBZnRlcndhcmRzLCBhdCBBdGhlbnMsIFN1bGxhIGZvdW5kIGhpbXNlbGYgbWFzdGVyIG9uIGxhbmQsIGJ1dCBjdXQgb2ZmIGZyb20gc3VwcGxpZXMgYnkgc2VhLCBvd2luZyB0byB0aGUgc3VwZXJpb3IgbmF2YWwgZm9yY2Ugb2YgdGhlIGVuZW15LiBIZSB0aGVyZWZvcmUgZGVzcGF0Y2hlZCBMdWN1bGx1cyB0byBFZ3lwdCBhbmQgTGlieWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+ODctODYgQi5DLjwvbm90ZT4gd2l0aCBvcmRlcnMgdG8gZmV0Y2ggc2hpcHMgZnJvbSB0aGVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2ludGVyIHdhcyB0aGVuIGF0IGl0cyB3b3JzdCwgYnV0IGhlIHNhaWxlZCBmb3J0aCB3aXRoIHRocmVlIEdyZWVrIGJyaWdhbnRpbmVzIGFuZCBhcyBtYW55IHNtYWxsIFJob2RpYW4gZ2FsbGV5cywgZXhwb3NpbmcgaGltc2VsZiBub3Qgb25seSB0byB0aGUgaGlnaCBzZWEsIGJ1dCB0byBudW1lcm91cyBob3N0aWxlIHNoaXBzIHdoaWNoIHdlcmUgY3J1aXNpbmcgYWJvdXQgZXZlcnl3aGVyZSBpbiBmdWxsIG1hc3Rlcnkgb2YgaXQuIEhvd2V2ZXIsIGhlIHB1dCBpbiBhdCBDcmV0ZSBhbmQgd29uIGl0IG92ZXIgdG8gaGlzIHNpZGUuIEhlIGFsc28gbWFkZSBDeXJlbsOpLCBhbmQgZmluZGluZyBpdCBpbiBjb25mdXNpb24gaW4gY29uc2VxdWVuY2Ugb2Ygc3VjY2Vzc2l2ZSB0eXJhbm5pZXMgYW5kIHdhcnMsIGhlIHJlc3RvcmVkIGl0IHRvIG9yZGVyLCBhbmQgZml4ZWQgaXRzIGNvbnN0aXR1dGlvbiwgcmVtaW5kaW5nIHRoZSBjaXR5IG9mIGEgY2VydGFpbiBvcmFjdWxhciB1dHRlcmFuY2Ugd2hpY2ggdGhlIGdyZWF0IFBsYXRvIGhhZCBvbmNlIHZvdWNoc2FmZWQgdG8gdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBhc2tlZCBoaW0sIGl0IHdvdWxkIHNlZW0sIHRvIHdyaXRlIGxhd3MgZm9yIHRoZW0sIGFuZCB0byBtb3VsZCB0aGVpciBwZW9wbGUgaW50byBzb21lIGZvcm0gb2Ygc291bmQgZ292ZXJubWVudCwgd2hlcmV1cG9uIGhlIHNhaWQgdGhhdCBpdCB3YXMgaGFyZCB0byBiZSBhIGxhd2dpdmVyIGZvciB0aGUgQ3lyZW5hZWFucyB3aGVuIHRoZXkgd2VyZSBoYXZpbmcgc3VjaCBnb29kIGZvcnR1bmUuIEluIGZhY3QsIG5vdGhpbmcgaXMgbW9yZSB1bmdvdmVybmFibGUgdGhhbiBhIG1hbiByZXB1dGVkIHRvIGJlIHByb3NwZXJvdXM7IGFuZCwgb24gdGhlIG90aGVyIGhhbmQsIG5vdGhpbmcgaXMgbW9yZSByZWNlcHRpdmUgb2YgYXV0aG9yaXR5IHRoYW4gYSBtYW4gd2hvIGlzIGh1bWJsZWQgYnkgbWlzZm9ydHVuZS4gVGhpcyB3YXMgd2hhdCBtYWRlIHRoZSBDeXJlbmFlYW5zIGF0IHRoYXQgdGltZSBzbyBzdWJtaXNzaXZlIHRvIEx1Y3VsbHVzIGFzIHRoZWlyIGxhd2dpdmVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaG91Z2ggaGUgd2FzIGJ1dCBhIHlvdW5nIG1hbiBpbiB0aGUgTWFyc2ljIHdhciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjkwLTg5IEIuQy48L25vdGU+IGhlIGdhdmUgbWFueSBwcm9vZnMgb2YgY291cmFnZSBhbmQgdW5kZXJzdGFuZGluZy4gSXQgd2FzLCBob3dldmVyLCBtb3JlIG93aW5nIHRvIGhpcyBjb25zdGFuY3kgYW5kIG1pbGRuZXNzIHRoYXQgU3VsbGEgYXR0YWNoZWQgaGltIHRvIGhpbXNlbGYgYW5kIGVtcGxveWVkIGhpbSBmcm9tIGZpcnN0IHRvIGxhc3Qgb24gYnVzaW5lc3Mgb2YgdGhlIGhpZ2hlc3QgaW1wb3J0YW5jZS4gU3VjaCwgZm9yIGluc3RhbmNlLCB3YXMgdGhlIG1hbmFnZW1lbnQgb2YgdGhlIG1pbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlIG1vbmV5IHVzZWQgaW4gUGVsb3Bvbm5lc3VzIGR1cmluZyB0aGUgTWl0aHJpZGF0aWMgd2FyIHdhcyBjb2luZWQgYnkgaGltLCBhbmQgd2FzIGNhbGxlZCBMdWN1bGxlYW4gYWZ0ZXIgaGltLiBJdCByZW1haW5lZCBjdXJyZW50IGZvciBhIGxvbmcgdGltZSwgc2luY2UgdGhlIHdhbnRzIG9mIHRoZSBzb2xkaWVyeSBkdXJpbmcgdGhlIHdhciBnYXZlIGl0IHJhcGlkIGNpcmN1bGF0aW9uLiBBZnRlcndhcmRzLCBhdCBBdGhlbnMsIFN1bGxhIGZvdW5kIGhpbXNlbGYgbWFzdGVyIG9uIGxhbmQsIGJ1dCBjdXQgb2ZmIGZyb20gc3VwcGxpZXMgYnkgc2VhLCBvd2luZyB0byB0aGUgc3VwZXJpb3IgbmF2YWwgZm9yY2Ugb2YgdGhlIGVuZW15LiBIZSB0aGVyZWZvcmUgZGVzcGF0Y2hlZCBMdWN1bGx1cyB0byBFZ3lwdCBhbmQgTGlieWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj44Ny04NiBCLkMuPC9ub3RlPiB3aXRoIG9yZGVycyB0byBmZXRjaCBzaGlwcyBmcm9tIHRoZXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldpbnRlciB3YXMgdGhlbiBhdCBpdHMgd29yc3QsIGJ1dCBoZSBzYWlsZWQgZm9ydGggd2l0aCB0aHJlZSBHcmVlayBicmlnYW50aW5lcyBhbmQgYXMgbWFueSBzbWFsbCBSaG9kaWFuIGdhbGxleXMsIGV4cG9zaW5nIGhpbXNlbGYgbm90IG9ubHkgdG8gdGhlIGhpZ2ggc2VhLCBidXQgdG8gbnVtZXJvdXMgaG9zdGlsZSBzaGlwcyB3aGljaCB3ZXJlIGNydWlzaW5nIGFib3V0IGV2ZXJ5d2hlcmUgaW4gZnVsbCBtYXN0ZXJ5IG9mIGl0LiBIb3dldmVyLCBoZSBwdXQgaW4gYXQgQ3JldGUgYW5kIHdvbiBpdCBvdmVyIHRvIGhpcyBzaWRlLiBIZSBhbHNvIG1hZGUgQ3lyZW7DqSwgYW5kIGZpbmRpbmcgaXQgaW4gY29uZnVzaW9uIGluIGNvbnNlcXVlbmNlIG9mIHN1Y2Nlc3NpdmUgdHlyYW5uaWVzIGFuZCB3YXJzLCBoZSByZXN0b3JlZCBpdCB0byBvcmRlciwgYW5kIGZpeGVkIGl0cyBjb25zdGl0dXRpb24sIHJlbWluZGluZyB0aGUgY2l0eSBvZiBhIGNlcnRhaW4gb3JhY3VsYXIgdXR0ZXJhbmNlIHdoaWNoIHRoZSBncmVhdCBQbGF0byBoYWQgb25jZSB2b3VjaHNhZmVkIHRvIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgYXNrZWQgaGltLCBpdCB3b3VsZCBzZWVtLCB0byB3cml0ZSBsYXdzIGZvciB0aGVtLCBhbmQgdG8gbW91bGQgdGhlaXIgcGVvcGxlIGludG8gc29tZSBmb3JtIG9mIHNvdW5kIGdvdmVybm1lbnQsIHdoZXJldXBvbiBoZSBzYWlkIHRoYXQgaXQgd2FzIGhhcmQgdG8gYmUgYSBsYXdnaXZlciBmb3IgdGhlIEN5cmVuYWVhbnMgd2hlbiB0aGV5IHdlcmUgaGF2aW5nIHN1Y2ggZ29vZCBmb3J0dW5lLiBJbiBmYWN0LCBub3RoaW5nIGlzIG1vcmUgdW5nb3Zlcm5hYmxlIHRoYW4gYSBtYW4gcmVwdXRlZCB0byBiZSBwcm9zcGVyb3VzOyBhbmQsIG9uIHRoZSBvdGhlciBoYW5kLCBub3RoaW5nIGlzIG1vcmUgcmVjZXB0aXZlIG9mIGF1dGhvcml0eSB0aGFuIGEgbWFuIHdobyBpcyBodW1ibGVkIGJ5IG1pc2ZvcnR1bmUuIFRoaXMgd2FzIHdoYXQgbWFkZSB0aGUgQ3lyZW5hZWFucyBhdCB0aGF0IHRpbWUgc28gc3VibWlzc2l2ZSB0byBMdWN1bGx1cyBhcyB0aGVpciBsYXdnaXZlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGVuY2UgaGUgc2V0IHNhaWwgZm9yIEVneXB0LCBidXQgd2FzIGF0dGFja2VkIGJ5IHBpcmF0ZXMsIGFuZCBsb3N0IG1vc3Qgb2YgaGlzIHZlc3NlbHMuIEhlIGhpbXNlbGYsIGhvd2V2ZXIsIGVzY2FwZWQgaW4gc2FmZXR5LCBhbmQgZW50ZXJlZCB0aGUgcG9ydCBvZiBBbGV4YW5kcmlhIGluIHNwbGVuZGlkIHN0eWxlLiBUaGUgZW50aXJlIEVneXB0aWFuIGZsZWV0IGNhbWUgdG8gbWVldCBoaW0sIGFzIGl0IHdhcyB3b250IHRvIGRvIHdoZW4gYSBraW5nIHB1dCBpbnRvIHBvcnQsIGluIHJlc3BsZW5kZW50IGFycmF5LCBhbmQgdGhlIHlvdXRoZnVsIFB0b2xlbXksIGJlc2lkZXMgc2hvd2luZyBoaW0gb3RoZXIgYXN0b25pc2hpbmcgbWFya3Mgb2Yga2luZG5lc3MsIGdhdmUgaGltIGxvZGdpbmcgYW5kIHN1c3RlbmFuY2UgaW4gdGhlIHJveWFsIHBhbGFjZSwgd2hpdGhlciBubyBmb3JlaWduIGNvbW1hbmRlciBoYWQgZXZlciBiZWVuIGJyb3VnaHQgYmVmb3JlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYWxsb3dhbmNlIHdoaWNoIHRoZSBraW5nIG1hZGUgZm9yIGhpcyBleHBlbnNlcyB3YXMgbm90IHRoZSBzYW1lIGFzIG90aGVycyBoYWQgcmVjZWl2ZWQsIGJ1dCBmb3VyIHRpbWVzIGFzIG11Y2gsIGFuZCB5ZXQgaGUgYWNjZXB0ZWQgbm90aGluZyBiZXlvbmQgd2hhdCB3YXMgYWN0dWFsbHkgbmVjZXNzYXJ5LCBhbmQgdG9vayBubyBnaWZ0LCBhbHRob3VnaCBoZSB3YXMgb2ZmZXJlZCB0aGUgd29ydGggb2YgZWlnaHR5IHRhbGVudHMuIEl0IGlzIGFsc28gc2FpZCB0aGF0IGhlIG5laXRoZXIgd2VudCB1cCB0byBNZW1waGlzLCBub3Igc291Z2h0IG91dCBhbnkgb3RoZXIgb2YgdGhlIGZhbW91cyB3b25kZXJzIG9mIEVneXB0OyB0aGlzIGhlIGhlbGQgdG8gYmUgdGhlIHByaXZpbGVnZSBvZiBhIGxlaXN1cmVseSBhbmQgbHV4dXJpb3VzIHNpZ2h0LXNlZXIsIG5vdCBvZiBvbmUgd2hvLCBsaWtlIGhpbXNlbGYsIGhhZCBsZWZ0IGhpcyBjb21tYW5kZXItaW4tY2hpZWYgZW5jYW1wZWQgdW5kZXIgdGhlIG9wZW4gc2t5IGFsb25nc2lkZSB0aGUgYmF0dGxlbWVudHMgb2YgdGhlIGVuZW15LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlbmNlIGhlIHNldCBzYWlsIGZvciBFZ3lwdCwgYnV0IHdhcyBhdHRhY2tlZCBieSBwaXJhdGVzLCBhbmQgbG9zdCBtb3N0IG9mIGhpcyB2ZXNzZWxzLiBIZSBoaW1zZWxmLCBob3dldmVyLCBlc2NhcGVkIGluIHNhZmV0eSwgYW5kIGVudGVyZWQgdGhlIHBvcnQgb2YgQWxleGFuZHJpYSBpbiBzcGxlbmRpZCBzdHlsZS4gVGhlIGVudGlyZSBFZ3lwdGlhbiBmbGVldCBjYW1lIHRvIG1lZXQgaGltLCBhcyBpdCB3YXMgd29udCB0byBkbyB3aGVuIGEga2luZyBwdXQgaW50byBwb3J0LCBpbiByZXNwbGVuZGVudCBhcnJheSwgYW5kIHRoZSB5b3V0aGZ1bCBQdG9sZW15LCBiZXNpZGVzIHNob3dpbmcgaGltIG90aGVyIGFzdG9uaXNoaW5nIG1hcmtzIG9mIGtpbmRuZXNzLCBnYXZlIGhpbSBsb2RnaW5nIGFuZCBzdXN0ZW5hbmNlIGluIHRoZSByb3lhbCBwYWxhY2UsIHdoaXRoZXIgbm8gZm9yZWlnbiBjb21tYW5kZXIgaGFkIGV2ZXIgYmVlbiBicm91Z2h0IGJlZm9yZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBhbGxvd2FuY2Ugd2hpY2ggdGhlIGtpbmcgbWFkZSBmb3IgaGlzIGV4cGVuc2VzIHdhcyBub3QgdGhlIHNhbWUgYXMgb3RoZXJzIGhhZCByZWNlaXZlZCwgYnV0IGZvdXIgdGltZXMgYXMgbXVjaCwgYW5kIHlldCBoZSBhY2NlcHRlZCBub3RoaW5nIGJleW9uZCB3aGF0IHdhcyBhY3R1YWxseSBuZWNlc3NhcnksIGFuZCB0b29rIG5vIGdpZnQsIGFsdGhvdWdoIGhlIHdhcyBvZmZlcmVkIHRoZSB3b3J0aCBvZiBlaWdodHkgdGFsZW50cy4gSXQgaXMgYWxzbyBzYWlkIHRoYXQgaGUgbmVpdGhlciB3ZW50IHVwIHRvIE1lbXBoaXMsIG5vciBzb3VnaHQgb3V0IGFueSBvdGhlciBvZiB0aGUgZmFtb3VzIHdvbmRlcnMgb2YgRWd5cHQ7IHRoaXMgaGUgaGVsZCB0byBiZSB0aGUgcHJpdmlsZWdlIG9mIGEgbGVpc3VyZWx5IGFuZCBsdXh1cmlvdXMgc2lnaHQtc2Vlciwgbm90IG9mIG9uZSB3aG8sIGxpa2UgaGltc2VsZiwgaGFkIGxlZnQgaGlzIGNvbW1hbmRlci1pbi1jaGllZiBlbmNhbXBlZCB1bmRlciB0aGUgb3BlbiBza3kgYWxvbmdzaWRlIHRoZSBiYXR0bGVtZW50cyBvZiB0aGUgZW5lbXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UHRvbGVteSBhYmFuZG9uZWQgaGlzIGFsbGlhbmNlIHdpdGggUm9tZSwgb3V0IG9mIGZlYXIgZm9yIHRoZSBvdXRjb21lIG9mIHRoZSB3YXIsIGJ1dCBmdXJuaXNoZWQgTHVjdWxsdXMgd2l0aCBzaGlwcyB0byBjb252b3kgaGltIGFzIGZhciBhcyBDeXBydXMsIGVtYnJhY2VkIGhpbSBncmFjaW91c2x5IGF0IHBhcnRpbmcsIGFuZCBvZmZlcmVkIGhpbSBhIGNvc3RseSBlbWVyYWxkIHNldCBpbiBnb2xkLiBBdCBmaXJzdCBMdWN1bGx1cyBkZWNsaW5lZCB0byBhY2NlcHQgaXQsIGJ1dCB3aGVuIHRoZSBraW5nIHNob3dlZCBoaW0gdGhhdCB0aGUgZW5ncmF2aW5nIG9uIGl0IHdhcyBhIGxpa2VuZXNzIG9mIGhpbXNlbGYsIGhlIHdhcyBhZnJhaWQgdG8gcmVqZWN0IGl0LCBsZXN0IGhlIGJlIHRob3VnaHQgdG8gaGF2ZSBzYWlsZWQgYXdheSBhdCB1dHRlciBlbm1pdHkgd2l0aCB0aGUga2luZywgYW5kIHNvIGhhdmUgc29tZSBwbG90IGxhaWQgYWdhaW5zdCBoaW0gb24gdGhlIHZveWFnZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXMgaGUgc2FpbGVkIGFsb25nLCBoZSBjb2xsZWN0ZWQgYSBtdWx0aXR1ZGUgb2Ygc2hpcHMgZnJvbSB0aGUgbWFyaXRpbWUgY2l0aWVzLCBvbWl0dGluZyBhbGwgdGhvc2UgZW5nYWdlZCBpbiBwaXJhY3ksIGFuZCBjYW1lIGF0IGxhc3QgdG8gQ3lwcnVzLiBMZWFybmluZyB0aGVyZSB0aGF0IHRoZSBlbmVteSBsYXkgYXQgYW5jaG9yIG9mZiB0aGUgaGVhZGxhbmRzIGFuZCB3ZXJlIHdhdGNoaW5nIGZvciBoaXMgY29taW5nLCBoZSBoYXVsZWQgYWxsIGhpcyB2ZXNzZWxzIHVwIG9uIGxhbmQsIGFuZCB3cm90ZSBsZXR0ZXJzIHRvIHRoZSBjaXRpZXMgcmVxdWVzdGluZyB3aW50ZXIgcXVhcnRlcnMgYW5kIHByb3Zpc2lvbnMsIGFzIHRob3VnaCBoZSB3b3VsZCBhd2FpdCB0aGUgZmluZSBzZWFzb24gdGhlcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoZW4gdGhlIHdpbmQgc2VydmVkLCBoZSBzdWRkZW5seSBsYXVuY2hlZCBoaXMgc2hpcHMgYW5kIHB1dCBvdXQgdG8gc2VhLCBhbmQgYnkgc2FpbGluZyBpbiB0aGUgZGF5IHRpbWUgd2l0aCBoaXMgc2FpbHMgcmVlZmVkIGFuZCBsb3csIGJ1dCBpbiB0aGUgbmlnaHQgdGltZSB1bmRlciBmdWxsIGNhbnZhcywgaGUgY2FtZSBzYWZlbHkgdG8gUmhvZGVzLiBUaGUgUmhvZGlhbnMgZnVybmlzaGVkIGhpbSB3aXRoIG1vcmUgc2hpcHMsIGFuZCBoZSBpbmR1Y2VkIHRoZSBwZW9wbGUgb2YgQ29zIGFuZCBDbmlkdXMgdG8gZm9yc2FrZSB0aGUgcm95YWwgY2F1c2UgYW5kIGpvaW4gaGltIGluIGFuIGV4cGVkaXRpb24gYWdhaW5zdCBTYW1vcy4gV2l0aG91dCBhbnkgYWlkIGhlIGFsc28gZHJvdmUgdGhlIHJveWFsIGZvcmNlcyBvdXQgb2YgQ2hpb3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+ODUgQi5DLjwvbm90ZT4gYW5kIHNldCB0aGUgQ29sb3Bob25pYW5zIGZyZWUgZnJvbSB0aGVpciB0eXJhbnQsIEVwaWdvbnVzLCB3aG9tIGhlIGFycmVzdGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5QdG9sZW15IGFiYW5kb25lZCBoaXMgYWxsaWFuY2Ugd2l0aCBSb21lLCBvdXQgb2YgZmVhciBmb3IgdGhlIG91dGNvbWUgb2YgdGhlIHdhciwgYnV0IGZ1cm5pc2hlZCBMdWN1bGx1cyB3aXRoIHNoaXBzIHRvIGNvbnZveSBoaW0gYXMgZmFyIGFzIEN5cHJ1cywgZW1icmFjZWQgaGltIGdyYWNpb3VzbHkgYXQgcGFydGluZywgYW5kIG9mZmVyZWQgaGltIGEgY29zdGx5IGVtZXJhbGQgc2V0IGluIGdvbGQuIEF0IGZpcnN0IEx1Y3VsbHVzIGRlY2xpbmVkIHRvIGFjY2VwdCBpdCwgYnV0IHdoZW4gdGhlIGtpbmcgc2hvd2VkIGhpbSB0aGF0IHRoZSBlbmdyYXZpbmcgb24gaXQgd2FzIGEgbGlrZW5lc3Mgb2YgaGltc2VsZiwgaGUgd2FzIGFmcmFpZCB0byByZWplY3QgaXQsIGxlc3QgaGUgYmUgdGhvdWdodCB0byBoYXZlIHNhaWxlZCBhd2F5IGF0IHV0dGVyIGVubWl0eSB3aXRoIHRoZSBraW5nLCBhbmQgc28gaGF2ZSBzb21lIHBsb3QgbGFpZCBhZ2FpbnN0IGhpbSBvbiB0aGUgdm95YWdlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHNhaWxlZCBhbG9uZywgaGUgY29sbGVjdGVkIGEgbXVsdGl0dWRlIG9mIHNoaXBzIGZyb20gdGhlIG1hcml0aW1lIGNpdGllcywgb21pdHRpbmcgYWxsIHRob3NlIGVuZ2FnZWQgaW4gcGlyYWN5LCBhbmQgY2FtZSBhdCBsYXN0IHRvIEN5cHJ1cy4gTGVhcm5pbmcgdGhlcmUgdGhhdCB0aGUgZW5lbXkgbGF5IGF0IGFuY2hvciBvZmYgdGhlIGhlYWRsYW5kcyBhbmQgd2VyZSB3YXRjaGluZyBmb3IgaGlzIGNvbWluZywgaGUgaGF1bGVkIGFsbCBoaXMgdmVzc2VscyB1cCBvbiBsYW5kLCBhbmQgd3JvdGUgbGV0dGVycyB0byB0aGUgY2l0aWVzIHJlcXVlc3Rpbmcgd2ludGVyIHF1YXJ0ZXJzIGFuZCBwcm92aXNpb25zLCBhcyB0aG91Z2ggaGUgd291bGQgYXdhaXQgdGhlIGZpbmUgc2Vhc29uIHRoZXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoZW4gdGhlIHdpbmQgc2VydmVkLCBoZSBzdWRkZW5seSBsYXVuY2hlZCBoaXMgc2hpcHMgYW5kIHB1dCBvdXQgdG8gc2VhLCBhbmQgYnkgc2FpbGluZyBpbiB0aGUgZGF5IHRpbWUgd2l0aCBoaXMgc2FpbHMgcmVlZmVkIGFuZCBsb3csIGJ1dCBpbiB0aGUgbmlnaHQgdGltZSB1bmRlciBmdWxsIGNhbnZhcywgaGUgY2FtZSBzYWZlbHkgdG8gUmhvZGVzLiBUaGUgUmhvZGlhbnMgZnVybmlzaGVkIGhpbSB3aXRoIG1vcmUgc2hpcHMsIGFuZCBoZSBpbmR1Y2VkIHRoZSBwZW9wbGUgb2YgQ29zIGFuZCBDbmlkdXMgdG8gZm9yc2FrZSB0aGUgcm95YWwgY2F1c2UgYW5kIGpvaW4gaGltIGluIGFuIGV4cGVkaXRpb24gYWdhaW5zdCBTYW1vcy4gV2l0aG91dCBhbnkgYWlkIGhlIGFsc28gZHJvdmUgdGhlIHJveWFsIGZvcmNlcyBvdXQgb2YgQ2hpb3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj44NSBCLkMuPC9ub3RlPiBhbmQgc2V0IHRoZSBDb2xvcGhvbmlhbnMgZnJlZSBmcm9tIHRoZWlyIHR5cmFudCwgRXBpZ29udXMsIHdob20gaGUgYXJyZXN0ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGhhcHBlbmVkIGFib3V0IHRoaXMgdGltZSB0aGF0IE1pdGhyaWRhdGVzIGFiYW5kb25lZCBQZXJnYW11bSBhbmQgc2h1dCBoaW1zZWxmIHVwIGluIFBpdGFuw6kuIFNpbmNlIEZpbWJyaWEgaGVsZCBoaW0gaW4gY2xvc2Ugc2llZ2UgdGhlcmUgYnkgbGFuZCwgaGUgbG9va2VkIHRvIG1ha2UgaGlzIGVzY2FwZSBieSBzZWEsIGFuZCBjb2xsZWN0ZWQgYW5kIHN1bW1vbmVkIGhpcyBmbGVldHMgZnJvbSBldmVyeSBxdWFydGVyIGZvciB0aGlzIHB1cnBvc2UsIHJlbm91bmNpbmcgYWxsIGVuZ2FnZW1lbnRzIGluIHRoZSBmaWVsZCB3aXRoIGEgbWFuIHNvIGJvbGQgYW5kIHZpY3RvcmlvdXMgYXMgRmltYnJpYS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBkZXNpZ24gRmltYnJpYSBwZXJjZWl2ZWQsIGFuZCBiZWluZyB3aXRob3V0IGFueSBmbGVldCBvZiBoaXMgb3duLCBzZW50IHRvIEx1Y3VsbHVzLCBiZXNlZWNoaW5nIGhpbSB0byBjb21lIHdpdGggaGlzLCBhbmQgYXNzaXN0IGluIGNhcHR1cmluZyB0aGUgbW9zdCBob3N0aWxlIGFuZCB3YXJsaWtlIG9mIGtpbmdzLCB0aGF0IHRoZSBncmVhdCBwcml6ZSB3aGljaCB0aGV5IGhhZCBzb3VnaHQgd2l0aCBzbyBtYW55IHRvaWxzIGFuZCBzdHJ1Z2dsZXMgbWlnaHQgbm90IGVzY2FwZSB0aGUgUm9tYW5zLCBub3cgdGhhdCBNaXRocmlkYXRlcyB3YXMgaW4gdGhlaXIgZ3JpcCBhbmQgZmFzdCBpbiB0aGUgbWVzaGVzIG9mIHRoZWlyIG5ldC4gSWYgaGUgc2hvdWxkIGJlIGNhcHR1cmVkLCBGaW1icmlhIHNhaWQsIG5vIG9uZSB3b3VsZCBnZXQgbW9yZSBvZiB0aGUgZ2xvcnkgdGhhbiB0aGUgbWFuIHdobyBzdG9vZCBpbiB0aGUgd2F5IG9mIGhpcyBmbGlnaHQgYW5kIHNlaXplZCBoaW0gYXMgaGUgd2FzIHJ1bm5pbmcgb2ZmLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RHJpdmVuIGZyb20gdGhlIGxhbmQgYnkgbWUsIGFuZCBleGNsdWRlZCBmcm9tIHRoZSBzZWEgYnkgeW91LCBoZSB3aWxsIGNyb3duIHVzIGJvdGggd2l0aCBzdWNjZXNzLCBhbmQgdGhlIG11Y2ggaGVyYWxkZWQgZXhwbG9pdHMgb2YgU3VsbGEgYXQgT3JjaG9tZW51cyBhbmQgQ2hhZXJvbmVpYSB3aWxsIGNlYXNlIHRvIGludGVyZXN0IHRoZSBSb21hbnMuPC9xPiBBbmQgdGhlcmUgd2FzIG5vdGhpbmcgYWJzdXJkIGluIHRoZSBwcm9wb3NpdGlvbi4gSXQgaXMgY2xlYXIgdG8gZXZlcnlvbmUgdGhhdCBpZiBMdWN1bGx1cywgd2hvIHdhcyBjbG9zZSBhdCBoYW5kLCBoYWQgdGhlbiBsaXN0ZW5lZCB0byBGaW1icmlhLCBicm91Z2h0IGhpcyBzaGlwcyB0aGl0aGVyLCBhbmQgY2xvc2VkIHVwIHRoZSBoYXJib3VyIHdpdGggaGlzIGZsZWV0LCB0aGUgd2FyIHdvdWxkIGhhdmUgYmVlbiBhdCBhbiBlbmQsIGFuZCB0aGUgd29ybGQgZnJlZWQgZnJvbSBpbmZpbml0ZSBtaXNjaGllZi4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QnV0LCB3aGV0aGVyIGhlIHJhbmtlZCB0aGUgaG9ub3VyYWJsZSB0cmVhdG1lbnQgb2YgU3VsbGEgYWJvdmUgZXZlcnkgY29uc2lkZXJhdGlvbiBvZiBwcml2YXRlIG9yIHB1YmxpYyBhZHZhbnRhZ2UsIG9yIHdoZXRoZXIgaGUgcmVnYXJkZWQgRmltYnJpYSBhcyBhIHdyZXRjaCB3aG9zZSBhbWJpdGlvbiBmb3IgY29tbWFuZCBoYWQgcmVjZW50bHkgbGVkIGhpbSB0byBtdXJkZXIgYSBtYW4gd2hvIHdhcyBoaXMgZnJpZW5kIGFuZCBzdXBlcmlvciBvZmZpY2VyLCBvciB3aGV0aGVyIGl0IHdhcyBieSBzb21lIG15c3RlcmlvdXMgZGlzcGVuc2F0aW9uIG9mIGZvcnR1bmUgdGhhdCBoZSBjaG9zZSB0byBzcGFyZSBNaXRocmlkYXRlcywgYW5kIHNvIHJlc2VydmVkIGhpbSBmb3IgaGlzIG93biBhbnRhZ29uaXN0LOKAlGZvciB3aGF0ZXZlciByZWFzb24sIGhlIHdvdWxkIG5vdCBsaXN0ZW4gdG8gdGhlIHByb3Bvc2FsLCBidXQgc3VmZmVyZWQgTWl0aHJpZGF0ZXMgdG8gc2FpbCBvZmYgYW5kIG1vY2sgYXQgRmltYnJpYSdzIGZvcmNlcywgCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+d2hpbGUgaGUgaGltc2VsZiwgdG8gYmVnaW4gd2l0aCwgZGVmZWF0ZWQgdGhlIGtpbmcncyBzaGlwcyB3aGljaCBzaG93ZWQgdGhlbXNlbHZlcyBvZmYgTGVjdHVtIGluIHRoZSBUcm9hZC4gQW5kIGFnYWluLCBjYXRjaGluZyBzaWdodCBvZiBOZW9wdG9sZW11cyBseWluZyBpbiB3YWl0IGZvciBoaW0gYXQgVGVuZWRvcyB3aXRoIGEgc3RpbGwgbGFyZ2VyIGFybWFtZW50LCBoZSBzYWlsZWQgb3V0IGFnYWluc3QgaGltIGluIGFkdmFuY2Ugb2YgdGhlIHJlc3QsIG9uIGJvYXJkIG9mIGEgUmhvZGlhbiBnYWxsZXkgd2hpY2ggd2FzIGNvbW1hbmRlZCBieSBEYW1hZ29yYXMsIGEgbWFuIHdlbGwgZGlzcG9zZWQgdG8gdGhlIFJvbWFucywgYXJpZCBvZiB0aGUgbGFyZ2VzdCBleHBlcmllbmNlIGFzIGEgc2VhLWZpZ2h0ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPk5lb3B0b2xlbXVzIGRhc2hlZCBvdXQgdG8gbWVldCBoaW0sIGFuZCBvcmRlcmVkIGhpcyBzdGVlcnNtYW4gdG8gcmFtIHRoZSBlbmVteS4gRGFtYWdvcmFzLCBob3dldmVyLCBmZWFyaW5nIHRoZSB3ZWlnaHQgb2YgdGhlIHJveWFsIHNoaXAgYW5kIGhlciBydWdnZWQgYnJvbnplIGFybW91ciwgZGlkIG5vdCB2ZW50dXJlIHRvIGVuZ2FnZSBoZWFkIG9uLCBidXQgcHV0IHN3aWZ0bHkgYWJvdXQgYW5kIG9yZGVyZWQgaGlzIG1lbiB0byBiYWNrIHdhdGVyLCB0aHVzIHJlY2VpdmluZyBoaXMgZW5lbXkgYXN0ZXJuLCB3aGVyZSBoaXMgdmVzc2VsIHdhcyBkZXByZXNzZWQuIFRoZSBibG93IHdhcyBoYXJtbGVzcywgc2luY2UgaXQgZmVsbCB1cG9uIHRoZSBzdWJtZXJnZWQgcGFydHMgb2YgdGhlIHNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHBvaW50LCBoaXMgZnJpZW5kcyBjb21pbmcgdXAsIEx1Y3VsbHVzIGdhdmUgb3JkZXJzIHRvIHR1cm4gdGhlIHNoaXAgYWJvdXQsIGFuZCwgYWZ0ZXIgcGVyZm9ybWluZyBtYW55IHByYWlzZXdvcnRoeSBmZWF0cywgcHV0IHRoZSBlbmVteSB0byBmbGlnaHQgYW5kIGdhdmUgY2xvc2UgY2hhc2UgdG8gTmVvcHRvbGVtdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGhhcHBlbmVkIGFib3V0IHRoaXMgdGltZSB0aGF0IE1pdGhyaWRhdGVzIGFiYW5kb25lZCBQZXJnYW11bSBhbmQgc2h1dCBoaW1zZWxmIHVwIGluIFBpdGFuw6kuIFNpbmNlIEZpbWJyaWEgaGVsZCBoaW0gaW4gY2xvc2Ugc2llZ2UgdGhlcmUgYnkgbGFuZCwgaGUgbG9va2VkIHRvIG1ha2UgaGlzIGVzY2FwZSBieSBzZWEsIGFuZCBjb2xsZWN0ZWQgYW5kIHN1bW1vbmVkIGhpcyBmbGVldHMgZnJvbSBldmVyeSBxdWFydGVyIGZvciB0aGlzIHB1cnBvc2UsIHJlbm91bmNpbmcgYWxsIGVuZ2FnZW1lbnRzIGluIHRoZSBmaWVsZCB3aXRoIGEgbWFuIHNvIGJvbGQgYW5kIHZpY3RvcmlvdXMgYXMgRmltYnJpYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZGVzaWduIEZpbWJyaWEgcGVyY2VpdmVkLCBhbmQgYmVpbmcgd2l0aG91dCBhbnkgZmxlZXQgb2YgaGlzIG93biwgc2VudCB0byBMdWN1bGx1cywgYmVzZWVjaGluZyBoaW0gdG8gY29tZSB3aXRoIGhpcywgYW5kIGFzc2lzdCBpbiBjYXB0dXJpbmcgdGhlIG1vc3QgaG9zdGlsZSBhbmQgd2FybGlrZSBvZiBraW5ncywgdGhhdCB0aGUgZ3JlYXQgcHJpemUgd2hpY2ggdGhleSBoYWQgc291Z2h0IHdpdGggc28gbWFueSB0b2lscyBhbmQgc3RydWdnbGVzIG1pZ2h0IG5vdCBlc2NhcGUgdGhlIFJvbWFucywgbm93IHRoYXQgTWl0aHJpZGF0ZXMgd2FzIGluIHRoZWlyIGdyaXAgYW5kIGZhc3QgaW4gdGhlIG1lc2hlcyBvZiB0aGVpciBuZXQuIElmIGhlIHNob3VsZCBiZSBjYXB0dXJlZCwgRmltYnJpYSBzYWlkLCBubyBvbmUgd291bGQgZ2V0IG1vcmUgb2YgdGhlIGdsb3J5IHRoYW4gdGhlIG1hbiB3aG8gc3Rvb2QgaW4gdGhlIHdheSBvZiBoaXMgZmxpZ2h0IGFuZCBzZWl6ZWQgaGltIGFzIGhlIHdhcyBydW5uaW5nIG9mZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRyaXZlbiBmcm9tIHRoZSBsYW5kIGJ5IG1lLCBhbmQgZXhjbHVkZWQgZnJvbSB0aGUgc2VhIGJ5IHlvdSwgaGUgd2lsbCBjcm93biB1cyBib3RoIHdpdGggc3VjY2VzcywgYW5kIHRoZSBtdWNoIGhlcmFsZGVkIGV4cGxvaXRzIG9mIFN1bGxhIGF0IE9yY2hvbWVudXMgYW5kIENoYWVyb25laWEgd2lsbCBjZWFzZSB0byBpbnRlcmVzdCB0aGUgUm9tYW5zLjwvcT4gQW5kIHRoZXJlIHdhcyBub3RoaW5nIGFic3VyZCBpbiB0aGUgcHJvcG9zaXRpb24uIEl0IGlzIGNsZWFyIHRvIGV2ZXJ5b25lIHRoYXQgaWYgTHVjdWxsdXMsIHdobyB3YXMgY2xvc2UgYXQgaGFuZCwgaGFkIHRoZW4gbGlzdGVuZWQgdG8gRmltYnJpYSwgYnJvdWdodCBoaXMgc2hpcHMgdGhpdGhlciwgYW5kIGNsb3NlZCB1cCB0aGUgaGFyYm91ciB3aXRoIGhpcyBmbGVldCwgdGhlIHdhciB3b3VsZCBoYXZlIGJlZW4gYXQgYW4gZW5kLCBhbmQgdGhlIHdvcmxkIGZyZWVkIGZyb20gaW5maW5pdGUgbWlzY2hpZWYuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCwgd2hldGhlciBoZSByYW5rZWQgdGhlIGhvbm91cmFibGUgdHJlYXRtZW50IG9mIFN1bGxhIGFib3ZlIGV2ZXJ5IGNvbnNpZGVyYXRpb24gb2YgcHJpdmF0ZSBvciBwdWJsaWMgYWR2YW50YWdlLCBvciB3aGV0aGVyIGhlIHJlZ2FyZGVkIEZpbWJyaWEgYXMgYSB3cmV0Y2ggd2hvc2UgYW1iaXRpb24gZm9yIGNvbW1hbmQgaGFkIHJlY2VudGx5IGxlZCBoaW0gdG8gbXVyZGVyIGEgbWFuIHdobyB3YXMgaGlzIGZyaWVuZCBhbmQgc3VwZXJpb3Igb2ZmaWNlciwgb3Igd2hldGhlciBpdCB3YXMgYnkgc29tZSBteXN0ZXJpb3VzIGRpc3BlbnNhdGlvbiBvZiBmb3J0dW5lIHRoYXQgaGUgY2hvc2UgdG8gc3BhcmUgTWl0aHJpZGF0ZXMsIGFuZCBzbyByZXNlcnZlZCBoaW0gZm9yIGhpcyBvd24gYW50YWdvbmlzdCzigJRmb3Igd2hhdGV2ZXIgcmVhc29uLCBoZSB3b3VsZCBub3QgbGlzdGVuIHRvIHRoZSBwcm9wb3NhbCwgYnV0IHN1ZmZlcmVkIE1pdGhyaWRhdGVzIHRvIHNhaWwgb2ZmIGFuZCBtb2NrIGF0IEZpbWJyaWEncyBmb3JjZXMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIGhlIGhpbXNlbGYsIHRvIGJlZ2luIHdpdGgsIGRlZmVhdGVkIHRoZSBraW5nJ3Mgc2hpcHMgd2hpY2ggc2hvd2VkIHRoZW1zZWx2ZXMgb2ZmIExlY3R1bSBpbiB0aGUgVHJvYWQuIEFuZCBhZ2FpbiwgY2F0Y2hpbmcgc2lnaHQgb2YgTmVvcHRvbGVtdXMgbHlpbmcgaW4gd2FpdCBmb3IgaGltIGF0IFRlbmVkb3Mgd2l0aCBhIHN0aWxsIGxhcmdlciBhcm1hbWVudCwgaGUgc2FpbGVkIG91dCBhZ2FpbnN0IGhpbSBpbiBhZHZhbmNlIG9mIHRoZSByZXN0LCBvbiBib2FyZCBvZiBhIFJob2RpYW4gZ2FsbGV5IHdoaWNoIHdhcyBjb21tYW5kZWQgYnkgRGFtYWdvcmFzLCBhIG1hbiB3ZWxsIGRpc3Bvc2VkIHRvIHRoZSBSb21hbnMsIGFyaWQgb2YgdGhlIGxhcmdlc3QgZXhwZXJpZW5jZSBhcyBhIHNlYS1maWdodGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPk5lb3B0b2xlbXVzIGRhc2hlZCBvdXQgdG8gbWVldCBoaW0sIGFuZCBvcmRlcmVkIGhpcyBzdGVlcnNtYW4gdG8gcmFtIHRoZSBlbmVteS4gRGFtYWdvcmFzLCBob3dldmVyLCBmZWFyaW5nIHRoZSB3ZWlnaHQgb2YgdGhlIHJveWFsIHNoaXAgYW5kIGhlciBydWdnZWQgYnJvbnplIGFybW91ciwgZGlkIG5vdCB2ZW50dXJlIHRvIGVuZ2FnZSBoZWFkIG9uLCBidXQgcHV0IHN3aWZ0bHkgYWJvdXQgYW5kIG9yZGVyZWQgaGlzIG1lbiB0byBiYWNrIHdhdGVyLCB0aHVzIHJlY2VpdmluZyBoaXMgZW5lbXkgYXN0ZXJuLCB3aGVyZSBoaXMgdmVzc2VsIHdhcyBkZXByZXNzZWQuIFRoZSBibG93IHdhcyBoYXJtbGVzcywgc2luY2UgaXQgZmVsbCB1cG9uIHRoZSBzdWJtZXJnZWQgcGFydHMgb2YgdGhlIHNoaXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHBvaW50LCBoaXMgZnJpZW5kcyBjb21pbmcgdXAsIEx1Y3VsbHVzIGdhdmUgb3JkZXJzIHRvIHR1cm4gdGhlIHNoaXAgYWJvdXQsIGFuZCwgYWZ0ZXIgcGVyZm9ybWluZyBtYW55IHByYWlzZXdvcnRoeSBmZWF0cywgcHV0IHRoZSBlbmVteSB0byBmbGlnaHQgYW5kIGdhdmUgY2xvc2UgY2hhc2UgdG8gTmVvcHRvbGVtdXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGVuY2UgaGUgam9pbmVkIFN1bGxhIGF0IHRoZSBDaGVyc29uZXN1cywgd2hlcmUgaGUgd2FzIGFib3V0IHRvIGNyb3NzIHRoZSBzdHJhaXQgaW50byBBc2lhOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjg0IEIuQy48L25vdGU+IGhlIHJlbmRlcmVkIGhpcyBwYXNzYWdlIHNhZmUsIGFuZCBhc3Npc3RlZCBpbiB0cmFuc3BvcnRpbmcgaGlzIHRyb29wcy4gQWZ0ZXIgcGVhY2UgaGFkIGJlZW4gbWFkZSwgTWl0aHJpZGF0ZXMgc2FpbGVkIGF3YXkgaW50byB0aGUgRXV4aW5lLCBhbmQgU3VsbGEgbGFpZCBhIGNvbnRyaWJ1dGlvbiBvZiB0d2VudHkgdGhvdXNhbmQgdGFsZW50cyB1cG9uIEFzaWEuIEx1Y3VsbHVzIHdhcyBjb21taXNzaW9uZWQgdG8gY29sbGVjdCB0aGlzIG1vbmV5IGFuZCByZS1jb2luIGl0LCBhbmQgdGhlIGNpdGllcyBvZiBBc2lhIGZlbHQgaXQgdG8gYmUgbm8gc2xpZ2h0IGFzc3VhZ2VtZW50IG9mIFN1bGxhJ3Mgc2V2ZXJpdHkgd2hlbiBMdWN1bGx1cyBzaG93ZWQgaGltc2VsZiBub3Qgb25seSBob25lc3QgYW5kIGp1c3QsIGJ1dCBldmVuIG1pbGQgaW4gdGhlIHBlcmZvcm1hbmNlIG9mIGEgdGFzayBzbyBvcHByZXNzaXZlIGFuZCBkaXNhZ3JlZWFibGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBNaXR5bGVuYWVhbnMgdG9vLCB3aG8gaGFkIHJldm9sdGVkIG91dHJpZ2h0LCBoZSB3aXNoZWQgdG8gYmUgcmVhc29uYWJsZSwgYW5kIHRvIHN1Ym1pdCB0byBhIG1vZGVyYXRlIHBlbmFsdHkgZm9yIGhhdmluZyBlc3BvdXNlZCB0aGUgY2F1c2Ugb2YgTWFyaXVzLiBCdXQgd2hlbiBoZSBzYXcgdGhhdCB0aGV5IHdlcmUgcG9zc2Vzc2VkIGJ5IGFuIGV2aWwgc3Bpcml0LCBoZSBzYWlsZWQgYWdhaW5zdCB0aGVtLCBjb25xdWVyZWQgdGhlbSBpbiBiYXR0bGUsIGFuZCBzaHV0IHRoZW0gdXAgd2l0aGluIHRoZWlyIHdhbGxzLiBBZnRlciBpbnN0aXR1dGluZyBhIHNpZWdlIG9mIHRoZWlyIGNpdHksIGhlIHNhaWxlZCBhd2F5IGluIG9wZW4gZGF5IHRvIEVsYWVhLCBidXQgcmV0dXJuZWQgYnkgc3RlYWx0aCwgYW5kIGxheSBxdWlldGx5IGluIGFtYnVzaCBuZWFyIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBNaXR5bGVuYWVhbnMgc2FsbGllZCBmb3J0aCBpbiBkaXNvcmRlciBhbmQgd2l0aCB0aGUgY29uZmlkZW50IGV4cGVjdGF0aW9uIG9mIHBsdW5kZXJpbmcgaGlzIGRlc2VydGVkIGNhbXAsIGhlIGZlbGwgdXBvbiB0aGVtLCB0b29rIGEgZ3JlYXQgbnVtYmVyIG9mIHRoZW0gYWxpdmUsIGFuZCBzbGV3IGZpdmUgaHVuZHJlZCBvZiB0aG9zZSB3aG8gb2ZmZXJlZCByZXNpc3RhbmNlLiBIZSBhbHNvIGNhcnJpZWQgb2ZmIHNpeCB0aG91c2FuZCBzbGF2ZXMsIGJlc2lkZXMgY291bnRsZXNzIG90aGVyIGJvb3R5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIHRoZW5jZSBoZSBqb2luZWQgU3VsbGEgYXQgdGhlIENoZXJzb25lc3VzLCB3aGVyZSBoZSB3YXMgYWJvdXQgdG8gY3Jvc3MgdGhlIHN0cmFpdCBpbnRvIEFzaWE7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj44NCBCLkMuPC9ub3RlPiBoZSByZW5kZXJlZCBoaXMgcGFzc2FnZSBzYWZlLCBhbmQgYXNzaXN0ZWQgaW4gdHJhbnNwb3J0aW5nIGhpcyB0cm9vcHMuIEFmdGVyIHBlYWNlIGhhZCBiZWVuIG1hZGUsIE1pdGhyaWRhdGVzIHNhaWxlZCBhd2F5IGludG8gdGhlIEV1eGluZSwgYW5kIFN1bGxhIGxhaWQgYSBjb250cmlidXRpb24gb2YgdHdlbnR5IHRob3VzYW5kIHRhbGVudHMgdXBvbiBBc2lhLiBMdWN1bGx1cyB3YXMgY29tbWlzc2lvbmVkIHRvIGNvbGxlY3QgdGhpcyBtb25leSBhbmQgcmUtY29pbiBpdCwgYW5kIHRoZSBjaXRpZXMgb2YgQXNpYSBmZWx0IGl0IHRvIGJlIG5vIHNsaWdodCBhc3N1YWdlbWVudCBvZiBTdWxsYSdzIHNldmVyaXR5IHdoZW4gTHVjdWxsdXMgc2hvd2VkIGhpbXNlbGYgbm90IG9ubHkgaG9uZXN0IGFuZCBqdXN0LCBidXQgZXZlbiBtaWxkIGluIHRoZSBwZXJmb3JtYW5jZSBvZiBhIHRhc2sgc28gb3BwcmVzc2l2ZSBhbmQgZGlzYWdyZWVhYmxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBNaXR5bGVuYWVhbnMgdG9vLCB3aG8gaGFkIHJldm9sdGVkIG91dHJpZ2h0LCBoZSB3aXNoZWQgdG8gYmUgcmVhc29uYWJsZSwgYW5kIHRvIHN1Ym1pdCB0byBhIG1vZGVyYXRlIHBlbmFsdHkgZm9yIGhhdmluZyBlc3BvdXNlZCB0aGUgY2F1c2Ugb2YgTWFyaXVzLiBCdXQgd2hlbiBoZSBzYXcgdGhhdCB0aGV5IHdlcmUgcG9zc2Vzc2VkIGJ5IGFuIGV2aWwgc3Bpcml0LCBoZSBzYWlsZWQgYWdhaW5zdCB0aGVtLCBjb25xdWVyZWQgdGhlbSBpbiBiYXR0bGUsIGFuZCBzaHV0IHRoZW0gdXAgd2l0aGluIHRoZWlyIHdhbGxzLiBBZnRlciBpbnN0aXR1dGluZyBhIHNpZWdlIG9mIHRoZWlyIGNpdHksIGhlIHNhaWxlZCBhd2F5IGluIG9wZW4gZGF5IHRvIEVsYWVhLCBidXQgcmV0dXJuZWQgYnkgc3RlYWx0aCwgYW5kIGxheSBxdWlldGx5IGluIGFtYnVzaCBuZWFyIHRoZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIE1pdHlsZW5hZWFucyBzYWxsaWVkIGZvcnRoIGluIGRpc29yZGVyIGFuZCB3aXRoIHRoZSBjb25maWRlbnQgZXhwZWN0YXRpb24gb2YgcGx1bmRlcmluZyBoaXMgZGVzZXJ0ZWQgY2FtcCwgaGUgZmVsbCB1cG9uIHRoZW0sIHRvb2sgYSBncmVhdCBudW1iZXIgb2YgdGhlbSBhbGl2ZSwgYW5kIHNsZXcgZml2ZSBodW5kcmVkIG9mIHRob3NlIHdobyBvZmZlcmVkIHJlc2lzdGFuY2UuIEhlIGFsc28gY2FycmllZCBvZmYgc2l4IHRob3VzYW5kIHNsYXZlcywgYmVzaWRlcyBjb3VudGxlc3Mgb3RoZXIgYm9vdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgYm91bmRsZXNzIGFuZCBtYW5pZm9sZCBldmlscyB3aGljaCBTdWxsYSBhbmQgTWFyaXVzIHdlcmUgYnJpbmdpbmcgdXBvbiB0aGUgcGVvcGxlIG9mIEl0YWx5IGF0IHRoYXQgdGltZSwgaGUgaGFkIG5vIHNoYXJlIHdoYXRldmVyLCBmb3IsIGFzIHNvbWUga2luZGx5IGZvcnR1bmUgd291bGQgaGF2ZSBpdCwgaGUgd2FzIGRldGFpbmVkIGF0IGhpcyBidXNpbmVzcyBpbiBBc2lhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjg0LTgwIEIuQy48L25vdGU+IEhvd2V2ZXIsIFN1bGxhIGFjY29yZGVkIG5vIGxlc3MgZmF2b3VyIHRvIEx1Y3VsbHVzIHRoYW4gdG8gaGlzIG90aGVyIGZyaWVuZHMuIEhpcyBtZW1vaXJzLCBhcyBJIGhhdmUgc2FpZCwgU3VsbGEgZGVkaWNhdGVkIHRvIEx1Y3VsbHVzIGluIHRva2VuIG9mIGFmZmVjdGlvbiwgYW5kIGluIGhpcyB3aWxsIGFwcG9pbnRlZCBoaW0gZ3VhcmRpYW4gb2YgaGlzIHNvbiwgdGhlcmVieSBwYXNzaW5nIFBvbXBleSBieS4gQW5kIHRoaXMgc2VlbXMgdG8gaGF2ZSBiZWVuIHRoZSBmaXJzdCBncm91bmQgZm9yIGVzdHJhbmdlbWVudCBhbmQgamVhbG91c3kgYmV0d2VlbiB0aGVzZSB0d28gbWVuOyBib3RoIHdlcmUgeW91bmcsIGFuZCBidXJuaW5nIGZvciBkaXN0aW5jdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgYm91bmRsZXNzIGFuZCBtYW5pZm9sZCBldmlscyB3aGljaCBTdWxsYSBhbmQgTWFyaXVzIHdlcmUgYnJpbmdpbmcgdXBvbiB0aGUgcGVvcGxlIG9mIEl0YWx5IGF0IHRoYXQgdGltZSwgaGUgaGFkIG5vIHNoYXJlIHdoYXRldmVyLCBmb3IsIGFzIHNvbWUga2luZGx5IGZvcnR1bmUgd291bGQgaGF2ZSBpdCwgaGUgd2FzIGRldGFpbmVkIGF0IGhpcyBidXNpbmVzcyBpbiBBc2lhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+ODQtODAgQi5DLjwvbm90ZT4gSG93ZXZlciwgU3VsbGEgYWNjb3JkZWQgbm8gbGVzcyBmYXZvdXIgdG8gTHVjdWxsdXMgdGhhbiB0byBoaXMgb3RoZXIgZnJpZW5kcy4gSGlzIG1lbW9pcnMsIGFzIEkgaGF2ZSBzYWlkLCBTdWxsYSBkZWRpY2F0ZWQgdG8gTHVjdWxsdXMgaW4gdG9rZW4gb2YgYWZmZWN0aW9uLCBhbmQgaW4gaGlzIHdpbGwgYXBwb2ludGVkIGhpbSBndWFyZGlhbiBvZiBoaXMgc29uLCB0aGVyZWJ5IHBhc3NpbmcgUG9tcGV5IGJ5LiBBbmQgdGhpcyBzZWVtcyB0byBoYXZlIGJlZW4gdGhlIGZpcnN0IGdyb3VuZCBmb3IgZXN0cmFuZ2VtZW50IGFuZCBqZWFsb3VzeSBiZXR3ZWVuIHRoZXNlIHR3byBtZW47IGJvdGggd2VyZSB5b3VuZywgYW5kIGJ1cm5pbmcgZm9yIGRpc3RpbmN0aW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNob3J0bHkgYWZ0ZXIgdGhlIGRlYXRoIG9mIFN1bGxhLCBMdWN1bGx1cyB3YXMgbWFkZSBjb25zdWwgYWxvbmcgd2l0aCBNYXJjdXMgQ290dGEsIGFib3V0IHRoZSBodW5kcmVkIGFuZCBzZXZlbnR5LXNpeHRoIE9seW1waWFkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjc0IEIuQy48L25vdGU+IE1hbnkgd2VyZSBub3cgdHJ5aW5nIHRvIHN0aXIgdXAgYW5ldyB0aGUgTWl0aHJpZGF0aWMgd2FyLCB3aGljaCBNYXJjdXMgc2FpZCBoYWQgbm90IGNvbWUgdG8gYW4gZW5kLCBidXQgbWVyZWx5IHRvIGEgcGF1c2UuIFRoZXJlZm9yZSB3aGVuIHRoZSBwcm92aW5jZSBvZiBDaXNhbHBpbmUgR2F1bCB3YXMgYWxsb3R0ZWQgdG8gTHVjdWxsdXMsIGhlIHdhcyBkaXNwbGVhc2VkLCBzaW5jZSBpdCBvZmZlcmVkIG5vIG9wcG9ydHVuaXR5IGZvciBncmVhdCBleHBsb2l0cy4gQnV0IHdoYXQgbW9zdCBvZiBhbGwgZW1iaXR0ZXJlZCBoaW0gd2FzIHRoZSByZXB1dGF0aW9uIHdoaWNoIFBvbXBleSB3YXMgd2lubmluZyBpbiBTcGFpbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SWYgdGhlIHdhciBpbiBTcGFpbiBzaG91bGQgaGFwcGVuIHRvIGNvbWUgdG8gYW4gZW5kLCBQb21wZXkgd2FzIG1vcmUgbGlrZWx5IHRoYW4gYW55b25lIGVsc2UgdG8gYmUgYXQgb25jZSBjaG9zZW4gZ2VuZXJhbCBhZ2FpbnN0IE1pdGhyaWRhdGVzLiBUaGVyZWZvcmUgd2hlbiBQb21wZXkgd3JvdGUgaG9tZSByZXF1ZXN0aW5nIG1vbmV5LCBhbmQgZGVjbGFyaW5nIHRoYXQgaWYgdGhleSBkaWQgbm90IHNlbmQgaXQsIGhlIHdvdWxkIGFiYW5kb24gU3BhaW4gYW5kIFNlcnRvcml1cyBhbmQgYnJpbmcgaGlzIGZvcmNlcyBiYWNrIHRvIEl0YWx5LCBMdWN1bGx1cyBtb3ZlZCBoZWF2ZW4gYW5kIGVhcnRoIHRvIGhhdmUgdGhlIG1vbmV5IHNlbnQsIGFuZCB0byBwcmV2ZW50IFBvbXBleSBmcm9tIGNvbWluZyBiYWNrLCBvbiBhbnkgcHJldGV4dCB3aGF0c29ldmVyLCB3aGlsZSBoZSB3YXMgY29uc3VsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBrbmV3IHRoYXQgYWxsIFJvbWUgd291bGQgYmUgaW4gUG9tcGV5J3MgaGFuZHMgaWYgaGUgd2VyZSB0aGVyZSB3aXRoIHNvIGxhcmdlIGFuIGFybXkuIEZvciB0aGUgbWFuIHdobyBhdCB0aGF0IHRpbWUgY29udHJvbGxlZCB0aGUgY291cnNlIG9mIHBvbGl0aWNhbCBhZmZhaXJzIGJ5IHZpcnR1ZSBvZiBkb2luZyBhbmQgc2F5aW5nIGV2ZXJ5dGhpbmcgdG8gY291cnQgdGhlIGZhdm91ciBvZiB0aGUgcGVvcGxlLCBDZXRoZWd1cywgaGF0ZWQgTHVjdWxsdXMsIHdobyBsb2F0aGVkIGhpcyBtYW5uZXIgb2YgbGlmZSwgZnVsbCBhcyBpdCB3YXMgb2YgZGlzZ3JhY2VmdWwgYW1vdXJzIGFuZCB3YW50b24gdHJlc3Bhc3Nlcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW5zdCB0aGlzIG1hbiBMdWN1bGx1cyB3YWdlZCBvcGVuIHdhci4gQnV0IEx1Y2l1cyBRdWludHVzLCBhbm90aGVyIHBvcHVsYXIgbGVhZGVyLCB3aG8gb3Bwb3NlZCB0aGUgaW5zdGl0dXRpb25zIG9mIFN1bGxhIGFuZCBzb3VnaHQgdG8gY29uZm91bmQgdGhlIGVzdGFibGlzaGVkIG9yZGVyIG9mIHRoaW5ncywgaGUgdHVybmVkIGZyb20gaGlzIHB1cnBvc2UgYnkgbXVjaCBwcml2YXRlIHJlbW9uc3RyYW5jZSBhbmQgcHVibGljIGFkbW9uaXRpb24sIGFuZCBhbGxheWVkIGhpcyBhbWJpdGlvbiwgdGh1cyB0cmVhdGluZyBpbiBhcyB3aXNlIGFuZCB3aG9sZXNvbWUgYSBtYW5uZXIgYXMgd2FzIHBvc3NpYmxlIHRoZSBiZWdpbm5pbmdzIG9mIGEgZ3JlYXQgZGlzdGVtcGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TaG9ydGx5IGFmdGVyIHRoZSBkZWF0aCBvZiBTdWxsYSwgTHVjdWxsdXMgd2FzIG1hZGUgY29uc3VsIGFsb25nIHdpdGggTWFyY3VzIENvdHRhLCBhYm91dCB0aGUgaHVuZHJlZCBhbmQgc2V2ZW50eS1zaXh0aCBPbHltcGlhZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjc0IEIuQy48L25vdGU+IE1hbnkgd2VyZSBub3cgdHJ5aW5nIHRvIHN0aXIgdXAgYW5ldyB0aGUgTWl0aHJpZGF0aWMgd2FyLCB3aGljaCBNYXJjdXMgc2FpZCBoYWQgbm90IGNvbWUgdG8gYW4gZW5kLCBidXQgbWVyZWx5IHRvIGEgcGF1c2UuIFRoZXJlZm9yZSB3aGVuIHRoZSBwcm92aW5jZSBvZiBDaXNhbHBpbmUgR2F1bCB3YXMgYWxsb3R0ZWQgdG8gTHVjdWxsdXMsIGhlIHdhcyBkaXNwbGVhc2VkLCBzaW5jZSBpdCBvZmZlcmVkIG5vIG9wcG9ydHVuaXR5IGZvciBncmVhdCBleHBsb2l0cy4gQnV0IHdoYXQgbW9zdCBvZiBhbGwgZW1iaXR0ZXJlZCBoaW0gd2FzIHRoZSByZXB1dGF0aW9uIHdoaWNoIFBvbXBleSB3YXMgd2lubmluZyBpbiBTcGFpbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPklmIHRoZSB3YXIgaW4gU3BhaW4gc2hvdWxkIGhhcHBlbiB0byBjb21lIHRvIGFuIGVuZCwgUG9tcGV5IHdhcyBtb3JlIGxpa2VseSB0aGFuIGFueW9uZSBlbHNlIHRvIGJlIGF0IG9uY2UgY2hvc2VuIGdlbmVyYWwgYWdhaW5zdCBNaXRocmlkYXRlcy4gVGhlcmVmb3JlIHdoZW4gUG9tcGV5IHdyb3RlIGhvbWUgcmVxdWVzdGluZyBtb25leSwgYW5kIGRlY2xhcmluZyB0aGF0IGlmIHRoZXkgZGlkIG5vdCBzZW5kIGl0LCBoZSB3b3VsZCBhYmFuZG9uIFNwYWluIGFuZCBTZXJ0b3JpdXMgYW5kIGJyaW5nIGhpcyBmb3JjZXMgYmFjayB0byBJdGFseSwgTHVjdWxsdXMgbW92ZWQgaGVhdmVuIGFuZCBlYXJ0aCB0byBoYXZlIHRoZSBtb25leSBzZW50LCBhbmQgdG8gcHJldmVudCBQb21wZXkgZnJvbSBjb21pbmcgYmFjaywgb24gYW55IHByZXRleHQgd2hhdHNvZXZlciwgd2hpbGUgaGUgd2FzIGNvbnN1bC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGtuZXcgdGhhdCBhbGwgUm9tZSB3b3VsZCBiZSBpbiBQb21wZXkncyBoYW5kcyBpZiBoZSB3ZXJlIHRoZXJlIHdpdGggc28gbGFyZ2UgYW4gYXJteS4gRm9yIHRoZSBtYW4gd2hvIGF0IHRoYXQgdGltZSBjb250cm9sbGVkIHRoZSBjb3Vyc2Ugb2YgcG9saXRpY2FsIGFmZmFpcnMgYnkgdmlydHVlIG9mIGRvaW5nIGFuZCBzYXlpbmcgZXZlcnl0aGluZyB0byBjb3VydCB0aGUgZmF2b3VyIG9mIHRoZSBwZW9wbGUsIENldGhlZ3VzLCBoYXRlZCBMdWN1bGx1cywgd2hvIGxvYXRoZWQgaGlzIG1hbm5lciBvZiBsaWZlLCBmdWxsIGFzIGl0IHdhcyBvZiBkaXNncmFjZWZ1bCBhbW91cnMgYW5kIHdhbnRvbiB0cmVzcGFzc2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluc3QgdGhpcyBtYW4gTHVjdWxsdXMgd2FnZWQgb3BlbiB3YXIuIEJ1dCBMdWNpdXMgUXVpbnR1cywgYW5vdGhlciBwb3B1bGFyIGxlYWRlciwgd2hvIG9wcG9zZWQgdGhlIGluc3RpdHV0aW9ucyBvZiBTdWxsYSBhbmQgc291Z2h0IHRvIGNvbmZvdW5kIHRoZSBlc3RhYmxpc2hlZCBvcmRlciBvZiB0aGluZ3MsIGhlIHR1cm5lZCBmcm9tIGhpcyBwdXJwb3NlIGJ5IG11Y2ggcHJpdmF0ZSByZW1vbnN0cmFuY2UgYW5kIHB1YmxpYyBhZG1vbml0aW9uLCBhbmQgYWxsYXllZCBoaXMgYW1iaXRpb24sIHRodXMgdHJlYXRpbmcgaW4gYXMgd2lzZSBhbmQgd2hvbGVzb21lIGEgbWFubmVyIGFzIHdhcyBwb3NzaWJsZSB0aGUgYmVnaW5uaW5ncyBvZiBhIGdyZWF0IGRpc3RlbXBlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUgdGhlcmUgY2FtZSB0aWRpbmdzIG9mIHRoZSBkZWF0aCBvZiBPY3Rhdml1cywgdGhlIGdvdmVybm9yIG9mIENpbGljaWEuIFRoZXJlIHdlcmUgbWFueSBlYWdlciBhcHBsaWNhbnRzIGZvciB0aGUgcHJvdmluY2UsIGFuZCB0aGV5IHBhaWQgY291cnQgdG8gQ2V0aGVndXMgYXMgdGhlIG1hbiBiZXN0IGFibGUgdG8gZnVydGhlciB0aGVpciBkZXNpZ25zLiBPZiBDaWxpY2lhIGl0c2VsZiBMdWN1bGx1cyBtYWRlIGxpdHRsZSBhY2NvdW50LCBidXQgaW4gdGhlIGJlbGllZiB0aGF0LCBpZiBoZSBzaG91bGQgZ2V0IHRoaXMgcHJvdmluY2UsIHdoaWNoIHdhcyBuZWFyIENhcHBhZG9jaWEsIG5vIG9uZSBlbHNlIHdvdWxkIGJlIHNlbnQgdG8gY29uZHVjdCB0aGUgd2FyIGFnYWluc3QgTWl0aHJpZGF0ZXMsIGhlIHN0cmFpbmVkIGV2ZXJ5IG5lcnZlIHRvIGtlZXAgdGhlIHByb3ZpbmNlIGZyb20gYmVpbmcgYXNzaWduZWQgdG8gYW5vdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGZpbmFsbHksIGNvbnRyYXJ5IHRvIGhpcyBuYXR1cmFsIGJlbnQsIGhlIHdhcyBkcml2ZW4gYnkgdGhlIG5lY2Vzc2l0aWVzIG9mIHRoZSBjYXNlIHRvIGFkb3B0IGEgY291cnNlIHdoaWNoIHdhcyBuZWl0aGVyIGRpZ25pZmllZCBub3IgcHJhaXNld29ydGh5LCBpdCBpcyB0cnVlLCBidXQgY29uZHVjaXZlIHRvIGhpcyBlbmQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUgdGhlcmUgY2FtZSB0aWRpbmdzIG9mIHRoZSBkZWF0aCBvZiBPY3Rhdml1cywgdGhlIGdvdmVybm9yIG9mIENpbGljaWEuIFRoZXJlIHdlcmUgbWFueSBlYWdlciBhcHBsaWNhbnRzIGZvciB0aGUgcHJvdmluY2UsIGFuZCB0aGV5IHBhaWQgY291cnQgdG8gQ2V0aGVndXMgYXMgdGhlIG1hbiBiZXN0IGFibGUgdG8gZnVydGhlciB0aGVpciBkZXNpZ25zLiBPZiBDaWxpY2lhIGl0c2VsZiBMdWN1bGx1cyBtYWRlIGxpdHRsZSBhY2NvdW50LCBidXQgaW4gdGhlIGJlbGllZiB0aGF0LCBpZiBoZSBzaG91bGQgZ2V0IHRoaXMgcHJvdmluY2UsIHdoaWNoIHdhcyBuZWFyIENhcHBhZG9jaWEsIG5vIG9uZSBlbHNlIHdvdWxkIGJlIHNlbnQgdG8gY29uZHVjdCB0aGUgd2FyIGFnYWluc3QgTWl0aHJpZGF0ZXMsIGhlIHN0cmFpbmVkIGV2ZXJ5IG5lcnZlIHRvIGtlZXAgdGhlIHByb3ZpbmNlIGZyb20gYmVpbmcgYXNzaWduZWQgdG8gYW5vdGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCBjb250cmFyeSB0byBoaXMgbmF0dXJhbCBiZW50LCBoZSB3YXMgZHJpdmVuIGJ5IHRoZSBuZWNlc3NpdGllcyBvZiB0aGUgY2FzZSB0byBhZG9wdCBhIGNvdXJzZSB3aGljaCB3YXMgbmVpdGhlciBkaWduaWZpZWQgbm9yIHByYWlzZXdvcnRoeSwgaXQgaXMgdHJ1ZSwgYnV0IGNvbmR1Y2l2ZSB0byBoaXMgZW5kLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIHdhcyBhIGNlcnRhaW4gd29tYW4gdGhlbiBpbiBSb21lLCBQcmFlY2lhIGJ5IG5hbWUsIHdob3NlIGZhbWUgZm9yIGJlYXV0eSBhbmQgd2l0IGZpbGxlZCB0aGUgY2l0eS4gSW4gb3RoZXIgcmVzcGVjdHMgc2hlIHdhcyBubyB3aGl0IGJldHRlciB0aGFuIGFuIG9yZGluYXJ5IGNvdXJ0ZXNhbiwgYnV0IHNoZSB1c2VkIGhlciBhc3NvY2lhdGVzIGFuZCBjb21wYW5pb25zIHRvIGZ1cnRoZXIgdGhlIHBvbGl0aWNhbCBhbWJpdGlvbnMgb2YgaGVyIGZyaWVuZHMsIGFuZCBzbyBhZGRlZCB0byBoZXIgb3RoZXIgY2hhcm1zIHRoZSByZXB1dGF0aW9uIG9mIGJlaW5nIGEgdHJ1ZSBjb21yYWRlLCBhbmQgb25lIHdobyBjb3VsZCBicmluZyB0aGluZ3MgdG8gcGFzcy4gU2hlIHRodXMgYWNxdWlyZWQgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBDZXRoZWd1cyBhbHNvLCB0aGVuIGF0IHRoZSB6ZW5pdGggb2YgaGlzIGZhbWUgYW5kIGluIGNvbnRyb2wgb2YgdGhlIGNpdHksIGpvaW5lZCBoZXIgdHJhaW4gYW5kIGJlY2FtZSBoZXIgbG92ZXIsIHBvbGl0aWNhbCBwb3dlciBwYXNzZWQgZW50aXJlbHkgaW50byBoZXIgaGFuZHMuIE5vIHB1YmxpYyBtZWFzdXJlIHBhc3NlZCB1bmxlc3MgQ2V0aGVndXMgZmF2b3VyZWQgaXQsIGFuZCBDZXRoZWd1cyBkaWQgbm90aGluZyBleGNlcHQgd2l0aCBQcmFlY2lhJ3MgYXBwcm92YWwuIFRoaXMgd29tYW4sIHRoZW4sIEx1Y3VsbHVzIHdvbiBvdmVyIGJ5IGdpZnRzIGFuZCBmbGF0dGVyaWVzLCBhbmQgaXQgd2FzIGRvdWJ0bGVzcyBhIGdyZWF0IGJvb24gZm9yIGEgd29tYW4gc28gZm9yd2FyZCBhbmQgb3N0ZW50YXRpb3VzIHRvIGJlIHNlZW4gc2hhcmluZyB0aGUgYW1iaXRpb25zIG9mIEx1Y3VsbHVzLiBTdHJhaWdodHdheSBoZSBoYWQgQ2V0aGVndXMgc2luZ2luZyBoaXMgcHJhaXNlcyBhbmQgc3VpbmcgZm9yIENpbGljaWEgaW4gaGlzIGJlaGFsZi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIHNvb24gYXMgaGUgaGFkIG9idGFpbmVkIHRoaXMgcHJvdmluY2UsIHRoZXJlIHdhcyBubyBmdXJ0aGVyIG5lZWQgb2YgaGlzIHNvbGljaXRpbmcgdGhlIGFpZCBvZiBQcmFlY2lhLCBvciBvZiBDZXRoZWd1cywgZm9yIHRoYXQgbWF0dGVyLCBidXQgYWxsIHdlcmUgdW5hbmltb3VzIGFuZCBwcm9tcHQgaW4gcHV0dGluZyBpbnRvIGhpcyBoYW5kcyB0aGUgTWl0aHJpZGF0aWMgd2FyLCBhc3N1cmVkIHRoYXQgbm8gb25lIGVsc2UgY291bGQgYmV0dGVyIGJyaW5nIGl0IHRvIGEgdHJpdW1waGFudCBjbG9zZS4gUG9tcGV5IHdhcyBzdGlsbCBlbmdhZ2VkIGluIGhpcyB3YXIgd2l0aCBTZXJ0b3JpdXMsIE1ldGVsbHVzIGhhZCBub3cgcmV0aXJlZCBmcm9tIGFjdGl2ZSBzZXJ2aWNlIGJ5IHJlYXNvbiBvZiBoaXMgYWdlLCBhbmQgdGhlc2Ugd2VyZSB0aGUgb25seSBtZW4gd2hvIGNvdWxkIGJlIHJlZ2FyZGVkIGFzIHJpdmFscyBvZiBMdWN1bGx1cyBpbiBhbnkgZGlzcHV0ZSBhYm91dCB0aGlzIGNvbW1hbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNvdHRhLCBob3dldmVyLCBoaXMgY29sbGVhZ3VlIGluIHRoZSBjb25zdWxzaGlwLCBhZnRlciBmZXJ2ZW50IGVudHJlYXRpZXMgdG8gdGhlIFNlbmF0ZSwgd2FzIHNlbnQgd2l0aCBzb21lIHNoaXBzIHRvIGd1YXJkIHRoZSBQcm9wb250aXMsIGFuZCB0byBwcm90ZWN0IEJpdGh5bmlhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIENldGhlZ3VzIGFsc28sIHRoZW4gYXQgdGhlIHplbml0aCBvZiBoaXMgZmFtZSBhbmQgaW4gY29udHJvbCBvZiB0aGUgY2l0eSwgam9pbmVkIGhlciB0cmFpbiBhbmQgYmVjYW1lIGhlciBsb3ZlciwgcG9saXRpY2FsIHBvd2VyIHBhc3NlZCBlbnRpcmVseSBpbnRvIGhlciBoYW5kcy4gTm8gcHVibGljIG1lYXN1cmUgcGFzc2VkIHVubGVzcyBDZXRoZWd1cyBmYXZvdXJlZCBpdCwgYW5kIENldGhlZ3VzIGRpZCBub3RoaW5nIGV4Y2VwdCB3aXRoIFByYWVjaWEncyBhcHByb3ZhbC4gVGhpcyB3b21hbiwgdGhlbiwgTHVjdWxsdXMgd29uIG92ZXIgYnkgZ2lmdHMgYW5kIGZsYXR0ZXJpZXMsIGFuZCBpdCB3YXMgZG91YnRsZXNzIGEgZ3JlYXQgYm9vbiBmb3IgYSB3b21hbiBzbyBmb3J3YXJkIGFuZCBvc3RlbnRhdGlvdXMgdG8gYmUgc2VlbiBzaGFyaW5nIHRoZSBhbWJpdGlvbnMgb2YgTHVjdWxsdXMuIFN0cmFpZ2h0d2F5IGhlIGhhZCBDZXRoZWd1cyBzaW5naW5nIGhpcyBwcmFpc2VzIGFuZCBzdWluZyBmb3IgQ2lsaWNpYSBpbiBoaXMgYmVoYWxmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBzb29uIGFzIGhlIGhhZCBvYnRhaW5lZCB0aGlzIHByb3ZpbmNlLCB0aGVyZSB3YXMgbm8gZnVydGhlciBuZWVkIG9mIGhpcyBzb2xpY2l0aW5nIHRoZSBhaWQgb2YgUHJhZWNpYSwgb3Igb2YgQ2V0aGVndXMsIGZvciB0aGF0IG1hdHRlciwgYnV0IGFsbCB3ZXJlIHVuYW5pbW91cyBhbmQgcHJvbXB0IGluIHB1dHRpbmcgaW50byBoaXMgaGFuZHMgdGhlIE1pdGhyaWRhdGljIHdhciwgYXNzdXJlZCB0aGF0IG5vIG9uZSBlbHNlIGNvdWxkIGJldHRlciBicmluZyBpdCB0byBhIHRyaXVtcGhhbnQgY2xvc2UuIFBvbXBleSB3YXMgc3RpbGwgZW5nYWdlZCBpbiBoaXMgd2FyIHdpdGggU2VydG9yaXVzLCBNZXRlbGx1cyBoYWQgbm93IHJldGlyZWQgZnJvbSBhY3RpdmUgc2VydmljZSBieSByZWFzb24gb2YgaGlzIGFnZSwgYW5kIHRoZXNlIHdlcmUgdGhlIG9ubHkgbWVuIHdobyBjb3VsZCBiZSByZWdhcmRlZCBhcyByaXZhbHMgb2YgTHVjdWxsdXMgaW4gYW55IGRpc3B1dGUgYWJvdXQgdGhpcyBjb21tYW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNvdHRhLCBob3dldmVyLCBoaXMgY29sbGVhZ3VlIGluIHRoZSBjb25zdWxzaGlwLCBhZnRlciBmZXJ2ZW50IGVudHJlYXRpZXMgdG8gdGhlIFNlbmF0ZSwgd2FzIHNlbnQgd2l0aCBzb21lIHNoaXBzIHRvIGd1YXJkIHRoZSBQcm9wb250aXMsIGFuZCB0byBwcm90ZWN0IEJpdGh5bmlhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldpdGggYSBsZWdpb24gd2hpY2ggaGUgaGFkIHJhaXNlZCBoaW1zZWxmIGluIEl0YWx5LCBMdWN1bGx1cyBjcm9zc2VkIGludG8gQXNpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj43NCBCLkMuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ltLiAxLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2ltb248L3RpdGxlPiwgaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHRoZXJlIGFzc3VtZWQgY29tbWFuZCBvZiB0aGUgcmVzdCBvZiB0aGUgUm9tYW4gZm9yY2VzLiBBbGwgdGhlc2UgaGFkIGxvbmcgYmVlbiBzcG9pbGVkIGJ5IGhhYml0cyBvZiBsdXh1cnkgYW5kIGdyZWVkLCBhbmQgdGhlIEZpbWJyaWFucywgYXMgdGhleSB3ZXJlIGNhbGxlZCwgaGFkIGJlY29tZSB1bm1hbmFnZWFibGUsIHRocm91Z2ggbG9uZyBsYWNrIG9mIGRpc2NpcGxpbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdlcmUgdGhlIG1lbiB3aG8sIGluIGNvbGx1c2lvbiB3aXRoIEZpbWJyaXVzLCBoYWQgc2xhaW4gRmxhY2N1cywgdGhlaXIgY29uc3VsIGFuZCBnZW5lcmFsLCBhbmQgaGFkIGRlbGl2ZXJlZCBGaW1icml1cyBoaW1zZWxmIG92ZXIgdG8gU3VsbGEuIFRoZXkgd2VyZSBzZWxmLXdpbGxlZCBhbmQgbGF3bGVzcywgYnV0IGdvb2QgZmlnaHRlcnMsIGhhcmR5LCBhbmQgZXhwZXJpZW5jZWQgaW4gd2FyLiBIb3dldmVyLCBpbiBhIHNob3J0IHRpbWUgTHVjdWxsdXMgcHJ1bmVkIG9mZiB0aGVpciBpbnNvbGVudCBib2xkbmVzcywgYW5kIHJlZm9ybWVkIHRoZSByZXN0LiBUaGVuIGZvciB0aGUgZmlyc3QgdGltZSwgYXMgaXQgd291bGQgc2VlbSwgdGhleSBtYWRlIHRoZSBhY3F1YWludGFuY2Ugb2YgYSBnZW51aW5lIGNvbW1hbmRlciBhbmQgbGVhZGVyLCB3aGVyZWFzIGJlZm9yZSB0aGlzIHRoZXkgaGFkIGFsd2F5cyBiZWVuIGNham9sZWQgaW50byBkb2luZyB0aGVpciBkdXR5LCBsaWtlIGNyb3dkcyBhdCB0aGUgaHVzdGluZ3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIGEgbGVnaW9uIHdoaWNoIGhlIGhhZCByYWlzZWQgaGltc2VsZiBpbiBJdGFseSwgTHVjdWxsdXMgY3Jvc3NlZCBpbnRvIEFzaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj43NCBCLkMuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaW0uIDEuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpbW9uPC90aXRsZT4sIGkuIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB0aGVyZSBhc3N1bWVkIGNvbW1hbmQgb2YgdGhlIHJlc3Qgb2YgdGhlIFJvbWFuIGZvcmNlcy4gQWxsIHRoZXNlIGhhZCBsb25nIGJlZW4gc3BvaWxlZCBieSBoYWJpdHMgb2YgbHV4dXJ5IGFuZCBncmVlZCwgYW5kIHRoZSBGaW1icmlhbnMsIGFzIHRoZXkgd2VyZSBjYWxsZWQsIGhhZCBiZWNvbWUgdW5tYW5hZ2VhYmxlLCB0aHJvdWdoIGxvbmcgbGFjayBvZiBkaXNjaXBsaW5lLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpbS4gMS41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ltb248L3RpdGxlPiwgaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpbW9uPC90aXRsZT4sIGkuIDUuPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdlcmUgdGhlIG1lbiB3aG8sIGluIGNvbGx1c2lvbiB3aXRoIEZpbWJyaXVzLCBoYWQgc2xhaW4gRmxhY2N1cywgdGhlaXIgY29uc3VsIGFuZCBnZW5lcmFsLCBhbmQgaGFkIGRlbGl2ZXJlZCBGaW1icml1cyBoaW1zZWxmIG92ZXIgdG8gU3VsbGEuIFRoZXkgd2VyZSBzZWxmLXdpbGxlZCBhbmQgbGF3bGVzcywgYnV0IGdvb2QgZmlnaHRlcnMsIGhhcmR5LCBhbmQgZXhwZXJpZW5jZWQgaW4gd2FyLiBIb3dldmVyLCBpbiBhIHNob3J0IHRpbWUgTHVjdWxsdXMgcHJ1bmVkIG9mZiB0aGVpciBpbnNvbGVudCBib2xkbmVzcywgYW5kIHJlZm9ybWVkIHRoZSByZXN0LiBUaGVuIGZvciB0aGUgZmlyc3QgdGltZSwgYXMgaXQgd291bGQgc2VlbSwgdGhleSBtYWRlIHRoZSBhY3F1YWludGFuY2Ugb2YgYSBnZW51aW5lIGNvbW1hbmRlciBhbmQgbGVhZGVyLCB3aGVyZWFzIGJlZm9yZSB0aGlzIHRoZXkgaGFkIGFsd2F5cyBiZWVuIGNham9sZWQgaW50byBkb2luZyB0aGVpciBkdXR5LCBsaWtlIGNyb3dkcyBhdCB0aGUgaHVzdGluZ3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBlbmVteSdzIHNpZGUsIG1hdHRlcnMgc3Rvb2QgYXMgZm9sbG93cy4gTWl0aHJpZGF0ZXMsIGJvYXN0ZnVsIGFuZCBwb21wb3VzIGF0IHRoZSBvdXRzZXQsIGxpa2UgbW9zdCBvZiB0aGUgU29waGlzdHMsIGhhZCBmaXJzdCBvcHBvc2VkIHRoZSBSb21hbnMgd2l0aCBmb3JjZXMgd2hpY2ggd2VyZSByZWFsbHkgdW5zdWJzdGFudGlhbCwgdGhvdWdoIGJyaWxsaWFudCBhbmQgb3N0ZW50YXRpb3VzIHRvIGxvb2sgdXBvbi4gV2l0aCB0aGVzZSBoZSBoYWQgbWFkZSBhIHJpZGljdWxvdXMgZmlhc2NvIGFuZCBsZWFybmVkIGEgc2FsdXRhcnkgbGVzc29uLiBXaGVuIHRoZXJlZm9yZSwgaGUgdGhvdWdodCB0byBnbyB0byB3YXIgdGhlIHNlY29uZCB0aW1lLCBoZSBvcmdhbml6ZWQgaGlzIGZvcmNlcyBpbnRvIGEgZ2VudWluZWx5IGVmZmVjdGl2ZSBhcm1hbWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGUgZGlkIGF3YXkgd2l0aCBCYXJiYXJvdXMgaG9yZGVzIGZyb20gZXZlcnkgY2xpbWUsIGFuZCBhbGwgdGhlaXIgZGlzY29yZGFudCBhbmQgdGhyZWF0ZW5pbmcgY3JpZXM7IGhlIHByb3ZpZGVkIG1vcmUgYXJtb3VyIGlubGFpZCB3aXRoIGdvbGQgYW5kIHNldCB3aXRoIHByZWNpb3VzIHN0b25lcywgZm9yIGhlIHNhdyB0aGF0IHRoZXNlIG1hZGUgcmljaCBib290eSBmb3IgdGhlIHZpY3RvcnMsIGJ1dCBnYXZlIG5vIHN0cmVuZ3RoIHdoYXRldmVyIHRvIHRoZWlyIHdlYXJlcnM7IGluc3RlYWQsIGhlIGhhZCBzd29yZHMgZm9yZ2VkIGluIHRoZSBSb21hbiBmYXNoaW9uLCBhbmQgaGVhdnkgc2hpZWxkcyB3ZWxkZWQ7IGhlIGNvbGxlY3RlZCBob3JzZXMgdGhhdCB3ZXJlIHdlbGwgdHJhaW5lZCByYXRoZXIgdGhhbiByaWNobHkgY2FwYXJpc29uZWQsIGFuZCBhIGh1bmRyZWQgYW5kIHR3ZW50eSB0aG91c2FuZCBmb290bWVuIGRyaWxsZWQgaW4gdGhlIFJvbWFuIHBoYWxhbnggZm9ybWF0aW9uLCBhbmQgc2l4dGVlbiB0aG91c2FuZCBob3JzZW1lbiwgbm90IGNvdW50aW5nIHRoZSBzY3l0aGUtYmVhcmluZywgZm91ci1ob3JzZSBjaGFyaW90cywgd2hpY2ggd2VyZSBhIGh1bmRyZWQgaW4gbnVtYmVyOiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgZnVydGhlciwgaGUgcHV0IGluIHJlYWRpbmVzcyBzaGlwcyB3aGljaCB3ZXJlIG5vdCB0cmlja2VkIG91dCB3aXRoIGdpbGRlZCBjYW5vcGllcywgb3IgYmF0aHMgZm9yIGNvbmN1YmluZXMsIGFuZCBsdXh1cmlvdXMgYXBhcnRtZW50cyBmb3Igd29tZW4sIGJ1dCB3aGljaCB3ZXJlIHJhdGhlciBsb2FkZWQgZG93biB3aXRoIGFybW91ciBhbmQgbWlzc2lsZXMgYW5kIG11bml0aW9ucyBvZiB3YXIuIFRoZW4gaGUgYnVyc3QgaW50byBCaXRoeW5pYSwgYW5kIG5vdCBvbmx5IGRpZCB0aGUgY2l0aWVzIHRoZXJlIHJlY2VpdmUgaGltIGFnYWluIHdpdGggZ2xhZG5lc3MsIGJ1dCBhbGwgQXNpYSBzdWZmZXJlZCBhIHJlbGFwc2UgaW50byBpdHMgZm9ybWVyIGRpc3RlbXBlcmVkIGNvbmRpdGlvbiwgYWZmbGljdGVkLCBhcyBpdCB3YXMsIHBhc3QgYmVhcmluZyBieSBSb21hbiBtb25leS1sZW5kZXJzIGFuZCB0YXgtZ2F0aGVyZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSB3ZXJlIGFmdGVyd2FyZHMgZHJpdmVuIG9mZiBieSBMdWN1bGx1cyzigJRoYXJwaWVzIHRoYXQgdGhleSB3ZXJlLCBzbmF0Y2hpbmcgdGhlIHBlb3BsZSdzIGZvb2Q7IGJ1dCB0aGVuIGhlIG1lcmVseSB0cmllZCwgYnkgYWRtb25pc2hpbmcgdGhlbSwgdG8gbWFrZSB0aGVtIG1vcmUgbW9kZXJhdGUgaW4gdGhlaXIgZGVtYW5kcywgYW5kIGxhYm91cmVkIHRvIHN0b3AgdGhlIHVwcmlzaW5ncyBvZiB0aGUgdG93bnMsIGhhcmRseSBvbmUgb2Ygd2hpY2ggd2FzIGluIGEgcXVpZXQgc3RhdGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBlbmVteSdzIHNpZGUsIG1hdHRlcnMgc3Rvb2QgYXMgZm9sbG93cy4gTWl0aHJpZGF0ZXMsIGJvYXN0ZnVsIGFuZCBwb21wb3VzIGF0IHRoZSBvdXRzZXQsIGxpa2UgbW9zdCBvZiB0aGUgU29waGlzdHMsIGhhZCBmaXJzdCBvcHBvc2VkIHRoZSBSb21hbnMgd2l0aCBmb3JjZXMgd2hpY2ggd2VyZSByZWFsbHkgdW5zdWJzdGFudGlhbCwgdGhvdWdoIGJyaWxsaWFudCBhbmQgb3N0ZW50YXRpb3VzIHRvIGxvb2sgdXBvbi4gV2l0aCB0aGVzZSBoZSBoYWQgbWFkZSBhIHJpZGljdWxvdXMgZmlhc2NvIGFuZCBsZWFybmVkIGEgc2FsdXRhcnkgbGVzc29uLiBXaGVuIHRoZXJlZm9yZSwgaGUgdGhvdWdodCB0byBnbyB0byB3YXIgdGhlIHNlY29uZCB0aW1lLCBoZSBvcmdhbml6ZWQgaGlzIGZvcmNlcyBpbnRvIGEgZ2VudWluZWx5IGVmZmVjdGl2ZSBhcm1hbWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGRpZCBhd2F5IHdpdGggQmFyYmFyb3VzIGhvcmRlcyBmcm9tIGV2ZXJ5IGNsaW1lLCBhbmQgYWxsIHRoZWlyIGRpc2NvcmRhbnQgYW5kIHRocmVhdGVuaW5nIGNyaWVzOyBoZSBwcm92aWRlZCBtb3JlIGFybW91ciBpbmxhaWQgd2l0aCBnb2xkIGFuZCBzZXQgd2l0aCBwcmVjaW91cyBzdG9uZXMsIGZvciBoZSBzYXcgdGhhdCB0aGVzZSBtYWRlIHJpY2ggYm9vdHkgZm9yIHRoZSB2aWN0b3JzLCBidXQgZ2F2ZSBubyBzdHJlbmd0aCB3aGF0ZXZlciB0byB0aGVpciB3ZWFyZXJzOyBpbnN0ZWFkLCBoZSBoYWQgc3dvcmRzIGZvcmdlZCBpbiB0aGUgUm9tYW4gZmFzaGlvbiwgYW5kIGhlYXZ5IHNoaWVsZHMgd2VsZGVkOyBoZSBjb2xsZWN0ZWQgaG9yc2VzIHRoYXQgd2VyZSB3ZWxsIHRyYWluZWQgcmF0aGVyIHRoYW4gcmljaGx5IGNhcGFyaXNvbmVkLCBhbmQgYSBodW5kcmVkIGFuZCB0d2VudHkgdGhvdXNhbmQgZm9vdG1lbiBkcmlsbGVkIGluIHRoZSBSb21hbiBwaGFsYW54IGZvcm1hdGlvbiwgYW5kIHNpeHRlZW4gdGhvdXNhbmQgaG9yc2VtZW4sIG5vdCBjb3VudGluZyB0aGUgc2N5dGhlLWJlYXJpbmcsIGZvdXItaG9yc2UgY2hhcmlvdHMsIHdoaWNoIHdlcmUgYSBodW5kcmVkIGluIG51bWJlcjogCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBmdXJ0aGVyLCBoZSBwdXQgaW4gcmVhZGluZXNzIHNoaXBzIHdoaWNoIHdlcmUgbm90IHRyaWNrZWQgb3V0IHdpdGggZ2lsZGVkIGNhbm9waWVzLCBvciBiYXRocyBmb3IgY29uY3ViaW5lcywgYW5kIGx1eHVyaW91cyBhcGFydG1lbnRzIGZvciB3b21lbiwgYnV0IHdoaWNoIHdlcmUgcmF0aGVyIGxvYWRlZCBkb3duIHdpdGggYXJtb3VyIGFuZCBtaXNzaWxlcyBhbmQgbXVuaXRpb25zIG9mIHdhci4gVGhlbiBoZSBidXJzdCBpbnRvIEJpdGh5bmlhLCBhbmQgbm90IG9ubHkgZGlkIHRoZSBjaXRpZXMgdGhlcmUgcmVjZWl2ZSBoaW0gYWdhaW4gd2l0aCBnbGFkbmVzcywgYnV0IGFsbCBBc2lhIHN1ZmZlcmVkIGEgcmVsYXBzZSBpbnRvIGl0cyBmb3JtZXIgZGlzdGVtcGVyZWQgY29uZGl0aW9uLCBhZmZsaWN0ZWQsIGFzIGl0IHdhcywgcGFzdCBiZWFyaW5nIGJ5IFJvbWFuIG1vbmV5LWxlbmRlcnMgYW5kIHRheC1nYXRoZXJlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdlcmUgYWZ0ZXJ3YXJkcyBkcml2ZW4gb2ZmIGJ5IEx1Y3VsbHVzLOKAlGhhcnBpZXMgdGhhdCB0aGV5IHdlcmUsIHNuYXRjaGluZyB0aGUgcGVvcGxlJ3MgZm9vZDsgYnV0IHRoZW4gaGUgbWVyZWx5IHRyaWVkLCBieSBhZG1vbmlzaGluZyB0aGVtLCB0byBtYWtlIHRoZW0gbW9yZSBtb2RlcmF0ZSBpbiB0aGVpciBkZW1hbmRzLCBhbmQgbGFib3VyZWQgdG8gc3RvcCB0aGUgdXByaXNpbmdzIG9mIHRoZSB0b3ducywgaGFyZGx5IG9uZSBvZiB3aGljaCB3YXMgaW4gYSBxdWlldCBzdGF0ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBMdWN1bGx1cyB3YXMgdGh1cyBvY2N1cGllZCwgQ290dGEsIHRoaW5raW5nIHRoYXQgaGlzIG93biBnb2xkZW4gb3Bwb3J0dW5pdHkgaGFkIGNvbWUsIHdhcyBnZXR0aW5nIHJlYWR5IHRvIGdpdmUgYmF0dGxlIHRvIE1pdGhyaWRhdGVzLiBBbmQgd2hlbiB0aWRpbmdzIGNhbWUgZnJvbSBtYW55IHNvdXJjZXMgdGhhdCBMdWN1bGx1cyB3YXMgY29taW5nIHVwLCBhbmQgd2FzIGFscmVhZHkgZW5jYW1wZWQgaW4gUGhyeWdpYSwgdGhpbmtpbmcgdGhhdCBhIHRyaXVtcGggd2FzIGFsbCBidXQgaW4gaGlzIGdyYXNwLCBhbmQgZGVzaXJpbmcgdGhhdCBMdWN1bGx1cyBoYXZlIG5vIHNoYXJlIGluIGl0LCBoZSBoYXN0ZW5lZCB0byBlbmdhZ2UgdGhlIGtpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSB3YXMgZGVmZWF0ZWQgYnkgc2VhIGFuZCBsYW5kLCBsb3N0IHNpeHR5IHZlc3NlbHMsIGNyZXdzIGFuZCBhbGwsIGFuZCBmb3VyIHRob3VzYW5kIGZvb3Qtc29sZGllcnMsIHdoaWxlIGhlIGhpbXNlbGYgd2FzIHNodXQgdXAgaW4gQ2hhbGNlZG9uIGFuZCBiZXNpZWdlZCB0aGVyZSwgbG9va2luZyBmb3IgcmVsaWVmIGF0IHRoZSBoYW5kcyBvZiBMdWN1bGx1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBMdWN1bGx1cyB3YXMgdGh1cyBvY2N1cGllZCwgQ290dGEsIHRoaW5raW5nIHRoYXQgaGlzIG93biBnb2xkZW4gb3Bwb3J0dW5pdHkgaGFkIGNvbWUsIHdhcyBnZXR0aW5nIHJlYWR5IHRvIGdpdmUgYmF0dGxlIHRvIE1pdGhyaWRhdGVzLiBBbmQgd2hlbiB0aWRpbmdzIGNhbWUgZnJvbSBtYW55IHNvdXJjZXMgdGhhdCBMdWN1bGx1cyB3YXMgY29taW5nIHVwLCBhbmQgd2FzIGFscmVhZHkgZW5jYW1wZWQgaW4gUGhyeWdpYSwgdGhpbmtpbmcgdGhhdCBhIHRyaXVtcGggd2FzIGFsbCBidXQgaW4gaGlzIGdyYXNwLCBhbmQgZGVzaXJpbmcgdGhhdCBMdWN1bGx1cyBoYXZlIG5vIHNoYXJlIGluIGl0LCBoZSBoYXN0ZW5lZCB0byBlbmdhZ2UgdGhlIGtpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSB3YXMgZGVmZWF0ZWQgYnkgc2VhIGFuZCBsYW5kLCBsb3N0IHNpeHR5IHZlc3NlbHMsIGNyZXdzIGFuZCBhbGwsIGFuZCBmb3VyIHRob3VzYW5kIGZvb3Qtc29sZGllcnMsIHdoaWxlIGhlIGhpbXNlbGYgd2FzIHNodXQgdXAgaW4gQ2hhbGNlZG9uIGFuZCBiZXNpZWdlZCB0aGVyZSwgbG9va2luZyBmb3IgcmVsaWVmIGF0IHRoZSBoYW5kcyBvZiBMdWN1bGx1cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoZXJlIHdlcmUgc29tZSB3aG8gdXJnZWQgTHVjdWxsdXMgdG8gaWdub3JlIENvdHRhIGFuZCBtYXJjaCBvbiBpbnRvIHRoZSBraW5nZG9tIG9mIE1pdGhyaWRhdGVzLCBhc3N1cmVkIG9mIGNhcHR1cmluZyBpdCBpbiBpdHMgZGVmZW5jZWxlc3MgY29uZGl0aW9uLiBUaGlzIHdhcyB0aGUgcmVhc29uaW5nIG9mIHRoZSBzb2xkaWVycyBlc3BlY2lhbGx5LCB3aG8gd2VyZSBpbmRpZ25hbnQgdGhhdCBDb3R0YSwgYnkgaGlzIGV2aWwgY291bnNlbHMsIHNob3VsZCBub3Qgb25seSBiZSB0aGUgdW5kb2luZyBvZiBoaW1zZWxmIGFuZCBoaXMgYXJteSwgYnV0IGFsc28gYmxvY2sgdGhlaXIgb3duIHdheSB0byBhIHZpY3Rvcnkgd2hpY2ggdGhleSBjb3VsZCBoYXZlIHdvbiB3aXRob3V0IGEgYmF0dGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTHVjdWxsdXMsIGluIGEgaGFyYW5ndWUgd2hpY2ggaGUgbWFkZSB0aGVtLCBzYWlkIHRoYXQgaGUgd291bGQgcmF0aGVyIHNhdmUgb25lIFJvbWFuIGZyb20gdGhlIGVuZW15IHRoYW4gdGFrZSBhbGwgdGhhdCBlbmVteSdzIHBvc3Nlc3Npb25zLiBBbmQgd2hlbiBBcmNoZWxhw7xzLCB3aG8gaGFkIGhlbGQgY29tbWFuZCBmb3IgTWl0aHJpZGF0ZXMgaW4gQm9lb3RpYSwgYW5kIHRoZW4gaGFkIGFiYW5kb25lZCBoaXMgY2F1c2UsIGFuZCB3YXMgbm93IGluIHRoZSBSb21hbiBhcm15LCBzdG91dGx5IG1haW50YWluZWQgdGhhdCBpZiBMdWN1bGx1cyB3ZXJlIG9uY2Ugc2VlbiBpbiBQb250dXMsIGhlIHdvdWxkIG1hc3RlciBldmVyeXRoaW5nIGF0IG9uY2UsIEx1Y3VsbHVzIGRlY2xhcmVkIHRoYXQgaGUgd2FzIGF0IGxlYXN0IGFzIGNvdXJhZ2VvdXMgYXMgdGhlIGh1bnRlcjsgaGUgd291bGQgbm90IGdpdmUgdGhlIHdpbGQgYmVhc3RzIHRoZSBzbGlwIGFuZCBzdGFsayB0aGVpciBlbXB0eSBsYWlycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCB0aGVzZSB3b3JkcywgaGUgbGVkIGhpcyBhcm15IGFnYWluc3QgTWl0aHJpZGF0ZXMsIGhhdmluZyB0aGlydHkgdGhvdXNhbmQgZm9vdC1zb2xkaWVycywgYW5kIHR3ZW50eS1maXZlIGh1bmRyZWQgaG9yc2VtZW4uIEJ1dCB3aGVuIGhlIGhhZCBjb21lIHdpdGhpbiBzaWdodCBvZiB0aGUgZW5lbXkgYW5kIHNlZW4gd2l0aCBhbWF6ZW1lbnQgdGhlaXIgbXVsdGl0dWRlLCBoZSBkZXNpcmVkIHRvIHJlZnJhaW4gZnJvbSBiYXR0bGUgYW5kIGRyYXcgb3V0IHRoZSB0aW1lLiBCdXQgTWFyaXVzLCB3aG9tIFNlcnRvcml1cyBoYWQgc2VudCB0byBNaXRocmlkYXRlcyBmcm9tIFNwYWluIHdpdGggYW4gYXJteSwgY2FtZSBvdXQgdG8gbWVldCBoaW0sIGFuZCBjaGFsbGVuZ2VkIGhpbSB0byBjb21iYXQsIGFuZCBzbyBoZSBwdXQgaGlzIGZvcmNlcyBpbiBhcnJheSB0byBmaWdodCB0aGUgaXNzdWUgb3V0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgcHJlc2VudGx5LCBhcyB0aGV5IHdlcmUgb24gdGhlIHBvaW50IG9mIGpvaW5pbmcgYmF0dGxlLCB3aXRoIG5vIGFwcGFyZW50IGNoYW5nZSBvZiB3ZWF0aGVyLCBidXQgYWxsIG9uIGEgc3VkZGVuLCB0aGUgc2t5IGJ1cnN0IGFzdW5kZXIsIGFuZCBhIGh1Z2UsIGZsYW1lLWxpa2UgYm9keSB3YXMgc2VlbiB0byBmYWxsIGJldHdlZW4gdGhlIHR3byBhcm1pZXMuIEluIHNoYXBlLCBpdCB3YXMgbW9zdCBsaWtlIGEgd2luZS1qYXIsIGFuZCBpbiBjb2xvdXIsIGxpa2UgbW9sdGVuIHNpbHZlci4gQm90aCBzaWRlcyB3ZXJlIGFzdG9uaXNoZWQgYXQgdGhlIHNpZ2h0LCBhbmQgc2VwYXJhdGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1hcnZlbCwgYXMgdGhleSBzYXksIG9jY3VycmVkIGluIFBocnlnaWEsIGF0IGEgcGxhY2UgY2FsbGVkIE90cnlhZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGVyZSB3ZXJlIHNvbWUgd2hvIHVyZ2VkIEx1Y3VsbHVzIHRvIGlnbm9yZSBDb3R0YSBhbmQgbWFyY2ggb24gaW50byB0aGUga2luZ2RvbSBvZiBNaXRocmlkYXRlcywgYXNzdXJlZCBvZiBjYXB0dXJpbmcgaXQgaW4gaXRzIGRlZmVuY2VsZXNzIGNvbmRpdGlvbi4gVGhpcyB3YXMgdGhlIHJlYXNvbmluZyBvZiB0aGUgc29sZGllcnMgZXNwZWNpYWxseSwgd2hvIHdlcmUgaW5kaWduYW50IHRoYXQgQ290dGEsIGJ5IGhpcyBldmlsIGNvdW5zZWxzLCBzaG91bGQgbm90IG9ubHkgYmUgdGhlIHVuZG9pbmcgb2YgaGltc2VsZiBhbmQgaGlzIGFybXksIGJ1dCBhbHNvIGJsb2NrIHRoZWlyIG93biB3YXkgdG8gYSB2aWN0b3J5IHdoaWNoIHRoZXkgY291bGQgaGF2ZSB3b24gd2l0aG91dCBhIGJhdHRsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBMdWN1bGx1cywgaW4gYSBoYXJhbmd1ZSB3aGljaCBoZSBtYWRlIHRoZW0sIHNhaWQgdGhhdCBoZSB3b3VsZCByYXRoZXIgc2F2ZSBvbmUgUm9tYW4gZnJvbSB0aGUgZW5lbXkgdGhhbiB0YWtlIGFsbCB0aGF0IGVuZW15J3MgcG9zc2Vzc2lvbnMuIEFuZCB3aGVuIEFyY2hlbGHDvHMsIHdobyBoYWQgaGVsZCBjb21tYW5kIGZvciBNaXRocmlkYXRlcyBpbiBCb2VvdGlhLCBhbmQgdGhlbiBoYWQgYWJhbmRvbmVkIGhpcyBjYXVzZSwgYW5kIHdhcyBub3cgaW4gdGhlIFJvbWFuIGFybXksIHN0b3V0bHkgbWFpbnRhaW5lZCB0aGF0IGlmIEx1Y3VsbHVzIHdlcmUgb25jZSBzZWVuIGluIFBvbnR1cywgaGUgd291bGQgbWFzdGVyIGV2ZXJ5dGhpbmcgYXQgb25jZSwgTHVjdWxsdXMgZGVjbGFyZWQgdGhhdCBoZSB3YXMgYXQgbGVhc3QgYXMgY291cmFnZW91cyBhcyB0aGUgaHVudGVyOyBoZSB3b3VsZCBub3QgZ2l2ZSB0aGUgd2lsZCBiZWFzdHMgdGhlIHNsaXAgYW5kIHN0YWxrIHRoZWlyIGVtcHR5IGxhaXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlc2Ugd29yZHMsIGhlIGxlZCBoaXMgYXJteSBhZ2FpbnN0IE1pdGhyaWRhdGVzLCBoYXZpbmcgdGhpcnR5IHRob3VzYW5kIGZvb3Qtc29sZGllcnMsIGFuZCB0d2VudHktZml2ZSBodW5kcmVkIGhvcnNlbWVuLiBCdXQgd2hlbiBoZSBoYWQgY29tZSB3aXRoaW4gc2lnaHQgb2YgdGhlIGVuZW15IGFuZCBzZWVuIHdpdGggYW1hemVtZW50IHRoZWlyIG11bHRpdHVkZSwgaGUgZGVzaXJlZCB0byByZWZyYWluIGZyb20gYmF0dGxlIGFuZCBkcmF3IG91dCB0aGUgdGltZS4gQnV0IE1hcml1cywgd2hvbSBTZXJ0b3JpdXMgaGFkIHNlbnQgdG8gTWl0aHJpZGF0ZXMgZnJvbSBTcGFpbiB3aXRoIGFuIGFybXksIGNhbWUgb3V0IHRvIG1lZXQgaGltLCBhbmQgY2hhbGxlbmdlZCBoaW0gdG8gY29tYmF0LCBhbmQgc28gaGUgcHV0IGhpcyBmb3JjZXMgaW4gYXJyYXkgdG8gZmlnaHQgdGhlIGlzc3VlIG91dC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBwcmVzZW50bHksIGFzIHRoZXkgd2VyZSBvbiB0aGUgcG9pbnQgb2Ygam9pbmluZyBiYXR0bGUsIHdpdGggbm8gYXBwYXJlbnQgY2hhbmdlIG9mIHdlYXRoZXIsIGJ1dCBhbGwgb24gYSBzdWRkZW4sIHRoZSBza3kgYnVyc3QgYXN1bmRlciwgYW5kIGEgaHVnZSwgZmxhbWUtbGlrZSBib2R5IHdhcyBzZWVuIHRvIGZhbGwgYmV0d2VlbiB0aGUgdHdvIGFybWllcy4gSW4gc2hhcGUsIGl0IHdhcyBtb3N0IGxpa2UgYSB3aW5lLWphciwgYW5kIGluIGNvbG91ciwgbGlrZSBtb2x0ZW4gc2lsdmVyLiBCb3RoIHNpZGVzIHdlcmUgYXN0b25pc2hlZCBhdCB0aGUgc2lnaHQsIGFuZCBzZXBhcmF0ZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFydmVsLCBhcyB0aGV5IHNheSwgb2NjdXJyZWQgaW4gUGhyeWdpYSwgYXQgYSBwbGFjZSBjYWxsZWQgT3RyeWFlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBMdWN1bGx1cywgZmVlbGluZyBzdXJlIHRoYXQgbm8gaHVtYW4gcHJvdmlzaW9uIG9yIHdlYWx0aCBjb3VsZCBtYWludGFpbiwgZm9yIGFueSBsZW5ndGggb2YgdGltZSwgYW5kIGluIHRoZSBmYWNlIG9mIGFuIGVuZW15LCBzbyBtYW55IHRob3VzYW5kcyBvZiBtZW4gYXMgTWl0aHJpZGF0ZXMgaGFkLCBvcmRlcmVkIG9uZSBvZiB0aGUgY2FwdGl2ZXMgdG8gYmUgYnJvdWdodCB0byBoaW0sIGFuZCBhc2tlZCBoaW0gZmlyc3QsIGhvdyBtYW55IG1lbiBzaGFyZWQgaGlzIG1lc3MsIGFuZCB0aGVuLCBob3cgbXVjaCBmb29kIGhlIGhhZCBsZWZ0IGluIGhpcyB0ZW50LiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG1hbiBoYWQgYW5zd2VyZWQgdGhlc2UgcXVlc3Rpb25zLCBoZSBvcmRlcmVkIGhpbSB0byBiZSByZW1vdmVkLCBhbmQgcXVlc3Rpb25lZCBhIHNlY29uZCBhbmQgYSB0aGlyZCBpbiBsaWtlIG1hbm5lci4gVGhlbiwgY29tcGFyaW5nIHRoZSBhbW91bnQgb2YgZm9vZCBwcm92aWRlZCB3aXRoIHRoZSBudW1iZXIgb2YgbWVuIHRvIGJlIGZlZCwgaGUgY29uY2x1ZGVkIHRoYXQgd2l0aGluIHRocmVlIG9yIGZvdXIgZGF5cyB0aGUgZW5lbXkncyBwcm92aXNpb25zIHdvdWxkIGZhaWwgdGhlbS4gQWxsIHRoZSBtb3JlLCB0aGVyZWZvcmUsIGRpZCBoZSB0cnVzdCB0byB0aW1lLCBhbmQgY29sbGVjdGVkIGludG8gaGlzIGNhbXAgYSBncmVhdCBhYnVuZGFuY2Ugb2YgcHJvdmlzaW9ucywgdGhhdCBzbywgaGltc2VsZiBpbiB0aGUgbWlkc3Qgb2YgcGxlbnR5LCBoZSBtaWdodCB3YXRjaCBmb3IgaGlzIGVuZW15J3MgZGlzdHJlc3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG1hbiBoYWQgYW5zd2VyZWQgdGhlc2UgcXVlc3Rpb25zLCBoZSBvcmRlcmVkIGhpbSB0byBiZSByZW1vdmVkLCBhbmQgcXVlc3Rpb25lZCBhIHNlY29uZCBhbmQgYSB0aGlyZCBpbiBsaWtlIG1hbm5lci4gVGhlbiwgY29tcGFyaW5nIHRoZSBhbW91bnQgb2YgZm9vZCBwcm92aWRlZCB3aXRoIHRoZSBudW1iZXIgb2YgbWVuIHRvIGJlIGZlZCwgaGUgY29uY2x1ZGVkIHRoYXQgd2l0aGluIHRocmVlIG9yIGZvdXIgZGF5cyB0aGUgZW5lbXkncyBwcm92aXNpb25zIHdvdWxkIGZhaWwgdGhlbS4gQWxsIHRoZSBtb3JlLCB0aGVyZWZvcmUsIGRpZCBoZSB0cnVzdCB0byB0aW1lLCBhbmQgY29sbGVjdGVkIGludG8gaGlzIGNhbXAgYSBncmVhdCBhYnVuZGFuY2Ugb2YgcHJvdmlzaW9ucywgdGhhdCBzbywgaGltc2VsZiBpbiB0aGUgbWlkc3Qgb2YgcGxlbnR5LCBoZSBtaWdodCB3YXRjaCBmb3IgaGlzIGVuZW15J3MgZGlzdHJlc3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIHRoZSBtZWFudGltZSwgTWl0aHJpZGF0ZXMgcGxhbm5lZCBhIGJsb3cgYXQgQ3l6aWN1cywgd2hpY2ggaGFkIHN1ZmZlcmVkIHRlcnJpYmx5IGluIHRoZSBiYXR0bGUgbmVhciBDaGFsY2Vkb24sIGhhdmluZyBsb3N0IHRocmVlIHRob3VzYW5kIG1lbiBhbmQgdGVuIHNoaXBzLiBBY2NvcmRpbmdseSwgd2lzaGluZyB0byBldmFkZSB0aGUgbm90aWNlIG9mIEx1Y3VsbHVzLCBoZSBzZXQgb3V0IGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBldmVuaW5nIG1lYWwsIHRha2luZyBhZHZhbnRhZ2Ugb2YgYSBkYXJrIGFuZCByYWlueSBuaWdodCwgYW5kIHN1Y2NlZWRlZCBpbiBwbGFudGluZyBoaXMgZm9yY2VzIG92ZXIgYWdhaW5zdCB0aGUgY2l0eSwgb24gdGhlIHNsb3BlcyBvZiB0aGUgbW91bnRhaW4gcmFuZ2Ugb2YgQWRyYXN0ZWlhLCBieSBkYXktYnJlYWsuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIGdvdCB3aW5kIG9mIGhpcyBkZXBhcnR1cmUgYW5kIHB1cnN1ZWQgaGltLCBidXQgd2FzIHdlbGwgc2F0aXNmaWVkIG5vdCB0byBmYWxsIHVwb24gdGhlIGVuZW15IHdoaWxlIGhpcyBvd24gdHJvb3BzIHdlcmUgaW4gZGlzb3JkZXIgZnJvbSB0aGVpciBtYXJjaCwgYW5kIHN0YXRpb25lZCBoaXMgYXJteSBuZWFyIHRoZSB2aWxsYWdlIGNhbGxlZCBUaHJhY2lhLCBpbiBhIHNwb3QgYmVzdCBzdWl0ZWQgdG8gY29tbWFuZCB0aGUgcm9hZHMgYW5kIHJlZ2lvbnMgZnJvbSB3aGljaCwgYW5kIG92ZXIgd2hpY2gsIHRoZSBhcm15IG9mIE1pdGhyaWRhdGVzIG11c3QgZ2V0IGl0cyBuZWNlc3Nhcnkgc3VwcGxpZXMuIFNlZWluZyBjbGVhcmx5LCB0aGVyZWZvcmUsIHdoYXQgdGhlIGlzc3VlIG11c3QgYmUsIGhlIGRpZCBub3QgY29uY2VhbCBpdCBmcm9tIGhpcyBzb2xkaWVycywgYnV0IGFzIHNvb24gYXMgdGhleSBoYWQgY29tcGxldGVkIHRoZSBsYWJvdXIgb2YgZm9ydGlmeWluZyB0aGVpciBjYW1wLCBjYWxsZWQgdGhlbSB0b2dldGhlciwgYW5kIGJvYXN0ZnVsbHkgdG9sZCB0aGVtIHRoYXQgd2l0aGluIGEgZmV3IGRheXMgaGUgd291bGQgZ2l2ZSB0aGVtIHRoZWlyIHZpY3RvcnksIGFuZCB0aGF0IHdpdGhvdXQgYW55IGJsb29kc2hlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gdGhlIG1lYW50aW1lLCBNaXRocmlkYXRlcyBwbGFubmVkIGEgYmxvdyBhdCBDeXppY3VzLCB3aGljaCBoYWQgc3VmZmVyZWQgdGVycmlibHkgaW4gdGhlIGJhdHRsZSBuZWFyIENoYWxjZWRvbiwgaGF2aW5nIGxvc3QgdGhyZWUgdGhvdXNhbmQgbWVuIGFuZCB0ZW4gc2hpcHMuIEFjY29yZGluZ2x5LCB3aXNoaW5nIHRvIGV2YWRlIHRoZSBub3RpY2Ugb2YgTHVjdWxsdXMsIGhlIHNldCBvdXQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGV2ZW5pbmcgbWVhbCwgdGFraW5nIGFkdmFudGFnZSBvZiBhIGRhcmsgYW5kIHJhaW55IG5pZ2h0LCBhbmQgc3VjY2VlZGVkIGluIHBsYW50aW5nIGhpcyBmb3JjZXMgb3ZlciBhZ2FpbnN0IHRoZSBjaXR5LCBvbiB0aGUgc2xvcGVzIG9mIHRoZSBtb3VudGFpbiByYW5nZSBvZiBBZHJhc3RlaWEsIGJ5IGRheS1icmVhay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIGdvdCB3aW5kIG9mIGhpcyBkZXBhcnR1cmUgYW5kIHB1cnN1ZWQgaGltLCBidXQgd2FzIHdlbGwgc2F0aXNmaWVkIG5vdCB0byBmYWxsIHVwb24gdGhlIGVuZW15IHdoaWxlIGhpcyBvd24gdHJvb3BzIHdlcmUgaW4gZGlzb3JkZXIgZnJvbSB0aGVpciBtYXJjaCwgYW5kIHN0YXRpb25lZCBoaXMgYXJteSBuZWFyIHRoZSB2aWxsYWdlIGNhbGxlZCBUaHJhY2lhLCBpbiBhIHNwb3QgYmVzdCBzdWl0ZWQgdG8gY29tbWFuZCB0aGUgcm9hZHMgYW5kIHJlZ2lvbnMgZnJvbSB3aGljaCwgYW5kIG92ZXIgd2hpY2gsIHRoZSBhcm15IG9mIE1pdGhyaWRhdGVzIG11c3QgZ2V0IGl0cyBuZWNlc3Nhcnkgc3VwcGxpZXMuIFNlZWluZyBjbGVhcmx5LCB0aGVyZWZvcmUsIHdoYXQgdGhlIGlzc3VlIG11c3QgYmUsIGhlIGRpZCBub3QgY29uY2VhbCBpdCBmcm9tIGhpcyBzb2xkaWVycywgYnV0IGFzIHNvb24gYXMgdGhleSBoYWQgY29tcGxldGVkIHRoZSBsYWJvdXIgb2YgZm9ydGlmeWluZyB0aGVpciBjYW1wLCBjYWxsZWQgdGhlbSB0b2dldGhlciwgYW5kIGJvYXN0ZnVsbHkgdG9sZCB0aGVtIHRoYXQgd2l0aGluIGEgZmV3IGRheXMgaGUgd291bGQgZ2l2ZSB0aGVtIHRoZWlyIHZpY3RvcnksIGFuZCB0aGF0IHdpdGhvdXQgYW55IGJsb29kc2hlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TWl0aHJpZGF0ZXMgd2FzIGJlc2llZ2luZyBDeXppY3VzIGJvdGggYnkgbGFuZCBhbmQgc2VhLCBoYXZpbmcgZW5jb21wYXNzZWQgaXQgd2l0aCB0ZW4gY2FtcHMgb24gdGhlIGxhbmQgc2lkZSwgYW5kIGhhdmluZyBibG9ja2FkZWQgd2l0aCBoaXMgc2hpcHMgYnkgc2VhIHRoZSBuYXJyb3cgc3RyYWl0IHdoaWNoIHBhcnRzIHRoZSBjaXR5IGZyb20gdGhlIG1haW5sYW5kLiBBbHRob3VnaCB0aGUgY2l0aXplbnMgdmlld2VkIHRoZWlyIHBlcmlsIHdpdGggYSBoaWdoIGNvdXJhZ2UsIGFuZCB3ZXJlIHJlc29sdmVkIHRvIHN1c3RhaW4gZXZlcnkgaGFyZHNoaXAgZm9yIHRoZSBzYWtlIG9mIHRoZSBSb21hbnMsIHN0aWxsLCB0aGV5IGtuZXcgbm90IHdoZXJlIEx1Y3VsbHVzIHdhcywgYW5kIHdlcmUgZGlzdHVyYmVkIGJlY2F1c2UgdGhleSBoZWFyZCBub3RoaW5nIG9mIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBoaXMgY2FtcCB3YXMgaW4gcGxhaW4gc2lnaHQsIG9ubHkgdGhleSB3ZXJlIGRlY2VpdmVkIGJ5IHRoZWlyIGVuZW1pZXMuIFRoZXNlIHBvaW50ZWQgdGhlIFJvbWFucyBvdXQgdG8gdGhlbSwgbHlpbmcgZW5jYW1wZWQgb24gdGhlIGhlaWdodHMsIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvIHlvdSBzZWUgdGhvc2UgZm9yY2VzPyBJdCBpcyBhbiBhcm15IG9mIEFybWVuaWFucyBhbmQgTWVkZXMgd2hpY2ggVGlncmFuZXMgaGFzIHNlbnQgdG8gYXNzaXN0IE1pdGhyaWRhdGVzLjwvcT4gVGhleSB3ZXJlIHRoZXJlZm9yZSB0ZXJyaWZpZWQgdG8gc2VlIHN1Y2ggaG9zdHMgZW5jb21wYXNzaW5nIHRoZW0sIGFuZCBoYWQgbm8gaG9wZXMgdGhhdCBhbnkgd2F5IG9mIHN1Y2NvdXIgcmVtYWluZWQsIGV2ZW4gaWYgTHVjdWxsdXMgc2hvdWxkIGNvbWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1pdGhyaWRhdGVzIHdhcyBiZXNpZWdpbmcgQ3l6aWN1cyBib3RoIGJ5IGxhbmQgYW5kIHNlYSwgaGF2aW5nIGVuY29tcGFzc2VkIGl0IHdpdGggdGVuIGNhbXBzIG9uIHRoZSBsYW5kIHNpZGUsIGFuZCBoYXZpbmcgYmxvY2thZGVkIHdpdGggaGlzIHNoaXBzIGJ5IHNlYSB0aGUgbmFycm93IHN0cmFpdCB3aGljaCBwYXJ0cyB0aGUgY2l0eSBmcm9tIHRoZSBtYWlubGFuZC4gQWx0aG91Z2ggdGhlIGNpdGl6ZW5zIHZpZXdlZCB0aGVpciBwZXJpbCB3aXRoIGEgaGlnaCBjb3VyYWdlLCBhbmQgd2VyZSByZXNvbHZlZCB0byBzdXN0YWluIGV2ZXJ5IGhhcmRzaGlwIGZvciB0aGUgc2FrZSBvZiB0aGUgUm9tYW5zLCBzdGlsbCwgdGhleSBrbmV3IG5vdCB3aGVyZSBMdWN1bGx1cyB3YXMsIGFuZCB3ZXJlIGRpc3R1cmJlZCBiZWNhdXNlIHRoZXkgaGVhcmQgbm90aGluZyBvZiBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaGlzIGNhbXAgd2FzIGluIHBsYWluIHNpZ2h0LCBvbmx5IHRoZXkgd2VyZSBkZWNlaXZlZCBieSB0aGVpciBlbmVtaWVzLiBUaGVzZSBwb2ludGVkIHRoZSBSb21hbnMgb3V0IHRvIHRoZW0sIGx5aW5nIGVuY2FtcGVkIG9uIHRoZSBoZWlnaHRzLCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvIHlvdSBzZWUgdGhvc2UgZm9yY2VzPyBJdCBpcyBhbiBhcm15IG9mIEFybWVuaWFucyBhbmQgTWVkZXMgd2hpY2ggVGlncmFuZXMgaGFzIHNlbnQgdG8gYXNzaXN0IE1pdGhyaWRhdGVzLjwvcT4gVGhleSB3ZXJlIHRoZXJlZm9yZSB0ZXJyaWZpZWQgdG8gc2VlIHN1Y2ggaG9zdHMgZW5jb21wYXNzaW5nIHRoZW0sIGFuZCBoYWQgbm8gaG9wZXMgdGhhdCBhbnkgd2F5IG9mIHN1Y2NvdXIgcmVtYWluZWQsIGV2ZW4gaWYgTHVjdWxsdXMgc2hvdWxkIGNvbWUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGluIHRoZSBmaXJzdCBwbGFjZSwgRGVtb25heCB3YXMgc2VudCBpbiB0byB0aGVtIGJ5IEFyY2hlbGHDvHMsIGFuZCB0b2xkIHRoZW0gdGhhdCBMdWN1bGx1cyB3YXMgYXJyaXZlZC4gVGhleSBkaXNiZWxpZXZlZCBoaW0sIGFuZCB0aG91Z2h0IGhlIGhhZCBpbnZlbnRlZCBoaXMgc3RvcnkgbWVyZWx5IHRvIG1pdGlnYXRlIHRoZWlyIGFueGlldGllcywgYnV0IHRoZW4gYSBib3kgY2FtZSB0byB0aGVtLCB3aG8gaGFkIGVzY2FwZWQgZnJvbSBoaXMgY2FwdGl2aXR5IHdpdGggdGhlIGVuZW15LiBPbiB0aGVpciBhc2tpbmcgaGltIHdoZXJlIGhlIHRob3VnaHQgTHVjdWxsdXMgd2FzLCBoZSBsYXVnaGVkIGF0IHRoZW0sIHN1cHBvc2luZyB0aGVtIHRvIGJlIGplc3RpbmcuIEJ1dCB3aGVuIGhlIHNhdyB0aGF0IHRoZXkgd2VyZSBpbiBlYXJuZXN0LCBoZSBwb2ludGVkIG91dCB0aGUgUm9tYW4gY2FtcCB0byB0aGVtLCBhbmQgdGhlaXIgY291cmFnZSB3YXMgcmV2aXZlZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIEx1Y3VsbHVzIGRyZXcgb3V0IG9uIHNob3JlIHRoZSBsYXJnZXN0IG9mIHRoZSBzaXphYmxlIGNyYWZ0IHdoaWNoIHBsaWVkIHRoZSBsYWtlIERhc2N5bGl0aXMsIGNhcnJpZWQgaXQgYWNyb3NzIHRvIHRoZSBzZWEgb24gYSB3YWdnb24sIGFuZCBlbWJhcmtlZCB1cG9uIGl0IGFzIG1hbnkgc29sZGllcnMgYXMgaXQgd291bGQgaG9sZCwgd2hvIGNyb3NzZWQgYnkgbmlnaHQgdW5vYnNlcnZlZCwgYW5kIGdvdCBzYWZlbHkgaW50byB0aGUgY2l0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGluIHRoZSBmaXJzdCBwbGFjZSwgRGVtb25heCB3YXMgc2VudCBpbiB0byB0aGVtIGJ5IEFyY2hlbGHDvHMsIGFuZCB0b2xkIHRoZW0gdGhhdCBMdWN1bGx1cyB3YXMgYXJyaXZlZC4gVGhleSBkaXNiZWxpZXZlZCBoaW0sIGFuZCB0aG91Z2h0IGhlIGhhZCBpbnZlbnRlZCBoaXMgc3RvcnkgbWVyZWx5IHRvIG1pdGlnYXRlIHRoZWlyIGFueGlldGllcywgYnV0IHRoZW4gYSBib3kgY2FtZSB0byB0aGVtLCB3aG8gaGFkIGVzY2FwZWQgZnJvbSBoaXMgY2FwdGl2aXR5IHdpdGggdGhlIGVuZW15LiBPbiB0aGVpciBhc2tpbmcgaGltIHdoZXJlIGhlIHRob3VnaHQgTHVjdWxsdXMgd2FzLCBoZSBsYXVnaGVkIGF0IHRoZW0sIHN1cHBvc2luZyB0aGVtIHRvIGJlIGplc3RpbmcuIEJ1dCB3aGVuIGhlIHNhdyB0aGF0IHRoZXkgd2VyZSBpbiBlYXJuZXN0LCBoZSBwb2ludGVkIG91dCB0aGUgUm9tYW4gY2FtcCB0byB0aGVtLCBhbmQgdGhlaXIgY291cmFnZSB3YXMgcmV2aXZlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBMdWN1bGx1cyBkcmV3IG91dCBvbiBzaG9yZSB0aGUgbGFyZ2VzdCBvZiB0aGUgc2l6YWJsZSBjcmFmdCB3aGljaCBwbGllZCB0aGUgbGFrZSBEYXNjeWxpdGlzLCBjYXJyaWVkIGl0IGFjcm9zcyB0byB0aGUgc2VhIG9uIGEgd2FnZ29uLCBhbmQgZW1iYXJrZWQgdXBvbiBpdCBhcyBtYW55IHNvbGRpZXJzIGFzIGl0IHdvdWxkIGhvbGQsIHdobyBjcm9zc2VkIGJ5IG5pZ2h0IHVub2JzZXJ2ZWQsIGFuZCBnb3Qgc2FmZWx5IGludG8gdGhlIGNpdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdvdWxkIHNlZW0gYWxzbyB0aGF0IEhlYXZlbiwgaW4gYWRtaXJhdGlvbiBvZiB0aGVpciBicmF2ZXJ5LCBlbWJvbGRlbmVkIHRoZSBtZW4gb2YgQ3l6aWN1cyBieSBtYW55IG1hbmlmZXN0IHNpZ25zLCBhbmQgZXNwZWNpYWxseSBieSB0aGUgZm9sbG93aW5nLiBUaGUgZmVzdGl2YWwgb2YgUGVyc2VwaG9uZSB3YXMgYXQgaGFuZCwgYW5kIHRoZSBwZW9wbGUsIGluIGxhY2sgb2YgYSBibGFjayBoZWlmZXIgZm9yIHRoZSBzYWNyaWZpY2UsIGZhc2hpb25lZCBvbmUgb2YgZG91Z2gsIGFuZCBicm91Z2h0IGl0IHRvIHRoZSBhbHRhci4gTm93IHRoZSBzYWNyZWQgaGVpZmVyIHJlYXJlZCBmb3IgdGhlIGdvZGRlc3Mgd2FzIHBhc3R1cmluZywgbGlrZSB0aGUgb3RoZXIgaGVyZHMgb2YgdGhlIEN5emljZW5lcywgb24gdGhlIG9wcG9zaXRlIHNpZGUgb2YgdGhlIHN0cmFpdCwgYnV0IG9uIHRoYXQgZGF5IHNoZSBsZWZ0IGhlciBoZXJkLCBzd2FtIG92ZXIgYWxvbmUgdG8gdGhlIGNpdHksIGFuZCBwcmVzZW50ZWQgaGVyc2VsZiBmb3IgdGhlIHNhY3JpZmljZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFnYWluLCB0aGUgZ29kZGVzcyBhcHBlYXJlZCBpbiBhIGRyZWFtIHRvIEFyaXN0YWdvcmFzLCB0aGUgdG93bi1jbGVyaywgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxvLCBoZXJlIGFtIEksIGFuZCBJIGJyaW5nIHRoZSBMaWJ5YW4gZmlmZXIgYWdhaW5zdCB0aGUgUG9udGljIHRydW1wZXRlci4gQmlkIHRoZSBjaXRpemVucyB0aGVyZWZvcmUgYmUgb2YgZ29vZCBjaGVlci48L3E+IFdoaWxlIHRoZSBDeXppY2VuZXMgd2VyZSBsb3N0IGluIHdvbmRlciBhdCB0aGUgc2F5aW5nLCBhdCBkYXlicmVhayB0aGUgc2VhIGJlZ2FuIHRvIHRvc3MgdW5kZXIgYSBib2lzdGVyb3VzIHdpbmQsIGFuZCB0aGUgc2llZ2UtZW5naW5lcyBvZiB0aGUga2luZyBhbG9uZyB0aGUgd2FsbHMsIHRoZSB3b25kZXJmdWwgd29ya3Mgb2YgTmljb25pZGVzIHRoZSBUaGVzc2FsaWFuLCBieSB0aGVpciBjcmVha2luZyBhbmQgY3JhY2tpbmcgc2hvd2VkIGNsZWFybHkgd2hhdCB3YXMgYWJvdXQgdG8gaGFwcGVuOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz50aGVuIGEgc291dGggd2luZCBidXJzdCBmb3J0aCB3aXRoIGluY3JlZGlibGUgZnVyeSwgc2hhdHRlcmVkIHRoZSBvdGhlciBlbmdpbmVzIGluIGEgc2hvcnQgc3BhY2Ugb2YgdGltZSwgYW5kIHRocmV3IGRvd24gd2l0aCBhIGdyZWF0IHNob2NrIHRoZSB3b29kZW4gdG93ZXIgYSBodW5kcmVkIGN1Yml0cyBoaWdoLiBJdCBpcyByZWxhdGVkLCB0b28sIHRoYXQgdGhlIGdvZGRlc3MgQXRoZW5hIGFwcGVhcmVkIHRvIG1hbnkgb2YgdGhlIGluaGFiaXRhbnRzIG9mIElsaXVtIGluIHRoZWlyIHNsZWVwLCBkcmlwcGluZyB3aXRoIHN3ZWF0LCBzaG93aW5nIHBhcnQgb2YgaGVyIHBlcGx1cyB0b3JuIGF3YXksIGFuZCBzYXlpbmcgdGhhdCBzaGUgd2FzIGp1c3QgY29tZSBmcm9tIGFzc2lzdGluZyB0aGUgQ3l6aWNlbmVzLiBBbmQgdGhlIHBlb3BsZSBvZiBJbGl1bSB1c2VkIHRvIHNob3cgYSBzdGVsZSB3aGljaCBoYWQgb24gaXQgY2VydGFpbiBkZWNyZWVzIGFuZCBpbnNjcmlwdGlvbnMgcmVsYXRpbmcgdG8gdGhpcyBtYXR0ZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd291bGQgc2VlbSBhbHNvIHRoYXQgSGVhdmVuLCBpbiBhZG1pcmF0aW9uIG9mIHRoZWlyIGJyYXZlcnksIGVtYm9sZGVuZWQgdGhlIG1lbiBvZiBDeXppY3VzIGJ5IG1hbnkgbWFuaWZlc3Qgc2lnbnMsIGFuZCBlc3BlY2lhbGx5IGJ5IHRoZSBmb2xsb3dpbmcuIFRoZSBmZXN0aXZhbCBvZiBQZXJzZXBob25lIHdhcyBhdCBoYW5kLCBhbmQgdGhlIHBlb3BsZSwgaW4gbGFjayBvZiBhIGJsYWNrIGhlaWZlciBmb3IgdGhlIHNhY3JpZmljZSwgZmFzaGlvbmVkIG9uZSBvZiBkb3VnaCwgYW5kIGJyb3VnaHQgaXQgdG8gdGhlIGFsdGFyLiBOb3cgdGhlIHNhY3JlZCBoZWlmZXIgcmVhcmVkIGZvciB0aGUgZ29kZGVzcyB3YXMgcGFzdHVyaW5nLCBsaWtlIHRoZSBvdGhlciBoZXJkcyBvZiB0aGUgQ3l6aWNlbmVzLCBvbiB0aGUgb3Bwb3NpdGUgc2lkZSBvZiB0aGUgc3RyYWl0LCBidXQgb24gdGhhdCBkYXkgc2hlIGxlZnQgaGVyIGhlcmQsIHN3YW0gb3ZlciBhbG9uZSB0byB0aGUgY2l0eSwgYW5kIHByZXNlbnRlZCBoZXJzZWxmIGZvciB0aGUgc2FjcmlmaWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZ2FpbiwgdGhlIGdvZGRlc3MgYXBwZWFyZWQgaW4gYSBkcmVhbSB0byBBcmlzdGFnb3JhcywgdGhlIHRvd24tY2xlcmssIHNheWluZzogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxvLCBoZXJlIGFtIEksIGFuZCBJIGJyaW5nIHRoZSBMaWJ5YW4gZmlmZXIgYWdhaW5zdCB0aGUgUG9udGljIHRydW1wZXRlci4gQmlkIHRoZSBjaXRpemVucyB0aGVyZWZvcmUgYmUgb2YgZ29vZCBjaGVlci48L3E+IFdoaWxlIHRoZSBDeXppY2VuZXMgd2VyZSBsb3N0IGluIHdvbmRlciBhdCB0aGUgc2F5aW5nLCBhdCBkYXlicmVhayB0aGUgc2VhIGJlZ2FuIHRvIHRvc3MgdW5kZXIgYSBib2lzdGVyb3VzIHdpbmQsIGFuZCB0aGUgc2llZ2UtZW5naW5lcyBvZiB0aGUga2luZyBhbG9uZyB0aGUgd2FsbHMsIHRoZSB3b25kZXJmdWwgd29ya3Mgb2YgTmljb25pZGVzIHRoZSBUaGVzc2FsaWFuLCBieSB0aGVpciBjcmVha2luZyBhbmQgY3JhY2tpbmcgc2hvd2VkIGNsZWFybHkgd2hhdCB3YXMgYWJvdXQgdG8gaGFwcGVuOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoZW4gYSBzb3V0aCB3aW5kIGJ1cnN0IGZvcnRoIHdpdGggaW5jcmVkaWJsZSBmdXJ5LCBzaGF0dGVyZWQgdGhlIG90aGVyIGVuZ2luZXMgaW4gYSBzaG9ydCBzcGFjZSBvZiB0aW1lLCBhbmQgdGhyZXcgZG93biB3aXRoIGEgZ3JlYXQgc2hvY2sgdGhlIHdvb2RlbiB0b3dlciBhIGh1bmRyZWQgY3ViaXRzIGhpZ2guIEl0IGlzIHJlbGF0ZWQsIHRvbywgdGhhdCB0aGUgZ29kZGVzcyBBdGhlbmEgYXBwZWFyZWQgdG8gbWFueSBvZiB0aGUgaW5oYWJpdGFudHMgb2YgSWxpdW0gaW4gdGhlaXIgc2xlZXAsIGRyaXBwaW5nIHdpdGggc3dlYXQsIHNob3dpbmcgcGFydCBvZiBoZXIgcGVwbHVzIHRvcm4gYXdheSwgYW5kIHNheWluZyB0aGF0IHNoZSB3YXMganVzdCBjb21lIGZyb20gYXNzaXN0aW5nIHRoZSBDeXppY2VuZXMuIEFuZCB0aGUgcGVvcGxlIG9mIElsaXVtIHVzZWQgdG8gc2hvdyBhIHN0ZWxlIHdoaWNoIGhhZCBvbiBpdCBjZXJ0YWluIGRlY3JlZXMgYW5kIGluc2NyaXB0aW9ucyByZWxhdGluZyB0byB0aGlzIG1hdHRlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWl0aHJpZGF0ZXMsIGFzIGxvbmcgYXMgaGlzIGdlbmVyYWxzIGRlY2VpdmVkIGhpbSBpbnRvIGlnbm9yYW5jZSBvZiB0aGUgZmFtaW5lIGluIGhpcyBhcm15LCB3YXMgdmV4ZWQgdGhhdCB0aGUgQ3l6aWNlbmVzIHNob3VsZCBzdWNjZXNzZnVsbHkgd2l0aHN0YW5kIGhpcyBzaWVnZS4gQnV0IGhpcyBlYWdlciBhbWJpdGlvbiBxdWlja2x5IGViYmVkIGF3YXkgd2hlbiBoZSBwZXJjZWl2ZWQgdGhlIHN0cmFpdHMgaW4gd2hpY2ggaGlzIHNvbGRpZXJzIHdlcmUgaW52b2x2ZWQsIGFuZCB0aGVpciBhY3R1YWwgY2FubmliYWxpc20uIEZvciBMdWN1bGx1cyB3YXMgbm90IGNhcnJ5aW5nIG9uIHRoZSB3YXIgaW4gYW55IHRoZWF0cmljYWwgd2F5LCBub3IgZm9yIG1lcmUgZGlzcGxheSwgYnV0LCBhcyB0aGUgc2F5aW5nIGlzLCB3YXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5raWNraW5nIGluIHRoZSBiZWxseSw8L3E+IGFuZCBkZXZpc2luZyBldmVyeSBtZWFucyBmb3IgY3V0dGluZyBvZmYgZm9vZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoaWxlIEx1Y3VsbHVzIHdhcyBsYXlpbmcgc2llZ2UgdG8gc29tZSBvdXRwb3N0IG9yIG90aGVyLCBNaXRocmlkYXRlcyBlYWdlcmx5IHRvb2sgYWR2YW50YWdlIG9mIHRoZSBvcHBvcnR1bml0eSwgYW5kIHNlbnQgYXdheSBpbnRvIEJpdGh5bmlhIGFsbW9zdCBhbGwgaGlzIGhvcnNlbWVuLCB0b2dldGhlciB3aXRoIHRoZSBiZWFzdHMgb2YgYnVyZGVuLCBhbmQgdGhvc2Ugb2YgaGlzIGZvb3Qtc29sZGllcnMgd2hvIHdlcmUgZGlzYWJsZWQuIE9uIGxlYXJuaW5nIG9mIHRoaXMsIEx1Y3VsbHVzIHJldHVybmVkIHRvIGhpcyBjYW1wIHdoaWxlIGl0IHdhcyBzdGlsbCBuaWdodCwgYW5kIGVhcmx5IGluIHRoZSBtb3JuaW5nLCBpbiBzcGl0ZSBvZiBhIHN0b3JtLCB0b29rIHRlbiBjb2hvcnRzIG9mIGluZmFudHJ5IGFuZCBoaXMgY2FsdmFyeSwgYWlkIHN0YXJ0ZWQgaW4gcHVyc3VpdCwgYWx0aG91Z2ggc25vdyB3YXMgZmFsbGluZyBhbmQgaGlzIGhhcmRzaGlwcyB3ZXJlIGV4dHJlbWUuIE1hbnkgb2YgaGlzIHNvbGRpZXJzIHdlcmUgb3ZlcmNvbWUgd2l0aCB0aGUgY29sZCBhbmQgaGFkIHRvIGJlIGxlZnQgYmVoaW5kLCBidXQgd2l0aCB0aGUgcmVzdCBoZSBvdmVydG9vayB0aGUgZW5lbXkgYXQgdGhlIHJpdmVyIFJoeW5kYWN1cyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaW5mbGljdGVkIHN1Y2ggYSBkZWZlYXQgdXBvbiB0aGVtIHRoYXQgdGhlIHZlcnkgd29tZW4gY2FtZSBmb3J0aCBmcm9tIEFwb2xsb25pYSBhbmQgY2FycmllZCBvZmYgdGhlaXIgYmFnZ2FnZSBhbmQgc3RyaXBwZWQgdGhlaXIgc2xhaW4uIE1hbnkgZmVsbCBpbiB0aGUgYmF0dGxlLCBhcyBpdCBpcyBuYXR1cmFsIHRvIHN1cHBvc2UuIFNpeCB0aG91c2FuZCBob3JzZXMgYW5kIGZpZnRlZW4gdGhvdXNhbmQgbWVuIHdlcmUgY2FwdHVyZWQsIGJlc2lkZXMgYW4gdW50b2xkIG51bWJlciBvZiBiZWFzdHMgb2YgYnVyZGVuLiBBbGwgdGhlc2UgZm9sbG93ZWQgaW4gdGhlIHRyYWluIG9mIEx1Y3VsbHVzIGFzIGhlIG1hcmNoZWQgYmFjayBwYXN0IHRoZSBjYW1wIG9mIHRoZSBlbmVteS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U2FsbHVzdCBzYXlzLCB0byBteSBhbWF6ZW1lbnQsIHRoYXQgY2FtZWxzIHdlcmUgdGhlbiBzZWVuIGJ5IHRoZSBSb21hbnMgZm9yIHRoZSBmaXJzdCB0aW1lLiBIZSBtdXN0IGhhdmUgdGhvdWdodCB0aGF0IHRoZSBzb2xkaWVycyBvZiBTY2lwaW8gd2hvIGNvbnF1ZXJlZCBBbnRpb2NodXMgYmVmb3JlIHRoaXMsIGFuZCB0aG9zZSB3aG8gaGFkIGxhdGVseSBmb3VnaHQgQXJjaGVsYcO8cyBhdCBPcmNob21lbnVzIGFuZCBDaGFlcm9uZWlhLCB3ZXJlIHVuYWNxdWFpbnRlZCB3aXRoIHRoZSBjYW1lbC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWl0aHJpZGF0ZXMsIGFzIGxvbmcgYXMgaGlzIGdlbmVyYWxzIGRlY2VpdmVkIGhpbSBpbnRvIGlnbm9yYW5jZSBvZiB0aGUgZmFtaW5lIGluIGhpcyBhcm15LCB3YXMgdmV4ZWQgdGhhdCB0aGUgQ3l6aWNlbmVzIHNob3VsZCBzdWNjZXNzZnVsbHkgd2l0aHN0YW5kIGhpcyBzaWVnZS4gQnV0IGhpcyBlYWdlciBhbWJpdGlvbiBxdWlja2x5IGViYmVkIGF3YXkgd2hlbiBoZSBwZXJjZWl2ZWQgdGhlIHN0cmFpdHMgaW4gd2hpY2ggaGlzIHNvbGRpZXJzIHdlcmUgaW52b2x2ZWQsIGFuZCB0aGVpciBhY3R1YWwgY2FubmliYWxpc20uIEZvciBMdWN1bGx1cyB3YXMgbm90IGNhcnJ5aW5nIG9uIHRoZSB3YXIgaW4gYW55IHRoZWF0cmljYWwgd2F5LCBub3IgZm9yIG1lcmUgZGlzcGxheSwgYnV0LCBhcyB0aGUgc2F5aW5nIGlzLCB3YXMgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmtpY2tpbmcgaW4gdGhlIGJlbGx5LDwvcT4gYW5kIGRldmlzaW5nIGV2ZXJ5IG1lYW5zIGZvciBjdXR0aW5nIG9mZiBmb29kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGlsZSBMdWN1bGx1cyB3YXMgbGF5aW5nIHNpZWdlIHRvIHNvbWUgb3V0cG9zdCBvciBvdGhlciwgTWl0aHJpZGF0ZXMgZWFnZXJseSB0b29rIGFkdmFudGFnZSBvZiB0aGUgb3Bwb3J0dW5pdHksIGFuZCBzZW50IGF3YXkgaW50byBCaXRoeW5pYSBhbG1vc3QgYWxsIGhpcyBob3JzZW1lbiwgdG9nZXRoZXIgd2l0aCB0aGUgYmVhc3RzIG9mIGJ1cmRlbiwgYW5kIHRob3NlIG9mIGhpcyBmb290LXNvbGRpZXJzIHdobyB3ZXJlIGRpc2FibGVkLiBPbiBsZWFybmluZyBvZiB0aGlzLCBMdWN1bGx1cyByZXR1cm5lZCB0byBoaXMgY2FtcCB3aGlsZSBpdCB3YXMgc3RpbGwgbmlnaHQsIGFuZCBlYXJseSBpbiB0aGUgbW9ybmluZywgaW4gc3BpdGUgb2YgYSBzdG9ybSwgdG9vayB0ZW4gY29ob3J0cyBvZiBpbmZhbnRyeSBhbmQgaGlzIGNhbHZhcnksIGFpZCBzdGFydGVkIGluIHB1cnN1aXQsIGFsdGhvdWdoIHNub3cgd2FzIGZhbGxpbmcgYW5kIGhpcyBoYXJkc2hpcHMgd2VyZSBleHRyZW1lLiBNYW55IG9mIGhpcyBzb2xkaWVycyB3ZXJlIG92ZXJjb21lIHdpdGggdGhlIGNvbGQgYW5kIGhhZCB0byBiZSBsZWZ0IGJlaGluZCwgYnV0IHdpdGggdGhlIHJlc3QgaGUgb3ZlcnRvb2sgdGhlIGVuZW15IGF0IHRoZSByaXZlciBSaHluZGFjdXMgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbmZsaWN0ZWQgc3VjaCBhIGRlZmVhdCB1cG9uIHRoZW0gdGhhdCB0aGUgdmVyeSB3b21lbiBjYW1lIGZvcnRoIGZyb20gQXBvbGxvbmlhIGFuZCBjYXJyaWVkIG9mZiB0aGVpciBiYWdnYWdlIGFuZCBzdHJpcHBlZCB0aGVpciBzbGFpbi4gTWFueSBmZWxsIGluIHRoZSBiYXR0bGUsIGFzIGl0IGlzIG5hdHVyYWwgdG8gc3VwcG9zZS4gU2l4IHRob3VzYW5kIGhvcnNlcyBhbmQgZmlmdGVlbiB0aG91c2FuZCBtZW4gd2VyZSBjYXB0dXJlZCwgYmVzaWRlcyBhbiB1bnRvbGQgbnVtYmVyIG9mIGJlYXN0cyBvZiBidXJkZW4uIEFsbCB0aGVzZSBmb2xsb3dlZCBpbiB0aGUgdHJhaW4gb2YgTHVjdWxsdXMgYXMgaGUgbWFyY2hlZCBiYWNrIHBhc3QgdGhlIGNhbXAgb2YgdGhlIGVuZW15LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNhbGx1c3Qgc2F5cywgdG8gbXkgYW1hemVtZW50LCB0aGF0IGNhbWVscyB3ZXJlIHRoZW4gc2VlbiBieSB0aGUgUm9tYW5zIGZvciB0aGUgZmlyc3QgdGltZS4gSGUgbXVzdCBoYXZlIHRob3VnaHQgdGhhdCB0aGUgc29sZGllcnMgb2YgU2NpcGlvIHdobyBjb25xdWVyZWQgQW50aW9jaHVzIGJlZm9yZSB0aGlzLCBhbmQgdGhvc2Ugd2hvIGhhZCBsYXRlbHkgZm91Z2h0IEFyY2hlbGHDvHMgYXQgT3JjaG9tZW51cyBhbmQgQ2hhZXJvbmVpYSwgd2VyZSB1bmFjcXVhaW50ZWQgd2l0aCB0aGUgY2FtZWwuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1pdGhyaWRhdGVzIHdhcyBub3cgcmVzb2x2ZWQgdXBvbiB0aGUgc3BlZWRpZXN0IHBvc3NpYmxlIGZsaWdodCwgYnV0IHdpdGggYSB2aWV3IHRvIGRyYXdpbmcgTHVjdWxsdXMgYXdheSwgYW5kIGhvbGRpbmcgaGltIGJhY2sgZnJvbSBwdXJzdWl0LCBoZSBkaXNwYXRjaGVkIGhpcyBhZG1pcmFsLCBBcmlzdG9uaWN1cywgdG8gdGhlIEdyZWNpYW4gc2VhLiBBcmlzdG9uaWN1cyB3YXMganVzdCBvbiB0aGUgcG9pbnQgb2Ygc2FpbGluZyB3aGVuIGhlIHdhcyBiZXRyYXllZCBpbnRvIHRoZSBoYW5kcyBvZiBMdWN1bGx1cywgdG9nZXRoZXIgd2l0aCB0ZW4gdGhvdXNhbmQgcGllY2VzIG9mIGdvbGQgd2hpY2ggaGUgd2FzIGNhcnJ5aW5nIGZvciB0aGUgY29ycnVwdGlvbiBvZiBzb21lIHBvcnRpb24gb2YgdGhlIFJvbWFuIGFybXkuIFVwb24gdGhpcywgTWl0aHJpZGF0ZXMgZmxlZCB0byB0aGUgc2VhLCBhbmQgaGlzIGdlbmVyYWxzIG9mIGluZmFudHJ5IGJlZ2FuIHRvIGxlYWQgdGhlIGFybXkgYXdheS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEx1Y3VsbHVzIGZlbGwgdXBvbiB0aGVtIGF0IHRoZSByaXZlciBHcmFuaWN1cywgY2FwdHVyZWQgYSB2YXN0IG51bWJlciBvZiB0aGVtLCBhbmQgc2xldyB0d2VudHkgdGhvdXNhbmQuIEl0IGlzIHNhaWQgdGhhdCBvdXQgb2YgdGhlIHdob2xlIGhvcmRlIG9mIGNhbXAtZm9sbG93ZXJzIGFuZCBmaWdodGluZyBtZW4sIG5vdCBtdWNoIGxlc3MgdGhhbiB0aHJlZSBodW5kcmVkIHRob3VzYW5kIHBlcmlzaGVkIGluIHRoZSBjYW1wYWlnbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1pdGhyaWRhdGVzIHdhcyBub3cgcmVzb2x2ZWQgdXBvbiB0aGUgc3BlZWRpZXN0IHBvc3NpYmxlIGZsaWdodCwgYnV0IHdpdGggYSB2aWV3IHRvIGRyYXdpbmcgTHVjdWxsdXMgYXdheSwgYW5kIGhvbGRpbmcgaGltIGJhY2sgZnJvbSBwdXJzdWl0LCBoZSBkaXNwYXRjaGVkIGhpcyBhZG1pcmFsLCBBcmlzdG9uaWN1cywgdG8gdGhlIEdyZWNpYW4gc2VhLiBBcmlzdG9uaWN1cyB3YXMganVzdCBvbiB0aGUgcG9pbnQgb2Ygc2FpbGluZyB3aGVuIGhlIHdhcyBiZXRyYXllZCBpbnRvIHRoZSBoYW5kcyBvZiBMdWN1bGx1cywgdG9nZXRoZXIgd2l0aCB0ZW4gdGhvdXNhbmQgcGllY2VzIG9mIGdvbGQgd2hpY2ggaGUgd2FzIGNhcnJ5aW5nIGZvciB0aGUgY29ycnVwdGlvbiBvZiBzb21lIHBvcnRpb24gb2YgdGhlIFJvbWFuIGFybXkuIFVwb24gdGhpcywgTWl0aHJpZGF0ZXMgZmxlZCB0byB0aGUgc2VhLCBhbmQgaGlzIGdlbmVyYWxzIG9mIGluZmFudHJ5IGJlZ2FuIHRvIGxlYWQgdGhlIGFybXkgYXdheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBMdWN1bGx1cyBmZWxsIHVwb24gdGhlbSBhdCB0aGUgcml2ZXIgR3JhbmljdXMsIGNhcHR1cmVkIGEgdmFzdCBudW1iZXIgb2YgdGhlbSwgYW5kIHNsZXcgdHdlbnR5IHRob3VzYW5kLiBJdCBpcyBzYWlkIHRoYXQgb3V0IG9mIHRoZSB3aG9sZSBob3JkZSBvZiBjYW1wLWZvbGxvd2VycyBhbmQgZmlnaHRpbmcgbWVuLCBub3QgbXVjaCBsZXNzIHRoYW4gdGhyZWUgaHVuZHJlZCB0aG91c2FuZCBwZXJpc2hlZCBpbiB0aGUgY2FtcGFpZ24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzLCBpbiB0aGUgZmlyc3QgcGxhY2UsIGVudGVyZWQgQ3l6aWN1cyBpbiB0cml1bXBoLCBhbmQgZW5qb3llZCB0aGUgcGxlYXNhbnQgd2VsY29tZSB3aGljaCB3YXMgaGlzIGR1ZTsgdGhlbiBoZSBwcm9jZWVkZWQgdG8gdGhlIEhlbGxlc3BvbnQsIGFuZCBiZWdhbiB0byBlcXVpcCBhIGZsZWV0LiBPbiB2aXNpdGluZyB0aGUgVHJvYWQsIGhlIHBpdGNoZWQgaGlzIHRlbnQgaW4gdGhlIHNhY3JlZCBwcmVjaW5jdCBvZiBBcGhyb2RpdGUsIGFuZCBpbiB0aGUgbmlnaHQsIGFmdGVyIGhlIGhhZCBmYWxsZW4gYXNsZWVwLCBoZSB0aG91Z2h0IGhlIHNhdyB0aGUgZ29kZGVzcyBzdGFuZGluZyBvdmVyIGhpbSBhbmQgc2F5aW5nOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5XaHkgZG9zdCB0aG91IHNsZWVwLCBncmVhdCBsaW9uPyB0aGUgZmF3bnMgYXJlIG5lYXIgZm9yIHRoeSB0YWtpbmcuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlSaXNpbmcgdXAgZnJvbSBzbGVlcCBhbmQgY2FsbGluZyBoaXMgZnJpZW5kcywgaGUgbmFycmF0ZWQgdG8gdGhlbSBoaXMgdmlzaW9uLCB3aGlsZSBpdCB3YXMgeWV0IG5pZ2h0LiBBbmQgbG8sIHRoZXJlIGNhbWUgY2VydGFpbiBtZW4gZnJvbSBJbGl1bSwgd2l0aCB0aWRpbmdzIHRoYXQgdGhpcnRlZW4gb2YgdGhlIGtpbmcncyBnYWxsZXlzIGhhZCBiZWVuIHNlZW4gb2ZmIHRoZSBoYXJib3VyIG9mIHRoZSBBY2hhZWFucywgbWFraW5nIGZvciBMZW1ub3MuIEFjY29yZGluZ2x5LCBMdWN1bGx1cyBwdXQgdG8gc2VhIGF0IG9uY2UsIGNhcHR1cmVkIHRoZXNlLCBzbGV3IHRoZWlyIGNvbW1hbmRlciwgSXNvZG9ydXMsIGFuZCB0aGVuIHNhaWxlZCBpbiBwdXJzdWl0IG9mIHRoZSBvdGhlciBjYXB0YWlucywgd2hvbSB0aGVzZSB3ZXJlIHNlZWtpbmcgdG8gam9pbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBjaGFuY2VkIHRvIGJlIGx5aW5nIGF0IGFuY2hvciBjbG9zZSB0byBzaG9yZSwgYW5kIGRyYXdpbmcgdGhlaXIgdmVzc2VscyBhbGwgdXAgb24gbGFuZCwgdGhleSBmb3VnaHQgZnJvbSB0aGVpciBkZWNrcywgYW5kIHNvcmVseSBnYWxsZWQgdGhlIGNyZXdzIG9mIEx1Y3VsbHVzLiBUaGVzZSBoYWQgbm8gY2hhbmNlIHRvIHNhaWwgcm91bmQgdGhlaXIgZW5lbWllcywgbm9yIHRvIG1ha2Ugb25zZXQgdXBvbiB0aGVtLCBzaW5jZSB0aGVpciBvd24gc2hpcHMgd2VyZSBhZmxvYXQsIHdoaWxlIHRob3NlIG9mIHRoZWlyIGVuZW1pZXMgd2VyZSBwbGFudGVkIHVwb24gdGhlIGxhbmQgYW5kIHNlY3VyZWx5IGZpeGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBMdWN1bGx1cyBhdCBsYXN0IHN1Y2NlZWRlZCBpbiBkaXNlbWJhcmtpbmcgdGhlIGJlc3Qgb2YgaGlzIHNvbGRpZXJzIHdoZXJlIHRoZSBpc2xhbmQgYWZmb3JkZWQgc29tZSBzb3J0IG9mIGFjY2Vzcy4gVGhlc2UgZmVsbCB1cG9uIHRoZSBlbmVteSBmcm9tIHRoZSByZWFyLCBzbGV3IHNvbWUgb2YgdGhlbSwgYW5kIGZvcmNlZCB0aGUgcmVzdCB0byBjdXQgdGhlaXIgc3Rlcm4gY2FibGVzIGFuZCBmbHkgZnJvbSB0aGUgc2hvcmUsIHRoZWlyIHZlc3NlbHMgdGh1cyBmYWxsaW5nIGZvdWwgb2Ygb25lIGFub3RoZXIsIGFuZCByZWNlaXZpbmcgdGhlIGltcGFjdCBvZiB0aGUgc2hpcHMgb2YgTHVjdWxsdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgb2YgdGhlIGVuZW15IHBlcmlzaGVkLCBvZiBjb3Vyc2UsIGFuZCBhbW9uZyB0aGUgY2FwdGl2ZXMgdGhlcmUgd2FzIGJyb3VnaHQgaW4gTWFyaXVzLCB0aGUgZ2VuZXJhbCBzZW50IGZyb20gU2VydG9yaXVzLiBIZSBoYWQgYnV0IG9uZSBleWUsIGFuZCB0aGUgc29sZGllcnMgaGFkIHJlY2VpdmVkIHN0cmljdCBvcmRlcnMgZnJvbSBMdWN1bGx1cywgYXMgc29vbiBhcyB0aGV5IHNldCBzYWlsLCB0byBraWxsIG5vIG9uZS1leWVkIG1hbi4gTHVjdWxsdXMgd2lzaGVkIE1hcml1cyB0byBkaWUgdW5kZXIgdGhlIG1vc3Qgc2hhbWVmdWwgaW5zdWx0cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+THVjdWxsdXMsIGluIHRoZSBmaXJzdCBwbGFjZSwgZW50ZXJlZCBDeXppY3VzIGluIHRyaXVtcGgsIGFuZCBlbmpveWVkIHRoZSBwbGVhc2FudCB3ZWxjb21lIHdoaWNoIHdhcyBoaXMgZHVlOyB0aGVuIGhlIHByb2NlZWRlZCB0byB0aGUgSGVsbGVzcG9udCwgYW5kIGJlZ2FuIHRvIGVxdWlwIGEgZmxlZXQuIE9uIHZpc2l0aW5nIHRoZSBUcm9hZCwgaGUgcGl0Y2hlZCBoaXMgdGVudCBpbiB0aGUgc2FjcmVkIHByZWNpbmN0IG9mIEFwaHJvZGl0ZSwgYW5kIGluIHRoZSBuaWdodCwgYWZ0ZXIgaGUgaGFkIGZhbGxlbiBhc2xlZXAsIGhlIHRob3VnaHQgaGUgc2F3IHRoZSBnb2RkZXNzIHN0YW5kaW5nIG92ZXIgaGltIGFuZCBzYXlpbmc64oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5XaHkgZG9zdCB0aG91IHNsZWVwLCBncmVhdCBsaW9uPyB0aGUgZmF3bnMgYXJlIG5lYXIgZm9yIHRoeSB0YWtpbmcuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPldoeSBkb3N0IHRob3Ugc2xlZXAsIGdyZWF0IGxpb24/IHRoZSBmYXducyBhcmUgbmVhciBmb3IgdGh5IHRha2luZy48L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJUmlzaW5nIHVwIGZyb20gc2xlZXAgYW5kIGNhbGxpbmcgaGlzIGZyaWVuZHMsIGhlIG5hcnJhdGVkIHRvIHRoZW0gaGlzIHZpc2lvbiwgd2hpbGUgaXQgd2FzIHlldCBuaWdodC4gQW5kIGxvLCB0aGVyZSBjYW1lIGNlcnRhaW4gbWVuIGZyb20gSWxpdW0sIHdpdGggdGlkaW5ncyB0aGF0IHRoaXJ0ZWVuIG9mIHRoZSBraW5nJ3MgZ2FsbGV5cyBoYWQgYmVlbiBzZWVuIG9mZiB0aGUgaGFyYm91ciBvZiB0aGUgQWNoYWVhbnMsIG1ha2luZyBmb3IgTGVtbm9zLiBBY2NvcmRpbmdseSwgTHVjdWxsdXMgcHV0IHRvIHNlYSBhdCBvbmNlLCBjYXB0dXJlZCB0aGVzZSwgc2xldyB0aGVpciBjb21tYW5kZXIsIElzb2RvcnVzLCBhbmQgdGhlbiBzYWlsZWQgaW4gcHVyc3VpdCBvZiB0aGUgb3RoZXIgY2FwdGFpbnMsIHdob20gdGhlc2Ugd2VyZSBzZWVraW5nIHRvIGpvaW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgY2hhbmNlZCB0byBiZSBseWluZyBhdCBhbmNob3IgY2xvc2UgdG8gc2hvcmUsIGFuZCBkcmF3aW5nIHRoZWlyIHZlc3NlbHMgYWxsIHVwIG9uIGxhbmQsIHRoZXkgZm91Z2h0IGZyb20gdGhlaXIgZGVja3MsIGFuZCBzb3JlbHkgZ2FsbGVkIHRoZSBjcmV3cyBvZiBMdWN1bGx1cy4gVGhlc2UgaGFkIG5vIGNoYW5jZSB0byBzYWlsIHJvdW5kIHRoZWlyIGVuZW1pZXMsIG5vciB0byBtYWtlIG9uc2V0IHVwb24gdGhlbSwgc2luY2UgdGhlaXIgb3duIHNoaXBzIHdlcmUgYWZsb2F0LCB3aGlsZSB0aG9zZSBvZiB0aGVpciBlbmVtaWVzIHdlcmUgcGxhbnRlZCB1cG9uIHRoZSBsYW5kIGFuZCBzZWN1cmVseSBmaXhlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIEx1Y3VsbHVzIGF0IGxhc3Qgc3VjY2VlZGVkIGluIGRpc2VtYmFya2luZyB0aGUgYmVzdCBvZiBoaXMgc29sZGllcnMgd2hlcmUgdGhlIGlzbGFuZCBhZmZvcmRlZCBzb21lIHNvcnQgb2YgYWNjZXNzLiBUaGVzZSBmZWxsIHVwb24gdGhlIGVuZW15IGZyb20gdGhlIHJlYXIsIHNsZXcgc29tZSBvZiB0aGVtLCBhbmQgZm9yY2VkIHRoZSByZXN0IHRvIGN1dCB0aGVpciBzdGVybiBjYWJsZXMgYW5kIGZseSBmcm9tIHRoZSBzaG9yZSwgdGhlaXIgdmVzc2VscyB0aHVzIGZhbGxpbmcgZm91bCBvZiBvbmUgYW5vdGhlciwgYW5kIHJlY2VpdmluZyB0aGUgaW1wYWN0IG9mIHRoZSBzaGlwcyBvZiBMdWN1bGx1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgb2YgdGhlIGVuZW15IHBlcmlzaGVkLCBvZiBjb3Vyc2UsIGFuZCBhbW9uZyB0aGUgY2FwdGl2ZXMgdGhlcmUgd2FzIGJyb3VnaHQgaW4gTWFyaXVzLCB0aGUgZ2VuZXJhbCBzZW50IGZyb20gU2VydG9yaXVzLiBIZSBoYWQgYnV0IG9uZSBleWUsIGFuZCB0aGUgc29sZGllcnMgaGFkIHJlY2VpdmVkIHN0cmljdCBvcmRlcnMgZnJvbSBMdWN1bGx1cywgYXMgc29vbiBhcyB0aGV5IHNldCBzYWlsLCB0byBraWxsIG5vIG9uZS1leWVkIG1hbi4gTHVjdWxsdXMgd2lzaGVkIE1hcml1cyB0byBkaWUgdW5kZXIgdGhlIG1vc3Qgc2hhbWVmdWwgaW5zdWx0cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgdGhpbmdzIGRvbmUsIEx1Y3VsbHVzIGhhc3RlbmVkIGluIHB1cnN1aXQgb2YgTWl0aHJpZGF0ZXMgaGltc2VsZi4gRm9yIGhlIGV4cGVjdGVkIHRvIGZpbmQgaGltIHN0aWxsIGluIEJpdGh5bmlhIHVuZGVyIHRoZSB3YXRjaCBhbmQgd2FyZCBvZiBWb2Nvbml1cywgd2hvbSBoZSBoYWQgZGlzcGF0Y2hlZCB3aXRoIGEgZmxlZXQgdG8gTmljb21lZGVpYSB0aGF0IGhlIG1pZ2h0IGludGVyY2VwdCB0aGUga2luZydzIGZsaWdodC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFZvY29uaXVzIHdhcyBiZWhpbmRoYW5kLCBvd2luZyB0byBoaXMgaW5pdGlhdGlvbiBpbnRvLCBhbmQgY2VsZWJyYXRpb24gb2YsIHRoZSBteXN0ZXJpZXMgaW4gU2Ftb3RocmFjZSwgYW5kIE1pdGhyaWRhdGVzIHB1dCB0byBzZWEgd2l0aCBoaXMgYXJtYW1lbnQsIGVhZ2VyIHRvIHJlYWNoIFBvbnR1cyBiZWZvcmUgTHVjdWxsdXMgdHVybmVkIGFuZCBzZXQgdXBvbiBoaW0uIEhlIHdhcyBvdmVydGFrZW4sIGhvd2V2ZXIsIGJ5IGEgZ3JlYXQgc3Rvcm0sIHdoaWNoIGRlc3Ryb3llZCBzb21lIG9mIGhpcyB2ZXNzZWxzIGFuZCBkaXNhYmxlZCBvdGhlcnMuIFRoZSB3aG9sZSBjb2FzdCBmb3IgbWFueSBkYXlzIHdhcyBjb3ZlcmVkIHdpdGggdGhlIHdyZWNrcyBkYXNoZWQgdXBvbiBpdCBieSB0aGUgYmlsbG93cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIHRoZSBraW5nIGhpbXNlbGYsIHRoZSBtZXJjaGFudG1hbiBvbiB3aGljaCBoZSB3YXMgc2FpbGluZyB3YXMgdG9vIGxhcmdlIHRvIGJlIHJlYWRpbHkgYmVhY2hlZCB3aGVuIHRoZSBzZWEgcmFuIHNvIGhpZ2ggYW5kIHRoZSB3YXZlcyB3ZXJlIHNvIGJhZmZsaW5nLCBub3Igd291bGQgaXQgYW5zd2VyIHRvIGl0cyBoZWxtLCBhbmQgaXQgd2FzIG5vdyB0b28gaGVhdnkgYW5kIGZ1bGwgb2Ygd2F0ZXIgdG8gZ2FpbiBhbiBvZmZpbmc7IGFjY29yZGluZ2x5LCBoZSBhYmFuZG9uZWQgaXQgZm9yIGEgbGlnaHQgYnJpZ2FudGluZSBiZWxvbmdpbmcgdG8gc29tZSBwaXJhdGVzLCBhbmQsIGVudHJ1c3RpbmcgaGlzIHBlcnNvbiB0byB0aGVpciBoYW5kcywgY29udHJhcnkgdG8gZXhwZWN0YXRpb24gYW5kIGFmdGVyIGdyZWF0IGhhemFyZCwgZ290IHNhZmVseSB0byBIZXJhY2xlaWEgaW4gUG9udHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gaXQgaGFwcGVuZWQgdGhhdCB0aGUgYm9hc3RmdWwgc3BlZWNoIG9mIEx1Y3VsbHVzIHRvIHRoZSBTZW5hdGUgYnJvdWdodCBubyBkaXZpbmUgcmV0cmlidXRpb24gZG93biB1cG9uIGhpbS4gV2hlbiwgbmFtZWx5LCB0aGF0IGJvZHkgd2FzIHJlYWR5IHRvIHZvdGUgdGhyZWUgdGhvdXNhbmQgdGFsZW50cyB0byBwcm92aWRlIGEgZmxlZXQgZm9yIHRoaXMgd2FyLCBMdWN1bGx1cyBibG9ja2VkIHRoZSBtZWFzdXJlIGJ5IHdyaXRpbmcgYSBsZXR0ZXIsIGluIHdoaWNoIGhlIG1hZGUgdGhlIGhhdWdodHkgYm9hc3QgdGhhdCB3aXRob3V0IGFueSBzdWNoIGNvc3RseSBhcnJheSwgYnV0IG9ubHkgd2l0aCB0aGUgc2hpcHMgb2YgdGhlIGFsbGllcywgaGUgd291bGQgZHJpdmUgTWl0aHJpZGF0ZXMgZnJvbSB0aGUgc2VhLiBBbmQgdGhpcyBzdWNjZXNzIGhlIGdhaW5lZCB3aXRoIHRoZSBhc3Npc3RhbmNlIG9mIEhlYXZlbi4gRm9yIGl0IGlzIHNhaWQgdGhhdCBpdCB3YXMgb3dpbmcgdG8gdGhlIHdyYXRoIG9mIEFydGVtaXMgb2YgUHJpYXB1cyB0aGF0IHRoZSB0ZW1wZXN0IGZlbGwgdXBvbiB0aGUgbWVuIG9mIFBvbnR1cywgd2hvIGhhZCBwbHVuZGVyZWQgaGVyIHNocmluZSBhbmQgcHVsbGVkIGRvd24gaGVyIGltYWdlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgdGhpbmdzIGRvbmUsIEx1Y3VsbHVzIGhhc3RlbmVkIGluIHB1cnN1aXQgb2YgTWl0aHJpZGF0ZXMgaGltc2VsZi4gRm9yIGhlIGV4cGVjdGVkIHRvIGZpbmQgaGltIHN0aWxsIGluIEJpdGh5bmlhIHVuZGVyIHRoZSB3YXRjaCBhbmQgd2FyZCBvZiBWb2Nvbml1cywgd2hvbSBoZSBoYWQgZGlzcGF0Y2hlZCB3aXRoIGEgZmxlZXQgdG8gTmljb21lZGVpYSB0aGF0IGhlIG1pZ2h0IGludGVyY2VwdCB0aGUga2luZydzIGZsaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBWb2Nvbml1cyB3YXMgYmVoaW5kaGFuZCwgb3dpbmcgdG8gaGlzIGluaXRpYXRpb24gaW50bywgYW5kIGNlbGVicmF0aW9uIG9mLCB0aGUgbXlzdGVyaWVzIGluIFNhbW90aHJhY2UsIGFuZCBNaXRocmlkYXRlcyBwdXQgdG8gc2VhIHdpdGggaGlzIGFybWFtZW50LCBlYWdlciB0byByZWFjaCBQb250dXMgYmVmb3JlIEx1Y3VsbHVzIHR1cm5lZCBhbmQgc2V0IHVwb24gaGltLiBIZSB3YXMgb3ZlcnRha2VuLCBob3dldmVyLCBieSBhIGdyZWF0IHN0b3JtLCB3aGljaCBkZXN0cm95ZWQgc29tZSBvZiBoaXMgdmVzc2VscyBhbmQgZGlzYWJsZWQgb3RoZXJzLiBUaGUgd2hvbGUgY29hc3QgZm9yIG1hbnkgZGF5cyB3YXMgY292ZXJlZCB3aXRoIHRoZSB3cmVja3MgZGFzaGVkIHVwb24gaXQgYnkgdGhlIGJpbGxvd3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUga2luZyBoaW1zZWxmLCB0aGUgbWVyY2hhbnRtYW4gb24gd2hpY2ggaGUgd2FzIHNhaWxpbmcgd2FzIHRvbyBsYXJnZSB0byBiZSByZWFkaWx5IGJlYWNoZWQgd2hlbiB0aGUgc2VhIHJhbiBzbyBoaWdoIGFuZCB0aGUgd2F2ZXMgd2VyZSBzbyBiYWZmbGluZywgbm9yIHdvdWxkIGl0IGFuc3dlciB0byBpdHMgaGVsbSwgYW5kIGl0IHdhcyBub3cgdG9vIGhlYXZ5IGFuZCBmdWxsIG9mIHdhdGVyIHRvIGdhaW4gYW4gb2ZmaW5nOyBhY2NvcmRpbmdseSwgaGUgYWJhbmRvbmVkIGl0IGZvciBhIGxpZ2h0IGJyaWdhbnRpbmUgYmVsb25naW5nIHRvIHNvbWUgcGlyYXRlcywgYW5kLCBlbnRydXN0aW5nIGhpcyBwZXJzb24gdG8gdGhlaXIgaGFuZHMsIGNvbnRyYXJ5IHRvIGV4cGVjdGF0aW9uIGFuZCBhZnRlciBncmVhdCBoYXphcmQsIGdvdCBzYWZlbHkgdG8gSGVyYWNsZWlhIGluIFBvbnR1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBpdCBoYXBwZW5lZCB0aGF0IHRoZSBib2FzdGZ1bCBzcGVlY2ggb2YgTHVjdWxsdXMgdG8gdGhlIFNlbmF0ZSBicm91Z2h0IG5vIGRpdmluZSByZXRyaWJ1dGlvbiBkb3duIHVwb24gaGltLiBXaGVuLCBuYW1lbHksIHRoYXQgYm9keSB3YXMgcmVhZHkgdG8gdm90ZSB0aHJlZSB0aG91c2FuZCB0YWxlbnRzIHRvIHByb3ZpZGUgYSBmbGVldCBmb3IgdGhpcyB3YXIsIEx1Y3VsbHVzIGJsb2NrZWQgdGhlIG1lYXN1cmUgYnkgd3JpdGluZyBhIGxldHRlciwgaW4gd2hpY2ggaGUgbWFkZSB0aGUgaGF1Z2h0eSBib2FzdCB0aGF0IHdpdGhvdXQgYW55IHN1Y2ggY29zdGx5IGFycmF5LCBidXQgb25seSB3aXRoIHRoZSBzaGlwcyBvZiB0aGUgYWxsaWVzLCBoZSB3b3VsZCBkcml2ZSBNaXRocmlkYXRlcyBmcm9tIHRoZSBzZWEuIEFuZCB0aGlzIHN1Y2Nlc3MgaGUgZ2FpbmVkIHdpdGggdGhlIGFzc2lzdGFuY2Ugb2YgSGVhdmVuLiBGb3IgaXQgaXMgc2FpZCB0aGF0IGl0IHdhcyBvd2luZyB0byB0aGUgd3JhdGggb2YgQXJ0ZW1pcyBvZiBQcmlhcHVzIHRoYXQgdGhlIHRlbXBlc3QgZmVsbCB1cG9uIHRoZSBtZW4gb2YgUG9udHVzLCB3aG8gaGFkIHBsdW5kZXJlZCBoZXIgc2hyaW5lIGFuZCBwdWxsZWQgZG93biBoZXIgaW1hZ2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRob3VnaCBtYW55IG5vdyBhZHZpc2VkIEx1Y3VsbHVzIHRvIHN1c3BlbmQgdGhlIHdhciwgaGUgcGFpZCBubyBoZWVkIHRvIHRoZW0sIGJ1dCB0aHJldyBoaXMgYXJteSBpbnRvIHRoZSBraW5nJ3MgY291bnRyeSBieSB3YXkgb2YgQml0aHluaWEgYW5kIEdhbGF0aWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NzMgQi5DLjwvbm90ZT4gQXQgZmlyc3QgaGUgbGFja2VkIHRoZSBuZWNlc3Nhcnkgc3VwcGxpZXMsIHNvIHRoYXQgdGhpcnR5IHRob3VzYW5kIEdhbGF0aWFucyBmb2xsb3dlZCBpbiBoaXMgdHJhaW4sIGVhY2ggY2FycnlpbmcgYSBidXNoZWwgb2YgZ3JhaW4gdXBvbiBoaXMgc2hvdWxkZXJzOyBidXQgYXMgaGUgYWR2YW5jZWQgYW5kIG1hc3RlcmVkIGV2ZXJ5dGhpbmcsIGhlIGZvdW5kIGhpbXNlbGYgaW4gdGhlIG1pZHN0IG9mIHN1Y2ggcGxlbnR5IHRoYXQgYW4gb3ggc29sZCBpbiBoaXMgY2FtcCBmb3IgYSBkcmFjaG1hLCBhbmQgYSBtYW4tc2xhdmUgZm9yIGZvdXIsIHdoaWxlIG90aGVyIGJvb3R5IGhhZCBubyB2YWx1ZSBhdCBhbGwuIFNvbWUgYWJhbmRvbmVkIGl0LCBhbmQgc29tZSBkZXN0cm95ZWQgaXQuIFRoZXJlIHdhcyBubyBzYWxlIGZvciBhbnl0aGluZyB0byBhbnlib2R5IHdoZW4gYWxsIGhhZCBzdWNoIGFidW5kYW5jZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhvdWdoIG1hbnkgbm93IGFkdmlzZWQgTHVjdWxsdXMgdG8gc3VzcGVuZCB0aGUgd2FyLCBoZSBwYWlkIG5vIGhlZWQgdG8gdGhlbSwgYnV0IHRocmV3IGhpcyBhcm15IGludG8gdGhlIGtpbmcncyBjb3VudHJ5IGJ5IHdheSBvZiBCaXRoeW5pYSBhbmQgR2FsYXRpYS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjczIEIuQy48L25vdGU+IEF0IGZpcnN0IGhlIGxhY2tlZCB0aGUgbmVjZXNzYXJ5IHN1cHBsaWVzLCBzbyB0aGF0IHRoaXJ0eSB0aG91c2FuZCBHYWxhdGlhbnMgZm9sbG93ZWQgaW4gaGlzIHRyYWluLCBlYWNoIGNhcnJ5aW5nIGEgYnVzaGVsIG9mIGdyYWluIHVwb24gaGlzIHNob3VsZGVyczsgYnV0IGFzIGhlIGFkdmFuY2VkIGFuZCBtYXN0ZXJlZCBldmVyeXRoaW5nLCBoZSBmb3VuZCBoaW1zZWxmIGluIHRoZSBtaWRzdCBvZiBzdWNoIHBsZW50eSB0aGF0IGFuIG94IHNvbGQgaW4gaGlzIGNhbXAgZm9yIGEgZHJhY2htYSwgYW5kIGEgbWFuLXNsYXZlIGZvciBmb3VyLCB3aGlsZSBvdGhlciBib290eSBoYWQgbm8gdmFsdWUgYXQgYWxsLiBTb21lIGFiYW5kb25lZCBpdCwgYW5kIHNvbWUgZGVzdHJveWVkIGl0LiBUaGVyZSB3YXMgbm8gc2FsZSBmb3IgYW55dGhpbmcgdG8gYW55Ym9keSB3aGVuIGFsbCBoYWQgc3VjaCBhYnVuZGFuY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIEx1Y3VsbHVzIG1lcmVseSB3YXN0ZWQgYW5kIHJhdmFnZWQgdGhlIGNvdW50cnkgd2l0aCBjYXZhbHJ5IGluY3Vyc2lvbnMsIHdoaWNoIHBlbmV0cmF0ZWQgdG8gVGhlbWlzY3lyYSBhbmQgdGhlIElsbGFpbnMgb2YgdGhlIHJpdmVyIFRoZXJtb2RvbiwgaGlzIHNvbGRpZXJzIGZvdW5kIGZhdWx0IHdpdGggaGltIGJlY2F1c2UgaGUgYnJvdWdodCBhbGwgdGhlIGNpdGllcyBvdmVyIHRvIGhpbSBieSBwZWFjZWFibGUgbWVhc3VyZXM7IGhlIGhhZCBub3QgdGFrZW4gYSBzaW5nbGUgb25lIGJ5IHN0b3JtLCB0aGV5IHNhaWQsIG5vciBnaXZlbiB0aGVtIGEgY2hhbmNlIHRvIGVucmljaCB0aGVtc2VsdmVzIGJ5IHBsdW5kZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksPC9xPiB0aGV5IHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXQgdGhpcyB2ZXJ5IG1vbWVudCB3ZSBhcmUgbGVhdmluZyBBbWlzdXMsIGEgcmljaCBhbmQgcHJvc3Blcm91cyBjaXR5LCB3aGljaCBpdCB3b3VsZCBiZSBubyBncmVhdCBtYXR0ZXIgdG8gdGFrZSwgaWYgaXRzIHNpZWdlIHdlcmUgcHJlc3NlZCwgYW5kIGFyZSBmb2xsb3dpbmcgb3VyIGdlbmVyYWwgaW50byB0aGUgZGVzZXJ0IG9mIHRoZSBUaWJhcmVuaSBhbmQgdGhlIENoYWxkYWVhbnMgdG8gZmlnaHQgd2l0aCBNaXRocmlkYXRlcy48L3E+IEJ1dCB0aGVzZSBncmlldmFuY2VzLCBub3QgZHJlYW1pbmcgdGhhdCB0aGV5IHdvdWxkIGJyaW5nIHRoZSBzb2xkaWVycyB0byBzdWNoIGFjdHMgb2YgbWFkbmVzcyBhcyB0aGV5IGFmdGVyd2FyZHMgcGVyZm9ybWVkLCBMdWN1bGx1cyBvdmVybG9va2VkIGFuZCBpZ25vcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMsIGhvd2V2ZXIsIG1vcmUgcmVhZHkgdG8gZGVmZW5kIGhpbXNlbGYgYWdhaW5zdCB0aG9zZSB3aG8gZGVub3VuY2VkIGhpcyBzbG93bmVzcyBpbiBsaW5nZXJpbmcgdGhlcmUgbG9uZyB3aGlsZSwgc3ViZHVpbmcgd29ydGhsZXNzIGxpdHRsZSB2aWxsYWdlcyBhbmQgY2l0aWVzLCBhbmQgYWxsb3dpbmcgTWl0aHJpZGF0ZXMgdG8gcmVjcnVpdCBoaW1zZWxmLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlzIHRoZSB2ZXJ5IHRoaW5nIEkgd2FudCwgYW5kIEkgYW0gc2l0dGluZyBoZXJlIHRvIGdldCBpdC4gSSB3YW50IHRoZSBtYW4gdG8gYmVjb21lIHBvd2VyZnVsIGFnYWluLCBhbmQgdG8gZ2V0IHRvZ2V0aGVyIGEgZm9yY2Ugd2l0aCB3aGljaCBpdCBpcyB3b3J0aCBvdXIgd2hpbGUgdG8gZmlnaHQsIGluIG9yZGVyIHRoYXQgaGUgbWF5IHN0YW5kIGhpcyBncm91bmQsIGFuZCBub3QgZmx5IHdoZW4gd2UgYXBwcm9hY2guIAoJCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5EbyB5b3Ugbm90IHNlZSB0aGF0IGhlIGhhcyBhIHZhc3QgYW5kIHRyYWNrbGVzcyBkZXNlcnQgYmVoaW5kIGhpbT8gVGhlIENhdWNhc3VzLCB0b28sIGlzIG5lYXIsIHdpdGggaXRzIG1hbnkgaGlsbHMgYW5kIGRlbGxzLCB3aGljaCBhcmUgc3VmZmljaWVudCB0byBoaWRlIGF3YXkgaW4gc2FmZXR5IHRlbiB0aG91c2FuZCBraW5ncyB3aG8gZGVjbGluZSB0byBmaWdodC4gQW5kIGl0IGlzIG9ubHkgYSBmZXcgZGF5cycgam91cm5leSBmcm9tIENhYmlyYSBpbnRvIEFybWVuaWEgYW5kIG92ZXIgQXJtZW5pYSB0aGVyZSBzaXRzIGVudGhyb25lZCBUaWdyYW5lcywgS2luZyBvZiBLaW5ncywgd2l0aCBmb3JjZXMgd2hpY2ggZW5hYmxlIGhpbSB0byBjdXQgdGhlIFBhcnRoaWFucyBvZmYgZnJvbSBBc2lhLCB0cmFuc3BsYW50IEdyZWVrIGNpdGllcyBpbnRvIE1lZGlhLCBzd2F5IFN5cmlhIGFuZCBQYWxlc3RpbmUsIHB1dCB0byBkZWF0aCB0aGUgc3VjY2Vzc29ycyBvZiBTZWxldWN1cywgYW5kIGNhcnJ5IG9mZiB0aGVpciB3aXZlcyBhbmQgZGF1Z2h0ZXJzIGludG8gY2FwdGl2aXR5LiAKCQkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBraW5nIGlzIGEga2luc21hbiBvZiBNaXRocmlkYXRlcywgaGlzIHNvbi1pbi1sYXcuIEhlIHdpbGwgbm90IGhlIGNvbnRlbnQgdG8gcmVjZWl2ZSBoaW0gYXMgYSBzdXBwbGlhbnQsIGJ1dCB3aWxsIG1ha2Ugd2FyIGFnYWluc3QgdXMuIElmIHdlIHN0cml2ZSwgdGhlcmVmb3JlLCB0byBlamVjdCBNaXRocmlkYXRlcyBmcm9tIGhpcyBraW5nZG9tLCB3ZSBzaGFsbCBydW4gdGhlIHJpc2sgb2YgZHJhd2luZyBUaWdyYW5lcyBkb3duIHVwb24gdXMuIEhlIGhhcyBsb25nIHdhbnRlZCBhbiBleGN1c2UgZm9yIGNvbWluZyBhZ2FpbnN0IHVzLCBhbmQgY291bGQgbm90IGdldCBhIGJldHRlciBvbmUgdGhhbiB0aGF0IG9mIGJlaW5nIGNvbXBlbGxlZCB0byBhaWQgYSBtYW4gd2hvIGlzIGhpcyBraW5zbWFuIGFuZCBhIGtpbmcuIFdoeSwgdGhlbiwgc2hvdWxkIHdlIGJyaW5nIHRoaXMgdG8gcGFzcywgYW5kIHRlYWNoIE1pdGhyaWRhdGVzLCB3aGVuIGhlIGRvZXMgbm90IGtub3cgaXQsIHdpdGggd2hhdCBhbGxpZXMgaGUgbXVzdCBjYXJyeSBvbiB3YXIgYWdhaW5zdCB1cz8gV2h5IGhlbHAgdG8gZHJpdmUgaGltLCBhZ2FpbnN0IGhpcyB3aXNoIGFuZCBhcyBhIGxhc3QgcmVzb3VyY2UsIGludG8gdGhlIGFybXMgb2YgVGlncmFuZXMsIGluc3RlYWQgb2YgZ2l2aW5nIGhpbSB0aW1lIHRvIGVxdWlwIGhpbXNlbGYgZnJvbSBoaXMgb3duIHJlc291cmNlcyBhbmQgZ2V0IGZyZXNoIGNvdXJhZ2U/IFRoZW4gd2Ugc2hhbGwgZmlnaHQgd2l0aCBDb2xjaGlhbnMgYW5kIFRpYmFyZW5pIGFuZCBDYXBwYWRvY2lhbnMsIHdob20gd2UgaGF2ZSBvZnRlbiBvdmVyY29tZSwgcmF0aGVyIHRoYW4gd2l0aCBNZWRlcyBhbmQgQXJtZW5pYW5zLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIEx1Y3VsbHVzIG1lcmVseSB3YXN0ZWQgYW5kIHJhdmFnZWQgdGhlIGNvdW50cnkgd2l0aCBjYXZhbHJ5IGluY3Vyc2lvbnMsIHdoaWNoIHBlbmV0cmF0ZWQgdG8gVGhlbWlzY3lyYSBhbmQgdGhlIElsbGFpbnMgb2YgdGhlIHJpdmVyIFRoZXJtb2RvbiwgaGlzIHNvbGRpZXJzIGZvdW5kIGZhdWx0IHdpdGggaGltIGJlY2F1c2UgaGUgYnJvdWdodCBhbGwgdGhlIGNpdGllcyBvdmVyIHRvIGhpbSBieSBwZWFjZWFibGUgbWVhc3VyZXM7IGhlIGhhZCBub3QgdGFrZW4gYSBzaW5nbGUgb25lIGJ5IHN0b3JtLCB0aGV5IHNhaWQsIG5vciBnaXZlbiB0aGVtIGEgY2hhbmNlIHRvIGVucmljaCB0aGVtc2VsdmVzIGJ5IHBsdW5kZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5heSw8L3E+IHRoZXkgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmF0IHRoaXMgdmVyeSBtb21lbnQgd2UgYXJlIGxlYXZpbmcgQW1pc3VzLCBhIHJpY2ggYW5kIHByb3NwZXJvdXMgY2l0eSwgd2hpY2ggaXQgd291bGQgYmUgbm8gZ3JlYXQgbWF0dGVyIHRvIHRha2UsIGlmIGl0cyBzaWVnZSB3ZXJlIHByZXNzZWQsIGFuZCBhcmUgZm9sbG93aW5nIG91ciBnZW5lcmFsIGludG8gdGhlIGRlc2VydCBvZiB0aGUgVGliYXJlbmkgYW5kIHRoZSBDaGFsZGFlYW5zIHRvIGZpZ2h0IHdpdGggTWl0aHJpZGF0ZXMuPC9xPiBCdXQgdGhlc2UgZ3JpZXZhbmNlcywgbm90IGRyZWFtaW5nIHRoYXQgdGhleSB3b3VsZCBicmluZyB0aGUgc29sZGllcnMgdG8gc3VjaCBhY3RzIG9mIG1hZG5lc3MgYXMgdGhleSBhZnRlcndhcmRzIHBlcmZvcm1lZCwgTHVjdWxsdXMgb3Zlcmxvb2tlZCBhbmQgaWdub3JlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcywgaG93ZXZlciwgbW9yZSByZWFkeSB0byBkZWZlbmQgaGltc2VsZiBhZ2FpbnN0IHRob3NlIHdobyBkZW5vdW5jZWQgaGlzIHNsb3duZXNzIGluIGxpbmdlcmluZyB0aGVyZSBsb25nIHdoaWxlLCBzdWJkdWluZyB3b3J0aGxlc3MgbGl0dGxlIHZpbGxhZ2VzIGFuZCBjaXRpZXMsIGFuZCBhbGxvd2luZyBNaXRocmlkYXRlcyB0byByZWNydWl0IGhpbXNlbGYuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGF0LDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlzIHRoZSB2ZXJ5IHRoaW5nIEkgd2FudCwgYW5kIEkgYW0gc2l0dGluZyBoZXJlIHRvIGdldCBpdC4gSSB3YW50IHRoZSBtYW4gdG8gYmVjb21lIHBvd2VyZnVsIGFnYWluLCBhbmQgdG8gZ2V0IHRvZ2V0aGVyIGEgZm9yY2Ugd2l0aCB3aGljaCBpdCBpcyB3b3J0aCBvdXIgd2hpbGUgdG8gZmlnaHQsIGluIG9yZGVyIHRoYXQgaGUgbWF5IHN0YW5kIGhpcyBncm91bmQsIGFuZCBub3QgZmx5IHdoZW4gd2UgYXBwcm9hY2guIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkRvIHlvdSBub3Qgc2VlIHRoYXQgaGUgaGFzIGEgdmFzdCBhbmQgdHJhY2tsZXNzIGRlc2VydCBiZWhpbmQgaGltPyBUaGUgQ2F1Y2FzdXMsIHRvbywgaXMgbmVhciwgd2l0aCBpdHMgbWFueSBoaWxscyBhbmQgZGVsbHMsIHdoaWNoIGFyZSBzdWZmaWNpZW50IHRvIGhpZGUgYXdheSBpbiBzYWZldHkgdGVuIHRob3VzYW5kIGtpbmdzIHdobyBkZWNsaW5lIHRvIGZpZ2h0LiBBbmQgaXQgaXMgb25seSBhIGZldyBkYXlzJyBqb3VybmV5IGZyb20gQ2FiaXJhIGludG8gQXJtZW5pYSBhbmQgb3ZlciBBcm1lbmlhIHRoZXJlIHNpdHMgZW50aHJvbmVkIFRpZ3JhbmVzLCBLaW5nIG9mIEtpbmdzLCB3aXRoIGZvcmNlcyB3aGljaCBlbmFibGUgaGltIHRvIGN1dCB0aGUgUGFydGhpYW5zIG9mZiBmcm9tIEFzaWEsIHRyYW5zcGxhbnQgR3JlZWsgY2l0aWVzIGludG8gTWVkaWEsIHN3YXkgU3lyaWEgYW5kIFBhbGVzdGluZSwgcHV0IHRvIGRlYXRoIHRoZSBzdWNjZXNzb3JzIG9mIFNlbGV1Y3VzLCBhbmQgY2Fycnkgb2ZmIHRoZWlyIHdpdmVzIGFuZCBkYXVnaHRlcnMgaW50byBjYXB0aXZpdHkuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGtpbmcgaXMgYSBraW5zbWFuIG9mIE1pdGhyaWRhdGVzLCBoaXMgc29uLWluLWxhdy4gSGUgd2lsbCBub3QgaGUgY29udGVudCB0byByZWNlaXZlIGhpbSBhcyBhIHN1cHBsaWFudCwgYnV0IHdpbGwgbWFrZSB3YXIgYWdhaW5zdCB1cy4gSWYgd2Ugc3RyaXZlLCB0aGVyZWZvcmUsIHRvIGVqZWN0IE1pdGhyaWRhdGVzIGZyb20gaGlzIGtpbmdkb20sIHdlIHNoYWxsIHJ1biB0aGUgcmlzayBvZiBkcmF3aW5nIFRpZ3JhbmVzIGRvd24gdXBvbiB1cy4gSGUgaGFzIGxvbmcgd2FudGVkIGFuIGV4Y3VzZSBmb3IgY29taW5nIGFnYWluc3QgdXMsIGFuZCBjb3VsZCBub3QgZ2V0IGEgYmV0dGVyIG9uZSB0aGFuIHRoYXQgb2YgYmVpbmcgY29tcGVsbGVkIHRvIGFpZCBhIG1hbiB3aG8gaXMgaGlzIGtpbnNtYW4gYW5kIGEga2luZy4gV2h5LCB0aGVuLCBzaG91bGQgd2UgYnJpbmcgdGhpcyB0byBwYXNzLCBhbmQgdGVhY2ggTWl0aHJpZGF0ZXMsIHdoZW4gaGUgZG9lcyBub3Qga25vdyBpdCwgd2l0aCB3aGF0IGFsbGllcyBoZSBtdXN0IGNhcnJ5IG9uIHdhciBhZ2FpbnN0IHVzPyBXaHkgaGVscCB0byBkcml2ZSBoaW0sIGFnYWluc3QgaGlzIHdpc2ggYW5kIGFzIGEgbGFzdCByZXNvdXJjZSwgaW50byB0aGUgYXJtcyBvZiBUaWdyYW5lcywgaW5zdGVhZCBvZiBnaXZpbmcgaGltIHRpbWUgdG8gZXF1aXAgaGltc2VsZiBmcm9tIGhpcyBvd24gcmVzb3VyY2VzIGFuZCBnZXQgZnJlc2ggY291cmFnZT8gVGhlbiB3ZSBzaGFsbCBmaWdodCB3aXRoIENvbGNoaWFucyBhbmQgVGliYXJlbmkgYW5kIENhcHBhZG9jaWFucywgd2hvbSB3ZSBoYXZlIG9mdGVuIG92ZXJjb21lLCByYXRoZXIgdGhhbiB3aXRoIE1lZGVzIGFuZCBBcm1lbmlhbnMuPC9xPgoJCQkgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkRvIHlvdSBub3Qgc2VlIHRoYXQgaGUgaGFzIGEgdmFzdCBhbmQgdHJhY2tsZXNzIGRlc2VydCBiZWhpbmQgaGltPyBUaGUgQ2F1Y2FzdXMsIHRvbywgaXMgbmVhciwgd2l0aCBpdHMgbWFueSBoaWxscyBhbmQgZGVsbHMsIHdoaWNoIGFyZSBzdWZmaWNpZW50IHRvIGhpZGUgYXdheSBpbiBzYWZldHkgdGVuIHRob3VzYW5kIGtpbmdzIHdobyBkZWNsaW5lIHRvIGZpZ2h0LiBBbmQgaXQgaXMgb25seSBhIGZldyBkYXlzJyBqb3VybmV5IGZyb20gQ2FiaXJhIGludG8gQXJtZW5pYSBhbmQgb3ZlciBBcm1lbmlhIHRoZXJlIHNpdHMgZW50aHJvbmVkIFRpZ3JhbmVzLCBLaW5nIG9mIEtpbmdzLCB3aXRoIGZvcmNlcyB3aGljaCBlbmFibGUgaGltIHRvIGN1dCB0aGUgUGFydGhpYW5zIG9mZiBmcm9tIEFzaWEsIHRyYW5zcGxhbnQgR3JlZWsgY2l0aWVzIGludG8gTWVkaWEsIHN3YXkgU3lyaWEgYW5kIFBhbGVzdGluZSwgcHV0IHRvIGRlYXRoIHRoZSBzdWNjZXNzb3JzIG9mIFNlbGV1Y3VzLCBhbmQgY2Fycnkgb2ZmIHRoZWlyIHdpdmVzIGFuZCBkYXVnaHRlcnMgaW50byBjYXB0aXZpdHkuIAoJCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMga2luZyBpcyBhIGtpbnNtYW4gb2YgTWl0aHJpZGF0ZXMsIGhpcyBzb24taW4tbGF3LiBIZSB3aWxsIG5vdCBoZSBjb250ZW50IHRvIHJlY2VpdmUgaGltIGFzIGEgc3VwcGxpYW50LCBidXQgd2lsbCBtYWtlIHdhciBhZ2FpbnN0IHVzLiBJZiB3ZSBzdHJpdmUsIHRoZXJlZm9yZSwgdG8gZWplY3QgTWl0aHJpZGF0ZXMgZnJvbSBoaXMga2luZ2RvbSwgd2Ugc2hhbGwgcnVuIHRoZSByaXNrIG9mIGRyYXdpbmcgVGlncmFuZXMgZG93biB1cG9uIHVzLiBIZSBoYXMgbG9uZyB3YW50ZWQgYW4gZXhjdXNlIGZvciBjb21pbmcgYWdhaW5zdCB1cywgYW5kIGNvdWxkIG5vdCBnZXQgYSBiZXR0ZXIgb25lIHRoYW4gdGhhdCBvZiBiZWluZyBjb21wZWxsZWQgdG8gYWlkIGEgbWFuIHdobyBpcyBoaXMga2luc21hbiBhbmQgYSBraW5nLiBXaHksIHRoZW4sIHNob3VsZCB3ZSBicmluZyB0aGlzIHRvIHBhc3MsIGFuZCB0ZWFjaCBNaXRocmlkYXRlcywgd2hlbiBoZSBkb2VzIG5vdCBrbm93IGl0LCB3aXRoIHdoYXQgYWxsaWVzIGhlIG11c3QgY2Fycnkgb24gd2FyIGFnYWluc3QgdXM/IFdoeSBoZWxwIHRvIGRyaXZlIGhpbSwgYWdhaW5zdCBoaXMgd2lzaCBhbmQgYXMgYSBsYXN0IHJlc291cmNlLCBpbnRvIHRoZSBhcm1zIG9mIFRpZ3JhbmVzLCBpbnN0ZWFkIG9mIGdpdmluZyBoaW0gdGltZSB0byBlcXVpcCBoaW1zZWxmIGZyb20gaGlzIG93biByZXNvdXJjZXMgYW5kIGdldCBmcmVzaCBjb3VyYWdlPyBUaGVuIHdlIHNoYWxsIGZpZ2h0IHdpdGggQ29sY2hpYW5zIGFuZCBUaWJhcmVuaSBhbmQgQ2FwcGFkb2NpYW5zLCB3aG9tIHdlIGhhdmUgb2Z0ZW4gb3ZlcmNvbWUsIHJhdGhlciB0aGFuIHdpdGggTWVkZXMgYW5kIEFybWVuaWFucy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbmZsdWVuY2VkIGJ5IHN1Y2ggY29uc2lkZXJhdGlvbnMgYXMgdGhlc2UsIEx1Y3VsbHVzIGxpbmdlcmVkIGFib3V0IEFtaXN1cywgd2l0aG91dCBwdXNoaW5nIHRoZSBzaWVnZSB2aWdvcm91c2x5LiBXaGVuIHdpbnRlciB3YXMgb3ZlciwgaGUgbGVmdCBNdXJlbmEgaW4gY2hhcmdlIG9mIHRoZSBzaWVnZSwgYW5kIG1hcmNoZWQgYWdhaW5zdCBNaXRocmlkYXRlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj43MiBCLkMuPC9ub3RlPiB3aG8gaGFkIHRha2VuIGhpcyBzdGFuZCBhdCBDYWJpcmEsIGFuZCBpbnRlbmRlZCB0byBhd2FpdCB0aGUgUm9tYW4gb25zZXQgdGhlcmUuIEEgZm9yY2Ugb2YgZm9ydHkgdGhvdXNhbmQgZm9vdG1lbiBoYWQgYmVlbiBjb2xsZWN0ZWQgYnkgaGltLCBhbmQgZm91ciB0aG91c2FuZCBob3JzZW1lbjsgb24gdGhlIGxhdHRlciBoZSBwbGFjZWQgaGlzIGNoaWVmIHJlbGlhbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Dcm9zc2luZyB0aGUgcml2ZXIgTHljdXMgYW5kIGFkdmFuY2luZyBpbnRvIHRoZSBwbGFpbiwgaGUgb2ZmZXJlZCB0aGUgUm9tYW5zIGJhdHRsZS4gQSBjYXZhbHJ5IGZpZ2h0IGVuc3VlZCwgYW5kIHRoZSBSb21hbnMgdG9vayB0byBmbGlnaHQuIFBvbXBvbml1cywgYSBtYW4gb2Ygc29tZSBub3RlLCBoYXZpbmcgYmVlbiB3b3VuZGVkLCB3YXMgdGFrZW4gcHJpc29uZXIgYW5kIGxlZCBpbnRvIHRoZSBwcmVzZW5jZSBvZiBNaXRocmlkYXRlcywgc3VmZmVyaW5nIGdyZWF0bHkgZnJvbSBoaXMgd291bmRzLiBXaGVuIHRoZSBraW5nIGFza2VkIGhpbSBpZiBoZSB3b3VsZCBiZWNvbWUgaGlzIGZyaWVuZCBwcm92aWRlZCBoZSBzcGFyZWQgaGlzIGxpZmUsIFBvbXBvbml1cyBhbnN3ZXJlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZXMsIGluZGVlZCwgaWYgeW91IGNvbWUgdG8gdGVybXMgd2l0aCB0aGUgUm9tYW5zOyBvdGhlcndpc2UgSSBtdXN0IHJlbWFpbiB5b3VyIGVuZW15LjwvcT4gTWl0aHJpZGF0ZXMgd2FzIHN0cnVjayB3aXRoIGFkbWlyYXRpb24gZm9yIGhpbSwgYW5kIGRpZCBoaW0gbm8gaGFybS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW5mbHVlbmNlZCBieSBzdWNoIGNvbnNpZGVyYXRpb25zIGFzIHRoZXNlLCBMdWN1bGx1cyBsaW5nZXJlZCBhYm91dCBBbWlzdXMsIHdpdGhvdXQgcHVzaGluZyB0aGUgc2llZ2Ugdmlnb3JvdXNseS4gV2hlbiB3aW50ZXIgd2FzIG92ZXIsIGhlIGxlZnQgTXVyZW5hIGluIGNoYXJnZSBvZiB0aGUgc2llZ2UsIGFuZCBtYXJjaGVkIGFnYWluc3QgTWl0aHJpZGF0ZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj43MiBCLkMuPC9ub3RlPiB3aG8gaGFkIHRha2VuIGhpcyBzdGFuZCBhdCBDYWJpcmEsIGFuZCBpbnRlbmRlZCB0byBhd2FpdCB0aGUgUm9tYW4gb25zZXQgdGhlcmUuIEEgZm9yY2Ugb2YgZm9ydHkgdGhvdXNhbmQgZm9vdG1lbiBoYWQgYmVlbiBjb2xsZWN0ZWQgYnkgaGltLCBhbmQgZm91ciB0aG91c2FuZCBob3JzZW1lbjsgb24gdGhlIGxhdHRlciBoZSBwbGFjZWQgaGlzIGNoaWVmIHJlbGlhbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNyb3NzaW5nIHRoZSByaXZlciBMeWN1cyBhbmQgYWR2YW5jaW5nIGludG8gdGhlIHBsYWluLCBoZSBvZmZlcmVkIHRoZSBSb21hbnMgYmF0dGxlLiBBIGNhdmFscnkgZmlnaHQgZW5zdWVkLCBhbmQgdGhlIFJvbWFucyB0b29rIHRvIGZsaWdodC4gUG9tcG9uaXVzLCBhIG1hbiBvZiBzb21lIG5vdGUsIGhhdmluZyBiZWVuIHdvdW5kZWQsIHdhcyB0YWtlbiBwcmlzb25lciBhbmQgbGVkIGludG8gdGhlIHByZXNlbmNlIG9mIE1pdGhyaWRhdGVzLCBzdWZmZXJpbmcgZ3JlYXRseSBmcm9tIGhpcyB3b3VuZHMuIFdoZW4gdGhlIGtpbmcgYXNrZWQgaGltIGlmIGhlIHdvdWxkIGJlY29tZSBoaXMgZnJpZW5kIHByb3ZpZGVkIGhlIHNwYXJlZCBoaXMgbGlmZSwgUG9tcG9uaXVzIGFuc3dlcmVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzLCBpbmRlZWQsIGlmIHlvdSBjb21lIHRvIHRlcm1zIHdpdGggdGhlIFJvbWFuczsgb3RoZXJ3aXNlIEkgbXVzdCByZW1haW4geW91ciBlbmVteS48L3E+IE1pdGhyaWRhdGVzIHdhcyBzdHJ1Y2sgd2l0aCBhZG1pcmF0aW9uIGZvciBoaW0sIGFuZCBkaWQgaGltIG5vIGhhcm0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIHdhcyBub3cgYWZyYWlkIG9mIHRoZSBwbGFpbnMsIHNpbmNlIHRoZSBlbmVteSB3YXMgc3VwZXJpb3IgaW4gY2F2YWxyeSwgYW5kIHlldCBoZXNpdGF0ZWQgdG8gZ28gZm9yd2FyZCBpbnRvIHRoZSBoaWxsIGNvdW50cnksIHdoaWNoIHdhcyByZW1vdGUsIHdvb2R5LCBhbmQgaW1wYXNzYWJsZS4gQnV0IGl0IGNoYW5jZWQgdGhhdCBjZXJ0YWluIEdyZWVrcywgd2hvIGhhZCB0YWtlbiByZWZ1Z2UgaW4gYSBzb3J0IG9mIGNhdmUsIHdlcmUgY2FwdHVyZWQsIGFuZCB0aGUgZWxkZXIgb2YgdGhlbSwgQXJ0ZW1pZG9ydXMsIHByb21pc2VkIHRvIHNlcnZlIEx1Y3VsbHVzIGFzIGEgZ3VpZGUsIGFuZCBzZXQgaGltIGluIGEgcGxhY2Ugd2hpY2ggd2FzIHNhZmUgZm9yIGhpcyBjYW1wLCBhbmQgd2hpY2ggaGFkIGEgZm9ydHJlc3Mgb3Zlcmxvb2tpbmcgQ2FiaXJhLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5MdWN1bGx1cyBwdXQgY29uZmlkZW5jZSBpbiB0aGlzIHByb21pc2UsIGFuZCBhcyBzb29uIGFzIGl0IHdhcyBuaWdodCwgbGl0IGhpcyBjYW1wIGZpcmVzIGFuZCBzZXQgb3V0LiBIZSBwYXNzZWQgc2FmZWx5IHRocm91Z2ggdGhlIG5hcnJvdyBkZWZpbGVzIGFuZCB0b29rIHBvc3Nlc3Npb24gb2YgdGhlIGRlc2lyZWQgcGxhY2UsIGFuZCBhdCBkYXlicmVhayB3YXMgc2VlbiBhYm92ZSB0aGUgZW5lbXksIHN0YXRpb25pbmcgaGlzIG1lbiBpbiBwb3NpdGlvbnMgd2hpY2ggZ2F2ZSBoaW0gYWNjZXNzIHRvIHRoZSBlbmVteSBpZiBoZSB3aXNoZWQgdG8gZmlnaHQsIGFuZCBzYWZldHkgZnJvbSB0aGVpciBhc3NhdWx0cyBpZiBoZSB3aXNoZWQgdG8ga2VlcCBxdWlldC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIHdhcyBub3cgYWZyYWlkIG9mIHRoZSBwbGFpbnMsIHNpbmNlIHRoZSBlbmVteSB3YXMgc3VwZXJpb3IgaW4gY2F2YWxyeSwgYW5kIHlldCBoZXNpdGF0ZWQgdG8gZ28gZm9yd2FyZCBpbnRvIHRoZSBoaWxsIGNvdW50cnksIHdoaWNoIHdhcyByZW1vdGUsIHdvb2R5LCBhbmQgaW1wYXNzYWJsZS4gQnV0IGl0IGNoYW5jZWQgdGhhdCBjZXJ0YWluIEdyZWVrcywgd2hvIGhhZCB0YWtlbiByZWZ1Z2UgaW4gYSBzb3J0IG9mIGNhdmUsIHdlcmUgY2FwdHVyZWQsIGFuZCB0aGUgZWxkZXIgb2YgdGhlbSwgQXJ0ZW1pZG9ydXMsIHByb21pc2VkIHRvIHNlcnZlIEx1Y3VsbHVzIGFzIGEgZ3VpZGUsIGFuZCBzZXQgaGltIGluIGEgcGxhY2Ugd2hpY2ggd2FzIHNhZmUgZm9yIGhpcyBjYW1wLCBhbmQgd2hpY2ggaGFkIGEgZm9ydHJlc3Mgb3Zlcmxvb2tpbmcgQ2FiaXJhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIHB1dCBjb25maWRlbmNlIGluIHRoaXMgcHJvbWlzZSwgYW5kIGFzIHNvb24gYXMgaXQgd2FzIG5pZ2h0LCBsaXQgaGlzIGNhbXAgZmlyZXMgYW5kIHNldCBvdXQuIEhlIHBhc3NlZCBzYWZlbHkgdGhyb3VnaCB0aGUgbmFycm93IGRlZmlsZXMgYW5kIHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGUgZGVzaXJlZCBwbGFjZSwgYW5kIGF0IGRheWJyZWFrIHdhcyBzZWVuIGFib3ZlIHRoZSBlbmVteSwgc3RhdGlvbmluZyBoaXMgbWVuIGluIHBvc2l0aW9ucyB3aGljaCBnYXZlIGhpbSBhY2Nlc3MgdG8gdGhlIGVuZW15IGlmIGhlIHdpc2hlZCB0byBmaWdodCwgYW5kIHNhZmV0eSBmcm9tIHRoZWlyIGFzc2F1bHRzIGlmIGhlIHdpc2hlZCB0byBrZWVwIHF1aWV0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgbmVpdGhlciBjb21tYW5kZXIgaGFkIGFueSBpbnRlbnRpb24gb2YgaGF6YXJkaW5nIGFuIGVuZ2FnZW1lbnQgYXQgb25jZS4gQnV0IHdlIGFyZSB0b2xkIHRoYXQgd2hpbGUgc29tZSBvZiB0aGUga2luZydzIG1lbiB3ZXJlIGNoYXNpbmcgYSBzdGFnLCB0aGUgUm9tYW5zIGN1dCB0aGVtIG9mZiBhbmQgY29uZnJvbnRlZCB0aGVtLCB3aGVyZXVwb24gYSBza2lybWlzaCBmb2xsb3dlZCwgd2l0aCBmcmVzaCBhY2Nlc3Npb25zIGNvbnRpbnVhbGx5IHRvIGVpdGhlciBzaWRlLiBBdCBsYXN0LCB0aGUga2luZydzIG1lbiB3ZXJlIHZpY3RvcmlvdXMuIFRoZW4gdGhlIFJvbWFucyBpbiB0aGVpciBjYW1wLCBiZWhvbGRpbmcgdGhlIGZsaWdodCBvZiB0aGVpciBjb21yYWRlcywgd2VyZSBpbiBkaXN0cmVzcywgYW5kIHJhbiBpbiB0aHJvbmdzIHRvIEx1Y3VsbHVzLCBiZWdnaW5nIGhpbSB0byBsZWFkIHRoZW0sIGFuZCBkZW1hbmRpbmcgdGhlIHNpZ25hbCBmb3IgYmF0dGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGUsIHdpc2hpbmcgdGhlbSB0byBsZWFybiBob3cgaW1wb3J0YW50LCBpbiBhIGRhbmdlcm91cyBzdHJ1Z2dsZSB3aXRoIHRoZSBlbmVteSwgdGhlIHZpc2libGUgcHJlc2VuY2Ugb2YgYSBwcnVkZW50IGdlbmVyYWwgaXMsIGJhZGUgdGhlbSBrZWVwIHF1aWV0LiBUaGVuIGhlIHdlbnQgZG93biBpbnRvIHRoZSBwbGFpbiBieSBoaW1zZWxmIGFuZCBjb25mcm9udGluZyB0aGUgZm9yZW1vc3Qgb2YgdGhlIGZ1Z2l0aXZlcywgYmFkZSB0aGVtIHN0b3AsIGFuZCB0dXJuIGJhY2sgd2l0aCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgb2JleWVkLCBhbmQgdGhlIHJlc3QgYWxzbyB3aGVlbGVkIGFib3V0IGFuZCBmb3JtZWQgaW4gYmF0dGxlIGFycmF5LCBhbmQgaW4gYSBzaG9ydCB0aW1lIHJvdXRlZCB0aGUgZW5lbXkgYW5kIGRyb3ZlIHRoZW0gdG8gdGhlaXIgY2FtcC4gV2hlbiBoZSBjYW1lIGJhY2ssIGhvd2V2ZXIsIEx1Y3VsbHVzIGluZmxpY3RlZCB0aGUgY3VzdG9tYXJ5IGRpc2dyYWNlIHVwb24gdGhlIGZ1Z2l0aXZlcy4gSGUgYmFkZSB0aGVtIGRpZyBhIHR3ZWx2ZSBmb290IGRpdGNoLCB3b3JraW5nIGluIHVuZ2lydCBibG91c2VzLCB3aGlsZSB0aGUgcmVzdCBvZiB0aGUgc29sZGllcnMgc3Rvb2QgYnkgYW5kIHdhdGNoZWQgdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBuZWl0aGVyIGNvbW1hbmRlciBoYWQgYW55IGludGVudGlvbiBvZiBoYXphcmRpbmcgYW4gZW5nYWdlbWVudCBhdCBvbmNlLiBCdXQgd2UgYXJlIHRvbGQgdGhhdCB3aGlsZSBzb21lIG9mIHRoZSBraW5nJ3MgbWVuIHdlcmUgY2hhc2luZyBhIHN0YWcsIHRoZSBSb21hbnMgY3V0IHRoZW0gb2ZmIGFuZCBjb25mcm9udGVkIHRoZW0sIHdoZXJldXBvbiBhIHNraXJtaXNoIGZvbGxvd2VkLCB3aXRoIGZyZXNoIGFjY2Vzc2lvbnMgY29udGludWFsbHkgdG8gZWl0aGVyIHNpZGUuIEF0IGxhc3QsIHRoZSBraW5nJ3MgbWVuIHdlcmUgdmljdG9yaW91cy4gVGhlbiB0aGUgUm9tYW5zIGluIHRoZWlyIGNhbXAsIGJlaG9sZGluZyB0aGUgZmxpZ2h0IG9mIHRoZWlyIGNvbXJhZGVzLCB3ZXJlIGluIGRpc3RyZXNzLCBhbmQgcmFuIGluIHRocm9uZ3MgdG8gTHVjdWxsdXMsIGJlZ2dpbmcgaGltIHRvIGxlYWQgdGhlbSwgYW5kIGRlbWFuZGluZyB0aGUgc2lnbmFsIGZvciBiYXR0bGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSwgd2lzaGluZyB0aGVtIHRvIGxlYXJuIGhvdyBpbXBvcnRhbnQsIGluIGEgZGFuZ2Vyb3VzIHN0cnVnZ2xlIHdpdGggdGhlIGVuZW15LCB0aGUgdmlzaWJsZSBwcmVzZW5jZSBvZiBhIHBydWRlbnQgZ2VuZXJhbCBpcywgYmFkZSB0aGVtIGtlZXAgcXVpZXQuIFRoZW4gaGUgd2VudCBkb3duIGludG8gdGhlIHBsYWluIGJ5IGhpbXNlbGYgYW5kIGNvbmZyb250aW5nIHRoZSBmb3JlbW9zdCBvZiB0aGUgZnVnaXRpdmVzLCBiYWRlIHRoZW0gc3RvcCwgYW5kIHR1cm4gYmFjayB3aXRoIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgb2JleWVkLCBhbmQgdGhlIHJlc3QgYWxzbyB3aGVlbGVkIGFib3V0IGFuZCBmb3JtZWQgaW4gYmF0dGxlIGFycmF5LCBhbmQgaW4gYSBzaG9ydCB0aW1lIHJvdXRlZCB0aGUgZW5lbXkgYW5kIGRyb3ZlIHRoZW0gdG8gdGhlaXIgY2FtcC4gV2hlbiBoZSBjYW1lIGJhY2ssIGhvd2V2ZXIsIEx1Y3VsbHVzIGluZmxpY3RlZCB0aGUgY3VzdG9tYXJ5IGRpc2dyYWNlIHVwb24gdGhlIGZ1Z2l0aXZlcy4gSGUgYmFkZSB0aGVtIGRpZyBhIHR3ZWx2ZSBmb290IGRpdGNoLCB3b3JraW5nIGluIHVuZ2lydCBibG91c2VzLCB3aGlsZSB0aGUgcmVzdCBvZiB0aGUgc29sZGllcnMgc3Rvb2QgYnkgYW5kIHdhdGNoZWQgdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGNhbXAgb2YgTWl0aHJpZGF0ZXMgdGhlcmUgd2FzIGEgRGFuZGFyaWFuIHByaW5jZSBuYW1lZCBPbHRoYWN1cyAodGhlIERhbmRhcmlhbnMgYXJlIGEgdHJpYmUgb2YgYmFyYmFyaWFucyBkd2VsbGluZyBhYm91dCBMYWtlIE1hZW90aXMpLCBhIG1hbiBjb25zcGljdW91cyBhcyBhIHNvbGRpZXIgZm9yIHF1YWxpdGllcyBvZiBzdHJlbmd0aCBhbmQgYm9sZG5lc3MsIG9mIGEgbW9zdCBleGNlbGxlbnQganVkZ21lbnQsIGFuZCB3aXRoYWwgYWZmYWJsZSBpbiBhZGRyZXNzIGFuZCBvZiBpbnNpbnVhdGluZyBtYW5uZXJzLiBUaGlzIG1hbiB3YXMgYWx3YXlzIGluIGVtdWxvdXMgcml2YWxyeSBmb3IgdGhlIHByZWNlZGVuY2Ugd2l0aCBhIGZlbGxvdyBwcmluY2Ugb2YgaGlzIHRyaWJlLCBhbmQgc28gd2FzIGxlZCB0byB1bmRlcnRha2UgYSBncmVhdCBleHBsb2l0IGZvciBNaXRocmlkYXRlcywgbmFtZWx5LCB0aGUgbXVyZGVyIG9mIEx1Y3VsbHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUga2luZyBhcHByb3ZlZCBvZiBoaXMgZGVzaWduLCBhbmQgcHVycG9zZWx5IGluZmxpY3RlZCB1cG9uIGhpbSBzdW5kcnkgbWFya3Mgb2YgZGlzZ3JhY2UsIHdoZXJldXBvbiwgcHJldGVuZGluZyB0byBiZSBlbnJhZ2VkLCBoZSBnYWxsb3BlZCBvZmYgdG8gTHVjdWxsdXMsIHdobyBnbGFkbHkgd2VsY29tZWQgaGltLCBzaW5jZSB0aGVyZSB3YXMgbXVjaCB0YWxrIG9mIGhpbSBpbiB0aGUgY2FtcC4gQWZ0ZXIgYSBzaG9ydCBwcm9iYXRpb24sIEx1Y3VsbHVzIHdhcyBzbyBwbGVhc2VkIHdpdGggaGlzIHNocmV3ZG5lc3MgYW5kIHplYWwsIHRoYXQgaGUgbWFkZSBoaW0gYSB0YWJsZSBjb21wYW5pb24sIGFuZCBhdCBsYXN0IGEgbWVtYmVyIG9mIGhpcyBjb3VuY2lsLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGNhbXAgb2YgTWl0aHJpZGF0ZXMgdGhlcmUgd2FzIGEgRGFuZGFyaWFuIHByaW5jZSBuYW1lZCBPbHRoYWN1cyAodGhlIERhbmRhcmlhbnMgYXJlIGEgdHJpYmUgb2YgYmFyYmFyaWFucyBkd2VsbGluZyBhYm91dCBMYWtlIE1hZW90aXMpLCBhIG1hbiBjb25zcGljdW91cyBhcyBhIHNvbGRpZXIgZm9yIHF1YWxpdGllcyBvZiBzdHJlbmd0aCBhbmQgYm9sZG5lc3MsIG9mIGEgbW9zdCBleGNlbGxlbnQganVkZ21lbnQsIGFuZCB3aXRoYWwgYWZmYWJsZSBpbiBhZGRyZXNzIGFuZCBvZiBpbnNpbnVhdGluZyBtYW5uZXJzLiBUaGlzIG1hbiB3YXMgYWx3YXlzIGluIGVtdWxvdXMgcml2YWxyeSBmb3IgdGhlIHByZWNlZGVuY2Ugd2l0aCBhIGZlbGxvdyBwcmluY2Ugb2YgaGlzIHRyaWJlLCBhbmQgc28gd2FzIGxlZCB0byB1bmRlcnRha2UgYSBncmVhdCBleHBsb2l0IGZvciBNaXRocmlkYXRlcywgbmFtZWx5LCB0aGUgbXVyZGVyIG9mIEx1Y3VsbHVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBraW5nIGFwcHJvdmVkIG9mIGhpcyBkZXNpZ24sIGFuZCBwdXJwb3NlbHkgaW5mbGljdGVkIHVwb24gaGltIHN1bmRyeSBtYXJrcyBvZiBkaXNncmFjZSwgd2hlcmV1cG9uLCBwcmV0ZW5kaW5nIHRvIGJlIGVucmFnZWQsIGhlIGdhbGxvcGVkIG9mZiB0byBMdWN1bGx1cywgd2hvIGdsYWRseSB3ZWxjb21lZCBoaW0sIHNpbmNlIHRoZXJlIHdhcyBtdWNoIHRhbGsgb2YgaGltIGluIHRoZSBjYW1wLiBBZnRlciBhIHNob3J0IHByb2JhdGlvbiwgTHVjdWxsdXMgd2FzIHNvIHBsZWFzZWQgd2l0aCBoaXMgc2hyZXdkbmVzcyBhbmQgemVhbCwgdGhhdCBoZSBtYWRlIGhpbSBhIHRhYmxlIGNvbXBhbmlvbiwgYW5kIGF0IGxhc3QgYSBtZW1iZXIgb2YgaGlzIGNvdW5jaWwuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB3aGVuIHRoZSBEYW5kYXJpYW4gdGhvdWdodCBoaXMgb3Bwb3J0dW5pdHkgaGFkIGNvbWUsIGhlIG9yZGVyZWQgaGlzIHNsYXZlcyB0byBsZWFkIGhpcyBob3JzZSBvdXRzaWRlIHRoZSBjYW1wLCB3aGlsZSBoZSBoaW1zZWxmLCBhdCBtaWQtZGF5LCB3aGVuIHRoZSBzb2xkaWVycyB3ZXJlIGx5aW5nIGFyb3VuZCBlbmpveWluZyB0aGVpciByZXN0LCB3ZW50IHRvIHRoZSBnZW5lcmFsJ3MgdGVudC4gSGUgdGhvdWdodCBubyBvbmUgd291bGQgZGVueSBlbnRyYW5jZSB0byBhIG1hbiB3aG8gd2FzIGFuIGludGltYXRlIG9mIHRoZSBnZW5lcmFsLCBhbmQgc2FpZCBoZSBicm91Z2h0IGhpbSBjZXJ0YWluIG1lc3NhZ2VzIG9mIGdyZWF0IGltcG9ydGFuY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSB3b3VsZCBoYXZlIGVudGVyZWQgd2l0aG91dCBsZXQgb3IgaGluZHJhbmNlLCBoYWQgbm90IHNsZWVwLCB0aGUgZGVzdHJveWVyIG9mIG1hbnkgZ2VuZXJhbHMsIHNhdmVkIEx1Y3VsbHVzLiBGb3IgaXQgY2hhbmNlZCB0aGF0IGhlIHdhcyBhc2xlZXAsIGFuZCBNZW5lZGVtdXMsIG9uZSBvZiBoaXMgY2hhbWJlcmxhaW5zLCB3aG8gc3Rvb2QgYXQgdGhlIHRlbnQtZG9vciwgdG9sZCBPbHRoYWN1cyB0aGF0IGhlIGhhZCBjb21lIGF0IGFuIGlub3Bwb3J0dW5lIHRpbWUsIHNpbmNlIEx1Y3VsbHVzIGhhZCBqdXN0IGJldGFrZW4gaGltc2VsZiB0byByZXN0IGFmdGVyIGhpcyBsb25nIHdhdGNoaW5nIGFuZCBtYW55IGhhcmRzaGlwcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+T2x0aGFjdXMgZGlkIG5vdCByZXRpcmUgYXQgdGhlIGJpZGRpbmcgb2YgTWVuZWRlbXVzLCBidXQgZGVjbGFyZWQgdGhhdCBldmVuIGluIHNwaXRlIG9mIGhpbSBoZSB3b3VsZCBnbyBpbiwgc2luY2UgaGUgd2lzaGVkIHRvIGNvbmZlciB3aXRoIHRoZSBnZW5lcmFsIG9uIHVyZ2VudCBidXNpbmVzcyBvZiBncmVhdCBpbXBvcnRhbmNlLiBUaGVuIE1lbmVkZW11cyBnb3QgYW5ncnksIGRlY2xhcmVkIHRoYXQgbm90aGluZyB3YXMgbW9yZSB1cmdlbnQgdGhhbiB0aGUgcHJlc2VydmF0aW9uIG9mIEx1Y3VsbHVzLCBhbmQgcHVzaGVkIHRoZSBtYW4gYXdheSB3aXRoIGJvdGggaGFuZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gT2x0aGFjdXMsIGluIGZlYXIsIGxlZnQgdGhlIGNhbXAsIHRvb2sgaG9yc2UsIGFuZCByb2RlIG9mZiB0byB0aGUgY2FtcCBvZiBNaXRocmlkYXRlcywgd2l0aG91dCBlZmZlY3RpbmcgaGlzIHB1cnBvc2UuIFNvIHRydWUgaXMgaXQgdGhhdCBpbiBhY3RpdmUgbGlmZSwgYXMgd2VsbCBhcyBpbiBzaWNrbmVzcywgaXQgaXMgdGhlIGNyaXRpY2FsIG1vbWVudCB3aGljaCBnaXZlcyB0aGUgc2NhbGVzIHRoZWlyIHNhdmluZyBvciB0aGVpciBmYXRhbCBpbmNsaW5hdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB3aGVuIHRoZSBEYW5kYXJpYW4gdGhvdWdodCBoaXMgb3Bwb3J0dW5pdHkgaGFkIGNvbWUsIGhlIG9yZGVyZWQgaGlzIHNsYXZlcyB0byBsZWFkIGhpcyBob3JzZSBvdXRzaWRlIHRoZSBjYW1wLCB3aGlsZSBoZSBoaW1zZWxmLCBhdCBtaWQtZGF5LCB3aGVuIHRoZSBzb2xkaWVycyB3ZXJlIGx5aW5nIGFyb3VuZCBlbmpveWluZyB0aGVpciByZXN0LCB3ZW50IHRvIHRoZSBnZW5lcmFsJ3MgdGVudC4gSGUgdGhvdWdodCBubyBvbmUgd291bGQgZGVueSBlbnRyYW5jZSB0byBhIG1hbiB3aG8gd2FzIGFuIGludGltYXRlIG9mIHRoZSBnZW5lcmFsLCBhbmQgc2FpZCBoZSBicm91Z2h0IGhpbSBjZXJ0YWluIG1lc3NhZ2VzIG9mIGdyZWF0IGltcG9ydGFuY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSB3b3VsZCBoYXZlIGVudGVyZWQgd2l0aG91dCBsZXQgb3IgaGluZHJhbmNlLCBoYWQgbm90IHNsZWVwLCB0aGUgZGVzdHJveWVyIG9mIG1hbnkgZ2VuZXJhbHMsIHNhdmVkIEx1Y3VsbHVzLiBGb3IgaXQgY2hhbmNlZCB0aGF0IGhlIHdhcyBhc2xlZXAsIGFuZCBNZW5lZGVtdXMsIG9uZSBvZiBoaXMgY2hhbWJlcmxhaW5zLCB3aG8gc3Rvb2QgYXQgdGhlIHRlbnQtZG9vciwgdG9sZCBPbHRoYWN1cyB0aGF0IGhlIGhhZCBjb21lIGF0IGFuIGlub3Bwb3J0dW5lIHRpbWUsIHNpbmNlIEx1Y3VsbHVzIGhhZCBqdXN0IGJldGFrZW4gaGltc2VsZiB0byByZXN0IGFmdGVyIGhpcyBsb25nIHdhdGNoaW5nIGFuZCBtYW55IGhhcmRzaGlwcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9sdGhhY3VzIGRpZCBub3QgcmV0aXJlIGF0IHRoZSBiaWRkaW5nIG9mIE1lbmVkZW11cywgYnV0IGRlY2xhcmVkIHRoYXQgZXZlbiBpbiBzcGl0ZSBvZiBoaW0gaGUgd291bGQgZ28gaW4sIHNpbmNlIGhlIHdpc2hlZCB0byBjb25mZXIgd2l0aCB0aGUgZ2VuZXJhbCBvbiB1cmdlbnQgYnVzaW5lc3Mgb2YgZ3JlYXQgaW1wb3J0YW5jZS4gVGhlbiBNZW5lZGVtdXMgZ290IGFuZ3J5LCBkZWNsYXJlZCB0aGF0IG5vdGhpbmcgd2FzIG1vcmUgdXJnZW50IHRoYW4gdGhlIHByZXNlcnZhdGlvbiBvZiBMdWN1bGx1cywgYW5kIHB1c2hlZCB0aGUgbWFuIGF3YXkgd2l0aCBib3RoIGhhbmRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gT2x0aGFjdXMsIGluIGZlYXIsIGxlZnQgdGhlIGNhbXAsIHRvb2sgaG9yc2UsIGFuZCByb2RlIG9mZiB0byB0aGUgY2FtcCBvZiBNaXRocmlkYXRlcywgd2l0aG91dCBlZmZlY3RpbmcgaGlzIHB1cnBvc2UuIFNvIHRydWUgaXMgaXQgdGhhdCBpbiBhY3RpdmUgbGlmZSwgYXMgd2VsbCBhcyBpbiBzaWNrbmVzcywgaXQgaXMgdGhlIGNyaXRpY2FsIG1vbWVudCB3aGljaCBnaXZlcyB0aGUgc2NhbGVzIHRoZWlyIHNhdmluZyBvciB0aGVpciBmYXRhbCBpbmNsaW5hdGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgU29ybmF0aXVzIHdhcyBzZW50IHdpdGggdGVuIGNvaG9ydHMgdG8gZ2V0IHN1cHBsaWVzIG9mIGdyYWluLiBCZWluZyBwdXJzdWVkIGJ5IE1lbmFuZGVyLCBvbmUgb2YgdGhlIGdlbmVyYWxzIG9mIE1pdGhyaWRhdGVzLCBoZSBmYWNlZCBhYm91dCwgam9pbmVkIGJhdHRsZSwgYW5kIHJvdXRlZCB0aGUgZW5lbXkgd2l0aCBncmVhdCBzbGF1Z2h0ZXIuIEFuZCBhZ2Fpbiwgd2hlbiBBZHJpYW4gd2FzIHNlbnQgb3V0IHdpdGggYSBmb3JjZSB0byBwcm9jdXJlIGFuIGFidW5kYW5jZSBvZiBncmFpbiBmb3IgdGhlIHNvbGRpZXJzLCBNaXRocmlkYXRlcyBkaWQgbm90IGxvb2sgb24gaWRseSwgYnV0IGRpc3BhdGNoZWQgTWVuZW1hY2h1cyBhbmQgTXlyb24sIGF0IHRoZSBoZWFkIG9mIGEgbGFyZ2UgYm9keSBvZiBjYXZhbHJ5IGFuZCBmb290bWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhlc2UsIGl0IGlzIHNhaWQsIGV4Y2VwdCB0d28sIHdlcmUgY3V0IHRvIHBpZWNlcyBieSB0aGUgUm9tYW5zLiBNaXRocmlkYXRlcyB0cmllZCB0byBjb25jZWFsIHRoZSBleHRlbnQgb2YgdGhlIGRpc2FzdGVyLCBwcmV0ZW5kaW5nIHRoYXQgaXQgd2FzIGEgc2xpZ2h0IG1hdHRlciwgYW5kIGR1ZSB0byB0aGUgaW5leHBlcmllbmNlIG9mIGhpcyBnZW5lcmFscy4gQnV0IHdoZW4gQWRyaWFuIG1hcmNoZWQgcG9tcG91c2x5IHBhc3QgaGlzIGNhbXAsIGNvbnZveWluZyBtYW55IHdhZ2dvbnMgbGFkZW4gd2l0aCBncmFpbiBhbmQgYm9vdHksIGEgZ3JlYXQgZGVzcGFpciBmZWxsIHVwb24gdGhlIGtpbmcsIGFuZCBjb25mdXNpb24gYW5kIGhlbHBsZXNzIGZlYXIgdXBvbiBoaXMgc29sZGllcnMuIFRoZXkgZGVjaWRlZCwgdGhlcmVmb3JlLCB0byByZW1haW4gd2hlcmUgdGhleSB3ZXJlIG5vIGxvbmdlci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIGtpbmcncyBzZXJ2YW50cyB0cmllZCB0byBzZW5kIGF3YXkgdGhlaXIgb3duIGJhZ2dhZ2UgZmlyc3QsIGFuZCB0byBoaW5kZXIgdGhlIHJlc3QgZnJvbSBnb2luZywgdGhlIHNvbGRpZXJzIGF0IG9uY2UgZ290IGFuZ3J5LCBwdXNoZWQgYW5kIGZvcmNlZCB0aGVpciB3YXkgdG8gdGhlIGV4aXRzIG9mIHRoZSBjYW1wLCBhbmQgdGhlcmUgcGx1bmRlcmVkIHRoZSBiYWdnYWdlIGFuZCBzbGV3IHRoZSBtZW4gaW4gY2hhcmdlIG9mIGl0LiBUaGVyZSBpdCB3YXMgdGhhdCBEb3J5bGHDvHMsIHRoZSBnZW5lcmFsLCB3aXRoIG5vdGhpbmcgZWxzZSBhYm91dCBoaW0gYnV0IGhpcyBwdXJwbGUgcm9iZSwgbG9zdCBoaXMgbGlmZSBmb3IgdGhhdCwgYW5kIEhlcm1hZXVzLCB0aGUgcHJpZXN0LCB3YXMgdHJhbXBsZWQgdG8gZGVhdGggYXQgdGhlIGdhdGVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgU29ybmF0aXVzIHdhcyBzZW50IHdpdGggdGVuIGNvaG9ydHMgdG8gZ2V0IHN1cHBsaWVzIG9mIGdyYWluLiBCZWluZyBwdXJzdWVkIGJ5IE1lbmFuZGVyLCBvbmUgb2YgdGhlIGdlbmVyYWxzIG9mIE1pdGhyaWRhdGVzLCBoZSBmYWNlZCBhYm91dCwgam9pbmVkIGJhdHRsZSwgYW5kIHJvdXRlZCB0aGUgZW5lbXkgd2l0aCBncmVhdCBzbGF1Z2h0ZXIuIEFuZCBhZ2Fpbiwgd2hlbiBBZHJpYW4gd2FzIHNlbnQgb3V0IHdpdGggYSBmb3JjZSB0byBwcm9jdXJlIGFuIGFidW5kYW5jZSBvZiBncmFpbiBmb3IgdGhlIHNvbGRpZXJzLCBNaXRocmlkYXRlcyBkaWQgbm90IGxvb2sgb24gaWRseSwgYnV0IGRpc3BhdGNoZWQgTWVuZW1hY2h1cyBhbmQgTXlyb24sIGF0IHRoZSBoZWFkIG9mIGEgbGFyZ2UgYm9keSBvZiBjYXZhbHJ5IGFuZCBmb290bWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGVzZSwgaXQgaXMgc2FpZCwgZXhjZXB0IHR3bywgd2VyZSBjdXQgdG8gcGllY2VzIGJ5IHRoZSBSb21hbnMuIE1pdGhyaWRhdGVzIHRyaWVkIHRvIGNvbmNlYWwgdGhlIGV4dGVudCBvZiB0aGUgZGlzYXN0ZXIsIHByZXRlbmRpbmcgdGhhdCBpdCB3YXMgYSBzbGlnaHQgbWF0dGVyLCBhbmQgZHVlIHRvIHRoZSBpbmV4cGVyaWVuY2Ugb2YgaGlzIGdlbmVyYWxzLiBCdXQgd2hlbiBBZHJpYW4gbWFyY2hlZCBwb21wb3VzbHkgcGFzdCBoaXMgY2FtcCwgY29udm95aW5nIG1hbnkgd2FnZ29ucyBsYWRlbiB3aXRoIGdyYWluIGFuZCBib290eSwgYSBncmVhdCBkZXNwYWlyIGZlbGwgdXBvbiB0aGUga2luZywgYW5kIGNvbmZ1c2lvbiBhbmQgaGVscGxlc3MgZmVhciB1cG9uIGhpcyBzb2xkaWVycy4gVGhleSBkZWNpZGVkLCB0aGVyZWZvcmUsIHRvIHJlbWFpbiB3aGVyZSB0aGV5IHdlcmUgbm8gbG9uZ2VyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBraW5nJ3Mgc2VydmFudHMgdHJpZWQgdG8gc2VuZCBhd2F5IHRoZWlyIG93biBiYWdnYWdlIGZpcnN0LCBhbmQgdG8gaGluZGVyIHRoZSByZXN0IGZyb20gZ29pbmcsIHRoZSBzb2xkaWVycyBhdCBvbmNlIGdvdCBhbmdyeSwgcHVzaGVkIGFuZCBmb3JjZWQgdGhlaXIgd2F5IHRvIHRoZSBleGl0cyBvZiB0aGUgY2FtcCwgYW5kIHRoZXJlIHBsdW5kZXJlZCB0aGUgYmFnZ2FnZSBhbmQgc2xldyB0aGUgbWVuIGluIGNoYXJnZSBvZiBpdC4gVGhlcmUgaXQgd2FzIHRoYXQgRG9yeWxhw7xzLCB0aGUgZ2VuZXJhbCwgd2l0aCBub3RoaW5nIGVsc2UgYWJvdXQgaGltIGJ1dCBoaXMgcHVycGxlIHJvYmUsIGxvc3QgaGlzIGxpZmUgZm9yIHRoYXQsIGFuZCBIZXJtYWV1cywgdGhlIHByaWVzdCwgd2FzIHRyYW1wbGVkIHRvIGRlYXRoIGF0IHRoZSBnYXRlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TWl0aHJpZGF0ZXMgaGltc2VsZiwgd2l0aCBubyBhdHRlbmRhbnQgb3IgZ3Jvb20gdG8gYXNzaXN0IGhpbSwgZmxlZCBhd2F5IGZyb20gdGhlIGNhbXAgaW4gdGhlIG1pZHN0IG9mIHRoZSB0aHJvbmcsIG5vdCBldmVuIHByb3ZpZGVkIHdpdGggb25lIG9mIHRoZSByb3lhbCBob3JzZXM7IGJ1dCBhdCBsYXN0IHRoZSBldW51Y2ggUHRvbGVtYWV1cywgd2hvIHdhcyBtb3VudGVkLCBzcGllZCBoaW0gYXMgaGUgd2FzIGJvcm5lIGFsb25nIGluIHRoZSB0b3JyZW50IG9mIHRoZSByb3V0LCBsZWFwZWQgZG93biBmcm9tIGhpcyBob3JzZSwgYW5kIGdhdmUgaXQgdG8gdGhlIGtpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlByZXNlbnRseSB0aGUgUm9tYW5zLCB3aG8gd2VyZSBmb3JjaW5nIHRoZSBwdXJzdWl0LCB3ZXJlIGhhcmQgdXBvbiBoaW0sIGFuZCBpdCB3YXMgZm9yIG5vIGxhY2sgb2Ygc3BlZWQgdGhhdCB0aGV5IGRpZCBub3QgdGFrZSBoaW0uIEluZGVlZCwgdGhleSB3ZXJlIHZlcnkgbmVhciBkb2luZyBzbywgYnV0IGdyZWVkLCBhbmQgcGV0dHkgc29sZGllcidzIGF2YXJpY2UsIHNuYXRjaGVkIGZyb20gdGhlbSB0aGUgcXVhcnJ5IHdoaWNoIHRoZXkgaGFkIHNvIGxvbmcgcHVyc3VlZCBpbiBtYW55IHN0cnVnZ2xlcyBhbmQgZ3JlYXQgZGFuZ2VycywgYW5kIHJvYmJlZCBMdWN1bGx1cyBvZiB0aGUgdmljdG9yJ3MgcHJpemUuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgaG9yc2Ugd2hpY2ggY2FycmllZCB0aGUga2luZyB3YXMganVzdCB3aXRoaW4gcmVhY2ggb2YgaGlzIHB1cnN1ZXJzLCB3aGVuIG9uZSBvZiB0aGUgbXVsZXMgd2hpY2ggY2FycmllZCB0aGUgcm95YWwgZ29sZCBjYW1lIGJldHdlZW4gaGltIGFuZCB0aGVtLCBlaXRoZXIgb2YgaGlzIG93biBhY2NvcmQsIG9yIGJlY2F1c2UgdGhlIGtpbmcgcHVycG9zZWx5IHNlbnQgaGltIGludG8gdGhlIHBhdGggb2YgcHVyc3VpdC4gVGhlIHNvbGRpZXJzIGZlbGwgdG8gcGx1bmRlcmluZyBhbmQgY29sbGVjdGluZyB0aGUgZ29sZCwgZm91Z2h0IHdpdGggb25lIGFub3RoZXIgb3ZlciBpdCwgYW5kIHNvIHdlcmUgbGVmdCBiZWhpbmQgaW4gdGhlIGNoYXNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3Igd2FzIHRoaXMgdGhlIG9ubHkgZnJ1aXQgb2YgdGhlaXIgZ3JlZWQgd2hpY2ggTHVjdWxsdXMgcmVhcGVkLiBIZSBoYWQgZ2l2ZW4gb3JkZXJzIHRoYXQgQ2FsbGlzdHJhdHVzLCB3aG8gd2FzIGluIGNoYXJnZSBvZiB0aGUga2luZydzIHByaXZhdGUgcGFwZXJzLCBzaG91bGQgYmUgYnJvdWdodCBhbGl2ZSB0byBoaW0sIGJ1dCBoaXMgY29uZHVjdG9ycywgZmluZGluZyB0aGF0IGhlIGhhZCBmaXZlIGh1bmRyZWQgcGllY2VzIG9mIGdvbGQgaW4gaGlzIGdpcmRsZSwgc2xldyBoaW0uIEhvd2V2ZXIsIEx1Y3VsbHVzIGFsbG93ZWQgc3VjaCBzb2xkaWVycyBhcyB0aGVzZSB0byBwbHVuZGVyIHRoZSBlbmVteSdzIGNhbXAuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1pdGhyaWRhdGVzIGhpbXNlbGYsIHdpdGggbm8gYXR0ZW5kYW50IG9yIGdyb29tIHRvIGFzc2lzdCBoaW0sIGZsZWQgYXdheSBmcm9tIHRoZSBjYW1wIGluIHRoZSBtaWRzdCBvZiB0aGUgdGhyb25nLCBub3QgZXZlbiBwcm92aWRlZCB3aXRoIG9uZSBvZiB0aGUgcm95YWwgaG9yc2VzOyBidXQgYXQgbGFzdCB0aGUgZXVudWNoIFB0b2xlbWFldXMsIHdobyB3YXMgbW91bnRlZCwgc3BpZWQgaGltIGFzIGhlIHdhcyBib3JuZSBhbG9uZyBpbiB0aGUgdG9ycmVudCBvZiB0aGUgcm91dCwgbGVhcGVkIGRvd24gZnJvbSBoaXMgaG9yc2UsIGFuZCBnYXZlIGl0IHRvIHRoZSBraW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlByZXNlbnRseSB0aGUgUm9tYW5zLCB3aG8gd2VyZSBmb3JjaW5nIHRoZSBwdXJzdWl0LCB3ZXJlIGhhcmQgdXBvbiBoaW0sIGFuZCBpdCB3YXMgZm9yIG5vIGxhY2sgb2Ygc3BlZWQgdGhhdCB0aGV5IGRpZCBub3QgdGFrZSBoaW0uIEluZGVlZCwgdGhleSB3ZXJlIHZlcnkgbmVhciBkb2luZyBzbywgYnV0IGdyZWVkLCBhbmQgcGV0dHkgc29sZGllcidzIGF2YXJpY2UsIHNuYXRjaGVkIGZyb20gdGhlbSB0aGUgcXVhcnJ5IHdoaWNoIHRoZXkgaGFkIHNvIGxvbmcgcHVyc3VlZCBpbiBtYW55IHN0cnVnZ2xlcyBhbmQgZ3JlYXQgZGFuZ2VycywgYW5kIHJvYmJlZCBMdWN1bGx1cyBvZiB0aGUgdmljdG9yJ3MgcHJpemUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgaG9yc2Ugd2hpY2ggY2FycmllZCB0aGUga2luZyB3YXMganVzdCB3aXRoaW4gcmVhY2ggb2YgaGlzIHB1cnN1ZXJzLCB3aGVuIG9uZSBvZiB0aGUgbXVsZXMgd2hpY2ggY2FycmllZCB0aGUgcm95YWwgZ29sZCBjYW1lIGJldHdlZW4gaGltIGFuZCB0aGVtLCBlaXRoZXIgb2YgaGlzIG93biBhY2NvcmQsIG9yIGJlY2F1c2UgdGhlIGtpbmcgcHVycG9zZWx5IHNlbnQgaGltIGludG8gdGhlIHBhdGggb2YgcHVyc3VpdC4gVGhlIHNvbGRpZXJzIGZlbGwgdG8gcGx1bmRlcmluZyBhbmQgY29sbGVjdGluZyB0aGUgZ29sZCwgZm91Z2h0IHdpdGggb25lIGFub3RoZXIgb3ZlciBpdCwgYW5kIHNvIHdlcmUgbGVmdCBiZWhpbmQgaW4gdGhlIGNoYXNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk5vciB3YXMgdGhpcyB0aGUgb25seSBmcnVpdCBvZiB0aGVpciBncmVlZCB3aGljaCBMdWN1bGx1cyByZWFwZWQuIEhlIGhhZCBnaXZlbiBvcmRlcnMgdGhhdCBDYWxsaXN0cmF0dXMsIHdobyB3YXMgaW4gY2hhcmdlIG9mIHRoZSBraW5nJ3MgcHJpdmF0ZSBwYXBlcnMsIHNob3VsZCBiZSBicm91Z2h0IGFsaXZlIHRvIGhpbSwgYnV0IGhpcyBjb25kdWN0b3JzLCBmaW5kaW5nIHRoYXQgaGUgaGFkIGZpdmUgaHVuZHJlZCBwaWVjZXMgb2YgZ29sZCBpbiBoaXMgZ2lyZGxlLCBzbGV3IGhpbS4gSG93ZXZlciwgTHVjdWxsdXMgYWxsb3dlZCBzdWNoIHNvbGRpZXJzIGFzIHRoZXNlIHRvIHBsdW5kZXIgdGhlIGVuZW15J3MgY2FtcC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gY2FwdHVyaW5nIENhYmlyYSBhbmQgbW9zdCBvZiB0aGUgb3RoZXIgc3Ryb25naG9sZHMsIGhlIGZvdW5kIGdyZWF0IHRyZWFzdXJlcywgYW5kIG1hbnkgcHJpc29ucywgaW4gd2hpY2ggbWFueSBHcmVla3MgYW5kIG1hbnkga2luc2ZvbGsgb2YgdGhlIGtpbmcgd2VyZSBjb25maW5lZC4gQXMgdGhleSBoYWQgbG9uZyBiZWVuIGdpdmVuIHVwIGZvciBkZWFkLCBpdCB3YXMgbm90IHNvIG11Y2ggYSByZXNjdWUgYXMgaXQgd2FzIGEgcmVzdXJyZWN0aW9uIGFuZCBhIHNvcnQgb2Ygc2Vjb25kIGJpcnRoLCBmb3Igd2hpY2ggdGhleSB3ZXJlIGluZGVidGVkIHRvIHRoZSBmYXZvdXIgb2YgTHVjdWxsdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk55c3NhLCBhIHNpc3RlciBvZiBNaXRocmlkYXRlcywgd2FzIGFsc28gY2FwdHVyZWQ7IGFuZCBoZXIgY2FwdHVyZSB3YXMgaGVyIHNhbHZhdGlvbi4gQnV0IHRoZSBzaXN0ZXJzIGFuZCB3aXZlcyBvZiB0aGUga2luZyB3aG8gd2VyZSB0aG91Z2h0IHRvIGJlIGF0IGZhcnRoZXN0IHJlbW92ZSBmcm9tIGRhbmdlciBhbmQgcXVpZXRseSBoaWRkZW4gYXdheSBpbiBQaGFybmFjaWEsIHBlcmlzaGVkIHBpdGlmdWxseSwgc2luY2UgTWl0aHJpZGF0ZXMgcGF1c2VkIGxvbmcgZW5vdWdoIGluIGhpcyBmbGlnaHQgdG8gc2VuZCBCYWNjaGlkZXMsIGEgZXVudWNoLCB0byBjb21wYXNzIHRoZWlyIGRlYXRoLiBBbW9uZyBtYW55IG90aGVyIHdvbWVuLCB0aGVyZSB3ZXJlIHR3byBzaXN0ZXJzIG9mIHRoZSBraW5nLCBSb3hhbmEgYW5kIFN0YXRpcmEsIGFib3V0IGZvcnR5IHllYXJzIG9sZCBhbmQgdW5tYXJyaWVkOyBhbmQgdHdvIG9mIGhpcyB3aXZlcywgb2YgSW9uaWFuIGZhbWlsaWVzLCBCZXJlbmljw6kgZnJvbSBDaGlvcywgYW5kIE1vbmltw6ksIGEgTWlsZXNpYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsYXR0ZXIgd2FzIG1vc3QgdGFsa2VkIG9mIGFtb25nIHRoZSBHcmVla3MsIHRvIHRoZSBlZmZlY3QgdGhhdCB0aG91Z2ggdGhlIGtpbmcgdGVtcHRlZCBoZXIgdmlydHVlIGFuZCBzZW50IGhlciBmaWZ0ZWVuIHRob3VzYW5kIHBpZWNlcyBvZiBnb2xkLCBzaGUgcmVzaXN0ZWQgaGlzIGFkdmFuY2VzLCB1bnRpbCBoZSBlbnRlcmVkIGludG8gYSBtYXJyaWFnZSBjb250cmFjdCB3aXRoIGhlciwgc2VudCBoZXIgYSBkaWFkZW0sIGFuZCBncmVldGVkIGhlciB3aXRoIHRoZSB0aXRsZSBvZiBRdWVlbi4gQnV0IGhlciBtYXJyaWFnZSBoYWQgYmVlbiBhbiB1bmhhcHB5IG9uZSwgYW5kIHNoZSBiZXdhaWxlZCB0aGF0IGJlYXV0eSB3aGljaCBoYWQgcHJvY3VyZWQgaGVyIGEgbWFzdGVyIGluc3RlYWQgb2YgYSBodXNiYW5kLCBhbmQgYSBndWFyZCBvZiBCYXJiYXJpYW5zIGluc3RlYWQgb2YgaG9tZSBhbmQgZmFtaWx5LCBkd2VsbGluZyBhcyBzaGUgZGlkIGZhciwgZmFyIGF3YXkgZnJvbSBHcmVlY2UsIHdoZXJlIHRoZSBibGVzc2luZ3MgZm9yIHdoaWNoIHNoZSBoYWQgaG9wZWQgZXhpc3RlZCBvbmx5IGluIGhlciBkcmVhbXMsIHdoaWxlIHNoZSB3YXMgYmVyZWZ0IG9mIHRoZSByZWFsIGJsZXNzaW5ncyB0byB3aGljaCBzaGUgaGFkIGJlZW4gd29udGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gY2FwdHVyaW5nIENhYmlyYSBhbmQgbW9zdCBvZiB0aGUgb3RoZXIgc3Ryb25naG9sZHMsIGhlIGZvdW5kIGdyZWF0IHRyZWFzdXJlcywgYW5kIG1hbnkgcHJpc29ucywgaW4gd2hpY2ggbWFueSBHcmVla3MgYW5kIG1hbnkga2luc2ZvbGsgb2YgdGhlIGtpbmcgd2VyZSBjb25maW5lZC4gQXMgdGhleSBoYWQgbG9uZyBiZWVuIGdpdmVuIHVwIGZvciBkZWFkLCBpdCB3YXMgbm90IHNvIG11Y2ggYSByZXNjdWUgYXMgaXQgd2FzIGEgcmVzdXJyZWN0aW9uIGFuZCBhIHNvcnQgb2Ygc2Vjb25kIGJpcnRoLCBmb3Igd2hpY2ggdGhleSB3ZXJlIGluZGVidGVkIHRvIHRoZSBmYXZvdXIgb2YgTHVjdWxsdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk55c3NhLCBhIHNpc3RlciBvZiBNaXRocmlkYXRlcywgd2FzIGFsc28gY2FwdHVyZWQ7IGFuZCBoZXIgY2FwdHVyZSB3YXMgaGVyIHNhbHZhdGlvbi4gQnV0IHRoZSBzaXN0ZXJzIGFuZCB3aXZlcyBvZiB0aGUga2luZyB3aG8gd2VyZSB0aG91Z2h0IHRvIGJlIGF0IGZhcnRoZXN0IHJlbW92ZSBmcm9tIGRhbmdlciBhbmQgcXVpZXRseSBoaWRkZW4gYXdheSBpbiBQaGFybmFjaWEsIHBlcmlzaGVkIHBpdGlmdWxseSwgc2luY2UgTWl0aHJpZGF0ZXMgcGF1c2VkIGxvbmcgZW5vdWdoIGluIGhpcyBmbGlnaHQgdG8gc2VuZCBCYWNjaGlkZXMsIGEgZXVudWNoLCB0byBjb21wYXNzIHRoZWlyIGRlYXRoLiBBbW9uZyBtYW55IG90aGVyIHdvbWVuLCB0aGVyZSB3ZXJlIHR3byBzaXN0ZXJzIG9mIHRoZSBraW5nLCBSb3hhbmEgYW5kIFN0YXRpcmEsIGFib3V0IGZvcnR5IHllYXJzIG9sZCBhbmQgdW5tYXJyaWVkOyBhbmQgdHdvIG9mIGhpcyB3aXZlcywgb2YgSW9uaWFuIGZhbWlsaWVzLCBCZXJlbmljw6kgZnJvbSBDaGlvcywgYW5kIE1vbmltw6ksIGEgTWlsZXNpYW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsYXR0ZXIgd2FzIG1vc3QgdGFsa2VkIG9mIGFtb25nIHRoZSBHcmVla3MsIHRvIHRoZSBlZmZlY3QgdGhhdCB0aG91Z2ggdGhlIGtpbmcgdGVtcHRlZCBoZXIgdmlydHVlIGFuZCBzZW50IGhlciBmaWZ0ZWVuIHRob3VzYW5kIHBpZWNlcyBvZiBnb2xkLCBzaGUgcmVzaXN0ZWQgaGlzIGFkdmFuY2VzLCB1bnRpbCBoZSBlbnRlcmVkIGludG8gYSBtYXJyaWFnZSBjb250cmFjdCB3aXRoIGhlciwgc2VudCBoZXIgYSBkaWFkZW0sIGFuZCBncmVldGVkIGhlciB3aXRoIHRoZSB0aXRsZSBvZiBRdWVlbi4gQnV0IGhlciBtYXJyaWFnZSBoYWQgYmVlbiBhbiB1bmhhcHB5IG9uZSwgYW5kIHNoZSBiZXdhaWxlZCB0aGF0IGJlYXV0eSB3aGljaCBoYWQgcHJvY3VyZWQgaGVyIGEgbWFzdGVyIGluc3RlYWQgb2YgYSBodXNiYW5kLCBhbmQgYSBndWFyZCBvZiBCYXJiYXJpYW5zIGluc3RlYWQgb2YgaG9tZSBhbmQgZmFtaWx5LCBkd2VsbGluZyBhcyBzaGUgZGlkIGZhciwgZmFyIGF3YXkgZnJvbSBHcmVlY2UsIHdoZXJlIHRoZSBibGVzc2luZ3MgZm9yIHdoaWNoIHNoZSBoYWQgaG9wZWQgZXhpc3RlZCBvbmx5IGluIGhlciBkcmVhbXMsIHdoaWxlIHNoZSB3YXMgYmVyZWZ0IG9mIHRoZSByZWFsIGJsZXNzaW5ncyB0byB3aGljaCBzaGUgaGFkIGJlZW4gd29udGVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IEJhY2NoaWRlcyBjYW1lIGFuZCBvcmRlcmVkIHRoZW0gYWxsIHRvIGRpZSwgaW4gd2hhdGV2ZXIgbWFubmVyIGVhY2ggbWlnaHQgZGVlbSBlYXNpZXN0IGFuZCBtb3N0IHBhaW5sZXNzLiBNb25pbcOpIHNuYXRjaGVkIHRoZSBkaWFkZW0gZnJvbSBoZXIgaGVhZCwgZmFzdGVuZWQgaXQgcm91bmQgaGVyIG5lY2ssIGFuZCBoYW5nZWQgaGVyc2VsZi4gQnV0IGhlciBoYWx0ZXIgcXVpY2tseSBicm9rZSBpbiB0d28uIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBjdXJzZWQgYmF1YmxlLDwvcT4gc2hlIGNyaWVkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNvdWxkc3QgdGhvdSBub3Qgc2VydmUgbWUgZXZlbiBpbiB0aGlzIG9mZmljZT88L3E+IFRoZW4gc2hlIHNwYXQgdXBvbiBpdCwgaHVybGVkIGl0IGZyb20gaGVyLCBhbmQgb2ZmZXJlZCBoZXIgdGhyb2F0IHRvIEJhY2NoaWRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEJlcmVuaWPDqSwgdGFraW5nIGEgY3VwIG9mIHBvaXNvbiwgc2hhcmVkIGl0IHdpdGggaGVyIG1vdGhlciwgd2hvIHN0b29kIGF0IGhlciBzaWRlIGFuZCBiZWdnZWQgZm9yIHNvbWUuIFRvZ2V0aGVyIHRoZXkgZHJhbmsgaXQgb2ZmLCBhbmQgdGhlIGZvcmNlIG9mIHRoZSBwb2lzb24gc3VmZmljZWQgZm9yIHRoZSB3ZWFrZXIgYm9keSwgYnV0IGl0IGRpZCBub3QgY2Fycnkgb2ZmIEJlcmVuaWPDqSwgd2hvIGhhZCBub3QgZHJ1bmsgZW5vdWdoLiBBcyBzaGUgd2FzIGxvbmcgaW4gZHlpbmcsIGFuZCBCYWNjaGlkZXMgd2FzIGluIGEgaHVycnksIHNoZSB3YXMgc3RyYW5nbGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzYWlkIGFsc28gdGhhdCBvZiB0aGUgdW5tYXJyaWVkIHNpc3RlcnMsIG9uZSBkcmFuayBvZmYgaGVyIHBvaXNvbiB3aXRoIG1hbnkgYWJ1c2l2ZSBpbXByZWNhdGlvbnMgb24gaGVyIGJyb3RoZXI7IGJ1dCB0aGF0IFN0YXRpcmEgZGlkIHNvIHdpdGhvdXQgdXR0ZXJpbmcgYSBzaW5nbGUgcmVwcm9hY2hmdWwgb3IgdW5nZW5lcm91cyB3b3JkLiBTaGUgcmF0aGVyIGNvbW1lbmRlZCBoZXIgYnJvdGhlciBiZWNhdXNlLCB3aGVuIGhpcyBvd24gbGlmZSB3YXMgYXQgaGF6YXJkLCBoZSBoYWQgbm90IG5lZ2xlY3RlZCB0aGVtLCBidXQgaGFkIHRha2VuIG1lYXN1cmVzIHRvIGhhdmUgdGhlbSBkaWUgaW4gZnJlZWRvbSBhbmQgdW5kZXIgbm8gaW5zdWx0cy4gT2YgY291cnNlIHRoZXNlIHRoaW5ncyBnYXZlIHBhaW4gdG8gTHVjdWxsdXMsIHdobyB3YXMgbmF0dXJhbGx5IG9mIGEgZ2VudGxlIGFuZCBodW1hbmUgZGlzcG9zaXRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgQmFjY2hpZGVzIGNhbWUgYW5kIG9yZGVyZWQgdGhlbSBhbGwgdG8gZGllLCBpbiB3aGF0ZXZlciBtYW5uZXIgZWFjaCBtaWdodCBkZWVtIGVhc2llc3QgYW5kIG1vc3QgcGFpbmxlc3MuIE1vbmltw6kgc25hdGNoZWQgdGhlIGRpYWRlbSBmcm9tIGhlciBoZWFkLCBmYXN0ZW5lZCBpdCByb3VuZCBoZXIgbmVjaywgYW5kIGhhbmdlZCBoZXJzZWxmLiBCdXQgaGVyIGhhbHRlciBxdWlja2x5IGJyb2tlIGluIHR3by4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gY3Vyc2VkIGJhdWJsZSw8L3E+IHNoZSBjcmllZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNvdWxkc3QgdGhvdSBub3Qgc2VydmUgbWUgZXZlbiBpbiB0aGlzIG9mZmljZT88L3E+IFRoZW4gc2hlIHNwYXQgdXBvbiBpdCwgaHVybGVkIGl0IGZyb20gaGVyLCBhbmQgb2ZmZXJlZCBoZXIgdGhyb2F0IHRvIEJhY2NoaWRlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBCZXJlbmljw6ksIHRha2luZyBhIGN1cCBvZiBwb2lzb24sIHNoYXJlZCBpdCB3aXRoIGhlciBtb3RoZXIsIHdobyBzdG9vZCBhdCBoZXIgc2lkZSBhbmQgYmVnZ2VkIGZvciBzb21lLiBUb2dldGhlciB0aGV5IGRyYW5rIGl0IG9mZiwgYW5kIHRoZSBmb3JjZSBvZiB0aGUgcG9pc29uIHN1ZmZpY2VkIGZvciB0aGUgd2Vha2VyIGJvZHksIGJ1dCBpdCBkaWQgbm90IGNhcnJ5IG9mZiBCZXJlbmljw6ksIHdobyBoYWQgbm90IGRydW5rIGVub3VnaC4gQXMgc2hlIHdhcyBsb25nIGluIGR5aW5nLCBhbmQgQmFjY2hpZGVzIHdhcyBpbiBhIGh1cnJ5LCBzaGUgd2FzIHN0cmFuZ2xlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgYWxzbyB0aGF0IG9mIHRoZSB1bm1hcnJpZWQgc2lzdGVycywgb25lIGRyYW5rIG9mZiBoZXIgcG9pc29uIHdpdGggbWFueSBhYnVzaXZlIGltcHJlY2F0aW9ucyBvbiBoZXIgYnJvdGhlcjsgYnV0IHRoYXQgU3RhdGlyYSBkaWQgc28gd2l0aG91dCB1dHRlcmluZyBhIHNpbmdsZSByZXByb2FjaGZ1bCBvciB1bmdlbmVyb3VzIHdvcmQuIFNoZSByYXRoZXIgY29tbWVuZGVkIGhlciBicm90aGVyIGJlY2F1c2UsIHdoZW4gaGlzIG93biBsaWZlIHdhcyBhdCBoYXphcmQsIGhlIGhhZCBub3QgbmVnbGVjdGVkIHRoZW0sIGJ1dCBoYWQgdGFrZW4gbWVhc3VyZXMgdG8gaGF2ZSB0aGVtIGRpZSBpbiBmcmVlZG9tIGFuZCB1bmRlciBubyBpbnN1bHRzLiBPZiBjb3Vyc2UgdGhlc2UgdGhpbmdzIGdhdmUgcGFpbiB0byBMdWN1bGx1cywgd2hvIHdhcyBuYXR1cmFsbHkgb2YgYSBnZW50bGUgYW5kIGh1bWFuZSBkaXNwb3NpdGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+THVjdWxsdXMgcHVzaGVkIG9uIGluIHB1cnN1aXQgYXMgZmFyIGFzIFRhbGF1cmEsIHdoZW5jZSwgZm91ciBkYXlzIGJlZm9yZSwgTWl0aHJpZGF0ZXMgaGFkIHN1Y2NlZWRlZCBpbiBlc2NhcGluZyB0byBUaWdyYW5lcywgaW4gQXJtZW5pYTsgdGhlbiBoZSB0dXJuZWQgYXNpZGUuIEFmdGVyIHN1YmR1aW5nIHRoZSBDaGFsZGFlYW5zIGFuZCB0aGUgVGliYXJlbmksIGhlIG9jY3VwaWVkIExlc3NlciBBcm1lbmlhLCByZWR1Y2luZyBpdHMgZm9ydHJlc3NlcyBhbmQgY2l0aWVzLCBhbmQgdGhlbiBzZW50IEFwcGl1cyB0byBUaWdyYW5lcyB3aXRoIGEgZGVtYW5kIGZvciBNaXRocmlkYXRlcy4gSGUgaGltc2VsZiwgaG93ZXZlciwgY2FtZSB0byBBbWlzdXMsIHdoaWNoIHdhcyBzdGlsbCBob2xkaW5nIG91dCBhZ2FpbnN0IHRoZSBzaWVnZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXRzIHN1Y2Nlc3MgaW4gdGhpcyB3YXMgZHVlIHRvIENhbGxpbWFjaHVzLCBpdHMgY29tbWFuZGVyLCB3aG8sIGJ5IGhpcyBhY3F1YWludGFuY2Ugd2l0aCBtZWNoYW5pY2FsIGNvbnRyaXZhbmNlcyBhbmQgaGlzIHBvd2VyIHRvIGVtcGxveSBldmVyeSByZXNvdXJjZSB3aGljaCB0aGUgc2llZ2Ugb2YgYSBjaXR5IGRlbWFuZHMsIGhhZCBnaXZlbiB0aGUgUm9tYW5zIHRoZSBncmVhdGVzdCBhbm5veWFuY2UuIEZvciB0aGlzIGhlIGFmdGVyd2FyZHMgcGFpZCB0aGUgcGVuYWx0eS4gQnV0IGF0IHRoaXMgdGltZSwgaGUgd2FzIHNpbXBseSBvdXRnZW5lcmFsbGVkIGJ5IEx1Y3VsbHVzLCB3aG8gbWFkZSBhIHN1ZGRlbiBhdHRhY2sgYXQganVzdCB0aGF0IHRpbWUgb2YgZGF5IHdoZW4gQ2FsbGltYWNodXMgd2FzIGFjY3VzdG9tZWQgdG8gZHJhdyBoaXMgc29sZGllcnMgb2ZmIGZyb20gdGhlIHJhbXBhcnRzIGFuZCBnaXZlIHRoZW0gYSByZXN0LiBXaGVuIHRoZSBSb21hbnMgaGFkIGdvdCBwb3NzZXNzaW9uIG9mIGEgc21hbGwgcGFydCBvZiB0aGUgd2FsbCwgQ2FsbGltYWNodXMgYWJhbmRvbmVkIHRoZSBjaXR5LCBmaXJzdCBzZXR0aW5nIGZpcmUgdG8gaXQgd2l0aCBoaXMgb3duIGhhbmRzLCBlaXRoZXIgYmVjYXVzZSBoZSBiZWdydWRnZWQgdGhlIHZpc2l0b3JzIHRoZWlyIGJvb3R5LCBvciBiZWNhdXNlIGhpcyBvd24gZXNjYXBlIHdhcyB0aHVzIGZhY2lsaXRhdGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm8gb25lIHBhaWQgYW55IGF0dGVudGlvbiB0byB0aG9zZSB3aG8gd2VyZSBzYWlsaW5nIGF3YXksIGJ1dCB3aGVuIHRoZSBmbGFtZXMgaW5jcmVhc2VkIG1pZ2h0aWx5IGFuZCBlbnZlbG9wZWQgdGhlIHdhbGxzLCB0aGUgc29sZGllcnMgbWFkZSByZWFkeSB0byBwbHVuZGVyIHRoZSBob3VzZXMuIEx1Y3VsbHVzLCBvdXQgb2YgcGl0eSBmb3IgdGhlIHBlcmlzaGluZyBjaXR5LCB0cmllZCB0byBicmluZyBhaWQgZnJvbSBvdXRzaWRlIGFnYWluc3QgdGhlIGZpcmUsIGFuZCBnYXZlIG9yZGVycyB0byBleHRpbmd1aXNoIHRoZSBmbGFtZXMsIGJ1dCBubyBvbmUgcGFpZCBhbnkgaGVlZCB0byBoaXMgY29tbWFuZHMuIFRoZSBzb2xkaWVycyBhbGwgY2xhbW91cmVkIGZvciB0aGUgYm9vdHksIGFuZCBzaG91dGVkLCBhbmQgY2xhc2hlZCB0aGVpciBzaGllbGRzIGFuZCBzcGVhcnMgdG9nZXRoZXIsIHVudGlsIGhlIHdhcyBmb3JjZWQgdG8gbGV0IHRoZW0gaGF2ZSB0aGVpciB3YXksIGhvcGluZyB0aGF0IGhlIGNvdWxkIGF0IGxlYXN0IHNhdmUgdGhlIGNpdHkgaXRzZWxmIGZyb20gdGhlIGZsYW1lcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBzb2xkaWVycyBkaWQganVzdCB0aGUgb3Bwb3NpdGUuIFJhbnNhY2tpbmcgZXZlcnl0aGluZyBieSB0b3JjaC1saWdodCBhbmQgY2FycnlpbmcgbGlnaHRzIGFib3V0IGV2ZXJ5d2hlcmUsIHRoZXkgZGVzdHJveWVkIG1vc3Qgb2YgdGhlIGhvdXNlcyB0aGVtc2VsdmVzLiBXaGVuIEx1Y3VsbHVzIGVudGVyZWQgdGhlIGNpdHkgYXQgZGF5YnJlYWssIGhlIGJ1cnN0IGludG8gdGVhcnMsIGFuZCBzYWlkIHRvIGhpcyBmcmllbmRzIHRoYXQgaGUgaGFkIG9mdGVuIGFscmVhZHkgZGVlbWVkIFN1bGxhIGhhcHB5LCBhbmQgb24gdGhhdCBkYXkgbW9yZSB0aGFuIGV2ZXIgaGUgYWRtaXJlZCB0aGUgbWFuJ3MgZ29vZCBmb3J0dW5lLCBpbiB0aGF0IHdoZW4gaGUgd2lzaGVkIHRvIHNhdmUgQXRoZW5zLCBoZSBoYWQgdGhlIHBvd2VyIHRvIGRvIHNvLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHVwb24gbWUsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndobyBoYXZlIGJlZW4gc28gZWFnZXIgdG8gaW1pdGF0ZSBoaXMgZXhhbXBsZSwgSGVhdmVuIGhhcyBkZXZvbHZlZCB0aGUgcmVwdXRhdGlvbiBvZiBNdW1taXVzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+THVjdWxsdXMgcHVzaGVkIG9uIGluIHB1cnN1aXQgYXMgZmFyIGFzIFRhbGF1cmEsIHdoZW5jZSwgZm91ciBkYXlzIGJlZm9yZSwgTWl0aHJpZGF0ZXMgaGFkIHN1Y2NlZWRlZCBpbiBlc2NhcGluZyB0byBUaWdyYW5lcywgaW4gQXJtZW5pYTsgdGhlbiBoZSB0dXJuZWQgYXNpZGUuIEFmdGVyIHN1YmR1aW5nIHRoZSBDaGFsZGFlYW5zIGFuZCB0aGUgVGliYXJlbmksIGhlIG9jY3VwaWVkIExlc3NlciBBcm1lbmlhLCByZWR1Y2luZyBpdHMgZm9ydHJlc3NlcyBhbmQgY2l0aWVzLCBhbmQgdGhlbiBzZW50IEFwcGl1cyB0byBUaWdyYW5lcyB3aXRoIGEgZGVtYW5kIGZvciBNaXRocmlkYXRlcy4gSGUgaGltc2VsZiwgaG93ZXZlciwgY2FtZSB0byBBbWlzdXMsIHdoaWNoIHdhcyBzdGlsbCBob2xkaW5nIG91dCBhZ2FpbnN0IHRoZSBzaWVnZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0cyBzdWNjZXNzIGluIHRoaXMgd2FzIGR1ZSB0byBDYWxsaW1hY2h1cywgaXRzIGNvbW1hbmRlciwgd2hvLCBieSBoaXMgYWNxdWFpbnRhbmNlIHdpdGggbWVjaGFuaWNhbCBjb250cml2YW5jZXMgYW5kIGhpcyBwb3dlciB0byBlbXBsb3kgZXZlcnkgcmVzb3VyY2Ugd2hpY2ggdGhlIHNpZWdlIG9mIGEgY2l0eSBkZW1hbmRzLCBoYWQgZ2l2ZW4gdGhlIFJvbWFucyB0aGUgZ3JlYXRlc3QgYW5ub3lhbmNlLiBGb3IgdGhpcyBoZSBhZnRlcndhcmRzIHBhaWQgdGhlIHBlbmFsdHkuIEJ1dCBhdCB0aGlzIHRpbWUsIGhlIHdhcyBzaW1wbHkgb3V0Z2VuZXJhbGxlZCBieSBMdWN1bGx1cywgd2hvIG1hZGUgYSBzdWRkZW4gYXR0YWNrIGF0IGp1c3QgdGhhdCB0aW1lIG9mIGRheSB3aGVuIENhbGxpbWFjaHVzIHdhcyBhY2N1c3RvbWVkIHRvIGRyYXcgaGlzIHNvbGRpZXJzIG9mZiBmcm9tIHRoZSByYW1wYXJ0cyBhbmQgZ2l2ZSB0aGVtIGEgcmVzdC4gV2hlbiB0aGUgUm9tYW5zIGhhZCBnb3QgcG9zc2Vzc2lvbiBvZiBhIHNtYWxsIHBhcnQgb2YgdGhlIHdhbGwsIENhbGxpbWFjaHVzIGFiYW5kb25lZCB0aGUgY2l0eSwgZmlyc3Qgc2V0dGluZyBmaXJlIHRvIGl0IHdpdGggaGlzIG93biBoYW5kcywgZWl0aGVyIGJlY2F1c2UgaGUgYmVncnVkZ2VkIHRoZSB2aXNpdG9ycyB0aGVpciBib290eSwgb3IgYmVjYXVzZSBoaXMgb3duIGVzY2FwZSB3YXMgdGh1cyBmYWNpbGl0YXRlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBubyBvbmUgcGFpZCBhbnkgYXR0ZW50aW9uIHRvIHRob3NlIHdobyB3ZXJlIHNhaWxpbmcgYXdheSwgYnV0IHdoZW4gdGhlIGZsYW1lcyBpbmNyZWFzZWQgbWlnaHRpbHkgYW5kIGVudmVsb3BlZCB0aGUgd2FsbHMsIHRoZSBzb2xkaWVycyBtYWRlIHJlYWR5IHRvIHBsdW5kZXIgdGhlIGhvdXNlcy4gTHVjdWxsdXMsIG91dCBvZiBwaXR5IGZvciB0aGUgcGVyaXNoaW5nIGNpdHksIHRyaWVkIHRvIGJyaW5nIGFpZCBmcm9tIG91dHNpZGUgYWdhaW5zdCB0aGUgZmlyZSwgYW5kIGdhdmUgb3JkZXJzIHRvIGV4dGluZ3Vpc2ggdGhlIGZsYW1lcywgYnV0IG5vIG9uZSBwYWlkIGFueSBoZWVkIHRvIGhpcyBjb21tYW5kcy4gVGhlIHNvbGRpZXJzIGFsbCBjbGFtb3VyZWQgZm9yIHRoZSBib290eSwgYW5kIHNob3V0ZWQsIGFuZCBjbGFzaGVkIHRoZWlyIHNoaWVsZHMgYW5kIHNwZWFycyB0b2dldGhlciwgdW50aWwgaGUgd2FzIGZvcmNlZCB0byBsZXQgdGhlbSBoYXZlIHRoZWlyIHdheSwgaG9waW5nIHRoYXQgaGUgY291bGQgYXQgbGVhc3Qgc2F2ZSB0aGUgY2l0eSBpdHNlbGYgZnJvbSB0aGUgZmxhbWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgc29sZGllcnMgZGlkIGp1c3QgdGhlIG9wcG9zaXRlLiBSYW5zYWNraW5nIGV2ZXJ5dGhpbmcgYnkgdG9yY2gtbGlnaHQgYW5kIGNhcnJ5aW5nIGxpZ2h0cyBhYm91dCBldmVyeXdoZXJlLCB0aGV5IGRlc3Ryb3llZCBtb3N0IG9mIHRoZSBob3VzZXMgdGhlbXNlbHZlcy4gV2hlbiBMdWN1bGx1cyBlbnRlcmVkIHRoZSBjaXR5IGF0IGRheWJyZWFrLCBoZSBidXJzdCBpbnRvIHRlYXJzLCBhbmQgc2FpZCB0byBoaXMgZnJpZW5kcyB0aGF0IGhlIGhhZCBvZnRlbiBhbHJlYWR5IGRlZW1lZCBTdWxsYSBoYXBweSwgYW5kIG9uIHRoYXQgZGF5IG1vcmUgdGhhbiBldmVyIGhlIGFkbWlyZWQgdGhlIG1hbidzIGdvb2QgZm9ydHVuZSwgaW4gdGhhdCB3aGVuIGhlIHdpc2hlZCB0byBzYXZlIEF0aGVucywgaGUgaGFkIHRoZSBwb3dlciB0byBkbyBzby4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCB1cG9uIG1lLDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndobyBoYXZlIGJlZW4gc28gZWFnZXIgdG8gaW1pdGF0ZSBoaXMgZXhhbXBsZSwgSGVhdmVuIGhhcyBkZXZvbHZlZCB0aGUgcmVwdXRhdGlvbiBvZiBNdW1taXVzLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ib3dldmVyLCBhcyBmYXIgYXMgY2lyY3Vtc3RhbmNlcyBhbGxvd2VkLCBoZSBlbmRlYXZvdXJlZCB0byByZXN0b3JlIHRoZSBjaXR5LiBUaGUgZmlyZSwgaW5kZWVkLCBoYWQgYmVlbiBxdWVuY2hlZCBieSBzaG93ZXJzIHdoaWNoIGZlbGwgcHJvdmlkZW50aWFsbHkganVzdCBhcyB0aGUgY2l0eSB3YXMgY2FwdHVyZWQsIGFuZCBtb3N0IG9mIHdoYXQgdGhlIHNvbGRpZXJzIGhhZCBkZXN0cm95ZWQgaGUgcmVidWlsdCBoaW1zZWxmIGJlZm9yZSBoaXMgZGVwYXJ0dXJlLiBIZSBhbHNvIHJlY2VpdmVkIGludG8gdGhlIGNpdHkgdGhvc2Ugb2YgdGhlIEFtaXNlbmVzIHdobyBoYWQgZmxlZCwgYW5kIHNldHRsZWQgdGhlcmUgYW55IG90aGVyIEdyZWVrcyB3aG8gc28gZGVzaXJlZCwgYW5kIGFkZGVkIHRvIHRoZSBjaXR5J3MgZG9tYWluIGEgdHJhY3Qgb2YgYSBodW5kcmVkIGFuZCB0d2VudHkgc3RhZGlhLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjaXR5IHdhcyBhIGNvbG9ueSBvZiBBdGhlbnMsIGZvdW5kZWQgaW4gdGhhdCBwZXJpb2Qgd2hlbiBoZXIgcG93ZXIgd2FzIGF0IGl0cyBoZWlnaHQgYW5kIHNoZSBjb250cm9sbGVkIHRoZSBzZWEuIEFuZCB0aGlzIHdhcyB0aGUgcmVhc29uIHdoeSBtYW55IHdobyB3aXNoZWQgdG8gZXNjYXBlIHRoZSB0eXJhbm55IG9mIEFyaXN0aW9uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VHlyYW50IG9mIEF0aGVucyB3aGVuIHRoZSBjaXR5IHdhcyBiZXNpZWdlZCBieSBTdWxsYSwgODcgQi5DLjwvbm90ZT4gYXQgQXRoZW5zIHNhaWxlZCB0byBBbWlzdXMsIHNldHRsZWQgdGhlcmUsIGFuZCBiZWNhbWUgY2l0aXplbnMuIEluIGZseWluZyBmcm9tIGV2aWxzIGF0IGhvbWUsIHRoZXkgZ290IHRoZSBiZW5lZml0IG9mIGdyZWF0ZXIgZXZpbHMgYWJyb2FkLiBCdXQgdGhvc2Ugb2YgdGhlbSB3aG8gc3Vydml2ZWQgd2VyZSB3ZWxsIGNsb3RoZWQgYnkgTHVjdWxsdXMsIGFuZCBzZW50IGJhY2sgaG9tZSwgd2l0aCBhIHByZXNlbnQgb2YgdHdvIGh1bmRyZWQgZHJhY2htYXMgYXBpZWNlLiBUeXJhbm5pbyB0aGUgZ3JhbW1hcmlhbiB3YXMgYWxzbyB0YWtlbiBwcmlzb25lciBhdCB0aGlzIHRpbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk11cmVuYSBhc2tlZCB0byBoYXZlIGhpbSBhcyBoaXMgb3duIHByaXplLCBhbmQgb24gZ2V0dGluZyBoaW0sIGZvcm1hbGx5IGdhdmUgaGltIGhpcyBsaWJlcnR5LCB0aGVyZWluIG1ha2luZyBhbiBpbGxpYmVyYWwgdXNlIG9mIHRoZSBnaWZ0IHdoaWNoIGhlIGhhZCByZWNlaXZlZC4gRm9yIEx1Y3VsbHVzIGRpZCBub3QgdGhpbmsgaXQgbWVldCB0aGF0IGEgbWFuIHNvIGVzdGVlbWVkIGZvciBoaXMgbGVhcm5pbmcgc2hvdWxkIGZpcnN0IGJlY29tZSBhIHNsYXZlLCBhbmQgdGhlbiBiZSBzZXQgYXQgbGliZXJ0eS4gVG8gZ2l2ZSBoaW0gYSBub21pbmFsIGxpYmVydHkgd2FzIHRvIHJvYiBoaW0gb2YgdGhlIGxpYmVydHkgdG8gd2hpY2ggaGUgd2FzIGJvcm4uIEJ1dCB0aGlzIHdhcyBub3QgdGhlIG9ubHkgY2FzZSBpbiB3aGljaCBNdXJlbmEgd2FzIGZvdW5kIHRvIGJlIGZhciBpbmZlcmlvciB0byBoaXMgY29tbWFuZGVyIGluIG5vYmlsaXR5IG9mIGNvbmR1Y3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjaXR5IHdhcyBhIGNvbG9ueSBvZiBBdGhlbnMsIGZvdW5kZWQgaW4gdGhhdCBwZXJpb2Qgd2hlbiBoZXIgcG93ZXIgd2FzIGF0IGl0cyBoZWlnaHQgYW5kIHNoZSBjb250cm9sbGVkIHRoZSBzZWEuIEFuZCB0aGlzIHdhcyB0aGUgcmVhc29uIHdoeSBtYW55IHdobyB3aXNoZWQgdG8gZXNjYXBlIHRoZSB0eXJhbm55IG9mIEFyaXN0aW9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UeXJhbnQgb2YgQXRoZW5zIHdoZW4gdGhlIGNpdHkgd2FzIGJlc2llZ2VkIGJ5IFN1bGxhLCA4NyBCLkMuPC9ub3RlPiBhdCBBdGhlbnMgc2FpbGVkIHRvIEFtaXN1cywgc2V0dGxlZCB0aGVyZSwgYW5kIGJlY2FtZSBjaXRpemVucy4gSW4gZmx5aW5nIGZyb20gZXZpbHMgYXQgaG9tZSwgdGhleSBnb3QgdGhlIGJlbmVmaXQgb2YgZ3JlYXRlciBldmlscyBhYnJvYWQuIEJ1dCB0aG9zZSBvZiB0aGVtIHdobyBzdXJ2aXZlZCB3ZXJlIHdlbGwgY2xvdGhlZCBieSBMdWN1bGx1cywgYW5kIHNlbnQgYmFjayBob21lLCB3aXRoIGEgcHJlc2VudCBvZiB0d28gaHVuZHJlZCBkcmFjaG1hcyBhcGllY2UuIFR5cmFubmlvIHRoZSBncmFtbWFyaWFuIHdhcyBhbHNvIHRha2VuIHByaXNvbmVyIGF0IHRoaXMgdGltZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk11cmVuYSBhc2tlZCB0byBoYXZlIGhpbSBhcyBoaXMgb3duIHByaXplLCBhbmQgb24gZ2V0dGluZyBoaW0sIGZvcm1hbGx5IGdhdmUgaGltIGhpcyBsaWJlcnR5LCB0aGVyZWluIG1ha2luZyBhbiBpbGxpYmVyYWwgdXNlIG9mIHRoZSBnaWZ0IHdoaWNoIGhlIGhhZCByZWNlaXZlZC4gRm9yIEx1Y3VsbHVzIGRpZCBub3QgdGhpbmsgaXQgbWVldCB0aGF0IGEgbWFuIHNvIGVzdGVlbWVkIGZvciBoaXMgbGVhcm5pbmcgc2hvdWxkIGZpcnN0IGJlY29tZSBhIHNsYXZlLCBhbmQgdGhlbiBiZSBzZXQgYXQgbGliZXJ0eS4gVG8gZ2l2ZSBoaW0gYSBub21pbmFsIGxpYmVydHkgd2FzIHRvIHJvYiBoaW0gb2YgdGhlIGxpYmVydHkgdG8gd2hpY2ggaGUgd2FzIGJvcm4uIEJ1dCB0aGlzIHdhcyBub3QgdGhlIG9ubHkgY2FzZSBpbiB3aGljaCBNdXJlbmEgd2FzIGZvdW5kIHRvIGJlIGZhciBpbmZlcmlvciB0byBoaXMgY29tbWFuZGVyIGluIG5vYmlsaXR5IG9mIGNvbmR1Y3QuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIG5vdyB0dXJuZWQgaGlzIGF0dGVudGlvbiB0byB0aGUgY2l0aWVzIGluIEFzaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NzEtNzAgQi5DLjwvbm90ZT4gaW4gb3JkZXIgdGhhdCwgd2hpbGUgaGUgd2FzIGF0IGxlaXN1cmUgZnJvbSBtaWxpdGFyeSBlbnRlcnByaXNlcywgaGUgbWlnaHQgZG8gc29tZXRoaW5nIGZvciB0aGUgZnVydGhlcmFuY2Ugb2YganVzdGljZSBhbmQgbGF3LiBUaHJvdWdoIGxvbmcgbGFjayBvZiB0aGVzZSwgdW5zcGVha2FibGUgYW5kIGluY3JlZGlibGUgbWlzZm9ydHVuZXMgd2VyZSByaWZlIGluIHRoZSBwcm92aW5jZS4gSXRzIHBlb3BsZSB3ZXJlIHBsdW5kZXJlZCBhbmQgcmVkdWNlZCB0byBzbGF2ZXJ5IGJ5IHRoZSB0YXgtZ2F0aGVyZXJzIGFuZCBtb25leS1sZW5kZXJzLiBGYW1pbGllcyB3ZXJlIGZvcmNlZCB0byBzZWxsIHRoZWlyIGNvbWVseSBzb25zIGFuZCB2aXJnaW4gZGF1Z2h0ZXJzLCBhbmQgY2l0aWVzIHRoZWlyIHZvdGl2ZSBvZmZlcmluZ3MsIHBpY3R1cmVzLCBhbmQgc2FjcmVkIHN0YXR1ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGxhc3QgbWVuIGhhZCB0byBzdXJyZW5kZXIgdG8gdGhlaXIgY3JlZGl0b3JzIGFuZCBzZXJ2ZSB0aGVtIGFzIHNsYXZlcywgYnV0IHdoYXQgcHJlY2VkZWQgdGhpcyB3YXMgZmFyIHdvcnNlLOKAlHRvcnR1cmVzIG9mIHJvcGUsIGJhcnJpZXIsIGFuZCBob3JzZTsgc3RhbmRpbmcgdW5kZXIgdGhlIG9wZW4gc2t5IGluIHRoZSBibGF6aW5nIHN1biBvZiBzdW1tZXIsIGFuZCBpbiB3aW50ZXIsIGJlaW5nIHRocnVzdCBpbnRvIG11ZCBvciBpY2UuIFNsYXZlcnkgc2VlbWVkLCBieSBjb21wYXJpc29uLCB0byBiZSBkaXNidXJkZW5tZW50IGFuZCBwZWFjZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3ZXJlIHRoZSBldmlscyB3aGljaCBMdWN1bGx1cyBmb3VuZCBpbiB0aGUgY2l0aWVzLCBhbmQgaW4gYSBzaG9ydCB0aW1lIGhlIGZyZWVkIHRoZSBvcHByZXNzZWQgZnJvbSBhbGwgb2YgdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+THVjdWxsdXMgbm93IHR1cm5lZCBoaXMgYXR0ZW50aW9uIHRvIHRoZSBjaXRpZXMgaW4gQXNpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjcxLTcwIEIuQy48L25vdGU+IGluIG9yZGVyIHRoYXQsIHdoaWxlIGhlIHdhcyBhdCBsZWlzdXJlIGZyb20gbWlsaXRhcnkgZW50ZXJwcmlzZXMsIGhlIG1pZ2h0IGRvIHNvbWV0aGluZyBmb3IgdGhlIGZ1cnRoZXJhbmNlIG9mIGp1c3RpY2UgYW5kIGxhdy4gVGhyb3VnaCBsb25nIGxhY2sgb2YgdGhlc2UsIHVuc3BlYWthYmxlIGFuZCBpbmNyZWRpYmxlIG1pc2ZvcnR1bmVzIHdlcmUgcmlmZSBpbiB0aGUgcHJvdmluY2UuIEl0cyBwZW9wbGUgd2VyZSBwbHVuZGVyZWQgYW5kIHJlZHVjZWQgdG8gc2xhdmVyeSBieSB0aGUgdGF4LWdhdGhlcmVycyBhbmQgbW9uZXktbGVuZGVycy4gRmFtaWxpZXMgd2VyZSBmb3JjZWQgdG8gc2VsbCB0aGVpciBjb21lbHkgc29ucyBhbmQgdmlyZ2luIGRhdWdodGVycywgYW5kIGNpdGllcyB0aGVpciB2b3RpdmUgb2ZmZXJpbmdzLCBwaWN0dXJlcywgYW5kIHNhY3JlZCBzdGF0dWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGxhc3QgbWVuIGhhZCB0byBzdXJyZW5kZXIgdG8gdGhlaXIgY3JlZGl0b3JzIGFuZCBzZXJ2ZSB0aGVtIGFzIHNsYXZlcywgYnV0IHdoYXQgcHJlY2VkZWQgdGhpcyB3YXMgZmFyIHdvcnNlLOKAlHRvcnR1cmVzIG9mIHJvcGUsIGJhcnJpZXIsIGFuZCBob3JzZTsgc3RhbmRpbmcgdW5kZXIgdGhlIG9wZW4gc2t5IGluIHRoZSBibGF6aW5nIHN1biBvZiBzdW1tZXIsIGFuZCBpbiB3aW50ZXIsIGJlaW5nIHRocnVzdCBpbnRvIG11ZCBvciBpY2UuIFNsYXZlcnkgc2VlbWVkLCBieSBjb21wYXJpc29uLCB0byBiZSBkaXNidXJkZW5tZW50IGFuZCBwZWFjZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggd2VyZSB0aGUgZXZpbHMgd2hpY2ggTHVjdWxsdXMgZm91bmQgaW4gdGhlIGNpdGllcywgYW5kIGluIGEgc2hvcnQgdGltZSBoZSBmcmVlZCB0aGUgb3BwcmVzc2VkIGZyb20gYWxsIG9mIHRoZW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gdGhlIGZpcnN0IHBsYWNlLCBoZSBvcmRlcmVkIHRoYXQgdGhlIG1vbnRobHkgcmF0ZSBvZiBpbnRlcmVzdCBzaG91bGQgYmUgcmVja29uZWQgYXQgb25lIHBlciBjZW50LiwgYW5kIG5vIG1vcmU7IGluIHRoZSBzZWNvbmQgcGxhY2UsIGhlIGN1dCBvZmYgYWxsIGludGVyZXN0IHRoYXQgZXhjZWVkZWQgdGhlIHByaW5jaXBhbDsgdGhpcmQsIGFuZCBtb3N0IGltcG9ydGFudCBvZiBhbGwsIGhlIG9yZGFpbmVkIHRoYXQgdGhlIGxlbmRlciBzaG91bGQgcmVjZWl2ZSBub3QgbW9yZSB0aGFuIHRoZSBmb3VydGggcGFydCBvZiBoaXMgZGVidG9yJ3MgaW5jb21lLCBhbmQgYW55IGxlbmRlciB3aG8gYWRkZWQgaW50ZXJlc3QgdG8gcHJpbmNpcGFsIHdhcyBkZXByaXZlZCBvZiB0aGUgd2hvbGUuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cywgaW4gbGVzcyB0aGFuIGZvdXIgeWVhcnMnIHRpbWUsIHRoZSBkZWJ0cyB3ZXJlIGFsbCBwYWlkLCBhbmQgdGhlIHByb3BlcnRpZXMgcmVzdG9yZWQgdG8gdGhlaXIgb3duZXJzIHVuZW5jdW1iZXJlZC4gVGhpcyBwdWJsaWMgZGVidCBoYWQgaXRzIG9yaWdpbiBpbiB0aGUgdHdlbnR5IHRob3VzYW5kIHRhbGVudHMgd2hpY2ggU3VsbGEgaGFkIGxhaWQgdXBvbiBBc2lhIGFzIGEgY29udHJpYnV0aW9uLCBhbmQgdHdpY2UgdGhpcyBhbW91bnQgaGFkIGJlZW4gcGFpZCBiYWNrIHRvIHRoZSBtb25leS1sZW5kZXJzLiBZZXQgbm93LCBieSByZWNrb25pbmcgdXN1cmlvdXMgaW50ZXJlc3QsIHRoZXkgaGFkIGJyb3VnaHQgdGhlIHRvdGFsIGRlYnQgdXAgdG8gYSBodW5kcmVkIGFuZCB0d2VudHkgdGhvdXNhbmQgdGFsZW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgbWVuLCBhY2NvcmRpbmdseSwgY29uc2lkZXJlZCB0aGVtc2VsdmVzIG91dHJhZ2VkLCBhbmQgcmFpc2VkIGEgY2xhbW91ciBhZ2FpbnN0IEx1Y3VsbHVzIGF0IFJvbWUuIFRoZXkgYWxzbyBicmliZWQgc29tZSBvZiB0aGUgdHJpYnVuZXMgdG8gcHJvY2VlZCBhZ2FpbnN0IGhpbSwgYmVpbmcgbWVuIG9mIGdyZWF0IGluZmx1ZW5jZSwgd2hvIGhhZCBnb3QgbWFueSBvZiB0aGUgYWN0aXZlIHBvbGl0aWNpYW5zIGludG8gdGhlaXIgZGVidC4gTHVjdWxsdXMsIGhvd2V2ZXIsIHdhcyBub3Qgb25seSBiZWxvdmVkIGJ5IHRoZSBwZW9wbGVzIHdob20gaGUgaGFkIGJlbmVmaXRlZCwgbmF5LCBvdGhlciBwcm92aW5jZXMgYWxzbyBsb25nZWQgdG8gaGF2ZSBoaW0gc2V0IG92ZXIgdGhlbSwgYW5kIGZlbGljaXRhdGVkIHRob3NlIHdob3NlIGdvb2QgZm9ydHVuZSBpdCB3YXMgdG8gaGF2ZSBzdWNoIGEgZ292ZXJub3IuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRodXMsIGluIGxlc3MgdGhhbiBmb3VyIHllYXJzJyB0aW1lLCB0aGUgZGVidHMgd2VyZSBhbGwgcGFpZCwgYW5kIHRoZSBwcm9wZXJ0aWVzIHJlc3RvcmVkIHRvIHRoZWlyIG93bmVycyB1bmVuY3VtYmVyZWQuIFRoaXMgcHVibGljIGRlYnQgaGFkIGl0cyBvcmlnaW4gaW4gdGhlIHR3ZW50eSB0aG91c2FuZCB0YWxlbnRzIHdoaWNoIFN1bGxhIGhhZCBsYWlkIHVwb24gQXNpYSBhcyBhIGNvbnRyaWJ1dGlvbiwgYW5kIHR3aWNlIHRoaXMgYW1vdW50IGhhZCBiZWVuIHBhaWQgYmFjayB0byB0aGUgbW9uZXktbGVuZGVycy4gWWV0IG5vdywgYnkgcmVja29uaW5nIHVzdXJpb3VzIGludGVyZXN0LCB0aGV5IGhhZCBicm91Z2h0IHRoZSB0b3RhbCBkZWJ0IHVwIHRvIGEgaHVuZHJlZCBhbmQgdHdlbnR5IHRob3VzYW5kIHRhbGVudHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiwgYWNjb3JkaW5nbHksIGNvbnNpZGVyZWQgdGhlbXNlbHZlcyBvdXRyYWdlZCwgYW5kIHJhaXNlZCBhIGNsYW1vdXIgYWdhaW5zdCBMdWN1bGx1cyBhdCBSb21lLiBUaGV5IGFsc28gYnJpYmVkIHNvbWUgb2YgdGhlIHRyaWJ1bmVzIHRvIHByb2NlZWQgYWdhaW5zdCBoaW0sIGJlaW5nIG1lbiBvZiBncmVhdCBpbmZsdWVuY2UsIHdobyBoYWQgZ290IG1hbnkgb2YgdGhlIGFjdGl2ZSBwb2xpdGljaWFucyBpbnRvIHRoZWlyIGRlYnQuIEx1Y3VsbHVzLCBob3dldmVyLCB3YXMgbm90IG9ubHkgYmVsb3ZlZCBieSB0aGUgcGVvcGxlcyB3aG9tIGhlIGhhZCBiZW5lZml0ZWQsIG5heSwgb3RoZXIgcHJvdmluY2VzIGFsc28gbG9uZ2VkIHRvIGhhdmUgaGltIHNldCBvdmVyIHRoZW0sIGFuZCBmZWxpY2l0YXRlZCB0aG9zZSB3aG9zZSBnb29kIGZvcnR1bmUgaXQgd2FzIHRvIGhhdmUgc3VjaCBhIGdvdmVybm9yLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcHBpdXMgQ2xvZGl1cywgd2hvIGhhZCBiZWVuIHNlbnQgdG8gVGlncmFuZXMgKENsb2RpdXMgd2FzIGEgYnJvdGhlciBvZiBoZXIgd2hvIHdhcyB0aGVuIHRoZSB3aWZlIG9mIEx1Y3VsbHVzKSwgd2FzIGF0IGZpcnN0IGNvbmR1Y3RlZCBieSB0aGUgcm95YWwgZ3VpZGVzIHRocm91Z2ggdGhlIHVwcGVyIGNvdW50cnkgYnkgYSByb3V0ZSBuZWVkbGVzc2x5IGNpcmN1aXRvdXMgYW5kIGxvbmcuIEJ1dCB3aGVuIGEgZnJlZWRtYW4gb2YgaGlzLCB3aG8gd2FzIGEgU3lyaWFuLCB0b2xkIGhpbSBvZiB0aGUgZGlyZWN0IHJvdXRlLCBoZSBsZWZ0IHRoZSBsb25nIG9uZSB3aGljaCB3YXMgYmVpbmcgdHJpY2tpbHkgaW1wb3NlZCB1cG9uIGhpbSwgYmFkZSBoaXMgQmFyYmFyaWFuIGd1aWRlcyBhIGxvbmcgZmFyZXdlbGwsIGFuZCB3aXRoaW4gYSBmZXcgZGF5cyBjcm9zc2VkIHRoZSBFdXBocmF0ZXMgYW5kIGNhbWUgdG8gQW50aW9jaCBieSBEYXBobmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGdyZWF0IEFudGlvY2ggb24gdGhlIHJpdmVyIE9yb250ZXMuIERhcGhuZSB3YXMgdGhlIG5hbWUgb2YgYSBncm92ZSBuZWFyIHRoZSBjaXR5IGNvbnNlY3JhdGVkIHRvIEFwb2xsby48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYmVpbmcgb3JkZXJlZCB0byBhd2FpdCBUaWdyYW5lcyB0aGVyZSAodGhlIGtpbmcgd2FzIHN0aWxsIGVuZ2FnZWQgaW4gc3ViZHVpbmcgc29tZSBjaXRpZXMgb2YgUGhvZW5pY2lhKSwgaGUgZ2FpbmVkIG92ZXIgbWFueSBvZiB0aGUgcHJpbmNlcyB3aG8gcGFpZCBidXQgYSBob2xsb3cgb2JlZGllbmNlIHRvIHRoZSBBcm1lbmlhbi4gT25lIG9mIHRoZXNlIHdhcyBaYXJiaWVudXMsIGtpbmcgb2YgR29yZHllbmUuIEhlIGFsc28gcHJvbWlzZWQgbWFueSBvZiB0aGUgZW5zbGF2ZWQgY2l0aWVzLCB3aGVuIHRoZXkgc2VudCB0byBjb25mZXIgd2l0aCBoaW0gc2VjcmV0bHksIHRoZSBhc3Npc3RhbmNlIG9mIEx1Y3VsbHVzLCBhbHRob3VnaCBmb3IgdGhlIHByZXNlbnQgaGUgYmFkZSB0aGVtIGtlZW4gcXVpZXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXBwaXVzIENsb2RpdXMsIHdobyBoYWQgYmVlbiBzZW50IHRvIFRpZ3JhbmVzIChDbG9kaXVzIHdhcyBhIGJyb3RoZXIgb2YgaGVyIHdobyB3YXMgdGhlbiB0aGUgd2lmZSBvZiBMdWN1bGx1cyksIHdhcyBhdCBmaXJzdCBjb25kdWN0ZWQgYnkgdGhlIHJveWFsIGd1aWRlcyB0aHJvdWdoIHRoZSB1cHBlciBjb3VudHJ5IGJ5IGEgcm91dGUgbmVlZGxlc3NseSBjaXJjdWl0b3VzIGFuZCBsb25nLiBCdXQgd2hlbiBhIGZyZWVkbWFuIG9mIGhpcywgd2hvIHdhcyBhIFN5cmlhbiwgdG9sZCBoaW0gb2YgdGhlIGRpcmVjdCByb3V0ZSwgaGUgbGVmdCB0aGUgbG9uZyBvbmUgd2hpY2ggd2FzIGJlaW5nIHRyaWNraWx5IGltcG9zZWQgdXBvbiBoaW0sIGJhZGUgaGlzIEJhcmJhcmlhbiBndWlkZXMgYSBsb25nIGZhcmV3ZWxsLCBhbmQgd2l0aGluIGEgZmV3IGRheXMgY3Jvc3NlZCB0aGUgRXVwaHJhdGVzIGFuZCBjYW1lIHRvIEFudGlvY2ggYnkgRGFwaG5lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGdyZWF0IEFudGlvY2ggb24gdGhlIHJpdmVyIE9yb250ZXMuIERhcGhuZSB3YXMgdGhlIG5hbWUgb2YgYSBncm92ZSBuZWFyIHRoZSBjaXR5IGNvbnNlY3JhdGVkIHRvIEFwb2xsby48L25vdGU+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGJlaW5nIG9yZGVyZWQgdG8gYXdhaXQgVGlncmFuZXMgdGhlcmUgKHRoZSBraW5nIHdhcyBzdGlsbCBlbmdhZ2VkIGluIHN1YmR1aW5nIHNvbWUgY2l0aWVzIG9mIFBob2VuaWNpYSksIGhlIGdhaW5lZCBvdmVyIG1hbnkgb2YgdGhlIHByaW5jZXMgd2hvIHBhaWQgYnV0IGEgaG9sbG93IG9iZWRpZW5jZSB0byB0aGUgQXJtZW5pYW4uIE9uZSBvZiB0aGVzZSB3YXMgWmFyYmllbnVzLCBraW5nIG9mIEdvcmR5ZW5lLiBIZSBhbHNvIHByb21pc2VkIG1hbnkgb2YgdGhlIGVuc2xhdmVkIGNpdGllcywgd2hlbiB0aGV5IHNlbnQgdG8gY29uZmVyIHdpdGggaGltIHNlY3JldGx5LCB0aGUgYXNzaXN0YW5jZSBvZiBMdWN1bGx1cywgYWx0aG91Z2ggZm9yIHRoZSBwcmVzZW50IGhlIGJhZGUgdGhlbSBrZWVuIHF1aWV0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlIHN3YXkgb2YgdGhlIEFybWVuaWFucyB3YXMgaW50b2xlcmFibHkgZ3JpZXZvdXMgdG8gdGhlIEdyZWVrcy4gQWJvdmUgYWxsIGVsc2UsIHRoZSBzcGlyaXQgb2YgdGhlIGtpbmcgaGltc2VsZiBoYWQgYmVjb21lIHBvbXBvdXMgYW5kIGhhdWdodHkgaW4gdGhlIG1pZHN0IG9mIGhpcyBncmVhdCBwcm9zcGVyaXR5LiBBbGwgdGhlIHRoaW5ncyB3aGljaCBtb3N0IG1lbiBjb3ZldCBhbmQgYWRtaXJlLCBoZSBub3Qgb25seSBoYWQgaW4gaGlzIHBvc3Nlc3Npb24sIGJ1dCBhY3R1YWxseSB0aG91Z2h0IHRoYXQgdGhleSBleGlzdGVkIGZvciBoaXMgc2FrZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRob3VnaCBoZSBoYWQgc3RhcnRlZCBvbiBoaXMgY2FyZWVyIHdpdGggc21hbGwgYW5kIGluc2lnbmlmaWNhbnQgZXhwZWN0YXRpb25zLCBoZSBoYWQgc3ViZHVlZCBtYW55IG5hdGlvbnMsIGh1bWJsZWQgdGhlIFBhcnRoaWFuIHBvd2VyIGFzIG5vIG1hbiBiZWZvcmUgaGltIGhhZCBkb25lLCBhbmQgZmlsbGVkIE1lc29wb3RhbWlhIHdpdGggR3JlZWtzIHdob20gaGUgcmVtb3ZlZCBpbiBncmVhdCBudW1iZXJzIGZyb20gQ2lsaWNpYSBhbmQgZnJvbSBDYXBwYWRvY2lhLCBhbmQgc2V0dGxlZCBhbmV3LiBIZSBhbHNvIHJlbW92ZWQgZnJvbSB0aGVpciB3b250ZWQgaGF1bnRzIHRoZSBub21hZGljIEFyYWJpYW5zLCBhbmQgYnJvdWdodCB0aGVtIHRvIGFuIGFkamFjZW50IHNldHRsZW1lbnQsIHRoYXQgaGUgbWlnaHQgZW1wbG95IHRoZW0gaW4gdHJhZGUgYW5kIGNvbW1lcmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5NYW55IHdlcmUgdGhlIGtpbmdzIHdobyB3YWl0ZWQgdXBvbiBoaW0sIGFuZCBmb3VyLCB3aG9tIGhlIGFsd2F5cyBoYWQgYWJvdXQgaGltIGxpa2UgYXR0ZW5kYW50cyBvciBib2R5LWd1YXJkcywgd291bGQgcnVuIG9uIGZvb3QgYnkgdGhlaXIgbWFzdGVyJ3Mgc2lkZSB3aGVuIGhlIHJvZGUgb3V0LCBjbGFkIGluIHNob3J0IGJsb3VzZXMsIGFuZCB3aGVuIGhlIHNhdCB0cmFuc2FjdGluZyBidXNpbmVzcywgd291bGQgc3RhbmQgYnkgd2l0aCB0aGVpciBhcm1zIGNyb3NzZWQuIFRoaXMgYXR0aXR1ZGUgd2FzIHRob3VnaHQgdG8gYmUgdGhlIHBsYWluZXN0IGNvbmZlc3Npb24gb2Ygc2Vydml0dWRlLCBhcyBpZiB0aGV5IGhhZCBzb2xkIHRoZWlyIGZyZWVkb20gYW5kIG9mZmVyZWQgdGhlaXIgcGVyc29ucyB0byB0aGVpciBtYXN0ZXIgZGlzcG9zZWQgZm9yIHN1ZmZlcmluZyByYXRoZXIgdGhhbiBmb3Igc2VydmljZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGUgc3dheSBvZiB0aGUgQXJtZW5pYW5zIHdhcyBpbnRvbGVyYWJseSBncmlldm91cyB0byB0aGUgR3JlZWtzLiBBYm92ZSBhbGwgZWxzZSwgdGhlIHNwaXJpdCBvZiB0aGUga2luZyBoaW1zZWxmIGhhZCBiZWNvbWUgcG9tcG91cyBhbmQgaGF1Z2h0eSBpbiB0aGUgbWlkc3Qgb2YgaGlzIGdyZWF0IHByb3NwZXJpdHkuIEFsbCB0aGUgdGhpbmdzIHdoaWNoIG1vc3QgbWVuIGNvdmV0IGFuZCBhZG1pcmUsIGhlIG5vdCBvbmx5IGhhZCBpbiBoaXMgcG9zc2Vzc2lvbiwgYnV0IGFjdHVhbGx5IHRob3VnaHQgdGhhdCB0aGV5IGV4aXN0ZWQgZm9yIGhpcyBzYWtlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aG91Z2ggaGUgaGFkIHN0YXJ0ZWQgb24gaGlzIGNhcmVlciB3aXRoIHNtYWxsIGFuZCBpbnNpZ25pZmljYW50IGV4cGVjdGF0aW9ucywgaGUgaGFkIHN1YmR1ZWQgbWFueSBuYXRpb25zLCBodW1ibGVkIHRoZSBQYXJ0aGlhbiBwb3dlciBhcyBubyBtYW4gYmVmb3JlIGhpbSBoYWQgZG9uZSwgYW5kIGZpbGxlZCBNZXNvcG90YW1pYSB3aXRoIEdyZWVrcyB3aG9tIGhlIHJlbW92ZWQgaW4gZ3JlYXQgbnVtYmVycyBmcm9tIENpbGljaWEgYW5kIGZyb20gQ2FwcGFkb2NpYSwgYW5kIHNldHRsZWQgYW5ldy4gSGUgYWxzbyByZW1vdmVkIGZyb20gdGhlaXIgd29udGVkIGhhdW50cyB0aGUgbm9tYWRpYyBBcmFiaWFucywgYW5kIGJyb3VnaHQgdGhlbSB0byBhbiBhZGphY2VudCBzZXR0bGVtZW50LCB0aGF0IGhlIG1pZ2h0IGVtcGxveSB0aGVtIGluIHRyYWRlIGFuZCBjb21tZXJjZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgd2VyZSB0aGUga2luZ3Mgd2hvIHdhaXRlZCB1cG9uIGhpbSwgYW5kIGZvdXIsIHdob20gaGUgYWx3YXlzIGhhZCBhYm91dCBoaW0gbGlrZSBhdHRlbmRhbnRzIG9yIGJvZHktZ3VhcmRzLCB3b3VsZCBydW4gb24gZm9vdCBieSB0aGVpciBtYXN0ZXIncyBzaWRlIHdoZW4gaGUgcm9kZSBvdXQsIGNsYWQgaW4gc2hvcnQgYmxvdXNlcywgYW5kIHdoZW4gaGUgc2F0IHRyYW5zYWN0aW5nIGJ1c2luZXNzLCB3b3VsZCBzdGFuZCBieSB3aXRoIHRoZWlyIGFybXMgY3Jvc3NlZC4gVGhpcyBhdHRpdHVkZSB3YXMgdGhvdWdodCB0byBiZSB0aGUgcGxhaW5lc3QgY29uZmVzc2lvbiBvZiBzZXJ2aXR1ZGUsIGFzIGlmIHRoZXkgaGFkIHNvbGQgdGhlaXIgZnJlZWRvbSBhbmQgb2ZmZXJlZCB0aGVpciBwZXJzb25zIHRvIHRoZWlyIG1hc3RlciBkaXNwb3NlZCBmb3Igc3VmZmVyaW5nIHJhdGhlciB0aGFuIGZvciBzZXJ2aWNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BcHBpdXMsIGhvd2V2ZXIsIHdhcyBub3QgZnJpZ2h0ZW5lZCBvciBhc3RvbmlzaGVkIGF0IGFsbCB0aGlzIHBvbXAgYW5kIHNob3csIGJ1dCBhcyBzb29uIGFzIGhlIG9idGFpbmVkIGFuIGF1ZGllbmNlLCB0b2xkIHRoZSBraW5nIHBsYWlubHkgdGhhdCBoZSB3YXMgY29tZSB0byB0YWtlIGJhY2sgTWl0aHJpZGF0ZXMsIGFzIGFuIG9ybmFtZW50IGR1ZSB0byB0aGUgdHJpdW1waCBvZiBMdWN1bGx1cywgb3IgZWxzZSB0byBkZWNsYXJlIHdhciBhZ2FpbnN0IFRpZ3JhbmVzLiBBbHRob3VnaCBUaWdyYW5lcyBtYWRlIGV2ZXJ5IGVmZm9ydCB0byBsaXN0ZW4gdG8gdGhpcyBzcGVlY2ggd2l0aCBhIGNoZWVyZnVsIGNvdW50ZW5hbmNlIGFuZCBhIGZvcmNlZCBzbWlsZSwgaGUgY291bGQgbm90IGhpZGUgZnJvbSB0aGUgYnlzdGFuZGVycyBoaXMgZGlzY29tZml0dXJlIGF0IHRoZSBib2xkIHdvcmRzIG9mIHRoZSB5b3VuZyBtYW4uIEl0IG11c3QgaGF2ZSBiZWVuIGZpdmUgYW5kIHR3ZW50eSB5ZWFycyBzaW5jZSBoZSBoYWQgbGlzdGVuZWQgdG8gYSBmcmVlIHNwZWVjaC4gVGhhdCB3YXMgdGhlIGxlbmd0aCBvZiBoaXMgcmVpZ24sIG9yIHJhdGhlciwgb2YgaGlzIHdhbnRvbiB0eXJhbm55LiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSByZXBsaWVkIHRvIEFwcGl1cyB0aGF0IGhlIHdvdWxkIG5vdCBzdXJyZW5kZXIgTWl0aHJpZGF0ZXMsIGFuZCB0aGF0IGlmIHRoZSBSb21hbnMgYmVnYW4gd2FyLCBoZSB3b3VsZCBkZWZlbmQgaGltc2VsZi4gSGUgd2FzIHZleGVkIHdpdGggTHVjdWxsdXMgZm9yIGFkZHJlc3NpbmcgaGltIGluIGhpcyBsZXR0ZXIgd2l0aCB0aGUgdGl0bGUgb2YgS2luZyBvbmx5LCBhbmQgbm90IEtpbmcgb2YgS2luZ3MsIGFuZCBhY2NvcmRpbmdseSwgaW4gaGlzIHJlcGx5LCB3b3VsZCBub3QgYWRkcmVzcyBMdWN1bGx1cyBhcyBJbXBlcmF0b3IuIEJ1dCBoZSBzZW50IHNwbGVuZGlkIGdpZnRzIHRvIEFwcGl1cywgYW5kIHdoZW4gaGUgd291bGQgbm90IHRha2UgdGhlbSwgYWRkZWQgbW9yZSBiZXNpZGVzLiBBcHBpdXMgZmluYWxseSBhY2NlcHRlZCBhIHNpbmdsZSBib3dsIGZyb20gYW1vbmcgdGhlbSwgbm90IHdpc2hpbmcgaGlzIHJlamVjdGlvbiBvZiB0aGUga2luZydzIG9mZmVycyB0byBzZWVtIHByb21wdGVkIGJ5IGFueSBwZXJzb25hbCBlbm1pdHksIGJ1dCBzZW50IGJhY2sgdGhlIHJlc3QsIGFuZCBtYXJjaGVkIG9mZiB3aXRoIGFsbCBzcGVlZCB0byBqb2luIHRoZSBJbXBlcmF0b3IuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFwcGl1cywgaG93ZXZlciwgd2FzIG5vdCBmcmlnaHRlbmVkIG9yIGFzdG9uaXNoZWQgYXQgYWxsIHRoaXMgcG9tcCBhbmQgc2hvdywgYnV0IGFzIHNvb24gYXMgaGUgb2J0YWluZWQgYW4gYXVkaWVuY2UsIHRvbGQgdGhlIGtpbmcgcGxhaW5seSB0aGF0IGhlIHdhcyBjb21lIHRvIHRha2UgYmFjayBNaXRocmlkYXRlcywgYXMgYW4gb3JuYW1lbnQgZHVlIHRvIHRoZSB0cml1bXBoIG9mIEx1Y3VsbHVzLCBvciBlbHNlIHRvIGRlY2xhcmUgd2FyIGFnYWluc3QgVGlncmFuZXMuIEFsdGhvdWdoIFRpZ3JhbmVzIG1hZGUgZXZlcnkgZWZmb3J0IHRvIGxpc3RlbiB0byB0aGlzIHNwZWVjaCB3aXRoIGEgY2hlZXJmdWwgY291bnRlbmFuY2UgYW5kIGEgZm9yY2VkIHNtaWxlLCBoZSBjb3VsZCBub3QgaGlkZSBmcm9tIHRoZSBieXN0YW5kZXJzIGhpcyBkaXNjb21maXR1cmUgYXQgdGhlIGJvbGQgd29yZHMgb2YgdGhlIHlvdW5nIG1hbi4gSXQgbXVzdCBoYXZlIGJlZW4gZml2ZSBhbmQgdHdlbnR5IHllYXJzIHNpbmNlIGhlIGhhZCBsaXN0ZW5lZCB0byBhIGZyZWUgc3BlZWNoLiBUaGF0IHdhcyB0aGUgbGVuZ3RoIG9mIGhpcyByZWlnbiwgb3IgcmF0aGVyLCBvZiBoaXMgd2FudG9uIHR5cmFubnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIHJlcGxpZWQgdG8gQXBwaXVzIHRoYXQgaGUgd291bGQgbm90IHN1cnJlbmRlciBNaXRocmlkYXRlcywgYW5kIHRoYXQgaWYgdGhlIFJvbWFucyBiZWdhbiB3YXIsIGhlIHdvdWxkIGRlZmVuZCBoaW1zZWxmLiBIZSB3YXMgdmV4ZWQgd2l0aCBMdWN1bGx1cyBmb3IgYWRkcmVzc2luZyBoaW0gaW4gaGlzIGxldHRlciB3aXRoIHRoZSB0aXRsZSBvZiBLaW5nIG9ubHksIGFuZCBub3QgS2luZyBvZiBLaW5ncywgYW5kIGFjY29yZGluZ2x5LCBpbiBoaXMgcmVwbHksIHdvdWxkIG5vdCBhZGRyZXNzIEx1Y3VsbHVzIGFzIEltcGVyYXRvci4gQnV0IGhlIHNlbnQgc3BsZW5kaWQgZ2lmdHMgdG8gQXBwaXVzLCBhbmQgd2hlbiBoZSB3b3VsZCBub3QgdGFrZSB0aGVtLCBhZGRlZCBtb3JlIGJlc2lkZXMuIEFwcGl1cyBmaW5hbGx5IGFjY2VwdGVkIGEgc2luZ2xlIGJvd2wgZnJvbSBhbW9uZyB0aGVtLCBub3Qgd2lzaGluZyBoaXMgcmVqZWN0aW9uIG9mIHRoZSBraW5nJ3Mgb2ZmZXJzIHRvIHNlZW0gcHJvbXB0ZWQgYnkgYW55IHBlcnNvbmFsIGVubWl0eSwgYnV0IHNlbnQgYmFjayB0aGUgcmVzdCwgYW5kIG1hcmNoZWQgb2ZmIHdpdGggYWxsIHNwZWVkIHRvIGpvaW4gdGhlIEltcGVyYXRvci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VXAgdG8gdGhpcyB0aW1lIFRpZ3JhbmVzIGhhZCBub3QgZGVpZ25lZCB0byBzZWUgTWl0aHJpZGF0ZXMsIG5vciBzcGVhayB0byBoaW0sIHRob3VnaCB0aGUgbWFuIHdhcyBhbGxpZWQgdG8gaGltIGJ5IG1hcnJpYWdlLCBhbmQgaGFkIGJlZW4gZXhwZWxsZWQgZnJvbSBzdWNoIGEgZ3JlYXQga2luZ2RvbS4gSW5zdGVhZCwgaGUgaGFkIGtlcHQgaGltIGF0IHRoZSBmYXJ0aGVzdCByZW1vdmUgcG9zc2libGUsIGluIGRpc2dyYWNlIGFuZCBjb250dW1lbHksIGFuZCBoYWQgc3VmZmVyZWQgaGltIHRvIGJlIGhlbGQgYSBzb3J0IG9mIHByaXNvbmVyIGluIG1hcnNoeSBhbmQgc2lja2x5IHJlZ2lvbnMuIE5vdywgaG93ZXZlciwgaGUgc3VtbW9uZWQgaGltIHRvIGhpcyBwYWxhY2Ugd2l0aCBtYXJrcyBvZiBlc3RlZW0gYW5kIGZyaWVuZHNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlLCBpbiBzZWNyZXQgY29uZmVyZW5jZSwgdGhleSBzdHJvdmUgdG8gYWxsYXkgdGhlaXIgbXV0dWFsIHN1c3BpY2lvbnMgYXQgdGhlIGV4cGVuc2Ugb2YgdGhlaXIgZnJpZW5kcywgYnkgbGF5aW5nIHRoZSBibGFtZSB1cG9uIHRoZW0uIE9uZSBvZiB0aGVzZSB3YXMgTWV0cm9kb3J1cyBvZiBTY2Vwc2lzLCBhIG1hbiBvZiBhZ3JlZWFibGUgc3BlZWNoIGFuZCB3aWRlIGxlYXJuaW5nLCB3aG8gZW5qb3llZCB0aGUgZnJpZW5kc2hpcCBvZiBNaXRocmlkYXRlcyBpbiBzdWNoIGEgaGlnaCBkZWdyZWUgdGhhdCBoZSB3YXMgY2FsbGVkIHRoZSBraW5nJ3MgZmF0aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1hbiwgYXMgaXQgc2VlbXMsIGhhZCBvbmNlIGJlZW4gc2VudCBhcyBhbiBhbWJhc3NhZG9yIGZyb20gTWl0aHJpZGF0ZXMgdG8gVGlncmFuZXMsIHdpdGggYSByZXF1ZXN0IGZvciBhaWQgYWdhaW5zdCB0aGUgUm9tYW5zLiBPbiB0aGlzIG9jY2FzaW9uIFRpZ3JhbmVzIGFza2VkIGhpbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgd2hhdCBpcyB5b3VyIG93biBhZHZpY2UgdG8gbWUsIE1ldHJvZG9ydXMsIGluIHRoaXMgbWF0dGVyPzwvcT4gV2hlcmV1cG9uIE1ldHJvZG9ydXMsIGVpdGhlciB3aXRoIGFuIGV5ZSB0byB0aGUgaW50ZXJlc3RzIG9mIFRpZ3JhbmVzLCBvciBiZWNhdXNlIGhlIGRpZCBub3Qgd2lzaCBNaXRocmlkYXRlcyB0byBiZSBzYXZlZCwgc2FpZCB0aGF0IGFzIGFuIGFtYmFzc2Fkb3IgaGUgdXJnZWQgY29uc2VudCwgYnV0IGFzIGFuIGFkdmlzZXIgaGUgZm9yYmFkZSBpdC4gVGlncmFuZXMgZGlzY2xvc2VkIHRoaXMgdG8gTWl0aHJpZGF0ZXMsIG5vdCBzdXBwb3NpbmcsIHdoZW4gaGUgdG9sZCBoaW0sIHRoYXQgaGUgd291bGQgcHVuaXNoIE1ldHJvZG9ydXMgcGFzdCBhbGwgaGVhbGluZy4gQnV0IE1ldHJvZG9ydXMgd2FzIGF0IG9uY2UgcHV0IG91dCBvZiB0aGUgd2F5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIFRpZ3JhbmVzIHJlcGVudGVkIG9mIHdoYXQgaGUgaGFkIGRvbmUsIGFsdGhvdWdoIGhlIHdhcyBub3QgZW50aXJlbHkgdG8gYmxhbWUgZm9yIHRoZSBkZWF0aCBvZiBNZXRyb2RvcnVzLiBIZSBtZXJlbHkgZ2F2ZSBhbiBpbXB1bHNlLCBhcyBpdCB3ZXJlLCB0byB0aGUgaGF0cmVkIHdoaWNoIE1pdGhyaWRhdGVzIGFscmVhZHkgaGFkIGZvciB0aGUgbWFuLiBGb3IgaGUgaGFkIGxvbmcgYmVlbiBzZWNyZXRseSBob3N0aWxlIHRvIGhpbSwgYXMgd2FzIHNlZW4gZnJvbSBoaXMgcHJpdmF0ZSBwYXBlcnMgd2hlbiB0aGV5IHdlcmUgY2FwdHVyZWQsIGluIHdoaWNoIHRoZXJlIHdlcmUgZGlyZWN0aW9ucyB0aGF0IE1ldHJvZG9ydXMsIGFzIHdlbGwgYXMgb3RoZXJzLCBiZSBwdXQgdG8gZGVhdGguIEFjY29yZGluZ2x5LCBUaWdyYW5lcyBnYXZlIHRoZSBib2R5IG9mIE1ldHJvZG9ydXMgYSBzcGxlbmRpZCBidXJpYWwsIHNwYXJpbmcgbm8gZXhwZW5zZSB1cG9uIHRoZSBtYW4gd2hlbiBkZWFkLCBhbHRob3VnaCBoZSBoYWQgYmV0cmF5ZWQgaGltIHdoZW4gYWxpdmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VXAgdG8gdGhpcyB0aW1lIFRpZ3JhbmVzIGhhZCBub3QgZGVpZ25lZCB0byBzZWUgTWl0aHJpZGF0ZXMsIG5vciBzcGVhayB0byBoaW0sIHRob3VnaCB0aGUgbWFuIHdhcyBhbGxpZWQgdG8gaGltIGJ5IG1hcnJpYWdlLCBhbmQgaGFkIGJlZW4gZXhwZWxsZWQgZnJvbSBzdWNoIGEgZ3JlYXQga2luZ2RvbS4gSW5zdGVhZCwgaGUgaGFkIGtlcHQgaGltIGF0IHRoZSBmYXJ0aGVzdCByZW1vdmUgcG9zc2libGUsIGluIGRpc2dyYWNlIGFuZCBjb250dW1lbHksIGFuZCBoYWQgc3VmZmVyZWQgaGltIHRvIGJlIGhlbGQgYSBzb3J0IG9mIHByaXNvbmVyIGluIG1hcnNoeSBhbmQgc2lja2x5IHJlZ2lvbnMuIE5vdywgaG93ZXZlciwgaGUgc3VtbW9uZWQgaGltIHRvIGhpcyBwYWxhY2Ugd2l0aCBtYXJrcyBvZiBlc3RlZW0gYW5kIGZyaWVuZHNoaXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlLCBpbiBzZWNyZXQgY29uZmVyZW5jZSwgdGhleSBzdHJvdmUgdG8gYWxsYXkgdGhlaXIgbXV0dWFsIHN1c3BpY2lvbnMgYXQgdGhlIGV4cGVuc2Ugb2YgdGhlaXIgZnJpZW5kcywgYnkgbGF5aW5nIHRoZSBibGFtZSB1cG9uIHRoZW0uIE9uZSBvZiB0aGVzZSB3YXMgTWV0cm9kb3J1cyBvZiBTY2Vwc2lzLCBhIG1hbiBvZiBhZ3JlZWFibGUgc3BlZWNoIGFuZCB3aWRlIGxlYXJuaW5nLCB3aG8gZW5qb3llZCB0aGUgZnJpZW5kc2hpcCBvZiBNaXRocmlkYXRlcyBpbiBzdWNoIGEgaGlnaCBkZWdyZWUgdGhhdCBoZSB3YXMgY2FsbGVkIHRoZSBraW5nJ3MgZmF0aGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuLCBhcyBpdCBzZWVtcywgaGFkIG9uY2UgYmVlbiBzZW50IGFzIGFuIGFtYmFzc2Fkb3IgZnJvbSBNaXRocmlkYXRlcyB0byBUaWdyYW5lcywgd2l0aCBhIHJlcXVlc3QgZm9yIGFpZCBhZ2FpbnN0IHRoZSBSb21hbnMuIE9uIHRoaXMgb2NjYXNpb24gVGlncmFuZXMgYXNrZWQgaGltOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHdoYXQgaXMgeW91ciBvd24gYWR2aWNlIHRvIG1lLCBNZXRyb2RvcnVzLCBpbiB0aGlzIG1hdHRlcj88L3E+IFdoZXJldXBvbiBNZXRyb2RvcnVzLCBlaXRoZXIgd2l0aCBhbiBleWUgdG8gdGhlIGludGVyZXN0cyBvZiBUaWdyYW5lcywgb3IgYmVjYXVzZSBoZSBkaWQgbm90IHdpc2ggTWl0aHJpZGF0ZXMgdG8gYmUgc2F2ZWQsIHNhaWQgdGhhdCBhcyBhbiBhbWJhc3NhZG9yIGhlIHVyZ2VkIGNvbnNlbnQsIGJ1dCBhcyBhbiBhZHZpc2VyIGhlIGZvcmJhZGUgaXQuIFRpZ3JhbmVzIGRpc2Nsb3NlZCB0aGlzIHRvIE1pdGhyaWRhdGVzLCBub3Qgc3VwcG9zaW5nLCB3aGVuIGhlIHRvbGQgaGltLCB0aGF0IGhlIHdvdWxkIHB1bmlzaCBNZXRyb2RvcnVzIHBhc3QgYWxsIGhlYWxpbmcuIEJ1dCBNZXRyb2RvcnVzIHdhcyBhdCBvbmNlIHB1dCBvdXQgb2YgdGhlIHdheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gVGlncmFuZXMgcmVwZW50ZWQgb2Ygd2hhdCBoZSBoYWQgZG9uZSwgYWx0aG91Z2ggaGUgd2FzIG5vdCBlbnRpcmVseSB0byBibGFtZSBmb3IgdGhlIGRlYXRoIG9mIE1ldHJvZG9ydXMuIEhlIG1lcmVseSBnYXZlIGFuIGltcHVsc2UsIGFzIGl0IHdlcmUsIHRvIHRoZSBoYXRyZWQgd2hpY2ggTWl0aHJpZGF0ZXMgYWxyZWFkeSBoYWQgZm9yIHRoZSBtYW4uIEZvciBoZSBoYWQgbG9uZyBiZWVuIHNlY3JldGx5IGhvc3RpbGUgdG8gaGltLCBhcyB3YXMgc2VlbiBmcm9tIGhpcyBwcml2YXRlIHBhcGVycyB3aGVuIHRoZXkgd2VyZSBjYXB0dXJlZCwgaW4gd2hpY2ggdGhlcmUgd2VyZSBkaXJlY3Rpb25zIHRoYXQgTWV0cm9kb3J1cywgYXMgd2VsbCBhcyBvdGhlcnMsIGJlIHB1dCB0byBkZWF0aC4gQWNjb3JkaW5nbHksIFRpZ3JhbmVzIGdhdmUgdGhlIGJvZHkgb2YgTWV0cm9kb3J1cyBhIHNwbGVuZGlkIGJ1cmlhbCwgc3BhcmluZyBubyBleHBlbnNlIHVwb24gdGhlIG1hbiB3aGVuIGRlYWQsIGFsdGhvdWdoIGhlIGhhZCBiZXRyYXllZCBoaW0gd2hlbiBhbGl2ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW1waGljcmF0ZXMsIHRoZSByaGV0b3JpY2lhbiwgYWxzbyBsb3N0IGhpcyBsaWZlIGF0IHRoZSBjb3VydCBvZiBUaWdyYW5lcywgaWYsIGZvciB0aGUgc2FrZSBvZiBBdGhlbnMsIHdlIG1heSBtYWtlIHNvbWUgbWVudGlvbiBvZiBoaW0gdG9vLiBJdCBpcyBzYWlkIHRoYXQgd2hlbiBoZSB3YXMgZXhpbGVkIGZyb20gaGlzIG5hdGl2ZSBjaXR5LCBoZSB3ZW50IHRvIFNlbGV1Y2lhIG9uIHRoZSBUaWdyaXMsIGFuZCB0aGF0IHdoZW4gdGhlIGNpdGl6ZW5zIGFza2VkIGhpbSB0byBnaXZlIGxlY3R1cmVzIHRoZXJlLCBoZSB0cmVhdGVkIHRoZWlyIGludml0YXRpb24gd2l0aCBjb250ZW1wdCwgYXJyb2dhbnRseSByZW1hcmtpbmcgdGhhdCBhIHN0ZXdwYW4gY291bGQgbm90IGhvbGQgYSBkb2xwaGluLiBSZW1vdmluZyB0aGVuY2UsIGhlIGF0dGFjaGVkIGhpbXNlbGYgdG8gQ2xlb3BhdHJhLCB0aGUgZGF1Z2h0ZXIgb2YgTWl0aHJpZGF0ZXMgYW5kIHdpZmUgb2YgVGlncmFuZXMsIGJ1dCBzcGVlZGlseSBmZWxsIGludG8gZGlzZmF2b3VyLCBhbmQsIGJlaW5nIGV4Y2x1ZGVkIGZyb20gaW50ZXJjb3Vyc2Ugd2l0aCBHcmVla3MsIHN0YXJ2ZWQgaGltc2VsZiB0byBkZWF0aC4gSGUgYWxzbyByZWNlaXZlZCBob25vdXJhYmxlIGJ1cmlhbCBhdCB0aGUgaGFuZHMgb2YgQ2xlb3BhdHJhLCBhbmQgaGlzIGJvZHkgbGllcyBhdCBTYXBoYSwgYXMgYSBwbGFjZSBpbiB0aG9zZSBwYXJ0cyBpcyBjYWxsZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFtcGhpY3JhdGVzLCB0aGUgcmhldG9yaWNpYW4sIGFsc28gbG9zdCBoaXMgbGlmZSBhdCB0aGUgY291cnQgb2YgVGlncmFuZXMsIGlmLCBmb3IgdGhlIHNha2Ugb2YgQXRoZW5zLCB3ZSBtYXkgbWFrZSBzb21lIG1lbnRpb24gb2YgaGltIHRvby4gSXQgaXMgc2FpZCB0aGF0IHdoZW4gaGUgd2FzIGV4aWxlZCBmcm9tIGhpcyBuYXRpdmUgY2l0eSwgaGUgd2VudCB0byBTZWxldWNpYSBvbiB0aGUgVGlncmlzLCBhbmQgdGhhdCB3aGVuIHRoZSBjaXRpemVucyBhc2tlZCBoaW0gdG8gZ2l2ZSBsZWN0dXJlcyB0aGVyZSwgaGUgdHJlYXRlZCB0aGVpciBpbnZpdGF0aW9uIHdpdGggY29udGVtcHQsIGFycm9nYW50bHkgcmVtYXJraW5nIHRoYXQgYSBzdGV3cGFuIGNvdWxkIG5vdCBob2xkIGEgZG9scGhpbi4gUmVtb3ZpbmcgdGhlbmNlLCBoZSBhdHRhY2hlZCBoaW1zZWxmIHRvIENsZW9wYXRyYSwgdGhlIGRhdWdodGVyIG9mIE1pdGhyaWRhdGVzIGFuZCB3aWZlIG9mIFRpZ3JhbmVzLCBidXQgc3BlZWRpbHkgZmVsbCBpbnRvIGRpc2Zhdm91ciwgYW5kLCBiZWluZyBleGNsdWRlZCBmcm9tIGludGVyY291cnNlIHdpdGggR3JlZWtzLCBzdGFydmVkIGhpbXNlbGYgdG8gZGVhdGguIEhlIGFsc28gcmVjZWl2ZWQgaG9ub3VyYWJsZSBidXJpYWwgYXQgdGhlIGhhbmRzIG9mIENsZW9wYXRyYSwgYW5kIGhpcyBib2R5IGxpZXMgYXQgU2FwaGEsIGFzIGEgcGxhY2UgaW4gdGhvc2UgcGFydHMgaXMgY2FsbGVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIHVuaXQ9ImNoYXB0ZXIiIC8+WFhJSUkuIEx1Y3VsbHVzLCBhZnRlciBmaWxsaW5nIEFzaWEgZnVsbCBvZiBsYXcgYW5kIG9yZGVyLCBhbmQgZnVsbCBvZiBwZWFjZSwgZGlkIG5vdCBuZWdsZWN0IHRoZSB0aGluZ3Mgd2hpY2ggbWluaXN0ZXIgdG8gcGxlYXN1cmUgYW5kIHdpbiBmYXZvdXIsIGJ1dCBkdXJpbmcgaGlzIHN0YXkgYXQgRXBoZXN1cyBncmF0aWZpZWQgdGhlIGNpdGllcyB3aXRoIHByb2Nlc3Npb25zIGFuZCB0cml1bXBoYWwgZmVzdGl2YWxzIGFuZCBjb250ZXN0cyBvZiBhdGhsZXRlcyBhbmQgZ2xhZGlhdG9ycy4gQW5kIHRoZSBjaXRpZXMsIGluIHJlc3BvbnNlLCBjZWxlYnJhdGVkIGZlc3RpdmFscyB3aGljaCB0aGV5IGNhbGxlZCBMdWN1bGxlYSwgdG8gZG8gaG9ub3VyIHRvIHRoZSBtYW4sIGFuZCBiZXN0b3dlZCB1cG9uIGhpbSB3aGF0IGlzIHN3ZWV0ZXIgdGhhbiBob25vdXIsIHRoZWlyIGdlbnVpbmUgZ29vZC13aWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBBcHBpdXMgY2FtZSwgYW5kIGl0IHdhcyBwbGFpbiB0aGF0IHdhciBtdXN0IGJlIHdhZ2VkIGFnYWluc3QgVGlncmFuZXMsIGhlIHdlbnQgYmFjayBpbnRvIFBvbnR1cywgcHV0IGhpbXNlbGYgYXQgdGhlIGhlYWQgb2YgaGlzIHNvbGRpZXJzLCBhbmQgbGFpZCBzaWVnZSB0byBTaW5vcMOpLCBvciByYXRoZXIsIHRvIHRoZSBDaWxpY2lhbnMgd2hvIHdlcmUgb2NjdXB5aW5nIHRoYXQgY2l0eSBmb3IgdGhlIGtpbmcuIFRoZXNlIHNsZXcgbWFueSBvZiB0aGUgU2lub3BpYW5zLCBmaXJlZCB0aGUgY2l0eSwgYW5kIHNldCBvdXQgdG8gZmx5IGJ5IG5pZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTHVjdWxsdXMgc2F3IHdoYXQgd2FzIGdvaW5nIG9uLCBtYWRlIGhpcyB3YXkgaW50byB0aGUgY2l0eSwgYW5kIHNsZXcgZWlnaHQgdGhvdXNhbmQgb2YgdGhlIENpbGljaWFucyB3aG8gd2VyZSBzdGlsbCB0aGVyZS4gVGhlbiBoZSByZXN0b3JlZCB0byB0aGUgY2l0aXplbnMgdGhlaXIgcHJpdmF0ZSBwcm9wZXJ0eSwgYW5kIG1pbmlzdGVyZWQgdG8gdGhlIG5lZWRzIG9mIHRoZSBjaXR5LCBtb3JlIGVzcGVjaWFsbHkgb24gYWNjb3VudCBvZiB0aGUgZm9sbG93aW5nIHZpc2lvbi4gSGUgdGhvdWdodCBpbiBoaXMgc2xlZXAgdGhhdCBhIGZvcm0gc3Rvb2QgYnkgaGlzIHNpZGUgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+R28gZm9yd2FyZCBhIGxpdHRsZSwgTHVjdWxsdXM7IGZvciBBdXRvbHljdXMgaXMgY29tZSwgYW5kIHdpc2hlcyB0byBtZWV0IHlvdS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+T24gcmlzaW5nIGZyb20gc2xlZXAsIGhlIHdhcyB1bmFibGUgdG8gY29uamVjdHVyZSB3aGF0IHRoZSB2aXNpb24gbWVhbnQ7IGJ1dCBoZSB0b29rIHRoZSBjaXR5IG9uIHRoYXQgZGF5LCBhbmQgYXMgaGUgcHVyc3VlZCB0aGUgQ2lsaWNpYW5zIHdobyB3ZXJlIHNhaWxpbmcgYXdheSwgaGUgc2F3IGEgc3RhdHVlIGx5aW5nIG9uIHRoZSBiZWFjaCwgd2hpY2ggdGhlIENpbGljaWFucyBoYWQgbm90IHN1Y2NlZWRlZCBpbiBnZXR0aW5nIG9uIGJvYXJkIHdpdGggdGhlbS4gSXQgd2FzIHRoZSB3b3JrIG9mIFN0aGVuaXMsIGFuZCBvbmUgb2YgaGlzIG1hc3RlcnBpZWNlcy4gV2VsbCB0aGVuLCBzb21lIG9uZSB0b2xkIEx1Y3VsbHVzIHRoYXQgaXQgd2FzIHRoZSBzdGF0dWUgb2YgQXV0b2x5Y3VzLCB0aGUgZm91bmRlciBvZiBTaW5vcMOpLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz5YWElJSS4gTHVjdWxsdXMsIGFmdGVyIGZpbGxpbmcgQXNpYSBmdWxsIG9mIGxhdyBhbmQgb3JkZXIsIGFuZCBmdWxsIG9mIHBlYWNlLCBkaWQgbm90IG5lZ2xlY3QgdGhlIHRoaW5ncyB3aGljaCBtaW5pc3RlciB0byBwbGVhc3VyZSBhbmQgd2luIGZhdm91ciwgYnV0IGR1cmluZyBoaXMgc3RheSBhdCBFcGhlc3VzIGdyYXRpZmllZCB0aGUgY2l0aWVzIHdpdGggcHJvY2Vzc2lvbnMgYW5kIHRyaXVtcGhhbCBmZXN0aXZhbHMgYW5kIGNvbnRlc3RzIG9mIGF0aGxldGVzIGFuZCBnbGFkaWF0b3JzLiBBbmQgdGhlIGNpdGllcywgaW4gcmVzcG9uc2UsIGNlbGVicmF0ZWQgZmVzdGl2YWxzIHdoaWNoIHRoZXkgY2FsbGVkIEx1Y3VsbGVhLCB0byBkbyBob25vdXIgdG8gdGhlIG1hbiwgYW5kIGJlc3Rvd2VkIHVwb24gaGltIHdoYXQgaXMgc3dlZXRlciB0aGFuIGhvbm91ciwgdGhlaXIgZ2VudWluZSBnb29kLXdpbGwuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gQXBwaXVzIGNhbWUsIGFuZCBpdCB3YXMgcGxhaW4gdGhhdCB3YXIgbXVzdCBiZSB3YWdlZCBhZ2FpbnN0IFRpZ3JhbmVzLCBoZSB3ZW50IGJhY2sgaW50byBQb250dXMsIHB1dCBoaW1zZWxmIGF0IHRoZSBoZWFkIG9mIGhpcyBzb2xkaWVycywgYW5kIGxhaWQgc2llZ2UgdG8gU2lub3DDqSwgb3IgcmF0aGVyLCB0byB0aGUgQ2lsaWNpYW5zIHdobyB3ZXJlIG9jY3VweWluZyB0aGF0IGNpdHkgZm9yIHRoZSBraW5nLiBUaGVzZSBzbGV3IG1hbnkgb2YgdGhlIFNpbm9waWFucywgZmlyZWQgdGhlIGNpdHksIGFuZCBzZXQgb3V0IHRvIGZseSBieSBuaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBMdWN1bGx1cyBzYXcgd2hhdCB3YXMgZ29pbmcgb24sIG1hZGUgaGlzIHdheSBpbnRvIHRoZSBjaXR5LCBhbmQgc2xldyBlaWdodCB0aG91c2FuZCBvZiB0aGUgQ2lsaWNpYW5zIHdobyB3ZXJlIHN0aWxsIHRoZXJlLiBUaGVuIGhlIHJlc3RvcmVkIHRvIHRoZSBjaXRpemVucyB0aGVpciBwcml2YXRlIHByb3BlcnR5LCBhbmQgbWluaXN0ZXJlZCB0byB0aGUgbmVlZHMgb2YgdGhlIGNpdHksIG1vcmUgZXNwZWNpYWxseSBvbiBhY2NvdW50IG9mIHRoZSBmb2xsb3dpbmcgdmlzaW9uLiBIZSB0aG91Z2h0IGluIGhpcyBzbGVlcCB0aGF0IGEgZm9ybSBzdG9vZCBieSBoaXMgc2lkZSBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkdvIGZvcndhcmQgYSBsaXR0bGUsIEx1Y3VsbHVzOyBmb3IgQXV0b2x5Y3VzIGlzIGNvbWUsIGFuZCB3aXNoZXMgdG8gbWVldCB5b3UuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uIHJpc2luZyBmcm9tIHNsZWVwLCBoZSB3YXMgdW5hYmxlIHRvIGNvbmplY3R1cmUgd2hhdCB0aGUgdmlzaW9uIG1lYW50OyBidXQgaGUgdG9vayB0aGUgY2l0eSBvbiB0aGF0IGRheSwgYW5kIGFzIGhlIHB1cnN1ZWQgdGhlIENpbGljaWFucyB3aG8gd2VyZSBzYWlsaW5nIGF3YXksIGhlIHNhdyBhIHN0YXR1ZSBseWluZyBvbiB0aGUgYmVhY2gsIHdoaWNoIHRoZSBDaWxpY2lhbnMgaGFkIG5vdCBzdWNjZWVkZWQgaW4gZ2V0dGluZyBvbiBib2FyZCB3aXRoIHRoZW0uIEl0IHdhcyB0aGUgd29yayBvZiBTdGhlbmlzLCBhbmQgb25lIG9mIGhpcyBtYXN0ZXJwaWVjZXMuIFdlbGwgdGhlbiwgc29tZSBvbmUgdG9sZCBMdWN1bGx1cyB0aGF0IGl0IHdhcyB0aGUgc3RhdHVlIG9mIEF1dG9seWN1cywgdGhlIGZvdW5kZXIgb2YgU2lub3DDqS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEF1dG9seWN1cyBpcyBzYWlkIHRvIGhhdmUgYmVlbiBvbmUgb2YgdGhvc2Ugd2hvIG1hZGUgYW4gZXhwZWRpdGlvbiB3aXRoIEhlcmFjbGVzIGZyb20gVGhlc3NhbHkgYWdhaW5zdCB0aGUgQW1hem9ucywgYSBzb24gb2YgRGXDr21hY2h1cy4gT24gaGlzIHZveWFnZSBvZiByZXR1cm4sIGluIGNvbXBhbnkgd2l0aCBEZW1vbGVvbiBhbmQgUGhsb2dpdXMsIGhlIGxvc3QgaGlzIHNoaXAsIHdoaWNoIHdhcyB3cmVja2VkIGF0IHRoZSBwbGFjZSBjYWxsZWQgUGVkYWxpdW0sIGluIHRoZSBDaGVyc29uZXN1czsgYnV0IGhlIGhpbXNlbGYgZXNjYXBlZCwgd2l0aCBoaXMgYXJtcyBhbmQgaGlzIGNvbXBhbmlvbnMsIGFuZCBjb21pbmcgdG8gU2lub3DDqSwgdG9vayB0aGUgY2l0eSBhd2F5IGZyb20gdGhlIFN5cmlhbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIFN5cmlhbnMgd2hvIHdlcmUgaW4gcG9zc2Vzc2lvbiBvZiB0aGUgY2l0eSB3ZXJlIGRlc2NlbmRlZCwgYXMgaXQgaXMgc2FpZCwgZnJvbSBTeXJ1cywgdGhlIHNvbiBvZiBBcG9sbG8sIGFuZCBTaW5vcMOpLCB0aGUgZGF1Z2h0ZXIgb2YgQXNvcGlzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBBdXRvbHljdXMgaXMgc2FpZCB0byBoYXZlIGJlZW4gb25lIG9mIHRob3NlIHdobyBtYWRlIGFuIGV4cGVkaXRpb24gd2l0aCBIZXJhY2xlcyBmcm9tIFRoZXNzYWx5IGFnYWluc3QgdGhlIEFtYXpvbnMsIGEgc29uIG9mIERlw69tYWNodXMuIE9uIGhpcyB2b3lhZ2Ugb2YgcmV0dXJuLCBpbiBjb21wYW55IHdpdGggRGVtb2xlb24gYW5kIFBobG9naXVzLCBoZSBsb3N0IGhpcyBzaGlwLCB3aGljaCB3YXMgd3JlY2tlZCBhdCB0aGUgcGxhY2UgY2FsbGVkIFBlZGFsaXVtLCBpbiB0aGUgQ2hlcnNvbmVzdXM7IGJ1dCBoZSBoaW1zZWxmIGVzY2FwZWQsIHdpdGggaGlzIGFybXMgYW5kIGhpcyBjb21wYW5pb25zLCBhbmQgY29taW5nIHRvIFNpbm9ww6ksIHRvb2sgdGhlIGNpdHkgYXdheSBmcm9tIHRoZSBTeXJpYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIFN5cmlhbnMgd2hvIHdlcmUgaW4gcG9zc2Vzc2lvbiBvZiB0aGUgY2l0eSB3ZXJlIGRlc2NlbmRlZCwgYXMgaXQgaXMgc2FpZCwgZnJvbSBTeXJ1cywgdGhlIHNvbiBvZiBBcG9sbG8sIGFuZCBTaW5vcMOpLCB0aGUgZGF1Z2h0ZXIgb2YgQXNvcGlzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPk9uIGhlYXJpbmcgdGhpcywgTHVjdWxsdXMgY2FsbGVkIHRvIG1pbmQgdGhlIGFkdmljZSBvZiBTdWxsYSwgaW4gaGlzIE1lbW9pcnMsIHdoaWNoIHdhcyB0byB0aGluayBub3RoaW5nIHNvIHRydXN0d29ydGh5IGFuZCBzdXJlIGFzIHRoYXQgd2hpY2ggaXMgc2lnbmlmaWVkIGJ5IGRyZWFtcy4KCQkJPC9wPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5CZWluZyBpbmZvcm1lZCBub3cgdGhhdCBNaXRocmlkYXRlcyBhbmQgVGlncmFuZXMgd2VyZSBvbiB0aGUgcG9pbnQgb2YgZW50ZXJpbmcgTHljYW9uaWEgYW5kIENpbGljaWEsIHdpdGggdGhlIHB1cnBvc2Ugb2YgaW52YWRpbmcgQXNpYSBiZWZvcmUgd2FyIHdhcyBhY3R1YWxseSBkZWNsYXJlZCwgaGUgd2FzIGFtYXplZCB0aGF0IHRoZSBBcm1lbmlhbiwgaWYgaGUgY2hlcmlzaGVkIHRoZSBkZXNpZ24gb2YgYXR0YWNraW5nIHRoZSBSb21hbnMsIGhhZCBub3QgbWFkZSB1c2Ugb2YgTWl0aHJpZGF0ZXMgZm9yIHRoaXMgd2FyIHdoZW4gaGUgd2FzIGF0IHRoZSB6ZW5pdGggb2YgaGlzIHBvd2VyLCBub3Igam9pbmVkIGZvcmNlcyB3aXRoIGhpbSB3aGVuIGhlIHdhcyBzdHJvbmcsIGJ1dCBoYWQgYWxsb3dlZCBoaW0gdG8gYmUgY3J1c2hlZCBhbmQgcnVpbmVkLCBhbmQgbm93IGJlZ2FuIGEgd2FyIHdoaWNoIG9mZmVyZWQgb25seSBmYWludCBob3BlcyBvZiBzdWNjZXNzLCBwcm9zdHJhdGluZyBoaW1zZWxmIHRvIHRoZSBsZXZlbCBvZiB0aG9zZSB3aG8gd2VyZSB1bmFibGUgdG8gc3RhbmQgZXJlY3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJlaW5nIGluZm9ybWVkIG5vdyB0aGF0IE1pdGhyaWRhdGVzIGFuZCBUaWdyYW5lcyB3ZXJlIG9uIHRoZSBwb2ludCBvZiBlbnRlcmluZyBMeWNhb25pYSBhbmQgQ2lsaWNpYSwgd2l0aCB0aGUgcHVycG9zZSBvZiBpbnZhZGluZyBBc2lhIGJlZm9yZSB3YXIgd2FzIGFjdHVhbGx5IGRlY2xhcmVkLCBoZSB3YXMgYW1hemVkIHRoYXQgdGhlIEFybWVuaWFuLCBpZiBoZSBjaGVyaXNoZWQgdGhlIGRlc2lnbiBvZiBhdHRhY2tpbmcgdGhlIFJvbWFucywgaGFkIG5vdCBtYWRlIHVzZSBvZiBNaXRocmlkYXRlcyBmb3IgdGhpcyB3YXIgd2hlbiBoZSB3YXMgYXQgdGhlIHplbml0aCBvZiBoaXMgcG93ZXIsIG5vciBqb2luZWQgZm9yY2VzIHdpdGggaGltIHdoZW4gaGUgd2FzIHN0cm9uZywgYnV0IGhhZCBhbGxvd2VkIGhpbSB0byBiZSBjcnVzaGVkIGFuZCBydWluZWQsIGFuZCBub3cgYmVnYW4gYSB3YXIgd2hpY2ggb2ZmZXJlZCBvbmx5IGZhaW50IGhvcGVzIG9mIHN1Y2Nlc3MsIHByb3N0cmF0aW5nIGhpbXNlbGYgdG8gdGhlIGxldmVsIG9mIHRob3NlIHdobyB3ZXJlIHVuYWJsZSB0byBzdGFuZCBlcmVjdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gTWFjaGFyZXMgYWxzbywgdGhlIHNvbiBvZiBNaXRocmlkYXRlcywgd2hvIGhlbGQgdGhlIEJvc3BvcnVzLCBzZW50IEx1Y3VsbHVzIGEgY3Jvd24gdmFsdWVkIGF0IGEgdGhvdXNhbmQgcGllY2VzIG9mIGdvbGQsIGJlZ2dpbmcgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGxpc3Qgb2YgUm9tZSdzIGZyaWVuZHMgYW5kIGFsbGllcywgTHVjdWxsdXMgZGVjaWRlZCBhdCBvbmNlIHRoYXQgdGhlIGZpcnN0IHdhciB3YXMgZmluaXNoZWQuIEhlIHRoZXJlZm9yZSBsZWZ0IFNvcm5hdGl1cyB0aGVyZSBhcyBndWFyZGlhbiBvZiBQb250dXMsIHdpdGggc2l4IHRob3VzYW5kIHNvbGRpZXJzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz53aGlsZSBoZSBoaW1zZWxmLCB3aXRoIHR3ZWx2ZSB0aG91c2FuZCBmb290bWVuIGFuZCBsZXNzIHRoYW4gdGhyZWUgdGhvdXNhbmQgaG9yc2UsIHNldCBvdXQgZm9yIHRoZSBzZWNvbmQgd2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjY5IEIuQy48L25vdGU+IEhlIHNlZW1lZCB0byBiZSBtYWtpbmcgYSByZWNrbGVzcyBhdHRhY2ssIGFuZCBvbmUgd2hpY2ggYWRtaXR0ZWQgb2Ygbm8gc2F2aW5nIGNhbGN1bGF0aW9uLCB1cG9uIHdhcmxpa2UgbmF0aW9ucywgY291bnRsZXNzIHRob3VzYW5kcyBvZiBob3JzZW1lbiwgYW5kIGEgYm91bmRsZXNzIHJlZ2lvbiBzdXJyb3VuZGVkIGJ5IGRlZXAgcml2ZXJzIGFuZCBtb3VudGFpbnMgY292ZXJlZCB3aXRoIHBlcnBldHVhbCBzbm93LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgc29sZGllcnMsIHRoZXJlZm9yZSwgd2hvIHdlcmUgbm9uZSB0b28gd2VsbCBkaXNjaXBsaW5lZCBpbiBhbnkgY2FzZSwgZm9sbG93ZWQgaGltIHJlbHVjdGFudGx5IGFuZCByZWJlbGxpb3VzbHksIHdoaWxlIHRoZSBwb3B1bGFyIHRyaWJ1bmVzIGF0IFJvbWUgcmFpc2VkIGFuIG91dGNyeSBhZ2FpbnN0IGhpbSwgYW5kIGFjY3VzZWQgaGltIG9mIHNlZWtpbmcgb25lIHdhciBhZnRlciBhbm90aGVyLCBhbHRob3VnaCB0aGUgY2l0eSBoYWQgbm8gbmVlZCBvZiB0aGVtLCB0aGF0IGhlIG1pZ2h0IGJlIGluIHBlcnBldHVhbCBjb21tYW5kIGFuZCBuZXZlciBsYXkgZG93biBoaXMgYXJtcyBvciBjZWFzZSBlbnJpY2hpbmcgaGltc2VsZiBmcm9tIHRoZSBwdWJsaWMgZGFuZ2Vycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kLCBpbiB0aW1lLCB0aGVzZSBtZW4gYWNjb21wbGlzaGVkIHRoZWlyIHB1cnBvc2UuIEJ1dCBMdWN1bGx1cyBhZHZhbmNlZCBieSBmb3JjZWQgbWFyY2hlcyB0byB0aGUgRXVwaHJhdGVzLiBIZXJlIGhlIGZvdW5kIHRoZSBzdHJlYW0gc3dvbGxlbiBhbmQgdHVyYmlkIGZyb20gdGhlIHdpbnRlciBzdG9ybXMsIGFuZCB3YXMgdmV4ZWQgdG8gdGhpbmsgb2YgdGhlIGRlbGF5IGFuZCB0cm91YmxlIHdoaWNoIGl0IHdvdWxkIGNvc3QgaGltIHRvIGNvbGxlY3QgYm9hdHMgYW5kIGJ1aWxkIHJhZnRzLiBCdXQgYXQgZXZlbmluZyB0aGUgc3RyZWFtIGJlZ2FuIHRvIHN1YnNpZGUsIHdlbnQgb24gZGltaW5pc2hpbmcgdGhyb3VnaCB0aGUgbmlnaHQsIGFuZCBhdCBkYXlicmVhayB0aGUgcml2ZXIgd2FzIHJ1bm5pbmcgYmV0d2VlbiBsb2Z0eSBiYW5rcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG5hdGl2ZXMsIG9ic2VydmluZyB0aGF0IHN1bmRyeSBzbWFsbCBpc2xhbmRzIGluIHRoZSBjaGFubmVsIGhhZCBiZWNvbWUgdmlzaWJsZSwgYW5kIHRoYXQgdGhlIGN1cnJlbnQgbmVhciB0aGVtIHdhcyBxdWlldCwgbWFkZSBvYmVpc2FuY2UgdG8gTHVjdWxsdXMsIHNheWluZyB0aGF0IHRoaXMgaGFkIHNlbGRvbSBoYXBwZW5lZCBiZWZvcmUsIGFuZCB0aGF0IHRoZSByaXZlciBoYWQgdm9sdW50YXJpbHkgbWFkZSBpdHNlbGYgdGFtZSBhbmQgZ2VudGxlIGZvciBMdWN1bGx1cywgYW5kIG9mZmVyZWQgaGltIGFuIGVhc3kgYW5kIHNwZWVkeSBwYXNzYWdlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gTWFjaGFyZXMgYWxzbywgdGhlIHNvbiBvZiBNaXRocmlkYXRlcywgd2hvIGhlbGQgdGhlIEJvc3BvcnVzLCBzZW50IEx1Y3VsbHVzIGEgY3Jvd24gdmFsdWVkIGF0IGEgdGhvdXNhbmQgcGllY2VzIG9mIGdvbGQsIGJlZ2dpbmcgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGxpc3Qgb2YgUm9tZSdzIGZyaWVuZHMgYW5kIGFsbGllcywgTHVjdWxsdXMgZGVjaWRlZCBhdCBvbmNlIHRoYXQgdGhlIGZpcnN0IHdhciB3YXMgZmluaXNoZWQuIEhlIHRoZXJlZm9yZSBsZWZ0IFNvcm5hdGl1cyB0aGVyZSBhcyBndWFyZGlhbiBvZiBQb250dXMsIHdpdGggc2l4IHRob3VzYW5kIHNvbGRpZXJzLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIGhlIGhpbXNlbGYsIHdpdGggdHdlbHZlIHRob3VzYW5kIGZvb3RtZW4gYW5kIGxlc3MgdGhhbiB0aHJlZSB0aG91c2FuZCBob3JzZSwgc2V0IG91dCBmb3IgdGhlIHNlY29uZCB3YXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj42OSBCLkMuPC9ub3RlPiBIZSBzZWVtZWQgdG8gYmUgbWFraW5nIGEgcmVja2xlc3MgYXR0YWNrLCBhbmQgb25lIHdoaWNoIGFkbWl0dGVkIG9mIG5vIHNhdmluZyBjYWxjdWxhdGlvbiwgdXBvbiB3YXJsaWtlIG5hdGlvbnMsIGNvdW50bGVzcyB0aG91c2FuZHMgb2YgaG9yc2VtZW4sIGFuZCBhIGJvdW5kbGVzcyByZWdpb24gc3Vycm91bmRlZCBieSBkZWVwIHJpdmVycyBhbmQgbW91bnRhaW5zIGNvdmVyZWQgd2l0aCBwZXJwZXR1YWwgc25vdy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBzb2xkaWVycywgdGhlcmVmb3JlLCB3aG8gd2VyZSBub25lIHRvbyB3ZWxsIGRpc2NpcGxpbmVkIGluIGFueSBjYXNlLCBmb2xsb3dlZCBoaW0gcmVsdWN0YW50bHkgYW5kIHJlYmVsbGlvdXNseSwgd2hpbGUgdGhlIHBvcHVsYXIgdHJpYnVuZXMgYXQgUm9tZSByYWlzZWQgYW4gb3V0Y3J5IGFnYWluc3QgaGltLCBhbmQgYWNjdXNlZCBoaW0gb2Ygc2Vla2luZyBvbmUgd2FyIGFmdGVyIGFub3RoZXIsIGFsdGhvdWdoIHRoZSBjaXR5IGhhZCBubyBuZWVkIG9mIHRoZW0sIHRoYXQgaGUgbWlnaHQgYmUgaW4gcGVycGV0dWFsIGNvbW1hbmQgYW5kIG5ldmVyIGxheSBkb3duIGhpcyBhcm1zIG9yIGNlYXNlIGVucmljaGluZyBoaW1zZWxmIGZyb20gdGhlIHB1YmxpYyBkYW5nZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCwgaW4gdGltZSwgdGhlc2UgbWVuIGFjY29tcGxpc2hlZCB0aGVpciBwdXJwb3NlLiBCdXQgTHVjdWxsdXMgYWR2YW5jZWQgYnkgZm9yY2VkIG1hcmNoZXMgdG8gdGhlIEV1cGhyYXRlcy4gSGVyZSBoZSBmb3VuZCB0aGUgc3RyZWFtIHN3b2xsZW4gYW5kIHR1cmJpZCBmcm9tIHRoZSB3aW50ZXIgc3Rvcm1zLCBhbmQgd2FzIHZleGVkIHRvIHRoaW5rIG9mIHRoZSBkZWxheSBhbmQgdHJvdWJsZSB3aGljaCBpdCB3b3VsZCBjb3N0IGhpbSB0byBjb2xsZWN0IGJvYXRzIGFuZCBidWlsZCByYWZ0cy4gQnV0IGF0IGV2ZW5pbmcgdGhlIHN0cmVhbSBiZWdhbiB0byBzdWJzaWRlLCB3ZW50IG9uIGRpbWluaXNoaW5nIHRocm91Z2ggdGhlIG5pZ2h0LCBhbmQgYXQgZGF5YnJlYWsgdGhlIHJpdmVyIHdhcyBydW5uaW5nIGJldHdlZW4gbG9mdHkgYmFua3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBuYXRpdmVzLCBvYnNlcnZpbmcgdGhhdCBzdW5kcnkgc21hbGwgaXNsYW5kcyBpbiB0aGUgY2hhbm5lbCBoYWQgYmVjb21lIHZpc2libGUsIGFuZCB0aGF0IHRoZSBjdXJyZW50IG5lYXIgdGhlbSB3YXMgcXVpZXQsIG1hZGUgb2JlaXNhbmNlIHRvIEx1Y3VsbHVzLCBzYXlpbmcgdGhhdCB0aGlzIGhhZCBzZWxkb20gaGFwcGVuZWQgYmVmb3JlLCBhbmQgdGhhdCB0aGUgcml2ZXIgaGFkIHZvbHVudGFyaWx5IG1hZGUgaXRzZWxmIHRhbWUgYW5kIGdlbnRsZSBmb3IgTHVjdWxsdXMsIGFuZCBvZmZlcmVkIGhpbSBhbiBlYXN5IGFuZCBzcGVlZHkgcGFzc2FnZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGhlIHRvb2sgYWR2YW50YWdlIG9mIGhpcyBvcHBvcnR1bml0eSBhbmQgcHV0IGhpcyB0cm9vcHMgYWNyb3NzLCBhbmQgYSBmYXZvdXJhYmxlIHNpZ24gYWNjb21wYW5pZWQgaGlzIGNyb3NzaW5nLiBIZWlmZXJzIHBhc3R1cmUgdGhlcmUgd2hpY2ggYXJlIHNhY3JlZCB0byBQZXJzaWEgQXJ0ZW1pcywgYSBnb2RkZXNzIHdob20gdGhlIEJhcmJhcmlhbnMgb24gdGhlIGZ1cnRoZXIgc2lkZSBvZiB0aGUgRXVwaHJhdGVzIGhvbGQgaW4gdGhlIGhpZ2hlc3QgaG9ub3VyLiBUaGVzZSBoZWlmZXJzIGFyZSB1c2VkIG9ubHkgZm9yIHNhY3JpZmljZSwgYW5kIGF0IG90aGVyIHRpbWVzIGFyZSBsZWZ0IHRvIHJvYW0gYWJvdXQgdGhlIGNvdW50cnkgYXQgbGFyZ2UsIHdpdGggYnJhbmRzIHVwb24gdGhlbSBpbiB0aGUgc2hhcGUgb2YgdGhlIHRvcmNoIG9mIHRoZSBnb2RkZXNzLiBOb3IgaXMgaXQgYSBzbGlnaHQgb3IgZWFzeSBtYXR0ZXIgdG8gY2F0Y2ggYW55IG9mIHRoZW0gd2hlbiB0aGV5IGFyZSB3YW50ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk9uZSBvZiB0aGVzZSBoZWlmZXJzLCBhZnRlciB0aGUgYXJteSBoYWQgY3Jvc3NlZCB0aGUgRXVwaHJhdGVzLCBjYW1lIHRvIGEgY2VydGFpbiByb2NrIHdoaWNoIGlzIGRlZW1lZCBzYWNyZWQgdG8gdGhlIGdvZGRlc3MsIGFuZCBzdG9vZCB1cG9uIGl0LCBhbmQgbG93ZXJpbmcgaXRzIGhlYWQgd2l0aG91dCBhbnkgY29tcHVsc2lvbiBmcm9tIHRoZSB1c3VhbCByb3BlLCBvZmZlcmVkIGl0c2VsZiB0byBMdWN1bGx1cyBmb3Igc2FjcmlmaWNlLiBIZSBhbHNvIHNhY3JpZmljZWQgYSBidWxsIHRvIHRoZSBFdXBocmF0ZXMsIGluIGFja25vd2xlZGdtZW50IG9mIGhpcyBzYWZlIHBhc3NhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIGVuY2FtcGluZyB0aGVyZSBkdXJpbmcgdGhhdCBkYXksIG9uIHRoZSBuZXh0IGFuZCB0aGUgc3VjY2VlZGluZyBkYXlzIGhlIGFkdmFuY2VkIHRocm91Z2ggU29waGVuw6kuIEhlIHdyb3VnaHQgbm8gaGFybSB0byB0aGUgaW5oYWJpdGFudHMsIHdobyBjYW1lIHRvIG1lZXQgaGltIGFuZCByZWNlaXZlZCBoaXMgYXJteSBnbGFkbHkuIE5heSwgd2hlbiBoaXMgc29sZGllcnMgd2FudGVkIHRvIHRha2UgYSBjZXJ0YWluIGZvcnRyZXNzIHdoaWNoIHdhcyB0aG91Z2h0IHRvIGNvbnRhaW4gbXVjaCB3ZWFsdGgsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW9uZGVyIGxpZXMgdGhlIGZvcnRyZXNzIHdoaWNoIHdlIG11c3QgcmF0aGVyIGJyaW5nIGxvdyw8L3E+IHNhaWQgaGUsIHBvaW50aW5nIHRvIHRoZSBUYXVydXMgaW4gdGhlIGRpc3RhbmNlOyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZXNlIG5lYXJlciB0aGluZ3MgYXJlIHJlc2VydmVkIGZvciB0aGUgdmljdG9ycy48L3E+IFRoZW4gaGUgd2VudCBvbiBieSBmb3JjZWQgbWFyY2hlcywgY3Jvc3NlZCB0aGUgVGlncmlzLCBhbmQgZW50ZXJlZCBBcm1lbmlhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSB0b29rIGFkdmFudGFnZSBvZiBoaXMgb3Bwb3J0dW5pdHkgYW5kIHB1dCBoaXMgdHJvb3BzIGFjcm9zcywgYW5kIGEgZmF2b3VyYWJsZSBzaWduIGFjY29tcGFuaWVkIGhpcyBjcm9zc2luZy4gSGVpZmVycyBwYXN0dXJlIHRoZXJlIHdoaWNoIGFyZSBzYWNyZWQgdG8gUGVyc2lhIEFydGVtaXMsIGEgZ29kZGVzcyB3aG9tIHRoZSBCYXJiYXJpYW5zIG9uIHRoZSBmdXJ0aGVyIHNpZGUgb2YgdGhlIEV1cGhyYXRlcyBob2xkIGluIHRoZSBoaWdoZXN0IGhvbm91ci4gVGhlc2UgaGVpZmVycyBhcmUgdXNlZCBvbmx5IGZvciBzYWNyaWZpY2UsIGFuZCBhdCBvdGhlciB0aW1lcyBhcmUgbGVmdCB0byByb2FtIGFib3V0IHRoZSBjb3VudHJ5IGF0IGxhcmdlLCB3aXRoIGJyYW5kcyB1cG9uIHRoZW0gaW4gdGhlIHNoYXBlIG9mIHRoZSB0b3JjaCBvZiB0aGUgZ29kZGVzcy4gTm9yIGlzIGl0IGEgc2xpZ2h0IG9yIGVhc3kgbWF0dGVyIHRvIGNhdGNoIGFueSBvZiB0aGVtIHdoZW4gdGhleSBhcmUgd2FudGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk9uZSBvZiB0aGVzZSBoZWlmZXJzLCBhZnRlciB0aGUgYXJteSBoYWQgY3Jvc3NlZCB0aGUgRXVwaHJhdGVzLCBjYW1lIHRvIGEgY2VydGFpbiByb2NrIHdoaWNoIGlzIGRlZW1lZCBzYWNyZWQgdG8gdGhlIGdvZGRlc3MsIGFuZCBzdG9vZCB1cG9uIGl0LCBhbmQgbG93ZXJpbmcgaXRzIGhlYWQgd2l0aG91dCBhbnkgY29tcHVsc2lvbiBmcm9tIHRoZSB1c3VhbCByb3BlLCBvZmZlcmVkIGl0c2VsZiB0byBMdWN1bGx1cyBmb3Igc2FjcmlmaWNlLiBIZSBhbHNvIHNhY3JpZmljZWQgYSBidWxsIHRvIHRoZSBFdXBocmF0ZXMsIGluIGFja25vd2xlZGdtZW50IG9mIGhpcyBzYWZlIHBhc3NhZ2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIGVuY2FtcGluZyB0aGVyZSBkdXJpbmcgdGhhdCBkYXksIG9uIHRoZSBuZXh0IGFuZCB0aGUgc3VjY2VlZGluZyBkYXlzIGhlIGFkdmFuY2VkIHRocm91Z2ggU29waGVuw6kuIEhlIHdyb3VnaHQgbm8gaGFybSB0byB0aGUgaW5oYWJpdGFudHMsIHdobyBjYW1lIHRvIG1lZXQgaGltIGFuZCByZWNlaXZlZCBoaXMgYXJteSBnbGFkbHkuIE5heSwgd2hlbiBoaXMgc29sZGllcnMgd2FudGVkIHRvIHRha2UgYSBjZXJ0YWluIGZvcnRyZXNzIHdoaWNoIHdhcyB0aG91Z2h0IHRvIGNvbnRhaW4gbXVjaCB3ZWFsdGgsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb25kZXIgbGllcyB0aGUgZm9ydHJlc3Mgd2hpY2ggd2UgbXVzdCByYXRoZXIgYnJpbmcgbG93LDwvcT4gc2FpZCBoZSwgcG9pbnRpbmcgdG8gdGhlIFRhdXJ1cyBpbiB0aGUgZGlzdGFuY2U7IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGVzZSBuZWFyZXIgdGhpbmdzIGFyZSByZXNlcnZlZCBmb3IgdGhlIHZpY3RvcnMuPC9xPiBUaGVuIGhlIHdlbnQgb24gYnkgZm9yY2VkIG1hcmNoZXMsIGNyb3NzZWQgdGhlIFRpZ3JpcywgYW5kIGVudGVyZWQgQXJtZW5pYS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UgdGhlIGZpcnN0IG1lc3NlbmdlciB3aG8gdG9sZCBUaWdyYW5lcyB0aGF0IEx1Y3VsbHVzIHdhcyBjb21pbmcgaGFkIGhpcyBoZWFkIGN1dCBvZmYgZm9yIGhpcyBwYWlucywgbm8gb25lIGVsc2Ugd291bGQgdGVsbCBoaW0gYW55dGhpbmcsIGFuZCBzbyBoZSBzYXQgaW4gaWdub3JhbmNlIHdoaWxlIHRoZSBmaXJlcyBvZiB3YXIgd2VyZSBhbHJlYWR5IGJsYXppbmcgYXJvdW5kIGhpbSwgZ2l2aW5nIGVhciBvbmx5IHRvIHRob3NlIHdobyBmbGF0dGVyZWQgaGltIGFuZCBzYWlkIHRoYXQgTHVjdWxsdXMgd291bGQgYmUgYSBncmVhdCBnZW5lcmFsIGlmIGhlIHZlbnR1cmVkIHRvIHdpdGhzdGFuZCBUaWdyYW5lcyBhdCBFcGhlc3VzLCBhbmQgZGlkIG5vdCBmbHkgaW5jb250aW5lbnRseSBmcm9tIEFzaWEgYXQgdGhlIG1lcmUgc2lnaHQgb2Ygc28gbWFueSBteXJpYWRzIG9mIG1lbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hpY2ggb25seSBwcm92ZXMgdGhhdCBpdCBpcyBub3QgZXZlcnkgbWFuIHdobyBjYW4gYmVhciBtdWNoIHVubWl4ZWQgd2luZSwgbm9yIGlzIGl0IGFueSBvcmRpbmFyeSB1bmRlcnN0YW5kaW5nIHRoYXQgZG9lcyBub3QgbG9zZSBpdHMgcmVja29uaW5nIGluIHRoZSBtaWRzdCBvZiBncmVhdCBwcm9zcGVyaXR5LiBUaGUgZmlyc3Qgb2YgaGlzIGZyaWVuZHMgd2hvIHZlbnR1cmVkIHRvIHRlbGwgaGltIHRoZSB0cnV0aCB3YXMgTWl0aHJvYmFyemFuZXMsIGFuZCBoZSwgdG9vLCBnb3Qgbm8gdmVyeSBleGNlbGxlbnQgcmV3YXJkIGZvciBoaXMgYm9sZG5lc3Mgb2Ygc3BlZWNoLiBIZSB3YXMgc2VudCBhdCBvbmNlIGFnYWluc3QgTHVjdWxsdXMgd2l0aCB0aHJlZSB0aG91c2FuZCBob3JzZW1lbiBhbmQgYSBsYXJnZSBmb3JjZSBvZiBpbmZhbnRyeSwgdW5kZXIgb3JkZXJzIHRvIGJyaW5nIHRoZSBnZW5lcmFsIGFsaXZlLCBidXQgdG8gdHJhbXBsZSBoaXMgbWVuIHVuZGVyIGZvb3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UgdGhlIGZpcnN0IG1lc3NlbmdlciB3aG8gdG9sZCBUaWdyYW5lcyB0aGF0IEx1Y3VsbHVzIHdhcyBjb21pbmcgaGFkIGhpcyBoZWFkIGN1dCBvZmYgZm9yIGhpcyBwYWlucywgbm8gb25lIGVsc2Ugd291bGQgdGVsbCBoaW0gYW55dGhpbmcsIGFuZCBzbyBoZSBzYXQgaW4gaWdub3JhbmNlIHdoaWxlIHRoZSBmaXJlcyBvZiB3YXIgd2VyZSBhbHJlYWR5IGJsYXppbmcgYXJvdW5kIGhpbSwgZ2l2aW5nIGVhciBvbmx5IHRvIHRob3NlIHdobyBmbGF0dGVyZWQgaGltIGFuZCBzYWlkIHRoYXQgTHVjdWxsdXMgd291bGQgYmUgYSBncmVhdCBnZW5lcmFsIGlmIGhlIHZlbnR1cmVkIHRvIHdpdGhzdGFuZCBUaWdyYW5lcyBhdCBFcGhlc3VzLCBhbmQgZGlkIG5vdCBmbHkgaW5jb250aW5lbnRseSBmcm9tIEFzaWEgYXQgdGhlIG1lcmUgc2lnaHQgb2Ygc28gbWFueSBteXJpYWRzIG9mIG1lbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoaWNoIG9ubHkgcHJvdmVzIHRoYXQgaXQgaXMgbm90IGV2ZXJ5IG1hbiB3aG8gY2FuIGJlYXIgbXVjaCB1bm1peGVkIHdpbmUsIG5vciBpcyBpdCBhbnkgb3JkaW5hcnkgdW5kZXJzdGFuZGluZyB0aGF0IGRvZXMgbm90IGxvc2UgaXRzIHJlY2tvbmluZyBpbiB0aGUgbWlkc3Qgb2YgZ3JlYXQgcHJvc3Blcml0eS4gVGhlIGZpcnN0IG9mIGhpcyBmcmllbmRzIHdobyB2ZW50dXJlZCB0byB0ZWxsIGhpbSB0aGUgdHJ1dGggd2FzIE1pdGhyb2JhcnphbmVzLCBhbmQgaGUsIHRvbywgZ290IG5vIHZlcnkgZXhjZWxsZW50IHJld2FyZCBmb3IgaGlzIGJvbGRuZXNzIG9mIHNwZWVjaC4gSGUgd2FzIHNlbnQgYXQgb25jZSBhZ2FpbnN0IEx1Y3VsbHVzIHdpdGggdGhyZWUgdGhvdXNhbmQgaG9yc2VtZW4gYW5kIGEgbGFyZ2UgZm9yY2Ugb2YgaW5mYW50cnksIHVuZGVyIG9yZGVycyB0byBicmluZyB0aGUgZ2VuZXJhbCBhbGl2ZSwgYnV0IHRvIHRyYW1wbGUgaGlzIG1lbiB1bmRlciBmb290LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHBhcnQgb2YgdGhlIGFybXkgb2YgTHVjdWxsdXMgd2FzIGFscmVhZHkgcHJlcGFyaW5nIHRvIGdvIGludG8gY2FtcCwgYW5kIHRoZSByZXN0IHdhcyBzdGlsbCBjb21pbmcgdXAsIHdoZW4gaGlzIHNjb3V0cyB0b2xkIGhpbSB0aGF0IHRoZSBCYXJiYXJpYW4gd2FzIGFkdmFuY2luZyB0byB0aGUgYXR0YWNrLiBGZWFyaW5nIGxlc3QgdGhlIGVuZW15IGF0dGFjayBoaXMgbWVuIHdoZW4gdGhleSB3ZXJlIHNlcGFyYXRlZCBhbmQgaW4gZGlzb3JkZXIsIGFuZCBzbyB0aHJvdyB0aGVtIGludG8gY29uZnVzaW9uLCBoZSBoaW1zZWxmIGZlbGwgdG8gYXJyYW5naW5nIHRoZSBlbmNhbXBtZW50LCBhbmQgU2V4dGlsaXVzLCB0aGUgbGVnYXRlLCB3YXMgc2VudCBhdCB0aGUgaGVhZCBvZiBzaXh0ZWVuIGh1bmRyZWQgaG9yc2VtZW4gYW5kIGFib3V0IGFzIG1hbnkgbGlnaHQgYW5kIGhlYXZ5IGluZmFudHJ5LCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz53aXRoIG9yZGVycyB0byBnZXQgbmVhciB0aGUgZW5lbXkgYW5kIHdhaXQgdGhlcmUgdW50aWwgaGUgbGVhcm5lZCB0aGF0IHRoZSBtYWluIGJvZHkgd2FzIHNhZmVseSBlbmNhbXBlZC4gV2VsbCB0aGVuLCB0aGlzIHdhcyB3aGF0IFNleHRpbGl1cyB3aXNoZWQgdG8gZG8sIGJ1dCBoZSB3YXMgZm9yY2VkIGludG8gYW4gZW5nYWdlbWVudCBieSBNaXRocm9iYXJ6YW5lcywgd2hvIGJvbGRseSBjaGFyZ2VkIHVwb24gaGltLiBBIGJhdHRsZSBlbnN1ZWQsIGluIHdoaWNoIE1pdGhyb2JhcnphbmVzIGZlbGwgZmlnaHRpbmcsIGFuZCB0aGUgcmVzdCBvZiBoaXMgZm9yY2VzIHRvb2sgdG8gZmxpZ2h0IGFuZCB3ZXJlIGN1dCB0byBwaWVjZXMsIGFsbCBleGNlcHQgYSBmZXcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgcGFydCBvZiB0aGUgYXJteSBvZiBMdWN1bGx1cyB3YXMgYWxyZWFkeSBwcmVwYXJpbmcgdG8gZ28gaW50byBjYW1wLCBhbmQgdGhlIHJlc3Qgd2FzIHN0aWxsIGNvbWluZyB1cCwgd2hlbiBoaXMgc2NvdXRzIHRvbGQgaGltIHRoYXQgdGhlIEJhcmJhcmlhbiB3YXMgYWR2YW5jaW5nIHRvIHRoZSBhdHRhY2suIEZlYXJpbmcgbGVzdCB0aGUgZW5lbXkgYXR0YWNrIGhpcyBtZW4gd2hlbiB0aGV5IHdlcmUgc2VwYXJhdGVkIGFuZCBpbiBkaXNvcmRlciwgYW5kIHNvIHRocm93IHRoZW0gaW50byBjb25mdXNpb24sIGhlIGhpbXNlbGYgZmVsbCB0byBhcnJhbmdpbmcgdGhlIGVuY2FtcG1lbnQsIGFuZCBTZXh0aWxpdXMsIHRoZSBsZWdhdGUsIHdhcyBzZW50IGF0IHRoZSBoZWFkIG9mIHNpeHRlZW4gaHVuZHJlZCBob3JzZW1lbiBhbmQgYWJvdXQgYXMgbWFueSBsaWdodCBhbmQgaGVhdnkgaW5mYW50cnksIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndpdGggb3JkZXJzIHRvIGdldCBuZWFyIHRoZSBlbmVteSBhbmQgd2FpdCB0aGVyZSB1bnRpbCBoZSBsZWFybmVkIHRoYXQgdGhlIG1haW4gYm9keSB3YXMgc2FmZWx5IGVuY2FtcGVkLiBXZWxsIHRoZW4sIHRoaXMgd2FzIHdoYXQgU2V4dGlsaXVzIHdpc2hlZCB0byBkbywgYnV0IGhlIHdhcyBmb3JjZWQgaW50byBhbiBlbmdhZ2VtZW50IGJ5IE1pdGhyb2JhcnphbmVzLCB3aG8gYm9sZGx5IGNoYXJnZWQgdXBvbiBoaW0uIEEgYmF0dGxlIGVuc3VlZCwgaW4gd2hpY2ggTWl0aHJvYmFyemFuZXMgZmVsbCBmaWdodGluZywgYW5kIHRoZSByZXN0IG9mIGhpcyBmb3JjZXMgdG9vayB0byBmbGlnaHQgYW5kIHdlcmUgY3V0IHRvIHBpZWNlcywgYWxsIGV4Y2VwdCBhIGZldy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiB0aGlzLCBUaWdyYW5lcyBhYmFuZG9uZWQgVGlncmFub2NlcnRhLCB0aGF0IGdyZWF0IGNpdHkgd2hpY2ggaGUgaGFkIGJ1aWx0LCB3aXRoZHJldyB0byB0aGUgVGF1cnVzLCBhbmQgdGhlcmUgYmVnYW4gY29sbGVjdGluZyBoaXMgZm9yY2VzIGZyb20gZXZlcnkgcXVhcnRlci4gTHVjdWxsdXMsIGhvd2V2ZXIsIGdhdmUgaGltIG5vIHRpbWUgZm9yIHByZXBhcmF0aW9uLCBidXQgc2VudCBvdXQgTXVyZW5hIHRvIGhhcmFzcyBhbmQgY3V0IG9mZiB0aGUgZm9yY2VzIGdhdGhlcmluZyB0byBqb2luIFRpZ3JhbmVzLCBhbmQgU2V4dGlsaXVzIGFnYWluIHRvIGhvbGQgaW4gY2hlY2sgYSBsYXJnZSBib2R5IG9mIEFyYWJzIHdoaWNoIHdhcyBkcmF3aW5nIG5lYXIgdGhlIGtpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uZSBhbmQgdGhlIHNhbWUgdGltZSBTZXh0aWxpdXMgZmVsbCB1cG9uIHRoZSBBcmFicyBhcyB0aGV5IHdlcmUgZ29pbmcgaW50byBjYW1wLCBhbmQgc2xldyBtb3N0IG9mIHRoZW07IGFuZCBNdXJlbmEsIGZvbGxvd2luZyBoYXJkIHVwb24gVGlncmFuZXMsIHNlaXplZCBoaXMgb3Bwb3J0dW5pdHkgYW5kIGF0dGFja2VkIHRoZSBraW5nIGFzIGhlIHdhcyBwYXNzaW5nIHRocm91Z2ggYSByb3VnaCBhbmQgbmFycm93IGRlZmlsZSB3aXRoIGhpcyBhcm15IGluIGxvbmcgY29sdW1uLiBUaWdyYW5lcyBoaW1zZWxmIGZsZWQsIGFiYW5kb25pbmcgYWxsIGhpcyBiYWdnYWdlLCBtYW55IG9mIHRoZSBBcm1lbmlhbnMgd2VyZSBzbGFpbiwgYW5kIG1vcmUgd2VyZSBjYXB0dXJlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcywgVGlncmFuZXMgYWJhbmRvbmVkIFRpZ3Jhbm9jZXJ0YSwgdGhhdCBncmVhdCBjaXR5IHdoaWNoIGhlIGhhZCBidWlsdCwgd2l0aGRyZXcgdG8gdGhlIFRhdXJ1cywgYW5kIHRoZXJlIGJlZ2FuIGNvbGxlY3RpbmcgaGlzIGZvcmNlcyBmcm9tIGV2ZXJ5IHF1YXJ0ZXIuIEx1Y3VsbHVzLCBob3dldmVyLCBnYXZlIGhpbSBubyB0aW1lIGZvciBwcmVwYXJhdGlvbiwgYnV0IHNlbnQgb3V0IE11cmVuYSB0byBoYXJhc3MgYW5kIGN1dCBvZmYgdGhlIGZvcmNlcyBnYXRoZXJpbmcgdG8gam9pbiBUaWdyYW5lcywgYW5kIFNleHRpbGl1cyBhZ2FpbiB0byBob2xkIGluIGNoZWNrIGEgbGFyZ2UgYm9keSBvZiBBcmFicyB3aGljaCB3YXMgZHJhd2luZyBuZWFyIHRoZSBraW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uZSBhbmQgdGhlIHNhbWUgdGltZSBTZXh0aWxpdXMgZmVsbCB1cG9uIHRoZSBBcmFicyBhcyB0aGV5IHdlcmUgZ29pbmcgaW50byBjYW1wLCBhbmQgc2xldyBtb3N0IG9mIHRoZW07IGFuZCBNdXJlbmEsIGZvbGxvd2luZyBoYXJkIHVwb24gVGlncmFuZXMsIHNlaXplZCBoaXMgb3Bwb3J0dW5pdHkgYW5kIGF0dGFja2VkIHRoZSBraW5nIGFzIGhlIHdhcyBwYXNzaW5nIHRocm91Z2ggYSByb3VnaCBhbmQgbmFycm93IGRlZmlsZSB3aXRoIGhpcyBhcm15IGluIGxvbmcgY29sdW1uLiBUaWdyYW5lcyBoaW1zZWxmIGZsZWQsIGFiYW5kb25pbmcgYWxsIGhpcyBiYWdnYWdlLCBtYW55IG9mIHRoZSBBcm1lbmlhbnMgd2VyZSBzbGFpbiwgYW5kIG1vcmUgd2VyZSBjYXB0dXJlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBzdWNjZXNzZnVsIGluIGhpcyBjYW1wYWlnbiwgTHVjdWxsdXMgc3RydWNrIGNhbXAgYW5kIHByb2NlZWRlZCB0byBUaWdyYW5vY2VydGEsIHdoaWNoIGNpdHkgaGUgaW52ZXN0ZWQgYW5kIGJlZ2FuIHRvIGJlc2llZ2UuIFRoZXJlIHdlcmUgaW4gdGhlIGNpdHkgbWFueSBHcmVla3Mgd2hvIGhhZCBiZWVuIHRyYW5zcGxhbnRlZCwgbGlrZSBvdGhlcnMsIGZyb20gQ2lsaWNpYSwgYW5kIG1hbnkgQmFyYmFyaWFucyB3aG8gaGFkIHN1ZmZlcmVkIHRoZSBzYW1lIGZhdGUgYXMgdGhlIEdyZWVrcyzigJRBZGlhYmVuaSwgQXNzeXJpYW5zLCBHb3JkeWVuaSwgYW5kIENhcHBhZG9jaWFucywgd2hvc2UgbmF0aXZlIGNpdGllcyBUaWdyYW5lcyBoYWQgZGVtb2xpc2hlZCwgYW5kIGJyb3VnaHQgdGhlaXIgaW5oYWJpdGFudHMgdG8gZHdlbGwgdGhlcmUgdW5kZXIgY29tcHVsc2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNpdHkgd2FzIGFsc28gZnVsbCBvZiB3ZWFsdGggYW5kIHZvdGl2ZSBvZmZlcmluZ3MsIHNpbmNlIGV2ZXJ5IHByaXZhdGUgcGVyc29uIGFuZCBldmVyeSBwcmluY2UgdmllZCB3aXRoIHRoZSBraW5nIGluIGNvbnRyaWJ1dGluZyB0byBpdHMgaW5jcmVhc2UgYW5kIGFkb3JubWVudC4gVGhlcmVmb3JlIEx1Y3VsbHVzIHByZXNzZWQgdGhlIHNpZWdlIG9mIHRoZSBjaXR5IHdpdGggdmlnb3VyLCBpbiB0aGUgYmVsaWVmIHRoYXQgVGlncmFuZXMgd291bGQgbm90IGVuZHVyZSBpdCwgYnV0IGNvbnRyYXJ5IHRvIGhpcyBiZXR0ZXIganVkZ21lbnQgYW5kIGluIGFuZ2VyIHdvdWxkIGRlc2NlbmQgaW50byB0aGUgcGxhaW5zIHRvIG9mZmVyIGJhdHRsZTsgYW5kIGhpcyBiZWxpZWYgd2FzIGp1c3RpZmllZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TWl0aHJpZGF0ZXMsIGluZGVlZCwgYm90aCBieSBtZXNzZW5nZXJzIGFuZCBsZXR0ZXJzLCBzdHJvbmdseSB1cmdlZCB0aGUga2luZyBub3QgdG8gam9pbiBiYXR0bGUsIGJ1dCB0byBjdXQgb2ZmIHRoZSBlbmVteSdzIHN1cHBsaWVzIHdpdGggaGlzIGNhdmFscnk7IFRheGlsZXMgYWxzbywgd2hvIGNhbWUgZnJvbSBNaXRocmlkYXRlcyBhbmQgam9pbmVkIHRoZSBmb3JjZXMgb2YgVGlncmFuZXMsIGVhcm5lc3RseSBiZWdnZWQgdGhlIGtpbmcgdG8gcmVtYWluIG9uIHRoZSBkZWZlbnNpdmUgYW5kIGF2b2lkIHRoZSBpbnZpbmNpYmxlIGFybXMgb2YgdGhlIFJvbWFucy4gQW5kIGF0IGZpcnN0IFRpZ3JhbmVzIGdhdmUgY29uc2lkZXJhdGUgaGVhcmluZyB0byB0aGlzIGFkdmljZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIEFybWVuaWFucyBhbmQgR29yZHllbmkgam9pbmVkIGhpbSB3aXRoIGFsbCB0aGVpciBob3N0cywgYW5kIHRoZSBraW5ncyBvZiB0aGUgTWVkZXMgYW5kIEFkaWFiZW5pIGNhbWUgdXAgd2l0aCBhbGwgdGhlaXIgaG9zdHMsIGFuZCBtYW55IEFyYWJzIGFycml2ZWQgZnJvbSB0aGUgc2VhIG9mIEJhYnlsb25pYSwgYW5kIG1hbnkgQWxiYW5pYW5zIGZyb20gdGhlIENhc3BpYW4gc2VhLCB0b2dldGhlciB3aXRoIEliZXJpYW5zIHdobyB3ZXJlIG5laWdoYm91cnMgdG8gdGhlIEFsYmFuaWFuczsgYW5kIHdoZW4gbm90IGEgZmV3IG9mIHRoZSBwZW9wbGVzIGFib3V0IHRoZSByaXZlciBBcmF4ZXMsIHdobyBhcmUgbm90IHN1YmplY3QgdG8ga2luZ3MsIGhhZCBiZWVuIGluZHVjZWQgYnkgZmF2b3VycyBhbmQgZ2lmdHMgdG8gY29tZSBhbmQgam9pbiBoaW07IGFuZCB3aGVuIHRoZSBiYW5xdWV0cyBvZiB0aGUga2luZywgYW5kIGhpcyBjb3VuY2lscyBhcyB3ZWxsLCB3ZXJlIGZ1bGwgb2YgaG9wZXMgYW5kIGJvbGRuZXNzIGFuZCBiYXJiYXJpYyB0aHJlYXRzLOKAlHRoZW4gVGF4aWxlcyByYW4gdGhlIHJpc2sgb2YgYmVpbmcgcHV0IHRvIGRlYXRoIHdoZW4gaGUgb3Bwb3NlZCB0aGUgcGxhbiBvZiBmaWdodGluZywgYW5kIE1pdGhyaWRhdGVzIHdhcyB0aG91Z2h0IHRvIGJlIGRpdmVydGluZyB0aGUga2luZyBmcm9tIGEgZ3JlYXQgc3VjY2VzcyBvdXQgb2YgbWVyZSBlbnZ5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVyZWZvcmUgVGlncmFuZXMgd291bGQgbm90IGV2ZW4gd2FpdCBmb3IgaGltLCBsZXN0IGhlIHNoYXJlIGluIHRoZSBnbG9yeSwgYnV0IGFkdmFuY2VkIHdpdGggYWxsIGhpcyBhcm15LCBiaXR0ZXJseSBsYW1lbnRpbmcgdG8gaGlzIGZyaWVuZHMsIGFzIGl0IGlzIHNhaWQsIHRoYXQgaGUgd2FzIGdvaW5nIHRvIGNvbnRlbmQgd2l0aCBMdWN1bGx1cyBhbG9uZSwgYW5kIG5vdCB3aXRoIGFsbCB0aGUgUm9tYW4gZ2VuZXJhbHMgcHV0IHRvZ2V0aGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBzdWNjZXNzZnVsIGluIGhpcyBjYW1wYWlnbiwgTHVjdWxsdXMgc3RydWNrIGNhbXAgYW5kIHByb2NlZWRlZCB0byBUaWdyYW5vY2VydGEsIHdoaWNoIGNpdHkgaGUgaW52ZXN0ZWQgYW5kIGJlZ2FuIHRvIGJlc2llZ2UuIFRoZXJlIHdlcmUgaW4gdGhlIGNpdHkgbWFueSBHcmVla3Mgd2hvIGhhZCBiZWVuIHRyYW5zcGxhbnRlZCwgbGlrZSBvdGhlcnMsIGZyb20gQ2lsaWNpYSwgYW5kIG1hbnkgQmFyYmFyaWFucyB3aG8gaGFkIHN1ZmZlcmVkIHRoZSBzYW1lIGZhdGUgYXMgdGhlIEdyZWVrcyzigJRBZGlhYmVuaSwgQXNzeXJpYW5zLCBHb3JkeWVuaSwgYW5kIENhcHBhZG9jaWFucywgd2hvc2UgbmF0aXZlIGNpdGllcyBUaWdyYW5lcyBoYWQgZGVtb2xpc2hlZCwgYW5kIGJyb3VnaHQgdGhlaXIgaW5oYWJpdGFudHMgdG8gZHdlbGwgdGhlcmUgdW5kZXIgY29tcHVsc2lvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjaXR5IHdhcyBhbHNvIGZ1bGwgb2Ygd2VhbHRoIGFuZCB2b3RpdmUgb2ZmZXJpbmdzLCBzaW5jZSBldmVyeSBwcml2YXRlIHBlcnNvbiBhbmQgZXZlcnkgcHJpbmNlIHZpZWQgd2l0aCB0aGUga2luZyBpbiBjb250cmlidXRpbmcgdG8gaXRzIGluY3JlYXNlIGFuZCBhZG9ybm1lbnQuIFRoZXJlZm9yZSBMdWN1bGx1cyBwcmVzc2VkIHRoZSBzaWVnZSBvZiB0aGUgY2l0eSB3aXRoIHZpZ291ciwgaW4gdGhlIGJlbGllZiB0aGF0IFRpZ3JhbmVzIHdvdWxkIG5vdCBlbmR1cmUgaXQsIGJ1dCBjb250cmFyeSB0byBoaXMgYmV0dGVyIGp1ZGdtZW50IGFuZCBpbiBhbmdlciB3b3VsZCBkZXNjZW5kIGludG8gdGhlIHBsYWlucyB0byBvZmZlciBiYXR0bGU7IGFuZCBoaXMgYmVsaWVmIHdhcyBqdXN0aWZpZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1pdGhyaWRhdGVzLCBpbmRlZWQsIGJvdGggYnkgbWVzc2VuZ2VycyBhbmQgbGV0dGVycywgc3Ryb25nbHkgdXJnZWQgdGhlIGtpbmcgbm90IHRvIGpvaW4gYmF0dGxlLCBidXQgdG8gY3V0IG9mZiB0aGUgZW5lbXkncyBzdXBwbGllcyB3aXRoIGhpcyBjYXZhbHJ5OyBUYXhpbGVzIGFsc28sIHdobyBjYW1lIGZyb20gTWl0aHJpZGF0ZXMgYW5kIGpvaW5lZCB0aGUgZm9yY2VzIG9mIFRpZ3JhbmVzLCBlYXJuZXN0bHkgYmVnZ2VkIHRoZSBraW5nIHRvIHJlbWFpbiBvbiB0aGUgZGVmZW5zaXZlIGFuZCBhdm9pZCB0aGUgaW52aW5jaWJsZSBhcm1zIG9mIHRoZSBSb21hbnMuIEFuZCBhdCBmaXJzdCBUaWdyYW5lcyBnYXZlIGNvbnNpZGVyYXRlIGhlYXJpbmcgdG8gdGhpcyBhZHZpY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBBcm1lbmlhbnMgYW5kIEdvcmR5ZW5pIGpvaW5lZCBoaW0gd2l0aCBhbGwgdGhlaXIgaG9zdHMsIGFuZCB0aGUga2luZ3Mgb2YgdGhlIE1lZGVzIGFuZCBBZGlhYmVuaSBjYW1lIHVwIHdpdGggYWxsIHRoZWlyIGhvc3RzLCBhbmQgbWFueSBBcmFicyBhcnJpdmVkIGZyb20gdGhlIHNlYSBvZiBCYWJ5bG9uaWEsIGFuZCBtYW55IEFsYmFuaWFucyBmcm9tIHRoZSBDYXNwaWFuIHNlYSwgdG9nZXRoZXIgd2l0aCBJYmVyaWFucyB3aG8gd2VyZSBuZWlnaGJvdXJzIHRvIHRoZSBBbGJhbmlhbnM7IGFuZCB3aGVuIG5vdCBhIGZldyBvZiB0aGUgcGVvcGxlcyBhYm91dCB0aGUgcml2ZXIgQXJheGVzLCB3aG8gYXJlIG5vdCBzdWJqZWN0IHRvIGtpbmdzLCBoYWQgYmVlbiBpbmR1Y2VkIGJ5IGZhdm91cnMgYW5kIGdpZnRzIHRvIGNvbWUgYW5kIGpvaW4gaGltOyBhbmQgd2hlbiB0aGUgYmFucXVldHMgb2YgdGhlIGtpbmcsIGFuZCBoaXMgY291bmNpbHMgYXMgd2VsbCwgd2VyZSBmdWxsIG9mIGhvcGVzIGFuZCBib2xkbmVzcyBhbmQgYmFyYmFyaWMgdGhyZWF0cyzigJR0aGVuIFRheGlsZXMgcmFuIHRoZSByaXNrIG9mIGJlaW5nIHB1dCB0byBkZWF0aCB3aGVuIGhlIG9wcG9zZWQgdGhlIHBsYW4gb2YgZmlnaHRpbmcsIGFuZCBNaXRocmlkYXRlcyB3YXMgdGhvdWdodCB0byBiZSBkaXZlcnRpbmcgdGhlIGtpbmcgZnJvbSBhIGdyZWF0IHN1Y2Nlc3Mgb3V0IG9mIG1lcmUgZW52eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSBUaWdyYW5lcyB3b3VsZCBub3QgZXZlbiB3YWl0IGZvciBoaW0sIGxlc3QgaGUgc2hhcmUgaW4gdGhlIGdsb3J5LCBidXQgYWR2YW5jZWQgd2l0aCBhbGwgaGlzIGFybXksIGJpdHRlcmx5IGxhbWVudGluZyB0byBoaXMgZnJpZW5kcywgYXMgaXQgaXMgc2FpZCwgdGhhdCBoZSB3YXMgZ29pbmcgdG8gY29udGVuZCB3aXRoIEx1Y3VsbHVzIGFsb25lLCBhbmQgbm90IHdpdGggYWxsIHRoZSBSb21hbiBnZW5lcmFscyBwdXQgdG9nZXRoZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIGhpcyBib2xkbmVzcyB3YXMgbm90IGFsdG9nZXRoZXIgdGhhdCBvZiBhIG1hZCBtYW4sIG5vciB3aXRob3V0IGdvb2QgcmVhc29uLCB3aGVuIGhlIHNhdyBzbyBtYW55IG5hdGlvbnMgYW5kIGtpbmdzIGluIGhpcyBmb2xsb3dpbmcsIHdpdGggcGhhbGFueGVzIG9mIGhlYXZ5IGluZmFudHJ5IGFuZCBteXJpYWRzIG9mIGhvcnNlbWVuLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgaW4gY29tbWFuZCBvZiB0d2VudHkgdGhvdXNhbmQgYm93bWVuIGFuZCBzbGluZ2VycywgYW5kIGZpZnR5LWZpdmUgdGhvdXNhbmQgaG9yc2VtZW4sIG9mIHdob20gc2V2ZW50ZWVuIHRob3VzYW5kIHdlcmUgY2xhZCBpbiBtYWlsLCBhcyBMdWN1bGx1cyBzYWlkIGluIGhpcyBsZXR0ZXIgdG8gdGhlIFNlbmF0ZTsgYWxzbyBvZiBvbmUgaHVuZHJlZCBhbmQgZmlmdHkgdGhvdXNhbmQgaGVhdnkgaW5mYW50cnksIHNvbWUgb2Ygd2hvbSB3ZXJlIGRyYXduIHVwIGluIGNvaG9ydHMsIGFuZCBzb21lIGluIHBoYWxhbnhlczsgYWxzbyBvZiByb2FkLW1ha2VycywgYnJpZGdlLWJ1aWxkZXJzLCBjbGVhcmVycyBvZiByaXZlcnMsIGZvcmVzdGVycywgYW5kIG1pbmlzdGVycyB0byB0aGUgb3RoZXIgbmVlZHMgb2YgYW4gYXJteSwgdG8gdGhlIG51bWJlciBvZiB0aGlydHktZml2ZSB0aG91c2FuZC4gVGhlc2UgbGF0dGVyLCBiZWluZyBkcmF3biB1cCBpbiBhcnJheSBiZWhpbmQgdGhlIGZpZ2h0aW5nIG1lbiwgaW5jcmVhc2VkIHRoZSBhcHBhcmVudCBzdHJlbmd0aCBvZiB0aGUgYXJteS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgaW4gY29tbWFuZCBvZiB0d2VudHkgdGhvdXNhbmQgYm93bWVuIGFuZCBzbGluZ2VycywgYW5kIGZpZnR5LWZpdmUgdGhvdXNhbmQgaG9yc2VtZW4sIG9mIHdob20gc2V2ZW50ZWVuIHRob3VzYW5kIHdlcmUgY2xhZCBpbiBtYWlsLCBhcyBMdWN1bGx1cyBzYWlkIGluIGhpcyBsZXR0ZXIgdG8gdGhlIFNlbmF0ZTsgYWxzbyBvZiBvbmUgaHVuZHJlZCBhbmQgZmlmdHkgdGhvdXNhbmQgaGVhdnkgaW5mYW50cnksIHNvbWUgb2Ygd2hvbSB3ZXJlIGRyYXduIHVwIGluIGNvaG9ydHMsIGFuZCBzb21lIGluIHBoYWxhbnhlczsgYWxzbyBvZiByb2FkLW1ha2VycywgYnJpZGdlLWJ1aWxkZXJzLCBjbGVhcmVycyBvZiByaXZlcnMsIGZvcmVzdGVycywgYW5kIG1pbmlzdGVycyB0byB0aGUgb3RoZXIgbmVlZHMgb2YgYW4gYXJteSwgdG8gdGhlIG51bWJlciBvZiB0aGlydHktZml2ZSB0aG91c2FuZC4gVGhlc2UgbGF0dGVyLCBiZWluZyBkcmF3biB1cCBpbiBhcnJheSBiZWhpbmQgdGhlIGZpZ2h0aW5nIG1lbiwgaW5jcmVhc2VkIHRoZSBhcHBhcmVudCBzdHJlbmd0aCBvZiB0aGUgYXJteS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBUaWdyYW5lcyBoYWQgY3Jvc3NlZCB0aGUgVGF1cnVzLCBkZXBsb3llZCB3aXRoIGFsbCBoaXMgZm9yY2VzLCBhbmQgbG9va2VkIGRvd24gdXBvbiB0aGUgUm9tYW4gYXJteSBpbnZlc3RpbmcgVGlncmFub2NlcnRhLCB0aGUgdGhyb25nIG9mIEJhcmJhcmlhbnMgaW4gdGhlIGNpdHkgZ3JlZXRlZCBoaXMgYXBwZWFyYW5jZSB3aXRoIHNob3V0cyBhbmQgZGluLCBhbmQgc3RhbmRpbmcgb24gdGhlIHdhbGxzLCB0aHJlYXRlbmluZ2x5IHBvaW50ZWQgb3V0IHRoZSBBcm1lbmlhbnMgdG8gdGhlIFJvbWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBMdWN1bGx1cyBoZWxkIGEgY291bmNpbCBvZiB3YXIsIHNvbWUgb2YgaGlzIG9mZmljZXJzIGFkdmlzZWQgaGltIHRvIGdpdmUgdXAgdGhlIHNpZWdlIGFuZCBsZWFkIGhpcyBhcm15IGFnYWluc3QgVGlncmFuZXM7IG90aGVycyB1cmdlZCBoaW0gbm90IHRvIGxlYXZlIHNvIG1hbnkgZW5lbWllcyBpbiBoaXMgcmVhciwgYW5kIG5vdCB0byByZW1pdCB0aGUgc2llZ2UuIFdoZXJldXBvbiwgcmVtYXJraW5nIHRoYXQgZWFjaCBjb3Vuc2VsIGJ5IGl0c2VsZiB3YXMgYmFkLCBidXQgYm90aCB0b2dldGhlciB3ZXJlIGdvb2QsIGhlIGRpdmlkZWQgaGlzIGFybXkuIE11cmVuYSwgd2l0aCBzaXggdGhvdXNhbmQgZm9vdG1lbiwgaGUgbGVmdCBiZWhpbmQgaW4gY2hhcmdlIG9mIHRoZSBzaWVnZTsgd2hpbGUgaGUgaGltc2VsZiwgd2l0aCB0d2VudHktZm91ciBjb2hvcnRzLCBjb21wcmlzaW5nIG5vIG1vcmUgdGhhbiB0ZW4gdGhvdXNhbmQgaGVhdnkgaW5mYW50cnksIGFuZCBhbGwgdGhlIGhvcnNlbWVuLCBzbGluZ2VycywgYW5kIGFyY2hlcnMsIHRvIHRoZSBudW1iZXIgb2YgYWJvdXQgYSB0aG91c2FuZCwgc2V0IG91dCBhZ2FpbnN0IHRoZSBlbmVteS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBUaWdyYW5lcyBoYWQgY3Jvc3NlZCB0aGUgVGF1cnVzLCBkZXBsb3llZCB3aXRoIGFsbCBoaXMgZm9yY2VzLCBhbmQgbG9va2VkIGRvd24gdXBvbiB0aGUgUm9tYW4gYXJteSBpbnZlc3RpbmcgVGlncmFub2NlcnRhLCB0aGUgdGhyb25nIG9mIEJhcmJhcmlhbnMgaW4gdGhlIGNpdHkgZ3JlZXRlZCBoaXMgYXBwZWFyYW5jZSB3aXRoIHNob3V0cyBhbmQgZGluLCBhbmQgc3RhbmRpbmcgb24gdGhlIHdhbGxzLCB0aHJlYXRlbmluZ2x5IHBvaW50ZWQgb3V0IHRoZSBBcm1lbmlhbnMgdG8gdGhlIFJvbWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gTHVjdWxsdXMgaGVsZCBhIGNvdW5jaWwgb2Ygd2FyLCBzb21lIG9mIGhpcyBvZmZpY2VycyBhZHZpc2VkIGhpbSB0byBnaXZlIHVwIHRoZSBzaWVnZSBhbmQgbGVhZCBoaXMgYXJteSBhZ2FpbnN0IFRpZ3JhbmVzOyBvdGhlcnMgdXJnZWQgaGltIG5vdCB0byBsZWF2ZSBzbyBtYW55IGVuZW1pZXMgaW4gaGlzIHJlYXIsIGFuZCBub3QgdG8gcmVtaXQgdGhlIHNpZWdlLiBXaGVyZXVwb24sIHJlbWFya2luZyB0aGF0IGVhY2ggY291bnNlbCBieSBpdHNlbGYgd2FzIGJhZCwgYnV0IGJvdGggdG9nZXRoZXIgd2VyZSBnb29kLCBoZSBkaXZpZGVkIGhpcyBhcm15LiBNdXJlbmEsIHdpdGggc2l4IHRob3VzYW5kIGZvb3RtZW4sIGhlIGxlZnQgYmVoaW5kIGluIGNoYXJnZSBvZiB0aGUgc2llZ2U7IHdoaWxlIGhlIGhpbXNlbGYsIHdpdGggdHdlbnR5LWZvdXIgY29ob3J0cywgY29tcHJpc2luZyBubyBtb3JlIHRoYW4gdGVuIHRob3VzYW5kIGhlYXZ5IGluZmFudHJ5LCBhbmQgYWxsIHRoZSBob3JzZW1lbiwgc2xpbmdlcnMsIGFuZCBhcmNoZXJzLCB0byB0aGUgbnVtYmVyIG9mIGFib3V0IGEgdGhvdXNhbmQsIHNldCBvdXQgYWdhaW5zdCB0aGUgZW5lbXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgaGFkIGVuY2FtcGVkIGFsb25nIHRoZSByaXZlciBpbiBhIGdyZWF0IHBsYWluLCBoZSBhcHBlYXJlZCB1dHRlcmx5IGluc2lnbmlmaWNhbnQgdG8gVGlncmFuZXMsIGFuZCBzdXBwbGllZCB0aGUga2luZydzIGZsYXR0ZXJlcnMgd2l0aCBncm91bmQgZm9yIGFtdXNlbWVudC4gU29tZSBtb2NrZWQgYXQgdGhlIFJvbWFucywgYW5kIG90aGVycywgaW4gcGxlYXNhbnRyeSwgY2FzdCBsb3RzIGZvciB0aGVpciBzcG9pbCwgd2hpbGUgZWFjaCBvZiB0aGUgZ2VuZXJhbHMgYW5kIGtpbmdzIGNhbWUgZm9yd2FyZCBhbmQgYmVnZ2VkIHRoYXQgdGhlIHRhc2sgb2YgY29ucXVlcmluZyB0aGVtIG1pZ2h0IGJlIGVudHJ1c3RlZCB0byBoaW1zZWxmIGFsb25lLCBhbmQgdGhhdCB0aGUga2luZyB3b3VsZCBzaXQgYnkgYXMgYSBzcGVjdGF0b3IuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gVGlncmFuZXMsIG5vdCB3aXNoaW5nIHRvIGJlIGxlZnQgYmVoaW5kIGVudGlyZWx5IGluIHRoaXMgcGxheSBvZiB3aXQgYW5kIHNjb2ZmaW5nLCB1dHRlcmVkIHRoYXQgZmFtb3VzIHNheWluZzogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JZiB0aGV5IGFyZSBjb21lIGFzIGFtYmFzc2Fkb3JzLCB0aGV5IGFyZSB0b28gbWFueTsgaWYgYXMgc29sZGllcnMsIHRvbyBmZXcuPC9xPiBBbmQgc28gZm9yIHRoZSB3aGlsZSB0aGV5IGNvbnRpbnVlZCB0aGVpciBzYXJjYXNtcyBhbmQgamVzdHMuIEJ1dCBhdCBkYXlicmVhayBMdWN1bGx1cyBsZWQgb3V0IGhpcyBmb3JjZXMgdW5kZXIgYXJtcy4gTm93LCB0aGUgQmFyYmFyaWFuIGFybXkgbGF5IHRvIHRoZSBlYXN0IG9mIHRoZSByaXZlci4gQnV0IGFzIHRoZSBzdHJlYW0gdGFrZXMgYSB0dXJuIHRvIHRoZSB3ZXN0IGF0IHRoZSBwb2ludCB3aGVyZSBpdCB3YXMgZWFzaWVzdCB0byBmb3JkLCBhbmQgYXMgTHVjdWxsdXMgbGVkIGhpcyB0cm9vcHMgdG8gdGhlIGF0dGFjayBpbiB0aGF0IGRpcmVjdGlvbiBmaXJzdCwgYW5kIHdpdGggc3BlZWQsIGhlIHNlZW1lZCB0byBUaWdyYW5lcyB0byBiZSByZXRyZWF0aW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBoZSBjYWxsZWQgVGF4aWxlcyBhbmQgc2FpZCwgd2l0aCBhIGxhdWdoLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvbid0IHlvdSBzZWUgdGhhdCB0aGUgaW52aW5jaWJsZSBSb21hbiBob3BsaXRlcyBhcmUgdGFraW5nIHRvIGZsaWdodD88L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIEtpbmcsPC9xPiBzYWlkIFRheGlsZXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBjb3VsZCB3aXNoIHRoYXQgc29tZSBtYXJ2ZWxsb3VzIHRoaW5nIG1pZ2h0IGZhbGwgdG8geW91ciBnb29kIGZvcnR1bmU7IGJ1dCB3aGVuIHRoZXNlIG1lbiBhcmUgbWVyZWx5IG9uIGEgbWFyY2gsIHRoZXkgZG8gbm90IHB1dCBvbiBzaGluaW5nIHJhaW1lbnQsIG5vciBoYXZlIHRoZXkgdGhlaXIgc2hpZWxkcyBwb2xpc2hlZCBhbmQgdGhlaXIgaGVsbWV0cyB1bmNvdmVyZWQsIGFzIG5vdyB0aGF0IHRoZXkgaGF2ZSBzdHJpcHBlZCB0aGUgbGVhdGhlcm4gY292ZXJpbmdzIGZyb20gdGhlaXIgYXJtb3VyLiBOYXksIHRoaXMgc3BsZW5kb3VyIG1lYW5zIHRoYXQgdGhleSBhcmUgZ29pbmcgdG8gZmlnaHQsIGFuZCBhcmUgbm93IGFkdmFuY2luZyB1cG9uIHRoZWlyIGVuZW1pZXMuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIFRheGlsZXMgd2FzIHlldCBzcGVha2luZywgdGhlIGZpcnN0IGVhZ2xlIGNhbWUgaW4gc2lnaHQsIGFzIEx1Y3VsbHVzIHdoZWVsZWQgdG93YXJkcyB0aGUgcml2ZXIsIGFuZCB0aGUgY29ob3J0cyB3ZXJlIHNlZW4gZm9ybWluZyBpbiBtYW5pcGxlcyB3aXRoIGEgdmlldyB0byBjcm9zc2luZy4gVGhlbiBhdCBsYXN0LCBhcyB0aG91Z2ggY29taW5nIG91dCBvZiBhIGRydW5rZW4gc3R1cG9yLCBUaWdyYW5lcyBjcmllZCBvdXQgdHdvIG9yIHRocmVlIHRpbWVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFyZSB0aGUgbWVuIGNvbWluZyBhZ2FpbnN0IHVzPzwvcT4gQW5kIHNvLCB3aXRoIG11Y2ggdHVtdWx0IGFuZCBjb25mdXNpb24sIGhpcyBtdWx0aXR1ZGUgZm9ybWVkIGluIGJhdHRsZSBhcnJheSwgdGhlIGtpbmcgaGltc2VsZiBvY2N1cHlpbmcgdGhlIGNlbnRyZSwgYW5kIGFzc2lnbmluZyB0aGUgbGVmdCB3aW5nIHRvIHRoZSBraW5nIG9mIHRoZSBBZGlhYmVuaSwgdGhlIHJpZ2h0IHRvIHRoZSBraW5nIG9mIHRoZSBNZWRlcy4gSW4gZnJvbnQgb2YgdGhpcyB3aW5nIGFsc28gdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgbWFpbC1jbGFkIGhvcnNlbWVuIHdlcmUgZHJhd24gdXAuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgaGFkIGVuY2FtcGVkIGFsb25nIHRoZSByaXZlciBpbiBhIGdyZWF0IHBsYWluLCBoZSBhcHBlYXJlZCB1dHRlcmx5IGluc2lnbmlmaWNhbnQgdG8gVGlncmFuZXMsIGFuZCBzdXBwbGllZCB0aGUga2luZydzIGZsYXR0ZXJlcnMgd2l0aCBncm91bmQgZm9yIGFtdXNlbWVudC4gU29tZSBtb2NrZWQgYXQgdGhlIFJvbWFucywgYW5kIG90aGVycywgaW4gcGxlYXNhbnRyeSwgY2FzdCBsb3RzIGZvciB0aGVpciBzcG9pbCwgd2hpbGUgZWFjaCBvZiB0aGUgZ2VuZXJhbHMgYW5kIGtpbmdzIGNhbWUgZm9yd2FyZCBhbmQgYmVnZ2VkIHRoYXQgdGhlIHRhc2sgb2YgY29ucXVlcmluZyB0aGVtIG1pZ2h0IGJlIGVudHJ1c3RlZCB0byBoaW1zZWxmIGFsb25lLCBhbmQgdGhhdCB0aGUga2luZyB3b3VsZCBzaXQgYnkgYXMgYSBzcGVjdGF0b3IuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gVGlncmFuZXMsIG5vdCB3aXNoaW5nIHRvIGJlIGxlZnQgYmVoaW5kIGVudGlyZWx5IGluIHRoaXMgcGxheSBvZiB3aXQgYW5kIHNjb2ZmaW5nLCB1dHRlcmVkIHRoYXQgZmFtb3VzIHNheWluZzogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHRoZXkgYXJlIGNvbWUgYXMgYW1iYXNzYWRvcnMsIHRoZXkgYXJlIHRvbyBtYW55OyBpZiBhcyBzb2xkaWVycywgdG9vIGZldy48L3E+IEFuZCBzbyBmb3IgdGhlIHdoaWxlIHRoZXkgY29udGludWVkIHRoZWlyIHNhcmNhc21zIGFuZCBqZXN0cy4gQnV0IGF0IGRheWJyZWFrIEx1Y3VsbHVzIGxlZCBvdXQgaGlzIGZvcmNlcyB1bmRlciBhcm1zLiBOb3csIHRoZSBCYXJiYXJpYW4gYXJteSBsYXkgdG8gdGhlIGVhc3Qgb2YgdGhlIHJpdmVyLiBCdXQgYXMgdGhlIHN0cmVhbSB0YWtlcyBhIHR1cm4gdG8gdGhlIHdlc3QgYXQgdGhlIHBvaW50IHdoZXJlIGl0IHdhcyBlYXNpZXN0IHRvIGZvcmQsIGFuZCBhcyBMdWN1bGx1cyBsZWQgaGlzIHRyb29wcyB0byB0aGUgYXR0YWNrIGluIHRoYXQgZGlyZWN0aW9uIGZpcnN0LCBhbmQgd2l0aCBzcGVlZCwgaGUgc2VlbWVkIHRvIFRpZ3JhbmVzIHRvIGJlIHJldHJlYXRpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIGNhbGxlZCBUYXhpbGVzIGFuZCBzYWlkLCB3aXRoIGEgbGF1Z2gsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Eb24ndCB5b3Ugc2VlIHRoYXQgdGhlIGludmluY2libGUgUm9tYW4gaG9wbGl0ZXMgYXJlIHRha2luZyB0byBmbGlnaHQ/PC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIEtpbmcsPC9xPiBzYWlkIFRheGlsZXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGNvdWxkIHdpc2ggdGhhdCBzb21lIG1hcnZlbGxvdXMgdGhpbmcgbWlnaHQgZmFsbCB0byB5b3VyIGdvb2QgZm9ydHVuZTsgYnV0IHdoZW4gdGhlc2UgbWVuIGFyZSBtZXJlbHkgb24gYSBtYXJjaCwgdGhleSBkbyBub3QgcHV0IG9uIHNoaW5pbmcgcmFpbWVudCwgbm9yIGhhdmUgdGhleSB0aGVpciBzaGllbGRzIHBvbGlzaGVkIGFuZCB0aGVpciBoZWxtZXRzIHVuY292ZXJlZCwgYXMgbm93IHRoYXQgdGhleSBoYXZlIHN0cmlwcGVkIHRoZSBsZWF0aGVybiBjb3ZlcmluZ3MgZnJvbSB0aGVpciBhcm1vdXIuIE5heSwgdGhpcyBzcGxlbmRvdXIgbWVhbnMgdGhhdCB0aGV5IGFyZSBnb2luZyB0byBmaWdodCwgYW5kIGFyZSBub3cgYWR2YW5jaW5nIHVwb24gdGhlaXIgZW5lbWllcy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIFRheGlsZXMgd2FzIHlldCBzcGVha2luZywgdGhlIGZpcnN0IGVhZ2xlIGNhbWUgaW4gc2lnaHQsIGFzIEx1Y3VsbHVzIHdoZWVsZWQgdG93YXJkcyB0aGUgcml2ZXIsIGFuZCB0aGUgY29ob3J0cyB3ZXJlIHNlZW4gZm9ybWluZyBpbiBtYW5pcGxlcyB3aXRoIGEgdmlldyB0byBjcm9zc2luZy4gVGhlbiBhdCBsYXN0LCBhcyB0aG91Z2ggY29taW5nIG91dCBvZiBhIGRydW5rZW4gc3R1cG9yLCBUaWdyYW5lcyBjcmllZCBvdXQgdHdvIG9yIHRocmVlIHRpbWVzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXJlIHRoZSBtZW4gY29taW5nIGFnYWluc3QgdXM/PC9xPiBBbmQgc28sIHdpdGggbXVjaCB0dW11bHQgYW5kIGNvbmZ1c2lvbiwgaGlzIG11bHRpdHVkZSBmb3JtZWQgaW4gYmF0dGxlIGFycmF5LCB0aGUga2luZyBoaW1zZWxmIG9jY3VweWluZyB0aGUgY2VudHJlLCBhbmQgYXNzaWduaW5nIHRoZSBsZWZ0IHdpbmcgdG8gdGhlIGtpbmcgb2YgdGhlIEFkaWFiZW5pLCB0aGUgcmlnaHQgdG8gdGhlIGtpbmcgb2YgdGhlIE1lZGVzLiBJbiBmcm9udCBvZiB0aGlzIHdpbmcgYWxzbyB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZSBtYWlsLWNsYWQgaG9yc2VtZW4gd2VyZSBkcmF3biB1cC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BcyBMdWN1bGx1cyB3YXMgYWJvdXQgdG8gY3Jvc3MgdGhlIHJpdmVyLCBzb21lIG9mIGhpcyBvZmZpY2VycyBhZHZpc2VkIGhpbSB0byBiZXdhcmUgb2YgdGhlIGRheSwgd2hpY2ggd2FzIG9uZSBvZiB0aGUgdW5sdWNreSBkYXlz4oCUdGhlIFJvbWFucyBjYWxsIHRoZW0gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJsYWNrIGRheXMuPC9xPiBGb3Igb24gdGhhdCBkYXkgQ2FlcGlvIGFuZCBoaXMgYXJteSBwZXJpc2hlZCBpbiBhIGJhdHRsZSB3aXRoIHRoZSBDaW1icmkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5CLkMuIDEwNS4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhbS4gMTkuNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbWlsbHVzPC90aXRsZT4sIHhpeC4gNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQnV0IEx1Y3VsbHVzIGFuc3dlcmVkIHdpdGggdGhlIG1lbW9yYWJsZSB3b3JkczogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlZlcmlseSwgSSB3aWxsIG1ha2UgdGhpcyBkYXksIHRvbywgYSBsdWNreSBvbmUgZm9yIHRoZSBSb21hbnMuPC9xPiBOb3cgdGhlIGRheSB3YXMgdGhlIHNpeHRoIG9mIE9jdG9iZXIuCgkJCTwvcD4KICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ibGFjayBkYXlzLjwvcT4gRm9yIG9uIHRoYXQgZGF5IENhZXBpbyBhbmQgaGlzIGFybXkgcGVyaXNoZWQgaW4gYSBiYXR0bGUgd2l0aCB0aGUgQ2ltYnJpLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Qi5DLiAxMDUuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYW0uIDE5LjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW1pbGx1czwvdGl0bGU+LCB4aXguIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEJ1dCBMdWN1bGx1cyBhbnN3ZXJlZCB3aXRoIHRoZSBtZW1vcmFibGUgd29yZHM6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2FtLiAxOS43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FtaWxsdXM8L3RpdGxlPiwgeGl4LiA3LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FtaWxsdXM8L3RpdGxlPiwgeGl4LiA3LjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VmVyaWx5LCBJIHdpbGwgbWFrZSB0aGlzIGRheSwgdG9vLCBhIGx1Y2t5IG9uZSBmb3IgdGhlIFJvbWFucy48L3E+IE5vdyB0aGUgZGF5IHdhcyB0aGUgc2l4dGggb2YgT2N0b2Jlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2F5aW5nIHRoaXMsIGFuZCBiaWRkaW5nIGhpcyBtZW4gYmUgb2YgZ29vZCBjb3VyYWdlLCBoZSBjcm9zc2VkIHRoZSByaXZlciwgYW5kIGxlZCB0aGUgd2F5IGluIHBlcnNvbiBhZ2FpbnN0IHRoZSBlbmVteS4gSGUgd29yZSBhIHN0ZWVsIGJyZWFzdHBsYXRlIG9mIGdsaXR0ZXJpbmcgc2NhbGVzLCBhbmQgYSB0YXNzZWxsZWQgY2xvYWssIGFuZCBhdCBvbmNlIGxldCBoaXMgc3dvcmQgZmxhc2ggZm9ydGggZnJvbSBpdHMgc2NhYmJhcmQsIGluZGljYXRpbmcgdGhhdCB0aGV5IG11c3QgZm9ydGh3aXRoIGNvbWUgdG8gY2xvc2UgcXVhcnRlcnMgd2l0aCBtZW4gd2hvIGZvdWdodCB3aXRoIGxvbmcgcmFuZ2UgbWlzc2lsZXMsIGFuZCBlbGltaW5hdGUsIGJ5IHRoZSByYXBpZGl0eSBvZiB0aGVpciBvbnNldCwgdGhlIHNwYWNlIGluIHdoaWNoIGFyY2hlcnkgd291bGQgYmUgZWZmZWN0aXZlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBoZSBzYXcgdGhhdCB0aGUgbWFpbC1jbGFkIGhvcnNlbWVuLCBvbiB3aG9tIHRoZSBncmVhdGVzdCByZWxpYW5jZSB3YXMgcGxhY2VkLCB3ZXJlIHN0YXRpb25lZCBhdCB0aGUgZm9vdCBvZiBhIGNvbnNpZGVyYWJsZSBoaWxsIHdoaWNoIHdhcyBjcm93bmVkIGJ5IGEgYnJvYWQgYW5kIGxldmVsIHNwYWNlLCBhbmQgdGhhdCB0aGUgYXBwcm9hY2ggdG8gdGhpcyB3YXMgYSBtYXR0ZXIgb2Ygb25seSBmb3VyIHN0YWRpYSwgYW5kIG5laXRoZXIgcm91Z2ggbm9yIHN0ZWVwLCBoZSBvcmRlcmVkIGhpcyBUaHJhY2lhbiBhbmQgR2FsbGljIGhvcnNlbWVuIHRvIGF0dGFjayB0aGUgZW5lbXkgaW4gdGhlIGZsYW5rLCBhbmQgdG8gcGFycnkgdGhlaXIgbG9uZyBzcGVhcnMgd2l0aCB0aGVpciBvd24gc2hvcnQgc3dvcmRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4oTm93IHRoZSBzb2xlIHJlc291cmNlIG9mIHRoZSBtYWlsLWNsYWQgaG9yc2VtZW4gaXMgdGhlaXIgbG9uZyBzcGVhciwgYW5kIHRoZXkgaGF2ZSBub25lIG90aGVyIHdoYXRzb2V2ZXIsIGVpdGhlciBpbiBkZWZlbmRpbmcgdGhlbXNlbHZlcyBvciBhdHRhY2tpbmcgdGhlaXIgZW5lbWllcywgb3dpbmcgdG8gdGhlIHdlaWdodCBhbmQgcmlnaWRpdHkgb2YgdGhlaXIgYXJtb3VyOyBpbiB0aGlzIHRoZXkgYXJlLCBhcyBpdCB3ZXJlLCBpbW11cmVkLikgVGhlbiBoZSBoaW1zZWxmLCB3aXRoIHR3byBjb2hvcnRzLCBoYXN0ZW5lZCBlYWdlcmx5IHRvd2FyZHMgdGhlIGhpbGwsIGhpcyBzb2xkaWVycyBmb2xsb3dpbmcgd2l0aCBhbGwgdGhlaXIgbWlnaHQsIGJlY2F1c2UgdGhleSBzYXcgaGltIGFoZWFkIG9mIHRoZW0gaW4gYXJtb3VyLCBlbmR1cmluZyBhbGwgdGhlIGZhdGlndWUgb2YgYSBmb290LXNvbGRpZXIsIGFuZCBwcmVzc2luZyBoaXMgd2F5IGFsb25nLiBBcnJpdmVkIGF0IHRoZSB0b3AsIGFuZCBzdGFuZGluZyBpbiB0aGUgbW9zdCBjb25zcGljdW91cyBzcG90LCBoZSBjcmllZCB3aXRoIGEgbG91ZCB2b2ljZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgZGF5IGlzIG91cnMsIHRoZSBkYXkgaXMgb3VycywgbXkgZmVsbG93IHNvbGRpZXJzITwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHRoZXNlIHdvcmRzLCBoZSBsZWQgaGlzIG1lbiBhZ2FpbnN0IHRoZSBtYWlsLWNsYWQgaG9yc2VtZW4sIG9yZGVyaW5nIHRoZW0gbm90IHRvIGh1cmwgdGhlaXIgamF2ZWxpbnMgeWV0LCBidXQgdGFraW5nIGVhY2ggaGlzIG93biBtYW4sIHRvIHNtaXRlIHRoZSBlbmVteSdzIGxlZ3MgYW5kIHRoaWdocywgd2hpY2ggYXJlIHRoZSBvbmx5IHBhcnRzIG9mIHRoZXNlIG1haWwtY2xhZCBob3JzZW1lbiBsZWZ0IGV4cG9zZWQuIEhvd2V2ZXIsIHRoZXJlIHdhcyBubyBuZWVkIG9mIHRoaXMgbW9kZSBvZiBmaWdodGluZywgZm9yIHRoZSBlbmVteSBkaWQgbm90IGF3YWl0IHRoZSBSb21hbnMsIGJ1dCwgd2l0aCBsb3VkIGNyaWVzIGFuZCBpbiBtb3N0IGRpc2dyYWNlZnVsIGZsaWdodCwgdGhleSBodXJsZWQgdGhlbXNlbHZlcyBhbmQgdGhlaXIgaG9yc2VzLCB3aXRoIGFsbCB0aGVpciB3ZWlnaHQsIHVwb24gdGhlIHJhbmtzIG9mIHRoZWlyIG93biBpbmZhbnRyeSwgYmVmb3JlIGl0IGhhZCBzbyBtdWNoIGFzIGJlZ3VuIHRvIGZpZ2h0LCBhbmQgc28gYWxsIHRob3NlIHRlbnMgb2YgdGhvdXNhbmRzIHdlcmUgZGVmZWF0ZWQgd2l0aG91dCB0aGUgaW5mbGljdGlvbiBvZiBhIHdvdW5kIG9yIHRoZSBzaWdodCBvZiBibG9vZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBncmVhdCBzbGF1Z2h0ZXIgYmVnYW4gYXQgb25jZSB3aGVuIHRoZXkgZmxlZCwgb3IgcmF0aGVyIHRyaWVkIHRvIGZseSwgZm9yIHRoZXkgd2VyZSBwcmV2ZW50ZWQgZnJvbSByZWFsbHkgZG9pbmcgc28gYnkgdGhlIGNsb3NlbmVzcyBhbmQgZGVwdGggb2YgdGhlaXIgb3duIHJhbmtzLiBUaWdyYW5lcyByb2RlIGF3YXkgYXQgdGhlIHZlcnkgb3V0c2V0IHdpdGggYSBmZXcgYXR0ZW5kYW50cywgYW5kIHRvb2sgdG8gZmxpZ2h0LiBTZWVpbmcgaGlzIHNvbiBhbHNvIGluIHRoZSBzYW1lIHBsaWdodCwgaGUgdG9vayBvZmYgdGhlIGRpYWRlbSBmcm9tIGhpcyBoZWFkIGFuZCwgaW4gdGVhcnMsIGdhdmUgaXQgdG8gaGltLCBiaWRkaW5nIGhpbSBzYXZlIGhpbXNlbGYgYXMgYmVzdCBoZSBjb3VsZCBieSBhbm90aGVyIHJvdXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgeW91bmcgbWFuLCBob3dldmVyLCBkaWQgbm90IHZlbnR1cmUgdG8gYXNzdW1lIHRoZSBkaWFkZW0sIGJ1dCBnYXZlIGl0IHRvIGhpcyBtb3N0IHRydXN0ZWQgc2xhdmUgZm9yIHNhZmUga2VlcGluZy4gVGhpcyBzbGF2ZSBoYXBwZW5lZCB0byBiZSBjYXB0dXJlZCwgYW5kIHdhcyBicm91Z2h0IHRvIEx1Y3VsbHVzLCBhbmQgdGh1cyBldmVuIHRoZSBkaWFkZW0gb2YgVGlncmFuZXMgYmVjYW1lIGEgcGFydCBvZiB0aGUgYm9vdHkuIEl0IGlzIHNhaWQgdGhhdCBtb3JlIHRoYW4gYSBodW5kcmVkIHRob3VzYW5kIG9mIHRoZSBlbmVteSdzIGluZmFudHJ5IHBlcmlzaGVkLCB3aGlsZSBvZiB0aGUgY2F2YWxyeSBvbmx5IGEgZmV3LCBhbGwgdG9sZCwgbWFkZSB0aGVpciBlc2NhcGUuIE9mIHRoZSBSb21hbnMsIG9uIHRoZSBvdGhlciBoYW5kLCBvbmx5IGEgaHVuZHJlZCB3ZXJlIHdvdW5kZWQsIGFuZCBvbmx5IGZpdmUga2lsbGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2F5aW5nIHRoaXMsIGFuZCBiaWRkaW5nIGhpcyBtZW4gYmUgb2YgZ29vZCBjb3VyYWdlLCBoZSBjcm9zc2VkIHRoZSByaXZlciwgYW5kIGxlZCB0aGUgd2F5IGluIHBlcnNvbiBhZ2FpbnN0IHRoZSBlbmVteS4gSGUgd29yZSBhIHN0ZWVsIGJyZWFzdHBsYXRlIG9mIGdsaXR0ZXJpbmcgc2NhbGVzLCBhbmQgYSB0YXNzZWxsZWQgY2xvYWssIGFuZCBhdCBvbmNlIGxldCBoaXMgc3dvcmQgZmxhc2ggZm9ydGggZnJvbSBpdHMgc2NhYmJhcmQsIGluZGljYXRpbmcgdGhhdCB0aGV5IG11c3QgZm9ydGh3aXRoIGNvbWUgdG8gY2xvc2UgcXVhcnRlcnMgd2l0aCBtZW4gd2hvIGZvdWdodCB3aXRoIGxvbmcgcmFuZ2UgbWlzc2lsZXMsIGFuZCBlbGltaW5hdGUsIGJ5IHRoZSByYXBpZGl0eSBvZiB0aGVpciBvbnNldCwgdGhlIHNwYWNlIGluIHdoaWNoIGFyY2hlcnkgd291bGQgYmUgZWZmZWN0aXZlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHNhdyB0aGF0IHRoZSBtYWlsLWNsYWQgaG9yc2VtZW4sIG9uIHdob20gdGhlIGdyZWF0ZXN0IHJlbGlhbmNlIHdhcyBwbGFjZWQsIHdlcmUgc3RhdGlvbmVkIGF0IHRoZSBmb290IG9mIGEgY29uc2lkZXJhYmxlIGhpbGwgd2hpY2ggd2FzIGNyb3duZWQgYnkgYSBicm9hZCBhbmQgbGV2ZWwgc3BhY2UsIGFuZCB0aGF0IHRoZSBhcHByb2FjaCB0byB0aGlzIHdhcyBhIG1hdHRlciBvZiBvbmx5IGZvdXIgc3RhZGlhLCBhbmQgbmVpdGhlciByb3VnaCBub3Igc3RlZXAsIGhlIG9yZGVyZWQgaGlzIFRocmFjaWFuIGFuZCBHYWxsaWMgaG9yc2VtZW4gdG8gYXR0YWNrIHRoZSBlbmVteSBpbiB0aGUgZmxhbmssIGFuZCB0byBwYXJyeSB0aGVpciBsb25nIHNwZWFycyB3aXRoIHRoZWlyIG93biBzaG9ydCBzd29yZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPihOb3cgdGhlIHNvbGUgcmVzb3VyY2Ugb2YgdGhlIG1haWwtY2xhZCBob3JzZW1lbiBpcyB0aGVpciBsb25nIHNwZWFyLCBhbmQgdGhleSBoYXZlIG5vbmUgb3RoZXIgd2hhdHNvZXZlciwgZWl0aGVyIGluIGRlZmVuZGluZyB0aGVtc2VsdmVzIG9yIGF0dGFja2luZyB0aGVpciBlbmVtaWVzLCBvd2luZyB0byB0aGUgd2VpZ2h0IGFuZCByaWdpZGl0eSBvZiB0aGVpciBhcm1vdXI7IGluIHRoaXMgdGhleSBhcmUsIGFzIGl0IHdlcmUsIGltbXVyZWQuKSBUaGVuIGhlIGhpbXNlbGYsIHdpdGggdHdvIGNvaG9ydHMsIGhhc3RlbmVkIGVhZ2VybHkgdG93YXJkcyB0aGUgaGlsbCwgaGlzIHNvbGRpZXJzIGZvbGxvd2luZyB3aXRoIGFsbCB0aGVpciBtaWdodCwgYmVjYXVzZSB0aGV5IHNhdyBoaW0gYWhlYWQgb2YgdGhlbSBpbiBhcm1vdXIsIGVuZHVyaW5nIGFsbCB0aGUgZmF0aWd1ZSBvZiBhIGZvb3Qtc29sZGllciwgYW5kIHByZXNzaW5nIGhpcyB3YXkgYWxvbmcuIEFycml2ZWQgYXQgdGhlIHRvcCwgYW5kIHN0YW5kaW5nIGluIHRoZSBtb3N0IGNvbnNwaWN1b3VzIHNwb3QsIGhlIGNyaWVkIHdpdGggYSBsb3VkIHZvaWNlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIGRheSBpcyBvdXJzLCB0aGUgZGF5IGlzIG91cnMsIG15IGZlbGxvdyBzb2xkaWVycyE8L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlc2Ugd29yZHMsIGhlIGxlZCBoaXMgbWVuIGFnYWluc3QgdGhlIG1haWwtY2xhZCBob3JzZW1lbiwgb3JkZXJpbmcgdGhlbSBub3QgdG8gaHVybCB0aGVpciBqYXZlbGlucyB5ZXQsIGJ1dCB0YWtpbmcgZWFjaCBoaXMgb3duIG1hbiwgdG8gc21pdGUgdGhlIGVuZW15J3MgbGVncyBhbmQgdGhpZ2hzLCB3aGljaCBhcmUgdGhlIG9ubHkgcGFydHMgb2YgdGhlc2UgbWFpbC1jbGFkIGhvcnNlbWVuIGxlZnQgZXhwb3NlZC4gSG93ZXZlciwgdGhlcmUgd2FzIG5vIG5lZWQgb2YgdGhpcyBtb2RlIG9mIGZpZ2h0aW5nLCBmb3IgdGhlIGVuZW15IGRpZCBub3QgYXdhaXQgdGhlIFJvbWFucywgYnV0LCB3aXRoIGxvdWQgY3JpZXMgYW5kIGluIG1vc3QgZGlzZ3JhY2VmdWwgZmxpZ2h0LCB0aGV5IGh1cmxlZCB0aGVtc2VsdmVzIGFuZCB0aGVpciBob3JzZXMsIHdpdGggYWxsIHRoZWlyIHdlaWdodCwgdXBvbiB0aGUgcmFua3Mgb2YgdGhlaXIgb3duIGluZmFudHJ5LCBiZWZvcmUgaXQgaGFkIHNvIG11Y2ggYXMgYmVndW4gdG8gZmlnaHQsIGFuZCBzbyBhbGwgdGhvc2UgdGVucyBvZiB0aG91c2FuZHMgd2VyZSBkZWZlYXRlZCB3aXRob3V0IHRoZSBpbmZsaWN0aW9uIG9mIGEgd291bmQgb3IgdGhlIHNpZ2h0IG9mIGJsb29kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgZ3JlYXQgc2xhdWdodGVyIGJlZ2FuIGF0IG9uY2Ugd2hlbiB0aGV5IGZsZWQsIG9yIHJhdGhlciB0cmllZCB0byBmbHksIGZvciB0aGV5IHdlcmUgcHJldmVudGVkIGZyb20gcmVhbGx5IGRvaW5nIHNvIGJ5IHRoZSBjbG9zZW5lc3MgYW5kIGRlcHRoIG9mIHRoZWlyIG93biByYW5rcy4gVGlncmFuZXMgcm9kZSBhd2F5IGF0IHRoZSB2ZXJ5IG91dHNldCB3aXRoIGEgZmV3IGF0dGVuZGFudHMsIGFuZCB0b29rIHRvIGZsaWdodC4gU2VlaW5nIGhpcyBzb24gYWxzbyBpbiB0aGUgc2FtZSBwbGlnaHQsIGhlIHRvb2sgb2ZmIHRoZSBkaWFkZW0gZnJvbSBoaXMgaGVhZCBhbmQsIGluIHRlYXJzLCBnYXZlIGl0IHRvIGhpbSwgYmlkZGluZyBoaW0gc2F2ZSBoaW1zZWxmIGFzIGJlc3QgaGUgY291bGQgYnkgYW5vdGhlciByb3V0ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB5b3VuZyBtYW4sIGhvd2V2ZXIsIGRpZCBub3QgdmVudHVyZSB0byBhc3N1bWUgdGhlIGRpYWRlbSwgYnV0IGdhdmUgaXQgdG8gaGlzIG1vc3QgdHJ1c3RlZCBzbGF2ZSBmb3Igc2FmZSBrZWVwaW5nLiBUaGlzIHNsYXZlIGhhcHBlbmVkIHRvIGJlIGNhcHR1cmVkLCBhbmQgd2FzIGJyb3VnaHQgdG8gTHVjdWxsdXMsIGFuZCB0aHVzIGV2ZW4gdGhlIGRpYWRlbSBvZiBUaWdyYW5lcyBiZWNhbWUgYSBwYXJ0IG9mIHRoZSBib290eS4gSXQgaXMgc2FpZCB0aGF0IG1vcmUgdGhhbiBhIGh1bmRyZWQgdGhvdXNhbmQgb2YgdGhlIGVuZW15J3MgaW5mYW50cnkgcGVyaXNoZWQsIHdoaWxlIG9mIHRoZSBjYXZhbHJ5IG9ubHkgYSBmZXcsIGFsbCB0b2xkLCBtYWRlIHRoZWlyIGVzY2FwZS4gT2YgdGhlIFJvbWFucywgb24gdGhlIG90aGVyIGhhbmQsIG9ubHkgYSBodW5kcmVkIHdlcmUgd291bmRlZCwgYW5kIG9ubHkgZml2ZSBraWxsZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFudGlvY2h1cyB0aGUgcGhpbG9zb3BoZXIgbWFrZXMgbWVudGlvbiBvZiB0aGlzIGJhdHRsZSBpbiBoaXMgdHJlYXRpc2UgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db25jZXJuaW5nIEdvZHMsPC9xPiBhbmQgc2F5cyB0aGF0IHRoZSBzdW4gbmV2ZXIgbG9va2VkIGRvd24gb24gc3VjaCBhbm90aGVyLiBBbmQgU3RyYWJvLCBhbm90aGVyIHBoaWxvc29waGVyLCBpbiBoaXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IaXN0b3JpY2FsIENvbW1lbnRhcmllcyw8L3E+IHNheXMgdGhhdCB0aGUgUm9tYW5zIHRoZW1zZWx2ZXMgd2VyZSBhc2hhbWVkLCBhbmQgbGF1Z2hlZCBvbmUgYW5vdGhlciB0byBzY29ybiBmb3IgcmVxdWlyaW5nIGFybXMgYWdhaW5zdCBzdWNoIHNsYXZlcy4gTGl2eSBhbHNvIGhhcyByZW1hcmtlZCB0aGF0IHRoZSBSb21hbnMgd2VyZSBuZXZlciBpbiBzdWNoIGluZmVyaW9yIG51bWJlcnMgd2hlbiB0aGV5IGZhY2VkIGFuIGVuZW15OyBmb3IgdGhlIHZpY3RvcnMgd2VyZSBoYXJkbHkgZXZlbiBhIHR3ZW50aWV0aCBwYXJ0IG9mIHRoZSB2YW5xdWlzaGVkLCBidXQgbGVzcyB0aGFuIHRoaXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbiBnZW5lcmFscyB3aG8gd2VyZSBtb3N0IGNhcGFibGUgYW5kIG1vc3QgZXhwZXJpZW5jZWQgaW4gd2FyLCBwcmFpc2VkIEx1Y3VsbHVzIGVzcGVjaWFsbHkgZm9yIHRoaXMsIHRoYXQgaGUgb3V0Z2VuZXJhbGxlZCB0d28ga2luZ3Mgd2hvIHdlcmUgbW9zdCBkaXN0aW5ndWlzaGVkIGFuZCBwb3dlcmZ1bCBieSB0d28gbW9zdCBvcHBvc2l0ZSB0YWN0aWNzLCBzcGVlZCBhbmQgc2xvd25lc3MuIEZvciBoZSB1c2VkIHVwIE1pdGhyaWRhdGVzLCBhdCB0aGUgaGVpZ2h0IG9mIGhpcyBwb3dlciwgYnkgbG9uZyBkZWxheXM7IGJ1dCBjcnVzaGVkIFRpZ3JhbmVzIGJ5IHRoZSBzcGVlZCBvZiBoaXMgb3BlcmF0aW9ucywgYmVpbmcgb25lIG9mIHRoZSBmZXcgZ2VuZXJhbHMgb2YgYWxsIHRpbWUgdG8gdXNlIGRlbGF5IGZvciBncmVhdGVyIGFjaGlldmVtZW50LCBhbmQgYm9sZG5lc3MgZm9yIGdyZWF0ZXIgc2FmZXR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFudGlvY2h1cyB0aGUgcGhpbG9zb3BoZXIgbWFrZXMgbWVudGlvbiBvZiB0aGlzIGJhdHRsZSBpbiBoaXMgdHJlYXRpc2UgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNvbmNlcm5pbmcgR29kcyw8L3E+IGFuZCBzYXlzIHRoYXQgdGhlIHN1biBuZXZlciBsb29rZWQgZG93biBvbiBzdWNoIGFub3RoZXIuIEFuZCBTdHJhYm8sIGFub3RoZXIgcGhpbG9zb3BoZXIsIGluIGhpcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SGlzdG9yaWNhbCBDb21tZW50YXJpZXMsPC9xPiBzYXlzIHRoYXQgdGhlIFJvbWFucyB0aGVtc2VsdmVzIHdlcmUgYXNoYW1lZCwgYW5kIGxhdWdoZWQgb25lIGFub3RoZXIgdG8gc2Nvcm4gZm9yIHJlcXVpcmluZyBhcm1zIGFnYWluc3Qgc3VjaCBzbGF2ZXMuIExpdnkgYWxzbyBoYXMgcmVtYXJrZWQgdGhhdCB0aGUgUm9tYW5zIHdlcmUgbmV2ZXIgaW4gc3VjaCBpbmZlcmlvciBudW1iZXJzIHdoZW4gdGhleSBmYWNlZCBhbiBlbmVteTsgZm9yIHRoZSB2aWN0b3JzIHdlcmUgaGFyZGx5IGV2ZW4gYSB0d2VudGlldGggcGFydCBvZiB0aGUgdmFucXVpc2hlZCwgYnV0IGxlc3MgdGhhbiB0aGlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbiBnZW5lcmFscyB3aG8gd2VyZSBtb3N0IGNhcGFibGUgYW5kIG1vc3QgZXhwZXJpZW5jZWQgaW4gd2FyLCBwcmFpc2VkIEx1Y3VsbHVzIGVzcGVjaWFsbHkgZm9yIHRoaXMsIHRoYXQgaGUgb3V0Z2VuZXJhbGxlZCB0d28ga2luZ3Mgd2hvIHdlcmUgbW9zdCBkaXN0aW5ndWlzaGVkIGFuZCBwb3dlcmZ1bCBieSB0d28gbW9zdCBvcHBvc2l0ZSB0YWN0aWNzLCBzcGVlZCBhbmQgc2xvd25lc3MuIEZvciBoZSB1c2VkIHVwIE1pdGhyaWRhdGVzLCBhdCB0aGUgaGVpZ2h0IG9mIGhpcyBwb3dlciwgYnkgbG9uZyBkZWxheXM7IGJ1dCBjcnVzaGVkIFRpZ3JhbmVzIGJ5IHRoZSBzcGVlZCBvZiBoaXMgb3BlcmF0aW9ucywgYmVpbmcgb25lIG9mIHRoZSBmZXcgZ2VuZXJhbHMgb2YgYWxsIHRpbWUgdG8gdXNlIGRlbGF5IGZvciBncmVhdGVyIGFjaGlldmVtZW50LCBhbmQgYm9sZG5lc3MgZm9yIGdyZWF0ZXIgc2FmZXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgcmVhc29uIHdoeSBNaXRocmlkYXRlcyBtYWRlIG5vIGhhc3RlIHRvIGJlIGF0IHRoZSBiYXR0bGUuIEhlIHRob3VnaHQgTHVjdWxsdXMgd291bGQgY2Fycnkgb24gdGhlIHdhciB3aXRoIGhpcyB3b250ZWQgY2F1dGlvbiBhbmQgaW5kaXJlY3RuZXNzLCBhbmQgc28gbWFyY2hlZCBzbG93bHkgdG8gam9pbiBUaWdyYW5lcy4gQXQgZmlyc3QgaGUgbWV0IGEgZmV3IEFybWVuaWFucyBodXJyeWluZyBiYWNrIG92ZXIgdGhlIHJvYWQgaW4gcGFuaWMgZmVhciwgYW5kIGNvbmplY3R1cmVkIHdoYXQgaGFkIGhhcHBlbmVkOyB0aGVuIHByZXNlbnRseSwgd2hlbiBoZSBoYWQgbGVhcm5lZCBvZiB0aGUgZGVmZWF0IGZyb20gbW9yZSB1bmFybWVkIGFuZCB3b3VuZGVkIGZ1Z2l0aXZlcyB3aG9tIGhlIG1ldCwgaGUgc291Z2h0IHRvIGZpbmQgVGlncmFuZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggaGUgZm91bmQgaGltIGRlc3RpdHV0ZSBvZiBhbGwgdGhpbmdzIGFuZCBodW1pbGlhdGVkLCBoZSBkaWQgbm90IHJldHVybiBoaXMgaW5zb2xlbnQgYmVoYXZpb3VyLCBidXQgZ290IGRvd24gZnJvbSBoaXMgaG9yc2UgYW5kIHdlcHQgd2l0aCBoaW0gb3ZlciB0aGVpciBjb21tb24gc3VmZmVyaW5ncy4gVGhlbiBoZSBnYXZlIGhpbSBoaXMgb3duIHJveWFsIGVxdWlwYWdlLCBhbmQgdHJpZWQgdG8gZmlsbCBoaW0gd2l0aCBjb3VyYWdlIGZvciB0aGUgZnV0dXJlLiBBbmQgc28gdGhlc2Uga2luZ3MgYmVnYW4gYWdhaW4gdG8gYXNzZW1ibGUgZnJlc2ggZm9yY2VzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgdGhlIHJlYXNvbiB3aHkgTWl0aHJpZGF0ZXMgbWFkZSBubyBoYXN0ZSB0byBiZSBhdCB0aGUgYmF0dGxlLiBIZSB0aG91Z2h0IEx1Y3VsbHVzIHdvdWxkIGNhcnJ5IG9uIHRoZSB3YXIgd2l0aCBoaXMgd29udGVkIGNhdXRpb24gYW5kIGluZGlyZWN0bmVzcywgYW5kIHNvIG1hcmNoZWQgc2xvd2x5IHRvIGpvaW4gVGlncmFuZXMuIEF0IGZpcnN0IGhlIG1ldCBhIGZldyBBcm1lbmlhbnMgaHVycnlpbmcgYmFjayBvdmVyIHRoZSByb2FkIGluIHBhbmljIGZlYXIsIGFuZCBjb25qZWN0dXJlZCB3aGF0IGhhZCBoYXBwZW5lZDsgdGhlbiBwcmVzZW50bHksIHdoZW4gaGUgaGFkIGxlYXJuZWQgb2YgdGhlIGRlZmVhdCBmcm9tIG1vcmUgdW5hcm1lZCBhbmQgd291bmRlZCBmdWdpdGl2ZXMgd2hvbSBoZSBtZXQsIGhlIHNvdWdodCB0byBmaW5kIFRpZ3JhbmVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggaGUgZm91bmQgaGltIGRlc3RpdHV0ZSBvZiBhbGwgdGhpbmdzIGFuZCBodW1pbGlhdGVkLCBoZSBkaWQgbm90IHJldHVybiBoaXMgaW5zb2xlbnQgYmVoYXZpb3VyLCBidXQgZ290IGRvd24gZnJvbSBoaXMgaG9yc2UgYW5kIHdlcHQgd2l0aCBoaW0gb3ZlciB0aGVpciBjb21tb24gc3VmZmVyaW5ncy4gVGhlbiBoZSBnYXZlIGhpbSBoaXMgb3duIHJveWFsIGVxdWlwYWdlLCBhbmQgdHJpZWQgdG8gZmlsbCBoaW0gd2l0aCBjb3VyYWdlIGZvciB0aGUgZnV0dXJlLiBBbmQgc28gdGhlc2Uga2luZ3MgYmVnYW4gYWdhaW4gdG8gYXNzZW1ibGUgZnJlc2ggZm9yY2VzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBpbiB0aGUgY2l0eSBvZiBUaWdyYW5vY2VydGEsIHRoZSBHcmVla3MgaGFkIHJpc2VuIHVwIGFnYWluc3QgdGhlIEJhcmJhcmlhbnMgYW5kIHdlcmUgcmVhZHkgdG8gaGFuZCB0aGUgY2l0eSBvdmVyIHRvIEx1Y3VsbHVzOyBzbyBoZSBhc3NhdWx0ZWQgYW5kIHRvb2sgaXQuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHJveWFsIHRyZWFzdXJlcyBpbiB0aGUgY2l0eSBoZSB0b29rIGludG8gaGlzIG93biBjaGFyZ2UsIGJ1dCB0aGUgY2l0eSBpdHNlbGYgaGUgdHVybmVkIG92ZXIgdG8gaGlzIHNvbGRpZXJzIGZvciBwbHVuZGVyLCBhbmQgaXQgY29udGFpbmVkIGVpZ2h0IHRob3VzYW5kIHRhbGVudHMgaW4gbW9uZXksIHRvZ2V0aGVyIHdpdGggdGhlIHVzdWFsIHZhbHVhYmxlcy4gQmVzaWRlcyB0aGlzLCBoZSBnYXZlIHRvIGVhY2ggbWFuIGVpZ2h0IGh1bmRyZWQgZHJhY2htYXMgZnJvbSB0aGUgZ2VuZXJhbCBzcG9pbHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uIGxlYXJuaW5nIHRoYXQgbWFueSBkcmFtYXRpYyBhcnRpc3RzIGhhZCBiZWVuIGNhcHR1cmVkIGluIHRoZSBjaXR5LCB3aG9tIFRpZ3JhbmVzIGhhZCBjb2xsZWN0ZWQgdGhlcmUgZnJvbSBhbGwgcXVhcnRlcnMgZm9yIHRoZSBmb3JtYWwgZGVkaWNhdGlvbiBvZiB0aGUgdGhlYXRyZSB3aGljaCBoZSBoYWQgYnVpbHQsIEx1Y3VsbHVzIGVtcGxveWVkIHRoZW0gZm9yIHRoZSBjb250ZXN0cyBhbmQgc3BlY3RhY2xlcyB3aXRoIHdoaWNoIGhlIGNlbGVicmF0ZWQgaGlzIHZpY3Rvcmllcy4gVGhlIEdyZWVrcyBoZSBzZW50IHRvIHRoZWlyIG5hdGl2ZSBjaXRpZXMsIGdpdmluZyB0aGVtIGFsc28gdGhlIG1lYW5zIHdoZXJld2l0aCB0byBtYWtlIHRoZSBqb3VybmV5LCBhbmQgbGlrZXdpc2UgdGhlIEJhcmJhcmlhbnMgd2hvIGhhZCBiZWVuIGNvbXBlbGxlZCB0byBzZXR0bGUgdGhlcmUuIFRodXMgaXQgY2FtZSB0byBwYXNzIHRoYXQgdGhlIGRpc3NvbHV0aW9uIG9mIG9uZSBjaXR5IHdhcyB0aGUgcmVzdG9yYXRpb24gb2YgbWFueSBvdGhlcnMsIGJ5IHJlYXNvbiBvZiB0aGVpciByZWNvdmVyaW5nIHRoZWlyIG93biBpbmhhYml0YW50cywgYW5kIHRoZXkgYWxsIGxvdmVkIEx1Y3VsbHVzIGFzIHRoZWlyIGJlbmVmYWN0b3IgYW5kIGZvdW5kZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByb3lhbCB0cmVhc3VyZXMgaW4gdGhlIGNpdHkgaGUgdG9vayBpbnRvIGhpcyBvd24gY2hhcmdlLCBidXQgdGhlIGNpdHkgaXRzZWxmIGhlIHR1cm5lZCBvdmVyIHRvIGhpcyBzb2xkaWVycyBmb3IgcGx1bmRlciwgYW5kIGl0IGNvbnRhaW5lZCBlaWdodCB0aG91c2FuZCB0YWxlbnRzIGluIG1vbmV5LCB0b2dldGhlciB3aXRoIHRoZSB1c3VhbCB2YWx1YWJsZXMuIEJlc2lkZXMgdGhpcywgaGUgZ2F2ZSB0byBlYWNoIG1hbiBlaWdodCBodW5kcmVkIGRyYWNobWFzIGZyb20gdGhlIGdlbmVyYWwgc3BvaWxzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uIGxlYXJuaW5nIHRoYXQgbWFueSBkcmFtYXRpYyBhcnRpc3RzIGhhZCBiZWVuIGNhcHR1cmVkIGluIHRoZSBjaXR5LCB3aG9tIFRpZ3JhbmVzIGhhZCBjb2xsZWN0ZWQgdGhlcmUgZnJvbSBhbGwgcXVhcnRlcnMgZm9yIHRoZSBmb3JtYWwgZGVkaWNhdGlvbiBvZiB0aGUgdGhlYXRyZSB3aGljaCBoZSBoYWQgYnVpbHQsIEx1Y3VsbHVzIGVtcGxveWVkIHRoZW0gZm9yIHRoZSBjb250ZXN0cyBhbmQgc3BlY3RhY2xlcyB3aXRoIHdoaWNoIGhlIGNlbGVicmF0ZWQgaGlzIHZpY3Rvcmllcy4gVGhlIEdyZWVrcyBoZSBzZW50IHRvIHRoZWlyIG5hdGl2ZSBjaXRpZXMsIGdpdmluZyB0aGVtIGFsc28gdGhlIG1lYW5zIHdoZXJld2l0aCB0byBtYWtlIHRoZSBqb3VybmV5LCBhbmQgbGlrZXdpc2UgdGhlIEJhcmJhcmlhbnMgd2hvIGhhZCBiZWVuIGNvbXBlbGxlZCB0byBzZXR0bGUgdGhlcmUuIFRodXMgaXQgY2FtZSB0byBwYXNzIHRoYXQgdGhlIGRpc3NvbHV0aW9uIG9mIG9uZSBjaXR5IHdhcyB0aGUgcmVzdG9yYXRpb24gb2YgbWFueSBvdGhlcnMsIGJ5IHJlYXNvbiBvZiB0aGVpciByZWNvdmVyaW5nIHRoZWlyIG93biBpbmhhYml0YW50cywgYW5kIHRoZXkgYWxsIGxvdmVkIEx1Y3VsbHVzIGFzIHRoZWlyIGJlbmVmYWN0b3IgYW5kIGZvdW5kZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGF0ZXZlciBlbHNlIGhlIGRpZCBhbHNvIHByb3NwZXJlZCwgaW4gYSB3YXkgd29ydGh5IG9mIHRoZSBtYW4sIHdobyB3YXMgYW1iaXRpb3VzIG9mIHRoZSBwcmFpc2UgdGhhdCBpcyBjb25zZXF1ZW50IHVwb24gcmlnaHRlb3VzbmVzcyBhbmQgaHVtYW5pdHksIHJhdGhlciB0aGFuIG9mIHRoYXQgd2hpY2ggZm9sbG93cyBtaWxpdGFyeSBzdWNjZXNzZXMuIEZvciB0aGUgbGF0dGVyLCB0aGUgYXJteSBhbHNvIHdhcyBpbiBubyBzbGlnaHQgZGVncmVlLCBhbmQgZm9ydHVuZSBpbiB0aGUgaGlnaGVzdCBkZWdyZWUsIHJlc3BvbnNpYmxlOyBidXQgdGhlIGZvcm1lciB3ZXJlIHRoZSBtYW5pZmVzdGF0aW9ucyBvZiBhIGdlbnRsZSBhbmQgZGlzY2lwbGluZWQgc3Bpcml0LCBhbmQgaW4gdGhlIGV4ZXJjaXNlIG9mIHRoZXNlIHF1YWxpdGllcyBMdWN1bGx1cyBub3csIHdpdGhvdXQgYXBwZWFsIHRvIGFybXMsIHN1YmR1ZWQgdGhlIEJhcmJhcmlhbnMuIFRoZSBraW5ncyBvZiB0aGUgQXJhYnMgY2FtZSB0byBoaW0sIHdpdGggcHJvZmZlcnMgb2YgdGhlaXIgcG9zc2Vzc2lvbnMsIGFuZCB0aGUgU29waGVuaSBqb2luZWQgaGlzIGNhdXNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgR29yZHllbmkgd2VyZSBzbyBhZmZlY3RlZCBieSBoaXMga2luZG5lc3MgdGhhdCB0aGV5IHdlcmUgcmVhZHkgdG8gYWJhbmRvbiB0aGVpciBjaXRpZXMgYW5kIGZvbGxvdyBoaW0gd2l0aCB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4sIGluIHZvbHVudGFyeSBzZXJ2aWNlLiBUaGUgcmVhc29uIGZvciB0aGlzIHdhcyBhcyBmb2xsb3dzLiBaYXJiaWVudXMsIHRoZSBraW5nIG9mIHRoZSBHb3JkeWVuaSwgYXMgaGFzIGJlZW4gc2FpZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gMjEuMiIgdmFsaWQ9InllcyI+eHhpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzZWNyZXRseSBzdGlwdWxhdGVkIHdpdGggTHVjdWxsdXMsIHRocm91Z2ggQXBwaXVzLCBmb3IgYW4gYWxsaWFuY2UsIGJlaW5nIG9wcHJlc3NlZCBieSB0aGUgdHlyYW5ueSBvZiBUaWdyYW5lcy4gSGUgd2FzIGluZm9ybWVkIGFnYWluc3QsIGhvd2V2ZXIsIGFuZCBwdXQgdG8gZGVhdGgsIGFuZCBoaXMgd2lmZSBhbmQgY2hpbGRyZW4gcGVyaXNoZWQgd2l0aCBoaW0sIGJlZm9yZSB0aGUgUm9tYW5zIGVudGVyZWQgQXJtZW5pYS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+THVjdWxsdXMgd2FzIG5vdCB1bm1pbmRmdWwgb2YgYWxsIHRoaXMsIGJ1dCBvbiBlbnRlcmluZyB0aGUgY291bnRyeSBvZiB0aGUgR29yZHllbmksIGFwcG9pbnRlZCBmdW5lcmFsIHJpdGVzIGluIGhvbm91ciBvZiBaYXJiaWVudXMsIGFuZCBhZnRlciBhZG9ybmluZyBhIHB5cmUgd2l0aCByb3lhbCByYWltZW50IGFuZCBnb2xkIGFuZCB3aXRoIHRoZSBzcG9pbHMgdGFrZW4gZnJvbSBUaWdyYW5lcywgc2V0IGZpcmUgdG8gaXQgd2l0aCBoaXMgb3duIGhhbmQsIGFuZCBqb2luZWQgdGhlIGZyaWVuZHMgYW5kIGtpbmRyZWQgb2YgdGhlIG1hbiBpbiBwb3VyaW5nIGxpYmF0aW9ucyB1cG9uIGl0LCBjYWxsaW5nIGhpbSBhIGNvbXJhZGUgb2YgaGlzIGFuZCBhbiBhbGx5IG9mIHRoZSBSb21hbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gb3JkZXJlZCB0aGF0IGEgbW9udW1lbnQgYmUgZXJlY3RlZCB0byBoaXMgbWVtb3J5IGF0IGdyZWF0IGNvc3Q7IGZvciBtYW55IHRyZWFzdXJlcyB3ZXJlIGZvdW5kIGluIHRoZSBwYWxhY2Ugb2YgWmFyYmllbnVzLCBpbmNsdWRpbmcgZ29sZCBhbmQgc2lsdmVyLCBhbmQgdGhyZWUgbWlsbGlvbiBidXNoZWxzIG9mIGdyYWluIHdlcmUgc3RvcmVkIHVwIHRoZXJlLCBzbyB0aGF0IHRoZSBzb2xkaWVycyB3ZXJlIHBsZW50aWZ1bGx5IHN1cHBsaWVkLCBhbmQgTHVjdWxsdXMgd2FzIGFkbWlyZWQgZm9yIG5vdCB0YWtpbmcgYSBzaW5nbGUgZHJhY2htYSBmcm9tIHRoZSBwdWJsaWMgdHJlYXN1cnksIGJ1dCBtYWtpbmcgdGhlIHdhciBwYXkgZm9yIGl0c2VsZi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGF0ZXZlciBlbHNlIGhlIGRpZCBhbHNvIHByb3NwZXJlZCwgaW4gYSB3YXkgd29ydGh5IG9mIHRoZSBtYW4sIHdobyB3YXMgYW1iaXRpb3VzIG9mIHRoZSBwcmFpc2UgdGhhdCBpcyBjb25zZXF1ZW50IHVwb24gcmlnaHRlb3VzbmVzcyBhbmQgaHVtYW5pdHksIHJhdGhlciB0aGFuIG9mIHRoYXQgd2hpY2ggZm9sbG93cyBtaWxpdGFyeSBzdWNjZXNzZXMuIEZvciB0aGUgbGF0dGVyLCB0aGUgYXJteSBhbHNvIHdhcyBpbiBubyBzbGlnaHQgZGVncmVlLCBhbmQgZm9ydHVuZSBpbiB0aGUgaGlnaGVzdCBkZWdyZWUsIHJlc3BvbnNpYmxlOyBidXQgdGhlIGZvcm1lciB3ZXJlIHRoZSBtYW5pZmVzdGF0aW9ucyBvZiBhIGdlbnRsZSBhbmQgZGlzY2lwbGluZWQgc3Bpcml0LCBhbmQgaW4gdGhlIGV4ZXJjaXNlIG9mIHRoZXNlIHF1YWxpdGllcyBMdWN1bGx1cyBub3csIHdpdGhvdXQgYXBwZWFsIHRvIGFybXMsIHN1YmR1ZWQgdGhlIEJhcmJhcmlhbnMuIFRoZSBraW5ncyBvZiB0aGUgQXJhYnMgY2FtZSB0byBoaW0sIHdpdGggcHJvZmZlcnMgb2YgdGhlaXIgcG9zc2Vzc2lvbnMsIGFuZCB0aGUgU29waGVuaSBqb2luZWQgaGlzIGNhdXNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBHb3JkeWVuaSB3ZXJlIHNvIGFmZmVjdGVkIGJ5IGhpcyBraW5kbmVzcyB0aGF0IHRoZXkgd2VyZSByZWFkeSB0byBhYmFuZG9uIHRoZWlyIGNpdGllcyBhbmQgZm9sbG93IGhpbSB3aXRoIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiwgaW4gdm9sdW50YXJ5IHNlcnZpY2UuIFRoZSByZWFzb24gZm9yIHRoaXMgd2FzIGFzIGZvbGxvd3MuIFphcmJpZW51cywgdGhlIGtpbmcgb2YgdGhlIEdvcmR5ZW5pLCBhcyBoYXMgYmVlbiBzYWlkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gMjEuMiIgdmFsaWQ9InllcyI+eHhpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzZWNyZXRseSBzdGlwdWxhdGVkIHdpdGggTHVjdWxsdXMsIHRocm91Z2ggQXBwaXVzLCBmb3IgYW4gYWxsaWFuY2UsIGJlaW5nIG9wcHJlc3NlZCBieSB0aGUgdHlyYW5ueSBvZiBUaWdyYW5lcy4gSGUgd2FzIGluZm9ybWVkIGFnYWluc3QsIGhvd2V2ZXIsIGFuZCBwdXQgdG8gZGVhdGgsIGFuZCBoaXMgd2lmZSBhbmQgY2hpbGRyZW4gcGVyaXNoZWQgd2l0aCBoaW0sIGJlZm9yZSB0aGUgUm9tYW5zIGVudGVyZWQgQXJtZW5pYS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDIxLjIiIHZhbGlkPSJ5ZXMiPnh4aS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIHdhcyBub3QgdW5taW5kZnVsIG9mIGFsbCB0aGlzLCBidXQgb24gZW50ZXJpbmcgdGhlIGNvdW50cnkgb2YgdGhlIEdvcmR5ZW5pLCBhcHBvaW50ZWQgZnVuZXJhbCByaXRlcyBpbiBob25vdXIgb2YgWmFyYmllbnVzLCBhbmQgYWZ0ZXIgYWRvcm5pbmcgYSBweXJlIHdpdGggcm95YWwgcmFpbWVudCBhbmQgZ29sZCBhbmQgd2l0aCB0aGUgc3BvaWxzIHRha2VuIGZyb20gVGlncmFuZXMsIHNldCBmaXJlIHRvIGl0IHdpdGggaGlzIG93biBoYW5kLCBhbmQgam9pbmVkIHRoZSBmcmllbmRzIGFuZCBraW5kcmVkIG9mIHRoZSBtYW4gaW4gcG91cmluZyBsaWJhdGlvbnMgdXBvbiBpdCwgY2FsbGluZyBoaW0gYSBjb21yYWRlIG9mIGhpcyBhbmQgYW4gYWxseSBvZiB0aGUgUm9tYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gb3JkZXJlZCB0aGF0IGEgbW9udW1lbnQgYmUgZXJlY3RlZCB0byBoaXMgbWVtb3J5IGF0IGdyZWF0IGNvc3Q7IGZvciBtYW55IHRyZWFzdXJlcyB3ZXJlIGZvdW5kIGluIHRoZSBwYWxhY2Ugb2YgWmFyYmllbnVzLCBpbmNsdWRpbmcgZ29sZCBhbmQgc2lsdmVyLCBhbmQgdGhyZWUgbWlsbGlvbiBidXNoZWxzIG9mIGdyYWluIHdlcmUgc3RvcmVkIHVwIHRoZXJlLCBzbyB0aGF0IHRoZSBzb2xkaWVycyB3ZXJlIHBsZW50aWZ1bGx5IHN1cHBsaWVkLCBhbmQgTHVjdWxsdXMgd2FzIGFkbWlyZWQgZm9yIG5vdCB0YWtpbmcgYSBzaW5nbGUgZHJhY2htYSBmcm9tIHRoZSBwdWJsaWMgdHJlYXN1cnksIGJ1dCBtYWtpbmcgdGhlIHdhciBwYXkgZm9yIGl0c2VsZi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSBoZSByZWNlaXZlZCBhbiBlbWJhc3N5IGZyb20gdGhlIGtpbmcgb2YgdGhlIFBhcnRoaWFucyBhbHNvLCBpbnZpdGluZyBoaW0gaW50byBmcmllbmRseSBhbGxpYW5jZS4gVGhpcyB3YXMgYWdyZWVhYmxlIHRvIEx1Y3VsbHVzLCBhbmQgaW4gaGlzIHR1cm4gaGUgc2VudCBhbWJhc3NhZG9ycyB0byB0aGUgUGFydGhpYW4sIGJ1dCB0aGV5IGRpc2NvdmVyZWQgdGhhdCBoZSB3YXMgcGxheWluZyBhIGRvdWJsZSBnYW1lLCBhbmQgc2VjcmV0bHkgYXNraW5nIGZvciBNZXNvcG90YW1pYSBhcyByZXdhcmQgZm9yIGFuIGFsbGlhbmNlIHdpdGggVGlncmFuZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIEx1Y3VsbHVzIHdhcyBhcHByaXNlZCBvZiB0aGlzLCBoZSBkZXRlcm1pbmVkIHRvIGlnbm9yZSBUaWdyYW5lcyBhbmQgTWl0aHJpZGF0ZXMgYXMgZXhoYXVzdGVkIGFudGFnb25pc3RzLCBhbmQgdG8gbWFrZSB0cmlhbCBvZiB0aGUgUGFydGhpYW4gcG93ZXIgYnkgbWFyY2hpbmcgYWdhaW5zdCB0aGVtLCB0aGlua2luZyBpdCBhIGdsb3Jpb3VzIHRoaW5nLCBpbiBhIHNpbmdsZSBpbXBldHVvdXMgb25zZXQgb2Ygd2FyLCB0byB0aHJvdywgbGlrZSBhbiBhdGhsZXRlLCB0aHJlZSBraW5ncyBpbiBzdWNjZXNzaW9uLCBhbmQgdG8gbWFrZSBoaXMgd2F5LCB1bnZhbnF1aXNoZWQgYW5kIHZpY3RvcmlvdXMsIHRocm91Z2ggdGhyZWUgb2YgdGhlIGdyZWF0ZXN0IGVtcGlyZXMgdW5kZXIgdGhlIHN1bi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSBoZSByZWNlaXZlZCBhbiBlbWJhc3N5IGZyb20gdGhlIGtpbmcgb2YgdGhlIFBhcnRoaWFucyBhbHNvLCBpbnZpdGluZyBoaW0gaW50byBmcmllbmRseSBhbGxpYW5jZS4gVGhpcyB3YXMgYWdyZWVhYmxlIHRvIEx1Y3VsbHVzLCBhbmQgaW4gaGlzIHR1cm4gaGUgc2VudCBhbWJhc3NhZG9ycyB0byB0aGUgUGFydGhpYW4sIGJ1dCB0aGV5IGRpc2NvdmVyZWQgdGhhdCBoZSB3YXMgcGxheWluZyBhIGRvdWJsZSBnYW1lLCBhbmQgc2VjcmV0bHkgYXNraW5nIGZvciBNZXNvcG90YW1pYSBhcyByZXdhcmQgZm9yIGFuIGFsbGlhbmNlIHdpdGggVGlncmFuZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIEx1Y3VsbHVzIHdhcyBhcHByaXNlZCBvZiB0aGlzLCBoZSBkZXRlcm1pbmVkIHRvIGlnbm9yZSBUaWdyYW5lcyBhbmQgTWl0aHJpZGF0ZXMgYXMgZXhoYXVzdGVkIGFudGFnb25pc3RzLCBhbmQgdG8gbWFrZSB0cmlhbCBvZiB0aGUgUGFydGhpYW4gcG93ZXIgYnkgbWFyY2hpbmcgYWdhaW5zdCB0aGVtLCB0aGlua2luZyBpdCBhIGdsb3Jpb3VzIHRoaW5nLCBpbiBhIHNpbmdsZSBpbXBldHVvdXMgb25zZXQgb2Ygd2FyLCB0byB0aHJvdywgbGlrZSBhbiBhdGhsZXRlLCB0aHJlZSBraW5ncyBpbiBzdWNjZXNzaW9uLCBhbmQgdG8gbWFrZSBoaXMgd2F5LCB1bnZhbnF1aXNoZWQgYW5kIHZpY3RvcmlvdXMsIHRocm91Z2ggdGhyZWUgb2YgdGhlIGdyZWF0ZXN0IGVtcGlyZXMgdW5kZXIgdGhlIHN1bi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHkgaGUgc2VudCBvcmRlcnMgdG8gU29ybmF0aXVzIGFuZCBoaXMgZmVsbG93IGNvbW1hbmRlcnMgaW4gUG9udHVzIHRvIGJyaW5nIHRoZSBhcm15IHRoZXJlIHRvIGhpbSwgYXMgaGUgaW50ZW5kZWQgdG8gcHJvY2VlZCBlYXN0d2FyZCBmcm9tIEdvcmR5ZW7DqS4gVGhlc2Ugb2ZmaWNlcnMgaGFkIGFscmVhZHkgZm91bmQgdGhlaXIgc29sZGllcnMgdW5tYW5hZ2VhYmxlIGFuZCBkaXNvYmVkaWVudCwgYnV0IG5vdyB0aGV5IGRpc2NvdmVyZWQgdGhhdCB0aGV5IHdlcmUgdXR0ZXJseSBiZXlvbmQgY29udHJvbCwgYmVpbmcgdW5hYmxlIHRvIG1vdmUgdGhlbSBieSBhbnkgbWFubmVyIG9mIHBlcnN1YXNpb24gb3IgY29tcHVsc2lvbi4gTmF5LCB0aGV5IHJvdW5kbHkgc3dvcmUgdGhhdCB0aGV5IHdvdWxkIG5vdCBldmVuIHN0YXkgd2hlcmUgdGhleSB3ZXJlLCBidXQgd291bGQgZ28gb2ZmIGFuZCBsZWF2ZSBQb250dXMgdW5kZWZlbmRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBuZXdzIG9mIHRoaXMgd2FzIGJyb3VnaHQgdG8gTHVjdWxsdXMsIGl0IGRlbW9yYWxpc2VkIGhpcyBzb2xkaWVycyB0aGVyZSBhbHNvLiBUaGVpciB3ZWFsdGggYW5kIGx1eHVyaW91cyBsaWZlIGhhZCBhbHJlYWR5IG1hZGUgdGhlbSBhdmVyc2UgdG8gbWlsaXRhcnkgc2VydmljZSBhbmQgZGVzaXJvdXMgb2YgbGVpc3VyZSwgYW5kIHdoZW4gdGhleSBoZWFyZCBvZiB0aGUgYm9sZCB3b3JkcyBvZiB0aGVpciBjb21yYWRlcyBpbiBQb250dXMsIHRoZXkgY2FsbGVkIHRoZW0gYnJhdmUgbWVuLCBhbmQgc2FpZCB0aGVpciBleGFtcGxlIG11c3QgYmUgZm9sbG93ZWQgaW4gR29yZHllbsOpLCBmb3IgdGhlaXIgbWFueSBhY2hpZXZlbWVudHMgZW50aXRsZWQgdGhlbSB0byByZXNwaXRlIGZyb20gdG9pbCBhbmQgZnJlZWRvbSBmcm9tIGRhbmdlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5IGhlIHNlbnQgb3JkZXJzIHRvIFNvcm5hdGl1cyBhbmQgaGlzIGZlbGxvdyBjb21tYW5kZXJzIGluIFBvbnR1cyB0byBicmluZyB0aGUgYXJteSB0aGVyZSB0byBoaW0sIGFzIGhlIGludGVuZGVkIHRvIHByb2NlZWQgZWFzdHdhcmQgZnJvbSBHb3JkeWVuw6kuIFRoZXNlIG9mZmljZXJzIGhhZCBhbHJlYWR5IGZvdW5kIHRoZWlyIHNvbGRpZXJzIHVubWFuYWdlYWJsZSBhbmQgZGlzb2JlZGllbnQsIGJ1dCBub3cgdGhleSBkaXNjb3ZlcmVkIHRoYXQgdGhleSB3ZXJlIHV0dGVybHkgYmV5b25kIGNvbnRyb2wsIGJlaW5nIHVuYWJsZSB0byBtb3ZlIHRoZW0gYnkgYW55IG1hbm5lciBvZiBwZXJzdWFzaW9uIG9yIGNvbXB1bHNpb24uIE5heSwgdGhleSByb3VuZGx5IHN3b3JlIHRoYXQgdGhleSB3b3VsZCBub3QgZXZlbiBzdGF5IHdoZXJlIHRoZXkgd2VyZSwgYnV0IHdvdWxkIGdvIG9mZiBhbmQgbGVhdmUgUG9udHVzIHVuZGVmZW5kZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gbmV3cyBvZiB0aGlzIHdhcyBicm91Z2h0IHRvIEx1Y3VsbHVzLCBpdCBkZW1vcmFsaXNlZCBoaXMgc29sZGllcnMgdGhlcmUgYWxzby4gVGhlaXIgd2VhbHRoIGFuZCBsdXh1cmlvdXMgbGlmZSBoYWQgYWxyZWFkeSBtYWRlIHRoZW0gYXZlcnNlIHRvIG1pbGl0YXJ5IHNlcnZpY2UgYW5kIGRlc2lyb3VzIG9mIGxlaXN1cmUsIGFuZCB3aGVuIHRoZXkgaGVhcmQgb2YgdGhlIGJvbGQgd29yZHMgb2YgdGhlaXIgY29tcmFkZXMgaW4gUG9udHVzLCB0aGV5IGNhbGxlZCB0aGVtIGJyYXZlIG1lbiwgYW5kIHNhaWQgdGhlaXIgZXhhbXBsZSBtdXN0IGJlIGZvbGxvd2VkIGluIEdvcmR5ZW7DqSwgZm9yIHRoZWlyIG1hbnkgYWNoaWV2ZW1lbnRzIGVudGl0bGVkIHRoZW0gdG8gcmVzcGl0ZSBmcm9tIHRvaWwgYW5kIGZyZWVkb20gZnJvbSBkYW5nZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggc3BlZWNoZXMsIGFuZCBldmVuIHdvcnNlIHRoYW4gdGhlc2UsIGNvbWluZyB0byB0aGUgZWFycyBvZiBMdWN1bGx1cywgaGUgZ2F2ZSB1cCBoaXMgZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBQYXJ0aGlhbnMsIGFuZCBtYXJjaGVkIG9uY2UgbW9yZSBhZ2FpbnN0IFRpZ3JhbmVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjY4IEIuQy48L25vdGU+IGl0IGJlaW5nIG5vdyB0aGUgaGVpZ2h0IG9mIHN1bW1lci4gQW5kIHlldCwgYWZ0ZXIgY3Jvc3NpbmcgdGhlIFRhdXJ1cywgaGUgd2FzIGRpc2NvdXJhZ2VkIHRvIGZpbmQgdGhlIHBsYWlucyBzdGlsbCBjb3ZlcmVkIHdpdGggdW5yaXBlIGdyYWluLCBzbyBtdWNoIGxhdGVyIGFyZSB0aGUgc2Vhc29ucyB0aGVyZSwgb3dpbmcgdG8gdGhlIGNvb2xuZXNzIG9mIHRoZSBhdG1vc3BoZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSBkZXNjZW5kZWQgZnJvbSB0aGUgbW91bnRhaW5zLCByb3V0ZWQgdGhlIEFybWVuaWFucyB3aG8gdHdpY2Ugb3IgdGhyaWNlIHZlbnR1cmVkIHRvIGF0dGFjayBoaW0sIGFuZCB0aGVuIHBsdW5kZXJlZCB0aGVpciB2aWxsYWdlcyB3aXRob3V0IGZlYXIsIGFuZCwgYnkgdGFraW5nIGF3YXkgdGhlIGdyYWluIHdoaWNoIGhhZCBiZWVuIHN0b3JlZCB1cCBmb3IgVGlncmFuZXMsIHJlZHVjZWQgaGlzIGVuZW15IHRvIHRoZSBzdHJhaXRzIHdoaWNoIGhlIGhhZCBiZWVuIGZlYXJpbmcgZm9yIGhpbXNlbGYuIFRoZW4gaGUgY2hhbGxlbmdlZCB0aGVtIHRvIGJhdHRsZSBieSBlbmNvbXBhc3NpbmcgdGhlaXIgY2FtcCB3aXRoIGEgbW9hdCwgYW5kIGJ5IHJhdmFnaW5nIHRoZWlyIHRlcnJpdG9yeSBiZWZvcmUgdGhlaXIgZXllczsgYnV0IHRoaXMgZGlkIG5vdCBtb3ZlIHRoZW0sIHNvIG9mdGVuIGhhZCB0aGV5IGJlZW4gZGVmZWF0ZWQuIEhlIHRoZXJlZm9yZSBicm9rZSBjYW1wIGFuZCBtYXJjaGVkIGFnYWluc3QgQXJ0YXhhcywgdGhlIHJveWFsIHJlc2lkZW5jZSBvZiBUaWdyYW5lcywgd2hlcmUgd2VyZSBoaXMgd2l2ZXMgYW5kIHlvdW5nIGNoaWxkcmVuLCB0aGlua2luZyB0aGF0IFRpZ3JhbmVzIHdvdWxkIG5vdCBnaXZlIHRoZXNlIHVwIHdpdGhvdXQgZmlnaHRpbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBzcGVlY2hlcywgYW5kIGV2ZW4gd29yc2UgdGhhbiB0aGVzZSwgY29taW5nIHRvIHRoZSBlYXJzIG9mIEx1Y3VsbHVzLCBoZSBnYXZlIHVwIGhpcyBleHBlZGl0aW9uIGFnYWluc3QgdGhlIFBhcnRoaWFucywgYW5kIG1hcmNoZWQgb25jZSBtb3JlIGFnYWluc3QgVGlncmFuZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj42OCBCLkMuPC9ub3RlPiBpdCBiZWluZyBub3cgdGhlIGhlaWdodCBvZiBzdW1tZXIuIEFuZCB5ZXQsIGFmdGVyIGNyb3NzaW5nIHRoZSBUYXVydXMsIGhlIHdhcyBkaXNjb3VyYWdlZCB0byBmaW5kIHRoZSBwbGFpbnMgc3RpbGwgY292ZXJlZCB3aXRoIHVucmlwZSBncmFpbiwgc28gbXVjaCBsYXRlciBhcmUgdGhlIHNlYXNvbnMgdGhlcmUsIG93aW5nIHRvIHRoZSBjb29sbmVzcyBvZiB0aGUgYXRtb3NwaGVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIGRlc2NlbmRlZCBmcm9tIHRoZSBtb3VudGFpbnMsIHJvdXRlZCB0aGUgQXJtZW5pYW5zIHdobyB0d2ljZSBvciB0aHJpY2UgdmVudHVyZWQgdG8gYXR0YWNrIGhpbSwgYW5kIHRoZW4gcGx1bmRlcmVkIHRoZWlyIHZpbGxhZ2VzIHdpdGhvdXQgZmVhciwgYW5kLCBieSB0YWtpbmcgYXdheSB0aGUgZ3JhaW4gd2hpY2ggaGFkIGJlZW4gc3RvcmVkIHVwIGZvciBUaWdyYW5lcywgcmVkdWNlZCBoaXMgZW5lbXkgdG8gdGhlIHN0cmFpdHMgd2hpY2ggaGUgaGFkIGJlZW4gZmVhcmluZyBmb3IgaGltc2VsZi4gVGhlbiBoZSBjaGFsbGVuZ2VkIHRoZW0gdG8gYmF0dGxlIGJ5IGVuY29tcGFzc2luZyB0aGVpciBjYW1wIHdpdGggYSBtb2F0LCBhbmQgYnkgcmF2YWdpbmcgdGhlaXIgdGVycml0b3J5IGJlZm9yZSB0aGVpciBleWVzOyBidXQgdGhpcyBkaWQgbm90IG1vdmUgdGhlbSwgc28gb2Z0ZW4gaGFkIHRoZXkgYmVlbiBkZWZlYXRlZC4gSGUgdGhlcmVmb3JlIGJyb2tlIGNhbXAgYW5kIG1hcmNoZWQgYWdhaW5zdCBBcnRheGFzLCB0aGUgcm95YWwgcmVzaWRlbmNlIG9mIFRpZ3JhbmVzLCB3aGVyZSB3ZXJlIGhpcyB3aXZlcyBhbmQgeW91bmcgY2hpbGRyZW4sIHRoaW5raW5nIHRoYXQgVGlncmFuZXMgd291bGQgbm90IGdpdmUgdGhlc2UgdXAgd2l0aG91dCBmaWdodGluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2FpZCB0aGF0IEhhbm5pYmFsIHRoZSBDYXJ0aGFnaW5pYW4sIGFmdGVyIEFudGlvY2h1cyBoYWQgYmVlbiBjb25xdWVyZWQgYnkgdGhlIFJvbWFucywgbGVmdCBoaW0gYW5kIHdlbnQgdG8gQXJ0YXhhcyB0aGUgQXJtZW5pYW4sIHRvIHdob20gaGUgZ2F2ZSBtYW55IGV4Y2VsbGVudCBzdWdnZXN0aW9ucyBhbmQgaW5zdHJ1Y3Rpb25zLiBGb3IgaW5zdGFuY2UsIG9ic2VydmluZyB0aGF0IGEgc2VjdGlvbiBvZiB0aGUgY291bnRyeSB3aGljaCBoYWQgdGhlIGdyZWF0ZXN0IG5hdHVyYWwgYWR2YW50YWdlcyBhbmQgYXR0cmFjdGlvbnMgd2FzIGx5aW5nIGlkbGUgYW5kIG5lZ2xlY3RlZCwgaGUgZHJldyB1cCBhIHBsYW4gZm9yIGEgY2l0eSB0aGVyZSwgYW5kIHRoZW4gYnJvdWdodCBBcnRheGFzIHRvIHRoZSBwbGFjZSBhbmQgc2hvd2VkIGhpbSBpdHMgcG9zc2liaWxpdGllcywgYW5kIHVyZ2VkIGhpbSB0byB1bmRlcnRha2UgdGhlIGJ1aWxkaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUga2luZyB3YXMgZGVsaWdodGVkLCBhbmQgYmVnZ2VkIEhhbm5pYmFsIHRvIHN1cGVyaW50ZW5kIHRoZSB3b3JrIGhpbXNlbGYsIHdoZXJldXBvbiBhIHZlcnkgZ3JlYXQgYW5kIGJlYXV0aWZ1bCBjaXR5IGFyb3NlIHRoZXJlLCB3aGljaCB3YXMgbmFtZWQgYWZ0ZXIgdGhlIGtpbmcsIGFuZCBwcm9jbGFpbWVkIHRoZSBjYXBpdGFsIG9mIEFybWVuaWEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdGhhdCBIYW5uaWJhbCB0aGUgQ2FydGhhZ2luaWFuLCBhZnRlciBBbnRpb2NodXMgaGFkIGJlZW4gY29ucXVlcmVkIGJ5IHRoZSBSb21hbnMsIGxlZnQgaGltIGFuZCB3ZW50IHRvIEFydGF4YXMgdGhlIEFybWVuaWFuLCB0byB3aG9tIGhlIGdhdmUgbWFueSBleGNlbGxlbnQgc3VnZ2VzdGlvbnMgYW5kIGluc3RydWN0aW9ucy4gRm9yIGluc3RhbmNlLCBvYnNlcnZpbmcgdGhhdCBhIHNlY3Rpb24gb2YgdGhlIGNvdW50cnkgd2hpY2ggaGFkIHRoZSBncmVhdGVzdCBuYXR1cmFsIGFkdmFudGFnZXMgYW5kIGF0dHJhY3Rpb25zIHdhcyBseWluZyBpZGxlIGFuZCBuZWdsZWN0ZWQsIGhlIGRyZXcgdXAgYSBwbGFuIGZvciBhIGNpdHkgdGhlcmUsIGFuZCB0aGVuIGJyb3VnaHQgQXJ0YXhhcyB0byB0aGUgcGxhY2UgYW5kIHNob3dlZCBoaW0gaXRzIHBvc3NpYmlsaXRpZXMsIGFuZCB1cmdlZCBoaW0gdG8gdW5kZXJ0YWtlIHRoZSBidWlsZGluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBraW5nIHdhcyBkZWxpZ2h0ZWQsIGFuZCBiZWdnZWQgSGFubmliYWwgdG8gc3VwZXJpbnRlbmQgdGhlIHdvcmsgaGltc2VsZiwgd2hlcmV1cG9uIGEgdmVyeSBncmVhdCBhbmQgYmVhdXRpZnVsIGNpdHkgYXJvc2UgdGhlcmUsIHdoaWNoIHdhcyBuYW1lZCBhZnRlciB0aGUga2luZywgYW5kIHByb2NsYWltZWQgdGhlIGNhcGl0YWwgb2YgQXJtZW5pYS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVuIEx1Y3VsbHVzIG1hcmNoZWQgYWdhaW5zdCB0aGlzIGNpdHksIFRpZ3JhbmVzIGNvdWxkIG5vdCBzdWZmZXIgaXQgcXVpZXRseSwgYnV0IHB1dCBoaW1zZWxmIGF0IHRoZSBoZWFkIG9mIGhpcyBmb3JjZXMsIGFuZCBvbiB0aGUgZm91cnRoIGRheSBlbmNhbXBlZCBvdmVyIGFnYWluc3QgdGhlIFJvbWFucywga2VlcGluZyB0aGUgcml2ZXIgQXJzYW5pYSBiZXR3ZWVuIGhpbXNlbGYgYW5kIHRoZW0sIHdoaWNoIHRoZXkgbXVzdCBvZiBuZWNlc3NpdHkgY3Jvc3Mgb24gdGhlaXIgd2F5IHRvIEFydGF4YXRhLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJldXBvbiBMdWN1bGx1cyBzYWNyaWZpY2VkIHRvIHRoZSBnb2RzLCBpbiBmdWxsIGFzc3VyYW5jZSB0aGF0IHRoZSB2aWN0b3J5IHdhcyBhbHJlYWR5IGhpcywgYW5kIHRoZW4gY3Jvc3NlZCB0aGUgcml2ZXIgd2l0aCB0d2VsdmUgY29ob3J0cyBpbiB0aGUgdmFuLCBhbmQgdGhlIHJlc3QgZGlzcG9zZWQgc28gYXMgdG8gcHJldmVudCB0aGUgZW5lbXkgZnJvbSBjbG9zaW5nIGluIHVwb24gaGlzIGZsYW5rcy4gRm9yIGxhcmdlIGJvZGllcyBvZiBob3JzZW1lbiBhbmQgcGlja2VkIHNvbGRpZXJzIGNvbmZyb250ZWQgaGltLCBhbmQgdGhlc2Ugd2VyZSBjb3ZlcmVkIGJ5IE1hcmRpYW4gbW91bnRlZCBhcmNoZXJzIGFuZCBJYmVyaWFuIGxhbmNlcnMsIG9uIHdob20gVGlncmFuZXMgcmVsaWVkIGJleW9uZCBhbnkgb3RoZXIgbWVyY2VuYXJpZXMsIGRlZW1pbmcgdGhlbSB0aGUgbW9zdCB3YXJsaWtlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGV5IGRpZCBub3Qgc2hpbmUgaW4gYWN0aW9uLCBidXQgYWZ0ZXIgYSBzbGlnaHQgc2tpcm1pc2ggd2l0aCB0aGUgUm9tYW4gY2F2YWxyeSwgZ2F2ZSB3YXkgYmVmb3JlIHRoZSBhZHZhbmNpbmcgaW5mYW50cnksIHNjYXR0ZXJlZCB0byByaWdodCBhbmQgbGVmdCBpbiBmbGlnaHQsIGFuZCBkcmV3IGFmdGVyIHRoZW0gdGhlIGNhdmFscnkgaW4gcHVyc3VpdC4gT24gdGhlIGRpc3BlcnNpb24gb2YgdGhlc2UgdHJvb3BzLCBUaWdyYW5lcyByb2RlIG91dCBhdCB0aGUgaGVhZCBvZiBoaXMgY2F2YWxyeSwgYW5kIHdoZW4gTHVjdWxsdXMgc2F3IHRoZWlyIHNwbGVuZG91ciBhbmQgdGhlaXIgbnVtYmVycyBoZSB3YXMgYWZyYWlkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5IZSB0aGVyZWZvcmUgcmVjYWxsZWQgaGlzIGNhdmFscnkgZnJvbSB0aGVpciBwdXJzdWl0IG9mIHRoZSBmbHlpbmcgZW5lbXksIGFuZCB0YWtpbmcgdGhlIGxlYWQgb2YgaGlzIHRyb29wcyBpbiBwZXJzb24sIHNldCB1cG9uIHRoZSBBdHJvcGF0ZW5pLCB3aG8gd2VyZSBzdGF0aW9uZWQgb3Bwb3NpdGUgaGltIHdpdGggdGhlIG1hZ25hdGVzIG9mIHRoZSBraW5nJ3MgZm9sbG93aW5nLCBhbmQgYmVmb3JlIGNvbWluZyB0byBjbG9zZSBxdWFydGVycywgc2VudCB0aGVtIG9mZiBpbiBwYW5pYyBmbGlnaHQuIE9mIHRocmVlIGtpbmdzIHdobyB0b2dldGhlciBjb25mcm9udGVkIHRoZSBSb21hbnMsIE1pdGhyaWRhdGVzIG9mIFBvbnR1cyBzZWVtcyB0byBoYXZlIGZsZWQgbW9zdCBkaXNncmFjZWZ1bGx5LCBmb3IgaGUgY291bGQgbm90IGVuZHVyZSBldmVuIHRoZWlyIHNob3V0aW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcHVyc3VpdCB3YXMgbG9uZyBhbmQgbGFzdGVkIHRocm91Z2ggdGhlIHdob2xlIG5pZ2h0LCBhbmQgdGhlIFJvbWFucyB3ZXJlIHdvcm4gb3V0LCBub3Qgb25seSB3aXRoIGtpbGxpbmcgdGhlaXIgZW5lbWllcywgYnV0IGFsc28gd2l0aCB0YWtpbmcgcHJpc29uZXJzIGFuZCBnZXR0aW5nIGFsbCBzb3J0cyBvZiBib290eS4gTGl2eSBzYXlzIHRoYXQgaW4gdGhlIGZvcm1lciBiYXR0bGUgYSBncmVhdGVyIG51bWJlciBvZiB0aGUgZW5lbXksIGJ1dCBpbiB0aGlzIG1vcmUgbWVuIG9mIGhpZ2ggc3RhdGlvbiB3ZXJlIHNsYWluIGFuZCB0YWtlbiBwcmlzb25lcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJldXBvbiBMdWN1bGx1cyBzYWNyaWZpY2VkIHRvIHRoZSBnb2RzLCBpbiBmdWxsIGFzc3VyYW5jZSB0aGF0IHRoZSB2aWN0b3J5IHdhcyBhbHJlYWR5IGhpcywgYW5kIHRoZW4gY3Jvc3NlZCB0aGUgcml2ZXIgd2l0aCB0d2VsdmUgY29ob3J0cyBpbiB0aGUgdmFuLCBhbmQgdGhlIHJlc3QgZGlzcG9zZWQgc28gYXMgdG8gcHJldmVudCB0aGUgZW5lbXkgZnJvbSBjbG9zaW5nIGluIHVwb24gaGlzIGZsYW5rcy4gRm9yIGxhcmdlIGJvZGllcyBvZiBob3JzZW1lbiBhbmQgcGlja2VkIHNvbGRpZXJzIGNvbmZyb250ZWQgaGltLCBhbmQgdGhlc2Ugd2VyZSBjb3ZlcmVkIGJ5IE1hcmRpYW4gbW91bnRlZCBhcmNoZXJzIGFuZCBJYmVyaWFuIGxhbmNlcnMsIG9uIHdob20gVGlncmFuZXMgcmVsaWVkIGJleW9uZCBhbnkgb3RoZXIgbWVyY2VuYXJpZXMsIGRlZW1pbmcgdGhlbSB0aGUgbW9zdCB3YXJsaWtlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZXkgZGlkIG5vdCBzaGluZSBpbiBhY3Rpb24sIGJ1dCBhZnRlciBhIHNsaWdodCBza2lybWlzaCB3aXRoIHRoZSBSb21hbiBjYXZhbHJ5LCBnYXZlIHdheSBiZWZvcmUgdGhlIGFkdmFuY2luZyBpbmZhbnRyeSwgc2NhdHRlcmVkIHRvIHJpZ2h0IGFuZCBsZWZ0IGluIGZsaWdodCwgYW5kIGRyZXcgYWZ0ZXIgdGhlbSB0aGUgY2F2YWxyeSBpbiBwdXJzdWl0LiBPbiB0aGUgZGlzcGVyc2lvbiBvZiB0aGVzZSB0cm9vcHMsIFRpZ3JhbmVzIHJvZGUgb3V0IGF0IHRoZSBoZWFkIG9mIGhpcyBjYXZhbHJ5LCBhbmQgd2hlbiBMdWN1bGx1cyBzYXcgdGhlaXIgc3BsZW5kb3VyIGFuZCB0aGVpciBudW1iZXJzIGhlIHdhcyBhZnJhaWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZXJlZm9yZSByZWNhbGxlZCBoaXMgY2F2YWxyeSBmcm9tIHRoZWlyIHB1cnN1aXQgb2YgdGhlIGZseWluZyBlbmVteSwgYW5kIHRha2luZyB0aGUgbGVhZCBvZiBoaXMgdHJvb3BzIGluIHBlcnNvbiwgc2V0IHVwb24gdGhlIEF0cm9wYXRlbmksIHdobyB3ZXJlIHN0YXRpb25lZCBvcHBvc2l0ZSBoaW0gd2l0aCB0aGUgbWFnbmF0ZXMgb2YgdGhlIGtpbmcncyBmb2xsb3dpbmcsIGFuZCBiZWZvcmUgY29taW5nIHRvIGNsb3NlIHF1YXJ0ZXJzLCBzZW50IHRoZW0gb2ZmIGluIHBhbmljIGZsaWdodC4gT2YgdGhyZWUga2luZ3Mgd2hvIHRvZ2V0aGVyIGNvbmZyb250ZWQgdGhlIFJvbWFucywgTWl0aHJpZGF0ZXMgb2YgUG9udHVzIHNlZW1zIHRvIGhhdmUgZmxlZCBtb3N0IGRpc2dyYWNlZnVsbHksIGZvciBoZSBjb3VsZCBub3QgZW5kdXJlIGV2ZW4gdGhlaXIgc2hvdXRpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwdXJzdWl0IHdhcyBsb25nIGFuZCBsYXN0ZWQgdGhyb3VnaCB0aGUgd2hvbGUgbmlnaHQsIGFuZCB0aGUgUm9tYW5zIHdlcmUgd29ybiBvdXQsIG5vdCBvbmx5IHdpdGgga2lsbGluZyB0aGVpciBlbmVtaWVzLCBidXQgYWxzbyB3aXRoIHRha2luZyBwcmlzb25lcnMgYW5kIGdldHRpbmcgYWxsIHNvcnRzIG9mIGJvb3R5LiBMaXZ5IHNheXMgdGhhdCBpbiB0aGUgZm9ybWVyIGJhdHRsZSBhIGdyZWF0ZXIgbnVtYmVyIG9mIHRoZSBlbmVteSwgYnV0IGluIHRoaXMgbW9yZSBtZW4gb2YgaGlnaCBzdGF0aW9uIHdlcmUgc2xhaW4gYW5kIHRha2VuIHByaXNvbmVycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RWxhdGVkIGFuZCBlbWJvbGRlbmVkIGJ5IHRoaXMgdmljdG9yeSwgTHVjdWxsdXMgcHVycG9zZWQgdG8gYWR2YW5jZSBmdXJ0aGVyIGludG8gdGhlIGludGVyaW9yIGFuZCBzdWJkdWUgdGhlIEJhcmJhcmlhbiByZWFsbSB1dHRlcmx5LiBCdXQsIGNvbnRyYXJ5IHRvIHdoYXQgbWlnaHQgaGF2ZSBiZWVuIGV4cGVjdGVkIGF0IHRoZSB0aW1lIG9mIHRoZSBhdXR1bW5hbCBlcXVpbm94LCBzZXZlcmUgd2ludGVyIHdlYXRoZXIgd2FzIGVuY291bnRlcmVkLCB3aGljaCBnZW5lcmFsbHkgY292ZXJlZCB0aGUgZ3JvdW5kIHdpdGggc25vdywgYW5kIGV2ZW4gd2hlbiB0aGUgc2t5IHdhcyBjbGVhciBwcm9kdWNlZCBob2FyIGZyb3N0IGFuZCBpY2UsIG93aW5nIHRvIHdoaWNoIHRoZSBob3JzZXMgY291bGQgbm90IHdlbGwgZHJpbmsgb2YgdGhlIHJpdmVycywgc28gZXhjZXNzaXZlIHdhcyB0aGUgY29sZCwgbm9yIGNvdWxkIHRoZXkgZWFzaWx5IGNyb3NzIHRoZW0sIHNpbmNlIHRoZSBpY2UgYnJva2UsIGFuZCBjdXQgdGhlIGhvcnNlcycgc2luZXdzIHdpdGggaXRzIGphZ2dlZCBlZGdlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TW9zdCBvZiB0aGUgY291bnRyeSB3YXMgdGhpY2tseSBzaGFkZWQsIGZ1bGwgb2YgbmFycm93IGRlZmlsZXMsIGFuZCBtYXJzaHksIHNvIHRoYXQgaXQga2VwdCB0aGUgc29sZGllcnMgY29udGludWFsbHkgd2V0OyB0aGV5IHdlcmUgY292ZXJlZCB3aXRoIHNub3cgd2hpbGUgdGhleSBtYXJjaGVkLCBhbmQgc3BlbnQgdGhlIG5pZ2h0cyB1bmNvbWZvcnRhYmx5IGluIGRhbXAgcGxhY2VzLiBBY2NvcmRpbmdseSwgdGhleSBoYWQgbm90IGZvbGxvd2VkIEx1Y3VsbHVzIGZvciBtYW55IGRheXMgYWZ0ZXIgdGhlIGJhdHRsZSB3aGVuIHRoZXkgYmVnYW4gdG8gb2JqZWN0LiBBdCBmaXJzdCB0aGV5IHNlbnQgdGhlaXIgdHJpYnVuZXMgdG8gaGltIHdpdGggZW50cmVhdGllcyB0byBkZXNpc3QsIHRoZW4gdGhleSBoZWxkIG1vcmUgdHVtdWx0dW91cyBhc3NlbWJsaWVzLCBhbmQgc2hvdXRlZCBpbiB0aGVpciB0ZW50cyBhdCBuaWdodCwgd2hpY2ggc2VlbXMgdG8gaGF2ZSBiZWVuIGNoYXJhY3RlcmlzdGljIG9mIGEgbXV0aW5vdXMgYXJteS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBMdWN1bGx1cyBwbGllZCB0aGVtIHdpdGggZW50cmVhdGllcywgY2FsbGluZyB1cG9uIHRoZW0gdG8gcG9zc2VzcyB0aGVpciBzb3VscyBpbiBwYXRpZW5jZSB1bnRpbCB0aGV5IGhhZCB0YWtlbiBhbmQgZGVzdHJveWVkIHRoZSBBcm1lbmlhbiBDYXJ0aGFnZSwgdGhlIHdvcmsgb2YgdGhlaXIgbW9zdCBoYXRlZCBmb2UsIG1lYW5pbmcgSGFubmliYWwuIEJ1dCBzaW5jZSBoZSBjb3VsZCBub3QgcGVyc3VhZGUgdGhlbSwgaGUgbGVkIHRoZW0gYmFjaywgYW5kIGNyb3NzaW5nIHRoZSBUYXVydXMgYnkgYW5vdGhlciBwYXNzLCBkZXNjZW5kZWQgaW50byB0aGUgY291bnRyeSBjYWxsZWQgTXlnZG9uaWEsIHdoaWNoIGlzIGZlcnRpbGUgYW5kIG9wZW4gdG8gdGhlIHN1biwgYW5kIGNvbnRhaW5zIGEgbGFyZ2UgYW5kIHBvcHVsb3VzIGNpdHksIGNhbGxlZCBOaXNpYmlzIGJ5IHRoZSBCYXJiYXJpYW5zLCBBbnRpb2NoIGluIE15Z2RvbmlhIGJ5IHRoZSBHcmVla3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBub21pbmFsIGRlZmVuZGVyIG9mIHRoaXMgY2l0eSwgYnkgdmlydHVlIG9mIGhpcyByYW5rLCB3YXMgR291cmFzLCBhIGJyb3RoZXIgb2YgVGlncmFuZXM7IGJ1dCBpdHMgYWN0dWFsIGRlZmVuZGVyLCBieSB2aXJ0dWUgb2YgaGlzIGV4cGVyaWVuY2UgYW5kIHNraWxsIGFzIGFuIGVuZ2luZWVyLCB3YXMgQ2FsbGltYWNodXMsIHRoZSBtYW4gd2hvIGdhdmUgTHVjdWxsdXMgbW9zdCB0cm91YmxlIGF0IEFtaXN1cyBhbHNvLiBCdXQgTHVjdWxsdXMgZXN0YWJsaXNoZWQgaGlzIGNhbXAgYmVmb3JlIGl0LCBsYWlkIHNpZWdlIHRvIGl0IGluIGV2ZXJ5IHdheSwgYW5kIGluIGEgc2hvcnQgdGltZSB0b29rIHRoZSBjaXR5IGJ5IHN0b3JtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UbyBHb3VyYXMsIHdobyBzdXJyZW5kZXJlZCBoaW1zZWxmIGludG8gaGlzIGJhbmRzLCBoZSBnYXZlIGtpbmQgdHJlYXRtZW50OyBidXQgdG8gQ2FsbGltYWNodXMsIHdobyBwcm9taXNlZCB0byByZXZlYWwgc2VjcmV0IHN0b3JlcyBvZiBncmVhdCB0cmVhc3VyZSwgaGUgd291bGQgbm90IGhlYXJrZW4uIEluc3RlYWQsIGhlIG9yZGVyZWQgaGltIHRvIGJlIGJyb3VnaHQgaW4gY2hhaW5zLCB0aGF0IGhlIG1pZ2h0IGJlIHB1bmlzaGVkIGZvciBkZXN0cm95aW5nIEFtaXN1cyBieSBmaXJlLCBhbmQgdGhlcmVieSByb2JiaW5nIEx1Y3VsbHVzIG9mIHRoZSBvYmplY3Qgb2YgaGlzIGFtYml0aW9uLCB3aGljaCB3YXMgdG8gc2hvdyBraW5kbmVzcyB0byB0aGUgR3JlZWtzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RWxhdGVkIGFuZCBlbWJvbGRlbmVkIGJ5IHRoaXMgdmljdG9yeSwgTHVjdWxsdXMgcHVycG9zZWQgdG8gYWR2YW5jZSBmdXJ0aGVyIGludG8gdGhlIGludGVyaW9yIGFuZCBzdWJkdWUgdGhlIEJhcmJhcmlhbiByZWFsbSB1dHRlcmx5LiBCdXQsIGNvbnRyYXJ5IHRvIHdoYXQgbWlnaHQgaGF2ZSBiZWVuIGV4cGVjdGVkIGF0IHRoZSB0aW1lIG9mIHRoZSBhdXR1bW5hbCBlcXVpbm94LCBzZXZlcmUgd2ludGVyIHdlYXRoZXIgd2FzIGVuY291bnRlcmVkLCB3aGljaCBnZW5lcmFsbHkgY292ZXJlZCB0aGUgZ3JvdW5kIHdpdGggc25vdywgYW5kIGV2ZW4gd2hlbiB0aGUgc2t5IHdhcyBjbGVhciBwcm9kdWNlZCBob2FyIGZyb3N0IGFuZCBpY2UsIG93aW5nIHRvIHdoaWNoIHRoZSBob3JzZXMgY291bGQgbm90IHdlbGwgZHJpbmsgb2YgdGhlIHJpdmVycywgc28gZXhjZXNzaXZlIHdhcyB0aGUgY29sZCwgbm9yIGNvdWxkIHRoZXkgZWFzaWx5IGNyb3NzIHRoZW0sIHNpbmNlIHRoZSBpY2UgYnJva2UsIGFuZCBjdXQgdGhlIGhvcnNlcycgc2luZXdzIHdpdGggaXRzIGphZ2dlZCBlZGdlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlIGNvdW50cnkgd2FzIHRoaWNrbHkgc2hhZGVkLCBmdWxsIG9mIG5hcnJvdyBkZWZpbGVzLCBhbmQgbWFyc2h5LCBzbyB0aGF0IGl0IGtlcHQgdGhlIHNvbGRpZXJzIGNvbnRpbnVhbGx5IHdldDsgdGhleSB3ZXJlIGNvdmVyZWQgd2l0aCBzbm93IHdoaWxlIHRoZXkgbWFyY2hlZCwgYW5kIHNwZW50IHRoZSBuaWdodHMgdW5jb21mb3J0YWJseSBpbiBkYW1wIHBsYWNlcy4gQWNjb3JkaW5nbHksIHRoZXkgaGFkIG5vdCBmb2xsb3dlZCBMdWN1bGx1cyBmb3IgbWFueSBkYXlzIGFmdGVyIHRoZSBiYXR0bGUgd2hlbiB0aGV5IGJlZ2FuIHRvIG9iamVjdC4gQXQgZmlyc3QgdGhleSBzZW50IHRoZWlyIHRyaWJ1bmVzIHRvIGhpbSB3aXRoIGVudHJlYXRpZXMgdG8gZGVzaXN0LCB0aGVuIHRoZXkgaGVsZCBtb3JlIHR1bXVsdHVvdXMgYXNzZW1ibGllcywgYW5kIHNob3V0ZWQgaW4gdGhlaXIgdGVudHMgYXQgbmlnaHQsIHdoaWNoIHNlZW1zIHRvIGhhdmUgYmVlbiBjaGFyYWN0ZXJpc3RpYyBvZiBhIG11dGlub3VzIGFybXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgTHVjdWxsdXMgcGxpZWQgdGhlbSB3aXRoIGVudHJlYXRpZXMsIGNhbGxpbmcgdXBvbiB0aGVtIHRvIHBvc3Nlc3MgdGhlaXIgc291bHMgaW4gcGF0aWVuY2UgdW50aWwgdGhleSBoYWQgdGFrZW4gYW5kIGRlc3Ryb3llZCB0aGUgQXJtZW5pYW4gQ2FydGhhZ2UsIHRoZSB3b3JrIG9mIHRoZWlyIG1vc3QgaGF0ZWQgZm9lLCBtZWFuaW5nIEhhbm5pYmFsLiBCdXQgc2luY2UgaGUgY291bGQgbm90IHBlcnN1YWRlIHRoZW0sIGhlIGxlZCB0aGVtIGJhY2ssIGFuZCBjcm9zc2luZyB0aGUgVGF1cnVzIGJ5IGFub3RoZXIgcGFzcywgZGVzY2VuZGVkIGludG8gdGhlIGNvdW50cnkgY2FsbGVkIE15Z2RvbmlhLCB3aGljaCBpcyBmZXJ0aWxlIGFuZCBvcGVuIHRvIHRoZSBzdW4sIGFuZCBjb250YWlucyBhIGxhcmdlIGFuZCBwb3B1bG91cyBjaXR5LCBjYWxsZWQgTmlzaWJpcyBieSB0aGUgQmFyYmFyaWFucywgQW50aW9jaCBpbiBNeWdkb25pYSBieSB0aGUgR3JlZWtzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBub21pbmFsIGRlZmVuZGVyIG9mIHRoaXMgY2l0eSwgYnkgdmlydHVlIG9mIGhpcyByYW5rLCB3YXMgR291cmFzLCBhIGJyb3RoZXIgb2YgVGlncmFuZXM7IGJ1dCBpdHMgYWN0dWFsIGRlZmVuZGVyLCBieSB2aXJ0dWUgb2YgaGlzIGV4cGVyaWVuY2UgYW5kIHNraWxsIGFzIGFuIGVuZ2luZWVyLCB3YXMgQ2FsbGltYWNodXMsIHRoZSBtYW4gd2hvIGdhdmUgTHVjdWxsdXMgbW9zdCB0cm91YmxlIGF0IEFtaXN1cyBhbHNvLiBCdXQgTHVjdWxsdXMgZXN0YWJsaXNoZWQgaGlzIGNhbXAgYmVmb3JlIGl0LCBsYWlkIHNpZWdlIHRvIGl0IGluIGV2ZXJ5IHdheSwgYW5kIGluIGEgc2hvcnQgdGltZSB0b29rIHRoZSBjaXR5IGJ5IHN0b3JtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIEdvdXJhcywgd2hvIHN1cnJlbmRlcmVkIGhpbXNlbGYgaW50byBoaXMgYmFuZHMsIGhlIGdhdmUga2luZCB0cmVhdG1lbnQ7IGJ1dCB0byBDYWxsaW1hY2h1cywgd2hvIHByb21pc2VkIHRvIHJldmVhbCBzZWNyZXQgc3RvcmVzIG9mIGdyZWF0IHRyZWFzdXJlLCBoZSB3b3VsZCBub3QgaGVhcmtlbi4gSW5zdGVhZCwgaGUgb3JkZXJlZCBoaW0gdG8gYmUgYnJvdWdodCBpbiBjaGFpbnMsIHRoYXQgaGUgbWlnaHQgYmUgcHVuaXNoZWQgZm9yIGRlc3Ryb3lpbmcgQW1pc3VzIGJ5IGZpcmUsIGFuZCB0aGVyZWJ5IHJvYmJpbmcgTHVjdWxsdXMgb2YgdGhlIG9iamVjdCBvZiBoaXMgYW1iaXRpb24sIHdoaWNoIHdhcyB0byBzaG93IGtpbmRuZXNzIHRvIHRoZSBHcmVla3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlVwIHRvIHRoaXMgcG9pbnQsIG9uZSBtaWdodCBzYXkgdGhhdCBmb3J0dW5lIGhhZCBmb2xsb3dlZCBMdWN1bGx1cyBhbmQgZm91Z2h0IG9uIGhpcyBzaWRlOyBidXQgZnJvbSBub3cgb24sIGFzIHRob3VnaCBhIGZhdm91cmluZyBicmVlemUgaGFkIGZhaWxlZCBoaW0sIGhlIGhhZCB0byBmb3JjZSBldmVyeSBpc3N1ZSwgYW5kIG1ldCB3aXRoIG9ic3RhY2xlcyBldmVyeXdoZXJlLiBIZSBzdGlsbCBkaXNwbGF5ZWQgdGhlIGJyYXZlcnkgYW5kIHBhdGllbmNlIG9mIGEgZ29vZCBsZWFkZXIsIGJ1dCBoaXMgdW5kZXJ0YWtpbmdzIGJyb3VnaHQgaGltIG5vIG5ldyBmYW1lIG9yIGZhdm91cjsgaW5kZWVkLCBzbyBpbGwtc3RhcnJlZCBhbmQgZGV2aW91cyB3YXMgaGlzIGNvdXJzZSwgdGhhdCBoZSBjYW1lIG5lYXIgbG9zaW5nIHRoYXQgd2hpY2ggaGUgaGFkIGFscmVhZHkgd29uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgaGltc2VsZiB3YXMgbm90IGxlYXN0IHRvIGJsYW1lIGZvciB0aGlzLiBIZSB3YXMgbm90IGRpc3Bvc2VkIHRvIGNvdXJ0IHRoZSBmYXZvdXIgb2YgdGhlIGNvbW1vbiBzb2xkaWVyLCBhbmQgdGhvdWdodCB0aGF0IGV2ZXJ5dGhpbmcgdGhhdCB3YXMgZG9uZSB0byBwbGVhc2Ugb25lJ3MgY29tbWFuZCBvbmx5IGRpc2hvbm91cmVkIGFuZCB1bmRlcm1pbmVkIG9uZSdzIGF1dGhvcml0eS4gV29yc3Qgb2YgYWxsLCBub3QgZXZlbiB3aXRoIG1lbiBvZiBwb3dlciBhbmQgb2YgZXF1YWwgcmFuayB3aXRoIGhpbXNlbGYgY291bGQgaGUgcmVhZGlseSBjby1vcGVyYXRlOyBoZSBkZXNwaXNlZCB0aGVtIGFsbCwgYW5kIHRob3VnaHQgdGhlbSBvZiBubyBhY2NvdW50IGFzIGNvbXBhcmVkIHdpdGggaGltc2VsZi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgYmFkIHF1YWxpdGllcyBMdWN1bGx1cyBpcyBzYWlkIHRvIGhhdmUgaGFkLCBidXQgbm8gbW9yZSB0aGFuIHRoZXNlLiBIZSB3YXMgdGFsbCBhbmQgaGFuZHNvbWUsIGEgcG93ZXJmdWwgc3BlYWtlciwgYW5kIGVxdWFsbHkgYWJsZSBpbiB0aGUgZm9ydW0gYW5kIHRoZSBmaWVsZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VXAgdG8gdGhpcyBwb2ludCwgb25lIG1pZ2h0IHNheSB0aGF0IGZvcnR1bmUgaGFkIGZvbGxvd2VkIEx1Y3VsbHVzIGFuZCBmb3VnaHQgb24gaGlzIHNpZGU7IGJ1dCBmcm9tIG5vdyBvbiwgYXMgdGhvdWdoIGEgZmF2b3VyaW5nIGJyZWV6ZSBoYWQgZmFpbGVkIGhpbSwgaGUgaGFkIHRvIGZvcmNlIGV2ZXJ5IGlzc3VlLCBhbmQgbWV0IHdpdGggb2JzdGFjbGVzIGV2ZXJ5d2hlcmUuIEhlIHN0aWxsIGRpc3BsYXllZCB0aGUgYnJhdmVyeSBhbmQgcGF0aWVuY2Ugb2YgYSBnb29kIGxlYWRlciwgYnV0IGhpcyB1bmRlcnRha2luZ3MgYnJvdWdodCBoaW0gbm8gbmV3IGZhbWUgb3IgZmF2b3VyOyBpbmRlZWQsIHNvIGlsbC1zdGFycmVkIGFuZCBkZXZpb3VzIHdhcyBoaXMgY291cnNlLCB0aGF0IGhlIGNhbWUgbmVhciBsb3NpbmcgdGhhdCB3aGljaCBoZSBoYWQgYWxyZWFkeSB3b24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBoaW1zZWxmIHdhcyBub3QgbGVhc3QgdG8gYmxhbWUgZm9yIHRoaXMuIEhlIHdhcyBub3QgZGlzcG9zZWQgdG8gY291cnQgdGhlIGZhdm91ciBvZiB0aGUgY29tbW9uIHNvbGRpZXIsIGFuZCB0aG91Z2h0IHRoYXQgZXZlcnl0aGluZyB0aGF0IHdhcyBkb25lIHRvIHBsZWFzZSBvbmUncyBjb21tYW5kIG9ubHkgZGlzaG9ub3VyZWQgYW5kIHVuZGVybWluZWQgb25lJ3MgYXV0aG9yaXR5LiBXb3JzdCBvZiBhbGwsIG5vdCBldmVuIHdpdGggbWVuIG9mIHBvd2VyIGFuZCBvZiBlcXVhbCByYW5rIHdpdGggaGltc2VsZiBjb3VsZCBoZSByZWFkaWx5IGNvLW9wZXJhdGU7IGhlIGRlc3Bpc2VkIHRoZW0gYWxsLCBhbmQgdGhvdWdodCB0aGVtIG9mIG5vIGFjY291bnQgYXMgY29tcGFyZWQgd2l0aCBoaW1zZWxmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGJhZCBxdWFsaXRpZXMgTHVjdWxsdXMgaXMgc2FpZCB0byBoYXZlIGhhZCwgYnV0IG5vIG1vcmUgdGhhbiB0aGVzZS4gSGUgd2FzIHRhbGwgYW5kIGhhbmRzb21lLCBhIHBvd2VyZnVsIHNwZWFrZXIsIGFuZCBlcXVhbGx5IGFibGUgaW4gdGhlIGZvcnVtIGFuZCB0aGUgZmllbGQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2VsbCwgdGhlbiwgU2FsbHVzdCBzYXlzIHRoYXQgaGlzIHNvbGRpZXJzIHdlcmUgaWxsLWRpc3Bvc2VkIHRvd2FyZHMgaGltIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiB0aGUgd2FyLCBiZWZvcmUgQ3l6aWN1cywgYW5kIGFnYWluIGJlZm9yZSBBbWlzdXMsIGJlY2F1c2UgdGhleSB3ZXJlIGNvbXBlbGxlZCB0byBzcGVuZCB0d28gc3VjY2Vzc2l2ZSB3aW50ZXJzIGluIGNhbXAuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdpbnRlcnMgdGhhdCBmb2xsb3dlZCBhbHNvIHZleGVkIHRoZW0uIFRoZXkgc3BlbnQgdGhlbSBlaXRoZXIgaW4gdGhlIGVuZW15J3MgY291bnRyeSwgb3IgYW1vbmcgdGhlIGFsbGllcywgZW5jYW1wZWQgdW5kZXIgdGhlIG9wZW4gc2t5LiBOb3Qgb25jZSBkaWQgTHVjdWxsdXMgdGFrZSBoaXMgYXJteSBpbnRvIGEgY2l0eSB0aGF0IHdhcyBHcmVlayBhbmQgZnJpZW5kbHkuIEluIHRoZWlyIGRpc2FmZmVjdGlvbiwgdGhleSByZWNlaXZlZCB0aGUgZ3JlYXRlc3Qgc3VwcG9ydCBmcm9tIHRoZSBwb3B1bGFyIGxlYWRlcnMgYXQgUm9tZS4gVGhlc2UgZW52aWVkIEx1Y3VsbHVzIGFuZCBkZW5vdW5jZWQgaGltIGZvciBwcm90cmFjdGluZyB0aGUgd2FyIHRocm91Z2ggbG92ZSBvZiBwb3dlciBhbmQgbG92ZSBvZiB3ZWFsdGguIFRoZXkgc2FpZCBoZSBhbGwgYnV0IGhhZCBpbiBoaXMgb3duIHNvbGUgcG93ZXIgQ2lsaWNpYSwgQXNpYSwgQml0aHluaWEsIFBhcGhsYWdvbmlhLCBHYWxhdGlhLCBQb250dXMsIEFybWVuaWEsIGFuZCB0aGUgcmVnaW9ucyBleHRlbmRpbmcgdG8gdGhlIFBoYXNpcywgYW5kIHRoYXQgbm93IGhlIGhhZCBhY3R1YWxseSBwbHVuZGVyZWQgdGhlIHBhbGFjZXMgb2YgVGlncmFuZXMsIGFzIGlmIGhlIGhhZCBiZWVuIHNlbnQsIG5vdCB0byBzdWJkdWUgdGhlIGtpbmdzLCBidXQgdG8gc3RyaXAgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2Ugd2VyZSB0aGUgd29yZHMsIHRoZXkgc2F5LCBvZiBMdWNpdXMgUXVpbnR1cywgb25lIG9mIHRoZSBwcmFldG9ycywgdG8gd2hvbSBtb3N0IG9mIGFsbCB0aGUgcGVvcGxlIGxpc3RlbmVkIHdoZW4gdGhleSBwYXNzZWQgYSB2b3RlIHRvIHNlbmQgbWVuIHdobyBzaG91bGQgc3VjY2VlZCBMdWN1bGx1cyBpbiB0aGUgY29tbWFuZCBvZiBoaXMgcHJvdmluY2UuIFRoZXkgdm90ZWQgYWxzbyB0aGF0IG1hbnkgb2YgdGhlIHNvbGRpZXJzIHVuZGVyIGhpbSBzaG91bGQgYmUgcmVsZWFzZWQgZnJvbSBtaWxpdGFyeSBzZXJ2aWNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3aW50ZXJzIHRoYXQgZm9sbG93ZWQgYWxzbyB2ZXhlZCB0aGVtLiBUaGV5IHNwZW50IHRoZW0gZWl0aGVyIGluIHRoZSBlbmVteSdzIGNvdW50cnksIG9yIGFtb25nIHRoZSBhbGxpZXMsIGVuY2FtcGVkIHVuZGVyIHRoZSBvcGVuIHNreS4gTm90IG9uY2UgZGlkIEx1Y3VsbHVzIHRha2UgaGlzIGFybXkgaW50byBhIGNpdHkgdGhhdCB3YXMgR3JlZWsgYW5kIGZyaWVuZGx5LiBJbiB0aGVpciBkaXNhZmZlY3Rpb24sIHRoZXkgcmVjZWl2ZWQgdGhlIGdyZWF0ZXN0IHN1cHBvcnQgZnJvbSB0aGUgcG9wdWxhciBsZWFkZXJzIGF0IFJvbWUuIFRoZXNlIGVudmllZCBMdWN1bGx1cyBhbmQgZGVub3VuY2VkIGhpbSBmb3IgcHJvdHJhY3RpbmcgdGhlIHdhciB0aHJvdWdoIGxvdmUgb2YgcG93ZXIgYW5kIGxvdmUgb2Ygd2VhbHRoLiBUaGV5IHNhaWQgaGUgYWxsIGJ1dCBoYWQgaW4gaGlzIG93biBzb2xlIHBvd2VyIENpbGljaWEsIEFzaWEsIEJpdGh5bmlhLCBQYXBobGFnb25pYSwgR2FsYXRpYSwgUG9udHVzLCBBcm1lbmlhLCBhbmQgdGhlIHJlZ2lvbnMgZXh0ZW5kaW5nIHRvIHRoZSBQaGFzaXMsIGFuZCB0aGF0IG5vdyBoZSBoYWQgYWN0dWFsbHkgcGx1bmRlcmVkIHRoZSBwYWxhY2VzIG9mIFRpZ3JhbmVzLCBhcyBpZiBoZSBoYWQgYmVlbiBzZW50LCBub3QgdG8gc3ViZHVlIHRoZSBraW5ncywgYnV0IHRvIHN0cmlwIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdlcmUgdGhlIHdvcmRzLCB0aGV5IHNheSwgb2YgTHVjaXVzIFF1aW50dXMsIG9uZSBvZiB0aGUgcHJhZXRvcnMsIHRvIHdob20gbW9zdCBvZiBhbGwgdGhlIHBlb3BsZSBsaXN0ZW5lZCB3aGVuIHRoZXkgcGFzc2VkIGEgdm90ZSB0byBzZW5kIG1lbiB3aG8gc2hvdWxkIHN1Y2NlZWQgTHVjdWxsdXMgaW4gdGhlIGNvbW1hbmQgb2YgaGlzIHByb3ZpbmNlLiBUaGV5IHZvdGVkIGFsc28gdGhhdCBtYW55IG9mIHRoZSBzb2xkaWVycyB1bmRlciBoaW0gc2hvdWxkIGJlIHJlbGVhc2VkIGZyb20gbWlsaXRhcnkgc2VydmljZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhlc2UgZmFjdG9ycyBpbiB0aGUgY2FzZSwgc28gdW5mYXZvdXJhYmxlIGluIHRoZW1zZWx2ZXMsIHRoZXJlIHdhcyBhZGRlZCBhbm90aGVyLCB3aGljaCBtb3N0IG9mIGFsbCB2aXRpYXRlZCB0aGUgdW5kZXJ0YWtpbmdzIG9mIEx1Y3VsbHVzLiBUaGlzIHdhcyBQdWJsaXVzIENsb2RpdXMsIGEgbWFuIG9mIHdhbnRvbiB2aW9sZW5jZSwgYW5kIGZ1bGwgb2YgYWxsIGFycm9nYW5jZSBhbmQgYm9sZG5lc3MuIEhlIHdhcyBhIGJyb3RoZXIgb2YgdGhlIHdpZmUgb2YgTHVjdWxsdXMsIGEgd29tYW4gb2YgdGhlIG1vc3QgZGlzc29sdXRlIHdheXMsIHdob20gaGUgd2FzIGFjdHVhbGx5IGFjY3VzZWQgb2YgZGViYXVjaGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lIGhlIHdhcyBpbiBzZXJ2aWNlIHdpdGggTHVjdWxsdXMsIGFuZCBkaWQgbm90IGdldCBhbGwgdGhlIGhvbm91ciB3aGljaCBoZSB0aG91Z2h0IGhpcyBkdWUuIEhlIHRob3VnaHQgYSBmb3JlbW9zdCBwbGFjZSBoaXMgZHVlLCBhbmQgd2hlbiBtYW55IHdlcmUgcHJlZmVycmVkIGJlZm9yZSBoaW0gYmVjYXVzZSBvZiBoaXMgZXZpbCBjaGFyYWN0ZXIsIGhlIHdvcmtlZCBzZWNyZXRseSB1cG9uIHRoZSBzb2xkaWVycyB3aG8gaGFkIGJlZW4gY29tbWFuZGVkIGJ5IEZpbWJyaWEsIGFuZCB0cmllZCB0byBpbmNpdGUgdGhlbSBhZ2FpbnN0IEx1Y3VsbHVzLCBkaXNzZW1pbmF0aW5nIGFtb25nIHRoZW0gc3BlZWNoZXMgd2VsbCBhZGFwdGVkIHRvIG1lbiB3aG8gd2VyZSBuZWl0aGVyIHVud2lsbGluZyBub3IgdW5hY2N1c3RvbWVkIHRvIGhhdmUgdGhlaXIgZmF2b3VyIGNvdXJ0ZWQuIFRoZXNlIHdlcmUgdGhlIG1lbiB3aG9tIEZpbWJyaWEgaGFkIG9uY2UgcGVyc3VhZGVkIHRvIGtpbGwgdGhlIGNvbnN1bCBGbGFjY3VzLCBhbmQgY2hvb3NlIGhpbXNlbGYgZm9yIHRoZWlyIGdlbmVyYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgdGhlcmVmb3JlIGdsYWRseSBsaXN0ZW5lZCB0byBDbG9kaXVzIGFsc28sIGFuZCBjYWxsZWQgaGltIHRoZSBzb2xkaWVyJ3MgZnJpZW5kLiBGb3IgaGUgcHJldGVuZGVkIHRvIGJlIGluY2Vuc2VkIGluIHRoZWlyIGJlaGFsZiwgaWYgdGhlcmUgd2FzIHRvIGJlIG5vIGVuZCBvZiB0aGVpciBjb3VudGxlc3Mgd2FycyBhbmQgdG9pbHMsIGJ1dCB0aGV5IHdlcmUgcmF0aGVyIHRvIHdlYXIgb3V0IHRoZWlyIGxpdmVzIGluIGZpZ2h0aW5nIHdpdGggZXZlcnkgbmF0aW9uIGFuZCB3YW5kZXJpbmcgb3ZlciBldmVyeSBsYW5kLCByZWNlaXZpbmcgbm8gc3VpdGFibGUgcmV3YXJkIGZvciBzdWNoIHNlcnZpY2UsIGJ1dCBjb252b3lpbmcgdGhlIHdhZ2dvbnMgYW5kIGNhbWVscyBvZiBMdWN1bGx1cyBsYWRlbiB3aXRoIGdvbGRlbiBiZWFrZXJzIHNldCB3aXRoIHByZWNpb3VzIHN0b25lcywgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+d2hpbGUgdGhlIHNvbGRpZXJzIG9mIFBvbXBleSwgY2l0aXplbnMgbm93LCB3ZXJlIHNudWdseSBlbnNjb25jZWQgd2l0aCB3aXZlcyBhbmQgY2hpbGRyZW4gaW4gdGhlIHBvc3Nlc3Npb24gb2YgZmVydGlsZSBsYW5kcyBhbmQgcHJvc3Blcm91cyBjaXRpZXMs4oCUbm90IGZvciBoYXZpbmcgZHJpdmVuIE1pdGhyaWRhdGVzIGFuZCBUaWdyYW5lcyBpbnRvIHVuaW5oYWJpdGFibGUgZGVzZXJ0cywgbm9yIGZvciBoYXZpbmcgZGVtb2xpc2hlZCB0aGUgcm95YWwgcGFsYWNlcyBvZiBBc2lhLCBidXQgZm9yIGhhdmluZyBmb3VnaHQgd2l0aCB3cmV0Y2hlZCBleGlsZXMgaW4gU3BhaW4gYW5kIHJ1bmF3YXkgc2xhdmVzIGluIEl0YWx5LiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgdGhlbiw8L3E+IGhlIHdvdWxkIGNyeSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiBvdXIgY2FtcGFpZ25zIGFyZSBuZXZlciB0byBjb21lIHRvIGFuIGVuZCwgZG8gd2Ugbm90IHJlc2VydmUgd2hhdCBpcyBsZWZ0IG9mIG91ciBib2RpZXMsIGFuZCBvdXIgbGl2ZXMsIGZvciBhIGdlbmVyYWwgaW4gd2hvc2UgZXllcyB0aGUgd2VhbHRoIG9mIGhpcyBzb2xkaWVycyBpcyBoaXMgZmFpcmVzdCBob25vdXI/PC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhlc2UgZmFjdG9ycyBpbiB0aGUgY2FzZSwgc28gdW5mYXZvdXJhYmxlIGluIHRoZW1zZWx2ZXMsIHRoZXJlIHdhcyBhZGRlZCBhbm90aGVyLCB3aGljaCBtb3N0IG9mIGFsbCB2aXRpYXRlZCB0aGUgdW5kZXJ0YWtpbmdzIG9mIEx1Y3VsbHVzLiBUaGlzIHdhcyBQdWJsaXVzIENsb2RpdXMsIGEgbWFuIG9mIHdhbnRvbiB2aW9sZW5jZSwgYW5kIGZ1bGwgb2YgYWxsIGFycm9nYW5jZSBhbmQgYm9sZG5lc3MuIEhlIHdhcyBhIGJyb3RoZXIgb2YgdGhlIHdpZmUgb2YgTHVjdWxsdXMsIGEgd29tYW4gb2YgdGhlIG1vc3QgZGlzc29sdXRlIHdheXMsIHdob20gaGUgd2FzIGFjdHVhbGx5IGFjY3VzZWQgb2YgZGViYXVjaGluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSBoZSB3YXMgaW4gc2VydmljZSB3aXRoIEx1Y3VsbHVzLCBhbmQgZGlkIG5vdCBnZXQgYWxsIHRoZSBob25vdXIgd2hpY2ggaGUgdGhvdWdodCBoaXMgZHVlLiBIZSB0aG91Z2h0IGEgZm9yZW1vc3QgcGxhY2UgaGlzIGR1ZSwgYW5kIHdoZW4gbWFueSB3ZXJlIHByZWZlcnJlZCBiZWZvcmUgaGltIGJlY2F1c2Ugb2YgaGlzIGV2aWwgY2hhcmFjdGVyLCBoZSB3b3JrZWQgc2VjcmV0bHkgdXBvbiB0aGUgc29sZGllcnMgd2hvIGhhZCBiZWVuIGNvbW1hbmRlZCBieSBGaW1icmlhLCBhbmQgdHJpZWQgdG8gaW5jaXRlIHRoZW0gYWdhaW5zdCBMdWN1bGx1cywgZGlzc2VtaW5hdGluZyBhbW9uZyB0aGVtIHNwZWVjaGVzIHdlbGwgYWRhcHRlZCB0byBtZW4gd2hvIHdlcmUgbmVpdGhlciB1bndpbGxpbmcgbm9yIHVuYWNjdXN0b21lZCB0byBoYXZlIHRoZWlyIGZhdm91ciBjb3VydGVkLiBUaGVzZSB3ZXJlIHRoZSBtZW4gd2hvbSBGaW1icmlhIGhhZCBvbmNlIHBlcnN1YWRlZCB0byBraWxsIHRoZSBjb25zdWwgRmxhY2N1cywgYW5kIGNob29zZSBoaW1zZWxmIGZvciB0aGVpciBnZW5lcmFsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgdGhlcmVmb3JlIGdsYWRseSBsaXN0ZW5lZCB0byBDbG9kaXVzIGFsc28sIGFuZCBjYWxsZWQgaGltIHRoZSBzb2xkaWVyJ3MgZnJpZW5kLiBGb3IgaGUgcHJldGVuZGVkIHRvIGJlIGluY2Vuc2VkIGluIHRoZWlyIGJlaGFsZiwgaWYgdGhlcmUgd2FzIHRvIGJlIG5vIGVuZCBvZiB0aGVpciBjb3VudGxlc3Mgd2FycyBhbmQgdG9pbHMsIGJ1dCB0aGV5IHdlcmUgcmF0aGVyIHRvIHdlYXIgb3V0IHRoZWlyIGxpdmVzIGluIGZpZ2h0aW5nIHdpdGggZXZlcnkgbmF0aW9uIGFuZCB3YW5kZXJpbmcgb3ZlciBldmVyeSBsYW5kLCByZWNlaXZpbmcgbm8gc3VpdGFibGUgcmV3YXJkIGZvciBzdWNoIHNlcnZpY2UsIGJ1dCBjb252b3lpbmcgdGhlIHdhZ2dvbnMgYW5kIGNhbWVscyBvZiBMdWN1bGx1cyBsYWRlbiB3aXRoIGdvbGRlbiBiZWFrZXJzIHNldCB3aXRoIHByZWNpb3VzIHN0b25lcywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIHRoZSBzb2xkaWVycyBvZiBQb21wZXksIGNpdGl6ZW5zIG5vdywgd2VyZSBzbnVnbHkgZW5zY29uY2VkIHdpdGggd2l2ZXMgYW5kIGNoaWxkcmVuIGluIHRoZSBwb3NzZXNzaW9uIG9mIGZlcnRpbGUgbGFuZHMgYW5kIHByb3NwZXJvdXMgY2l0aWVzLOKAlG5vdCBmb3IgaGF2aW5nIGRyaXZlbiBNaXRocmlkYXRlcyBhbmQgVGlncmFuZXMgaW50byB1bmluaGFiaXRhYmxlIGRlc2VydHMsIG5vciBmb3IgaGF2aW5nIGRlbW9saXNoZWQgdGhlIHJveWFsIHBhbGFjZXMgb2YgQXNpYSwgYnV0IGZvciBoYXZpbmcgZm91Z2h0IHdpdGggd3JldGNoZWQgZXhpbGVzIGluIFNwYWluIGFuZCBydW5hd2F5IHNsYXZlcyBpbiBJdGFseS4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgdGhlbiw8L3E+IGhlIHdvdWxkIGNyeSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIG91ciBjYW1wYWlnbnMgYXJlIG5ldmVyIHRvIGNvbWUgdG8gYW4gZW5kLCBkbyB3ZSBub3QgcmVzZXJ2ZSB3aGF0IGlzIGxlZnQgb2Ygb3VyIGJvZGllcywgYW5kIG91ciBsaXZlcywgZm9yIGEgZ2VuZXJhbCBpbiB3aG9zZSBleWVzIHRoZSB3ZWFsdGggb2YgaGlzIHNvbGRpZXJzIGlzIGhpcyBmYWlyZXN0IGhvbm91cj88L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBzdWNoIHJlYXNvbnMgYXMgdGhlc2UgdGhlIGFybXkgb2YgTHVjdWxsdXMgd2FzIGRlbW9yYWxpc2VkLCBhbmQgcmVmdXNlZCB0byBmb2xsb3cgaGltIGVpdGhlciBhZ2FpbnN0IFRpZ3JhbmVzLCBvciBhZ2FpbnN0IE1pdGhyaWRhdGVzLCB3aG8gaGFkIGNvbWUgYmFjayBpbnRvIFBvbnR1cyBmcm9tIEFybWVuaWEsIGFuZCB3YXMgdHJ5aW5nIHRvIHJlc3RvcmUgaGlzIHBvd2VyIHRoZXJlLiBUaGV5IG1hZGUgdGhlIHdpbnRlciB0aGVpciBleGN1c2UgZm9yIGxpbmdlcmluZyBpbiBHb3JkeWVuw6ksIGV4cGVjdGluZyBldmVyeSBtb21lbnQgdGhhdCBQb21wZXksIG9yIHNvbWUgb3RoZXIgY29tbWFuZGVyLCB3b3VsZCBiZSBzZW50IG91dCB0byBzdWNjZWVkIEx1Y3VsbHVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBzdWNoIHJlYXNvbnMgYXMgdGhlc2UgdGhlIGFybXkgb2YgTHVjdWxsdXMgd2FzIGRlbW9yYWxpc2VkLCBhbmQgcmVmdXNlZCB0byBmb2xsb3cgaGltIGVpdGhlciBhZ2FpbnN0IFRpZ3JhbmVzLCBvciBhZ2FpbnN0IE1pdGhyaWRhdGVzLCB3aG8gaGFkIGNvbWUgYmFjayBpbnRvIFBvbnR1cyBmcm9tIEFybWVuaWEsIGFuZCB3YXMgdHJ5aW5nIHRvIHJlc3RvcmUgaGlzIHBvd2VyIHRoZXJlLiBUaGV5IG1hZGUgdGhlIHdpbnRlciB0aGVpciBleGN1c2UgZm9yIGxpbmdlcmluZyBpbiBHb3JkeWVuw6ksIGV4cGVjdGluZyBldmVyeSBtb21lbnQgdGhhdCBQb21wZXksIG9yIHNvbWUgb3RoZXIgY29tbWFuZGVyLCB3b3VsZCBiZSBzZW50IG91dCB0byBzdWNjZWVkIEx1Y3VsbHVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aWRpbmdzIGNhbWUgdGhhdCBNaXRocmlkYXRlcyBoYWQgZGVmZWF0ZWQgRmFiaXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjY3IEIuQy48L25vdGU+IGFuZCB3YXMgb24gdGhlIG1hcmNoIGFnYWluc3QgU29ybmF0aXVzIGFuZCBUcmlhcml1cywgdGhleSB3ZXJlIHN0cnVjayB3aXRoIHNoYW1lIGFuZCBmb2xsb3dlZCBMdWN1bGx1cy4gQnV0IFRyaWFyaXVzLCB3aG8gd2FzIGFtYml0aW91cyB0byBzbmF0Y2ggdGhlIHZpY3RvcnksIHdoaWNoIGhlIHRob3VnaHQgYXNzdXJlZCwgYmVmb3JlIEx1Y3VsbHVzLCB3aG8gd2FzIG5lYXIsIHNob3VsZCBjb21lIHVwLCB3YXMgZGVmZWF0ZWQgaW4gYSBncmVhdCBiYXR0bGUuIEl0IGlzIHNhaWQgdGhhdCBvdmVyIHNldmVuIHRob3VzYW5kIFJvbWFucyBmZWxsLCBhbW9uZyB3aG9tIHdlcmUgYSBodW5kcmVkIGFuZCBmaWZ0eSBjZW50dXJpb25zLCBhbmQgdHdlbnR5LWZvdXIgdHJpYnVuZXM7IGFuZCB0aGVpciBjYW1wIHdhcyBjYXB0dXJlZCBieSBNaXRocmlkYXRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEx1Y3VsbHVzLCBjb21pbmcgdXAgYSBmZXcgZGF5cyBhZnRlcndhcmQsIGhpZCBUcmlhcml1cyBmcm9tIHRoZSBzZWFyY2ggb2YgaGlzIGluZnVyaWF0ZWQgc29sZGllcnMuIFRoZW4sIHNpbmNlIE1pdGhyaWRhdGVzIHdhcyB1bndpbGxpbmcgdG8gZ2l2ZSBmaWdodCwgYnV0IGxheSB3YWl0aW5nIGZvciBUaWdyYW5lcywgd2hvIHdhcyBjb21pbmcgZG93biB3aXRoIGEgbGFyZ2UgZm9yY2UsIGhlIGRldGVybWluZWQgdG8gYW50aWNpcGF0ZSB0aGUganVuY3Rpb24gb2YgdGhlaXIgYXJtaWVzLCBhbmQgbWFyY2ggYmFjayB0byBtZWV0IFRpZ3JhbmVzIGluIGJhdHRsZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoaWxlIGhlIHdhcyBvbiB0aGUgd2F5IHRoaXRoZXIsIHRoZSBGaW1icmlhbiBzb2xkaWVycyBtdXRpbmllZCBhbmQgbGVmdCB0aGVpciByYW5rcywgZGVjbGFyaW5nIHRoYXQgdGhleSB3ZXJlIGRpc2NoYXJnZWQgZnJvbSBzZXJ2aWNlIGJ5IGRlY3JlZSBvZiB0aGUgcGVvcGxlLCBhbmQgdGhhdCBMdWN1bGx1cyBubyBsb25nZXIgaGFkIHRoZSByaWdodCB0byBjb21tYW5kIHRoZW0sIHNpbmNlIHRoZSBwcm92aW5jZXMgaGFkIGJlZW4gYXNzaWduZWQgdG8gb3RoZXJzLiBBY2NvcmRpbmdseSwgdGhlcmUgd2FzIG5vIGV4cGVkaWVudCwgaG93ZXZlciBtdWNoIGJlbmVhdGggaGlzIGRpZ25pdHksIHRvIHdoaWNoIEx1Y3VsbHVzIGRpZCBub3QgZm9yY2UgaGltc2VsZiB0byByZXNvcnQs4oCUZW50cmVhdGluZyB0aGUgc29sZGllcnMgbWFuIGJ5IG1hbiwgZ29pbmcgYWJvdXQgZnJvbSB0ZW50IHRvIHRlbnQgaW4gaHVtaWxpdHkgYW5kIHRlYXJzLCBhbmQgYWN0dWFsbHkgdGFraW5nIHNvbWUgb2YgdGhlIG1lbiBieSB0aGUgaGFuZCBpbiBzdXBwbGljYXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5IHJlamVjdGVkIGhpcyBhZHZhbmNlcywgYW5kIHRocmV3IHRoZWlyIGVtcHR5IHB1cnNlcyBkb3duIGJlZm9yZSBoaW0sIGJpZGRpbmcgaGltIGZpZ2h0IHRoZSBlbmVteSBhbG9uZSwgc2luY2UgaGUgYWxvbmUga25ldyBob3cgdG8gZ2V0IHJpY2ggZnJvbSB0aGVtLiBIb3dldmVyLCBhdCB0aGUgcmVxdWVzdCBvZiB0aGUgb3RoZXIgc29sZGllcnMsIHRoZSBGaW1icmlhbnMgd2VyZSBjb25zdHJhaW5lZCB0byBhZ3JlZSB0byByZW1haW4gZHVyaW5nIHRoZSBzdW1tZXI7IGJ1dCBpZiwgaW4gdGhlIG1lYW50aW1lLCBubyBlbmVteSBzaG91bGQgY29tZSBkb3duIHRvIGZpZ2h0IHRoZW0sIHRoZXkgd2VyZSB0byBiZSBkaXNtaXNzZWQuIEx1Y3VsbHVzIHdhcyBvYmxpZ2VkIHRvIGNvbnRlbnQgaGltc2VsZiB3aXRoIHRoZXNlIHRlcm1zLCBvciBlbHNlIHRvIGJlIGRlc2VydGVkIGFuZCBnaXZlIHVwIHRoZSBjb3VudHJ5IHRvIHRoZSBCYXJiYXJpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5IZSB0aGVyZWZvcmUgc2ltcGx5IGhlbGQgaGlzIHNvbGRpZXJzIHRvZ2V0aGVyLCB3aXRob3V0IGZvcmNpbmcgdGhlbSBhbnkgbW9yZSwgb3IgbGVhZGluZyB0aGVtIG91dCB0byBiYXR0bGUuIFRoZWlyIHJlbWFpbmluZyB3aXRoIGhpbSB3YXMgYWxsIGhlIGNvdWxkIGV4cGVjdCwgYW5kIGhlIGxvb2tlZCBvbiBoZWxwbGVzc2x5IHdoaWxlIFRpZ3JhbmVzIHJhdmFnZWQgQ2FwcGFkb2NpYSBhbmQgTWl0aHJpZGF0ZXMgcmVzdW1lZCBoaXMgaW5zb2xlbnQgd2F5cyzigJRhIG1vbmFyY2ggd2hvbSBoZSBoYWQgcmVwb3J0ZWQgYnkgbGV0dGVyIHRvIHRoZSBTZW5hdGUgYXMgY29tcGxldGVseSBzdWJkdWVkLiBCZXNpZGVzLCB0aGUgY29tbWlzc2lvbmVycyB3ZXJlIG5vdyB3aXRoIGhpbSwgd2hvIGhhZCBiZWVuIHNlbnQgb3V0IHRvIHJlZ3VsYXRlIHRoZSBhZmZhaXJzIG9mIFBvbnR1cywgb24gdGhlIHN1cHBvc2l0aW9uIHRoYXQgaXQgd2FzIGEgc2VjdXJlIFJvbWFuIHBvc3Nlc3Npb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBsbywgd2hlbiB0aGV5IGNhbWUsIHRoZXkgc2F3IHRoYXQgTHVjdWxsdXMgd2FzIG5vdCBldmVuIGhpcyBvd24gbWFzdGVyLCBidXQgd2FzIG1vY2tlZCBhbmQgaW5zdWx0ZWQgYnkgaGlzIHNvbGRpZXJzLiBUaGVzZSB3ZW50IHNvIGZhciBpbiB0aGVpciBvdXRyYWdlb3VzIHRyZWF0bWVudCBvZiB0aGVpciBnZW5lcmFsLCB0aGF0LCBhdCB0aGUgY2xvc2Ugb2YgdGhlIHN1bW1lciwgdGhleSBkb25uZWQgdGhlaXIgYXJtb3VyLCBkcmV3IHRoZWlyIHN3b3JkcywgYW5kIGNoYWxsZW5nZWQgdG8gYmF0dGxlIGFuIGVuZW15IHdobyB3YXMgbm93aGVyZSBuZWFyLCBidXQgaGFkIGFscmVhZHkgd2l0aGRyYXduLiBUaGVuIHRoZXkgc2hvdXRlZCB0aGVpciB3YXIgY3JpZXMsIGJyYW5kaXNoZWQgdGhlaXIgd2VhcG9ucyBpbiB0aGUgYWlyLCBhbmQgZGVwYXJ0ZWQgZnJvbSB0aGUgY2FtcCwgY2FsbGluZyBtZW4gdG8gd2l0bmVzcyB0aGF0IHRoZSB0aW1lIGhhZCBleHBpcmVkIGR1cmluZyB3aGljaCB0aGV5IGhhZCBhZ3JlZWQgdG8gcmVtYWluIHdpdGggTHVjdWxsdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGlkaW5ncyBjYW1lIHRoYXQgTWl0aHJpZGF0ZXMgaGFkIGRlZmVhdGVkIEZhYml1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjY3IEIuQy48L25vdGU+IGFuZCB3YXMgb24gdGhlIG1hcmNoIGFnYWluc3QgU29ybmF0aXVzIGFuZCBUcmlhcml1cywgdGhleSB3ZXJlIHN0cnVjayB3aXRoIHNoYW1lIGFuZCBmb2xsb3dlZCBMdWN1bGx1cy4gQnV0IFRyaWFyaXVzLCB3aG8gd2FzIGFtYml0aW91cyB0byBzbmF0Y2ggdGhlIHZpY3RvcnksIHdoaWNoIGhlIHRob3VnaHQgYXNzdXJlZCwgYmVmb3JlIEx1Y3VsbHVzLCB3aG8gd2FzIG5lYXIsIHNob3VsZCBjb21lIHVwLCB3YXMgZGVmZWF0ZWQgaW4gYSBncmVhdCBiYXR0bGUuIEl0IGlzIHNhaWQgdGhhdCBvdmVyIHNldmVuIHRob3VzYW5kIFJvbWFucyBmZWxsLCBhbW9uZyB3aG9tIHdlcmUgYSBodW5kcmVkIGFuZCBmaWZ0eSBjZW50dXJpb25zLCBhbmQgdHdlbnR5LWZvdXIgdHJpYnVuZXM7IGFuZCB0aGVpciBjYW1wIHdhcyBjYXB0dXJlZCBieSBNaXRocmlkYXRlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBMdWN1bGx1cywgY29taW5nIHVwIGEgZmV3IGRheXMgYWZ0ZXJ3YXJkLCBoaWQgVHJpYXJpdXMgZnJvbSB0aGUgc2VhcmNoIG9mIGhpcyBpbmZ1cmlhdGVkIHNvbGRpZXJzLiBUaGVuLCBzaW5jZSBNaXRocmlkYXRlcyB3YXMgdW53aWxsaW5nIHRvIGdpdmUgZmlnaHQsIGJ1dCBsYXkgd2FpdGluZyBmb3IgVGlncmFuZXMsIHdobyB3YXMgY29taW5nIGRvd24gd2l0aCBhIGxhcmdlIGZvcmNlLCBoZSBkZXRlcm1pbmVkIHRvIGFudGljaXBhdGUgdGhlIGp1bmN0aW9uIG9mIHRoZWlyIGFybWllcywgYW5kIG1hcmNoIGJhY2sgdG8gbWVldCBUaWdyYW5lcyBpbiBiYXR0bGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSBoZSB3YXMgb24gdGhlIHdheSB0aGl0aGVyLCB0aGUgRmltYnJpYW4gc29sZGllcnMgbXV0aW5pZWQgYW5kIGxlZnQgdGhlaXIgcmFua3MsIGRlY2xhcmluZyB0aGF0IHRoZXkgd2VyZSBkaXNjaGFyZ2VkIGZyb20gc2VydmljZSBieSBkZWNyZWUgb2YgdGhlIHBlb3BsZSwgYW5kIHRoYXQgTHVjdWxsdXMgbm8gbG9uZ2VyIGhhZCB0aGUgcmlnaHQgdG8gY29tbWFuZCB0aGVtLCBzaW5jZSB0aGUgcHJvdmluY2VzIGhhZCBiZWVuIGFzc2lnbmVkIHRvIG90aGVycy4gQWNjb3JkaW5nbHksIHRoZXJlIHdhcyBubyBleHBlZGllbnQsIGhvd2V2ZXIgbXVjaCBiZW5lYXRoIGhpcyBkaWduaXR5LCB0byB3aGljaCBMdWN1bGx1cyBkaWQgbm90IGZvcmNlIGhpbXNlbGYgdG8gcmVzb3J0LOKAlGVudHJlYXRpbmcgdGhlIHNvbGRpZXJzIG1hbiBieSBtYW4sIGdvaW5nIGFib3V0IGZyb20gdGVudCB0byB0ZW50IGluIGh1bWlsaXR5IGFuZCB0ZWFycywgYW5kIGFjdHVhbGx5IHRha2luZyBzb21lIG9mIHRoZSBtZW4gYnkgdGhlIGhhbmQgaW4gc3VwcGxpY2F0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5IHJlamVjdGVkIGhpcyBhZHZhbmNlcywgYW5kIHRocmV3IHRoZWlyIGVtcHR5IHB1cnNlcyBkb3duIGJlZm9yZSBoaW0sIGJpZGRpbmcgaGltIGZpZ2h0IHRoZSBlbmVteSBhbG9uZSwgc2luY2UgaGUgYWxvbmUga25ldyBob3cgdG8gZ2V0IHJpY2ggZnJvbSB0aGVtLiBIb3dldmVyLCBhdCB0aGUgcmVxdWVzdCBvZiB0aGUgb3RoZXIgc29sZGllcnMsIHRoZSBGaW1icmlhbnMgd2VyZSBjb25zdHJhaW5lZCB0byBhZ3JlZSB0byByZW1haW4gZHVyaW5nIHRoZSBzdW1tZXI7IGJ1dCBpZiwgaW4gdGhlIG1lYW50aW1lLCBubyBlbmVteSBzaG91bGQgY29tZSBkb3duIHRvIGZpZ2h0IHRoZW0sIHRoZXkgd2VyZSB0byBiZSBkaXNtaXNzZWQuIEx1Y3VsbHVzIHdhcyBvYmxpZ2VkIHRvIGNvbnRlbnQgaGltc2VsZiB3aXRoIHRoZXNlIHRlcm1zLCBvciBlbHNlIHRvIGJlIGRlc2VydGVkIGFuZCBnaXZlIHVwIHRoZSBjb3VudHJ5IHRvIHRoZSBCYXJiYXJpYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZXJlZm9yZSBzaW1wbHkgaGVsZCBoaXMgc29sZGllcnMgdG9nZXRoZXIsIHdpdGhvdXQgZm9yY2luZyB0aGVtIGFueSBtb3JlLCBvciBsZWFkaW5nIHRoZW0gb3V0IHRvIGJhdHRsZS4gVGhlaXIgcmVtYWluaW5nIHdpdGggaGltIHdhcyBhbGwgaGUgY291bGQgZXhwZWN0LCBhbmQgaGUgbG9va2VkIG9uIGhlbHBsZXNzbHkgd2hpbGUgVGlncmFuZXMgcmF2YWdlZCBDYXBwYWRvY2lhIGFuZCBNaXRocmlkYXRlcyByZXN1bWVkIGhpcyBpbnNvbGVudCB3YXlzLOKAlGEgbW9uYXJjaCB3aG9tIGhlIGhhZCByZXBvcnRlZCBieSBsZXR0ZXIgdG8gdGhlIFNlbmF0ZSBhcyBjb21wbGV0ZWx5IHN1YmR1ZWQuIEJlc2lkZXMsIHRoZSBjb21taXNzaW9uZXJzIHdlcmUgbm93IHdpdGggaGltLCB3aG8gaGFkIGJlZW4gc2VudCBvdXQgdG8gcmVndWxhdGUgdGhlIGFmZmFpcnMgb2YgUG9udHVzLCBvbiB0aGUgc3VwcG9zaXRpb24gdGhhdCBpdCB3YXMgYSBzZWN1cmUgUm9tYW4gcG9zc2Vzc2lvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBsbywgd2hlbiB0aGV5IGNhbWUsIHRoZXkgc2F3IHRoYXQgTHVjdWxsdXMgd2FzIG5vdCBldmVuIGhpcyBvd24gbWFzdGVyLCBidXQgd2FzIG1vY2tlZCBhbmQgaW5zdWx0ZWQgYnkgaGlzIHNvbGRpZXJzLiBUaGVzZSB3ZW50IHNvIGZhciBpbiB0aGVpciBvdXRyYWdlb3VzIHRyZWF0bWVudCBvZiB0aGVpciBnZW5lcmFsLCB0aGF0LCBhdCB0aGUgY2xvc2Ugb2YgdGhlIHN1bW1lciwgdGhleSBkb25uZWQgdGhlaXIgYXJtb3VyLCBkcmV3IHRoZWlyIHN3b3JkcywgYW5kIGNoYWxsZW5nZWQgdG8gYmF0dGxlIGFuIGVuZW15IHdobyB3YXMgbm93aGVyZSBuZWFyLCBidXQgaGFkIGFscmVhZHkgd2l0aGRyYXduLiBUaGVuIHRoZXkgc2hvdXRlZCB0aGVpciB3YXIgY3JpZXMsIGJyYW5kaXNoZWQgdGhlaXIgd2VhcG9ucyBpbiB0aGUgYWlyLCBhbmQgZGVwYXJ0ZWQgZnJvbSB0aGUgY2FtcCwgY2FsbGluZyBtZW4gdG8gd2l0bmVzcyB0aGF0IHRoZSB0aW1lIGhhZCBleHBpcmVkIGR1cmluZyB3aGljaCB0aGV5IGhhZCBhZ3JlZWQgdG8gcmVtYWluIHdpdGggTHVjdWxsdXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIHRoZSBzb2xkaWVycyBQb21wZXkgc3VtbW9uZWQgYnkgbGV0dGVyLCBmb3IgaGUgaGFkIGFscmVhZHkgYmVlbiBhcHBvaW50ZWQgdG8gY29uZHVjdCB0aGUgd2FyIGFnYWluc3QgTWl0aHJpZGF0ZXMgYW5kIFRpZ3JhbmVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjY2IEIuQy48L25vdGU+IGJlY2F1c2UgaGUgd29uIHRoZSBmYXZvdXIgb2YgdGhlIHBlb3BsZSBhbmQgZmxhdHRlcmVkIHRoZWlyIGxlYWRlcnMuIEJ1dCB0aGUgU2VuYXRlIGFuZCB0aGUgbm9iaWxpdHkgY29uc2lkZXJlZCBMdWN1bGx1cyBhIHdyb25nZWQgbWFuLiBIZSBoYWQgYmVlbiBzdXBlcnNlZGVkLCB0aGV5IHNhaWQsIG5vdCBpbiBhIHdhciwgYnV0IGluIGEgdHJpdW1waCwgYW5kIGhhZCBiZWVuIGZvcmNlZCB0byByZWxpbnF1aXNoIGFuZCB0dXJuIG92ZXIgdG8gb3RoZXJzLCBub3QgaGlzIGNhbXBhaWduLCBidXQgdGhlIHByaXplcyBvZiB2aWN0b3J5IGluIGhpcyBjYW1wYWlnbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIHRoZSBzb2xkaWVycyBQb21wZXkgc3VtbW9uZWQgYnkgbGV0dGVyLCBmb3IgaGUgaGFkIGFscmVhZHkgYmVlbiBhcHBvaW50ZWQgdG8gY29uZHVjdCB0aGUgd2FyIGFnYWluc3QgTWl0aHJpZGF0ZXMgYW5kIFRpZ3JhbmVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NjYgQi5DLjwvbm90ZT4gYmVjYXVzZSBoZSB3b24gdGhlIGZhdm91ciBvZiB0aGUgcGVvcGxlIGFuZCBmbGF0dGVyZWQgdGhlaXIgbGVhZGVycy4gQnV0IHRoZSBTZW5hdGUgYW5kIHRoZSBub2JpbGl0eSBjb25zaWRlcmVkIEx1Y3VsbHVzIGEgd3JvbmdlZCBtYW4uIEhlIGhhZCBiZWVuIHN1cGVyc2VkZWQsIHRoZXkgc2FpZCwgbm90IGluIGEgd2FyLCBidXQgaW4gYSB0cml1bXBoLCBhbmQgaGFkIGJlZW4gZm9yY2VkIHRvIHJlbGlucXVpc2ggYW5kIHR1cm4gb3ZlciB0byBvdGhlcnMsIG5vdCBoaXMgY2FtcGFpZ24sIGJ1dCB0aGUgcHJpemVzIG9mIHZpY3RvcnkgaW4gaGlzIGNhbXBhaWduLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdG8gdGhvc2Ugd2hvIHdlcmUgb24gdGhlIHNwb3QsIHdoYXQgaGFwcGVuZWQgdGhlcmUgc2VlbWVkIHN0aWxsIGdyZWF0ZXIgbWF0dGVyIGZvciB3cmF0aCBhbmQgaW5kaWduYXRpb24uIEZvciBMdWN1bGx1cyB3YXMgbm90IGFsbG93ZWQgdG8gYmVzdG93IHJld2FyZHMgb3IgcHVuaXNobWVudHMgZm9yIHdoYXQgaGFkIGJlZW4gZG9uZSBpbiB0aGUgd2FyLCBub3Igd291bGQgUG9tcGV5IGV2ZW4gc3VmZmVyIGFueSBvbmUgdG8gdmlzaXQgaGltLCBvciB0byBwYXkgYW55IGhlZWQgdG8gdGhlIGVkaWN0cyBhbmQgcmVndWxhdGlvbnMgd2hpY2ggaGUgbWFkZSBpbiBjb25jZXJ0IHdpdGggdGhlIHRlbiBjb21taXNzaW9uZXJzLCBidXQgcHJldmVudGVkIGl0IGJ5IGlzc3VpbmcgY291bnRlci1lZGljdHMsIGFuZCBieSB0aGUgdGVycm9yIHdoaWNoIGhpcyBwcmVzZW5jZSB3aXRoIGEgbGFyZ2VyIGZvcmNlIGluc3BpcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5OZXZlcnRoZWxlc3MsIHRoZWlyIGZyaWVuZHMgZGVjaWRlZCB0byBicmluZyB0aGUgdHdvIG1lbiB0b2dldGhlciwgYW5kIHNvIHRoZXkgbWV0IGluIGEgY2VydGFpbiB2aWxsYWdlIG9mIEdhbGF0aWEuIFRoZXkgZ3JlZXRlZCBvbmUgYW5vdGhlciBhbWljYWJseSwgYW5kIGVhY2ggY29uZ3JhdHVsYXRlZCB0aGUgb3RoZXIgb24gaGlzIHZpY3Rvcmllcy4gTHVjdWxsdXMgd2FzIHRoZSBlbGRlciBtYW4sIGJ1dCBQb21wZXkncyBwcmVzdGlnZSB3YXMgdGhlIGdyZWF0ZXIsIGJlY2F1c2UgaGUgaGFkIGNvbmR1Y3RlZCBtb3JlIGNhbXBhaWducywgYW5kIGNlbGVicmF0ZWQgdHdvIHRyaXVtcGhzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5GYXNjZXMgd3JlYXRoZWQgd2l0aCBsYXVyZWwgd2VyZSBjYXJyaWVkIGJlZm9yZSBib3RoIGNvbW1hbmRlcnMgaW4gdG9rZW4gb2YgdGhlaXIgdmljdG9yaWVzLCBhbmQgc2luY2UgUG9tcGV5IGhhZCBtYWRlIGEgbG9uZyBtYXJjaCB0aHJvdWdoIHdhdGVybGVzcyBhbmQgYXJpZCByZWdpb25zLCB0aGUgbGF1cmVsIHdoaWNoIHdyZWF0aGVkIGhpcyBmYXNjZXMgd2FzIHdpdGhlcmVkLiBXaGVuIHRoZSBsaWN0b3JzIG9mIEx1Y3VsbHVzIG5vdGljZWQgdGhpcywgdGhleSBjb25zaWRlcmF0ZWx5IGdhdmUgUG9tcGV5J3MgbGljdG9ycyBzb21lIG9mIHRoZWlyIG93biBsYXVyZWwsIHdoaWNoIHdhcyBmcmVzaCBhbmQgZ3JlZW4uIFRoaXMgY2lyY3Vtc3RhbmNlIHdhcyBpbnRlcnByZXRlZCBhcyBhIGdvb2Qgb21lbiBieSB0aGUgZnJpZW5kcyBvZiBQb21wZXk7IGZvciwgaW4gZmFjdCwgdGhlIGV4cGxvaXRzIG9mIEx1Y3VsbHVzIGRpZCBhZG9ybiB0aGUgY29tbWFuZCBvZiBQb21wZXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZWlyIGNvbmZlcmVuY2UgcmVzdWx0ZWQgaW4gYW4gZXF1aXRhYmxlIGFncmVlbWVudCwgYnV0IHRoZXkgbGVmdCBpdCBzdGlsbCBtb3JlIGVzdHJhbmdlZCBmcm9tIG9uZSBhbm90aGVyLiBQb21wZXkgYWxzbyBhbm51bGxlZCB0aGUgb3JkaW5hbmNlcyBvZiBMdWN1bGx1cywgYW5kIHRvb2sgYXdheSBhbGwgYnV0IHNpeHRlZW4gaHVuZHJlZCBvZiBoaXMgc29sZGllcnMuIFRoZXNlIGhlIGxlZnQgdG8gc2hhcmUgaGlzIHRyaXVtcGgsIGJ1dCBldmVuIHRoZXNlIGRpZCBub3QgZm9sbG93IGhpbSB2ZXJ5IGNoZWVyZnVsbHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIHN1Y2ggYSBtYXJ2ZWxsb3VzIGRlZ3JlZSB3YXMgTHVjdWxsdXMgZWl0aGVyIHVucXVhbGlmaWVkIG9yIHVuZm9ydHVuYXRlIGFzIHJlZ2FyZHMgdGhlIGZpcnN0IGFuZCBoaWdoZXN0IG9mIGFsbCByZXF1aXNpdGVzIGluIGEgbGVhZGVyLiBIYWQgdGhpcyBwb3dlciBvZiBnYWluaW5nIHRoZSBhZmZlY3Rpb24gb2YgaGlzIHNvbGRpZXJzIGJlZW4gYWRkZWQgdG8gaGlzIG90aGVyIGdpZnRzLCB3aGljaCB3ZXJlIHNvIG1hbnkgYW5kIHNvIGdyZWF0LOKAlGNvdXJhZ2UsIGRpbGlnZW5jZSwgd2lzZG9tLCBhbmQganVzdGljZSzigJR0aGUgUm9tYW4gZW1waXJlIHdvdWxkIG5vdCBoYXZlIGJlZW4gYm91bmRlZCBieSB0aGUgRXVwaHJhdGVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgYnkgdGhlIG91dGVyIGNvbmZpbmVzIG9mIEFzaWEsIGFuZCB0aGUgSHlyY2FuaWFuIHNlYTsgZm9yIGFsbCB0aGUgb3RoZXIgbmF0aW9ucyBoYWQgYWxyZWFkeSBiZWVuIHN1YmR1ZWQgYnkgVGlncmFuZXMsIGFuZCBpbiB0aGUgdGltZSBvZiBMdWN1bGx1cyB0aGUgUGFydGhpYW4gcG93ZXIgd2FzIG5vdCBzbyBncmVhdCBhcyBpdCBwcm92ZWQgdG8gYmUgaW4gdGhlIHRpbWUgb2YgQ3Jhc3N1cywgbm9yIHdhcyBpdCBzbyB3ZWxsIHVuaXRlZCwgbmF5IHJhdGhlciwgb3dpbmcgdG8gaW50ZXN0aW5lIGFuZCBuZWlnaGJvdXJpbmcgd2FycywgaXQgaGFkIG5vdCBldmVuIHN0cmVuZ3RoIGVub3VnaCB0byByZXBlbCB0aGUgd2FudG9uIGF0dGFja3Mgb2YgdGhlIEFybWVuaWFucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHRob3NlIHdobyB3ZXJlIG9uIHRoZSBzcG90LCB3aGF0IGhhcHBlbmVkIHRoZXJlIHNlZW1lZCBzdGlsbCBncmVhdGVyIG1hdHRlciBmb3Igd3JhdGggYW5kIGluZGlnbmF0aW9uLiBGb3IgTHVjdWxsdXMgd2FzIG5vdCBhbGxvd2VkIHRvIGJlc3RvdyByZXdhcmRzIG9yIHB1bmlzaG1lbnRzIGZvciB3aGF0IGhhZCBiZWVuIGRvbmUgaW4gdGhlIHdhciwgbm9yIHdvdWxkIFBvbXBleSBldmVuIHN1ZmZlciBhbnkgb25lIHRvIHZpc2l0IGhpbSwgb3IgdG8gcGF5IGFueSBoZWVkIHRvIHRoZSBlZGljdHMgYW5kIHJlZ3VsYXRpb25zIHdoaWNoIGhlIG1hZGUgaW4gY29uY2VydCB3aXRoIHRoZSB0ZW4gY29tbWlzc2lvbmVycywgYnV0IHByZXZlbnRlZCBpdCBieSBpc3N1aW5nIGNvdW50ZXItZWRpY3RzLCBhbmQgYnkgdGhlIHRlcnJvciB3aGljaCBoaXMgcHJlc2VuY2Ugd2l0aCBhIGxhcmdlciBmb3JjZSBpbnNwaXJlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgdGhlaXIgZnJpZW5kcyBkZWNpZGVkIHRvIGJyaW5nIHRoZSB0d28gbWVuIHRvZ2V0aGVyLCBhbmQgc28gdGhleSBtZXQgaW4gYSBjZXJ0YWluIHZpbGxhZ2Ugb2YgR2FsYXRpYS4gVGhleSBncmVldGVkIG9uZSBhbm90aGVyIGFtaWNhYmx5LCBhbmQgZWFjaCBjb25ncmF0dWxhdGVkIHRoZSBvdGhlciBvbiBoaXMgdmljdG9yaWVzLiBMdWN1bGx1cyB3YXMgdGhlIGVsZGVyIG1hbiwgYnV0IFBvbXBleSdzIHByZXN0aWdlIHdhcyB0aGUgZ3JlYXRlciwgYmVjYXVzZSBoZSBoYWQgY29uZHVjdGVkIG1vcmUgY2FtcGFpZ25zLCBhbmQgY2VsZWJyYXRlZCB0d28gdHJpdW1waHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZhc2NlcyB3cmVhdGhlZCB3aXRoIGxhdXJlbCB3ZXJlIGNhcnJpZWQgYmVmb3JlIGJvdGggY29tbWFuZGVycyBpbiB0b2tlbiBvZiB0aGVpciB2aWN0b3JpZXMsIGFuZCBzaW5jZSBQb21wZXkgaGFkIG1hZGUgYSBsb25nIG1hcmNoIHRocm91Z2ggd2F0ZXJsZXNzIGFuZCBhcmlkIHJlZ2lvbnMsIHRoZSBsYXVyZWwgd2hpY2ggd3JlYXRoZWQgaGlzIGZhc2NlcyB3YXMgd2l0aGVyZWQuIFdoZW4gdGhlIGxpY3RvcnMgb2YgTHVjdWxsdXMgbm90aWNlZCB0aGlzLCB0aGV5IGNvbnNpZGVyYXRlbHkgZ2F2ZSBQb21wZXkncyBsaWN0b3JzIHNvbWUgb2YgdGhlaXIgb3duIGxhdXJlbCwgd2hpY2ggd2FzIGZyZXNoIGFuZCBncmVlbi4gVGhpcyBjaXJjdW1zdGFuY2Ugd2FzIGludGVycHJldGVkIGFzIGEgZ29vZCBvbWVuIGJ5IHRoZSBmcmllbmRzIG9mIFBvbXBleTsgZm9yLCBpbiBmYWN0LCB0aGUgZXhwbG9pdHMgb2YgTHVjdWxsdXMgZGlkIGFkb3JuIHRoZSBjb21tYW5kIG9mIFBvbXBleS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZWlyIGNvbmZlcmVuY2UgcmVzdWx0ZWQgaW4gYW4gZXF1aXRhYmxlIGFncmVlbWVudCwgYnV0IHRoZXkgbGVmdCBpdCBzdGlsbCBtb3JlIGVzdHJhbmdlZCBmcm9tIG9uZSBhbm90aGVyLiBQb21wZXkgYWxzbyBhbm51bGxlZCB0aGUgb3JkaW5hbmNlcyBvZiBMdWN1bGx1cywgYW5kIHRvb2sgYXdheSBhbGwgYnV0IHNpeHRlZW4gaHVuZHJlZCBvZiBoaXMgc29sZGllcnMuIFRoZXNlIGhlIGxlZnQgdG8gc2hhcmUgaGlzIHRyaXVtcGgsIGJ1dCBldmVuIHRoZXNlIGRpZCBub3QgZm9sbG93IGhpbSB2ZXJ5IGNoZWVyZnVsbHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIHN1Y2ggYSBtYXJ2ZWxsb3VzIGRlZ3JlZSB3YXMgTHVjdWxsdXMgZWl0aGVyIHVucXVhbGlmaWVkIG9yIHVuZm9ydHVuYXRlIGFzIHJlZ2FyZHMgdGhlIGZpcnN0IGFuZCBoaWdoZXN0IG9mIGFsbCByZXF1aXNpdGVzIGluIGEgbGVhZGVyLiBIYWQgdGhpcyBwb3dlciBvZiBnYWluaW5nIHRoZSBhZmZlY3Rpb24gb2YgaGlzIHNvbGRpZXJzIGJlZW4gYWRkZWQgdG8gaGlzIG90aGVyIGdpZnRzLCB3aGljaCB3ZXJlIHNvIG1hbnkgYW5kIHNvIGdyZWF0LOKAlGNvdXJhZ2UsIGRpbGlnZW5jZSwgd2lzZG9tLCBhbmQganVzdGljZSzigJR0aGUgUm9tYW4gZW1waXJlIHdvdWxkIG5vdCBoYXZlIGJlZW4gYm91bmRlZCBieSB0aGUgRXVwaHJhdGVzLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBieSB0aGUgb3V0ZXIgY29uZmluZXMgb2YgQXNpYSwgYW5kIHRoZSBIeXJjYW5pYW4gc2VhOyBmb3IgYWxsIHRoZSBvdGhlciBuYXRpb25zIGhhZCBhbHJlYWR5IGJlZW4gc3ViZHVlZCBieSBUaWdyYW5lcywgYW5kIGluIHRoZSB0aW1lIG9mIEx1Y3VsbHVzIHRoZSBQYXJ0aGlhbiBwb3dlciB3YXMgbm90IHNvIGdyZWF0IGFzIGl0IHByb3ZlZCB0byBiZSBpbiB0aGUgdGltZSBvZiBDcmFzc3VzLCBub3Igd2FzIGl0IHNvIHdlbGwgdW5pdGVkLCBuYXkgcmF0aGVyLCBvd2luZyB0byBpbnRlc3RpbmUgYW5kIG5laWdoYm91cmluZyB3YXJzLCBpdCBoYWQgbm90IGV2ZW4gc3RyZW5ndGggZW5vdWdoIHRvIHJlcGVsIHRoZSB3YW50b24gYXR0YWNrcyBvZiB0aGUgQXJtZW5pYW5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdyBteSBvd24gb3BpbmlvbiBpcyB0aGF0IHRoZSBoYXJtIEx1Y3VsbHVzIGRpZCBoaXMgY291bnRyeSB0aHJvdWdoIGhpcyBpbmZsdWVuY2UgdXBvbiBvdGhlcnMsIHdhcyBncmVhdGVyIHRoYW4gdGhlIGdvb2QgaGUgZGlkIGhlciBoaW1zZWxmLiBGb3IgaGlzIHRyb3BoaWVzIGluIEFybWVuaWEsIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+c3RhbmRpbmcgb24gdGhlIGJvcmRlcnMgb2YgUGFydGhpYSwgYW5kIFRpZ3Jhbm9jZXJ0YSwgYW5kIE5pc2liaXMsIGFuZCB0aGUgdmFzdCB3ZWFsdGggYnJvdWdodCB0byBSb21lIGZyb20gdGhlc2UgY2l0aWVzLCBhbmQgdGhlIGRpc3BsYXkgaW4gaGlzIHRyaXVtcGggb2YgdGhlIGNhcHR1cmVkIGRpYWRlbSBvZiBUaWdyYW5lcywgaW5jaXRlZCBDcmFzc3VzIHRvIGhpcyBhdHRhY2sgdXBvbiBBc2lhOyBoZSB0aG91Z2h0IHRoYXQgdGhlIEJhcmJhcmlhbnMgd2VyZSBzcG9pbCBhbmQgYm9vdHksIGFuZCBub3RoaW5nIGVsc2UuIEl0IHdhcyBub3QgbG9uZywgaG93ZXZlciwgYmVmb3JlIGhlIGVuY291bnRlcmVkIHRoZSBQYXJ0aGlhbiBhcnJvd3MsIGFuZCBwcm92ZWQgdGhhdCBMdWN1bGx1cyBoYWQgd29uIGhpcyB2aWN0b3JpZXMsIG5vdCB0aHJvdWdoIHRoZSBmb2xseSBhbmQgY293YXJkaWNlIG9mIGhpcyBlbmVtaWVzLCBidXQgdGhyb3VnaCBoaXMgb3duIGRhcmluZyBhbmQgYWJpbGl0eS4gVGhpcywgaG93ZXZlciwgaXMgbGF0ZXIgaGlzdG9yeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPnN0YW5kaW5nIG9uIHRoZSBib3JkZXJzIG9mIFBhcnRoaWEsIGFuZCBUaWdyYW5vY2VydGEsIGFuZCBOaXNpYmlzLCBhbmQgdGhlIHZhc3Qgd2VhbHRoIGJyb3VnaHQgdG8gUm9tZSBmcm9tIHRoZXNlIGNpdGllcywgYW5kIHRoZSBkaXNwbGF5IGluIGhpcyB0cml1bXBoIG9mIHRoZSBjYXB0dXJlZCBkaWFkZW0gb2YgVGlncmFuZXMsIGluY2l0ZWQgQ3Jhc3N1cyB0byBoaXMgYXR0YWNrIHVwb24gQXNpYTsgaGUgdGhvdWdodCB0aGF0IHRoZSBCYXJiYXJpYW5zIHdlcmUgc3BvaWwgYW5kIGJvb3R5LCBhbmQgbm90aGluZyBlbHNlLiBJdCB3YXMgbm90IGxvbmcsIGhvd2V2ZXIsIGJlZm9yZSBoZSBlbmNvdW50ZXJlZCB0aGUgUGFydGhpYW4gYXJyb3dzLCBhbmQgcHJvdmVkIHRoYXQgTHVjdWxsdXMgaGFkIHdvbiBoaXMgdmljdG9yaWVzLCBub3QgdGhyb3VnaCB0aGUgZm9sbHkgYW5kIGNvd2FyZGljZSBvZiBoaXMgZW5lbWllcywgYnV0IHRocm91Z2ggaGlzIG93biBkYXJpbmcgYW5kIGFiaWxpdHkuIFRoaXMsIGhvd2V2ZXIsIGlzIGxhdGVyIGhpc3RvcnkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB3aGVuIEx1Y3VsbHVzIGhhZCByZXR1cm5lZCB0byBSb21lLCBoZSBmb3VuZCwgaW4gdGhlIGZpcnN0IHBsYWNlLCB0aGF0IGhpcyBicm90aGVyIE1hcmN1cyB3YXMgdW5kZXIgcHJvc2VjdXRpb24gYnkgR2FpdXMgTWVtbWl1cyBmb3IgaGlzIGFjdHMgYXMgcXVhZXN0b3IgdW5kZXIgdGhlIGFkbWluaXN0cmF0aW9uIG9mIFN1bGxhLiBNYXJjdXMsIGluZGVlZCwgd2FzIGFjcXVpdHRlZCwgYnV0IE1lbW1pdXMgdGhlbiB0dXJuZWQgaGlzIGF0dGFjayB1cG9uIEx1Y3VsbHVzLCBhbmQgc3Ryb3ZlIHRvIGV4Y2l0ZSB0aGUgcGVvcGxlIGFnYWluc3QgaGltLiBIZSBjaGFyZ2VkIGhpbSB3aXRoIGRpdmVydGluZyBtdWNoIHByb3BlcnR5IHRvIGhpcyBvd24gdXNlcywgYW5kIHdpdGggbmVlZGxlc3NseSBwcm90cmFjdGluZyB0aGUgd2FyLCBhbmQgZmluYWxseSBwZXJzdWFkZWQgdGhlIHBlb3BsZSBub3QgdG8gZ3JhbnQgaGltIGEgdHJpdW1waC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+THVjdWxsdXMgc3Ryb3ZlIG1pZ2h0aWx5IGFnYWluc3QgdGhpcyBkZWNpc2lvbiwgYW5kIHRoZSBmb3JlbW9zdCBhbmQgbW9zdCBpbmZsdWVudGlhbCBtZW4gbWluZ2xlZCB3aXRoIHRoZSB0cmliZXMsIGFuZCBieSBtdWNoIGVudHJlYXR5IGFuZCBleGVydGlvbiBhdCBsYXN0IHBlcnN1YWRlZCB0aGUgcGVvcGxlIHRvIGFsbG93IGhpbSB0byBjZWxlYnJhdGUgYSB0cml1bXBoOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjY2IEIuQy48L25vdGU+IG5vdCwgaG93ZXZlciwgbGlrZSBzb21lLCBhIHRyaXVtcGggd2hpY2ggd2FzIHN0YXJ0bGluZyBhbmQgdHVtdWx0dW91cyBmcm9tIHRoZSBsZW5ndGggb2YgdGhlIHByb2Nlc3Npb24gYW5kIHRoZSBtdWx0aXR1ZGUgb2Ygb2JqZWN0cyBkaXNwbGF5ZWQuIEluc3RlYWQsIGhlIGRlY29yYXRlZCB0aGUgY2lyY3VzIG9mIEZsYW1pbml1cyB3aXRoIHRoZSBhcm1zIG9mIHRoZSBlbmVteSwgd2hpY2ggd2VyZSB2ZXJ5IG51bWVyb3VzLCBhbmQgd2l0aCB0aGUgcm95YWwgZW5naW5lcyBvZiB3YXI7IGFuZCB0aGlzIHdhcyBhIGdyZWF0IHNwZWN0YWNsZSBpbiBpdHNlbGYsIGFuZCBmYXIgZnJvbSBjb250ZW1wdGlibGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgcHJvY2Vzc2lvbiwgYSBmZXcgb2YgdGhlIG1haWwtY2xhZCBob3JzZW1lbiBhbmQgdGVuIG9mIHRoZSBzY3l0aGUtYmVhcmluZyBjaGFyaW90cyBtb3ZlZCBhbG9uZywgdG9nZXRoZXIgd2l0aCBzaXh0eSBvZiB0aGUga2luZydzIGZyaWVuZHMgYW5kIGdlbmVyYWxzLiBBIGh1bmRyZWQgYW5kIHRlbiBicm9uemUtYmVha2VkIHNoaXBzIG9mIHdhciB3ZXJlIGFsc28gY2FycmllZCBhbG9uZywgYSBnb2xkZW4gc3RhdHVlIG9mIE1pdGhyaWRhdGVzIGhpbXNlbGYsIHNpeCBmZWV0IGluIGhlaWdodCwgYSB3b25kZXJmdWwgc2hpZWxkIGFkb3JuZWQgd2l0aCBwcmVjaW91cyBzdG9uZXMsIHR3ZW50eSBsaXR0ZXJzIG9mIHNpbHZlciB2ZXNzZWxzLCBhbmQgdGhpcnR5LXR3byBsaXR0ZXJzIG9mIGdvbGQgYmVha2VycywgYXJtb3VyLCBhbmQgbW9uZXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGlzIHdhcyBjYXJyaWVkIGJ5IG1lbi4gVGhlbiB0aGVyZSB3ZXJlIGVpZ2h0IG11bGVzIHdoaWNoIGJvcmUgZ29sZGVuIGNvdWNoZXMsIGZpZnR5LXNpeCBiZWFyaW5nIGluZ290cyBvZiBzaWx2ZXIsIGFuZCBhIGh1bmRyZWQgYW5kIHNldmVuIG1vcmUgYmVhcmluZyBzb21ldGhpbmcgbGVzcyB0aGFuIHR3byBtaWxsaW9uIHNldmVuIGh1bmRyZWQgdGhvdXNhbmQgcGllY2VzIG9mIHNpbHZlciBjb2luLiBUaGVyZSB3ZXJlIGFsc28gdGFibGV0cyB3aXRoIHJlY29yZHMgb2YgdGhlIHN1bXMgb2YgbW9uZXkgYWxyZWFkeSBwYWlkIGJ5IEx1Y3VsbHVzIHRvIFBvbXBleSBmb3IgdGhlIHdhciBhZ2FpbnN0IHRoZSBwaXJhdGVzLCBhbmQgdG8gdGhlIGtlZXBlcnMgb2YgdGhlIHB1YmxpYyB0cmVhc3VyeSwgYXMgd2VsbCBhcyBvZiB0aGUgZmFjdCB0aGF0IGVhY2ggb2YgaGlzIHNvbGRpZXJzIGhhZCByZWNlaXZlZCBuaW5lIGh1bmRyZWQgYW5kIGZpZnR5IGRyYWNobWFzLiBUbyBjcm93biBhbGwsIEx1Y3VsbHVzIGdhdmUgYSBtYWduaWZpY2VudCBmZWFzdCB0byB0aGUgY2l0eSwgYW5kIHRvIHRoZSBzdXJyb3VuZGluZyB2aWxsYWdlcyBjYWxsZWQgPGZvcmVpZ24gbGFuZz0ibGEiPlZpY2k8L2ZvcmVpZ24+LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHdoZW4gTHVjdWxsdXMgaGFkIHJldHVybmVkIHRvIFJvbWUsIGhlIGZvdW5kLCBpbiB0aGUgZmlyc3QgcGxhY2UsIHRoYXQgaGlzIGJyb3RoZXIgTWFyY3VzIHdhcyB1bmRlciBwcm9zZWN1dGlvbiBieSBHYWl1cyBNZW1taXVzIGZvciBoaXMgYWN0cyBhcyBxdWFlc3RvciB1bmRlciB0aGUgYWRtaW5pc3RyYXRpb24gb2YgU3VsbGEuIE1hcmN1cywgaW5kZWVkLCB3YXMgYWNxdWl0dGVkLCBidXQgTWVtbWl1cyB0aGVuIHR1cm5lZCBoaXMgYXR0YWNrIHVwb24gTHVjdWxsdXMsIGFuZCBzdHJvdmUgdG8gZXhjaXRlIHRoZSBwZW9wbGUgYWdhaW5zdCBoaW0uIEhlIGNoYXJnZWQgaGltIHdpdGggZGl2ZXJ0aW5nIG11Y2ggcHJvcGVydHkgdG8gaGlzIG93biB1c2VzLCBhbmQgd2l0aCBuZWVkbGVzc2x5IHByb3RyYWN0aW5nIHRoZSB3YXIsIGFuZCBmaW5hbGx5IHBlcnN1YWRlZCB0aGUgcGVvcGxlIG5vdCB0byBncmFudCBoaW0gYSB0cml1bXBoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIHN0cm92ZSBtaWdodGlseSBhZ2FpbnN0IHRoaXMgZGVjaXNpb24sIGFuZCB0aGUgZm9yZW1vc3QgYW5kIG1vc3QgaW5mbHVlbnRpYWwgbWVuIG1pbmdsZWQgd2l0aCB0aGUgdHJpYmVzLCBhbmQgYnkgbXVjaCBlbnRyZWF0eSBhbmQgZXhlcnRpb24gYXQgbGFzdCBwZXJzdWFkZWQgdGhlIHBlb3BsZSB0byBhbGxvdyBoaW0gdG8gY2VsZWJyYXRlIGEgdHJpdW1waDs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjY2IEIuQy48L25vdGU+IG5vdCwgaG93ZXZlciwgbGlrZSBzb21lLCBhIHRyaXVtcGggd2hpY2ggd2FzIHN0YXJ0bGluZyBhbmQgdHVtdWx0dW91cyBmcm9tIHRoZSBsZW5ndGggb2YgdGhlIHByb2Nlc3Npb24gYW5kIHRoZSBtdWx0aXR1ZGUgb2Ygb2JqZWN0cyBkaXNwbGF5ZWQuIEluc3RlYWQsIGhlIGRlY29yYXRlZCB0aGUgY2lyY3VzIG9mIEZsYW1pbml1cyB3aXRoIHRoZSBhcm1zIG9mIHRoZSBlbmVteSwgd2hpY2ggd2VyZSB2ZXJ5IG51bWVyb3VzLCBhbmQgd2l0aCB0aGUgcm95YWwgZW5naW5lcyBvZiB3YXI7IGFuZCB0aGlzIHdhcyBhIGdyZWF0IHNwZWN0YWNsZSBpbiBpdHNlbGYsIGFuZCBmYXIgZnJvbSBjb250ZW1wdGlibGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgcHJvY2Vzc2lvbiwgYSBmZXcgb2YgdGhlIG1haWwtY2xhZCBob3JzZW1lbiBhbmQgdGVuIG9mIHRoZSBzY3l0aGUtYmVhcmluZyBjaGFyaW90cyBtb3ZlZCBhbG9uZywgdG9nZXRoZXIgd2l0aCBzaXh0eSBvZiB0aGUga2luZydzIGZyaWVuZHMgYW5kIGdlbmVyYWxzLiBBIGh1bmRyZWQgYW5kIHRlbiBicm9uemUtYmVha2VkIHNoaXBzIG9mIHdhciB3ZXJlIGFsc28gY2FycmllZCBhbG9uZywgYSBnb2xkZW4gc3RhdHVlIG9mIE1pdGhyaWRhdGVzIGhpbXNlbGYsIHNpeCBmZWV0IGluIGhlaWdodCwgYSB3b25kZXJmdWwgc2hpZWxkIGFkb3JuZWQgd2l0aCBwcmVjaW91cyBzdG9uZXMsIHR3ZW50eSBsaXR0ZXJzIG9mIHNpbHZlciB2ZXNzZWxzLCBhbmQgdGhpcnR5LXR3byBsaXR0ZXJzIG9mIGdvbGQgYmVha2VycywgYXJtb3VyLCBhbmQgbW9uZXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGlzIHdhcyBjYXJyaWVkIGJ5IG1lbi4gVGhlbiB0aGVyZSB3ZXJlIGVpZ2h0IG11bGVzIHdoaWNoIGJvcmUgZ29sZGVuIGNvdWNoZXMsIGZpZnR5LXNpeCBiZWFyaW5nIGluZ290cyBvZiBzaWx2ZXIsIGFuZCBhIGh1bmRyZWQgYW5kIHNldmVuIG1vcmUgYmVhcmluZyBzb21ldGhpbmcgbGVzcyB0aGFuIHR3byBtaWxsaW9uIHNldmVuIGh1bmRyZWQgdGhvdXNhbmQgcGllY2VzIG9mIHNpbHZlciBjb2luLiBUaGVyZSB3ZXJlIGFsc28gdGFibGV0cyB3aXRoIHJlY29yZHMgb2YgdGhlIHN1bXMgb2YgbW9uZXkgYWxyZWFkeSBwYWlkIGJ5IEx1Y3VsbHVzIHRvIFBvbXBleSBmb3IgdGhlIHdhciBhZ2FpbnN0IHRoZSBwaXJhdGVzLCBhbmQgdG8gdGhlIGtlZXBlcnMgb2YgdGhlIHB1YmxpYyB0cmVhc3VyeSwgYXMgd2VsbCBhcyBvZiB0aGUgZmFjdCB0aGF0IGVhY2ggb2YgaGlzIHNvbGRpZXJzIGhhZCByZWNlaXZlZCBuaW5lIGh1bmRyZWQgYW5kIGZpZnR5IGRyYWNobWFzLiBUbyBjcm93biBhbGwsIEx1Y3VsbHVzIGdhdmUgYSBtYWduaWZpY2VudCBmZWFzdCB0byB0aGUgY2l0eSwgYW5kIHRvIHRoZSBzdXJyb3VuZGluZyB2aWxsYWdlcyBjYWxsZWQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+VmljaTwvZm9yZWlnbj4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhpcyBkaXZvcmNlIGZyb20gQ2xvZGlhLCB3aG8gd2FzIGEgbGljZW50aW91cyBhbmQgYmFzZSB3b21hbiwgaGUgbWFycmllZCBTZXJ2aWxpYSwgYSBzaXN0ZXIgb2YgQ2F0bywgYnV0IHRoaXMsIHRvbywgd2FzIGFuIHVuZm9ydHVuYXRlIG1hcnJpYWdlLiBGb3IgaXQgbGFja2VkIG5vbmUgb2YgdGhlIGV2aWxzIHdoaWNoIENsb2RpYSBoYWQgYnJvdWdodCBpbiBoZXIgdHJhaW4gZXhjZXB0IG9uZSwgbmFtZWx5LCB0aGUgc2NhbmRhbCBhYm91dCBoZXIgYnJvdGhlcnMuIEluIGFsbCBvdGhlciByZXNwZWN0cyBTZXJ2aWxpYSB3YXMgZXF1YWxseSB2aWxlIGFuZCBhYmFuZG9uZWQsIGFuZCB5ZXQgTHVjdWxsdXMgZm9yY2VkIGhpbXNlbGYgdG8gdG9sZXJhdGUgaGVyLCBvdXQgb2YgcmVnYXJkIGZvciBDYXRvLiBBdCBsYXN0LCBob3dldmVyLCBoZSBwdXQgaGVyIGF3YXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGlzIGRpdm9yY2UgZnJvbSBDbG9kaWEsIHdobyB3YXMgYSBsaWNlbnRpb3VzIGFuZCBiYXNlIHdvbWFuLCBoZSBtYXJyaWVkIFNlcnZpbGlhLCBhIHNpc3RlciBvZiBDYXRvLCBidXQgdGhpcywgdG9vLCB3YXMgYW4gdW5mb3J0dW5hdGUgbWFycmlhZ2UuIEZvciBpdCBsYWNrZWQgbm9uZSBvZiB0aGUgZXZpbHMgd2hpY2ggQ2xvZGlhIGhhZCBicm91Z2h0IGluIGhlciB0cmFpbiBleGNlcHQgb25lLCBuYW1lbHksIHRoZSBzY2FuZGFsIGFib3V0IGhlciBicm90aGVycy4gSW4gYWxsIG90aGVyIHJlc3BlY3RzIFNlcnZpbGlhIHdhcyBlcXVhbGx5IHZpbGUgYW5kIGFiYW5kb25lZCwgYW5kIHlldCBMdWN1bGx1cyBmb3JjZWQgaGltc2VsZiB0byB0b2xlcmF0ZSBoZXIsIG91dCBvZiByZWdhcmQgZm9yIENhdG8uIEF0IGxhc3QsIGhvd2V2ZXIsIGhlIHB1dCBoZXIgYXdheS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFNlbmF0ZSBoYWQgY29uY2VpdmVkIHdvbmRyb3VzIGhvcGVzIHRoYXQgaW4gaGltIGl0IHdvdWxkIGZpbmQgYW4gb3Bwb3NlciBvZiB0aGUgdHlyYW5ueSBvZiBQb21wZXkgYW5kIGEgY2hhbXBpb24gb2YgdGhlIGFyaXN0b2NyYWN5LCB3aXRoIGFsbCB0aGUgYWR2YW50YWdlIG9mIGdyZWF0IGdsb3J5IGFuZCBpbmZsdWVuY2U7IGJ1dCBoZSBxdWl0dGVkIGFuZCBhYmFuZG9uZWQgcHVibGljIGFmZmFpcnMsIGVpdGhlciBiZWNhdXNlIGhlIHNhdyB0aGF0IHRoZXkgd2VyZSBhbHJlYWR5IGJleW9uZCBwcm9wZXIgY29udHJvbCBhbmQgZGlzZWFzZWQsIG9yLCBhcyBzb21lIHNheSwgYmVjYXVzZSBoZSBoYWQgaGlzIGZpbGwgb2YgZ2xvcnksIGFuZCBmZWx0IHRoYXQgdGhlIHVuZm9ydHVuYXRlIGlzc3VlIG9mIGhpcyBtYW55IHN0cnVnZ2xlcyBhbmQgdG9pbHMgZW50aXRsZWQgaGltIHRvIGZhbGwgYmFjayB1cG9uIGEgbGlmZSBvZiBlYXNlIGFuZCBsdXh1cnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgY29tbWVuZCBoaW0gZm9yIG1ha2luZyBzdWNoIGEgY2hhbmdlLCBhbmQgdGhlcmVieSBlc2NhcGluZyB0aGUgdW5oYXBweSBsb3Qgb2YgTWFyaXVzLCB3aG8sIGFmdGVyIGhpcyBDaW1icmlhbiB2aWN0b3JpZXMgYW5kIHRoZSBsYXJnZSBhbmQgZmFpciBzdWNjZXNzZXMgd2hpY2ggd2VyZSBzbyBmYW1vdXMsIHdhcyB1bndpbGxpbmcgdG8gcmVsYXggaGlzIGVmZm9ydHMgYW5kIGVuam95IHRoZSBob25vdXJzIHdvbiwgYnV0IHdpdGggYW4gaW5zYXRpYXRlIGRlc2lyZSBmb3IgZ2xvcnkgYW5kIHBvd2VyLCBvbGQgbWFuIHRoYXQgaGUgd2FzLCBmb3VnaHQgd2l0aCB5b3VuZyBtZW4gaW4gdGhlIGNvbmR1Y3Qgb2YgdGhlIHN0YXRlLCBhbmQgc28gZHJvdmUgaGVhZGxvbmcgaW50byB0ZXJyaWJsZSBkZWVkcywgYW5kIHN1ZmZlcmluZ3MgbW9yZSB0ZXJyaWJsZSBzdGlsbC4gQ2ljZXJvLCBzYXkgdGhlc2UsIHdvdWxkIGhhdmUgaGFkIGEgYmV0dGVyIG9sZCBhZ2UgaWYgaGUgaGFkIHRha2VuIGluIHNhaWwgYWZ0ZXIgdGhlIGFmZmFpciBvZiBDYXRpbGluZSwgYW5kIFNjaXBpbywgdG9vLCBpZiBoZSBoYWQgZ2l2ZW4gaGltc2VsZiBwYXVzZSBhZnRlciBhZGRpbmcgTnVtYW50aWEgdG8gQ2FydGhhZ2U7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmZvciBhIHBvbGl0aWNhbCBjeWNsZSwgdG9vLCBoYXMgYSBzb3J0IG9mIG5hdHVyYWwgdGVybWluYXRpb24sIGFuZCBwb2xpdGljYWwgbm8gbGVzcyB0aGFuIGF0aGxldGljIGNvbnRlc3RzIGFyZSBhYnN1cmQsIGFmdGVyIHRoZSBmdWxsIHZpZ29yIG9mIGxpZmUgaGFzIGRlcGFydGVkLiBDcmFzc3VzIGFuZCBQb21wZXksIG9uIHRoZSBvdGhlciBoYW5kLCByaWRpY3VsZWQgTHVjdWxsdXMgZm9yIGdpdmluZyBoaW1zZWxmIHVwIHRvIHBsZWFzdXJlIGFuZCBleHRyYXZhZ2FuY2UsIGFzIGlmIGEgbHV4dXJpb3VzIGxpZmUgd2VyZSBub3QgZXZlbiBtb3JlIHVuc3VpdGFibGUgdG8gbWVuIG9mIGhpcyB5ZWFycyB0aGFuIHBvbGl0aWNhbCBhbmQgbWlsaXRhcnkgYWN0aXZpdGllcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBTZW5hdGUgaGFkIGNvbmNlaXZlZCB3b25kcm91cyBob3BlcyB0aGF0IGluIGhpbSBpdCB3b3VsZCBmaW5kIGFuIG9wcG9zZXIgb2YgdGhlIHR5cmFubnkgb2YgUG9tcGV5IGFuZCBhIGNoYW1waW9uIG9mIHRoZSBhcmlzdG9jcmFjeSwgd2l0aCBhbGwgdGhlIGFkdmFudGFnZSBvZiBncmVhdCBnbG9yeSBhbmQgaW5mbHVlbmNlOyBidXQgaGUgcXVpdHRlZCBhbmQgYWJhbmRvbmVkIHB1YmxpYyBhZmZhaXJzLCBlaXRoZXIgYmVjYXVzZSBoZSBzYXcgdGhhdCB0aGV5IHdlcmUgYWxyZWFkeSBiZXlvbmQgcHJvcGVyIGNvbnRyb2wgYW5kIGRpc2Vhc2VkLCBvciwgYXMgc29tZSBzYXksIGJlY2F1c2UgaGUgaGFkIGhpcyBmaWxsIG9mIGdsb3J5LCBhbmQgZmVsdCB0aGF0IHRoZSB1bmZvcnR1bmF0ZSBpc3N1ZSBvZiBoaXMgbWFueSBzdHJ1Z2dsZXMgYW5kIHRvaWxzIGVudGl0bGVkIGhpbSB0byBmYWxsIGJhY2sgdXBvbiBhIGxpZmUgb2YgZWFzZSBhbmQgbHV4dXJ5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgY29tbWVuZCBoaW0gZm9yIG1ha2luZyBzdWNoIGEgY2hhbmdlLCBhbmQgdGhlcmVieSBlc2NhcGluZyB0aGUgdW5oYXBweSBsb3Qgb2YgTWFyaXVzLCB3aG8sIGFmdGVyIGhpcyBDaW1icmlhbiB2aWN0b3JpZXMgYW5kIHRoZSBsYXJnZSBhbmQgZmFpciBzdWNjZXNzZXMgd2hpY2ggd2VyZSBzbyBmYW1vdXMsIHdhcyB1bndpbGxpbmcgdG8gcmVsYXggaGlzIGVmZm9ydHMgYW5kIGVuam95IHRoZSBob25vdXJzIHdvbiwgYnV0IHdpdGggYW4gaW5zYXRpYXRlIGRlc2lyZSBmb3IgZ2xvcnkgYW5kIHBvd2VyLCBvbGQgbWFuIHRoYXQgaGUgd2FzLCBmb3VnaHQgd2l0aCB5b3VuZyBtZW4gaW4gdGhlIGNvbmR1Y3Qgb2YgdGhlIHN0YXRlLCBhbmQgc28gZHJvdmUgaGVhZGxvbmcgaW50byB0ZXJyaWJsZSBkZWVkcywgYW5kIHN1ZmZlcmluZ3MgbW9yZSB0ZXJyaWJsZSBzdGlsbC4gQ2ljZXJvLCBzYXkgdGhlc2UsIHdvdWxkIGhhdmUgaGFkIGEgYmV0dGVyIG9sZCBhZ2UgaWYgaGUgaGFkIHRha2VuIGluIHNhaWwgYWZ0ZXIgdGhlIGFmZmFpciBvZiBDYXRpbGluZSwgYW5kIFNjaXBpbywgdG9vLCBpZiBoZSBoYWQgZ2l2ZW4gaGltc2VsZiBwYXVzZSBhZnRlciBhZGRpbmcgTnVtYW50aWEgdG8gQ2FydGhhZ2U7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmZvciBhIHBvbGl0aWNhbCBjeWNsZSwgdG9vLCBoYXMgYSBzb3J0IG9mIG5hdHVyYWwgdGVybWluYXRpb24sIGFuZCBwb2xpdGljYWwgbm8gbGVzcyB0aGFuIGF0aGxldGljIGNvbnRlc3RzIGFyZSBhYnN1cmQsIGFmdGVyIHRoZSBmdWxsIHZpZ29yIG9mIGxpZmUgaGFzIGRlcGFydGVkLiBDcmFzc3VzIGFuZCBQb21wZXksIG9uIHRoZSBvdGhlciBoYW5kLCByaWRpY3VsZWQgTHVjdWxsdXMgZm9yIGdpdmluZyBoaW1zZWxmIHVwIHRvIHBsZWFzdXJlIGFuZCBleHRyYXZhZ2FuY2UsIGFzIGlmIGEgbHV4dXJpb3VzIGxpZmUgd2VyZSBub3QgZXZlbiBtb3JlIHVuc3VpdGFibGUgdG8gbWVuIG9mIGhpcyB5ZWFycyB0aGFuIHBvbGl0aWNhbCBhbmQgbWlsaXRhcnkgYWN0aXZpdGllcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIHRydWUgdGhhdCBpbiB0aGUgbGlmZSBvZiBMdWN1bGx1cywgYXMgaW4gYW4gYW5jaWVudCBjb21lZHksIG9uZSByZWFkcyBpbiB0aGUgZmlyc3QgcGFydCBvZiBwb2xpdGljYWwgbWVhc3VyZXMgYW5kIG1pbGl0YXJ5IGNvbW1hbmRzLCBhbmQgaW4gdGhlIGxhdHRlciBwYXJ0IG9mIGRyaW5raW5nIGJvdXRzLCBhbmQgYmFucXVldHMsIGFuZCB3aGF0IG1pZ2h0IHBhc3MgZm9yIHJldmVsLXJvdXRzLCBhbmQgdG9yY2gtcmFjZXMsIGFuZCBhbGwgbWFubmVyIG9mIGZyaXZvbGl0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEkgbXVzdCBjb3VudCBhcyBmcml2b2xpdHkgaGlzIGNvc3RseSBlZGlmaWNlcywgaGlzIGFtYnVsYXRvcmllcyBhbmQgYmF0aHMsIGFuZCBzdGlsbCBtb3JlIGhpcyBwYWludGluZ3MgYW5kIHN0YXR1ZXMgKG5vdCB0byBzcGVhayBvZiBoaXMgZGV2b3Rpb24gdG8gdGhlc2UgYXJ0cyksIHdoaWNoIGhlIGNvbGxlY3RlZCBhdCBlbm9ybW91cyBvdXRsYXlzLCBwb3VyaW5nIG91dCBpbnRvIHN1Y2ggY2hhbm5lbHMgdGhlIHZhc3QgYW5kIHNwbGVuZGlkIHdlYWx0aCB3aGljaCBoZSBhY2N1bXVsYXRlZCBmcm9tIGhpcyBjYW1wYWlnbnMuIEV2ZW4gbm93LCB3aGVuIGx1eHVyeSBoYXMgaW5jcmVhc2VkIHNvIG11Y2gsIHRoZSBnYXJkZW5zIG9mIEx1Y3VsbHVzIGFyZSBjb3VudGVkIGFtb25nIHRoZSBtb3N0IGNvc3RseSBvZiB0aGUgaW1wZXJpYWwgZ2FyZGVucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIGhpcyB3b3JrcyBvbiB0aGUgc2Vhc2hvcmUgYW5kIGluIHRoZSB2aWNpbml0eSBvZiBOZWFwb2xpcywgd2hlcmUgaGUgc3VzcGVuZGVkIGhpbGxzIG92ZXIgdmFzdCB0dW5uZWxzLCBnaXJkbGVkIGhpcyByZXNpZGVuY2VzIHdpdGggem9uZXMgb2Ygc2VhIGFuZCB3aXRoIHN0cmVhbXMgZm9yIHRoZSBicmVlZGluZyBvZiBmaXNoLCBhbmQgYnVpbHQgZHdlbGxpbmdzIGluIHRoZSBzZWEs4oCUd2hlbiBUdWJlcm8gdGhlIFN0b2ljIHNhdyB0aGVtLCBoZSBjYWxsZWQgaGltIFhlcnhlcyBpbiBhIHRvZ2EuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBhbHNvIGNvdW50cnkgZXN0YWJsaXNobWVudHMgbmVhciBUdXNjdWx1bSwgd2l0aCBvYnNlcnZhdG9yaWVzLCBhbmQgZXh0ZW5zaXZlIG9wZW4gYmFucXVldGluZyBoYWxscyBhbmQgY2xvaXN0ZXJzLiBQb21wZXkgb25jZSB2aXNpdGVkIHRoZXNlLCBhbmQgY2hpZGVkIEx1Y3VsbHVzIGJlY2F1c2UgaGUgaGFkIGFycmFuZ2VkIGhpcyBjb3VudHJ5IHNlYXQgaW4gdGhlIGJlc3QgcG9zc2libGUgd2F5IGZvciBzdW1tZXIsIGJ1dCBoYWQgbWFkZSBpdCB1bmluaGFiaXRhYmxlIGluIHdpbnRlci4gV2hlcmV1cG9uIEx1Y3VsbHVzIGJ1cnN0IG91dCBsYXVnaGluZyBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EbyB5b3Ugc3VwcG9zZSwgdGhlbiwgdGhhdCBJIGhhdmUgbGVzcyBzZW5zZSB0aGFuIGNyYW5lcyBhbmQgc3RvcmtzLCBhbmQgZG8gbm90IGNoYW5nZSByZXNpZGVuY2VzIGFjY29yZGluZyB0byB0aGUgc2Vhc29ucz88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QSBwcmFldG9yIHdhcyBvbmNlIG1ha2luZyBhbWJpdGlvdXMgcGxhbnMgZm9yIGEgcHVibGljIHNwZWN0YWNsZSwgYW5kIGFza2VkIG9mIGhpbSBzb21lIHB1cnBsZSBjbG9ha3MgZm9yIHRoZSBhZG9ybm1lbnQgb2YgYSBjaG9ydXMuIEx1Y3VsbHVzIHJlcGxpZWQgdGhhdCBoZSB3b3VsZCBpbnZlc3RpZ2F0ZSwgYW5kIGlmIGhlIGhhZCBhbnksIHdvdWxkIGdpdmUgdGhlbSB0byBoaW0uIFRoZSBuZXh0IGRheSBoZSBhc2tlZCB0aGUgcHJhZXRvciBob3cgbWFueSBoZSB3YW50ZWQsIGFuZCBvbiBoaXMgcmVwbHlpbmcgdGhhdCBhIGh1bmRyZWQgd291bGQgc3VmZmljZSwgYmFkZSBoaW0gdGFrZSB0d2ljZSB0aGF0IG51bWJlci4gVGhlIHBvZXQgRmxhY2N1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9yLiBFcC4gMS42LjQ1Ij4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkVwaXN0LjwvdGl0bGU+IGkuIDYsIDQ1IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFsbHVkZWQgdG8gdGhpcyB3aGVuIGhlIHNhaWQgdGhhdCBoZSBkaWQgbm90IHJlZ2FyZCBhIGhvdXNlIGFzIHdlYWx0aHkgaW4gd2hpY2ggdGhlIHRyZWFzdXJlcyB0aGF0IHdlcmUgb3Zlcmxvb2tlZCBhbmQgdW5vYnNlcnZlZCB3ZXJlIG5vdCBtb3JlIHRoYW4gdGhvc2Ugd2hpY2ggbWV0IHRoZSBleWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIHRydWUgdGhhdCBpbiB0aGUgbGlmZSBvZiBMdWN1bGx1cywgYXMgaW4gYW4gYW5jaWVudCBjb21lZHksIG9uZSByZWFkcyBpbiB0aGUgZmlyc3QgcGFydCBvZiBwb2xpdGljYWwgbWVhc3VyZXMgYW5kIG1pbGl0YXJ5IGNvbW1hbmRzLCBhbmQgaW4gdGhlIGxhdHRlciBwYXJ0IG9mIGRyaW5raW5nIGJvdXRzLCBhbmQgYmFucXVldHMsIGFuZCB3aGF0IG1pZ2h0IHBhc3MgZm9yIHJldmVsLXJvdXRzLCBhbmQgdG9yY2gtcmFjZXMsIGFuZCBhbGwgbWFubmVyIG9mIGZyaXZvbGl0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBJIG11c3QgY291bnQgYXMgZnJpdm9saXR5IGhpcyBjb3N0bHkgZWRpZmljZXMsIGhpcyBhbWJ1bGF0b3JpZXMgYW5kIGJhdGhzLCBhbmQgc3RpbGwgbW9yZSBoaXMgcGFpbnRpbmdzIGFuZCBzdGF0dWVzIChub3QgdG8gc3BlYWsgb2YgaGlzIGRldm90aW9uIHRvIHRoZXNlIGFydHMpLCB3aGljaCBoZSBjb2xsZWN0ZWQgYXQgZW5vcm1vdXMgb3V0bGF5cywgcG91cmluZyBvdXQgaW50byBzdWNoIGNoYW5uZWxzIHRoZSB2YXN0IGFuZCBzcGxlbmRpZCB3ZWFsdGggd2hpY2ggaGUgYWNjdW11bGF0ZWQgZnJvbSBoaXMgY2FtcGFpZ25zLiBFdmVuIG5vdywgd2hlbiBsdXh1cnkgaGFzIGluY3JlYXNlZCBzbyBtdWNoLCB0aGUgZ2FyZGVucyBvZiBMdWN1bGx1cyBhcmUgY291bnRlZCBhbW9uZyB0aGUgbW9zdCBjb3N0bHkgb2YgdGhlIGltcGVyaWFsIGdhcmRlbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBoaXMgd29ya3Mgb24gdGhlIHNlYXNob3JlIGFuZCBpbiB0aGUgdmljaW5pdHkgb2YgTmVhcG9saXMsIHdoZXJlIGhlIHN1c3BlbmRlZCBoaWxscyBvdmVyIHZhc3QgdHVubmVscywgZ2lyZGxlZCBoaXMgcmVzaWRlbmNlcyB3aXRoIHpvbmVzIG9mIHNlYSBhbmQgd2l0aCBzdHJlYW1zIGZvciB0aGUgYnJlZWRpbmcgb2YgZmlzaCwgYW5kIGJ1aWx0IGR3ZWxsaW5ncyBpbiB0aGUgc2VhLOKAlHdoZW4gVHViZXJvIHRoZSBTdG9pYyBzYXcgdGhlbSwgaGUgY2FsbGVkIGhpbSBYZXJ4ZXMgaW4gYSB0b2dhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBhbHNvIGNvdW50cnkgZXN0YWJsaXNobWVudHMgbmVhciBUdXNjdWx1bSwgd2l0aCBvYnNlcnZhdG9yaWVzLCBhbmQgZXh0ZW5zaXZlIG9wZW4gYmFucXVldGluZyBoYWxscyBhbmQgY2xvaXN0ZXJzLiBQb21wZXkgb25jZSB2aXNpdGVkIHRoZXNlLCBhbmQgY2hpZGVkIEx1Y3VsbHVzIGJlY2F1c2UgaGUgaGFkIGFycmFuZ2VkIGhpcyBjb3VudHJ5IHNlYXQgaW4gdGhlIGJlc3QgcG9zc2libGUgd2F5IGZvciBzdW1tZXIsIGJ1dCBoYWQgbWFkZSBpdCB1bmluaGFiaXRhYmxlIGluIHdpbnRlci4gV2hlcmV1cG9uIEx1Y3VsbHVzIGJ1cnN0IG91dCBsYXVnaGluZyBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvIHlvdSBzdXBwb3NlLCB0aGVuLCB0aGF0IEkgaGF2ZSBsZXNzIHNlbnNlIHRoYW4gY3JhbmVzIGFuZCBzdG9ya3MsIGFuZCBkbyBub3QgY2hhbmdlIHJlc2lkZW5jZXMgYWNjb3JkaW5nIHRvIHRoZSBzZWFzb25zPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkEgcHJhZXRvciB3YXMgb25jZSBtYWtpbmcgYW1iaXRpb3VzIHBsYW5zIGZvciBhIHB1YmxpYyBzcGVjdGFjbGUsIGFuZCBhc2tlZCBvZiBoaW0gc29tZSBwdXJwbGUgY2xvYWtzIGZvciB0aGUgYWRvcm5tZW50IG9mIGEgY2hvcnVzLiBMdWN1bGx1cyByZXBsaWVkIHRoYXQgaGUgd291bGQgaW52ZXN0aWdhdGUsIGFuZCBpZiBoZSBoYWQgYW55LCB3b3VsZCBnaXZlIHRoZW0gdG8gaGltLiBUaGUgbmV4dCBkYXkgaGUgYXNrZWQgdGhlIHByYWV0b3IgaG93IG1hbnkgaGUgd2FudGVkLCBhbmQgb24gaGlzIHJlcGx5aW5nIHRoYXQgYSBodW5kcmVkIHdvdWxkIHN1ZmZpY2UsIGJhZGUgaGltIHRha2UgdHdpY2UgdGhhdCBudW1iZXIuIFRoZSBwb2V0IEZsYWNjdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb3IuIEVwLiAxLjYuNDUiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcGlzdC48L3RpdGxlPiBpLiA2LCA0NSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbGx1ZGVkIHRvIHRoaXMgd2hlbiBoZSBzYWlkIHRoYXQgaGUgZGlkIG5vdCByZWdhcmQgYSBob3VzZSBhcyB3ZWFsdGh5IGluIHdoaWNoIHRoZSB0cmVhc3VyZXMgdGhhdCB3ZXJlIG92ZXJsb29rZWQgYW5kIHVub2JzZXJ2ZWQgd2VyZSBub3QgbW9yZSB0aGFuIHRob3NlIHdoaWNoIG1ldCB0aGUgZXllLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb3IuIEVwLiAxLjYuNDUiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcGlzdC48L3RpdGxlPiBpLiA2LCA0NSBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBpc3QuPC90aXRsZT4gaS4gNiwgNDUgZi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZGFpbHkgcmVwYXN0cyBvZiBMdWN1bGx1cyB3ZXJlIHN1Y2ggYXMgdGhlIG5ld2x5IHJpY2ggYWZmZWN0LiBOb3Qgb25seSB3aXRoIGhpcyBkeWVkIGNvdmVybGV0cywgYW5kIGJlYWtlcnMgc2V0IHdpdGggcHJlY2lvdXMgc3RvbmVzLCBhbmQgY2hvcnVzZXMgYW5kIGRyYW1hdGljIHJlY2l0YXRpb25zLCBidXQgYWxzbyB3aXRoIGhpcyBhcnJheXMgb2YgYWxsIHNvcnRzIG9mIG1lYXRzIGFuZCBkYWludGlseSBwcmVwYXJlZCBkaXNoZXMsIGRpZCBoZSBtYWtlIGhpbXNlbGYgdGhlIGVudnkgb2YgdGhlIHZ1bGdhci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QSBzYXlpbmcgb2YgUG9tcGV5J3MsIHdoZW4gaGUgd2FzIGlsbCwgd2FzIGNlcnRhaW5seSB2ZXJ5IHBvcHVsYXIuIEhpcyBwaHlzaWNpYW5zIGhhZCBwcmVzY3JpYmVkIGEgdGhydXNoIGZvciBoaW0gdG8gZWF0LCBhbmQgaGlzIHNlcnZhbnRzIHNhaWQgdGhhdCBhIHRocnVzaCBjb3VsZCBub3QgYmUgZm91bmQgYW55d2hlcmUgaW4gdGhlIHN1bW1lciBzZWFzb24gZXhjZXB0IHdoZXJlIEx1Y3VsbHVzIGtlcHQgdGhlbSBmYXR0ZW5pbmcuIFBvbXBleSwgaG93ZXZlciwgd291bGQgbm90IHN1ZmZlciB0aGVtIHRvIGdldCBvbmUgZnJvbSB0aGVyZSwgYnV0IGJhZGUgdGhlbSBwcmVwYXJlIHNvbWV0aGluZyBlbHNlIHRoYXQgd2FzIGVhc2lseSB0byBiZSBoYWQsIHJlbWFya2luZyBhcyBoZSBkaWQgc28gdG8gaGlzIHBoeXNpY2lhbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0ISBtdXN0IGEgUG9tcGV5IGhhdmUgZGllZCBpZiBhIEx1Y3VsbHVzIHdlcmUgbm90IGx1eHVyaW91cz88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIENhdG8sIHdobyB3YXMgYSBmcmllbmQgb2YgaGlzLCBhbmQgYSByZWxhdGlvbiBieSBtYXJyaWFnZSwgd2FzIG5ldmVydGhlbGVzcyBtdWNoIG9mZmVuZGVkIGJ5IGhpcyBsaWZlIGFuZCBoYWJpdHMuIE9uY2Ugd2hlbiBhIHlvdXRoZnVsIHNlbmF0b3IgaGFkIGRlbGl2ZXJlZCBhIHRlZGlvdXMgYW5kIGxlbmd0aHkgZGlzY291cnNlLCBhbGwgb3V0IG9mIHNlYXNvbiwgb24gZnJ1Z2FsaXR5IGFuZCB0ZW1wZXJhbmNlLCBDYXRvIHJvc2UgYW5kIHNhaWQ7IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3RvcCB0aGVyZSEgeW91IGdldCB3ZWFsdGggbGlrZSBDcmFzc3VzLCB5b3UgbGl2ZSBsaWtlIEx1Y3VsbHVzLCBidXQgeW91IHRhbGsgbGlrZSBDYXRvLjwvcT4gU29tZSwgaG93ZXZlciwgd2hpbGUgdGhleSBzYXkgdGhhdCB0aGVzZSB3b3JkcyB3ZXJlIGFjdHVhbGx5IHV0dGVyZWQsIGRvIG5vdCBzYXkgdGhhdCB0aGV5IHdlcmUgc3Bva2VuIGJ5IENhdG8uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGRhaWx5IHJlcGFzdHMgb2YgTHVjdWxsdXMgd2VyZSBzdWNoIGFzIHRoZSBuZXdseSByaWNoIGFmZmVjdC4gTm90IG9ubHkgd2l0aCBoaXMgZHllZCBjb3ZlcmxldHMsIGFuZCBiZWFrZXJzIHNldCB3aXRoIHByZWNpb3VzIHN0b25lcywgYW5kIGNob3J1c2VzIGFuZCBkcmFtYXRpYyByZWNpdGF0aW9ucywgYnV0IGFsc28gd2l0aCBoaXMgYXJyYXlzIG9mIGFsbCBzb3J0cyBvZiBtZWF0cyBhbmQgZGFpbnRpbHkgcHJlcGFyZWQgZGlzaGVzLCBkaWQgaGUgbWFrZSBoaW1zZWxmIHRoZSBlbnZ5IG9mIHRoZSB2dWxnYXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkEgc2F5aW5nIG9mIFBvbXBleSdzLCB3aGVuIGhlIHdhcyBpbGwsIHdhcyBjZXJ0YWlubHkgdmVyeSBwb3B1bGFyLiBIaXMgcGh5c2ljaWFucyBoYWQgcHJlc2NyaWJlZCBhIHRocnVzaCBmb3IgaGltIHRvIGVhdCwgYW5kIGhpcyBzZXJ2YW50cyBzYWlkIHRoYXQgYSB0aHJ1c2ggY291bGQgbm90IGJlIGZvdW5kIGFueXdoZXJlIGluIHRoZSBzdW1tZXIgc2Vhc29uIGV4Y2VwdCB3aGVyZSBMdWN1bGx1cyBrZXB0IHRoZW0gZmF0dGVuaW5nLiBQb21wZXksIGhvd2V2ZXIsIHdvdWxkIG5vdCBzdWZmZXIgdGhlbSB0byBnZXQgb25lIGZyb20gdGhlcmUsIGJ1dCBiYWRlIHRoZW0gcHJlcGFyZSBzb21ldGhpbmcgZWxzZSB0aGF0IHdhcyBlYXNpbHkgdG8gYmUgaGFkLCByZW1hcmtpbmcgYXMgaGUgZGlkIHNvIHRvIGhpcyBwaHlzaWNpYW4sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0ISBtdXN0IGEgUG9tcGV5IGhhdmUgZGllZCBpZiBhIEx1Y3VsbHVzIHdlcmUgbm90IGx1eHVyaW91cz88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBDYXRvLCB3aG8gd2FzIGEgZnJpZW5kIG9mIGhpcywgYW5kIGEgcmVsYXRpb24gYnkgbWFycmlhZ2UsIHdhcyBuZXZlcnRoZWxlc3MgbXVjaCBvZmZlbmRlZCBieSBoaXMgbGlmZSBhbmQgaGFiaXRzLiBPbmNlIHdoZW4gYSB5b3V0aGZ1bCBzZW5hdG9yIGhhZCBkZWxpdmVyZWQgYSB0ZWRpb3VzIGFuZCBsZW5ndGh5IGRpc2NvdXJzZSwgYWxsIG91dCBvZiBzZWFzb24sIG9uIGZydWdhbGl0eSBhbmQgdGVtcGVyYW5jZSwgQ2F0byByb3NlIGFuZCBzYWlkOyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3RvcCB0aGVyZSEgeW91IGdldCB3ZWFsdGggbGlrZSBDcmFzc3VzLCB5b3UgbGl2ZSBsaWtlIEx1Y3VsbHVzLCBidXQgeW91IHRhbGsgbGlrZSBDYXRvLjwvcT4gU29tZSwgaG93ZXZlciwgd2hpbGUgdGhleSBzYXkgdGhhdCB0aGVzZSB3b3JkcyB3ZXJlIGFjdHVhbGx5IHV0dGVyZWQsIGRvIG5vdCBzYXkgdGhhdCB0aGV5IHdlcmUgc3Bva2VuIGJ5IENhdG8uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGF0IEx1Y3VsbHVzIHRvb2sgbm90IG9ubHkgcGxlYXN1cmUgYnV0IHByaWRlIGluIHRoaXMgd2F5IG9mIGxpdmluZywgaXMgY2xlYXIgZnJvbSB0aGUgYW5lY2RvdGVzIHJlY29yZGVkIG9mIGhpbS4gSXQgaXMgc2FpZCwgZm9yIGluc3RhbmNlLCB0aGF0IGhlIGVudGVydGFpbmVkIGZvciBtYW55IHN1Y2Nlc3NpdmUgZGF5cyBzb21lIEdyZWVrcyB3aG8gaGFkIGNvbWUgdXAgdG8gUm9tZSwgYW5kIHRoYXQgdGhleSwgd2l0aCBnZW51aW5lbHkgR3JlZWsgc2NydXBsZXMsIHdlcmUgYXQgbGFzdCBhc2hhbWVkIHRvIGFjY2VwdCBoaXMgaW52aXRhdGlvbiwgb24gdGhlIGdyb3VuZCB0aGF0IGhlIHdhcyBpbmN1cnJpbmcgc28gbXVjaCBleHBlbnNlIGV2ZXJ5IGRheSBvbiB0aGVpciBhY2NvdW50OyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz53aGVyZXVwb24gTHVjdWxsdXMgc2FpZCB0byB0aGVtIHdpdGggYSBzbWlsZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Tb21lIG9mIHRoaXMgZXhwZW5zZSwgbXkgR3JlY2lhbiBmcmllbmRzLCBpcyBpbmRlZWQgb24geW91ciBhY2NvdW50OyBtb3N0IG9mIGl0LCBob3dldmVyLCBpcyBvbiBhY2NvdW50IG9mIEx1Y3VsbHVzLjwvcT4gQW5kIG9uY2UsIHdoZW4gaGUgd2FzIGRpbmluZyBhbG9uZSwgYW5kIGEgbW9kZXN0IHJlcGFzdCBvZiBvbmUgY291cnNlIGhhZCBiZWVuIHByZXBhcmVkIGZvciBoaW0sIGhlIHdhcyBhbmdyeSwgYW5kIHN1bW1vbmVkIHRoZSBzZXJ2YW50IHdobyBoYWQgdGhlIG1hdHRlciBpbiBjaGFyZ2UuIFRoZSBzZXJ2YW50IHNhaWQgdGhhdCBoZSBkaWQgbm90IHN1cHBvc2UsIHNpbmNlIHRoZXJlIHdlcmUgbm8gZ3Vlc3RzLCB0aGF0IGhlIHdhbnRlZCBhbnl0aGluZyB2ZXJ5IGNvc3RseS4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IHNhdmVzdCB0aG91PzwvcT4gc2FpZCB0aGUgbWFzdGVyLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRvc3QgdGhvdSBub3Qga25vdyB0aGF0IHRvLWRheSBMdWN1bGx1cyBkaW5lcyB3aXRoIEx1Y3VsbHVzPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSB0aGlzIG1hdHRlciB3YXMgbXVjaCB0YWxrZWQgb2YgaW4gdGhlIGNpdHksIGFzIHdhcyBuYXR1cmFsLCBDaWNlcm8gYW5kIFBvbXBleSBjYW1lIHVwIHRvIGhpbSBhcyBoZSB3YXMgaWRsaW5nIGluIHRoZSBmb3J1bS4gQ2ljZXJvIHdhcyBvbmUgb2YgaGlzIG1vc3QgaW50aW1hdGUgZnJpZW5kcywgYW5kIGFsdGhvdWdoIHRoZSBtYXR0ZXIgb2YgdGhlIGNvbW1hbmQgb2YgdGhlIGFybXkgaGFkIGxlZCB0byBzb21lIGNvb2xuZXNzIGJldHdlZW4gaGltIGFuZCBQb21wZXksIHN0aWxsIHRoZXkgd2VyZSBhY2N1c3RvbWVkIHRvIGZyZXF1ZW50IGFuZCBmcmllbmRseSBpbnRlcmNvdXJzZSBhbmQgY29udmVyc2F0aW9uIHdpdGggb25lIGFub3RoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBDaWNlcm8gc2FsdXRlZCBoaW0sIGFuZCBhc2tlZCBob3cgaGUgd2FzIGRpc3Bvc2VkIHRvd2FyZHMgcmVjZWl2aW5nIGEgcGV0aXRpb24uIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TW9zdCBleGNlbGxlbnRseSB3ZWxsLDwvcT4gc2FpZCBMdWN1bGx1cywgYW5kIGludml0ZWQgdGhlbSB0byBtYWtlIHRoZWlyIHBldGl0aW9uLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlIGRlc2lyZSw8L3E+IHNhaWQgQ2ljZXJvLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRvIGRpbmUgd2l0aCB5b3UgdG8tZGF5IGp1c3QgYXMgeW91IHdvdWxkIGhhdmUgZGluZWQgYnkgIHlvdXJzZWxmLjwvcT4gTHVjdWxsdXMgZGVtdXJyZWQgdG8gdGhpcywgYW5kIGJlZ2dlZCB0aGUgcHJpdmlsZWdlIG9mIHNlbGVjdGluZyBhIGxhdGVyIGRheSwgYnV0IHRoZXkgcmVmdXNlZCB0byBhbGxvdyBpdCwgbm9yIHdvdWxkIHRoZXkgc3VmZmVyIGhpbSB0byBjb25mZXIgd2l0aCBoaXMgc2VydmFudHMsIHRoYXQgaGUgbWlnaHQgbm90IG9yZGVyIGFueSB0aGluZyBtb3JlIHByb3ZpZGVkIHRoYW4gd2hhdCB3YXMgcHJvdmlkZWQgZm9yIGhpbXNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgbXVjaCwgaG93ZXZlciwgYW5kIG5vIG1vcmUsIHRoZXkgZGlkIGFsbG93IGhpbSBhdCBoaXMgcmVxdWVzdCwgbmFtZWx5LCB0byB0ZWxsIG9uZSBvZiBoaXMgc2VydmFudHMgaW4gdGhlaXIgcHJlc2VuY2UgdGhhdCBoZSB3b3VsZCBkaW5lIHRoYXQgZGF5IGluIHRoZSBBcG9sbG8uIE5vdyB0aGlzIHdhcyB0aGUgbmFtZSBvZiBvbmUgb2YgaGlzIGNvc3RseSBhcGFydG1lbnRzLCBhbmQgaGUgdGh1cyBvdXR3aXR0ZWQgdGhlIG1lbiB3aXRob3V0IHRoZWlyIGtub3dpbmcgaXQuIEZvciBlYWNoIG9mIGhpcyBkaW5pbmctcm9vbXMsIGFzIGl0IHNlZW1zLCBoYWQgYSBmaXhlZCBhbGxvd2FuY2UgZm9yIHRoZSBkaW5uZXIgc2VydmVkIHRoZXJlLCBhcyB3ZWxsIGFzIGl0cyBvd24gc3BlY2lhbCBhcHBhcmF0dXMgYW5kIGVxdWlwbWVudCwgc28gdGhhdCBoaXMgc2xhdmVzLCBvbiBoZWFyaW5nIHdoZXJlIGhlIHdpc2hlZCB0byBkaW5lLCBrbmV3IGp1c3QgaG93IG11Y2ggdGhlIGRpbm5lciB3YXMgdG8gY29zdCwgYW5kIHdoYXQgd2VyZSB0byBiZSBpdHMgZGVjb3JhdGlvbnMgYW5kIGFycmFuZ2VtZW50cy4gTm93IHRoZSB1c3VhbCBjb3N0IG9mIGEgZGlubmVyIGluIHRoZSBBcG9sbG8gd2FzIGZpZnR5IHRob3VzYW5kIGRyYWNobWFzLCBhbmQgdGhhdCB3YXMgdGhlIHN1bSBsYWlkIG91dCBvbiB0aGUgcHJlc2VudCBvY2Nhc2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5IHdhcyBhbWF6ZWQgYXQgdGhlIHNwZWVkIHdpdGggd2hpY2ggdGhlIGJhbnF1ZXQgd2FzIHByZXBhcmVkLCBub3R3aXRoc3RhbmRpbmcgaXQgaGFkIGNvc3Qgc28gbXVjaC4gSW4gdGhlc2Ugd2F5cywgdGhlbiwgTHVjdWxsdXMgdXNlZCBoaXMgd2VhbHRoIHdhbnRvbmx5LCBhcyB0aG91Z2ggaXQgd2VyZSBpbiB2ZXJ5IHRydXRoIGEgQmFyYmFyaWFuIHByaXNvbmVyLW9mLXdhci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['41.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoYXQgTHVjdWxsdXMgdG9vayBub3Qgb25seSBwbGVhc3VyZSBidXQgcHJpZGUgaW4gdGhpcyB3YXkgb2YgbGl2aW5nLCBpcyBjbGVhciBmcm9tIHRoZSBhbmVjZG90ZXMgcmVjb3JkZWQgb2YgaGltLiBJdCBpcyBzYWlkLCBmb3IgaW5zdGFuY2UsIHRoYXQgaGUgZW50ZXJ0YWluZWQgZm9yIG1hbnkgc3VjY2Vzc2l2ZSBkYXlzIHNvbWUgR3JlZWtzIHdobyBoYWQgY29tZSB1cCB0byBSb21lLCBhbmQgdGhhdCB0aGV5LCB3aXRoIGdlbnVpbmVseSBHcmVlayBzY3J1cGxlcywgd2VyZSBhdCBsYXN0IGFzaGFtZWQgdG8gYWNjZXB0IGhpcyBpbnZpdGF0aW9uLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgd2FzIGluY3VycmluZyBzbyBtdWNoIGV4cGVuc2UgZXZlcnkgZGF5IG9uIHRoZWlyIGFjY291bnQ7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoZXJldXBvbiBMdWN1bGx1cyBzYWlkIHRvIHRoZW0gd2l0aCBhIHNtaWxlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U29tZSBvZiB0aGlzIGV4cGVuc2UsIG15IEdyZWNpYW4gZnJpZW5kcywgaXMgaW5kZWVkIG9uIHlvdXIgYWNjb3VudDsgbW9zdCBvZiBpdCwgaG93ZXZlciwgaXMgb24gYWNjb3VudCBvZiBMdWN1bGx1cy48L3E+IEFuZCBvbmNlLCB3aGVuIGhlIHdhcyBkaW5pbmcgYWxvbmUsIGFuZCBhIG1vZGVzdCByZXBhc3Qgb2Ygb25lIGNvdXJzZSBoYWQgYmVlbiBwcmVwYXJlZCBmb3IgaGltLCBoZSB3YXMgYW5ncnksIGFuZCBzdW1tb25lZCB0aGUgc2VydmFudCB3aG8gaGFkIHRoZSBtYXR0ZXIgaW4gY2hhcmdlLiBUaGUgc2VydmFudCBzYWlkIHRoYXQgaGUgZGlkIG5vdCBzdXBwb3NlLCBzaW5jZSB0aGVyZSB3ZXJlIG5vIGd1ZXN0cywgdGhhdCBoZSB3YW50ZWQgYW55dGhpbmcgdmVyeSBjb3N0bHkuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IHNhdmVzdCB0aG91PzwvcT4gc2FpZCB0aGUgbWFzdGVyLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZG9zdCB0aG91IG5vdCBrbm93IHRoYXQgdG8tZGF5IEx1Y3VsbHVzIGRpbmVzIHdpdGggTHVjdWxsdXM/PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHRoaXMgbWF0dGVyIHdhcyBtdWNoIHRhbGtlZCBvZiBpbiB0aGUgY2l0eSwgYXMgd2FzIG5hdHVyYWwsIENpY2VybyBhbmQgUG9tcGV5IGNhbWUgdXAgdG8gaGltIGFzIGhlIHdhcyBpZGxpbmcgaW4gdGhlIGZvcnVtLiBDaWNlcm8gd2FzIG9uZSBvZiBoaXMgbW9zdCBpbnRpbWF0ZSBmcmllbmRzLCBhbmQgYWx0aG91Z2ggdGhlIG1hdHRlciBvZiB0aGUgY29tbWFuZCBvZiB0aGUgYXJteSBoYWQgbGVkIHRvIHNvbWUgY29vbG5lc3MgYmV0d2VlbiBoaW0gYW5kIFBvbXBleSwgc3RpbGwgdGhleSB3ZXJlIGFjY3VzdG9tZWQgdG8gZnJlcXVlbnQgYW5kIGZyaWVuZGx5IGludGVyY291cnNlIGFuZCBjb252ZXJzYXRpb24gd2l0aCBvbmUgYW5vdGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['41.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBDaWNlcm8gc2FsdXRlZCBoaW0sIGFuZCBhc2tlZCBob3cgaGUgd2FzIGRpc3Bvc2VkIHRvd2FyZHMgcmVjZWl2aW5nIGEgcGV0aXRpb24uIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Nb3N0IGV4Y2VsbGVudGx5IHdlbGwsPC9xPiBzYWlkIEx1Y3VsbHVzLCBhbmQgaW52aXRlZCB0aGVtIHRvIG1ha2UgdGhlaXIgcGV0aXRpb24uIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSBkZXNpcmUsPC9xPiBzYWlkIENpY2VybywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRvIGRpbmUgd2l0aCB5b3UgdG8tZGF5IGp1c3QgYXMgeW91IHdvdWxkIGhhdmUgZGluZWQgYnkgIHlvdXJzZWxmLjwvcT4gTHVjdWxsdXMgZGVtdXJyZWQgdG8gdGhpcywgYW5kIGJlZ2dlZCB0aGUgcHJpdmlsZWdlIG9mIHNlbGVjdGluZyBhIGxhdGVyIGRheSwgYnV0IHRoZXkgcmVmdXNlZCB0byBhbGxvdyBpdCwgbm9yIHdvdWxkIHRoZXkgc3VmZmVyIGhpbSB0byBjb25mZXIgd2l0aCBoaXMgc2VydmFudHMsIHRoYXQgaGUgbWlnaHQgbm90IG9yZGVyIGFueSB0aGluZyBtb3JlIHByb3ZpZGVkIHRoYW4gd2hhdCB3YXMgcHJvdmlkZWQgZm9yIGhpbXNlbGYuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['41.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgbXVjaCwgaG93ZXZlciwgYW5kIG5vIG1vcmUsIHRoZXkgZGlkIGFsbG93IGhpbSBhdCBoaXMgcmVxdWVzdCwgbmFtZWx5LCB0byB0ZWxsIG9uZSBvZiBoaXMgc2VydmFudHMgaW4gdGhlaXIgcHJlc2VuY2UgdGhhdCBoZSB3b3VsZCBkaW5lIHRoYXQgZGF5IGluIHRoZSBBcG9sbG8uIE5vdyB0aGlzIHdhcyB0aGUgbmFtZSBvZiBvbmUgb2YgaGlzIGNvc3RseSBhcGFydG1lbnRzLCBhbmQgaGUgdGh1cyBvdXR3aXR0ZWQgdGhlIG1lbiB3aXRob3V0IHRoZWlyIGtub3dpbmcgaXQuIEZvciBlYWNoIG9mIGhpcyBkaW5pbmctcm9vbXMsIGFzIGl0IHNlZW1zLCBoYWQgYSBmaXhlZCBhbGxvd2FuY2UgZm9yIHRoZSBkaW5uZXIgc2VydmVkIHRoZXJlLCBhcyB3ZWxsIGFzIGl0cyBvd24gc3BlY2lhbCBhcHBhcmF0dXMgYW5kIGVxdWlwbWVudCwgc28gdGhhdCBoaXMgc2xhdmVzLCBvbiBoZWFyaW5nIHdoZXJlIGhlIHdpc2hlZCB0byBkaW5lLCBrbmV3IGp1c3QgaG93IG11Y2ggdGhlIGRpbm5lciB3YXMgdG8gY29zdCwgYW5kIHdoYXQgd2VyZSB0byBiZSBpdHMgZGVjb3JhdGlvbnMgYW5kIGFycmFuZ2VtZW50cy4gTm93IHRoZSB1c3VhbCBjb3N0IG9mIGEgZGlubmVyIGluIHRoZSBBcG9sbG8gd2FzIGZpZnR5IHRob3VzYW5kIGRyYWNobWFzLCBhbmQgdGhhdCB3YXMgdGhlIHN1bSBsYWlkIG91dCBvbiB0aGUgcHJlc2VudCBvY2Nhc2lvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['41.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSB3YXMgYW1hemVkIGF0IHRoZSBzcGVlZCB3aXRoIHdoaWNoIHRoZSBiYW5xdWV0IHdhcyBwcmVwYXJlZCwgbm90d2l0aHN0YW5kaW5nIGl0IGhhZCBjb3N0IHNvIG11Y2guIEluIHRoZXNlIHdheXMsIHRoZW4sIEx1Y3VsbHVzIHVzZWQgaGlzIHdlYWx0aCB3YW50b25seSwgYXMgdGhvdWdoIGl0IHdlcmUgaW4gdmVyeSB0cnV0aCBhIEJhcmJhcmlhbiBwcmlzb25lci1vZi13YXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGF0IGhlIGRpZCBpbiB0aGUgZXN0YWJsaXNobWVudCBvZiBhIGxpYnJhcnkgZGVzZXJ2ZXMgd2FybSBwcmFpc2UuIEhlIGdvdCB0b2dldGhlciBtYW55IGJvb2tzLCBhbmQgdGhleSB3ZXJlIHdlbGwgd3JpdHRlbiwgYW5kIGhpcyB1c2Ugb2YgdGhlbSB3YXMgbW9yZSBob25vdXJhYmxlIHRvIGhpbSB0aGFuIGhpcyBhY3F1aXNpdGlvbiBvZiB0aGVtLiBIaXMgbGlicmFyaWVzIHdlcmUgdGhyb3duIG9wZW4gdG8gYWxsLCBhbmQgdGhlIGNsb2lzdGVycyBzdXJyb3VuZGluZyB0aGVtLCBhbmQgdGhlIHN0dWR5LXJvb21zLCB3ZXJlIGFjY2Vzc2libGUgd2l0aG91dCByZXN0cmljdGlvbiB0byB0aGUgR3JlZWtzLCB3aG8gY29uc3RhbnRseSByZXBhaXJlZCB0aGl0aGVyIGFzIHRvIGFuIGhvc3RlbHJ5IG9mIHRoZSBNdXNlcywgYW5kIHNwZW50IHRoZSBkYXkgd2l0aCBvbmUgYW5vdGhlciwgaW4gZ2xhZCBlc2NhcGUgZnJvbSB0aGVpciBvdGhlciBvY2N1cGF0aW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+THVjdWxsdXMgaGltc2VsZiBhbHNvIG9mdGVuIHNwZW50IGhpcyBsZWlzdXJlIGhvdXJzIHRoZXJlIHdpdGggdGhlbSwgd2Fsa2luZyBhYm91dCBpbiB0aGUgY2xvaXN0ZXJzIHdpdGggdGhlaXIgc2Nob2xhcnMsIGFuZCBoZSB3b3VsZCBhc3Npc3QgdGhlaXIgc3RhdGVzbWVuIGluIHdoYXRldmVyIHRoZXkgZGVzaXJlZC4gQW5kIGluIGdlbmVyYWwgaGlzIGhvdXNlIHdhcyBhIGhvbWUgYW5kIHByeXRhbmVpdW0gZm9yIHRoZSBHcmVla3Mgd2hvIGNhbWUgdG8gUm9tZS4gSGUgd2FzIGZvbmQgb2YgYWxsIHBoaWxvc29waHksIGFuZCB3ZWxsLWRpc3Bvc2VkIGFuZCBmcmllbmRseSB0b3dhcmRzIGV2ZXJ5IHNjaG9vbCwgYnV0IGZyb20gdGhlIGZpcnN0IGhlIGNoZXJpc2hlZCBhIHBhcnRpY3VsYXIgYW5kIHplYWxvdXMgbG92ZSBmb3IgdGhlIEFjYWRlbXksIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPm5vdCB0aGUgTmV3IEFjYWRlbXksIHNvLWNhbGxlZCwgYWx0aG91Z2ggdGhhdCBzY2hvb2wgYXQgdGhlIHRpbWUgaGFkIGEgdmlnb3JvdXMgcmVwcmVzZW50YXRpdmUgb2YgdGhlIGRvY3RyaW5lcyBvZiBDYXJuZWFkZXMgaW4gUGhpbG8sIGJ1dCB0aGUgT2xkIEFjYWRlbXksIHdoaWNoIGF0IHRoYXQgdGltZSB3YXMgaGVhZGVkIGJ5IGEgcGVyc3Vhc2l2ZSBhbmQgcG93ZXJmdWwgc3BlYWtlciBpbiB0aGUgcGVyc29uIG9mIEFudGlvY2h1cyBvZiBBc2NhbG9uLiBUaGlzIG1hbiBMdWN1bGx1cyBoYXN0ZW5lZCB0byBtYWtlIGhpcyBmcmllbmQgYW5kIGNvbXBhbmlvbiwgYW5kIGFycmF5ZWQgaGltIGFnYWluc3QgdGhlIGRpc2NpcGxlcyBvZiBQaGlsbywgb2Ygd2hvbSBDaWNlcm8gYWxzbyB3YXMgb25lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JbmRlZWQsIENpY2VybyB3cm90ZSBhIG5vYmxlIHRyZWF0aXNlIG9uIHRoZSBkb2N0cmluZXMgb2YgdGhpcyBzZWN0LCBpbiB3aGljaCBoZSBoYXMgcHV0IHRoZSBhcmd1bWVudCBpbiBzdXBwb3J0IG9mIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXBwcmVoZW5zaW9uPC9xPiBpbnRvIHRoZSBtb3V0aCBvZiBMdWN1bGx1cywgYW5kIGNhcnJpZWQgdGhlIG9wcG9zaW5nIGFyZ3VtZW50IGhpbXNlbGYuIFRoZSBib29rIGlzIGVudGl0bGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+THVjdWxsdXMuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gTHVjLiAxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFjYWRlbWljb3J1bSBQcmlvcnVtPC90aXRsZT4sIDxmb3JlaWduIGxhbmc9ImxhIj5MaWJlciBTZWN1bmR1cywgcXVpIGluc2NyaWJpdHVyIEx1Y3VsbHVzLjwvZm9yZWlnbj4KICAgICAgICAgICAgICAgPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoYXQgaGUgZGlkIGluIHRoZSBlc3RhYmxpc2htZW50IG9mIGEgbGlicmFyeSBkZXNlcnZlcyB3YXJtIHByYWlzZS4gSGUgZ290IHRvZ2V0aGVyIG1hbnkgYm9va3MsIGFuZCB0aGV5IHdlcmUgd2VsbCB3cml0dGVuLCBhbmQgaGlzIHVzZSBvZiB0aGVtIHdhcyBtb3JlIGhvbm91cmFibGUgdG8gaGltIHRoYW4gaGlzIGFjcXVpc2l0aW9uIG9mIHRoZW0uIEhpcyBsaWJyYXJpZXMgd2VyZSB0aHJvd24gb3BlbiB0byBhbGwsIGFuZCB0aGUgY2xvaXN0ZXJzIHN1cnJvdW5kaW5nIHRoZW0sIGFuZCB0aGUgc3R1ZHktcm9vbXMsIHdlcmUgYWNjZXNzaWJsZSB3aXRob3V0IHJlc3RyaWN0aW9uIHRvIHRoZSBHcmVla3MsIHdobyBjb25zdGFudGx5IHJlcGFpcmVkIHRoaXRoZXIgYXMgdG8gYW4gaG9zdGVscnkgb2YgdGhlIE11c2VzLCBhbmQgc3BlbnQgdGhlIGRheSB3aXRoIG9uZSBhbm90aGVyLCBpbiBnbGFkIGVzY2FwZSBmcm9tIHRoZWlyIG90aGVyIG9jY3VwYXRpb25zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3VsbHVzIGhpbXNlbGYgYWxzbyBvZnRlbiBzcGVudCBoaXMgbGVpc3VyZSBob3VycyB0aGVyZSB3aXRoIHRoZW0sIHdhbGtpbmcgYWJvdXQgaW4gdGhlIGNsb2lzdGVycyB3aXRoIHRoZWlyIHNjaG9sYXJzLCBhbmQgaGUgd291bGQgYXNzaXN0IHRoZWlyIHN0YXRlc21lbiBpbiB3aGF0ZXZlciB0aGV5IGRlc2lyZWQuIEFuZCBpbiBnZW5lcmFsIGhpcyBob3VzZSB3YXMgYSBob21lIGFuZCBwcnl0YW5laXVtIGZvciB0aGUgR3JlZWtzIHdobyBjYW1lIHRvIFJvbWUuIEhlIHdhcyBmb25kIG9mIGFsbCBwaGlsb3NvcGh5LCBhbmQgd2VsbC1kaXNwb3NlZCBhbmQgZnJpZW5kbHkgdG93YXJkcyBldmVyeSBzY2hvb2wsIGJ1dCBmcm9tIHRoZSBmaXJzdCBoZSBjaGVyaXNoZWQgYSBwYXJ0aWN1bGFyIGFuZCB6ZWFsb3VzIGxvdmUgZm9yIHRoZSBBY2FkZW15LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPm5vdCB0aGUgTmV3IEFjYWRlbXksIHNvLWNhbGxlZCwgYWx0aG91Z2ggdGhhdCBzY2hvb2wgYXQgdGhlIHRpbWUgaGFkIGEgdmlnb3JvdXMgcmVwcmVzZW50YXRpdmUgb2YgdGhlIGRvY3RyaW5lcyBvZiBDYXJuZWFkZXMgaW4gUGhpbG8sIGJ1dCB0aGUgT2xkIEFjYWRlbXksIHdoaWNoIGF0IHRoYXQgdGltZSB3YXMgaGVhZGVkIGJ5IGEgcGVyc3Vhc2l2ZSBhbmQgcG93ZXJmdWwgc3BlYWtlciBpbiB0aGUgcGVyc29uIG9mIEFudGlvY2h1cyBvZiBBc2NhbG9uLiBUaGlzIG1hbiBMdWN1bGx1cyBoYXN0ZW5lZCB0byBtYWtlIGhpcyBmcmllbmQgYW5kIGNvbXBhbmlvbiwgYW5kIGFycmF5ZWQgaGltIGFnYWluc3QgdGhlIGRpc2NpcGxlcyBvZiBQaGlsbywgb2Ygd2hvbSBDaWNlcm8gYWxzbyB3YXMgb25lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgQ2ljZXJvIHdyb3RlIGEgbm9ibGUgdHJlYXRpc2Ugb24gdGhlIGRvY3RyaW5lcyBvZiB0aGlzIHNlY3QsIGluIHdoaWNoIGhlIGhhcyBwdXQgdGhlIGFyZ3VtZW50IGluIHN1cHBvcnQgb2YgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFwcHJlaGVuc2lvbjwvcT4gaW50byB0aGUgbW91dGggb2YgTHVjdWxsdXMsIGFuZCBjYXJyaWVkIHRoZSBvcHBvc2luZyBhcmd1bWVudCBoaW1zZWxmLiBUaGUgYm9vayBpcyBlbnRpdGxlZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+THVjdWxsdXMuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEx1Yy4gMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFjYWRlbWljb3J1bSBQcmlvcnVtPC90aXRsZT4sIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkxpYmVyIFNlY3VuZHVzLCBxdWkgaW5zY3JpYml0dXIgTHVjdWxsdXMuPC9mb3JlaWduPgogICAgICAgICAgICAgICA8L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBMdWMuIDEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BY2FkZW1pY29ydW0gUHJpb3J1bTwvdGl0bGU+LCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5MaWJlciBTZWN1bmR1cywgcXVpIGluc2NyaWJpdHVyIEx1Y3VsbHVzLjwvZm9yZWlnbj4KICAgICAgICAgICAgICAgPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BY2FkZW1pY29ydW0gUHJpb3J1bTwvdGl0bGU+LCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5MaWJlciBTZWN1bmR1cywgcXVpIGluc2NyaWJpdHVyIEx1Y3VsbHVzLjwvZm9yZWlnbj4KICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1cyBhbmQgQ2ljZXJvIHdlcmUsIGFzIEkgaGF2ZSBzYWlkLCBhcmRlbnQgZnJpZW5kcywgYW5kIG1lbWJlcnMgb2YgdGhlIHNhbWUgcG9saXRpY2FsIHBhcnR5LCBmb3IgTHVjdWxsdXMgaGFkIG5vdCB3aXRoZHJhd24gaGltc2VsZiBlbnRpcmVseSBmcm9tIHBvbGl0aWNhbCBsaWZlLCAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFsdGhvdWdoIGhlIGxvc3Qgbm8gdGltZSBpbiBsZWF2aW5nIHRvIENyYXNzdXMgYW5kIENhdG8gdGhlIGFtYml0aW91cyBzdHJ1Z2dsZSBmb3IgdGhlIGNoaWVmIHBsYWNlIGFuZCB0aGUgZ3JlYXRlc3QgcG93ZXIsIHNpbmNlIGhlIHNhdyB0aGF0IGl0IGludm9sdmVkIGJvdGggcGVyaWwgYW5kIGlnbm9taW55LiBGb3IgdGhvc2Ugd2hvIGxvb2tlZCB3aXRoIHN1c3BpY2lvbiB1cG9uIHRoZSBwb3dlciBvZiBQb21wZXksIG1hZGUgQ3Jhc3N1cyBhbmQgQ2F0byB0aGUgY2hhbXBpb25zIG9mIHRoZSBzZW5hdG9yaWFsIHBhcnR5IHdoZW4gTHVjdWxsdXMgZGVjbGluZWQgdGhlIGxlYWRlcnNoaXAuIEJ1dCBMdWN1bGx1cyB3b3VsZCBzdGlsbCBnbyB0byB0aGUgZm9ydW0gaW4gc3VwcG9ydCBvZiBoaXMgZnJpZW5kcywgYW5kIGFsc28gdG8gdGhlIFNlbmF0ZSwgd2hlbmV2ZXIgdGhlcmUgd2FzIG5lZWQgb2YgY29tYmF0aW5nIHNvbWUgYW1iaXRpb3VzIHNjaGVtZSBvZiBQb21wZXkncy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cywgdGhlIGRpc3Bvc2l0aW9ucyB3aGljaCBQb21wZXkgbWFkZSBhZnRlciBoaXMgY29ucXVlc3Qgb2YgdGhlIGtpbmdzLCBMdWN1bGx1cyBtYWRlIG51bGwgYW5kIHZvaWQsIGFuZCBoaXMgcHJvcG9zYWwgZm9yIGEgZ2VuZXJvdXMgZGlzdHJpYnV0aW9uIG9mIGxhbmRzIHRvIGhpcyBzb2xkaWVycywgTHVjdWxsdXMsIHdpdGggdGhlIGNvLW9wZXJhdGlvbiBvZiBDYXRvLCBwcmV2ZW50ZWQgZnJvbSBiZWluZyBncmFudGVkLiBQb21wZXkgdGhlcmVmb3JlIHRvb2sgcmVmdWdlIGluIGFuIGFsbGlhbmNlLCBvciByYXRoZXIgYSBjb25zcGlyYWN5LCB3aXRoIENyYXNzdXMgYW5kIENhZXNhciwgYW5kIGJ5IGZpbGxpbmcgdGhlIGNpdHkgd2l0aCBoaXMgYXJtZWQgc29sZGllcnkgYW5kIGV4cGVsbGluZyBmcm9tIHRoZSBmb3J1bSB0aGUgcGFydGlzYW5zIG9mIENhdG8gYW5kIEx1Y3VsbHVzLCBnb3QgaGlzIG1lYXN1cmVzIHJhdGlmaWVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFsdGhvdWdoIGhlIGxvc3Qgbm8gdGltZSBpbiBsZWF2aW5nIHRvIENyYXNzdXMgYW5kIENhdG8gdGhlIGFtYml0aW91cyBzdHJ1Z2dsZSBmb3IgdGhlIGNoaWVmIHBsYWNlIGFuZCB0aGUgZ3JlYXRlc3QgcG93ZXIsIHNpbmNlIGhlIHNhdyB0aGF0IGl0IGludm9sdmVkIGJvdGggcGVyaWwgYW5kIGlnbm9taW55LiBGb3IgdGhvc2Ugd2hvIGxvb2tlZCB3aXRoIHN1c3BpY2lvbiB1cG9uIHRoZSBwb3dlciBvZiBQb21wZXksIG1hZGUgQ3Jhc3N1cyBhbmQgQ2F0byB0aGUgY2hhbXBpb25zIG9mIHRoZSBzZW5hdG9yaWFsIHBhcnR5IHdoZW4gTHVjdWxsdXMgZGVjbGluZWQgdGhlIGxlYWRlcnNoaXAuIEJ1dCBMdWN1bGx1cyB3b3VsZCBzdGlsbCBnbyB0byB0aGUgZm9ydW0gaW4gc3VwcG9ydCBvZiBoaXMgZnJpZW5kcywgYW5kIGFsc28gdG8gdGhlIFNlbmF0ZSwgd2hlbmV2ZXIgdGhlcmUgd2FzIG5lZWQgb2YgY29tYmF0aW5nIHNvbWUgYW1iaXRpb3VzIHNjaGVtZSBvZiBQb21wZXkncy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['42.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRodXMsIHRoZSBkaXNwb3NpdGlvbnMgd2hpY2ggUG9tcGV5IG1hZGUgYWZ0ZXIgaGlzIGNvbnF1ZXN0IG9mIHRoZSBraW5ncywgTHVjdWxsdXMgbWFkZSBudWxsIGFuZCB2b2lkLCBhbmQgaGlzIHByb3Bvc2FsIGZvciBhIGdlbmVyb3VzIGRpc3RyaWJ1dGlvbiBvZiBsYW5kcyB0byBoaXMgc29sZGllcnMsIEx1Y3VsbHVzLCB3aXRoIHRoZSBjby1vcGVyYXRpb24gb2YgQ2F0bywgcHJldmVudGVkIGZyb20gYmVpbmcgZ3JhbnRlZC4gUG9tcGV5IHRoZXJlZm9yZSB0b29rIHJlZnVnZSBpbiBhbiBhbGxpYW5jZSwgb3IgcmF0aGVyIGEgY29uc3BpcmFjeSwgd2l0aCBDcmFzc3VzIGFuZCBDYWVzYXIsIGFuZCBieSBmaWxsaW5nIHRoZSBjaXR5IHdpdGggaGlzIGFybWVkIHNvbGRpZXJ5IGFuZCBleHBlbGxpbmcgZnJvbSB0aGUgZm9ydW0gdGhlIHBhcnRpc2FucyBvZiBDYXRvIGFuZCBMdWN1bGx1cywgZ290IGhpcyBtZWFzdXJlcyByYXRpZmllZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QXMgdGhlc2UgcHJvY2VlZGluZ3Mgd2VyZSByZXNlbnRlZCBieSB0aGUgbm9ibGVzLCB0aGUgcGFydGlzYW5zIG9mIFBvbXBleSBwcm9kdWNlZCBhIGNlcnRhaW4gVmV0dGl1cywgd2hvbSwgYXMgdGhleSBkZWNsYXJlZCwgdGhleSBoYWQgY2F1Z2h0IHBsb3R0aW5nIGFnYWluc3QgdGhlIGxpZmUgb2YgUG9tcGV5LiBTbyB0aGUgbWFuIHdhcyBleGFtaW5lZCBpbiB0aGUgU2VuYXRlLCB3aGVyZSBoZSBhY2N1c2VkIHN1bmRyeSBvdGhlciBwZXJzb25zLCBidXQgYmVmb3JlIHRoZSBwZW9wbGUgaGUgbmFtZWQgTHVjdWxsdXMgYXMgdGhlIG1hbiB3aG8gaGFkIGVuZ2FnZWQgaGltIHRvIGtpbGwgUG9tcGV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBubyBvbmUgYmVsaWV2ZWQgaGlzIHN0b3J5LCBuYXksIGl0IHdhcyBhdCBvbmNlIGNsZWFyIHRoYXQgdGhlIGZlbGxvdyBoYWQgYmVlbiBwdXQgZm9yd2FyZCBieSB0aGUgcGFydGlzYW5zIG9mIFBvbXBleSB0byBtYWtlIGZhbHNlIGFuZCBtYWxpY2lvdXMgY2hhcmdlcywgYW5kIHRoZSBmcmF1ZCB3YXMgbWFkZSBhbGwgdGhlIHBsYWluZXIgd2hlbiwgYSBmZXcgZGF5cyBhZnRlcndhcmRzLCBoaXMgZGVhZCBib2R5IHdhcyBjYXN0IG91dCBvZiB0aGUgcHJpc29uLiBJdCB3YXMgc2FpZCwgaW5kZWVkLCB0aGF0IGhlIGhhZCBkaWVkIGEgbmF0dXJhbCBkZWF0aCwgYnV0IGhlIGJvcmUgdGhlIG1hcmtzIG9mIHRocm90dGxpbmcgYW5kIHZpb2xlbmNlLCBhbmQgdGhlIG9waW5pb24gd2FzIHRoYXQgaGUgaGFkIGJlZW4gdGFrZW4gb2ZmIGJ5IHRoZSB2ZXJ5IG1lbiB3aG8gaGFkIGVuZ2FnZWQgaGlzIHNlcnZpY2VzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFzIHRoZXNlIHByb2NlZWRpbmdzIHdlcmUgcmVzZW50ZWQgYnkgdGhlIG5vYmxlcywgdGhlIHBhcnRpc2FucyBvZiBQb21wZXkgcHJvZHVjZWQgYSBjZXJ0YWluIFZldHRpdXMsIHdob20sIGFzIHRoZXkgZGVjbGFyZWQsIHRoZXkgaGFkIGNhdWdodCBwbG90dGluZyBhZ2FpbnN0IHRoZSBsaWZlIG9mIFBvbXBleS4gU28gdGhlIG1hbiB3YXMgZXhhbWluZWQgaW4gdGhlIFNlbmF0ZSwgd2hlcmUgaGUgYWNjdXNlZCBzdW5kcnkgb3RoZXIgcGVyc29ucywgYnV0IGJlZm9yZSB0aGUgcGVvcGxlIGhlIG5hbWVkIEx1Y3VsbHVzIGFzIHRoZSBtYW4gd2hvIGhhZCBlbmdhZ2VkIGhpbSB0byBraWxsIFBvbXBleS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['42.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIG5vIG9uZSBiZWxpZXZlZCBoaXMgc3RvcnksIG5heSwgaXQgd2FzIGF0IG9uY2UgY2xlYXIgdGhhdCB0aGUgZmVsbG93IGhhZCBiZWVuIHB1dCBmb3J3YXJkIGJ5IHRoZSBwYXJ0aXNhbnMgb2YgUG9tcGV5IHRvIG1ha2UgZmFsc2UgYW5kIG1hbGljaW91cyBjaGFyZ2VzLCBhbmQgdGhlIGZyYXVkIHdhcyBtYWRlIGFsbCB0aGUgcGxhaW5lciB3aGVuLCBhIGZldyBkYXlzIGFmdGVyd2FyZHMsIGhpcyBkZWFkIGJvZHkgd2FzIGNhc3Qgb3V0IG9mIHRoZSBwcmlzb24uIEl0IHdhcyBzYWlkLCBpbmRlZWQsIHRoYXQgaGUgaGFkIGRpZWQgYSBuYXR1cmFsIGRlYXRoLCBidXQgaGUgYm9yZSB0aGUgbWFya3Mgb2YgdGhyb3R0bGluZyBhbmQgdmlvbGVuY2UsIGFuZCB0aGUgb3BpbmlvbiB3YXMgdGhhdCBoZSBoYWQgYmVlbiB0YWtlbiBvZmYgYnkgdGhlIHZlcnkgbWVuIHdobyBoYWQgZW5nYWdlZCBoaXMgc2VydmljZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9mIGNvdXJzZSB0aGlzIGluZHVjZWQgTHVjdWxsdXMgdG8gd2l0aGRyYXcgZXZlbiBtb3JlIGZyb20gcHVibGljIGxpZmUuIEFuZCB3aGVuIENpY2VybyB3YXMgYmFuaXNoZWQgZnJvbSB0aGUgY2l0eSwgYW5kIENhdG8gd2FzIHNlbnQgb3V0IHRvIEN5cHJ1cywgaGUgcmV0aXJlZCBhbHRvZ2V0aGVyLiBFdmVuIGJlZm9yZSBoaXMgZGVhdGgsIGl0IGlzIHNhaWQgdGhhdCBoaXMgdW5kZXJzdGFuZGluZyB3YXMgYWZmZWN0ZWQgYW5kIGdyYWR1YWxseSBmYWRlZCBhd2F5LiBCdXQgQ29ybmVsaXVzIE5lcG9zIHNheXMgdGhhdCBMdWN1bGx1cyBsb3N0IGhpcyBtaW5kIG5vdCBmcm9tIG9sZCBhZ2UsIG5vciB5ZXQgZnJvbSBkaXNlYXNlLCBidXQgdGhhdCBoZSB3YXMgZGlzYWJsZWQgYnkgZHJ1Z3MgYWRtaW5pc3RlcmVkIHRvIGhpbSBieSBvbmUgb2YgaGlzIGZyZWVkbWVuLCBDYWxsaXN0aGVuZXM7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgdGhlIGRydWdzIHdlcmUgZ2l2ZW4gaGltIGJ5IENhbGxpc3RoZW5lcyBpbiBvcmRlciB0byB3aW4gbW9yZSBvZiBoaXMgbG92ZSwgaW4gdGhlIGJlbGllZiB0aGF0IHRoZXkgaGFkIHN1Y2ggYSBwb3dlciwgYnV0IHRoZXkgZHJvdmUgaGltIGZyb20gaGlzIHNlbnNlcyBhbmQgb3ZlcndoZWxtZWQgaGlzIHJlYXNvbiwgc28gdGhhdCBldmVuIHdoaWxlIGhlIHdhcyBzdGlsbCBhbGl2ZSwgaGlzIGJyb3RoZXIgbWFuYWdlZCBoaXMgcHJvcGVydHkuIEhvd2V2ZXIsIHdoZW4gaGUgZGllZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BYm91dCA1NyBCLkMuPC9ub3RlPiB0aGUgcGVvcGxlIGdyaWV2ZWQganVzdCBhcyBtdWNoIGFzIGlmIGhpcyBkZWF0aCBoYWQgY29tZSBhdCB0aGUgY3VsbWluYXRpb24gb2YgaGlzIG1pbGl0YXJ5IGFuZCBwb2xpdGljYWwgc2VydmljZXMsIGFuZCBmbG9ja2VkIHRvZ2V0aGVyLCBhbmQgdHJpZWQgdG8gY29tcGVsIHRoZSB5b3VuZyBub2JsZXMgd2hvIGhhZCBjYXJyaWVkIHRoZSBib2R5IGludG8gdGhlIGZvcnVtIHRvIGJ1cnkgaXQgaW4gdGhlIENhbXB1cyBNYXJ0aXVzLCB3aGVyZSBTdWxsYSBhbHNvIGhhZCBiZWVuIGJ1cmllZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vIG9uZSBoYWQgZXhwZWN0ZWQgdGhpcywgYW5kIHByZXBhcmF0aW9ucyBmb3IgaXQgd2VyZSBub3QgZWFzeSwgYW5kIHNvIGhpcyBicm90aGVyLCBieSBwcmF5ZXJzIGFuZCBzdXBwbGljYXRpb25zLCBzdWNjZWVkZWQgaW4gcGVyc3VhZGluZyB0aGVtIHRvIHN1ZmZlciB0aGUgYnVyaWFsIHRvIHRha2UgcGxhY2Ugb24gdGhlIGVzdGF0ZSBhdCBUdXNjdWx1bSwgd2hlcmUgcHJlcGFyYXRpb25zIGZvciBpdCBoYWQgYmVlbiBtYWRlLiBOb3IgZGlkIGhlIGhpbXNlbGYgbG9uZyBzdXJ2aXZlIEx1Y3VsbHVzLCBidXQsIGFzIGluIGFnZSBhbmQgcmVwdXRhdGlvbiBoZSBjYW1lIGEgbGl0dGxlIGJlaGluZCBoaW0sIHNvIGRpZCBoZSBhbHNvIGluIHRoZSB0aW1lIG9mIGhpcyBkZWF0aCwgaGF2aW5nIGJlZW4gYSBtb3N0IGFmZmVjdGlvbmF0ZSBicm90aGVyLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
translation['43.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2YgY291cnNlIHRoaXMgaW5kdWNlZCBMdWN1bGx1cyB0byB3aXRoZHJhdyBldmVuIG1vcmUgZnJvbSBwdWJsaWMgbGlmZS4gQW5kIHdoZW4gQ2ljZXJvIHdhcyBiYW5pc2hlZCBmcm9tIHRoZSBjaXR5LCBhbmQgQ2F0byB3YXMgc2VudCBvdXQgdG8gQ3lwcnVzLCBoZSByZXRpcmVkIGFsdG9nZXRoZXIuIEV2ZW4gYmVmb3JlIGhpcyBkZWF0aCwgaXQgaXMgc2FpZCB0aGF0IGhpcyB1bmRlcnN0YW5kaW5nIHdhcyBhZmZlY3RlZCBhbmQgZ3JhZHVhbGx5IGZhZGVkIGF3YXkuIEJ1dCBDb3JuZWxpdXMgTmVwb3Mgc2F5cyB0aGF0IEx1Y3VsbHVzIGxvc3QgaGlzIG1pbmQgbm90IGZyb20gb2xkIGFnZSwgbm9yIHlldCBmcm9tIGRpc2Vhc2UsIGJ1dCB0aGF0IGhlIHdhcyBkaXNhYmxlZCBieSBkcnVncyBhZG1pbmlzdGVyZWQgdG8gaGltIGJ5IG9uZSBvZiBoaXMgZnJlZWRtZW4sIENhbGxpc3RoZW5lczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['43.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgdGhlIGRydWdzIHdlcmUgZ2l2ZW4gaGltIGJ5IENhbGxpc3RoZW5lcyBpbiBvcmRlciB0byB3aW4gbW9yZSBvZiBoaXMgbG92ZSwgaW4gdGhlIGJlbGllZiB0aGF0IHRoZXkgaGFkIHN1Y2ggYSBwb3dlciwgYnV0IHRoZXkgZHJvdmUgaGltIGZyb20gaGlzIHNlbnNlcyBhbmQgb3ZlcndoZWxtZWQgaGlzIHJlYXNvbiwgc28gdGhhdCBldmVuIHdoaWxlIGhlIHdhcyBzdGlsbCBhbGl2ZSwgaGlzIGJyb3RoZXIgbWFuYWdlZCBoaXMgcHJvcGVydHkuIEhvd2V2ZXIsIHdoZW4gaGUgZGllZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFib3V0IDU3IEIuQy48L25vdGU+IHRoZSBwZW9wbGUgZ3JpZXZlZCBqdXN0IGFzIG11Y2ggYXMgaWYgaGlzIGRlYXRoIGhhZCBjb21lIGF0IHRoZSBjdWxtaW5hdGlvbiBvZiBoaXMgbWlsaXRhcnkgYW5kIHBvbGl0aWNhbCBzZXJ2aWNlcywgYW5kIGZsb2NrZWQgdG9nZXRoZXIsIGFuZCB0cmllZCB0byBjb21wZWwgdGhlIHlvdW5nIG5vYmxlcyB3aG8gaGFkIGNhcnJpZWQgdGhlIGJvZHkgaW50byB0aGUgZm9ydW0gdG8gYnVyeSBpdCBpbiB0aGUgQ2FtcHVzIE1hcnRpdXMsIHdoZXJlIFN1bGxhIGFsc28gaGFkIGJlZW4gYnVyaWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
