var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIGNyaXNpcywgQXRoZW5pYW5zLCBjYWxscyBvbiB5b3UsIGFsbW9zdCB3aXRoIGFuIGF1ZGlibGUgdm9pY2UsIHRvIHRha2UgaW50byB5b3VyCiAgICAgICAgICAgICAgICAgICAgb3duIGhhbmRzIHRoZSBjb250cm9sIG9mIHlvdXIgaW50ZXJlc3RzIGluIHRoZSBOb3J0aCwgaWYgeW91IGFyZSByZWFsbHkgYW54aW91cwogICAgICAgICAgICAgICAgICAgIHRvIHNhZmVndWFyZCB0aGVtLiBCdXQsIEkgY29uZmVzcywgb3VyIGF0dGl0dWRlIHB1enpsZXMgbWUuIE15IG93biBpZGVhIHdvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgdG8gdm90ZSBhbiBleHBlZGl0aW9uIGF0IG9uY2UsIHRvIG1ha2UgaW5zdGFudCBwcmVwYXJhdGlvbiBmb3IgaXRzIGRpc3BhdGNoLAogICAgICAgICAgICAgICAgICAgIHRodXMgYXZvaWRpbmcgb3VyIHByZXZpb3VzIGJsdW5kZXIsIGFuZCB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIHN0YXRlIG91cgogICAgICAgICAgICAgICAgICAgIGludGVudGlvbnMgYW5kIHdhdGNoIGV2ZW50cy4gPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk91ciBjaGllZiBncm91bmQKICAgICAgICAgICAgICAgICAgICBmb3IgYWxhcm0gaXMgdGhhdCB0aGlzIG1hbiwgc28gdW5zY3J1cHVsb3VzLCBzbyBxdWljayB0byBzZWl6ZSBoaXMgb3Bwb3J0dW5pdHksCiAgICAgICAgICAgICAgICAgICAgbm93IHlpZWxkaW5nIGEgcG9pbnQgd2hlbiBpdCBzdWl0cyBoaXMgcHVycG9zZSwgbm93IHRocmVhdGVuaW5n4oCUYW5kCiAgICAgICAgICAgICAgICAgICAgaGlzIHRocmVhdHMgbWF5IHdlbGwgY2FycnkgY29udmljdGlvbuKAlG5vdyBtaXNyZXByZXNlbnRpbmcgdXMgYW5kIG91cgogICAgICAgICAgICAgICAgICAgIGZhaWx1cmUgdG8gaW50ZXJ2ZW5lLCBtYXkgZGl2ZXJ0IHRvIGhpcyBvd24gcHVycG9zZSBhbmQgd3Jlc3QgZnJvbSB1cyBzb21ldGhpbmcKICAgICAgICAgICAgICAgICAgICBvZiB2aXRhbCBpbXBvcnRhbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGl0IGlzIHJlYXNvbmFibGUgdG8gc3VnZ2VzdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHZlcnkgdGhpbmcgd2hpY2ggbWFrZXMgUGhpbGlwJ3MgcG9zaXRpb24gbW9zdCByZWRvdWJ0YWJsZSBpcyBhbHNvIG1vc3QKICAgICAgICAgICAgICAgICAgICBlbmNvdXJhZ2luZyBmb3IgeW91LiBGb3IgdGhlIHN3aWZ0IGFuZCBvcHBvcnR1bmUgbW92ZW1lbnRzIG9mIHdhciBoZSBoYXMgYW4KICAgICAgICAgICAgICAgICAgICBpbW1lbnNlIGFkdmFudGFnZSBvdmVyIHVzIGluIHRoZSBmYWN0IHRoYXQgaGUgaXMgdGhlIHNvbGUgZGlyZWN0b3Igb2YgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIHBvbGljeSwgb3BlbiBvciBzZWNyZXQsIHRoYXQgaGUgdW5pdGVzIHRoZSBmdW5jdGlvbnMgb2YgYSBnZW5lcmFsLCBhIHJ1bGVyIGFuZCBhCiAgICAgICAgICAgICAgICAgICAgdHJlYXN1cmVyLCBhbmQgdGhhdCBoZSBpcyBhbHdheXMgYXQgdGhlIGhlYWQgb2YgaGlzIGFybXk7IGJ1dCB3aGVuIGl0IGNvbWVzIHRvIGEKICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGlvbiBzdWNoIGFzIGhlIHdvdWxkIGdsYWRseSBtYWtlIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+LCB0aGUgdGFibGVzIGFyZSB0dXJuZWQuIDwvdHJhbnNsYXRpb24+"
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBleWVzIG9mIHRoZSBPbHludGhpYW5zIGFyZSBvcGVuZWQgdG8gdGhlIGZhY3QgdGhhdCB0aGV5IGFyZSBub3cKICAgICAgICAgICAgICAgICAgICBmaWdodGluZyBub3QgZm9yIGdsb3J5LCBub3QgZm9yIGEgc3RyaXAgb2YgdGVycml0b3J5LCBidXQgdG8gYXZlcnQgdGhlIG92ZXJ0aHJvdwogICAgICAgICAgICAgICAgICAgIGFuZCBlbnNsYXZlbWVudCBvZiB0aGVpciBmYXRoZXJsYW5kLiBUaGV5IGtub3cgaG93IGhlIHRyZWF0ZWQgdGhvc2UKICAgICAgICAgICAgICAgICAgICBBbXBoaXBvbGl0YW5zIHdobyBiZXRyYXllZCB0aGVpciBjaXR5IGFuZCB0aG9zZSBQeWRuYWVhbnMgd2hvIG9wZW5lZCB0aGVpciBnYXRlcwogICAgICAgICAgICAgICAgICAgIHRvIGhpbS4gQW5kIGEgZGVzcG90aXNtLCBJIHRha2UgaXQsIGlzIGFzIGEgcnVsZSBtaXN0cnVzdGVkIGJ5IGZyZWUKICAgICAgICAgICAgICAgICAgICBjb25zdGl0dXRpb25zLCBlc3BlY2lhbGx5IHdoZW4gdGhleSBhcmUgbmVhciBuZWlnaGJvcnMuIDwvdHJhbnNsYXRpb24+"
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkkgYmlkIHlvdSBncmFzcCB0aGVzZSBmYWN0cywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kIHdlaWdoIHdlbGwgYWxsIHRoZSBpbXBvcnRhbnQKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9ucy4gTWFrZSB1cCB5b3VyIG1pbmRzOyByb3VzZSB5b3VyIHNwaXJpdHM7IHB1dCB5b3VyIGhlYXJ0IGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgd2FyLCBub3cgb3IgbmV2ZXIuIFBheSB5b3VyIGNvbnRyaWJ1dGlvbnMgY2hlZXJmdWxseTsgc2VydmUgaW4gcGVyc29uOyBsZWF2ZQogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgdG8gY2hhbmNlLiBZb3UgaGF2ZSBubyBsb25nZXIgdGhlIHNoYWRvdyBvZiBhbiBleGN1c2UgZm9yIHNoaXJraW5nIHlvdXIKICAgICAgICAgICAgICAgICAgICBkdXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBsb25nIHRoZSBjb21tb24gdGFsayB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIE9seW50aGlhbnMgbXVzdCBiZSBtYWRlIHRvIGZpZ2h0IFBoaWxpcDsgYW5kIG5vdyBpdCBoYXMgY29tZSBhYm91dCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBuYXR1cmFsIGNvdXJzZSwgYW5kIHRoYXQgdG9vIGluIGEgd2F5IHRoYXQgc3VpdHMgeW91IGFkbWlyYWJseS4gRm9yIGlmIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgcGx1bmdlZCBpbnRvIHdhciBpbiByZWxpYW5jZSBvbiB5b3VyIGFkdmljZSwgdGhleSB3b3VsZCBwZXJoYXBzIGhhdmUgcHJvdmVkCiAgICAgICAgICAgICAgICAgICAgdW5jZXJ0YWluIGFsbGllcyBhbmQgb25seSBoYWxmLWhlYXJ0ZWQgaW4gdGhlaXIgcmVzb2x2ZTsgYnV0IG5vdyB0aGF0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaGF0cmVkIG9mIFBoaWxpcCBpcyB0aGUgb3V0Y29tZSBvZiB0aGVpciBvd24gZ3JpZXZhbmNlcywgaXQgaXMgbmF0dXJhbCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaG9zdGlsaXR5IHNob3VsZCBoYXZlIGEgZmlybSBiYXNlIGluIHRoZWlyIGFwcHJlaGVuc2lvbnMgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZXMuIDwvdHJhbnNsYXRpb24+"
translation['1.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdSBtdXN0IG5vdCBsZXQgc2xpcCB0aGUKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0eSB0aGF0IG9mZmVycywgbm9yIG1ha2UgdGhlIGJsdW5kZXIgeW91IGhhdmUgc28gb2Z0ZW4gbWFkZSBiZWZvcmUuCiAgICAgICAgICAgICAgICAgICAgV2hlbiB3ZSByZXR1cm5lZCBmcm9tIHRoZSBFdWJvZWFuIGV4cGVkaXRpb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucyB0b29rIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBUaGViYW5zIGluIDM1Ny48L25vdGU+IGFuZCBIaWVyYXggYW5kIFN0cmF0b2NsZXMsIHRoZSBlbnZveXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZWJhbnMgaW4gMzU3LjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiwgbW91bnRlZCB0aGlzIHBsYXRmb3JtIGFuZAogICAgICAgICAgICAgICAgICAgIGJhZGUgeW91IHNhaWwgYW5kIHRha2Ugb3ZlciB0aGVpciBjaXR5LCBpZiB3ZSBoYWQgc2hvd24gdGhlIHNhbWUgZWFybmVzdG5lc3MgaW4KICAgICAgICAgICAgICAgICAgICBvdXIgb3duIGNhdXNlIGFzIGluIGRlZmVuY2Ugb2YgdGhlIHNhZmV0eSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiB3b3VsZCBoYXZlIGJlZW4geW91cnMgYXQgb25jZSBhbmQgeW91IHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIHJlbGlldmVkIG9mIGFsbCB5b3VyIHN1YnNlcXVlbnQgZGlmZmljdWx0aWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPk9uY2UgYWdhaW4sIHdoZW4gbmV3cyBjYW1lIG9mIHRoZSBzaWVnZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFB5ZG5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQeWRuYSI+UHlkbmE8L3BsYWNlTmFtZT4sIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+LCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1ldGhvbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1ldGhvbmUiPk1ldGhvbmU8L3BsYWNlTmFtZT4sIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDg0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwODQiPlBhZ2FzYWU8L3BsYWNlTmFtZT4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkluIDM1NywgMzU2LCAzNTQsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAzNTIgcmVzcGVjdGl2ZWx5Ljwvbm90ZT4gYW5kIG9mIHRoZSByZXN0IG9mIHRoZW3igJRub3QgdG8gd2VhcnkgeW91CiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGNvbXBsZXRlIGNhdGFsb2d1ZeKAlGlmIHdlIGhhZCBhdCB0aGF0IHRpbWUgc2hvd24gdGhlIHJlcXVpcmVkCiAgICAgICAgICAgICAgICAgICAgemVhbCBpbiBtYXJjaGluZyB0byB0aGUgaGVscCBvZiB0aGUgZmlyc3QgdGhhdCBhcHBlYWxlZCwgd2Ugc2hvdWxkIGhhdmUgZm91bmQKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgdG9kYXkgbXVjaCBtb3JlIGh1bWJsZSBhbmQgYWNjb21tb2RhdGluZy4gVW5mb3J0dW5hdGVseSB3ZSBhbHdheXMgbmVnbGVjdAogICAgICAgICAgICAgICAgICAgIHRoZSBwcmVzZW50IGNoYW5jZSBhbmQgaW1hZ2luZSB0aGF0IHRoZSBmdXR1cmUgd2lsbCByaWdodCBpdHNlbGYsIGFuZCBzbywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgUGhpbGlwIGhhcyB1cyB0byB0aGFuawogICAgICAgICAgICAgICAgICAgIGZvciBoaXMgcHJvc3Blcml0eS4gV2UgaGF2ZSByYWlzZWQgaGltIHRvIGEgZ3JlYXRlciBoZWlnaHQgdGhhbiBldmVyIGtpbmcgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IHJlYWNoZWQgYmVmb3JlLiBUb2RheQogICAgICAgICAgICAgICAgICAgIHRoaXMgb3Bwb3J0dW5pdHkgY29tZXMgdG8gdXMgZnJvbSB0aGUgT2x5bnRoaWFucyB1bnNvdWdodCwgYSBmYWlyZXIgb3Bwb3J0dW5pdHkKICAgICAgICAgICAgICAgICAgICB0aGFuIHdlIGhhdmUgZXZlciBoYWQgYmVmb3JlLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgbGV0IGFueW9uZSBmYWlybHkgcmVja29uIHVwIHRoZSBibGVzc2luZ3Mgd2UgaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIG9mIHRoZSBnb2RzLCBhbmQgdGhvdWdoIG11Y2ggaXMgYW1pc3MsIG5vbmUgdGhlIGxlc3MgaGlzIGdyYXRpdHVkZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgYmUgZ3JlYXTigJRhbmQgcmlnaHRseSBzbzogZm9yIG91ciBtYW55IGxvc3NlcyBpbiB0aGUgd2FyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPmkuZS4gdGhlIHdhciBhYm91dCB0aGUgcG9zc2Vzc2lvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4uPC9ub3RlPiBtYXkgYmUganVzdGx5CiAgICAgICAgICAgICAgICAgICAgaW1wdXRlZCB0byBvdXIgb3duIHN1cGluZW5lc3M7IHRoYXQgd2UgZGlkIG5vdCBzdWZmZXIgdGhlc2UgbG9zc2VzIGxvbmcgYWdvIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhpcyBvcHBvcnR1bml0eSBvZiBhbGxpYW5jZSBhZmZvcmRzIHVzIHNvbWUgY29tcGVuc2F0aW9uLCBpZiB3ZSBjaG9vc2UgdG8KICAgICAgICAgICAgICAgICAgICBhY2NlcHQgaXQsIHRoaXMgSSBmb3IgbXkgcGFydCBzaG91bGQgcHV0IGRvd24gYXMgYSBzaWduYWwgaW5zdGFuY2Ugb2YgdGhlIGZhdm9yCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGdvZHMuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPi48L3RyYW5zbGF0aW9uPg=="
translation['1.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5JIHN1cHBvc2UgaXQgaXMgd2l0aCBuYXRpb25hbCBhcwogICAgICAgICAgICAgICAgICAgIHdpdGggcHJpdmF0ZSB3ZWFsdGguIElmIGEgbWFuIGtlZXBzIHdoYXQgaGUgZ2FpbnMsIGhlIGlzIGR1bHkgZ3JhdGVmdWwgdG8KICAgICAgICAgICAgICAgICAgICBmb3J0dW5lOyBpZiBoZSBsb3NlcyBpdCBieSBoaXMgb3duIGltcHJ1ZGVuY2UsIGhlIGxvc2VzIGFsb25nIHdpdGggaXQgdGhlIHNlbnNlCiAgICAgICAgICAgICAgICAgICAgb2YgZ3JhdGl0dWRlLiBTbyBpbiBuYXRpb25hbCBhZmZhaXJzLCB0aG9zZSB3aG8gZmFpbCB0byB1c2UgdGhlaXIgb3Bwb3J0dW5pdGllcwogICAgICAgICAgICAgICAgICAgIGFyaWdodCwgZmFpbCBhbHNvIHRvIGFja25vd2xlZGdlIHRoZSBnb29kIHRoYXQgdGhlIGdvZHMgaGF2ZSBnaXZlbjsgZm9yIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgYWR2YW50YWdlIGluIHRoZSBwYXN0IGlzIGp1ZGdlZCBpbiB0aGUgbGlnaHQgb2YgdGhlIGZpbmFsIGlzc3VlLiBJdCBpcyB0aGVyZWZvcmUKICAgICAgICAgICAgICAgICAgICBvdXIgZHV0eSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdG8ga2VlcCBhCiAgICAgICAgICAgICAgICAgICAgY2FyZWZ1bCBleWUgb24gdGhlIGZ1dHVyZSwgdGhhdCBieSByZXN0b3Jpbmcgb3VyIHByb3NwZXJpdHkgd2UgbWF5IGVmZmFjZSB0aGUKICAgICAgICAgICAgICAgICAgICBkaXNjcmVkaXQgb2YgdGhlIHBhc3QuIDwvdHJhbnNsYXRpb24+"
translation['1.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgd2UgbGVhdmUgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtZW4gdG9vIGluIHRoZSBsdXJjaCwgQXRoZW5pYW5zLCBhbmQgdGhlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4gaXMgY3J1c2hlZCBieSBQaGlsaXAsIHRlbGwgbWUgd2hhdCBpcyB0byBwcmV2ZW50IGhpbQogICAgICAgICAgICAgICAgICAgIGZyb20gbWFyY2hpbmcgaGVuY2Vmb3J3YXJkIGp1c3Qgd2hlcmUgaGUgcGxlYXNlcy4gSSB3b25kZXIgaWYgYW55IG9uZSBvZiB5b3UgaW4KICAgICAgICAgICAgICAgICAgICB0aGlzIGF1ZGllbmNlIHdhdGNoZXMgYW5kIG5vdGVzIHRoZSBzdGVwcyBieSB3aGljaCBQaGlsaXAsIHdlYWsgYXQgZmlyc3QsIGhhcwogICAgICAgICAgICAgICAgICAgIGdyb3duIHNvIHBvd2VyZnVsLiBGaXJzdCBoZSBzZWl6ZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+LCBuZXh0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUHlkbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFB5ZG5hIj5QeWRuYTwvcGxhY2VOYW1lPiwgdGhlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDgxNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDA0ODE0Ij5Qb3RpZGFlYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBhZnRlciB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWV0aG9uZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWV0aG9uZSI+TWV0aG9uZTwvcGxhY2VOYW1lPiwgbGFzdGx5IGhlCiAgICAgICAgICAgICAgICAgICAgaW52YWRlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['1.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhhdmluZyBzZXR0bGVkIFBoZXJhZSwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwODQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA4NCI+UGFnYXNhZTwvcGxhY2VOYW1lPiwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1MSI+TWFnbmVzaWE8L3BsYWNlTmFtZT4sIGFuZCB0aGUgcmVzdCBvZiB0aGF0IGNvdW50cnkgdG8gc3VpdCBoaXMgcHVycG9zZXMsCiAgICAgICAgICAgICAgICAgICAgb2ZmIGhlIHdlbnQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+LCBhbmQgdGhlcmUsIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgZXZpY3Rpbmcgc29tZSBvZiB0aGUgY2hpZWZzIGFuZCBpbnN0YWxsaW5nIG90aGVycywgaGUgZmVsbCBzaWNrLiBPbiBoaXMKICAgICAgICAgICAgICAgICAgICByZWNvdmVyeSwgaGUgZGlkIG5vdCByZWxhcHNlIGludG8gaW5hY3Rpdml0eSwgYnV0IGluc3RhbnRseSBhc3NhaWxlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4uIEhpcyBjYW1wYWlnbnMgYWdhaW5zdCBJbGx5cmlhbnMKICAgICAgICAgICAgICAgICAgICBhbmQgUGFlb25pYW5zIGFuZCBLaW5nIEFyeWJiYXMgYW5kIGFueSBvdGhlcnMgdGhhdCBtaWdodCBiZSBtZW50aW9uZWQsIEkgcGFzcwogICAgICAgICAgICAgICAgICAgIG92ZXIgaW4gc2lsZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['1.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+4oCcV2VsbCzigJ0gc29tZSBvZiB5b3UgbWF5IHNheSwg4oCcd2h5IHRlbGwgdXMgdGhpcwogICAgICAgICAgICAgICAgICAgIG5vdz/igJ0gQmVjYXVzZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgSSB3YW50IHlvdSB0byBrbm93IGFuZCByZWFsaXplIHR3byB0aGluZ3M6IGZpcnN0LCB3aGF0CiAgICAgICAgICAgICAgICAgICAgYW4gZXhwZW5zaXZlIGdhbWUgaXQgaXMgdG8gc3F1YW5kZXIgeW91ciBpbnRlcmVzdHMgb25lIGJ5IG9uZTsgYW5kIHNlY29uZGx5LCB0aGUKICAgICAgICAgICAgICAgICAgICByZXN0bGVzcyBhY3Rpdml0eSB3aGljaCBpcyBpbmdyYWluZWQgaW4gUGhpbGlwJ3MgbmF0dXJlLCBhbmQgd2hpY2ggbWFrZXMgaXQKICAgICAgICAgICAgICAgICAgICBpbXBvc3NpYmxlIGZvciBoaW0gZXZlciB0byByZXN0IG9uIGhpcyBsYXVyZWxzLiBCdXQgaWYgUGhpbGlwIGFkb3B0cyB0aGUKICAgICAgICAgICAgICAgICAgICBwcmluY2lwbGUgdGhhdCBoZSBvdWdodCBhbHdheXMgdG8gYmUgaW1wcm92aW5nIGhpcyBwb3NpdGlvbiwgYW5kIHlvdSB0aGUKICAgICAgICAgICAgICAgICAgICBwcmluY2lwbGUgb2YgbmV2ZXIgZmFjaW5nIHlvdXIgZGlmZmljdWx0aWVzIHJlc29sdXRlbHksIGp1c3QgcmVmbGVjdCB3aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgbGlrZWx5IHRvIGJlIHRoZSBlbmQgb2YgaXQgYWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5TZXJpb3VzbHksIGlzCiAgICAgICAgICAgICAgICAgICAgYW55b25lIGhlcmUgc28gZm9vbGlzaCBhcyBub3QgdG8gc2VlIHRoYXQgb3VyIG5lZ2xpZ2VuY2Ugd2lsbCB0cmFuc2ZlciB0aGUgd2FyCiAgICAgICAgICAgICAgICAgICAgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjcxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzE2Ij5DaGFsY2lkaWNlPC9wbGFjZU5hbWU+IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPj8gWWV0IGlmIHRoYXQgY29tZXMgdG8gcGFzcywgSSBhbQogICAgICAgICAgICAgICAgICAgIGFmcmFpZCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCBqdXN0IGFzCiAgICAgICAgICAgICAgICAgICAgbWVuIHdobyBib3Jyb3cgbW9uZXkgcmVja2xlc3NseSBhdCBoaWdoIGludGVyZXN0IGVuam95IGEgdGVtcG9yYXJ5IGFjY29tbW9kYXRpb24KICAgICAgICAgICAgICAgICAgICBvbmx5IHRvIGZvcmZlaXQgdGhlaXIgZXN0YXRlcyBpbiB0aGUgZW5kLCBzbyB3ZSBtYXkgZmluZCB0aGF0IHdlIGhhdmUgcGFpZCBhCiAgICAgICAgICAgICAgICAgICAgaGVhdnkgcHJpY2UgZm9yIG91ciBpbmRvbGVuY2UsIGFuZCBiZWNhdXNlIHdlIGNvbnN1bHQgb3VyIG93biBwbGVhc3VyZSBpbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcsIG1heSBoZXJlYWZ0ZXIgY29tZSB0byBiZSBmb3JjZWQgdG8gZG8gbWFueSBvZiB0aGUgZGZmaWN1bHQgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgZm9yIHdoaWNoIHdlIGhhZCBubyBsaWtpbmcsIGFuZCBtYXkgZmluYWxseSBlbmRhbmdlciBvdXIgcG9zc2Vzc2lvbnMgaGVyZSBpbgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4gaXRzZWxmLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHNvbWVvbmUgbWF5IHRlbGwKICAgICAgICAgICAgICAgICAgICBtZSB0aGF0IHRvIGZpbmQgZmF1bHQgaXMgZWFzeSBhbmQgaW4gYW55IG9uZSdzIHBvd2VyLCBidXQgdGhhdCBpdCBuZWVkcyBhCiAgICAgICAgICAgICAgICAgICAgc3RhdGVzbWFuIHRvIGV4cG91bmQgdGhlIHBvbGljeSBkZW1hbmRlZCBieSBvdXIgY2lyY3Vtc3RhbmNlcy4gQnV0IEkgYW0gbm90CiAgICAgICAgICAgICAgICAgICAgdW5hd2FyZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCBpZgogICAgICAgICAgICAgICAgICAgIGFueXRoaW5nIGdvZXMgd3JvbmcsIHlvdSBvZnRlbiB2ZW50IHlvdXIgZGlzYXBwb2ludG1lbnQsIG5vdCBvbiB0aGUgcmVzcG9uc2libGUKICAgICAgICAgICAgICAgICAgICBhZ2VudHMsIGJ1dCBvbiB0aG9zZSB3aG8gaGFwcGVuIHRvIGhhdmUgYWRkcmVzc2VkIHlvdSBsYXN0LiBJIHNoYWxsIG5vdCwKICAgICAgICAgICAgICAgICAgICBob3dldmVyLCBjb25zdWx0IG15IG93biBzYWZldHkgYnkga2VlcGluZyBiYWNrIHdoYXQgSSBiZWxpZXZlIHRvIGJlIGZvciB5b3VyCiAgICAgICAgICAgICAgICAgICAgdHJ1ZSBpbnRlcmVzdHMuIDwvdHJhbnNsYXRpb24+"
translation['1.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5JIHN1Z2dlc3QgdGhlbiB0aGF0IHRoZSBjYXNlCiAgICAgICAgICAgICAgICAgICAgY2FsbHMgZm9yIHR3byBkaXN0aW5jdCBleHBlZGl0aW9uczsgb25lIG1pbGl0YXJ5IGZvcmNlIG11c3QgYmUgZGlzcGF0Y2hlZCB0bwogICAgICAgICAgICAgICAgICAgIHJlc2N1ZSB0aGVpciBjaXRpZXMgZm9yIHRoZSBPbHludGhpYW5zLCBhbmQgYSBzZWNvbmQgZm9yY2UsIGJvdGggbmF2YWwgYW5kCiAgICAgICAgICAgICAgICAgICAgbWlsaXRhcnksIHRvIHJhdmFnZSBQaGlsaXAncyB0ZXJyaXRvcnkuIElmIHlvdSBuZWdsZWN0IGVpdGhlciBvZiB0aGVtLCBJIGFtCiAgICAgICAgICAgICAgICAgICAgYWZyYWlkIHlvdXIgY2FtcGFpZ24gd2lsbCBwcm92ZSBhYm9ydGl2ZS4gPC90cmFuc2xhdGlvbj4="
translation['1.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IKICAgICAgICAgICAgICAgICAgICBpZiB5b3Ugc2VuZCBhIG1hcmF1ZGluZyBleHBlZGl0aW9uLCBoZSB3aWxsIHN0YW5kIG9uIHRoZSBkZWZlbnNpdmUgdW50aWwgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgbWFkZSBoaW1zZWxmIG1hc3RlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZW4gaGUgd2lsbCBlYXNpbHkgbWFyY2ggdG8gdGhlIHJlbGllZiBvZiBoaXMgb3duIHRlcnJpdG9yeTsgb3IgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgY29uZmluZSB5b3Vyc2VsdmVzIHRvIGhlbHBpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+LCBoZSB3aWxsIGtub3cgdGhhdCBoaXMgYmFzZSBpcyBzZWN1cmUgYW5kIHdpbGwgZ2l2ZQogICAgICAgICAgICAgICAgICAgIGNsb3NlIGFuZCB1bmRpdmlkZWQgYXR0ZW50aW9uIHRvIGhpcyBvcGVyYXRpb25zLCB1bnRpbCBhdCBsYXN0IGhlIG92ZXJjb21lcyB0aGUKICAgICAgICAgICAgICAgICAgICByZXNpc3RhbmNlIG9mIHRoZSBiZXNpZWdlZC4gT3VyIGV4cGVkaXRpb24sIHlvdSBzZWUsIG11c3QgYmUgb24gYSBsYXJnZSBzY2FsZQogICAgICAgICAgICAgICAgICAgIGFuZCB0d29mb2xkLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCBhcmUgbXkgdmlld3Mgb24gdGhlIGV4cGVkaXRpb25hcnkgZm9yY2UuIFdpdGggcmVnYXJkIHRvIHRoZSBzdXBwbHkgb2YKICAgICAgICAgICAgICAgICAgICBtb25leSwgeW91IGhhdmUgbW9uZXksIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT47IHlvdSBoYXZlIG1vcmUgdGhhbiBhbnkgb3RoZXIgbmF0aW9uIGhhcyBmb3IgbWlsaXRhcnkKICAgICAgICAgICAgICAgICAgICBwdXJwb3Nlcy4gQnV0IHlvdSBhcHByb3ByaWF0ZSBpdCB5b3Vyc2VsdmVzLCB0byBzdWl0IHlvdXIgb3duIHBsZWFzdXJlLiBOb3cgaWYKICAgICAgICAgICAgICAgICAgICB5b3Ugd2lsbCBzcGVuZCBpdCBvbiB0aGUgY2FtcGFpZ24sIHlvdSBoYXZlIG5vIG5lZWQgb2YgYSBmdXJ0aGVyIHN1cHBseTsgaWYgbm90LAogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZl4oCUb3IgcmF0aGVyLCB5b3UgaGF2ZSBubyBzdXBwbHkgYXQgYWxsLgogICAgICAgICAgICAgICAgICAgIOKAnFdoYXQh4oCdIHNvbWVvbmUgd2lsbCBjcnksIOKAnGRvIHlvdSBhY3R1YWxseSBtb3ZlIHRvCiAgICAgICAgICAgICAgICAgICAgdXNlIHRoaXMgbW9uZXkgZm9yIG1pbGl0YXJ5IHB1cnBvc2VzP+KAnSBPZiBjb3Vyc2UgSSBkbyBub3QuIDwvdHJhbnNsYXRpb24+"
translation['1.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Pbmx5IGl0IGlzIG15IG9waW5pb24gdGhhdCB3ZSBtdXN0IHByb3ZpZGUgc29sZGllcnMKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCB0aGVyZSBtdXN0IGJlIG9uZSB1bmlmb3JtIHN5c3RlbSBvZiBwYXkgaW4gcmV0dXJuIGZvciBzZXJ2aWNlLiBZb3VyCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiwgaG93ZXZlciwgaXMgdGhhdCB5b3Ugc2hvdWxkLCB3aXRob3V0IGFueSB0cm91YmxlLCBqdXN0IGFwcHJvcHJpYXRlIHRoZQogICAgICAgICAgICAgICAgICAgIG1vbmV5IGZvciB5b3VyIGZlc3RpdmFscy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIFRoZW9yaWMgRnVuZCBoYWQKICAgICAgICAgICAgICAgICAgICAgICAgYmVlbiBpbnN0aXR1dGVkIGJ5IFBlcmljbGVzLCBub21pbmFsbHkgdG8gZW5hYmxlIHRoZSBwb29yZXIgY2l0aXplbnMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgYXR0ZW5kIHRoZSBwdWJsaWMgZmVzdGl2YWxzLiBJdCB3b3VsZCBzZWVtIHRoYXQgZGVmaW5pdGUgc3VtcyB3ZXJlIGFsbG90ZWQKICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHZhcmlvdXMgZGVwYXJ0bWVudHMgb2YgU3RhdGUgZXhwZW5kaXR1cmUsIGFuZCB0aGUgc3VycGx1cyB3YXMgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FsIG9mIHRoZSBkZW1vY3JhY3kgZm9yIHNwZWNpYWwgbWlsaXRhcnkgb3Igb3RoZXIgb2JqZWN0cy4gU29tZXdoZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGFib3V0IDM1NCBFdWJ1bHVzLCB3aG8gd2FzIG9uZSBvZiB0aGUgYm9hcmQgd2hpY2ggY29udHJvbGxlZCB0aGUgVGhlb3JpYwogICAgICAgICAgICAgICAgICAgICAgICBGdW5kLCBjYXJyaWVkIGEgbGF3IGFwcHJvcHJpYXRpbmcgdG8gaXQgdGhlIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+d2hvbGU8L2VtcGg+IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzdXJwbHVzIHJldmVudWUuIEhlIGRvZXMgbm90IHNlZW0gdG8gaGF2ZSBzdGFydmVkIHRoZSBkZWZlbnNpdmUgc2VydmljZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dCBoZSBsZWZ0IG5vIHByb3Zpc2lvbiBmb3IgYSB3YXIsIGV4Y2VwdCBieSBtZWFucyBvZiBhbiBleHRyYW9yZGluYXJ5IGxldnkKICAgICAgICAgICAgICAgICAgICAgICAgb3IgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4PPhs6/z4HhvbE8L2ZvcmVpZ24+LiBFaXRoZXIgaW4gMzYwLCBvciBwZXJoYXBzIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDM0OSBiZWZvcmUgdGhlIGRlbGl2ZXJ5IG9mIHRoZSB0aGlyZCBPbHludGhpYWMsIGFuIGF0dGVtcHQgdG8gcmV2ZXJ0IHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBlYXJsaWVyIGFycmFuZ2VtZW50IHdhcyBmb2xsb3dlZCBieSB0aGUgdXN1YWwgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrPPgc6xz4bhvbQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIM+AzrHPgc6xzr3hvbnOvM+Jzr08L2ZvcmVpZ24+LCBhbmQgRXVidWx1cyBpcyBhbGxlZ2VkIHRvIGhhdmUgY29uZmlybWVkIHRoZSBiYWQKICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtIGJ5IG1ha2luZyBpdCBhIGNhcGl0YWwgb2ZmZW5jZSBldmVuIHRvIHByb3Bvc2UgYSBkaXZlcnNpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmQuIERlbW9zdGhlbmVzIGFwcHJvYWNoZXMgdGhlIHN1YmplY3Qgd2l0aCBhIHN0dWRpZWQgc2hvdyBvZgogICAgICAgICAgICAgICAgICAgICAgICBlbWJhcnJhc3NtZW50Ljwvbm90ZT4gVGhlbiB0aGUgb25seSBhbHRlcm5hdGl2ZSBpcyBhIHdhci10YXgsIGhlYXZ5IG9yCiAgICAgICAgICAgICAgICAgICAgbGlnaHQsIGFzIGNpcmN1bXN0YW5jZXMgZGVtYW5kLiBPbmx5IG1vbmV5IHdlIG11c3QgaGF2ZSwgYW5kIHdpdGhvdXQgbW9uZXkKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIGNhbiBiZSBkb25lIHRoYXQgb3VnaHQgdG8gYmUgZG9uZS4gVGhlcmUgYXJlIG90aGVyIHByb3Bvc2FscyBiZWZvcmUgeW91CiAgICAgICAgICAgICAgICAgICAgZm9yIHJhaXNpbmcgc3VwcGxpZXM7IGNob29zZSB3aGljaGV2ZXIgb2YgdGhlbSB5b3UgdGhpbmsgZXhwZWRpZW50LCBhbmQsIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgeWV0IHRpbWUsIGdyYXBwbGUgd2l0aCB0aGUgcHJvYmxlbS4gPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj53aG9sZTwvZW1waD4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHN1cnBsdXMgcmV2ZW51ZS4gSGUgZG9lcyBub3Qgc2VlbSB0byBoYXZlIHN0YXJ2ZWQgdGhlIGRlZmVuc2l2ZSBzZXJ2aWNlcywKICAgICAgICAgICAgICAgICAgICAgICAgYnV0IGhlIGxlZnQgbm8gcHJvdmlzaW9uIGZvciBhIHdhciwgZXhjZXB0IGJ5IG1lYW5zIG9mIGFuIGV4dHJhb3JkaW5hcnkgbGV2eQogICAgICAgICAgICAgICAgICAgICAgICBvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDPg8+Gzr/PgeG9sTwvZm9yZWlnbj4uIEVpdGhlciBpbiAzNjAsIG9yIHBlcmhhcHMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgMzQ5IGJlZm9yZSB0aGUgZGVsaXZlcnkgb2YgdGhlIHRoaXJkIE9seW50aGlhYywgYW4gYXR0ZW1wdCB0byByZXZlcnQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGVhcmxpZXIgYXJyYW5nZW1lbnQgd2FzIGZvbGxvd2VkIGJ5IHRoZSB1c3VhbCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Os8+BzrHPhuG9tAogICAgICAgICAgICAgICAgICAgICAgICAgICAgz4DOsc+BzrHOveG9uc68z4nOvTwvZm9yZWlnbj4sIGFuZCBFdWJ1bHVzIGlzIGFsbGVnZWQgdG8gaGF2ZSBjb25maXJtZWQgdGhlIGJhZAogICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW0gYnkgbWFraW5nIGl0IGEgY2FwaXRhbCBvZmZlbmNlIGV2ZW4gdG8gcHJvcG9zZSBhIGRpdmVyc2lvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZnVuZC4gRGVtb3N0aGVuZXMgYXBwcm9hY2hlcyB0aGUgc3ViamVjdCB3aXRoIGEgc3R1ZGllZCBzaG93IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGVtYmFycmFzc21lbnQuPC90cmFuc2xhdGlvbj4="
translation['1.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgd29ydGggd2hpbGUsIGhvd2V2ZXIsIHRvIG9ic2VydmUgYW5kCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXIgaG93IFBoaWxpcCBzdGFuZHMgdG9kYXkuIEhpcyBwcmVzZW50IHByb3NwZWN0cyBhcmUgbm90IHNvIGJyaWdodCBvcgogICAgICAgICAgICAgICAgICAgIHNhdGlzZmFjdG9yeSBhcyB0aGV5IHNlZW0gYW5kIGFzIGEgc3VwZXJmaWNpYWwgb2JzZXJ2ZXIgbWlnaHQgcHJvbm91bmNlIHRoZW07CiAgICAgICAgICAgICAgICAgICAgbm9yIHdvdWxkIGhlIGV2ZXIgaGF2ZSBwcm92b2tlZCB0aGlzIHdhciBoYWQgaGUgdGhvdWdodCB0aGF0IGhlIHdvdWxkIGJlIGJvdW5kCiAgICAgICAgICAgICAgICAgICAgdG8gZmlnaHQgaGltc2VsZi4gSGUgaG9wZWQgdGhhdCBvbiBoaXMgZmlyc3QgZW50cnkgaGUgd291bGQgY2FycnkgYWxsIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIGhpbSwgYW5kIGhlIGZpbmRzIGhpbXNlbGYgY29tcGxldGVseSBtaXN0YWtlbi4gVGhpcyB1bmZvcmVzZWVuIHJlc3VsdCBjb25mb3VuZHMKICAgICAgICAgICAgICAgICAgICBhbmQgZGlzY291cmFnZXMgaGltOyBhbmQgYmVzaWRlcyB0aGVyZSBpcyB0aGUgcXVlc3Rpb24gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['1.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgVGhlc3NhbGlhbnMgd2VyZSBhbHdheXMsIG9mIGNvdXJzZSwgYm9ybiB0cmFpdG9ycywgYW5kIFBoaWxpcCBmaW5kcyB0aGVtCiAgICAgICAgICAgICAgICAgICAgdG9kYXkganVzdCB3aGF0IGV2ZXJ5b25lIGhhcyBmb3VuZCB0aGVtIGluIHRoZSBwYXN0LiBUaGV5IGhhdmUgZm9ybWFsbHkgcmVzb2x2ZWQKICAgICAgICAgICAgICAgICAgICB0byBkZW1hbmQgdGhlIHJlc3RpdHV0aW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDg0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwODQiPlBhZ2FzYWU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBhbmQgaGF2ZSBoaW5kZXJlZCBoaW0gZnJvbSBmb3J0aWZ5aW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzUxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTEiPk1hZ25lc2lhPC9wbGFjZU5hbWU+LiBJIGhhdmUgYWxzbyBiZWVuIGluZm9ybWVkIHRoYXQgdGhleSB3aWxsIG5vIGxvbmdlcgogICAgICAgICAgICAgICAgICAgIGhhbmQgb3ZlciB0byBoaW0gdGhlIHByb2ZpdHMgb2YgdGhlaXIgaGFyYm9ycyBhbmQgbWFya2V0cywgb24gdGhlIGdyb3VuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhpcyBzdW0gb3VnaHQgdG8gYmUgYXBwbGllZCB0byB0aGUgZ292ZXJubWVudCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPiBhbmQgbm90IGZpbmQgaXRzIHdheSBpbnRvIFBoaWxpcCdzIGNvZmZlcnMuIE5vdyBpZiBoZQogICAgICAgICAgICAgICAgICAgIGlzIGRlcHJpdmVkIG9mIHRoaXMgc291cmNlIG9mIHJldmVudWUsIGhlIHdpbGwgYmUgaGFyZCBwdXQgdG8gaXQgdG8gcGF5IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBtYWludGVuYW5jZSBvZiBoaXMgbWVyY2VuYXJpZXMuIDwvdHJhbnNsYXRpb24+"
translation['1.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc3VyZWx5IHdlCiAgICAgICAgICAgICAgICAgICAgbXVzdCBhc3N1bWUgdGhhdCB5b3VyIFBhZW9uaWFuIG9yIElsbHlyaWFuIG9yIGFueSBvdGhlciBvZiB0aGVzZSB0cmliZXMgd291bGQKICAgICAgICAgICAgICAgICAgICBwcmVmZXIgZnJlZWRvbSBhbmQgaW5kZXBlbmRlbmNlIHRvIHNsYXZlcnkuIFRoZXkgYXJlIG5vdCBhY2N1c3RvbWVkIHRvCiAgICAgICAgICAgICAgICAgICAgYWNrbm93bGVkZ2UgYSBtYXN0ZXIsIGFuZCBQaGlsaXAgaXMgYnkgYWxsIGFjY291bnRzIGEgcGFydGljdWxhcmx5IGhhcnNoIG9uZS4KICAgICAgICAgICAgICAgICAgICBBbmQgaW5kZWVkIHRoYXQgaXMgbm90IHN1cnByaXNpbmcuIFVuZGVzZXJ2ZWQgc3VjY2VzcyBlbmdlbmRlcnMgZm9sbHkgaW4KICAgICAgICAgICAgICAgICAgICB1bmJhbGFuY2VkIG1pbmRzLCBhbmQgdGhlcmVmb3JlIGl0IG9mdGVuIHByb3ZlcyBoYXJkZXIgdG8ga2VlcCB0aGFuIHRvIHdpbgogICAgICAgICAgICAgICAgICAgIHByb3NwZXJpdHkuIDwvdHJhbnNsYXRpb24+"
translation['1.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5Mb29rIHRoZW4sIEF0aGVuaWFucywgdXBvbiBoaXMKICAgICAgICAgICAgICAgICAgICBkaWZmaWN1bHRpZXMgYXMgeW91ciBvcHBvcnR1bml0eS4gQmUgcHJvbXB0IHRvIHRha2UgdXAgdGhlIGNoYWxsZW5nZS4gU2VuZAogICAgICAgICAgICAgICAgICAgIGVtYmFzc2llcyB3aGVuIG5lY2Vzc2FyeS4gVGFrZSB0aGUgZmllbGQgaW4gcGVyc29uLiBSb3VzZSBhbGwgdGhlIG90aGVyIHN0YXRlcy4KICAgICAgICAgICAgICAgICAgICBSZWZsZWN0IGhvdyBlYWdlcmx5IFBoaWxpcCB3b3VsZCBtYXJjaCBhZ2FpbnN0IHlvdSwgaWYgaGUgaGFkIHN1Y2ggYSBjaGFuY2UgYXMKICAgICAgICAgICAgICAgICAgICB3ZSBoYXZlLCBhbmQgaWYgdGhlIHdhciB3ZXJlIG9uIG91ciBmcm9udGllcnMuIEFyZSB5b3Ugbm90IGFzaGFtZWQgaWYsIGhhdmluZwogICAgICAgICAgICAgICAgICAgIHRoZSBvcHBvcnR1bml0eSwgeW91IGxhY2sgdGhlIGNvdXJhZ2UgdG8gZG8gdG8gaGltIHdoYXQgaGUgd291bGQgY2VydGFpbmx5IGRvIHRvCiAgICAgICAgICAgICAgICAgICAgeW91IGlmIGhlIGNvdWxkPyA8L3RyYW5zbGF0aW9uPg=="
translation['1.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T25lIHBvaW50IG1vcmUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uIERvCiAgICAgICAgICAgICAgICAgICAgbm90IGZvcmdldCB0aGF0IHlvdSBjYW4gdG9kYXkgY2hvb3NlIHdoZXRoZXIgeW91IG11c3QgZmlnaHQgdGhlcmUgb3IgUGhpbGlwIG11c3QKICAgICAgICAgICAgICAgICAgICBmaWdodCBoZXJlLiBJZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4gaG9sZHMgb3V0LAogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIGZpZ2h0IHRoZXJlLCB0byB0aGUgZGV0cmltZW50IG9mIGhpcyB0ZXJyaXRvcnksIHdoaWxlIHlvdSBlbmpveSBpbgogICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5IHRoZSBsYW5kIHRoYXQgaXMgeW91ciBob21lLiBCdXQgaWYgUGhpbGlwIHRha2VzIE9seW50aHVzLCB3aG8gaXMgdG8KICAgICAgICAgICAgICAgICAgICBwcmV2ZW50IGhpcyBtYXJjaGluZyBoaXRoZXI/IFRoZSBUaGViYW5zPyA8L3RyYW5zbGF0aW9uPg=="
translation['1.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5JdAogICAgICAgICAgICAgICAgICAgIG1heSBiZSBhbiB1bmR1bHkgaGFyc2ggdGhpbmcgdG8gc2F5LCBidXQgdGhleSB3aWxsIGpvaW4gaGVhcnRpbHkgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgaW52YXNpb24uIFRoZSBQaG9jaWFucyB0aGVuPyBXaGF0ISB0aGUgbWVuIHdobyBjYW5ub3QgcHJvdGVjdCB0aGVpciBvd24gY291bnRyeQogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgeW91ciBoZWxwPyBBbnkgb3RoZXJzPyDigJxCdXQsIG15IGZyaWVuZCzigJ0gY3JpZXMKICAgICAgICAgICAgICAgICAgICBzb21lb25lLCDigJxoZSB3aWxsIG5vdCB3aXNoIHRvIGF0dGFjayB1cy7igJ0gTmF5LCBpdCB3b3VsZCBiZSBhCiAgICAgICAgICAgICAgICAgICAgY3Jvd25pbmcgYWJzdXJkaXR5IGlmLCBoYXZpbmcgdGhlIHBvd2VyLCBoZSBzaG91bGQgbGFjayB0aGUgd2lsbCB0byBjYXJyeSBvdXQKICAgICAgICAgICAgICAgICAgICB0aGUgdGhyZWF0IHdoaWNoIHRvZGF5IGhlIHV0dGVycyBhdCB0aGUgcmlzayBvZiBoaXMgcmVwdXRhdGlvbiBmb3Igc2FuaXR5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW5kZWVkIEkgdGhpbmsgeW91IHdhbnQgbm8gc3BlZWNoIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdmUgaG93IHZhc3QgaXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBhIHdhciBoZXJlIGFuZCBhIHdhciB5b25kZXIuIFdoeSwgaWYKICAgICAgICAgICAgICAgICAgICB5b3Ugd2VyZSBvYmxpZ2VkIHRvIHRha2UgdGhlIGZpZWxkIHlvdXJzZWx2ZXMgZm9yIGEgYmFyZSBtb250aCwgZHJhd2luZyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiB0aGUgbmVjZXNzYXJ5CiAgICAgICAgICAgICAgICAgICAgc3VwcGxpZXPigJRJIGFtIGFzc3VtaW5nIHRoYXQgdGhlcmUgaXMgbm8gZW5lbXkgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGNvdW50cnnigJRJIHN1cHBvc2UgeW91ciBmYXJtZXJzIHdvdWxkIGxvc2UgbW9yZSB0aGFuIHRoZSBzdW0gc3BlbnQgdXBvbgogICAgICAgICAgICAgICAgICAgIHRoZSB3aG9sZSBvZiB0aGUgcHJldmlvdXMgd2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgd2FyIGFib3V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4uIERlbW9zdGhlbmVzCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2tvbnMgaXRzIGNvc3QgYXQgPGRhdGUgYXV0aG5hbWU9IjE1MDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9IjE1MDAiPjE1MDA8L2RhdGU+IHRhbGVudHMg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyLjI4IiB2YWxpZD0ieWVzIj5EZW0uIDIuMjg8L2JpYmw+77yJLjwvbm90ZT4gQnV0IGlmIHdhciBjb21lcyB3aXRoaW4KICAgICAgICAgICAgICAgICAgICBvdXIgYm9yZGVycywgYXQgd2hhdCBmaWd1cmUgbXVzdCB3ZSBhc3Nlc3Mgb3VyIGxvc3Nlcz8gQW5kIHlvdSBtdXN0IGFkZCB0aGUKICAgICAgICAgICAgICAgICAgICBpbnNvbGVuY2Ugb2YgdGhlIGVuZW15IGFuZCB0aGUgaWdub21pbnkgb2Ygb3VyIHBvc2l0aW9uLCBncmVhdGVyIHRoYW4gYW55IGxvc3MKICAgICAgICAgICAgICAgICAgICBpbiBhIHdpc2UgbWFuJ3MgZXN0aW1hdGlvbi4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+LiBEZW1vc3RoZW5lcwogICAgICAgICAgICAgICAgICAgICAgICByZWNrb25zIGl0cyBjb3N0IGF0IDxkYXRlIGF1dGhuYW1lPSIxNTAwIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIxNTAwIj4xNTAwPC9kYXRlPiB0YWxlbnRzIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMi4yOCIgdmFsaWQ9InllcyI+RGVtLiAyLjI4PC9iaWJsPu+8iS48L3RyYW5zbGF0aW9uPg=="
translation['1.28'] = ""
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5PbiBtYW55CiAgICAgICAgICAgICAgICAgICAgb2NjYXNpb25zLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBvbmUgbWF5LCBJCiAgICAgICAgICAgICAgICAgICAgdGhpbmssIHJlY29nbml6ZSB0aGUgbWFuaWZlc3QgZmF2b3Igb2YgaGVhdmVuIHRvd2FyZHMgb3VyIGNpdHksIGFuZCBub3QgbGVhc3QgYXQKICAgICAgICAgICAgICAgICAgICB0aGUgcHJlc2VudCBjcmlzaXMuIFRoYXQgUGhpbGlwIGhhcyBmb3VuZCBtZW4gd2lsbGluZyB0byBmaWdodCBoaW0sIHNpdHVhdGVkIG9uCiAgICAgICAgICAgICAgICAgICAgaGlzIGZyb250aWVycyBhbmQgcG9zc2Vzc2VkIG9mIGNvbnNpZGVyYWJsZSBwb3dlciwgYWJvdmUgYWxsIHNvIGRldGVybWluZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgcmVnYXJkIGFueSBhY2NvbW1vZGF0aW9uIHdpdGggaGltIGFzIGJvdGggZGVsdXNpdmUgYW5kIGZhdGFsIHRvIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIGNvdW50cnnigJR0aGlzIGhhcyBhbGwgdGhlIGFwcGVhcmFuY2Ugb2YgYSBzdXBlci1odW1hbiwgYSBkaXZpbmUKICAgICAgICAgICAgICAgICAgICBiZW5lZmljZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZSB0aW1lIGhhcyBjb21lLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0byBsb29rIHRvIGl0IHRoYXQgd2UgZG8KICAgICAgICAgICAgICAgICAgICBub3QgcHJvdmUgbW9yZSB1bmZyaWVuZGx5IHRvIG91cnNlbHZlcyB0aGFuIGNpcmN1bXN0YW5jZXMgaGF2ZSBiZWVuLCBmb3Igd2UKICAgICAgICAgICAgICAgICAgICBzaGFsbCBzaG93IG91cnNlbHZlcyB0aGUgbWVhbmVzdCBvZiBtYW5raW5kLCBpZiB3ZSBhYmFuZG9uIG5vdCBvbmx5IHRoZSBjaXRpZXMKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHBsYWNlcyB3aGljaCB3ZSBvbmNlIGNhbGxlZCBvdXIgb3duLCBidXQgdGhlIHZlcnkgYWxsaWVzIHRoYXQgZm9ydHVuZQogICAgICAgICAgICAgICAgICAgIGhhcyByYWlzZWQgdXAgZm9yIHVzIGFuZCB0aGUgY2hhbmNlcyBzaGUgdGhyb3dzIGluIG91ciB3YXkuIDwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgSSBkbyBub3QgY2hvb3NlLAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgdG8gZW51bWVyYXRlIHRoZSByZXNvdXJjZXMgb2YgUGhpbGlwIGFuZCBieSBzdWNoIGFyZ3VtZW50cyB0byBjYWxsIG9uCiAgICAgICAgICAgICAgICAgICAgeW91IHRvIHJpc2UgdG8gdGhlIG9jY2FzaW9uLiBEbyB5b3UgYXNrIHdoeT8gQmVjYXVzZSBpdCBzZWVtcyB0byBtZSB0aGF0IGFueQogICAgICAgICAgICAgICAgICAgIGRpc3NlcnRhdGlvbiBvbiB0aGF0IHRvcGljIGlzIGEgdHJpYnV0ZSB0byBoaXMgZW50ZXJwcmlzZSwgYnV0IGEgcmVjb3JkIG9mIG91cgogICAgICAgICAgICAgICAgICAgIGZhaWx1cmUuIEZvciB0aGUgaGlnaGVyIGhlIGhhcyByYWlzZWQgaGltc2VsZiBhYm92ZSBoaXMgcHJvcGVyIGxldmVsLCB0aGUgbW9yZQogICAgICAgICAgICAgICAgICAgIGhlIHdpbnMgdGhlIGFkbWlyYXRpb24gb2YgdGhlIHdvcmxkOyBidXQgdGhlIG1vcmUgeW91IGhhdmUgZmFpbGVkIHRvIGltcHJvdmUKICAgICAgICAgICAgICAgICAgICB5b3VyIG9wcG9ydHVuaXRpZXMsIHRoZSBncmVhdGVyIGlzIHRoZSBkaXNjcmVkaXQgdGhhdCB5b3UgaGF2ZSBpbmN1cnJlZC4gQWxsCiAgICAgICAgICAgICAgICAgICAgdGhpcyB0aGVuIEkgd2lsbCB3YWl2ZS4gPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbiBpbXBhcnRpYWwKICAgICAgICAgICAgICAgICAgICBpbnZlc3RpZ2F0aW9uLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3b3VsZAogICAgICAgICAgICAgICAgICAgIHRyYWNlIHRoZSBzb3VyY2Ugb2YgUGhpbGlwJ3MgZ3JlYXRuZXNzIG5vdCB0byBoaW1zZWxmLCBidXQgdG8gdGhpcyB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm0uIE9mIHRyYW5zYWN0aW9ucywgdGhlbiwgZm9yIHdoaWNoIFBoaWxpcCBzaG91bGQgYmUgZ3JhdGVmdWwgdG8gdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG9zZSBwb2xpY3kgaGFzIHNlcnZlZCBoaXMgaW50ZXJlc3RzLCBhbmQgZm9yIHdoaWNoIHlvdSBtaWdodCB3ZWxsIGRlbWFuZAogICAgICAgICAgICAgICAgICAgIHNhdGlzZmFjdGlvbiwgSSBkbyBub3QgZmluZCB0aGlzIHRoZSBwcm9wZXIgdGltZSBmb3Igc3BlYWtpbmcuIFRoZXJlIGFyZSwKICAgICAgICAgICAgICAgICAgICBob3dldmVyIG90aGVyIHRvcGljcyBvcGVuIHRvIG1lOyB5b3Ugd2lsbCBiZSB0aGUgYmV0dGVyIGZvciBoYXZpbmcgaGVhcmQgdGhlbSwKICAgICAgICAgICAgICAgICAgICBhbmQgaWYgeW91IHdpbGwgY29uc2VudCB0byBzY3J1dGluaXplIHRoZW0gYWNjdXJhdGVseSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IHdpbGwgZmluZCBpbiB0aGVtIGdyYXZlIGNoYXJnZXMKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IFBoaWxpcC4gT24gdGhlc2UgdG9waWNzIEkgc2hhbGwgZW5kZWF2b3IgdG8gYWRkcmVzcyB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgdG8gY2FsbCBhIG1hbgogICAgICAgICAgICAgICAgICAgIHBlcmp1cmVkIGFuZCBmYWl0aGxlc3MsIHdpdGhvdXQgZHJhd2luZyBhdHRlbnRpb24gdG8gaGlzIGFjdHMsIG1pZ2h0IGp1c3RseSBiZQogICAgICAgICAgICAgICAgICAgIHRlcm1lZCBtZXJlIGFidXNlOyBidXQgdG8gZGVzY3JpYmUgaGlzIGNvbmR1Y3QgaW4gZGV0YWlsIGFuZCBjb252aWN0IGhpbSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBjb3VudCBmb3J0dW5hdGVseSByZXF1aXJlcyBvbmx5IGEgc2hvcnQgc3BlZWNoLiBNb3Jlb3ZlciwgSSBoYXZlIHR3bwogICAgICAgICAgICAgICAgICAgIHJlYXNvbnMgZm9yIHRoaW5raW5nIHRoZSBzdG9yeSB3b3J0aCB0aGUgdGVsbGluZzogUGhpbGlwIHNoYWxsIGFwcGVhciBhcwogICAgICAgICAgICAgICAgICAgIHdvcnRobGVzcyBhcyBoZSByZWFsbHkgaXMsIGFuZCB0aG9zZSB3aG8gc3RhbmQgYWdoYXN0IGF0IGhpcyBhcHBhcmVudAogICAgICAgICAgICAgICAgICAgIGludmluY2liaWxpdHkgc2hhbGwgc2VlIHRoYXQgaGUgaGFzIGV4aGF1c3RlZCBhbGwgdGhlIGFydHMgb2YgY2hpY2FuZXJ5IG9uIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGlzIGdyZWF0bmVzcyB3YXMgZm91bmRlZCBhdCB0aGUgZmlyc3QsIGFuZCB0aGF0IGhpcyBjYXJlZXIgaGFzIG5vdyByZWFjaGVkIGl0cwogICAgICAgICAgICAgICAgICAgIGV4dHJlbWUgbGltaXQuIDwvdHJhbnNsYXRpb24+"
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBteSBvd24gcGFydCwgQXRoZW5pYW5zLCBJCiAgICAgICAgICAgICAgICAgICAgdG9vIHNob3VsZCBiZSBpbmNsaW5lZCB0byByZWdhcmQgUGhpbGlwIHdpdGggbWluZ2xlZCBmZWFyIGFuZCBhZG1pcmF0aW9uLCBpZiBJCiAgICAgICAgICAgICAgICAgICAgc2F3IHRoYXQgaGlzIHN1Y2Nlc3MgaGFkIGNyb3duZWQgYSBjYXJlZXIgb2YgaW50ZWdyaXR5LiBCdXQgd2hlbiBJIGNvbnNpZGVyIGhpbQogICAgICAgICAgICAgICAgICAgIGF0dGVudGl2ZWx5LCBJIGZpbmQgdGhhdCBhdCB0aGUgb3V0c2V0LCB3aGVuIHRoZSBPbHludGhpYW5zIHdlcmUgYW54aW91cyB0bwogICAgICAgICAgICAgICAgICAgIGNvbnN1bHQgeW91LCBidXQgY2VydGFpbiBwZXJzb25zIHdlcmUgZm9yIGV4Y2x1ZGluZyB0aGVtIGZyb20gb3VyIEFzc2VtYmx5LCBoZQogICAgICAgICAgICAgICAgICAgIHdvbiBvdXIgc2ltcGxlIGhlYXJ0cyBieSBwcm9taXNpbmcgdG8gaGFuZCBvdmVyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiB0byB1cyBhbmQgYnkgbmVnb3RpYXRpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IHNlY3JldCB0cmVhdHk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHByb3Bvc2VkIHN1cnJlbmRlciBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQeWRuYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUHlkbmEiPlB5ZG5hPC9wbGFjZU5hbWU+IGluIGV4Y2hhbmdlIGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+Ljwvbm90ZT4gb25jZQogICAgICAgICAgICAgICAgICAgIHNvIG11Y2ggdGFsa2VkIGFib3V0LiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFB5ZG5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQeWRuYSI+UHlkbmE8L3BsYWNlTmFtZT4gaW4gZXhjaGFuZ2UgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4uPC90cmFuc2xhdGlvbj4="
translation['2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkkgZmluZCB0aGF0IG5leHQgaGUgd29uCiAgICAgICAgICAgICAgICAgICAgdGhlIGZyaWVuZHNoaXAgb2YgdGhlIE9seW50aGlhbnMgYnkgY2FwdHVyaW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+LCB3aGljaCB3YXMgeW91cnMsIGFuZCB0aHVzIHdyb25naW5nIHlvdSwgaGlzIGZvcm1lcgogICAgICAgICAgICAgICAgICAgICAgICBhbGxpZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPklmIHRoZSBHcmVlayBpcyBzb3VuZCwgdGhpcyBtdXN0CiAgICAgICAgICAgICAgICAgICAgICAgIGFsbHVkZSB0byBQaGlsaXAncyBvZmZlciBvZiBhbGxpYW5jZSB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB0ZW4geWVhcnMgYmVmb3JlLiBCdXQgcGVyaGFwcyB3ZSBzaG91bGQgb21pdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4b2RzrzhvrbPgjwvZm9yZWlnbj4gd2l0aCBCbGFzcy4gVGhlIGFsbGllcyB3aWxsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgYmUgdGhlIFBvdGlkYWVhbnMsIGFzIHRoZSBTY2hvbGlhc3QgZXhwbGFpbnMuPC9ub3RlPiBpbiBwcmVzZW50aW5nIGl0IHRvCiAgICAgICAgICAgICAgICAgICAgdGhlbS4gTGFzdGx5IGhlIGhhcyB3b24gb3ZlciB0aGUgVGhlc3NhbGlhbnMgYnkgcHJvbWlzaW5nIHRvIGJlc3RvdyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdGVuIHllYXJzIGJlZm9yZS4gQnV0IHBlcmhhcHMgd2Ugc2hvdWxkIG9taXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG9kc684b62z4I8L2ZvcmVpZ24+IHdpdGggQmxhc3MuIFRoZSBhbGxpZXMgd2lsbCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIHRoZSBQb3RpZGFlYW5zLCBhcyB0aGUgU2Nob2xpYXN0IGV4cGxhaW5zLjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzUxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTEiPk1hZ25lc2lhPC9wbGFjZU5hbWU+IHVwb24gdGhlbSBhbmQgYnkgdW5kZXJ0YWtpbmcgdG8KICAgICAgICAgICAgICAgICAgICBjb25kdWN0IHRoZSBQaG9jaWFuIHdhcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgU2FjcmVkIFdhciBvZgogICAgICAgICAgICAgICAgICAgICAgICAzNTUtMzQ2Ljwvbm90ZT4gaW4gdGhlaXIgaW50ZXJlc3RzLiBJbiBhIHdvcmQsIGhlIGhhcyBob29kd2lua2VkIGV2ZXJ5b25lCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoYXMgaGFkIGFueSBkZWFsaW5ncyB3aXRoIGhpbTsgaGUgaGFzIHBsYXllZCB1cG9uIHRoZSBmb2xseSBvZiBlYWNoIHBhcnR5CiAgICAgICAgICAgICAgICAgICAgaW4gdHVybiBhbmQgZXhwbG9pdGVkIHRoZWlyIGlnbm9yYW5jZSBvZiBoaXMgb3duIGNoYXJhY3Rlci4gVGhhdCBpcyBob3cgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgZ2FpbmVkIGhpcyBwb3dlci4gPC90cmFuc2xhdGlvbj4="
translation['2.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBldmVuIGFzIGhlIGhhcyByYWlzZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGJ5IHRoZXNlIGFydHMsIHdoaWxlIGV2ZXJ5IGNvbW11bml0eSBpbWFnaW5lZCB0aGF0IHRoZXkgd2VyZSB0byBiZSB0aGUKICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzIG9mIGhpcyBmYXZvcnMsIHNvIGJ5IHRoZXNlIHNhbWUgYXJ0cyBoZSBpcyBib3VuZCB0byBiZSBicm91Z2h0IGxvdwogICAgICAgICAgICAgICAgICAgIGFnYWluIG5vdyB0aGF0IHRoZSB1dHRlciBzZWxmaXNobmVzcyBvZiBoaXMgY29uZHVjdCBoYXMgYmVlbiBhbXBseSBkZW1vbnN0cmF0ZWQuCiAgICAgICAgICAgICAgICAgICAgWWVzLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGlzIGlzIHRoZQogICAgICAgICAgICAgICAgICAgIHR1cm5pbmcgcG9pbnQgb2YgUGhpbGlwJ3MgY2FyZWVyLiBJZiBub3QsIGxldCBzb21lb25lIHN0ZXAgdXAgYW5kIHByb3ZlIHRvCiAgICAgICAgICAgICAgICAgICAgbWXigJRvciByYXRoZXIgdG8geW914oCUdGhhdCBteSB3b3JkcyBhcmUgdW50cnVlLCBvciB0aGF0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIGhhdmUgYmVlbiBvbmNlIGRlY2VpdmVkIHdpbGwgY29udGludWUgdG8gdHJ1c3QgaGltLCBvciB0aGF0IHRoZSBUaGVzc2FsaWFucwogICAgICAgICAgICAgICAgICAgIHdobyBzdG9vcGVkIHRvIGJlY29tZSBoaXMgc2xhdmVzIHdvdWxkIG5vdCBub3cgd2VsY29tZSB0aGVpciBlbWFuY2lwYXRpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BZ2FpbiwgaWYKICAgICAgICAgICAgICAgICAgICBhbnlvbmUgaGVyZSBhZG1pdHMgdGhlIHRydXRoIG9mIHRoaXMsIGJ1dCBmYW5jaWVzIHRoYXQgUGhpbGlwIHdpbGwgcmVtYWluIG1hc3RlcgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzaXR1YXRpb24sIGJlaW5nIGFscmVhZHkgaW4gcG9zc2Vzc2lvbiBvZiB0aGUgZm9ydHJlc3NlcyBhbmQgaGFyYm9ycyBhbmQKICAgICAgICAgICAgICAgICAgICBvdGhlciBwb2ludHMgb2YgdmFudGFnZSwgaGUgaXMgbWlzdGFrZW4uIEZvciB3aGVuIGEgbGVhZ3VlIGlzIGtuaXQgdG9nZXRoZXIgYnkKICAgICAgICAgICAgICAgICAgICBnb29kd2lsbCwgd2hlbiBhbGwgdGhlIGFsbGllZCBzdGF0ZXMgaGF2ZSB0aGUgc2FtZSBpbnRlcmVzdHMsIHRoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgaW5kaXZpZHVhbCBtZW1iZXJzIGFyZSB3aWxsaW5nIHRvIHJlbWFpbiBzdGVhZGZhc3QsIHNoYXJpbmcgdGhlIHRvaWwgYW5kCiAgICAgICAgICAgICAgICAgICAgZW5kdXJpbmcgdGhlIGhhcmRzaGlwczsgYnV0IHdoZW4gYSBtYW4gaGFzIGdhaW5lZCBwb3dlciwgYXMgUGhpbGlwIGhhcywgYnkKICAgICAgICAgICAgICAgICAgICByYXBhY2l0eSBhbmQgY3JpbWUsIHRoZW4gdGhlIGZpcnN0IHByZXRleHQsIHNvbWUgdHJpZmxpbmcgc2xpcCwgb3ZlcnRocm93cyBhbmQKICAgICAgICAgICAgICAgICAgICBzaGF0dGVycyBhbGwuIDwvdHJhbnNsYXRpb24+"
translation['2.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBpbXBvc3NpYmxlLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpbXBvc3NpYmxlIHRvIGdhaW4KICAgICAgICAgICAgICAgICAgICBwZXJtYW5lbnQgcG93ZXIgYnkgaW5qdXN0aWNlLCBwZXJqdXJ5LCBhbmQgZmFsc2Vob29kLiBPbmNlIGluIGEgd2F5IGFuZCBmb3IgYQogICAgICAgICAgICAgICAgICAgIGJyaWVmIHNlYXNvbiBzdWNoIHRoaW5ncyBlbmR1cmUsIGFuZCBmZWQgd2l0aCBob3BlcyBtYWtlLCBpdCBtYXkgYmUsIGEgYnJhdmUKICAgICAgICAgICAgICAgICAgICBzaG93IG9mIGJsb3Nzb20sIGJ1dCBhdCB0aGUgbGFzdCB0aGV5IGFyZSBkZXRlY3RlZCBhbmQgZmFsbCB0byBwaWVjZXMuIEZvciBhCiAgICAgICAgICAgICAgICAgICAgaG91c2UsIEkgdGFrZSBpdCwgb3IgYSBzaGlwIG9yIGFueXRoaW5nIG9mIHRoYXQgc29ydCBtdXN0IGhhdmUgaXRzIGNoaWVmCiAgICAgICAgICAgICAgICAgICAgc3RyZW5ndGggaW4gaXRzIHN1YnN0cnVjdHVyZTsgYW5kIHNvIHRvbyBpbiBhZmZhaXJzIG9mIHN0YXRlIHRoZSBwcmluY2lwbGVzIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBmb3VuZGF0aW9ucyBtdXN0IGJlIHRydXRoIGFuZCBqdXN0aWNlLiBUaGVyZSBpcyBubyB2ZXN0aWdlIG9mIHRoZXNlIHRvZGF5IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHBvd2VyIHRoYXQgUGhpbGlwIGhhcyBidWlsdCB1cC4gPC90cmFuc2xhdGlvbj4="
translation['2.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB1cmdlIHlvdSBzdHJvbmdseSB0byBzZW5kIGhlbHAgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+LCBhbmQgdGhlIGJlc3QgYW5kIHF1aWNrZXN0CiAgICAgICAgICAgICAgICAgICAgbWV0aG9kIHRoYXQgYW55b25lIGNhbiBzdWdnZXN0IHdpbGwgcGxlYXNlIG1lIG1vc3QuIFRvIHRoZSBUaGVzc2FsaWFucyB5b3UgbXVzdAogICAgICAgICAgICAgICAgICAgIHNlbmQgYW4gZW1iYXNzeSB0byBpbmZvcm0gc29tZSBvZiB0aGVtIG9mIG91ciBpbnRlbnRpb25zIGFuZCB0byBzdGlyIHVwIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyczsgZm9yIHRoZXkgaGF2ZSBhbHJlYWR5IGRlY2lkZWQgdG8gZGVtYW5kIHRoZSByZXN0b3JhdGlvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA4NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDg0Ij5QYWdhc2FlPC9wbGFjZU5hbWU+IGFuZCB0byBwcm90ZXN0IGFnYWluc3QgdGhlIG9jY3VwYXRpb24KICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzUxIj5NYWduZXNpYTwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['2.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeW91IG11c3QgbWFrZSBzdXJlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IG91ciBlbnZveXMgZG8gbm90IGNvbmZpbmUgdGhlbXNlbHZlcyB0byB3b3JkczsKICAgICAgICAgICAgICAgICAgICB0aGV5IG11c3QgYmUgYWJsZSB0byBnaXZlIHNvbWUgcHJhY3RpY2FsIHByb29mIHRoYXQgd2UgaGF2ZSB0YWtlbiB0aGUgZmllbGQgaW4gYQogICAgICAgICAgICAgICAgICAgIHdheSB3b3J0aHkgb2Ygb3VyIGNpdHkgYW5kIHRoYXQgd2UgYXJlIHJlYWxseSBncmFwcGxpbmcgd2l0aCB0aGUgc2l0dWF0aW9uLiBBbGwKICAgICAgICAgICAgICAgICAgICB3b3JkcywgYXBhcnQgZnJvbSBhY3Rpb24sIHNlZW0gdmFpbiBhbmQgaWRsZSwgZXNwZWNpYWxseSB3b3JkcyBmcm9tIEF0aGVuaWFuCiAgICAgICAgICAgICAgICAgICAgbGlwczsgZm9yIHRoZSBncmVhdGVyIG91ciByZXB1dGF0aW9uIGZvciBhIHJlYWR5IHRvbmd1ZSwgdGhlIGdyZWF0ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgZGlzdHJ1c3QgaXQgaW5zcGlyZXMgaW4gYWxsIG1lbi4gPC90cmFuc2xhdGlvbj4="
translation['2.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgbXVzdAogICAgICAgICAgICAgICAgICAgIGluZGVlZCBwcm92ZSB0aGUgdGhvcm91Z2huZXNzIG9mIHlvdXIgcmVmb3JtYXRpb24gYW5kIHRoZSBpbXBvcnRhbmNlIG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICBjaGFuZ2Ugb2YgcG9saWN5IGJ5IHJhaXNpbmcgbW9uZXksIGJ5IHNlcnZpbmcgaW4gdGhlIGZpZWxkLCBhbmQgYnkgZG9pbmcKICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5nIHdpdGggYSB3aWxsLCBpZiB5b3Ugd2FudCBhbnlvbmUgdG8gdGFrZSB5b3Ugc2VyaW91c2x5LiBJZiB5b3UgY29uc2VudAogICAgICAgICAgICAgICAgICAgIHRvIGNhcnJ5IHRocm91Z2ggdGhlIG5lY2Vzc2FyeSByZWZvcm1zIGF0IG9uY2UsIG5vdCBvbmx5IHdpbGwgUGhpbGlwJ3MKICAgICAgICAgICAgICAgICAgICBhbGxpYW5jZXMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHByb3ZlCiAgICAgICAgICAgICAgICAgICAgdW5zdGFibGUgYW5kIHVudHJ1c3R3b3J0aHksIGJ1dCB0aGUgd2Vha25lc3Mgb2YgaGlzIG5hdGl2ZSBwb3dlciBhbmQgc292ZXJlaWdudHkKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIGNvbXBsZXRlbHkgZXhwb3NlZC4gPC90cmFuc2xhdGlvbj4="
translation['2.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WWVzLCB0aGUgcG93ZXIgYW5kIHNvdmVyZWlnbnR5IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiBpcyBpbmRlZWQsIGFzIGFuIGFkanVuY3QsIG5vIHNsaWdodAogICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbiwgYXMgeW91IGZvdW5kIGl0IHdoZW4gb24geW91ciBzaWRlIGFnYWluc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+IGluIHRoZSBkYXlzIG9mIFRpbW90aGV1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gMzY0IGFuIEF0aGVuaWFuIGZvcmNlIHVuZGVyIFRpbW90aGV1cyBqb2luZWQKICAgICAgICAgICAgICAgICAgICAgICAgUGVyZGljY2FzLCBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgaW4gYW4KICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNrIG9uIHRoZSBPbHludGhpYW4gY29uZmVkZXJhY3kuPC9ub3RlPiBPbiBhbm90aGVyIG9jY2FzaW9uLCBpbiBkZWFsaW5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIGluIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjayBvbiB0aGUgT2x5bnRoaWFuIGNvbmZlZGVyYWN5LjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+LCB0aGUgT2x5bnRoaWFucyBmb3VuZCBpdHMKICAgICAgICAgICAgICAgICAgICBjb29wZXJhdGlvbiBvZiBzb21lIHZhbHVlOyBhbmQgbGF0ZWx5IGl0IGNhbWUgdG8gdGhlIGhlbHAgb2YgdGhlIFRoZXNzYWxpYW5zIGluCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZmFjdGlvbnMgYW5kIGZldWRzIGFnYWluc3QgdGhlIHJ1bGluZyBob3VzZS4gVGhlIGFjY2Vzc2lvbiwgSSBzdXBwb3NlLAogICAgICAgICAgICAgICAgICAgIGV2ZW4gb2YgYSBzbWFsbCBmb3JjZSBpcyBpbiBldmVyeSB3YXkgaGVscGZ1bDsgYnV0IGJ5IGl0c2VsZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gaXMgd2VhayBhbmQgZnVsbCBvZiBkZWZlY3RzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW5kZWVkIFBoaWxpcCBieSBhbGwgdGhhdCBtaWdodCBiZQogICAgICAgICAgICAgICAgICAgIGRlZW1lZCB0byBjb25zdGl0dXRlIGhpcyBncmVhdG5lc3MsIGJ5IGhpcyB3YXJzIGFuZCBoaXMgY2FtcGFpZ25zLCBoYXMgb25seQogICAgICAgICAgICAgICAgICAgIHJlZHVjZWQgaGlzIGNvdW50cnkgYmVsb3cgaXRzIG5hdHVyYWwgbGV2ZWwgb2YgaW5zZWN1cml0eS4gWW91IG11c3Qgbm90IGltYWdpbmUsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCBoaXMgc3ViamVjdHMKICAgICAgICAgICAgICAgICAgICBzaGFyZSBoaXMgdGFzdGVzLiBObzogZ2xvcnkgaXMgaGlzIHNvbGUgb2JqZWN0IGFuZCBhbWJpdGlvbjsgaW4gYWN0aW9uIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIGRhbmdlciBoZSBoYXMgZWxlY3RlZCB0byBzdWZmZXIgd2hhdGV2ZXIgbWF5IGJlZmFsbCBoaW0gcHV0dGluZyBiZWZvcmUgYSBsaWZlIG9mCiAgICAgICAgICAgICAgICAgICAgc2FmZXR5IHRoZSBkaXN0aW5jdGlvbiBvZiBhY2hpZXZpbmcgd2hhdCBubyBvdGhlciBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiBldmVyIGFjaGlldmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGlzIHN1YmplY3RzIGhhdmUgbm8gc2hhcmUgaW4gdGhlIGdsb3J5IHRoYXQKICAgICAgICAgICAgICAgICAgICByZXN1bHRzLiBUaGV5IGFyZSBwZXJwZXR1YWxseSBidWZmZXRlZCBhbmQgd2VhcmllZCBhbmQgZGlzdHJlc3NlZCBieSB0aGVzZQogICAgICAgICAgICAgICAgICAgIGV4cGVkaXRpb25zIG5vcnRoIGFuZCBzb3V0aCwgbmV2ZXIgc3VmZmVyZWQgdG8gZ2l2ZSB0aGVpciB0aW1lIHRvIHRoZWlyIGJ1c2luZXNzCiAgICAgICAgICAgICAgICAgICAgb3IgdGhlaXIgcHJpdmF0ZSBhZmZhaXJzLCBuZXZlciBhYmxlIHRvIGRpc3Bvc2Ugb2Ygc3VjaCBwcm9kdWNlIGFzIHRoZXkgY2FuCiAgICAgICAgICAgICAgICAgICAgcmFpc2UsIGJlY2F1c2UgdGhlIHdhciBoYXMgY2xvc2VkIGFsbCB0aGUgbWFya2V0cyBpbiB0aGVpciBsYW5kLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5IZW5jZSBpdCBpcyBub3QgZGlmZmljdWx0IHRvIHNlZSBob3cgdGhlIG1ham9yaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIE1hY2Vkb25pYW5zIHJlZ2FyZCBQaGlsaXAuIEFzIGZvciBoaXMgaG91c2Vob2xkIHRyb29wcyBhbmQgZm9vdGd1YXJkcywgdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgaW5kZWVkIHRoZSBuYW1lIG9mIGFkbWlyYWJsZSBzb2xkaWVycywgd2VsbCBncm91bmRlZCBpbiB0aGUgc2NpZW5jZSBvZiB3YXI7CiAgICAgICAgICAgICAgICAgICAgYnV0IG9uZSB3aG8gaGFzIGxpdmVkIG9uIHRoZSBzcG90LCBhIG1hbiBpbmNhcGFibGUgb2YgZmFsc2Vob29kLCBoYXMgaW5mb3JtZWQgbWUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgYXJlIG5vIGJldHRlciB0aGFuIG90aGVyIHNvbGRpZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5JZiB0aGVyZSBpcyBhbnlvbmUgYW1vbmcgdGhlbSB3aG8gY2FuIGJlIGRlc2NyaWJlZCBhcyBleHBlcmllbmNlZCBpbiB3YXIgYW5kCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlLCBJIHdhcyB0b2xkIHRoYXQgUGhpbGlwIGZyb20gamVhbG91c3kga2VlcHMgYWxsIHN1Y2ggaW4gdGhlIGJhY2tncm91bmQsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBoZSB3YW50cyB0byBoYXZlIHRoZSBjcmVkaXQgaGltc2VsZiBvZiBldmVyeSBhY3Rpb24sIGFtb25nIGhpcyBtYW55CiAgICAgICAgICAgICAgICAgICAgZmF1bHRzIGJlaW5nIGFuIGluc2F0aWFibGUgYW1iaXRpb24uIEFueSBmYWlybHkgZGVjZW50IG9yIGhvbmVzdCBtYW4sIHdobyBjYW5ub3QKICAgICAgICAgICAgICAgICAgICBzdG9tYWNoIHRoZSBsaWNlbnRpb3VzbmVzcyBvZiBoaXMgZGFpbHkgbGlmZSwgdGhlIGRydW5rZW5uZXNzIGFuZCB0aGUgbGV3ZAogICAgICAgICAgICAgICAgICAgIGRhbmNpbmcsIGlzIHB1c2hlZCBhc2lkZSBhcyBvZiBubyBhY2NvdW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['2.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5BbGwKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCBhYm91dCBoaXMgY291cnQsIGhlIHNhaWQsIGFyZSByb2JiZXJzIGFuZCB0b2FkaWVzLCBtZW4gY2FwYWJsZSBvZgogICAgICAgICAgICAgICAgICAgIGdldHRpbmcgZHJ1bmsgYW5kIHBlcmZvcm1pbmcgc3VjaCBkYW5jZXMgYXMgSSBoZXNpdGF0ZSB0byBuYW1lIHRvIHlvdSBoZXJlLiBUaGlzCiAgICAgICAgICAgICAgICAgICAgcmVwb3J0IGlzIG9idmlvdXNseSB0cnVlLCBmb3IgdGhlIG1lbiB3aG8gd2VyZSB1bmFuaW1vdXNseSBleHBlbGxlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYXMgYmVpbmcgb2YgZmFyIGxvb3NlcgogICAgICAgICAgICAgICAgICAgIG1vcmFscyB0aGFuIHRoZSBhdmVyYWdlIG1vdW50ZWJhbmvigJRJIG1lYW4gQ2FsbGlhcyB0aGUgaGFuZ21hbiBhbmQKICAgICAgICAgICAgICAgICAgICBmZWxsb3dzIG9mIHRoYXQgc3RhbXAsIGxvdyBjb21lZGlhbnMsIG1lbiB3aG8gY29tcG9zZSByaWJhbGQgc29uZ3MgdG8gcmFpc2UgYQogICAgICAgICAgICAgICAgICAgIGxhdWdoIGFnYWluc3QgdGhlaXIgYm9vbiBjb21wYW5pb25z4oCUdGhlc2UgYXJlIHRoZSBtZW4gaGUgd2VsY29tZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgbG92ZXMgdG8gaGF2ZSBhYm91dCBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['2.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBhcmUgcGVyaGFwcwogICAgICAgICAgICAgICAgICAgIHRyaXZpYWwgdGhpbmdzLCBhbmQgeWV0LCBBdGhlbmlhbnMsIHRvIHdpc2UgbWVuIHRoZXkgYWZmb3JkIGFuIGltcG9ydGFudCBwcm9vZgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBpbmZhdHVhdGlvbiBvZiBoaXMgY2hhcmFjdGVyLiBGb3IgdGhlIHByZXNlbnQsIGhvd2V2ZXIsIGhpcyBwcm9zcGVyaXR5CiAgICAgICAgICAgICAgICAgICAgdGhyb3dzIGFsbCB0aGlzIGludG8gdGhlIHNoYWRlIO+8iGZvciBzdWNjZXNzIGlzIGFwdCB0byBjb3ZlciBhIG11bHRpdHVkZQogICAgICAgICAgICAgICAgICAgIG9mIGZhdWx0c++8iTsgYnV0IGlmIGhlIHRyaXBzLCB0aGVuIHdlIHNoYWxsIGtub3cgYWxsIGFib3V0IGhpcyB2aWNlcy4KICAgICAgICAgICAgICAgICAgICBBbmQgaXQgc2VlbXMgdG8gbWUsIEF0aGVuaWFucywgdGhhdCB3ZSBzaGFsbCBub3QgaGF2ZSB0byB3YWl0IGxvbmcgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGV4cG9zdXJlLCBpZiBoZWF2ZW4gd2lsbHMgYW5kIHlvdSBzbyByZXNvbHZlLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IganVzdCBhcyBpbiBvdXIgYm9kaWVzLCBzbyBsb25nIGFzIGEgbWFuIGlzIGluIHNvdW5kIGhlYWx0aCwgaGUgaXMKICAgICAgICAgICAgICAgICAgICBjb25zY2lvdXMgb2Ygbm8gcGFpbiwgYnV0IGlmIHNvbWUgbWFsYWR5IGFzc2FpbHMgaGltLCBldmVyeSBwYXJ0IGlzIHNldAogICAgICAgICAgICAgICAgICAgIGEtd29ya2luZywgYmUgaXQgcnVwdHVyZSBvciBzcHJhaW4gb3IgYW55IG90aGVyIGxvY2FsIGFmZmVjdGlvbjsgZXZlbiBzbyBpcyBpdAogICAgICAgICAgICAgICAgICAgIHdpdGggc3RhdGVzIGFuZCBtb25hcmNoaWVzOyBhcyBsb25nIGFzIHRoZWlyIHdhcnMgYXJlIG9uIGZvcmVpZ24gc29pbCwgZmV3CiAgICAgICAgICAgICAgICAgICAgZGV0ZWN0IHRoZWlyIHdlYWtuZXNzZXMsIGJ1dCB3aGVuIHRoZSBzaG9jayBvZiBiYXR0bGUgaXMgb24gdGhlaXIgZnJvbnRpZXJzLCBpdAogICAgICAgICAgICAgICAgICAgIG1ha2VzIGFsbCB0aGVpciBmYXVsdHMgcGVyZmVjdGx5IGNsZWFyLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGlmIGFueSBvZiB5b3UsIEF0aGVuaWFucywgc2VlaW5nCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwJ3MgZ29vZCBmb3J0dW5lLCB0aGlua3MgdGhhdCBoZSBpcyBpbiB0aGF0IHJlc3BlY3QgYSBmb3JtaWRhYmxlCiAgICAgICAgICAgICAgICAgICAgYW50YWdvbmlzdCwgaGUgcmVhc29ucyBsaWtlIGEgcHJ1ZGVudCBtYW4uIEZvciBmb3J0dW5lIGlzIGluZGVlZCBhIGdyZWF0IHdlaWdodAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBzY2FsZXM7IEkgbWlnaHQgYWxtb3N0IHNheSBpdCBpcyBldmVyeXRoaW5nIGluIGh1bWFuIGFmZmFpcnMuIEFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lLCBpZiB5b3UgZ2F2ZSBtZSB0aGUgY2hvaWNlLCBJIHNob3VsZCBwcmVmZXIgdGhlIGZvcnR1bmUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHRvIFBoaWxpcCdzLCBwcm92aWRlZCB0aGF0IHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICB3aWxsaW5nIHRvIGRvIHlvdXIgZHV0eSB5b3Vyc2VsdmVzLCBldmVuIHRvIGEgbGltaXRlZCBleHRlbnQ7IGZvciBJIGFtIHN1cmUgeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBmYXIgZ3JlYXRlciBjbGFpbXMgdGhhbiBoZSB1cG9uIHRoZSBmYXZvciBvZiB0aGUgZ29kcy4gWWV0LCBJIHRoaW5rLCB3ZSBzaXQKICAgICAgICAgICAgICAgICAgICBoZXJlIGRvaW5nIG5vdGhpbmcuIDwvdHJhbnNsYXRpb24+"
translation['2.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb25lIHdobyBpcyBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgaWRsZSBjYW5ub3QgcG9zc2libHkgY2FsbCB1cG9uIGhpcyBmcmllbmRzLCBtdWNoIGxlc3MgdXBvbiB0aGUgZ29kcywgdG8gd29yayBmb3IKICAgICAgICAgICAgICAgICAgICBoaW0uIE5vIHdvbmRlciB0aGF0IFBoaWxpcCwgc2hhcmluZyBoaW1zZWxmIGluIHRoZSB0b2lscyBvZiB0aGUgY2FtcGFpZ24sCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBhdCBldmVyeSBhY3Rpb24sIG5lZ2xlY3Rpbmcgbm8gY2hhbmNlIGFuZCB3YXN0aW5nIG5vIHNlYXNvbiwgZ2V0cyB0aGUKICAgICAgICAgICAgICAgICAgICBiZXR0ZXIgb2YgdXMsIHdoaWxlIHdlIHByb2NyYXN0aW5hdGUgYW5kIHBhc3MgcmVzb2x1dGlvbnMgYW5kIGFzayBxdWVzdGlvbnMuIEkKICAgICAgICAgICAgICAgICAgICBjYW5ub3Qgd29uZGVyIGF0IHRoaXM6IHRoZSBjb250cmFyeSB3b3VsZCByYXRoZXIgc3VycHJpc2UgbWUsIHRoYXQgd2UsCiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybWluZyBubyBzaW5nbGUgZHV0eSBvZiBhIGNvbWJhdGFudCwgc2hvdWxkIG92ZXJjb21lIHRoZSBtYW4gd2hvIGZ1bGZpbHMKICAgICAgICAgICAgICAgICAgICB0aGVtIGFsbC4gPC90cmFuc2xhdGlvbj4="
translation['2.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5OYXksIEkgYW0gc3VycHJpc2VkIHRoYXQgeW91LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aG8gb25jZSB3aXRoc3Rvb2QgdGhlCiAgICAgICAgICAgICAgICAgICAgTGFjZWRhZW1vbmlhbnMgaW4gZGVmZW5jZSBvZiB0aGUgcmlnaHRzIG9mIEhlbGxhcywgd2hvIHNwdXJuZWQgdGhlIG9wcG9ydHVuaXR5LAogICAgICAgICAgICAgICAgICAgIHJlcGVhdGVkbHkgb2ZmZXJlZCwgb2Ygc2VsZi1hZ2dyYW5kaXplbWVudCwgd2hvIGxhdmlzaGVkIHlvdXIgdHJlYXN1cmUgYW5kCiAgICAgICAgICAgICAgICAgICAgamVvcGFyZGVkIHlvdXIgbGl2ZXMgaW4gdGhlIGZpZWxkIHRoYXQgb3RoZXJzIG1pZ2h0IGVuam95IHRoZWlyIHJpZ2h0cywgbm93CiAgICAgICAgICAgICAgICAgICAgc2hyaW5rIGZyb20gc2VydmljZSBhbmQgZ3J1ZGdlIHRvIHBheSB5b3VyIGNvbnRyaWJ1dGlvbnMgZm9yIHRoZSBzYWtlIG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICBvd24gcG9zc2Vzc2lvbnMuIEkgYW0gc3VycHJpc2VkIHRoYXQgeW91LCB3aG8gaGF2ZSBzbyBvZnRlbiBzYXZlZCB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBzdGF0ZXMsIGJvdGggYWxsIG9mIHRoZW0gdG9nZXRoZXIgYW5kIGVhY2ggc2VwYXJhdGVseSBpbiB0dXJuLCBzaG91bGQgc2l0IGRvd24KICAgICAgICAgICAgICAgICAgICB1bmRlciB0aGUgbG9zcyBvZiB3aGF0IGlzIHlvdXIgb3duLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhpcyBJCiAgICAgICAgICAgICAgICAgICAgd29uZGVyIGF0LCBhbmQgYXQgYW5vdGhlciB0aGluZyBiZXNpZGVzLiBJIHdvbmRlciB0aGF0IG5vIG9uZSBoZXJlLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBjYW4gY291bnQgdXAgaG93IG1hbnkKICAgICAgICAgICAgICAgICAgICB5ZWFycyB5b3UgaGF2ZSBiZWVuIGF0IHdhciB3aXRoIFBoaWxpcCwgYW5kIHdoYXQgeW91IGhhdmUgYmVlbiBkb2luZyBhbGwgdGhhdAogICAgICAgICAgICAgICAgICAgIGxvbmcgdGltZS4gU3VyZWx5IHlvdSBtdXN0IGtub3cgdGhhdCBhbGwgdGhhdCB0aW1lIHlvdSBoYXZlIGJlZW4gaGVzaXRhdGluZywKICAgICAgICAgICAgICAgICAgICBob3BpbmcgdGhhdCBzb21lIG90aGVyIHN0YXRlIHdvdWxkIHRha2UgYWN0aW9uLCBhY2N1c2luZyBhbmQgc2l0dGluZyBpbgogICAgICAgICAgICAgICAgICAgIGp1ZGdlbWVudCBvbiBvbmUgYW5vdGhlciwgYW5kIHN0aWxsIGhvcGluZywgaG9waW5n4oCUZG9pbmcgaW4gZmFjdAogICAgICAgICAgICAgICAgICAgIHByZXR0eSBtdWNoIHdoYXQgeW91IGFyZSBkb2luZyBub3cuIDwvdHJhbnNsYXRpb24+"
translation['2.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXJlCiAgICAgICAgICAgICAgICAgICAgeW91IHNvIHVuaW50ZWxsaWdlbnQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYXMgdG8gaG9wZSB0aGF0IHRoZSBzYW1lIHBvbGljeSB0aGF0IGhhcyBicm91Z2h0IG91ciBzdGF0ZSBmcm9tIHN1Y2Nlc3MgdG8KICAgICAgICAgICAgICAgICAgICBmYWlsdXJlIHdpbGwgcmFpc2UgdXMgZnJvbSBmYWlsdXJlIHRvIHN1Y2Nlc3M/IFN1cmVseSB0aGF0IGlzIG5laXRoZXIgcmVhc29uYWJsZQogICAgICAgICAgICAgICAgICAgIG5vciBuYXR1cmFsOyBmb3IgaW4gYWxsIHRoaW5ncyBpdCBpcyBtdWNoIGVhc2llciB0byBrZWVwIHRoYW4gdG8gZ2Fpbi4gQnV0LCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBwcmVzZW50IGluc3RhbmNlLCBvZiB3aGF0IHdhcyBvbmNlIG91cnMgdGhlIHdhciBoYXMgbGVmdCB1cyBub3RoaW5nIHRvIGtlZXAKICAgICAgICAgICAgICAgICAgICBhbmQgZXZlcnl0aGluZyB0byBnYWluLiBUaGlzLCB0aGVuLCBpcyBvdXIgb3duIHRhc2sgdG9kYXkuIDwvdHJhbnNsYXRpb24+"
translation['2.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5JIHNheSBpdCBpcyB5b3VyIGR1dHkgdG8gc2VydmUgY2hlZXJmdWxseSBpbiBwZXJzb24KICAgICAgICAgICAgICAgICAgICBhbmQgdG8gcmVzZXJ2ZSB5b3VyIGNlbnN1cmVzIHRpbGwgeW91IGFyZSBtYXN0ZXJzIG9mIHRoZSBzaXR1YXRpb24uIFRoZW4sCiAgICAgICAgICAgICAgICAgICAganVkZ2luZyBhbGwgb24gdGhlaXIgbWVyaXRzLCBhc3NpZ24gcHJhaXNlIHRvIHRoZSBkZXNlcnZpbmcgYW5kIHB1bmlzaG1lbnQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgd3Jvbmdkb2VycywgYW5kIHJlbmRlciBleGN1c2UgaW1wb3NzaWJsZSBieSBtZW5kaW5nIHlvdXIgb3duIGRlZmljaWVuY2llczsKICAgICAgICAgICAgICAgICAgICBmb3IgeW91IGhhdmUgbm8gcmlnaHQgdG8gYmUgc2V2ZXJlIGNyaXRpY3Mgb2Ygb3RoZXJzJyBjb25kdWN0LCB1bmxlc3MgeW91IGZpcnN0CiAgICAgICAgICAgICAgICAgICAgc2V0IHlvdXIgb3duIGhvdXNlIGluIG9yZGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5XaHkgaXMgaXQsIHRoaW5rCiAgICAgICAgICAgICAgICAgICAgeW91LCBtZW4gb2YgQXRoZW5zLCB0aGF0IGFsbCB0aGUgZ2VuZXJhbHMgeW91IGRpc3BhdGNo4oCUaWYgSSBhbSB0byB0ZWxsCiAgICAgICAgICAgICAgICAgICAgeW91IHNvbWV0aGluZyBvZiB0aGUgdHJ1dGggYWJvdXQgdGhlbeKAlGxlYXZlIHRoaXMgd2FyIHRvIGl0c2VsZiBhbmQKICAgICAgICAgICAgICAgICAgICBwdXJzdWUgbGl0dGxlIHdhcnMgb2YgdGhlaXIgb3duPyBJdCBpcyBiZWNhdXNlIGluIHRoaXMgd2FyIHRoZSBwcml6ZXMgZm9yIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91IGNvbnRlbmQgYXJlIHlvdXIgb3du4oCU77yIaWYsIGZvciBpbnN0YW5jZSwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+IGlzIGNhcHR1cmVkLCB0aGUgaW1tZWRpYXRlCiAgICAgICAgICAgICAgICAgICAgZ2FpbiB3aWxsIGJlIHlvdXJz77yJ4oCUd2hpbGUgdGhlIG9mZmljZXJzIGhhdmUgYWxsIHRoZSBkYW5nZXJzCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlbXNlbHZlcyBhbmQgbm8gcmVtdW5lcmF0aW9uOyBidXQgaW4gdGhlIG90aGVyIGNhc2UgdGhlIHJpc2tzIGFyZSBzbWFsbGVyCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBwcml6ZXMgZmFsbCB0byB0aGUgb2ZmaWNlcnMgYW5kIHRoZSBzb2xkaWVyc+KAlDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNTc5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI1NzkiPkxhbXBzYWN1czwvcGxhY2VOYW1lPiwgZm9yIGV4YW1wbGUsIGFuZCBTaWdldW0sIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBwbHVuZGVyIG9mIHRoZSBtZXJjaGFudC1zaGlwcy4gU28gdGhleSB0dXJuIGFzaWRlIGVhY2ggdG8gd2hhdCBwYXlzIGhpbSBiZXN0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeW91LCB3aGVuZXZlciB5b3UgdHVybiB5b3VyIGF0dGVudGlvbgogICAgICAgICAgICAgICAgICAgIHRvIHlvdXIgcmV2ZXJzZXMsIHNpdCBpbiBqdWRnZW1lbnQgb24geW91ciBvZmZpY2VycywgYnV0IGFjcXVpdCB0aGVtIHdoZW5ldmVyIGluCiAgICAgICAgICAgICAgICAgICAgZGVmZW5jZSB0aGV5IHBsZWFkIHRoZWlyIG5lY2Vzc2l0aWVzLiBIZW5jZSB0aGUgb3V0Y29tZSBpcyBzdHJpZmUgYW5kIGNvbnRlbnRpb24KICAgICAgICAgICAgICAgICAgICBhbW9uZyB5b3Vyc2VsdmVzLCBzb21lIHRha2luZyB0aGlzIHNpZGUgYW5kIHNvbWUgdGhhdCwgd2hpbGUgdGhlIGludGVyZXN0cyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBzdGF0ZSBzdWZmZXIuIFlvdSBjb25kdWN0IHlvdXIgcGFydHktcG9saXRpY3MsIEF0aGVuaWFucyBhcyB5b3UgdXNlZCB0bwogICAgICAgICAgICAgICAgICAgIGNvbmR1Y3QgeW91ciB0YXhwYXlpbmfigJRieSBzeW5kaWNhdGVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TaW5jZSB0aGUgeWVhciA8ZGF0ZSBhdXRobmFtZT0iMzc4IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIzNzgiPjM3ODwvZGF0ZT4gZm9yIHRoZSBwYXltZW50IG9mIHRoZSB3YXItdGF4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDOuc+Dz4bOv8+B4b2xPC9mb3JlaWduPu+8iSwgYW5kIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGF0ZSBhdXRobmFtZT0iMzU3IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIzNTciPjM1NzwvZGF0ZT4gZm9yIHRoZSB0cmllcmFyY2h5IGFsc28sIHRoZSBjaXRpemVucyBoYWQKICAgICAgICAgICAgICAgICAgICAgICAgYmVlbiBkaXZpZGVkIGludG8gYSBudW1iZXIgb2YgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4PPhc68zrzOv8+B4b23zrHOuTwvZm9yZWlnbj4sCiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2ggdGhhdCBlYWNoIGNvbXByaXNlZCBhbiBlcXVhbCBmcmFjdGlvbiBvZiB0aGUgcHJpdmF0ZSB3ZWFsdGggb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW11bml0eS4gVGhleSB3ZXJlIGFsc28gZGl2aWRlZCBpbnRvIGZvdXIgY2xhc3NlcyBhY2NvcmRpbmcgdG8gcHJvcGVydHksCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBmaXJzdCBjbGFzcyBjb25zaXN0aW5nIG9mIHRoZSB3ZWFsdGhpZXN0IGNpdGl6ZW5zLCB3aG8gcHJlcGFpZCB0aGUgd2hvbGUKICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQgc3VtIGludG8gdGhlIGV4Y2hlcXVlciBhbmQgdGhlbiByZWNvdmVyZWQgdGhlIG1vbmV5IGR1ZSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBsZXNzIHdlYWx0aHkgY2xhc3Nlc+KAlGEgc3lzdGVtIHdoaWNoIHByb2R1Y2VkIHRoZSBhYnVzZXMgcmVtZWRpZWQKICAgICAgICAgICAgICAgICAgICAgICAgYnkgRGVtb3N0aGVuZXMgaW4gMzQwLiBUaGUgcmljaGVzdCBtYW4gaW4gYSBzeW1tb3J5IHdhcyBjYWxsZWQgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8oc6zzrXOvOG9vc69PC9mb3JlaWduPiBvciBjaGFpcm1hbiBhbmQgaGFkIHVuZGVyIGhpbSBhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4DOuc68zrXOu863z4ThvbXPgjwvZm9yZWlnbj4gb3IgZGlyZWN0b3IuIFRoZSBjb21wYXJpc29uCiAgICAgICAgICAgICAgICAgICAgICAgIGhlcmUgaXMgb25seSBhIHJvdWdoLWFuZC1yZWFkeSBvbmUuIEVhY2ggcG9saXRpY2FsIHBhcnR5IGluIHRoZSBBc3NlbWJseSBoYXMKICAgICAgICAgICAgICAgICAgICAgICAgYW4gb3JhdG9yIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8oc6zzrXOvOG9vc69PC9mb3JlaWduPu+8iSBhdAogICAgICAgICAgICAgICAgICAgICAgICBpdHMgaGVhZCwgYSBmYXZvcml0ZSBnZW5lcmFsIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+AzrnOvM61zrvOt8+E4b21z4I8L2ZvcmVpZ24+77yJIHdob3NlIGNsYWltcyBpdCBzdXBwb3J0cywgYW5kIGEgZ3JvdXAKICAgICAgICAgICAgICAgICAgICAgICAgb2YgYmFja2VycyB3aG8gYXBwbGF1ZCDvvIg9dGhlIDMwMCB3aG8gcGF577yJLjwvbm90ZT4gRWFjaAogICAgICAgICAgICAgICAgICAgIHN5bmRpY2F0ZSBoYXMgYW4gb3JhdG9yIGZvciBjaGFpcm1hbiwgd2l0aCBhIGdlbmVyYWwgdW5kZXIgaGltIGFuZCB0aHJlZSBodW5kcmVkCiAgICAgICAgICAgICAgICAgICAgdG8gZG8gdGhlIHNob3V0aW5nLiBUaGUgcmVzdCBvZiB5b3UgYXJlIGF0dGFjaGVkIG5vdyB0byBvbmUgcGFydHkgYW5kIG5vdyB0bwogICAgICAgICAgICAgICAgICAgIGFub3RoZXIuIDxkYXRlIGF1dGhuYW1lPSIzNzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9IjM3OCI+Mzc4PC9kYXRlPiBmb3IgdGhlIHBheW1lbnQgb2YgdGhlIHdhci10YXgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM65z4PPhs6/z4HhvbE8L2ZvcmVpZ24+77yJLCBhbmQgc2luY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRlIGF1dGhuYW1lPSIzNTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9IjM1NyI+MzU3PC9kYXRlPiBmb3IgdGhlIHRyaWVyYXJjaHkgYWxzbywgdGhlIGNpdGl6ZW5zIGhhZAogICAgICAgICAgICAgICAgICAgICAgICBiZWVuIGRpdmlkZWQgaW50byBhIG51bWJlciBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Pg8+FzrzOvM6/z4HhvbfOsc65PC9mb3JlaWduPiwKICAgICAgICAgICAgICAgICAgICAgICAgc3VjaCB0aGF0IGVhY2ggY29tcHJpc2VkIGFuIGVxdWFsIGZyYWN0aW9uIG9mIHRoZSBwcml2YXRlIHdlYWx0aCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY29tbXVuaXR5LiBUaGV5IHdlcmUgYWxzbyBkaXZpZGVkIGludG8gZm91ciBjbGFzc2VzIGFjY29yZGluZyB0byBwcm9wZXJ0eSwKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGZpcnN0IGNsYXNzIGNvbnNpc3Rpbmcgb2YgdGhlIHdlYWx0aGllc3QgY2l0aXplbnMsIHdobyBwcmVwYWlkIHRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZCBzdW0gaW50byB0aGUgZXhjaGVxdWVyIGFuZCB0aGVuIHJlY292ZXJlZCB0aGUgbW9uZXkgZHVlIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxlc3Mgd2VhbHRoeSBjbGFzc2Vz4oCUYSBzeXN0ZW0gd2hpY2ggcHJvZHVjZWQgdGhlIGFidXNlcyByZW1lZGllZAogICAgICAgICAgICAgICAgICAgICAgICBieSBEZW1vc3RoZW5lcyBpbiAzNDAuIFRoZSByaWNoZXN0IG1hbiBpbiBhIHN5bW1vcnkgd2FzIGNhbGxlZCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byhzrPOtc684b29zr08L2ZvcmVpZ24+IG9yIGNoYWlybWFuIGFuZCBoYWQgdW5kZXIgaGltIGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDPgM65zrzOtc67zrfPhOG9tc+CPC9mb3JlaWduPiBvciBkaXJlY3Rvci4gVGhlIGNvbXBhcmlzb24KICAgICAgICAgICAgICAgICAgICAgICAgaGVyZSBpcyBvbmx5IGEgcm91Z2gtYW5kLXJlYWR5IG9uZS4gRWFjaCBwb2xpdGljYWwgcGFydHkgaW4gdGhlIEFzc2VtYmx5IGhhcwogICAgICAgICAgICAgICAgICAgICAgICBhbiBvcmF0b3Ig77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byhzrPOtc684b29zr08L2ZvcmVpZ24+77yJIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIGl0cyBoZWFkLCBhIGZhdm9yaXRlIGdlbmVyYWwg77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4DOuc68zrXOu863z4ThvbXPgjwvZm9yZWlnbj7vvIkgd2hvc2UgY2xhaW1zIGl0IHN1cHBvcnRzLCBhbmQgYSBncm91cAogICAgICAgICAgICAgICAgICAgICAgICBvZiBiYWNrZXJzIHdobyBhcHBsYXVkIO+8iD10aGUgMzAwIHdobyBwYXnvvIkuPC90cmFuc2xhdGlvbj4="
translation['2.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5TdXJlbHkgdGhpcyBzeXN0ZW0gbXVzdCBiZSBhYmFuZG9uZWQuCiAgICAgICAgICAgICAgICAgICAgWW91IG11c3QgYmUgb25jZSBtb3JlIHlvdXIgb3duIG1hc3RlcnMsIGFuZCBtdXN0IGdpdmUgdG8gYWxsIGFsaWtlIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgY2hhbmNlIHRvIHNwZWFrLCB0byBjb3Vuc2VsLCB0byBhY3QuIEJ1dCBpZiB5b3UgYXV0aG9yaXplIG9uZSBjbGFzcyBvZiBtZW4gdG8KICAgICAgICAgICAgICAgICAgICBpc3N1ZSBvcmRlcnMgbGlrZSBhYnNvbHV0ZSBtb25hcmNocywgYW5kIGZvcmNlIGFub3RoZXIgY2xhc3MgdG8gZXF1aXAgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2FsbGV5cyBhbmQgcGF5IHRoZSB3YXItdGF4IGFuZCBzZXJ2ZSBpbiB0aGUgZmllbGQsIHdoaWxlIHlldCBhIHRoaXJkIGNsYXNzIGhhcwogICAgICAgICAgICAgICAgICAgIG5vIG90aGVyIHB1YmxpYyBkdXR5IHRoYW4gdG8gdm90ZSB0aGUgY29uZGVtbmF0aW9uIG9mIHRoZSBsYXR0ZXIsIHlvdSB3aWxsIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgZ2V0IGFueXRoaW5nIGVzc2VudGlhbCBkb25lIGF0IHRoZSByaWdodCB0aW1lLiBUaGVyZSB3aWxsIGFsd2F5cyBiZSBzb21lIGNsYXNzCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGdyaWV2YW5jZSwgd2hvIHdpbGwgZmFpbCB5b3UsIGFuZCB0aGVuIGl0IHdpbGwgYmUgeW91ciBwcml2aWxlZ2UgdG8KICAgICAgICAgICAgICAgICAgICBwdW5pc2ggdGhlbSBpbnN0ZWFkIG9mIHRoZSBlbmVteS4gPC90cmFuc2xhdGlvbj4="
translation['2.31'] = ""
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5WZXJ5IGRpZmZlcmVudCwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhcmUgdGhlIHRob3VnaHRzCiAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGVkIHRvIG1lIGJ5IHRoZSBjb250ZW1wbGF0aW9uIG9mIHB1YmxpYyBhZmZhaXJzIGFuZCBieSB0aGUgc3BlZWNoZXMgdG8KICAgICAgICAgICAgICAgICAgICB3aGljaCBJIGxpc3Rlbi4gSSBvYnNlcnZlIHRoYXQgdGhlIHNwZWVjaGVzIGFyZSBhbGwgYWJvdXQgcHVuaXNoaW5nIFBoaWxpcCwKICAgICAgICAgICAgICAgICAgICB3aGlsZSBvdXIgYWZmYWlycyBoYXZlIHJlYWNoZWQgYSBzdGFnZSBhdCB3aGljaCBpdCBtdXN0IGJlIG91ciBmaXJzdCBjb25jZXJuIHRvCiAgICAgICAgICAgICAgICAgICAgYXZvaWQgZGlzYXN0ZXIgb3Vyc2VsdmVzLiBIZW5jZSB0aGVzZSBzcGVha2VycyBzZWVtIHRvIG1lIHRvIG1ha2UgcHJlY2lzZWx5IHRoZQogICAgICAgICAgICAgICAgICAgIG1pc3Rha2Ugb2Ygc3VibWl0dGluZyB0byB5b3UgdGhlIHdyb25nIHN1YmplY3QgZm9yIGRlbGliZXJhdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmb3IgbXlzZWxmIEkgYW0gcGVyZmVjdGx5IHdlbGwgYXdhcmUgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gb25jZSBoYWQgdGhlIGNoYW5jZSBib3RoCiAgICAgICAgICAgICAgICAgICAgb2YgZXN0YWJsaXNoaW5nIGhlciBwb3dlciBhbmQgb2YgcHVuaXNoaW5nIFBoaWxpcDsgZm9yIHdpdGhpbiBteSBvd24gbWVtb3J5IGFuZAogICAgICAgICAgICAgICAgICAgIG5vdCBsb25nIGFnbywgYm90aCB0aGVzZSBvYmplY3RzIHdlcmUgd2l0aGluIG91ciBncmFzcC4gTm93LCBob3dldmVyLCBJIGFtCiAgICAgICAgICAgICAgICAgICAgcGVyc3VhZGVkIHRoYXQgd2UgbXVzdCBiZSBjb250ZW50IHRvIHNlY3VyZSB0aGUgZmlyc3QsIHRoYXQgb2Ygc2F2aW5nIG91cgogICAgICAgICAgICAgICAgICAgIGFsbGllcy4gSWYgb25jZSB3ZSBjYW4gYmUgc3VyZSBvZiB0aGF0LCB0aGVuIHdlIGNhbiBnbyBvbiB0byBjb25zaWRlciB3aG8gaXMgdG8KICAgICAgICAgICAgICAgICAgICBiZSBwdW5pc2hlZCBhbmQgaG93IGl0IGlzIHRvIGJlIGRvbmU7IGJ1dCB1bnRpbCB0aGF0IGZvdW5kYXRpb24gaXMgd2VsbCBhbmQKICAgICAgICAgICAgICAgICAgICB0cnVseSBsYWlkLCBpdCBpcyBpZGxlLCBpbiBteSBvcGluaW9uLCB0byBzYXkgYSB3b3JkIGFib3V0IG91ciB1bHRpbWF0ZSBvYmplY3QuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5OZXZlciB3YXMKICAgICAgICAgICAgICAgICAgICB0aGVyZSBhIGNyaXNpcyB0aGF0IGRlbWFuZGVkIG1vcmUgY2FyZWZ1bCBoYW5kbGluZyB0aGFuIHRoZSBwcmVzZW50LiBCdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0eSBsaWVzLCBJIHRoaW5rLCBub3QgaW4gcHJvcG9zaW5nIGEgcGxhbiB0byBtZWV0IHRoZSBjYXNlOiB3aGF0IHB1enpsZXMKICAgICAgICAgICAgICAgICAgICBtZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaXMgaG93IHRvIHB1dCBpdAogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB5b3UuIEZvciB3aGF0IEkgaGF2ZSBzZWVuIGFuZCBoZWFyZCBjb252aW5jZXMgbWUgdGhhdCBtb3N0IG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICBjaGFuY2VzIGhhdmUgZXNjYXBlZCB1cyByYXRoZXIgZnJvbSBhIGRpc2luY2xpbmF0aW9uIHRvIGRvIG91ciBkdXR5IHRoYW4gZnJvbSBhCiAgICAgICAgICAgICAgICAgICAgZmFpbHVyZSB0byB1bmRlcnN0YW5kIGl0LiBJIG11c3QgYXNrIHlvdSB0byBiZWFyIHdpdGggbWUgaWYgSSBzcGVhayBmcmFua2x5LAogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyaW5nIG9ubHkgd2hldGhlciBJIGFtIHNwZWFraW5nIHRoZSB0cnV0aCwgYW5kIHNwZWFraW5nIHdpdGggdGhlIG9iamVjdAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhpbmdzIG1heSBnbyBiZXR0ZXIgaW4gdGhlIGZ1dHVyZTsgZm9yIHlvdSBzZWUgaG93IHRoZSBwb3B1bGFyaXR5LWh1bnRpbmcKICAgICAgICAgICAgICAgICAgICBvZiBzb21lIG9mIG91ciBvcmF0b3JzIGhhcyBsZWQgdXMgaW50byB0aGlzIGRlc3BlcmF0ZSBwcmVkaWNhbWVudC4gPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIG11c3QgZmlyc3QgcmVmcmVzaAogICAgICAgICAgICAgICAgICAgIHlvdXIgbWVtb3J5IHdpdGggYSBsaXR0bGUgaGlzdG9yeS4gWW91IHJlbWVtYmVyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aGVuIG5ld3MgY2FtZSB0aHJlZSBvciBmb3VyIHllYXJzCiAgICAgICAgICAgICAgICAgICAgYWdvIHRoYXQgUGhpbGlwIHdhcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4gYmVzaWVnaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvcnRyZXNzIG9mIEhlcmFldW0uIFdlbGwsIGl0IHdhcyB0aGUgbW9udGggb2YgTWFlbWFjdGVyaW9uLCBhbmQgdGhlcmUgd2FzIGEKICAgICAgICAgICAgICAgICAgICBsb25nIGFuZCBleGNpdGVkIGRlYmF0ZSBpbiB0aGUgQXNzZW1ibHksIGFuZCB5b3UgZmluYWxseSBkZWNpZGVkIHRvIGxhdW5jaCBhCiAgICAgICAgICAgICAgICAgICAgZmxlZXQgb2YgZm9ydHkgdmVzc2VscyBtYW5uZWQgYnkgY2l0aXplbnMgdW5kZXIgdGhlIGFnZSBvZiBmb3J0eS1maXZlLCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICByYWlzZSBmb3J0eSB0YWxlbnRzIGJ5IGEgc3BlY2lhbCB0YXguIDwvdHJhbnNsYXRpb24+"
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgeWVhcgogICAgICAgICAgICAgICAgICAgIHBhc3NlZCBhbmQgSGVjYXRvbWJhZW9uIGNhbWUgYW5kIE1ldGFnZWl0bmlvbiBhbmQgQm/Dq2Ryb21pb24uIEluIHRoYXQKICAgICAgICAgICAgICAgICAgICBtb250aCwgd2l0aCBhIGdyZWF0IGVmZm9ydCwgYWZ0ZXIgdGhlIGNlbGVicmF0aW9uIG9mIHRoZSBNeXN0ZXJpZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIEVsZXVzaW5pYW4gTXlzdGVyaWVzLCBjZWxlYnJhdGVkIGJldHdlZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDEzdGggYW5kIDI0dGggb2YgQm/Dq2Ryb21pb24sIGkuZS4gYWJvdXQgdGhlIGJlZ2lubmluZyBvZgogICAgICAgICAgICAgICAgICAgICAgICBPY3RvYmVyLjwvbm90ZT4geW91IGRpc3BhdGNoZWQgQ2hhcmlkZW11cyB3aXRoIHRlbiBzaGlwcywgdW5tYW5uZWQsIGFuZCBhCiAgICAgICAgICAgICAgICAgICAgc3VtIG9mIGZpdmUgdGFsZW50cyBvZiBzaWx2ZXIuIFdoZW4gbmV3cyBjYW1lIHRoYXQgUGhpbGlwIHdhcyBpbGwgb3IKICAgICAgICAgICAgICAgICAgICBkZWFk4oCUYm90aCByZXBvcnRzIHJlYWNoZWQgdXPigJR5b3UsIEF0aGVuaWFucywgdGhpbmtpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlbHAgd2FzIG5vIGxvbmdlciBuZWVkZWQsIGFiYW5kb25lZCB0aGUgZXhwZWRpdGlvbi4gQnV0IHRoYXQgd2FzIGp1c3QgeW91cgogICAgICAgICAgICAgICAgICAgIG9wcG9ydHVuaXR5LiBJZiB3ZSBoYWQgY2FycmllZCBvdXQgb3VyIHJlc29sdXRpb24gaW4gZWFybmVzdCBhbmQgc2FpbGVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiB0aGVuLCBQaGlsaXAgd291bGQgbm90IGhhdmUKICAgICAgICAgICAgICAgICAgICBzdXJ2aXZlZCB0byB0cm91YmxlIHVzIHRvZGF5LiA8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XZWxsLCB3aGF0IGlzIGRvbmUgY2Fubm90IGJlIHVuZG9uZTsgYnV0IG5vdyBjb21lcyB0aGUKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0eSBvZiBhbm90aGVyIHdhci4gVGhhdCB3YXMgd2h5IEkgaGF2ZSByZWZlcnJlZCB0byB0aGUgcGFzdCwgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBtYXkgbm90IG1ha2UgdGhlIHNhbWUgbWlzdGFrZSBhZ2Fpbi4gV2hhdCB1c2UsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFyZSB3ZSB0byBtYWtlIG9mIG91ciBvcHBvcnR1bml0eT8KICAgICAgICAgICAgICAgICAgICBGb3IgaWYgeW91IGRvIG5vdCBzZW5kIGhlbHAg4oCcaW4gZnVsbCBtdXN0ZXIsIHdoZXJldG8geW91ciBwb3dlciBzaGFsbAogICAgICAgICAgICAgICAgICAgICAgICBleHRlbmQs4oCdPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFzIFNhbmR5cyBoYXMgbm90ZWQsdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHBocmFzZSBpcyBwcm9iYWJseSBhIGZvcm11bGEgYm9ycm93ZWQgZnJvbSB0aGUgYWN0dWFsIHRleHQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWF0eS48L25vdGU+IG9ic2VydmUgaG93IGFsbCB5b3VyIGdlbmVyYWxzaGlwIHdpbGwgbWFrZSBmb3IgUGhpbGlwJ3MKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPldlIGNvdWxkIGNvdW50PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBjaGFuZ2UgdG8gdGhlIHBhc3QgdGVuc2UgaXMgbWFkZSBtb3JlIGFicnVwdCBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgb21pc3Npb24gb2YgY29ubmVjdGluZyBwYXJ0aWNsZXMgaW4gdGhyZWUgc3VjY2Vzc2l2ZSBzZW50ZW5jZXMuIERlbW9zdGhlbmVzCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIHRlbGxpbmcgb2ZmIG9uIGhpcyBmaW5nZXJzIHRoZSBhZHZhbnRhZ2VzIHdoaWNoIHRoZSBBdGhlbmlhbnMgYWxyZWFkeSBoYWQKICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHRoZSBkZWJhdGUgYmVnYW4uPC9ub3RlPiBvbiB0aGUgT2x5bnRoaWFucyB3aXRoIHRoZWlyIGNvbnNpZGVyYWJsZQogICAgICAgICAgICAgICAgICAgIHJlc291cmNlczsgYW5kIHRoZSBwb3NpdGlvbiBvZiBhZmZhaXJzIHdhcyB0aGF0IFBoaWxpcCBkaWQgbm90IHRydXN0IHRoZW0sIG5vcgogICAgICAgICAgICAgICAgICAgIHRoZXkgUGhpbGlwLiBXZSBoYWQgbmVnb3RpYXRlZCBhIHBlYWNlIHdpdGggdGhlbSB0aGF0IGhhbXBlcmVkIFBoaWxpcCBzb3JlbHk7CiAgICAgICAgICAgICAgICAgICAgZm9yIGhlcmUgd2FzIGEgcG93ZXJmdWwgc3RhdGUsIHJlY29uY2lsZWQgdG8gdXMgYW5kIHdhdGNoaW5nIGZvciBoaW0gdG8gZ2l2ZQogICAgICAgICAgICAgICAgICAgIHRoZW0gYW4gb3BlbmluZy4gV2UgdGhvdWdodCB0aGF0IHdlIG91Z2h0IGJ5IGFsbCBtZWFucyB0byBlbWJyb2lsIHRoZW0gd2l0aCBoaW07CiAgICAgICAgICAgICAgICAgICAgYW5kIHdoYXQgd2FzIHRoZW4gY29tbW9uIHRhbGsgaGFzIHRvZGF5IHNvbWVob3cgb3Igb3RoZXIgY29tZSB0byBwYXNzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPldoYXQgcmVtYWlucyB0aGVuLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBidXQgdG8gaGVscCB0aGVtIHdpdGggYWxsIHlvdXIKICAgICAgICAgICAgICAgICAgICBwb3dlciBhbmQgZW5lcmd5PyBJIHNlZSBubyBhbHRlcm5hdGl2ZS4gRm9yLCBxdWl0ZSBhcGFydCBmcm9tIHRoZSBkaXNncmFjZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2Ugc2hvdWxkIGluY3VyIGlmIHdlIHNoaXJrIG91ciByZXNwb25zaWJpbGl0aWVzLCBJIHNlZSBub3QgYSBsaXR0bGUgZGFuZ2VyLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGZvciB0aGUgZnV0dXJlLCBpZiB0aGUKICAgICAgICAgICAgICAgICAgICBUaGViYW5zIG1haW50YWluIHRoZWlyIHByZXNlbnQgYXR0aXR1ZGUgdG93YXJkcyB1cywgYW5kIHRoZSBQaG9jaWFucyBoYXZlIGNvbWUKICAgICAgICAgICAgICAgICAgICB0byB0aGUgZW5kIG9mIHRoZWlyIG1vbmV5LCBhbmQgdGhlcmUgaXMgbm90aGluZyB0byBoaW5kZXIgUGhpbGlwLCB3aGVuIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGNydXNoZWQgaGlzIHByZXNlbnQgZm9lLCBmcm9tIHR1cm5pbmcgaGlzIGFybXMgYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['3.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkJ1dAogICAgICAgICAgICAgICAgICAgIHN1cmVseSBpZiBhbnlvbmUgb2YgeW91IHdvdWxkIHBvc3Rwb25lIHRoZSBuZWNlc3NhcnkgYWN0aW9uIHRpbGwgdGhlbiwgaGUgbXVzdAogICAgICAgICAgICAgICAgICAgIHByZWZlciB0byBzZWUgZGFuZ2VyIGF0IGhpcyB2ZXJ5IGRvb3JzLCByYXRoZXIgdGhhbiBoZWFyIG9mIGl0IGZhciBhd2F5LCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICBiZWcgaGVscCBmb3IgaGltc2VsZiwgd2hlbiBoZSBtaWdodCBiZSBsZW5kaW5nIGhlbHAgdG8gb3RoZXJzIG5vdzsgZm9yIEkgc3VwcG9zZQogICAgICAgICAgICAgICAgICAgIHdlIGFsbCByZWFsaXplIHRoYXQgdGhhdCBpcyB3aGF0IGl0IHdpbGwgY29tZSB0bywgaWYgd2UgdGhyb3cgYXdheSBvdXIgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIGNoYW5jZXMuIDwvdHJhbnNsYXRpb24+"
translation['3.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGVyaGFwcyB5b3Ugd2lsbCBzYXksIOKAnE9mIGNvdXJzZSB3ZSBhbGwga25vdyB0aGF0IHdlIG11c3Qgc2VuZCBhbgogICAgICAgICAgICAgICAgICAgIGV4cGVkaXRpb24sIGFuZCB3ZSBhcmUgd2lsbGluZyB0byBkbyBzbzsgYnV0IHRlbGwgdXMgaG93LuKAnSBUaGVuIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGJlIHN1cnByaXNlZCwgQXRoZW5pYW5zLCBpZiBteSBhbnN3ZXIgY29tZXMgYXMgYSBzaG9jayB0byBtb3N0IG9mIHlvdS4gQXBwb2ludCBhCiAgICAgICAgICAgICAgICAgICAgbGVnaXNsYXRpdmUgY29tbWlzc2lvbi4gRG8gbm90IHVzZSBpdCB0byBmcmFtZSBuZXcgbGF3c+KAlHlvdSBoYXZlIGxhd3MKICAgICAgICAgICAgICAgICAgICBlbm91Z2ggZm9yIHlvdXIgcHVycG9zZeKAlGJ1dCByZXBlYWwgdGhvc2Ugd2hpY2ggaGFtcGVyIHVzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgY3Jpc2lzLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBwbGFpbiBsYW5ndWFnZSBJIG1lYW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3cyBmb3IgYWRtaW5pc3RlcmluZyB0aGUgVGhlb3JpYyBGdW5kLCBhbmQgYWxzbyBzb21lIG9mIHRoZSBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgcmVndWxhdGlvbnMuIFRoZSBmb3JtZXIgZGlzdHJpYnV0ZSB0aGUgbWlsaXRhcnkgZnVuZHMgYXMgdGhlYXRyZS1tb25leSBhbW9uZwogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyByZW1haW4gaW4gdGhlIGNpdHk7IHRoZSBsYXR0ZXIgZ2l2ZSBpbXB1bml0eSB0byBkZXNlcnRlcnMgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgY29uc2VxdWVuY2UgZGlzY291cmFnZSB0aG9zZSB3aWxsaW5nIHRvIHNlcnZlLiBXaGVuIHlvdSBoYXZlIHJlcGVhbGVkIHRoZXNlIGxhd3MKICAgICAgICAgICAgICAgICAgICBhbmQgbWFkZSB0aGUgd2F5IHNhZmUgZm9yIHdpc2UgY291bnNlbCwgdGhlbiBsb29rIHJvdW5kIGZvciBzb21lb25lIHdobyB3aWxsCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zZSB3aGF0IHlvdSBhbGwga25vdyB0byBiZSBzYWx1dGFyeSBtZWFzdXJlcy4gQnV0IHVudGlsIHlvdSBoYXZlIGRvbmUgdGhpcywKICAgICAgICAgICAgICAgICAgICBkbyBub3QgZXhwZWN0IHRvIGZpbmQgYSBzdGF0ZXNtYW4gd2hvIHdpbGwgcHJvcG9zZSBtZWFzdXJlcyBmb3IgeW91ciBiZW5lZml0LAogICAgICAgICAgICAgICAgICAgIG9ubHkgdG8gYmUgcnVpbmVkIGJ5IHlvdSBmb3IgaGlzIHBhaW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UKICAgICAgICAgICAgICAgICAgICB3aWxsIG5ldmVyIGZpbmQgb25lLCBlc3BlY2lhbGx5IGFzIHRoZSBvbmx5IHJlc3VsdCB3b3VsZCBiZSB0aGF0IHRoZSBwcm9wb3NlcgogICAgICAgICAgICAgICAgICAgIHdvdWxkIGdldCBpbnRvIHRyb3VibGUgd2l0aG91dCBpbXByb3ZpbmcgdGhlIHNpdHVhdGlvbiwgYW5kIGhpcyBmYXRlIHdvdWxkIGFsc28KICAgICAgICAgICAgICAgICAgICBtYWtlIGdvb2QgYWR2aWNlIG1vcmUgZGFuZ2Vyb3VzIGZvciB0aGUgZnV0dXJlLiBZZXMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCB5b3Ugb3VnaHQgdG8gaW5zaXN0IHRoYXQgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gbWFkZSB0aGVzZSBsYXdzIHNob3VsZCBhbHNvIHJlcGVhbCB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBub3QgZmFpciB0aGF0IHRob3NlIGxlZ2lzbGF0b3JzIHNob3VsZCBlbmpveSBhIHBvcHVsYXJpdHkgd2hpY2ggaGFzIGNvc3QKICAgICAgICAgICAgICAgICAgICB0aGUgY29tbXVuaXR5IGRlYXIsIGJ1dCB0aGF0IHRoZSBwYXRyaW90aWMgcmVmb3JtZXIgc2hvdWxkIGJlIHBlbmFsaXplZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBvZGl1bSBvZiBwcm9wb3NhbHMgYnkgd2hpY2ggd2UgbWF5IGFsbCBiZSBiZW5lZml0ZWQuIFVudGlsIHlvdSBoYXZlIHNldCB0aGlzCiAgICAgICAgICAgICAgICAgICAgcmlnaHQsIEF0aGVuaWFucywgZG8gbm90IGV4cGVjdCB0byBmaW5kIGFueW9uZSBzbyBpbmZsdWVudGlhbCBhbW9uZyB5b3UgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGNhbiBicmVhayB0aGVzZSBsYXdzIHdpdGggaW1wdW5pdHksIG9yIHNvIHdhbnRpbmcgaW4gZGlzY3JldGlvbiBhcyB0byBydW4KICAgICAgICAgICAgICAgICAgICBvcGVuLWV5ZWQgaW50byBkYW5nZXIuIDwvdHJhbnNsYXRpb24+"
translation['3.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXQgdGhlIHNhbWUgdGltZSwgQXRoZW5pYW5zLCB5b3UgbXVzdCBub3QgZm9yZ2V0IHRoaXMsIHRoYXQgYSBtZXJlCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIGlzIHdvcnRobGVzcyB3aXRob3V0IGEgd2lsbGluZ25lc3Mgb24geW91ciBwYXJ0IHRvIHB1dCB5b3VyIHJlc29sdXRpb25zCiAgICAgICAgICAgICAgICAgICAgaW50byBwcmFjdGljZS4gSWYgZGVjcmVlcyBjb3VsZCBhdXRvbWF0aWNhbGx5IGNvbXBlbCB5b3UgdG8gZG8geW91ciBkdXR5LCBvcgogICAgICAgICAgICAgICAgICAgIGNvdWxkIGFjY29tcGxpc2ggdGhlIG9iamVjdHMgZm9yIHdoaWNoIHRoZXkgd2VyZSBwcm9wb3NlZCwgeW91IHdvdWxkIG5vdCBoYXZlCiAgICAgICAgICAgICAgICAgICAgcGFzc2VkIHN1Y2ggYW4gYXJyYXkgb2YgdGhlbSB3aXRoIGxpdHRsZSBvciBubyByZXN1bHQsIGFuZCBQaGlsaXAgd291bGQgbm90IGhhdmUKICAgICAgICAgICAgICAgICAgICBoYWQgc3VjaCBhIGxvbmcgY2FyZWVyIG9mIGluc29sZW50IHRyaXVtcGguIExvbmcgYWdvLCBpZiBkZWNyZWVzIGNvdW50ZWQgZm9yCiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcsIGhlIHdvdWxkIGhhdmUgc3VmZmVyZWQgZm9yIGhpcyBzaW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhhdCBpcyBub3Qgc28uIEZvciBpbiBvcmRlciBvZiB0aW1lIGFjdGlvbiBpcyBzdWJzZXF1ZW50IHRvIHNwZWFraW5nIGFuZAogICAgICAgICAgICAgICAgICAgIHZvdGluZywgYnV0IGluIGltcG9ydGFuY2UgaXQgY29tZXMgZmlyc3QgYW5kIHJhbmtzIGhpZ2hlci4gSXQgaXMgYWN0aW9uLCB0aGVuLAogICAgICAgICAgICAgICAgICAgIHRoYXQgbXVzdCBiZSBhZGRlZDogb2YgYWxsIGVsc2Ugd2UgaGF2ZSBlbm91Z2guIFlvdSBoYXZlIGFtb25nIHlvdSwgQXRoZW5pYW5zLAogICAgICAgICAgICAgICAgICAgIG1lbiBjb21wZXRlbnQgdG8gc2F5IHRoZSByaWdodCB0aGluZywgbm8gbmF0aW9uIGlzIHF1aWNrZXItd2l0dGVkIHRvIGdyYXNwIHRoZQogICAgICAgICAgICAgICAgICAgIG1lYW5pbmcgb2Ygc3BlZWNoLCBhbmQgeW91IHdpbGwgYXQgb25jZSBiZSBhYmxlIHRvIHRyYW5zbGF0ZSBpdCBpbnRvIGFjdGlvbiwgaWYKICAgICAgICAgICAgICAgICAgICBvbmx5IHlvdSBkbyB5b3VyIGR1dHkuIDwvdHJhbnNsYXRpb24+"
translation['3.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5XaHksIHdoYXQgYmV0dGVyIHRpbWUKICAgICAgICAgICAgICAgICAgICBvciBvY2Nhc2lvbiBjb3VsZCB5b3UgZmluZCB0aGFuIHRoZSBwcmVzZW50LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+PyBXaGVuIHdpbGwgeW91IGRvIHlvdXIgZHV0eSwgaWYgbm90CiAgICAgICAgICAgICAgICAgICAgbm93PyBIYXMgbm90IHlvdXIgZW5lbXkgYWxyZWFkeSBjYXB0dXJlZCBhbGwgb3VyIHN0cm9uZ2hvbGRzLCBhbmQgaWYgaGUgYmVjb21lcwogICAgICAgICAgICAgICAgICAgIG1hc3RlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjcxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzE2Ij5DaGFsY2lkaWNlPC9wbGFjZU5hbWU+LCBzaGFsbCB3ZSBub3QgYmUKICAgICAgICAgICAgICAgICAgICBvdmVyd2hlbG1lZCB3aXRoIGRpc2hvbm9yPyBBcmUgbm90IHRob3NlIHN0YXRlcyBhY3R1YWxseSBhdCB3YXIgd2hpY2ggd2Ugc28KICAgICAgICAgICAgICAgICAgICByZWFkaWx5IGVuZ2FnZWQgaW4gdGhhdCBldmVudCB0byBwcm90ZWN0PyBJcyBub3QgUGhpbGlwIG91ciBlbmVteT8gQW5kIGluCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiBvZiBvdXIgcHJvcGVydHk/IEFuZCBhIGJhcmJhcmlhbj8gSXMgYW55IGRlc2NyaXB0aW9uIHRvbyBiYWQgZm9yIGhpbT8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGluIHRoZSBuYW1lIG9mIHRoZSBnb2RzLCB3aGVuIHdlIGhhdmUKICAgICAgICAgICAgICAgICAgICBhYmFuZG9uZWQgYWxsIHRoZXNlIHBsYWNlcyBhbmQgYWxtb3N0IGhlbHBlZCBQaGlsaXAgdG8gZ2FpbiB0aGVtLCBzaGFsbCB3ZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgYXNrIHdobyBpcyB0byBibGFtZT8gRm9yIEkgYW0gc3VyZSB3ZSBzaGFsbCBuZXZlciBhZG1pdCB0aGF0IGl0IGlzIG91cnNlbHZlcy4gSW4KICAgICAgICAgICAgICAgICAgICB0aGUgcGFuaWMgb2YgYmF0dGxlIHRoZSBydW5hd2F5IG5ldmVyIGJsYW1lcyBoaW1zZWxmOyBpdCBpcyBhbHdheXMgaGlzIGdlbmVyYWwncwogICAgICAgICAgICAgICAgICAgIGZhdWx0LCBvciBoaXMgY29tcmFkZXMnLCBhbnlvbmUncyByYXRoZXIgdGhhbiBoaXMgb3duLiBZZXQgc3VyZWx5IHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHJ1bmF3YXlzIGNvbGxlY3RpdmVseSB0aGUgZGVmZWF0IGlzIGR1ZTsgZm9yIGhlIG1pZ2h0IGhhdmUgc3Rvb2QgZmlybSB3aG8gbm93CiAgICAgICAgICAgICAgICAgICAgYmxhbWVzIHRoZSBvdGhlcnMsIGFuZCBpZiBldmVyeSBtYW4gaGFkIHN0b29kLCB0aGUgYmF0dGxlIHdvdWxkIGhhdmUgYmVlbiB3b24uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5TbyBub3c6IHNvbWVvbmUncyBzdWdnZXN0aW9uIGlzIG5vdCB0aGUKICAgICAgICAgICAgICAgICAgICBiZXN0IHBvc3NpYmxlLiBUaGVuIGxldCBzb21lb25lIGVsc2UgZ2V0IHVwIGFuZCBtYWtlIGEgYmV0dGVyLCBub3QgYmxhbWUgdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3Qgc3BlYWtlci4gU3VwcG9zZSB0aGUgc2Vjb25kIHN1Z2dlc3Rpb24gaXMgYW4gaW1wcm92ZW1lbnQuIFRoZW4gYWN0IHVwb24KICAgICAgICAgICAgICAgICAgICBpdCwgYW5kIHN1Y2Nlc3MgYXR0ZW5kIGl0ISBCdXQsIHlvdSBzYXksIGl0IGlzIG5vdCBhIHBsZWFzYW50IG9uZS4gVGhlIHNwZWFrZXIKICAgICAgICAgICAgICAgICAgICBpcyBub3QgdG8gYmxhbWUgZm9yIHRoYXTigJR1bmxlc3MgaGUgbGVhdmVzIG91dCB0aGUgbmVjZXNzYXJ5CiAgICAgICAgICAgICAgICAgICAgICAgIHByYXllciE8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIEF0aGVuaWFucyB3ZXJlIHRvbyBwcm9uZSB0byByZWx5CiAgICAgICAgICAgICAgICAgICAgICAgIG9uIHRoZSBlZmZpY2FjeSBvZiBhIHByYXllciBvciBwaW91cyB3aXNoLCBzdWNoIGFzIG9yYXRvcnMgd2VyZSBmb25kIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGludHJvZHVjaW5nIGludG8gdGhlaXIgc3BlZWNoZXMuPC9ub3RlPiBZZXMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGl0IGlzIGVhc3kgdG8gcHJheSwgY3JhbW1pbmcgYWxsCiAgICAgICAgICAgICAgICAgICAgb3VyIHdhbnRzIGludG8gb25lIHNob3J0IHBldGl0aW9uLiBCdXQgdG8gY2hvb3NlLCB3aGVuIGNob2ljZSBvZiBhY3Rpb24gaXMgcHV0CiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHlvdSwgaXMgbm8gc3VjaCBjaGlsZCdzLXBsYXksIGJlY2F1c2UgeW91IGhhdmUgdG8gY2hvb3NlIHRoZSBiZXN0IGNvdXJzZQogICAgICAgICAgICAgICAgICAgIHJhdGhlciB0aGFuIHRoZSBwbGVhc2FudGVzdCwgaWYgeW91IGNhbm5vdCBoYXZlIGJvdGggYXQgb25jZS4gPC90cmFuc2xhdGlvbj4="
translation['3.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz7igJxCdXQgd2hhdCBpZiBzb21lb25lIGNhbiBsZWF2ZSBvdXIgVGhlb3JpYwogICAgICAgICAgICAgICAgICAgIEZ1bmQgdW50b3VjaGVkIGFuZCBuYW1lIG90aGVyIHNvdXJjZXMgZm9yIG91ciBtaWxpdGFyeSBidWRnZXQ/IElzIG5vdCBoZSB0aGUKICAgICAgICAgICAgICAgICAgICBiZXR0ZXIgc3RhdGVzbWFuP+KAnSBzYXlzIHNvbWVvbmUuIEkgZ3JhbnQgeW91LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBBdGhlbnPigJRpZiB0aGUgdGhpbmcgaXMgcG9zc2libGUuIEJ1dCBJIHdvbmRlciBpZiBhbnkgbW9ydGFsLCBhZnRlcgogICAgICAgICAgICAgICAgICAgIHNwZW5kaW5nIGFsbCBoaXMgZXhpc3Rpbmcgd2VhbHRoIG9uIHN1cGVyZmx1aXRpZXMsIGV2ZXIgZGlkIG9yIGV2ZXIgd2lsbCBmaW5kCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB3aXRoIGEgc3VycGx1cyBmb3IgbmVjZXNzYXJpZXMgZnJvbSBoaXMgdmFuaXNoZWQgZnVuZHMuIEkgdGhpbmsgdGhhdCBpbgogICAgICAgICAgICAgICAgICAgIHN1Y2ggcHJvcG9zYWxzIHRoZSB3aXNoIGlzIGZhdGhlciB0byB0aGUgdGhvdWdodCwgYW5kIHRoYXQgaXMgd2h5IG5vdGhpbmcgaXMKICAgICAgICAgICAgICAgICAgICBlYXNpZXIgdGhhbiBzZWxmLWRlY2VpdC4gRm9yIHdoYXQgZWFjaCBtYW4gd2lzaGVzLCB0aGF0IGhlIGFsc28gYmVsaWV2ZXMgdG8gYmUKICAgICAgICAgICAgICAgICAgICB0cnVlLiBVbmZvcnR1bmF0ZWx5IGl0IGlzIG5vdCBvZnRlbiBzbyBpbiBwcmFjdGljYWwgcG9saXRpY3MuIDwvdHJhbnNsYXRpb24+"
translation['3.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgSSB3YW50IHlvdSwgQXRoZW5pYW5zLCB0byBjb25zaWRlciB0aGUKICAgICAgICAgICAgICAgICAgICBwb3NzaWJpbGl0aWVzIG9mIHRoZSBjYXNlLCBhbmQgc2VlIGhvdyB5b3UgY2FuIGJvdGggc2VydmUgYW5kIHJlY2VpdmUgeW91ciBwYXkuCiAgICAgICAgICAgICAgICAgICAgU3VyZWx5IGl0IGlzIG5vdCBsaWtlIG1lbiBvZiBzZW5zZSBhbmQgc3Bpcml0IHRvIHNoaXJrIHlvdXIgbWlsaXRhcnkgZHV0eQogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgdGhlIHBheSBpcyBub3QgZm9ydGhjb21pbmcsIHRoaW5raW5nIGxpZ2h0bHkgb2YgdGhlIHNoYW1lIG9mIGl0IGFsbDsgb3IKICAgICAgICAgICAgICAgICAgICB0byBzbmF0Y2ggdXAgYXJtcyBhbmQgbWFyY2ggYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENvcmludGgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4gb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhcmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lZ2FyYSI+TWVnYXJhPC9wbGFjZU5hbWU+LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5HZW5lcmFsbHkgZXhwbGFpbmVkIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhdHRhY2tzIG9uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ29yaW50aCI+Q29yaW50aDwvcGxhY2VOYW1lPiBpbiA0NTgKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIG9uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVnYXJhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhcmEiPk1lZ2FyYTwvcGxhY2VOYW1lPiBpbiA0MzEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDEuMTA1IiB2YWxpZD0ieWVzIj5UaHVjLiAxLjEwNTwvYmlibD47PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMi4zMSIgdmFsaWQ9InllcyI+VGh1Yy4gMi4zMTwvYmlibD7vvIk7IGJ1dCBwcm9iYWJseSB0aGUgcmVmZXJlbmNlIGlzIHRvIHNvbWUKICAgICAgICAgICAgICAgICAgICAgICAgbGF0ZXIgYW5kIG9ic2N1cmVyIGV2ZW50cy48L25vdGU+IGJ1dCB0byBsZXQgUGhpbGlwIGVuc2xhdmUgR3JlZWsgY2l0aWVzLAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgeW91IGFyZSBzaG9ydCBvZiByYXRpb25zIGZvciBhIGNhbXBhaWduLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENvcmludGgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4gaW4gNDU4CiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2FyYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYXJhIj5NZWdhcmE8L3BsYWNlTmFtZT4gaW4gNDMxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAxLjEwNSIgdmFsaWQ9InllcyI+VGh1Yy4gMS4xMDU8L2JpYmw+OzxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDIuMzEiIHZhbGlkPSJ5ZXMiPlRodWMuIDIuMzE8L2JpYmw+77yJOyBidXQgcHJvYmFibHkgdGhlIHJlZmVyZW5jZSBpcyB0byBzb21lCiAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVyIGFuZCBvYnNjdXJlciBldmVudHMuPC90cmFuc2xhdGlvbj4="
translation['3.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBhbSBub3QgdGFsa2luZyBmb3IgdGhlIGlkbGUgcHVycG9zZQogICAgICAgICAgICAgICAgICAgIG9mIHF1YXJyZWxsaW5nIHdpdGggYW55b25lIGhlcmUuIEkgYW0gbm90IHN1Y2ggYSBtaXNndWlkZWQgZm9vbCBhcyB0byBwaWNrIGEKICAgICAgICAgICAgICAgICAgICBxdWFycmVsIGRlbGliZXJhdGVseSB3aGVuIEkgc2VlIG5vIGFkdmFudGFnZSBmcm9tIGl0LiBCdXQgSSBjb25zaWRlciBpdCByaWdodCBhcwogICAgICAgICAgICAgICAgICAgIGEgY2l0aXplbiB0byBzZXQgdGhlIHdlbGZhcmUgb2YgdGhlIHN0YXRlIGFib3ZlIHRoZSBwb3B1bGFyaXR5IG9mIGFuIG9yYXRvci4KICAgICAgICAgICAgICAgICAgICBJbmRlZWQgSSBhbSBnaXZlbiB0byB1bmRlcnN0YW5k4oCUYW5kIHNvIHBlcmhhcHMgYXJlIHlvdeKAlHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgb3JhdG9ycyBvZiBwYXN0IGdlbmVyYXRpb25zLCBhbHdheXMgcHJhaXNlZCBidXQgbm90IGFsd2F5cyBpbWl0YXRlZCBieSB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyBhZGRyZXNzIHlvdSwgYWRvcHRlZCB0aGlzIHZlcnkgc3RhbmRhcmQgYW5kIHByaW5jaXBsZSBvZiBzdGF0ZXNtYW5zaGlwLiBJCiAgICAgICAgICAgICAgICAgICAgcmVmZXIgdG8gdGhlIGZhbW91cyBBcmlzdGlkZXMsIHRvIE5pY2lhcywgdG8gbXkgb3duIG5hbWVzYWtlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EZW1vc3RoZW5lcywgdGhlIGdlbmVyYWwsIHdobyBwZXJpc2hlZCB3aXRoIE5pY2lhcyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgU2ljaWxpYW4gZXhwZWRpdGlvbi4gSGUgaXMgbm90IGVsc2V3aGVyZSBkZXNjcmliZWQgYXMgYW4gb3JhdG9yLjwvbm90ZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gUGVyaWNsZXMuIDwvdHJhbnNsYXRpb24+"
translation['3.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZXZlciBzaW5jZSB0aGlzIGJyZWVkIG9mCiAgICAgICAgICAgICAgICAgICAgb3JhdG9ycyBhcHBlYXJlZCB3aG8gcGx5IHlvdSB3aXRoIHN1Y2ggcXVlc3Rpb25zIGFzIOKAnFdoYXQgd291bGQgeW91CiAgICAgICAgICAgICAgICAgICAgbGlrZT8gV2hhdCBzaGFsbCBJIHByb3Bvc2U/IEhvdyBjYW4gSSBvYmxpZ2UgeW91P+KAnSB0aGUgaW50ZXJlc3RzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHN0YXRlIGhhdmUgYmVlbiBmcml0dGVyZWQgYXdheSBmb3IgYSBtb21lbnRhcnkgcG9wdWxhcml0eS4gVGhlIG5hdHVyYWwKICAgICAgICAgICAgICAgICAgICBjb25zZXF1ZW5jZXMgZm9sbG93LCBhbmQgdGhlIG9yYXRvcnMgcHJvZml0IGJ5IHlvdXIgZGlzZ3JhY2UuIDwvdHJhbnNsYXRpb24+"
translation['3.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgcmVmbGVjdCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgb24gd2hhdCBtaWdodCBiZSBuYW1lZCBhcyB0aGUgb3V0c3RhbmRpbmcgYWNoaWV2ZW1lbnRzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGRheXMgb2YgeW91ciBhbmNlc3RvcnMgYW5kIHRob3NlIG9mIHlvdXIgb3duIHRpbWUuIEkgd2lsbCBnaXZlIHlvdSBhCiAgICAgICAgICAgICAgICAgICAgc3VtbWFyeSBvZiBmYW1pbGlhciBmYWN0cywgZm9yIHlvdSBuZWVkIG5vdCBnbyBhYnJvYWQgZm9yIGV4YW1wbGVzIHRvIHRlYWNoIHlvdQogICAgICAgICAgICAgICAgICAgIGhvdyB0byB3aW4gc3VjY2Vzcy4gPC90cmFuc2xhdGlvbj4="
translation['3.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgeW91ciBhbmNlc3RvcnMsIHdob20KICAgICAgICAgICAgICAgICAgICB0aGVpciBvcmF0b3JzLCB1bmxpa2Ugb3VycyB0b2RheSwgZGlkIG5vdCBjYXJlc3Mgb3IgZmxhdHRlciwgZm9yIGZpdmUgYW5kIGZvcnR5CiAgICAgICAgICAgICAgICAgICAgICAgIHllYXJzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBpbnRlcnZhbCBiZXR3ZWVuIHRoZSBQZXJzaWFuIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBQZWxvcG9ubmVzaWFuIHdhcnMuPC9ub3RlPiBjb21tYW5kZWQgdGhlIHdpbGxpbmcgb2JlZGllbmNlIG9mIHRoZSBHcmVla3M7CiAgICAgICAgICAgICAgICAgICAgbW9yZSB0aGFuIHRlbiB0aG91c2FuZCB0YWxlbnRzIGRpZCB0aGV5IGFjY3VtdWxhdGUgaW4gb3VyIEFjcm9wb2xpczsgdGhlIHRoZW4KICAgICAgICAgICAgICAgICAgICBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QZXJkaWNjYXMgSUkuOyBhIHBhcmRvbmFibGUgZXhhZ2dlcmF0aW9uLjwvbm90ZT4gd2FzIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgc3ViamVjdCwgZXZlbiBhcyBhIGJhcmJhcmlhbiBvdWdodCB0byBiZSBzdWJqZWN0IHRvIEdyZWVrczsgbWFueSBob25vcmFibGUKICAgICAgICAgICAgICAgICAgICB0cm9waGllcyBmb3IgdmljdG9yeSBvbiBzZWEgYW5kIGxhbmQgZGlkIHRoZXkgZXJlY3QsIHRoZW1zZWx2ZXMgc2VydmluZyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaWVsZDsgYW5kIHRoZXkgYWxvbmUgb2YgbWFua2luZCBsZWZ0IGJlaGluZCB0aGVtIGJ5IHRoZWlyIGRlZWRzIGEgcmVub3duCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlciB0aGFuIGFsbCBkZXRyYWN0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIHdhcyB0aGVpcgogICAgICAgICAgICAgICAgICAgIHJhbmsgaW4gdGhlIHdvcmxkIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkhlbGxhczwvcGxhY2VOYW1lPjogd2hhdAogICAgICAgICAgICAgICAgICAgIG1hbm5lciBvZiBtZW4gdGhleSB3ZXJlIGF0IGhvbWUsIGluIHB1YmxpYyBvciBpbiBwcml2YXRlIGxpZmUsIGxvb2sgcm91bmQgeW91CiAgICAgICAgICAgICAgICAgICAgYW5kIHNlZS4gT3V0IG9mIHRoZSB3ZWFsdGggb2YgdGhlIHN0YXRlIHRoZXkgc2V0IHVwIGZvciBvdXIgZGVsaWdodCBzbyBtYW55IGZhaXIKICAgICAgICAgICAgICAgICAgICBidWlsZGluZ3MgYW5kIHRoaW5ncyBvZiBiZWF1dHksIHRlbXBsZXMgYW5kIG9mZmVyaW5ncyB0byB0aGUgZ29kcywgdGhhdCB3ZSB3aG8KICAgICAgICAgICAgICAgICAgICBjb21lIGFmdGVyIG11c3QgZGVzcGFpciBvZiBldmVyIHN1cnBhc3NpbmcgdGhlbTsgeWV0IGluIHByaXZhdGUgdGhleSB3ZXJlIHNvCiAgICAgICAgICAgICAgICAgICAgbW9kZXN0LCBzbyBjYXJlZnVsIHRvIG9iZXkgdGhlIHNwaXJpdCBvZiB0aGUgY29uc3RpdHV0aW9uLCA8L3RyYW5zbGF0aW9uPg=="
translation['3.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IHRoZSBob3VzZXMgb2YgdGhlaXIgZmFtb3VzIG1lbiwgb2YgQXJpc3RpZGVzIG9yCiAgICAgICAgICAgICAgICAgICAgb2YgTWlsdGlhZGVzLCBhcyBhbnkgb2YgeW91IGNhbiBzZWUgdGhhdCBrbm93cyB0aGVtLCBhcmUgbm90IGEgd2hpdCBtb3JlCiAgICAgICAgICAgICAgICAgICAgc3BsZW5kaWQgdGhhbiB0aG9zZSBvZiB0aGVpciBuZWlnaGJvcnMuIEZvciBzZWxmaXNoIGdyZWVkIGhhZCBubyBwbGFjZSBpbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHN0YXRlc21hbnNoaXAsIGJ1dCBlYWNoIHRob3VnaHQgaXQgaGlzIGR1dHkgdG8gZnVydGhlciB0aGUgY29tbW9uIHdlYWwuIEFuZCBzbwogICAgICAgICAgICAgICAgICAgIGJ5IHRoZWlyIGdvb2QgZmFpdGggdG93YXJkcyB0aGVpciBmZWxsb3cgR3JlZWtzLCB0aGVpciBwaWV0eSB0b3dhcmRzIHRoZSBnb2RzLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGVpciBlcXVhbGl0eSBhbW9uZyB0aGVtc2VsdmVzLCB0aGV5IGRlc2VydmVkIGFuZCB3b24gYSBncmVhdCBwcm9zcGVyaXR5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCB3YXMKICAgICAgICAgICAgICAgICAgICB0aGVpciBjb25kaXRpb24gaW4gdGhvc2UgZGF5cyB1bmRlciB0aGUgbGVhZGVycyBJIGhhdmUgbmFtZWQ7IGFuZCB3aGF0IGlzIG91cgogICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbiB0b2RheSwgdGhhbmtzIHRvIG91ciB3b3J0aHkgc3RhdGVzbWVuPyBJcyBpdCB0aGUgc2FtZSBvciBhbnl0aGluZyBsaWtlCiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWU/IFdoeSwgd2XigJRJIHBhc3Mgb3ZlciBtdWNoIHRoYXQgSSBtaWdodCBtZW50aW9uLCBidXQgeW91IGFsbAogICAgICAgICAgICAgICAgICAgIHNlZSB3aGF0IGEgY2xlYXIgZmllbGQgd2UgaGFkIGdvdCwgd2l0aCB0aGUgTGFjZWRhZW1vbmlhbnMgY3J1c2hlZCwgdGhlIFRoZWJhbnMKICAgICAgICAgICAgICAgICAgICBmdWxseSBvY2N1cGllZCwgYW5kIG5vIG90aGVyIGNpdHkgZml0IHRvIGRpc3B1dGUgdGhlIHN1cHJlbWFjeSB3aXRoIHVzLCB3aGlsZSB3ZQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IGhhdmUgYmVlbiBib3RoIHRoZSB2aW5kaWNhdG9ycyBvZiBvdXIgb3duIHJpZ2h0cyBhbmQgdGhlIHVtcGlyZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmlnaHRzIG9mIG90aGVyczsgPC90cmFuc2xhdGlvbj4="
translation['3.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgeWV0IHdlIGhhdmUgYmVlbiByb2JiZWQKICAgICAgICAgICAgICAgICAgICBvZiBvdXIgb3duIHNvaWwsIHdlIGhhdmUgd2FzdGVkIG9uIHVubmVjZXNzYXJ5IG9iamVjdHMgbW9yZSB0aGFuIGZpZnRlZW4gaHVuZHJlZAogICAgICAgICAgICAgICAgICAgIHRhbGVudHMsIG91ciBzdGF0ZXNtZW4gaW4gcGVhY2UgaGF2ZSBsb3N0IHVzIHRoZSBhbGxpZXMgd2UgZ2FpbmVkIGluIHdhciwgYW5kIHdlCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBwcm92aWRlZCBhIHRyYWluaW5nLWdyb3VuZCBmb3IgdGhpcyBmb3JtaWRhYmxlIHJpdmFsLiBJZiBub3QsIGxldCBzb21lb25lCiAgICAgICAgICAgICAgICAgICAgY29tZSBmb3J3YXJkIGFuZCB0ZWxsIG1lIHdobyBidXQgb3Vyc2VsdmVzIGhhcyBtYWRlIFBoaWxpcCBwb3dlcmZ1bC4gPC90cmFuc2xhdGlvbj4="
translation['3.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz7igJxCdXQs4oCdIHNheXMgYW4gb2JqZWN0b3IsCiAgICAgICAgICAgICAgICAgICAg4oCcaWYgb3VyIGZvcmVpZ24gcG9saWN5IGhhcyBmYWlsZWQsIHRoZXJlIGlzIGdyZWF0IGltcHJvdmVtZW50IGluCiAgICAgICAgICAgICAgICAgICAgZG9tZXN0aWMgYWZmYWlycy7igJ0gQW5kIHRvIHdoYXQgY2FuIHlvdSBwb2ludCBpbiBwcm9vZj8gVG8gdGhlIHdhbGxzIHdlCiAgICAgICAgICAgICAgICAgICAgYXJlIHdoaXRld2FzaGluZywgdGhlIHN0cmVldHMgd2UgYXJlIHBhdmluZywgdGhlIHdhdGVyLXdvcmtzLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFsZGVyZGFzaD8gTG9vayByYXRoZXIgYXQgdGhlIG1lbiB3aG9zZSBzdGF0ZXNtYW5zaGlwIGhhcyBwcm9kdWNlZCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHJlc3VsdHM7IHNvbWUgb2YgdGhlbSB3ZXJlIHBvb3IgYW5kIG5vdyBhcmUgcmljaCwgc29tZSB3ZXJlIG9ic2N1cmUgYW5kIG5vdyBhcmUKICAgICAgICAgICAgICAgICAgICBlbWluZW50LCBzb21lIGhhdmUgcmVhcmVkIHByaXZhdGUgaG91c2VzIG1vcmUgc3RhdGVseSB0aGFuIG91ciBwdWJsaWMgYnVpbGRpbmdzLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIHRoZSBsb3dlciB0aGUgZm9ydHVuZXMgb2YgdGhlIGNpdHkgaGF2ZSBzdW5rLCB0aGUgaGlnaGVyIGhhdmUgdGhlaXIKICAgICAgICAgICAgICAgICAgICBmb3J0dW5lcyBzb2FyZWQuIDwvdHJhbnNsYXRpb24+"
translation['3.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hhdCBpcyB0aGUgY2F1c2Ugb2YgYWxsIHRoaXMsIGFuZCB3aHksIHByYXksIGRpZCBldmVyeXRoaW5nIGdvIHdlbGwgdGhlbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgbm93IGdvZXMgYW1pc3M/IEJlY2F1c2UgdGhlbiB0aGUgcGVvcGxlLCBoYXZpbmcgdGhlIGNvdXJhZ2UgdG8gYWN0IGFuZCB0byBmaWdodCwKICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVkIHRoZSBwb2xpdGljaWFucyBhbmQgd2VyZSB0aGVtc2VsdmVzIHRoZSBkaXNwZW5zZXJzIG9mIGFsbCBmYXZvcnM7IHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3Qgd2VyZSB3ZWxsIGNvbnRlbnQgdG8gYWNjZXB0IGF0IHRoZSBwZW9wbGUncyBoYW5kIGhvbm9yIGFuZCBhdXRob3JpdHkgYW5kCiAgICAgICAgICAgICAgICAgICAgcmV3YXJkLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIG9uIHRoZSBjb250cmFyeSwgdGhlIHBvbGl0aWNpYW5zCiAgICAgICAgICAgICAgICAgICAgaG9sZCB0aGUgcHVyc2Utc3RyaW5ncyBhbmQgbWFuYWdlIGV2ZXJ5dGhpbmcsIHdoaWxlIHlvdSwgdGhlIHBlb3BsZSwgcm9iYmVkIG9mCiAgICAgICAgICAgICAgICAgICAgbmVydmUgYW5kIHNpbmV3LCBzdHJpcHBlZCBvZiB3ZWFsdGggYW5kIG9mIGFsbGllcywgaGF2ZSBzdW5rIHRvIHRoZSBsZXZlbCBvZgogICAgICAgICAgICAgICAgICAgIGxhY2tleXMgYW5kIGhhbmdlcnMtb24sIGNvbnRlbnQgaWYgdGhlIHBvbGl0aWNpYW5zIGdyYXRpZnkgeW91IHdpdGggYSBkb2xlIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgVGhlb3JpYyBGdW5kIG9yIGEgcHJvY2Vzc2lvbiBhdCB0aGUgQm/Dq2Ryb21pYSwgYW5kIHlvdXIgbWFubGluZXNzCiAgICAgICAgICAgICAgICAgICAgcmVhY2hlcyBpdHMgY2xpbWF4IHdoZW4geW91IGFkZCB5b3VyIHRoYW5rcyBmb3Igd2hhdCBpcyB5b3VyIG93bi4gVGhleSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbWV3ZWQgeW91IHVwIGluIHRoZSBjaXR5IGFuZCBlbnRpY2UgeW91IHdpdGggdGhlc2UgYmFpdHMsIHRoYXQgdGhleSBtYXkga2VlcCB5b3UKICAgICAgICAgICAgICAgICAgICB0YW1lIGFuZCBzdWJzZXJ2aWVudCB0byB0aGUgd2hpcC4gPC90cmFuc2xhdGlvbj4="
translation['3.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgY2Fubm90LAogICAgICAgICAgICAgICAgICAgIEkgc3VwcG9zZSwgaGF2ZSBhIHByb3VkIGFuZCBjaGl2YWxyb3VzIHNwaXJpdCwgaWYgeW91ciBjb25kdWN0IGlzIG1lYW4gYW5kCiAgICAgICAgICAgICAgICAgICAgcGFsdHJ5OyBmb3Igd2hhdGV2ZXIgYSBtYW4ncyBhY3Rpb25zIGFyZSwgc3VjaCBtdXN0IGJlIGhpcyBzcGlyaXQuIEJ5IG91ciBMYWR5LAogICAgICAgICAgICAgICAgICAgIEkgc2hvdWxkIG5vdCB3b25kZXIgaWYgSSBnb3Qgcm91Z2hlciB0cmVhdG1lbnQgZnJvbSB5b3UgZm9yIHBvaW50aW5nIG91dCB0aGVzZQogICAgICAgICAgICAgICAgICAgIGZhdWx0cyB0aGFuIHRoZSBtZW4gd2hvIGFyZSByZXNwb25zaWJsZSBmb3IgdGhlbS4gRm9yIHlvdSBkbyBub3QgYWxsb3cgbGliZXJ0eQogICAgICAgICAgICAgICAgICAgIG9mIHNwZWVjaCBvbiBldmVyeSBzdWJqZWN0LCBhbmQgaW5kZWVkIEkgYW0gc3VycHJpc2VkIHRoYXQgeW91IGhhdmUgYWxsb3dlZCBpdAogICAgICAgICAgICAgICAgICAgIG5vdy4gPC90cmFuc2xhdGlvbj4="
translation['3.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYsCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlLCBldmVuIGF0IHRoZSBlbGV2ZW50aCBob3VyLCB5b3UgY2FuIHNoYWtlIG9mZiB0aGVzZSBoYWJpdHMsIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbnNlbnQgdG8gZmlnaHQgYW5kIGFjdCBhcyBiZWNvbWVzIEF0aGVuaWFucyBhbmQgdG8gZGV2b3RlIHRoZSBhYnVuZGFudAogICAgICAgICAgICAgICAgICAgIHJlc291cmNlcyB0aGF0IHlvdSBoYXZlIGF0IGhvbWUgdG8gdGhlIGF0dGFpbm1lbnQgb2Ygc3VjY2VzcyBhYnJvYWQsIHBlcmhhcHMsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgcGVyaGFwcyB5b3UgbWF5IGdhaW4KICAgICAgICAgICAgICAgICAgICBzb21lIGltcG9ydGFudCBhbmQgdW5xdWFsaWZpZWQgYWR2YW50YWdlIGFuZCBtYXkgYmUgcXVpdCBvZiB0aGVzZSBwYWx0cnkKICAgICAgICAgICAgICAgICAgICBwZXJxdWlzaXRlcy4gTGlrZSB0aGUgZGlldCBwcmVzY3JpYmVkIGJ5IGRvY3RvcnMsIHdoaWNoIG5laXRoZXIgcmVzdG9yZXMgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RyZW5ndGggb2YgdGhlIHBhdGllbnQgbm9yIGFsbG93cyBoaW0gdG8gc3VjY3VtYiwgc28gdGhlc2UgZG9sZXMgdGhhdCB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgbm93IGRpc3RyaWJ1dGluZyBuZWl0aGVyIHN1ZmZpY2UgdG8gZW5zdXJlIHlvdXIgc2FmZXR5IG5vciBhbGxvdyB5b3UgdG8gcmVub3VuY2UKICAgICAgICAgICAgICAgICAgICB0aGVtIGFuZCB0cnkgc29tZXRoaW5nIGVsc2U7IHRoZXkgb25seSBjb25maXJtIGVhY2ggY2l0aXplbiBpbiBoaXMgYXBhdGh5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5Zb3Ugd2lsbCBhc2sgbWUgaWYgSSBtZWFuIHBheSBmb3IgbWlsaXRhcnkKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLiBOb3Qgb25seSB0aGF0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBidXQgYWxzbyB0aGUgaW1tZWRpYXRlIGFkb3B0aW9uIG9mIGEgdW5pZm9ybSBzeXN0ZW0sIHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCBlYWNoIGNpdGl6ZW4sIHJlY2VpdmluZyBoaXMgcXVvdGEgZnJvbSB0aGUgcHVibGljIGZ1bmRzLCBtYXkgZmlsbCBoaXMKICAgICAgICAgICAgICAgICAgICBwcm9wZXIgcGxhY2UgaW4gdGhlIHNlcnZpY2Ugb2YgdGhlIHN0YXRlLiBJZiBwZWFjZSBjYW4gYmUgcHJlc2VydmVkLCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGJldHRlciBvZmYgYXQgaG9tZSwgc2FmZSBmcm9tIHRlbXB0YXRpb25zIGludG8gd2hpY2ggd2FudCBtaWdodCBsZWFkIGhpbS4gSWYKICAgICAgICAgICAgICAgICAgICBzb21lIHN1Y2ggY29udGluZ2VuY3kgYXMgdGhlIHByZXNlbnQgYXJpc2VzLCB0aGVuIGl0IGlzIGJldHRlciBmb3IgaGltIHRvIHNlcnZlCiAgICAgICAgICAgICAgICAgICAgaGlzIGNvdW50cnkgaW4gcGVyc29uLCBhcyBpbmRlZWQgaGUgb3VnaHQsIHN1cHBvcnRlZCBieSB0aGVzZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9ucy4gSWYgYW55b25lIGlzIHRvbyBvbGQgdG8gZmlnaHQsIHRoZW4gYXMgb3ZlcnNlZXIgb3IgbWFuYWdlciBvZgogICAgICAgICAgICAgICAgICAgIHNvbWUgaW5kaXNwZW5zYWJsZSB3b3JrLCBsZXQgaGltIGJlIHBhaWQgb24gYW4gZXF1aXRhYmxlIHN5c3RlbSB0aGUgd2FnZXMgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIG5vdyByZWNlaXZlcyB3aXRob3V0IGJlbmVmaXQgdG8gdGhlIHN0YXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBhIHdvcmQsIHdpdGhvdXQgaW5jcmVhc2luZyBvciBsZXNzZW5pbmcgb3VyIGV4cGVuZGl0dXJlIGJ5IG1vcmUgdGhhbiBhCiAgICAgICAgICAgICAgICAgICAgdHJpZmxlLCBJIGNsYWltIHRvIGhhdmUgcmVtb3ZlZCBhbm9tYWxpZXMgYW5kIGludHJvZHVjZWQgb3JkZXIgaW50byB0aGUgc3RhdGUsCiAgICAgICAgICAgICAgICAgICAgZXN0YWJsaXNoaW5nIGEgdW5pZm9ybSBzeXN0ZW0gb2YgcGF5IGFuZCBvZiBzZXJ2aWNlLCB3aGV0aGVyIGluIHRoZSBmaWVsZCBvciBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBsYXctY291cnRzIG9yIHdoZXJldmVyIGVhY2ggbWFuIGZpbmRzIGEgdGFzayBzdWl0ZWQgdG8gaGlzIG93biBhZ2UgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIG5lZWRzIG9mIHRoZSBvY2Nhc2lvbi4gTmV2ZXIgaGF2ZSBJIHN1Z2dlc3RlZCB0aGF0IHdlIHNob3VsZCBnaXZlIHRoZQogICAgICAgICAgICAgICAgICAgIHdvcmtlcidzIHdhZ2VzIHRvIHRoZSBkcm9uZSwgb3IgdGhhdCB3ZSBzaG91bGQgb3Vyc2VsdmVzIHJlbWFpbiBpbmFjdGl2ZSwgaWRsZSwKICAgICAgICAgICAgICAgICAgICBhbmQgaGVscGxlc3MsIGFuZCBvbmx5IGxlYXJuIGJ5IHJlcG9ydCB0aGF0IFNvLWFuZC1zbydzIG1lcmNlbmFyaWVzIGhhdmUgd29uIGEKICAgICAgICAgICAgICAgICAgICB2aWN0b3J5LiBGb3IgdGhhdCBpcyB3aGF0IGhhcHBlbnMgbm93LiA8L3RyYW5zbGF0aW9uPg=="
translation['3.36'] = ""
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiB0aGUgcXVlc3Rpb24KICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdXMgd2VyZSBhIG5ldyBvbmUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIEkgc2hvdWxkIGhhdmUgd2FpdGVkIHVudGlsIG1vc3Qgb2YgdGhlIHJlZ3VsYXIgc3BlYWtlcnMKICAgICAgICAgICAgICAgICAgICBoYWQgZGVsaXZlcmVkIHRoZWlyIG9waW5pb25zLCBhbmQgaWYgc2F0aXNmaWVkIHdpdGggYW55IG9mIHRoZWlyIHByb3Bvc2FscywgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoYXZlIHJlbWFpbmVkIHNpbGVudCwgYnV0IGlmIG5vdCBzYXRpc2ZpZWQsIEkgc2hvdWxkIHRoZW4gaGF2ZSB0cmllZCB0bwogICAgICAgICAgICAgICAgICAgIGV4cHJlc3MgbXkgb3duIHZpZXdzLiBTaW5jZSwgaG93ZXZlciwgaXQgaXMgb3VyIGZvcnR1bmUgdG8gYmUgc3RpbGwgZGViYXRpbmcgYQogICAgICAgICAgICAgICAgICAgIHBvaW50IG9uIHdoaWNoIHRoZXkgaGF2ZSBvZnRlbiBzcG9rZW4gYmVmb3JlLCBJIGNhbiBzYWZlbHkgY2xhaW0geW91ciBpbmR1bGdlbmNlCiAgICAgICAgICAgICAgICAgICAgaWYgSSBhbSB0aGUgZmlyc3QgdG8gcmlzZSBhbmQgYWRkcmVzcyB5b3UuIEZvciBpZiBpbiB0aGUgcGFzdCB0aGVpciBhZHZpY2UgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBzb3VuZCwgdGhlcmUgd291bGQgYmUgbm8gbmVlZCBmb3IgZGVsaWJlcmF0aW9uIHRvZGF5LiA8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgaW4gdGhlIGZpcnN0IHBsYWNlLAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgdGhlcmUgaXMgbm8gbmVlZCB0byBkZXNwYWlyIG9mIG91ciBwcmVzZW50IHBvc2l0aW9uLCBob3dldmVyIGhvcGVsZXNzCiAgICAgICAgICAgICAgICAgICAgaXQgbWF5IHNlZW0uIEZvciB0aGF0IHdoaWNoIGlzIHdvcnN0IGluIHRoZSBkYXlzIHRoYXQgYXJlIHBhc3QgYW5kIGdvbmUgaXMganVzdAogICAgICAgICAgICAgICAgICAgIHdoYXQgYWZmb3JkcyB0aGUgYmVzdCBhc3N1cmFuY2UgZm9yIHRoZSBmdXR1cmUuIEFuZCB3aGF0IGlzIHRoYXQ/IEl0IGlzIHRoYXQKICAgICAgICAgICAgICAgICAgICB5b3VyIGFmZmFpcnMgYXJlIGluIHRoaXMgZXZpbCBwbGlnaHQganVzdCBiZWNhdXNlIHlvdSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdXR0ZXJseSBmYWlsIHRvIGRvIHlvdXIgZHV0eTsgc2luY2UKICAgICAgICAgICAgICAgICAgICBzdXJlbHksIHdlcmUgeW91IHNvIHBsYWNlZCBpbiBzcGl0ZSBvZiBldmVyeSBlZmZvcnQgb24geW91ciBwYXJ0LCBpdCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGhvcGVsZXNzIHRvIGxvb2sgZm9yIGltcHJvdmVtZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBuZXh0CiAgICAgICAgICAgICAgICAgICAgcGxhY2UsIGJlYXIgdGhpcyBpbiBtaW5kLiBTb21lIG9mIHlvdSBoYXZlIGJlZW4gdG9sZCwgb3RoZXJzIGtub3cgYW5kIHJlbWVtYmVyLAogICAgICAgICAgICAgICAgICAgIGhvdyBmb3JtaWRhYmxlIHRoZSBTcGFydGFucyB3ZXJlLCBub3QgbWFueSB5ZWFycyBhZ28sIGFuZCB5ZXQgaG93IGF0IHRoZSBjYWxsIG9mCiAgICAgICAgICAgICAgICAgICAgaG9ub3IgYW5kIGR1dHkgeW91IHBsYXllZCBhIHBhcnQgbm90IHVud29ydGh5IG9mIHlvdXIgY291bnRyeSwgYW5kIGVudGVyZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgbGlzdHMgYWdhaW5zdCB0aGVtIGluIGRlZmVuY2Ugb2YgeW91ciByaWdodHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSByZWZlcmVuY2UgaXMgcHJvYmFibHkgdG8gdGhlIGludmFzaW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4gYnkgQWdlc2lsYXVzIGluIDM3OC48L25vdGU+IEkgcmVtaW5kIHlvdSBvZiB0aGlzLAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgYmVjYXVzZSBJIHdhbnQgeW91IHRvIGtub3cgYW5kIHJlYWxpemUgdGhhdCwgYXMgbm8gZGFuZ2VyIGNhbiBhc3NhaWwKICAgICAgICAgICAgICAgICAgICB5b3Ugd2hpbGUgeW91IGFyZSBvbiB5b3VyIGd1YXJkLCBzbyBpZiB5b3UgYXJlIHJlbWlzcyBubyBzdWNjZXNzIGNhbiBhdHRlbmQgeW91LgogICAgICAgICAgICAgICAgICAgIExlYXJuIGEgbGVzc29uIGZyb20gdGhlIGZvcm1lciBzdHJlbmd0aCBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIHdoaWNoIHlvdQogICAgICAgICAgICAgICAgICAgIG1hc3RlcmVkIGJ5IHN0cmljdCBhdHRlbnRpb24gdG8geW91ciBhZmZhaXJzLCBhbmQgdGhlIHByZXNlbnQgYXJyb2dhbmNlIG9mIG91cgogICAgICAgICAgICAgICAgICAgIGVuZW15LCB3aGljaCBkaXNjb21wb3NlcyB1cyBiZWNhdXNlIHdlIGlnbm9yZSBldmVyeSBjYWxsIG9mIGR1dHkuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4gYnkgQWdlc2lsYXVzIGluIDM3OC48L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiBhbnlvbmUgaGVyZSwgQXRoZW5pYW5zLCBpcyBpbmNsaW5lZCB0byB0aGluawogICAgICAgICAgICAgICAgICAgIFBoaWxpcCB0b28gZm9ybWlkYWJsZSwgaGF2aW5nIHJlZ2FyZCB0byB0aGUgZXh0ZW50IG9mIGhpcyBleGlzdGluZyByZXNvdXJjZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gb3VyIGxvc3Mgb2YgYWxsIG91ciBzdHJvbmdob2xkcywgaGUgaXMgaW5kZWVkIHJpZ2h0LCB5ZXQgaGUgbXVzdCByZWZsZWN0IHRoYXQKICAgICAgICAgICAgICAgICAgICB3ZSB0b28sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIG9uY2UgaGVsZAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFB5ZG5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQeWRuYSI+UHlkbmE8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZXRob25lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZXRob25lIj5NZXRob25lPC9wbGFjZU5hbWU+IGFuZCBoYWQgaW4gb3VyIG93biBoYW5kcyBhbGwgdGhlIHN1cnJvdW5kaW5nIHRlcnJpdG9yeSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBtYW55IG9mIHRoZSBuYXRpdmUgdHJpYmVzIG5vdyBpbiBoaXMgc2VydmljZSB3ZXJlIHRoZW4gZnJlZSBhbmQKICAgICAgICAgICAgICAgICAgICBpbmRlcGVuZGVudCBhbmQgd2VyZSBpbmRlZWQgbW9yZSBpbmNsaW5lZCB0byBzaWRlIHdpdGggdXMgdGhhbiB3aXRoIFBoaWxpcC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPklmLCB0aGVyZWZvcmUsIFBoaWxpcCBoYWQgdGhlbiBjb21lIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmNsdXNpb24gdGhhdCBpdCB3YXMgYSBkaWZmaWN1bHQgdGFzayB0byBmaWdodCB0aGUgQXRoZW5pYW5zIHdoaWxlIHRoZXkgaGVsZAogICAgICAgICAgICAgICAgICAgIHN1Y2ggc3Ryb25nIG91dHBvc3RzIGluIGhpcyBvd24gdGVycml0b3J5IGFuZCBoZSB3YXMgZGVzdGl0dXRlIG9mIGFsbGllcywgaW4KICAgICAgICAgICAgICAgICAgICB0aGF0IGNhc2UgaGUgd291bGQgbmV2ZXIgaGF2ZSBnYWluZWQgaGlzIHByZXNlbnQgc3VjY2Vzc2VzLCBuZXZlciBhY3F1aXJlZCBoaXMKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IHBvd2VyLiBCdXQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIHNhdyBjbGVhcmx5IHRoYXQgYWxsIHRoZXNlIG91dHBvc3RzIHdlcmUgYnV0IHRoZSBvcGVuIHByaXplcyBvZiB3YXIsIHRoYXQKICAgICAgICAgICAgICAgICAgICBieSBuYXR1cmFsIHJpZ2h0IHRoZSBwcm9wZXJ0eSBvZiB0aGUgYWJzZW50IGJlbG9uZ3MgdG8gdGhvc2Ugd2hvIGFyZSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBzcG90LCBhbmQgdGhlIHByb3BlcnR5IG9mIHRoZSBjYXJlbGVzcyB0byB0aG9zZSB3aG8gY2FuIGZhY2UgdG9pbCBhbmQgZGFuZ2VyLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBwcmVjaXNlbHkgYnkgYWN0aW5nIG9uIHRoaXMKICAgICAgICAgICAgICAgICAgICBwcmluY2lwbGUgdGhhdCBoZSBoYXMgbWFzdGVyZWQgYW5kIG5vdyBob2xkcyB0aGVtIGFsbC4gU29tZSBoZSBoYXMgc2VpemVkIGJ5CiAgICAgICAgICAgICAgICAgICAgcmlnaHQgb2YgYXJtcywgb3RoZXJzIGhlIGhhcyB3b24gYnkgYWxsaWFuY2UgYW5kIGZyaWVuZHNoaXAuIEZvciBpbmRlZWQgYWxsaWFuY2UKICAgICAgICAgICAgICAgICAgICBhbmQgcmVzcGVjdCBhcmUgd2lsbGluZ2x5IG9mZmVyZWQgYnkgYWxsIG1lbiB0byB0aG9zZSB3aG9tIHRoZXkgc2VlIHJlYWR5IGFuZAogICAgICAgICAgICAgICAgICAgIHByb21wdCB0byB0YWtlIGFjdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['4.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5b3UgdG9vLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpZiB5b3UgYXJlIHdpbGxpbmcgdG8KICAgICAgICAgICAgICAgICAgICBhZG9wdCB0aGlzIHByaW5jaXBsZSwgbm93IGlmIG5ldmVyIGJlZm9yZSwgaWYgZWFjaCBjaXRpemVuIGlzIHJlYWR5IHRvIHRocm93IG9mZgogICAgICAgICAgICAgICAgICAgIGhpcyBkaWZmaWRlbmNlIGFuZCBzZXJ2ZSB0aGUgc3RhdGUgYXMgaGUgb3VnaHQgYW5kIGFzIGhlIGJlc3QgbWF5LCB0aGUgcmljaCBtYW4KICAgICAgICAgICAgICAgICAgICBwYXlpbmcsIHRoZSBzdHJvbmcgbWFuIGZpZ2h0aW5nLCBpZiwgYnJpZWZseSBhbmQgcGxhaW5seSwgeW91IHdpbGwgY29uc2VudCB0bwogICAgICAgICAgICAgICAgICAgIGJlY29tZSB5b3VyIG93biBtYXN0ZXJzLCBhbmQgaWYgZWFjaCBtYW4gd2lsbCBjZWFzZSB0byBleHBlY3QgdGhhdCwgd2hpbGUgaGUKICAgICAgICAgICAgICAgICAgICBkb2VzIG5vdGhpbmcgaGltc2VsZiwgaGlzIG5laWdoYm9yIHdpbGwgZG8gZXZlcnl0aGluZyBmb3IgaGltLCB0aGVuLCBHb2QKICAgICAgICAgICAgICAgICAgICB3aWxsaW5nLCB5b3Ugd2lsbCByZWNvdmVyIHlvdXIgb3duLCB5b3Ugd2lsbCByZXN0b3JlIHdoYXQgaGFzIGJlZW4gZnJpdHRlcmVkCiAgICAgICAgICAgICAgICAgICAgYXdheSwgYW5kIHlvdSB3aWxsIHR1cm4gdGhlIHRhYmxlcyB1cG9uIFBoaWxpcC4gPC90cmFuc2xhdGlvbj4="
translation['4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkRvIG5vdCBiZWxpZXZlIHRoYXQgaGlzIHByZXNlbnQgcG93ZXIgaXMgZml4ZWQgYW5kIHVuY2hhbmdlYWJsZSBsaWtlIHRoYXQgb2YgYQogICAgICAgICAgICAgICAgICAgIGdvZC4gTm8sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT47IGhlIGlzIGEgbWFyawogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgaGF0cmVkIGFuZCBmZWFyIGFuZCBlbnZ5IGV2ZW4gb2YgdGhvc2Ugd2hvIG5vdyBzZWVtIGRldm90ZWQgdG8gaGltLiBPbmUKICAgICAgICAgICAgICAgICAgICBtdXN0IGFzc3VtZSB0aGF0IGV2ZW4gaGlzIGFkaGVyZW50cyBhcmUgc3ViamVjdCB0byB0aGUgc2FtZSBwYXNzaW9ucyBhcyBhbnkKICAgICAgICAgICAgICAgICAgICBvdGhlciBtZW4uIEF0IHByZXNlbnQsIGhvd2V2ZXIsIGFsbCB0aGVzZSBmZWVsaW5ncyBhcmUgcmVwcmVzc2VkIGFuZCBoYXZlIG5vCiAgICAgICAgICAgICAgICAgICAgb3V0bGV0LCB0aGFua3MgdG8geW91ciBpbmRvbGVuY2UgYW5kIGFwYXRoeSwgd2hpY2ggSSB1cmdlIHlvdSB0byB0aHJvdyBvZmYgYXQKICAgICAgICAgICAgICAgICAgICBvbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkZvciBvYnNlcnZlLCBBdGhlbmlhbnMsIHRoZSBoZWlnaHQgdG8KICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGUgZmVsbG93J3MgaW5zb2xlbmNlIGhhcyBzb2FyZWQ7IGhlIGxlYXZlcyB5b3Ugbm8gY2hvaWNlIG9mIGFjdGlvbiBvcgogICAgICAgICAgICAgICAgICAgIGluYWN0aW9uOyBoZSBibHVzdGVycyBhbmQgdGFsa3MgYmlnLCBhY2NvcmRpbmcgdG8gYWxsIGFjY291bnRzOyBoZSBjYW5ub3QgcmVzdAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgd2l0aCB3aGF0IGhlIGhhcyBjb25xdWVyZWQ7IGhlIGlzIGFsd2F5cyB0YWtpbmcgaW4gbW9yZSwgZXZlcnl3aGVyZQogICAgICAgICAgICAgICAgICAgIGNhc3RpbmcgaGlzIG5ldCByb3VuZCB1cywgd2hpbGUgd2Ugc2l0IGlkbGUgYW5kIGRvIG5vdGhpbmcuIDwvdHJhbnNsYXRpb24+"
translation['4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBBdGhlbmlhbnMsIHdpbGwgeW91IHRha2UgdGhlIG5lY2Vzc2FyeSBhY3Rpb24/CiAgICAgICAgICAgICAgICAgICAgV2hhdCBhcmUgeW91IHdhaXRpbmcgZm9yPyBVbnRpbCB5b3UgYXJlIGNvbXBlbGxlZCwgSSBwcmVzdW1lLiBCdXQgd2hhdCBhcmUgd2UgdG8KICAgICAgICAgICAgICAgICAgICB0aGluayBvZiB3aGF0IGlzIGhhcHBlbmluZyBub3c/IEZvciBteSBvd24gcGFydCBJIHRoaW5rIHRoYXQgZm9yIGEgZnJlZSBwZW9wbGUKICAgICAgICAgICAgICAgICAgICB0aGVyZSBjYW4gYmUgbm8gZ3JlYXRlciBjb21wdWxzaW9uIHRoYW4gc2hhbWUgZm9yIHRoZWlyIHBvc2l0aW9uLiBPciB0ZWxsIG1lLAogICAgICAgICAgICAgICAgICAgIGFyZSB5b3UgY29udGVudCB0byBydW4gcm91bmQgYW5kIGFzayBvbmUgYW5vdGhlciwg4oCcSXMgdGhlcmUgYW55IG5ld3MKICAgICAgICAgICAgICAgICAgICB0b2RheT/igJ0gQ291bGQgdGhlcmUgYmUgYW55IG5ld3MgbW9yZSBzdGFydGxpbmcgdGhhbiB0aGF0IGEgTWFjZWRvbmlhbgogICAgICAgICAgICAgICAgICAgIGlzIHRyaXVtcGhpbmcgb3ZlciBBdGhlbmlhbnMgYW5kIHNldHRsaW5nIHRoZSBkZXN0aW55IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkhlbGxhczwvcGxhY2VOYW1lPj8gPC90cmFuc2xhdGlvbj4="
translation['4.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz7igJxJcyBQaGlsaXAgZGVhZD/igJ0geW91IGFzay4g4oCcTm8sIGluZGVlZDsgYnV0IGhlCiAgICAgICAgICAgICAgICAgICAgaXMgaWxsLuKAnSBBbmQgd2hhdCBpcyB0aGF0IHRvIHlvdT8gRXZlbiBpZiBzb21ldGhpbmcgaGFwcGVucyB0byBoaW0sCiAgICAgICAgICAgICAgICAgICAgeW91IHdpbGwgc29vbiByYWlzZSB1cCBhIHNlY29uZCBQaGlsaXAsIGlmIHRoYXQgaXMgdGhlIHdheSB5b3UgYXR0ZW5kIHRvIHlvdXIKICAgICAgICAgICAgICAgICAgICBhZmZhaXJzOyBmb3IgZXZlbiB0aGlzIFBoaWxpcCBoYXMgbm90IGdyb3duIGdyZWF0IHRocm91Z2ggaGlzIG93biB1bmFpZGVkCiAgICAgICAgICAgICAgICAgICAgc3RyZW5ndGggc28gbXVjaCBhcyB0aHJvdWdoIG91ciBjYXJlbGVzc25lc3MuIDwvdHJhbnNsYXRpb24+"
translation['4.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IgaXMgdGhpcyBhbGwuIElmIGFueXRoaW5nIGhhcHBlbmVkIHRvIGhpbSwgb3IgaWYgRm9ydHVuZSwgd2hpY2ggYWx3YXlzCiAgICAgICAgICAgICAgICAgICAgY2FyZXMgZm9yIHVzIGJldHRlciB0aGFuIHdlIGNhcmUgZm9yIG91cnNlbHZlcywgc2hvdWxkIGJyaW5nIHRoYXQgcmVzdWx0IGFib3V0LAogICAgICAgICAgICAgICAgICAgIHJlbWVtYmVyIHRoYXQgeW91IG11c3QgYmUgb24gdGhlIHNwb3QgaWYgeW91IHdhbnQgdG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCBjb25mdXNpb24gYW5kIHRvIGNvbnRyb2wgdGhlIHNpdHVhdGlvbiBhdCB5b3VyIHBsZWFzdXJlOyBidXQgaW4geW91cgogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgY29uZGl0aW9uIHlvdSB3b3VsZCBiZSB1bmFibGUsIGV2ZW4gaWYgdGhlIG9wcG9ydHVuaXR5IG9mZmVyZWQsIHRvIHRha2UKICAgICAgICAgICAgICAgICAgICBvdmVyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiwgaGF2aW5nIG5laXRoZXIKICAgICAgICAgICAgICAgICAgICBhIGZvcmNlIG5vciBhIHBvbGljeSByZWFkeSB0byBoYW5kLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5MaXQuCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnGJlaW5nIGN1dCBvZmYgW2Zyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+XSBib3RoIGluIGZvcmNlcyBhbmQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnMs4oCdIGEgdmlnb3JvdXMgYnV0IHVudHJhbnNsYXRhYmxlIHBocmFzZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+XSBib3RoIGluIGZvcmNlcyBhbmQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnMs4oCdIGEgdmlnb3JvdXMgYnV0IHVudHJhbnNsYXRhYmxlIHBocmFzZS48L3RyYW5zbGF0aW9uPg=="
translation['4.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgYXNzdW1pbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBhcmUgdGhvcm91Z2hseSBjb252aW5jZWQgdGhhdCB5b3UgbXVzdCBhbGwgYmUgcmVhZHkgYW5kIHdpbGxpbmcgdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIHRoaXMgbmVjZXNzYXJ5IGVmZm9ydCwgSSBzYXkgbm8gbW9yZSBvbiB0aGF0IHBvaW50LiBCdXQgYXMgdG8gdGhlIG5hdHVyZSBhbmQKICAgICAgICAgICAgICAgICAgICBzaXplIG9mIHRoZSBmb3JjZSB3aGljaCBJIHRoaW5rIGFkZXF1YXRlIHRvIHJlbGlldmUgdGhlIHNpdHVhdGlvbiwgdGhlIG1lYW5zIG9mCiAgICAgICAgICAgICAgICAgICAgZGVmcmF5aW5nIHRoZSBjb3N0LCBhbmQgdGhlIGJlc3QgYW5kIHNwZWVkaWVzdCBtZXRob2Qgb2YgcHJvdmlkaW5nIGZvciBpdHMKICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnQsIEkgc2hhbGwgbm93IGVuZGVhdm9yIHRvIHN0YXRlIG15IHZpZXdzLCBtYWtpbmcganVzdCB0aGlzIGFwcGVhbCB0bwogICAgICAgICAgICAgICAgICAgIHlvdSwgQXRoZW5pYW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5XYWl0IHRpbGwgeW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5nIGJlZm9yZSB5b3UgcGFzcyBqdWRnZW1lbnQuIERvIG5vdCBiZSBwcmVtYXR1cmU7IGFuZCBldmVuIGlmIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIG91dHNldCBJIHNlZW0gdG8gYmUgc3VnZ2VzdGluZyBhIG5vdmVsIGtpbmQgb2YgZXhwZWRpdGlvbmFyeSBmb3JjZSwgZG8gbm90CiAgICAgICAgICAgICAgICAgICAgaW1hZ2luZSB0aGF0IEkgYW0gdHJ5aW5nIHRvIHBvc3Rwb25lIG91ciBvcGVyYXRpb25zLiBJdCBpcyBub3QgdGhvc2Ugd2hvIGNyeQogICAgICAgICAgICAgICAgICAgIOKAnGF0IG9uY2XigJ0gb3Ig4oCcdG9kYXnigJ0gdGhhdCByZWFsbHkgc3BlYWsKICAgICAgICAgICAgICAgICAgICB0byB0aGUgcHVycG9zZSwgZm9yIG5vIGRpc3BhdGNoIG9mIGZvcmNlcyBub3cgY291bGQgcHJldmVudCB3aGF0IGhhcyBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgaGFwcGVuZWQ7IDwvdHJhbnNsYXRpb24+"
translation['4.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgaXQgaXMgdGhlIG1hbiB3aG8gY2FuIGluZGljYXRlCiAgICAgICAgICAgICAgICAgICAgdGhlIG5hdHVyZSwgdGhlIHNpemUsIGFuZCB0aGUgc291cmNlIG9mIHRoZSBleHBlZGl0aW9uIHRoYXQgd2lsbCBiZSBhYmxlIHRvIGtlZXAKICAgICAgICAgICAgICAgICAgICB0aGUgZmllbGQgdW50aWwgd2UgZWl0aGVyIGRlZmVhdCB0aGUgZW5lbXkgb3IgY29uc2VudCB0byBhIHRlcm1pbmF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgaG9zdGlsaXRpZXM7IGZvciB0aGF0IGlzIGhvdyB3ZSBzaGFsbCBhdm9pZCB0cm91YmxlIGluIHRoZSBmdXR1cmUuIE5vdyBJIGJlbGlldmUKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgY2FuIGluZGljYXRlIHRoaXMsIHdpdGhvdXQgcHJlanVkaWNlIHRvIGFueW9uZSBlbHNlJ3MgcHJvcG9zYWwuIFRoYXQgaXMgYQogICAgICAgICAgICAgICAgICAgIGJvbGQgcHJvbWlzZSwgYnV0IGl0IHdpbGwgc29vbiBiZSBwdXQgdG8gYSBwcmFjdGljYWwgdGVzdCwgYW5kIHlvdSBzaGFsbCBiZSBteQogICAgICAgICAgICAgICAgICAgIGp1ZGdlcy4gPC90cmFuc2xhdGlvbj4="
translation['4.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rmlyc3QKICAgICAgICAgICAgICAgICAgICB0aGVuLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBJIHByb3Bvc2UgdG8KICAgICAgICAgICAgICAgICAgICBlcXVpcCBmaWZ0eSB3YXItZ2FsbGV5czsgbmV4dCB5b3UgbXVzdCBtYWtlIHVwIHlvdXIgbWluZHMgdG8gZW1iYXJrIGFuZCBzYWlsIGluCiAgICAgICAgICAgICAgICAgICAgdGhlbSB5b3Vyc2VsdmVzLCBpZiBuZWNlc3NhcnkuIEZ1cnRoZXIgSSByZWNvbW1lbmQgdGhlIHByb3Zpc2lvbiBvZiB0cmFuc3BvcnRzCiAgICAgICAgICAgICAgICAgICAgYW5kIG90aGVyIHZlc3NlbHMsIHN1ZmZpY2llbnQgZm9yIHRoZSBjb252ZXlhbmNlIG9mIGhhbGYgb3VyIGNhdmFscnkuIDwvdHJhbnNsYXRpb24+"
translation['4.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhpcyBpcyBhIG5lY2Vzc2FyeSBwcm92aXNpb24gYWdhaW5zdCBQaGlsaXAncwogICAgICAgICAgICAgICAgICAgIHN1ZGRlbiByYWlkcyBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiwgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3Mjg1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcyODUiPkNoZXJzb25lc2U8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPiwgb3Igd2hlcmUgaGUgd2lsbC4gWW91IG11c3QgcHJlc2VudCB0byBoaXMgbWluZCB0aGUKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9uIHRoYXQgeW91IG1heSBwb3NzaWJseSBzaGFrZSBvZmYgeW91ciBleGNlc3NpdmUgYXBhdGh5IGFuZCBzdHJpa2UKICAgICAgICAgICAgICAgICAgICBvdXQgYXMgeW91IGRpZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4sIGFuZCBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB0aGF0LCBhcyB3ZSBhcmUgdG9sZCwgYXQgSGFsaWFydHVzLCBhbmQgcXVpdGUgcmVjZW50bHkgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgQXRoZW5pYW5zIHNlbnQgYSBmb3JjZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gaW4gMzU3IO+8iGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDEuOCIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS44PC9iaWJsPu+8iS4gVGhleSBoZWxwZWQgdGhlIFRoZWJhbnMgdG8gZGVmZWF0IEx5c2FuZGVyIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIEhhbGlhcnR1cyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgzIj5Cb2VvdGlhPC9wbGFjZU5hbWU+IGluIDM5NS4gSW4KICAgICAgICAgICAgICAgICAgICAgICAgMzUyLCB3aGVuIFBoaWxpcCB0cmllZCB0byBtYXJjaCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTkiPlRoZXNzYWx5PC9wbGFjZU5hbWU+IGFnYWluc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDQwMDM5NjMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNDAwMzk2MyI+UGhvY2lzPC9wbGFjZU5hbWU+LCBoZSB3YXMgY2hlY2tlZCBieSB0aGUgZGlzcGF0Y2ggb2YgYW4gQXRoZW5pYW4gZmxlZXQKICAgICAgICAgICAgICAgICAgICAgICAgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gaW4gMzU3IO+8iGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDEuOCIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS44PC9iaWJsPu+8iS4gVGhleSBoZWxwZWQgdGhlIFRoZWJhbnMgdG8gZGVmZWF0IEx5c2FuZGVyIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIEhhbGlhcnR1cyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgzIj5Cb2VvdGlhPC9wbGFjZU5hbWU+IGluIDM5NS4gSW4KICAgICAgICAgICAgICAgICAgICAgICAgMzUyLCB3aGVuIFBoaWxpcCB0cmllZCB0byBtYXJjaCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTkiPlRoZXNzYWx5PC9wbGFjZU5hbWU+IGFnYWluc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDQwMDM5NjMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNDAwMzk2MyI+UGhvY2lzPC9wbGFjZU5hbWU+LCBoZSB3YXMgY2hlY2tlZCBieSB0aGUgZGlzcGF0Y2ggb2YgYW4gQXRoZW5pYW4gZmxlZXQKICAgICAgICAgICAgICAgICAgICAgICAgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+LjwvdHJhbnNsYXRpb24+"
translation['4.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0LCBldmVuIGlmIHlvdSBzaG91bGQgbm90IGFjdCBhcyBJLAogICAgICAgICAgICAgICAgICAgIHBlcnNvbmFsbHksIHRoaW5rIHlvdSBvdWdodCwgaXMgbm90IGFuIGFsdG9nZXRoZXIgdHJpdmlhbCBtYXR0ZXI7IGZvciBpdHMKICAgICAgICAgICAgICAgICAgICBwdXJwb3NlIGlzIHRoYXQgaGUgbWF5IGVpdGhlciBob2xkIGhpcyBoYW5kIHRocm91Z2ggZmVhciwga25vd2luZyB0aGF0IHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgYWxlcnTigJRoZSB3aWxsIGtub3cgaXQgc3VyZSBlbm91Z2gsIGZvciB0aGVyZSBhcmUgc29tZSBvbiBvdXIKICAgICAgICAgICAgICAgICAgICBzaWRlLCB5ZXMsIHRvbyBtYW55LCB3aG8gcmVwb3J0IGV2ZXJ5dGhpbmcgdG8gaGlt4oCUb3IgdGhhdCBoZSBtYXkKICAgICAgICAgICAgICAgICAgICBvdmVybG9vayBpdCBhbmQgc28gYmUgdGFrZW4gb2ZmIGhpcyBndWFyZCwgcHJvdmlkZWQgdGhlcmUgaXMgbm90aGluZyB0byBoaW5kZXIKICAgICAgICAgICAgICAgICAgICB5b3UgZnJvbSBzYWlsaW5nIGFnYWluc3QgaGlzIGNvdW50cnksIGlmIGhlIGdpdmVzIHlvdSB0aGUgY2hhbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoLCBpbiBteSBvcGluaW9uLCBhcmUgdGhlIHJlc29sdXRpb25zIHdoaWNoIHlvdQogICAgICAgICAgICAgICAgICAgIG91Z2h0IHRvIGFkb3B0LCBhbmQgdGhlIGZvcmNlIHdoaWNoIG11c3QgYmUgZXF1aXBwZWQsIGF0IG9uY2UuIEJ1dCBpbiBhZGRpdGlvbgogICAgICAgICAgICAgICAgICAgIHRvIHRoaXMsIEF0aGVuaWFucywgSSBwcm9wb3NlIHRoYXQgeW91IHNob3VsZCBnZXQgcmVhZHkgYSBjb3JwcyB0byBjYXJyeSBvbiBhCiAgICAgICAgICAgICAgICAgICAgY29udGludW91cyB3YXIgb2YgYW5ub3lhbmNlIGFnYWluc3QgUGhpbGlwLiBOb3QgYW4gaW1wb3NpbmcgYXJteeKAlG9uCiAgICAgICAgICAgICAgICAgICAgcGFwZXLigJRvZiB0ZW4gb3IgdHdlbnR5IHRob3VzYW5kIG1lcmNlbmFyaWVzISBJdCBzaGFsbCBiZSBhIHJlYWwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiBjb250aW5nZW50LCBhbmQgd2hldGhlciB5b3UgYXBwb2ludCBvbmUgZ2VuZXJhbCBvciBtb3JlLCB3aGV0aGVyIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgdGhpcyBtYW4gb3IgdGhhdCBvciB0aGUgb3RoZXIsIGhpbSBpdCBzaGFsbCBzdHJpY3RseSBmb2xsb3cgYW5kIG9iZXkuIEkgYWxzbwogICAgICAgICAgICAgICAgICAgIHVyZ2UgeW91IHRvIHByb3ZpZGUgZm9yIGl0cyBtYWludGVuYW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['4.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICB3aGF0IHdpbGwgdGhpcyBmb3JjZSBiZSwgYW5kIGhvdyBsYXJnZT8gSG93IHdpbGwgaXQgYmUgbWFpbnRhaW5lZCwgYW5kIGhvdyBmYXIKICAgICAgICAgICAgICAgICAgICB3aWxsIGl0IGNvbnNlbnQgdG8gZWZmZWN0IGl0cyBwdXJwb3NlPyBJIHdpbGwgdGVsbCB5b3UsIGRlc2NyaWJpbmcgZWFjaCBkZXRhaWwKICAgICAgICAgICAgICAgICAgICBzZXBhcmF0ZWx5LiBPZiBtZXJjZW5hcmllcyBJIHByb3Bvc2XigJRhbmQgYmV3YXJlIG9mIHRoZSBtaXN0YWtlIHRoYXQKICAgICAgICAgICAgICAgICAgICBoYXMgc28gb2Z0ZW4gdGh3YXJ0ZWQgeW91ciBlZmZvcnRzLiBUaGlua2luZyB0aGF0IHRoZSB1dG1vc3QgaXMgdG9vIGxpdHRsZSBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgb2NjYXNpb24sIHlvdSBjaG9vc2UgdGhlIGJpZ2dlc3Qgc2NoZW1lIGluIHlvdXIgcmVzb2x1dGlvbnMsIGJ1dCB3aGVuIGl0CiAgICAgICAgICAgICAgICAgICAgY29tZXMgdG8gcGVyZm9ybWFuY2UsIHlvdSBmYWlsIHRvIHJlYWxpemUgZXZlbiB0aGUgc21hbGxlc3QuIFlvdSBzaG91bGQgcmF0aGVyCiAgICAgICAgICAgICAgICAgICAgYWN0IGFuZCBwcm92aWRlIG9uIGEgc21hbGwgc2NhbGUsIGFkZGluZyBtb3JlIGlmIHRoaXMgcHJvdmVzIGluc3VmZmljaWVudC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBJIHByb3Bvc2UgdGhhdCB0aGUgd2hvbGUgZm9yY2Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgY29uc2lzdCBvZiB0d28gdGhvdXNhbmQgbWVuLCBidXQgb2YgdGhlc2UgZml2ZSBodW5kcmVkIG11c3QgYmUgQXRoZW5pYW5zLCBjaG9zZW4KICAgICAgICAgICAgICAgICAgICBmcm9tIGFueSBzdWl0YWJsZSBhZ2UgYW5kIHNlcnZpbmcgaW4gcmVsYXlzIGZvciBhIHNwZWNpZmllZCBwZXJpb2TigJRub3QKICAgICAgICAgICAgICAgICAgICBhIGxvbmcgb25lLCBidXQganVzdCBzbyBsb25nIGFzIHNlZW1zIGFkdmlzYWJsZTsgdGhlIHJlc3Qgc2hvdWxkIGJlIG1lcmNlbmFyaWVzLgogICAgICAgICAgICAgICAgICAgIEF0dGFjaGVkIHRvIHRoZW0gd2lsbCBiZSB0d28gaHVuZHJlZCBjYXZhbHJ5LCBmaWZ0eSBhdCBsZWFzdCBvZiB0aGVtIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBzZXJ2aW5nIG9uIHRoZSBzYW1lIHRlcm1zIGFzIHRoZSBpbmZhbnRyeS4gVGhlcmUgd2lsbCBhbHNvIGJlIGNhdmFscnkKICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRzIHByb3ZpZGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5TbyBmYXIsIHNvIGdvb2Q7IGFuZCB3aGF0CiAgICAgICAgICAgICAgICAgICAgYmVzaWRlcz8gVGVuIGZhc3Qtc2FpbGluZyB3YXItZ2FsbGV5cy4gU2luY2UgUGhpbGlwIGhhcyBhIGZsZWV0LCB3ZSBtdXN0IGhhdmUKICAgICAgICAgICAgICAgICAgICBmYXN0IHZlc3NlbHMgaWYgb3VyIGZvcmNlIGlzIHRvIHNhaWwgaW4gc2FmZXR5LiBOb3cgaG93IGlzIHRoaXMgYXJteSB0byBiZQogICAgICAgICAgICAgICAgICAgIG1haW50YWluZWQ/IFRoYXQgYWxzbyBJIHdpbGwgZXhwbGFpbiBmdWxseSwgd2hlbiBJIGhhdmUgdG9sZCB5b3Ugd2h5IEkgdGhpbmsgc28KICAgICAgICAgICAgICAgICAgICBzbWFsbCBhIGZvcmNlIHN1ZmZpY2llbnQsIGFuZCB3aHkgSSBpbnNpc3QgdGhhdCB0aG9zZSBzZXJ2aW5nIHNoYWxsIGJlIGNpdGl6ZW5zLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBuYW1lIGEKICAgICAgICAgICAgICAgICAgICBmb3JjZSBvZiB0aGlzIHNpemUsIEF0aGVuaWFucywgYmVjYXVzZSBpdCBpcyBub3QgaW4gb3VyIHBvd2VyIG5vdyB0byBwcm92aWRlIG9uZQogICAgICAgICAgICAgICAgICAgIGZpdCB0byBtZWV0IGhpbSBpbiBwaXRjaGVkIGJhdHRsZTogd2UgbXVzdCBhZG9wdCBndWVyaWxsYSB0YWN0aWNzIHRvIHN0YXJ0IHdpdGguCiAgICAgICAgICAgICAgICAgICAgVGhlIGZvcmNlIG11c3QgdGhlcmVmb3JlIGJlIG5laXRoZXIgdW53aWVsZHnigJRmb3Igd2UgY2Fubm90IGFmZm9yZCB0aGUKICAgICAgICAgICAgICAgICAgICBwYXkgYW5kIG1haW50ZW5hbmNl4oCUbm9yIGFsdG9nZXRoZXIgaW5zaWduaWZpY2FudC4gPC90cmFuc2xhdGlvbj4="
translation['4.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5NeSByZWFzb25zIGZvciBpbnNpc3Rpbmcgb24gdGhlIHByZXNlbmNlIG9mIGNpdGl6ZW5zCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGV4cGVkaXRpb24gYXJlIHRoZXNlLiBJIGFtIHRvbGQgdGhhdCBvbiBhIHByZXZpb3VzIG9jY2FzaW9uIHRoZSBzdGF0ZQogICAgICAgICAgICAgICAgICAgIG1haW50YWluZWQgYSBtZXJjZW5hcnkgZm9yY2UgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDb3JpbnRoIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDb3JpbnRoIj5Db3JpbnRoPC9wbGFjZU5hbWU+LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EdXJpbmcgdGhlIHNvLWNhbGxlZAogICAgICAgICAgICAgICAgICAgICAgICDigJxDb3JpbnRoaWFuIFdhcizigJ0gMzk04oCUMzg3LCB3aGVuIElwaGljcmF0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGxpZ2h0LWFybWVkIGZvcmNlIGRlc3Ryb3llZCBhIG1vcmEgb2YgU3BhcnRhbiBob3BsaXRlcy4gQ2hhYnJpYXMsIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzb3IsIGlzIGJlc3Qga25vd24gZm9yIGhpcyBkZWZlYXQgb2YgdGhlIExhY2VkYWVtb25pYW4gZmxlZXQgYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDUzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTMiPk5heG9zPC9wbGFjZU5hbWU+IGluIDM3Ni4gT2YgUG9seXN0cmF0dXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGxpdHRsZSBvciBub3RoaW5nIGlzIGtub3duLjwvbm90ZT4gY29tbWFuZGVkIGJ5IFBvbHlzdHJhdHVzLCBJcGhpY3JhdGVzLAogICAgICAgICAgICAgICAgICAgIENoYWJyaWFzLCBhbmQgb3RoZXJzLCBhbmQgdGhhdCB5b3UgY2l0aXplbnMgYWxzbyBzZXJ2ZWQgaW4gcGVyc29uOyBhbmQgSSBrbm93CiAgICAgICAgICAgICAgICAgICAgZnJvbSBoaXN0b3J5IHRoYXQgeW91IGFuZCB0aGVzZSBtZXJjZW5hcmllcywgZmlnaHRpbmcgc2hvdWxkZXIgdG8gc2hvdWxkZXIsIGJlYXQKICAgICAgICAgICAgICAgICAgICB0aGUgTGFjZWRhZW1vbmlhbnMgaW4gdGhlIGZpZWxkLiBCdXQgZXZlciBzaW5jZSBleGNsdXNpdmVseSBtZXJjZW5hcnkgZm9yY2VzCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGZpZ2h0aW5nIGZvciB5b3UsIGl0IGlzIHlvdXIgZnJpZW5kcyBhbmQgYWxsaWVzIHRoYXQgdGhleSBoYXZlIGJlYXRlbiwKICAgICAgICAgICAgICAgICAgICB3aGlsZSB0aGUgcG93ZXIgb2YgeW91ciBlbmVtaWVzIGhhcyBpbmNyZWFzZWQgYmV5b25kIGJvdW5kcy4gVGhleSBjYXN0IGEgY2FzdWFsCiAgICAgICAgICAgICAgICAgICAgZ2xhbmNlIGF0IHRoZSB3YXIgZm9yIHdoaWNoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDUzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTMiPk5heG9zPC9wbGFjZU5hbWU+IGluIDM3Ni4gT2YgUG9seXN0cmF0dXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGxpdHRsZSBvciBub3RoaW5nIGlzIGtub3duLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIGhhcyBoaXJlZCB0aGVtLCBhbmQgb2ZmIHRoZXkgc2FpbCB0byBqb2luIEFydGFiYXp1cyBvciBhbnlvbmUgZWxzZSwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgbmF0dXJhbGx5IGZvbGxvd3MgdGhlbSwgZm9yIGhlIGNhbm5vdCBjb21tYW5kIGlmIGhlIGRvZXMgbm90IHBheS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IHRoZW4gZG8gSSByZWNvbW1lbmQ/IERlcHJpdmUgYm90aAogICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgYW5kIG1lbiBvZiBhbGwgZXhjdXNlIGJ5IHByb3ZpZGluZyBwYXkgYW5kIGJ5IGF0dGFjaGluZyB0byB0aGVtIGNpdGl6ZW4KICAgICAgICAgICAgICAgICAgICBzb2xkaWVycyBhcyBvdmVyc2VlcnMsIHNvIHRvIHNwZWFrLCBvZiB0aGVpciBjb25kdWN0IGluIHRoZSBmaWVsZDsgZm9yIGF0CiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBvdXIgc3lzdGVtIGlzIGEgbW9ja2VyeS4gSWYgYW55b25lIGFza2VkIHlvdSwg4oCcQXJlIHlvdSBhdAogICAgICAgICAgICAgICAgICAgIHBlYWNlLCBBdGhlbmlhbnM/4oCdIHlvdSB3b3VsZCByZXBseSwg4oCcQ2VydGFpbmx5IG5vdDsgd2UgYXJlCiAgICAgICAgICAgICAgICAgICAgYXQgd2FyIHdpdGggUGhpbGlwLuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['4.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGF2ZSB5b3UKICAgICAgICAgICAgICAgICAgICBub3QgYmVlbiBlbGVjdGluZyBmcm9tIGFtb25nIHlvdXJzZWx2ZXMgdGVuIGJyaWdhZGllcnMgYW5kIHRlbiBnZW5lcmFscyBhbmQgdGVuCiAgICAgICAgICAgICAgICAgICAgc3F1YWRyb27igJRsZWFkZXJzIGFuZCBhIGNvdXBsZSBvZiBjYXZhbHJ5LWNvbW1hbmRlcnM/IEFuZCB3aGF0LCBwcmF5LAogICAgICAgICAgICAgICAgICAgIGFyZSB0aG9zZSBvZmZpY2VycyBkb2luZz8gV2l0aCB0aGUgZXhjZXB0aW9uIG9mIHRoZSBzb2xpdGFyeSBvbmUgd2hvbSB5b3UKICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCB0byB0aGUgc2VhdCBvZiB3YXIsIHRoZXkgYXJlIGFsbCBidXN5IGhlbHBpbmcgdGhlIHN0YXRlLXNhY3JpZmljZXJzIHRvCiAgICAgICAgICAgICAgICAgICAgbWFyc2hhbCB5b3VyIHByb2Nlc3Npb25zLiBZb3UgYXJlIGxpa2UgdGhlIG1lbiB3aG8gbW9kZWwgdGhlIGNsYXkgcHVwcGV0czs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SnVzdCBhcyB0aGUgdGVycmEtY290dGEgZmlndXJpbmVzIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgbWFudWZhY3R1cmVkIG5vdCBmb3IgcHJhY3RpY2FsIHVzZSwgYnV0IGZvciB0aGUgdG95LW1hcmtldCwgc28gdGhlIGdlbmVyYWxzCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgZWxlY3RlZCwgbm90IHRvIGZpZ2h0LCBidXQgdG8gbWFrZSBhIGJyYXZlIHNob3cgaW4gdGhlIHB1YmxpYwogICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW9ucy48L25vdGU+IHlvdSBjaG9vc2UgeW91ciBicmlnYWRpZXJzIGFuZCBjb21tYW5kZXJzIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBtYXJrZXQtcGxhY2UsIG5vdCBmb3IgdGhlIGZpZWxkLiBXaGF0ISA8L3RyYW5zbGF0aW9uPg=="
translation['4.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5PdWdodAogICAgICAgICAgICAgICAgICAgIHRoZXJlIG5vdCB0byBiZSBicmlnYWRpZXJzIGFuZCBhIGNhdmFscnktY29tbWFuZGVyLCBhbGwgY2hvc2VuIGZyb20gYW1vbmcKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzLCBuYXRpdmUgQXRoZW5pYW4gb2ZmaWNlcnMsIHRoYXQgdGhlIGZvcmNlIG1pZ2h0IGJlIGEgdHJ1bHkgbmF0aW9uYWwKICAgICAgICAgICAgICAgICAgICBvbmU/IFllcywgYnV0IHlvdXIgb3duIGNhdmFscnktY29tbWFuZGVyIGhhcyB0byBzYWlsIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMTczIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTExNzMiPkxlbW5vczwvcGxhY2VOYW1lPiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+V2UKICAgICAgICAgICAgICAgICAgICAgICAgbGVhcm4gZnJvbSBBcmlzdG90LiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gNjEuNiIgdmFsaWQ9InllcyI+QXRoLiBQb2wuIDYxLjY8L2JpYmw+LAogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGEgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4by1z4DPgM6xz4HPh86/z4I8L2ZvcmVpZ24+IHdhcyByZWd1bGFybHkgc2VudCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTExNzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTE3MyI+TGVtbm9zPC9wbGFjZU5hbWU+IHRvIHRha2UgY2hhcmdlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjYXZhbHJ5IHRoZXJlLjwvbm90ZT4gbGVhdmluZyBNZW5lbGF1czxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIEF0aC4gUG9sLiA2MS42IiB2YWxpZD0ieWVzIj5BdGguIFBvbC4gNjEuNjwvYmlibD4sCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgYSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvLXPgM+AzrHPgc+Hzr/PgjwvZm9yZWlnbj4gd2FzIHJlZ3VsYXJseSBzZW50IHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTE3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMTczIj5MZW1ub3M8L3BsYWNlTmFtZT4gdG8gdGFrZSBjaGFyZ2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNhdmFscnkgdGhlcmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPklkZW50aWZpZWQgYnkgSGFycG9jcmF0aW9uIHdpdGggYSBzb24gb2YgQW15bnRhcyBJSS4gYW5kIHNvIGhhbGYtYnJvdGhlciBvZgogICAgICAgICAgICAgICAgICAgICAgICBQaGlsaXA7IG1vcmUgcHJvYmFibHkgYSBwZXR0eSBNYWNlZG9uaWFuIGNoaWVmIHdobyBoZWxwZWQgdGhlIEF0aGVuaWFucyBhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDQ4MTQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwNDgxNCI+UG90aWRhZWE8L3BsYWNlTmFtZT4gaW4gMzY0LCBhbmQgd2hvIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVkIGluIGEgY29tcGxpbWVudGFyeSBpbnNjcmlwdGlvbiB3aGljaCBoYXMgYmVlbiBwcmVzZXJ2ZWQKICAgICAgICAgICAgICAgICAgICAgICAg77yIQy5JLkEuIDIuNTXvvIkuPC9ub3RlPiB0byBjb21tYW5kIHRoZSBtZW4gd2hvIGFyZSBmaWdodGluZwogICAgICAgICAgICAgICAgICAgIGZvciBvdXIgY2l0eSdzIHBvc3Nlc3Npb25zLiBJIGRvIG5vdCBzYXkgdGhpcyBpbiBoaXMgZGlzcGFyYWdlbWVudCwgYnV0IHRoYXQKICAgICAgICAgICAgICAgICAgICBjb21tYW5kZXIsIHdob2V2ZXIgaGUgaXMsIG91Z2h0IHRvIGJlIG9uZSBlbGVjdGVkIGJ5IHlvdS4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDQ4MTQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwNDgxNCI+UG90aWRhZWE8L3BsYWNlTmFtZT4gaW4gMzY0LCBhbmQgd2hvIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVkIGluIGEgY29tcGxpbWVudGFyeSBpbnNjcmlwdGlvbiB3aGljaCBoYXMgYmVlbiBwcmVzZXJ2ZWQKICAgICAgICAgICAgICAgICAgICAgICAg77yIQy5JLkEuIDIuNTXvvIkuPC90cmFuc2xhdGlvbj4="
translation['4.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IHRoaW5rIHBlcmhhcHMgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoaXMgaXMgYSBzb3VuZCBwcm9wb3NhbCwgYnV0IHlvdSBhcmUgY2hpZWZseSBhbnhpb3VzIHRvIGhlYXIgd2hhdCB0aGUgY29zdCB3aWxsCiAgICAgICAgICAgICAgICAgICAgYmUgYW5kIGhvdyBpdCB3aWxsIGJlIHJhaXNlZC4gSSBub3cgcHJvY2VlZCB0byBkZWFsIHdpdGggdGhhdCBwb2ludC4gQXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgY29zdCB0aGVuOiB0aGUgbWFpbnRlbmFuY2UsIHRoZSBiYXJlIHJhdGlvbmluZyBvZiB0aGlzIGZvcmNlLCBjb21lcyB0byByYXRoZXIKICAgICAgICAgICAgICAgICAgICBtb3JlIHRoYW4gbmluZXR5IHRhbGVudHM7IGZvciB0aGUgdGVuIGZhc3QgZ2FsbGV5cyBmb3J0eSB0YWxlbnRzLCBvciB0d2VudHkKICAgICAgICAgICAgICAgICAgICBtaW5hZSBhIHNoaXAgZXZlcnkgbW9udGg7IGZvciB0d28gdGhvdXNhbmQgbWVuIHRoZSBzYW1lIGFtb3VudCwgdGhhdCBlYWNoIG1heQogICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgdGVuIGRyYWNobWFzIGEgbW9udGggcmF0aW9uLW1vbmV5OyBmb3IgdGhlIHR3byBodW5kcmVkIGNhdmFscnkgdHdlbHZlCiAgICAgICAgICAgICAgICAgICAgdGFsZW50cywgaWYgZWFjaCBpcyB0byByZWNlaXZlIHRoaXJ0eSBkcmFjaG1hcyBhIG1vbnRoLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgcHJvcG9zZWQgcGF5IGlzIDIgb2JvbHMgYSBkYXkgZm9yIGluZmFudHJ5IGFuZCBtYXJpbmVzLCAxCiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWNobWEgZm9yIGNhdmFscnkuIFRoZSBjcmV3IG9mIGEgdHJpcmVtZSBudW1iZXJlZCAyMDAuIFRoZSBkYWlseSBwYXkgd291bGQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlIGJlOiBHYWxsZXlzOiAyIG9iLiB4IDIwMCB4IDEwID0gNDAwMCBvYi4gSW5mYW50cnk6IDIgb2IuIHggMjAwMCA9CiAgICAgICAgICAgICAgICAgICAgICAgIDQwMDAgb2IuIENhdmFscnk6IDYgb2IuIHggMjAwID0gPGRhdGUgYXV0aG5hbWU9IjEyMDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9IjEyMDAiPjEyMDA8L2RhdGU+IG9iLiBUb3RhbCwKICAgICAgICAgICAgICAgICAgICAgICAgOTIwMCBvYm9scyBvciAxNSAxLzMgbWluYWUgYSBkYXk7IDQ2MCBtaW5hZSBvciA3IDIvMyB0YWxlbnRzIGEgbW9udGg7IDkyCiAgICAgICAgICAgICAgICAgICAgICAgIHRhbGVudHMgYSB5ZWFyLiBUaGUgaG9wbGl0ZSBub3JtYWxseSByZWNlaXZlZCAyIG9ib2xzIGZvciBwYXkgYW5kIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciByYXRpb25zOyB0aGUgY2F2YWxyeSB0aHJpY2UgdGhpcyBhbW91bnQuIERlbW9zdGhlbmVzJyBwcm9wb3NhbCBhbW91bnRzCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoaXMsIHRoYXQgdGhlIHBheSBzaG91bGQgYmUgaGFsdmVkIGFuZCB0aGUgbWVuIGVuY291cmFnZWQgdG8gbWFrZSBpdCB1cAogICAgICAgICAgICAgICAgICAgICAgICBieSBsb290aW5nLiBUbyBhcHByZWNpYXRlIHRoZXNlIHN1bXMsIGl0IHNob3VsZCBoZSBub3RlZCB0aGF0IGFuIHVuc2tpbGxlZAogICAgICAgICAgICAgICAgICAgICAgICBsYWJvcmVyIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiByZWNlaXZlZCAzIG9yCiAgICAgICAgICAgICAgICAgICAgICAgIDQgb2JvbHMgYSBkYXkuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxkYXRlIGF1dGhuYW1lPSIxMjAwIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIxMjAwIj4xMjAwPC9kYXRlPiBvYi4gVG90YWwsCiAgICAgICAgICAgICAgICAgICAgICAgIDkyMDAgb2JvbHMgb3IgMTUgMS8zIG1pbmFlIGEgZGF5OyA0NjAgbWluYWUgb3IgNyAyLzMgdGFsZW50cyBhIG1vbnRoOyA5MgogICAgICAgICAgICAgICAgICAgICAgICB0YWxlbnRzIGEgeWVhci4gVGhlIGhvcGxpdGUgbm9ybWFsbHkgcmVjZWl2ZWQgMiBvYm9scyBmb3IgcGF5IGFuZCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcmF0aW9uczsgdGhlIGNhdmFscnkgdGhyaWNlIHRoaXMgYW1vdW50LiBEZW1vc3RoZW5lcycgcHJvcG9zYWwgYW1vdW50cwogICAgICAgICAgICAgICAgICAgICAgICB0byB0aGlzLCB0aGF0IHRoZSBwYXkgc2hvdWxkIGJlIGhhbHZlZCBhbmQgdGhlIG1lbiBlbmNvdXJhZ2VkIHRvIG1ha2UgaXQgdXAKICAgICAgICAgICAgICAgICAgICAgICAgYnkgbG9vdGluZy4gVG8gYXBwcmVjaWF0ZSB0aGVzZSBzdW1zLCBpdCBzaG91bGQgaGUgbm90ZWQgdGhhdCBhbiB1bnNraWxsZWQKICAgICAgICAgICAgICAgICAgICAgICAgbGFib3JlciBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gcmVjZWl2ZWQgMyBvcgogICAgICAgICAgICAgICAgICAgICAgICA0IG9ib2xzIGEgZGF5LjwvdHJhbnNsYXRpb24+"
translation['4.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5JZiBhbnlvbmUgaW1hZ2luZXMgdGhhdCByYXRpb24tbW9uZXkgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIG1lbiBvbiBhY3RpdmUgc2VydmljZSBpcyBvbmx5IGEgc21hbGwgcHJvdmlzaW9uIHRvIHN0YXJ0IHdpdGgsIGhlIGlzIHdyb25nOyBmb3IKICAgICAgICAgICAgICAgICAgICBJIGZlZWwgcXVpdGUgc3VyZSB0aGF0IGlmIG5vIG1vcmUgdGhhbiB0aGF0IGlzIGZvcnRoY29taW5nLCB0aGUgZm9yY2UgaXRzZWxmCiAgICAgICAgICAgICAgICAgICAgd2lsbCBwcm92aWRlIHRoZSByZXN0IG91dCBvZiB0aGUgd2FyLCBzbyBhcyB0byBtYWtlIHVwIHRoZWlyIHBheSB3aXRob3V0IGluanVyeQogICAgICAgICAgICAgICAgICAgIHRvIGFueSBHcmVlayBvciBhbGxpZWQgY29tbXVuaXR5LiBJIGFtIHJlYWR5IHRvIGVtYmFyayBhcyBhIHZvbHVudGVlciBhbmQgc3VibWl0CiAgICAgICAgICAgICAgICAgICAgdG8gYW55IHB1bmlzaG1lbnQsIGlmIHRoaXMgaXMgbm90IHNvLiBJIHdpbGwgbm93IHRlbGwgeW91IHRoZSBzb3VyY2VzIGZyb20gd2hpY2gKICAgICAgICAgICAgICAgICAgICB0aGUgc3VtcyBtYXkgYmUgZGVyaXZlZCB3aGljaCBJIHJlY29tbWVuZCB5b3UgdG8gcHJvdmlkZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJNZW1vcmFuZHVtIG9mIFdheXMgYW5kIE1lYW5zIj5NZW1vcmFuZHVtIG9mIFdheXMgYW5kIE1lYW5zPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBzY2hlbWUsIEF0aGVuaWFucywgd2hpY2ggbXkgY29sbGVhZ3Vlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5PbiBzb21lCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFuY2lhbCBib2FyZCwgb3IgcGVyaGFwcyBvbmx5IG1lbWJlcnMgb2YgdGhlIHNhbWUgcG9saXRpY2FsIHBhcnR5LiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGlvbiBvZiBEaW9ueXNpdXMgdGhhdCBhIG5ldyBzcGVlY2ggY29tbWVuY2VzIGhlcmUgaGFzIG5vdCBmb3VuZCBmYXZvcgogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBtYWpvcml0eSBvZiBlZGl0b3JzLjwvbm90ZT4gYW5kIEkgaGF2ZSBiZWVuIGFibGUgdG8gY29udHJpdmUuIFdoZW4KICAgICAgICAgICAgICAgICAgICB5b3UgZ2l2ZSB5b3VyIHZvdGVzLCB5b3Ugd2lsbCBwYXNzIHRoZXNlIHByb3Bvc2FscywgaWYgeW91IGFwcHJvdmUgdGhlbSwgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHlvdXIgb2JqZWN0IGlzIHRvIGZpZ2h0IFBoaWxpcCBub3Qgb25seSB3aXRoIGRlY3JlZXMgYW5kIGRpc3BhdGNoZXMsIGJ1dCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZGVlZHMgYWxzby4gPC90cmFuc2xhdGlvbj4="
translation['4.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0CiAgICAgICAgICAgICAgICAgICAgeW91IHdvdWxkLCBJIHRoaW5rLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGZvcm0gYSBiZXR0ZXIgaWRlYSBvZiB0aGUgd2FyIGFuZCBvZiB0aGUgdG90YWwgZm9yY2UgcmVxdWlyZWQsIGlmIHlvdSBjb25zaWRlcmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGdlb2dyYXBoeSBvZiB0aGUgY291bnRyeSB5b3UgYXJlIGF0dGFja2luZywgYW5kIGlmIHlvdSByZWZsZWN0ZWQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICB3aW5kcyBhbmQgdGhlIHNlYXNvbnMgZW5hYmxlIFBoaWxpcCB0byBnYWluIG1vc3Qgb2YgaGlzIHN1Y2Nlc3NlcyBieQogICAgICAgICAgICAgICAgICAgIGZvcmVzdGFsbGluZyB1cy4gSGUgd2FpdHMgZm9yIHRoZSBFdGVzaWFuIHdpbmRzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk5vcnRoZXJseSB3aW5kcyB3aGljaCBibGV3IHN0ZWFkaWx5IGRvd24gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzUiPkFlZ2VhbjwvcGxhY2VOYW1lPiBpbiB0aGUgYXV0dW1uLjwvbm90ZT4gb3IgZm9yIHRoZSB3aW50ZXIsIGFuZCBhdHRhY2tzCiAgICAgICAgICAgICAgICAgICAgYXQgYSB0aW1lIHdoZW4gd2UgY291bGQgbm90IHBvc3NpYmx5IHJlYWNoIHRoZSBzZWF0IG9mIHdhci4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NSI+QWVnZWFuPC9wbGFjZU5hbWU+IGluIHRoZSBhdXR1bW4uPC90cmFuc2xhdGlvbj4="
translation['4.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5CZWFyaW5nIHRoaXMgaW4gbWluZCwgd2UgbXVzdCByZWx5IG5vdCBvbiBvY2Nhc2lvbmFsCiAgICAgICAgICAgICAgICAgICAgbGV2aWVzLCBvciB3ZSBzaGFsbCBiZSB0b28gbGF0ZSBmb3IgZXZlcnl0aGluZywgYnV0IG9uIGEgcmVndWxhciBzdGFuZGluZyBhcm15LgogICAgICAgICAgICAgICAgICAgIFlvdSBoYXZlIHRoZSBhZHZhbnRhZ2Ugb2Ygd2ludGVyIGJhc2VzIGZvciB5b3VyIHRyb29wcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTE3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMTczIj5MZW1ub3M8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDc4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEwNzgiPlRoYXNvczwvcGxhY2VOYW1lPiwgU2NpYXRob3MsIGFuZCB0aGUgbmVpZ2hib3JpbmcgaXNsYW5kcywgd2hlcmUgYXJlIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgZm91bmQgaGFyYm9ycywgcHJvdmlzaW9ucywgYW5kIGV2ZXJ5dGhpbmcgdGhhdCBhbiBhcm15IG5lZWRzOyBhbmQgZHVyaW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICBzZWFzb24gb2YgdGhlIHllYXIgd2hlbiBpdCBpcyBlYXN5IHRvIHN0YW5kIGNsb3NlIGluIHRvIHNob3JlIGFuZCB0aGUgd2luZHMgYXJlCiAgICAgICAgICAgICAgICAgICAgc3RlYWR5LCB5b3VyIGZvcmNlIHdpbGwgZWFzaWx5IGxpZSBvZmYgaGlzIGNvYXN0IGFuZCBhdCB0aGUgbW91dGggb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgc2VhcG9ydHMuIDwvdHJhbnNsYXRpb24+"
translation['4.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93CiAgICAgICAgICAgICAgICAgICAgYW5kIHdoZW4gdGhpcyBmb3JjZSBpcyB0byBiZSBlbXBsb3llZCB3aWxsIGJlIGEgbWF0dGVyIGZvciB5b3VyIGR1bHkgYXBwb2ludGVkCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZGVyIHRvIGRldGVybWluZSBhY2NvcmRpbmcgdG8gY2lyY3Vtc3RhbmNlcywgYnV0IHdoYXQgaXQgaXMgeW91ciB0YXNrIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZSwgdGhhdCBJIGhhdmUgcHV0IGRvd24gaW4gbXkgcmVzb2x1dGlvbi4gSWYsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdSBmaXJzdCBwcm92aWRlIHRoZSBmdW5kcyB3aGljaCBJCiAgICAgICAgICAgICAgICAgICAgbmFtZSBhbmQgdGhlbiBlcXVpcCB0aGUgd2hvbGUgZm9yY2UgY29tcGxldGUsIG1lbiwgc2hpcHMgYW5kIGNhdmFscnksIGJpbmRpbmcKICAgICAgICAgICAgICAgICAgICB0aGVtIGxlZ2FsbHkgdG8gc2VydmUgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgd2FyLCBhbmQgaWYgeW91IG1ha2UgeW91cnNlbHZlcwogICAgICAgICAgICAgICAgICAgIHRoZSBzdGV3YXJkcyBhbmQgYWRtaW5pc3RyYXRvcnMgb2YgdGhlIGZ1bmRzLCBsb29raW5nIHRvIHlvdXIgZ2VuZXJhbCBmb3IgYW4KICAgICAgICAgICAgICAgICAgICBhY2NvdW50IG9mIGhpcyBvcGVyYXRpb25zLCB0aGVuIHlvdSB3aWxsIG5vIGxvbmdlciBiZSBmb3IgZXZlciBkZWJhdGluZyB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uIGFuZCBuZXZlciBtYWtpbmcgYW55IHByb2dyZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3JlCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aGF0LCBBdGhlbmlhbnMsIHlvdSB3aWxsIGJlIGRlcHJpdmluZyBQaGlsaXAgb2YgaGlzIHByaW5jaXBhbCBzb3VyY2Ugb2YKICAgICAgICAgICAgICAgICAgICByZXZlbnVlLiBBbmQgd2hhdCBpcyB0aGF0PyBGb3IgdGhlIHdhciBhZ2FpbnN0IHlvdSBoZSBtYWtlcyB5b3VyIGFsbGllcyBwYXkgYnkKICAgICAgICAgICAgICAgICAgICByYWlkaW5nIHRoZWlyIHNlYS1ib3JuZSBjb21tZXJjZS4gSXMgdGhlcmUgYW55IGZ1cnRoZXIgYWR2YW50YWdlPyBZZXMsIHlvdSB3aWxsCiAgICAgICAgICAgICAgICAgICAgYmUgb3V0IG9mIHJlYWNoIG9mIGluanVyeSB5b3Vyc2VsdmVzLiBZb3VyIHBhc3QgZXhwZXJpZW5jZSB3aWxsIG5vdCBiZSByZXBlYXRlZCwKICAgICAgICAgICAgICAgICAgICB3aGVuIGhlIHRocmV3IGEgZm9yY2UgaW50byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTE3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMTczIj5MZW1ub3M8L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgSW1icm9zIGFuZCBjYXJyaWVkIHlvdXIgY2l0aXplbnMgYXdheSBjYXB0aXZlLCB3aGVuIGhlIHNlaXplZCB0aGUgc2hpcHBpbmcgYXQKICAgICAgICAgICAgICAgICAgICBHZXJhZXN0dXMgYW5kIGxldmllZCB1bnRvbGQgc3Vtcywgb3IsIHRvIGNyb3duIGFsbCwgd2hlbiBoZSBsYW5kZWQgYXQgTWFyYXRob24KICAgICAgICAgICAgICAgICAgICBhbmQgYm9yZSBhd2F5IGZyb20gb3VyIGxhbmQgdGhlIHNhY3JlZCB0cmlyZW1lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUg4oCcUGFyYWx1cyzigJ0gY29udmV5aW5nIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OuM61z4nPgeG9t86xPC9mb3JlaWduPm9yIHN0YXRlLWVtYmFzc3kgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEZWxvcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRGVsb3MiPkRlbG9zPC9wbGFjZU5hbWU+IGluIE1heSwgdG91Y2hlZCBhdCBNYXJhdGhvbiB0byBvZmZlciBzYWNyaWZpY2UgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OlOG9tc67zrnOv869PC9mb3JlaWduPiBvciBzYW5jdHVhcnkgb2YgQXBvbGxvLiBSZWFkZXJzCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGFlZG88L3RpdGxlPiB3aWxsIHJlbWVtYmVyIHdoeSB0aGUgZXhlY3V0aW9uIG9mIFNvY3JhdGVzIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBwb3N0cG9uZWQgZm9yIHRoaXJ0eSBkYXlzLjwvbm90ZT4gd2hpbGUgeW91IGFyZSBzdGlsbCBwb3dlcmxlc3MgdG8gcHJldmVudAogICAgICAgICAgICAgICAgICAgIHRoZXNlIGluc3VsdHMgb3IgdG8gc2VuZCB5b3VyIGV4cGVkaXRpb25zIGF0IHRoZSBhcHBvaW50ZWQgdGltZXMuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs64zrXPic+B4b23zrE8L2ZvcmVpZ24+b3Igc3RhdGUtZW1iYXNzeSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLERlbG9zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEZWxvcyI+RGVsb3M8L3BsYWNlTmFtZT4gaW4gTWF5LCB0b3VjaGVkIGF0IE1hcmF0aG9uIHRvIG9mZmVyIHNhY3JpZmljZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6U4b21zrvOuc6/zr08L2ZvcmVpZ24+IG9yIHNhbmN0dWFyeSBvZiBBcG9sbG8uIFJlYWRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBoYWVkbzwvdGl0bGU+IHdpbGwgcmVtZW1iZXIgd2h5IHRoZSBleGVjdXRpb24gb2YgU29jcmF0ZXMgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Rwb25lZCBmb3IgdGhpcnR5IGRheXMuPC90cmFuc2xhdGlvbj4="
translation['4.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBob3cgZG8geW91IGFjY291bnQgZm9yIHRoZSBmYWN0IHRoYXQgdGhlIFBhbmF0aGVuYWljCiAgICAgICAgICAgICAgICAgICAgZmVzdGl2YWwgYW5kIHRoZSBEaW9ueXNpYSBhcmUgYWx3YXlzIGhlbGQgYXQgdGhlIHJpZ2h0IGRhdGUsIHdoZXRoZXIgZXhwZXJ0cyBvcgogICAgICAgICAgICAgICAgICAgIGxheW1lbiBhcmUgY2hvc2VuIGJ5IGxvdCB0byBtYW5hZ2UgdGhlbSwgdGhhdCBsYXJnZXIgc3VtcyBhcmUgbGF2aXNoZWQgdXBvbiB0aGVtCiAgICAgICAgICAgICAgICAgICAgdGhhbiB1cG9uIGFueSBvbmUgb2YgeW91ciBleHBlZGl0aW9ucywgdGhhdCB0aGV5IGFyZSBjZWxlYnJhdGVkIHdpdGggYmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgY3Jvd2RzIGFuZCBncmVhdGVyIHNwbGVuZG9yIHRoYW4gYW55dGhpbmcgZWxzZSBvZiB0aGUga2luZCBpbiB0aGUgd29ybGQsIHdoZXJlYXMKICAgICAgICAgICAgICAgICAgICB5b3VyIGV4cGVkaXRpb25zIGludmFyaWFibHkgYXJyaXZlIHRvbyBsYXRlLCB3aGV0aGVyIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWV0aG9uZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWV0aG9uZSI+TWV0aG9uZTwvcGxhY2VOYW1lPiBvciBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA4NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDg0Ij5QYWdhc2FlPC9wbGFjZU5hbWU+IG9yIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+PyA8L3RyYW5zbGF0aW9uPg=="
translation['4.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZXhwbGFuYXRpb24gaXMgdGhhdAogICAgICAgICAgICAgICAgICAgIGF0IHRoZSBmZXN0aXZhbHMgZXZlcnl0aGluZyBpcyBvcmRlcmVkIGJ5IHN0YXR1dGU7IGV2ZXJ5IG1hbiBhbW9uZyB5b3Uga25vd3MKICAgICAgICAgICAgICAgICAgICBsb25nIGJlZm9yZWhhbmQgd2hvIG9mIGhpcyB0cmliZSBpcyB0byBwcm92aWRlIHRoZSBjaG9ydXMgb3Igd2hvIHRvIGVxdWlwIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBneW1uYXNpdW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgbW9yZSBpbXBvcnRhbnQgZnVuY3Rpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGd5bW5hc2lhcmNoIHdhcyB0byBlcXVpcCBhIHRlYW0gZm9yIHRoZSB0b3JjaC1yYWNlICg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ou86xzrzPgM6xzrTOt8+Gzr/PgeG9t86xPC9mb3JlaWduPikuPC9ub3RlPiB3aGF0IGhlIGlzIHRvIHJlY2VpdmUsIHdoZW4gYW5kIGZyb20KICAgICAgICAgICAgICAgICAgICB3aG9tIGhlIGlzIHRvIHJlY2VpdmUgaXQsIGFuZCB3aGF0IGhlIGlzIHRvIGRvOyBub3RoaW5nIGhlcmUgaXMgbGVmdCB0byBjaGFuY2UsCiAgICAgICAgICAgICAgICAgICAgbm90aGluZyBpcyB1bmRldGVybWluZWQ6IGJ1dCBpbiB3aGF0IHBlcnRhaW5zIHRvIHdhciBhbmQgaXRzIGVxdWlwbWVudCwKICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5nIGlzIGlsbC1hcnJhbmdlZCwgaWxsLW1hbmFnZWQsIGlsbC1kZWZpbmVkLiBDb25zZXF1ZW50bHkgd2Ugd2FpdCB0aWxsCiAgICAgICAgICAgICAgICAgICAgd2UgaGF2ZSBoZWFyZCBzb21lIHBpZWNlIG9mIG5ld3MsIGFuZCB0aGVuIHdlIGFwcG9pbnQgb3VyIHNoaXAtbWFzdGVycywgYW5kCiAgICAgICAgICAgICAgICAgICAgYXJyYW5nZSBzdWl0cyBmb3IgZXhjaGFuZ2Ugb2YgcHJvcGVydHksPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrvOsc68z4DOsc60zrfPhs6/z4HhvbfOsTwvZm9yZWlnbj4pLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JZiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4sIG5vbWluYXRlZCBmb3IgYSDigJxsaXR1cmd5LOKAnSB0aG91Z2h0IHRoYXQgYQogICAgICAgICAgICAgICAgICAgICAgICByaWNoZXIgbWVtYmVyIG9mIGhpcyB0cmliZSwgb3RoZXJ3aXNlIGVsaWdpYmxlLCBoYWQgYmVlbiBwYXNzZWQgb3ZlciwgaGUKICAgICAgICAgICAgICAgICAgICAgICAgY291bGQgY2hhbGxlbmdlIGhpbSB0byB1bmRlcnRha2UgdGhlIGJ1cmRlbiBvciBleGNoYW5nZSBwcm9wZXJ0aWVzLiBJbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBvZiB0aGUgdHJpZXJhcmNoeSBzdWNoIGEgY2hhbGxlbmdlIHdhcyByZWZlcnJlZCB0byB0aGUgU3RyYXRlZ2kuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIGFuZCBnbyBpbnRvIGNvbW1pdHRlZSBvZiB3YXlzIGFuZCBtZWFucywgYW5kIG5leHQgd2UgcmVzb2x2ZSB0aGF0IHRoZSBmbGVldAogICAgICAgICAgICAgICAgICAgIHNoYWxsIGJlIG1hbm5lZCBieSByZXNpZGVudCBhbGllbnMgYW5kIGZyZWVkbWVuLCA8L3RyYW5zbGF0aW9uPg=="
translation['4.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz50aGVuIGFnYWluIGJ5IGNpdGl6ZW5zLCB0aGVuIGJ5IHN1YnN0aXR1dGVzLCB0aGVuLCB3aGlsZSB3ZSB0aHVzCiAgICAgICAgICAgICAgICAgICAgZGVsYXksIHRoZSBvYmplY3Qgb2Ygb3VyIGNydWlzZSBpcyBhbHJlYWR5IGxvc3QuIFRodXMgdGhlIHRpbWUgZm9yIGFjdGlvbiBpcwogICAgICAgICAgICAgICAgICAgIHdhc3RlZCBpbiBwcmVwYXJhdGlvbiwgYnV0IHRoZSBvcHBvcnR1bml0aWVzIG9mIGZvcnR1bmUgd2FpdCBub3QgZm9yIG91cgogICAgICAgICAgICAgICAgICAgIGRpbGF0b3JpbmVzcyBhbmQgcmVsdWN0YW5jZS4gVGhlIGZvcmNlcyB3aGljaCB3ZSBmYW5jaWVkIHdvdWxkIHNlcnZlIHVzIGFzIGEKICAgICAgICAgICAgICAgICAgICBzdG9wLWdhcCBwcm92ZSBpbmNhcGFibGUgd2hlbiB0aGUgY3J1Y2lhbCBtb21lbnQgYXJyaXZlcy4gTWVhbndoaWxlIFBoaWxpcCBoYXMKICAgICAgICAgICAgICAgICAgICB0aGUgZWZmcm9udGVyeSB0byBzZW5kIHN1Y2ggbGV0dGVycyBhcyB0aGVzZSB0byB0aGUgRXVib2VhbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iUmVhZGluZyBvZiB0aGUgTGV0dGVyIj5SZWFkaW5nIG9mIHRoZSBMZXR0ZXI8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9zdCBvZiB3aGF0CiAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gcmVhZCwgQXRoZW5pYW5zLCBpcyB1bmZvcnR1bmF0ZWx5IHRydWXigJRwb3NzaWJseSwgaG93ZXZlciwgbm90CiAgICAgICAgICAgICAgICAgICAgcGxlYXNhbnQgdG8gbGlzdGVuIHRvLiBCdXQgaWYgYWxsIHRoYXQgYSBzcGVha2VyIHBhc3NlcyBvdmVyLCB0byBhdm9pZCBnaXZpbmcKICAgICAgICAgICAgICAgICAgICBvZmZlbmNlLCBpcyBwYXNzZWQgb3ZlciBieSB0aGUgY291cnNlIG9mIGV2ZW50cyBhbHNvLCB0aGVuIGJsYW5kaWxvcXVlbmNlIGlzCiAgICAgICAgICAgICAgICAgICAganVzdGlmaWVkOyBidXQgaWYgc21vb3RoIHdvcmRzIG91dCBvZiBzZWFzb24gcHJvdmUgYSBjdXJzZSBpbiBwcmFjdGljZSwgdGhlbiBpdAogICAgICAgICAgICAgICAgICAgIGlzIG91ciBkaXNncmFjZSBpZiB3ZSBob29kd2luayBvdXJzZWx2ZXMsIGlmIHdlIHNoZWx2ZSB3aGF0ZXZlciBpcyBpcmtzb21lIGFuZAogICAgICAgICAgICAgICAgICAgIHNvIG1pc3MgdGhlIHRpbWUgZm9yIGFjdGlvbiwgPC90cmFuc2xhdGlvbj4="
translation['4.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5pZiB3ZSBmYWlsIHRvCiAgICAgICAgICAgICAgICAgICAgbGVhcm4gdGhlIGxlc3NvbiB0aGF0IHRvIG1hbmFnZSBhIHdhciBwcm9wZXJseSB5b3UgbXVzdCBub3QgZm9sbG93IHRoZSB0cmVuZCBvZgogICAgICAgICAgICAgICAgICAgIGV2ZW50cyBidXQgbXVzdCBmb3Jlc3RhbGwgdGhlbSwgYW5kIHRoYXQganVzdCBhcyBhbiBhcm15IGxvb2tzIHRvIGl0cyBnZW5lcmFsCiAgICAgICAgICAgICAgICAgICAgZm9yIGd1aWRhbmNlLCBzbyBzdGF0ZXNtZW4gbXVzdCBndWlkZSBjaXJjdW1zdGFuY2VzLCBpZiB0aGV5IGFyZSB0byBjYXJyeSBvdXQKICAgICAgICAgICAgICAgICAgICB0aGVpciBwb2xpY3kgYW5kIG5vdCBiZSBmb3JjZWQgdG8gZm9sbG93IGF0IHRoZSBoZWVscyBvZiBjaGFuY2UuIDwvdHJhbnNsYXRpb24+"
translation['4.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeW91LCBBdGhlbmlhbnMsIHBvc3Nlc3NpbmcgdW5zdXJwYXNzZWQKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXPigJRmbGVldCwgaW5mYW50cnksIGNhdmFscnksIHJldmVudWVz4oCUaGF2ZSBuZXZlciB0bwogICAgICAgICAgICAgICAgICAgIHRoaXMgdmVyeSBkYXkgZW1wbG95ZWQgdGhlbSBhcmlnaHQsIGFuZCB5ZXQgeW91IGNhcnJ5IG9uIHdhciB3aXRoIFBoaWxpcCBleGFjdGx5CiAgICAgICAgICAgICAgICAgICAgYXMgYSBiYXJiYXJpYW4gYm94ZXMuIFRoZSBiYXJiYXJpYW4sIHdoZW4gc3RydWNrLCBhbHdheXMgY2x1dGNoZXMgdGhlIHBsYWNlOyBoaXQKICAgICAgICAgICAgICAgICAgICBoaW0gb24gdGhlIG90aGVyIHNpZGUgYW5kIHRoZXJlIGdvIGhpcyBoYW5kcy4gSGUgbmVpdGhlciBrbm93cyBub3IgY2FyZXMgaG93IHRvCiAgICAgICAgICAgICAgICAgICAgcGFycnkgYSBibG93IG9yIGhvdyB0byB3YXRjaCBoaXMgYWR2ZXJzYXJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['4.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5TbwogICAgICAgICAgICAgICAgICAgIHlvdSwgaWYgeW91IGhlYXIgb2YgUGhpbGlwIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDM0NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwMzQ1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+LCB2b3RlIGFuIGV4cGVkaXRpb24gdGhlcmU7IGlmIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiwgeW91IHZvdGUgb25lIHRoZXJlOyBpZgogICAgICAgICAgICAgICAgICAgIHNvbWV3aGVyZSBlbHNlLCB5b3Ugc3RpbGwga2VlcCBwYWNlIHdpdGggaGltIHRvIGFuZCBmcm8uIFlvdSB0YWtlIHlvdXIgbWFyY2hpbmcKICAgICAgICAgICAgICAgICAgICBvcmRlcnMgZnJvbSBoaW07IHlvdSBoYXZlIG5ldmVyIGZyYW1lZCBhbnkgcGxhbiBvZiBjYW1wYWlnbiBmb3IgeW91cnNlbHZlcywKICAgICAgICAgICAgICAgICAgICBuZXZlciBmb3Jlc2VlbiBhbnkgZXZlbnQsIHVudGlsIHlvdSBsZWFybiB0aGF0IHNvbWV0aGluZyBoYXMgaGFwcGVuZWQgb3IgaXMKICAgICAgICAgICAgICAgICAgICBoYXBwZW5pbmcuIEFsbCB0aGlzIHdhcyBvbmNlIHBlcmhhcHMgcG9zc2libGU7IG5vdyB0aGluZ3MgaGF2ZSBjb21lIHRvIGEgY3Jpc2lzLAogICAgICAgICAgICAgICAgICAgIHNvIHRoYXQgaXQgaXMgbm8gbG9uZ2VyIGluIHlvdXIgcG93ZXIuIDwvdHJhbnNsYXRpb24+"
translation['4.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5JdAogICAgICAgICAgICAgICAgICAgIHNlZW1zIHRvIG1lLCBBdGhlbmlhbnMsIGFzIGlmIHNvbWUgZ29kLCBvdXQgb2YgdmVyeSBzaGFtZSBmb3IgdGhlIGNvbmR1Y3Qgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgY2l0eSwgaGFkIGluc3BpcmVkIFBoaWxpcCB3aXRoIHRoaXMgYWN0aXZpdHkuIEZvciBpZiBoZSBkaWQgbm90aGluZyBtb3JlLCBidXQKICAgICAgICAgICAgICAgICAgICB3ZXJlIHdpbGxpbmcgdG8gcmVzdCBzYXRpc2ZpZWQgd2l0aCB3aGF0IGhlIGhhcyBhbHJlYWR5IGNhcHR1cmVkIGFuZCBzdWJkdWVkLCBJCiAgICAgICAgICAgICAgICAgICAgYmVsaWV2ZSBzb21lIG9mIHlvdSB3b3VsZCBiZSBxdWl0ZSBjb250ZW50IHdpdGggd2hhdCBtdXN0IGJyaW5nIHRoZSBkZWVwZXN0CiAgICAgICAgICAgICAgICAgICAgZGlzZ3JhY2UgdXBvbiB1cyBhbmQgYnJhbmQgdXMgYXMgYSBuYXRpb24gb2YgY293YXJkcy4gQnV0IGJ5IGFsd2F5cyBhdHRlbXB0aW5nCiAgICAgICAgICAgICAgICAgICAgc29tZXRoaW5nIG5ldywgYWx3YXlzIGdyYXNwaW5nIGF0IG1vcmUgcG93ZXIsIGhlIG1heSBwb3NzaWJseSByb3VzZSBldmVuIHlvdSwgaWYKICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBub3QgdXR0ZXJseSBhYmFuZG9uZWQgaG9wZS4gPC90cmFuc2xhdGlvbj4="
translation['4.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5QZXJzb25hbGx5IEkgYW0gc3VycHJpc2VkIHRoYXQgbm9uZSBvZiB5b3UsIEF0aGVuaWFucywgaXMgZGlzdHJlc3NlZCBhbmQgYW5ncnkKICAgICAgICAgICAgICAgICAgICB0byBmaW5kIHRoYXQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgd2FyIG91ciBhaW0gd2FzIHRvIHB1bmlzaCBQaGlsaXAsIGJ1dCBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBlbmQgaXQgaXMgdG8gZXNjYXBlIGluanVyeSBhdCBoaXMgaGFuZHMuIEJ1dCBzdXJlbHkgaXQgaXMgb2J2aW91cyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCBub3Qgc3RvcCwgdW5sZXNzIHNvbWVvbmUgc3RvcHMgaGltLiBBbmQgaXMgdGhhdCB3aGF0IHdlIGFyZSB0byB3YWl0IGZvcj8gRG8KICAgICAgICAgICAgICAgICAgICB5b3UgZmFuY3kgdGhhdCBhbGwgaXMgd2VsbCwgaWYgeW91IGRpc3BhdGNoIGFuIHVubWFubmVkIGZsZWV0IGFuZCB0aGUgdmFndWUgaG9wZQogICAgICAgICAgICAgICAgICAgIG9mIHNvbWUgZGVsaXZlcmVyPyA8L3RyYW5zbGF0aW9uPg=="
translation['4.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5TaGFsbCB3ZSBub3QgbWFuIHRoZSBmbGVldAogICAgICAgICAgICAgICAgICAgIG91cnNlbHZlcz8gU2hhbGwgd2Ugbm90IHRha2UgdGhlIGZpZWxkIHdpdGggYXQgbGVhc3QgYSBwcm9wb3J0aW9uIG9mIG5hdGl2ZQogICAgICAgICAgICAgICAgICAgIHRyb29wcywgZXZlbiBub3csIGlmIG5ldmVyIGJlZm9yZT8gU2hhbGwgd2Ugbm90IHNhaWwgYWdhaW5zdCBoaXMgdGVycml0b3J5PwogICAgICAgICAgICAgICAgICAgIOKAnFdoZXJlIHRoZW4gYXJlIHdlIHRvIGdvIGFuZCBhbmNob3I/4oCdIHNvbWVvbmUgaGFzIGFza2VkLiBUaGUKICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcyBvZiB0aGUgd2FyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIHdpbGwgaXRzZWxmIGRpc2NvdmVyIHRoZSB3ZWFrIHBsYWNlcyBpbiBoaXMgZnJvbnQsIGlmIHdlIG1ha2UgdGhlIGVmZm9ydDsgYnV0IGlmCiAgICAgICAgICAgICAgICAgICAgd2Ugc2l0IGhlcmUgYXQgaG9tZSBsaXN0ZW5pbmcgdG8gdGhlIGFidXNlIGFuZCBtdXR1YWwgcmVjcmltaW5hdGlvbnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgb3JhdG9ycywgdGhlcmUgaXMgbm90IHRoZSBzbGlnaHRlc3QgY2hhbmNlIG9mIG91ciBnZXR0aW5nIGFueXRoaW5nIGRvbmUgdGhhdAogICAgICAgICAgICAgICAgICAgIG91Z2h0IHRvIGJlIGRvbmUuIDwvdHJhbnNsYXRpb24+"
translation['4.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVyZXZlciwgSSBiZWxpZXZlLCB3ZSBzZW5kCiAgICAgICAgICAgICAgICAgICAgb3V0IGEgZm9yY2UgY29tcG9zZWQgcGFydGx5IG9yIHdob2xseSBvZiBvdXIgY2l0aXplbnMsIHRoZXJlIHRoZSBnb2RzIGFyZQogICAgICAgICAgICAgICAgICAgIGdyYWNpb3VzIGFuZCBmb3J0dW5lIGZpZ2h0cyBvbiBvdXIgc2lkZTsgYnV0IHdoZXJldmVyIHlvdSBzZW5kIG91dCBhIGdlbmVyYWwKICAgICAgICAgICAgICAgICAgICB3aXRoIGFuIGVtcHR5IGRlY3JlZSBhbmQgdGhlIG1lcmUgYXNwaXJhdGlvbnMgb2YgdGhpcyBwbGF0Zm9ybSwgeW91ciBuZWVkcyBhcmUKICAgICAgICAgICAgICAgICAgICBub3Qgc2VydmVkLCB5b3VyIGVuZW1pZXMgbGF1Z2ggeW91IHRvIHNjb3JuLCB5b3VyIGFsbGllcyBzdGFuZCBpbiBtb3J0YWwgZmVhciBvZgogICAgICAgICAgICAgICAgICAgIHN1Y2ggYW4gZXhwZWRpdGlvbmFyeSBmb3JjZS4gPC90cmFuc2xhdGlvbj4="
translation['4.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBpbXBvc3NpYmxlLAogICAgICAgICAgICAgICAgICAgIHV0dGVybHkgaW1wb3NzaWJsZSBmb3Igb25lIG1hbiBldmVyIHRvIGRvIGFsbCB0aGF0IHlvdSB3YW50IGRvbmU7IGhlIGNhbiBvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2U8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RWRpdG9ycyBkZXRlY3QgYSBzcGVjaWFsIGFsbHVzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgIGhlcmUuIFRoZSDigJxwcm9taXNlcyBvZiBDaGFyZXPigJ0gaGFkIGJlY29tZQogICAgICAgICAgICAgICAgICAgICAgICBwcm92ZXJiaWFsLjwvbm90ZT4gYW5kIGFzc2VudCBhbmQgdGhyb3cgdGhlIGJsYW1lIG9uIHNvbWVvbmUgZWxzZS4gSW4KICAgICAgICAgICAgICAgICAgICBjb25zZXF1ZW5jZSBvdXIgaW50ZXJlc3RzIGFyZSBydWluZWQuIEZvciB3aGVuIHlvdXIgZ2VuZXJhbCBsZWFkcyB3cmV0Y2hlZCwKICAgICAgICAgICAgICAgICAgICBpbGwtcGFpZCBtZXJjZW5hcmllcywgYW5kIGZpbmRzIHBsZW50eSBvZiBtZW4gaGVyZSB0byBsaWUgdG8geW91IGFib3V0IHdoYXQgaGUKICAgICAgICAgICAgICAgICAgICBoYXMgZG9uZSwgd2hpbGUgeW91IHBhc3MgZGVjcmVlcyBhdCByYW5kb20gb24gdGhlIHN0cmVuZ3RoIG9mIHRoZXNlIHJlcG9ydHMsCiAgICAgICAgICAgICAgICAgICAgd2hhdCBhcmUgeW91IHRvIGV4cGVjdD8gPC90cmFuc2xhdGlvbj4="
translation['4.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93IHRoZW4gaXMgYWxsIHRoaXMgdG8gYmUgc3RvcHBlZD8gQXMgc29vbiBhcyB5b3UsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGRlZmluaXRlbHkgYXBwb2ludCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIG1lbiBhcyBzb2xkaWVycyBhbmQgYXMgZXllLXdpdG5lc3NlcyBvZiB0aGUgY2FtcGFpZ24sIGFuZCwgb24gdGhlaXIgcmV0dXJuLAogICAgICAgICAgICAgICAgICAgIGFzIGp1cnltZW4gYXQgdGhlIGF1ZGl0IG9mIHlvdXIgZ2VuZXJhbHMuIEluIHRoaXMgd2F5IHlvdSB3aWxsIG5vdCBtZXJlbHkgbGVhcm4KICAgICAgICAgICAgICAgICAgICBhYm91dCB5b3VyIGFmZmFpcnMgYnkgaGVhcnNheSwgYnV0IHlvdSB3aWxsIGJlIHdpdG5lc3NlcyBvbiB0aGUgc3BvdC4gU28KICAgICAgICAgICAgICAgICAgICBzY2FuZGFsb3VzIGlzIG91ciBwcmVzZW50IHN5c3RlbSB0aGF0IGV2ZXJ5IGdlbmVyYWwgaXMgdHJpZWQgdHdvIG9yIHRocmVlIHRpbWVzCiAgICAgICAgICAgICAgICAgICAgZm9yIGhpcyBsaWZlIGluIHlvdXIgY291cnRzLCBidXQgbm90IG9uZSBvZiB0aGVtIGRhcmVzIHRvIHJpc2sgZGVhdGggaW4gYmF0dGxlCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgZW5lbXk7IG5vLCBub3Qgb25jZS4gVGhleSBwcmVmZXIgdGhlIGRvb20gb2YgYSBraWRuYXBwZXIgb3IgYQogICAgICAgICAgICAgICAgICAgIHBpY2twb2NrZXQgdG8gYSBmaXR0aW5nIGRlYXRoOyBmb3IgbWFsZWZhY3RvcnMgYXJlIGNvbmRlbW5lZCB0byB0aGUgZ2FsbG93cywKICAgICAgICAgICAgICAgICAgICBnZW5lcmFscyBzaG91bGQgZGllIG9uIHRoZSBmaWVsZCBvZiBob25vci4gPC90cmFuc2xhdGlvbj4="
translation['4.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIG9mIHVzIHNwcmVhZCB0aGUgcnVtb3IgdGhhdCBQaGlsaXAgaXMgbmVnb3RpYXRpbmcgd2l0aCB0aGUgTGFjZWRhZW1vbmlhbnMKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIG92ZXJ0aHJvdyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGRpc3NvbHV0aW9uIG9mIHRoZSBmcmVlIHN0YXRlcywgb3RoZXJzIHRoYXQgaGUgaGFzIHNlbnQgYW4gZW1iYXNzeSB0byB0aGUgR3JlYXQKICAgICAgICAgICAgICAgICAgICBLaW5nLCBvdGhlcnMgdGhhdCBoZSBpcyBiZXNpZWdpbmcgdG93bnMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2ODMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjY4MyI+SWxseXJpYTwvcGxhY2VOYW1lPjsgaW4gc2hvcnQsIGVhY2ggb2YgdXMgY2lyY3VsYXRlcyBoaXMgb3duIHBpZWNlIG9mCiAgICAgICAgICAgICAgICAgICAgZmljdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['4.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5UcnVseSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgSSBkbyB0aGluayB0aGF0IFBoaWxpcCBpcyBkcnVuawogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIG1hZ25pdHVkZSBvZiBoaXMgYWNoaWV2ZW1lbnRzIGFuZCBkcmVhbXMgb2YgZnVydGhlciB0cml1bXBocywgd2hlbiwKICAgICAgICAgICAgICAgICAgICBlbGF0ZWQgYnkgaGlzIHN1Y2Nlc3MsIGhlIGZpbmRzIHRoYXQgdGhlcmUgaXMgbm9uZSB0byBiYXIgaGlzIHdheTsgYnV0IEkgY2Fubm90CiAgICAgICAgICAgICAgICAgICAgZm9yIGEgbW9tZW50IGJlbGlldmUgdGhhdCBoZSBpcyBkZWxpYmVyYXRlbHkgYWN0aW5nIGluIHN1Y2ggYSB3YXkgdGhhdCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9vbHMgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGtub3cgd2hhdCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGdvaW5nIHRvIGRvIG5leHQuIEZvciBvZiBhbGwgZm9vbHMgdGhlIHJ1bW9yLW1vbmdlcnMgYXJlIHRoZSB3b3JzdC4gPC90cmFuc2xhdGlvbj4="
translation['4.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYsIHB1dHRpbmcgcnVtb3JzIGFzaWRlLCB3ZSByZWNvZ25pemUgdGhhdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgbWFuIGlzIG91ciBlbmVteSwgd2hvIGhhcyBmb3IgeWVhcnMgYmVlbiByb2JiaW5nIGFuZCBpbnN1bHRpbmcgdXMsIHRoYXQgd2hlcmV2ZXIKICAgICAgICAgICAgICAgICAgICB3ZSBvbmNlIGhvcGVkIHRvIGZpbmQgaGVscCB3ZSBoYXZlIGZvdW5kIGhpbmRyYW5jZSwgdGhhdCB0aGUgZnV0dXJlIGxpZXMgaW4gb3VyCiAgICAgICAgICAgICAgICAgICAgb3duIGhhbmRzLCBhbmQgaWYgd2UgcmVmdXNlIHRvIGZpZ2h0IG5vdyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4sIHdlIHNoYWxsIHBlcmhhcHMgYmUgZm9yY2VkIHRvIGZpZ2h0IGhlcmUgYXQKICAgICAgICAgICAgICAgICAgICBob21l4oCUaWYsIEkgc2F5LCB3ZSByZWNvZ25pemUgdGhlc2UgZmFjdHMsIHRoZW4gd2Ugc2hhbGwgaGF2ZSBkb25lIHdpdGgKICAgICAgICAgICAgICAgICAgICBpZGxlIHdvcmRzIGFuZCBzaGFsbCBjb21lIHRvIGEgcmlnaHQgZGVjaXNpb24uIE91ciBidXNpbmVzcyBpcyBub3QgdG8gc3BlY3VsYXRlCiAgICAgICAgICAgICAgICAgICAgb24gd2hhdCB0aGUgZnV0dXJlIG1heSBicmluZyBmb3J0aCwgYnV0IHRvIGJlIGNlcnRhaW4gdGhhdCBpdCB3aWxsIGJyaW5nCiAgICAgICAgICAgICAgICAgICAgZGlzYXN0ZXIsIHVubGVzcyB5b3UgZmFjZSB0aGUgZmFjdHMgYW5kIGNvbnNlbnQgdG8gZG8geW91ciBkdXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['4.51'] = ""
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHBlcmNlaXZlLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgdGhlIHByZXNlbnQgb3V0bG9vawogICAgICAgICAgICAgICAgICAgIGdpdmVzIHJpc2UgdG8gbXVjaCB2ZXhhdGlvbiBhbmQgcGVycGxleGl0eSwgYmVjYXVzZSBub3Qgb25seSBoYXZlIHdlIHN1ZmZlcmVkCiAgICAgICAgICAgICAgICAgICAgc2VyaW91cyBsb3NzZXMsIHdoaWNoIGNhbm5vdCBiZSBtZW5kZWQgYnkgZmluZSBzcGVlY2hlcywgYnV0IHRoZXJlIGlzIGFsc28KICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSBkaXZlcmdlbmNlIG9mIG9waW5pb24gYWJvdXQgdGhlIHByZXNlcnZhdGlvbiBvZiB3aGF0IGlzIGxlZnQgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgZW1waXJlLCBvbmUgZmF2b3JpbmcgdGhpcyBwb2xpY3ksIGFub3RoZXIgdGhhdC4gPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIGRlbGliZXJhdGlvbiBpcyBuYXR1cmFsbHkgYSB2ZXhhdGlvdXMgYW5kIGRpZmZpY3VsdCB0YXNrLCB5b3UsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBoYXZlIGVuaGFuY2VkIGl0cyBkaWZmaWN1bHRpZXM7IGZvciBhbGwgb3RoZXIgcGVvcGxlIGRlbGliZXJhdGUKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIGV2ZW50LCBidXQgeW91IGFmdGVyIHRoZSBldmVudC4gQW5kIHRoZSByZXN1bHQgaXMgdGhhdCwgYXMgbG9uZyBhcyBJCiAgICAgICAgICAgICAgICAgICAgY2FuIHJlbWVtYmVyLCB0aGUgbWFuIHdobyBhdHRhY2tzIGFueSBtaXN0YWtlcyB5b3UgaGF2ZSBtYWRlIGdhaW5zIHlvdXIgYXBwbGF1c2UKICAgICAgICAgICAgICAgICAgICBhcyBhbiBhYmxlIHNwZWFrZXIsIGJ1dCBtZWFud2hpbGUgdGhlIGV2ZW50cyBhbmQgdGhlIHJlYWwgb2JqZWN0IG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICBkZWxpYmVyYXRpb24gd2hvbGx5IGVzY2FwZSB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywKICAgICAgICAgICAgICAgICAgICBhbHRob3VnaCB0aGlzIGlzIHNvLCBJIGhhdmUgY29tZSBmb3J3YXJkIGluIHRoZSBiZWxpZWYgYW5kIGNvbmZpZGVuY2UgdGhhdCwgaWYKICAgICAgICAgICAgICAgICAgICB5b3Ugd2lsbCBjb25zZW50IHRvIHN0aWxsIHRoZSBub2lzZSBvZiBmYWN0aW9uIGFuZCBsaXN0ZW4gd2l0aCB0aGUgYXR0ZW50aW9uCiAgICAgICAgICAgICAgICAgICAgdGhhdCBiZWZpdHMgbWVuIHdobyBhcmUgZGViYXRpbmcgdGhlIG1vc3QgaW1wb3J0YW50IGludGVyZXN0cyBvZiB0aGUgc3RhdGUsIEkKICAgICAgICAgICAgICAgICAgICBzaGFsbCBiZSBhYmxlIHRvIG9mZmVyIHlvdSBhZHZpY2Ugd2hpY2ggd2lsbCBhbWVsaW9yYXRlIG91ciBwcmVzZW50IGNvbmRpdGlvbgogICAgICAgICAgICAgICAgICAgIGFuZCByZWRlZW0gb3VyIHBhc3QgbG9zc2VzIDwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGlsZSBJIGFtIHdlbGwgYXdhcmUsIEF0aGVuaWFucywgdGhhdCB0byB0YWxrIGluIHRoaXMKICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSBhYm91dCBvbmVzZWxmIGFuZCBvbmUncyBvd24gc3BlZWNoZXMgaXMgYSB2ZXJ5IHByb2ZpdGFibGUgcHJhY3RpY2UsIGlmCiAgICAgICAgICAgICAgICAgICAgb25lIGhhcyB0aGUgbmVjZXNzYXJ5IGVmZnJvbnRlcnksIEkgZmVlbCB0aGF0IGl0IGlzIHNvIHZ1bGdhciBhbmQgc28gb2ZmZW5zaXZlCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgdGhvdWdoIEkgc2VlIHRoZSBuZWNlc3NpdHksIEkgc2hyaW5rIGZyb20gaXQuIEkgYmVsaWV2ZSwgaG93ZXZlciwgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICB3aWxsIGZvcm0gYSBiZXR0ZXIganVkZ2VtZW50IG9mIHdoYXQgSSBhbSBnb2luZyB0byBwcm9wb3NlLCBpZiBJIHJlbWluZCB5b3Ugb2YgYQogICAgICAgICAgICAgICAgICAgIGZldyB0aGluZ3MgdGhhdCBJIGhhdmUgc2FpZCBvbiBmb3JtZXIgb2NjYXNpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiB0aGUgZmlyc3QgcGxhY2UsIEF0aGVuaWFucywgd2hlbiBpdCB3YXMgcHJvcG9zZWQgdG8gdGFrZSBhZHZhbnRhZ2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgdW5yZXN0IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaHJvdWdoIFBoaWxpcCdzIGludHJpZ3VlcyBhIE1hY2Vkb25pYW4gcGFydHkgaGFkIGJlZW4gZm9ybWVkCiAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBjaXRpZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICBQbHV0YXJjaHVzLCB0aGUgcnVsZXIgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFcmV0cmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFcmV0cmlhIj5FcmV0cmlhPC9wbGFjZU5hbWU+LCBhcHBsaWVkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBmb3IgaGVscCBhZ2FpbnN0IGEgcmlzaW5nLiBUaGUgcmVxdWVzdCB3YXMgc3VwcG9ydGVkCiAgICAgICAgICAgICAgICAgICAgICAgIGJ5IEV1YnVsdXMgYW5kIE1pZGlhcywgYnV0IG9wcG9zZWQgYnkgRGVtb3N0aGVuZXMuIEEgZm9yY2Ugd2FzIHNlbnQgdW5kZXIKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNvbW1hbmQgb2YgUGhvY2lvbiBhbmQgd29uIGEgYmF0dGxlLCBidXQgUGx1dGFyY2h1cyBwcm92ZWQgaGltc2VsZiBhCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWl0b3IgYW5kIHdhcyBleHBlbGxlZCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRXJldHJpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRXJldHJpYSI+RXJldHJpYTwvcGxhY2VOYW1lPi48L25vdGU+IGFuZCBzaWRlIHdpdGggUGx1dGFyY2h1cyBpbiBhIHdhciB0aGF0CiAgICAgICAgICAgICAgICAgICAgd291bGQgYnJpbmcgdXMgbW9yZSBleHBlbnNlIHRoYW4gZ2xvcnksIEkgd2FzIHRoZSBmaXJzdCBhbmQgaW5kZWVkIHRoZSBvbmx5CiAgICAgICAgICAgICAgICAgICAgc3BlYWtlciB0byBvcHBvc2UgaXQsIGFuZCBJIG5hcnJvd2x5IGVzY2FwZWQgYmVpbmcgdG9ybiB0byBwaWVjZXMgYnkgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgaW5kdWNlZCB5b3UgZm9yIHRyaWZsaW5nIGdhaW5zIHRvIGNvbW1pdCBtYW55IHNlcmlvdXMgZXJyb3JzLiBJdCB3YXMgbm90IGxvbmcKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgeW91IGluY3VycmVkIGRpc2dyYWNlIGFuZCBzdWZmZXJlZCBpbmRpZ25pdGllczxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgUGx1dGFyY2h1cywgdGhlIHJ1bGVyIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRXJldHJpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRXJldHJpYSI+RXJldHJpYTwvcGxhY2VOYW1lPiwgYXBwbGllZCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gZm9yIGhlbHAgYWdhaW5zdCBhIHJpc2luZy4gVGhlIHJlcXVlc3Qgd2FzIHN1cHBvcnRlZAogICAgICAgICAgICAgICAgICAgICAgICBieSBFdWJ1bHVzIGFuZCBNaWRpYXMsIGJ1dCBvcHBvc2VkIGJ5IERlbW9zdGhlbmVzLiBBIGZvcmNlIHdhcyBzZW50IHVuZGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb21tYW5kIG9mIFBob2Npb24gYW5kIHdvbiBhIGJhdHRsZSwgYnV0IFBsdXRhcmNodXMgcHJvdmVkIGhpbXNlbGYgYQogICAgICAgICAgICAgICAgICAgICAgICB0cmFpdG9yIGFuZCB3YXMgZXhwZWxsZWQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVyZXRyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEVyZXRyaWEiPkVyZXRyaWE8L3BsYWNlTmFtZT4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFjY29yZGluZyB0byB0aGUgU2Nob2xpYXN0LCBQbHV0YXJjaHVzIHNlaXplZCBzb21lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiB0cm9vcHMgYW5kIGNvbXBlbGxlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdG8gcmFuc29tIHRoZW0gZm9yIDUwIHRhbGVudHMuPC9ub3RlPiBzdWNoIGFzIG5vIG1lbgogICAgICAgICAgICAgICAgICAgIGhhdmUgZXZlciByZWNlaXZlZCBmcm9tIHRob3NlIHdob20gdGhleSBoYXZlIGhlbHBlZCwgYW5kIHNvIHlvdSByZWFsaXplZCB0aGUKICAgICAgICAgICAgICAgICAgICBiYXNlbmVzcyBvZiB0aG9zZSB0byB3aG9tIHlvdSB0aGVuIGdhdmUgZWFyIGFuZCB0aGUgd2lzZG9tIG9mIHRoZSBhZHZpY2UgeW91CiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgZnJvbSBtZS4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHRvIHJhbnNvbSB0aGVtIGZvciA1MCB0YWxlbnRzLjwvdHJhbnNsYXRpb24+"
translation['5.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aGVuIEkgc2F3IHRoYXQgTmVvcHRvbGVtdXMsIHRoZQogICAgICAgICAgICAgICAgICAgIGFjdG9yLCBlbmpveWluZyBzYWZlIGNvbmR1Y3QgdW5kZXIgY292ZXIgb2YgaGlzIHByb2Zlc3Npb24sIHdhcyBkb2luZyBoaXMgYmVzdAogICAgICAgICAgICAgICAgICAgIHRvIGluanVyZSBvdXIgY2l0eSBhbmQgd2FzIFBoaWxpcCdzIGFnZW50IGFuZCByZXByZXNlbnRhdGl2ZSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIEkgb25jZSBtb3JlIGNhbWUgZm9yd2FyZCBhbmQKICAgICAgICAgICAgICAgICAgICBhZGRyZXNzZWQgeW91LCBub3Qgb3V0IG9mIHByaXZhdGUgYW5pbW9zaXR5IG9yIGxvdmUgb2YgaW5mb3JtaW5nLCBhcyBpbmRlZWQgbXkKICAgICAgICAgICAgICAgICAgICBzdWJzZXF1ZW50IGNvbmR1Y3QgaGFzIHByb3ZlZC4gPC90cmFuc2xhdGlvbj4="
translation['5.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBJIHNoYWxsIG5vdAogICAgICAgICAgICAgICAgICAgIGluIHRoaXMgY2FzZSwgYXMgaW4gdGhlIGZvcm1lciBvbmUsIGZpbmQgZmF1bHQgd2l0aCB0aG9zZSB3aG8gc3Bva2UgaW4gZGVmZW5jZQogICAgICAgICAgICAgICAgICAgIG9mIE5lb3B0b2xlbXVzLCBmb3Igbm90IGEgbWFuIGRlZmVuZGVkIGhpbSwgYnV0IHdpdGggeW91cnNlbHZlcy4gRm9yIGlmIGl0IGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gYSB0cmFnZWR5IGluIHRoZSB0aGVhdGVyIG9mIERpb255c3VzIHRoYXQgeW91IHdlcmUgd2F0Y2hpbmcgYW5kIG5vdCBhCiAgICAgICAgICAgICAgICAgICAgZGViYXRlIG9uIHRoZSB2ZXJ5IGV4aXN0ZW5jZSBvZiB5b3VyIHN0YXRlLCB5b3UgY291bGQgbm90IGhhdmUgc2hvd24gbW9yZQogICAgICAgICAgICAgICAgICAgIHBhcnRpYWxpdHkgdG8gaGltIGFuZCBtb3JlIGlsbC13aWxsIGFnYWluc3QgbWUuIDwvdHJhbnNsYXRpb24+"
translation['5.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPllldCBJIHN1cHBvc2UgdGhhdCBieSB0aGlzIHRpbWUgeW91IGhhdmUgYWxsIG9ic2VydmVkIHRoYXQgYWZ0ZXIgdmlzaXRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXksIGluIG9yZGVyLCBhcyBoZSBhbGxlZ2VkLCB0byBjb2xsZWN0IHN1bXMgb3dpbmcgdG8gaGltIHRoZXJlIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgc3BlbmQgb24gcHVibGljIHNlcnZpY2VzIGhlcmUsIGFuZCBhZnRlciBtYWtpbmcgY29waW91cyB1c2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQgdGhhdCBpdCB3YXMgdG9vIGJhZCB0byBhcnJhaWduIG1lbiB3aG8gd2VyZSB0cmFuc2ZlcnJpbmcgd2VhbHRoIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGUgc2VjdXJlZCBhIHNhZmUgY29uZHVjdCBvd2luZyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBwZWFjZSwgY29udmVydGVkIGludG8gY2FzaCBhbGwgdGhlIHJlYWwgcHJvcGVydHkgdGhhdCBoZSBoZWxkIGhlcmUsIGFuZCBoYXMKICAgICAgICAgICAgICAgICAgICBhYnNjb25kZWQgdG8gUGhpbGlwLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlLCB0aGVuLCB5b3UgaGF2ZSB0d28KICAgICAgICAgICAgICAgICAgICBvZiBteSB3YXJuaW5ncywgYmVhcmluZyB0ZXN0aW1vbnkgdG8gdGhlIHZhbHVlIG9mIG15IGVhcmxpZXIgc3BlZWNoZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIHV0dGVyZWQgYnkgbWUgaG9uZXN0bHkgYW5kIGluIHN0cmljdCBjb25mb3JtaXR5IHdpdGggdGhlIGZhY3RzLiBUaGlyZGx5LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBBdGhlbnPigJRhbmQgd2hlbiBJIGhhdmUgZ2l2ZW4ganVzdCB0aGlzIG9uZSBmdXJ0aGVyIGluc3RhbmNlLCBJIHdpbGwgYXQKICAgICAgICAgICAgICAgICAgICBvbmNlIHBhc3Mgb24gdG8gc29tZSB0b3BpY3MgdGhhdCBJIGhhdmUgb21pdHRlZOKAlHdoZW4gd2UgYW1iYXNzYWRvcnMKICAgICAgICAgICAgICAgICAgICByZXR1cm5lZCBmcm9tIGFkbWluaXN0ZXJpbmcgdGhlIG9hdGhzIGZvciB0aGUgcGVhY2UsIDwvdHJhbnNsYXRpb24+"
translation['5.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5hdCB0aGF0IHRpbWUgdGhlcmUgd2VyZSBzb21lIHdobyBhc3N1cmVkIHVzIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDUwMDQyNTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNTAwNDI1OCI+VGhlc3BpYWU8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGxhdGFlYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGxhdGFlYSI+UGxhdGFlYTwvcGxhY2VOYW1lPiB3b3VsZCBiZSByZWJ1aWx0LCB0aGF0IFBoaWxpcCwgaWYgaGUgZ2FpbmVkIHRoZQogICAgICAgICAgICAgICAgICAgIG1hc3RlcnksIHdvdWxkIHByb3RlY3QgdGhlIFBob2NpYW5zIGFuZCBicmVhayB1cCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gaW50byB2aWxsYWdlcywgYW5kIHRoYXQgeW91IHdvdWxkIHJldGFpbiBPcm9wdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gaW4gZXhjaGFuZ2UgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPi4gTGVkIG9uIGJ5IHRoZXNlCiAgICAgICAgICAgICAgICAgICAgZmFsc2UgaG9wZXMgYW5kIGNham9sZXJpZXMsIHlvdSBhYmFuZG9uZWQgdGhlIFBob2NpYW5zIGFnYWluc3QgeW91ciBvd24KICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdHMgYW5kIGFnYWluc3QganVzdGljZSBhbmQgaG9ub3IuIEJ1dCB5b3Ugd2lsbCBmaW5kIHRoYXQgSSBuZWl0aGVyIHRvb2sKICAgICAgICAgICAgICAgICAgICBwYXJ0IGluIHRoaXMgZGVjZXB0aW9uLCBub3IgcGFzc2VkIGl0IG92ZXIgaW4gc2lsZW5jZSwgYnV0IHNwb2tlIG91dCBib2xkbHksIGFzCiAgICAgICAgICAgICAgICAgICAgSSBhbSBzdXJlIHlvdSByZW1lbWJlciwgc2F5aW5nIHRoYXQgSSBoYWQgbmVpdGhlciBrbm93bGVkZ2Ugbm9yIGV4cGVjdGF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgc3VjaCByZXN1bHRzIGFuZCB0aGF0IGFsbCBzdWNoIHRhbGsgd2FzIG5vbnNlbnNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGFsbCB0aGVzZSBpbnN0YW5jZXMsIHdoZXJlIEkKICAgICAgICAgICAgICAgICAgICBhcHBlYXIgdG8gaGF2ZSBoYWQgYSBjbGVhcmVyIGZvcmVzaWdodCB0aGFuIHRoZSByZXN0LCBJIHNoYWxsIG5vdCByZWZlciB0byBhCiAgICAgICAgICAgICAgICAgICAgc2luZ2xlIGNhdXNlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+4oCUbXkgcmVhbCBvciBwcmV0ZW5kZWQgY2xldmVybmVzczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgR3JlZWsgaGVyZSBpcyBkaWZmaWN1bHQuIE1vc3QgZWRkLiBhd2t3YXJkbHkgcmVuZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDOu86xzrbOv869zrXhvbfOsTwvZm9yZWlnbj7igJxbY2F1c2UKICAgICAgICAgICAgICAgICAgICAgICAgZm9yXSBib2FzdGluZ+KAnTogaXQgaXMgcmF0aGVyIHBvbGl0aWNhbCBxdWFja2VyeSBwYXNzaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIG11c3RlciBmb3IgcmVhbCBzdGF0ZXNtYW5zaGlwLjwvbm90ZT47IG5vciB3aWxsIEkgY2xhaW0gdGhhdCBteSBrbm93bGVkZ2UKICAgICAgICAgICAgICAgICAgICBhbmQgZGlzY2Vybm1lbnQgd2VyZSBkdWUgdG8gYW55dGhpbmcgZWxzZSB0aGFuIHR3byB0aGluZ3MsIHdoaWNoIEkgd2lsbCBtZW50aW9uLgogICAgICAgICAgICAgICAgICAgIE9uZSwgbWVuIG9mIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM67zrHOts6/zr3OteG9t86xPC9mb3JlaWduPuKAnFtjYXVzZQogICAgICAgICAgICAgICAgICAgICAgICBmb3JdIGJvYXN0aW5n4oCdOiBpdCBpcyByYXRoZXIgcG9saXRpY2FsIHF1YWNrZXJ5IHBhc3NpbmcKICAgICAgICAgICAgICAgICAgICAgICAgbXVzdGVyIGZvciByZWFsIHN0YXRlc21hbnNoaXAuPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3YXMgZ29vZCBsdWNrLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIG15IGV4cGVyaWVuY2UgdGVsbHMgbWUgaXMgd29ydGggYWxsIHRoZSBjbGV2ZXJuZXNzIGFuZCB3aXNkb20gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgd29ybGQuIDwvdHJhbnNsYXRpb24+"
translation['5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2Vjb25kIGlzIHRoaXM6IG9uIHB1YmxpYyBxdWVzdGlvbnMKICAgICAgICAgICAgICAgICAgICBteSBlc3RpbWF0ZXMgYW5kIGRlY2lzaW9ucyBhcmUgZGlzaW50ZXJlc3RlZCwgYW5kIG5vIG9uZSBjYW4gc2hvdyB0aGF0IG15IHBvbGljeQogICAgICAgICAgICAgICAgICAgIGFuZCBteSBzcGVlY2hlcyBoYXZlIGJlZW4gaW4gYW55IHdheSBib3VuZCB1cCB3aXRoIG15IHByaXZhdGUgZ2Fpbi4gSGVuY2UgSQogICAgICAgICAgICAgICAgICAgIGFsd2F5cyBzZWUgYWNjdXJhdGVseSB0aGUgYWR2YW50YWdlb3VzIGNvdXJzZSBhcyBzdWdnZXN0ZWQgYnkgYWN0dWFsCiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlcy4gQnV0IHRoZSBpbnN0YW50IHlvdSB0aHJvdyBtb25leSBpbnRvIG9uZSBzY2FsZSwgaXRzIHdlaWdodCBiZWFycwogICAgICAgICAgICAgICAgICAgIGRvd24gdGhlIGp1ZGdlbWVudCB3aXRoIGl0OyBhbmQgZm9yIGhpbSB0aGF0IGhhcyBvbmNlIGRvbmUgdGhpcywgYWNjdXJhdGUgYW5kCiAgICAgICAgICAgICAgICAgICAgc291bmQgY2FsY3VsYXRpb24gYmVjb21lcyB1dHRlcmx5IGltcG9zc2libGUuIDwvdHJhbnNsYXRpb24+"
translation['5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoZXJlIGlzIG9uZSBwcmVjYXV0aW9uIHdoaWNoIEkgdGhpbmsKICAgICAgICAgICAgICAgICAgICBlc3NlbnRpYWwuIElmIGFueW9uZSBwcm9wb3NlcyB0byBuZWdvdGlhdGUgZm9yIG91ciBjaXR5IGFuIGFsbGlhbmNlIG9yIGEgam9pbnQKICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgZXVwaGVtaXNtIHVuZGVyIHRoZSBzZWNvbmQKICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gY29uZmVkZXJhY3kgZm9yIHRoZSB0cmlidXRlIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+G4b25z4HOv8+CPC9mb3JlaWduPu+8iSBvZiB0aGUgZmlyc3QuPC9ub3RlPiBvciBhbnl0aGluZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzb3J0LCBpdCBtdXN0IGJlIGRvbmUgd2l0aG91dCBkZXRyaW1lbnQgdG8gdGhlIGV4aXN0aW5nIHBlYWNlLiBJIGRvIG5vdCBtZWFuCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgcGVhY2UgaXMgYSBnbG9yaW91cyBvbmUgb3IgZXZlbiBjcmVkaXRhYmxlIHRvIHlvdSwgYnV0LCB3aGF0ZXZlciB3ZSBtYXkKICAgICAgICAgICAgICAgICAgICB0aGluayBvZiBpdCwgaXQgd291bGQgYmV0dGVyIHN1aXQgb3VyIHB1cnBvc2UgbmV2ZXIgdG8gaGF2ZSBtYWRlIGl0IHRoYW4gdG8KICAgICAgICAgICAgICAgICAgICB2aW9sYXRlIGl0IHdoZW4gbWFkZSwgYmVjYXVzZSB3ZSBoYXZlIG5vdyBzYWNyaWZpY2VkIG1hbnkgYWR2YW50YWdlcyB3aGljaCB3b3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmUgbWFkZSB3YXIgc2FmZXIgYW5kIGVhc2llciBmb3IgdXMgdGhlbiB0aGFuIG5vdy4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4bhvbnPgc6/z4I8L2ZvcmVpZ24+77yJIG9mIHRoZSBmaXJzdC48L3RyYW5zbGF0aW9uPg=="
translation['5.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2Vjb25kIHByZWNhdXRpb24sIG1lbiBvZiBBdGhlbnMsIGlzIHRvIGF2b2lkIGdpdmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBzZWxmLXN0eWxlZCBBbXBoaWN0eW9ucyBub3cgYXNzZW1ibGVkIGFueSBjYWxsIG9yIGV4Y3VzZSBmb3IgYSBjcnVzYWRlIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB1cy4gRm9yIGlmIHdlIHNob3VsZCBoZXJlYWZ0ZXIgY29tZSB0byBibG93cyB3aXRoIFBoaWxpcCwgYWJvdXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+IG9yIGluIGFueSBwcml2YXRlIHF1YXJyZWwKICAgICAgICAgICAgICAgICAgICBub3Qgc2hhcmVkIGJ5IHRoZSBUaGVzc2FsaWFucyBvciB0aGUgQXJnaXZlcyBvciB0aGUgVGhlYmFucywgSSBkbyBub3QgYmVsaWV2ZQogICAgICAgICAgICAgICAgICAgIGZvciBhIG1vbWVudCB0aGF0IGFueSBvZiB0aGUgbGF0dGVyIHdvdWxkIGJlIGRyYWdnZWQgaW50byB0aGUgd2FyLCBsZWFzdCBvZgogICAgICAgICAgICAgICAgICAgIGFsbOKAlCA8L3RyYW5zbGF0aW9uPg=="
translation['5.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5oZWFyIG1lIGJlZm9yZSB5b3Ugc2hvdXQgbWUKICAgICAgICAgICAgICAgICAgICBkb3du4oCUbGVhc3Qgb2YgYWxsIHRoZSBUaGViYW5zLiBJIGRvIG5vdCBtZWFuIHRoYXQgdGhleSByZWdhcmQgdXMgd2l0aAogICAgICAgICAgICAgICAgICAgIGZhdm9yIG9yIHRoYXQgdGhleSB3b3VsZCBub3QgcmVhZGlseSBvYmxpZ2UgUGhpbGlwLCBidXQgdGhleSBkbyByZWFsaXplIHF1aXRlCiAgICAgICAgICAgICAgICAgICAgY2xlYXJseSwgZm9yIGFsbCB0aGUgc3RvbGlkaXR5IHRoYXQgcGVvcGxlIGF0dHJpYnV0ZSB0byB0aGVtLCB0aGF0IGlmIHRoZXkgZXZlcgogICAgICAgICAgICAgICAgICAgIGZpZ2h0IHlvdSwgdGhleSB3aWxsIGhhdmUgdG8gdGFrZSBhbGwgdGhlIGhhcmQga25vY2tzIHRoZW1zZWx2ZXMsIGFuZCBzb21lb25lCiAgICAgICAgICAgICAgICAgICAgZWxzZSB3aWxsIHNpdCBxdWlldGx5IGJ5LCB3YWl0aW5nIGZvciB0aGUgc3BvaWxzLiBUaGVyZWZvcmUgdGhleSB3b3VsZCBuZXZlcgogICAgICAgICAgICAgICAgICAgIG1ha2Ugc3VjaCBhIHNhY3JpZmljZSB1bmxlc3MgdGhlIHdhciBoYWQgYSBjb21tb24gY2F1c2UgYW5kIG9yaWdpbi4gPC90cmFuc2xhdGlvbj4="
translation['5.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5JZiB3ZSB3ZW50IHRvIHdhciBhZ2FpbiB3aXRoIHRoZSBUaGViYW5zIGFib3V0CiAgICAgICAgICAgICAgICAgICAgICAgIE9yb3B1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Pcm9wdXMgd2FzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiwgY2xvc2UgdG8gdGhlIEJvZW90aWFuIGZyb250aWVyLiBBCiAgICAgICAgICAgICAgICAgICAgICAgIHdhciBmb3IgaXRzIHBvc3Nlc3Npb24gd291bGQgdGhlcmVmb3JlIGJlIGNvbmZpbmVkIHRvIHRoZSBUaGViYW5zIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBhbmQgRGVtb3N0aGVuZXMgaGFzIG5vIGZlYXIgb2YgdGhlIHJlc3VsdC48L25vdGU+IG9yIGZvciBzb21lCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgcHJpdmF0ZSByZWFzb24sIEkgZG8gbm90IHRoaW5rIHdlIHNob3VsZCBzdWZmZXIsIGZvciBib3RoIHRoZWlyIGFsbGllcyBhbmQKICAgICAgICAgICAgICAgICAgICBvdXJzIHdvdWxkLCBvZiBjb3Vyc2UsIG9mZmVyIHN1cHBvcnQsIGlmIHRoZWlyIG93biB0ZXJyaXRvcnkgd2VyZSBpbnZhZGVkLCBidXQKICAgICAgICAgICAgICAgICAgICB3b3VsZCBub3Qgam9pbiBlaXRoZXIgc2lkZSBpbiBhZ2dyZXNzaW9uLiBUaGF0IGlzIHRoZSB3YXkgd2l0aCBldmVyeSBhbGxpYW5jZQogICAgICAgICAgICAgICAgICAgIHdvcnRoIGNvbnNpZGVyaW5nLCBhbmQgc3VjaCBpcyB0aGUgbmF0dXJhbCByZXN1bHQuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiwgY2xvc2UgdG8gdGhlIEJvZW90aWFuIGZyb250aWVyLiBBCiAgICAgICAgICAgICAgICAgICAgICAgIHdhciBmb3IgaXRzIHBvc3Nlc3Npb24gd291bGQgdGhlcmVmb3JlIGJlIGNvbmZpbmVkIHRvIHRoZSBUaGViYW5zIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBhbmQgRGVtb3N0aGVuZXMgaGFzIG5vIGZlYXIgb2YgdGhlIHJlc3VsdC48L3RyYW5zbGF0aW9uPg=="
translation['5.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5ObyBpbmRpdmlkdWFsIGFsbHkgaXMgc28gZm9uZCBlaXRoZXIgb2YgdXMgb3Igb2YgdGhlIFRoZWJhbnMgYXMgdG8KICAgICAgICAgICAgICAgICAgICByZWdhcmQgb3VyIHNlY3VyaXR5IGFuZCBvdXIgc3VwcmVtYWN5IGluIHRoZSBzYW1lIGxpZ2h0LiBTZWN1cmUgdGhleSB3b3VsZCBhbGwKICAgICAgICAgICAgICAgICAgICBoYXZlIHVzLCBmb3IgdGhlaXIgb3duIHNha2VzOyB0aGF0IGVpdGhlciBuYXRpb24gc2hvdWxkIGdhaW4gc3VwcmVtYWN5IGFuZCBiZQogICAgICAgICAgICAgICAgICAgIHRoZWlyIG1hc3RlciB3b3VsZCBzdWl0IG5vbmUgb2YgdGhlbS4gV2hhdCwgdGhlbiwgaXMgdGhlIGRhbmdlciB0aGF0IEkgdGhpbmsgd2UKICAgICAgICAgICAgICAgICAgICBtdXN0IGd1YXJkIGFnYWluc3Q/IExlc3QgdGhlIGluZXZpdGFibGUgd2FyIHNob3VsZCBhZmZvcmQgYWxsIHN0YXRlcyBhIGNvbW1vbgogICAgICAgICAgICAgICAgICAgIHByZXRleHQgYW5kIGEgY29tbW9uIGdyb3VuZCBvZiBjb21wbGFpbnQuIDwvdHJhbnNsYXRpb24+"
translation['5.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IKICAgICAgICAgICAgICAgICAgICBpZiB0aGUgQXJnaXZlcyBhbmQgTWVzc2VuaWFucyBhbmQgTWVnYWxvcG9saXRhbnMsIGFuZCBvdGhlciBQZWxvcG9ubmVzaWFucyB3aG8KICAgICAgICAgICAgICAgICAgICBzaWRlIHdpdGggdGhlbSwgcXVhcnJlbCB3aXRoIHVzIGJlY2F1c2Ugb2Ygb3VyIGVtYmFzc3kgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+IGFuZCBiZWNhdXNlIHRoZXkgdGhpbmsgdGhhdCB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgc29tZSBpbnRlcmVzdCBpbiBMYWNlZGFlbW9uaWFuIHBvbGljeTsgYW5kIGlmIHRoZSBUaGViYW5zIGFyZSwgYXMgcGVvcGxlIGFkbWl0LAogICAgICAgICAgICAgICAgICAgIGhvc3RpbGUgYW5kIGxpa2VseSB0byBiZSBldmVuIG1vcmUgc28sIGJlY2F1c2Ugd2Ugb2ZmZXIgYW4gYXN5bHVtIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZXhpbGVzIGFuZCBtYWtlIG5vIGRpc2d1aXNlIG9mIG91ciBob3N0aWxpdHkgdG8gdGhlbSBpbiBldmVyeSB3YXk7IDwvdHJhbnNsYXRpb24+"
translation['5.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaWYgdGhlIFRoZXNzYWxpYW5zIGRpc2xpa2UgdXMgYmVjYXVzZSB3ZSBwcm90ZWN0CiAgICAgICAgICAgICAgICAgICAgdGhlIFBob2NpYW4gZnVnaXRpdmVzLCBhbmQgUGhpbGlwIGJlY2F1c2Ugd2UgYXJlIHRyeWluZyB0byBleGNsdWRlIGhpbSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIEFtcGhpY3R5b25pYyBDb3VuY2lsOyB0aGVuIEkgYW0gYWZyYWlkIHRoYXQgdGhlc2Ugc2VwYXJhdGUgcG93ZXJzLCBoYXZpbmcgZWFjaCBhCiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBncnVkZ2UsIG1heSBtYWtlIGNvbW1vbiBjYXVzZSBhZ2FpbnN0IHVzIG9uIHRoZSBzdHJlbmd0aCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBBbXBoaWN0eW9uaWMgZGVjcmVlcywgYW5kIG1heSB0aGVuIGJlIHRlbXB0ZWQgdG8gZ28gYmV5b25kIHdoYXQgdGhlaXIgc2V2ZXJhbAogICAgICAgICAgICAgICAgICAgIGludGVyZXN0cyByZXF1aXJlLCBhcyB0aGV5IHdlcmUgaW4gdGhlIGNhc2Ugb2YgdGhlIFBob2NpYW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igb2YgY291cnNlIHlvdSByZWFsaXplIHRoYXQgaW4gdGhlIHByZXNlbnQgY2FzZQogICAgICAgICAgICAgICAgICAgIHRoZSBUaGViYW5zIGFuZCBQaGlsaXAgYW5kIHRoZSBUaGVzc2FsaWFucyBoYXZlIGFjdGVkIGluIGNvbXBsZXRlIHVuaXNvbiwgdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgd2l0aCB3aWRlbHkgZGlmZmVyZW50IGFpbXMuIFRoZSBUaGViYW5zLCBmb3IgaW5zdGFuY2UsIHdlcmUgcG93ZXJsZXNzIHRvIHByZXZlbnQKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgZnJvbSBwcmVzc2luZyBvbiBhbmQgc2VpemluZyB0aGUgcGFzc2VzLCBvciBmcm9tIGNvbWluZyBpbiBhdCB0aGUgZmluaXNoCiAgICAgICAgICAgICAgICAgICAgYW5kIHVzdXJwaW5nIHRoZSBjcmVkaXQgb2YgdGhlaXIgcHJldmlvdXMgZXhlcnRpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5IZW5jZSB0b2RheSB0aGUgVGhlYmFucyBoYXZlIGJlZW4gcGFydGlhbGx5IHN1Y2Nlc3NmdWwgaW4gcmVjb3ZlcmluZwogICAgICAgICAgICAgICAgICAgIHRlcnJpdG9yeSwgYnV0IGhhdmUgZmFpbGVkIGxhbWVudGFibHkgdG8gd2luIGhvbm9yIGFuZCBnbG9yeTsgZm9yIHRoZXkgd291bGQKICAgICAgICAgICAgICAgICAgICBwcmVzdW1hYmx5IGhhdmUgZ2FpbmVkIG5vdGhpbmcgaWYgUGhpbGlwIGhhZCBub3QgcGFzc2VkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPi4gVGhhdCB3YXMgbm90IHdoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIHdhbnRlZCwgYnV0IHRoZXkgcHV0IHVwIHdpdGggaXQgYWxsIGJlY2F1c2UgdGhleSBoYWQgdGhlIHdpbGwsIHRob3VnaCBub3QgdGhlCiAgICAgICAgICAgICAgICAgICAgcG93ZXIsIHRvIGdyYXNwIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDM0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEwMzQiPk9yY2hvbWVudXM8L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjM1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyMzUiPkNvcm9uZWE8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['5.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgc29tZSBwZW9wbGUgYWN0dWFsbHkgZ28gc28gZmFyIGFzIHRvIHNheSB0aGF0IFBoaWxpcCB3YXMKICAgICAgICAgICAgICAgICAgICBjb21wZWxsZWQsIGFnYWluc3QgaGlzIHJlYWwgd2lzaGVzLCB0byBoYW5kIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEwMzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTAzNCI+T3JjaG9tZW51czwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyMzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTIzNSI+Q29yb25lYTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBUaGViYW5zLiBGb3IgbXkgcGFydCBJIHdpc2ggdGhlbSBqb3kgb2YgdGhlaXIgb3Bpbmlvbi4gSSBvbmx5IGtub3cgdGhpcywKICAgICAgICAgICAgICAgICAgICB0aGF0IFBoaWxpcCB3YXMgbGVzcyBpbnRlcmVzdGVkIGluIHRob3NlIHRvd25zIHRoYW4gZGVzaXJvdXMgdG8gc2VjdXJlIHRoZSBwYXNzLAogICAgICAgICAgICAgICAgICAgIHRvIHdpbiBmb3IgaGltc2VsZiB0aGUgY3JlZGl0IG9mIGZpbmlzaGluZyBvZmYgdGhlIFNhY3JlZCBXYXIsIGFuZCB0byBwcmVzaWRlIGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIFB5dGhpYW4gZ2FtZXMuIFRoYXQgd2FzIHRoZSBzdW1taXQgb2YgaGlzIGFtYml0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIFRoZXNzYWxpYW5zIGFpbWVkIGF0IHRoZSBhZ2dyYW5kaXplbWVudAogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IG5vciBvZiBQaGlsaXAsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGV5IGZlbHQgdGhhdCBhbGwgdGhhdCB3b3VsZCB0ZWxsIGFnYWluc3QgdGhlbTsgYnV0IHRoZXkgd2VyZSBhbnhpb3VzCiAgICAgICAgICAgICAgICAgICAgdG8gY29udHJvbCB0aGUgY291bmNpbCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4gYW5kIHRoZSBEZWxwaGlhbiB0ZW1wbGU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIEFtcGhpY3R5b25pYyBDb3VuY2lsIG1ldCBpbiBhdXR1bW4gYXQgdGhlIHRlbXBsZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBEZW1ldGVyIG5lYXIgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEZWxwaGkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLERlbHBoaSI+RGVscGhpPC9wbGFjZU5hbWU+IGluCiAgICAgICAgICAgICAgICAgICAgc3ByaW5nLjwvbm90ZT7igJR0d28gY2xlYXIgZ2FpbnMgZm9yIHRoZW07IGFuZCBpdCB3YXMgdGhpcyBhbWJpdGlvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgbGVkIHRoZW0gdG8gam9pbiBpbiB0aGUgd2FyLiBTbyB5b3Ugd2lsbCBmaW5kIHRoYXQgZWFjaCBvZiB0aGVzZSBwb3dlcnMgd2FzCiAgICAgICAgICAgICAgICAgICAgaW5kdWNlZCBmb3IgcHJpdmF0ZSByZWFzb25zIHRvIGRvIG11Y2ggdGhhdCBpdCBkaWQgbm90IHdpc2guIFRoYXQsIGhvd2V2ZXIsIGlzCiAgICAgICAgICAgICAgICAgICAgZW1waGF0aWNhbGx5IHdoYXQgd2UgbXVzdCBhdm9pZC4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEZWxwaGkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLERlbHBoaSI+RGVscGhpPC9wbGFjZU5hbWU+IGluCiAgICAgICAgICAgICAgICAgICAgc3ByaW5nLjwvdHJhbnNsYXRpb24+"
translation['5.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+4oCcTXVzdCB3ZSB0aGVuLOKAnSB5b3UgYXNrLAogICAgICAgICAgICAgICAgICAgIOKAnGRvIGFzIHdlIGFyZSB0b2xkIGZvciBmZWFyIG9mIHRoZSBjb25zZXF1ZW5jZXM/IERvIHlvdSBvZiBhbGwgbWVuCiAgICAgICAgICAgICAgICAgICAgYWR2aXNlIHRoYXQ/4oCdIEZhciBmcm9tIGl0LiBObywgSSB0aGluayB3ZSBvdWdodCBzbyB0byBhY3QgYXMgdG8gZG8KICAgICAgICAgICAgICAgICAgICBub3RoaW5nIHVud29ydGh5IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhbmQgeWV0CiAgICAgICAgICAgICAgICAgICAgYXZvaWQgd2FyOyB3ZSBvdWdodCB0byBzaG93IHRvIGFsbCBtZW4gb3VyIGdvb2Qgc2Vuc2UgYW5kIHRoZSBqdXN0aWNlIG9mIG91cgogICAgICAgICAgICAgICAgICAgIGNsYWltcy4gVG8gdGhvc2Ugd2hvIHRoaW5rIHdlIG91Z2h0IGJvbGRseSB0byByaXNrIGV2ZXJ5dGhpbmcsIGFuZCB3aG8gZG8gbm90CiAgICAgICAgICAgICAgICAgICAgZm9yZXNlZSB0aGUgaW5ldml0YWJsZSBob3N0aWxpdGllcywgSSBzdWdnZXN0IHRoZSBmb2xsb3dpbmcgY29uc2lkZXJhdGlvbi4gV2UKICAgICAgICAgICAgICAgICAgICBhcmUgYWxsb3dpbmcgdGhlIFRoZWJhbnMgdG8ga2VlcCBPcm9wdXM7IGFuZCBpZiBhbnlvbmUgc2hvdWxkIGFzayB1cyB0byB0ZWxsIGhpbQogICAgICAgICAgICAgICAgICAgIGNhbmRpZGx5IHdoeSB3ZSBkbyBzbywgd2Ugc2hvdWxkIGhhdmUgdG8gYW5zd2VyLCDigJxJbiBvcmRlciB0byBhdm9pZAogICAgICAgICAgICAgICAgICAgIHdhci7igJ0gPC90cmFuc2xhdGlvbj4="
translation['5.25'] = "PHRyYW5zbGF0aW9uPjxkaXYxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgb3JnPSJ1bmlmb3JtIiBzYW1wbGU9ImNvbXBsZXRlIiB0eXBlPSJzcGVlY2giPgogICAgICAgICAgICAgICAgPGhlYWQgY2xhc3M9InRyYW5zbGF0aW9uIj5TZWNvbmQgUGhpbGlwcGljPC9oZWFkPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoZW5ldmVyLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2UgYXJlIGRpc2N1c3NpbmcKICAgICAgICAgICAgICAgICAgICBQaGlsaXAncyBpbnRyaWd1ZXMgYW5kIGhpcyB2aW9sYXRpb25zIG9mIHRoZSBwZWFjZSwgSSBvYnNlcnZlIHRoYXQgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHNwZWVjaGVzIG9uIG91ciBzaWRlIGFyZSBtYW5pZmVzdGx5IGluc3BpcmVkIGJ5IGp1c3RpY2UgYW5kIGdlbmVyb3NpdHksIGFuZAogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBkZW5vdW5jZSBQaGlsaXAgYXJlIGFsbCBmZWx0IHRvIGJlIHNheWluZyBleGFjdGx5IHRoZSByaWdodCB0aGluZzsgYnV0CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG11Y2ggbmVlZGVkIGFjdGlvbiwgd2hpY2ggYWxvbmUgd291bGQgbWFrZSB0aGUgc3BlZWNoZXMgd29ydGggaGVhcmluZywKICAgICAgICAgICAgICAgICAgICBsaXR0bGUgb3Igbm90aGluZyBlbnN1ZXMuIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5VbmZvcnR1bmF0ZWx5IGFsbCBvdXIKICAgICAgICAgICAgICAgICAgICBuYXRpb25hbCBhZmZhaXJzIGhhdmUgbm93IHJlYWNoZWQgdG8gc3VjaCBhIHBhc3MsIHRoYXQgdGhlIG1vcmUgY29tcGxldGVseSBhbmQKICAgICAgICAgICAgICAgICAgICBtYW5pZmVzdGx5IFBoaWxpcCBpcyBjb252aWN0ZWQgb2YgdmlvbGF0aW5nIHRoZSBwZWFjZSB3aXRoIHVzIGFuZCBvZiBwbG90dGluZwogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlIHdob2xlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIHRoZSBtb3JlCiAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0IGl0IGlzIHRvIHN1Z2dlc3QgdGhlIHJpZ2h0IGNvdXJzZSBvZiBhY3Rpb24uIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVhc29uLCBBdGhlbmlhbnMsIGlzIHRoaXMuIFRob3VnaCBhbGwgd2hvIGFpbSBhdCB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICBhZ2dyYW5kaXplbWVudCBtdXN0IGJlIGNoZWNrZWQsIG5vdCBieSBzcGVlY2hlcywgYnV0IGJ5IHByYWN0aWNhbCBtZWFzdXJlcywgeWV0LAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBmaXJzdCBwbGFjZSwgd2Ugd2hvIGNvbWUgYmVmb3JlIHlvdSBzaHJpbmsgZnJvbSBhbnkgZGVmaW5pdGUgcHJvcG9zYWwgb3IKICAgICAgICAgICAgICAgICAgICBhZHZpY2UsIGJlaW5nIHJlbHVjdGFudCB0byBpbmN1ciB5b3VyIGRpc3BsZWFzdXJlOyB3ZSBwcmVmZXIgdG8gZGlsYXRlIG9uCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwJ3Mgc2hvY2tpbmcgYmVoYXZpb3IgYW5kIHRoZSBsaWtlIHRvcGljczsgYW5kLCBzZWNvbmRseSwgeW91IHdobyBzaXQgaGVyZQogICAgICAgICAgICAgICAgICAgIGFyZSBpbmRlZWQgYmV0dGVyIGVxdWlwcGVkIHRoYW4gUGhpbGlwIGZvciBtYWtpbmcgc3BlZWNoZXMgYWJvdXQganVzdGljZSBhbmQgZm9yCiAgICAgICAgICAgICAgICAgICAgYXBwcmVjaWF0aW5nIHRoZW0gaW4gdGhlIG1vdXRoIG9mIGFub3RoZXIsIGJ1dCwgd2hlbiBpdCBjb21lcyB0byBoaW5kZXJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgYWNjb21wbGlzaG1lbnQgb2YgaGlzIHByZXNlbnQgcGxhbnMsIHlvdSByZW1haW4gdXR0ZXJseSBpbmFjdGl2ZS4gPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN1bHQgaXMsIEkgc3VwcG9zZSwgaW5ldml0YWJsZSBhbmQgcGVyaGFwcwogICAgICAgICAgICAgICAgICAgIHJlYXNvbmFibGUuIFdoZXJlIGVpdGhlciBzaWRlIGRldm90ZXMgaXRzIHRpbWUgYW5kIGVuZXJneSwgdGhlcmUgaXQgc3VjY2VlZHMgdGhlCiAgICAgICAgICAgICAgICAgICAgYmV0dGVy4oCUUGhpbGlwIGluIGFjdGlvbiwgYnV0IHlvdSBpbiBhcmd1bWVudC4gU28gaWYgeW91IHN0aWxsIHRoaW5rIGl0CiAgICAgICAgICAgICAgICAgICAgZW5vdWdoIHRvIGVtcGxveSB0aGUgc291bmRlciBhcmd1bWVudHMsIHRoYXQgaXMgZWFzeTsgeW91ciB0YXNrIGVudGFpbHMgbm8KICAgICAgICAgICAgICAgICAgICB0cm91YmxlLiA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGlmIHlvdSBoYXZlIHRvIGRldmlzZSBtZWFucwogICAgICAgICAgICAgICAgICAgIHdoZXJlYnkgb3VyIHByZXNlbnQgZm9ydHVuZXMgc2hhbGwgYmUgcmVwYWlyZWQsIGFuZCB0aGVpciBmdXJ0aGVyIGRlY2xpbmUgc2hhbGwKICAgICAgICAgICAgICAgICAgICBub3QgdGFrZSB1cyBjb21wbGV0ZWx5IGJ5IHN1cnByaXNlLCBhbmQgd2Ugc2hhbGwgbm90IGJlIGNvbmZyb250ZWQgYnkgYSBtaWdodHkKICAgICAgICAgICAgICAgICAgICBwb3dlciB3aGljaCB3ZSBzaGFsbCBiZSB1bmFibGUgZXZlbiB0byB3aXRoc3RhbmQsIHRoZW4gb3VyIG1ldGhvZCBvZgogICAgICAgICAgICAgICAgICAgIGRlbGliZXJhdGlvbiBtdXN0IGJlIGNoYW5nZWQsIGFuZCBhbGwgd2hvIHNwZWFrIGFuZCBhbGwgd2hvIGxpc3RlbiBtdXN0IGNob29zZQogICAgICAgICAgICAgICAgICAgIHRoZSBiZXN0IGFuZCBzYWZlc3QgcG9saWN5IGluc3RlYWQgb2YgdGhlIGVhc2llc3QgYW5kIG1vc3QgYWdyZWVhYmxlLiA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBpZiBhbnlvbmUgdmlld3Mgd2l0aCBjb25maWRlbmNlIHRoZSBwcmVzZW50IHBvd2VyIG9mIFBoaWxpcCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZXh0ZW50IG9mIGhpcyBkb21pbmlvbnMsIGlmIGFueW9uZSBpbWFnaW5lcyB0aGF0IGFsbCB0aGlzIGltcG9ydHMgbm8gZGFuZ2VyIHRvCiAgICAgICAgICAgICAgICAgICAgb3VyIGNpdHkgYW5kIHRoYXQgeW91IGFyZSBub3QgdGhlIG9iamVjdCBvZiBoaXMgcHJlcGFyYXRpb25zLCBJIG11c3QgZXhwcmVzcyBteQogICAgICAgICAgICAgICAgICAgIGFzdG9uaXNobWVudCwgYW5kIGJlZyB5b3UgYWxsIGFsaWtlIHRvIGxpc3RlbiB0byBhIGJyaWVmIHN0YXRlbWVudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9ucyB0aGF0IGhhdmUgbGVkIG1lIHRvIGZvcm0gdGhlIG9wcG9zaXRlIGNvbmNsdXNpb24gYW5kIHRvIHJlZ2FyZAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCBhcyBvdXIgZW5lbXkuIFRoZW4sIGlmIHlvdSB0aGluayBtZSB0aGUgYmV0dGVyIHByb3BoZXQsIGFkb3B0IG15IGFkdmljZTsKICAgICAgICAgICAgICAgICAgICBpZiB5b3UgcHJlZmVyIHRob3NlIHdobyBoYXZlIHNvIGNvbmZpZGVudGx5IHRydXN0ZWQgaGltLCBnaXZlIHRoZW0geW91cgogICAgICAgICAgICAgICAgICAgIGFsbGVnaWFuY2UuIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgSSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHJlYXNvbiB0aHVzLiBXaGF0IGRpZCBQaGlsaXAgZmlyc3QKICAgICAgICAgICAgICAgICAgICBnZXQgdW5kZXIgaGlzIGNvbnRyb2wgYWZ0ZXIgdGhlIFBlYWNlPyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+IGFuZCB0aGUgUGhvY2lhbiBnb3Zlcm5tZW50LiBXZWxsLCB3aGF0IGRpZCBoZSBtYWtlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlc2U/IEhlIGNob3NlIHRvIGFjdCBpbiB0aGUgaW50ZXJlc3RzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIG5vdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBBbmQgd2h5IHNvPyBCZWNhdXNlLCBJIGJlbGlldmUsIGd1aWRlZCBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGlvbnMgYnkgYW1iaXRpb24gYW5kIHRoZSBkZXNpcmUgb2YgdW5pdmVyc2FsIGRvbWluaW9uLCByZWdhcmRsZXNzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNsYWltcyBvZiBwZWFjZSBhbmQgcXVpZXRuZXNzIGFuZCBqdXN0aWNlLCA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+aGUKICAgICAgICAgICAgICAgICAgICByaWdodGx5IHNhdyB0aGF0IHRvIG91ciBjaXR5IGFuZCBvdXIgbmF0aW9uYWwgY2hhcmFjdGVyIGhlIGNvdWxkIG9mZmVyIG5vdGhpbmcsCiAgICAgICAgICAgICAgICAgICAgaGUgY291bGQgZG8gbm90aGluZywgdGhhdCB3b3VsZCB0ZW1wdCB5b3UgZnJvbSBzZWxmaXNoIG1vdGl2ZXMgdG8gc2FjcmlmaWNlIHRvCiAgICAgICAgICAgICAgICAgICAgaGltIGFueSBvZiB0aGUgb3RoZXIgR3JlZWsgc3RhdGVzLCBidXQgdGhhdCB5b3UsIHJldmVyZW5jaW5nIGp1c3RpY2UsIHNocmlua2luZwogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGRpc2NyZWRpdCBpbnZvbHZlZCBpbiBzdWNoIHRyYW5zYWN0aW9ucywgYW5kIGV4ZXJjaXNpbmcgZHVlIGFuZCBwcm9wZXIKICAgICAgICAgICAgICAgICAgICBmb3JldGhvdWdodCwgd291bGQgcmVzaXN0IGFueSBzdWNoIGF0dGVtcHQgb24gaGlzIHBhcnQgYXMgc3RvdXRseSBhcyBpZiB5b3Ugd2VyZQogICAgICAgICAgICAgICAgICAgIGFjdHVhbGx5IGF0IHdhciB3aXRoIGhpbS4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBUaGViYW5zLCBoZSBiZWxpZXZlZOKAlGFuZCB0aGUgZXZlbnQganVzdGlmaWVkIGhpbeKAlHRoYXQgaW4KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9yIGJlbmVmaXRzIHJlY2VpdmVkIHRoZXkgd291bGQgZ2l2ZSBoaW0gYSBmcmVlIGhhbmQgZm9yIHRoZSBmdXR1cmUgYW5kLAogICAgICAgICAgICAgICAgICAgIHNvIGZhciBmcm9tIG9wcG9zaW5nIG9yIHRod2FydGluZyBoaW0sIHdvdWxkIGV2ZW4gam9pbiBmb3JjZXMgd2l0aCBoaW0sIGlmIGhlIHNvCiAgICAgICAgICAgICAgICAgICAgb3JkZXJlZC4gVG9kYXksIG9uIHRoZSBzYW1lIGFzc3VtcHRpb24sIGhlIGlzIGRvaW5nIHRoZSBNZXNzZW5pYW5zIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBBcmdpdmVzIGEgZ29vZCB0dXJuLiBUaGF0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaXMgdGhlIGhpZ2hlc3QgY29tcGxpbWVudCBoZSBjb3VsZCBwYXkgeW91LiA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPkZvciBieSB0aGVzZSB2ZXJ5IGFjdHMgeW91IHN0YW5kIGp1ZGdlZCB0aGUgb25lIGFuZAogICAgICAgICAgICAgICAgICAgIG9ubHkgcG93ZXIgaW4gdGhlIHdvcmxkIGluY2FwYWJsZSBvZiBhYmFuZG9uaW5nIHRoZSBjb21tb24gcmlnaHRzIG9mIHRoZSBHcmVla3MKICAgICAgICAgICAgICAgICAgICBhdCBhbnkgcHJpY2UsIGluY2FwYWJsZSBvZiBiYXJ0ZXJpbmcgeW91ciBkZXZvdGlvbiB0byB0aGVpciBjYXVzZSBmb3IgYW55IGZhdm9yCiAgICAgICAgICAgICAgICAgICAgb3IgYW55IHByb2ZpdC4gQW5kIGl0IHdhcyBuYXR1cmFsIHRoYXQgaGUgc2hvdWxkIGZvcm0gdGhpcyBvcGluaW9uIG9mIHlvdSBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgY29udHJhcnkgb3BpbmlvbiBvZiB0aGUgQXJnaXZlcyBhbmQgVGhlYmFucywgYmVjYXVzZSBoZSBub3QgbWVyZWx5IGxvb2tzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHByZXNlbnQsIGJ1dCBhbHNvIGRyYXdzIGEgbGVzc29uIGZyb20gdGhlIHBhc3QuIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEkgc3VwcG9zZSBoZSBsZWFybnMgZnJvbSBoaXN0b3J5IGFuZCBmcm9tIHJlcG9ydCB0aGF0IHlvdXIKICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMsIHdoZW4gdGhleSBtaWdodCwgYXQgdGhlIHByaWNlIG9mIHN1Ym1pc3Npb24gdG8gdGhlIEdyZWF0IEtpbmcsIGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWNvbWUgdGhlIHBhcmFtb3VudCBwb3dlciBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIG5vdCBvbmx5IHJlZnVzZWQgdG8gZW50ZXJ0YWluIHRoYXQgcHJvcG9zYWwsIGNvbnZleWVkIHRvIHRoZW0gYnkgQWxleGFuZGVyLCBhbgogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yIG9mIFBoaWxpcCdzIGxpbmUsIGJ1dCBjaG9zZSB0byBxdWl0IHRoZWlyIGhvbWVzIGFuZCBlbmR1cmUgZXZlcnkKICAgICAgICAgICAgICAgICAgICBoYXJkc2hpcCwgYW5kIHRoZXJlYWZ0ZXIgd3JvdWdodCB0aG9zZSBkZWVkcyB3aGljaCBhbGwgbWVuIGFyZSBhbHdheXMgZWFnZXIgdG8KICAgICAgICAgICAgICAgICAgICByZWxhdGUsIHRob3VnaCBubyBvbmUgaGFzIGV2ZXIgYmVlbiBhYmxlIHRvIHRlbGwgdGhlbSB3b3J0aGlseTsgYW5kIHRoZXJlZm9yZSBJCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgbm90IGJlIHdyb25nIGluIHBhc3NpbmcgdGhlbSBvdmVyLCBmb3IgdGhleSBhcmUgaW5kZWVkIGdyZWF0IGJleW9uZCBhbnkKICAgICAgICAgICAgICAgICAgICBtYW4ncyBwb3dlciBvZiBzcGVlY2guIE9uIHRoZSBvdGhlciBoYW5kLCBoZSBsZWFybnMgdGhhdCB0aGUgYW5jZXN0b3JzIG9mIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgVGhlYmFucyBhbmQgQXJnaXZlcyBlaXRoZXIgZm91Z2h0IGZvciB0aGUgYmFyYmFyaWFucyBvciBkaWQgbm90IGZpZ2h0IGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aGVtLiA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGtub3dzLCB0aGVuLCB0aGF0IHRoZXkgYm90aCB3aWxsCiAgICAgICAgICAgICAgICAgICAgcHVyc3VlIHRoZWlyIHByaXZhdGUgaW50ZXJlc3RzLCBpcnJlc3BlY3RpdmUgb2YgdGhlIGNvbW1vbiBhZHZhbnRhZ2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgR3JlZWtzLiBTbyBoZSB0aG91Z2h0IHRoYXQgaWYgaGUgY2hvc2UgeW91LCBoZSB3b3VsZCBiZSBjaG9vc2luZyBmcmllbmRzLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdXIgZnJpZW5kc2hpcCB3b3VsZCBiZSBiYXNlZCBvbiBqdXN0aWNlOyBidXQgdGhhdCBpZiBoZSBhdHRhY2hlZCBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIG90aGVycywgaGUgd291bGQgZmluZCBpbiB0aGVtIHRoZSB0b29scyBvZiBoaXMgb3duIGFtYml0aW9uLiBUaGF0IGlzIHdoeSwKICAgICAgICAgICAgICAgICAgICBub3cgYXMgdGhlbiwgaGUgY2hvb3NlcyB0aGVtIHJhdGhlciB0aGFuIHlvdS4gRm9yIHN1cmVseSBpdCBpcyBub3QgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHJlZ2FyZHMgdGhlaXIgZmxlZXRzIGFzIHN1cGVyaW9yIHRvIG91cnMsIG5vciB0aGF0LCBoYXZpbmcgZGlzY292ZXJlZCBzb21lCiAgICAgICAgICAgICAgICAgICAgaW5sYW5kIGVtcGlyZSwgaGUgaGFzIGFiYW5kb25lZCB0aGUgc2VhYm9hcmQgd2l0aCBpdHMgaGFyYm9ycywgbm9yIHlldCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIGEgc2hvcnQgbWVtb3J5IGZvciB0aGUgc3BlZWNoZXMgYW5kIHRoZSBwcm9taXNlcyB0aGF0IGdhaW5lZCBmb3IgaGltIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBQZWFjZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhhZCBQaGlsaXAgcmVub3VuY2VkIGhpcyBob3BlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kaW5nIGEgbWFyaXRpbWUgYW5kIGNvbW1lcmNpYWwgc3RhdGUgYW5kIGNvbmZpbmVkIGhpbXNlbGYgdG8gZXh0ZW5kaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyBlbXBpcmUgbm9ydGggYW5kIHdlc3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgaGlzIHJlamVjdGlvbiBvZiBBdGhlbmlhbiBmcmllbmRzaGlwIHdvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGludGVsbGlnaWJsZS4gQXMgaXQgaXMsIGl0IG11c3QgYmUgb3RoZXJ3aXNlIGV4cGxhaW5lZC48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCBpdCBtYXkgYmUKICAgICAgICAgICAgICAgICAgICB1cmdlZCwgYnkgc29tZW9uZSB3aG8gY2xhaW1zIHRvIGtub3cgYWxsIGFib3V0IGl0LCB0aGF0IGhlIGFjdGVkIG9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBvY2Nhc2lvbiwgbm90IGZyb20gYW1iaXRpb24gb3IgZnJvbSBhbnkgb2YgdGhvc2UgbW90aXZlcyB3aXRoIHdoaWNoIEkgZmluZAogICAgICAgICAgICAgICAgICAgIGZhdWx0LCBidXQgYmVjYXVzZSB0aGUgY2xhaW1zIG9mIHRoZSBUaGViYW5zIHdlcmUgbW9yZSBqdXN0IHRoYW4gb3Vycy4gTm93IHRoYXQKICAgICAgICAgICAgICAgICAgICBpcyBwcmVjaXNlbHkgdGhlIG9uZSBhcmd1bWVudCB0aGF0IGhlIGNhbm5vdCB1c2Ugbm93LiBXaGF0ISBUaGUgbWFuIHdobyBvcmRlcnMKICAgICAgICAgICAgICAgICAgICB0aGUgTGFjZWRhZW1vbmlhbnMgdG8gZ2l2ZSB1cCB0aGVpciBjbGFpbXMgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZXNzZW5lIiBrZXk9InBlcnNldXMsTWVzc2VuZSI+TWVzc2VuZTwvcGxhY2VOYW1lPiwgaG93IGNvdWxkIGhlIHByZXRlbmQgdGhhdCBoZSBoYW5kZWQgb3ZlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTAzNCIga2V5PSJ0Z24sNzAxMTAzNCI+T3JjaG9tZW51czwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyMzUiIGtleT0idGduLDcwMTEyMzUiPkNvcm9uZWE8L3BsYWNlTmFtZT4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgaGUgdGhvdWdodCBpdCBhbiBhY3Qgb2YganVzdGljZT8gPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPuKAnEJ1dCzigJ0gaXQgd2lsbCBiZSB1cmdlZAogICAgICAgICAgICAgICAgICAgIO+8iGZvciB0aGVyZSBpcyB0aGlzIGV4Y3VzZSBsZWZ077yJLCDigJxoZSB3YXMgZm9yY2VkIHRvCiAgICAgICAgICAgICAgICAgICAgeWllbGQgYWdhaW5zdCBoaXMgYmV0dGVyIGp1ZGdlbWVudCwgZmluZGluZyBoaW1zZWxmIGhlbW1lZCBpbiBiZXR3ZWVuIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZXNzYWxpYW4gY2F2YWxyeSBhbmQgdGhlIFRoZWJhbiBoZWF2eSBpbmZhbnRyeS7igJ0gR29vZCEgU28gdGhleSBzYXkKICAgICAgICAgICAgICAgICAgICBoZSBpcyB3YWl0aW5nIHRvIHJlZ2FyZCB0aGUgVGhlYmFucyB3aXRoIHN1c3BpY2lvbiwgYW5kIHNvbWUgY2lyY3VsYXRlIGEgcnVtb3IKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHdpbGwgZm9ydGlmeSBFbGF0ZWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UbyByZWJ1aWxkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB3YWxscyBvZiBFbGF0ZWEsIGRlc3Ryb3llZCBpbiAzNDYsIHdvdWxkIGJlIGEgY2hlY2sgdG8gdGhlIFRoZWJhbnMsIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIGJhcnJpbmcgdGhlaXIgd2F5IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw0MDAzOTYzIiBrZXk9InRnbiw0MDAzOTYzIj5QaG9jaXM8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIFBoaWxpcCdzIG9jY3VwYXRpb24gb2YgRWxhdGVhIGluIDMzOSBpcyB0aGUgdGhlbWUgb2YgdGhlIHdlbGwta25vd24gcGFzc2FnZQogICAgICAgICAgICAgICAgICAgICAgICBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4xNjkiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMTY5PC9iaWJsPiBmZi4gRGVtb3N0aGVuZXMgaXMgcGxheWluZyBvbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgdHdvIG1lYW5pbmdzIG9mIDxmb3JlaWduIGxhbmc9ImdyZWVrIj7OvOG9s867zrvOtc65PC9mb3JlaWduPiwg4oCcaGUKICAgICAgICAgICAgICAgICAgICAgICAgaXMgbGlrZWx5IHRv4oCdIGFuZCDigJxoZSBpcyBkZWxheWluZyB0by7igJ08L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IGlzIGp1c3Qgd2hhdCBoZSBpcwogICAgICAgICAgICAgICAgICAgIOKAnHdhaXRpbmfigJ0gdG8gZG8sIGFuZCB3aWxsIGdvIG9uCiAgICAgICAgICAgICAgICAgICAg4oCcd2FpdGluZyzigJ0gaW4gbXkgb3Bpbmlvbi4gQnV0IGhlIGlzIG5vdAogICAgICAgICAgICAgICAgICAgIOKAnHdhaXRpbmfigJ0gdG8gaGVscCB0aGUgTWVzc2VuaWFucyBhbmQgQXJnaXZlcyBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zOiBoZSBpcyBhY3R1YWxseSBkaXNwYXRjaGluZyBtZXJjZW5hcmllcyBhbmQgZm9yd2FyZGluZyBzdXBwbGllcywKICAgICAgICAgICAgICAgICAgICBhbmQgaGUgaXMgZXhwZWN0ZWQgaW4gcGVyc29uIHdpdGggYSBsYXJnZSBmb3JjZS4gV2hhdCEgVGhlIExhY2VkYWVtb25pYW5zLCB0aGUKICAgICAgICAgICAgICAgICAgICBzdXJ2aXZpbmcgZW5lbWllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+LCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGVuZ2FnZWQgaW4gZGVzdHJveWluZzsgdGhlIFBob2NpYW5zLCB3aG9tIGhlIGhhcyBoaW1zZWxmIGFscmVhZHkgZGVzdHJveWVkLCBoZQogICAgICAgICAgICAgICAgICAgIGlzIG5vdyBlbmdhZ2VkIGluIHByZXNlcnZpbmchIEFuZCB3aG8gaXMgcHJlcGFyZWQgdG8gYmVsaWV2ZSB0aGF0PyA8bWlsZXN0b25lIG49IjE2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBteSBwYXJ0IEkgZG8gbm90IGJlbGlldmUgdGhhdCBQaGlsaXAsIGlmIGhlIGFjdGVkCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGZpcnN0IHBsYWNlIHJlbHVjdGFudGx5IGFuZCB1bmRlciBjb21wdWxzaW9uLCBvciBpZiBoZSB3ZXJlIG5vdyBpbmNsaW5lZAogICAgICAgICAgICAgICAgICAgIHRvIHRocm93IHRoZSBUaGViYW5zIG92ZXIsIHdvdWxkIGJlIHBlcnNpc3RlbnRseSBvcHBvc2luZyB0aGVpciBlbmVtaWVzLiBCdXQgaWYKICAgICAgICAgICAgICAgICAgICB3ZSBtYXkganVkZ2UgZnJvbSBoaXMgcHJlc2VudCBjb25kdWN0LCBpdCBpcyBwbGFpbiB0aGF0IG9uIHRoYXQgb2NjYXNpb24gYWxzbyBoZQogICAgICAgICAgICAgICAgICAgIGFjdGVkIGZyb20gZGVsaWJlcmF0ZSBjaG9pY2UsIGFuZCBldmVyeXRoaW5nLCBpZiBjb3JyZWN0bHkgb2JzZXJ2ZWQsIHBvaW50cyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBmYWN0IHRoYXQgYWxsIGhpcyBpbnRyaWd1ZXMgYXJlIGRpcmVjdGVkIGFnYWluc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gPG1pbGVzdG9uZSBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdG9kYXkgYXQgYW55IHJhdGUgdGhpcyBwb2xpY3kgaXMgaW4gYSBtZWFzdXJlIGZvcmNlZCB1cG9uIGhpbS4gRm9yCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZSEgSGUgd2FudHMgdG8gcnVsZSwgYW5kIGhlIGhhcyBtYWRlIHVwIGhpcyBtaW5kIHRoYXQgeW91LCBhbmQgeW91IG9ubHksCiAgICAgICAgICAgICAgICAgICAgYXJlIGhpcyByaXZhbHMuIEhlIGhhcyBsb25nIGluanVyZWQgeW91OyBvZiBub3RoaW5nIGlzIGhlIG1vcmUgY29uc2Npb3VzIHRoYW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGF0LiBGb3IgaXQgaXMgYnkgaG9sZGluZyB0aGUgY2l0aWVzIHdoaWNoIGFyZSByZWFsbHkgeW91cnMgdGhhdCBoZSByZXRhaW5zCiAgICAgICAgICAgICAgICAgICAgc2FmZSBwb3NzZXNzaW9uIG9mIGFsbCB0aGUgcmVzdCwgYW5kIGhlIGZlZWxzIHRoYXQgaWYgaGUgZ2F2ZSB1cCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDgxNCIga2V5PSJ0Z24sNjAwNDgxNCI+UG90aWRhZWE8L3BsYWNlTmFtZT4sIGhpcyBvd24gY291bnRyeSB3b3VsZCBub3QgYmUgc2FmZQogICAgICAgICAgICAgICAgICAgIGZvciBoaW0uIDxtaWxlc3RvbmUgbj0iMTgiIHVuaXQ9InNlY3Rpb24iIC8+SGUga25vd3MsIHRoZW4sIHRoZXNlIHR3bwogICAgICAgICAgICAgICAgICAgIGZhY3Rz4oCUdGhhdCBoZSBpcyBpbnRyaWd1aW5nIGFnYWluc3QgeW91IGFuZCB0aGF0IHlvdSBhcmUgYXdhcmUgb2YgaXQuCiAgICAgICAgICAgICAgICAgICAgQXNzdW1pbmcgdGhhdCB5b3UgYXJlIGludGVsbGlnZW50LCBoZSB0aGlua3MgeW91IGFyZSBib3VuZCB0byBoYXRlIGhpbSwgYW5kIGhlCiAgICAgICAgICAgICAgICAgICAgaXMgb24gdGhlIGFsZXJ0LCBleHBlY3Rpbmcgc29tZSBibG93IHRvIGZhbGwsIGlmIHlvdSBjYW4gc2VpemUgYW4gb3Bwb3J0dW5pdHkKICAgICAgICAgICAgICAgICAgICBhbmQgaWYgaGUgY2Fubm90IGdldCBpbiBoaXMgYmxvdyBmaXJzdC4gPG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0CiAgICAgICAgICAgICAgICAgICAgaXMgd2h5IGhlIGlzIHdpZGUgYXdha2UgYW5kIHJlYWR5IHRvIHN0cmlrZSwgYW5kIHdoeSBoZSBpcyBjb3VydGluZyBjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHRvIHRoZSBkZXRyaW1lbnQgb2Ygb3VyIGNpdHnigJRUaGViYW5zLCBJIG1lYW4sIGFuZCB0aG9zZQogICAgICAgICAgICAgICAgICAgIFBlbG9wb25uZXNpYW5zIHdobyBzaGFyZSB0aGVpciB2aWV3cy4gSGUgaW1hZ2luZXMgdGhhdCB0aGVpciBjdXBpZGl0eSB3aWxsIGxlYWQKICAgICAgICAgICAgICAgICAgICB0aGVtIHRvIGFjY2VwdCB0aGUgcHJlc2VudCBzaXR1YXRpb24sIHdoaWxlIHRoZWlyIG5hdHVyYWwgZHVsbG5lc3Mgd2lsbCBwcmV2ZW50CiAgICAgICAgICAgICAgICAgICAgdGhlbSBmcm9tIGZvcmVzZWVpbmcgYW55dGhpbmcgdGhhdCBtYXkgZm9sbG93LiBZZXQgbWVuIG9mIGV2ZW4gbW9kZXJhdGUKICAgICAgICAgICAgICAgICAgICBpbnRlbGxpZ2VuY2UgbWlnaHQgcGVyY2VpdmUgc29tZSBjbGVhciBpbmRpY2F0aW9ucywgd2hpY2ggSSBoYWQgb2NjYXNpb24gdG8KICAgICAgICAgICAgICAgICAgICBwb2ludCBvdXQgdG8gdGhlIE1lc3NlbmlhbnMgYW5kIHRoZSBBcmdpdmVzLCBhbmQgd2hpY2ggbWF5IHBlcmhhcHMgd2l0aAogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZSBiZSByZXBlYXRlZCB0byB5b3UuIDxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz7igJxDYW4geW91IG5vdCBpbWFnaW5lLOKAnSBJIHNhaWQsCiAgICAgICAgICAgICAgICAgICAgYWRkcmVzc2luZyB0aGUgTWVzc2VuaWFucywg4oCcaG93IGFubm95ZWQgdGhlIE9seW50aGlhbnMgd291bGQgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgdG8gaGVhciBhIHdvcmQgc2FpZCBhZ2FpbnN0IFBoaWxpcCBpbiB0aGUgZGF5cyB3aGVuIGhlIHdhcyBoYW5kaW5nIG92ZXIgdG8gdGhlbQogICAgICAgICAgICAgICAgICAgIEFudGhlbXVzLCB0byB3aGljaCBhbGwgdGhlIGZvcm1lciBraW5ncyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IGxhaWQgY2xhaW0sIHdoZW4gaGUgd2FzIG1ha2luZyB0aGVtIGEgcHJlc2VudCBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDgxNCIga2V5PSJ0Z24sNjAwNDgxNCI+UG90aWRhZWE8L3BsYWNlTmFtZT4sIGV4cGVsbGluZyB0aGUgQXRoZW5pYW4KICAgICAgICAgICAgICAgICAgICBzZXR0bGVycywgYW5kIHdoZW4gaGUgaGFkIHRha2VuIHVwb24gaGltc2VsZiB0aGUgcmVzcG9uc2liaWxpdHkgb2YgYSBxdWFycmVsCiAgICAgICAgICAgICAgICAgICAgd2l0aCB1cyBhbmQgaGFkIGdpdmVuIHRoZW0gdGhlIHRlcnJpdG9yeSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDgxNCIga2V5PSJ0Z24sNjAwNDgxNCI+UG90aWRhZWE8L3BsYWNlTmFtZT4gZm9yIHRoZWlyIG93biB1c2U/IERvIHlvdSBpbWFnaW5lIHRoZXkgZXhwZWN0ZWQgdG8gYmUKICAgICAgICAgICAgICAgICAgICB0cmVhdGVkIGFzIHRoZXkgaGF2ZSBiZWVuLCBvciB3b3VsZCBoYXZlIGJlbGlldmVkIGFueW9uZSB3aG8gc3VnZ2VzdGVkIGl0PwogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcyzigJ0gc2FpZCBJLAogICAgICAgICAgICAgICAgICAgIOKAnGFmdGVyIGEgYnJpZWYgZW5qb3ltZW50IG9mIG90aGVyIG1lbidzIHRlcnJpdG9yeSwgdGhleSBoYXZlIGxvbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIHJvYmJlZCBieSBQaGlsaXAgb2YgdGhlaXIgb3duLCBleHBlbGxlZCB3aXRoIGNvbnR1bWVseSwgbm90IG1lcmVseSB2YW5xdWlzaGVkCiAgICAgICAgICAgICAgICAgICAgYnV0IGJldHJheWVkLCBib3VnaHQgYW5kIHNvbGQgYnkgdGhlaXIgb3duIGNvdW50cnktbWVuLiBGb3IgdHJ1bHkgc3VjaCBjbG9zZQogICAgICAgICAgICAgICAgICAgIGNvbW11bmljYXRpb25zIHdpdGggdHlyYW5ueSBjb3JydXB0IGdvb2QgY29uc3RpdHV0aW9ucy4gPG1pbGVzdG9uZSBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hhdCBvZiB0aGUgVGhlc3NhbGlhbnM/IERvIHlvdQogICAgICAgICAgICAgICAgICAgIGltYWdpbmUs4oCdIEkgc2FpZCwg4oCcdGhhdCB3aGVuIGhlIHdhcyBleHBlbGxpbmcgdGhlaXIgZGVzcG90cywKICAgICAgICAgICAgICAgICAgICBvciBhZ2FpbiB3aGVuIGhlIHdhcyBwcmVzZW50aW5nIHRoZW0gd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE5pY2FlYSIga2V5PSJwZXJzZXVzLE5pY2FlYSI+TmljYWVhPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1MSIga2V5PSJ0Z24sNzAwMjc1MSI+TWFnbmVzaWE8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhleSBldmVyIGRyZWFtZWQgdGhhdCBhIENvdW5jaWwgb2YgVGVuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BY2NvcmRpbmcgdG8gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gOS4yNiIgdmFsaWQ9InllcyI+RGVtLiA5LjI2PC9iaWJsPiBQaGlsaXAgc2V0IHVwCiAgICAgICAgICAgICAgICAgICAgICAgICZndDt0ZXRyYXJjaGllcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5OSIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSB0d28gYWNjb3VudHMgbWF5IGJlIHJlY29uY2lsZWQgYnkgYXNzdW1pbmcgdGhhdCBoZSByZXRhaW5lZCB0aGUgb2xkCiAgICAgICAgICAgICAgICAgICAgICAgIGZvdXJmb2xkIGRpdmlzaW9uIG9mIHRoZSBjb3VudHJ5LCBidXQgc2V0IHVwIGFuIG9saWdhcmNoeSBvZiB0ZW4gaW4gZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBkaXZpc2lvbi4gUGhpbGlwLCB3aG9zZSBwb2xpY3kgd2FzIHRvIGRpdmlkZSBhbmQgY29ucXVlciwgd291bGQgYmUgdW5saWtlbHkKICAgICAgICAgICAgICAgICAgICAgICAgdG8gY2VudHJhbGl6ZSB0aGUgZ292ZXJubWVudC4gSXQgaXMganVzdCBwb3NzaWJsZSB0aGF0IDxmb3JlaWduIGxhbmc9ImdyZWVrIj7OtM61zrrOsc60zrHPgc+H4b23zrHOvTwvZm9yZWlnbj4gbWF5IGJlIGEgbWlzdGFrZW4gYW1wbGlmaWNhdGlvbiBvZiA8Zm9yZWlnbiBsYW5nPSJncmVlayI+zpTigJnOsc+Bz4fhvbfOsc69PC9mb3JlaWduPj08Zm9yZWlnbiBsYW5nPSJncmVlayI+z4TOtc+Ez4HOsc+Bz4fhvbfOsc69PC9mb3JlaWduPiwgYnV0IGluIHRoYXQgY2FzZSB0aGUgc2luZ3VsYXIgd291bGQgYmUgc3RyYW5nZS4KICAgICAgICAgICAgICAgICAgICAgICAgT3dpbmcgdG8gdGhlIGRlY2FyY2hpZXMgd2hpY2ggTHlzYW5kZXIgaW1wb3NlZCBvbiBzbyBtYW55IGZyZWUgY2l0aWVzIGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBlbmQgb2YgdGhlIFBlbG9wb25uZXNpYW4gd2FyLCB0aGUgbnVtYmVyIHRlbiB3b3VsZCBoYXZlIHRoZSBzYW1lIHNpbmlzdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGFzc29jaWF0aW9ucyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IGFzIGl0IGhhZCBhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBhbmQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTgxNTkiIGtleT0idGduLDcwMTgxNTkiPlZlbmljZTwvcGxhY2VOYW1lPi48L25vdGU+IHdvdWxkIGJlIGVzdGFibGlzaGVkIGFtb25nCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgYXMgaXQgaXMgdG9kYXksIG9yIHRoYXQgdGhlIHNhbWUgbWFuIHdobyByZXN0b3JlZCB0byB0aGVtIHRoZSBBbXBoaWN0eW9uaWMKICAgICAgICAgICAgICAgICAgICBtZWV0aW5nIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4gd291bGQKICAgICAgICAgICAgICAgICAgICBhbHNvIGFwcHJvcHJpYXRlIHRoZWlyIG93biBwZWN1bGlhciByZXZlbnVlcz8gSW1wb3NzaWJsZSEgQnV0IHNvIGl0IGNhbWUgdG8KICAgICAgICAgICAgICAgICAgICBwYXNzLCBhcyBhbGwgbWVuIG1heSBrbm93LiA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPllvdSzigJ0gSQogICAgICAgICAgICAgICAgICAgIHNhaWQsIOKAnGdhemUgd2l0aCB3b25kZXIgYXQgUGhpbGlwIGFzIGhlIGdpdmVzIGF3YXkgdGhpcyBhbmQgcHJvbWlzZXMKICAgICAgICAgICAgICAgICAgICB0aGF0LCBidXQgaWYgeW91IGFyZSB0cnVseSB3aXNlLCBwcmF5IHRoYXQgeW91IG1heSBuZXZlciBmaW5kIHRoYXQgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgZGVjZWl2ZWQgYW5kIGNvemVuZWQgeW91LiBWZXJpbHks4oCdIEkgc2FpZCwg4oCcdGhlcmUgYXJlCiAgICAgICAgICAgICAgICAgICAgbWFuaWZvbGQgbWVhbnMgZGV2aXNlZCBieSBzdGF0ZXMgZm9yIHByb3RlY3Rpb24gYW5kIHNhZmV0eeKAlHN0b2NrYWRlcywKICAgICAgICAgICAgICAgICAgICByYW1wYXJ0cywgZm9zc2VzIGFuZCB0aGUgbGlrZS4gPG1pbGVzdG9uZSBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWxsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgYXJlIHdyb3VnaHQgYnkgaGFuZCBhbmQgZW50YWlsIGV4cGVuc2UuIEJ1dCB0aGVyZSBpcyBvbmUgY29tbW9uIGJ1bHdhcmsgd2hpY2gKICAgICAgICAgICAgICAgICAgICB0aGUgaW5zdGluY3Qgb2Ygc2Vuc2libGUgbWVuIHBvc3Nlc3NlcyB3aXRoaW4gaXRzZWxmLCBhIGdvb2QgYW5kIHNhZmUgb25lIGZvcgogICAgICAgICAgICAgICAgICAgIGFsbCwgYnV0IGludmFsdWFibGUgZm9yIGRlbW9jcmFjaWVzIGFnYWluc3QgdHlyYW50cy4gQW5kIHdoYXQgaXMgdGhhdCBidWx3YXJrPwogICAgICAgICAgICAgICAgICAgIEl0IGlzIG1pc3RydXN0LiBHdWFyZCB0aGF0OyBob2xkIGZhc3QgdG8gdGhhdC4gSWYgeW91IHByZXNlcnZlIGl0LCBubyBoYXJtIGNhbgogICAgICAgICAgICAgICAgICAgIHRvdWNoIHlvdS4gPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGlzIHlvdXIgb2JqZWN0P+KAnSBJCiAgICAgICAgICAgICAgICAgICAgc2FpZC4g4oCcRnJlZWRvbS4gVGhlbiBkbyB5b3Ugbm90IHNlZSB0aGF0IFBoaWxpcCdzIHZlcnkgdGl0bGVzIGFyZQogICAgICAgICAgICAgICAgICAgIHV0dGVybHkgaXJyZWNvbmNpbGFibGUgd2l0aCB0aGF0PyBGb3IgZXZlcnkga2luZywgZXZlcnkgZGVzcG90IGlzIHRoZSBzd29ybiBmb2UKICAgICAgICAgICAgICAgICAgICBvZiBmcmVlZG9tIGFuZCBvZiBsYXcuIEJld2FyZSzigJ0gc2FpZCBJLCDigJxsZXN0LCBzZWVraW5nIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgcmlkIG9mIHdhciwgeW91IGZpbmQgYSBtYXN0ZXIu4oCdIDxtaWxlc3RvbmUgbj0iMjYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGF0IGlzIHdoYXQgSSBzYWlkIHRvIHRoZW0sIGFuZCB0aGV5CiAgICAgICAgICAgICAgICAgICAgc2hvdXRlZCB0aGVpciBhcHByb3ZhbDsgYW5kIHRoZXkgaGVhcmQgbWFueSBvdGhlciBzcGVlY2hlcyBmcm9tIHRoZSBlbnZveXMsIGJvdGgKICAgICAgICAgICAgICAgICAgICBpbiBteSBwcmVzZW5jZSBhbmQgYWdhaW4gbGF0ZXIsIGFzIGl0IHNlZW1zOyBidXQgdGhleSBhcmUgbm9uZSB0aGUgbW9yZSBsaWtlbHkKICAgICAgICAgICAgICAgICAgICB0byBkbyB3aXRob3V0IFBoaWxpcCdzIGZyaWVuZHNoaXAgYW5kIFBoaWxpcCdzIHByb21pc2VzLiA8bWlsZXN0b25lIG49IjI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCwgaW5kZWVkLCBpdCBpcyBub3Qgc3RyYW5nZSB0aGF0IE1lc3NlbmlhbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgUGVsb3Bvbm5lc2lhbnMgc2hvdWxkIHNvbWV0aW1lcyBhY3QgYWdhaW5zdCB0aGVpciBiZXR0ZXIganVkZ2VtZW50OyBidXQKICAgICAgICAgICAgICAgICAgICB5b3UsIHdobyBrbm93LCBib3RoIGZyb20geW91ciBvd24gaW50ZWxsaWdlbmNlIGFuZCBmcm9tIG91ciBzcGVlY2hlcywgaG93IHlvdQogICAgICAgICAgICAgICAgICAgIGFyZSBjb21wYXNzZWQgYWJvdXQgd2l0aCBwbG90cyBhbmQgc25hcmVzLCB5b3Ugd2lsbCwgYXMgaXQgc2VlbXMgdG8gbWUsIGZpbmQgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIHN1cnByaXNlIHRoYXQgdGhyb3VnaCBoYXZpbmcgZG9uZSBub3RoaW5nIGluIHRpbWUsIHlvdSBoYXZlIHN1Ym1pdHRlZCB0bwogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcuIFNvIG11Y2ggZG9lcyB0aGUgcGxlYXN1cmUgYW5kIGVhc2Ugb2YgdGhlIG1vbWVudCBwcmV2YWlsIG92ZXIgdGhhdAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGF0IHNvbWUgZnV0dXJlIHRpbWUgaXMgbGlrZWx5IHRvIGJlIGFkdmFudGFnZW91cy4gPG1pbGVzdG9uZSBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9uIHlvdXIgcHJhY3RpY2FsCiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZXMgeW91IHdpbGwsIGlmIHlvdSBhcmUgd2lzZSwgZGVsaWJlcmF0ZSBoZXJlYWZ0ZXIgYnkgeW91cnNlbHZlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+aS5lLiB3aGVuIHRoZSBmb3JlaWduIGVudm95cyBoYXZlIHdpdGhkcmF3bi4gQXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBwb2ludCwgaWYgbm90IGF0IHRoZSBlbmQgb2YgdGhlIHNwZWVjaCwgdGhlIHByb3Bvc2VkIGFuc3dlciB3YXMgcmVhZC4KICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyBub3QgaW5kaWNhdGVkIGluIHRoZSBNU1MuPC9ub3RlPjsgYXQgcHJlc2VudCBJIHdpbGwgc3VnZ2VzdCB0aGUKICAgICAgICAgICAgICAgICAgICBpbW1lZGlhdGUgYW5zd2VyIHdoaWNoIGl0IHdvdWxkIGJlIHByb3BlciBmb3IgeW91IHRvIGFkb3B0LjxxdW90ZSB0eXBlPSJBbnN3ZXIiPkFuc3dlcjwvcXVvdGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCB3b3VsZCBpbmRlZWQgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgZmFpciwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRvIGNhbGwgdXBvbgogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBjb252ZXllZCB0byB5b3UgUGhpbGlwJ3MgcHJvbWlzZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgYXVkaWVuY2UgbWlnaHQgZmFpcmx5IGNhbGwgdXBvbiBtZW4gbGlrZSBBcmlzdG9kZW11cywgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDE2MTAiIGtleT0idGduLDYwMDE2MTAiPkN0ZXNpcGhvbjwvcGxhY2VOYW1lPiwgYW5kIE5lb3B0b2xlbXVzIO+8iDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjEzIiB2YWxpZD0ieWVzIj5EZW0uIDE5LjEzPC9iaWJsPiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuMzE1IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOS4zMTU8L2JpYmw+77yJIHRvIGV4cGxhaW4gaG93IHRoZXkgY2FtZSB0byBtYWtlIHRoZW1zZWx2ZXMKICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2libGUgZm9yIHRoZXNlIHByb21pc2VzLCB0byB3aGljaCBQaGlsaXAgaGFkIG5vdCBhY3R1YWxseSBjb21taXR0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgaGltc2VsZi48L25vdGU+IG9uIHRoZSBzdHJlbmd0aCBvZiB3aGljaCB5b3Ugd2VyZSBpbmR1Y2VkIHRvIGNvbmNsdWRlIHRoZQogICAgICAgICAgICAgICAgICAgIFBlYWNlLiA8bWlsZXN0b25lIG49IjI5IiB1bml0PSJzZWN0aW9uIiAvPkZvciBJIHNob3VsZCBuZXZlciBteXNlbGYgaGF2ZQogICAgICAgICAgICAgICAgICAgIGNvbnNlbnRlZCB0byBzZXJ2ZSBvbiB0aGUgZW1iYXNzeSwgbm9yIHdvdWxkIHlvdSwgSSBhbSBzdXJlLCBoYXZlIHN1c3BlbmRlZAogICAgICAgICAgICAgICAgICAgIG1pbGl0YXJ5IG9wZXJhdGlvbnMsIGlmIHlvdSBoYWQgaW1hZ2luZWQgdGhhdCBQaGlsaXAgYWZ0ZXIgc2VjdXJpbmcgcGVhY2Ugd291bGQKICAgICAgICAgICAgICAgICAgICBhY3QgYXMgaGUgaGFzIGRvbmU7IGJ1dCBoaXMgd29yZHMgYXQgdGhlIHRpbWUgd2VyZSB2ZXJ5IGRpZmZlcmVudCBmcm9tIGhpcwogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgYWN0aW9ucy4gWWVzLCBhbmQgdGhlcmUgYXJlIG90aGVycyB3aG8gb3VnaHQgdG8gYmUgY2FsbGVkIHVwb24uIFdob20gZG8KICAgICAgICAgICAgICAgICAgICBJIG1lYW4/IFRoZSBtZW4gd2hvLCB3aGVuIHBlYWNlIHdhcyBtYWRlIGFuZCB3aGVuIEksIHJldHVybmluZyBmcm9tIHRoZSBzZWNvbmQKICAgICAgICAgICAgICAgICAgICBlbWJhc3N54oCUdGhhdCBzZW50IHRvIGFkbWluaXN0ZXIgdGhlIG9hdGhz4oCUZm91bmQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZSB3YXMgYmVpbmcgaW1wb3NlZCB1cG9uLCBhbmQgc3Bva2Ugb3V0IGFuZCBwcm90ZXN0ZWQgYW5kIHJlZnVzZWQgdG8gZ2l2ZSB1cAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBQaG9jaWFuc+KAlCA8bWlsZXN0b25lIG49IjMwIiB1bml0PSJzZWN0aW9uIiAvPnRoZSBtZW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BZXNjaGluZXMgYW5kLCBpbiBwYXJ0aWN1bGFyLCBQaGlsb2NyYXRlcyDvvIg8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOS40NiIgdmFsaWQ9InllcyI+RGVtLiAxOS40NjwvYmlibD7vvIkuPC9ub3RlPiBJIHNheSwgd2hvIHRvbGQgeW91CiAgICAgICAgICAgICAgICAgICAgdGhhdCBJLCBiZWluZyBhIHdhdGVyLWRyaW5rZXIsIHdhcyBuYXR1cmFsbHkgYSBkaXNhZ3JlZWFibGUsIGNyb3NzLWdyYWluZWQKICAgICAgICAgICAgICAgICAgICBmZWxsb3csIGFuZCB0aGF0IFBoaWxpcCwgaWYgaGUgZ290IHRocm91Z2ggdGhlIFBhc3MsIHdvdWxkIGRvIGp1c3Qgd2hhdCB5b3UKICAgICAgICAgICAgICAgICAgICB3b3VsZCBwcmF5IGZvciwgd291bGQgZm9ydGlmeSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNTAwNDI1OCIga2V5PSJ0Z24sNTAwNDI1OCI+VGhlc3BpYWU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQbGF0YWVhIiBrZXk9InBlcnNldXMsUGxhdGFlYSI+UGxhdGFlYTwvcGxhY2VOYW1lPiwgYW5kIGh1bWJsZSB0aGUgVGhlYmFuCiAgICAgICAgICAgICAgICAgICAgcHJpZGUsIGFuZCBkaWcgYSB0cmVuY2ggYWNyb3NzIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDM0NSIga2V5PSJ0Z24sNzAxMDM0NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VG8gcHJvdGVjdCB0aGUgR3JlZWsKICAgICAgICAgICAgICAgICAgICAgICAgY2l0aWVzIGZyb20gdGhlIHJhaWRzIG9mIHRoZSBUaHJhY2lhbnMuPC9ub3RlPiBhdCBoaXMgb3duIGNoYXJnZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIHJlc3RvcmUgdG8geW91IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gYW5kIE9yb3B1cyBpbgogICAgICAgICAgICAgICAgICAgIGxpZXUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPi4gQWxsIHRoaXMgd2FzCiAgICAgICAgICAgICAgICAgICAgc2FpZCBmcm9tIHRoaXMgdmVyeSBwbGF0Zm9ybSwgYXMgSSBhbSBzdXJlIHlvdSByZWNvbGxlY3QsIGFsdGhvdWdoIHlvdSBhcmUgbm90CiAgICAgICAgICAgICAgICAgICAgcmVtYXJrYWJsZSBmb3Iga2VlcGluZyBpbiBtaW5kIHRob3NlIHdobyBpbmp1cmUgeW91LiA8bWlsZXN0b25lIG49IjMxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgY3Jvd25pbmcgZGlzZ3JhY2UgaXMgdGhhdCB5b3VyIHBvc3Rlcml0eSBhbHNvIGlzIGJvdW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgcGVhY2Ugd2hpY2ggdGhlc2UgaG9wZXMgcHJvbXB0ZWQgeW91IHRvIGNvbmNsdWRlOyBzbyBjb21wbGV0ZWx5IHdlcmUKICAgICAgICAgICAgICAgICAgICB5b3UgbGVkIGFzdHJheS4gV2h5IGRvIEkgbWVudGlvbiB0aGlzIG5vdyBhbmQgYXNzZXJ0IHRoYXQgdGhlc2UgbWVuIG91Z2h0IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgY2FsbGVkIHVwb24/IEkgdm93IHRoYXQgSSB3aWxsIGJvbGRseSB0ZWxsIHlvdSB0aGUgd2hvbGUgdHJ1dGggYW5kIGtlZXAgbm90aGluZwogICAgICAgICAgICAgICAgICAgIGJhY2suIDxtaWxlc3RvbmUgbj0iMzIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgbm90IHRoYXQgYnkgZGVzY2VuZGluZyB0byBhYnVzZSBJCiAgICAgICAgICAgICAgICAgICAgbWF5IGxheSBteXNlbGYgb3BlbiB0byByZXRhbGlhdGlvbiBpbiB5b3VyIHByZXNlbmNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIEdyZWVrIGlzIGRpZmZpY3VsdCwgYW5kIGVkaXRvcnMgYXJlIG9mIG1hbnkgbWluZHMuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICB1c3VhbCBtZWFuaW5nIG9mIDxmb3JlaWduIGxhbmc9ImdyZWVrIj7Ou+G9uc6zzr/OvSDPgM6/zrnOteG/ls69PC9mb3JlaWduPiwKICAgICAgICAgICAgICAgICAgICAgICAg4oCcdG8gZ3JhbnQgYSBoZWFyaW5nLOKAnSBzZWVtcyBpbXBvc3NpYmxlIGhlcmUuIFBlcmhhcHMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxpdGVyYWwgbWVhbmluZyBpcyDigJxjYXVzZSBzcGVlY2ggYWdhaW5zdCBteXNlbGYgaW4geW91ciBwcmVzZW5jZQogICAgICAgICAgICAgICAgICAgICAgICBvbiBlcXVhbCB0ZXJtcyzigJ0gaS5lLiBnaXZlIG15IGVuZW1pZXMgYW4gb3BlbmluZyB0byByZXBseSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2FtZSBzdHlsZSwgd2hpY2gsIERlbW9zdGhlbmVzIGhpbnRzLCB3b3VsZCBiZSBhbiBpbnN1bHQgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGllbmNlLjwvbm90ZT4gd2hpbGUgSSBnaXZlIHRob3NlIHdobyBmcm9tIHRoZSBmaXJzdCBoYXZlIGZhbGxlbiBmb3VsIG9mCiAgICAgICAgICAgICAgICAgICAgbWUgYW4gZXhjdXNlIGZvciBtYWtpbmcgZnVydGhlciBwcm9maXQgb3V0IG9mIFBoaWxpcC4gTm9yIGRvIEkgd2lzaCB0byBpbmR1bGdlCiAgICAgICAgICAgICAgICAgICAgaW4gaWRsZSB0YWxrLiBCdXQgSSB0aGluayB0aGF0IG9uZSBkYXkgUGhpbGlwJ3MgcG9saWN5IHdpbGwgY2F1c2UgeW91IG1vcmUKICAgICAgICAgICAgICAgICAgICBkaXN0cmVzcyB0aGFuIGl0IGRvZXMgbm93LCA8bWlsZXN0b25lIG49IjMzIiB1bml0PSJzZWN0aW9uIiAvPmZvciBJIHNlZSB0aGUgcGxvdAogICAgICAgICAgICAgICAgICAgIHRoaWNrZW5pbmcuIEkgaG9wZSBJIG1heSBwcm92ZSBhIGZhbHNlIHByb3BoZXQsIGJ1dCBJIGZlYXIgdGhlIGNhdGFzdHJvcGhlIGlzCiAgICAgICAgICAgICAgICAgICAgZXZlbiBub3cgb25seSB0b28gbmVhci4gU28gd2hlbiB5b3UgY2FuIG5vIGxvbmdlciBzaHV0IHlvdXIgZXllcyB0byB3aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgaGFwcGVuaW5nLCB3aGVuIHlvdSBkbyBub3QgbmVlZCBtZSBvciBzb21lb25lIGVsc2UgdG8gdGVsbCB5b3UsIGJ1dCBjYW4gYWxsIHNlZQogICAgICAgICAgICAgICAgICAgIGZvciB5b3Vyc2VsdmVzIGFuZCBiZSBxdWl0ZSBjZXJ0YWluIHRoYXQgYWxsIHRoaXMgaXMgZGlyZWN0ZWQgYWdhaW5zdCB5b3UsIHRoZW4KICAgICAgICAgICAgICAgICAgICBJIGV4cGVjdCB5b3Ugd2lsbCBiZSBhbmdyeSBhbmQgZXhhc3BlcmF0ZWQuIDxtaWxlc3RvbmUgbj0iMzQiIHVuaXQ9InNlY3Rpb24iIC8+WWVzLCBJIGFtIGFmcmFpZCB0aGF0LCBzaW5jZSB0aGUgYW1iYXNzYWRvcnMgaGF2ZSBrZXB0IHNpbGVuY2UgYWJvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VydmljZXMgZm9yIHdoaWNoIHRoZXkga25vdyB0aGV5IGhhdmUgYmVlbiBicmliZWQsIHRob3NlIHdobyBhcmUgdHJ5aW5nIHRvCiAgICAgICAgICAgICAgICAgICAgcmVwYWlyIHNvbWUgb2YgdGhlIGxvc3NlcyB0aGF0IHRoZXNlIG1lbiBoYXZlIGNhdXNlZCBtYXkgY2hhbmNlIHRvIGZhbGwgdW5kZXIKICAgICAgICAgICAgICAgICAgICB5b3VyIGRpc3BsZWFzdXJlOyBmb3IgSSBvYnNlcnZlIHRoYXQgcGVvcGxlIHZlbnQgdGhlaXIgd3JhdGggYXMgYSBydWxlLCBub3Qgb24KICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gYXJlIHRvIGJsYW1lLCBidXQgY2hpZWZseSBvbiB0aG9zZSB3aG8gYXJlIHdpdGhpbiB0aGVpciByZWFjaC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlcmVmb3JlLCB3aGlsZSB0aGUgZGFuZ2VyIGlzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGZ1dHVyZSBhbmQgaXMgZ2F0aGVyaW5nIGhlYWQsIHdoaWxlIHdlIGNhbiBzdGlsbCBoZWFyIG9uZSBhbm90aGVyIHNwZWFrLCBJIHdhbnQKICAgICAgICAgICAgICAgICAgICB0byByZW1pbmQgZWFjaCBvbmUgb2YgeW91LCBob3dldmVyIGNsZWFybHkgaGUga25vd3MgaXQsIHdobyBpdCBpcyB0aGF0IHBlcnN1YWRlZAogICAgICAgICAgICAgICAgICAgIHlvdSB0byBhYmFuZG9uIHRoZSBQaG9jaWFucyBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiwgdGhlIGNvbW1hbmQgb2Ygd2hpY2ggZ2F2ZSBQaGlsaXAgdGhlIGNvbW1hbmQgYWxzbwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSByb2FkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4gYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIga2V5PSJ0Z24sNzAxNzA3NiI+UGVsb3Bvbm5lc3VzPC9wbGFjZU5hbWU+LCBhbmQgd2hvIGl0IGlzIHRoYXQKICAgICAgICAgICAgICAgICAgICBoYXMgZm9yY2VkIHlvdSB0byB0YWtlIGNvdW5zZWwsIG5vdCBmb3IgeW91ciByaWdodHMgYW5kIGludGVyZXN0cyBhYnJvYWQsIGJ1dAogICAgICAgICAgICAgICAgICAgIGZvciB5b3VyIHBvc3Nlc3Npb25zIGhlcmUgYXQgaG9tZSBhbmQgZm9yIHRoZSB3YXIgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiwgYSB3YXIgd2hpY2ggd2lsbCBicmluZyBkaXN0cmVzcyBvbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IG9uZSBvZiB1cywgd2hlbiBpdCBkb2VzIGNvbWUsIGJ1dCB3aGljaCByZWFsbHkgZGF0ZXMgZnJvbSB0aGF0IHZlcnkgZGF5LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjM2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiB5b3UgaGFkIG5vdCBiZWVuIGhvb2R3aW5rZWQgdGhlbiwKICAgICAgICAgICAgICAgICAgICB0aGVyZSB3b3VsZCBiZSBubyBhbnhpZXR5IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBQaGlsaXAgY291bGQgbmV2ZXIsIG9mIGNvdXJzZSwgaGF2ZSBnYWluZWQgY29tbWFuZCBvZiB0aGUgc2VhIGFuZAogICAgICAgICAgICAgICAgICAgIHJlYWNoZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiB3aXRoIGhpcyBmbGVldCwgbm9yCiAgICAgICAgICAgICAgICAgICAgY291bGQgaGUgaGF2ZSBtYXJjaGVkIHBhc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiBhbmQgUGhvY2lzLCBidXQgZWl0aGVyIGhlIHdvdWxkIGhhdmUgYWN0ZWQgZmFpcmx5CiAgICAgICAgICAgICAgICAgICAgYW5kIG9ic2VydmVkIHRoZSBQZWFjZSBieSBrZWVwaW5nIHF1aWV0LCBvciBoZSB3b3VsZCBoYXZlIGJlZW4gaW5zdGFudGx5IGVuZ2FnZWQKICAgICAgICAgICAgICAgICAgICBpbiBhIHdhciBzaW1pbGFyIHRvIHRoYXQgd2hpY2ggbWFkZSBoaW0gc28gYW54aW91cyBmb3IgdGhlIFBlYWNlLiA8bWlsZXN0b25lIG49IjM3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RW5vdWdoIGhhcyBub3cgYmVlbgogICAgICAgICAgICAgICAgICAgIHNhaWQgYnkgd2F5IG9mIHJlbWluZGVyLiBNYXkgYWxsIHRoZSBnb2RzIGZvcmJpZCB0aGF0IG15IHdhcm5pbmdzIHNob3VsZCBldmVyIGJlCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCB0byB0aGUgc3Rlcm5lc3QgdGVzdCEgRm9yIEkgd291bGQgbm90IHdpbGxpbmdseSBzZWUgb25lIG1hbiBzdWZmZXIsIGV2ZW4KICAgICAgICAgICAgICAgICAgICB0aG91Z2ggaGUgZGVzZXJ2ZSB0byBwZXJpc2gsIGlmIGhpcyBwdW5pc2htZW50IGludm9sdmVzIHRoZSBkYW5nZXIgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGRhbWFnZSBvZiBhbGwuPC9wPgogICAgICAgICAgICA8L2RpdjE+CgogICAgICAgICAgICA8aGVhZCBjbGFzcz0idHJhbnNsYXRpb24iPlNlY29uZCBQaGlsaXBwaWM8L2hlYWQ+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbmV2ZXIsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3ZSBhcmUgZGlzY3Vzc2luZwogICAgICAgICAgICAgICAgICAgIFBoaWxpcCdzIGludHJpZ3VlcyBhbmQgaGlzIHZpb2xhdGlvbnMgb2YgdGhlIHBlYWNlLCBJIG9ic2VydmUgdGhhdCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgc3BlZWNoZXMgb24gb3VyIHNpZGUgYXJlIG1hbmlmZXN0bHkgaW5zcGlyZWQgYnkganVzdGljZSBhbmQgZ2VuZXJvc2l0eSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGRlbm91bmNlIFBoaWxpcCBhcmUgYWxsIGZlbHQgdG8gYmUgc2F5aW5nIGV4YWN0bHkgdGhlIHJpZ2h0IHRoaW5nOyBidXQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbXVjaCBuZWVkZWQgYWN0aW9uLCB3aGljaCBhbG9uZSB3b3VsZCBtYWtlIHRoZSBzcGVlY2hlcyB3b3J0aCBoZWFyaW5nLAogICAgICAgICAgICAgICAgICAgIGxpdHRsZSBvciBub3RoaW5nIGVuc3Vlcy4gPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlVuZm9ydHVuYXRlbHkgYWxsIG91cgogICAgICAgICAgICAgICAgICAgIG5hdGlvbmFsIGFmZmFpcnMgaGF2ZSBub3cgcmVhY2hlZCB0byBzdWNoIGEgcGFzcywgdGhhdCB0aGUgbW9yZSBjb21wbGV0ZWx5IGFuZAogICAgICAgICAgICAgICAgICAgIG1hbmlmZXN0bHkgUGhpbGlwIGlzIGNvbnZpY3RlZCBvZiB2aW9sYXRpbmcgdGhlIHBlYWNlIHdpdGggdXMgYW5kIG9mIHBsb3R0aW5nCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgd2hvbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwgdGhlIG1vcmUKICAgICAgICAgICAgICAgICAgICBkaWZmaWN1bHQgaXQgaXMgdG8gc3VnZ2VzdCB0aGUgcmlnaHQgY291cnNlIG9mIGFjdGlvbi4gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZWFzb24sIEF0aGVuaWFucywgaXMgdGhpcy4gVGhvdWdoIGFsbCB3aG8gYWltIGF0IHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIGFnZ3JhbmRpemVtZW50IG11c3QgYmUgY2hlY2tlZCwgbm90IGJ5IHNwZWVjaGVzLCBidXQgYnkgcHJhY3RpY2FsIG1lYXN1cmVzLCB5ZXQsCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGZpcnN0IHBsYWNlLCB3ZSB3aG8gY29tZSBiZWZvcmUgeW91IHNocmluayBmcm9tIGFueSBkZWZpbml0ZSBwcm9wb3NhbCBvcgogICAgICAgICAgICAgICAgICAgIGFkdmljZSwgYmVpbmcgcmVsdWN0YW50IHRvIGluY3VyIHlvdXIgZGlzcGxlYXN1cmU7IHdlIHByZWZlciB0byBkaWxhdGUgb24KICAgICAgICAgICAgICAgICAgICBQaGlsaXAncyBzaG9ja2luZyBiZWhhdmlvciBhbmQgdGhlIGxpa2UgdG9waWNzOyBhbmQsIHNlY29uZGx5LCB5b3Ugd2hvIHNpdCBoZXJlCiAgICAgICAgICAgICAgICAgICAgYXJlIGluZGVlZCBiZXR0ZXIgZXF1aXBwZWQgdGhhbiBQaGlsaXAgZm9yIG1ha2luZyBzcGVlY2hlcyBhYm91dCBqdXN0aWNlIGFuZCBmb3IKICAgICAgICAgICAgICAgICAgICBhcHByZWNpYXRpbmcgdGhlbSBpbiB0aGUgbW91dGggb2YgYW5vdGhlciwgYnV0LCB3aGVuIGl0IGNvbWVzIHRvIGhpbmRlcmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBhY2NvbXBsaXNobWVudCBvZiBoaXMgcHJlc2VudCBwbGFucywgeW91IHJlbWFpbiB1dHRlcmx5IGluYWN0aXZlLiA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHJlc3VsdCBpcywgSSBzdXBwb3NlLCBpbmV2aXRhYmxlIGFuZCBwZXJoYXBzCiAgICAgICAgICAgICAgICAgICAgcmVhc29uYWJsZS4gV2hlcmUgZWl0aGVyIHNpZGUgZGV2b3RlcyBpdHMgdGltZSBhbmQgZW5lcmd5LCB0aGVyZSBpdCBzdWNjZWVkcyB0aGUKICAgICAgICAgICAgICAgICAgICBiZXR0ZXLigJRQaGlsaXAgaW4gYWN0aW9uLCBidXQgeW91IGluIGFyZ3VtZW50LiBTbyBpZiB5b3Ugc3RpbGwgdGhpbmsgaXQKICAgICAgICAgICAgICAgICAgICBlbm91Z2ggdG8gZW1wbG95IHRoZSBzb3VuZGVyIGFyZ3VtZW50cywgdGhhdCBpcyBlYXN5OyB5b3VyIHRhc2sgZW50YWlscyBubwogICAgICAgICAgICAgICAgICAgIHRyb3VibGUuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgeW91IGhhdmUgdG8gZGV2aXNlIG1lYW5zCiAgICAgICAgICAgICAgICAgICAgd2hlcmVieSBvdXIgcHJlc2VudCBmb3J0dW5lcyBzaGFsbCBiZSByZXBhaXJlZCwgYW5kIHRoZWlyIGZ1cnRoZXIgZGVjbGluZSBzaGFsbAogICAgICAgICAgICAgICAgICAgIG5vdCB0YWtlIHVzIGNvbXBsZXRlbHkgYnkgc3VycHJpc2UsIGFuZCB3ZSBzaGFsbCBub3QgYmUgY29uZnJvbnRlZCBieSBhIG1pZ2h0eQogICAgICAgICAgICAgICAgICAgIHBvd2VyIHdoaWNoIHdlIHNoYWxsIGJlIHVuYWJsZSBldmVuIHRvIHdpdGhzdGFuZCwgdGhlbiBvdXIgbWV0aG9kIG9mCiAgICAgICAgICAgICAgICAgICAgZGVsaWJlcmF0aW9uIG11c3QgYmUgY2hhbmdlZCwgYW5kIGFsbCB3aG8gc3BlYWsgYW5kIGFsbCB3aG8gbGlzdGVuIG11c3QgY2hvb3NlCiAgICAgICAgICAgICAgICAgICAgdGhlIGJlc3QgYW5kIHNhZmVzdCBwb2xpY3kgaW5zdGVhZCBvZiB0aGUgZWFzaWVzdCBhbmQgbW9zdCBhZ3JlZWFibGUuIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHRoZSBmaXJzdCBwbGFjZSwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIGlmIGFueW9uZSB2aWV3cyB3aXRoIGNvbmZpZGVuY2UgdGhlIHByZXNlbnQgcG93ZXIgb2YgUGhpbGlwIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBleHRlbnQgb2YgaGlzIGRvbWluaW9ucywgaWYgYW55b25lIGltYWdpbmVzIHRoYXQgYWxsIHRoaXMgaW1wb3J0cyBubyBkYW5nZXIgdG8KICAgICAgICAgICAgICAgICAgICBvdXIgY2l0eSBhbmQgdGhhdCB5b3UgYXJlIG5vdCB0aGUgb2JqZWN0IG9mIGhpcyBwcmVwYXJhdGlvbnMsIEkgbXVzdCBleHByZXNzIG15CiAgICAgICAgICAgICAgICAgICAgYXN0b25pc2htZW50LCBhbmQgYmVnIHlvdSBhbGwgYWxpa2UgdG8gbGlzdGVuIHRvIGEgYnJpZWYgc3RhdGVtZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYXRpb25zIHRoYXQgaGF2ZSBsZWQgbWUgdG8gZm9ybSB0aGUgb3Bwb3NpdGUgY29uY2x1c2lvbiBhbmQgdG8gcmVnYXJkCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIGFzIG91ciBlbmVteS4gVGhlbiwgaWYgeW91IHRoaW5rIG1lIHRoZSBiZXR0ZXIgcHJvcGhldCwgYWRvcHQgbXkgYWR2aWNlOwogICAgICAgICAgICAgICAgICAgIGlmIHlvdSBwcmVmZXIgdGhvc2Ugd2hvIGhhdmUgc28gY29uZmlkZW50bHkgdHJ1c3RlZCBoaW0sIGdpdmUgdGhlbSB5b3VyCiAgICAgICAgICAgICAgICAgICAgYWxsZWdpYW5jZS4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBJLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgcmVhc29uIHRodXMuIFdoYXQgZGlkIFBoaWxpcCBmaXJzdAogICAgICAgICAgICAgICAgICAgIGdldCB1bmRlciBoaXMgY29udHJvbCBhZnRlciB0aGUgUGVhY2U/IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4gYW5kIHRoZSBQaG9jaWFuIGdvdmVybm1lbnQuIFdlbGwsIHdoYXQgZGlkIGhlIG1ha2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGVzZT8gSGUgY2hvc2UgdG8gYWN0IGluIHRoZSBpbnRlcmVzdHMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiwgbm90IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uIEFuZCB3aHkgc28/IEJlY2F1c2UsIEkgYmVsaWV2ZSwgZ3VpZGVkIGluIGhpcwogICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0aW9ucyBieSBhbWJpdGlvbiBhbmQgdGhlIGRlc2lyZSBvZiB1bml2ZXJzYWwgZG9taW5pb24sIHJlZ2FyZGxlc3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2xhaW1zIG9mIHBlYWNlIGFuZCBxdWlldG5lc3MgYW5kIGp1c3RpY2UsIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5oZQogICAgICAgICAgICAgICAgICAgIHJpZ2h0bHkgc2F3IHRoYXQgdG8gb3VyIGNpdHkgYW5kIG91ciBuYXRpb25hbCBjaGFyYWN0ZXIgaGUgY291bGQgb2ZmZXIgbm90aGluZywKICAgICAgICAgICAgICAgICAgICBoZSBjb3VsZCBkbyBub3RoaW5nLCB0aGF0IHdvdWxkIHRlbXB0IHlvdSBmcm9tIHNlbGZpc2ggbW90aXZlcyB0byBzYWNyaWZpY2UgdG8KICAgICAgICAgICAgICAgICAgICBoaW0gYW55IG9mIHRoZSBvdGhlciBHcmVlayBzdGF0ZXMsIGJ1dCB0aGF0IHlvdSwgcmV2ZXJlbmNpbmcganVzdGljZSwgc2hyaW5raW5nCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgZGlzY3JlZGl0IGludm9sdmVkIGluIHN1Y2ggdHJhbnNhY3Rpb25zLCBhbmQgZXhlcmNpc2luZyBkdWUgYW5kIHByb3BlcgogICAgICAgICAgICAgICAgICAgIGZvcmV0aG91Z2h0LCB3b3VsZCByZXNpc3QgYW55IHN1Y2ggYXR0ZW1wdCBvbiBoaXMgcGFydCBhcyBzdG91dGx5IGFzIGlmIHlvdSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYWN0dWFsbHkgYXQgd2FyIHdpdGggaGltLiA8bWlsZXN0b25lIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZWJhbnMsIGhlIGJlbGlldmVk4oCUYW5kIHRoZSBldmVudCBqdXN0aWZpZWQgaGlt4oCUdGhhdCBpbgogICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3IgYmVuZWZpdHMgcmVjZWl2ZWQgdGhleSB3b3VsZCBnaXZlIGhpbSBhIGZyZWUgaGFuZCBmb3IgdGhlIGZ1dHVyZSBhbmQsCiAgICAgICAgICAgICAgICAgICAgc28gZmFyIGZyb20gb3Bwb3Npbmcgb3IgdGh3YXJ0aW5nIGhpbSwgd291bGQgZXZlbiBqb2luIGZvcmNlcyB3aXRoIGhpbSwgaWYgaGUgc28KICAgICAgICAgICAgICAgICAgICBvcmRlcmVkLiBUb2RheSwgb24gdGhlIHNhbWUgYXNzdW1wdGlvbiwgaGUgaXMgZG9pbmcgdGhlIE1lc3NlbmlhbnMgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIEFyZ2l2ZXMgYSBnb29kIHR1cm4uIFRoYXQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpcyB0aGUgaGlnaGVzdCBjb21wbGltZW50IGhlIGNvdWxkIHBheSB5b3UuIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGJ5IHRoZXNlIHZlcnkgYWN0cyB5b3Ugc3RhbmQganVkZ2VkIHRoZSBvbmUgYW5kCiAgICAgICAgICAgICAgICAgICAgb25seSBwb3dlciBpbiB0aGUgd29ybGQgaW5jYXBhYmxlIG9mIGFiYW5kb25pbmcgdGhlIGNvbW1vbiByaWdodHMgb2YgdGhlIEdyZWVrcwogICAgICAgICAgICAgICAgICAgIGF0IGFueSBwcmljZSwgaW5jYXBhYmxlIG9mIGJhcnRlcmluZyB5b3VyIGRldm90aW9uIHRvIHRoZWlyIGNhdXNlIGZvciBhbnkgZmF2b3IKICAgICAgICAgICAgICAgICAgICBvciBhbnkgcHJvZml0LiBBbmQgaXQgd2FzIG5hdHVyYWwgdGhhdCBoZSBzaG91bGQgZm9ybSB0aGlzIG9waW5pb24gb2YgeW91IGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBjb250cmFyeSBvcGluaW9uIG9mIHRoZSBBcmdpdmVzIGFuZCBUaGViYW5zLCBiZWNhdXNlIGhlIG5vdCBtZXJlbHkgbG9va3MgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgcHJlc2VudCwgYnV0IGFsc28gZHJhd3MgYSBsZXNzb24gZnJvbSB0aGUgcGFzdC4gPG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSSBzdXBwb3NlIGhlIGxlYXJucyBmcm9tIGhpc3RvcnkgYW5kIGZyb20gcmVwb3J0IHRoYXQgeW91cgogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycywgd2hlbiB0aGV5IG1pZ2h0LCBhdCB0aGUgcHJpY2Ugb2Ygc3VibWlzc2lvbiB0byB0aGUgR3JlYXQgS2luZywgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlY29tZSB0aGUgcGFyYW1vdW50IHBvd2VyIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgbm90IG9ubHkgcmVmdXNlZCB0byBlbnRlcnRhaW4gdGhhdCBwcm9wb3NhbCwgY29udmV5ZWQgdG8gdGhlbSBieSBBbGV4YW5kZXIsIGFuCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3Igb2YgUGhpbGlwJ3MgbGluZSwgYnV0IGNob3NlIHRvIHF1aXQgdGhlaXIgaG9tZXMgYW5kIGVuZHVyZSBldmVyeQogICAgICAgICAgICAgICAgICAgIGhhcmRzaGlwLCBhbmQgdGhlcmVhZnRlciB3cm91Z2h0IHRob3NlIGRlZWRzIHdoaWNoIGFsbCBtZW4gYXJlIGFsd2F5cyBlYWdlciB0bwogICAgICAgICAgICAgICAgICAgIHJlbGF0ZSwgdGhvdWdoIG5vIG9uZSBoYXMgZXZlciBiZWVuIGFibGUgdG8gdGVsbCB0aGVtIHdvcnRoaWx5OyBhbmQgdGhlcmVmb3JlIEkKICAgICAgICAgICAgICAgICAgICBzaGFsbCBub3QgYmUgd3JvbmcgaW4gcGFzc2luZyB0aGVtIG92ZXIsIGZvciB0aGV5IGFyZSBpbmRlZWQgZ3JlYXQgYmV5b25kIGFueQogICAgICAgICAgICAgICAgICAgIG1hbidzIHBvd2VyIG9mIHNwZWVjaC4gT24gdGhlIG90aGVyIGhhbmQsIGhlIGxlYXJucyB0aGF0IHRoZSBhbmNlc3RvcnMgb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICBUaGViYW5zIGFuZCBBcmdpdmVzIGVpdGhlciBmb3VnaHQgZm9yIHRoZSBiYXJiYXJpYW5zIG9yIGRpZCBub3QgZmlnaHQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZW0uIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+SGUga25vd3MsIHRoZW4sIHRoYXQgdGhleSBib3RoIHdpbGwKICAgICAgICAgICAgICAgICAgICBwdXJzdWUgdGhlaXIgcHJpdmF0ZSBpbnRlcmVzdHMsIGlycmVzcGVjdGl2ZSBvZiB0aGUgY29tbW9uIGFkdmFudGFnZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBHcmVla3MuIFNvIGhlIHRob3VnaHQgdGhhdCBpZiBoZSBjaG9zZSB5b3UsIGhlIHdvdWxkIGJlIGNob29zaW5nIGZyaWVuZHMsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgeW91ciBmcmllbmRzaGlwIHdvdWxkIGJlIGJhc2VkIG9uIGp1c3RpY2U7IGJ1dCB0aGF0IGlmIGhlIGF0dGFjaGVkIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICB0byB0aGUgb3RoZXJzLCBoZSB3b3VsZCBmaW5kIGluIHRoZW0gdGhlIHRvb2xzIG9mIGhpcyBvd24gYW1iaXRpb24uIFRoYXQgaXMgd2h5LAogICAgICAgICAgICAgICAgICAgIG5vdyBhcyB0aGVuLCBoZSBjaG9vc2VzIHRoZW0gcmF0aGVyIHRoYW4geW91LiBGb3Igc3VyZWx5IGl0IGlzIG5vdCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgcmVnYXJkcyB0aGVpciBmbGVldHMgYXMgc3VwZXJpb3IgdG8gb3Vycywgbm9yIHRoYXQsIGhhdmluZyBkaXNjb3ZlcmVkIHNvbWUKICAgICAgICAgICAgICAgICAgICBpbmxhbmQgZW1waXJlLCBoZSBoYXMgYWJhbmRvbmVkIHRoZSBzZWFib2FyZCB3aXRoIGl0cyBoYXJib3JzLCBub3IgeWV0IHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBoYXMgYSBzaG9ydCBtZW1vcnkgZm9yIHRoZSBzcGVlY2hlcyBhbmQgdGhlIHByb21pc2VzIHRoYXQgZ2FpbmVkIGZvciBoaW0gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFBlYWNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SGFkIFBoaWxpcCByZW5vdW5jZWQgaGlzIGhvcGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRpbmcgYSBtYXJpdGltZSBhbmQgY29tbWVyY2lhbCBzdGF0ZSBhbmQgY29uZmluZWQgaGltc2VsZiB0byBleHRlbmRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIGVtcGlyZSBub3J0aCBhbmQgd2VzdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCBoaXMgcmVqZWN0aW9uIG9mIEF0aGVuaWFuIGZyaWVuZHNoaXAgd291bGQgYmUKICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWxsaWdpYmxlLiBBcyBpdCBpcywgaXQgbXVzdCBiZSBvdGhlcndpc2UgZXhwbGFpbmVkLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjEzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGl0IG1heSBiZQogICAgICAgICAgICAgICAgICAgIHVyZ2VkLCBieSBzb21lb25lIHdobyBjbGFpbXMgdG8ga25vdyBhbGwgYWJvdXQgaXQsIHRoYXQgaGUgYWN0ZWQgb24gdGhhdAogICAgICAgICAgICAgICAgICAgIG9jY2FzaW9uLCBub3QgZnJvbSBhbWJpdGlvbiBvciBmcm9tIGFueSBvZiB0aG9zZSBtb3RpdmVzIHdpdGggd2hpY2ggSSBmaW5kCiAgICAgICAgICAgICAgICAgICAgZmF1bHQsIGJ1dCBiZWNhdXNlIHRoZSBjbGFpbXMgb2YgdGhlIFRoZWJhbnMgd2VyZSBtb3JlIGp1c3QgdGhhbiBvdXJzLiBOb3cgdGhhdAogICAgICAgICAgICAgICAgICAgIGlzIHByZWNpc2VseSB0aGUgb25lIGFyZ3VtZW50IHRoYXQgaGUgY2Fubm90IHVzZSBub3cuIFdoYXQhIFRoZSBtYW4gd2hvIG9yZGVycwogICAgICAgICAgICAgICAgICAgIHRoZSBMYWNlZGFlbW9uaWFucyB0byBnaXZlIHVwIHRoZWlyIGNsYWltcyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lc3NlbmUiIGtleT0icGVyc2V1cyxNZXNzZW5lIj5NZXNzZW5lPC9wbGFjZU5hbWU+LCBob3cgY291bGQgaGUgcHJldGVuZCB0aGF0IGhlIGhhbmRlZCBvdmVyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDM0IiBrZXk9InRnbiw3MDExMDM0Ij5PcmNob21lbnVzPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTIzNSIga2V5PSJ0Z24sNzAxMTIzNSI+Q29yb25lYTwvcGxhY2VOYW1lPiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBoZSB0aG91Z2h0IGl0IGFuIGFjdCBvZiBqdXN0aWNlPyA8bWlsZXN0b25lIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+4oCcQnV0LOKAnSBpdCB3aWxsIGJlIHVyZ2VkCiAgICAgICAgICAgICAgICAgICAg77yIZm9yIHRoZXJlIGlzIHRoaXMgZXhjdXNlIGxlZnTvvIksIOKAnGhlIHdhcyBmb3JjZWQgdG8KICAgICAgICAgICAgICAgICAgICB5aWVsZCBhZ2FpbnN0IGhpcyBiZXR0ZXIganVkZ2VtZW50LCBmaW5kaW5nIGhpbXNlbGYgaGVtbWVkIGluIGJldHdlZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgVGhlc3NhbGlhbiBjYXZhbHJ5IGFuZCB0aGUgVGhlYmFuIGhlYXZ5IGluZmFudHJ5LuKAnSBHb29kISBTbyB0aGV5IHNheQogICAgICAgICAgICAgICAgICAgIGhlIGlzIHdhaXRpbmcgdG8gcmVnYXJkIHRoZSBUaGViYW5zIHdpdGggc3VzcGljaW9uLCBhbmQgc29tZSBjaXJjdWxhdGUgYSBydW1vcgogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2lsbCBmb3J0aWZ5IEVsYXRlYS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRvIHJlYnVpbGQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxzIG9mIEVsYXRlYSwgZGVzdHJveWVkIGluIDM0Niwgd291bGQgYmUgYSBjaGVjayB0byB0aGUgVGhlYmFucywgYXMKICAgICAgICAgICAgICAgICAgICAgICAgYmFycmluZyB0aGVpciB3YXkgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDQwMDM5NjMiIGtleT0idGduLDQwMDM5NjMiPlBob2NpczwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgUGhpbGlwJ3Mgb2NjdXBhdGlvbiBvZiBFbGF0ZWEgaW4gMzM5IGlzIHRoZSB0aGVtZSBvZiB0aGUgd2VsbC1rbm93biBwYXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjE2OSIgdmFsaWQ9InllcyI+RGVtLiAxOC4xNjk8L2JpYmw+IGZmLiBEZW1vc3RoZW5lcyBpcyBwbGF5aW5nIG9uCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0d28gbWVhbmluZ3Mgb2YgPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPs684b2zzrvOu861zrk8L2ZvcmVpZ24+LCDigJxoZQogICAgICAgICAgICAgICAgICAgICAgICBpcyBsaWtlbHkgdG/igJ0gYW5kIOKAnGhlIGlzIGRlbGF5aW5nIHRvLuKAnTwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgaXMganVzdCB3aGF0IGhlIGlzCiAgICAgICAgICAgICAgICAgICAg4oCcd2FpdGluZ+KAnSB0byBkbywgYW5kIHdpbGwgZ28gb24KICAgICAgICAgICAgICAgICAgICDigJx3YWl0aW5nLOKAnSBpbiBteSBvcGluaW9uLiBCdXQgaGUgaXMgbm90CiAgICAgICAgICAgICAgICAgICAg4oCcd2FpdGluZ+KAnSB0byBoZWxwIHRoZSBNZXNzZW5pYW5zIGFuZCBBcmdpdmVzIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgTGFjZWRhZW1vbmlhbnM6IGhlIGlzIGFjdHVhbGx5IGRpc3BhdGNoaW5nIG1lcmNlbmFyaWVzIGFuZCBmb3J3YXJkaW5nIHN1cHBsaWVzLAogICAgICAgICAgICAgICAgICAgIGFuZCBoZSBpcyBleHBlY3RlZCBpbiBwZXJzb24gd2l0aCBhIGxhcmdlIGZvcmNlLiBXaGF0ISBUaGUgTGFjZWRhZW1vbmlhbnMsIHRoZQogICAgICAgICAgICAgICAgICAgIHN1cnZpdmluZyBlbmVtaWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgZW5nYWdlZCBpbiBkZXN0cm95aW5nOyB0aGUgUGhvY2lhbnMsIHdob20gaGUgaGFzIGhpbXNlbGYgYWxyZWFkeSBkZXN0cm95ZWQsIGhlCiAgICAgICAgICAgICAgICAgICAgaXMgbm93IGVuZ2FnZWQgaW4gcHJlc2VydmluZyEgQW5kIHdobyBpcyBwcmVwYXJlZCB0byBiZWxpZXZlIHRoYXQ/IDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG15IHBhcnQgSSBkbyBub3QgYmVsaWV2ZSB0aGF0IFBoaWxpcCwgaWYgaGUgYWN0ZWQKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZmlyc3QgcGxhY2UgcmVsdWN0YW50bHkgYW5kIHVuZGVyIGNvbXB1bHNpb24sIG9yIGlmIGhlIHdlcmUgbm93IGluY2xpbmVkCiAgICAgICAgICAgICAgICAgICAgdG8gdGhyb3cgdGhlIFRoZWJhbnMgb3Zlciwgd291bGQgYmUgcGVyc2lzdGVudGx5IG9wcG9zaW5nIHRoZWlyIGVuZW1pZXMuIEJ1dCBpZgogICAgICAgICAgICAgICAgICAgIHdlIG1heSBqdWRnZSBmcm9tIGhpcyBwcmVzZW50IGNvbmR1Y3QsIGl0IGlzIHBsYWluIHRoYXQgb24gdGhhdCBvY2Nhc2lvbiBhbHNvIGhlCiAgICAgICAgICAgICAgICAgICAgYWN0ZWQgZnJvbSBkZWxpYmVyYXRlIGNob2ljZSwgYW5kIGV2ZXJ5dGhpbmcsIGlmIGNvcnJlY3RseSBvYnNlcnZlZCwgcG9pbnRzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhY3QgdGhhdCBhbGwgaGlzIGludHJpZ3VlcyBhcmUgZGlyZWN0ZWQgYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiA8bWlsZXN0b25lIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0b2RheSBhdCBhbnkgcmF0ZSB0aGlzIHBvbGljeSBpcyBpbiBhIG1lYXN1cmUgZm9yY2VkIHVwb24gaGltLiBGb3IKICAgICAgICAgICAgICAgICAgICBvYnNlcnZlISBIZSB3YW50cyB0byBydWxlLCBhbmQgaGUgaGFzIG1hZGUgdXAgaGlzIG1pbmQgdGhhdCB5b3UsIGFuZCB5b3Ugb25seSwKICAgICAgICAgICAgICAgICAgICBhcmUgaGlzIHJpdmFscy4gSGUgaGFzIGxvbmcgaW5qdXJlZCB5b3U7IG9mIG5vdGhpbmcgaXMgaGUgbW9yZSBjb25zY2lvdXMgdGhhbiBvZgogICAgICAgICAgICAgICAgICAgIHRoYXQuIEZvciBpdCBpcyBieSBob2xkaW5nIHRoZSBjaXRpZXMgd2hpY2ggYXJlIHJlYWxseSB5b3VycyB0aGF0IGhlIHJldGFpbnMKICAgICAgICAgICAgICAgICAgICBzYWZlIHBvc3Nlc3Npb24gb2YgYWxsIHRoZSByZXN0LCBhbmQgaGUgZmVlbHMgdGhhdCBpZiBoZSBnYXZlIHVwIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBrZXk9InRnbiw2MDA0ODE0Ij5Qb3RpZGFlYTwvcGxhY2VOYW1lPiwgaGlzIG93biBjb3VudHJ5IHdvdWxkIG5vdCBiZSBzYWZlCiAgICAgICAgICAgICAgICAgICAgZm9yIGhpbS4gPG1pbGVzdG9uZSBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBrbm93cywgdGhlbiwgdGhlc2UgdHdvCiAgICAgICAgICAgICAgICAgICAgZmFjdHPigJR0aGF0IGhlIGlzIGludHJpZ3VpbmcgYWdhaW5zdCB5b3UgYW5kIHRoYXQgeW91IGFyZSBhd2FyZSBvZiBpdC4KICAgICAgICAgICAgICAgICAgICBBc3N1bWluZyB0aGF0IHlvdSBhcmUgaW50ZWxsaWdlbnQsIGhlIHRoaW5rcyB5b3UgYXJlIGJvdW5kIHRvIGhhdGUgaGltLCBhbmQgaGUKICAgICAgICAgICAgICAgICAgICBpcyBvbiB0aGUgYWxlcnQsIGV4cGVjdGluZyBzb21lIGJsb3cgdG8gZmFsbCwgaWYgeW91IGNhbiBzZWl6ZSBhbiBvcHBvcnR1bml0eQogICAgICAgICAgICAgICAgICAgIGFuZCBpZiBoZSBjYW5ub3QgZ2V0IGluIGhpcyBibG93IGZpcnN0LiA8bWlsZXN0b25lIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPlRoYXQKICAgICAgICAgICAgICAgICAgICBpcyB3aHkgaGUgaXMgd2lkZSBhd2FrZSBhbmQgcmVhZHkgdG8gc3RyaWtlLCBhbmQgd2h5IGhlIGlzIGNvdXJ0aW5nIGNlcnRhaW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUgdG8gdGhlIGRldHJpbWVudCBvZiBvdXIgY2l0eeKAlFRoZWJhbnMsIEkgbWVhbiwgYW5kIHRob3NlCiAgICAgICAgICAgICAgICAgICAgUGVsb3Bvbm5lc2lhbnMgd2hvIHNoYXJlIHRoZWlyIHZpZXdzLiBIZSBpbWFnaW5lcyB0aGF0IHRoZWlyIGN1cGlkaXR5IHdpbGwgbGVhZAogICAgICAgICAgICAgICAgICAgIHRoZW0gdG8gYWNjZXB0IHRoZSBwcmVzZW50IHNpdHVhdGlvbiwgd2hpbGUgdGhlaXIgbmF0dXJhbCBkdWxsbmVzcyB3aWxsIHByZXZlbnQKICAgICAgICAgICAgICAgICAgICB0aGVtIGZyb20gZm9yZXNlZWluZyBhbnl0aGluZyB0aGF0IG1heSBmb2xsb3cuIFlldCBtZW4gb2YgZXZlbiBtb2RlcmF0ZQogICAgICAgICAgICAgICAgICAgIGludGVsbGlnZW5jZSBtaWdodCBwZXJjZWl2ZSBzb21lIGNsZWFyIGluZGljYXRpb25zLCB3aGljaCBJIGhhZCBvY2Nhc2lvbiB0bwogICAgICAgICAgICAgICAgICAgIHBvaW50IG91dCB0byB0aGUgTWVzc2VuaWFucyBhbmQgdGhlIEFyZ2l2ZXMsIGFuZCB3aGljaCBtYXkgcGVyaGFwcyB3aXRoCiAgICAgICAgICAgICAgICAgICAgYWR2YW50YWdlIGJlIHJlcGVhdGVkIHRvIHlvdS4gPG1pbGVzdG9uZSBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPuKAnENhbiB5b3Ugbm90IGltYWdpbmUs4oCdIEkgc2FpZCwKICAgICAgICAgICAgICAgICAgICBhZGRyZXNzaW5nIHRoZSBNZXNzZW5pYW5zLCDigJxob3cgYW5ub3llZCB0aGUgT2x5bnRoaWFucyB3b3VsZCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICB0byBoZWFyIGEgd29yZCBzYWlkIGFnYWluc3QgUGhpbGlwIGluIHRoZSBkYXlzIHdoZW4gaGUgd2FzIGhhbmRpbmcgb3ZlciB0byB0aGVtCiAgICAgICAgICAgICAgICAgICAgQW50aGVtdXMsIHRvIHdoaWNoIGFsbCB0aGUgZm9ybWVyIGtpbmdzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gbGFpZCBjbGFpbSwgd2hlbiBoZSB3YXMgbWFraW5nIHRoZW0gYSBwcmVzZW50IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBrZXk9InRnbiw2MDA0ODE0Ij5Qb3RpZGFlYTwvcGxhY2VOYW1lPiwgZXhwZWxsaW5nIHRoZSBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgIHNldHRsZXJzLCBhbmQgd2hlbiBoZSBoYWQgdGFrZW4gdXBvbiBoaW1zZWxmIHRoZSByZXNwb25zaWJpbGl0eSBvZiBhIHF1YXJyZWwKICAgICAgICAgICAgICAgICAgICB3aXRoIHVzIGFuZCBoYWQgZ2l2ZW4gdGhlbSB0aGUgdGVycml0b3J5IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBrZXk9InRnbiw2MDA0ODE0Ij5Qb3RpZGFlYTwvcGxhY2VOYW1lPiBmb3IgdGhlaXIgb3duIHVzZT8gRG8geW91IGltYWdpbmUgdGhleSBleHBlY3RlZCB0byBiZQogICAgICAgICAgICAgICAgICAgIHRyZWF0ZWQgYXMgdGhleSBoYXZlIGJlZW4sIG9yIHdvdWxkIGhhdmUgYmVsaWV2ZWQgYW55b25lIHdobyBzdWdnZXN0ZWQgaXQ/CiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMjEiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzLOKAnSBzYWlkIEksCiAgICAgICAgICAgICAgICAgICAg4oCcYWZ0ZXIgYSBicmllZiBlbmpveW1lbnQgb2Ygb3RoZXIgbWVuJ3MgdGVycml0b3J5LCB0aGV5IGhhdmUgbG9uZyBiZWVuCiAgICAgICAgICAgICAgICAgICAgcm9iYmVkIGJ5IFBoaWxpcCBvZiB0aGVpciBvd24sIGV4cGVsbGVkIHdpdGggY29udHVtZWx5LCBub3QgbWVyZWx5IHZhbnF1aXNoZWQKICAgICAgICAgICAgICAgICAgICBidXQgYmV0cmF5ZWQsIGJvdWdodCBhbmQgc29sZCBieSB0aGVpciBvd24gY291bnRyeS1tZW4uIEZvciB0cnVseSBzdWNoIGNsb3NlCiAgICAgICAgICAgICAgICAgICAgY29tbXVuaWNhdGlvbnMgd2l0aCB0eXJhbm55IGNvcnJ1cHQgZ29vZCBjb25zdGl0dXRpb25zLiA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGF0IG9mIHRoZSBUaGVzc2FsaWFucz8gRG8geW91CiAgICAgICAgICAgICAgICAgICAgaW1hZ2luZSzigJ0gSSBzYWlkLCDigJx0aGF0IHdoZW4gaGUgd2FzIGV4cGVsbGluZyB0aGVpciBkZXNwb3RzLAogICAgICAgICAgICAgICAgICAgIG9yIGFnYWluIHdoZW4gaGUgd2FzIHByZXNlbnRpbmcgdGhlbSB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTmljYWVhIiBrZXk9InBlcnNldXMsTmljYWVhIj5OaWNhZWE8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzUxIiBrZXk9InRnbiw3MDAyNzUxIj5NYWduZXNpYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICB0aGV5IGV2ZXIgZHJlYW1lZCB0aGF0IGEgQ291bmNpbCBvZiBUZW48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFjY29yZGluZyB0byA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiA5LjI2IiB2YWxpZD0ieWVzIj5EZW0uIDkuMjY8L2JpYmw+IFBoaWxpcCBzZXQgdXAKICAgICAgICAgICAgICAgICAgICAgICAgJmd0O3RldHJhcmNoaWVzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHR3byBhY2NvdW50cyBtYXkgYmUgcmVjb25jaWxlZCBieSBhc3N1bWluZyB0aGF0IGhlIHJldGFpbmVkIHRoZSBvbGQKICAgICAgICAgICAgICAgICAgICAgICAgZm91cmZvbGQgZGl2aXNpb24gb2YgdGhlIGNvdW50cnksIGJ1dCBzZXQgdXAgYW4gb2xpZ2FyY2h5IG9mIHRlbiBpbiBlYWNoCiAgICAgICAgICAgICAgICAgICAgICAgIGRpdmlzaW9uLiBQaGlsaXAsIHdob3NlIHBvbGljeSB3YXMgdG8gZGl2aWRlIGFuZCBjb25xdWVyLCB3b3VsZCBiZSB1bmxpa2VseQogICAgICAgICAgICAgICAgICAgICAgICB0byBjZW50cmFsaXplIHRoZSBnb3Zlcm5tZW50LiBJdCBpcyBqdXN0IHBvc3NpYmxlIHRoYXQgPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPs60zrXOus6xzrTOsc+Bz4fhvbfOsc69PC9mb3JlaWduPiBtYXkgYmUgYSBtaXN0YWtlbiBhbXBsaWZpY2F0aW9uIG9mIDxmb3JlaWduIGxhbmc9ImdyZWVrIj7OlOKAmc6xz4HPh+G9t86xzr08L2ZvcmVpZ24+PTxmb3JlaWduIGxhbmc9ImdyZWVrIj7PhM61z4TPgc6xz4HPh+G9t86xzr08L2ZvcmVpZ24+LCBidXQgaW4gdGhhdCBjYXNlIHRoZSBzaW5ndWxhciB3b3VsZCBiZSBzdHJhbmdlLgogICAgICAgICAgICAgICAgICAgICAgICBPd2luZyB0byB0aGUgZGVjYXJjaGllcyB3aGljaCBMeXNhbmRlciBpbXBvc2VkIG9uIHNvIG1hbnkgZnJlZSBjaXRpZXMgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBvZiB0aGUgUGVsb3Bvbm5lc2lhbiB3YXIsIHRoZSBudW1iZXIgdGVuIHdvdWxkIGhhdmUgdGhlIHNhbWUgc2luaXN0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb25zIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gYXMgaXQgaGFkIGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGFuZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxODE1OSIga2V5PSJ0Z24sNzAxODE1OSI+VmVuaWNlPC9wbGFjZU5hbWU+Ljwvbm90ZT4gd291bGQgYmUgZXN0YWJsaXNoZWQgYW1vbmcKICAgICAgICAgICAgICAgICAgICB0aGVtLCBhcyBpdCBpcyB0b2RheSwgb3IgdGhhdCB0aGUgc2FtZSBtYW4gd2hvIHJlc3RvcmVkIHRvIHRoZW0gdGhlIEFtcGhpY3R5b25pYwogICAgICAgICAgICAgICAgICAgIG1lZXRpbmcgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiB3b3VsZAogICAgICAgICAgICAgICAgICAgIGFsc28gYXBwcm9wcmlhdGUgdGhlaXIgb3duIHBlY3VsaWFyIHJldmVudWVzPyBJbXBvc3NpYmxlISBCdXQgc28gaXQgY2FtZSB0bwogICAgICAgICAgICAgICAgICAgIHBhc3MsIGFzIGFsbCBtZW4gbWF5IGtub3cuIDxtaWxlc3RvbmUgbj0iMjMiIHVuaXQ9InNlY3Rpb24iIC8+WW91LOKAnSBJCiAgICAgICAgICAgICAgICAgICAgc2FpZCwg4oCcZ2F6ZSB3aXRoIHdvbmRlciBhdCBQaGlsaXAgYXMgaGUgZ2l2ZXMgYXdheSB0aGlzIGFuZCBwcm9taXNlcwogICAgICAgICAgICAgICAgICAgIHRoYXQsIGJ1dCBpZiB5b3UgYXJlIHRydWx5IHdpc2UsIHByYXkgdGhhdCB5b3UgbWF5IG5ldmVyIGZpbmQgdGhhdCBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBkZWNlaXZlZCBhbmQgY296ZW5lZCB5b3UuIFZlcmlseSzigJ0gSSBzYWlkLCDigJx0aGVyZSBhcmUKICAgICAgICAgICAgICAgICAgICBtYW5pZm9sZCBtZWFucyBkZXZpc2VkIGJ5IHN0YXRlcyBmb3IgcHJvdGVjdGlvbiBhbmQgc2FmZXR54oCUc3RvY2thZGVzLAogICAgICAgICAgICAgICAgICAgIHJhbXBhcnRzLCBmb3NzZXMgYW5kIHRoZSBsaWtlLiA8bWlsZXN0b25lIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhbGwgdGhlc2UKICAgICAgICAgICAgICAgICAgICBhcmUgd3JvdWdodCBieSBoYW5kIGFuZCBlbnRhaWwgZXhwZW5zZS4gQnV0IHRoZXJlIGlzIG9uZSBjb21tb24gYnVsd2FyayB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZSBpbnN0aW5jdCBvZiBzZW5zaWJsZSBtZW4gcG9zc2Vzc2VzIHdpdGhpbiBpdHNlbGYsIGEgZ29vZCBhbmQgc2FmZSBvbmUgZm9yCiAgICAgICAgICAgICAgICAgICAgYWxsLCBidXQgaW52YWx1YWJsZSBmb3IgZGVtb2NyYWNpZXMgYWdhaW5zdCB0eXJhbnRzLiBBbmQgd2hhdCBpcyB0aGF0IGJ1bHdhcms/CiAgICAgICAgICAgICAgICAgICAgSXQgaXMgbWlzdHJ1c3QuIEd1YXJkIHRoYXQ7IGhvbGQgZmFzdCB0byB0aGF0LiBJZiB5b3UgcHJlc2VydmUgaXQsIG5vIGhhcm0gY2FuCiAgICAgICAgICAgICAgICAgICAgdG91Y2ggeW91LiA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJzZWN0aW9uIiAvPldoYXQgaXMgeW91ciBvYmplY3Q/4oCdIEkKICAgICAgICAgICAgICAgICAgICBzYWlkLiDigJxGcmVlZG9tLiBUaGVuIGRvIHlvdSBub3Qgc2VlIHRoYXQgUGhpbGlwJ3MgdmVyeSB0aXRsZXMgYXJlCiAgICAgICAgICAgICAgICAgICAgdXR0ZXJseSBpcnJlY29uY2lsYWJsZSB3aXRoIHRoYXQ/IEZvciBldmVyeSBraW5nLCBldmVyeSBkZXNwb3QgaXMgdGhlIHN3b3JuIGZvZQogICAgICAgICAgICAgICAgICAgIG9mIGZyZWVkb20gYW5kIG9mIGxhdy4gQmV3YXJlLOKAnSBzYWlkIEksIOKAnGxlc3QsIHNlZWtpbmcgdG8gYmUKICAgICAgICAgICAgICAgICAgICByaWQgb2Ygd2FyLCB5b3UgZmluZCBhIG1hc3Rlci7igJ0gPG1pbGVzdG9uZSBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoYXQgaXMgd2hhdCBJIHNhaWQgdG8gdGhlbSwgYW5kIHRoZXkKICAgICAgICAgICAgICAgICAgICBzaG91dGVkIHRoZWlyIGFwcHJvdmFsOyBhbmQgdGhleSBoZWFyZCBtYW55IG90aGVyIHNwZWVjaGVzIGZyb20gdGhlIGVudm95cywgYm90aAogICAgICAgICAgICAgICAgICAgIGluIG15IHByZXNlbmNlIGFuZCBhZ2FpbiBsYXRlciwgYXMgaXQgc2VlbXM7IGJ1dCB0aGV5IGFyZSBub25lIHRoZSBtb3JlIGxpa2VseQogICAgICAgICAgICAgICAgICAgIHRvIGRvIHdpdGhvdXQgUGhpbGlwJ3MgZnJpZW5kc2hpcCBhbmQgUGhpbGlwJ3MgcHJvbWlzZXMuIDxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+QW5kLCBpbmRlZWQsIGl0IGlzIG5vdCBzdHJhbmdlIHRoYXQgTWVzc2VuaWFucyBhbmQKICAgICAgICAgICAgICAgICAgICBvdGhlciBQZWxvcG9ubmVzaWFucyBzaG91bGQgc29tZXRpbWVzIGFjdCBhZ2FpbnN0IHRoZWlyIGJldHRlciBqdWRnZW1lbnQ7IGJ1dAogICAgICAgICAgICAgICAgICAgIHlvdSwgd2hvIGtub3csIGJvdGggZnJvbSB5b3VyIG93biBpbnRlbGxpZ2VuY2UgYW5kIGZyb20gb3VyIHNwZWVjaGVzLCBob3cgeW91CiAgICAgICAgICAgICAgICAgICAgYXJlIGNvbXBhc3NlZCBhYm91dCB3aXRoIHBsb3RzIGFuZCBzbmFyZXMsIHlvdSB3aWxsLCBhcyBpdCBzZWVtcyB0byBtZSwgZmluZCB0bwogICAgICAgICAgICAgICAgICAgIHlvdXIgc3VycHJpc2UgdGhhdCB0aHJvdWdoIGhhdmluZyBkb25lIG5vdGhpbmcgaW4gdGltZSwgeW91IGhhdmUgc3VibWl0dGVkIHRvCiAgICAgICAgICAgICAgICAgICAgZXZlcnl0aGluZy4gU28gbXVjaCBkb2VzIHRoZSBwbGVhc3VyZSBhbmQgZWFzZSBvZiB0aGUgbW9tZW50IHByZXZhaWwgb3ZlciB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggYXQgc29tZSBmdXR1cmUgdGltZSBpcyBsaWtlbHkgdG8gYmUgYWR2YW50YWdlb3VzLiA8bWlsZXN0b25lIG49IjI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T24geW91ciBwcmFjdGljYWwKICAgICAgICAgICAgICAgICAgICBtZWFzdXJlcyB5b3Ugd2lsbCwgaWYgeW91IGFyZSB3aXNlLCBkZWxpYmVyYXRlIGhlcmVhZnRlciBieSB5b3Vyc2VsdmVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pLmUuIHdoZW4gdGhlIGZvcmVpZ24gZW52b3lzIGhhdmUgd2l0aGRyYXduLiBBdAogICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHBvaW50LCBpZiBub3QgYXQgdGhlIGVuZCBvZiB0aGUgc3BlZWNoLCB0aGUgcHJvcG9zZWQgYW5zd2VyIHdhcyByZWFkLgogICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIG5vdCBpbmRpY2F0ZWQgaW4gdGhlIE1TUy48L25vdGU+OyBhdCBwcmVzZW50IEkgd2lsbCBzdWdnZXN0IHRoZQogICAgICAgICAgICAgICAgICAgIGltbWVkaWF0ZSBhbnN3ZXIgd2hpY2ggaXQgd291bGQgYmUgcHJvcGVyIGZvciB5b3UgdG8gYWRvcHQuPHF1b3RlIHR5cGU9IkFuc3dlciI+QW5zd2VyPC9xdW90ZT48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0IHdvdWxkIGluZGVlZCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBmYWlyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdG8gY2FsbCB1cG9uCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGNvbnZleWVkIHRvIHlvdSBQaGlsaXAncyBwcm9taXNlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICBhdWRpZW5jZSBtaWdodCBmYWlybHkgY2FsbCB1cG9uIG1lbiBsaWtlIEFyaXN0b2RlbXVzLCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMTYxMCIga2V5PSJ0Z24sNjAwMTYxMCI+Q3Rlc2lwaG9uPC9wbGFjZU5hbWU+LCBhbmQgTmVvcHRvbGVtdXMg77yIPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuMTMiIHZhbGlkPSJ5ZXMiPkRlbS4gMTkuMTM8L2JpYmw+LCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOS4zMTUiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE5LjMxNTwvYmlibD7vvIkgdG8gZXhwbGFpbiBob3cgdGhleSBjYW1lIHRvIG1ha2UgdGhlbXNlbHZlcwogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zaWJsZSBmb3IgdGhlc2UgcHJvbWlzZXMsIHRvIHdoaWNoIFBoaWxpcCBoYWQgbm90IGFjdHVhbGx5IGNvbW1pdHRlZAogICAgICAgICAgICAgICAgICAgICAgICBoaW1zZWxmLjwvbm90ZT4gb24gdGhlIHN0cmVuZ3RoIG9mIHdoaWNoIHlvdSB3ZXJlIGluZHVjZWQgdG8gY29uY2x1ZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgUGVhY2UuIDxtaWxlc3RvbmUgbj0iMjkiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEkgc2hvdWxkIG5ldmVyIG15c2VsZiBoYXZlCiAgICAgICAgICAgICAgICAgICAgY29uc2VudGVkIHRvIHNlcnZlIG9uIHRoZSBlbWJhc3N5LCBub3Igd291bGQgeW91LCBJIGFtIHN1cmUsIGhhdmUgc3VzcGVuZGVkCiAgICAgICAgICAgICAgICAgICAgbWlsaXRhcnkgb3BlcmF0aW9ucywgaWYgeW91IGhhZCBpbWFnaW5lZCB0aGF0IFBoaWxpcCBhZnRlciBzZWN1cmluZyBwZWFjZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGFjdCBhcyBoZSBoYXMgZG9uZTsgYnV0IGhpcyB3b3JkcyBhdCB0aGUgdGltZSB3ZXJlIHZlcnkgZGlmZmVyZW50IGZyb20gaGlzCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBhY3Rpb25zLiBZZXMsIGFuZCB0aGVyZSBhcmUgb3RoZXJzIHdobyBvdWdodCB0byBiZSBjYWxsZWQgdXBvbi4gV2hvbSBkbwogICAgICAgICAgICAgICAgICAgIEkgbWVhbj8gVGhlIG1lbiB3aG8sIHdoZW4gcGVhY2Ugd2FzIG1hZGUgYW5kIHdoZW4gSSwgcmV0dXJuaW5nIGZyb20gdGhlIHNlY29uZAogICAgICAgICAgICAgICAgICAgIGVtYmFzc3nigJR0aGF0IHNlbnQgdG8gYWRtaW5pc3RlciB0aGUgb2F0aHPigJRmb3VuZCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHN0YXRlIHdhcyBiZWluZyBpbXBvc2VkIHVwb24sIGFuZCBzcG9rZSBvdXQgYW5kIHByb3Rlc3RlZCBhbmQgcmVmdXNlZCB0byBnaXZlIHVwCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4gYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIFBob2NpYW5z4oCUIDxtaWxlc3RvbmUgbj0iMzAiIHVuaXQ9InNlY3Rpb24iIC8+dGhlIG1lbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFlc2NoaW5lcyBhbmQsIGluIHBhcnRpY3VsYXIsIFBoaWxvY3JhdGVzIO+8iDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjQ2IiB2YWxpZD0ieWVzIj5EZW0uIDE5LjQ2PC9iaWJsPu+8iS48L25vdGU+IEkgc2F5LCB3aG8gdG9sZCB5b3UKICAgICAgICAgICAgICAgICAgICB0aGF0IEksIGJlaW5nIGEgd2F0ZXItZHJpbmtlciwgd2FzIG5hdHVyYWxseSBhIGRpc2FncmVlYWJsZSwgY3Jvc3MtZ3JhaW5lZAogICAgICAgICAgICAgICAgICAgIGZlbGxvdywgYW5kIHRoYXQgUGhpbGlwLCBpZiBoZSBnb3QgdGhyb3VnaCB0aGUgUGFzcywgd291bGQgZG8ganVzdCB3aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHByYXkgZm9yLCB3b3VsZCBmb3J0aWZ5IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw1MDA0MjU4IiBrZXk9InRnbiw1MDA0MjU4Ij5UaGVzcGlhZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBsYXRhZWEiIGtleT0icGVyc2V1cyxQbGF0YWVhIj5QbGF0YWVhPC9wbGFjZU5hbWU+LCBhbmQgaHVtYmxlIHRoZSBUaGViYW4KICAgICAgICAgICAgICAgICAgICBwcmlkZSwgYW5kIGRpZyBhIHRyZW5jaCBhY3Jvc3MgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwMzQ1IiBrZXk9InRnbiw3MDEwMzQ1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UbyBwcm90ZWN0IHRoZSBHcmVlawogICAgICAgICAgICAgICAgICAgICAgICBjaXRpZXMgZnJvbSB0aGUgcmFpZHMgb2YgdGhlIFRocmFjaWFucy48L25vdGU+IGF0IGhpcyBvd24gY2hhcmdlcywgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZSB0byB5b3UgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiBhbmQgT3JvcHVzIGluCiAgICAgICAgICAgICAgICAgICAgbGlldSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+LiBBbGwgdGhpcyB3YXMKICAgICAgICAgICAgICAgICAgICBzYWlkIGZyb20gdGhpcyB2ZXJ5IHBsYXRmb3JtLCBhcyBJIGFtIHN1cmUgeW91IHJlY29sbGVjdCwgYWx0aG91Z2ggeW91IGFyZSBub3QKICAgICAgICAgICAgICAgICAgICByZW1hcmthYmxlIGZvciBrZWVwaW5nIGluIG1pbmQgdGhvc2Ugd2hvIGluanVyZSB5b3UuIDxtaWxlc3RvbmUgbj0iMzEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBjcm93bmluZyBkaXNncmFjZSBpcyB0aGF0IHlvdXIgcG9zdGVyaXR5IGFsc28gaXMgYm91bmQgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSBwZWFjZSB3aGljaCB0aGVzZSBob3BlcyBwcm9tcHRlZCB5b3UgdG8gY29uY2x1ZGU7IHNvIGNvbXBsZXRlbHkgd2VyZQogICAgICAgICAgICAgICAgICAgIHlvdSBsZWQgYXN0cmF5LiBXaHkgZG8gSSBtZW50aW9uIHRoaXMgbm93IGFuZCBhc3NlcnQgdGhhdCB0aGVzZSBtZW4gb3VnaHQgdG8gYmUKICAgICAgICAgICAgICAgICAgICBjYWxsZWQgdXBvbj8gSSB2b3cgdGhhdCBJIHdpbGwgYm9sZGx5IHRlbGwgeW91IHRoZSB3aG9sZSB0cnV0aCBhbmQga2VlcCBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgYmFjay4gPG1pbGVzdG9uZSBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBub3QgdGhhdCBieSBkZXNjZW5kaW5nIHRvIGFidXNlIEkKICAgICAgICAgICAgICAgICAgICBtYXkgbGF5IG15c2VsZiBvcGVuIHRvIHJldGFsaWF0aW9uIGluIHlvdXIgcHJlc2VuY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgR3JlZWsgaXMgZGlmZmljdWx0LCBhbmQgZWRpdG9ycyBhcmUgb2YgbWFueSBtaW5kcy4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHVzdWFsIG1lYW5pbmcgb2YgPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPs674b25zrPOv869IM+Azr/Ouc614b+Wzr08L2ZvcmVpZ24+LAogICAgICAgICAgICAgICAgICAgICAgICDigJx0byBncmFudCBhIGhlYXJpbmcs4oCdIHNlZW1zIGltcG9zc2libGUgaGVyZS4gUGVyaGFwcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbCBtZWFuaW5nIGlzIOKAnGNhdXNlIHNwZWVjaCBhZ2FpbnN0IG15c2VsZiBpbiB5b3VyIHByZXNlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIG9uIGVxdWFsIHRlcm1zLOKAnSBpLmUuIGdpdmUgbXkgZW5lbWllcyBhbiBvcGVuaW5nIHRvIHJlcGx5IGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzYW1lIHN0eWxlLCB3aGljaCwgRGVtb3N0aGVuZXMgaGludHMsIHdvdWxkIGJlIGFuIGluc3VsdCB0byBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgYXVkaWVuY2UuPC9ub3RlPiB3aGlsZSBJIGdpdmUgdGhvc2Ugd2hvIGZyb20gdGhlIGZpcnN0IGhhdmUgZmFsbGVuIGZvdWwgb2YKICAgICAgICAgICAgICAgICAgICBtZSBhbiBleGN1c2UgZm9yIG1ha2luZyBmdXJ0aGVyIHByb2ZpdCBvdXQgb2YgUGhpbGlwLiBOb3IgZG8gSSB3aXNoIHRvIGluZHVsZ2UKICAgICAgICAgICAgICAgICAgICBpbiBpZGxlIHRhbGsuIEJ1dCBJIHRoaW5rIHRoYXQgb25lIGRheSBQaGlsaXAncyBwb2xpY3kgd2lsbCBjYXVzZSB5b3UgbW9yZQogICAgICAgICAgICAgICAgICAgIGRpc3RyZXNzIHRoYW4gaXQgZG9lcyBub3csIDxtaWxlc3RvbmUgbj0iMzMiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIEkgc2VlIHRoZSBwbG90CiAgICAgICAgICAgICAgICAgICAgdGhpY2tlbmluZy4gSSBob3BlIEkgbWF5IHByb3ZlIGEgZmFsc2UgcHJvcGhldCwgYnV0IEkgZmVhciB0aGUgY2F0YXN0cm9waGUgaXMKICAgICAgICAgICAgICAgICAgICBldmVuIG5vdyBvbmx5IHRvbyBuZWFyLiBTbyB3aGVuIHlvdSBjYW4gbm8gbG9uZ2VyIHNodXQgeW91ciBleWVzIHRvIHdoYXQgaXMKICAgICAgICAgICAgICAgICAgICBoYXBwZW5pbmcsIHdoZW4geW91IGRvIG5vdCBuZWVkIG1lIG9yIHNvbWVvbmUgZWxzZSB0byB0ZWxsIHlvdSwgYnV0IGNhbiBhbGwgc2VlCiAgICAgICAgICAgICAgICAgICAgZm9yIHlvdXJzZWx2ZXMgYW5kIGJlIHF1aXRlIGNlcnRhaW4gdGhhdCBhbGwgdGhpcyBpcyBkaXJlY3RlZCBhZ2FpbnN0IHlvdSwgdGhlbgogICAgICAgICAgICAgICAgICAgIEkgZXhwZWN0IHlvdSB3aWxsIGJlIGFuZ3J5IGFuZCBleGFzcGVyYXRlZC4gPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXMsIEkgYW0gYWZyYWlkIHRoYXQsIHNpbmNlIHRoZSBhbWJhc3NhZG9ycyBoYXZlIGtlcHQgc2lsZW5jZSBhYm91dCB0aGUKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcyBmb3Igd2hpY2ggdGhleSBrbm93IHRoZXkgaGF2ZSBiZWVuIGJyaWJlZCwgdGhvc2Ugd2hvIGFyZSB0cnlpbmcgdG8KICAgICAgICAgICAgICAgICAgICByZXBhaXIgc29tZSBvZiB0aGUgbG9zc2VzIHRoYXQgdGhlc2UgbWVuIGhhdmUgY2F1c2VkIG1heSBjaGFuY2UgdG8gZmFsbCB1bmRlcgogICAgICAgICAgICAgICAgICAgIHlvdXIgZGlzcGxlYXN1cmU7IGZvciBJIG9ic2VydmUgdGhhdCBwZW9wbGUgdmVudCB0aGVpciB3cmF0aCBhcyBhIHJ1bGUsIG5vdCBvbgogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBhcmUgdG8gYmxhbWUsIGJ1dCBjaGllZmx5IG9uIHRob3NlIHdobyBhcmUgd2l0aGluIHRoZWlyIHJlYWNoLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjM1IiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGVyZWZvcmUsIHdoaWxlIHRoZSBkYW5nZXIgaXMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZnV0dXJlIGFuZCBpcyBnYXRoZXJpbmcgaGVhZCwgd2hpbGUgd2UgY2FuIHN0aWxsIGhlYXIgb25lIGFub3RoZXIgc3BlYWssIEkgd2FudAogICAgICAgICAgICAgICAgICAgIHRvIHJlbWluZCBlYWNoIG9uZSBvZiB5b3UsIGhvd2V2ZXIgY2xlYXJseSBoZSBrbm93cyBpdCwgd2hvIGl0IGlzIHRoYXQgcGVyc3VhZGVkCiAgICAgICAgICAgICAgICAgICAgeW91IHRvIGFiYW5kb24gdGhlIFBob2NpYW5zIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+LCB0aGUgY29tbWFuZCBvZiB3aGljaCBnYXZlIFBoaWxpcCB0aGUgY29tbWFuZCBhbHNvCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHJvYWQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzdXM8L3BsYWNlTmFtZT4sIGFuZCB3aG8gaXQgaXMgdGhhdAogICAgICAgICAgICAgICAgICAgIGhhcyBmb3JjZWQgeW91IHRvIHRha2UgY291bnNlbCwgbm90IGZvciB5b3VyIHJpZ2h0cyBhbmQgaW50ZXJlc3RzIGFicm9hZCwgYnV0CiAgICAgICAgICAgICAgICAgICAgZm9yIHlvdXIgcG9zc2Vzc2lvbnMgaGVyZSBhdCBob21lIGFuZCBmb3IgdGhlIHdhciBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+LCBhIHdhciB3aGljaCB3aWxsIGJyaW5nIGRpc3RyZXNzIG9uCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgb25lIG9mIHVzLCB3aGVuIGl0IGRvZXMgY29tZSwgYnV0IHdoaWNoIHJlYWxseSBkYXRlcyBmcm9tIHRoYXQgdmVyeSBkYXkuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMzYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmIHlvdSBoYWQgbm90IGJlZW4gaG9vZHdpbmtlZCB0aGVuLAogICAgICAgICAgICAgICAgICAgIHRoZXJlIHdvdWxkIGJlIG5vIGFueGlldHkgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIFBoaWxpcCBjb3VsZCBuZXZlciwgb2YgY291cnNlLCBoYXZlIGdhaW5lZCBjb21tYW5kIG9mIHRoZSBzZWEgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVhY2hlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+IHdpdGggaGlzIGZsZWV0LCBub3IKICAgICAgICAgICAgICAgICAgICBjb3VsZCBoZSBoYXZlIG1hcmNoZWQgcGFzdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+IGFuZCBQaG9jaXMsIGJ1dCBlaXRoZXIgaGUgd291bGQgaGF2ZSBhY3RlZCBmYWlybHkKICAgICAgICAgICAgICAgICAgICBhbmQgb2JzZXJ2ZWQgdGhlIFBlYWNlIGJ5IGtlZXBpbmcgcXVpZXQsIG9yIGhlIHdvdWxkIGhhdmUgYmVlbiBpbnN0YW50bHkgZW5nYWdlZAogICAgICAgICAgICAgICAgICAgIGluIGEgd2FyIHNpbWlsYXIgdG8gdGhhdCB3aGljaCBtYWRlIGhpbSBzbyBhbnhpb3VzIGZvciB0aGUgUGVhY2UuIDxtaWxlc3RvbmUgbj0iMzciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Fbm91Z2ggaGFzIG5vdyBiZWVuCiAgICAgICAgICAgICAgICAgICAgc2FpZCBieSB3YXkgb2YgcmVtaW5kZXIuIE1heSBhbGwgdGhlIGdvZHMgZm9yYmlkIHRoYXQgbXkgd2FybmluZ3Mgc2hvdWxkIGV2ZXIgYmUKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHRvIHRoZSBzdGVybmVzdCB0ZXN0ISBGb3IgSSB3b3VsZCBub3Qgd2lsbGluZ2x5IHNlZSBvbmUgbWFuIHN1ZmZlciwgZXZlbgogICAgICAgICAgICAgICAgICAgIHRob3VnaCBoZSBkZXNlcnZlIHRvIHBlcmlzaCwgaWYgaGlzIHB1bmlzaG1lbnQgaW52b2x2ZXMgdGhlIGRhbmdlciBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGFtYWdlIG9mIGFsbC48L3A+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGVuZXZlciwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2UgYXJlIGRpc2N1c3NpbmcKICAgICAgICAgICAgICAgICAgICBQaGlsaXAncyBpbnRyaWd1ZXMgYW5kIGhpcyB2aW9sYXRpb25zIG9mIHRoZSBwZWFjZSwgSSBvYnNlcnZlIHRoYXQgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHNwZWVjaGVzIG9uIG91ciBzaWRlIGFyZSBtYW5pZmVzdGx5IGluc3BpcmVkIGJ5IGp1c3RpY2UgYW5kIGdlbmVyb3NpdHksIGFuZAogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBkZW5vdW5jZSBQaGlsaXAgYXJlIGFsbCBmZWx0IHRvIGJlIHNheWluZyBleGFjdGx5IHRoZSByaWdodCB0aGluZzsgYnV0CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG11Y2ggbmVlZGVkIGFjdGlvbiwgd2hpY2ggYWxvbmUgd291bGQgbWFrZSB0aGUgc3BlZWNoZXMgd29ydGggaGVhcmluZywKICAgICAgICAgICAgICAgICAgICBsaXR0bGUgb3Igbm90aGluZyBlbnN1ZXMuIDwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlVuZm9ydHVuYXRlbHkgYWxsIG91cgogICAgICAgICAgICAgICAgICAgIG5hdGlvbmFsIGFmZmFpcnMgaGF2ZSBub3cgcmVhY2hlZCB0byBzdWNoIGEgcGFzcywgdGhhdCB0aGUgbW9yZSBjb21wbGV0ZWx5IGFuZAogICAgICAgICAgICAgICAgICAgIG1hbmlmZXN0bHkgUGhpbGlwIGlzIGNvbnZpY3RlZCBvZiB2aW9sYXRpbmcgdGhlIHBlYWNlIHdpdGggdXMgYW5kIG9mIHBsb3R0aW5nCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgd2hvbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCB0aGUgbW9yZQogICAgICAgICAgICAgICAgICAgIGRpZmZpY3VsdCBpdCBpcyB0byBzdWdnZXN0IHRoZSByaWdodCBjb3Vyc2Ugb2YgYWN0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZWFzb24sIEF0aGVuaWFucywgaXMgdGhpcy4gVGhvdWdoIGFsbCB3aG8gYWltIGF0IHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIGFnZ3JhbmRpemVtZW50IG11c3QgYmUgY2hlY2tlZCwgbm90IGJ5IHNwZWVjaGVzLCBidXQgYnkgcHJhY3RpY2FsIG1lYXN1cmVzLCB5ZXQsCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGZpcnN0IHBsYWNlLCB3ZSB3aG8gY29tZSBiZWZvcmUgeW91IHNocmluayBmcm9tIGFueSBkZWZpbml0ZSBwcm9wb3NhbCBvcgogICAgICAgICAgICAgICAgICAgIGFkdmljZSwgYmVpbmcgcmVsdWN0YW50IHRvIGluY3VyIHlvdXIgZGlzcGxlYXN1cmU7IHdlIHByZWZlciB0byBkaWxhdGUgb24KICAgICAgICAgICAgICAgICAgICBQaGlsaXAncyBzaG9ja2luZyBiZWhhdmlvciBhbmQgdGhlIGxpa2UgdG9waWNzOyBhbmQsIHNlY29uZGx5LCB5b3Ugd2hvIHNpdCBoZXJlCiAgICAgICAgICAgICAgICAgICAgYXJlIGluZGVlZCBiZXR0ZXIgZXF1aXBwZWQgdGhhbiBQaGlsaXAgZm9yIG1ha2luZyBzcGVlY2hlcyBhYm91dCBqdXN0aWNlIGFuZCBmb3IKICAgICAgICAgICAgICAgICAgICBhcHByZWNpYXRpbmcgdGhlbSBpbiB0aGUgbW91dGggb2YgYW5vdGhlciwgYnV0LCB3aGVuIGl0IGNvbWVzIHRvIGhpbmRlcmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBhY2NvbXBsaXNobWVudCBvZiBoaXMgcHJlc2VudCBwbGFucywgeW91IHJlbWFpbiB1dHRlcmx5IGluYWN0aXZlLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN1bHQgaXMsIEkgc3VwcG9zZSwgaW5ldml0YWJsZSBhbmQgcGVyaGFwcwogICAgICAgICAgICAgICAgICAgIHJlYXNvbmFibGUuIFdoZXJlIGVpdGhlciBzaWRlIGRldm90ZXMgaXRzIHRpbWUgYW5kIGVuZXJneSwgdGhlcmUgaXQgc3VjY2VlZHMgdGhlCiAgICAgICAgICAgICAgICAgICAgYmV0dGVy4oCUUGhpbGlwIGluIGFjdGlvbiwgYnV0IHlvdSBpbiBhcmd1bWVudC4gU28gaWYgeW91IHN0aWxsIHRoaW5rIGl0CiAgICAgICAgICAgICAgICAgICAgZW5vdWdoIHRvIGVtcGxveSB0aGUgc291bmRlciBhcmd1bWVudHMsIHRoYXQgaXMgZWFzeTsgeW91ciB0YXNrIGVudGFpbHMgbm8KICAgICAgICAgICAgICAgICAgICB0cm91YmxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiB5b3UgaGF2ZSB0byBkZXZpc2UgbWVhbnMKICAgICAgICAgICAgICAgICAgICB3aGVyZWJ5IG91ciBwcmVzZW50IGZvcnR1bmVzIHNoYWxsIGJlIHJlcGFpcmVkLCBhbmQgdGhlaXIgZnVydGhlciBkZWNsaW5lIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgbm90IHRha2UgdXMgY29tcGxldGVseSBieSBzdXJwcmlzZSwgYW5kIHdlIHNoYWxsIG5vdCBiZSBjb25mcm9udGVkIGJ5IGEgbWlnaHR5CiAgICAgICAgICAgICAgICAgICAgcG93ZXIgd2hpY2ggd2Ugc2hhbGwgYmUgdW5hYmxlIGV2ZW4gdG8gd2l0aHN0YW5kLCB0aGVuIG91ciBtZXRob2Qgb2YKICAgICAgICAgICAgICAgICAgICBkZWxpYmVyYXRpb24gbXVzdCBiZSBjaGFuZ2VkLCBhbmQgYWxsIHdobyBzcGVhayBhbmQgYWxsIHdobyBsaXN0ZW4gbXVzdCBjaG9vc2UKICAgICAgICAgICAgICAgICAgICB0aGUgYmVzdCBhbmQgc2FmZXN0IHBvbGljeSBpbnN0ZWFkIG9mIHRoZSBlYXNpZXN0IGFuZCBtb3N0IGFncmVlYWJsZS4gPC90cmFuc2xhdGlvbj4="
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBpZiBhbnlvbmUgdmlld3Mgd2l0aCBjb25maWRlbmNlIHRoZSBwcmVzZW50IHBvd2VyIG9mIFBoaWxpcCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZXh0ZW50IG9mIGhpcyBkb21pbmlvbnMsIGlmIGFueW9uZSBpbWFnaW5lcyB0aGF0IGFsbCB0aGlzIGltcG9ydHMgbm8gZGFuZ2VyIHRvCiAgICAgICAgICAgICAgICAgICAgb3VyIGNpdHkgYW5kIHRoYXQgeW91IGFyZSBub3QgdGhlIG9iamVjdCBvZiBoaXMgcHJlcGFyYXRpb25zLCBJIG11c3QgZXhwcmVzcyBteQogICAgICAgICAgICAgICAgICAgIGFzdG9uaXNobWVudCwgYW5kIGJlZyB5b3UgYWxsIGFsaWtlIHRvIGxpc3RlbiB0byBhIGJyaWVmIHN0YXRlbWVudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9ucyB0aGF0IGhhdmUgbGVkIG1lIHRvIGZvcm0gdGhlIG9wcG9zaXRlIGNvbmNsdXNpb24gYW5kIHRvIHJlZ2FyZAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCBhcyBvdXIgZW5lbXkuIFRoZW4sIGlmIHlvdSB0aGluayBtZSB0aGUgYmV0dGVyIHByb3BoZXQsIGFkb3B0IG15IGFkdmljZTsKICAgICAgICAgICAgICAgICAgICBpZiB5b3UgcHJlZmVyIHRob3NlIHdobyBoYXZlIHNvIGNvbmZpZGVudGx5IHRydXN0ZWQgaGltLCBnaXZlIHRoZW0geW91cgogICAgICAgICAgICAgICAgICAgIGFsbGVnaWFuY2UuIDwvdHJhbnNsYXRpb24+"
translation['6.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBJLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCByZWFzb24gdGh1cy4gV2hhdCBkaWQgUGhpbGlwIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgZ2V0IHVuZGVyIGhpcyBjb250cm9sIGFmdGVyIHRoZSBQZWFjZT8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+IGFuZCB0aGUgUGhvY2lhbiBnb3Zlcm5tZW50LiBXZWxsLCB3aGF0IGRpZCBoZSBtYWtlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlc2U/IEhlIGNob3NlIHRvIGFjdCBpbiB0aGUgaW50ZXJlc3RzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiwgbm90IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gQW5kIHdoeSBzbz8gQmVjYXVzZSwgSSBiZWxpZXZlLCBndWlkZWQgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRpb25zIGJ5IGFtYml0aW9uIGFuZCB0aGUgZGVzaXJlIG9mIHVuaXZlcnNhbCBkb21pbmlvbiwgcmVnYXJkbGVzcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjbGFpbXMgb2YgcGVhY2UgYW5kIHF1aWV0bmVzcyBhbmQganVzdGljZSwgPC90cmFuc2xhdGlvbj4="
translation['6.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmhlCiAgICAgICAgICAgICAgICAgICAgcmlnaHRseSBzYXcgdGhhdCB0byBvdXIgY2l0eSBhbmQgb3VyIG5hdGlvbmFsIGNoYXJhY3RlciBoZSBjb3VsZCBvZmZlciBub3RoaW5nLAogICAgICAgICAgICAgICAgICAgIGhlIGNvdWxkIGRvIG5vdGhpbmcsIHRoYXQgd291bGQgdGVtcHQgeW91IGZyb20gc2VsZmlzaCBtb3RpdmVzIHRvIHNhY3JpZmljZSB0bwogICAgICAgICAgICAgICAgICAgIGhpbSBhbnkgb2YgdGhlIG90aGVyIEdyZWVrIHN0YXRlcywgYnV0IHRoYXQgeW91LCByZXZlcmVuY2luZyBqdXN0aWNlLCBzaHJpbmtpbmcKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBkaXNjcmVkaXQgaW52b2x2ZWQgaW4gc3VjaCB0cmFuc2FjdGlvbnMsIGFuZCBleGVyY2lzaW5nIGR1ZSBhbmQgcHJvcGVyCiAgICAgICAgICAgICAgICAgICAgZm9yZXRob3VnaHQsIHdvdWxkIHJlc2lzdCBhbnkgc3VjaCBhdHRlbXB0IG9uIGhpcyBwYXJ0IGFzIHN0b3V0bHkgYXMgaWYgeW91IHdlcmUKICAgICAgICAgICAgICAgICAgICBhY3R1YWxseSBhdCB3YXIgd2l0aCBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['6.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBUaGViYW5zLCBoZSBiZWxpZXZlZOKAlGFuZCB0aGUgZXZlbnQganVzdGlmaWVkIGhpbeKAlHRoYXQgaW4KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9yIGJlbmVmaXRzIHJlY2VpdmVkIHRoZXkgd291bGQgZ2l2ZSBoaW0gYSBmcmVlIGhhbmQgZm9yIHRoZSBmdXR1cmUgYW5kLAogICAgICAgICAgICAgICAgICAgIHNvIGZhciBmcm9tIG9wcG9zaW5nIG9yIHRod2FydGluZyBoaW0sIHdvdWxkIGV2ZW4gam9pbiBmb3JjZXMgd2l0aCBoaW0sIGlmIGhlIHNvCiAgICAgICAgICAgICAgICAgICAgb3JkZXJlZC4gVG9kYXksIG9uIHRoZSBzYW1lIGFzc3VtcHRpb24sIGhlIGlzIGRvaW5nIHRoZSBNZXNzZW5pYW5zIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBBcmdpdmVzIGEgZ29vZCB0dXJuLiBUaGF0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpcyB0aGUgaGlnaGVzdCBjb21wbGltZW50IGhlIGNvdWxkIHBheSB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['6.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYnkgdGhlc2UgdmVyeSBhY3RzIHlvdSBzdGFuZCBqdWRnZWQgdGhlIG9uZSBhbmQKICAgICAgICAgICAgICAgICAgICBvbmx5IHBvd2VyIGluIHRoZSB3b3JsZCBpbmNhcGFibGUgb2YgYWJhbmRvbmluZyB0aGUgY29tbW9uIHJpZ2h0cyBvZiB0aGUgR3JlZWtzCiAgICAgICAgICAgICAgICAgICAgYXQgYW55IHByaWNlLCBpbmNhcGFibGUgb2YgYmFydGVyaW5nIHlvdXIgZGV2b3Rpb24gdG8gdGhlaXIgY2F1c2UgZm9yIGFueSBmYXZvcgogICAgICAgICAgICAgICAgICAgIG9yIGFueSBwcm9maXQuIEFuZCBpdCB3YXMgbmF0dXJhbCB0aGF0IGhlIHNob3VsZCBmb3JtIHRoaXMgb3BpbmlvbiBvZiB5b3UgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnRyYXJ5IG9waW5pb24gb2YgdGhlIEFyZ2l2ZXMgYW5kIFRoZWJhbnMsIGJlY2F1c2UgaGUgbm90IG1lcmVseSBsb29rcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBwcmVzZW50LCBidXQgYWxzbyBkcmF3cyBhIGxlc3NvbiBmcm9tIHRoZSBwYXN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['6.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSSBzdXBwb3NlIGhlIGxlYXJucyBmcm9tIGhpc3RvcnkgYW5kIGZyb20gcmVwb3J0IHRoYXQgeW91cgogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycywgd2hlbiB0aGV5IG1pZ2h0LCBhdCB0aGUgcHJpY2Ugb2Ygc3VibWlzc2lvbiB0byB0aGUgR3JlYXQgS2luZywgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlY29tZSB0aGUgcGFyYW1vdW50IHBvd2VyIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBub3Qgb25seSByZWZ1c2VkIHRvIGVudGVydGFpbiB0aGF0IHByb3Bvc2FsLCBjb252ZXllZCB0byB0aGVtIGJ5IEFsZXhhbmRlciwgYW4KICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciBvZiBQaGlsaXAncyBsaW5lLCBidXQgY2hvc2UgdG8gcXVpdCB0aGVpciBob21lcyBhbmQgZW5kdXJlIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgaGFyZHNoaXAsIGFuZCB0aGVyZWFmdGVyIHdyb3VnaHQgdGhvc2UgZGVlZHMgd2hpY2ggYWxsIG1lbiBhcmUgYWx3YXlzIGVhZ2VyIHRvCiAgICAgICAgICAgICAgICAgICAgcmVsYXRlLCB0aG91Z2ggbm8gb25lIGhhcyBldmVyIGJlZW4gYWJsZSB0byB0ZWxsIHRoZW0gd29ydGhpbHk7IGFuZCB0aGVyZWZvcmUgSQogICAgICAgICAgICAgICAgICAgIHNoYWxsIG5vdCBiZSB3cm9uZyBpbiBwYXNzaW5nIHRoZW0gb3ZlciwgZm9yIHRoZXkgYXJlIGluZGVlZCBncmVhdCBiZXlvbmQgYW55CiAgICAgICAgICAgICAgICAgICAgbWFuJ3MgcG93ZXIgb2Ygc3BlZWNoLiBPbiB0aGUgb3RoZXIgaGFuZCwgaGUgbGVhcm5zIHRoYXQgdGhlIGFuY2VzdG9ycyBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIFRoZWJhbnMgYW5kIEFyZ2l2ZXMgZWl0aGVyIGZvdWdodCBmb3IgdGhlIGJhcmJhcmlhbnMgb3IgZGlkIG5vdCBmaWdodCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['6.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBrbm93cywgdGhlbiwgdGhhdCB0aGV5IGJvdGggd2lsbAogICAgICAgICAgICAgICAgICAgIHB1cnN1ZSB0aGVpciBwcml2YXRlIGludGVyZXN0cywgaXJyZXNwZWN0aXZlIG9mIHRoZSBjb21tb24gYWR2YW50YWdlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIEdyZWVrcy4gU28gaGUgdGhvdWdodCB0aGF0IGlmIGhlIGNob3NlIHlvdSwgaGUgd291bGQgYmUgY2hvb3NpbmcgZnJpZW5kcywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3VyIGZyaWVuZHNoaXAgd291bGQgYmUgYmFzZWQgb24ganVzdGljZTsgYnV0IHRoYXQgaWYgaGUgYXR0YWNoZWQgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBvdGhlcnMsIGhlIHdvdWxkIGZpbmQgaW4gdGhlbSB0aGUgdG9vbHMgb2YgaGlzIG93biBhbWJpdGlvbi4gVGhhdCBpcyB3aHksCiAgICAgICAgICAgICAgICAgICAgbm93IGFzIHRoZW4sIGhlIGNob29zZXMgdGhlbSByYXRoZXIgdGhhbiB5b3UuIEZvciBzdXJlbHkgaXQgaXMgbm90IHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICByZWdhcmRzIHRoZWlyIGZsZWV0cyBhcyBzdXBlcmlvciB0byBvdXJzLCBub3IgdGhhdCwgaGF2aW5nIGRpc2NvdmVyZWQgc29tZQogICAgICAgICAgICAgICAgICAgIGlubGFuZCBlbXBpcmUsIGhlIGhhcyBhYmFuZG9uZWQgdGhlIHNlYWJvYXJkIHdpdGggaXRzIGhhcmJvcnMsIG5vciB5ZXQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGhhcyBhIHNob3J0IG1lbW9yeSBmb3IgdGhlIHNwZWVjaGVzIGFuZCB0aGUgcHJvbWlzZXMgdGhhdCBnYWluZWQgZm9yIGhpbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgUGVhY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhhZCBQaGlsaXAgcmVub3VuY2VkIGhpcyBob3BlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kaW5nIGEgbWFyaXRpbWUgYW5kIGNvbW1lcmNpYWwgc3RhdGUgYW5kIGNvbmZpbmVkIGhpbXNlbGYgdG8gZXh0ZW5kaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyBlbXBpcmUgbm9ydGggYW5kIHdlc3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCBoaXMgcmVqZWN0aW9uIG9mIEF0aGVuaWFuIGZyaWVuZHNoaXAgd291bGQgYmUKICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWxsaWdpYmxlLiBBcyBpdCBpcywgaXQgbXVzdCBiZSBvdGhlcndpc2UgZXhwbGFpbmVkLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIGhpcyByZWplY3Rpb24gb2YgQXRoZW5pYW4gZnJpZW5kc2hpcCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgICAgICBpbnRlbGxpZ2libGUuIEFzIGl0IGlzLCBpdCBtdXN0IGJlIG90aGVyd2lzZSBleHBsYWluZWQuPC90cmFuc2xhdGlvbj4="
translation['6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGl0IG1heSBiZQogICAgICAgICAgICAgICAgICAgIHVyZ2VkLCBieSBzb21lb25lIHdobyBjbGFpbXMgdG8ga25vdyBhbGwgYWJvdXQgaXQsIHRoYXQgaGUgYWN0ZWQgb24gdGhhdAogICAgICAgICAgICAgICAgICAgIG9jY2FzaW9uLCBub3QgZnJvbSBhbWJpdGlvbiBvciBmcm9tIGFueSBvZiB0aG9zZSBtb3RpdmVzIHdpdGggd2hpY2ggSSBmaW5kCiAgICAgICAgICAgICAgICAgICAgZmF1bHQsIGJ1dCBiZWNhdXNlIHRoZSBjbGFpbXMgb2YgdGhlIFRoZWJhbnMgd2VyZSBtb3JlIGp1c3QgdGhhbiBvdXJzLiBOb3cgdGhhdAogICAgICAgICAgICAgICAgICAgIGlzIHByZWNpc2VseSB0aGUgb25lIGFyZ3VtZW50IHRoYXQgaGUgY2Fubm90IHVzZSBub3cuIFdoYXQhIFRoZSBtYW4gd2hvIG9yZGVycwogICAgICAgICAgICAgICAgICAgIHRoZSBMYWNlZGFlbW9uaWFucyB0byBnaXZlIHVwIHRoZWlyIGNsYWltcyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lc3NlbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lc3NlbmUiPk1lc3NlbmU8L3BsYWNlTmFtZT4sIGhvdyBjb3VsZCBoZSBwcmV0ZW5kIHRoYXQgaGUgaGFuZGVkIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEwMzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTAzNCI+T3JjaG9tZW51czwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyMzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTIzNSI+Q29yb25lYTwvcGxhY2VOYW1lPiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGhlIHRob3VnaHQgaXQgYW4gYWN0IG9mIGp1c3RpY2U/IDwvdHJhbnNsYXRpb24+"
translation['6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+4oCcQnV0LOKAnSBpdCB3aWxsIGJlIHVyZ2VkCiAgICAgICAgICAgICAgICAgICAg77yIZm9yIHRoZXJlIGlzIHRoaXMgZXhjdXNlIGxlZnTvvIksIOKAnGhlIHdhcyBmb3JjZWQgdG8KICAgICAgICAgICAgICAgICAgICB5aWVsZCBhZ2FpbnN0IGhpcyBiZXR0ZXIganVkZ2VtZW50LCBmaW5kaW5nIGhpbXNlbGYgaGVtbWVkIGluIGJldHdlZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgVGhlc3NhbGlhbiBjYXZhbHJ5IGFuZCB0aGUgVGhlYmFuIGhlYXZ5IGluZmFudHJ5LuKAnSBHb29kISBTbyB0aGV5IHNheQogICAgICAgICAgICAgICAgICAgIGhlIGlzIHdhaXRpbmcgdG8gcmVnYXJkIHRoZSBUaGViYW5zIHdpdGggc3VzcGljaW9uLCBhbmQgc29tZSBjaXJjdWxhdGUgYSBydW1vcgogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2lsbCBmb3J0aWZ5IEVsYXRlYS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VG8gcmVidWlsZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgd2FsbHMgb2YgRWxhdGVhLCBkZXN0cm95ZWQgaW4gMzQ2LCB3b3VsZCBiZSBhIGNoZWNrIHRvIHRoZSBUaGViYW5zLCBhcwogICAgICAgICAgICAgICAgICAgICAgICBiYXJyaW5nIHRoZWlyIHdheSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNDAwMzk2MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw0MDAzOTYzIj5QaG9jaXM8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIFBoaWxpcCdzIG9jY3VwYXRpb24gb2YgRWxhdGVhIGluIDMzOSBpcyB0aGUgdGhlbWUgb2YgdGhlIHdlbGwta25vd24gcGFzc2FnZQogICAgICAgICAgICAgICAgICAgICAgICBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjE2OSIgdmFsaWQ9InllcyI+RGVtLiAxOC4xNjk8L2JpYmw+IGZmLiBEZW1vc3RoZW5lcyBpcyBwbGF5aW5nIG9uCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0d28gbWVhbmluZ3Mgb2YgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrzhvbPOu867zrXOuTwvZm9yZWlnbj4sIOKAnGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIGxpa2VseSB0b+KAnSBhbmQg4oCcaGUgaXMgZGVsYXlpbmcgdG8u4oCdPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw0MDAzOTYzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDQwMDM5NjMiPlBob2NpczwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgUGhpbGlwJ3Mgb2NjdXBhdGlvbiBvZiBFbGF0ZWEgaW4gMzM5IGlzIHRoZSB0aGVtZSBvZiB0aGUgd2VsbC1rbm93biBwYXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTY5IiB2YWxpZD0ieWVzIj5EZW0uIDE4LjE2OTwvYmlibD4gZmYuIERlbW9zdGhlbmVzIGlzIHBsYXlpbmcgb24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHR3byBtZWFuaW5ncyBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OvOG9s867zrvOtc65PC9mb3JlaWduPiwg4oCcaGUKICAgICAgICAgICAgICAgICAgICAgICAgaXMgbGlrZWx5IHRv4oCdIGFuZCDigJxoZSBpcyBkZWxheWluZyB0by7igJ08L3RyYW5zbGF0aW9uPg=="
translation['6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IGlzIGp1c3Qgd2hhdCBoZSBpcwogICAgICAgICAgICAgICAgICAgIOKAnHdhaXRpbmfigJ0gdG8gZG8sIGFuZCB3aWxsIGdvIG9uCiAgICAgICAgICAgICAgICAgICAg4oCcd2FpdGluZyzigJ0gaW4gbXkgb3Bpbmlvbi4gQnV0IGhlIGlzIG5vdAogICAgICAgICAgICAgICAgICAgIOKAnHdhaXRpbmfigJ0gdG8gaGVscCB0aGUgTWVzc2VuaWFucyBhbmQgQXJnaXZlcyBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zOiBoZSBpcyBhY3R1YWxseSBkaXNwYXRjaGluZyBtZXJjZW5hcmllcyBhbmQgZm9yd2FyZGluZyBzdXBwbGllcywKICAgICAgICAgICAgICAgICAgICBhbmQgaGUgaXMgZXhwZWN0ZWQgaW4gcGVyc29uIHdpdGggYSBsYXJnZSBmb3JjZS4gV2hhdCEgVGhlIExhY2VkYWVtb25pYW5zLCB0aGUKICAgICAgICAgICAgICAgICAgICBzdXJ2aXZpbmcgZW5lbWllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgZW5nYWdlZCBpbiBkZXN0cm95aW5nOyB0aGUgUGhvY2lhbnMsIHdob20gaGUgaGFzIGhpbXNlbGYgYWxyZWFkeSBkZXN0cm95ZWQsIGhlCiAgICAgICAgICAgICAgICAgICAgaXMgbm93IGVuZ2FnZWQgaW4gcHJlc2VydmluZyEgQW5kIHdobyBpcyBwcmVwYXJlZCB0byBiZWxpZXZlIHRoYXQ/IDwvdHJhbnNsYXRpb24+"
translation['6.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbXkgcGFydCBJIGRvIG5vdCBiZWxpZXZlIHRoYXQgUGhpbGlwLCBpZiBoZSBhY3RlZAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBmaXJzdCBwbGFjZSByZWx1Y3RhbnRseSBhbmQgdW5kZXIgY29tcHVsc2lvbiwgb3IgaWYgaGUgd2VyZSBub3cgaW5jbGluZWQKICAgICAgICAgICAgICAgICAgICB0byB0aHJvdyB0aGUgVGhlYmFucyBvdmVyLCB3b3VsZCBiZSBwZXJzaXN0ZW50bHkgb3Bwb3NpbmcgdGhlaXIgZW5lbWllcy4gQnV0IGlmCiAgICAgICAgICAgICAgICAgICAgd2UgbWF5IGp1ZGdlIGZyb20gaGlzIHByZXNlbnQgY29uZHVjdCwgaXQgaXMgcGxhaW4gdGhhdCBvbiB0aGF0IG9jY2FzaW9uIGFsc28gaGUKICAgICAgICAgICAgICAgICAgICBhY3RlZCBmcm9tIGRlbGliZXJhdGUgY2hvaWNlLCBhbmQgZXZlcnl0aGluZywgaWYgY29ycmVjdGx5IG9ic2VydmVkLCBwb2ludHMgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgZmFjdCB0aGF0IGFsbCBoaXMgaW50cmlndWVzIGFyZSBkaXJlY3RlZCBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['6.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdG9kYXkgYXQgYW55IHJhdGUgdGhpcyBwb2xpY3kgaXMgaW4gYSBtZWFzdXJlIGZvcmNlZCB1cG9uIGhpbS4gRm9yCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZSEgSGUgd2FudHMgdG8gcnVsZSwgYW5kIGhlIGhhcyBtYWRlIHVwIGhpcyBtaW5kIHRoYXQgeW91LCBhbmQgeW91IG9ubHksCiAgICAgICAgICAgICAgICAgICAgYXJlIGhpcyByaXZhbHMuIEhlIGhhcyBsb25nIGluanVyZWQgeW91OyBvZiBub3RoaW5nIGlzIGhlIG1vcmUgY29uc2Npb3VzIHRoYW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGF0LiBGb3IgaXQgaXMgYnkgaG9sZGluZyB0aGUgY2l0aWVzIHdoaWNoIGFyZSByZWFsbHkgeW91cnMgdGhhdCBoZSByZXRhaW5zCiAgICAgICAgICAgICAgICAgICAgc2FmZSBwb3NzZXNzaW9uIG9mIGFsbCB0aGUgcmVzdCwgYW5kIGhlIGZlZWxzIHRoYXQgaWYgaGUgZ2F2ZSB1cCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+LCBoaXMgb3duIGNvdW50cnkgd291bGQgbm90IGJlIHNhZmUKICAgICAgICAgICAgICAgICAgICBmb3IgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBrbm93cywgdGhlbiwgdGhlc2UgdHdvCiAgICAgICAgICAgICAgICAgICAgZmFjdHPigJR0aGF0IGhlIGlzIGludHJpZ3VpbmcgYWdhaW5zdCB5b3UgYW5kIHRoYXQgeW91IGFyZSBhd2FyZSBvZiBpdC4KICAgICAgICAgICAgICAgICAgICBBc3N1bWluZyB0aGF0IHlvdSBhcmUgaW50ZWxsaWdlbnQsIGhlIHRoaW5rcyB5b3UgYXJlIGJvdW5kIHRvIGhhdGUgaGltLCBhbmQgaGUKICAgICAgICAgICAgICAgICAgICBpcyBvbiB0aGUgYWxlcnQsIGV4cGVjdGluZyBzb21lIGJsb3cgdG8gZmFsbCwgaWYgeW91IGNhbiBzZWl6ZSBhbiBvcHBvcnR1bml0eQogICAgICAgICAgICAgICAgICAgIGFuZCBpZiBoZSBjYW5ub3QgZ2V0IGluIGhpcyBibG93IGZpcnN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['6.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0CiAgICAgICAgICAgICAgICAgICAgaXMgd2h5IGhlIGlzIHdpZGUgYXdha2UgYW5kIHJlYWR5IHRvIHN0cmlrZSwgYW5kIHdoeSBoZSBpcyBjb3VydGluZyBjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHRvIHRoZSBkZXRyaW1lbnQgb2Ygb3VyIGNpdHnigJRUaGViYW5zLCBJIG1lYW4sIGFuZCB0aG9zZQogICAgICAgICAgICAgICAgICAgIFBlbG9wb25uZXNpYW5zIHdobyBzaGFyZSB0aGVpciB2aWV3cy4gSGUgaW1hZ2luZXMgdGhhdCB0aGVpciBjdXBpZGl0eSB3aWxsIGxlYWQKICAgICAgICAgICAgICAgICAgICB0aGVtIHRvIGFjY2VwdCB0aGUgcHJlc2VudCBzaXR1YXRpb24sIHdoaWxlIHRoZWlyIG5hdHVyYWwgZHVsbG5lc3Mgd2lsbCBwcmV2ZW50CiAgICAgICAgICAgICAgICAgICAgdGhlbSBmcm9tIGZvcmVzZWVpbmcgYW55dGhpbmcgdGhhdCBtYXkgZm9sbG93LiBZZXQgbWVuIG9mIGV2ZW4gbW9kZXJhdGUKICAgICAgICAgICAgICAgICAgICBpbnRlbGxpZ2VuY2UgbWlnaHQgcGVyY2VpdmUgc29tZSBjbGVhciBpbmRpY2F0aW9ucywgd2hpY2ggSSBoYWQgb2NjYXNpb24gdG8KICAgICAgICAgICAgICAgICAgICBwb2ludCBvdXQgdG8gdGhlIE1lc3NlbmlhbnMgYW5kIHRoZSBBcmdpdmVzLCBhbmQgd2hpY2ggbWF5IHBlcmhhcHMgd2l0aAogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZSBiZSByZXBlYXRlZCB0byB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['6.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+4oCcQ2FuIHlvdSBub3QgaW1hZ2luZSzigJ0gSSBzYWlkLAogICAgICAgICAgICAgICAgICAgIGFkZHJlc3NpbmcgdGhlIE1lc3NlbmlhbnMsIOKAnGhvdyBhbm5veWVkIHRoZSBPbHludGhpYW5zIHdvdWxkIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIHRvIGhlYXIgYSB3b3JkIHNhaWQgYWdhaW5zdCBQaGlsaXAgaW4gdGhlIGRheXMgd2hlbiBoZSB3YXMgaGFuZGluZyBvdmVyIHRvIHRoZW0KICAgICAgICAgICAgICAgICAgICBBbnRoZW11cywgdG8gd2hpY2ggYWxsIHRoZSBmb3JtZXIga2luZ3Mgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IGxhaWQgY2xhaW0sIHdoZW4gaGUgd2FzIG1ha2luZyB0aGVtIGEgcHJlc2VudCBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDgxNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDA0ODE0Ij5Qb3RpZGFlYTwvcGxhY2VOYW1lPiwgZXhwZWxsaW5nIHRoZSBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgIHNldHRsZXJzLCBhbmQgd2hlbiBoZSBoYWQgdGFrZW4gdXBvbiBoaW1zZWxmIHRoZSByZXNwb25zaWJpbGl0eSBvZiBhIHF1YXJyZWwKICAgICAgICAgICAgICAgICAgICB3aXRoIHVzIGFuZCBoYWQgZ2l2ZW4gdGhlbSB0aGUgdGVycml0b3J5IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+IGZvciB0aGVpciBvd24gdXNlPyBEbyB5b3UgaW1hZ2luZSB0aGV5IGV4cGVjdGVkIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgdHJlYXRlZCBhcyB0aGV5IGhhdmUgYmVlbiwgb3Igd291bGQgaGF2ZSBiZWxpZXZlZCBhbnlvbmUgd2hvIHN1Z2dlc3RlZCBpdD8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5OZXZlcnRoZWxlc3Ms4oCdIHNhaWQgSSwKICAgICAgICAgICAgICAgICAgICDigJxhZnRlciBhIGJyaWVmIGVuam95bWVudCBvZiBvdGhlciBtZW4ncyB0ZXJyaXRvcnksIHRoZXkgaGF2ZSBsb25nIGJlZW4KICAgICAgICAgICAgICAgICAgICByb2JiZWQgYnkgUGhpbGlwIG9mIHRoZWlyIG93biwgZXhwZWxsZWQgd2l0aCBjb250dW1lbHksIG5vdCBtZXJlbHkgdmFucXVpc2hlZAogICAgICAgICAgICAgICAgICAgIGJ1dCBiZXRyYXllZCwgYm91Z2h0IGFuZCBzb2xkIGJ5IHRoZWlyIG93biBjb3VudHJ5LW1lbi4gRm9yIHRydWx5IHN1Y2ggY2xvc2UKICAgICAgICAgICAgICAgICAgICBjb21tdW5pY2F0aW9ucyB3aXRoIHR5cmFubnkgY29ycnVwdCBnb29kIGNvbnN0aXR1dGlvbnMuIDwvdHJhbnNsYXRpb24+"
translation['6.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hhdCBvZiB0aGUgVGhlc3NhbGlhbnM/IERvIHlvdQogICAgICAgICAgICAgICAgICAgIGltYWdpbmUs4oCdIEkgc2FpZCwg4oCcdGhhdCB3aGVuIGhlIHdhcyBleHBlbGxpbmcgdGhlaXIgZGVzcG90cywKICAgICAgICAgICAgICAgICAgICBvciBhZ2FpbiB3aGVuIGhlIHdhcyBwcmVzZW50aW5nIHRoZW0gd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE5pY2FlYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTmljYWVhIj5OaWNhZWE8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzUxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTEiPk1hZ25lc2lhPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIHRoZXkgZXZlciBkcmVhbWVkIHRoYXQgYSBDb3VuY2lsIG9mIFRlbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA5LjI2IiB2YWxpZD0ieWVzIj5EZW0uIDkuMjY8L2JpYmw+IFBoaWxpcCBzZXQgdXAKICAgICAgICAgICAgICAgICAgICAgICAgJmd0O3RldHJhcmNoaWVzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTkiPlRoZXNzYWx5PC9wbGFjZU5hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgdHdvIGFjY291bnRzIG1heSBiZSByZWNvbmNpbGVkIGJ5IGFzc3VtaW5nIHRoYXQgaGUgcmV0YWluZWQgdGhlIG9sZAogICAgICAgICAgICAgICAgICAgICAgICBmb3VyZm9sZCBkaXZpc2lvbiBvZiB0aGUgY291bnRyeSwgYnV0IHNldCB1cCBhbiBvbGlnYXJjaHkgb2YgdGVuIGluIGVhY2gKICAgICAgICAgICAgICAgICAgICAgICAgZGl2aXNpb24uIFBoaWxpcCwgd2hvc2UgcG9saWN5IHdhcyB0byBkaXZpZGUgYW5kIGNvbnF1ZXIsIHdvdWxkIGJlIHVubGlrZWx5CiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGNlbnRyYWxpemUgdGhlIGdvdmVybm1lbnQuIEl0IGlzIGp1c3QgcG9zc2libGUgdGhhdCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OtM61zrrOsc60zrHPgc+H4b23zrHOvTwvZm9yZWlnbj4gbWF5IGJlIGEgbWlzdGFrZW4gYW1wbGlmaWNhdGlvbiBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OlOKAmc6xz4HPh+G9t86xzr08L2ZvcmVpZ24+PTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+EzrXPhM+BzrHPgc+H4b23zrHOvTwvZm9yZWlnbj4sIGJ1dCBpbiB0aGF0IGNhc2UgdGhlIHNpbmd1bGFyIHdvdWxkIGJlIHN0cmFuZ2UuCiAgICAgICAgICAgICAgICAgICAgICAgIE93aW5nIHRvIHRoZSBkZWNhcmNoaWVzIHdoaWNoIEx5c2FuZGVyIGltcG9zZWQgb24gc28gbWFueSBmcmVlIGNpdGllcyBhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZW5kIG9mIHRoZSBQZWxvcG9ubmVzaWFuIHdhciwgdGhlIG51bWJlciB0ZW4gd291bGQgaGF2ZSB0aGUgc2FtZSBzaW5pc3RlcgogICAgICAgICAgICAgICAgICAgICAgICBhc3NvY2lhdGlvbnMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IGFzIGl0IGhhZCBhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGFuZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxODE1OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE4MTU5Ij5WZW5pY2U8L3BsYWNlTmFtZT4uPC9ub3RlPiB3b3VsZCBiZSBlc3RhYmxpc2hlZCBhbW9uZwogICAgICAgICAgICAgICAgICAgIHRoZW0sIGFzIGl0IGlzIHRvZGF5LCBvciB0aGF0IHRoZSBzYW1lIG1hbiB3aG8gcmVzdG9yZWQgdG8gdGhlbSB0aGUgQW1waGljdHlvbmljCiAgICAgICAgICAgICAgICAgICAgbWVldGluZyBhdCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMjYiIHZhbGlkPSJ5ZXMiPkRlbS4gOS4yNjwvYmlibD4gUGhpbGlwIHNldCB1cAogICAgICAgICAgICAgICAgICAgICAgICAmZ3Q7dGV0cmFyY2hpZXMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSB0d28gYWNjb3VudHMgbWF5IGJlIHJlY29uY2lsZWQgYnkgYXNzdW1pbmcgdGhhdCBoZSByZXRhaW5lZCB0aGUgb2xkCiAgICAgICAgICAgICAgICAgICAgICAgIGZvdXJmb2xkIGRpdmlzaW9uIG9mIHRoZSBjb3VudHJ5LCBidXQgc2V0IHVwIGFuIG9saWdhcmNoeSBvZiB0ZW4gaW4gZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBkaXZpc2lvbi4gUGhpbGlwLCB3aG9zZSBwb2xpY3kgd2FzIHRvIGRpdmlkZSBhbmQgY29ucXVlciwgd291bGQgYmUgdW5saWtlbHkKICAgICAgICAgICAgICAgICAgICAgICAgdG8gY2VudHJhbGl6ZSB0aGUgZ292ZXJubWVudC4gSXQgaXMganVzdCBwb3NzaWJsZSB0aGF0IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs60zrXOus6xzrTOsc+Bz4fhvbfOsc69PC9mb3JlaWduPiBtYXkgYmUgYSBtaXN0YWtlbiBhbXBsaWZpY2F0aW9uIG9mIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6U4oCZzrHPgc+H4b23zrHOvTwvZm9yZWlnbj49PGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4TOtc+Ez4HOsc+Bz4fhvbfOsc69PC9mb3JlaWduPiwgYnV0IGluIHRoYXQgY2FzZSB0aGUgc2luZ3VsYXIgd291bGQgYmUgc3RyYW5nZS4KICAgICAgICAgICAgICAgICAgICAgICAgT3dpbmcgdG8gdGhlIGRlY2FyY2hpZXMgd2hpY2ggTHlzYW5kZXIgaW1wb3NlZCBvbiBzbyBtYW55IGZyZWUgY2l0aWVzIGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBlbmQgb2YgdGhlIFBlbG9wb25uZXNpYW4gd2FyLCB0aGUgbnVtYmVyIHRlbiB3b3VsZCBoYXZlIHRoZSBzYW1lIHNpbmlzdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGFzc29jaWF0aW9ucyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gYXMgaXQgaGFkIGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gYW5kIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE4MTU5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTgxNTkiPlZlbmljZTwvcGxhY2VOYW1lPi48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4gd291bGQKICAgICAgICAgICAgICAgICAgICBhbHNvIGFwcHJvcHJpYXRlIHRoZWlyIG93biBwZWN1bGlhciByZXZlbnVlcz8gSW1wb3NzaWJsZSEgQnV0IHNvIGl0IGNhbWUgdG8KICAgICAgICAgICAgICAgICAgICBwYXNzLCBhcyBhbGwgbWVuIG1heSBrbm93LiA8L3RyYW5zbGF0aW9uPg=="
translation['6.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5Zb3Us4oCdIEkKICAgICAgICAgICAgICAgICAgICBzYWlkLCDigJxnYXplIHdpdGggd29uZGVyIGF0IFBoaWxpcCBhcyBoZSBnaXZlcyBhd2F5IHRoaXMgYW5kIHByb21pc2VzCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgYnV0IGlmIHlvdSBhcmUgdHJ1bHkgd2lzZSwgcHJheSB0aGF0IHlvdSBtYXkgbmV2ZXIgZmluZCB0aGF0IGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGRlY2VpdmVkIGFuZCBjb3plbmVkIHlvdS4gVmVyaWx5LOKAnSBJIHNhaWQsIOKAnHRoZXJlIGFyZQogICAgICAgICAgICAgICAgICAgIG1hbmlmb2xkIG1lYW5zIGRldmlzZWQgYnkgc3RhdGVzIGZvciBwcm90ZWN0aW9uIGFuZCBzYWZldHnigJRzdG9ja2FkZXMsCiAgICAgICAgICAgICAgICAgICAgcmFtcGFydHMsIGZvc3NlcyBhbmQgdGhlIGxpa2UuIDwvdHJhbnNsYXRpb24+"
translation['6.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWxsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgYXJlIHdyb3VnaHQgYnkgaGFuZCBhbmQgZW50YWlsIGV4cGVuc2UuIEJ1dCB0aGVyZSBpcyBvbmUgY29tbW9uIGJ1bHdhcmsgd2hpY2gKICAgICAgICAgICAgICAgICAgICB0aGUgaW5zdGluY3Qgb2Ygc2Vuc2libGUgbWVuIHBvc3Nlc3NlcyB3aXRoaW4gaXRzZWxmLCBhIGdvb2QgYW5kIHNhZmUgb25lIGZvcgogICAgICAgICAgICAgICAgICAgIGFsbCwgYnV0IGludmFsdWFibGUgZm9yIGRlbW9jcmFjaWVzIGFnYWluc3QgdHlyYW50cy4gQW5kIHdoYXQgaXMgdGhhdCBidWx3YXJrPwogICAgICAgICAgICAgICAgICAgIEl0IGlzIG1pc3RydXN0LiBHdWFyZCB0aGF0OyBob2xkIGZhc3QgdG8gdGhhdC4gSWYgeW91IHByZXNlcnZlIGl0LCBubyBoYXJtIGNhbgogICAgICAgICAgICAgICAgICAgIHRvdWNoIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['6.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGlzIHlvdXIgb2JqZWN0P+KAnSBJCiAgICAgICAgICAgICAgICAgICAgc2FpZC4g4oCcRnJlZWRvbS4gVGhlbiBkbyB5b3Ugbm90IHNlZSB0aGF0IFBoaWxpcCdzIHZlcnkgdGl0bGVzIGFyZQogICAgICAgICAgICAgICAgICAgIHV0dGVybHkgaXJyZWNvbmNpbGFibGUgd2l0aCB0aGF0PyBGb3IgZXZlcnkga2luZywgZXZlcnkgZGVzcG90IGlzIHRoZSBzd29ybiBmb2UKICAgICAgICAgICAgICAgICAgICBvZiBmcmVlZG9tIGFuZCBvZiBsYXcuIEJld2FyZSzigJ0gc2FpZCBJLCDigJxsZXN0LCBzZWVraW5nIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgcmlkIG9mIHdhciwgeW91IGZpbmQgYSBtYXN0ZXIu4oCdIDwvdHJhbnNsYXRpb24+"
translation['6.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBpcyB3aGF0IEkgc2FpZCB0byB0aGVtLCBhbmQgdGhleQogICAgICAgICAgICAgICAgICAgIHNob3V0ZWQgdGhlaXIgYXBwcm92YWw7IGFuZCB0aGV5IGhlYXJkIG1hbnkgb3RoZXIgc3BlZWNoZXMgZnJvbSB0aGUgZW52b3lzLCBib3RoCiAgICAgICAgICAgICAgICAgICAgaW4gbXkgcHJlc2VuY2UgYW5kIGFnYWluIGxhdGVyLCBhcyBpdCBzZWVtczsgYnV0IHRoZXkgYXJlIG5vbmUgdGhlIG1vcmUgbGlrZWx5CiAgICAgICAgICAgICAgICAgICAgdG8gZG8gd2l0aG91dCBQaGlsaXAncyBmcmllbmRzaGlwIGFuZCBQaGlsaXAncyBwcm9taXNlcy4gPC90cmFuc2xhdGlvbj4="
translation['6.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQsIGluZGVlZCwgaXQgaXMgbm90IHN0cmFuZ2UgdGhhdCBNZXNzZW5pYW5zIGFuZAogICAgICAgICAgICAgICAgICAgIG90aGVyIFBlbG9wb25uZXNpYW5zIHNob3VsZCBzb21ldGltZXMgYWN0IGFnYWluc3QgdGhlaXIgYmV0dGVyIGp1ZGdlbWVudDsgYnV0CiAgICAgICAgICAgICAgICAgICAgeW91LCB3aG8ga25vdywgYm90aCBmcm9tIHlvdXIgb3duIGludGVsbGlnZW5jZSBhbmQgZnJvbSBvdXIgc3BlZWNoZXMsIGhvdyB5b3UKICAgICAgICAgICAgICAgICAgICBhcmUgY29tcGFzc2VkIGFib3V0IHdpdGggcGxvdHMgYW5kIHNuYXJlcywgeW91IHdpbGwsIGFzIGl0IHNlZW1zIHRvIG1lLCBmaW5kIHRvCiAgICAgICAgICAgICAgICAgICAgeW91ciBzdXJwcmlzZSB0aGF0IHRocm91Z2ggaGF2aW5nIGRvbmUgbm90aGluZyBpbiB0aW1lLCB5b3UgaGF2ZSBzdWJtaXR0ZWQgdG8KICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5nLiBTbyBtdWNoIGRvZXMgdGhlIHBsZWFzdXJlIGFuZCBlYXNlIG9mIHRoZSBtb21lbnQgcHJldmFpbCBvdmVyIHRoYXQKICAgICAgICAgICAgICAgICAgICB3aGljaCBhdCBzb21lIGZ1dHVyZSB0aW1lIGlzIGxpa2VseSB0byBiZSBhZHZhbnRhZ2VvdXMuIDwvdHJhbnNsYXRpb24+"
translation['6.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T24geW91ciBwcmFjdGljYWwKICAgICAgICAgICAgICAgICAgICBtZWFzdXJlcyB5b3Ugd2lsbCwgaWYgeW91IGFyZSB3aXNlLCBkZWxpYmVyYXRlIGhlcmVhZnRlciBieSB5b3Vyc2VsdmVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPmkuZS4gd2hlbiB0aGUgZm9yZWlnbiBlbnZveXMgaGF2ZSB3aXRoZHJhd24uIEF0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgcG9pbnQsIGlmIG5vdCBhdCB0aGUgZW5kIG9mIHRoZSBzcGVlY2gsIHRoZSBwcm9wb3NlZCBhbnN3ZXIgd2FzIHJlYWQuCiAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgbm90IGluZGljYXRlZCBpbiB0aGUgTVNTLjwvbm90ZT47IGF0IHByZXNlbnQgSSB3aWxsIHN1Z2dlc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgaW1tZWRpYXRlIGFuc3dlciB3aGljaCBpdCB3b3VsZCBiZSBwcm9wZXIgZm9yIHlvdSB0byBhZG9wdC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJBbnN3ZXIiPkFuc3dlcjwvcXVvdGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0IHdvdWxkIGluZGVlZCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBmYWlyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0byBjYWxsIHVwb24KICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gY29udmV5ZWQgdG8geW91IFBoaWxpcCdzIHByb21pc2VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgYXVkaWVuY2UgbWlnaHQgZmFpcmx5IGNhbGwgdXBvbiBtZW4gbGlrZSBBcmlzdG9kZW11cywgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDE2MTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMTYxMCI+Q3Rlc2lwaG9uPC9wbGFjZU5hbWU+LCBhbmQgTmVvcHRvbGVtdXMg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOS4xMyIgdmFsaWQ9InllcyI+RGVtLiAxOS4xMzwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuMzE1IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOS4zMTU8L2JpYmw+77yJIHRvIGV4cGxhaW4gaG93IHRoZXkgY2FtZSB0byBtYWtlIHRoZW1zZWx2ZXMKICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2libGUgZm9yIHRoZXNlIHByb21pc2VzLCB0byB3aGljaCBQaGlsaXAgaGFkIG5vdCBhY3R1YWxseSBjb21taXR0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgaGltc2VsZi48L25vdGU+IG9uIHRoZSBzdHJlbmd0aCBvZiB3aGljaCB5b3Ugd2VyZSBpbmR1Y2VkIHRvIGNvbmNsdWRlIHRoZQogICAgICAgICAgICAgICAgICAgIFBlYWNlLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMTYxMCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAxNjEwIj5DdGVzaXBob248L3BsYWNlTmFtZT4sIGFuZCBOZW9wdG9sZW11cyDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjEzIiB2YWxpZD0ieWVzIj5EZW0uIDE5LjEzPC9iaWJsPiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOS4zMTUiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE5LjMxNTwvYmlibD7vvIkgdG8gZXhwbGFpbiBob3cgdGhleSBjYW1lIHRvIG1ha2UgdGhlbXNlbHZlcwogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zaWJsZSBmb3IgdGhlc2UgcHJvbWlzZXMsIHRvIHdoaWNoIFBoaWxpcCBoYWQgbm90IGFjdHVhbGx5IGNvbW1pdHRlZAogICAgICAgICAgICAgICAgICAgICAgICBoaW1zZWxmLjwvdHJhbnNsYXRpb24+"
translation['6.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSSBzaG91bGQgbmV2ZXIgbXlzZWxmIGhhdmUKICAgICAgICAgICAgICAgICAgICBjb25zZW50ZWQgdG8gc2VydmUgb24gdGhlIGVtYmFzc3ksIG5vciB3b3VsZCB5b3UsIEkgYW0gc3VyZSwgaGF2ZSBzdXNwZW5kZWQKICAgICAgICAgICAgICAgICAgICBtaWxpdGFyeSBvcGVyYXRpb25zLCBpZiB5b3UgaGFkIGltYWdpbmVkIHRoYXQgUGhpbGlwIGFmdGVyIHNlY3VyaW5nIHBlYWNlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYWN0IGFzIGhlIGhhcyBkb25lOyBidXQgaGlzIHdvcmRzIGF0IHRoZSB0aW1lIHdlcmUgdmVyeSBkaWZmZXJlbnQgZnJvbSBoaXMKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IGFjdGlvbnMuIFllcywgYW5kIHRoZXJlIGFyZSBvdGhlcnMgd2hvIG91Z2h0IHRvIGJlIGNhbGxlZCB1cG9uLiBXaG9tIGRvCiAgICAgICAgICAgICAgICAgICAgSSBtZWFuPyBUaGUgbWVuIHdobywgd2hlbiBwZWFjZSB3YXMgbWFkZSBhbmQgd2hlbiBJLCByZXR1cm5pbmcgZnJvbSB0aGUgc2Vjb25kCiAgICAgICAgICAgICAgICAgICAgZW1iYXNzeeKAlHRoYXQgc2VudCB0byBhZG1pbmlzdGVyIHRoZSBvYXRoc+KAlGZvdW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhdGUgd2FzIGJlaW5nIGltcG9zZWQgdXBvbiwgYW5kIHNwb2tlIG91dCBhbmQgcHJvdGVzdGVkIGFuZCByZWZ1c2VkIHRvIGdpdmUgdXAKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBQaG9jaWFuc+KAlCA8L3RyYW5zbGF0aW9uPg=="
translation['6.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz50aGUgbWVuLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BZXNjaGluZXMgYW5kLCBpbiBwYXJ0aWN1bGFyLCBQaGlsb2NyYXRlcyDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjQ2IiB2YWxpZD0ieWVzIj5EZW0uIDE5LjQ2PC9iaWJsPu+8iS48L25vdGU+IEkgc2F5LCB3aG8gdG9sZCB5b3UKICAgICAgICAgICAgICAgICAgICB0aGF0IEksIGJlaW5nIGEgd2F0ZXItZHJpbmtlciwgd2FzIG5hdHVyYWxseSBhIGRpc2FncmVlYWJsZSwgY3Jvc3MtZ3JhaW5lZAogICAgICAgICAgICAgICAgICAgIGZlbGxvdywgYW5kIHRoYXQgUGhpbGlwLCBpZiBoZSBnb3QgdGhyb3VnaCB0aGUgUGFzcywgd291bGQgZG8ganVzdCB3aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHByYXkgZm9yLCB3b3VsZCBmb3J0aWZ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuNDYiIHZhbGlkPSJ5ZXMiPkRlbS4gMTkuNDY8L2JpYmw+77yJLjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw1MDA0MjU4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDUwMDQyNTgiPlRoZXNwaWFlPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGxhdGFlYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGxhdGFlYSI+UGxhdGFlYTwvcGxhY2VOYW1lPiwgYW5kIGh1bWJsZSB0aGUgVGhlYmFuCiAgICAgICAgICAgICAgICAgICAgcHJpZGUsIGFuZCBkaWcgYSB0cmVuY2ggYWNyb3NzIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDM0NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwMzQ1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRvIHByb3RlY3QgdGhlIEdyZWVrCiAgICAgICAgICAgICAgICAgICAgICAgIGNpdGllcyBmcm9tIHRoZSByYWlkcyBvZiB0aGUgVGhyYWNpYW5zLjwvbm90ZT4gYXQgaGlzIG93biBjaGFyZ2VzLCBhbmQKICAgICAgICAgICAgICAgICAgICByZXN0b3JlIHRvIHlvdSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gYW5kIE9yb3B1cyBpbgogICAgICAgICAgICAgICAgICAgIGxpZXUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+LiBBbGwgdGhpcyB3YXMKICAgICAgICAgICAgICAgICAgICBzYWlkIGZyb20gdGhpcyB2ZXJ5IHBsYXRmb3JtLCBhcyBJIGFtIHN1cmUgeW91IHJlY29sbGVjdCwgYWx0aG91Z2ggeW91IGFyZSBub3QKICAgICAgICAgICAgICAgICAgICByZW1hcmthYmxlIGZvciBrZWVwaW5nIGluIG1pbmQgdGhvc2Ugd2hvIGluanVyZSB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['6.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlIGNyb3duaW5nIGRpc2dyYWNlIGlzIHRoYXQgeW91ciBwb3N0ZXJpdHkgYWxzbyBpcyBib3VuZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIHBlYWNlIHdoaWNoIHRoZXNlIGhvcGVzIHByb21wdGVkIHlvdSB0byBjb25jbHVkZTsgc28gY29tcGxldGVseSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgeW91IGxlZCBhc3RyYXkuIFdoeSBkbyBJIG1lbnRpb24gdGhpcyBub3cgYW5kIGFzc2VydCB0aGF0IHRoZXNlIG1lbiBvdWdodCB0byBiZQogICAgICAgICAgICAgICAgICAgIGNhbGxlZCB1cG9uPyBJIHZvdyB0aGF0IEkgd2lsbCBib2xkbHkgdGVsbCB5b3UgdGhlIHdob2xlIHRydXRoIGFuZCBrZWVwIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICBiYWNrLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBub3QgdGhhdCBieSBkZXNjZW5kaW5nIHRvIGFidXNlIEkKICAgICAgICAgICAgICAgICAgICBtYXkgbGF5IG15c2VsZiBvcGVuIHRvIHJldGFsaWF0aW9uIGluIHlvdXIgcHJlc2VuY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBHcmVlayBpcyBkaWZmaWN1bHQsIGFuZCBlZGl0b3JzIGFyZSBvZiBtYW55IG1pbmRzLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgdXN1YWwgbWVhbmluZyBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ou+G9uc6zzr/OvSDPgM6/zrnOteG/ls69PC9mb3JlaWduPiwKICAgICAgICAgICAgICAgICAgICAgICAg4oCcdG8gZ3JhbnQgYSBoZWFyaW5nLOKAnSBzZWVtcyBpbXBvc3NpYmxlIGhlcmUuIFBlcmhhcHMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxpdGVyYWwgbWVhbmluZyBpcyDigJxjYXVzZSBzcGVlY2ggYWdhaW5zdCBteXNlbGYgaW4geW91ciBwcmVzZW5jZQogICAgICAgICAgICAgICAgICAgICAgICBvbiBlcXVhbCB0ZXJtcyzigJ0gaS5lLiBnaXZlIG15IGVuZW1pZXMgYW4gb3BlbmluZyB0byByZXBseSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2FtZSBzdHlsZSwgd2hpY2gsIERlbW9zdGhlbmVzIGhpbnRzLCB3b3VsZCBiZSBhbiBpbnN1bHQgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGllbmNlLjwvbm90ZT4gd2hpbGUgSSBnaXZlIHRob3NlIHdobyBmcm9tIHRoZSBmaXJzdCBoYXZlIGZhbGxlbiBmb3VsIG9mCiAgICAgICAgICAgICAgICAgICAgbWUgYW4gZXhjdXNlIGZvciBtYWtpbmcgZnVydGhlciBwcm9maXQgb3V0IG9mIFBoaWxpcC4gTm9yIGRvIEkgd2lzaCB0byBpbmR1bGdlCiAgICAgICAgICAgICAgICAgICAgaW4gaWRsZSB0YWxrLiBCdXQgSSB0aGluayB0aGF0IG9uZSBkYXkgUGhpbGlwJ3MgcG9saWN5IHdpbGwgY2F1c2UgeW91IG1vcmUKICAgICAgICAgICAgICAgICAgICBkaXN0cmVzcyB0aGFuIGl0IGRvZXMgbm93LCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ou+G9uc6zzr/OvSDPgM6/zrnOteG/ls69PC9mb3JlaWduPiwKICAgICAgICAgICAgICAgICAgICAgICAg4oCcdG8gZ3JhbnQgYSBoZWFyaW5nLOKAnSBzZWVtcyBpbXBvc3NpYmxlIGhlcmUuIFBlcmhhcHMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxpdGVyYWwgbWVhbmluZyBpcyDigJxjYXVzZSBzcGVlY2ggYWdhaW5zdCBteXNlbGYgaW4geW91ciBwcmVzZW5jZQogICAgICAgICAgICAgICAgICAgICAgICBvbiBlcXVhbCB0ZXJtcyzigJ0gaS5lLiBnaXZlIG15IGVuZW1pZXMgYW4gb3BlbmluZyB0byByZXBseSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2FtZSBzdHlsZSwgd2hpY2gsIERlbW9zdGhlbmVzIGhpbnRzLCB3b3VsZCBiZSBhbiBpbnN1bHQgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGllbmNlLjwvdHJhbnNsYXRpb24+"
translation['6.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgSSBzZWUgdGhlIHBsb3QKICAgICAgICAgICAgICAgICAgICB0aGlja2VuaW5nLiBJIGhvcGUgSSBtYXkgcHJvdmUgYSBmYWxzZSBwcm9waGV0LCBidXQgSSBmZWFyIHRoZSBjYXRhc3Ryb3BoZSBpcwogICAgICAgICAgICAgICAgICAgIGV2ZW4gbm93IG9ubHkgdG9vIG5lYXIuIFNvIHdoZW4geW91IGNhbiBubyBsb25nZXIgc2h1dCB5b3VyIGV5ZXMgdG8gd2hhdCBpcwogICAgICAgICAgICAgICAgICAgIGhhcHBlbmluZywgd2hlbiB5b3UgZG8gbm90IG5lZWQgbWUgb3Igc29tZW9uZSBlbHNlIHRvIHRlbGwgeW91LCBidXQgY2FuIGFsbCBzZWUKICAgICAgICAgICAgICAgICAgICBmb3IgeW91cnNlbHZlcyBhbmQgYmUgcXVpdGUgY2VydGFpbiB0aGF0IGFsbCB0aGlzIGlzIGRpcmVjdGVkIGFnYWluc3QgeW91LCB0aGVuCiAgICAgICAgICAgICAgICAgICAgSSBleHBlY3QgeW91IHdpbGwgYmUgYW5ncnkgYW5kIGV4YXNwZXJhdGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXMsIEkgYW0gYWZyYWlkIHRoYXQsIHNpbmNlIHRoZSBhbWJhc3NhZG9ycyBoYXZlIGtlcHQgc2lsZW5jZSBhYm91dCB0aGUKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcyBmb3Igd2hpY2ggdGhleSBrbm93IHRoZXkgaGF2ZSBiZWVuIGJyaWJlZCwgdGhvc2Ugd2hvIGFyZSB0cnlpbmcgdG8KICAgICAgICAgICAgICAgICAgICByZXBhaXIgc29tZSBvZiB0aGUgbG9zc2VzIHRoYXQgdGhlc2UgbWVuIGhhdmUgY2F1c2VkIG1heSBjaGFuY2UgdG8gZmFsbCB1bmRlcgogICAgICAgICAgICAgICAgICAgIHlvdXIgZGlzcGxlYXN1cmU7IGZvciBJIG9ic2VydmUgdGhhdCBwZW9wbGUgdmVudCB0aGVpciB3cmF0aCBhcyBhIHJ1bGUsIG5vdCBvbgogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBhcmUgdG8gYmxhbWUsIGJ1dCBjaGllZmx5IG9uIHRob3NlIHdobyBhcmUgd2l0aGluIHRoZWlyIHJlYWNoLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlcmVmb3JlLCB3aGlsZSB0aGUgZGFuZ2VyIGlzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGZ1dHVyZSBhbmQgaXMgZ2F0aGVyaW5nIGhlYWQsIHdoaWxlIHdlIGNhbiBzdGlsbCBoZWFyIG9uZSBhbm90aGVyIHNwZWFrLCBJIHdhbnQKICAgICAgICAgICAgICAgICAgICB0byByZW1pbmQgZWFjaCBvbmUgb2YgeW91LCBob3dldmVyIGNsZWFybHkgaGUga25vd3MgaXQsIHdobyBpdCBpcyB0aGF0IHBlcnN1YWRlZAogICAgICAgICAgICAgICAgICAgIHlvdSB0byBhYmFuZG9uIHRoZSBQaG9jaWFucyBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+LCB0aGUgY29tbWFuZCBvZiB3aGljaCBnYXZlIFBoaWxpcCB0aGUgY29tbWFuZCBhbHNvCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHJvYWQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcwNzYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzA3NiI+UGVsb3Bvbm5lc3VzPC9wbGFjZU5hbWU+LCBhbmQgd2hvIGl0IGlzIHRoYXQKICAgICAgICAgICAgICAgICAgICBoYXMgZm9yY2VkIHlvdSB0byB0YWtlIGNvdW5zZWwsIG5vdCBmb3IgeW91ciByaWdodHMgYW5kIGludGVyZXN0cyBhYnJvYWQsIGJ1dAogICAgICAgICAgICAgICAgICAgIGZvciB5b3VyIHBvc3Nlc3Npb25zIGhlcmUgYXQgaG9tZSBhbmQgZm9yIHRoZSB3YXIgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+LCBhIHdhciB3aGljaCB3aWxsIGJyaW5nIGRpc3RyZXNzIG9uCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgb25lIG9mIHVzLCB3aGVuIGl0IGRvZXMgY29tZSwgYnV0IHdoaWNoIHJlYWxseSBkYXRlcyBmcm9tIHRoYXQgdmVyeSBkYXkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgeW91IGhhZCBub3QgYmVlbiBob29kd2lua2VkIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd291bGQgYmUgbm8gYW54aWV0eSBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBQaGlsaXAgY291bGQgbmV2ZXIsIG9mIGNvdXJzZSwgaGF2ZSBnYWluZWQgY29tbWFuZCBvZiB0aGUgc2VhIGFuZAogICAgICAgICAgICAgICAgICAgIHJlYWNoZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+IHdpdGggaGlzIGZsZWV0LCBub3IKICAgICAgICAgICAgICAgICAgICBjb3VsZCBoZSBoYXZlIG1hcmNoZWQgcGFzdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4gYW5kIFBob2NpcywgYnV0IGVpdGhlciBoZSB3b3VsZCBoYXZlIGFjdGVkIGZhaXJseQogICAgICAgICAgICAgICAgICAgIGFuZCBvYnNlcnZlZCB0aGUgUGVhY2UgYnkga2VlcGluZyBxdWlldCwgb3IgaGUgd291bGQgaGF2ZSBiZWVuIGluc3RhbnRseSBlbmdhZ2VkCiAgICAgICAgICAgICAgICAgICAgaW4gYSB3YXIgc2ltaWxhciB0byB0aGF0IHdoaWNoIG1hZGUgaGltIHNvIGFueGlvdXMgZm9yIHRoZSBQZWFjZS4gPC90cmFuc2xhdGlvbj4="
translation['6.37'] = ""
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5NZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGUgY2hhcmdlcyB0aGF0IFBoaWxpcAogICAgICAgICAgICAgICAgICAgIGJyaW5ncyBhZ2FpbnN0IHRoZSBzcGVha2VycyB3aG8gaGVyZSB1cGhvbGQgeW91ciBjbGFpbXMgc2hhbGwgbmV2ZXIgZGV0ZXIgdXMKICAgICAgICAgICAgICAgICAgICBmcm9tIG9mZmVyaW5nIG91ciBhZHZpY2Ugb24gd2hhdCBjb25jZXJucyB5b3VyIGludGVyZXN0czsgZm9yIGl0IHdvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgbW9uc3Ryb3VzIGlmIHRoZSBmcmVlZG9tIG9mIHV0dGVyYW5jZSB3aGljaCBpcyB0aGUgcHJpdmlsZWdlIG9mIHRoaXMgcGxhdGZvcm0KICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgc3RpZmxlZCBieSBkaXNwYXRjaGVzIGZyb20gaGltLiBCdXQgZm9yIG15c2VsZiwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgSSB3aXNoIGZpcnN0IHRvIHRvdWNoIHVwb24gdGhlCiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW50IHBvaW50cyBvZiBoaXMgbGV0dGVyLCBhbmQgdGhlbiB0byBhZGQgbXkgY29tbWVudHMgb24gdGhlIHNwZWVjaGVzIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGFtYmFzc2Fkb3JzLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QaGlsaXAgYmVnaW5zIGJ5IHNheWluZyB0aGF0IGhlIG9mZmVycyB5b3UgSGFsb25uZXN1cyBhcyBoaXMgb3duIHByb3BlcnR5LCBidXQKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBoYXZlIG5vIHJpZ2h0IHRvIGRlbWFuZCBpdCBvZiBoaW0sIGJlY2F1c2UgaXQgd2FzIG5vdCB5b3VycyB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgdG9vayBpdCwgYW5kIGlzIG5vdCB5b3VycyBub3cgdGhhdCBoZSBob2xkcyBpdC4gTW9yZW92ZXIsIHdoZW4gd2UgYW1iYXNzYWRvcnMKICAgICAgICAgICAgICAgICAgICB2aXNpdGVkIGhpbSwgaGUgdXNlZCBzaW1pbGFyIGxhbmd1YWdlLCB0byB0aGUgZWZmZWN0IHRoYXQgaGUgaGFkIGNhcHR1cmVkIHRoZQogICAgICAgICAgICAgICAgICAgIGlzbGFuZCBmcm9tIHBpcmF0ZXMgYW5kIHRoYXQgdGhlcmVmb3JlIGl0IGJlbG9uZ2VkIGFic29sdXRlbHkgdG8gaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIG5vdCBkaWZmaWN1bHQgdG8gcmVmdXRlIHRoaXMgY2xhaW0gb24gdGhlIGdyb3VuZAogICAgICAgICAgICAgICAgICAgIG9mIGl0cyB1bmZhaXJuZXNzLiBGb3IgYWxsIHBpcmF0ZXMgc2VpemUgcGxhY2VzIGJlbG9uZ2luZyB0byBvdGhlcnMgYW5kIHR1cm4KICAgICAgICAgICAgICAgICAgICB0aGVtIGludG8gc3Ryb25naG9sZHMgZnJvbSB3aGljaCB0byBoYXJyeSB0aGVpciBuZWlnaGJvcnMuIEJ1dCBhIG1hbiB3aG8gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgZGVmZWF0IGFuZCBwdW5pc2ggcGlyYXRlcyB3b3VsZCBzdXJlbHkgYmUgdW5yZWFzb25hYmxlLCBpZiBoZSBzYWlkIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RvbGVuIHByb3BlcnR5IHdyb25nZnVsbHkgaGVsZCBieSB0aGVtIHBhc3NlZCB0aGVyZWJ5IGludG8gaGlzIG93biBwb3NzZXNzaW9uLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciwgdGhhdCBwbGVhIG9uY2UgZ3JhbnRlZCwgaWYgc29tZQogICAgICAgICAgICAgICAgICAgIHBpcmF0ZXMgc2VpemUgYSBzdHJpcCBvZiBBdHRpYyB0ZXJyaXRvcnksIG9yIGEgcGFydCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTE3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMTczIj5MZW1ub3M8L3BsYWNlTmFtZT4gb3IgSW1icm9zIG9yIFNjeXJvcywgYW5kIGlmIHNvbWVvbmUKICAgICAgICAgICAgICAgICAgICBkaXNsb2RnZXMgdGhlc2UgcGlyYXRlcywgd2hhdCBpcyB0byBwcmV2ZW50IHRoaXMgcGxhY2UsIHdoZXJlIHRoZSBwaXJhdGVzIGFyZQogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGVkIGFuZCB3aGljaCBpcyByZWFsbHkgb3VycywgZnJvbSBiZWNvbWluZyB0aGUgcHJvcGVydHkgb2YgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgY2hhc3Rpc2VkIHRoZW0/IDwvdHJhbnNsYXRpb24+"
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpcCBpcyBxdWl0ZSBhd2FyZSB0aGF0IGhpcwogICAgICAgICAgICAgICAgICAgIGNsYWltIGlzIHVuanVzdCwgYnV0LCB0aG91Z2ggaGUga25vd3MgdGhpcyBhcyB3ZWxsIGFzIGFueW9uZSwgaGUgdGhpbmtzIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGJlIGhvb2R3aW5rZWQgYnkgdGhlIG1lbiB3aG8gaGF2ZSBlbmdhZ2VkLCBhbmQgYXJlIG5vdyBmdWxmaWxsaW5nIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZW5nYWdlbWVudCwgdG8gZGlyZWN0IEF0aGVuaWFuIHBvbGljeSBpbiBhY2NvcmRhbmNlIHdpdGggaGlzIG93biBkZXNpcmVzLiBOb3IKICAgICAgICAgICAgICAgICAgICBhZ2FpbiBkb2VzIGhlIGZhaWwgdG8gc2VlIHRoYXQgaW4gZWl0aGVyIGNhc2UsIGhvd2V2ZXIgeW91IGR1YiB0aGUgdHJhbnNhY3Rpb24sCiAgICAgICAgICAgICAgICAgICAgdGhlIGlzbGFuZCB3aWxsIGJlIHlvdXJzLCB3aGV0aGVyIGl0IGlzIHByZXNlbnRlZCBvciByZXN0b3JlZCB0byB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['7.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gd2hhdCBkb2VzIGhlIGdhaW4gYnkgdXNpbmcgdGhlIHdyb25nIHRlcm0gYW5kCiAgICAgICAgICAgICAgICAgICAgbWFraW5nIGEgcHJlc2VudCBvZiBpdCB0byB5b3UsIGluc3RlYWQgb2YgdXNpbmcgdGhlIHJpZ2h0IHRlcm0gYW5kIHJlc3RvcmluZyBpdD8KICAgICAgICAgICAgICAgICAgICBJdCBpcyBub3QgdGhhdCBoZSB3YW50cyB0byBkZWJpdCB5b3Ugd2l0aCBhIGJlbmVmYWN0aW9uIHJlY2VpdmVkLCBmb3Igc3VjaCBhCiAgICAgICAgICAgICAgICAgICAgYmVuZWZhY3Rpb24gd291bGQgYmUgYSBmYXJjZTsgYnV0IHRoYXQgaGUgd2FudHMgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB0byB0YWtlIG5vdGljZSB0aGF0IHRoZSBBdGhlbmlhbnMgYXJlIGNvbnRlbnQgdG8gcmVjZWl2ZQogICAgICAgICAgICAgICAgICAgIG1hcml0aW1lIHN0cm9uZ2hvbGRzIGZyb20gdGhlIG1hbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjcxNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzE1Ij5NYWNlZG9uPC9wbGFjZU5hbWU+LiBBbmQgdGhhdCBpcyBqdXN0IHdoYXQgeW91LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBtdXN0IG5vdCBkby4gPC90cmFuc2xhdGlvbj4="
translation['7.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgd2hlbiBoZSBzYXlzIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBpcyB3aWxsaW5nIHRvIGFyYml0cmF0ZSwgaGUgaXMgbWVyZWx5IG1vY2tpbmcgeW91LiBJbiB0aGUgZmlyc3QgcGxhY2UsIGhlCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0cyBBdGhlbmlhbnMgdG8gcmVmZXIgdG8gYXJiaXRyYXRpb24sIGFzIGFnYWluc3QgdGhpcyB1cHN0YXJ0IGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQZWxsYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGVsbGEiPlBlbGxhPC9wbGFjZU5hbWU+LCB0aGUgcXVlc3Rpb24gd2hldGhlciB0aGUKICAgICAgICAgICAgICAgICAgICBpc2xhbmRzIGFyZSB5b3VycyBvciBoaXMuIElmIHlvdSBjYW5ub3QgcHJlc2VydmUgeW91ciBtYXJpdGltZSBwb3NzZXNzaW9ucyBieQogICAgICAgICAgICAgICAgICAgIHlvdXIgbWlnaHQgdGhhdCBvbmNlIHNhdmVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkhlbGxhczwvcGxhY2VOYW1lPiwgYnV0CiAgICAgICAgICAgICAgICAgICAgcmVseSBvbiBhbnkganVyeSB0byB3aG9tIHlvdSByZWZlciBpdCwgYW5kIHdob3NlIHZlcmRpY3QgaXMgZmluYWwsIHRvIHByZXNlcnZlCiAgICAgICAgICAgICAgICAgICAgdGhlbSBmb3IgeW91LCBwcm92aWRlZCBhbHdheXMgdGhhdCBQaGlsaXAgZG9lcyBub3QgYnV5IHRoZWlyIHZvdGVzLCA8L3RyYW5zbGF0aW9uPg=="
translation['7.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmlzIGl0IG5vdCBhbiBvcGVuIGNvbmZlc3Npb24sIHdoZW4geW91IGFkb3B0IHRoaXMKICAgICAgICAgICAgICAgICAgICBwb2xpY3ksIHRoYXQgeW91IGhhdmUgYWJhbmRvbmVkIGV2ZXJ5dGhpbmcgb24gdGhlIG1haW5sYW5kLCBhbmQgYXJlIHlvdSBub3QKICAgICAgICAgICAgICAgICAgICBhZHZlcnRpc2luZyB0byB0aGUgd29ybGQgdGhhdCB0aGVyZSBpcyBub3QgYSBzaW5nbGUgdGhpbmcgZm9yIHRoZSBzYWtlIG9mIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91IHdpbGwgYXBwZWFsIHRvIGFybXMsIGlmIGluZGVlZCBmb3IgeW91ciBwb3NzZXNzaW9ucyBvbiB0aGUgc2VhLCB3aGVyZSB5b3UKICAgICAgICAgICAgICAgICAgICBzYXkgeW91ciBzdHJlbmd0aCBsaWVzLCB5b3Ugc2hhbGwgYXBwZWFsLCBub3QgdG8gYXJtcywgYnV0IHRvIHRoZSBsYXctY291cnRzPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVuIGFnYWluCiAgICAgICAgICAgICAgICAgICAgaGUgc2F5cyB0aGF0IGhlIGhhcyBzZW50IGVudm95cyB0byBhcnJhbmdlIHdpdGggeW91IGFuIGludGVyLXN0YXRlIGxlZ2FsCiAgICAgICAgICAgICAgICAgICAgY29tcGFjdCwgYW5kIHRoYXQgdGhpcyBjb21wYWN0IHdpbGwgYmUgdmFsaWQsIG5vdCBhcyBzb29uIGFzIGl0IGlzIHJhdGlmaWVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIGJvZHkgb2YgQXRoZW5pYW4ganVyb3JzLCBhcyB0aGUgbGF3IGRpcmVjdHMsIGJ1dCBvbmx5IGFmdGVyIGl0IGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgcmVmZXJyZWQgdG8gaGltLCB0aHVzIGNvbnN0aXR1dGluZyBoaW1zZWxmIGEgY291cnQgb2YgYXBwZWFsIGZyb20geW91cgogICAgICAgICAgICAgICAgICAgICAgICBkZWNpc2lvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWdyZWVtZW50cyBiZXR3ZWVuIHR3byBHcmVlawogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZXMsIGxheWluZyBkb3duIHRoZSBjb25kaXRpb25zIHVuZGVyIHdoaWNoIHRoZWlyIG5hdGlvbmFscyBtaWdodAogICAgICAgICAgICAgICAgICAgICAgICBtdXR1YWxseSBvYnRhaW4gbGVnYWwgcmVkcmVzcywgd2VyZSBjYWxsZWQ8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Pg+G9u868zrLOv867zrE8L2ZvcmVpZ24+LiBUaGUgY2FzZXMgd2VyZSB0cmllZCBpbiB0aGUgY291cnRzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQncyBzdGF0ZS4gVGhlIHRlcm1zIG9mIHRoZSBjb21wYWN0IHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IHdlcmUgdG8gYmUgcmF0aWZpZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbGlhc3RpYyBjb3VydCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGJ1dAogICAgICAgICAgICAgICAgICAgICAgICBQaGlsaXAgY2xhaW1lZCB0aGUgcmlnaHQgb2YgZmluYWwgcmF0aWZpY2F0aW9uLiBPdGhlcnMgZXhwbGFpbiBpdCB0byBtZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgUGhpbGlwIGRlbWFuZGVkIHRoYXQgdGhlIHZlcmRpY3RzIG9mIHRoZSBBdGhlbmlhbiBqdXJpZXMgaW4gY2FzZXMgdW5kZXIKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBwYWN0IO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs604b23zrrOsc65IOG8gM+A4b24CiAgICAgICAgICAgICAgICAgICAgICAgIM+Dz4XOvM6y4b25zrvPic69PC9mb3JlaWduPu+8iSBzaG91bGQgYmUgY29uZmlybWVkIGJ5IGhpbS48L25vdGU+IEhpcyBvYmplY3QsCiAgICAgICAgICAgICAgICAgICAgb2YgY291cnNlLCBpcyB0byBzdGVhbCBhIG1hcmNoIG9uIHlvdSwgYW5kIHRvIGluc2VydCBpbiB0aGUgY29tcGFjdCBhbiBhZG1pc3Npb24KICAgICAgICAgICAgICAgICAgICBvbiB5b3VyIHBhcnQgdGhhdCBub25lIG9mIHRoZSB3cm9uZ3MgY29tbWl0dGVkIGF0IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+D4b27zrzOss6/zrvOsTwvZm9yZWlnbj4uIFRoZSBjYXNlcyB3ZXJlIHRyaWVkIGluIHRoZSBjb3VydHMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCdzIHN0YXRlLiBUaGUgdGVybXMgb2YgdGhlIGNvbXBhY3Qgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gd2VyZSB0byBiZSByYXRpZmllZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgaGVsaWFzdGljIGNvdXJ0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYnV0CiAgICAgICAgICAgICAgICAgICAgICAgIFBoaWxpcCBjbGFpbWVkIHRoZSByaWdodCBvZiBmaW5hbCByYXRpZmljYXRpb24uIE90aGVycyBleHBsYWluIGl0IHRvIG1lYW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBQaGlsaXAgZGVtYW5kZWQgdGhhdCB0aGUgdmVyZGljdHMgb2YgdGhlIEF0aGVuaWFuIGp1cmllcyBpbiBjYXNlcyB1bmRlcgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHBhY3Qg77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrThvbfOus6xzrkg4byAz4DhvbgKICAgICAgICAgICAgICAgICAgICAgICAgz4PPhc68zrLhvbnOu8+Jzr08L2ZvcmVpZ24+77yJIHNob3VsZCBiZSBjb25maXJtZWQgYnkgaGltLjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+IGFyZSBjaGFyZ2VkIGFnYWluc3QgaGltIGJ5IHlvdSBhcyB0aGUgaW5qdXJlZCBwYXJ0eSwKICAgICAgICAgICAgICAgICAgICBidXQgdGhhdCB5b3UgY29uZmlybSBoaXMgc2VpenVyZSBhbmQgcmV0ZW50aW9uIG9mIHRoYXQgY2l0eSBhcyBsYXdmdWwuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgQXRoZW5pYW5zLCBzZXR0bGVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+LCB3ZXJlIHJvYmJlZCBvZiB0aGVpciBwcm9wZXJ0eSBieQogICAgICAgICAgICAgICAgICAgIFBoaWxpcCwgdGhvdWdoIHRoZXkgd2VyZSBub3QgYXQgd2FyIGJ1dCBpbiBhbGxpYW5jZSB3aXRoIGhpbSwgYW5kIHRob3VnaCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBkdWx5IHBsZWRnZWQgaGlzIHdvcmQgdG8gYWxsIHRoZSBpbmhhYml0YW50cyBvZiB0aGF0IGNpdHkuIE9mIGNvdXJzZSBoZSB3YW50cyB0bwogICAgICAgICAgICAgICAgICAgIGdldCBoaXMgbWFueSBpbGxlZ2FsIGFjdHMgZXZlcnl3aGVyZSBjb25maXJtZWQgYnkgYSBkZWNsYXJhdGlvbiBvbiB5b3VyIHBhcnQKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBicmluZyBubyBjaGFyZ2UgYWdhaW5zdCBoaW0gYW5kIGRvIG5vdCBjb25zaWRlciB5b3Vyc2VsdmVzIHdyb25nZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgdGhhdCBNYWNlZG9uaWFucyBuZWVkIG5vIGludGVyLXN0YXRlCiAgICAgICAgICAgICAgICAgICAgY29tcGFjdCB3aXRoIEF0aGVuaWFucyBsZXQgcGFzdCBoaXN0b3J5IGJlIHlvdXIgd2l0bmVzcywgc2luY2UgbmVpdGhlciBBbXludGFzLAogICAgICAgICAgICAgICAgICAgIHRoZSBmYXRoZXIgb2YgUGhpbGlwLCBub3IgdGhlIGVhcmxpZXIga2luZ3MgZXZlciBtYWRlIGFueSBzdWNoIGNvbXBhY3Qgd2l0aCBvdXIKICAgICAgICAgICAgICAgICAgICBjaXR5LCA8L3RyYW5zbGF0aW9uPg=="
translation['7.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz50aG91Z2ggaW50ZXJjb3Vyc2UgYmV0d2VlbiB0aGUgdHdvCiAgICAgICAgICAgICAgICAgICAgbmF0aW9ucyB3YXMgbW9yZSBmcmVxdWVudCB0aGVuIHRoYW4gbm93LiBGb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IHdhcyB1bmRlciBvdXIgc3dheSBhbmQgdHJpYnV0YXJ5IHRvIHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgc3BlYWtlciBpcyBpbXByb3Zpbmcgb24gdGhlIGNsYWltIG1hZGUgYnkKICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzLjI0IiB2YWxpZD0ieWVzIj5EZW0uIDMuMjQ8L2JpYmw+LiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gd2FzIG5ldmVyIHJlYWxseSBzdWJqZWN0IG9yCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWJ1dGFyeSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uPC9ub3RlPiBhbmQKICAgICAgICAgICAgICAgICAgICB3ZSB1c2VkIGVhY2ggb3RoZXIncyBtYXJrZXRzIG1vcmUgZnJlZWx5IHRoZW4gdGhhbiBhdCBwcmVzZW50LCBhbmQgbWVyY2FudGlsZQogICAgICAgICAgICAgICAgICAgICAgICBzdWl0czxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMy4yNCIgdmFsaWQ9InllcyI+RGVtLiAzLjI0PC9iaWJsPi4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IHdhcyBuZXZlciByZWFsbHkgc3ViamVjdCBvcgogICAgICAgICAgICAgICAgICAgICAgICB0cmlidXRhcnkgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BbHNvIGNhbGxlZDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8lM68zrzOt869zr/OuSDOtOG9t866zrHOuTwvZm9yZWlnbj4sIGJlY2F1c2UgdGhleSBoYWQgdG8gYmUgc2V0dGxlZCB3aXRoaW4gYQogICAgICAgICAgICAgICAgICAgICAgICBtb250aC4gVGhleSB3ZXJlIGhlYXJkLCB1bmRlciB0aGUgcHJlc2lkZW5jeSBvZiB0aGUgVGhlc21vdGhldGFlLCBkdXJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNpeCB3aW50ZXIgbW9udGhzLCB3aGVuIHRoZSBzZWFzIHdlcmUgY2xvc2VkIHRvIGNvbW1lcmNlLjwvbm90ZT4gd2VyZSBub3QKICAgICAgICAgICAgICAgICAgICB0aGVuLCBhcyBub3csIHNldHRsZWQgc3RyaWN0bHkgZXZlcnkgbW9udGgsIG1ha2luZyBhIGZvcm1hbCBjb21wYWN0IGJldHdlZW4gc3VjaAogICAgICAgICAgICAgICAgICAgIGRpc3RhbnQgcGFydGllcyB1bm5lY2Vzc2FyeS4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byUzrzOvM63zr3Ov865IM604b23zrrOsc65PC9mb3JlaWduPiwgYmVjYXVzZSB0aGV5IGhhZCB0byBiZSBzZXR0bGVkIHdpdGhpbiBhCiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoLiBUaGV5IHdlcmUgaGVhcmQsIHVuZGVyIHRoZSBwcmVzaWRlbmN5IG9mIHRoZSBUaGVzbW90aGV0YWUsIGR1cmluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2l4IHdpbnRlciBtb250aHMsIHdoZW4gdGhlIHNlYXMgd2VyZSBjbG9zZWQgdG8gY29tbWVyY2UuPC90cmFuc2xhdGlvbj4="
translation['7.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGVyZQogICAgICAgICAgICAgICAgICAgIHdhcyBubyBzdWNoIGNvbXBhY3QsIGFuZCBpdCB3b3VsZCBub3QgaGF2ZSBwYWlkIHRvIG1ha2Ugb25lIHdoaWNoIHdvdWxkIGVudGFpbCBhCiAgICAgICAgICAgICAgICAgICAgdm95YWdlIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBvciBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gaW4gb3JkZXIgdG8gb2J0YWluIHNhdGlzZmFjdGlvbi4gSW5zdGVhZCwgd2Ugc291Z2h0CiAgICAgICAgICAgICAgICAgICAgcmVkcmVzcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gdW5kZXIgdGhlaXIgbGF3cwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGV5IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB1bmRlciBvdXJzLiBTbyBkbwogICAgICAgICAgICAgICAgICAgIG5vdCBmb3JnZXQgdGhhdCB0aGUgcmVhbCBvYmplY3Qgb2YgdGhpcyBwcm9wb3NlZCBjb21wYWN0IGlzIHRvIGdldCB5b3VyCiAgICAgICAgICAgICAgICAgICAgYWRtaXNzaW9uIHRoYXQgeW91IGhhdmUgbm8gcmVhc29uYWJsZSBjbGFpbSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDgxNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDA0ODE0Ij5Qb3RpZGFlYTwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['7.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXMgZm9yIHRoZSBwaXJhdGVzLCBoZSBzYXlzIHRoYXQgaXQgaXMgb25seSBmYWlyIHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICBzaG91bGQgam9pbiBoaW0gaW4gY2xlYXJpbmcgdGhlIHNlYSBvZiB0aGVzZSBkZXByZWRhdG9ycywgd2hvIGluanVyZSB5b3UgYXMgbXVjaAogICAgICAgICAgICAgICAgICAgIGFzIGhpbXNlbGY7IHdoaWNoIGFtb3VudHMgdG8gYSBjbGFpbSB0aGF0IHlvdSBzaG91bGQgc2V0IGhpbSB1cCBhcyBhIG1hcml0aW1lCiAgICAgICAgICAgICAgICAgICAgcG93ZXIgYW5kIGNvbmZlc3MgdGhhdCB3aXRob3V0IFBoaWxpcCdzIGhlbHAgeW91IGNhbm5vdCBrZWVwIHRoZSBoaWdoIHNlYXMgc2FmZSwKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgZnVydGhlcm1vcmUgdGhhdCBoZSBzaG91bGQgaGF2ZSBhIGZyZWUKICAgICAgICAgICAgICAgICAgICBoYW5kIHRvIGNydWlzZSBhYm91dCBhbmQgYW5jaG9yIG9mZiB0aGUgZGlmZmVyZW50IGlzbGFuZHMgYW5kLCB1bmRlciBwcmV0ZW5jZSBvZgogICAgICAgICAgICAgICAgICAgIHByb3RlY3RpbmcgdGhlbSBmcm9tIHBpcmF0ZXMsIGJyaWJlIHRoZSBpc2xhbmRlcnMgdG8gcmV2b2x0IGZyb20geW91LiBOb3QKICAgICAgICAgICAgICAgICAgICBjb250ZW50IHdpdGggZ2V0dGluZyB5b3VyIGNvbW1hbmRlcnMgdG8gY2FycnkgcmVmdWdlZXMgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEwNzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTA3OCI+VGhhc29zPC9wbGFjZU5hbWU+LCBoZSBjbGFpbXMgdGhlIHJpZ2h0IHRvIGFwcHJvcHJpYXRlIHRoZSBvdGhlciBpc2xhbmRzCiAgICAgICAgICAgICAgICAgICAgYWxzbywgYW5kIHNlbmRzIGFnZW50cyB0byBhY2NvbXBhbnkgeW91ciBjb21tYW5kZXJzLCBhcyBpZiB0byBzaGFyZSB3aXRoIHlvdSB0aGUKICAgICAgICAgICAgICAgICAgICB0YXNrIG9mIHBvbGljaW5nIHRoZSBzZWFzLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IHNvbWUgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgc2F5IHRoYXQgaGUgaGFzIG5vIHVzZSBmb3IgdGhlIHNlYSEgV2h5LCB0aGlzIG1hbiB3aG8gaGFzIG5vIHVzZSBmb3IgdGhlIHNlYSBpcwogICAgICAgICAgICAgICAgICAgIGxheWluZyBkb3duIHdhci1zaGlwcyBhbmQgYnVpbGRpbmcgZG9ja3MsIGFuZCBpcyByZWFkeSB0byBzZW5kIG91dCBmbGVldHMgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5jdXIgY29uc2lkZXJhYmxlIGV4cGVuc2UgaW4gZmFjaW5nIHJpc2tzIGF0IHNlYSwgYW5kIGFsbCBmb3Igb2JqZWN0cyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgZG9lcyBub3QgdmFsdWUhIDwvdHJhbnNsYXRpb24+"
translation['7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgZG8geW91IHN1cHBvc2UgdGhhdAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCB3b3VsZCBpbnNpc3Qgb24geW91ciBtYWtpbmcgc3VjaCBjb25jZXNzaW9ucyB0byBoaW0sIGlmIGhlIGRpZCBub3QKICAgICAgICAgICAgICAgICAgICBkZXNwaXNlIHlvdSBhbmQgcHV0IGNvbXBsZXRlIGNvbmZpZGVuY2UgaW4gaGlzIGZyaWVuZHMgaGVyZSwgd2hvbSBoZSBoYXMgbWFkZSBpdAogICAgICAgICAgICAgICAgICAgIGhpcyBwb2xpY3kgdG8gY29uY2lsaWF0ZT8gVGhleSBhcmUgbm90IGFzaGFtZWQgdG8gZGV2b3RlIHRoZWlyIGxpdmVzIHRvIFBoaWxpcAogICAgICAgICAgICAgICAgICAgIHJhdGhlciB0aGFuIHRvIHRoZWlyIG93biBjb3VudHJ5LCBhbmQgdGhleSB0aGluayB0aGF0IHdoZW4gdGhleSB0YWtlIGhpcyBnaWZ0cwogICAgICAgICAgICAgICAgICAgIHRoZXkgYXJlIHRha2luZyB0aGVtIGhvbWXigJR0aG91Z2ggdGhleSBhcmUgc2VsbGluZyBldmVyeXRoaW5nIGF0IGhvbWUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0aCByZWdhcmQKICAgICAgICAgICAgICAgICAgICB0byB0aGUgYW1lbmRtZW50IG9mIHRoZSBwZWFjZSwgUGhpbGlwJ3MgYW1iYXNzYWRvcnMgY29uY2VkZWQgdG8gdXMgdGhlIHJpZ2h0IHRvCiAgICAgICAgICAgICAgICAgICAgYW1lbmQgaXQsIGFuZCBvdXIgYW1lbmRtZW50LCB1bml2ZXJzYWxseSBhZG1pdHRlZCB0byBiZSBmYWlyLCB3YXMgdGhhdCBlYWNoIHNpZGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQgcmV0YWluIGl0cyBvd24gcG9zc2Vzc2lvbnMuIEJ1dCBoZSBub3cgY29udGVuZHMgdGhhdCBoZSBuZXZlciBhZ3JlZWQgdG8KICAgICAgICAgICAgICAgICAgICB0aGlzLCBhbmQgdGhhdCBoaXMgYW1iYXNzYWRvcnMgbmV2ZXIgZXZlbiByYWlzZWQgdGhlIHBvaW50LiBUaGlzIHNpbXBseSBtZWFucwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGlzIGZyaWVuZHMgaGVyZSBoYXZlIHBlcnN1YWRlZCBoaW0gdGhhdCB5b3UgaGF2ZSBubyBtZW1vcnkgZm9yIHdoYXQgaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiBzdGF0ZWQgcHVibGljbHkgaW4gdGhlIEFzc2VtYmx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['7.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhhdAogICAgICAgICAgICAgICAgICAgIGlzIGp1c3QgdGhlIG9uZSB0aGluZyB0aGF0IHlvdSBjYW5ub3QgaGF2ZSBmb3Jnb3R0ZW47IGZvciBhdCB0aGUgc2FtZSBtZWV0aW5nIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIEFzc2VtYmx5IFBoaWxpcCdzIGFtYmFzc2Fkb3JzIHB1dCBoaXMgY2FzZSBiZWZvcmUgeW91IGFuZCB0aGUgZGVjcmVlIHdhcwogICAgICAgICAgICAgICAgICAgIGR1bHkgcHJvcG9zZWQsIHNvIHRoYXQsIGFzIHRoZSBkZWNyZWUgd2FzIHJlY2l0ZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uY2x1c2lvbiBvZiB0aGUgc3BlZWNoZXMsIGl0IHdhcyBpbXBvc3NpYmxlIGZvciB5b3UgdG8gcGFzcyBhdCBvbmNlIGEKICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9uIHdoaWNoIGdpdmVzIHRoZSBsaWUgdG8gdGhlIGFtYmFzc2Fkb3JzLiBTbyBpdCBpcyBub3QgYWdhaW5zdCBtZSBidXQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHlvdSB0aGF0IGhpcyBsZXR0ZXIgaXMgYWltZWQsIGFsbGVnaW5nIHRoYXQgeW91IGhhdmUgc2VudCBiYWNrIHRvIGhpbQogICAgICAgICAgICAgICAgICAgIHlvdXIgZGVjaXNpb24gb24gcXVlc3Rpb25zIHRoYXQgd2VyZSBuZXZlciBwdXQgYmVmb3JlIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['7.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5XaHksIHRoZSBhbWJhc3NhZG9ycyB0aGVtc2VsdmVzLCB3aG9tIHlvdXIgcmVzb2x1dGlvbgogICAgICAgICAgICAgICAgICAgIGZsYXRseSBjb250cmFkaWN0ZWQsIHdoZW4geW91IHJlYWQgdGhlbSB5b3VyIGFuc3dlciBhbmQgb2ZmZXJlZCB0aGVtCiAgICAgICAgICAgICAgICAgICAgaG9zcGl0YWxpdHksIGRpZCBub3QgdmVudHVyZSB0byBjb21lIGZvcndhcmQgYW5kIHNheSwg4oCcWW91CiAgICAgICAgICAgICAgICAgICAgbWlzcmVwcmVzZW50IHVzLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyB5b3UKICAgICAgICAgICAgICAgICAgICBzYXkgd2UgaGF2ZSBzYWlkIHNvbWV0aGluZyB0aGF0IHdlIG5ldmVyIGRpZCBzYXku4oCdIE5vOyB0aGV5IGhlbGQgdGhlaXIKICAgICAgICAgICAgICAgICAgICB0b25ndWVzIGFuZCB0b29rIHRoZWlyIGxlYXZlLiBCdXQgSSB3YW50LCBtZW4gb2YgQXRoZW5z4oCUZm9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA3NzAiPlB5dGhvPC9wbGFjZU5hbWU+LCB3aG8gd2FzIG9uZSBvZiB0aGUgYW1iYXNzYWRvcnMsIG1hZGUgYW4KICAgICAgICAgICAgICAgICAgICBleGNlbGxlbnQgaW1wcmVzc2lvbiBvbiB5b3UgYnkgaGlzIGFkZHJlc3PigJRJIHdhbnQgdG8gcmVjYWxsIHRvIHlvdSB0aGUKICAgICAgICAgICAgICAgICAgICBleGFjdCB3b3JkcyBoZSB1c2VkLCBmb3IgSSBhbSBzdXJlIHlvdSBtdXN0IHJlbWVtYmVyIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['7.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgbGFuZ3VhZ2Ugd2FzIHByZXR0eSBtdWNoIHRoYXQgb2YgUGhpbGlwJ3MgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIGxldHRlci4gRm9yIHdoaWxlIGFjY3VzaW5nIHRob3NlIG9mIHVzIHdobyBtaXNyZXByZXNlbnQgUGhpbGlwLCBoZSBhdCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHRpbWUgYmxhbWVkIHlvdSBiZWNhdXNlLCB0aG91Z2ggUGhpbGlwIGlzIGVhZ2VyIHRvIGJlbmVmaXQgeW91IGFuZCBwcmVmZXJzIHlvdXIKICAgICAgICAgICAgICAgICAgICBmcmllbmRzaGlwIHRvIHRoYXQgb2YgYW55IG90aGVyIHN0YXRlLCB5b3UgY29uc3RhbnRseSB0aHdhcnQgaGltLCBsZW5kaW5nIGFuIGVhcgogICAgICAgICAgICAgICAgICAgIHRvIGZhbHNlIGFjY3VzZXJzLCB3aG8gYm90aCBiZWcgbW9uZXkgb2YgaGltIGFuZCBzbGFuZGVyIGhpbTsgZm9yIHRhbGVzIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBzb3J0LCB3aGVuIGhlIGlzIHRvbGQgdGhhdCBoZSB3YXMgdHJhZHVjZWQgYW5kIHRoYXQgeW91IGJlbGlldmVkIHdoYXQgd2FzIHNhaWQsCiAgICAgICAgICAgICAgICAgICAgbWFrZSBoaW0gY2hhbmdlIGhpcyBtaW5kLCBzaW5jZSBoZSBmaW5kcyBoaW1zZWxmIGRpc3RydXN0ZWQgYnkgdGhlIHZlcnkgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgd2hvbSBpdCBoYXMgYmVlbiBoaXMgYWltIHRvIGJlbmVmaXQuIDwvdHJhbnNsYXRpb24+"
translation['7.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDc3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzcwIj5QeXRobzwvcGxhY2VOYW1lPiB0aGVyZWZvcmUgdXJnZWQgcHVibGljCiAgICAgICAgICAgICAgICAgICAgc3BlYWtlcnMgbm90IHRvIGF0dGFjayB0aGUgcGVhY2UsIGJlY2F1c2UgaXQgd2FzIG5vdCBnb29kIHBvbGljeSB0byByZXNjaW5kIGl0LAogICAgICAgICAgICAgICAgICAgIGJ1dCB0byBhbWVuZCBhbnkgdW5zYXRpc2ZhY3RvcnkgY2xhdXNlLCBvbiB0aGUgdW5kZXJzdGFuZGluZyB0aGF0IFBoaWxpcCB3YXMKICAgICAgICAgICAgICAgICAgICBwcmVwYXJlZCB0byBmYWxsIGluIHdpdGggeW91ciBzdWdnZXN0aW9ucy4gSWYsIGhvd2V2ZXIsIHRoZSBzcGVha2VycyBjb25maW5lZAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgdG8gYWJ1c2luZyBQaGlsaXAgd2l0aG91dCBkcmFmdGluZyBhbnkgcHJvcG9zYWxzIHdoaWNoLCB3aGlsZQogICAgICAgICAgICAgICAgICAgIHByZXNlcnZpbmcgdGhlIHRlcm1zIG9mIHBlYWNlLCBtaWdodCBjbGVhciBQaGlsaXAgb2Ygc3VzcGljaW9uLCBoZSBhc2tlZCB5b3UgdG8KICAgICAgICAgICAgICAgICAgICBwYXkgbm8gYXR0ZW50aW9uIHRvIHN1Y2ggZmVsbG93cy4gPC90cmFuc2xhdGlvbj4="
translation['7.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeW91CiAgICAgICAgICAgICAgICAgICAgYXBwcm92ZWQgdGhlc2UgYXJndW1lbnRzIGFuZCBzYWlkIHRoYXQgUHl0aG8gd2FzIHJpZ2h0LCBhcyBpbmRlZWQgaGUgd2FzLiBIZQogICAgICAgICAgICAgICAgICAgIG1hZGUgdGhlc2Ugc3RhdGVtZW50cywgaG93ZXZlciwgbm90IGluIG9yZGVyIHRoYXQgYWxsIHRob3NlIGFkdmFudGFnZXMgdGhhdAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCBoYWQgcGFpZCBzbyBtdWNoIG1vbmV5IHRvIHNlY3VyZSBtaWdodCBiZSBzdHJ1Y2sgb3V0IG9mIHRoZSB0cmVhdHksIGJ1dAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgaGUgaGFkIGJlZW4gc28gaW5zdHJ1Y3RlZCBieSBoaXMgc2Nob29sbWFzdGVycyBoZXJlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hvIGRpZCBub3QgaW1hZ2luZSB0aGF0IGFueW9uZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHByb3Bvc2UgdG8gYW5udWwgdGhlIGRlY3JlZSBvZiBQaGlsb2NyYXRlcywgd2hpY2ggbG9zdCB1cyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['7.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXMgZm9yIG1lLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBJIGRpZCBub3QgdmVudHVyZSB0byBwcm9wb3NlCiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcgdGhhdCB3YXMgdW5jb25zdGl0dXRpb25hbCwgYnV0IGl0IHdhcyBub3Qgc28gdG8gcHJvcG9zZSB0aGUgZGlyZWN0CiAgICAgICAgICAgICAgICAgICAgY29udHJhcnkgb2YgUGhpbG9jcmF0ZXMnIGRlY3JlZSwgYXMgSSBjYW4gcHJvdmUgdG8geW91LiBGb3IgdGhlIGRlY3JlZSBvZgogICAgICAgICAgICAgICAgICAgIFBoaWxvY3JhdGVzLCB0aHJvdWdoIHdoaWNoIHlvdSBsb3N0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiwgd2FzIGl0c2VsZiBjb250cmFyeSB0byB0aGUgZWFybGllciBkZWNyZWVzIGJ5IHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91IGNsYWltZWQgcG9zc2Vzc2lvbiBvZiB0aGF0IHRlcnJpdG9yeS4gPC90cmFuc2xhdGlvbj4="
translation['7.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5TbwogICAgICAgICAgICAgICAgICAgIGl0IHdhcyB0aGlzIGRlY3JlZSBvZiBQaGlsb2NyYXRlcyB0aGF0IHdhcyB1bmNvbnN0aXR1dGlvbmFsLCBub3Igd291bGQgaXQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gcG9zc2libGUgdG8gZHJhZnQgYSBjb25zdGl0dXRpb25hbCBwcm9wb3NhbCBpbiBjb25mb3JtaXR5IHdpdGggaGlzCiAgICAgICAgICAgICAgICAgICAgdW5jb25zdGl0dXRpb25hbCBkZWNyZWUuIEJ5IGRyYWZ0aW5nIG1pbmUgdG8gYWdyZWUgd2l0aCB0aGUgZWFybGllciBkZWNyZWVzLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdlcmUgY29uc3RpdHV0aW9uYWwgYW5kIHdoaWNoIGFsc28ga2VwdCB5b3VyIHRlcnJpdG9yeSBpbnRhY3QsIEkgYm90aCBrZXB0CiAgICAgICAgICAgICAgICAgICAgd2l0aGluIHRoZSBjb25zdGl0dXRpb24gYW5kIHdhcyBhYmxlIHRvIGNvbnZpY3QgUGhpbGlwIG9mIHRyeWluZyB0byBkZWNlaXZlIHlvdQogICAgICAgICAgICAgICAgICAgIGFuZCBvZiB3aXNoaW5nLCBub3QgdG8gYW1lbmQgdGhlIHBlYWNlLCBidXQgdG8gYnJpbmcgZGlzY3JlZGl0IG9uIHRob3NlIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcGxlYWRpbmcgeW91ciBjYXVzZS4gPC90cmFuc2xhdGlvbj4="
translation['7.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgYXJlIGFsbCBhd2FyZSB0aGF0LAogICAgICAgICAgICAgICAgICAgIGFmdGVyIGNvbmNlZGluZyB0aGUgcmlnaHQgdG8gYW1lbmQgdGhlIHBlYWNlLCBoZSBub3cgZGVuaWVzIGl0LiBIZSBzYXlzIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+IGlzIGhpcywgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHlvdXIgZGVjcmVlIHRoYXQgaGUgc2hvdWxkIGtlZXAgd2hhdCBoZSBoZWxkIGNvbmZpcm1lZCBoaXMgcmlnaHQuIEl0IGlzIHRydWUKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBwYXNzZWQgdGhhdCBkZWNyZWUsIGJ1dCB5b3UgbmV2ZXIgYWRtaXR0ZWQgaGlzIHJpZ2h0IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiwgZm9yIGl0IGlzIHBvc3NpYmxlIHRvCiAgICAgICAgICAgICAgICAgICAg4oCcaG9sZOKAnSB3aGF0IGJlbG9uZ3MgdG8gYW5vdGhlciwgYW5kIGl0IGlzIG5vdCBhbGwKICAgICAgICAgICAgICAgICAgICDigJxob2xkZXJz4oCdIHdobyBob2xkIHdoYXQgaXMgdGhlaXIgb3duLCBidXQgbWFueSBhcmUgaW4KICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uIG9mIHdoYXQgaXMgcmVhbGx5IGFub3RoZXIncy4gU28gaGlzIGNsZXZlciBxdWliYmxlIGlzIG1lcmVseSBmb29saXNoLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciBoZSByZW1lbWJlcnMgdGhlIGRlY3JlZSBvZgogICAgICAgICAgICAgICAgICAgIFBoaWxvY3JhdGVzLCBidXQgaGUgaGFzIHF1aXRlIGZvcmdvdHRlbiB0aGUgbGV0dGVyIHNlbnQgdG8geW91IHdoZW4gaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgYmVzaWVnaW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiwgaW4gd2hpY2gKICAgICAgICAgICAgICAgICAgICBoZSBhZG1pdHRlZCB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiB3YXMKICAgICAgICAgICAgICAgICAgICB5b3VyczsgZm9yIGhlIHNhaWQgdGhhdCB3aGVuIGhlIGhhZCB0YWtlbiBpdCBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIOKAnHJlc3RvcmXigJ0gaXQgdG8geW91LCBpbXBseWluZyB0aGF0IGl0IHdhcyB5b3VyIHByb3BlcnR5LCBhbmQKICAgICAgICAgICAgICAgICAgICBub3QgdGhhdCBvZiB0aGUgaG9sZGVycy4gPC90cmFuc2xhdGlvbj4="
translation['7.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5BcHBhcmVudGx5IHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIGluaGFiaXRlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4sIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIFBoaWxpcCB0b29rIGl0LCB3ZXJlIGhvbGRpbmcgQXRoZW5pYW4gdGVycml0b3J5OyBidXQgd2hlbiBoZSBoYXMgdGFrZW4gaXQsIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbm8gbG9uZ2VyIG91ciB0ZXJyaXRvcnksIGJ1dCBoaXMgb3duLCB0aGF0IGhlIGhvbGRzOyBhbmQgaW4gdGhlIHNhbWUgd2F5IGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBcG9sbG9uaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFwb2xsb25pYSI+QXBvbGxvbmlhPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBhbGxlbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBhbGxlbmUiPlBhbGxlbmU8L3BsYWNlTmFtZT4gaGUgaXMgaW4gcG9zc2Vzc2lvbiBvZiBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHksIG5vdCB0aGF0IG9mIG90aGVycy4gPC90cmFuc2xhdGlvbj4="
translation['7.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5EbyB5b3Ugbm90IHNlZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGlzIGxldHRlciB0byB5b3UgaXMgYWxsIGNhcmVmdWxseSBjYWxjdWxhdGVkLCBzbyB0aGF0IGhpcyB3b3JkcyBhbmQgaGlzCiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucyBtYXkgYXBwZWFyIHRvIGNvbmZvcm0gdG8gdGhlIHVuaXZlcnNhbCBzdGFuZGFyZCBvZiBqdXN0aWNlLCB3aGlsZSBoZSBoYXMKICAgICAgICAgICAgICAgICAgICByZWFsbHkgc2hvd24gc3VwcmVtZSBjb250ZW1wdCBmb3IgaXQgaW4gY2xhaW1pbmcgZm9yIGhpbXNlbGYgYW5kIGRlbnlpbmcgdG8geW91CiAgICAgICAgICAgICAgICAgICAgdGVycml0b3J5IHdoaWNoIGlzIHlvdXJzIGJ5IGNvbW1vbiBjb25zZW50IGFuZCBkZWNyZWUgb2YgdGhlIEdyZWVrcyBhbmQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgS2luZyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4/PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgcmVmZXJzIHRvIHRoZSBhbWVuZGVkIHJlc2NyaXB0IG9idGFpbmVkIGJ5IHRoZSBBdGhlbmlhbnMKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUga2luZyBpbiAzNjYuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjEzNyIgdmFsaWQ9InllcyI+RGVtLiAxOS4xMzc8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjEzNyIgdmFsaWQ9InllcyI+RGVtLiAxOS4xMzc8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['7.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXMgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIGFtZW5kbWVudCB3aGljaCB5b3UgcHJvcG9zZSB0byBpbnRyb2R1Y2UsIHRoYXQgYWxsIHRoZSBHcmVla3Mgd2hvIGFyZSBub3QKICAgICAgICAgICAgICAgICAgICBwYXJ0aWVzIHRvIHRoZSBwZWFjZSBzaG91bGQgcmVtYWluIGZyZWUgYW5kIGluZGVwZW5kZW50LCBhbmQgdGhhdCBpZiB0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgIGF0dGFja2VkLCB0aGUgc2lnbmF0b3JpZXMgc2hvdWxkIHVuaXRlIHRvIGRlZmVuZCB0aGVtLCA8L3RyYW5zbGF0aW9uPg=="
translation['7.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz55b3UgY29uc2lkZXJlZCBpdCBib3RoIGZhaXIgYW5kIGdlbmVyb3VzIHRoYXQgdGhlIHBlYWNlIHNob3VsZCBub3QKICAgICAgICAgICAgICAgICAgICBiZSBjb25maW5lZCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYW5kIGhlciBhbGxpZXMKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgb25lIHNpZGUgYW5kIFBoaWxpcCBhbmQgaGlzIGFsbGllcyBvbiB0aGUgb3RoZXIsIHdoaWxlIHRob3NlIHdobyBhcmUKICAgICAgICAgICAgICAgICAgICBhbGxpZXMgb2YgbmVpdGhlciBhcmUgZXhwb3NlZCB0byBydWluIGF0IHRoZSBoYW5kcyBvZiB0aGVpciBzdHJvbmdlciBuZWlnaGJvcnMsCiAgICAgICAgICAgICAgICAgICAgYnV0IHJhdGhlciB0aGF0IHlvdXIgcGVhY2Ugc2hvdWxkIGV4dGVuZCBpdHMgcHJvdGVjdGlvbiB0byB0aGVtIGFsc28sIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2Ugc2hvdWxkIGRpc2FybSBhbmQgb2JzZXJ2ZSBhIHJlYWwgcGVhY2UuIDwvdHJhbnNsYXRpb24+"
translation['7.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICBQaGlsaXAsIGFsdGhvdWdoLCBhcyB5b3UgaGF2ZSBoZWFyZCBmcm9tIGhpcyBsZXR0ZXIsIGhlIGFkbWl0cyB0aGUganVzdGljZSBvZgogICAgICAgICAgICAgICAgICAgIHRoaXMgYW1lbmRtZW50IGFuZCBjb25zZW50cyB0byBhY2NlcHQgaXQsIGhhcyByb2JiZWQgdGhlIFBoZXJhZWFucyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNpdHksIHBsYWNpbmcgYSBnYXJyaXNvbiBpbiB0aGVpciBjaXRhZGVsLCBpbiBvcmRlciwgSSBzdXBwb3NlLCB0byBlbnN1cmUgdGhlaXIKICAgICAgICAgICAgICAgICAgICBpbmRlcGVuZGVuY2U7IGhlIGlzIGV2ZW4gbm93IGVuZ2FnZWQgaW4gYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1icmFjaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtYnJhY2lhIj5BbWJyYWNpYTwvcGxhY2VOYW1lPiwgYW5kIGFzIGZvciB0aGUgdGhyZWUgRWxlYW4KICAgICAgICAgICAgICAgICAgICBjb2xvbmllcyBpbiBDYXNzb3BpYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIGRpc3RyaWN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzA1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MDUiPkVwaXJ1czwvcGxhY2VOYW1lPiwganVzdCBub3J0aCBvZiB0aGUgQW1icmFjaWFuCiAgICAgICAgICAgICAgICAgICAgICAgIEd1bGYuPC9ub3RlPuKAlDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzA1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MDUiPkVwaXJ1czwvcGxhY2VOYW1lPiwganVzdCBub3J0aCBvZiB0aGUgQW1icmFjaWFuCiAgICAgICAgICAgICAgICAgICAgICAgIEd1bGYuPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQYW5kb3NpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGFuZG9zaWEiPlBhbmRvc2lhPC9wbGFjZU5hbWU+LCBCdWNoZXRhLCBhbmQgRWxhdGVh4oCUaGUgaGFzIHdhc3RlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGxhbmQgd2l0aCBmaXJlLCBzdG9ybWVkIHRoZWlyIGNpdGllcywgYW5kIGhhbmRlZCB0aGVtIG92ZXIgdG8gYmUgdGhlIHNsYXZlcyBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBvd24ga2luc21hbiwgQWxleGFuZGVyLiBIb3cgemVhbG91cyBoZSBpcyBmb3IgdGhlIGZyZWVkb20gYW5kIGluZGVwZW5kZW5jZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBHcmVla3MsIHlvdSBtYXkganVkZ2UgZnJvbSBoaXMgYWN0cy4gPC90cmFuc2xhdGlvbj4="
translation['7.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0aCByZWdhcmQgdG8gaGlzIHJlcGVhdGVkIHByb21pc2VzIHRvIHlvdQogICAgICAgICAgICAgICAgICAgIG9mIHN1YnN0YW50aWFsIGJlbmVmaXRzLCBoZSBjb21wbGFpbnMgdGhhdCBJIGFtIHNsYW5kZXJpbmcgYW5kIGRlZmFtaW5nIGhpbSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBlYXJzIG9mIHRoZSBHcmVla3MsIGZvciBoZSBzYXlzIHRoYXQgaGUgaGFzIG5ldmVyIG1hZGUgeW91IGFueSBwcm9taXNlcyBhdAogICAgICAgICAgICAgICAgICAgIGFsbC4gU3VjaCBpcyB0aGUgc2hhbWVsZXNzbmVzcyBvZiB0aGUgbWFuIHdobyBzdGF0ZWQgaW4gaGlzIGxldHRlciwgd2hpY2ggaXMKICAgICAgICAgICAgICAgICAgICBzdGlsbCB0byBiZSBzZWVuIGluIHRoZSBDb3VuY2lsIEhvdXNlLCB0aGF0IGlmIHBlYWNlIHdhcyBtYWRlIGhlIHdvdWxkIGNvbmZlcgogICAgICAgICAgICAgICAgICAgIHN1Y2ggYmVuZWZpdHMgb24geW91IGFzIHdvdWxkIHN0b3AgdGhlIG1vdXRocyBvZiB1cywgaGlzIG9wcG9uZW50cywgYmVuZWZpdHMKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBzYWlkIGhlIHdvdWxkIHB1dCBkb3duIGluIHdyaXRpbmcsIGlmIGhlIHdlcmUgc3VyZSB0aGF0IHRoZSBwZWFjZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGJlIG1hZGUuIFRoZSBpbmZlcmVuY2Ugd2FzIHRoYXQgYWxsIHRoZSBnb29kIHRoaW5ncyB0aGF0IHdlIHdlcmUgdG8gZW5qb3kgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgY29uY2x1c2lvbiBvZiBwZWFjZSB3ZXJlIHJlYWR5IGZvciBpbW1lZGlhdGUgZGVsaXZlcnkuIDwvdHJhbnNsYXRpb24+"
translation['7.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5QZWFjZSBoYXMgYmVlbiBjb25jbHVkZWQsIGJ1dCBhbGwgdGhlIGdvb2QgdGhpbmdzIHRoYXQgd2Ugd2VyZSB0bwogICAgICAgICAgICAgICAgICAgIGVuam95IGFyZSBzdGlsbCB0byBzZWVrLCBhbmQgdXBvbiB0aGUgR3JlZWtzIGhhcyBjb21lIHN1Y2ggcnVpbiBhcyB5b3Ugd2VsbAogICAgICAgICAgICAgICAgICAgIGtub3cuIFlldCBoZSBwcm9taXNlcyBpbiB0aGUgcHJlc2VudCBsZXR0ZXIgdGhhdCBpZiB5b3Ugd2lsbCBvbmx5IHRydXN0IGhpcwogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIGFkdm9jYXRlcyBhbmQgd2lsbCBwdW5pc2ggdGhlIHdpY2tlZCBtZW4gd2hvIHRyYWR1Y2UgaGltIHRvIHlvdSwgaGUKICAgICAgICAgICAgICAgICAgICB3aWxsIGNvbmZlciBzdWJzdGFudGlhbCBiZW5lZml0cy4gSGlzIGJlbmVmaXRzLCBob3dldmVyLCB3aWxsIGFtb3VudCB0byB0aGlzOgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5oZSB3aWxsIG5vdCByZXN0b3JlIHlvdXIgcG9zc2Vzc2lvbnMsIGZvcgogICAgICAgICAgICAgICAgICAgIGhlIGNsYWltcyB0aGVtIGFzIGhpcyBvd24sIGFuZCBoaXMgcmV3YXJkcyB3aWxsIG5vdCBiZSBkZWxpdmVyZWQgaW4gdGhpcyBwYXJ0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHdvcmxkLCBmb3IgZmVhciBoaXMgbW90aXZlIHNob3VsZCBiZSBtaXNyZXByZXNlbnRlZCB0byB0aGUgR3JlZWtzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFzIGlmIHVuZHVseSBmYXZvcmluZyB0aGUgQXRoZW5pYW5zLjwvbm90ZT47IHNvbWUKICAgICAgICAgICAgICAgICAgICBvdGhlciBjb3VudHJ5LCBpdCBzZWVtcywgc29tZSBuZXcgcXVhcnRlciB3aWxsIGJlIGFzc2lnbmVkIGZvciB0aGUgYmVzdG93YWwgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIHJld2FyZHMuIDwvdHJhbnNsYXRpb24+"
translation['7.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXMgZm9yIHRoZSBwbGFjZXMgaGVsZCBieSB5b3Ugd2hpY2ggaGUgdG9vayBpbiB0aW1lIG9mIHBlYWNlLCB2aW9sYXRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgdGVybXMgYW5kIGJyZWFraW5nIGhpcyBlbmdhZ2VtZW50cywgc2luY2UgaGUgaGFzIG5vdCBhIHdvcmQgdG8gc2F5IGJ1dCBpcwogICAgICAgICAgICAgICAgICAgIGNsZWFybHkgY29udmljdGVkIG9mIGluanVzdGljZSwgaGUgZXhwcmVzc2VzIGhpcyB3aWxsaW5nbmVzcyB0byByZWZlciB0aGUKICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbiB0byBhIGZhaXIgYW5kIGltcGFydGlhbCBjb3VydC4gQnV0IHRoaXMgaXMgdGhlIG9ubHkgcXVlc3Rpb24gdGhhdCBuZWVkcwogICAgICAgICAgICAgICAgICAgIG5vIHN1Y2ggcmVmZXJlbmNlOyB0aGUgY2FsZW5kYXIgaXMgc3VmZmljaWVudCB0byBkZWNpZGUgaXQuIDwvdHJhbnNsYXRpb24+"
translation['7.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2UgYWxsIGtub3cgaW4gd2hhdCBtb250aCBhbmQgb24gd2hhdCBkYXkgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVhY2Ugd2FzIG1hZGUsIGFuZCBhcyBzdXJlbHkgYWxzbyBkbyB3ZSBrbm93IGluIHdoYXQgbW9udGggYW5kIG9uIHdoYXQgZGF5IEZvcnQKICAgICAgICAgICAgICAgICAgICBTZXJyZXVtIGFuZCBFcmdpc2NlIGFuZCB0aGUgU2FjcmVkIE1vdW50PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRocmVlCiAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsIHBsYWNlcyBvbiB0aGUgVGhyYWNpYW4gQ29hc3Qgb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzUiPkFlZ2VhbjwvcGxhY2VOYW1lPiwgdGFrZW4gYnkgUGhpbGlwIGZyb20gQ2Vyc29ibGVwdGVzLCBhZnRlciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zIGhhZCBhY2NlcHRlZCB0aGUgcGVhY2Ugb2YgUGhpbG9jcmF0ZXMg77yIMzQ277yJLCBidXQKICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlIFBoaWxpcCBoYWQgdGFrZW4gdGhlIG9hdGguPC9ub3RlPiB3ZXJlIGNhcHR1cmVkLiBTdXJlbHkgdGhlc2UgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgd2VyZSBub3QgZG9uZSBpbiBhIGNvcm5lcjsgdGhleSBuZWVkIG5vIGp1ZGljaWFsIGlucXVpcnk7IGV2ZXJ5b25lIGNhbiBmaW5kIG91dAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGNhbWUgZmlyc3QsIHRoZSBtb250aCBpbiB3aGljaCB0aGUgcGVhY2Ugd2FzIG1hZGUgb3IgdGhhdCBpbiB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFjZXMgd2VyZSB0YWtlbi4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NSI+QWVnZWFuPC9wbGFjZU5hbWU+LCB0YWtlbiBieSBQaGlsaXAgZnJvbSBDZXJzb2JsZXB0ZXMsIGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMgaGFkIGFjY2VwdGVkIHRoZSBwZWFjZSBvZiBQaGlsb2NyYXRlcyDvvIgzNDbvvIksIGJ1dAogICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgUGhpbGlwIGhhZCB0YWtlbiB0aGUgb2F0aC48L3RyYW5zbGF0aW9uPg=="
translation['7.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4sIGhlIHNheXMgdGhhdCBoZSBoYXMgcmVzdG9yZWQgYWxsIHRoZSBwcmlzb25lcnMgdGhhdCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgdGFrZW4gaW4gdGhlIHdhci4gWWV0IHRoZSBtYW4gb2YgQ2FyeXN0dXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEKICAgICAgICAgICAgICAgICAgICAgICAgdG93biBpbiB0aGUgc291dGggb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICB0aGUgYWdlbnQgb2Ygb3VyIGNpdHksIGZvciB3aG9zZSByZWNvdmVyeSB5b3Ugc2VudCB0aHJlZQogICAgICAgICAgICAgICAgICAgIGVtYmFzc2llc+KAlFBoaWxpcCB3YXMgc28gYW54aW91cyB0byBvYmxpZ2UgeW91IHRoYXQgaGUga2lsbGVkIGhpbSBhbmQKICAgICAgICAgICAgICAgICAgICBkaWQgbm90IGV2ZW4gYWxsb3cgeW91IHRvIHJlY292ZXIgaGlzIGNvcnBzZSBmb3IgYnVyaWFsLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4uPC90cmFuc2xhdGlvbj4="
translation['7.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0aCByZWdhcmQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3Mjg1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcyODUiPkNoZXJzb25lc2U8L3BsYWNlTmFtZT4sIGl0IGlzIGltcG9ydGFudCB0bwogICAgICAgICAgICAgICAgICAgIGV4YW1pbmUgdGhlIHRlcm1zIG9mIGhpcyBkaXNwYXRjaCB0byB5b3UgYW5kIGFsc28gdG8ga25vdyB3aGF0IGhlIGlzIGFjdHVhbGx5CiAgICAgICAgICAgICAgICAgICAgZG9pbmcgaW4gdGhlIG1hdHRlci4gRm9yIHRoZSB3aG9sZSBvZiB0aGUgbGFuZCBub3J0aCBvZiBBZ29yYSwgYXMgYmVpbmcgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IGFuZCBubyBjb25jZXJuIG9mIHlvdXJzLCBoZSBoYXMgaGFuZGVkIG92ZXIgYXMgYSBwcml2YXRlIGVzdGF0ZSB0bwogICAgICAgICAgICAgICAgICAgIEFwb2xsb25pZGVzIG9mIENhcmRpYS4gWWV0IHRoZSBib3VuZGFyeSBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcyODUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzI4NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPiBpcyBub3QgQWdvcmEsIGJ1dCB0aGUgYWx0YXIgb2YgWmV1cyBvZiB0aGUgTWFyY2hlcywKICAgICAgICAgICAgICAgICAgICBoYWxmIHdheSBiZXR3ZWVuIFB0ZWxldW0gYW5kIHRoZSBXaGl0ZSBTdHJhbmQsIDwvdHJhbnNsYXRpb24+"
translation['7.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz53aGVyZSB0aGVyZSB3YXMgZ29pbmcgdG8gYmUgYSBjYW5hbCBhY3Jvc3MgdGhlIHBlbmluc3VsYS4gVGhpcyBpcyBwcm92ZWQgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgaW5zY3JpcHRpb24gb24gdGhlIGFsdGFyIG9mIFpldXMsIHdoaWNoIHJ1bnMgdGh1czo8Y2l0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InZlcnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJ1Ij5UaGUgZHdlbGxlcnMgaGVyZSBoYXZlIHNldCB0aGlzIGJvdW5kYXJ5LXN0b25lPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5NaWR3YXkgYHR3aXh0IFB0ZWxldW0gYW5kIHRoZSBTaWx2ZXIgU3RyYW5kLDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHJhaXNlZCB0aGlzIGFsdGFyIGZhaXIsIHRoYXQgbWVuIG1heSBvd248L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRoYXQgWmV1cyBpcyBXYXJkZW4gb2Ygb3VyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwyNTM4NzAzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDI1Mzg3MDMiPk5vIE1hbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGFuZDwvcGxhY2VOYW1lPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SWYgdGhlIHJlYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgY29ycmVjdCw8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDOvM68zr/PgOG9t863PC9mb3JlaWduPndpbGwgYmUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmNoZXMsIHdoaWNoIGJlbG9uZyB0byBubyBvbmUgYW5kIGFyZSB0aGVyZWZvcmUgcHV0IHVuZGVyIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0aW9uIG9mIFpldXMuIEJsYXNzIHJlYWRzPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrzOv+G9t8+BzrfPggogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgz4POt8684b2zz4rOv869IOG8gM68zrzOv8+B4b23zrfPgiDPhM614oCZPC9mb3JlaWduPndoaWNoIGxlYXZlcyB0aGUgbGFzdCBsaW5lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGhlciBpbiB0aGUgYWlyLjwvbm90ZT48L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPlVua25vd248L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgPC9jaXQ+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0idmVyc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIiBtZXQ9InUiPlRoZSBkd2VsbGVycyBoZXJlIGhhdmUgc2V0IHRoaXMgYm91bmRhcnktc3RvbmU8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk1pZHdheSBgdHdpeHQgUHRlbGV1bSBhbmQgdGhlIFNpbHZlciBTdHJhbmQsPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgcmFpc2VkIHRoaXMgYWx0YXIgZmFpciwgdGhhdCBtZW4gbWF5IG93bjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhhdCBaZXVzIGlzIFdhcmRlbiBvZiBvdXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDI1Mzg3MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMjUzODcwMyI+Tm8gTWFucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMYW5kPC9wbGFjZU5hbWU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JZiB0aGUgcmVhZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBjb3JyZWN0LDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM68zrzOv8+A4b23zrc8L2ZvcmVpZ24+d2lsbCBiZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyY2hlcywgd2hpY2ggYmVsb25nIHRvIG5vIG9uZSBhbmQgYXJlIHRoZXJlZm9yZSBwdXQgdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24gb2YgWmV1cy4gQmxhc3MgcmVhZHM8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OvM6/4b23z4HOt8+CCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDPg863zrzhvbPPis6/zr0g4byAzrzOvM6/z4HhvbfOt8+CIM+EzrXigJk8L2ZvcmVpZ24+d2hpY2ggbGVhdmVzIHRoZSBsYXN0IGxpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aGVyIGluIHRoZSBhaXIuPC9ub3RlPjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIiBtZXQ9InUiPlRoZSBkd2VsbGVycyBoZXJlIGhhdmUgc2V0IHRoaXMgYm91bmRhcnktc3RvbmU8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk1pZHdheSBgdHdpeHQgUHRlbGV1bSBhbmQgdGhlIFNpbHZlciBTdHJhbmQsPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgcmFpc2VkIHRoaXMgYWx0YXIgZmFpciwgdGhhdCBtZW4gbWF5IG93bjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhhdCBaZXVzIGlzIFdhcmRlbiBvZiBvdXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDI1Mzg3MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMjUzODcwMyI+Tm8gTWFucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMYW5kPC9wbGFjZU5hbWU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JZiB0aGUgcmVhZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBjb3JyZWN0LDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM68zrzOv8+A4b23zrc8L2ZvcmVpZ24+d2lsbCBiZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyY2hlcywgd2hpY2ggYmVsb25nIHRvIG5vIG9uZSBhbmQgYXJlIHRoZXJlZm9yZSBwdXQgdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24gb2YgWmV1cy4gQmxhc3MgcmVhZHM8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OvM6/4b23z4HOt8+CCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDPg863zrzhvbPPis6/zr0g4byAzrzOvM6/z4HhvbfOt8+CIM+EzrXigJk8L2ZvcmVpZ24+d2hpY2ggbGVhdmVzIHRoZSBsYXN0IGxpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aGVyIGluIHRoZSBhaXIuPC9ub3RlPjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDI1Mzg3MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMjUzODcwMyI+Tm8gTWFucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMYW5kPC9wbGFjZU5hbWU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JZiB0aGUgcmVhZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBjb3JyZWN0LDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM68zrzOv8+A4b23zrc8L2ZvcmVpZ24+d2lsbCBiZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyY2hlcywgd2hpY2ggYmVsb25nIHRvIG5vIG9uZSBhbmQgYXJlIHRoZXJlZm9yZSBwdXQgdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24gb2YgWmV1cy4gQmxhc3MgcmVhZHM8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OvM6/4b23z4HOt8+CCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDPg863zrzhvbPPis6/zr0g4byAzrzOvM6/z4HhvbfOt8+CIM+EzrXigJk8L2ZvcmVpZ24+d2hpY2ggbGVhdmVzIHRoZSBsYXN0IGxpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aGVyIGluIHRoZSBhaXIuPC9ub3RlPjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM68zrzOv8+A4b23zrc8L2ZvcmVpZ24+d2lsbCBiZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyY2hlcywgd2hpY2ggYmVsb25nIHRvIG5vIG9uZSBhbmQgYXJlIHRoZXJlZm9yZSBwdXQgdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24gb2YgWmV1cy4gQmxhc3MgcmVhZHM8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OvM6/4b23z4HOt8+CCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDPg863zrzhvbPPis6/zr0g4byAzrzOvM6/z4HhvbfOt8+CIM+EzrXigJk8L2ZvcmVpZ24+d2hpY2ggbGVhdmVzIHRoZSBsYXN0IGxpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aGVyIGluIHRoZSBhaXIuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+VW5rbm93bjwvYmlibD4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBkaXN0cmljdCwKICAgICAgICAgICAgICAgICAgICBob3dldmVyLCBvZiB3aG9zZSBleHRlbnQgbW9zdCBvZiB5b3UgYXJlIGF3YXJlLCBoZSB0cmVhdHMgYXMgaGlzIG93biwgZW5qb3lpbmcKICAgICAgICAgICAgICAgICAgICBwYXJ0IGhpbXNlbGYgYW5kIGJlc3Rvd2luZyBwYXJ0IG9uIG90aGVycywgYW5kIHNvIGhlIGJyaW5ncyBhbGwgeW91ciBwcm9wZXJ0eQogICAgICAgICAgICAgICAgICAgIHVuZGVyIGhpcyBvd24gY29udHJvbC4gTm90IG9ubHkgZG9lcyBoZSBhcHByb3ByaWF0ZSB0aGUgbGFuZCBub3J0aCBvZiBBZ29yYSwgYnV0CiAgICAgICAgICAgICAgICAgICAgaGUgYWxzbyBvcmRlcnMgeW91IGluIGhpcyBwcmVzZW50IGxldHRlciB0byBzZXR0bGUgYnkgYXJiaXRyYXRpb24gYW55IGRpc3B1dGVzCiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgd2l0aCB0aGUgQ2FyZGlhbnMgdG8gdGhlIHNvdXRoIG9mIEFnb3Jh4oCUdGhlIENhcmRpYW5zLCB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgc2V0dGxlcnMgaW4geW91ciBvd24gdGVycml0b3J5ISA8L3RyYW5zbGF0aW9uPg=="
translation['7.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGhhdmUgYQogICAgICAgICAgICAgICAgICAgIGRpc3B1dGUgd2l0aCB5b3U7IHNlZSB3aGV0aGVyIGl0IGlzIGFib3V0IGEgdHJpZmxlLiBUaGV5IHNheSB0aGF0IHRoZSBsYW5kIHRoZXkKICAgICAgICAgICAgICAgICAgICBsaXZlIGluIGlzIG5vdCB5b3VycywgYnV0IHRoZWlyIG93biwgYW5kIHRoYXQgd2hpbGUgeW91ciBwb3NzZXNzaW9ucyB0aGVyZSBhcmUKICAgICAgICAgICAgICAgICAgICBoZWxkIGJ5IGdyYWNlIGluIGEgZm9yZWlnbiBjb3VudHJ5LCB0aGVpcnMgYXJlIHRoZWlyIG93biBwcm9wZXJ0eSBvbiB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICBzb2lsLCBhbmQgdGhhdCB0aGlzIGlzIGFkbWl0dGVkIGluIGEgZGVjcmVlIG9mIHlvdXIgY291bnRyeW1hbiwgQ2FsbGlwcHVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFBhZWFuaWFuIGRlbWUuIDwvdHJhbnNsYXRpb24+"
translation['7.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlcmUgdGhleSBzcGVhayB0cnV0aCwgZm9yCiAgICAgICAgICAgICAgICAgICAgaGUgZGlkIHByb3Bvc2Ugc3VjaCBhIGRlY3JlZSwgYW5kIHdoZW4gSSBpbmRpY3RlZCBoaW0gZm9yIGEgYnJlYWNoIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnN0aXR1dGlvbiwgeW91IGFjcXVpdHRlZCBoaW07IHRoYXQgaXMgaG93IGhlIGhhcyBicm91Z2h0IHlvdXIgY2xhaW0gaW50bwogICAgICAgICAgICAgICAgICAgIGRpc3B1dGUuIEJ1dCBpZiBhbmQgd2hlbiB5b3Ugc3VibWl0IHlvdXIgZGlzcHV0ZSB3aXRoIHRoZSBDYXJkaWFucyB0bwogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0aW9uLCB0byBkZWNpZGUgd2hldGhlciB0aGUgbGFuZCBpcyB5b3VycyBvciB0aGVpcnMsIHdoeSBub3QgZXh0ZW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHByaW5jaXBsZSB0byB0aGUgb3RoZXIgc3RhdGVzIG9mIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzI4NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3Mjg1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+IGFsc28/IDwvdHJhbnNsYXRpb24+"
translation['7.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5QaGlsaXAncwogICAgICAgICAgICAgICAgICAgIGluc29sZW5jZSBpcyBjYXJyaWVkIHNvIGZhciB0aGF0IGhlIHNheXMgdGhhdCBpZiB0aGUgQ2FyZGlhbnMgZGVjbGluZQogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0aW9uLCBoZSB3aWxsIGJlIHJlc3BvbnNpYmxlIGZvciBjb2VyY2luZyB0aGVtOyBhcyBpZiB5b3UgY291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgY29tcGVsIENhcmRpYW5zIHRvIGRvIGFueXRoaW5nIHlvdSB3YW50ZWQhIEhlIHdpbGwgbWFrZSB0aGVtIGRvIGl0LCBoZSBzYXlzLAogICAgICAgICAgICAgICAgICAgIHNpbmNlIHlvdSBjYW5ub3QuIEFyZSBub3QgaGlzIGZhdm9ycyB0byB5b3UgZ3JlYXQgYW5kIG1hbmlmZXN0PyA8L3RyYW5zbGF0aW9uPg=="
translation['7.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyBsZXR0ZXIgd2FzIGFjdHVhbGx5IGNvbW1lbmRlZCBieSBzb21lCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCB3aG8gbWVyaXQgeW91ciBoYXRyZWQgbXVjaCBtb3JlIHRoYW4gUGhpbGlwLiBGb3Igd2hhdGV2ZXIgUGhpbGlwIGRvZXMKICAgICAgICAgICAgICAgICAgICB0byB0aHdhcnQgeW91LCBoZSBpcyBvbmx5IGFpbWluZyBhdCBhZHZhbnRhZ2UgYW5kIGdsb3J5IGZvciBoaW1zZWxmLCBidXQKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMgd2hvIG1ha2UgYSBwYXJhZGUgb2YgdGhlaXIgZ29vZHdpbGwgdG8gUGhpbGlwLCByYXRoZXIgdGhhbiB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIG93biBjb3VudHJ5LCBhcmUgd3JldGNoZXMgd2hvIGRlc2VydmUgdG8gcGVyaXNoIGF0IHlvdXIgaGFuZHMgdW5waXRpZWQsIGlmIHlvdQogICAgICAgICAgICAgICAgICAgIGNhcnJ5IHlvdXIgYnJhaW5zIGluIHlvdXIgaGVhZHMgYW5kIG5vdCB0cm9kZGVuIGRvd24gaW4geW91ciBoZWVscy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TGliYW5pdXMgZmluZHMgaW4gdGhpcyB1Z2x5IG1ldGFwaG9yIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGluZGljYXRpb24gb2YgdGhlIHNwdXJpb3VzbmVzcyBvZiB0aGlzIHNwZWVjaC4KICAgICAgICAgICAgICAgICAgICAgICAg4oCcTG9uZ2ludXPigJ0gYWxzbyBjb25kZW1ucyBpdCDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMb25naW4uIDM4Ij5Mb25nLiBEZSBTdWJsLiAzODwvYmlibD7vvIksIGJ1dCB3ZSBjYW5ub3Qgc2F5IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHdob20gaGUgYXR0cmlidXRlZCBpdCwgYXMgaGlzIHRleHQgaGVyZSBpcyBtdXRpbGF0ZWQuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxvbmdpbi4gMzgiPkxvbmcuIERlIFN1YmwuIDM4PC9iaWJsPu+8iSwgYnV0IHdlIGNhbm5vdCBzYXkgdG8KICAgICAgICAgICAgICAgICAgICAgICAgd2hvbSBoZSBhdHRyaWJ1dGVkIGl0LCBhcyBoaXMgdGV4dCBoZXJlIGlzIG11dGlsYXRlZC48L3RyYW5zbGF0aW9uPg=="
translation['7.46'] = ""
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBzaG91bGQgYmUgdGhlCiAgICAgICAgICAgICAgICAgICAgZHV0eSBvZiBhbGwgc3BlYWtlcnMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdG8gZ2l2ZSBubyBleHByZXNzaW9uIHRvIHRoZWlyIGhhdHJlZCBvciB0aGVpciBwYXJ0aWFsaXR5LCBidXQgdG8gcHV0IGZvcndhcmQKICAgICAgICAgICAgICAgICAgICBqdXN0IHdoYXQgZWFjaCB0aGlua3MgdGhlIGJlc3QgY291bnNlbCwgZXNwZWNpYWxseSB3aGVuIHlvdSBhcmUgZGViYXRpbmcgYQogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uIG9mIHVyZ2VudCBwdWJsaWMgaW1wb3J0YW5jZS4gQnV0IHNpbmNlIHRoZXJlIGFyZSBzcGVha2VycyB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgaW1wZWxsZWQgdG8gYWRkcmVzcyB5b3UsIGVpdGhlciBhcyBwYXJ0aXNhbnMgb3IgZnJvbSBzb21lIG90aGVyIG1vdGl2ZSwgd2hhdGV2ZXIKICAgICAgICAgICAgICAgICAgICBpdCBtYXkgYmUsIHlvdSBjaXRpemVucyB3aG8gZm9ybSB0aGUgbWFqb3JpdHkgb3VnaHQgdG8gZGlzbWlzcyBhbGwgZWxzZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgeW91ciBtaW5kcywgYW5kIHZvdGUgYW5kIGFjdCBpbiBzdWNoIGEgd2F5IGFzIHlvdSB0aGluayB3aWxsIGJlc3Qgc2VydmUgb3VyCiAgICAgICAgICAgICAgICAgICAgY2l0eS4gPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZWFsbHkgc2VyaW91cyBwcm9ibGVtIGlzIHRoZSBzdGF0ZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzI4NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3Mjg1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+IGFuZCBQaGlsaXAncyBUaHJhY2lhbgogICAgICAgICAgICAgICAgICAgIGNhbXBhaWduLCBub3cgaW4gaXRzIGVsZXZlbnRoIG1vbnRoOyB5ZXQgbW9zdCBvZiB0aGUgc3BlZWNoZXMgaGF2ZSBiZWVuIGNvbmZpbmVkCiAgICAgICAgICAgICAgICAgICAgdG8gd2hhdCBEaW9waXRoZXMgaXMgZG9pbmcgb3Igd2hhdCBoZSBpcyBnb2luZyB0byBkby4gRm9yIG15IHBhcnQsIHdoZW4gY2hhcmdlcwogICAgICAgICAgICAgICAgICAgIGFyZSBicm91Z2h0IGFnYWluc3QgYW55IG9mIHRob3NlIHdob20geW91IGNhbiBsZWdhbGx5IHB1bmlzaCB3aGVuZXZlciB5b3UgbGlrZSwKICAgICAgICAgICAgICAgICAgICBJIGhvbGQgdGhhdCBpdCBpcyBvcGVuIHRvIHlvdSBlaXRoZXIgdG8gZGVhbCB3aXRoIHRoZWlyIGNhc2UgYXQgb25jZSBvciB0bwogICAgICAgICAgICAgICAgICAgIHBvc3Rwb25lIGl0OyBhbmQgaXQgaXMgcXVpdGUgdW5uZWNlc3NhcnkgZm9yIG1lIG9yIGFueW9uZSBlbHNlIHRvIHRha2UgYSBzdHJvbmcKICAgICAgICAgICAgICAgICAgICBsaW5lIG9uIHRoZSBzdWJqZWN0IG9mIHN1Y2ggY2hhcmdlcy4gPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuCiAgICAgICAgICAgICAgICAgICAgb3VyIG5hdGlvbmFsIGVuZW15LCB3aXRoIGEgc3Ryb25nIGZvcmNlLCBpcyB0cnlpbmcgdG8gZm9yZXN0YWxsIHVzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG5laWdoYm9yaG9vZCBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYzOCI+SGVsbGVzcG9udDwvcGxhY2VOYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hlbiwgaWYgd2UgYXJlIG9uY2UgdG9vIGxhdGUsIHdlIHNoYWxsIG5ldmVyIGFnYWluIGJlIGFibGUgdG8gc2F2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBzaXR1YXRpb24sIHRoZW4gSSB0aGluayBpdCBpcyB0byBvdXIgaW50ZXJlc3QgdG8gY29tcGxldGUgb3VyIHBsYW5zIGFuZAogICAgICAgICAgICAgICAgICAgIHByZXBhcmF0aW9ucyBhcyBxdWlja2x5IGFzIHdlIGNhbiwgYW5kIG5vdCBiZSBkaXZlcnRlZCBmcm9tIG91ciBwdXJwb3NlIGJ5CiAgICAgICAgICAgICAgICAgICAgY2xhbW9yb3VzIGFjY3VzYXRpb25zIGFib3V0IGV4dHJhbmVvdXMgbWF0dGVycy4gPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIG9mdGVuIHdvbmRlciBhdCB0aGUgc29ydCBvZiBzcGVlY2hlcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgYXJlIGRlbGl2ZXJlZCBoZXJlLCBidXQgbm90aGluZywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGFzIHN1cnByaXNlZCBtZSBtb3JlIHRoYW4gd2hhdCBJIGhlYXJkIHV0dGVyZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgQ291bmNpbCB0aGUgb3RoZXIgZGF5LCB0aGF0IHlvdXIgYWR2aXNlcnMgYXJlIGJvdW5kIHRvIHB1dCBiZWZvcmUgeW91IHRoZSBwbGFpbgogICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aXZlIG9mIGZpZ2h0aW5nIG9yIG9ic2VydmluZyB0aGUgcGVhY2UuIDwvdHJhbnNsYXRpb24+"
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgZmFjdCBpcywgaWYgUGhpbGlwIGtlZXBzIHF1aWV0IGFuZCBkb2VzIG5vdCByZXRhaW4gYW55IG9mIG91cgogICAgICAgICAgICAgICAgICAgIHRlcnJpdG9yeSBjb250cmFyeSB0byB0aGUgdGVybXMgb2YgcGVhY2UsIGFuZCBkb2VzIG5vdCBmb3JtIGEgZ2VuZXJhbCBjb2FsaXRpb24KICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHVzLCB0aGVyZSBpcyBub3RoaW5nIG1vcmUgdG8gYmUgc2FpZCBhbmQgd2UgbXVzdCBzaW1wbHkgb2JzZXJ2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBwZWFjZSwgYW5kIEkgcGVyY2VpdmUgYSByZWFkaW5lc3MgdG8gZG8gc28gb24geW91ciBwYXJ0IGF0IGFueSByYXRlOyBidXQgaWYgdGhlCiAgICAgICAgICAgICAgICAgICAgb2F0aCB0aGF0IHdlIHRvb2sgYW5kIHRoZSB0ZXJtcyBvbiB3aGljaCB3ZSBtYWRlIHBlYWNlIGFyZSBwdWJsaXNoZWQgZm9yIGFsbCBtZW4KICAgICAgICAgICAgICAgICAgICB0byByZWFkLCA8L3RyYW5zbGF0aW9uPg=="
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpZiBpdCBpcyBwcm92ZWQgdGhhdCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0LCBldmVuIGJlZm9yZSBEaW9waXRoZXMgc2V0IHNhaWwgd2l0aCBjb2xvbmlzdHMsIHdob20gdGhleSBub3cgYWNjdXNlIG9mCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHN0YXJ0ZWQgaG9zdGlsaXRpZXMsIFBoaWxpcCBoYXMgdW5mYWlybHkgdGFrZW4gbXVjaCB0aGF0IGlzIG91cnMsIGFib3V0CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggeW91ciBkZWNyZWVzIGRlbm91bmNpbmcgaGltIHN0aWxsIHN0YW5kIGdvb2QsIGFuZCB0aGF0IGhlIGlzIGFsbCB0aGUgdGltZQogICAgICAgICAgICAgICAgICAgIHJlcGVhdGVkbHkgc2VpemluZyB0aGUgcHJvcGVydHkgb2YgdGhlIG90aGVyIEdyZWVrcyBhbmQgb2YgdGhlIGJhcmJhcmlhbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIHNvIGVxdWlwcGluZyBoaW1zZWxmIGZvciBhbiBhdHRhY2sgdXBvbiB1cywgd2hhdCBkbyB0aGV5IG1lYW4gYnkgc2F5aW5nIHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICBtdXN0IGVpdGhlciBtYWtlIHdhciBvciBrZWVwIHBlYWNlPyA8L3RyYW5zbGF0aW9uPg=="
translation['8.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbm8gY2hvaWNlIGluIHRoZSBtYXR0ZXIsIGJ1dCB0aGVyZSByZW1haW5zIHRoZSBtb3N0IHJpZ2h0ZW91cyBhbmQgbW9zdCBuZWNlc3NhcnkKICAgICAgICAgICAgICAgICAgICB0YXNrIG9mIGFsbCwgd2hpY2ggdGhlc2UgZ2VudGxlbWVuIGRlbGliZXJhdGVseSBwYXNzIG92ZXIgaW4gc2lsZW5jZS4gV2hhdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgaXMgdGhhdCB0YXNrPyBUbyBkZWZlbmQgb3Vyc2VsdmVzIGFnYWluc3QgdGhlIGFnZ3Jlc3Nvci4gT3IgcGVyaGFwcyB0aGV5IG1lYW4KICAgICAgICAgICAgICAgICAgICB0aGF0IGlmIFBoaWxpcCBrZWVwcyBoaXMgaGFuZHMgb2ZmIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiBhbmQgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGlyYWV1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGlyYWV1cyI+UGlyYWV1czwvcGxhY2VOYW1lPiwgaGUgaXMgbmVpdGhlciBpbmp1cmluZyBvdXIgY2l0eSBub3IgcHJvdm9raW5nCiAgICAgICAgICAgICAgICAgICAgaG9zdGlsaXRpZXMuIDwvdHJhbnNsYXRpb24+"
translation['8.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiB0aGV5IGdyb3VuZCB0aGVpciBwbGVhIHVwb24KICAgICAgICAgICAgICAgICAgICB0aGlzIHByaW5jaXBsZSwgaWYgdGhpcyBpcyB0aGVpciBpbnRlcnByZXRhdGlvbiBvZiB0aGUgcGVhY2UsIGl0IGlzIG9idmlvdXMgdG8KICAgICAgICAgICAgICAgICAgICBhbGwgdGhhdCB0aGVpciBhcmd1bWVudCBpcyBhc3N1cmVkbHkgaW1waW91cyBhbmQgaW50b2xlcmFibGUgYW5kIGRhbmdlcm91cyB0bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT47IGFuZCBpdCBmb2xsb3dzIGJlc2lkZXMKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZWlyIG93biB3b3JkcyBmbGF0bHkgY29udHJhZGljdCB0aGVpciBpbmRpY3RtZW50IG9mIERpb3BpdGhlcy4gRm9yIHdoeSBvbgogICAgICAgICAgICAgICAgICAgIGVhcnRoIGFyZSB3ZSB0byBnaXZlIFBoaWxpcCBsZWF2ZSB0byBkbyBldmVyeXRoaW5nIGVsc2UsIHByb3ZpZGVkIGhlIGtlZXBzIGNsZWFyCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+LCB3aGlsZSBEaW9waXRoZXMgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZCB0byBoZWxwIHRoZSBUaHJhY2lhbnMsIG9yIGVsc2Ugd2Ugc2hhbGwgaGF2ZSB0byBhZG1pdCB0aGF0IGhlIGlzCiAgICAgICAgICAgICAgICAgICAgc3RhcnRpbmcgYSB3YXI/IDwvdHJhbnNsYXRpb24+"
translation['8.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlllcywgeW91IG1heSBzYXksIGFzIHRvIHRoYXQKICAgICAgICAgICAgICAgICAgICBpbmRlZWQgdGhlIHNwZWFrZXJzIGFyZSBwcm92ZWQgd3JvbmcsIGJ1dCB0aGUgbWVyY2VuYXJpZXMgYXJlIHJlYWxseSBhY3RpbmcKICAgICAgICAgICAgICAgICAgICBhYm9taW5hYmx5IGluIHJhdmFnaW5nIHRoZSBzaG9yZXMgb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4sIGFuZCBEaW9waXRoZXMgaXMgd3JvbmcgaW4gZGV0YWluaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIG1lcmNoYW50bWVuLCBhbmQgd2UgbXVzdCBub3Qgc2FuY3Rpb24gaXQuIFZlcnkgd2VsbDsgYmUgaXQgc28uIEkgaGF2ZSBubwogICAgICAgICAgICAgICAgICAgIG9iamVjdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['8.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Pbmx5IEkgdGhpbmsgdGhhdCwgaWYgdGhlaXIgYWR2aWNlCiAgICAgICAgICAgICAgICAgICAgaXMgcmVhbGx5IGdpdmVuIGluIHBlcmZlY3QgZ29vZCBmYWl0aCwgZXZlbiBhcyB0aGV5IGFyZSB0cnlpbmcgdG8gYnJlYWsgdXAgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9yY2UgYmVsb25naW5nIHRvIG91ciBjaXR5IGJ5IGJyaW5naW5nIGNoYXJnZXMgYmVmb3JlIHlvdSBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgIGNvbW1hbmRlciwgd2hvIHByb3ZpZGVzIGZvciBpdHMgbWFpbnRlbmFuY2UsIHNvIHRoZXkgYXJlIGJvdW5kIHRvIHNob3cgdGhhdAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCdzIGZvcmNlIHdpbGwgYWxzbyBiZSBkaXNiYW5kZWQsIGlmIHlvdSBhY2NlcHQgdGhlaXIgYWR2aWNlLiBJZiBub3QsIHlvdQogICAgICAgICAgICAgICAgICAgIG11c3Qgb2JzZXJ2ZSB0aGF0IHRoZXkgYXJlIG1lcmVseSByZWR1Y2luZyBvdXIgY2l0eSB0byB0aGUgc2FtZSBwbGlnaHQgdGhhdCBoYXMKICAgICAgICAgICAgICAgICAgICBhbHJlYWR5IGNhdXNlZCBoZXIgdG8gZm9yZmVpdCBhbGwgaGVyIGV4aXN0aW5nIGFkdmFudGFnZXMuIDwvdHJhbnNsYXRpb24+"
translation['8.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSSBuZWVkIG5vdCB0ZWxsIHlvdSB0aGF0IFBoaWxpcCBvd2VzIGhpcwogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NlcyB0byBub3RoaW5nIGluIHRoZSB3b3JsZCBtb3JlIHRoYW4gdG8gaGlzIGJlaW5nIHRoZSBmaXJzdCBpbiB0aGUgZmllbGQuCiAgICAgICAgICAgICAgICAgICAgRm9yIHRoZSBtYW4gd2hvIGFsd2F5cyBrZWVwcyBhIHN0YW5kaW5nIGFybXkgYnkgaGltLCBhbmQgd2hvIGtub3dzIGJlZm9yZWhhbmQKICAgICAgICAgICAgICAgICAgICB3aGF0IGhlIHdhbnRzIHRvIGRvLCBpcyByZWFkeSBpbiBhbiBpbnN0YW50IGZvciBhbnlvbmUgdGhhdCBoZSBjaG9vc2VzIHRvCiAgICAgICAgICAgICAgICAgICAgYXR0YWNrLCB3aGlsZSBpdCBpcyBvbmx5IGFmdGVyIHdlIGhhdmUgaGVhcmQgb2Ygc29tZXRoaW5nIGhhcHBlbmluZyB0aGF0IHdlCiAgICAgICAgICAgICAgICAgICAgYmVnaW4gdG8gYnVzdGxlIGFib3V0IGFuZCBtYWtlIG91ciBwcmVwYXJhdGlvbnMuIDwvdHJhbnNsYXRpb24+"
translation['8.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5IZW5jZSwgSSBiZWxpZXZlLCBpdCByZXN1bHRzIHRoYXQgUGhpbGlwLCBxdWl0ZSBhdCBoaXMgbGVpc3VyZSwKICAgICAgICAgICAgICAgICAgICBrZWVwcyB3aGF0ZXZlciBoZSBhc3NhaWxzLCB3aGlsZSB3ZSBhcmUgdG9vIGxhdGUsIGFuZCB3aGF0ZXZlciB3ZSBoYXZlIHNwZW50IGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gbGF2aXNoZWQgaW4gdmFpbjsgd2UgaGF2ZSBzdWNjZWVkZWQgaW4gc2hvd2luZyBvdXIgZW5taXR5IGFuZCBvdXIgd2lsbCB0bwogICAgICAgICAgICAgICAgICAgIHRod2FydCBoaW0sIGJ1dCBieSBiZWluZyB0b28gbGF0ZSBmb3IgYWN0aW9uIHdlIG9ubHkgaW5jdXIgYWRkaXRpb25hbCBpZ25vbWlueS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RG8gbm90LAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgZmFpbCB0byBvYnNlcnZlLCBBdGhlbmlhbnMsIHRoYXQgYXQgcHJlc2VudCBhbGwgZWxzZSBpcyBtZXJlIHRhbGsgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJldGVuY2U7IHRoZSByZWFsIG9iamVjdCBvZiB0aGlzIHNjaGVtaW5nIGFuZCBjb250cml2aW5nIGlzIHRoYXQgeW91IHNob3VsZAogICAgICAgICAgICAgICAgICAgIHN0YXkgYXQgaG9tZSwgd2l0aCBubyBBdGhlbmlhbiBmb3JjZSBpbiBmaWVsZCwgd2hpbGUgUGhpbGlwLCB3aXRob3V0IHRoZSBsZWFzdAogICAgICAgICAgICAgICAgICAgIHRyb3VibGUsIHNldHRsZXMgZXZlcnl0aGluZyB0byBzdWl0IGhpcyB3aXNoZXMuIEZvciB5b3UgbXVzdCBmaXJzdCBub3RlIHdoYXQgaXMKICAgICAgICAgICAgICAgICAgICBnb2luZyBvbiBhdCB0aGUgcHJlc2VudCBtb21lbnQuIDwvdHJhbnNsYXRpb24+"
translation['8.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBpcyBub3cKICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2hlZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4gd2l0aCBhIGxhcmdlCiAgICAgICAgICAgICAgICAgICAgZm9yY2UsIGFuZCBpcyBzZW5kaW5nIGZvciBjb25zaWRlcmFibGUgcmVpbmZvcmNlbWVudHMgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTkiPlRoZXNzYWx5PC9wbGFjZU5hbWU+LCBhY2NvcmRpbmcgdG8gdGhlIHN0YXRlbWVudHMgb2YgdGhvc2Ugb24gdGhlIHNwb3QuCiAgICAgICAgICAgICAgICAgICAgTm93LCBpZiBoZSB3YWl0cyBmb3IgdGhlIEV0ZXNpYW4gd2luZHMgdG8gYmxvdyBhbmQgbWFyY2hlcyB0byB0aGUgc2llZ2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCeXphbnRpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJ5emFudGl1bSI+Qnl6YW50aXVtPC9wbGFjZU5hbWU+LCBkbyB5b3UgdGhpbmsgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBCeXphbnRpbmVzIHdpbGwgcmVtYWluIGluIHRoZWlyIHByZXNlbnQgc3RhdGUgb2YgaW5mYXR1YXRpb24gYW5kIHdpbGwgbm90CiAgICAgICAgICAgICAgICAgICAgY2FsbCB1cG9uIHlvdSBhbmQgZGVtYW5kIHlvdXIgaGVscD8gPC90cmFuc2xhdGlvbj4="
translation['8.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5JIHRoaW5rCiAgICAgICAgICAgICAgICAgICAgbm90LiBOYXksIGV2ZW4gaWYgdGhlcmUgYXJlIG90aGVycyB3aG9tIHRoZXkgZGlzdHJ1c3QgbW9yZSB0aGFuIHVzLCBJIHRoaW5rIHRoZXkKICAgICAgICAgICAgICAgICAgICB3aWxsIHJhdGhlciBhZG1pdCBzdWNoIHdpdGhpbiB0aGVpciB3YWxscyB0aGFuIHN1cnJlbmRlciB0aGVpciBjaXR5IHRvCiAgICAgICAgICAgICAgICAgICAgUGhpbGlw4oCUaWYgaW5kZWVkIGhlIGRvZXMgbm90IGZvcmVzdGFsbCB0aGVtIGJ5IGNhcHR1cmluZyBpdC4KICAgICAgICAgICAgICAgICAgICBUaGVyZWZvcmUsIGlmIHdlIGNhbm5vdCBzYWlsIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgaWYgdGhlcmUgaXMgbm8gZm9yY2UgcmVhZHkgdG8gaGVscCB0aGVtIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHNwb3QsIHRoZWlyIGRvb20gaXMgc2VhbGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz7igJxCZWNhdXNlLOKAnSB5b3Ugc2F5LCDigJx0aGUgd3JldGNoZWQgY3JlYXR1cmVzIGFyZQogICAgICAgICAgICAgICAgICAgIGluZmF0dWF0ZWQgYW5kIHN0dXBpZCBiZXlvbmQgbWVhc3VyZS7igJ0gUXVpdGUgc28sIGJ1dCBzdGlsbCB3ZSBhcmUKICAgICAgICAgICAgICAgICAgICBib3VuZCB0byBwcmVzZXJ2ZSB0aGVtIGluIHRoZSBpbnRlcmVzdHMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBBbmQgdGhlbiBhZ2FpbiB3ZSBhcmUgbm90IGNlcnRhaW4gb2YgYW5vdGhlciB0aGluZywKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHdpbGwgbm90IGF0dGFjayB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcyODUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzI4NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICBJbmRlZWQsIGlmIHdlIG1heSBqdWRnZSBmcm9tIHRoZSBsZXR0ZXIgd2hpY2ggaGUgc2VudCB5b3UsIGhlIG1lYW5zIHRvIHRha2UKICAgICAgICAgICAgICAgICAgICB2ZW5nZWFuY2Ugb24gdGhlIHNldHRsZXJzIHRoZXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5JZiwKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIG91ciBwcmVzZW50IGZvcmNlIGlzIHN0aWxsIGluIGJlaW5nLCBpdCB3aWxsIGJlIGFibGUgYm90aCB0byBzYXZlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDM0NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwMzQ1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+IGFuZCB0byBtYWtlIHJhaWRzIHVwb24KICAgICAgICAgICAgICAgICAgICBQaGlsaXAncyB0ZXJyaXRvcnkuIEJ1dCBpZiBpdCBpcyBvbmNlIGRpc2JhbmRlZCwgd2hhdCBzaGFsbCB3ZSBkbyBpZiBoZSBtYXJjaGVzCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTAzNDUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDM0NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPj8KICAgICAgICAgICAgICAgICAgICDigJxCcmluZyBEaW9waXRoZXMgdG8gdHJpYWws4oCdIHlvdSBzYXkuIEFuZCBob3cgd2lsbCB0aGF0IGhlbHAKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzPyDigJxXZWxsLCB0aGVuLCB3ZSB3aWxsIHNldCBvdXQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gb3Vyc2VsdmVzLuKAnSBCdXQgc3VwcG9zZQogICAgICAgICAgICAgICAgICAgIHRoZSB3aW5kcyB3aWxsIG5vdCBsZXQgdXM/IOKAnEJ1dCBzdXJlbHkgUGhpbGlwIHdpbGwgbm90CiAgICAgICAgICAgICAgICAgICAgYXR0YWNrLuKAnSBBbmQgd2hvIHdpbGwgZ28gYmFpbCBmb3IgdGhhdD8gRG8geW91IG5vdCBvYnNlcnZlIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCA8L3RyYW5zbGF0aW9uPg=="
translation['8.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz53aGF0IHNlYXNvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgc2Vhc29uIG9mIHRoZSBFdGVzaWFuIHdpbmRzOyBzZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA4LjE0IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDguMTQ8L2JpYmw+Ljwvbm90ZT4gb2YgdGhlIHllYXIgaXMgdXBvbiB1c+KAlHRoZSBzZWFzb24gYXQgd2hpY2gKICAgICAgICAgICAgICAgICAgICBjZXJ0YWluIHBlb3BsZSB0aGluayBpdCB0aGVpciBkdXR5IHRvIGtlZXAgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gOC4xNCIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICA4LjE0PC9iaWJsPi48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+IGNsZWFyIG9mIHlvdSBhbmQgaGFuZCBpdCBvdmVyIHRvIFBoaWxpcD8gV2hhdCBpZiBoZQogICAgICAgICAgICAgICAgICAgIHF1aXRzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiBhbmQgbmV2ZXIgYXBwcm9hY2hlcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTAzNDUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDM0NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPiBvcgogICAgICAgICAgICAgICAgICAgIEJ5emFudGl1beKAlGZvciB5b3UgbXVzdCB0YWtlIHRoYXQgYWxzbyBpbnRvIHlvdXIKICAgICAgICAgICAgICAgICAgICByZWNrb25pbmfigJRidXQgdHVybnMgdXAgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDaGFsY2lzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDaGFsY2lzIj5DaGFsY2lzPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2FyYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYXJhIj5NZWdhcmE8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAganVzdCBhcyBoZSBkaWQgYXQgT3JldXMgbm90IGxvbmcgYWdvPyBXaWxsIGl0IGJlIGJldHRlciB0byBtYWtlIG91ciBzdGFuZCBoZXJlCiAgICAgICAgICAgICAgICAgICAgYW5kIGxldCB0aGUgd2FyIHNwcmVhZCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4sIG9yIHRvCiAgICAgICAgICAgICAgICAgICAgY29udHJpdmUgc29tZSBlbXBsb3ltZW50IGZvciBoaW0gYXdheSB5b25kZXI/IEkgcHJlZmVyIHRoZSBsYXR0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['8.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlLCBrbm93aW5nIGFuZAogICAgICAgICAgICAgICAgICAgIHdlaWdoaW5nIHRoZXNlIGZhY3RzLCBpdCBpcyB0aGUgZHV0eSBvZiBhbGwgb2YgeW91LCBub3Qgc3VyZWx5IHRvIHRyeSB0bwogICAgICAgICAgICAgICAgICAgIGRpc3BhcmFnZSBhbmQgYnJlYWsgdXAgdGhlIGZvcmNlIHRoYXQgRGlvcGl0aGVzIGlzIGRvaW5nIGhpcyBiZXN0IHRvIHByb3ZpZGUgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIHN0YXRlLCBidXQgdG8gcHJvdmlkZSBhbiBhZGRpdGlvbmFsIGZvcmNlIHlvdXJzZWx2ZXMgYW5kIHRvIGtlZXAgaGltIHdlbGwKICAgICAgICAgICAgICAgICAgICBzdXBwbGllZCB3aXRoIGZ1bmRzIGFuZCBpbiBldmVyeSB3YXkgdG8gZ2l2ZSBoaW0geW91ciBsb3lhbCBjby1vcGVyYXRpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igc3VwcG9zZSBzb21lb25lIHNob3VsZCBhc2sgUGhpbGlwLAogICAgICAgICAgICAgICAgICAgIOKAnFRlbGwgbWUsIHdoaWNoIHdvdWxkIHlvdSBwcmVmZXI/IFRoYXQgdGhlIHRyb29wcyBub3cgc2VydmluZyB3aXRoCiAgICAgICAgICAgICAgICAgICAgRGlvcGl0aGVzLCB3aGF0ZXZlciB0aGVpciBjaGFyYWN0ZXIgbWF5IGJl4oCd4oCUZm9yIEkgYW0gbm90CiAgICAgICAgICAgICAgICAgICAgZGlzY3Vzc2luZyB0aGF04oCU4oCcc2hvdWxkIHByb3NwZXIgYW5kIHdpbiBjcmVkaXQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCBncm93IGluIG51bWJlcnMgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBjby1vcGVyYXRpb24gb2YgdGhlIGdvdmVybm1lbnQsIG9yIHRoYXQgYSBmZXcgYWNjdXNlcnMgYW5kIGRldHJhY3RvcnMgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgY2F1c2UgdGhlbSB0byBiZSBicm9rZW4gdXAgYW5kIGRlc3Ryb3llZD/igJ0gSSB0aGluayBoZSB3b3VsZCBjaG9vc2UgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF0dGVyLiBBbmQgd2hhdCBQaGlsaXAgd291bGQgcHJheSB0aGUgZ29kcyB0byB2b3VjaHNhZmUgaGltLCBhcmUgc29tZSBvZiB1cwogICAgICAgICAgICAgICAgICAgIGhlcmUgdHJ5aW5nIHRvIGNvbXBhc3M/IEFuZCBkbyB5b3Ugc3RpbGwgYXNrIGhvdyBvdXIgaW50ZXJlc3RzIGFyZSBzYWNyaWZpY2VkCiAgICAgICAgICAgICAgICAgICAgZXZlcnl3aGVyZT8gPC90cmFuc2xhdGlvbj4="
translation['8.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SQogICAgICAgICAgICAgICAgICAgIHdhbnQgdGhlcmVmb3JlIHRvIGV4YW1pbmUgZnJhbmtseSB0aGUgcHJlc2VudCBzdGF0ZSBvZiBvdXIgYWZmYWlycywgYW5kIHRvIGZpbmQKICAgICAgICAgICAgICAgICAgICBvdXQgd2hhdCB3ZSBhcmUgZG9pbmcgb3Vyc2VsdmVzIG5vdyBhbmQgaG93IHdlIGFyZSBkZWFsaW5nIHdpdGggdGhlIHNpdHVhdGlvbi4KICAgICAgICAgICAgICAgICAgICBXZSByZWZ1c2UgdG8gcGF5IHdhci10YXhlcyBvciB0byBzZXJ2ZSBpbiBwZXJzb247IHdlIGNhbm5vdCBrZWVwIG91ciBoYW5kcyBvZmYKICAgICAgICAgICAgICAgICAgICB0aGUgcHVibGljIGZ1bmRzOyB3ZSB3aWxsIG5vdCBwYXkgRGlvcGl0aGVzIHRoZSBhbGxvd2FuY2VzIGFncmVlZCB1cG9uLCBub3IKICAgICAgICAgICAgICAgICAgICBzYW5jdGlvbiB0aGUgc3VtcyB0aGF0IGhlIHJhaXNlcyBmb3IgaGltc2VsZjsgPC90cmFuc2xhdGlvbj4="
translation['8.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgd2UgZ3J1bWJsZSBhbmQgY3JpdGljaXplIGhpcyBtZXRob2RzLCBhbmQgYXNrIHdoYXQgaGUgaW50ZW5kcyB0byBkbywgYW5kCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoYXQgc29ydCBvZiB0aGluZzsgYW5kIHlldCwgd2hpbGUgbWFpbnRhaW5pbmcgdGhhdCBhdHRpdHVkZSwgd2UgcmVmdXNlIHRvCiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybSBvdXIgb3duIHRhc2tzOyB3aXRoIG91ciBsaXBzIHdlIHByYWlzZSB0aG9zZSB3aG9zZSBzcGVlY2hlcyBhcmUgd29ydGh5CiAgICAgICAgICAgICAgICAgICAgb2Ygb3VyIGNpdHksIGJ1dCBvdXIgYWN0aW9ucyBzZXJ2ZSBvbmx5IHRvIGVuY291cmFnZSB0aGVpciBvcHBvbmVudHMuIDwvdHJhbnNsYXRpb24+"
translation['8.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHlvdSBoYXZlIGEgaGFiaXQgb2YgYXNraW5nIGEgc3BlYWtlciBvbiBldmVyeQogICAgICAgICAgICAgICAgICAgIG9jY2FzaW9uLCDigJxXaGF0IHRoZW4gbXVzdCBiZSBkb25lP+KAnTsgYnV0IEkgcHJlZmVyIHRvIGFzawogICAgICAgICAgICAgICAgICAgIHlvdSwg4oCcV2hhdCB0aGVuIG11c3QgYmUgc2FpZD/igJ0gQmVjYXVzZSwgaWYgeW91IGFyZSBub3QgZ29pbmcKICAgICAgICAgICAgICAgICAgICB0byBwYXkgeW91ciBjb250cmlidXRpb25zLCBub3Igc2VydmUgaW4gcGVyc29uLCBub3Iga2VlcCB5b3VyIGhhbmRzIG9mZiB0aGUKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgZnVuZHMsIG5vciBncmFudCBEaW9waXRoZXMgaGlzIGFsbG93YW5jZXMsIG5vciBzYW5jdGlvbiB0aGUgc3VtcyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgcmFpc2VzIGZvciBoaW1zZWxmLCBub3IgY29uc2VudCB0byBwZXJmb3JtIHlvdXIgb3duIHRhc2tzLCBJIGhhdmUgbm90aGluZyB0bwogICAgICAgICAgICAgICAgICAgIHNheS4gWW91IHdobyBoYXZlIGdvbmUgc28gZmFyIGluIGdyYW50aW5nIGxpY2Vuc2UgdG8gdGhvc2Ugd2hvc2Ugb2JqZWN0IGlzCiAgICAgICAgICAgICAgICAgICAgZmF1bHQtZmluZGluZyBhbmQgY2FsdW1ueSwgdGhhdCBldmVuIGFib3V0IHdoYXQgdGhleSBzYXkgaGUgaXMgZ29pbmcgdG8gZG8sIGV2ZW4KICAgICAgICAgICAgICAgICAgICBvbiB0aGF0IGdyb3VuZCB0aGV5IGFjY3VzZSBoaW0gaW4gYWR2YW5jZSBhbmQgeW91IGxpc3RlbiB0byB0aGVt4oCUd2hhdAogICAgICAgICAgICAgICAgICAgIGNhbiBhbnlvbmUgc2F5PyA8L3RyYW5zbGF0aW9uPg=="
translation['8.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBzb21lIG9mIHlvdSBvdWdodCB0byBiZSB0b2xkIHRoZSBwb3NzaWJsZSByZXN1bHQgb2YgYWxsIHRoaXMuIEkgc2hhbGwKICAgICAgICAgICAgICAgICAgICBzcGVhayBmcmVlbHksIGZvciBpbmRlZWQgSSBjb3VsZCBub3Qgc3BlYWsgb3RoZXJ3aXNlLiBBbGwgdGhlIGdlbmVyYWxzIHRoYXQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGV2ZXIgc2V0IHNhaWwgZnJvbSB5b3VyIGxhbmTigJRpZiBJIGFtIHdyb25nLCBJIHN1Ym1pdCBteXNlbGYgdG8gYW55CiAgICAgICAgICAgICAgICAgICAgcGVuYWx0eeKAlHJhaXNlIG1vbmV5IGZyb20gdGhlIENoaWFucywgZnJvbSB0aGUgRXJ5dGhyYWVhbnMsIGZyb20KICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBwZW9wbGUgdGhleSBjYW4sIEkgbWVhbiBvZiB0aGUgR3JlZWtzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMjk0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIyOTQiPkFzaWEgTWlub3I8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['8.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5HZW5lcmFscyB3aXRoCiAgICAgICAgICAgICAgICAgICAgb25seSBvbmUgb3IgdHdvIHNoaXBzIHJhaXNlIGxlc3M7IHRob3NlIHdpdGggYSBsYXJnZXIgZmxlZXQgcmFpc2UgbW9yZS4gQWxzbwogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBwYXkgZG8gbm90IHBheSB0aGUgc3VtLCBiZSBpdCBsYXJnZSBvciBzbWFsbCwgZm9yIG5vdGhpbmc7IHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgbm90IHN1Y2ggbWFkbWVuLiBObywgdGhleSBwdXJjaGFzZSBmb3IgdGhlIG1lcmNoYW50cyBzYWlsaW5nIGZyb20gdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgaGFyYm9ycyBpbW11bml0eSBmcm9tIGluanVyeSBvciByb2JiZXJ5LCBvciBhIHNhZmUgY29uZHVjdCBmb3IgdGhlaXIgb3duIHNoaXBzLAogICAgICAgICAgICAgICAgICAgIG9yIHNvbWV0aGluZyBvZiB0aGF0IHNvcnQuIFRoZXkgc2F5IHRoYXQgdGhleSBhcmUgZ3JhbnRpbmcKICAgICAgICAgICAgICAgICAgICDigJxiZW5ldm9sZW5jZXMu4oCdIFRoYXQgaXMgdGhlIG5hbWUgZm9yIHRoZXNlIGV4YWN0aW9ucy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gdG9vIGluIHRoaXMgY2FzZSwgd2hpbGUgRGlvcGl0aGVzCiAgICAgICAgICAgICAgICAgICAgaGFzIGEgZm9yY2Ugd2l0aCBoaW0sIGl0IGlzIHBlcmZlY3RseSBwbGFpbiB0aGF0IGFsbCB0aGVzZSBwZW9wbGUgd2lsbCBwYXkgdXAuCiAgICAgICAgICAgICAgICAgICAgRm9yIHdoZXJlIGVsc2UgZG8geW91IHN1cHBvc2UgdGhhdCBoZSBsb29rcyBmb3IgdGhlIG1haW50ZW5hbmNlIG9mIGhpcyB0cm9vcHMsCiAgICAgICAgICAgICAgICAgICAgaWYgaGUgZ2V0cyBub3RoaW5nIGZyb20geW91IGFuZCBoYXMgbm8gcHJpdmF0ZSBmb3J0dW5lIHRvIGZ1cm5pc2ggdGhlaXIgcGF5PyBUbwogICAgICAgICAgICAgICAgICAgIHRoZSBza3k/IE5vLCBpbmRlZWQ7IGl0IGlzIGZyb20gd2hhdCBoZSBjYW4gY29sbGVjdCBvciBiZWcgb3IgYm9ycm93IHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBrZWVwcyB0aGluZ3MgZ29pbmcuIDwvdHJhbnNsYXRpb24+"
translation['8.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0aG9zZSB3aG8gZGVub3VuY2UgaGltCiAgICAgICAgICAgICAgICAgICAgdG8geW91IGFyZSBzaW1wbHkgd2FybmluZyBldmVyeWJvZHkgbm90IHRvIGdyYW50IGhpbSBhIHBlbm55LCBiZWNhdXNlIGhlIHdpbGwgYmUKICAgICAgICAgICAgICAgICAgICBwdW5pc2hlZCBmb3Igd2hhdCBoZSBpbnRlbmRzIHRvIGRvLCBhcGFydCBmcm9tIHdoYXQgaGUgaGFzIGRvbmUgb3Igd2hhdCBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBhY3F1aXJlZCBmb3IgaGltc2VsZi4gVGhhdCBpcyB3aGF0IHRoZXkgbWVhbiB3aGVuIHRoZXkgY3J5LCDigJxIZQogICAgICAgICAgICAgICAgICAgIGludGVuZHMgdG8gYmVzaWVnZSB0aGUgdG93bnMhIEhlIGlzIGJldHJheWluZyB0aGUgR3JlZWtzIeKAnSBEbyBhbnkgb2YKICAgICAgICAgICAgICAgICAgICB0aGVzZSBnZW50bGVtZW4gcmVhbGx5IGNhcmUgYWJvdXQgdGhlIEFzaWF0aWMgR3JlZWtzP+KAlGFuZCB5ZXQgdGhleQogICAgICAgICAgICAgICAgICAgIHdvdWxkLCBJIGV4cGVjdCwgYmUgYmV0dGVyIGNoYW1waW9ucyBvZiBvdGhlciBjb3VudHJpZXMgdGhhbiBvZiB0aGVpciBvd24uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0LCB0b28sIGlzIHRoZSBtZWFuaW5nIG9mIHRoZSBkaXNwYXRjaAogICAgICAgICAgICAgICAgICAgIG9mIGEgc2Vjb25kIGdlbmVyYWwgdG8gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgRm9yIGlmIERpb3BpdGhlcyBpcyBhY3Rpbmcgb3V0cmFnZW91c2x5IGluIGRldGFpbmluZyB0aGUgbWVyY2hhbnRtZW4sIGEgbm90ZSwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhIGJyaWVmIG5vdGUsIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgcHV0IGEgc3RvcCB0byBhbGwgdGhpcyBhdCBvbmNlOyBhbmQgdGhlcmUgYXJlIHRoZSBsYXdzLCB3aGljaCBkaXJlY3QgdXMgdG8KICAgICAgICAgICAgICAgICAgICBpbXBlYWNoIHN1Y2ggb2ZmZW5kZXJzLCBidXQgbm90LCBvZiBjb3Vyc2UsIHRvIG1vdW50IGd1YXJkIG92ZXIgb3Vyc2VsdmVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pLmUuIHRvIGtlZXAgYSBqZWFsb3VzIHdhdGNoIG92ZXIgb3VyIG93bgogICAgICAgICAgICAgICAgICAgICAgICBvZmZpY2Vycy48L25vdGU+IGF0IHN1Y2ggYSBjb3N0IGFuZCB3aXRoIHNvIGxhcmdlIGEgZmxlZXQ7IGZvciB0aGF0IHdvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgdGhlIGhlaWdodCBvZiBtYWRuZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5ObywgYWdhaW5zdCBvdXIKICAgICAgICAgICAgICAgICAgICBlbmVtaWVzLCB3aG8gYXJlIG5vdCBhbWVuYWJsZSB0byB0aGUgbGF3cywgaXQgaXMgcmlnaHQgYW5kIG5lY2Vzc2FyeSB0byBtYWludGFpbgogICAgICAgICAgICAgICAgICAgIHRyb29wcywgdG8gc2VuZCBvdXQgZmxlZXRzLCBhbmQgdG8gcmFpc2UgZnVuZHM7IGJ1dCBhZ2FpbnN0IG91cnNlbHZlcyB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgcmVzb3VyY2VzLCBhIGRlY3JlZSwgYW4gaW1wZWFjaG1lbnQsIGFuZCBhIGRpc3BhdGNoLWJvYXQuIFRob3NlIGFyZSB3aGF0CiAgICAgICAgICAgICAgICAgICAgcmlnaHQtbWluZGVkIGNpdGl6ZW5zIHdvdWxkIGVtcGxveTsgbWFsaWduYW50cywgYmVudCBvbiB0aGUgcnVpbiBvZiB0aGUgU3RhdGUsCiAgICAgICAgICAgICAgICAgICAgd291bGQgZG8gYXMgdGhlc2UgbWVuIGFyZSBkb2luZy4gPC90cmFuc2xhdGlvbj4="
translation['8.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXJlIGFyZSBzb21lIG1lbiBvZiB0aGlzIHR5cGUgYW1vbmcgeW91LCB0aG91Z2ggYmFkIGVub3VnaCwgaXMgbm90IHRoZSByZWFsCiAgICAgICAgICAgICAgICAgICAgZXZpbDsgYnV0IHlvdSB3aG8gc2l0IGhlcmUgYXJlIGJ5IG5vdyBpbiBzdWNoIGEgbW9vZCB0aGF0IGlmIGFueW9uZSBjb21lcwogICAgICAgICAgICAgICAgICAgIGZvcndhcmQgYW5kIGFzc2VydHMgdGhhdCB0aGUgY2F1c2Ugb2YgYWxsIG91ciBldmlsIGlzIERpb3BpdGhlcyBvciBDaGFyZXMgb3IKICAgICAgICAgICAgICAgICAgICBBcmlzdG9waG9uLCBvciBhbnkgb3RoZXIgY2l0aXplbiB0aGF0IGhlIGhhcHBlbnMgdG8gbmFtZSwgeW91IGF0IG9uY2UgYWdyZWUgYW5kCiAgICAgICAgICAgICAgICAgICAgYXBwbGF1ZCB0aGUgdHJ1dGggb2YgdGhlIHJlbWFyay4gPC90cmFuc2xhdGlvbj4="
translation['8.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgYW55b25lCiAgICAgICAgICAgICAgICAgICAgcmlzZXMgYW5kIHRlbGxzIHlvdSB0aGUgcmVhbCB0cnV0aCBhbmQgc2F5cywg4oCcTm9uc2Vuc2UsIEF0aGVuaWFucyEgVGhlCiAgICAgICAgICAgICAgICAgICAgY2F1c2Ugb2YgYWxsIHRoZXNlIGV2aWxzIGFuZCBhbGwgdGhlc2UgdHJvdWJsZXMgaXMgUGhpbGlwLCBmb3IgaWYgaGUgaGFkIGtlcHQKICAgICAgICAgICAgICAgICAgICBxdWlldCwgb3VyIGNpdHkgd291bGQgaGF2ZSBiZWVuIGZyZWUgZnJvbSB0cm91YmxlLOKAnSB5b3UgY2Fubm90IGdhaW5zYXkKICAgICAgICAgICAgICAgICAgICBpdCwgYnV0IHlvdSBzZWVtIHRvIG1lIHRvIGJlIHZleGVkIGFuZCB0byBmZWVsIHRoYXQgeW91IGFyZSwgYXMgaXQgd2VyZSwgbG9zaW5nCiAgICAgICAgICAgICAgICAgICAgc29tZXRoaW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXMgdG8gdGhlIHJlYXNvbiBmb3IKICAgICAgICAgICAgICAgICAgICB0aGlz4oCUYW5kIGluIEhlYXZlbidzIG5hbWUsIHdoZW4gSSBhbSBwbGVhZGluZyBmb3IgeW91ciBiZXN0IGludGVyZXN0cywKICAgICAgICAgICAgICAgICAgICBhbGxvdyBtZSB0byBzcGVhayBmcmVlbHnigJRzb21lIG9mIG91ciBwb2xpdGljaWFucyBoYXZlIGJlZW4gdHJhaW5pbmcKICAgICAgICAgICAgICAgICAgICB5b3UgdG8gYmUgdGhyZWF0ZW5pbmcgYW5kIGludHJhY3RhYmxlIGluIHRoZSBtZWV0aW5ncyBvZiB0aGUgQXNzZW1ibHksIGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIHByZXBhcmluZyBmb3Igd2FyLCBjYXJlbGVzcyBhbmQgY29udGVtcHRpYmxlLiBJZiwgdGhlbiwgdGhlIGN1bHByaXQgbmFtZWQgaXMKICAgICAgICAgICAgICAgICAgICBzb21lb25lIG9uIHdob20geW91IGtub3cgeW91IGNhbiBsYXkgaGFuZHMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB5b3UgYWdyZWUgYW5kIGFzc2VudDsgYnV0IGlmIGl0IGlzIHNvbWVvbmUgd2hvbSB5b3UKICAgICAgICAgICAgICAgICAgICBjYW5ub3QgY2hhc3Rpc2UgdW5sZXNzIHlvdSBvdmVyY29tZSBoaW0gYnkgZm9yY2Ugb2YgYXJtcywgeW91IGZpbmQgeW91cnNlbHZlcwogICAgICAgICAgICAgICAgICAgIGhlbHBsZXNzLCBJIHN1cHBvc2UsIGFuZCB0byBiZSBwcm92ZWQgc28gY2F1c2VzIHlvdSBhbm5veWFuY2UuIDwvdHJhbnNsYXRpb24+"
translation['8.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgb3VnaHQgdG8gaGF2ZSBiZWVuIHRoZSByZXZlcnNlLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBhbGwgeW91ciBwb2xpdGljaWFucwogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoYXZlIHRyYWluZWQgeW91IHRvIGJlIGdlbnRsZSBhbmQgaHVtYW5lIGluIHRoZSBBc3NlbWJseSwgZm9yIHRoZXJlIHlvdQogICAgICAgICAgICAgICAgICAgIGFyZSBkZWFsaW5nIHdpdGggcmlnaHRzIHRoYXQgY29uY2VybiB5b3Vyc2VsdmVzIGFuZCB5b3VyIGFsbGllcywgYnV0IGluCiAgICAgICAgICAgICAgICAgICAgcHJlcGFyaW5nIGZvciB3YXIgdGhleSBzaG91bGQgaGF2ZSBtYWRlIHlvdSB0aHJlYXRlbmluZyBhbmQgaW50cmFjdGFibGUsIGJlY2F1c2UKICAgICAgICAgICAgICAgICAgICB0aGVyZSB5b3UgYXJlIHBpdHRlZCBhZ2FpbnN0IHlvdXIgZW5lbWllcyBhbmQgcml2YWxzLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBpdCBpcywgYnkgcGVyc3Vhc2l2ZSBhcnRzIGFuZCBjYXJlc3NlcyB0aGV5IGhhdmUgYnJvdWdodCB5b3UgdG8KICAgICAgICAgICAgICAgICAgICBzdWNoIGEgZnJhbWUgb2YgbWluZCB0aGF0IGluIHlvdXIgYXNzZW1ibGllcyB5b3UgYXJlIGVsYXRlZCBieSB0aGVpciBmbGF0dGVyeQogICAgICAgICAgICAgICAgICAgIGFuZCBoYXZlIG5vIGVhciBidXQgZm9yIGNvbXBsaW1lbnRzLCB3aGlsZSBpbiB5b3VyIHBvbGljeSBhbmQgeW91ciBwcmFjdGljZSB5b3UKICAgICAgICAgICAgICAgICAgICBhcmUgYXQgdGhpcyBtb21lbnQgcnVubmluZyB0aGUgZ3JhdmVzdCByaXNrcy4gRm9yIHRlbGwgbWUsIGluIEhlYXZlbidzIG5hbWUsIGlmCiAgICAgICAgICAgICAgICAgICAgdGhlIEdyZWVrcyBzaG91bGQgY2FsbCB5b3UgdG8gYWNjb3VudCBmb3IgdGhlIG9wcG9ydHVuaXRpZXMgdGhhdCB5b3VyCiAgICAgICAgICAgICAgICAgICAgY2FyZWxlc3NuZXNzIGhhcyBhbHJlYWR5IHRocm93biBhd2F5LCBhbmQgc2hvdWxkIHF1ZXN0aW9uIHlvdSB0aHVzOiA8L3RyYW5zbGF0aW9uPg=="
translation['8.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz7igJxNZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBkbyB5b3Ugc2VuZCB1cyBlbWJhc3NpZXMgb24gZXZlcnkgb2NjYXNpb24gdG8gZXhwbGFpbgogICAgICAgICAgICAgICAgICAgIGhvdyBQaGlsaXAgaXMgcGxvdHRpbmcgYWdhaW5zdCB1cyBhbmQgYWxsIHRoZSBvdGhlciBHcmVla3MsIGFuZCBob3cgd2UgbXVzdCBiZQogICAgICAgICAgICAgICAgICAgIG9uIG91ciBndWFyZCBhZ2FpbnN0IHRoYXQgbWFuLCBhbmQgYWxsIHRoYXQgc29ydCBvZgogICAgICAgICAgICAgICAgICAgIHRoaW5nP+KAneKAlO+8iHdlIGFyZSBib3VuZCB0byBhZG1pdCBpdCBhbmQgcGxlYWQgZ3VpbHR5LAogICAgICAgICAgICAgICAgICAgIGZvciB0aGF0IGlzIGp1c3Qgd2hhdCB3ZSBkb++8ieKAlOKAnEFuZCB5ZXQsIHlvdSBtb3N0CiAgICAgICAgICAgICAgICAgICAgZnV0aWxlIG9mIG1vcnRhbHMsIHdoZW4gdGhhdCBtYW4gaGFzIGJlZW4gb3V0IG9mIHNpZ2h0PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFzIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gOC4yIiB2YWxpZD0ieWVzIj5EZW0uIDguMjwvYmlibD4sIGhlIGFsbHVkZXMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgUGhpbGlwJ3MgYWJzZW5jZSBvbiBoaXMgVGhyYWNpYW4gY2FtcGFpZ24uPC9ub3RlPiBmb3IgdGVuIG1vbnRocywgY3V0IG9mZgogICAgICAgICAgICAgICAgICAgIGZyb20gYWxsIGNoYW5jZSBvZiByZXR1cm5pbmcgaG9tZSBieSBkaXNlYXNlLCBieSB3aW50ZXIsIGFuZCBieSB3YXIsIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gOC4yIiB2YWxpZD0ieWVzIj5EZW0uIDguMjwvYmlibD4sIGhlIGFsbHVkZXMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgUGhpbGlwJ3MgYWJzZW5jZSBvbiBoaXMgVGhyYWNpYW4gY2FtcGFpZ24uPC90cmFuc2xhdGlvbj4="
translation['8.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5oYXZlIHlvdSBuZWl0aGVyIGxpYmVyYXRlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gbm9yIHJlZ2FpbmVkIGFueSBvZiB5b3VyIGxvc3QKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9ucz8gT24gdGhlIG90aGVyIGhhbmQsIHdoaWxlIHlvdSBzdGF5IGF0IGhvbWUsIGF0IGxlaXN1cmUgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgaGVhbHRo4oCd4oCU77yIaWYgaW5kZWVkIHRoZXkgY291bGQgc2F5IHRoYXQgbWVuIHdobwogICAgICAgICAgICAgICAgICAgIGJlaGF2ZSB0aHVzIGFyZSBpbiBoZWFsdGjvvInigJTigJxQaGlsaXAgaGFzIHNldCB1cCB0d28KICAgICAgICAgICAgICAgICAgICBkZXNwb3RzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiwgZW50cmVuY2hpbmcgb25lCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgb3ZlciBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiBhbmQgdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgYXMgYSBtZW5hY2UgdG8gU2NpYXRodXM7IDwvdHJhbnNsYXRpb24+"
translation['8.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5idXQKICAgICAgICAgICAgICAgICAgICB5b3XigJRoYXZlIHlvdSBuZXZlciBjbGVhcmVkIGF3YXkgdGhlc2Ugb2JzdGFjbGVzLCBldmVuIGlmIHlvdSBoYWQgbm8KICAgICAgICAgICAgICAgICAgICBmdXJ0aGVyIGFtYml0aW9ucywgYW5kIGhhdmUgeW91IHRhbWVseSBzdWJtaXR0ZWQ/IFVuZG91YnRlZGx5IHlvdSBoYXZlIHN0b29kCiAgICAgICAgICAgICAgICAgICAgYXNpZGUgZnJvbSBoaXMgcGF0aCBhbmQgbWFkZSBpdCBhYnVuZGFudGx5IGNsZWFyIHRoYXQsIHdlcmUgaGUgdG8gZGllIHRlbiB0aW1lcwogICAgICAgICAgICAgICAgICAgIG92ZXIsIHlvdSBhdCBsZWFzdCB3aWxsIG1ha2Ugbm8gZnVydGhlciBtb3ZlLiBUaGVuIHdoeSBkbyB5b3UgcGVzdGVyIHVzIHdpdGgKICAgICAgICAgICAgICAgICAgICB5b3VyIGVtYmFzc2llcyBhbmQgeW91ciBjb21wbGFpbnRzP+KAnSBJZiB0aGVzZSBhcmUgdGhlaXIgd29yZHMsIHdoYXQKICAgICAgICAgICAgICAgICAgICBhcmUgd2UgdG8gc2F5LCBBdGhlbmlhbnM/IEhvdyBhcmUgd2UgdG8gYW5zd2VyPyBGb3IgbXkgcGFydCwgSSBjYW5ub3QgdGVsbC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoZXJlCiAgICAgICAgICAgICAgICAgICAgYXJlIHNvbWUgd2hvIHRoaW5rIHRoZXkgY29uZnV0ZSBhIHNwZWFrZXIgdGhlIG1vbWVudCB0aGV5IGFzaywg4oCcV2hhdAogICAgICAgICAgICAgICAgICAgIHRoZW4gb3VnaHQgd2UgdG8gZG8/4oCdIFRvIHRoZXNlIEkgd2lsbCBnaXZlIHRoZSBmYWlyZXN0IGFuZCB0cnVlc3QKICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IG5vdCB3aGF0IHlvdSBhcmUgZG9pbmcgbm93LiBJIHdpbGwgbm90LCBob3dldmVyLCBzaHJpbmsgZnJvbSBnb2luZwogICAgICAgICAgICAgICAgICAgIGNhcmVmdWxseSBpbnRvIGRldGFpbHM7IG9ubHkgdGhleSBtdXN0IGJlIGFzIHdpbGxpbmcgdG8gYWN0IGFzIHRoZXkgYXJlIGVhZ2VyIHRvCiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24uIDwvdHJhbnNsYXRpb24+"
translation['8.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5GaXJzdCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IG11c3QgZml4IHRoaXMgZmlybWx5IGluIHlvdXIKICAgICAgICAgICAgICAgICAgICBtaW5kcywgdGhhdCBQaGlsaXAgaXMgYXQgd2FyIHdpdGggdXMgYW5kIGhhcyBicm9rZW4gdGhlIHBlYWNlLiBZZXMsIGxldCB0aGVyZSBiZQogICAgICAgICAgICAgICAgICAgIG5vIG1vcmUgd3JhbmdsaW5nIG92ZXIgdGhhdCBxdWVzdGlvbi4gSGUgaXMgaWxsLWRpc3Bvc2VkIGFuZCBob3N0aWxlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHdob2xlIGNpdHkgYW5kIHRvIHRoZSB2ZXJ5IHNvaWwgb24gd2hpY2ggdGhlIGNpdHkgc3RhbmRzLCA8L3RyYW5zbGF0aW9uPg=="
translation['8.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQsIEkgd2lsbCBhZGQsIHRvIGV2ZXJ5IG1hbiBpbiB0aGUgY2l0eSwgZXZlbiB0bwogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBpbWFnaW5lIHRoYXQgdGhleSBzdGFuZCBoaWdoZXN0IGluIGhpcyBnb29kIGdyYWNlcy4gSWYgdGhleSBkb3VidCBpdCwKICAgICAgICAgICAgICAgICAgICBsZXQgdGhlbSBsb29rIGF0IEV1dGh5Y3JhdGVzIGFuZCBMYXN0aGVuZXMsIHRoZSBPbHludGhpYW5zLCB3aG8gdGhvdWdodCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2VyZSBzdWNoIGJvc29tLWZyaWVuZHMgb2YgaGlzLCBhbmQgdGhlbiwgd2hlbiB0aGV5IGhhZCBiZXRyYXllZCB0aGVpciBjaXR5LCBtZXQKICAgICAgICAgICAgICAgICAgICB0aGUgbW9zdCBpZ25vbWluaW91cyBmYXRlIG9mIGFsbC4gVGhlIGNoaWVmIG9iamVjdCwgaG93ZXZlciwgb2YgaGlzIGFybXMgYW5kIGhpcwogICAgICAgICAgICAgICAgICAgIGRpcGxvbWFjeSBpcyBvdXIgZnJlZSBjb25zdGl0dXRpb247IG9uIG5vdGhpbmcgaW4gdGhlIHdvcmxkIGlzIGhlIG1vcmUgYmVudCB0aGFuCiAgICAgICAgICAgICAgICAgICAgb24gaXRzIGRlc3RydWN0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaXMgaW4gYSB3YXkgbmF0dXJhbAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgc2hvdWxkIGFjdCB0aHVzLiBGb3IgaGUga25vd3MgZm9yIGNlcnRhaW4gdGhhdCBldmVuIGlmIGhlIG1hc3RlcnMgYWxsCiAgICAgICAgICAgICAgICAgICAgZWxzZSwgaGlzIHBvd2VyIHdpbGwgYmUgcHJlY2FyaW91cyBhcyBsb25nIGFzIHlvdSByZW1haW4gYSBkZW1vY3JhY3k7IGJ1dCBpZgogICAgICAgICAgICAgICAgICAgIGV2ZXIgaGUgbWVldHMgd2l0aCBvbmUgb2YgdGhlIG1hbnkgbWlzY2hhbmNlcyB0byB3aGljaCBtYW5raW5kIGlzIGxpYWJsZSwgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvcmNlcyB0aGF0IGFyZSBub3cgdW5kZXIgcmVzdHJhaW50IHdpbGwgYmUgYXR0cmFjdGVkIHRvIHlvdXIgc2lkZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbmF0dXJlIGhhcyBub3QgZXF1aXBwZWQgeW91IHRvIHNlZWsKICAgICAgICAgICAgICAgICAgICBhZ2dyYW5kaXplbWVudCBhbmQgc2VjdXJlIGVtcGlyZSwgYnV0IHlvdSBhcmUgY2xldmVyIGF0IHRod2FydGluZyBhbm90aGVyJ3MKICAgICAgICAgICAgICAgICAgICBkZXNpZ25zIGFuZCB3cmVzdGluZyBmcm9tIGhpbSBoaXMgZ2FpbnMsIGFuZCBxdWljayB0byBjb25mb3VuZCB0aGUgcGxvdHMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYW1iaXRpb3VzIGFuZCB0byB2aW5kaWNhdGUgdGhlIGZyZWVkb20gb2YgYWxsIG1hbmtpbmQuIFRoZXJlZm9yZSBoZSBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgIHdhbnQgdG8gaGF2ZSB0aGUgQXRoZW5pYW4gdHJhZGl0aW9uIG9mIGxpYmVydHkgd2F0Y2hpbmcgdG8gc2VpemUgZXZlcnkgY2hhbmNlCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBoaW1zZWxmLiBGYXIgZnJvbSBpdCEgTm9yIGlzIGhpcyByZWFzb25pbmcgaGVyZSBlaXRoZXIgZmF1bHR5IG9yIGlkbGUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzLCB0aGVuLCBpcyB0aGUgZmlyc3QgdGhpbmcgbmVlZGZ1bCwgdG8KICAgICAgICAgICAgICAgICAgICByZWNvZ25pemUgaW4gUGhpbGlwIHRoZSBpbnZldGVyYXRlIGVuZW15IG9mIGNvbnN0aXR1dGlvbmFsIGdvdmVybm1lbnQgYW5kCiAgICAgICAgICAgICAgICAgICAgZGVtb2NyYWN5LCBmb3IgdW5sZXNzIHlvdSBhcmUgaGVhcnRpbHkgcGVyc3VhZGVkIG9mIHRoaXMsIHlvdSB3aWxsIG5vdCBjb25zZW50CiAgICAgICAgICAgICAgICAgICAgdG8gdGFrZSB5b3VyIHBvbGl0aWNzIHNlcmlvdXNseS4gWW91ciBzZWNvbmQgbmVlZCBpcyB0byBjb252aW5jZSB5b3Vyc2VsdmVzIHRoYXQKICAgICAgICAgICAgICAgICAgICBhbGwgaGlzIGFjdGl2aXR5IGFuZCBhbGwgaGlzIG9yZ2FuaXphdGlvbiBpcyBwcmVwYXJpbmcgdGhlIHdheSBmb3IgYW4gYXR0YWNrIG9uCiAgICAgICAgICAgICAgICAgICAgb3VyIGNpdHksIGFuZCB0aGF0IHdoZXJlIGFueSByZXNpc3RhbmNlIGlzIG9mZmVyZWQgdG8gaGltLCB0aGF0IHJlc2lzdGFuY2UgaXMKICAgICAgICAgICAgICAgICAgICBvdXIgZ2Fpbi4gPC90cmFuc2xhdGlvbj4="
translation['8.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm8gbWFuIGlzIHNvIHNpbXBsZSBhcyB0bwogICAgICAgICAgICAgICAgICAgIGJlbGlldmUgdGhhdCB0aG91Z2ggUGhpbGlwIGNvdmV0cyB0aGVzZSB3cmV0Y2hlZCBvYmplY3RzIGluIFRocmFjZeKAlGZvcgogICAgICAgICAgICAgICAgICAgIHdoYXQgZWxzZSBjYW4gb25lIGNhbGwgRHJvbmdpbHVzIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDcxMCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzEwIj5DYWJ5bGU8L3BsYWNlTmFtZT4gYW5kIE1hc3RpcmEgYW5kIHRoZSBvdGhlciBwbGFjZXMgdGhhdCBoZSBpcyBub3cKICAgICAgICAgICAgICAgICAgICBvY2N1cHlpbmcgYW5kIGVxdWlwcGluZz/igJRhbmQgdGhvdWdoIGhlIGVuZHVyZXMgdG9pbCBhbmQgd2ludGVyIHN0b3JtcwogICAgICAgICAgICAgICAgICAgIGFuZCBkZWFkbHkgcGVyaWwgZm9yIHRoZSBwcml2aWxlZ2Ugb2YgdGFraW5nIHRoZW0sIDwvdHJhbnNsYXRpb24+"
translation['8.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz55ZXQgaGUgZG9lcyBub3QgY292ZXQgdGhlIEF0aGVuaWFuIGhhcmJvcnMgYW5kIGRvY2t5YXJkcyBhbmQKICAgICAgICAgICAgICAgICAgICB3YXItZ2FsbGV5cyBhbmQgc2lsdmVyIG1pbmVzIGFuZCB0aGUgbGlrZSBzb3VyY2VzIG9mIHdlYWx0aCwgYnV0IHdpbGwgYWxsb3cgeW91CiAgICAgICAgICAgICAgICAgICAgdG8gcmV0YWluIHRoZW0sIHdoaWxlIGhlIHdpbnRlcnMgaW4gdGhhdCBwdXJnYXRvcnkgZm9yIHRoZSBzYWtlIG9mIHRoZSByeWUgYW5kCiAgICAgICAgICAgICAgICAgICAgbWlsbGV0IG9mIHRoZSBUaHJhY2lhbiBzdG9yZS1waXRzLiBJdCBpcyBub3Qgc28sIGJ1dCBpdCBpcyB0byB3aW4gdGhlc2UgcHJpemVzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBkZXZvdGVzIGhpcyBhY3Rpdml0aWVzIHRvIGFsbCB0aG9zZSBvdGhlciBvYmplY3RzLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0LCB0aGVuLCBpcyB0aGUgdGFzayBvZiBzb3VuZCBwYXRyaW90cz8gVG8ga25vdwogICAgICAgICAgICAgICAgICAgIGFuZCByZWFsaXplIGFsbCB0aGlzLCB0byBzaGFrZSBvZmYgb3VyIG91dHJhZ2VvdXMgYW5kIGluY3VyYWJsZSBzbG90aGZ1bG5lc3MsIHRvCiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0ZSBmdW5kcywgdG8gY2FsbCB1cG9uIG91ciBhbGxpZXMsIGFuZCB0byBwcm92aWRlIGFuZCBhcnJhbmdlIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBwZXJtYW5lbnQgdXBrZWVwIG9mIG91ciBleGlzdGluZyBhcm15LCBzbyB0aGF0IGp1c3QgYXMgUGhpbGlwIGhhcyBhIGZvcmNlIHJlYWR5CiAgICAgICAgICAgICAgICAgICAgdG8gYXR0YWNrIGFuZCBlbnNsYXZlIGFsbCB0aGUgR3JlZWsgc3RhdGVzLCBzbyB5b3UgbWF5IGhhdmUgb25lIHJlYWR5IHRvIHByb3RlY3QKICAgICAgICAgICAgICAgICAgICBhbmQgYXNzaXN0IHRoZW0gYWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgeW91IHRydXN0IHRvIG1lcmUKICAgICAgICAgICAgICAgICAgICBleHBlZGl0aW9ucywgeW91IGNhbiBuZXZlciBnYWluIGFueSBvZiB5b3VyIGVzc2VudGlhbCBvYmplY3RzLiBZb3UgbXVzdCBmaXJzdAogICAgICAgICAgICAgICAgICAgIGxldnkgYSBmb3JjZSBhbmQgcHJvdmlkZSBmb3IgaXRzIG1haW50ZW5hbmNlLCBhbmQgYXBwb2ludCBwYXltYXN0ZXJzIGFuZCBjbGVya3MsCiAgICAgICAgICAgICAgICAgICAgYW5kIGFycmFuZ2UgdGhhdCB0aGVyZSBzaGFsbCBiZSB0aGUgc3RyaWN0ZXN0IHdhdGNoIGtlcHQgb3ZlciB5b3VyIGV4cGVuZGl0dXJlLAogICAgICAgICAgICAgICAgICAgIGFuZCBhZnRlcndhcmRzIHlvdSBtdXN0IGRlbWFuZCBmcm9tIHlvdXIgcGF5bWFzdGVycyBhbiBhY2NvdW50IG9mIHRoZWlyIG1vbmV5cywKICAgICAgICAgICAgICAgICAgICBhbmQgZnJvbSB0aGUgZ2VuZXJhbCBhbiBhY2NvdW50IG9mIGhpcyBjYW1wYWlnbi4gSWYgeW91IGRvIHRoaXMsIGFuZCBpZiB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgcmVhbGx5IGluIGVhcm5lc3QgYWJvdXQgaXQsIHlvdSB3aWxsIGVpdGhlciBjb21wZWwgUGhpbGlwIHRvIGtlZXAgdGhlIHBlYWNlCiAgICAgICAgICAgICAgICAgICAgZmFpcmx5IGFuZCB0byBhYmlkZSB3aXRoaW4gaGlzIG93biBmcm9udGllcnPigJRhbmQgdGhhdCB3b3VsZCBiZSB0aGUKICAgICAgICAgICAgICAgICAgICBncmVhdGVzdCBibGVzc2luZyBvZiBhbGzigJRvciB5b3Ugd2lsbCBmaWdodCBoaW0gb24gZXF1YWwgdGVybXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGlmCiAgICAgICAgICAgICAgICAgICAgYW55b25lIHRoaW5rcyB0aGF0IGFsbCB0aGlzIG1lYW5zIGdyZWF0IGV4cGVuc2UgYW5kIG11Y2ggdG9pbCBhbmQgd29ycnksIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgcXVpdGUgY29ycmVjdCwgYnV0IGlmIGhlIHJlY2tvbnMgdXAgd2hhdCB3aWxsIGhlcmVhZnRlciBiZSB0aGUgcmVzdWx0IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBpZiBzaGUgcmVmdXNlcyB0byBhY3QsIGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCBjb25jbHVkZSB0aGF0IGl0IGlzIHRvIG91ciBpbnRlcmVzdCB0byBwZXJmb3JtIG91ciBkdXR5IHdpbGxpbmdseS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgeW91IGhhdmUgdGhlIGd1YXJhbnRlZSBvZiBzb21lIGdvZCwKICAgICAgICAgICAgICAgICAgICBzaW5jZSBubyBtZXJlIG1vcnRhbCBjb3VsZCBiZSBhIHNhdGlzZmFjdG9yeSBzdXJldHkgZm9yIHN1Y2ggYW4gZXZlbnQgdGhhdCBpZgogICAgICAgICAgICAgICAgICAgIHlvdSByZW1haW4gaW5hY3RpdmUgYW5kIGFiYW5kb24gZXZlcnl0aGluZywgUGhpbGlwIHdpbGwgbm90IGluIHRoZSBlbmQgbWFyY2gKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHlvdXJzZWx2ZXMsIGJ5IFpldXMgYW5kIGFsbCB0aGUgb3RoZXIgZ29kcywgaXQgd291bGQgYmUgZGlzZ3JhY2VmdWwgYW5kCiAgICAgICAgICAgICAgICAgICAgdW53b3J0aHkgb2YgeW91IGFuZCBvZiB0aGUgcmVzb3VyY2VzIG9mIHlvdXIgY2l0eSBhbmQgdGhlIHJlY29yZCBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzIHRvIGFiYW5kb24gYWxsIHRoZSBvdGhlciBHcmVla3MgdG8gZW5zbGF2ZW1lbnQgZm9yIHRoZSBzYWtlIG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICBvd24gZWFzZSwgYW5kIEkgZm9yIG9uZSB3b3VsZCByYXRoZXIgZGllIHRoYW4gYmUgZ3VpbHR5IG9mIHByb3Bvc2luZyBzdWNoIGEKICAgICAgICAgICAgICAgICAgICBwb2xpY3kuIEFsbCB0aGUgc2FtZSwgaWYgc29tZW9uZSBlbHNlIHByb3Bvc2VzIGl0IGFuZCB3aW5zIHlvdXIgYXNzZW50LCBzbyBiZQogICAgICAgICAgICAgICAgICAgIGl0OiBvZmZlciBubyByZXNpc3RhbmNlLCBzYWNyaWZpY2UgZXZlcnl0aGluZy4gPC90cmFuc2xhdGlvbj4="
translation['8.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgbm8gb25lIGFwcHJvdmVzIG9mIHRoaXMsIGFuZCBpZiBvbiB0aGUgY29udHJhcnkgd2UgYWxsIG9mIHVzIGZvcmVzZWUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBtb3JlIHdlIGFsbG93IGhpbSB0byBleHRlbmQgaGlzIHBvd2VyLCB0aGUgc3Ryb25nZXIgYW5kIG1vcmUgZm9ybWlkYWJsZQogICAgICAgICAgICAgICAgICAgIHdlIHNoYWxsIGZpbmQgaGltIGluIHdhciwgd2hhdCBlc2NhcGUgaXMgb3BlbiB0byB1cywgb3Igd2h5IGRvIHdlIGRlbGF5PyBXaGVuLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHNoYWxsIHdlIGNvbnNlbnQgdG8KICAgICAgICAgICAgICAgICAgICBkbyBvdXIgZHV0eT8g4oCcV2hlbmV2ZXIgaXQgaXMgbmVjZXNzYXJ5LOKAnSB5b3Ugd2lsbCBzYXkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hhdCBhbnkgZnJlZSBtYW4gd291bGQgY2FsbCBuZWNlc3NpdHkKICAgICAgICAgICAgICAgICAgICBpcyBub3QgbWVyZWx5IHByZXNlbnQgbm93LCBidXQgaXMgbG9uZyBhZ28gcGFzdCwgYW5kIGZyb20gdGhlIG5lY2Vzc2l0eSB0aGF0CiAgICAgICAgICAgICAgICAgICAgY29uc3RyYWlucyBhIHNsYXZlIHdlIG11c3Qgc3VyZWx5IHByYXkgdG8gYmUgZGVsaXZlcmVkLiBEbyB5b3UgYXNrIHRoZQogICAgICAgICAgICAgICAgICAgIGRpZmZlcmVuY2U/IFRoZSBzdHJvbmdlc3QgbmVjZXNzaXR5IHRoYXQgYSBmcmVlIG1hbiBmZWVscyBpcyBzaGFtZSBmb3IgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLCBhbmQgSSBrbm93IG5vdCBpZiB3ZSBjb3VsZCBuYW1lIGEgc3Ryb25nZXI7IGJ1dCBmb3IgYSBzbGF2ZSBuZWNlc3NpdHkKICAgICAgICAgICAgICAgICAgICBtZWFucyBzdHJpcGVzIGFuZCBib2RpbHkgb3V0cmFnZSwgdW5maXQgdG8gbmFtZSBoZXJlLCBmcm9tIHdoaWNoIEhlYXZlbiBkZWZlbmQKICAgICAgICAgICAgICAgICAgICB1cyEgPC90cmFuc2xhdGlvbj4="
translation['8.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlLAogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIEkgd291bGQgZ2xhZGx5IHRvdWNoIG9uIGFsbCB0aGUgb3RoZXIgdG9waWNzIGFuZCBleHBsYWluIHRoZSB3YXkgaW4KICAgICAgICAgICAgICAgICAgICB3aGljaCBjZXJ0YWluIHBvbGl0aWNpYW5zIGFyZSB3b3JraW5nIHlvdXIgcnVpbiwgSSB3aWxsIGNvbmZpbmUgbXlzZWxmIHRvCiAgICAgICAgICAgICAgICAgICAgcG9pbnRpbmcgb3V0IHRoYXQgd2hlbmV2ZXIgYW55IHF1ZXN0aW9uIGFyaXNlcyB0aGF0IGNvbmNlcm5zIFBoaWxpcCwgaW5zdGFudGx5CiAgICAgICAgICAgICAgICAgICAgdXAganVtcHMgc29tZW9uZSBhbmQgdGVsbHMgeW91IGhvdyBnb29kIGEgdGhpbmcgaXQgaXMgdG8gcHJlc2VydmUgcGVhY2UsIGFuZAogICAgICAgICAgICAgICAgICAgIHdoYXQgYSBib3RoZXIgaXQgaXMgdG8ga2VlcCB1cCBhIGxhcmdlIGFybXksIGFuZCBob3cgY2VydGFpbiBwZXJzb25zIHdhbnQgdG8KICAgICAgICAgICAgICAgICAgICBwbHVuZGVyIHlvdXIgd2VhbHRoLCBhbmQgYWxsIHRoYXQgc29ydCBvZiB0aGluZzsgYW5kIGJ5IHRoZXNlIHNwZWVjaGVzIHRoZXkgcHV0CiAgICAgICAgICAgICAgICAgICAgeW91IG9mZiBhbmQgYWZmb3JkIGxlaXN1cmUgZm9yIFBoaWxpcCB0byBkbyB3aGF0ZXZlciBoZSB3aXNoZXMuIDwvdHJhbnNsYXRpb24+"
translation['8.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHJlc3VsdCBvZiB0aGlzIGlzIGZvciB5b3UgaW5kZWVkIHJlcG9zZSBhbmQKICAgICAgICAgICAgICAgICAgICBpZGxlbmVzcywgZm9yIHRoZSBwcmVzZW504oCUYmxlc3NpbmdzIHdoaWNoIEkgYW0gYWZyYWlkIHlvdSB3aWxsIG9uZSBkYXkKICAgICAgICAgICAgICAgICAgICBjb25zaWRlciBkZWFybHkgcHVyY2hhc2Vk4oCUYnV0IGZvciB0aGUgc3BlYWtlcnMgdGhlIHBvcHVsYXJpdHkgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHBheW1lbnQuIEJ1dCBpbiBteSB2aWV3IGl0IGlzIG5vdCB0byB5b3UgdGhhdCB0aGV5IHNob3VsZCByZWNvbW1lbmQgcGVhY2UsIGZvcgogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIHRha2VuIHRoZSBhZHZpY2UgYW5kIHRoZXJlIHlvdSBzaXQ6IGl0IGlzIHRvIHRoZSBtYW4gd2hvIGlzIGV2ZW4gbm93IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIHdhci1wYXRoLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgUGhpbGlwIGNhbiBiZSB3b24gb3ZlciwKICAgICAgICAgICAgICAgICAgICB5b3VyIHNoYXJlIG9mIHRoZSBjb21wYWN0IGlzIHJlYWR5IHRvIGhhbmQuIEFnYWluLCB0aGV5IHNob3VsZCByZWZsZWN0IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgaXJrc29tZSB0aGluZyBpcyBub3QgdGhlIGV4cGVuc2Ugb2Ygc2VjdXJpbmcgb3VyIHNhZmV0eSwgYnV0IHRoZSBkb29tIHRoYXQgd2lsbAogICAgICAgICAgICAgICAgICAgIGJlIG91cnMgaWYgd2Ugc2hyaW5rIGZyb20gdGhhdCBleHBlbnNlLiBBcyBmb3IgdGhlIOKAnHBsdW5kZXIgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIHdlYWx0aCwg4oCddGhleSBvdWdodCB0byBwcmV2ZW50IHRoYXQgYnkgcHJvcG9zaW5nIHNvbWUgd2F5IG9mIGNoZWNraW5nCiAgICAgICAgICAgICAgICAgICAgaXQgYW5kIG5vdCBieSBhYmFuZG9uaW5nIHlvdXIgaW50ZXJlc3RzLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICB5ZXQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGl0IGlzIGp1c3QgdGhpcwogICAgICAgICAgICAgICAgICAgIHRoYXQgcm91c2VzIG15IGluZGlnbmF0aW9uLCB0aGF0IHNvbWUgb2YgeW91IHNob3VsZCBiZSBkaXN0cmVzc2VkIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHByb3NwZWN0IG9mIHRoZSBwbHVuZGVyIG9mIHlvdXIgd2VhbHRoLCB3aGVuIHlvdSBhcmUgcXVpdGUgY29tcGV0ZW50IHRvIHByb3RlY3QKICAgICAgICAgICAgICAgICAgICBpdCBhbmQgdG8gcHVuaXNoIGFueSBvZmZlbmRlciwgYnV0IHRoYXQgeW91IGFyZSBub3QgZGlzdHJlc3NlZCBhdCB0aGUgc2lnaHQgb2YKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgdGh1cyBwbHVuZGVyaW5nIGV2ZXJ5IEdyZWVrIHN0YXRlIGluIHR1cm4sIHRoZSBtb3JlIHNvIGFzIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgcGx1bmRlcmluZyB0aGVtIHRvIGluanVyZSB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['8.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hhdCB0aGVuIGlzIHRoZSByZWFzb24sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoeSB0aGVzZSBzcGVha2VycyBuZXZlciBhZG1pdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIGlzIHByb3Zva2luZyB3YXIsIHdoZW4gaGUgaXMgdGh1cyBvcGVubHkgY29uZHVjdGluZyBjYW1wYWlnbnMsIHZpb2xhdGluZwogICAgICAgICAgICAgICAgICAgIHJpZ2h0cywgYW5kIHN1YmR1aW5nIGNpdGllcywgYnV0IHdoZW4gb3RoZXJzIHVyZ2UgeW91IG5vdCB0byBnaXZlIHdheSB0byBQaGlsaXAKICAgICAgICAgICAgICAgICAgICBub3Igc3VibWl0IHRvIHRoZXNlIGxvc3NlcywgdGhleSBhY2N1c2UgdGhlbSBvZiB0cnlpbmcgdG8gcHJvdm9rZSB3YXI/IEkgd2lsbAogICAgICAgICAgICAgICAgICAgIGV4cGxhaW4uIDwvdHJhbnNsYXRpb24+"
translation['8.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBiZWNhdXNlIHRoZXkgd2FudCB0aGUgbmF0dXJhbAogICAgICAgICAgICAgICAgICAgIGFuZ2VyIHRoYXQgeW91IHdvdWxkIGZlZWwgYXQgYW55IHN1ZmZlcmluZ3MgaW4gdGhlIHdhciB0byBiZSBkaXZlcnRlZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgeW91ciB3aXNlc3QgY291bnNlbGxvcnMsIHNvIHRoYXQgeW91IG1heSBicmluZyB0aGVtIHRvIHRyaWFsIGluc3RlYWQgb2YKICAgICAgICAgICAgICAgICAgICBwdW5pc2hpbmcgUGhpbGlwLCBhbmQgdGhhdCB0aGV5IG1heSB0aGVtc2VsdmVzIGJlIHRoZSBhY2N1c2VycyBpbnN0ZWFkIG9mIHBheWluZwogICAgICAgICAgICAgICAgICAgIHRoZSBwZW5hbHR5IGZvciB0aGVpciBwcmVzZW50IHdyb25nLWRvaW5ncy4gVGhhdCBpcyB0aGUgbWVhbmluZyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb24gdGhhdCB0aGVyZSBpcyBhIHBhcnR5IGFtb25nIHlvdSB0aGF0IGRlc2lyZXMgd2FyLCBhbmQgdGhhdCB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgdGhlIHF1ZXN0aW9uIHlvdSBub3cgaGF2ZSB0byBkZWNpZGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs60zrnOsc60zrnOus6xz4PhvbfOsTwvZm9yZWlnbj4gaXMgYSBsYXdzdWl0IGJldHdlZW4gcml2YWwgY2xhaW1hbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGFuIGVzdGF0ZSwgZXRjLiBUaGUgd2FyLXBhcnR5IGFuZCB0aGUgcGVhY2UtcGFydHkgYXJlIGhlcmUgcml2YWwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhaW1hbnRzIGZvciB0aGUgdm90ZXMgb2YgdGhlIEF0aGVuaWFucy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrTOuc6xzrTOuc66zrHPg+G9t86xPC9mb3JlaWduPiBpcyBhIGxhd3N1aXQgYmV0d2VlbiByaXZhbCBjbGFpbWFudHMKICAgICAgICAgICAgICAgICAgICAgICAgdG8gYW4gZXN0YXRlLCBldGMuIFRoZSB3YXItcGFydHkgYW5kIHRoZSBwZWFjZS1wYXJ0eSBhcmUgaGVyZSByaXZhbAogICAgICAgICAgICAgICAgICAgICAgICBjbGFpbWFudHMgZm9yIHRoZSB2b3RlcyBvZiB0aGUgQXRoZW5pYW5zLjwvdHJhbnNsYXRpb24+"
translation['8.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSSBhbSBhYnNvbHV0ZWx5IGNlcnRhaW4gdGhhdCwgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIHdhaXRpbmcgZm9yIGFueSBBdGhlbmlhbiB0byBwcm9wb3NlIGEgZGVjbGFyYXRpb24gb2Ygd2FyLCBQaGlsaXAgaXMgaW4KICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uIG9mIG11Y2ggb2Ygb3VyIHRlcnJpdG9yeSBhbmQgaGFzIGp1c3QgZGlzcGF0Y2hlZCBhIGZvcmNlIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICBDYXJkaWEuIElmLCBob3dldmVyLCB3ZSBsaWtlIHRvIHByZXRlbmQgdGhhdCBoZSBpcyBub3QgYXQgd2FyIHdpdGggdXMsIGhlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYmUgdGhlIGdyZWF0ZXN0IGZvb2wgYWxpdmUgaWYgaGUgdHJpZWQgdG8gZGlzcHJvdmUgdGhhdC4gPC90cmFuc2xhdGlvbj4="
translation['8.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBvdXIgdHVybiBjb21lcywgd2hhdCBzaGFsbCB3ZSBzYXkgdGhlbj8gRm9yCiAgICAgICAgICAgICAgICAgICAgb2YgY291cnNlIGhlIHdpbGwgZGVueSB0aGF0IGhlIGlzIGF0dGFja2luZyB1cywganVzdCBhcyBoZSBkZW5pZWQgdGhhdCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBhdHRhY2tpbmcgdGhlIG1lbiBvZiBPcmV1cywgd2hlbiBoaXMgdHJvb3BzIHdlcmUgYWxyZWFkeSBpbiB0aGVpciB0ZXJyaXRvcnksIG9yCiAgICAgICAgICAgICAgICAgICAgdGhlIFBoZXJhZWFucyBiZWZvcmUgdGhhdCwgd2hlbiBoZSB3YXMgYWN0dWFsbHkgYXNzYXVsdGluZyB0aGVpciB3YWxscywgb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgT2x5bnRoaWFucyBhdCB0aGUgc3RhcnQsIHVudGlsIGhlIHdhcyBpbnNpZGUgdGhlaXIgZnJvbnRpZXJzIHdpdGggaGlzIGFybXkuIE9yCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgd2Ugc2F5LCBldmVuIGF0IHRoYXQgaG91ciwgdGhhdCB0aG9zZSB3aG8gYmlkIHVzIHJlcGVsIGhpbSBhcmUgcHJvdm9raW5nCiAgICAgICAgICAgICAgICAgICAgd2FyPyBJZiBzbywgdGhlcmUgaXMgbm90aGluZyBsZWZ0IGJ1dCBzbGF2ZXJ5OyBmb3IgdGhlcmUgaXMgbm8gYWx0ZXJuYXRpdmUKICAgICAgICAgICAgICAgICAgICBiZXR3ZWVuIHRoYXQgYW5kIGJlaW5nIGFsbG93ZWQgbmVpdGhlciB0byBkZWZlbmQgb3Vyc2VsdmVzIG5vciB0byByZW1haW4gYXQKICAgICAgICAgICAgICAgICAgICBwZWFjZS4gPC90cmFuc2xhdGlvbj4="
translation['8.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgeW91IGhhdmUgbm90IHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzIGF0IHN0YWtlIGFzIHRoZSBvdGhlciBjaXRpZXMsIGZvciBpdCBpcyBub3Qgb3VyIHN1YmplY3Rpb24gdGhhdCBQaGlsaXAKICAgICAgICAgICAgICAgICAgICBhaW1zIGF0LCBidXQgb3VyIGFubmloaWxhdGlvbi4gSGUgaXMgd2VsbCBhc3N1cmVkIHRoYXQgeW91IHdpbGwgbm90IGNvbnNlbnQgdG8KICAgICAgICAgICAgICAgICAgICBiZSBzbGF2ZXM7IG9yIGlmIHlvdSBjb25zZW50LCB3aWxsIG5ldmVyIGxlYXJuIGhvdyB0byBiZSBzbGF2ZXMsIGZvciB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgYWNjdXN0b21lZCB0byBydWxlIG90aGVyczsgYnV0IHRoYXQgeW91IHdpbGwgYmUgYWJsZSwgaWYgeW91IHNlaXplIHlvdXIKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0eSwgdG8gY2F1c2UgaGltIG1vcmUgdHJvdWJsZSB0aGFuIGFsbCB0aGUgcmVzdCBvZiB0aGUgd29ybGQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlCiAgICAgICAgICAgICAgICAgICAgeW91IG11c3QgbmVlZHMgYmVhciBpbiBtaW5kIHRoYXQgdGhpcyBpcyBhIGxpZmUtYW5kLWRlYXRoIHN0cnVnZ2xlLCBhbmQgdGhlIG1lbgogICAgICAgICAgICAgICAgICAgIHdobyBoYXZlIHNvbGQgdGhlbXNlbHZlcyB0byBQaGlsaXAgbXVzdCBiZSBhYmhvcnJlZCBhbmQgY3VkZ2VsbGVkIHRvIGRlYXRoLCBmb3IKICAgICAgICAgICAgICAgICAgICBpdCBpcyBpbXBvc3NpYmxlIHRvIHF1ZWxsIHRoZSBmb2VzIHdpdGhvdXQsIHVudGlsIHlvdSBoYXZlIHB1bmlzaGVkIHRob3NlIHdpdGhpbgogICAgICAgICAgICAgICAgICAgIHlvdXIgZ2F0ZXMgW3dobyBhcmUgUGhpbGlwJ3Mgc2VydmFudHM7IGJ1dCBpZiB5b3UgYXJlIHRyaXBwZWQgYnkgdGhlc2UKICAgICAgICAgICAgICAgICAgICBzdHVtYmxpbmctYmxvY2tzLCB5b3UgYXJlIHN1cmUgdG8gYmUgYmF1bGtlZCBvZiB0aGUgb3RoZXJzXS4gPC90cmFuc2xhdGlvbj4="
translation['8.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGRvIHlvdSBpbWFnaW5lIGlzIGhpcyBtb3RpdmUgaW4gb3V0cmFnaW5nIHlvdQogICAgICAgICAgICAgICAgICAgIG5vd+KAlEkgdGhpbmsgbm8gb3RoZXIgdGVybSBkZXNjcmliZXMgaGlzIGNvbmR1Y3TigJRvciB3aHkgaXMgaXQKICAgICAgICAgICAgICAgICAgICB0aGF0LCBpbiBkZWNlaXZpbmcgdGhlIG90aGVycywgaGUgYXQgbGVhc3QgY29uZmVycyBiZW5lZml0cyB1cG9uIHRoZW0sIGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIHlvdXIgY2FzZSBoZSBpcyBhbHJlYWR5IHJlc29ydGluZyB0byB0aHJlYXRzPyBGb3IgZXhhbXBsZSwgdGhlIFRoZXNzYWxpYW5zIHdlcmUKICAgICAgICAgICAgICAgICAgICBiZWd1aWxlZCBieSBoaXMgZ2VuZXJvc2l0eSBpbnRvIHRoZWlyIHByZXNlbnQgc3RhdGUgb2Ygc2Vydml0dWRlOyBubyB3b3JkcyBjYW4KICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSBob3cgaGUgZm9ybWVybHkgZGVjZWl2ZWQgdGhlIG1pc2VyYWJsZSBPbHludGhpYW5zIGJ5IGhpcyBnaWZ0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+IGFuZCBtYW55IG90aGVyIHBsYWNlczsKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz50aGUgVGhlYmFucyBoZSBpcyBub3cgbWlzbGVhZGluZywgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgaGFuZGVkIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MyI+Qm9lb3RpYTwvcGxhY2VOYW1lPiB0byB0aGVtIGFuZAogICAgICAgICAgICAgICAgICAgIHJlbGlldmVkIHRoZW0gb2YgYSBsb25nIGFuZCB0cnlpbmcgd2FyLiBTbyBlYWNoIG9mIHRoZXNlIHN0YXRlcyBoYXMgcmVhcGVkIHNvbWUKICAgICAgICAgICAgICAgICAgICBiZW5lZml0IGZyb20gaGltOyBzb21lIG9mIHRoZW0gaGF2ZSBhbHJlYWR5IHBhaWQgdGhlIHBlbmFsdHksIGFzIGFsbCBtZW4ga25vdzsKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCB3aWxsIHBheSBpdCB3aGVuZXZlciB0aGUgZGF5IG9mIHJlY2tvbmluZyBjb21lcy4gQXMgZm9yIHlvdSwgSSBzYXkKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIG9mIHlvdXIgbG9zc2VzIFtpbiB3YXJdLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Tb21lIHN1Y2ggd29yZHMgc2VlbSBuZWNlc3NhcnkgdG8gYXZvaWQgYSBjb250cmFkaWN0aW9uLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgR3JlZWsgaXMgcHJvYmFibHkgY29ycnVwdCwgdGhvdWdoIHRoZSBzYW1lIHJlYWRpbmcgaXMgZm91bmQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxMC42NSIgdmFsaWQ9InllcyI+RGVtLiAxMC42NTwvYmlibD4uPC9ub3RlPiBidXQgaW4gdGhlIHZlcnkgYWN0IG9mCiAgICAgICAgICAgICAgICAgICAgYWNjZXB0aW5nIHRoZSBwZWFjZSwgaG93IGNvbXBsZXRlbHkgeW91IHdlcmUgZGVjZWl2ZWQsIGhvdyBncmlldm91c2x5IHlvdSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcm9iYmVkISA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDEwLjY1IiB2YWxpZD0ieWVzIj5EZW0uIDEwLjY1PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['8.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5XZXJlIHlvdSBub3QgZGVjZWl2ZWQgYWJvdXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDQwMDM5NjMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNDAwMzk2MyI+UGhvY2lzPC9wbGFjZU5hbWU+LCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4sIHRoZSBUaHJhY2V3YXJkIGRpc3RyaWN0cywgRG9yaXNjdXMsIFNlcnJpdW0sCiAgICAgICAgICAgICAgICAgICAgQ2Vyc29ibGVwdGVzIGhpbXNlbGY/IElzIG5vdCBQaGlsaXAgbm93IGhvbGRpbmcgdGhlIGNpdHkgb2YgdGhlIENhcmRpYW5zLCBhbmQKICAgICAgICAgICAgICAgICAgICBhZG1pdHRpbmcgdGhhdCBoZSBob2xkcyBpdD8gV2h5IHRoZW4gZG9lcyBoZSBkZWFsIHRodXMgd2l0aCB0aGUgb3RoZXIgR3JlZWtzLAogICAgICAgICAgICAgICAgICAgIGJ1dCBub3Qgd2l0aCB5b3UgaW4gdGhlIHNhbWUgd2F5PyBCZWNhdXNlIG91cnMgaXMgdGhlIG9uZSBjaXR5IGluIHRoZSB3b3JsZAogICAgICAgICAgICAgICAgICAgIHdoZXJlIGltbXVuaXR5IGlzIGdyYW50ZWQgdG8gcGxlYWQgb24gYmVoYWxmIG9mIG91ciBlbmVtaWVzLCBhbmQgd2hlcmUgYSBtYW4gd2hvCiAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gYnJpYmVkIGNhbiBzYWZlbHkgYWRkcmVzcyB5b3UgaW4gcGVyc29uLCBldmVuIHdoZW4geW91IGhhdmUgYmVlbiByb2JiZWQKICAgICAgICAgICAgICAgICAgICBvZiB5b3VyIG93bi4gPC90cmFuc2xhdGlvbj4="
translation['8.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3b3VsZCBub3QgaGF2ZSBiZWVuIHNhZmUgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+IHRvIHBsZWFkIFBoaWxpcCdzCiAgICAgICAgICAgICAgICAgICAgY2F1c2UsIHVubGVzcyB0aGUgT2x5bnRoaWFuIGRlbW9jcmFjeSBoYWQgc2hhcmVkIGluIHRoZSBlbmpveW1lbnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmV2ZW51ZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDQ4MTQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwNDgxNCI+UG90aWRhZWE8L3BsYWNlTmFtZT4uIEl0IHdvdWxkIG5vdCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBzYWZlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTkiPlRoZXNzYWx5PC9wbGFjZU5hbWU+IHRvIHBsZWFkIFBoaWxpcCdzCiAgICAgICAgICAgICAgICAgICAgY2F1c2UsIGlmIHRoZSBjb21tb25lcnMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4gaGFkCiAgICAgICAgICAgICAgICAgICAgbm90IHNoYXJlZCBpbiB0aGUgYWR2YW50YWdlcyB0aGF0IFBoaWxpcCBjb25mZXJyZWQgd2hlbiBoZSBleHBlbGxlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHR5cmFudHMgYW5kIHJlc3RvcmVkIHRvIHRoZW0gdGhlaXIgQW1waGljdHlvbmljIHByaXZpbGVnZXMuIEl0IHdvdWxkIG5vdCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBzYWZlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiwgdW50aWwgaGUgZ2F2ZQogICAgICAgICAgICAgICAgICAgIHRoZW0gYmFjayA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgzIj5Cb2VvdGlhPC9wbGFjZU5hbWU+IGFuZCB3aXBlZCBvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgUGhvY2lhbnMuIDwvdHJhbnNsYXRpb24+"
translation['8.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aG91Z2ggUGhpbGlwIGhhcyBub3Qgb25seSByb2JiZWQKICAgICAgICAgICAgICAgICAgICB5b3Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBDYXJkaWFuIHRlcnJpdG9yeSwgYnV0IGlzIGFsc28gdHVybmluZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gaW50byBhIGZvcnRyZXNzIHRvIG92ZXJhd2UgeW91LCBhbmQgaXMgZXZlbiBub3cgb24gaGlzCiAgICAgICAgICAgICAgICAgICAgd2F5IHRvIGF0dGFjayA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJ5emFudGl1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnl6YW50aXVtIj5CeXphbnRpdW08L3BsYWNlTmFtZT4sIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgc2FmZSB0byBzcGVhayBvbiBQaGlsaXAncyBiZWhhbGYuIEluZGVlZCwgb2YgdGhlc2UgcG9saXRpY2lhbnMsIHNvbWUgd2hvIHdlcmUKICAgICAgICAgICAgICAgICAgICBiZWdnYXJzIGFyZSBzdWRkZW5seSBncm93aW5nIHJpY2gsIHNvbWUgdW5rbm93biB0byBuYW1lIGFuZCBmYW1lIGFyZSBub3cgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgaG9ub3IgYW5kIGRpc3RpbmN0aW9uOyB3aGlsZSB5b3UsIG9uIHRoZSBjb250cmFyeSwgaGF2ZSBwYXNzZWQgZnJvbSBob25vciB0bwogICAgICAgICAgICAgICAgICAgIGRpc2hvbm9yLCBmcm9tIGFmZmx1ZW5jZSB0byBkZXN0aXR1dGlvbi4gRm9yIGEgY2l0eSdzIHdlYWx0aCBJIGhvbGQgdG8gYmUKICAgICAgICAgICAgICAgICAgICBhbGxpZXMsIGNyZWRpdCwgZ29vZHdpbGwsIGFuZCBvZiBhbGwgdGhlc2UgeW91IGFyZSBkZXN0aXR1dGUuIDwvdHJhbnNsYXRpb24+"
translation['8.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5CZWNhdXNlIHlvdSBhcmUgaW5kaWZmZXJlbnQgdG8gdGhlc2UgYWR2YW50YWdlcyBhbmQKICAgICAgICAgICAgICAgICAgICBhbGxvdyB0aGVtIHRvIGJlIHRha2VuIGZyb20geW91LCBQaGlsaXAgaXMgcHJvc3Blcm91cyBhbmQgcG93ZXJmdWwgYW5kCiAgICAgICAgICAgICAgICAgICAgZm9ybWlkYWJsZSB0byBHcmVla3MgYW5kIGJhcmJhcmlhbnMgYWxpa2UsIHdoaWxlIHlvdSBhcmUgZGVzZXJ0ZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgaHVtaWxpYXRlZCwgZmFtb3VzIGZvciB5b3VyIHdlbGwtc3RvY2tlZCBtYXJrZXRzLCBidXQgaW4gcHJvdmlzaW9uIGZvciB5b3VyCiAgICAgICAgICAgICAgICAgICAgcHJvcGVyIG5lZWRzLCBjb250ZW1wdGlibGUuIFlldCBJIG9ic2VydmUgdGhhdCBzb21lIG9mIG91ciBzcGVha2VycyBkbyBub3QgdXJnZQogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIHBvbGljeSBmb3IgeW91IGFzIGZvciB0aGVtc2VsdmVzOyBmb3IgeW91LCB0aGV5IHNheSwgb3VnaHQgdG8gcmVtYWluCiAgICAgICAgICAgICAgICAgICAgcXVpZXQgZXZlbiB3aGVuIHlvdSBhcmUgd3JvbmdlZDsgdGhleSB0aGVtc2VsdmVzIGNhbm5vdCByZW1haW4gcXVpZXQgYW1vbmcgeW91LAogICAgICAgICAgICAgICAgICAgIHRob3VnaCBubyBtYW4gZG9lcyB0aGVtIHdyb25nLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGV5IHdhbnQgeW91IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbiBwYXNzaXZlLCB0aG91Z2ggdGhleSB0aGVtc2VsdmVzIGxlYWQgYW4gYWN0aXZlIHBvbGl0aWNhbCBsaWZlLCBpbgogICAgICAgICAgICAgICAgICAgICAgICBQaGlsaXAncyBpbnRlcmVzdHMuIFNlZSB0aGUgZXhwYW5zaW9uIG9mIHRoaXMgcGFzc2FnZSBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDEwLjcwIiB2YWxpZD0ieWVzIj5EZW0uIDEwLjcwLTc0PC9iaWJsPi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxMC43MCIgdmFsaWQ9InllcyI+RGVtLiAxMC43MC03NDwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['8.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlbiBzb21lCiAgICAgICAgICAgICAgICAgICAgaXJyZXNwb25zaWJsZSBwZXJzb24gY29tZXMgZm9yd2FyZCBhbmQgc2F5cywg4oCcT2YgY291cnNlLCB5b3UgZGVjbGluZQogICAgICAgICAgICAgICAgICAgIHRvIG1ha2UgYSBkZWZpbml0ZSBwcm9wb3NhbCBvciB0byBydW4gYW55IHN1Y2ggcmlzay4gWW91IGFyZSBhIGNvd2FyZCBhbmQgYQogICAgICAgICAgICAgICAgICAgIG1pbGtzb3Au4oCdIEkgYW0gbm90IGZvb2xoYXJkeSwgaW1wdWRlbnQsIGFuZCBzaGFtZWxlc3MsIGFuZCBJIHByYXkgdGhhdAogICAgICAgICAgICAgICAgICAgIEkgbWF5IG5ldmVyIGJlOyBuZXZlcnRoZWxlc3MgSSB0aGluayBteXNlbGYgbW9yZSB0cnVseSBicmF2ZSB0aGFuIG1hbnkgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIG5lY2stb3Itbm90aGluZyBwb2xpdGljaWFucy4gPC90cmFuc2xhdGlvbj4="
translation['8.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgYW55b25lLAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgZGlzcmVnYXJkaW5nIHdoYXQgd2lsbCBiZW5lZml0IHRoZSBTdGF0ZSwgdHJhZmZpY3MgaW4gdHJpYWxzLAogICAgICAgICAgICAgICAgICAgIGNvbmZpc2NhdGlvbnMsIGJyaWJlcywgYW5kIGluZGljdG1lbnRzLCBoZSBzaG93cyBpbiB0aGlzIG5vIHRydWUgYnJhdmVyeSwgYnV0LAogICAgICAgICAgICAgICAgICAgIGVuc3VyaW5nIGhpcyBvd24gc2FmZXR5IGJ5IHRoZSBwb3B1bGFyaXR5IG9mIGhpcyBzcGVlY2hlcyBhbmQgbWVhc3VyZXMsIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgYm9sZCB3aXRob3V0IHJpc2suIEJ1dCB3aG9ldmVyIGluIHlvdXIgYmVzdCBpbnRlcmVzdHMgb2Z0ZW4gb3Bwb3NlcyB5b3VyIHdpc2hlcywKICAgICAgICAgICAgICAgICAgICBhbmQgbmV2ZXIgc3BlYWtzIHRvIHdpbiBmYXZvciwgYnV0IGFsd2F5cyBnaXZlcyB5b3Ugb2YgaGlzIGJlc3QsIGFuZCBtYWtlcwogICAgICAgICAgICAgICAgICAgIGNob2ljZSBvZiB0aGF0IHBvbGljeSB3aGljaCBpcyBtb3JlIHVuZGVyIHRoZSBkb21pbmlvbiBvZiBjaGFuY2UgdGhhbiBvZgogICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0aW9uLCBhbmQgeWV0IGFjY2VwdHMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIGVpdGhlciwgaGUgaXMgdGhlIGJyYXZlIG1hbi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXMsIGFuZCBpdCBpcyBoZSB3aG8gaXMgdGhlIHVzZWZ1bAogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4sIG5vdCB0aG9zZSB3aG8gZm9yIGEgbW9tZW50J3MgcG9wdWxhcml0eSBoYXZlIG1hZGUgaGF2b2Mgb2YgdGhlIGNoaWVmCiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzIG9mIHRoZSBTdGF0ZS4gVGhlc2UgbWVuIEkgYW0gc28gZmFyIGZyb20gZW52eWluZyBvciBkZWVtaW5nIHRoZW0KICAgICAgICAgICAgICAgICAgICB3b3J0aHkgY2l0aXplbnMgb2Ygb3VyIGNpdHksIHRoYXQgaWYgYSBtYW4gc2hvdWxkIHNheSB0byBtZSwg4oCcU3BlYWsKICAgICAgICAgICAgICAgICAgICBmb3IgeW91cnNlbGYsIGFuZCB0ZWxsIHVzIHdoYXQgZ29vZCB5b3UgaGF2ZSBldmVyIGRvbmUgdGhlIFN0YXRlLOKAnQogICAgICAgICAgICAgICAgICAgIHRob3VnaCBJIG1pZ2h0IHNwZWFrLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBlcXVpcG1lbnQgb2Ygd2FyLWdhbGxleXMgYW5kIG9mIGNob3J1c2VzLCBvZiBtb25leSBjb250cmlidXRpb25zIGFuZCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByYW5zb20gb2YgY2FwdGl2ZXMsIGFuZCBvZiBvdGhlciBpbnN0YW5jZXMgb2YgbGliZXJhbGl0eSwgSSB3b3VsZCBzYXkgbm90IGEKICAgICAgICAgICAgICAgICAgICB3b3JkIG9mIHRoZW0sIDwvdHJhbnNsYXRpb24+"
translation['8.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgb25seSByZXBseSB0aGF0IG15IHBvbGljeQogICAgICAgICAgICAgICAgICAgIGhhcyBuZXZlciBiZWVuIHRoZSBwb2xpY3kgb2YgdGhlc2UgbWVuOyB0aGF0IHRob3VnaCBJIGNvdWxkLCBwZXJoYXBzIGFzIHdlbGwgYXMKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCwgYWNjdXNlIGFuZCBicmliZSBhbmQgY29uZmlzY2F0ZSBhbmQgYWN0IGluIGdlbmVyYWwgYXMgdGhleSBhcmUgYWN0aW5nLAogICAgICAgICAgICAgICAgICAgIEkgaGF2ZSBuZXZlciBhcHBsaWVkIG15c2VsZiB0byBhbnkgb2YgdGhlc2UgYXJ0cyBub3Igb2JleWVkIHRoZSBwcm9tcHRpbmdzIG9mCiAgICAgICAgICAgICAgICAgICAgZ3JlZWQgb3IgYW1iaXRpb24sIGJ1dCBjb250aW51ZSB0byBvZmZlciBhZHZpY2Ugd2hpY2ggZG9lcyBpbmRlZWQgbG93ZXIgbWUgaW4KICAgICAgICAgICAgICAgICAgICB5b3VyIGVzdGVlbSwgYnV0IHdoaWNoLCBpZiB5b3Ugd2lsbCBmb2xsb3cgaXQsIHdvdWxkIGNvbnRyaWJ1dGUgdG8geW91cgogICAgICAgICAgICAgICAgICAgIGdyZWF0bmVzcy4gU28gbXVjaCBwZXJoYXBzIEkgbWF5IHNheSBvZiBteXNlbGYgd2l0aG91dCBvZmZlbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IgaW5kZWVkIGRvZXMgaXQgc2VlbSB0byBtZSB0aGUgcGFydCBvZiBhbiBob25lc3QKICAgICAgICAgICAgICAgICAgICBjaXRpemVuIHRvIGRldmlzZSBwb2xpdGljYWwgbWVhc3VyZXMgYnkgd2hpY2ggSSBzaGFsbCBhdCBvbmNlIHRha2UgdGhlIGhpZ2hlc3QKICAgICAgICAgICAgICAgICAgICBwbGFjZSBhbW9uZyB5b3UsIGJ1dCB5b3UgdGhlIGxvd2VzdCBhbW9uZyB0aGUgbmF0aW9ucy4gTm8sIHRoZSBhZHZhbmNlbWVudCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBTdGF0ZSBtdXN0IGFsd2F5cyBnbyBhbG9uZyB3aXRoIHRoZSBtZWFzdXJlcyBwcm9wb3NlZCBieSBnb29kIGNpdGl6ZW5zLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGV5IG11c3QgYWx3YXlzIHN1cHBvcnQgdGhlIGJlc3QgYW5kIG5vdCB0aGUgZWFzaWVzdCBwb2xpY3k7IGZvciB0b3dhcmRzIHRoZQogICAgICAgICAgICAgICAgICAgIGxhdHRlciBuYXR1cmUgaGVyc2VsZiB3aWxsIGxlYWQgdGhlIHdheSwgYnV0IHRvIGluc3RydWN0IHlvdSBieSBzcGVlY2ggYW5kIGd1aWRlCiAgICAgICAgICAgICAgICAgICAgeW91IHRvIHRoZSBmb3JtZXIgaXMgdGhlIGR1dHkgb2YgdGhlIGdvb2QgY2l0aXplbi4gPC90cmFuc2xhdGlvbj4="
translation['8.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IEkgaGF2ZSBldmVuIGhlYXJkIHNvbWUgc3VjaAogICAgICAgICAgICAgICAgICAgIHJlbWFyayBhcyB0aGlzOiB0aGF0IEksIG9mIGNvdXJzZSwgYWx3YXlzIHNwZWFrIGZvciB0aGUgYmVzdCwgYnV0IHRoYXQgeW91IGdldAogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgZnJvbSBtZSBleGNlcHQgd29yZHMsIHdoaWxlIHdoYXQgdGhlIGNpdHkgd2FudHMgaXMgZGVlZHMgYW5kIGEgcHJhY3RpY2FsCiAgICAgICAgICAgICAgICAgICAgcG9saWN5IG9mIHNvbWUgc29ydC4gSSB3aWxsIG15c2VsZiBleHBsYWluIGhvdyBJIHN0YW5kIGluIHRoaXMgbWF0dGVyLCBhbmQgSQogICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgcGVyZmVjdGx5IGNhbmRpZC4gSSBkbyBub3QgdGhpbmsgdGhhdCB5b3VyIGFkdmlzZXIgaGFzIGFueSBidXNpbmVzcwogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCB0byBnaXZlIHRoZSBiZXN0IGNvdW5zZWwgaGUgY2FuLCBhbmQgSSB0aGluayBJIGNhbiBlYXNpbHkgcHJvdmUgdGhhdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgaXMgc28uIDwvdHJhbnNsYXRpb24+"
translation['8.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgeW91IGtub3csIG9mIGNvdXJzZSwgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBmYW1vdXMgVGltb3RoZXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9uZSBvZiB0aGUgbW9zdCBzdWNjZXNzZnVsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBBdGhlbmlhbiBnZW5lcmFscywgZnJvbSAzNzggdGlsbCBoaXMgZWNsaXBzZSBpbiAzNTQsIHdoZW4gaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRlbW5lZCBhbmQgZmluZWQgZm9yIGZhaWx1cmUgaW4gdGhlIFNvY2lhbCBXYXIuIEhpcyBpbnRpbWFjeSB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIElzb2NyYXRlcyBoYWQgbWFkZSBoaW0gYWxzbyBhbiBlZmZlY3RpdmUgc3BlYWtlci4gSGlzIGJpb2dyYXBoeSBpcyBpbmNsdWRlZAogICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgY29sbGVjdGlvbiBvZiBDb3JuZWxpdXMgTmVwb3MuIFRoZSBvY2Nhc2lvbiBoZXJlIHJlZmVycmVkIHRvIGlzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBFdWJvZWFuIGV4cGVkaXRpb24gb2YgMzU3LCB3aGVuIERlbW9zdGhlbmVzIHNlcnZlZCBhcyB0cmllcmFyY2guPC9ub3RlPiBvbmNlCiAgICAgICAgICAgICAgICAgICAgaGFyYW5ndWVkIHlvdSB0byB0aGUgZWZmZWN0IHRoYXQgeW91IG91Z2h0IHRvIHNlbmQgYW4gZXhwZWRpdGlvbiB0byBzYXZlIHRoZQogICAgICAgICAgICAgICAgICAgIEV1Ym9lYW5zLCB3aGVuIHRoZSBUaGViYW5zIHdlcmUgdHJ5aW5nIHRvIGVuc2xhdmUgdGhlbSwgYW5kIGhpcyB3b3JkcyByYW4KICAgICAgICAgICAgICAgICAgICBzb21ldGhpbmcgbGlrZSB0aGlzOiDigJxUZWxsIG1lLOKAnSBoZSBzYWlkLCDigJx3aGVuIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUgZ290IHRoZSBUaGViYW5zIGluIHRoZSBpc2xhbmQsIGFyZSB5b3UgZGVsaWJlcmF0aW5nIGhvdyB5b3Ugd2lsbCBkZWFsIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGVtIGFuZCB3aGF0IHlvdSBvdWdodCB0byBkbz8gV2lsbCB5b3Ugbm90IGNvdmVyIHRoZSBzZWEgd2l0aCB5b3VyIHdhci1nYWxsZXlzLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4/IFdpbGwgeW91IG5vdCByaXNlIHVwCiAgICAgICAgICAgICAgICAgICAgYXQgb25jZSBhbmQgbWFyY2ggZG93biB0byB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQaXJhZXVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQaXJhZXVzIj5QaXJhZXVzPC9wbGFjZU5hbWU+IGFuZCBkcmFnIHRoZW0gZG93biB0aGUgc2xpcHM/4oCdIDwvdHJhbnNsYXRpb24+"
translation['8.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0LCB0aGVuLCB3YXMgd2hhdCBUaW1vdGhldXMgc2FpZCwgYW5kIHRoYXQgd2FzCiAgICAgICAgICAgICAgICAgICAgd2hhdCB5b3UgZGlkLCBhbmQgdGhlIHVuaW9uIG9mIHRoZSB0d28gYnJvdWdodCBhYm91dCB0aGUgcHJhY3RpY2FsIHJlc3VsdC4gQnV0CiAgICAgICAgICAgICAgICAgICAgaWYgVGltb3RoZXVzIGhhZCBnaXZlbiB5b3UgdGhlIGJlc3QgYWR2aWNlIGhlIGNvdWxkIO+8iGFzIGluZGVlZCBoZQogICAgICAgICAgICAgICAgICAgIGRpZO+8iSwgYnV0IHlvdSBoYWQgc2hpcmtlZCB5b3VyIGR1dHkgYW5kIHBhaWQgbm8gaGVlZCB0byBoaW0sIHdvdWxkIHRoZQogICAgICAgICAgICAgICAgICAgIFN0YXRlIGhhdmUgcmVhcGVkIGFueSBvZiB0aGUgZWZmZWN0cyB0aGF0IHRoZW4gZm9sbG93ZWQ/IE5vdCBhIGJpdCBvZiBpdC4gU28gdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBhcHBsaWVzIHRvIHdoYXRldmVyIEkgdXR0ZXIgbm93IGFuZCB3aGF0ZXZlciB0aGlzIG1hbiBvciB0aGF0IHV0dGVycy4gRm9yCiAgICAgICAgICAgICAgICAgICAgZGVlZHMgeW91IG11c3QgbG9vayB0byB5b3Vyc2VsdmVzLCBidXQgZm9yIGFkdmljZSwgdGhlIGJlc3QgdGhhdCBza2lsbCBpbiBzcGVlY2gKICAgICAgICAgICAgICAgICAgICBjYW4gY29tbWFuZCwgbG9vayB0byB0aGUgc3BlYWtlciB3aG8gcmlzZXMgdG8gYWRkcmVzcyB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['8.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TGV0IG1lIHN1bSB1cCBiZWZvcmUgSQogICAgICAgICAgICAgICAgICAgIGxlYXZlIHRoZSBwbGF0Zm9ybS4gSSBzYXkgdGhhdCB3ZSBtdXN0IHBheSBvdXIgY29udHJpYnV0aW9ucyBhbmQga2VlcCB0b2dldGhlcgogICAgICAgICAgICAgICAgICAgIHRoZSBmb3JjZSBub3cgaW4gdGhlIGZpZWxkLCByZWN0aWZ5aW5nIHdoYXRldmVyIHNlZW1zIHRvIGJlIGFtaXNzLCBidXQgbm90CiAgICAgICAgICAgICAgICAgICAgZGlzYmFuZGluZyB0aGUgd2hvbGUgZm9yIGFueSBhZHZlcnNlIGNyaXRpY2lzbS4gV2UgbXVzdCBzZW5kIGFtYmFzc2Fkb3JzIGluCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgZGlyZWN0aW9uIHRvIGluc3RydWN0LCB0byBleGhvcnQsIHRvIGFjdC4gV2hpbGUgZG9pbmcgYWxsIHRoaXMsIHdlIG11c3QKICAgICAgICAgICAgICAgICAgICBhbHNvIHB1bmlzaCB0aG9zZSBwb2xpdGljaWFucyB3aG8gdGFrZSBicmliZXMsIGFuZCB3ZSBtdXN0IGhhdGUgdGhlbSB3aGVyZXZlcgogICAgICAgICAgICAgICAgICAgIGZvdW5kLCBpbiBvcmRlciB0aGF0IHRob3NlIHdobyBwcm92ZSB0aGVpciBvd24gdmlydHVlIGFuZCBob25lc3R5IG1heSBmaW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVpciBhZHZpY2UgaGFzIGJlZW4gYmVuZWZpY2lhbCB0byB0aGVtc2VsdmVzIGFzIHdlbGwgYXMgdG8gdGhlIGNpdGl6ZW5zIGF0CiAgICAgICAgICAgICAgICAgICAgbGFyZ2UuIDwvdHJhbnNsYXRpb24+"
translation['8.77'] = ""
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5NYW55IHNwZWVjaGVzCiAgICAgICAgICAgICAgICAgICAgYXJlIGRlbGl2ZXJlZCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYXQKICAgICAgICAgICAgICAgICAgICBhbG1vc3QgZXZlcnkgbWVldGluZyBvZiB0aGUgQXNzZW1ibHksIGFib3V0IHRoZSB3cm9uZ3MgdGhhdCBQaGlsaXAgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBjb21taXR0aW5nLCBldmVyIHNpbmNlIHRoZSBjb25jbHVzaW9uIG9mIHBlYWNlLCBub3Qgb25seSBhZ2FpbnN0IHlvdSBidXQgYWxzbwogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlIG90aGVyIHN0YXRlcywgYW5kIGFsbCB0aGUgc3BlYWtlcnMgd291bGQsIEkgYW0gc3VyZSwgYWRtaXQgaW4KICAgICAgICAgICAgICAgICAgICB0aGVvcnksIHRob3VnaCB0aGV5IGRvIG5vdCBwdXQgaXQgaW4gcHJhY3RpY2UsIHRoYXQgdGhlIG9iamVjdCBib3RoIG9mIG91ciB3b3JkcwogICAgICAgICAgICAgICAgICAgIGFuZCBkZWVkcyBtdXN0IGJlIHRvIGNoZWNrIGFuZCBjaGFzdGlzZSBoaXMgYXJyb2dhbmNlOyB5ZXQgSSBwZXJjZWl2ZSB0aGF0IGFsbAogICAgICAgICAgICAgICAgICAgIG91ciBpbnRlcmVzdHMgaGF2ZSBiZWVuIHNvIGNvbXBsZXRlbHkgYmV0cmF5ZWQgYW5kIHNhY3JpZmljZWQsIHRoYXTigJRJCiAgICAgICAgICAgICAgICAgICAgYW0gYWZyYWlkIGl0IGlzIGFuIG9taW5vdXMgdGhpbmcgdG8gc2F5LCBidXQgeWV0IHRoZSB0cnV0aOKAlGV2ZW4gaWYgYWxsCiAgICAgICAgICAgICAgICAgICAgd2hvIGFkZHJlc3MgeW91IGhhZCB3YW50ZWQgdG8gcHJvcG9zZSwgYW5kIGFsbCBvZiB5b3UgaGFkIHdhbnRlZCB0byBwYXNzLAogICAgICAgICAgICAgICAgICAgIG1lYXN1cmVzIHRoYXQgd2VyZSBib3VuZCB0byBicmluZyBvdXIgYWZmYWlycyBpbnRvIHRoZSB3b3JzdCBwb3NzaWJsZSBwbGlnaHQsIEkKICAgICAgICAgICAgICAgICAgICBkbyBub3QgdGhpbmsgdGhleSBjb3VsZCBoYXZlIGJlZW4gaW4gYSB3b3JzZSBjb25kaXRpb24gdGhhbiB0aGV5IGFyZSB0b2RheS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBlcmhhcHMsIGluZGVlZCwgdGhpcyBjb25kaXRpb24gb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgYWZmYWlycyBtYXkgYmUgYXR0cmlidXRlZCB0byBtYW55IGNhdXNlcyBhbmQgbm90IGp1c3QgdG8gb25lIG9yIHR3bywgYnV0IGEKICAgICAgICAgICAgICAgICAgICBjYXJlZnVsIGV4YW1pbmF0aW9uIHdpbGwgY29udmluY2UgeW91IHRoYXQgaXQgaXMgYWJvdmUgYWxsIGR1ZSB0byB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBzdHVkeSB0byB3aW4geW91ciBmYXZvdXIgcmF0aGVyIHRoYW4gdG8gZ2l2ZSB5b3UgdGhlIGJlc3QgYWR2aWNlLiBTb21lIG9mIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBpbnRlcmVzdGVkIGluIG1haW50YWluaW5nIGEgc3lzdGVtIHdoaWNoIGJyaW5ncyB0aGVtIGNyZWRpdCBhbmQKICAgICAgICAgICAgICAgICAgICBpbmZsdWVuY2UsIGhhdmUgbm8gdGhvdWdodCBmb3IgdGhlIGZ1dHVyZSBbYW5kIHRoZXJlZm9yZSB0aGluayB5b3UKICAgICAgICAgICAgICAgICAgICBzaG91bGQgaGF2ZSBub25lIGVpdGhlcl07IHdoaWxlIG90aGVycywgYnkgYmxhbWluZyBhbmQgdHJhZHVjaW5nIHRob3NlCiAgICAgICAgICAgICAgICAgICAgaW4gYXV0aG9yaXR5LCBtYWtlIGl0IHRoZWlyIHNvbGUgYWltIHRoYXQgb3VyIGNpdHkgc2hhbGwgY29uY2VudHJhdGUgaGVyCiAgICAgICAgICAgICAgICAgICAgYXR0ZW50aW9uIG9uIHB1bmlzaGluZyBoZXIgb3duIGNpdGl6ZW5zLCB3aGlsZSBQaGlsaXAgc2hhbGwgYmUgZnJlZSB0byBzYXkgYW5kCiAgICAgICAgICAgICAgICAgICAgZG8gd2hhdGV2ZXIgaGUgcGxlYXNlcy4gPC90cmFuc2xhdGlvbj4="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzdWNoIG1ldGhvZHMgb2YKICAgICAgICAgICAgICAgICAgICBkZWFsaW5nIHdpdGggcHVibGljIGFmZmFpcnMsIGZhbWlsaWFyIHRob3VnaCB0aGV5IGFyZSB0byB5b3UsIGFyZSB0aGUgY2F1c2Ugb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGNhbGFtaXRpZXMuIEkgY2xhaW0gZm9yIG15c2VsZiwgQXRoZW5pYW5zLCB0aGF0IGlmIEkgdXR0ZXIgc29tZSBob21lLXRydXRocwogICAgICAgICAgICAgICAgICAgIHdpdGggZnJlZWRvbSwgSSBzaGFsbCBub3QgdGhlcmVieSBpbmN1ciB5b3VyIGRpc3BsZWFzdXJlLiBGb3IgbG9vayBhdCBpdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgd2F5LiBJbiBvdGhlciBtYXR0ZXJzIHlvdSB0aGluayBpdCBpcyBzbyBuZWNlc3NhcnkgdG8gZ3JhbnQgZ2VuZXJhbCBmcmVlZG9tIG9mCiAgICAgICAgICAgICAgICAgICAgc3BlZWNoIHRvIGV2ZXJ5b25lIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91IGV2ZW4gYWxsb3cgYWxpZW5zIGFuZCBzbGF2ZXMgdG8gc2hhcmUgaW4gdGhlIHByaXZpbGVnZSwgYW5kIG1hbnkgbW9yZQogICAgICAgICAgICAgICAgICAgIG1lbmlhbHMgbWF5IGJlIG9ic2VydmVkIGFtb25nIHlvdSBzcGVha2luZyB0aGVpciBtaW5kcyB3aXRoIG1vcmUgbGliZXJ0eSB0aGFuCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnMgZW5qb3kgaW4gb3RoZXIgc3RhdGVzOyBidXQgZnJvbSB5b3VyIGRlbGliZXJhdGlvbnMgeW91IGhhdmUgYmFuaXNoZWQgaXQKICAgICAgICAgICAgICAgICAgICB1dHRlcmx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlbmNlIHRoZSByZXN1bHQgaXMgdGhhdCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBBc3NlbWJseSB5b3VyIHNlbGYtY29tcGxhY2VuY3kgaXMgZmxhdHRlcmVkIGJ5IGhlYXJpbmcgbm9uZSBidXQgcGxlYXNhbnQKICAgICAgICAgICAgICAgICAgICBzcGVlY2hlcywgYnV0IHlvdXIgcG9saWN5IGFuZCB5b3VyIHByYWN0aWNlIGFyZSBhbHJlYWR5IGludm9sdmluZyB5b3UgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JhdmVzdCBwZXJpbC4gVGhlcmVmb3JlLCBpZiBzdWNoIGlzIHlvdXIgdGVtcGVyIG5vdywgSSBoYXZlIG5vdGhpbmcgdG8gc2F5OyBidXQKICAgICAgICAgICAgICAgICAgICBpZiwgYXBhcnQgZnJvbSBmbGF0dGVyeSwgeW91IGFyZSB3aWxsaW5nIHRvIGhlYXIgc29tZXRoaW5nIHRvIHlvdXIgYWR2YW50YWdlLCBJCiAgICAgICAgICAgICAgICAgICAgYW0gcmVhZHkgdG8gc3BlYWsuIEZvciB0aG91Z2ggdGhlIHN0YXRlIG9mIG91ciBhZmZhaXJzIGlzIGluIGV2ZXJ5IHdheQogICAgICAgICAgICAgICAgICAgIGRlcGxvcmFibGUsIGFuZCB0aG91Z2ggbXVjaCBoYXMgYmVlbiBzYWNyaWZpY2VkLCBuZXZlcnRoZWxlc3MgaXQgaXMgcG9zc2libGUsIGlmCiAgICAgICAgICAgICAgICAgICAgeW91IGNob29zZSB0byBkbyB5b3VyIGR1dHksIHRoYXQgYWxsIG1heSB5ZXQgYmUgcmVwYWlyZWQuIDwvdHJhbnNsYXRpb24+"
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGF0IEkgYW0gZ29pbmcgdG8gc2F5IG1heSBwZXJoYXBzIHNlZW0gYSBwYXJhZG94LAogICAgICAgICAgICAgICAgICAgIGJ1dCBpdCBpcyB0cnVlLiBUaGUgd29yc3QgZmVhdHVyZSBvZiB0aGUgcGFzdCBpcyBvdXIgYmVzdCBob3BlIGZvciB0aGUgZnV0dXJlLgogICAgICAgICAgICAgICAgICAgIFdoYXQsIHRoZW4sIGlzIHRoYXQgZmVhdHVyZT8gSXQgaXMgdGhhdCB5b3VyIGFmZmFpcnMgZ28gd3JvbmcgYmVjYXVzZSB5b3UKICAgICAgICAgICAgICAgICAgICBuZWdsZWN0IGV2ZXJ5IGR1dHksIGdyZWF0IG9yIHNtYWxsOyBzaW5jZSBzdXJlbHksIGlmIHRoZXkgd2VyZSBpbiB0aGlzIHBsaWdodCBpbgogICAgICAgICAgICAgICAgICAgIHNwaXRlIG9mIHlvdXIgZG9pbmcgYWxsIHRoYXQgd2FzIHJlcXVpcmVkLCB0aGVyZSB3b3VsZCBub3QgYmUgZXZlbiBhIGhvcGUgb2YKICAgICAgICAgICAgICAgICAgICBpbXByb3ZlbWVudC4gQnV0IGluIGZhY3QgaXQgaXMgeW91ciBpbmRpZmZlcmVuY2UgYW5kIGNhcmVsZXNzbmVzcyB0aGF0IFBoaWxpcAogICAgICAgICAgICAgICAgICAgIGhhcyBjb25xdWVyZWQ7IHlvdXIgY2l0eSBoZSBoYXMgbm90IGNvbnF1ZXJlZC4gTm9yIGhhdmUgeW91IGJlZW4KICAgICAgICAgICAgICAgICAgICBkZWZlYXRlZOKAlG5vISB5b3UgaGF2ZSBub3QgZXZlbiBtYWRlIGEgbW92ZS4gPC90cmFuc2xhdGlvbj4="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSWYsIHRoZW4sIHdlIHdlcmUgYWxsIGFncmVlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgUGhpbGlwIGlzIGF0IHdhciB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIGFuZCBpcyB2aW9sYXRpbmcgdGhlIHBlYWNlLCB0aGUgb25seSB0YXNrIG9mIGEgc3BlYWtlciB3b3VsZCBiZSB0byBjb21lIGZvcndhcmQKICAgICAgICAgICAgICAgICAgICBhbmQgcmVjb21tZW5kIHRoZSBzYWZlc3QgYW5kIGVhc2llc3QgbWV0aG9kIG9mIGRlZmVuY2U7IGJ1dCBzaW5jZSBzb21lIG9mIHlvdQogICAgICAgICAgICAgICAgICAgIGFyZSBpbiBzdWNoIGEgc3RyYW5nZSBtb29kIHRoYXQsIHRob3VnaCBQaGlsaXAgaXMgc2VpemluZyBjaXRpZXMsIGFuZCByZXRhaW5pbmcKICAgICAgICAgICAgICAgICAgICBtYW55IG9mIHlvdXIgcG9zc2Vzc2lvbnMsIGFuZCBpbmZsaWN0aW5nIGluanVyeSBvbiBldmVyeWJvZHksIHlvdSB0b2xlcmF0ZSBzb21lCiAgICAgICAgICAgICAgICAgICAgc3BlYWtlcnMgd2hvIHJlcGVhdGVkbHkgYXNzZXJ0IGluIHRoZSBBc3NlbWJseSB0aGF0IHRoZSByZWFsIGFnZ3Jlc3NvcnMgYXJlCiAgICAgICAgICAgICAgICAgICAgY2VydGFpbiBvZiBvdXJzZWx2ZXMsIHdlIG11c3QgYmUgb24gb3VyIGd1YXJkIGFuZCBzZXQgdGhpcyBtYXR0ZXIgcmlnaHQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSBpcyBncmF2ZSBkYW5nZXIgdGhhdCBhbnlvbmUgd2hvCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zZXMgYW5kIHVyZ2VzIHRoYXQgd2Ugc2hhbGwgZGVmZW5kIG91cnNlbHZlcyBtYXkgaW5jdXIgdGhlIGNoYXJnZSBvZiBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBwcm92b2tlZCB0aGUgd2FyLiBJIHRoZXJlZm9yZSBmaXJzdCBvZiBhbGwgc3RhdGUgYW5kIGRlZmluZSB0aGlzCiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb27igJR3aGV0aGVyIGl0IGlzIGluIG91ciBwb3dlciB0byBkaXNjdXNzIHRoZSBhbHRlcm5hdGl2ZSBvZgogICAgICAgICAgICAgICAgICAgIHBlYWNlIG9yIHdhci5dPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlByb2JhYmx5IHRoZSBzZWNvbmQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhdXNlIGhhcyBubyBjb25uZWN0aW9uIHdpdGggdGhlIGZpcnN0LCBidXQgaXMgYW4gYWx0ZXJuYXRpdmUgZm9ybSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IHNlbnRlbmNlLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPklmIGluZGVlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gY2FuIHJlbWFpbiBhdCBwZWFjZSBhbmQgaWYgdGhlIGNob2ljZSByZXN0cyB3aXRoCiAgICAgICAgICAgICAgICAgICAgdXPigJQgdG8gdGFrZSB0aGF0IHBvaW50IGZpcnN04oCUSSBwZXJzb25hbGx5IGZlZWwgdGhhdCB3ZSBhcmUKICAgICAgICAgICAgICAgICAgICBib3VuZCB0byBkbyBzbzsgYW5kIGlmIGFueW9uZSBzYXlzIHRoYXQgd2UgY2FuLCBJIGNhbGwgdXBvbiBoaW0gdG8gbW92ZSBhCiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiBhbmQgdG8gZG8gc29tZXRoaW5nIGFuZCB0byBwbGF5IHVzIG5vIHRyaWNrczsgYnV0IGlmIHRoZXJlIGlzIGFub3RoZXIKICAgICAgICAgICAgICAgICAgICBwZXJzb24gY29uY2VybmVkLCB3aXRoIHN3b3JkIGluIGhhbmQgYW5kIGEgbWlnaHR5IGZvcmNlIGF0IGhpcyBiYWNrLCB3aG8gaW1wb3NlcwogICAgICAgICAgICAgICAgICAgIG9uIHlvdSB3aXRoIHRoZSBuYW1lIG9mIHBlYWNlIGJ1dCBoaW1zZWxmIGluZHVsZ2VzIGluIGFjdHMgb2Ygd2FyLCB3aGF0IGlzIGxlZnQKICAgICAgICAgICAgICAgICAgICBidXQgdG8gZGVmZW5kIG91cnNlbHZlcz8gSWYgeW91IGNob29zZSB0byBmb2xsb3cgaGlzIGV4YW1wbGUgYW5kIHByb2Zlc3MgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBhcmUgYXQgcGVhY2UsIEkgcmFpc2Ugbm8gb2JqZWN0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZgogICAgICAgICAgICAgICAgICAgIGFueW9uZSBtaXN0YWtlcyBmb3IgcGVhY2UgYW4gYXJyYW5nZW1lbnQgd2hpY2ggd2lsbCBlbmFibGUgUGhpbGlwLCB3aGVuIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIHNlaXplZCBldmVyeXRoaW5nIGVsc2UsIHRvIG1hcmNoIHVwb24gdXMsIGhlIGhhcyB0YWtlbiBsZWF2ZSBvZiBoaXMgc2Vuc2VzLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgcGVhY2UgdGhhdCBoZSB0YWxrcyBvZiBpcyBvbmUgdGhhdCB5b3Ugb2JzZXJ2ZSB0b3dhcmRzIFBoaWxpcCwgYnV0IG5vdAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCB0b3dhcmRzIHlvdS4gVGhhdCBpcyB0aGUgYWR2YW50YWdlIHdoaWNoIGhlIGlzIHB1cmNoYXNpbmcgYnkgYWxsIGhpcwogICAgICAgICAgICAgICAgICAgIGV4cGVuZGl0dXJlIG9mIG1vbmV54oCUdGhhdCBoZSBzaG91bGQgYmUgYXQgd2FyIHdpdGggeW91LCBidXQgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBzaG91bGQgbm90IGJlIGF0IHdhciB3aXRoIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['9.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgd2UgYXJlIGdvaW5nIHRvIHdhaXQgZm9yIGhpbSB0byBhY2tub3dsZWRnZSBhIHN0YXRlCiAgICAgICAgICAgICAgICAgICAgb2Ygd2FyIHdpdGggdXMsIHdlIGFyZSBpbmRlZWQgdGhlIHNpbXBsZXN0IG9mIG1vcnRhbHM7IGZvciBldmVuIGlmIGhlIG1hcmNoZXMKICAgICAgICAgICAgICAgICAgICBzdHJhaWdodCBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGlyYWV1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGlyYWV1cyI+UGlyYWV1czwvcGxhY2VOYW1lPiwgaGUgd2lsbCBub3QgYWRtaXQgaXQsCiAgICAgICAgICAgICAgICAgICAgaWYgd2UgbWF5IGp1ZGdlIGZyb20gaGlzIHRyZWF0bWVudCBvZiB0aGUgb3RoZXIgc3RhdGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGFrZSB0aGUgY2FzZSBvZiB0aGUgT2x5bnRoaWFuczsgd2hlbiBoZSB3YXMgZml2ZQogICAgICAgICAgICAgICAgICAgIG1pbGVzIGZyb20gdGhlaXIgY2l0eSwgaGUgdG9sZCB0aGVtIHRoZXJlIG11c3QgYmUgb25lIG9mIHR3byB0aGluZ3MsIGVpdGhlciB0aGV5CiAgICAgICAgICAgICAgICAgICAgbXVzdCBjZWFzZSB0byByZXNpZGUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIG9yIGhlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgdGhvdWdoIG9uIGFsbAogICAgICAgICAgICAgICAgICAgIHByZXZpb3VzIG9jY2FzaW9ucywgd2hlbiBhY2N1c2VkIG9mIGhvc3RpbGUgaW50ZW50aW9ucywgaGUgaW5kaWduYW50bHkgc2VudAogICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3JzIHRvIGp1c3RpZnkgaGlzIGNvbmR1Y3QuIEFnYWluLCB3aGVuIGhlIHdhcyBtYXJjaGluZyBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgIFBob2NpYW5zLCBoZSBzdGlsbCBwcmV0ZW5kZWQgdGhhdCB0aGV5IHdlcmUgaGlzIGFsbGllcywgYW5kIFBob2NpYW4gYW1iYXNzYWRvcnMKICAgICAgICAgICAgICAgICAgICBhY2NvbXBhbmllZCBoaW0gb24gaGlzIG1hcmNoLCBhbmQgbW9zdCBwZW9wbGUgaGVyZSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gY29udGVuZGVkIHRoYXQgaGlzIHBhc3NhZ2UgdGhyb3VnaAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gSnVseSAzNDYsIHdoZW4gdGhlIFBob2NpYW5zIHdlcmUgaG9sZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+IGFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgUGhpbGlwLCB0aGUgQXRoZW5pYW5zIHJlZnVzZWQgdG8gaGVscCB0aGVtLCBiZWluZyBtaXNsZWQgYnkgQWVzY2hpbmVzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBQaGlsb2NyYXRlcywgd2hvIHJlcHJlc2VudGVkIHRoYXQgUGhpbGlwJ3MgcmVhbCBob3N0aWxpdHkgd2FzIGRpcmVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlIFRoZWJhbnMuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjM1IiB2YWxpZD0ieWVzIj5EZW0uIDE4LjM1PC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA1LjEwIiB2YWxpZD0ieWVzIj5EZW0uIDUuMTA8L2JpYmw+Ljwvbm90ZT4gd291bGQgYmUgYW55dGhpbmcgYnV0IGEgZ2FpbiB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBUaGViYW5zLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4gYWdhaW5zdAogICAgICAgICAgICAgICAgICAgICAgICBQaGlsaXAsIHRoZSBBdGhlbmlhbnMgcmVmdXNlZCB0byBoZWxwIHRoZW0sIGJlaW5nIG1pc2xlZCBieSBBZXNjaGluZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIFBoaWxvY3JhdGVzLCB3aG8gcmVwcmVzZW50ZWQgdGhhdCBQaGlsaXAncyByZWFsIGhvc3RpbGl0eSB3YXMgZGlyZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgVGhlYmFucy4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMzUiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMzU8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDUuMTAiIHZhbGlkPSJ5ZXMiPkRlbS4gNS4xMDwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['9.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlbiBhZ2FpbiBxdWl0ZSBsYXRlbHksCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgZW50ZXJpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4gYXMgYSBmcmllbmQgYW5kCiAgICAgICAgICAgICAgICAgICAgYWxseSwgaGUgc2VpemVkIFBoZXJhZSBhbmQgc3RpbGwgcmV0YWlucyBpdDsgYW5kIGxhc3RseSwgaGUgaW5mb3JtZWQgdGhvc2UgcG9vcgogICAgICAgICAgICAgICAgICAgIHdyZXRjaGVzLCB0aGUgcGVvcGxlIG9mIE9yZXVzLCB0aGF0IGhlIGhhZCBzZW50IGhpcyBzb2xkaWVycyB0byBwYXkgdGhlbSBhIHZpc2l0CiAgICAgICAgICAgICAgICAgICAgb2Ygc3ltcGF0aHkgaW4gYWxsIGdvb2R3aWxsLCBmb3IgaGUgdW5kZXJzdG9vZCB0aGF0IHRoZXkgd2VyZSBzdWZmZXJpbmcgZnJvbQogICAgICAgICAgICAgICAgICAgIGFjdXRlIGludGVybmFsIHRyb3VibGUsIGFuZCBpdCB3YXMgdGhlIGR1dHkgb2YgdHJ1ZSBmcmllbmRzIGFuZCBhbGxpZXMgdG8gYmUgYXQKICAgICAgICAgICAgICAgICAgICB0aGVpciBzaWRlIG9uIHN1Y2ggb2NjYXNpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZG8geW91CiAgICAgICAgICAgICAgICAgICAgaW1hZ2luZSB0aGF0LCB3aGlsZSBpbiB0aGUgY2FzZSBvZiB0aG9zZSB3aG8gY291bGQgaGF2ZSBpbmZsaWN0ZWQgbm8gaGFybSwKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggdGhleSBtaWdodCBwZXJoYXBzIGhhdmUgcHJvdGVjdGVkIHRoZW1zZWx2ZXMgYWdhaW5zdCBpdCwgaGUgcHJlZmVycmVkIHRvCiAgICAgICAgICAgICAgICAgICAgZGVjZWl2ZSB0aGVtIHJhdGhlciB0aGFuIHRvIGNydXNoIHRoZW0gYWZ0ZXIgZHVlIHdhcm5pbmcsIGluIHlvdXIgY2FzZSBoZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSB3YXJuaW5nIG9mIGhvc3RpbGl0aWVzLCBlc3BlY2lhbGx5IHdoZW4geW91IGFyZSBzbyBlYWdlciB0byBiZSBkZWNlaXZlZD8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5JbXBvc3NpYmxlISBGb3IgaW5kZWVkIGhlIHdvdWxkIGJlIHRoZQogICAgICAgICAgICAgICAgICAgIG1vc3QgZmF0dW91cyBtYW4gb24gZWFydGggaWYsIHdoZW4geW91LCBoaXMgdmljdGltcywgY2hhcmdlIGhpbSB3aXRoIG5vIGNyaW1lLAogICAgICAgICAgICAgICAgICAgIGJ1dCB0aHJvdyB0aGUgYmxhbWUgb24gc29tZSBvZiB5b3VyIG93biBmZWxsb3ctY2l0aXplbnMsIGhlIHNob3VsZCBjb21wb3NlIHlvdXIKICAgICAgICAgICAgICAgICAgICBtdXR1YWwgZGlmZmVyZW5jZXMgYW5kIGplYWxvdXNpZXMsIGFuZCBpbnZpdGUgeW91IHRvIHR1cm4gdGhlbSBhZ2FpbnN0IGhpbXNlbGYsCiAgICAgICAgICAgICAgICAgICAgYW5kIHNob3VsZCBkZXByaXZlIGhpcyBvd24gaGlyZWxpbmdzIG9mIHRoZSBleGN1c2VzIHdpdGggd2hpY2ggdGhleSBwdXQgeW91IG9mZiwKICAgICAgICAgICAgICAgICAgICBzYXlpbmcgdGhhdCBhdCBhbnkgcmF0ZSBpdCBpcyBub3QgUGhpbGlwIHdobyBpcyBtYWtpbmcgd2FyIG9uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['9.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0LCBpbiBoZWF2ZW4ncyBuYW1lLCBpcyB0aGVyZSBhbnkKICAgICAgICAgICAgICAgICAgICBpbnRlbGxpZ2VudCBtYW4gd2hvIHdvdWxkIGxldCB3b3JkcyByYXRoZXIgdGhhbiBkZWVkcyBkZWNpZGUgdGhlIHF1ZXN0aW9uIHdobyBpcwogICAgICAgICAgICAgICAgICAgIGF0IHBlYWNlIGFuZCB3aG8gaXMgYXQgd2FyIHdpdGggaGltPyBTdXJlbHkgbm8gb25lLiBOb3cgaXQgd2FzIFBoaWxpcCB3aG8gYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgdmVyeSBzdGFydCwgYXMgc29vbiBhcyBwZWFjZSB3YXMgY29uY2x1ZGVkLCBiZWZvcmUgRGlvcGl0aGVzIHdhcyBhcHBvaW50ZWQKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsLCBiZWZvcmUgdGhlIGZvcmNlIG5vdyBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcyODUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzI4NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPiBoYWQgYmVlbiBkaXNwYXRjaGVkLCBwcm9jZWVkZWQgdG8gb2NjdXB5IFNlcnJpdW0gYW5kCiAgICAgICAgICAgICAgICAgICAgRG9yaXNjdXMgYW5kIGV4cGVsbGVkIGZyb20gdGhlIEZvcnQgU2VycmV1bSBhbmQgdGhlIFNhY3JlZCBNb3VudCB0aGUgZ2Fycmlzb24KICAgICAgICAgICAgICAgICAgICB3aGljaCB5b3VyIG93biBnZW5lcmFsIGhhZCBwb3N0ZWQgdGhlcmUuIDwvdHJhbnNsYXRpb24+"
translation['9.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQKICAgICAgICAgICAgICAgICAgICB3aGF0IGRpZCB0aGF0IG1vdmUgb2YgaGlzIG1lYW4/IEZvciBpdCB3YXMgcGVhY2UgdGhhdCBoZSBoYWQgc3dvcm48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Tm90IHN0cmljdGx5IHRydWU7IGZvciBQaGlsaXAgaGFkIG5vdCB5ZXQgdGFrZW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG9hdGgsIHRob3VnaCB0aGUgQXRoZW5pYW5zIGhhZC4gSGVuY2UgQmxhc3Mgd2lzaGVkIHRvIHJlYWQ8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OteG8sM+B4b21zr3OtyAuIC4gLiDhvaDOvOG9vc68zr/PhM6/PC9mb3JlaWduPi48L25vdGU+IHRvIG9ic2VydmU7IGFuZAogICAgICAgICAgICAgICAgICAgIGxldCBubyBvbmUgc2F5LCDigJxXaGF0IG9mIGFsbCB0aGlzPyBIb3cgZG8gYW55IG9mIHRoZXNlIHRoaW5ncyBjb25jZXJuCiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs614bywz4HhvbXOvc63IC4gLiAuIOG9oM684b29zrzOv8+Ezr88L2ZvcmVpZ24+LjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPj/igJ0gRm9yIHdoZXRoZXIKICAgICAgICAgICAgICAgICAgICB0aGV5IHdlcmUgc21hbGwgdGhpbmdzLCBvciB3aGV0aGVyIHRoZXkgd2VyZSBubyBjb25jZXJuIG9mIHlvdXJzLCBtYXkgYmUgYW5vdGhlcgogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLiBCdXQgcmVsaWdpb24gYW5kIGp1c3RpY2UsIHdoZXRoZXIgYSBtYW4gdmlvbGF0ZXMgdGhlbSBpbiBhIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgbWF0dGVyIG9yIGluIGEgZ3JlYXQsIGhhdmUgdGhlIHNhbWUgaW1wb3J0YW5jZS4gVGVsbCBtZSBub3c6IHdoZW4gaGUgc2VuZHMKICAgICAgICAgICAgICAgICAgICBtZXJjZW5hcmllcyB0byB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcyODUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzI4NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPiwgeW91cgogICAgICAgICAgICAgICAgICAgIGNsYWltIHRvIHdoaWNoIGhhcyBiZWVuIHJlY29nbml6ZWQgYnkgdGhlIGtpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDAyMzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDIzMSI+UGVyc2lhPC9wbGFjZU5hbWU+IGFuZCBieSBhbGwgdGhlIEdyZWVrcywgd2hlbiBoZSBhZG1pdHMgdGhhdCBoZSBpcyBoZWxwaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIENhcmRpYW5zIGFuZCB3cml0ZXMgdG8gdGVsbCB5b3Ugc28sIHdoYXQgZG9lcyBoZSBtZWFuPyBGb3IgaGUgc2F5cyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaXMgbm90IGF0IHdhciwgPC90cmFuc2xhdGlvbj4="
translation['9.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5idXQgZm9yIG15IHBhcnQsIHNvIGZhciBmcm9tCiAgICAgICAgICAgICAgICAgICAgYWRtaXR0aW5nIHRoYXQgaW4gYWN0aW5nIHRodXMgaGUgaXMgbm90IG9ic2VydmluZyB0aGUgcGVhY2Ugd2l0aCB5b3UsIEkgYXNzZXJ0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB3aGVuIGhlIGxheXMgaGFuZHMgb24gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhcmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lZ2FyYSI+TWVnYXJhPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIHNldHMgdXAgdHlyYW5uaWVzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiwgbWFrZXMgaGlzCiAgICAgICAgICAgICAgICAgICAgd2F5LCBhcyBub3csIGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+LCBoYXRjaGVzIHBsb3RzCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXNlPC9wbGFjZU5hbWU+LCBhbmQgY2FycmllcyBvdXQgYWxsCiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9ucyB3aXRoIGhpcyBhcm1lZCBmb3JjZSwgaGUgaXMgYnJlYWtpbmcgdGhlIHBlYWNlIGFuZCBtYWtpbmcgd2FyIHVwb24KICAgICAgICAgICAgICAgICAgICB5b3XigJR1bmxlc3MgeW91IGFyZSBwcmVwYXJlZCB0byBzYXkgdGhhdCBtZW4gd2hvIGJyaW5nIHVwIHRoZQogICAgICAgICAgICAgICAgICAgIHNpZWdlLWVuZ2luZXMgYXJlIGtlZXBpbmcgdGhlIHBlYWNlIHVudGlsIHRoZXkgYWN0dWFsbHkgYnJpbmcgdGhlbSB0byBiZWFyIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIHdhbGxzLiBCdXQgeW91IHdpbGwgbm90IGFkbWl0IHRoYXQ7IGZvciBoZSB3aG8gbWFrZXMgYW5kIGRldmlzZXMgdGhlIG1lYW5zCiAgICAgICAgICAgICAgICAgICAgYnkgd2hpY2ggSSBtYXkgYmUgY2FwdHVyZWQgaXMgYXQgd2FyIHdpdGggbWUsIGV2ZW4gdGhvdWdoIGhlIGhhcyBub3QgeWV0IGh1cmxlZAogICAgICAgICAgICAgICAgICAgIGEgamF2ZWxpbiBvciBzaG90IGEgYm9sdC4gPC90cmFuc2xhdGlvbj4="
translation['9.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB3aGF0IHRoZW4KICAgICAgICAgICAgICAgICAgICBjb25zaXN0cyB5b3VyIGRhbmdlciwgaWYgYW55dGhpbmcgc2hvdWxkIGhhcHBlbj8gSW4gdGhlIGFsaWVuYXRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4sIGluIHRoZSBjb250cm9sIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVnYXJhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhcmEiPk1lZ2FyYTwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGJ5IG9uZSB3aG8gaXMgYXQgd2FyIHdpdGggeW91LCBhbmQgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgZGVmZWN0aW9uIG9mIHRoZSBQZWxvcG9ubmVzaWFucyB0byBoaXMgc2lkZS4gQW0gSSBzdGlsbCB0byBzYXkgdGhhdCB0aGUgbWFuCiAgICAgICAgICAgICAgICAgICAgd2hvIGJyaW5ncyB0aGlzIHNpZWdlLWVuZ2luZSB0byBiZWFyIG9uIHlvdXIgY2l0eSBpcyBhdCBwZWFjZSB3aXRoIHlvdT8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBmYXIgZnJvbSBzYXlpbmcgdGhhdCwgSSBkYXRlIGhpcwogICAgICAgICAgICAgICAgICAgIGhvc3RpbGl0eSBmcm9tIHRoZSB2ZXJ5IGRheSB3aGVuIGhlIHdpcGVkIG91dCB0aGUgUGhvY2lhbnMuIEkgc2F5IHRoYXQgeW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBiZSB3aXNlIGlmIHlvdSBkZWZlbmQgeW91cnNlbHZlcyBub3csIGJ1dCBpZiB5b3UgbGV0IHRoZSBvcHBvcnR1bml0eSBwYXNzLCB5b3UKICAgICAgICAgICAgICAgICAgICB3aWxsIG5vdCBiZSBhYmxlIHRvIGFjdCBldmVuIHdoZW4geW91IGRlc2lyZSB0by4gSSBzbyBmYXIgZGlzc2VudCwgQXRoZW5pYW5zLAogICAgICAgICAgICAgICAgICAgIGZyb20gYWxsIHlvdSBjb3Vuc2VsbG9ycyB0aGF0IEkgZG8gbm90IHRoaW5rIHlvdSBvdWdodCB0byB0cm91YmxlIHlvdXJzZWx2ZXMgbm93CiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwMzQ1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTAzNDUiPkNoZXJzb25lc2U8L3BsYWNlTmFtZT4gb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCeXphbnRpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJ5emFudGl1bSI+Qnl6YW50aXVtPC9wbGFjZU5hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['9.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5IZWxwIHRoZW0sIGlmIHlvdSB3aWxsLCBndWFyZCB0aGVtIGZyb20gaGFybSBbc3VwcGx5IHRoZQogICAgICAgICAgICAgICAgICAgIHRyb29wcyBhbHJlYWR5IHRoZXJlIHdpdGggYWxsIHRoYXQgdGhleSByZXF1aXJlXSwgYnV0IGxldCB5b3VyCiAgICAgICAgICAgICAgICAgICAgZGVsaWJlcmF0aW9ucyBlbWJyYWNlIGFsbCB0aGUgR3JlZWsgc3RhdGVzIGFuZCB0aGUgZ3JlYXQgZGFuZ2VyIHRoYXQgYmVzZXRzCiAgICAgICAgICAgICAgICAgICAgdGhlbS4gQnV0IEkgd2lzaCB0byB0ZWxsIHlvdSB0aGUgZ3JvdW5kcyBmb3IgbXkgYWxhcm0gYWJvdXQgb3VyIGNvbmRpdGlvbiwgc28KICAgICAgICAgICAgICAgICAgICB0aGF0IGlmIG15IHJlYXNvbmluZyBpcyBzb3VuZCwgeW91IG1heSBhZG9wdCBpdCBhcyB5b3VyIG93biBhbmQgdGFrZSBmb3JldGhvdWdodAogICAgICAgICAgICAgICAgICAgIGZvciB5b3Vyc2VsdmVzLCBldmVuIGlmIHlvdSByZWZ1c2UgdG8gdGFrZSBpdCBmb3IgdGhlIG90aGVycyBhbHNvOyBidXQgaWYgSSBzZWVtCiAgICAgICAgICAgICAgICAgICAgdG8geW91IGEgZHJpdmVsZXIgYW5kIGEgZG90YXJkLCBuZWl0aGVyIG5vdyBub3IgYXQgYW55IG90aGVyIHRpbWUgcGF5IGFueSBoZWVkCiAgICAgICAgICAgICAgICAgICAgdG8gbWUgYXMgaWYgSSB3ZXJlIGluIG15IHNlbnNlcy4gPC90cmFuc2xhdGlvbj4="
translation['9.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXMgZm9yIHRoZSBmYWN0LCB0aGVuLCB0aGF0IFBoaWxpcCByb3NlIHRvIGdyZWF0bmVzcwogICAgICAgICAgICAgICAgICAgIGZyb20gc21hbGwgYW5kIGh1bWJsZSBiZWdpbm5pbmdzLCB0aGF0IHRoZSBHcmVlayBzdGF0ZXMgYXJlIG11dHVhbGx5IGRpc2xveWFsCiAgICAgICAgICAgICAgICAgICAgYW5kIGZhY3Rpb3VzLCBhbmQgdGhhdCB0aGUgaW5jcmVhc2Ugb2YgUGhpbGlwJ3MgcG93ZXIgaW4gdGhlIHBhc3Qgd2FzIGEgZmFyCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlciBtaXJhY2xlIHRoYW4gdGhlIGNvbXBsZXRpb24gb2YgaGlzIGNvbnF1ZXN0cyBub3cgdGhhdCBoZSBoYXMgYWxyZWFkeQogICAgICAgICAgICAgICAgICAgIGdhaW5lZCBzbyBtdWNoLCB0aGVzZSBhbmQgYWxsIHN1Y2ggdG9waWNzIG9uIHdoaWNoIEkgbWlnaHQgZXhwYXRpYXRlLCBJIHdpbGwKICAgICAgICAgICAgICAgICAgICBwYXNzIG92ZXIgaW4gc2lsZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['9.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5JIG9ic2VydmUsIGhvd2V2ZXIsIHRoYXQKICAgICAgICAgICAgICAgICAgICBhbGwgbWVuLCBhbmQgeW91IGZpcnN0IG9mIGFsbCwgaGF2ZSBjb25jZWRlZCB0byBoaW0gc29tZXRoaW5nIHdoaWNoIGhhcyBiZWVuIHRoZQogICAgICAgICAgICAgICAgICAgIG9jY2FzaW9uIG9mIGV2ZXJ5IHdhciB0aGF0IHRoZSBHcmVla3MgaGF2ZSBldmVyIHdhZ2VkLiBBbmQgd2hhdCBpcyB0aGF0PyBUaGUKICAgICAgICAgICAgICAgICAgICBwb3dlciBvZiBkb2luZyB3aGF0IGhlIGxpa2VzLCBvZiBjYWxtbHkgcGx1bmRlcmluZyBhbmQgc3RyaXBwaW5nIHRoZSBHcmVla3Mgb25lCiAgICAgICAgICAgICAgICAgICAgYnkgb25lLCBhbmQgb2YgYXR0YWNraW5nIHRoZWlyIGNpdGllcyBhbmQgcmVkdWNpbmcgdGhlbSB0byBzbGF2ZXJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['9.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgeW91ciBoZWdlbW9ueSBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gbGFzdGVkIHNldmVudHktZml2ZSB5ZWFycywgdGhhdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4gdHdlbnR5LW5pbmUsIGFuZCBpbiB0aGVzZSBsYXRlcgogICAgICAgICAgICAgICAgICAgIHRpbWVzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiB0b28gZ2FpbmVkIHNvbWUgc29ydCBvZgogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eSBhZnRlciB0aGUgYmF0dGxlIG9mIExldWN0cmEuIEJ1dCBuZWl0aGVyIHRvIHlvdSBub3IgdG8gdGhlIFRoZWJhbnMgbm9yCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIExhY2VkYWVtb25pYW5zIGRpZCB0aGUgR3JlZWtzIGV2ZXIgeWV0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBjb25jZWRlIHRoZSByaWdodCBvZiB1bnJlc3RyaWN0ZWQKICAgICAgICAgICAgICAgICAgICBhY3Rpb24sIG9yIGFueXRoaW5nIGxpa2UgaXQuIDwvdHJhbnNsYXRpb24+"
translation['9.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgY29udHJhcnksCiAgICAgICAgICAgICAgICAgICAgd2hlbiB5b3UsIG9yIHJhdGhlciB0aGUgQXRoZW5pYW5zIG9mIHRoYXQgZGF5LCB3ZXJlIHRob3VnaHQgdG8gYmUgc2hvd2luZyBhIHdhbnQKICAgICAgICAgICAgICAgICAgICBvZiBjb25zaWRlcmF0aW9uIGluIGRlYWxpbmcgd2l0aCBvdGhlcnMsIGFsbCBmZWx0IGl0IHRoZWlyIGR1dHksIGV2ZW4gdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgaGFkIG5vIGdyaWV2YW5jZSBhZ2FpbnN0IHRoZW0sIHRvIGdvIHRvIHdhciBpbiBzdXBwb3J0IG9mIHRob3NlIHdobyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGluanVyZWQ7IGFuZCBhZ2Fpbiwgd2hlbiB0aGUgTGFjZWRhZW1vbmlhbnMgaGFkIHJpc2VuIHRvIHBvd2VyIGFuZCBzdWNjZWVkZWQgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIHBvc2l0aW9uIG9mIHN1cHJlbWFjeSwgYW5kIHdoZW4gdGhleSBzZXQgdG8gd29yayB0byBlbmNyb2FjaCBvbiBvdGhlcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgaW50ZXJmZXJlZCB1bmR1bHkgd2l0aCB0aGUgZXN0YWJsaXNoZWQgb3JkZXIgb2YgdGhpbmdzLCBhbGwgdGhlIEdyZWVrcyB3ZXJlIHVwCiAgICAgICAgICAgICAgICAgICAgaW4gYXJtcywgZXZlbiB0aG9zZSB3aG8gaGFkIG5vIGdyaWV2YW5jZSBvZiB0aGVpciBvd24uIDwvdHJhbnNsYXRpb24+"
translation['9.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5XaHkgbmVlZCBJIHJlZmVyIHRvIHRoZSBvdGhlciBzdGF0ZXM/IE5heSwgd2Ugb3Vyc2VsdmVzIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBMYWNlZGFlbW9uaWFucywgdGhvdWdoIGF0IHRoZSBvdXRzZXQgd2UgY291bGQgbm90IGhhdmUgc3BlY2lmaWVkIGFueSB3cm9uZyBhdAogICAgICAgICAgICAgICAgICAgIGVhY2ggb3RoZXIncyBoYW5kcywgdGhvdWdodCBpdCBvdXIgZHV0eSB0byBmaWdodCBvbiBhY2NvdW50IG9mIHdyb25ncyB3aGljaCB3ZQogICAgICAgICAgICAgICAgICAgIHNhdyB0aGUgb3RoZXIgc3RhdGVzIHN1ZmZlcmluZy4gWWV0IGFsbCB0aGUgZmF1bHRzIGNvbW1pdHRlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBMYWNlZGFlbW9uaWFucyBpbiB0aG9zZSB0aGlydHkgeWVhcnMsIGFuZCBieSBvdXIgYW5jZXN0b3JzIGluIHRoZWlyIHNldmVudHkKICAgICAgICAgICAgICAgICAgICB5ZWFycyBvZiBzdXByZW1hY3ksIGFyZSBmZXdlciwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhbiB0aGUgd3JvbmdzIHdoaWNoIFBoaWxpcCBoYXMgZG9uZSB0byB0aGUgR3JlZWtzIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHRoaXJ0ZWVuIGluY29tcGxldGUgeWVhcnMgaW4gd2hpY2ggaGUgaGFzIGJlZW4gY29taW5nIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHRvcOKAlG9yIHJhdGhlciwgdGhleSBhcmUgbm90IGEgZnJhY3Rpb24gb2YgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['9.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5bQW5kIHRoaXMgaXMgZWFzaWx5IHByb3ZlZCBieSBhIHNob3J0CiAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRpb24uXSBJIHBhc3Mgb3ZlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWV0aG9uZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWV0aG9uZSI+TWV0aG9uZTwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBcG9sbG9uaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFwb2xsb25pYSI+QXBvbGxvbmlhPC9wbGFjZU5hbWU+IGFuZCB0aGUgdHdvIGFuZCB0aGlydHkgY2l0aWVzIGluIG9yIG5lYXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+LCBhbGwgb2Ygd2hpY2ggUGhpbGlwIGhhcyBkZXN0cm95ZWQgc28KICAgICAgICAgICAgICAgICAgICBydXRobGVzc2x5IHRoYXQgYSB0cmF2ZWxlciB3b3VsZCBmaW5kIGl0IGhhcmQgdG8gc2F5IHdoZXRoZXIgdGhleSBoYWQgZXZlciBiZWVuCiAgICAgICAgICAgICAgICAgICAgaW5oYWJpdGVkLiBJIHNheSBub3RoaW5nIG9mIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgaW1wb3J0YW50IG5hdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBQaG9jaWFucy4gQnV0IGhvdyBzdGFuZHMgdGhlIGNhc2Ugb2YgdGhlIFRoZXNzYWxpYW5zPyBIYXMgaGUgbm90IHJvYmJlZCB0aGVtIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZnJlZSBjb25zdGl0dXRpb25zIGFuZCBvZiB0aGVpciB2ZXJ5IGNpdGllcywgc2V0dGluZyB1cCB0ZXRyYXJjaGllcyBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRvIGVuc2xhdmUgdGhlbSwgbm90IGNpdHkgYnkgY2l0eSwgYnV0IHRyaWJlIGJ5IHRyaWJlPyA8L3RyYW5zbGF0aW9uPg=="
translation['9.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5BcmUgbm90IHR5cmFubmllcyBhbHJlYWR5IGVzdGFibGlzaGVkIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiwgYW4gaXNsYW5kLCByZW1lbWJlciwgbm90IGZhciBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+PyBEb2VzIGhlIG5vdCB3cml0ZSBleHBsaWNpdGx5IGluIGhpcwogICAgICAgICAgICAgICAgICAgIGxldHRlcnMsIOKAnEkgYW0gYXQgcGVhY2Ugd2l0aCB0aG9zZSB3aG8gYXJlIHdpbGxpbmcgdG8gb2JleQogICAgICAgICAgICAgICAgICAgIG1l4oCdPyBBbmQgaGUgZG9lcyBub3QgbWVyZWx5IHdyaXRlIHRoaXMgd2l0aG91dCBwdXR0aW5nIGl0IGludG8KICAgICAgICAgICAgICAgICAgICBwcmFjdGljZTsgYnV0IGhlIGlzIG9mZiB0byB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYzOCI+SGVsbGVzcG9udDwvcGxhY2VOYW1lPiwganVzdCBhcyBiZWZvcmUgaGUgaHVycmllZCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtYnJhY2lhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbWJyYWNpYSI+QW1icmFjaWE8L3BsYWNlTmFtZT47IGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzZTwvcGxhY2VOYW1lPiBoZSBvY2N1cGllcyB0aGUgaW1wb3J0YW50IGNpdHkgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFbGlzIj5FbGlzPC9wbGFjZU5hbWU+OyBvbmx5IHRoZSBvdGhlciBkYXkgaGUKICAgICAgICAgICAgICAgICAgICBpbnRyaWd1ZWQgYWdhaW5zdCB0aGUgTWVnYXJpYW5zLiBOZWl0aGVyIHRoZSBHcmVlayBub3IgdGhlIGJhcmJhcmlhbiB3b3JsZCBpcwogICAgICAgICAgICAgICAgICAgIGJpZyBlbm91Z2ggZm9yIHRoZSBmZWxsb3cncyBhbWJpdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['9.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2UKICAgICAgICAgICAgICAgICAgICBHcmVla3Mgc2VlIGFuZCBoZWFyIGFsbCB0aGlzLCBhbmQgeWV0IHdlIGRvIG5vdCBzZW5kIGVtYmFzc2llcyB0byBvbmUgYW5vdGhlcgogICAgICAgICAgICAgICAgICAgIGFuZCBleHByZXNzIG91ciBpbmRpZ25hdGlvbi4gV2UgYXJlIGluIHN1Y2ggYSBtaXNlcmFibGUgcG9zaXRpb24sIHdlIGhhdmUgc28KICAgICAgICAgICAgICAgICAgICBlbnRyZW5jaGVkIG91cnNlbHZlcyBpbiBvdXIgZGlmZmVyZW50IGNpdGllcywgdGhhdCB0byB0aGlzIHZlcnkgZGF5IHdlIGNhbiBkbwogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgdGhhdCBvdXIgaW50ZXJlc3Qgb3Igb3VyIGR1dHkgZGVtYW5kczsgd2UgY2Fubm90IGNvbWJpbmUsIHdlIGNhbm5vdCB0YWtlCiAgICAgICAgICAgICAgICAgICAgYW55IGNvbW1vbiBwbGVkZ2Ugb2YgaGVscCBvciBmcmllbmRzaGlwOyA8L3RyYW5zbGF0aW9uPg=="
translation['9.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5idXQKICAgICAgICAgICAgICAgICAgICB3ZSBpZGx5IHdhdGNoIHRoZSBncm93aW5nIHBvd2VyIG9mIHRoaXMgbWFuLCBlYWNoIGJlbnQg77yIb3Igc28gaXQgc2VlbXMKICAgICAgICAgICAgICAgICAgICB0byBtZe+8iSBvbiBwcm9maXRpbmcgYnkgdGhlIGludGVydmFsIGFmZm9yZGVkIGJ5IGFub3RoZXIncyBydWluLCB0YWtpbmcKICAgICAgICAgICAgICAgICAgICBub3QgYSB0aG91Z2h0LCBtYWtpbmcgbm90IGFuIGVmZm9ydCBmb3IgdGhlIHNhbHZhdGlvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4uIEZvciB0aGF0IFBoaWxpcCwgbGlrZSB0aGUgcmVjdXJyZW5jZQogICAgICAgICAgICAgICAgICAgIG9yIGF0dGFjayBvZiBhIGZldmVyIG9yIHNvbWUgb3RoZXIgZGlzZWFzZSwgaXMgdGhyZWF0ZW5pbmcgZXZlbiB0aG9zZSB3aG8gdGhpbmsKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIG91dCBvZiByZWFjaCwgb2YgdGhhdCBub3Qgb25lIG9mIHlvdSBpcyBpZ25vcmFudC4gPC90cmFuc2xhdGlvbj4="
translation['9.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5BeSwgYW5kIHlvdSBrbm93IHRoaXMgYWxzbywgdGhhdCB0aGUgd3JvbmdzIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgIEdyZWVrcyBzdWZmZXJlZCBmcm9tIHRoZSBMYWNlZGFlbW9uaWFucyBvciBmcm9tIHVzLCB0aGV5IHN1ZmZlcmVkIGF0IGFsbCBldmVudHMKICAgICAgICAgICAgICAgICAgICBhdCB0aGUgaGFuZHMgb2YgdHJ1ZS1ib3JuIHNvbnMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCBhbmQgdGhleSBtaWdodCBoYXZlIGJlZW4gcmVnYXJkZWQgYXMgdGhlIGFjdHMgb2YgYQogICAgICAgICAgICAgICAgICAgIGxlZ2l0aW1hdGUgc29uLCBib3JuIHRvIGdyZWF0IHBvc3Nlc3Npb25zLCB3aG8gc2hvdWxkIGJlIGd1aWx0eSBvZiBzb21lIGZhdWx0IG9yCiAgICAgICAgICAgICAgICAgICAgZXJyb3IgaW4gdGhlIG1hbmFnZW1lbnQgb2YgaGlzIGVzdGF0ZTogc28gZmFyIGhlIHdvdWxkIGRlc2VydmUgYmxhbWUgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVwcm9hY2gsIHlldCBpdCBjb3VsZCBub3QgYmUgc2FpZCB0aGF0IGl0IHdhcyBub3Qgb25lIG9mIHRoZSBibG9vZCwgbm90IHRoZQogICAgICAgICAgICAgICAgICAgIGxhd2Z1bCBoZWlyIHdobyB3YXMgYWN0aW5nIHRodXMuIDwvdHJhbnNsYXRpb24+"
translation['9.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgc29tZQogICAgICAgICAgICAgICAgICAgIHNsYXZlIG9yIHN1cGVyc3RpdGlvdXMgYmFzdGFyZCBoYWQgd2FzdGVkIGFuZCBzcXVhbmRlcmVkIHdoYXQgaGUgaGFkIG5vIHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgdG8sIGhlYXZlbnMhIGhvdyBtdWNoIG1vcmUgbW9uc3Ryb3VzIGFuZCBleGFzcGVyYXRpbmcgYWxsIHdvdWxkIGhhdmUgY2FsbGVkIGl0IQogICAgICAgICAgICAgICAgICAgIFlldCB0aGV5IGhhdmUgbm8gc3VjaCBxdWFsbXMgYWJvdXQgUGhpbGlwIGFuZCBoaXMgcHJlc2VudCBjb25kdWN0LCB0aG91Z2ggaGUgaXMKICAgICAgICAgICAgICAgICAgICBub3Qgb25seSBubyBHcmVlaywgbm9yIHJlbGF0ZWQgdG8gdGhlIEdyZWVrcywgYnV0IG5vdCBldmVuIGEgYmFyYmFyaWFuIGZyb20gYW55CiAgICAgICAgICAgICAgICAgICAgcGxhY2UgdGhhdCBjYW4gYmUgbmFtZWQgd2l0aCBob25vciwgYnV0IGEgcGVzdGlsZW50IGtuYXZlIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCB3aGVuY2UgaXQgd2FzIG5ldmVyIHlldCBwb3NzaWJsZSB0bwogICAgICAgICAgICAgICAgICAgIGJ1eSBhIGRlY2VudCBzbGF2ZS4gPC90cmFuc2xhdGlvbj4="
translation['9.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WWV0IHdoYXQgaXMgd2FudGluZyB0byBjcm93biBoaXMgaW5zb2xlbmNlPyBOb3QgY29udGVudCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGRlc3RydWN0aW9uIG9mIGNpdGllcywgaXMgaGUgbm90IG9yZ2FuaXppbmcgdGhlIFB5dGhpYW4gZ2FtZXMsIHRoZSBjb21tb24KICAgICAgICAgICAgICAgICAgICBmZXN0aXZhbCBvZiB0aGUgR3JlZWtzLCBhbmQgaWYgaGUgY2Fubm90IGJlIHByZXNlbnQgaW4gcGVyc29uLCBzZW5kaW5nIGhpcwogICAgICAgICAgICAgICAgICAgIG1lbmlhbHMgdG8gYWN0IGFzIHN0ZXdhcmRzPyBbSXMgaGUgbm90IG1hc3RlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4gYW5kIHRoZSBwYXNzZXMgaW50bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIGhvbGRpbmcgdGhvc2UgcGxhY2VzIHdpdGgKICAgICAgICAgICAgICAgICAgICBoaXMgZ2Fycmlzb25zIGFuZCBoaXMgbWVyY2VuYXJpZXM/IEhhcyBoZSBub3QgdGhlIHJpZ2h0IG9mIHByZWNlZGVuY2UgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgT3JhY2xlLCBvdXN0aW5nIHVzIGFuZCB0aGUgVGhlc3NhbGlhbnMgYW5kIHRoZSBEb3JpYW5zIGFuZCB0aGUgcmVzdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBBbXBoaWN0eW9ucyBmcm9tIGEgcHJpdmlsZWdlIHdoaWNoIG5vdCBldmVuIGFsbCBHcmVlayBzdGF0ZXMgY2FuCiAgICAgICAgICAgICAgICAgICAgY2xhaW0/XSA8L3RyYW5zbGF0aW9uPg=="
translation['9.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5Eb2VzIGhlIG5vdCBkaWN0YXRlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZXNzYWxpYW5zIHRoZWlyIGZvcm0gb2YgZ292ZXJubWVudD8gRG9lcyBoZSBub3Qgc2VuZCBtZXJjZW5hcmllcywgc29tZSB0bwogICAgICAgICAgICAgICAgICAgIFBvcnRobXVzIHRvIGV4cGVsIHRoZSBFcmV0cmlhbiBkZW1vY3JhY3ksIG90aGVycyB0byBPcmV1cyB0byBzZXQgdXAgdGhlIHR5cmFubnkKICAgICAgICAgICAgICAgICAgICBvZiBQaGlsaXN0aWRlcz8gWWV0IHRoZSBHcmVla3Mgc2VlIGFsbCB0aGlzIGFuZCBzdWZmZXIgaXQuIFRoZXkgc2VlbSB0byB3YXRjaAogICAgICAgICAgICAgICAgICAgIGhpbSBqdXN0IGFzIHRoZXkgd291bGQgd2F0Y2ggYSBoYWlsc3Rvcm0sIGVhY2ggcHJheWluZyB0aGF0IGl0IG1heSBub3QgY29tZQogICAgICAgICAgICAgICAgICAgIHRoZWlyIHdheSwgYnV0IG5vbmUgbWFraW5nIGFueSBlZmZvcnQgdG8gc3RheSBpdHMgY291cnNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaXMgbm90IG9ubHkgaGlzIG91dHJhZ2VzIG9uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB0aGF0IGdvIHVuYXZlbmdlZCwgYnV0IGV2ZW4gdGhlIHdyb25ncwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGVhY2ggc3VmZmVycyBzZXBhcmF0ZWx5LiBGb3Igbm90aGluZyBjYW4gZ28gYmV5b25kIHRoYXQuIEFyZSBub3QgdGhlCiAgICAgICAgICAgICAgICAgICAgQ29yaW50aGlhbnMgaGl0IGJ5IGhpcyBpbnZhc2lvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtYnJhY2lhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbWJyYWNpYSI+QW1icmFjaWE8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzEyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MTIiPkxldWNhczwvcGxhY2VOYW1lPj8KICAgICAgICAgICAgICAgICAgICBUaGUgQWNoYWVhbnMgYnkgaGlzIHZvdyB0byB0cmFuc2ZlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTE3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMTc0Ij5OYXVwYWN0dXM8L3BsYWNlTmFtZT4gdG8gdGhlIEFldG9saWFucz8gVGhlIFRoZWJhbnMgYnkgaGlzIHRoZWZ0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRWNoaW51cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRWNoaW51cyI+RWNoaW51czwvcGxhY2VOYW1lPj8gQW5kIGlzIGhlIG5vdCBtYXJjaGluZwogICAgICAgICAgICAgICAgICAgIGV2ZW4gbm93IGFnYWluc3QgaGlzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgdHJhbnNsYXRpb24gaXMKICAgICAgICAgICAgICAgICAgICAgICAganVzdGlmaWVkIGJ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguODciIHZhbGlkPSJ5ZXMiPkRlbS4gMTguODc8L2JpYmw+LiBPdGhlcnMg4oCcdGhlaXIKICAgICAgICAgICAgICAgICAgICAgICAgYWxsaWVzLOKAnSBzaW5jZSB0aGUgQnl6YW50aW5lcyBhcmUga25vd24gdG8gaGF2ZSBoZWxwZWQgdGhlIFRoZWJhbnMKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBtb25leSBpbiB0aGUgU2FjcmVkIFdhci4g77yIQ2F1ZXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbC4gSW5zY3IuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHci48L3RpdGxlPiAzNTMu77yJPC9ub3RlPiBhbGxpZXMgdGhlIEJ5emFudGluZXM/IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguODciIHZhbGlkPSJ5ZXMiPkRlbS4gMTguODc8L2JpYmw+LiBPdGhlcnMg4oCcdGhlaXIKICAgICAgICAgICAgICAgICAgICAgICAgYWxsaWVzLOKAnSBzaW5jZSB0aGUgQnl6YW50aW5lcyBhcmUga25vd24gdG8gaGF2ZSBoZWxwZWQgdGhlIFRoZWJhbnMKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBtb25leSBpbiB0aGUgU2FjcmVkIFdhci4g77yIQ2F1ZXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbC4gSW5zY3IuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHci48L3RpdGxlPiAzNTMu77yJPC90cmFuc2xhdGlvbj4="
translation['9.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5PZiBvdXIgb3duIHBvc3Nlc3Npb25zLCBub3QgdG8gbWVudGlvbiBvdGhlciBwbGFjZXMsCiAgICAgICAgICAgICAgICAgICAgaXMgaGUgbm90IGhvbGRpbmcgQ2FyZGlhLCB0aGUgZ3JlYXRlc3QgY2l0eSBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcyODUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzI4NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPj8gSW4gc3BpdGUgb2Ygc3VjaCB0cmVhdG1lbnQsIHdlIGhlc2l0YXRlIG9uZSBhbmQKICAgICAgICAgICAgICAgICAgICBhbGwsIHdlIHBsYXkgdGhlIGNvd2FyZCwgd2Uga2VlcCBhbiBleWUgb24gb3VyIG5laWdoYm9ycywgZGlzdHJ1c3Rpbmcgb25lCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciByYXRoZXIgdGhhbiBvdXIgY29tbW9uIGZvZS4gWWV0IGlmIGhlIHRyZWF0cyB1cyBhbGwgd2l0aCBzdWNoIGJydXRhbGl0eSwKICAgICAgICAgICAgICAgICAgICB3aGF0IGRvIHlvdSB0aGluayBoZSB3aWxsIGRvIHdoZW4gaGUgaGFzIGdvdCBlYWNoIG9mIHVzIHNlcGFyYXRlbHkgaW50byBoaXMKICAgICAgICAgICAgICAgICAgICBjbHV0Y2hlcz8gPC90cmFuc2xhdGlvbj4="
translation['9.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hhdAogICAgICAgICAgICAgICAgICAgIHRoZW4gaXMgdGhlIGNhdXNlIG9mIHRoaXM/IEZvciBub3Qgd2l0aG91dCByZWFzb24sIG5vdCB3aXRob3V0IGp1c3QgY2F1c2UsIHRoZQogICAgICAgICAgICAgICAgICAgIEdyZWVrcyBvZiBvbGQgd2VyZSBhcyBlYWdlciBmb3IgZnJlZWRvbSBhcyB0aGVpciBkZXNjZW5kYW50cyB0b2RheSBhcmUgZm9yCiAgICAgICAgICAgICAgICAgICAgc2xhdmVyeS4gVGhlcmUgd2FzIHNvbWV0aGluZywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgc29tZXRoaW5nIHdoaWNoIGFuaW1hdGVkIHRoZSBtYXNzIG9mIHRoZSBHcmVla3MgYnV0CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaXMgbGFja2luZyBub3csIHNvbWV0aGluZyB3aGljaCB0cml1bXBoZWQgb3ZlciB0aGUgd2VhbHRoIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPiwgd2hpY2ggdXBoZWxkIHRoZSBsaWJlcnRpZXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+SGVsbGFzPC9wbGFjZU5hbWU+LCB3aGljaCBuZXZlciBsb3N0IGEgc2luZ2xlCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlIGJ5IHNlYSBvciBsYW5kLCBzb21ldGhpbmcgdGhlIGRlY2F5IG9mIHdoaWNoIGhhcyBydWluZWQgZXZlcnl0aGluZyBhbmQKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IG91ciBhZmZhaXJzIHRvIGEgc3RhdGUgb2YgY2hhb3MuIEFuZCB3aGF0IHdhcyB0aGF0PyA8L3RyYW5zbGF0aW9uPg=="
translation['9.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5bSXQgd2FzIG5vdGhpbmcgcmVjb25kaXRlIG9yIHN1YnRsZSwgYnV0CiAgICAgICAgICAgICAgICAgICAgc2ltcGx5IHRoYXRdIG1lbiB3aG8gdG9vayBicmliZXMgZnJvbSB0aG9zZSB3aG8gd2lzaGVkIHRvIHJ1bGUKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IG9yIHJ1aW4gaGVyLCB3ZXJlIGhhdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgYWxsLCBhbmQgaXQgd2FzIHRoZSBncmVhdGVzdCBjYWxhbWl0eSB0byBiZSBjb252aWN0ZWQgb2YgcmVjZWl2aW5nIGEgYnJpYmUsIGFuZAogICAgICAgICAgICAgICAgICAgIHN1Y2ggYSBtYW4gd2FzIHB1bmlzaGVkIHdpdGggdGhlIHV0bW9zdCBzZXZlcml0eSBbYW5kIG5vIGludGVyY2Vzc2lvbiwKICAgICAgICAgICAgICAgICAgICBubyBwYXJkb24gd2FzIGFsbG93ZWRdLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5BdCBlYWNoCiAgICAgICAgICAgICAgICAgICAgY3Jpc2lzLCB0aGVyZWZvcmUsIHRoZSBvcHBvcnR1bml0eSBmb3IgYWN0aW9uLCB3aXRoIHdoaWNoIGZvcnR1bmUgb2Z0ZW4gZXF1aXBzCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhcmVsZXNzIGFnYWluc3QgdGhlIHZpZ2lsYW50IFthbmQgdGhvc2Ugd2hvIHNocmluayBmcm9tIGRlZWRzCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aG9zZSB3aG8gZnVsZmlsIHRoZWlyIGR1dGllc10sIGNvdWxkIG5vdCBiZSBib3VnaHQgYXQgYSBwcmljZQogICAgICAgICAgICAgICAgICAgIGZyb20gb3VyIHBvbGl0aWNpYW5zIG9yIG91ciBnZW5lcmFsczsgbm8sIG5vciBvdXIgbXV0dWFsIGNvbmNvcmQsIG5vciBvdXIKICAgICAgICAgICAgICAgICAgICBkaXN0cnVzdCBvZiB0eXJhbnRzIGFuZCBiYXJiYXJpYW5zLCBub3IsIGluIGEgd29yZCwgYW55IHN1Y2ggYWR2YW50YWdlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGhvd2V2ZXIsIGFsbCB0aGVzZSB0aGluZ3MgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgc29sZCBpbiBvcGVuIG1hcmtldCwgYW5kIGluIHBsYWNlIG9mIHRoZW0gd2UgaGF2ZSBpbXBvcnRlZCB2aWNlcyB3aGljaCBoYXZlCiAgICAgICAgICAgICAgICAgICAgaW5mZWN0ZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IHdpdGggYSBtb3J0YWwgc2lja25lc3MuCiAgICAgICAgICAgICAgICAgICAgQW5kIHdoYXQgYXJlIHRob3NlIHZpY2VzPyBFbnZ5IG9mIHRoZSBtYW4gd2hvIGhhcyBzZWN1cmVkIGhpcyBnYWluczsgY29udGVtcHQKICAgICAgICAgICAgICAgICAgICBmb3IgaGltIHdobyBjb25mZXNzZXM7IFtwYXJkb24gZm9yIHRob3NlIHdobyBhcmUgY29udmljdGVkO10KICAgICAgICAgICAgICAgICAgICBoYXRyZWQgZm9yIGhpbSB3aG8gY2Vuc3VyZXMgc3VjaCBkZWFsaW5nczsgYW5kIGV2ZXJ5IG90aGVyIHZpY2UgdGhhdCBnb2VzIGhhbmQKICAgICAgICAgICAgICAgICAgICBpbiBoYW5kIHdpdGggY29ycnVwdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['9.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2FyLWdhbGxleXMsIG1lbgogICAgICAgICAgICAgICAgICAgIGluIGFidW5kYW5jZSwgbW9uZXkgYW5kIG1hdGVyaWFsIHdpdGhvdXQgc3RpbnQsIGV2ZXJ5dGhpbmcgYnkgd2hpY2ggb25lIG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgZ2F1Z2UgdGhlIHN0cmVuZ3RoIG9mIG91ciBjaXRpZXMsIHRoZXNlIHdlIGFzIGEgYm9keSBwb3NzZXNzIHRvZGF5IGluIG51bWJlciBhbmQKICAgICAgICAgICAgICAgICAgICBxdWFudGl0eSBmYXIgYmV5b25kIHRoZSBHcmVla3Mgb2YgZm9ybWVyIHRpbWVzLiBCdXQgYWxsIG91ciByZXNvdXJjZXMgYXJlCiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWQgdXNlbGVzcywgcG93ZXJsZXNzLCB3b3J0aGxlc3MgYnkgdGhlc2UgdHJhZmZpY2tlcnMuIDwvdHJhbnNsYXRpb24+"
translation['9.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB0aGlzIGlzIHNvLCB5b3UKICAgICAgICAgICAgICAgICAgICBzdXJlbHkgc2VlIGZvciB5b3Vyc2VsdmVzIHdpdGggcmVnYXJkIHRvIHRoZSBwcmVzZW50LCBhbmQgeW91IG5lZWQgbm8gZXZpZGVuY2UKICAgICAgICAgICAgICAgICAgICBvZiBtaW5lLCBidXQgdGhhdCBpdCB3YXMgdGhlIG9wcG9zaXRlIGluIHRoZSBkYXlzIG9mIG9sZCBJIHdpbGwgcHJvdmUsIG5vdCBpbiBteQogICAgICAgICAgICAgICAgICAgIG93biB3b3JkcywgYnV0IGJ5IHRoZSB3cml0dGVuIHJlY29yZCBvZiB5b3VyIGFuY2VzdG9ycywgd2hpY2ggdGhleSBlbmdyYXZlZCBvbiBhCiAgICAgICAgICAgICAgICAgICAgYnJvbnplIHBpbGxhciBhbmQgc2V0IHVwIGluIHRoZSBBY3JvcG9saXMuIFtJdCB3YXMgbm90IGZvciB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICB1c2UsIGZvciB3aXRob3V0IHRoZXNlIGRvY3VtZW50cyB0aGVpciBpbnN0aW5jdCB3YXMgcmlnaHQ7IGJ1dCBpdCB3YXMgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBtaWdodCBoYXZlIHRoZXNlIGV4YW1wbGVzIHRvIHJlbWluZCB5b3UgdGhhdCBzdWNoIGNhc2VzIG91Z2h0IHRvIGJlIHJlZ2FyZGVkCiAgICAgICAgICAgICAgICAgICAgc2VyaW91c2x5Ll0gPC90cmFuc2xhdGlvbj4="
translation['9.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz7igJxBcnRobWl1cyBvZgogICAgICAgICAgICAgICAgICAgIFplbGVhLOKAnSBpdCBzYXlzLCDigJxzb24gb2YgUHl0aG9uYXgsIG91dGxhdyBhbmQgZW5lbXkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhbmQgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBhbGxpZXMsIGhpbXNlbGYgYW5kIGhpcyBmYW1pbHku4oCdIFRoZW4gaXMgcmVjb3JkZWQgdGhlIHJlYXNvbiBmb3IgdGhpcwogICAgICAgICAgICAgICAgICAgIHB1bmlzaG1lbnQ6IOKAnGJlY2F1c2UgaGUgY29udmV5ZWQgdGhlIGdvbGQgb2YgdGhlIE1lZGVzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzZTwvcGxhY2VOYW1lPi7igJ0gU28gcnVucyB0aGUKICAgICAgICAgICAgICAgICAgICBpbnNjcmlwdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['9.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5JIGVhcm5lc3RseSBpbXBsb3JlIHlvdSB0bwogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyIHdoYXQgd2FzIHRoZSBpbnRlbnRpb24gb2YgdGhlIEF0aGVuaWFucyB3aG8gZGlkIHRoaXMgdGhpbmcsIG9yIHdoYXQgd2FzCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcHJvdWQgY2xhaW0uIFRoZXkgcHJvc2NyaWJlZCBhcyB0aGVpciBlbmVteSBhbmQgdGhlIGVuZW15IG9mIHRoZWlyIGFsbGllcywKICAgICAgICAgICAgICAgICAgICBkaXNmcmFuY2hpc2luZyBoaW0gYW5kIGhpcyBmYW1pbHksIGEgbWFuIG9mIFplbGVhLCBvbmUgQXJ0aG1pdXMsIGEgc2xhdmUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgR3JlYXQgS2luZyDvvIhmb3IgWmVsZWEgaXMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPu+8iSwgYmVjYXVzZSBpbiB0aGUgc2VydmljZSBvZiBoaXMgbWFzdGVyIGhlCiAgICAgICAgICAgICAgICAgICAgY29udmV5ZWQgZ29sZCwgbm90IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBidXQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcwNzYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzA3NiI+UGVsb3Bvbm5lc2U8L3BsYWNlTmFtZT4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBvY2Nhc2lvbiBvZiB0aGlzIGRlY3JlZSwgdG8gd2hpY2ggRGVtb3N0aGVuZXMgcmVmZXJzIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjI3MSIgdmFsaWQ9InllcyI+RGVtLiAxOS4yNzE8L2JpYmw+LCBpcyBub3Qga25vd24uIEFjY29yZGluZyB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGhlbS4gNiIgdmFsaWQ9InllcyI+UGx1dC4gVGhlbS4gNjwvYmlibD4gaXQgd2FzIFRoZW1pc3RvY2xlcyB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWQgaXQ7IGJ1dCBhIHNjaG9sLiBvbiBBcmlzdGlkZXMgbmFtZXMgQ2ltb24uIFRoZSBkYXRlIGluIHRoZSBmb3JtZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3b3VsZCBiZSBiZWZvcmUgNDcxOyBpbiB0aGUgbGF0dGVyIGl0IHdvdWxkIGJlIGFmdGVyIDQ1NywgYW5kIG1heSBiZQogICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0ZWQgd2l0aCB0aGUgbWlzc2lvbiBvZiBNZWdhYmF6dXMgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+IGluIDQ1NSwgbWVudGlvbmVkIGJ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDEuMTA5IiB2YWxpZD0ieWVzIj5UaHVjLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS4xMDk8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjI3MSIgdmFsaWQ9InllcyI+RGVtLiAxOS4yNzE8L2JpYmw+LCBpcyBub3Qga25vd24uIEFjY29yZGluZyB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGhlbS4gNiIgdmFsaWQ9InllcyI+UGx1dC4gVGhlbS4gNjwvYmlibD4gaXQgd2FzIFRoZW1pc3RvY2xlcyB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWQgaXQ7IGJ1dCBhIHNjaG9sLiBvbiBBcmlzdGlkZXMgbmFtZXMgQ2ltb24uIFRoZSBkYXRlIGluIHRoZSBmb3JtZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3b3VsZCBiZSBiZWZvcmUgNDcxOyBpbiB0aGUgbGF0dGVyIGl0IHdvdWxkIGJlIGFmdGVyIDQ1NywgYW5kIG1heSBiZQogICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0ZWQgd2l0aCB0aGUgbWlzc2lvbiBvZiBNZWdhYmF6dXMgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+IGluIDQ1NSwgbWVudGlvbmVkIGJ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDEuMTA5IiB2YWxpZD0ieWVzIj5UaHVjLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS4xMDk8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['9.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyBub3Qgb3V0bGF3cnkgYXMgY29tbW9ubHkgdW5kZXJzdG9vZDsKICAgICAgICAgICAgICAgICAgICBmb3Igd2hhdCBtYXR0ZXJlZCBpdCB0byBhIG5hdGl2ZSBvZiBaZWxlYSBpZiBoZSB3YXMgdG8gYmUgZGViYXJyZWQgZnJvbSBhIHNoYXJlCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGNvbW1vbiByaWdodHMgb2YgQXRoZW5pYW4gY2l0aXplbnM/IEJ1dCB0aGUgc3RhdHV0ZXMgcmVsYXRpbmcgdG8gbXVyZGVyCiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZSBmb3IgY2FzZXMgd2hlcmUgcHJvc2VjdXRpb24gZm9yIG11cmRlciBpcyBub3QgYWxsb3dlZCBbYnV0CiAgICAgICAgICAgICAgICAgICAgd2hlcmUgaXQgaXMgYSByaWdodGVvdXMgYWN0IHRvIHNsYXkgdGhlIG11cmRlcmVyXTsg4oCcYW5kIGhlCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgZGllIGFuIG91dGxhdyzigJ0gc2F5cyB0aGUgbGVnaXNsYXRvci4gVGhpcyBzaW1wbHkgbWVhbnMgdGhhdAogICAgICAgICAgICAgICAgICAgIGFueW9uZSBzbGF5aW5nIGEgbWVtYmVyIG9mIEFydGhtaXVzJ3MgZmFtaWx5IHdvdWxkIGJlIGZyZWUgZnJvbSBibG9vZC1ndWlsdC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBvdXIgYW5jZXN0b3JzIHRob3VnaHQgdGhhdCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBib3VuZCB0byBjb25zaWRlciB0aGUgd2VsZmFyZSBvZiBhbGwgR3JlZWtzLCBmb3IgZXhjZXB0IG9uIHRoYXQgYXNzdW1wdGlvbgogICAgICAgICAgICAgICAgICAgIGJyaWJlcnkgYW5kIGNvcnJ1cHRpb24gaW4gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXNlPC9wbGFjZU5hbWU+IHdvdWxkIGJlIG5vIGNvbmNlcm4gb2YgdGhlaXJzOyBhbmQgaW4gY2hhc3Rpc2luZwogICAgICAgICAgICAgICAgICAgIGFuZCBwdW5pc2hpbmcgYWxsIHdob20gdGhleSBkZXRlY3RlZCwgdGhleSB3ZW50IHNvIGZhciBhcyB0byBzZXQgdGhlIG9mZmVuZGVycycKICAgICAgICAgICAgICAgICAgICBuYW1lcyBvbiBhIHBpbGxhci4gVGhlIG5hdHVyYWwgcmVzdWx0IHdhcyB0aGF0IHRoZSBHcmVlayBwb3dlciB3YXMgZHJlYWRlZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBiYXJiYXJpYW4sIG5vdCB0aGUgYmFyYmFyaWFuIGJ5IHRoZSBHcmVla3MuIEJ1dCB0aGF0IGlzIG5vIGxvbmdlciBzby4gRm9yCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpcyBub3QgeW91ciBhdHRpdHVkZSB0b3dhcmRzIHRoZXNlIGFuZCBvdGhlciBvZmZlbmNlcy4gV2hhdCB0aGVuIGlzIHlvdXIKICAgICAgICAgICAgICAgICAgICBhdHRpdHVkZT8gPC90cmFuc2xhdGlvbj4="
translation['9.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5bWW91IGtub3cgaXQgeW91cnNlbHZlcy4KICAgICAgICAgICAgICAgICAgICBGb3Igd2h5IHNob3VsZCB5b3UgYmVhciB0aGUgd2hvbGUgYmxhbWUsIHdoZW4gYWxsIHRoZSBvdGhlciBHcmVla3MgYXJlIGp1c3QgYXMKICAgICAgICAgICAgICAgICAgICBiYWQgYXMgeW91PyBUaGF0IGlzIHdoeSBJIGFzc2VydCB0aGF0IHRoZSBwcmVzZW50IGNyaXNpcyBjYWxscyBmb3IgZWFybmVzdCB6ZWFsCiAgICAgICAgICAgICAgICAgICAgYW5kIHdpc2UgY291bnNlbC4gV2hhdCBjb3Vuc2VsP108bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgdHdvIHdvcmRzIHNlZW0gcG9pbnRsZXNzLiBQZXJoYXBzIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+E4b23zr3Ov8+CPC9mb3JlaWduPjsgaXMgdGhlIGF0dGVtcHQgb2YgYSBzY3JpYmUgdG8gam9pbiB0aGUgbG9uZ2VyIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzaG9ydGVyIHZlcnNpb24uPC9ub3RlPiBEbyB5b3Ugd2FudCBtZSB0byB0ZWxsIHlvdSwgYW5kIHdpbGwgeW91IHByb21pc2Ugbm90CiAgICAgICAgICAgICAgICAgICAgdG8gYmUgYW5ncnk/PGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4ThvbfOvc6/z4I8L2ZvcmVpZ24+OyBpcyB0aGUgYXR0ZW1wdCBvZiBhIHNjcmliZSB0byBqb2luIHRoZSBsb25nZXIgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0ZXIgdmVyc2lvbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJSZWNvcmQiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5bSGUgcmVhZHMgZnJvbSBhbiBvZmZpY2lhbCByZWNvcmRdPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPltIZSByZWFkcyBmcm9tIGFuIG9mZmljaWFsIHJlY29yZF08L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIGZyYW5rIGRlc2NyaXB0aW9uIG9mIHRoZSBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgICAgICBhdHRpdHVkZSwgd2hpY2ggc2hvdWxkIGZvbGxvdyBoZXJlLCBoYXMgZHJvcHBlZCBvdXQsIGFuZCB0aGUgbGVtbWEsIHdoaWNoIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kIGluIFMgYW5kIG90aGVyIGdvb2QgTVNTLiwgc2VlbXMgdG8gYmUgYSBwb29yIGF0dGVtcHQgdG8gZmlsbCB0aGUgZ2FwLgogICAgICAgICAgICAgICAgICAgICAgICBJdCBpcyBkaWZmaWN1bHQgdG8gaW1hZ2luZSBhbnkgb2ZmaWNpYWwgZG9jdW1lbnQgdGhhdCB3b3VsZCBiZSBvZiB1c2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG9yYXRvciBoZXJlLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoZXJlIGlzIGEKICAgICAgICAgICAgICAgICAgICBmb29saXNoIGFyZ3VtZW50IGFkdmFuY2VkIGJ5IHRob3NlIHdobyB3YW50IHRvIHJlYXNzdXJlIHRoZSBjaXRpemVucy4gUGhpbGlwLAogICAgICAgICAgICAgICAgICAgIHRoZXkgc2F5LCBhZnRlciBhbGwgaXMgbm90IHlldCB3aGF0IHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlOyB0aGV5IHdlcmUgbWFzdGVycwogICAgICAgICAgICAgICAgICAgIG9mIGV2ZXJ5IHNlYSBhbmQgbGFuZDsgdGhleSBlbmpveWVkIHRoZSBhbGxpYW5jZSBvZiB0aGUga2luZyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT47IG5vdGhpbmcgY291bGQgc3RhbmQgYWdhaW5zdCB0aGVtOiBhbmQKICAgICAgICAgICAgICAgICAgICB5ZXQgb3VyIGNpdHkgZGVmZW5kZWQgaXRzZWxmIGV2ZW4gYWdhaW5zdCB0aGVtIGFuZCB3YXMgbm90IG92ZXJ3aGVsbWVkLiBCdXQgZm9yCiAgICAgICAgICAgICAgICAgICAgbXkgb3duIHBhcnQsIHdoaWxlIHByYWN0aWNhbGx5IGFsbCB0aGUgYXJ0cyBoYXZlIG1hZGUgYSBncmVhdCBhZHZhbmNlIGFuZCB3ZSBhcmUKICAgICAgICAgICAgICAgICAgICBsaXZpbmcgdG9kYXkgaW4gYSB2ZXJ5IGRpZmZlcmVudCB3b3JsZCBmcm9tIHRoZSBvbGQgb25lLCBJIGNvbnNpZGVyIHRoYXQgbm90aGluZwogICAgICAgICAgICAgICAgICAgIGhhcyBiZWVuIG1vcmUgcmV2b2x1dGlvbml6ZWQgYW5kIGltcHJvdmVkIHRoYW4gdGhlIGFydCBvZiB3YXIuIDwvdHJhbnNsYXRpb24+"
translation['9.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gdGhlIGZpcnN0IHBsYWNlIEkgYW0gaW5mb3JtZWQgdGhhdCBpbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIGRheXMgdGhlIExhY2VkYWVtb25pYW5zLCBsaWtlIGV2ZXJ5b25lIGVsc2UsIHdvdWxkIHNwZW5kIHRoZSBmb3VyIG9yIGZpdmUgbW9udGhzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHN1bW1lciDigJxzZWFzb27igJ0gaW4gaW52YWRpbmcgYW5kIGxheWluZyB3YXN0ZSB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSdzIHRlcnJpdG9yeSB3aXRoIGhlYXZ5IGluZmFudHJ5IGFuZCBsZXZpZXMgb2YgY2l0aXplbnMsIGFuZCB3b3VsZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmV0aXJlIGhvbWUgYWdhaW47IGFuZCB0aGV5IHdlcmUgc28gb2xkLWZhc2hpb25lZCwgb3IgcmF0aGVyIHN1Y2ggZ29vZAogICAgICAgICAgICAgICAgICAgICAgICBjaXRpemVucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIEdyZWVrIG1lYW5zIHRydWUgdG8gdGhlIHNwaXJpdAogICAgICAgICAgICAgICAgICAgICAgICBvZiBhIGZyZWUsIGNvbnN0aXR1dGlvbmFsIHN0YXRlLiBBcmlzdG90bGUgZGVzY3JpYmVzIHRoZTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Azr/Ou865z4TOuc664b24zr0gz4DOu+G/hs64zr/PgjwvZm9yZWlnbj5hcyBvbmUgd2hpY2ggaXMKICAgICAgICAgICAgICAgICAgICAgICAg4oCcbmF0dXJhbGx5IHdhcmxpa2UgYW5kIHF1YWxpZmllZCB0byBydWxlIG9yIGJlIHJ1bGVkIGFjY29yZGluZyB0bwogICAgICAgICAgICAgICAgICAgICAgICBsYXdzIHdoaWNoIGRpc3RyaWJ1dGUgb2ZmaWNlcyBieSBtZXJpdOKAnSDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBQb2wuIDMuMTI4OGEiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIFBvbC4gMy4xNy40PC9iaWJsPu+8iS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IG5ldmVyIHVzZWQgbW9uZXkgdG8gYnV5IGFuIGFkdmFudGFnZSBmcm9tIGFueW9uZSwgYnV0IHRoZWlyIGZpZ2h0aW5nCiAgICAgICAgICAgICAgICAgICAgd2FzIG9mIHRoZSBmYWlyIGFuZCBvcGVuIGtpbmQuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Azr/Ou865z4TOuc664b24zr0gz4DOu+G/hs64zr/PgjwvZm9yZWlnbj5hcyBvbmUgd2hpY2ggaXMKICAgICAgICAgICAgICAgICAgICAgICAg4oCcbmF0dXJhbGx5IHdhcmxpa2UgYW5kIHF1YWxpZmllZCB0byBydWxlIG9yIGJlIHJ1bGVkIGFjY29yZGluZyB0bwogICAgICAgICAgICAgICAgICAgICAgICBsYXdzIHdoaWNoIGRpc3RyaWJ1dGUgb2ZmaWNlcyBieSBtZXJpdOKAnSDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBQb2wuIDMuMTI4OGEiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIFBvbC4gMy4xNy40PC9iaWJsPu+8iS48L3RyYW5zbGF0aW9uPg=="
translation['9.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm93IHlvdQogICAgICAgICAgICAgICAgICAgIG11c3Qgc3VyZWx5IHNlZSB0aGF0IG1vc3QgZGlzYXN0ZXJzIGFyZSBkdWUgdG8gdHJhaXRvcnMsIGFuZCBub25lIGFyZSB0aGUgcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgb2YgYSByZWd1bGFyIHBpdGNoZWQgYmF0dGxlLiBPbiB0aGUgb3RoZXIgaGFuZCB5b3UgaGVhciBvZiBQaGlsaXAgbWFyY2hpbmcKICAgICAgICAgICAgICAgICAgICB1bmNoZWNrZWQsIG5vdCBiZWNhdXNlIGhlIGxlYWRzIGEgcGhhbGFueCBvZiBoZWF2eSBpbmZhbnRyeSwgYnV0IGJlY2F1c2UgaGUgaXMKICAgICAgICAgICAgICAgICAgICBhY2NvbXBhbmllZCBieSBza2lybWlzaGVycywgY2F2YWxyeSwgYXJjaGVycywgbWVyY2VuYXJpZXMsIGFuZCBzaW1pbGFyIHRyb29wcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCByZWx5aW5nIG9uIHRoaXMgZm9yY2UsIGhlIGF0dGFja3MKICAgICAgICAgICAgICAgICAgICBzb21lIHBlb3BsZSB0aGF0IGlzIGF0IHZhcmlhbmNlIHdpdGggaXRzZWxmLCBhbmQgd2hlbiB0aHJvdWdoIGRpc3RydXN0IG5vIG9uZQogICAgICAgICAgICAgICAgICAgIGdvZXMgZm9ydGggdG8gZmlnaHQgZm9yIGhpcyBjb3VudHJ5LCB0aGVuIGhlIGJyaW5ncyB1cCBoaXMgYXJ0aWxsZXJ5IGFuZCBsYXlzCiAgICAgICAgICAgICAgICAgICAgc2llZ2UuIEkgbmVlZCBoYXJkbHkgdGVsbCB5b3UgdGhhdCBoZSBtYWtlcyBubyBkaWZmZXJlbmNlIGJldHdlZW4gc3VtbWVyIGFuZAogICAgICAgICAgICAgICAgICAgIHdpbnRlciBhbmQgaGFzIG5vIHNlYXNvbiBzZXQgYXBhcnQgZm9yIGluYWN0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5TaW5jZSwgaG93ZXZlciwgeW91IGFsbCBrbm93IHRoaXMsIHlvdSBtdXN0IHRha2UgaXQgaW50byBhY2NvdW50IGFuZAogICAgICAgICAgICAgICAgICAgIG5vdCBsZXQgdGhlIHdhciBwYXNzIGludG8geW91ciBvd24gY291bnRyeTsgeW91IG11c3Qgbm90IGludml0ZSBjYXRhc3Ryb3BoZQogICAgICAgICAgICAgICAgICAgIHRocm91Z2gga2VlcGluZyB5b3VyIGV5ZXMgZml4ZWQgb24gdGhlIHNpbXBsZSBzdHJhdGVneSBvZiB5b3VyIG9sZCB3YXIgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBMYWNlZGFlbW9uaWFucywgYnV0IGFycmFuZ2UgeW91ciBwb2xpdGljYWwgYWZmYWlycyBhbmQgeW91ciBtaWxpdGFyeQogICAgICAgICAgICAgICAgICAgIHByZXBhcmF0aW9ucyBzbyB0aGF0IHlvdXIgbGluZSBvZiBkZWZlbmNlIG1heSBiZSBhcyBmYXIgYXdheSBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhcyBwb3NzaWJsZSwgZ2l2ZSBoaW0gbm8gY2hhbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgc3RpcnJpbmcgZnJvbSBoaXMgYmFzZSwgYW5kIG5ldmVyIGNvbWUgdG8gY2xvc2UgZ3JpcHMgd2l0aCBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['9.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igc28gZmFyIGFzIGEgY2FtcGFpZ24gaXMgY29uY2VybmVkLCBwcm92aWRlZCwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3ZSBhcmUgd2lsbGluZyB0byBkbyB3aGF0CiAgICAgICAgICAgICAgICAgICAgaXMgbmVjZXNzYXJ5LCB3ZSBoYXZlIG1hbnkgbmF0dXJhbCBhZHZhbnRhZ2VzLCBzdWNoIGFzIHRoZSBuYXR1cmUgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgdGVycml0b3J5LCBtdWNoIG9mIHdoaWNoIG1heSBiZSBoYXJyaWVkIGFuZCBkZXZhc3RhdGVkLCBhbmQgY291bnRsZXNzIG90aGVyczsKICAgICAgICAgICAgICAgICAgICBidXQgZm9yIGEgcGl0Y2hlZCBiYXR0bGUgaGUgaXMgaW4gYmV0dGVyIHRyYWluaW5nIHRoYW4gd2UgYXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGl0IGlzIG5vdCBlbm91Z2gKICAgICAgICAgICAgICAgICAgICB0byBhZG9wdCB0aGVzZSBzdWdnZXN0aW9ucywgbm9yIGV2ZW4gdG8gb3Bwb3NlIGhpbSB3aXRoIGFjdGl2ZSBtaWxpdGFyeQogICAgICAgICAgICAgICAgICAgIG1lYXN1cmVzLCBidXQgYm90aCBmcm9tIGNhbGN1bGF0aW9uIGFuZCBvbiBwcmluY2lwbGUgeW91IG11c3Qgc2hvdyB5b3VyIGhhdHJlZAogICAgICAgICAgICAgICAgICAgIG9mIHRob3NlIHdobyBzcGVhayBwdWJsaWNseSBvbiBoaXMgYmVoYWxmOyBhbmQgeW91IG11c3QgcmVmbGVjdCB0aGF0IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZSB0byBkZWZlYXQgdGhlIGVuZW1pZXMgb2Ygb3VyIGNpdHkgdW50aWwgeW91IGhhdmUgY2hhc3Rpc2VkIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHdpdGhpbiBvdXIgdmVyeSB3YWxscyBtYWtlIHRoZW1zZWx2ZXMgdGhlaXIgc2VydmFudHMuIDwvdHJhbnNsYXRpb24+"
translation['9.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhhdCwgYXMgYWxsIEhlYXZlbiBpcyBteSB3aXRuZXNzLCB5b3Ugd2lsbCBuZXZlciBiZSBhYmxlIHRvIGRvOwogICAgICAgICAgICAgICAgICAgIGJ1dCB5b3UgaGF2ZSByZWFjaGVkIHN1Y2ggYSBoZWlnaHQgb2YgZm9sbHkgb3Igb2YgbWFkbmVzcyBvcuKAlEkga25vdwogICAgICAgICAgICAgICAgICAgIG5vdCB3aGF0IHRvIGNhbGwgaXQsIGZvciB0aGlzIGZlYXIgdG9vIGhhcyBvZnRlbiBoYXVudGVkIG1lLCB0aGF0IHNvbWUgZGVtb24gaXMKICAgICAgICAgICAgICAgICAgICBkcml2aW5nIHlvdSB0byB5b3VyIGRvb20sIHRoYXQgZnJvbSBsb3ZlIG9mIGNhbHVtbnkgb3IgZW52eSBvciByaWJhbGRyeSwgb3IKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciB5b3VyIG1vdGl2ZSBtYXkgYmUsIHlvdSBjbGFtb3IgZm9yIGEgc3BlZWNoIGZyb20gdGhlc2UgaGlyZWxpbmdzLCBzb21lCiAgICAgICAgICAgICAgICAgICAgb2Ygd2hvbSB3b3VsZCBub3QgZXZlbiBkaXNjbGFpbSB0aGF0IHRpdGxlLCBhbmQgeW91IGRlcml2ZSBhbXVzZW1lbnQgZnJvbSB0aGVpcgogICAgICAgICAgICAgICAgICAgIHZpdHVwZXJhdGlvbnMuIDwvdHJhbnNsYXRpb24+"
translation['9.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIHNlcmlvdXMgZW5vdWdoLCBidXQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBpcyB3b3JzZSB0byBmb2xsb3c7IGZvciB5b3UgaGF2ZSBncmFudGVkIHRvIHRoZXNlIG1lbiBtb3JlIHNlY3VyaXR5IGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBwdXJzdWFuY2Ugb2YgdGhlaXIgcG9saWN5IHRoYW4gdG8geW91ciBvd24gZGVmZW5kZXJzLiBZZXQgbWFyayB3aGF0IHRyb3VibGVzCiAgICAgICAgICAgICAgICAgICAgYXJlIGluIHN0b3JlIGZvciB0aG9zZSB3aG8gbGVuZCBhbiBlYXIgdG8gc3VjaCBjb3Vuc2VsbG9ycy4gSSB3aWxsIG1lbnRpb24gc29tZQogICAgICAgICAgICAgICAgICAgIGZhY3RzIHdoaWNoIHdpbGwgYmUgZmFtaWxpYXIgdG8geW91IGFsbC4gPC90cmFuc2xhdGlvbj4="
translation['9.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+IHRoZXJlIHdlcmUgdHdvIHBhcnRpZXMgaW4gdGhlIHN0YXRlOiBQaGlsaXAncyBtZW4sCiAgICAgICAgICAgICAgICAgICAgZW50aXJlbHkgc3Vic2VydmllbnQgdG8gaGltLCBhbmQgdGhlIHBhdHJpb3RzLCBzdHJpdmluZyB0byBwcmVzZXJ2ZSB0aGUgZnJlZWRvbQogICAgICAgICAgICAgICAgICAgIG9mIHRoZWlyIGNvdW50cnltZW4uIFdoaWNoLCBwcmF5LCBydWluZWQgdGhlaXIgY291bnRyeT8gV2hpY2ggYmV0cmF5ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSwgd2hvc2UgYmV0cmF5YWwgc2VhbGVkIHRoZSBkb29tIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPj8gVGhlIHBhcnRpc2FucyBvZiBQaGlsaXA7IHRoZSBtZW4gd2hvLCB3aGVuIHRoZSBjaXR5CiAgICAgICAgICAgICAgICAgICAgd2FzIHN0aWxsIHN0YW5kaW5nLCB0cmllZCB0byBkZWZhbWUgYW5kIHNsYW5kZXIgdGhlIHBhdHJpb3RpYyBzdGF0ZXNtZW4sIHVudGlsCiAgICAgICAgICAgICAgICAgICAgdGhlIE9seW50aGlhbiBkZW1vY3JhY3kgd2FzIGFjdHVhbGx5IGluZHVjZWQgdG8gZXhwZWwgQXBvbGxvbmlkZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBkZW1vY3JhdGljIGxlYWRlciwgYWZ0ZXJ3YXJkcyBob25vcmVkIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNpdGl6ZW5zaGlwIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LjwvdHJhbnNsYXRpb24+"
translation['9.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGl0IHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4gb25seSB0aGF0IHRoaXMgaGFiaXQKICAgICAgICAgICAgICAgICAgICBwcm9kdWNlZCBldmVyeSBraW5kIG9mIGV2aWwgcmVzdWx0OyBidXQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFcmV0cmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFcmV0cmlhIj5FcmV0cmlhPC9wbGFjZU5hbWU+LCB3aGVuIHRoZSBkZW1vY3JhdHMsIHJpZGRpbmcgdGhlbXNlbHZlcyBvZiBQbHV0YXJjaHVzCiAgICAgICAgICAgICAgICAgICAgYW5kIGhpcyBtZXJjZW5hcmllcywgaGVsZCB0aGUgY2l0eSB0b2dldGhlciB3aXRoIFBvcnRobXVzLCBzb21lIG9mIHRoZW0gd2VyZSBmb3IKICAgICAgICAgICAgICAgICAgICBoYW5kaW5nIHRoZSBnb3Zlcm5tZW50IG92ZXIgdG8geW91LCBvdGhlcnMgdG8gUGhpbGlwLiBUaGUgbGF0dGVyIG9uIG1vc3QgcG9pbnRzLAogICAgICAgICAgICAgICAgICAgIG9yIHJhdGhlciBvbiBhbGwsIGdhaW5lZCB0aGUgZWFyIG9mIHRoZSBzb3JlbHkgdHJpZWQgYW5kIGlsbC1zdGFycmVkIEVyZXRyaWFucywKICAgICAgICAgICAgICAgICAgICBhbmQgYXQgbGFzdCBwZXJzdWFkZWQgdGhlbSB0byBleHBlbCB0aGVpciByZWFsIGNoYW1waW9ucy4gPC90cmFuc2xhdGlvbj4="
translation['9.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igb2YgY291cnNlIFBoaWxpcCwgd2hvbSB0aGV5IGZhbmNpZWQgdGhlaXIgYWxseSwKICAgICAgICAgICAgICAgICAgICBzZW50IEhpcHBvbmljdXMgd2l0aCBhIHRob3VzYW5kIG1lcmNlbmFyaWVzLCByYXplZCB0aGUgd2FsbHMgb2YgUG9ydGhtdXMsIGFuZAogICAgICAgICAgICAgICAgICAgIHNldCB1cCB0aHJlZSB0eXJhbnRzLCBIaXBwYXJjaHVzLCBBdXRvbWVkb24sIGFuZCBDbGl0YXJjaHVzLiBUd2ljZSBzaW5jZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYXZlIHRyaWVkIHRvIGRlbGl2ZXIgdGhlbXNlbHZlcywgYW5kIHR3aWNlIGhlIGhhcyBkcml2ZW4gdGhlbSBmcm9tIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaG9tZXMgW29uIHRoZSBmaXJzdCBvY2Nhc2lvbiBzZW5kaW5nIEV1cnlsb2NodXMgd2l0aCBoaXMgbWVyY2VuYXJpZXMsCiAgICAgICAgICAgICAgICAgICAgb24gdGhlIHNlY29uZCBQYXJtZW5pb10uIDwvdHJhbnNsYXRpb24+"
translation['9.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kIHdoYXQgbmVlZCBpcyB0aGVyZSB0byBtZW50aW9uIG1vc3Qgb2YgdGhlIGNhc2VzPyBCdXQKICAgICAgICAgICAgICAgICAgICBhdCBPcmV1cyBQaGlsaXN0aWRlcywgTWVuaXBwdXMsIFNvY3JhdGVzLCBUaG9hcywgYW5kIEFnYXBhZXVzLCB0aGUgdmVyeSBtZW4gd2hvCiAgICAgICAgICAgICAgICAgICAgbm93IGNvbnRyb2wgdGhlIGNpdHksIHdlcmUsIGFzIGV2ZXJ5b25lIGtuZXcsIFBoaWxpcCdzIGFnZW50cywgYnV0IEV1cGhyYWV1cywgYQogICAgICAgICAgICAgICAgICAgIG1hbiB3aG8gb25jZSByZXNpZGVkIGhlcmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIHdhcyB3b3JraW5nIGZvciB0aGUgZnJlZWRvbSBhbmQgZW1hbmNpcGF0aW9uIG9mIGhpcyBjb3VudHJ5bWVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3b3VsZCBiZSBhIGxvbmcgc3RvcnkgdG8gdGVsbCB5b3UgaG93IHRoaXMgbWFuIHdhcwogICAgICAgICAgICAgICAgICAgIHJlcGVhdGVkbHkgb3V0cmFnZWQgYW5kIGluc3VsdGVkIGJ5IHRoZSBwZW9wbGU7IGJ1dCBhIHllYXIgYmVmb3JlIHRoZSBjYXB0dXJlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRXJldHJpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRXJldHJpYSI+RXJldHJpYTwvcGxhY2VOYW1lPiwgZGV0ZWN0aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIG1hY2hpbmF0aW9ucyBvZiBQaGlsaXN0aWRlcyBhbmQgaGlzIHBhcnR5LCBoZSBkZW5vdW5jZWQgaGltIGFzIGEgdHJhaXRvci4gVGhlbiBhCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIGZlbGxvd3MgYmFuZGVkIHRvZ2V0aGVyLCB3aXRoIFBoaWxpcCBmb3IgdGhlaXIgcGF5bWFzdGVyIGFuZCBtYW5hZ2luZwogICAgICAgICAgICAgICAgICAgIGRpcmVjdG9yLCBhbmQgZHJhZ2dlZCBFdXBocmFldXMgb2ZmIHRvIHByaXNvbiBmb3Igc2V0dGluZyB0aGUgY2l0eSBpbiBhbiB1cHJvYXIuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBkZW1vY3JhdHMgb2YgT3JldXMgc2F3IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgaW5zdGVhZCBvZiByZXNjdWluZyBoaW0gYW5kIGtub2NraW5nIHRoZSBvdGhlcnMgb24gdGhlIGhlYWQsIHRoZXkgc2hvd2VkIG5vCiAgICAgICAgICAgICAgICAgICAgcmVzZW50bWVudCBhZ2FpbnN0IHRoZW0gYW5kIGdsb2F0ZWQgb3ZlciBFdXBocmFldXMsIHNheWluZyB0aGF0IGhlIGRlc2VydmVkIGFsbAogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBnb3QuIFRoZW4gaGF2aW5nIGFsbCB0aGUgbGliZXJ0eSBvZiBhY3Rpb24gdGhleSBkZXNpcmVkLCB0aGV5IGludHJpZ3VlZAogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgY2FwdHVyZSBvZiB0aGUgY2l0eSBhbmQgcHJlcGFyZWQgdG8gY2Fycnkgb3V0IHRoZWlyIHBsb3QsIHdoaWxlIGFueSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBjb21tb24gZm9sayB3aG8gc2F3IHdoYXQgdGhleSB3ZXJlIGF0IHdlcmUgdGVycm9yaXplZCBpbnRvIHNpbGVuY2UsIGhhdmluZwogICAgICAgICAgICAgICAgICAgIHRoZSBmYXRlIG9mIEV1cGhyYWV1cyBiZWZvcmUgdGhlaXIgZXllcy4gQW5kIHNvIGFiamVjdCB3YXMgdGhlaXIgY29uZGl0aW9uIHRoYXQsCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGlzIGRhbmdlciBsb29taW5nIGFoZWFkLCBubyBvbmUgZGFyZWQgdG8gYnJlYXRoZSBhIHN5bGxhYmxlIHVudGlsIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15LCBoYXZpbmcgY29tcGxldGVkIHRoZWlyIHByZXBhcmF0aW9ucywgd2VyZSBhcHByb2FjaGluZyB0aGUgZ2F0ZXM7IGFuZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgc29tZSB3ZXJlIGZvciBkZWZlbmNlLCB0aGUgb3RoZXJzIGZvciBzdXJyZW5kZXIuIDwvdHJhbnNsYXRpb24+"
translation['9.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UgdGhhdCBiYXNlIGFuZCBzaGFtZWZ1bCBjYXB0dXJlIG9mIHRoZSBjaXR5LCB0aGUgbGF0dGVyCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGl0cyBydWxlcnMgYW5kIHR5cmFudHM7IHRob3NlIHdobyBzaGVsdGVyZWQgdGhlbSBiZWZvcmUsIGFuZCBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIHJlYWR5IHRvIHRha2UgYW55IG1lYXN1cmVzIGFnYWluc3QgRXVwaHJhZXVzLCB3ZXJlIHJld2FyZGVkIHdpdGggYmFuaXNobWVudCBvcgogICAgICAgICAgICAgICAgICAgIGRlYXRoOyBhbmQgdGhlIG5vYmxlIEV1cGhyYWV1cyBzbGV3IGhpbXNlbGYsIGdpdmluZyB0aHVzIGEgcHJhY3RpY2FsIHByb29mIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGhvbmVzdHkgYW5kIGRpc2ludGVyZXN0ZWQgcGF0cmlvdGlzbSBvZiBoaXMgb3Bwb3NpdGlvbiB0byBQaGlsaXAuIDwvdHJhbnNsYXRpb24+"
translation['9.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGVyaGFwcyB5b3Ugd29uZGVyIHdoeQogICAgICAgICAgICAgICAgICAgIHRoZSBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVyZXRyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEVyZXRyaWEiPkVyZXRyaWE8L3BsYWNlTmFtZT4gYW5kIE9yZXVzIHdlcmUgbW9yZQogICAgICAgICAgICAgICAgICAgIGZhdm9yYWJseSBpbmNsaW5lZCB0byBQaGlsaXAncyBhZHZvY2F0ZXMgdGhhbiB0byB0aGVpciBvd24uIFRoZSBleHBsYW5hdGlvbiBpcwogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIGFzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBwYXRyaW90cywgaG93ZXZlciBtdWNoIHRoZXkgZGVzaXJlIGl0LCBjYW5ub3Qgc29tZXRpbWVzIHNheSBhbnl0aGluZyBhZ3JlZWFibGUsCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZXkgYXJlIG9ibGlnZWQgdG8gY29uc2lkZXIgdGhlIHNhZmV0eSBvZiB0aGUgc3RhdGU7IGJ1dCB0aGUgb3RoZXJzIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgdmVyeSBlZmZvcnRzIHRvIGJlIGFncmVlYWJsZSBhcmUgcGxheWluZyBpbnRvIFBoaWxpcCdzIGhhbmRzLiBUaGUgcGF0cmlvdHMKICAgICAgICAgICAgICAgICAgICBkZW1hbmRlZCBhIHdhci1zdWJzaWR5LCB0aGUgb3RoZXJzIGRlbmllZCBpdHMgbmVjZXNzaXR5OyB0aGUgcGF0cmlvdHMgYmFkZSB0aGVtCiAgICAgICAgICAgICAgICAgICAgZmlnaHQgb24gYW5kIG1pc3RydXN0IFBoaWxpcCwgdGhlIG90aGVycyBiYWRlIHRoZW0ga2VlcCB0aGUgcGVhY2UsIHVudGlsIHRoZXkKICAgICAgICAgICAgICAgICAgICBmZWxsIGludG8gdGhlIHNuYXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3QgdG8gZ28gaW50bwogICAgICAgICAgICAgICAgICAgIHBhcnRpY3VsYXJzLCBpdCBpcyB0aGUgc2FtZSB0YWxlIGV2ZXJ5d2hlcmUsIG9uZSBwYXJ0eSBzcGVha2luZyB0byBwbGVhc2UgdGhlaXIKICAgICAgICAgICAgICAgICAgICBhdWRpZW5jZSwgdGhlIG90aGVyIGdpdmluZyBhZHZpY2UgdGhhdCB3b3VsZCBoYXZlIGVuc3VyZWQgdGhlaXIgc2FmZXR5LiBCdXQgYXQKICAgICAgICAgICAgICAgICAgICB0aGUgbGFzdCB0aGVyZSB3ZXJlIG1hbnkgdGhpbmdzIHRoYXQgdGhlIHBlb3BsZSB3ZXJlIGluZHVjZWQgdG8gY29uY2VkZSwgbm90IGFzCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGZvciB0aGVpciBvd24gZ3JhdGlmaWNhdGlvbiBub3IgdGhyb3VnaCBpZ25vcmFuY2UsIGJ1dCBncmFkdWFsbHkgeWllbGRpbmcKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIHRoZXkgdGhvdWdodCB0aGF0IHRoZWlyIGRpc2NvbWZpdHVyZSB3YXMgaW5ldml0YWJsZSBhbmQgY29tcGxldGUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQsIGJ5IEhlYXZlbiwgdGhhdCBpcyB3aGF0IEkgY2VydGFpbmx5CiAgICAgICAgICAgICAgICAgICAgZmVhciB3aWxsIGJlIHlvdXIgZXhwZXJpZW5jZSwgd2hlbiB5b3UgY291bnQgeW91ciBjaGFuY2VzIGFuZCBkaXNjb3ZlciB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm90aGluZyBsZWZ0IGZvciB5b3UgdG8gZG8uIEFuZCB5ZXQgSSBwcmF5LCBBdGhlbmlhbnMsIHRoYXQgc3VjaCBtYXkKICAgICAgICAgICAgICAgICAgICBub3QgYmUgdGhlIGlzc3VlIG9mIGV2ZW50cy4gQmV0dGVyIHRvIGRpZSBhIHRob3VzYW5kIHRpbWVzIHRoYW4gcGF5IGNvdXJ0IHRvCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIFthbmQgYWJhbmRvbiBhbnkgb2YgeW91ciBsb3lhbCBjb3Vuc2VsbG9ycy5dIEEgZmluZQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGUgcGVvcGxlIG9mIE9yZXVzIGhhdmUgZ2FpbmVkIGZvciBoYW5kaW5nIHRoZW1zZWx2ZXMgb3ZlciB0byBQaGlsaXAncwogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIHJlamVjdGluZyBFdXBocmFldXMhIDwvdHJhbnNsYXRpb24+"
translation['9.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5BIGZpbmUgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlbW9jcmF0cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVyZXRyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEVyZXRyaWEiPkVyZXRyaWE8L3BsYWNlTmFtZT4gaGF2ZQogICAgICAgICAgICAgICAgICAgIGdhaW5lZCBmb3Igc3B1cm5pbmcgeW91ciBlbWJhc3N5IGFuZCBjYXBpdHVsYXRpbmcgdG8gQ2xpdGFyY2h1cyEgVGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBzbGF2ZXMsIGRvb21lZCB0byB0aGUgd2hpcHBpbmctcG9zdCBhbmQgdGhlIHNjYWZmb2xkLiBBIGZpbmUgY2xlbWVuY3kgaGUgc2hvd2VkCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIE9seW50aGlhbnMsIHdobyB2b3RlZCBMYXN0aGVuZXMgdGhlaXIgbWFzdGVyIG9mIHRoZSBob3JzZSBhbmQgYmFuaXNoZWQKICAgICAgICAgICAgICAgICAgICBBcG9sbG9uaWRlcyEgPC90cmFuc2xhdGlvbj4="
translation['9.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBmb2xseSBhbmQgY293YXJkaWNlIHRvCiAgICAgICAgICAgICAgICAgICAgY2hlcmlzaCBzdWNoIGhvcGVzLCB0byBmb2xsb3cgaWxsIGNvdW5zZWwgYW5kIHJlZnVzZSB0byBwZXJmb3JtIGFueSBmcmFjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgZHV0aWVzLCB0byBsZW5kIGFuIGVhciB0byB0aGUgYWR2b2NhdGVzIG9mIHlvdXIgZW5lbWllcyBhbmQgaW1hZ2luZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91ciBjaXR5IGlzIHNvIGdyZWF0IHRoYXQgbm8gY29uY2VpdmFibGUgZGFuZ2VyIGNhbiBiZWZhbGwgaXQuIDwvdHJhbnNsYXRpb24+"
translation['9.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5BeSwgYW5kIGEgZGlzZ3JhY2UgdG9vIGl0IGlzIHRvIGhhdmUgdG8gc2F5LCB3aGVuIGFsbAogICAgICAgICAgICAgICAgICAgIGlzIG92ZXIsIOKAnFdoeSEgd2hvIHdvdWxkIGhhdmUgdGhvdWdodCBpdD8gRm9yIG9mIGNvdXJzZSB3ZSBvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgZG9uZSB0aGlzIG9yIHRoYXQsIGFuZCBub3Qgc28gYW5kIHNvLuKAnSBNYW55IHRoaW5ncyBjb3VsZCBiZSBuYW1lZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBPbHludGhpYW5zIHRvZGF5LCB3aGljaCB3b3VsZCBoYXZlIHNhdmVkIHRoZW0gZnJvbSBkZXN0cnVjdGlvbiBpZiBvbmx5CiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgdGhlbiBmb3Jlc2VlbiB0aGVtLiBNYW55IGNvdWxkIGJlIG5hbWVkIGJ5IHRoZSBPcml0ZXMsIG1hbnkgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgUGhvY2lhbnMsIG1hbnkgYnkgZXZlcnkgcnVpbmVkIGNpdHkuIDwvdHJhbnNsYXRpb24+"
translation['9.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb2YKICAgICAgICAgICAgICAgICAgICB3aGF0IHVzZSB0byB0aGVtIGlzIHRoYXQ/IFdoaWxlIHRoZSB2ZXNzZWwgaXMgc2FmZSwgd2hldGhlciBpdCBiZSBhIGxhcmdlIG9yIGEKICAgICAgICAgICAgICAgICAgICBzbWFsbCBvbmUsIHRoZW4gaXMgdGhlIHRpbWUgZm9yIHNhaWxvciBhbmQgaGVsbXNtYW4gYXJpZCBldmVyeW9uZSBpbiBoaXMgdHVybiB0bwogICAgICAgICAgICAgICAgICAgIHNob3cgaGlzIHplYWwgYW5kIHRvIHRha2UgY2FyZSB0aGF0IGl0IGlzIG5vdCBjYXBzaXplZCBieSBhbnlvbmUncyBtYWxpY2Ugb3IKICAgICAgICAgICAgICAgICAgICBpbmFkdmVydGVuY2U7IGJ1dCB3aGVuIHRoZSBzZWEgaGFzIG92ZXJ3aGVsbWVkIGl0LCB6ZWFsIGlzIHVzZWxlc3MuIDwvdHJhbnNsYXRpb24+"
translation['9.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5TbyB3ZSB0b28sIEF0aGVuaWFucywgYXMgbG9uZyBhcyB3ZSBhcmUgc2FmZSwgYmxlc3NlZAogICAgICAgICAgICAgICAgICAgIHdpdGggYSB2ZXJ5IGdyZWF0IGNpdHksIGFtcGxlIGFkdmFudGFnZXMsIGFuZCB0aGUgZmFpcmVzdCByZXB1dGXigJR3aGF0CiAgICAgICAgICAgICAgICAgICAgYXJlIHdlIHRvIGRvPyBQZXJoYXBzIHNvbWUgb2YgbXkgaGVhcmVycyBoYXZlIGxvbmcgYmVlbiBlYWdlciB0byBhc2sgdGhhdAogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLiBJIHNvbGVtbmx5IHByb21pc2UgdGhhdCBJIHdpbGwgYW5zd2VyIGl0IGFuZCB3aWxsIGFsc28gbW92ZSBhCiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiwgZm9yIHdoaWNoIHlvdSBjYW4gdm90ZSBpZiBzbyBkaXNwb3NlZC4gVG8gYmVnaW4gd2l0aCBvdXJzZWx2ZXMsIHdlCiAgICAgICAgICAgICAgICAgICAgbXVzdCBtYWtlIHByb3Zpc2lvbiBmb3Igb3VyIGRlZmVuY2UsIEkgbWVhbiB3aXRoIHdhci1nYWxsZXlzLCBmdW5kcywgYW5kIG1lbjsKICAgICAgICAgICAgICAgICAgICBmb3IgZXZlbiBpZiBhbGwgb3RoZXIgc3RhdGVzIHN1Y2N1bWIgdG8gc2xhdmVyeSwgd2Ugc3VyZWx5IG11c3QgZmlnaHQgdGhlIGJhdHRsZQogICAgICAgICAgICAgICAgICAgIG9mIGxpYmVydHkuIDwvdHJhbnNsYXRpb24+"
translation['9.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhhdmluZyBjb21wbGV0ZWQgYWxsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgcHJlcGFyYXRpb25zIGFuZCBtYWRlIG91ciBwdXJwb3NlIGNsZWFyLCB3ZSBtdXN0IGxvc2Ugbm8gdGltZSBpbiBjYWxsaW5nIHVwb24KICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgR3JlZWtzLCBhbmQgd2UgbXVzdCBpbmZvcm0gdGhlbSBieSBzZW5kaW5nIGFtYmFzc2Fkb3JzIFtpbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGRpcmVjdGlvbiwgdG8gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXNlPC9wbGFjZU5hbWU+LCB0bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4sIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzAiPkNoaW9zPC9wbGFjZU5hbWU+LCB0byB0aGUgR3JlYXQgS2luZ+KAlGZvciBldmVuCiAgICAgICAgICAgICAgICAgICAgaGlzIGludGVyZXN0cyBhcmUgbm90IHVuYWZmZWN0ZWQgaWYgd2UgcHJldmVudCBQaGlsaXAgZnJvbSBzdWJkdWluZyB0aGUgd2hvbGUKICAgICAgICAgICAgICAgICAgICBjb3VudHJ54oCUXSBzbyB0aGF0IGlmIHlvdSB3aW4gdGhlbSBvdmVyLCB5b3UgbWF5IGhhdmUgc29tZW9uZQogICAgICAgICAgICAgICAgICAgIHRvIHNoYXJlIHlvdXIgZGFuZ2VycyBhbmQgeW91ciBleHBlbnNlcyB3aGVuIHRoZSB0aW1lIGNvbWVzLCBvciBpZiBub3QsIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGF0IGxlYXN0IGRlbGF5IHRoZSBjb3Vyc2Ugb2YgZXZlbnRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IKICAgICAgICAgICAgICAgICAgICBzaW5jZSB0aGUgd2FyIGlzIGFnYWluc3QgYW4gaW5kaXZpZHVhbCBhbmQgbm90IGFnYWluc3QgdGhlIG1pZ2h0IG9mIGFuIG9yZ2FuaXplZAogICAgICAgICAgICAgICAgICAgIGNvbW11bml0eSwgZXZlbiBkZWxheSBpcyBub3Qgd2l0aG91dCBpdHMgdXNlOyBub3Igd2VyZSB0aG9zZSBlbWJhc3NpZXMgdXNlbGVzcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSBzZW50IHJvdW5kIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIGxhc3QgeWVhciB0byBkZW5vdW5jZSBQaGlsaXAsIHdoZW4gSSBhbmQgb3VyIGdvb2QgZnJpZW5kIFBvbHlldWN0dXMgaGVyZSBhbmQKICAgICAgICAgICAgICAgICAgICBIZWdlc2lwcHVzIGFuZCB0aGUgcmVzdCB3ZW50IGZyb20gY2l0eSB0byBjaXR5IGFuZCBzdWNjZWVkZWQgaW4gY2hlY2tpbmcgaGltLCBzbwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgbmV2ZXIgaW52YWRlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtYnJhY2lhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbWJyYWNpYSI+QW1icmFjaWE8L3BsYWNlTmFtZT4gbm9yCiAgICAgICAgICAgICAgICAgICAgZXZlbiBzdGFydGVkIGFnYWluc3QgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXNlPC9wbGFjZU5hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5JIGRvIG5vdCwgaG93ZXZlciwgc3VnZ2VzdCB0aGF0IHlvdSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBpbnZpdGUgdGhlIHJlc3QsIHVubGVzcyB5b3UgYXJlIHJlYWR5IHRvIGRvIGZvciB5b3Vyc2VsdmVzIHdoYXQgaXMgbmVjZXNzYXJ5OwogICAgICAgICAgICAgICAgICAgIGZvciBpdCB3b3VsZCBiZSBmdXRpbGUgdG8gYWJhbmRvbiBvdXIgb3duIGludGVyZXN0cyBhbmQgcHJldGVuZCB0aGF0IHdlIGFyZQogICAgICAgICAgICAgICAgICAgIHByb3RlY3RpbmcgdGhvc2Ugb2Ygb3RoZXJzLCBvciB0byBvdmVybG9vayB0aGUgcHJlc2VudCBkYW5nZXJzIGFuZCBhbGFybSBvdXIKICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMgd2l0aCBkYW5nZXJzIHRvIGNvbWUuIFRoYXQgaXMgbm90IG15IG1lYW5pbmcuIEJ1dCBJIGRvIGNvbnRlbmQgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgIG11c3Qgc2VuZCBzdXBwbGllcyB0byB0aGUgZm9yY2VzIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzI4NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3Mjg1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+IGFuZCBzYXRpc2Z5IGFsbCB0aGVpciBkZW1hbmRzLCBhbmQgd2hpbGUgd2UgbWFrZQogICAgICAgICAgICAgICAgICAgIHByZXBhcmF0aW9uIG91cnNlbHZlcywgd2UgbXVzdCBzdW1tb24sIGNvbGxlY3QsIGluc3RydWN0LCBhbmQgZXhob3J0IHRoZSByZXN0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIEdyZWVrcy4gVGhhdCBpcyB0aGUgZHV0eSBvZiBhIGNpdHkgd2l0aCBhIHJlcHV0YXRpb24gc3VjaCBhcyB5b3VycyBlbmpveXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgeW91IGltYWdpbmUgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gd2lsbCBiZSBzYXZlZCBieSBDaGFsY2lkaWFucyBvcgogICAgICAgICAgICAgICAgICAgIE1lZ2FyaWFucywgd2hpbGUgeW91IHJ1biBhd2F5IGZyb20gdGhlIHRhc2ssIHlvdSBhcmUgd3JvbmcuIEZvciB0aGV5IG1heSB0aGluawogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgbHVja3kgaWYgdGhleSBjYW4gc2F2ZSB0aGVtc2VsdmVzIHNlcGFyYXRlbHkuIEJ1dCB0aGlzIGlzIGEgdGFzayBmb3IKICAgICAgICAgICAgICAgICAgICB5b3U7IGl0IHdhcyBmb3IgeW91IHRoYXQgeW91ciBhbmNlc3RvcnMgd29uIHRoaXMgcHJvdWQgcHJpdmlsZWdlIGFuZCBiZXF1ZWF0aGVkCiAgICAgICAgICAgICAgICAgICAgaXQgdG8geW91IGF0IGdyZWF0IGFuZCBtYW5pZm9sZCByaXNrLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYKICAgICAgICAgICAgICAgICAgICBldmVyeSBtYW4gc2l0cyBpZGxlLCBjb25zdWx0aW5nIGhpcyBvd24gcGxlYXN1cmUgYW5kIGNhcmVmdWwgdG8gYXZvaWQgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGR1dHksIG5vdCBvbmx5IHdpbGwgaGUgZmluZCBubyBvbmUgdG8gZG8gaXQgZm9yIGhpbSwgYnV0IEkgZmVhciB0aGF0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgZHV0aWVzIHRoYXQgd2Ugd2lzaCB0byBzaGlyayBtYXkgYWxsIGJlIGZvcmNlZCB1cG9uIHVzIGF0IG9uY2UuIDwvdHJhbnNsYXRpb24+"
translation['9.76'] = "PHRyYW5zbGF0aW9uPjxkaXYxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIG9yZz0idW5pZm9ybSIgc2FtcGxlPSJjb21wbGV0ZSIgdHlwZT0ic3BlZWNoIj4KICAgICAgICAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm91cnRoIFBoaWxpcHBpYzwvaGVhZD4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgbWF0dGVycyB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91IGFyZSBkZWJhdGluZywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFyZQogICAgICAgICAgICAgICAgICAgIHRvIG15IG1pbmQgc28gaW1wb3J0YW50IGFuZCBldmVuIHZpdGFsIHRvIHRoZSBTdGF0ZSwgdGhhdCBJIHdpbGwgZW5kZWF2b3VyIHRvCiAgICAgICAgICAgICAgICAgICAgb2ZmZXIgeW91IHdoYXQgSSBjb25zaWRlciBwcm9maXRhYmxlIGFkdmljZSBvbiB0aGUgc3ViamVjdC4gV2hpbGUgdGhlIGZhdWx0cwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGF2ZSBwcm9kdWNlZCB0aGlzIHVuaGFwcHkgc3RhdGUgb2YgdGhpbmdzIGFyZSBuZWl0aGVyIGZldyBub3IgcmVjZW50bHkKICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRlZCwgdGhlcmUgaXMgbm90aGluZywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIG1vcmUgdmV4aW5nIGF0IHRoZSBwcmVzZW50IHRpbWUgdGhhbiB0aGUgd2F5IGluIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91IGRldGFjaCB5b3VyIHRob3VnaHRzIGZyb20gYWZmYWlycywgYW5kIGRpc3BsYXkgYW4gaW50ZXJlc3Qgb25seSBzbyBsb25nIGFzCiAgICAgICAgICAgICAgICAgICAgeW91IHNpdCBoZXJlIGxpc3RlbmluZywgb3Igd2hlbiBzb21lIGZyZXNoIGl0ZW0gb2YgbmV3cyBhcnJpdmVzOyBhZnRlciB0aGF0LAogICAgICAgICAgICAgICAgICAgIGVhY2ggbWFuIGdvZXMgaG9tZSwgYW5kIG5vdCBvbmx5IHBheXMgbm8gYXR0ZW50aW9uIHRvIHB1YmxpYyBidXNpbmVzcywgYnV0IGRvZXMKICAgICAgICAgICAgICAgICAgICBub3QgZXZlbiByZWNhbGwgaXQgdG8gbWluZC4gPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGUgZXh0ZW50IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlY2tsZXNzbmVzcyBhbmQgcmFwYWNpdHkgdGhhdCBQaGlsaXAgc2hvd3MgaW4gaGlzIGRlYWxpbmdzIHdpdGggYWxsIG1lbiBpcwogICAgICAgICAgICAgICAgICAgIGluZGVlZCBhcyBncmVhdCBhcyBpdCBoYXMgYmVlbiBkZXNjcmliZWQgdG8geW91OyBidXQgaG93IGltcG9zc2libGUgaXQgaXMgdG8KICAgICAgICAgICAgICAgICAgICBzdGF5IGhpbSBpbiB0aGlzIGNhcmVlciBieSBhcmd1bWVudCBhbmQgZGVjbGFtYXRpb24sIGFzc3VyZWRseSBubyBvbmUgaXMKICAgICAgICAgICAgICAgICAgICBpZ25vcmFudC4gRm9yIGluZGVlZCwgaWYgbm8gc2luZ2xlIHRoaW5nIGVsc2UgY2FuIHRlYWNoIGEgbWFuIHRoZSB0cnV0aCBvZiB0aGF0LAogICAgICAgICAgICAgICAgICAgIGxldCBoaW0gd2VpZ2ggdGhlIGZvbGxvd2luZyBjb25zaWRlcmF0aW9uLiBXaGVuIHdlIGhhdmUgaGFkIHRvIHNwZWFrIGluIGRlZmVuY2UKICAgICAgICAgICAgICAgICAgICBvZiBvdXIgcmlnaHRzLCB3ZSBoYXZlIG5ldmVyIHlldCBiZWVuIGRlZmVhdGVkIG9yIHByb3ZlZCBpbiB0aGUgd3JvbmcsIGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGNhc2Ugd2UgdmFucXVpc2ggYWxsIG91ciBvcHBvbmVudHMgYW5kIGhhdmUgdGhlIGJlc3Qgb2YgaXQgaW4gYXJndW1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JcywgdGhlbiwgUGhpbGlwIGFueSB0aGUgd29yc2Ugb2ZmIGZvcgogICAgICAgICAgICAgICAgICAgIHRoYXQsIG9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYW55IHRoZSBiZXR0ZXI/IEZhcgogICAgICAgICAgICAgICAgICAgIGZyb20gaXQ7IGZvciBhZnRlcndhcmRzLCB3aGVuIGhlIHRha2VzIHVwIGFybXMgYW5kIG1hcmNoZXMgdG8gYmF0dGxlLCByZWFkeSB0bwogICAgICAgICAgICAgICAgICAgIHJpc2sgYWxsIGhlIGhhcywgYW5kIHdlIHNpdCBpZGxlLCBhbGlrZSB0aG9zZSB3aG8gaGF2ZSBwbGVhZGVkIG91ciBjYXVzZSBhbmQKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gaGF2ZSBiZWVuIGxpc3RlbmluZyB0byB0aGVtLCB0aGVuLCBuYXR1cmFsbHkgZW5vdWdoLCBkZWVkcyBvdXR3ZWlnaAogICAgICAgICAgICAgICAgICAgIHdvcmRzLCBhbmQgdGhlIHdvcmxkIGluIGdlbmVyYWwgZ2l2ZXMgaGVlZCwgbm90IHRvIHdoYXQgd2Ugb25jZSBzYWlkIHdpdGgKICAgICAgICAgICAgICAgICAgICBqdXN0aWNlIG9yIG1pZ2h0IG5vdyBzYXksIGJ1dCB0byB3aGF0IHdlIGRvLiBBbmQgd2hhdCB3ZSBkbyBpcyBpbnN1ZmZpY2llbnQgdG8KICAgICAgICAgICAgICAgICAgICBwcm90ZWN0IGFueSBvZiB0aGUgdmljdGltcyBvZiBpbmp1c3RpY2U7IGluIGZhY3QsIEkgbmVlZCBzYXkgbm8gbW9yZSBhYm91dCBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYXMgdGhlIEdyZWVrcyBpbiBldmVyeSBjaXR5IGFyZQogICAgICAgICAgICAgICAgICAgIGRpdmlkZWQgaW50byB0aGVzZSB0d28gcGFydGllc+KAlHRoZSBvbmUgZGVzaXJpbmcgbmVpdGhlciB0byBydWxlIG90aGVycwogICAgICAgICAgICAgICAgICAgIGJ5IGZvcmNlIG5vciB0byBiZSBzbGF2ZXMgdG8gYW55IG1hbiwgYnV0IHRvIGVuam95IGxpYmVydHkgYW5kIGVxdWFsaXR5IHVuZGVyIGEKICAgICAgICAgICAgICAgICAgICBmcmVlIGNvbnN0aXR1dGlvbjsgdGhlIG90aGVyIGVhZ2VyIHRvIHJ1bGUgdGhlaXIgZmVsbG93LWNvdW50cnltZW4sIGJ1dCB0byB0YWtlCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgb3JkZXJzIGZyb20gc29tZSB0aGlyZCBwZXJzb24sIHdobyB0aGV5IHRoaW5rIHdpbGwgZW5hYmxlIHRoZW0gdG8gY29tcGFzcwogICAgICAgICAgICAgICAgICAgIHRoZWlyIGVuZHPigJRQaGlsaXAncyBmYWN0aW9uLCB0aG9zZSB3aG8gaGFua2VyIGFmdGVyIHR5cmFubmllcyBhbmQKICAgICAgICAgICAgICAgICAgICBvbGlnYXJjaGllcywgaGF2ZSBldmVyeXdoZXJlIGdhaW5lZCB0aGUgc3VwcmVtYWN5LCBhbmQgSSBkb3VidCB3aGV0aGVyIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSBzdGF0ZXMgdGhlcmUgaXMgYW55IHN0YWJsZSBkZW1vY3JhY3kgbGVmdCBleGNlcHQgb3VyIG93bi4gPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGlzIHN1cHJlbWFjeSBvZiB0aGUgY29uc3RpdHV0aW9uLW1vbmdlcnMKICAgICAgICAgICAgICAgICAgICB3aG8gcmVseSBvbiBQaGlsaXAncyBzdXBwb3J0IGhhcyBiZWVuIGdhaW5lZCBieSBhbGwgdGhlIGRldmljZXMgdXN1YWwgaW4KICAgICAgICAgICAgICAgICAgICBwb2xpdGljcywgZmlyc3QgYW5kIGZvcmVtb3N0IGJ5IHByb3ZpZGluZyBhIGRpc3BlbnNlciBvZiB3ZWFsdGggdG8gc3VjaCBhcyBjb3ZldAogICAgICAgICAgICAgICAgICAgIGl0LCBzZWNvbmRseSwgYW5kIG5vdCBsZXNzIGVmZmVjdGl2ZWx5LCBieSBoYXZpbmcgYXQgdGhlaXIgYmFjayBhIGZvcmNlIGNhcGFibGUKICAgICAgICAgICAgICAgICAgICBvZiBjcnVzaGluZyB0aGVpciBvcHBvbmVudHMgb24gYW55IG9jY2FzaW9uIHdoZW4gdGhleSBtYXkgY2FsbCB1cG9uIGl0LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdlLCBBdGhlbmlhbnMsIGFyZSBub3Qgb25seSBiZWhpbmRoYW5kCiAgICAgICAgICAgICAgICAgICAgaW4gdGhpcyByZXNwZWN0LCBidXQgd2UgY2Fubm90IGV2ZW4gcm91c2Ugb3Vyc2VsdmVzIGZyb20gc2xlZXA7IHdlIGFyZSBsaWtlIG1lbgogICAgICAgICAgICAgICAgICAgIHdobyBoYXZlIGRydW5rIG1hbmRyYWdvcmEgb3Igc29tZSBzdWNoIGRydWcuIEhlbmNlLCBJIGJlbGlldmXigJRmb3IgSQogICAgICAgICAgICAgICAgICAgIG11c3Qgc3BlYWsgdGhlIHRydXRoIGFzIEkgY29uY2VpdmUgaXTigJR3ZSBoYXZlIGJlZW4gc28gZGlzY3JlZGl0ZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgZGVzcGlzZWQgdGhhdCBvZiB0aG9zZSB3aG8gYXJlIGludm9sdmVkIGluIGFjdHVhbCBkYW5nZXIgc29tZSBkaXNwdXRlIHdpdGggdXMKICAgICAgICAgICAgICAgICAgICBhYm91dCB0aGUgcmlnaHQgb2YgbGVhZGVyc2hpcCwgb3RoZXJzIGFib3V0IHRoZSBtZWV0aW5nLXBsYWNlIGZvciBhIGNvbmdyZXNzLAogICAgICAgICAgICAgICAgICAgIGFuZCBzb21lIGhhdmUgbWFkZSB1cCB0aGVpciBtaW5kcyB0byBkZWZlbmQgdGhlbXNlbHZlcyBzaW5nbGUtaGFuZGVkIHJhdGhlciB0aGFuCiAgICAgICAgICAgICAgICAgICAgd2l0aCB1cy4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hhdCBpcwogICAgICAgICAgICAgICAgICAgIG15IG9iamVjdCBpbiB0cmVhdGluZyB0aGlzIG1hdHRlciBzbyBmdWxseT8gRm9yIEkgcHJvdGVzdCBpbiBIZWF2ZW4ncyBuYW1lIHRoYXQKICAgICAgICAgICAgICAgICAgICBJIGhhdmUgbm8gYW1iaXRpb24gdG8gaW5jdXIgeW91ciBob3N0aWxpdHkuIEl0IGlzIHRoYXQgZWFjaCBvbmUgb2YgeW91LAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgbWF5IGtub3cgYW5kIHJlYWxpemUgdGhpc+KAlHRoYXQgaW4gc3RhdGUgYWZmYWlycywgYXMgd2VsbCBhcwogICAgICAgICAgICAgICAgICAgIGluIHByaXZhdGUgbGlmZSwgZGFpbHkgaW5kaWZmZXJlbmNlIGFuZCBjYXJlbGVzc25lc3MgZG8gbm90IG1ha2UgdGhlaXIgcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgZmVsdCBhdCBvbmNlIG9uIGVhY2ggb2NjYXNpb24gd2hlbiBkdXR5IGlzIG5lZ2xlY3RlZCwgYnV0IGNvbWUgaG9tZSB0byB1cyB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlIHRvdGFsIHJlc3VsdCBvZiBvdXIgcG9saWN5IGlzIHNlZW4uIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5Mb29rIGF0CiAgICAgICAgICAgICAgICAgICAgU2Vycml1bSBhbmQgRG9yaXNjdXM7IGZvciB0aGVzZSB3ZXJlIHRoZSBwbGFjZXMgdGhhdCB3ZXJlIGRpc3JlZ2FyZGVkCiAgICAgICAgICAgICAgICAgICAgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIHBlYWNlLCBhbmQgbWFueSBvZiB5b3UgcGVyaGFwcyBkbyBub3QgZXZlbiBrbm93IG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZXhpc3RlbmNlLiBZZXQgaXQgd2FzIHlvdXIgbmVnbGVjdCBhbmQgYWJhbmRvbm1lbnQgb2YgdGhlbSB0aGF0IHJ1aW5lZAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+IGFuZCBDZXJzb2JsZXB0ZXMsIHdobyB3YXMKICAgICAgICAgICAgICAgICAgICB5b3VyIGFsbHkuIEFnYWluLCBQaGlsaXAsIHNlZWluZyB0aGF0IHRoZXNlIHdlcmUgb3Zlcmxvb2tlZCBhbmQgd2VyZSByZWNlaXZpbmcKICAgICAgICAgICAgICAgICAgICBubyBoZWxwIGZyb20geW91LCBwcm9jZWVkZWQgdG8gcmF6ZSBQb3J0aG11cyB0byB0aGUgZ3JvdW5kIGFuZCBmb3VuZGVkIGEgdHlyYW5ueQogICAgICAgICAgICAgICAgICAgIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gb3ZlciBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4gYXMgYSBtZW5hY2UgdG8geW91LiA8bWlsZXN0b25lIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+QmVjYXVzZSB3ZSBuZWdsZWN0ZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhcmEiIGtleT0icGVyc2V1cyxNZWdhcmEiPk1lZ2FyYTwvcGxhY2VOYW1lPiB3YXMKICAgICAgICAgICAgICAgICAgICB2ZXJ5IG5lYXJseSBjYXB0dXJlZC4gWW91IHNob3dlZCBubyBjb25jZXJuIG5vciBhbnhpZXR5IGFib3V0IGFueSBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmdzLCBhbmQgZ2F2ZSBubyBpbmRpY2F0aW9uIHRoYXQgeW91IHdvdWxkIG5vdCBhbGxvdyBQaGlsaXAgdG8gY29udGludWUKICAgICAgICAgICAgICAgICAgICB0aGVtOyBzbyBoZSBib3VnaHQgdXAgQW50cm9uZXMgYW5kIHNvb24gYWZ0ZXJ3YXJkcyBnb3QgT3JldXMgdW5kZXIgaGlzIGNvbnRyb2wuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+SSBwYXNzIG92ZXIgbWFueSBvdGhlciBpbnN0YW5jZXMsIHN1Y2ggYXMKICAgICAgICAgICAgICAgICAgICBQaGVyYWUsIHRoZSByYWlkIGFnYWluc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbWJyYWNpYSIga2V5PSJwZXJzZXVzLEFtYnJhY2lhIj5BbWJyYWNpYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICB0aGUgbWFzc2FjcmVzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRWxpcyIga2V5PSJwZXJzZXVzLEVsaXMiPkVsaXM8L3BsYWNlTmFtZT4sIGFuZCBjb3VudGxlc3MKICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Rm9yIHRoZSBwbGFjZXMgbmFtZWQgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGggc2VlIGVzcGVjaWFsbHkgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gOS4xMiIgdmFsaWQ9InllcyI+RGVtLiA5LjEyPC9iaWJsPiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gOS4xNSIgdmFsaWQ9InllcyI+RGVtLiA5LjE1PC9iaWJsPiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gOS4xNyIgdmFsaWQ9InllcyI+RGVtLiA5LjE3PC9iaWJsPiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMjciIHZhbGlkPSJ5ZXMiPkRlbS4gOS4yNzwvYmlibD4sIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMzMiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDkuMzM8L2JpYmw+Ljwvbm90ZT4gSSBoYXZlIGdvbmUgaW50byB0aGVzZSBkZXRhaWxzLCBub3QgdG8gZ2l2ZSB5b3UgYQogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlIGNhdGFsb2d1ZSBvZiB0aGUgdmljdGltcyBvZiBQaGlsaXAncyBvcHByZXNzaW9uIGFuZCBpbmp1c3RpY2UsIGJ1dCB0bwogICAgICAgICAgICAgICAgICAgIG1ha2UgaXQgY2xlYXIgdG8geW91IHRoYXQgaGUgd2lsbCBuZXZlciBkZXNpc3QgZnJvbSBtb2xlc3RpbmcgYWxsIG9mIHVzIGFuZAogICAgICAgICAgICAgICAgICAgIGJyaW5naW5nIHVzIHVuZGVyIGhpcyBzd2F5LCB1bmxlc3Mgc29tZW9uZSByZXN0cmFpbnMgaGltLiA8bWlsZXN0b25lIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHRoZXJlIGFyZSBzb21lCiAgICAgICAgICAgICAgICAgICAgd2hvLCB3aXRob3V0IHdhaXRpbmcgdG8gaGVhciB0aGUgc3BlZWNoZXMgb24gdGhlc2UgcXVlc3Rpb25zLCBhcmUgaW4gdGhlIGhhYml0CiAgICAgICAgICAgICAgICAgICAgb2YgYXNraW5nIGF0IG9uY2UsIOKAnFdoYXQgdGhlbiBvdWdodCB3ZSB0byBkbz/igJ3igJRub3QKICAgICAgICAgICAgICAgICAgICBpbiBvcmRlciB0byBkbyBpdCwgd2hlbiB0aGV5IGhhdmUgaGVhcmQgaXQsIGZvciBpZiBzbywgdGhleSB3b3VsZCBiZSB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGhlbHBmdWwgb2YgYWxsIGNpdGl6ZW5zLCBidXQgc2ltcGx5IHRvIGdldCByaWQgb2YgdGhlIHNwZWFrZXIuIE5ldmVydGhlbGVzcywgeW91CiAgICAgICAgICAgICAgICAgICAgbXVzdCBiZSB0b2xkIHdoYXQgeW91IG91Z2h0IHRvIGRvLiBGaXJzdCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdSBtdXN0IGZpeCB0aGlzIGZpcm1seSBpbiB5b3VyIG1pbmRzLCB0aGF0IFBoaWxpcCBpcwogICAgICAgICAgICAgICAgICAgIGF0IHdhciB3aXRoIHVzIGFuZCBoYXMgYnJva2VuIHRoZSBwZWFjZSwgYW5kIHRoYXQgaGUgaXMgaWxsLWRpc3Bvc2VkIGFuZCBob3N0aWxlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHdob2xlIGNpdHkgYW5kIHRvIHRoZSB2ZXJ5IHNvaWwgb24gd2hpY2ggdGhlIGNpdHkgc3RhbmRzLCBhbmQsIEkgd2lsbAogICAgICAgICAgICAgICAgICAgIGFkZCwgdG8gdGhlIGdvZHMgdGhhdCBkd2VsbCBpbiBpdDsgYW5kIG1heSB0aG9zZSBzYW1lIGdvZHMgY29tcGxldGUgaGlzIHJ1aW4hCiAgICAgICAgICAgICAgICAgICAgVGhlIGNoaWVmIG9iamVjdCwgaG93ZXZlciwgb2YgaGlzIGFybXMgYW5kIGhpcyBkaXBsb21hY3kgaXMgb3VyIGZyZWUKICAgICAgICAgICAgICAgICAgICBjb25zdGl0dXRpb24sIGFuZCBvbiBub3RoaW5nIGluIHRoZSB3b3JsZCBpcyBoZSBtb3JlIGJlbnQgdGhhbiBvbiBpdHMKICAgICAgICAgICAgICAgICAgICBkZXN0cnVjdGlvbi4gPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaXMgaW4gYSB3YXkgaW5ldml0YWJsZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgc2hvdWxkIG5vdyBiZSBhY3RpbmcgdGh1cy4gRm9yIG9ic2VydmUhIEhlIHdhbnRzIHRvIHJ1bGUsIGFuZCBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBtYWRlIHVwIGhpcyBtaW5kIHRoYXQgeW91LCBhbmQgeW91IG9ubHksIGJhciB0aGUgd2F5LiBIZSBoYXMgbG9uZyBpbmp1cmVkIHlvdTsKICAgICAgICAgICAgICAgICAgICBvZiBub3RoaW5nIGlzIGhlIG1vcmUgY29uc2Npb3VzIHRoYW4gb2YgdGhhdC4gRm9yIGl0IGlzIGJ5IGhvbGRpbmcgdGhlIGNpdGllcwogICAgICAgICAgICAgICAgICAgIHRoYXQgYXJlIHJlYWxseSB5b3VycyB0aGF0IGhlIHJldGFpbnMgc2FmZSBwb3NzZXNzaW9uIG9mIGFsbCB0aGUgcmVzdDsKICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaWYgaGUgZ2F2ZSB1cCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDgxNCIga2V5PSJ0Z24sNjAwNDgxNCI+UG90aWRhZWE8L3BsYWNlTmFtZT4sIGV2ZW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiB3b3VsZCBiZSBubyBzYWZlIHBsYWNlIGZvciBoaW0uIEhlIGtub3dzLCB0aGVuLCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHR3byBmYWN0c+KAlHRoYXQgaGUgaXMgaW50cmlndWluZyBhZ2FpbnN0IHlvdSBhbmQgdGhhdCB5b3UgYXJlIGF3YXJlIG9mCiAgICAgICAgICAgICAgICAgICAgaXQuIEFzc3VtaW5nIHRoYXQgeW91IGFyZSBpbnRlbGxpZ2VudCwgaGUgY29uY2x1ZGVzIHRoYXQgeW91IGhhdGUgaGltLiBCZXNpZGVzCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugd2VpZ2h0eSBjb25zaWRlcmF0aW9ucywgaGUga25vd3MgZm9yIGNlcnRhaW4gdGhhdCBldmVuIGlmIGhlIG1hc3RlcnMgYWxsCiAgICAgICAgICAgICAgICAgICAgZWxzZSwgaGlzIHBvd2VyIHdpbGwgYmUgcHJlY2FyaW91cyBhcyBsb25nIGFzIHlvdSByZW1haW4gYSBkZW1vY3JhY3ksIGJ1dCBpZgogICAgICAgICAgICAgICAgICAgIGV2ZXIgaGUgbWVldHMgd2l0aCBzb21lIG1pc2NoYW5jZSDvvIhhbmQgdGhlcmUgYXJlIG1hbnkgdG8gd2hpY2ggbWFua2luZAogICAgICAgICAgICAgICAgICAgIGlzIGxpYWJsZe+8iSwgYWxsIHRoZSBmb3JjZXMgdGhhdCBhcmUgbm93IHVuZGVyIHJlc3RyYWludCB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgYXR0cmFjdGVkIHRvIHlvdXIgc2lkZS4gPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbmF0dXJlIGhhcyBub3QKICAgICAgICAgICAgICAgICAgICBlcXVpcHBlZCB5b3UgdG8gc2VlayBhZ2dyYW5kaXplbWVudCBhbmQgc2VjdXJlIGVtcGlyZSwgYnV0IHlvdSBhcmUgY2xldmVyIGF0CiAgICAgICAgICAgICAgICAgICAgdGh3YXJ0aW5nIGFub3RoZXIncyBkZXNpZ25zIGFuZCB3cmVzdGluZyBmcm9tIGhpbSBoaXMgZ2FpbnMsIGFuZCBxdWljayB0bwogICAgICAgICAgICAgICAgICAgIGNvbmZvdW5kIHV0dGVybHkgdGhlIHBsb3RzIG9mIHRoZSBhbWJpdGlvdXMgYW5kIHZpbmRpY2F0ZSB0aGUgZnJlZWRvbSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBtYW5raW5kLiBUaGVyZWZvcmUgaGUgZG9lcyBub3Qgd2FudCB0byBoYXZlIHRoZSBBdGhlbmlhbiB0cmFkaXRpb24gb2YgbGliZXJ0eQogICAgICAgICAgICAgICAgICAgIHdhdGNoaW5nIHRvIHNlaXplIGV2ZXJ5IGNoYW5jZSBhZ2FpbnN0IGhpbXNlbGY7IG5vciBpcyBoaXMgcmVhc29uaW5nIGhlcmUgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgZmF1bHR5IG9yIGlkbGUuIDxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcywgdGhlbiwgaXMgdGhlIGZpcnN0IHRoaW5nCiAgICAgICAgICAgICAgICAgICAgbmVlZGZ1bCwgdG8gcmVjb2duaXplIGluIFBoaWxpcCB0aGUgaW52ZXRlcmF0ZSBlbmVteSBvZiBjb25zdGl0dXRpb25hbAogICAgICAgICAgICAgICAgICAgIGdvdmVybm1lbnQgYW5kIGRlbW9jcmFjeTsgYW5kIHlvdXIgc2Vjb25kIG5lZWQgaXMgdG8gY29udmluY2UgeW91cnNlbHZlcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgYWxsIGhpcyBhY3Rpdml0eSBhbmQgYWxsIGhpcyBvcmdhbml6YXRpb24gaXMgcHJlcGFyaW5nIHRoZSB3YXkgZm9yIGFuIGF0dGFjayBvbgogICAgICAgICAgICAgICAgICAgIG91ciBjaXR5LiBGb3Igbm9uZSBvZiB5b3UgaXMgc28gc2ltcGxlIGFzIHRvIGJlbGlldmUgdGhhdCB0aG91Z2ggUGhpbGlwIGNvdmV0cwogICAgICAgICAgICAgICAgICAgIHRoZXNlIHdyZXRjaGVkIG9iamVjdHMgaW4gVGhyYWNl4oCUZm9yIHdoYXQgZWxzZSBjYW4gb25lIGNhbGwgRHJvbmdpbHVzCiAgICAgICAgICAgICAgICAgICAgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzEwIiBrZXk9InRnbiw3MDEwNzEwIj5DYWJ5bGU8L3BsYWNlTmFtZT4gYW5kIE1hc3RpcmEgYW5kIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIHBsYWNlcyBoZSBpcyBzYWlkIHRvIGJlIG5vdyBob2xkaW5nID/igJRhbmQgdGhvdWdoIGhlIGVuZHVyZXMgdG9pbCBhbmQKICAgICAgICAgICAgICAgICAgICB3aW50ZXIgc3Rvcm1zIGFuZCBkZWFkbHkgcGVyaWwgZm9yIHRoZSBwcml2aWxlZ2Ugb2YgdGFraW5nIHRoZW0sIDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+eWV0IGhlIGRvZXMgbm90IGNvdmV0IHRoZSBBdGhlbmlhbiBoYXJib3VycyBhbmQKICAgICAgICAgICAgICAgICAgICBkb2NreWFyZHMgYW5kIHdhci1nYWxsZXlzIGFuZCB0aGUgcGxhY2UgaXRzZWxmIGFuZCB0aGUgZ2xvcnkgb2YgaXTigJRhbmQKICAgICAgICAgICAgICAgICAgICBuZXZlciBtYXkgUGhpbGlwIG9yIGFueSBvdGhlciBtYW4gbWFrZSBoaW1zZWxmIG1hc3RlciBvZiB0aGVzZSBieSB0aGUgY29ucXVlc3QKICAgICAgICAgICAgICAgICAgICBvZiBvdXIgY2l0eSHigJRidXQgd2lsbCBhbGxvdyB5b3UgdG8gcmV0YWluIHRoZW0sIHdoaWxlIGhlIHdpbnRlcnMgaW4KICAgICAgICAgICAgICAgICAgICB0aGF0IHB1cmdhdG9yeSBmb3IgdGhlIHNha2Ugb2YgdGhlIHJ5ZSBhbmQgbWlsbGV0IG9mIHRoZSBUaHJhY2lhbiBzdG9yZS1waXRzLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIG5vdCBzbywgYnV0IGl0IGlzIHRvIHdpbiB0aGVzZQogICAgICAgICAgICAgICAgICAgIHByaXplcyB0aGF0IGhlIGRldm90ZXMgaGlzIGFjdGl2aXRpZXMgdG8gYWxsIHRob3NlIG90aGVyIG9iamVjdHMuIDxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlIGVhY2ggbXVzdCBrbm93IGFuZCBmZWVsIGluIGhpcyBvd24gbWluZCB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCBvZiB0aGlzLCBidXQgeW91IG11c3Qgbm90LCBvZiBjb3Vyc2UsIGNhbGwgZm9yIGEgZGVjbGFyYXRpb24gb2Ygd2FyIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgc3RhdGVzbWFuIHdobyBpcyB0cnlpbmcsIGluIGFsbCBob25lc3R5LCB0byBnaXZlIHlvdSB0aGUgYmVzdCBhZHZpY2U7IGZvcgogICAgICAgICAgICAgICAgICAgIHRoYXQgd291bGQgYmUgdGhlIGFjdCBvZiBtZW4gd2hvIHdhbnQgdG8gZmluZCBzb21lb25lIHRvIGZpZ2h0IHdpdGgsIG5vdCBvZiBtZW4KICAgICAgICAgICAgICAgICAgICB3aG8gc2VlayB0aGUgaW50ZXJlc3RzIG9mIHRoZWlyIHN0YXRlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VG8KICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zZSB3YXIgb24gUGhpbGlwIHdvdWxkIGJlIGRhbmdlcm91cyB0byB0aGUgc3BlYWtlciwgYXMgZXhwbGFpbmVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2ggPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gOC42OCIgdmFsaWQ9InllcyI+RGVtLiA4LjY4PC9iaWJsPiwgYW5kIHVubmVjZXNzYXJ5LCBhcyBQaGlsaXAgaXMKICAgICAgICAgICAgICAgICAgICAgICAgYWxyZWFkeSBhdCB3YXIgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJzZWN0aW9uIiAvPkZvciBjb25zaWRlci4gSWYgZm9yIGhpcyBmaXJzdCB2aW9sYXRpb24gb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcGVhY2UsIG9yIGhpcyBzZWNvbmQgb3IgdGhpcmTigJRmb3IgdGhlcmUgd2FzIGEgbG9uZyBzZXJpZXMgb2YKICAgICAgICAgICAgICAgICAgICB0aGVt4oCUc29tZW9uZSBoYWQgcHJvcG9zZWQgYSBkZWNsYXJhdGlvbiBvZiB3YXIgYWdhaW5zdCBoaW0sIGFuZCBpZgogICAgICAgICAgICAgICAgICAgIFBoaWxpcCwganVzdCBhcyBoZSBpcyBkb2luZyBub3cgd2hlbiBubyBvbmUgcHJvcG9zZXMgc3VjaCBhIGRlY2xhcmF0aW9uLCBoYWQKICAgICAgICAgICAgICAgICAgICBnb25lIHRvIHRoZSBoZWxwIG9mIHRoZSBDYXJkaWFucywgd291bGQgbm90IHRoZSBwcm9wb3NlciBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgc3VwcHJlc3NlZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSB3b3JkIHVzZWQgaXMgc3Ryb25nLCBidXQKICAgICAgICAgICAgICAgICAgICAgICAgcHVycG9zZWx5IHZhZ3VlLiBIZSB3b3VsZCBoYXZlIGluY3VycmVkIHRoZSBpbmV2aXRhYmxlPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPs6zz4HOsc+Gzr1cIM+AzrHPgc6xduG9uc68z4nOvTwvZm9yZWlnbj4uPC9ub3RlPiBhbmQgYmxhbWVkIGJ5IGV2ZXJ5Ym9keSBhcyB0aGUgcmVhbAogICAgICAgICAgICAgICAgICAgIGF1dGhvciBvZiBQaGlsaXAncyBleHBlZGl0aW9uPyA8bWlsZXN0b25lIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gZG8gbm90CiAgICAgICAgICAgICAgICAgICAgbG9vayBhYm91dCBmb3IgYSBzY2FwZWdvYXQgZm9yIFBoaWxpcCdzIHNpbnMsIHNvbWVvbmUgd2hvbSB5b3UgY2FuIHRocm93IGZvciBoaXMKICAgICAgICAgICAgICAgICAgICBoaXJlbGluZ3MgdG8gcmVuZCBsaW1iIGZyb20gbGltYi4gRG8gbm90IHZvdGUgZm9yIHdhciBhbmQgdGhlbiBmYWxsIHRvIGRpc3B1dGluZwogICAgICAgICAgICAgICAgICAgIGFtb25nIHlvdXJzZWx2ZXMgd2hldGhlciB5b3Ugb3VnaHQgb3Igb3VnaHQgbm90IHRvIGhhdmUgZG9uZSBzbywgYnV0IGltaXRhdGUgaGlzCiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcyBvZiB3YXJmYXJlLCBzdXBwbHlpbmcgdGhvc2Ugd2hvIGFyZSBub3cgcmVzaXN0aW5nIGhpbSB3aXRoIG1vbmV5IGFuZAogICAgICAgICAgICAgICAgICAgIHdoYXRldmVyIGVsc2UgdGhleSBuZWVkLCBhbmQgcmFpc2luZyBhIHdhci1mdW5kIHlvdXJzZWx2ZXMsIEF0aGVuaWFucywgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvdmlkaW5nIGFuIGFybXksIHN3aWZ0LXNhaWxpbmcgZ2FsbGV5cywgaG9yc2VzLCBjYXZhbHJ5LXRyYW5zcG9ydHMsIGFuZAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcgdGhhdCB3YXIgcmVxdWlyZXMuIDxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGF0IHByZXNlbnQKICAgICAgICAgICAgICAgICAgICBvdXIgc3lzdGVtIGlzIGEgbW9ja2VyeSwgYW5kLCBieSBIZWF2ZW4sIEkgZG8gbm90IGJlbGlldmUgdGhhdCBldmVuIFBoaWxpcAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgd291bGQgcHJheSB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gbWlnaHQKICAgICAgICAgICAgICAgICAgICBhY3Qgb3RoZXJ3aXNlIHRoYW4gc2hlIGlzIGFjdGluZy4gWW91IGFyZSBiZWhpbmQgeW91ciB0aW1lIGFuZCB3YXN0ZSB5b3VyIG1vbmV5OwogICAgICAgICAgICAgICAgICAgIHlvdSBsb29rIHJvdW5kIGZvciBzb21lb25lIHRvIG1hbmFnZSB0aGUgYnVzaW5lc3MgYW5kIHRoZW4gcXVhcnJlbCB3aXRoIGhpbTsgeW91CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgdGhlIGJsYW1lIG9uIG9uZSBhbm90aGVyLiBJIHdpbGwgZXhwbGFpbiBob3cgdGhpcyBjb21lcyBhYm91dCBhbmQgd2lsbAogICAgICAgICAgICAgICAgICAgIHRlbGwgeW91IGhvdyB0byBzdG9wIGl0LiA8bWlsZXN0b25lIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVyIHlldCwgQXRoZW5pYW5zLAogICAgICAgICAgICAgICAgICAgIGhhdmUgeW91IGluc3RpdHV0ZWQgb3Igb3JnYW5pemVkIGEgc2luZ2xlIHBsYW4gb2YgYWN0aW9uIHByb3Blcmx5IGF0IHRoZSBzdGFydCwKICAgICAgICAgICAgICAgICAgICBidXQgeW91IGFsd2F5cyBmb2xsb3cgaW4gdGhlIHRyYWNrIG9mIGVhY2ggZXZlbnQsIGFuZCB0aGVuLCB3aGVuIHlvdSBmaW5kCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbHZlcyB0b28gbGF0ZSwgeW91IGdpdmUgdXAgdGhlIHB1cnN1aXQ7IDxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9InNlY3Rpb24iIC8+d2hlbiB0aGUgbmV4dCBldmVudCBvY2N1cnMsIHlvdSBhcmUgYWdhaW4gaW4gYSBidXN0bGUgb2YgcHJlcGFyYXRpb24uIEJ1dCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaXMgbm90IHRoZSB3YXkuIElmIHlvdSB0cnVzdCB0byBvY2Nhc2lvbmFsIGxldmllcywgeW91IGNhbiBuZXZlciBnYWluIGFueSBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgZXNzZW50aWFsIG9iamVjdHM7IGJ1dCB5b3UgbXVzdCBmaXJzdCByYWlzZSBhIGZvcmNlIGFuZCBwcm92aWRlIGZvciBpdHMKICAgICAgICAgICAgICAgICAgICBtYWludGVuYW5jZSwgYW5kIGFwcG9pbnQgcGF5bWFzdGVycyBhbmQgY2xlcmtzLCBhbmQgYXJyYW5nZSB0aGF0IHRoZXJlIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgdGhlIHN0cmljdGVzdCB3YXRjaCBrZXB0IG92ZXIgeW91ciBleHBlbmRpdHVyZSwgYW5kIGFmdGVyd2FyZHMgeW91IG11c3QgZGVtYW5kCiAgICAgICAgICAgICAgICAgICAgZnJvbSB5b3VyIHBheW1hc3RlcnMgYW4gYWNjb3VudCBvZiB0aGVpciBtb25leXMsIGFuZCBmcm9tIHRoZSBnZW5lcmFsIGFuIGFjY291bnQKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgY2FtcGFpZ24sIGFuZCB5b3UgbXVzdCBsZWF2ZSB0aGUgZ2VuZXJhbCBubyBleGN1c2UgZm9yIHNhaWxpbmcgZWxzZXdoZXJlCiAgICAgICAgICAgICAgICAgICAgb3IgZW5nYWdpbmcgaW4gYW55IG90aGVyIGJ1c2luZXNzLiA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPklmIHlvdSBkbwogICAgICAgICAgICAgICAgICAgIHRoaXMsIGFuZCB5b3UgYXJlIHJlYWxseSBpbiBlYXJuZXN0IGFib3V0IGl0LCB5b3Ugd2lsbCBlaXRoZXIgY29tcGVsIFBoaWxpcCB0bwogICAgICAgICAgICAgICAgICAgIGtlZXAgdGhlIHBlYWNlIGZhaXJseSBhbmQgdG8gc3RheSBpbiBvbmUgcGxhY2UsIG9yIHlvdSB3aWxsIGZpZ2h0IGhpbSBvbiBlcXVhbAogICAgICAgICAgICAgICAgICAgIHRlcm1zOyBhbmQgcGVyaGFwc+KAlHBlcmhhcHMsIGp1c3QgYXMgeW91IGFyZSBub3cgaW5xdWlyaW5nIHdoYXQgUGhpbGlwCiAgICAgICAgICAgICAgICAgICAgaXMgZG9pbmcgYW5kIHdoZXJlIGhlIGlzIG1hcmNoaW5nLCBzbyBoZSBtYXkgYmUgYW54aW91cyB0byBrbm93IHdoZXJlIHRoZQogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuIGZvcmNlIGlzIGJvdW5kIGZvciwgYW5kIGluIHdoYXQgcXVhcnRlciBpdCB3aWxsIGFwcGVhci4gPG1pbGVzdG9uZSBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCBpZiBhbnlvbmUgdGhpbmtzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhbGwgdGhpcyBtZWFucyBncmVhdCBleHBlbnNlIGFuZCBtdWNoIHRvaWwgYW5kIHdvcnJ5LCBoZSBpcyBxdWl0ZSBjb3JyZWN0LAogICAgICAgICAgICAgICAgICAgIGJ1dCBpZiBoZSByZWNrb25zIHVwIHdoYXQgd2lsbCBoZXJlYWZ0ZXIgYmUgdGhlIHJlc3VsdCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGlmIHNoZSByZWZ1c2VzIHRvIGFjdCwgaGUgd2lsbAogICAgICAgICAgICAgICAgICAgIGNvbmNsdWRlIHRoYXQgaXQgaXMgdG8gb3VyIGludGVyZXN0IHRvIHBlcmZvcm0gb3VyIGR1dHkgd2lsbGluZ2x5LiBGb3IgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSB0aGUgZ3VhcmFudGVlIG9mIHNvbWUgZ29kLCBzaW5jZSBubyBtZXJlIG1vcnRhbCBjb3VsZCBiZSBhIHNhdGlzZmFjdG9yeQogICAgICAgICAgICAgICAgICAgIHN1cmV0eSBmb3Igc3VjaCBhbiBldmVudCwgdGhhdCBpZiB5b3UgcmVtYWluIGluYWN0aXZlIGFuZCBhYmFuZG9uIGV2ZXJ5dGhpbmcsCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIHdpbGwgbm90IGluIHRoZSBlbmQgbWFyY2ggYWdhaW5zdCB5b3Vyc2VsdmVzLCA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJzZWN0aW9uIiAvPmJ5IFpldXMgYW5kIGFsbCB0aGUgb3RoZXIgZ29kcywgaXQgd291bGQgYmUgZGlzZ3JhY2VmdWwgYW5kIHVud29ydGh5CiAgICAgICAgICAgICAgICAgICAgb2YgeW91IGFuZCBvZiB0aGUgcmVzb3VyY2VzIG9mIHlvdXIgY2l0eSBhbmQgdGhlIHJlY29yZCBvZiB5b3VyIGFuY2VzdG9ycyB0bwogICAgICAgICAgICAgICAgICAgIGFiYW5kb24gYWxsIHRoZSBvdGhlciBHcmVla3MgdG8gZW5zbGF2ZW1lbnQgZm9yIHRoZSBzYWtlIG9mIHlvdXIgb3duIGVhc2UsIGFuZCBJCiAgICAgICAgICAgICAgICAgICAgZm9yIG9uZSB3b3VsZCByYXRoZXIgZGllIHRoYW4gYmUgZ3VpbHR5IG9mIHByb3Bvc2luZyBzdWNoIGEgcG9saWN5LiA8bWlsZXN0b25lIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgc2FtZSwgaWYgc29tZW9uZSBkb2VzIHByb3Bvc2UgaXQgYW5kIHdpbnMKICAgICAgICAgICAgICAgICAgICB5b3VyIGFzc2VudCwgc28gYmUgaXQ7IG9mZmVyIG5vIHJlc2lzdGFuY2UsIHNhY3JpZmljZSBldmVyeXRoaW5nLiBCdXQgaWYgbm8gb25lCiAgICAgICAgICAgICAgICAgICAgYXBwcm92ZXMgb2YgdGhpcywgYW5kIGlmIG9uIHRoZSBjb250cmFyeSB3ZSBhbGwgb2YgdXMgZm9yZXNlZSB0aGF0IHRoZSBtb3JlIHdlCiAgICAgICAgICAgICAgICAgICAgYWxsb3cgaGltIHRvIGV4dGVuZCBoaXMgcG93ZXIsIHRoZSBzdHJvbmdlciBhbmQgbW9yZSBmb3JtaWRhYmxlIHdlIHNoYWxsIGZpbmQKICAgICAgICAgICAgICAgICAgICBoaW0gaW4gd2FyLCB3aGF0IGVzY2FwZSBpcyBvcGVuIHRvIHVzLCBvciB3aHkgZG8gd2UgZGVsYXk/IFdoZW4sIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBzaGFsbCB3ZSBjb25zZW50IHRvIGRvCiAgICAgICAgICAgICAgICAgICAgb3VyIGR1dHk/IDxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+4oCcV2hlbmV2ZXIgaXQgaXMKICAgICAgICAgICAgICAgICAgICBuZWNlc3Nhcnks4oCdIHlvdSB3aWxsIHNheS4gQnV0IHdoYXQgYW55IGZyZWUgbWFuIHdvdWxkIGNhbGwgbmVjZXNzaXR5CiAgICAgICAgICAgICAgICAgICAgaXMgbm90IG1lcmVseSBwcmVzZW50IG5vdywgYnV0IGlzIGxvbmcgYWdvIHBhc3QsIGFuZCBmcm9tIHRoZSBuZWNlc3NpdHkgdGhhdAogICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnMgYSBzbGF2ZSB3ZSBtdXN0IHN1cmVseSBwcmF5IHRvIGJlIGRlbGl2ZXJlZC4gRG8geW91IGFzayB0aGUKICAgICAgICAgICAgICAgICAgICBkaWZmZXJlbmNlPyBUaGUgc3Ryb25nZXN0IG5lY2Vzc2l0eSB0aGF0IGEgZnJlZSBtYW4gZmVlbHMgaXMgc2hhbWUgZm9yIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiwgYW5kIEkga25vdyBub3QgaWYgd2UgY291bGQgbmFtZSBhIHN0cm9uZ2VyOyBidXQgZm9yIGEgc2xhdmUgbmVjZXNzaXR5CiAgICAgICAgICAgICAgICAgICAgbWVhbnMgc3RyaXBlcyBhbmQgYm9kaWx5IG91dHJhZ2UsIHVuZml0IHRvIG5hbWUgaGVyZSwgZnJvbSB3aGljaCBIZWF2ZW4gZGVmZW5kCiAgICAgICAgICAgICAgICAgICAgdXMhIDxtaWxlc3RvbmUgbj0iMjgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3csIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aXRoIHJlZ2FyZCB0byBzdWNoCiAgICAgICAgICAgICAgICAgICAgcHVibGljIHNlcnZpY2VzIGFzIGl0IGlzIHRoZSBkdXR5IG9mIGV2ZXJ5b25lIHRvIGRpc2NoYXJnZSwgYm90aCB3aXRoIHBlcnNvbiBhbmQKICAgICAgICAgICAgICAgICAgICB3aXRoIHByb3BlcnR5LCB0aGF0IHRoZXJlIHNob3VsZCBiZSBhIGRpc3Bvc2l0aW9uIHRvIGF2b2lkIHRoZW0gaXMgbm90CiAgICAgICAgICAgICAgICAgICAgcmlnaHTigJRpbmRlZWQsIGZhciBmcm9tIGl04oCUYnV0IHN0aWxsIGl0IGRvZXMgYWRtaXQgb2Ygc29tZQogICAgICAgICAgICAgICAgICAgIGV4Y3VzZSBub3R3aXRoc3RhbmRpbmc7IGJ1dCB0byByZWZ1c2UgZXZlbiB0byBsaXN0ZW4gdG8gYWxsIHRoYXQgeW91IG91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgaGVhciBhbmQgYWxsIHRoYXQgeW91IGFyZSBib3VuZCB0byBkZWNpZGUgZGVzZXJ2ZXMsIGF0IHN1Y2ggYSB0aW1lIGFzIHRoaXMsCiAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGUgY29uZGVtbmF0aW9uLiA8bWlsZXN0b25lIG49IjI5IiB1bml0PSJzZWN0aW9uIiAvPllvdXIgaGFiaXQsIHRoZW4sIGlzCiAgICAgICAgICAgICAgICAgICAgbm90IHRvIGxpc3RlbiB1bnRpbCwgYXMgbm93LCB0aGUgZXZlbnRzIHRoZW1zZWx2ZXMgYXJlIHVwb24geW91LCBhbmQgbm90IHRvCiAgICAgICAgICAgICAgICAgICAgZGlzY3VzcyBhbnkgcXVlc3Rpb24gYXQgeW91ciBsZWlzdXJlIGJ1dCB3aGVuZXZlciBQaGlsaXAgbWFrZXMgaGlzIHByZXBhcmF0aW9ucywKICAgICAgICAgICAgICAgICAgICB5b3UgbmVnbGVjdCB0aGUgY2hhbmNlIG9mIGRvaW5nIHRoZSBzYW1lLCBhbmQgeW91IGFyZSB0b28gcmVtaXNzIHRvIG1ha2UKICAgICAgICAgICAgICAgICAgICBjb3VudGVyLXByZXBhcmF0aW9uczsgYW5kIGlmIGFueW9uZSBzcGVha3Mgb3V0LCB5b3UgZHJpdmUgaGltIGZyb20gdGhlIHBsYXRmb3JtLAogICAgICAgICAgICAgICAgICAgIGJ1dCB3aGVuIHlvdSBsZWFybiBvZiB0aGUgbG9zcyBvZiB0aGlzIHBsYWNlIG9yIHRoZSBzaWVnZSBvZiB0aGF0LCB0aGVuIHlvdSBwYXkKICAgICAgICAgICAgICAgICAgICBhdHRlbnRpb24gYW5kIGJlZ2luIHRvIHByZXBhcmUuIDxtaWxlc3RvbmUgbj0iMzAiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgdG8gaGF2ZSBsaXN0ZW5lZCBhbmQgbWFkZSB5b3VyIGRlY2lzaW9uIHdhcyBqdXN0IHRoZW4sIHdoZW4geW91IHdvdWxkIG5vdCBkbyBpdDsKICAgICAgICAgICAgICAgICAgICBub3csIHdoZW4geW91IGFyZSBsaXN0ZW5pbmcsIGlzIHRoZSB0aW1lIHRvIGFjdCBhbmQgcHV0IHlvdXIgcHJlcGFyYXRpb25zIHRvCiAgICAgICAgICAgICAgICAgICAgdXNlLiBUaGVyZWZvcmUgaW4gY29uc2VxdWVuY2Ugb2YgdGhlc2UgYmFkIGhhYml0cyB5b3UgYWxvbmUgcmV2ZXJzZSB0aGUgZ2VuZXJhbAogICAgICAgICAgICAgICAgICAgIHByYWN0aWNlIG9mIG1hbmtpbmQ7IGZvciBvdGhlciBwZW9wbGUgZGVsaWJlcmF0ZSBiZWZvcmUgdGhlIGV2ZW50LCBidXQgeW91IGFmdGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIGV2ZW50LiA8bWlsZXN0b25lIG49IjMxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlCiAgICAgICAgICAgICAgICAgICAgb25lIHRoaW5nIHRoYXQgcmVtYWlucyBhbmQgdGhhdCBvdWdodCB0byBoYXZlIGJlZW4gZG9uZSBsb25nIGFnbywgdGhvdWdoIGV2ZW4KICAgICAgICAgICAgICAgICAgICBub3cgdGhlIGNoYW5jZSBpcyBub3QgbG9zdCwgSSB3aWxsIHRlbGwgeW91LiBUaGVyZSBpcyBub3RoaW5nIHRoYXQgdGhlIFN0YXRlCiAgICAgICAgICAgICAgICAgICAgbmVlZHMgc28gbXVjaCBmb3IgdGhlIGNvbWluZyBzdHJ1Z2dsZSBhcyBtb25leS4gU29tZSBzdHJva2VzIG9mIGdvb2QgZm9ydHVuZSB3ZQogICAgICAgICAgICAgICAgICAgIGhhdmUgZW5qb3llZCB3aXRob3V0IG91ciBkZXNpZ24sIGFuZCBpZiB3ZSBtYWtlIHRoZSByaWdodCB1c2Ugb2YgdGhlbSwgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVzaXJlZCByZXN1bHRzIG1heSBwZXJoYXBzIGZvbGxvdy4gRm9yIGZpcnN0LCB0aGUgbWVuIHdob20gdGhlIGtpbmcgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDAyMzEiIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPiB0cnVzdHMgYW5kIGhhcyBhY2NlcHRlZCBhcwogICAgICAgICAgICAgICAgICAgIGhpcyDigJxiZW5lZmFjdG9ycyzigJ08bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICBUaHJhY2lhbnMsIHRodXMgaG9ub3JlZCBmb3IgdGhlaXIgc2VydmljZXMgdG8gRGFyaXVzIGluIGhpcyBTY3l0aGlhbgogICAgICAgICAgICAgICAgICAgICAgICBleHBlZGl0aW9uLiBGb3IgdGhlIHRpdGxlIGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSGR0LiA4Ljg1IiB2YWxpZD0ieWVzIj5IZHQuIDguODU8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImdyZWVrIj7Ov+G8sSDOtOKAmSDOteG9kM+BzrPhvbPPhM6xzrkgzrLOsc+DzrnOu+G9s86/z4Ig4b2Az4HOv8+D4b2xzrPOs86xzrkgzrrOsc674b2zzr/Ovc+EzrHOuQogICAgICAgICAgICAgICAgICAgICAgICAgICAgzqDOtc+Bz4POuc+Dz4Thvbc8L2ZvcmVpZ24+LiBTdWNoIHdhcyB0aGUgTW9yZGVjYWksIOKAnHRoZSBtYW4gd2hvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAga2luZyBkZWxpZ2h0ZWQgdG8gaG9ub3Is4oCdPHRpdGxlPkVzdGhlcjwvdGl0bGU+LCBjLiA2Ljwvbm90ZT4gaGF0ZQogICAgICAgICAgICAgICAgICAgIFBoaWxpcCBhbmQgYXJlIGF0IHdhciB3aXRoIGhpbS4gPG1pbGVzdG9uZSBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5TZWNvbmRseSwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFnZW50PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JZiB3ZSBtYXkgdHJ1c3QgVWxwaWFuLCB0aGlzIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBIZXJtZWlhcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0YXJuZXVzIiBrZXk9InBlcnNldXMsQXRhcm5ldXMiPkF0YXJuZXVzPC9wbGFjZU5hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZnJpZW5kIG9mIEFyaXN0b3RsZSwgc2VpemVkIGJ5IHRoZSBSaG9kaWFuIE1lbnRvciBhbmQgY2FycmllZCBjYXB0aXZlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4uIFNlZSBHcm90ZSwgYy4KICAgICAgICAgICAgICAgICAgICAgICAgOTAuPC9ub3RlPiB3aG8gd2FzIHByaXZ5IHRvIGFsbCBQaGlsaXAncyBzY2hlbWVzIGFnYWluc3QgdGhlIGtpbmcgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDAyMzEiIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPiBoYXMgYmVlbiBraWRuYXBwZWQsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBraW5nIHdpbGwgaGVhciBvZiBhbGwgdGhlc2UgcGxvdHMsIG5vdCBhcyB0aGUgY29tcGxhaW50IG9mIEF0aGVuaWFucywgd2hvbSBoZQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IHN1c3BlY3Qgb2Ygc3BlYWtpbmcgZm9yIG91ciBvd24gcHJpdmF0ZSBhZHZhbnRhZ2UsIGJ1dCBmcm9tIHRoZSBsaXBzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHZlcnkgbWFuIHdobyBwbGFubmVkIGFuZCBjYXJyaWVkIHRoZW0gb3V0LCBzbyB0aGF0IHRoZWlyIGNyZWRpdCBpcwogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGVkLCBhbmQgdGhlIG9ubHkgc3VnZ2VzdGlvbiBmb3Igb3VyIGFtYmFzc2Fkb3JzIHRvIG1ha2UgaXMgb25lIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhlIGtpbmcgd291bGQgYmUgZGVsaWdodGVkIHRvIGhlYXIsIDxtaWxlc3RvbmUgbj0iMzMiIHVuaXQ9InNlY3Rpb24iIC8+dGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBtYW4gd2hvIGlzIHdyb25naW5nIGJvdGggcGFydGllcyBzaG91bGQgYmUgcHVuaXNoZWQgYnkgYm90aCBpbiBjb21tb24sIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIGlzIG11Y2ggbW9yZSBkYW5nZXJvdXMgdG8gdGhlIGtpbmcgaWYgaGUgaGFzIGF0dGFja2VkIHVzIGZpcnN0LCBmb3IgaWYgd2UKICAgICAgICAgICAgICAgICAgICBhcmUgbGVmdCB0byBvdXIgb3duIHJlc291cmNlcyBhbmQgYW55dGhpbmcgaGFwcGVucyB0byB1cywgaGUgd2lsbCBzb29uIGJlCiAgICAgICAgICAgICAgICAgICAgbWFyY2hpbmcgY29uZmlkZW50bHkgYWdhaW5zdCB0aGUga2luZy4gSSB0aGluayB5b3Ugb3VnaHQgdG8gc2VuZCBhbiBlbWJhc3N5IHRvCiAgICAgICAgICAgICAgICAgICAgcHV0IGFsbCB0aGVzZSBtYXR0ZXJzIGJlZm9yZSB0aGUga2luZywgYW5kIHlvdSBvdWdodCB0byBkcm9wIHRoZSBmb29saXNoCiAgICAgICAgICAgICAgICAgICAgcHJlanVkaWNlIHRoYXQgaGFzIHNvIG9mdGVuIGJyb3VnaHQgYWJvdXQgeW91cgogICAgICAgICAgICAgICAgICAgIGRpc2NvbWZpdHVyZeKAlOKAnHRoZSBiYXJiYXJpYW4s4oCdIOKAnHRoZQogICAgICAgICAgICAgICAgICAgIGNvbW1vbiBmb2Ugb2YgdXMgYWxsLOKAnSBhbmQgYWxsIHN1Y2ggcGhyYXNlcy4gPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbXkgcGFydCwgd2hlbmV2ZXIgSSBzZWUgYSBtYW4gYWZyYWlkIG9mIG9uZSB3aG8gZHdlbGxzIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3NTA5IiBrZXk9InRnbiw3MDE3NTA5Ij5TdXNhPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjExNSIga2V5PSJ0Z24sNzAwMjExNSI+RWNiYXRhbmE8L3BsYWNlTmFtZT4gYW5kIGluc2lzdGluZyB0aGF0IGhlIGlzIGlsbC1kaXNwb3NlZAogICAgICAgICAgICAgICAgICAgIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRob3VnaCBoZSBoZWxwZWQgdG8KICAgICAgICAgICAgICAgICAgICByZXN0b3JlIG91ciBmb3J0dW5lcyBpbiB0aGUgcGFzdCBhbmQgd2FzIGV2ZW4gbm93IG1ha2luZyBvdmVydHVyZXMgdG8gdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBQZXJzaWFucyBoZWxwZWQgQ29ub24sIHdoZW4gaGUgZGVmZWF0ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zIG9mZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNTAwMzc1NyIga2V5PSJ0Z24sNTAwMzc1NyI+Q25pZHVzPC9wbGFjZU5hbWU+IGluIDM5NC4KICAgICAgICAgICAgICAgICAgICAgICAgSW4gMzQ1IEFydGF4ZXJ4ZXMgYXBwZWFsZWQgdG8gdGhlIGxlYWRpbmcgR3JlZWsgc3RhdGVzIGZvciBoZWxwIGluIHB1dHRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZG93biB0aGUgcmV2b2x0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXJnb3MiIGtleT0icGVyc2V1cyxBcmdvcyI+QXJnb3M8L3BsYWNlTmFtZT4gc2VudCBhdXhpbGlhcmllcywgYnV0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4gcmVmdXNlZC48L25vdGU+77yIYW5kIGlmCiAgICAgICAgICAgICAgICAgICAgeW91IGRpZCBub3QgYWNjZXB0IHRoZW0gYnV0IHZvdGVkIHRoZWlyIHJlamVjdGlvbiwgdGhlIGZhdWx0IGlzIG5vdAogICAgICAgICAgICAgICAgICAgIGhpc++8iTsgYW5kIHdoZW4gSSBmaW5kIHRoZSBzYW1lIG1hbiB1c2luZyB2ZXJ5IGRpZmZlcmVudCBsYW5ndWFnZSBhYm91dAogICAgICAgICAgICAgICAgICAgIHRoaXMgcGx1bmRlcmVyIG9mIHRoZSBHcmVla3MsIHdobyBpcyBleHRlbmRpbmcgaGlzIHBvd2VyLCBhcyB5b3Ugc2VlLCBhdCBvdXIKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGRvb3JzIGFuZCBpbiB0aGUgaGVhcnQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBJIGFtIGFzdG9uaXNoZWQsIGFuZCwgd2hvZXZlciBoZSBtYXkgYmUsIGl0IGlzIEkgdGhhdCBmZWFyIGhpbSwganVzdCBiZWNhdXNlIGhlCiAgICAgICAgICAgICAgICAgICAgZG9lcyBub3QgZmVhciBQaGlsaXAuIDxtaWxlc3RvbmUgbj0iMzUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgdGhlcmUgaXMgYWxzbyBhbm90aGVyIG1hdHRlciwgdGhlIG1pc3JlcHJlc2VudGF0aW9uIG9mIHdoaWNoIGJ5CiAgICAgICAgICAgICAgICAgICAgdW5mYWlyIG9ibG9xdXkgYW5kIGluIGludGVtcGVyYXRlIGxhbmd1YWdlIGlzIGluanVyaW5nIHRoZSBTdGF0ZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgZnVydGhlcm1vcmUgaXMgYWZmb3JkaW5nIGEgcHJldGV4dCBmb3IgdGhvc2Ugd2hvIGFyZSB1bndpbGxpbmcgdG8gcGVyZm9ybSBhbnkgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBkdXRpZXMgYXMgY2l0aXplbnM7IGluZGVlZCwgeW91IHdpbGwgZmluZCB0aGF0IGluIGV2ZXJ5IGNhc2Ugd2hlcmUgYSBtYW4KICAgICAgICAgICAgICAgICAgICBoYXMgZmFpbGVkIHRvIGRvIGhpcyBkdXR5LCB0aGlzIGhhcyBiZWVuIGdpdmVuIGFzIHRoZSBleGN1c2UuIEkgYW0gcmVhbGx5IGFmcmFpZAogICAgICAgICAgICAgICAgICAgIHRvIHNwZWFrIG9uIHRoaXMgc3ViamVjdCwgYnV0IEkgd2lsbCBkbyBzbyBuZXZlcnRoZWxlc3M7IDxtaWxlc3RvbmUgbj0iMzYiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIEkgdGhpbmsgSSBzaGFsbCBiZSBhYmxlLCB3aXRoIGFkdmFudGFnZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBTdGF0ZSwgdG8gcGxlYWQgdGhlIGNhdXNlIGJvdGggb2YgdGhlIHBvb3IgYWdhaW5zdCB0aGUgcmljaCBhbmQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHktb3duZXJzIGFnYWluc3QgdGhlIG5lY2Vzc2l0b3VzLiBJZiB3ZSBjb3VsZCBiYW5pc2ggZnJvbSBvdXIgbWlkc3QgYm90aAogICAgICAgICAgICAgICAgICAgIHRoZSBvYmxvcXV5IHdoaWNoIHNvbWUgaGVhcCBvbiB0aGUgVGhlb3JpYyBGdW5kLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGUgb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMS4yMCIgdmFsaWQ9InllcyI+RGVtLiAxLjIwPC9iaWJsPi48L25vdGU+IGFuZCBhbHNvIHRoZSBmZWFyCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgRnVuZCB3aWxsIG5vdCBiZSBtYWludGFpbmVkIHdpdGhvdXQgZG9pbmcgYSBncmVhdCBkZWFsIG9mIGhhcm0sIHdlCiAgICAgICAgICAgICAgICAgICAgY291bGQgbm90IHBlcmZvcm0gYSBncmVhdGVyIHNlcnZpY2Ugbm9yIG9uZSBtb3JlIGxpa2VseSB0byBzdHJlbmd0aGVuIHRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgIGJvZHkgcG9saXRpYy4gPG1pbGVzdG9uZSBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb2xsb3cgbXkgYXJndW1lbnQgd2hpbGUgSSBzdGF0ZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IHRoZSBjYXNlIG9mIHRob3NlIHdobyBhcmUgcmVnYXJkZWQgYXMgdGhlIHBvb3JlciBjbGFzc2VzLiBUaGVyZSB3YXMgYSB0aW1lCiAgICAgICAgICAgICAgICAgICAgbm90IGxvbmcgYWdvIHdoZW4gdGhlIHJldmVudWUgb2YgeW91ciBzdGF0ZSBkaWQgbm90IGV4Y2VlZCBhIGh1bmRyZWQgYW5kIHRoaXJ0eQogICAgICAgICAgICAgICAgICAgIHRhbGVudHMsIGFuZCB5ZXQgb2YgdGhvc2UgY29tcGV0ZW50IHRvIHVuZGVydGFrZSB0aGUgdHJpZXJhcmNoeSBvciBwYXkgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHktdGF4IHRoZXJlIGlzIG5vdCBvbmUgdGhhdCBkZWNsaW5lZCB0aGUgZHV0eSB0aGF0IGRldm9sdmVkIG9uIGhpbSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBhYnNlbmNlIG9mIGEgc3VycGx1czsgYnV0IHRoZSB3YXItZ2FsbGV5cyBzYWlsZWQgb3V0LCBhbmQgdGhlIG1vbmV5IGNhbWUgaW4sIGFuZAogICAgICAgICAgICAgICAgICAgIHdlIGRpZCBhbGwgdGhhdCB3YXMgcmVxdWlyZWQuIDxtaWxlc3RvbmUgbj0iMzgiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UgdGhlbgogICAgICAgICAgICAgICAgICAgIGZvcnR1bmUgaGFzIHNtaWxlZCBvbiB1cyBhbmQgaW5jcmVhc2VkIG91ciByZXZlbnVlcywgYW5kIHRoZSBleGNoZXF1ZXIgbm93CiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXMgZm91ciBodW5kcmVkIGluc3RlYWQgb2Ygb25lIGh1bmRyZWQgdGFsZW50cywgdGhvdWdoIG5vIHByb3BlcnR5LW93bmVyCiAgICAgICAgICAgICAgICAgICAgc3VmZmVycyBhbnkgbG9zcyBidXQgaXMgcmF0aGVyIHRoZSBnYWluZXIsIGZvciBhbGwgdGhlIHJpY2ggY2l0aXplbnMgY29tZSB1cCB0bwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgdGhlaXIgc2hhcmUgb2YgdGhpcyBpbmNyZWFzZSwgYXMgaW5kZWVkIHRoZXkgaGF2ZSBhIHBlcmZlY3QgcmlnaHQgdG8gZG8uCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMzkiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCB0aGVuIGRvIHdlIG1lYW4gYnkgcmVwcm9hY2hpbmcgb25lCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciBmb3IgdGhpcyBhbmQgbWFraW5nIGl0IGFuIGV4Y3VzZSBmb3IgZG9pbmcgbm90aGluZywgdW5sZXNzIGl0IGlzIHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICBncnVkZ2UgdGhlIHJlbGllZiB3aGljaCB0aGUgcG9vciBoYXZlIHJlY2VpdmVkIGF0IHRoZSBoYW5kcyBvZiBmb3J0dW5lPyBJIGZvcgogICAgICAgICAgICAgICAgICAgIG9uZSBzaGFsbCBub3QgYmxhbWUgdGhlbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPmkuZS4gYmxhbWUgdGhlIHBvb3JlcgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzIGZvciB1cGhvbGRpbmcgdGhlIFRoZW9yaWMgRnVuZC4gVGhlIGFyZ3VtZW50IGlzIHRoYXQgd2hlbiByZXZlbnVlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBzbWFsbGVyLCB0aGUgcHJvcGVydHktb3duZXJzIGRpZCBub3QgcmVmdXNlIHRvIHBheSB1cDsgbm93IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJldmVudWUgc2hvd3MgYSBiaWcgc3VycGx1cywgZGV2b3RlZCB0byB0aGUgVGhlb3JpYyBGdW5kLCBpbiB3aGljaCBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyBoYXZlIGEgc2hhcmUsIHdoeSBzaG91bGQgdGhlIHJpY2ggZGVtYW5kIHJlbGllZiBmcm9tIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnGxpdHVyZ2llc+KAnT8g77yIUGVyaGFwcyB0aGUgbW9kZXJuCiAgICAgICAgICAgICAgICAgICAgICAgIGluY29tZS10YXgtcGF5ZXIgd2lsbCBmYWlsIHRvIGFwcHJlY2lhdGUgdGhlIHNwZWFrZXIncwogICAgICAgICAgICAgICAgICAgICAgICBsb2dpYy7vvIk8L25vdGU+IG5vciBkbyBJIHRoaW5rIGl0IGZhaXIgdG8gZG8gc28uIDxtaWxlc3RvbmUgbj0iNDAiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluIHByaXZhdGUgbGlmZSBJIGRvIG5vdCBvYnNlcnZlIHRoYXQgdGhlIHlvdW5nCiAgICAgICAgICAgICAgICAgICAgbWFuIGFkb3B0cyB0aGF0IGF0dGl0dWRlIHRvd2FyZHMgaGlzIHNlbmlvcnMsIG9yIHRoYXQgYW55IGh1bWFuIGJlaW5nIGlzIHNvCiAgICAgICAgICAgICAgICAgICAgaW5zZW5zaWJsZSBvciB1bnJlYXNvbmFibGUgdGhhdCBoZSByZWZ1c2VzIHRvIGRvIGFueXRoaW5nIGhpbXNlbGYgdW5sZXNzCiAgICAgICAgICAgICAgICAgICAgZXZlcnlib2R5IGRvZXMgdGhlIHNhbWU7IGFuZCBpbmRlZWQgc3VjaCBhIGNhc2Ugd291bGQgYmUgY292ZXJlZCBieSB0aGUgbGF3cyBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgaWxsLXVzYWdlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2hpbGRyZW4gd2hvIHJlZnVzZWQgdG8gc3VwcG9ydAogICAgICAgICAgICAgICAgICAgICAgICB0aGVpciBwYXJlbnRzIHdlcmUgbGlhYmxlIHRvIGE8Zm9yZWlnbiBsYW5nPSJncmVlayI+zrThvbfOus63CiAgICAgICAgICAgICAgICAgICAgICAgICAgICDOus6xzrrhvb3Pg861z4nPgjwvZm9yZWlnbj4uPC9ub3RlPiBmb3IgSSBzdXBwb3NlIHRoZSBjb250cmlidXRpb24gYXNzZXNzZWQgYnkKICAgICAgICAgICAgICAgICAgICBib3RoIGF1dGhvcml0aWVzLCBieSBuYXR1cmUgYW5kIGJ5IGxhdywgb3VnaHQgdG8gYmUgYnJvdWdodCBob25lc3RseSBhbmQgcGFpZAogICAgICAgICAgICAgICAgICAgIGNoZWVyZnVsbHkgdG8gdGhlIHBhcmVudHMuIDxtaWxlc3RvbmUgbj0iNDEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlLCBqdXN0IGFzCiAgICAgICAgICAgICAgICAgICAgZWFjaCBvbmUgb2YgdXMgaGFzIGEgcGFyZW50LCBzbyBvdWdodCB3ZSB0byByZWdhcmQgdGhlIGNvbGxlY3RpdmUgY2l0aXplbnMgYXMKICAgICAgICAgICAgICAgICAgICB0aGUgY29tbW9uIHBhcmVudHMgb2YgdGhlIHdob2xlIFN0YXRlLCBhbmQgc28gZmFyIGZyb20gZGVwcml2aW5nIHRoZW0gb2YKICAgICAgICAgICAgICAgICAgICBhbnl0aGluZyB0aGF0IHRoZSBTdGF0ZSBiZXN0b3dzLCB3ZSBvdWdodCwgaWYgdGhlcmUgd2VyZSBubyBzdWNoIGdyYW50LCB0byBsb29rCiAgICAgICAgICAgICAgICAgICAgZWxzZXdoZXJlIGZvciBtZWFucyB0byBzYXZlIGFueSBvZiB0aGVpciB3YW50cyBmcm9tIGJlaW5nIG92ZXJsb29rZWQuIDxtaWxlc3RvbmUgbj0iNDIiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhlbiwgaWYgdGhlIHdlYWx0aHkgd291bGQgYWNjZXB0IHRoaXMgcHJpbmNpcGxlLAogICAgICAgICAgICAgICAgICAgIEkgdGhpbmsgdGhleSB3b3VsZCBiZSBkb2luZyBub3Qgb25seSB3aGF0IGlzIGZhaXIsIGJ1dCBhbHNvIHdoYXQgaXMgZXhwZWRpZW50OwogICAgICAgICAgICAgICAgICAgIGZvciB0byBkZXByaXZlIG9uZSBjaXRpemVuIG9mIG5lY2Vzc2FyaWVzIGlzIHRvIG1ha2UgbWFueSBvZiB0aGVtIHVuaXRlIGluCiAgICAgICAgICAgICAgICAgICAgZGlzYWZmZWN0aW9uIHRvd2FyZHMgdGhlIGdvdmVybm1lbnQuIEkgd291bGQgYWxzbyBjb3Vuc2VsIHRoZSBwb29yZXIgY2xhc3NlcyB0bwogICAgICAgICAgICAgICAgICAgIGFib2xpc2ggdGhlIGdyaWV2YW5jZSB3aGljaCBtYWtlcyB0aGUgcHJvcGVydGllZCBjbGFzcyBkaXNjb250ZW50ZWQgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBzeXN0ZW0sIGFuZCBnaXZlcyB0aGVtIGp1c3QgY2F1c2UgZm9yIGFzc2FpbGluZyBpdC4gPG1pbGVzdG9uZSBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgcHJvY2VlZCwgaW4gdGhlIHNhbWUgd2F5IGFzIGJlZm9yZSwKICAgICAgICAgICAgICAgICAgICB0byBzdGF0ZSB0aGUgY2FzZSBmb3IgdGhlIHJpY2gsIGFuZCBJIHNoYWxsIG5vdCBzaHJpbmsgZnJvbSBzcGVha2luZyB0aGUgdHJ1dGguCiAgICAgICAgICAgICAgICAgICAgRm9yIEkgY2Fubm90IGltYWdpbmUgYW55b25lLCBvciBhdCBsZWFzdCBhbnkgQXRoZW5pYW4sIHNvIG9iZHVyYXRlIGFuZAogICAgICAgICAgICAgICAgICAgIGNydWVsLWhlYXJ0ZWQgYXMgdG8gZmVlbCBhbm5veWVkIHdoZW4gaGUgc2VlcyB0aGUgcG9vciBhbmQgdGhvc2Ugd2hvIGxhY2sKICAgICAgICAgICAgICAgICAgICBuZWNlc3NhcmllcyByZWNlaXZpbmcgdGhlc2UgYm9vbnMuIDxtaWxlc3RvbmUgbj0iNDQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZXJlCiAgICAgICAgICAgICAgICAgICAgZG9lcyBvdXIgcHJhY3RpY2UgYnJlYWsgZG93biwgYW5kIHdoZXJlIGxpZXMgdGhlIGdyaWV2YW5jZT8gSXQgaXMgd2hlbiB0aGUgcmljaAogICAgICAgICAgICAgICAgICAgIHNlZSBjZXJ0YWluIHBlcnNvbnMgdHJhbnNmZXJyaW5nIHRoaXMgdXNhZ2UgZnJvbSBwdWJsaWMgbW9uZXlzIHRvIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eTsgd2hlbiB0aGUgc3BlYWtlciBpcyByYWlzZWQgdG8gaW5zdGFudCBncmVhdG5lc3MgYW1vbmcgeW91IGFuZCBldmVuIHRvCiAgICAgICAgICAgICAgICAgICAgaW1tb3J0YWxpdHksIGFzIGZhciBhcyBoaXMgcHJpdmlsZWdlIGNhbiBzZWN1cmUgaXQ7IGFuZCB3aGVuIHlvdXIgc2hvdXRzIG9mIG9wZW4KICAgICAgICAgICAgICAgICAgICBhcHByb3ZhbCBhcmUgY29udHJhZGljdGVkIGJ5IHlvdXIgc2VjcmV0IHZvdGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgcmVjb2duaXplZCBhcHByb3ByaWF0aW9uIG9mIHB1YmxpYyBtb25leSBmb3IgdGhlIFRoZW9yaWMgRnVuZCBpcwogICAgICAgICAgICAgICAgICAgICAgICBpbWl0YXRlZCBieSBkZW1hZ29ndWVzLCB3aG8gcHJvc2VjdXRlIHRoZSByaWNoIGluIG9yZGVyIHRoYXQgdGhlaXIgZmluZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpc2NhdGlvbnMgbWF5IGJlIHVzZWQgZm9yIHNpbWlsYXIgYmVuZWZpdHMuIFRoZSBkZW1hZ29ndWUgdGh1cyBhY3F1aXJlcwogICAgICAgICAgICAgICAgICAgICAgICB1bmR1ZSBpbmZsdWVuY2UgYW5kLCBiZWluZyBwcml2aWxlZ2VkLCBpcyB1bmFzc2FpbGFibGUuIE1lYW53aGlsZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcGVvcGxlLCBzaXR0aW5nIGFzIGEganVyeSwgYXBwbGF1ZCB0aGUgcmljaCBtYW4gd2hlbiBoZSBza2lsZnVsbHkgZGVmZW5kcwogICAgICAgICAgICAgICAgICAgICAgICBoaXMgcmlnaHRzLCBidXQgY2FzdCB0aGVpciB2b3RlcyBhZ2FpbnN0IGhpbS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhpcyBicmVlZHMgZGlzdHJ1c3QgYW5kIHJlc2VudG1lbnQuIEZvcgogICAgICAgICAgICAgICAgICAgIHdlIGFyZSBib3VuZCwgQXRoZW5pYW5zLCB0byBzaGFyZSBlcXVpdGFibHkgd2l0aCBvbmUgYW5vdGhlciB0aGUgcHJpdmlsZWdlcyBvZgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zaGlwLCB0aGUgd2VhbHRoeSBmZWVsaW5nIHNlY3VyZSB0byBsZWFkIHRoZWlyIG93biBsaXZlcyBhbmQgaGF1bnRlZCBieQogICAgICAgICAgICAgICAgICAgIG5vIGZlYXJzIG9uIHRoYXQgYWNjb3VudCwgYnV0IGluIHRoZSBmYWNlIG9mIGRhbmdlcnMgbWFraW5nIG92ZXIgdGhlaXIgcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICB0byB0aGUgY29tbW9ud2VhbHRoIGZvciBpdHMgZGVmZW5jZTsgd2hpbGUgdGhlIHJlc3QgbXVzdCByZWFsaXplIHRoYXQKICAgICAgICAgICAgICAgICAgICBTdGF0ZS1wcm9wZXJ0eSBpcyBjb21tb24gcHJvcGVydHksIGR1bHkgcmVjZWl2aW5nIHRoZWlyIHNoYXJlIG9mIGl0LCBidXQKICAgICAgICAgICAgICAgICAgICByZWNvZ25pemluZyB0aGF0IHByaXZhdGUgd2VhbHRoIGJlbG9uZ3MgdG8gdGhlIHBvc3Nlc3Nvci4gSW4gdGhpcyB3YXkgYSBzbWFsbAogICAgICAgICAgICAgICAgICAgIHN0YXRlIGdyb3dzIGdyZWF0LCBhbmQgYSBncmVhdCBvbmUgaXMga2VwdCBncmVhdC4gVGhpcyBtYXkgcGFzcyBmb3IgYSB2ZXJiYWwKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgb2YgdGhlIGR1dGllcyBvZiBlYWNoIGNsYXNzOyBmb3IgdGhlIGxlZ2FsIHBlcmZvcm1hbmNlIG9mIHRob3NlIGR1dGllcwogICAgICAgICAgICAgICAgICAgIHNvbWUgb3JnYW5pemF0aW9uIGlzIG5lY2Vzc2FyeS4gPG1pbGVzdG9uZSBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9mIG91ciBwcmVzZW50IGRpZmZpY3VsdGllcyBhbmQgb2YgdGhlIGV4aXN0aW5nCiAgICAgICAgICAgICAgICAgICAgY29uZnVzaW9uIHRoZSBjYXVzZXMgYXJlIG1hbnkgYW5kIG9mIGxvbmcgc3RhbmRpbmcsIGJ1dCBpZiB5b3UgYXJlIHdpbGxpbmcgdG8KICAgICAgICAgICAgICAgICAgICBoZWFyIHRoZW0sIEkgYW0gcmVhZHkgdG8gc3BlYWsuIE1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB5b3UgaGF2ZSBkZXNlcnRlZCB0aGUgcG9zdCBpbiB3aGljaCB5b3VyIGFuY2VzdG9ycyBsZWZ0CiAgICAgICAgICAgICAgICAgICAgeW91OyB5b3UgaGF2ZSBiZWVuIHBlcnN1YWRlZCBieSBwb2xpdGljaWFucyBvZiB0aGlzIHNvcnQgdGhhdCB0byBiZSBwYXJhbW91bnQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwgdG8gcG9zc2VzcyBhIHN0YW5kaW5nCiAgICAgICAgICAgICAgICAgICAgZm9yY2UsIGFuZCB0byBoZWxwIGFsbCB0aGUgb3BwcmVzc2VkLCBpcyBhIHN1cGVyZmx1b3VzIHRhc2sgYW5kIGFuIGlkbGUgZXhwZW5zZTsKICAgICAgICAgICAgICAgICAgICB3aGlsZSB5b3UgZm9uZGx5IGltYWdpbmVkIHRoYXQgdG8gbGl2ZSBpbiBwZWFjZSwgdG8gbmVnbGVjdCBhbGwgeW91ciBkdXRpZXMsIHRvCiAgICAgICAgICAgICAgICAgICAgYWJhbmRvbiBhbGwgeW91ciBwb3NzZXNzaW9ucyBhbmQgbGV0IG90aGVycyBzZWl6ZSB0aGVtIG9uZSBieSBvbmUsIGVuc3VyZWQKICAgICAgICAgICAgICAgICAgICB3b25kZXJmdWwgcHJvc3Blcml0eSBhbmQgY29tcGxldGUgc2VjdXJpdHkuIDxtaWxlc3RvbmUgbj0iNDciIHVuaXQ9InNlY3Rpb24iIC8+SW4KICAgICAgICAgICAgICAgICAgICBjb25zZXF1ZW5jZSBvZiB0aGlzLCBhIHJpdmFsIGhhcyBzdGVwcGVkIGludG8gdGhlIHBvc2l0aW9uIHRoYXQgeW91IG91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBmaWxsZWQsIGFuZCBpdCBpcyBoZSB3aG8gaGFzIGJlY29tZSBwcm9zcGVyb3VzIGFuZCBncmVhdCBhbmQgcnVsZXIgb3ZlcgogICAgICAgICAgICAgICAgICAgIG1hbnkgdGhpbmdzLiBBbmQgcmlnaHRseSBzbzsgZm9yIHRoZXJlIGlzIGEgcHJpemUsIGhvbm9yYWJsZSwgZ3JlYXQsIGFuZAogICAgICAgICAgICAgICAgICAgIGdsb3Jpb3VzLCBhIHByaXplIGZvciB3aGljaCB0aGUgZ3JlYXRlc3Qgb2Ygb3VyIHN0YXRlcyBvbmNlIHNwZW50IGFsbCB0aGVpciB0aW1lCiAgICAgICAgICAgICAgICAgICAgaW4gY29udGVuZGluZywgYnV0IHNpbmNlIG1pc2ZvcnR1bmUgaGFzIGRvZ2dlZCB0aGUgTGFjZWRhZW1vbmlhbnMsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBQaG9jaWFuIFdhciBoYXMgbGVmdCB0aGUgVGhlYmFucyBubyBsZWlzdXJlLCBhbmQgd2UgYXJlIGhlZWRsZXNzLCBoZSBoYXMgZ3Jhc3BlZAogICAgICAgICAgICAgICAgICAgIGl0IHdpdGhvdXQgYSBzdHJ1Z2dsZS4gPG1pbGVzdG9uZSBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgZmVhciBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBwb3J0aW9uIG9mIHRoZSBvdGhlcnMsIGJ1dCBoaXMgdGhlIHBvc3Nlc3Npb24gb2YgbWFueSBhbGxpZXMgYW5kIGEgbWlnaHR5IGZvcmNlOwogICAgICAgICAgICAgICAgICAgIGFuZCBzdWNoIGdyZWF0IGFuZCBtYW5pZm9sZCB0cm91YmxlcyBub3cgZW5jb21wYXNzIGFsbCB0aGUgR3JlZWtzIHRoYXQgaXQgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgZWFzeSB0byBhZHZpc2Ugd2hhdCBvdWdodCB0byBiZSBkb25lLiA8bWlsZXN0b25lIG49IjQ5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WWV0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgcGVyaWxvdXMgYXMgaXMgdGhlIHByZXNlbnQgc2l0dWF0aW9uIGluIG15IGp1ZGdlbWVudCwKICAgICAgICAgICAgICAgICAgICBub25lIG9mIGFsbCB0aGUgR3JlZWtzIGFyZSBpbiBncmVhdGVyIGRhbmdlciB0aGFuIHlvdSwgbm90IG9ubHkgYmVjYXVzZSB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgdGhlIGNoaWVmIG9iamVjdCBvZiBQaGlsaXAncyBwbG90cywgYnV0IGJlY2F1c2UgeW91IGFyZSB0aGUgbW9zdCBkaXNwb3NlZCB0bwogICAgICAgICAgICAgICAgICAgIGluYWN0aW9uLiBJZiB0aGVyZWZvcmUsIG5vdGluZyB0aGUgYWJ1bmRhbmNlIGFuZCBjaGVhcG5lc3Mgb2YgZ29vZHMgZm9yIHNhbGUgaW4KICAgICAgICAgICAgICAgICAgICB5b3VyIG1hcmtldHMsIHlvdSBoYXZlIGJlZW4gYmVndWlsZWQgYnkgdGhlc2UgdGhpbmdzIGludG8gdGhlIGJlbGllZiB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHkgaXMgaW4gbm8gZGFuZ2VyLCB5b3VyIGVzdGltYXRlIG9mIHRoZSBzaXR1YXRpb24gaXMgY29udHJhcnkgdG8gYWxsIHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgYW5kIHJlYXNvbi4gPG1pbGVzdG9uZSBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYSBtYXJrZXQgb3IgYSBmYWlyIG1pZ2h0IGJlCiAgICAgICAgICAgICAgICAgICAganVkZ2VkIG9uIHN1Y2ggZXZpZGVuY2UgdG8gYmUgd2VsbCBvciBpbGwgc3RvY2tlZDsgYnV0IGEgY2l0eSwgd2hpY2ggZXZlcnkKICAgICAgICAgICAgICAgICAgICBhc3BpcmFudCB0byB0aGUgcnVsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IGhhcwogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGVkIGFzIGhpcyBvbmx5IHBvc3NpYmxlIG9wcG9uZW50IGFuZCBhcyBjaGFtcGlvbiBvZiB0aGUgZnJlZWRvbSBvZiBhbGwsCiAgICAgICAgICAgICAgICAgICAgbXVzdCBzdXJlbHkgbm90IGJlIHRlc3RlZCBieSBoZXIgbWFya2V0LXN0dWZmIHRvIHNlZSB3aGV0aGVyIGFsbCBpcyB3ZWxsIHdpdGgKICAgICAgICAgICAgICAgICAgICBoZXIsIGJ1dCBieSBoZXIgYWJpbGl0eSB0byB0cnVzdCB0aGUgbG95YWx0eSBvZiBoZXIgYWxsaWVzLCBieSBoZXIgc3RyZW5ndGggaW4KICAgICAgICAgICAgICAgICAgICBhbXPigJR0aGVzZSBhcmUgdGhlIHF1YWxpdGllcyB0aGF0IHlvdSBtdXN0IGxvb2sgZm9yIGluIHRoZSBjaXR5OyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVzZSBpbiB5b3VyIGNhc2UgYXJlIGFsbCB1bnRydXN0d29ydGh5IGFuZCB1bnNvdW5kLiA8bWlsZXN0b25lIG49IjUxIiB1bml0PSJzZWN0aW9uIiAvPllvdSB3aWxsIHVuZGVyc3RhbmQgaXQgaWYgeW91IGxvb2sgYXQgaXQgaW4gdGhpcyB3YXkuIFdoZW4gaGF2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBhZmZhaXJzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gYmVlbiBpbiB0aGUgZ3JlYXRlc3QKICAgICAgICAgICAgICAgICAgICBjb25mdXNpb24/IEZvciBubyBvdGhlciBvY2Nhc2lvbiB0aGFuIHRoZSBwcmVzZW50IGNvdWxkIHBvc3NpYmx5IGJlIG5hbWVkIGJ5CiAgICAgICAgICAgICAgICAgICAgYW55b25lLiBBbGwgZHVyaW5nIHRoZSBwYXN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gd2FzCiAgICAgICAgICAgICAgICAgICAgZGl2aWRlZCBpbnRvIHR3byBjYW1wcywgdGhlIExhY2VkYWVtb25pYW5zJyBhbmQgb3VycywgYW5kIG9mIHRoZSBvdGhlciBHcmVla3MKICAgICAgICAgICAgICAgICAgICBzb21lIHRvb2sgdGhlaXIgb3JkZXJzIGZyb20gdXMsIG90aGVycyBmcm9tIHRoZW0uIFRoZSBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4sIGluIGhpbXNlbGYsIHdhcyBlcXVhbGx5IGRpc3RydXN0ZWQgYnkKICAgICAgICAgICAgICAgICAgICBhbGwsIGJ1dCBieSB0YWtpbmcgdXAgdGhlIGNhdXNlIG9mIHRoZSBsb3Npbmcgc2lkZSBpbiB0aGUgc3RydWdnbGUsIGhlIHJldGFpbmVkCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY29uZmlkZW5jZSB1bnRpbCBoZSBjb3VsZCBwdXQgdGhlbSBvbiBhbiBlcXVhbGl0eSB3aXRoIHRoZSBvdGhlcnM7IGJ1dAogICAgICAgICAgICAgICAgICAgIHRoZXJlYWZ0ZXIgaGUgd2FzIG5vIGxlc3MgaGF0ZWQgYnkgdGhvc2UgaGUgaGFkIHNhdmVkIHRoYW4gYnkgdGhvc2Ugd2hvIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgaGlzIGVuZW1pZXMgZnJvbSB0aGUgYmVnaW5uaW5nLiA8bWlsZXN0b25lIG49IjUyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBwbGFjZSwgdGhlIGtpbmcgaXMgbm93IHdlbGwtZGlzcG9zZWQgdG8gYWxsIHRoZSBHcmVla3MsIGFuZCB5ZXQgdG8gdXMKICAgICAgICAgICAgICAgICAgICBsZWFzdCBvZiBhbGwsIHVubGVzcyB3ZSBjYW4gZWZmZWN0IHNvbWUgaW1tZWRpYXRlIGltcHJvdmVtZW50LiBJbiB0aGUgc2Vjb25kCiAgICAgICAgICAgICAgICAgICAgcGxhY2UsIG1hbnkgc28tY2FsbGVkIOKAnHByb3RlY3RvcnPigJ0gYXJlIHNwcmluZ2luZyB1cAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5d2hlcmUsIGFuZCBhbGwgc3RhdGVzIGFyZSByaXZhbHMgZm9yIHRoZSBsZWFkZXJzaGlwLCBidXQgdW5mb3J0dW5hdGVseSBzb21lCiAgICAgICAgICAgICAgICAgICAgaG9sZCBhbG9vZiwgaW4gbXV0dWFsIGplYWxvdXN5IGFuZCBkaXN0cnVzdCwgYW5kIHNvIGVhY2ggc3RhdGUgaGFzIGlzb2xhdGVkCiAgICAgICAgICAgICAgICAgICAgaXRzZWxm4oCUQXJnaXZlcywgVGhlYmFucywgTGFjZWRhZW1vbmlhbnMsIENvcmludGhpYW5zLCBBcmNhZGlhbnMsCiAgICAgICAgICAgICAgICAgICAgb3Vyc2VsdmVzLiA8bWlsZXN0b25lIG49IjUzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB5ZXQsIHRob3VnaCBHcmVlayBwb2xpdGljcyBhcmUKICAgICAgICAgICAgICAgICAgICBzcGxpdCB1cCBpbnRvIHNvIG1hbnkgZmFjdGlvbnMgdW5kZXIgc28gbWFueSBwb3dlcnMsIGluIG5vIHN0YXRlLCBpZiBJIG11c3QKICAgICAgICAgICAgICAgICAgICBzcGVhayB0aGUgdHJ1dGggZnJlZWx5LCB3b3VsZCB5b3UgZmluZCB0aGUgZ292ZXJubWVudCBvZmZpY2VzIGFuZCB0aGUgY291bmNpbAogICAgICAgICAgICAgICAgICAgIGNoYW1iZXJzIGxlc3Mgb2NjdXBpZWQgd2l0aCBHcmVlayBhZmZhaXJzIHRoYW4gaGVyZSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBhbmQgbmF0dXJhbGx5IHNvLCBmb3IgbmVpdGhlcgogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggbG92ZSBub3IgdHJ1c3Qgbm9yIGZlYXIgZG9lcyBhbnlvbmUgaG9sZCBjb21tdW5pY2F0aW9uIHdpdGggdXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNTQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoaXMgaXMgbm90IGR1ZSB0byBhIHNpbmdsZSBjYXVzZSwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIG9yIHlvdSBtaWdodCBlYXNpbHkgcmVtZWR5IGl0LCBidXQgdG8gbWFueSBlcnJvcnMgb2YgZXZlcnkga2luZAogICAgICAgICAgICAgICAgICAgIHRocm91Z2hvdXQgdGhlIHBhc3QuIFdpdGhvdXQgZW51bWVyYXRpbmcgdGhlc2UsIEkgd2lsbCBtZW50aW9uIG9uZSBvbiB3aGljaCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCB0dXJuLCBvbmx5IGJlc2VlY2hpbmcgeW91IG5vdCB0byBiZSBvZmZlbmRlZCB3aXRoIG1lLCBpZiBJIHNwZWFrIHRoZQogICAgICAgICAgICAgICAgICAgIHRydXRoIGJvbGRseS4gSXQgaXMgdGhlIHNlbGxpbmcgb2YgeW91ciBpbnRlcmVzdHMgYXQgZXZlcnkgb3Bwb3J0dW5pdHk7IHlvdXIKICAgICAgICAgICAgICAgICAgICBzaGFyZSBpbiB0aGUgYmFyZ2FpbiBpcyBsZWlzdXJlIGFuZCBpbmFjdGlvbiwgd2hpY2ggY2hhcm0geW91IG91dCBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgcmVzZW50bWVudCBhZ2FpbnN0IHlvdXIgYmV0cmF5ZXJzLCBidXQgb3RoZXJzIHJlYXAgdGhlIHJld2FyZHMuIDxtaWxlc3RvbmUgbj0iNTUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG90aGVyIGVycm9ycyBpdCBpcyBub3Qgd29ydGggd2hpbGUgdG8gaW52ZXN0aWdhdGUKICAgICAgICAgICAgICAgICAgICBub3csIGJ1dCB3aGVuZXZlciBhbnkgcXVlc3Rpb24gYXJpc2VzIHRoYXQgY29uY2VybnMgUGhpbGlwLCBpbnN0YW50bHkgdXAganVtcHMKICAgICAgICAgICAgICAgICAgICBzb21lb25lIGFuZCBzYXlzIHRoZXJlIG11c3QgYmUgbm8gbm9uc2Vuc2UgdGFsa2VkLCBubyBkZWNsYXJhdGlvbnRpb24gb2Ygd2FyLAogICAgICAgICAgICAgICAgICAgIGFuZCBoZSBhdCBvbmNlIGdvZXMgb24gdG8gYWRkIGhvdyBnb29kIGEgdGhpbmcgaXQgaXMgdG8gcHJlc2VydmUgcGVhY2UsIGFuZCB3aGF0CiAgICAgICAgICAgICAgICAgICAgYSBib3RoZXIgaXQgaXMgdG8ga2VlcCB1cCBhIGxhcmdlIGFybXksIGFuZCBob3cg4oCcY2VydGFpbiBwZXJzb25zIHdhbnQKICAgICAgICAgICAgICAgICAgICB0byBwbHVuZGVyIHlvdXIgd2VhbHRo4oCdPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pLmUuIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIGRpdmVydGluZyBtb25leSBmcm9tIHRoZSBUaGVvcmljIEZ1bmQgdG8gbWlsaXRhcnkgb2JqZWN0cy48L25vdGU+OyBhbmQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBvdGhlciBzdGF0ZW1lbnRzIGFyZSBhcyB0cnVlIGFzIHRoZXkgY2FuIG1ha2UgdGhlbS4gPG1pbGVzdG9uZSBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc3VyZWx5IGl0IGlzIG5vdCB0byB5b3UgdGhhdCB0aGV5IHNob3VsZCByZWNvbW1lbmQgcGVhY2UsIGZvcgogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIHRha2VuIHRoZSBhZHZpY2UgYW5kIHRoZXJlIHlvdSBzaXQ7IGl0IGlzIHRvIHRoZSBtYW4gd2hvIGlzIGV2ZW4gbm93IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIHdhcnBhdGg7IGZvciBpZiBQaGlsaXAgY2FuIGJlIHdvbiBvdmVyLCB5b3VyIHNoYXJlIG9mIHRoZSBjb21wYWN0IGlzIHJlYWR5CiAgICAgICAgICAgICAgICAgICAgdG8gaGFuZC4gQWdhaW4sIHRoZXkgc2hvdWxkIHJlZmxlY3QgdGhhdCB0aGUgaXJrc29tZSB0aGluZyBpcyBub3QgdGhlIGV4cGVuc2Ugb2YKICAgICAgICAgICAgICAgICAgICBzZWN1cmluZyBvdXIgc2FmZXR5LCBidXQgdGhlIGRvb20gdGhhdCB3aWxsIGJlIG91cnMgaWYgd2Ugc2hyaW5rIGZyb20gdGhhdAogICAgICAgICAgICAgICAgICAgIGV4cGVuc2UuIEFzIGZvciB0aGUg4oCccGx1bmRlciBvZiB5b3VyIHdlYWx0aCzigJ0gdGhleSBvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIHByZXZlbnQgdGhhdCBieSBwcm9wb3Npbmcgc29tZSB3YXkgb2YgY2hlY2tpbmcgaXQgYW5kIG5vdCBieSBhYmFuZG9uaW5nIHlvdXIKICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdHMuIDxtaWxlc3RvbmUgbj0iNTciIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBpdCBpcyBqdXN0IHRoaXMgdGhhdCByb3VzZXMKICAgICAgICAgICAgICAgICAgICBteSBpbmRpZ25hdGlvbiwgdGhhdCBzb21lIG9mIHlvdSBzaG91bGQgYmUgZGlzdHJlc3NlZCBhdCB0aGUgcHJvc3BlY3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGx1bmRlciBvZiB5b3VyIHdlYWx0aCwgd2hlbiB5b3UgYXJlIHF1aXRlIGNvbXBldGVudCB0byBwcm90ZWN0IGl0IGFuZCB0byBwdW5pc2gKICAgICAgICAgICAgICAgICAgICBhbnkgb2ZmZW5kZXIsIGJ1dCB0aGF0IHlvdSBhcmUgbm90IGRpc3RyZXNzZWQgYXQgdGhlIHNpZ2h0IG9mIFBoaWxpcCB0aHVzCiAgICAgICAgICAgICAgICAgICAgcGx1bmRlcmluZyBldmVyeSBHcmVlayBzdGF0ZSBpbiB0dXJuLCB0aGUgbW9yZSBzbyBhcyBoZSBpcyBwbHVuZGVyaW5nIHRoZW0gdG8KICAgICAgICAgICAgICAgICAgICBpbmp1cmUgeW91LiA8bWlsZXN0b25lIG49IjU4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2h5CiAgICAgICAgICAgICAgICAgICAgdGhlbiwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGhhcyBub25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugc3BlYWtlcnMgZXZlciBhZG1pdHRlZCB0aGF0IFBoaWxpcCBpcyB2aW9sYXRpbmcgcmlnaHRzIGFuZCBwcm92b2tpbmcgd2FyLAogICAgICAgICAgICAgICAgICAgIHdoZW4gaGUgaXMgdGh1cyBvcGVubHkgdmlvbGF0aW5nIHJpZ2h0cyBhbmQgc3ViZHVpbmcgY2l0aWVzLCBidXQgd2hlbiBvdGhlcnMKICAgICAgICAgICAgICAgICAgICB1cmdlIHlvdSBub3QgdG8gZ2l2ZSB3YXkgdG8gUGhpbGlwIG5vciBzdWJtaXQgdG8gdGhlc2UgbG9zc2VzLCB0aGV5IHNheSB0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgIHByb3Zva2luZyB3YXI/IEl0IGlzIGJlY2F1c2UgdGhleSB3YW50IHRoZSBibGFtZSBmb3IgdGhlIHN1ZmZlcmluZ3MgdGhhdCB0aGUgd2FyCiAgICAgICAgICAgICAgICAgICAgd2lsbCBlbnRhaWzigJRmb3IgaXQgaXMgaW5ldml0YWJsZSwgeWVzLCBpbmV2aXRhYmxlIHRoYXQgdGhlIHdhciBzaG91bGQKICAgICAgICAgICAgICAgICAgICBjYXVzZSBtdWNoIGRpc3RyZXNz4oCUdG8gYmUgbGFpZCBhdCB0aGUgZG9vcnMgb2YgdGhvc2Ugd2hvIGJlbGlldmUgdGhleQogICAgICAgICAgICAgICAgICAgIGFyZSB5b3VyIHdpc2VzdCBjb3Vuc2VsbG9ycy4gPG1pbGVzdG9uZSBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBjb252aW5jZWQgdGhhdCBpZiB5b3Ugb2ZmZXIgYSB3aG9sZS1oZWFydGVkIGFuZCB1bmFuaW1vdXMgb3Bwb3NpdGlvbiB0byBQaGlsaXAsCiAgICAgICAgICAgICAgICAgICAgeW91IHdpbGwgYmVhdCBoaW0gYW5kIHRoZXkgd2lsbCBoYXZlIG5vIGZ1cnRoZXIgY2hhbmNlIG9mIGVhcm5pbmcgaGlzIHBheSwgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBpZiBhdCB0aGUgZmlyc3QgYWxhcm0gb2Ygd2FyIHlvdSB0aHJvdyB0aGUgYmxhbWUgb24gY2VydGFpbiBwZXJzb25zIGFuZAogICAgICAgICAgICAgICAgICAgIGRldm90ZSB5b3VyIGVuZXJnaWVzIHRvIGJyaW5naW5nIHRoZW0gdG8gdHJpYWwsIHRoZXkgdGhlbXNlbHZlcyBieSBhY2N1c2luZyB0aGVtCiAgICAgICAgICAgICAgICAgICAgd2lsbCBnYWluIGJvdGggdGhlaXIgZW5kc+KAlHJlcHV0YXRpb24gd2l0aCB5b3UgYW5kIG1vbmV5IGZyb20gaGltLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIHlvdSB3aWxsIHB1bmlzaCB0aGUgbWVuIHdobyBoYXZlIHNwb2tlbiBpbiB5b3VyIGludGVyZXN0cyBmb3IgdGhlIGZhdWx0cwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSBvdWdodCB0byBwdW5pc2ggaW4gdGhlaXIgYWNjdXNlcnMuIDxtaWxlc3RvbmUgbj0iNjAiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBhcmUgdGhlaXIgaG9wZXMsIGFuZCBzdWNoIGlzIHRoZSBkZXNpZ24gb2YgdGhlIGFjY3VzYXRpb24gdGhhdAogICAgICAgICAgICAgICAgICAgIOKAnGNlcnRhaW4gcGVyc29ucyB3aXNoIHRvIHByb3Zva2Ugd2FyLuKAnSBCdXQgSSBhbSBhYnNvbHV0ZWx5CiAgICAgICAgICAgICAgICAgICAgY2VydGFpbiB0aGF0LCB3aXRob3V0IHdhaXRpbmcgZm9yIGFueSBBdGhlbmlhbiB0byBwcm9wb3NlIGEgZGVjbGFyYXRpb24gb2Ygd2FyLAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCBpcyBpbiBwb3NzZXNzaW9uIG9mIG11Y2ggb2Ygb3VyIHRlcnJpdG9yeSBhbmQgaGFzIGp1c3QgZGlzcGF0Y2hlZCBhIGZvcmNlCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBDYXJkaWEuIElmLCBob3dldmVyLCB3ZSBsaWtlIHRvIHByZXRlbmQgdGhhdCBoZSBpcyBub3QgYXQgd2FyIHdpdGggdXMsCiAgICAgICAgICAgICAgICAgICAgaGUgd291bGQgYmUgdGhlIGdyZWF0ZXN0IGZvb2wgYWxpdmUgaWYgaGUgdHJpZWQgdG8gZGlzcHJvdmUgdGhhdDsgZm9yIHdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgdmljdGltcyBkZW55IHRoZSB3cm9uZywgd2hhdCBzaG91bGQgdGhlIG1hbGVmYWN0b3IgZG8/IDxtaWxlc3RvbmUgbj0iNjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gb3VyIHR1cm4gY29tZXMsIHdoYXQgc2hhbGwgd2Ugc2F5IHRoZW4/IEZvciBvZiBjb3Vyc2UgaGUKICAgICAgICAgICAgICAgICAgICB3aWxsIGRlbnkgdGhhdCBoZSBpcyBhdHRhY2tpbmcgdXMsIGp1c3QgYXMgaGUgZGVuaWVkIHRoYXQgaGUgd2FzIGF0dGFja2luZyB0aGUKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgT3JldXMsIHdoZW4gaGlzIHRyb29wcyB3ZXJlIGFscmVhZHkgaW4gdGhlaXIgdGVycml0b3J5LCBvciB0aGUgUGhlcmFlYW5zCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHRoYXQsIHdoZW4gaGUgd2FzIGFjdHVhbGx5IGFzc2F1bHRpbmcgdGhlaXIgd2FsbHMsIG9yIHRoZSBPbHludGhpYW5zIGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHN0YXJ0LCB1bnRpbCBoZSB3YXMgaW5zaWRlIHRoZWlyIGZyb250aWVyIHdpdGggaGlzIGFybXkuIE9yIHNoYWxsIHdlIHNheSwKICAgICAgICAgICAgICAgICAgICBldmVuIGF0IHRoYXQgaG91ciwgdGhhdCB0aG9zZSB3aG8gYmlkIHVzIHJlcGVsIGhpbSBhcmUgcHJvdm9raW5nIHdhcj8gSWYgc28sCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm90aGluZyBsZWZ0IGJ1dCBzbGF2ZXJ5LCBmb3IgdGhlcmUgaXMgbm8gb3RoZXIgYWx0ZXJuYXRpdmUuIDxtaWxlc3RvbmUgbj0iNjIiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHlvdSBoYXZlIG5vdCB0aGUgc2FtZSBpbnRlcmVzdHMgYXQgc3Rha2UgYXMKICAgICAgICAgICAgICAgICAgICBzb21lIG9mIHRoZSBvdGhlcnMsIGZvciBpdCBpcyBub3QgeW91ciBzdWJqZWN0aW9uIHRoYXQgUGhpbGlwIGFpbXMgYXQ7IG5vLCBidXQKICAgICAgICAgICAgICAgICAgICB5b3VyIGNvbXBsZXRlIGFubmloaWxhdGlvbi4gRm9yIGhlIGlzIHdlbGwgYXNzdXJlZCB0aGF0IHlvdSB3aWxsIG5vdCBjb25zZW50IHRvCiAgICAgICAgICAgICAgICAgICAgYmUgc2xhdmVzOyBvciwgaWYgeW91IGNvbnNlbnQsIHdpbGwgbmV2ZXIgbGVhcm4gaG93IHRvIGJlIHNsYXZlcywgZm9yIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICBhY2N1c3RvbWVkIHRvIHJ1bGUgb3RoZXJzOyBidXQgdGhhdCB5b3Ugd2lsbCBiZSBhYmxlLCBpZiB5b3Ugc2VpemUgeW91ciBjaGFuY2VzLAogICAgICAgICAgICAgICAgICAgIHRvIGNhdXNlIGhpbSBtb3JlIHRyb3VibGUgdGhhbiBhbGwgdGhlIHJlc3Qgb2YgdGhlIHdvcmxkLiBGb3IgdGhhdCByZWFzb24gaGUKICAgICAgICAgICAgICAgICAgICB3aWxsIG5vdCBzcGFyZSB5b3UsIGlmIGhlIGdldHMgeW91IGluIGhpcyBwb3dlci4gPG1pbGVzdG9uZSBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXJlZm9yZSB5b3UgbXVzdCBuZWVkcyBiZWFyIGluIG1pbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgd2lsbCBiZSBhIGxpZmUtYW5kLWRlYXRoIHN0cnVnZ2xlLCBhbmQgdGhlIG1lbiB3aG8gaGF2ZSBzb2xkCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyB0byBQaGlsaXAgbXVzdCBiZSBwdWJsaWNseSBjdWRnZWxsZWQgdG8gZGVhdGg7IGZvciBpdCBpcyBpbXBvc3NpYmxlLAogICAgICAgICAgICAgICAgICAgIGltcG9zc2libGUgdG8gcXVlbGwgdGhlIGZvZXMgd2l0aG91dCwgdW50aWwgeW91IGhhdmUgcHVuaXNoZWQgdGhlIGZvZXMgd2l0aGluCiAgICAgICAgICAgICAgICAgICAgeW91ciBnYXRlcywgYnV0IGlmIHlvdSBsZXQgdGhlc2Ugc3RhbmQgYXMgc3R1bWJsaW5nLWJsb2NrcyBpbiB5b3VyIHBhdGgsIHlvdQogICAgICAgICAgICAgICAgICAgIG11c3QgZmFpbCBhZ2FpbnN0IHRoZSBvdGhlcnMuIDxtaWxlc3RvbmUgbj0iNjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCBkbyB5b3UKICAgICAgICAgICAgICAgICAgICBpbWFnaW5lIGlzIGhpcyBtb3RpdmUgaW4gb3V0cmFnaW5nIHlvdSBub3figJRJIHRoaW5rIG5vIG90aGVyIHRlcm0KICAgICAgICAgICAgICAgICAgICBkZXNjcmliZXMgaGlzIGNvbmR1Y3TigJRvciB3aHkgaXMgaXQgdGhhdCwgaW4gZGVjZWl2aW5nIHRoZSBvdGhlcnMsIGhlCiAgICAgICAgICAgICAgICAgICAgYXQgbGVhc3QgY29uZmVycyBiZW5lZml0cyB1cG9uIHRoZW0sIGJ1dCBpbiB5b3VyIGNhc2UgaGUgaXMgcmVzb3J0aW5nIHRvCiAgICAgICAgICAgICAgICAgICAgdGhyZWF0cz8gRm9yIGV4YW1wbGUsIHRoZSBUaGVzc2FsaWFucyB3ZXJlIGJlZ3VpbGVkIGJ5IGhpcyBnZW5lcm9zaXR5IGludG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IHN0YXRlIG9mIHNlcnZpdHVkZTsgbm8gd29yZHMgY2FuIGRlc2NyaWJlIGhvdyBoZSBmb3JtZXJseSBkZWNlaXZlZCB0aGUKICAgICAgICAgICAgICAgICAgICBtaXNlcmFibGUgT2x5bnRoaWFucyBieSBoaXMgZ2lmdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDgxNCIga2V5PSJ0Z24sNjAwNDgxNCI+UG90aWRhZWE8L3BsYWNlTmFtZT4gYW5kIG1hbnkgb3RoZXIgcGxhY2VzOyB0aGUgVGhlYmFucyBoZSBpcyBub3cKICAgICAgICAgICAgICAgICAgICBtaXNsZWFkaW5nLCBoYXZpbmcgaGFuZGVkIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODMiIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICB0byB0aGVtIGFuZCByZWxpZXZlZCB0aGVtIG9mIGEgbG9uZyBhbmQgdHJ5aW5nIHdhci4gPG1pbGVzdG9uZSBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBlYWNoIG9mIHRoZXNlIHN0YXRlcyBoYXMgcmVhcGVkIHNvbWUgYmVuZWZpdCBmcm9tIGhpbSwgYnV0IHdoaWxlCiAgICAgICAgICAgICAgICAgICAgc29tZSBoYXZlIGFscmVhZHkgcGFpZCB0aGUgcHJpY2UgYnkgdGhlaXIgc3VmZmVyaW5ncywgdGhlIG90aGVycyBoYXZlIHlldCB0bwogICAgICAgICAgICAgICAgICAgIHN1ZmZlciB3aGF0ZXZlciBzaGFsbCBmYWxsIHRvIHRoZWlyIGxvdC4gQXMgZm9yIHlvdSwgSSBkbyBub3Qgc2F5IGhvdyBmYXIgeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIHJvYmJlZCwgYnV0IGluIHRoZSBhY3R1YWwgbWFraW5nIG9mIHRoZSBwZWFjZSwgaG93IGNvbXBsZXRlbHkgeW91IHdlcmUKICAgICAgICAgICAgICAgICAgICBkZWNlaXZlZCwgaG93IGdyaWV2b3VzbHkgeW91IHdlcmUgcm9iYmVkISBXZXJlIHlvdSBub3QgZGVjZWl2ZWQgYWJvdXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDQwMDM5NjMiIGtleT0idGduLDQwMDM5NjMiPlBob2NpczwvcGxhY2VOYW1lPiwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiwgdGhlIFRocmFjZS13YXJkIGRpc3RyaWN0cywgRG9yaXNjdXMsIFNlcnJpdW0sCiAgICAgICAgICAgICAgICAgICAgQ2Vyc29ibGVwdGVzIGhpbXNlbGY/IElzIG5vdCBQaGlsaXAgbm93IGhvbGRpbmcgdGhlIGNpdHkgb2YgdGhlIENhcmRpYW5zLCBhbmQKICAgICAgICAgICAgICAgICAgICBhZG1pdHRpbmcgdGhhdCBoZSBob2xkcyBpdD8gPG1pbGVzdG9uZSBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5XaHkgdGhlbiBkb2VzIGhlCiAgICAgICAgICAgICAgICAgICAgZGVhbCBpbiB0aGF0IHdheSB3aXRoIHRoZSBvdGhlciBHcmVla3MsIGJ1dCB3aXRoIHlvdSBpbiB0aGlzIHdheT8gQmVjYXVzZSB5b3VycwogICAgICAgICAgICAgICAgICAgIGlzIHRoZSBvbmUgY2l0eSBpbiB0aGUgd29ybGQgd2hlcmUgaW1tdW5pdHkgaXMgZ3JhbnRlZCB0byBwbGVhZCBvbiBiZWhhbGYgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcywgYW5kIHdoZXJlIGEgbWFuIHdobyBoYXMgYmVlbiBicmliZWQgY2FuIHNhZmVseSBhZGRyZXNzIHlvdSBpbiBwZXJzb24sCiAgICAgICAgICAgICAgICAgICAgZXZlbiB3aGVuIHlvdSBoYXZlIGJlZW4gcm9iYmVkIG9mIHlvdXIgb3duLiBJdCB3b3VsZCBub3QgaGF2ZSBiZWVuIHNhZmUgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPiB0byBwbGVhZCBQaGlsaXAncwogICAgICAgICAgICAgICAgICAgIGNhdXNlLCB1bmxlc3MgdGhlIE9seW50aGlhbiBkZW1vY3JhY3kgaGFkIHNoYXJlZCBpbiB0aGUgZW5qb3ltZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJldmVudWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBrZXk9InRnbiw2MDA0ODE0Ij5Qb3RpZGFlYTwvcGxhY2VOYW1lPi4gPG1pbGVzdG9uZSBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3b3VsZCBub3QgaGF2ZSBiZWVuIHNhZmUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGtleT0idGduLDcwMDEzOTkiPlRoZXNzYWx5PC9wbGFjZU5hbWU+IHRvIHBsZWFkIFBoaWxpcCdzIGNhdXNlLCBpZiB0aGUKICAgICAgICAgICAgICAgICAgICBjb21tb25lcnMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGtleT0idGduLDcwMDEzOTkiPlRoZXNzYWx5PC9wbGFjZU5hbWU+IGhhZCBub3Qgc2hhcmVkIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGFkdmFudGFnZXMgdGhhdCBQaGlsaXAgY29uZmVycmVkLCB3aGVuIGhlIGV4cGVsbGVkIHRoZWlyIHR5cmFudHMgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZWQgdG8gdGhlbSB0aGVpciBBbXBoaWN0eW9uaWMgcHJpdmlsZWdlcy4gSXQgd291bGQgbm90IGhhdmUgYmVlbiBzYWZlIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIHVudGlsIGhlIGdhdmUgdGhlbSBiYWNrCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBrZXk9InRnbiw3MDAyNjgzIj5Cb2VvdGlhPC9wbGFjZU5hbWU+IGFuZCB3aXBlZCBvdXQgdGhlIFBob2NpYW5zLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjY4IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aG91Z2ggUGhpbGlwIGhhcyBub3Qgb25seSByb2JiZWQgeW91IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4gYW5kIHRoZSBDYXJkaWFuIHRlcnJpdG9yeSwKICAgICAgICAgICAgICAgICAgICBidXQgaXMgYWxzbyB0dXJuaW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gaW50byBhCiAgICAgICAgICAgICAgICAgICAgZm9ydHJlc3MgdG8gb3ZlcmF3ZSB1cyBhbmQgaXMgZXZlbiBub3cgb24gaGlzIHdheSB0byBhdHRhY2sgQnl6YW50aXVtLCBpdCBpcwogICAgICAgICAgICAgICAgICAgIHNhZmUgdG8gc3BlYWsgb24gUGhpbGlwJ3MgYmVoYWxmLiBJbmRlZWQsIG9mIHRoZXNlIHBvbGl0aWNpYW5zLCBzb21lIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYmVnZ2FycyBhcmUgc3VkZGVubHkgZ3Jvd2luZyByaWNoLCBzb21lIHVua25vd24gdG8gbmFtZSBhbmQgZmFtZSBhcmUgbm93IG1lbiBvZgogICAgICAgICAgICAgICAgICAgIGhvbm91ciBhbmQgZGlzdGluY3Rpb247IHdoaWxlIHlvdSwgb24gdGhlIGNvbnRyYXJ5LCBoYXZlIHBhc3NlZCBmcm9tIGhvbm91ciB0bwogICAgICAgICAgICAgICAgICAgIGRpc2hvbm91ciwgZnJvbSBhZmZsdWVuY2UgdG8gZGVzdGl0dXRpb24uIDxtaWxlc3RvbmUgbj0iNjkiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yCiAgICAgICAgICAgICAgICAgICAgYSBjaXR5J3Mgd2VhbHRoIEkgaG9sZCB0byBiZSBhbGxpZXMsIGNyZWRpdCwgZ29vZHdpbGwsIGFuZCBvZiBhbGwgdGhlc2UgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIGRlc3RpdHV0ZS4gQW5kIGl0IGlzIGJlY2F1c2UgeW91IGFyZSBpbmRpZmZlcmVudCB0byB0aGVzZSB0aGluZ3MgYW5kIGFsbG93IHRoZW0KICAgICAgICAgICAgICAgICAgICB0byBiZSB0YWtlbiBmcm9tIHlvdSBpbiB0aGlzIHdheSwgdGhhdCBQaGlsaXAgaXMgcHJvc3Blcm91cyBhbmQgcG93ZXJmdWwgYW5kCiAgICAgICAgICAgICAgICAgICAgZm9ybWlkYWJsZSB0byBHcmVla3MgYW5kIGJhcmJhcmlhbnMgYWxpa2UsIHdoaWxlIHlvdSBhcmUgZGVzZXJ0ZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgaHVtaWxpYXRlZCwgZmFtb3VzIGZvciB5b3VyIHdlbGwtc3RvY2tlZCBtYXJrZXRzLCBidXQgaW4gcHJvdmlzaW9uIGZvciB5b3VyCiAgICAgICAgICAgICAgICAgICAgcHJvcGVyIG5lZWRzLCBjb250ZW1wdGlibGUuIDxtaWxlc3RvbmUgbj0iNzAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5ZZXQgSSBvYnNlcnZlIHRoYXQgc29tZSBvZiBvdXIgc3BlYWtlcnMgZG8gbm90IHVyZ2UgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBwb2xpY3kgZm9yIHlvdSBhcyBmb3IgdGhlbXNlbHZlczsgZm9yIHlvdSwgdGhleSBzYXksIG91Z2h0IHRvIHJlbWFpbiBxdWlldAogICAgICAgICAgICAgICAgICAgIGV2ZW4gd2hlbiB5b3UgYXJlIHdyb25nZWQ7IHRoZW1zZWx2ZXMgY2Fubm90IHJlbWFpbiBxdWlldCBhbW9uZyB5b3UsIHRob3VnaCBubwogICAgICAgICAgICAgICAgICAgIG9uZSBkb2VzIHRoZW0gd3JvbmcuIEFuZCB5ZXQsIHJhaWxsZXJ5IGFwYXJ0LCBzdXBwb3NlIHNvbWVvbmUgc2hvdWxkIGFzaywKICAgICAgICAgICAgICAgICAgICDigJxUZWxsIG1lLCBBcmlzdG9tZWRlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFuIHVua25vd24KICAgICAgICAgICAgICAgICAgICAgICAgb3Bwb25lbnQuIElmIHdpdGggRGluZG9yZiB3ZSBhZG9wdCB0aGUgdnVsZ2F0ZSwgaXQgd2lsbCByZWZlciB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gYWN0b3IgQXJpc3RvZGVtdXMsIHdobyB3YXMgYSBtZW1iZXIgb2YgdGhlIGZpcnN0IGVtYmFzc3kgdG8gUGhpbGlwCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBpcyBtZW50aW9uZWQgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjEiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMjE8L2JpYmw+IGFuZCBpbiBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NhZ2VzIG9mIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5IiB2YWxpZD0ieWVzIj5EZW0uIDE5PC9iaWJsPjwvbm90ZT4gd2h5LCB3aGVuIHlvdSBrbm93CiAgICAgICAgICAgICAgICAgICAgcGVyZmVjdGx5IHdlbGzigJRmb3Igbm8gb25lIGlzIGlnbm9yYW50IG9mIHN1Y2ggbWF0dGVyc+KAlHRoYXQgYQogICAgICAgICAgICAgICAgICAgIHByaXZhdGUgc3RhdGlvbiBpcyBzZWN1cmUgYW5kIGZyZWUgZnJvbSByaXNrLCBidXQgdGhlIGxpZmUgb2YgYSBwb2xpdGljaWFuIGlzCiAgICAgICAgICAgICAgICAgICAgcHJlY2FyaW91cywgb3BlbiB0byBhdHRhY2ssIGFuZCBmdWxsIG9mIHRyaWFscyBhbmQgbWlzZm9ydHVuZXMgZXZlcnkgZGF5LCB3aHkgZG8KICAgICAgICAgICAgICAgICAgICB5b3Ugbm90IGNob29zZSB0aGUgcXVpZXQsIHNlcXVlc3RlcmVkIGxpZmUgaW5zdGVhZCBvZiB0aGUgbGlmZSBvZgogICAgICAgICAgICAgICAgICAgIHBlcmlsP+KAnSBXaGF0IHdvdWxkIHlvdSByZXBseT8gPG1pbGVzdG9uZSBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYKICAgICAgICAgICAgICAgICAgICB3ZSBzaG91bGQgZ3JhbnQgdGhlIHRydXRoIG9mIHdoYXQgd291bGQgYmUgeW91ciBiZXN0IHBvc3NpYmxlIGFuc3dlciwgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBkbyBhbGwgdGhpcyBmb3IgbG92ZSBvZiBnbG9yeSBhbmQgcmVub3duLCBJIHdvbmRlciB3aGF0IGVhcnRobHkgcmVhc29uIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoaW5raW5nIHRoYXQgeW91IHlvdXJzZWxmIG91Z2h0IGZvciB0aGF0IG9iamVjdCB0byBtYWtlIGV2ZXJ5IGV4ZXJ0aW9uLAogICAgICAgICAgICAgICAgICAgIGZhY2luZyB0b2lsIGFuZCBkYW5nZXIsIHdoZXJlYXMgeW91IGFkdmlzZSB0aGUgU3RhdGUgdG8gYWJhbmRvbiBzdWNoIGVmZm9ydHMgaW4KICAgICAgICAgICAgICAgICAgICBzaGVlciBpbmRpZmZlcmVuY2UuIEZvciB0aGlzIHlvdSBjYW5ub3Qgc2F54oCUdGhhdCBpdCBpcyB5b3VyIGR1dHkgdG8KICAgICAgICAgICAgICAgICAgICBtYWtlIGEgZmlndXJlIGluIHRoZSBTdGF0ZSwgYnV0IHRoYXQgdGhlIFN0YXRlIGlzIG9mIG5vIGltcG9ydGFuY2UgaW4gdGhlIEdyZWVrCiAgICAgICAgICAgICAgICAgICAgd29ybGQuIDxtaWxlc3RvbmUgbj0iNzIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZXJlIGlzIGFub3RoZXIgdGhpbmcgSSBkbyBub3QKICAgICAgICAgICAgICAgICAgICBzZWXigJR0aGF0IGl0IGlzIHNhZmUgZm9yIHRoZSBTdGF0ZSB0byBtaW5kIGl0cyBvd24gYnVzaW5lc3MsIGJ1dAogICAgICAgICAgICAgICAgICAgIGRhbmdlcm91cyBmb3IgeW91IGlmIHlvdSBkbyBub3QgZ28gYmV5b25kIHlvdXIgZmVsbG93LWNpdGl6ZW5zIGluIG1lZGRsaW5nIHdpdGgKICAgICAgICAgICAgICAgICAgICBhZmZhaXJzLiA8bWlsZXN0b25lIG49IjczIiB1bml0PSJzZWN0aW9uIiAvPk5heSwgb24gdGhlIGNvbnRyYXJ5LCBJIGRvIGZvcmVzZWUKICAgICAgICAgICAgICAgICAgICB0aGUgdXRtb3N0IGRhbmdlciwgdG8geW91IGZyb20geW91ciBidXN0bGluZyBhbmQgbWVkZGxpbmcsIGJ1dCB0byB0aGUgU3RhdGUgZnJvbQogICAgICAgICAgICAgICAgICAgIGl0cyBpbmFjdGl2aXR5LiBCdXQgeW91IG1heSBzYXkgdGhhdCB5b3UgaGF2ZSB0aGUgaG9ub3VyIG9mIHlvdXIgZ3JhbmRmYXRoZXIgYW5kCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIHRvIHVwaG9sZCwgYW5kIGl0IHdvdWxkIGJlIHNjYW5kYWxvdXMgdG8gc3VidmVydCBpdCBpbiB5b3VyIHBlcnNvbiwgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgU3RhdGUgaGFzIGluaGVyaXRlZCBvbmx5IG5hbWVsZXNzIGFuZCBwYWx0cnkgZXhwbG9pdHMgZnJvbSBvdXIKICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMuIEJ1dCB0aGF0IHRvbyBpcyB1bnRydWU7IGZvciB5b3UgaGFkIGEgdGhpZWYgZm9yIHlvdXIgZmF0aGVyLCBpZiBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBsaWtlIHlvdSwgYnV0IG91ciBmYXRoZXJzLCBhcyBhbGwgdGhlIEdyZWVrcyBrbm93LCBwcmVzZXJ2ZWQgdGhlbSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGRlYWRsaWVzdCBwZXJpbHMuIDxtaWxlc3RvbmUgbj0iNzQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluZGVlZCB0aGVyZSBhcmUgc29tZQogICAgICAgICAgICAgICAgICAgIHdob3NlIG1hbmFnZW1lbnQgYm90aCBvZiBwcml2YXRlIGFuZCBvZiBwdWJsaWMgYnVzaW5lc3MgaXMgbmVpdGhlciBmYWlyIG5vcgogICAgICAgICAgICAgICAgICAgIGNvbnN0aXR1dGlvbmFsOyBmb3IgaG93IGlzIGl0IGZhaXIgdGhhdCBzb21lIG9mIHRoZXNlIG1lbiwganVzdCByZWxlYXNlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgamFpbCwgc2hvdWxkIGJlIGlnbm9yYW50IG9mIHRoZWlyIG93biB3b3J0aCwgd2hpbGUgdGhhdCBzdGF0ZSwgd2hpY2ggd2FzIG9uY2UKICAgICAgICAgICAgICAgICAgICB0aGUgY2hhbXBpb24gb2YgdGhlIHJlc3QgYW5kIG1haW50YWluZWQgdGhlIHByZS1lbWluZW5jZSwgc2hvdWxkIG5vdyBiZSBzdW5rIGluCiAgICAgICAgICAgICAgICAgICAgYWxsIGRpc2hvbm91ciBhbmQgaHVtaWxpYXRpb24/IDxtaWxlc3RvbmUgbj0iNzUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVyZWZvcmUsIHRob3VnaCB0aGVyZSBpcyBtdWNoIHRoYXQgSSBjb3VsZCBzYXkgb24gbWFueQogICAgICAgICAgICAgICAgICAgIHRvcGljcywgSSB3aWxsIGZvcmJlYXI7IGZvciBpbmRlZWQgaXQgaXMgbm90LCBJIHRoaW5rLCBsYWNrIG9mIHNwZWVjaGVzIGVpdGhlcgogICAgICAgICAgICAgICAgICAgIG5vdyBvciBhdCBhbnkgb3RoZXIgdGltZSB0aGF0IGlzIHRoZSBjYXVzZSBvZiBvdXIgZGlzdHJlc3MsIGJ1dCB3aGVuIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZWQgdG8gdGhlIHJpZ2h0IHNvcnQgb2YgYXJndW1lbnRzLCBhbmQgd2hlbiB5b3UgYXJlIHVuYW5pbW91cyBhcyB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIHZhbGlkaXR5LCB5b3Ugc2l0IG9uIGFuZCBnaXZlIGVxdWFsIGF0dGVudGlvbiB0byB0aG9zZSB3aG8gd2lzaCB0byBvdmVydGhyb3cgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzdG9ydCB0aGVtLiBJdCBpcyBub3QgdGhhdCB5b3UgZG8gbm90IHJlY29nbml6ZSB0aGVzZSBzcGVha2VycywgZm9yIGFzIHNvb24gYXMKICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBzZWVuIHRoZW0sIHlvdSBrbm93IGV4YWN0bHkgd2hvIGlzIHNwZWFraW5nIGZvciBwYXkgYW5kIGFjdGluZyBhcwogICAgICAgICAgICAgICAgICAgIFBoaWxpcCdzIGFnZW50LCBhbmQgd2hvIGlzIHNpbmNlcmVseSBkZWZlbmRpbmcgeW91ciBiZXN0IGludGVyZXN0czsgYnV0IHlvdXIgYWltCiAgICAgICAgICAgICAgICAgICAgaXMgdG8gZmluZCBmYXVsdCB3aXRoIHRoZXNlIGxhdHRlciBhbmQsIGJ5IHR1cm5pbmcgdGhlIHN1YmplY3QgaW50byByaWRpY3VsZSBhbmQKICAgICAgICAgICAgICAgICAgICByYWlsbGVyeSwgdG8gYXZvaWQgZG9pbmcgYW55IHBhcnQgb2YgeW91ciBvd24gZHV0eS4gPG1pbGVzdG9uZSBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB5b3UgaGF2ZSB0aGUgdHJ1dGggc3Bva2VuIHdpdGggYWxsIGZyZWVkb20sIHNpbXBseSBpbiBnb29kd2lsbAogICAgICAgICAgICAgICAgICAgIGFuZCBmb3IgdGhlIGJlc3TigJRubyBzcGVlY2ggcGFja2VkIGJ5IGZsYXR0ZXJ5IHdpdGggbWlzY2hpZWYgYW5kCiAgICAgICAgICAgICAgICAgICAgZGVjZWl0LCBhbmQgaW50ZW5kZWQgdG8gcHV0IG1vbmV5IGludG8gdGhlIHNwZWFrZXIncyBwb2NrZXQgYW5kIHRoZSBjb250cm9sIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIFN0YXRlIGludG8gb3VyIGVuZW1pZXMnIGhhbmRzLiBFaXRoZXIsIHRoZW4sIHlvdSBtdXN0IGFiYW5kb24gdGhlc2UgaGFiaXRzCiAgICAgICAgICAgICAgICAgICAgb2YgeW91cnMsIG9yIHlvdSBtdXN0IHRocm93IHRoZSBibGFtZSBmb3IgYWxsIG91ciBmYWlsdXJlcyBvbiBubyBvbmUgYnV0CiAgICAgICAgICAgICAgICAgICAgeW91cnNlbHZlcy48L3A+CiAgICAgICAgICAgIDwvZGl2MT4KICAgICAgICA8aGVhZCBjbGFzcz0idHJhbnNsYXRpb24iPkZvdXJ0aCBQaGlsaXBwaWM8L2hlYWQ+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIG1hdHRlcnMgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBhcmUgZGViYXRpbmcsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhcmUKICAgICAgICAgICAgICAgICAgICB0byBteSBtaW5kIHNvIGltcG9ydGFudCBhbmQgZXZlbiB2aXRhbCB0byB0aGUgU3RhdGUsIHRoYXQgSSB3aWxsIGVuZGVhdm91ciB0bwogICAgICAgICAgICAgICAgICAgIG9mZmVyIHlvdSB3aGF0IEkgY29uc2lkZXIgcHJvZml0YWJsZSBhZHZpY2Ugb24gdGhlIHN1YmplY3QuIFdoaWxlIHRoZSBmYXVsdHMKICAgICAgICAgICAgICAgICAgICB0aGF0IGhhdmUgcHJvZHVjZWQgdGhpcyB1bmhhcHB5IHN0YXRlIG9mIHRoaW5ncyBhcmUgbmVpdGhlciBmZXcgbm9yIHJlY2VudGx5CiAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0ZWQsIHRoZXJlIGlzIG5vdGhpbmcsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBtb3JlIHZleGluZyBhdCB0aGUgcHJlc2VudCB0aW1lIHRoYW4gdGhlIHdheSBpbiB3aGljaAogICAgICAgICAgICAgICAgICAgIHlvdSBkZXRhY2ggeW91ciB0aG91Z2h0cyBmcm9tIGFmZmFpcnMsIGFuZCBkaXNwbGF5IGFuIGludGVyZXN0IG9ubHkgc28gbG9uZyBhcwogICAgICAgICAgICAgICAgICAgIHlvdSBzaXQgaGVyZSBsaXN0ZW5pbmcsIG9yIHdoZW4gc29tZSBmcmVzaCBpdGVtIG9mIG5ld3MgYXJyaXZlczsgYWZ0ZXIgdGhhdCwKICAgICAgICAgICAgICAgICAgICBlYWNoIG1hbiBnb2VzIGhvbWUsIGFuZCBub3Qgb25seSBwYXlzIG5vIGF0dGVudGlvbiB0byBwdWJsaWMgYnVzaW5lc3MsIGJ1dCBkb2VzCiAgICAgICAgICAgICAgICAgICAgbm90IGV2ZW4gcmVjYWxsIGl0IHRvIG1pbmQuIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlIGV4dGVudCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByZWNrbGVzc25lc3MgYW5kIHJhcGFjaXR5IHRoYXQgUGhpbGlwIHNob3dzIGluIGhpcyBkZWFsaW5ncyB3aXRoIGFsbCBtZW4gaXMKICAgICAgICAgICAgICAgICAgICBpbmRlZWQgYXMgZ3JlYXQgYXMgaXQgaGFzIGJlZW4gZGVzY3JpYmVkIHRvIHlvdTsgYnV0IGhvdyBpbXBvc3NpYmxlIGl0IGlzIHRvCiAgICAgICAgICAgICAgICAgICAgc3RheSBoaW0gaW4gdGhpcyBjYXJlZXIgYnkgYXJndW1lbnQgYW5kIGRlY2xhbWF0aW9uLCBhc3N1cmVkbHkgbm8gb25lIGlzCiAgICAgICAgICAgICAgICAgICAgaWdub3JhbnQuIEZvciBpbmRlZWQsIGlmIG5vIHNpbmdsZSB0aGluZyBlbHNlIGNhbiB0ZWFjaCBhIG1hbiB0aGUgdHJ1dGggb2YgdGhhdCwKICAgICAgICAgICAgICAgICAgICBsZXQgaGltIHdlaWdoIHRoZSBmb2xsb3dpbmcgY29uc2lkZXJhdGlvbi4gV2hlbiB3ZSBoYXZlIGhhZCB0byBzcGVhayBpbiBkZWZlbmNlCiAgICAgICAgICAgICAgICAgICAgb2Ygb3VyIHJpZ2h0cywgd2UgaGF2ZSBuZXZlciB5ZXQgYmVlbiBkZWZlYXRlZCBvciBwcm92ZWQgaW4gdGhlIHdyb25nLCBidXQgaW4KICAgICAgICAgICAgICAgICAgICBldmVyeSBjYXNlIHdlIHZhbnF1aXNoIGFsbCBvdXIgb3Bwb25lbnRzIGFuZCBoYXZlIHRoZSBiZXN0IG9mIGl0IGluIGFyZ3VtZW50LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SXMsIHRoZW4sIFBoaWxpcCBhbnkgdGhlIHdvcnNlIG9mZiBmb3IKICAgICAgICAgICAgICAgICAgICB0aGF0LCBvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFueSB0aGUgYmV0dGVyPyBGYXIKICAgICAgICAgICAgICAgICAgICBmcm9tIGl0OyBmb3IgYWZ0ZXJ3YXJkcywgd2hlbiBoZSB0YWtlcyB1cCBhcm1zIGFuZCBtYXJjaGVzIHRvIGJhdHRsZSwgcmVhZHkgdG8KICAgICAgICAgICAgICAgICAgICByaXNrIGFsbCBoZSBoYXMsIGFuZCB3ZSBzaXQgaWRsZSwgYWxpa2UgdGhvc2Ugd2hvIGhhdmUgcGxlYWRlZCBvdXIgY2F1c2UgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGhhdmUgYmVlbiBsaXN0ZW5pbmcgdG8gdGhlbSwgdGhlbiwgbmF0dXJhbGx5IGVub3VnaCwgZGVlZHMgb3V0d2VpZ2gKICAgICAgICAgICAgICAgICAgICB3b3JkcywgYW5kIHRoZSB3b3JsZCBpbiBnZW5lcmFsIGdpdmVzIGhlZWQsIG5vdCB0byB3aGF0IHdlIG9uY2Ugc2FpZCB3aXRoCiAgICAgICAgICAgICAgICAgICAganVzdGljZSBvciBtaWdodCBub3cgc2F5LCBidXQgdG8gd2hhdCB3ZSBkby4gQW5kIHdoYXQgd2UgZG8gaXMgaW5zdWZmaWNpZW50IHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdCBhbnkgb2YgdGhlIHZpY3RpbXMgb2YgaW5qdXN0aWNlOyBpbiBmYWN0LCBJIG5lZWQgc2F5IG5vIG1vcmUgYWJvdXQgaXQuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIGFzIHRoZSBHcmVla3MgaW4gZXZlcnkgY2l0eSBhcmUKICAgICAgICAgICAgICAgICAgICBkaXZpZGVkIGludG8gdGhlc2UgdHdvIHBhcnRpZXPigJR0aGUgb25lIGRlc2lyaW5nIG5laXRoZXIgdG8gcnVsZSBvdGhlcnMKICAgICAgICAgICAgICAgICAgICBieSBmb3JjZSBub3IgdG8gYmUgc2xhdmVzIHRvIGFueSBtYW4sIGJ1dCB0byBlbmpveSBsaWJlcnR5IGFuZCBlcXVhbGl0eSB1bmRlciBhCiAgICAgICAgICAgICAgICAgICAgZnJlZSBjb25zdGl0dXRpb247IHRoZSBvdGhlciBlYWdlciB0byBydWxlIHRoZWlyIGZlbGxvdy1jb3VudHJ5bWVuLCBidXQgdG8gdGFrZQogICAgICAgICAgICAgICAgICAgIHRoZWlyIG9yZGVycyBmcm9tIHNvbWUgdGhpcmQgcGVyc29uLCB3aG8gdGhleSB0aGluayB3aWxsIGVuYWJsZSB0aGVtIHRvIGNvbXBhc3MKICAgICAgICAgICAgICAgICAgICB0aGVpciBlbmRz4oCUUGhpbGlwJ3MgZmFjdGlvbiwgdGhvc2Ugd2hvIGhhbmtlciBhZnRlciB0eXJhbm5pZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgb2xpZ2FyY2hpZXMsIGhhdmUgZXZlcnl3aGVyZSBnYWluZWQgdGhlIHN1cHJlbWFjeSwgYW5kIEkgZG91YnQgd2hldGhlciBvZiBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgc3RhdGVzIHRoZXJlIGlzIGFueSBzdGFibGUgZGVtb2NyYWN5IGxlZnQgZXhjZXB0IG91ciBvd24uIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgdGhpcyBzdXByZW1hY3kgb2YgdGhlIGNvbnN0aXR1dGlvbi1tb25nZXJzCiAgICAgICAgICAgICAgICAgICAgd2hvIHJlbHkgb24gUGhpbGlwJ3Mgc3VwcG9ydCBoYXMgYmVlbiBnYWluZWQgYnkgYWxsIHRoZSBkZXZpY2VzIHVzdWFsIGluCiAgICAgICAgICAgICAgICAgICAgcG9saXRpY3MsIGZpcnN0IGFuZCBmb3JlbW9zdCBieSBwcm92aWRpbmcgYSBkaXNwZW5zZXIgb2Ygd2VhbHRoIHRvIHN1Y2ggYXMgY292ZXQKICAgICAgICAgICAgICAgICAgICBpdCwgc2Vjb25kbHksIGFuZCBub3QgbGVzcyBlZmZlY3RpdmVseSwgYnkgaGF2aW5nIGF0IHRoZWlyIGJhY2sgYSBmb3JjZSBjYXBhYmxlCiAgICAgICAgICAgICAgICAgICAgb2YgY3J1c2hpbmcgdGhlaXIgb3Bwb25lbnRzIG9uIGFueSBvY2Nhc2lvbiB3aGVuIHRoZXkgbWF5IGNhbGwgdXBvbiBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3ZSwgQXRoZW5pYW5zLCBhcmUgbm90IG9ubHkgYmVoaW5kaGFuZAogICAgICAgICAgICAgICAgICAgIGluIHRoaXMgcmVzcGVjdCwgYnV0IHdlIGNhbm5vdCBldmVuIHJvdXNlIG91cnNlbHZlcyBmcm9tIHNsZWVwOyB3ZSBhcmUgbGlrZSBtZW4KICAgICAgICAgICAgICAgICAgICB3aG8gaGF2ZSBkcnVuayBtYW5kcmFnb3JhIG9yIHNvbWUgc3VjaCBkcnVnLiBIZW5jZSwgSSBiZWxpZXZl4oCUZm9yIEkKICAgICAgICAgICAgICAgICAgICBtdXN0IHNwZWFrIHRoZSB0cnV0aCBhcyBJIGNvbmNlaXZlIGl04oCUd2UgaGF2ZSBiZWVuIHNvIGRpc2NyZWRpdGVkIGFuZAogICAgICAgICAgICAgICAgICAgIGRlc3Bpc2VkIHRoYXQgb2YgdGhvc2Ugd2hvIGFyZSBpbnZvbHZlZCBpbiBhY3R1YWwgZGFuZ2VyIHNvbWUgZGlzcHV0ZSB3aXRoIHVzCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhlIHJpZ2h0IG9mIGxlYWRlcnNoaXAsIG90aGVycyBhYm91dCB0aGUgbWVldGluZy1wbGFjZSBmb3IgYSBjb25ncmVzcywKICAgICAgICAgICAgICAgICAgICBhbmQgc29tZSBoYXZlIG1hZGUgdXAgdGhlaXIgbWluZHMgdG8gZGVmZW5kIHRoZW1zZWx2ZXMgc2luZ2xlLWhhbmRlZCByYXRoZXIgdGhhbgogICAgICAgICAgICAgICAgICAgIHdpdGggdXMuIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoYXQgaXMKICAgICAgICAgICAgICAgICAgICBteSBvYmplY3QgaW4gdHJlYXRpbmcgdGhpcyBtYXR0ZXIgc28gZnVsbHk/IEZvciBJIHByb3Rlc3QgaW4gSGVhdmVuJ3MgbmFtZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgSSBoYXZlIG5vIGFtYml0aW9uIHRvIGluY3VyIHlvdXIgaG9zdGlsaXR5LiBJdCBpcyB0aGF0IGVhY2ggb25lIG9mIHlvdSwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIG1heSBrbm93IGFuZCByZWFsaXplIHRoaXPigJR0aGF0IGluIHN0YXRlIGFmZmFpcnMsIGFzIHdlbGwgYXMKICAgICAgICAgICAgICAgICAgICBpbiBwcml2YXRlIGxpZmUsIGRhaWx5IGluZGlmZmVyZW5jZSBhbmQgY2FyZWxlc3NuZXNzIGRvIG5vdCBtYWtlIHRoZWlyIHJlc3VsdAogICAgICAgICAgICAgICAgICAgIGZlbHQgYXQgb25jZSBvbiBlYWNoIG9jY2FzaW9uIHdoZW4gZHV0eSBpcyBuZWdsZWN0ZWQsIGJ1dCBjb21lIGhvbWUgdG8gdXMgd2hlbgogICAgICAgICAgICAgICAgICAgIHRoZSB0b3RhbCByZXN1bHQgb2Ygb3VyIHBvbGljeSBpcyBzZWVuLiA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+TG9vayBhdAogICAgICAgICAgICAgICAgICAgIFNlcnJpdW0gYW5kIERvcmlzY3VzOyBmb3IgdGhlc2Ugd2VyZSB0aGUgcGxhY2VzIHRoYXQgd2VyZSBkaXNyZWdhcmRlZAogICAgICAgICAgICAgICAgICAgIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBwZWFjZSwgYW5kIG1hbnkgb2YgeW91IHBlcmhhcHMgZG8gbm90IGV2ZW4ga25vdyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGV4aXN0ZW5jZS4gWWV0IGl0IHdhcyB5b3VyIG5lZ2xlY3QgYW5kIGFiYW5kb25tZW50IG9mIHRoZW0gdGhhdCBydWluZWQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiBhbmQgQ2Vyc29ibGVwdGVzLCB3aG8gd2FzCiAgICAgICAgICAgICAgICAgICAgeW91ciBhbGx5LiBBZ2FpbiwgUGhpbGlwLCBzZWVpbmcgdGhhdCB0aGVzZSB3ZXJlIG92ZXJsb29rZWQgYW5kIHdlcmUgcmVjZWl2aW5nCiAgICAgICAgICAgICAgICAgICAgbm8gaGVscCBmcm9tIHlvdSwgcHJvY2VlZGVkIHRvIHJhemUgUG9ydGhtdXMgdG8gdGhlIGdyb3VuZCBhbmQgZm91bmRlZCBhIHR5cmFubnkKICAgICAgICAgICAgICAgICAgICBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IG92ZXIgYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+IGFzIGEgbWVuYWNlIHRvIHlvdS4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkJlY2F1c2Ugd2UgbmVnbGVjdGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVnYXJhIiBrZXk9InBlcnNldXMsTWVnYXJhIj5NZWdhcmE8L3BsYWNlTmFtZT4gd2FzCiAgICAgICAgICAgICAgICAgICAgdmVyeSBuZWFybHkgY2FwdHVyZWQuIFlvdSBzaG93ZWQgbm8gY29uY2VybiBub3IgYW54aWV0eSBhYm91dCBhbnkgb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICBwcm9jZWVkaW5ncywgYW5kIGdhdmUgbm8gaW5kaWNhdGlvbiB0aGF0IHlvdSB3b3VsZCBub3QgYWxsb3cgUGhpbGlwIHRvIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgdGhlbTsgc28gaGUgYm91Z2h0IHVwIEFudHJvbmVzIGFuZCBzb29uIGFmdGVyd2FyZHMgZ290IE9yZXVzIHVuZGVyIGhpcyBjb250cm9sLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPkkgcGFzcyBvdmVyIG1hbnkgb3RoZXIgaW5zdGFuY2VzLCBzdWNoIGFzCiAgICAgICAgICAgICAgICAgICAgUGhlcmFlLCB0aGUgcmFpZCBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1icmFjaWEiIGtleT0icGVyc2V1cyxBbWJyYWNpYSI+QW1icmFjaWE8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hc3NhY3JlcyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVsaXMiIGtleT0icGVyc2V1cyxFbGlzIj5FbGlzPC9wbGFjZU5hbWU+LCBhbmQgY291bnRsZXNzCiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVycy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkZvciB0aGUgcGxhY2VzIG5hbWVkIGluIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoIHNlZSBlc3BlY2lhbGx5IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMTIiIHZhbGlkPSJ5ZXMiPkRlbS4gOS4xMjwvYmlibD4sIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMTUiIHZhbGlkPSJ5ZXMiPkRlbS4gOS4xNTwvYmlibD4sIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMTciIHZhbGlkPSJ5ZXMiPkRlbS4gOS4xNzwvYmlibD4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiA5LjI3IiB2YWxpZD0ieWVzIj5EZW0uIDkuMjc8L2JpYmw+LCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiA5LjMzIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA5LjMzPC9iaWJsPi48L25vdGU+IEkgaGF2ZSBnb25lIGludG8gdGhlc2UgZGV0YWlscywgbm90IHRvIGdpdmUgeW91IGEKICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSBjYXRhbG9ndWUgb2YgdGhlIHZpY3RpbXMgb2YgUGhpbGlwJ3Mgb3BwcmVzc2lvbiBhbmQgaW5qdXN0aWNlLCBidXQgdG8KICAgICAgICAgICAgICAgICAgICBtYWtlIGl0IGNsZWFyIHRvIHlvdSB0aGF0IGhlIHdpbGwgbmV2ZXIgZGVzaXN0IGZyb20gbW9sZXN0aW5nIGFsbCBvZiB1cyBhbmQKICAgICAgICAgICAgICAgICAgICBicmluZ2luZyB1cyB1bmRlciBoaXMgc3dheSwgdW5sZXNzIHNvbWVvbmUgcmVzdHJhaW5zIGhpbS4gPG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCB0aGVyZSBhcmUgc29tZQogICAgICAgICAgICAgICAgICAgIHdobywgd2l0aG91dCB3YWl0aW5nIHRvIGhlYXIgdGhlIHNwZWVjaGVzIG9uIHRoZXNlIHF1ZXN0aW9ucywgYXJlIGluIHRoZSBoYWJpdAogICAgICAgICAgICAgICAgICAgIG9mIGFza2luZyBhdCBvbmNlLCDigJxXaGF0IHRoZW4gb3VnaHQgd2UgdG8gZG8/4oCd4oCUbm90CiAgICAgICAgICAgICAgICAgICAgaW4gb3JkZXIgdG8gZG8gaXQsIHdoZW4gdGhleSBoYXZlIGhlYXJkIGl0LCBmb3IgaWYgc28sIHRoZXkgd291bGQgYmUgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBoZWxwZnVsIG9mIGFsbCBjaXRpemVucywgYnV0IHNpbXBseSB0byBnZXQgcmlkIG9mIHRoZSBzcGVha2VyLiBOZXZlcnRoZWxlc3MsIHlvdQogICAgICAgICAgICAgICAgICAgIG11c3QgYmUgdG9sZCB3aGF0IHlvdSBvdWdodCB0byBkby4gRmlyc3QsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB5b3UgbXVzdCBmaXggdGhpcyBmaXJtbHkgaW4geW91ciBtaW5kcywgdGhhdCBQaGlsaXAgaXMKICAgICAgICAgICAgICAgICAgICBhdCB3YXIgd2l0aCB1cyBhbmQgaGFzIGJyb2tlbiB0aGUgcGVhY2UsIGFuZCB0aGF0IGhlIGlzIGlsbC1kaXNwb3NlZCBhbmQgaG9zdGlsZQogICAgICAgICAgICAgICAgICAgIHRvIHRoZSB3aG9sZSBjaXR5IGFuZCB0byB0aGUgdmVyeSBzb2lsIG9uIHdoaWNoIHRoZSBjaXR5IHN0YW5kcywgYW5kLCBJIHdpbGwKICAgICAgICAgICAgICAgICAgICBhZGQsIHRvIHRoZSBnb2RzIHRoYXQgZHdlbGwgaW4gaXQ7IGFuZCBtYXkgdGhvc2Ugc2FtZSBnb2RzIGNvbXBsZXRlIGhpcyBydWluIQogICAgICAgICAgICAgICAgICAgIFRoZSBjaGllZiBvYmplY3QsIGhvd2V2ZXIsIG9mIGhpcyBhcm1zIGFuZCBoaXMgZGlwbG9tYWN5IGlzIG91ciBmcmVlCiAgICAgICAgICAgICAgICAgICAgY29uc3RpdHV0aW9uLCBhbmQgb24gbm90aGluZyBpbiB0aGUgd29ybGQgaXMgaGUgbW9yZSBiZW50IHRoYW4gb24gaXRzCiAgICAgICAgICAgICAgICAgICAgZGVzdHJ1Y3Rpb24uIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIGluIGEgd2F5IGluZXZpdGFibGUKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHNob3VsZCBub3cgYmUgYWN0aW5nIHRodXMuIEZvciBvYnNlcnZlISBIZSB3YW50cyB0byBydWxlLCBhbmQgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgbWFkZSB1cCBoaXMgbWluZCB0aGF0IHlvdSwgYW5kIHlvdSBvbmx5LCBiYXIgdGhlIHdheS4gSGUgaGFzIGxvbmcgaW5qdXJlZCB5b3U7CiAgICAgICAgICAgICAgICAgICAgb2Ygbm90aGluZyBpcyBoZSBtb3JlIGNvbnNjaW91cyB0aGFuIG9mIHRoYXQuIEZvciBpdCBpcyBieSBob2xkaW5nIHRoZSBjaXRpZXMKICAgICAgICAgICAgICAgICAgICB0aGF0IGFyZSByZWFsbHkgeW91cnMgdGhhdCBoZSByZXRhaW5zIHNhZmUgcG9zc2Vzc2lvbiBvZiBhbGwgdGhlIHJlc3Q7CiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGlmIGhlIGdhdmUgdXAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDQ4MTQiIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+LCBldmVuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gd291bGQgYmUgbm8gc2FmZSBwbGFjZSBmb3IgaGltLiBIZSBrbm93cywgdGhlbiwgdGhlc2UKICAgICAgICAgICAgICAgICAgICB0d28gZmFjdHPigJR0aGF0IGhlIGlzIGludHJpZ3VpbmcgYWdhaW5zdCB5b3UgYW5kIHRoYXQgeW91IGFyZSBhd2FyZSBvZgogICAgICAgICAgICAgICAgICAgIGl0LiBBc3N1bWluZyB0aGF0IHlvdSBhcmUgaW50ZWxsaWdlbnQsIGhlIGNvbmNsdWRlcyB0aGF0IHlvdSBoYXRlIGhpbS4gQmVzaWRlcwogICAgICAgICAgICAgICAgICAgIHRoZXNlIHdlaWdodHkgY29uc2lkZXJhdGlvbnMsIGhlIGtub3dzIGZvciBjZXJ0YWluIHRoYXQgZXZlbiBpZiBoZSBtYXN0ZXJzIGFsbAogICAgICAgICAgICAgICAgICAgIGVsc2UsIGhpcyBwb3dlciB3aWxsIGJlIHByZWNhcmlvdXMgYXMgbG9uZyBhcyB5b3UgcmVtYWluIGEgZGVtb2NyYWN5LCBidXQgaWYKICAgICAgICAgICAgICAgICAgICBldmVyIGhlIG1lZXRzIHdpdGggc29tZSBtaXNjaGFuY2Ug77yIYW5kIHRoZXJlIGFyZSBtYW55IHRvIHdoaWNoIG1hbmtpbmQKICAgICAgICAgICAgICAgICAgICBpcyBsaWFibGXvvIksIGFsbCB0aGUgZm9yY2VzIHRoYXQgYXJlIG5vdyB1bmRlciByZXN0cmFpbnQgd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIGF0dHJhY3RlZCB0byB5b3VyIHNpZGUuIDxtaWxlc3RvbmUgbj0iMTQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG5hdHVyZSBoYXMgbm90CiAgICAgICAgICAgICAgICAgICAgZXF1aXBwZWQgeW91IHRvIHNlZWsgYWdncmFuZGl6ZW1lbnQgYW5kIHNlY3VyZSBlbXBpcmUsIGJ1dCB5b3UgYXJlIGNsZXZlciBhdAogICAgICAgICAgICAgICAgICAgIHRod2FydGluZyBhbm90aGVyJ3MgZGVzaWducyBhbmQgd3Jlc3RpbmcgZnJvbSBoaW0gaGlzIGdhaW5zLCBhbmQgcXVpY2sgdG8KICAgICAgICAgICAgICAgICAgICBjb25mb3VuZCB1dHRlcmx5IHRoZSBwbG90cyBvZiB0aGUgYW1iaXRpb3VzIGFuZCB2aW5kaWNhdGUgdGhlIGZyZWVkb20gb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgbWFua2luZC4gVGhlcmVmb3JlIGhlIGRvZXMgbm90IHdhbnQgdG8gaGF2ZSB0aGUgQXRoZW5pYW4gdHJhZGl0aW9uIG9mIGxpYmVydHkKICAgICAgICAgICAgICAgICAgICB3YXRjaGluZyB0byBzZWl6ZSBldmVyeSBjaGFuY2UgYWdhaW5zdCBoaW1zZWxmOyBub3IgaXMgaGlzIHJlYXNvbmluZyBoZXJlIGVpdGhlcgogICAgICAgICAgICAgICAgICAgIGZhdWx0eSBvciBpZGxlLiA8bWlsZXN0b25lIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIHRoZW4sIGlzIHRoZSBmaXJzdCB0aGluZwogICAgICAgICAgICAgICAgICAgIG5lZWRmdWwsIHRvIHJlY29nbml6ZSBpbiBQaGlsaXAgdGhlIGludmV0ZXJhdGUgZW5lbXkgb2YgY29uc3RpdHV0aW9uYWwKICAgICAgICAgICAgICAgICAgICBnb3Zlcm5tZW50IGFuZCBkZW1vY3JhY3k7IGFuZCB5b3VyIHNlY29uZCBuZWVkIGlzIHRvIGNvbnZpbmNlIHlvdXJzZWx2ZXMgdGhhdAogICAgICAgICAgICAgICAgICAgIGFsbCBoaXMgYWN0aXZpdHkgYW5kIGFsbCBoaXMgb3JnYW5pemF0aW9uIGlzIHByZXBhcmluZyB0aGUgd2F5IGZvciBhbiBhdHRhY2sgb24KICAgICAgICAgICAgICAgICAgICBvdXIgY2l0eS4gRm9yIG5vbmUgb2YgeW91IGlzIHNvIHNpbXBsZSBhcyB0byBiZWxpZXZlIHRoYXQgdGhvdWdoIFBoaWxpcCBjb3ZldHMKICAgICAgICAgICAgICAgICAgICB0aGVzZSB3cmV0Y2hlZCBvYmplY3RzIGluIFRocmFjZeKAlGZvciB3aGF0IGVsc2UgY2FuIG9uZSBjYWxsIERyb25naWx1cwogICAgICAgICAgICAgICAgICAgIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDcxMCIga2V5PSJ0Z24sNzAxMDcxMCI+Q2FieWxlPC9wbGFjZU5hbWU+IGFuZCBNYXN0aXJhIGFuZCB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBwbGFjZXMgaGUgaXMgc2FpZCB0byBiZSBub3cgaG9sZGluZyA/4oCUYW5kIHRob3VnaCBoZSBlbmR1cmVzIHRvaWwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2ludGVyIHN0b3JtcyBhbmQgZGVhZGx5IHBlcmlsIGZvciB0aGUgcHJpdmlsZWdlIG9mIHRha2luZyB0aGVtLCA8bWlsZXN0b25lIG49IjE2IiB1bml0PSJzZWN0aW9uIiAvPnlldCBoZSBkb2VzIG5vdCBjb3ZldCB0aGUgQXRoZW5pYW4gaGFyYm91cnMgYW5kCiAgICAgICAgICAgICAgICAgICAgZG9ja3lhcmRzIGFuZCB3YXItZ2FsbGV5cyBhbmQgdGhlIHBsYWNlIGl0c2VsZiBhbmQgdGhlIGdsb3J5IG9mIGl04oCUYW5kCiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgbWF5IFBoaWxpcCBvciBhbnkgb3RoZXIgbWFuIG1ha2UgaGltc2VsZiBtYXN0ZXIgb2YgdGhlc2UgYnkgdGhlIGNvbnF1ZXN0CiAgICAgICAgICAgICAgICAgICAgb2Ygb3VyIGNpdHkh4oCUYnV0IHdpbGwgYWxsb3cgeW91IHRvIHJldGFpbiB0aGVtLCB3aGlsZSBoZSB3aW50ZXJzIGluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBwdXJnYXRvcnkgZm9yIHRoZSBzYWtlIG9mIHRoZSByeWUgYW5kIG1pbGxldCBvZiB0aGUgVGhyYWNpYW4gc3RvcmUtcGl0cy4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBub3Qgc28sIGJ1dCBpdCBpcyB0byB3aW4gdGhlc2UKICAgICAgICAgICAgICAgICAgICBwcml6ZXMgdGhhdCBoZSBkZXZvdGVzIGhpcyBhY3Rpdml0aWVzIHRvIGFsbCB0aG9zZSBvdGhlciBvYmplY3RzLiA8bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXJlZm9yZSBlYWNoIG11c3Qga25vdyBhbmQgZmVlbCBpbiBoaXMgb3duIG1pbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggb2YgdGhpcywgYnV0IHlvdSBtdXN0IG5vdCwgb2YgY291cnNlLCBjYWxsIGZvciBhIGRlY2xhcmF0aW9uIG9mIHdhciBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIHN0YXRlc21hbiB3aG8gaXMgdHJ5aW5nLCBpbiBhbGwgaG9uZXN0eSwgdG8gZ2l2ZSB5b3UgdGhlIGJlc3QgYWR2aWNlOyBmb3IKICAgICAgICAgICAgICAgICAgICB0aGF0IHdvdWxkIGJlIHRoZSBhY3Qgb2YgbWVuIHdobyB3YW50IHRvIGZpbmQgc29tZW9uZSB0byBmaWdodCB3aXRoLCBub3Qgb2YgbWVuCiAgICAgICAgICAgICAgICAgICAgd2hvIHNlZWsgdGhlIGludGVyZXN0cyBvZiB0aGVpciBzdGF0ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRvCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2Ugd2FyIG9uIFBoaWxpcCB3b3VsZCBiZSBkYW5nZXJvdXMgdG8gdGhlIHNwZWFrZXIsIGFzIGV4cGxhaW5lZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWNoIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDguNjgiIHZhbGlkPSJ5ZXMiPkRlbS4gOC42ODwvYmlibD4sIGFuZCB1bm5lY2Vzc2FyeSwgYXMgUGhpbGlwIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGFscmVhZHkgYXQgd2FyIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgY29uc2lkZXIuIElmIGZvciBoaXMgZmlyc3QgdmlvbGF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHBlYWNlLCBvciBoaXMgc2Vjb25kIG9yIHRoaXJk4oCUZm9yIHRoZXJlIHdhcyBhIGxvbmcgc2VyaWVzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbeKAlHNvbWVvbmUgaGFkIHByb3Bvc2VkIGEgZGVjbGFyYXRpb24gb2Ygd2FyIGFnYWluc3QgaGltLCBhbmQgaWYKICAgICAgICAgICAgICAgICAgICBQaGlsaXAsIGp1c3QgYXMgaGUgaXMgZG9pbmcgbm93IHdoZW4gbm8gb25lIHByb3Bvc2VzIHN1Y2ggYSBkZWNsYXJhdGlvbiwgaGFkCiAgICAgICAgICAgICAgICAgICAgZ29uZSB0byB0aGUgaGVscCBvZiB0aGUgQ2FyZGlhbnMsIHdvdWxkIG5vdCB0aGUgcHJvcG9zZXIgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIHN1cHByZXNzZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgd29yZCB1c2VkIGlzIHN0cm9uZywgYnV0CiAgICAgICAgICAgICAgICAgICAgICAgIHB1cnBvc2VseSB2YWd1ZS4gSGUgd291bGQgaGF2ZSBpbmN1cnJlZCB0aGUgaW5ldml0YWJsZTxmb3JlaWduIGxhbmc9ImdyZWVrIj7Os8+BzrHPhs69XCDPgM6xz4HOsXbhvbnOvM+Jzr08L2ZvcmVpZ24+Ljwvbm90ZT4gYW5kIGJsYW1lZCBieSBldmVyeWJvZHkgYXMgdGhlIHJlYWwKICAgICAgICAgICAgICAgICAgICBhdXRob3Igb2YgUGhpbGlwJ3MgZXhwZWRpdGlvbj8gPG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGxvb2sgYWJvdXQgZm9yIGEgc2NhcGVnb2F0IGZvciBQaGlsaXAncyBzaW5zLCBzb21lb25lIHdob20geW91IGNhbiB0aHJvdyBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgaGlyZWxpbmdzIHRvIHJlbmQgbGltYiBmcm9tIGxpbWIuIERvIG5vdCB2b3RlIGZvciB3YXIgYW5kIHRoZW4gZmFsbCB0byBkaXNwdXRpbmcKICAgICAgICAgICAgICAgICAgICBhbW9uZyB5b3Vyc2VsdmVzIHdoZXRoZXIgeW91IG91Z2h0IG9yIG91Z2h0IG5vdCB0byBoYXZlIGRvbmUgc28sIGJ1dCBpbWl0YXRlIGhpcwogICAgICAgICAgICAgICAgICAgIG1ldGhvZHMgb2Ygd2FyZmFyZSwgc3VwcGx5aW5nIHRob3NlIHdobyBhcmUgbm93IHJlc2lzdGluZyBoaW0gd2l0aCBtb25leSBhbmQKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBlbHNlIHRoZXkgbmVlZCwgYW5kIHJhaXNpbmcgYSB3YXItZnVuZCB5b3Vyc2VsdmVzLCBBdGhlbmlhbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIHByb3ZpZGluZyBhbiBhcm15LCBzd2lmdC1zYWlsaW5nIGdhbGxleXMsIGhvcnNlcywgY2F2YWxyeS10cmFuc3BvcnRzLCBhbmQKICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5nIHRoYXQgd2FyIHJlcXVpcmVzLiA8bWlsZXN0b25lIG49IjIwIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhdCBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgb3VyIHN5c3RlbSBpcyBhIG1vY2tlcnksIGFuZCwgYnkgSGVhdmVuLCBJIGRvIG5vdCBiZWxpZXZlIHRoYXQgZXZlbiBQaGlsaXAKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHdvdWxkIHByYXkgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgYWN0IG90aGVyd2lzZSB0aGFuIHNoZSBpcyBhY3RpbmcuIFlvdSBhcmUgYmVoaW5kIHlvdXIgdGltZSBhbmQgd2FzdGUgeW91ciBtb25leTsKICAgICAgICAgICAgICAgICAgICB5b3UgbG9vayByb3VuZCBmb3Igc29tZW9uZSB0byBtYW5hZ2UgdGhlIGJ1c2luZXNzIGFuZCB0aGVuIHF1YXJyZWwgd2l0aCBoaW07IHlvdQogICAgICAgICAgICAgICAgICAgIHRocm93IHRoZSBibGFtZSBvbiBvbmUgYW5vdGhlci4gSSB3aWxsIGV4cGxhaW4gaG93IHRoaXMgY29tZXMgYWJvdXQgYW5kIHdpbGwKICAgICAgICAgICAgICAgICAgICB0ZWxsIHlvdSBob3cgdG8gc3RvcCBpdC4gPG1pbGVzdG9uZSBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5OZXZlciB5ZXQsIEF0aGVuaWFucywKICAgICAgICAgICAgICAgICAgICBoYXZlIHlvdSBpbnN0aXR1dGVkIG9yIG9yZ2FuaXplZCBhIHNpbmdsZSBwbGFuIG9mIGFjdGlvbiBwcm9wZXJseSBhdCB0aGUgc3RhcnQsCiAgICAgICAgICAgICAgICAgICAgYnV0IHlvdSBhbHdheXMgZm9sbG93IGluIHRoZSB0cmFjayBvZiBlYWNoIGV2ZW50LCBhbmQgdGhlbiwgd2hlbiB5b3UgZmluZAogICAgICAgICAgICAgICAgICAgIHlvdXJzZWx2ZXMgdG9vIGxhdGUsIHlvdSBnaXZlIHVwIHRoZSBwdXJzdWl0OyA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJzZWN0aW9uIiAvPndoZW4gdGhlIG5leHQgZXZlbnQgb2NjdXJzLCB5b3UgYXJlIGFnYWluIGluIGEgYnVzdGxlIG9mIHByZXBhcmF0aW9uLiBCdXQgdGhhdAogICAgICAgICAgICAgICAgICAgIGlzIG5vdCB0aGUgd2F5LiBJZiB5b3UgdHJ1c3QgdG8gb2NjYXNpb25hbCBsZXZpZXMsIHlvdSBjYW4gbmV2ZXIgZ2FpbiBhbnkgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGVzc2VudGlhbCBvYmplY3RzOyBidXQgeW91IG11c3QgZmlyc3QgcmFpc2UgYSBmb3JjZSBhbmQgcHJvdmlkZSBmb3IgaXRzCiAgICAgICAgICAgICAgICAgICAgbWFpbnRlbmFuY2UsIGFuZCBhcHBvaW50IHBheW1hc3RlcnMgYW5kIGNsZXJrcywgYW5kIGFycmFuZ2UgdGhhdCB0aGVyZSBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgIHRoZSBzdHJpY3Rlc3Qgd2F0Y2gga2VwdCBvdmVyIHlvdXIgZXhwZW5kaXR1cmUsIGFuZCBhZnRlcndhcmRzIHlvdSBtdXN0IGRlbWFuZAogICAgICAgICAgICAgICAgICAgIGZyb20geW91ciBwYXltYXN0ZXJzIGFuIGFjY291bnQgb2YgdGhlaXIgbW9uZXlzLCBhbmQgZnJvbSB0aGUgZ2VuZXJhbCBhbiBhY2NvdW50CiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGNhbXBhaWduLCBhbmQgeW91IG11c3QgbGVhdmUgdGhlIGdlbmVyYWwgbm8gZXhjdXNlIGZvciBzYWlsaW5nIGVsc2V3aGVyZQogICAgICAgICAgICAgICAgICAgIG9yIGVuZ2FnaW5nIGluIGFueSBvdGhlciBidXNpbmVzcy4gPG1pbGVzdG9uZSBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5JZiB5b3UgZG8KICAgICAgICAgICAgICAgICAgICB0aGlzLCBhbmQgeW91IGFyZSByZWFsbHkgaW4gZWFybmVzdCBhYm91dCBpdCwgeW91IHdpbGwgZWl0aGVyIGNvbXBlbCBQaGlsaXAgdG8KICAgICAgICAgICAgICAgICAgICBrZWVwIHRoZSBwZWFjZSBmYWlybHkgYW5kIHRvIHN0YXkgaW4gb25lIHBsYWNlLCBvciB5b3Ugd2lsbCBmaWdodCBoaW0gb24gZXF1YWwKICAgICAgICAgICAgICAgICAgICB0ZXJtczsgYW5kIHBlcmhhcHPigJRwZXJoYXBzLCBqdXN0IGFzIHlvdSBhcmUgbm93IGlucXVpcmluZyB3aGF0IFBoaWxpcAogICAgICAgICAgICAgICAgICAgIGlzIGRvaW5nIGFuZCB3aGVyZSBoZSBpcyBtYXJjaGluZywgc28gaGUgbWF5IGJlIGFueGlvdXMgdG8ga25vdyB3aGVyZSB0aGUKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiBmb3JjZSBpcyBib3VuZCBmb3IsIGFuZCBpbiB3aGF0IHF1YXJ0ZXIgaXQgd2lsbCBhcHBlYXIuIDxtaWxlc3RvbmUgbj0iMjQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgaWYgYW55b25lIHRoaW5rcwogICAgICAgICAgICAgICAgICAgIHRoYXQgYWxsIHRoaXMgbWVhbnMgZ3JlYXQgZXhwZW5zZSBhbmQgbXVjaCB0b2lsIGFuZCB3b3JyeSwgaGUgaXMgcXVpdGUgY29ycmVjdCwKICAgICAgICAgICAgICAgICAgICBidXQgaWYgaGUgcmVja29ucyB1cCB3aGF0IHdpbGwgaGVyZWFmdGVyIGJlIHRoZSByZXN1bHQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBpZiBzaGUgcmVmdXNlcyB0byBhY3QsIGhlIHdpbGwKICAgICAgICAgICAgICAgICAgICBjb25jbHVkZSB0aGF0IGl0IGlzIHRvIG91ciBpbnRlcmVzdCB0byBwZXJmb3JtIG91ciBkdXR5IHdpbGxpbmdseS4gRm9yIGlmIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhlIGd1YXJhbnRlZSBvZiBzb21lIGdvZCwgc2luY2Ugbm8gbWVyZSBtb3J0YWwgY291bGQgYmUgYSBzYXRpc2ZhY3RvcnkKICAgICAgICAgICAgICAgICAgICBzdXJldHkgZm9yIHN1Y2ggYW4gZXZlbnQsIHRoYXQgaWYgeW91IHJlbWFpbiBpbmFjdGl2ZSBhbmQgYWJhbmRvbiBldmVyeXRoaW5nLAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCB3aWxsIG5vdCBpbiB0aGUgZW5kIG1hcmNoIGFnYWluc3QgeW91cnNlbHZlcywgPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5ieSBaZXVzIGFuZCBhbGwgdGhlIG90aGVyIGdvZHMsIGl0IHdvdWxkIGJlIGRpc2dyYWNlZnVsIGFuZCB1bndvcnRoeQogICAgICAgICAgICAgICAgICAgIG9mIHlvdSBhbmQgb2YgdGhlIHJlc291cmNlcyBvZiB5b3VyIGNpdHkgYW5kIHRoZSByZWNvcmQgb2YgeW91ciBhbmNlc3RvcnMgdG8KICAgICAgICAgICAgICAgICAgICBhYmFuZG9uIGFsbCB0aGUgb3RoZXIgR3JlZWtzIHRvIGVuc2xhdmVtZW50IGZvciB0aGUgc2FrZSBvZiB5b3VyIG93biBlYXNlLCBhbmQgSQogICAgICAgICAgICAgICAgICAgIGZvciBvbmUgd291bGQgcmF0aGVyIGRpZSB0aGFuIGJlIGd1aWx0eSBvZiBwcm9wb3Npbmcgc3VjaCBhIHBvbGljeS4gPG1pbGVzdG9uZSBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhlIHNhbWUsIGlmIHNvbWVvbmUgZG9lcyBwcm9wb3NlIGl0IGFuZCB3aW5zCiAgICAgICAgICAgICAgICAgICAgeW91ciBhc3NlbnQsIHNvIGJlIGl0OyBvZmZlciBubyByZXNpc3RhbmNlLCBzYWNyaWZpY2UgZXZlcnl0aGluZy4gQnV0IGlmIG5vIG9uZQogICAgICAgICAgICAgICAgICAgIGFwcHJvdmVzIG9mIHRoaXMsIGFuZCBpZiBvbiB0aGUgY29udHJhcnkgd2UgYWxsIG9mIHVzIGZvcmVzZWUgdGhhdCB0aGUgbW9yZSB3ZQogICAgICAgICAgICAgICAgICAgIGFsbG93IGhpbSB0byBleHRlbmQgaGlzIHBvd2VyLCB0aGUgc3Ryb25nZXIgYW5kIG1vcmUgZm9ybWlkYWJsZSB3ZSBzaGFsbCBmaW5kCiAgICAgICAgICAgICAgICAgICAgaGltIGluIHdhciwgd2hhdCBlc2NhcGUgaXMgb3BlbiB0byB1cywgb3Igd2h5IGRvIHdlIGRlbGF5PyBXaGVuLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgc2hhbGwgd2UgY29uc2VudCB0byBkbwogICAgICAgICAgICAgICAgICAgIG91ciBkdXR5PyA8bWlsZXN0b25lIG49IjI3IiB1bml0PSJzZWN0aW9uIiAvPuKAnFdoZW5ldmVyIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5LOKAnSB5b3Ugd2lsbCBzYXkuIEJ1dCB3aGF0IGFueSBmcmVlIG1hbiB3b3VsZCBjYWxsIG5lY2Vzc2l0eQogICAgICAgICAgICAgICAgICAgIGlzIG5vdCBtZXJlbHkgcHJlc2VudCBub3csIGJ1dCBpcyBsb25nIGFnbyBwYXN0LCBhbmQgZnJvbSB0aGUgbmVjZXNzaXR5IHRoYXQKICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW5zIGEgc2xhdmUgd2UgbXVzdCBzdXJlbHkgcHJheSB0byBiZSBkZWxpdmVyZWQuIERvIHlvdSBhc2sgdGhlCiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZT8gVGhlIHN0cm9uZ2VzdCBuZWNlc3NpdHkgdGhhdCBhIGZyZWUgbWFuIGZlZWxzIGlzIHNoYW1lIGZvciBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24sIGFuZCBJIGtub3cgbm90IGlmIHdlIGNvdWxkIG5hbWUgYSBzdHJvbmdlcjsgYnV0IGZvciBhIHNsYXZlIG5lY2Vzc2l0eQogICAgICAgICAgICAgICAgICAgIG1lYW5zIHN0cmlwZXMgYW5kIGJvZGlseSBvdXRyYWdlLCB1bmZpdCB0byBuYW1lIGhlcmUsIGZyb20gd2hpY2ggSGVhdmVuIGRlZmVuZAogICAgICAgICAgICAgICAgICAgIHVzISA8bWlsZXN0b25lIG49IjI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2l0aCByZWdhcmQgdG8gc3VjaAogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBzZXJ2aWNlcyBhcyBpdCBpcyB0aGUgZHV0eSBvZiBldmVyeW9uZSB0byBkaXNjaGFyZ2UsIGJvdGggd2l0aCBwZXJzb24gYW5kCiAgICAgICAgICAgICAgICAgICAgd2l0aCBwcm9wZXJ0eSwgdGhhdCB0aGVyZSBzaG91bGQgYmUgYSBkaXNwb3NpdGlvbiB0byBhdm9pZCB0aGVtIGlzIG5vdAogICAgICAgICAgICAgICAgICAgIHJpZ2h04oCUaW5kZWVkLCBmYXIgZnJvbSBpdOKAlGJ1dCBzdGlsbCBpdCBkb2VzIGFkbWl0IG9mIHNvbWUKICAgICAgICAgICAgICAgICAgICBleGN1c2Ugbm90d2l0aHN0YW5kaW5nOyBidXQgdG8gcmVmdXNlIGV2ZW4gdG8gbGlzdGVuIHRvIGFsbCB0aGF0IHlvdSBvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIGhlYXIgYW5kIGFsbCB0aGF0IHlvdSBhcmUgYm91bmQgdG8gZGVjaWRlIGRlc2VydmVzLCBhdCBzdWNoIGEgdGltZSBhcyB0aGlzLAogICAgICAgICAgICAgICAgICAgIGFic29sdXRlIGNvbmRlbW5hdGlvbi4gPG1pbGVzdG9uZSBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3VyIGhhYml0LCB0aGVuLCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCB0byBsaXN0ZW4gdW50aWwsIGFzIG5vdywgdGhlIGV2ZW50cyB0aGVtc2VsdmVzIGFyZSB1cG9uIHlvdSwgYW5kIG5vdCB0bwogICAgICAgICAgICAgICAgICAgIGRpc2N1c3MgYW55IHF1ZXN0aW9uIGF0IHlvdXIgbGVpc3VyZSBidXQgd2hlbmV2ZXIgUGhpbGlwIG1ha2VzIGhpcyBwcmVwYXJhdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgeW91IG5lZ2xlY3QgdGhlIGNoYW5jZSBvZiBkb2luZyB0aGUgc2FtZSwgYW5kIHlvdSBhcmUgdG9vIHJlbWlzcyB0byBtYWtlCiAgICAgICAgICAgICAgICAgICAgY291bnRlci1wcmVwYXJhdGlvbnM7IGFuZCBpZiBhbnlvbmUgc3BlYWtzIG91dCwgeW91IGRyaXZlIGhpbSBmcm9tIHRoZSBwbGF0Zm9ybSwKICAgICAgICAgICAgICAgICAgICBidXQgd2hlbiB5b3UgbGVhcm4gb2YgdGhlIGxvc3Mgb2YgdGhpcyBwbGFjZSBvciB0aGUgc2llZ2Ugb2YgdGhhdCwgdGhlbiB5b3UgcGF5CiAgICAgICAgICAgICAgICAgICAgYXR0ZW50aW9uIGFuZCBiZWdpbiB0byBwcmVwYXJlLiA8bWlsZXN0b25lIG49IjMwIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgdGltZQogICAgICAgICAgICAgICAgICAgIHRvIGhhdmUgbGlzdGVuZWQgYW5kIG1hZGUgeW91ciBkZWNpc2lvbiB3YXMganVzdCB0aGVuLCB3aGVuIHlvdSB3b3VsZCBub3QgZG8gaXQ7CiAgICAgICAgICAgICAgICAgICAgbm93LCB3aGVuIHlvdSBhcmUgbGlzdGVuaW5nLCBpcyB0aGUgdGltZSB0byBhY3QgYW5kIHB1dCB5b3VyIHByZXBhcmF0aW9ucyB0bwogICAgICAgICAgICAgICAgICAgIHVzZS4gVGhlcmVmb3JlIGluIGNvbnNlcXVlbmNlIG9mIHRoZXNlIGJhZCBoYWJpdHMgeW91IGFsb25lIHJldmVyc2UgdGhlIGdlbmVyYWwKICAgICAgICAgICAgICAgICAgICBwcmFjdGljZSBvZiBtYW5raW5kOyBmb3Igb3RoZXIgcGVvcGxlIGRlbGliZXJhdGUgYmVmb3JlIHRoZSBldmVudCwgYnV0IHlvdSBhZnRlcgogICAgICAgICAgICAgICAgICAgIHRoZSBldmVudC4gPG1pbGVzdG9uZSBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZQogICAgICAgICAgICAgICAgICAgIG9uZSB0aGluZyB0aGF0IHJlbWFpbnMgYW5kIHRoYXQgb3VnaHQgdG8gaGF2ZSBiZWVuIGRvbmUgbG9uZyBhZ28sIHRob3VnaCBldmVuCiAgICAgICAgICAgICAgICAgICAgbm93IHRoZSBjaGFuY2UgaXMgbm90IGxvc3QsIEkgd2lsbCB0ZWxsIHlvdS4gVGhlcmUgaXMgbm90aGluZyB0aGF0IHRoZSBTdGF0ZQogICAgICAgICAgICAgICAgICAgIG5lZWRzIHNvIG11Y2ggZm9yIHRoZSBjb21pbmcgc3RydWdnbGUgYXMgbW9uZXkuIFNvbWUgc3Ryb2tlcyBvZiBnb29kIGZvcnR1bmUgd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIGVuam95ZWQgd2l0aG91dCBvdXIgZGVzaWduLCBhbmQgaWYgd2UgbWFrZSB0aGUgcmlnaHQgdXNlIG9mIHRoZW0sIHRoZQogICAgICAgICAgICAgICAgICAgIGRlc2lyZWQgcmVzdWx0cyBtYXkgcGVyaGFwcyBmb2xsb3cuIEZvciBmaXJzdCwgdGhlIG1lbiB3aG9tIHRoZSBraW5nIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4gdHJ1c3RzIGFuZCBoYXMgYWNjZXB0ZWQgYXMKICAgICAgICAgICAgICAgICAgICBoaXMg4oCcYmVuZWZhY3RvcnMs4oCdPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgVGhyYWNpYW5zLCB0aHVzIGhvbm9yZWQgZm9yIHRoZWlyIHNlcnZpY2VzIHRvIERhcml1cyBpbiBoaXMgU2N5dGhpYW4KICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWRpdGlvbi4gRm9yIHRoZSB0aXRsZSBjZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhkdC4gOC44NSIgdmFsaWQ9InllcyI+SGR0LiA4Ljg1PC9iaWJsPgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJncmVlayI+zr/hvLEgzrTigJkgzrXhvZDPgc6z4b2zz4TOsc65IM6yzrHPg865zrvhvbPOv8+CIOG9gM+Bzr/Pg+G9sc6zzrPOsc65IM66zrHOu+G9s86/zr3PhM6xzrkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIM6gzrXPgc+DzrnPg8+E4b23PC9mb3JlaWduPi4gU3VjaCB3YXMgdGhlIE1vcmRlY2FpLCDigJx0aGUgbWFuIHdob20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmcgZGVsaWdodGVkIHRvIGhvbm9yLOKAnTx0aXRsZT5Fc3RoZXI8L3RpdGxlPiwgYy4gNi48L25vdGU+IGhhdGUKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgYW5kIGFyZSBhdCB3YXIgd2l0aCBoaW0uIDxtaWxlc3RvbmUgbj0iMzIiIHVuaXQ9InNlY3Rpb24iIC8+U2Vjb25kbHksIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBhZ2VudDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SWYgd2UgbWF5IHRydXN0IFVscGlhbiwgdGhpcyB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgSGVybWVpYXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGFybmV1cyIga2V5PSJwZXJzZXVzLEF0YXJuZXVzIj5BdGFybmV1czwvcGxhY2VOYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZyaWVuZCBvZiBBcmlzdG90bGUsIHNlaXplZCBieSB0aGUgUmhvZGlhbiBNZW50b3IgYW5kIGNhcnJpZWQgY2FwdGl2ZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAga2luZyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIga2V5PSJ0Z24sNzAwMDIzMSI+UGVyc2lhPC9wbGFjZU5hbWU+LiBTZWUgR3JvdGUsIGMuCiAgICAgICAgICAgICAgICAgICAgICAgIDkwLjwvbm90ZT4gd2hvIHdhcyBwcml2eSB0byBhbGwgUGhpbGlwJ3Mgc2NoZW1lcyBhZ2FpbnN0IHRoZSBraW5nIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4gaGFzIGJlZW4ga2lkbmFwcGVkLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAga2luZyB3aWxsIGhlYXIgb2YgYWxsIHRoZXNlIHBsb3RzLCBub3QgYXMgdGhlIGNvbXBsYWludCBvZiBBdGhlbmlhbnMsIHdob20gaGUKICAgICAgICAgICAgICAgICAgICBtaWdodCBzdXNwZWN0IG9mIHNwZWFraW5nIGZvciBvdXIgb3duIHByaXZhdGUgYWR2YW50YWdlLCBidXQgZnJvbSB0aGUgbGlwcyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB2ZXJ5IG1hbiB3aG8gcGxhbm5lZCBhbmQgY2FycmllZCB0aGVtIG91dCwgc28gdGhhdCB0aGVpciBjcmVkaXQgaXMKICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2hlZCwgYW5kIHRoZSBvbmx5IHN1Z2dlc3Rpb24gZm9yIG91ciBhbWJhc3NhZG9ycyB0byBtYWtlIGlzIG9uZSB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZSBraW5nIHdvdWxkIGJlIGRlbGlnaHRlZCB0byBoZWFyLCA8bWlsZXN0b25lIG49IjMzIiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFuIHdobyBpcyB3cm9uZ2luZyBib3RoIHBhcnRpZXMgc2hvdWxkIGJlIHB1bmlzaGVkIGJ5IGJvdGggaW4gY29tbW9uLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCBpcyBtdWNoIG1vcmUgZGFuZ2Vyb3VzIHRvIHRoZSBraW5nIGlmIGhlIGhhcyBhdHRhY2tlZCB1cyBmaXJzdCwgZm9yIGlmIHdlCiAgICAgICAgICAgICAgICAgICAgYXJlIGxlZnQgdG8gb3VyIG93biByZXNvdXJjZXMgYW5kIGFueXRoaW5nIGhhcHBlbnMgdG8gdXMsIGhlIHdpbGwgc29vbiBiZQogICAgICAgICAgICAgICAgICAgIG1hcmNoaW5nIGNvbmZpZGVudGx5IGFnYWluc3QgdGhlIGtpbmcuIEkgdGhpbmsgeW91IG91Z2h0IHRvIHNlbmQgYW4gZW1iYXNzeSB0bwogICAgICAgICAgICAgICAgICAgIHB1dCBhbGwgdGhlc2UgbWF0dGVycyBiZWZvcmUgdGhlIGtpbmcsIGFuZCB5b3Ugb3VnaHQgdG8gZHJvcCB0aGUgZm9vbGlzaAogICAgICAgICAgICAgICAgICAgIHByZWp1ZGljZSB0aGF0IGhhcyBzbyBvZnRlbiBicm91Z2h0IGFib3V0IHlvdXIKICAgICAgICAgICAgICAgICAgICBkaXNjb21maXR1cmXigJTigJx0aGUgYmFyYmFyaWFuLOKAnSDigJx0aGUKICAgICAgICAgICAgICAgICAgICBjb21tb24gZm9lIG9mIHVzIGFsbCzigJ0gYW5kIGFsbCBzdWNoIHBocmFzZXMuIDxtaWxlc3RvbmUgbj0iMzQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG15IHBhcnQsIHdoZW5ldmVyIEkgc2VlIGEgbWFuIGFmcmFpZCBvZiBvbmUgd2hvIGR3ZWxscyBhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzUwOSIga2V5PSJ0Z24sNzAxNzUwOSI+U3VzYTwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIxMTUiIGtleT0idGduLDcwMDIxMTUiPkVjYmF0YW5hPC9wbGFjZU5hbWU+IGFuZCBpbnNpc3RpbmcgdGhhdCBoZSBpcyBpbGwtZGlzcG9zZWQKICAgICAgICAgICAgICAgICAgICB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aG91Z2ggaGUgaGVscGVkIHRvCiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZSBvdXIgZm9ydHVuZXMgaW4gdGhlIHBhc3QgYW5kIHdhcyBldmVuIG5vdyBtYWtpbmcgb3ZlcnR1cmVzIHRvIHVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgUGVyc2lhbnMgaGVscGVkIENvbm9uLCB3aGVuIGhlIGRlZmVhdGVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBMYWNlZGFlbW9uaWFucyBvZmYgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDUwMDM3NTciIGtleT0idGduLDUwMDM3NTciPkNuaWR1czwvcGxhY2VOYW1lPiBpbiAzOTQuCiAgICAgICAgICAgICAgICAgICAgICAgIEluIDM0NSBBcnRheGVyeGVzIGFwcGVhbGVkIHRvIHRoZSBsZWFkaW5nIEdyZWVrIHN0YXRlcyBmb3IgaGVscCBpbiBwdXR0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGRvd24gdGhlIHJldm9sdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFyZ29zIiBrZXk9InBlcnNldXMsQXJnb3MiPkFyZ29zPC9wbGFjZU5hbWU+IHNlbnQgYXV4aWxpYXJpZXMsIGJ1dCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+IHJlZnVzZWQuPC9ub3RlPu+8iGFuZCBpZgogICAgICAgICAgICAgICAgICAgIHlvdSBkaWQgbm90IGFjY2VwdCB0aGVtIGJ1dCB2b3RlZCB0aGVpciByZWplY3Rpb24sIHRoZSBmYXVsdCBpcyBub3QKICAgICAgICAgICAgICAgICAgICBoaXPvvIk7IGFuZCB3aGVuIEkgZmluZCB0aGUgc2FtZSBtYW4gdXNpbmcgdmVyeSBkaWZmZXJlbnQgbGFuZ3VhZ2UgYWJvdXQKICAgICAgICAgICAgICAgICAgICB0aGlzIHBsdW5kZXJlciBvZiB0aGUgR3JlZWtzLCB3aG8gaXMgZXh0ZW5kaW5nIGhpcyBwb3dlciwgYXMgeW91IHNlZSwgYXQgb3VyCiAgICAgICAgICAgICAgICAgICAgdmVyeSBkb29ycyBhbmQgaW4gdGhlIGhlYXJ0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgSSBhbSBhc3RvbmlzaGVkLCBhbmQsIHdob2V2ZXIgaGUgbWF5IGJlLCBpdCBpcyBJIHRoYXQgZmVhciBoaW0sIGp1c3QgYmVjYXVzZSBoZQogICAgICAgICAgICAgICAgICAgIGRvZXMgbm90IGZlYXIgUGhpbGlwLiA8bWlsZXN0b25lIG49IjM1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoZXJlIGlzIGFsc28gYW5vdGhlciBtYXR0ZXIsIHRoZSBtaXNyZXByZXNlbnRhdGlvbiBvZiB3aGljaCBieQogICAgICAgICAgICAgICAgICAgIHVuZmFpciBvYmxvcXV5IGFuZCBpbiBpbnRlbXBlcmF0ZSBsYW5ndWFnZSBpcyBpbmp1cmluZyB0aGUgU3RhdGUsIGFuZAogICAgICAgICAgICAgICAgICAgIGZ1cnRoZXJtb3JlIGlzIGFmZm9yZGluZyBhIHByZXRleHQgZm9yIHRob3NlIHdobyBhcmUgdW53aWxsaW5nIHRvIHBlcmZvcm0gYW55IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZHV0aWVzIGFzIGNpdGl6ZW5zOyBpbmRlZWQsIHlvdSB3aWxsIGZpbmQgdGhhdCBpbiBldmVyeSBjYXNlIHdoZXJlIGEgbWFuCiAgICAgICAgICAgICAgICAgICAgaGFzIGZhaWxlZCB0byBkbyBoaXMgZHV0eSwgdGhpcyBoYXMgYmVlbiBnaXZlbiBhcyB0aGUgZXhjdXNlLiBJIGFtIHJlYWxseSBhZnJhaWQKICAgICAgICAgICAgICAgICAgICB0byBzcGVhayBvbiB0aGlzIHN1YmplY3QsIGJ1dCBJIHdpbGwgZG8gc28gbmV2ZXJ0aGVsZXNzOyA8bWlsZXN0b25lIG49IjM2IiB1bml0PSJzZWN0aW9uIiAvPmZvciBJIHRoaW5rIEkgc2hhbGwgYmUgYWJsZSwgd2l0aCBhZHZhbnRhZ2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgU3RhdGUsIHRvIHBsZWFkIHRoZSBjYXVzZSBib3RoIG9mIHRoZSBwb29yIGFnYWluc3QgdGhlIHJpY2ggYW5kIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LW93bmVycyBhZ2FpbnN0IHRoZSBuZWNlc3NpdG91cy4gSWYgd2UgY291bGQgYmFuaXNoIGZyb20gb3VyIG1pZHN0IGJvdGgKICAgICAgICAgICAgICAgICAgICB0aGUgb2Jsb3F1eSB3aGljaCBzb21lIGhlYXAgb24gdGhlIFRoZW9yaWMgRnVuZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIG9uIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDEuMjAiIHZhbGlkPSJ5ZXMiPkRlbS4gMS4yMDwvYmlibD4uPC9ub3RlPiBhbmQgYWxzbyB0aGUgZmVhcgogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIEZ1bmQgd2lsbCBub3QgYmUgbWFpbnRhaW5lZCB3aXRob3V0IGRvaW5nIGEgZ3JlYXQgZGVhbCBvZiBoYXJtLCB3ZQogICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCBwZXJmb3JtIGEgZ3JlYXRlciBzZXJ2aWNlIG5vciBvbmUgbW9yZSBsaWtlbHkgdG8gc3RyZW5ndGhlbiB0aGUgd2hvbGUKICAgICAgICAgICAgICAgICAgICBib2R5IHBvbGl0aWMuIDxtaWxlc3RvbmUgbj0iMzciIHVuaXQ9InNlY3Rpb24iIC8+Rm9sbG93IG15IGFyZ3VtZW50IHdoaWxlIEkgc3RhdGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCB0aGUgY2FzZSBvZiB0aG9zZSB3aG8gYXJlIHJlZ2FyZGVkIGFzIHRoZSBwb29yZXIgY2xhc3Nlcy4gVGhlcmUgd2FzIGEgdGltZQogICAgICAgICAgICAgICAgICAgIG5vdCBsb25nIGFnbyB3aGVuIHRoZSByZXZlbnVlIG9mIHlvdXIgc3RhdGUgZGlkIG5vdCBleGNlZWQgYSBodW5kcmVkIGFuZCB0aGlydHkKICAgICAgICAgICAgICAgICAgICB0YWxlbnRzLCBhbmQgeWV0IG9mIHRob3NlIGNvbXBldGVudCB0byB1bmRlcnRha2UgdGhlIHRyaWVyYXJjaHkgb3IgcGF5IHRoZQogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LXRheCB0aGVyZSBpcyBub3Qgb25lIHRoYXQgZGVjbGluZWQgdGhlIGR1dHkgdGhhdCBkZXZvbHZlZCBvbiBoaW0gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgYWJzZW5jZSBvZiBhIHN1cnBsdXM7IGJ1dCB0aGUgd2FyLWdhbGxleXMgc2FpbGVkIG91dCwgYW5kIHRoZSBtb25leSBjYW1lIGluLCBhbmQKICAgICAgICAgICAgICAgICAgICB3ZSBkaWQgYWxsIHRoYXQgd2FzIHJlcXVpcmVkLiA8bWlsZXN0b25lIG49IjM4IiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIHRoZW4KICAgICAgICAgICAgICAgICAgICBmb3J0dW5lIGhhcyBzbWlsZWQgb24gdXMgYW5kIGluY3JlYXNlZCBvdXIgcmV2ZW51ZXMsIGFuZCB0aGUgZXhjaGVxdWVyIG5vdwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVzIGZvdXIgaHVuZHJlZCBpbnN0ZWFkIG9mIG9uZSBodW5kcmVkIHRhbGVudHMsIHRob3VnaCBubyBwcm9wZXJ0eS1vd25lcgogICAgICAgICAgICAgICAgICAgIHN1ZmZlcnMgYW55IGxvc3MgYnV0IGlzIHJhdGhlciB0aGUgZ2FpbmVyLCBmb3IgYWxsIHRoZSByaWNoIGNpdGl6ZW5zIGNvbWUgdXAgdG8KICAgICAgICAgICAgICAgICAgICByZWNlaXZlIHRoZWlyIHNoYXJlIG9mIHRoaXMgaW5jcmVhc2UsIGFzIGluZGVlZCB0aGV5IGhhdmUgYSBwZXJmZWN0IHJpZ2h0IHRvIGRvLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjM5IiB1bml0PSJzZWN0aW9uIiAvPldoYXQgdGhlbiBkbyB3ZSBtZWFuIGJ5IHJlcHJvYWNoaW5nIG9uZQogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgZm9yIHRoaXMgYW5kIG1ha2luZyBpdCBhbiBleGN1c2UgZm9yIGRvaW5nIG5vdGhpbmcsIHVubGVzcyBpdCBpcyB0aGF0IHdlCiAgICAgICAgICAgICAgICAgICAgZ3J1ZGdlIHRoZSByZWxpZWYgd2hpY2ggdGhlIHBvb3IgaGF2ZSByZWNlaXZlZCBhdCB0aGUgaGFuZHMgb2YgZm9ydHVuZT8gSSBmb3IKICAgICAgICAgICAgICAgICAgICBvbmUgc2hhbGwgbm90IGJsYW1lIHRoZW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pLmUuIGJsYW1lIHRoZSBwb29yZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyBmb3IgdXBob2xkaW5nIHRoZSBUaGVvcmljIEZ1bmQuIFRoZSBhcmd1bWVudCBpcyB0aGF0IHdoZW4gcmV2ZW51ZQogICAgICAgICAgICAgICAgICAgICAgICB3YXMgc21hbGxlciwgdGhlIHByb3BlcnR5LW93bmVycyBkaWQgbm90IHJlZnVzZSB0byBwYXkgdXA7IG5vdyB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICByZXZlbnVlIHNob3dzIGEgYmlnIHN1cnBsdXMsIGRldm90ZWQgdG8gdGhlIFRoZW9yaWMgRnVuZCwgaW4gd2hpY2ggYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgaGF2ZSBhIHNoYXJlLCB3aHkgc2hvdWxkIHRoZSByaWNoIGRlbWFuZCByZWxpZWYgZnJvbSB0aGVpcgogICAgICAgICAgICAgICAgICAgICAgICDigJxsaXR1cmdpZXPigJ0/IO+8iFBlcmhhcHMgdGhlIG1vZGVybgogICAgICAgICAgICAgICAgICAgICAgICBpbmNvbWUtdGF4LXBheWVyIHdpbGwgZmFpbCB0byBhcHByZWNpYXRlIHRoZSBzcGVha2VyJ3MKICAgICAgICAgICAgICAgICAgICAgICAgbG9naWMu77yJPC9ub3RlPiBub3IgZG8gSSB0aGluayBpdCBmYWlyIHRvIGRvIHNvLiA8bWlsZXN0b25lIG49IjQwIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiBwcml2YXRlIGxpZmUgSSBkbyBub3Qgb2JzZXJ2ZSB0aGF0IHRoZSB5b3VuZwogICAgICAgICAgICAgICAgICAgIG1hbiBhZG9wdHMgdGhhdCBhdHRpdHVkZSB0b3dhcmRzIGhpcyBzZW5pb3JzLCBvciB0aGF0IGFueSBodW1hbiBiZWluZyBpcyBzbwogICAgICAgICAgICAgICAgICAgIGluc2Vuc2libGUgb3IgdW5yZWFzb25hYmxlIHRoYXQgaGUgcmVmdXNlcyB0byBkbyBhbnl0aGluZyBoaW1zZWxmIHVubGVzcwogICAgICAgICAgICAgICAgICAgIGV2ZXJ5Ym9keSBkb2VzIHRoZSBzYW1lOyBhbmQgaW5kZWVkIHN1Y2ggYSBjYXNlIHdvdWxkIGJlIGNvdmVyZWQgYnkgdGhlIGxhd3MgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIGlsbC11c2FnZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNoaWxkcmVuIHdobyByZWZ1c2VkIHRvIHN1cHBvcnQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlaXIgcGFyZW50cyB3ZXJlIGxpYWJsZSB0byBhPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPs604b23zrrOtwogICAgICAgICAgICAgICAgICAgICAgICAgICAgzrrOsc664b29z4POtc+Jz4I8L2ZvcmVpZ24+Ljwvbm90ZT4gZm9yIEkgc3VwcG9zZSB0aGUgY29udHJpYnV0aW9uIGFzc2Vzc2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgYm90aCBhdXRob3JpdGllcywgYnkgbmF0dXJlIGFuZCBieSBsYXcsIG91Z2h0IHRvIGJlIGJyb3VnaHQgaG9uZXN0bHkgYW5kIHBhaWQKICAgICAgICAgICAgICAgICAgICBjaGVlcmZ1bGx5IHRvIHRoZSBwYXJlbnRzLiA8bWlsZXN0b25lIG49IjQxIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwganVzdCBhcwogICAgICAgICAgICAgICAgICAgIGVhY2ggb25lIG9mIHVzIGhhcyBhIHBhcmVudCwgc28gb3VnaHQgd2UgdG8gcmVnYXJkIHRoZSBjb2xsZWN0aXZlIGNpdGl6ZW5zIGFzCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbW1vbiBwYXJlbnRzIG9mIHRoZSB3aG9sZSBTdGF0ZSwgYW5kIHNvIGZhciBmcm9tIGRlcHJpdmluZyB0aGVtIG9mCiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcgdGhhdCB0aGUgU3RhdGUgYmVzdG93cywgd2Ugb3VnaHQsIGlmIHRoZXJlIHdlcmUgbm8gc3VjaCBncmFudCwgdG8gbG9vawogICAgICAgICAgICAgICAgICAgIGVsc2V3aGVyZSBmb3IgbWVhbnMgdG8gc2F2ZSBhbnkgb2YgdGhlaXIgd2FudHMgZnJvbSBiZWluZyBvdmVybG9va2VkLiA8bWlsZXN0b25lIG49IjQyIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZW4sIGlmIHRoZSB3ZWFsdGh5IHdvdWxkIGFjY2VwdCB0aGlzIHByaW5jaXBsZSwKICAgICAgICAgICAgICAgICAgICBJIHRoaW5rIHRoZXkgd291bGQgYmUgZG9pbmcgbm90IG9ubHkgd2hhdCBpcyBmYWlyLCBidXQgYWxzbyB3aGF0IGlzIGV4cGVkaWVudDsKICAgICAgICAgICAgICAgICAgICBmb3IgdG8gZGVwcml2ZSBvbmUgY2l0aXplbiBvZiBuZWNlc3NhcmllcyBpcyB0byBtYWtlIG1hbnkgb2YgdGhlbSB1bml0ZSBpbgogICAgICAgICAgICAgICAgICAgIGRpc2FmZmVjdGlvbiB0b3dhcmRzIHRoZSBnb3Zlcm5tZW50LiBJIHdvdWxkIGFsc28gY291bnNlbCB0aGUgcG9vcmVyIGNsYXNzZXMgdG8KICAgICAgICAgICAgICAgICAgICBhYm9saXNoIHRoZSBncmlldmFuY2Ugd2hpY2ggbWFrZXMgdGhlIHByb3BlcnRpZWQgY2xhc3MgZGlzY29udGVudGVkIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgc3lzdGVtLCBhbmQgZ2l2ZXMgdGhlbSBqdXN0IGNhdXNlIGZvciBhc3NhaWxpbmcgaXQuIDxtaWxlc3RvbmUgbj0iNDMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHByb2NlZWQsIGluIHRoZSBzYW1lIHdheSBhcyBiZWZvcmUsCiAgICAgICAgICAgICAgICAgICAgdG8gc3RhdGUgdGhlIGNhc2UgZm9yIHRoZSByaWNoLCBhbmQgSSBzaGFsbCBub3Qgc2hyaW5rIGZyb20gc3BlYWtpbmcgdGhlIHRydXRoLgogICAgICAgICAgICAgICAgICAgIEZvciBJIGNhbm5vdCBpbWFnaW5lIGFueW9uZSwgb3IgYXQgbGVhc3QgYW55IEF0aGVuaWFuLCBzbyBvYmR1cmF0ZSBhbmQKICAgICAgICAgICAgICAgICAgICBjcnVlbC1oZWFydGVkIGFzIHRvIGZlZWwgYW5ub3llZCB3aGVuIGhlIHNlZXMgdGhlIHBvb3IgYW5kIHRob3NlIHdobyBsYWNrCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJpZXMgcmVjZWl2aW5nIHRoZXNlIGJvb25zLiA8bWlsZXN0b25lIG49IjQ0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVyZQogICAgICAgICAgICAgICAgICAgIGRvZXMgb3VyIHByYWN0aWNlIGJyZWFrIGRvd24sIGFuZCB3aGVyZSBsaWVzIHRoZSBncmlldmFuY2U/IEl0IGlzIHdoZW4gdGhlIHJpY2gKICAgICAgICAgICAgICAgICAgICBzZWUgY2VydGFpbiBwZXJzb25zIHRyYW5zZmVycmluZyB0aGlzIHVzYWdlIGZyb20gcHVibGljIG1vbmV5cyB0byBwcml2YXRlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk7IHdoZW4gdGhlIHNwZWFrZXIgaXMgcmFpc2VkIHRvIGluc3RhbnQgZ3JlYXRuZXNzIGFtb25nIHlvdSBhbmQgZXZlbiB0bwogICAgICAgICAgICAgICAgICAgIGltbW9ydGFsaXR5LCBhcyBmYXIgYXMgaGlzIHByaXZpbGVnZSBjYW4gc2VjdXJlIGl0OyBhbmQgd2hlbiB5b3VyIHNob3V0cyBvZiBvcGVuCiAgICAgICAgICAgICAgICAgICAgYXBwcm92YWwgYXJlIGNvbnRyYWRpY3RlZCBieSB5b3VyIHNlY3JldCB2b3RlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHJlY29nbml6ZWQgYXBwcm9wcmlhdGlvbiBvZiBwdWJsaWMgbW9uZXkgZm9yIHRoZSBUaGVvcmljIEZ1bmQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgaW1pdGF0ZWQgYnkgZGVtYWdvZ3Vlcywgd2hvIHByb3NlY3V0ZSB0aGUgcmljaCBpbiBvcmRlciB0aGF0IHRoZWlyIGZpbmVzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBjb25maXNjYXRpb25zIG1heSBiZSB1c2VkIGZvciBzaW1pbGFyIGJlbmVmaXRzLiBUaGUgZGVtYWdvZ3VlIHRodXMgYWNxdWlyZXMKICAgICAgICAgICAgICAgICAgICAgICAgdW5kdWUgaW5mbHVlbmNlIGFuZCwgYmVpbmcgcHJpdmlsZWdlZCwgaXMgdW5hc3NhaWxhYmxlLiBNZWFud2hpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHBlb3BsZSwgc2l0dGluZyBhcyBhIGp1cnksIGFwcGxhdWQgdGhlIHJpY2ggbWFuIHdoZW4gaGUgc2tpbGZ1bGx5IGRlZmVuZHMKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIHJpZ2h0cywgYnV0IGNhc3QgdGhlaXIgdm90ZXMgYWdhaW5zdCBoaW0uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNDUiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoaXMgYnJlZWRzIGRpc3RydXN0IGFuZCByZXNlbnRtZW50LiBGb3IKICAgICAgICAgICAgICAgICAgICB3ZSBhcmUgYm91bmQsIEF0aGVuaWFucywgdG8gc2hhcmUgZXF1aXRhYmx5IHdpdGggb25lIGFub3RoZXIgdGhlIHByaXZpbGVnZXMgb2YKICAgICAgICAgICAgICAgICAgICBjaXRpemVuc2hpcCwgdGhlIHdlYWx0aHkgZmVlbGluZyBzZWN1cmUgdG8gbGVhZCB0aGVpciBvd24gbGl2ZXMgYW5kIGhhdW50ZWQgYnkKICAgICAgICAgICAgICAgICAgICBubyBmZWFycyBvbiB0aGF0IGFjY291bnQsIGJ1dCBpbiB0aGUgZmFjZSBvZiBkYW5nZXJzIG1ha2luZyBvdmVyIHRoZWlyIHByb3BlcnR5CiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGNvbW1vbndlYWx0aCBmb3IgaXRzIGRlZmVuY2U7IHdoaWxlIHRoZSByZXN0IG11c3QgcmVhbGl6ZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgU3RhdGUtcHJvcGVydHkgaXMgY29tbW9uIHByb3BlcnR5LCBkdWx5IHJlY2VpdmluZyB0aGVpciBzaGFyZSBvZiBpdCwgYnV0CiAgICAgICAgICAgICAgICAgICAgcmVjb2duaXppbmcgdGhhdCBwcml2YXRlIHdlYWx0aCBiZWxvbmdzIHRvIHRoZSBwb3NzZXNzb3IuIEluIHRoaXMgd2F5IGEgc21hbGwKICAgICAgICAgICAgICAgICAgICBzdGF0ZSBncm93cyBncmVhdCwgYW5kIGEgZ3JlYXQgb25lIGlzIGtlcHQgZ3JlYXQuIFRoaXMgbWF5IHBhc3MgZm9yIGEgdmVyYmFsCiAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50IG9mIHRoZSBkdXRpZXMgb2YgZWFjaCBjbGFzczsgZm9yIHRoZSBsZWdhbCBwZXJmb3JtYW5jZSBvZiB0aG9zZSBkdXRpZXMKICAgICAgICAgICAgICAgICAgICBzb21lIG9yZ2FuaXphdGlvbiBpcyBuZWNlc3NhcnkuIDxtaWxlc3RvbmUgbj0iNDYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5PZiBvdXIgcHJlc2VudCBkaWZmaWN1bHRpZXMgYW5kIG9mIHRoZSBleGlzdGluZwogICAgICAgICAgICAgICAgICAgIGNvbmZ1c2lvbiB0aGUgY2F1c2VzIGFyZSBtYW55IGFuZCBvZiBsb25nIHN0YW5kaW5nLCBidXQgaWYgeW91IGFyZSB3aWxsaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgaGVhciB0aGVtLCBJIGFtIHJlYWR5IHRvIHNwZWFrLiBNZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IGhhdmUgZGVzZXJ0ZWQgdGhlIHBvc3QgaW4gd2hpY2ggeW91ciBhbmNlc3RvcnMgbGVmdAogICAgICAgICAgICAgICAgICAgIHlvdTsgeW91IGhhdmUgYmVlbiBwZXJzdWFkZWQgYnkgcG9saXRpY2lhbnMgb2YgdGhpcyBzb3J0IHRoYXQgdG8gYmUgcGFyYW1vdW50IGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIHRvIHBvc3Nlc3MgYSBzdGFuZGluZwogICAgICAgICAgICAgICAgICAgIGZvcmNlLCBhbmQgdG8gaGVscCBhbGwgdGhlIG9wcHJlc3NlZCwgaXMgYSBzdXBlcmZsdW91cyB0YXNrIGFuZCBhbiBpZGxlIGV4cGVuc2U7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgeW91IGZvbmRseSBpbWFnaW5lZCB0aGF0IHRvIGxpdmUgaW4gcGVhY2UsIHRvIG5lZ2xlY3QgYWxsIHlvdXIgZHV0aWVzLCB0bwogICAgICAgICAgICAgICAgICAgIGFiYW5kb24gYWxsIHlvdXIgcG9zc2Vzc2lvbnMgYW5kIGxldCBvdGhlcnMgc2VpemUgdGhlbSBvbmUgYnkgb25lLCBlbnN1cmVkCiAgICAgICAgICAgICAgICAgICAgd29uZGVyZnVsIHByb3NwZXJpdHkgYW5kIGNvbXBsZXRlIHNlY3VyaXR5LiA8bWlsZXN0b25lIG49IjQ3IiB1bml0PSJzZWN0aW9uIiAvPkluCiAgICAgICAgICAgICAgICAgICAgY29uc2VxdWVuY2Ugb2YgdGhpcywgYSByaXZhbCBoYXMgc3RlcHBlZCBpbnRvIHRoZSBwb3NpdGlvbiB0aGF0IHlvdSBvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgZmlsbGVkLCBhbmQgaXQgaXMgaGUgd2hvIGhhcyBiZWNvbWUgcHJvc3Blcm91cyBhbmQgZ3JlYXQgYW5kIHJ1bGVyIG92ZXIKICAgICAgICAgICAgICAgICAgICBtYW55IHRoaW5ncy4gQW5kIHJpZ2h0bHkgc287IGZvciB0aGVyZSBpcyBhIHByaXplLCBob25vcmFibGUsIGdyZWF0LCBhbmQKICAgICAgICAgICAgICAgICAgICBnbG9yaW91cywgYSBwcml6ZSBmb3Igd2hpY2ggdGhlIGdyZWF0ZXN0IG9mIG91ciBzdGF0ZXMgb25jZSBzcGVudCBhbGwgdGhlaXIgdGltZQogICAgICAgICAgICAgICAgICAgIGluIGNvbnRlbmRpbmcsIGJ1dCBzaW5jZSBtaXNmb3J0dW5lIGhhcyBkb2dnZWQgdGhlIExhY2VkYWVtb25pYW5zLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgUGhvY2lhbiBXYXIgaGFzIGxlZnQgdGhlIFRoZWJhbnMgbm8gbGVpc3VyZSwgYW5kIHdlIGFyZSBoZWVkbGVzcywgaGUgaGFzIGdyYXNwZWQKICAgICAgICAgICAgICAgICAgICBpdCB3aXRob3V0IGEgc3RydWdnbGUuIDxtaWxlc3RvbmUgbj0iNDgiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIGZlYXIgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcG9ydGlvbiBvZiB0aGUgb3RoZXJzLCBidXQgaGlzIHRoZSBwb3NzZXNzaW9uIG9mIG1hbnkgYWxsaWVzIGFuZCBhIG1pZ2h0eSBmb3JjZTsKICAgICAgICAgICAgICAgICAgICBhbmQgc3VjaCBncmVhdCBhbmQgbWFuaWZvbGQgdHJvdWJsZXMgbm93IGVuY29tcGFzcyBhbGwgdGhlIEdyZWVrcyB0aGF0IGl0IGlzIG5vdAogICAgICAgICAgICAgICAgICAgIGVhc3kgdG8gYWR2aXNlIHdoYXQgb3VnaHQgdG8gYmUgZG9uZS4gPG1pbGVzdG9uZSBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPllldCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHBlcmlsb3VzIGFzIGlzIHRoZSBwcmVzZW50IHNpdHVhdGlvbiBpbiBteSBqdWRnZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgbm9uZSBvZiBhbGwgdGhlIEdyZWVrcyBhcmUgaW4gZ3JlYXRlciBkYW5nZXIgdGhhbiB5b3UsIG5vdCBvbmx5IGJlY2F1c2UgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIHRoZSBjaGllZiBvYmplY3Qgb2YgUGhpbGlwJ3MgcGxvdHMsIGJ1dCBiZWNhdXNlIHlvdSBhcmUgdGhlIG1vc3QgZGlzcG9zZWQgdG8KICAgICAgICAgICAgICAgICAgICBpbmFjdGlvbi4gSWYgdGhlcmVmb3JlLCBub3RpbmcgdGhlIGFidW5kYW5jZSBhbmQgY2hlYXBuZXNzIG9mIGdvb2RzIGZvciBzYWxlIGluCiAgICAgICAgICAgICAgICAgICAgeW91ciBtYXJrZXRzLCB5b3UgaGF2ZSBiZWVuIGJlZ3VpbGVkIGJ5IHRoZXNlIHRoaW5ncyBpbnRvIHRoZSBiZWxpZWYgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5IGlzIGluIG5vIGRhbmdlciwgeW91ciBlc3RpbWF0ZSBvZiB0aGUgc2l0dWF0aW9uIGlzIGNvbnRyYXJ5IHRvIGFsbCByaWdodAogICAgICAgICAgICAgICAgICAgIGFuZCByZWFzb24uIDxtaWxlc3RvbmUgbj0iNTAiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGEgbWFya2V0IG9yIGEgZmFpciBtaWdodCBiZQogICAgICAgICAgICAgICAgICAgIGp1ZGdlZCBvbiBzdWNoIGV2aWRlbmNlIHRvIGJlIHdlbGwgb3IgaWxsIHN0b2NrZWQ7IGJ1dCBhIGNpdHksIHdoaWNoIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgYXNwaXJhbnQgdG8gdGhlIHJ1bGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiBoYXMKICAgICAgICAgICAgICAgICAgICByZWdhcmRlZCBhcyBoaXMgb25seSBwb3NzaWJsZSBvcHBvbmVudCBhbmQgYXMgY2hhbXBpb24gb2YgdGhlIGZyZWVkb20gb2YgYWxsLAogICAgICAgICAgICAgICAgICAgIG11c3Qgc3VyZWx5IG5vdCBiZSB0ZXN0ZWQgYnkgaGVyIG1hcmtldC1zdHVmZiB0byBzZWUgd2hldGhlciBhbGwgaXMgd2VsbCB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGVyLCBidXQgYnkgaGVyIGFiaWxpdHkgdG8gdHJ1c3QgdGhlIGxveWFsdHkgb2YgaGVyIGFsbGllcywgYnkgaGVyIHN0cmVuZ3RoIGluCiAgICAgICAgICAgICAgICAgICAgYW1z4oCUdGhlc2UgYXJlIHRoZSBxdWFsaXRpZXMgdGhhdCB5b3UgbXVzdCBsb29rIGZvciBpbiB0aGUgY2l0eTsgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgaW4geW91ciBjYXNlIGFyZSBhbGwgdW50cnVzdHdvcnRoeSBhbmQgdW5zb3VuZC4gPG1pbGVzdG9uZSBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3Ugd2lsbCB1bmRlcnN0YW5kIGl0IGlmIHlvdSBsb29rIGF0IGl0IGluIHRoaXMgd2F5LiBXaGVuIGhhdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgYWZmYWlycyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IGJlZW4gaW4gdGhlIGdyZWF0ZXN0CiAgICAgICAgICAgICAgICAgICAgY29uZnVzaW9uPyBGb3Igbm8gb3RoZXIgb2NjYXNpb24gdGhhbiB0aGUgcHJlc2VudCBjb3VsZCBwb3NzaWJseSBiZSBuYW1lZCBieQogICAgICAgICAgICAgICAgICAgIGFueW9uZS4gQWxsIGR1cmluZyB0aGUgcGFzdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgIGRpdmlkZWQgaW50byB0d28gY2FtcHMsIHRoZSBMYWNlZGFlbW9uaWFucycgYW5kIG91cnMsIGFuZCBvZiB0aGUgb3RoZXIgR3JlZWtzCiAgICAgICAgICAgICAgICAgICAgc29tZSB0b29rIHRoZWlyIG9yZGVycyBmcm9tIHVzLCBvdGhlcnMgZnJvbSB0aGVtLiBUaGUga2luZyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIga2V5PSJ0Z24sNzAwMDIzMSI+UGVyc2lhPC9wbGFjZU5hbWU+LCBpbiBoaW1zZWxmLCB3YXMgZXF1YWxseSBkaXN0cnVzdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgYWxsLCBidXQgYnkgdGFraW5nIHVwIHRoZSBjYXVzZSBvZiB0aGUgbG9zaW5nIHNpZGUgaW4gdGhlIHN0cnVnZ2xlLCBoZSByZXRhaW5lZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGNvbmZpZGVuY2UgdW50aWwgaGUgY291bGQgcHV0IHRoZW0gb24gYW4gZXF1YWxpdHkgd2l0aCB0aGUgb3RoZXJzOyBidXQKICAgICAgICAgICAgICAgICAgICB0aGVyZWFmdGVyIGhlIHdhcyBubyBsZXNzIGhhdGVkIGJ5IHRob3NlIGhlIGhhZCBzYXZlZCB0aGFuIGJ5IHRob3NlIHdobyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGhpcyBlbmVtaWVzIGZyb20gdGhlIGJlZ2lubmluZy4gPG1pbGVzdG9uZSBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgcGxhY2UsIHRoZSBraW5nIGlzIG5vdyB3ZWxsLWRpc3Bvc2VkIHRvIGFsbCB0aGUgR3JlZWtzLCBhbmQgeWV0IHRvIHVzCiAgICAgICAgICAgICAgICAgICAgbGVhc3Qgb2YgYWxsLCB1bmxlc3Mgd2UgY2FuIGVmZmVjdCBzb21lIGltbWVkaWF0ZSBpbXByb3ZlbWVudC4gSW4gdGhlIHNlY29uZAogICAgICAgICAgICAgICAgICAgIHBsYWNlLCBtYW55IHNvLWNhbGxlZCDigJxwcm90ZWN0b3Jz4oCdIGFyZSBzcHJpbmdpbmcgdXAKICAgICAgICAgICAgICAgICAgICBldmVyeXdoZXJlLCBhbmQgYWxsIHN0YXRlcyBhcmUgcml2YWxzIGZvciB0aGUgbGVhZGVyc2hpcCwgYnV0IHVuZm9ydHVuYXRlbHkgc29tZQogICAgICAgICAgICAgICAgICAgIGhvbGQgYWxvb2YsIGluIG11dHVhbCBqZWFsb3VzeSBhbmQgZGlzdHJ1c3QsIGFuZCBzbyBlYWNoIHN0YXRlIGhhcyBpc29sYXRlZAogICAgICAgICAgICAgICAgICAgIGl0c2VsZuKAlEFyZ2l2ZXMsIFRoZWJhbnMsIExhY2VkYWVtb25pYW5zLCBDb3JpbnRoaWFucywgQXJjYWRpYW5zLAogICAgICAgICAgICAgICAgICAgIG91cnNlbHZlcy4gPG1pbGVzdG9uZSBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeWV0LCB0aG91Z2ggR3JlZWsgcG9saXRpY3MgYXJlCiAgICAgICAgICAgICAgICAgICAgc3BsaXQgdXAgaW50byBzbyBtYW55IGZhY3Rpb25zIHVuZGVyIHNvIG1hbnkgcG93ZXJzLCBpbiBubyBzdGF0ZSwgaWYgSSBtdXN0CiAgICAgICAgICAgICAgICAgICAgc3BlYWsgdGhlIHRydXRoIGZyZWVseSwgd291bGQgeW91IGZpbmQgdGhlIGdvdmVybm1lbnQgb2ZmaWNlcyBhbmQgdGhlIGNvdW5jaWwKICAgICAgICAgICAgICAgICAgICBjaGFtYmVycyBsZXNzIG9jY3VwaWVkIHdpdGggR3JlZWsgYWZmYWlycyB0aGFuIGhlcmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjsgYW5kIG5hdHVyYWxseSBzbywgZm9yIG5laXRoZXIKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIGxvdmUgbm9yIHRydXN0IG5vciBmZWFyIGRvZXMgYW55b25lIGhvbGQgY29tbXVuaWNhdGlvbiB3aXRoIHVzLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjU0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIGlzIG5vdCBkdWUgdG8gYSBzaW5nbGUgY2F1c2UsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBvciB5b3UgbWlnaHQgZWFzaWx5IHJlbWVkeSBpdCwgYnV0IHRvIG1hbnkgZXJyb3JzIG9mIGV2ZXJ5IGtpbmQKICAgICAgICAgICAgICAgICAgICB0aHJvdWdob3V0IHRoZSBwYXN0LiBXaXRob3V0IGVudW1lcmF0aW5nIHRoZXNlLCBJIHdpbGwgbWVudGlvbiBvbmUgb24gd2hpY2ggYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlc3QgdHVybiwgb25seSBiZXNlZWNoaW5nIHlvdSBub3QgdG8gYmUgb2ZmZW5kZWQgd2l0aCBtZSwgaWYgSSBzcGVhayB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCBib2xkbHkuIEl0IGlzIHRoZSBzZWxsaW5nIG9mIHlvdXIgaW50ZXJlc3RzIGF0IGV2ZXJ5IG9wcG9ydHVuaXR5OyB5b3VyCiAgICAgICAgICAgICAgICAgICAgc2hhcmUgaW4gdGhlIGJhcmdhaW4gaXMgbGVpc3VyZSBhbmQgaW5hY3Rpb24sIHdoaWNoIGNoYXJtIHlvdSBvdXQgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIHJlc2VudG1lbnQgYWdhaW5zdCB5b3VyIGJldHJheWVycywgYnV0IG90aGVycyByZWFwIHRoZSByZXdhcmRzLiA8bWlsZXN0b25lIG49IjU1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvdGhlciBlcnJvcnMgaXQgaXMgbm90IHdvcnRoIHdoaWxlIHRvIGludmVzdGlnYXRlCiAgICAgICAgICAgICAgICAgICAgbm93LCBidXQgd2hlbmV2ZXIgYW55IHF1ZXN0aW9uIGFyaXNlcyB0aGF0IGNvbmNlcm5zIFBoaWxpcCwgaW5zdGFudGx5IHVwIGp1bXBzCiAgICAgICAgICAgICAgICAgICAgc29tZW9uZSBhbmQgc2F5cyB0aGVyZSBtdXN0IGJlIG5vIG5vbnNlbnNlIHRhbGtlZCwgbm8gZGVjbGFyYXRpb250aW9uIG9mIHdhciwKICAgICAgICAgICAgICAgICAgICBhbmQgaGUgYXQgb25jZSBnb2VzIG9uIHRvIGFkZCBob3cgZ29vZCBhIHRoaW5nIGl0IGlzIHRvIHByZXNlcnZlIHBlYWNlLCBhbmQgd2hhdAogICAgICAgICAgICAgICAgICAgIGEgYm90aGVyIGl0IGlzIHRvIGtlZXAgdXAgYSBsYXJnZSBhcm15LCBhbmQgaG93IOKAnGNlcnRhaW4gcGVyc29ucyB3YW50CiAgICAgICAgICAgICAgICAgICAgdG8gcGx1bmRlciB5b3VyIHdlYWx0aOKAnTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+aS5lLiBieQogICAgICAgICAgICAgICAgICAgICAgICBkaXZlcnRpbmcgbW9uZXkgZnJvbSB0aGUgVGhlb3JpYyBGdW5kIHRvIG1pbGl0YXJ5IG9iamVjdHMuPC9ub3RlPjsgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgc3RhdGVtZW50cyBhcmUgYXMgdHJ1ZSBhcyB0aGV5IGNhbiBtYWtlIHRoZW0uIDxtaWxlc3RvbmUgbj0iNTYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHN1cmVseSBpdCBpcyBub3QgdG8geW91IHRoYXQgdGhleSBzaG91bGQgcmVjb21tZW5kIHBlYWNlLCBmb3IKICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSB0YWtlbiB0aGUgYWR2aWNlIGFuZCB0aGVyZSB5b3Ugc2l0OyBpdCBpcyB0byB0aGUgbWFuIHdobyBpcyBldmVuIG5vdyBvbgogICAgICAgICAgICAgICAgICAgIHRoZSB3YXJwYXRoOyBmb3IgaWYgUGhpbGlwIGNhbiBiZSB3b24gb3ZlciwgeW91ciBzaGFyZSBvZiB0aGUgY29tcGFjdCBpcyByZWFkeQogICAgICAgICAgICAgICAgICAgIHRvIGhhbmQuIEFnYWluLCB0aGV5IHNob3VsZCByZWZsZWN0IHRoYXQgdGhlIGlya3NvbWUgdGhpbmcgaXMgbm90IHRoZSBleHBlbnNlIG9mCiAgICAgICAgICAgICAgICAgICAgc2VjdXJpbmcgb3VyIHNhZmV0eSwgYnV0IHRoZSBkb29tIHRoYXQgd2lsbCBiZSBvdXJzIGlmIHdlIHNocmluayBmcm9tIHRoYXQKICAgICAgICAgICAgICAgICAgICBleHBlbnNlLiBBcyBmb3IgdGhlIOKAnHBsdW5kZXIgb2YgeW91ciB3ZWFsdGgs4oCdIHRoZXkgb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICBwcmV2ZW50IHRoYXQgYnkgcHJvcG9zaW5nIHNvbWUgd2F5IG9mIGNoZWNraW5nIGl0IGFuZCBub3QgYnkgYWJhbmRvbmluZyB5b3VyCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzLiA8bWlsZXN0b25lIG49IjU3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaXQgaXMganVzdCB0aGlzIHRoYXQgcm91c2VzCiAgICAgICAgICAgICAgICAgICAgbXkgaW5kaWduYXRpb24sIHRoYXQgc29tZSBvZiB5b3Ugc2hvdWxkIGJlIGRpc3RyZXNzZWQgYXQgdGhlIHByb3NwZWN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHBsdW5kZXIgb2YgeW91ciB3ZWFsdGgsIHdoZW4geW91IGFyZSBxdWl0ZSBjb21wZXRlbnQgdG8gcHJvdGVjdCBpdCBhbmQgdG8gcHVuaXNoCiAgICAgICAgICAgICAgICAgICAgYW55IG9mZmVuZGVyLCBidXQgdGhhdCB5b3UgYXJlIG5vdCBkaXN0cmVzc2VkIGF0IHRoZSBzaWdodCBvZiBQaGlsaXAgdGh1cwogICAgICAgICAgICAgICAgICAgIHBsdW5kZXJpbmcgZXZlcnkgR3JlZWsgc3RhdGUgaW4gdHVybiwgdGhlIG1vcmUgc28gYXMgaGUgaXMgcGx1bmRlcmluZyB0aGVtIHRvCiAgICAgICAgICAgICAgICAgICAgaW5qdXJlIHlvdS4gPG1pbGVzdG9uZSBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoeQogICAgICAgICAgICAgICAgICAgIHRoZW4sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBoYXMgbm9uZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZXNlIHNwZWFrZXJzIGV2ZXIgYWRtaXR0ZWQgdGhhdCBQaGlsaXAgaXMgdmlvbGF0aW5nIHJpZ2h0cyBhbmQgcHJvdm9raW5nIHdhciwKICAgICAgICAgICAgICAgICAgICB3aGVuIGhlIGlzIHRodXMgb3Blbmx5IHZpb2xhdGluZyByaWdodHMgYW5kIHN1YmR1aW5nIGNpdGllcywgYnV0IHdoZW4gb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgdXJnZSB5b3Ugbm90IHRvIGdpdmUgd2F5IHRvIFBoaWxpcCBub3Igc3VibWl0IHRvIHRoZXNlIGxvc3NlcywgdGhleSBzYXkgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBwcm92b2tpbmcgd2FyPyBJdCBpcyBiZWNhdXNlIHRoZXkgd2FudCB0aGUgYmxhbWUgZm9yIHRoZSBzdWZmZXJpbmdzIHRoYXQgdGhlIHdhcgogICAgICAgICAgICAgICAgICAgIHdpbGwgZW50YWls4oCUZm9yIGl0IGlzIGluZXZpdGFibGUsIHllcywgaW5ldml0YWJsZSB0aGF0IHRoZSB3YXIgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgY2F1c2UgbXVjaCBkaXN0cmVzc+KAlHRvIGJlIGxhaWQgYXQgdGhlIGRvb3JzIG9mIHRob3NlIHdobyBiZWxpZXZlIHRoZXkKICAgICAgICAgICAgICAgICAgICBhcmUgeW91ciB3aXNlc3QgY291bnNlbGxvcnMuIDxtaWxlc3RvbmUgbj0iNTkiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgY29udmluY2VkIHRoYXQgaWYgeW91IG9mZmVyIGEgd2hvbGUtaGVhcnRlZCBhbmQgdW5hbmltb3VzIG9wcG9zaXRpb24gdG8gUGhpbGlwLAogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIGJlYXQgaGltIGFuZCB0aGV5IHdpbGwgaGF2ZSBubyBmdXJ0aGVyIGNoYW5jZSBvZiBlYXJuaW5nIGhpcyBwYXksIGJ1dAogICAgICAgICAgICAgICAgICAgIHRoYXQgaWYgYXQgdGhlIGZpcnN0IGFsYXJtIG9mIHdhciB5b3UgdGhyb3cgdGhlIGJsYW1lIG9uIGNlcnRhaW4gcGVyc29ucyBhbmQKICAgICAgICAgICAgICAgICAgICBkZXZvdGUgeW91ciBlbmVyZ2llcyB0byBicmluZ2luZyB0aGVtIHRvIHRyaWFsLCB0aGV5IHRoZW1zZWx2ZXMgYnkgYWNjdXNpbmcgdGhlbQogICAgICAgICAgICAgICAgICAgIHdpbGwgZ2FpbiBib3RoIHRoZWlyIGVuZHPigJRyZXB1dGF0aW9uIHdpdGggeW91IGFuZCBtb25leSBmcm9tIGhpbSwKICAgICAgICAgICAgICAgICAgICB3aGlsZSB5b3Ugd2lsbCBwdW5pc2ggdGhlIG1lbiB3aG8gaGF2ZSBzcG9rZW4gaW4geW91ciBpbnRlcmVzdHMgZm9yIHRoZSBmYXVsdHMKICAgICAgICAgICAgICAgICAgICB3aGljaCB5b3Ugb3VnaHQgdG8gcHVuaXNoIGluIHRoZWlyIGFjY3VzZXJzLiA8bWlsZXN0b25lIG49IjYwIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggYXJlIHRoZWlyIGhvcGVzLCBhbmQgc3VjaCBpcyB0aGUgZGVzaWduIG9mIHRoZSBhY2N1c2F0aW9uIHRoYXQKICAgICAgICAgICAgICAgICAgICDigJxjZXJ0YWluIHBlcnNvbnMgd2lzaCB0byBwcm92b2tlIHdhci7igJ0gQnV0IEkgYW0gYWJzb2x1dGVseQogICAgICAgICAgICAgICAgICAgIGNlcnRhaW4gdGhhdCwgd2l0aG91dCB3YWl0aW5nIGZvciBhbnkgQXRoZW5pYW4gdG8gcHJvcG9zZSBhIGRlY2xhcmF0aW9uIG9mIHdhciwKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgaXMgaW4gcG9zc2Vzc2lvbiBvZiBtdWNoIG9mIG91ciB0ZXJyaXRvcnkgYW5kIGhhcyBqdXN0IGRpc3BhdGNoZWQgYSBmb3JjZQogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgQ2FyZGlhLiBJZiwgaG93ZXZlciwgd2UgbGlrZSB0byBwcmV0ZW5kIHRoYXQgaGUgaXMgbm90IGF0IHdhciB3aXRoIHVzLAogICAgICAgICAgICAgICAgICAgIGhlIHdvdWxkIGJlIHRoZSBncmVhdGVzdCBmb29sIGFsaXZlIGlmIGhlIHRyaWVkIHRvIGRpc3Byb3ZlIHRoYXQ7IGZvciB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIHZpY3RpbXMgZGVueSB0aGUgd3JvbmcsIHdoYXQgc2hvdWxkIHRoZSBtYWxlZmFjdG9yIGRvPyA8bWlsZXN0b25lIG49IjYxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIG91ciB0dXJuIGNvbWVzLCB3aGF0IHNoYWxsIHdlIHNheSB0aGVuPyBGb3Igb2YgY291cnNlIGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCBkZW55IHRoYXQgaGUgaXMgYXR0YWNraW5nIHVzLCBqdXN0IGFzIGhlIGRlbmllZCB0aGF0IGhlIHdhcyBhdHRhY2tpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIE9yZXVzLCB3aGVuIGhpcyB0cm9vcHMgd2VyZSBhbHJlYWR5IGluIHRoZWlyIHRlcnJpdG9yeSwgb3IgdGhlIFBoZXJhZWFucwogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB0aGF0LCB3aGVuIGhlIHdhcyBhY3R1YWxseSBhc3NhdWx0aW5nIHRoZWlyIHdhbGxzLCBvciB0aGUgT2x5bnRoaWFucyBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBzdGFydCwgdW50aWwgaGUgd2FzIGluc2lkZSB0aGVpciBmcm9udGllciB3aXRoIGhpcyBhcm15LiBPciBzaGFsbCB3ZSBzYXksCiAgICAgICAgICAgICAgICAgICAgZXZlbiBhdCB0aGF0IGhvdXIsIHRoYXQgdGhvc2Ugd2hvIGJpZCB1cyByZXBlbCBoaW0gYXJlIHByb3Zva2luZyB3YXI/IElmIHNvLAogICAgICAgICAgICAgICAgICAgIHRoZXJlIGlzIG5vdGhpbmcgbGVmdCBidXQgc2xhdmVyeSwgZm9yIHRoZXJlIGlzIG5vIG90aGVyIGFsdGVybmF0aXZlLiA8bWlsZXN0b25lIG49IjYyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB5b3UgaGF2ZSBub3QgdGhlIHNhbWUgaW50ZXJlc3RzIGF0IHN0YWtlIGFzCiAgICAgICAgICAgICAgICAgICAgc29tZSBvZiB0aGUgb3RoZXJzLCBmb3IgaXQgaXMgbm90IHlvdXIgc3ViamVjdGlvbiB0aGF0IFBoaWxpcCBhaW1zIGF0OyBubywgYnV0CiAgICAgICAgICAgICAgICAgICAgeW91ciBjb21wbGV0ZSBhbm5paGlsYXRpb24uIEZvciBoZSBpcyB3ZWxsIGFzc3VyZWQgdGhhdCB5b3Ugd2lsbCBub3QgY29uc2VudCB0bwogICAgICAgICAgICAgICAgICAgIGJlIHNsYXZlczsgb3IsIGlmIHlvdSBjb25zZW50LCB3aWxsIG5ldmVyIGxlYXJuIGhvdyB0byBiZSBzbGF2ZXMsIGZvciB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgYWNjdXN0b21lZCB0byBydWxlIG90aGVyczsgYnV0IHRoYXQgeW91IHdpbGwgYmUgYWJsZSwgaWYgeW91IHNlaXplIHlvdXIgY2hhbmNlcywKICAgICAgICAgICAgICAgICAgICB0byBjYXVzZSBoaW0gbW9yZSB0cm91YmxlIHRoYW4gYWxsIHRoZSByZXN0IG9mIHRoZSB3b3JsZC4gRm9yIHRoYXQgcmVhc29uIGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCBub3Qgc3BhcmUgeW91LCBpZiBoZSBnZXRzIHlvdSBpbiBoaXMgcG93ZXIuIDxtaWxlc3RvbmUgbj0iNjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVyZWZvcmUgeW91IG11c3QgbmVlZHMgYmVhciBpbiBtaW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGlzIHdpbGwgYmUgYSBsaWZlLWFuZC1kZWF0aCBzdHJ1Z2dsZSwgYW5kIHRoZSBtZW4gd2hvIGhhdmUgc29sZAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgdG8gUGhpbGlwIG11c3QgYmUgcHVibGljbHkgY3VkZ2VsbGVkIHRvIGRlYXRoOyBmb3IgaXQgaXMgaW1wb3NzaWJsZSwKICAgICAgICAgICAgICAgICAgICBpbXBvc3NpYmxlIHRvIHF1ZWxsIHRoZSBmb2VzIHdpdGhvdXQsIHVudGlsIHlvdSBoYXZlIHB1bmlzaGVkIHRoZSBmb2VzIHdpdGhpbgogICAgICAgICAgICAgICAgICAgIHlvdXIgZ2F0ZXMsIGJ1dCBpZiB5b3UgbGV0IHRoZXNlIHN0YW5kIGFzIHN0dW1ibGluZy1ibG9ja3MgaW4geW91ciBwYXRoLCB5b3UKICAgICAgICAgICAgICAgICAgICBtdXN0IGZhaWwgYWdhaW5zdCB0aGUgb3RoZXJzLiA8bWlsZXN0b25lIG49IjY0IiB1bml0PSJzZWN0aW9uIiAvPldoYXQgZG8geW91CiAgICAgICAgICAgICAgICAgICAgaW1hZ2luZSBpcyBoaXMgbW90aXZlIGluIG91dHJhZ2luZyB5b3Ugbm934oCUSSB0aGluayBubyBvdGhlciB0ZXJtCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmVzIGhpcyBjb25kdWN04oCUb3Igd2h5IGlzIGl0IHRoYXQsIGluIGRlY2VpdmluZyB0aGUgb3RoZXJzLCBoZQogICAgICAgICAgICAgICAgICAgIGF0IGxlYXN0IGNvbmZlcnMgYmVuZWZpdHMgdXBvbiB0aGVtLCBidXQgaW4geW91ciBjYXNlIGhlIGlzIHJlc29ydGluZyB0bwogICAgICAgICAgICAgICAgICAgIHRocmVhdHM/IEZvciBleGFtcGxlLCB0aGUgVGhlc3NhbGlhbnMgd2VyZSBiZWd1aWxlZCBieSBoaXMgZ2VuZXJvc2l0eSBpbnRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBzdGF0ZSBvZiBzZXJ2aXR1ZGU7IG5vIHdvcmRzIGNhbiBkZXNjcmliZSBob3cgaGUgZm9ybWVybHkgZGVjZWl2ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWlzZXJhYmxlIE9seW50aGlhbnMgYnkgaGlzIGdpZnQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDQ4MTQiIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+IGFuZCBtYW55IG90aGVyIHBsYWNlczsgdGhlIFRoZWJhbnMgaGUgaXMgbm93CiAgICAgICAgICAgICAgICAgICAgbWlzbGVhZGluZywgaGF2aW5nIGhhbmRlZCBvdmVyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBrZXk9InRnbiw3MDAyNjgzIj5Cb2VvdGlhPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgdG8gdGhlbSBhbmQgcmVsaWV2ZWQgdGhlbSBvZiBhIGxvbmcgYW5kIHRyeWluZyB3YXIuIDxtaWxlc3RvbmUgbj0iNjUiIHVuaXQ9InNlY3Rpb24iIC8+U28gZWFjaCBvZiB0aGVzZSBzdGF0ZXMgaGFzIHJlYXBlZCBzb21lIGJlbmVmaXQgZnJvbSBoaW0sIGJ1dCB3aGlsZQogICAgICAgICAgICAgICAgICAgIHNvbWUgaGF2ZSBhbHJlYWR5IHBhaWQgdGhlIHByaWNlIGJ5IHRoZWlyIHN1ZmZlcmluZ3MsIHRoZSBvdGhlcnMgaGF2ZSB5ZXQgdG8KICAgICAgICAgICAgICAgICAgICBzdWZmZXIgd2hhdGV2ZXIgc2hhbGwgZmFsbCB0byB0aGVpciBsb3QuIEFzIGZvciB5b3UsIEkgZG8gbm90IHNheSBob3cgZmFyIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiByb2JiZWQsIGJ1dCBpbiB0aGUgYWN0dWFsIG1ha2luZyBvZiB0aGUgcGVhY2UsIGhvdyBjb21wbGV0ZWx5IHlvdSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZGVjZWl2ZWQsIGhvdyBncmlldm91c2x5IHlvdSB3ZXJlIHJvYmJlZCEgV2VyZSB5b3Ugbm90IGRlY2VpdmVkIGFib3V0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw0MDAzOTYzIiBrZXk9InRnbiw0MDAzOTYzIj5QaG9jaXM8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4sIHRoZSBUaHJhY2Utd2FyZCBkaXN0cmljdHMsIERvcmlzY3VzLCBTZXJyaXVtLAogICAgICAgICAgICAgICAgICAgIENlcnNvYmxlcHRlcyBoaW1zZWxmPyBJcyBub3QgUGhpbGlwIG5vdyBob2xkaW5nIHRoZSBjaXR5IG9mIHRoZSBDYXJkaWFucywgYW5kCiAgICAgICAgICAgICAgICAgICAgYWRtaXR0aW5nIHRoYXQgaGUgaG9sZHMgaXQ/IDxtaWxlc3RvbmUgbj0iNjYiIHVuaXQ9InNlY3Rpb24iIC8+V2h5IHRoZW4gZG9lcyBoZQogICAgICAgICAgICAgICAgICAgIGRlYWwgaW4gdGhhdCB3YXkgd2l0aCB0aGUgb3RoZXIgR3JlZWtzLCBidXQgd2l0aCB5b3UgaW4gdGhpcyB3YXk/IEJlY2F1c2UgeW91cnMKICAgICAgICAgICAgICAgICAgICBpcyB0aGUgb25lIGNpdHkgaW4gdGhlIHdvcmxkIHdoZXJlIGltbXVuaXR5IGlzIGdyYW50ZWQgdG8gcGxlYWQgb24gYmVoYWxmIG9mIG91cgogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMsIGFuZCB3aGVyZSBhIG1hbiB3aG8gaGFzIGJlZW4gYnJpYmVkIGNhbiBzYWZlbHkgYWRkcmVzcyB5b3UgaW4gcGVyc29uLAogICAgICAgICAgICAgICAgICAgIGV2ZW4gd2hlbiB5b3UgaGF2ZSBiZWVuIHJvYmJlZCBvZiB5b3VyIG93bi4gSXQgd291bGQgbm90IGhhdmUgYmVlbiBzYWZlIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4gdG8gcGxlYWQgUGhpbGlwJ3MKICAgICAgICAgICAgICAgICAgICBjYXVzZSwgdW5sZXNzIHRoZSBPbHludGhpYW4gZGVtb2NyYWN5IGhhZCBzaGFyZWQgaW4gdGhlIGVuam95bWVudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICByZXZlbnVlcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDgxNCIga2V5PSJ0Z24sNjAwNDgxNCI+UG90aWRhZWE8L3BsYWNlTmFtZT4uIDxtaWxlc3RvbmUgbj0iNjciIHVuaXQ9InNlY3Rpb24iIC8+SXQgd291bGQgbm90IGhhdmUgYmVlbiBzYWZlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPiB0byBwbGVhZCBQaGlsaXAncyBjYXVzZSwgaWYgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9uZXJzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPiBoYWQgbm90IHNoYXJlZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBhZHZhbnRhZ2VzIHRoYXQgUGhpbGlwIGNvbmZlcnJlZCwgd2hlbiBoZSBleHBlbGxlZCB0aGVpciB0eXJhbnRzIGFuZAogICAgICAgICAgICAgICAgICAgIHJlc3RvcmVkIHRvIHRoZW0gdGhlaXIgQW1waGljdHlvbmljIHByaXZpbGVnZXMuIEl0IHdvdWxkIG5vdCBoYXZlIGJlZW4gc2FmZSBhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+LCB1bnRpbCBoZSBnYXZlIHRoZW0gYmFjawogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MyIga2V5PSJ0Z24sNzAwMjY4MyI+Qm9lb3RpYTwvcGxhY2VOYW1lPiBhbmQgd2lwZWQgb3V0IHRoZSBQaG9jaWFucy4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhvdWdoIFBoaWxpcCBoYXMgbm90IG9ubHkgcm9iYmVkIHlvdSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+IGFuZCB0aGUgQ2FyZGlhbiB0ZXJyaXRvcnksCiAgICAgICAgICAgICAgICAgICAgYnV0IGlzIGFsc28gdHVybmluZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGludG8gYQogICAgICAgICAgICAgICAgICAgIGZvcnRyZXNzIHRvIG92ZXJhd2UgdXMgYW5kIGlzIGV2ZW4gbm93IG9uIGhpcyB3YXkgdG8gYXR0YWNrIEJ5emFudGl1bSwgaXQgaXMKICAgICAgICAgICAgICAgICAgICBzYWZlIHRvIHNwZWFrIG9uIFBoaWxpcCdzIGJlaGFsZi4gSW5kZWVkLCBvZiB0aGVzZSBwb2xpdGljaWFucywgc29tZSB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIGJlZ2dhcnMgYXJlIHN1ZGRlbmx5IGdyb3dpbmcgcmljaCwgc29tZSB1bmtub3duIHRvIG5hbWUgYW5kIGZhbWUgYXJlIG5vdyBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBob25vdXIgYW5kIGRpc3RpbmN0aW9uOyB3aGlsZSB5b3UsIG9uIHRoZSBjb250cmFyeSwgaGF2ZSBwYXNzZWQgZnJvbSBob25vdXIgdG8KICAgICAgICAgICAgICAgICAgICBkaXNob25vdXIsIGZyb20gYWZmbHVlbmNlIHRvIGRlc3RpdHV0aW9uLiA8bWlsZXN0b25lIG49IjY5IiB1bml0PSJzZWN0aW9uIiAvPkZvcgogICAgICAgICAgICAgICAgICAgIGEgY2l0eSdzIHdlYWx0aCBJIGhvbGQgdG8gYmUgYWxsaWVzLCBjcmVkaXQsIGdvb2R3aWxsLCBhbmQgb2YgYWxsIHRoZXNlIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICBkZXN0aXR1dGUuIEFuZCBpdCBpcyBiZWNhdXNlIHlvdSBhcmUgaW5kaWZmZXJlbnQgdG8gdGhlc2UgdGhpbmdzIGFuZCBhbGxvdyB0aGVtCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgdGFrZW4gZnJvbSB5b3UgaW4gdGhpcyB3YXksIHRoYXQgUGhpbGlwIGlzIHByb3NwZXJvdXMgYW5kIHBvd2VyZnVsIGFuZAogICAgICAgICAgICAgICAgICAgIGZvcm1pZGFibGUgdG8gR3JlZWtzIGFuZCBiYXJiYXJpYW5zIGFsaWtlLCB3aGlsZSB5b3UgYXJlIGRlc2VydGVkIGFuZAogICAgICAgICAgICAgICAgICAgIGh1bWlsaWF0ZWQsIGZhbW91cyBmb3IgeW91ciB3ZWxsLXN0b2NrZWQgbWFya2V0cywgYnV0IGluIHByb3Zpc2lvbiBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgIHByb3BlciBuZWVkcywgY29udGVtcHRpYmxlLiA8bWlsZXN0b25lIG49IjcwIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WWV0IEkgb2JzZXJ2ZSB0aGF0IHNvbWUgb2Ygb3VyIHNwZWFrZXJzIGRvIG5vdCB1cmdlIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgcG9saWN5IGZvciB5b3UgYXMgZm9yIHRoZW1zZWx2ZXM7IGZvciB5b3UsIHRoZXkgc2F5LCBvdWdodCB0byByZW1haW4gcXVpZXQKICAgICAgICAgICAgICAgICAgICBldmVuIHdoZW4geW91IGFyZSB3cm9uZ2VkOyB0aGVtc2VsdmVzIGNhbm5vdCByZW1haW4gcXVpZXQgYW1vbmcgeW91LCB0aG91Z2ggbm8KICAgICAgICAgICAgICAgICAgICBvbmUgZG9lcyB0aGVtIHdyb25nLiBBbmQgeWV0LCByYWlsbGVyeSBhcGFydCwgc3VwcG9zZSBzb21lb25lIHNob3VsZCBhc2ssCiAgICAgICAgICAgICAgICAgICAg4oCcVGVsbCBtZSwgQXJpc3RvbWVkZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BbiB1bmtub3duCiAgICAgICAgICAgICAgICAgICAgICAgIG9wcG9uZW50LiBJZiB3aXRoIERpbmRvcmYgd2UgYWRvcHQgdGhlIHZ1bGdhdGUsIGl0IHdpbGwgcmVmZXIgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuIGFjdG9yIEFyaXN0b2RlbXVzLCB3aG8gd2FzIGEgbWVtYmVyIG9mIHRoZSBmaXJzdCBlbWJhc3N5IHRvIFBoaWxpcAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgaXMgbWVudGlvbmVkIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjIxIiB2YWxpZD0ieWVzIj5EZW0uIDE4LjIxPC9iaWJsPiBhbmQgaW4gc2V2ZXJhbAogICAgICAgICAgICAgICAgICAgICAgICBwYXNzYWdlcyBvZiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOSIgdmFsaWQ9InllcyI+RGVtLiAxOTwvYmlibD48L25vdGU+IHdoeSwgd2hlbiB5b3Uga25vdwogICAgICAgICAgICAgICAgICAgIHBlcmZlY3RseSB3ZWxs4oCUZm9yIG5vIG9uZSBpcyBpZ25vcmFudCBvZiBzdWNoIG1hdHRlcnPigJR0aGF0IGEKICAgICAgICAgICAgICAgICAgICBwcml2YXRlIHN0YXRpb24gaXMgc2VjdXJlIGFuZCBmcmVlIGZyb20gcmlzaywgYnV0IHRoZSBsaWZlIG9mIGEgcG9saXRpY2lhbiBpcwogICAgICAgICAgICAgICAgICAgIHByZWNhcmlvdXMsIG9wZW4gdG8gYXR0YWNrLCBhbmQgZnVsbCBvZiB0cmlhbHMgYW5kIG1pc2ZvcnR1bmVzIGV2ZXJ5IGRheSwgd2h5IGRvCiAgICAgICAgICAgICAgICAgICAgeW91IG5vdCBjaG9vc2UgdGhlIHF1aWV0LCBzZXF1ZXN0ZXJlZCBsaWZlIGluc3RlYWQgb2YgdGhlIGxpZmUgb2YKICAgICAgICAgICAgICAgICAgICBwZXJpbD/igJ0gV2hhdCB3b3VsZCB5b3UgcmVwbHk/IDxtaWxlc3RvbmUgbj0iNzEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmCiAgICAgICAgICAgICAgICAgICAgd2Ugc2hvdWxkIGdyYW50IHRoZSB0cnV0aCBvZiB3aGF0IHdvdWxkIGJlIHlvdXIgYmVzdCBwb3NzaWJsZSBhbnN3ZXIsIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgZG8gYWxsIHRoaXMgZm9yIGxvdmUgb2YgZ2xvcnkgYW5kIHJlbm93biwgSSB3b25kZXIgd2hhdCBlYXJ0aGx5IHJlYXNvbiB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGZvciB0aGlua2luZyB0aGF0IHlvdSB5b3Vyc2VsZiBvdWdodCBmb3IgdGhhdCBvYmplY3QgdG8gbWFrZSBldmVyeSBleGVydGlvbiwKICAgICAgICAgICAgICAgICAgICBmYWNpbmcgdG9pbCBhbmQgZGFuZ2VyLCB3aGVyZWFzIHlvdSBhZHZpc2UgdGhlIFN0YXRlIHRvIGFiYW5kb24gc3VjaCBlZmZvcnRzIGluCiAgICAgICAgICAgICAgICAgICAgc2hlZXIgaW5kaWZmZXJlbmNlLiBGb3IgdGhpcyB5b3UgY2Fubm90IHNheeKAlHRoYXQgaXQgaXMgeW91ciBkdXR5IHRvCiAgICAgICAgICAgICAgICAgICAgbWFrZSBhIGZpZ3VyZSBpbiB0aGUgU3RhdGUsIGJ1dCB0aGF0IHRoZSBTdGF0ZSBpcyBvZiBubyBpbXBvcnRhbmNlIGluIHRoZSBHcmVlawogICAgICAgICAgICAgICAgICAgIHdvcmxkLiA8bWlsZXN0b25lIG49IjcyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVyZSBpcyBhbm90aGVyIHRoaW5nIEkgZG8gbm90CiAgICAgICAgICAgICAgICAgICAgc2Vl4oCUdGhhdCBpdCBpcyBzYWZlIGZvciB0aGUgU3RhdGUgdG8gbWluZCBpdHMgb3duIGJ1c2luZXNzLCBidXQKICAgICAgICAgICAgICAgICAgICBkYW5nZXJvdXMgZm9yIHlvdSBpZiB5b3UgZG8gbm90IGdvIGJleW9uZCB5b3VyIGZlbGxvdy1jaXRpemVucyBpbiBtZWRkbGluZyB3aXRoCiAgICAgICAgICAgICAgICAgICAgYWZmYWlycy4gPG1pbGVzdG9uZSBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5OYXksIG9uIHRoZSBjb250cmFyeSwgSSBkbyBmb3Jlc2VlCiAgICAgICAgICAgICAgICAgICAgdGhlIHV0bW9zdCBkYW5nZXIsIHRvIHlvdSBmcm9tIHlvdXIgYnVzdGxpbmcgYW5kIG1lZGRsaW5nLCBidXQgdG8gdGhlIFN0YXRlIGZyb20KICAgICAgICAgICAgICAgICAgICBpdHMgaW5hY3Rpdml0eS4gQnV0IHlvdSBtYXkgc2F5IHRoYXQgeW91IGhhdmUgdGhlIGhvbm91ciBvZiB5b3VyIGdyYW5kZmF0aGVyIGFuZAogICAgICAgICAgICAgICAgICAgIGZhdGhlciB0byB1cGhvbGQsIGFuZCBpdCB3b3VsZCBiZSBzY2FuZGFsb3VzIHRvIHN1YnZlcnQgaXQgaW4geW91ciBwZXJzb24sIGJ1dAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIFN0YXRlIGhhcyBpbmhlcml0ZWQgb25seSBuYW1lbGVzcyBhbmQgcGFsdHJ5IGV4cGxvaXRzIGZyb20gb3VyCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzLiBCdXQgdGhhdCB0b28gaXMgdW50cnVlOyBmb3IgeW91IGhhZCBhIHRoaWVmIGZvciB5b3VyIGZhdGhlciwgaWYgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgbGlrZSB5b3UsIGJ1dCBvdXIgZmF0aGVycywgYXMgYWxsIHRoZSBHcmVla3Mga25vdywgcHJlc2VydmVkIHRoZW0gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBkZWFkbGllc3QgcGVyaWxzLiA8bWlsZXN0b25lIG49Ijc0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbmRlZWQgdGhlcmUgYXJlIHNvbWUKICAgICAgICAgICAgICAgICAgICB3aG9zZSBtYW5hZ2VtZW50IGJvdGggb2YgcHJpdmF0ZSBhbmQgb2YgcHVibGljIGJ1c2luZXNzIGlzIG5laXRoZXIgZmFpciBub3IKICAgICAgICAgICAgICAgICAgICBjb25zdGl0dXRpb25hbDsgZm9yIGhvdyBpcyBpdCBmYWlyIHRoYXQgc29tZSBvZiB0aGVzZSBtZW4sIGp1c3QgcmVsZWFzZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIGphaWwsIHNob3VsZCBiZSBpZ25vcmFudCBvZiB0aGVpciBvd24gd29ydGgsIHdoaWxlIHRoYXQgc3RhdGUsIHdoaWNoIHdhcyBvbmNlCiAgICAgICAgICAgICAgICAgICAgdGhlIGNoYW1waW9uIG9mIHRoZSByZXN0IGFuZCBtYWludGFpbmVkIHRoZSBwcmUtZW1pbmVuY2UsIHNob3VsZCBub3cgYmUgc3VuayBpbgogICAgICAgICAgICAgICAgICAgIGFsbCBkaXNob25vdXIgYW5kIGh1bWlsaWF0aW9uPyA8bWlsZXN0b25lIG49Ijc1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlLCB0aG91Z2ggdGhlcmUgaXMgbXVjaCB0aGF0IEkgY291bGQgc2F5IG9uIG1hbnkKICAgICAgICAgICAgICAgICAgICB0b3BpY3MsIEkgd2lsbCBmb3JiZWFyOyBmb3IgaW5kZWVkIGl0IGlzIG5vdCwgSSB0aGluaywgbGFjayBvZiBzcGVlY2hlcyBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBub3cgb3IgYXQgYW55IG90aGVyIHRpbWUgdGhhdCBpcyB0aGUgY2F1c2Ugb2Ygb3VyIGRpc3RyZXNzLCBidXQgd2hlbiB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGxpc3RlbmVkIHRvIHRoZSByaWdodCBzb3J0IG9mIGFyZ3VtZW50cywgYW5kIHdoZW4geW91IGFyZSB1bmFuaW1vdXMgYXMgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICB2YWxpZGl0eSwgeW91IHNpdCBvbiBhbmQgZ2l2ZSBlcXVhbCBhdHRlbnRpb24gdG8gdGhvc2Ugd2hvIHdpc2ggdG8gb3ZlcnRocm93IGFuZAogICAgICAgICAgICAgICAgICAgIGRpc3RvcnQgdGhlbS4gSXQgaXMgbm90IHRoYXQgeW91IGRvIG5vdCByZWNvZ25pemUgdGhlc2Ugc3BlYWtlcnMsIGZvciBhcyBzb29uIGFzCiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgc2VlbiB0aGVtLCB5b3Uga25vdyBleGFjdGx5IHdobyBpcyBzcGVha2luZyBmb3IgcGF5IGFuZCBhY3RpbmcgYXMKICAgICAgICAgICAgICAgICAgICBQaGlsaXAncyBhZ2VudCwgYW5kIHdobyBpcyBzaW5jZXJlbHkgZGVmZW5kaW5nIHlvdXIgYmVzdCBpbnRlcmVzdHM7IGJ1dCB5b3VyIGFpbQogICAgICAgICAgICAgICAgICAgIGlzIHRvIGZpbmQgZmF1bHQgd2l0aCB0aGVzZSBsYXR0ZXIgYW5kLCBieSB0dXJuaW5nIHRoZSBzdWJqZWN0IGludG8gcmlkaWN1bGUgYW5kCiAgICAgICAgICAgICAgICAgICAgcmFpbGxlcnksIHRvIGF2b2lkIGRvaW5nIGFueSBwYXJ0IG9mIHlvdXIgb3duIGR1dHkuIDxtaWxlc3RvbmUgbj0iNzYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgeW91IGhhdmUgdGhlIHRydXRoIHNwb2tlbiB3aXRoIGFsbCBmcmVlZG9tLCBzaW1wbHkgaW4gZ29vZHdpbGwKICAgICAgICAgICAgICAgICAgICBhbmQgZm9yIHRoZSBiZXN04oCUbm8gc3BlZWNoIHBhY2tlZCBieSBmbGF0dGVyeSB3aXRoIG1pc2NoaWVmIGFuZAogICAgICAgICAgICAgICAgICAgIGRlY2VpdCwgYW5kIGludGVuZGVkIHRvIHB1dCBtb25leSBpbnRvIHRoZSBzcGVha2VyJ3MgcG9ja2V0IGFuZCB0aGUgY29udHJvbCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBTdGF0ZSBpbnRvIG91ciBlbmVtaWVzJyBoYW5kcy4gRWl0aGVyLCB0aGVuLCB5b3UgbXVzdCBhYmFuZG9uIHRoZXNlIGhhYml0cwogICAgICAgICAgICAgICAgICAgIG9mIHlvdXJzLCBvciB5b3UgbXVzdCB0aHJvdyB0aGUgYmxhbWUgZm9yIGFsbCBvdXIgZmFpbHVyZXMgb24gbm8gb25lIGJ1dAogICAgICAgICAgICAgICAgICAgIHlvdXJzZWx2ZXMuPC9wPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgbWF0dGVycyB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91IGFyZSBkZWJhdGluZywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYXJlCiAgICAgICAgICAgICAgICAgICAgdG8gbXkgbWluZCBzbyBpbXBvcnRhbnQgYW5kIGV2ZW4gdml0YWwgdG8gdGhlIFN0YXRlLCB0aGF0IEkgd2lsbCBlbmRlYXZvdXIgdG8KICAgICAgICAgICAgICAgICAgICBvZmZlciB5b3Ugd2hhdCBJIGNvbnNpZGVyIHByb2ZpdGFibGUgYWR2aWNlIG9uIHRoZSBzdWJqZWN0LiBXaGlsZSB0aGUgZmF1bHRzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoYXZlIHByb2R1Y2VkIHRoaXMgdW5oYXBweSBzdGF0ZSBvZiB0aGluZ3MgYXJlIG5laXRoZXIgZmV3IG5vciByZWNlbnRseQogICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVkLCB0aGVyZSBpcyBub3RoaW5nLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBtb3JlIHZleGluZyBhdCB0aGUgcHJlc2VudCB0aW1lIHRoYW4gdGhlIHdheSBpbiB3aGljaAogICAgICAgICAgICAgICAgICAgIHlvdSBkZXRhY2ggeW91ciB0aG91Z2h0cyBmcm9tIGFmZmFpcnMsIGFuZCBkaXNwbGF5IGFuIGludGVyZXN0IG9ubHkgc28gbG9uZyBhcwogICAgICAgICAgICAgICAgICAgIHlvdSBzaXQgaGVyZSBsaXN0ZW5pbmcsIG9yIHdoZW4gc29tZSBmcmVzaCBpdGVtIG9mIG5ld3MgYXJyaXZlczsgYWZ0ZXIgdGhhdCwKICAgICAgICAgICAgICAgICAgICBlYWNoIG1hbiBnb2VzIGhvbWUsIGFuZCBub3Qgb25seSBwYXlzIG5vIGF0dGVudGlvbiB0byBwdWJsaWMgYnVzaW5lc3MsIGJ1dCBkb2VzCiAgICAgICAgICAgICAgICAgICAgbm90IGV2ZW4gcmVjYWxsIGl0IHRvIG1pbmQuIDwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGUgZXh0ZW50IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlY2tsZXNzbmVzcyBhbmQgcmFwYWNpdHkgdGhhdCBQaGlsaXAgc2hvd3MgaW4gaGlzIGRlYWxpbmdzIHdpdGggYWxsIG1lbiBpcwogICAgICAgICAgICAgICAgICAgIGluZGVlZCBhcyBncmVhdCBhcyBpdCBoYXMgYmVlbiBkZXNjcmliZWQgdG8geW91OyBidXQgaG93IGltcG9zc2libGUgaXQgaXMgdG8KICAgICAgICAgICAgICAgICAgICBzdGF5IGhpbSBpbiB0aGlzIGNhcmVlciBieSBhcmd1bWVudCBhbmQgZGVjbGFtYXRpb24sIGFzc3VyZWRseSBubyBvbmUgaXMKICAgICAgICAgICAgICAgICAgICBpZ25vcmFudC4gRm9yIGluZGVlZCwgaWYgbm8gc2luZ2xlIHRoaW5nIGVsc2UgY2FuIHRlYWNoIGEgbWFuIHRoZSB0cnV0aCBvZiB0aGF0LAogICAgICAgICAgICAgICAgICAgIGxldCBoaW0gd2VpZ2ggdGhlIGZvbGxvd2luZyBjb25zaWRlcmF0aW9uLiBXaGVuIHdlIGhhdmUgaGFkIHRvIHNwZWFrIGluIGRlZmVuY2UKICAgICAgICAgICAgICAgICAgICBvZiBvdXIgcmlnaHRzLCB3ZSBoYXZlIG5ldmVyIHlldCBiZWVuIGRlZmVhdGVkIG9yIHByb3ZlZCBpbiB0aGUgd3JvbmcsIGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGNhc2Ugd2UgdmFucXVpc2ggYWxsIG91ciBvcHBvbmVudHMgYW5kIGhhdmUgdGhlIGJlc3Qgb2YgaXQgaW4gYXJndW1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPklzLCB0aGVuLCBQaGlsaXAgYW55IHRoZSB3b3JzZSBvZmYgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFueSB0aGUgYmV0dGVyPyBGYXIKICAgICAgICAgICAgICAgICAgICBmcm9tIGl0OyBmb3IgYWZ0ZXJ3YXJkcywgd2hlbiBoZSB0YWtlcyB1cCBhcm1zIGFuZCBtYXJjaGVzIHRvIGJhdHRsZSwgcmVhZHkgdG8KICAgICAgICAgICAgICAgICAgICByaXNrIGFsbCBoZSBoYXMsIGFuZCB3ZSBzaXQgaWRsZSwgYWxpa2UgdGhvc2Ugd2hvIGhhdmUgcGxlYWRlZCBvdXIgY2F1c2UgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGhhdmUgYmVlbiBsaXN0ZW5pbmcgdG8gdGhlbSwgdGhlbiwgbmF0dXJhbGx5IGVub3VnaCwgZGVlZHMgb3V0d2VpZ2gKICAgICAgICAgICAgICAgICAgICB3b3JkcywgYW5kIHRoZSB3b3JsZCBpbiBnZW5lcmFsIGdpdmVzIGhlZWQsIG5vdCB0byB3aGF0IHdlIG9uY2Ugc2FpZCB3aXRoCiAgICAgICAgICAgICAgICAgICAganVzdGljZSBvciBtaWdodCBub3cgc2F5LCBidXQgdG8gd2hhdCB3ZSBkby4gQW5kIHdoYXQgd2UgZG8gaXMgaW5zdWZmaWNpZW50IHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdCBhbnkgb2YgdGhlIHZpY3RpbXMgb2YgaW5qdXN0aWNlOyBpbiBmYWN0LCBJIG5lZWQgc2F5IG5vIG1vcmUgYWJvdXQgaXQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYXMgdGhlIEdyZWVrcyBpbiBldmVyeSBjaXR5IGFyZQogICAgICAgICAgICAgICAgICAgIGRpdmlkZWQgaW50byB0aGVzZSB0d28gcGFydGllc+KAlHRoZSBvbmUgZGVzaXJpbmcgbmVpdGhlciB0byBydWxlIG90aGVycwogICAgICAgICAgICAgICAgICAgIGJ5IGZvcmNlIG5vciB0byBiZSBzbGF2ZXMgdG8gYW55IG1hbiwgYnV0IHRvIGVuam95IGxpYmVydHkgYW5kIGVxdWFsaXR5IHVuZGVyIGEKICAgICAgICAgICAgICAgICAgICBmcmVlIGNvbnN0aXR1dGlvbjsgdGhlIG90aGVyIGVhZ2VyIHRvIHJ1bGUgdGhlaXIgZmVsbG93LWNvdW50cnltZW4sIGJ1dCB0byB0YWtlCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgb3JkZXJzIGZyb20gc29tZSB0aGlyZCBwZXJzb24sIHdobyB0aGV5IHRoaW5rIHdpbGwgZW5hYmxlIHRoZW0gdG8gY29tcGFzcwogICAgICAgICAgICAgICAgICAgIHRoZWlyIGVuZHPigJRQaGlsaXAncyBmYWN0aW9uLCB0aG9zZSB3aG8gaGFua2VyIGFmdGVyIHR5cmFubmllcyBhbmQKICAgICAgICAgICAgICAgICAgICBvbGlnYXJjaGllcywgaGF2ZSBldmVyeXdoZXJlIGdhaW5lZCB0aGUgc3VwcmVtYWN5LCBhbmQgSSBkb3VidCB3aGV0aGVyIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSBzdGF0ZXMgdGhlcmUgaXMgYW55IHN0YWJsZSBkZW1vY3JhY3kgbGVmdCBleGNlcHQgb3VyIG93bi4gPC90cmFuc2xhdGlvbj4="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGlzIHN1cHJlbWFjeSBvZiB0aGUgY29uc3RpdHV0aW9uLW1vbmdlcnMKICAgICAgICAgICAgICAgICAgICB3aG8gcmVseSBvbiBQaGlsaXAncyBzdXBwb3J0IGhhcyBiZWVuIGdhaW5lZCBieSBhbGwgdGhlIGRldmljZXMgdXN1YWwgaW4KICAgICAgICAgICAgICAgICAgICBwb2xpdGljcywgZmlyc3QgYW5kIGZvcmVtb3N0IGJ5IHByb3ZpZGluZyBhIGRpc3BlbnNlciBvZiB3ZWFsdGggdG8gc3VjaCBhcyBjb3ZldAogICAgICAgICAgICAgICAgICAgIGl0LCBzZWNvbmRseSwgYW5kIG5vdCBsZXNzIGVmZmVjdGl2ZWx5LCBieSBoYXZpbmcgYXQgdGhlaXIgYmFjayBhIGZvcmNlIGNhcGFibGUKICAgICAgICAgICAgICAgICAgICBvZiBjcnVzaGluZyB0aGVpciBvcHBvbmVudHMgb24gYW55IG9jY2FzaW9uIHdoZW4gdGhleSBtYXkgY2FsbCB1cG9uIGl0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3ZSwgQXRoZW5pYW5zLCBhcmUgbm90IG9ubHkgYmVoaW5kaGFuZAogICAgICAgICAgICAgICAgICAgIGluIHRoaXMgcmVzcGVjdCwgYnV0IHdlIGNhbm5vdCBldmVuIHJvdXNlIG91cnNlbHZlcyBmcm9tIHNsZWVwOyB3ZSBhcmUgbGlrZSBtZW4KICAgICAgICAgICAgICAgICAgICB3aG8gaGF2ZSBkcnVuayBtYW5kcmFnb3JhIG9yIHNvbWUgc3VjaCBkcnVnLiBIZW5jZSwgSSBiZWxpZXZl4oCUZm9yIEkKICAgICAgICAgICAgICAgICAgICBtdXN0IHNwZWFrIHRoZSB0cnV0aCBhcyBJIGNvbmNlaXZlIGl04oCUd2UgaGF2ZSBiZWVuIHNvIGRpc2NyZWRpdGVkIGFuZAogICAgICAgICAgICAgICAgICAgIGRlc3Bpc2VkIHRoYXQgb2YgdGhvc2Ugd2hvIGFyZSBpbnZvbHZlZCBpbiBhY3R1YWwgZGFuZ2VyIHNvbWUgZGlzcHV0ZSB3aXRoIHVzCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhlIHJpZ2h0IG9mIGxlYWRlcnNoaXAsIG90aGVycyBhYm91dCB0aGUgbWVldGluZy1wbGFjZSBmb3IgYSBjb25ncmVzcywKICAgICAgICAgICAgICAgICAgICBhbmQgc29tZSBoYXZlIG1hZGUgdXAgdGhlaXIgbWluZHMgdG8gZGVmZW5kIHRoZW1zZWx2ZXMgc2luZ2xlLWhhbmRlZCByYXRoZXIgdGhhbgogICAgICAgICAgICAgICAgICAgIHdpdGggdXMuIDwvdHJhbnNsYXRpb24+"
translation['10.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGF0IGlzCiAgICAgICAgICAgICAgICAgICAgbXkgb2JqZWN0IGluIHRyZWF0aW5nIHRoaXMgbWF0dGVyIHNvIGZ1bGx5PyBGb3IgSSBwcm90ZXN0IGluIEhlYXZlbidzIG5hbWUgdGhhdAogICAgICAgICAgICAgICAgICAgIEkgaGF2ZSBubyBhbWJpdGlvbiB0byBpbmN1ciB5b3VyIGhvc3RpbGl0eS4gSXQgaXMgdGhhdCBlYWNoIG9uZSBvZiB5b3UsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBtYXkga25vdyBhbmQgcmVhbGl6ZSB0aGlz4oCUdGhhdCBpbiBzdGF0ZSBhZmZhaXJzLCBhcyB3ZWxsIGFzCiAgICAgICAgICAgICAgICAgICAgaW4gcHJpdmF0ZSBsaWZlLCBkYWlseSBpbmRpZmZlcmVuY2UgYW5kIGNhcmVsZXNzbmVzcyBkbyBub3QgbWFrZSB0aGVpciByZXN1bHQKICAgICAgICAgICAgICAgICAgICBmZWx0IGF0IG9uY2Ugb24gZWFjaCBvY2Nhc2lvbiB3aGVuIGR1dHkgaXMgbmVnbGVjdGVkLCBidXQgY29tZSBob21lIHRvIHVzIHdoZW4KICAgICAgICAgICAgICAgICAgICB0aGUgdG90YWwgcmVzdWx0IG9mIG91ciBwb2xpY3kgaXMgc2Vlbi4gPC90cmFuc2xhdGlvbj4="
translation['10.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkxvb2sgYXQKICAgICAgICAgICAgICAgICAgICBTZXJyaXVtIGFuZCBEb3Jpc2N1czsgZm9yIHRoZXNlIHdlcmUgdGhlIHBsYWNlcyB0aGF0IHdlcmUgZGlzcmVnYXJkZWQKICAgICAgICAgICAgICAgICAgICBpbW1lZGlhdGVseSBhZnRlciB0aGUgcGVhY2UsIGFuZCBtYW55IG9mIHlvdSBwZXJoYXBzIGRvIG5vdCBldmVuIGtub3cgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBleGlzdGVuY2UuIFlldCBpdCB3YXMgeW91ciBuZWdsZWN0IGFuZCBhYmFuZG9ubWVudCBvZiB0aGVtIHRoYXQgcnVpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiBhbmQgQ2Vyc29ibGVwdGVzLCB3aG8gd2FzCiAgICAgICAgICAgICAgICAgICAgeW91ciBhbGx5LiBBZ2FpbiwgUGhpbGlwLCBzZWVpbmcgdGhhdCB0aGVzZSB3ZXJlIG92ZXJsb29rZWQgYW5kIHdlcmUgcmVjZWl2aW5nCiAgICAgICAgICAgICAgICAgICAgbm8gaGVscCBmcm9tIHlvdSwgcHJvY2VlZGVkIHRvIHJhemUgUG9ydGhtdXMgdG8gdGhlIGdyb3VuZCBhbmQgZm91bmRlZCBhIHR5cmFubnkKICAgICAgICAgICAgICAgICAgICBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gb3ZlciBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiBhcyBhIG1lbmFjZSB0byB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['10.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkJlY2F1c2Ugd2UgbmVnbGVjdGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhcmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lZ2FyYSI+TWVnYXJhPC9wbGFjZU5hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgIHZlcnkgbmVhcmx5IGNhcHR1cmVkLiBZb3Ugc2hvd2VkIG5vIGNvbmNlcm4gbm9yIGFueGlldHkgYWJvdXQgYW55IG9mIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZ3MsIGFuZCBnYXZlIG5vIGluZGljYXRpb24gdGhhdCB5b3Ugd291bGQgbm90IGFsbG93IFBoaWxpcCB0byBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIHRoZW07IHNvIGhlIGJvdWdodCB1cCBBbnRyb25lcyBhbmQgc29vbiBhZnRlcndhcmRzIGdvdCBPcmV1cyB1bmRlciBoaXMgY29udHJvbC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5JIHBhc3Mgb3ZlciBtYW55IG90aGVyIGluc3RhbmNlcywgc3VjaCBhcwogICAgICAgICAgICAgICAgICAgIFBoZXJhZSwgdGhlIHJhaWQgYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtYnJhY2lhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbWJyYWNpYSI+QW1icmFjaWE8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hc3NhY3JlcyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVsaXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEVsaXMiPkVsaXM8L3BsYWNlTmFtZT4sIGFuZCBjb3VudGxlc3MKICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Gb3IgdGhlIHBsYWNlcyBuYW1lZCBpbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaCBzZWUgZXNwZWNpYWxseSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMTIiIHZhbGlkPSJ5ZXMiPkRlbS4gOS4xMjwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gOS4xNSIgdmFsaWQ9InllcyI+RGVtLiA5LjE1PC9iaWJsPiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA5LjE3IiB2YWxpZD0ieWVzIj5EZW0uIDkuMTc8L2JpYmw+LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA5LjI3IiB2YWxpZD0ieWVzIj5EZW0uIDkuMjc8L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMzMiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDkuMzM8L2JpYmw+Ljwvbm90ZT4gSSBoYXZlIGdvbmUgaW50byB0aGVzZSBkZXRhaWxzLCBub3QgdG8gZ2l2ZSB5b3UgYQogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlIGNhdGFsb2d1ZSBvZiB0aGUgdmljdGltcyBvZiBQaGlsaXAncyBvcHByZXNzaW9uIGFuZCBpbmp1c3RpY2UsIGJ1dCB0bwogICAgICAgICAgICAgICAgICAgIG1ha2UgaXQgY2xlYXIgdG8geW91IHRoYXQgaGUgd2lsbCBuZXZlciBkZXNpc3QgZnJvbSBtb2xlc3RpbmcgYWxsIG9mIHVzIGFuZAogICAgICAgICAgICAgICAgICAgIGJyaW5naW5nIHVzIHVuZGVyIGhpcyBzd2F5LCB1bmxlc3Mgc29tZW9uZSByZXN0cmFpbnMgaGltLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMTIiIHZhbGlkPSJ5ZXMiPkRlbS4gOS4xMjwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gOS4xNSIgdmFsaWQ9InllcyI+RGVtLiA5LjE1PC9iaWJsPiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA5LjE3IiB2YWxpZD0ieWVzIj5EZW0uIDkuMTc8L2JpYmw+LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA5LjI3IiB2YWxpZD0ieWVzIj5EZW0uIDkuMjc8L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMzMiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDkuMzM8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['10.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHRoZXJlIGFyZSBzb21lCiAgICAgICAgICAgICAgICAgICAgd2hvLCB3aXRob3V0IHdhaXRpbmcgdG8gaGVhciB0aGUgc3BlZWNoZXMgb24gdGhlc2UgcXVlc3Rpb25zLCBhcmUgaW4gdGhlIGhhYml0CiAgICAgICAgICAgICAgICAgICAgb2YgYXNraW5nIGF0IG9uY2UsIOKAnFdoYXQgdGhlbiBvdWdodCB3ZSB0byBkbz/igJ3igJRub3QKICAgICAgICAgICAgICAgICAgICBpbiBvcmRlciB0byBkbyBpdCwgd2hlbiB0aGV5IGhhdmUgaGVhcmQgaXQsIGZvciBpZiBzbywgdGhleSB3b3VsZCBiZSB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGhlbHBmdWwgb2YgYWxsIGNpdGl6ZW5zLCBidXQgc2ltcGx5IHRvIGdldCByaWQgb2YgdGhlIHNwZWFrZXIuIE5ldmVydGhlbGVzcywgeW91CiAgICAgICAgICAgICAgICAgICAgbXVzdCBiZSB0b2xkIHdoYXQgeW91IG91Z2h0IHRvIGRvLiBGaXJzdCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IG11c3QgZml4IHRoaXMgZmlybWx5IGluIHlvdXIgbWluZHMsIHRoYXQgUGhpbGlwIGlzCiAgICAgICAgICAgICAgICAgICAgYXQgd2FyIHdpdGggdXMgYW5kIGhhcyBicm9rZW4gdGhlIHBlYWNlLCBhbmQgdGhhdCBoZSBpcyBpbGwtZGlzcG9zZWQgYW5kIGhvc3RpbGUKICAgICAgICAgICAgICAgICAgICB0byB0aGUgd2hvbGUgY2l0eSBhbmQgdG8gdGhlIHZlcnkgc29pbCBvbiB3aGljaCB0aGUgY2l0eSBzdGFuZHMsIGFuZCwgSSB3aWxsCiAgICAgICAgICAgICAgICAgICAgYWRkLCB0byB0aGUgZ29kcyB0aGF0IGR3ZWxsIGluIGl0OyBhbmQgbWF5IHRob3NlIHNhbWUgZ29kcyBjb21wbGV0ZSBoaXMgcnVpbiEKICAgICAgICAgICAgICAgICAgICBUaGUgY2hpZWYgb2JqZWN0LCBob3dldmVyLCBvZiBoaXMgYXJtcyBhbmQgaGlzIGRpcGxvbWFjeSBpcyBvdXIgZnJlZQogICAgICAgICAgICAgICAgICAgIGNvbnN0aXR1dGlvbiwgYW5kIG9uIG5vdGhpbmcgaW4gdGhlIHdvcmxkIGlzIGhlIG1vcmUgYmVudCB0aGFuIG9uIGl0cwogICAgICAgICAgICAgICAgICAgIGRlc3RydWN0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaXMgaW4gYSB3YXkgaW5ldml0YWJsZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgc2hvdWxkIG5vdyBiZSBhY3RpbmcgdGh1cy4gRm9yIG9ic2VydmUhIEhlIHdhbnRzIHRvIHJ1bGUsIGFuZCBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBtYWRlIHVwIGhpcyBtaW5kIHRoYXQgeW91LCBhbmQgeW91IG9ubHksIGJhciB0aGUgd2F5LiBIZSBoYXMgbG9uZyBpbmp1cmVkIHlvdTsKICAgICAgICAgICAgICAgICAgICBvZiBub3RoaW5nIGlzIGhlIG1vcmUgY29uc2Npb3VzIHRoYW4gb2YgdGhhdC4gRm9yIGl0IGlzIGJ5IGhvbGRpbmcgdGhlIGNpdGllcwogICAgICAgICAgICAgICAgICAgIHRoYXQgYXJlIHJlYWxseSB5b3VycyB0aGF0IGhlIHJldGFpbnMgc2FmZSBwb3NzZXNzaW9uIG9mIGFsbCB0aGUgcmVzdDsKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaWYgaGUgZ2F2ZSB1cCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+LCBldmVuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiB3b3VsZCBiZSBubyBzYWZlIHBsYWNlIGZvciBoaW0uIEhlIGtub3dzLCB0aGVuLCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHR3byBmYWN0c+KAlHRoYXQgaGUgaXMgaW50cmlndWluZyBhZ2FpbnN0IHlvdSBhbmQgdGhhdCB5b3UgYXJlIGF3YXJlIG9mCiAgICAgICAgICAgICAgICAgICAgaXQuIEFzc3VtaW5nIHRoYXQgeW91IGFyZSBpbnRlbGxpZ2VudCwgaGUgY29uY2x1ZGVzIHRoYXQgeW91IGhhdGUgaGltLiBCZXNpZGVzCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugd2VpZ2h0eSBjb25zaWRlcmF0aW9ucywgaGUga25vd3MgZm9yIGNlcnRhaW4gdGhhdCBldmVuIGlmIGhlIG1hc3RlcnMgYWxsCiAgICAgICAgICAgICAgICAgICAgZWxzZSwgaGlzIHBvd2VyIHdpbGwgYmUgcHJlY2FyaW91cyBhcyBsb25nIGFzIHlvdSByZW1haW4gYSBkZW1vY3JhY3ksIGJ1dCBpZgogICAgICAgICAgICAgICAgICAgIGV2ZXIgaGUgbWVldHMgd2l0aCBzb21lIG1pc2NoYW5jZSDvvIhhbmQgdGhlcmUgYXJlIG1hbnkgdG8gd2hpY2ggbWFua2luZAogICAgICAgICAgICAgICAgICAgIGlzIGxpYWJsZe+8iSwgYWxsIHRoZSBmb3JjZXMgdGhhdCBhcmUgbm93IHVuZGVyIHJlc3RyYWludCB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgYXR0cmFjdGVkIHRvIHlvdXIgc2lkZS4gPC90cmFuc2xhdGlvbj4="
translation['10.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbmF0dXJlIGhhcyBub3QKICAgICAgICAgICAgICAgICAgICBlcXVpcHBlZCB5b3UgdG8gc2VlayBhZ2dyYW5kaXplbWVudCBhbmQgc2VjdXJlIGVtcGlyZSwgYnV0IHlvdSBhcmUgY2xldmVyIGF0CiAgICAgICAgICAgICAgICAgICAgdGh3YXJ0aW5nIGFub3RoZXIncyBkZXNpZ25zIGFuZCB3cmVzdGluZyBmcm9tIGhpbSBoaXMgZ2FpbnMsIGFuZCBxdWljayB0bwogICAgICAgICAgICAgICAgICAgIGNvbmZvdW5kIHV0dGVybHkgdGhlIHBsb3RzIG9mIHRoZSBhbWJpdGlvdXMgYW5kIHZpbmRpY2F0ZSB0aGUgZnJlZWRvbSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBtYW5raW5kLiBUaGVyZWZvcmUgaGUgZG9lcyBub3Qgd2FudCB0byBoYXZlIHRoZSBBdGhlbmlhbiB0cmFkaXRpb24gb2YgbGliZXJ0eQogICAgICAgICAgICAgICAgICAgIHdhdGNoaW5nIHRvIHNlaXplIGV2ZXJ5IGNoYW5jZSBhZ2FpbnN0IGhpbXNlbGY7IG5vciBpcyBoaXMgcmVhc29uaW5nIGhlcmUgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgZmF1bHR5IG9yIGlkbGUuIDwvdHJhbnNsYXRpb24+"
translation['10.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzLCB0aGVuLCBpcyB0aGUgZmlyc3QgdGhpbmcKICAgICAgICAgICAgICAgICAgICBuZWVkZnVsLCB0byByZWNvZ25pemUgaW4gUGhpbGlwIHRoZSBpbnZldGVyYXRlIGVuZW15IG9mIGNvbnN0aXR1dGlvbmFsCiAgICAgICAgICAgICAgICAgICAgZ292ZXJubWVudCBhbmQgZGVtb2NyYWN5OyBhbmQgeW91ciBzZWNvbmQgbmVlZCBpcyB0byBjb252aW5jZSB5b3Vyc2VsdmVzIHRoYXQKICAgICAgICAgICAgICAgICAgICBhbGwgaGlzIGFjdGl2aXR5IGFuZCBhbGwgaGlzIG9yZ2FuaXphdGlvbiBpcyBwcmVwYXJpbmcgdGhlIHdheSBmb3IgYW4gYXR0YWNrIG9uCiAgICAgICAgICAgICAgICAgICAgb3VyIGNpdHkuIEZvciBub25lIG9mIHlvdSBpcyBzbyBzaW1wbGUgYXMgdG8gYmVsaWV2ZSB0aGF0IHRob3VnaCBQaGlsaXAgY292ZXRzCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugd3JldGNoZWQgb2JqZWN0cyBpbiBUaHJhY2XigJRmb3Igd2hhdCBlbHNlIGNhbiBvbmUgY2FsbCBEcm9uZ2lsdXMKICAgICAgICAgICAgICAgICAgICBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA3MTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDcxMCI+Q2FieWxlPC9wbGFjZU5hbWU+IGFuZCBNYXN0aXJhIGFuZCB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBwbGFjZXMgaGUgaXMgc2FpZCB0byBiZSBub3cgaG9sZGluZyA/4oCUYW5kIHRob3VnaCBoZSBlbmR1cmVzIHRvaWwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2ludGVyIHN0b3JtcyBhbmQgZGVhZGx5IHBlcmlsIGZvciB0aGUgcHJpdmlsZWdlIG9mIHRha2luZyB0aGVtLCA8L3RyYW5zbGF0aW9uPg=="
translation['10.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz55ZXQgaGUgZG9lcyBub3QgY292ZXQgdGhlIEF0aGVuaWFuIGhhcmJvdXJzIGFuZAogICAgICAgICAgICAgICAgICAgIGRvY2t5YXJkcyBhbmQgd2FyLWdhbGxleXMgYW5kIHRoZSBwbGFjZSBpdHNlbGYgYW5kIHRoZSBnbG9yeSBvZiBpdOKAlGFuZAogICAgICAgICAgICAgICAgICAgIG5ldmVyIG1heSBQaGlsaXAgb3IgYW55IG90aGVyIG1hbiBtYWtlIGhpbXNlbGYgbWFzdGVyIG9mIHRoZXNlIGJ5IHRoZSBjb25xdWVzdAogICAgICAgICAgICAgICAgICAgIG9mIG91ciBjaXR5IeKAlGJ1dCB3aWxsIGFsbG93IHlvdSB0byByZXRhaW4gdGhlbSwgd2hpbGUgaGUgd2ludGVycyBpbgogICAgICAgICAgICAgICAgICAgIHRoYXQgcHVyZ2F0b3J5IGZvciB0aGUgc2FrZSBvZiB0aGUgcnllIGFuZCBtaWxsZXQgb2YgdGhlIFRocmFjaWFuIHN0b3JlLXBpdHMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBub3Qgc28sIGJ1dCBpdCBpcyB0byB3aW4gdGhlc2UKICAgICAgICAgICAgICAgICAgICBwcml6ZXMgdGhhdCBoZSBkZXZvdGVzIGhpcyBhY3Rpdml0aWVzIHRvIGFsbCB0aG9zZSBvdGhlciBvYmplY3RzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlIGVhY2ggbXVzdCBrbm93IGFuZCBmZWVsIGluIGhpcyBvd24gbWluZCB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCBvZiB0aGlzLCBidXQgeW91IG11c3Qgbm90LCBvZiBjb3Vyc2UsIGNhbGwgZm9yIGEgZGVjbGFyYXRpb24gb2Ygd2FyIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgc3RhdGVzbWFuIHdobyBpcyB0cnlpbmcsIGluIGFsbCBob25lc3R5LCB0byBnaXZlIHlvdSB0aGUgYmVzdCBhZHZpY2U7IGZvcgogICAgICAgICAgICAgICAgICAgIHRoYXQgd291bGQgYmUgdGhlIGFjdCBvZiBtZW4gd2hvIHdhbnQgdG8gZmluZCBzb21lb25lIHRvIGZpZ2h0IHdpdGgsIG5vdCBvZiBtZW4KICAgICAgICAgICAgICAgICAgICB3aG8gc2VlayB0aGUgaW50ZXJlc3RzIG9mIHRoZWlyIHN0YXRlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UbwogICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NlIHdhciBvbiBQaGlsaXAgd291bGQgYmUgZGFuZ2Vyb3VzIHRvIHRoZSBzcGVha2VyLCBhcyBleHBsYWluZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVjaCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDguNjgiIHZhbGlkPSJ5ZXMiPkRlbS4gOC42ODwvYmlibD4sIGFuZCB1bm5lY2Vzc2FyeSwgYXMgUGhpbGlwIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGFscmVhZHkgYXQgd2FyIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDguNjgiIHZhbGlkPSJ5ZXMiPkRlbS4gOC42ODwvYmlibD4sIGFuZCB1bm5lY2Vzc2FyeSwgYXMgUGhpbGlwIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGFscmVhZHkgYXQgd2FyIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LjwvdHJhbnNsYXRpb24+"
translation['10.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgY29uc2lkZXIuIElmIGZvciBoaXMgZmlyc3QgdmlvbGF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHBlYWNlLCBvciBoaXMgc2Vjb25kIG9yIHRoaXJk4oCUZm9yIHRoZXJlIHdhcyBhIGxvbmcgc2VyaWVzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbeKAlHNvbWVvbmUgaGFkIHByb3Bvc2VkIGEgZGVjbGFyYXRpb24gb2Ygd2FyIGFnYWluc3QgaGltLCBhbmQgaWYKICAgICAgICAgICAgICAgICAgICBQaGlsaXAsIGp1c3QgYXMgaGUgaXMgZG9pbmcgbm93IHdoZW4gbm8gb25lIHByb3Bvc2VzIHN1Y2ggYSBkZWNsYXJhdGlvbiwgaGFkCiAgICAgICAgICAgICAgICAgICAgZ29uZSB0byB0aGUgaGVscCBvZiB0aGUgQ2FyZGlhbnMsIHdvdWxkIG5vdCB0aGUgcHJvcG9zZXIgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIHN1cHByZXNzZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSB3b3JkIHVzZWQgaXMgc3Ryb25nLCBidXQKICAgICAgICAgICAgICAgICAgICAgICAgcHVycG9zZWx5IHZhZ3VlLiBIZSB3b3VsZCBoYXZlIGluY3VycmVkIHRoZSBpbmV2aXRhYmxlPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrPPgc6xz4bOvVwgz4DOsc+BzrF24b25zrzPic69PC9mb3JlaWduPi48L25vdGU+IGFuZCBibGFtZWQgYnkgZXZlcnlib2R5IGFzIHRoZSByZWFsCiAgICAgICAgICAgICAgICAgICAgYXV0aG9yIG9mIFBoaWxpcCdzIGV4cGVkaXRpb24/IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6zz4HOsc+Gzr1cIM+AzrHPgc6xduG9uc68z4nOvTwvZm9yZWlnbj4uPC90cmFuc2xhdGlvbj4="
translation['10.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGxvb2sgYWJvdXQgZm9yIGEgc2NhcGVnb2F0IGZvciBQaGlsaXAncyBzaW5zLCBzb21lb25lIHdob20geW91IGNhbiB0aHJvdyBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgaGlyZWxpbmdzIHRvIHJlbmQgbGltYiBmcm9tIGxpbWIuIERvIG5vdCB2b3RlIGZvciB3YXIgYW5kIHRoZW4gZmFsbCB0byBkaXNwdXRpbmcKICAgICAgICAgICAgICAgICAgICBhbW9uZyB5b3Vyc2VsdmVzIHdoZXRoZXIgeW91IG91Z2h0IG9yIG91Z2h0IG5vdCB0byBoYXZlIGRvbmUgc28sIGJ1dCBpbWl0YXRlIGhpcwogICAgICAgICAgICAgICAgICAgIG1ldGhvZHMgb2Ygd2FyZmFyZSwgc3VwcGx5aW5nIHRob3NlIHdobyBhcmUgbm93IHJlc2lzdGluZyBoaW0gd2l0aCBtb25leSBhbmQKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBlbHNlIHRoZXkgbmVlZCwgYW5kIHJhaXNpbmcgYSB3YXItZnVuZCB5b3Vyc2VsdmVzLCBBdGhlbmlhbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIHByb3ZpZGluZyBhbiBhcm15LCBzd2lmdC1zYWlsaW5nIGdhbGxleXMsIGhvcnNlcywgY2F2YWxyeS10cmFuc3BvcnRzLCBhbmQKICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5nIHRoYXQgd2FyIHJlcXVpcmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYXQgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIG91ciBzeXN0ZW0gaXMgYSBtb2NrZXJ5LCBhbmQsIGJ5IEhlYXZlbiwgSSBkbyBub3QgYmVsaWV2ZSB0aGF0IGV2ZW4gUGhpbGlwCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB3b3VsZCBwcmF5IHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgYWN0IG90aGVyd2lzZSB0aGFuIHNoZSBpcyBhY3RpbmcuIFlvdSBhcmUgYmVoaW5kIHlvdXIgdGltZSBhbmQgd2FzdGUgeW91ciBtb25leTsKICAgICAgICAgICAgICAgICAgICB5b3UgbG9vayByb3VuZCBmb3Igc29tZW9uZSB0byBtYW5hZ2UgdGhlIGJ1c2luZXNzIGFuZCB0aGVuIHF1YXJyZWwgd2l0aCBoaW07IHlvdQogICAgICAgICAgICAgICAgICAgIHRocm93IHRoZSBibGFtZSBvbiBvbmUgYW5vdGhlci4gSSB3aWxsIGV4cGxhaW4gaG93IHRoaXMgY29tZXMgYWJvdXQgYW5kIHdpbGwKICAgICAgICAgICAgICAgICAgICB0ZWxsIHlvdSBob3cgdG8gc3RvcCBpdC4gPC90cmFuc2xhdGlvbj4="
translation['10.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5OZXZlciB5ZXQsIEF0aGVuaWFucywKICAgICAgICAgICAgICAgICAgICBoYXZlIHlvdSBpbnN0aXR1dGVkIG9yIG9yZ2FuaXplZCBhIHNpbmdsZSBwbGFuIG9mIGFjdGlvbiBwcm9wZXJseSBhdCB0aGUgc3RhcnQsCiAgICAgICAgICAgICAgICAgICAgYnV0IHlvdSBhbHdheXMgZm9sbG93IGluIHRoZSB0cmFjayBvZiBlYWNoIGV2ZW50LCBhbmQgdGhlbiwgd2hlbiB5b3UgZmluZAogICAgICAgICAgICAgICAgICAgIHlvdXJzZWx2ZXMgdG9vIGxhdGUsIHlvdSBnaXZlIHVwIHRoZSBwdXJzdWl0OyA8L3RyYW5zbGF0aW9uPg=="
translation['10.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz53aGVuIHRoZSBuZXh0IGV2ZW50IG9jY3VycywgeW91IGFyZSBhZ2FpbiBpbiBhIGJ1c3RsZSBvZiBwcmVwYXJhdGlvbi4gQnV0IHRoYXQKICAgICAgICAgICAgICAgICAgICBpcyBub3QgdGhlIHdheS4gSWYgeW91IHRydXN0IHRvIG9jY2FzaW9uYWwgbGV2aWVzLCB5b3UgY2FuIG5ldmVyIGdhaW4gYW55IG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBlc3NlbnRpYWwgb2JqZWN0czsgYnV0IHlvdSBtdXN0IGZpcnN0IHJhaXNlIGEgZm9yY2UgYW5kIHByb3ZpZGUgZm9yIGl0cwogICAgICAgICAgICAgICAgICAgIG1haW50ZW5hbmNlLCBhbmQgYXBwb2ludCBwYXltYXN0ZXJzIGFuZCBjbGVya3MsIGFuZCBhcnJhbmdlIHRoYXQgdGhlcmUgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICB0aGUgc3RyaWN0ZXN0IHdhdGNoIGtlcHQgb3ZlciB5b3VyIGV4cGVuZGl0dXJlLCBhbmQgYWZ0ZXJ3YXJkcyB5b3UgbXVzdCBkZW1hbmQKICAgICAgICAgICAgICAgICAgICBmcm9tIHlvdXIgcGF5bWFzdGVycyBhbiBhY2NvdW50IG9mIHRoZWlyIG1vbmV5cywgYW5kIGZyb20gdGhlIGdlbmVyYWwgYW4gYWNjb3VudAogICAgICAgICAgICAgICAgICAgIG9mIGhpcyBjYW1wYWlnbiwgYW5kIHlvdSBtdXN0IGxlYXZlIHRoZSBnZW5lcmFsIG5vIGV4Y3VzZSBmb3Igc2FpbGluZyBlbHNld2hlcmUKICAgICAgICAgICAgICAgICAgICBvciBlbmdhZ2luZyBpbiBhbnkgb3RoZXIgYnVzaW5lc3MuIDwvdHJhbnNsYXRpb24+"
translation['10.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5JZiB5b3UgZG8KICAgICAgICAgICAgICAgICAgICB0aGlzLCBhbmQgeW91IGFyZSByZWFsbHkgaW4gZWFybmVzdCBhYm91dCBpdCwgeW91IHdpbGwgZWl0aGVyIGNvbXBlbCBQaGlsaXAgdG8KICAgICAgICAgICAgICAgICAgICBrZWVwIHRoZSBwZWFjZSBmYWlybHkgYW5kIHRvIHN0YXkgaW4gb25lIHBsYWNlLCBvciB5b3Ugd2lsbCBmaWdodCBoaW0gb24gZXF1YWwKICAgICAgICAgICAgICAgICAgICB0ZXJtczsgYW5kIHBlcmhhcHPigJRwZXJoYXBzLCBqdXN0IGFzIHlvdSBhcmUgbm93IGlucXVpcmluZyB3aGF0IFBoaWxpcAogICAgICAgICAgICAgICAgICAgIGlzIGRvaW5nIGFuZCB3aGVyZSBoZSBpcyBtYXJjaGluZywgc28gaGUgbWF5IGJlIGFueGlvdXMgdG8ga25vdyB3aGVyZSB0aGUKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiBmb3JjZSBpcyBib3VuZCBmb3IsIGFuZCBpbiB3aGF0IHF1YXJ0ZXIgaXQgd2lsbCBhcHBlYXIuIDwvdHJhbnNsYXRpb24+"
translation['10.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGlmIGFueW9uZSB0aGlua3MKICAgICAgICAgICAgICAgICAgICB0aGF0IGFsbCB0aGlzIG1lYW5zIGdyZWF0IGV4cGVuc2UgYW5kIG11Y2ggdG9pbCBhbmQgd29ycnksIGhlIGlzIHF1aXRlIGNvcnJlY3QsCiAgICAgICAgICAgICAgICAgICAgYnV0IGlmIGhlIHJlY2tvbnMgdXAgd2hhdCB3aWxsIGhlcmVhZnRlciBiZSB0aGUgcmVzdWx0IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBpZiBzaGUgcmVmdXNlcyB0byBhY3QsIGhlIHdpbGwKICAgICAgICAgICAgICAgICAgICBjb25jbHVkZSB0aGF0IGl0IGlzIHRvIG91ciBpbnRlcmVzdCB0byBwZXJmb3JtIG91ciBkdXR5IHdpbGxpbmdseS4gRm9yIGlmIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhlIGd1YXJhbnRlZSBvZiBzb21lIGdvZCwgc2luY2Ugbm8gbWVyZSBtb3J0YWwgY291bGQgYmUgYSBzYXRpc2ZhY3RvcnkKICAgICAgICAgICAgICAgICAgICBzdXJldHkgZm9yIHN1Y2ggYW4gZXZlbnQsIHRoYXQgaWYgeW91IHJlbWFpbiBpbmFjdGl2ZSBhbmQgYWJhbmRvbiBldmVyeXRoaW5nLAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCB3aWxsIG5vdCBpbiB0aGUgZW5kIG1hcmNoIGFnYWluc3QgeW91cnNlbHZlcywgPC90cmFuc2xhdGlvbj4="
translation['10.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5ieSBaZXVzIGFuZCBhbGwgdGhlIG90aGVyIGdvZHMsIGl0IHdvdWxkIGJlIGRpc2dyYWNlZnVsIGFuZCB1bndvcnRoeQogICAgICAgICAgICAgICAgICAgIG9mIHlvdSBhbmQgb2YgdGhlIHJlc291cmNlcyBvZiB5b3VyIGNpdHkgYW5kIHRoZSByZWNvcmQgb2YgeW91ciBhbmNlc3RvcnMgdG8KICAgICAgICAgICAgICAgICAgICBhYmFuZG9uIGFsbCB0aGUgb3RoZXIgR3JlZWtzIHRvIGVuc2xhdmVtZW50IGZvciB0aGUgc2FrZSBvZiB5b3VyIG93biBlYXNlLCBhbmQgSQogICAgICAgICAgICAgICAgICAgIGZvciBvbmUgd291bGQgcmF0aGVyIGRpZSB0aGFuIGJlIGd1aWx0eSBvZiBwcm9wb3Npbmcgc3VjaCBhIHBvbGljeS4gPC90cmFuc2xhdGlvbj4="
translation['10.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhlIHNhbWUsIGlmIHNvbWVvbmUgZG9lcyBwcm9wb3NlIGl0IGFuZCB3aW5zCiAgICAgICAgICAgICAgICAgICAgeW91ciBhc3NlbnQsIHNvIGJlIGl0OyBvZmZlciBubyByZXNpc3RhbmNlLCBzYWNyaWZpY2UgZXZlcnl0aGluZy4gQnV0IGlmIG5vIG9uZQogICAgICAgICAgICAgICAgICAgIGFwcHJvdmVzIG9mIHRoaXMsIGFuZCBpZiBvbiB0aGUgY29udHJhcnkgd2UgYWxsIG9mIHVzIGZvcmVzZWUgdGhhdCB0aGUgbW9yZSB3ZQogICAgICAgICAgICAgICAgICAgIGFsbG93IGhpbSB0byBleHRlbmQgaGlzIHBvd2VyLCB0aGUgc3Ryb25nZXIgYW5kIG1vcmUgZm9ybWlkYWJsZSB3ZSBzaGFsbCBmaW5kCiAgICAgICAgICAgICAgICAgICAgaGltIGluIHdhciwgd2hhdCBlc2NhcGUgaXMgb3BlbiB0byB1cywgb3Igd2h5IGRvIHdlIGRlbGF5PyBXaGVuLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBzaGFsbCB3ZSBjb25zZW50IHRvIGRvCiAgICAgICAgICAgICAgICAgICAgb3VyIGR1dHk/IDwvdHJhbnNsYXRpb24+"
translation['10.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz7igJxXaGVuZXZlciBpdCBpcwogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSzigJ0geW91IHdpbGwgc2F5LiBCdXQgd2hhdCBhbnkgZnJlZSBtYW4gd291bGQgY2FsbCBuZWNlc3NpdHkKICAgICAgICAgICAgICAgICAgICBpcyBub3QgbWVyZWx5IHByZXNlbnQgbm93LCBidXQgaXMgbG9uZyBhZ28gcGFzdCwgYW5kIGZyb20gdGhlIG5lY2Vzc2l0eSB0aGF0CiAgICAgICAgICAgICAgICAgICAgY29uc3RyYWlucyBhIHNsYXZlIHdlIG11c3Qgc3VyZWx5IHByYXkgdG8gYmUgZGVsaXZlcmVkLiBEbyB5b3UgYXNrIHRoZQogICAgICAgICAgICAgICAgICAgIGRpZmZlcmVuY2U/IFRoZSBzdHJvbmdlc3QgbmVjZXNzaXR5IHRoYXQgYSBmcmVlIG1hbiBmZWVscyBpcyBzaGFtZSBmb3IgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLCBhbmQgSSBrbm93IG5vdCBpZiB3ZSBjb3VsZCBuYW1lIGEgc3Ryb25nZXI7IGJ1dCBmb3IgYSBzbGF2ZSBuZWNlc3NpdHkKICAgICAgICAgICAgICAgICAgICBtZWFucyBzdHJpcGVzIGFuZCBib2RpbHkgb3V0cmFnZSwgdW5maXQgdG8gbmFtZSBoZXJlLCBmcm9tIHdoaWNoIEhlYXZlbiBkZWZlbmQKICAgICAgICAgICAgICAgICAgICB1cyEgPC90cmFuc2xhdGlvbj4="
translation['10.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aXRoIHJlZ2FyZCB0byBzdWNoCiAgICAgICAgICAgICAgICAgICAgcHVibGljIHNlcnZpY2VzIGFzIGl0IGlzIHRoZSBkdXR5IG9mIGV2ZXJ5b25lIHRvIGRpc2NoYXJnZSwgYm90aCB3aXRoIHBlcnNvbiBhbmQKICAgICAgICAgICAgICAgICAgICB3aXRoIHByb3BlcnR5LCB0aGF0IHRoZXJlIHNob3VsZCBiZSBhIGRpc3Bvc2l0aW9uIHRvIGF2b2lkIHRoZW0gaXMgbm90CiAgICAgICAgICAgICAgICAgICAgcmlnaHTigJRpbmRlZWQsIGZhciBmcm9tIGl04oCUYnV0IHN0aWxsIGl0IGRvZXMgYWRtaXQgb2Ygc29tZQogICAgICAgICAgICAgICAgICAgIGV4Y3VzZSBub3R3aXRoc3RhbmRpbmc7IGJ1dCB0byByZWZ1c2UgZXZlbiB0byBsaXN0ZW4gdG8gYWxsIHRoYXQgeW91IG91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgaGVhciBhbmQgYWxsIHRoYXQgeW91IGFyZSBib3VuZCB0byBkZWNpZGUgZGVzZXJ2ZXMsIGF0IHN1Y2ggYSB0aW1lIGFzIHRoaXMsCiAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGUgY29uZGVtbmF0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3VyIGhhYml0LCB0aGVuLCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCB0byBsaXN0ZW4gdW50aWwsIGFzIG5vdywgdGhlIGV2ZW50cyB0aGVtc2VsdmVzIGFyZSB1cG9uIHlvdSwgYW5kIG5vdCB0bwogICAgICAgICAgICAgICAgICAgIGRpc2N1c3MgYW55IHF1ZXN0aW9uIGF0IHlvdXIgbGVpc3VyZSBidXQgd2hlbmV2ZXIgUGhpbGlwIG1ha2VzIGhpcyBwcmVwYXJhdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgeW91IG5lZ2xlY3QgdGhlIGNoYW5jZSBvZiBkb2luZyB0aGUgc2FtZSwgYW5kIHlvdSBhcmUgdG9vIHJlbWlzcyB0byBtYWtlCiAgICAgICAgICAgICAgICAgICAgY291bnRlci1wcmVwYXJhdGlvbnM7IGFuZCBpZiBhbnlvbmUgc3BlYWtzIG91dCwgeW91IGRyaXZlIGhpbSBmcm9tIHRoZSBwbGF0Zm9ybSwKICAgICAgICAgICAgICAgICAgICBidXQgd2hlbiB5b3UgbGVhcm4gb2YgdGhlIGxvc3Mgb2YgdGhpcyBwbGFjZSBvciB0aGUgc2llZ2Ugb2YgdGhhdCwgdGhlbiB5b3UgcGF5CiAgICAgICAgICAgICAgICAgICAgYXR0ZW50aW9uIGFuZCBiZWdpbiB0byBwcmVwYXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHRpbWUKICAgICAgICAgICAgICAgICAgICB0byBoYXZlIGxpc3RlbmVkIGFuZCBtYWRlIHlvdXIgZGVjaXNpb24gd2FzIGp1c3QgdGhlbiwgd2hlbiB5b3Ugd291bGQgbm90IGRvIGl0OwogICAgICAgICAgICAgICAgICAgIG5vdywgd2hlbiB5b3UgYXJlIGxpc3RlbmluZywgaXMgdGhlIHRpbWUgdG8gYWN0IGFuZCBwdXQgeW91ciBwcmVwYXJhdGlvbnMgdG8KICAgICAgICAgICAgICAgICAgICB1c2UuIFRoZXJlZm9yZSBpbiBjb25zZXF1ZW5jZSBvZiB0aGVzZSBiYWQgaGFiaXRzIHlvdSBhbG9uZSByZXZlcnNlIHRoZSBnZW5lcmFsCiAgICAgICAgICAgICAgICAgICAgcHJhY3RpY2Ugb2YgbWFua2luZDsgZm9yIG90aGVyIHBlb3BsZSBkZWxpYmVyYXRlIGJlZm9yZSB0aGUgZXZlbnQsIGJ1dCB5b3UgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB0aGUgZXZlbnQuIDwvdHJhbnNsYXRpb24+"
translation['10.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlCiAgICAgICAgICAgICAgICAgICAgb25lIHRoaW5nIHRoYXQgcmVtYWlucyBhbmQgdGhhdCBvdWdodCB0byBoYXZlIGJlZW4gZG9uZSBsb25nIGFnbywgdGhvdWdoIGV2ZW4KICAgICAgICAgICAgICAgICAgICBub3cgdGhlIGNoYW5jZSBpcyBub3QgbG9zdCwgSSB3aWxsIHRlbGwgeW91LiBUaGVyZSBpcyBub3RoaW5nIHRoYXQgdGhlIFN0YXRlCiAgICAgICAgICAgICAgICAgICAgbmVlZHMgc28gbXVjaCBmb3IgdGhlIGNvbWluZyBzdHJ1Z2dsZSBhcyBtb25leS4gU29tZSBzdHJva2VzIG9mIGdvb2QgZm9ydHVuZSB3ZQogICAgICAgICAgICAgICAgICAgIGhhdmUgZW5qb3llZCB3aXRob3V0IG91ciBkZXNpZ24sIGFuZCBpZiB3ZSBtYWtlIHRoZSByaWdodCB1c2Ugb2YgdGhlbSwgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVzaXJlZCByZXN1bHRzIG1heSBwZXJoYXBzIGZvbGxvdy4gRm9yIGZpcnN0LCB0aGUgbWVuIHdob20gdGhlIGtpbmcgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDAyMzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDIzMSI+UGVyc2lhPC9wbGFjZU5hbWU+IHRydXN0cyBhbmQgaGFzIGFjY2VwdGVkIGFzCiAgICAgICAgICAgICAgICAgICAgaGlzIOKAnGJlbmVmYWN0b3JzLOKAnTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgVGhyYWNpYW5zLCB0aHVzIGhvbm9yZWQgZm9yIHRoZWlyIHNlcnZpY2VzIHRvIERhcml1cyBpbiBoaXMgU2N5dGhpYW4KICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWRpdGlvbi4gRm9yIHRoZSB0aXRsZSBjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA4Ljg1IiB2YWxpZD0ieWVzIj5IZHQuIDguODU8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6/4byxIM604oCZIM614b2Qz4HOs+G9s8+EzrHOuSDOss6xz4POuc674b2zzr/PgiDhvYDPgc6/z4PhvbHOs86zzrHOuSDOus6xzrvhvbPOv869z4TOsc65CiAgICAgICAgICAgICAgICAgICAgICAgICAgICDOoM61z4HPg865z4PPhOG9tzwvZm9yZWlnbj4uIFN1Y2ggd2FzIHRoZSBNb3JkZWNhaSwg4oCcdGhlIG1hbiB3aG9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBraW5nIGRlbGlnaHRlZCB0byBob25vcizigJ08dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Fc3RoZXI8L3RpdGxlPiwgYy4gNi48L25vdGU+IGhhdGUKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgYW5kIGFyZSBhdCB3YXIgd2l0aCBoaW0uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gOC44NSIgdmFsaWQ9InllcyI+SGR0LiA4Ljg1PC9iaWJsPgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ov+G8sSDOtOKAmSDOteG9kM+BzrPhvbPPhM6xzrkgzrLOsc+DzrnOu+G9s86/z4Ig4b2Az4HOv8+D4b2xzrPOs86xzrkgzrrOsc674b2zzr/Ovc+EzrHOuQogICAgICAgICAgICAgICAgICAgICAgICAgICAgzqDOtc+Bz4POuc+Dz4Thvbc8L2ZvcmVpZ24+LiBTdWNoIHdhcyB0aGUgTW9yZGVjYWksIOKAnHRoZSBtYW4gd2hvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAga2luZyBkZWxpZ2h0ZWQgdG8gaG9ub3Is4oCdPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXN0aGVyPC90aXRsZT4sIGMuIDYuPC90cmFuc2xhdGlvbj4="
translation['10.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5TZWNvbmRseSwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFnZW50PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPklmIHdlIG1heSB0cnVzdCBVbHBpYW4sIHRoaXMgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIEhlcm1laWFzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRhcm5ldXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0YXJuZXVzIj5BdGFybmV1czwvcGxhY2VOYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZyaWVuZCBvZiBBcmlzdG90bGUsIHNlaXplZCBieSB0aGUgUmhvZGlhbiBNZW50b3IgYW5kIGNhcnJpZWQgY2FwdGl2ZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAga2luZyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4uIFNlZSBHcm90ZSwgYy4KICAgICAgICAgICAgICAgICAgICAgICAgOTAuPC9ub3RlPiB3aG8gd2FzIHByaXZ5IHRvIGFsbCBQaGlsaXAncyBzY2hlbWVzIGFnYWluc3QgdGhlIGtpbmcgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGFybmV1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRhcm5ldXMiPkF0YXJuZXVzPC9wbGFjZU5hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZnJpZW5kIG9mIEFyaXN0b3RsZSwgc2VpemVkIGJ5IHRoZSBSaG9kaWFuIE1lbnRvciBhbmQgY2FycmllZCBjYXB0aXZlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPi4gU2VlIEdyb3RlLCBjLgogICAgICAgICAgICAgICAgICAgICAgICA5MC48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4gaGFzIGJlZW4ga2lkbmFwcGVkLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAga2luZyB3aWxsIGhlYXIgb2YgYWxsIHRoZXNlIHBsb3RzLCBub3QgYXMgdGhlIGNvbXBsYWludCBvZiBBdGhlbmlhbnMsIHdob20gaGUKICAgICAgICAgICAgICAgICAgICBtaWdodCBzdXNwZWN0IG9mIHNwZWFraW5nIGZvciBvdXIgb3duIHByaXZhdGUgYWR2YW50YWdlLCBidXQgZnJvbSB0aGUgbGlwcyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB2ZXJ5IG1hbiB3aG8gcGxhbm5lZCBhbmQgY2FycmllZCB0aGVtIG91dCwgc28gdGhhdCB0aGVpciBjcmVkaXQgaXMKICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2hlZCwgYW5kIHRoZSBvbmx5IHN1Z2dlc3Rpb24gZm9yIG91ciBhbWJhc3NhZG9ycyB0byBtYWtlIGlzIG9uZSB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZSBraW5nIHdvdWxkIGJlIGRlbGlnaHRlZCB0byBoZWFyLCA8L3RyYW5zbGF0aW9uPg=="
translation['10.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIG1hbiB3aG8gaXMgd3JvbmdpbmcgYm90aCBwYXJ0aWVzIHNob3VsZCBiZSBwdW5pc2hlZCBieSBib3RoIGluIGNvbW1vbiwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgaXMgbXVjaCBtb3JlIGRhbmdlcm91cyB0byB0aGUga2luZyBpZiBoZSBoYXMgYXR0YWNrZWQgdXMgZmlyc3QsIGZvciBpZiB3ZQogICAgICAgICAgICAgICAgICAgIGFyZSBsZWZ0IHRvIG91ciBvd24gcmVzb3VyY2VzIGFuZCBhbnl0aGluZyBoYXBwZW5zIHRvIHVzLCBoZSB3aWxsIHNvb24gYmUKICAgICAgICAgICAgICAgICAgICBtYXJjaGluZyBjb25maWRlbnRseSBhZ2FpbnN0IHRoZSBraW5nLiBJIHRoaW5rIHlvdSBvdWdodCB0byBzZW5kIGFuIGVtYmFzc3kgdG8KICAgICAgICAgICAgICAgICAgICBwdXQgYWxsIHRoZXNlIG1hdHRlcnMgYmVmb3JlIHRoZSBraW5nLCBhbmQgeW91IG91Z2h0IHRvIGRyb3AgdGhlIGZvb2xpc2gKICAgICAgICAgICAgICAgICAgICBwcmVqdWRpY2UgdGhhdCBoYXMgc28gb2Z0ZW4gYnJvdWdodCBhYm91dCB5b3VyCiAgICAgICAgICAgICAgICAgICAgZGlzY29tZml0dXJl4oCU4oCcdGhlIGJhcmJhcmlhbizigJ0g4oCcdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9uIGZvZSBvZiB1cyBhbGws4oCdIGFuZCBhbGwgc3VjaCBwaHJhc2VzLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbXkgcGFydCwgd2hlbmV2ZXIgSSBzZWUgYSBtYW4gYWZyYWlkIG9mIG9uZSB3aG8gZHdlbGxzIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3NTA5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc1MDkiPlN1c2E8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMTE1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIxMTUiPkVjYmF0YW5hPC9wbGFjZU5hbWU+IGFuZCBpbnNpc3RpbmcgdGhhdCBoZSBpcyBpbGwtZGlzcG9zZWQKICAgICAgICAgICAgICAgICAgICB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRob3VnaCBoZSBoZWxwZWQgdG8KICAgICAgICAgICAgICAgICAgICByZXN0b3JlIG91ciBmb3J0dW5lcyBpbiB0aGUgcGFzdCBhbmQgd2FzIGV2ZW4gbm93IG1ha2luZyBvdmVydHVyZXMgdG8gdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIFBlcnNpYW5zIGhlbHBlZCBDb25vbiwgd2hlbiBoZSBkZWZlYXRlZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgTGFjZWRhZW1vbmlhbnMgb2ZmIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw1MDAzNzU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDUwMDM3NTciPkNuaWR1czwvcGxhY2VOYW1lPiBpbiAzOTQuCiAgICAgICAgICAgICAgICAgICAgICAgIEluIDM0NSBBcnRheGVyeGVzIGFwcGVhbGVkIHRvIHRoZSBsZWFkaW5nIEdyZWVrIHN0YXRlcyBmb3IgaGVscCBpbiBwdXR0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGRvd24gdGhlIHJldm9sdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBcmdvcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXJnb3MiPkFyZ29zPC9wbGFjZU5hbWU+IHNlbnQgYXV4aWxpYXJpZXMsIGJ1dCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiByZWZ1c2VkLjwvbm90ZT7vvIhhbmQgaWYKICAgICAgICAgICAgICAgICAgICB5b3UgZGlkIG5vdCBhY2NlcHQgdGhlbSBidXQgdm90ZWQgdGhlaXIgcmVqZWN0aW9uLCB0aGUgZmF1bHQgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgaGlz77yJOyBhbmQgd2hlbiBJIGZpbmQgdGhlIHNhbWUgbWFuIHVzaW5nIHZlcnkgZGlmZmVyZW50IGxhbmd1YWdlIGFib3V0CiAgICAgICAgICAgICAgICAgICAgdGhpcyBwbHVuZGVyZXIgb2YgdGhlIEdyZWVrcywgd2hvIGlzIGV4dGVuZGluZyBoaXMgcG93ZXIsIGFzIHlvdSBzZWUsIGF0IG91cgogICAgICAgICAgICAgICAgICAgIHZlcnkgZG9vcnMgYW5kIGluIHRoZSBoZWFydCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNTAwMzc1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw1MDAzNzU3Ij5DbmlkdXM8L3BsYWNlTmFtZT4gaW4gMzk0LgogICAgICAgICAgICAgICAgICAgICAgICBJbiAzNDUgQXJ0YXhlcnhlcyBhcHBlYWxlZCB0byB0aGUgbGVhZGluZyBHcmVlayBzdGF0ZXMgZm9yIGhlbHAgaW4gcHV0dGluZwogICAgICAgICAgICAgICAgICAgICAgICBkb3duIHRoZSByZXZvbHQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXJnb3MiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFyZ29zIj5BcmdvczwvcGxhY2VOYW1lPiBzZW50IGF1eGlsaWFyaWVzLCBidXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4gcmVmdXNlZC48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgSSBhbSBhc3RvbmlzaGVkLCBhbmQsIHdob2V2ZXIgaGUgbWF5IGJlLCBpdCBpcyBJIHRoYXQgZmVhciBoaW0sIGp1c3QgYmVjYXVzZSBoZQogICAgICAgICAgICAgICAgICAgIGRvZXMgbm90IGZlYXIgUGhpbGlwLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoZXJlIGlzIGFsc28gYW5vdGhlciBtYXR0ZXIsIHRoZSBtaXNyZXByZXNlbnRhdGlvbiBvZiB3aGljaCBieQogICAgICAgICAgICAgICAgICAgIHVuZmFpciBvYmxvcXV5IGFuZCBpbiBpbnRlbXBlcmF0ZSBsYW5ndWFnZSBpcyBpbmp1cmluZyB0aGUgU3RhdGUsIGFuZAogICAgICAgICAgICAgICAgICAgIGZ1cnRoZXJtb3JlIGlzIGFmZm9yZGluZyBhIHByZXRleHQgZm9yIHRob3NlIHdobyBhcmUgdW53aWxsaW5nIHRvIHBlcmZvcm0gYW55IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZHV0aWVzIGFzIGNpdGl6ZW5zOyBpbmRlZWQsIHlvdSB3aWxsIGZpbmQgdGhhdCBpbiBldmVyeSBjYXNlIHdoZXJlIGEgbWFuCiAgICAgICAgICAgICAgICAgICAgaGFzIGZhaWxlZCB0byBkbyBoaXMgZHV0eSwgdGhpcyBoYXMgYmVlbiBnaXZlbiBhcyB0aGUgZXhjdXNlLiBJIGFtIHJlYWxseSBhZnJhaWQKICAgICAgICAgICAgICAgICAgICB0byBzcGVhayBvbiB0aGlzIHN1YmplY3QsIGJ1dCBJIHdpbGwgZG8gc28gbmV2ZXJ0aGVsZXNzOyA8L3RyYW5zbGF0aW9uPg=="
translation['10.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgSSB0aGluayBJIHNoYWxsIGJlIGFibGUsIHdpdGggYWR2YW50YWdlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIFN0YXRlLCB0byBwbGVhZCB0aGUgY2F1c2UgYm90aCBvZiB0aGUgcG9vciBhZ2FpbnN0IHRoZSByaWNoIGFuZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS1vd25lcnMgYWdhaW5zdCB0aGUgbmVjZXNzaXRvdXMuIElmIHdlIGNvdWxkIGJhbmlzaCBmcm9tIG91ciBtaWRzdCBib3RoCiAgICAgICAgICAgICAgICAgICAgdGhlIG9ibG9xdXkgd2hpY2ggc29tZSBoZWFwIG9uIHRoZSBUaGVvcmljIEZ1bmQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMS4yMCIgdmFsaWQ9InllcyI+RGVtLiAxLjIwPC9iaWJsPi48L25vdGU+IGFuZCBhbHNvIHRoZSBmZWFyCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgRnVuZCB3aWxsIG5vdCBiZSBtYWludGFpbmVkIHdpdGhvdXQgZG9pbmcgYSBncmVhdCBkZWFsIG9mIGhhcm0sIHdlCiAgICAgICAgICAgICAgICAgICAgY291bGQgbm90IHBlcmZvcm0gYSBncmVhdGVyIHNlcnZpY2Ugbm9yIG9uZSBtb3JlIGxpa2VseSB0byBzdHJlbmd0aGVuIHRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgIGJvZHkgcG9saXRpYy4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxLjIwIiB2YWxpZD0ieWVzIj5EZW0uIDEuMjA8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['10.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb2xsb3cgbXkgYXJndW1lbnQgd2hpbGUgSSBzdGF0ZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IHRoZSBjYXNlIG9mIHRob3NlIHdobyBhcmUgcmVnYXJkZWQgYXMgdGhlIHBvb3JlciBjbGFzc2VzLiBUaGVyZSB3YXMgYSB0aW1lCiAgICAgICAgICAgICAgICAgICAgbm90IGxvbmcgYWdvIHdoZW4gdGhlIHJldmVudWUgb2YgeW91ciBzdGF0ZSBkaWQgbm90IGV4Y2VlZCBhIGh1bmRyZWQgYW5kIHRoaXJ0eQogICAgICAgICAgICAgICAgICAgIHRhbGVudHMsIGFuZCB5ZXQgb2YgdGhvc2UgY29tcGV0ZW50IHRvIHVuZGVydGFrZSB0aGUgdHJpZXJhcmNoeSBvciBwYXkgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHktdGF4IHRoZXJlIGlzIG5vdCBvbmUgdGhhdCBkZWNsaW5lZCB0aGUgZHV0eSB0aGF0IGRldm9sdmVkIG9uIGhpbSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBhYnNlbmNlIG9mIGEgc3VycGx1czsgYnV0IHRoZSB3YXItZ2FsbGV5cyBzYWlsZWQgb3V0LCBhbmQgdGhlIG1vbmV5IGNhbWUgaW4sIGFuZAogICAgICAgICAgICAgICAgICAgIHdlIGRpZCBhbGwgdGhhdCB3YXMgcmVxdWlyZWQuIDwvdHJhbnNsYXRpb24+"
translation['10.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5TaW5jZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZm9ydHVuZSBoYXMgc21pbGVkIG9uIHVzIGFuZCBpbmNyZWFzZWQgb3VyIHJldmVudWVzLCBhbmQgdGhlIGV4Y2hlcXVlciBub3cKICAgICAgICAgICAgICAgICAgICByZWNlaXZlcyBmb3VyIGh1bmRyZWQgaW5zdGVhZCBvZiBvbmUgaHVuZHJlZCB0YWxlbnRzLCB0aG91Z2ggbm8gcHJvcGVydHktb3duZXIKICAgICAgICAgICAgICAgICAgICBzdWZmZXJzIGFueSBsb3NzIGJ1dCBpcyByYXRoZXIgdGhlIGdhaW5lciwgZm9yIGFsbCB0aGUgcmljaCBjaXRpemVucyBjb21lIHVwIHRvCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZSB0aGVpciBzaGFyZSBvZiB0aGlzIGluY3JlYXNlLCBhcyBpbmRlZWQgdGhleSBoYXZlIGEgcGVyZmVjdCByaWdodCB0byBkby4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IHRoZW4gZG8gd2UgbWVhbiBieSByZXByb2FjaGluZyBvbmUKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIGZvciB0aGlzIGFuZCBtYWtpbmcgaXQgYW4gZXhjdXNlIGZvciBkb2luZyBub3RoaW5nLCB1bmxlc3MgaXQgaXMgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgIGdydWRnZSB0aGUgcmVsaWVmIHdoaWNoIHRoZSBwb29yIGhhdmUgcmVjZWl2ZWQgYXQgdGhlIGhhbmRzIG9mIGZvcnR1bmU/IEkgZm9yCiAgICAgICAgICAgICAgICAgICAgb25lIHNoYWxsIG5vdCBibGFtZSB0aGVtLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pLmUuIGJsYW1lIHRoZSBwb29yZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyBmb3IgdXBob2xkaW5nIHRoZSBUaGVvcmljIEZ1bmQuIFRoZSBhcmd1bWVudCBpcyB0aGF0IHdoZW4gcmV2ZW51ZQogICAgICAgICAgICAgICAgICAgICAgICB3YXMgc21hbGxlciwgdGhlIHByb3BlcnR5LW93bmVycyBkaWQgbm90IHJlZnVzZSB0byBwYXkgdXA7IG5vdyB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICByZXZlbnVlIHNob3dzIGEgYmlnIHN1cnBsdXMsIGRldm90ZWQgdG8gdGhlIFRoZW9yaWMgRnVuZCwgaW4gd2hpY2ggYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgaGF2ZSBhIHNoYXJlLCB3aHkgc2hvdWxkIHRoZSByaWNoIGRlbWFuZCByZWxpZWYgZnJvbSB0aGVpcgogICAgICAgICAgICAgICAgICAgICAgICDigJxsaXR1cmdpZXPigJ0/IO+8iFBlcmhhcHMgdGhlIG1vZGVybgogICAgICAgICAgICAgICAgICAgICAgICBpbmNvbWUtdGF4LXBheWVyIHdpbGwgZmFpbCB0byBhcHByZWNpYXRlIHRoZSBzcGVha2VyJ3MKICAgICAgICAgICAgICAgICAgICAgICAgbG9naWMu77yJPC9ub3RlPiBub3IgZG8gSSB0aGluayBpdCBmYWlyIHRvIGRvIHNvLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gcHJpdmF0ZSBsaWZlIEkgZG8gbm90IG9ic2VydmUgdGhhdCB0aGUgeW91bmcKICAgICAgICAgICAgICAgICAgICBtYW4gYWRvcHRzIHRoYXQgYXR0aXR1ZGUgdG93YXJkcyBoaXMgc2VuaW9ycywgb3IgdGhhdCBhbnkgaHVtYW4gYmVpbmcgaXMgc28KICAgICAgICAgICAgICAgICAgICBpbnNlbnNpYmxlIG9yIHVucmVhc29uYWJsZSB0aGF0IGhlIHJlZnVzZXMgdG8gZG8gYW55dGhpbmcgaGltc2VsZiB1bmxlc3MKICAgICAgICAgICAgICAgICAgICBldmVyeWJvZHkgZG9lcyB0aGUgc2FtZTsgYW5kIGluZGVlZCBzdWNoIGEgY2FzZSB3b3VsZCBiZSBjb3ZlcmVkIGJ5IHRoZSBsYXdzIGZvcgogICAgICAgICAgICAgICAgICAgICAgICBpbGwtdXNhZ2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNoaWxkcmVuIHdobyByZWZ1c2VkIHRvIHN1cHBvcnQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlaXIgcGFyZW50cyB3ZXJlIGxpYWJsZSB0byBhPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrThvbfOus63CiAgICAgICAgICAgICAgICAgICAgICAgICAgICDOus6xzrrhvb3Pg861z4nPgjwvZm9yZWlnbj4uPC9ub3RlPiBmb3IgSSBzdXBwb3NlIHRoZSBjb250cmlidXRpb24gYXNzZXNzZWQgYnkKICAgICAgICAgICAgICAgICAgICBib3RoIGF1dGhvcml0aWVzLCBieSBuYXR1cmUgYW5kIGJ5IGxhdywgb3VnaHQgdG8gYmUgYnJvdWdodCBob25lc3RseSBhbmQgcGFpZAogICAgICAgICAgICAgICAgICAgIGNoZWVyZnVsbHkgdG8gdGhlIHBhcmVudHMuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs604b23zrrOtwogICAgICAgICAgICAgICAgICAgICAgICAgICAgzrrOsc664b29z4POtc+Jz4I8L2ZvcmVpZ24+LjwvdHJhbnNsYXRpb24+"
translation['10.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIGp1c3QgYXMKICAgICAgICAgICAgICAgICAgICBlYWNoIG9uZSBvZiB1cyBoYXMgYSBwYXJlbnQsIHNvIG91Z2h0IHdlIHRvIHJlZ2FyZCB0aGUgY29sbGVjdGl2ZSBjaXRpemVucyBhcwogICAgICAgICAgICAgICAgICAgIHRoZSBjb21tb24gcGFyZW50cyBvZiB0aGUgd2hvbGUgU3RhdGUsIGFuZCBzbyBmYXIgZnJvbSBkZXByaXZpbmcgdGhlbSBvZgogICAgICAgICAgICAgICAgICAgIGFueXRoaW5nIHRoYXQgdGhlIFN0YXRlIGJlc3Rvd3MsIHdlIG91Z2h0LCBpZiB0aGVyZSB3ZXJlIG5vIHN1Y2ggZ3JhbnQsIHRvIGxvb2sKICAgICAgICAgICAgICAgICAgICBlbHNld2hlcmUgZm9yIG1lYW5zIHRvIHNhdmUgYW55IG9mIHRoZWlyIHdhbnRzIGZyb20gYmVpbmcgb3Zlcmxvb2tlZC4gPC90cmFuc2xhdGlvbj4="
translation['10.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0aGVuLCBpZiB0aGUgd2VhbHRoeSB3b3VsZCBhY2NlcHQgdGhpcyBwcmluY2lwbGUsCiAgICAgICAgICAgICAgICAgICAgSSB0aGluayB0aGV5IHdvdWxkIGJlIGRvaW5nIG5vdCBvbmx5IHdoYXQgaXMgZmFpciwgYnV0IGFsc28gd2hhdCBpcyBleHBlZGllbnQ7CiAgICAgICAgICAgICAgICAgICAgZm9yIHRvIGRlcHJpdmUgb25lIGNpdGl6ZW4gb2YgbmVjZXNzYXJpZXMgaXMgdG8gbWFrZSBtYW55IG9mIHRoZW0gdW5pdGUgaW4KICAgICAgICAgICAgICAgICAgICBkaXNhZmZlY3Rpb24gdG93YXJkcyB0aGUgZ292ZXJubWVudC4gSSB3b3VsZCBhbHNvIGNvdW5zZWwgdGhlIHBvb3JlciBjbGFzc2VzIHRvCiAgICAgICAgICAgICAgICAgICAgYWJvbGlzaCB0aGUgZ3JpZXZhbmNlIHdoaWNoIG1ha2VzIHRoZSBwcm9wZXJ0aWVkIGNsYXNzIGRpc2NvbnRlbnRlZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIHN5c3RlbSwgYW5kIGdpdmVzIHRoZW0ganVzdCBjYXVzZSBmb3IgYXNzYWlsaW5nIGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['10.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBwcm9jZWVkLCBpbiB0aGUgc2FtZSB3YXkgYXMgYmVmb3JlLAogICAgICAgICAgICAgICAgICAgIHRvIHN0YXRlIHRoZSBjYXNlIGZvciB0aGUgcmljaCwgYW5kIEkgc2hhbGwgbm90IHNocmluayBmcm9tIHNwZWFraW5nIHRoZSB0cnV0aC4KICAgICAgICAgICAgICAgICAgICBGb3IgSSBjYW5ub3QgaW1hZ2luZSBhbnlvbmUsIG9yIGF0IGxlYXN0IGFueSBBdGhlbmlhbiwgc28gb2JkdXJhdGUgYW5kCiAgICAgICAgICAgICAgICAgICAgY3J1ZWwtaGVhcnRlZCBhcyB0byBmZWVsIGFubm95ZWQgd2hlbiBoZSBzZWVzIHRoZSBwb29yIGFuZCB0aG9zZSB3aG8gbGFjawogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyaWVzIHJlY2VpdmluZyB0aGVzZSBib29ucy4gPC90cmFuc2xhdGlvbj4="
translation['10.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlcmUKICAgICAgICAgICAgICAgICAgICBkb2VzIG91ciBwcmFjdGljZSBicmVhayBkb3duLCBhbmQgd2hlcmUgbGllcyB0aGUgZ3JpZXZhbmNlPyBJdCBpcyB3aGVuIHRoZSByaWNoCiAgICAgICAgICAgICAgICAgICAgc2VlIGNlcnRhaW4gcGVyc29ucyB0cmFuc2ZlcnJpbmcgdGhpcyB1c2FnZSBmcm9tIHB1YmxpYyBtb25leXMgdG8gcHJpdmF0ZQogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OyB3aGVuIHRoZSBzcGVha2VyIGlzIHJhaXNlZCB0byBpbnN0YW50IGdyZWF0bmVzcyBhbW9uZyB5b3UgYW5kIGV2ZW4gdG8KICAgICAgICAgICAgICAgICAgICBpbW1vcnRhbGl0eSwgYXMgZmFyIGFzIGhpcyBwcml2aWxlZ2UgY2FuIHNlY3VyZSBpdDsgYW5kIHdoZW4geW91ciBzaG91dHMgb2Ygb3BlbgogICAgICAgICAgICAgICAgICAgIGFwcHJvdmFsIGFyZSBjb250cmFkaWN0ZWQgYnkgeW91ciBzZWNyZXQgdm90ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHJlY29nbml6ZWQgYXBwcm9wcmlhdGlvbiBvZiBwdWJsaWMgbW9uZXkgZm9yIHRoZSBUaGVvcmljIEZ1bmQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgaW1pdGF0ZWQgYnkgZGVtYWdvZ3Vlcywgd2hvIHByb3NlY3V0ZSB0aGUgcmljaCBpbiBvcmRlciB0aGF0IHRoZWlyIGZpbmVzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBjb25maXNjYXRpb25zIG1heSBiZSB1c2VkIGZvciBzaW1pbGFyIGJlbmVmaXRzLiBUaGUgZGVtYWdvZ3VlIHRodXMgYWNxdWlyZXMKICAgICAgICAgICAgICAgICAgICAgICAgdW5kdWUgaW5mbHVlbmNlIGFuZCwgYmVpbmcgcHJpdmlsZWdlZCwgaXMgdW5hc3NhaWxhYmxlLiBNZWFud2hpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHBlb3BsZSwgc2l0dGluZyBhcyBhIGp1cnksIGFwcGxhdWQgdGhlIHJpY2ggbWFuIHdoZW4gaGUgc2tpbGZ1bGx5IGRlZmVuZHMKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIHJpZ2h0cywgYnV0IGNhc3QgdGhlaXIgdm90ZXMgYWdhaW5zdCBoaW0uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhpcyBicmVlZHMgZGlzdHJ1c3QgYW5kIHJlc2VudG1lbnQuIEZvcgogICAgICAgICAgICAgICAgICAgIHdlIGFyZSBib3VuZCwgQXRoZW5pYW5zLCB0byBzaGFyZSBlcXVpdGFibHkgd2l0aCBvbmUgYW5vdGhlciB0aGUgcHJpdmlsZWdlcyBvZgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zaGlwLCB0aGUgd2VhbHRoeSBmZWVsaW5nIHNlY3VyZSB0byBsZWFkIHRoZWlyIG93biBsaXZlcyBhbmQgaGF1bnRlZCBieQogICAgICAgICAgICAgICAgICAgIG5vIGZlYXJzIG9uIHRoYXQgYWNjb3VudCwgYnV0IGluIHRoZSBmYWNlIG9mIGRhbmdlcnMgbWFraW5nIG92ZXIgdGhlaXIgcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICB0byB0aGUgY29tbW9ud2VhbHRoIGZvciBpdHMgZGVmZW5jZTsgd2hpbGUgdGhlIHJlc3QgbXVzdCByZWFsaXplIHRoYXQKICAgICAgICAgICAgICAgICAgICBTdGF0ZS1wcm9wZXJ0eSBpcyBjb21tb24gcHJvcGVydHksIGR1bHkgcmVjZWl2aW5nIHRoZWlyIHNoYXJlIG9mIGl0LCBidXQKICAgICAgICAgICAgICAgICAgICByZWNvZ25pemluZyB0aGF0IHByaXZhdGUgd2VhbHRoIGJlbG9uZ3MgdG8gdGhlIHBvc3Nlc3Nvci4gSW4gdGhpcyB3YXkgYSBzbWFsbAogICAgICAgICAgICAgICAgICAgIHN0YXRlIGdyb3dzIGdyZWF0LCBhbmQgYSBncmVhdCBvbmUgaXMga2VwdCBncmVhdC4gVGhpcyBtYXkgcGFzcyBmb3IgYSB2ZXJiYWwKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgb2YgdGhlIGR1dGllcyBvZiBlYWNoIGNsYXNzOyBmb3IgdGhlIGxlZ2FsIHBlcmZvcm1hbmNlIG9mIHRob3NlIGR1dGllcwogICAgICAgICAgICAgICAgICAgIHNvbWUgb3JnYW5pemF0aW9uIGlzIG5lY2Vzc2FyeS4gPC90cmFuc2xhdGlvbj4="
translation['10.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T2Ygb3VyIHByZXNlbnQgZGlmZmljdWx0aWVzIGFuZCBvZiB0aGUgZXhpc3RpbmcKICAgICAgICAgICAgICAgICAgICBjb25mdXNpb24gdGhlIGNhdXNlcyBhcmUgbWFueSBhbmQgb2YgbG9uZyBzdGFuZGluZywgYnV0IGlmIHlvdSBhcmUgd2lsbGluZyB0bwogICAgICAgICAgICAgICAgICAgIGhlYXIgdGhlbSwgSSBhbSByZWFkeSB0byBzcGVhay4gTWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IGhhdmUgZGVzZXJ0ZWQgdGhlIHBvc3QgaW4gd2hpY2ggeW91ciBhbmNlc3RvcnMgbGVmdAogICAgICAgICAgICAgICAgICAgIHlvdTsgeW91IGhhdmUgYmVlbiBwZXJzdWFkZWQgYnkgcG9saXRpY2lhbnMgb2YgdGhpcyBzb3J0IHRoYXQgdG8gYmUgcGFyYW1vdW50IGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwgdG8gcG9zc2VzcyBhIHN0YW5kaW5nCiAgICAgICAgICAgICAgICAgICAgZm9yY2UsIGFuZCB0byBoZWxwIGFsbCB0aGUgb3BwcmVzc2VkLCBpcyBhIHN1cGVyZmx1b3VzIHRhc2sgYW5kIGFuIGlkbGUgZXhwZW5zZTsKICAgICAgICAgICAgICAgICAgICB3aGlsZSB5b3UgZm9uZGx5IGltYWdpbmVkIHRoYXQgdG8gbGl2ZSBpbiBwZWFjZSwgdG8gbmVnbGVjdCBhbGwgeW91ciBkdXRpZXMsIHRvCiAgICAgICAgICAgICAgICAgICAgYWJhbmRvbiBhbGwgeW91ciBwb3NzZXNzaW9ucyBhbmQgbGV0IG90aGVycyBzZWl6ZSB0aGVtIG9uZSBieSBvbmUsIGVuc3VyZWQKICAgICAgICAgICAgICAgICAgICB3b25kZXJmdWwgcHJvc3Blcml0eSBhbmQgY29tcGxldGUgc2VjdXJpdHkuIDwvdHJhbnNsYXRpb24+"
translation['10.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5JbgogICAgICAgICAgICAgICAgICAgIGNvbnNlcXVlbmNlIG9mIHRoaXMsIGEgcml2YWwgaGFzIHN0ZXBwZWQgaW50byB0aGUgcG9zaXRpb24gdGhhdCB5b3Ugb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGZpbGxlZCwgYW5kIGl0IGlzIGhlIHdobyBoYXMgYmVjb21lIHByb3NwZXJvdXMgYW5kIGdyZWF0IGFuZCBydWxlciBvdmVyCiAgICAgICAgICAgICAgICAgICAgbWFueSB0aGluZ3MuIEFuZCByaWdodGx5IHNvOyBmb3IgdGhlcmUgaXMgYSBwcml6ZSwgaG9ub3JhYmxlLCBncmVhdCwgYW5kCiAgICAgICAgICAgICAgICAgICAgZ2xvcmlvdXMsIGEgcHJpemUgZm9yIHdoaWNoIHRoZSBncmVhdGVzdCBvZiBvdXIgc3RhdGVzIG9uY2Ugc3BlbnQgYWxsIHRoZWlyIHRpbWUKICAgICAgICAgICAgICAgICAgICBpbiBjb250ZW5kaW5nLCBidXQgc2luY2UgbWlzZm9ydHVuZSBoYXMgZG9nZ2VkIHRoZSBMYWNlZGFlbW9uaWFucywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIFBob2NpYW4gV2FyIGhhcyBsZWZ0IHRoZSBUaGViYW5zIG5vIGxlaXN1cmUsIGFuZCB3ZSBhcmUgaGVlZGxlc3MsIGhlIGhhcyBncmFzcGVkCiAgICAgICAgICAgICAgICAgICAgaXQgd2l0aG91dCBhIHN0cnVnZ2xlLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgZmVhciBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBwb3J0aW9uIG9mIHRoZSBvdGhlcnMsIGJ1dCBoaXMgdGhlIHBvc3Nlc3Npb24gb2YgbWFueSBhbGxpZXMgYW5kIGEgbWlnaHR5IGZvcmNlOwogICAgICAgICAgICAgICAgICAgIGFuZCBzdWNoIGdyZWF0IGFuZCBtYW5pZm9sZCB0cm91YmxlcyBub3cgZW5jb21wYXNzIGFsbCB0aGUgR3JlZWtzIHRoYXQgaXQgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgZWFzeSB0byBhZHZpc2Ugd2hhdCBvdWdodCB0byBiZSBkb25lLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WWV0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBwZXJpbG91cyBhcyBpcyB0aGUgcHJlc2VudCBzaXR1YXRpb24gaW4gbXkganVkZ2VtZW50LAogICAgICAgICAgICAgICAgICAgIG5vbmUgb2YgYWxsIHRoZSBHcmVla3MgYXJlIGluIGdyZWF0ZXIgZGFuZ2VyIHRoYW4geW91LCBub3Qgb25seSBiZWNhdXNlIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICB0aGUgY2hpZWYgb2JqZWN0IG9mIFBoaWxpcCdzIHBsb3RzLCBidXQgYmVjYXVzZSB5b3UgYXJlIHRoZSBtb3N0IGRpc3Bvc2VkIHRvCiAgICAgICAgICAgICAgICAgICAgaW5hY3Rpb24uIElmIHRoZXJlZm9yZSwgbm90aW5nIHRoZSBhYnVuZGFuY2UgYW5kIGNoZWFwbmVzcyBvZiBnb29kcyBmb3Igc2FsZSBpbgogICAgICAgICAgICAgICAgICAgIHlvdXIgbWFya2V0cywgeW91IGhhdmUgYmVlbiBiZWd1aWxlZCBieSB0aGVzZSB0aGluZ3MgaW50byB0aGUgYmVsaWVmIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eSBpcyBpbiBubyBkYW5nZXIsIHlvdXIgZXN0aW1hdGUgb2YgdGhlIHNpdHVhdGlvbiBpcyBjb250cmFyeSB0byBhbGwgcmlnaHQKICAgICAgICAgICAgICAgICAgICBhbmQgcmVhc29uLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYSBtYXJrZXQgb3IgYSBmYWlyIG1pZ2h0IGJlCiAgICAgICAgICAgICAgICAgICAganVkZ2VkIG9uIHN1Y2ggZXZpZGVuY2UgdG8gYmUgd2VsbCBvciBpbGwgc3RvY2tlZDsgYnV0IGEgY2l0eSwgd2hpY2ggZXZlcnkKICAgICAgICAgICAgICAgICAgICBhc3BpcmFudCB0byB0aGUgcnVsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gaGFzCiAgICAgICAgICAgICAgICAgICAgcmVnYXJkZWQgYXMgaGlzIG9ubHkgcG9zc2libGUgb3Bwb25lbnQgYW5kIGFzIGNoYW1waW9uIG9mIHRoZSBmcmVlZG9tIG9mIGFsbCwKICAgICAgICAgICAgICAgICAgICBtdXN0IHN1cmVseSBub3QgYmUgdGVzdGVkIGJ5IGhlciBtYXJrZXQtc3R1ZmYgdG8gc2VlIHdoZXRoZXIgYWxsIGlzIHdlbGwgd2l0aAogICAgICAgICAgICAgICAgICAgIGhlciwgYnV0IGJ5IGhlciBhYmlsaXR5IHRvIHRydXN0IHRoZSBsb3lhbHR5IG9mIGhlciBhbGxpZXMsIGJ5IGhlciBzdHJlbmd0aCBpbgogICAgICAgICAgICAgICAgICAgIGFtc+KAlHRoZXNlIGFyZSB0aGUgcXVhbGl0aWVzIHRoYXQgeW91IG11c3QgbG9vayBmb3IgaW4gdGhlIGNpdHk7IGFuZAogICAgICAgICAgICAgICAgICAgIHRoZXNlIGluIHlvdXIgY2FzZSBhcmUgYWxsIHVudHJ1c3R3b3J0aHkgYW5kIHVuc291bmQuIDwvdHJhbnNsYXRpb24+"
translation['10.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3Ugd2lsbCB1bmRlcnN0YW5kIGl0IGlmIHlvdSBsb29rIGF0IGl0IGluIHRoaXMgd2F5LiBXaGVuIGhhdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgYWZmYWlycyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gYmVlbiBpbiB0aGUgZ3JlYXRlc3QKICAgICAgICAgICAgICAgICAgICBjb25mdXNpb24/IEZvciBubyBvdGhlciBvY2Nhc2lvbiB0aGFuIHRoZSBwcmVzZW50IGNvdWxkIHBvc3NpYmx5IGJlIG5hbWVkIGJ5CiAgICAgICAgICAgICAgICAgICAgYW55b25lLiBBbGwgZHVyaW5nIHRoZSBwYXN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB3YXMKICAgICAgICAgICAgICAgICAgICBkaXZpZGVkIGludG8gdHdvIGNhbXBzLCB0aGUgTGFjZWRhZW1vbmlhbnMnIGFuZCBvdXJzLCBhbmQgb2YgdGhlIG90aGVyIEdyZWVrcwogICAgICAgICAgICAgICAgICAgIHNvbWUgdG9vayB0aGVpciBvcmRlcnMgZnJvbSB1cywgb3RoZXJzIGZyb20gdGhlbS4gVGhlIGtpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDAyMzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDIzMSI+UGVyc2lhPC9wbGFjZU5hbWU+LCBpbiBoaW1zZWxmLCB3YXMgZXF1YWxseSBkaXN0cnVzdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgYWxsLCBidXQgYnkgdGFraW5nIHVwIHRoZSBjYXVzZSBvZiB0aGUgbG9zaW5nIHNpZGUgaW4gdGhlIHN0cnVnZ2xlLCBoZSByZXRhaW5lZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGNvbmZpZGVuY2UgdW50aWwgaGUgY291bGQgcHV0IHRoZW0gb24gYW4gZXF1YWxpdHkgd2l0aCB0aGUgb3RoZXJzOyBidXQKICAgICAgICAgICAgICAgICAgICB0aGVyZWFmdGVyIGhlIHdhcyBubyBsZXNzIGhhdGVkIGJ5IHRob3NlIGhlIGhhZCBzYXZlZCB0aGFuIGJ5IHRob3NlIHdobyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGhpcyBlbmVtaWVzIGZyb20gdGhlIGJlZ2lubmluZy4gPC90cmFuc2xhdGlvbj4="
translation['10.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgcGxhY2UsIHRoZSBraW5nIGlzIG5vdyB3ZWxsLWRpc3Bvc2VkIHRvIGFsbCB0aGUgR3JlZWtzLCBhbmQgeWV0IHRvIHVzCiAgICAgICAgICAgICAgICAgICAgbGVhc3Qgb2YgYWxsLCB1bmxlc3Mgd2UgY2FuIGVmZmVjdCBzb21lIGltbWVkaWF0ZSBpbXByb3ZlbWVudC4gSW4gdGhlIHNlY29uZAogICAgICAgICAgICAgICAgICAgIHBsYWNlLCBtYW55IHNvLWNhbGxlZCDigJxwcm90ZWN0b3Jz4oCdIGFyZSBzcHJpbmdpbmcgdXAKICAgICAgICAgICAgICAgICAgICBldmVyeXdoZXJlLCBhbmQgYWxsIHN0YXRlcyBhcmUgcml2YWxzIGZvciB0aGUgbGVhZGVyc2hpcCwgYnV0IHVuZm9ydHVuYXRlbHkgc29tZQogICAgICAgICAgICAgICAgICAgIGhvbGQgYWxvb2YsIGluIG11dHVhbCBqZWFsb3VzeSBhbmQgZGlzdHJ1c3QsIGFuZCBzbyBlYWNoIHN0YXRlIGhhcyBpc29sYXRlZAogICAgICAgICAgICAgICAgICAgIGl0c2VsZuKAlEFyZ2l2ZXMsIFRoZWJhbnMsIExhY2VkYWVtb25pYW5zLCBDb3JpbnRoaWFucywgQXJjYWRpYW5zLAogICAgICAgICAgICAgICAgICAgIG91cnNlbHZlcy4gPC90cmFuc2xhdGlvbj4="
translation['10.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeWV0LCB0aG91Z2ggR3JlZWsgcG9saXRpY3MgYXJlCiAgICAgICAgICAgICAgICAgICAgc3BsaXQgdXAgaW50byBzbyBtYW55IGZhY3Rpb25zIHVuZGVyIHNvIG1hbnkgcG93ZXJzLCBpbiBubyBzdGF0ZSwgaWYgSSBtdXN0CiAgICAgICAgICAgICAgICAgICAgc3BlYWsgdGhlIHRydXRoIGZyZWVseSwgd291bGQgeW91IGZpbmQgdGhlIGdvdmVybm1lbnQgb2ZmaWNlcyBhbmQgdGhlIGNvdW5jaWwKICAgICAgICAgICAgICAgICAgICBjaGFtYmVycyBsZXNzIG9jY3VwaWVkIHdpdGggR3JlZWsgYWZmYWlycyB0aGFuIGhlcmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBhbmQgbmF0dXJhbGx5IHNvLCBmb3IgbmVpdGhlcgogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggbG92ZSBub3IgdHJ1c3Qgbm9yIGZlYXIgZG9lcyBhbnlvbmUgaG9sZCBjb21tdW5pY2F0aW9uIHdpdGggdXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyBpcyBub3QgZHVlIHRvIGEgc2luZ2xlIGNhdXNlLAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgb3IgeW91IG1pZ2h0IGVhc2lseSByZW1lZHkgaXQsIGJ1dCB0byBtYW55IGVycm9ycyBvZiBldmVyeSBraW5kCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaG91dCB0aGUgcGFzdC4gV2l0aG91dCBlbnVtZXJhdGluZyB0aGVzZSwgSSB3aWxsIG1lbnRpb24gb25lIG9uIHdoaWNoIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSByZXN0IHR1cm4sIG9ubHkgYmVzZWVjaGluZyB5b3Ugbm90IHRvIGJlIG9mZmVuZGVkIHdpdGggbWUsIGlmIEkgc3BlYWsgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggYm9sZGx5LiBJdCBpcyB0aGUgc2VsbGluZyBvZiB5b3VyIGludGVyZXN0cyBhdCBldmVyeSBvcHBvcnR1bml0eTsgeW91cgogICAgICAgICAgICAgICAgICAgIHNoYXJlIGluIHRoZSBiYXJnYWluIGlzIGxlaXN1cmUgYW5kIGluYWN0aW9uLCB3aGljaCBjaGFybSB5b3Ugb3V0IG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICByZXNlbnRtZW50IGFnYWluc3QgeW91ciBiZXRyYXllcnMsIGJ1dCBvdGhlcnMgcmVhcCB0aGUgcmV3YXJkcy4gPC90cmFuc2xhdGlvbj4="
translation['10.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgb3RoZXIgZXJyb3JzIGl0IGlzIG5vdCB3b3J0aCB3aGlsZSB0byBpbnZlc3RpZ2F0ZQogICAgICAgICAgICAgICAgICAgIG5vdywgYnV0IHdoZW5ldmVyIGFueSBxdWVzdGlvbiBhcmlzZXMgdGhhdCBjb25jZXJucyBQaGlsaXAsIGluc3RhbnRseSB1cCBqdW1wcwogICAgICAgICAgICAgICAgICAgIHNvbWVvbmUgYW5kIHNheXMgdGhlcmUgbXVzdCBiZSBubyBub25zZW5zZSB0YWxrZWQsIG5vIGRlY2xhcmF0aW9udGlvbiBvZiB3YXIsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhlIGF0IG9uY2UgZ29lcyBvbiB0byBhZGQgaG93IGdvb2QgYSB0aGluZyBpdCBpcyB0byBwcmVzZXJ2ZSBwZWFjZSwgYW5kIHdoYXQKICAgICAgICAgICAgICAgICAgICBhIGJvdGhlciBpdCBpcyB0byBrZWVwIHVwIGEgbGFyZ2UgYXJteSwgYW5kIGhvdyDigJxjZXJ0YWluIHBlcnNvbnMgd2FudAogICAgICAgICAgICAgICAgICAgIHRvIHBsdW5kZXIgeW91ciB3ZWFsdGjigJ08bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+aS5lLiBieQogICAgICAgICAgICAgICAgICAgICAgICBkaXZlcnRpbmcgbW9uZXkgZnJvbSB0aGUgVGhlb3JpYyBGdW5kIHRvIG1pbGl0YXJ5IG9iamVjdHMuPC9ub3RlPjsgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgc3RhdGVtZW50cyBhcmUgYXMgdHJ1ZSBhcyB0aGV5IGNhbiBtYWtlIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['10.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc3VyZWx5IGl0IGlzIG5vdCB0byB5b3UgdGhhdCB0aGV5IHNob3VsZCByZWNvbW1lbmQgcGVhY2UsIGZvcgogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIHRha2VuIHRoZSBhZHZpY2UgYW5kIHRoZXJlIHlvdSBzaXQ7IGl0IGlzIHRvIHRoZSBtYW4gd2hvIGlzIGV2ZW4gbm93IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIHdhcnBhdGg7IGZvciBpZiBQaGlsaXAgY2FuIGJlIHdvbiBvdmVyLCB5b3VyIHNoYXJlIG9mIHRoZSBjb21wYWN0IGlzIHJlYWR5CiAgICAgICAgICAgICAgICAgICAgdG8gaGFuZC4gQWdhaW4sIHRoZXkgc2hvdWxkIHJlZmxlY3QgdGhhdCB0aGUgaXJrc29tZSB0aGluZyBpcyBub3QgdGhlIGV4cGVuc2Ugb2YKICAgICAgICAgICAgICAgICAgICBzZWN1cmluZyBvdXIgc2FmZXR5LCBidXQgdGhlIGRvb20gdGhhdCB3aWxsIGJlIG91cnMgaWYgd2Ugc2hyaW5rIGZyb20gdGhhdAogICAgICAgICAgICAgICAgICAgIGV4cGVuc2UuIEFzIGZvciB0aGUg4oCccGx1bmRlciBvZiB5b3VyIHdlYWx0aCzigJ0gdGhleSBvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIHByZXZlbnQgdGhhdCBieSBwcm9wb3Npbmcgc29tZSB3YXkgb2YgY2hlY2tpbmcgaXQgYW5kIG5vdCBieSBhYmFuZG9uaW5nIHlvdXIKICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdHMuIDwvdHJhbnNsYXRpb24+"
translation['10.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGl0IGlzIGp1c3QgdGhpcyB0aGF0IHJvdXNlcwogICAgICAgICAgICAgICAgICAgIG15IGluZGlnbmF0aW9uLCB0aGF0IHNvbWUgb2YgeW91IHNob3VsZCBiZSBkaXN0cmVzc2VkIGF0IHRoZSBwcm9zcGVjdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwbHVuZGVyIG9mIHlvdXIgd2VhbHRoLCB3aGVuIHlvdSBhcmUgcXVpdGUgY29tcGV0ZW50IHRvIHByb3RlY3QgaXQgYW5kIHRvIHB1bmlzaAogICAgICAgICAgICAgICAgICAgIGFueSBvZmZlbmRlciwgYnV0IHRoYXQgeW91IGFyZSBub3QgZGlzdHJlc3NlZCBhdCB0aGUgc2lnaHQgb2YgUGhpbGlwIHRodXMKICAgICAgICAgICAgICAgICAgICBwbHVuZGVyaW5nIGV2ZXJ5IEdyZWVrIHN0YXRlIGluIHR1cm4sIHRoZSBtb3JlIHNvIGFzIGhlIGlzIHBsdW5kZXJpbmcgdGhlbSB0bwogICAgICAgICAgICAgICAgICAgIGluanVyZSB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['10.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2h5CiAgICAgICAgICAgICAgICAgICAgdGhlbiwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGFzIG5vbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGVzZSBzcGVha2VycyBldmVyIGFkbWl0dGVkIHRoYXQgUGhpbGlwIGlzIHZpb2xhdGluZyByaWdodHMgYW5kIHByb3Zva2luZyB3YXIsCiAgICAgICAgICAgICAgICAgICAgd2hlbiBoZSBpcyB0aHVzIG9wZW5seSB2aW9sYXRpbmcgcmlnaHRzIGFuZCBzdWJkdWluZyBjaXRpZXMsIGJ1dCB3aGVuIG90aGVycwogICAgICAgICAgICAgICAgICAgIHVyZ2UgeW91IG5vdCB0byBnaXZlIHdheSB0byBQaGlsaXAgbm9yIHN1Ym1pdCB0byB0aGVzZSBsb3NzZXMsIHRoZXkgc2F5IHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgcHJvdm9raW5nIHdhcj8gSXQgaXMgYmVjYXVzZSB0aGV5IHdhbnQgdGhlIGJsYW1lIGZvciB0aGUgc3VmZmVyaW5ncyB0aGF0IHRoZSB3YXIKICAgICAgICAgICAgICAgICAgICB3aWxsIGVudGFpbOKAlGZvciBpdCBpcyBpbmV2aXRhYmxlLCB5ZXMsIGluZXZpdGFibGUgdGhhdCB0aGUgd2FyIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGNhdXNlIG11Y2ggZGlzdHJlc3PigJR0byBiZSBsYWlkIGF0IHRoZSBkb29ycyBvZiB0aG9zZSB3aG8gYmVsaWV2ZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlIHlvdXIgd2lzZXN0IGNvdW5zZWxsb3JzLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBjb252aW5jZWQgdGhhdCBpZiB5b3Ugb2ZmZXIgYSB3aG9sZS1oZWFydGVkIGFuZCB1bmFuaW1vdXMgb3Bwb3NpdGlvbiB0byBQaGlsaXAsCiAgICAgICAgICAgICAgICAgICAgeW91IHdpbGwgYmVhdCBoaW0gYW5kIHRoZXkgd2lsbCBoYXZlIG5vIGZ1cnRoZXIgY2hhbmNlIG9mIGVhcm5pbmcgaGlzIHBheSwgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBpZiBhdCB0aGUgZmlyc3QgYWxhcm0gb2Ygd2FyIHlvdSB0aHJvdyB0aGUgYmxhbWUgb24gY2VydGFpbiBwZXJzb25zIGFuZAogICAgICAgICAgICAgICAgICAgIGRldm90ZSB5b3VyIGVuZXJnaWVzIHRvIGJyaW5naW5nIHRoZW0gdG8gdHJpYWwsIHRoZXkgdGhlbXNlbHZlcyBieSBhY2N1c2luZyB0aGVtCiAgICAgICAgICAgICAgICAgICAgd2lsbCBnYWluIGJvdGggdGhlaXIgZW5kc+KAlHJlcHV0YXRpb24gd2l0aCB5b3UgYW5kIG1vbmV5IGZyb20gaGltLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIHlvdSB3aWxsIHB1bmlzaCB0aGUgbWVuIHdobyBoYXZlIHNwb2tlbiBpbiB5b3VyIGludGVyZXN0cyBmb3IgdGhlIGZhdWx0cwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSBvdWdodCB0byBwdW5pc2ggaW4gdGhlaXIgYWNjdXNlcnMuIDwvdHJhbnNsYXRpb24+"
translation['10.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGFyZSB0aGVpciBob3BlcywgYW5kIHN1Y2ggaXMgdGhlIGRlc2lnbiBvZiB0aGUgYWNjdXNhdGlvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAg4oCcY2VydGFpbiBwZXJzb25zIHdpc2ggdG8gcHJvdm9rZSB3YXIu4oCdIEJ1dCBJIGFtIGFic29sdXRlbHkKICAgICAgICAgICAgICAgICAgICBjZXJ0YWluIHRoYXQsIHdpdGhvdXQgd2FpdGluZyBmb3IgYW55IEF0aGVuaWFuIHRvIHByb3Bvc2UgYSBkZWNsYXJhdGlvbiBvZiB3YXIsCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIGlzIGluIHBvc3Nlc3Npb24gb2YgbXVjaCBvZiBvdXIgdGVycml0b3J5IGFuZCBoYXMganVzdCBkaXNwYXRjaGVkIGEgZm9yY2UKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IENhcmRpYS4gSWYsIGhvd2V2ZXIsIHdlIGxpa2UgdG8gcHJldGVuZCB0aGF0IGhlIGlzIG5vdCBhdCB3YXIgd2l0aCB1cywKICAgICAgICAgICAgICAgICAgICBoZSB3b3VsZCBiZSB0aGUgZ3JlYXRlc3QgZm9vbCBhbGl2ZSBpZiBoZSB0cmllZCB0byBkaXNwcm92ZSB0aGF0OyBmb3Igd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICB2aWN0aW1zIGRlbnkgdGhlIHdyb25nLCB3aGF0IHNob3VsZCB0aGUgbWFsZWZhY3RvciBkbz8gPC90cmFuc2xhdGlvbj4="
translation['10.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBvdXIgdHVybiBjb21lcywgd2hhdCBzaGFsbCB3ZSBzYXkgdGhlbj8gRm9yIG9mIGNvdXJzZSBoZQogICAgICAgICAgICAgICAgICAgIHdpbGwgZGVueSB0aGF0IGhlIGlzIGF0dGFja2luZyB1cywganVzdCBhcyBoZSBkZW5pZWQgdGhhdCBoZSB3YXMgYXR0YWNraW5nIHRoZQogICAgICAgICAgICAgICAgICAgIG1lbiBvZiBPcmV1cywgd2hlbiBoaXMgdHJvb3BzIHdlcmUgYWxyZWFkeSBpbiB0aGVpciB0ZXJyaXRvcnksIG9yIHRoZSBQaGVyYWVhbnMKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhhdCwgd2hlbiBoZSB3YXMgYWN0dWFsbHkgYXNzYXVsdGluZyB0aGVpciB3YWxscywgb3IgdGhlIE9seW50aGlhbnMgYXQKICAgICAgICAgICAgICAgICAgICB0aGUgc3RhcnQsIHVudGlsIGhlIHdhcyBpbnNpZGUgdGhlaXIgZnJvbnRpZXIgd2l0aCBoaXMgYXJteS4gT3Igc2hhbGwgd2Ugc2F5LAogICAgICAgICAgICAgICAgICAgIGV2ZW4gYXQgdGhhdCBob3VyLCB0aGF0IHRob3NlIHdobyBiaWQgdXMgcmVwZWwgaGltIGFyZSBwcm92b2tpbmcgd2FyPyBJZiBzbywKICAgICAgICAgICAgICAgICAgICB0aGVyZSBpcyBub3RoaW5nIGxlZnQgYnV0IHNsYXZlcnksIGZvciB0aGVyZSBpcyBubyBvdGhlciBhbHRlcm5hdGl2ZS4gPC90cmFuc2xhdGlvbj4="
translation['10.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgeW91IGhhdmUgbm90IHRoZSBzYW1lIGludGVyZXN0cyBhdCBzdGFrZSBhcwogICAgICAgICAgICAgICAgICAgIHNvbWUgb2YgdGhlIG90aGVycywgZm9yIGl0IGlzIG5vdCB5b3VyIHN1YmplY3Rpb24gdGhhdCBQaGlsaXAgYWltcyBhdDsgbm8sIGJ1dAogICAgICAgICAgICAgICAgICAgIHlvdXIgY29tcGxldGUgYW5uaWhpbGF0aW9uLiBGb3IgaGUgaXMgd2VsbCBhc3N1cmVkIHRoYXQgeW91IHdpbGwgbm90IGNvbnNlbnQgdG8KICAgICAgICAgICAgICAgICAgICBiZSBzbGF2ZXM7IG9yLCBpZiB5b3UgY29uc2VudCwgd2lsbCBuZXZlciBsZWFybiBob3cgdG8gYmUgc2xhdmVzLCBmb3IgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIGFjY3VzdG9tZWQgdG8gcnVsZSBvdGhlcnM7IGJ1dCB0aGF0IHlvdSB3aWxsIGJlIGFibGUsIGlmIHlvdSBzZWl6ZSB5b3VyIGNoYW5jZXMsCiAgICAgICAgICAgICAgICAgICAgdG8gY2F1c2UgaGltIG1vcmUgdHJvdWJsZSB0aGFuIGFsbCB0aGUgcmVzdCBvZiB0aGUgd29ybGQuIEZvciB0aGF0IHJlYXNvbiBoZQogICAgICAgICAgICAgICAgICAgIHdpbGwgbm90IHNwYXJlIHlvdSwgaWYgaGUgZ2V0cyB5b3UgaW4gaGlzIHBvd2VyLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlIHlvdSBtdXN0IG5lZWRzIGJlYXIgaW4gbWluZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhpcyB3aWxsIGJlIGEgbGlmZS1hbmQtZGVhdGggc3RydWdnbGUsIGFuZCB0aGUgbWVuIHdobyBoYXZlIHNvbGQKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHRvIFBoaWxpcCBtdXN0IGJlIHB1YmxpY2x5IGN1ZGdlbGxlZCB0byBkZWF0aDsgZm9yIGl0IGlzIGltcG9zc2libGUsCiAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZSB0byBxdWVsbCB0aGUgZm9lcyB3aXRob3V0LCB1bnRpbCB5b3UgaGF2ZSBwdW5pc2hlZCB0aGUgZm9lcyB3aXRoaW4KICAgICAgICAgICAgICAgICAgICB5b3VyIGdhdGVzLCBidXQgaWYgeW91IGxldCB0aGVzZSBzdGFuZCBhcyBzdHVtYmxpbmctYmxvY2tzIGluIHlvdXIgcGF0aCwgeW91CiAgICAgICAgICAgICAgICAgICAgbXVzdCBmYWlsIGFnYWluc3QgdGhlIG90aGVycy4gPC90cmFuc2xhdGlvbj4="
translation['10.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGRvIHlvdQogICAgICAgICAgICAgICAgICAgIGltYWdpbmUgaXMgaGlzIG1vdGl2ZSBpbiBvdXRyYWdpbmcgeW91IG5vd+KAlEkgdGhpbmsgbm8gb3RoZXIgdGVybQogICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlcyBoaXMgY29uZHVjdOKAlG9yIHdoeSBpcyBpdCB0aGF0LCBpbiBkZWNlaXZpbmcgdGhlIG90aGVycywgaGUKICAgICAgICAgICAgICAgICAgICBhdCBsZWFzdCBjb25mZXJzIGJlbmVmaXRzIHVwb24gdGhlbSwgYnV0IGluIHlvdXIgY2FzZSBoZSBpcyByZXNvcnRpbmcgdG8KICAgICAgICAgICAgICAgICAgICB0aHJlYXRzPyBGb3IgZXhhbXBsZSwgdGhlIFRoZXNzYWxpYW5zIHdlcmUgYmVndWlsZWQgYnkgaGlzIGdlbmVyb3NpdHkgaW50byB0aGVpcgogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgc3RhdGUgb2Ygc2Vydml0dWRlOyBubyB3b3JkcyBjYW4gZGVzY3JpYmUgaG93IGhlIGZvcm1lcmx5IGRlY2VpdmVkIHRoZQogICAgICAgICAgICAgICAgICAgIG1pc2VyYWJsZSBPbHludGhpYW5zIGJ5IGhpcyBnaWZ0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+IGFuZCBtYW55IG90aGVyIHBsYWNlczsgdGhlIFRoZWJhbnMgaGUgaXMgbm93CiAgICAgICAgICAgICAgICAgICAgbWlzbGVhZGluZywgaGF2aW5nIGhhbmRlZCBvdmVyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICB0byB0aGVtIGFuZCByZWxpZXZlZCB0aGVtIG9mIGEgbG9uZyBhbmQgdHJ5aW5nIHdhci4gPC90cmFuc2xhdGlvbj4="
translation['10.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBlYWNoIG9mIHRoZXNlIHN0YXRlcyBoYXMgcmVhcGVkIHNvbWUgYmVuZWZpdCBmcm9tIGhpbSwgYnV0IHdoaWxlCiAgICAgICAgICAgICAgICAgICAgc29tZSBoYXZlIGFscmVhZHkgcGFpZCB0aGUgcHJpY2UgYnkgdGhlaXIgc3VmZmVyaW5ncywgdGhlIG90aGVycyBoYXZlIHlldCB0bwogICAgICAgICAgICAgICAgICAgIHN1ZmZlciB3aGF0ZXZlciBzaGFsbCBmYWxsIHRvIHRoZWlyIGxvdC4gQXMgZm9yIHlvdSwgSSBkbyBub3Qgc2F5IGhvdyBmYXIgeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIHJvYmJlZCwgYnV0IGluIHRoZSBhY3R1YWwgbWFraW5nIG9mIHRoZSBwZWFjZSwgaG93IGNvbXBsZXRlbHkgeW91IHdlcmUKICAgICAgICAgICAgICAgICAgICBkZWNlaXZlZCwgaG93IGdyaWV2b3VzbHkgeW91IHdlcmUgcm9iYmVkISBXZXJlIHlvdSBub3QgZGVjZWl2ZWQgYWJvdXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDQwMDM5NjMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNDAwMzk2MyI+UGhvY2lzPC9wbGFjZU5hbWU+LCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4sIHRoZSBUaHJhY2Utd2FyZCBkaXN0cmljdHMsIERvcmlzY3VzLCBTZXJyaXVtLAogICAgICAgICAgICAgICAgICAgIENlcnNvYmxlcHRlcyBoaW1zZWxmPyBJcyBub3QgUGhpbGlwIG5vdyBob2xkaW5nIHRoZSBjaXR5IG9mIHRoZSBDYXJkaWFucywgYW5kCiAgICAgICAgICAgICAgICAgICAgYWRtaXR0aW5nIHRoYXQgaGUgaG9sZHMgaXQ/IDwvdHJhbnNsYXRpb24+"
translation['10.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5XaHkgdGhlbiBkb2VzIGhlCiAgICAgICAgICAgICAgICAgICAgZGVhbCBpbiB0aGF0IHdheSB3aXRoIHRoZSBvdGhlciBHcmVla3MsIGJ1dCB3aXRoIHlvdSBpbiB0aGlzIHdheT8gQmVjYXVzZSB5b3VycwogICAgICAgICAgICAgICAgICAgIGlzIHRoZSBvbmUgY2l0eSBpbiB0aGUgd29ybGQgd2hlcmUgaW1tdW5pdHkgaXMgZ3JhbnRlZCB0byBwbGVhZCBvbiBiZWhhbGYgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcywgYW5kIHdoZXJlIGEgbWFuIHdobyBoYXMgYmVlbiBicmliZWQgY2FuIHNhZmVseSBhZGRyZXNzIHlvdSBpbiBwZXJzb24sCiAgICAgICAgICAgICAgICAgICAgZXZlbiB3aGVuIHlvdSBoYXZlIGJlZW4gcm9iYmVkIG9mIHlvdXIgb3duLiBJdCB3b3VsZCBub3QgaGF2ZSBiZWVuIHNhZmUgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+IHRvIHBsZWFkIFBoaWxpcCdzCiAgICAgICAgICAgICAgICAgICAgY2F1c2UsIHVubGVzcyB0aGUgT2x5bnRoaWFuIGRlbW9jcmFjeSBoYWQgc2hhcmVkIGluIHRoZSBlbmpveW1lbnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmV2ZW51ZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDQ4MTQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwNDgxNCI+UG90aWRhZWE8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['10.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3b3VsZCBub3QgaGF2ZSBiZWVuIHNhZmUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4gdG8gcGxlYWQgUGhpbGlwJ3MgY2F1c2UsIGlmIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbW1vbmVycyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPiBoYWQgbm90IHNoYXJlZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBhZHZhbnRhZ2VzIHRoYXQgUGhpbGlwIGNvbmZlcnJlZCwgd2hlbiBoZSBleHBlbGxlZCB0aGVpciB0eXJhbnRzIGFuZAogICAgICAgICAgICAgICAgICAgIHJlc3RvcmVkIHRvIHRoZW0gdGhlaXIgQW1waGljdHlvbmljIHByaXZpbGVnZXMuIEl0IHdvdWxkIG5vdCBoYXZlIGJlZW4gc2FmZSBhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIHVudGlsIGhlIGdhdmUgdGhlbSBiYWNrCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4gYW5kIHdpcGVkIG91dCB0aGUgUGhvY2lhbnMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aG91Z2ggUGhpbGlwIGhhcyBub3Qgb25seSByb2JiZWQgeW91IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiBhbmQgdGhlIENhcmRpYW4gdGVycml0b3J5LAogICAgICAgICAgICAgICAgICAgIGJ1dCBpcyBhbHNvIHR1cm5pbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGludG8gYQogICAgICAgICAgICAgICAgICAgIGZvcnRyZXNzIHRvIG92ZXJhd2UgdXMgYW5kIGlzIGV2ZW4gbm93IG9uIGhpcyB3YXkgdG8gYXR0YWNrIEJ5emFudGl1bSwgaXQgaXMKICAgICAgICAgICAgICAgICAgICBzYWZlIHRvIHNwZWFrIG9uIFBoaWxpcCdzIGJlaGFsZi4gSW5kZWVkLCBvZiB0aGVzZSBwb2xpdGljaWFucywgc29tZSB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIGJlZ2dhcnMgYXJlIHN1ZGRlbmx5IGdyb3dpbmcgcmljaCwgc29tZSB1bmtub3duIHRvIG5hbWUgYW5kIGZhbWUgYXJlIG5vdyBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBob25vdXIgYW5kIGRpc3RpbmN0aW9uOyB3aGlsZSB5b3UsIG9uIHRoZSBjb250cmFyeSwgaGF2ZSBwYXNzZWQgZnJvbSBob25vdXIgdG8KICAgICAgICAgICAgICAgICAgICBkaXNob25vdXIsIGZyb20gYWZmbHVlbmNlIHRvIGRlc3RpdHV0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IKICAgICAgICAgICAgICAgICAgICBhIGNpdHkncyB3ZWFsdGggSSBob2xkIHRvIGJlIGFsbGllcywgY3JlZGl0LCBnb29kd2lsbCwgYW5kIG9mIGFsbCB0aGVzZSB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgZGVzdGl0dXRlLiBBbmQgaXQgaXMgYmVjYXVzZSB5b3UgYXJlIGluZGlmZmVyZW50IHRvIHRoZXNlIHRoaW5ncyBhbmQgYWxsb3cgdGhlbQogICAgICAgICAgICAgICAgICAgIHRvIGJlIHRha2VuIGZyb20geW91IGluIHRoaXMgd2F5LCB0aGF0IFBoaWxpcCBpcyBwcm9zcGVyb3VzIGFuZCBwb3dlcmZ1bCBhbmQKICAgICAgICAgICAgICAgICAgICBmb3JtaWRhYmxlIHRvIEdyZWVrcyBhbmQgYmFyYmFyaWFucyBhbGlrZSwgd2hpbGUgeW91IGFyZSBkZXNlcnRlZCBhbmQKICAgICAgICAgICAgICAgICAgICBodW1pbGlhdGVkLCBmYW1vdXMgZm9yIHlvdXIgd2VsbC1zdG9ja2VkIG1hcmtldHMsIGJ1dCBpbiBwcm92aXNpb24gZm9yIHlvdXIKICAgICAgICAgICAgICAgICAgICBwcm9wZXIgbmVlZHMsIGNvbnRlbXB0aWJsZS4gPC90cmFuc2xhdGlvbj4="
translation['10.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WWV0IEkgb2JzZXJ2ZSB0aGF0IHNvbWUgb2Ygb3VyIHNwZWFrZXJzIGRvIG5vdCB1cmdlIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgcG9saWN5IGZvciB5b3UgYXMgZm9yIHRoZW1zZWx2ZXM7IGZvciB5b3UsIHRoZXkgc2F5LCBvdWdodCB0byByZW1haW4gcXVpZXQKICAgICAgICAgICAgICAgICAgICBldmVuIHdoZW4geW91IGFyZSB3cm9uZ2VkOyB0aGVtc2VsdmVzIGNhbm5vdCByZW1haW4gcXVpZXQgYW1vbmcgeW91LCB0aG91Z2ggbm8KICAgICAgICAgICAgICAgICAgICBvbmUgZG9lcyB0aGVtIHdyb25nLiBBbmQgeWV0LCByYWlsbGVyeSBhcGFydCwgc3VwcG9zZSBzb21lb25lIHNob3VsZCBhc2ssCiAgICAgICAgICAgICAgICAgICAg4oCcVGVsbCBtZSwgQXJpc3RvbWVkZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFuIHVua25vd24KICAgICAgICAgICAgICAgICAgICAgICAgb3Bwb25lbnQuIElmIHdpdGggRGluZG9yZiB3ZSBhZG9wdCB0aGUgdnVsZ2F0ZSwgaXQgd2lsbCByZWZlciB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gYWN0b3IgQXJpc3RvZGVtdXMsIHdobyB3YXMgYSBtZW1iZXIgb2YgdGhlIGZpcnN0IGVtYmFzc3kgdG8gUGhpbGlwCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBpcyBtZW50aW9uZWQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yMSIgdmFsaWQ9InllcyI+RGVtLiAxOC4yMTwvYmlibD4gYW5kIGluIHNldmVyYWwKICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2FnZXMgb2YgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOSIgdmFsaWQ9InllcyI+RGVtLiAxOTwvYmlibD48L25vdGU+IHdoeSwgd2hlbiB5b3Uga25vdwogICAgICAgICAgICAgICAgICAgIHBlcmZlY3RseSB3ZWxs4oCUZm9yIG5vIG9uZSBpcyBpZ25vcmFudCBvZiBzdWNoIG1hdHRlcnPigJR0aGF0IGEKICAgICAgICAgICAgICAgICAgICBwcml2YXRlIHN0YXRpb24gaXMgc2VjdXJlIGFuZCBmcmVlIGZyb20gcmlzaywgYnV0IHRoZSBsaWZlIG9mIGEgcG9saXRpY2lhbiBpcwogICAgICAgICAgICAgICAgICAgIHByZWNhcmlvdXMsIG9wZW4gdG8gYXR0YWNrLCBhbmQgZnVsbCBvZiB0cmlhbHMgYW5kIG1pc2ZvcnR1bmVzIGV2ZXJ5IGRheSwgd2h5IGRvCiAgICAgICAgICAgICAgICAgICAgeW91IG5vdCBjaG9vc2UgdGhlIHF1aWV0LCBzZXF1ZXN0ZXJlZCBsaWZlIGluc3RlYWQgb2YgdGhlIGxpZmUgb2YKICAgICAgICAgICAgICAgICAgICBwZXJpbD/igJ0gV2hhdCB3b3VsZCB5b3UgcmVwbHk/IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjEiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMjE8L2JpYmw+IGFuZCBpbiBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NhZ2VzIG9mIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkiIHZhbGlkPSJ5ZXMiPkRlbS4gMTk8L2JpYmw+PC90cmFuc2xhdGlvbj4="
translation['10.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYKICAgICAgICAgICAgICAgICAgICB3ZSBzaG91bGQgZ3JhbnQgdGhlIHRydXRoIG9mIHdoYXQgd291bGQgYmUgeW91ciBiZXN0IHBvc3NpYmxlIGFuc3dlciwgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBkbyBhbGwgdGhpcyBmb3IgbG92ZSBvZiBnbG9yeSBhbmQgcmVub3duLCBJIHdvbmRlciB3aGF0IGVhcnRobHkgcmVhc29uIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoaW5raW5nIHRoYXQgeW91IHlvdXJzZWxmIG91Z2h0IGZvciB0aGF0IG9iamVjdCB0byBtYWtlIGV2ZXJ5IGV4ZXJ0aW9uLAogICAgICAgICAgICAgICAgICAgIGZhY2luZyB0b2lsIGFuZCBkYW5nZXIsIHdoZXJlYXMgeW91IGFkdmlzZSB0aGUgU3RhdGUgdG8gYWJhbmRvbiBzdWNoIGVmZm9ydHMgaW4KICAgICAgICAgICAgICAgICAgICBzaGVlciBpbmRpZmZlcmVuY2UuIEZvciB0aGlzIHlvdSBjYW5ub3Qgc2F54oCUdGhhdCBpdCBpcyB5b3VyIGR1dHkgdG8KICAgICAgICAgICAgICAgICAgICBtYWtlIGEgZmlndXJlIGluIHRoZSBTdGF0ZSwgYnV0IHRoYXQgdGhlIFN0YXRlIGlzIG9mIG5vIGltcG9ydGFuY2UgaW4gdGhlIEdyZWVrCiAgICAgICAgICAgICAgICAgICAgd29ybGQuIDwvdHJhbnNsYXRpb24+"
translation['10.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlcmUgaXMgYW5vdGhlciB0aGluZyBJIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIHNlZeKAlHRoYXQgaXQgaXMgc2FmZSBmb3IgdGhlIFN0YXRlIHRvIG1pbmQgaXRzIG93biBidXNpbmVzcywgYnV0CiAgICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzIGZvciB5b3UgaWYgeW91IGRvIG5vdCBnbyBiZXlvbmQgeW91ciBmZWxsb3ctY2l0aXplbnMgaW4gbWVkZGxpbmcgd2l0aAogICAgICAgICAgICAgICAgICAgIGFmZmFpcnMuIDwvdHJhbnNsYXRpb24+"
translation['10.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5OYXksIG9uIHRoZSBjb250cmFyeSwgSSBkbyBmb3Jlc2VlCiAgICAgICAgICAgICAgICAgICAgdGhlIHV0bW9zdCBkYW5nZXIsIHRvIHlvdSBmcm9tIHlvdXIgYnVzdGxpbmcgYW5kIG1lZGRsaW5nLCBidXQgdG8gdGhlIFN0YXRlIGZyb20KICAgICAgICAgICAgICAgICAgICBpdHMgaW5hY3Rpdml0eS4gQnV0IHlvdSBtYXkgc2F5IHRoYXQgeW91IGhhdmUgdGhlIGhvbm91ciBvZiB5b3VyIGdyYW5kZmF0aGVyIGFuZAogICAgICAgICAgICAgICAgICAgIGZhdGhlciB0byB1cGhvbGQsIGFuZCBpdCB3b3VsZCBiZSBzY2FuZGFsb3VzIHRvIHN1YnZlcnQgaXQgaW4geW91ciBwZXJzb24sIGJ1dAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIFN0YXRlIGhhcyBpbmhlcml0ZWQgb25seSBuYW1lbGVzcyBhbmQgcGFsdHJ5IGV4cGxvaXRzIGZyb20gb3VyCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzLiBCdXQgdGhhdCB0b28gaXMgdW50cnVlOyBmb3IgeW91IGhhZCBhIHRoaWVmIGZvciB5b3VyIGZhdGhlciwgaWYgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgbGlrZSB5b3UsIGJ1dCBvdXIgZmF0aGVycywgYXMgYWxsIHRoZSBHcmVla3Mga25vdywgcHJlc2VydmVkIHRoZW0gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBkZWFkbGllc3QgcGVyaWxzLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW5kZWVkIHRoZXJlIGFyZSBzb21lCiAgICAgICAgICAgICAgICAgICAgd2hvc2UgbWFuYWdlbWVudCBib3RoIG9mIHByaXZhdGUgYW5kIG9mIHB1YmxpYyBidXNpbmVzcyBpcyBuZWl0aGVyIGZhaXIgbm9yCiAgICAgICAgICAgICAgICAgICAgY29uc3RpdHV0aW9uYWw7IGZvciBob3cgaXMgaXQgZmFpciB0aGF0IHNvbWUgb2YgdGhlc2UgbWVuLCBqdXN0IHJlbGVhc2VkIGZyb20KICAgICAgICAgICAgICAgICAgICBqYWlsLCBzaG91bGQgYmUgaWdub3JhbnQgb2YgdGhlaXIgb3duIHdvcnRoLCB3aGlsZSB0aGF0IHN0YXRlLCB3aGljaCB3YXMgb25jZQogICAgICAgICAgICAgICAgICAgIHRoZSBjaGFtcGlvbiBvZiB0aGUgcmVzdCBhbmQgbWFpbnRhaW5lZCB0aGUgcHJlLWVtaW5lbmNlLCBzaG91bGQgbm93IGJlIHN1bmsgaW4KICAgICAgICAgICAgICAgICAgICBhbGwgZGlzaG9ub3VyIGFuZCBodW1pbGlhdGlvbj8gPC90cmFuc2xhdGlvbj4="
translation['10.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlLCB0aG91Z2ggdGhlcmUgaXMgbXVjaCB0aGF0IEkgY291bGQgc2F5IG9uIG1hbnkKICAgICAgICAgICAgICAgICAgICB0b3BpY3MsIEkgd2lsbCBmb3JiZWFyOyBmb3IgaW5kZWVkIGl0IGlzIG5vdCwgSSB0aGluaywgbGFjayBvZiBzcGVlY2hlcyBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBub3cgb3IgYXQgYW55IG90aGVyIHRpbWUgdGhhdCBpcyB0aGUgY2F1c2Ugb2Ygb3VyIGRpc3RyZXNzLCBidXQgd2hlbiB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGxpc3RlbmVkIHRvIHRoZSByaWdodCBzb3J0IG9mIGFyZ3VtZW50cywgYW5kIHdoZW4geW91IGFyZSB1bmFuaW1vdXMgYXMgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICB2YWxpZGl0eSwgeW91IHNpdCBvbiBhbmQgZ2l2ZSBlcXVhbCBhdHRlbnRpb24gdG8gdGhvc2Ugd2hvIHdpc2ggdG8gb3ZlcnRocm93IGFuZAogICAgICAgICAgICAgICAgICAgIGRpc3RvcnQgdGhlbS4gSXQgaXMgbm90IHRoYXQgeW91IGRvIG5vdCByZWNvZ25pemUgdGhlc2Ugc3BlYWtlcnMsIGZvciBhcyBzb29uIGFzCiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgc2VlbiB0aGVtLCB5b3Uga25vdyBleGFjdGx5IHdobyBpcyBzcGVha2luZyBmb3IgcGF5IGFuZCBhY3RpbmcgYXMKICAgICAgICAgICAgICAgICAgICBQaGlsaXAncyBhZ2VudCwgYW5kIHdobyBpcyBzaW5jZXJlbHkgZGVmZW5kaW5nIHlvdXIgYmVzdCBpbnRlcmVzdHM7IGJ1dCB5b3VyIGFpbQogICAgICAgICAgICAgICAgICAgIGlzIHRvIGZpbmQgZmF1bHQgd2l0aCB0aGVzZSBsYXR0ZXIgYW5kLCBieSB0dXJuaW5nIHRoZSBzdWJqZWN0IGludG8gcmlkaWN1bGUgYW5kCiAgICAgICAgICAgICAgICAgICAgcmFpbGxlcnksIHRvIGF2b2lkIGRvaW5nIGFueSBwYXJ0IG9mIHlvdXIgb3duIGR1dHkuIDwvdHJhbnNsYXRpb24+"
