var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    translatedSection.style.backgroundColor = "";
  }
  translatedSection = document.getElementById(line);
  translatedSection.style.backgroundColor = "yellow";
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  translatedSection.style.backgroundColor = "";
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
translation['1.1343a.1'] = "PHRyYW5zbGF0aW9uPjxkaXYxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgb3JnPSJ1bmlmb3JtIiBzYW1wbGU9ImNvbXBsZXRlIiB0eXBlPSJCb29rIj4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzNDNhIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjEuMSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBCZXR3ZWVuIEhvdXNlY3JhZnQgKHRoZSBhcnQgb2YgZ292ZXJuaW5nIGEgSG91c2Vob2xkIG9yIEhvbWUpIGFuZCBTdGF0ZWNyYWZ0CiAgICAgICAgICAgICAgICAgICAgKHRoZSBhcnQgb2YgZ292ZXJuaW5nIGEgTmF0aW9uKSB0aGVyZSBhcmUgZGlmZmVyZW5jZXMgY29ycmVzcG9uZGluZyB0byB0aG9zZQogICAgICAgICAgICAgICAgICAgIGJldHdlZW4gdGhlIHR3byBraW5kcyBvZiBjb21tdW5pdHkgb3ZlciB3aGljaCB0aGV5IHNldmVyYWxseSBwcmVzaWRlLiBUaGVyZSBpcywKICAgICAgICAgICAgICAgICAgICBob3dldmVyLCB0aGlzIGZ1cnRoZXIgZGlmZmVyZW5jZTogdGhhdCB3aGVyZWFzIHRoZSBnb3Zlcm5tZW50IG9mIGEgbmF0aW9uIGlzIGluCiAgICAgICAgICAgICAgICAgICAgbWFueSBoYW5kcywgYSBob3VzZWhvbGQgaGFzIGJ1dCBhIHNpbmdsZSBydWxlci48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBzb21lIGFydHMgYXJlIGRpdmlkZWQgaW50byB0d28gc2VwYXJhdGUgYnJhbmNoZXMsIG9uZSBjb25jZXJuZWQgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBtYWtpbmcgb2YgYW4gb2JqZWN04oCUZm9yIGV4YW1wbGUgYSBseXJlIG9yIGEgZmx1dGXigJRhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgd2l0aCBpdHMgdXNlIHdoZW4gbWFkZS4gU3RhdGVjcmFmdCBvbiB0aGUgb3RoZXIgaGFuZCBzaG93cyB1cyBob3cgdG8gYnVpbGQKICAgICAgICAgICAgICAgICAgICB1cCBhIG5hdGlvbiBmcm9tIGl0cyBiZWdpbm5pbmcsIGFzIHdlbGwgYXMgaG93IHRvIG9yZGVyIHJpZ2h0bHkgYSBuYXRpb24gdGhhdAogICAgICAgICAgICAgICAgICAgIGFscmVhZHkgZXhpc3RzOyBmcm9tIHdoaWNoIHdlIGluZmVyIHRoYXQgSG91c2VjcmFmdCBhbHNvIHRlbGxzIHVzIGZpcnN0IGhvdyB0bwogICAgICAgICAgICAgICAgICAgIGFjcXVpcmUgYSBob3VzZWhvbGQgYW5kIHRoZW4gaG93IHRvIGNvbmR1Y3QgaXRzIGFmZmFpcnMuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSIxLjIiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gQnkgYSBOYXRpb24gd2UKICAgICAgICAgICAgICAgICAgICBtZWFuIGFuIGFzc2VtYmxhZ2Ugb2YgaG91c2VzLCBsYW5kcywgYW5kIHByb3BlcnR5IHN1ZmZpY2llbnQgdG8gZW5hYmxlIHRoZQogICAgICAgICAgICAgICAgICAgIGluaGFiaXRhbnRzIHRvIGxlYWQgYSBjaXZpbGl6ZWQgbGlmZS4gVGhpcyBpcyBwcm92ZWQgYnkgdGhlIGZhY3QgdGhhdCB3aGVuIHN1Y2gKICAgICAgICAgICAgICAgICAgICBhIGxpZmUgaXMgbm8gbG9uZ2VyIHBvc3NpYmxlIGZvciB0aGVtLCB0aGUgdGllIGl0c2VsZiB3aGljaCB1bml0ZXMgdGhlbSBpcwogICAgICAgICAgICAgICAgICAgIGRpc3NvbHZlZC4gTW9yZW92ZXIsIGl0IGlzIHdpdGggc3VjaCBhIGxpZmUgaW4gdmlldyB0aGF0IHRoZSBhc3NvY2lhdGlvbiBpcwogICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsbHkgZm9ybWVkOyBhbmQgdGhlIG9iamVjdCBmb3Igd2hpY2ggYSB0aGluZyBleGlzdHMgYW5kIGhhcyBjb21lIGludG8KICAgICAgICAgICAgICAgICAgICBiZWluZyBpcyBpbiBmYWN0IHRoZSB2ZXJ5IGVzc2VuY2Ugb2YgdGhhdCBwYXJ0aWN1bGFyIHRoaW5nLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RnJvbSB0aGlzIGRlZmluaXRpb24gb2YgYSBOYXRpb24sIGl0IGlzIGV2aWRlbnQgdGhhdCB0aGUgYXJ0IG9mCiAgICAgICAgICAgICAgICAgICAgSG91c2VjcmFmdCBpcyBvbGRlciB0aGFuIHRoYXQgb2YgU3RhdGVjcmFmdCwgc2luY2UgdGhlIEhvdXNlaG9sZCwgd2hpY2ggaXQKICAgICAgICAgICAgICAgICAgICBjcmVhdGVzLCBpcyBvbGRlcjsgYmVpbmcgYSBjb21wb25lbnQgcGFydCBvZiB0aGUgTmF0aW9uIGNyZWF0ZWQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgU3RhdGVjcmFmdC48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFjY29yZGluZ2x5IHdlIG11c3QgY29uc2lkZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbmF0dXJlIG9mIEhvdXNlY3JhZnQsIGFuZCB3aGF0IHRoZSBIb3VzZWhvbGQsIHdoaWNoIGl0IGNyZWF0ZXMsIGFjdHVhbGx5CiAgICAgICAgICAgICAgICAgICAgICAgIGlzLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iMi4xIiB1bml0PSJMb2ViIGNoYXAiIC8+IFRoZSBjb21wb25lbnQgcGFydHMgb2YgYSBob3VzZWhvbGQgYXJlIChsKSBodW1hbiBiZWluZ3MsIGFuZCAoMikgZ29vZHMgYW5kCiAgICAgICAgICAgICAgICAgICAgY2hhdHRlbHMuIEFuZCBhcyBob3VzZWhvbGRzIGFyZSBubyBleGNlcHRpb24gdG8gdGhlIHJ1bGUgdGhhdCB0aGUgbmF0dXJlIG9mIGEKICAgICAgICAgICAgICAgICAgICB0aGluZyBpcyBmaXJzdCBzdHVkaWVkIGluIGl0cyBiYXJlc3QgYW5kIHNpbXBsZXN0IGZvcm0sPG1pbGVzdG9uZSBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz53ZSB3aWxsIGZvbGxvdyBIZXNpb2QgYW5kIGJlZ2luIGJ5IHBvc3R1bGF0aW5nCiAgICAgICAgICAgICAgICAgICAgIkhvbWVzdGVhZCBmaXJzdCwgYW5kIGEgd29tYW47IGEgcGxvdWdoLW94IGhhcmR5IHRvIGZ1cnJvdy4iIEZvciB0aGUgc3RlYWRpbmcKICAgICAgICAgICAgICAgICAgICB0YWtlcyBwcmVjZWRlbmNlIGFtb25nIG91ciBwaHlzaWNhbCBuZWNlc3NpdGllcywgYW5kIHRoZSB3b21hbiBhbW9uZyBvdXIgZnJlZQogICAgICAgICAgICAgICAgICAgIGFzc29jaWF0ZXMuIEl0IGlzLCB0aGVyZWZvcmUsIG9uZSBvZiB0aGUgdGFza3Mgb2YgSG9tZWNyYWZ0IHRvIHNldCBpbiBvcmRlciB0aGUKICAgICAgICAgICAgICAgICAgICByZWxhdGlvbiBiZXR3ZWVuIG1hbiBhbmQgd29tYW47IGluIG90aGVyIHdvcmRzLCB0byBzZWUgdGhhdCBpdCBpcyB3aGF0IGl0IG91Z2h0CiAgICAgICAgICAgICAgICAgICAgdG8gYmUuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSIyLjIiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gT2Ygb2NjdXBhdGlvbnMgYXR0ZW5kYW50IG9uIG91ciBnb29kcyBhbmQgY2hhdHRlbHMsIHRob3NlIGNvbWUgZmlyc3Qgd2hpY2gKICAgICAgICAgICAgICAgICAgICBhcmUgbmF0dXJhbC4gQW1vbmcgdGhlc2UgcHJlY2VkZW5jZSBpcyBnaXZlbiB0byB0aGUgb25lIHdoaWNoIGN1bHRpdmF0ZXMgdGhlCiAgICAgICAgICAgICAgICAgICAgbGFuZDsgdGhvc2UgbGlrZSBtaW5pbmcsIHdoaWNoIGV4dHJhY3Qgd2VhbHRoIGZyb20gaXQsIHRha2UgdGhlIHNlY29uZCBwbGFjZS4KICAgICAgICAgICAgICAgICAgICBBZ3JpY3VsdHVyZSBpcyB0aGUgbW9zdCBob25lc3Qgb2YgYWxsIHN1Y2ggb2NjdXBhdGlvbnM7IHNlZWluZyB0aGF0IHRoZSB3ZWFsdGgKICAgICAgICAgICAgICAgICAgICBpdCBicmluZ3MgaXMgbm90IGRlcml2ZWQgZnJvbSBvdGhlciBtZW4uIEhlcmVpbiBpdCBpcyBkaXN0aW5ndWlzaGVkIGZyb20gdHJhZGUKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHdhZ2UtZWFybmluZyBlbXBsb3ltZW50cywgd2hpY2ggYWNxdWlyZSB3ZWFsdGggZnJvbSBvdGhlcnMgYnkgdGhlaXIKICAgICAgICAgICAgICAgICAgICBjb25zZW50OyBhbmQgZnJvbSB3YXIsIHdoaWNoIHdyaW5ncyBpdCBmcm9tIHRoZW0gcGVyZm9yY2UuIEl0IGlzIGFsc28gYSBuYXR1cmFsCiAgICAgICAgICAgICAgICAgICAgb2NjdXBhdGlvbjsgc2luY2UgYnkgTmF0dXJlJ3MgYXBwb2ludG1lbnQgYWxsIGNyZWF0dXJlcyByZWNlaXZlIHN1c3RlbmFuY2UgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZWlyIG1vdGhlciwgPG1pbGVzdG9uZSBuPSIxMzQzYiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJCZWtrZXIiIG49IjEiIHVuaXQ9ImxpbmUiIC8+YW5kIG1hbmtpbmQgbGlrZSB0aGUgcmVzdCBmcm9tIHRoZWlyIGNvbW1vbiBtb3RoZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGVhcnRoLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iMi4zIiB1bml0PSJMb2ViIGNoYXAiIC8+IEFuZCBiZXNpZGVzIGFsbCB0aGlzLCBhZ3JpY3VsdHVyZSBjb250cmlidXRlcyBub3RhYmx5IHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIG1ha2luZyBvZiBhIG1hbmx5IGNoYXJhY3RlcjsgYmVjYXVzZSwgdW5saWtlIHRoZSBtZWNoYW5pY2FsIGFydHMsIGl0IGRvZXMKICAgICAgICAgICAgICAgICAgICBub3QgY3JpcHBsZSBhbmQgd2Vha2VuIHRoZSBib2RpZXMgb2YgdGhvc2UgZW5nYWdlZCBpbiBpdCwgYnV0IGludXJlcyB0aGVtIHRvCiAgICAgICAgICAgICAgICAgICAgZXhwb3N1cmUgYW5kIHRvaWwgYW5kIGludmlnb3JhdGVzIHRoZW0gdG8gZmFjZSB0aGUgcGVyaWxzIG9mIHdhci4gRm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGZhcm1lcidzIHBvc3Nlc3Npb25zLCB1bmxpa2UgdGhvc2Ugb2Ygb3RoZXIgbWVuLCBsaWUgb3V0c2lkZSB0aGUgY2l0eSdzCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVuY2VzLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iMy4xIiB1bml0PSJMb2ViIGNoYXAiIC8+IFdoZW4gd2UgdHVybiBvdXIgYXR0ZW50aW9uIHRvIHRoZSBodW1hbiBwYXJ0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGhvdXNlaG9sZCwgaXQgaXMgdGhlIHdvbWFuIHdobyBtYWtlcyB0aGUgZmlyc3QgY2xhaW0gdXBvbiBpdDsgJmx0O2ZvciB0aGUKICAgICAgICAgICAgICAgICAgICBuYXR1cmFsIGNvbWVzIGZpcnN0LCBhcyB3ZSBoYXZlIHNhaWQsJmd0OyBhbmQgbm90aGluZyBpcyBtb3JlIG5hdHVyYWwgdGhhbgogICAgICAgICAgICAgICAgICAgIHRoZSB0aWUgYmV0d2VlbiBmZW1hbGUgYW5kIG1hbGUuIEZvciB3ZSBoYXZlIGVsc2V3aGVyZSBsYWlkIGRvd24gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlbWlzczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBQb2wuIDEuMTI1MmEuMSIgdmFsaWQ9InllcyI+QXJpc3RvdC4gUG9sLiAxLjE8L2JpYmw+Ljwvbm90ZT4gdGhhdCBOYXR1cmUgaXMgaW50ZW50IG9uIG11bHRpcGx5aW5nIHNldmVyYWxseSBoZXIgdHlwZXM7CiAgICAgICAgICAgICAgICAgICAgYW5kIHRoaXMgaXMgdHJ1ZSBvZiBldmVyeSBhbmltYWwgaW4gcGFydGljdWxhci4gTmVpdGhlciB0aGUgZmVtYWxlLCBob3dldmVyLCBjYW4KICAgICAgICAgICAgICAgICAgICBlZmZlY3QgdGhpcyB3aXRob3V0IHRoZSBtYWxlLCBub3IgdGhlIG1hbGUgd2l0aG91dCB0aGUgZmVtYWxlOyB3aGVuY2UgdGhlIHVuaW9uCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHNleGVzIGhhcyBvZiBuZWNlc3NpdHkgYXJpc2VuLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iMy4yIiB1bml0PSJMb2ViIGNoYXAiIC8+IE5vdyBhbW9uZyB0aGUgbG93ZXIgYW5pbWFscywgdGhpcyB1bmlvbiBpcwogICAgICAgICAgICAgICAgICAgIGlycmF0aW9uYWwgaW4gY2hhcmFjdGVyOyBpdCBleGlzdHMgbWVyZWx5IGZvciB0aGUgcHVycG9zZSBvZiBwcm9jcmVhdGlvbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgbGFzdHMgb25seSBzbyBsb25nIGFzIHRoZSBwYXJlbnRzIGFyZSBvY2N1cGllZCBpbiBwcm9kdWNpbmcgdGhlaXIgYnJvb2QuIEluIHRhbWUKICAgICAgICAgICAgICAgICAgICBhbmltYWxzLCBvbiB0aGUgb3RoZXIgaGFuZCwgYW5kIHRob3NlIHdoaWNoIHBvc3Nlc3MgYSBncmVhdGVyIHNoYXJlIG9mCiAgICAgICAgICAgICAgICAgICAgaW50ZWxsaWdlbmNlLCBpdCBoYXMgYXNzdW1lZCBhIG1vcmUgY29tcGxleCBmb3JtOyBmb3IgaW4gdGhlaXIgY2FzZSB3ZSBzZWUgbW9yZQogICAgICAgICAgICAgICAgICAgIGV4YW1wbGVzIG9mIG11dHVhbCBoZWxwLCBnb29kd2lsbCwgYW5kIGNvLW9wZXJhdGlvbi4gPG1pbGVzdG9uZSBlZD0iUCIgbj0iMy4zIiB1bml0PSJMb2ViIGNoYXAiIC8+IEl0IGlzLCBob3dldmVyLCBpbiB0aGUgaHVtYW4gc3BlY2llcyB0aGF0IHRoaXMgY29tcGxleGl0eQogICAgICAgICAgICAgICAgICAgIGlzIG1vc3QgbWFya2VkOyBzaW5jZSB0aGUgY28tb3BlcmF0aW9uIGJldHdlZW4gd29tYW4gYW5kIG1hbiBhaW1zIG5vdCBtZXJlbHkgYXQKICAgICAgICAgICAgICAgICAgICBleGlzdGVuY2UsIGJ1dCBhdCBhIGhhcHB5IDxtaWxlc3RvbmUgZWQ9IkJla2tlciIgbj0iMjAiIHVuaXQ9ImxpbmUiIC8+ZXhpc3RlbmNlLgogICAgICAgICAgICAgICAgICAgIE5vciBkbyBtYW5raW5kIGJlZ2V0IGNoaWxkcmVuIG1lcmVseSB0byBwYXkgdGhlIHNlcnZpY2UgdGhleSBvd2UgdG8gTmF0dXJlLCBidXQKICAgICAgICAgICAgICAgICAgICBhbHNvIHRoYXQgdGhleSBtYXkgdGhlbXNlbHZlcyByZWNlaXZlIGEgYmVuZWZpdDsgZm9yIHRoZSB0b2lsIHRoZXkgdW5kZXJnbyB3aGlsZQogICAgICAgICAgICAgICAgICAgIHRoZXkgYXJlIHN0cm9uZyBhbmQgdGhlaXIgb2Zmc3ByaW5nIGlzIHN0aWxsIHdlYWsgaXMgcmVwYWlkIGJ5IHRoYXQgb2Zmc3ByaW5nCiAgICAgICAgICAgICAgICAgICAgd2hlbiBpdCBpbiB0dXJuIGlzIGdyb3duIHN0cm9uZyBhbmQgdGhlIHBhcmVudHMgYnkgcmVhc29uIG9mIGFnZSBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgd2Vhay48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjMuNCIgdW5pdD0iTG9lYiBjaGFwIiAvPiBBdCB0aGUgc2FtZSB0aW1lIE5hdHVyZSwgYnkgdGhpcyBjeWNsZSBvZiBjaGFuZ2VzLAogICAgICAgICAgICAgICAgICAgIGZ1bGZpbGxzIGhlciBwdXJwb3NlIG9mIHBlcnBldHVhdGluZyBleGlzdGVuY2U7IHByZXNlcnZpbmcgdGhlIHR5cGUgd2hlbiBzaGUgaXMKICAgICAgICAgICAgICAgICAgICB1bmFibGUgdG8gcHJlc2VydmUgdGhlIGluZGl2aWR1YWwuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIEdBIDczMWIiPkFyaXN0b3QuIERlIEdlbi4gQW4uIDczMWIuPC9iaWJsPjwvbm90ZT4gQW5kIHNvCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGlzIHB1cnBvc2UgaW4gdmlldyBEaXZpbmUgUHJvdmlkZW5jZSBoYXMgZmFzaGlvbmVkIHRoZSBuYXR1cmUgb2YgbWFuIGFuZAogICAgICAgICAgICAgICAgICAgIG9mIHdvbWFuIGZvciB0aGVpciBwYXJ0bmVyc2hpcC4gRm9yIHRoZXkgYXJlIGRpc3Rpbmd1aXNoZWQgZnJvbSBlYWNoIG90aGVyIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIHBvc3Nlc3Npb24gb2YgZmFjdWx0aWVzIG5vdCBhZGFwdGVkIGluIGV2ZXJ5IGNhc2UgdG8gdGhlIHNhbWUgdGFza3MsIGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIHNvbWUgY2FzZXMgZm9yIG9wcG9zaXRlIG9uZXMsIHRob3VnaCBjb250cmlidXRpbmcgdG8gdGhlIHNhbWUgZW5kLiBGb3IKICAgICAgICAgICAgICAgICAgICBQcm92aWRlbmNlIG1hZGUgbWFuIHN0cm9uZ2VyIGFuZCB3b21hbiB3ZWFrZXIsIDxtaWxlc3RvbmUgbj0iMTM0NGEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPnNvIHRoYXQgaGUgaW4KICAgICAgICAgICAgICAgICAgICB2aXJ0dWUgb2YgaGlzIG1hbmx5IHByb3dlc3MgbWF5IGJlIG1vcmUgcmVhZHkgdG8gZGVmZW5kIHRoZSBob21lLCBhbmQgc2hlLCBieQogICAgICAgICAgICAgICAgICAgIHJlYXNvbiBvZiBoZXIgdGltaWQgbmF0dXJlLCBtb3JlIHJlYWR5IHRvIGtlZXAgd2F0Y2ggb3ZlciBpdDsgYW5kIHdoaWxlIGhlCiAgICAgICAgICAgICAgICAgICAgYnJpbmdzIGluIGZyZXNoIHN1cHBsaWVzIGZyb20gd2l0aG91dCwgc2hlIG1heSBrZWVwIHNhZmUgd2hhdCBsaWVzIHdpdGhpbi4gSW4KICAgICAgICAgICAgICAgICAgICBoYW5kaWNyYWZ0cyBhZ2Fpbiwgd29tYW4gd2FzIGdpdmVuIGEgc2VkZW50YXJ5IHBhdGllbmNlLCB0aG91Z2ggZGVuaWVkIHN0YW1pbmEKICAgICAgICAgICAgICAgICAgICBmb3IgZW5kdXJhbmNlIG9mIGV4cG9zdXJlOyB3aGlsZSBtYW4sIHRob3VnaCBpbmZlcmlvciB0byBoZXIgaW4gcXVpZXQKICAgICAgICAgICAgICAgICAgICBlbXBsb3ltZW50cywgaXMgZW5kb3dlZCB3aXRoIHZpZ29yIGZvciBldmVyeSBhY3RpdmUgb2NjdXBhdGlvbi4gSW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdGlvbiBvZiBjaGlsZHJlbiBib3RoIHNoYXJlIGFsaWtlOyBidXQgZWFjaCBtYWtlcyBhIGRpZmZlcmVudCBjb250cmlidXRpb24KICAgICAgICAgICAgICAgICAgICB0byB0aGVpciB1cGJyaW5naW5nLiBJdCBpcyB0aGUgbW90aGVyIHdobyBudXJ0dXJlcywgYW5kIHRoZSBmYXRoZXIgd2hvCiAgICAgICAgICAgICAgICAgICAgICAgIGVkdWNhdGVzLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNC4xIiB1bml0PSJMb2ViIGNoYXAiIC8+IFdlIGJlZ2luIHRoZW4gd2l0aCB0aGUgcnVsZXMgdGhhdCBzaG91bGQgZ292ZXJuIGEgbWFuJ3MKICAgICAgICAgICAgICAgICAgICB0cmVhdG1lbnQgb2YgaGlzIHdpZmUuIEFuZCB0aGUgZmlyc3Qgb2YgdGhlc2UgZm9yYmlkcyBoaW0gdG8gZG8gaGVyIHdyb25nOyBmb3IKICAgICAgICAgICAgICAgICAgICBpZiBoZSBvYnNlcnZlcyB0aGlzLCBoZSBpcyBub3QgbGlrZWx5IGhpbXNlbGYgdG8gc3VmZmVyIHdyb25nIGF0IGhlciBoYW5kcy4gQXMKICAgICAgICAgICAgICAgICAgICB0aGUgUHl0aGFnb3JlYW5zIGRlY2xhcmUsIGV2ZW4gdGhlIGNvbW1vbiBydWxlIG9yIGN1c3RvbSBvZiBtYW5raW5kIHRodXMKICAgICAgICAgICAgICAgICAgICBvcmRhaW5zLCBmb3JiaWRkaW5nIGFsbCB3cm9uZyB0byBhIHdpZmUgYXMgc3RyaW5nZW50bHkgYXMgdGhvdWdoIHNoZSB3ZXJlIGEKICAgICAgICAgICAgICAgICAgICBzdXBwbGlhbnQgd2hvbSBvbmUgaGFzIHJhaXNlZCBmcm9tIHRoZSBoZWFydGhzdG9uZS4gQW5kIGEgbWFuIGRvZXMgd3JvbmcgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgd2lmZSB3aGVuIGhlIGFzc29jaWF0ZXMgd2l0aCBvdGhlciB3b21lbi48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjQuMiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBBcyByZWdhcmRzIHRoZSBpbnRlcmNvdXJzZSBvZgogICAgICAgICAgICAgICAgICAgIG1hcnJpYWdlLCB3aXZlcyBzaG91bGQgbmVpdGhlciBpbXBvcnR1bmUgdGhlaXIgaHVzYmFuZHMsIG5vciBiZSByZXN0bGVzcyBpbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGFic2VuY2U7IGJ1dCBhIG1hbiBzaG91bGQgYWNjdXN0b20gaGlzIHdpZmUgdG8gYmUgY29udGVudCB3aGV0aGVyIGhlIGlzIGF0CiAgICAgICAgICAgICAgICAgICAgaG9tZSBvciBhd2F5LiBHb29kIGFsc28gaXMgdGhlIGFkdmljZSBvZiBIZXNpb2Q6IDxjaXQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxxdW90ZSB0eXBlPSJ2ZXJzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBtZXQ9ImRhY3R5bGljIj5UYWtlIHRoZWUgYSBtYWlkZW4gdG8gd2lmZSwgYW5kIHRlYWNoIGhlciB3YXlzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzY3JldGlvbi48L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIZXMuIFdEIDY5OSIgdmFsaWQ9InllcyI+SGVzLiBXRCA2OTk8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgPC9jaXQ+IEZvciBkaWZmZXJlbmNlcyBvZiB3YXlzIGFuZCBoYWJpdHMgYXJlIGxpdHRsZSBjb25kdWNpdmUgdG8KICAgICAgICAgICAgICAgICAgICAgICAgYWZmZWN0aW9uLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNC4zIiB1bml0PSJMb2ViIGNoYXAiIC8+IEFzIHJlZ2FyZHMgYWRvcm5tZW50OiBpdCBpcyBub3Qgd2VsbDxtaWxlc3RvbmUgZWQ9IkJla2tlciIgbj0iMjAiIHVuaXQ9ImxpbmUiIC8+dGhhdCBzb3VscyBzaG91bGQgYXBwcm9hY2ggb25lIGFub3RoZXIgaW4KICAgICAgICAgICAgICAgICAgICBib3Jyb3dlZCBwbHVtZXMsIG5vciBpcyBpdCB3ZWxsIGluIHRoZSBjYXNlIG9mIGJvZGllcy4gSW50ZXJjb3Vyc2Ugd2hpY2ggZGVwZW5kcwogICAgICAgICAgICAgICAgICAgICZsdDtmb3IgaXRzIGNoYXJtJmd0OyB1cG9uIG91dHdhcmQgYWRvcm5tZW50IGRpZmZlcnMgaW4gbm8gcmVzcGVjdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhhdCBvZiBmaWd1cmVzIG9uIHRoZSBzdGFnZSBpbiB0aGVpciBjb252ZW50aW9uYWwgYXR0aXJlLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNS4xIiB1bml0PSJMb2ViIGNoYXAiIC8+IE9mIHByb3BlcnR5LCB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBhbmQgbW9zdCBpbmRpc3BlbnNhYmxlIGtpbmQgaXMgdGhhdCB3aGljaCBpcyBhbHNvIGJlc3QgYW5kIG1vc3QgYW1lbmFibGUKICAgICAgICAgICAgICAgICAgICB0byBIb3VzZWNyYWZ0OyBhbmQgdGhpcyBpcyB0aGUgaHVtYW4gY2hhdHRlbC4gT3VyIGZpcnN0IHN0ZXAgdGhlcmVmb3JlIG11c3QgYmUKICAgICAgICAgICAgICAgICAgICB0byBwcm9jdXJlIGdvb2Qgc2xhdmVzLiBPZiBzbGF2ZXMgdGhlcmUgYXJlIHR3byBraW5kczsgdGhvc2UgaW4gcG9zaXRpb25zIG9mCiAgICAgICAgICAgICAgICAgICAgdHJ1c3QsIGFuZCB0aGUgbGFib3JlcnMuIEFuZCBzaW5jZSBpdCBpcyBtYXR0ZXIgb2YgZXhwZXJpZW5jZSB0aGF0IHRoZSBjaGFyYWN0ZXIKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgeW91bmcgY2FuIGJlIG1vdWxkZWQgYnkgdHJhaW5pbmcsIHdoZW4gd2UgcmVxdWlyZSB0byBjaGFyZ2Ugc2xhdmVzIHdpdGgKICAgICAgICAgICAgICAgICAgICB0YXNrcyBiZWZpdHRpbmcgdGhlIGZyZWUsIHdlIGhhdmUgbm90IG9ubHkgdG8gcHJvY3VyZSB0aGUgc2xhdmVzLCBidXQgdG8gYnJpbmcKICAgICAgICAgICAgICAgICAgICB0aGVtIHVwICZsdDtmb3IgdGhlIHRydXN0Jmd0Oy48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjUuMiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBJbiBvdXIgaW50ZXJjb3Vyc2Ugd2l0aCBzbGF2ZXMgd2UgbXVzdAogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgc3VmZmVyIHRoZW0gdG8gYmUgaW5zb2xlbnQgbm9yIHRyZWF0IHRoZW0gd2l0aCBjcnVlbHR5LiBBIHNoYXJlIG9mIGhvbm9yCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJlIGdpdmVuIHRvIHRob3NlIHdobyBhcmUgZG9pbmcgbW9yZSBvZiBhIGZyZWVtYW4ncyB3b3JrLCBhbmQgYWJ1bmRhbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgZm9vZCB0byB0aG9zZSB3aG8gYXJlIGxhYm9yaW5nIHdpdGggdGhlaXIgaGFuZHMuIEFuZCB3aGVyZWFzIHRoZSB1c2Ugb2Ygd2luZQogICAgICAgICAgICAgICAgICAgIHJlbmRlcnMgZXZlbiBmcmVlIG1lbiBpbnNvbGVudCwgc28gdGhhdCBpbiBtYW55IGNvdW50cmllcyB0aGV5IHRvbyByZWZyYWluIGZyb20KICAgICAgICAgICAgICAgICAgICBpdOKAlGFzLCBmb3IgaW5zdGFuY2UsIHRoZSBDYXJ0aGFnaW5pYW5zIGRvIHdoZW4gdGhleSBhcmUgb24KICAgICAgICAgICAgICAgICAgICBjYW1wYWlnbuKAlGl0IGZvbGxvd3MgdGhhdCB3ZSBtdXN0IGVpdGhlciBkZW55IHdpbmUgdG8gc2xhdmVzCiAgICAgICAgICAgICAgICAgICAgYWx0b2dldGhlciwgb3IgcmVzZXJ2ZSBpdCBmb3IgcmFyZSBvY2Nhc2lvbnMuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSI1LjMiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gV2UgbWF5IGFwcG9ydGlvbiB0byBvdXIKICAgICAgICAgICAgICAgICAgICBzbGF2ZXMgKDEpIHdvcmssICgyKSBjaGFzdGlzZW1lbnQsIGFuZCAoMykgZm9vZC4gSWYgbWVuIGFyZSBnaXZlbiBmb29kLCBidXQgbm8KICAgICAgICAgICAgICAgICAgICBjaGFzdGlzZW1lbnQgbm9yIGFueSB3b3JrLCB0aGV5IGJlY29tZSBpbnNvbGVudC4gPG1pbGVzdG9uZSBuPSIxMzQ0YiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJCZWtrZXIiIG49IjEiIHVuaXQ9ImxpbmUiIC8+SWYgdGhleSBhcmUgbWFkZQogICAgICAgICAgICAgICAgICAgIHRvIHdvcmssIGFuZCBhcmUgY2hhc3Rpc2VkLCBidXQgc3RpbnRlZCBvZiB0aGVpciBmb29kLCBzdWNoIHRyZWF0bWVudCBpcwogICAgICAgICAgICAgICAgICAgIG9wcHJlc3NpdmUsIGFuZCBzYXBzIHRoZWlyIHN0cmVuZ3RoLiBUaGUgcmVtYWluaW5nIGFsdGVybmF0aXZlLCB0aGVyZWZvcmUsIGlzIHRvCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSB0aGVtIHdvcmssIGFuZCBhIHN1ZmZpY2llbmN5IG9mIGZvb2QuIFVubGVzcyB3ZSBwYXkgbWVuLCB3ZSBjYW5ub3QgY29udHJvbAogICAgICAgICAgICAgICAgICAgIHRoZW07IGFuZCBmb29kIGlzIGEgc2xhdmUncyBwYXkuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5TbGF2ZXMsIGFnYWluLAogICAgICAgICAgICAgICAgICAgIGFyZSBubyBleGNlcHRpb24gdG8gdGhlIHJ1bGUgdGhhdCBtZW4gYmVjb21lIHdvcnNlIHdoZW4gYmV0dGVyIGNvbmR1Y3QgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgZm9sbG93ZWQgYnkgYmV0dGVyIHRyZWF0bWVudCwgYnV0IHZpcnR1ZSBhbmQgdmljZSByZW1haW4gYWxpa2UgdW5yZXdhcmRlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBlZD0iUCIgbj0iNS40IiB1bml0PSJMb2ViIGNoYXAiIC8+IEFjY29yZGluZ2x5IHdlIG11c3Qga2VlcCB3YXRjaAogICAgICAgICAgICAgICAgICAgIG92ZXIgb3VyIHdvcmtlcnMsIHN1aXRpbmcgb3VyIGRpc3BlbnNhdGlvbnMgYW5kIGluZHVsZ2VuY2VzIHRvIHRoZWlyIGRlc2VydDsKICAgICAgICAgICAgICAgICAgICB3aGV0aGVyIGl0IGJlIGZvb2Qgb3IgY2xvdGhpbmcsIGxlaXN1cmUgb3IgY2hhc3Rpc2VtZW50IHRoYXQgd2UgYXJlCiAgICAgICAgICAgICAgICAgICAgYXBwb3J0aW9uaW5nLiBCb3RoIGluIHRoZW9yeSBhbmQgaW4gcHJhY3RpY2Ugd2UgbXVzdCB0YWtlIGZvciBvdXIgbW9kZWwgYQogICAgICAgICAgICAgICAgICAgIHBoeXNpY2lhbidzIGZyZWVkb20gaW4gcHJlc2NyaWJpbmcgaGlzIG1lZGljaW5lczsgb2JzZXJ2aW5nIGF0IHRoZSBzYW1lIHRpbWUKICAgICAgICAgICAgICAgICAgICB0aGF0IGZvb2QgZGlmZmVycyBmcm9tIG1lZGljaW5lIGluIHRoYXQgaXQgcmVxdWlyZXMgdG8gYmUgY29uc3RhbnRseQogICAgICAgICAgICAgICAgICAgICAgICBhZG1pbmlzdGVyZWQuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSI1LjUiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gVGhlIGJlc3QgbGFib3JlcnMgd2lsbCBiZSBmdXJuaXNoZWQgYnkgdGhvc2UgcmFjZXMgb2YKICAgICAgICAgICAgICAgICAgICBtYW5raW5kIHdoaWNoIGFyZSBuZWl0aGVyIHdob2xseSBzcGlyaXRsZXNzIG5vciB5ZXQgb3ZlcmJvbGQuIEVhY2ggZXh0cmVtZSBoYXMKICAgICAgICAgICAgICAgICAgICBpdHMgdmljZTsgdGhlIHNwaXJpdGxlc3MgY2Fubm90IGVuZHVyZSBoYXJkIGxhYm9yLCBhbmQgdGhlIGhpZ2gtc3Bpcml0ZWQgd2lsbAogICAgICAgICAgICAgICAgICAgIG5vdCByZWFkaWx5IGJyb29rIGNvbnRyb2wuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSI1LjYiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gRXZlcnkgc2xhdmUgc2hvdWxkIGhhdmUgYmVmb3JlIGhpcyBleWVzIGEKICAgICAgICAgICAgICAgICAgICBkZWZpbml0ZSBnb2FsIG9yIHRlcm0gb2YgaGlzIGxhYm9yLiBUbyBzZXQgdGhlIHByaXplIG9mIGZyZWVkb20gYmVmb3JlIGhpbSBpcwogICAgICAgICAgICAgICAgICAgIGJvdGgganVzdCBhbmQgZXhwZWRpZW50OyBzaW5jZSBoYXZpbmcgYSBwcml6ZSB0byB3b3JrIGZvciwgYW5kIGEgdGltZSBkZWZpbmVkCiAgICAgICAgICAgICAgICAgICAgZm9yIGl0cyBhdHRhaW5tZW50LCBoZSB3aWxsIHB1dCBoaXMgaGVhcnQgaW50byBoaXMgbGFib3JzLiBXZSBzaG91bGQsIG1vcmVvdmVyLAogICAgICAgICAgICAgICAgICAgIHRha2UgaG9zdGFnZXMgJmx0O2ZvciBvdXIgc2xhdmVzJyBmaWRlbGl0eSZndDsgYnkgYWxsb3dpbmcgdGhlbSB0byBiZWdldAogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOyBhbmQgYXZvaWQgdGhlIHByYWN0aWNlIG9mIHB1cmNoYXNpbmcgbWFueSBzbGF2ZXMgb2YgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBuYXRpb25hbGl0eSwgYXMgbWVuIGF2b2lkIGRvaW5nIGluIHRvd25zLiBXZSBzaG91bGQgYWxzbyBrZWVwIGZlc3RpdmFscyBhbmQgZ2l2ZQogICAgICAgICAgICAgICAgICAgIHRyZWF0cywgbW9yZSBvbiB0aGUgc2xhdmVzIGFjY291bnQgdGhhbiBvbiB0aGF0IG9mIHRoZSBmcmVlbWVuOzxtaWxlc3RvbmUgZWQ9IkJla2tlciIgbj0iMjAiIHVuaXQ9ImxpbmUiIC8+c2luY2UgdGhlIGZyZWUgaGF2ZSBhIGZ1bGxlciBzaGFyZSBpbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIGVuam95bWVudHMgZm9yIHRoZSBzYWtlIG9mIHdoaWNoIHRoZXNlIGluc3RpdHV0aW9ucyBleGlzdC48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjYuMSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBUaGVyZSBhcmUgZm91cgogICAgICAgICAgICAgICAgICAgIHF1YWxpdGllcyB3aGljaCB0aGUgaGVhZCBvZiBhIGhvdXNlaG9sZCBtdXN0IHBvc3Nlc3MgaW4gZGVhbGluZyB3aXRoIGhpcwogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LiBGaXJzdGx5LCBoZSBtdXN0IGhhdmUgdGhlIGZhY3VsdHkgb2YgYWNxdWlyaW5nLCBhbmQgc2Vjb25kbHkgdGhhdCBvZgogICAgICAgICAgICAgICAgICAgIHByZXNlcnZpbmcgd2hhdCBoZSBoYXMgYWNxdWlyZWQ7IG90aGVyd2lzZSB0aGVyZSBpcyBubyBtb3JlIGJlbmVmaXQgaW4gYWNxdWlyaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhbiBpbiBiYWxpbmcgd2l0aCBhIGNvbGFuZGVyLCBvciBpbiB0aGUgcHJvdmVyYmlhbCB3aW5lLWphciB3aXRoIGEgaG9sZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBib3R0b20uIFRoaXJkbHkgYW5kIGZvdXJ0aGx5LCBoZSBtdXN0IGtub3cgaG93IHRvIGltcHJvdmUgaGlzIHByb3BlcnR5LCBhbmQgaG93CiAgICAgICAgICAgICAgICAgICAgdG8gbWFrZSB1c2Ugb2YgaXQ7IHNpbmNlIHRoZXNlIGFyZSB0aGUgZW5kcyBmb3Igd2hpY2ggdGhlIHBvd2VycyBvZiBhY3F1aXNpdGlvbgogICAgICAgICAgICAgICAgICAgIGFuZCBvZiBwcmVzZXJ2YXRpb24gYXJlIHNvdWdodC48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjYuMiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBFdmVyeXRoaW5nIHdlIHBvc3Nlc3Mgc2hvdWxkIGJlIGR1bHkgY2xhc3NpZmllZCA7CiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBhbW91bnQgb2Ygb3VyIHByb2R1Y3RpdmUgcHJvcGVydHkgZXhjZWVkIHRoYXQgb2YgdGhlIHVucHJvZHVjdGl2ZS4KICAgICAgICAgICAgICAgICAgICBQcm9kdWNlIHNob3VsZCBiZSBzbyBlbXBsb3llZCB0aGF0IHdlIGRvIG5vdCByaXNrIGFsbCBvdXIgcG9zc2Vzc2lvbnMgYXQgb25jZS4KICAgICAgICAgICAgICAgICAgICBGb3IgdGhlIHNhZmUga2VlcGluZyBvZiBvdXIgcHJvcGVydHksIHdlIHNoYWxsIGRvIHdlbGwgdG8gYWRvcHQgdGhlIFBlcnNpYW4gYW5kCiAgICAgICAgICAgICAgICAgICAgTGFjb25pYW4gc3lzdGVtcy4gQXRoZW5pYW4gaG91c2VjcmFmdCBoYXMsIGhvd2V2ZXIsIHNvbWUgYWR2YW50YWdlcy4gVGhlCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gYnV5cyBpbW1lZGlhdGVseSB3aXRoIHRoZSBwcm9kdWNlIG9mIGhpcyBzYWxlcywgYW5kIHRoZSBzbWFsbGVyCiAgICAgICAgICAgICAgICAgICAgaG91c2Vob2xkcyBrZWVwIG5vIGlkbGUgZGVwb3NpdHMgaW4gc3RvcmUuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSI2LjMiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gVW5kZXIgdGhlIFBlcnNpYW4gc3lzdGVtLCB0aGUKICAgICAgICAgICAgICAgICAgICBtYXN0ZXIgaGltc2VsZiB1bmRlcnRvb2sgdGhlIGVudGlyZSBkaXNwb3NpdGlvbiBhbmQgc3VwZXJ2aXNpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgaG91c2Vob2xkLCBmb2xsb3dpbmcgdGhlIHByYWN0aWNlIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgRGlvbiB1c2VkIHRvIHJlbWFyayBpbiBEaW9ueXNpdXMuIE5vIG9uZSwgaW5kZWVkLCB0YWtlcyB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIGNhcmUgb2YgYW5vdGhlcidzIHByb3BlcnR5IGFzIG9mIGhpcyBvd247IHNvIHRoYXQsIGFzIGZhciBhcyBpcyBwb3NzaWJsZSwKICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIxMzQ1YSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJCZWtrZXIiIG49IjEiIHVuaXQ9ImxpbmUiIC8+ZWFjaCBtYW4gb3VnaHQgdG8gYXR0ZW5kIHRvIGhpcyBhZmZhaXJzIGluIHBlcnNvbi4gV2UgbWF5CiAgICAgICAgICAgICAgICAgICAgY29tbWVuZCBhbHNvIGEgcGFpciBvZiBzYXlpbmdzLCBvbmUgYXR0cmlidXRlZCB0byBhIFBlcnNpYW4gYW5kIHRoZSBvdGhlciB0byBhCiAgICAgICAgICAgICAgICAgICAgTGlieWFuLiBUaGUgZm9ybWVyIG9uIGJlaW5nIGFza2VkIHdoYXQgYmVzdCBjb25kaXRpb25zIGEgaG9yc2UsIHJlcGxpZWQgIkhpcwogICAgICAgICAgICAgICAgICAgIG1hc3RlcidzIGV5ZS4iPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gRWMuICAgICAgICAgICAgICAgICAgICAgICAgIDEyIiB2YWxpZD0ieWVzIj5YZW4uIEVjLgogICAgICAgICAgICAgICAgICAgICAgICAxMjwvYmlibD4uPC9ub3RlPiBUaGUgTGlieWFuLCB3aGVuIGFza2VkIHdoYXQga2luZCBvZiBtYW51cmUgaXMgYmVzdCwKICAgICAgICAgICAgICAgICAgICBhbnN3ZXJlZCAiVGhlIG1hc3RlcidzIGZvb3RwcmludHMuIjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNi40IiB1bml0PSJMb2ViIGNoYXAiIC8+IFRoZSBtYXN0ZXIgYW5kIG1pc3RyZXNzIHNob3VsZCwgdGhlcmVmb3JlLAogICAgICAgICAgICAgICAgICAgIGdpdmUgcGVyc29uYWwgc3VwZXJ2aXNpb24sIGVhY2ggdG8gaGlzIG9yIGhlciBzcGVjaWFsIGRlcGFydG1lbnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgaG91c2Vob2xkIHdvcmsuIEluIHNtYWxsIGhvdXNlaG9sZHMsIGFuIG9jY2FzaW9uYWwgaW5zcGVjdGlvbiB3aWxsIHN1ZmZpY2U7IGluCiAgICAgICAgICAgICAgICAgICAgZXN0YXRlcyBtYW5hZ2VkIHRocm91Z2ggc3Rld2FyZHMsIGluc3BlY3Rpb25zIG11c3QgYmUgZnJlcXVlbnQuIEZvciBpbgogICAgICAgICAgICAgICAgICAgIHN0ZXdhcmRzaGlwIGFzIGluIG90aGVyIG1hdHRlcnMgdGhlcmUgY2FuIGJlIG5vIGdvb2QgY29weSB3aXRob3V0IGEgZ29vZAogICAgICAgICAgICAgICAgICAgIGV4YW1wbGU7IGFuZCBpZiB0aGUgbWFzdGVyIGFuZCBtaXN0cmVzcyBkbyBub3QgYXR0ZW5kIGRpbGlnZW50bHkgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBlc3RhdGUsIHRoZWlyIGRlcHV0aWVzIHdpbGwgY2VydGFpbmx5IG5vdCBkbyBzby48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjYuNSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBNb3Jlb3ZlciwgYXMgc3VjaCBoYWJpdHMgYXJlCiAgICAgICAgICAgICAgICAgICAgYm90aCBjb21tZW5kYWJsZSBmb3IgbW9yYWwgcmVhc29ucyBhbmQgYWxzbyBjb25kdWNpdmUgdG8gZ29vZCBtYW5hZ2VtZW50LCB0aGUKICAgICAgICAgICAgICAgICAgICBtYXN0ZXIgYW5kIG1pc3RyZXNzIHdpbGwgZG8gd2VsbCB0byByaXNlIGVhcmxpZXIgdGhhbiB0aGVpciBzZXJ2YW50cyBhbmQgdG8KICAgICAgICAgICAgICAgICAgICByZXRpcmUgbGF0ZXI7IHRvIHRyZWF0IHRoZWlyIGhvbWUgYXMgYSBjaXR5LCBhbmQgbmV2ZXIgbGVhdmUgaXQgdW5ndWFyZGVkOyBub3IKICAgICAgICAgICAgICAgICAgICBldmVyLCBieSBuaWdodCBvciBieSBkYXksIHRvIHBvc3Rwb25lIGEgdGFzayB3aGljaCBvdWdodCB0byBiZSBkb25lLiBSaXNpbmcKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgZGF5bGlnaHQgaXMgYWxzbyB0byBiZSBjb21tZW5kZWQ7IGl0IGlzIGEgaGVhbHRoeSBoYWJpdCwgYW5kIGdpdmVzIG1vcmUKICAgICAgICAgICAgICAgICAgICB0aW1lIGZvciB0aGUgbWFuYWdlbWVudCBvZiB0aGUgaG91c2Vob2xkIGFzIHdlbGwgYXMgZm9yIGxpYmVyYWwKICAgICAgICAgICAgICAgICAgICAgICAgc3R1ZGllcy48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjYuNiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBXZSBoYXZlIHJlbWFya2VkIHRoYXQgb24gc21hbGwgaG9sZGluZ3MgdGhlIEF0aGVuaWFuCiAgICAgICAgICAgICAgICAgICAgbWV0aG9kIG9mIGRpc3Bvc2luZyBvZiB0aGUgcHJvZHVjZSBpcyBhZHZhbnRhZ2VvdXMuPG1pbGVzdG9uZSBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz5PbiBsYXJnZSBlc3RhdGVzLCBhZnRlciB0aGUgYW1vdW50IGZvciB0aGUgeWVhcidzIG9yIHRoZQogICAgICAgICAgICAgICAgICAgIG1vbnRoJ3Mgb3V0bGF5IGhhcyBiZWVuIHNldCBhcGFydCwgaXQgc2hvdWxkIGJlIGhhbmRlZCB0byB0aGUgb3ZlcnNlZXJzOyBhbmQgc28KICAgICAgICAgICAgICAgICAgICBhbHNvIHdpdGggaW1wbGVtZW50cywgd2hldGhlciBmb3IgZGFpbHkgb3IgZm9yIG9jY2FzaW9uYWwgdXNlLiBJbiBhZGRpdGlvbiwgYW4KICAgICAgICAgICAgICAgICAgICBpbnNwZWN0aW9uIG9mIGltcGxlbWVudHMgYW5kIHN0b3JlcyBzaG91bGQgYmUgbWFkZSBwZXJpb2RpY2FsbHksIHNvIHRoYXQKICAgICAgICAgICAgICAgICAgICByZW1haW5kZXJzIGFuZCBkZWZpY2llbmNpZXMgbWF5IGFsaWtlIGJlIG5vdGVkLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNi43IiB1bml0PSJMb2ViIGNoYXAiIC8+IEluIGNvbnN0cnVjdGluZyBhIGhvbWVzdGVhZCwKICAgICAgICAgICAgICAgICAgICB3ZSBoYXZlIHRvIHByb3ZpZGUgZm9yIHRoZSBzdG9jayB3aGljaCBpdCBpcyB0byBzaGVsdGVyLCBhbmQgZm9yIGl0cyBoZWFsdGggYW5kCiAgICAgICAgICAgICAgICAgICAgd2VsbC1iZWluZy4gUHJvdmlkaW5nIGZvciB0aGUgc3RvY2sgaW52b2x2ZXMgcXVlc3Rpb25zIHN1Y2ggYXMgdGhlc2U6IFdoYXQgdHlwZQogICAgICAgICAgICAgICAgICAgIG9mIGJ1aWxkaW5nIGlzIGJlc3QgZm9yIHRoZSBzdG9yYWdlIG9mIGNyb3BzIGFuZCBvZiBjbG90aGluZz8gSG93IGFyZSB3ZSB0bwogICAgICAgICAgICAgICAgICAgIHN0b3JlIHRoZSBkcnkgY3JvcHMsIGFuZCBob3cgdGhlIG1vaXN0IG9uZXM/IE9mIHRoZSBvdGhlciBzdG9jaywgaG93IGlzIHRoZQogICAgICAgICAgICAgICAgICAgIGxpdmluZyB0byBiZSBob3VzZWQsIGFuZCBob3cgdGhlIGRlYWQ/IGFuZCB3aGF0IGFjY29tbW9kYXRpb24gYXJlIHdlIHRvIG1ha2UgZm9yCiAgICAgICAgICAgICAgICAgICAgc2xhdmVzIGFuZCBmcmVlLCBmb3Igd29tZW4gYW5kIG1lbiwgZm9yIGZvcmVpZ25lcnMgYW5kIGZlbGxvdy1jaXRpemVucz8gRm9yCiAgICAgICAgICAgICAgICAgICAgd2VsbC1iZWluZyBhbmQgaGVhbHRoLCBhZ2FpbiwgdGhlIGhvbWVzdGVhZCBzaG91bGQgYmUgYWlyeSBpbiBzdW1tZXIsIGFuZCBzdW5ueQogICAgICAgICAgICAgICAgICAgIGluIHdpbnRlci48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjYuOCIgdW5pdD0iTG9lYiBjaGFwIiAvPiBBIGhvbWVzdGVhZCBwb3NzZXNzaW5nIHRoZXNlIHF1YWxpdGllcyB3b3VsZCBiZSBsb25nZXIKICAgICAgICAgICAgICAgICAgICB0aGFuIGl0IGlzIGRlZXA7IGFuZCBpdHMgbWFpbiBmcm9udCB3b3VsZCBmYWNlIHRoZSBzb3V0aC4gT24gbGFyZ2UgZXN0YXRlcywKICAgICAgICAgICAgICAgICAgICBtb3Jlb3ZlciwgaXQgc2VlbXMgd29ydGggd2hpbGUgdG8gaW5zdGFsIGFzIHBvcnRlciBhIG1hbiBpbmNhcGFibGUgb2Ygb3RoZXIKICAgICAgICAgICAgICAgICAgICB3b3JrLCB0byBrZWVwIGhpcyBleWUgb24gd2hhdCBwYXNzZXMgaW4gYW5kIG91dC4gPG1pbGVzdG9uZSBuPSIxMzQ1YiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJCZWtrZXIiIG49IjEiIHVuaXQ9ImxpbmUiIC8+VGhhdCBpbXBsZW1lbnRzCiAgICAgICAgICAgICAgICAgICAgbWF5IGJlIHJlYWR5IGZvciB1c2UsIHRoZSBMYWNvbmlhbiBwcmFjdGljZSBzaG91bGQgYmUgZm9sbG93ZWQuIEVhY2ggc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAga2VwdCBpbiBpdHMgb3duIHBsYWNlOyB0aHVzIGl0IHdpbGwgYWx3YXlzIGJlIHRvIGhhbmQsIGFuZCBub3QgcmVxdWlyZQogICAgICAgICAgICAgICAgc2Vla2luZy48L3A+CgkJCTwvZGl2MT4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTM0M2EiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJCZWtrZXIiIG49IjEiIHVuaXQ9ImxpbmUiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMS4xIiB1bml0PSJMb2ViIGNoYXAiIC8+IEJldHdlZW4gSG91c2VjcmFmdCAodGhlIGFydCBvZiBnb3Zlcm5pbmcgYSBIb3VzZWhvbGQgb3IgSG9tZSkgYW5kIFN0YXRlY3JhZnQKICAgICAgICAgICAgICAgICAgICAodGhlIGFydCBvZiBnb3Zlcm5pbmcgYSBOYXRpb24pIHRoZXJlIGFyZSBkaWZmZXJlbmNlcyBjb3JyZXNwb25kaW5nIHRvIHRob3NlCiAgICAgICAgICAgICAgICAgICAgYmV0d2VlbiB0aGUgdHdvIGtpbmRzIG9mIGNvbW11bml0eSBvdmVyIHdoaWNoIHRoZXkgc2V2ZXJhbGx5IHByZXNpZGUuIFRoZXJlIGlzLAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIHRoaXMgZnVydGhlciBkaWZmZXJlbmNlOiB0aGF0IHdoZXJlYXMgdGhlIGdvdmVybm1lbnQgb2YgYSBuYXRpb24gaXMgaW4KICAgICAgICAgICAgICAgICAgICBtYW55IGhhbmRzLCBhIGhvdXNlaG9sZCBoYXMgYnV0IGEgc2luZ2xlIHJ1bGVyLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHNvbWUgYXJ0cyBhcmUgZGl2aWRlZCBpbnRvIHR3byBzZXBhcmF0ZSBicmFuY2hlcywgb25lIGNvbmNlcm5lZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIG1ha2luZyBvZiBhbiBvYmplY3TigJRmb3IgZXhhbXBsZSBhIGx5cmUgb3IgYSBmbHV0ZeKAlGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciB3aXRoIGl0cyB1c2Ugd2hlbiBtYWRlLiBTdGF0ZWNyYWZ0IG9uIHRoZSBvdGhlciBoYW5kIHNob3dzIHVzIGhvdyB0byBidWlsZAogICAgICAgICAgICAgICAgICAgIHVwIGEgbmF0aW9uIGZyb20gaXRzIGJlZ2lubmluZywgYXMgd2VsbCBhcyBob3cgdG8gb3JkZXIgcmlnaHRseSBhIG5hdGlvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeSBleGlzdHM7IGZyb20gd2hpY2ggd2UgaW5mZXIgdGhhdCBIb3VzZWNyYWZ0IGFsc28gdGVsbHMgdXMgZmlyc3QgaG93IHRvCiAgICAgICAgICAgICAgICAgICAgYWNxdWlyZSBhIGhvdXNlaG9sZCBhbmQgdGhlbiBob3cgdG8gY29uZHVjdCBpdHMgYWZmYWlycy48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjEuMiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBCeSBhIE5hdGlvbiB3ZQogICAgICAgICAgICAgICAgICAgIG1lYW4gYW4gYXNzZW1ibGFnZSBvZiBob3VzZXMsIGxhbmRzLCBhbmQgcHJvcGVydHkgc3VmZmljaWVudCB0byBlbmFibGUgdGhlCiAgICAgICAgICAgICAgICAgICAgaW5oYWJpdGFudHMgdG8gbGVhZCBhIGNpdmlsaXplZCBsaWZlLiBUaGlzIGlzIHByb3ZlZCBieSB0aGUgZmFjdCB0aGF0IHdoZW4gc3VjaAogICAgICAgICAgICAgICAgICAgIGEgbGlmZSBpcyBubyBsb25nZXIgcG9zc2libGUgZm9yIHRoZW0sIHRoZSB0aWUgaXRzZWxmIHdoaWNoIHVuaXRlcyB0aGVtIGlzCiAgICAgICAgICAgICAgICAgICAgZGlzc29sdmVkLiBNb3Jlb3ZlciwgaXQgaXMgd2l0aCBzdWNoIGEgbGlmZSBpbiB2aWV3IHRoYXQgdGhlIGFzc29jaWF0aW9uIGlzCiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxseSBmb3JtZWQ7IGFuZCB0aGUgb2JqZWN0IGZvciB3aGljaCBhIHRoaW5nIGV4aXN0cyBhbmQgaGFzIGNvbWUgaW50bwogICAgICAgICAgICAgICAgICAgIGJlaW5nIGlzIGluIGZhY3QgdGhlIHZlcnkgZXNzZW5jZSBvZiB0aGF0IHBhcnRpY3VsYXIgdGhpbmcuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Gcm9tIHRoaXMgZGVmaW5pdGlvbiBvZiBhIE5hdGlvbiwgaXQgaXMgZXZpZGVudCB0aGF0IHRoZSBhcnQgb2YKICAgICAgICAgICAgICAgICAgICBIb3VzZWNyYWZ0IGlzIG9sZGVyIHRoYW4gdGhhdCBvZiBTdGF0ZWNyYWZ0LCBzaW5jZSB0aGUgSG91c2Vob2xkLCB3aGljaCBpdAogICAgICAgICAgICAgICAgICAgIGNyZWF0ZXMsIGlzIG9sZGVyOyBiZWluZyBhIGNvbXBvbmVudCBwYXJ0IG9mIHRoZSBOYXRpb24gY3JlYXRlZCBieQogICAgICAgICAgICAgICAgICAgICAgICBTdGF0ZWNyYWZ0LjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWNjb3JkaW5nbHkgd2UgbXVzdCBjb25zaWRlciB0aGUKICAgICAgICAgICAgICAgICAgICBuYXR1cmUgb2YgSG91c2VjcmFmdCwgYW5kIHdoYXQgdGhlIEhvdXNlaG9sZCwgd2hpY2ggaXQgY3JlYXRlcywgYWN0dWFsbHkKICAgICAgICAgICAgICAgICAgICAgICAgaXMuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSIyLjEiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gVGhlIGNvbXBvbmVudCBwYXJ0cyBvZiBhIGhvdXNlaG9sZCBhcmUgKGwpIGh1bWFuIGJlaW5ncywgYW5kICgyKSBnb29kcyBhbmQKICAgICAgICAgICAgICAgICAgICBjaGF0dGVscy4gQW5kIGFzIGhvdXNlaG9sZHMgYXJlIG5vIGV4Y2VwdGlvbiB0byB0aGUgcnVsZSB0aGF0IHRoZSBuYXR1cmUgb2YgYQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGlzIGZpcnN0IHN0dWRpZWQgaW4gaXRzIGJhcmVzdCBhbmQgc2ltcGxlc3QgZm9ybSw8bWlsZXN0b25lIGVkPSJCZWtrZXIiIG49IjIwIiB1bml0PSJsaW5lIiAvPndlIHdpbGwgZm9sbG93IEhlc2lvZCBhbmQgYmVnaW4gYnkgcG9zdHVsYXRpbmcKICAgICAgICAgICAgICAgICAgICAiSG9tZXN0ZWFkIGZpcnN0LCBhbmQgYSB3b21hbjsgYSBwbG91Z2gtb3ggaGFyZHkgdG8gZnVycm93LiIgRm9yIHRoZSBzdGVhZGluZwogICAgICAgICAgICAgICAgICAgIHRha2VzIHByZWNlZGVuY2UgYW1vbmcgb3VyIHBoeXNpY2FsIG5lY2Vzc2l0aWVzLCBhbmQgdGhlIHdvbWFuIGFtb25nIG91ciBmcmVlCiAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlcy4gSXQgaXMsIHRoZXJlZm9yZSwgb25lIG9mIHRoZSB0YXNrcyBvZiBIb21lY3JhZnQgdG8gc2V0IGluIG9yZGVyIHRoZQogICAgICAgICAgICAgICAgICAgIHJlbGF0aW9uIGJldHdlZW4gbWFuIGFuZCB3b21hbjsgaW4gb3RoZXIgd29yZHMsIHRvIHNlZSB0aGF0IGl0IGlzIHdoYXQgaXQgb3VnaHQKICAgICAgICAgICAgICAgICAgICB0byBiZS48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjIuMiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBPZiBvY2N1cGF0aW9ucyBhdHRlbmRhbnQgb24gb3VyIGdvb2RzIGFuZCBjaGF0dGVscywgdGhvc2UgY29tZSBmaXJzdCB3aGljaAogICAgICAgICAgICAgICAgICAgIGFyZSBuYXR1cmFsLiBBbW9uZyB0aGVzZSBwcmVjZWRlbmNlIGlzIGdpdmVuIHRvIHRoZSBvbmUgd2hpY2ggY3VsdGl2YXRlcyB0aGUKICAgICAgICAgICAgICAgICAgICBsYW5kOyB0aG9zZSBsaWtlIG1pbmluZywgd2hpY2ggZXh0cmFjdCB3ZWFsdGggZnJvbSBpdCwgdGFrZSB0aGUgc2Vjb25kIHBsYWNlLgogICAgICAgICAgICAgICAgICAgIEFncmljdWx0dXJlIGlzIHRoZSBtb3N0IGhvbmVzdCBvZiBhbGwgc3VjaCBvY2N1cGF0aW9uczsgc2VlaW5nIHRoYXQgdGhlIHdlYWx0aAogICAgICAgICAgICAgICAgICAgIGl0IGJyaW5ncyBpcyBub3QgZGVyaXZlZCBmcm9tIG90aGVyIG1lbi4gSGVyZWluIGl0IGlzIGRpc3Rpbmd1aXNoZWQgZnJvbSB0cmFkZQogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgd2FnZS1lYXJuaW5nIGVtcGxveW1lbnRzLCB3aGljaCBhY3F1aXJlIHdlYWx0aCBmcm9tIG90aGVycyBieSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNvbnNlbnQ7IGFuZCBmcm9tIHdhciwgd2hpY2ggd3JpbmdzIGl0IGZyb20gdGhlbSBwZXJmb3JjZS4gSXQgaXMgYWxzbyBhIG5hdHVyYWwKICAgICAgICAgICAgICAgICAgICBvY2N1cGF0aW9uOyBzaW5jZSBieSBOYXR1cmUncyBhcHBvaW50bWVudCBhbGwgY3JlYXR1cmVzIHJlY2VpdmUgc3VzdGVuYW5jZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbW90aGVyLCA8bWlsZXN0b25lIG49IjEzNDNiIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IkJla2tlciIgbj0iMSIgdW5pdD0ibGluZSIgLz5hbmQgbWFua2luZCBsaWtlIHRoZSByZXN0IGZyb20gdGhlaXIgY29tbW9uIG1vdGhlciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZWFydGguPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSIyLjMiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gQW5kIGJlc2lkZXMgYWxsIHRoaXMsIGFncmljdWx0dXJlIGNvbnRyaWJ1dGVzIG5vdGFibHkgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgbWFraW5nIG9mIGEgbWFubHkgY2hhcmFjdGVyOyBiZWNhdXNlLCB1bmxpa2UgdGhlIG1lY2hhbmljYWwgYXJ0cywgaXQgZG9lcwogICAgICAgICAgICAgICAgICAgIG5vdCBjcmlwcGxlIGFuZCB3ZWFrZW4gdGhlIGJvZGllcyBvZiB0aG9zZSBlbmdhZ2VkIGluIGl0LCBidXQgaW51cmVzIHRoZW0gdG8KICAgICAgICAgICAgICAgICAgICBleHBvc3VyZSBhbmQgdG9pbCBhbmQgaW52aWdvcmF0ZXMgdGhlbSB0byBmYWNlIHRoZSBwZXJpbHMgb2Ygd2FyLiBGb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZmFybWVyJ3MgcG9zc2Vzc2lvbnMsIHVubGlrZSB0aG9zZSBvZiBvdGhlciBtZW4sIGxpZSBvdXRzaWRlIHRoZSBjaXR5J3MKICAgICAgICAgICAgICAgICAgICAgICAgZGVmZW5jZXMuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSIzLjEiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gV2hlbiB3ZSB0dXJuIG91ciBhdHRlbnRpb24gdG8gdGhlIGh1bWFuIHBhcnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgaG91c2Vob2xkLCBpdCBpcyB0aGUgd29tYW4gd2hvIG1ha2VzIHRoZSBmaXJzdCBjbGFpbSB1cG9uIGl0OyAmbHQ7Zm9yIHRoZQogICAgICAgICAgICAgICAgICAgIG5hdHVyYWwgY29tZXMgZmlyc3QsIGFzIHdlIGhhdmUgc2FpZCwmZ3Q7IGFuZCBub3RoaW5nIGlzIG1vcmUgbmF0dXJhbCB0aGFuCiAgICAgICAgICAgICAgICAgICAgdGhlIHRpZSBiZXR3ZWVuIGZlbWFsZSBhbmQgbWFsZS4gRm9yIHdlIGhhdmUgZWxzZXdoZXJlIGxhaWQgZG93biB0aGUKICAgICAgICAgICAgICAgICAgICBwcmVtaXNzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIFBvbC4gMS4xMjUyYS4xIiB2YWxpZD0ieWVzIj5BcmlzdG90LiBQb2wuIDEuMTwvYmlibD4uPC9ub3RlPiB0aGF0IE5hdHVyZSBpcyBpbnRlbnQgb24gbXVsdGlwbHlpbmcgc2V2ZXJhbGx5IGhlciB0eXBlczsKICAgICAgICAgICAgICAgICAgICBhbmQgdGhpcyBpcyB0cnVlIG9mIGV2ZXJ5IGFuaW1hbCBpbiBwYXJ0aWN1bGFyLiBOZWl0aGVyIHRoZSBmZW1hbGUsIGhvd2V2ZXIsIGNhbgogICAgICAgICAgICAgICAgICAgIGVmZmVjdCB0aGlzIHdpdGhvdXQgdGhlIG1hbGUsIG5vciB0aGUgbWFsZSB3aXRob3V0IHRoZSBmZW1hbGU7IHdoZW5jZSB0aGUgdW5pb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc2V4ZXMgaGFzIG9mIG5lY2Vzc2l0eSBhcmlzZW4uPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSIzLjIiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gTm93IGFtb25nIHRoZSBsb3dlciBhbmltYWxzLCB0aGlzIHVuaW9uIGlzCiAgICAgICAgICAgICAgICAgICAgaXJyYXRpb25hbCBpbiBjaGFyYWN0ZXI7IGl0IGV4aXN0cyBtZXJlbHkgZm9yIHRoZSBwdXJwb3NlIG9mIHByb2NyZWF0aW9uLCBhbmQKICAgICAgICAgICAgICAgICAgICBsYXN0cyBvbmx5IHNvIGxvbmcgYXMgdGhlIHBhcmVudHMgYXJlIG9jY3VwaWVkIGluIHByb2R1Y2luZyB0aGVpciBicm9vZC4gSW4gdGFtZQogICAgICAgICAgICAgICAgICAgIGFuaW1hbHMsIG9uIHRoZSBvdGhlciBoYW5kLCBhbmQgdGhvc2Ugd2hpY2ggcG9zc2VzcyBhIGdyZWF0ZXIgc2hhcmUgb2YKICAgICAgICAgICAgICAgICAgICBpbnRlbGxpZ2VuY2UsIGl0IGhhcyBhc3N1bWVkIGEgbW9yZSBjb21wbGV4IGZvcm07IGZvciBpbiB0aGVpciBjYXNlIHdlIHNlZSBtb3JlCiAgICAgICAgICAgICAgICAgICAgZXhhbXBsZXMgb2YgbXV0dWFsIGhlbHAsIGdvb2R3aWxsLCBhbmQgY28tb3BlcmF0aW9uLiA8bWlsZXN0b25lIGVkPSJQIiBuPSIzLjMiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gSXQgaXMsIGhvd2V2ZXIsIGluIHRoZSBodW1hbiBzcGVjaWVzIHRoYXQgdGhpcyBjb21wbGV4aXR5CiAgICAgICAgICAgICAgICAgICAgaXMgbW9zdCBtYXJrZWQ7IHNpbmNlIHRoZSBjby1vcGVyYXRpb24gYmV0d2VlbiB3b21hbiBhbmQgbWFuIGFpbXMgbm90IG1lcmVseSBhdAogICAgICAgICAgICAgICAgICAgIGV4aXN0ZW5jZSwgYnV0IGF0IGEgaGFwcHkgPG1pbGVzdG9uZSBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz5leGlzdGVuY2UuCiAgICAgICAgICAgICAgICAgICAgTm9yIGRvIG1hbmtpbmQgYmVnZXQgY2hpbGRyZW4gbWVyZWx5IHRvIHBheSB0aGUgc2VydmljZSB0aGV5IG93ZSB0byBOYXR1cmUsIGJ1dAogICAgICAgICAgICAgICAgICAgIGFsc28gdGhhdCB0aGV5IG1heSB0aGVtc2VsdmVzIHJlY2VpdmUgYSBiZW5lZml0OyBmb3IgdGhlIHRvaWwgdGhleSB1bmRlcmdvIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgdGhleSBhcmUgc3Ryb25nIGFuZCB0aGVpciBvZmZzcHJpbmcgaXMgc3RpbGwgd2VhayBpcyByZXBhaWQgYnkgdGhhdCBvZmZzcHJpbmcKICAgICAgICAgICAgICAgICAgICB3aGVuIGl0IGluIHR1cm4gaXMgZ3Jvd24gc3Ryb25nIGFuZCB0aGUgcGFyZW50cyBieSByZWFzb24gb2YgYWdlIGFyZQogICAgICAgICAgICAgICAgICAgICAgICB3ZWFrLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iMy40IiB1bml0PSJMb2ViIGNoYXAiIC8+IEF0IHRoZSBzYW1lIHRpbWUgTmF0dXJlLCBieSB0aGlzIGN5Y2xlIG9mIGNoYW5nZXMsCiAgICAgICAgICAgICAgICAgICAgZnVsZmlsbHMgaGVyIHB1cnBvc2Ugb2YgcGVycGV0dWF0aW5nIGV4aXN0ZW5jZTsgcHJlc2VydmluZyB0aGUgdHlwZSB3aGVuIHNoZSBpcwogICAgICAgICAgICAgICAgICAgIHVuYWJsZSB0byBwcmVzZXJ2ZSB0aGUgaW5kaXZpZHVhbC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gR0EgNzMxYiI+QXJpc3RvdC4gRGUgR2VuLiBBbi4gNzMxYi48L2JpYmw+PC9ub3RlPiBBbmQgc28KICAgICAgICAgICAgICAgICAgICB3aXRoIHRoaXMgcHVycG9zZSBpbiB2aWV3IERpdmluZSBQcm92aWRlbmNlIGhhcyBmYXNoaW9uZWQgdGhlIG5hdHVyZSBvZiBtYW4gYW5kCiAgICAgICAgICAgICAgICAgICAgb2Ygd29tYW4gZm9yIHRoZWlyIHBhcnRuZXJzaGlwLiBGb3IgdGhleSBhcmUgZGlzdGluZ3Vpc2hlZCBmcm9tIGVhY2ggb3RoZXIgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgcG9zc2Vzc2lvbiBvZiBmYWN1bHRpZXMgbm90IGFkYXB0ZWQgaW4gZXZlcnkgY2FzZSB0byB0aGUgc2FtZSB0YXNrcywgYnV0IGluCiAgICAgICAgICAgICAgICAgICAgc29tZSBjYXNlcyBmb3Igb3Bwb3NpdGUgb25lcywgdGhvdWdoIGNvbnRyaWJ1dGluZyB0byB0aGUgc2FtZSBlbmQuIEZvcgogICAgICAgICAgICAgICAgICAgIFByb3ZpZGVuY2UgbWFkZSBtYW4gc3Ryb25nZXIgYW5kIHdvbWFuIHdlYWtlciwgPG1pbGVzdG9uZSBuPSIxMzQ0YSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJCZWtrZXIiIG49IjEiIHVuaXQ9ImxpbmUiIC8+c28gdGhhdCBoZSBpbgogICAgICAgICAgICAgICAgICAgIHZpcnR1ZSBvZiBoaXMgbWFubHkgcHJvd2VzcyBtYXkgYmUgbW9yZSByZWFkeSB0byBkZWZlbmQgdGhlIGhvbWUsIGFuZCBzaGUsIGJ5CiAgICAgICAgICAgICAgICAgICAgcmVhc29uIG9mIGhlciB0aW1pZCBuYXR1cmUsIG1vcmUgcmVhZHkgdG8ga2VlcCB3YXRjaCBvdmVyIGl0OyBhbmQgd2hpbGUgaGUKICAgICAgICAgICAgICAgICAgICBicmluZ3MgaW4gZnJlc2ggc3VwcGxpZXMgZnJvbSB3aXRob3V0LCBzaGUgbWF5IGtlZXAgc2FmZSB3aGF0IGxpZXMgd2l0aGluLiBJbgogICAgICAgICAgICAgICAgICAgIGhhbmRpY3JhZnRzIGFnYWluLCB3b21hbiB3YXMgZ2l2ZW4gYSBzZWRlbnRhcnkgcGF0aWVuY2UsIHRob3VnaCBkZW5pZWQgc3RhbWluYQogICAgICAgICAgICAgICAgICAgIGZvciBlbmR1cmFuY2Ugb2YgZXhwb3N1cmU7IHdoaWxlIG1hbiwgdGhvdWdoIGluZmVyaW9yIHRvIGhlciBpbiBxdWlldAogICAgICAgICAgICAgICAgICAgIGVtcGxveW1lbnRzLCBpcyBlbmRvd2VkIHdpdGggdmlnb3IgZm9yIGV2ZXJ5IGFjdGl2ZSBvY2N1cGF0aW9uLiBJbiB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9kdWN0aW9uIG9mIGNoaWxkcmVuIGJvdGggc2hhcmUgYWxpa2U7IGJ1dCBlYWNoIG1ha2VzIGEgZGlmZmVyZW50IGNvbnRyaWJ1dGlvbgogICAgICAgICAgICAgICAgICAgIHRvIHRoZWlyIHVwYnJpbmdpbmcuIEl0IGlzIHRoZSBtb3RoZXIgd2hvIG51cnR1cmVzLCBhbmQgdGhlIGZhdGhlciB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgZWR1Y2F0ZXMuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSI0LjEiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gV2UgYmVnaW4gdGhlbiB3aXRoIHRoZSBydWxlcyB0aGF0IHNob3VsZCBnb3Zlcm4gYSBtYW4ncwogICAgICAgICAgICAgICAgICAgIHRyZWF0bWVudCBvZiBoaXMgd2lmZS4gQW5kIHRoZSBmaXJzdCBvZiB0aGVzZSBmb3JiaWRzIGhpbSB0byBkbyBoZXIgd3Jvbmc7IGZvcgogICAgICAgICAgICAgICAgICAgIGlmIGhlIG9ic2VydmVzIHRoaXMsIGhlIGlzIG5vdCBsaWtlbHkgaGltc2VsZiB0byBzdWZmZXIgd3JvbmcgYXQgaGVyIGhhbmRzLiBBcwogICAgICAgICAgICAgICAgICAgIHRoZSBQeXRoYWdvcmVhbnMgZGVjbGFyZSwgZXZlbiB0aGUgY29tbW9uIHJ1bGUgb3IgY3VzdG9tIG9mIG1hbmtpbmQgdGh1cwogICAgICAgICAgICAgICAgICAgIG9yZGFpbnMsIGZvcmJpZGRpbmcgYWxsIHdyb25nIHRvIGEgd2lmZSBhcyBzdHJpbmdlbnRseSBhcyB0aG91Z2ggc2hlIHdlcmUgYQogICAgICAgICAgICAgICAgICAgIHN1cHBsaWFudCB3aG9tIG9uZSBoYXMgcmFpc2VkIGZyb20gdGhlIGhlYXJ0aHN0b25lLiBBbmQgYSBtYW4gZG9lcyB3cm9uZyB0byBoaXMKICAgICAgICAgICAgICAgICAgICB3aWZlIHdoZW4gaGUgYXNzb2NpYXRlcyB3aXRoIG90aGVyIHdvbWVuLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNC4yIiB1bml0PSJMb2ViIGNoYXAiIC8+IEFzIHJlZ2FyZHMgdGhlIGludGVyY291cnNlIG9mCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UsIHdpdmVzIHNob3VsZCBuZWl0aGVyIGltcG9ydHVuZSB0aGVpciBodXNiYW5kcywgbm9yIGJlIHJlc3RsZXNzIGluCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYWJzZW5jZTsgYnV0IGEgbWFuIHNob3VsZCBhY2N1c3RvbSBoaXMgd2lmZSB0byBiZSBjb250ZW50IHdoZXRoZXIgaGUgaXMgYXQKICAgICAgICAgICAgICAgICAgICBob21lIG9yIGF3YXkuIEdvb2QgYWxzbyBpcyB0aGUgYWR2aWNlIG9mIEhlc2lvZDogPGNpdD4KICAgICAgICAgICAgICAgICAgICAgICAgPHF1b3RlIHR5cGU9InZlcnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIG1ldD0iZGFjdHlsaWMiPlRha2UgdGhlZSBhIG1haWRlbiB0byB3aWZlLCBhbmQgdGVhY2ggaGVyIHdheXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNjcmV0aW9uLjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikhlcy4gV0QgNjk5IiB2YWxpZD0ieWVzIj5IZXMuIFdEIDY5OTwvYmlibD4KICAgICAgICAgICAgICAgICAgICA8L2NpdD4gRm9yIGRpZmZlcmVuY2VzIG9mIHdheXMgYW5kIGhhYml0cyBhcmUgbGl0dGxlIGNvbmR1Y2l2ZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBhZmZlY3Rpb24uPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSI0LjMiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gQXMgcmVnYXJkcyBhZG9ybm1lbnQ6IGl0IGlzIG5vdCB3ZWxsPG1pbGVzdG9uZSBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz50aGF0IHNvdWxzIHNob3VsZCBhcHByb2FjaCBvbmUgYW5vdGhlciBpbgogICAgICAgICAgICAgICAgICAgIGJvcnJvd2VkIHBsdW1lcywgbm9yIGlzIGl0IHdlbGwgaW4gdGhlIGNhc2Ugb2YgYm9kaWVzLiBJbnRlcmNvdXJzZSB3aGljaCBkZXBlbmRzCiAgICAgICAgICAgICAgICAgICAgJmx0O2ZvciBpdHMgY2hhcm0mZ3Q7IHVwb24gb3V0d2FyZCBhZG9ybm1lbnQgZGlmZmVycyBpbiBubyByZXNwZWN0IGZyb20KICAgICAgICAgICAgICAgICAgICB0aGF0IG9mIGZpZ3VyZXMgb24gdGhlIHN0YWdlIGluIHRoZWlyIGNvbnZlbnRpb25hbCBhdHRpcmUuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSI1LjEiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gT2YgcHJvcGVydHksIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IGFuZCBtb3N0IGluZGlzcGVuc2FibGUga2luZCBpcyB0aGF0IHdoaWNoIGlzIGFsc28gYmVzdCBhbmQgbW9zdCBhbWVuYWJsZQogICAgICAgICAgICAgICAgICAgIHRvIEhvdXNlY3JhZnQ7IGFuZCB0aGlzIGlzIHRoZSBodW1hbiBjaGF0dGVsLiBPdXIgZmlyc3Qgc3RlcCB0aGVyZWZvcmUgbXVzdCBiZQogICAgICAgICAgICAgICAgICAgIHRvIHByb2N1cmUgZ29vZCBzbGF2ZXMuIE9mIHNsYXZlcyB0aGVyZSBhcmUgdHdvIGtpbmRzOyB0aG9zZSBpbiBwb3NpdGlvbnMgb2YKICAgICAgICAgICAgICAgICAgICB0cnVzdCwgYW5kIHRoZSBsYWJvcmVycy4gQW5kIHNpbmNlIGl0IGlzIG1hdHRlciBvZiBleHBlcmllbmNlIHRoYXQgdGhlIGNoYXJhY3RlcgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSB5b3VuZyBjYW4gYmUgbW91bGRlZCBieSB0cmFpbmluZywgd2hlbiB3ZSByZXF1aXJlIHRvIGNoYXJnZSBzbGF2ZXMgd2l0aAogICAgICAgICAgICAgICAgICAgIHRhc2tzIGJlZml0dGluZyB0aGUgZnJlZSwgd2UgaGF2ZSBub3Qgb25seSB0byBwcm9jdXJlIHRoZSBzbGF2ZXMsIGJ1dCB0byBicmluZwogICAgICAgICAgICAgICAgICAgIHRoZW0gdXAgJmx0O2ZvciB0aGUgdHJ1c3QmZ3Q7LjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNS4yIiB1bml0PSJMb2ViIGNoYXAiIC8+IEluIG91ciBpbnRlcmNvdXJzZSB3aXRoIHNsYXZlcyB3ZSBtdXN0CiAgICAgICAgICAgICAgICAgICAgbmVpdGhlciBzdWZmZXIgdGhlbSB0byBiZSBpbnNvbGVudCBub3IgdHJlYXQgdGhlbSB3aXRoIGNydWVsdHkuIEEgc2hhcmUgb2YgaG9ub3IKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgZ2l2ZW4gdG8gdGhvc2Ugd2hvIGFyZSBkb2luZyBtb3JlIG9mIGEgZnJlZW1hbidzIHdvcmssIGFuZCBhYnVuZGFuY2UKICAgICAgICAgICAgICAgICAgICBvZiBmb29kIHRvIHRob3NlIHdobyBhcmUgbGFib3Jpbmcgd2l0aCB0aGVpciBoYW5kcy4gQW5kIHdoZXJlYXMgdGhlIHVzZSBvZiB3aW5lCiAgICAgICAgICAgICAgICAgICAgcmVuZGVycyBldmVuIGZyZWUgbWVuIGluc29sZW50LCBzbyB0aGF0IGluIG1hbnkgY291bnRyaWVzIHRoZXkgdG9vIHJlZnJhaW4gZnJvbQogICAgICAgICAgICAgICAgICAgIGl04oCUYXMsIGZvciBpbnN0YW5jZSwgdGhlIENhcnRoYWdpbmlhbnMgZG8gd2hlbiB0aGV5IGFyZSBvbgogICAgICAgICAgICAgICAgICAgIGNhbXBhaWdu4oCUaXQgZm9sbG93cyB0aGF0IHdlIG11c3QgZWl0aGVyIGRlbnkgd2luZSB0byBzbGF2ZXMKICAgICAgICAgICAgICAgICAgICBhbHRvZ2V0aGVyLCBvciByZXNlcnZlIGl0IGZvciByYXJlIG9jY2FzaW9ucy48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjUuMyIgdW5pdD0iTG9lYiBjaGFwIiAvPiBXZSBtYXkgYXBwb3J0aW9uIHRvIG91cgogICAgICAgICAgICAgICAgICAgIHNsYXZlcyAoMSkgd29yaywgKDIpIGNoYXN0aXNlbWVudCwgYW5kICgzKSBmb29kLiBJZiBtZW4gYXJlIGdpdmVuIGZvb2QsIGJ1dCBubwogICAgICAgICAgICAgICAgICAgIGNoYXN0aXNlbWVudCBub3IgYW55IHdvcmssIHRoZXkgYmVjb21lIGluc29sZW50LiA8bWlsZXN0b25lIG49IjEzNDRiIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IkJla2tlciIgbj0iMSIgdW5pdD0ibGluZSIgLz5JZiB0aGV5IGFyZSBtYWRlCiAgICAgICAgICAgICAgICAgICAgdG8gd29yaywgYW5kIGFyZSBjaGFzdGlzZWQsIGJ1dCBzdGludGVkIG9mIHRoZWlyIGZvb2QsIHN1Y2ggdHJlYXRtZW50IGlzCiAgICAgICAgICAgICAgICAgICAgb3BwcmVzc2l2ZSwgYW5kIHNhcHMgdGhlaXIgc3RyZW5ndGguIFRoZSByZW1haW5pbmcgYWx0ZXJuYXRpdmUsIHRoZXJlZm9yZSwgaXMgdG8KICAgICAgICAgICAgICAgICAgICBnaXZlIHRoZW0gd29yaywgYW5kIGEgc3VmZmljaWVuY3kgb2YgZm9vZC4gVW5sZXNzIHdlIHBheSBtZW4sIHdlIGNhbm5vdCBjb250cm9sCiAgICAgICAgICAgICAgICAgICAgdGhlbTsgYW5kIGZvb2QgaXMgYSBzbGF2ZSdzIHBheS48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNsYXZlcywgYWdhaW4sCiAgICAgICAgICAgICAgICAgICAgYXJlIG5vIGV4Y2VwdGlvbiB0byB0aGUgcnVsZSB0aGF0IG1lbiBiZWNvbWUgd29yc2Ugd2hlbiBiZXR0ZXIgY29uZHVjdCBpcyBub3QKICAgICAgICAgICAgICAgICAgICBmb2xsb3dlZCBieSBiZXR0ZXIgdHJlYXRtZW50LCBidXQgdmlydHVlIGFuZCB2aWNlIHJlbWFpbiBhbGlrZSB1bnJld2FyZGVkLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGVkPSJQIiBuPSI1LjQiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gQWNjb3JkaW5nbHkgd2UgbXVzdCBrZWVwIHdhdGNoCiAgICAgICAgICAgICAgICAgICAgb3ZlciBvdXIgd29ya2Vycywgc3VpdGluZyBvdXIgZGlzcGVuc2F0aW9ucyBhbmQgaW5kdWxnZW5jZXMgdG8gdGhlaXIgZGVzZXJ0OwogICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgaXQgYmUgZm9vZCBvciBjbG90aGluZywgbGVpc3VyZSBvciBjaGFzdGlzZW1lbnQgdGhhdCB3ZSBhcmUKICAgICAgICAgICAgICAgICAgICBhcHBvcnRpb25pbmcuIEJvdGggaW4gdGhlb3J5IGFuZCBpbiBwcmFjdGljZSB3ZSBtdXN0IHRha2UgZm9yIG91ciBtb2RlbCBhCiAgICAgICAgICAgICAgICAgICAgcGh5c2ljaWFuJ3MgZnJlZWRvbSBpbiBwcmVzY3JpYmluZyBoaXMgbWVkaWNpbmVzOyBvYnNlcnZpbmcgYXQgdGhlIHNhbWUgdGltZQogICAgICAgICAgICAgICAgICAgIHRoYXQgZm9vZCBkaWZmZXJzIGZyb20gbWVkaWNpbmUgaW4gdGhhdCBpdCByZXF1aXJlcyB0byBiZSBjb25zdGFudGx5CiAgICAgICAgICAgICAgICAgICAgICAgIGFkbWluaXN0ZXJlZC48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjUuNSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBUaGUgYmVzdCBsYWJvcmVycyB3aWxsIGJlIGZ1cm5pc2hlZCBieSB0aG9zZSByYWNlcyBvZgogICAgICAgICAgICAgICAgICAgIG1hbmtpbmQgd2hpY2ggYXJlIG5laXRoZXIgd2hvbGx5IHNwaXJpdGxlc3Mgbm9yIHlldCBvdmVyYm9sZC4gRWFjaCBleHRyZW1lIGhhcwogICAgICAgICAgICAgICAgICAgIGl0cyB2aWNlOyB0aGUgc3Bpcml0bGVzcyBjYW5ub3QgZW5kdXJlIGhhcmQgbGFib3IsIGFuZCB0aGUgaGlnaC1zcGlyaXRlZCB3aWxsCiAgICAgICAgICAgICAgICAgICAgbm90IHJlYWRpbHkgYnJvb2sgY29udHJvbC48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjUuNiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBFdmVyeSBzbGF2ZSBzaG91bGQgaGF2ZSBiZWZvcmUgaGlzIGV5ZXMgYQogICAgICAgICAgICAgICAgICAgIGRlZmluaXRlIGdvYWwgb3IgdGVybSBvZiBoaXMgbGFib3IuIFRvIHNldCB0aGUgcHJpemUgb2YgZnJlZWRvbSBiZWZvcmUgaGltIGlzCiAgICAgICAgICAgICAgICAgICAgYm90aCBqdXN0IGFuZCBleHBlZGllbnQ7IHNpbmNlIGhhdmluZyBhIHByaXplIHRvIHdvcmsgZm9yLCBhbmQgYSB0aW1lIGRlZmluZWQKICAgICAgICAgICAgICAgICAgICBmb3IgaXRzIGF0dGFpbm1lbnQsIGhlIHdpbGwgcHV0IGhpcyBoZWFydCBpbnRvIGhpcyBsYWJvcnMuIFdlIHNob3VsZCwgbW9yZW92ZXIsCiAgICAgICAgICAgICAgICAgICAgdGFrZSBob3N0YWdlcyAmbHQ7Zm9yIG91ciBzbGF2ZXMnIGZpZGVsaXR5Jmd0OyBieSBhbGxvd2luZyB0aGVtIHRvIGJlZ2V0CiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW47IGFuZCBhdm9pZCB0aGUgcHJhY3RpY2Ugb2YgcHVyY2hhc2luZyBtYW55IHNsYXZlcyBvZiB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIG5hdGlvbmFsaXR5LCBhcyBtZW4gYXZvaWQgZG9pbmcgaW4gdG93bnMuIFdlIHNob3VsZCBhbHNvIGtlZXAgZmVzdGl2YWxzIGFuZCBnaXZlCiAgICAgICAgICAgICAgICAgICAgdHJlYXRzLCBtb3JlIG9uIHRoZSBzbGF2ZXMgYWNjb3VudCB0aGFuIG9uIHRoYXQgb2YgdGhlIGZyZWVtZW47PG1pbGVzdG9uZSBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz5zaW5jZSB0aGUgZnJlZSBoYXZlIGEgZnVsbGVyIHNoYXJlIGluIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZW5qb3ltZW50cyBmb3IgdGhlIHNha2Ugb2Ygd2hpY2ggdGhlc2UgaW5zdGl0dXRpb25zIGV4aXN0LjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNi4xIiB1bml0PSJMb2ViIGNoYXAiIC8+IFRoZXJlIGFyZSBmb3VyCiAgICAgICAgICAgICAgICAgICAgcXVhbGl0aWVzIHdoaWNoIHRoZSBoZWFkIG9mIGEgaG91c2Vob2xkIG11c3QgcG9zc2VzcyBpbiBkZWFsaW5nIHdpdGggaGlzCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkuIEZpcnN0bHksIGhlIG11c3QgaGF2ZSB0aGUgZmFjdWx0eSBvZiBhY3F1aXJpbmcsIGFuZCBzZWNvbmRseSB0aGF0IG9mCiAgICAgICAgICAgICAgICAgICAgcHJlc2VydmluZyB3aGF0IGhlIGhhcyBhY3F1aXJlZDsgb3RoZXJ3aXNlIHRoZXJlIGlzIG5vIG1vcmUgYmVuZWZpdCBpbiBhY3F1aXJpbmcKICAgICAgICAgICAgICAgICAgICB0aGFuIGluIGJhbGluZyB3aXRoIGEgY29sYW5kZXIsIG9yIGluIHRoZSBwcm92ZXJiaWFsIHdpbmUtamFyIHdpdGggYSBob2xlIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGJvdHRvbS4gVGhpcmRseSBhbmQgZm91cnRobHksIGhlIG11c3Qga25vdyBob3cgdG8gaW1wcm92ZSBoaXMgcHJvcGVydHksIGFuZCBob3cKICAgICAgICAgICAgICAgICAgICB0byBtYWtlIHVzZSBvZiBpdDsgc2luY2UgdGhlc2UgYXJlIHRoZSBlbmRzIGZvciB3aGljaCB0aGUgcG93ZXJzIG9mIGFjcXVpc2l0aW9uCiAgICAgICAgICAgICAgICAgICAgYW5kIG9mIHByZXNlcnZhdGlvbiBhcmUgc291Z2h0LjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNi4yIiB1bml0PSJMb2ViIGNoYXAiIC8+IEV2ZXJ5dGhpbmcgd2UgcG9zc2VzcyBzaG91bGQgYmUgZHVseSBjbGFzc2lmaWVkIDsKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGFtb3VudCBvZiBvdXIgcHJvZHVjdGl2ZSBwcm9wZXJ0eSBleGNlZWQgdGhhdCBvZiB0aGUgdW5wcm9kdWN0aXZlLgogICAgICAgICAgICAgICAgICAgIFByb2R1Y2Ugc2hvdWxkIGJlIHNvIGVtcGxveWVkIHRoYXQgd2UgZG8gbm90IHJpc2sgYWxsIG91ciBwb3NzZXNzaW9ucyBhdCBvbmNlLgogICAgICAgICAgICAgICAgICAgIEZvciB0aGUgc2FmZSBrZWVwaW5nIG9mIG91ciBwcm9wZXJ0eSwgd2Ugc2hhbGwgZG8gd2VsbCB0byBhZG9wdCB0aGUgUGVyc2lhbiBhbmQKICAgICAgICAgICAgICAgICAgICBMYWNvbmlhbiBzeXN0ZW1zLiBBdGhlbmlhbiBob3VzZWNyYWZ0IGhhcywgaG93ZXZlciwgc29tZSBhZHZhbnRhZ2VzLiBUaGUKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiBidXlzIGltbWVkaWF0ZWx5IHdpdGggdGhlIHByb2R1Y2Ugb2YgaGlzIHNhbGVzLCBhbmQgdGhlIHNtYWxsZXIKICAgICAgICAgICAgICAgICAgICBob3VzZWhvbGRzIGtlZXAgbm8gaWRsZSBkZXBvc2l0cyBpbiBzdG9yZS48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIG49IjYuMyIgdW5pdD0iTG9lYiBjaGFwIiAvPiBVbmRlciB0aGUgUGVyc2lhbiBzeXN0ZW0sIHRoZQogICAgICAgICAgICAgICAgICAgIG1hc3RlciBoaW1zZWxmIHVuZGVydG9vayB0aGUgZW50aXJlIGRpc3Bvc2l0aW9uIGFuZCBzdXBlcnZpc2lvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBob3VzZWhvbGQsIGZvbGxvd2luZyB0aGUgcHJhY3RpY2Ugd2hpY2gKICAgICAgICAgICAgICAgICAgICBEaW9uIHVzZWQgdG8gcmVtYXJrIGluIERpb255c2l1cy4gTm8gb25lLCBpbmRlZWQsIHRha2VzIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgY2FyZSBvZiBhbm90aGVyJ3MgcHJvcGVydHkgYXMgb2YgaGlzIG93bjsgc28gdGhhdCwgYXMgZmFyIGFzIGlzIHBvc3NpYmxlLAogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjEzNDVhIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IkJla2tlciIgbj0iMSIgdW5pdD0ibGluZSIgLz5lYWNoIG1hbiBvdWdodCB0byBhdHRlbmQgdG8gaGlzIGFmZmFpcnMgaW4gcGVyc29uLiBXZSBtYXkKICAgICAgICAgICAgICAgICAgICBjb21tZW5kIGFsc28gYSBwYWlyIG9mIHNheWluZ3MsIG9uZSBhdHRyaWJ1dGVkIHRvIGEgUGVyc2lhbiBhbmQgdGhlIG90aGVyIHRvIGEKICAgICAgICAgICAgICAgICAgICBMaWJ5YW4uIFRoZSBmb3JtZXIgb24gYmVpbmcgYXNrZWQgd2hhdCBiZXN0IGNvbmRpdGlvbnMgYSBob3JzZSwgcmVwbGllZCAiSGlzCiAgICAgICAgICAgICAgICAgICAgbWFzdGVyJ3MgZXllLiI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBFYy4gICAgICAgICAgICAgICAgICAgICAgICAgMTIiIHZhbGlkPSJ5ZXMiPlhlbi4gRWMuCiAgICAgICAgICAgICAgICAgICAgICAgIDEyPC9iaWJsPi48L25vdGU+IFRoZSBMaWJ5YW4sIHdoZW4gYXNrZWQgd2hhdCBraW5kIG9mIG1hbnVyZSBpcyBiZXN0LAogICAgICAgICAgICAgICAgICAgIGFuc3dlcmVkICJUaGUgbWFzdGVyJ3MgZm9vdHByaW50cy4iPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSI2LjQiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gVGhlIG1hc3RlciBhbmQgbWlzdHJlc3Mgc2hvdWxkLCB0aGVyZWZvcmUsCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBwZXJzb25hbCBzdXBlcnZpc2lvbiwgZWFjaCB0byBoaXMgb3IgaGVyIHNwZWNpYWwgZGVwYXJ0bWVudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBob3VzZWhvbGQgd29yay4gSW4gc21hbGwgaG91c2Vob2xkcywgYW4gb2NjYXNpb25hbCBpbnNwZWN0aW9uIHdpbGwgc3VmZmljZTsgaW4KICAgICAgICAgICAgICAgICAgICBlc3RhdGVzIG1hbmFnZWQgdGhyb3VnaCBzdGV3YXJkcywgaW5zcGVjdGlvbnMgbXVzdCBiZSBmcmVxdWVudC4gRm9yIGluCiAgICAgICAgICAgICAgICAgICAgc3Rld2FyZHNoaXAgYXMgaW4gb3RoZXIgbWF0dGVycyB0aGVyZSBjYW4gYmUgbm8gZ29vZCBjb3B5IHdpdGhvdXQgYSBnb29kCiAgICAgICAgICAgICAgICAgICAgZXhhbXBsZTsgYW5kIGlmIHRoZSBtYXN0ZXIgYW5kIG1pc3RyZXNzIGRvIG5vdCBhdHRlbmQgZGlsaWdlbnRseSB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIGVzdGF0ZSwgdGhlaXIgZGVwdXRpZXMgd2lsbCBjZXJ0YWlubHkgbm90IGRvIHNvLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNi41IiB1bml0PSJMb2ViIGNoYXAiIC8+IE1vcmVvdmVyLCBhcyBzdWNoIGhhYml0cyBhcmUKICAgICAgICAgICAgICAgICAgICBib3RoIGNvbW1lbmRhYmxlIGZvciBtb3JhbCByZWFzb25zIGFuZCBhbHNvIGNvbmR1Y2l2ZSB0byBnb29kIG1hbmFnZW1lbnQsIHRoZQogICAgICAgICAgICAgICAgICAgIG1hc3RlciBhbmQgbWlzdHJlc3Mgd2lsbCBkbyB3ZWxsIHRvIHJpc2UgZWFybGllciB0aGFuIHRoZWlyIHNlcnZhbnRzIGFuZCB0bwogICAgICAgICAgICAgICAgICAgIHJldGlyZSBsYXRlcjsgdG8gdHJlYXQgdGhlaXIgaG9tZSBhcyBhIGNpdHksIGFuZCBuZXZlciBsZWF2ZSBpdCB1bmd1YXJkZWQ7IG5vcgogICAgICAgICAgICAgICAgICAgIGV2ZXIsIGJ5IG5pZ2h0IG9yIGJ5IGRheSwgdG8gcG9zdHBvbmUgYSB0YXNrIHdoaWNoIG91Z2h0IHRvIGJlIGRvbmUuIFJpc2luZwogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBkYXlsaWdodCBpcyBhbHNvIHRvIGJlIGNvbW1lbmRlZDsgaXQgaXMgYSBoZWFsdGh5IGhhYml0LCBhbmQgZ2l2ZXMgbW9yZQogICAgICAgICAgICAgICAgICAgIHRpbWUgZm9yIHRoZSBtYW5hZ2VtZW50IG9mIHRoZSBob3VzZWhvbGQgYXMgd2VsbCBhcyBmb3IgbGliZXJhbAogICAgICAgICAgICAgICAgICAgICAgICBzdHVkaWVzLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNi42IiB1bml0PSJMb2ViIGNoYXAiIC8+IFdlIGhhdmUgcmVtYXJrZWQgdGhhdCBvbiBzbWFsbCBob2xkaW5ncyB0aGUgQXRoZW5pYW4KICAgICAgICAgICAgICAgICAgICBtZXRob2Qgb2YgZGlzcG9zaW5nIG9mIHRoZSBwcm9kdWNlIGlzIGFkdmFudGFnZW91cy48bWlsZXN0b25lIGVkPSJCZWtrZXIiIG49IjIwIiB1bml0PSJsaW5lIiAvPk9uIGxhcmdlIGVzdGF0ZXMsIGFmdGVyIHRoZSBhbW91bnQgZm9yIHRoZSB5ZWFyJ3Mgb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9udGgncyBvdXRsYXkgaGFzIGJlZW4gc2V0IGFwYXJ0LCBpdCBzaG91bGQgYmUgaGFuZGVkIHRvIHRoZSBvdmVyc2VlcnM7IGFuZCBzbwogICAgICAgICAgICAgICAgICAgIGFsc28gd2l0aCBpbXBsZW1lbnRzLCB3aGV0aGVyIGZvciBkYWlseSBvciBmb3Igb2NjYXNpb25hbCB1c2UuIEluIGFkZGl0aW9uLCBhbgogICAgICAgICAgICAgICAgICAgIGluc3BlY3Rpb24gb2YgaW1wbGVtZW50cyBhbmQgc3RvcmVzIHNob3VsZCBiZSBtYWRlIHBlcmlvZGljYWxseSwgc28gdGhhdAogICAgICAgICAgICAgICAgICAgIHJlbWFpbmRlcnMgYW5kIGRlZmljaWVuY2llcyBtYXkgYWxpa2UgYmUgbm90ZWQuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGVkPSJQIiBuPSI2LjciIHVuaXQ9IkxvZWIgY2hhcCIgLz4gSW4gY29uc3RydWN0aW5nIGEgaG9tZXN0ZWFkLAogICAgICAgICAgICAgICAgICAgIHdlIGhhdmUgdG8gcHJvdmlkZSBmb3IgdGhlIHN0b2NrIHdoaWNoIGl0IGlzIHRvIHNoZWx0ZXIsIGFuZCBmb3IgaXRzIGhlYWx0aCBhbmQKICAgICAgICAgICAgICAgICAgICB3ZWxsLWJlaW5nLiBQcm92aWRpbmcgZm9yIHRoZSBzdG9jayBpbnZvbHZlcyBxdWVzdGlvbnMgc3VjaCBhcyB0aGVzZTogV2hhdCB0eXBlCiAgICAgICAgICAgICAgICAgICAgb2YgYnVpbGRpbmcgaXMgYmVzdCBmb3IgdGhlIHN0b3JhZ2Ugb2YgY3JvcHMgYW5kIG9mIGNsb3RoaW5nPyBIb3cgYXJlIHdlIHRvCiAgICAgICAgICAgICAgICAgICAgc3RvcmUgdGhlIGRyeSBjcm9wcywgYW5kIGhvdyB0aGUgbW9pc3Qgb25lcz8gT2YgdGhlIG90aGVyIHN0b2NrLCBob3cgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgbGl2aW5nIHRvIGJlIGhvdXNlZCwgYW5kIGhvdyB0aGUgZGVhZD8gYW5kIHdoYXQgYWNjb21tb2RhdGlvbiBhcmUgd2UgdG8gbWFrZSBmb3IKICAgICAgICAgICAgICAgICAgICBzbGF2ZXMgYW5kIGZyZWUsIGZvciB3b21lbiBhbmQgbWVuLCBmb3IgZm9yZWlnbmVycyBhbmQgZmVsbG93LWNpdGl6ZW5zPyBGb3IKICAgICAgICAgICAgICAgICAgICB3ZWxsLWJlaW5nIGFuZCBoZWFsdGgsIGFnYWluLCB0aGUgaG9tZXN0ZWFkIHNob3VsZCBiZSBhaXJ5IGluIHN1bW1lciwgYW5kIHN1bm55CiAgICAgICAgICAgICAgICAgICAgaW4gd2ludGVyLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBlZD0iUCIgbj0iNi44IiB1bml0PSJMb2ViIGNoYXAiIC8+IEEgaG9tZXN0ZWFkIHBvc3Nlc3NpbmcgdGhlc2UgcXVhbGl0aWVzIHdvdWxkIGJlIGxvbmdlcgogICAgICAgICAgICAgICAgICAgIHRoYW4gaXQgaXMgZGVlcDsgYW5kIGl0cyBtYWluIGZyb250IHdvdWxkIGZhY2UgdGhlIHNvdXRoLiBPbiBsYXJnZSBlc3RhdGVzLAogICAgICAgICAgICAgICAgICAgIG1vcmVvdmVyLCBpdCBzZWVtcyB3b3J0aCB3aGlsZSB0byBpbnN0YWwgYXMgcG9ydGVyIGEgbWFuIGluY2FwYWJsZSBvZiBvdGhlcgogICAgICAgICAgICAgICAgICAgIHdvcmssIHRvIGtlZXAgaGlzIGV5ZSBvbiB3aGF0IHBhc3NlcyBpbiBhbmQgb3V0LiA8bWlsZXN0b25lIG49IjEzNDViIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IkJla2tlciIgbj0iMSIgdW5pdD0ibGluZSIgLz5UaGF0IGltcGxlbWVudHMKICAgICAgICAgICAgICAgICAgICBtYXkgYmUgcmVhZHkgZm9yIHVzZSwgdGhlIExhY29uaWFuIHByYWN0aWNlIHNob3VsZCBiZSBmb2xsb3dlZC4gRWFjaCBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBrZXB0IGluIGl0cyBvd24gcGxhY2U7IHRodXMgaXQgd2lsbCBhbHdheXMgYmUgdG8gaGFuZCwgYW5kIG5vdCByZXF1aXJlCiAgICAgICAgICAgICAgICBzZWVraW5nLjwvcD4KCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzNDNhIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.1343a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMS4xIiB1bml0PSJMb2ViIGNoYXAiIC8+IEJldHdlZW4gSG91c2VjcmFmdCAodGhlIGFydCBvZiBnb3Zlcm5pbmcgYSBIb3VzZWhvbGQgb3IgSG9tZSkgYW5kIFN0YXRlY3JhZnQKICAgICAgICAgICAgICAgICAgICAodGhlIGFydCBvZiBnb3Zlcm5pbmcgYSBOYXRpb24pIHRoZXJlIGFyZSBkaWZmZXJlbmNlcyBjb3JyZXNwb25kaW5nIHRvIHRob3NlCiAgICAgICAgICAgICAgICAgICAgYmV0d2VlbiB0aGUgdHdvIGtpbmRzIG9mIGNvbW11bml0eSBvdmVyIHdoaWNoIHRoZXkgc2V2ZXJhbGx5IHByZXNpZGUuIFRoZXJlIGlzLAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIHRoaXMgZnVydGhlciBkaWZmZXJlbmNlOiB0aGF0IHdoZXJlYXMgdGhlIGdvdmVybm1lbnQgb2YgYSBuYXRpb24gaXMgaW4KICAgICAgICAgICAgICAgICAgICBtYW55IGhhbmRzLCBhIGhvdXNlaG9sZCBoYXMgYnV0IGEgc2luZ2xlIHJ1bGVyLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgc29tZSBhcnRzIGFyZSBkaXZpZGVkIGludG8gdHdvIHNlcGFyYXRlIGJyYW5jaGVzLCBvbmUgY29uY2VybmVkIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgbWFraW5nIG9mIGFuIG9iamVjdOKAlGZvciBleGFtcGxlIGEgbHlyZSBvciBhIGZsdXRl4oCUYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIHdpdGggaXRzIHVzZSB3aGVuIG1hZGUuIFN0YXRlY3JhZnQgb24gdGhlIG90aGVyIGhhbmQgc2hvd3MgdXMgaG93IHRvIGJ1aWxkCiAgICAgICAgICAgICAgICAgICAgdXAgYSBuYXRpb24gZnJvbSBpdHMgYmVnaW5uaW5nLCBhcyB3ZWxsIGFzIGhvdyB0byBvcmRlciByaWdodGx5IGEgbmF0aW9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBhbHJlYWR5IGV4aXN0czsgZnJvbSB3aGljaCB3ZSBpbmZlciB0aGF0IEhvdXNlY3JhZnQgYWxzbyB0ZWxscyB1cyBmaXJzdCBob3cgdG8KICAgICAgICAgICAgICAgICAgICBhY3F1aXJlIGEgaG91c2Vob2xkIGFuZCB0aGVuIGhvdyB0byBjb25kdWN0IGl0cyBhZmZhaXJzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjEuMiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBCeSBhIE5hdGlvbiB3ZQogICAgICAgICAgICAgICAgICAgIG1lYW4gYW4gYXNzZW1ibGFnZSBvZiBob3VzZXMsIGxhbmRzLCBhbmQgcHJvcGVydHkgc3VmZmljaWVudCB0byBlbmFibGUgdGhlCiAgICAgICAgICAgICAgICAgICAgaW5oYWJpdGFudHMgdG8gbGVhZCBhIGNpdmlsaXplZCBsaWZlLiBUaGlzIGlzIHByb3ZlZCBieSB0aGUgZmFjdCB0aGF0IHdoZW4gc3VjaAogICAgICAgICAgICAgICAgICAgIGEgbGlmZSBpcyBubyBsb25nZXIgcG9zc2libGUgZm9yIHRoZW0sIHRoZSB0aWUgaXRzZWxmIHdoaWNoIHVuaXRlcyB0aGVtIGlzCiAgICAgICAgICAgICAgICAgICAgZGlzc29sdmVkLiBNb3Jlb3ZlciwgaXQgaXMgd2l0aCBzdWNoIGEgbGlmZSBpbiB2aWV3IHRoYXQgdGhlIGFzc29jaWF0aW9uIGlzCiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxseSBmb3JtZWQ7IGFuZCB0aGUgb2JqZWN0IGZvciB3aGljaCBhIHRoaW5nIGV4aXN0cyBhbmQgaGFzIGNvbWUgaW50bwogICAgICAgICAgICAgICAgICAgIGJlaW5nIGlzIGluIGZhY3QgdGhlIHZlcnkgZXNzZW5jZSBvZiB0aGF0IHBhcnRpY3VsYXIgdGhpbmcuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZyb20gdGhpcyBkZWZpbml0aW9uIG9mIGEgTmF0aW9uLCBpdCBpcyBldmlkZW50IHRoYXQgdGhlIGFydCBvZgogICAgICAgICAgICAgICAgICAgIEhvdXNlY3JhZnQgaXMgb2xkZXIgdGhhbiB0aGF0IG9mIFN0YXRlY3JhZnQsIHNpbmNlIHRoZSBIb3VzZWhvbGQsIHdoaWNoIGl0CiAgICAgICAgICAgICAgICAgICAgY3JlYXRlcywgaXMgb2xkZXI7IGJlaW5nIGEgY29tcG9uZW50IHBhcnQgb2YgdGhlIE5hdGlvbiBjcmVhdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRlY3JhZnQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFjY29yZGluZ2x5IHdlIG11c3QgY29uc2lkZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbmF0dXJlIG9mIEhvdXNlY3JhZnQsIGFuZCB3aGF0IHRoZSBIb3VzZWhvbGQsIHdoaWNoIGl0IGNyZWF0ZXMsIGFjdHVhbGx5CiAgICAgICAgICAgICAgICAgICAgICAgIGlzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjIuMSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBUaGUgY29tcG9uZW50IHBhcnRzIG9mIGEgaG91c2Vob2xkIGFyZSAobCkgaHVtYW4gYmVpbmdzLCBhbmQgKDIpIGdvb2RzIGFuZAogICAgICAgICAgICAgICAgICAgIGNoYXR0ZWxzLiBBbmQgYXMgaG91c2Vob2xkcyBhcmUgbm8gZXhjZXB0aW9uIHRvIHRoZSBydWxlIHRoYXQgdGhlIG5hdHVyZSBvZiBhCiAgICAgICAgICAgICAgICAgICAgdGhpbmcgaXMgZmlyc3Qgc3R1ZGllZCBpbiBpdHMgYmFyZXN0IGFuZCBzaW1wbGVzdCBmb3JtLDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz53ZSB3aWxsIGZvbGxvdyBIZXNpb2QgYW5kIGJlZ2luIGJ5IHBvc3R1bGF0aW5nCiAgICAgICAgICAgICAgICAgICAgIkhvbWVzdGVhZCBmaXJzdCwgYW5kIGEgd29tYW47IGEgcGxvdWdoLW94IGhhcmR5IHRvIGZ1cnJvdy4iIEZvciB0aGUgc3RlYWRpbmcKICAgICAgICAgICAgICAgICAgICB0YWtlcyBwcmVjZWRlbmNlIGFtb25nIG91ciBwaHlzaWNhbCBuZWNlc3NpdGllcywgYW5kIHRoZSB3b21hbiBhbW9uZyBvdXIgZnJlZQogICAgICAgICAgICAgICAgICAgIGFzc29jaWF0ZXMuIEl0IGlzLCB0aGVyZWZvcmUsIG9uZSBvZiB0aGUgdGFza3Mgb2YgSG9tZWNyYWZ0IHRvIHNldCBpbiBvcmRlciB0aGUKICAgICAgICAgICAgICAgICAgICByZWxhdGlvbiBiZXR3ZWVuIG1hbiBhbmQgd29tYW47IGluIG90aGVyIHdvcmRzLCB0byBzZWUgdGhhdCBpdCBpcyB3aGF0IGl0IG91Z2h0CiAgICAgICAgICAgICAgICAgICAgdG8gYmUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.1343b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4yIiB1bml0PSJMb2ViIGNoYXAiIC8+IE9mIG9jY3VwYXRpb25zIGF0dGVuZGFudCBvbiBvdXIgZ29vZHMgYW5kIGNoYXR0ZWxzLCB0aG9zZSBjb21lIGZpcnN0IHdoaWNoCiAgICAgICAgICAgICAgICAgICAgYXJlIG5hdHVyYWwuIEFtb25nIHRoZXNlIHByZWNlZGVuY2UgaXMgZ2l2ZW4gdG8gdGhlIG9uZSB3aGljaCBjdWx0aXZhdGVzIHRoZQogICAgICAgICAgICAgICAgICAgIGxhbmQ7IHRob3NlIGxpa2UgbWluaW5nLCB3aGljaCBleHRyYWN0IHdlYWx0aCBmcm9tIGl0LCB0YWtlIHRoZSBzZWNvbmQgcGxhY2UuCiAgICAgICAgICAgICAgICAgICAgQWdyaWN1bHR1cmUgaXMgdGhlIG1vc3QgaG9uZXN0IG9mIGFsbCBzdWNoIG9jY3VwYXRpb25zOyBzZWVpbmcgdGhhdCB0aGUgd2VhbHRoCiAgICAgICAgICAgICAgICAgICAgaXQgYnJpbmdzIGlzIG5vdCBkZXJpdmVkIGZyb20gb3RoZXIgbWVuLiBIZXJlaW4gaXQgaXMgZGlzdGluZ3Vpc2hlZCBmcm9tIHRyYWRlCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSB3YWdlLWVhcm5pbmcgZW1wbG95bWVudHMsIHdoaWNoIGFjcXVpcmUgd2VhbHRoIGZyb20gb3RoZXJzIGJ5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY29uc2VudDsgYW5kIGZyb20gd2FyLCB3aGljaCB3cmluZ3MgaXQgZnJvbSB0aGVtIHBlcmZvcmNlLiBJdCBpcyBhbHNvIGEgbmF0dXJhbAogICAgICAgICAgICAgICAgICAgIG9jY3VwYXRpb247IHNpbmNlIGJ5IE5hdHVyZSdzIGFwcG9pbnRtZW50IGFsbCBjcmVhdHVyZXMgcmVjZWl2ZSBzdXN0ZW5hbmNlIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGVpciBtb3RoZXIsIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQzYiIgdW5pdD0ic2VjdGlvbiIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.1343b.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPmFuZCBtYW5raW5kIGxpa2UgdGhlIHJlc3QgZnJvbSB0aGVpciBjb21tb24gbW90aGVyIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBlYXJ0aC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['1.1343b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4zIiB1bml0PSJMb2ViIGNoYXAiIC8+IEFuZCBiZXNpZGVzIGFsbCB0aGlzLCBhZ3JpY3VsdHVyZSBjb250cmlidXRlcyBub3RhYmx5IHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIG1ha2luZyBvZiBhIG1hbmx5IGNoYXJhY3RlcjsgYmVjYXVzZSwgdW5saWtlIHRoZSBtZWNoYW5pY2FsIGFydHMsIGl0IGRvZXMKICAgICAgICAgICAgICAgICAgICBub3QgY3JpcHBsZSBhbmQgd2Vha2VuIHRoZSBib2RpZXMgb2YgdGhvc2UgZW5nYWdlZCBpbiBpdCwgYnV0IGludXJlcyB0aGVtIHRvCiAgICAgICAgICAgICAgICAgICAgZXhwb3N1cmUgYW5kIHRvaWwgYW5kIGludmlnb3JhdGVzIHRoZW0gdG8gZmFjZSB0aGUgcGVyaWxzIG9mIHdhci4gRm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGZhcm1lcidzIHBvc3Nlc3Npb25zLCB1bmxpa2UgdGhvc2Ugb2Ygb3RoZXIgbWVuLCBsaWUgb3V0c2lkZSB0aGUgY2l0eSdzCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVuY2VzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjMuMSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBXaGVuIHdlIHR1cm4gb3VyIGF0dGVudGlvbiB0byB0aGUgaHVtYW4gcGFydCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBob3VzZWhvbGQsIGl0IGlzIHRoZSB3b21hbiB3aG8gbWFrZXMgdGhlIGZpcnN0IGNsYWltIHVwb24gaXQ7ICZsdDtmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgbmF0dXJhbCBjb21lcyBmaXJzdCwgYXMgd2UgaGF2ZSBzYWlkLCZndDsgYW5kIG5vdGhpbmcgaXMgbW9yZSBuYXR1cmFsIHRoYW4KICAgICAgICAgICAgICAgICAgICB0aGUgdGllIGJldHdlZW4gZmVtYWxlIGFuZCBtYWxlLiBGb3Igd2UgaGF2ZSBlbHNld2hlcmUgbGFpZCBkb3duIHRoZQogICAgICAgICAgICAgICAgICAgIHByZW1pc3M8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIFBvbC4gMS4xMjUyYS4xIiB2YWxpZD0ieWVzIj5BcmlzdG90LiBQb2wuIDEuMTwvYmlibD4uPC9ub3RlPiB0aGF0IE5hdHVyZSBpcyBpbnRlbnQgb24gbXVsdGlwbHlpbmcgc2V2ZXJhbGx5IGhlciB0eXBlczsKICAgICAgICAgICAgICAgICAgICBhbmQgdGhpcyBpcyB0cnVlIG9mIGV2ZXJ5IGFuaW1hbCBpbiBwYXJ0aWN1bGFyLiBOZWl0aGVyIHRoZSBmZW1hbGUsIGhvd2V2ZXIsIGNhbgogICAgICAgICAgICAgICAgICAgIGVmZmVjdCB0aGlzIHdpdGhvdXQgdGhlIG1hbGUsIG5vciB0aGUgbWFsZSB3aXRob3V0IHRoZSBmZW1hbGU7IHdoZW5jZSB0aGUgdW5pb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc2V4ZXMgaGFzIG9mIG5lY2Vzc2l0eSBhcmlzZW4uPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gUG9sLiAxLjEyNTJhLjEiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIFBvbC4gMS4xPC9iaWJsPi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSIzLjIiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gTm93IGFtb25nIHRoZSBsb3dlciBhbmltYWxzLCB0aGlzIHVuaW9uIGlzCiAgICAgICAgICAgICAgICAgICAgaXJyYXRpb25hbCBpbiBjaGFyYWN0ZXI7IGl0IGV4aXN0cyBtZXJlbHkgZm9yIHRoZSBwdXJwb3NlIG9mIHByb2NyZWF0aW9uLCBhbmQKICAgICAgICAgICAgICAgICAgICBsYXN0cyBvbmx5IHNvIGxvbmcgYXMgdGhlIHBhcmVudHMgYXJlIG9jY3VwaWVkIGluIHByb2R1Y2luZyB0aGVpciBicm9vZC4gSW4gdGFtZQogICAgICAgICAgICAgICAgICAgIGFuaW1hbHMsIG9uIHRoZSBvdGhlciBoYW5kLCBhbmQgdGhvc2Ugd2hpY2ggcG9zc2VzcyBhIGdyZWF0ZXIgc2hhcmUgb2YKICAgICAgICAgICAgICAgICAgICBpbnRlbGxpZ2VuY2UsIGl0IGhhcyBhc3N1bWVkIGEgbW9yZSBjb21wbGV4IGZvcm07IGZvciBpbiB0aGVpciBjYXNlIHdlIHNlZSBtb3JlCiAgICAgICAgICAgICAgICAgICAgZXhhbXBsZXMgb2YgbXV0dWFsIGhlbHAsIGdvb2R3aWxsLCBhbmQgY28tb3BlcmF0aW9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjMuMyIgdW5pdD0iTG9lYiBjaGFwIiAvPiBJdCBpcywgaG93ZXZlciwgaW4gdGhlIGh1bWFuIHNwZWNpZXMgdGhhdCB0aGlzIGNvbXBsZXhpdHkKICAgICAgICAgICAgICAgICAgICBpcyBtb3N0IG1hcmtlZDsgc2luY2UgdGhlIGNvLW9wZXJhdGlvbiBiZXR3ZWVuIHdvbWFuIGFuZCBtYW4gYWltcyBub3QgbWVyZWx5IGF0CiAgICAgICAgICAgICAgICAgICAgZXhpc3RlbmNlLCBidXQgYXQgYSBoYXBweSA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMjAiIHVuaXQ9ImxpbmUiIC8+ZXhpc3RlbmNlLgogICAgICAgICAgICAgICAgICAgIE5vciBkbyBtYW5raW5kIGJlZ2V0IGNoaWxkcmVuIG1lcmVseSB0byBwYXkgdGhlIHNlcnZpY2UgdGhleSBvd2UgdG8gTmF0dXJlLCBidXQKICAgICAgICAgICAgICAgICAgICBhbHNvIHRoYXQgdGhleSBtYXkgdGhlbXNlbHZlcyByZWNlaXZlIGEgYmVuZWZpdDsgZm9yIHRoZSB0b2lsIHRoZXkgdW5kZXJnbyB3aGlsZQogICAgICAgICAgICAgICAgICAgIHRoZXkgYXJlIHN0cm9uZyBhbmQgdGhlaXIgb2Zmc3ByaW5nIGlzIHN0aWxsIHdlYWsgaXMgcmVwYWlkIGJ5IHRoYXQgb2Zmc3ByaW5nCiAgICAgICAgICAgICAgICAgICAgd2hlbiBpdCBpbiB0dXJuIGlzIGdyb3duIHN0cm9uZyBhbmQgdGhlIHBhcmVudHMgYnkgcmVhc29uIG9mIGFnZSBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgd2Vhay48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['1.1344a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMy40IiB1bml0PSJMb2ViIGNoYXAiIC8+IEF0IHRoZSBzYW1lIHRpbWUgTmF0dXJlLCBieSB0aGlzIGN5Y2xlIG9mIGNoYW5nZXMsCiAgICAgICAgICAgICAgICAgICAgZnVsZmlsbHMgaGVyIHB1cnBvc2Ugb2YgcGVycGV0dWF0aW5nIGV4aXN0ZW5jZTsgcHJlc2VydmluZyB0aGUgdHlwZSB3aGVuIHNoZSBpcwogICAgICAgICAgICAgICAgICAgIHVuYWJsZSB0byBwcmVzZXJ2ZSB0aGUgaW5kaXZpZHVhbC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIEdBIDczMWIiPkFyaXN0b3QuIERlIEdlbi4gQW4uIDczMWIuPC9iaWJsPjwvbm90ZT4gQW5kIHNvCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGlzIHB1cnBvc2UgaW4gdmlldyBEaXZpbmUgUHJvdmlkZW5jZSBoYXMgZmFzaGlvbmVkIHRoZSBuYXR1cmUgb2YgbWFuIGFuZAogICAgICAgICAgICAgICAgICAgIG9mIHdvbWFuIGZvciB0aGVpciBwYXJ0bmVyc2hpcC4gRm9yIHRoZXkgYXJlIGRpc3Rpbmd1aXNoZWQgZnJvbSBlYWNoIG90aGVyIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIHBvc3Nlc3Npb24gb2YgZmFjdWx0aWVzIG5vdCBhZGFwdGVkIGluIGV2ZXJ5IGNhc2UgdG8gdGhlIHNhbWUgdGFza3MsIGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIHNvbWUgY2FzZXMgZm9yIG9wcG9zaXRlIG9uZXMsIHRob3VnaCBjb250cmlidXRpbmcgdG8gdGhlIHNhbWUgZW5kLiBGb3IKICAgICAgICAgICAgICAgICAgICBQcm92aWRlbmNlIG1hZGUgbWFuIHN0cm9uZ2VyIGFuZCB3b21hbiB3ZWFrZXIsIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIEdBIDczMWIiPkFyaXN0b3QuIERlIEdlbi4gQW4uIDczMWIuPC9iaWJsPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQ0YSIgdW5pdD0ic2VjdGlvbiIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.1344a.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPnNvIHRoYXQgaGUgaW4KICAgICAgICAgICAgICAgICAgICB2aXJ0dWUgb2YgaGlzIG1hbmx5IHByb3dlc3MgbWF5IGJlIG1vcmUgcmVhZHkgdG8gZGVmZW5kIHRoZSBob21lLCBhbmQgc2hlLCBieQogICAgICAgICAgICAgICAgICAgIHJlYXNvbiBvZiBoZXIgdGltaWQgbmF0dXJlLCBtb3JlIHJlYWR5IHRvIGtlZXAgd2F0Y2ggb3ZlciBpdDsgYW5kIHdoaWxlIGhlCiAgICAgICAgICAgICAgICAgICAgYnJpbmdzIGluIGZyZXNoIHN1cHBsaWVzIGZyb20gd2l0aG91dCwgc2hlIG1heSBrZWVwIHNhZmUgd2hhdCBsaWVzIHdpdGhpbi4gSW4KICAgICAgICAgICAgICAgICAgICBoYW5kaWNyYWZ0cyBhZ2Fpbiwgd29tYW4gd2FzIGdpdmVuIGEgc2VkZW50YXJ5IHBhdGllbmNlLCB0aG91Z2ggZGVuaWVkIHN0YW1pbmEKICAgICAgICAgICAgICAgICAgICBmb3IgZW5kdXJhbmNlIG9mIGV4cG9zdXJlOyB3aGlsZSBtYW4sIHRob3VnaCBpbmZlcmlvciB0byBoZXIgaW4gcXVpZXQKICAgICAgICAgICAgICAgICAgICBlbXBsb3ltZW50cywgaXMgZW5kb3dlZCB3aXRoIHZpZ29yIGZvciBldmVyeSBhY3RpdmUgb2NjdXBhdGlvbi4gSW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdGlvbiBvZiBjaGlsZHJlbiBib3RoIHNoYXJlIGFsaWtlOyBidXQgZWFjaCBtYWtlcyBhIGRpZmZlcmVudCBjb250cmlidXRpb24KICAgICAgICAgICAgICAgICAgICB0byB0aGVpciB1cGJyaW5naW5nLiBJdCBpcyB0aGUgbW90aGVyIHdobyBudXJ0dXJlcywgYW5kIHRoZSBmYXRoZXIgd2hvCiAgICAgICAgICAgICAgICAgICAgICAgIGVkdWNhdGVzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.1344a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iNC4xIiB1bml0PSJMb2ViIGNoYXAiIC8+IFdlIGJlZ2luIHRoZW4gd2l0aCB0aGUgcnVsZXMgdGhhdCBzaG91bGQgZ292ZXJuIGEgbWFuJ3MKICAgICAgICAgICAgICAgICAgICB0cmVhdG1lbnQgb2YgaGlzIHdpZmUuIEFuZCB0aGUgZmlyc3Qgb2YgdGhlc2UgZm9yYmlkcyBoaW0gdG8gZG8gaGVyIHdyb25nOyBmb3IKICAgICAgICAgICAgICAgICAgICBpZiBoZSBvYnNlcnZlcyB0aGlzLCBoZSBpcyBub3QgbGlrZWx5IGhpbXNlbGYgdG8gc3VmZmVyIHdyb25nIGF0IGhlciBoYW5kcy4gQXMKICAgICAgICAgICAgICAgICAgICB0aGUgUHl0aGFnb3JlYW5zIGRlY2xhcmUsIGV2ZW4gdGhlIGNvbW1vbiBydWxlIG9yIGN1c3RvbSBvZiBtYW5raW5kIHRodXMKICAgICAgICAgICAgICAgICAgICBvcmRhaW5zLCBmb3JiaWRkaW5nIGFsbCB3cm9uZyB0byBhIHdpZmUgYXMgc3RyaW5nZW50bHkgYXMgdGhvdWdoIHNoZSB3ZXJlIGEKICAgICAgICAgICAgICAgICAgICBzdXBwbGlhbnQgd2hvbSBvbmUgaGFzIHJhaXNlZCBmcm9tIHRoZSBoZWFydGhzdG9uZS4gQW5kIGEgbWFuIGRvZXMgd3JvbmcgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgd2lmZSB3aGVuIGhlIGFzc29jaWF0ZXMgd2l0aCBvdGhlciB3b21lbi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSI0LjIiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gQXMgcmVnYXJkcyB0aGUgaW50ZXJjb3Vyc2Ugb2YKICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZSwgd2l2ZXMgc2hvdWxkIG5laXRoZXIgaW1wb3J0dW5lIHRoZWlyIGh1c2JhbmRzLCBub3IgYmUgcmVzdGxlc3MgaW4KICAgICAgICAgICAgICAgICAgICB0aGVpciBhYnNlbmNlOyBidXQgYSBtYW4gc2hvdWxkIGFjY3VzdG9tIGhpcyB3aWZlIHRvIGJlIGNvbnRlbnQgd2hldGhlciBoZSBpcyBhdAogICAgICAgICAgICAgICAgICAgIGhvbWUgb3IgYXdheS4gR29vZCBhbHNvIGlzIHRoZSBhZHZpY2Ugb2YgSGVzaW9kOiA8Y2l0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InZlcnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJkYWN0eWxpYyI+VGFrZSB0aGVlIGEgbWFpZGVuIHRvIHdpZmUsIGFuZCB0ZWFjaCBoZXIgd2F5cyBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NyZXRpb24uPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZXMuIFdEIDY5OSIgdmFsaWQ9InllcyI+SGVzLiBXRCA2OTk8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgPC9jaXQ+IEZvciBkaWZmZXJlbmNlcyBvZiB3YXlzIGFuZCBoYWJpdHMgYXJlIGxpdHRsZSBjb25kdWNpdmUgdG8KICAgICAgICAgICAgICAgICAgICAgICAgYWZmZWN0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InZlcnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJkYWN0eWxpYyI+VGFrZSB0aGVlIGEgbWFpZGVuIHRvIHdpZmUsIGFuZCB0ZWFjaCBoZXIgd2F5cyBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NyZXRpb24uPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iIG1ldD0iZGFjdHlsaWMiPlRha2UgdGhlZSBhIG1haWRlbiB0byB3aWZlLCBhbmQgdGVhY2ggaGVyIHdheXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNjcmV0aW9uLjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGVzLiBXRCA2OTkiIHZhbGlkPSJ5ZXMiPkhlcy4gV0QgNjk5PC9iaWJsPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjQuMyIgdW5pdD0iTG9lYiBjaGFwIiAvPiBBcyByZWdhcmRzIGFkb3JubWVudDogaXQgaXMgbm90IHdlbGw8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMjAiIHVuaXQ9ImxpbmUiIC8+dGhhdCBzb3VscyBzaG91bGQgYXBwcm9hY2ggb25lIGFub3RoZXIgaW4KICAgICAgICAgICAgICAgICAgICBib3Jyb3dlZCBwbHVtZXMsIG5vciBpcyBpdCB3ZWxsIGluIHRoZSBjYXNlIG9mIGJvZGllcy4gSW50ZXJjb3Vyc2Ugd2hpY2ggZGVwZW5kcwogICAgICAgICAgICAgICAgICAgICZsdDtmb3IgaXRzIGNoYXJtJmd0OyB1cG9uIG91dHdhcmQgYWRvcm5tZW50IGRpZmZlcnMgaW4gbm8gcmVzcGVjdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhhdCBvZiBmaWd1cmVzIG9uIHRoZSBzdGFnZSBpbiB0aGVpciBjb252ZW50aW9uYWwgYXR0aXJlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.1344b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iNS4xIiB1bml0PSJMb2ViIGNoYXAiIC8+IE9mIHByb3BlcnR5LCB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBhbmQgbW9zdCBpbmRpc3BlbnNhYmxlIGtpbmQgaXMgdGhhdCB3aGljaCBpcyBhbHNvIGJlc3QgYW5kIG1vc3QgYW1lbmFibGUKICAgICAgICAgICAgICAgICAgICB0byBIb3VzZWNyYWZ0OyBhbmQgdGhpcyBpcyB0aGUgaHVtYW4gY2hhdHRlbC4gT3VyIGZpcnN0IHN0ZXAgdGhlcmVmb3JlIG11c3QgYmUKICAgICAgICAgICAgICAgICAgICB0byBwcm9jdXJlIGdvb2Qgc2xhdmVzLiBPZiBzbGF2ZXMgdGhlcmUgYXJlIHR3byBraW5kczsgdGhvc2UgaW4gcG9zaXRpb25zIG9mCiAgICAgICAgICAgICAgICAgICAgdHJ1c3QsIGFuZCB0aGUgbGFib3JlcnMuIEFuZCBzaW5jZSBpdCBpcyBtYXR0ZXIgb2YgZXhwZXJpZW5jZSB0aGF0IHRoZSBjaGFyYWN0ZXIKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgeW91bmcgY2FuIGJlIG1vdWxkZWQgYnkgdHJhaW5pbmcsIHdoZW4gd2UgcmVxdWlyZSB0byBjaGFyZ2Ugc2xhdmVzIHdpdGgKICAgICAgICAgICAgICAgICAgICB0YXNrcyBiZWZpdHRpbmcgdGhlIGZyZWUsIHdlIGhhdmUgbm90IG9ubHkgdG8gcHJvY3VyZSB0aGUgc2xhdmVzLCBidXQgdG8gYnJpbmcKICAgICAgICAgICAgICAgICAgICB0aGVtIHVwICZsdDtmb3IgdGhlIHRydXN0Jmd0Oy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSI1LjIiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gSW4gb3VyIGludGVyY291cnNlIHdpdGggc2xhdmVzIHdlIG11c3QKICAgICAgICAgICAgICAgICAgICBuZWl0aGVyIHN1ZmZlciB0aGVtIHRvIGJlIGluc29sZW50IG5vciB0cmVhdCB0aGVtIHdpdGggY3J1ZWx0eS4gQSBzaGFyZSBvZiBob25vcgogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBnaXZlbiB0byB0aG9zZSB3aG8gYXJlIGRvaW5nIG1vcmUgb2YgYSBmcmVlbWFuJ3Mgd29yaywgYW5kIGFidW5kYW5jZQogICAgICAgICAgICAgICAgICAgIG9mIGZvb2QgdG8gdGhvc2Ugd2hvIGFyZSBsYWJvcmluZyB3aXRoIHRoZWlyIGhhbmRzLiBBbmQgd2hlcmVhcyB0aGUgdXNlIG9mIHdpbmUKICAgICAgICAgICAgICAgICAgICByZW5kZXJzIGV2ZW4gZnJlZSBtZW4gaW5zb2xlbnQsIHNvIHRoYXQgaW4gbWFueSBjb3VudHJpZXMgdGhleSB0b28gcmVmcmFpbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgaXTigJRhcywgZm9yIGluc3RhbmNlLCB0aGUgQ2FydGhhZ2luaWFucyBkbyB3aGVuIHRoZXkgYXJlIG9uCiAgICAgICAgICAgICAgICAgICAgY2FtcGFpZ27igJRpdCBmb2xsb3dzIHRoYXQgd2UgbXVzdCBlaXRoZXIgZGVueSB3aW5lIHRvIHNsYXZlcwogICAgICAgICAgICAgICAgICAgIGFsdG9nZXRoZXIsIG9yIHJlc2VydmUgaXQgZm9yIHJhcmUgb2NjYXNpb25zLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjUuMyIgdW5pdD0iTG9lYiBjaGFwIiAvPiBXZSBtYXkgYXBwb3J0aW9uIHRvIG91cgogICAgICAgICAgICAgICAgICAgIHNsYXZlcyAoMSkgd29yaywgKDIpIGNoYXN0aXNlbWVudCwgYW5kICgzKSBmb29kLiBJZiBtZW4gYXJlIGdpdmVuIGZvb2QsIGJ1dCBubwogICAgICAgICAgICAgICAgICAgIGNoYXN0aXNlbWVudCBub3IgYW55IHdvcmssIHRoZXkgYmVjb21lIGluc29sZW50LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTM0NGIiIHVuaXQ9InNlY3Rpb24iIC8+PC90cmFuc2xhdGlvbj4="
translation['1.1344b.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPklmIHRoZXkgYXJlIG1hZGUKICAgICAgICAgICAgICAgICAgICB0byB3b3JrLCBhbmQgYXJlIGNoYXN0aXNlZCwgYnV0IHN0aW50ZWQgb2YgdGhlaXIgZm9vZCwgc3VjaCB0cmVhdG1lbnQgaXMKICAgICAgICAgICAgICAgICAgICBvcHByZXNzaXZlLCBhbmQgc2FwcyB0aGVpciBzdHJlbmd0aC4gVGhlIHJlbWFpbmluZyBhbHRlcm5hdGl2ZSwgdGhlcmVmb3JlLCBpcyB0bwogICAgICAgICAgICAgICAgICAgIGdpdmUgdGhlbSB3b3JrLCBhbmQgYSBzdWZmaWNpZW5jeSBvZiBmb29kLiBVbmxlc3Mgd2UgcGF5IG1lbiwgd2UgY2Fubm90IGNvbnRyb2wKICAgICAgICAgICAgICAgICAgICB0aGVtOyBhbmQgZm9vZCBpcyBhIHNsYXZlJ3MgcGF5LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5TbGF2ZXMsIGFnYWluLAogICAgICAgICAgICAgICAgICAgIGFyZSBubyBleGNlcHRpb24gdG8gdGhlIHJ1bGUgdGhhdCBtZW4gYmVjb21lIHdvcnNlIHdoZW4gYmV0dGVyIGNvbmR1Y3QgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgZm9sbG93ZWQgYnkgYmV0dGVyIHRyZWF0bWVudCwgYnV0IHZpcnR1ZSBhbmQgdmljZSByZW1haW4gYWxpa2UgdW5yZXdhcmRlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.1344b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iNS40IiB1bml0PSJMb2ViIGNoYXAiIC8+IEFjY29yZGluZ2x5IHdlIG11c3Qga2VlcCB3YXRjaAogICAgICAgICAgICAgICAgICAgIG92ZXIgb3VyIHdvcmtlcnMsIHN1aXRpbmcgb3VyIGRpc3BlbnNhdGlvbnMgYW5kIGluZHVsZ2VuY2VzIHRvIHRoZWlyIGRlc2VydDsKICAgICAgICAgICAgICAgICAgICB3aGV0aGVyIGl0IGJlIGZvb2Qgb3IgY2xvdGhpbmcsIGxlaXN1cmUgb3IgY2hhc3Rpc2VtZW50IHRoYXQgd2UgYXJlCiAgICAgICAgICAgICAgICAgICAgYXBwb3J0aW9uaW5nLiBCb3RoIGluIHRoZW9yeSBhbmQgaW4gcHJhY3RpY2Ugd2UgbXVzdCB0YWtlIGZvciBvdXIgbW9kZWwgYQogICAgICAgICAgICAgICAgICAgIHBoeXNpY2lhbidzIGZyZWVkb20gaW4gcHJlc2NyaWJpbmcgaGlzIG1lZGljaW5lczsgb2JzZXJ2aW5nIGF0IHRoZSBzYW1lIHRpbWUKICAgICAgICAgICAgICAgICAgICB0aGF0IGZvb2QgZGlmZmVycyBmcm9tIG1lZGljaW5lIGluIHRoYXQgaXQgcmVxdWlyZXMgdG8gYmUgY29uc3RhbnRseQogICAgICAgICAgICAgICAgICAgICAgICBhZG1pbmlzdGVyZWQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iNS41IiB1bml0PSJMb2ViIGNoYXAiIC8+IFRoZSBiZXN0IGxhYm9yZXJzIHdpbGwgYmUgZnVybmlzaGVkIGJ5IHRob3NlIHJhY2VzIG9mCiAgICAgICAgICAgICAgICAgICAgbWFua2luZCB3aGljaCBhcmUgbmVpdGhlciB3aG9sbHkgc3Bpcml0bGVzcyBub3IgeWV0IG92ZXJib2xkLiBFYWNoIGV4dHJlbWUgaGFzCiAgICAgICAgICAgICAgICAgICAgaXRzIHZpY2U7IHRoZSBzcGlyaXRsZXNzIGNhbm5vdCBlbmR1cmUgaGFyZCBsYWJvciwgYW5kIHRoZSBoaWdoLXNwaXJpdGVkIHdpbGwKICAgICAgICAgICAgICAgICAgICBub3QgcmVhZGlseSBicm9vayBjb250cm9sLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjUuNiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBFdmVyeSBzbGF2ZSBzaG91bGQgaGF2ZSBiZWZvcmUgaGlzIGV5ZXMgYQogICAgICAgICAgICAgICAgICAgIGRlZmluaXRlIGdvYWwgb3IgdGVybSBvZiBoaXMgbGFib3IuIFRvIHNldCB0aGUgcHJpemUgb2YgZnJlZWRvbSBiZWZvcmUgaGltIGlzCiAgICAgICAgICAgICAgICAgICAgYm90aCBqdXN0IGFuZCBleHBlZGllbnQ7IHNpbmNlIGhhdmluZyBhIHByaXplIHRvIHdvcmsgZm9yLCBhbmQgYSB0aW1lIGRlZmluZWQKICAgICAgICAgICAgICAgICAgICBmb3IgaXRzIGF0dGFpbm1lbnQsIGhlIHdpbGwgcHV0IGhpcyBoZWFydCBpbnRvIGhpcyBsYWJvcnMuIFdlIHNob3VsZCwgbW9yZW92ZXIsCiAgICAgICAgICAgICAgICAgICAgdGFrZSBob3N0YWdlcyAmbHQ7Zm9yIG91ciBzbGF2ZXMnIGZpZGVsaXR5Jmd0OyBieSBhbGxvd2luZyB0aGVtIHRvIGJlZ2V0CiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW47IGFuZCBhdm9pZCB0aGUgcHJhY3RpY2Ugb2YgcHVyY2hhc2luZyBtYW55IHNsYXZlcyBvZiB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIG5hdGlvbmFsaXR5LCBhcyBtZW4gYXZvaWQgZG9pbmcgaW4gdG93bnMuIFdlIHNob3VsZCBhbHNvIGtlZXAgZmVzdGl2YWxzIGFuZCBnaXZlCiAgICAgICAgICAgICAgICAgICAgdHJlYXRzLCBtb3JlIG9uIHRoZSBzbGF2ZXMgYWNjb3VudCB0aGFuIG9uIHRoYXQgb2YgdGhlIGZyZWVtZW47PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJCZWtrZXIiIG49IjIwIiB1bml0PSJsaW5lIiAvPnNpbmNlIHRoZSBmcmVlIGhhdmUgYSBmdWxsZXIgc2hhcmUgaW4gdGhvc2UKICAgICAgICAgICAgICAgICAgICBlbmpveW1lbnRzIGZvciB0aGUgc2FrZSBvZiB3aGljaCB0aGVzZSBpbnN0aXR1dGlvbnMgZXhpc3QuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.1345a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iNi4xIiB1bml0PSJMb2ViIGNoYXAiIC8+IFRoZXJlIGFyZSBmb3VyCiAgICAgICAgICAgICAgICAgICAgcXVhbGl0aWVzIHdoaWNoIHRoZSBoZWFkIG9mIGEgaG91c2Vob2xkIG11c3QgcG9zc2VzcyBpbiBkZWFsaW5nIHdpdGggaGlzCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkuIEZpcnN0bHksIGhlIG11c3QgaGF2ZSB0aGUgZmFjdWx0eSBvZiBhY3F1aXJpbmcsIGFuZCBzZWNvbmRseSB0aGF0IG9mCiAgICAgICAgICAgICAgICAgICAgcHJlc2VydmluZyB3aGF0IGhlIGhhcyBhY3F1aXJlZDsgb3RoZXJ3aXNlIHRoZXJlIGlzIG5vIG1vcmUgYmVuZWZpdCBpbiBhY3F1aXJpbmcKICAgICAgICAgICAgICAgICAgICB0aGFuIGluIGJhbGluZyB3aXRoIGEgY29sYW5kZXIsIG9yIGluIHRoZSBwcm92ZXJiaWFsIHdpbmUtamFyIHdpdGggYSBob2xlIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGJvdHRvbS4gVGhpcmRseSBhbmQgZm91cnRobHksIGhlIG11c3Qga25vdyBob3cgdG8gaW1wcm92ZSBoaXMgcHJvcGVydHksIGFuZCBob3cKICAgICAgICAgICAgICAgICAgICB0byBtYWtlIHVzZSBvZiBpdDsgc2luY2UgdGhlc2UgYXJlIHRoZSBlbmRzIGZvciB3aGljaCB0aGUgcG93ZXJzIG9mIGFjcXVpc2l0aW9uCiAgICAgICAgICAgICAgICAgICAgYW5kIG9mIHByZXNlcnZhdGlvbiBhcmUgc291Z2h0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjYuMiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBFdmVyeXRoaW5nIHdlIHBvc3Nlc3Mgc2hvdWxkIGJlIGR1bHkgY2xhc3NpZmllZCA7CiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBhbW91bnQgb2Ygb3VyIHByb2R1Y3RpdmUgcHJvcGVydHkgZXhjZWVkIHRoYXQgb2YgdGhlIHVucHJvZHVjdGl2ZS4KICAgICAgICAgICAgICAgICAgICBQcm9kdWNlIHNob3VsZCBiZSBzbyBlbXBsb3llZCB0aGF0IHdlIGRvIG5vdCByaXNrIGFsbCBvdXIgcG9zc2Vzc2lvbnMgYXQgb25jZS4KICAgICAgICAgICAgICAgICAgICBGb3IgdGhlIHNhZmUga2VlcGluZyBvZiBvdXIgcHJvcGVydHksIHdlIHNoYWxsIGRvIHdlbGwgdG8gYWRvcHQgdGhlIFBlcnNpYW4gYW5kCiAgICAgICAgICAgICAgICAgICAgTGFjb25pYW4gc3lzdGVtcy4gQXRoZW5pYW4gaG91c2VjcmFmdCBoYXMsIGhvd2V2ZXIsIHNvbWUgYWR2YW50YWdlcy4gVGhlCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gYnV5cyBpbW1lZGlhdGVseSB3aXRoIHRoZSBwcm9kdWNlIG9mIGhpcyBzYWxlcywgYW5kIHRoZSBzbWFsbGVyCiAgICAgICAgICAgICAgICAgICAgaG91c2Vob2xkcyBrZWVwIG5vIGlkbGUgZGVwb3NpdHMgaW4gc3RvcmUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iNi4zIiB1bml0PSJMb2ViIGNoYXAiIC8+IFVuZGVyIHRoZSBQZXJzaWFuIHN5c3RlbSwgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFzdGVyIGhpbXNlbGYgdW5kZXJ0b29rIHRoZSBlbnRpcmUgZGlzcG9zaXRpb24gYW5kIHN1cGVydmlzaW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGhvdXNlaG9sZCwgZm9sbG93aW5nIHRoZSBwcmFjdGljZSB3aGljaAogICAgICAgICAgICAgICAgICAgIERpb24gdXNlZCB0byByZW1hcmsgaW4gRGlvbnlzaXVzLiBObyBvbmUsIGluZGVlZCwgdGFrZXMgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBjYXJlIG9mIGFub3RoZXIncyBwcm9wZXJ0eSBhcyBvZiBoaXMgb3duOyBzbyB0aGF0LCBhcyBmYXIgYXMgaXMgcG9zc2libGUsCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQ1YSIgdW5pdD0ic2VjdGlvbiIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.1345a.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPmVhY2ggbWFuIG91Z2h0IHRvIGF0dGVuZCB0byBoaXMgYWZmYWlycyBpbiBwZXJzb24uIFdlIG1heQogICAgICAgICAgICAgICAgICAgIGNvbW1lbmQgYWxzbyBhIHBhaXIgb2Ygc2F5aW5ncywgb25lIGF0dHJpYnV0ZWQgdG8gYSBQZXJzaWFuIGFuZCB0aGUgb3RoZXIgdG8gYQogICAgICAgICAgICAgICAgICAgIExpYnlhbi4gVGhlIGZvcm1lciBvbiBiZWluZyBhc2tlZCB3aGF0IGJlc3QgY29uZGl0aW9ucyBhIGhvcnNlLCByZXBsaWVkICJIaXMKICAgICAgICAgICAgICAgICAgICBtYXN0ZXIncyBleWUuIjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBFYy4gICAgICAgICAgICAgICAgICAgICAgICAgMTIiIHZhbGlkPSJ5ZXMiPlhlbi4gRWMuCiAgICAgICAgICAgICAgICAgICAgICAgIDEyPC9iaWJsPi48L25vdGU+IFRoZSBMaWJ5YW4sIHdoZW4gYXNrZWQgd2hhdCBraW5kIG9mIG1hbnVyZSBpcyBiZXN0LAogICAgICAgICAgICAgICAgICAgIGFuc3dlcmVkICJUaGUgbWFzdGVyJ3MgZm9vdHByaW50cy4iPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBFYy4gICAgICAgICAgICAgICAgICAgICAgICAgMTIiIHZhbGlkPSJ5ZXMiPlhlbi4gRWMuCiAgICAgICAgICAgICAgICAgICAgICAgIDEyPC9iaWJsPi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['1.1345a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iNi40IiB1bml0PSJMb2ViIGNoYXAiIC8+IFRoZSBtYXN0ZXIgYW5kIG1pc3RyZXNzIHNob3VsZCwgdGhlcmVmb3JlLAogICAgICAgICAgICAgICAgICAgIGdpdmUgcGVyc29uYWwgc3VwZXJ2aXNpb24sIGVhY2ggdG8gaGlzIG9yIGhlciBzcGVjaWFsIGRlcGFydG1lbnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgaG91c2Vob2xkIHdvcmsuIEluIHNtYWxsIGhvdXNlaG9sZHMsIGFuIG9jY2FzaW9uYWwgaW5zcGVjdGlvbiB3aWxsIHN1ZmZpY2U7IGluCiAgICAgICAgICAgICAgICAgICAgZXN0YXRlcyBtYW5hZ2VkIHRocm91Z2ggc3Rld2FyZHMsIGluc3BlY3Rpb25zIG11c3QgYmUgZnJlcXVlbnQuIEZvciBpbgogICAgICAgICAgICAgICAgICAgIHN0ZXdhcmRzaGlwIGFzIGluIG90aGVyIG1hdHRlcnMgdGhlcmUgY2FuIGJlIG5vIGdvb2QgY29weSB3aXRob3V0IGEgZ29vZAogICAgICAgICAgICAgICAgICAgIGV4YW1wbGU7IGFuZCBpZiB0aGUgbWFzdGVyIGFuZCBtaXN0cmVzcyBkbyBub3QgYXR0ZW5kIGRpbGlnZW50bHkgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBlc3RhdGUsIHRoZWlyIGRlcHV0aWVzIHdpbGwgY2VydGFpbmx5IG5vdCBkbyBzby48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSI2LjUiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gTW9yZW92ZXIsIGFzIHN1Y2ggaGFiaXRzIGFyZQogICAgICAgICAgICAgICAgICAgIGJvdGggY29tbWVuZGFibGUgZm9yIG1vcmFsIHJlYXNvbnMgYW5kIGFsc28gY29uZHVjaXZlIHRvIGdvb2QgbWFuYWdlbWVudCwgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFzdGVyIGFuZCBtaXN0cmVzcyB3aWxsIGRvIHdlbGwgdG8gcmlzZSBlYXJsaWVyIHRoYW4gdGhlaXIgc2VydmFudHMgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgcmV0aXJlIGxhdGVyOyB0byB0cmVhdCB0aGVpciBob21lIGFzIGEgY2l0eSwgYW5kIG5ldmVyIGxlYXZlIGl0IHVuZ3VhcmRlZDsgbm9yCiAgICAgICAgICAgICAgICAgICAgZXZlciwgYnkgbmlnaHQgb3IgYnkgZGF5LCB0byBwb3N0cG9uZSBhIHRhc2sgd2hpY2ggb3VnaHQgdG8gYmUgZG9uZS4gUmlzaW5nCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGRheWxpZ2h0IGlzIGFsc28gdG8gYmUgY29tbWVuZGVkOyBpdCBpcyBhIGhlYWx0aHkgaGFiaXQsIGFuZCBnaXZlcyBtb3JlCiAgICAgICAgICAgICAgICAgICAgdGltZSBmb3IgdGhlIG1hbmFnZW1lbnQgb2YgdGhlIGhvdXNlaG9sZCBhcyB3ZWxsIGFzIGZvciBsaWJlcmFsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0dWRpZXMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iNi42IiB1bml0PSJMb2ViIGNoYXAiIC8+IFdlIGhhdmUgcmVtYXJrZWQgdGhhdCBvbiBzbWFsbCBob2xkaW5ncyB0aGUgQXRoZW5pYW4KICAgICAgICAgICAgICAgICAgICBtZXRob2Qgb2YgZGlzcG9zaW5nIG9mIHRoZSBwcm9kdWNlIGlzIGFkdmFudGFnZW91cy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMjAiIHVuaXQ9ImxpbmUiIC8+T24gbGFyZ2UgZXN0YXRlcywgYWZ0ZXIgdGhlIGFtb3VudCBmb3IgdGhlIHllYXIncyBvciB0aGUKICAgICAgICAgICAgICAgICAgICBtb250aCdzIG91dGxheSBoYXMgYmVlbiBzZXQgYXBhcnQsIGl0IHNob3VsZCBiZSBoYW5kZWQgdG8gdGhlIG92ZXJzZWVyczsgYW5kIHNvCiAgICAgICAgICAgICAgICAgICAgYWxzbyB3aXRoIGltcGxlbWVudHMsIHdoZXRoZXIgZm9yIGRhaWx5IG9yIGZvciBvY2Nhc2lvbmFsIHVzZS4gSW4gYWRkaXRpb24sIGFuCiAgICAgICAgICAgICAgICAgICAgaW5zcGVjdGlvbiBvZiBpbXBsZW1lbnRzIGFuZCBzdG9yZXMgc2hvdWxkIGJlIG1hZGUgcGVyaW9kaWNhbGx5LCBzbyB0aGF0CiAgICAgICAgICAgICAgICAgICAgcmVtYWluZGVycyBhbmQgZGVmaWNpZW5jaWVzIG1heSBhbGlrZSBiZSBub3RlZC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['1.1345b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iNi43IiB1bml0PSJMb2ViIGNoYXAiIC8+IEluIGNvbnN0cnVjdGluZyBhIGhvbWVzdGVhZCwKICAgICAgICAgICAgICAgICAgICB3ZSBoYXZlIHRvIHByb3ZpZGUgZm9yIHRoZSBzdG9jayB3aGljaCBpdCBpcyB0byBzaGVsdGVyLCBhbmQgZm9yIGl0cyBoZWFsdGggYW5kCiAgICAgICAgICAgICAgICAgICAgd2VsbC1iZWluZy4gUHJvdmlkaW5nIGZvciB0aGUgc3RvY2sgaW52b2x2ZXMgcXVlc3Rpb25zIHN1Y2ggYXMgdGhlc2U6IFdoYXQgdHlwZQogICAgICAgICAgICAgICAgICAgIG9mIGJ1aWxkaW5nIGlzIGJlc3QgZm9yIHRoZSBzdG9yYWdlIG9mIGNyb3BzIGFuZCBvZiBjbG90aGluZz8gSG93IGFyZSB3ZSB0bwogICAgICAgICAgICAgICAgICAgIHN0b3JlIHRoZSBkcnkgY3JvcHMsIGFuZCBob3cgdGhlIG1vaXN0IG9uZXM/IE9mIHRoZSBvdGhlciBzdG9jaywgaG93IGlzIHRoZQogICAgICAgICAgICAgICAgICAgIGxpdmluZyB0byBiZSBob3VzZWQsIGFuZCBob3cgdGhlIGRlYWQ/IGFuZCB3aGF0IGFjY29tbW9kYXRpb24gYXJlIHdlIHRvIG1ha2UgZm9yCiAgICAgICAgICAgICAgICAgICAgc2xhdmVzIGFuZCBmcmVlLCBmb3Igd29tZW4gYW5kIG1lbiwgZm9yIGZvcmVpZ25lcnMgYW5kIGZlbGxvdy1jaXRpemVucz8gRm9yCiAgICAgICAgICAgICAgICAgICAgd2VsbC1iZWluZyBhbmQgaGVhbHRoLCBhZ2FpbiwgdGhlIGhvbWVzdGVhZCBzaG91bGQgYmUgYWlyeSBpbiBzdW1tZXIsIGFuZCBzdW5ueQogICAgICAgICAgICAgICAgICAgIGluIHdpbnRlci48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSI2LjgiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gQSBob21lc3RlYWQgcG9zc2Vzc2luZyB0aGVzZSBxdWFsaXRpZXMgd291bGQgYmUgbG9uZ2VyCiAgICAgICAgICAgICAgICAgICAgdGhhbiBpdCBpcyBkZWVwOyBhbmQgaXRzIG1haW4gZnJvbnQgd291bGQgZmFjZSB0aGUgc291dGguIE9uIGxhcmdlIGVzdGF0ZXMsCiAgICAgICAgICAgICAgICAgICAgbW9yZW92ZXIsIGl0IHNlZW1zIHdvcnRoIHdoaWxlIHRvIGluc3RhbCBhcyBwb3J0ZXIgYSBtYW4gaW5jYXBhYmxlIG9mIG90aGVyCiAgICAgICAgICAgICAgICAgICAgd29yaywgdG8ga2VlcCBoaXMgZXllIG9uIHdoYXQgcGFzc2VzIGluIGFuZCBvdXQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQ1YiIgdW5pdD0ic2VjdGlvbiIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1345b.7'] = ""
translation['2.1345b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMS4xIiB1bml0PSJMb2ViIGNoYXAiIC8+UmlnaHQgYWRtaW5pc3RyYXRpb24gb2YgYSBob3VzZWhvbGQgZGVtYW5kcyBpbiB0aGUgZmlyc3QgcGxhY2UgZmFtaWxpYXJpdHkKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBzcGhlcmUgb2Ygb25lJ3MgYWN0aW9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9yLCAidGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsaXRpZXMgd2hlcmVpbiB3ZSB3b3JrLiI8L25vdGU+OyBpbiB0aGUgc2Vjb25kIFBsYWNlLCBnb29kIG5hdHVyYWwKICAgICAgICAgICAgICAgICAgICBlbmRvd21lbnRzOyBhbmQgaW4gdGhlIHRoaXJkLCBhbiB1cHJpZ2h0cyBhbmQgaW5kdXN0cmlvdXMgd2F5IG9mIGxpZmUuIEZvciB0aGUKICAgICAgICAgICAgICAgICAgICBsYWNrIG9mIGFueSBvbmUgb2YgdGhlc2UgcXVhbGlmaWNhdGlvbnMgd2lsbCBpbnZvbHZlIG1hbnkgYSBmYWlsdXJlIGluIHRoZSB0YXNrCiAgICAgICAgICAgICAgICAgICAgb25lIHRha2VzIGluIGhhbmQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9mIHN1Y2ggYWRtaW5pc3RyYXRpb25zIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgYXJlIGZvdXIgbWFpbiB0eXBlcywgdW5kZXIgd2hpY2ggYWxsIG90aGVycyBtYXkgYmUgY2xhc3NpZmllZC4gV2UgaGF2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBhZG1pbmlzdHJhdGlvbiBvZiBhIGtpbmc7IG9mIHRoZSBnb3Zlcm5vcnMgdW5kZXIgaGltOyBvZiBhIGZyZWUgc3RhdGU7IGFuZCBvZiBhCiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBjaXRpemVuLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjEuMiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBPZiB0aGVzZSwgdGhhdCBvZiBhIGtpbmcgaXMgdGhlIG1vc3QgZXh0ZW5zaXZlLCB5ZXQgYXQKICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSB0aW1lIHRoZSBzaW1wbGVzdC4gQSBnb3Zlcm5vcidzIG9mZmljZSBpcyBhbHNvIHZlcnkgZXh0ZW5zaXZlLCBidXQKICAgICAgICAgICAgICAgICAgICBkaXZpZGVkIGludG8gYSBncmVhdCB2YXJpZXR5IG9mIGRlcGFydG1lbnRzLiBUaGUgYWRtaW5pc3RyYXRpb24gb2YgYSBmcmVlIHN0YXRlCiAgICAgICAgICAgICAgICAgICAgaXMgYWdhaW4gdmVyeSB2YXJpZWQsIGJ1dCBpdCBpcyB0aGUgZWFzaWVzdCB0byBjb25kdWN0OyB3aGlsZSB0aGF0LCBvZiBhIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBpbmRpdmlkdWFsIHByZXNlbnRzIHRoZSBsaWtlIHZhcmlldHksIGJ1dCB3aXRoaW4gbGltaXRzIHdoaWNoIGFyZSBuYXJyb3dlc3Qgb2YKICAgICAgICAgICAgICAgICAgICBhbGwuIEZvciB0aGUgbW9zdCBwYXJ0LCBhbGwgZm91ciB3aWxsIG9mIG5lY2Vzc2l0eSBjb3ZlciB0aGUgc2FtZSBncm91bmQ7IHdlCiAgICAgICAgICAgICAgICAgICAgd2lsbCwgaG93ZXZlciwgdGFrZSB0aGVtIGluIHR1cm4sIGFuZCBzZWUgd2hhdCBpcyBlc3BlY2lhbGx5IGNoYXJhY3RlcmlzdGljIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGVhY2guPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2luZyBmaXJzdCB0aGUgcm95YWwgYWRtaW5pc3RyYXRpb24sCiAgICAgICAgICAgICAgICAgICAgd2Ugc2VlIHRoYXQgd2hpbGUgdGhlb3JldGljYWxseSBpdHMgcG93ZXIgaXMgdW5saW1pdGVkLDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz5pdCBpcyBpbiBwcmFjdGljZSBjb25jZXJuZWQgd2l0aCBmb3VyIGRlcGFydG1lbnRzLAogICAgICAgICAgICAgICAgICAgIG5hbWVseSBjdXJyZW5jeSwgZXhwb3J0cywgaW1wb3J0cywgYW5kIGV4cGVuZGl0dXJlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1346a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMS4zIiB1bml0PSJMb2ViIGNoYXAiIC8+IFRha2luZyB0aGVzZSBzZXZlcmFsbHksIEkKICAgICAgICAgICAgICAgICAgICBhc3NpZ24gdG8gdGhhdCBvZiBjdXJyZW5jeSB0aGUgc2Vhc29uYWJsZSByZWd1bGF0aW9uIG9mIHByaWNlczsgdG8gaW1wb3J0cyBhbmQKICAgICAgICAgICAgICAgICAgICBleHBvcnRzLCB0aGUgcHJvZml0YWJsZSBkaXNwb3NpdGlvbiwgYXQgYW55IGdpdmVuIHRpbWUsIG9mIHRoZSBkdWVzIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSBwcm92aW5jaWFsIGdvdmVybm9yczsgYW5kIHRvIGV4cGVuZGl0dXJlLCB0aGUgcmVkdWN0aW9uIG9mIG91dGdvaW5ncyBhcwogICAgICAgICAgICAgICAgICAgIG9jY2FzaW9uIG1heSBzZXJ2ZSwgYW5kIHRoZSBxdWVzdGlvbiBvZiBtZWV0aW5nIGV4cGVuc2VzIGJ5IGN1cnJlbmN5IG9yIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1vZGl0aWVzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjEuNCIgdW5pdD0iTG9lYiBjaGFwIiAvPiBUaGUgc2Vjb25kIGtpbmQgb2YgYWRtaW5pc3RyYXRpb24sIHRoYXQgb2YgdGhlIGdvdmVybm9yLAogICAgICAgICAgICAgICAgICAgIGlzIGNvbmNlcm5lZCB3aXRoIHNpeCBkaWZmZXJlbnQgY2xhc3NlcyBvZiByZXZlbnVlOyB0aG9zZSwgbmFtZWx5LCBhcmlzaW5nIGZyb20KICAgICAgICAgICAgICAgICAgICBhZ3JpY3VsdHVyZSwgZnJvbSB0aGUgc3BlY2lhbCBwcm9kdWN0cyBvZiB0aGUgY291bnRyeSwgZnJvbSBtYXJrZXRzLCBmcm9tIHRheGVzLAogICAgICAgICAgICAgICAgICAgIGZyb20gY2F0dGxlLCBhbmQgZnJvbSBvdGhlciBzb3VyY2VzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UYWtpbmcgdGhlc2UKICAgICAgICAgICAgICAgICAgICBpbiB0dXJuLCB0aGUgZmlyc3QgYW5kIG1vc3QgaW1wb3J0YW50IG9mIHRoZW0gaXMgcmV2ZW51ZSBmcm9tIGFncmljdWx0dXJlLCB3aGljaAogICAgICAgICAgICAgICAgICAgIHNvbWUgY2FsbCB0aXRoZSBhbmQgc29tZSBwcm9kdWNlLXRheC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Qm9lY2toCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZXMgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQzrrPhuG9uc+BzrnOv869PC9mb3JlaWduPiAiR3J1bmRzdGV1ZXIuIiBCdXQgaG93CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZW4gZG9lcyBpdCBkaWZmZXIgZnJvbSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PhOG/ts69IM66zrHPhOG9sCDOs+G/hs69CiAgICAgICAgICAgICAgICAgICAgICAgIM+EzrXOu+G/ts69PC9mb3JlaWduPiBiZWxvdz88L25vdGU+IFRoZSBzZWNvbmQgaXMgdGhhdCBmcm9tIHNwZWNpYWwgcHJvZHVjdHM7IGluCiAgICAgICAgICAgICAgICAgICAgb25lIHBsYWNlIGdvbGQsIGluIGFub3RoZXIgc2lsdmVyLCBpbiBhbm90aGVyIGNvcHBlciwgYW5kIHNvIG9uLiBUaGlyZCBpbgogICAgICAgICAgICAgICAgICAgIGltcG9ydGFuY2UgaXMgcmV2ZW51ZSBmcm9tIG1hcmtldHMsIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM66z4bhvbnPgc65zr/OvTwvZm9yZWlnbj4gIkdydW5kc3RldWVyLiIgQnV0IGhvdwogICAgICAgICAgICAgICAgICAgICAgICB0aGVuIGRvZXMgaXQgZGlmZmVyIGZyb20gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4Thv7bOvSDOus6xz4ThvbAgzrPhv4bOvQogICAgICAgICAgICAgICAgICAgICAgICDPhM61zrvhv7bOvTwvZm9yZWlnbj4gYmVsb3c/PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzNDZhIiB1bml0PSJzZWN0aW9uIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1346a.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPmFuZCBmb3VydGggdGhhdCB3aGljaCBhcmlzZXMKICAgICAgICAgICAgICAgICAgICBmcm9tIHRheGVzIG9uIGxhbmQgYW5kIG9uIHNhbGVzLiBJbiB0aGUgZmlmdGggcGxhY2Ugd2UgaGF2ZSByZXZlbnVlIGZyb20gY2F0dGxlLAogICAgICAgICAgICAgICAgICAgIGNhbGxlZCB0aXRoZSBvciBmaXJzdC1mcnVpdHM7IGFuZCBpbiB0aGUgc2l4dGgsIHJldmVudWUgZnJvbSBvdGhlciBzb3VyY2VzLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdlIHRlcm0gcG9sbC10YXgsIG9yIHRheCBvbiBpbmR1c3RyeS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['2.1346a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMS41IiB1bml0PSJMb2ViIGNoYXAiIC8+IE9mIG91ciB0aGlyZCBraW5kIG9mCiAgICAgICAgICAgICAgICAgICAgYWRtaW5pc3RyYXRpb24sIHRoYXQgb2YgYSBmcmVlIHN0YXRlLCB0aGUgbW9zdCBpbXBvcnRhbnQgcmV2ZW51ZSBpcyB0aGF0IGFyaXNpbmcKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBzcGVjaWFsIHByb2R1Y3RzIG9mIHRoZSBjb3VudHJ5LiBOZXh0IGZvbGxvd3MgcmV2ZW51ZSBmcm9tIG1hcmtldHMgYW5kCiAgICAgICAgICAgICAgICAgICAgb2NjdXBhdGlvbnM7IGFuZCBmaW5hbGx5IHRoYXQgZnJvbSBldmVyeS1kYXkgdHJhbnNhY3Rpb25zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5PciAodW5kZXJzdGFuZGluZyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ou861zrnPhM6/z4XPgc6zzrnhv7bOvTwvZm9yZWlnbj4pICJyZWd1bGFyIHB1YmxpYyBzZXJ2aWNlcy4iIDwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ou861zrnPhM6/z4XPgc6zzrnhv7bOvTwvZm9yZWlnbj4pICJyZWd1bGFyIHB1YmxpYyBzZXJ2aWNlcy4iIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjEuNiIgdW5pdD0iTG9lYiBjaGFwIiAvPgogICAgICAgICAgICAgICAgICAgIEZvdXJ0aGx5IGFuZCBsYXN0bHksIHdlIG11c3QgY29uc2lkZXIgdGhlIGFkbWluaXN0cmF0aW9uIG9mIGEgcHJpdmF0ZSBjaXRpemVuLgogICAgICAgICAgICAgICAgICAgIEl0IGlzIGRpZmZpY3VsdCB0byByZWR1Y2UgdGhpcyB0byBydWxlcyBvd2luZyB0byB0aGUgbmVjZXNzYXJ5IHZhcmlldHkgb2YgaXRzCiAgICAgICAgICAgICAgICAgICAgYWltczsgeWV0IGl0IGlzIHRoZSBtb3N0IGxpbWl0ZWQgb2YgdGhlIGZvdXIsIGJlY2F1c2UgYm90aCByZXZlbnVlcyBhbmQgZXhwZW5zZXMKICAgICAgICAgICAgICAgICAgICBhcmUgJmx0O2NvbXBhcmF0aXZlbHkmZ3Q7IHNtYWxsLiBUYWtpbmcgaXRzIHJldmVudWVzIGluIHR1cm4sIHRoZSBjaGllZgogICAgICAgICAgICAgICAgICAgIGFyZSB0aG9zZSBmcm9tIGFncmljdWx0dXJlOyBuZXh0IGluIGltcG9ydGFuY2UsIHRob3NlIGZyb20gb3RoZXIgZXZlcnktZGF5CiAgICAgICAgICAgICAgICAgICAgb2NjdXBhdGlvbnM7IHdoaWxlIHRoaXJkIGNvbWVzIGludGVyZXN0IG9uIG1vbmV5LiBBcGFydCBmcm9tIGFsbCB0aGVzZSwgdGhlcmUgaXMKICAgICAgICAgICAgICAgICAgICBhIG1hdHRlciBjb21tb24gdG8gYWxsIGtpbmRzIG9mIGFkbWluaXN0cmF0aW9uIHdoaWNoIGlzIGJlc3QgY29uc2lkZXJlZCBhdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgcGFydGljdWxhciBwb2ludCwgYW5kIGRlc2VydmVzIG1vcmUgdGhhbiBjdXJzb3J5IGF0dGVudGlvbi4gVGhpcyBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBpbXBvcnRhbmNlIG9mIGtlZXBpbmcgZXhwZW5kaXR1cmUgd2l0aGluIHRoZSBsaW1pdHMgb2YgcmV2ZW51ZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSIxLjciIHVuaXQ9IkxvZWIgY2hhcCIgLz4gSGF2aW5nIHRodXMKICAgICAgICAgICAgICAgICAgICBlbnVtZXJhdGVkIHRoZSBkaXZpc2lvbnMgb2Ygb3VyIHN1YmplY3QsIHdlIG11c3QgbmV4dCBjb25zaWRlciB3aGV0aGVyIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3ZpbmNlIG9yIHRoZSBmcmVlIHN0YXRlIHdpdGggd2hpY2ggd2UgYXJlIGNvbmNlcm5lZCBpcyBhYmxlIHRvIHByb2R1Y2UgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvcm1zIG9mIHJldmVudWUgd2UgaGF2ZSBqdXN0IGRldGFpbGVkPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJCZWtrZXIiIG49IjIwIiB1bml0PSJsaW5lIiAvPm9yIGF0IGxlYXN0IHRoZSBjaGllZiBvZiB0aGVtOyAmbHQ7YW5kIHRoaXMgYmVpbmcKICAgICAgICAgICAgICAgICAgICBrbm93biZndDsgbXVzdCBtYWtlIHRoZSBiZXN0IHVzZSBvZiB3aGF0IHdlIGhhdmUuIE5leHQgd2UgbXVzdCBpbnF1aXJlIHdoYXQKICAgICAgICAgICAgICAgICAgICBraW5kcyBvZiByZXZlbnVlLCBhdCBwcmVzZW50IHdob2xseSBsYWNraW5nLCBhcmUgeWV0IHBvdGVudGlhbGx5IGV4aXN0ZW50OyB3aGF0CiAgICAgICAgICAgICAgICAgICAga2luZHMsIHRob3VnaCBub3cgc21hbGwsIG1heSB3aXRoIGNhcmUgYmUgaW5jcmVhc2VkLCBhbmQgaG93IGZhciBjZXJ0YWluIGl0ZW1zCiAgICAgICAgICAgICAgICAgICAgb2YgcHJlc2VudCBleHBlbmRpdHVyZSBtYXkgd2l0aG91dCBwcmVqdWRpY2UgdG8gdGhlIGNvbW1vbndlYWx0aCBiZQogICAgICAgICAgICAgICAgICAgICAgICBkaW1pbmlzaGVkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1346b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMS44IiB1bml0PSJMb2ViIGNoYXAiIC8+IEhhdmluZyBzcG9rZW4gdGh1cyBvZiBhZG1pbmlzdHJhdGlvbnMgYW5kIHRoZWlyIHZhcmlvdXMKICAgICAgICAgICAgICAgICAgICBkZXBhcnRtZW50cywgd2UgaGF2ZSBmdXJ0aGVyIHByb2NlZWRlZCB0byBjb2xsZWN0IHN1Y2ggaW5zdGFuY2VzIGFzIHdlIGRlZW1lZAogICAgICAgICAgICAgICAgICAgIG5vdGV3b3J0aHkgb2YgdGhlIG1lYW5zIGFkb3B0ZWQgYnkgY2VydGFpbiBzdGF0ZXNtZW4gaW4gdGltZXMgcGFzdCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwbGVuaXNobWVudCBvZiB0aGUgdHJlYXN1cnksIGFuZCBhbHNvIG9mIHRoZWlyIHNraWxsIGluIGFkbWluaXN0cmF0aW9uLiBUaGVzZQogICAgICAgICAgICAgICAgICAgIGFuZWNkb3RlcyAmbHQ7d2hpY2ggZm9sbG93Jmd0Oywgc2VlbWVkIHRvIHVzIGJ5IG5vIG1lYW5zIGxhY2tpbmcgaW4KICAgICAgICAgICAgICAgICAgICB1dGlsaXR5OyBiZWluZyBjYXBhYmxlIGZyb20gdGltZSB0byB0aW1lIG9mIGFwcGxpY2F0aW9uIGJ5IG90aGVycyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBidXNpbmVzcyB0aGV5IHRoZW1zZWx2ZXMgaGF2ZSBpbiBoYW5kLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjIuMSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBDeXBzZWx1cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENvcmludGgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4gaGFkIG1hZGUgYSB2b3cgdGhhdCBpZiBoZSBiZWNhbWUKICAgICAgICAgICAgICAgICAgICBtYXN0ZXIgb2YgdGhlIGNpdHksIGhlIHdvdWxkIG9mZmVyIHRvIFpldXMgdGhlIGVudGlyZSBwcm9wZXJ0eSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBDb3JpbnRoaWFucy4gQWNjb3JkaW5nbHkgaGUgY29tbWFuZGVkIHRoZW0gdG8gbWFrZSBhIHJldHVybiBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb25zOyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTM0NmIiIHVuaXQ9InNlY3Rpb24iIC8+PC90cmFuc2xhdGlvbj4="
translation['2.1346b.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPndoaWNoIGRvbmUsIGhlIHRvb2sgZnJvbSBlYWNoIGEgdGVudGggcGFydCwgYW5kIHRvbGQgdGhlbSB0bwogICAgICAgICAgICAgICAgICAgIGVtcGxveSB0aGUgcmVtYWluZGVyIGluIHRyYWRpbmcuIEEgeWVhciBsYXRlciwgaGUgcmVwZWF0ZWQgdGhlIHByb2Nlc3MuIEFuZCBzbwogICAgICAgICAgICAgICAgICAgIGluIHRlbiB5ZWFycycgdGltZSBpdCBjYW1lIHRvIHBhc3MgdGhhdCBDeXBzZWx1cyByZWNlaXZlZCB0aGUgZW50aXJlIGFtb3VudAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhlIGhhZCBkZWRpY2F0ZWQ7IHdoaWxlIHRoZSBDb3JpbnRoaWFucyBvbiB0aGVpciBwYXJ0IGhhZCByZXBsYWNlZCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgaGFkIHBhaWQgaGltLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1346b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4yIiB1bml0PSJMb2ViIGNoYXAiIC8+IEx5Z2RhbWlzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTmF4b3MgQ2l0eSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTmF4b3MgQ2l0eSI+TmF4b3M8L3BsYWNlTmFtZT4sIGFmdGVyIGRyaXZpbmcgaW50byBleGlsZSBhIHBhcnR5IG9mIHRoZSBpbmhhYml0YW50cywgZm91bmQKICAgICAgICAgICAgICAgICAgICB0aGF0IG5vIG9uZSB3b3VsZCBnaXZlIGhpbSBhIGZhaXIgcHJpY2UgZm9yIHRoZWlyIHByb3BlcnR5LiBIZSB0aGVyZWZvcmUgc29sZCBpdAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBleGlsZWQgb3duZXJzLiBUaGUgZXhpbGVzIGhhZCBsZWZ0IGJlaGluZCB0aGVtIGEgbnVtYmVyIG9mIHdvcmtzIG9mIGFydAogICAgICAgICAgICAgICAgICAgIGRlc3RpbmVkIGZvciB0ZW1wbGUgb2ZmZXJpbmdzLCB3aGljaCBsYXkgaW4gY2VydGFpbiB3b3Jrc2hvcHMgaW4gYW4gdW5maW5pc2hlZAogICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbi4gVGhlc2UgTHlnZGFtaXMgcHJvY2VlZGVkIHRvIHNlbGwgdG8gdGhlIGV4aWxlcyBhbmQgd2hvc28gZWxzZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGJ1eSB0aGVtOyBhbGxvd2luZyBlYWNoIHB1cmNoYXNlciB0byBoYXZlIGhpcyBuYW1lIGVuZ3JhdmVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBvZmZlcmluZy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSIyLjMiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gVGhlIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJ5emFudGl1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnl6YW50aXVtIj5CeXphbnRpdW08L3BsYWNlTmFtZT4sIGJlaW5nIGluIG5lZWQgb2YgZnVuZHMsIHNvbGQgc3VjaCBkZWRpY2F0ZWQgbGFuZHMgYXMKICAgICAgICAgICAgICAgICAgICBiZWxvbmdlZCB0byB0aGUgU3RhdGU7IHRob3NlIHVuZGVyIGNyb3BzLCBmb3IgYSB0ZXJtIG9mIHllYXJzLCBhbmQgdGhvc2UKICAgICAgICAgICAgICAgICAgICB1bmN1bHRpdmF0ZWQsIGluIHBlcnBldHVpdHkuIEluIGxpa2UgbWFubmVyIHRoZXkgc29sZCBsYW5kcyBhcHByb3ByaWF0ZWQgdG8KICAgICAgICAgICAgICAgICAgICByZWxpZ2lvdXMgY2VsZWJyYXRpb25zIG9yIGFuY2VzdHJhbCBjdWx0cywgbm90IGV4Y2VwdGluZyB0aG9zZSB0aGF0IHdlcmUgb24KICAgICAgICAgICAgICAgICAgICBwcml2YXRlIGVzdGF0ZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikx5cy4gNyIgdmFsaWQ9InllcyI+THlzLiA3PC9iaWJsPiwKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNldmVudGggU3BlZWNoIG9mIHRoZSBBdGhlbmlhbiBvcmF0b3IgTHlzaWFzLjwvbm90ZT47IGZvciB0aGUgb3duZXJzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHN1cnJvdW5kaW5nIGxhbmQgd2VyZSByZWFkeSB0byBnaXZlIGEgaGlnaCBwcmljZSBmb3IgdGhlbS4gVG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZGlzcG9zc2Vzc2VkIGNlbGVicmFudHMgJmx0O3RoZXkgYXNzaWduZWQmZ3Q7IHN1Y2ggb3RoZXIgcHVibGljIGxhbmRzCiAgICAgICAgICAgICAgICAgICAgc3Vycm91bmRpbmcgdGhlIGd5bW5hc2l1bSwgdGhlIGFnb3JhLCBvciB0aGUgaGFyYm9yLDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikx5cy4gNyIgdmFsaWQ9InllcyI+THlzLiA3PC9iaWJsPiwKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNldmVudGggU3BlZWNoIG9mIHRoZSBBdGhlbmlhbiBvcmF0b3IgTHlzaWFzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz5hcyBiZWxvbmdlZCB0byB0aGUgU3RhdGUuIE1vcmVvdmVyIHRoZXkgY2xhaW1lZCBhcwogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBwcm9wZXJ0eSBhbGwgb3BlbiBzcGFjZXMgd2hlcmUgYW55dGhpbmcgd2FzIHNvbGQsIHRvZ2V0aGVyIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgc2VhLWZpc2hlcmllcywgdGhlIHRyYWZmaWMgaW4gc2FsdCwgYW5kIHRoZSB0cmFkZSBvZiBwcm9mZXNzaW9uYWwgY29uanVyb3JzLAogICAgICAgICAgICAgICAgICAgIHNvb3Roc2F5ZXJzLCBjaGFybS1zZWxsZXJzLCBhbmQgdGhlIGxpa2U7IGV4YWN0aW5nIGZyb20gYWxsIHRoZXNlIG9uZS10aGlyZCBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGdhaW5zLiBUaGUgcmlnaHQgb2YgY2hhbmdpbmcgbW9uZXkgdGhleSBzb2xkIHRvIGEgc2luZ2xlIGJhbmssIHdob3NlCiAgICAgICAgICAgICAgICAgICAgcHJvcHJpZXRvciB3YXMgZ2l2ZW4gYSBtb25vcG9seSBvZiB0aGUgc2FsZSBhbmQgcHVyY2hhc2Ugb2YgY29pbiwgcHJvdGVjdGVkCiAgICAgICAgICAgICAgICAgICAgdW5kZXIgcGVuYWx0eSBvZiBjb25maXNjYXRpb24uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZCB3aGVyZWFzCiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNseSB0aGUgcmlnaHRzIG9mIGNpdGl6ZW5zaGlwIHdlcmUgYnkgbGF3IGNvbmZpbmVkIHRvIHRob3NlIHdob3NlIHBhcmVudHMKICAgICAgICAgICAgICAgICAgICB3ZXJlIGJvdGggY2l0aXplbnMsIGxhY2sgb2YgZnVuZHMsIGluZHVjZWQgdGhlbSB0byBvZmZlciBjaXRpemVuc2hpcCB0byBoaW0gd2hvCiAgICAgICAgICAgICAgICAgICAgaGFkIG9uZSBjaXRpemVuIHBhcmVudCBvbiBwYXltZW50IG9mIHRoZSBzdW0gb2YgdGhpcnR5IG1pbmFlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIG1pbmEgb2Ygc2lsdmVyICgxIGxiLiA1IG96LiBhdm9pcmR1cG9pcykgd2FzIGNvaW5lZCBpbnRvCiAgICAgICAgICAgICAgICAgICAgICAgIDEwMCBkcmFjaG1hZSwgZWFjaCBiZWluZyBhbiBhcnRpc2FuJ3Mgb3JkaW5hcnkgZGFpbHkgd2FnZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9uIGFub3RoZXIgb2NjYXNpb24sIHdoZW4gZm9vZCBhbmQgZnVuZHMgd2VyZQogICAgICAgICAgICAgICAgICAgIGJvdGggc2NhcmNlLCB0aGV5IGNhbGxlZCBob21lIGFsbCB2ZXNzZWxzIHRoYXQgd2VyZSB0cmFkaW5nIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NjE5Ij5Qb250dXM8L3BsYWNlTmFtZT4uIE9uIHRoZSBtZXJjaGFudHMgcHJvdGVzdGluZywgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYXQgbGVuZ3RoIGFsbG93ZWQgdG8gdHJhZGUgb24gcGF5bWVudCBvZiBhIHRpdGhlIG9mIHRoZWlyIHByb2ZpdHMuIFRoaXMgdGF4IG9mCiAgICAgICAgICAgICAgICAgICAgMTAgcGVyIGNlbnQgd2FzIGFsc28gZXh0ZW5kZWQgdG8gcHVyY2hhc2VzIG9mIGV2ZXJ5IGtpbmQuIDwvdHJhbnNsYXRpb24+"
translation['2.1347a.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQ3YSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMSIgdW5pdD0ibGluZSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaGFwcGVuZWQgdGhhdCBjZXJ0YWluIGFsaWVucyByZXNpZGluZyBpbiB0aGUgY2l0eSBoYWQgbGVudAogICAgICAgICAgICAgICAgICAgIG1vbmV5IG9uIHRoZSBzZWN1cml0eSBvZiBjaXRpemVucycgcHJvcGVydHkuIEFzIHRoZXNlIGFsaWVucyBkaWQgbm90IHBvc3Nlc3MgdGhlCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgb2YgaG9sZGluZyBzdWNoIHByb3BlcnR5LCB0aGUgcGVvcGxlIG9mZmVyZWQgdG8gcmVjb2duaXplIHRoZSB0aXRsZSBvZgogICAgICAgICAgICAgICAgICAgIGFueW9uZSB3aG8gY2hvc2UgdG8gcGF5IGludG8gdGhlIHRyZWFzdXJ5IG9uZSB0aGlyZCBvZiB0aGUgYW1vdW50CiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3VyZWQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1347a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi40IiB1bml0PSJMb2ViIGNoYXAiIC8+IEhpcHBpYXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IG9mZmVyZWQgZm9yIHNhbGUgdXBwZXIgc3RvcmllcyB0aGF0IHByb2plY3RlZCBvdmVyIHRoZQogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBzdHJlZXRzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DZi4gR29ldGhlLDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldhcmhlaXQgdW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaWNodHVuZzwvdGl0bGU+LCBCb29rIEkuICJJbiBGcmFua2Z1cnQsIGFzIGluIHNldmVyYWwgYW5jaWVudCBjaXRpZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBoYWQgZXJlY3RlZCB3b29kZW4gYnVpbGRpbmdzIGhhZCBzb3VnaHQgdG8gb2J0YWluIG1vcmUgcm9vbSBieQogICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2luZyB0aGUgZmlyc3QgYW5kIGhpZ2hlciBmbG9vcnMgdG8gb3ZlcmhhbmcgaW4gdGhlIHN0cmVldC4gLiAuIC4gQXQKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCBhIGxhdyB3YXMgY2FycmllZCB0aGF0IGluIGFsbCBlbnRpcmVseSBuZXcgaG91c2VzIHRoZSBmaXJzdCBmbG9vciBhbG9uZQogICAgICAgICAgICAgICAgICAgICAgICBzaG91bGQgcHJvamVjdDsgYWJvdmUgdGhhdCwgdGhlIHdhbGwgc2hvdWxkIGJlIHBlcnBlbmRpY3VsYXIuIiBUaGUgcG9ldCdzCiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlciwgd2lzaGluZyB0byByZWJ1aWxkIGhpcyBob3VzZSB3aXRob3V0IHNhY3JpZmljZSBvZiBmbG9vci1zcGFjZSwKICAgICAgICAgICAgICAgICAgICAgICAgdW5kZXJwaW5uZWQgdGhlIHVwcGVyIHN0b3JpZXMgYW5kIHJlbmV3ZWQgdGhlIGJ1aWxkaW5nIHBpZWNlbWVhbCBmcm9tIGJlbG93LgogICAgICAgICAgICAgICAgICAgICAgICBDZi4gYWxzbyAxNC48L25vdGU+IHRvZ2V0aGVyIHdpdGggZmxpZ2h0cyBvZiBzdGVwcywgcmFpbGluZ3MsIGFuZCBkb29ycyB0aGF0CiAgICAgICAgICAgICAgICAgICAgb3BlbmVkIG91dHdhcmRzLiBUaGUgb3duZXJzIG9mIHRoZSBidWlsZGluZ3MgYm91Z2h0IHRoZW0sIGFuZCBpbiB0aGlzIHdheSBhCiAgICAgICAgICAgICAgICAgICAgbGFyZ2Ugc3VtIG9mIG1vbmV5IHdhcyBjb2xsZWN0ZWQuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2FyaGVpdCB1bmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpY2h0dW5nPC90aXRsZT4sIEJvb2sgSS4gIkluIEZyYW5rZnVydCwgYXMgaW4gc2V2ZXJhbCBhbmNpZW50IGNpdGllcywKICAgICAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGhhZCBlcmVjdGVkIHdvb2RlbiBidWlsZGluZ3MgaGFkIHNvdWdodCB0byBvYnRhaW4gbW9yZSByb29tIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93aW5nIHRoZSBmaXJzdCBhbmQgaGlnaGVyIGZsb29ycyB0byBvdmVyaGFuZyBpbiB0aGUgc3RyZWV0LiAuIC4gLiBBdAogICAgICAgICAgICAgICAgICAgICAgICBsYXN0IGEgbGF3IHdhcyBjYXJyaWVkIHRoYXQgaW4gYWxsIGVudGlyZWx5IG5ldyBob3VzZXMgdGhlIGZpcnN0IGZsb29yIGFsb25lCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZCBwcm9qZWN0OyBhYm92ZSB0aGF0LCB0aGUgd2FsbCBzaG91bGQgYmUgcGVycGVuZGljdWxhci4iIFRoZSBwb2V0J3MKICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVyLCB3aXNoaW5nIHRvIHJlYnVpbGQgaGlzIGhvdXNlIHdpdGhvdXQgc2FjcmlmaWNlIG9mIGZsb29yLXNwYWNlLAogICAgICAgICAgICAgICAgICAgICAgICB1bmRlcnBpbm5lZCB0aGUgdXBwZXIgc3RvcmllcyBhbmQgcmVuZXdlZCB0aGUgYnVpbGRpbmcgcGllY2VtZWFsIGZyb20gYmVsb3cuCiAgICAgICAgICAgICAgICAgICAgICAgIENmLiBhbHNvIDE0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5IZSBhbHNvIGNhbGxlZAogICAgICAgICAgICAgICAgICAgICAgICBpbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5MaXQuICJyZW5kZXJlZCBpbnZhbGlkLiIgPC9ub3RlPiB0aGUKICAgICAgICAgICAgICAgICAgICBleGlzdGluZyBjdXJyZW5jeSwgcHJvbWlzaW5nIHRvIHBheSB0aGUgaG9sZGVycyBhdCBhIGZpeGVkIHJhdGUuIEJ1dCB3aGVuIHRoZXkKICAgICAgICAgICAgICAgICAgICBjYW1lIHRvIHJlY2VpdmUgdGhlIG5ldyBtaW50YWdlLCBoZSByZWlzc3VlZCB0aGUgb2xkIGNvaW5zLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaG9zZSB3aG8gd2VyZSBleHBlY3RpbmcgdG8gZXF1aXAgYSB3YXItdmVzc2VsIG9yIHByZXNpZGUgb3ZlcgogICAgICAgICAgICAgICAgICAgIGEgdHJpYmUgb3IgdHJhaW4gYSBjaG9ydXMgb3IgdW5kZXJ0YWtlIHRoZSBleHBlbnNlIG9mIHNvbWUgb3RoZXIgcHVibGljIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGUga2luZCwgaGUgYWxsb3dlZCwgaWYgdGhleSBjaG9zZSwgdG8gY29tbXV0ZSB0aGUgc2VydmljZSBmb3IgYSBtb2RlcmF0ZQogICAgICAgICAgICAgICAgICAgIHN1bSwgYW5kIHRvIGJlIGVucm9sbGVkIG9uIHRoZSBsaXN0IG9mIHRob3NlIHdobyBoYWQgcGVyZm9ybWVkIGl0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Nb3Jlb3Zlciwgd2hlbmV2ZXIgYSBjaXRpemVuIGRpZWQsIHRoZSBwcmllc3Rlc3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgdGVtcGxlIG9mIEF0aGVuYSBvbiB0aGUgQWNyb3BvbGlzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgdHJlYXN1cnksIGxpa2UgdGhlIFRlbXBsZSBvZiBTYXR1cm51cyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4uPC9ub3RlPiB3YXMgdG8gcmVjZWl2ZSBvbmUgcXVhcnQKICAgICAgICAgICAgICAgICAgICBtZWFzdXJlIG9mIGJhcmxleSwgb25lIG9mIHdoZWF0LCBhbmQgYSBzaWx2ZXIgb2JvbHVzLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+MS82IG9mIHRoZSBkcmFjaG1hLiBTZWUgMyBhYm92ZS48L25vdGU+IEFuZCB3aGVuIGEgY2hpbGQgd2FzCiAgICAgICAgICAgICAgICAgICAgYm9ybiwgdGhlIGZhdGhlciBwYWlkIHRoZSBzYW1lIGR1ZXMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi41IiB1bml0PSJMb2ViIGNoYXAiIC8+IFRoZSBBdGhlbmlhbiBjb2xvbmlzdHMgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQb3RpZGFpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUG90aWRhaWEiPlBvdGlkYWVhPC9wbGFjZU5hbWU+LCBiZWluZyBpbiBuZWVkIG9mIGZ1bmRzIGZvciB0aGUgd2FyLAogICAgICAgICAgICAgICAgICAgIGFncmVlZCB0aGF0IGFsbCBzaG91bGQgbWFrZSBhIHJldHVybiBvZiB0aGVpciBwcm9wZXJ0eSBmb3IgYXNzZXNzbWVudCBvZgogICAgICAgICAgICAgICAgICAgICAgICB0YXguPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJCZWtrZXIiIG49IjIwIiB1bml0PSJsaW5lIiAvPkJ1dCBpbnN0ZWFkIG9mIGVhY2ggcmV0dXJuaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIGVudGlyZSBhbW91bnQgdG8gaGlzIG93biBwYXJpc2gsIHByb3BlcnRpZXMgd2VyZSB0byBiZSBhc3Nlc3NlZCBzZXBhcmF0ZWx5LAogICAgICAgICAgICAgICAgICAgIGVhY2ggaW4gaXRzIG93biBsb2NhbGl0eSwgc28gdGhhdCB0aGUgcG9vciBtaWdodCBwcm9wb3NlIGEgcmVkdWNlZCBhc3Nlc3NtZW50OwogICAgICAgICAgICAgICAgICAgIHdoaWxlIHRob3NlIHdpdGhvdXQgYW55ICZsdDtsYW5kZWQmZ3Q7IHByb3BlcnR5IHdlcmUgYXNzZXNzZWQgYXQgdHdvCiAgICAgICAgICAgICAgICAgICAgbWluYWUgYSBoZWFkLiBPbiB0aGVzZSBhc3Nlc3NtZW50cyBlYWNoIG1hbiBwYWlkIHRoZSBTdGF0ZSB0aGUgZnVsbCBhbW91bnQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgd2FyLXRheC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['2.1347b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi42IiB1bml0PSJMb2ViIGNoYXAiIC8+IFRoZSBjaXR5IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW50aXNzYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW50aXNzYSI+QW50aXNzYTwvcGxhY2VOYW1lPiBoYWQgYmVlbiBhY2N1c3RvbWVkIHRvIGNlbGVicmF0ZSB0aGUgZmVzdGl2YWwgb2YgRGlvbnlzdXMKICAgICAgICAgICAgICAgICAgICB3aXRoIGdyZWF0IG1hZ25pZmljZW5jZS4gWWVhciBieSB5ZWFyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9yICJBbGwKICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCB0aGUgeWVhci4iIDwvbm90ZT4gZ3JlYXQgcHJvdmlzaW9uIHdhcyBtYWRlIGZvciB0aGUgb2NjYXNpb24sIGFuZAogICAgICAgICAgICAgICAgICAgIGNvc3RseSBzYWNyaWZpY2VzIHdlcmUgcHJlcGFyZWQuIE5vdyBvbmUgeWVhciB0aGUgY2l0eSBmb3VuZCBpdHNlbGYgaW4gbmVlZCBvZgogICAgICAgICAgICAgICAgICAgIGZ1bmRzOyBhbmQgc2hvcnRseSBiZWZvcmUgdGhlIGZlc3RpdmFsLCBvbiB0aGUgcHJvcG9zYWwgb2YgYSBjaXRpemVuIG5hbWVkCiAgICAgICAgICAgICAgICAgICAgU29zaXBvbGlzLCB0aGUgcGVvcGxlIGFmdGVyIHZvd2luZyB0aGF0IHRoZXkgd291bGQgbmV4dCB5ZWFyIG9mZmVyIHRvIERpb255c3VzIGEKICAgICAgICAgICAgICAgICAgICBkb3VibGUgYW1vdW50LCBjb2xsZWN0ZWQgYWxsIHRoYXQgaGFkIGJlZW4gcHJvdmlkZWQgYW5kIHNvbGQgaXQuIEluIHRoaXMgd2F5CiAgICAgICAgICAgICAgICAgICAgdGhleSByZWFsaXplZCBhIGxhcmdlIHN1bSBvZiBtb25leSB0byBtZWV0IHRoZWlyIG5lY2Vzc2l0eS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSIyLjciIHVuaXQ9IkxvZWIgY2hhcCIgLz4gT24gb25lIG9jY2FzaW9uCiAgICAgICAgICAgICAgICAgICAgdGhlIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLExhbXBzYWtvcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTGFtcHNha29zIj5MYW1wc2FjdXM8L3BsYWNlTmFtZT4gd2VyZSBleHBlY3RpbmcKICAgICAgICAgICAgICAgICAgICB0byBiZSBhdHRhY2tlZCBieSBhIGxhcmdlIGZsZWV0IG9mIHRyaXJlbWVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5XYXItc2hpcHMsIGVhY2ggcHJvcGVsbGVkIGJ5IHNvbWUgMTc0IHJvd2VycyByYW5rZWQgaW4gdGhyZWUgdGllcnMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIFRoZSBwcmljZSBvZiBiYXJsZXkgbWVhbCBiZWluZyB0aGVuIGZvdXIgZHJhY2htYWUgZm9yIGEgYnVzaGVsIGFuZCBhIGhhbGYsIHRoZXkKICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGVkIHRoZSByZXRhaWxlcnMgdG8gc2VsbCBpdCBhdCBzaXggZHJhY2htYWUuIE9pbCwgd2hpY2ggd2FzIGF0IHRocmVlCiAgICAgICAgICAgICAgICAgICAgZHJhY2htYWUgZm9yIHNpeCBwaW50cywgd2FzIHRvIGJlIHNvbGQgYXQgZm91ciBkcmFjaG1hZSBhbmQgYSBoYWxmLCBhbmQgd2luZSBhbmQKICAgICAgICAgICAgICAgICAgICBvdGhlciBjb21tb2RpdGllcyBhdCBhIHByb3BvcnRpb25hdGUgaW5jcmVhc2UuIEluIHRoaXMgd2F5IHRoZSByZXRhaWxlciBnb3QgdGhlCiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWwgcHJpY2UsIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQ3YiIgdW5pdD0ic2VjdGlvbiIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1347b.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPndoaWxlIHRoZSBTdGF0ZSB0b29rIHRoZSBhZGRpdGlvbiBhbmQgZmlsbGVkIGl0cwogICAgICAgICAgICAgICAgICAgICAgICB0cmVhc3VyeS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['2.1347b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi44IiB1bml0PSJMb2ViIGNoYXAiIC8+IFRoZSBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTg3NjkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxODc2OSI+SGVyYWNsZWE8L3BsYWNlTmFtZT4sIGJlaW5nIGFib3V0IHRvIGRpc3BhdGNoIGEgZmxlZXQgb2YgZm9ydHkgc2hpcHMgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZSBsb3JkcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTExNTA2OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTE1MDY4Ij5Cb3Nwb3J1czwvcGxhY2VOYW1lPiwgd2VyZSBhdCBhIGxvc3MKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIG5lY2Vzc2FyeSBmdW5kcy4gVGhleSB0aGVyZWZvcmUgYm91Z2h0IHVwIGFsbCB0aGUgbWVyY2hhbnRzJyBzdG9jayBvZgogICAgICAgICAgICAgICAgICAgIGNvcm4gYW5kIG9pbCBhbmQgd2luZSBhbmQgb3RoZXIgbWFya2V0YWJsZSBjb21tb2RpdGllcywgYWdyZWVpbmcgdG8gcGF5IGF0IGEKICAgICAgICAgICAgICAgICAgICBmdXR1cmUgZGF0ZS4gVGhlIG1lcmNoYW50cyB3ZXJlIHdlbGwgc2F0aXNmaWVkIHRoYXQgdGhleSBoYWQgZGlzcG9zZWQgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBjYXJnb2VzIHdpdGhvdXQgYnJlYWtpbmcgYnVsazsgYW5kIHRoZSBwZW9wbGUsIGFkdmFuY2luZyB0d28gbW9udGhzJyBwYXkgdG8KICAgICAgICAgICAgICAgICAgICB0aGVpciBhcm1hbWVudCwgc2VudCBhbG9uZyB3aXRoIGl0IGEgZmxlZXQgb2YgbWVyY2hhbnQtdmVzc2VscyBsYWRlbiB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbW1vZGl0aWVzLCBldmVyeSBzaGlwIGJlaW5nIGluIGNoYXJnZSBvZiBhIHB1YmxpYyBvZmZpY2lhbC4gV2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBleHBlZGl0aW9uIHJlYWNoZWQgaXRzIGdvYWwsIHRoZSBtZW4gcHVyY2hhc2VkIGZyb20gdGhlc2Ugb2ZmaWNpYWxzIGFsbCB0aGV5CiAgICAgICAgICAgICAgICAgICAgbmVlZGVkLiBJbiB0aGlzIHdheSwgdGhlIG1vbmV5IHdhcyBjb2xsZWN0ZWQgYmVmb3JlIHRoZSBsZWFkZXJzIGFnYWluIHBhaWQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBtZW47IHNvIHRoYXQgdGhlIHNhbWUgcGF5bWVudCBzdWZmaWNlZCB1bnRpbCB0aGUgZXhwZWRpdGlvbiByZXR1cm5lZAogICAgICAgICAgICAgICAgICAgICAgICBob21lLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjIuOSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBXaGVuIHRoZSBTYW1pYW5zIGVudHJlYXRlZCB0aGUgTGFjZWRhZW1vbmlhbnMgZm9yIG1vbmV5CiAgICAgICAgICAgICAgICAgICAgdG8gZW5hYmxlIHRoZW0gdG8gcmV0dXJuIHRvIHRoZWlyIGNvdW50cnksIHRoZSBMYWNlZGFlbW9uaWFucyBwYXNzZWQgYQogICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb24gdGhhdCB0aGV5IGFuZCB0aGVpciBzZXJ2YW50cyBhbmQgdGhlaXIgYmVhc3RzIG9mIGJ1cmRlbiBzaG91bGQgZ28KICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGZvb2QgZm9yIG9uZSBkYXk7IGFuZCB0aGF0IHRoZSBleHBlbnNlIGVhY2ggb25lIHRodXMgc2F2ZWQgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gdG8gdGhlIFNhbWlhbnMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJCZWtrZXIiIG49IjIwIiB1bml0PSJsaW5lIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1348a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4xMCIgdW5pdD0iTG9lYiBjaGFwIiAvPiBUaGUgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDaGFsY2Vkb24iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENoYWxjZWRvbiI+Q2hhbGNlZG9uPC9wbGFjZU5hbWU+IGhhZCBhIGxhcmdlIG51bWJlcgogICAgICAgICAgICAgICAgICAgIG9mIG1lcmNlbmFyeSB0cm9vcHMgaW4gdGhlaXIgY2l0eSwgdG8gd2hvbSB0aGV5IGNvdWxkIG5vdCBwYXkgdGhlIHdhZ2VzIHRoZXkKICAgICAgICAgICAgICAgICAgICBvd2VkLiBBY2NvcmRpbmdseSB0aGV5IG1hZGUgcHJvY2xhbWF0aW9uIHRoYXQgYW55b25lLCBlaXRoZXIgY2l0aXplbiBvciBhbGllbiwKICAgICAgICAgICAgICAgICAgICB3aG8gaGFkIHJpZ2h0IG9mIHJlcHJpc2FsIGFnYWluc3QgYW55IGNpdHkgb3IgaW5kaXZpZHVhbCwgYW5kIHdpc2hlZCB0byBleGVyY2lzZQogICAgICAgICAgICAgICAgICAgIGl0LCBzaG91bGQgaGF2ZSBoaXMgbmFtZSBlbnRlcmVkIG9uIGEgbGlzdC4gQSBsYXJnZSBudW1iZXIgb2YgbmFtZXMgd2FzCiAgICAgICAgICAgICAgICAgICAgZW5yb2xsZWQsIGFuZCB0aGUgcGVvcGxlIHRodXMgb2J0YWluZWQgYSBzcGVjaW91cyBwcmV0ZXh0IGZvciBleGVyY2lzaW5nCiAgICAgICAgICAgICAgICAgICAgcmVwcmlzYWwgdXBvbiBzaGlwcyB0aGF0IHdlcmUgcGFzc2luZyBvbiB0aGVpciB3YXkgdG8gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjE5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPi4gVGhleSBhY2NvcmRpbmdseSBhcnJlc3RlZCB0aGUgc2hpcHMKICAgICAgICAgICAgICAgICAgICBhbmQgZml4ZWQgYSBwZXJpb2Qgd2l0aGluIHdoaWNoIHRoZXkgd291bGQgY29uc2lkZXIgYW55IGNsYWltcyB0aGF0IG1pZ2h0IGJlCiAgICAgICAgICAgICAgICAgICAgbWFkZSBpbiByZXNwZWN0IG9mIHRoZW0uIEhhdmluZyBub3cgYSBsYXJnZSBmdW5kIGluIGhhbmQsIHRoZXkgcGFpZCBvZmYgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVyY2VuYXJpZXMsIGFuZCBzZXQgdXAgYSB0cmlidW5hbCB0byBkZWNpZGUgdGhlIGNsYWltczsgYW5kIHRob3NlIHdob3NlIGdvb2RzCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gdW5qdXN0bHkgc2VpemVkIHdlcmUgY29tcGVuc2F0ZWQgb3V0IG9mIHRoZSByZXZlbnVlcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4xMSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBBdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEN5emljdXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEN5emljdXMiPkN5emljdXM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgY2l2aWwgc3RyaWZlIGJyb2tlIG91dCBiZXR3ZWVuIHRoZSBkZW1vY3JhdGljIGFuZCBvbGlnYXJjaGljIHBhcnRpZXMuIFRoZSBmb3JtZXIKICAgICAgICAgICAgICAgICAgICBwcm92ZWQgdmljdG9yaW91cywgYW5kIHRoZSByaWNoIGNpdGl6ZW5zIHdlcmUgcGxhY2VkIHVuZGVyIGFycmVzdC4gQnV0IGFzIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHkgb3dlZCBtb25leSB0byBpdHMgdHJvb3BzLCBhIHJlc29sdXRpb24gd2FzIHBhc3NlZCB0aGF0IHRoZSBsaXZlcyBvZiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHVuZGVyIGFycmVzdCBzaG91bGQgYmUgc3BhcmVkLCBhbmQgdGhhdCB0aGV5IHNob3VsZCBiZSBhbGxvd2VkIHRvIGRlcGFydCBpbnRvCiAgICAgICAgICAgICAgICAgICAgZXhpbGUgb24gcGF5aW5nIGEgc3VtIG9mIG1vbmV5IHRvIHRoZSBzdGF0ZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSIyLjEyIiB1bml0PSJMb2ViIGNoYXAiIC8+IEF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2hpb3MgQ2l0eSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2hpb3MgQ2l0eSI+Q2hpb3M8L3BsYWNlTmFtZT4gdGhlcmUgd2FzIGEgbGF3IHRoYXQgYWxsIGRlYnRzIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGVudGVyZWQgb24gYSBwdWJsaWMgcmVnaXN0ZXIuIEJlaW5nIGluIG5lZWQgb2YgZnVuZHMsIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQ4YSIgdW5pdD0ic2VjdGlvbiIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1348a.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPnRoZSBwZW9wbGUKICAgICAgICAgICAgICAgICAgICByZXNvbHZlZCB0aGF0IGRlYnRvcnMgc2hvdWxkIHBheSB0aGVpciBkZWJ0cyBpbnRvIHRoZSB0cmVhc3VyeSwgYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhdGUgc2hvdWxkIG1lZXQgdGhlIGNyZWRpdG9ycycgaW50ZXJlc3Qgb3V0IG9mIGl0cyByZXZlbnVlcyB1bnRpbCBpdHMgZm9ybWVyCiAgICAgICAgICAgICAgICAgICAgcHJvc3Blcml0eSByZXR1cm5lZC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['2.1348a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4xMyIgdW5pdD0iTG9lYiBjaGFwIiAvPiBNYXVzb2x1cyBsb3JkIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzU4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNTgiPkNhcmlhPC9wbGFjZU5hbWU+IHJlY2VpdmVkIGZyb20gdGhlIEtpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDAyMzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDIzMSI+UGVyc2lhPC9wbGFjZU5hbWU+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlByb2JhYmx5IEFydGF4ZXJ4ZXMgSUkuCiAgICAgICAgICAgICAgICAgICAgICAgIHdobyByZWlnbmVkIDxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii00MDUvLTM1OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItNDA1IiB0bz0iLTM1OSI+NDA1PC9kYXRlUmFuZ2U+LTM1OQogICAgICAgICAgICAgICAgICAgIEIuQy48L25vdGU+IGEgZGVtYW5kIGZvciB0cmlidXRlLiBUaGVyZWZvcmUgaGUgc3VtbW9uZWQgdGhlIHdlYWx0aGllc3QgbWVuIGluCiAgICAgICAgICAgICAgICAgICAgaGlzIGRvbWluaW9uLCBhbmQgdG9sZCB0aGVtIHRoYXQgdGhlIEtpbmcgd2FzIGFza2luZyBmb3IgdGhlIHRyaWJ1dGUsIGFuZCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBub3QgdGhlIG1lYW5zIG9mIHBheWluZyBpdC4gTWVuIHdob20gaGUgaGFkIHByZXZpb3VzbHkgc3Vib3JuZWQgYXQgb25jZSBjYW1lCiAgICAgICAgICAgICAgICAgICAgZm9yd2FyZCBhbmQgZGVjbGFyZWQgd2hhdCBlYWNoIHdhcyByZWFkeSB0byBjb250cmlidXRlLiBXaXRoIHRoaXMgZXhhbXBsZSBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB0aGVtLCB0aGV5IHdobyB3ZXJlIHdlYWx0aGllciB0aGFuIHRoZXNlLCBwYXJ0bHkgaW4gc2hhbWUgYW5kIHBhcnRseSBpbiBhbGFybSwKICAgICAgICAgICAgICAgICAgICBwcm9taXNlZCBhbmQgcGFpZCBtdWNoIGxhcmdlciBzdW1zIHRoYW4gdGhlIG90aGVycy48ZGF0ZVJhbmdlIGF1dGhuYW1lPSItNDA1Ly0zNTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTQwNSIgdG89Ii0zNTkiPjQwNTwvZGF0ZVJhbmdlPi0zNTkKICAgICAgICAgICAgICAgICAgICBCLkMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJlaW5nIGFnYWluIGluIGxhY2sgb2YgZnVuZHMsIE1hdXNvbHVzIHN1bW1vbmVkIGEgcHVibGljIG1lZXRpbmcgb2YgdGhlIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIG9mIE15bGFzc2EgYW5kIHRvbGQgdGhlbSB0aGF0IHRoZSBLaW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPiB3YXMgcHJlcGFyaW5nIHRvIGF0dGFjayBoaW07IGFuZCB0aGF0IE15bGFzc2EgaGlzIGNhcGl0YWwKICAgICAgICAgICAgICAgICAgICBjaXR5IHdhcyB1bmZvcnRpZmllZC4gSGUgdGhlcmVmb3JlIGJhZGUgdGhlIGNpdGl6ZW5zIGNvbnRyaWJ1dGUgZWFjaCBhcwogICAgICAgICAgICAgICAgICAgIGxpYmVyYWxseSBhcyBoZSBjb3VsZCwgc2F5aW5nIHRoYXQgd2hhdCB0aGV5IG5vdyBwYWlkIGluIHdvdWxkIGFmZm9yZCBzZWN1cml0eQogICAgICAgICAgICAgICAgICAgIHRvIHRoZSByZXN0IG9mIHRoZWlyIHBvc3Nlc3Npb25zLiBCeSB0aGVzZSBtZWFucyBoZSBvYnRhaW5lZCBsYXJnZQogICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnMuIEJ1dCB0aG91Z2ggaGUga2VwdCB0aGUgbW9uZXksIGhlIGRlY2xhcmVkIHRoYXQgaGVhdmVuLCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCwgZm9yYmFkZSB0aGUgYnVpbGRpbmcgb2YgdGhlIHdhbGxzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjIuMTQiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gQ29uZGFsdXMsIHdobyB3YXMgYQogICAgICAgICAgICAgICAgICAgIGxpZXV0ZW5hbnQtZ292ZXJub3IgdW5kZXIgTWF1c29sdXMsIHdoZW5ldmVyIG9uIGhpcyBwcm9ncmVzcyB0aHJvdWdoIHRoZSBjb3VudHJ5CiAgICAgICAgICAgICAgICAgICAgaGUgd2FzIHByZXNlbnRlZCB3aXRoIGEgc2hlZXAsPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJCZWtrZXIiIG49IjIwIiB1bml0PSJsaW5lIiAvPmEgcGlnLAogICAgICAgICAgICAgICAgICAgIG9yIGEgY2FsZiwgaGFkIGEgcmVjb3JkIG1hZGUgb2YgdGhlIGRvbm9yJ3MgbmFtZSBhbmQgb2YgdGhlIGRhdGUuIEhlIHRoZW4gYmFkZQogICAgICAgICAgICAgICAgICAgIHRoZSBtYW4gdGFrZSB0aGUgYmVhc3QgaG9tZSBhbmQga2VlcCBpdCB1bnRpbCBoZSBzaG91bGQgYWdhaW4gcGFzcyB0aGF0IHdheS4KICAgICAgICAgICAgICAgICAgICBBZnRlciB3aGF0IGhlIGNvbnNpZGVyZWQgYSBzdWZmaWNpZW50IGludGVydmFsLCBoZSB3b3VsZCBkZW1hbmQgdGhlIGJlYXN0CiAgICAgICAgICAgICAgICAgICAgdG9nZXRoZXIgd2l0aCBzdWNoIHByb2ZpdHMgYXMgaGUgcmVja29uZWQgaXQgaGFkIHByb2R1Y2VkLiBBbGwgdHJlZXMsIHRvbywgd2hpY2gKICAgICAgICAgICAgICAgICAgICBwcm9qZWN0ZWQgb3ZlciB0aGUga2luZydzIGhpZ2h3YXksIG9yIGZlbGwgdGhlcmVvbiwgaGUgc29sZCBhcyBwcm9maXRzIGFjY3J1aW5nCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIFN0YXRlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGVuIG9uZSBvZiBoaXMgc29sZGllcnMgZGllZCwgaGUKICAgICAgICAgICAgICAgICAgICBjaGFyZ2VkIGEgZHJhY2htYSBmb3IgdGhlIHJpZ2h0IG9mIHBhc3NpbmcgdGhlIGJvZHkgdGhyb3VnaCB0aGUgZ2F0ZXMuIFRoaXMgd2FzCiAgICAgICAgICAgICAgICAgICAgbm90IG9ubHkgYSBzb3VyY2Ugb2YgcmV2ZW51ZSwgYnV0IGEgY2hlY2sgb24gdGhlIGNvbW1hbmRlcnMsIHdobyB3ZXJlIHRodXMKICAgICAgICAgICAgICAgICAgICBwcmV2ZW50ZWQgZnJvbSBmYWxzaWZ5aW5nIHRoZSBkYXRlIG9mIHRoZSBtYW4ncyBkZWF0aC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm90aWNpbmcgdGhhdCB0aGUgTHljaWFucyB3ZXJlIGZvbmQgb2Ygd2VhcmluZyB0aGVpciBoYWlyIGxvbmcsCiAgICAgICAgICAgICAgICAgICAgQ29uZGFsdXMgcHJvY2xhaW1lZCB0aGF0IGEgZGlzcGF0Y2ggaGFkIGFycml2ZWQgZnJvbSB0aGUgS2luZyBvcmRlcmluZyBoaW0gdG8KICAgICAgICAgICAgICAgICAgICBzZW5kIGhhaXIgdG8gbWFrZSBmb3JlbG9ja3MgZm9yIGhpcyBob3JzZXM7IGFuZCB0aGF0IE1hdXNvbHVzIGhhZCB0aGVyZWZvcmUKICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGVkIGhpbSB0byBzaGF2ZSB0aGVpciBoZWFkcy4gSG93ZXZlciwgaWYgdGhleSB3b3VsZCBwYXkgaGltIGEgZml4ZWQgc3VtCiAgICAgICAgICAgICAgICAgICAgcGVyIGhlYWQsIGhlIHdvdWxkIHNlbmQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IGZvcgogICAgICAgICAgICAgICAgICAgIGhhaXIuIFRoZXkgd2VyZSBnbGFkIHRvIGNvbXBseSB3aXRoIGhpcyBkZW1hbmQsIGFuZCBhIGxhcmdlIHN1bSB3YXMgY29sbGVjdGVkLAogICAgICAgICAgICAgICAgICAgIHRoZSBudW1iZXIgb2YgdGhvc2UgdGF4ZWQgYmVpbmcgZ3JlYXQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1348b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4xNSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBBcmlzdG90ZWxlcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk1lbnRpb25lZCBieSBQcm9jbHVzIGluIGhpcyBjb21tZW50YXJ5IG9uIHRoZSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaW1hZXVzPC90aXRsZT4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGxhdG8uIEEgY29pbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxODAwMCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE4MDAwIj5QaG9jYWVhPC9wbGFjZU5hbWU+IGlzIGV4dGFudAogICAgICAgICAgICAgICAgICAgICAgICBiZWFyaW5nIHRoZSBuYW1lLjwvbm90ZT4gd2hlbiBnb3Zlcm5vciBvZiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaW1hZXVzPC90aXRsZT4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGxhdG8uIEEgY29pbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxODAwMCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE4MDAwIj5QaG9jYWVhPC9wbGFjZU5hbWU+IGlzIGV4dGFudAogICAgICAgICAgICAgICAgICAgICAgICBiZWFyaW5nIHRoZSBuYW1lLjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE4MDAwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTgwMDAiPlBob2NhZWE8L3BsYWNlTmFtZT4sIGZvdW5kIGhpbXNlbGYgaW4gbmVlZCBvZiBmdW5kcy4gTm90aWNpbmcgdGhhdCB0aGVyZQogICAgICAgICAgICAgICAgICAgIHdlcmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTgwMDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxODAwMCI+UGhvY2FlYTwvcGxhY2VOYW1lPiB0d28gb3Bwb3NpbmcgcGFydGllcywKICAgICAgICAgICAgICAgICAgICBoZSBoZWxkIGEgc2VjcmV0IGNvbmZlcmVuY2Ugd2l0aCBvbmUgb2YgdGhlbSwgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzNDhiIiB1bml0PSJzZWN0aW9uIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1348b.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPmF0IHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgZGVjbGFyZWQgdGhhdCB0aGUgb3RoZXIgcGFydHkgd2FzIG9mZmVyaW5nIGhpbSBtb25leSBpZiBoZSB3b3VsZCBmYXZvciB0aGVpcgogICAgICAgICAgICAgICAgICAgIHByZXRlbnNpb25zOyB0aGF0IGhlLCBob3dldmVyLCBwcmVmZXJyZWQgdG8gcmVjZWl2ZSBmcm9tIHRob3NlIG5vdyBiZWZvcmUgaGltLAogICAgICAgICAgICAgICAgICAgIGFuZCB0byBlbnRydXN0IHRvIHRoZW0gdGhlIGFkbWluaXN0cmF0aW9uIG9mIHRoZSBjaXR5LiBPbiBoZWFyaW5nIHRoaXMsIHRoZXkKICAgICAgICAgICAgICAgICAgICBpbW1lZGlhdGVseSBjb250cmlidXRlZCB0aGUgbW9uZXkgaGUgYXNrZWQsIGFuZCBnYXZlIGl0IGhpbS4gVGhlcmV1cG9uIGhlIHRvbGQKICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgcGFydHkgd2hhdCBoZSBoYWQgcmVjZWl2ZWQgZnJvbSB0aGVtOyBhbmQgdGhleSBpbiB0dXJuIHByb21pc2VkIGhpbSBhdAogICAgICAgICAgICAgICAgICAgIGxlYXN0IGFuIGVxdWFsIGFtb3VudC4gSGF2aW5nIHRodXMgdGFrZW4gdGhlIG1vbmV5IG9mIGJvdGggZmFjdGlvbnMsIGhlIGVmZmVjdGVkCiAgICAgICAgICAgICAgICAgICAgYSByZWNvbmNpbGlhdGlvbiBiZXR3ZWVuIHRoZW0uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhlIGFsc28gb2JzZXJ2ZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXJlIHdlcmUgbWFueSBsYXctc3VpdHMgcGVuZGluZyBiZXR3ZWVuIHRoZSBjaXRpemVucywgYW5kIHRoYXQgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBncmF2ZSBhbmQgbG9uZy1zdGFuZGluZyBwbGFpbnRzIGFnYWluc3Qgb25lIGFub3RoZXIgd2hpY2ggaGFkIGFyaXNlbiBpbiBjb3Vyc2UKICAgICAgICAgICAgICAgICAgICBvZiB3YXIuIEhlIHRoZXJlZm9yZSBhcHBvaW50ZWQgYSB0cmlidW5hbCwgYW5kIG1hZGUgcHJvY2xhbWF0aW9uIHRoYXQgYWxsIHdobwogICAgICAgICAgICAgICAgICAgIGZhaWxlZCB0byBhcHBlYXIgYmVmb3JlIGl0IHdpdGhpbiBhIHN0YXRlZCBwZXJpb2Qgc2hvdWxkIGxvc2UgdGhlIHJpZ2h0IHRvIGEKICAgICAgICAgICAgICAgICAgICBsZWdhbCBkZWNpc2lvbiBvZiB0aGVpciBvdXRzdGFuZGluZyBjbGFpbXMuIFRoZW4sIGJ5IHRha2luZyBpbnRvIGhpcyBvd24gaGFuZHMKICAgICAgICAgICAgICAgICAgICB0aGUgY291cnQtZmVlcyBmb3IgYSBudW1iZXIgb2Ygc3VpdHMsIGFuZCBhbHNvIHRob3NlIGFwcGVhbC1jYXNlcyB3aGljaCBpbnZvbHZlZAogICAgICAgICAgICAgICAgICAgIHBlbmFsdGllcywgYW5kIHJlY2VpdmluZyBbdGhyb3VnaCBvdGhlcnNdIG1vbmV5IGZyb20gYm90aCBzaWRlcywgaGUgb2J0YWluZWQKICAgICAgICAgICAgICAgICAgICBhbHRvZ2V0aGVyIGEgdmVyeSBjb25zaWRlcmFibGUgc3VtLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1348b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4xNiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBUaGUgcGVvcGxlIG9mIENsYXpvbWVuYWUsIHN1ZmZlcmluZyBmcm9tCiAgICAgICAgICAgICAgICAgICAgZGVhcnRoIG9mIGdyYWluIGFuZCBzY2FyY2l0eSBvZiBmdW5kcywgcGFzc2VkIGEgcmVzb2x1dGlvbiB0aGF0IGFueSBwcml2YXRlCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnMgd2hvIGhhZCBzdG9yZXMgb2Ygb2lsIHNob3VsZCBsZW5kIGl0IHRvIHRoZSBTdGF0ZSBhdAogICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdDs8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMjAiIHVuaXQ9ImxpbmUiIC8+dGhpcyBiZWluZyBhIHByb2R1Y2UKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGVpciBsYW5kIGJlYXJzIGluIGFidW5kYW5jZS4gVGhlIGxvYW4gYXJyYW5nZWQsIHRoZXkgaGlyZWQgdmVzc2VscyBhbmQKICAgICAgICAgICAgICAgICAgICBzZW50IHRoZW0gdG8gdGhlIGRlcG90cyB3aGVuY2UgdGhleSBvYnRhaW5lZCB0aGVpciBncmFpbiwgJmx0O2FuZCBib3VnaHQgYQogICAgICAgICAgICAgICAgICAgIGNvbnNpZ25tZW50Jmd0OyBvbiBzZWN1cml0eSBvZiB0aGUgdmFsdWUgb2YgdGhlIG9pbC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHNhbWUgcGVvcGxlLCBvd2luZyB0aGVpciBtZXJjZW5hcmllcyB0d2VudHkgdGFsZW50cyBvZiBwYXkKICAgICAgICAgICAgICAgICAgICBhbmQgYmVpbmcgdW5hYmxlIHRvIGZpbmQgaXQsIHdlcmUgZ2l2aW5nIHRoZSBsZWFkZXJzIG9mIHRoZSB0cm9vcCBmb3VyIHRhbGVudHMKICAgICAgICAgICAgICAgICAgICBvZiBpbnRlcmVzdCBlYWNoIHllYXIuIEJ1dCBmYWlsaW5nIHRvIHJlZHVjZSB0aGUgY2FwaXRhbCBkZWJ0LCBhbmQgY29tbWl0dGVkIHRvCiAgICAgICAgICAgICAgICAgICAgdGhpcyBmcnVpdGxlc3MgZHJhaW4gb24gdGhlaXIgcmV2ZW51ZSwgdGhleSBzdHJ1Y2sgYW4gaXJvbiBjb2luYWdlIG9mIHR3ZW50eQogICAgICAgICAgICAgICAgICAgIHRhbGVudHMsIGJlYXJpbmcgdGhlIGZhY2UtdmFsdWUgb2YgdGhlIHNpbHZlci4gVGhpcyB0aGV5IGRpc3RyaWJ1dGVkCiAgICAgICAgICAgICAgICAgICAgcHJvcG9ydGlvbmF0ZWx5IGFtb25nIHRoZSB3ZWFsdGhpZXN0IGNpdGl6ZW5zLCBhbmQgcmVjZWl2ZWQgZnJvbSB0aGVtIHNpbHZlciB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIGFtb3VudC4gVGhyb3VnaCB0aGlzIGV4cGVkaWVudCwgdGhlIHByaXZhdGUgY2l0aXplbnMgcG9zc2Vzc2VkIGEKICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeSB3aGljaCB3YXMgZ29vZCBmb3IgdGhlaXIgZGFpbHkgbmVlZHMsIGFuZCB0aGUgc3RhdGUgd2FzIHJlbGlldmVkIG9mIGl0cwogICAgICAgICAgICAgICAgICAgIGRlYnQuIE5leHQsIHRoZXkgcHJvY2VlZGVkIHRvIHBheSBpbnRlcmVzdCBvdXQgb2YgcmV2ZW51ZSB0byB0aG9zZSB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgYWR2YW5jZWQgdGhlIHNpbHZlcjsgYW5kIGxpdHRsZSBieSBsaXR0bGUgZGlzdHJpYnV0ZWQgcmVwYXltZW50IGFtb25nIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgcmVjYWxsaW5nIGF0IHRoZSBzYW1lIHRpbWUgdGhlIGN1cnJlbmN5IG9mIGlyb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMS4xIiB2YWxpZD0ieWVzIj5QbHV0LiBMeWN1cmd1czwvYmlibD4gc3BlYWtzIG9mIGFuIGlyb24KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVuY3kgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+LCBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU2VuLiBCZW4uIDEuMSIgdmFsaWQ9InllcyI+U2VuZWNhIERlIGJlbmVmaWNpaXM8L2JpYmw+IG9mIGEgbGVhdGhlciBvbmUuIFRoZXNlLAogICAgICAgICAgICAgICAgICAgICAgICBub3QgYmVpbmcgZXhjaGFuZ2VhYmxlIGFicm9hZCwgdGhyZXcgdGhlIG5hdGlvbiB1cG9uIGl0cyBvd24gcmVzb3VyY2VzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50ZWQgdGhlIGltcG9ydCBvZiBsdXh1cmllcy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxLjEiIHZhbGlkPSJ5ZXMiPlBsdXQuIEx5Y3VyZ3VzPC9iaWJsPiBzcGVha3Mgb2YgYW4gaXJvbgogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4sIGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTZW4uIEJlbi4gMS4xIiB2YWxpZD0ieWVzIj5TZW5lY2EgRGUgYmVuZWZpY2lpczwvYmlibD4gb2YgYSBsZWF0aGVyIG9uZS4gVGhlc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBiZWluZyBleGNoYW5nZWFibGUgYWJyb2FkLCB0aHJldyB0aGUgbmF0aW9uIHVwb24gaXRzIG93biByZXNvdXJjZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnRlZCB0aGUgaW1wb3J0IG9mIGx1eHVyaWVzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1349a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4xNyIgdW5pdD0iTG9lYiBjaGFwIiAvPiBUaGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgb2YgU2VseWJyaWEgaGFkIGEgbGF3LCBwYXNzZWQgaW4gdGltZSBvZiBmYW1pbmUsIHdoaWNoIGZvcmJhZGUgdGhlIGV4cG9ydAogICAgICAgICAgICAgICAgICAgIG9mIGdyYWluLiBPbiBvbmUgb2NjYXNpb24sIGhvd2V2ZXIsIHRoZXkgd2VyZSBpbiBuZWVkIG9mIGZ1bmRzOyBhbmQgYXMgdGhleQogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3NlZCBsYXJnZSBzdG9yZXMgb2YgZ3JhaW4sIHRoZXkgcGFzc2VkIGEgcmVzb2x1dGlvbiB0aGF0IGNpdGl6ZW5zIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGRlbGl2ZXIgdXAgdGhlaXIgY29ybiB0byB0aGUgc3RhdGUgYXQgdGhlIHJlZ3VsYXIgZml4ZWQgcHJpY2UsIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQ5YSIgdW5pdD0ic2VjdGlvbiIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1349a.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPmVhY2gKICAgICAgICAgICAgICAgICAgICByZXRhaW5pbmcgZm9yIGhpbXNlbGYgYSB5ZWFyJ3Mgc3VwcGx5LiBUaGV5IHRoZW4gZ3JhbnRlZCByaWdodCBvZiBleHBvcnQgdG8gYW55CiAgICAgICAgICAgICAgICAgICAgd2hvIGRlc2lyZWQgaXQsIGZpeGluZyB3aGF0IHRoZXkgZGVlbWVkIGEgc3VpdGFibGUgcHJpY2UuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1349a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4xOCIgdW5pdD0iTG9lYiBjaGFwIiAvPiBBdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFieWRvcyxNeXNpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQWJ5ZG9zLE15c2lhIj5BYnlkb3M8L3BsYWNlTmFtZT4gY2l2aWwgc3RyaWZlIGhhZCBjYXVzZWQgdGhlIGxhbmQgdG8KICAgICAgICAgICAgICAgICAgICByZW1haW4gdW5jdWx0aXZhdGVkOyB3aGlsZSB0aGUgcmVzaWRlbnQgYWxpZW5zLCB0byB3aG9tIHRoZSBjaXR5IHdhcyBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgaW5kZWJ0ZWQsIHJlZnVzZWQgdG8gbWFrZSBhbnkgZnVydGhlciBhZHZhbmNlcy4gQSByZXNvbHV0aW9uIHdhcyBhY2NvcmRpbmdseQogICAgICAgICAgICAgICAgICAgIHBhc3NlZCB0aGF0IGFueW9uZSB3aG8gd291bGQgbWlnaHQgbGVuZCBtb25leSB0byBlbmFibGUgdGhlIGZhcm1lcnMgdG8gY3VsdGl2YXRlCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbGFuZCwgb24gdGhlIHVuZGVyc3RhbmRpbmcgdGhhdCB0aGUgbGVuZGVyIGhhZCB0aGUgZmlyc3QgY2xhaW0gb24gaXRzCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjZTsgb3RoZXJzIHRha2luZyBmcm9tIHdoYXQgd2FzIHRoZW4gbGVmdC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSIyLjE5IiB1bml0PSJMb2ViIGNoYXAiIC8+IFRoZSBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFcGhlc29zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFcGhlc29zIj5FcGhlc3VzPC9wbGFjZU5hbWU+LCBiZWluZyBpbiBuZWVkIG9mIGZ1bmRzLCBwYXNzZWQgYSBsYXcKICAgICAgICAgICAgICAgICAgICBmb3JiaWRkaW5nIHRoZWlyIHdvbWVuIHRvIHdlYXIgZ29sZCwgYW5kIG9yZGVyaW5nIHRoZW0gdG8gbGVuZCB0aGUgU3RhdGUgd2hhdAogICAgICAgICAgICAgICAgICAgIGdvbGQgdGhleSBoYWQgaW4gdGhlaXIgcG9zc2Vzc2lvbi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhleSBhbHNvCiAgICAgICAgICAgICAgICAgICAgb2ZmZXJlZCB0byBhbnkgY2l0aXplbiB3aG8gd2FzIHdpbGxpbmcgdG8gcGF5IGEgZml4ZWQgc3VtIHRoZSByaWdodCBvZiBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBoaXMgbmFtZSBpbnNjcmliZWQgb24gYSBjZXJ0YWluIHBpbGxhciBvZiB0aGVpciB0ZW1wbGU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB0ZW1wbGUsIGRlZGljYXRlZCB0byBBcnRlbWlzLCB3YXMgcmVzdG9yZWQgd2l0aCBncmVhdAogICAgICAgICAgICAgICAgICAgICAgICBtYWduaWZpY2VuY2UgYWZ0ZXIgaXRzIGRlc3RydWN0aW9uIGJ5IGZpcmUgaW4gPGRhdGUgYXV0aG5hbWU9Ii0zNTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNTYiPjM1NjwvZGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgQi5DLiBGb3IgaXRzIGZhbWUgc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFjdHMgMTkiIHZhbGlkPSJ5ZXMiPkFjdHMgMTk8L2JpYmw+LiBQb3J0aW9ucyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2N1bHB0dXJlZCBwaWxsYXJzIGFyZSB0byBiZSBzZWVuIGluIHRoZSBCcml0aXNoIE11c2V1bS48L25vdGU+IGFzIHRoZSBkb25vcgogICAgICAgICAgICAgICAgICAgICAgICB0aGVyZW9mLjxkYXRlIGF1dGhuYW1lPSItMzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzU2Ij4zNTY8L2RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIEIuQy4gRm9yIGl0cyBmYW1lIHNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBY3RzIDE5IiB2YWxpZD0ieWVzIj5BY3RzIDE5PC9iaWJsPi4gUG9ydGlvbnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNjdWxwdHVyZWQgcGlsbGFycyBhcmUgdG8gYmUgc2VlbiBpbiB0aGUgQnJpdGlzaCBNdXNldW0uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4yMCIgdW5pdD0iTG9lYiBjaGFwIiAvPiBEaW9ueXNpdXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTeXJhY3VzZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3lyYWN1c2UiPlN5cmFjdXNlPC9wbGFjZU5hbWU+LCBiZWluZyBkZXNpcm91cyBvZiBjb2xsZWN0aW5nIGZ1bmRzLCBjYWxsZWQgYSBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSwgYW5kIGRlY2xhcmVkIHRoYXQgRGVtZXRlciBoYWQgYXBwZWFyZWQgdG8gaGltLCBhbmQgYmFkZSBoaW0gY29udmV5IGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSB3b21lbidzIG9ybmFtZW50cyBpbnRvIGhlciB0ZW1wbGUuIFRoYXQgaGUgaGltc2VsZiBoYWQgZG9uZSBzbyB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIG9ybmFtZW50cyBvZiBoaXMgb3duIGhvdXNlaG9sZDsgYW5kIHRoZSBvdGhlcnMgbXVzdCBub3cgZm9sbG93IGhpcyBleGFtcGxlLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVyZWJ5IGF2b2lkIGFueSB2aXNpdGF0aW9uIG9mIHRoZSBnb2RkZXNzJ3MgYW5nZXIuIEFueW9uZSB3aG8gZmFpbGVkIHRvIGNvbXBseQogICAgICAgICAgICAgICAgICAgIHdvdWxkLCBoZSBkZWNsYXJlZCwgYmUgZ3VpbHR5IG9mIHNhY3JpbGVnZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMjAiIHVuaXQ9ImxpbmUiIC8+VGhyb3VnaCBmZWFyIG9mIHRoZSBnb2RkZXNzIGFzIHdlbGwgYXMgb2YgdGhlIGRlc3BvdCwgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGJyb3VnaHQgaW4gd2hhdGV2ZXIgdGhleSBoYWQuIFRoZW4gRGlvbnlzaXVzLCBhZnRlciBzYWNyaWZpY2luZyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBnb2RkZXNzLCByZW1vdmVkIHRoZSBvcm5hbWVudHMgdG8gaGlzIG93biB0cmVhc3VyeSBhcyBhIGxvYW4gd2hpY2ggaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgYm9ycm93ZWQgZnJvbSBoZXIuIEFzIHRpbWUgd2VudCBvbiwgdGhlIHdvbWVuIGFnYWluIGFwcGVhcmVkIHdpdGggcHJlY2lvdXMKICAgICAgICAgICAgICAgICAgICBvcm5hbWVudHMuIERpb255c2l1cyB0aGVyZXVwb24gaXNzdWVkIGEgZGVjcmVlIHRoYXQgYW55IHdvbWFuIHdobyBkZXNpcmVkIHRvCiAgICAgICAgICAgICAgICAgICAgd2VhciBnb2xkIHNob3VsZCBtYWtlIGFuIG9mZmVyaW5nIG9mIGEgZml4ZWQgYW1vdW50IGluIHRoZSB0ZW1wbGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkludGVuZGluZyB0byBidWlsZCBhIGZsZWV0IG9mIHRyaXJlbWVzLCBEaW9ueXNpdXMga25ldwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgc2hvdWxkIHJlcXVpcmUgZnVuZHMgZm9yIHRoZSBwdXJwb3NlLiBIZSB0aGVyZWZvcmUgY2FsbGVkIGFuIGFzc2VtYmx5CiAgICAgICAgICAgICAgICAgICAgYW5kIGRlY2xhcmVkIHRoYXQgYSBjZXJ0YWluIGNpdHkgd2FzIG9mZmVyZWQgdG8gaGltIGJ5IHRyYWl0b3JzLCBhbmQgaGUgbmVlZGVkCiAgICAgICAgICAgICAgICAgICAgbW9uZXkgdG8gcGF5IHRoZW0uIFRoZSBjaXRpemVucyB0aGVyZWZvcmUgbXVzdCBjb250cmlidXRlIHR3byBzdGF0ZXJzCiAgICAgICAgICAgICAgICAgICAgICAgIGFwaWVjZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHN0YXRlciB3YXMgYSBQZXJzaWFuIGdvbGQgY29pbgogICAgICAgICAgICAgICAgICAgICAgICB3b3J0aCAyMCBkcmFjaG1hZS4gKFNlZSAzLikgPC9ub3RlPiBUaGUgbW9uZXkgd2FzIHBhaWQ7IGJ1dCBhZnRlciB0d28gb3IKICAgICAgICAgICAgICAgICAgICB0aHJlZSBkYXlzLCBEaW9ueXNpdXMsIHByZXRlbmRpbmcgdGhhdCB0aGUgcGxvdCBoYWQgZmFpbGVkLCB0aGFua2VkIHRoZSBjaXRpemVucwogICAgICAgICAgICAgICAgICAgIGFuZCByZXR1cm5lZCB0byBlYWNoIGhpcyBjb250cmlidXRpb24uIEluIHRoaXMgd2F5IGhlIHdvbiB0aGUgY29uZmlkZW5jZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjaXRpemVuczsgc28gdGhhdCB3aGVuIGhlIGFnYWluIGFza2VkIGZvciBtb25leSwgdGhleSBjb250cmlidXRlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBleHBlY3RhdGlvbiB0aGF0IHRoZXkgd291bGQgcmVjZWl2ZSBpdCBiYWNrLiBCdXQgdGhpcyB0aW1lIGhlIGtlcHQgaXQgZm9yCiAgICAgICAgICAgICAgICAgICAgYnVpbGRpbmcgdGhlIGZsZWV0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5PbiBhbm90aGVyIG9jY2FzaW9uIGJlaW5nIGluCiAgICAgICAgICAgICAgICAgICAgc3RyYWl0cyBmb3Igc2lsdmVyIGhlIG1pbnRlZCBhIGNvaW5hZ2Ugb2YgdGluLCBhbmQgc3VtbW9uaW5nIGEgcHVibGljIGFzc2VtYmx5LAogICAgICAgICAgICAgICAgICAgIHNwb2tlIGF0IGxlbmd0aCBpbiBpdHMgZmF2b3IuIFRoZSBjaXRpemVucyBwZXJmb3JjZSB2b3RlZCB0aGF0IGV2ZXJ5b25lIHNob3VsZAogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCBhcyBzaWx2ZXIsIGFuZCBub3QgYXMgdGluLCB3aGF0ZXZlciBoZSByZWNlaXZlZC4gPC90cmFuc2xhdGlvbj4="
translation['2.1349b.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQ5YiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMSIgdW5pdD0ibGluZSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4gYmVpbmcgaW4gbmVlZCBvZiBmdW5kcywgaGUgcmVxdWVzdGVkIHRoZSBjaXRpemVucyB0bwogICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGUuIE9uIHRoZWlyIGRlY2xhcmluZyB0aGF0IHRoZXkgaGFkIG5vdCB0aGUgd2hlcmV3aXRoYWwsIGhlIGJyb3VnaHQgb3V0CiAgICAgICAgICAgICAgICAgICAgdGhlIGZ1cm5pc2hpbmdzIG9mIGhpcyBwYWxhY2UgYW5kIG9mZmVyZWQgdGhlbSBmb3Igc2FsZSwgcHJldGVuZGluZyB0byBiZQogICAgICAgICAgICAgICAgICAgIGNvbXBlbGxlZCB0aHJvdWdoIGxhY2sgb2YgbW9uZXkuIEF0IHRoZSBzYWxlLCBoZSBoYWQgYSBsaXN0IG1hZGUgb2YgdGhlIGFydGljbGVzCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZWlyIHB1cmNoYXNlcnM7IGFuZCB3aGVuIHRoZXkgaGFkIGFsbCBwYWlkLCBoZSBjb21tYW5kZWQgZXZlcnkgb25lIHRvCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgYmFjayB0aGUgYXJ0aWNsZSBoZSBoYWQgYm91Z2h0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5GaW5kaW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIG9mIGhpcyBpbXBvc3RzIHRoZSBjaXRpemVucyB3ZXJlIGNlYXNpbmcgdG8gcmVhciBzaGVlcCBhbmQgY2F0dGxlLCBoZQogICAgICAgICAgICAgICAgICAgIG1hZGUgcHJvY2xhbWF0aW9uIHRoYXQgaGUgbmVlZGVkIG5vIG1vcmUgbW9uZXkgdW50aWwgYSBjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgJmx0O2RhdGUmZ3Q7OyBzbyB0aGF0IHRob3NlIHdobyBub3cgYmVjYW1lIHBvc3Nlc3NlZCBvZiBhbnkgc3RvY2sgd291bGQKICAgICAgICAgICAgICAgICAgICBub3QgYmUgbGlhYmxlIHRvIHRheGF0aW9uLiBBIGxhcmdlIG51bWJlciBvZiBjaXRpemVucyBsb3N0IG5vIHRpbWUgaW4gYWNxdWlyaW5nCiAgICAgICAgICAgICAgICAgICAgYSBxdWFudGl0eSBvZiBzaGVlcCBhbmQgY2F0dGxlLCBvbiB0aGUgdW5kZXJzdGFuZGluZyB0aGF0IHRoZXkgd291bGQgYmUgZnJlZSBvZgogICAgICAgICAgICAgICAgICAgIGltcG9zdC4gQnV0IERpb255c2l1cywgd2hlbiBoZSB0aG91Z2h0IHRoZSBmaXR0aW5nIHRpbWUgd2FzIGNvbWUsIGhhZCB0aGVtIGFsbAogICAgICAgICAgICAgICAgICAgIHZhbHVlZCBhbmQgaW1wb3NlZCBhIHRheC4gVGhlIGNpdGl6ZW5zIHdlcmUgYW5ncnkgYXQgYmVpbmcgdGh1cyBkZWNlaXZlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGVkIHRvIGtpbGwgYW5kIHNlbGwgdGhlaXIgYmVhc3RzLiBPbiBEaW9ueXNpdXMncyBtYWtpbmcgYSBkZWNyZWUgdGhhdAogICAgICAgICAgICAgICAgICAgIG9ubHkgc3VjaCBiZWFzdHMgc2hvdWxkIGJlIHNsYWluIGFzIHdlcmUgbmVlZGVkIGVhY2ggZGF5LCB0aGUgb3duZXJzIHJldG9ydGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgb2ZmZXJpbmcgdGhlaXIgYW5pbWFscyBhcyBzYWNyaWZpY2VzOyB3aGVyZXVwb24gdGhlIGRlc3BvdCBmb3JiYWRlIHRoZSBzYWNyaWZpY2UKICAgICAgICAgICAgICAgICAgICBvZiBmZW1hbGUgYmVhc3RzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5PbmNlIG1vcmUgZnVuZHMgd2VyZSBsYWNraW5nLAogICAgICAgICAgICAgICAgICAgIGFuZCBEaW9ueXNpdXMgb3JkZXJlZCBhIGxpc3QgdG8gYmUgbWFkZSBmb3IgaGltIG9mIGFsbCBob3VzZXMgd2hvc2UgaGVpcnMgd2VyZQogICAgICAgICAgICAgICAgICAgIG9ycGhhbi4gSGF2aW5nIG9idGFpbmVkIGEgY29tcGxldGUgbGlzdCwgaGUgbWFkZSB1c2Ugb2YgdGhlIG9ycGhhbnMnIHByb3BlcnR5CiAgICAgICAgICAgICAgICAgICAgdW50aWwgZWFjaCBzaG91bGQgY29tZSBvZiBhZ2UuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFmdGVyIHRoZSBjYXB0dXJlCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSaGVnaW9uIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSaGVnaW9uIj5SaGVnaXVtPC9wbGFjZU5hbWU+LCBoZSBzdW1tb25lZCBhIG1lZXRpbmcgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgY2l0aXplbnMsIGFuZCB0b2xkIHRoZW0gd2h5IGhlIGhhZCBhIGdvb2QgcmlnaHQgdG8gc2VsbCB0aGVtIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIHNsYXZlcy48L3RyYW5zbGF0aW9uPg=="
translation['2.1349b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz5JZiwgaG93ZXZlciwgdGhleSB3b3VsZAogICAgICAgICAgICAgICAgICAgIHBheSBoaW0gdGhlIGV4cGVuc2VzIG9mIHRoZSB3YXIgYW5kIHRocmVlIG1pbmFlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSAzLjwvbm90ZT4gYSBoZWFkIGJlc2lkZXMsIGhlIHdvdWxkIHJlbGVhc2UgdGhlbS4gVGhlIHBlb3BsZSBvZgogICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUmhlZ2lvbiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUmhlZ2lvbiI+UmhlZ2l1bTwvcGxhY2VOYW1lPiBicm91Z2h0IGZvcnRoIGFsbCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhvYXJkczsgdGhlIHBvb3IgYm9ycm93ZWQgZnJvbSB0aGUgd2VhbHRoaWVyIGFuZCBmcm9tIHRoZSBmb3JlaWduZXJzIHJlc2lkZW50IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGNpdHk7IGFuZCBzbyB0aGUgYW1vdW50IGRlbWFuZGVkIHdhcyBwYWlkLiBCdXQgdGhvdWdoIGhlIHJlY2VpdmVkIHRoaXMgbW9uZXkKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZW0sIG5vbmUgdGhlIGxlc3MgaGUgc29sZCB0aGVtIGFsbCBmb3Igc2xhdmVzLCBoYXZpbmcgc3VjY2VlZGVkCiAgICAgICAgICAgICAgICAgICAgJmx0O2J5IGhpcyB0cmljayZndDsgaW4gYnJpbmdpbmcgdG8gbGlnaHQgdGhlIGhvYXJkZWQgZ29vZHMgd2hpY2ggdGhleQogICAgICAgICAgICAgICAgICAgIGhhZCBwcmV2aW91c2x5IGNvbmNlYWxlZC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T24gYW5vdGhlciBvY2Nhc2lvbiBoZQogICAgICAgICAgICAgICAgICAgIGhhZCBib3Jyb3dlZCBtb25leSBmcm9tIHRoZSBjaXRpemVucywgcHJvbWlzaW5nIHRvIHJlcGF5IGl0LiBPbiB0aGVpciBkZW1hbmRpbmcKICAgICAgICAgICAgICAgICAgICBpdHMgcmV0dXJuLCBoZSBiYWRlIGVhY2ggYnJpbmcgaGltLCB1bmRlciBwYWluIG9mIGRlYXRoLCB3aGF0ZXZlciBzaWx2ZXIgaGUKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzZWQuIFRoaXMgc2lsdmVyIHdoZW4gYnJvdWdodCBoZSBjb2luZWQgaW50byBkcmFjaG1hZSBlYWNoIGJlYXJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgZmFjZSB2YWx1ZSBvZiB0d286IHdpdGggdGhlc2UgaGUgcmVwYWlkIHRoZSAmbHQ7cHJldmlvdXMmZ3Q7IGRlYnQgYW5kCiAgICAgICAgICAgICAgICAgICAgYWxzbyB3aGF0IGhhZCBqdXN0IGJlZW4gYnJvdWdodCBpbi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGUgYWxzbyBtYWRlIGEKICAgICAgICAgICAgICAgICAgICByYWlkIG9uIFR5cnJoZW5pYSB3aXRoIGEgaHVuZHJlZCBzaGlwcywgYW5kIHJpZmxlZCB0aGUgdGVtcGxlIG9mIExldWNvdGhlYSBvZiBhCiAgICAgICAgICAgICAgICAgICAgbGFyZ2UgYW1vdW50IG9mIGdvbGQgYW5kIHNpbHZlciwgYmVzaWRlcyBhIHF1YW50aXR5IG9mIHdvcmtzIG9mIGFydC4gQnV0IGJlaW5nCiAgICAgICAgICAgICAgICAgICAgYXdhcmUgdGhhdCBoaXMgc2FpbG9ycyB0b28gaGFkIHRha2VuIG11Y2ggcGx1bmRlciwgPC90cmFuc2xhdGlvbj4="
translation['2.1350a.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzUwYSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMSIgdW5pdD0ibGluZSIgLz5oZSBtYWRlCiAgICAgICAgICAgICAgICAgICAgcHJvY2xhbWF0aW9uIHRoYXQgZWFjaCBzaG91bGQgYnJpbmcgaGltLCB1bmRlciBwYWluIG9mIGRlYXRoLCBvbmUtaGFsZiBvZiB3aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgaGFkOyB0aGUgcmVtYWluZGVyIG9mIHRoZWlyIHRha2luZ3MgdGhleSBtaWdodCBrZWVwLiBPbiB0aGUgdW5kZXJzdGFuZGluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgaWYgdGhleSBicm91Z2h0IGluIGhhbGYgdGhlaXIgcGx1bmRlciB0aGV5IHdvdWxkIHJldGFpbiB0aGUgcmVzdCBpbgogICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5LCB0aGV5IG9iZXllZC4gQnV0IHdoZW4gRGlvbnlzaXVzIGhhZCBnb3QgdGhlIHRyZWFzdXJlIGludG8gaGlzIGhhbmRzLAogICAgICAgICAgICAgICAgICAgIGhlIGNvbW1hbmRlZCB0aGVtIHRvIGJyaW5nIGhpbSB0aGUgb3RoZXIgaGFsZiBhcyB3ZWxsLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1350a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4yMSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBUaGUgcGVvcGxlIG9mCiAgICAgICAgICAgICAgICAgICAgTWVuZGUgdXNlZCB0byBtZWV0IHRoZSBleHBlbnNlcyBvZiBhZG1pbmlzdHJhdGlvbiBmcm9tIGhhcmJvciBhbmQgb3RoZXIgZHV0aWVzLAogICAgICAgICAgICAgICAgICAgIGJ1dCByZWZyYWluZWQgZnJvbSBjb2xsZWN0aW5nIHRoZSBpbXBvc3RzIG9uIGxhbmQgYW5kIG9uIGhvdXNlcy4gVGhleSBrZXB0LAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIGEgcmVnaXN0ZXIgb2YgdGhlIG93bmVycywgYW5kIHdoZW4gdGhlIHN0YXRlIHdhcyBpbiBuZWVkIG9mIGZ1bmRzLCB0aGV5CiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGVkIHRoZSBhcnJlYXJzLiBNZWFud2hpbGUgdGhlIG93bmVycyBoYWQgdGhlIGFkdmFudGFnZSBvZiB0cmFmZmlja2luZwogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlaXIgd2hvbGUgcHJvcGVydHkgdW5kaW1pbmlzaGVkIGJ5IGFueSBwYXltZW50IG9mIHBlcmNlbnRhZ2VzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgc2FtZSBjaXR5IGJlaW5nIGF0IHdhciB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPiBhbmQgbmVlZGluZyBmdW5kcywgcGFzc2VkIGEKICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9uIHRoYXQgYWxsIHRoZSBzbGF2ZXMgdGhleSBwb3NzZXNzZWQsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBvbmUgbWFsZQogICAgICAgICAgICAgICAgICAgIGFuZCBvbmUgZmVtYWxlIGFwaWVjZSwgc2hvdWxkIGJlIHNvbGQgb24gYmVoYWxmIG9mIHRoZSBTdGF0ZSwgd2hpY2ggd2FzIHRodXMKICAgICAgICAgICAgICAgICAgICBlbmFibGVkIHRvIHJhaXNlIGEgbG9hbiBmcm9tIHByaXZhdGUgY2l0aXplbnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9yOiAidGhhdCBjaXRpemVucyBzaG91bGQgc2VsbCB0byB0aGUgc3RhdGUgd2hhdCBzbGF2ZXMgdGhleSBwb3NzZXNzZWQgLiAuCiAgICAgICAgICAgICAgICAgICAgICAgIC4gYXMgdGhlIGVxdWl2YWxlbnQgb2YgYSBsb2FuIGZyb20gcHJpdmF0ZSBwZXJzb25zIHRvIHRoZSBjaXR5ICZsdDtvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2xhdmVzJyB2YWx1ZSZndDsuIiA8L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4yMiIgdW5pdD0iTG9lYiBjaGFwIiAvPgogICAgICAgICAgICAgICAgICAgIENhbGxpc3RyYXR1cywgd2hlbiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIGNhdXNlZAogICAgICAgICAgICAgICAgICAgIHRoZSBoYXJib3ItZHVlcywgd2hpY2ggd2VyZSB1c3VhbGx5IHNvbGQgZm9yIHR3ZW50eSB0YWxlbnRzLCB0byBwcm9kdWNlIHR3aWNlIGFzCiAgICAgICAgICAgICAgICAgICAgbXVjaC4gRm9yIG5vdGljaW5nIHRoYXQgb25seSB0aGUgd2VhbHRoaWVyIG1lbiB3ZXJlIGFjY3VzdG9tZWQgdG8gYnV5IHRoZW0KICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIHRoZSBzdXJldGllcyBmb3IgdGhlIHR3ZW50eSB0YWxlbnRzIHdlcmUgb2JsaWdlZCB0byBzaG93IHRhbGVudCBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgdGFsZW50LDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz5oZSBpc3N1ZWQgYSBwcm9jbGFtYXRpb24KICAgICAgICAgICAgICAgICAgICB0aGF0IGFueW9uZSBtaWdodCBidXkgdGhlIGR1ZXMgb24gZnVybmlzaGluZyBzZWN1cml0aWVzIGZvciBvbmUtdGhpcmQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYW1vdW50LCBvciBhcyBtdWNoIG1vcmUgYXMgY291bGQgYmUgcHJvY3VyZWQgaW4gZWFjaCBjYXNlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1350b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4yMyIgdW5pdD0iTG9lYiBjaGFwIiAvPiBUaW1vdGhldXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGR1cmluZyBoaXMgY2FtcGFpZ24KICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPiB3YXMgc2hvcnQgb2YKICAgICAgICAgICAgICAgICAgICBzaWx2ZXIsIGFuZCBpc3N1ZWQgdG8gaGlzIG1lbiBhIGNvcHBlciBjb2luYWdlIGluc3RlYWQuIE9uIHRoZWlyIGNvbXBsYWluaW5nLCBoZQogICAgICAgICAgICAgICAgICAgIHRvbGQgdGhlbSB0aGF0IGFsbCB0aGUgbWVyY2hhbnRzIGFuZCByZXRhaWxlcnMgd291bGQgYWNjZXB0IGl0IGluIGxpZXUgb2YKICAgICAgICAgICAgICAgICAgICBzaWx2ZXIuIEJ1dCB0aGUgbWVyY2hhbnRzIGhlIGluc3RydWN0ZWQgdG8gYnV5IGluIHR1cm4gd2l0aCB0aGUgY29wcGVyIHRoZXkKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCBzdWNoIHByb2R1Y2Ugb2YgdGhlIGxhbmQgYXMgd2FzIGZvciBzYWxlLCBhcyB3ZWxsIGFzIGFueSBib290eSBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgdG8gdGhlbTsgc3VjaCBjb3BwZXIgYXMgcmVtYWluZWQgb24gdGhlaXIgaGFuZHMgaGUgd291bGQgZXhjaGFuZ2UgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIHNpbHZlci48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RHVyaW5nIHRoZSBjYW1wYWlnbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENvcmN5cmEgQ2l0eSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ29yY3lyYSBDaXR5Ij5Db3JjeXJhPC9wbGFjZU5hbWU+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFwcGFyZW50bHkgaW4gPGRhdGUgYXV0aG5hbWU9Ii0zNzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNzUiPjM3NTwvZGF0ZT4gQi5DLiBTZWUgdGhlIGVuZCBvZiBYZW5vcGhvbidzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWZ0aCBCb29rIG9mPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbGVuaWNhPC90aXRsZT48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUiIHZhbGlkPSJ5ZXMiPlhlbi4gSGVsbC4gNTwvYmlibD4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIHRoaXMgc2FtZSBUaW1vdGhldXMgd2FzIHJlZHVjZWQgdG8gc29yZSBzdHJhaXRzLiBIaXMgbWVuIGRlbWFuZGVkIHRoZWlyIHBheTsKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIHRvIG9iZXkgaGlzIG9yZGVyczsgYW5kIGRlY2xhcmVkIHRoZXkgd291bGQgZGVzZXJ0IHRvIHRoZSBlbmVteS4KICAgICAgICAgICAgICAgICAgICBBY2NvcmRpbmdseSBoZSBzdW1tb25lZCBhIG1lZXRpbmcgYW5kIHRvbGQgdGhlbSB0aGF0IHRoZSBzdG9ybXkgd2VhdGhlciB3YXMKICAgICAgICAgICAgICAgICAgICBkZWxheWluZyB0aGUgYXJyaXZhbCBvZiB0aGUgc2lsdmVyIGhlIGV4cGVjdGVkOyBtZWFud2hpbGUsIGFzIGhlIGhhZCBvbiBoYW5kCiAgICAgICAgICAgICAgICAgICAgc3VjaCBhYnVuZGFuY2Ugb2YgcHJvdmlzaW9ucywgaGUgd291bGQgY2hhcmdlIHRoZW0gbm90aGluZyBmb3IgdGhlIHRocmVlIG1vbnRocycKICAgICAgICAgICAgICAgICAgICByYXRpb24gb2YgZ3JhaW4gYWxyZWFkeSBhZHZhbmNlZC4gPGRhdGUgYXV0aG5hbWU9Ii0zNzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNzUiPjM3NTwvZGF0ZT4gQi5DLiBTZWUgdGhlIGVuZCBvZiBYZW5vcGhvbidzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWZ0aCBCb29rIG9mPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbGVuaWNhPC90aXRsZT48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUiIHZhbGlkPSJ5ZXMiPlhlbi4gSGVsbC4gNTwvYmlibD4uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzNTBiIiB1bml0PSJzZWN0aW9uIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1350b.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPlRoZSBtZW4sIHVuYWJsZSB0byBiZWxpZXZlIHRoYXQKICAgICAgICAgICAgICAgICAgICBUaW1vdGhldXMgd291bGQgaGF2ZSBzYWNyaWZpY2VkIHNvIGxhcmdlIGEgc3VtIHRvIHRoZW0gdW5sZXNzIGhlIHdhcyBpbiB0cnV0aAogICAgICAgICAgICAgICAgICAgIGV4cGVjdGluZyB0aGUgbW9uZXksIG1hZGUgbm8gZnVydGhlciBjbGFpbSBmb3IgcGF5IHVudGlsIGhlIGhhZCBjb21wbGV0ZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3Bvc2l0aW9ucy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXQgdGhlIHNpZWdlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU2Ftb3MgQ2l0eSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU2Ftb3MgQ2l0eSI+U2Ftb3M8L3BsYWNlTmFtZT4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGF0ZSBhdXRobmFtZT0iLTM2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM2NiI+MzY2PC9kYXRlPiBCLkMuPC9ub3RlPiBUaW1vdGhldXMgc29sZCB0aGUgY3JvcHMgYW5kCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgY291bnRyeSBwcm9wZXJ0eSB0byB0aGUgYmVzaWVnZWQgU2FtaWFucyB0aGVtc2VsdmVzLCBhbmQgdGh1cyBvYnRhaW5lZAogICAgICAgICAgICAgICAgICAgIHBsZW50eSBvZiBtb25leSB0byBwYXkgaGlzIG1lbi4gQnV0IGZpbmRpbmcgdGhlIGNhbXAgd2FzIHNob3J0IG9mIHByb3Zpc2lvbnMKICAgICAgICAgICAgICAgICAgICBvd2luZyB0byB0aGUgYXJyaXZhbCBvZiByZWluZm9yY2VtZW50cywgaGUgZm9yYmFkZSB0aGUgc2FsZSBvZiBtaWxsZWQgY29ybiwgb3IKICAgICAgICAgICAgICAgICAgICBvZiBhbnkgbWVhc3VyZSBsZXNzIHRoYW4gMSAxLzIgYnVzaGVscyBvZiBjb3JuIG9yIDggMS8yIGdhbGxvbnMgb2Ygd2luZSBvciBvaWwuCiAgICAgICAgICAgICAgICAgICAgQWNjb3JkaW5nbHkgdGhlIG9mZmljZXJzIGJvdWdodCBzdXBwbGllcyB3aG9sZXNhbGUgYW5kIGlzc3VlZCB0aGVtIHRvIHRoZWlyIG1lbjsKICAgICAgICAgICAgICAgICAgICB0aGUgcmVpbmZvcmNlbWVudHMgdGhlbmNlZm9ydGggYnJvdWdodCB0aGVpciBvd24gcHJvdmlzaW9ucywgYW5kIHNvbGQgYW55CiAgICAgICAgICAgICAgICAgICAgc3VycGx1cyBvbiB0aGVpciBkZXBhcnR1cmUuIEluIHRoaXMgd2F5IHRoZSBuZWVkcyBvZiB0aGUgc29sZGllcnMgd2VyZQogICAgICAgICAgICAgICAgICAgIHNhdGlzZmFjdG9yaWx5IG1ldC48ZGF0ZSBhdXRobmFtZT0iLTM2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM2NiI+MzY2PC9kYXRlPiBCLkMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1350b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4yNCIgdW5pdD0iTG9lYiBjaGFwIiAvPiBEaWRhbGVzIHRoZSBQZXJzaWFuIHdhcyBhYmxlIHRvIHByb3ZpZGUgZm9yIHRoZSBkYWlseQogICAgICAgICAgICAgICAgICAgIG5lZWRzIG9mIGhpcyBtZXJjZW5hcmllcyBmcm9tIHRoZSBlbmVteSdzIGNvdW50cnk7IGJ1dCBoYWQgbm8gY29pbmVkIG1vbmV5IHRvCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSB0aGVtLiBXaGVuIHRoZWlyIHBheSBiZWNhbWUgZHVlLCBhbmQgdGhleSBkZW1hbmRlZCBpdCwgaGUgaGFkIHJlY291cnNlIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvbGxvd2luZyB0cmljay48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMjAiIHVuaXQ9ImxpbmUiIC8+SGUgY2FsbGVkIGEKICAgICAgICAgICAgICAgICAgICBtZWV0aW5nLCBhbmQgdG9sZCB0aGUgbWVuIHRoYXQgaGUgaGFkIHBsZW50eSBvZiBtb25leSwgYnV0IHRoYXQgaXQgd2FzIHN0b3JlZCBpbgogICAgICAgICAgICAgICAgICAgIGEgY2VydGFpbiBmb3J0cmVzcywgd2hpY2ggaGUgbmFtZWQuIEhlIHRoZW4gYnJva2UgdXAgaGlzIGVuY2FtcG1lbnQgYW5kIG1hcmNoZWQKICAgICAgICAgICAgICAgICAgICBpbiB0aGF0IGRpcmVjdGlvbi4gT24gcmVhY2hpbmcgdGhlIG5laWdoYm9yaG9vZCBvZiB0aGUgZm9ydHJlc3MsIGhlIGhpbXNlbGYgd2VudAogICAgICAgICAgICAgICAgICAgIG9uIGFoZWFkLCBhbmQgZW50ZXJpbmcgdGhlIHBsYWNlIHNlaXplZCBhbGwgdGhlIHNpbHZlciB2ZXNzZWxzIGluIHRoZSB0ZW1wbGVzLgogICAgICAgICAgICAgICAgICAgIEhlIHRoZW4gbG9hZGVkIGhpcyBtdWxlcyBpbiBzdWNoIGEgd2F5IHRoYXQgdGhpcyBwbGF0ZSB3YXMgZXhwb3NlZCwgdGh1cwogICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RpbmcgdGhhdCBzaWx2ZXIgZm9ybWVkIHRoZSBlbnRpcmUgbG9hZDsgYW5kIHNvIGNvbnRpbnVlZCBoaXMgbWFyY2guIFRoZQogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzLCBiZWhvbGRpbmcgdGhlIHBsYXRlIGFuZCBzdXBwb3NpbmcgdGhhdCB0aGV5IGNvbnZveWVkIGEgZnVsbCBsb2FkIG9mCiAgICAgICAgICAgICAgICAgICAgc2lsdmVyLCB3ZXJlIGNoZWVyZWQgYnkgdGhlIGV4cGVjdGF0aW9uIG9mIHRoZWlyIHBheS4gVGhleSB3ZXJlIGluZm9ybWVkIGhvd2V2ZXIKICAgICAgICAgICAgICAgICAgICBieSBEaWRhbGVzIHRoYXQgdGhleSB3b3VsZCBoYXZlIHRvIHRha2UgaXQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIzMzkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjMzOSI+QW1pc3VzPC9wbGFjZU5hbWU+IHRvIGJlIGNvaW5lZOKAlGEgam91cm5leSBvZiBtYW55IGRheXMsIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSB3aW50ZXIgc2Vhc29uLiBBbmQgZHVyaW5nIGFsbCB0aGlzIHRpbWUsIGhlIGNvbnRpbnVlZCB0byBlbXBsb3kgdGhlIGFybXkKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGdpdmluZyBpdCBtb3JlIHRoYW4gaXRzIG5lY2Vzc2FyeSByYXRpb25zLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Nb3Jlb3ZlciwgYWxsIHRoZSBjcmFmdHNtZW4gaW4gdGhlIGFybXksIGFuZCB0aGUgaHVja3N0ZXJzIHdobyB0cmFkZWQgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycyBieSBiYXJ0ZXIsIHdlcmUgdW5kZXIgaGlzIHBlcnNvbmFsIGNvbnRyb2wsIGFuZCBlbmpveWVkIGEgY29tcGxldGUKICAgICAgICAgICAgICAgICAgICAgICAgbW9ub3BvbHkuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1351a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4yNSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBXaGVuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGFvcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGFvcyI+VGFvczwvcGxhY2VOYW1lPiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2FsbGVkIFRhY2hvcyAoPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zqTOsc+H4b29z4I8L2ZvcmVpZ24+KSBieSBYZW5vcGhvbiBhbmQgUGx1dGFyY2guIFBlcmhhcHMgdGhhdCBmb3JtIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgICAgICByZXN0b3JlZCBoZXJlLiAoQm9uaXR6IGFuZCBTdXNlbWlobC4pIFRoZSBuYW1lIHJlY3VycyBpbiAzNy48L25vdGU+IGtpbmcgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zqTOsc+H4b29z4I8L2ZvcmVpZ24+KSBieSBYZW5vcGhvbiBhbmQgUGx1dGFyY2guIFBlcmhhcHMgdGhhdCBmb3JtIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgICAgICByZXN0b3JlZCBoZXJlLiAoQm9uaXR6IGFuZCBTdXNlbWlobC4pIFRoZSBuYW1lIHJlY3VycyBpbiAzNy48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiwgbmVlZGVkIGZ1bmRzIGZvciBhbgogICAgICAgICAgICAgICAgICAgIGV4cGVkaXRpb24gaGUgd2FzIG1ha2luZywgQ2hhYnJpYXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFkdmlzZWQgaGltIHRvIGluZm9ybSB0aGUgcHJpZXN0cyB0aGF0IHRvIHNhdmUgZXhwZW5zZSBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBuZWNlc3NhcnkgdG8gc3VwcHJlc3Mgc29tZSBvZiB0aGUgdGVtcGxlcyB0b2dldGhlciB3aXRoIHRoZSBtYWpvcml0eSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBhdHRlbmRhbnQgcHJpZXN0cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzNTFhIiB1bml0PSJzZWN0aW9uIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1351a.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPk9uIGhlYXJpbmcgdGhpcywgZWFjaCBwcmllc3Rob29kLCBiZWluZyBhbnhpb3VzIHRvIHJldGFpbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIG93biB0ZW1wbGUsIG9mZmVyZWQgaGltIG1vbmV5IGZyb20gdGhlaXIgcHJpdmF0ZSBwb3NzZXNzaW9ucyAmbHQ7YXMKICAgICAgICAgICAgICAgICAgICB3ZWxsIGFzIGZyb20gdGhlIHRlbXBsZSBmdW5kcyZndDsuIFdoZW4gdGhlIGtpbmcgaGFkIHRodXMgcmVjZWl2ZWQgbW9uZXkKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZW0gYWxsLCBDaGFicmlhcyBiYWRlIGhpbSB0ZWxsIHRoZSBwcmllc3RzIHRvIHNwZW5kIG9uIHRoZSB0ZW1wbGUtc2VydmljZQogICAgICAgICAgICAgICAgICAgIGFuZCBvbiB0aGVpciBvd24gbWFpbnRlbmFuY2Ugb25lLXRlbnRoIG9mIHdoYXQgdGhleSBmb3JtZXJseSBzcGVudCwgYW5kIGxlbmQgaGltCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlbWFpbmRlciB1bnRpbCBoZSBoYWQgbWFkZSBwZWFjZSB3aXRoIHRoZSBLaW5nICZsdDtvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4mZ3Q7LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Nb3Jlb3ZlciwgZWFjaCBpbmhhYml0YW50IHdhcyB0byBjb250cmlidXRlIGEgc3RhdGVkIHByb3BvcnRpb24gb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgaG91c2Vob2xkIGFuZCBwZXJzb25hbCBwb3NzZXNzaW9uczsgYW5kIHdoZW4gZ3JhaW4gd2FzIHNvbGQsIGJ1eWVyIGFuZCBzZWxsZXIKICAgICAgICAgICAgICAgICAgICB3ZXJlIGVhY2ggdG8gY29udHJpYnV0ZSwgYXBhcnQgZnJvbSB0aGUgcHJpY2UsIG9uZSBvYm9sIHBlciBhcnRhYmU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGFydGFiZSB3YXMgYSBQZXJzaWFuIG1lYXN1cmUgY29udGFpbmluZwogICAgICAgICAgICAgICAgICAgICAgICBuZWFybHkgNTAgcXVhcnRzLiBUaGUgb2JvbCB3YXMgMS82IG9mIGEgZHJhY2htYSBvZiBzaWx2ZXIuPC9ub3RlPjsgd2hpbGUgYQogICAgICAgICAgICAgICAgICAgIHRheCBvZiBvbmUgdGVudGggd2FzIHRvIGJlIGltcG9zZWQgb24gcHJvZml0cyBhcmlzaW5nIGZyb20gc2hpcHMgYW5kIHdvcmtzaG9wcwogICAgICAgICAgICAgICAgICAgIGFuZCBvdGhlciBzb3VyY2VzIG9mIGdhaW4uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFnYWluLCB3aGVuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGFvcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGFvcyI+VGFvczwvcGxhY2VOYW1lPiB3YXMgb24gdGhlIHBvaW50IG9mIHNldHRpbmcgb3V0IGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4sIENoYWJyaWFzIGFkdmlzZWQgaGltIHRvIG1ha2UKICAgICAgICAgICAgICAgICAgICByZXF1aXNpdGlvbiBvZiBhbGwgdW5jb2luZWQgZ29sZCBhbmQgc2lsdmVyIGluIHRoZSBwb3NzZXNzaW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGluaGFiaXRhbnRzOyBhbmQgd2hlbiBtb3N0IG9mIHRoZW0gY29tcGxpZWQsIGhlIGJhZGUgdGhlIGtpbmcgbWFrZSB1c2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYnVsbGlvbiwgYW5kIHJlZmVyIHRoZSBsZW5kZXJzIHRvIHRoZSBnb3Zlcm5vcnMgb2YgaGlzIHByb3ZpbmNlcyBmb3IKICAgICAgICAgICAgICAgICAgICBjb21wZW5zYXRpb24gb3V0IG9mIHRoZSB0YXhlcy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['2.1351a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4yNiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBJcGhpY3JhdGVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBwcm92aWRlZCBDb3R5cyB3aXRoIG1vbmV5IGZvciBhIGZvcmNlIHdoaWNoIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZCBpbiB0aGUgZm9sbG93aW5nIG1hbm5lci48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMjAiIHVuaXQ9ImxpbmUiIC8+SGUKICAgICAgICAgICAgICAgICAgICBiYWRlIGhpbSBvcmRlciAmbHQ7ZWFjaCZndDsgb2YgaGlzIHN1YmplY3RzIHRvIHNvdyBmb3IgaGltIGEgcGllY2Ugb2YKICAgICAgICAgICAgICAgICAgICBsYW5kIGJlYXJpbmcgNCAxLzIgYnVzaGVscy4gQSBsYXJnZSBxdWFudGl0eSBvZiBncmFpbiB3YXMgdGh1cyBnYXRoZXJlZCwgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBwcmljZSBvZiB3aGljaCwgd2hlbiBicm91Z2h0IHRvIHRoZSBkZXBvdHMgb24gdGhlIGNvYXN0LCB0aGUga2luZyBvYnRhaW5lZAogICAgICAgICAgICAgICAgICAgIGFzIG11Y2ggbW9uZXkgYXMgaGUgd2FudGVkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1351b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4yNyIgdW5pdD0iTG9lYiBjaGFwIiAvPiBDb3R5cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4gYXNrZWQgdGhlIHBlb3BsZSBvZiBQZWlyaW50aHVzIGZvciBhIGxvYW4gdG8gZW5hYmxlIGhpbSB0bwogICAgICAgICAgICAgICAgICAgIHJhaXNlIGFuIGFybXkuIE9uIHRoZWlyIHJlZnVzaW5nLCBoZSBiZWdnZWQgdGhlbSBhdCBhbnkgcmF0ZSB0byBsZXQgaGltIGhhdmUKICAgICAgICAgICAgICAgICAgICBzb21lIG9mIHRoZWlyIGNpdGl6ZW5zIHRvIGdhcnJpc29uIGNlcnRhaW4gZm9ydHJlc3NlcywgYW5kIHJlbGVhc2UgZm9yIGFjdGl2ZQogICAgICAgICAgICAgICAgICAgIHNlcnZpY2UgdGhlIG1lbiB3aG8gd2VyZSB0aGVyZSBvbiBkdXR5LiBUaGV5IHJlYWRpbHkgY29tcGxpZWQsIHRoaW5raW5nIHRodXMgdG8KICAgICAgICAgICAgICAgICAgICBvYnRhaW4gY29udHJvbCBvZiB0aGUgZm9ydHJlc3Nlcy4gQnV0IENvdHlzIHBsYWNlZCBpbiBjdXN0b2R5IHRoZSBtZW4gdGhleSBzZW50LAogICAgICAgICAgICAgICAgICAgIGFuZCB0b2xkIHRoZSBjaXRpemVucyB0aGF0IHRoZXkgbWlnaHQgaGF2ZSB0aGVtIGJhY2sgd2hlbiB0aGV5IGhhZCBzZW50IGhpbSB0aGUKICAgICAgICAgICAgICAgICAgICBhbW91bnQgb2YgdGhlIGxvYW4gaGUgZGVzaXJlZC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSIyLjI4IiB1bml0PSJMb2ViIGNoYXAiIC8+IE1lbnRvciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY1Ij5SaG9kZXM8L3BsYWNlTmFtZT4sIGFmdGVyIHRha2luZyBIZXJtaWFzIHByaXNvbmVyIGFuZCBzZWl6aW5nIGhpcyBmb3J0cmVzc2VzLAogICAgICAgICAgICAgICAgICAgIGxlZnQgaW4gdGhlaXIgdmFyaW91cyBkaXN0cmljdHMgdGhlIG9mZmljaWFscyBhcHBvaW50ZWQgYnkgaGltLiBCeSB0aGlzIG1lYW5zIGhlCiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZWQgdGhlaXIgY29uZmlkZW5jZSwgc28gdGhhdCB0aGV5IGFsbCB0b29rIGFnYWluIHRvIHRoZW1zZWx2ZXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgdGhleSBoYWQgaGlkZGVuIG9yIGhhZCBzZW50IHNlY3JldGx5IG91dCBvZiB0aGUgY291bnRyeS4gVGhlbiBNZW50b3IKICAgICAgICAgICAgICAgICAgICBhcnJlc3RlZCB0aGVtIGFuZCBzdHJpcHBlZCB0aGVtIG9mIGFsbCB0aGV5IGhhZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzNTFiIiB1bml0PSJzZWN0aW9uIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1351b.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1351b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4yOSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBNZW1ub24gb2YKICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY1Ij5SaG9kZXM8L3BsYWNlTmFtZT4sIG9uIG1ha2luZyBoaW1zZWxmIG1hc3RlciBvZgogICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTGFtcHNha29zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxMYW1wc2Frb3MiPkxhbXBzYWN1czwvcGxhY2VOYW1lPiwgZm91bmQgaGUgd2FzIGluIG5lZWQgb2YKICAgICAgICAgICAgICAgICAgICBmdW5kcy4gSGUgdGhlcmVmb3JlIGFzc2Vzc2VkIHVwb24gdGhlIHdlYWx0aGllc3QgaW5oYWJpdGFudHMgYSBxdWFudGl0eSBvZgogICAgICAgICAgICAgICAgICAgIHNpbHZlciwgdGVsbGluZyB0aGVtIHRoYXQgdGhleSBzaG91bGQgcmVjb3ZlciBpdCBmcm9tIHRoZSBvdGhlciBjaXRpemVucy4gQnV0CiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgb3RoZXIgY2l0aXplbnMgbWFkZSB0aGVpciBjb250cmlidXRpb25zLCBNZW1ub24gc2FpZCB0aGV5IG11c3QgbGVuZCBoaW0KICAgICAgICAgICAgICAgICAgICB0aGlzIG1vbmV5IGFsc28sIGZpeGluZyBhIGNlcnRhaW4gZGF0ZSBmb3IgaXRzIHJlcGF5bWVudC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4gYmVpbmcgaW4gbmVlZCBvZiBmdW5kcywgaGUgYXNrZWQgZm9yIGEgY29udHJpYnV0aW9uLCB0bwogICAgICAgICAgICAgICAgICAgIGJlIHJlY292ZXJlZCwgYXMgaGUgc2FpZCwgZnJvbSB0aGUgY2l0eSByZXZlbnVlcy4gVGhlIGNpdGl6ZW5zIGNvbXBsaWVkLAogICAgICAgICAgICAgICAgICAgIHRoaW5raW5nIHRoYXQgdGhleSB3b3VsZCBzcGVlZGlseSByZWltYnVyc2UgdGhlbXNlbHZlcy4gQnV0IHdoZW4gdGhlIHJldmVudWUKICAgICAgICAgICAgICAgICAgICBwYXltZW50cyBjYW1lIGluLCBoZSBkZWNsYXJlZCB0aGF0IGhlIG11c3QgaGF2ZSB0aGVzZSBhbHNvLCBhbmQgd291bGQgcmVwYXkgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVuZGVycyBzdWJzZXF1ZW50bHkgd2l0aCBpbnRlcmVzdC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGlzIG1lcmNlbmFyeQogICAgICAgICAgICAgICAgICAgIHRyb29wcyBoZSByZXF1ZXN0ZWQgdG8gZm9yZ28gc2l4IGRheXMnIHBheSBhbmQgcmF0aW9ucyBlYWNoIHllYXIsIG9uIHRoZSBwbGVhCiAgICAgICAgICAgICAgICAgICAgdGhhdCBvbiB0aG9zZSBkYXlzIHRoZXkgd2VyZSBuZWl0aGVyIG9uIGdhcnJpc29uIGR1dHkgbm9yIG9uIHRoZSBtYXJjaCBub3IgZGlkCiAgICAgICAgICAgICAgICAgICAgdGhleSBpbmN1ciBhbnkgZXhwZW5zZS4gKEhlIHJlZmVycmVkIHRvIHRoZSBkYXlzIG9taXR0ZWQgZnJvbSBhbHRlcm5hdGUKICAgICAgICAgICAgICAgICAgICAgICAgbW9udGhzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BcyB0aGUgbW9vbidzIGN5Y2xlIGlzIGNvbXBsZXRlZCBpbgogICAgICAgICAgICAgICAgICAgICAgICAyOSAxLzIgZGF5cywgaXQgd2FzIGN1c3RvbWFyeSB0byBhbHRlcm5hdGUgImhvbGxvdyIgbW9udGhzIG9mIDI5IGRheXMgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgImZ1bGwiIG1vbnRocyBvZiAzMCBkYXlzLiBNZW1ub24gcGFpZCBoaXMgbWVuIGJ5IHRoZSBtb250aCwgYnV0IGRlZHVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIGEgZGF5J3MgcGF5IGV2ZXJ5ICJob2xsb3ciIG1vbnRoLjwvbm90ZT4pIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Nb3Jlb3ZlciwgYmVpbmcgYWNjdXN0b21lZCBwcmV2aW91c2x5IHRvIGlzc3VlIGhpcyBtZW4ncyByYXRpb25zIG9mIGNvcm4gb24KICAgICAgICAgICAgICAgICAgICB0aGUgc2Vjb25kIGRheSBvZiB0aGUgbW9udGgsIGluIHRoZSBmaXJzdCBtb250aCBoZSBwb3N0cG9uZWQgdGhlIGRpc3RyaWJ1dGlvbgogICAgICAgICAgICAgICAgICAgIGZvciB0aHJlZSBkYXlzLCBhbmQgaW4gdGhlIHNlY29uZCBtb250aCBmb3IgZml2ZTsgcHJvY2VlZGluZyBpbiB0aGlzIGZhc2hpb24KICAgICAgICAgICAgICAgICAgICB1bnRpbCBhdCBsZW5ndGggaXQgdG9vayBwbGFjZSBvbiB0aGUgbGFzdCBkYXkgb2YgdGhlIG1vbnRoLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjIuMzAiIHVuaXQ9IkxvZWIgY2hhcCIgLz4gQ2hhcmlkZW11cyBvZgogICAgICAgICAgICAgICAgICAgIE9yZXVzLCBiZWluZyBpbiBvY2N1cGF0aW9uIG9mIGNlcnRhaW4gZm9ydHJlc3MtdG93bnMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDUwMDQyMTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNTAwNDIxNiI+QWVvbGlzPC9wbGFjZU5hbWU+LDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz5hbmQgdGhyZWF0ZW5lZCB3aXRoIGFuIGF0dGFjayBieSBBcnRhYmF6dXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkZvciB0aGUgY2lyY3Vtc3RhbmNlcywgYW5kIGEgKGhvc3RpbGUpIGFjY291bnQgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kZXIncyBhZHZlbnR1cmVzLCBzZWUgRGVtb3N0aGVuZXMsPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdhaW5zdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJpc3RvY3JhdGVzPC90aXRsZT48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIzIiB2YWxpZD0ieWVzIj5EZW0uIDIzPC9iaWJsPi48L25vdGU+IHdhcyBpbiBuZWVkIG9mCiAgICAgICAgICAgICAgICAgICAgbW9uZXkgdG8gcGF5IGhpcyB0cm9vcHMuIEFmdGVyIHRoZWlyIGZpcnN0IGNvbnRyaWJ1dGlvbnMsIHRoZSBpbmhhYml0YW50cwogICAgICAgICAgICAgICAgICAgIGRlY2xhcmVkIHRoZXkgaGFkIG5vIG1vcmUgdG8gZ2l2ZS4gQ2hhcmlkZW11cyB0aGVuIGlzc3VlZCBhIHByb2NsYW1hdGlvbiB0byB0aGUKICAgICAgICAgICAgICAgICAgICB0b3duIGhlIGRlZW1lZCB3ZWFsdGhpZXN0LCBiaWRkaW5nIHRoZSBpbmhhYml0YW50cyBzZW5kIGF3YXkgdG8gYW5vdGhlciBmb3J0cmVzcwogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgY29pbiBhbmQgdmFsdWFibGVzIHRoZXkgcG9zc2Vzc2VkLCB1bmRlciBjb252b3kgd2hpY2ggaGUgd291bGQgcHJvdmlkZS4KICAgICAgICAgICAgICAgICAgICBIZSBoaW1zZWxmIG9wZW5seSBzZXQgdGhlIGV4YW1wbGUgd2l0aCBoaXMgb3duIGdvb2RzLCBhbmQgcHJldmFpbGVkIG9uIHRoZW0gdG8KICAgICAgICAgICAgICAgICAgICBjb21wbHkuIEJ1dCB3aGVuIGhlIGhhZCBjb25kdWN0ZWQgdGhlbSBhIGxpdHRsZSB3YXkgb3V0IG9mIHRoZSB0b3duLCBoZSBtYWRlIGFuCiAgICAgICAgICAgICAgICAgICAgaW52ZW50b3J5IG9mIHRoZWlyIGdvb2RzLCB0b29rIGFsbCBoZSB3YW50ZWQsIGFuZCBsZWQgdGhlbSBob21lIGFnYWluLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFyaXN0b2NyYXRlczwvdGl0bGU+PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMyIgdmFsaWQ9InllcyI+RGVtLiAyMzwvYmlibD4uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhlIGhhZCBhbHNvIGlzc3VlZCBhIHByb2NsYW1hdGlvbiBpbiB0aGUgY2l0aWVzIGhlCiAgICAgICAgICAgICAgICAgICAgZ292ZXJuZWQgZm9yYmlkZGluZyBhbnlvbmUgdG8ga2VlcCBhcm1zIGluIGhpcyBob3VzZSwgdW5kZXIgcGFpbiBvZiBhIHN0YXRlZAogICAgICAgICAgICAgICAgICAgIGZpbmUuIEF0IGZpcnN0LCBob3dldmVyLCBoZSB0b29rIG5vIGNhcmUgdG8gZW5mb3JjZSBpdCwgbm9yIGRpZCBoZSBtYWtlIGFueQogICAgICAgICAgICAgICAgICAgIGlucXVpc2l0aW9uOyBzbyB0aGF0IHRoZSBwZW9wbGUgdHJlYXRlZCBoaXMgcHJvY2xhbWF0aW9uIGFzIG51Z2F0b3J5LCBhbmQgbWFkZQogICAgICAgICAgICAgICAgICAgIG5vIGF0dGVtcHQgdG8gZ2V0IHJpZCBvZiB3aGF0IGFybXMgZWFjaCBwb3NzZXNzZWQuIFRoZW4gQ2hhcmlkZW11cyB1bmV4cGVjdGVkbHkKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIGEgc2VhcmNoIHRvIGJlIG1hZGUgZnJvbSBob3VzZSB0byBob3VzZSwgYW5kIGV4YWN0ZWQgdGhlIHBlbmFsdHkgZnJvbQogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyB3ZXJlIGZvdW5kIGluIHBvc3Nlc3Npb24gb2YgYXJtcy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['2.1352a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4zMSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBBIE1hY2Vkb25pYW4gbmFtZWQKICAgICAgICAgICAgICAgICAgICBQaGlsb3hlbnVzLCB3aG8gd2FzIGdvdmVybm9yIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzU4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNTgiPkNhcmlhPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGluIG5lZWQgb2YgZnVuZHMgcHJvY2xhaW1lZCB0aGF0IGhlIGludGVuZGVkIHRvIGNlbGVicmF0ZSB0aGUgZmVzdGl2YWwgb2YKICAgICAgICAgICAgICAgICAgICBEaW9ueXN1cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzNTJhIiB1bml0PSJzZWN0aW9uIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1352a.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPlRoZSB3ZWFsdGhpZXN0IGluaGFiaXRhbnRzIHdlcmUgc2VsZWN0ZWQgdG8gcHJvdmlkZSB0aGUKICAgICAgICAgICAgICAgICAgICBjaG9ydXNlcywgYW5kIHdlcmUgaW5mb3JtZWQgd2hhdCB0aGV5IHdlcmUgZXhwZWN0ZWQgdG8gZnVybmlzaC4gTm90aWNpbmcgdGhlaXIKICAgICAgICAgICAgICAgICAgICBkaXNpbmNsaW5hdGlvbiwgUGhpbG94ZW51cyBzZW50IHRvIHRoZW0gcHJpdmF0ZWx5IGFuZCBhc2tlZCB3aGF0IHRoZXkgd291bGQgZ2l2ZQogICAgICAgICAgICAgICAgICAgIHRvIGJlIHJlbGlldmVkIG9mIHRoZSBkdXR5LiBUaGV5IHRvbGQgaGltIHRoZXkgd2VyZSBwcmVwYXJlZCB0byBwYXkgYSBtdWNoCiAgICAgICAgICAgICAgICAgICAgbGFyZ2VyIHN1bSB0aGFuIHRoZXkgZXhwZWN0ZWQgdG8gc3BlbmQgJmx0O29uIHRoZSBjaG9ydXNlcyZndDsgaW4gb3JkZXIKICAgICAgICAgICAgICAgICAgICB0byBhdm9pZCB0aGUgdHJvdWJsZSBhbmQgdGhlIGludGVycnVwdGlvbiBvZiB0aGVpciBidXNpbmVzcy4gUGhpbG94ZW51cyBhY2NlcHRlZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIG9mZmVycywgYW5kIHByb2NlZWRlZCB0byBlbnJvbCBhIHNlY29uZCBsZXZ5LiBUaGVzZSBhbHNvIHBhaWQ7IGFuZCBhdCBsYXN0CiAgICAgICAgICAgICAgICAgICAgaGUgcmVjZWl2ZWQgd2hhdCBoZSBkZXNpcmVkIGZyb20gZWFjaCBjb21wYW55LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1352a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4zMiIgdW5pdD0iTG9lYiBjaGFwIiAvPiBFdWFpc2VzIHRoZSBTeXJpYW4sIHdoZW4KICAgICAgICAgICAgICAgICAgICBnb3Zlcm5vciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiwgcmVjZWl2ZWQgaW5mb3JtYXRpb24KICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBsb2NhbCBnb3Zlcm5vcnMgd2VyZSBtZWRpdGF0aW5nIHJlYmVsbGlvbi4gSGUgdGhlcmVmb3JlIHN1bW1vbmVkIHRoZW0KICAgICAgICAgICAgICAgICAgICB0byB0aGUgcGFsYWNlIGFuZCBwcm9jZWVkZWQgdG8gaGFuZyB0aGVtIGFsbCwgc2VuZGluZyB3b3JkIHRvIHRoZWlyIHJlbGF0aW9ucwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSB3ZXJlIGluIHByaXNvbi4gVGhlc2UgYWNjb3JkaW5nbHkgbWFkZSBvZmZlcnMsIGVhY2ggb24gYmVoYWxmIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIG93biBraW5zbWFuLCBzZWVraW5nIGJ5IHBheW1lbnQgdG8gc2VjdXJlIHRoZWlyIHJlbGVhc2UuIEV1YWlzZXMgYWdyZWVkIHRvCiAgICAgICAgICAgICAgICAgICAgYWNjZXB0IGEgY2VydGFpbiBzdW0gZm9yIGVhY2gsIGFuZCB3aGVuIGl0IGhhZCBiZWVuIHBhaWQgcmV0dXJuZWQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVsYXRpb25zIHRoZSBkZWFkIGJvZHkuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4zMyIgdW5pdD0iTG9lYiBjaGFwIiAvPiBXaGlsZSBDbGVvbWVuZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbGV4YW5kcmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIj5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+IHdhcyBnb3Zlcm5vciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2YuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDU2IiB2YWxpZD0ieWVzIj5EZW0uIDU2PC9iaWJsPjogIkNsZW9tZW5lcyAuIC4gLiBmcm9tIHRoZSB0aW1lIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgdGhlIGdvdmVybm1lbnQsIGhhcyBkb25lIGltbWVuc2UgbWlzY2hpZWYgdG8geW91ciBzdGF0ZSwgYW5kIHN0aWxsCiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUgdG8gdGhlIHJlc3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCBieQogICAgICAgICAgICAgICAgICAgICAgICBidXlpbmcgdXAgY29ybiBmb3IgcmVzYWxlIGFuZCBrZWVwaW5nIGl0IGF0IGhpcyBvd24gcHJpY2UiICgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtlbm5lZHkncyB0cmFuc2xhdGlvbikuPC9ub3RlPiBhdCBhIHRpbWUKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXJlIHdhcyBzb21lIHNjYXJjaXR5IGluIHRoZSBsYW5kLCBidXQgZWxzZXdoZXJlIGEgZ3JpZXZvdXMgZmFtaW5lLCBoZQogICAgICAgICAgICAgICAgICAgIGZvcmJhZGUgdGhlIGV4cG9ydCBvZiBncmFpbi4gT24gdGhlIGxvY2FsIGdvdmVybm9ycyByZXByZXNlbnRpbmc8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDU2IiB2YWxpZD0ieWVzIj5EZW0uIDU2PC9iaWJsPjogIkNsZW9tZW5lcyAuIC4gLiBmcm9tIHRoZSB0aW1lIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgdGhlIGdvdmVybm1lbnQsIGhhcyBkb25lIGltbWVuc2UgbWlzY2hpZWYgdG8geW91ciBzdGF0ZSwgYW5kIHN0aWxsCiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUgdG8gdGhlIHJlc3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCBieQogICAgICAgICAgICAgICAgICAgICAgICBidXlpbmcgdXAgY29ybiBmb3IgcmVzYWxlIGFuZCBrZWVwaW5nIGl0IGF0IGhpcyBvd24gcHJpY2UiICgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtlbm5lZHkncyB0cmFuc2xhdGlvbikuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJCZWtrZXIiIG49IjIwIiB1bml0PSJsaW5lIiAvPnRoYXQgaWYgdGhlcmUgd2VyZSBubyBleHBvcnQgb2YgZ3JhaW4gdGhleQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIHVuYWJsZSB0byBwYXkgaW4gdGhlaXIgdGF4ZXMsIGhlIGFsbG93ZWQgdGhlIGV4cG9ydCwgYnV0IGxhaWQgYSBoZWF2eQogICAgICAgICAgICAgICAgICAgIGR1dHkgb24gdGhlIGNvcm4uIEJ5IHRoaXMgbWVhbnMgaGUgb2J0YWluZWQgYSBsYXJnZSBhbW91bnQgb2YgZHV0eSBmcm9tIGEgc21hbGwKICAgICAgICAgICAgICAgICAgICBhbW91bnQgb2YgZXhwb3J0LCBhbmQgYXQgdGhlIHNhbWUgdGltZSBkZXByaXZlZCB0aGUgb2ZmaWNpYWxzIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y3VzZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiBDbGVvbWVuZXMgd2FzIG1ha2luZyBhIHByb2dyZXNzCiAgICAgICAgICAgICAgICAgICAgYnkgd2F0ZXIgdGhyb3VnaCB0aGUgcHJvdmluY2Ugd2hlcmUgdGhlIGNyb2NvZGlsZSBpcyB3b3JzaGlwcGVkLCBvbmUgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgc2VydmFudHMgd2FzIGNhcnJpZWQgb2ZmLiBBY2NvcmRpbmdseSwgc3VtbW9uaW5nIHRoZSBwcmllc3RzLCBoZSB0b2xkIHRoZW0gdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGludGVuZGVkIHRvIHJldGFsaWF0ZSBvbiB0aGUgY3JvY29kaWxlcyBmb3IgdGhpcyB1bnByb3Zva2VkIGFnZ3Jlc3Npb247IGFuZAogICAgICAgICAgICAgICAgICAgIGdhdmUgb3JkZXJzIGZvciBhIGJhdHR1ZS4gVGhlIHByaWVzdHMsIHRvIHNhdmUgdGhlIGNyZWRpdCBvZiB0aGVpciBnb2QsCiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGVkIGFsbCB0aGUgZ29sZCB0aGV5IGNvdWxkLCBhbmQgc3VjY2VlZGVkIGluIHB1dHRpbmcgYW4gZW5kIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwdXJzdWl0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5LaW5nIEFsZXhhbmRlciBoYWQgZ2l2ZW4gQ2xlb21lbmVzCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZCB0byBlc3RhYmxpc2ggYSB0b3duIG5lYXIgdGhlIGlzbGFuZCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNTQ4NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE1NDg0Ij5QaGFydXM8L3BsYWNlTmFtZT4sIGFuZCB0byB0cmFuc2ZlciB0aGl0aGVyIHRoZSBtYXJrZXQgaGl0aGVydG8gaGVsZCBhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMTA3OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAxMDc5Ij5DYW5vcHVzPC9wbGFjZU5hbWU+LiBTYWlsaW5nIHRoZXJlZm9yZSB0bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMTA3OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAxMDc5Ij5DYW5vcHVzPC9wbGFjZU5hbWU+IGhlIGluZm9ybWVkIHRoZSBwcmllc3RzIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBtZW4gb2YgcHJvcGVydHkgdGhlcmUgdGhhdCBoZSB3YXMgY29tZSB0byByZW1vdmUgdGhlbS4gVGhlIHByaWVzdHMgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVzaWRlbnRzIHRoZXJldXBvbiBjb250cmlidXRlZCBtb25leSB0byBpbmR1Y2UgaGltIHRvIGxlYXZlIHRoZWlyIG1hcmtldCB3aGVyZQogICAgICAgICAgICAgICAgICAgIGl0IHdhcy4gSGUgdG9vayB3aGF0IHRoZXkgb2ZmZXJlZCwgYW5kIGRlcGFydGVkOyBidXQgYWZ0ZXJ3YXJkcyByZXR1cm5lZCwgd2hlbgogICAgICAgICAgICAgICAgICAgIGFsbCB3YXMgcmVhZHkgdG8gYnVpbGQgdGhlIHRvd24sIDwvdHJhbnNsYXRpb24+"
translation['2.1352b.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzUyYiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMSIgdW5pdD0ibGluZSIgLz5hbmQgcHJvY2VlZGVkIHRvIGRlbWFuZCBhbiBleGNlc3NpdmUgc3VtOwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHJlcHJlc2VudGVkLCBoZSBzYWlkLCB0aGUgZGlmZmVyZW5jZSB0aGUgY2hhbmdlIG9mIHNpdGUgd291bGQgbWFrZSB0byBoaW0uCiAgICAgICAgICAgICAgICAgICAgVGhleSBob3dldmVyIGRlY2xhcmVkIHRoZW1zZWx2ZXMgdW5hYmxlIHRvIHBheSBpdCwgYW5kIHdlcmUgYWNjb3JkaW5nbHkKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T24gYW5vdGhlciBvY2Nhc2lvbiBoZSBzZW50IGFuIGFnZW50CiAgICAgICAgICAgICAgICAgICAgdG8gbWFrZSBhIGNlcnRhaW4gcHVyY2hhc2UgZm9yIGhpbS4gTGVhcm5pbmcgdGhhdCB0aGUgYWdlbnQgaGFkIG1hZGUgYSBnb29kCiAgICAgICAgICAgICAgICAgICAgYmFyZ2FpbiwgYnV0IGludGVuZGVkIHRvIGNoYXJnZSBoaW0gYSBoaWdoIHByaWNlLCBoZSBwcm9jZWVkZWQgdG8gaW5mb3JtIHRoZQogICAgICAgICAgICAgICAgICAgIG1hbidzIGFzc29jaWF0ZXMgdGhhdCBoZSBoYWQgYmVlbiB0b2xkIGhlIGhhZCBwdXJjaGFzZWQgdGhlIGdvb2RzIGF0IGFuCiAgICAgICAgICAgICAgICAgICAgZXhjZXNzaXZlIHByaWNlLCBhbmQgdGhhdCB0aGVyZWZvcmUgaGUgZGlkIG5vdCBpbnRlbmQgdG8gcmVjb2duaXplIHRoZQogICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOyBkZW5vdW5jaW5nIGF0IHRoZSBzYW1lIHRpbWUgd2l0aCBmZWlnbmVkIGFuZ2VyIHRoZSBmZWxsb3cncwogICAgICAgICAgICAgICAgICAgIHN0dXBpZGl0eS4gVGhleSBvbiBoZWFyaW5nIHRoaXMgYXNrZWQgaGltIG5vdCB0byBiZWxpZXZlIHdoYXQgd2FzIHNhaWQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZSBhZ2VudCB1bnRpbCBoZSBoaW1zZWxmIGFycml2ZWQgYW5kIHJlbmRlcmVkIGhpcyBhY2NvdW50LiBPbiB0aGUgbWFuJ3MKICAgICAgICAgICAgICAgICAgICBhcnJpdmFsLCBoaXMgYXNzb2NpYXRlcyB0b2xkIGhpbSB3aGF0IENsZW9tZW5lcyBoYWQgc2FpZC4gSGUsIGRlc2lyb3VzIG9mCiAgICAgICAgICAgICAgICAgICAgd2lubmluZyB0aGVpciBhcHByb3ZhbCBhcyB3ZWxsIGFzIHRoYXQgb2YgQ2xlb21lbmVzLCBkZWJpdGVkIHRoZSBsYXR0ZXIgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBhY3R1YWwgcHJpY2UgaGUgaGFkIGdpdmVuLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BdCBhIHRpbWUgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBwcmljZSBvZiBncmFpbiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiB3YXMgdGVuCiAgICAgICAgICAgICAgICAgICAgZHJhY2htYWUgJmx0O2EgbWVhc3VyZSZndDsgLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZSBpbnRlbmRlZCBpcyB0aGUgQXR0aWMgbWVkaW1ub3MgLCBpdCBpcyAxIDEvMiBidXNoZWxzLiBUaGUgUGVyc2lhbgogICAgICAgICAgICAgICAgICAgICAgICBhcnRhYmUgbWF5IGhvd2V2ZXIgYmUgbWVhbnQsIHdoaWNoIHdhcyBlcXVhbCB0byAxIG1lZGltbm9zIGFuZCAxLzE2dGguIEluCiAgICAgICAgICAgICAgICAgICAgICAgIGVpdGhlciBjYXNlIHRoZSBwcmljZSBpcyB2ZXJ5IGhpZ2ggY29tcGFyZWQgd2l0aCAzIGRyYWNobWFlIHBlciBtZWRpbW5vcywKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHByaWNlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBpbiA8ZGF0ZSBhdXRobmFtZT0iLTM5MCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM5MCI+MzkwPC9kYXRlPiBCLkMuIFlldCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDkuNDQiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIDkuNDQ8L2JpYmw+IHNheXMgdGhhdCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgZHVyaW5nIHRoZSB3YXIgd2l0aCBIYW5uaWJhbCAoMjEwKSBjb3JuIHdhcyBzb2xkIGZvciBmaWZ0ZWVuIGRyYWNobWFlIHBlcgogICAgICAgICAgICAgICAgICAgICAgICBtZWRpbW5vcy4gQXMgYSBjb250cmFzdCBjZi4gd2hhdCB0aGUgc2FtZSBhdXRob3Igc2F5cyBvZiB0aGUgZmVydGlsaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEdhbGxpYSBDaXNhbHBpbmEsIHdoZXJlIGluIHRpbWUgb2YgcGVhY2UgdGhpcyBzYW1lIG1lYXN1cmUgb2Ygd2hlYXQgd2FzIHNvbGQKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGZvdXIgb2JvbHMsIGFuZCBvZiBiYXJsZXkgZm9yIHR3by4gU2VlIG5vdGUgb24gMjUuPC9ub3RlPiBDbGVvbWVuZXMgc2VudAogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgZ3Jvd2VycyBhbmQgYXNrZWQgdGhlbSBhdCB3aGF0IHByaWNlIHRoZXkgd291bGQgY29udHJhY3QgdG8gc3VwcGx5IGhpbQogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlaXIgcHJvZHVjZS4gT24gdGhlaXIgcXVvdGluZyBhIHByaWNlIGxvd2VyIHRoYW4gd2hhdCB0aGV5IHdlcmUgY2hhcmdpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgbWVyY2hhbnRzLCBoZSBvZmZlcmVkIHRoZW0gdGhlIGZ1bGwgcHJpY2UgdGhleSB3ZXJlIGFjY3VzdG9tZWQgdG8gcmVjZWl2ZQogICAgICAgICAgICAgICAgICAgIGZyb20gb3RoZXJzOyBhbmQgdGFraW5nIG92ZXIgdGhlIGVudGlyZSBzdXBwbHksPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGluIDxkYXRlIGF1dGhuYW1lPSItMzkwIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzkwIj4zOTA8L2RhdGU+IEIuQy4gWWV0IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gOS40NCIgdmFsaWQ9InllcyI+UG9seWJpdXMKICAgICAgICAgICAgICAgICAgICAgICAgOS40NDwvYmlibD4gc2F5cyB0aGF0IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICBkdXJpbmcgdGhlIHdhciB3aXRoIEhhbm5pYmFsICgyMTApIGNvcm4gd2FzIHNvbGQgZm9yIGZpZnRlZW4gZHJhY2htYWUgcGVyCiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGltbm9zLiBBcyBhIGNvbnRyYXN0IGNmLiB3aGF0IHRoZSBzYW1lIGF1dGhvciBzYXlzIG9mIHRoZSBmZXJ0aWxpdHkgb2YKICAgICAgICAgICAgICAgICAgICAgICAgR2FsbGlhIENpc2FscGluYSwgd2hlcmUgaW4gdGltZSBvZiBwZWFjZSB0aGlzIHNhbWUgbWVhc3VyZSBvZiB3aGVhdCB3YXMgc29sZAogICAgICAgICAgICAgICAgICAgICAgICBmb3IgZm91ciBvYm9scywgYW5kIG9mIGJhcmxleSBmb3IgdHdvLiBTZWUgbm90ZSBvbiAyNS48L3RyYW5zbGF0aW9uPg=="
translation['2.1352b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz5zb2xkIGl0IGF0IGEgZml4ZWQgcmF0ZSBvZiB0aGlydHktdHdvIGRyYWNobWFlICZsdDtmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBtZWFzdXJlJmd0Oy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGUgYWxzbyBzZW50IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBwcmllc3RzLCBhbmQgdG9sZCB0aGVtIHRoYXQgdGhlIGV4cGVuZGl0dXJlIG9uIHRoZSB0ZW1wbGVzIHdhcyB2ZXJ5IHVuZXZlbmx5CiAgICAgICAgICAgICAgICAgICAgZGlzdHJpYnV0ZWQgaW4gdGhlIGNvdW50cnk7IGFuZCB0aGF0IHNvbWUgb2YgdGhlc2UsIHRvZ2V0aGVyIHdpdGggdGhlIG1ham9yaXR5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGF0dGVuZGFudCBwcmllc3RzLCBtdXN0IGFjY29yZGluZ2x5IGJlIHN1cHByZXNzZWQuIFRoZSBwcmllc3RzLCBzdXBwb3NpbmcKICAgICAgICAgICAgICAgICAgICBoaW0gdG8gYmUgaW4gZWFybmVzdCwgYW5kIHdpc2hpbmcgZWFjaCB0byBzZWN1cmUgdGhlIGNvbnRpbnVhbmNlIG9mIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICB0ZW1wbGUgYW5kIG9mZmljZSwgZ2F2ZSBoaW0gbW9uZXkgaW5kaXZpZHVhbGx5IGZyb20gdGhlaXIgcHJpdmF0ZSBwb3NzZXNzaW9ucyBhcwogICAgICAgICAgICAgICAgICAgIHdlbGwgYXMgY29sbGVjdGl2ZWx5IGZyb20gdGhlIHRlbXBsZSBmdW5kcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2YuCiAgICAgICAgICAgICAgICAgICAgICAgIDI1Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['2.1353a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4zNCIgdW5pdD0iTG9lYiBjaGFwIiAvPgogICAgICAgICAgICAgICAgICAgIEFudGltZW5lcyBvZiBSaG9kZXMsIHdobyB3YXMgYXBwb2ludGVkIGJ5IEFsZXhhbmRlciBzdXBlcmludGVuZGVudCBvZiBoaWdod2F5cwogICAgICAgICAgICAgICAgICAgIGluIHRoZSBwcm92aW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYyNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjI2Ij5CYWJ5bG9uPC9wbGFjZU5hbWU+LCBhZG9wdGVkIHRoZQogICAgICAgICAgICAgICAgICAgIGZvbGxvd2luZyBtZWFucyBvZiByYWlzaW5nIGZ1bmRzLiBBbiBhbmNpZW50IGxhdyBvZiB0aGUgY291bnRyeSBpbXBvc2VkIGEgdGF4IG9mCiAgICAgICAgICAgICAgICAgICAgb25lLXRlbnRoIG9uIGFsbCBpbXBvcnRzOyBidXQgdGhpcyBoYWQgZmFsbGVuIGludG8gdG90YWwgYWJleWFuY2UuIEFudGltZW5lcwogICAgICAgICAgICAgICAgICAgIGtlcHQgYSB3YXRjaCBmb3IgYWxsIGdvdmVybm9ycyBhbmQgc29sZGllcnMgd2hvc2UgYXJyaXZhbCB3YXMgZXhwZWN0ZWQsIGFuZCB1cG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hbnkgYW1iYXNzYWRvcnMgYW5kIGNyYWZ0c21lbiB3aG8gd2VyZSBpbnZpdGVkIHRvIHRoZSBjaXR5LCBidXQgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlbSBvdGhlcnMgd2hvIGR3ZWx0IHRoZXJlIHVub2ZmaWNpYWxseTsgYW5kIGFsc28gdXBvbiB0aGUgbXVsdGl0dWRlIG9mCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudHMgdGhhdCB3ZXJlIGJyb3VnaHQgJmx0O3RvIHRoZXNlIHBlcnNvbnMmZ3Q7ICwgb24gd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICBleGFjdGVkIHRoZSBsZWdhbCB0YXggb2YgYSB0ZW50aC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5vdGhlcgogICAgICAgICAgICAgICAgICAgIGV4cGVkaWVudCB3YXMgdGhpcy4gSGUgaW52aXRlZCB0aGUgb3duZXJzIG9mIGFueSBzbGF2ZXMgaW4gdGhlIGNhbXAgdG8gcmVnaXN0ZXIKICAgICAgICAgICAgICAgICAgICB0aGVtIGF0IHdoYXRldmVyIHZhbHVlIHRoZXkgZGVzaXJlZCwgdW5kZXJ0YWtpbmcgYXQgdGhlIHNhbWUgdGltZSB0byBwYXkgaGltCiAgICAgICAgICAgICAgICAgICAgZWlnaHQgZHJhY2htYWUgYSB5ZWFyLiBJZiB0aGUgc2xhdmUgcmFuIGF3YXksIHRoZSBvd25lciB3YXMgdG8gcmVjb3ZlciB0aGUKICAgICAgICAgICAgICAgICAgICByZWdpc3RlcmVkIHZhbHVlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTM1M2EiIHVuaXQ9InNlY3Rpb24iIC8+PC90cmFuc2xhdGlvbj4="
translation['2.1353a.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPk1hbnkgc2xhdmVzIHdlcmUgdGh1cyByZWdpc3RlcmVkLCBhbmQgYSBsYXJnZSBzdW0gb2YKICAgICAgICAgICAgICAgICAgICBtb25leSB3YXMgcGFpZCAmbHQ7aW4gcHJlbWl1bXMmZ3Q7LiBBbmQgd2hlbiBhIHNsYXZlIHJhbiBhd2F5LCBBbnRpbWVuZXMKICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGVkIHRoZSBnb3Zlcm5vciBvZiB0aGUgJmx0O3Byb3ZpbmNlJmd0OyB3aGVyZSB0aGUgY2FtcCBsYXkKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgdG8gcmVjb3ZlciB0aGUgbWFuIG9yIHRvIHBheSBoaXMgbWFzdGVyIGhpcyB2YWx1ZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['2.1353a.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4zNSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBPcGhlbGxhcyBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4gYXBwb2ludGVkIGFuIG9mZmljZXIKICAgICAgICAgICAgICAgICAgICB0byBzdXBlcmludGVuZCB0aGUgcmV2ZW51ZXMgb2YgdGhlIFByb3ZpbmNlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzA4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzMDgiPkF0aHJpYmlzPC9wbGFjZU5hbWU+LiBUaGUgbG9jYWwgZ292ZXJub3JzIGNhbWUgdG8gaGltLCBhbmQgdG9sZCBoaW0gdGhleQogICAgICAgICAgICAgICAgICAgIHdlcmUgd2lsbGluZyB0byBwYXkgYSBtdWNoIGxhcmdlciBhbW91bnQgaW4gdGF4ZXM7IGJ1dCBhc2tlZCBoaW0gdG8gcmVtb3ZlIHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgc3VwZXJpbnRlbmRlbnQuIE9waGVsbGFzIGlucXVpcmVkIGlmIHRoZXkgd2VyZSByZWFsbHkgYWJsZSB0byBwYXkgd2hhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgcHJvbWlzZWQ7IGFuZCBvbiB0aGVpciBhc3N1cmluZyBoaW0gdGhhdCB0aGV5IHdlcmUsIGxlZnQgdGhlIHN1cGVyaW50ZW5kZW50CiAgICAgICAgICAgICAgICAgICAgaW4gb2ZmaWNlIGFuZCBpbnN0cnVjdGVkIGhpbSB0byBkZW1hbmQgZnJvbSB0aGVtIHRoZSBhbW91bnQgb2YgdGF4IHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGhhZCBhc3Nlc3NlZC4gQW5kIHNvLCB3aXRob3V0IGJlaW5nIGNoYXJnZWFibGUgZWl0aGVyIHdpdGgKICAgICAgICAgICAgICAgICAgICBkaXNjb3VudGVuYW5jaW5nIHRoZSBvZmZpY2VyIGhlIGhhZCBhcHBvaW50ZWQsIG9yIHdpdGggdGF4aW5nIHRoZSBnb3Zlcm5vcnMKICAgICAgICAgICAgICAgICAgICBiZXlvbmQgdGhlaXIgb3duIGVzdGltYXRlLCBoZSBvYnRhaW5lZCBmcm9tIHRoZSBsYXR0ZXIgbWFueSB0aW1lcyBoaXMgcHJldmlvdXMKICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZW51ZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiBuPSIyLjM2IiB1bml0PSJMb2ViIGNoYXAiIC8+IFB5dGhvY2xlcyB0aGUgQXRoZW5pYW4gcmVjb21tZW5kZWQgaGlzIGZlbGxvdy1jb3VudHJ5bWVuCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgU3RhdGUgc2hvdWxkIHRha2Ugb3ZlciBmcm9tIHByaXZhdGUgY2l0aXplbnMgdGhlIGxlYWQgb2J0YWluZWQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBtaW5lcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLExhdXJpb24iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLExhdXJpb24iPkxhdXJpdW08L3BsYWNlTmFtZT48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlc2Ugc2lsdmVyIG1pbmVzIHdlcmUgc3RhdGUgcHJvcGVydHk7IGJ1dCBtaW5pbmcgcmlnaHRzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXJlaW4gd2VyZSBsZXQgdG8gcHJpdmF0ZSBjaXRpemVucy4gTGVhZCBhbmQgc2lsdmVyIHdlcmUgZm91bmQgaW4gdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICAgICAgb3JlIGFuZCBoYWQgdG8gYmUgc2VwYXJhdGVkLiBUaGUgd2VpZ2h0IG9mIHRoZSBsZWFkIGlzIG5vdCBzcGVjaWZpZWQ6IGl0IG1heQogICAgICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gYSB0YWxlbnQgb2YgODAgbGJzLiBTZWUgQm9lY2toLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdGFhdHNoYXVzaGFsdHVuZyBkZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF0aGVuZXI8L3RpdGxlPjsgYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gV2F5cyAxIiB2YWxpZD0ieWVzIj5YZW4uIFdheXM8L2JpYmw+Ljwvbm90ZT4gYXQgdGhlIHByaWNlCiAgICAgICAgICAgICAgICAgICAgb2YgdHdvIGRyYWNobWFlICZsdDtwZXIgdGFsZW50Jmd0OyB3aGljaCB0aGV5IHdlcmUgYXNraW5nLCBhbmQgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgaXRzZWxmIHNlbGwgaXQgYXQgdGhlIGZpeGVkIHByaWNlIG9mIHNpeCBkcmFjaG1hZS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdGFhdHNoYXVzaGFsdHVuZyBkZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF0aGVuZXI8L3RpdGxlPjsgYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gV2F5cyAxIiB2YWxpZD0ieWVzIj5YZW4uIFdheXM8L2JpYmw+LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIG49IjIuMzciIHVuaXQ9IkxvZWIgY2hhcCIgLz4gQ2hhYnJpYXMgaGFkIGxldmllZCBjcmV3cwogICAgICAgICAgICAgICAgICAgICAgICBmb3I8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IkJla2tlciIgbj0iMjAiIHVuaXQ9ImxpbmUiIC8+YSBodW5kcmVkIGFuZCB0d2VudHkgc2hpcHMgdG8KICAgICAgICAgICAgICAgICAgICBzZXJ2ZSBLaW5nIFRhb3MuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSAyNS48L25vdGU+IEZpbmRpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIFRhb3MgbmVlZGVkIG9ubHkgc2l4dHkgc2hpcHMsIGhlIGdhdmUgdGhlIGNyZXdzIG9mIHRoZSBzdXBlcmZsdW91cyBzaXh0eSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNob2ljZSBiZXR3ZWVuIHByb3ZpZGluZyB0aG9zZSB3aG8gd2VyZSB0byBzZXJ2ZSB3aXRoIHR3byBtb250aHMnIHJhdGlvbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgdGFraW5nIHRoZWlyIHBsYWNlLiBEZXNpcmluZyB0byByZW1haW4gYXQgdGhlaXIgYnVzaW5lc3MsIHRoZXkgZ2F2ZQogICAgICAgICAgICAgICAgICAgIHdoYXQgaGUgZGVtYW5kZWQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1353b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4zOCIgdW5pdD0iTG9lYiBjaGFwIiAvPiBBbnRpbWVuZXMgYmFkZSB0aGUgZ292ZXJub3JzIG9mIHRoZSBwcm92aW5jZXMgcmVwbGVuaXNoLAogICAgICAgICAgICAgICAgICAgIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgbGF3IG9mIHRoZSBjb3VudHJ5LCB0aGUgbWFnYXppbmVzIGFsb25nIHRoZSByb3lhbAogICAgICAgICAgICAgICAgICAgIGhpZ2h3YXlzLiBXaGVuZXZlciBhbiBhcm15IHBhc3NlZCB0aHJvdWdoIHRoZSBjb3VudHJ5IG9yIGFueSBvdGhlciBib2R5IG9mIG1lbgogICAgICAgICAgICAgICAgICAgIHVuYWNjb21wYW5pZWQgYnkgdGhlIGtpbmcsIGhlIHNlbnQgYW4gb2ZmaWNlciB0byBzZWxsIHRoZW0gdGhlIGNvbnRlbnRzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG1hZ2F6aW5lcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzNTNiIiB1bml0PSJzZWN0aW9uIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.1353b.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIxIiB1bml0PSJsaW5lIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.1353b.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi4zOSIgdW5pdD0iTG9lYiBjaGFwIiAvPiBDbGVvbWVuZXMsIGFzIHRoZSBiZWdpbm5pbmcgb2YgdGhlIG1vbnRoIGFwcHJvYWNoZWQgd2hlbgogICAgICAgICAgICAgICAgICAgIGhpcyBzb2xkaWVycycgYWxsb3dhbmNlIGJlY2FtZSBkdWUsIGRlbGliZXJhdGVseSBzYWlsZWQgYXdheSBkb3duIHRoZSByaXZlcjsgYW5kCiAgICAgICAgICAgICAgICAgICAgbm90IHRpbGwgdGhlIG1vbnRoIHdhcyBhZHZhbmNlZCBkaWQgaGUgcmV0dXJuIGFuZCBkaXN0cmlidXRlIHRoZSBhbGxvd2FuY2UuIEZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBjb21pbmcgbW9udGgsIGhlIG9taXR0ZWQgdGhlIGRpc3RyaWJ1dGlvbiBhbHRvZ2V0aGVyIHVudGlsIHRoZSBmb2xsb3dpbmcKICAgICAgICAgICAgICAgICAgICBtb250aCBiZWdhbi4gVGh1cyB0aGUgbWVuIHdlcmUgcXVpZXRlZCBieSB0aGUgcmVjZW50IGRpc3RyaWJ1dGlvbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgQ2xlb21lbmVzLCBwYXNzaW5nIG92ZXIgYSBtb250aCBlYWNoIHllYXIsIGRvY2tlZCBoaXMgdHJvb3BzIG9mIGEgbW9udGgncwogICAgICAgICAgICAgICAgICAgICAgICBwYXkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+DzrnPhM6xz4HPh+G9t86xPC9mb3JlaWduPiAoY29ybiBhbGxvd2FuY2UpIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OvM65z4POuOG9uc+CPC9mb3JlaWduPiAocGF5KSBoZXJlIHNlZW0gdG8gYmUgaWRlbnRpZmllZDsgcG9zc2libHkgYmVjYXVzZSBpbiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmQgd2hlcmUgZ3JhaW4gd2FzIHJlYWRpbHkgcHVyY2hhc2FibGUgdGhlIGZvcm1lciB3YXMgZ2l2ZW4gaW4gbW9uZXkuIENmLgogICAgICAgICAgICAgICAgICAgICAgICAyMywgMjkuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+DzrnPhM6xz4HPh+G9t86xPC9mb3JlaWduPiAoY29ybiBhbGxvd2FuY2UpIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OvM65z4POuOG9uc+CPC9mb3JlaWduPiAocGF5KSBoZXJlIHNlZW0gdG8gYmUgaWRlbnRpZmllZDsgcG9zc2libHkgYmVjYXVzZSBpbiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmQgd2hlcmUgZ3JhaW4gd2FzIHJlYWRpbHkgcHVyY2hhc2FibGUgdGhlIGZvcm1lciB3YXMgZ2l2ZW4gaW4gbW9uZXkuIENmLgogICAgICAgICAgICAgICAgICAgICAgICAyMywgMjkuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgbj0iMi40MCIgdW5pdD0iTG9lYiBjaGFwIiAvPgogICAgICAgICAgICAgICAgICAgIFN0YWJlbGJpdXMsIGtpbmcgb2YgdGhlIE15c2lhbnMsIGxhY2tpbmcgcGF5IHRvIGdpdmUgaGlzIHRyb29wcywgc3VtbW9uZWQgYQogICAgICAgICAgICAgICAgICAgIG1lZXRpbmcgb2YgdGhlIG9mZmljZXJzLCBhbmQgZGVjbGFyZWQgdGhhdCBoZSBubyBsb25nZXIgbmVlZGVkIHRoZSBwcml2YXRlCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMsIGJ1dCBvbmx5IHRoZSBvZmZpY2Vycy4gV2hlbiBoZSByZXF1aXJlZCB0cm9vcHMsIGhlIHdvdWxkIGVudHJ1c3QgYSBzdW0KICAgICAgICAgICAgICAgICAgICBvZiBtb25leSB0byBlYWNoIG9mZmljZXIgYW5kIHNlbmQgaGltIHRvIGNvbGxlY3QgbWVyY2VuYXJpZXM7IGJ1dCB0aGF0IG1lYW53aGlsZQogICAgICAgICAgICAgICAgICAgIGhlIHByZWZlcnJlZCB0byBnaXZlIHRoZSBvZmZpY2VycyB0aGUgcGF5IGhlIHdvdWxkIG90aGVyd2lzZSBoYXZlIHRvIGdpdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVuLiBBY2NvcmRpbmdseSBoZSBiYWRlIGVhY2ggZGlzbWlzcyB0aGUgbWVuIHdobyB3ZXJlIG9uIGhpcyBvd24gbXVzdGVyLXJvbGwuCiAgICAgICAgICAgICAgICAgICAgVGhlIG9mZmljZXJzLCBzY2VudGluZyBhIHNvdXJjZSBvZiBnYWluIGZvciB0aGVtc2VsdmVzLCBkaXNtaXNzZWQgdGhlaXIgbWVuLCBhcwogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBiaWRkZW4uIFNob3J0bHkgYWZ0ZXJ3YXJkcywgU3RhYmVsYml1cyBjYWxsZWQgdGhlbSB0b2dldGhlciBhbmQKICAgICAgICAgICAgICAgICAgICBpbmZvcm1lZCB0aGVtIHRoYXQgYSBjb25kdWN0b3Igd2l0aG91dCBoaXMgY2hvcnVzIGFuZCBhbiBvZmZpY2VyIHdpdGhvdXQgaGlzIG1lbgogICAgICAgICAgICAgICAgICAgIHdlcmUgYWxpa2UgdXNlbGVzczsgd2hlcmVmb3JlIGxldCB0aGVtIGRlcGFydCBmcm9tIGhpcyBjb3VudHJ5LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iQmVra2VyIiBuPSIyMCIgdW5pdD0ibGluZSIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PC90cmFuc2xhdGlvbj4="
translation['3.1.1'] = ""
translation['3.1.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iMTAiIHVuaXQ9ImxpbmUiIC8+YW5kIHJlbWVtYmVyaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBiZWF1dHkgZGVwZW5kcyBub3Qgb24gY29zdGxpbmVzcyBvZiByYWltZW50LCBub3IgZG9lcyBhYnVuZGFuY2Ugb2YgZ29sZCBzbwogICAgICAgICAgICAgICAgICAgIGNvbmR1Y2UgdG8gdGhlIHByYWlzZSBvZiBhIHdvbWFuIGFzIHNlbGYtY29udHJvbCBpbiBhbGwgdGhhdCBzaGUgZG9lcywgYW5kIGhlcgogICAgICAgICAgICAgICAgICAgIGluY2xpbmF0aW9uIHRvd2FyZHMgYW4gaG9ub3JhYmxlIGFuZCB3ZWxsLW9yZGVyZWQgbGlmZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IjEgUGV0ZXIgMy4zLjQiIHZhbGlkPSJ5ZXMiPjEgUGV0ZXIgMy4zLjQ8L2JpYmw+Ljwvbm90ZT4gRm9yCiAgICAgICAgICAgICAgICAgICAgc3VjaCBhZG9ybm1lbnQgb2YgdGhlIHNvdWwgYXMgdGhpcyBpcyBpbiB0cnV0aCBldmVyIGEgdGhpbmcgdG8gYmUgZW52aWVkLCBhbmQgYQogICAgICAgICAgICAgICAgICAgIGZhciBzdXJlciB3YXJyYW50IGZvciB0aGUgcGF5bWVudCwgdG8gdGhlIHdvbWFuIGhlcnNlbGYgaW4gaGVyIG9sZCBhZ2UgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgaGVyIGNoaWxkcmVuIGFmdGVyIGhlciwgb2YgdGhlIGR1ZSBtZWVkIG9mIHByYWlzZS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSIxIFBldGVyIDMuMy40IiB2YWxpZD0ieWVzIj4xIFBldGVyIDMuMy40PC9iaWJsPi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcywgdGhlbiwgaXMgdGhlIHByb3ZpbmNlIG92ZXIgd2hpY2ggYSB3b21hbiBzaG91bGQgYmUgbWluZGVkIHRvIGJlYXIgYW4KICAgICAgICAgICAgICAgICAgICBvcmRlcmx5IHJ1bGU7IGZvciBpdCBzZWVtcyBub3QgZml0dGluZyB0aGF0IGEgbWFuIHNob3VsZCBrbm93IGFsbCB0aGF0IHBhc3NlcwogICAgICAgICAgICAgICAgICAgIHdpdGhpbiB0aGUgaG91c2UuIEJ1dCBpbiBhbGwgb3RoZXIgbWF0dGVycywgbGV0IGl0IGJlIGhlciBhaW0gdG8gb2JleSBoZXIKICAgICAgICAgICAgICAgICAgICBodXNiYW5kOyBnaXZpbmcgbm8gaGVlZCB0byBwdWJsaWMgYWZmYWlycywgbm9yIGRlc2lyaW5nIGFueSBwYXJ0IGluIGFycmFuZ2luZwogICAgICAgICAgICAgICAgICAgIHRoZSBtYXJyaWFnZXMgb2YgaGVyIGNoaWxkcmVuLjwvdHJhbnNsYXRpb24+"
translation['3.1.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0icCIgbj0iMjAiIHVuaXQ9ImNhcmQiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJSb3NlIiBuPSIyMCIgdW5pdD0ibGluZSIgLz5SYXRoZXIsIHdoZW4gdGhlIHRpbWUgc2hhbGwgY29tZSB0byBnaXZlIG9yCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZSBpbiBtYXJyaWFnZSBzb25zIG9yIGRhdWdodGVycywgbGV0IGhlciBldmVuIHRoZW4gaGVhcmtlbiB0byBoZXIgaHVzYmFuZAogICAgICAgICAgICAgICAgICAgIGluIGFsbCByZXNwZWN0cywgYW5kIGFncmVlaW5nIHdpdGggaGltIG9iZXkgaGlzIGJlaGVzdDsgY29uc2lkZXJpbmcgdGhhdCBpdCBpcwogICAgICAgICAgICAgICAgICAgIGxlc3MgdW5zZWVtbHkgZm9yIGhpbSB0byBkZWFsIHdpdGggYSBtYXR0ZXIgd2l0aGluIHRoZSBob3VzZSB0aGFuIGl0IGlzIGZvciBoZXIKICAgICAgICAgICAgICAgICAgICB0byBwcnkgaW50byB0aG9zZSBvdXRzaWRlIGl0cyB3YWxscy4gTmF5LCBpdCBpcyBmaXR0aW5nIHRoYXQgYSB3b21hbiBvZgogICAgICAgICAgICAgICAgICAgIHdlbGwtb3JkZXJlZCBsaWZlIHNob3VsZCBjb25zaWRlciB0aGF0IGhlciBodXNiYW5kJ3MgdXNlcyBhcmUgYXMgbGF3cyBhcHBvaW50ZWQKICAgICAgICAgICAgICAgICAgICBmb3IgaGVyIG93biBsaWZlIGJ5IGRpdmluZSB3aWxsLCBhbG9uZyB3aXRoIHRoZSBtYXJyaWFnZSBzdGF0ZSBhbmQgdGhlIGZvcnR1bmUKICAgICAgICAgICAgICAgICAgICBzaGUgc2hhcmVzLiBJZiBzaGUgZW5kdXJlcyB0aGVtIHdpdGggcGF0aWVuY2UgYW5kIGdlbnRsZW5lc3MsIHNoZSB3aWxsIHJ1bGUgaGVyCiAgICAgICAgICAgICAgICAgICAgaG9tZSB3aXRoIGVhc2U7IG90aGVyd2lzZSwgbm90IHNvIGVhc2lseS4gV2hlcmVmb3JlIG5vdCBvbmx5IHdoZW4gaGVyIGh1c2JhbmQgaXMKICAgICAgICAgICAgICAgICAgICBpbiBwcm9zcGVyaXR5PC90cmFuc2xhdGlvbj4="
translation['3.1.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iMzAiIHVuaXQ9ImxpbmUiIC8+YW5kIGdvb2QgcmVwb3J0IGRvZXMgaXQKICAgICAgICAgICAgICAgICAgICBiZXNlZW0gaGVyIHRvIGJlIGluIG1vZGVzdCBhZ3JlZW1lbnQgd2l0aCBoaW0sIGFuZCB0byByZW5kZXIgaGltIHRoZSBzZXJ2aWNlIGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbHMsIGJ1dCBhbHNvIGluIHRpbWVzIG9mIGFkdmVyc2l0eS4gSWYsIHRocm91Z2ggc2lja25lc3Mgb3IgZmF1bHQgb2YKICAgICAgICAgICAgICAgICAgICBqdWRnZW1lbnQsIGhpcyBnb29kIGZvcnR1bmUgZmFpbHMsIHRoZW4gbXVzdCBzaGUgc2hvdyBoZXIgcXVhbGl0eSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+T3IgKGlmIG1hbmlmZXN0YW0gZXNzZSByZXByZXNlbnRzIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs60zrfOu86/zr3hvbnPhM65PC9mb3JlaWduPikgInRoZW4gcGxhaW5seSBpdCBpcyBoZXIgcGFydCB0bwogICAgICAgICAgICAgICAgICAgICAgICBlbmNvdXJhZ2UgLiAuIC4gYW5kIHRvIHlpZWxkIC4gLiAuIiA8L25vdGU+IGVuY291cmFnaW5nIGhpbSBldmVyIHdpdGggd29yZHMKICAgICAgICAgICAgICAgICAgICBvZiBjaGVlciBhbmQgeWllbGRpbmcgaGltIG9iZWRpZW5jZSBpbiBhbGwgZml0dGluZyB3YXlzOyBvbmx5IGxldCBoZXIgZG8gbm90aGluZwogICAgICAgICAgICAgICAgICAgIGJhc2Ugb3IgdW53b3J0aHkgb2YgaGVyc2VsZiwgb3IgcmVtZW1iZXIgYW55IHdyb25nIGhlciBodXNiYW5kIG1heSBoYXZlIGRvbmUgaGVyCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCBkaXN0cmVzcyBvZiBtaW5kLiBMZXQgaGVyIHJlZnJhaW4gZnJvbSBhbGwgY29tcGxhaW50LCBub3IgY2hhcmdlIGhpbQogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIHdyb25nLCBidXQgcmF0aGVyIGF0dHJpYnV0ZSBldmVyeXRoaW5nIG9mIHRoaXMga2luZCB0byBzaWNrbmVzcyBvcgogICAgICAgICAgICAgICAgICAgIGlnbm9yYW5jZSBvciBhY2NpZGVudGFsIGVycm9ycy4gRm9yIHRoZSBtb3JlIHNlZHVsb3VzIGhlciBzZXJ2aWNlIGhlcmVpbiwgdGhlCiAgICAgICAgICAgICAgICAgICAgZnVsbGVyIHdpbGwgYmUgaGlzIGdyYXRpdHVkZTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs60zrfOu86/zr3hvbnPhM65PC9mb3JlaWduPikgInRoZW4gcGxhaW5seSBpdCBpcyBoZXIgcGFydCB0bwogICAgICAgICAgICAgICAgICAgICAgICBlbmNvdXJhZ2UgLiAuIC4gYW5kIHRvIHlpZWxkIC4gLiAuIiA8L3RyYW5zbGF0aW9uPg=="
translation['3.1.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0icCIgbj0iNDAiIHVuaXQ9ImNhcmQiIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJSb3NlIiBuPSI0MCIgdW5pdD0ibGluZSIgLz53aGVuIGhlIGlzIHJlc3RvcmVkLCBhbmQgZnJlZWQgZnJvbSBoaXMKICAgICAgICAgICAgICAgICAgICB0cm91YmxlOyBhbmQgaWYgc2hlIGhhcyBmYWlsZWQgdG8gb2JleSBoaW0gd2hlbiBoZSBjb21tYW5kZWQgYXVnaHQgdGhhdCBpcwogICAgICAgICAgICAgICAgICAgIGFtaXNzLCB0aGUgZGVlcGVyIHdpbGwgYmUgaGlzIHJlY29nbml0aW9uICZsdDtvZiBoZXIgbG95YWx0eSZndDsgd2hlbgogICAgICAgICAgICAgICAgICAgIGhlYWx0aCByZXR1cm5zLiBXaGVyZWZvcmUsIHdoaWxzdCBjYXJlZnVsIHRvIGF2b2lkIHN1Y2ggJmx0O21pc3BsYWNlZAogICAgICAgICAgICAgICAgICAgIG9iZWRpZW5jZSZndDssIGluIG90aGVyIHJlc3BlY3RzIHNoZSB3aWxsIHNlcnZlIGhpbSBtb3JlIGFzc2lkdW91c2x5IHRoYW4gaWYKICAgICAgICAgICAgICAgICAgICBzaGUgaGFkIGJlZW4gYSBib25kd29tYW4gYm91Z2h0IGFuZCB0YWtlbiBob21lLiBGb3IgaGUgaGFzIGluZGVlZCBib3VnaHQgaGVyCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGdyZWF0IHByaWNl4oCUd2l0aCBwYXJ0bmVyc2hpcCBpbiBoaXMgbGlmZSBhbmQgaW4gdGhlIHByb2NyZWF0aW9uCiAgICAgICAgICAgICAgICAgICAgb2YgY2hpbGRyZW47IHRoYW4gd2hpY2ggdGhpbmdzIG5vdWdodCBjb3VsZCBiZSBncmVhdGVyIG9yIG1vcmUgZGl2aW5lLiBBbmQKICAgICAgICAgICAgICAgICAgICBiZXNpZGVzIGFsbCB0aGlzLCB0aGUgd2lmZSB3aG8gaGFkIG9ubHkgbGl2ZWQgaW4gY29tcGFueSB3aXRoIGEgZm9ydHVuYXRlCiAgICAgICAgICAgICAgICAgICAgaHVzYmFuZCB3b3VsZCBub3QgaGF2ZSBoYWQgdGhlIGxpa2Ugb3Bwb3J0dW5pdHkgdG8gc2hvdyBoZXIgdHJ1ZSBxdWFsaXR5LiBGb3IKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggdGhlcmUgYmUgbm8gc21hbGwgbWVyaXQgaW4gYSByaWdodCBhbmQgbm9ibGUgdXNlIG9mIHByb3NwZXJpdHksIHN0aWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHJpZ2h0IGVuZHVyYW5jZSBvZiBhZHZlcnNpdHkganVzdGx5IHJlY2VpdmVzIGFuIGhvbm9yIGdyZWF0ZXIgYnkgZmFyLjwvdHJhbnNsYXRpb24+"
translation['3.1.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iNTAiIHVuaXQ9ImxpbmUiIC8+Rm9yIG9ubHkgYSBncmVhdCBzb3VsIGNhbiBsaXZlIGluIHRoZSBtaWRzdCBvZgogICAgICAgICAgICAgICAgICAgIHRyb3VibGUgYW5kIHdyb25nIHdpdGhvdXQgaXRzZWxmIGNvbW1pdHRpbmcgYW55IGJhc2UgYWN0LiBBbmQgc28sIHdoaWxlIHByYXlpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlciBodXNiYW5kIG1heSBiZSBzcGFyZWQgYWR2ZXJzaXR5LCBpZiB0cm91YmxlIHNob3VsZCBjb21lIGl0IGJlc2VlbXMgdGhlCiAgICAgICAgICAgICAgICAgICAgd2lmZSB0byBjb25zaWRlciB0aGF0IGhlcmUgYSBnb29kIHdvbWFuIHdpbnMgaGVyIGhpZ2hlc3QgcHJhaXNlLiBMZXQgaGVyIGJldGhpbmsKICAgICAgICAgICAgICAgICAgICBoZXJzZWxmIGhvdyBBbGNlc3RpcyB3b3VsZCBuZXZlciBoYXZlIGF0dGFpbmVkIHN1Y2ggcmVub3duIG5vciBQZW5lbG9wZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWQgYWxsIHRoZSBoaWdoIHByYWlzZXMgYmVzdG93ZWQgb24gaGVyIGhhZCBub3QgdGhlaXIgaHVzYmFuZHMga25vd24KICAgICAgICAgICAgICAgICAgICBhZHZlcnNpdHk7IHdoZXJlYXMgdGhlIHRyb3VibGVzIG9mIEFkbWV0dXMgYW5kIFVseXNzZXMgaGF2ZSBvYnRhaW5lZCBmb3IgdGhlaXIKICAgICAgICAgICAgICAgICAgICB3aXZlcyBhIHJlcHV0YXRpb24gdGhhdCBzaGFsbCBuZXZlciBkaWUuIEZvciBiZWNhdXNlIGluIHRpbWUgb2YgZGlzdHJlc3MgdGhleQogICAgICAgICAgICAgICAgICAgIHByb3ZlZCB0aGVtc2VsdmVzIGZhaXRoZnVsIGFuZCBkdXRpZnVsIHRvIHRoZWlyIGh1c2JhbmRzLCB0aGUgZ29kcyBoYXZlIGJlc3Rvd2VkCiAgICAgICAgICAgICAgICAgICAgb24gdGhlbSB0aGUgaG9ub3IgdGhleSBkZXNlcnZlZC4gVG8gZmluZCBwYXJ0bmVycyBpbiBwcm9zcGVyaXR5IGlzIGVhc3kKICAgICAgICAgICAgICAgICAgICAgICAgZW5vdWdoOzwvdHJhbnNsYXRpb24+"
translation['3.1.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iNjAiIHVuaXQ9ImxpbmUiIC8+YnV0IG9ubHkgdGhlIGJlc3Qgd29tZW4gYXJlCiAgICAgICAgICAgICAgICAgICAgcmVhZHkgdG8gc2hhcmUgaW4gYWR2ZXJzaXR5LiBGb3IgYWxsIHRoZXNlIHJlYXNvbnMgaXQgaXMgZml0dGluZyB0aGF0IGEgd29tYW4KICAgICAgICAgICAgICAgICAgICBzaG91bGQgJmx0O2luIHRpbWUgb2YgYWR2ZXJzaXR5Jmd0OyBwYXkgaGVyIGh1c2JhbmQgYW4gaG9ub3IgZ3JlYXRlciBieQogICAgICAgICAgICAgICAgICAgIGZhciwgbm9yIGZlZWwgc2hhbWUgb24gaGlzIGFjY291bnQgZXZlbiB3aGVuLCBhcyBPcnBoZXVzIHNheXMsPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SG9seSBoZWFsdGgKICAgICAgICAgICAgICAgICAgICAgICAgb2Ygc291bCwgYW5kIHdlYWx0aCwgdGhlIGNoaWxkIG9mIGEgYnJhdmUgc3Bpcml0LCBjb21wYW5pb24gaGltIG5vCiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUuPC9xdW90ZT48L3RyYW5zbGF0aW9uPg=="
translation['3.2.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0icCIgbj0iNjUiIHVuaXQ9ImNhcmQiIC8+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlN1Y2ggdGhlbiBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuIG9mIHRoZSBydWxlcyBhbmQgd2F5cyBvZiBsaXZpbmcgd2hpY2ggYSBnb29kIHdpZmUgd2lsbCBvYnNlcnZlLiBBbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgcnVsZXMgd2hpY2ggYSBnb29kIGh1c2JhbmQgd2lsbCBmb2xsb3cgaW4gdHJlYXRtZW50IG9mIGhpcyB3aWZlIHdpbGwgYmUgc2ltaWxhcjsKICAgICAgICAgICAgICAgICAgICBzZWVpbmcgdGhhdCBzaGUgaGFzIGVudGVyZWQgaGlzIGhvbWUgbGlrZSBhIHN1cHBsaWFudCBmcm9tIHdpdGhvdXQsIGFuZCBpcwogICAgICAgICAgICAgICAgICAgIHBsZWRnZWQgdG8gYmUgdGhlIHBhcnRuZXIgb2YgaGlzIGxpZmUgYW5kIHBhcmVudGhvb2Q7IGFuZCB0aGF0IHRoZSBvZmZzcHJpbmcgc2hlCiAgICAgICAgICAgICAgICAgICAgbGVhdmVzIGJlaGluZCBoZXIgd2lsbCBiZWFyIHRoZSBuYW1lcyBvZiB0aGVpciBwYXJlbnRzLCBoZXIgbmFtZSBhcyB3ZWxsIGFzIGhpcy4KICAgICAgICAgICAgICAgICAgICBBbmQgd2hhdCBjb3VsZCBiZSBtb3JlIGRpdmluZSB0aGFuIHRoaXMsIG9yIG1vcmUgZGVzaXJlZCBieSBhIG1hbiBvZiBzb3VuZAogICAgICAgICAgICAgICAgICAgICAgICBtaW5kLDwvdHJhbnNsYXRpb24+"
translation['3.2.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iNzAiIHVuaXQ9ImxpbmUiIC8+dGhhbiB0byBiZWdldCBieSBhIG5vYmxlIGFuZAogICAgICAgICAgICAgICAgICAgIGhvbm9yZWQgd2lmZSBjaGlsZHJlbiB3aG8gc2hhbGwgYmUgdGhlIG1vc3QgbG95YWwgc3VwcG9ydGVycyBhbmQgZGlzY3JlZXQKICAgICAgICAgICAgICAgICAgICBndWFyZGlhbnMgb2YgdGhlaXIgcGFyZW50cyBpbiBvbGQgYWdlLCBhbmQgdGhlIHByZXNlcnZlcnMgb2YgdGhlIHdob2xlIGhvdXNlPwogICAgICAgICAgICAgICAgICAgIFJpZ2h0bHkgcmVhcmVkIGJ5IGZhdGhlciBhbmQgbW90aGVyLCBjaGlsZHJlbiB3aWxsIGdyb3cgdXAgdmlydHVvdXMsIGFzIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIGhhdmUgdHJlYXRlZCB0aGVtIHBpb3VzbHkgYW5kIHJpZ2h0ZW91c2x5IGRlc2VydmUgdGhhdCB0aGV5IHNob3VsZDsgYnV0CiAgICAgICAgICAgICAgICAgICAgJmx0O3BhcmVudHMmZ3Q7IHdobyBvYnNlcnZlIG5vdCB0aGVzZSBwcmVjZXB0cyB3aWxsIGJlIGxvc2VycyB0aGVyZWJ5LgogICAgICAgICAgICAgICAgICAgIEZvciB1bmxlc3MgcGFyZW50cyBoYXZlIGdpdmVuIHRoZWlyIGNoaWxkcmVuIGFuIGV4YW1wbGUgaG93IHRvIGxpdmUsIHRoZQogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuIGluIHRoZWlyIHR1cm4gd2lsbCBiZSBhYmxlIHRvIG9mZmVyIGEgZmFpciBhbmQgc3BlY2lvdXMgZXhjdXNlCiAgICAgICAgICAgICAgICAgICAgJmx0O2ZvciB1bmR1dGlmdWxuZXNzJmd0Oy4gU3VjaCBwYXJlbnRzIHdpbGwgcmlzayBiZWluZyByZWplY3RlZCBieQogICAgICAgICAgICAgICAgICAgIHRoZWlyIG9mZnNwcmluZyBmb3IgdGhlaXIgZXZpbCBsaXZlcywgYW5kIHRodXMgYnJpbmdpbmcgZGVzdHJ1Y3Rpb24gdXBvbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIG93biBoZWFkcy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlcmVmb3JlIGhpcyB3aWZlJ3MgdHJhaW5pbmcgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgdGhlIG9iamVjdCBvZiBhIG1hbidzIHVuc3RpbnRpbmcgY2FyZTs8L3RyYW5zbGF0aW9uPg=="
translation['3.2.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iODAiIHVuaXQ9ImxpbmUiIC8+dGhhdCBzbyBmYXIgYXMgaXMgcG9zc2libGUgdGhlaXIgY2hpbGRyZW4gbWF5IHNwcmluZyBmcm9tIHRoZSBub2JsZXN0IG9mCiAgICAgICAgICAgICAgICAgICAgc3RvY2suIEZvciB0aGUgdGlsbGVyIG9mIHRoZSBzb2lsIHNwYXJlcyBubyBwYWlucyB0byBzb3cgaGlzIHNlZWQgaW4gdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBmZXJ0aWxlIGFuZCBiZXN0IGN1bHRpdmF0ZWQgbGFuZCwgbG9va2luZyB0aHVzIHRvIG9idGFpbiB0aGUgZmFpcmVzdCBmcnVpdHM7IGFuZAogICAgICAgICAgICAgICAgICAgIHRvIHNhdmUgaXQgZnJvbSBkZXZhc3RhdGlvbiBpcyByZWFkeSwgaWYgc3VjaCBiZSBoaXMgbG90LCB0byBmYWxsIGluIGNvbmZsaWN0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaXMgZm9lczsgYSBkZWF0aCB3aGljaCBtZW4gY3Jvd24gd2l0aCB0aGUgaGlnaGVzdCBvZiBwcmFpc2UuIFNlZWluZywgdGhlbiwKICAgICAgICAgICAgICAgICAgICB0aGF0IHN1Y2ggY2FyZSBpcyBsYXZpc2hlZCBvbiB0aGUgYm9keSdzIGZvb2QsIHN1cmVseSBldmVyeSBjYXJlIHNob3VsZCBiZSB0YWtlbgogICAgICAgICAgICAgICAgICAgIG9uIGJlaGFsZiBvZiBvdXIgb3duIGNoaWxkcmVuJ3MgbW90aGVyIGFuZCBudXJzZSwgaW4gd2hvbSBpcyBpbXBsYW50ZWQgdGhlIHNlZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIHdoaWNoIHRoZXJlIHNwcmluZ3MgYSBsaXZpbmcgc291bC4gRm9yIGl0IGlzIG9ubHkgYnkgdGhpcyBtZWFucyB0aGF0IGVhY2gKICAgICAgICAgICAgICAgICAgICBtb3J0YWwsIHN1Y2Nlc3NpdmVseSBwcm9kdWNlZCwgcGFydGljaXBhdGVzIGluIGltbW9ydGFsaXR5OyBhbmQgdGhhdCBwZXRpdGlvbnMKICAgICAgICAgICAgICAgICAgICBhbmQgcHJheWVycyBjb250aW51ZSB0byBiZSBvZmZlcmVkIHRvIGFuY2VzdHJhbCBnb2RzLjwvdHJhbnNsYXRpb24+"
translation['3.2.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iOTAiIHVuaXQ9ImxpbmUiIC8+U28gdGhhdCBoZSB3aG8gdGhpbmtzIGxpZ2h0bHkgb2YgdGhpczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pLmUuLCB0aGUgcHJvY3JlYXRpb24gb2YgY2hpbGRyZW4uPC9ub3RlPiB3b3VsZCBzZWVtIGFsc28gdG8KICAgICAgICAgICAgICAgICAgICBiZSBzbGlnaHRpbmcgdGhlIGdvZHMuIEZvciB0aGVpciBzYWtlIHRoZW4sIGluIHdob3NlIHByZXNlbmNlIGhlIG9mZmVyZWQKICAgICAgICAgICAgICAgICAgICBzYWNyaWZpY2UgYW5kIGxlZCBoaXMgd2lmZSBob21lLCBwcm9taXNpbmcgdG8gaG9ub3IgaGVyIGZhciBhYm92ZSBhbGwgb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgc2F2aW5nIGhpcyBwYXJlbnRzLCAmbHQ7YSBtYW4gbXVzdCBoYXZlIGNhcmUgZm9yIHdpZmUgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuJmd0Oy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGEgdmlydHVvdXMgd2lmZSBpcyBiZXN0CiAgICAgICAgICAgICAgICAgICAgaG9ub3JlZCB3aGVuIHNoZSBzZWVzIHRoYXQgaGVyIGh1c2JhbmQgaXMgZmFpdGhmdWwgdG8gaGVyLCBhbmQgaGFzIG5vIHByZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICBmb3IgYW5vdGhlciB3b21hbjsgYnV0IGJlZm9yZSBhbGwgb3RoZXJzIGxvdmVzIGFuZCB0cnVzdHMgaGVyIGFuZCBob2xkcyBoZXIgYXMKICAgICAgICAgICAgICAgICAgICBoaXMgb3duLiBBbmQgc28gbXVjaCB0aGUgbW9yZSB3aWxsIHRoZSB3b21hbiBzZWVrIHRvIGJlIHdoYXQgaGUgYWNjb3VudHMgaGVyLiBJZgogICAgICAgICAgICAgICAgICAgIHNoZSBwZXJjZWl2ZXMgdGhhdCBoZXIgaHVzYmFuZCdzIGFmZmVjdGlvbiBmb3IgaGVyIGlzIGZhaXRoZnVsIGFuZCByaWdodGVvdXMsCiAgICAgICAgICAgICAgICAgICAgc2hlIHRvbyB3aWxsIGJlIGZhaXRoZnVsIGFuZCByaWdodGVvdXMgdG93YXJkcyBoaW0uPC90cmFuc2xhdGlvbj4="
translation['3.2.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iMTAwIiB1bml0PSJsaW5lIiAvPldoZXJlZm9yZSBhIG1hbiBvZiBzb3VuZCBtaW5kIG91Z2h0IG5vdCB0byBmb3JnZXQgd2hhdCBob25vcnMKICAgICAgICAgICAgICAgICAgICBhcmUgcHJvcGVyIHRvIGhpcyBwYXJlbnRzIG9yIHdoYXQgZml0dGluZ2x5IGJlbG9uZyB0byBoaXMgd2lmZSBhbmQgY2hpbGRyZW47IHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCByZW5kZXJpbmcgdG8gZWFjaCBhbmQgYWxsIHRoZWlyIG93biwgaGUgbWF5IG9iZXkgdGhlIGxhdyBvZiBtZW4gYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgZ29kcy4gRm9yIHRoZSBkZXByaXZhdGlvbiB3ZSBmZWVsIG1vc3Qgb2YgYWxsIGlzIHRoYXQgb2YgdGhlIHNwZWNpYWwgaG9ub3Igd2hpY2gKICAgICAgICAgICAgICAgICAgICBpcyBvdXIgZHVlOyBub3Igd2lsbCBhYnVuZGFudCBnaWZ0cyBvZiB3aGF0IGJlbG9uZ3MgdG8gb3RoZXJzIGJlIHdlbGNvbWUgdG8gaGltCiAgICAgICAgICAgICAgICAgICAgd2hvIGlzIGRpc3Bvc3Nlc3NlZCBvZiBoaXMgb3duLiBOb3cgdG8gYSB3aWZlIG5vdGhpbmcgaXMgb2YgbW9yZSB2YWx1ZSwgbm90aGluZwogICAgICAgICAgICAgICAgICAgIG1vcmUgcmlnaHRmdWxseSBoZXIgb3duLCB0aGFuIGhvbm9yZWQgYW5kIGZhaXRoZnVsIHBhcnRuZXJzaGlwIHdpdGggaGVyIGh1c2JhbmQuCiAgICAgICAgICAgICAgICAgICAgV2hlcmVmb3JlIGl0IGJlZml0cyBub3QgYSBtYW4gb2Ygc291bmQgbWluZCB0byBiZXN0b3cgaGlzIHBlcnNvbiBwcm9taXNjdW91c2x5LAogICAgICAgICAgICAgICAgICAgIG9yIGhhdmUgcmFuZG9tIGludGVyY291cnNlIHdpdGggd29tZW47IGZvciBvdGhlcndpc2UgdGhlIGJhc2UtYm9ybiB3aWxsIHNoYXJlIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpZ2h0cyBvZiBoaXMgbGF3ZnVsIGNoaWxkcmVuLDwvdHJhbnNsYXRpb24+"
translation['3.2.110'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iMTEwIiB1bml0PSJsaW5lIiAvPmFuZAogICAgICAgICAgICAgICAgICAgIGhpcyB3aWZlIHdpbGwgYmUgcm9iYmVkIG9mIGhlciBob25vciBkdWUsIGFuZCBzaGFtZSBiZSBhdHRhY2hlZCB0byBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgc29ucy48L3RyYW5zbGF0aW9uPg=="
translation['3.3.110'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0icCIgbj0iMTExIiB1bml0PSJjYXJkIiAvPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBhbGwgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzLCB0aGVyZWZvcmUsIGEgbWFuIHNob3VsZCBnaXZlIGhlZWQuIEFuZCBpdCBpcyBmaXR0aW5nIHRoYXQgaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgYXBwcm9hY2ggaGlzIHdpZmUgaW4gaG9ub3JhYmxlIHdpc2UsIGZ1bGwgb2Ygc2VsZi1yZXN0cmFpbnQgYW5kIGF3ZTsgYW5kIGluIGhpcwogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNhdGlvbiB3aXRoIGhlciwgc2hvdWxkIHVzZSBvbmx5IHRoZSB3b3JkcyBvZiBhIHJpZ2h0LW1pbmRlZCBtYW4sCiAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGluZyBvbmx5IHN1Y2ggYWN0cyBhcyBhcmUgdGhlbXNlbHZlcyBsYXdmdWwgYW5kIGhvbm9yYWJsZTsgdHJlYXRpbmcgaGVyCiAgICAgICAgICAgICAgICAgICAgd2l0aCBtdWNoIHNlbGYtcmVzdHJhaW50IGFuZCB0cnVzdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+T3IKICAgICAgICAgICAgICAgICAgICAgICAgImxveWFsdHkuIiA8L25vdGU+IGFuZCBwYXNzaW5nIG92ZXIgYW55IHRyaXZpYWwgb3IgdW5pbnRlbnRpb25hbCBlcnJvcnMgc2hlCiAgICAgICAgICAgICAgICAgICAgaGFzIGNvbW1pdHRlZC4gQW5kIGlmIHRocm91Z2ggaWdub3JhbmNlIHNoZSBoYXMgZG9uZSB3cm9uZywgaGUgc2hvdWxkIGFkdmlzZSBoZXIKICAgICAgICAgICAgICAgICAgICBvZiBpdCB3aXRob3V0IHRocmVhdGVuaW5nLCBpbiBhIGNvdXJ0ZW91cyBhbmQgbW9kZXN0IG1hbm5lci4gSW5kaWZmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgJmx0O3RvIGhlciBmYXVsdHMmZ3Q7IGFuZCBoYXJzaCByZXByb29mICZsdDtvZiB0aGVtJmd0OywgaGUgbXVzdAogICAgICAgICAgICAgICAgICAgIGFsaWtlIGF2b2lkLiBCZXR3ZWVuIGEgY291cnRlc2FuIGFuZCBoZXIgbG92ZXIsIHN1Y2ggdGVtcGVycyBhcmUgYWxsb3dlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgICAgICBjb3Vyc2U7PC90cmFuc2xhdGlvbj4="
translation['3.3.120'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iMTIwIiB1bml0PSJsaW5lIiAvPmJldHdlZW4gYSBmcmVlIHdvbWFuIGFuZAogICAgICAgICAgICAgICAgICAgIGhlciBsYXdmdWwgc3BvdXNlIHRoZXJlIHNob3VsZCBiZSBhIHJldmVyZW50IGFuZCBtb2Rlc3QgbWluZ2xpbmcgb2YgbG92ZSBhbmQKICAgICAgICAgICAgICAgICAgICBmZWFyLiBGb3Igb2YgZmVhciB0aGVyZSBhcmUgdHdvIGtpbmRzLiBUaGUgZmVhciB3aGljaCB2aXJ0dW91cyBhbmQgaG9ub3JhYmxlCiAgICAgICAgICAgICAgICAgICAgc29ucyBmZWVsIHRvd2FyZHMgdGhlaXIgZmF0aGVycywgYW5kIGxveWFsIGNpdGl6ZW5zIHRvd2FyZHMgcmlnaHQtbWluZGVkIHJ1bGVycywKICAgICAgICAgICAgICAgICAgICBoYXMgZm9yIGl0cyBjb21wYW5pb25zIHJldmVyZW5jZSBhbmQgbW9kZXN0eTsgYnV0IHRoZSBvdGhlciBraW5kLCBmZWx0IGJ5IHNsYXZlcwogICAgICAgICAgICAgICAgICAgIGZvciBtYXN0ZXJzIGFuZCBieSBzdWJqZWN0cyBmb3IgZGVzcG90cyB3aG8gdHJlYXQgdGhlbSB3aXRoIGluanVzdGljZSBhbmQgd3JvbmcsCiAgICAgICAgICAgICAgICAgICAgaXMgYXNzb2NpYXRlZCB3aXRoIGhvc3RpbGl0eSBhbmQgaGF0cmVkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CeQogICAgICAgICAgICAgICAgICAgIGNob29zaW5nIHRoZSBiZXR0ZXIgb2YgYWxsIHRoZXNlIGFsdGVybmF0aXZlcyBhIGh1c2JhbmQgc2hvdWxkIHNlY3VyZSB0aGUKICAgICAgICAgICAgICAgICAgICBhZ3JlZW1lbnQsIGxveWFsdHksIGFuZCBkZXZvdGlvbiBvZiBoaXMgd2lmZSwgc28gdGhhdCB3aGV0aGVyIGhlIGhpbXNlbGYgaXMKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IG9yIG5vdCwgdGhlcmUgbWF5IGJlIG5vIGRpZmZlcmVuY2UgaW4gaGVyIGF0dGl0dWRlIHRvd2FyZHMgaGltLCBzaW5jZQogICAgICAgICAgICAgICAgICAgIHNoZSByZWFsaXplcyB0aGF0IHRoZXkgYXJlIGFsaWtlIGd1YXJkaWFucyBvZiB0aGUgY29tbW9uIGludGVyZXN0czsgYW5kIHNvIHdoZW4KICAgICAgICAgICAgICAgICAgICBoZSBpcyBhd2F5IHNoZSBtYXkgZmVlbCB0aGF0IHRvIGhlciBubyBtYW4gaXMga2luZGVyIDwvdHJhbnNsYXRpb24+"
translation['3.3.130'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iMTMwIiB1bml0PSJsaW5lIiAvPm9yIG1vcmUgdmlydHVvdXMgb3IgbW9yZSB0cnVseSBoZXJzIHRoYW4gaGVyIG93bgogICAgICAgICAgICAgICAgICAgICAgICBodXNiYW5kLjwvdHJhbnNsYXRpb24+"
translation['3.3.140'] = ""
translation['3.3.150'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0icCIgbj0iMTUwIiB1bml0PSJjYXJkIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iMTUwIiB1bml0PSJsaW5lIiAvPlRoaXMgd2FzIGlsbCBzcG9rZW4gb2YgdGhlIG1vdGhlciBvZiBoaXMgY2hpbGRyZW47IG5vcgogICAgICAgICAgICAgICAgICAgIHdhcyBoaXMgY29ubmVjdGlvbiB3aXRoIHRoZSBvdGhlciBhIHJpZ2h0ZW91cyBvbmUuIEhvdyBjb3VsZCBpdCBiZSwgd2hlbiBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBidXQgcmVjZW50bHkgY29tcGVsbGVkIGhlciB0byBiZSBoaXMgY29uY3ViaW5lLCBhbmQgYmVmb3JlIGhlIGhhZCBhbnkgZXhwZXJpZW5jZQogICAgICAgICAgICAgICAgICAgIG9mIGhlciBiZWhhdmlvciB0byBoaW0/IFVseXNzZXMgb24gdGhlIG90aGVyIGhhbmQsIHdoZW4gdGhlIGRhdWdodGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEF0bGFzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNhbHlwc28uIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA1LjEzNiIgdmFsaWQ9InllcyI+SG9tLiBPZC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUuMTM2LCAyMDNmZi48L2JpYmw+PC9ub3RlPiBiZXNvdWdodCBoaW0gdG8gc2hhcmUgaGVyIGJlZCBhbmQgYm9hcmQsIGFuZAogICAgICAgICAgICAgICAgICAgIHByb21pc2VkIGhpbSBpbW1vcnRhbGl0eSBhbmQgZXZlcmxhc3RpbmcgaGFwcGluZXNzLCBjb3VsZCBub3QgYnJpbmcgaGltc2VsZiBldmVuCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBzYWtlIG9mIGltbW9ydGFsaXR5IHRvIGJldHJheSB0aGUga2luZG5lc3MgYW5kIGxvdmUgYW5kIGxveWFsdHkgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgd2lmZSwgZGVlbWluZyBpbW1vcnRhbGl0eSBwdXJjaGFzZWQgYnkgdW5yaWdodGVvdXNuZXNzIHRvIGJlIHRoZSB3b3JzdCBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBwdW5pc2htZW50cy48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA1LjEzNiIgdmFsaWQ9InllcyI+SG9tLiBPZC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUuMTM2LCAyMDNmZi48L2JpYmw+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBHb3JnLiAgICAgICAgICAgICAgICAgICAgICAgICA0NzIiIHZhbGlkPSJ5ZXMiPlBsYXQuIEdvcmcuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0NzJmZi48L2JpYmw+PC9ub3RlPiBGb3IgaXQgd2FzIG9ubHkgdG8gc2F2ZSBoaXMgY29tcmFkZXMgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHlpZWxkZWQgaGlzIHBlcnNvbiB0byBDaXJjZTsgYW5kIGluIGFuc3dlciB0byBoZXIgaGUgZXZlbiBkZWNsYXJlZCB0aGF0IGluIGhpcwogICAgICAgICAgICAgICAgICAgIGV5ZXMgbm90aGluZyBjb3VsZCBiZSBtb3JlIGxvdmVseSB0aGFuIGhpcyBuYXRpdmUgaXNsZSwgcnVnZ2VkIHRob3VnaCBpdAogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlOzxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIEdvcmcuICAgICAgICAgICAgICAgICAgICAgICAgIDQ3MiIgdmFsaWQ9InllcyI+UGxhdC4gR29yZy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ3MmZmLjwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['3.3.160'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iMTYwIiB1bml0PSJsaW5lIiAvPmFuZCBwcmF5ZWQgdGhhdCBoZSBtaWdodCBkaWUsCiAgICAgICAgICAgICAgICAgICAgaWYgb25seSBoZSBtaWdodCBsb29rIHVwb24gaGlzIG1vcnRhbCB3aWZlIGFuZCBzb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA5LjI2IiB2YWxpZD0ieWVzIj5Ib20uIE9kLiA5LjI2ZmYuPC9iaWJsPi48L25vdGU+IFNvIGZpcm1seSBkaWQKICAgICAgICAgICAgICAgICAgICBoZSBrZWVwIHRyb3RoIHdpdGggaGlzIHdpZmU7IGFuZCByZWNlaXZlZCBpbiByZXR1cm4gZnJvbSBoZXIgdGhlIGxpa2UKICAgICAgICAgICAgICAgICAgICAgICAgbG95YWx0eS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA5LjI2IiB2YWxpZD0ieWVzIj5Ib20uIE9kLiA5LjI2ZmYuPC9iaWJsPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+V2l0aCB0aGlzIGNoYXB0ZXIgY2YuIHRoZSBwb2VtIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFNpbW9uIERhY2ggKDxkYXRlIGF1dGhuYW1lPSIxNjQ4IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIxNjQ4Ij4xNjQ4PC9kYXRlPikgdHJhbnNsYXRlZCBieSBMb25nZmVsbG93IGFzCiAgICAgICAgICAgICAgICAgICAgICAgICJBbm5pZSBvZiBUaGFyYXcuIjwvbm90ZT48ZGF0ZSBhdXRobmFtZT0iMTY0OCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iMTY0OCI+MTY0ODwvZGF0ZT4pIHRyYW5zbGF0ZWQgYnkgTG9uZ2ZlbGxvdyBhcwogICAgICAgICAgICAgICAgICAgICAgICAiQW5uaWUgb2YgVGhhcmF3LiI8L3RyYW5zbGF0aW9uPg=="
translation['3.4.160'] = ""
translation['3.4.170'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iMTcwIiB1bml0PSJsaW5lIiAvPmlzIG5vIG11dHVhbAogICAgICAgICAgICAgICAgICAgIHN1YnNlcnZpZW5jZSBpbiBlYWNoIG90aGVyJ3MgdmljZXMsIGJ1dCBvbmUgdGhhdCBpcyByaWdodGZ1bGx5IGFsbGllZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgd2lzZG9tIGFuZCB1bmRlcnN0YW5kaW5nOyBmb3IgdGhpcyBpcyB0aGUgbWVhbmluZyBvZiB0aGUgd29yZHMgInJ1bGUgdGhlIGhvdXNlCiAgICAgICAgICAgICAgICAgICAgaW4gJmx0O2hhcm1vbnkgb2YmZ3Q7IG1pbmQuIiBBbmQgaGUgZ29lcyBvbiB0byBzYXkgdGhhdCB3aGVyZXZlciBzdWNoIGEKICAgICAgICAgICAgICAgICAgICBsb3ZlIGlzIGZvdW5kIGJldHdlZW4gbWFuIGFuZCB3aWZlLCBpdCBpcyBhIGNhdXNlIG9mIHNvcmUgZGlzdHJlc3MgdG8gdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgaGF0ZSB0aGVtIGFuZCBvZiBkZWxpZ2h0IHRvIHRob3NlIHRoYXQgbG92ZSB0aGVtOyB3aGlsZSB0aGUgdHJ1dGggb2YgaGlzIHdvcmRzCiAgICAgICAgICAgICAgICAgICAgaXMgbW9zdCBvZiBhbGwgYWNrbm93bGVkZ2VkIGJ5IHRoZSBoYXBweSBwYWlyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgR3JlZWssIGFzIGNpdGVkIGFib3ZlLCBpcyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OvOG9sc67zrnPg8+EzrEgzrThvbMgz4TigJkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIOG8lM66zrvPhc6/zr0gzrHhvZDPhM6/4b23PC9mb3JlaWduPiwgImFuZCB0aGVtc2VsdmVzIGJlc3Qga25vdyB0aGVpciBvd24gY2FzZS4iCiAgICAgICAgICAgICAgICAgICAgPC9ub3RlPiBGb3Igd2hlbiB3aWZlIGFuZCBodXNiYW5kIGFyZSBhZ3JlZWQgYWJvdXQgdGhlIGJlc3QgdGhpbmdzIGluIGxpZmUsIG9mCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzaXR5IHRoZSBmcmllbmRzIG9mIGVhY2ggd2lsbCBhbHNvIGJlIG11dHVhbGx5IGFncmVlZDsgYW5kIHRoZSBzdHJlbmd0aAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZSBwYWlyIGdhaW4gZnJvbSB0aGVpciB1bml0eSB3aWxsIG1ha2UgdGhlbSBmb3JtaWRhYmxlIHRvIHRoZWlyIGVuZW1pZXMKICAgICAgICAgICAgICAgICAgICBhbmQgaGVscGZ1bCB0byB0aGVpciBvd24uIEJ1dCB3aGVuIGRpc2NvcmQgcmVpZ25zIGJldHdlZW4gdGhlbSwgdGhlaXIgZnJpZW5kcwogICAgICAgICAgICAgICAgICAgIHRvbyB3aWxsIGRpc2FncmVlIGFuZCBiZWNvbWUgaW4gY29uc2VxdWVuY2UgZW5mZWVibGVkLCB3aGlsZSB0aGUgcGFpciB0aGVtc2VsdmVzCiAgICAgICAgICAgICAgICAgICAgd2lsbCBzdWZmZXIgbW9zdCBvZiBhbGwuPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrzhvbHOu865z4PPhM6xIM604b2zIM+E4oCZCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDhvJTOus67z4XOv869IM6x4b2Qz4TOv+G9tzwvZm9yZWlnbj4sICJhbmQgdGhlbXNlbHZlcyBiZXN0IGtub3cgdGhlaXIgb3duIGNhc2UuIgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.4.180'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0icCIgbj0iMTgwIiB1bml0PSJjYXJkIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUm9zZSIgbj0iMTgwIiB1bml0PSJsaW5lIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiBhbGwgdGhlc2UKICAgICAgICAgICAgICAgICAgICBwcmVjZXB0cyBpdCBpcyBjbGVhciB0aGF0IHRoZSBwb2V0IGlzIHRlYWNoaW5nIGh1c2JhbmQgYW5kIHdpZmUgdG8gZGlzc3VhZGUgb25lCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciBmcm9tIHdoYXRldmVyIGlzIGV2aWwgYW5kIGRpc2hvbm9yYWJsZSwgd2hpbGUgdW5zZWxmaXNobHkgZnVydGhlcmluZyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBiZXN0IG9mIHRoZWlyIHBvd2VyIG9uZSBhbm90aGVyJ3MgaG9ub3JhYmxlIGFuZCByaWdodGVvdXMgYWltcy4gSW4gdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgcGxhY2UgdGhleSB3aWxsIHN0cml2ZSB0byBwZXJmb3JtIGFsbCBkdXR5IHRvd2FyZHMgdGhlaXIgcGFyZW50cywgdGhlIGh1c2JhbmQKICAgICAgICAgICAgICAgICAgICB0b3dhcmRzIHRob3NlIG9mIGhpcyB3aWZlIG5vIGxlc3MgdGhhbiB0b3dhcmRzIGhpcyBvd24sIGFuZCBzaGUgaW4gaGVyIHR1cm4KICAgICAgICAgICAgICAgICAgICB0b3dhcmRzIGhpcy4gVGhlaXIgbmV4dCBkdXRpZXMgYXJlIHRvd2FyZHMgdGhlaXIgY2hpbGRyZW4sIHRoZWlyIGZyaWVuZHMsIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZXN0YXRlLCBhbmQgdGhlaXIgZW50aXJlIGhvdXNlaG9sZCB3aGljaCB0aGV5IHdpbGwgdHJlYXQgYXMgYSBjb21tb24gcG9zc2Vzc2lvbjsKICAgICAgICAgICAgICAgICAgICBlYWNoIHZ5aW5nIHdpdGggdGhlIG90aGVyIGluIHRoZSBlZmZvcnQgdG8gY29udHJpYnV0ZSBtb3N0IHRvIHRoZSBjb21tb24KICAgICAgICAgICAgICAgICAgICB3ZWxmYXJlLCBhbmQgdG8gZXhjZWwgaW4gdmlydHVlIGFuZCByaWdodGVvdXNuZXNzOyBsYXlpbmcgYXNpZGUgYXJyb2dhbmNlLCBhbmQKICAgICAgICAgICAgICAgICAgICBydWxpbmcgd2l0aCBqdXN0aWNlIGluIGEga2luZGx5IGFuZCB1bmFzc3VtaW5nIHNwaXJpdC48L3RyYW5zbGF0aW9uPg=="
translation['3.4.190'] = ""
