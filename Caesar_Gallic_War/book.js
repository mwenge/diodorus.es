var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
translation['1.1'] = "PHRyYW5zbGF0aW9uPjxkaXYxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgb3JnPSJ1bmlmb3JtIiBzYW1wbGU9ImNvbXBsZXRlIiB0eXBlPSJCb29rIj4KICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGlzIGRpdmlkZWQgaW50byB0aHJlZSBwYXJ0cywgb25lIG9mIHdoaWNoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+QmVsZ2FlPC9uYW1lPiBpbmhhYml0LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkFxdWl0YW5pPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGFub3RoZXIsIHRob3NlIHdobyBpbiB0aGVpciBvd24gbGFuZ3VhZ2UgYXJlIGNhbGxlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Q2VsdHM8L25hbWU+LCBpbiBvdXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgdGhlIHRoaXJkLiBBbGwgdGhlc2UKICAgICAgICAgICAgICAgICAgICBkaWZmZXIgZnJvbSBlYWNoIG90aGVyIGluIGxhbmd1YWdlLCBjdXN0b21zIGFuZCBsYXdzLiBUaGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI0MTIzIiByZWc9Ikdhcm9ubmUgWy0wLjYsNDUuMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhcm9ubmU8L25hbWU+IHNlcGFyYXRlcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+QXF1aXRhbmk8L25hbWU+OyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA5MzI3IiByZWc9Ik1hcm5lIFs0LjE4Myw0OC45MTZdIChyaXZlciksIENoYW1wYWduZS1BcmRlbm5lLCBGcmFuY2UsIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwOTMyNyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA5MzI3Ij5NYXJuZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDk3MDciIHJlZz0iU2VpbmUgWzAuNDMzLDQ5LjQzM10gKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDk3MDciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwOTcwNyI+U2VpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+IHNlcGFyYXRlIHRoZW0gZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+LiBPZiBhbGwgdGhlc2UsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gYXJlIHRoZSBicmF2ZXN0LCBiZWNhdXNlIHRoZXkgYXJlIGZ1cnRoZXN0IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgY2l2aWxpemF0aW9uIGFuZCByZWZpbmVtZW50IG9mIFtvdXJdIFByb3ZpbmNlLCBhbmQgbWVyY2hhbnRzIGxlYXN0IGZyZXF1ZW50bHkKICAgICAgICAgICAgICAgICAgICByZXNvcnQgdG8gdGhlbSwgYW5kIGltcG9ydCB0aG9zZSB0aGluZ3Mgd2hpY2ggdGVuZCB0byBlZmZlbWluYXRlIHRoZSBtaW5kOyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSB0aGUgbmVhcmVzdCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCB3aG8gZHdlbGwgYmV5b25kCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHdpdGggd2hvbSB0aGV5IGFyZSBjb250aW51YWxseSB3YWdpbmcgd2FyOyBmb3Igd2hpY2ggcmVhc29uIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IGFsc28gc3VycGFzcyB0aGUgcmVzdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBpbiB2YWxvciwgYXMgdGhleSBjb250ZW5kIHdpdGggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBpbiBhbG1vc3QgZGFpbHkgYmF0dGxlcywgd2hlbiB0aGV5IGVpdGhlciByZXBlbAogICAgICAgICAgICAgICAgICAgIHRoZW0gZnJvbSB0aGVpciBvd24gdGVycml0b3JpZXMsIG9yIHRoZW1zZWx2ZXMgd2FnZSB3YXIgb24gdGhlaXIgZnJvbnRpZXJzLiBPbmUKICAgICAgICAgICAgICAgICAgICBwYXJ0IG9mIHRoZXNlLCB3aGljaCBpdCBoYXMgYmVlbiBzYWlkIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBvY2N1cHksIHRha2VzIGl0cyBiZWdpbm5pbmcgYXQgdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAyMzg5MCIgcmVnPSJSaG9uZSBbNC44MzMsNDMuMzMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMjM4OTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAyMzg5MCI+UmhvbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+OyBpdCBpcyBib3VuZGVkIGJ5IHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjQxMjMiIHJlZz0iR2Fyb25uZSBbLTAuNiw0NS4zM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2Fyb25uZTwvbmFtZT4sIHRoZSBvY2VhbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT47IGl0IGJvcmRlcnMsIHRvbywgb24gdGhlIHNpZGUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4gYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCB1cG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGFuZCBzdHJldGNoZXMgdG93YXJkIHRoZSBub3J0aC4gVGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiByaXNlcyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGV4dHJlbWUgZnJvbnRpZXIgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBleHRlbmQgdG8gdGhlIGxvd2VyIHBhcnQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPjsgYW5kIGxvb2sgdG93YXJkIHRoZSBub3J0aCBhbmQgdGhlIHJpc2luZyBzdW4uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg3OCIgcmVnPSJBcXVpdGFpbmUgWzEsNDQuNTgzXSAocmVnaW9uKSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI4NzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg3OCI+QXF1aXRhbmlhPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBleHRlbmRzIGZyb20gdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyNDEyMyIgcmVnPSJHYXJvbm5lIFstMC42LDQ1LjMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXJvbm5lPC9uYW1lPiB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwbGFjZSI+UHlyZW5hZWFuIG1vdW50YWluczwvbmFtZT4gYW5kIHRvIHRoYXQgcGFydCBvZiB0aGUgb2NlYW4gd2hpY2gKICAgICAgICAgICAgICAgICAgICBpcyBuZWFyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA5NSIgcmVnPSJTcGFpbiBbLTQsNDBdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5TcGFpbjwvbmFtZT46IGl0IGxvb2tzIGJldHdlZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2V0dGluZyBvZiB0aGUgc3VuLCBhbmQgdGhlIG5vcnRoIHN0YXIuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPkFtb25nIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgPG5hbWU+T3JnZXRvcml4PC9uYW1lPiB3YXMgYnkgZmFyCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vc3QgZGlzdGluZ3Vpc2hlZCBhbmQgd2VhbHRoeS4gSGUsIHdoZW4gPG5hbWU+TWFyY3VzIE1lc3NhbGE8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5NYXJjdXMgUGlzbzwvbmFtZT4gd2VyZSBjb25zdWxzIFs8ZGF0ZSBhdXRobmFtZT0iLTYxIiB2YWx1ZT0iLTYxIj42MTwvZGF0ZT4gQi5DLl0sCiAgICAgICAgICAgICAgICAgICAgaW5jaXRlZCBieSBsdXN0IG9mIHNvdmVyZWlnbnR5LCBmb3JtZWQgYSBjb25zcGlyYWN5IGFtb25nIHRoZSBub2JpbGl0eSwgYW5kCiAgICAgICAgICAgICAgICAgICAgcGVyc3VhZGVkIHRoZSBwZW9wbGUgdG8gZ28gZm9ydGggZnJvbSB0aGVpciB0ZXJyaXRvcmllcyB3aXRoIGFsbCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb25zLCBbc2F5aW5nXSB0aGF0IGl0IHdvdWxkIGJlIHZlcnkgZWFzeSwgc2luY2UgdGhleSBleGNlbGxlZCBhbGwgaW4KICAgICAgICAgICAgICAgICAgICB2YWxvciwgdG8gYWNxdWlyZSB0aGUgc3VwcmVtYWN5IG9mIHRoZSB3aG9sZSBvZiA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LiBUbyB0aGlzIGhlCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vcmUgZWFzaWx5IHBlcnN1YWRlZCB0aGVtLCBiZWNhdXNlIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBhcmUgY29uZmluZWQgb24gZXZlcnkgc2lkZSBieSB0aGUgbmF0dXJlIG9mIHRoZWlyIHNpdHVhdGlvbjsgb24gb25lIHNpZGUgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYSB2ZXJ5IGJyb2FkIGFuZCBkZWVwIHJpdmVyLCB3aGljaCBzZXBhcmF0ZXMgdGhlIDxuYW1lPkhlbHZldGlhbjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0ZXJyaXRvcnkgZnJvbSB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPjsgb24gYSBzZWNvbmQgc2lkZSBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUga2V5PSJ0Z24sNzAwMzc0OSIgcmVnPSIgICtKdXJhIFs3LjI1LDQ3LjMzM10gKGNhbnRvbiksIFN3aXR6ZXJsYW5kLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzNzQ5IiBrZXk9InRnbiw3MDAzNzQ5Ij5KdXJhPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYSB2ZXJ5IGhpZ2ggbW91bnRhaW4sIHdoaWNoIGlzIFtzaXR1YXRlZF0gYmV0d2VlbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+U2VxdWFuaTwvbmFtZT4gYW5kIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPjsgb24gYSB0aGlyZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSA8bmFtZSBrZXk9InRnbiwxMTE2Mzg5IiByZWc9Ikxha2Ugb2YgR2VuZXZhIChsYWtlKSwgU3dpdHplcmxhbmQsIEV1cm9wZSIgdHlwZT0icGxhY2UiPkxha2Ugb2YgR2VuZXZhPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIHJpdmVyIDxuYW1lIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhvbmU8L25hbWU+LCB3aGljaCBzZXBhcmF0ZXMgb3VyCiAgICAgICAgICAgICAgICAgICAgUHJvdmluY2UgZnJvbSB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4uIEZyb20gdGhlc2UgY2lyY3Vtc3RhbmNlcwogICAgICAgICAgICAgICAgICAgIGl0IHJlc3VsdGVkLCB0aGF0IHRoZXkgY291bGQgcmFuZ2UgbGVzcyB3aWRlbHksIGFuZCBjb3VsZCBsZXNzIGVhc2lseSBtYWtlIHdhcgogICAgICAgICAgICAgICAgICAgIHVwb24gdGhlaXIgbmVpZ2hib3JzOyBmb3Igd2hpY2ggcmVhc29uIG1lbiBmb25kIG9mIHdhciBbYXMgdGhleSB3ZXJlXSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYWZmZWN0ZWQgd2l0aCBncmVhdCByZWdyZXQuIFRoZXkgdGhvdWdodCwgdGhhdCBjb25zaWRlcmluZyB0aGUgZXh0ZW50IG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGlvbiwgYW5kIHRoZWlyIHJlbm93biBmb3Igd2FyZmFyZSBhbmQgYnJhdmVyeSwgdGhleSBoYWQgYnV0IG5hcnJvdwogICAgICAgICAgICAgICAgICAgIGxpbWl0cywgYWx0aG91Z2ggdGhleSBleHRlbmRlZCBpbiBsZW5ndGggMjQwLCBhbmQgaW4gYnJlYWR0aCAxODAgWzxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+XSBtaWxlcy4gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPkluZHVjZWQgYnkgdGhlc2UgY29uc2lkZXJhdGlvbnMsIGFuZCBpbmZsdWVuY2VkIGJ5IHRoZSBhdXRob3JpdHkgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+T3JnZXRvcml4PC9uYW1lPiwgdGhleSBkZXRlcm1pbmVkIHRvIHByb3ZpZGUgc3VjaCB0aGluZ3MgYXMgd2VyZQogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSBmb3IgdGhlaXIgZXhwZWRpdGlvbi10byBidXkgdXAgYXMgZ3JlYXQgYSBudW1iZXIgYXMgcG9zc2libGUgb2YgYmVhc3RzCiAgICAgICAgICAgICAgICAgICAgb2YgYnVyZGVuIGFuZCB3YWdvbnMtdG8gbWFrZSB0aGVpciBzb3dpbmdzIGFzIGxhcmdlIGFzIHBvc3NpYmxlLCBzbyB0aGF0IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbWFyY2ggcGxlbnR5IG9mIGNvcm4gbWlnaHQgYmUgaW4gc3RvcmUtYW5kIHRvIGVzdGFibGlzaCBwZWFjZSBhbmQKICAgICAgICAgICAgICAgICAgICBmcmllbmRzaGlwIHdpdGggdGhlIG5laWdoYm9yaW5nIHN0YXRlcy4gVGhleSByZWNrb25lZCB0aGF0IGEgdGVybSBvZiB0d28geWVhcnMKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBzdWZmaWNpZW50IGZvciB0aGVtIHRvIGV4ZWN1dGUgdGhlaXIgZGVzaWduczsgdGhleSBmaXggYnkgZGVjcmVlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlIGZvciB0aGUgdGhpcmQgeWVhci4gPG5hbWU+T3JnZXRvcml4PC9uYW1lPiBpcyBjaG9zZW4gdG8gY29tcGxldGUgdGhlc2UKICAgICAgICAgICAgICAgICAgICBhcnJhbmdlbWVudHMuIEhlIHRvb2sgdXBvbiBoaW1zZWxmIHRoZSBvZmZpY2Ugb2YgZW1iYXNzYWRvciB0byB0aGUgc3RhdGVzOiBvbgogICAgICAgICAgICAgICAgICAgIHRoaXMgam91cm5leSBoZSBwZXJzdWFkZXMgPG5hbWU+Q2FzdGljdXM8L25hbWU+LCB0aGUgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkNhdGFtYW50YWxlZGVzPC9uYW1lPiAob25lIG9mIHRoZSA8bmFtZT5TZXF1YW5pPC9uYW1lPiwgd2hvc2UgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgaGFkIHBvc3Nlc3NlZCB0aGUgc292ZXJlaWdudHkgYW1vbmcgdGhlIHBlb3BsZSBmb3IgbWFueSB5ZWFycywgYW5kIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgc3R5bGVkICJmcmllbmQiIGJ5IHRoZSBzZW5hdGUgb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSksCiAgICAgICAgICAgICAgICAgICAgdG8gc2VpemUgdXBvbiB0aGUgc292ZXJlaWdudHkgaW4gaGlzIG93biBzdGF0ZSwgd2hpY2ggaGlzIGZhdGhlciBoYWQgaGVsZCBiZWZvcmUKICAgICAgICAgICAgICAgICAgICBoaW0sIGFuZCBoZSBsaWtld2lzZSBwZXJzdWFkZXMgPG5hbWU+RHVtbm9yaXg8L25hbWU+LCBhbiA8bmFtZT5BZWR1YW48L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHRoZSBicm90aGVyIG9mIDxuYW1lPkRpdml0aWFjdXM8L25hbWU+LCB3aG8gYXQgdGhhdCB0aW1lIHBvc3Nlc3NlZCB0aGUgY2hpZWYKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgaW4gdGhlIHN0YXRlLCBhbmQgd2FzIGV4Y2VlZGluZ2x5IGJlbG92ZWQgYnkgdGhlIHBlb3BsZSwgdG8gYXR0ZW1wdAogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lLCBhbmQgZ2l2ZXMgaGltIGhpcyBkYXVnaHRlciBpbiBtYXJyaWFnZS4gSGUgcHJvdmVzIHRvIHRoZW0gdGhhdCB0bwogICAgICAgICAgICAgICAgICAgIGFjY29tcGxpc2ggdGhlaXIgYXR0ZW1wdHMgd2FzIGEgdGhpbmcgdmVyeSBlYXN5IHRvIGJlIGRvbmUsIGJlY2F1c2UgaGUgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIHdvdWxkIG9idGFpbiB0aGUgZ292ZXJubWVudCBvZiBoaXMgb3duIHN0YXRlOyB0aGF0IHRoZXJlIHdhcyBubyBkb3VidCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiB3ZXJlIHRoZSBtb3N0IHBvd2VyZnVsIG9mIHRoZSB3aG9sZSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+OyBoZSBhc3N1cmVzIHRoZW0gdGhhdCBoZSB3aWxsLCB3aXRoIGhpcyBvd24gZm9yY2VzIGFuZCBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgYXJteSwgYWNxdWlyZSB0aGUgc292ZXJlaWdudHkgZm9yIHRoZW0uIEluY2l0ZWQgYnkgdGhpcyBzcGVlY2gsIHRoZXkgZ2l2ZSBhCiAgICAgICAgICAgICAgICAgICAgcGxlZGdlIGFuZCBvYXRoIHRvIG9uZSBhbm90aGVyLCBhbmQgaG9wZSB0aGF0LCB3aGVuIHRoZXkgaGF2ZSBzZWl6ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgc292ZXJlaWdudHksIHRoZXkgd2lsbCwgYnkgbWVhbnMgb2YgdGhlIHRocmVlIG1vc3QgcG93ZXJmdWwgYW5kIHZhbGlhbnQgbmF0aW9ucywKICAgICAgICAgICAgICAgICAgICBiZSBlbmFibGVkIHRvIG9idGFpbiBwb3NzZXNzaW9uIG9mIHRoZSB3aG9sZSBvZiA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LiA8bWlsZXN0b25lIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+V2hlbiB0aGlzIHNjaGVtZSB3YXMgZGlzY2xvc2VkIHRvIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiBieQogICAgICAgICAgICAgICAgICAgIGluZm9ybWVycywgdGhleSwgYWNjb3JkaW5nIHRvIHRoZWlyIGN1c3RvbSwgY29tcGVsbGVkIDxuYW1lPk9yZ2V0b3JpeDwvbmFtZT4gdG8KICAgICAgICAgICAgICAgICAgICBwbGVhZCBoaXMgY2F1c2UgaW4gY2hhaW5zOyBpdCB3YXMgdGhlIGxhdyB0aGF0IHRoZSBwZW5hbHR5IG9mIGJlaW5nIGJ1cm5lZCBieQogICAgICAgICAgICAgICAgICAgIGZpcmUgc2hvdWxkIGF3YWl0IGhpbSBpZiBjb25kZW1uZWQuIE9uIHRoZSBkYXkgYXBwb2ludGVkIGZvciB0aGUgcGxlYWRpbmcgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgY2F1c2UsIDxuYW1lPk9yZ2V0b3JpeDwvbmFtZT4gZHJldyB0b2dldGhlciBmcm9tIGFsbCBxdWFydGVycyB0byB0aGUgY291cnQsIGFsbAogICAgICAgICAgICAgICAgICAgIGhpcyB2YXNzYWxzIHRvIHRoZSBudW1iZXIgb2YgdGVuIHRob3VzYW5kIHBlcnNvbnM7IGFuZCBsZWQgdG9nZXRoZXIgdG8gdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBwbGFjZSBhbGwgaGlzIGRlcGVuZGVudHMgYW5kIGRlYnRvci1ib25kc21lbiwgb2Ygd2hvbSBoZSBoYWQgYSBncmVhdCBudW1iZXI7IGJ5CiAgICAgICAgICAgICAgICAgICAgbWVhbnMgb2YgdGhvc2UgaGUgcmVzY3VlZCBoaW1zZWxmIGZyb20gW3RoZSBuZWNlc3NpdHkgb2ZdIHBsZWFkaW5nIGhpcyBjYXVzZS4KICAgICAgICAgICAgICAgICAgICBXaGlsZSB0aGUgc3RhdGUsIGluY2Vuc2VkIGF0IHRoaXMgYWN0LCB3YXMgZW5kZWF2b3JpbmcgdG8gYXNzZXJ0IGl0cyByaWdodCBieQogICAgICAgICAgICAgICAgICAgIGFybXMsIGFuZCB0aGUgbWFnaXN0cmF0ZXMgd2VyZSBtdXN0ZXJpbmcgYSBsYXJnZSBib2R5IG9mIG1lbiBmcm9tIHRoZSBjb3VudHJ5LAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5PcmdldG9yaXg8L25hbWU+IGRpZWQ7IGFuZCB0aGVyZSBpcyBub3Qgd2FudGluZyBhIHN1c3BpY2lvbiwgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IHRoaW5rLCBvZiBoaXMgaGF2aW5nIGNvbW1pdHRlZCBzdWljaWRlLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+QWZ0ZXIgaGlzIGRlYXRoLCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gbmV2ZXJ0aGVsZXNzIGF0dGVtcHQgdG8KICAgICAgICAgICAgICAgICAgICBkbyB0aGF0IHdoaWNoIHRoZXkgaGFkIHJlc29sdmVkIG9uLCBuYW1lbHksIHRvIGdvIGZvcnRoIGZyb20gdGhlaXIgdGVycml0b3JpZXMuCiAgICAgICAgICAgICAgICAgICAgV2hlbiB0aGV5IHRob3VnaHQgdGhhdCB0aGV5IHdlcmUgYXQgbGVuZ3RoIHByZXBhcmVkIGZvciB0aGlzIHVuZGVydGFraW5nLCB0aGV5CiAgICAgICAgICAgICAgICAgICAgc2V0IGZpcmUgdG8gYWxsIHRoZWlyIHRvd25zLCBpbiBudW1iZXIgYWJvdXQgdHdlbHZlLXRvIHRoZWlyIHZpbGxhZ2VzIGFib3V0IGZvdXIKICAgICAgICAgICAgICAgICAgICBodW5kcmVkLWFuZCB0byB0aGUgcHJpdmF0ZSBkd2VsbGluZ3MgdGhhdCByZW1haW5lZDsgdGhleSBidXJuIHVwIGFsbCB0aGUgY29ybiwKICAgICAgICAgICAgICAgICAgICBleGNlcHQgd2hhdCB0aGV5IGludGVuZCB0byBjYXJyeSB3aXRoIHRoZW07IHRoYXQgYWZ0ZXIgZGVzdHJveWluZyB0aGUgaG9wZSBvZiBhCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvbWUsIHRoZXkgbWlnaHQgYmUgdGhlIG1vcmUgcmVhZHkgZm9yIHVuZGVyZ29pbmcgYWxsIGRhbmdlcnMuIFRoZXkgb3JkZXIKICAgICAgICAgICAgICAgICAgICBldmVyeSBvbmUgdG8gY2FycnkgZm9ydGggZnJvbSBob21lIGZvciBoaW1zZWxmIHByb3Zpc2lvbnMgZm9yIHRocmVlIG1vbnRocywKICAgICAgICAgICAgICAgICAgICByZWFkeSBncm91bmQuIFRoZXkgcGVyc3VhZGUgdGhlIDxuYW1lPlJhdXJhY2k8L25hbWU+LCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlR1bGluZ2k8L25hbWU+LCBhbmQgdGhlIDxuYW1lPkxhdG9icmlnaTwvbmFtZT4sIHRoZWlyIG5laWdoYm9ycywgdG8KICAgICAgICAgICAgICAgICAgICBhZG9wdCB0aGUgc2FtZSBwbGFuLCBhbmQgYWZ0ZXIgYnVybmluZyBkb3duIHRoZWlyIHRvd25zIGFuZCB2aWxsYWdlcywgdG8gc2V0IG91dAogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlbTogYW5kIHRoZXkgYWRtaXQgdG8gdGhlaXIgcGFydHkgYW5kIHVuaXRlIHRvIHRoZW1zZWx2ZXMgYXMgY29uZmVkZXJhdGVzCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lPkJvaWk8L25hbWU+LCB3aG8gaGFkIGR3ZWx0IG9uIHRoZSBvdGhlciBzaWRlIG9mIHRoZSA8bmFtZSBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGFuZCBoYWQgY3Jvc3NlZCBvdmVyIGludG8gdGhlIDxuYW1lPk5vcmljYW48L25hbWU+IHRlcnJpdG9yeSwgYW5kCiAgICAgICAgICAgICAgICAgICAgYXNzYXVsdGVkIDxuYW1lPk5vcmVpYTwvbmFtZT4uIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8cD5UaGVyZSB3ZXJlIGluIGFsbCB0d28gcm91dGVzLCBieSB3aGljaCB0aGV5IGNvdWxkIGdvIGZvcnRoIGZyb20gdGhlaXIgY291bnRyeSBvbmUKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIHRoZSA8bmFtZT5TZXF1YW5pPC9uYW1lPiBuYXJyb3cgYW5kIGRpZmZpY3VsdCwgYmV0d2VlbiA8bmFtZSBrZXk9InRnbiwxMTA5MTcyIiByZWc9Ikp1cmEgWzYuNSw0Ni43NV0gKG1vdW50YWluKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+TW91bnQgSnVyYTwvbmFtZT4gYW5kIHRoZSByaXZlciA8bmFtZSBrZXk9InRnbiw3MDIzODkwIiByZWc9IlJob25lIFs0LjgzMyw0My4zMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJob25lPC9uYW1lPiAoYnkgd2hpY2ggc2NhcmNlbHkKICAgICAgICAgICAgICAgICAgICBvbmUgd2Fnb24gYXQgYSB0aW1lIGNvdWxkIGJlIGxlZDsgdGhlcmUgd2FzLCBtb3Jlb3ZlciwgYSB2ZXJ5IGhpZ2ggbW91bnRhaW4KICAgICAgICAgICAgICAgICAgICBvdmVyaGFuZ2luZywgc28gdGhhdCBhIHZlcnkgZmV3IG1pZ2h0IGVhc2lseSBpbnRlcmNlcHQgdGhlbTsgdGhlIG90aGVyLCB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgb3VyIFByb3ZpbmNlLCBtdWNoIGVhc2llciBhbmQgZnJlZXIgZnJvbSBvYnN0YWNsZXMsIGJlY2F1c2UgdGhlIDxuYW1lIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhvbmU8L25hbWU+IGZsb3dzIGJldHdlZW4gdGhlIGJvdW5kYXJpZXMgb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IGFuZCB0aG9zZSBvZiB0aGUgPG5hbWU+QWxsb2Jyb2dlczwvbmFtZT4sIHdobyBoYWQgbGF0ZWx5CiAgICAgICAgICAgICAgICAgICAgYmVlbiBzdWJkdWVkLCBhbmQgaXMgaW4gc29tZSBwbGFjZXMgY3Jvc3NlZCBieSBhIGZvcmQuIFRoZSBmdXJ0aGVzdCB0b3duIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5BbGxvYnJvZ2VzPC9uYW1lPiwgYW5kIHRoZSBuZWFyZXN0IHRvIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGlzIDxuYW1lIGtleT0idGduLDcwMDcyNzkiIHJlZz0iR2VuZXZlIFs2LjE1LDQ2LjIxNl0gKGluaGFiaXRlZCBwbGFjZSksIEdlbmV2ZSwgU3dpdHplcmxhbmQsIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdlbmV2YTwvbmFtZT4uIEZyb20gdGhpcyB0b3duIGEgYnJpZGdlIGV4dGVuZHMgdG8gdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LiBUaGV5IHRob3VnaHQgdGhhdCB0aGV5IHNob3VsZCBlaXRoZXIgcGVyc3VhZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFsbG9icm9nZXM8L25hbWU+LCBiZWNhdXNlIHRoZXkgZGlkIG5vdCBzZWVtIGFzIHlldCB3ZWxsLWFmZmVjdGVkCiAgICAgICAgICAgICAgICAgICAgdG93YXJkIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIG9yIGNvbXBlbCB0aGVtIGJ5IGZvcmNlIHRvCiAgICAgICAgICAgICAgICAgICAgYWxsb3cgdGhlbSB0byBwYXNzIHRocm91Z2ggdGhlaXIgdGVycml0b3JpZXMuIEhhdmluZyBwcm92aWRlZCBldmVyeSB0aGluZyBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgZXhwZWRpdGlvbiwgdGhleSBhcHBvaW50IGEgZGF5LCBvbiB3aGljaCB0aGV5IHNob3VsZCBhbGwgbWVldCBvbiB0aGUgYmFuayBvZgogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBrZXk9InRnbiw3MDIzODkwIiByZWc9IlJob25lIFs0LjgzMyw0My4zMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJob25lPC9uYW1lPi4gVGhpcyBkYXkgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGZpZnRoIGJlZm9yZSB0aGUga2FsZW5kcyBvZiA8ZGF0ZT5BcHJpbDwvZGF0ZT4gW2kuZS4gdGhlIDI4dGggb2YKICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGU+TWFyY2g8L2RhdGU+XSwgaW4gdGhlIGNvbnN1bHNoaXAgb2YgPG5hbWU+THVjaXVzIFBpc288L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5BdWx1cyBHYWJpbml1czwvbmFtZT4gW0IuQy4gPGRhdGUgYXV0aG5hbWU9Ii01OCIgdmFsdWU9Ii01OCI+NTg8L2RhdGU+Ll0gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPldoZW4gaXQgd2FzIHJlcG9ydGVkIHRvIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdGhhdCB0aGV5IHdlcmUgYXR0ZW1wdGluZwogICAgICAgICAgICAgICAgICAgIHRvIG1ha2UgdGhlaXIgcm91dGUgdGhyb3VnaCBvdXIgUHJvdmluY2UgaGUgaGFzdGVucyB0byBzZXQgb3V0IGZyb20gdGhlIGNpdHksCiAgICAgICAgICAgICAgICAgICAgYW5kLCBieSBhcyBncmVhdCBtYXJjaGVzIGFzIGhlIGNhbiwgcHJvY2VlZHMgdG8gRnVydGhlciA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgYXJyaXZlcwogICAgICAgICAgICAgICAgICAgIGF0IDxuYW1lIGtleT0idGduLDcwMDcyNzkiIHJlZz0iR2VuZXZlIFs2LjE1LDQ2LjIxNl0gKGluaGFiaXRlZCBwbGFjZSksIEdlbmV2ZSwgU3dpdHplcmxhbmQsIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdlbmV2YTwvbmFtZT4uIEhlIG9yZGVycyB0aGUgd2hvbGUgUHJvdmluY2UgW3RvIGZ1cm5pc2hdIGFzIGdyZWF0IGEgbnVtYmVyCiAgICAgICAgICAgICAgICAgICAgb2Ygc29sZGllcnMgYXMgcG9zc2libGUsIGFzIHRoZXJlIHdhcyBpbiBhbGwgb25seSBvbmUgbGVnaW9uIGluIEZ1cnRoZXIgPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPjogaGUgb3JkZXJzIHRoZSBicmlkZ2UgYXQgPG5hbWUga2V5PSJ0Z24sNzAwNzI3OSIgcmVnPSJHZW5ldmUgWzYuMTUsNDYuMjE2XSAoaW5oYWJpdGVkIHBsYWNlKSwgR2VuZXZlLCBTd2l0emVybGFuZCwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA3Mjc5IiBrZXk9InRnbiw3MDA3Mjc5Ij5HZW5ldmE8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+IHRvIGJlIGJyb2tlbiBkb3duLiBXaGVuIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiBhcmUKICAgICAgICAgICAgICAgICAgICBhcHByaXplZCBvZiBoaXMgYXJyaXZhbCB0aGV5IHNlbmQgdG8gaGltLCBhcyBlbWJhc3NhZG9ycywgdGhlIG1vc3QgaWxsdXN0cmlvdXMKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgdGhlaXIgc3RhdGUgKGluIHdoaWNoIGVtYmFzc3kgPG5hbWU+TnVtZWl1czwvbmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlZlcnVkb2N0aXVzPC9uYW1lPiBoZWxkIHRoZSBjaGllZiBwbGFjZSksIHRvIHNheSAidGhhdCBpdCB3YXMgdGhlaXIKICAgICAgICAgICAgICAgICAgICBpbnRlbnRpb24gdG8gbWFyY2ggdGhyb3VnaCB0aGUgUHJvdmluY2Ugd2l0aG91dCBkb2luZyBhbnkgaGFybSwgYmVjYXVzZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIiBbYWNjb3JkaW5nIHRvIHRoZWlyIG93biByZXByZXNlbnRhdGlvbnMsXSAibm8gb3RoZXIgcm91dGU6IHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZCwgdGhleSBtaWdodCBiZSBhbGxvd2VkIHRvIGRvIHNvIHdpdGggaGlzIGNvbnNlbnQuIiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBpbmFzbXVjaCBhcyBoZSBrZXB0IGluIHJlbWVtYnJhbmNlIHRoYXQgPG5hbWU+THVjaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIENhc3NpdXM8L25hbWU+LCB0aGUgY29uc3VsLCBoYWQgYmVlbiBzbGFpbiwgYW5kIGhpcyBhcm15IHJvdXRlZCBhbmQgbWFkZSB0bwogICAgICAgICAgICAgICAgICAgIHBhc3MgdW5kZXIgdGhlIHlva2UgYnkgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBkaWQgbm90IHRoaW5rCiAgICAgICAgICAgICAgICAgICAgdGhhdCBbdGhlaXIgcmVxdWVzdF0gb3VnaHQgdG8gYmUgZ3JhbnRlZDogbm9yIHdhcyBoZSBvZiBvcGluaW9uIHRoYXQgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgaG9zdGlsZSBkaXNwb3NpdGlvbiwgaWYgYW4gb3Bwb3J0dW5pdHkgb2YgbWFyY2hpbmcgdGhyb3VnaCB0aGUgUHJvdmluY2Ugd2VyZQogICAgICAgICAgICAgICAgICAgIGdpdmVuIHRoZW0sIHdvdWxkIGFic3RhaW4gZnJvbSBvdXRyYWdlIGFuZCBtaXNjaGllZi4gWWV0LCBpbiBvcmRlciB0aGF0IGEgcGVyaW9kCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgaW50ZXJ2ZW5lLCB1bnRpbCB0aGUgc29sZGllcnMgd2hvbSBoZSBoYWQgb3JkZXJlZCBbdG8gYmUgZnVybmlzaGVkXSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBhc3NlbWJsZSwgaGUgcmVwbGllZCB0byB0aGUgYW1iYXNzYWRvcnMsIHRoYXQgaGUgd291bGQgdGFrZSB0aW1lIHRvIGRlbGliZXJhdGU7CiAgICAgICAgICAgICAgICAgICAgaWYgdGhleSB3YW50ZWQgYW55IHRoaW5nLCB0aGV5IG1pZ2h0IHJldHVybiBvbiB0aGUgZGF5IGJlZm9yZSB0aGUgaWRlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICA8ZGF0ZT5BcHJpbDwvZGF0ZT4gW29uIDxkYXRlPkFwcmlsPC9kYXRlPiAxMnRoXS4gPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPk1lYW53aGlsZSwgd2l0aCB0aGUgbGVnaW9uIHdoaWNoIGhlIGhhZCB3aXRoIGhpbSBhbmQgdGhlIHNvbGRpZXJzIHdoaWNoIGhhZAogICAgICAgICAgICAgICAgICAgIGFzc2VtYmxlZCBmcm9tIHRoZSBQcm92aW5jZSwgaGUgY2FycmllcyBhbG9uZyBmb3IgbmluZXRlZW4gWzxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+LCBub3QgcXVpdGUgZWlnaHRlZW4gPG5hbWU+RW5nbGlzaDwvbmFtZT5dIG1pbGVzIGEgd2FsbCwgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0IG9mIHNpeHRlZW4gZmVldCwgYW5kIGEgdHJlbmNoLCBmcm9tIHRoZSA8bmFtZSBrZXk9InRnbiwxMTE2Mzg5IiByZWc9Ikxha2Ugb2YgR2VuZXZhIChsYWtlKSwgU3dpdHplcmxhbmQsIEV1cm9wZSIgdHlwZT0icGxhY2UiPkxha2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgR2VuZXZhPC9uYW1lPiwgd2hpY2ggZmxvd3MgaW50byB0aGUgcml2ZXIgPG5hbWUga2V5PSJ0Z24sNzAyMzg5MCIgcmVnPSJSaG9uZSBbNC44MzMsNDMuMzMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaG9uZTwvbmFtZT4sIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGtleT0idGduLDExMDkxNzIiIHJlZz0iSnVyYSBbNi41LDQ2Ljc1XSAobW91bnRhaW4pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Nb3VudCBKdXJhPC9uYW1lPiwgd2hpY2ggc2VwYXJhdGVzCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZT5TZXF1YW5pPC9uYW1lPiBmcm9tIHRob3NlIG9mIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPi4gV2hlbiB0aGF0IHdvcmsgd2FzIGZpbmlzaGVkLCBoZSBkaXN0cmlidXRlcwogICAgICAgICAgICAgICAgICAgIGdhcnJpc29ucywgYW5kIGNsb3NlbHkgZm9ydGlmaWVzIHJlZG91YnRzLCBpbiBvcmRlciB0aGF0IGhlIG1heSB0aGUgbW9yZSBlYXNpbHkKICAgICAgICAgICAgICAgICAgICBpbnRlcmNlcHQgdGhlbSwgaWYgdGhleSBzaG91bGQgYXR0ZW1wdCB0byBjcm9zcyBvdmVyIGFnYWluc3QgaGlzIHdpbGwuIFdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZGF5IHdoaWNoIGhlIGhhZCBhcHBvaW50ZWQgd2l0aCB0aGUgZW1iYXNzYWRvcnMgY2FtZSwgYW5kIHRoZXkgcmV0dXJuZWQgdG8gaGltOwogICAgICAgICAgICAgICAgICAgIGhlIHNheXMsIHRoYXQgaGUgY2FuIG5vdCwgY29uc2lzdGVudGx5IHdpdGggdGhlIGN1c3RvbSBhbmQgcHJlY2VkZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGdyYW50IGFueSBvbmUgYSBwYXNzYWdlIHRocm91Z2ggdGhlCiAgICAgICAgICAgICAgICAgICAgUHJvdmluY2U7IGFuZCBoZSBnaXZlcyB0aGVtIHRvIHVuZGVyc3RhbmQsIHRoYXQsIGlmIHRoZXkgc2hvdWxkIGF0dGVtcHQgdG8gdXNlCiAgICAgICAgICAgICAgICAgICAgdmlvbGVuY2UgaGUgd291bGQgb3Bwb3NlIHRoZW0uIFRoZSA8bmFtZT5IZWx2ZXRpaTwvbmFtZT4sIGRpc2FwcG9pbnRlZCBpbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgaG9wZSwgdHJpZWQgaWYgdGhleSBjb3VsZCBmb3JjZSBhIHBhc3NhZ2UgKHNvbWUgYnkgbWVhbnMgb2YgYSBicmlkZ2Ugb2YgYm9hdHMKICAgICAgICAgICAgICAgICAgICBhbmQgbnVtZXJvdXMgcmFmdHMgY29uc3RydWN0ZWQgZm9yIHRoZSBwdXJwb3NlOyBvdGhlcnMsIGJ5IHRoZSBmb3JkcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUga2V5PSJ0Z24sNzAyMzg5MCIgcmVnPSJSaG9uZSBbNC44MzMsNDMuMzMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaG9uZTwvbmFtZT4sIHdoZXJlIHRoZSBkZXB0aCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByaXZlciB3YXMgbGVhc3QsIHNvbWV0aW1lcyBieSBkYXksIGJ1dCBtb3JlIGZyZXF1ZW50bHkgYnkgbmlnaHQpLCBidXQgYmVpbmcKICAgICAgICAgICAgICAgICAgICBrZXB0IGF0IGJheSBieSB0aGUgc3RyZW5ndGggb2Ygb3VyIHdvcmtzLCBhbmQgYnkgdGhlIGNvbmNvdXJzZSBvZiB0aGUgc29sZGllcnMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGJ5IHRoZSBtaXNzaWxlcywgdGhleSBkZXNpc3RlZCBmcm9tIHRoaXMgYXR0ZW1wdC4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPlRoZXJlIHdhcyBsZWZ0IG9uZSB3YXksIFtuYW1lbHldIHRocm91Z2ggdGhlIDxuYW1lPlNlcXVhbmk8L25hbWU+LCBieSB3aGljaCwgb24KICAgICAgICAgICAgICAgICAgICBhY2NvdW50IG9mIGl0cyBuYXJyb3duZXNzLCB0aGV5IGNvdWxkIG5vdCBwYXNzIHdpdGhvdXQgdGhlIGNvbnNlbnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlNlcXVhbmk8L25hbWU+LiBBcyB0aGV5IGNvdWxkIG5vdCBvZiB0aGVtc2VsdmVzIHByZXZhaWwgb24gdGhlbSwgdGhleQogICAgICAgICAgICAgICAgICAgIHNlbmQgZW1iYXNzYWRvcnMgdG8gPG5hbWU+RHVtbm9yaXg8L25hbWU+IHRoZSA8bmFtZT5BZWR1YW48L25hbWU+LCB0aGF0IHRocm91Z2gKICAgICAgICAgICAgICAgICAgICBoaXMgaW50ZXJjZXNzaW9uLCB0aGV5IG1pZ2h0IG9idGFpbiB0aGVpciByZXF1ZXN0IGZyb20gdGhlIDxuYW1lPlNlcXVhbmk8L25hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5EdW1ub3JpeDwvbmFtZT4sIGJ5IGhpcyBwb3B1bGFyaXR5IGFuZCBsaWJlcmFsaXR5LCBoYWQgZ3JlYXQgaW5mbHVlbmNlCiAgICAgICAgICAgICAgICAgICAgYW1vbmcgdGhlIDxuYW1lPlNlcXVhbmk8L25hbWU+LCBhbmQgd2FzIGZyaWVuZGx5IHRvIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgYmVjYXVzZSBvdXQgb2YgdGhhdCBzdGF0ZSBoZSBoYWQgbWFycmllZCB0aGUgZGF1Z2h0ZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+T3JnZXRvcml4PC9uYW1lPjsgYW5kLCBpbmNpdGVkIGJ5IGx1c3Qgb2Ygc292ZXJlaWdudHksIHdhcyBhbnhpb3VzIGZvcgogICAgICAgICAgICAgICAgICAgIGEgcmV2b2x1dGlvbiwgYW5kIHdpc2hlZCB0byBoYXZlIGFzIG1hbnkgc3RhdGVzIGFzIHBvc3NpYmxlIGF0dGFjaGVkIHRvIGhpbSBieQogICAgICAgICAgICAgICAgICAgIGhpcyBraW5kbmVzcyB0b3dhcmQgdGhlbS4gSGUsIHRoZXJlZm9yZSwgdW5kZXJ0YWtlcyB0aGUgYWZmYWlyLCBhbmQgcHJldmFpbHMKICAgICAgICAgICAgICAgICAgICB1cG9uIHRoZSA8bmFtZT5TZXF1YW5pPC9uYW1lPiB0byBhbGxvdyB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0byBtYXJjaCB0aHJvdWdoIHRoZWlyIHRlcnJpdG9yaWVzLCBhbmQgYXJyYW5nZXMgdGhhdCB0aGV5IHNob3VsZCBnaXZlIGhvc3RhZ2VzCiAgICAgICAgICAgICAgICAgICAgdG8gZWFjaCBvdGhlci10aGUgPG5hbWU+U2VxdWFuaTwvbmFtZT4gbm90IHRvIG9ic3RydWN0IHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiBpbiB0aGVpciBtYXJjaC10aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIHRvCiAgICAgICAgICAgICAgICAgICAgcGFzcyB3aXRob3V0IG1pc2NoaWVmIGFuZCBvdXRyYWdlLiA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPkl0IGlzIGFnYWluIHRvbGQgPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgdGhhdCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gaW50ZW5kZWQgdG8gbWFyY2ggdGhyb3VnaCB0aGUgY291bnRyeSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+U2VxdWFuaTwvbmFtZT4gYW5kIHRoZSA8bmFtZT5BZWR1aTwvbmFtZT4gaW50byB0aGUgdGVycml0b3JpZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlNhbnRvbmVzPC9uYW1lPiwgd2hpY2ggYXJlIG5vdCBmYXIgZGlzdGFudCBmcm9tIHRob3NlIGJvdW5kYXJpZXMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWU+VG9sb3NhdGVzPC9uYW1lPiwgd2hpY2ggW3Zpei4gPG5hbWUga2V5PSJ0Z24sNzAwODQ0MSIgcmVnPSIgICtUb3Vsb3VzZSBbMS40MzMsNDMuNjE2XSAoaW5oYWJpdGVkIHBsYWNlKSwgSGF1dGUtR2Fyb25uZSwgTWlkaS1QeXJlbmVlcywgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NDQxIiBrZXk9InRnbiw3MDA4NDQxIj5Ub2xvc2E8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCA8bmFtZT48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODQ0MSIga2V5PSJ0Z24sNzAwODQ0MSI+VG91bG91c2U8L3BsYWNlTmFtZT5dPC9uYW1lPiBpcyBhCiAgICAgICAgICAgICAgICAgICAgc3RhdGUgaW4gdGhlIFByb3ZpbmNlLiBJZiB0aGlzIHRvb2sgcGxhY2UsIGhlIHNhdyB0aGF0IGl0IHdvdWxkIGJlIGF0dGVuZGVkIHdpdGgKICAgICAgICAgICAgICAgICAgICBncmVhdCBkYW5nZXIgdG8gdGhlIFByb3ZpbmNlIHRvIGhhdmUgd2FybGlrZSBtZW4sIGVuZW1pZXMgb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgYm9yZGVyaW5nIHVwb24gYW4gb3BlbiBhbmQgdmVyeSBmZXJ0aWxlCiAgICAgICAgICAgICAgICAgICAgdHJhY3Qgb2YgY291bnRyeS4gRm9yIHRoZXNlIHJlYXNvbnMgaGUgYXBwb2ludGVkIDxuYW1lPlRpdHVzIExhYmllbnVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBoaXMgbGlldXRlbmFudCwgdG8gdGhlIGNvbW1hbmQgb2YgdGhlIGZvcnRpZmljYXRpb24gd2hpY2ggaGUgaGFkIG1hZGUuIEhlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBwcm9jZWVkcyB0byA8bmFtZSBrZXk9InRnbiwxMDAwMDgwIiByZWc9Ikl0YWx5IFsxMi44MzMsNDIuODMzXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+SXRhbHk8L25hbWU+IGJ5IGZvcmNlZCBtYXJjaGVzLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGVyZSBsZXZpZXMgdHdvIGxlZ2lvbnMsIGFuZCBsZWFkcyBvdXQgZnJvbSB3aW50ZXItcXVhcnRlcnMgdGhyZWUgd2hpY2gKICAgICAgICAgICAgICAgICAgICB3ZXJlIHdpbnRlcmluZyBhcm91bmQgPG5hbWUga2V5PSJwZXJzZXVzLEFxdWlsZWlhIiByZWc9IiAgK0FxdWlsZWlhIFsxMy4yMzMzLDQ2LjA1XSAoUGVyc2V1cykgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXF1aWxlaWEiIGtleT0icGVyc2V1cyxBcXVpbGVpYSI+QXF1aWxlaWE8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBhbmQgd2l0aCB0aGVzZSBmaXZlIGxlZ2lvbnMgbWFyY2hlcyByYXBpZGx5IGJ5IHRoZSBuZWFyZXN0IHJvdXRlIGFjcm9zcwogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBrZXk9InRnbiw3MDA3NzQ2IiByZWc9IkFscHMgKG1vdW50YWluIHN5c3RlbSksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNzc0NiIga2V5PSJ0Z24sNzAwNzc0NiI+QWxwczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gaW50byBGdXJ0aGVyIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4uIEhlcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkNlbnRyb25lczwvbmFtZT4gYW5kIHRoZSA8bmFtZT5HcmFpb2NlbGk8L25hbWU+IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+Q2F0dXJpZ2VzPC9uYW1lPiwgaGF2aW5nIHRha2VuIHBvc3Nlc3Npb24gb2YgdGhlIGhpZ2hlciBwYXJ0cywgYXR0ZW1wdAogICAgICAgICAgICAgICAgICAgIHRvIG9ic3RydWN0IHRoZSBhcm15IGluIHRoZWlyIG1hcmNoLiBBZnRlciBoYXZpbmcgcm91dGVkIHRoZXNlIGluIHNldmVyYWwKICAgICAgICAgICAgICAgICAgICBiYXR0bGVzLCBoZSBhcnJpdmVzIGluIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWU+Vm9jb250aWk8L25hbWU+IGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5GdXJ0aGVyIFByb3ZpbmNlPC9uYW1lPiBvbiB0aGUgc2V2ZW50aCBkYXkgZnJvbSA8bmFtZT5PY2VsdW08L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGlzIHRoZSBtb3N0IHJlbW90ZSB0b3duIG9mIHRoZSA8bmFtZT5IaXRoZXIgUHJvdmluY2U8L25hbWU+OyB0aGVuY2UgaGUKICAgICAgICAgICAgICAgICAgICBsZWFkcyBoaXMgYXJteSBpbnRvIHRoZSBjb3VudHJ5IG9mIHRoZSA8bmFtZT5BbGxvYnJvZ2VzPC9uYW1lPiwgYW5kIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFsbG9icm9nZXM8L25hbWU+IHRvIHRoZSA8bmFtZT5TZWd1c2lhbmk8L25hbWU+LiBUaGVzZSBwZW9wbGUgYXJlIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IGJleW9uZCB0aGUgUHJvdmluY2Ugb24gdGhlIG9wcG9zaXRlIHNpZGUgb2YgdGhlIDxuYW1lIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDIzODkwIiBrZXk9InRnbiw3MDIzODkwIj5SaG9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4uIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+VGhlIDxuYW1lPkhlbHZldGlpPC9uYW1lPiBoYWQgYnkgdGhpcyB0aW1lIGxlZCB0aGVpciBmb3JjZXMgb3ZlciB0aHJvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgIG5hcnJvdyBkZWZpbGUgYW5kIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWU+U2VxdWFuaTwvbmFtZT4sIGFuZCBoYWQgYXJyaXZlZAogICAgICAgICAgICAgICAgICAgIGF0IHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWU+QWVkdWk8L25hbWU+LCBhbmQgd2VyZSByYXZhZ2luZyB0aGVpciBsYW5kcy4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFlZHVpPC9uYW1lPiwgYXMgdGhleSBjb3VsZCBub3QgZGVmZW5kIHRoZW1zZWx2ZXMgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbnMgYWdhaW5zdCB0aGVtLCBzZW5kIGVtYmFzc2Fkb3JzIHRvIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdG8KICAgICAgICAgICAgICAgICAgICBhc2sgYXNzaXN0YW5jZSwgW3BsZWFkaW5nXSB0aGF0IHRoZXkgaGFkIGF0IGFsbCB0aW1lcyBzbyB3ZWxsIGRlc2VydmVkIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIHRoYXQgdGhlaXIgZmllbGRzIG91Z2h0IG5vdCB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBsYWlkIHdhc3RlLXRoZWlyIGNoaWxkcmVuIGNhcnJpZWQgb2ZmIGludG8gc2xhdmVyeS10aGVpciB0b3ducyBzdG9ybWVkLAogICAgICAgICAgICAgICAgICAgIGFsbW9zdCB3aXRoaW4gc2lnaHQgb2Ygb3VyIGFybXkuIEF0IHRoZSBzYW1lIHRpbWUgdGhlIDxuYW1lPkFtYmFycmk8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICBmcmllbmRzIGFuZCBraW5zbWVuIG9mIHRoZSA8bmFtZT5BZWR1aTwvbmFtZT4sIGFwcHJpemUgPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgdGhhdCBpdCB3YXMgbm90IGVhc3kgZm9yIHRoZW0sIG5vdyB0aGF0IHRoZWlyIGZpZWxkcyBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIGRldmFzdGF0ZWQsIHRvIHdhcmQgb2ZmIHRoZSB2aW9sZW5jZSBvZiB0aGUgZW5lbXkgZnJvbSB0aGVpciB0b3duczogdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFsbG9icm9nZXM8L25hbWU+IGxpa2V3aXNlLCB3aG8gaGFkIHZpbGxhZ2VzIGFuZCBwb3NzZXNzaW9ucyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBzaWRlIG9mIHRoZSA8bmFtZSBrZXk9InRnbiw3MDIzODkwIiByZWc9IlJob25lIFs0LjgzMyw0My4zMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAyMzg5MCIga2V5PSJ0Z24sNzAyMzg5MCI+UmhvbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBiZXRha2UgdGhlbXNlbHZlcyBpbiBmbGlnaHQgdG8gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgYXNzdXJlIGhpbSB0aGF0IHRoZXkgaGFkIG5vdGhpbmcgcmVtYWluaW5nLCBleGNlcHQgdGhlIHNvaWwgb2YgdGhlaXIgbGFuZC4gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaW5kdWNlZCBieSB0aGVzZSBjaXJjdW1zdGFuY2VzLCBkZWNpZGVzLCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgbm90IHRvIHdhaXQgdW50aWwgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGRlc3Ryb3lpbmcgYWxsIHRoZSBwcm9wZXJ0eSBvZiBoaXMgYWxsaWVzLCBzaG91bGQgYXJyaXZlIGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5TYW50b25lczwvbmFtZT4uIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+VGhlcmUgaXMgYSByaXZlciBbY2FsbGVkXSB0aGUgPG5hbWUga2V5PSJ0Z24sMTEyOTMxNiIgcmVnPSIgICtTYW9uZSBbNC44MzMsNDUuNzVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIga2V5PSJ0Z24sMTEyOTMxNiI+U2FvbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCB3aGljaCBmbG93cyB0aHJvdWdoIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWU+QWVkdWk8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5TZXF1YW5pPC9uYW1lPiBpbnRvIHRoZSA8bmFtZSBrZXk9InRnbiw3MDIzODkwIiByZWc9IlJob25lIFs0LjgzMyw0My4zMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAyMzg5MCIga2V5PSJ0Z24sNzAyMzg5MCI+UmhvbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+IHdpdGggc3VjaCBpbmNyZWRpYmxlIHNsb3duZXNzLCB0aGF0IGl0IGNhbiBub3QgYmUgZGV0ZXJtaW5lZCBieSB0aGUgZXllCiAgICAgICAgICAgICAgICAgICAgaW4gd2hpY2ggZGlyZWN0aW9uIGl0IGZsb3dzLiBUaGlzIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiB3ZXJlCiAgICAgICAgICAgICAgICAgICAgY3Jvc3NpbmcgYnkgcmFmdHMgYW5kIGJvYXRzIGpvaW5lZCB0b2dldGhlci4gV2hlbiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdhcyBpbmZvcm1lZCBieSBzcGllcyB0aGF0IHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiBoYWQgYWxyZWFkeSBjb252ZXllZCB0aHJlZSBwYXJ0cyBvZiB0aGVpciBmb3JjZXMgYWNyb3NzCiAgICAgICAgICAgICAgICAgICAgdGhhdCByaXZlciwgYnV0IHRoYXQgdGhlIGZvdXJ0aCBwYXJ0IHdhcyBsZWZ0IGJlaGluZCBvbiB0aGlzIHNpZGUgb2YgdGhlIDxuYW1lIGtleT0idGduLDExMjkzMTYiIHJlZz0iICArU2FvbmUgWzQuODMzLDQ1Ljc1XSAocml2ZXIpLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMjkzMTYiIGtleT0idGduLDExMjkzMTYiPlNhb25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgaGUgc2V0IG91dCBmcm9tIHRoZSBjYW1wIHdpdGggdGhyZWUgbGVnaW9ucyBkdXJpbmcgdGhlIHRoaXJkIHdhdGNoLCBhbmQKICAgICAgICAgICAgICAgICAgICBjYW1lIHVwIHdpdGggdGhhdCBkaXZpc2lvbiB3aGljaCBoYWQgbm90IHlldCBjcm9zc2VkIHRoZSByaXZlci4gQXR0YWNraW5nIHRoZW0KICAgICAgICAgICAgICAgICAgICBlbmN1bWJlcmVkIHdpdGggYmFnZ2FnZSwgYW5kIG5vdCBleHBlY3RpbmcgaGltLCBoZSBjdXQgdG8gcGllY2VzIGEgZ3JlYXQgcGFydCBvZgogICAgICAgICAgICAgICAgICAgIHRoZW07IHRoZSByZXN0IGJldG9vayB0aGVtc2VsdmVzIHRvIGZsaWdodCwgYW5kIGNvbmNlYWxlZCB0aGVtc2VsdmVzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG5lYXJlc3Qgd29vZHMuIFRoYXQgY2FudG9uIFt3aGljaCB3YXMgY3V0IGRvd25dIHdhcyBjYWxsZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlRpZ3VyaW5lPC9uYW1lPjsgZm9yIHRoZSB3aG9sZSA8bmFtZT5IZWx2ZXRpYW48L25hbWU+IHN0YXRlIGlzIGRpdmlkZWQKICAgICAgICAgICAgICAgICAgICBpbnRvIGZvdXIgY2FudG9ucy4gVGhpcyBzaW5nbGUgY2FudG9uIGhhdmluZyBsZWZ0IHRoZWlyIGNvdW50cnksIHdpdGhpbiB0aGUKICAgICAgICAgICAgICAgICAgICByZWNvbGxlY3Rpb24gb2Ygb3VyIGZhdGhlcnMsIGhhZCBzbGFpbiA8bmFtZT5MdWNpdXMgQ2Fzc2l1czwvbmFtZT4gdGhlIGNvbnN1bCwKICAgICAgICAgICAgICAgICAgICBhbmQgaGFkIG1hZGUgaGlzIGFybXkgcGFzcyB1bmRlciB0aGUgeW9rZS4gVGh1cywgd2hldGhlciBieSBjaGFuY2UsIG9yIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGRlc2lnbiBvZiB0aGUgaW1tb3J0YWwgZ29kcywgdGhhdCBwYXJ0IG9mIHRoZSA8bmFtZT5IZWx2ZXRpYW48L25hbWU+IHN0YXRlIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGFkIGJyb3VnaHQgYSBzaWduYWwgY2FsYW1pdHkgdXBvbiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLAogICAgICAgICAgICAgICAgICAgIHdhcyB0aGUgZmlyc3QgdG8gcGF5IHRoZSBwZW5hbHR5LiBJbiB0aGlzIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBhdmVuZ2VkIG5vdCBvbmx5IHRoZSBwdWJsaWMgYnV0IGFsc28gaGlzIG93biBwZXJzb25hbCB3cm9uZ3MsIGJlY2F1c2UgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlRpZ3VyaW5pPC9uYW1lPiBoYWQgc2xhaW4gPG5hbWU+THVjaXVzIFBpc288L25hbWU+IHRoZSBsaWV1dGVuYW50IFtvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5DYXNzaXVzXTwvbmFtZT4sIHRoZSBncmFuZGZhdGhlciBvZiA8bmFtZT5MdWNpdXMgQ2FscHVybml1cwogICAgICAgICAgICAgICAgICAgICAgICBQaXNvPC9uYW1lPiwgaGlzIDxuYW1lPltDYWVzYXI8L25hbWU+J3NdIGZhdGhlci1pbi1sYXcsIGluIHRoZSBzYW1lIGJhdHRsZQogICAgICAgICAgICAgICAgICAgIGFzIDxuYW1lPkNhc3NpdXM8L25hbWU+IGhpbXNlbGYuIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+VGhpcyBiYXR0bGUgZW5kZWQsIHRoYXQgaGUgbWlnaHQgYmUgYWJsZSB0byBjb21lIHVwIHdpdGggdGhlIHJlbWFpbmluZyBmb3JjZXMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGhlIHByb2N1cmVzIGEgYnJpZGdlIHRvIGJlIG1hZGUgYWNyb3NzCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGtleT0idGduLDExMjkzMTYiIHJlZz0iICArU2FvbmUgWzQuODMzLDQ1Ljc1XSAocml2ZXIpLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMjkzMTYiIGtleT0idGduLDExMjkzMTYiPlNhb25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYW5kIHRodXMgbGVhZHMgaGlzIGFybXkgb3Zlci4gVGhlIDxuYW1lPkhlbHZldGlpPC9uYW1lPiwgY29uZnVzZWQgYnkKICAgICAgICAgICAgICAgICAgICBoaXMgc3VkZGVuIGFycml2YWwsIHdoZW4gdGhleSBmb3VuZCB0aGF0IGhlIGhhZCBlZmZlY3RlZCBpbiBvbmUgZGF5LCB3aGF0IHRoZXksCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBoYWQgd2l0aCB0aGUgdXRtb3N0IGRpZmZpY3VsdHkgYWNjb21wbGlzaGVkIGluIHR3ZW50eSBuYW1lbHksIHRoZQogICAgICAgICAgICAgICAgICAgIGNyb3NzaW5nIG9mIHRoZSByaXZlciwgc2VuZCBlbWJhc3NhZG9ycyB0byBoaW07IGF0IHRoZSBoZWFkIG9mIHdoaWNoIGVtYmFzc3kgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkRpdmljbzwvbmFtZT4sIHdobyBoYWQgYmVlbiBjb21tYW5kZXIgb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBpbiB0aGUgd2FyIGFnYWluc3QgPG5hbWU+Q2Fzc2l1czwvbmFtZT4uIEhlIHRodXMgdHJlYXRzCiAgICAgICAgICAgICAgICAgICAgd2l0aCA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+Oi10aGF0LCAiaWYgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSB3b3VsZCBtYWtlIHBlYWNlIHdpdGggdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IHRoZXkgd291bGQgZ28gdG8gdGhhdCBwYXJ0IGFuZCB0aGVyZSByZW1haW4sIHdoZXJlIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbWlnaHQgYXBwb2ludCBhbmQgZGVzaXJlIHRoZW0gdG8gYmU7IGJ1dCBpZiBoZQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBwZXJzaXN0IGluIHBlcnNlY3V0aW5nIHRoZW0gd2l0aCB3YXIgdGhhdCBoZSBvdWdodCB0byByZW1lbWJlciBib3RoIHRoZQogICAgICAgICAgICAgICAgICAgIGFuY2llbnQgZGlzZ3JhY2Ugb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWMgdmFsb3Igb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LiBBcyB0byBoaXMKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgYXR0YWNrZWQgb25lIGNhbnRvbiBieSBzdXJwcmlzZSwgW2F0IGEgdGltZV0gd2hlbiB0aG9zZSB3aG8gaGFkIGNyb3NzZWQKICAgICAgICAgICAgICAgICAgICB0aGUgcml2ZXIgY291bGQgbm90IGJyaW5nIGFzc2lzdGFuY2UgdG8gdGhlaXIgZnJpZW5kcywgdGhhdCBoZSBvdWdodCBub3Qgb24gdGhhdAogICAgICAgICAgICAgICAgICAgIGFjY291bnQgdG8gYXNjcmliZSB2ZXJ5IG11Y2ggdG8gaGlzIG93biB2YWxvciwgb3IgZGVzcGlzZSB0aGVtOyB0aGF0IHRoZXkgaGFkIHNvCiAgICAgICAgICAgICAgICAgICAgbGVhcm5lZCBmcm9tIHRoZWlyIHNpcmVzIGFuZCBhbmNlc3RvcnMsIGFzIHRvIHJlbHkgbW9yZSBvbiB2YWxvciB0aGFuIG9uCiAgICAgICAgICAgICAgICAgICAgYXJ0aWZpY2UgYW5kIHN0cmF0YWdlbS4gPG5hbWU+V2hlcmVmb3JlPC9uYW1lPiBsZXQgaGltIG5vdCBicmluZyBpdCB0byBwYXNzIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgcGxhY2UsIHdoZXJlIHRoZXkgd2VyZSBzdGFuZGluZywgc2hvdWxkIGFjcXVpcmUgYSBuYW1lLCBmcm9tIHRoZSBkaXNhc3RlciBvZgogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgYW5kIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGVpciBhcm15IG9yCiAgICAgICAgICAgICAgICAgICAgdHJhbnNtaXQgdGhlIHJlbWVtYnJhbmNlIFtvZiBzdWNoIGFuIGV2ZW50IHRvIHBvc3Rlcml0eV0uIiA8bWlsZXN0b25lIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPlRvIHRoZXNlIHdvcmRzIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdGh1cyByZXBsaWVkOi10aGF0ICJvbiB0aGF0IHZlcnkKICAgICAgICAgICAgICAgICAgICBhY2NvdW50IGhlIGZlbHQgbGVzcyBoZXNpdGF0aW9uLCBiZWNhdXNlIGhlIGtlcHQgaW4gcmVtZW1icmFuY2UgdGhvc2UKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2VzIHdoaWNoIHRoZSA8bmFtZT5IZWx2ZXRpYW48L25hbWU+IGVtYmFzc2Fkb3JzIGhhZCBtZW50aW9uZWQsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgZmVsdCB0aGUgbW9yZSBpbmRpZ25hbnQgYXQgdGhlbSwgaW4gcHJvcG9ydGlvbiBhcyB0aGV5IGhhZCBoYXBwZW5lZAogICAgICAgICAgICAgICAgICAgIHVuZGVzZXJ2ZWRseSB0byB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlOiBmb3IgaWYgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIGNvbnNjaW91cyBvZiBoYXZpbmcgZG9uZSBhbnkgd3JvbmcsIGl0IHdvdWxkIG5vdCBoYXZlIGJlZW4gZGlmZmljdWx0IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgb24gdGhlaXIgZ3VhcmQsIGJ1dCBmb3IgdGhhdCB2ZXJ5IHJlYXNvbiBoYWQgdGhleSBiZWVuIGRlY2VpdmVkLCBiZWNhdXNlIG5laXRoZXIKICAgICAgICAgICAgICAgICAgICB3ZXJlIHRoZXkgYXdhcmUgdGhhdCBhbnkgb2ZmZW5zZSBoYWQgYmVlbiBnaXZlbiBieSB0aGVtLCBvbiBhY2NvdW50IG9mIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhleSBzaG91bGQgYmUgYWZyYWlkLCBub3IgZGlkIHRoZXkgdGhpbmsgdGhhdCB0aGV5IG91Z2h0IHRvIGJlIGFmcmFpZCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgY2F1c2UuIEJ1dCBldmVuIGlmIGhlIHdlcmUgd2lsbGluZyB0byBmb3JnZXQgdGhlaXIgZm9ybWVyIG91dHJhZ2UsIGNvdWxkIGhlIGFsc28KICAgICAgICAgICAgICAgICAgICBsYXkgYXNpZGUgdGhlIHJlbWVtYnJhbmNlIG9mIHRoZSBsYXRlIHdyb25ncywgaW4gdGhhdCB0aGV5IGhhZCBhZ2FpbnN0IGhpcyB3aWxsCiAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdGVkIGEgcm91dGUgdGhyb3VnaCB0aGUgUHJvdmluY2UgYnkgZm9yY2UsIGluIHRoYXQgdGhleSBoYWQgbW9sZXN0ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFlZHVpPC9uYW1lPiwgdGhlIDxuYW1lPkFtYmFycmk8L25hbWU+LCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFsbG9icm9nZXM8L25hbWU+PyBUaGF0IGFzIHRvIHRoZWlyIHNvIGluc29sZW50bHkgYm9hc3Rpbmcgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICB2aWN0b3J5LCBhbmQgYXMgdG8gdGhlaXIgYmVpbmcgYXN0b25pc2hlZCB0aGF0IHRoZXkgaGFkIHNvIGxvbmcgY29tbWl0dGVkIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZXMgd2l0aCBpbXB1bml0eSwgW2JvdGggdGhlc2UgdGhpbmdzXSB0ZW5kZWQgdG8gdGhlIHNhbWUgcG9pbnQ7IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBpbW1vcnRhbCBnb2RzIGFyZSB3b250IHRvIGFsbG93IHRob3NlIHBlcnNvbnMgd2hvbSB0aGV5IHdpc2ggdG8gcHVuaXNoIGZvciB0aGVpcgogICAgICAgICAgICAgICAgICAgIGd1aWx0IHNvbWV0aW1lcyBhIGdyZWF0ZXIgcHJvc3Blcml0eSBhbmQgbG9uZ2VyIGltcHVuaXR5LCBpbiBvcmRlciB0aGF0IHRoZXkgbWF5CiAgICAgICAgICAgICAgICAgICAgc3VmZmVyIHRoZSBtb3JlIHNldmVyZWx5IGZyb20gYSByZXZlcnNlIG9mIGNpcmN1bXN0YW5jZXMuIEFsdGhvdWdoIHRoZXNlIHRoaW5ncwogICAgICAgICAgICAgICAgICAgIGFyZSBzbywgeWV0LCBpZiBob3N0YWdlcyB3ZXJlIHRvIGJlIGdpdmVuIGhpbSBieSB0aGVtIGluIG9yZGVyIHRoYXQgaGUgbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgYXNzdXJlZCB0aGVzZSB3aWxsIGRvIHdoYXQgdGhleSBwcm9taXNlLCBhbmQgcHJvdmlkZWQgdGhleSB3aWxsIGdpdmUKICAgICAgICAgICAgICAgICAgICBzYXRpc2ZhY3Rpb24gdG8gdGhlIDxuYW1lPkFlZHVpPC9uYW1lPiBmb3IgdGhlIG91dHJhZ2VzIHdoaWNoIHRoZXkgaGFkIGNvbW1pdHRlZAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlbSBhbmQgdGhlaXIgYWxsaWVzLCBhbmQgbGlrZXdpc2UgdG8gdGhlIDxuYW1lPkFsbG9icm9nZXM8L25hbWU+LCBoZQogICAgICAgICAgICAgICAgICAgICAgICBbPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPl0gd2lsbCBtYWtlIHBlYWNlIHdpdGggdGhlbS4iCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkRpdmljbzwvbmFtZT4gcmVwbGllZCwgdGhhdCAidGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gc28gdHJhaW5lZCBieSB0aGVpciBhbmNlc3RvcnMsIHRoYXQgdGhleSB3ZXJlIGFjY3VzdG9tZWQgdG8gcmVjZWl2ZSwKICAgICAgICAgICAgICAgICAgICBub3QgdG8gZ2l2ZSBob3N0YWdlczsgb2YgdGhhdCBmYWN0IHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUKICAgICAgICAgICAgICAgICAgICB3ZXJlIHdpdG5lc3MuIiBIYXZpbmcgZ2l2ZW4gdGhpcyByZXBseSwgaGUgd2l0aGRyZXcuIDxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+T24gdGhlIGZvbGxvd2luZyBkYXkgdGhleSBtb3ZlIHRoZWlyIGNhbXAgZnJvbSB0aGF0IHBsYWNlOyA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRvZXMgdGhlIHNhbWUsIGFuZCBzZW5kcyBmb3J3YXJkIGFsbCBoaXMgY2F2YWxyeSwgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIGZvdXIgdGhvdXNhbmQgKHdoaWNoIGhlIGhhZCBkcmF3biB0b2dldGhlciBmcm9tIGFsbCBwYXJ0cyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBQcm92aW5jZSBhbmQgZnJvbSB0aGUgPG5hbWU+QWVkdWk8L25hbWU+IGFuZCB0aGVpciBhbGxpZXMpLCB0byBvYnNlcnZlIHRvd2FyZAogICAgICAgICAgICAgICAgICAgIHdoYXQgcGFydHMgdGhlIGVuZW15IGFyZSBkaXJlY3RpbmcgdGhlaXIgbWFyY2guIFRoZXNlLCBoYXZpbmcgdG9vIGVhZ2VybHkKICAgICAgICAgICAgICAgICAgICBwdXJzdWVkIHRoZSBlbmVteSdzIHJlYXIsIGNvbWUgdG8gYSBiYXR0bGUgd2l0aCB0aGUgY2F2YWxyeSBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gaW4gYSBkaXNhZHZhbnRhZ2VvdXMgcGxhY2UsIGFuZCBhIGZldyBvZiBvdXIKICAgICAgICAgICAgICAgICAgICBtZW4gZmFsbC4gVGhlIDxuYW1lPkhlbHZldGlpPC9uYW1lPiwgZWxhdGVkIHdpdGggdGhpcyBiYXR0bGUsIGJlY2F1c2UgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICB3aXRoIGZpdmUgaHVuZHJlZCBob3JzZSByZXB1bHNlZCBzbyBsYXJnZSBhIGJvZHkgb2YgaG9yc2UsIGJlZ2FuIHRvIGZhY2UgdXMgbW9yZQogICAgICAgICAgICAgICAgICAgIGJvbGRseSwgc29tZXRpbWVzIHRvbyBmcm9tIHRoZWlyIHJlYXIgdG8gcHJvdm9rZSBvdXIgbWVuIGJ5IGFuIGF0dGFjay4gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBbaG93ZXZlcl0gcmVzdHJhaW5lZCBoaXMgbWVuIGZyb20gYmF0dGxlLCBkZWVtaW5nCiAgICAgICAgICAgICAgICAgICAgaXQgc3VmZmljaWVudCBmb3IgdGhlIHByZXNlbnQgdG8gcHJldmVudCB0aGUgZW5lbXkgZnJvbSByYXBpbmUsIGZvcmFnZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgZGVwcmVkYXRpb24uIFRoZXkgbWFyY2hlZCBmb3IgYWJvdXQgZmlmdGVlbiBkYXlzIGluIHN1Y2ggYSBtYW5uZXIgdGhhdCB0aGVyZSB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgbW9yZSB0aGFuIGZpdmUgb3Igc2l4IG1pbGVzIGJldHdlZW4gdGhlIGVuZW15J3MgcmVhciBhbmQgb3VyIHZhbi4gPG1pbGVzdG9uZSBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8cD5NZWFud2hpbGUsIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ga2VwdCBkYWlseSBpbXBvcnR1bmluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+QWVkdWk8L25hbWU+IGZvciB0aGUgY29ybiB3aGljaCB0aGV5IGhhZCBwcm9taXNlZCBpbiB0aGUgbmFtZSBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHN0YXRlOyBmb3IsIGluIGNvbnNlcXVlbmNlIG9mIHRoZSBjb2xkbmVzcyAoPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgYmVpbmcgYXMgYmVmb3JlIHNhaWQsCiAgICAgICAgICAgICAgICAgICAgc2l0dWF0ZWQgdG93YXJkIHRoZSBub3J0aCksIG5vdCBvbmx5IHdhcyB0aGUgY29ybiBpbiB0aGUgZmllbGRzIG5vdCByaXBlLCBidXQKICAgICAgICAgICAgICAgICAgICB0aGVyZSB3YXMgbm90IGluIHN0b3JlIGEgc3VmZmljaWVudGx5IGxhcmdlIHF1YW50aXR5IGV2ZW4gb2YgZm9kZGVyOiBiZXNpZGVzIGhlCiAgICAgICAgICAgICAgICAgICAgd2FzIHVuYWJsZSB0byB1c2UgdGhlIGNvcm4gd2hpY2ggaGUgaGFkIGNvbnZleWVkIGluIHNoaXBzIHVwIHRoZSByaXZlciA8bmFtZSBrZXk9InRnbiwxMTI5MzE2IiByZWc9IiAgK1Nhb25lIFs0LjgzMyw0NS43NV0gKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTI5MzE2IiBrZXk9InRnbiwxMTI5MzE2Ij5TYW9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGJlY2F1c2UgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBmcm9tIHdob20gaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgdW53aWxsaW5nIHRvIHJldGlyZSBoYWQgZGl2ZXJ0ZWQgdGhlaXIgbWFyY2ggZnJvbSB0aGUgPG5hbWUga2V5PSJ0Z24sMTEyOTMxNiIgcmVnPSIgICtTYW9uZSBbNC44MzMsNDUuNzVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIga2V5PSJ0Z24sMTEyOTMxNiI+U2FvbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LiBUaGUgPG5hbWU+QWVkdWk8L25hbWU+IGtlcHQgZGVmZXJyaW5nIGZyb20gZGF5IHRvIGRheSwgYW5kIHNheWluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaXQgd2FzIGJlaW5nIGNvbGxlY3RlZC1icm91Z2h0IGluLW9uIHRoZSByb2FkLiIgV2hlbiBoZSBzYXcgdGhhdCBoZSB3YXMgcHV0IG9mZgogICAgICAgICAgICAgICAgICAgIHRvbyBsb25nLCBhbmQgdGhhdCB0aGUgZGF5IHdhcyBjbG9zZSBhdCBoYW5kIG9uIHdoaWNoIGhlIG91Z2h0IHRvIHNlcnZlIG91dCB0aGUKICAgICAgICAgICAgICAgICAgICBjb3JuIHRvIGhpcyBzb2xkaWVyczstaGF2aW5nIGNhbGxlZCB0b2dldGhlciB0aGVpciBjaGllZnMsIG9mIHdob20gaGUgaGFkIGEKICAgICAgICAgICAgICAgICAgICBncmVhdCBudW1iZXIgaW4gaGlzIGNhbXAsIGFtb25nIHRoZW0gPG5hbWU+RGl2aXRpYWN1czwvbmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkxpc2N1czwvbmFtZT4gd2hvIHdhcyBpbnZlc3RlZCB3aXRoIHRoZSBjaGllZiBtYWdpc3RyYWN5ICh3aG9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5BZWR1aTwvbmFtZT4gc3R5bGUgdGhlIDxuYW1lPlZlcmdvYnJldHVzPC9uYW1lPiwgYW5kIHdobyBpcyBlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgYW5udWFsbHkgYW5kIGhhcyBwb3dlciBvZiBsaWZlIG9yIGRlYXRoIG92ZXIgaGlzIGNvdW50cnltZW4pLCBoZSBzZXZlcmVseQogICAgICAgICAgICAgICAgICAgIHJlcHJpbWFuZHMgdGhlbSwgYmVjYXVzZSBoZSBpcyBub3QgYXNzaXN0ZWQgYnkgdGhlbSBvbiBzbyB1cmdlbnQgYW4gb2NjYXNpb24sCiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgZW5lbXkgd2VyZSBzbyBjbG9zZSBhdCBoYW5kLCBhbmQgd2hlbiBbY29ybl0gY291bGQgbmVpdGhlciBiZSBib3VnaHQKICAgICAgICAgICAgICAgICAgICBub3IgdGFrZW4gZnJvbSB0aGUgZmllbGRzLCBwYXJ0aWN1bGFybHkgYXMsIGluIGEgZ3JlYXQgbWVhc3VyZSB1cmdlZCBieSB0aGVpcgogICAgICAgICAgICAgICAgICAgIHByYXllcnMsIGhlIGhhZCB1bmRlcnRha2VuIHRoZSB3YXI7IG11Y2ggbW9yZSBiaXR0ZXJseSwgdGhlcmVmb3JlIGRvZXMgaGUKICAgICAgICAgICAgICAgICAgICBjb21wbGFpbiBvZiBoaXMgYmVpbmcgZm9yc2FrZW4uIDxtaWxlc3RvbmUgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+VGhlbiBhdCBsZW5ndGggPG5hbWU+TGlzY3VzPC9uYW1lPiwgbW92ZWQgYnkgPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzCiAgICAgICAgICAgICAgICAgICAgc3BlZWNoLCBkaXNjbG9zZXMgd2hhdCBoZSBoYWQgaGl0aGVydG8ga2VwdCBzZWNyZXQ6LXRoYXQgdGhlcmUgYXJlIHNvbWUgd2hvc2UKICAgICAgICAgICAgICAgICAgICBpbmZsdWVuY2VzIHdpdGggdGhlIHBlb3BsZSBpcyB2ZXJ5IGdyZWF0LCB3aG8sIHRob3VnaCBwcml2YXRlIG1lbiwgaGF2ZSBtb3JlCiAgICAgICAgICAgICAgICAgICAgcG93ZXIgdGhhbiB0aGUgbWFnaXN0cmF0ZXMgdGhlbXNlbHZlczogdGhhdCB0aGVzZSBieSBzZWRpdGlvbnMgYW5kIHZpb2xlbnQKICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSBhcmUgZGV0ZXJyaW5nIHRoZSBwb3B1bGFjZSBmcm9tIGNvbnRyaWJ1dGluZyB0aGUgY29ybiB3aGljaCB0aGV5IG91Z2h0CiAgICAgICAgICAgICAgICAgICAgdG8gc3VwcGx5OyBbYnkgdGVsbGluZyB0aGVtXSB0aGF0LCBpZiB0aGV5IGNhbiBub3QgYW55IGxvbmdlciByZXRhaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc3VwcmVtYWN5IG9mIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGl0IHdlcmUgYmV0dGVyIHRvIHN1Ym1pdAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBnb3Zlcm5tZW50IG9mIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHRoYW4gb2YgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LCBub3Igb3VnaHQgdGhleSB0byBkb3VidCB0aGF0LCBpZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHNob3VsZCBvdmVycG93ZXIgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCB0aGV5IHdvdWxkIHdyZXN0IHRoZWlyIGZyZWVkb20gZnJvbSB0aGUgPG5hbWU+QWVkdWk8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgdG9nZXRoZXIgd2l0aCB0aGUgcmVtYWluZGVyIG9mIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4uIEJ5IHRoZXNlIHZlcnkgbWVuLCBbc2FpZAogICAgICAgICAgICAgICAgICAgIGhlXSwgYXJlIG91ciBwbGFucyBhbmQgd2hhdGV2ZXIgaXMgZG9uZSBpbiB0aGUgY2FtcCwgZGlzY2xvc2VkIHRvIHRoZSBlbmVteTsKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgY291bGQgbm90IGJlIHJlc3RyYWluZWQgYnkgaGltOiBuYXkgbW9yZSwgaGUgd2FzIHdlbGwgYXdhcmUsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggY29tcGVsbGVkIGJ5IG5lY2Vzc2l0eSwgaGUgaGFkIGRpc2Nsb3NlZCB0aGUgbWF0dGVyIHRvIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGF0IGhvdyBncmVhdCBhIHJpc2sgaGUgaGFkIGRvbmUgaXQ7IGFuZCBmb3IgdGhhdCByZWFzb24sIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gc2lsZW50IGFzIGxvbmcgYXMgaGUgY291bGQuIiA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gcGVyY2VpdmVkIHRoYXQgYnkgdGhpcyBzcGVlY2ggb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TGlzY3VzPC9uYW1lPiwgPG5hbWU+RHVtbm9yaXg8L25hbWU+LCB0aGUgYnJvdGhlciBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5EaXZpdGlhY3VzPC9uYW1lPiwgd2FzIGluZGljYXRlZDsgYnV0LCBhcyBoZSB3YXMgdW53aWxsaW5nIHRoYXQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzIHNob3VsZCBiZSBkaXNjdXNzZWQgd2hpbGUgc28gbWFueSB3ZXJlIHByZXNlbnQsIGhlIHNwZWVkaWx5IGRpc21pc3NlczoKICAgICAgICAgICAgICAgICAgICB0aGUgY291bmNpbCwgYnV0IGRldGFpbnMgPG5hbWU+TGlzY3VzPC9uYW1lPjogaGUgaW5xdWlyZXMgZnJvbSBoaW0gd2hlbiBhbG9uZSwKICAgICAgICAgICAgICAgICAgICBhYm91dCB0aG9zZSB0aGluZ3Mgd2hpY2ggaGUgaGFkIHNhaWQgaW4gdGhlIG1lZXRpbmcuIEhlIDxuYW1lPltMaXNjdXNdPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHNwZWFrcyBtb3JlIHVucmVzZXJ2ZWRseSBhbmQgYm9sZGx5LiBIZSA8bmFtZT5bQ2Flc2FyXTwvbmFtZT4gbWFrZXMgaW5xdWlyaWVzIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgcG9pbnRzIHByaXZhdGVseSBvZiBvdGhlcnMsIGFuZCBkaXNjb3ZlcmVkIHRoYXQgaXQgaXMgYWxsIHRydWU7IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgIjxuYW1lPkR1bW5vcml4PC9uYW1lPiBpcyB0aGUgcGVyc29uLCBhIG1hbiBvZiB0aGUgaGlnaGVzdCBkYXJpbmcsIGluIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZmF2b3Igd2l0aCB0aGUgcGVvcGxlIG9uIGFjY291bnQgb2YgaGlzIGxpYmVyYWxpdHksIGEgbWFuIGVhZ2VyIGZvciBhCiAgICAgICAgICAgICAgICAgICAgcmV2b2x1dGlvbjogdGhhdCBmb3IgYSBncmVhdCBtYW55IHllYXJzIGhlIGhhcyBiZWVuIGluIHRoZSBoYWJpdCBvZiBjb250cmFjdGluZwogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgY3VzdG9tcyBhbmQgYWxsIHRoZSBvdGhlciB0YXhlcyBvZiB0aGUgPG5hbWU+QWVkdWk8L25hbWU+IGF0IGEgc21hbGwKICAgICAgICAgICAgICAgICAgICBjb3N0LCBiZWNhdXNlIHdoZW4gaGUgYmlkcywgbm8gb25lIGRhcmVzIHRvIGJpZCBhZ2FpbnN0IGhpbS4gQnkgdGhlc2UgbWVhbnMgaGUKICAgICAgICAgICAgICAgICAgICBoYXMgYm90aCBpbmNyZWFzZWQgaGlzIG93biBwcml2YXRlIHByb3BlcnR5LCBhbmQgYW1hc3NlZCBncmVhdCBtZWFucyBmb3IgZ2l2aW5nCiAgICAgICAgICAgICAgICAgICAgbGFyZ2Vzc2VzOyB0aGF0IGhlIG1haW50YWlucyBjb25zdGFudGx5IGF0IGhpcyBvd24gZXhwZW5zZSBhbmQga2VlcHMgYWJvdXQgaGlzCiAgICAgICAgICAgICAgICAgICAgb3duIHBlcnNvbiBhIGdyZWF0IG51bWJlciBvZiBjYXZhbHJ5LCBhbmQgdGhhdCBub3Qgb25seSBhdCBob21lLCBidXQgZXZlbiBhbW9uZwogICAgICAgICAgICAgICAgICAgIHRoZSBuZWlnaGJvcmluZyBzdGF0ZXMsIGhlIGhhcyBncmVhdCBpbmZsdWVuY2UsIGFuZCBmb3IgdGhlIHNha2Ugb2YKICAgICAgICAgICAgICAgICAgICBzdHJlbmd0aGVuaW5nIHRoaXMgaW5mbHVlbmNlIGhhcyBnaXZlbiBoaXMgbW90aGVyIGluIG1hcnJpYWdlIGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5CaXR1cmlnZXM8L25hbWU+IHRvIGEgbWFuIHRoZSBtb3N0IG5vYmxlIGFuZCBtb3N0IGluZmx1ZW50aWFsIHRoZXJlOwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGFzIGhpbXNlbGYgdGFrZW4gYSB3aWZlIGZyb20gYW1vbmcgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBhbmQgaGFzIGdpdmVuIGhpcyBzaXN0ZXIgYnkgdGhlIG1vdGhlcidzIHNpZGUgYW5kIGhpcwogICAgICAgICAgICAgICAgICAgIGZlbWFsZSByZWxhdGlvbnMgaW4gbWFycmlhZ2UgaW50byBvdGhlciBzdGF0ZXM7IHRoYXQgaGUgZmF2b3JzIGFuZCB3aXNoZXMgd2VsbAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiBvbiBhY2NvdW50IG9mIHRoaXMgY29ubmVjdGlvbjsgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBoYXRlcyA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGFuZCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LCBvbiBoaXMgb3duIGFjY291bnQsIGJlY2F1c2UgYnkgdGhlaXIgYXJyaXZhbCBoaXMgcG93ZXIgd2FzCiAgICAgICAgICAgICAgICAgICAgd2Vha2VuZWQsIGFuZCBoaXMgYnJvdGhlciwgPG5hbWU+RGl2aXRpYWN1czwvbmFtZT4sIHJlc3RvcmVkIHRvIGhpcyBmb3JtZXIKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiBvZiBpbmZsdWVuY2UgYW5kIGRpZ25pdHk6IHRoYXQsIGlmIGFueSB0aGluZyBzaG91bGQgaGFwcGVuIHRvIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIGhlIGVudGVydGFpbnMgdGhlIGhpZ2hlc3QgaG9wZSBvZiBnYWluaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHNvdmVyZWlnbnR5IGJ5IG1lYW5zIG9mIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgYnV0IHRoYXQgdW5kZXIKICAgICAgICAgICAgICAgICAgICB0aGUgZ292ZXJubWVudCBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIGhlIGRlc3BhaXJzIG5vdAogICAgICAgICAgICAgICAgICAgIG9ubHkgb2Ygcm95YWx0eSwgYnV0IGV2ZW4gb2YgdGhhdCBpbmZsdWVuY2Ugd2hpY2ggaGUgYWxyZWFkeSBoYXMuIiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRpc2NvdmVyZWQgdG9vLCBvbiBpbnF1aXJpbmcgaW50byB0aGUgdW5zdWNjZXNzZnVsCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSBlbmdhZ2VtZW50IHdoaWNoIGhhZCB0YWtlbiBwbGFjZSBhIGZldyBkYXlzIGJlZm9yZSwgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBjb21tZW5jZW1lbnQgb2YgdGhhdCBmbGlnaHQgaGFkIGJlZW4gbWFkZSBieSA8bmFtZT5EdW1ub3JpeDwvbmFtZT4gYW5kIGhpcwogICAgICAgICAgICAgICAgICAgIGNhdmFscnkgKGZvciA8bmFtZT5EdW1ub3JpeDwvbmFtZT4gd2FzIGluIGNvbW1hbmQgb2YgdGhlIGNhdmFscnkgd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFlZHVpPC9uYW1lPiBoYWQgc2VudCBmb3IgYWlkIHRvIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4pOwogICAgICAgICAgICAgICAgICAgIHRoYXQgYnkgdGhlaXIgZmxpZ2h0IHRoZSByZXN0IG9mIHRoZSBjYXZhbHJ5IHdlcmUgZGlzbWF5ZWQuIDxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+QWZ0ZXIgbGVhcm5pbmcgdGhlc2UgY2lyY3Vtc3RhbmNlcywgc2luY2UgdG8gdGhlc2Ugc3VzcGljaW9ucyB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHVuZXF1aXZvY2FsIGZhY3RzIHdlcmUgYWRkZWQsIHZpei4sIHRoYXQgaGUgaGFkIGxlZCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gdGhyb3VnaCB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lPlNlcXVhbmk8L25hbWU+OyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIHByb3ZpZGVkIHRoYXQgaG9zdGFnZXMgc2hvdWxkIGJlIG11dHVhbGx5IGdpdmVuOyB0aGF0IGhlIGhhZCBkb25lIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHRoaW5ncywgbm90IG9ubHkgd2l0aG91dCBhbnkgb3JkZXJzIG9mIGhpcyA8bmFtZT5bQ2Flc2FyPC9uYW1lPidzXSBhbmQgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgb3duIHN0YXRlJ3MsIGJ1dCBldmVuIHdpdGhvdXQgdGhlaXIgW3RoZSA8bmFtZT5BZWR1aV08L25hbWU+IGtub3dpbmcgYW55CiAgICAgICAgICAgICAgICAgICAgdGhpbmcgb2YgaXQgdGhlbXNlbHZlczsgdGhhdCBoZSBbPG5hbWU+RHVtbm9yaXg8L25hbWU+XSB3YXMgcmVwcmltYW5kZWQ6IGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIFtjaGllZl0gbWFnaXN0cmF0ZSBvZiB0aGUgPG5hbWU+QWVkdWk8L25hbWU+OyBoZSBbPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPl0gY29uc2lkZXJlZCB0aGF0IHRoZXJlIHdhcyBzdWZmaWNpZW50IHJlYXNvbiwgd2h5IGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGVpdGhlciBwdW5pc2ggaGltIGhpbXNlbGYsIG9yIG9yZGVyIHRoZSBzdGF0ZSB0byBkbyBzby4gT25lIHRoaW5nIFtob3dldmVyXQogICAgICAgICAgICAgICAgICAgIHN0b29kIGluIHRoZSB3YXkgb2YgYWxsIHRoaXMtdGhhdCBoZSBoYWQgbGVhcm5lZCBieSBleHBlcmllbmNlIGhpcyBicm90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkRpdml0aWFjdXM8L25hbWU+J3MgdmVyeSBoaWdoIHJlZ2FyZCBmb3IgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgaGlzIGdyZWF0IGFmZmVjdGlvbiB0b3dhcmQgaGltLCBoaXMgZGlzdGluZ3Vpc2hlZAogICAgICAgICAgICAgICAgICAgIGZhaXRoZnVsbmVzcywganVzdGljZSwgYW5kIG1vZGVyYXRpb247IGZvciBoZSB3YXMgYWZyYWlkIGxlc3QgYnkgdGhlIHB1bmlzaG1lbnQKICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIG1hbiwgaGUgc2hvdWxkIGh1cnQgdGhlIGZlZWxpbmdzIG9mIDxuYW1lPkRpdml0aWFjdXM8L25hbWU+LiBUaGVyZWZvcmUsCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGhlIGF0dGVtcHRlZCBhbnkgdGhpbmcsIGhlIG9yZGVycyA8bmFtZT5EaXZpdGlhY3VzPC9uYW1lPiB0byBiZSBzdW1tb25lZAogICAgICAgICAgICAgICAgICAgIHRvIGhpbSwgYW5kLCB3aGVuIHRoZSBvcmRpbmFyeSBpbnRlcnByZXRlcnMgaGFkIGJlZW4gd2l0aGRyYXduLCBjb252ZXJzZXMgd2l0aAogICAgICAgICAgICAgICAgICAgIGhpbSB0aHJvdWdoIDxuYW1lPkNhaXVzIFZhbGVyaXVzIFByb2NpbGx1czwvbmFtZT4sIGNoaWVmIG9mIHRoZSBwcm92aW5jZSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgaGlzLCBpbiB3aG9tIGhlIHJlcG9zZWQgdGhlIGhpZ2hlc3QKICAgICAgICAgICAgICAgICAgICBjb25maWRlbmNlIGluIGV2ZXJ5IHRoaW5nOyBhdCB0aGUgc2FtZSB0aW1lIGhlIHJlbWluZHMgaGltIG9mIHdoYXQgd2FzIHNhaWQKICAgICAgICAgICAgICAgICAgICBhYm91dCA8bmFtZT5EdW1ub3JpeDwvbmFtZT4gaW4gdGhlIGNvdW5jaWwgb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCB3aGVuIGhlIGhpbXNlbGYgd2FzIHByZXNlbnQsIGFuZCBzaG93cyB3aGF0IGVhY2ggaGFkIHNhaWQgb2YKICAgICAgICAgICAgICAgICAgICBoaW0gcHJpdmF0ZWx5IGluIGhpcyA8bmFtZT5bQ2Flc2FyPC9uYW1lPidzXSBvd24gcHJlc2VuY2U7IGhlIGJlZ3MgYW5kIGV4aG9ydHMKICAgICAgICAgICAgICAgICAgICBoaW0sIHRoYXQsIHdpdGhvdXQgb2ZmZW5zZSB0byBoaXMgZmVlbGluZ3MsIGhlIG1heSBlaXRoZXIgaGltc2VsZiBwYXNzIGp1ZGdtZW50CiAgICAgICAgICAgICAgICAgICAgb24gaGltIFs8bmFtZT5EdW1ub3JpeDwvbmFtZT5dIGFmdGVyIHRyeWluZyB0aGUgY2FzZSwgb3IgZWxzZSBvcmRlciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgWzxuYW1lPkFlZHVhbjwvbmFtZT5dIHN0YXRlIHRvIGRvIHNvLiA8bWlsZXN0b25lIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxuYW1lPkRpdml0aWFjdXM8L25hbWU+LCBlbWJyYWNpbmcgPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYmVnaW5zIHRvCiAgICAgICAgICAgICAgICAgICAgaW1wbG9yZSBoaW0sIHdpdGggbWFueSB0ZWFycywgdGhhdCAiaGUgd291bGQgbm90IHBhc3MgYW55IHZlcnkgc2V2ZXJlIHNlbnRlbmNlCiAgICAgICAgICAgICAgICAgICAgdXBvbiBoaXMgYnJvdGhlcjsgc2F5aW5nLCB0aGF0IGhlIGtub3dzIHRoYXQgdGhvc2UgY2hhcmdlcyBhcmUgdHJ1ZSwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBub2JvZHkgc3VmZmVyZWQgbW9yZSBwYWluIG9uIHRoYXQgYWNjb3VudCB0aGFuIGhlIGhpbXNlbGYgZGlkOyBmb3Igd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgY291bGQgZWZmZWN0IGEgdmVyeSBncmVhdCBkZWFsIGJ5IGhpcyBpbmZsdWVuY2UgYXQgaG9tZSBhbmQgaW4gdGhlIHJlc3QKICAgICAgICAgICAgICAgICAgICBvZiA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgaGUgWzxuYW1lPkR1bW5vcml4PC9uYW1lPl0gdmVyeSBsaXR0bGUgb24gYWNjb3VudCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICB5b3V0aCwgdGhlIGxhdHRlciBoYWQgYmVjb21lIHBvd2VyZnVsIHRocm91Z2ggaGlzIG1lYW5zLCB3aGljaCBwb3dlciBhbmQKICAgICAgICAgICAgICAgICAgICBzdHJlbmd0aCBoZSB1c2VkIG5vdCBvbmx5IHRvIHRoZSBsZXNzZW5pbmcgb2YgaGlzIFs8bmFtZT5EaXZpdGlhY3VzPC9uYW1lPl0KICAgICAgICAgICAgICAgICAgICBwb3B1bGFyaXR5LCBidXQgYWxtb3N0IHRvIGhpcyBydWluOyB0aGF0IGhlLCBob3dldmVyLCB3YXMgaW5mbHVlbmNlZCBib3RoIGJ5CiAgICAgICAgICAgICAgICAgICAgZnJhdGVybmFsIGFmZmVjdGlvbiBhbmQgYnkgcHVibGljIG9waW5pb24uIEJ1dCBpZiBhbnkgdGhpbmcgdmVyeSBzZXZlcmUgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHNob3VsZCBiZWZhbGwgaGltIFs8bmFtZT5EdW1ub3JpeDwvbmFtZT5dLAogICAgICAgICAgICAgICAgICAgIG5vIG9uZSB3b3VsZCB0aGluayB0aGF0IGl0IGhhZCBiZWVuIGRvbmUgd2l0aG91dCBoaXMgY29uc2VudCwgc2luY2UgaGUgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGhlbGQgc3VjaCBhIHBsYWNlIGluIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBmcmllbmRzaGlwOiBmcm9tIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlIGl0IHdvdWxkIGFyaXNlLCB0aGF0IHRoZSBhZmZlY3Rpb25zIG9mIHRoZSB3aG9sZSBvZiA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IHdvdWxkIGJlIGVzdHJhbmdlZCBmcm9tIGhpbS4iIEFzIGhlIHdhcyB3aXRoIHRlYXJzIGJlZ2dpbmcKICAgICAgICAgICAgICAgICAgICB0aGVzZSB0aGluZ3Mgb2YgPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBpbiBtYW55IHdvcmRzLCA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRha2VzIGhpcyByaWdodCBoYW5kLCBhbmQsIGNvbWZvcnRpbmcgaGltLCBiZWdzIGhpbSB0byBtYWtlCiAgICAgICAgICAgICAgICAgICAgYW4gZW5kIG9mIGVudHJlYXRpbmcsIGFuZCBhc3N1cmVzIGhpbSB0aGF0IGhpcyByZWdhcmQgZm9yIGhpbSBpcyBzbyBncmVhdCwgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGZvcmdpdmVzIGJvdGggdGhlIGluanVyaWVzIG9mIHRoZSByZXB1YmxpYyBhbmQgaGlzIHByaXZhdGUgd3JvbmdzLCBhdCBoaXMKICAgICAgICAgICAgICAgICAgICBkZXNpcmUgYW5kIHByYXllcnMuIEhlIHN1bW1vbnMgPG5hbWU+RHVtbm9yaXg8L25hbWU+IHRvIGhpbTsgaGUgYnJpbmdzIGluIGhpcwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXI7IGhlIHBvaW50cyBvdXQgd2hhdCBoZSBjZW5zdXJlcyBpbiBoaW07IGhlIGxheXMgYmVmb3JlIGhpbSB3aGF0IGhlIG9mCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBwZXJjZWl2ZXMsIGFuZCB3aGF0IHRoZSBzdGF0ZSBjb21wbGFpbnMgb2Y7IGhlIHdhcm5zIGhpbSBmb3IgdGhlIGZ1dHVyZQogICAgICAgICAgICAgICAgICAgIHRvIGF2b2lkIGFsbCBncm91bmRzIG9mIHN1c3BpY2lvbjsgaGUgc2F5cyB0aGF0IGhlIHBhcmRvbnMgdGhlIHBhc3QsIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBzYWtlIG9mIGhpcyBicm90aGVyLCA8bmFtZT5EaXZpdGlhY3VzPC9uYW1lPi4gSGUgc2V0cyBzcGllcyBvdmVyCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkR1bW5vcml4PC9uYW1lPiB0aGF0IGhlIG1heSBiZSBhYmxlIHRvIGtub3cgd2hhdCBoZSBkb2VzLCBhbmQgd2l0aAogICAgICAgICAgICAgICAgICAgIHdob20gaGUgY29tbXVuaWNhdGVzLiA8bWlsZXN0b25lIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPkJlaW5nIG9uIHRoZSBzYW1lIGRheSBpbmZvcm1lZCBieSBoaXMgc2NvdXRzLCB0aGF0IHRoZSBlbmVteSBoYWQgZW5jYW1wZWQgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9vdCBvZiBhIG1vdW50YWluIGVpZ2h0IG1pbGVzIGZyb20gaGlzIG93biBjYW1wOyBoZSBzZW50IHBlcnNvbnMgdG8gYXNjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGUgbmF0dXJlIG9mIHRoZSBtb3VudGFpbiB3YXMsIGFuZCBvZiB3aGF0IGtpbmQgdGhlIGFzY2VudCBvbiBldmVyeSBzaWRlLgogICAgICAgICAgICAgICAgICAgIFdvcmQgd2FzIGJyb3VnaHQgYmFjaywgdGhhdCBpdCB3YXMgZWFzeS4gRHVyaW5nIHRoZSB0aGlyZCB3YXRjaCBoZSBvcmRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+VGl0dXMgTGFiaWVudXM8L25hbWU+LCBoaXMgbGlldXRlbmFudCB3aXRoIHByYWV0b3JpYW4gcG93ZXJzLCB0bwogICAgICAgICAgICAgICAgICAgIGFzY2VuZCB0byB0aGUgaGlnaGVzdCByaWRnZSBvZiB0aGUgbW91bnRhaW4gd2l0aCB0d28gbGVnaW9ucywgYW5kIHdpdGggdGhvc2UgYXMKICAgICAgICAgICAgICAgICAgICBndWlkZXMgd2hvIGhhZCBleGFtaW5lZCB0aGUgcm9hZDsgaGUgZXhwbGFpbnMgd2hhdCBoaXMgcGxhbiBpcy4gSGUgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGR1cmluZyB0aGUgZm91cnRoIHdhdGNoLCBoYXN0ZW5zIHRvIHRoZW0gYnkgdGhlIHNhbWUgcm91dGUgYnkgd2hpY2ggdGhlIGVuZW15CiAgICAgICAgICAgICAgICAgICAgaGFkIGdvbmUsIGFuZCBzZW5kcyBvbiBhbGwgdGhlIGNhdmFscnkgYmVmb3JlIGhpbS4gPG5hbWU+UHVibGl1cwogICAgICAgICAgICAgICAgICAgICAgICBDb25zaWRpdXM8L25hbWU+LCB3aG8gd2FzIHJlcHV0ZWQgdG8gYmUgdmVyeSBleHBlcmllbmNlZCBpbiBtaWxpdGFyeQogICAgICAgICAgICAgICAgICAgIGFmZmFpcnMsIGFuZCBoYWQgYmVlbiBpbiB0aGUgYXJteSBvZiA8bmFtZT5MdWNpdXMgU3VsbGE8L25hbWU+LCBhbmQgYWZ0ZXJ3YXJkIGluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBvZiA8bmFtZT5NYXJjdXMgQ3Jhc3N1czwvbmFtZT4sIGlzIHNlbnQgZm9yd2FyZCB3aXRoIHRoZSBzY291dHMuIDxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+QXQgZGF5LWJyZWFrLCB3aGVuIHRoZSBzdW1taXQgb2YgdGhlIG1vdW50YWluIHdhcyBpbiB0aGUgcG9zc2Vzc2lvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5UaXR1cyBMYWJpZW51czwvbmFtZT4sIGFuZCBoZSBoaW1zZWxmIHdhcyBub3QgZnVydGhlciBvZmYgdGhhbiBhIG1pbGUKICAgICAgICAgICAgICAgICAgICBhbmQgaGFsZiBmcm9tIHRoZSBlbmVteSdzIGNhbXAsIG5vciwgYXMgaGUgYWZ0ZXJ3YXJkIGFzY2VydGFpbmVkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgY2FwdGl2ZXMsIGhhZCBlaXRoZXIgaGlzIGFycml2YWwgb3IgdGhhdCBvZiA8bmFtZT5MYWJpZW51czwvbmFtZT4gYmVlbgogICAgICAgICAgICAgICAgICAgIGRpc2NvdmVyZWQ7IDxuYW1lPkNvbnNpZGl1czwvbmFtZT4sIHdpdGggaGlzIGhvcnNlIGF0IGZ1bGwgZ2FsbG9wLCBjb21lcyB1cCB0bwogICAgICAgICAgICAgICAgICAgIGhpbSBzYXlzIHRoYXQgdGhlIG1vdW50YWluIHdoaWNoIGhlIFs8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+XSB3aXNoZWQKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgc2VpemVkIGJ5IDxuYW1lPkxhYmllbnVzPC9uYW1lPiwgaXMgaW4gcG9zc2Vzc2lvbiBvZiB0aGUgZW5lbXk7IHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBoYXMgZGlzY292ZXJlZCB0aGlzIGJ5IHRoZSA8bmFtZT5HYWxsaWM8L25hbWU+IGFybXMgYW5kIGVuc2lnbnMuIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGVhZHMgb2ZmIGhpcyBmb3JjZXMgdG8gdGhlIG5leHQgaGlsbDogW2FuZF0gZHJhd3MKICAgICAgICAgICAgICAgICAgICB0aGVtIHVwIGluIGJhdHRsZS1vcmRlci4gPG5hbWU+TGFiaWVudXM8L25hbWU+LCBhcyBoZSBoYWQgYmVlbiBvcmRlcmVkIGJ5IDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbm90IHRvIGNvbWUgdG8gYW4gZW5nYWdlbWVudCB1bmxlc3MKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+W0NhZXNhcjwvbmFtZT4nc10gb3duIGZvcmNlcyB3ZXJlIHNlZW4gbmVhciB0aGUgZW5lbXkncyBjYW1wLCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGF0dGFjayB1cG9uIHRoZSBlbmVteSBtaWdodCBiZSBtYWRlIG9uIGV2ZXJ5IHNpZGUgYXQgdGhlIHNhbWUgdGltZSwgd2FzLCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGhhdmluZyB0YWtlbiBwb3NzZXNzaW9uIG9mIHRoZSBtb3VudGFpbiwgd2FpdGluZyBmb3Igb3VyIG1lbiwgYW5kIHJlZnJhaW5pbmcKICAgICAgICAgICAgICAgICAgICBmcm9tIGJhdHRsZS4gV2hlbiwgYXQgbGVuZ3RoLCB0aGUgZGF5IHdhcyBmYXIgYWR2YW5jZWQsIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGVhcm5lZCB0aHJvdWdoIHNwaWVzLCB0aGF0IHRoZSBtb3VudGFpbiB3YXMgaW4gcG9zc2Vzc2lvbiBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gbWVuLCBhbmQgdGhhdCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gaGFkIG1vdmVkIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY2FtcCwgYW5kIHRoYXQgPG5hbWU+Q29uc2lkaXVzPC9uYW1lPiwgc3RydWNrIHdpdGggZmVhciwgaGFkIHJlcG9ydGVkIHRvIGhpbSwgYXMKICAgICAgICAgICAgICAgICAgICBzZWVuLCB0aGF0IHdoaWNoIGhlIGhhZCBub3Qgc2Vlbi4gT24gdGhhdCBkYXkgaGUgZm9sbG93cyB0aGUgZW5lbXkgYXQgaGlzIHVzdWFsCiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UsIGFuZCBwaXRjaGVzIGhpcyBjYW1wIHRocmVlIG1pbGVzIGZyb20gdGhlaXJzLiA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPlRoZSBuZXh0IGRheSAoYXMgdGhlcmUgcmVtYWluZWQgaW4gYWxsIG9ubHkgdHdvIGRheSdzIHNwYWNlIFt0byB0aGUgdGltZV0gd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIG11c3Qgc2VydmUgb3V0IHRoZSBjb3JuIHRvIGhpcyBhcm15LCBhbmQgYXMgaGUgd2FzIG5vdCBtb3JlIHRoYW4gZWlnaHRlZW4gbWlsZXMKICAgICAgICAgICAgICAgICAgICBmcm9tIDxuYW1lIGtleT0idGduLDYwMDA3OTgiIHJlZz0iICArTW9udCBCZXV2cmF5IChpbmhhYml0ZWQgcGxhY2UpLCBTYW9uZS1ldC1Mb2lyZSwgQnVyZ3VuZHksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMDc5OCIga2V5PSJ0Z24sNjAwMDc5OCI+QmlicmFjdGU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBieSBmYXIgdGhlIGxhcmdlc3QgYW5kIGJlc3Qtc3RvcmVkIHRvd24gb2YgdGhlIDxuYW1lPkFlZHVpPC9uYW1lPiksIGhlCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGF0IGhlIG91Z2h0IHRvIHByb3ZpZGUgZm9yIGEgc3VwcGx5IG9mIGNvcm47IGFuZCBkaXZlcnRlZCBoaXMgbWFyY2gKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgYW5kIGFkdmFuY2VkIHJhcGlkbHkgdG8gPG5hbWUga2V5PSJ0Z24sNjAwMDc5OCIgcmVnPSIgICtNb250IEJldXZyYXkgKGluaGFiaXRlZCBwbGFjZSksIFNhb25lLWV0LUxvaXJlLCBCdXJndW5keSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDAwNzk4IiBrZXk9InRnbiw2MDAwNzk4Ij5CaWJyYWN0ZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4uIFRoaXMgY2lyY3Vtc3RhbmNlIGlzIHJlcG9ydGVkIHRvIHRoZSBlbmVteSBieSBzb21lIGRlc2VydGVycyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkx1Y2l1cyBBZW1pbGl1czwvbmFtZT4sIGEgY2FwdGFpbiwgb2YgdGhlIDxuYW1lPkdhbGxpYzwvbmFtZT4gaG9yc2UuCiAgICAgICAgICAgICAgICAgICAgVGhlIDxuYW1lPkhlbHZldGlpPC9uYW1lPiwgZWl0aGVyIGJlY2F1c2UgdGhleSB0aG91Z2h0IHRoYXQgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgc3RydWNrIHdpdGggdGVycm9yLCB3ZXJlIHJldHJlYXRpbmcgZnJvbSB0aGVtLAogICAgICAgICAgICAgICAgICAgIHRoZSBtb3JlIHNvLCBhcyB0aGUgZGF5IGJlZm9yZSwgdGhvdWdoIHRoZXkgaGFkIHNlaXplZCBvbiB0aGUgaGlnaGVyIGdyb3VuZHMsCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgbm90IGpvaW5lZCBiYXR0bGUgb3IgYmVjYXVzZSB0aGV5IGZsYXR0ZXJlZCB0aGVtc2VsdmVzIHRoYXQgdGhleSBtaWdodAogICAgICAgICAgICAgICAgICAgIGJlIGN1dCBvZiBmcm9tIHRoZSBwcm92aXNpb25zLCBhbHRlcmluZyB0aGVpciBwbGFuIGFuZCBjaGFuZ2luZyB0aGVpciByb3V0ZSwKICAgICAgICAgICAgICAgICAgICBiZWdhbiB0byBwdXJzdWUsIGFuZCB0byBhbm5veSBvdXIgbWVuIGluIHRoZSByZWFyLiA8bWlsZXN0b25lIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHdoZW4gaGUgb2JzZXJ2ZXMgdGhpcywgZHJhd3Mgb2ZmIGhpcyBmb3JjZXMgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgbmV4dCBoaWxsLCBhbmQgc2VudCB0aGUgY2F2YWxyeSB0byBzdXN0YWluIHRoZSBhdHRhY2sgb2YgdGhlIGVuZW15LiBIZQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYsIG1lYW53aGlsZSwgZHJldyB1cCBvbiB0aGUgbWlkZGxlIG9mIHRoZSBoaWxsIGEgdHJpcGxlIGxpbmUgb2YgaGlzIGZvdXIKICAgICAgICAgICAgICAgICAgICB2ZXRlcmFuIGxlZ2lvbnMgaW4gc3VjaCBhIG1hbm5lciwgdGhhdCBoZSBwbGFjZWQgYWJvdmUgaGltIG9uIHRoZSB2ZXJ5IHN1bW1pdAogICAgICAgICAgICAgICAgICAgIHRoZSB0d28gbGVnaW9ucywgd2hpY2ggaGUgaGFkIGxhdGVseSBsZXZpZWQgaW4gSGl0aGVyIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGFuZCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgYXV4aWxpYXJpZXM7IGFuZCBoZSBvcmRlcmVkIHRoYXQgdGhlIHdob2xlIG1vdW50YWluIHNob3VsZCBiZSBjb3ZlcmVkIHdpdGggbWVuLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IG1lYW53aGlsZSB0aGUgYmFnZ2FnZSBzaG91bGQgYmUgYnJvdWdodCB0b2dldGhlciBpbnRvIG9uZSBwbGFjZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIHBvc2l0aW9uIGJlIHByb3RlY3RlZCBieSB0aG9zZSB3aG8gd2VyZSBwb3N0ZWQgaW4gdGhlIHVwcGVyIGxpbmUuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5IZWx2ZXRpaTwvbmFtZT4gaGF2aW5nIGZvbGxvd2VkIHdpdGggYWxsIHRoZWlyIHdhZ29ucywgY29sbGVjdGVkIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgYmFnZ2FnZSBpbnRvIG9uZSBwbGFjZTogdGhleSB0aGVtc2VsdmVzLCBhZnRlciBoYXZpbmcgcmVwdWxzZWQgb3VyIGNhdmFscnkgYW5kCiAgICAgICAgICAgICAgICAgICAgZm9ybWVkIGEgcGhhbGFueCwgYWR2YW5jZWQgdXAgdG8gb3VyIGZyb250IGxpbmUgaW4gdmVyeSBjbG9zZSBvcmRlci4gPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8cD48bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgcmVtb3ZlZCBvdXQgb2Ygc2lnaHQgZmlyc3QgaGlzIG93biBob3JzZSwKICAgICAgICAgICAgICAgICAgICB0aGVuIHRob3NlIG9mIGFsbCwgdGhhdCBoZSBtaWdodCBtYWtlIHRoZSBkYW5nZXIgb2YgYTExIGVxdWFsLCBhbmQgZG8gYXdheSB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlIGhvcGUgb2YgZmxpZ2h0LCBhZnRlciBlbmNvdXJhZ2luZyBoaXMgbWVuLCBqb2luZWQgYmF0dGxlLiBIaXMgc29sZGllcnMKICAgICAgICAgICAgICAgICAgICBodXJsaW5nIHRoZWlyIGphdmVsaW5zIGZyb20gdGhlIGhpZ2hlciBncm91bmQsIGVhc2lseSBicm9rZSB0aGUgZW5lbXkncyBwaGFsYW54LgogICAgICAgICAgICAgICAgICAgIFRoYXQgYmVpbmcgZGlzcGVyc2VkLCB0aGV5IG1hZGUgYSBjaGFyZ2Ugb24gdGhlbSB3aXRoIGRyYXduIHN3b3Jkcy4gSXQgd2FzIGEKICAgICAgICAgICAgICAgICAgICBncmVhdCBoaW5kZXJhbmNlIHRvIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBpbiBmaWdodGluZywgdGhhdCwgd2hlbgogICAgICAgICAgICAgICAgICAgIHNldmVyYWwgb2YgdGhlaXIgYnVja2xlcnMgaGFkIGJlZW4gYnkgb25lIHN0cm9rZSBvZiB0aGUgKDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+KSBqYXZlbGlucyBwaWVyY2VkIHRocm91Z2ggYW5kIHBpbm5lZCBmYXN0IHRvZ2V0aGVyLCBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBwb2ludCBvZiB0aGUgaXJvbiBoYWQgYmVudCBpdHNlbGYsIHRoZXkgY291bGQgbmVpdGhlciBwbHVjayBpdCBvdXQsIG5vciwgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGxlZnQgaGFuZCBlbnRhbmdsZWQsIGZpZ2h0IHdpdGggc3VmZmljaWVudCBlYXNlOyBzbyB0aGF0IG1hbnksIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGxvbmcgdG9zc2VkIHRoZWlyIGFybSBhYm91dCwgY2hvc2UgcmF0aGVyIHRvIGNhc3QgYXdheSB0aGUgYnVja2xlciBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaGFuZCwgYW5kIHRvIGZpZ2h0IHdpdGggdGhlaXIgcGVyc29uIHVucHJvdGVjdGVkLiBBdCBsZW5ndGgsIHdvcm4gb3V0IHdpdGgKICAgICAgICAgICAgICAgICAgICB3b3VuZHMsIHRoZXkgYmVnYW4gdG8gZ2l2ZSB3YXksIGFuZCwgYXMgdGhlcmUgd2FzIGluIHRoZSBuZWlnaGJvcmhvb2QgYSBtb3VudGFpbgogICAgICAgICAgICAgICAgICAgIGFib3V0IGEgbWlsZSBvZmYsIHRvIGJldGFrZSB0aGVtc2VsdmVzIHRoaXRoZXIuIFdoZW4gdGhlIG1vdW50YWluIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgZ2FpbmVkLCBhbmQgb3VyIG1lbiB3ZXJlIGFkdmFuY2luZyB1cCwgdGhlIDxuYW1lPkJvaWk8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5UdWxpbmdpPC9uYW1lPiwgd2hvIHdpdGggYWJvdXQgMTUsMDAwIG1lbiBjbG9zZWQgdGhlIGVuZW15J3MgbGluZSBvZgogICAgICAgICAgICAgICAgICAgIG1hcmNoIGFuZCBzZXJ2ZWQgYXMgYSBndWFyZCB0byB0aGVpciByZWFyLCBoYXZpbmcgYXNzYWlsZWQgb3VyIG1lbiBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBleHBvc2VkIGZsYW5rIGFzIHRoZXkgYWR2YW5jZWQgW3ByZXBhcmVkXSB0byBzdXJyb3VuZCB0aGVtOyB1cG9uIHNlZWluZyB3aGljaCwKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gd2hvIGhhZCBiZXRha2VuIHRoZW1zZWx2ZXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbW91bnRhaW4sIGJlZ2FuIHRvIHByZXNzIG9uIGFnYWluIGFuZCByZW5ldyB0aGUgYmF0dGxlLiBUaGUgPG5hbWU+Um9tYW5zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGhhdmluZyBmYWNlZCBhYm91dCwgYWR2YW5jZWQgdG8gdGhlIGF0dGFjayBpbiB0d28gZGl2aXNpb25zOyB0aGUgZmlyc3QgYW5kCiAgICAgICAgICAgICAgICAgICAgc2Vjb25kIGxpbmUsIHRvIHdpdGhzdGFuZCB0aG9zZSB3aG8gaGFkIGJlZW4gZGVmZWF0ZWQgYW5kIGRyaXZlbiBvZmYgdGhlIGZpZWxkOwogICAgICAgICAgICAgICAgICAgIHRoZSB0aGlyZCB0byByZWNlaXZlIHRob3NlIHdobyB3ZXJlIGp1c3QgYXJyaXZpbmcuIDxtaWxlc3RvbmUgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+VGh1cywgd2FzIHRoZSBjb250ZXN0IGxvbmcgYW5kIHZpZ29yb3VzbHkgY2FycmllZCBvbiB3aXRoIGRvdWJ0ZnVsIHN1Y2Nlc3MuIFdoZW4KICAgICAgICAgICAgICAgICAgICB0aGV5IGNvdWxkIG5vIGxvbmdlciB3aXRoc3RhbmQgdGhlIGF0dGFja3Mgb2Ygb3VyIG1lbiwgdGhlIG9uZSBkaXZpc2lvbiwgYXMgdGhleQogICAgICAgICAgICAgICAgICAgIGhhZCBiZWd1biB0byBkbywgYmV0b29rIHRoZW1zZWx2ZXMgdG8gdGhlIG1vdW50YWluOyB0aGUgb3RoZXIgcmVwYWlyZWQgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBiYWdnYWdlIGFuZCB3YWdvbnMuIEZvciBkdXJpbmcgdGhlIHdob2xlIG9mIHRoaXMgYmF0dGxlLCBhbHRob3VnaCB0aGUgZmlnaHQKICAgICAgICAgICAgICAgICAgICBsYXN0ZWQgZnJvbSB0aGUgc2V2ZW50aCBob3VyIFtpLmUuIDEyIChub29uKSAxIFAuIE0uXSB0byBldmVudGlkZSwgbm8gb25lIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgc2VlIGFuIGVuZW15IHdpdGggaGlzIGJhY2sgdHVybmVkLiBUaGUgZmlnaHQgd2FzIGNhcnJpZWQgb24gYWxzbyBhdCB0aGUgYmFnZ2FnZQogICAgICAgICAgICAgICAgICAgIHRpbGwgbGF0ZSBpbiB0aGUgbmlnaHQsIGZvciB0aGV5IGhhZCBzZXQgd2Fnb25zIGluIHRoZSB3YXkgYXMgYSByYW1wYXJ0LCBhbmQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBoaWdoZXIgZ3JvdW5kIGtlcHQgdGhyb3dpbmcgd2VhcG9ucyB1cG9uIG91ciBtZW4sIGFzIHRoZXkgY2FtZSBvbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgc29tZSBmcm9tIGJldHdlZW4gdGhlIHdhZ29ucyBhbmQgdGhlIHdoZWVscyBrZXB0IGRhcnRpbmcgdGhlaXIgbGFuY2VzIGFuZAogICAgICAgICAgICAgICAgICAgIGphdmVsaW5zIGZyb20gYmVuZWF0aCwgYW5kIHdvdW5kaW5nIG91ciBtZW4uIEFmdGVyIHRoZSBmaWdodCBoYWQgbGFzdGVkIHNvbWUKICAgICAgICAgICAgICAgICAgICB0aW1lLCBvdXIgbWVuIGdhaW5lZCBwb3NzZXNzaW9uIG9mIHRoZWlyIGJhZ2dhZ2UgYW5kIGNhbXAuIFRoZXJlIHRoZSBkYXVnaHRlcgogICAgICAgICAgICAgICAgICAgIGFuZCBvbmUgb2YgdGhlIHNvbnMgb2YgPG5hbWU+T3JnZXRvcml4PC9uYW1lPiB3YXMgdGFrZW4uIEFmdGVyIHRoZSBiYXR0bGUgYWJvdXQKICAgICAgICAgICAgICAgICAgICAxMzAsMDAwIG1lbiBbb2YgdGhlIGVuZW15XSByZW1haW5lZCBhbGl2ZSwgd2hvIG1hcmNoZWQgaW5jZXNzYW50bHkgZHVyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHdob2xlIG9mIHRoYXQgbmlnaHQ7IGFuZCBhZnRlciBhIG1hcmNoIGRpc2NvbnRpbnVlZCBmb3Igbm8gcGFydCBvZiB0aGUgbmlnaHQsCiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCBpbiB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGtleT0idGduLDcwMDgzNDMiIHJlZz0iICArTGFuZ3JlcyBbNS4zMzMsNDcuODgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgSGF1dGUtTWFybmUsIENoYW1wYWduZS1BcmRlbm5lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDgzNDMiIGtleT0idGduLDcwMDgzNDMiPkxpbmdvbmVzPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBvbiB0aGUgZm91cnRoIGRheSwgd2hpbGUgb3VyIG1lbiwgaGF2aW5nIHN0b3BwZWQgZm9yIHRocmVlIGRheXMsIGJvdGggb24KICAgICAgICAgICAgICAgICAgICBhY2NvdW50IG9mIHRoZSB3b3VuZHMgb2YgdGhlIHNvbGRpZXJzIGFuZCB0aGUgYnVyaWFsIG9mIHRoZSBzbGFpbiwgaGFkIG5vdCBiZWVuCiAgICAgICAgICAgICAgICAgICAgYWJsZSB0byBmb2xsb3cgdGhlbS4gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBzZW50IGxldHRlcnMgYW5kIG1lc3NlbmdlcnMKICAgICAgICAgICAgICAgICAgICB0byB0aGUgPG5hbWUga2V5PSJ0Z24sNzAwODM0MyIgcmVnPSIgICtMYW5ncmVzIFs1LjMzMyw0Ny44ODNdIChpbmhhYml0ZWQgcGxhY2UpLCBIYXV0ZS1NYXJuZSwgQ2hhbXBhZ25lLUFyZGVubmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODM0MyIga2V5PSJ0Z24sNzAwODM0MyI+TGluZ29uZXM8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+IFt3aXRoIG9yZGVyc10gdGhhdCB0aGV5IHNob3VsZCBub3QgYXNzaXN0IHRoZW0gd2l0aCBjb3JuIG9yIHdpdGggYW55CiAgICAgICAgICAgICAgICAgICAgdGhpbmcgZWxzZTsgZm9yIHRoYXQgaWYgdGhleSBzaG91bGQgYXNzaXN0IHRoZW0sIGhlIHdvdWxkIHJlZ2FyZCB0aGVtIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgbGlnaHQgYXMgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LiBBZnRlciB0aGUgdGhyZWUgZGF5cycKICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbCBoZSBiZWdhbiB0byBmb2xsb3cgdGhlbSBoaW1zZWxmIHdpdGggYWxsIGhpcyBmb3JjZXMuIDxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+VGhlIDxuYW1lPkhlbHZldGlpPC9uYW1lPiwgY29tcGVsbGVkIGJ5IHRoZSB3YW50IG9mIGV2ZXJ5IHRoaW5nLCBzZW50IGVtYmFzc2Fkb3JzCiAgICAgICAgICAgICAgICAgICAgdG8gaGltIGFib3V0IGEgc3VycmVuZGVyLiBXaGVuIHRoZXNlIGhhZCBtZXQgaGltIG9uIHRoZSB3YXkgYW5kIGhhZCB0aHJvd24KICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGF0IGhpcyBmZWV0LCBhbmQgc3BlYWtpbmcgaW4gc3VwcGxpYW50IHRvbmUgaGFkIHdpdGggdGVhcnMgc3VlZCBmb3IKICAgICAgICAgICAgICAgICAgICBwZWFjZSwgYW5kIFt3aGVuXSBoZSBoYWQgb3JkZXJlZCB0aGVtIHRvIGF3YWl0IGhpcyBhcnJpdmFsLCBpbiB0aGUgcGxhY2UsIHdoZXJlCiAgICAgICAgICAgICAgICAgICAgdGhleSB0aGVuIHdlcmUsIHRoZXkgb2JleWVkIGhpcyBjb21tYW5kcy4gV2hlbiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCBhdCB0aGF0IHBsYWNlLCBoZSBkZW1hbmRlZCBob3N0YWdlcywgdGhlaXIgYXJtcywgYW5kIHRoZSBzbGF2ZXMgd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIGRlc2VydGVkIHRvIHRoZW0uIFdoaWxlIHRob3NlIHRoaW5ncyBhcmUgYmVpbmcgc291Z2h0IGZvciBhbmQgZ290IHRvZ2V0aGVyLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIGEgbmlnaHQncyBpbnRlcnZhbCwgYWJvdXQgNjAwMCBtZW4gb2YgdGhhdCBjYW50b24gd2hpY2ggaXMgY2FsbGVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5WZXJiaWdlbmU8L25hbWU+LCB3aGV0aGVyIHRlcnJpZmllZCBieSBmZWFyLCBsZXN0IGFmdGVyIGRlbGl2ZXJpbmcgdXAKICAgICAgICAgICAgICAgICAgICB0aGVpciBhcm1zLCB0aGV5IHNob3VsZCBzdWZmZXIgcHVuaXNobWVudCwgb3IgZWxzZSBpbmR1Y2VkIGJ5IHRoZSBob3BlIG9mCiAgICAgICAgICAgICAgICAgICAgc2FmZXR5LCBiZWNhdXNlIHRoZXkgc3VwcG9zZWQgdGhhdCwgYW1pZCBzbyB2YXN0IGEgbXVsdGl0dWRlIG9mIHRob3NlIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBzdXJyZW5kZXJlZCB0aGVtc2VsdmVzLCB0aGVpciBmbGlnaHQgbWlnaHQgZWl0aGVyIGJlIGNvbmNlYWxlZCBvciBlbnRpcmVseQogICAgICAgICAgICAgICAgICAgIG92ZXJsb29rZWQsIGhhdmluZyBhdCBuaWdodC1mYWxsIGRlcGFydGVkIG91dCBvZiB0aGUgY2FtcCBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGhhc3RlbmVkIHRvIHRoZSA8bmFtZSBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gYW5kIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8cD5CdXQgd2hlbiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRpc2NvdmVyZWQgdGhpcywgaGUgY29tbWFuZGVkIHRob3NlCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCB3aG9zZSB0ZXJyaXRvcnkgdGhleSBoYWQgZ29uZSwgdG8gc2VlayB0aGVtIG91dCBhbmQgdG8gYnJpbmcgdGhlbSBiYWNrCiAgICAgICAgICAgICAgICAgICAgYWdhaW4sIGlmIHRoZXkgbWVhbnQgdG8gYmUgYWNxdWl0dGVkIGJlZm9yZSBoaW07IGFuZCBjb25zaWRlcmVkIHRoZW0sIHdoZW4KICAgICAgICAgICAgICAgICAgICBicm91Z2h0IGJhY2ssIGluIHRoZSBsaWdodCBvZiBlbmVtaWVzOyBoZSBhZG1pdHRlZCBhbGwgdGhlIHJlc3QgdG8gYSBzdXJyZW5kZXIsCiAgICAgICAgICAgICAgICAgICAgdXBvbiB0aGVpciBkZWxpdmVyaW5nIHVwIHRoZSBob3N0YWdlcywgYXJtcywgYW5kIGRlc2VydGVycy4gSGUgb3JkZXJlZCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIHRoZSA8bmFtZT5UdWxpbmdpPC9uYW1lPiwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5MYXRvYnJpZ2k8L25hbWU+LCB0byByZXR1cm4gdG8gdGhlaXIgdGVycml0b3JpZXMgZnJvbSB3aGljaCB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIGNvbWUsIGFuZCBhcyB0aGVyZSB3YXMgYXQgaG9tZSBub3RoaW5nIHdoZXJlYnkgdGhleSBtaWdodCBzdXBwb3J0IHRoZWlyIGh1bmdlciwKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIHByb2R1Y3Rpb25zIG9mIHRoZSBlYXJ0aCBoYXZpbmcgYmVlbiBkZXN0cm95ZWQsIGhlIGNvbW1hbmRlZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+QWxsb2Jyb2dlczwvbmFtZT4gdG8gbGV0IHRoZW0gaGF2ZSBhIHBsZW50aWZ1bCBzdXBwbHkgb2YgY29ybjsgYW5kCiAgICAgICAgICAgICAgICAgICAgb3JkZXJlZCB0aGVtIHRvIHJlYnVpbGQgdGhlIHRvd25zIGFuZCB2aWxsYWdlcyB3aGljaCB0aGV5IGhhZCBidXJuZWQuIFRoaXMgaGUKICAgICAgICAgICAgICAgICAgICBkaWQsIGNoaWVmbHksIG9uIHRoaXMgYWNjb3VudCwgYmVjYXVzZSBoZSB3YXMgdW53aWxsaW5nIHRoYXQgdGhlIGNvdW50cnksIGZyb20KICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gaGFkIGRlcGFydGVkLCBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICB1bnRlbmFudGVkLCBsZXN0IHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCB3aG8gZHdlbGwgb24gdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgc2lkZSBvZiB0aGUgPG5hbWUga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBzaG91bGQsIG9uIGFjY291bnQgb2YgdGhlIGV4Y2VsbGVuY2Ugb2YgdGhlIGxhbmRzLCBjcm9zcyBvdmVyIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGVpciBvd24gdGVycml0b3JpZXMgaW50byB0aG9zZSBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgIGJlY29tZSBib3JkZXJlcnMgdXBvbiB0aGUgcHJvdmluY2Ugb2YgPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFsbG9icm9nZXM8L25hbWU+LiBIZSBncmFudGVkIHRoZSBwZXRpdGlvbiBvZiB0aGUgPG5hbWU+QWVkdWk8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBtaWdodCBzZXR0bGUgdGhlIDxuYW1lPkJvaWk8L25hbWU+LCBpbiB0aGVpciBvd24gKGkuIGUuIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5BZWR1YW48L25hbWU+KSB0ZXJyaXRvcmllcywgYXMgdGhlc2Ugd2VyZSBrbm93biB0byBiZSBvZiBkaXN0aW5ndWlzaGVkCiAgICAgICAgICAgICAgICAgICAgdmFsb3IsIHRvIHdob20gdGhleSBnYXZlIGxhbmRzLCBhbmQgd2hvbSB0aGV5IGFmdGVyd2FyZCBhZG1pdHRlZCB0byB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHN0YXRlIG9mIHJpZ2h0cyBhbmQgZnJlZWRvbSBhcyB0aGVtc2VsdmVzLiA8bWlsZXN0b25lIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPkluIHRoZSBjYW1wIG9mIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgbGlzdHMgd2VyZSBmb3VuZCwgZHJhd24KICAgICAgICAgICAgICAgICAgICB1cCBpbiA8bmFtZSB0eXBlPSJwbGFjZSI+R3JlZWs8L25hbWU+IGNoYXJhY3RlcnMsIGFuZCB3ZXJlIGJyb3VnaHQgdG8gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaW4gd2hpY2ggYW4gZXN0aW1hdGUgaGFkIGJlZW4gZHJhd24gdXAsIG5hbWUgYnkKICAgICAgICAgICAgICAgICAgICBuYW1lLCBvZiB0aGUgbnVtYmVyIHdoaWNoIGhhZCBnb25lIGZvcnRoIGZyb20gdGhlaXIgY291bnRyeSBvZiB0aG9zZSB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIGFibGUgdG8gYmVhciBhcm1zOyBhbmQgbGlrZXdpc2UgdGhlIGJveXMsIHRoZSBvbGQgbWVuLCBhbmQgdGhlIHdvbWVuLAogICAgICAgICAgICAgICAgICAgIHNlcGFyYXRlbHkuIE9mIGFsbCB3aGljaCBpdGVtcyB0aGUgdG90YWwgd2FzOiA8bGlzdCB0eXBlPSJzaW1wbGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+T2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IFtsaXQuIG9mIHRoZSBoZWFkcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5IZWx2ZXRpaV08L25hbWU+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGl0ZW0+MjYzLDAwMDwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk9mIHRoZSA8bmFtZT5UdWxpbmdpPC9uYW1lPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpdGVtPjM2LDAwMDwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk9mIHRoZSA8bmFtZT5MYXRvYnJpZ2k8L25hbWU+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGl0ZW0+MTQsMDAwPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+T2YgdGhlIDxuYW1lPlJhdXJhY2k8L25hbWU+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGl0ZW0+MjMsMDAwPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+T2YgdGhlIDxuYW1lPkJvaWk8L25hbWU+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGl0ZW0+MzIsMDAwPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VGhlIHN1bSBvZiBhbGwgYW1vdW50ZWQgdG88L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aXRlbT4zNjgsMDAwPC9pdGVtPgogICAgICAgICAgICAgICAgICAgIDwvbGlzdD4gT3V0IG9mIHRoZXNlLCBzdWNoIGFzIGNvdWxkIGJlYXIgYXJtcywgW2Ftb3VudGVkXSB0byBhYm91dCA5MiwwMDAuIFdoZW4KICAgICAgICAgICAgICAgICAgICB0aGUgY2Vuc3VzIG9mIHRob3NlIHdobyByZXR1cm5lZCBob21lIHdhcyB0YWtlbiwgYXMgPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgY29tbWFuZGVkLCB0aGUgbnVtYmVyIHdhcyBmb3VuZCB0byBiZSAxMTAsMDAwLiA8bWlsZXN0b25lIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPldoZW4gdGhlIHdhciB3aXRoIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiB3YXMgY29uY2x1ZGVkLAogICAgICAgICAgICAgICAgICAgIGVtYmFzc2Fkb3JzIGZyb20gYWxtb3N0IGFsbCBwYXJ0cyBvZiA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB0aGUgY2hpZWZzIG9mIHN0YXRlcywKICAgICAgICAgICAgICAgICAgICBhc3NlbWJsZWQgdG8gY29uZ3JhdHVsYXRlIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIFtzYXlpbmddIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIHdlcmUgd2VsbCBhd2FyZSwgdGhhdCwgYWx0aG91Z2ggaGUgaGFkIHRha2VuIHZlbmdlYW5jZSBvbiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gaW4gd2FyLCBmb3IgdGhlIG9sZCB3cm9uZyBkb25lIGJ5IHRoZW0gdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgeWV0IHRoYXQgY2lyY3Vtc3RhbmNlIGhhZCBoYXBwZW5lZAogICAgICAgICAgICAgICAgICAgIG5vIGxlc3MgdG8gdGhlIGJlbmVmaXQgb2YgdGhlIGxhbmQgb2YgPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB0aGFuIG9mIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGJlY2F1c2UgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCB3aGlsZSB0aGVpciBhZmZhaXJzIHdlcmUgbW9zdCBmbG91cmlzaGluZywgaGFkIHF1aXR0ZWQKICAgICAgICAgICAgICAgICAgICB0aGVpciBjb3VudHJ5IHdpdGggdGhlIGRlc2lnbiBvZiBtYWtpbmcgd2FyIHVwb24gdGhlIHdob2xlIG9mIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGFuZCBzZWl6aW5nIHRoZSBnb3Zlcm5tZW50IG9mIGl0LCBhbmQgc2VsZWN0aW5nLCBvdXQgb2YgYQogICAgICAgICAgICAgICAgICAgIGdyZWF0IGFidW5kYW5jZSwgdGhhdCBzcG90IGZvciBhbiBhYm9kZSwgd2hpY2ggdGhleSBzaG91bGQganVkZ2UgdG8gYmUgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBjb252ZW5pZW50IGFuZCBtb3N0IHByb2R1Y3RpdmUgb2YgYWxsIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGFuZCBob2xkIHRoZSByZXN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHN0YXRlcyBhcyB0cmlidXRhcmllcy4gVGhleSByZXF1ZXN0ZWQgdGhhdCB0aGV5IG1pZ2h0IGJlIGFsbG93ZWQgdG8gcHJvY2xhaW0gYW4KICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSBvZiB0aGUgd2hvbGUgb2YgPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBmb3IgYSBwYXJ0aWN1bGFyIGRheSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gZG8gdGhhdCB3aXRoIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBwZXJtaXNzaW9uLCBbc3RhdGluZ10gdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIHNvbWUgdGhpbmdzIHdoaWNoLCB3aXRoIHRoZSBnZW5lcmFsIGNvbnNlbnQsIHRoZXkgd2lzaGVkIHRvIGFzayBvZiBoaW0uCiAgICAgICAgICAgICAgICAgICAgVGhpcyByZXF1ZXN0IGhhdmluZyBiZWVuIGdyYW50ZWQsIHRoZXkgYXBwb2ludGVkIGEgZGF5IGZvciB0aGUgYXNzZW1ibHksIGFuZAogICAgICAgICAgICAgICAgICAgIG9yZGFpbmVkIGJ5IGFuIG9hdGggd2l0aCBlYWNoIG90aGVyLCB0aGF0IG5vIG9uZSBzaG91bGQgZGlzY2xvc2UgW3RoZWlyCiAgICAgICAgICAgICAgICAgICAgZGVsaWJlcmF0aW9uc10gZXhjZXB0IHRob3NlIHRvIHdob20gdGhpcyBbb2ZmaWNlXSBzaG91bGQgYmUgYXNzaWduZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCBhc3NlbWJseS4gPG1pbGVzdG9uZSBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8cD5XaGVuIHRoYXQgYXNzZW1ibHkgd2FzIGRpc21pc3NlZCwgdGhlIHNhbWUgY2hpZWZzIG9mIHN0YXRlcywgd2hvIGhhZCBiZWZvcmUgYmVlbgogICAgICAgICAgICAgICAgICAgIHRvIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHJldHVybmVkLCBhbmQgYXNrZWQgdGhhdCB0aGV5IG1pZ2h0IGJlCiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZCB0byB0cmVhdCB3aXRoIGhpbSBwcml2YXRlbHkgKGluIHNlY3JldCkgY29uY2VybmluZyB0aGUgc2FmZXR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBhbmQgb2YgYWxsLiBUaGF0IHJlcXVlc3QgaGF2aW5nIGJlZW4gb2J0YWluZWQsIHRoZXkgYWxsIHRocmV3CiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBpbiB0ZWFycyBhdCA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgZmVldCwgW3NheWluZ10gdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgbm8gbGVzcyBiZWdnZWQgYW5kIGVhcm5lc3RseSBkZXNpcmVkIHRoYXQgd2hhdCB0aGV5IG1pZ2h0IHNheSBzaG91bGQgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2VkLCB0aGFuIHRoYXQgdGhleSBtaWdodCBvYnRhaW4gdGhvc2UgdGhpbmdzIHdoaWNoIHRoZXkgd2lzaGVkIGZvcjsKICAgICAgICAgICAgICAgICAgICBpbmFzbXVjaCBhcyB0aGV5IHNhdywgdGhhdCwgaWYgYSBkaXNjbG9zdXJlIHdhcyBtYWRlLCB0aGV5IHNob3VsZCBiZSBwdXQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlc3QgdG9ydHVyZXMuIEZvciB0aGVzZSA8bmFtZT5EaXZpdGlhY3VzPC9uYW1lPiB0aGUgPG5hbWU+QWVkdWFuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHNwb2tlIGFuZCB0b2xkIGhpbTogIlRoYXQgdGhlcmUgd2VyZSB0d28gcGFydGllcyBpbiB0aGUgd2hvbGUgb2YgPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPjogdGhhdCB0aGUgPG5hbWU+QWVkdWk8L25hbWU+IHN0b29kIGF0IHRoZSBoZWFkIG9mIG9uZSBvZiB0aGVzZSwKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWU+QXJ2ZXJuaTwvbmFtZT4gb2YgdGhlIG90aGVyLiBBZnRlciB0aGVzZSBoYWQgYmVlbiB2aW9sZW50bHkgc3RydWdnbGluZwogICAgICAgICAgICAgICAgICAgIHdpdGggb25lIGFub3RoZXIgZm9yIHRoZSBzdXBlcmlvcml0eSBmb3IgbWFueSB5ZWFycywgaXQgY2FtZSB0byBwYXNzIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gd2VyZSBjYWxsZWQgaW4gZm9yIGhpcmUgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFydmVybmk8L25hbWU+IGFuZCB0aGUgPG5hbWU+U2VxdWFuaTwvbmFtZT4uIFRoYXQgYWJvdXQgMTUsMDAwIG9mIHRoZW0KICAgICAgICAgICAgICAgICAgICBbaS5lLiBvZiB0aGUgPG5hbWU+R2VybWFuc108L25hbWU+IGhhZCBhdCBmaXJzdCBjcm9zc2VkIHRoZSA8bmFtZSBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT46IGJ1dCBhZnRlciB0aGF0IHRoZXNlIHdpbGQgYW5kIHNhdmFnZSBtZW4gaGFkIGJlY29tZSBlbmFtb3JlZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBsYW5kcyBhbmQgdGhlIHJlZmluZW1lbnQgYW5kIHRoZSBhYnVuZGFuY2Ugb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBtb3JlIHdlcmUgYnJvdWdodCBvdmVyLCB0aGF0IHRoZXJlIHdlcmUgbm93IGFzIG1hbnkgYXMKICAgICAgICAgICAgICAgICAgICAxMjAsMDAwIG9mIHRoZW0gaW4gPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPjogdGhhdCB3aXRoIHRoZXNlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5BZWR1aTwvbmFtZT4gYW5kIHRoZWlyIGRlcGVuZGVudHMgaGFkIHJlcGVhdGVkbHkgc3RydWdnbGVkIGluCiAgICAgICAgICAgICAgICAgICAgYXJtcy10aGF0IHRoZXkgaGFkIGJlZW4gcm91dGVkLCBhbmQgaGFkIHN1c3RhaW5lZCBhIGdyZWF0IGNhbGFtaXR5LWhhZCBsb3N0IGFsbAogICAgICAgICAgICAgICAgICAgIHRoZWlyIG5vYmlsaXR5LCBhbGwgdGhlaXIgc2VuYXRlLCBhbGwgdGhlaXIgY2F2YWxyeS4gQW5kIHRoYXQgYnJva2VuIGJ5IHN1Y2gKICAgICAgICAgICAgICAgICAgICBlbmdhZ2VtZW50cyBhbmQgY2FsYW1pdGllcywgYWx0aG91Z2ggdGhleSBoYWQgZm9ybWVybHkgYmVlbiB2ZXJ5IHBvd2VyZnVsIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGJvdGggZnJvbSB0aGVpciBvd24gdmFsb3IgYW5kIGZyb20gdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSdzIGhvc3BpdGFsaXR5IGFuZCBmcmllbmRzaGlwLCB0aGV5IHdlcmUgbm93IGNvbXBlbGxlZAogICAgICAgICAgICAgICAgICAgIHRvIGdpdmUgdGhlIGNoaWVmIG5vYmxlcyBvZiB0aGVpciBzdGF0ZSwgYXMgaG9zdGFnZXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgPG5hbWU+U2VxdWFuaTwvbmFtZT4sIGFuZCB0byBiaW5kIHRoZWlyIHN0YXRlIGJ5IGFuIG9hdGgsIHRoYXQgdGhleSB3b3VsZAogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgZGVtYW5kIGhvc3RhZ2VzIGluIHJldHVybiwgbm9yIHN1cHBsaWNhdGUgYWlkIGZyb20gdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgbm9yIHJlZnVzZSB0byBiZSBmb3JldmVyIHVuZGVyIHRoZWlyIHN3YXkKICAgICAgICAgICAgICAgICAgICBhbmQgZW1waXJlLiBUaGF0IGhlIHdhcyB0aGUgb25seSBvbmUgb3V0IG9mIGFsbCB0aGUgc3RhdGUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFlZHVpPC9uYW1lPiwgd2hvIGNvdWxkIG5vdCBiZSBwcmV2YWlsZWQgdXBvbiB0byB0YWtlIHRoZSBvYXRoIG9yIHRvCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBoaXMgY2hpbGRyZW4gYXMgaG9zdGFnZXMuIE9uIHRoYXQgYWNjb3VudCBoZSBoYWQgZmxlZCBmcm9tIGhpcyBzdGF0ZSBhbmQKICAgICAgICAgICAgICAgICAgICBoYWQgZ29uZSB0byB0aGUgc2VuYXRlIGF0IDxuYW1lIGtleT0icGVyc2V1cyxSb21lIiByZWc9IiAgK1JvbWUgWzEyLjQ4MzMsNDEuOV0gKFBlcnNldXMpICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiB0byBiZXNlZWNoIGFpZCwgYXMgaGUgYWxvbmUgd2FzIGJvdW5kIG5laXRoZXIgYnkgb2F0aCBub3IgaG9zdGFnZXMuIEJ1dAogICAgICAgICAgICAgICAgICAgIGEgd29yc2UgdGhpbmcgaGFkIGJlZmFsbGVuIHRoZSB2aWN0b3Jpb3VzIDxuYW1lPlNlcXVhbmk8L25hbWU+IHRoYW4gdGhlCiAgICAgICAgICAgICAgICAgICAgdmFucXVpc2hlZCA8bmFtZT5BZWR1aTwvbmFtZT4sIGZvciA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiB0aGUga2luZyBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgaGFkIHNldHRsZWQgaW4gdGhlaXIgdGVycml0b3JpZXMsIGFuZCBoYWQKICAgICAgICAgICAgICAgICAgICBzZWl6ZWQgdXBvbiBhIHRoaXJkIG9mIHRoZWlyIGxhbmQsIHdoaWNoIHdhcyB0aGUgYmVzdCBpbiB0aGUgd2hvbGUgb2YgPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgYW5kIHdhcyBub3cgb3JkZXJpbmcgdGhlbSB0byBkZXBhcnQgZnJvbSBhbm90aGVyIHRoaXJkIHBhcnQsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBhIGZldyBtb250aHMgcHJldmlvdXNseSAyNCwwMDAgbWVuIG9mIHRoZSA8bmFtZT5IYXJ1ZGVzPC9uYW1lPiBoYWQgY29tZQogICAgICAgICAgICAgICAgICAgIHRvIGhpbSwgZm9yIHdob20gcm9vbSBhbmQgc2V0dGxlbWVudHMgbXVzdCBiZSBwcm92aWRlZC4gVGhlIGNvbnNlcXVlbmNlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYmUsIHRoYXQgaW4gYSBmZXcgeWVhcnMgdGhleSB3b3VsZCBhbGwgYmUgZHJpdmVuIGZyb20gdGhlIHRlcnJpdG9yaWVzIG9mIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGFuZCBhbGwgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gd291bGQgY3Jvc3MgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPjsgZm9yIG5laXRoZXIgbXVzdCB0aGUgbGFuZCBvZiA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGJlIGNvbXBhcmVkIHdpdGggdGhlIGxhbmQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgbm9yIG11c3QgdGhlIGhhYml0IG9mIGxpdmluZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBsYXR0ZXIgYmUgcHV0IG9uIGEgbGV2ZWwgd2l0aCB0aGF0IG9mIHRoZSBmb3JtZXIuIE1vcmVvdmVyLCBbYXMgZm9yXQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiwgbm8gc29vbmVyIGRpZCBoZSBkZWZlYXQgdGhlIGZvcmNlcyBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gaW4gYSBiYXR0bGUgd2hpY2ggdG9vayBwbGFjZSBhdCA8bmFtZSB0eXBlPSJwbGFjZSI+TWFnZXRvYnJpYTwvbmFtZT4sIHRoYW4gW2hlIGJlZ2FuXSB0byBsb3JkIGl0IGhhdWdodGlseSBhbmQKICAgICAgICAgICAgICAgICAgICBjcnVlbGx5LCB0byBkZW1hbmQgYXMgaG9zdGFnZXMgdGhlIGNoaWxkcmVuIG9mIGFsbCB0aGUgcHJpbmNpcGFsIG5vYmxlcywgYW5kCiAgICAgICAgICAgICAgICAgICAgd3JlYWsgb24gdGhlbSBldmVyeSBraW5kIG9mIGNydWVsdHksIGlmIGV2ZXJ5IHRoaW5nIHdhcyBub3QgZG9uZSBhdCBoaXMgbm9kIG9yCiAgICAgICAgICAgICAgICAgICAgcGxlYXN1cmU7IHRoYXQgaGUgd2FzIGEgc2F2YWdlLCBwYXNzaW9uYXRlLCBhbmQgcmVja2xlc3MgbWFuLCBhbmQgdGhhdCBoaXMKICAgICAgICAgICAgICAgICAgICBjb21tYW5kcyBjb3VsZCBubyBsb25nZXIgYmUgYm9ybmUuIFVubGVzcyB0aGVyZSB3YXMgc29tZSBhaWQgaW4gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhbmQgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gbXVzdCBhbGwgZG8gdGhlIHNhbWUgdGhpbmcgdGhhdCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gaGF2ZSBkb25lLCBbdml6Ll0gZW1pZ3JhdGUgZnJvbSB0aGVpciBjb3VudHJ5LAogICAgICAgICAgICAgICAgICAgIGFuZCBzZWVrIGFub3RoZXIgZHdlbGxpbmcgcGxhY2UsIG90aGVyIHNldHRsZW1lbnRzIHJlbW90ZSBmcm9tIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCBhbmQgdHJ5IHdoYXRldmVyIGZvcnR1bmUgbWF5IGZhbGwgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBsb3QuIElmIHRoZXNlIHRoaW5ncyB3ZXJlIHRvIGJlIGRpc2Nsb3NlZCB0byA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+W0Rpdml0aWFjdXM8L25hbWU+IGFkZHNdIHRoYXQgaGUgZG91YnRzIG5vdCB0aGF0IGhlIHdvdWxkIGluZmxpY3QgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBzZXZlcmUgcHVuaXNobWVudCBvbiBhbGwgdGhlIGhvc3RhZ2VzIHdobyBhcmUgaW4gaGlzIHBvc3Nlc3Npb24sIFthbmQgc2F5c10KICAgICAgICAgICAgICAgICAgICB0aGF0IDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gY291bGQsIGVpdGhlciBieSBoaXMgb3duIGluZmx1ZW5jZSBhbmQgYnkKICAgICAgICAgICAgICAgICAgICB0aGF0IG9mIGhpcyBhcm15LCBvciBieSBoaXMgbGF0ZSB2aWN0b3J5LCBvciBieSBuYW1lIG9mIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGludGltaWRhdGUgaGltLCBzbyBhcyB0byBwcmV2ZW50IGEgZ3JlYXRlciBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBiZWluZyBicm91Z2h0IG92ZXIgdGhlIDxuYW1lIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYW5kIGNvdWxkIHByb3RlY3QgYWxsIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gZnJvbSB0aGUgb3V0cmFnZXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT4uIDxtaWxlc3RvbmUgbj0iMzIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+V2hlbiB0aGlzIHNwZWVjaCBoYWQgYmVlbiBkZWxpdmVyZWQgYnkgPG5hbWU+RGl2aXRpYWN1czwvbmFtZT4sIGFsbCB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgYmVnYW4gd2l0aCBsb3VkIGxhbWVudGF0aW9uIHRvIGVudHJlYXQgYXNzaXN0YW5jZSBvZiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG5vdGljZWQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+U2VxdWFuaTwvbmFtZT4gd2VyZSB0aGUgb25seSBwZW9wbGUgb2YgYWxsIHdobyBkaWQgbm9uZSBvZiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHRoaW5ncyB3aGljaCB0aGUgb3RoZXJzIGRpZCwgYnV0LCB3aXRoIHRoZWlyIGhlYWRzIGJvd2VkIGRvd24sIGdhemVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGVhcnRoIGluIHNhZG5lc3MuIFdvbmRlcmluZyB3aGF0IHdhcyB0aGUgcmVhc29uIG9mIHRoaXMgY29uZHVjdCwgaGUgaW5xdWlyZWQgb2YKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzLiBObyByZXBseSBkaWQgdGhlIDxuYW1lPlNlcXVhbmk8L25hbWU+IG1ha2UsIGJ1dCBzaWxlbnRseSBjb250aW51ZWQKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2FtZSBzYWRuZXNzLiBXaGVuIGhlIGhhZCByZXBlYXRlZGx5IGlucXVpcmVkIG9mIHRoZW0gYW5kIGNvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIGVsaWNpdCBhbnkgYW5zd2VyIGF0IGFsbCwgdGhlIHNhbWUgPG5hbWU+RGl2aXRpYWN1czwvbmFtZT4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFlZHVhbjwvbmFtZT4gYW5zd2VyZWQsIHRoYXQtInRoZSBsb3Qgb2YgdGhlIDxuYW1lPlNlcXVhbmk8L25hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgIG1vcmUgd3JldGNoZWQgYW5kIGdyaWV2b3VzIHRoYW4gdGhhdCBvZiB0aGUgcmVzdCwgb24gdGhpcyBhY2NvdW50LCBiZWNhdXNlIHRoZXkKICAgICAgICAgICAgICAgICAgICBhbG9uZSBkdXJzdCBub3QgZXZlbiBpbiBzZWNyZXQgY29tcGxhaW4gb3Igc3VwcGxpY2F0ZSBhaWQ7IGFuZCBzaHVkZGVyZWQgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgY3J1ZWx0eSBvZiA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiBbZXZlbiB3aGVuXSBhYnNlbnQsIGp1c3QgYXMgaWYgaGUgd2VyZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQ7IGZvciwgdG8gdGhlIHJlc3QsIGRlc3BpdGUgb2YgZXZlcnkgdGhpbmcgdGhlcmUgd2FzIGFuIG9wcG9ydHVuaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgZmxpZ2h0IGdpdmVuOyBidXQgYWxsIHRvcnR1cmVzIG11c3QgYmUgZW5kdXJlZCBieSB0aGUgPG5hbWU+U2VxdWFuaTwvbmFtZT4sIHdobwogICAgICAgICAgICAgICAgICAgIGhhZCBhZG1pdHRlZCA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiB3aXRoaW4gdGhlaXIgdGVycml0b3JpZXMsIGFuZCB3aG9zZSB0b3ducwogICAgICAgICAgICAgICAgICAgIHdlcmUgYWxsIGluIGhpcyBwb3dlci4iIDxtaWxlc3RvbmUgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+PG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb24gYmVpbmcgaW5mb3JtZWQgb2YgdGhlc2UgdGhpbmdzLCBjaGVlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIG1pbmRzIG9mIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB3aXRoIGhpcyB3b3JkcywgYW5kIHByb21pc2VkIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGlzIGFmZmFpciBzaG91bGQgYmUgYW4gb2JqZWN0IG9mIGhpcyBjb25jZXJuLCBbc2F5aW5nXSB0aGF0IGhlIGhhZCBncmVhdCBob3BlcwogICAgICAgICAgICAgICAgICAgIHRoYXQgPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT4sIGluZHVjZWQgYm90aCBieSBoaXMga2luZG5lc3MgYW5kIGhpcyBwb3dlciwgd291bGQKICAgICAgICAgICAgICAgICAgICBwdXQgYW4gZW5kIHRvIGhpcyBvcHByZXNzaW9uLiBBZnRlciBkZWxpdmVyaW5nIHRoaXMgc3BlZWNoLCBoZSBkaXNtaXNzZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibHk7IGFuZCwgYmVzaWRlcyB0aG9zZSBzdGF0ZW1lbnRzLCBtYW55IGNpcmN1bXN0YW5jZXMgaW5kdWNlZCBoaW0gdG8gdGhpbmsKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgYWZmYWlyIG91Z2h0IHRvIGJlIGNvbnNpZGVyZWQgYW5kIHRha2VuIHVwIGJ5IGhpbTsgZXNwZWNpYWxseSBhcyBoZQogICAgICAgICAgICAgICAgICAgIHNhdyB0aGF0IHRoZSA8bmFtZT5BZWR1aTwvbmFtZT4sIHN0eWxlZCBbYXMgdGhleSBoYWQgYmVlbl0gcmVwZWF0ZWRseSBieSB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUgImJyZXRocmVuIiBhbmQgImtpbnNtZW4sIiB3ZXJlIGhlbGQgaW4gdGhlIHRocmFsZG9tIGFuZCBkb21pbmlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgYW5kIHVuZGVyc3Rvb2QgdGhhdCB0aGVpciBob3N0YWdlcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgd2l0aCA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiBhbmQgdGhlIDxuYW1lPlNlcXVhbmk8L25hbWU+LCB3aGljaCBpbiBzbyBtaWdodHkgYW4KICAgICAgICAgICAgICAgICAgICBlbXBpcmUgW2FzIHRoYXRdIG9mIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgaGUgY29uc2lkZXJlZAogICAgICAgICAgICAgICAgICAgIHZlcnkgZGlzZ3JhY2VmdWwgdG8gaGltc2VsZiBhbmQgdGhlIHJlcHVibGljLiBUaGF0LCBtb3Jlb3ZlciwgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gc2hvdWxkIGJ5IGRlZ3JlZXMgYmVjb21lIGFjY3VzdG9tZWQgdG8gY3Jvc3MKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBhbmQgdGhhdCBhIGdyZWF0IGJvZHkgb2YgdGhlbSBzaG91bGQgY29tZSBpbnRvIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGhlIHNhdyBbd291bGQKICAgICAgICAgICAgICAgICAgICBiZV0gZGFuZ2Vyb3VzIHRvIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGFuZCBqdWRnZWQsIHRoYXQKICAgICAgICAgICAgICAgICAgICB3aWxkIGFuZCBzYXZhZ2UgbWVuIHdvdWxkIG5vdCBiZSBsaWtlbHkgdG8gcmVzdHJhaW4gdGhlbXNlbHZlcywgYWZ0ZXIgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzZWQgdGhlbXNlbHZlcyBvZiBhbGwgPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgZnJvbSBnb2luZyBmb3J0aCBpbnRvIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3ZpbmNlIGFuZCB0aGVuY2UgbWFyY2hpbmcgaW50byA8bmFtZSBrZXk9InRnbiwxMDAwMDgwIiByZWc9Ikl0YWx5IFsxMi44MzMsNDIuODMzXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+SXRhbHk8L25hbWU+IChhcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+Q2ltYnJpPC9uYW1lPiBhbmQgPG5hbWU+VGV1dG9uZXM8L25hbWU+IGhhZCBkb25lIGJlZm9yZSB0aGVtKSwKICAgICAgICAgICAgICAgICAgICBwYXJ0aWN1bGFybHkgYXMgdGhlIDxuYW1lIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDIzODkwIiBrZXk9InRnbiw3MDIzODkwIj5SaG9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gW3dhcyB0aGUgc29sZSBiYXJyaWVyIHRoYXRdIHNlcGFyYXRlZCB0aGUgPG5hbWU+U2VxdWFuaTwvbmFtZT4gZnJvbSBvdXIKICAgICAgICAgICAgICAgICAgICBwcm92aW5jZS4gQWdhaW5zdCB3aGljaCBldmVudHMgaGUgdGhvdWdodCBoZSBvdWdodCB0byBwcm92aWRlIGFzIHNwZWVkaWx5IGFzCiAgICAgICAgICAgICAgICAgICAgcG9zc2libGUuIE1vcmVvdmVyLCA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiwgZm9yIGhpcyBwYXJ0LCBoYWQgYXNzdW1lZCB0bwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgc3VjaCBwcmlkZSBhbmQgYXJyb2dhbmNlLCB0aGF0IGhlIHdhcyBmZWx0IHRvIGJlIHF1aXRlIGluc3VmZmVyYWJsZS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8cD5IZSB0aGVyZWZvcmUgZGV0ZXJtaW5lZCB0byBzZW5kIGVtYmFzc2Fkb3JzIHRvIDxuYW1lPkFyaW92aXN0dXM8L25hbWU+IHRvIGRlbWFuZAogICAgICAgICAgICAgICAgICAgIG9mIGhpbSB0byBuYW1lIHNvbWUgaW50ZXJtZWRpYXRlIHNwb3QgZm9yIGEgY29uZmVyZW5jZSBiZXR3ZWVuIHRoZSB0d28sIFtzYXlpbmddCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSB3aXNoZWQgdG8gdHJlYXQgaGltIG9uIHN0YXRlLWJ1c2luZXNzIGFuZCBtYXR0ZXJzIG9mIHRoZSBoaWdoZXN0CiAgICAgICAgICAgICAgICAgICAgaW1wb3J0YW5jZSB0byBib3RoIG9mIHRoZW0uIFRvIHRoaXMgZW1iYXNzeSA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiByZXBsaWVkLAogICAgICAgICAgICAgICAgICAgIHRoYXQgaWYgaGUgaGltc2VsZiBoYWQgaGFkIG5lZWQgb2YgYW55IHRoaW5nIGZyb20gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGUgd291bGQgaGF2ZSBnb25lIHRvIGhpbTsgYW5kIHRoYXQgaWYgPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3YW50ZWQgYW55IHRoaW5nIGZyb20gaGltIGhlIG91Z2h0IHRvIGNvbWUgdG8gaGltLiBUaGF0LAogICAgICAgICAgICAgICAgICAgIGJlc2lkZXMsIG5laXRoZXIgZGFyZSBoZSBnbyB3aXRob3V0IGFuIGFybXkgaW50byB0aG9zZSBwYXJ0cyBvZiA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IHdoaWNoIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIHBvc3Nlc3Npb24gb2YsIG5vcgogICAgICAgICAgICAgICAgICAgIGNvdWxkIGhlLCB3aXRob3V0IGdyZWF0IGV4cGVuc2UgYW5kIHRyb3VibGUsIGRyYXcgaGlzIGFybXkgdG9nZXRoZXIgdG8gb25lCiAgICAgICAgICAgICAgICAgICAgcGxhY2U7IHRoYXQgdG8gaGltLCBtb3Jlb3ZlciwgaXQgYXBwZWFyZWQgc3RyYW5nZSwgd2hhdCBidXNpbmVzcyBlaXRoZXIgPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBvciB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIGF0CiAgICAgICAgICAgICAgICAgICAgYWxsIGhhZCBpbiBoaXMgb3duIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHdoaWNoIGhlIGhhZCBjb25xdWVyZWQgaW4KICAgICAgICAgICAgICAgICAgICB3YXIuIDxtaWxlc3RvbmUgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+V2hlbiB0aGVzZSBhbnN3ZXJzIHdlcmUgcmVwb3J0ZWQgdG8gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGUgc2VuZHMKICAgICAgICAgICAgICAgICAgICBlbWJhc3NhZG9ycyB0byBoaW0gYSBzZWNvbmQgdGltZSB3aXRoIHRoaXMgbWVzc2FnZS4gIlNpbmNlLCBhZnRlciBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIHRyZWF0ZWQgd2l0aCBzbyBtdWNoIGtpbmRuZXNzIGJ5IGhpbXNlbGYgYW5kIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgKGFzIGhlIGhhZCBpbiBoaXMgY29uc3Vsc2hpcCBiZWVuIHN0eWxlZCAna2luZyBhbmQKICAgICAgICAgICAgICAgICAgICBmcmllbmQnIGJ5IHRoZSBzZW5hdGUgWzxkYXRlIGF1dGhuYW1lPSItNTkiIHZhbHVlPSItNTkiPjU5PC9kYXRlPiBCLkMuXSksIGhlIG1ha2VzIHRoaXMKICAgICAgICAgICAgICAgICAgICByZWNvbXBlbnNlIHRvIFs8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+XSBoaW1zZWxmIGFuZCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLCBbdml6Ll0gdGhhdCB3aGVuIGludml0ZWQgdG8gYSBjb25mZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgaGUgZGVtdXJzLCBhbmQgZG9lcyBub3QgdGhpbmsgdGhhdCBpdCBjb25jZXJucyBoaW0gdG8gYWR2aXNlIGFuZCBpbmZvcm0gaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGFib3V0IGFuIG9iamVjdCBvZiBtdXR1YWwgaW50ZXJlc3QsIHRoZXNlIGFyZSB0aGUgdGhpbmdzIHdoaWNoIGhlIHJlcXVpcmVzIG9mCiAgICAgICAgICAgICAgICAgICAgaGltOyBmaXJzdCwgdGhhdCBoZSBkbyBub3QgYW55IG1vcmUgYnJpbmcgb3ZlciBhbnkgYm9keSBvZiBtZW4gYWNyb3NzIHRoZSA8bmFtZSBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gaW50byA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+OyBpbiB0aGUgbmV4dCBwbGFjZSwgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHJlc3RvcmUgdGhlIGhvc3RhZ2VzLCB3aGljaCBoZSBoYXMgZnJvbSB0aGUgPG5hbWU+QWVkdWk8L25hbWU+LCBhbmQgZ3JhbnQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlNlcXVhbmk8L25hbWU+IHBlcm1pc3Npb24gdG8gcmVzdG9yZSB0byB0aGVtIHdpdGggaGlzIGNvbnNlbnQgdGhvc2UKICAgICAgICAgICAgICAgICAgICBob3N0YWdlcyB3aGljaCB0aGV5IGhhdmUsIGFuZCB0aGF0IGhlIG5laXRoZXIgcHJvdm9rZSB0aGUgPG5hbWU+QWVkdWk8L25hbWU+IGJ5CiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZSBub3IgbWFrZSB3YXIgdXBvbiB0aGVtIG9yIHRoZWlyIGFsbGllczsgaWYgaGUgd291bGQgYWNjb3JkaW5nbHkgZG8KICAgICAgICAgICAgICAgICAgICB0aGlzLCIgPG5hbWU+W0NhZXNhcjwvbmFtZT4gc2F5c10gdGhhdCAiaGUgaGltc2VsZiBhbmQgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSB3aWxsIGVudGVydGFpbiBhIHBlcnBldHVhbCBmZWVsaW5nIG9mIGZhdm9yIGFuZAogICAgICAgICAgICAgICAgICAgIGZyaWVuZHNoaXAgdG93YXJkIGhpbTsgYnV0IHRoYXQgaWYgaGUgWzxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT5dIGRvZXMgbm90CiAgICAgICAgICAgICAgICAgICAgb2J0YWluIFtoaXMgZGVzaXJlc10gdGhhdCBoZSAoZm9yYXNtdWNoIGFzIGluIHRoZSBjb25zdWxzaGlwIG9mIDxuYW1lPk1hcmN1cwogICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWxhPC9uYW1lPiBhbmQgPG5hbWU+TWFyY3VzIFBpc288L25hbWU+IFs8ZGF0ZSBhdXRobmFtZT0iLTYxIiB2YWx1ZT0iLTYxIj42MTwvZGF0ZT4KICAgICAgICAgICAgICAgICAgICBCLkMuXSB0aGUgc2VuYXRlIGhhZCBkZWNyZWVkIHRoYXQsIHdob2V2ZXIgc2hvdWxkIGhhdmUgdGhlIGFkbWluaXN0cmF0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3ZpbmNlIG9mIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gc2hvdWxkLCBhcyBmYXIgYXMgaGUgY291bGQKICAgICAgICAgICAgICAgICAgICBkbyBzbyBjb25zaXN0ZW50bHkgd2l0aCB0aGUgaW50ZXJlc3RzIG9mIHRoZSByZXB1YmxpYywgcHJvdGVjdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+QWVkdWk8L25hbWU+IGFuZCB0aGUgb3RoZXIgZnJpZW5kcyBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlKSwgd2lsbCBub3Qgb3Zlcmxvb2sgdGhlIHdyb25ncyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+QWVkdWk8L25hbWU+LiIgPG1pbGVzdG9uZSBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8cD5UbyB0aGlzIDxuYW1lPkFyaW92aXN0dXM8L25hbWU+IHJlcGxpZWQsIHRoYXQgInRoZSByaWdodCBvZiB3YXIgd2FzLCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICB3aG8gaGFkIGNvbnF1ZXJlZCBzaG91bGQgZ292ZXJuIHRob3NlIHdob20gdGhleSBoYWQgY29ucXVlcmVkLCBpbiB3aGF0IG1hbm5lcgogICAgICAgICAgICAgICAgICAgIHRoZXkgcGxlYXNlZDsgdGhhdCBpbiB0aGF0IHdheSB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIHdlcmUKICAgICAgICAgICAgICAgICAgICB3b250IHRvIGdvdmVybiB0aGUgbmF0aW9ucyB3aGljaCB0aGV5IGhhZCBjb25xdWVyZWQsIG5vdCBhY2NvcmRpbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZGljdGF0aW9uIG9mIGFueSBvdGhlciwgYnV0IGFjY29yZGluZyB0byB0aGVpciBvd24gZGlzY3JldGlvbi4gSWYgaGUgZm9yIGhpcwogICAgICAgICAgICAgICAgICAgIHBhcnQgZGlkIG5vdCBkaWN0YXRlIHRvIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgYXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbWFubmVyIGluIHdoaWNoIHRoZXkgd2VyZSB0byBleGVyY2lzZSB0aGVpciByaWdodCwgaGUgb3VnaHQgbm90IHRvIGJlIG9ic3RydWN0ZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIGluIGhpcyByaWdodDsgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+QWVkdWk8L25hbWU+LCBpbmFzbXVjaCBhcyB0aGV5IGhhZCB0cmllZCB0aGUgZm9ydHVuZSBvZiB3YXIgYW5kIGhhZAogICAgICAgICAgICAgICAgICAgIGVuZ2FnZWQgaW4gYXJtcyBhbmQgYmVlbiBjb25xdWVyZWQsIGhhZCBiZWNvbWUgdHJpYnV0YXJpZXMgdG8gaGltOyB0aGF0IDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FzIGRvaW5nIGEgZ3JlYXQgaW5qdXN0aWNlLCBpbiB0aGF0IGJ5IGhpcwogICAgICAgICAgICAgICAgICAgIGFycml2YWwgaGUgd2FzIG1ha2luZyBoaXMgcmV2ZW51ZXMgbGVzcyB2YWx1YWJsZSB0byBoaW07IHRoYXQgaGUgc2hvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIHJlc3RvcmUgdGhlaXIgaG9zdGFnZXMgdG8gdGhlIDxuYW1lPkFlZHVpPC9uYW1lPiwgYnV0IHNob3VsZCBub3QgbWFrZSB3YXIKICAgICAgICAgICAgICAgICAgICB3cm9uZ2Z1bGx5IGVpdGhlciB1cG9uIHRoZW0gb3IgdGhlaXIgYWxsaWVzLCBpZiB0aGV5IGFiaWRlZCBieSB0aGF0IHdoaWNoIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gYWdyZWVkIG9uLCBhbmQgcGFpZCB0aGVpciB0cmlidXRlIGFubnVhbGx5OiBpZiB0aGV5IGRpZCBub3QgY29udGludWUgdG8gZG8KICAgICAgICAgICAgICAgICAgICB0aGF0LCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlJ3MgbmFtZSBvZiAnYnJvdGhlcnMnIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYXZhaWwgdGhlbSBuYXVnaHQuIEFzIHRvIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyB0aHJlYXRlbmluZyBoaW0sIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSB3b3VsZCBub3Qgb3Zlcmxvb2sgdGhlIHdyb25ncyBvZiB0aGUgPG5hbWU+QWVkdWk8L25hbWU+LCBbaGUgc2FpZF0gdGhhdCBubwogICAgICAgICAgICAgICAgICAgIG9uZSBoYWQgZXZlciBlbnRlcmVkIGludG8gYSBjb250ZXN0IHdpdGggaGltIFs8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPl0gd2l0aG91dAogICAgICAgICAgICAgICAgICAgIHV0dGVyIHJ1aW4gdG8gaGltc2VsZi4gVGhhdCA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG1pZ2h0IGVudGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGxpc3RzIHdoZW4gaGUgY2hvc2U7IGhlIHdvdWxkIGZlZWwgd2hhdCB0aGUgaW52aW5jaWJsZSA8bmFtZSB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCB3ZWxsLXRyYWluZWQgW2FzIHRoZXkgd2VyZV0gYmV5b25kIGFsbCBvdGhlcnMgdG8gYXJtcywgd2hvCiAgICAgICAgICAgICAgICAgICAgZm9yIGZvdXJ0ZWVuIHllYXJzIGhhZCBub3QgYmVlbiBiZW5lYXRoIGEgcm9vZiwgY291bGQgYWNoaWV2ZSBieSB0aGVpciB2YWxvci4iCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMzciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+QXQgdGhlIHNhbWUgdGltZSB0aGF0IHRoaXMgbWVzc2FnZSB3YXMgZGVsaXZlcmVkIHRvIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGVtYmFzc2Fkb3JzIGNhbWUgZnJvbSB0aGUgPG5hbWU+QWVkdWk8L25hbWU+IGFuZCB0aGUgPG5hbWUga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDQ0NDciIGtleT0idGduLDcwMDQ0NDciPlRyZXZpcmk8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+OyBmcm9tIHRoZSA8bmFtZT5BZWR1aTwvbmFtZT4gdG8gY29tcGxhaW4gdGhhdCB0aGUgPG5hbWU+SGFydWRlczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgd2hvIGhhZCBsYXRlbHkgYmVlbiBicm91Z2h0IG92ZXIgaW50byA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB3ZXJlIHJhdmFnaW5nIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdGVycml0b3JpZXM7IHRoYXQgdGhleSBoYWQgbm90IGJlZW4gYWJsZSB0byBwdXJjaGFzZSBwZWFjZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFyaW92aXN0dXM8L25hbWU+LCBldmVuIGJ5IGdpdmluZyBob3N0YWdlczogYW5kIGZyb20gdGhlIDxuYW1lIGtleT0idGduLDcwMDQ0NDciIHJlZz0iICArVHJpZXIgWzYuNjUsNDkuNzVdIChpbmhhYml0ZWQgcGxhY2UpLCBUcmllciwgUmhlaW5sYW5kLVBmYWx6LCBHZXJtYW55LCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0NDQ3IiBrZXk9InRnbiw3MDA0NDQ3Ij5UcmV2aXJpPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgW3RvIHN0YXRlXSB0aGF0IGEgaHVuZHJlZCBjYW50b25zIG9mIHRoZSA8bmFtZT5TdWV2aTwvbmFtZT4gaGFkCiAgICAgICAgICAgICAgICAgICAgZW5jYW1wZWQgb24gdGhlIGJhbmtzIG9mIHRoZSA8bmFtZSBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGFuZCB3ZXJlIGF0dGVtcHRpbmcgdG8gY3Jvc3MgaXQ7IHRoYXQgdGhlIGJyb3RoZXJzLCA8bmFtZT5OYXN1YXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgYW5kIDxuYW1lPkNpbWJlcml1czwvbmFtZT4sIGhlYWRlZCB0aGVtLiBCZWluZyBncmVhdGx5IGFsYXJtZWQgYXQgdGhlc2UgdGhpbmdzLAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRob3VnaHQgdGhhdCBoZSBvdWdodCB0byB1c2UgYWxsIGRpc3BhdGNoLAogICAgICAgICAgICAgICAgICAgIGxlc3QsIGlmIHRoaXMgbmV3IGJhbmQgb2YgPG5hbWU+U3Vldmk8L25hbWU+IHNob3VsZCB1bml0ZSB3aXRoIHRoZSBvbGQgdHJvb3BzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFyaW92aXN0dXM8L25hbWU+LCBoZSBbPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT5dIG1pZ2h0IGJlIGxlc3MgZWFzaWx5CiAgICAgICAgICAgICAgICAgICAgd2l0aHN0b29kLiBIYXZpbmcgdGhlcmVmb3JlLCBhcyBxdWlja2x5IGFzIGhlIGNvdWxkLCBwcm92aWRlZCBhIHN1cHBseSBvZiBjb3JuLAogICAgICAgICAgICAgICAgICAgIGhlIGhhc3RlbmVkIHRvIDxuYW1lPkFyaW92aXN0dXM8L25hbWU+IGJ5IGZvcmNlZCBtYXJjaGVzLiA8bWlsZXN0b25lIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPldoZW4gaGUgaGFkIHByb2NlZWRlZCB0aHJlZSBkYXlzJyBqb3VybmV5LCB3b3JkIHdhcyBicm91Z2h0IHRvIGhpbSB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFyaW92aXN0dXM8L25hbWU+IHdhcyBoYXN0ZW5pbmcgd2l0aCBhbGwgaGlzIGZvcmNlcyB0byBzZWl6ZSBvbiA8bmFtZSBrZXk9InRnbiw3MDA4MzU2IiByZWc9IiAgK0Jlc2FuY29uIFs2LjMzLDQ3LjIzM10gKGluaGFiaXRlZCBwbGFjZSksIERvdWJzLCBGcmFuY2hlLUNvbXRlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDgzNTYiIGtleT0idGduLDcwMDgzNTYiPlZlc29udGlvPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgd2hpY2ggaXMgdGhlIGxhcmdlc3QgdG93biBvZiB0aGUgPG5hbWU+U2VxdWFuaTwvbmFtZT4sIGFuZCBoYWQgYWR2YW5jZWQKICAgICAgICAgICAgICAgICAgICB0aHJlZSBkYXlzJyBqb3VybmV5IGZyb20gaXRzIHRlcnJpdG9yaWVzLiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGF0IGhlIG91Z2h0IHRvIHRha2UgdGhlIGdyZWF0ZXN0IHByZWNhdXRpb25zIGxlc3QgdGhpcyBzaG91bGQgaGFwcGVuLAogICAgICAgICAgICAgICAgICAgIGZvciB0aGVyZSB3YXMgaW4gdGhhdCB0b3duIGEgbW9zdCBhbXBsZSBzdXBwbHkgb2YgZXZlcnkgdGhpbmcgd2hpY2ggd2FzCiAgICAgICAgICAgICAgICAgICAgc2VydmljZWFibGUgZm9yIHdhcjsgYW5kIHNvIGZvcnRpZmllZCB3YXMgaXQgYnkgdGhlIG5hdHVyZSBvZiB0aGUgZ3JvdW5kLCBhcyB0bwogICAgICAgICAgICAgICAgICAgIGFmZm9yZCBhIGdyZWF0IGZhY2lsaXR5IGZvciBwcm90cmFjdGluZyB0aGUgd2FyLCBpbmFzbXVjaCBhcyB0aGUgcml2ZXIgPG5hbWUga2V5PSJ0Z24sNzAwMjkzMyIgcmVnPSIgICtEb3VicyBbNi4yNSw0Ny4xNjZdIChkZXBhcnRtZW50KSwgRnJhbmNoZS1Db210ZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyOTMzIiBrZXk9InRnbiw3MDAyOTMzIj5Eb3ViczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gYWxtb3N0IHN1cnJvdW5kcyB0aGUgd2hvbGUgdG93biwgYXMgdGhvdWdoIGl0IHdlcmUgdHJhY2VkIHJvdW5kIGl0IHdpdGgKICAgICAgICAgICAgICAgICAgICBhIHBhaXIgb2YgY29tcGFzc2VzLiBBIG1vdW50YWluIG9mIGdyZWF0IGhlaWdodCBzaHV0cyBpbiB0aGUgcmVtYWluaW5nIHNwYWNlLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGlzIG5vdCBtb3JlIHRoYW4gNjAwIGZlZXQsIHdoZXJlIHRoZSByaXZlciBsZWF2ZXMgYSBnYXAsIGluIHN1Y2ggYSBtYW5uZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSByb290cyBvZiB0aGF0IG1vdW50YWluIGV4dGVuZCB0byB0aGUgcml2ZXIncyBiYW5rIG9uIGVpdGhlciBzaWRlLiBBCiAgICAgICAgICAgICAgICAgICAgd2FsbCB0aHJvd24gYXJvdW5kIGl0IG1ha2VzIGEgY2l0YWRlbCBvZiB0aGlzIFttb3VudGFpbl0sIGFuZCBjb25uZWN0cyBpdCB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlIHRvd24uIEhpdGhlciA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhc3RlbnMgYnkgZm9yY2VkIG1hcmNoZXMgYnkKICAgICAgICAgICAgICAgICAgICBuaWdodCBhbmQgZGF5LCBhbmQsIGFmdGVyIGhhdmluZyBzZWl6ZWQgdGhlIHRvd24sIHN0YXRpb25zIGEgZ2Fycmlzb24gdGhlcmUuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+V2hpbGUgaGUgaXMgdGFycnlpbmcgYSBmZXcgZGF5cyBhdCA8bmFtZSBrZXk9InRnbiw3MDA4MzU2IiByZWc9IiAgK0Jlc2FuY29uIFs2LjMzLDQ3LjIzM10gKGluaGFiaXRlZCBwbGFjZSksIERvdWJzLCBGcmFuY2hlLUNvbXRlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDgzNTYiIGtleT0idGduLDcwMDgzNTYiPlZlc29udGlvPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgb24gYWNjb3VudCBvZiBjb3JuIGFuZCBwcm92aXNpb25zOyBmcm9tIHRoZSBpbnF1aXJpZXMgb2Ygb3VyIG1lbiBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgcmVwb3J0cyBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gYW5kIHRyYWRlcnMgKHdobyBhc3NlcnRlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gd2VyZSBtZW4gb2YgaHVnZSBzdGF0dXJlLCBvZgogICAgICAgICAgICAgICAgICAgIGluY3JlZGlibGUgdmFsb3IgYW5kIHByYWN0aWNlIGluIGFybXMtdGhhdCBvZnRlbnRpbWVzIHRoZXksIG9uIGVuY291bnRlcmluZwogICAgICAgICAgICAgICAgICAgIHRoZW0sIGNvdWxkIG5vdCBiZWFyIGV2ZW4gdGhlaXIgY291bnRlbmFuY2UsIGFuZCB0aGUgZmllcmNlbmVzcyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGV5ZXMpLXNvIGdyZWF0IGEgcGFuaWMgb24gYSBzdWRkZW4gc2VpemVkIHRoZSB3aG9sZSBhcm15LCBhcyB0byBkaXNjb21wb3NlIHRoZQogICAgICAgICAgICAgICAgICAgIG1pbmRzIGFuZCBzcGlyaXRzIG9mIGFsbCBpbiBubyBzbGlnaHQgZGVncmVlLiBUaGlzIGZpcnN0IGFyb3NlIGZyb20gdGhlIHRyaWJ1bmVzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHNvbGRpZXJzLCB0aGUgcHJlZmVjdHMgYW5kIHRoZSByZXN0LCB3aG8sIGhhdmluZyBmb2xsb3dlZCA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGZyb20gdGhlIGNpdHkgWzxuYW1lIGtleT0icGVyc2V1cyxSb21lIiByZWc9IiAgK1JvbWUgWzEyLjQ4MzMsNDEuOV0gKFBlcnNldXMpICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPl0gZnJvbSBtb3RpdmVzIG9mIGZyaWVuZHNoaXAsIGhhZCBubyBncmVhdCBleHBlcmllbmNlIGluIG1pbGl0YXJ5CiAgICAgICAgICAgICAgICAgICAgYWZmYWlycy4gQW5kIGFsbGVnaW5nLCBzb21lIG9mIHRoZW0gb25lIHJlYXNvbiwgc29tZSBhbm90aGVyLCB3aGljaCB0aGV5IHNhaWQKICAgICAgICAgICAgICAgICAgICBtYWRlIGl0IG5lY2Vzc2FyeSBmb3IgdGhlbSB0byBkZXBhcnQsIHRoZXkgcmVxdWVzdGVkIHRoYXQgYnkgaGlzIGNvbnNlbnQgdGhleQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IGJlIGFsbG93ZWQgdG8gd2l0aGRyYXc7IHNvbWUsIGluZmx1ZW5jZWQgYnkgc2hhbWUsIHN0YXllZCBiZWhpbmQgaW4gb3JkZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgbWlnaHQgYXZvaWQgdGhlIHN1c3BpY2lvbiBvZiBjb3dhcmRpY2UuIFRoZXNlIGNvdWxkIG5laXRoZXIgY29tcG9zZQogICAgICAgICAgICAgICAgICAgIHRoZWlyIGNvdW50ZW5hbmNlLCBub3IgZXZlbiBzb21ldGltZXMgY2hlY2sgdGhlaXIgdGVhcnM6IGJ1dCBoaWRkZW4gaW4gdGhlaXIKICAgICAgICAgICAgICAgICAgICB0ZW50cywgZWl0aGVyIGJld2FpbGVkIHRoZWlyIGZhdGUsIG9yIGRlcGxvcmVkIHdpdGggdGhlaXIgY29tcmFkZXMgdGhlIGdlbmVyYWwKICAgICAgICAgICAgICAgICAgICBkYW5nZXIuIFdpbGxzIHdlcmUgc2VhbGVkIHVuaXZlcnNhbGx5IHRocm91Z2hvdXQgdGhlIHdob2xlIGNhbXAuIEJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zIGFuZCBjb3dhcmRpY2Ugb2YgdGhlc2UgbWVuLCBldmVuIHRob3NlIHdobyBwb3NzZXNzZWQgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBleHBlcmllbmNlIGluIHRoZSBjYW1wLCBib3RoIHNvbGRpZXJzIGFuZCBjZW50dXJpb25zLCBhbmQgdGhvc2UgW3RoZSBkZWN1cmlvbnNdCiAgICAgICAgICAgICAgICAgICAgd2hvIHdlcmUgaW4gY29tbWFuZCBvZiB0aGUgY2F2YWxyeSwgd2VyZSBncmFkdWFsbHkgZGlzY29uY2VydGVkLiBTdWNoIG9mIHRoZW0gYXMKICAgICAgICAgICAgICAgICAgICB3aXNoZWQgdG8gYmUgY29uc2lkZXJlZCBsZXNzIGFsYXJtZWQsIHNhaWQgdGhhdCB0aGV5IGRpZCBub3QgZHJlYWQgdGhlIGVuZW15LAogICAgICAgICAgICAgICAgICAgIGJ1dCBmZWFyZWQgdGhlIG5hcnJvd25lc3Mgb2YgdGhlIHJvYWRzIGFuZCB0aGUgdmFzdG5lc3Mgb2YgdGhlIGZvcmVzdHMgd2hpY2ggbGF5CiAgICAgICAgICAgICAgICAgICAgYmV0d2VlbiB0aGVtIGFuZCA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiwgb3IgZWxzZSB0aGF0IHRoZSBzdXBwbGllcyBjb3VsZCBub3QgYmUKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHVwIHJlYWRpbHkgZW5vdWdoLiBTb21lIGV2ZW4gZGVjbGFyZWQgdG8gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgdGhhdCB3aGVuIGhlIGdhdmUgb3JkZXJzIGZvciB0aGUgY2FtcCB0byBiZSBtb3ZlZCBhbmQgdGhlIHRyb29wcwogICAgICAgICAgICAgICAgICAgIHRvIGFkdmFuY2UsIHRoZSBzb2xkaWVycyB3b3VsZCBub3QgYmUgb2JlZGllbnQgdG8gdGhlIGNvbW1hbmQsIG5vciBhZHZhbmNlIGluCiAgICAgICAgICAgICAgICAgICAgY29uc2VxdWVuY2Ugb2YgdGhlaXIgZmVhci4gPG1pbGVzdG9uZSBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8cD5XaGVuIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gb2JzZXJ2ZWQgdGhlc2UgdGhpbmdzLCBoYXZpbmcgY2FsbGVkIGEKICAgICAgICAgICAgICAgICAgICBjb3VuY2lsLCBhbmQgc3VtbW9uZWQgdG8gaXQgdGhlIGNlbnR1cmlvbnMgb2YgYWxsIHRoZSBjb21wYW5pZXMsIGhlIHNldmVyZWx5CiAgICAgICAgICAgICAgICAgICAgcmVwcmltYW5kZWQgdGhlbSwgInBhcnRpY3VsYXJseSwgZm9yIHN1cHBvc2luZyB0aGF0IGl0IGJlbG9uZ2VkIHRvIHRoZW0gdG8KICAgICAgICAgICAgICAgICAgICBpbnF1aXJlIG9yIGNvbmplY3R1cmUsIGVpdGhlciBpbiB3aGF0IGRpcmVjdGlvbiB0aGV5IHdlcmUgbWFyY2hpbmcsIG9yIHdpdGggd2hhdAogICAgICAgICAgICAgICAgICAgIG9iamVjdC4gVGhhdCA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiwgZHVyaW5nIGhpcyA8bmFtZT5bQ2Flc2FyPC9uYW1lPidzXQogICAgICAgICAgICAgICAgICAgIGNvbnN1bHNoaXAgWzxkYXRlIGF1dGhuYW1lPSItNTkiIHZhbHVlPSItNTkiPjU5PC9kYXRlPiBCLkMuXSwgaGFkIG1vc3QgYW54aW91c2x5IHNvdWdodCBhZnRlcgogICAgICAgICAgICAgICAgICAgIHRoZSBmcmllbmRzaGlwIG9mIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGU7IHdoeSBzaG91bGQgYW55CiAgICAgICAgICAgICAgICAgICAgb25lIGp1ZGdlIHRoYXQgaGUgd291bGQgc28gcmFzaGx5IGRlcGFydCBmcm9tIGhpcyBkdXR5PyBIZSBmb3IgaGlzIHBhcnQgd2FzCiAgICAgICAgICAgICAgICAgICAgcGVyc3VhZGVkLCB0aGF0LCB3aGVuIGhpcyBkZW1hbmRzIHdlcmUga25vd24gYW5kIHRoZSBmYWlybmVzcyBvZiB0aGUgdGVybXMKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmVkLCBoZSB3b3VsZCByZWplY3QgbmVpdGhlciBoaXMgbm9yIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSdzIGZhdm9yLiBCdXQgZXZlbiBpZiwgZHJpdmVuIG9uIGJ5IHJhZ2UgYW5kIG1hZG5lc3MsIGhlIHNob3VsZCBtYWtlIHdhcgogICAgICAgICAgICAgICAgICAgIHVwb24gdGhlbSwgd2hhdCBhZnRlciBhbGwgd2VyZSB0aGV5IGFmcmFpZCBvZj8tb3Igd2h5IHNob3VsZCB0aGV5IGRlc3BhaXIgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlaXIgb3duIHZhbG9yIG9yIG9mIGhpcyB6ZWFsPyBPZiB0aGF0IGVuZW15IGEgdHJpYWwgaGFkIGJlZW4gbWFkZSB3aXRoaW4KICAgICAgICAgICAgICAgICAgICBvdXIgZmF0aGVycycgcmVjb2xsZWN0aW9uLCB3aGVuLCBvbiB0aGUgZGVmZWF0IG9mIHRoZSA8bmFtZT5DaW1icmk8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5UZXV0b25lczwvbmFtZT4gYnkgPG5hbWU+Q2FpdXMgTWFyaXVzPC9uYW1lPiwgdGhlIGFybXkgd2FzIHJlZ2FyZGVkIGFzCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGRlc2VydmVkIG5vIGxlc3MgcHJhaXNlIHRoYW4gdGhlaXIgY29tbWFuZGVyIGhpbXNlbGYuIEl0IGhhZCBiZWVuIG1hZGUKICAgICAgICAgICAgICAgICAgICBsYXRlbHksIHRvbywgaW4gPG5hbWUga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPiwgZHVyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHJlYmVsbGlvbiBvZiB0aGUgc2xhdmVzLCB3aG9tLCBob3dldmVyLCB0aGUgZXhwZXJpZW5jZSBhbmQgdHJhaW5pbmcgd2hpY2ggdGhleQogICAgICAgICAgICAgICAgICAgIGhhZCByZWNlaXZlZCBmcm9tIHVzLCBhc3Npc3RlZCBpbiBzb21lIHJlc3BlY3QuIEZyb20gd2hpY2ggYSBqdWRnbWVudCBtaWdodCBiZQogICAgICAgICAgICAgICAgICAgIGZvcm1lZCBvZiB0aGUgYWR2YW50YWdlcyB3aGljaCByZXNvbHV0aW9uIGNhcnJpZXMgd2l0aCBpdCBpbmFzbXVjaCBhcyB0aG9zZSB3aG9tCiAgICAgICAgICAgICAgICAgICAgZm9yIHNvbWUgdGltZSB0aGV5IGhhZCBncm91bmRsZXNzbHkgZHJlYWRlZCB3aGVuIHVuYXJtZWQsIHRoZXkgaGFkIGFmdGVyd2FyZAogICAgICAgICAgICAgICAgICAgIHZhbnF1aXNoZWQsIHdoZW4gd2VsbCBhcm1lZCBhbmQgZmx1c2hlZCB3aXRoIHN1Y2Nlc3MuIEluIHNob3J0LCB0aGF0IHRoZXNlIHdlcmUKICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSBtZW4gd2hvbSB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGluIGZyZXF1ZW50CiAgICAgICAgICAgICAgICAgICAgZW5jb3VudGVycywgbm90IG9ubHkgaW4gdGhlaXIgb3duIHRlcnJpdG9yaWVzLCBidXQgYWxzbyBpbiB0aGVpcnMgW3RoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5HZXJtYW5dPC9uYW1lPiwgaGF2ZSBnZW5lcmFsbHkgdmFucXVpc2hlZCwgYW5kIHlldCBjYW4gbm90IGhhdmUgYmVlbiBhCiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggZm9yIG91ciBhcm15LiBJZiB0aGUgdW5zdWNjZXNzZnVsIGJhdHRsZSBhbmQgZmxpZ2h0IG9mIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBkaXNxdWlldGVkIGFueSwgdGhlc2UsIGlmIHRoZXkgbWFkZSBpbnF1aXJpZXMsCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgZGlzY292ZXIgdGhhdCwgd2hlbiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gaGFkIGJlZW4gdGlyZWQKICAgICAgICAgICAgICAgICAgICBvdXQgYnkgdGhlIGxvbmcgZHVyYXRpb24gb2YgdGhlIHdhciwgPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT4sIGFmdGVyIGhlIGhhZCBtYW55CiAgICAgICAgICAgICAgICAgICAgbW9udGhzIGtlcHQgaGltc2VsZiBpbiBoaXMgY2FtcCBhbmQgaW4gdGhlIG1hcnNoZXMsIGFuZCBoYWQgZ2l2ZW4gbm8gb3Bwb3J0dW5pdHkKICAgICAgICAgICAgICAgICAgICBmb3IgYW4gZW5nYWdlbWVudCwgZmVsbCBzdWRkZW5seSB1cG9uIHRoZW0sIGJ5IHRoaXMgdGltZSBkZXNwYWlyaW5nIG9mIGEgYmF0dGxlCiAgICAgICAgICAgICAgICAgICAgYW5kIHNjYXR0ZXJlZCBpbiBhbGwgZGlyZWN0aW9ucywgYW5kIHdhcyB2aWN0b3Jpb3VzIG1vcmUgdGhyb3VnaCBzdHJhdGFnZW0gYW5kCiAgICAgICAgICAgICAgICAgICAgY3VubmluZyB0aGFuIHZhbG9yLiBCdXQgdGhvdWdoIHRoZXJlIGhhZCBiZWVuIHJvb20gZm9yIHN1Y2ggc3RyYXRhZ2VtIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICBzYXZhZ2UgYW5kIHVuc2tpbGxlZCBtZW4sIG5vdCBldmVuIFs8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPl0gaGltc2VsZiBleHBlY3RlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlcmVieSBvdXIgYXJtaWVzIGNvdWxkIGJlIGVudHJhcHBlZC4gVGhhdCB0aG9zZSB3aG8gYXNjcmliZWQgdGhlaXIgZmVhcgogICAgICAgICAgICAgICAgICAgIHRvIGEgcHJldGVuc2UgYWJvdXQgdGhlIFtkZWZpY2llbmN5IG9mXSBzdXBwbGllcyBhbmQgdGhlIG5hcnJvd25lc3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcm9hZHMsIGFjdGVkIHByZXN1bXB0dW91c2x5LCBhcyB0aGV5IHNlZW1lZCBlaXRoZXIgdG8gZGlzdHJ1c3QgdGhlaXIgZ2VuZXJhbCdzCiAgICAgICAgICAgICAgICAgICAgZGlzY2hhcmdlIG9mIGhpcyBkdXR5LCBvciB0byBkaWN0YXRlIHRvIGhpbS4gVGhhdCB0aGVzZSB0aGluZ3Mgd2VyZSBoaXMgY29uY2VybjsKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSA8bmFtZT5TZXF1YW5pPC9uYW1lPiwgdGhlIDxuYW1lPkxldWNpPC9uYW1lPiwgYW5kIHRoZSA8bmFtZSBrZXk9InRnbiw3MDA4MzQzIiByZWc9IiAgK0xhbmdyZXMgWzUuMzMzLDQ3Ljg4M10gKGluaGFiaXRlZCBwbGFjZSksIEhhdXRlLU1hcm5lLCBDaGFtcGFnbmUtQXJkZW5uZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4MzQzIiBrZXk9InRnbiw3MDA4MzQzIj5MaW5nb25lczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gd2VyZSB0byBmdXJuaXNoIHRoZSBjb3JuOyBhbmQgdGhhdCBpdCB3YXMgYWxyZWFkeSByaXBlIGluIHRoZSBmaWVsZHM7CiAgICAgICAgICAgICAgICAgICAgdGhhdCBhcyB0byB0aGUgcm9hZCB0aGV5IHdvdWxkIHNvb24gYmUgYWJsZSB0byBqdWRnZSBmb3IgdGhlbXNlbHZlcy4gQXMgdG8gaXRzCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgcmVwb3J0ZWQgdGhhdCB0aGUgc29sZGllcnMgd291bGQgbm90IGJlIG9iZWRpZW50IHRvIGNvbW1hbmQsIG9yIGFkdmFuY2UsCiAgICAgICAgICAgICAgICAgICAgaGUgd2FzIG5vdCBhdCBhbGwgZGlzdHVyYmVkIGF0IHRoYXQ7IGZvciBoZSBrbmV3LCB0aGF0IGluIHRoZSBjYXNlIG9mIGFsbCB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdob3NlIGFybXkgaGFkIG5vdCBiZWVuIG9iZWRpZW50IHRvIGNvbW1hbmQsIGVpdGhlciB1cG9uIHNvbWUgbWlzbWFuYWdlbWVudCBvZgogICAgICAgICAgICAgICAgICAgIGFuIGFmZmFpciwgZm9ydHVuZSBoYWQgZGVzZXJ0ZWQgdGhlbSwgb3IsIHRoYXQgdXBvbiBzb21lIGNyaW1lIGJlaW5nIGRpc2NvdmVyZWQsCiAgICAgICAgICAgICAgICAgICAgY292ZXRvdXNuZXNzIGhhZCBiZWVuIGNsZWFybHkgcHJvdmVkIFthZ2FpbnN0IHRoZW1dLiBIaXMgaW50ZWdyaXR5IGhhZCBiZWVuIHNlZW4KICAgICAgICAgICAgICAgICAgICB0aHJvdWdob3V0IGhpcyB3aG9sZSBsaWZlLCBoaXMgZ29vZCBmb3J0dW5lIGluIHRoZSB3YXIgd2l0aCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4uIFRoYXQgaGUgd291bGQgdGhlcmVmb3JlIGluc3RhbnRseSBzZXQgYWJvdXQKICAgICAgICAgICAgICAgICAgICB3aGF0IGhlIGhhZCBpbnRlbmRlZCB0byBwdXQgb2ZmIHRpbGwgYSBtb3JlIGRpc3RhbnQgZGF5LCBhbmQgd291bGQgYnJlYWsgdXAgaGlzCiAgICAgICAgICAgICAgICAgICAgY2FtcCB0aGUgbmV4dCBuaWdodCwgaW4gdGhlIGZvdXJ0aCB3YXRjaCwgdGhhdCBoZSBtaWdodCBhc2NlcnRhaW4sIGFzIHNvb24gYXMKICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSwgd2hldGhlciBhIHNlbnNlIG9mIGhvbm9yIGFuZCBkdXR5LCBvciB3aGV0aGVyIGZlYXIgaGFkIG1vcmUgaW5mbHVlbmNlCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGVtLiBCdXQgdGhhdCwgaWYgbm8gb25lIGVsc2Ugc2hvdWxkIGZvbGxvdywgeWV0IGhlIHdvdWxkIGdvIHdpdGggb25seSB0aGUKICAgICAgICAgICAgICAgICAgICB0ZW50aCBsZWdpb24sIG9mIHdoaWNoIGhlIGhhZCBubyBtaXNnaXZpbmdzLCBhbmQgaXQgc2hvdWxkIGJlIGhpcyBwcmFldG9yaWFuCiAgICAgICAgICAgICAgICAgICAgY29ob3J0LiIgVGhpcyBsZWdpb24gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgYm90aCBncmVhdGx5IGZhdm9yZWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIGluIGl0LCBvbiBhY2NvdW50IG9mIGl0cyB2YWxvciwgcGxhY2VkIHRoZSBncmVhdGVzdCBjb25maWRlbmNlLiA8bWlsZXN0b25lIG49IjQxIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPlVwb24gdGhlIGRlbGl2ZXJ5IG9mIHRoaXMgc3BlZWNoLCB0aGUgbWluZHMgb2YgYWxsIHdlcmUgY2hhbmdlZCBpbiBhIHN1cnByaXNpbmcKICAgICAgICAgICAgICAgICAgICBtYW5uZXIsIGFuZCB0aGUgaGlnaGVzdCBhcmRvciBhbmQgZWFnZXJuZXNzIGZvciBwcm9zZWN1dGluZyB0aGUgd2FyIHdlcmUKICAgICAgICAgICAgICAgICAgICBlbmdlbmRlcmVkOyBhbmQgdGhlIHRlbnRoIGxlZ2lvbiB3YXMgdGhlIGZpcnN0IHRvIHJldHVybiB0aGFua3MgdG8gaGltLCB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbWlsaXRhcnkgdHJpYnVuZXMsIGZvciBoaXMgaGF2aW5nIGV4cHJlc3NlZCB0aGlzIG1vc3QgZmF2b3JhYmxlIG9waW5pb24gb2YKICAgICAgICAgICAgICAgICAgICB0aGVtOyBhbmQgYXNzdXJlZCBoaW0gdGhhdCB0aGV5IHdlcmUgcXVpdGUgcmVhZHkgdG8gcHJvc2VjdXRlIHRoZSB3YXIuIFRoZW4sIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIGxlZ2lvbnMgZW5kZWF2b3JlZCwgdGhyb3VnaCB0aGVpciBtaWxpdGFyeSB0cmlidW5lcyBhbmQgdGhlIGNlbnR1cmlvbnMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcHJpbmNpcGFsIGNvbXBhbmllcywgdG8gZXhjdXNlIHRoZW1zZWx2ZXMgdG8gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgW3NheWluZ10gdGhhdCB0aGV5IGhhZCBuZXZlciBlaXRoZXIgZG91YnRlZCBvciBmZWFyZWQsIG9yCiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZWQgdGhhdCB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgY29uZHVjdCBvZiB0aGUgd2FyIHdhcyB0aGVpcnMgYW5kIG5vdAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGdlbmVyYWwncy4gSGF2aW5nIGFjY2VwdGVkIHRoZWlyIGV4Y3VzZSwgYW5kIGhhdmluZyBoYWQgdGhlIHJvYWQgY2FyZWZ1bGx5CiAgICAgICAgICAgICAgICAgICAgcmVjb25ub2l0ZXJlZCBieSA8bmFtZT5EaXZpdGlhY3VzPC9uYW1lPiwgYmVjYXVzZSBpbiBoaW0gb2YgYWxsIG90aGVycyBoZSBoYWQKICAgICAgICAgICAgICAgICAgICB0aGUgZ3JlYXRlc3QgZmFpdGggW2hlIGZvdW5kXSB0aGF0IGJ5IGEgY2lyY3VpdG91cyByb3V0ZSBvZiBtb3JlIHRoYW4gZmlmdHkKICAgICAgICAgICAgICAgICAgICBtaWxlcyBoZSBtaWdodCBsZWFkIGhpcyBhcm15IHRocm91Z2ggb3BlbiBwYXJ0czsgaGUgdGhlbiBzZXQgb3V0IGluIHRoZSBmb3VydGgKICAgICAgICAgICAgICAgICAgICB3YXRjaCwgYXMgaGUgaGFkIHNhaWQgW2hlIHdvdWxkXS4gT24gdGhlIHNldmVudGggZGF5LCBhcyBoZSBkaWQgbm90IGRpc2NvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgaGlzIG1hcmNoLCBoZSB3YXMgaW5mb3JtZWQgYnkgc2NvdXRzIHRoYXQgdGhlIGZvcmNlcyBvZiA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHdlcmUgb25seSBmb3VyIGFuZCB0d2VudHkgbWlsZXMgZGlzdGFudCBmcm9tIG91cnMuIDxtaWxlc3RvbmUgbj0iNDIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+VXBvbiBiZWluZyBhcHByaXplZCBvZiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgYXJyaXZhbCwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT4gc2VuZHMgZW1iYXNzYWRvcnMgdG8gaGltLCBbc2F5aW5nXSB0aGF0IHdoYXQgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHJlcXVlc3RlZCBhcyB0byBhIGNvbmZlcmVuY2UsIG1pZ2h0IG5vdywgYXMgZmFyIGFzIGhpcyBwZXJtaXNzaW9uIHdlbnQsCiAgICAgICAgICAgICAgICAgICAgdGFrZSBwbGFjZSwgc2luY2UgaGUgWzxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT5dIGhhZCBhcHByb2FjaGVkIG5lYXJlciwKICAgICAgICAgICAgICAgICAgICBhbmQgaGUgY29uc2lkZXJlZCB0aGF0IGhlIG1pZ2h0IG5vdyBkbyBpdCB3aXRob3V0IGRhbmdlci4gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBkaWQgbm90IHJlamVjdCB0aGUgcHJvcG9zYWwgYW5kIGJlZ2FuIHRvIHRoaW5rIHRoYXQgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgbm93IHJldHVybmluZyB0byBhIHJhdGlvbmFsIHN0YXRlIG9mIG1pbmQgYXMgaGUgc3BvbnRhbmVvdXNseSBwcm9mZmVyZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhlIGhhZCBwcmV2aW91c2x5IHJlZnVzZWQgdG8gaGltIHdoZW4gcmVxdWVzdGluZyBpdDsgYW5kIHdhcyBpbiBncmVhdAogICAgICAgICAgICAgICAgICAgIGhvcGVzIHRoYXQsIGluIGNvbnNpZGVyYXRpb24gb2YgaGlzIG93biBhbmQgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgcGVvcGxlJ3MgZ3JlYXQgZmF2b3JzIHRvd2FyZCBoaW0sIHRoZSBpc3N1ZSB3b3VsZCBiZSB0aGF0IGhlIHdvdWxkIGRlc2lzdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgaGlzIG9ic3RpbmFjeSB1cG9uIGhpcyBkZW1hbmRzIGJlaW5nIG1hZGUga25vd24uIFRoZSBmaWZ0aCBkYXkgYWZ0ZXIgdGhhdCB3YXMKICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQgYXMgdGhlIGRheSBvZiBjb25mZXJlbmNlLiBNZWFud2hpbGUsIGFzIGFtYmFzc2Fkb3JzIHdlcmUgYmVpbmcgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICBzZW50IHRvIGFuZCBmcm8gYmV0d2VlbiB0aGVtLCA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiBkZW1hbmRlZCB0aGF0IDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gc2hvdWxkIG5vdCBicmluZyBhbnkgZm9vdC1zb2xkaWVyIHdpdGggaGltIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmZlcmVuY2UsIFtzYXlpbmddIHRoYXQgImhlIHdhcyBhZnJhaWQgb2YgYmVpbmcgZW5zbmFyZWQgYnkgaGltIHRocm91Z2gKICAgICAgICAgICAgICAgICAgICB0cmVhY2hlcnk7IHRoYXQgYm90aCBzaG91bGQgY29tZSBhY2NvbXBhbmllZCBieSBjYXZhbHJ5OyB0aGF0IGhlIHdvdWxkIG5vdCBjb21lCiAgICAgICAgICAgICAgICAgICAgb24gYW55IG90aGVyIGNvbmRpdGlvbi4iIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGFzIGhlIG5laXRoZXIgd2lzaGVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgY29uZmVyZW5jZSBzaG91bGQsIGJ5IGFuIGV4Y3VzZSB0aHJvd24gaW4gdGhlIHdheSwgYmUgc2V0IGFzaWRlLCBub3IKICAgICAgICAgICAgICAgICAgICBkdXJzdCB0cnVzdCBoaXMgbGlmZSB0byB0aGUgY2F2YWxyeSBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgZGVjaWRlZCB0aGF0IGl0IHdvdWxkIGJlIG1vc3QgZXhwZWRpZW50IHRvIHRha2UgYXdheSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5HYWxsaWM8L25hbWU+IGNhdmFscnkgYWxsIHRoZWlyIGhvcnNlcywgYW5kIHRoZXJlb24gdG8gbW91bnQgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9uYXJ5IHNvbGRpZXJzIG9mIHRoZSB0ZW50aCBsZWdpb24sIGluIHdoaWNoIGhlIHBsYWNlZCB0aGUgZ3JlYXRlc3QKICAgICAgICAgICAgICAgICAgICBjb25maWRlbmNlLCBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0IGhhdmUgYSBib2R5LWd1YXJkIGFzIHRydXN0d29ydGh5IGFzIHBvc3NpYmxlLAogICAgICAgICAgICAgICAgICAgIHNob3VsZCB0aGVyZSBiZSBhbnkgbmVlZCBmb3IgYWN0aW9uLiBBbmQgd2hlbiB0aGlzIHdhcyBkb25lLCBvbmUgb2YgdGhlIHNvbGRpZXJzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHRlbnRoIGxlZ2lvbiBzYWlkLCBub3Qgd2l0aG91dCBhIHRvdWNoIG9mIGh1bW9yLCAidGhhdCA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRpZCBtb3JlIGZvciB0aGVtIHRoYW4gaGUgaGFkIHByb21pc2VkOyBoZSBoYWQgcHJvbWlzZWQgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIHRoZSB0ZW50aCBsZWdpb24gaW4gcGxhY2Ugb2YgaGlzIHByYWV0b3JpYW4gY29ob3J0OyBidXQgaGUgbm93IGNvbnZlcnRlZAogICAgICAgICAgICAgICAgICAgIHRoZW0gaW50byBob3JzZS4iIDxtaWxlc3RvbmUgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+VGhlcmUgd2FzIGEgbGFyZ2UgcGxhaW4sIGFuZCBpbiBpdCBhIG1vdW5kIG9mIGVhcnRoIG9mIGNvbnNpZGVyYWJsZSBzaXplLiBUaGlzCiAgICAgICAgICAgICAgICAgICAgc3BvdCB3YXMgYXQgbmVhcmx5IGFuIGVxdWFsIGRpc3RhbmNlIGZyb20gYm90aCBjYW1wcy4gPG5hbWU+VGhpdGhlcjwvbmFtZT4sIGFzCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gYXBwb2ludGVkLCB0aGV5IGNhbWUgZm9yIHRoZSBjb25mZXJlbmNlLiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHN0YXRpb25lZCB0aGUgbGVnaW9uLCB3aGljaCBoZSBoYWQgYnJvdWdodCBbd2l0aCBoaW1dIG9uCiAgICAgICAgICAgICAgICAgICAgaG9yc2ViYWNrLCAyMDAgcGFjZXMgZnJvbSB0aGlzIG1vdW5kLiBUaGUgY2F2YWxyeSBvZiA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGFsc28gdG9vayB0aGVpciBzdGFuZCBhdCBhbiBlcXVhbCBkaXN0YW5jZS4gPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT4gdGhlbgogICAgICAgICAgICAgICAgICAgIGRlbWFuZGVkIHRoYXQgdGhleSBzaG91bGQgY29uZmVyIG9uIGhvcnNlYmFjaywgYW5kIHRoYXQsIGJlc2lkZXMgdGhlbXNlbHZlcywKICAgICAgICAgICAgICAgICAgICB0aGV5IHNob3VsZCBicmluZyB3aXRoIHRoZW0gdGVuIG1lbiBlYWNoIHRvIHRoZSBjb25mZXJlbmNlLiBXaGVuIHRoZXkgd2VyZSBjb21lCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHBsYWNlLCA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBpbiB0aGUgb3BlbmluZyBvZiBoaXMgc3BlZWNoLAogICAgICAgICAgICAgICAgICAgIGRldGFpbGVkIGhpcyBvd24gYW5kIHRoZSBzZW5hdGUncyBmYXZvcnMgdG93YXJkIGhpbSBbPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT5dLAogICAgICAgICAgICAgICAgICAgIGluIHRoYXQgaGUgaGFkIGJlZW4gc3R5bGVkIGtpbmcsIGluIHRoYXQgW2hlIGhhZCBiZWVuIHN0eWxlZF0gZnJpZW5kLCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUtaW4gdGhhdCB2ZXJ5IGNvbnNpZGVyYWJsZSBwcmVzZW50cyBoYWQgYmVlbiBzZW50IGhpbTsgd2hpY2ggY2lyY3Vtc3RhbmNlCiAgICAgICAgICAgICAgICAgICAgaGUgaW5mb3JtZWQgaGltIGhhZCBib3RoIGZhbGxlbiB0byB0aGUgbG90IG9mIGZldywgYW5kIGhhZCB1c3VhbGx5IGJlZW4gYmVzdG93ZWQKICAgICAgICAgICAgICAgICAgICBpbiBjb25zaWRlcmF0aW9uIG9mIGltcG9ydGFudCBwZXJzb25hbCBzZXJ2aWNlczsgdGhhdCBoZSwgYWx0aG91Z2ggaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgbmVpdGhlciBhbiBpbnRyb2R1Y3Rpb24sIG5vciBhIGp1c3QgZ3JvdW5kIGZvciB0aGUgcmVxdWVzdCwgaGFkIG9idGFpbmVkIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgaG9ub3JzIHRocm91Z2ggdGhlIGtpbmRuZXNzIGFuZCBtdW5pZmljZW5jZSBvZiBoaW1zZWxmIFs8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+XSBhbmQgdGhlIHNlbmF0ZS4gSGUgaW5mb3JtZWQgaGltIHRvbywgaG93IG9sZCBhbmQgaG93IGp1c3QKICAgICAgICAgICAgICAgICAgICB3ZXJlIHRoZSBncm91bmRzIG9mIGNvbm5lY3Rpb24gdGhhdCBleGlzdGVkIGJldHdlZW4gdGhlbXNlbHZlcyBbdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlJvbWFuc108L25hbWU+IGFuZCB0aGUgPG5hbWU+QWVkdWk8L25hbWU+LCB3aGF0IGRlY3JlZXMgb2YgdGhlIHNlbmF0ZQogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIHBhc3NlZCBpbiB0aGVpciBmYXZvciwgYW5kIGhvdyBmcmVxdWVudCBhbmQgaG93IGhvbm9yYWJsZTsgaG93IGZyb20KICAgICAgICAgICAgICAgICAgICB0aW1lIGltbWVtb3JpYWwgdGhlIDxuYW1lPkFlZHVpPC9uYW1lPiBoYWQgaGVsZCB0aGUgc3VwcmVtYWN5IG9mIHRoZSB3aG9sZSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+OyBldmVuIFtzYWlkIDxuYW1lPkNhZXNhcl08L25hbWU+IGJlZm9yZSB0aGV5IGhhZCBzb3VnaHQgb3VyCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kc2hpcDsgdGhhdCBpdCB3YXMgdGhlIGN1c3RvbSBvZiB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUgdG8gZGVzaXJlIG5vdCBvbmx5IHRoYXQgaXRzIGFsbGllcyBhbmQgZnJpZW5kcyBzaG91bGQgbG9zZSBub25lIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHksIGJ1dCBiZSBhZHZhbmNlZCBpbiBpbmZsdWVuY2UsIGRpZ25pdHksIGFuZCBob25vcjogd2hvIHRoZW4gY291bGQKICAgICAgICAgICAgICAgICAgICBlbmR1cmUgdGhhdCB3aGF0IHRoZXkgaGFkIGJyb3VnaHQgd2l0aCB0aGVtIHRvIHRoZSBmcmllbmRzaGlwIG9mIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgc2hvdWxkIGJlIHRvcm4gZnJvbSB0aGVtPyIgSGUgdGhlbiBtYWRlCiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgZGVtYW5kcyB3aGljaCBoZSBoYWQgY29tbWlzc2lvbmVkIHRoZSBlbWJhc3NhZG9ycyB0byBtYWtlLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIFs8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPl0gc2hvdWxkIG5vdCBtYWtlIHdhciBlaXRoZXIgdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+QWVkdWk8L25hbWU+IG9yIHRoZWlyIGFsbGllcywgdGhhdCBoZSBzaG91bGQgcmVzdG9yZSB0aGUgaG9zdGFnZXM7CiAgICAgICAgICAgICAgICAgICAgdGhhdCBpZiBoZSBjb3VsZCBub3Qgc2VuZCBiYWNrIHRvIHRoZWlyIGNvdW50cnkgYW55IHBhcnQgb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIGhlIHNob3VsZCBhdCBhbGwgZXZlbnRzIHN1ZmZlciBub25lIG9mIHRoZW0KICAgICAgICAgICAgICAgICAgICBhbnkgbW9yZSB0byBjcm9zcyB0aGUgPG5hbWUga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LiA8bWlsZXN0b25lIG49IjQ0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxuYW1lPkFyaW92aXN0dXM8L25hbWU+IGJyaWVmbHkgcmVwbGllZCB0byB0aGUgZGVtYW5kcyBvZiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+OyBidXQgZXhwYXRpYXRlZCBsYXJnZWx5IG9uIGhpcyBvd24gdmlydHVlcywgInRoYXQgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgY3Jvc3NlZCB0aGUgPG5hbWUga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+IG5vdCBvZiBoaXMgb3duIGFjY29yZCwgYnV0IG9uIGJlaW5nIGludml0ZWQgYW5kIHNlbnQgZm9yIGJ5IHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPjsgdGhhdCBoZSBoYWQgbm90IGxlZnQgaG9tZSBhbmQga2luZHJlZCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgZXhwZWN0YXRpb25zIGFuZCBncmVhdCByZXdhcmRzOyB0aGF0IGhlIGhhZCBzZXR0bGVtZW50cyBpbiA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBncmFudGVkIGJ5IHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB0aGVtc2VsdmVzOwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGhvc3RhZ2VzIGhhZCBiZWVuIGdpdmVuIGJ5IHRoZWlyIGdvb2Qtd2lsbDsgdGhhdCBoZSB0b29rIGJ5IHJpZ2h0IG9mCiAgICAgICAgICAgICAgICAgICAgd2FyIHRoZSB0cmlidXRlIHdoaWNoIGNvbnF1ZXJvcnMgYXJlIGFjY3VzdG9tZWQgdG8gaW1wb3NlIG9uIHRoZSBjb25xdWVyZWQ7IHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgbm90IG1hZGUgd2FyIHVwb24gdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBidXQgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHVwb24gaGltOyB0aGF0IGFsbCB0aGUgc3RhdGVzIG9mIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gY2FtZSB0byBhdHRhY2sgaGltLCBhbmQgaGFkIGVuY2FtcGVkIGFnYWluc3QgaGltOyB0aGF0IGFsbAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGZvcmNlcyBoYWQgYmVlbiByb3V0ZWQgYW5kIGJlYXRlbiBieSBoaW0gaW4gYSBzaW5nbGUgYmF0dGxlOyB0aGF0IGlmIHRoZXkKICAgICAgICAgICAgICAgICAgICBjaG9zZSB0byBtYWtlIGEgc2Vjb25kIHRyaWFsLCBoZSB3YXMgcmVhZHkgdG8gZW5jb3VudGVyIHRoZW0gYWdhaW47IGJ1dCBpZiB0aGV5CiAgICAgICAgICAgICAgICAgICAgY2hvc2UgdG8gZW5qb3kgcGVhY2UsIGl0IHdhcyB1bmZhaXIgdG8gcmVmdXNlIHRoZSB0cmlidXRlLCB3aGljaCBvZiB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICBmcmVlLXdpbGwgdGhleSBoYWQgcGFpZCB1cCB0byB0aGF0IHRpbWUuIFRoYXQgdGhlIGZyaWVuZHNoaXAgb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBvdWdodCB0byBwcm92ZSB0byBoaW0gYW4gb3JuYW1lbnQgYW5kIGEKICAgICAgICAgICAgICAgICAgICBzYWZlZ3VhcmQsIG5vdCBhIGRldHJpbWVudDsgYW5kIHRoYXQgaGUgc291Z2h0IGl0IHdpdGggdGhhdCBleHBlY3RhdGlvbi4gQnV0IGlmCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIHRoZSB0cmlidXRlIHdhcyB0byBiZQogICAgICAgICAgICAgICAgICAgIGRpc2NvbnRpbnVlZCwgYW5kIHRob3NlIHdobyBzdXJyZW5kZXJlZCB0byBiZSBzZWR1Y2VkIGZyb20gaGltLCBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIHJlbm91bmNlIHRoZSBmcmllbmRzaGlwIG9mIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgbm8gbGVzcwogICAgICAgICAgICAgICAgICAgIGhlYXJ0aWx5IHRoYW4gaGUgaGFkIHNvdWdodCBpdC4gQXMgdG8gaGlzIGxlYWRpbmcgb3ZlciBhIGhvc3Qgb2YgPG5hbWUgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBpbnRvIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHRoYXQgaGUgd2FzIGRvaW5nIHRoaXMKICAgICAgICAgICAgICAgICAgICB3aXRoIGEgdmlldyBvZiBzZWN1cmluZyBoaW1zZWxmLCBub3Qgb2YgYXNzYXVsdGluZyA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+OiB0aGF0IHRoZXJlCiAgICAgICAgICAgICAgICAgICAgd2FzIGV2aWRlbmNlIG9mIHRoaXMsIGluIHRoYXQgaGUgZGlkIG5vdCBjb21lIHdpdGhvdXQgYmVpbmcgaW52aXRlZCwgYW5kIGluIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBkaWQgbm90IG1ha2Ugd2FyLCBidXQgbWVyZWx5IHdhcmRlZCBpdCBvZmYuIFRoYXQgaGUgaGFkIGNvbWUgaW50byA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGJlZm9yZSB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLiBUaGF0IG5ldmVyCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHRoaXMgdGltZSBkaWQgYSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBhcm15IGdvIGJleW9uZCB0aGUKICAgICAgICAgICAgICAgICAgICBmcm9udGllcnMgb2YgdGhlIHByb3ZpbmNlIG9mIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4uIFdoYXQgW3NhaWQgaGVdIGRvZXMgWzxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT5dIGRlc2lyZT8tIHdoeSBjb21lIGludG8gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIFs8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPl0gZG9tYWlucz8tdGhhdCB0aGlzIHdhcyBoaXMgcHJvdmluY2Ugb2YgPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwganVzdCBhcyB0aGF0IGlzIG91cnMuIEFzIGl0IG91Z2h0IG5vdCB0byBiZSBwYXJkb25lZCBpbiBoaW0sCiAgICAgICAgICAgICAgICAgICAgaWYgaGUgd2VyZSB0byBtYWtlIGFuIGF0dGFjayB1cG9uIG91ciB0ZXJyaXRvcmllczsgc28sIGxpa2V3aXNlLCB0aGF0IHdlIHdlcmUKICAgICAgICAgICAgICAgICAgICB1bmp1c3QsIHRvIG9ic3RydWN0IGhpbSBpbiBoaXMgcHJlcm9nYXRpdmUuIEFzIGZvciA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3Mgc2F5aW5nIHRoYXQgdGhlIDxuYW1lPkFlZHVpPC9uYW1lPiBoYWQgYmVlbiBzdHlsZWQKICAgICAgICAgICAgICAgICAgICAnYnJldGhyZW4nIGJ5IHRoZSBzZW5hdGUsIGhlIHdhcyBub3Qgc28gdW5jaXZpbGl6ZWQgbm9yIHNvIGlnbm9yYW50IG9mIGFmZmFpcnMsCiAgICAgICAgICAgICAgICAgICAgYXMgbm90IHRvIGtub3cgdGhhdCB0aGUgPG5hbWU+QWVkdWk8L25hbWU+IGluIHRoZSB2ZXJ5IGxhc3Qgd2FyIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFsbG9icm9nZXM8L25hbWU+IGhhZCBuZWl0aGVyIHJlbmRlcmVkIGFzc2lzdGFuY2UgdG8gdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgbm9yIHJlY2VpdmVkIGFueSBmcm9tIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgaW4gdGhlIHN0cnVnZ2xlcyB3aGljaCB0aGUgPG5hbWU+QWVkdWk8L25hbWU+IGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgbWFpbnRhaW5pbmcgd2l0aCBoaW0gYW5kIHdpdGggdGhlIDxuYW1lPlNlcXVhbmk8L25hbWU+LiBIZSBtdXN0IGZlZWwgc3VzcGljaW91cywKICAgICAgICAgICAgICAgICAgICB0aGF0IDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHRob3VnaCBmZWlnbmluZyBmcmllbmRzaGlwIGFzIHRoZSByZWFzb24KICAgICAgICAgICAgICAgICAgICBmb3IgaGlzIGtlZXBpbmcgYW4gYXJteSBpbiA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB3YXMga2VlcGluZyBpdCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIHZpZXcgb2YgY3J1c2hpbmcgaGltLiBBbmQgdGhhdCB1bmxlc3MgaGUgZGVwYXJ0IGFuZCB3aXRoZHJhdyBoaXMgYXJteSBmcm9tIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgcGFydHMsIGhlIHNoYWxsIHJlZ2FyZCBoaW0gbm90IGFzIGEgZnJpZW5kLCBidXQgYXMgYSBmb2U7IGFuZCB0aGF0LCBldmVuIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHB1dCBoaW0gdG8gZGVhdGgsIGhlIHNob3VsZCBkbyB3aGF0IHdvdWxkIHBsZWFzZSBtYW55IG9mIHRoZSBub2JsZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgbGVhZGluZyBtZW4gb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZTsgaGUgaGFkIGFzc3VyYW5jZSBvZgogICAgICAgICAgICAgICAgICAgIHRoYXQgZnJvbSB0aGVtc2VsdmVzIHRocm91Z2ggdGhlaXIgbWVzc2VuZ2VycywgYW5kIGNvdWxkIHB1cmNoYXNlIHRoZSBmYXZvciBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgZnJpZW5kc2hpcCBvZiB0aGVtIGFsbCBieSBoaXMgPG5hbWU+W0NhZXNhcjwvbmFtZT4nc10gZGVhdGguIEJ1dCBpZiBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGRlcGFydCBhbmQgcmVzaWduIHRvIGhpbSB0aGUgZnJlZSBwb3NzZXNzaW9uIG9mIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGhlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgcmVjb21wZW5zZSBoaW0gd2l0aCBhIGdyZWF0IHJld2FyZCwgYW5kIHdvdWxkIGJyaW5nIHRvIGEgY2xvc2Ugd2hhdGV2ZXIgd2FycyBoZQogICAgICAgICAgICAgICAgICAgIHdpc2hlZCB0byBiZSBjYXJyaWVkIG9uLCB3aXRob3V0IGFueSB0cm91YmxlIG9yIHJpc2sgdG8gaGltLiIgPG1pbGVzdG9uZSBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8cD5NYW55IHRoaW5ncyB3ZXJlIHN0YXRlZCBieSA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRvIHRoZSBlZmZlY3QgW3RvCiAgICAgICAgICAgICAgICAgICAgc2hvd107ICJ3aHkgaGUgY291bGQgbm90IHdhaXZlIHRoZSBidXNpbmVzcywgYW5kIHRoYXQgbmVpdGhlciBoaXMgbm9yIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUncyBwcmFjdGljZSB3b3VsZCBzdWZmZXIgaGltIHRvIGFiYW5kb24KICAgICAgICAgICAgICAgICAgICBtb3N0IG1lcml0b3Jpb3VzIGFsbGllcywgbm9yIGRpZCBoZSBkZWVtIHRoYXQgPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBiZWxvbmdlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiByYXRoZXIgdGhhbiB0byB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBwZW9wbGU7IHRoYXQgdGhlIDxuYW1lPkFydmVybmk8L25hbWU+IGFuZCB0aGUgPG5hbWU+UnV0ZW5pPC9uYW1lPiBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIHN1YmR1ZWQgaW4gd2FyIGJ5IDxuYW1lPlF1aW50dXMgRmFiaXVzIE1heGltdXM8L25hbWU+LCBhbmQgdGhhdCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIGhhZCBwYXJkb25lZCB0aGVtIGFuZCBoYWQgbm90IHJlZHVjZWQgdGhlbQogICAgICAgICAgICAgICAgICAgIGludG8gYSBwcm92aW5jZSBvciBpbXBvc2VkIGEgdHJpYnV0ZSB1cG9uIHRoZW0uIEFuZCBpZiB0aGUgbW9zdCBhbmNpZW50IHBlcmlvZAogICAgICAgICAgICAgICAgICAgIHdhcyB0byBiZSByZWdhcmRlZC10aGVuIHdhcyB0aGUgc292ZXJlaWdudHkgb2YgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBpbiA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IG1vc3QganVzdDogaWYgdGhlIGRlY3JlZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBTZW5hdGUgd2FzIHRvIGJlIG9ic2VydmVkLCB0aGVuIG91Z2h0IDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gdG8gYmUgZnJlZSwgd2hpY2ggdGhleSBbdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlJvbWFuc108L25hbWU+IGhhZCBjb25xdWVyZWQgaW4gd2FyLCBhbmQgaGFkIHBlcm1pdHRlZCB0byBlbmpveSBpdHMKICAgICAgICAgICAgICAgICAgICBvd24gbGF3cy4iIDxtaWxlc3RvbmUgbj0iNDYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+V2hpbGUgdGhlc2UgdGhpbmdzIGFyZSBiZWluZyB0cmFuc2FjdGVkIGluIHRoZSBjb25mZXJlbmNlIGl0IHdhcyBhbm5vdW5jZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0aGF0IHRoZSBjYXZhbHJ5IG9mIDxuYW1lPkFyaW92aXN0dXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgd2VyZSBhcHByb2FjaGluZyBuZWFyZXIgdGhlIG1vdW5kLCBhbmQgd2VyZSByaWRpbmcgdXAgdG8gb3VyIG1lbiwgYW5kIGNhc3RpbmcKICAgICAgICAgICAgICAgICAgICBzdG9uZXMgYW5kIHdlYXBvbnMgYXQgdGhlbS4gPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBtYWRlIGFuIGVuZCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBzcGVlY2ggYW5kIGJldG9vayBoaW1zZWxmIHRvIGhpcyBtZW47IGFuZCBjb21tYW5kZWQgdGhlbSB0aGF0IHRoZXkgc2hvdWxkIGJ5IG5vCiAgICAgICAgICAgICAgICAgICAgbWVhbnMgcmV0dXJuIGEgd2VhcG9uIHVwb24gdGhlIGVuZW15LiBGb3IgdGhvdWdoIGhlIHNhdyB0aGF0IGFuIGVuZ2FnZW1lbnQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBjYXZhbHJ5IHdvdWxkIGJlIHdpdGhvdXQgYW55IGRhbmdlciB0byBoaXMgY2hvc2VuIGxlZ2lvbiwgeWV0IGhlIGRpZCBub3QKICAgICAgICAgICAgICAgICAgICB0aGluayBwcm9wZXIgdG8gZW5nYWdlLCBsZXN0LCBhZnRlciB0aGUgZW5lbXkgd2VyZSByb3V0ZWQsIGl0IG1pZ2h0IGJlIHNhaWQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIGJlZW4gaW5zbmFyZWQgYnkgaGltIHVuZGVyIHRoZSBzYW5jdGlvbiBvZiBhIGNvbmZlcmVuY2UuIFdoZW4gaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgc3ByZWFkIGFicm9hZCBhbW9uZyB0aGUgY29tbW9uIHNvbGRpZXJ5IHdpdGggd2hhdCBoYXVnaHRpbmVzcwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiBoYWQgYmVoYXZlZCBhdCB0aGUgY29uZmVyZW5jZSwgYW5kIGhvdyBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gdG8gcXVpdCA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgaG93IGhpcwogICAgICAgICAgICAgICAgICAgIGNhdmFscnkgaGFkIG1hZGUgYW4gYXR0YWNrIHVwb24gb3VyIG1lbiwgYW5kIGhvdyB0aGlzIGhhZCBicm9rZW4gb2ZmIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmZlcmVuY2UsIGEgbXVjaCBncmVhdGVyIGFsYWNyaXR5IGFuZCBlYWdlcm5lc3MgZm9yIGJhdHRsZSB3YXMgaW5mdXNlZCBpbnRvCiAgICAgICAgICAgICAgICAgICAgb3VyIGFybXkuIDxtaWxlc3RvbmUgbj0iNDciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+VHdvIGRheXMgYWZ0ZXIsIDxuYW1lPkFyaW92aXN0dXM8L25hbWU+IHNlbmRzIGVtYmFzc2Fkb3JzIHRvIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHRvIHN0YXRlICJ0aGF0IGhlIHdpc2hlZCB0byB0cmVhdCB3aXRoIGhpbSBhYm91dCB0aG9zZQogICAgICAgICAgICAgICAgICAgIHRoaW5ncyB3aGljaCBoYWQgYmVlbiBiZWd1biB0byBiZSB0cmVhdGVkIG9mIGJldHdlZW4gdGhlbSwgYnV0IGhhZCBub3QgYmVlbgogICAgICAgICAgICAgICAgICAgIGNvbmNsdWRlZDsiIFthbmQgdG8gYmVnXSB0aGF0ICJoZSB3b3VsZCBlaXRoZXIgYWdhaW4gYXBwb2ludCBhIGRheSBmb3IgYQogICAgICAgICAgICAgICAgICAgIGNvbmZlcmVuY2U7IG9yLCBpZiBoZSB3ZXJlIG5vdCB3aWxsaW5nIHRvIGRvIHRoYXQsIHRoYXQgaGUgd291bGQgc2VuZCBvbmUgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgW29mZmljZXJzXSBhcyBhbiBlbWJhc3NhZG9yIHRvIGhpbS4iIFRoZXJlIGRpZCBub3QgYXBwZWFyIHRvIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYW55IGdvb2QgcmVhc29uIGZvciBob2xkaW5nIGEgY29uZmVyZW5jZTsgYW5kIHRoZSBtb3JlIHNvIGFzCiAgICAgICAgICAgICAgICAgICAgdGhlIGRheSBiZWZvcmUgdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gY291bGQgbm90IGJlIHJlc3RyYWluZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIGNhc3Rpbmcgd2VhcG9ucyBhdCBvdXIgbWVuLiBIZSB0aG91Z2h0IGhlIHNob3VsZCBub3Qgd2l0aG91dCBncmVhdCBkYW5nZXIKICAgICAgICAgICAgICAgICAgICBzZW5kIHRvIGhpbSBhcyBlbWJhc3NhZG9yIG9uZSBvZiBoaXMgWzxuYW1lIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+XQogICAgICAgICAgICAgICAgICAgIG9mZmljZXJzLCBhbmQgc2hvdWxkIGV4cG9zZSBoaW0gdG8gc2F2YWdlIG1lbi4gSXQgc2VlbWVkIFt0aGVyZWZvcmVdIG1vc3QgcHJvcGVyCiAgICAgICAgICAgICAgICAgICAgdG8gc2VuZCB0byBoaW0gPG5hbWUgdHlwZT0icGVycyI+Qy4gVmFsZXJpdXMgUHJvY2lsbHVzPC9uYW1lPiwgdGhlIHNvbiBvZiA8bmFtZSB0eXBlPSJwZXJzIj5DLiBWYWxlcml1cyBDYWJ1cnVzPC9uYW1lPiwgYSB5b3VuZyBtYW4gb2YgdGhlIGhpZ2hlc3QgY291cmFnZQogICAgICAgICAgICAgICAgICAgIGFuZCBhY2NvbXBsaXNobWVudHMgKHdob3NlIGZhdGhlciBoYWQgYmVlbiBwcmVzZW50ZWQgd2l0aCB0aGUgZnJlZWRvbSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5IGJ5IDxuYW1lIHR5cGU9InBlcnMiPkMuIFZhbGVyaXVzIEZsYWNjdXM8L25hbWU+KSwgYm90aCBvbiBhY2NvdW50IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGZpZGVsaXR5IGFuZCBvbiBhY2NvdW50IG9mIGhpcyBrbm93bGVkZ2Ugb2YgdGhlIDxuYW1lPkdhbGxpYzwvbmFtZT4gbGFuZ3VhZ2UsCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT4sIGJ5IGxvbmcgcHJhY3RpY2UsIG5vdyBzcG9rZSBmbHVlbnRseTsgYW5kIGJlY2F1c2UKICAgICAgICAgICAgICAgICAgICBpbiBoaXMgY2FzZSB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiB3b3VsZCBoYXZlIG5vIG1vdGl2ZSBmb3IKICAgICAgICAgICAgICAgICAgICBjb21taXR0aW5nIHZpb2xlbmNlOyBhbmQgW2FzIGhpcyBjb2xsZWFndWVdIDxuYW1lIHR5cGU9InBlcnMiPk0uIE1ldHRpdXM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHdobyBoYWQgc2hhcmVkIHRoZSBob3NwaXRhbGl0eSBvZiA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPi4gSGUgY29tbWlzc2lvbmVkIHRoZW0KICAgICAgICAgICAgICAgICAgICB0byBsZWFybiB3aGF0IDxuYW1lPkFyaW92aXN0dXM8L25hbWU+IGhhZCB0byBzYXksIGFuZCB0byByZXBvcnQgdG8gaGltLiBCdXQgd2hlbgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiBzYXcgdGhlbSBiZWZvcmUgaGltIGluIGhpcyBjYW1wLCBoZSBjcmllZCBvdXQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2Ugb2YgaGlzIGFybXksICJXaHkgd2VyZSB0aGV5IGNvbWUgdG8gaGltPyBXYXMgaXQgZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgICAgICAgICAgICAgYWN0aW5nIGFzIHNwaWVzPyIgSGUgc3RvcHBlZCB0aGVtIHdoZW4gYXR0ZW1wdGluZyB0byBzcGVhaywgYW5kIGNhc3QgdGhlbSBpbnRvCiAgICAgICAgICAgICAgICAgICAgY2hhaW5zLiA8bWlsZXN0b25lIG49IjQ4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPlRoZSBzYW1lIGRheSBoZSBtb3ZlZCBoaXMgY2FtcCBmb3J3YXJkIGFuZCBwaXRjaGVkIHVuZGVyIGEgaGlsbCBzaXggbWlsZXMgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgY2FtcC4gVGhlIGRheSBmb2xsb3dpbmcgaGUgbGVkIGhpcyBmb3JjZXMKICAgICAgICAgICAgICAgICAgICBwYXN0IDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBjYW1wLCBhbmQgZW5jYW1wZWQgdHdvIG1pbGVzIGJleW9uZCBoaW07CiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGlzIGRlc2lnbiB0aGF0IGhlIG1pZ2h0IGN1dCBvZmYgPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGNvcm4gYW5kIHByb3Zpc2lvbnMsIHdoaWNoIG1pZ2h0IGJlIGNvbnZleWVkIHRvIGhpbSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5TZXF1YW5pPC9uYW1lPiBhbmQgdGhlIDxuYW1lPkFlZHVpPC9uYW1lPi4gRm9yIGZpdmUgc3VjY2Vzc2l2ZSBkYXlzCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGF0IGRheSwgPG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBkcmV3IG91dCBoaXMgZm9yY2VzIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICBjYW1wLCBhbmQgcHV0IHRoZW0gaW4gYmF0dGxlIG9yZGVyLCB0aGF0LCBpZiA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICB3aWxsaW5nIHRvIGVuZ2FnZSBpbiBiYXR0bGUsIGFuIG9wcG9ydHVuaXR5IG1pZ2h0IG5vdCBiZSB3YW50aW5nIHRvIGhpbS4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT4gYWxsIHRoaXMgdGltZSBrZXB0IGhpcyBhcm15IGluIGNhbXA6IGJ1dCBlbmdhZ2VkCiAgICAgICAgICAgICAgICAgICAgZGFpbHkgaW4gY2F2YWxyeSBza2lybWlzaGVzLiBUaGUgbWV0aG9kIG9mIGJhdHRsZSBpbiB3aGljaCB0aGUgPG5hbWUgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBoYWQgcHJhY3RpY2VkIHRoZW1zZWx2ZXMgd2FzIHRoaXMuIFRoZXJlIHdlcmUKICAgICAgICAgICAgICAgICAgICA2LDAwMCBob3JzZSwgYW5kIGFzIG1hbnkgdmVyeSBhY3RpdmUgYW5kIGNvdXJhZ2VvdXMgZm9vdCwgb25lIG9mIHdob20gZWFjaCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBob3JzZSBzZWxlY3RlZCBvdXQgb2YgdGhlIHdob2xlIGFybXkgZm9yIGhpcyBvd24gcHJvdGVjdGlvbi4gQnkgdGhlc2UgW2Zvb3RdCiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIGNvbnN0YW50bHkgYWNjb21wYW5pZWQgaW4gdGhlaXIgZW5nYWdlbWVudHM7IHRvIHRoZXNlIHRoZSBob3JzZQogICAgICAgICAgICAgICAgICAgIHJldGlyZWQ7IHRoZXNlIG9uIGFueSBlbWVyZ2VuY3kgcnVzaGVkIGZvcndhcmQ7IGlmIGFueSBvbmUsIHVwb24gcmVjZWl2aW5nIGEKICAgICAgICAgICAgICAgICAgICB2ZXJ5IHNldmVyZSB3b3VuZCwgaGFkIGZhbGxlbiBmcm9tIGhpcyBob3JzZSwgdGhleSBzdG9vZCBhcm91bmQgaGltOiBpZiBpdCB3YXMKICAgICAgICAgICAgICAgICAgICBuZWNlc3NhcnkgdG8gYWR2YW5jZSBmdXJ0aGVyIHRoYW4gdXN1YWwsIG9yIHRvIHJldHJlYXQgbW9yZSByYXBpZGx5LCBzbyBncmVhdCwKICAgICAgICAgICAgICAgICAgICBmcm9tIHByYWN0aWNlLCB3YXMgdGhlaXIgc3dpZnRuZXNzLCB0aGF0LCBzdXBwb3J0ZWQgYnkgdGhlIG1hbmVzIG9mIHRoZSBob3JzZXMsCiAgICAgICAgICAgICAgICAgICAgdGhleSBjb3VsZCBrZWVwIHBhY2Ugd2l0aCB0aGVpciBzcGVlZC4gPG1pbGVzdG9uZSBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8cD5QZXJjZWl2aW5nIHRoYXQgPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT4ga2VwdCBoaW1zZWxmIGluIGNhbXAsIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHRoYXQgaGUgbWlnaHQgbm90IGFueSBsb25nZXIgYmUgY3V0IG9mZiBmcm9tIHByb3Zpc2lvbnMsCiAgICAgICAgICAgICAgICAgICAgY2hvc2UgYSBjb252ZW5pZW50IHBvc2l0aW9uIGZvciBhIGNhbXAgYmV5b25kIHRoYXQgcGxhY2UgaW4gd2hpY2ggdGhlIDxuYW1lIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gaGFkIGVuY2FtcGVkLCBhdCBhYm91dCA2MDAgcGFjZXMgZnJvbSB0aGVtLCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgZHJhd24gdXAgaGlzIGFybXkgaW4gdGhyZWUgbGluZXMsIG1hcmNoZWQgdG8gdGhhdCBwbGFjZS4gSGUgb3JkZXJlZCB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBhbmQgc2Vjb25kIGxpbmVzIHRvIGJlIHVuZGVyIGFybXM7IHRoZSB0aGlyZCB0byBmb3J0aWZ5IHRoZSBjYW1wLiBUaGlzCiAgICAgICAgICAgICAgICAgICAgcGxhY2Ugd2FzIGRpc3RhbnQgZnJvbSB0aGUgZW5lbXkgYWJvdXQgNjAwIHBhY2VzLCBhcyBoYXMgYmVlbiBzdGF0ZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlRoaXRoZXIgQXJpb3Zpc3R1czwvbmFtZT4gc2VudCBsaWdodCB0cm9vcHMsIGFib3V0IDE2LDAwMCBtZW4gaW4KICAgICAgICAgICAgICAgICAgICBudW1iZXIsIHdpdGggYWxsIGhpcyBjYXZhbHJ5OyB3aGljaCBmb3JjZXMgd2VyZSB0byBpbnRpbWlkYXRlIG91ciBtZW4sIGFuZAogICAgICAgICAgICAgICAgICAgIGhpbmRlciB0aGVtIGluIHRoZWlyIGZvcnRpZmljYXRpb24uIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBuZXZlcnRoZWxlc3MsIGFzIGhlIGhhZCBiZWZvcmUgYXJyYW5nZWQsIG9yZGVyZWQgdHdvIGxpbmVzIHRvIGRyaXZlIG9mZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteTogdGhlIHRoaXJkIHRvIGV4ZWN1dGUgdGhlIHdvcmsuIFRoZSBjYW1wIGJlaW5nIGZvcnRpZmllZCwgaGUgbGVmdCB0aGVyZQogICAgICAgICAgICAgICAgICAgIHR3byBsZWdpb25zIGFuZCBhIHBvcnRpb24gb2YgdGhlIGF1eGlsaWFyaWVzOyBhbmQgbGVkIGJhY2sgdGhlIG90aGVyIGZvdXIKICAgICAgICAgICAgICAgICAgICBsZWdpb25zIGludG8gdGhlIGxhcmdlciBjYW1wLiA8bWlsZXN0b25lIG49IjUwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxwPlRoZSBuZXh0IGRheSwgYWNjb3JkaW5nIHRvIGhpcyBjdXN0b20sIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGVkIG91dAogICAgICAgICAgICAgICAgICAgIGhpcyBmb3JjZXMgZnJvbSBib3RoIGNhbXBzLCBhbmQgaGF2aW5nIGFkdmFuY2VkIGEgbGl0dGxlIGZyb20gdGhlIGxhcmdlciBvbmUsCiAgICAgICAgICAgICAgICAgICAgZHJldyB1cCBoaXMgbGluZSBvZiBiYXR0bGUsIGFuZCBnYXZlIHRoZSBlbmVteSBhbiBvcHBvcnR1bml0eSBvZiBmaWdodGluZy4gV2hlbgogICAgICAgICAgICAgICAgICAgIGhlIGZvdW5kIHRoYXQgdGhleSBkaWQgbm90IGV2ZW4gdGhlbiBjb21lIG91dCBbZnJvbSB0aGVpciBpbnRyZW5jaG1lbnRzLF0gaGUgbGVkCiAgICAgICAgICAgICAgICAgICAgYmFjayBoaXMgYXJteSBpbnRvIGNhbXAgYWJvdXQgbm9vbi4gVGhlbiBhdCBsYXN0IDxuYW1lPkFyaW92aXN0dXM8L25hbWU+IHNlbnQKICAgICAgICAgICAgICAgICAgICBwYXJ0IG9mIGhpcyBmb3JjZXMgdG8gYXR0YWNrIHRoZSBsZXNzZXIgY2FtcC4gVGhlIGJhdHRsZSB3YXMgdmlnb3JvdXNseQogICAgICAgICAgICAgICAgICAgIG1haW50YWluZWQgb24gYm90aCBzaWRlcyB0aWxsIHRoZSBldmVuaW5nLiBBdCBzdW5zZXQsIGFmdGVyIG1hbnkgd291bmRzIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgaW5mbGljdGVkIGFuZCByZWNlaXZlZCwgPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT4gbGVkIGJhY2sgaGlzIGZvcmNlcyBpbnRvIGNhbXAuCiAgICAgICAgICAgICAgICAgICAgV2hlbiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGlucXVpcmVkIG9mIGhpcyBwcmlzb25lcnMsIHdoZXJlZm9yZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiBkaWQgbm90IGNvbWUgdG8gYW4gZW5nYWdlbWVudCwgaGUgZGlzY292ZXJlZCB0aGlzIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgdGhlIHJlYXNvbi10aGF0IGFtb25nIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGl0IHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBjdXN0b20gZm9yIHRoZWlyIG1hdHJvbnMgdG8gcHJvbm91bmNlIGZyb20gbG90cyBhbmQgZGl2aW5hdGlvbiwgd2hldGhlciBpdCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZXhwZWRpZW50IHRoYXQgdGhlIGJhdHRsZSBzaG91bGQgYmUgZW5nYWdlZCBpbiBvciBub3Q7IHRoYXQgdGhleSBoYWQgc2FpZCwgInRoYXQKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgbm90IHRoZSB3aWxsIG9mIGhlYXZlbiB0aGF0IHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHNob3VsZAogICAgICAgICAgICAgICAgICAgIGNvbnF1ZXIsIGlmIHRoZXkgZW5nYWdlZCBpbiBiYXR0bGUgYmVmb3JlIHRoZSBuZXcgbW9vbi4iIDxtaWxlc3RvbmUgbj0iNTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+VGhlIGRheSBmb2xsb3dpbmcsIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGVmdCB3aGF0IHNlZW1lZCBzdWZmaWNpZW50IGFzCiAgICAgICAgICAgICAgICAgICAgYSBndWFyZCBmb3IgYm90aCBjYW1wczsgW2FuZCB0aGVuXSBkcmV3IHVwIGFsbCB0aGUgYXV4aWxpYXJpZXMgaW4gc2lnaHQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXksIGJlZm9yZSB0aGUgbGVzc2VyIGNhbXAsIGJlY2F1c2UgaGUgd2FzIG5vdCB2ZXJ5IHBvd2VyZnVsIGluIHRoZSBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICBsZWdpb25hcnkgc29sZGllcnMsIGNvbnNpZGVyaW5nIHRoZSBudW1iZXIgb2YgdGhlIGVuZW15OyB0aGF0IFt0aGVyZWJ5XSBoZSBtaWdodAogICAgICAgICAgICAgICAgICAgIG1ha2UgdXNlIG9mIGhpcyBhdXhpbGlhcmllcyBmb3IgYXBwZWFyYW5jZS4gSGUgaGltc2VsZiwgaGF2aW5nIGRyYXduIHVwIGhpcyBhcm15CiAgICAgICAgICAgICAgICAgICAgaW4gdGhyZWUgbGluZXMsIGFkdmFuY2VkIHRvIHRoZSBjYW1wIG9mIHRoZSBlbmVteS4gVGhlbiBhdCBsYXN0IG9mIG5lY2Vzc2l0eSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBkcmV3IHRoZWlyIGZvcmNlcyBvdXQgb2YgY2FtcCwgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZWQgdGhlbSBjYW50b24gYnkgY2FudG9uLCBhdCBlcXVhbCBkaXN0YW5jZXMsIHRoZSA8bmFtZT5IYXJ1ZGVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TWFyY29tYW5uaTwvbmFtZT4sIDxuYW1lPlRyaWJvY2NpPC9uYW1lPiwgPG5hbWU+VmFuZ2lvbmVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TmVtZXRlczwvbmFtZT4sIDxuYW1lPlNlZHVzaWk8L25hbWU+LCA8bmFtZT5TdWV2aTwvbmFtZT47IGFuZAogICAgICAgICAgICAgICAgICAgIHN1cnJvdW5kZWQgdGhlaXIgd2hvbGUgYXJteSB3aXRoIHRoZWlyIGNoYXJpb3RzIGFuZCB3YWdvbnMsIHRoYXQgbm8gaG9wZSBtaWdodAogICAgICAgICAgICAgICAgICAgIGJlIGxlZnQgaW4gZmxpZ2h0LiBPbiB0aGVzZSB0aGV5IHBsYWNlZCB0aGVpciB3b21lbiwgd2hvLCB3aXRoIGRpc2hldmVsZWQgaGFpcgogICAgICAgICAgICAgICAgICAgIGFuZCBpbiB0ZWFycywgZW50cmVhdGVkIHRoZSBzb2xkaWVycywgYXMgdGhleSB3ZW50IGZvcndhcmQgdG8gYmF0dGxlLCBub3QgdG8KICAgICAgICAgICAgICAgICAgICBkZWxpdmVyIHRoZW0gaW50byBzbGF2ZXJ5IHRvIHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4uIDxtaWxlc3RvbmUgbj0iNTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+PG5hbWUgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhcHBvaW50ZWQgb3ZlciBlYWNoIGxlZ2lvbiBhIGxpZXV0ZW5hbnQgYW5kIGEKICAgICAgICAgICAgICAgICAgICBxdWVzdG9yLCB0aGF0IGV2ZXJ5IG9uZSBtaWdodCBoYXZlIHRoZW0gYXMgd2l0bmVzc2VzIG9mIGhpcyB2YWxvci4gSGUgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGJlZ2FuIHRoZSBiYXR0bGUgYXQgdGhlIGhlYWQgb2YgdGhlIHJpZ2h0IHdpbmcsIGJlY2F1c2UgaGUgaGFkIG9ic2VydmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBwYXJ0IG9mIHRoZSBlbmVteSB0byBiZSB0aGUgbGVhc3Qgc3Ryb25nLiBBY2NvcmRpbmdseSBvdXIgbWVuLCB1cG9uIHRoZSBzaWduYWwKICAgICAgICAgICAgICAgICAgICBiZWluZyBnaXZlbiwgdmlnb3JvdXNseSBtYWRlIGFuIGF0dGFjayB1cG9uIHRoZSBlbmVteSwgYW5kIHRoZSBlbmVteSBzbyBzdWRkZW5seQogICAgICAgICAgICAgICAgICAgIGFuZCByYXBpZGx5IHJ1c2hlZCBmb3J3YXJkLCB0aGF0IHRoZXJlIHdhcyBubyB0aW1lIGZvciBjYXN0aW5nIHRoZSBqYXZlbGlucyBhdAogICAgICAgICAgICAgICAgICAgIHRoZW0uIFRocm93aW5nIGFzaWRlIFt0aGVyZWZvcmVdIHRoZWlyIGphdmVsaW5zLCB0aGV5IGZvdWdodCB3aXRoIHN3b3JkcyBoYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgaGFuZC4gQnV0IHRoZSA8bmFtZSB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCBhY2NvcmRpbmcgdG8gdGhlaXIgY3VzdG9tLAogICAgICAgICAgICAgICAgICAgIHJhcGlkbHkgZm9ybWluZyBhIHBoYWxhbngsIHN1c3RhaW5lZCB0aGUgYXR0YWNrIG9mIG91ciBzd29yZHMuIFRoZXJlIHdlcmUgZm91bmQKICAgICAgICAgICAgICAgICAgICB2ZXJ5IG1hbnkgb2Ygb3VyIHNvbGRpZXJzIHdobyBsZWFwZWQgdXBvbiB0aGUgcGhhbGFueCwgYW5kIHdpdGggdGhlaXIgaGFuZHMgdG9yZQogICAgICAgICAgICAgICAgICAgIGF3YXkgdGhlIHNoaWVsZHMsIGFuZCB3b3VuZGVkIHRoZSBlbmVteSBmcm9tIGFib3ZlLiBBbHRob3VnaCB0aGUgYXJteSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSB3YXMgcm91dGVkIG9uIHRoZSBsZWZ0IHdpbmcgYW5kIHB1dCB0byBmbGlnaHQsIHRoZXkgW3N0aWxsXSBwcmVzc2VkCiAgICAgICAgICAgICAgICAgICAgaGVhdmlseSBvbiBvdXIgbWVuIGZyb20gdGhlIHJpZ2h0IHdpbmcsIGJ5IHRoZSBncmVhdCBudW1iZXIgb2YgdGhlaXIgdHJvb3BzLiBPbgogICAgICAgICAgICAgICAgICAgIG9ic2VydmluZyB3aGljaCwgPG5hbWUgdHlwZT0icGVycyI+UC4gQ3Jhc3N1czwvbmFtZT4sIGEgeW91bmcgbWFuLCB3aG8gY29tbWFuZGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhdmFscnktYXMgaGUgd2FzIG1vcmUgZGlzZW5nYWdlZCB0aGFuIHRob3NlIHdobyB3ZXJlIGVtcGxveWVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGZpZ2h0LXNlbnQgdGhlIHRoaXJkIGxpbmUgYXMgYSByZWxpZWYgdG8gb3VyIG1lbiB3aG8gd2VyZSBpbiBkaXN0cmVzcy4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8cD5UaGVyZXVwb24gdGhlIGVuZ2FnZW1lbnQgd2FzIHJlbmV3ZWQsIGFuZCBhbGwgdGhlIGVuZW15IHR1cm5lZCB0aGVpciBiYWNrcywgbm9yCiAgICAgICAgICAgICAgICAgICAgZGlkIHRoZXkgY2Vhc2UgdG8gZmxlZSB1bnRpbCB0aGV5IGFycml2ZWQgYXQgdGhlIHJpdmVyIDxuYW1lIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYWJvdXQgZmlmdHkgbWlsZXMgZnJvbSB0aGF0IHBsYWNlLiBUaGVyZSBzb21lIGZldywgZWl0aGVyIHJlbHlpbmcgb24KICAgICAgICAgICAgICAgICAgICB0aGVpciBzdHJlbmd0aCwgZW5kZWF2b3JlZCB0byBzd2ltIG92ZXIsIG9yLCBmaW5kaW5nIGJvYXRzLCBwcm9jdXJlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHNhZmV0eS4gQW1vbmcgdGhlIGxhdHRlciB3YXMgPG5hbWU+QXJpb3Zpc3R1czwvbmFtZT4sIHdobyBtZWV0aW5nIHdpdGggYSBzbWFsbAogICAgICAgICAgICAgICAgICAgIHZlc3NlbCB0aWVkIHRvIHRoZSBiYW5rLCBlc2NhcGVkIGluIGl0OyBvdXIgaG9yc2UgcHVyc3VlZCBhbmQgc2xldyBhbGwgdGhlIHJlc3QKICAgICAgICAgICAgICAgICAgICBvZiB0aGVtLiA8bmFtZT5BcmlvdmlzdHVzPC9uYW1lPiBoYWQgdHdvIHdpdmVzLCBvbmUgYSA8bmFtZT5TdWV2YW48L25hbWU+IGJ5CiAgICAgICAgICAgICAgICAgICAgbmF0aW9uLCB3aG9tIGhlIGJyb3VnaHQgd2l0aCBoaW0gZnJvbSBob21lOyB0aGUgb3RoZXIgYSA8bmFtZT5Ob3JpY2FuPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB0aGUgc2lzdGVyIG9mIGtpbmcgPG5hbWU+Vm9jaW9uPC9uYW1lPiwgd2hvbSBoZSBoYWQgbWFycmllZCBpbiA8bmFtZSBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBzaGUgaGF2aW5nIGJlZW4gc2VudCBbdGhpdGhlciBmb3IgdGhhdCBwdXJwb3NlXSBieSBoZXIKICAgICAgICAgICAgICAgICAgICBicm90aGVyLiBCb3RoIHBlcmlzaGVkIGluIHRoYXQgZmxpZ2h0LiBPZiB0aGVpciB0d28gZGF1Z2h0ZXJzLCBvbmUgd2FzIHNsYWluLAogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlciBjYXB0dXJlZC4gPG5hbWUgdHlwZT0icGVycyI+Qy4gVmFsZXJpdXMgUHJvY2lsbHVzPC9uYW1lPiwgYXMgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgZHJhZ2dlZCBieSBoaXMgZ3VhcmRzIGluIHRoZSBmaWdodCwgYm91bmQgd2l0aCBhIHRyaXBsZSBjaGFpbiwgZmVsbCBpbnRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGhhbmRzIG9mIDxuYW1lIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGltc2VsZiwgYXMgaGUgd2FzIHB1cnN1aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15IHdpdGggaGlzIGNhdmFscnkuIFRoaXMgY2lyY3Vtc3RhbmNlIGluZGVlZCBhZmZvcmRlZCA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG5vIGxlc3MgcGxlYXN1cmUgdGhhbiB0aGUgdmljdG9yeSBpdHNlbGY7IGJlY2F1c2UgaGUgc2F3IGEKICAgICAgICAgICAgICAgICAgICBtYW4gb2YgdGhlIGZpcnN0IHJhbmsgaW4gdGhlIHByb3ZpbmNlIG9mIDxuYW1lIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGhpcyBpbnRpbWF0ZSBhY3F1YWludGFuY2UKICAgICAgICAgICAgICAgICAgICBhbmQgZnJpZW5kLCByZXNjdWVkIGZyb20gdGhlIGhhbmQgb2YgdGhlIGVuZW15LCBhbmQgcmVzdG9yZWQgdG8gaGltLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIGZvcnR1bmUgaGFkIG5vdCBkaW1pbmlzaGVkIGF1Z2h0IG9mIHRoZSBqb3kgYW5kIGV4dWx0YXRpb24gW29mIHRoYXQgZGF5XSBieSBoaXMKICAgICAgICAgICAgICAgICAgICBkZXN0cnVjdGlvbi4gSGUgPG5hbWU+W1Byb2NpbGx1c108L25hbWU+IHNhaWQgdGhhdCwgaW4gaGlzIG93biBwcmVzZW5jZSwgdGhlCiAgICAgICAgICAgICAgICAgICAgbG90cyBoYWQgYmVlbiB0aHJpY2UgY29uc3VsdGVkIHJlc3BlY3RpbmcgaGltLCB3aGV0aGVyIGhlIHNob3VsZCBpbW1lZGlhdGVseSBiZQogICAgICAgICAgICAgICAgICAgIHB1dCB0byBkZWF0aCBieSBmaXJlLCBvciBiZSByZXNlcnZlZCBmb3IgYW5vdGhlciB0aW1lOiB0aGF0IGJ5IHRoZSBmYXZvciBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBsb3RzIGhlIHdhcyB1bmluanVyZWQuIDxuYW1lIHR5cGU9InBlcnMiPk0uIE1ldHRpdXM8L25hbWU+LCBhbHNvLCB3YXMgZm91bmQgYW5kCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBiYWNrIHRvIGhpbSA8bmFtZT5bQ2Flc2FyPC9uYW1lPi5dIDxtaWxlc3RvbmUgbj0iNTQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPHA+VGhpcyBiYXR0bGUgaGF2aW5nIGJlZW4gcmVwb3J0ZWQgYmV5b25kIHRoZSA8bmFtZSBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHRoZSA8bmFtZT5TdWV2aTwvbmFtZT4sIHdobyBoYWQgY29tZSB0byB0aGUgYmFua3Mgb2YgdGhhdCByaXZlciwgYmVnYW4KICAgICAgICAgICAgICAgICAgICB0byByZXR1cm4gaG9tZSwgd2hlbiB0aGUgPG5hbWU+VWJpaTwvbmFtZT4sIHdobyBkd2VsdCBuZWFyZXN0IHRvIHRoZSA8bmFtZSBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHB1cnN1aW5nIHRoZW0sIHdoaWxlIG11Y2ggYWxhcm1lZCwgc2xldyBhIGdyZWF0IG51bWJlciBvZiB0aGVtLiA8bmFtZSB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhdmluZyBjb25jbHVkZWQgdHdvIHZlcnkgaW1wb3J0YW50IHdhcnMgaW4gb25lCiAgICAgICAgICAgICAgICAgICAgY2FtcGFpZ24sIGNvbmR1Y3RlZCBoaXMgYXJteSBpbnRvIHdpbnRlciBxdWFydGVycyBhbW9uZyB0aGUKICAgICAgICAgICAgICAgICAgICA8bmFtZT5TZXF1YW5pPC9uYW1lPiwgYSBsaXR0bGUgZWFybGllciB0aGFuIHRoZSBzZWFzb24gb2YgdGhlIHllYXIgcmVxdWlyZWQuIEhlCiAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkIDxuYW1lPkxhYmllbnVzPC9uYW1lPiBvdmVyIHRoZSB3aW50ZXItcXVhcnRlcnMsIGFuZCBzZXQgb3V0IGluIHBlcnNvbgogICAgICAgICAgICAgICAgICAgIGZvciBIaXRoZXIgPG5hbWUga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB0byBob2xkIHRoZSBhc3NpemVzLjwvcD4KICAgICAgICAgICAgPC9kaXYxPgogICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0iY2hhcHRlciIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBpcyBkaXZpZGVkIGludG8gdGhyZWUgcGFydHMsIG9uZSBvZiB3aGljaCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkJlbGdhZTwvbmFtZT4gaW5oYWJpdCwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5BcXVpdGFuaTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBhbm90aGVyLCB0aG9zZSB3aG8gaW4gdGhlaXIgb3duIGxhbmd1YWdlIGFyZSBjYWxsZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkNlbHRzPC9uYW1lPiwgaW4gb3VyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sIHRoZSB0aGlyZC4gQWxsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgZGlmZmVyIGZyb20gZWFjaCBvdGhlciBpbiBsYW5ndWFnZSwgY3VzdG9tcyBhbmQgbGF3cy4gVGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyNDEyMyIgcmVnPSJHYXJvbm5lIFstMC42LDQ1LjMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXJvbm5lPC9uYW1lPiBzZXBhcmF0ZXMgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkFxdWl0YW5pPC9uYW1lPjsgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwOTMyNyIgcmVnPSJNYXJuZSBbNC4xODMsNDguOTE2XSAocml2ZXIpLCBDaGFtcGFnbmUtQXJkZW5uZSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDkzMjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwOTMyNyI+TWFybmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA5NzA3IiByZWc9IlNlaW5lIFswLjQzMyw0OS40MzNdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA5NzA3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDk3MDciPlNlaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBzZXBhcmF0ZSB0aGVtIGZyb20gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPi4gT2YgYWxsIHRoZXNlLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+IGFyZSB0aGUgYnJhdmVzdCwgYmVjYXVzZSB0aGV5IGFyZSBmdXJ0aGVzdCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdmlsaXphdGlvbiBhbmQgcmVmaW5lbWVudCBvZiBbb3VyXSBQcm92aW5jZSwgYW5kIG1lcmNoYW50cyBsZWFzdCBmcmVxdWVudGx5CiAgICAgICAgICAgICAgICAgICAgcmVzb3J0IHRvIHRoZW0sIGFuZCBpbXBvcnQgdGhvc2UgdGhpbmdzIHdoaWNoIHRlbmQgdG8gZWZmZW1pbmF0ZSB0aGUgbWluZDsgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhleSBhcmUgdGhlIG5lYXJlc3QgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgd2hvIGR3ZWxsIGJleW9uZAogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCB3aXRoIHdob20gdGhleSBhcmUgY29udGludWFsbHkgd2FnaW5nIHdhcjsgZm9yIHdoaWNoIHJlYXNvbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiBhbHNvIHN1cnBhc3MgdGhlIHJlc3Qgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gaW4gdmFsb3IsIGFzIHRoZXkgY29udGVuZCB3aXRoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gaW4gYWxtb3N0IGRhaWx5IGJhdHRsZXMsIHdoZW4gdGhleSBlaXRoZXIgcmVwZWwKICAgICAgICAgICAgICAgICAgICB0aGVtIGZyb20gdGhlaXIgb3duIHRlcnJpdG9yaWVzLCBvciB0aGVtc2VsdmVzIHdhZ2Ugd2FyIG9uIHRoZWlyIGZyb250aWVycy4gT25lCiAgICAgICAgICAgICAgICAgICAgcGFydCBvZiB0aGVzZSwgd2hpY2ggaXQgaGFzIGJlZW4gc2FpZCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgb2NjdXB5LCB0YWtlcyBpdHMgYmVnaW5uaW5nIGF0IHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDIzODkwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiPlJob25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPjsgaXQgaXMgYm91bmRlZCBieSB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI0MTIzIiByZWc9Ikdhcm9ubmUgWy0wLjYsNDUuMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhcm9ubmU8L25hbWU+LCB0aGUgb2NlYW4sIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+OyBpdCBib3JkZXJzLCB0b28sIG9uIHRoZSBzaWRlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBhbmQgc3RyZXRjaGVzIHRvd2FyZCB0aGUgbm9ydGguIFRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gcmlzZXMgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBleHRyZW1lIGZyb250aWVyIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgZXh0ZW5kIHRvIHRoZSBsb3dlciBwYXJ0CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT47IGFuZCBsb29rIHRvd2FyZCB0aGUgbm9ydGggYW5kIHRoZSByaXNpbmcgc3VuLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI4NzgiIHJlZz0iQXF1aXRhaW5lIFsxLDQ0LjU4M10gKHJlZ2lvbiksIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyODc4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI4NzgiPkFxdWl0YW5pYTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gZXh0ZW5kcyBmcm9tIHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjQxMjMiIHJlZz0iR2Fyb25uZSBbLTAuNiw0NS4zM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2Fyb25uZTwvbmFtZT4gdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGxhY2UiPlB5cmVuYWVhbiBtb3VudGFpbnM8L25hbWU+IGFuZCB0byB0aGF0IHBhcnQgb2YgdGhlIG9jZWFuIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaXMgbmVhciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiIHJlZz0iU3BhaW4gWy00LDQwXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+U3BhaW48L25hbWU+OiBpdCBsb29rcyBiZXR3ZWVuIHRoZQogICAgICAgICAgICAgICAgICAgIHNldHRpbmcgb2YgdGhlIHN1biwgYW5kIHRoZSBub3J0aCBzdGFyLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gaXMgZGl2aWRlZCBpbnRvIHRocmVlIHBhcnRzLCBvbmUgb2Ygd2hpY2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5CZWxnYWU8L25hbWU+IGluaGFiaXQsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+QXF1aXRhbmk8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciwgdGhvc2Ugd2hvIGluIHRoZWlyIG93biBsYW5ndWFnZSBhcmUgY2FsbGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5DZWx0czwvbmFtZT4sIGluIG91ciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCB0aGUgdGhpcmQuIEFsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIGRpZmZlciBmcm9tIGVhY2ggb3RoZXIgaW4gbGFuZ3VhZ2UsIGN1c3RvbXMgYW5kIGxhd3MuIFRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjQxMjMiIHJlZz0iR2Fyb25uZSBbLTAuNiw0NS4zM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2Fyb25uZTwvbmFtZT4gc2VwYXJhdGVzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5BcXVpdGFuaTwvbmFtZT47IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDkzMjciIHJlZz0iTWFybmUgWzQuMTgzLDQ4LjkxNl0gKHJpdmVyKSwgQ2hhbXBhZ25lLUFyZGVubmUsIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA5MzI3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDkzMjciPk1hcm5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBhbmQgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA5MzI3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDkzMjciPk1hcm5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA5NzA3IiByZWc9IlNlaW5lIFswLjQzMyw0OS40MzNdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA5NzA3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDk3MDciPlNlaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBzZXBhcmF0ZSB0aGVtIGZyb20gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA5NzA3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDk3MDciPlNlaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+LiBPZiBhbGwgdGhlc2UsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gYXJlIHRoZSBicmF2ZXN0LCBiZWNhdXNlIHRoZXkgYXJlIGZ1cnRoZXN0IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgY2l2aWxpemF0aW9uIGFuZCByZWZpbmVtZW50IG9mIFtvdXJdIFByb3ZpbmNlLCBhbmQgbWVyY2hhbnRzIGxlYXN0IGZyZXF1ZW50bHkKICAgICAgICAgICAgICAgICAgICByZXNvcnQgdG8gdGhlbSwgYW5kIGltcG9ydCB0aG9zZSB0aGluZ3Mgd2hpY2ggdGVuZCB0byBlZmZlbWluYXRlIHRoZSBtaW5kOyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSB0aGUgbmVhcmVzdCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCB3aG8gZHdlbGwgYmV5b25kCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHdpdGggd2hvbSB0aGV5IGFyZSBjb250aW51YWxseSB3YWdpbmcgd2FyOyBmb3Igd2hpY2ggcmVhc29uIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gYWxzbyBzdXJwYXNzIHRoZSByZXN0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IGluIHZhbG9yLCBhcyB0aGV5IGNvbnRlbmQgd2l0aCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGluIGFsbW9zdCBkYWlseSBiYXR0bGVzLCB3aGVuIHRoZXkgZWl0aGVyIHJlcGVsCiAgICAgICAgICAgICAgICAgICAgdGhlbSBmcm9tIHRoZWlyIG93biB0ZXJyaXRvcmllcywgb3IgdGhlbXNlbHZlcyB3YWdlIHdhciBvbiB0aGVpciBmcm9udGllcnMuIE9uZQogICAgICAgICAgICAgICAgICAgIHBhcnQgb2YgdGhlc2UsIHdoaWNoIGl0IGhhcyBiZWVuIHNhaWQgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIG9jY3VweSwgdGFrZXMgaXRzIGJlZ2lubmluZyBhdCB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDIzODkwIiByZWc9IlJob25lIFs0LjgzMyw0My4zMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAyMzg5MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDIzODkwIj5SaG9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT47IGl0IGlzIGJvdW5kZWQgYnkgdGhlIHJpdmVyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDIzODkwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiPlJob25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI0MTIzIiByZWc9Ikdhcm9ubmUgWy0wLjYsNDUuMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhcm9ubmU8L25hbWU+LCB0aGUgb2NlYW4sIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+OyBpdCBib3JkZXJzLCB0b28sIG9uIHRoZSBzaWRlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBhbmQgc3RyZXRjaGVzIHRvd2FyZCB0aGUgbm9ydGguIFRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiByaXNlcyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGV4dHJlbWUgZnJvbnRpZXIgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBleHRlbmQgdG8gdGhlIGxvd2VyIHBhcnQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPjsgYW5kIGxvb2sgdG93YXJkIHRoZSBub3J0aCBhbmQgdGhlIHJpc2luZyBzdW4uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyODc4IiByZWc9IkFxdWl0YWluZSBbMSw0NC41ODNdIChyZWdpb24pLCBGcmFuY2UsIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjg3OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyODc4Ij5BcXVpdGFuaWE8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+IGV4dGVuZHMgZnJvbSB0aGUgcml2ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI4NzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg3OCI+QXF1aXRhbmlhPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI0MTIzIiByZWc9Ikdhcm9ubmUgWy0wLjYsNDUuMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhcm9ubmU8L25hbWU+IHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBsYWNlIj5QeXJlbmFlYW4gbW91bnRhaW5zPC9uYW1lPiBhbmQgdG8gdGhhdCBwYXJ0IG9mIHRoZSBvY2VhbiB3aGljaAogICAgICAgICAgICAgICAgICAgIGlzIG5lYXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDk1IiByZWc9IlNwYWluIFstNCw0MF0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlNwYWluPC9uYW1lPjogaXQgbG9va3MgYmV0d2VlbiB0aGUKICAgICAgICAgICAgICAgICAgICBzZXR0aW5nIG9mIHRoZSBzdW4sIGFuZCB0aGUgbm9ydGggc3Rhci4gPC90cmFuc2xhdGlvbj4="
translation['1.2'] = ""
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5kdWNlZCBieSB0aGVzZSBjb25zaWRlcmF0aW9ucywgYW5kIGluZmx1ZW5jZWQgYnkgdGhlIGF1dGhvcml0eSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yZ2V0b3JpeDwvbmFtZT4sIHRoZXkgZGV0ZXJtaW5lZCB0byBwcm92aWRlIHN1Y2ggdGhpbmdzIGFzIHdlcmUKICAgICAgICAgICAgICAgICAgICBuZWNlc3NhcnkgZm9yIHRoZWlyIGV4cGVkaXRpb24tdG8gYnV5IHVwIGFzIGdyZWF0IGEgbnVtYmVyIGFzIHBvc3NpYmxlIG9mIGJlYXN0cwogICAgICAgICAgICAgICAgICAgIG9mIGJ1cmRlbiBhbmQgd2Fnb25zLXRvIG1ha2UgdGhlaXIgc293aW5ncyBhcyBsYXJnZSBhcyBwb3NzaWJsZSwgc28gdGhhdCBvbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIG1hcmNoIHBsZW50eSBvZiBjb3JuIG1pZ2h0IGJlIGluIHN0b3JlLWFuZCB0byBlc3RhYmxpc2ggcGVhY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kc2hpcCB3aXRoIHRoZSBuZWlnaGJvcmluZyBzdGF0ZXMuIFRoZXkgcmVja29uZWQgdGhhdCBhIHRlcm0gb2YgdHdvIHllYXJzCiAgICAgICAgICAgICAgICAgICAgd291bGQgYmUgc3VmZmljaWVudCBmb3IgdGhlbSB0byBleGVjdXRlIHRoZWlyIGRlc2lnbnM7IHRoZXkgZml4IGJ5IGRlY3JlZSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZSBmb3IgdGhlIHRoaXJkIHllYXIuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3JnZXRvcml4PC9uYW1lPiBpcyBjaG9zZW4gdG8gY29tcGxldGUgdGhlc2UKICAgICAgICAgICAgICAgICAgICBhcnJhbmdlbWVudHMuIEhlIHRvb2sgdXBvbiBoaW1zZWxmIHRoZSBvZmZpY2Ugb2YgZW1iYXNzYWRvciB0byB0aGUgc3RhdGVzOiBvbgogICAgICAgICAgICAgICAgICAgIHRoaXMgam91cm5leSBoZSBwZXJzdWFkZXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXN0aWN1czwvbmFtZT4sIHRoZSBzb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRhbWFudGFsZWRlczwvbmFtZT4gKG9uZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiwgd2hvc2UgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgaGFkIHBvc3Nlc3NlZCB0aGUgc292ZXJlaWdudHkgYW1vbmcgdGhlIHBlb3BsZSBmb3IgbWFueSB5ZWFycywgYW5kIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgc3R5bGVkICJmcmllbmQiIGJ5IHRoZSBzZW5hdGUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlKSwKICAgICAgICAgICAgICAgICAgICB0byBzZWl6ZSB1cG9uIHRoZSBzb3ZlcmVpZ250eSBpbiBoaXMgb3duIHN0YXRlLCB3aGljaCBoaXMgZmF0aGVyIGhhZCBoZWxkIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIGhpbSwgYW5kIGhlIGxpa2V3aXNlIHBlcnN1YWRlcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5vcml4PC9uYW1lPiwgYW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHRoZSBicm90aGVyIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aXRpYWN1czwvbmFtZT4sIHdobyBhdCB0aGF0IHRpbWUgcG9zc2Vzc2VkIHRoZSBjaGllZgogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eSBpbiB0aGUgc3RhdGUsIGFuZCB3YXMgZXhjZWVkaW5nbHkgYmVsb3ZlZCBieSB0aGUgcGVvcGxlLCB0byBhdHRlbXB0CiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUsIGFuZCBnaXZlcyBoaW0gaGlzIGRhdWdodGVyIGluIG1hcnJpYWdlLiBIZSBwcm92ZXMgdG8gdGhlbSB0aGF0IHRvCiAgICAgICAgICAgICAgICAgICAgYWNjb21wbGlzaCB0aGVpciBhdHRlbXB0cyB3YXMgYSB0aGluZyB2ZXJ5IGVhc3kgdG8gYmUgZG9uZSwgYmVjYXVzZSBoZSBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgd291bGQgb2J0YWluIHRoZSBnb3Zlcm5tZW50IG9mIGhpcyBvd24gc3RhdGU7IHRoYXQgdGhlcmUgd2FzIG5vIGRvdWJ0IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gd2VyZSB0aGUgbW9zdCBwb3dlcmZ1bCBvZiB0aGUgd2hvbGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+OyBoZSBhc3N1cmVzIHRoZW0gdGhhdCBoZSB3aWxsLCB3aXRoIGhpcyBvd24gZm9yY2VzIGFuZCBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgYXJteSwgYWNxdWlyZSB0aGUgc292ZXJlaWdudHkgZm9yIHRoZW0uIEluY2l0ZWQgYnkgdGhpcyBzcGVlY2gsIHRoZXkgZ2l2ZSBhCiAgICAgICAgICAgICAgICAgICAgcGxlZGdlIGFuZCBvYXRoIHRvIG9uZSBhbm90aGVyLCBhbmQgaG9wZSB0aGF0LCB3aGVuIHRoZXkgaGF2ZSBzZWl6ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgc292ZXJlaWdudHksIHRoZXkgd2lsbCwgYnkgbWVhbnMgb2YgdGhlIHRocmVlIG1vc3QgcG93ZXJmdWwgYW5kIHZhbGlhbnQgbmF0aW9ucywKICAgICAgICAgICAgICAgICAgICBiZSBlbmFibGVkIHRvIG9idGFpbiBwb3NzZXNzaW9uIG9mIHRoZSB3aG9sZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3JnZXRvcml4PC9uYW1lPiwgdGhleSBkZXRlcm1pbmVkIHRvIHByb3ZpZGUgc3VjaCB0aGluZ3MgYXMgd2VyZQogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSBmb3IgdGhlaXIgZXhwZWRpdGlvbi10byBidXkgdXAgYXMgZ3JlYXQgYSBudW1iZXIgYXMgcG9zc2libGUgb2YgYmVhc3RzCiAgICAgICAgICAgICAgICAgICAgb2YgYnVyZGVuIGFuZCB3YWdvbnMtdG8gbWFrZSB0aGVpciBzb3dpbmdzIGFzIGxhcmdlIGFzIHBvc3NpYmxlLCBzbyB0aGF0IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbWFyY2ggcGxlbnR5IG9mIGNvcm4gbWlnaHQgYmUgaW4gc3RvcmUtYW5kIHRvIGVzdGFibGlzaCBwZWFjZSBhbmQKICAgICAgICAgICAgICAgICAgICBmcmllbmRzaGlwIHdpdGggdGhlIG5laWdoYm9yaW5nIHN0YXRlcy4gVGhleSByZWNrb25lZCB0aGF0IGEgdGVybSBvZiB0d28geWVhcnMKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBzdWZmaWNpZW50IGZvciB0aGVtIHRvIGV4ZWN1dGUgdGhlaXIgZGVzaWduczsgdGhleSBmaXggYnkgZGVjcmVlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlIGZvciB0aGUgdGhpcmQgeWVhci4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5PcmdldG9yaXg8L25hbWU+IGlzIGNob3NlbiB0byBjb21wbGV0ZSB0aGVzZQogICAgICAgICAgICAgICAgICAgIGFycmFuZ2VtZW50cy4gSGUgdG9vayB1cG9uIGhpbXNlbGYgdGhlIG9mZmljZSBvZiBlbWJhc3NhZG9yIHRvIHRoZSBzdGF0ZXM6IG9uCiAgICAgICAgICAgICAgICAgICAgdGhpcyBqb3VybmV5IGhlIHBlcnN1YWRlcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhc3RpY3VzPC9uYW1lPiwgdGhlIHNvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdGFtYW50YWxlZGVzPC9uYW1lPiAob25lIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+LCB3aG9zZSBmYXRoZXIKICAgICAgICAgICAgICAgICAgICBoYWQgcG9zc2Vzc2VkIHRoZSBzb3ZlcmVpZ250eSBhbW9uZyB0aGUgcGVvcGxlIGZvciBtYW55IHllYXJzLCBhbmQgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBzdHlsZWQgImZyaWVuZCIgYnkgdGhlIHNlbmF0ZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUpLAogICAgICAgICAgICAgICAgICAgIHRvIHNlaXplIHVwb24gdGhlIHNvdmVyZWlnbnR5IGluIGhpcyBvd24gc3RhdGUsIHdoaWNoIGhpcyBmYXRoZXIgaGFkIGhlbGQgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgaGltLCBhbmQgaGUgbGlrZXdpc2UgcGVyc3VhZGVzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbm9yaXg8L25hbWU+LCBhbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVhbjwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhlIGJyb3RoZXIgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZpdGlhY3VzPC9uYW1lPiwgd2hvIGF0IHRoYXQgdGltZSBwb3NzZXNzZWQgdGhlIGNoaWVmCiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXR5IGluIHRoZSBzdGF0ZSwgYW5kIHdhcyBleGNlZWRpbmdseSBiZWxvdmVkIGJ5IHRoZSBwZW9wbGUsIHRvIGF0dGVtcHQKICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSwgYW5kIGdpdmVzIGhpbSBoaXMgZGF1Z2h0ZXIgaW4gbWFycmlhZ2UuIEhlIHByb3ZlcyB0byB0aGVtIHRoYXQgdG8KICAgICAgICAgICAgICAgICAgICBhY2NvbXBsaXNoIHRoZWlyIGF0dGVtcHRzIHdhcyBhIHRoaW5nIHZlcnkgZWFzeSB0byBiZSBkb25lLCBiZWNhdXNlIGhlIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICB3b3VsZCBvYnRhaW4gdGhlIGdvdmVybm1lbnQgb2YgaGlzIG93biBzdGF0ZTsgdGhhdCB0aGVyZSB3YXMgbm8gZG91YnQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiB3ZXJlIHRoZSBtb3N0IHBvd2VyZnVsIG9mIHRoZSB3aG9sZSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT47IGhlIGFzc3VyZXMgdGhlbSB0aGF0IGhlIHdpbGwsIHdpdGggaGlzIG93biBmb3JjZXMgYW5kIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBhcm15LCBhY3F1aXJlIHRoZSBzb3ZlcmVpZ250eSBmb3IgdGhlbS4gSW5jaXRlZCBieSB0aGlzIHNwZWVjaCwgdGhleSBnaXZlIGEKICAgICAgICAgICAgICAgICAgICBwbGVkZ2UgYW5kIG9hdGggdG8gb25lIGFub3RoZXIsIGFuZCBob3BlIHRoYXQsIHdoZW4gdGhleSBoYXZlIHNlaXplZCB0aGUKICAgICAgICAgICAgICAgICAgICBzb3ZlcmVpZ250eSwgdGhleSB3aWxsLCBieSBtZWFucyBvZiB0aGUgdGhyZWUgbW9zdCBwb3dlcmZ1bCBhbmQgdmFsaWFudCBuYXRpb25zLAogICAgICAgICAgICAgICAgICAgIGJlIGVuYWJsZWQgdG8gb2J0YWluIHBvc3Nlc3Npb24gb2YgdGhlIHdob2xlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiB0aGlzIHNjaGVtZSB3YXMgZGlzY2xvc2VkIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IGJ5CiAgICAgICAgICAgICAgICAgICAgaW5mb3JtZXJzLCB0aGV5LCBhY2NvcmRpbmcgdG8gdGhlaXIgY3VzdG9tLCBjb21wZWxsZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5PcmdldG9yaXg8L25hbWU+IHRvCiAgICAgICAgICAgICAgICAgICAgcGxlYWQgaGlzIGNhdXNlIGluIGNoYWluczsgaXQgd2FzIHRoZSBsYXcgdGhhdCB0aGUgcGVuYWx0eSBvZiBiZWluZyBidXJuZWQgYnkKICAgICAgICAgICAgICAgICAgICBmaXJlIHNob3VsZCBhd2FpdCBoaW0gaWYgY29uZGVtbmVkLiBPbiB0aGUgZGF5IGFwcG9pbnRlZCBmb3IgdGhlIHBsZWFkaW5nIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGNhdXNlLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yZ2V0b3JpeDwvbmFtZT4gZHJldyB0b2dldGhlciBmcm9tIGFsbCBxdWFydGVycyB0byB0aGUgY291cnQsIGFsbAogICAgICAgICAgICAgICAgICAgIGhpcyB2YXNzYWxzIHRvIHRoZSBudW1iZXIgb2YgdGVuIHRob3VzYW5kIHBlcnNvbnM7IGFuZCBsZWQgdG9nZXRoZXIgdG8gdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBwbGFjZSBhbGwgaGlzIGRlcGVuZGVudHMgYW5kIGRlYnRvci1ib25kc21lbiwgb2Ygd2hvbSBoZSBoYWQgYSBncmVhdCBudW1iZXI7IGJ5CiAgICAgICAgICAgICAgICAgICAgbWVhbnMgb2YgdGhvc2UgaGUgcmVzY3VlZCBoaW1zZWxmIGZyb20gW3RoZSBuZWNlc3NpdHkgb2ZdIHBsZWFkaW5nIGhpcyBjYXVzZS4KICAgICAgICAgICAgICAgICAgICBXaGlsZSB0aGUgc3RhdGUsIGluY2Vuc2VkIGF0IHRoaXMgYWN0LCB3YXMgZW5kZWF2b3JpbmcgdG8gYXNzZXJ0IGl0cyByaWdodCBieQogICAgICAgICAgICAgICAgICAgIGFybXMsIGFuZCB0aGUgbWFnaXN0cmF0ZXMgd2VyZSBtdXN0ZXJpbmcgYSBsYXJnZSBib2R5IG9mIG1lbiBmcm9tIHRoZSBjb3VudHJ5LAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yZ2V0b3JpeDwvbmFtZT4gZGllZDsgYW5kIHRoZXJlIGlzIG5vdCB3YW50aW5nIGEgc3VzcGljaW9uLCBhcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiB0aGluaywgb2YgaGlzIGhhdmluZyBjb21taXR0ZWQgc3VpY2lkZS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiBieQogICAgICAgICAgICAgICAgICAgIGluZm9ybWVycywgdGhleSwgYWNjb3JkaW5nIHRvIHRoZWlyIGN1c3RvbSwgY29tcGVsbGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3JnZXRvcml4PC9uYW1lPiB0bwogICAgICAgICAgICAgICAgICAgIHBsZWFkIGhpcyBjYXVzZSBpbiBjaGFpbnM7IGl0IHdhcyB0aGUgbGF3IHRoYXQgdGhlIHBlbmFsdHkgb2YgYmVpbmcgYnVybmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgZmlyZSBzaG91bGQgYXdhaXQgaGltIGlmIGNvbmRlbW5lZC4gT24gdGhlIGRheSBhcHBvaW50ZWQgZm9yIHRoZSBwbGVhZGluZyBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBjYXVzZSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5PcmdldG9yaXg8L25hbWU+IGRyZXcgdG9nZXRoZXIgZnJvbSBhbGwgcXVhcnRlcnMgdG8gdGhlIGNvdXJ0LCBhbGwKICAgICAgICAgICAgICAgICAgICBoaXMgdmFzc2FscyB0byB0aGUgbnVtYmVyIG9mIHRlbiB0aG91c2FuZCBwZXJzb25zOyBhbmQgbGVkIHRvZ2V0aGVyIHRvIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgcGxhY2UgYWxsIGhpcyBkZXBlbmRlbnRzIGFuZCBkZWJ0b3ItYm9uZHNtZW4sIG9mIHdob20gaGUgaGFkIGEgZ3JlYXQgbnVtYmVyOyBieQogICAgICAgICAgICAgICAgICAgIG1lYW5zIG9mIHRob3NlIGhlIHJlc2N1ZWQgaGltc2VsZiBmcm9tIFt0aGUgbmVjZXNzaXR5IG9mXSBwbGVhZGluZyBoaXMgY2F1c2UuCiAgICAgICAgICAgICAgICAgICAgV2hpbGUgdGhlIHN0YXRlLCBpbmNlbnNlZCBhdCB0aGlzIGFjdCwgd2FzIGVuZGVhdm9yaW5nIHRvIGFzc2VydCBpdHMgcmlnaHQgYnkKICAgICAgICAgICAgICAgICAgICBhcm1zLCBhbmQgdGhlIG1hZ2lzdHJhdGVzIHdlcmUgbXVzdGVyaW5nIGEgbGFyZ2UgYm9keSBvZiBtZW4gZnJvbSB0aGUgY291bnRyeSwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5PcmdldG9yaXg8L25hbWU+IGRpZWQ7IGFuZCB0aGVyZSBpcyBub3Qgd2FudGluZyBhIHN1c3BpY2lvbiwgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gdGhpbmssIG9mIGhpcyBoYXZpbmcgY29tbWl0dGVkIHN1aWNpZGUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWZ0ZXIgaGlzIGRlYXRoLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiBuZXZlcnRoZWxlc3MgYXR0ZW1wdCB0bwogICAgICAgICAgICAgICAgICAgIGRvIHRoYXQgd2hpY2ggdGhleSBoYWQgcmVzb2x2ZWQgb24sIG5hbWVseSwgdG8gZ28gZm9ydGggZnJvbSB0aGVpciB0ZXJyaXRvcmllcy4KICAgICAgICAgICAgICAgICAgICBXaGVuIHRoZXkgdGhvdWdodCB0aGF0IHRoZXkgd2VyZSBhdCBsZW5ndGggcHJlcGFyZWQgZm9yIHRoaXMgdW5kZXJ0YWtpbmcsIHRoZXkKICAgICAgICAgICAgICAgICAgICBzZXQgZmlyZSB0byBhbGwgdGhlaXIgdG93bnMsIGluIG51bWJlciBhYm91dCB0d2VsdmUtdG8gdGhlaXIgdmlsbGFnZXMgYWJvdXQgZm91cgogICAgICAgICAgICAgICAgICAgIGh1bmRyZWQtYW5kIHRvIHRoZSBwcml2YXRlIGR3ZWxsaW5ncyB0aGF0IHJlbWFpbmVkOyB0aGV5IGJ1cm4gdXAgYWxsIHRoZSBjb3JuLAogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCB3aGF0IHRoZXkgaW50ZW5kIHRvIGNhcnJ5IHdpdGggdGhlbTsgdGhhdCBhZnRlciBkZXN0cm95aW5nIHRoZSBob3BlIG9mIGEKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaG9tZSwgdGhleSBtaWdodCBiZSB0aGUgbW9yZSByZWFkeSBmb3IgdW5kZXJnb2luZyBhbGwgZGFuZ2Vycy4gVGhleSBvcmRlcgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IG9uZSB0byBjYXJyeSBmb3J0aCBmcm9tIGhvbWUgZm9yIGhpbXNlbGYgcHJvdmlzaW9ucyBmb3IgdGhyZWUgbW9udGhzLAogICAgICAgICAgICAgICAgICAgIHJlYWR5IGdyb3VuZC4gVGhleSBwZXJzdWFkZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5SYXVyYWNpPC9uYW1lPiwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlR1bGluZ2k8L25hbWU+LCBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF0b2JyaWdpPC9uYW1lPiwgdGhlaXIgbmVpZ2hib3JzLCB0bwogICAgICAgICAgICAgICAgICAgIGFkb3B0IHRoZSBzYW1lIHBsYW4sIGFuZCBhZnRlciBidXJuaW5nIGRvd24gdGhlaXIgdG93bnMgYW5kIHZpbGxhZ2VzLCB0byBzZXQgb3V0CiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGVtOiBhbmQgdGhleSBhZG1pdCB0byB0aGVpciBwYXJ0eSBhbmQgdW5pdGUgdG8gdGhlbXNlbHZlcyBhcyBjb25mZWRlcmF0ZXMKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Cb2lpPC9uYW1lPiwgd2hvIGhhZCBkd2VsdCBvbiB0aGUgb3RoZXIgc2lkZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYW5kIGhhZCBjcm9zc2VkIG92ZXIgaW50byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3JpY2FuPC9uYW1lPiB0ZXJyaXRvcnksIGFuZAogICAgICAgICAgICAgICAgICAgIGFzc2F1bHRlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5vcmVpYTwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gbmV2ZXJ0aGVsZXNzIGF0dGVtcHQgdG8KICAgICAgICAgICAgICAgICAgICBkbyB0aGF0IHdoaWNoIHRoZXkgaGFkIHJlc29sdmVkIG9uLCBuYW1lbHksIHRvIGdvIGZvcnRoIGZyb20gdGhlaXIgdGVycml0b3JpZXMuCiAgICAgICAgICAgICAgICAgICAgV2hlbiB0aGV5IHRob3VnaHQgdGhhdCB0aGV5IHdlcmUgYXQgbGVuZ3RoIHByZXBhcmVkIGZvciB0aGlzIHVuZGVydGFraW5nLCB0aGV5CiAgICAgICAgICAgICAgICAgICAgc2V0IGZpcmUgdG8gYWxsIHRoZWlyIHRvd25zLCBpbiBudW1iZXIgYWJvdXQgdHdlbHZlLXRvIHRoZWlyIHZpbGxhZ2VzIGFib3V0IGZvdXIKICAgICAgICAgICAgICAgICAgICBodW5kcmVkLWFuZCB0byB0aGUgcHJpdmF0ZSBkd2VsbGluZ3MgdGhhdCByZW1haW5lZDsgdGhleSBidXJuIHVwIGFsbCB0aGUgY29ybiwKICAgICAgICAgICAgICAgICAgICBleGNlcHQgd2hhdCB0aGV5IGludGVuZCB0byBjYXJyeSB3aXRoIHRoZW07IHRoYXQgYWZ0ZXIgZGVzdHJveWluZyB0aGUgaG9wZSBvZiBhCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvbWUsIHRoZXkgbWlnaHQgYmUgdGhlIG1vcmUgcmVhZHkgZm9yIHVuZGVyZ29pbmcgYWxsIGRhbmdlcnMuIFRoZXkgb3JkZXIKICAgICAgICAgICAgICAgICAgICBldmVyeSBvbmUgdG8gY2FycnkgZm9ydGggZnJvbSBob21lIGZvciBoaW1zZWxmIHByb3Zpc2lvbnMgZm9yIHRocmVlIG1vbnRocywKICAgICAgICAgICAgICAgICAgICByZWFkeSBncm91bmQuIFRoZXkgcGVyc3VhZGUgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmF1cmFjaTwvbmFtZT4sIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UdWxpbmdpPC9uYW1lPiwgYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdG9icmlnaTwvbmFtZT4sIHRoZWlyIG5laWdoYm9ycywgdG8KICAgICAgICAgICAgICAgICAgICBhZG9wdCB0aGUgc2FtZSBwbGFuLCBhbmQgYWZ0ZXIgYnVybmluZyBkb3duIHRoZWlyIHRvd25zIGFuZCB2aWxsYWdlcywgdG8gc2V0IG91dAogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlbTogYW5kIHRoZXkgYWRtaXQgdG8gdGhlaXIgcGFydHkgYW5kIHVuaXRlIHRvIHRoZW1zZWx2ZXMgYXMgY29uZmVkZXJhdGVzCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qm9paTwvbmFtZT4sIHdobyBoYWQgZHdlbHQgb24gdGhlIG90aGVyIHNpZGUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGFuZCBoYWQgY3Jvc3NlZCBvdmVyIGludG8gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3JpY2FuPC9uYW1lPiB0ZXJyaXRvcnksIGFuZAogICAgICAgICAgICAgICAgICAgIGFzc2F1bHRlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5vcmVpYTwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmUgd2VyZSBpbiBhbGwgdHdvIHJvdXRlcywgYnkgd2hpY2ggdGhleSBjb3VsZCBnbyBmb3J0aCBmcm9tIHRoZWlyIGNvdW50cnkgb25lCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiBuYXJyb3cgYW5kIGRpZmZpY3VsdCwgYmV0d2VlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMDkxNzIiIHJlZz0iSnVyYSBbNi41LDQ2Ljc1XSAobW91bnRhaW4pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Nb3VudCBKdXJhPC9uYW1lPiBhbmQgdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAyMzg5MCIgcmVnPSJSaG9uZSBbNC44MzMsNDMuMzMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaG9uZTwvbmFtZT4gKGJ5IHdoaWNoIHNjYXJjZWx5CiAgICAgICAgICAgICAgICAgICAgb25lIHdhZ29uIGF0IGEgdGltZSBjb3VsZCBiZSBsZWQ7IHRoZXJlIHdhcywgbW9yZW92ZXIsIGEgdmVyeSBoaWdoIG1vdW50YWluCiAgICAgICAgICAgICAgICAgICAgb3ZlcmhhbmdpbmcsIHNvIHRoYXQgYSB2ZXJ5IGZldyBtaWdodCBlYXNpbHkgaW50ZXJjZXB0IHRoZW07IHRoZSBvdGhlciwgdGhyb3VnaAogICAgICAgICAgICAgICAgICAgIG91ciBQcm92aW5jZSwgbXVjaCBlYXNpZXIgYW5kIGZyZWVyIGZyb20gb2JzdGFjbGVzLCBiZWNhdXNlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhvbmU8L25hbWU+IGZsb3dzIGJldHdlZW4gdGhlIGJvdW5kYXJpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gYW5kIHRob3NlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbG9icm9nZXM8L25hbWU+LCB3aG8gaGFkIGxhdGVseQogICAgICAgICAgICAgICAgICAgIGJlZW4gc3ViZHVlZCwgYW5kIGlzIGluIHNvbWUgcGxhY2VzIGNyb3NzZWQgYnkgYSBmb3JkLiBUaGUgZnVydGhlc3QgdG93biBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGxvYnJvZ2VzPC9uYW1lPiwgYW5kIHRoZSBuZWFyZXN0IHRvIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgaXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA3Mjc5IiByZWc9IkdlbmV2ZSBbNi4xNSw0Ni4yMTZdIChpbmhhYml0ZWQgcGxhY2UpLCBHZW5ldmUsIFN3aXR6ZXJsYW5kLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HZW5ldmE8L25hbWU+LiBGcm9tIHRoaXMgdG93biBhIGJyaWRnZSBleHRlbmRzIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LiBUaGV5IHRob3VnaHQgdGhhdCB0aGV5IHNob3VsZCBlaXRoZXIgcGVyc3VhZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsb2Jyb2dlczwvbmFtZT4sIGJlY2F1c2UgdGhleSBkaWQgbm90IHNlZW0gYXMgeWV0IHdlbGwtYWZmZWN0ZWQKICAgICAgICAgICAgICAgICAgICB0b3dhcmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLCBvciBjb21wZWwgdGhlbSBieSBmb3JjZSB0bwogICAgICAgICAgICAgICAgICAgIGFsbG93IHRoZW0gdG8gcGFzcyB0aHJvdWdoIHRoZWlyIHRlcnJpdG9yaWVzLiBIYXZpbmcgcHJvdmlkZWQgZXZlcnkgdGhpbmcgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGV4cGVkaXRpb24sIHRoZXkgYXBwb2ludCBhIGRheSwgb24gd2hpY2ggdGhleSBzaG91bGQgYWxsIG1lZXQgb24gdGhlIGJhbmsgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDIzODkwIiByZWc9IlJob25lIFs0LjgzMyw0My4zMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJob25lPC9uYW1lPi4gVGhpcyBkYXkgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGZpZnRoIGJlZm9yZSB0aGUga2FsZW5kcyBvZiA8ZGF0ZSBjbGFzcz0idHJhbnNsYXRpb24iPkFwcmlsPC9kYXRlPiBbaS5lLiB0aGUgMjh0aCBvZgogICAgICAgICAgICAgICAgICAgICAgICA8ZGF0ZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmNoPC9kYXRlPl0sIGluIHRoZSBjb25zdWxzaGlwIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzIFBpc288L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkF1bHVzIEdhYmluaXVzPC9uYW1lPiBbQi5DLiA8ZGF0ZSBhdXRobmFtZT0iLTU4IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNTgiPjU4PC9kYXRlPi5dIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4gbmFycm93IGFuZCBkaWZmaWN1bHQsIGJldHdlZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTA5MTcyIiByZWc9Ikp1cmEgWzYuNSw0Ni43NV0gKG1vdW50YWluKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+TW91bnQgSnVyYTwvbmFtZT4gYW5kIHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhvbmU8L25hbWU+IChieSB3aGljaCBzY2FyY2VseQogICAgICAgICAgICAgICAgICAgIG9uZSB3YWdvbiBhdCBhIHRpbWUgY291bGQgYmUgbGVkOyB0aGVyZSB3YXMsIG1vcmVvdmVyLCBhIHZlcnkgaGlnaCBtb3VudGFpbgogICAgICAgICAgICAgICAgICAgIG92ZXJoYW5naW5nLCBzbyB0aGF0IGEgdmVyeSBmZXcgbWlnaHQgZWFzaWx5IGludGVyY2VwdCB0aGVtOyB0aGUgb3RoZXIsIHRocm91Z2gKICAgICAgICAgICAgICAgICAgICBvdXIgUHJvdmluY2UsIG11Y2ggZWFzaWVyIGFuZCBmcmVlciBmcm9tIG9ic3RhY2xlcywgYmVjYXVzZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDIzODkwIiByZWc9IlJob25lIFs0LjgzMyw0My4zMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJob25lPC9uYW1lPiBmbG93cyBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IGFuZCB0aG9zZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGxvYnJvZ2VzPC9uYW1lPiwgd2hvIGhhZCBsYXRlbHkKICAgICAgICAgICAgICAgICAgICBiZWVuIHN1YmR1ZWQsIGFuZCBpcyBpbiBzb21lIHBsYWNlcyBjcm9zc2VkIGJ5IGEgZm9yZC4gVGhlIGZ1cnRoZXN0IHRvd24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsb2Jyb2dlczwvbmFtZT4sIGFuZCB0aGUgbmVhcmVzdCB0byB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGlzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNzI3OSIgcmVnPSJHZW5ldmUgWzYuMTUsNDYuMjE2XSAoaW5oYWJpdGVkIHBsYWNlKSwgR2VuZXZlLCBTd2l0emVybGFuZCwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2VuZXZhPC9uYW1lPi4gRnJvbSB0aGlzIHRvd24gYSBicmlkZ2UgZXh0ZW5kcyB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPi4gVGhleSB0aG91Z2h0IHRoYXQgdGhleSBzaG91bGQgZWl0aGVyIHBlcnN1YWRlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbG9icm9nZXM8L25hbWU+LCBiZWNhdXNlIHRoZXkgZGlkIG5vdCBzZWVtIGFzIHlldCB3ZWxsLWFmZmVjdGVkCiAgICAgICAgICAgICAgICAgICAgdG93YXJkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgb3IgY29tcGVsIHRoZW0gYnkgZm9yY2UgdG8KICAgICAgICAgICAgICAgICAgICBhbGxvdyB0aGVtIHRvIHBhc3MgdGhyb3VnaCB0aGVpciB0ZXJyaXRvcmllcy4gSGF2aW5nIHByb3ZpZGVkIGV2ZXJ5IHRoaW5nIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBleHBlZGl0aW9uLCB0aGV5IGFwcG9pbnQgYSBkYXksIG9uIHdoaWNoIHRoZXkgc2hvdWxkIGFsbCBtZWV0IG9uIHRoZSBiYW5rIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAyMzg5MCIgcmVnPSJSaG9uZSBbNC44MzMsNDMuMzMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaG9uZTwvbmFtZT4uIFRoaXMgZGF5IHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBmaWZ0aCBiZWZvcmUgdGhlIGthbGVuZHMgb2YgPGRhdGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcHJpbDwvZGF0ZT4gW2kuZS4gdGhlIDI4dGggb2YKICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJjaDwvZGF0ZT5dLCBpbiB0aGUgY29uc3Vsc2hpcCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y2l1cyBQaXNvPC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdWx1cyBHYWJpbml1czwvbmFtZT4gW0IuQy4gPGRhdGUgYXV0aG5hbWU9Ii01OCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTU4Ij41ODwvZGF0ZT4uXSA8L3RyYW5zbGF0aW9uPg=="
translation['1.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiBpdCB3YXMgcmVwb3J0ZWQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRoYXQgdGhleSB3ZXJlIGF0dGVtcHRpbmcKICAgICAgICAgICAgICAgICAgICB0byBtYWtlIHRoZWlyIHJvdXRlIHRocm91Z2ggb3VyIFByb3ZpbmNlIGhlIGhhc3RlbnMgdG8gc2V0IG91dCBmcm9tIHRoZSBjaXR5LAogICAgICAgICAgICAgICAgICAgIGFuZCwgYnkgYXMgZ3JlYXQgbWFyY2hlcyBhcyBoZSBjYW4sIHByb2NlZWRzIHRvIEZ1cnRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgYXJyaXZlcwogICAgICAgICAgICAgICAgICAgIGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNzI3OSIgcmVnPSJHZW5ldmUgWzYuMTUsNDYuMjE2XSAoaW5oYWJpdGVkIHBsYWNlKSwgR2VuZXZlLCBTd2l0emVybGFuZCwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2VuZXZhPC9uYW1lPi4gSGUgb3JkZXJzIHRoZSB3aG9sZSBQcm92aW5jZSBbdG8gZnVybmlzaF0gYXMgZ3JlYXQgYSBudW1iZXIKICAgICAgICAgICAgICAgICAgICBvZiBzb2xkaWVycyBhcyBwb3NzaWJsZSwgYXMgdGhlcmUgd2FzIGluIGFsbCBvbmx5IG9uZSBsZWdpb24gaW4gRnVydGhlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT46IGhlIG9yZGVycyB0aGUgYnJpZGdlIGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNzI3OSIgcmVnPSJHZW5ldmUgWzYuMTUsNDYuMjE2XSAoaW5oYWJpdGVkIHBsYWNlKSwgR2VuZXZlLCBTd2l0emVybGFuZCwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA3Mjc5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDcyNzkiPkdlbmV2YTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gdG8gYmUgYnJva2VuIGRvd24uIFdoZW4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gYXJlCiAgICAgICAgICAgICAgICAgICAgYXBwcml6ZWQgb2YgaGlzIGFycml2YWwgdGhleSBzZW5kIHRvIGhpbSwgYXMgZW1iYXNzYWRvcnMsIHRoZSBtb3N0IGlsbHVzdHJpb3VzCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIHRoZWlyIHN0YXRlIChpbiB3aGljaCBlbWJhc3N5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TnVtZWl1czwvbmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVydWRvY3RpdXM8L25hbWU+IGhlbGQgdGhlIGNoaWVmIHBsYWNlKSwgdG8gc2F5ICJ0aGF0IGl0IHdhcyB0aGVpcgogICAgICAgICAgICAgICAgICAgIGludGVudGlvbiB0byBtYXJjaCB0aHJvdWdoIHRoZSBQcm92aW5jZSB3aXRob3V0IGRvaW5nIGFueSBoYXJtLCBiZWNhdXNlIHRoZXkKICAgICAgICAgICAgICAgICAgICBoYWQiIFthY2NvcmRpbmcgdG8gdGhlaXIgb3duIHJlcHJlc2VudGF0aW9ucyxdICJubyBvdGhlciByb3V0ZTogdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkLCB0aGV5IG1pZ2h0IGJlIGFsbG93ZWQgdG8gZG8gc28gd2l0aCBoaXMgY29uc2VudC4iIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaW5hc211Y2ggYXMgaGUga2VwdCBpbiByZW1lbWJyYW5jZSB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIENhc3NpdXM8L25hbWU+LCB0aGUgY29uc3VsLCBoYWQgYmVlbiBzbGFpbiwgYW5kIGhpcyBhcm15IHJvdXRlZCBhbmQgbWFkZSB0bwogICAgICAgICAgICAgICAgICAgIHBhc3MgdW5kZXIgdGhlIHlva2UgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGRpZCBub3QgdGhpbmsKICAgICAgICAgICAgICAgICAgICB0aGF0IFt0aGVpciByZXF1ZXN0XSBvdWdodCB0byBiZSBncmFudGVkOiBub3Igd2FzIGhlIG9mIG9waW5pb24gdGhhdCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBob3N0aWxlIGRpc3Bvc2l0aW9uLCBpZiBhbiBvcHBvcnR1bml0eSBvZiBtYXJjaGluZyB0aHJvdWdoIHRoZSBQcm92aW5jZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gdGhlbSwgd291bGQgYWJzdGFpbiBmcm9tIG91dHJhZ2UgYW5kIG1pc2NoaWVmLiBZZXQsIGluIG9yZGVyIHRoYXQgYSBwZXJpb2QKICAgICAgICAgICAgICAgICAgICBtaWdodCBpbnRlcnZlbmUsIHVudGlsIHRoZSBzb2xkaWVycyB3aG9tIGhlIGhhZCBvcmRlcmVkIFt0byBiZSBmdXJuaXNoZWRdIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGFzc2VtYmxlLCBoZSByZXBsaWVkIHRvIHRoZSBhbWJhc3NhZG9ycywgdGhhdCBoZSB3b3VsZCB0YWtlIHRpbWUgdG8gZGVsaWJlcmF0ZTsKICAgICAgICAgICAgICAgICAgICBpZiB0aGV5IHdhbnRlZCBhbnkgdGhpbmcsIHRoZXkgbWlnaHQgcmV0dXJuIG9uIHRoZSBkYXkgYmVmb3JlIHRoZSBpZGVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXByaWw8L2RhdGU+IFtvbiA8ZGF0ZSBjbGFzcz0idHJhbnNsYXRpb24iPkFwcmlsPC9kYXRlPiAxMnRoXS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRoYXQgdGhleSB3ZXJlIGF0dGVtcHRpbmcKICAgICAgICAgICAgICAgICAgICB0byBtYWtlIHRoZWlyIHJvdXRlIHRocm91Z2ggb3VyIFByb3ZpbmNlIGhlIGhhc3RlbnMgdG8gc2V0IG91dCBmcm9tIHRoZSBjaXR5LAogICAgICAgICAgICAgICAgICAgIGFuZCwgYnkgYXMgZ3JlYXQgbWFyY2hlcyBhcyBoZSBjYW4sIHByb2NlZWRzIHRvIEZ1cnRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgYXJyaXZlcwogICAgICAgICAgICAgICAgICAgIGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNzI3OSIgcmVnPSJHZW5ldmUgWzYuMTUsNDYuMjE2XSAoaW5oYWJpdGVkIHBsYWNlKSwgR2VuZXZlLCBTd2l0emVybGFuZCwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2VuZXZhPC9uYW1lPi4gSGUgb3JkZXJzIHRoZSB3aG9sZSBQcm92aW5jZSBbdG8gZnVybmlzaF0gYXMgZ3JlYXQgYSBudW1iZXIKICAgICAgICAgICAgICAgICAgICBvZiBzb2xkaWVycyBhcyBwb3NzaWJsZSwgYXMgdGhlcmUgd2FzIGluIGFsbCBvbmx5IG9uZSBsZWdpb24gaW4gRnVydGhlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT46IGhlIG9yZGVycyB0aGUgYnJpZGdlIGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNzI3OSIgcmVnPSJHZW5ldmUgWzYuMTUsNDYuMjE2XSAoaW5oYWJpdGVkIHBsYWNlKSwgR2VuZXZlLCBTd2l0emVybGFuZCwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA3Mjc5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDcyNzkiPkdlbmV2YTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gdG8gYmUgYnJva2VuIGRvd24uIFdoZW4gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA3Mjc5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDcyNzkiPkdlbmV2YTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gYXJlCiAgICAgICAgICAgICAgICAgICAgYXBwcml6ZWQgb2YgaGlzIGFycml2YWwgdGhleSBzZW5kIHRvIGhpbSwgYXMgZW1iYXNzYWRvcnMsIHRoZSBtb3N0IGlsbHVzdHJpb3VzCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIHRoZWlyIHN0YXRlIChpbiB3aGljaCBlbWJhc3N5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TnVtZWl1czwvbmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVydWRvY3RpdXM8L25hbWU+IGhlbGQgdGhlIGNoaWVmIHBsYWNlKSwgdG8gc2F5ICJ0aGF0IGl0IHdhcyB0aGVpcgogICAgICAgICAgICAgICAgICAgIGludGVudGlvbiB0byBtYXJjaCB0aHJvdWdoIHRoZSBQcm92aW5jZSB3aXRob3V0IGRvaW5nIGFueSBoYXJtLCBiZWNhdXNlIHRoZXkKICAgICAgICAgICAgICAgICAgICBoYWQiIFthY2NvcmRpbmcgdG8gdGhlaXIgb3duIHJlcHJlc2VudGF0aW9ucyxdICJubyBvdGhlciByb3V0ZTogdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkLCB0aGV5IG1pZ2h0IGJlIGFsbG93ZWQgdG8gZG8gc28gd2l0aCBoaXMgY29uc2VudC4iIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaW5hc211Y2ggYXMgaGUga2VwdCBpbiByZW1lbWJyYW5jZSB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIENhc3NpdXM8L25hbWU+LCB0aGUgY29uc3VsLCBoYWQgYmVlbiBzbGFpbiwgYW5kIGhpcyBhcm15IHJvdXRlZCBhbmQgbWFkZSB0bwogICAgICAgICAgICAgICAgICAgIHBhc3MgdW5kZXIgdGhlIHlva2UgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGRpZCBub3QgdGhpbmsKICAgICAgICAgICAgICAgICAgICB0aGF0IFt0aGVpciByZXF1ZXN0XSBvdWdodCB0byBiZSBncmFudGVkOiBub3Igd2FzIGhlIG9mIG9waW5pb24gdGhhdCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBob3N0aWxlIGRpc3Bvc2l0aW9uLCBpZiBhbiBvcHBvcnR1bml0eSBvZiBtYXJjaGluZyB0aHJvdWdoIHRoZSBQcm92aW5jZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gdGhlbSwgd291bGQgYWJzdGFpbiBmcm9tIG91dHJhZ2UgYW5kIG1pc2NoaWVmLiBZZXQsIGluIG9yZGVyIHRoYXQgYSBwZXJpb2QKICAgICAgICAgICAgICAgICAgICBtaWdodCBpbnRlcnZlbmUsIHVudGlsIHRoZSBzb2xkaWVycyB3aG9tIGhlIGhhZCBvcmRlcmVkIFt0byBiZSBmdXJuaXNoZWRdIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGFzc2VtYmxlLCBoZSByZXBsaWVkIHRvIHRoZSBhbWJhc3NhZG9ycywgdGhhdCBoZSB3b3VsZCB0YWtlIHRpbWUgdG8gZGVsaWJlcmF0ZTsKICAgICAgICAgICAgICAgICAgICBpZiB0aGV5IHdhbnRlZCBhbnkgdGhpbmcsIHRoZXkgbWlnaHQgcmV0dXJuIG9uIHRoZSBkYXkgYmVmb3JlIHRoZSBpZGVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXByaWw8L2RhdGU+IFtvbiA8ZGF0ZSBjbGFzcz0idHJhbnNsYXRpb24iPkFwcmlsPC9kYXRlPiAxMnRoXS4gPC90cmFuc2xhdGlvbj4="
translation['1.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVhbndoaWxlLCB3aXRoIHRoZSBsZWdpb24gd2hpY2ggaGUgaGFkIHdpdGggaGltIGFuZCB0aGUgc29sZGllcnMgd2hpY2ggaGFkCiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibGVkIGZyb20gdGhlIFByb3ZpbmNlLCBoZSBjYXJyaWVzIGFsb25nIGZvciBuaW5ldGVlbiBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiwgbm90IHF1aXRlIGVpZ2h0ZWVuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RW5nbGlzaDwvbmFtZT5dIG1pbGVzIGEgd2FsbCwgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0IG9mIHNpeHRlZW4gZmVldCwgYW5kIGEgdHJlbmNoLCBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTYzODkiIHJlZz0iTGFrZSBvZiBHZW5ldmEgKGxha2UpLCBTd2l0emVybGFuZCwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+TGFrZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBHZW5ldmE8L25hbWU+LCB3aGljaCBmbG93cyBpbnRvIHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhvbmU8L25hbWU+LCB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMDkxNzIiIHJlZz0iSnVyYSBbNi41LDQ2Ljc1XSAobW91bnRhaW4pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Nb3VudCBKdXJhPC9uYW1lPiwgd2hpY2ggc2VwYXJhdGVzCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+IGZyb20gdGhvc2Ugb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4uIFdoZW4gdGhhdCB3b3JrIHdhcyBmaW5pc2hlZCwgaGUgZGlzdHJpYnV0ZXMKICAgICAgICAgICAgICAgICAgICBnYXJyaXNvbnMsIGFuZCBjbG9zZWx5IGZvcnRpZmllcyByZWRvdWJ0cywgaW4gb3JkZXIgdGhhdCBoZSBtYXkgdGhlIG1vcmUgZWFzaWx5CiAgICAgICAgICAgICAgICAgICAgaW50ZXJjZXB0IHRoZW0sIGlmIHRoZXkgc2hvdWxkIGF0dGVtcHQgdG8gY3Jvc3Mgb3ZlciBhZ2FpbnN0IGhpcyB3aWxsLiBXaGVuIHRoZQogICAgICAgICAgICAgICAgICAgIGRheSB3aGljaCBoZSBoYWQgYXBwb2ludGVkIHdpdGggdGhlIGVtYmFzc2Fkb3JzIGNhbWUsIGFuZCB0aGV5IHJldHVybmVkIHRvIGhpbTsKICAgICAgICAgICAgICAgICAgICBoZSBzYXlzLCB0aGF0IGhlIGNhbiBub3QsIGNvbnNpc3RlbnRseSB3aXRoIHRoZSBjdXN0b20gYW5kIHByZWNlZGVudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGdyYW50IGFueSBvbmUgYSBwYXNzYWdlIHRocm91Z2ggdGhlCiAgICAgICAgICAgICAgICAgICAgUHJvdmluY2U7IGFuZCBoZSBnaXZlcyB0aGVtIHRvIHVuZGVyc3RhbmQsIHRoYXQsIGlmIHRoZXkgc2hvdWxkIGF0dGVtcHQgdG8gdXNlCiAgICAgICAgICAgICAgICAgICAgdmlvbGVuY2UgaGUgd291bGQgb3Bwb3NlIHRoZW0uIFRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlpPC9uYW1lPiwgZGlzYXBwb2ludGVkIGluIHRoaXMKICAgICAgICAgICAgICAgICAgICBob3BlLCB0cmllZCBpZiB0aGV5IGNvdWxkIGZvcmNlIGEgcGFzc2FnZSAoc29tZSBieSBtZWFucyBvZiBhIGJyaWRnZSBvZiBib2F0cwogICAgICAgICAgICAgICAgICAgIGFuZCBudW1lcm91cyByYWZ0cyBjb25zdHJ1Y3RlZCBmb3IgdGhlIHB1cnBvc2U7IG90aGVycywgYnkgdGhlIGZvcmRzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhvbmU8L25hbWU+LCB3aGVyZSB0aGUgZGVwdGggb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcml2ZXIgd2FzIGxlYXN0LCBzb21ldGltZXMgYnkgZGF5LCBidXQgbW9yZSBmcmVxdWVudGx5IGJ5IG5pZ2h0KSwgYnV0IGJlaW5nCiAgICAgICAgICAgICAgICAgICAga2VwdCBhdCBiYXkgYnkgdGhlIHN0cmVuZ3RoIG9mIG91ciB3b3JrcywgYW5kIGJ5IHRoZSBjb25jb3Vyc2Ugb2YgdGhlIHNvbGRpZXJzLAogICAgICAgICAgICAgICAgICAgIGFuZCBieSB0aGUgbWlzc2lsZXMsIHRoZXkgZGVzaXN0ZWQgZnJvbSB0aGlzIGF0dGVtcHQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4sIG5vdCBxdWl0ZSBlaWdodGVlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVuZ2xpc2g8L25hbWU+XSBtaWxlcyBhIHdhbGwsIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGhlaWdodCBvZiBzaXh0ZWVuIGZlZXQsIGFuZCBhIHRyZW5jaCwgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTE2Mzg5IiByZWc9Ikxha2Ugb2YgR2VuZXZhIChsYWtlKSwgU3dpdHplcmxhbmQsIEV1cm9wZSIgdHlwZT0icGxhY2UiPkxha2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgR2VuZXZhPC9uYW1lPiwgd2hpY2ggZmxvd3MgaW50byB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDIzODkwIiByZWc9IlJob25lIFs0LjgzMyw0My4zMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJob25lPC9uYW1lPiwgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTA5MTcyIiByZWc9Ikp1cmEgWzYuNSw0Ni43NV0gKG1vdW50YWluKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+TW91bnQgSnVyYTwvbmFtZT4sIHdoaWNoIHNlcGFyYXRlcwogICAgICAgICAgICAgICAgICAgIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiBmcm9tIHRob3NlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LiBXaGVuIHRoYXQgd29yayB3YXMgZmluaXNoZWQsIGhlIGRpc3RyaWJ1dGVzCiAgICAgICAgICAgICAgICAgICAgZ2Fycmlzb25zLCBhbmQgY2xvc2VseSBmb3J0aWZpZXMgcmVkb3VidHMsIGluIG9yZGVyIHRoYXQgaGUgbWF5IHRoZSBtb3JlIGVhc2lseQogICAgICAgICAgICAgICAgICAgIGludGVyY2VwdCB0aGVtLCBpZiB0aGV5IHNob3VsZCBhdHRlbXB0IHRvIGNyb3NzIG92ZXIgYWdhaW5zdCBoaXMgd2lsbC4gV2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBkYXkgd2hpY2ggaGUgaGFkIGFwcG9pbnRlZCB3aXRoIHRoZSBlbWJhc3NhZG9ycyBjYW1lLCBhbmQgdGhleSByZXR1cm5lZCB0byBoaW07CiAgICAgICAgICAgICAgICAgICAgaGUgc2F5cywgdGhhdCBoZSBjYW4gbm90LCBjb25zaXN0ZW50bHkgd2l0aCB0aGUgY3VzdG9tIGFuZCBwcmVjZWRlbnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLCBncmFudCBhbnkgb25lIGEgcGFzc2FnZSB0aHJvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgIFByb3ZpbmNlOyBhbmQgaGUgZ2l2ZXMgdGhlbSB0byB1bmRlcnN0YW5kLCB0aGF0LCBpZiB0aGV5IHNob3VsZCBhdHRlbXB0IHRvIHVzZQogICAgICAgICAgICAgICAgICAgIHZpb2xlbmNlIGhlIHdvdWxkIG9wcG9zZSB0aGVtLiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWx2ZXRpaTwvbmFtZT4sIGRpc2FwcG9pbnRlZCBpbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgaG9wZSwgdHJpZWQgaWYgdGhleSBjb3VsZCBmb3JjZSBhIHBhc3NhZ2UgKHNvbWUgYnkgbWVhbnMgb2YgYSBicmlkZ2Ugb2YgYm9hdHMKICAgICAgICAgICAgICAgICAgICBhbmQgbnVtZXJvdXMgcmFmdHMgY29uc3RydWN0ZWQgZm9yIHRoZSBwdXJwb3NlOyBvdGhlcnMsIGJ5IHRoZSBmb3JkcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDIzODkwIiByZWc9IlJob25lIFs0LjgzMyw0My4zMzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJob25lPC9uYW1lPiwgd2hlcmUgdGhlIGRlcHRoIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpdmVyIHdhcyBsZWFzdCwgc29tZXRpbWVzIGJ5IGRheSwgYnV0IG1vcmUgZnJlcXVlbnRseSBieSBuaWdodCksIGJ1dCBiZWluZwogICAgICAgICAgICAgICAgICAgIGtlcHQgYXQgYmF5IGJ5IHRoZSBzdHJlbmd0aCBvZiBvdXIgd29ya3MsIGFuZCBieSB0aGUgY29uY291cnNlIG9mIHRoZSBzb2xkaWVycywKICAgICAgICAgICAgICAgICAgICBhbmQgYnkgdGhlIG1pc3NpbGVzLCB0aGV5IGRlc2lzdGVkIGZyb20gdGhpcyBhdHRlbXB0LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmUgd2FzIGxlZnQgb25lIHdheSwgW25hbWVseV0gdGhyb3VnaCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiwgYnkgd2hpY2gsIG9uCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudCBvZiBpdHMgbmFycm93bmVzcywgdGhleSBjb3VsZCBub3QgcGFzcyB3aXRob3V0IHRoZSBjb25zZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+LiBBcyB0aGV5IGNvdWxkIG5vdCBvZiB0aGVtc2VsdmVzIHByZXZhaWwgb24gdGhlbSwgdGhleQogICAgICAgICAgICAgICAgICAgIHNlbmQgZW1iYXNzYWRvcnMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1ub3JpeDwvbmFtZT4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWFuPC9uYW1lPiwgdGhhdCB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgaGlzIGludGVyY2Vzc2lvbiwgdGhleSBtaWdodCBvYnRhaW4gdGhlaXIgcmVxdWVzdCBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5vcml4PC9uYW1lPiwgYnkgaGlzIHBvcHVsYXJpdHkgYW5kIGxpYmVyYWxpdHksIGhhZCBncmVhdCBpbmZsdWVuY2UKICAgICAgICAgICAgICAgICAgICBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiwgYW5kIHdhcyBmcmllbmRseSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgYmVjYXVzZSBvdXQgb2YgdGhhdCBzdGF0ZSBoZSBoYWQgbWFycmllZCB0aGUgZGF1Z2h0ZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5PcmdldG9yaXg8L25hbWU+OyBhbmQsIGluY2l0ZWQgYnkgbHVzdCBvZiBzb3ZlcmVpZ250eSwgd2FzIGFueGlvdXMgZm9yCiAgICAgICAgICAgICAgICAgICAgYSByZXZvbHV0aW9uLCBhbmQgd2lzaGVkIHRvIGhhdmUgYXMgbWFueSBzdGF0ZXMgYXMgcG9zc2libGUgYXR0YWNoZWQgdG8gaGltIGJ5CiAgICAgICAgICAgICAgICAgICAgaGlzIGtpbmRuZXNzIHRvd2FyZCB0aGVtLiBIZSwgdGhlcmVmb3JlLCB1bmRlcnRha2VzIHRoZSBhZmZhaXIsIGFuZCBwcmV2YWlscwogICAgICAgICAgICAgICAgICAgIHVwb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4gdG8gYWxsb3cgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0byBtYXJjaCB0aHJvdWdoIHRoZWlyIHRlcnJpdG9yaWVzLCBhbmQgYXJyYW5nZXMgdGhhdCB0aGV5IHNob3VsZCBnaXZlIGhvc3RhZ2VzCiAgICAgICAgICAgICAgICAgICAgdG8gZWFjaCBvdGhlci10aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiBub3QgdG8gb2JzdHJ1Y3QgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gaW4gdGhlaXIgbWFyY2gtdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIHRvCiAgICAgICAgICAgICAgICAgICAgcGFzcyB3aXRob3V0IG1pc2NoaWVmIGFuZCBvdXRyYWdlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiwgYnkgd2hpY2gsIG9uCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudCBvZiBpdHMgbmFycm93bmVzcywgdGhleSBjb3VsZCBub3QgcGFzcyB3aXRob3V0IHRoZSBjb25zZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+LiBBcyB0aGV5IGNvdWxkIG5vdCBvZiB0aGVtc2VsdmVzIHByZXZhaWwgb24gdGhlbSwgdGhleQogICAgICAgICAgICAgICAgICAgIHNlbmQgZW1iYXNzYWRvcnMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1ub3JpeDwvbmFtZT4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWFuPC9uYW1lPiwgdGhhdCB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgaGlzIGludGVyY2Vzc2lvbiwgdGhleSBtaWdodCBvYnRhaW4gdGhlaXIgcmVxdWVzdCBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5vcml4PC9uYW1lPiwgYnkgaGlzIHBvcHVsYXJpdHkgYW5kIGxpYmVyYWxpdHksIGhhZCBncmVhdCBpbmZsdWVuY2UKICAgICAgICAgICAgICAgICAgICBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiwgYW5kIHdhcyBmcmllbmRseSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgYmVjYXVzZSBvdXQgb2YgdGhhdCBzdGF0ZSBoZSBoYWQgbWFycmllZCB0aGUgZGF1Z2h0ZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5PcmdldG9yaXg8L25hbWU+OyBhbmQsIGluY2l0ZWQgYnkgbHVzdCBvZiBzb3ZlcmVpZ250eSwgd2FzIGFueGlvdXMgZm9yCiAgICAgICAgICAgICAgICAgICAgYSByZXZvbHV0aW9uLCBhbmQgd2lzaGVkIHRvIGhhdmUgYXMgbWFueSBzdGF0ZXMgYXMgcG9zc2libGUgYXR0YWNoZWQgdG8gaGltIGJ5CiAgICAgICAgICAgICAgICAgICAgaGlzIGtpbmRuZXNzIHRvd2FyZCB0aGVtLiBIZSwgdGhlcmVmb3JlLCB1bmRlcnRha2VzIHRoZSBhZmZhaXIsIGFuZCBwcmV2YWlscwogICAgICAgICAgICAgICAgICAgIHVwb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4gdG8gYWxsb3cgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0byBtYXJjaCB0aHJvdWdoIHRoZWlyIHRlcnJpdG9yaWVzLCBhbmQgYXJyYW5nZXMgdGhhdCB0aGV5IHNob3VsZCBnaXZlIGhvc3RhZ2VzCiAgICAgICAgICAgICAgICAgICAgdG8gZWFjaCBvdGhlci10aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiBub3QgdG8gb2JzdHJ1Y3QgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gaW4gdGhlaXIgbWFyY2gtdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIHRvCiAgICAgICAgICAgICAgICAgICAgcGFzcyB3aXRob3V0IG1pc2NoaWVmIGFuZCBvdXRyYWdlLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.10'] = ""
translation['1.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlpPC9uYW1lPiBoYWQgYnkgdGhpcyB0aW1lIGxlZCB0aGVpciBmb3JjZXMgb3ZlciB0aHJvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgIG5hcnJvdyBkZWZpbGUgYW5kIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiwgYW5kIGhhZCBhcnJpdmVkCiAgICAgICAgICAgICAgICAgICAgYXQgdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYW5kIHdlcmUgcmF2YWdpbmcgdGhlaXIgbGFuZHMuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYXMgdGhleSBjb3VsZCBub3QgZGVmZW5kIHRoZW1zZWx2ZXMgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbnMgYWdhaW5zdCB0aGVtLCBzZW5kIGVtYmFzc2Fkb3JzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0bwogICAgICAgICAgICAgICAgICAgIGFzayBhc3Npc3RhbmNlLCBbcGxlYWRpbmddIHRoYXQgdGhleSBoYWQgYXQgYWxsIHRpbWVzIHNvIHdlbGwgZGVzZXJ2ZWQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLCB0aGF0IHRoZWlyIGZpZWxkcyBvdWdodCBub3QgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gbGFpZCB3YXN0ZS10aGVpciBjaGlsZHJlbiBjYXJyaWVkIG9mZiBpbnRvIHNsYXZlcnktdGhlaXIgdG93bnMgc3Rvcm1lZCwKICAgICAgICAgICAgICAgICAgICBhbG1vc3Qgd2l0aGluIHNpZ2h0IG9mIG91ciBhcm15LiBBdCB0aGUgc2FtZSB0aW1lIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmFycmk8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICBmcmllbmRzIGFuZCBraW5zbWVuIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYXBwcml6ZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHRoYXQgaXQgd2FzIG5vdCBlYXN5IGZvciB0aGVtLCBub3cgdGhhdCB0aGVpciBmaWVsZHMgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBkZXZhc3RhdGVkLCB0byB3YXJkIG9mZiB0aGUgdmlvbGVuY2Ugb2YgdGhlIGVuZW15IGZyb20gdGhlaXIgdG93bnM6IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbG9icm9nZXM8L25hbWU+IGxpa2V3aXNlLCB3aG8gaGFkIHZpbGxhZ2VzIGFuZCBwb3NzZXNzaW9ucyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBzaWRlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDIzODkwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiPlJob25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYmV0YWtlIHRoZW1zZWx2ZXMgaW4gZmxpZ2h0IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgYXNzdXJlIGhpbSB0aGF0IHRoZXkgaGFkIG5vdGhpbmcgcmVtYWluaW5nLCBleGNlcHQgdGhlIHNvaWwgb2YgdGhlaXIgbGFuZC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBpbmR1Y2VkIGJ5IHRoZXNlIGNpcmN1bXN0YW5jZXMsIGRlY2lkZXMsIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBvdWdodCBub3QgdG8gd2FpdCB1bnRpbCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBkZXN0cm95aW5nIGFsbCB0aGUgcHJvcGVydHkgb2YgaGlzIGFsbGllcywgc2hvdWxkIGFycml2ZSBhbW9uZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TYW50b25lczwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlpPC9uYW1lPiBoYWQgYnkgdGhpcyB0aW1lIGxlZCB0aGVpciBmb3JjZXMgb3ZlciB0aHJvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgIG5hcnJvdyBkZWZpbGUgYW5kIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiwgYW5kIGhhZCBhcnJpdmVkCiAgICAgICAgICAgICAgICAgICAgYXQgdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYW5kIHdlcmUgcmF2YWdpbmcgdGhlaXIgbGFuZHMuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYXMgdGhleSBjb3VsZCBub3QgZGVmZW5kIHRoZW1zZWx2ZXMgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbnMgYWdhaW5zdCB0aGVtLCBzZW5kIGVtYmFzc2Fkb3JzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0bwogICAgICAgICAgICAgICAgICAgIGFzayBhc3Npc3RhbmNlLCBbcGxlYWRpbmddIHRoYXQgdGhleSBoYWQgYXQgYWxsIHRpbWVzIHNvIHdlbGwgZGVzZXJ2ZWQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLCB0aGF0IHRoZWlyIGZpZWxkcyBvdWdodCBub3QgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gbGFpZCB3YXN0ZS10aGVpciBjaGlsZHJlbiBjYXJyaWVkIG9mZiBpbnRvIHNsYXZlcnktdGhlaXIgdG93bnMgc3Rvcm1lZCwKICAgICAgICAgICAgICAgICAgICBhbG1vc3Qgd2l0aGluIHNpZ2h0IG9mIG91ciBhcm15LiBBdCB0aGUgc2FtZSB0aW1lIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmFycmk8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICBmcmllbmRzIGFuZCBraW5zbWVuIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYXBwcml6ZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHRoYXQgaXQgd2FzIG5vdCBlYXN5IGZvciB0aGVtLCBub3cgdGhhdCB0aGVpciBmaWVsZHMgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBkZXZhc3RhdGVkLCB0byB3YXJkIG9mZiB0aGUgdmlvbGVuY2Ugb2YgdGhlIGVuZW15IGZyb20gdGhlaXIgdG93bnM6IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbG9icm9nZXM8L25hbWU+IGxpa2V3aXNlLCB3aG8gaGFkIHZpbGxhZ2VzIGFuZCBwb3NzZXNzaW9ucyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBzaWRlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDIzODkwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiPlJob25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYmV0YWtlIHRoZW1zZWx2ZXMgaW4gZmxpZ2h0IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDIzODkwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiPlJob25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICBhc3N1cmUgaGltIHRoYXQgdGhleSBoYWQgbm90aGluZyByZW1haW5pbmcsIGV4Y2VwdCB0aGUgc29pbCBvZiB0aGVpciBsYW5kLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGluZHVjZWQgYnkgdGhlc2UgY2lyY3Vtc3RhbmNlcywgZGVjaWRlcywgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIG91Z2h0IG5vdCB0byB3YWl0IHVudGlsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGRlc3Ryb3lpbmcgYWxsIHRoZSBwcm9wZXJ0eSBvZiBoaXMgYWxsaWVzLCBzaG91bGQgYXJyaXZlIGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNhbnRvbmVzPC9uYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['1.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGlzIGEgcml2ZXIgW2NhbGxlZF0gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTMxNiIgcmVnPSIgICtTYW9uZSBbNC44MzMsNDUuNzVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2Ij5TYW9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHdoaWNoIGZsb3dzIHRocm91Z2ggdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiBpbnRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiIHJlZz0iUmhvbmUgWzQuODMzLDQzLjMzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDIzODkwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMjM4OTAiPlJob25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiB3aXRoIHN1Y2ggaW5jcmVkaWJsZSBzbG93bmVzcywgdGhhdCBpdCBjYW4gbm90IGJlIGRldGVybWluZWQgYnkgdGhlIGV5ZQogICAgICAgICAgICAgICAgICAgIGluIHdoaWNoIGRpcmVjdGlvbiBpdCBmbG93cy4gVGhpcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiB3ZXJlCiAgICAgICAgICAgICAgICAgICAgY3Jvc3NpbmcgYnkgcmFmdHMgYW5kIGJvYXRzIGpvaW5lZCB0b2dldGhlci4gV2hlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FzIGluZm9ybWVkIGJ5IHNwaWVzIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gaGFkIGFscmVhZHkgY29udmV5ZWQgdGhyZWUgcGFydHMgb2YgdGhlaXIgZm9yY2VzIGFjcm9zcwogICAgICAgICAgICAgICAgICAgIHRoYXQgcml2ZXIsIGJ1dCB0aGF0IHRoZSBmb3VydGggcGFydCB3YXMgbGVmdCBiZWhpbmQgb24gdGhpcyBzaWRlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjkzMTYiIHJlZz0iICArU2FvbmUgWzQuODMzLDQ1Ljc1XSAocml2ZXIpLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMjkzMTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTMxNiI+U2FvbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBoZSBzZXQgb3V0IGZyb20gdGhlIGNhbXAgd2l0aCB0aHJlZSBsZWdpb25zIGR1cmluZyB0aGUgdGhpcmQgd2F0Y2gsIGFuZAogICAgICAgICAgICAgICAgICAgIGNhbWUgdXAgd2l0aCB0aGF0IGRpdmlzaW9uIHdoaWNoIGhhZCBub3QgeWV0IGNyb3NzZWQgdGhlIHJpdmVyLiBBdHRhY2tpbmcgdGhlbQogICAgICAgICAgICAgICAgICAgIGVuY3VtYmVyZWQgd2l0aCBiYWdnYWdlLCBhbmQgbm90IGV4cGVjdGluZyBoaW0sIGhlIGN1dCB0byBwaWVjZXMgYSBncmVhdCBwYXJ0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbTsgdGhlIHJlc3QgYmV0b29rIHRoZW1zZWx2ZXMgdG8gZmxpZ2h0LCBhbmQgY29uY2VhbGVkIHRoZW1zZWx2ZXMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbmVhcmVzdCB3b29kcy4gVGhhdCBjYW50b24gW3doaWNoIHdhcyBjdXQgZG93bl0gd2FzIGNhbGxlZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaWd1cmluZTwvbmFtZT47IGZvciB0aGUgd2hvbGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWx2ZXRpYW48L25hbWU+IHN0YXRlIGlzIGRpdmlkZWQKICAgICAgICAgICAgICAgICAgICBpbnRvIGZvdXIgY2FudG9ucy4gVGhpcyBzaW5nbGUgY2FudG9uIGhhdmluZyBsZWZ0IHRoZWlyIGNvdW50cnksIHdpdGhpbiB0aGUKICAgICAgICAgICAgICAgICAgICByZWNvbGxlY3Rpb24gb2Ygb3VyIGZhdGhlcnMsIGhhZCBzbGFpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y2l1cyBDYXNzaXVzPC9uYW1lPiB0aGUgY29uc3VsLAogICAgICAgICAgICAgICAgICAgIGFuZCBoYWQgbWFkZSBoaXMgYXJteSBwYXNzIHVuZGVyIHRoZSB5b2tlLiBUaHVzLCB3aGV0aGVyIGJ5IGNoYW5jZSwgb3IgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVzaWduIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCB0aGF0IHBhcnQgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsdmV0aWFuPC9uYW1lPiBzdGF0ZSB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhZCBicm91Z2h0IGEgc2lnbmFsIGNhbGFtaXR5IHVwb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLAogICAgICAgICAgICAgICAgICAgIHdhcyB0aGUgZmlyc3QgdG8gcGF5IHRoZSBwZW5hbHR5LiBJbiB0aGlzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGF2ZW5nZWQgbm90IG9ubHkgdGhlIHB1YmxpYyBidXQgYWxzbyBoaXMgb3duIHBlcnNvbmFsIHdyb25ncywgYmVjYXVzZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaWd1cmluaTwvbmFtZT4gaGFkIHNsYWluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzIFBpc288L25hbWU+IHRoZSBsaWV1dGVuYW50IFtvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhc3NpdXNdPC9uYW1lPiwgdGhlIGdyYW5kZmF0aGVyIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzIENhbHB1cm5pdXMKICAgICAgICAgICAgICAgICAgICAgICAgUGlzbzwvbmFtZT4sIGhpcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPltDYWVzYXI8L25hbWU+J3NdIGZhdGhlci1pbi1sYXcsIGluIHRoZSBzYW1lIGJhdHRsZQogICAgICAgICAgICAgICAgICAgIGFzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Fzc2l1czwvbmFtZT4gaGltc2VsZi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTMxNiIgcmVnPSIgICtTYW9uZSBbNC44MzMsNDUuNzVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2Ij5TYW9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHdoaWNoIGZsb3dzIHRocm91Z2ggdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2Ij5TYW9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+IGludG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAyMzg5MCIgcmVnPSJSaG9uZSBbNC44MzMsNDMuMzMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMjM4OTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAyMzg5MCI+UmhvbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+IHdpdGggc3VjaCBpbmNyZWRpYmxlIHNsb3duZXNzLCB0aGF0IGl0IGNhbiBub3QgYmUgZGV0ZXJtaW5lZCBieSB0aGUgZXllCiAgICAgICAgICAgICAgICAgICAgaW4gd2hpY2ggZGlyZWN0aW9uIGl0IGZsb3dzLiBUaGlzIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAyMzg5MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDIzODkwIj5SaG9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gd2VyZQogICAgICAgICAgICAgICAgICAgIGNyb3NzaW5nIGJ5IHJhZnRzIGFuZCBib2F0cyBqb2luZWQgdG9nZXRoZXIuIFdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdhcyBpbmZvcm1lZCBieSBzcGllcyB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IGhhZCBhbHJlYWR5IGNvbnZleWVkIHRocmVlIHBhcnRzIG9mIHRoZWlyIGZvcmNlcyBhY3Jvc3MKICAgICAgICAgICAgICAgICAgICB0aGF0IHJpdmVyLCBidXQgdGhhdCB0aGUgZm91cnRoIHBhcnQgd2FzIGxlZnQgYmVoaW5kIG9uIHRoaXMgc2lkZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2IiByZWc9IiAgK1Nhb25lIFs0LjgzMyw0NS43NV0gKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTI5MzE2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjkzMTYiPlNhb25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgaGUgc2V0IG91dCBmcm9tIHRoZSBjYW1wIHdpdGggdGhyZWUgbGVnaW9ucyBkdXJpbmcgdGhlIHRoaXJkIHdhdGNoLCBhbmQKICAgICAgICAgICAgICAgICAgICBjYW1lIHVwIHdpdGggdGhhdCBkaXZpc2lvbiB3aGljaCBoYWQgbm90IHlldCBjcm9zc2VkIHRoZSByaXZlci4gQXR0YWNraW5nIHRoZW0KICAgICAgICAgICAgICAgICAgICBlbmN1bWJlcmVkIHdpdGggYmFnZ2FnZSwgYW5kIG5vdCBleHBlY3RpbmcgaGltLCBoZSBjdXQgdG8gcGllY2VzIGEgZ3JlYXQgcGFydCBvZgogICAgICAgICAgICAgICAgICAgIHRoZW07IHRoZSByZXN0IGJldG9vayB0aGVtc2VsdmVzIHRvIGZsaWdodCwgYW5kIGNvbmNlYWxlZCB0aGVtc2VsdmVzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG5lYXJlc3Qgd29vZHMuIFRoYXQgY2FudG9uIFt3aGljaCB3YXMgY3V0IGRvd25dIHdhcyBjYWxsZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTI5MzE2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjkzMTYiPlNhb25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaWd1cmluZTwvbmFtZT47IGZvciB0aGUgd2hvbGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWx2ZXRpYW48L25hbWU+IHN0YXRlIGlzIGRpdmlkZWQKICAgICAgICAgICAgICAgICAgICBpbnRvIGZvdXIgY2FudG9ucy4gVGhpcyBzaW5nbGUgY2FudG9uIGhhdmluZyBsZWZ0IHRoZWlyIGNvdW50cnksIHdpdGhpbiB0aGUKICAgICAgICAgICAgICAgICAgICByZWNvbGxlY3Rpb24gb2Ygb3VyIGZhdGhlcnMsIGhhZCBzbGFpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y2l1cyBDYXNzaXVzPC9uYW1lPiB0aGUgY29uc3VsLAogICAgICAgICAgICAgICAgICAgIGFuZCBoYWQgbWFkZSBoaXMgYXJteSBwYXNzIHVuZGVyIHRoZSB5b2tlLiBUaHVzLCB3aGV0aGVyIGJ5IGNoYW5jZSwgb3IgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVzaWduIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCB0aGF0IHBhcnQgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsdmV0aWFuPC9uYW1lPiBzdGF0ZSB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhZCBicm91Z2h0IGEgc2lnbmFsIGNhbGFtaXR5IHVwb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLAogICAgICAgICAgICAgICAgICAgIHdhcyB0aGUgZmlyc3QgdG8gcGF5IHRoZSBwZW5hbHR5LiBJbiB0aGlzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGF2ZW5nZWQgbm90IG9ubHkgdGhlIHB1YmxpYyBidXQgYWxzbyBoaXMgb3duIHBlcnNvbmFsIHdyb25ncywgYmVjYXVzZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaWd1cmluaTwvbmFtZT4gaGFkIHNsYWluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzIFBpc288L25hbWU+IHRoZSBsaWV1dGVuYW50IFtvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhc3NpdXNdPC9uYW1lPiwgdGhlIGdyYW5kZmF0aGVyIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzIENhbHB1cm5pdXMKICAgICAgICAgICAgICAgICAgICAgICAgUGlzbzwvbmFtZT4sIGhpcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPltDYWVzYXI8L25hbWU+J3NdIGZhdGhlci1pbi1sYXcsIGluIHRoZSBzYW1lIGJhdHRsZQogICAgICAgICAgICAgICAgICAgIGFzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Fzc2l1czwvbmFtZT4gaGltc2VsZi4gPC90cmFuc2xhdGlvbj4="
translation['1.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgYmF0dGxlIGVuZGVkLCB0aGF0IGhlIG1pZ2h0IGJlIGFibGUgdG8gY29tZSB1cCB3aXRoIHRoZSByZW1haW5pbmcgZm9yY2VzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGhlIHByb2N1cmVzIGEgYnJpZGdlIHRvIGJlIG1hZGUgYWNyb3NzCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTMxNiIgcmVnPSIgICtTYW9uZSBbNC44MzMsNDUuNzVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2Ij5TYW9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGFuZCB0aHVzIGxlYWRzIGhpcyBhcm15IG92ZXIuIFRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlpPC9uYW1lPiwgY29uZnVzZWQgYnkKICAgICAgICAgICAgICAgICAgICBoaXMgc3VkZGVuIGFycml2YWwsIHdoZW4gdGhleSBmb3VuZCB0aGF0IGhlIGhhZCBlZmZlY3RlZCBpbiBvbmUgZGF5LCB3aGF0IHRoZXksCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBoYWQgd2l0aCB0aGUgdXRtb3N0IGRpZmZpY3VsdHkgYWNjb21wbGlzaGVkIGluIHR3ZW50eSBuYW1lbHksIHRoZQogICAgICAgICAgICAgICAgICAgIGNyb3NzaW5nIG9mIHRoZSByaXZlciwgc2VuZCBlbWJhc3NhZG9ycyB0byBoaW07IGF0IHRoZSBoZWFkIG9mIHdoaWNoIGVtYmFzc3kgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aWNvPC9uYW1lPiwgd2hvIGhhZCBiZWVuIGNvbW1hbmRlciBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgaW4gdGhlIHdhciBhZ2FpbnN0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Fzc2l1czwvbmFtZT4uIEhlIHRodXMgdHJlYXRzCiAgICAgICAgICAgICAgICAgICAgd2l0aCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT46LXRoYXQsICJpZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgd291bGQgbWFrZSBwZWFjZSB3aXRoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IHRoZXkgd291bGQgZ28gdG8gdGhhdCBwYXJ0IGFuZCB0aGVyZSByZW1haW4sIHdoZXJlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBtaWdodCBhcHBvaW50IGFuZCBkZXNpcmUgdGhlbSB0byBiZTsgYnV0IGlmIGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHBlcnNpc3QgaW4gcGVyc2VjdXRpbmcgdGhlbSB3aXRoIHdhciB0aGF0IGhlIG91Z2h0IHRvIHJlbWVtYmVyIGJvdGggdGhlCiAgICAgICAgICAgICAgICAgICAgYW5jaWVudCBkaXNncmFjZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcmlzdGljIHZhbG9yIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LiBBcyB0byBoaXMKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgYXR0YWNrZWQgb25lIGNhbnRvbiBieSBzdXJwcmlzZSwgW2F0IGEgdGltZV0gd2hlbiB0aG9zZSB3aG8gaGFkIGNyb3NzZWQKICAgICAgICAgICAgICAgICAgICB0aGUgcml2ZXIgY291bGQgbm90IGJyaW5nIGFzc2lzdGFuY2UgdG8gdGhlaXIgZnJpZW5kcywgdGhhdCBoZSBvdWdodCBub3Qgb24gdGhhdAogICAgICAgICAgICAgICAgICAgIGFjY291bnQgdG8gYXNjcmliZSB2ZXJ5IG11Y2ggdG8gaGlzIG93biB2YWxvciwgb3IgZGVzcGlzZSB0aGVtOyB0aGF0IHRoZXkgaGFkIHNvCiAgICAgICAgICAgICAgICAgICAgbGVhcm5lZCBmcm9tIHRoZWlyIHNpcmVzIGFuZCBhbmNlc3RvcnMsIGFzIHRvIHJlbHkgbW9yZSBvbiB2YWxvciB0aGFuIG9uCiAgICAgICAgICAgICAgICAgICAgYXJ0aWZpY2UgYW5kIHN0cmF0YWdlbS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVyZWZvcmU8L25hbWU+IGxldCBoaW0gbm90IGJyaW5nIGl0IHRvIHBhc3MgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBwbGFjZSwgd2hlcmUgdGhleSB3ZXJlIHN0YW5kaW5nLCBzaG91bGQgYWNxdWlyZSBhIG5hbWUsIGZyb20gdGhlIGRpc2FzdGVyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIGFuZCB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlaXIgYXJteSBvcgogICAgICAgICAgICAgICAgICAgIHRyYW5zbWl0IHRoZSByZW1lbWJyYW5jZSBbb2Ygc3VjaCBhbiBldmVudCB0byBwb3N0ZXJpdHldLiIgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGhlIHByb2N1cmVzIGEgYnJpZGdlIHRvIGJlIG1hZGUgYWNyb3NzCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTMxNiIgcmVnPSIgICtTYW9uZSBbNC44MzMsNDUuNzVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2Ij5TYW9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGFuZCB0aHVzIGxlYWRzIGhpcyBhcm15IG92ZXIuIFRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2Ij5TYW9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsdmV0aWk8L25hbWU+LCBjb25mdXNlZCBieQogICAgICAgICAgICAgICAgICAgIGhpcyBzdWRkZW4gYXJyaXZhbCwgd2hlbiB0aGV5IGZvdW5kIHRoYXQgaGUgaGFkIGVmZmVjdGVkIGluIG9uZSBkYXksIHdoYXQgdGhleSwKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGhhZCB3aXRoIHRoZSB1dG1vc3QgZGlmZmljdWx0eSBhY2NvbXBsaXNoZWQgaW4gdHdlbnR5IG5hbWVseSwgdGhlCiAgICAgICAgICAgICAgICAgICAgY3Jvc3Npbmcgb2YgdGhlIHJpdmVyLCBzZW5kIGVtYmFzc2Fkb3JzIHRvIGhpbTsgYXQgdGhlIGhlYWQgb2Ygd2hpY2ggZW1iYXNzeSB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZpY288L25hbWU+LCB3aG8gaGFkIGJlZW4gY29tbWFuZGVyIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBpbiB0aGUgd2FyIGFnYWluc3QgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXNzaXVzPC9uYW1lPi4gSGUgdGh1cyB0cmVhdHMKICAgICAgICAgICAgICAgICAgICB3aXRoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPjotdGhhdCwgImlmIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSB3b3VsZCBtYWtlIHBlYWNlIHdpdGggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gdGhleSB3b3VsZCBnbyB0byB0aGF0IHBhcnQgYW5kIHRoZXJlIHJlbWFpbiwgd2hlcmUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG1pZ2h0IGFwcG9pbnQgYW5kIGRlc2lyZSB0aGVtIHRvIGJlOyBidXQgaWYgaGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQgcGVyc2lzdCBpbiBwZXJzZWN1dGluZyB0aGVtIHdpdGggd2FyIHRoYXQgaGUgb3VnaHQgdG8gcmVtZW1iZXIgYm90aCB0aGUKICAgICAgICAgICAgICAgICAgICBhbmNpZW50IGRpc2dyYWNlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWMgdmFsb3Igb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4uIEFzIHRvIGhpcwogICAgICAgICAgICAgICAgICAgIGhhdmluZyBhdHRhY2tlZCBvbmUgY2FudG9uIGJ5IHN1cnByaXNlLCBbYXQgYSB0aW1lXSB3aGVuIHRob3NlIHdobyBoYWQgY3Jvc3NlZAogICAgICAgICAgICAgICAgICAgIHRoZSByaXZlciBjb3VsZCBub3QgYnJpbmcgYXNzaXN0YW5jZSB0byB0aGVpciBmcmllbmRzLCB0aGF0IGhlIG91Z2h0IG5vdCBvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgYWNjb3VudCB0byBhc2NyaWJlIHZlcnkgbXVjaCB0byBoaXMgb3duIHZhbG9yLCBvciBkZXNwaXNlIHRoZW07IHRoYXQgdGhleSBoYWQgc28KICAgICAgICAgICAgICAgICAgICBsZWFybmVkIGZyb20gdGhlaXIgc2lyZXMgYW5kIGFuY2VzdG9ycywgYXMgdG8gcmVseSBtb3JlIG9uIHZhbG9yIHRoYW4gb24KICAgICAgICAgICAgICAgICAgICBhcnRpZmljZSBhbmQgc3RyYXRhZ2VtLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZTwvbmFtZT4gbGV0IGhpbSBub3QgYnJpbmcgaXQgdG8gcGFzcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHBsYWNlLCB3aGVyZSB0aGV5IHdlcmUgc3RhbmRpbmcsIHNob3VsZCBhY3F1aXJlIGEgbmFtZSwgZnJvbSB0aGUgZGlzYXN0ZXIgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgYW5kIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGVpciBhcm15IG9yCiAgICAgICAgICAgICAgICAgICAgdHJhbnNtaXQgdGhlIHJlbWVtYnJhbmNlIFtvZiBzdWNoIGFuIGV2ZW50IHRvIHBvc3Rlcml0eV0uIiA8L3RyYW5zbGF0aW9uPg=="
translation['1.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRvIHRoZXNlIHdvcmRzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0aHVzIHJlcGxpZWQ6LXRoYXQgIm9uIHRoYXQgdmVyeQogICAgICAgICAgICAgICAgICAgIGFjY291bnQgaGUgZmVsdCBsZXNzIGhlc2l0YXRpb24sIGJlY2F1c2UgaGUga2VwdCBpbiByZW1lbWJyYW5jZSB0aG9zZQogICAgICAgICAgICAgICAgICAgIGNpcmN1bXN0YW5jZXMgd2hpY2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsdmV0aWFuPC9uYW1lPiBlbWJhc3NhZG9ycyBoYWQgbWVudGlvbmVkLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGZlbHQgdGhlIG1vcmUgaW5kaWduYW50IGF0IHRoZW0sIGluIHByb3BvcnRpb24gYXMgdGhleSBoYWQgaGFwcGVuZWQKICAgICAgICAgICAgICAgICAgICB1bmRlc2VydmVkbHkgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlOiBmb3IgaWYgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIGNvbnNjaW91cyBvZiBoYXZpbmcgZG9uZSBhbnkgd3JvbmcsIGl0IHdvdWxkIG5vdCBoYXZlIGJlZW4gZGlmZmljdWx0IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgb24gdGhlaXIgZ3VhcmQsIGJ1dCBmb3IgdGhhdCB2ZXJ5IHJlYXNvbiBoYWQgdGhleSBiZWVuIGRlY2VpdmVkLCBiZWNhdXNlIG5laXRoZXIKICAgICAgICAgICAgICAgICAgICB3ZXJlIHRoZXkgYXdhcmUgdGhhdCBhbnkgb2ZmZW5zZSBoYWQgYmVlbiBnaXZlbiBieSB0aGVtLCBvbiBhY2NvdW50IG9mIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhleSBzaG91bGQgYmUgYWZyYWlkLCBub3IgZGlkIHRoZXkgdGhpbmsgdGhhdCB0aGV5IG91Z2h0IHRvIGJlIGFmcmFpZCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgY2F1c2UuIEJ1dCBldmVuIGlmIGhlIHdlcmUgd2lsbGluZyB0byBmb3JnZXQgdGhlaXIgZm9ybWVyIG91dHJhZ2UsIGNvdWxkIGhlIGFsc28KICAgICAgICAgICAgICAgICAgICBsYXkgYXNpZGUgdGhlIHJlbWVtYnJhbmNlIG9mIHRoZSBsYXRlIHdyb25ncywgaW4gdGhhdCB0aGV5IGhhZCBhZ2FpbnN0IGhpcyB3aWxsCiAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdGVkIGEgcm91dGUgdGhyb3VnaCB0aGUgUHJvdmluY2UgYnkgZm9yY2UsIGluIHRoYXQgdGhleSBoYWQgbW9sZXN0ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJhcnJpPC9uYW1lPiwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbG9icm9nZXM8L25hbWU+PyBUaGF0IGFzIHRvIHRoZWlyIHNvIGluc29sZW50bHkgYm9hc3Rpbmcgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICB2aWN0b3J5LCBhbmQgYXMgdG8gdGhlaXIgYmVpbmcgYXN0b25pc2hlZCB0aGF0IHRoZXkgaGFkIHNvIGxvbmcgY29tbWl0dGVkIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZXMgd2l0aCBpbXB1bml0eSwgW2JvdGggdGhlc2UgdGhpbmdzXSB0ZW5kZWQgdG8gdGhlIHNhbWUgcG9pbnQ7IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBpbW1vcnRhbCBnb2RzIGFyZSB3b250IHRvIGFsbG93IHRob3NlIHBlcnNvbnMgd2hvbSB0aGV5IHdpc2ggdG8gcHVuaXNoIGZvciB0aGVpcgogICAgICAgICAgICAgICAgICAgIGd1aWx0IHNvbWV0aW1lcyBhIGdyZWF0ZXIgcHJvc3Blcml0eSBhbmQgbG9uZ2VyIGltcHVuaXR5LCBpbiBvcmRlciB0aGF0IHRoZXkgbWF5CiAgICAgICAgICAgICAgICAgICAgc3VmZmVyIHRoZSBtb3JlIHNldmVyZWx5IGZyb20gYSByZXZlcnNlIG9mIGNpcmN1bXN0YW5jZXMuIEFsdGhvdWdoIHRoZXNlIHRoaW5ncwogICAgICAgICAgICAgICAgICAgIGFyZSBzbywgeWV0LCBpZiBob3N0YWdlcyB3ZXJlIHRvIGJlIGdpdmVuIGhpbSBieSB0aGVtIGluIG9yZGVyIHRoYXQgaGUgbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgYXNzdXJlZCB0aGVzZSB3aWxsIGRvIHdoYXQgdGhleSBwcm9taXNlLCBhbmQgcHJvdmlkZWQgdGhleSB3aWxsIGdpdmUKICAgICAgICAgICAgICAgICAgICBzYXRpc2ZhY3Rpb24gdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IGZvciB0aGUgb3V0cmFnZXMgd2hpY2ggdGhleSBoYWQgY29tbWl0dGVkCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGVtIGFuZCB0aGVpciBhbGxpZXMsIGFuZCBsaWtld2lzZSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGxvYnJvZ2VzPC9uYW1lPiwgaGUKICAgICAgICAgICAgICAgICAgICAgICAgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPl0gd2lsbCBtYWtlIHBlYWNlIHdpdGggdGhlbS4iCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aWNvPC9uYW1lPiByZXBsaWVkLCB0aGF0ICJ0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIHNvIHRyYWluZWQgYnkgdGhlaXIgYW5jZXN0b3JzLCB0aGF0IHRoZXkgd2VyZSBhY2N1c3RvbWVkIHRvIHJlY2VpdmUsCiAgICAgICAgICAgICAgICAgICAgbm90IHRvIGdpdmUgaG9zdGFnZXM7IG9mIHRoYXQgZmFjdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUKICAgICAgICAgICAgICAgICAgICB3ZXJlIHdpdG5lc3MuIiBIYXZpbmcgZ2l2ZW4gdGhpcyByZXBseSwgaGUgd2l0aGRyZXcuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdGh1cyByZXBsaWVkOi10aGF0ICJvbiB0aGF0IHZlcnkKICAgICAgICAgICAgICAgICAgICBhY2NvdW50IGhlIGZlbHQgbGVzcyBoZXNpdGF0aW9uLCBiZWNhdXNlIGhlIGtlcHQgaW4gcmVtZW1icmFuY2UgdGhvc2UKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2VzIHdoaWNoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlhbjwvbmFtZT4gZW1iYXNzYWRvcnMgaGFkIG1lbnRpb25lZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBmZWx0IHRoZSBtb3JlIGluZGlnbmFudCBhdCB0aGVtLCBpbiBwcm9wb3J0aW9uIGFzIHRoZXkgaGFkIGhhcHBlbmVkCiAgICAgICAgICAgICAgICAgICAgdW5kZXNlcnZlZGx5IHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZTogZm9yIGlmIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBjb25zY2lvdXMgb2YgaGF2aW5nIGRvbmUgYW55IHdyb25nLCBpdCB3b3VsZCBub3QgaGF2ZSBiZWVuIGRpZmZpY3VsdCB0byBiZQogICAgICAgICAgICAgICAgICAgIG9uIHRoZWlyIGd1YXJkLCBidXQgZm9yIHRoYXQgdmVyeSByZWFzb24gaGFkIHRoZXkgYmVlbiBkZWNlaXZlZCwgYmVjYXVzZSBuZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgd2VyZSB0aGV5IGF3YXJlIHRoYXQgYW55IG9mZmVuc2UgaGFkIGJlZW4gZ2l2ZW4gYnkgdGhlbSwgb24gYWNjb3VudCBvZiB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZXkgc2hvdWxkIGJlIGFmcmFpZCwgbm9yIGRpZCB0aGV5IHRoaW5rIHRoYXQgdGhleSBvdWdodCB0byBiZSBhZnJhaWQgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGNhdXNlLiBCdXQgZXZlbiBpZiBoZSB3ZXJlIHdpbGxpbmcgdG8gZm9yZ2V0IHRoZWlyIGZvcm1lciBvdXRyYWdlLCBjb3VsZCBoZSBhbHNvCiAgICAgICAgICAgICAgICAgICAgbGF5IGFzaWRlIHRoZSByZW1lbWJyYW5jZSBvZiB0aGUgbGF0ZSB3cm9uZ3MsIGluIHRoYXQgdGhleSBoYWQgYWdhaW5zdCBoaXMgd2lsbAogICAgICAgICAgICAgICAgICAgIGF0dGVtcHRlZCBhIHJvdXRlIHRocm91Z2ggdGhlIFByb3ZpbmNlIGJ5IGZvcmNlLCBpbiB0aGF0IHRoZXkgaGFkIG1vbGVzdGVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iYXJyaTwvbmFtZT4sIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGxvYnJvZ2VzPC9uYW1lPj8gVGhhdCBhcyB0byB0aGVpciBzbyBpbnNvbGVudGx5IGJvYXN0aW5nIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdmljdG9yeSwgYW5kIGFzIHRvIHRoZWlyIGJlaW5nIGFzdG9uaXNoZWQgdGhhdCB0aGV5IGhhZCBzbyBsb25nIGNvbW1pdHRlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIG91dHJhZ2VzIHdpdGggaW1wdW5pdHksIFtib3RoIHRoZXNlIHRoaW5nc10gdGVuZGVkIHRvIHRoZSBzYW1lIHBvaW50OyBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgaW1tb3J0YWwgZ29kcyBhcmUgd29udCB0byBhbGxvdyB0aG9zZSBwZXJzb25zIHdob20gdGhleSB3aXNoIHRvIHB1bmlzaCBmb3IgdGhlaXIKICAgICAgICAgICAgICAgICAgICBndWlsdCBzb21ldGltZXMgYSBncmVhdGVyIHByb3NwZXJpdHkgYW5kIGxvbmdlciBpbXB1bml0eSwgaW4gb3JkZXIgdGhhdCB0aGV5IG1heQogICAgICAgICAgICAgICAgICAgIHN1ZmZlciB0aGUgbW9yZSBzZXZlcmVseSBmcm9tIGEgcmV2ZXJzZSBvZiBjaXJjdW1zdGFuY2VzLiBBbHRob3VnaCB0aGVzZSB0aGluZ3MKICAgICAgICAgICAgICAgICAgICBhcmUgc28sIHlldCwgaWYgaG9zdGFnZXMgd2VyZSB0byBiZSBnaXZlbiBoaW0gYnkgdGhlbSBpbiBvcmRlciB0aGF0IGhlIG1heSBiZQogICAgICAgICAgICAgICAgICAgIGFzc3VyZWQgdGhlc2Ugd2lsbCBkbyB3aGF0IHRoZXkgcHJvbWlzZSwgYW5kIHByb3ZpZGVkIHRoZXkgd2lsbCBnaXZlCiAgICAgICAgICAgICAgICAgICAgc2F0aXNmYWN0aW9uIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBmb3IgdGhlIG91dHJhZ2VzIHdoaWNoIHRoZXkgaGFkIGNvbW1pdHRlZAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlbSBhbmQgdGhlaXIgYWxsaWVzLCBhbmQgbGlrZXdpc2UgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsb2Jyb2dlczwvbmFtZT4sIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFs8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT5dIHdpbGwgbWFrZSBwZWFjZSB3aXRoIHRoZW0uIgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdmljbzwvbmFtZT4gcmVwbGllZCwgdGhhdCAidGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiBzbyB0cmFpbmVkIGJ5IHRoZWlyIGFuY2VzdG9ycywgdGhhdCB0aGV5IHdlcmUgYWNjdXN0b21lZCB0byByZWNlaXZlLAogICAgICAgICAgICAgICAgICAgIG5vdCB0byBnaXZlIGhvc3RhZ2VzOyBvZiB0aGF0IGZhY3QgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgd2VyZSB3aXRuZXNzLiIgSGF2aW5nIGdpdmVuIHRoaXMgcmVwbHksIGhlIHdpdGhkcmV3LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBmb2xsb3dpbmcgZGF5IHRoZXkgbW92ZSB0aGVpciBjYW1wIGZyb20gdGhhdCBwbGFjZTsgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRvZXMgdGhlIHNhbWUsIGFuZCBzZW5kcyBmb3J3YXJkIGFsbCBoaXMgY2F2YWxyeSwgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIGZvdXIgdGhvdXNhbmQgKHdoaWNoIGhlIGhhZCBkcmF3biB0b2dldGhlciBmcm9tIGFsbCBwYXJ0cyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBQcm92aW5jZSBhbmQgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gYW5kIHRoZWlyIGFsbGllcyksIHRvIG9ic2VydmUgdG93YXJkCiAgICAgICAgICAgICAgICAgICAgd2hhdCBwYXJ0cyB0aGUgZW5lbXkgYXJlIGRpcmVjdGluZyB0aGVpciBtYXJjaC4gVGhlc2UsIGhhdmluZyB0b28gZWFnZXJseQogICAgICAgICAgICAgICAgICAgIHB1cnN1ZWQgdGhlIGVuZW15J3MgcmVhciwgY29tZSB0byBhIGJhdHRsZSB3aXRoIHRoZSBjYXZhbHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IGluIGEgZGlzYWR2YW50YWdlb3VzIHBsYWNlLCBhbmQgYSBmZXcgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgbWVuIGZhbGwuIFRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlpPC9uYW1lPiwgZWxhdGVkIHdpdGggdGhpcyBiYXR0bGUsIGJlY2F1c2UgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICB3aXRoIGZpdmUgaHVuZHJlZCBob3JzZSByZXB1bHNlZCBzbyBsYXJnZSBhIGJvZHkgb2YgaG9yc2UsIGJlZ2FuIHRvIGZhY2UgdXMgbW9yZQogICAgICAgICAgICAgICAgICAgIGJvbGRseSwgc29tZXRpbWVzIHRvbyBmcm9tIHRoZWlyIHJlYXIgdG8gcHJvdm9rZSBvdXIgbWVuIGJ5IGFuIGF0dGFjay4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IFtob3dldmVyXSByZXN0cmFpbmVkIGhpcyBtZW4gZnJvbSBiYXR0bGUsIGRlZW1pbmcKICAgICAgICAgICAgICAgICAgICBpdCBzdWZmaWNpZW50IGZvciB0aGUgcHJlc2VudCB0byBwcmV2ZW50IHRoZSBlbmVteSBmcm9tIHJhcGluZSwgZm9yYWdlLCBhbmQKICAgICAgICAgICAgICAgICAgICBkZXByZWRhdGlvbi4gVGhleSBtYXJjaGVkIGZvciBhYm91dCBmaWZ0ZWVuIGRheXMgaW4gc3VjaCBhIG1hbm5lciB0aGF0IHRoZXJlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCBtb3JlIHRoYW4gZml2ZSBvciBzaXggbWlsZXMgYmV0d2VlbiB0aGUgZW5lbXkncyByZWFyIGFuZCBvdXIgdmFuLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRvZXMgdGhlIHNhbWUsIGFuZCBzZW5kcyBmb3J3YXJkIGFsbCBoaXMgY2F2YWxyeSwgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIGZvdXIgdGhvdXNhbmQgKHdoaWNoIGhlIGhhZCBkcmF3biB0b2dldGhlciBmcm9tIGFsbCBwYXJ0cyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBQcm92aW5jZSBhbmQgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gYW5kIHRoZWlyIGFsbGllcyksIHRvIG9ic2VydmUgdG93YXJkCiAgICAgICAgICAgICAgICAgICAgd2hhdCBwYXJ0cyB0aGUgZW5lbXkgYXJlIGRpcmVjdGluZyB0aGVpciBtYXJjaC4gVGhlc2UsIGhhdmluZyB0b28gZWFnZXJseQogICAgICAgICAgICAgICAgICAgIHB1cnN1ZWQgdGhlIGVuZW15J3MgcmVhciwgY29tZSB0byBhIGJhdHRsZSB3aXRoIHRoZSBjYXZhbHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IGluIGEgZGlzYWR2YW50YWdlb3VzIHBsYWNlLCBhbmQgYSBmZXcgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgbWVuIGZhbGwuIFRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlpPC9uYW1lPiwgZWxhdGVkIHdpdGggdGhpcyBiYXR0bGUsIGJlY2F1c2UgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICB3aXRoIGZpdmUgaHVuZHJlZCBob3JzZSByZXB1bHNlZCBzbyBsYXJnZSBhIGJvZHkgb2YgaG9yc2UsIGJlZ2FuIHRvIGZhY2UgdXMgbW9yZQogICAgICAgICAgICAgICAgICAgIGJvbGRseSwgc29tZXRpbWVzIHRvbyBmcm9tIHRoZWlyIHJlYXIgdG8gcHJvdm9rZSBvdXIgbWVuIGJ5IGFuIGF0dGFjay4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IFtob3dldmVyXSByZXN0cmFpbmVkIGhpcyBtZW4gZnJvbSBiYXR0bGUsIGRlZW1pbmcKICAgICAgICAgICAgICAgICAgICBpdCBzdWZmaWNpZW50IGZvciB0aGUgcHJlc2VudCB0byBwcmV2ZW50IHRoZSBlbmVteSBmcm9tIHJhcGluZSwgZm9yYWdlLCBhbmQKICAgICAgICAgICAgICAgICAgICBkZXByZWRhdGlvbi4gVGhleSBtYXJjaGVkIGZvciBhYm91dCBmaWZ0ZWVuIGRheXMgaW4gc3VjaCBhIG1hbm5lciB0aGF0IHRoZXJlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCBtb3JlIHRoYW4gZml2ZSBvciBzaXggbWlsZXMgYmV0d2VlbiB0aGUgZW5lbXkncyByZWFyIGFuZCBvdXIgdmFuLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk1lYW53aGlsZSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGtlcHQgZGFpbHkgaW1wb3J0dW5pbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IGZvciB0aGUgY29ybiB3aGljaCB0aGV5IGhhZCBwcm9taXNlZCBpbiB0aGUgbmFtZSBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHN0YXRlOyBmb3IsIGluIGNvbnNlcXVlbmNlIG9mIHRoZSBjb2xkbmVzcyAoPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBiZWluZyBhcyBiZWZvcmUgc2FpZCwKICAgICAgICAgICAgICAgICAgICBzaXR1YXRlZCB0b3dhcmQgdGhlIG5vcnRoKSwgbm90IG9ubHkgd2FzIHRoZSBjb3JuIGluIHRoZSBmaWVsZHMgbm90IHJpcGUsIGJ1dAogICAgICAgICAgICAgICAgICAgIHRoZXJlIHdhcyBub3QgaW4gc3RvcmUgYSBzdWZmaWNpZW50bHkgbGFyZ2UgcXVhbnRpdHkgZXZlbiBvZiBmb2RkZXI6IGJlc2lkZXMgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgdW5hYmxlIHRvIHVzZSB0aGUgY29ybiB3aGljaCBoZSBoYWQgY29udmV5ZWQgaW4gc2hpcHMgdXAgdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTMxNiIgcmVnPSIgICtTYW9uZSBbNC44MzMsNDUuNzVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2Ij5TYW9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGJlY2F1c2UgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGZyb20gd2hvbSBoZSB3YXMKICAgICAgICAgICAgICAgICAgICB1bndpbGxpbmcgdG8gcmV0aXJlIGhhZCBkaXZlcnRlZCB0aGVpciBtYXJjaCBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjkzMTYiIHJlZz0iICArU2FvbmUgWzQuODMzLDQ1Ljc1XSAocml2ZXIpLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMjkzMTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTMxNiI+U2FvbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4ga2VwdCBkZWZlcnJpbmcgZnJvbSBkYXkgdG8gZGF5LCBhbmQgc2F5aW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgYmVpbmcgY29sbGVjdGVkLWJyb3VnaHQgaW4tb24gdGhlIHJvYWQuIiBXaGVuIGhlIHNhdyB0aGF0IGhlIHdhcyBwdXQgb2ZmCiAgICAgICAgICAgICAgICAgICAgdG9vIGxvbmcsIGFuZCB0aGF0IHRoZSBkYXkgd2FzIGNsb3NlIGF0IGhhbmQgb24gd2hpY2ggaGUgb3VnaHQgdG8gc2VydmUgb3V0IHRoZQogICAgICAgICAgICAgICAgICAgIGNvcm4gdG8gaGlzIHNvbGRpZXJzOy1oYXZpbmcgY2FsbGVkIHRvZ2V0aGVyIHRoZWlyIGNoaWVmcywgb2Ygd2hvbSBoZSBoYWQgYQogICAgICAgICAgICAgICAgICAgIGdyZWF0IG51bWJlciBpbiBoaXMgY2FtcCwgYW1vbmcgdGhlbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxpc2N1czwvbmFtZT4gd2hvIHdhcyBpbnZlc3RlZCB3aXRoIHRoZSBjaGllZiBtYWdpc3RyYWN5ICh3aG9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBzdHlsZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJnb2JyZXR1czwvbmFtZT4sIGFuZCB3aG8gaXMgZWxlY3RlZAogICAgICAgICAgICAgICAgICAgIGFubnVhbGx5IGFuZCBoYXMgcG93ZXIgb2YgbGlmZSBvciBkZWF0aCBvdmVyIGhpcyBjb3VudHJ5bWVuKSwgaGUgc2V2ZXJlbHkKICAgICAgICAgICAgICAgICAgICByZXByaW1hbmRzIHRoZW0sIGJlY2F1c2UgaGUgaXMgbm90IGFzc2lzdGVkIGJ5IHRoZW0gb24gc28gdXJnZW50IGFuIG9jY2FzaW9uLAogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIGVuZW15IHdlcmUgc28gY2xvc2UgYXQgaGFuZCwgYW5kIHdoZW4gW2Nvcm5dIGNvdWxkIG5laXRoZXIgYmUgYm91Z2h0CiAgICAgICAgICAgICAgICAgICAgbm9yIHRha2VuIGZyb20gdGhlIGZpZWxkcywgcGFydGljdWxhcmx5IGFzLCBpbiBhIGdyZWF0IG1lYXN1cmUgdXJnZWQgYnkgdGhlaXIKICAgICAgICAgICAgICAgICAgICBwcmF5ZXJzLCBoZSBoYWQgdW5kZXJ0YWtlbiB0aGUgd2FyOyBtdWNoIG1vcmUgYml0dGVybHksIHRoZXJlZm9yZSBkb2VzIGhlCiAgICAgICAgICAgICAgICAgICAgY29tcGxhaW4gb2YgaGlzIGJlaW5nIGZvcnNha2VuLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGtlcHQgZGFpbHkgaW1wb3J0dW5pbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IGZvciB0aGUgY29ybiB3aGljaCB0aGV5IGhhZCBwcm9taXNlZCBpbiB0aGUgbmFtZSBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHN0YXRlOyBmb3IsIGluIGNvbnNlcXVlbmNlIG9mIHRoZSBjb2xkbmVzcyAoPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBiZWluZyBhcyBiZWZvcmUgc2FpZCwKICAgICAgICAgICAgICAgICAgICBzaXR1YXRlZCB0b3dhcmQgdGhlIG5vcnRoKSwgbm90IG9ubHkgd2FzIHRoZSBjb3JuIGluIHRoZSBmaWVsZHMgbm90IHJpcGUsIGJ1dAogICAgICAgICAgICAgICAgICAgIHRoZXJlIHdhcyBub3QgaW4gc3RvcmUgYSBzdWZmaWNpZW50bHkgbGFyZ2UgcXVhbnRpdHkgZXZlbiBvZiBmb2RkZXI6IGJlc2lkZXMgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgdW5hYmxlIHRvIHVzZSB0aGUgY29ybiB3aGljaCBoZSBoYWQgY29udmV5ZWQgaW4gc2hpcHMgdXAgdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTMxNiIgcmVnPSIgICtTYW9uZSBbNC44MzMsNDUuNzVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2Ij5TYW9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGJlY2F1c2UgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTI5MzE2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjkzMTYiPlNhb25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgZnJvbSB3aG9tIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIHVud2lsbGluZyB0byByZXRpcmUgaGFkIGRpdmVydGVkIHRoZWlyIG1hcmNoIGZyb20gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTMxNiIgcmVnPSIgICtTYW9uZSBbNC44MzMsNDUuNzVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2Ij5TYW9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4uIFRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyOTMxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2Ij5TYW9uZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IGtlcHQgZGVmZXJyaW5nIGZyb20gZGF5IHRvIGRheSwgYW5kIHNheWluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaXQgd2FzIGJlaW5nIGNvbGxlY3RlZC1icm91Z2h0IGluLW9uIHRoZSByb2FkLiIgV2hlbiBoZSBzYXcgdGhhdCBoZSB3YXMgcHV0IG9mZgogICAgICAgICAgICAgICAgICAgIHRvbyBsb25nLCBhbmQgdGhhdCB0aGUgZGF5IHdhcyBjbG9zZSBhdCBoYW5kIG9uIHdoaWNoIGhlIG91Z2h0IHRvIHNlcnZlIG91dCB0aGUKICAgICAgICAgICAgICAgICAgICBjb3JuIHRvIGhpcyBzb2xkaWVyczstaGF2aW5nIGNhbGxlZCB0b2dldGhlciB0aGVpciBjaGllZnMsIG9mIHdob20gaGUgaGFkIGEKICAgICAgICAgICAgICAgICAgICBncmVhdCBudW1iZXIgaW4gaGlzIGNhbXAsIGFtb25nIHRoZW0gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZpdGlhY3VzPC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXNjdXM8L25hbWU+IHdobyB3YXMgaW52ZXN0ZWQgd2l0aCB0aGUgY2hpZWYgbWFnaXN0cmFjeSAod2hvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gc3R5bGUgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyZ29icmV0dXM8L25hbWU+LCBhbmQgd2hvIGlzIGVsZWN0ZWQKICAgICAgICAgICAgICAgICAgICBhbm51YWxseSBhbmQgaGFzIHBvd2VyIG9mIGxpZmUgb3IgZGVhdGggb3ZlciBoaXMgY291bnRyeW1lbiksIGhlIHNldmVyZWx5CiAgICAgICAgICAgICAgICAgICAgcmVwcmltYW5kcyB0aGVtLCBiZWNhdXNlIGhlIGlzIG5vdCBhc3Npc3RlZCBieSB0aGVtIG9uIHNvIHVyZ2VudCBhbiBvY2Nhc2lvbiwKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSBlbmVteSB3ZXJlIHNvIGNsb3NlIGF0IGhhbmQsIGFuZCB3aGVuIFtjb3JuXSBjb3VsZCBuZWl0aGVyIGJlIGJvdWdodAogICAgICAgICAgICAgICAgICAgIG5vciB0YWtlbiBmcm9tIHRoZSBmaWVsZHMsIHBhcnRpY3VsYXJseSBhcywgaW4gYSBncmVhdCBtZWFzdXJlIHVyZ2VkIGJ5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcHJheWVycywgaGUgaGFkIHVuZGVydGFrZW4gdGhlIHdhcjsgbXVjaCBtb3JlIGJpdHRlcmx5LCB0aGVyZWZvcmUgZG9lcyBoZQogICAgICAgICAgICAgICAgICAgIGNvbXBsYWluIG9mIGhpcyBiZWluZyBmb3JzYWtlbi4gPC90cmFuc2xhdGlvbj4="
translation['1.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW4gYXQgbGVuZ3RoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlzY3VzPC9uYW1lPiwgbW92ZWQgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MKICAgICAgICAgICAgICAgICAgICBzcGVlY2gsIGRpc2Nsb3NlcyB3aGF0IGhlIGhhZCBoaXRoZXJ0byBrZXB0IHNlY3JldDotdGhhdCB0aGVyZSBhcmUgc29tZSB3aG9zZQogICAgICAgICAgICAgICAgICAgIGluZmx1ZW5jZXMgd2l0aCB0aGUgcGVvcGxlIGlzIHZlcnkgZ3JlYXQsIHdobywgdGhvdWdoIHByaXZhdGUgbWVuLCBoYXZlIG1vcmUKICAgICAgICAgICAgICAgICAgICBwb3dlciB0aGFuIHRoZSBtYWdpc3RyYXRlcyB0aGVtc2VsdmVzOiB0aGF0IHRoZXNlIGJ5IHNlZGl0aW9ucyBhbmQgdmlvbGVudAogICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlIGFyZSBkZXRlcnJpbmcgdGhlIHBvcHVsYWNlIGZyb20gY29udHJpYnV0aW5nIHRoZSBjb3JuIHdoaWNoIHRoZXkgb3VnaHQKICAgICAgICAgICAgICAgICAgICB0byBzdXBwbHk7IFtieSB0ZWxsaW5nIHRoZW1dIHRoYXQsIGlmIHRoZXkgY2FuIG5vdCBhbnkgbG9uZ2VyIHJldGFpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzdXByZW1hY3kgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBpdCB3ZXJlIGJldHRlciB0byBzdWJtaXQKICAgICAgICAgICAgICAgICAgICB0byB0aGUgZ292ZXJubWVudCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHRoYW4gb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIG5vciBvdWdodCB0aGV5IHRvIGRvdWJ0IHRoYXQsIGlmIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiBzaG91bGQgb3ZlcnBvd2VyIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCB0aGV5IHdvdWxkIHdyZXN0IHRoZWlyIGZyZWVkb20gZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0b2dldGhlciB3aXRoIHRoZSByZW1haW5kZXIgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LiBCeSB0aGVzZSB2ZXJ5IG1lbiwgW3NhaWQKICAgICAgICAgICAgICAgICAgICBoZV0sIGFyZSBvdXIgcGxhbnMgYW5kIHdoYXRldmVyIGlzIGRvbmUgaW4gdGhlIGNhbXAsIGRpc2Nsb3NlZCB0byB0aGUgZW5lbXk7CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IGNvdWxkIG5vdCBiZSByZXN0cmFpbmVkIGJ5IGhpbTogbmF5IG1vcmUsIGhlIHdhcyB3ZWxsIGF3YXJlLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGNvbXBlbGxlZCBieSBuZWNlc3NpdHksIGhlIGhhZCBkaXNjbG9zZWQgdGhlIG1hdHRlciB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGF0IGhvdyBncmVhdCBhIHJpc2sgaGUgaGFkIGRvbmUgaXQ7IGFuZCBmb3IgdGhhdCByZWFzb24sIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gc2lsZW50IGFzIGxvbmcgYXMgaGUgY291bGQuIiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXNjdXM8L25hbWU+LCBtb3ZlZCBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncwogICAgICAgICAgICAgICAgICAgIHNwZWVjaCwgZGlzY2xvc2VzIHdoYXQgaGUgaGFkIGhpdGhlcnRvIGtlcHQgc2VjcmV0Oi10aGF0IHRoZXJlIGFyZSBzb21lIHdob3NlCiAgICAgICAgICAgICAgICAgICAgaW5mbHVlbmNlcyB3aXRoIHRoZSBwZW9wbGUgaXMgdmVyeSBncmVhdCwgd2hvLCB0aG91Z2ggcHJpdmF0ZSBtZW4sIGhhdmUgbW9yZQogICAgICAgICAgICAgICAgICAgIHBvd2VyIHRoYW4gdGhlIG1hZ2lzdHJhdGVzIHRoZW1zZWx2ZXM6IHRoYXQgdGhlc2UgYnkgc2VkaXRpb25zIGFuZCB2aW9sZW50CiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UgYXJlIGRldGVycmluZyB0aGUgcG9wdWxhY2UgZnJvbSBjb250cmlidXRpbmcgdGhlIGNvcm4gd2hpY2ggdGhleSBvdWdodAogICAgICAgICAgICAgICAgICAgIHRvIHN1cHBseTsgW2J5IHRlbGxpbmcgdGhlbV0gdGhhdCwgaWYgdGhleSBjYW4gbm90IGFueSBsb25nZXIgcmV0YWluIHRoZQogICAgICAgICAgICAgICAgICAgIHN1cHJlbWFjeSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGl0IHdlcmUgYmV0dGVyIHRvIHN1Ym1pdAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBnb3Zlcm5tZW50IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gdGhhbiBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgbm9yIG91Z2h0IHRoZXkgdG8gZG91YnQgdGhhdCwgaWYgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHNob3VsZCBvdmVycG93ZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIHRoZXkgd291bGQgd3Jlc3QgdGhlaXIgZnJlZWRvbSBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHRvZ2V0aGVyIHdpdGggdGhlIHJlbWFpbmRlciBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4uIEJ5IHRoZXNlIHZlcnkgbWVuLCBbc2FpZAogICAgICAgICAgICAgICAgICAgIGhlXSwgYXJlIG91ciBwbGFucyBhbmQgd2hhdGV2ZXIgaXMgZG9uZSBpbiB0aGUgY2FtcCwgZGlzY2xvc2VkIHRvIHRoZSBlbmVteTsKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgY291bGQgbm90IGJlIHJlc3RyYWluZWQgYnkgaGltOiBuYXkgbW9yZSwgaGUgd2FzIHdlbGwgYXdhcmUsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggY29tcGVsbGVkIGJ5IG5lY2Vzc2l0eSwgaGUgaGFkIGRpc2Nsb3NlZCB0aGUgbWF0dGVyIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYXQgaG93IGdyZWF0IGEgcmlzayBoZSBoYWQgZG9uZSBpdDsgYW5kIGZvciB0aGF0IHJlYXNvbiwgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiBzaWxlbnQgYXMgbG9uZyBhcyBoZSBjb3VsZC4iIDwvdHJhbnNsYXRpb24+"
translation['1.18'] = ""
translation['1.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIGxlYXJuaW5nIHRoZXNlIGNpcmN1bXN0YW5jZXMsIHNpbmNlIHRvIHRoZXNlIHN1c3BpY2lvbnMgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICB1bmVxdWl2b2NhbCBmYWN0cyB3ZXJlIGFkZGVkLCB2aXouLCB0aGF0IGhlIGhhZCBsZWQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gdGhyb3VnaCB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT47IHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgcHJvdmlkZWQgdGhhdCBob3N0YWdlcyBzaG91bGQgYmUgbXV0dWFsbHkgZ2l2ZW47IHRoYXQgaGUgaGFkIGRvbmUgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgdGhpbmdzLCBub3Qgb25seSB3aXRob3V0IGFueSBvcmRlcnMgb2YgaGlzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+W0NhZXNhcjwvbmFtZT4nc10gYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBzdGF0ZSdzLCBidXQgZXZlbiB3aXRob3V0IHRoZWlyIFt0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aV08L25hbWU+IGtub3dpbmcgYW55CiAgICAgICAgICAgICAgICAgICAgdGhpbmcgb2YgaXQgdGhlbXNlbHZlczsgdGhhdCBoZSBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1ub3JpeDwvbmFtZT5dIHdhcyByZXByaW1hbmRlZDogYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgW2NoaWVmXSBtYWdpc3RyYXRlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPjsgaGUgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPl0gY29uc2lkZXJlZCB0aGF0IHRoZXJlIHdhcyBzdWZmaWNpZW50IHJlYXNvbiwgd2h5IGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGVpdGhlciBwdW5pc2ggaGltIGhpbXNlbGYsIG9yIG9yZGVyIHRoZSBzdGF0ZSB0byBkbyBzby4gT25lIHRoaW5nIFtob3dldmVyXQogICAgICAgICAgICAgICAgICAgIHN0b29kIGluIHRoZSB3YXkgb2YgYWxsIHRoaXMtdGhhdCBoZSBoYWQgbGVhcm5lZCBieSBleHBlcmllbmNlIGhpcyBicm90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aXRpYWN1czwvbmFtZT4ncyB2ZXJ5IGhpZ2ggcmVnYXJkIGZvciB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGhpcyBncmVhdCBhZmZlY3Rpb24gdG93YXJkIGhpbSwgaGlzIGRpc3Rpbmd1aXNoZWQKICAgICAgICAgICAgICAgICAgICBmYWl0aGZ1bG5lc3MsIGp1c3RpY2UsIGFuZCBtb2RlcmF0aW9uOyBmb3IgaGUgd2FzIGFmcmFpZCBsZXN0IGJ5IHRoZSBwdW5pc2htZW50CiAgICAgICAgICAgICAgICAgICAgb2YgdGhpcyBtYW4sIGhlIHNob3VsZCBodXJ0IHRoZSBmZWVsaW5ncyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+LiBUaGVyZWZvcmUsCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGhlIGF0dGVtcHRlZCBhbnkgdGhpbmcsIGhlIG9yZGVycyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+IHRvIGJlIHN1bW1vbmVkCiAgICAgICAgICAgICAgICAgICAgdG8gaGltLCBhbmQsIHdoZW4gdGhlIG9yZGluYXJ5IGludGVycHJldGVycyBoYWQgYmVlbiB3aXRoZHJhd24sIGNvbnZlcnNlcyB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGltIHRocm91Z2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBWYWxlcml1cyBQcm9jaWxsdXM8L25hbWU+LCBjaGllZiBvZiB0aGUgcHJvdmluY2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgaGlzLCBpbiB3aG9tIGhlIHJlcG9zZWQgdGhlIGhpZ2hlc3QKICAgICAgICAgICAgICAgICAgICBjb25maWRlbmNlIGluIGV2ZXJ5IHRoaW5nOyBhdCB0aGUgc2FtZSB0aW1lIGhlIHJlbWluZHMgaGltIG9mIHdoYXQgd2FzIHNhaWQKICAgICAgICAgICAgICAgICAgICBhYm91dCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5vcml4PC9uYW1lPiBpbiB0aGUgY291bmNpbCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgd2hlbiBoZSBoaW1zZWxmIHdhcyBwcmVzZW50LCBhbmQgc2hvd3Mgd2hhdCBlYWNoIGhhZCBzYWlkIG9mCiAgICAgICAgICAgICAgICAgICAgaGltIHByaXZhdGVseSBpbiBoaXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5bQ2Flc2FyPC9uYW1lPidzXSBvd24gcHJlc2VuY2U7IGhlIGJlZ3MgYW5kIGV4aG9ydHMKICAgICAgICAgICAgICAgICAgICBoaW0sIHRoYXQsIHdpdGhvdXQgb2ZmZW5zZSB0byBoaXMgZmVlbGluZ3MsIGhlIG1heSBlaXRoZXIgaGltc2VsZiBwYXNzIGp1ZGdtZW50CiAgICAgICAgICAgICAgICAgICAgb24gaGltIFs8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5vcml4PC9uYW1lPl0gYWZ0ZXIgdHJ5aW5nIHRoZSBjYXNlLCBvciBlbHNlIG9yZGVyIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+XSBzdGF0ZSB0byBkbyBzby4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gdGhyb3VnaCB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT47IHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgcHJvdmlkZWQgdGhhdCBob3N0YWdlcyBzaG91bGQgYmUgbXV0dWFsbHkgZ2l2ZW47IHRoYXQgaGUgaGFkIGRvbmUgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgdGhpbmdzLCBub3Qgb25seSB3aXRob3V0IGFueSBvcmRlcnMgb2YgaGlzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+W0NhZXNhcjwvbmFtZT4nc10gYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBzdGF0ZSdzLCBidXQgZXZlbiB3aXRob3V0IHRoZWlyIFt0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aV08L25hbWU+IGtub3dpbmcgYW55CiAgICAgICAgICAgICAgICAgICAgdGhpbmcgb2YgaXQgdGhlbXNlbHZlczsgdGhhdCBoZSBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1ub3JpeDwvbmFtZT5dIHdhcyByZXByaW1hbmRlZDogYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgW2NoaWVmXSBtYWdpc3RyYXRlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPjsgaGUgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPl0gY29uc2lkZXJlZCB0aGF0IHRoZXJlIHdhcyBzdWZmaWNpZW50IHJlYXNvbiwgd2h5IGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGVpdGhlciBwdW5pc2ggaGltIGhpbXNlbGYsIG9yIG9yZGVyIHRoZSBzdGF0ZSB0byBkbyBzby4gT25lIHRoaW5nIFtob3dldmVyXQogICAgICAgICAgICAgICAgICAgIHN0b29kIGluIHRoZSB3YXkgb2YgYWxsIHRoaXMtdGhhdCBoZSBoYWQgbGVhcm5lZCBieSBleHBlcmllbmNlIGhpcyBicm90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aXRpYWN1czwvbmFtZT4ncyB2ZXJ5IGhpZ2ggcmVnYXJkIGZvciB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGhpcyBncmVhdCBhZmZlY3Rpb24gdG93YXJkIGhpbSwgaGlzIGRpc3Rpbmd1aXNoZWQKICAgICAgICAgICAgICAgICAgICBmYWl0aGZ1bG5lc3MsIGp1c3RpY2UsIGFuZCBtb2RlcmF0aW9uOyBmb3IgaGUgd2FzIGFmcmFpZCBsZXN0IGJ5IHRoZSBwdW5pc2htZW50CiAgICAgICAgICAgICAgICAgICAgb2YgdGhpcyBtYW4sIGhlIHNob3VsZCBodXJ0IHRoZSBmZWVsaW5ncyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+LiBUaGVyZWZvcmUsCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGhlIGF0dGVtcHRlZCBhbnkgdGhpbmcsIGhlIG9yZGVycyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+IHRvIGJlIHN1bW1vbmVkCiAgICAgICAgICAgICAgICAgICAgdG8gaGltLCBhbmQsIHdoZW4gdGhlIG9yZGluYXJ5IGludGVycHJldGVycyBoYWQgYmVlbiB3aXRoZHJhd24sIGNvbnZlcnNlcyB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGltIHRocm91Z2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBWYWxlcml1cyBQcm9jaWxsdXM8L25hbWU+LCBjaGllZiBvZiB0aGUgcHJvdmluY2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgaGlzLCBpbiB3aG9tIGhlIHJlcG9zZWQgdGhlIGhpZ2hlc3QKICAgICAgICAgICAgICAgICAgICBjb25maWRlbmNlIGluIGV2ZXJ5IHRoaW5nOyBhdCB0aGUgc2FtZSB0aW1lIGhlIHJlbWluZHMgaGltIG9mIHdoYXQgd2FzIHNhaWQKICAgICAgICAgICAgICAgICAgICBhYm91dCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5vcml4PC9uYW1lPiBpbiB0aGUgY291bmNpbCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgd2hlbiBoZSBoaW1zZWxmIHdhcyBwcmVzZW50LCBhbmQgc2hvd3Mgd2hhdCBlYWNoIGhhZCBzYWlkIG9mCiAgICAgICAgICAgICAgICAgICAgaGltIHByaXZhdGVseSBpbiBoaXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5bQ2Flc2FyPC9uYW1lPidzXSBvd24gcHJlc2VuY2U7IGhlIGJlZ3MgYW5kIGV4aG9ydHMKICAgICAgICAgICAgICAgICAgICBoaW0sIHRoYXQsIHdpdGhvdXQgb2ZmZW5zZSB0byBoaXMgZmVlbGluZ3MsIGhlIG1heSBlaXRoZXIgaGltc2VsZiBwYXNzIGp1ZGdtZW50CiAgICAgICAgICAgICAgICAgICAgb24gaGltIFs8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5vcml4PC9uYW1lPl0gYWZ0ZXIgdHJ5aW5nIHRoZSBjYXNlLCBvciBlbHNlIG9yZGVyIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+XSBzdGF0ZSB0byBkbyBzby4gPC90cmFuc2xhdGlvbj4="
translation['1.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aXRpYWN1czwvbmFtZT4sIGVtYnJhY2luZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGJlZ2lucyB0bwogICAgICAgICAgICAgICAgICAgIGltcGxvcmUgaGltLCB3aXRoIG1hbnkgdGVhcnMsIHRoYXQgImhlIHdvdWxkIG5vdCBwYXNzIGFueSB2ZXJ5IHNldmVyZSBzZW50ZW5jZQogICAgICAgICAgICAgICAgICAgIHVwb24gaGlzIGJyb3RoZXI7IHNheWluZywgdGhhdCBoZSBrbm93cyB0aGF0IHRob3NlIGNoYXJnZXMgYXJlIHRydWUsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgbm9ib2R5IHN1ZmZlcmVkIG1vcmUgcGFpbiBvbiB0aGF0IGFjY291bnQgdGhhbiBoZSBoaW1zZWxmIGRpZDsgZm9yIHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGNvdWxkIGVmZmVjdCBhIHZlcnkgZ3JlYXQgZGVhbCBieSBoaXMgaW5mbHVlbmNlIGF0IGhvbWUgYW5kIGluIHRoZSByZXN0CiAgICAgICAgICAgICAgICAgICAgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgaGUgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbm9yaXg8L25hbWU+XSB2ZXJ5IGxpdHRsZSBvbiBhY2NvdW50IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIHlvdXRoLCB0aGUgbGF0dGVyIGhhZCBiZWNvbWUgcG93ZXJmdWwgdGhyb3VnaCBoaXMgbWVhbnMsIHdoaWNoIHBvd2VyIGFuZAogICAgICAgICAgICAgICAgICAgIHN0cmVuZ3RoIGhlIHVzZWQgbm90IG9ubHkgdG8gdGhlIGxlc3NlbmluZyBvZiBoaXMgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aXRpYWN1czwvbmFtZT5dCiAgICAgICAgICAgICAgICAgICAgcG9wdWxhcml0eSwgYnV0IGFsbW9zdCB0byBoaXMgcnVpbjsgdGhhdCBoZSwgaG93ZXZlciwgd2FzIGluZmx1ZW5jZWQgYm90aCBieQogICAgICAgICAgICAgICAgICAgIGZyYXRlcm5hbCBhZmZlY3Rpb24gYW5kIGJ5IHB1YmxpYyBvcGluaW9uLiBCdXQgaWYgYW55IHRoaW5nIHZlcnkgc2V2ZXJlIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHNob3VsZCBiZWZhbGwgaGltIFs8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5vcml4PC9uYW1lPl0sCiAgICAgICAgICAgICAgICAgICAgbm8gb25lIHdvdWxkIHRoaW5rIHRoYXQgaXQgaGFkIGJlZW4gZG9uZSB3aXRob3V0IGhpcyBjb25zZW50LCBzaW5jZSBoZSBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgaGVsZCBzdWNoIGEgcGxhY2UgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgZnJpZW5kc2hpcDogZnJvbSB3aGljaAogICAgICAgICAgICAgICAgICAgIGNpcmN1bXN0YW5jZSBpdCB3b3VsZCBhcmlzZSwgdGhhdCB0aGUgYWZmZWN0aW9ucyBvZiB0aGUgd2hvbGUgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IHdvdWxkIGJlIGVzdHJhbmdlZCBmcm9tIGhpbS4iIEFzIGhlIHdhcyB3aXRoIHRlYXJzIGJlZ2dpbmcKICAgICAgICAgICAgICAgICAgICB0aGVzZSB0aGluZ3Mgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGluIG1hbnkgd29yZHMsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0YWtlcyBoaXMgcmlnaHQgaGFuZCwgYW5kLCBjb21mb3J0aW5nIGhpbSwgYmVncyBoaW0gdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIGFuIGVuZCBvZiBlbnRyZWF0aW5nLCBhbmQgYXNzdXJlcyBoaW0gdGhhdCBoaXMgcmVnYXJkIGZvciBoaW0gaXMgc28gZ3JlYXQsIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBmb3JnaXZlcyBib3RoIHRoZSBpbmp1cmllcyBvZiB0aGUgcmVwdWJsaWMgYW5kIGhpcyBwcml2YXRlIHdyb25ncywgYXQgaGlzCiAgICAgICAgICAgICAgICAgICAgZGVzaXJlIGFuZCBwcmF5ZXJzLiBIZSBzdW1tb25zIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbm9yaXg8L25hbWU+IHRvIGhpbTsgaGUgYnJpbmdzIGluIGhpcwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXI7IGhlIHBvaW50cyBvdXQgd2hhdCBoZSBjZW5zdXJlcyBpbiBoaW07IGhlIGxheXMgYmVmb3JlIGhpbSB3aGF0IGhlIG9mCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBwZXJjZWl2ZXMsIGFuZCB3aGF0IHRoZSBzdGF0ZSBjb21wbGFpbnMgb2Y7IGhlIHdhcm5zIGhpbSBmb3IgdGhlIGZ1dHVyZQogICAgICAgICAgICAgICAgICAgIHRvIGF2b2lkIGFsbCBncm91bmRzIG9mIHN1c3BpY2lvbjsgaGUgc2F5cyB0aGF0IGhlIHBhcmRvbnMgdGhlIHBhc3QsIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBzYWtlIG9mIGhpcyBicm90aGVyLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+LiBIZSBzZXRzIHNwaWVzIG92ZXIKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1ub3JpeDwvbmFtZT4gdGhhdCBoZSBtYXkgYmUgYWJsZSB0byBrbm93IHdoYXQgaGUgZG9lcywgYW5kIHdpdGgKICAgICAgICAgICAgICAgICAgICB3aG9tIGhlIGNvbW11bmljYXRlcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aXRpYWN1czwvbmFtZT4sIGVtYnJhY2luZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGJlZ2lucyB0bwogICAgICAgICAgICAgICAgICAgIGltcGxvcmUgaGltLCB3aXRoIG1hbnkgdGVhcnMsIHRoYXQgImhlIHdvdWxkIG5vdCBwYXNzIGFueSB2ZXJ5IHNldmVyZSBzZW50ZW5jZQogICAgICAgICAgICAgICAgICAgIHVwb24gaGlzIGJyb3RoZXI7IHNheWluZywgdGhhdCBoZSBrbm93cyB0aGF0IHRob3NlIGNoYXJnZXMgYXJlIHRydWUsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgbm9ib2R5IHN1ZmZlcmVkIG1vcmUgcGFpbiBvbiB0aGF0IGFjY291bnQgdGhhbiBoZSBoaW1zZWxmIGRpZDsgZm9yIHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGNvdWxkIGVmZmVjdCBhIHZlcnkgZ3JlYXQgZGVhbCBieSBoaXMgaW5mbHVlbmNlIGF0IGhvbWUgYW5kIGluIHRoZSByZXN0CiAgICAgICAgICAgICAgICAgICAgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgaGUgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbm9yaXg8L25hbWU+XSB2ZXJ5IGxpdHRsZSBvbiBhY2NvdW50IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIHlvdXRoLCB0aGUgbGF0dGVyIGhhZCBiZWNvbWUgcG93ZXJmdWwgdGhyb3VnaCBoaXMgbWVhbnMsIHdoaWNoIHBvd2VyIGFuZAogICAgICAgICAgICAgICAgICAgIHN0cmVuZ3RoIGhlIHVzZWQgbm90IG9ubHkgdG8gdGhlIGxlc3NlbmluZyBvZiBoaXMgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aXRpYWN1czwvbmFtZT5dCiAgICAgICAgICAgICAgICAgICAgcG9wdWxhcml0eSwgYnV0IGFsbW9zdCB0byBoaXMgcnVpbjsgdGhhdCBoZSwgaG93ZXZlciwgd2FzIGluZmx1ZW5jZWQgYm90aCBieQogICAgICAgICAgICAgICAgICAgIGZyYXRlcm5hbCBhZmZlY3Rpb24gYW5kIGJ5IHB1YmxpYyBvcGluaW9uLiBCdXQgaWYgYW55IHRoaW5nIHZlcnkgc2V2ZXJlIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHNob3VsZCBiZWZhbGwgaGltIFs8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5vcml4PC9uYW1lPl0sCiAgICAgICAgICAgICAgICAgICAgbm8gb25lIHdvdWxkIHRoaW5rIHRoYXQgaXQgaGFkIGJlZW4gZG9uZSB3aXRob3V0IGhpcyBjb25zZW50LCBzaW5jZSBoZSBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgaGVsZCBzdWNoIGEgcGxhY2UgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgZnJpZW5kc2hpcDogZnJvbSB3aGljaAogICAgICAgICAgICAgICAgICAgIGNpcmN1bXN0YW5jZSBpdCB3b3VsZCBhcmlzZSwgdGhhdCB0aGUgYWZmZWN0aW9ucyBvZiB0aGUgd2hvbGUgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IHdvdWxkIGJlIGVzdHJhbmdlZCBmcm9tIGhpbS4iIEFzIGhlIHdhcyB3aXRoIHRlYXJzIGJlZ2dpbmcKICAgICAgICAgICAgICAgICAgICB0aGVzZSB0aGluZ3Mgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGluIG1hbnkgd29yZHMsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0YWtlcyBoaXMgcmlnaHQgaGFuZCwgYW5kLCBjb21mb3J0aW5nIGhpbSwgYmVncyBoaW0gdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIGFuIGVuZCBvZiBlbnRyZWF0aW5nLCBhbmQgYXNzdXJlcyBoaW0gdGhhdCBoaXMgcmVnYXJkIGZvciBoaW0gaXMgc28gZ3JlYXQsIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBmb3JnaXZlcyBib3RoIHRoZSBpbmp1cmllcyBvZiB0aGUgcmVwdWJsaWMgYW5kIGhpcyBwcml2YXRlIHdyb25ncywgYXQgaGlzCiAgICAgICAgICAgICAgICAgICAgZGVzaXJlIGFuZCBwcmF5ZXJzLiBIZSBzdW1tb25zIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbm9yaXg8L25hbWU+IHRvIGhpbTsgaGUgYnJpbmdzIGluIGhpcwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXI7IGhlIHBvaW50cyBvdXQgd2hhdCBoZSBjZW5zdXJlcyBpbiBoaW07IGhlIGxheXMgYmVmb3JlIGhpbSB3aGF0IGhlIG9mCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBwZXJjZWl2ZXMsIGFuZCB3aGF0IHRoZSBzdGF0ZSBjb21wbGFpbnMgb2Y7IGhlIHdhcm5zIGhpbSBmb3IgdGhlIGZ1dHVyZQogICAgICAgICAgICAgICAgICAgIHRvIGF2b2lkIGFsbCBncm91bmRzIG9mIHN1c3BpY2lvbjsgaGUgc2F5cyB0aGF0IGhlIHBhcmRvbnMgdGhlIHBhc3QsIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBzYWtlIG9mIGhpcyBicm90aGVyLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+LiBIZSBzZXRzIHNwaWVzIG92ZXIKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1ub3JpeDwvbmFtZT4gdGhhdCBoZSBtYXkgYmUgYWJsZSB0byBrbm93IHdoYXQgaGUgZG9lcywgYW5kIHdpdGgKICAgICAgICAgICAgICAgICAgICB3aG9tIGhlIGNvbW11bmljYXRlcy4gPC90cmFuc2xhdGlvbj4="
translation['1.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJlaW5nIG9uIHRoZSBzYW1lIGRheSBpbmZvcm1lZCBieSBoaXMgc2NvdXRzLCB0aGF0IHRoZSBlbmVteSBoYWQgZW5jYW1wZWQgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9vdCBvZiBhIG1vdW50YWluIGVpZ2h0IG1pbGVzIGZyb20gaGlzIG93biBjYW1wOyBoZSBzZW50IHBlcnNvbnMgdG8gYXNjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGUgbmF0dXJlIG9mIHRoZSBtb3VudGFpbiB3YXMsIGFuZCBvZiB3aGF0IGtpbmQgdGhlIGFzY2VudCBvbiBldmVyeSBzaWRlLgogICAgICAgICAgICAgICAgICAgIFdvcmQgd2FzIGJyb3VnaHQgYmFjaywgdGhhdCBpdCB3YXMgZWFzeS4gRHVyaW5nIHRoZSB0aGlyZCB3YXRjaCBoZSBvcmRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaXR1cyBMYWJpZW51czwvbmFtZT4sIGhpcyBsaWV1dGVuYW50IHdpdGggcHJhZXRvcmlhbiBwb3dlcnMsIHRvCiAgICAgICAgICAgICAgICAgICAgYXNjZW5kIHRvIHRoZSBoaWdoZXN0IHJpZGdlIG9mIHRoZSBtb3VudGFpbiB3aXRoIHR3byBsZWdpb25zLCBhbmQgd2l0aCB0aG9zZSBhcwogICAgICAgICAgICAgICAgICAgIGd1aWRlcyB3aG8gaGFkIGV4YW1pbmVkIHRoZSByb2FkOyBoZSBleHBsYWlucyB3aGF0IGhpcyBwbGFuIGlzLiBIZSBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgZHVyaW5nIHRoZSBmb3VydGggd2F0Y2gsIGhhc3RlbnMgdG8gdGhlbSBieSB0aGUgc2FtZSByb3V0ZSBieSB3aGljaCB0aGUgZW5lbXkKICAgICAgICAgICAgICAgICAgICBoYWQgZ29uZSwgYW5kIHNlbmRzIG9uIGFsbCB0aGUgY2F2YWxyeSBiZWZvcmUgaGltLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlB1YmxpdXMKICAgICAgICAgICAgICAgICAgICAgICAgQ29uc2lkaXVzPC9uYW1lPiwgd2hvIHdhcyByZXB1dGVkIHRvIGJlIHZlcnkgZXhwZXJpZW5jZWQgaW4gbWlsaXRhcnkKICAgICAgICAgICAgICAgICAgICBhZmZhaXJzLCBhbmQgaGFkIGJlZW4gaW4gdGhlIGFybXkgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWNpdXMgU3VsbGE8L25hbWU+LCBhbmQgYWZ0ZXJ3YXJkIGluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmN1cyBDcmFzc3VzPC9uYW1lPiwgaXMgc2VudCBmb3J3YXJkIHdpdGggdGhlIHNjb3V0cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGl0dXMgTGFiaWVudXM8L25hbWU+LCBoaXMgbGlldXRlbmFudCB3aXRoIHByYWV0b3JpYW4gcG93ZXJzLCB0bwogICAgICAgICAgICAgICAgICAgIGFzY2VuZCB0byB0aGUgaGlnaGVzdCByaWRnZSBvZiB0aGUgbW91bnRhaW4gd2l0aCB0d28gbGVnaW9ucywgYW5kIHdpdGggdGhvc2UgYXMKICAgICAgICAgICAgICAgICAgICBndWlkZXMgd2hvIGhhZCBleGFtaW5lZCB0aGUgcm9hZDsgaGUgZXhwbGFpbnMgd2hhdCBoaXMgcGxhbiBpcy4gSGUgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGR1cmluZyB0aGUgZm91cnRoIHdhdGNoLCBoYXN0ZW5zIHRvIHRoZW0gYnkgdGhlIHNhbWUgcm91dGUgYnkgd2hpY2ggdGhlIGVuZW15CiAgICAgICAgICAgICAgICAgICAgaGFkIGdvbmUsIGFuZCBzZW5kcyBvbiBhbGwgdGhlIGNhdmFscnkgYmVmb3JlIGhpbS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5QdWJsaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIENvbnNpZGl1czwvbmFtZT4sIHdobyB3YXMgcmVwdXRlZCB0byBiZSB2ZXJ5IGV4cGVyaWVuY2VkIGluIG1pbGl0YXJ5CiAgICAgICAgICAgICAgICAgICAgYWZmYWlycywgYW5kIGhhZCBiZWVuIGluIHRoZSBhcm15IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzIFN1bGxhPC9uYW1lPiwgYW5kIGFmdGVyd2FyZCBpbgogICAgICAgICAgICAgICAgICAgIHRoYXQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJjdXMgQ3Jhc3N1czwvbmFtZT4sIGlzIHNlbnQgZm9yd2FyZCB3aXRoIHRoZSBzY291dHMuIDwvdHJhbnNsYXRpb24+"
translation['1.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkF0IGRheS1icmVhaywgd2hlbiB0aGUgc3VtbWl0IG9mIHRoZSBtb3VudGFpbiB3YXMgaW4gdGhlIHBvc3Nlc3Npb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaXR1cyBMYWJpZW51czwvbmFtZT4sIGFuZCBoZSBoaW1zZWxmIHdhcyBub3QgZnVydGhlciBvZmYgdGhhbiBhIG1pbGUKICAgICAgICAgICAgICAgICAgICBhbmQgaGFsZiBmcm9tIHRoZSBlbmVteSdzIGNhbXAsIG5vciwgYXMgaGUgYWZ0ZXJ3YXJkIGFzY2VydGFpbmVkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgY2FwdGl2ZXMsIGhhZCBlaXRoZXIgaGlzIGFycml2YWwgb3IgdGhhdCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhYmllbnVzPC9uYW1lPiBiZWVuCiAgICAgICAgICAgICAgICAgICAgZGlzY292ZXJlZDsgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db25zaWRpdXM8L25hbWU+LCB3aXRoIGhpcyBob3JzZSBhdCBmdWxsIGdhbGxvcCwgY29tZXMgdXAgdG8KICAgICAgICAgICAgICAgICAgICBoaW0gc2F5cyB0aGF0IHRoZSBtb3VudGFpbiB3aGljaCBoZSBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+XSB3aXNoZWQKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgc2VpemVkIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGFiaWVudXM8L25hbWU+LCBpcyBpbiBwb3NzZXNzaW9uIG9mIHRoZSBlbmVteTsgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGhhcyBkaXNjb3ZlcmVkIHRoaXMgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsbGljPC9uYW1lPiBhcm1zIGFuZCBlbnNpZ25zLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGVhZHMgb2ZmIGhpcyBmb3JjZXMgdG8gdGhlIG5leHQgaGlsbDogW2FuZF0gZHJhd3MKICAgICAgICAgICAgICAgICAgICB0aGVtIHVwIGluIGJhdHRsZS1vcmRlci4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYWJpZW51czwvbmFtZT4sIGFzIGhlIGhhZCBiZWVuIG9yZGVyZWQgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG5vdCB0byBjb21lIHRvIGFuIGVuZ2FnZW1lbnQgdW5sZXNzCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+W0NhZXNhcjwvbmFtZT4nc10gb3duIGZvcmNlcyB3ZXJlIHNlZW4gbmVhciB0aGUgZW5lbXkncyBjYW1wLCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGF0dGFjayB1cG9uIHRoZSBlbmVteSBtaWdodCBiZSBtYWRlIG9uIGV2ZXJ5IHNpZGUgYXQgdGhlIHNhbWUgdGltZSwgd2FzLCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGhhdmluZyB0YWtlbiBwb3NzZXNzaW9uIG9mIHRoZSBtb3VudGFpbiwgd2FpdGluZyBmb3Igb3VyIG1lbiwgYW5kIHJlZnJhaW5pbmcKICAgICAgICAgICAgICAgICAgICBmcm9tIGJhdHRsZS4gV2hlbiwgYXQgbGVuZ3RoLCB0aGUgZGF5IHdhcyBmYXIgYWR2YW5jZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBsZWFybmVkIHRocm91Z2ggc3BpZXMsIHRoYXQgdGhlIG1vdW50YWluIHdhcyBpbiBwb3NzZXNzaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBtZW4sIGFuZCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IGhhZCBtb3ZlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNhbXAsIGFuZCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29uc2lkaXVzPC9uYW1lPiwgc3RydWNrIHdpdGggZmVhciwgaGFkIHJlcG9ydGVkIHRvIGhpbSwgYXMKICAgICAgICAgICAgICAgICAgICBzZWVuLCB0aGF0IHdoaWNoIGhlIGhhZCBub3Qgc2Vlbi4gT24gdGhhdCBkYXkgaGUgZm9sbG93cyB0aGUgZW5lbXkgYXQgaGlzIHVzdWFsCiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UsIGFuZCBwaXRjaGVzIGhpcyBjYW1wIHRocmVlIG1pbGVzIGZyb20gdGhlaXJzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaXR1cyBMYWJpZW51czwvbmFtZT4sIGFuZCBoZSBoaW1zZWxmIHdhcyBub3QgZnVydGhlciBvZmYgdGhhbiBhIG1pbGUKICAgICAgICAgICAgICAgICAgICBhbmQgaGFsZiBmcm9tIHRoZSBlbmVteSdzIGNhbXAsIG5vciwgYXMgaGUgYWZ0ZXJ3YXJkIGFzY2VydGFpbmVkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgY2FwdGl2ZXMsIGhhZCBlaXRoZXIgaGlzIGFycml2YWwgb3IgdGhhdCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhYmllbnVzPC9uYW1lPiBiZWVuCiAgICAgICAgICAgICAgICAgICAgZGlzY292ZXJlZDsgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db25zaWRpdXM8L25hbWU+LCB3aXRoIGhpcyBob3JzZSBhdCBmdWxsIGdhbGxvcCwgY29tZXMgdXAgdG8KICAgICAgICAgICAgICAgICAgICBoaW0gc2F5cyB0aGF0IHRoZSBtb3VudGFpbiB3aGljaCBoZSBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+XSB3aXNoZWQKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgc2VpemVkIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGFiaWVudXM8L25hbWU+LCBpcyBpbiBwb3NzZXNzaW9uIG9mIHRoZSBlbmVteTsgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGhhcyBkaXNjb3ZlcmVkIHRoaXMgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsbGljPC9uYW1lPiBhcm1zIGFuZCBlbnNpZ25zLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGVhZHMgb2ZmIGhpcyBmb3JjZXMgdG8gdGhlIG5leHQgaGlsbDogW2FuZF0gZHJhd3MKICAgICAgICAgICAgICAgICAgICB0aGVtIHVwIGluIGJhdHRsZS1vcmRlci4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYWJpZW51czwvbmFtZT4sIGFzIGhlIGhhZCBiZWVuIG9yZGVyZWQgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG5vdCB0byBjb21lIHRvIGFuIGVuZ2FnZW1lbnQgdW5sZXNzCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+W0NhZXNhcjwvbmFtZT4nc10gb3duIGZvcmNlcyB3ZXJlIHNlZW4gbmVhciB0aGUgZW5lbXkncyBjYW1wLCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGF0dGFjayB1cG9uIHRoZSBlbmVteSBtaWdodCBiZSBtYWRlIG9uIGV2ZXJ5IHNpZGUgYXQgdGhlIHNhbWUgdGltZSwgd2FzLCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGhhdmluZyB0YWtlbiBwb3NzZXNzaW9uIG9mIHRoZSBtb3VudGFpbiwgd2FpdGluZyBmb3Igb3VyIG1lbiwgYW5kIHJlZnJhaW5pbmcKICAgICAgICAgICAgICAgICAgICBmcm9tIGJhdHRsZS4gV2hlbiwgYXQgbGVuZ3RoLCB0aGUgZGF5IHdhcyBmYXIgYWR2YW5jZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBsZWFybmVkIHRocm91Z2ggc3BpZXMsIHRoYXQgdGhlIG1vdW50YWluIHdhcyBpbiBwb3NzZXNzaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBtZW4sIGFuZCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IGhhZCBtb3ZlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNhbXAsIGFuZCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29uc2lkaXVzPC9uYW1lPiwgc3RydWNrIHdpdGggZmVhciwgaGFkIHJlcG9ydGVkIHRvIGhpbSwgYXMKICAgICAgICAgICAgICAgICAgICBzZWVuLCB0aGF0IHdoaWNoIGhlIGhhZCBub3Qgc2Vlbi4gT24gdGhhdCBkYXkgaGUgZm9sbG93cyB0aGUgZW5lbXkgYXQgaGlzIHVzdWFsCiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UsIGFuZCBwaXRjaGVzIGhpcyBjYW1wIHRocmVlIG1pbGVzIGZyb20gdGhlaXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBuZXh0IGRheSAoYXMgdGhlcmUgcmVtYWluZWQgaW4gYWxsIG9ubHkgdHdvIGRheSdzIHNwYWNlIFt0byB0aGUgdGltZV0gd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIG11c3Qgc2VydmUgb3V0IHRoZSBjb3JuIHRvIGhpcyBhcm15LCBhbmQgYXMgaGUgd2FzIG5vdCBtb3JlIHRoYW4gZWlnaHRlZW4gbWlsZXMKICAgICAgICAgICAgICAgICAgICBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMDc5OCIgcmVnPSIgICtNb250IEJldXZyYXkgKGluaGFiaXRlZCBwbGFjZSksIFNhb25lLWV0LUxvaXJlLCBCdXJndW5keSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDAwNzk4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDA3OTgiPkJpYnJhY3RlPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYnkgZmFyIHRoZSBsYXJnZXN0IGFuZCBiZXN0LXN0b3JlZCB0b3duIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiksIGhlCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGF0IGhlIG91Z2h0IHRvIHByb3ZpZGUgZm9yIGEgc3VwcGx5IG9mIGNvcm47IGFuZCBkaXZlcnRlZCBoaXMgbWFyY2gKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBhbmQgYWR2YW5jZWQgcmFwaWRseSB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDA3OTgiIHJlZz0iICArTW9udCBCZXV2cmF5IChpbmhhYml0ZWQgcGxhY2UpLCBTYW9uZS1ldC1Mb2lyZSwgQnVyZ3VuZHksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMDc5OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAwNzk4Ij5CaWJyYWN0ZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4uIFRoaXMgY2lyY3Vtc3RhbmNlIGlzIHJlcG9ydGVkIHRvIHRoZSBlbmVteSBieSBzb21lIGRlc2VydGVycyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzIEFlbWlsaXVzPC9uYW1lPiwgYSBjYXB0YWluLCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxsaWM8L25hbWU+IGhvcnNlLgogICAgICAgICAgICAgICAgICAgIFRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlpPC9uYW1lPiwgZWl0aGVyIGJlY2F1c2UgdGhleSB0aG91Z2h0IHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LCBzdHJ1Y2sgd2l0aCB0ZXJyb3IsIHdlcmUgcmV0cmVhdGluZyBmcm9tIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vcmUgc28sIGFzIHRoZSBkYXkgYmVmb3JlLCB0aG91Z2ggdGhleSBoYWQgc2VpemVkIG9uIHRoZSBoaWdoZXIgZ3JvdW5kcywKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCBub3Qgam9pbmVkIGJhdHRsZSBvciBiZWNhdXNlIHRoZXkgZmxhdHRlcmVkIHRoZW1zZWx2ZXMgdGhhdCB0aGV5IG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgYmUgY3V0IG9mIGZyb20gdGhlIHByb3Zpc2lvbnMsIGFsdGVyaW5nIHRoZWlyIHBsYW4gYW5kIGNoYW5naW5nIHRoZWlyIHJvdXRlLAogICAgICAgICAgICAgICAgICAgIGJlZ2FuIHRvIHB1cnN1ZSwgYW5kIHRvIGFubm95IG91ciBtZW4gaW4gdGhlIHJlYXIuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDA3OTgiIHJlZz0iICArTW9udCBCZXV2cmF5IChpbmhhYml0ZWQgcGxhY2UpLCBTYW9uZS1ldC1Mb2lyZSwgQnVyZ3VuZHksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMDc5OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAwNzk4Ij5CaWJyYWN0ZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGJ5IGZhciB0aGUgbGFyZ2VzdCBhbmQgYmVzdC1zdG9yZWQgdG93biBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDA3OTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMDc5OCI+QmlicmFjdGU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiksIGhlCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGF0IGhlIG91Z2h0IHRvIHByb3ZpZGUgZm9yIGEgc3VwcGx5IG9mIGNvcm47IGFuZCBkaXZlcnRlZCBoaXMgbWFyY2gKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBhbmQgYWR2YW5jZWQgcmFwaWRseSB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDA3OTgiIHJlZz0iICArTW9udCBCZXV2cmF5IChpbmhhYml0ZWQgcGxhY2UpLCBTYW9uZS1ldC1Mb2lyZSwgQnVyZ3VuZHksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMDc5OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAwNzk4Ij5CaWJyYWN0ZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4uIFRoaXMgY2lyY3Vtc3RhbmNlIGlzIHJlcG9ydGVkIHRvIHRoZSBlbmVteSBieSBzb21lIGRlc2VydGVycyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDAwNzk4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDA3OTgiPkJpYnJhY3RlPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWNpdXMgQWVtaWxpdXM8L25hbWU+LCBhIGNhcHRhaW4sIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGxpYzwvbmFtZT4gaG9yc2UuCiAgICAgICAgICAgICAgICAgICAgVGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsdmV0aWk8L25hbWU+LCBlaXRoZXIgYmVjYXVzZSB0aGV5IHRob3VnaHQgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIHN0cnVjayB3aXRoIHRlcnJvciwgd2VyZSByZXRyZWF0aW5nIGZyb20gdGhlbSwKICAgICAgICAgICAgICAgICAgICB0aGUgbW9yZSBzbywgYXMgdGhlIGRheSBiZWZvcmUsIHRob3VnaCB0aGV5IGhhZCBzZWl6ZWQgb24gdGhlIGhpZ2hlciBncm91bmRzLAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIG5vdCBqb2luZWQgYmF0dGxlIG9yIGJlY2F1c2UgdGhleSBmbGF0dGVyZWQgdGhlbXNlbHZlcyB0aGF0IHRoZXkgbWlnaHQKICAgICAgICAgICAgICAgICAgICBiZSBjdXQgb2YgZnJvbSB0aGUgcHJvdmlzaW9ucywgYWx0ZXJpbmcgdGhlaXIgcGxhbiBhbmQgY2hhbmdpbmcgdGhlaXIgcm91dGUsCiAgICAgICAgICAgICAgICAgICAgYmVnYW4gdG8gcHVyc3VlLCBhbmQgdG8gYW5ub3kgb3VyIG1lbiBpbiB0aGUgcmVhci4gPC90cmFuc2xhdGlvbj4="
translation['1.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgd2hlbiBoZSBvYnNlcnZlcyB0aGlzLCBkcmF3cyBvZmYgaGlzIGZvcmNlcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBuZXh0IGhpbGwsIGFuZCBzZW50IHRoZSBjYXZhbHJ5IHRvIHN1c3RhaW4gdGhlIGF0dGFjayBvZiB0aGUgZW5lbXkuIEhlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiwgbWVhbndoaWxlLCBkcmV3IHVwIG9uIHRoZSBtaWRkbGUgb2YgdGhlIGhpbGwgYSB0cmlwbGUgbGluZSBvZiBoaXMgZm91cgogICAgICAgICAgICAgICAgICAgIHZldGVyYW4gbGVnaW9ucyBpbiBzdWNoIGEgbWFubmVyLCB0aGF0IGhlIHBsYWNlZCBhYm92ZSBoaW0gb24gdGhlIHZlcnkgc3VtbWl0CiAgICAgICAgICAgICAgICAgICAgdGhlIHR3byBsZWdpb25zLCB3aGljaCBoZSBoYWQgbGF0ZWx5IGxldmllZCBpbiBIaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGF1eGlsaWFyaWVzOyBhbmQgaGUgb3JkZXJlZCB0aGF0IHRoZSB3aG9sZSBtb3VudGFpbiBzaG91bGQgYmUgY292ZXJlZCB3aXRoIG1lbiwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBtZWFud2hpbGUgdGhlIGJhZ2dhZ2Ugc2hvdWxkIGJlIGJyb3VnaHQgdG9nZXRoZXIgaW50byBvbmUgcGxhY2UsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBwb3NpdGlvbiBiZSBwcm90ZWN0ZWQgYnkgdGhvc2Ugd2hvIHdlcmUgcG9zdGVkIGluIHRoZSB1cHBlciBsaW5lLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWx2ZXRpaTwvbmFtZT4gaGF2aW5nIGZvbGxvd2VkIHdpdGggYWxsIHRoZWlyIHdhZ29ucywgY29sbGVjdGVkIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgYmFnZ2FnZSBpbnRvIG9uZSBwbGFjZTogdGhleSB0aGVtc2VsdmVzLCBhZnRlciBoYXZpbmcgcmVwdWxzZWQgb3VyIGNhdmFscnkgYW5kCiAgICAgICAgICAgICAgICAgICAgZm9ybWVkIGEgcGhhbGFueCwgYWR2YW5jZWQgdXAgdG8gb3VyIGZyb250IGxpbmUgaW4gdmVyeSBjbG9zZSBvcmRlci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgd2hlbiBoZSBvYnNlcnZlcyB0aGlzLCBkcmF3cyBvZmYgaGlzIGZvcmNlcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBuZXh0IGhpbGwsIGFuZCBzZW50IHRoZSBjYXZhbHJ5IHRvIHN1c3RhaW4gdGhlIGF0dGFjayBvZiB0aGUgZW5lbXkuIEhlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiwgbWVhbndoaWxlLCBkcmV3IHVwIG9uIHRoZSBtaWRkbGUgb2YgdGhlIGhpbGwgYSB0cmlwbGUgbGluZSBvZiBoaXMgZm91cgogICAgICAgICAgICAgICAgICAgIHZldGVyYW4gbGVnaW9ucyBpbiBzdWNoIGEgbWFubmVyLCB0aGF0IGhlIHBsYWNlZCBhYm92ZSBoaW0gb24gdGhlIHZlcnkgc3VtbWl0CiAgICAgICAgICAgICAgICAgICAgdGhlIHR3byBsZWdpb25zLCB3aGljaCBoZSBoYWQgbGF0ZWx5IGxldmllZCBpbiBIaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGF1eGlsaWFyaWVzOyBhbmQgaGUgb3JkZXJlZCB0aGF0IHRoZSB3aG9sZSBtb3VudGFpbiBzaG91bGQgYmUgY292ZXJlZCB3aXRoIG1lbiwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBtZWFud2hpbGUgdGhlIGJhZ2dhZ2Ugc2hvdWxkIGJlIGJyb3VnaHQgdG9nZXRoZXIgaW50byBvbmUgcGxhY2UsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBwb3NpdGlvbiBiZSBwcm90ZWN0ZWQgYnkgdGhvc2Ugd2hvIHdlcmUgcG9zdGVkIGluIHRoZSB1cHBlciBsaW5lLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWx2ZXRpaTwvbmFtZT4gaGF2aW5nIGZvbGxvd2VkIHdpdGggYWxsIHRoZWlyIHdhZ29ucywgY29sbGVjdGVkIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgYmFnZ2FnZSBpbnRvIG9uZSBwbGFjZTogdGhleSB0aGVtc2VsdmVzLCBhZnRlciBoYXZpbmcgcmVwdWxzZWQgb3VyIGNhdmFscnkgYW5kCiAgICAgICAgICAgICAgICAgICAgZm9ybWVkIGEgcGhhbGFueCwgYWR2YW5jZWQgdXAgdG8gb3VyIGZyb250IGxpbmUgaW4gdmVyeSBjbG9zZSBvcmRlci4gPC90cmFuc2xhdGlvbj4="
translation['1.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIHJlbW92ZWQgb3V0IG9mIHNpZ2h0IGZpcnN0IGhpcyBvd24gaG9yc2UsCiAgICAgICAgICAgICAgICAgICAgdGhlbiB0aG9zZSBvZiBhbGwsIHRoYXQgaGUgbWlnaHQgbWFrZSB0aGUgZGFuZ2VyIG9mIGExMSBlcXVhbCwgYW5kIGRvIGF3YXkgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBob3BlIG9mIGZsaWdodCwgYWZ0ZXIgZW5jb3VyYWdpbmcgaGlzIG1lbiwgam9pbmVkIGJhdHRsZS4gSGlzIHNvbGRpZXJzCiAgICAgICAgICAgICAgICAgICAgaHVybGluZyB0aGVpciBqYXZlbGlucyBmcm9tIHRoZSBoaWdoZXIgZ3JvdW5kLCBlYXNpbHkgYnJva2UgdGhlIGVuZW15J3MgcGhhbGFueC4KICAgICAgICAgICAgICAgICAgICBUaGF0IGJlaW5nIGRpc3BlcnNlZCwgdGhleSBtYWRlIGEgY2hhcmdlIG9uIHRoZW0gd2l0aCBkcmF3biBzd29yZHMuIEl0IHdhcyBhCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgaGluZGVyYW5jZSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBpbiBmaWdodGluZywgdGhhdCwgd2hlbgogICAgICAgICAgICAgICAgICAgIHNldmVyYWwgb2YgdGhlaXIgYnVja2xlcnMgaGFkIGJlZW4gYnkgb25lIHN0cm9rZSBvZiB0aGUgKDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4pIGphdmVsaW5zIHBpZXJjZWQgdGhyb3VnaCBhbmQgcGlubmVkIGZhc3QgdG9nZXRoZXIsIGFzIHRoZQogICAgICAgICAgICAgICAgICAgIHBvaW50IG9mIHRoZSBpcm9uIGhhZCBiZW50IGl0c2VsZiwgdGhleSBjb3VsZCBuZWl0aGVyIHBsdWNrIGl0IG91dCwgbm9yLCB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbGVmdCBoYW5kIGVudGFuZ2xlZCwgZmlnaHQgd2l0aCBzdWZmaWNpZW50IGVhc2U7IHNvIHRoYXQgbWFueSwgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgbG9uZyB0b3NzZWQgdGhlaXIgYXJtIGFib3V0LCBjaG9zZSByYXRoZXIgdG8gY2FzdCBhd2F5IHRoZSBidWNrbGVyIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGVpciBoYW5kLCBhbmQgdG8gZmlnaHQgd2l0aCB0aGVpciBwZXJzb24gdW5wcm90ZWN0ZWQuIEF0IGxlbmd0aCwgd29ybiBvdXQgd2l0aAogICAgICAgICAgICAgICAgICAgIHdvdW5kcywgdGhleSBiZWdhbiB0byBnaXZlIHdheSwgYW5kLCBhcyB0aGVyZSB3YXMgaW4gdGhlIG5laWdoYm9yaG9vZCBhIG1vdW50YWluCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgYSBtaWxlIG9mZiwgdG8gYmV0YWtlIHRoZW1zZWx2ZXMgdGhpdGhlci4gV2hlbiB0aGUgbW91bnRhaW4gaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBnYWluZWQsIGFuZCBvdXIgbWVuIHdlcmUgYWR2YW5jaW5nIHVwLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Cb2lpPC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UdWxpbmdpPC9uYW1lPiwgd2hvIHdpdGggYWJvdXQgMTUsMDAwIG1lbiBjbG9zZWQgdGhlIGVuZW15J3MgbGluZSBvZgogICAgICAgICAgICAgICAgICAgIG1hcmNoIGFuZCBzZXJ2ZWQgYXMgYSBndWFyZCB0byB0aGVpciByZWFyLCBoYXZpbmcgYXNzYWlsZWQgb3VyIG1lbiBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBleHBvc2VkIGZsYW5rIGFzIHRoZXkgYWR2YW5jZWQgW3ByZXBhcmVkXSB0byBzdXJyb3VuZCB0aGVtOyB1cG9uIHNlZWluZyB3aGljaCwKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiB3aG8gaGFkIGJldGFrZW4gdGhlbXNlbHZlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBtb3VudGFpbiwgYmVnYW4gdG8gcHJlc3Mgb24gYWdhaW4gYW5kIHJlbmV3IHRoZSBiYXR0bGUuIFRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJvbWFuczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBoYXZpbmcgZmFjZWQgYWJvdXQsIGFkdmFuY2VkIHRvIHRoZSBhdHRhY2sgaW4gdHdvIGRpdmlzaW9uczsgdGhlIGZpcnN0IGFuZAogICAgICAgICAgICAgICAgICAgIHNlY29uZCBsaW5lLCB0byB3aXRoc3RhbmQgdGhvc2Ugd2hvIGhhZCBiZWVuIGRlZmVhdGVkIGFuZCBkcml2ZW4gb2ZmIHRoZSBmaWVsZDsKICAgICAgICAgICAgICAgICAgICB0aGUgdGhpcmQgdG8gcmVjZWl2ZSB0aG9zZSB3aG8gd2VyZSBqdXN0IGFycml2aW5nLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgcmVtb3ZlZCBvdXQgb2Ygc2lnaHQgZmlyc3QgaGlzIG93biBob3JzZSwKICAgICAgICAgICAgICAgICAgICB0aGVuIHRob3NlIG9mIGFsbCwgdGhhdCBoZSBtaWdodCBtYWtlIHRoZSBkYW5nZXIgb2YgYTExIGVxdWFsLCBhbmQgZG8gYXdheSB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlIGhvcGUgb2YgZmxpZ2h0LCBhZnRlciBlbmNvdXJhZ2luZyBoaXMgbWVuLCBqb2luZWQgYmF0dGxlLiBIaXMgc29sZGllcnMKICAgICAgICAgICAgICAgICAgICBodXJsaW5nIHRoZWlyIGphdmVsaW5zIGZyb20gdGhlIGhpZ2hlciBncm91bmQsIGVhc2lseSBicm9rZSB0aGUgZW5lbXkncyBwaGFsYW54LgogICAgICAgICAgICAgICAgICAgIFRoYXQgYmVpbmcgZGlzcGVyc2VkLCB0aGV5IG1hZGUgYSBjaGFyZ2Ugb24gdGhlbSB3aXRoIGRyYXduIHN3b3Jkcy4gSXQgd2FzIGEKICAgICAgICAgICAgICAgICAgICBncmVhdCBoaW5kZXJhbmNlIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IGluIGZpZ2h0aW5nLCB0aGF0LCB3aGVuCiAgICAgICAgICAgICAgICAgICAgc2V2ZXJhbCBvZiB0aGVpciBidWNrbGVycyBoYWQgYmVlbiBieSBvbmUgc3Ryb2tlIG9mIHRoZSAoPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPikgamF2ZWxpbnMgcGllcmNlZCB0aHJvdWdoIGFuZCBwaW5uZWQgZmFzdCB0b2dldGhlciwgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcG9pbnQgb2YgdGhlIGlyb24gaGFkIGJlbnQgaXRzZWxmLCB0aGV5IGNvdWxkIG5laXRoZXIgcGx1Y2sgaXQgb3V0LCBub3IsIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGVpciBsZWZ0IGhhbmQgZW50YW5nbGVkLCBmaWdodCB3aXRoIHN1ZmZpY2llbnQgZWFzZTsgc28gdGhhdCBtYW55LCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGhhdmluZyBsb25nIHRvc3NlZCB0aGVpciBhcm0gYWJvdXQsIGNob3NlIHJhdGhlciB0byBjYXN0IGF3YXkgdGhlIGJ1Y2tsZXIgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZWlyIGhhbmQsIGFuZCB0byBmaWdodCB3aXRoIHRoZWlyIHBlcnNvbiB1bnByb3RlY3RlZC4gQXQgbGVuZ3RoLCB3b3JuIG91dCB3aXRoCiAgICAgICAgICAgICAgICAgICAgd291bmRzLCB0aGV5IGJlZ2FuIHRvIGdpdmUgd2F5LCBhbmQsIGFzIHRoZXJlIHdhcyBpbiB0aGUgbmVpZ2hib3Job29kIGEgbW91bnRhaW4KICAgICAgICAgICAgICAgICAgICBhYm91dCBhIG1pbGUgb2ZmLCB0byBiZXRha2UgdGhlbXNlbHZlcyB0aGl0aGVyLiBXaGVuIHRoZSBtb3VudGFpbiBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGdhaW5lZCwgYW5kIG91ciBtZW4gd2VyZSBhZHZhbmNpbmcgdXAsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJvaWk8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlR1bGluZ2k8L25hbWU+LCB3aG8gd2l0aCBhYm91dCAxNSwwMDAgbWVuIGNsb3NlZCB0aGUgZW5lbXkncyBsaW5lIG9mCiAgICAgICAgICAgICAgICAgICAgbWFyY2ggYW5kIHNlcnZlZCBhcyBhIGd1YXJkIHRvIHRoZWlyIHJlYXIsIGhhdmluZyBhc3NhaWxlZCBvdXIgbWVuIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGV4cG9zZWQgZmxhbmsgYXMgdGhleSBhZHZhbmNlZCBbcHJlcGFyZWRdIHRvIHN1cnJvdW5kIHRoZW07IHVwb24gc2VlaW5nIHdoaWNoLAogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IHdobyBoYWQgYmV0YWtlbiB0aGVtc2VsdmVzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIG1vdW50YWluLCBiZWdhbiB0byBwcmVzcyBvbiBhZ2FpbiBhbmQgcmVuZXcgdGhlIGJhdHRsZS4gVGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tYW5zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGhhdmluZyBmYWNlZCBhYm91dCwgYWR2YW5jZWQgdG8gdGhlIGF0dGFjayBpbiB0d28gZGl2aXNpb25zOyB0aGUgZmlyc3QgYW5kCiAgICAgICAgICAgICAgICAgICAgc2Vjb25kIGxpbmUsIHRvIHdpdGhzdGFuZCB0aG9zZSB3aG8gaGFkIGJlZW4gZGVmZWF0ZWQgYW5kIGRyaXZlbiBvZmYgdGhlIGZpZWxkOwogICAgICAgICAgICAgICAgICAgIHRoZSB0aGlyZCB0byByZWNlaXZlIHRob3NlIHdobyB3ZXJlIGp1c3QgYXJyaXZpbmcuIDwvdHJhbnNsYXRpb24+"
translation['1.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRodXMsIHdhcyB0aGUgY29udGVzdCBsb25nIGFuZCB2aWdvcm91c2x5IGNhcnJpZWQgb24gd2l0aCBkb3VidGZ1bCBzdWNjZXNzLiBXaGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBjb3VsZCBubyBsb25nZXIgd2l0aHN0YW5kIHRoZSBhdHRhY2tzIG9mIG91ciBtZW4sIHRoZSBvbmUgZGl2aXNpb24sIGFzIHRoZXkKICAgICAgICAgICAgICAgICAgICBoYWQgYmVndW4gdG8gZG8sIGJldG9vayB0aGVtc2VsdmVzIHRvIHRoZSBtb3VudGFpbjsgdGhlIG90aGVyIHJlcGFpcmVkIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgYmFnZ2FnZSBhbmQgd2Fnb25zLiBGb3IgZHVyaW5nIHRoZSB3aG9sZSBvZiB0aGlzIGJhdHRsZSwgYWx0aG91Z2ggdGhlIGZpZ2h0CiAgICAgICAgICAgICAgICAgICAgbGFzdGVkIGZyb20gdGhlIHNldmVudGggaG91ciBbaS5lLiAxMiAobm9vbikgMSBQLiBNLl0gdG8gZXZlbnRpZGUsIG5vIG9uZSBjb3VsZAogICAgICAgICAgICAgICAgICAgIHNlZSBhbiBlbmVteSB3aXRoIGhpcyBiYWNrIHR1cm5lZC4gVGhlIGZpZ2h0IHdhcyBjYXJyaWVkIG9uIGFsc28gYXQgdGhlIGJhZ2dhZ2UKICAgICAgICAgICAgICAgICAgICB0aWxsIGxhdGUgaW4gdGhlIG5pZ2h0LCBmb3IgdGhleSBoYWQgc2V0IHdhZ29ucyBpbiB0aGUgd2F5IGFzIGEgcmFtcGFydCwgYW5kCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgaGlnaGVyIGdyb3VuZCBrZXB0IHRocm93aW5nIHdlYXBvbnMgdXBvbiBvdXIgbWVuLCBhcyB0aGV5IGNhbWUgb24sIGFuZAogICAgICAgICAgICAgICAgICAgIHNvbWUgZnJvbSBiZXR3ZWVuIHRoZSB3YWdvbnMgYW5kIHRoZSB3aGVlbHMga2VwdCBkYXJ0aW5nIHRoZWlyIGxhbmNlcyBhbmQKICAgICAgICAgICAgICAgICAgICBqYXZlbGlucyBmcm9tIGJlbmVhdGgsIGFuZCB3b3VuZGluZyBvdXIgbWVuLiBBZnRlciB0aGUgZmlnaHQgaGFkIGxhc3RlZCBzb21lCiAgICAgICAgICAgICAgICAgICAgdGltZSwgb3VyIG1lbiBnYWluZWQgcG9zc2Vzc2lvbiBvZiB0aGVpciBiYWdnYWdlIGFuZCBjYW1wLiBUaGVyZSB0aGUgZGF1Z2h0ZXIKICAgICAgICAgICAgICAgICAgICBhbmQgb25lIG9mIHRoZSBzb25zIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3JnZXRvcml4PC9uYW1lPiB3YXMgdGFrZW4uIEFmdGVyIHRoZSBiYXR0bGUgYWJvdXQKICAgICAgICAgICAgICAgICAgICAxMzAsMDAwIG1lbiBbb2YgdGhlIGVuZW15XSByZW1haW5lZCBhbGl2ZSwgd2hvIG1hcmNoZWQgaW5jZXNzYW50bHkgZHVyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHdob2xlIG9mIHRoYXQgbmlnaHQ7IGFuZCBhZnRlciBhIG1hcmNoIGRpc2NvbnRpbnVlZCBmb3Igbm8gcGFydCBvZiB0aGUgbmlnaHQsCiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCBpbiB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM0MyIgcmVnPSIgICtMYW5ncmVzIFs1LjMzMyw0Ny44ODNdIChpbmhhYml0ZWQgcGxhY2UpLCBIYXV0ZS1NYXJuZSwgQ2hhbXBhZ25lLUFyZGVubmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODM0MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzQzIj5MaW5nb25lczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gb24gdGhlIGZvdXJ0aCBkYXksIHdoaWxlIG91ciBtZW4sIGhhdmluZyBzdG9wcGVkIGZvciB0aHJlZSBkYXlzLCBib3RoIG9uCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudCBvZiB0aGUgd291bmRzIG9mIHRoZSBzb2xkaWVycyBhbmQgdGhlIGJ1cmlhbCBvZiB0aGUgc2xhaW4sIGhhZCBub3QgYmVlbgogICAgICAgICAgICAgICAgICAgIGFibGUgdG8gZm9sbG93IHRoZW0uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBzZW50IGxldHRlcnMgYW5kIG1lc3NlbmdlcnMKICAgICAgICAgICAgICAgICAgICB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzQzIiByZWc9IiAgK0xhbmdyZXMgWzUuMzMzLDQ3Ljg4M10gKGluaGFiaXRlZCBwbGFjZSksIEhhdXRlLU1hcm5lLCBDaGFtcGFnbmUtQXJkZW5uZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4MzQzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzNDMiPkxpbmdvbmVzPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBbd2l0aCBvcmRlcnNdIHRoYXQgdGhleSBzaG91bGQgbm90IGFzc2lzdCB0aGVtIHdpdGggY29ybiBvciB3aXRoIGFueQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGVsc2U7IGZvciB0aGF0IGlmIHRoZXkgc2hvdWxkIGFzc2lzdCB0aGVtLCBoZSB3b3VsZCByZWdhcmQgdGhlbSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGxpZ2h0IGFzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LiBBZnRlciB0aGUgdGhyZWUgZGF5cycKICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbCBoZSBiZWdhbiB0byBmb2xsb3cgdGhlbSBoaW1zZWxmIHdpdGggYWxsIGhpcyBmb3JjZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yZ2V0b3JpeDwvbmFtZT4gd2FzIHRha2VuLiBBZnRlciB0aGUgYmF0dGxlIGFib3V0CiAgICAgICAgICAgICAgICAgICAgMTMwLDAwMCBtZW4gW29mIHRoZSBlbmVteV0gcmVtYWluZWQgYWxpdmUsIHdobyBtYXJjaGVkIGluY2Vzc2FudGx5IGR1cmluZyB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBvZiB0aGF0IG5pZ2h0OyBhbmQgYWZ0ZXIgYSBtYXJjaCBkaXNjb250aW51ZWQgZm9yIG5vIHBhcnQgb2YgdGhlIG5pZ2h0LAogICAgICAgICAgICAgICAgICAgIGFycml2ZWQgaW4gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzNDMiIHJlZz0iICArTGFuZ3JlcyBbNS4zMzMsNDcuODgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgSGF1dGUtTWFybmUsIENoYW1wYWduZS1BcmRlbm5lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDgzNDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM0MyI+TGluZ29uZXM8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+IG9uIHRoZSBmb3VydGggZGF5LCB3aGlsZSBvdXIgbWVuLCBoYXZpbmcgc3RvcHBlZCBmb3IgdGhyZWUgZGF5cywgYm90aCBvbgogICAgICAgICAgICAgICAgICAgIGFjY291bnQgb2YgdGhlIHdvdW5kcyBvZiB0aGUgc29sZGllcnMgYW5kIHRoZSBidXJpYWwgb2YgdGhlIHNsYWluLCBoYWQgbm90IGJlZW4KICAgICAgICAgICAgICAgICAgICBhYmxlIHRvIGZvbGxvdyB0aGVtLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODM0MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzQzIj5MaW5nb25lczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBzZW50IGxldHRlcnMgYW5kIG1lc3NlbmdlcnMKICAgICAgICAgICAgICAgICAgICB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzQzIiByZWc9IiAgK0xhbmdyZXMgWzUuMzMzLDQ3Ljg4M10gKGluaGFiaXRlZCBwbGFjZSksIEhhdXRlLU1hcm5lLCBDaGFtcGFnbmUtQXJkZW5uZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4MzQzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzNDMiPkxpbmdvbmVzPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBbd2l0aCBvcmRlcnNdIHRoYXQgdGhleSBzaG91bGQgbm90IGFzc2lzdCB0aGVtIHdpdGggY29ybiBvciB3aXRoIGFueQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGVsc2U7IGZvciB0aGF0IGlmIHRoZXkgc2hvdWxkIGFzc2lzdCB0aGVtLCBoZSB3b3VsZCByZWdhcmQgdGhlbSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGxpZ2h0IGFzIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODM0MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzQzIj5MaW5nb25lczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4uIEFmdGVyIHRoZSB0aHJlZSBkYXlzJwogICAgICAgICAgICAgICAgICAgIGludGVydmFsIGhlIGJlZ2FuIHRvIGZvbGxvdyB0aGVtIGhpbXNlbGYgd2l0aCBhbGwgaGlzIGZvcmNlcy4gPC90cmFuc2xhdGlvbj4="
translation['1.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlpPC9uYW1lPiwgY29tcGVsbGVkIGJ5IHRoZSB3YW50IG9mIGV2ZXJ5IHRoaW5nLCBzZW50IGVtYmFzc2Fkb3JzCiAgICAgICAgICAgICAgICAgICAgdG8gaGltIGFib3V0IGEgc3VycmVuZGVyLiBXaGVuIHRoZXNlIGhhZCBtZXQgaGltIG9uIHRoZSB3YXkgYW5kIGhhZCB0aHJvd24KICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGF0IGhpcyBmZWV0LCBhbmQgc3BlYWtpbmcgaW4gc3VwcGxpYW50IHRvbmUgaGFkIHdpdGggdGVhcnMgc3VlZCBmb3IKICAgICAgICAgICAgICAgICAgICBwZWFjZSwgYW5kIFt3aGVuXSBoZSBoYWQgb3JkZXJlZCB0aGVtIHRvIGF3YWl0IGhpcyBhcnJpdmFsLCBpbiB0aGUgcGxhY2UsIHdoZXJlCiAgICAgICAgICAgICAgICAgICAgdGhleSB0aGVuIHdlcmUsIHRoZXkgb2JleWVkIGhpcyBjb21tYW5kcy4gV2hlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIGF0IHRoYXQgcGxhY2UsIGhlIGRlbWFuZGVkIGhvc3RhZ2VzLCB0aGVpciBhcm1zLCBhbmQgdGhlIHNsYXZlcyB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ0ZWQgdG8gdGhlbS4gV2hpbGUgdGhvc2UgdGhpbmdzIGFyZSBiZWluZyBzb3VnaHQgZm9yIGFuZCBnb3QgdG9nZXRoZXIsCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgYSBuaWdodCdzIGludGVydmFsLCBhYm91dCA2MDAwIG1lbiBvZiB0aGF0IGNhbnRvbiB3aGljaCBpcyBjYWxsZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyYmlnZW5lPC9uYW1lPiwgd2hldGhlciB0ZXJyaWZpZWQgYnkgZmVhciwgbGVzdCBhZnRlciBkZWxpdmVyaW5nIHVwCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYXJtcywgdGhleSBzaG91bGQgc3VmZmVyIHB1bmlzaG1lbnQsIG9yIGVsc2UgaW5kdWNlZCBieSB0aGUgaG9wZSBvZgogICAgICAgICAgICAgICAgICAgIHNhZmV0eSwgYmVjYXVzZSB0aGV5IHN1cHBvc2VkIHRoYXQsIGFtaWQgc28gdmFzdCBhIG11bHRpdHVkZSBvZiB0aG9zZSB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgc3VycmVuZGVyZWQgdGhlbXNlbHZlcywgdGhlaXIgZmxpZ2h0IG1pZ2h0IGVpdGhlciBiZSBjb25jZWFsZWQgb3IgZW50aXJlbHkKICAgICAgICAgICAgICAgICAgICBvdmVybG9va2VkLCBoYXZpbmcgYXQgbmlnaHQtZmFsbCBkZXBhcnRlZCBvdXQgb2YgdGhlIGNhbXAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGhhc3RlbmVkIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+IGFuZCB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsdmV0aWk8L25hbWU+LCBjb21wZWxsZWQgYnkgdGhlIHdhbnQgb2YgZXZlcnkgdGhpbmcsIHNlbnQgZW1iYXNzYWRvcnMKICAgICAgICAgICAgICAgICAgICB0byBoaW0gYWJvdXQgYSBzdXJyZW5kZXIuIFdoZW4gdGhlc2UgaGFkIG1ldCBoaW0gb24gdGhlIHdheSBhbmQgaGFkIHRocm93bgogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgYXQgaGlzIGZlZXQsIGFuZCBzcGVha2luZyBpbiBzdXBwbGlhbnQgdG9uZSBoYWQgd2l0aCB0ZWFycyBzdWVkIGZvcgogICAgICAgICAgICAgICAgICAgIHBlYWNlLCBhbmQgW3doZW5dIGhlIGhhZCBvcmRlcmVkIHRoZW0gdG8gYXdhaXQgaGlzIGFycml2YWwsIGluIHRoZSBwbGFjZSwgd2hlcmUKICAgICAgICAgICAgICAgICAgICB0aGV5IHRoZW4gd2VyZSwgdGhleSBvYmV5ZWQgaGlzIGNvbW1hbmRzLiBXaGVuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGFycml2ZWQgYXQgdGhhdCBwbGFjZSwgaGUgZGVtYW5kZWQgaG9zdGFnZXMsIHRoZWlyIGFybXMsIGFuZCB0aGUgc2xhdmVzIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBkZXNlcnRlZCB0byB0aGVtLiBXaGlsZSB0aG9zZSB0aGluZ3MgYXJlIGJlaW5nIHNvdWdodCBmb3IgYW5kIGdvdCB0b2dldGhlciwKICAgICAgICAgICAgICAgICAgICBhZnRlciBhIG5pZ2h0J3MgaW50ZXJ2YWwsIGFib3V0IDYwMDAgbWVuIG9mIHRoYXQgY2FudG9uIHdoaWNoIGlzIGNhbGxlZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJiaWdlbmU8L25hbWU+LCB3aGV0aGVyIHRlcnJpZmllZCBieSBmZWFyLCBsZXN0IGFmdGVyIGRlbGl2ZXJpbmcgdXAKICAgICAgICAgICAgICAgICAgICB0aGVpciBhcm1zLCB0aGV5IHNob3VsZCBzdWZmZXIgcHVuaXNobWVudCwgb3IgZWxzZSBpbmR1Y2VkIGJ5IHRoZSBob3BlIG9mCiAgICAgICAgICAgICAgICAgICAgc2FmZXR5LCBiZWNhdXNlIHRoZXkgc3VwcG9zZWQgdGhhdCwgYW1pZCBzbyB2YXN0IGEgbXVsdGl0dWRlIG9mIHRob3NlIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBzdXJyZW5kZXJlZCB0aGVtc2VsdmVzLCB0aGVpciBmbGlnaHQgbWlnaHQgZWl0aGVyIGJlIGNvbmNlYWxlZCBvciBlbnRpcmVseQogICAgICAgICAgICAgICAgICAgIG92ZXJsb29rZWQsIGhhdmluZyBhdCBuaWdodC1mYWxsIGRlcGFydGVkIG91dCBvZiB0aGUgY2FtcCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgaGFzdGVuZWQgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gYW5kIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aGVuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBkaXNjb3ZlcmVkIHRoaXMsIGhlIGNvbW1hbmRlZCB0aG9zZQogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggd2hvc2UgdGVycml0b3J5IHRoZXkgaGFkIGdvbmUsIHRvIHNlZWsgdGhlbSBvdXQgYW5kIHRvIGJyaW5nIHRoZW0gYmFjawogICAgICAgICAgICAgICAgICAgIGFnYWluLCBpZiB0aGV5IG1lYW50IHRvIGJlIGFjcXVpdHRlZCBiZWZvcmUgaGltOyBhbmQgY29uc2lkZXJlZCB0aGVtLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBiYWNrLCBpbiB0aGUgbGlnaHQgb2YgZW5lbWllczsgaGUgYWRtaXR0ZWQgYWxsIHRoZSByZXN0IHRvIGEgc3VycmVuZGVyLAogICAgICAgICAgICAgICAgICAgIHVwb24gdGhlaXIgZGVsaXZlcmluZyB1cCB0aGUgaG9zdGFnZXMsIGFybXMsIGFuZCBkZXNlcnRlcnMuIEhlIG9yZGVyZWQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlR1bGluZ2k8L25hbWU+LCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF0b2JyaWdpPC9uYW1lPiwgdG8gcmV0dXJuIHRvIHRoZWlyIHRlcnJpdG9yaWVzIGZyb20gd2hpY2ggdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBjb21lLCBhbmQgYXMgdGhlcmUgd2FzIGF0IGhvbWUgbm90aGluZyB3aGVyZWJ5IHRoZXkgbWlnaHQgc3VwcG9ydCB0aGVpciBodW5nZXIsCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSBwcm9kdWN0aW9ucyBvZiB0aGUgZWFydGggaGF2aW5nIGJlZW4gZGVzdHJveWVkLCBoZSBjb21tYW5kZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsb2Jyb2dlczwvbmFtZT4gdG8gbGV0IHRoZW0gaGF2ZSBhIHBsZW50aWZ1bCBzdXBwbHkgb2YgY29ybjsgYW5kCiAgICAgICAgICAgICAgICAgICAgb3JkZXJlZCB0aGVtIHRvIHJlYnVpbGQgdGhlIHRvd25zIGFuZCB2aWxsYWdlcyB3aGljaCB0aGV5IGhhZCBidXJuZWQuIFRoaXMgaGUKICAgICAgICAgICAgICAgICAgICBkaWQsIGNoaWVmbHksIG9uIHRoaXMgYWNjb3VudCwgYmVjYXVzZSBoZSB3YXMgdW53aWxsaW5nIHRoYXQgdGhlIGNvdW50cnksIGZyb20KICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiBoYWQgZGVwYXJ0ZWQsIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHVudGVuYW50ZWQsIGxlc3QgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgd2hvIGR3ZWxsIG9uIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIHNpZGUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHNob3VsZCwgb24gYWNjb3VudCBvZiB0aGUgZXhjZWxsZW5jZSBvZiB0aGUgbGFuZHMsIGNyb3NzIG92ZXIgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZWlyIG93biB0ZXJyaXRvcmllcyBpbnRvIHRob3NlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICBiZWNvbWUgYm9yZGVyZXJzIHVwb24gdGhlIHByb3ZpbmNlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsb2Jyb2dlczwvbmFtZT4uIEhlIGdyYW50ZWQgdGhlIHBldGl0aW9uIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgbWlnaHQgc2V0dGxlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJvaWk8L25hbWU+LCBpbiB0aGVpciBvd24gKGkuIGUuIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVhbjwvbmFtZT4pIHRlcnJpdG9yaWVzLCBhcyB0aGVzZSB3ZXJlIGtub3duIHRvIGJlIG9mIGRpc3Rpbmd1aXNoZWQKICAgICAgICAgICAgICAgICAgICB2YWxvciwgdG8gd2hvbSB0aGV5IGdhdmUgbGFuZHMsIGFuZCB3aG9tIHRoZXkgYWZ0ZXJ3YXJkIGFkbWl0dGVkIHRvIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgc3RhdGUgb2YgcmlnaHRzIGFuZCBmcmVlZG9tIGFzIHRoZW1zZWx2ZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZGlzY292ZXJlZCB0aGlzLCBoZSBjb21tYW5kZWQgdGhvc2UKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIHdob3NlIHRlcnJpdG9yeSB0aGV5IGhhZCBnb25lLCB0byBzZWVrIHRoZW0gb3V0IGFuZCB0byBicmluZyB0aGVtIGJhY2sKICAgICAgICAgICAgICAgICAgICBhZ2FpbiwgaWYgdGhleSBtZWFudCB0byBiZSBhY3F1aXR0ZWQgYmVmb3JlIGhpbTsgYW5kIGNvbnNpZGVyZWQgdGhlbSwgd2hlbgogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgYmFjaywgaW4gdGhlIGxpZ2h0IG9mIGVuZW1pZXM7IGhlIGFkbWl0dGVkIGFsbCB0aGUgcmVzdCB0byBhIHN1cnJlbmRlciwKICAgICAgICAgICAgICAgICAgICB1cG9uIHRoZWlyIGRlbGl2ZXJpbmcgdXAgdGhlIGhvc3RhZ2VzLCBhcm1zLCBhbmQgZGVzZXJ0ZXJzLiBIZSBvcmRlcmVkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UdWxpbmdpPC9uYW1lPiwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdG9icmlnaTwvbmFtZT4sIHRvIHJldHVybiB0byB0aGVpciB0ZXJyaXRvcmllcyBmcm9tIHdoaWNoIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgY29tZSwgYW5kIGFzIHRoZXJlIHdhcyBhdCBob21lIG5vdGhpbmcgd2hlcmVieSB0aGV5IG1pZ2h0IHN1cHBvcnQgdGhlaXIgaHVuZ2VyLAogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgcHJvZHVjdGlvbnMgb2YgdGhlIGVhcnRoIGhhdmluZyBiZWVuIGRlc3Ryb3llZCwgaGUgY29tbWFuZGVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbG9icm9nZXM8L25hbWU+IHRvIGxldCB0aGVtIGhhdmUgYSBwbGVudGlmdWwgc3VwcGx5IG9mIGNvcm47IGFuZAogICAgICAgICAgICAgICAgICAgIG9yZGVyZWQgdGhlbSB0byByZWJ1aWxkIHRoZSB0b3ducyBhbmQgdmlsbGFnZXMgd2hpY2ggdGhleSBoYWQgYnVybmVkLiBUaGlzIGhlCiAgICAgICAgICAgICAgICAgICAgZGlkLCBjaGllZmx5LCBvbiB0aGlzIGFjY291bnQsIGJlY2F1c2UgaGUgd2FzIHVud2lsbGluZyB0aGF0IHRoZSBjb3VudHJ5LCBmcm9tCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gaGFkIGRlcGFydGVkLCBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICB1bnRlbmFudGVkLCBsZXN0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIHdobyBkd2VsbCBvbiB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBzaWRlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBzaG91bGQsIG9uIGFjY291bnQgb2YgdGhlIGV4Y2VsbGVuY2Ugb2YgdGhlIGxhbmRzLCBjcm9zcyBvdmVyIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGVpciBvd24gdGVycml0b3JpZXMgaW50byB0aG9zZSBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICBiZWNvbWUgYm9yZGVyZXJzIHVwb24gdGhlIHByb3ZpbmNlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsb2Jyb2dlczwvbmFtZT4uIEhlIGdyYW50ZWQgdGhlIHBldGl0aW9uIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgbWlnaHQgc2V0dGxlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJvaWk8L25hbWU+LCBpbiB0aGVpciBvd24gKGkuIGUuIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVhbjwvbmFtZT4pIHRlcnJpdG9yaWVzLCBhcyB0aGVzZSB3ZXJlIGtub3duIHRvIGJlIG9mIGRpc3Rpbmd1aXNoZWQKICAgICAgICAgICAgICAgICAgICB2YWxvciwgdG8gd2hvbSB0aGV5IGdhdmUgbGFuZHMsIGFuZCB3aG9tIHRoZXkgYWZ0ZXJ3YXJkIGFkbWl0dGVkIHRvIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgc3RhdGUgb2YgcmlnaHRzIGFuZCBmcmVlZG9tIGFzIHRoZW1zZWx2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['1.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBjYW1wIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCBsaXN0cyB3ZXJlIGZvdW5kLCBkcmF3bgogICAgICAgICAgICAgICAgICAgIHVwIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGxhY2UiPkdyZWVrPC9uYW1lPiBjaGFyYWN0ZXJzLCBhbmQgd2VyZSBicm91Z2h0IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaW4gd2hpY2ggYW4gZXN0aW1hdGUgaGFkIGJlZW4gZHJhd24gdXAsIG5hbWUgYnkKICAgICAgICAgICAgICAgICAgICBuYW1lLCBvZiB0aGUgbnVtYmVyIHdoaWNoIGhhZCBnb25lIGZvcnRoIGZyb20gdGhlaXIgY291bnRyeSBvZiB0aG9zZSB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIGFibGUgdG8gYmVhciBhcm1zOyBhbmQgbGlrZXdpc2UgdGhlIGJveXMsIHRoZSBvbGQgbWVuLCBhbmQgdGhlIHdvbWVuLAogICAgICAgICAgICAgICAgICAgIHNlcGFyYXRlbHkuIE9mIGFsbCB3aGljaCBpdGVtcyB0aGUgdG90YWwgd2FzOiA8bGlzdCBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InNpbXBsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0idHJhbnNsYXRpb24iPk9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IFtsaXQuIG9mIHRoZSBoZWFkcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlpXTwvbmFtZT48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aXRlbSBjbGFzcz0idHJhbnNsYXRpb24iPjI2MywwMDA8L2l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0idHJhbnNsYXRpb24iPk9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlR1bGluZ2k8L25hbWU+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGl0ZW0gY2xhc3M9InRyYW5zbGF0aW9uIj4zNiwwMDA8L2l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0idHJhbnNsYXRpb24iPk9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdG9icmlnaTwvbmFtZT48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aXRlbSBjbGFzcz0idHJhbnNsYXRpb24iPjE0LDAwMDwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmF1cmFjaTwvbmFtZT48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aXRlbSBjbGFzcz0idHJhbnNsYXRpb24iPjIzLDAwMDwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qm9paTwvbmFtZT48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aXRlbSBjbGFzcz0idHJhbnNsYXRpb24iPjMyLDAwMDwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIHN1bSBvZiBhbGwgYW1vdW50ZWQgdG88L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aXRlbSBjbGFzcz0idHJhbnNsYXRpb24iPjM2OCwwMDA8L2l0ZW0+CiAgICAgICAgICAgICAgICAgICAgPC9saXN0PiBPdXQgb2YgdGhlc2UsIHN1Y2ggYXMgY291bGQgYmVhciBhcm1zLCBbYW1vdW50ZWRdIHRvIGFib3V0IDkyLDAwMC4gV2hlbgogICAgICAgICAgICAgICAgICAgIHRoZSBjZW5zdXMgb2YgdGhvc2Ugd2hvIHJldHVybmVkIGhvbWUgd2FzIHRha2VuLCBhcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIGNvbW1hbmRlZCwgdGhlIG51bWJlciB3YXMgZm91bmQgdG8gYmUgMTEwLDAwMC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sIGxpc3RzIHdlcmUgZm91bmQsIGRyYXduCiAgICAgICAgICAgICAgICAgICAgdXAgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwbGFjZSI+R3JlZWs8L25hbWU+IGNoYXJhY3RlcnMsIGFuZCB3ZXJlIGJyb3VnaHQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBpbiB3aGljaCBhbiBlc3RpbWF0ZSBoYWQgYmVlbiBkcmF3biB1cCwgbmFtZSBieQogICAgICAgICAgICAgICAgICAgIG5hbWUsIG9mIHRoZSBudW1iZXIgd2hpY2ggaGFkIGdvbmUgZm9ydGggZnJvbSB0aGVpciBjb3VudHJ5IG9mIHRob3NlIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYWJsZSB0byBiZWFyIGFybXM7IGFuZCBsaWtld2lzZSB0aGUgYm95cywgdGhlIG9sZCBtZW4sIGFuZCB0aGUgd29tZW4sCiAgICAgICAgICAgICAgICAgICAgc2VwYXJhdGVseS4gT2YgYWxsIHdoaWNoIGl0ZW1zIHRoZSB0b3RhbCB3YXM6IDxsaXN0IGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0ic2ltcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gW2xpdC4gb2YgdGhlIGhlYWRzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsdmV0aWldPC9uYW1lPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpdGVtIGNsYXNzPSJ0cmFuc2xhdGlvbiI+MjYzLDAwMDwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHVsaW5naTwvbmFtZT48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aXRlbSBjbGFzcz0idHJhbnNsYXRpb24iPjM2LDAwMDwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF0b2JyaWdpPC9uYW1lPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpdGVtIGNsYXNzPSJ0cmFuc2xhdGlvbiI+MTQsMDAwPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InRyYW5zbGF0aW9uIj5PZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5SYXVyYWNpPC9uYW1lPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpdGVtIGNsYXNzPSJ0cmFuc2xhdGlvbiI+MjMsMDAwPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InRyYW5zbGF0aW9uIj5PZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Cb2lpPC9uYW1lPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpdGVtIGNsYXNzPSJ0cmFuc2xhdGlvbiI+MzIsMDAwPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgc3VtIG9mIGFsbCBhbW91bnRlZCB0bzwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpdGVtIGNsYXNzPSJ0cmFuc2xhdGlvbiI+MzY4LDAwMDwvaXRlbT4KICAgICAgICAgICAgICAgICAgICA8L2xpc3Q+IE91dCBvZiB0aGVzZSwgc3VjaCBhcyBjb3VsZCBiZWFyIGFybXMsIFthbW91bnRlZF0gdG8gYWJvdXQgOTIsMDAwLiBXaGVuCiAgICAgICAgICAgICAgICAgICAgdGhlIGNlbnN1cyBvZiB0aG9zZSB3aG8gcmV0dXJuZWQgaG9tZSB3YXMgdGFrZW4sIGFzIDxsYWJlbCBjbGFzcz0idHJhbnNsYXRpb24iPk9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IFtsaXQuIG9mIHRoZSBoZWFkcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlpXTwvbmFtZT48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IFtsaXQuIG9mIHRoZSBoZWFkcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZldGlpXTwvbmFtZT48aXRlbSBjbGFzcz0idHJhbnNsYXRpb24iPjI2MywwMDA8L2l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0idHJhbnNsYXRpb24iPk9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlR1bGluZ2k8L25hbWU+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UdWxpbmdpPC9uYW1lPjxpdGVtIGNsYXNzPSJ0cmFuc2xhdGlvbiI+MzYsMDAwPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InRyYW5zbGF0aW9uIj5PZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXRvYnJpZ2k8L25hbWU+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXRvYnJpZ2k8L25hbWU+PGl0ZW0gY2xhc3M9InRyYW5zbGF0aW9uIj4xNCwwMDA8L2l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0idHJhbnNsYXRpb24iPk9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJhdXJhY2k8L25hbWU+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5SYXVyYWNpPC9uYW1lPjxpdGVtIGNsYXNzPSJ0cmFuc2xhdGlvbiI+MjMsMDAwPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InRyYW5zbGF0aW9uIj5PZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Cb2lpPC9uYW1lPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qm9paTwvbmFtZT48aXRlbSBjbGFzcz0idHJhbnNsYXRpb24iPjMyLDAwMDwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIHN1bSBvZiBhbGwgYW1vdW50ZWQgdG88L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aXRlbSBjbGFzcz0idHJhbnNsYXRpb24iPjM2OCwwMDA8L2l0ZW0+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBjb21tYW5kZWQsIHRoZSBudW1iZXIgd2FzIGZvdW5kIHRvIGJlIDExMCwwMDAuIDwvdHJhbnNsYXRpb24+"
translation['1.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gdGhlIHdhciB3aXRoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IHdhcyBjb25jbHVkZWQsCiAgICAgICAgICAgICAgICAgICAgZW1iYXNzYWRvcnMgZnJvbSBhbG1vc3QgYWxsIHBhcnRzIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgdGhlIGNoaWVmcyBvZiBzdGF0ZXMsCiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibGVkIHRvIGNvbmdyYXR1bGF0ZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIFtzYXlpbmddIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIHdlcmUgd2VsbCBhd2FyZSwgdGhhdCwgYWx0aG91Z2ggaGUgaGFkIHRha2VuIHZlbmdlYW5jZSBvbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiBpbiB3YXIsIGZvciB0aGUgb2xkIHdyb25nIGRvbmUgYnkgdGhlbSB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIHlldCB0aGF0IGNpcmN1bXN0YW5jZSBoYWQgaGFwcGVuZWQKICAgICAgICAgICAgICAgICAgICBubyBsZXNzIHRvIHRoZSBiZW5lZml0IG9mIHRoZSBsYW5kIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB0aGFuIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgYmVjYXVzZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkhlbHZldGlpPC9uYW1lPiwgd2hpbGUgdGhlaXIgYWZmYWlycyB3ZXJlIG1vc3QgZmxvdXJpc2hpbmcsIGhhZCBxdWl0dGVkCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY291bnRyeSB3aXRoIHRoZSBkZXNpZ24gb2YgbWFraW5nIHdhciB1cG9uIHRoZSB3aG9sZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGFuZCBzZWl6aW5nIHRoZSBnb3Zlcm5tZW50IG9mIGl0LCBhbmQgc2VsZWN0aW5nLCBvdXQgb2YgYQogICAgICAgICAgICAgICAgICAgIGdyZWF0IGFidW5kYW5jZSwgdGhhdCBzcG90IGZvciBhbiBhYm9kZSwgd2hpY2ggdGhleSBzaG91bGQganVkZ2UgdG8gYmUgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBjb252ZW5pZW50IGFuZCBtb3N0IHByb2R1Y3RpdmUgb2YgYWxsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgYW5kIGhvbGQgdGhlIHJlc3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhdGVzIGFzIHRyaWJ1dGFyaWVzLiBUaGV5IHJlcXVlc3RlZCB0aGF0IHRoZXkgbWlnaHQgYmUgYWxsb3dlZCB0byBwcm9jbGFpbSBhbgogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5IG9mIHRoZSB3aG9sZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gZm9yIGEgcGFydGljdWxhciBkYXksIGFuZAogICAgICAgICAgICAgICAgICAgIHRvIGRvIHRoYXQgd2l0aCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBwZXJtaXNzaW9uLCBbc3RhdGluZ10gdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIHNvbWUgdGhpbmdzIHdoaWNoLCB3aXRoIHRoZSBnZW5lcmFsIGNvbnNlbnQsIHRoZXkgd2lzaGVkIHRvIGFzayBvZiBoaW0uCiAgICAgICAgICAgICAgICAgICAgVGhpcyByZXF1ZXN0IGhhdmluZyBiZWVuIGdyYW50ZWQsIHRoZXkgYXBwb2ludGVkIGEgZGF5IGZvciB0aGUgYXNzZW1ibHksIGFuZAogICAgICAgICAgICAgICAgICAgIG9yZGFpbmVkIGJ5IGFuIG9hdGggd2l0aCBlYWNoIG90aGVyLCB0aGF0IG5vIG9uZSBzaG91bGQgZGlzY2xvc2UgW3RoZWlyCiAgICAgICAgICAgICAgICAgICAgZGVsaWJlcmF0aW9uc10gZXhjZXB0IHRob3NlIHRvIHdob20gdGhpcyBbb2ZmaWNlXSBzaG91bGQgYmUgYXNzaWduZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCBhc3NlbWJseS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4gd2FzIGNvbmNsdWRlZCwKICAgICAgICAgICAgICAgICAgICBlbWJhc3NhZG9ycyBmcm9tIGFsbW9zdCBhbGwgcGFydHMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB0aGUgY2hpZWZzIG9mIHN0YXRlcywKICAgICAgICAgICAgICAgICAgICBhc3NlbWJsZWQgdG8gY29uZ3JhdHVsYXRlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgW3NheWluZ10gdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2VyZSB3ZWxsIGF3YXJlLCB0aGF0LCBhbHRob3VnaCBoZSBoYWQgdGFrZW4gdmVuZ2VhbmNlIG9uIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+IGluIHdhciwgZm9yIHRoZSBvbGQgd3JvbmcgZG9uZSBieSB0aGVtIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgeWV0IHRoYXQgY2lyY3Vtc3RhbmNlIGhhZCBoYXBwZW5lZAogICAgICAgICAgICAgICAgICAgIG5vIGxlc3MgdG8gdGhlIGJlbmVmaXQgb2YgdGhlIGxhbmQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IHRoYW4gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLCBiZWNhdXNlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LCB3aGlsZSB0aGVpciBhZmZhaXJzIHdlcmUgbW9zdCBmbG91cmlzaGluZywgaGFkIHF1aXR0ZWQKICAgICAgICAgICAgICAgICAgICB0aGVpciBjb3VudHJ5IHdpdGggdGhlIGRlc2lnbiBvZiBtYWtpbmcgd2FyIHVwb24gdGhlIHdob2xlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgYW5kIHNlaXppbmcgdGhlIGdvdmVybm1lbnQgb2YgaXQsIGFuZCBzZWxlY3RpbmcsIG91dCBvZiBhCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgYWJ1bmRhbmNlLCB0aGF0IHNwb3QgZm9yIGFuIGFib2RlLCB3aGljaCB0aGV5IHNob3VsZCBqdWRnZSB0byBiZSB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGNvbnZlbmllbnQgYW5kIG1vc3QgcHJvZHVjdGl2ZSBvZiBhbGwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgaG9sZCB0aGUgcmVzdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZXMgYXMgdHJpYnV0YXJpZXMuIFRoZXkgcmVxdWVzdGVkIHRoYXQgdGhleSBtaWdodCBiZSBhbGxvd2VkIHRvIHByb2NsYWltIGFuCiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibHkgb2YgdGhlIHdob2xlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBmb3IgYSBwYXJ0aWN1bGFyIGRheSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gZG8gdGhhdCB3aXRoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIHBlcm1pc3Npb24sIFtzdGF0aW5nXSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgc29tZSB0aGluZ3Mgd2hpY2gsIHdpdGggdGhlIGdlbmVyYWwgY29uc2VudCwgdGhleSB3aXNoZWQgdG8gYXNrIG9mIGhpbS4KICAgICAgICAgICAgICAgICAgICBUaGlzIHJlcXVlc3QgaGF2aW5nIGJlZW4gZ3JhbnRlZCwgdGhleSBhcHBvaW50ZWQgYSBkYXkgZm9yIHRoZSBhc3NlbWJseSwgYW5kCiAgICAgICAgICAgICAgICAgICAgb3JkYWluZWQgYnkgYW4gb2F0aCB3aXRoIGVhY2ggb3RoZXIsIHRoYXQgbm8gb25lIHNob3VsZCBkaXNjbG9zZSBbdGhlaXIKICAgICAgICAgICAgICAgICAgICBkZWxpYmVyYXRpb25zXSBleGNlcHQgdGhvc2UgdG8gd2hvbSB0aGlzIFtvZmZpY2VdIHNob3VsZCBiZSBhc3NpZ25lZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsIGFzc2VtYmx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.31'] = ""
translation['1.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gdGhpcyBzcGVlY2ggaGFkIGJlZW4gZGVsaXZlcmVkIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aXRpYWN1czwvbmFtZT4sIGFsbCB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgYmVnYW4gd2l0aCBsb3VkIGxhbWVudGF0aW9uIHRvIGVudHJlYXQgYXNzaXN0YW5jZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBub3RpY2VkIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4gd2VyZSB0aGUgb25seSBwZW9wbGUgb2YgYWxsIHdobyBkaWQgbm9uZSBvZiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHRoaW5ncyB3aGljaCB0aGUgb3RoZXJzIGRpZCwgYnV0LCB3aXRoIHRoZWlyIGhlYWRzIGJvd2VkIGRvd24sIGdhemVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGVhcnRoIGluIHNhZG5lc3MuIFdvbmRlcmluZyB3aGF0IHdhcyB0aGUgcmVhc29uIG9mIHRoaXMgY29uZHVjdCwgaGUgaW5xdWlyZWQgb2YKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzLiBObyByZXBseSBkaWQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4gbWFrZSwgYnV0IHNpbGVudGx5IGNvbnRpbnVlZAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBzYW1lIHNhZG5lc3MuIFdoZW4gaGUgaGFkIHJlcGVhdGVkbHkgaW5xdWlyZWQgb2YgdGhlbSBhbmQgY291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgZWxpY2l0IGFueSBhbnN3ZXIgYXQgYWxsLCB0aGUgc2FtZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVhbjwvbmFtZT4gYW5zd2VyZWQsIHRoYXQtInRoZSBsb3Qgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4gd2FzCiAgICAgICAgICAgICAgICAgICAgbW9yZSB3cmV0Y2hlZCBhbmQgZ3JpZXZvdXMgdGhhbiB0aGF0IG9mIHRoZSByZXN0LCBvbiB0aGlzIGFjY291bnQsIGJlY2F1c2UgdGhleQogICAgICAgICAgICAgICAgICAgIGFsb25lIGR1cnN0IG5vdCBldmVuIGluIHNlY3JldCBjb21wbGFpbiBvciBzdXBwbGljYXRlIGFpZDsgYW5kIHNodWRkZXJlZCBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBjcnVlbHR5IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gW2V2ZW4gd2hlbl0gYWJzZW50LCBqdXN0IGFzIGlmIGhlIHdlcmUKICAgICAgICAgICAgICAgICAgICBwcmVzZW50OyBmb3IsIHRvIHRoZSByZXN0LCBkZXNwaXRlIG9mIGV2ZXJ5IHRoaW5nIHRoZXJlIHdhcyBhbiBvcHBvcnR1bml0eSBvZgogICAgICAgICAgICAgICAgICAgIGZsaWdodCBnaXZlbjsgYnV0IGFsbCB0b3J0dXJlcyBtdXN0IGJlIGVuZHVyZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4sIHdobwogICAgICAgICAgICAgICAgICAgIGhhZCBhZG1pdHRlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+IHdpdGhpbiB0aGVpciB0ZXJyaXRvcmllcywgYW5kIHdob3NlIHRvd25zCiAgICAgICAgICAgICAgICAgICAgd2VyZSBhbGwgaW4gaGlzIHBvd2VyLiIgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aXRpYWN1czwvbmFtZT4sIGFsbCB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgYmVnYW4gd2l0aCBsb3VkIGxhbWVudGF0aW9uIHRvIGVudHJlYXQgYXNzaXN0YW5jZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBub3RpY2VkIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4gd2VyZSB0aGUgb25seSBwZW9wbGUgb2YgYWxsIHdobyBkaWQgbm9uZSBvZiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHRoaW5ncyB3aGljaCB0aGUgb3RoZXJzIGRpZCwgYnV0LCB3aXRoIHRoZWlyIGhlYWRzIGJvd2VkIGRvd24sIGdhemVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGVhcnRoIGluIHNhZG5lc3MuIFdvbmRlcmluZyB3aGF0IHdhcyB0aGUgcmVhc29uIG9mIHRoaXMgY29uZHVjdCwgaGUgaW5xdWlyZWQgb2YKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzLiBObyByZXBseSBkaWQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4gbWFrZSwgYnV0IHNpbGVudGx5IGNvbnRpbnVlZAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBzYW1lIHNhZG5lc3MuIFdoZW4gaGUgaGFkIHJlcGVhdGVkbHkgaW5xdWlyZWQgb2YgdGhlbSBhbmQgY291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgZWxpY2l0IGFueSBhbnN3ZXIgYXQgYWxsLCB0aGUgc2FtZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVhbjwvbmFtZT4gYW5zd2VyZWQsIHRoYXQtInRoZSBsb3Qgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4gd2FzCiAgICAgICAgICAgICAgICAgICAgbW9yZSB3cmV0Y2hlZCBhbmQgZ3JpZXZvdXMgdGhhbiB0aGF0IG9mIHRoZSByZXN0LCBvbiB0aGlzIGFjY291bnQsIGJlY2F1c2UgdGhleQogICAgICAgICAgICAgICAgICAgIGFsb25lIGR1cnN0IG5vdCBldmVuIGluIHNlY3JldCBjb21wbGFpbiBvciBzdXBwbGljYXRlIGFpZDsgYW5kIHNodWRkZXJlZCBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBjcnVlbHR5IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gW2V2ZW4gd2hlbl0gYWJzZW50LCBqdXN0IGFzIGlmIGhlIHdlcmUKICAgICAgICAgICAgICAgICAgICBwcmVzZW50OyBmb3IsIHRvIHRoZSByZXN0LCBkZXNwaXRlIG9mIGV2ZXJ5IHRoaW5nIHRoZXJlIHdhcyBhbiBvcHBvcnR1bml0eSBvZgogICAgICAgICAgICAgICAgICAgIGZsaWdodCBnaXZlbjsgYnV0IGFsbCB0b3J0dXJlcyBtdXN0IGJlIGVuZHVyZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4sIHdobwogICAgICAgICAgICAgICAgICAgIGhhZCBhZG1pdHRlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+IHdpdGhpbiB0aGVpciB0ZXJyaXRvcmllcywgYW5kIHdob3NlIHRvd25zCiAgICAgICAgICAgICAgICAgICAgd2VyZSBhbGwgaW4gaGlzIHBvd2VyLiIgPC90cmFuc2xhdGlvbj4="
translation['1.33'] = ""
translation['1.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlIHRoZXJlZm9yZSBkZXRlcm1pbmVkIHRvIHNlbmQgZW1iYXNzYWRvcnMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiB0byBkZW1hbmQKICAgICAgICAgICAgICAgICAgICBvZiBoaW0gdG8gbmFtZSBzb21lIGludGVybWVkaWF0ZSBzcG90IGZvciBhIGNvbmZlcmVuY2UgYmV0d2VlbiB0aGUgdHdvLCBbc2F5aW5nXQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2lzaGVkIHRvIHRyZWF0IGhpbSBvbiBzdGF0ZS1idXNpbmVzcyBhbmQgbWF0dGVycyBvZiB0aGUgaGlnaGVzdAogICAgICAgICAgICAgICAgICAgIGltcG9ydGFuY2UgdG8gYm90aCBvZiB0aGVtLiBUbyB0aGlzIGVtYmFzc3kgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiByZXBsaWVkLAogICAgICAgICAgICAgICAgICAgIHRoYXQgaWYgaGUgaGltc2VsZiBoYWQgaGFkIG5lZWQgb2YgYW55IHRoaW5nIGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoZSB3b3VsZCBoYXZlIGdvbmUgdG8gaGltOyBhbmQgdGhhdCBpZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FudGVkIGFueSB0aGluZyBmcm9tIGhpbSBoZSBvdWdodCB0byBjb21lIHRvIGhpbS4gVGhhdCwKICAgICAgICAgICAgICAgICAgICBiZXNpZGVzLCBuZWl0aGVyIGRhcmUgaGUgZ28gd2l0aG91dCBhbiBhcm15IGludG8gdGhvc2UgcGFydHMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IHdoaWNoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgcG9zc2Vzc2lvbiBvZiwgbm9yCiAgICAgICAgICAgICAgICAgICAgY291bGQgaGUsIHdpdGhvdXQgZ3JlYXQgZXhwZW5zZSBhbmQgdHJvdWJsZSwgZHJhdyBoaXMgYXJteSB0b2dldGhlciB0byBvbmUKICAgICAgICAgICAgICAgICAgICBwbGFjZTsgdGhhdCB0byBoaW0sIG1vcmVvdmVyLCBpdCBhcHBlYXJlZCBzdHJhbmdlLCB3aGF0IGJ1c2luZXNzIGVpdGhlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gb3IgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIGF0CiAgICAgICAgICAgICAgICAgICAgYWxsIGhhZCBpbiBoaXMgb3duIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgd2hpY2ggaGUgaGFkIGNvbnF1ZXJlZCBpbgogICAgICAgICAgICAgICAgICAgIHdhci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gdG8gZGVtYW5kCiAgICAgICAgICAgICAgICAgICAgb2YgaGltIHRvIG5hbWUgc29tZSBpbnRlcm1lZGlhdGUgc3BvdCBmb3IgYSBjb25mZXJlbmNlIGJldHdlZW4gdGhlIHR3bywgW3NheWluZ10KICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHdpc2hlZCB0byB0cmVhdCBoaW0gb24gc3RhdGUtYnVzaW5lc3MgYW5kIG1hdHRlcnMgb2YgdGhlIGhpZ2hlc3QKICAgICAgICAgICAgICAgICAgICBpbXBvcnRhbmNlIHRvIGJvdGggb2YgdGhlbS4gVG8gdGhpcyBlbWJhc3N5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gcmVwbGllZCwKICAgICAgICAgICAgICAgICAgICB0aGF0IGlmIGhlIGhpbXNlbGYgaGFkIGhhZCBuZWVkIG9mIGFueSB0aGluZyBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGUgd291bGQgaGF2ZSBnb25lIHRvIGhpbTsgYW5kIHRoYXQgaWYgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdhbnRlZCBhbnkgdGhpbmcgZnJvbSBoaW0gaGUgb3VnaHQgdG8gY29tZSB0byBoaW0uIFRoYXQsCiAgICAgICAgICAgICAgICAgICAgYmVzaWRlcywgbmVpdGhlciBkYXJlIGhlIGdvIHdpdGhvdXQgYW4gYXJteSBpbnRvIHRob3NlIHBhcnRzIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB3aGljaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIHBvc3Nlc3Npb24gb2YsIG5vcgogICAgICAgICAgICAgICAgICAgIGNvdWxkIGhlLCB3aXRob3V0IGdyZWF0IGV4cGVuc2UgYW5kIHRyb3VibGUsIGRyYXcgaGlzIGFybXkgdG9nZXRoZXIgdG8gb25lCiAgICAgICAgICAgICAgICAgICAgcGxhY2U7IHRoYXQgdG8gaGltLCBtb3Jlb3ZlciwgaXQgYXBwZWFyZWQgc3RyYW5nZSwgd2hhdCBidXNpbmVzcyBlaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9yIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBhdAogICAgICAgICAgICAgICAgICAgIGFsbCBoYWQgaW4gaGlzIG93biA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHdoaWNoIGhlIGhhZCBjb25xdWVyZWQgaW4KICAgICAgICAgICAgICAgICAgICB3YXIuIDwvdHJhbnNsYXRpb24+"
translation['1.35'] = ""
translation['1.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRvIHRoaXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiByZXBsaWVkLCB0aGF0ICJ0aGUgcmlnaHQgb2Ygd2FyIHdhcywgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2hvIGhhZCBjb25xdWVyZWQgc2hvdWxkIGdvdmVybiB0aG9zZSB3aG9tIHRoZXkgaGFkIGNvbnF1ZXJlZCwgaW4gd2hhdCBtYW5uZXIKICAgICAgICAgICAgICAgICAgICB0aGV5IHBsZWFzZWQ7IHRoYXQgaW4gdGhhdCB3YXkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIHdlcmUKICAgICAgICAgICAgICAgICAgICB3b250IHRvIGdvdmVybiB0aGUgbmF0aW9ucyB3aGljaCB0aGV5IGhhZCBjb25xdWVyZWQsIG5vdCBhY2NvcmRpbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZGljdGF0aW9uIG9mIGFueSBvdGhlciwgYnV0IGFjY29yZGluZyB0byB0aGVpciBvd24gZGlzY3JldGlvbi4gSWYgaGUgZm9yIGhpcwogICAgICAgICAgICAgICAgICAgIHBhcnQgZGlkIG5vdCBkaWN0YXRlIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBhcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBtYW5uZXIgaW4gd2hpY2ggdGhleSB3ZXJlIHRvIGV4ZXJjaXNlIHRoZWlyIHJpZ2h0LCBoZSBvdWdodCBub3QgdG8gYmUgb2JzdHJ1Y3RlZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBpbiBoaXMgcmlnaHQ7IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCBpbmFzbXVjaCBhcyB0aGV5IGhhZCB0cmllZCB0aGUgZm9ydHVuZSBvZiB3YXIgYW5kIGhhZAogICAgICAgICAgICAgICAgICAgIGVuZ2FnZWQgaW4gYXJtcyBhbmQgYmVlbiBjb25xdWVyZWQsIGhhZCBiZWNvbWUgdHJpYnV0YXJpZXMgdG8gaGltOyB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3YXMgZG9pbmcgYSBncmVhdCBpbmp1c3RpY2UsIGluIHRoYXQgYnkgaGlzCiAgICAgICAgICAgICAgICAgICAgYXJyaXZhbCBoZSB3YXMgbWFraW5nIGhpcyByZXZlbnVlcyBsZXNzIHZhbHVhYmxlIHRvIGhpbTsgdGhhdCBoZSBzaG91bGQgbm90CiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZSB0aGVpciBob3N0YWdlcyB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIGJ1dCBzaG91bGQgbm90IG1ha2Ugd2FyCiAgICAgICAgICAgICAgICAgICAgd3JvbmdmdWxseSBlaXRoZXIgdXBvbiB0aGVtIG9yIHRoZWlyIGFsbGllcywgaWYgdGhleSBhYmlkZWQgYnkgdGhhdCB3aGljaCBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIGFncmVlZCBvbiwgYW5kIHBhaWQgdGhlaXIgdHJpYnV0ZSBhbm51YWxseTogaWYgdGhleSBkaWQgbm90IGNvbnRpbnVlIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlJ3MgbmFtZSBvZiAnYnJvdGhlcnMnIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYXZhaWwgdGhlbSBuYXVnaHQuIEFzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIHRocmVhdGVuaW5nIGhpbSwgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIHdvdWxkIG5vdCBvdmVybG9vayB0aGUgd3JvbmdzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgW2hlIHNhaWRdIHRoYXQgbm8KICAgICAgICAgICAgICAgICAgICBvbmUgaGFkIGV2ZXIgZW50ZXJlZCBpbnRvIGEgY29udGVzdCB3aXRoIGhpbSBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPl0gd2l0aG91dAogICAgICAgICAgICAgICAgICAgIHV0dGVyIHJ1aW4gdG8gaGltc2VsZi4gVGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbWlnaHQgZW50ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbGlzdHMgd2hlbiBoZSBjaG9zZTsgaGUgd291bGQgZmVlbCB3aGF0IHRoZSBpbnZpbmNpYmxlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgd2VsbC10cmFpbmVkIFthcyB0aGV5IHdlcmVdIGJleW9uZCBhbGwgb3RoZXJzIHRvIGFybXMsIHdobwogICAgICAgICAgICAgICAgICAgIGZvciBmb3VydGVlbiB5ZWFycyBoYWQgbm90IGJlZW4gYmVuZWF0aCBhIHJvb2YsIGNvdWxkIGFjaGlldmUgYnkgdGhlaXIgdmFsb3IuIgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiByZXBsaWVkLCB0aGF0ICJ0aGUgcmlnaHQgb2Ygd2FyIHdhcywgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2hvIGhhZCBjb25xdWVyZWQgc2hvdWxkIGdvdmVybiB0aG9zZSB3aG9tIHRoZXkgaGFkIGNvbnF1ZXJlZCwgaW4gd2hhdCBtYW5uZXIKICAgICAgICAgICAgICAgICAgICB0aGV5IHBsZWFzZWQ7IHRoYXQgaW4gdGhhdCB3YXkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIHdlcmUKICAgICAgICAgICAgICAgICAgICB3b250IHRvIGdvdmVybiB0aGUgbmF0aW9ucyB3aGljaCB0aGV5IGhhZCBjb25xdWVyZWQsIG5vdCBhY2NvcmRpbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZGljdGF0aW9uIG9mIGFueSBvdGhlciwgYnV0IGFjY29yZGluZyB0byB0aGVpciBvd24gZGlzY3JldGlvbi4gSWYgaGUgZm9yIGhpcwogICAgICAgICAgICAgICAgICAgIHBhcnQgZGlkIG5vdCBkaWN0YXRlIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBhcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBtYW5uZXIgaW4gd2hpY2ggdGhleSB3ZXJlIHRvIGV4ZXJjaXNlIHRoZWlyIHJpZ2h0LCBoZSBvdWdodCBub3QgdG8gYmUgb2JzdHJ1Y3RlZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBpbiBoaXMgcmlnaHQ7IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCBpbmFzbXVjaCBhcyB0aGV5IGhhZCB0cmllZCB0aGUgZm9ydHVuZSBvZiB3YXIgYW5kIGhhZAogICAgICAgICAgICAgICAgICAgIGVuZ2FnZWQgaW4gYXJtcyBhbmQgYmVlbiBjb25xdWVyZWQsIGhhZCBiZWNvbWUgdHJpYnV0YXJpZXMgdG8gaGltOyB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3YXMgZG9pbmcgYSBncmVhdCBpbmp1c3RpY2UsIGluIHRoYXQgYnkgaGlzCiAgICAgICAgICAgICAgICAgICAgYXJyaXZhbCBoZSB3YXMgbWFraW5nIGhpcyByZXZlbnVlcyBsZXNzIHZhbHVhYmxlIHRvIGhpbTsgdGhhdCBoZSBzaG91bGQgbm90CiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZSB0aGVpciBob3N0YWdlcyB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIGJ1dCBzaG91bGQgbm90IG1ha2Ugd2FyCiAgICAgICAgICAgICAgICAgICAgd3JvbmdmdWxseSBlaXRoZXIgdXBvbiB0aGVtIG9yIHRoZWlyIGFsbGllcywgaWYgdGhleSBhYmlkZWQgYnkgdGhhdCB3aGljaCBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIGFncmVlZCBvbiwgYW5kIHBhaWQgdGhlaXIgdHJpYnV0ZSBhbm51YWxseTogaWYgdGhleSBkaWQgbm90IGNvbnRpbnVlIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlJ3MgbmFtZSBvZiAnYnJvdGhlcnMnIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYXZhaWwgdGhlbSBuYXVnaHQuIEFzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIHRocmVhdGVuaW5nIGhpbSwgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIHdvdWxkIG5vdCBvdmVybG9vayB0aGUgd3JvbmdzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgW2hlIHNhaWRdIHRoYXQgbm8KICAgICAgICAgICAgICAgICAgICBvbmUgaGFkIGV2ZXIgZW50ZXJlZCBpbnRvIGEgY29udGVzdCB3aXRoIGhpbSBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPl0gd2l0aG91dAogICAgICAgICAgICAgICAgICAgIHV0dGVyIHJ1aW4gdG8gaGltc2VsZi4gVGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbWlnaHQgZW50ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbGlzdHMgd2hlbiBoZSBjaG9zZTsgaGUgd291bGQgZmVlbCB3aGF0IHRoZSBpbnZpbmNpYmxlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgd2VsbC10cmFpbmVkIFthcyB0aGV5IHdlcmVdIGJleW9uZCBhbGwgb3RoZXJzIHRvIGFybXMsIHdobwogICAgICAgICAgICAgICAgICAgIGZvciBmb3VydGVlbiB5ZWFycyBoYWQgbm90IGJlZW4gYmVuZWF0aCBhIHJvb2YsIGNvdWxkIGFjaGlldmUgYnkgdGhlaXIgdmFsb3IuIgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkF0IHRoZSBzYW1lIHRpbWUgdGhhdCB0aGlzIG1lc3NhZ2Ugd2FzIGRlbGl2ZXJlZCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGVtYmFzc2Fkb3JzIGNhbWUgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NDciIHJlZz0iICArVHJpZXIgWzYuNjUsNDkuNzVdIChpbmhhYml0ZWQgcGxhY2UpLCBUcmllciwgUmhlaW5sYW5kLVBmYWx6LCBHZXJtYW55LCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0NDQ3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NDciPlRyZXZpcmk8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+OyBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiB0byBjb21wbGFpbiB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhhcnVkZXM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHdobyBoYWQgbGF0ZWx5IGJlZW4gYnJvdWdodCBvdmVyIGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB3ZXJlIHJhdmFnaW5nIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdGVycml0b3JpZXM7IHRoYXQgdGhleSBoYWQgbm90IGJlZW4gYWJsZSB0byBwdXJjaGFzZSBwZWFjZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4sIGV2ZW4gYnkgZ2l2aW5nIGhvc3RhZ2VzOiBhbmQgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDQ0NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3Ij5UcmV2aXJpPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgW3RvIHN0YXRlXSB0aGF0IGEgaHVuZHJlZCBjYW50b25zIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiBoYWQKICAgICAgICAgICAgICAgICAgICBlbmNhbXBlZCBvbiB0aGUgYmFua3Mgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGFuZCB3ZXJlIGF0dGVtcHRpbmcgdG8gY3Jvc3MgaXQ7IHRoYXQgdGhlIGJyb3RoZXJzLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5hc3VhczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaW1iZXJpdXM8L25hbWU+LCBoZWFkZWQgdGhlbS4gQmVpbmcgZ3JlYXRseSBhbGFybWVkIGF0IHRoZXNlIHRoaW5ncywKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRob3VnaHQgdGhhdCBoZSBvdWdodCB0byB1c2UgYWxsIGRpc3BhdGNoLAogICAgICAgICAgICAgICAgICAgIGxlc3QsIGlmIHRoaXMgbmV3IGJhbmQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4gc2hvdWxkIHVuaXRlIHdpdGggdGhlIG9sZCB0cm9vcHMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiwgaGUgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT5dIG1pZ2h0IGJlIGxlc3MgZWFzaWx5CiAgICAgICAgICAgICAgICAgICAgd2l0aHN0b29kLiBIYXZpbmcgdGhlcmVmb3JlLCBhcyBxdWlja2x5IGFzIGhlIGNvdWxkLCBwcm92aWRlZCBhIHN1cHBseSBvZiBjb3JuLAogICAgICAgICAgICAgICAgICAgIGhlIGhhc3RlbmVkIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gYnkgZm9yY2VkIG1hcmNoZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGVtYmFzc2Fkb3JzIGNhbWUgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NDciIHJlZz0iICArVHJpZXIgWzYuNjUsNDkuNzVdIChpbmhhYml0ZWQgcGxhY2UpLCBUcmllciwgUmhlaW5sYW5kLVBmYWx6LCBHZXJtYW55LCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0NDQ3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NDciPlRyZXZpcmk8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+OyBmcm9tIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDQ0NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3Ij5UcmV2aXJpPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gdG8gY29tcGxhaW4gdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5IYXJ1ZGVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aG8gaGFkIGxhdGVseSBiZWVuIGJyb3VnaHQgb3ZlciBpbnRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgd2VyZSByYXZhZ2luZyB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRlcnJpdG9yaWVzOyB0aGF0IHRoZXkgaGFkIG5vdCBiZWVuIGFibGUgdG8gcHVyY2hhc2UgcGVhY2UgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+LCBldmVuIGJ5IGdpdmluZyBob3N0YWdlczogYW5kIGZyb20gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDQ0NDciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyI+VHJldmlyaTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIFt0byBzdGF0ZV0gdGhhdCBhIGh1bmRyZWQgY2FudG9ucyBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDQ0NDciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyI+VHJldmlyaTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+IGhhZAogICAgICAgICAgICAgICAgICAgIGVuY2FtcGVkIG9uIHRoZSBiYW5rcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYW5kIHdlcmUgYXR0ZW1wdGluZyB0byBjcm9zcyBpdDsgdGhhdCB0aGUgYnJvdGhlcnMsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OYXN1YXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ltYmVyaXVzPC9uYW1lPiwgaGVhZGVkIHRoZW0uIEJlaW5nIGdyZWF0bHkgYWxhcm1lZCBhdCB0aGVzZSB0aGluZ3MsCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0aG91Z2h0IHRoYXQgaGUgb3VnaHQgdG8gdXNlIGFsbCBkaXNwYXRjaCwKICAgICAgICAgICAgICAgICAgICBsZXN0LCBpZiB0aGlzIG5ldyBiYW5kIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+IHNob3VsZCB1bml0ZSB3aXRoIHRoZSBvbGQgdHJvb3BzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4sIGhlIFs8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+XSBtaWdodCBiZSBsZXNzIGVhc2lseQogICAgICAgICAgICAgICAgICAgIHdpdGhzdG9vZC4gSGF2aW5nIHRoZXJlZm9yZSwgYXMgcXVpY2tseSBhcyBoZSBjb3VsZCwgcHJvdmlkZWQgYSBzdXBwbHkgb2YgY29ybiwKICAgICAgICAgICAgICAgICAgICBoZSBoYXN0ZW5lZCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+IGJ5IGZvcmNlZCBtYXJjaGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gaGUgaGFkIHByb2NlZWRlZCB0aHJlZSBkYXlzJyBqb3VybmV5LCB3b3JkIHdhcyBicm91Z2h0IHRvIGhpbSB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gd2FzIGhhc3RlbmluZyB3aXRoIGFsbCBoaXMgZm9yY2VzIHRvIHNlaXplIG9uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM1NiIgcmVnPSIgICtCZXNhbmNvbiBbNi4zMyw0Ny4yMzNdIChpbmhhYml0ZWQgcGxhY2UpLCBEb3VicywgRnJhbmNoZS1Db210ZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4MzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzNTYiPlZlc29udGlvPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgd2hpY2ggaXMgdGhlIGxhcmdlc3QgdG93biBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiwgYW5kIGhhZCBhZHZhbmNlZAogICAgICAgICAgICAgICAgICAgIHRocmVlIGRheXMnIGpvdXJuZXkgZnJvbSBpdHMgdGVycml0b3JpZXMuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHRob3VnaHQgdGhhdCBoZSBvdWdodCB0byB0YWtlIHRoZSBncmVhdGVzdCBwcmVjYXV0aW9ucyBsZXN0IHRoaXMgc2hvdWxkIGhhcHBlbiwKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlcmUgd2FzIGluIHRoYXQgdG93biBhIG1vc3QgYW1wbGUgc3VwcGx5IG9mIGV2ZXJ5IHRoaW5nIHdoaWNoIHdhcwogICAgICAgICAgICAgICAgICAgIHNlcnZpY2VhYmxlIGZvciB3YXI7IGFuZCBzbyBmb3J0aWZpZWQgd2FzIGl0IGJ5IHRoZSBuYXR1cmUgb2YgdGhlIGdyb3VuZCwgYXMgdG8KICAgICAgICAgICAgICAgICAgICBhZmZvcmQgYSBncmVhdCBmYWNpbGl0eSBmb3IgcHJvdHJhY3RpbmcgdGhlIHdhciwgaW5hc211Y2ggYXMgdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjkzMyIgcmVnPSIgICtEb3VicyBbNi4yNSw0Ny4xNjZdIChkZXBhcnRtZW50KSwgRnJhbmNoZS1Db210ZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyOTMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI5MzMiPkRvdWJzPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBhbG1vc3Qgc3Vycm91bmRzIHRoZSB3aG9sZSB0b3duLCBhcyB0aG91Z2ggaXQgd2VyZSB0cmFjZWQgcm91bmQgaXQgd2l0aAogICAgICAgICAgICAgICAgICAgIGEgcGFpciBvZiBjb21wYXNzZXMuIEEgbW91bnRhaW4gb2YgZ3JlYXQgaGVpZ2h0IHNodXRzIGluIHRoZSByZW1haW5pbmcgc3BhY2UsCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaXMgbm90IG1vcmUgdGhhbiA2MDAgZmVldCwgd2hlcmUgdGhlIHJpdmVyIGxlYXZlcyBhIGdhcCwgaW4gc3VjaCBhIG1hbm5lcgogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHJvb3RzIG9mIHRoYXQgbW91bnRhaW4gZXh0ZW5kIHRvIHRoZSByaXZlcidzIGJhbmsgb24gZWl0aGVyIHNpZGUuIEEKICAgICAgICAgICAgICAgICAgICB3YWxsIHRocm93biBhcm91bmQgaXQgbWFrZXMgYSBjaXRhZGVsIG9mIHRoaXMgW21vdW50YWluXSwgYW5kIGNvbm5lY3RzIGl0IHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgdG93bi4gSGl0aGVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYXN0ZW5zIGJ5IGZvcmNlZCBtYXJjaGVzIGJ5CiAgICAgICAgICAgICAgICAgICAgbmlnaHQgYW5kIGRheSwgYW5kLCBhZnRlciBoYXZpbmcgc2VpemVkIHRoZSB0b3duLCBzdGF0aW9ucyBhIGdhcnJpc29uIHRoZXJlLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiB3YXMgaGFzdGVuaW5nIHdpdGggYWxsIGhpcyBmb3JjZXMgdG8gc2VpemUgb24gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzU2IiByZWc9IiAgK0Jlc2FuY29uIFs2LjMzLDQ3LjIzM10gKGluaGFiaXRlZCBwbGFjZSksIERvdWJzLCBGcmFuY2hlLUNvbXRlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDgzNTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM1NiI+VmVzb250aW88L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCB3aGljaCBpcyB0aGUgbGFyZ2VzdCB0b3duIG9mIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODM1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzU2Ij5WZXNvbnRpbzwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4sIGFuZCBoYWQgYWR2YW5jZWQKICAgICAgICAgICAgICAgICAgICB0aHJlZSBkYXlzJyBqb3VybmV5IGZyb20gaXRzIHRlcnJpdG9yaWVzLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IHRoYXQgaGUgb3VnaHQgdG8gdGFrZSB0aGUgZ3JlYXRlc3QgcHJlY2F1dGlvbnMgbGVzdCB0aGlzIHNob3VsZCBoYXBwZW4sCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZXJlIHdhcyBpbiB0aGF0IHRvd24gYSBtb3N0IGFtcGxlIHN1cHBseSBvZiBldmVyeSB0aGluZyB3aGljaCB3YXMKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlYWJsZSBmb3Igd2FyOyBhbmQgc28gZm9ydGlmaWVkIHdhcyBpdCBieSB0aGUgbmF0dXJlIG9mIHRoZSBncm91bmQsIGFzIHRvCiAgICAgICAgICAgICAgICAgICAgYWZmb3JkIGEgZ3JlYXQgZmFjaWxpdHkgZm9yIHByb3RyYWN0aW5nIHRoZSB3YXIsIGluYXNtdWNoIGFzIHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI5MzMiIHJlZz0iICArRG91YnMgWzYuMjUsNDcuMTY2XSAoZGVwYXJ0bWVudCksIEZyYW5jaGUtQ29tdGUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjkzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyOTMzIj5Eb3ViczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gYWxtb3N0IHN1cnJvdW5kcyB0aGUgd2hvbGUgdG93biwgYXMgdGhvdWdoIGl0IHdlcmUgdHJhY2VkIHJvdW5kIGl0IHdpdGgKICAgICAgICAgICAgICAgICAgICBhIHBhaXIgb2YgY29tcGFzc2VzLiBBIG1vdW50YWluIG9mIGdyZWF0IGhlaWdodCBzaHV0cyBpbiB0aGUgcmVtYWluaW5nIHNwYWNlLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGlzIG5vdCBtb3JlIHRoYW4gNjAwIGZlZXQsIHdoZXJlIHRoZSByaXZlciBsZWF2ZXMgYSBnYXAsIGluIHN1Y2ggYSBtYW5uZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSByb290cyBvZiB0aGF0IG1vdW50YWluIGV4dGVuZCB0byB0aGUgcml2ZXIncyBiYW5rIG9uIGVpdGhlciBzaWRlLiBBCiAgICAgICAgICAgICAgICAgICAgd2FsbCB0aHJvd24gYXJvdW5kIGl0IG1ha2VzIGEgY2l0YWRlbCBvZiB0aGlzIFttb3VudGFpbl0sIGFuZCBjb25uZWN0cyBpdCB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlIHRvd24uIEhpdGhlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjkzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyOTMzIj5Eb3ViczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYXN0ZW5zIGJ5IGZvcmNlZCBtYXJjaGVzIGJ5CiAgICAgICAgICAgICAgICAgICAgbmlnaHQgYW5kIGRheSwgYW5kLCBhZnRlciBoYXZpbmcgc2VpemVkIHRoZSB0b3duLCBzdGF0aW9ucyBhIGdhcnJpc29uIHRoZXJlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.39'] = ""
translation['1.40'] = ""
translation['1.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlVwb24gdGhlIGRlbGl2ZXJ5IG9mIHRoaXMgc3BlZWNoLCB0aGUgbWluZHMgb2YgYWxsIHdlcmUgY2hhbmdlZCBpbiBhIHN1cnByaXNpbmcKICAgICAgICAgICAgICAgICAgICBtYW5uZXIsIGFuZCB0aGUgaGlnaGVzdCBhcmRvciBhbmQgZWFnZXJuZXNzIGZvciBwcm9zZWN1dGluZyB0aGUgd2FyIHdlcmUKICAgICAgICAgICAgICAgICAgICBlbmdlbmRlcmVkOyBhbmQgdGhlIHRlbnRoIGxlZ2lvbiB3YXMgdGhlIGZpcnN0IHRvIHJldHVybiB0aGFua3MgdG8gaGltLCB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbWlsaXRhcnkgdHJpYnVuZXMsIGZvciBoaXMgaGF2aW5nIGV4cHJlc3NlZCB0aGlzIG1vc3QgZmF2b3JhYmxlIG9waW5pb24gb2YKICAgICAgICAgICAgICAgICAgICB0aGVtOyBhbmQgYXNzdXJlZCBoaW0gdGhhdCB0aGV5IHdlcmUgcXVpdGUgcmVhZHkgdG8gcHJvc2VjdXRlIHRoZSB3YXIuIFRoZW4sIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIGxlZ2lvbnMgZW5kZWF2b3JlZCwgdGhyb3VnaCB0aGVpciBtaWxpdGFyeSB0cmlidW5lcyBhbmQgdGhlIGNlbnR1cmlvbnMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcHJpbmNpcGFsIGNvbXBhbmllcywgdG8gZXhjdXNlIHRoZW1zZWx2ZXMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBbc2F5aW5nXSB0aGF0IHRoZXkgaGFkIG5ldmVyIGVpdGhlciBkb3VidGVkIG9yIGZlYXJlZCwgb3IKICAgICAgICAgICAgICAgICAgICBzdXBwb3NlZCB0aGF0IHRoZSBkZXRlcm1pbmF0aW9uIG9mIHRoZSBjb25kdWN0IG9mIHRoZSB3YXIgd2FzIHRoZWlycyBhbmQgbm90CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZ2VuZXJhbCdzLiBIYXZpbmcgYWNjZXB0ZWQgdGhlaXIgZXhjdXNlLCBhbmQgaGF2aW5nIGhhZCB0aGUgcm9hZCBjYXJlZnVsbHkKICAgICAgICAgICAgICAgICAgICByZWNvbm5vaXRlcmVkIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aXRpYWN1czwvbmFtZT4sIGJlY2F1c2UgaW4gaGltIG9mIGFsbCBvdGhlcnMgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgdGhlIGdyZWF0ZXN0IGZhaXRoIFtoZSBmb3VuZF0gdGhhdCBieSBhIGNpcmN1aXRvdXMgcm91dGUgb2YgbW9yZSB0aGFuIGZpZnR5CiAgICAgICAgICAgICAgICAgICAgbWlsZXMgaGUgbWlnaHQgbGVhZCBoaXMgYXJteSB0aHJvdWdoIG9wZW4gcGFydHM7IGhlIHRoZW4gc2V0IG91dCBpbiB0aGUgZm91cnRoCiAgICAgICAgICAgICAgICAgICAgd2F0Y2gsIGFzIGhlIGhhZCBzYWlkIFtoZSB3b3VsZF0uIE9uIHRoZSBzZXZlbnRoIGRheSwgYXMgaGUgZGlkIG5vdCBkaXNjb250aW51ZQogICAgICAgICAgICAgICAgICAgIGhpcyBtYXJjaCwgaGUgd2FzIGluZm9ybWVkIGJ5IHNjb3V0cyB0aGF0IHRoZSBmb3JjZXMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHdlcmUgb25seSBmb3VyIGFuZCB0d2VudHkgbWlsZXMgZGlzdGFudCBmcm9tIG91cnMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIFtzYXlpbmddIHRoYXQgdGhleSBoYWQgbmV2ZXIgZWl0aGVyIGRvdWJ0ZWQgb3IgZmVhcmVkLCBvcgogICAgICAgICAgICAgICAgICAgIHN1cHBvc2VkIHRoYXQgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIGNvbmR1Y3Qgb2YgdGhlIHdhciB3YXMgdGhlaXJzIGFuZCBub3QKICAgICAgICAgICAgICAgICAgICB0aGVpciBnZW5lcmFsJ3MuIEhhdmluZyBhY2NlcHRlZCB0aGVpciBleGN1c2UsIGFuZCBoYXZpbmcgaGFkIHRoZSByb2FkIGNhcmVmdWxseQogICAgICAgICAgICAgICAgICAgIHJlY29ubm9pdGVyZWQgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZpdGlhY3VzPC9uYW1lPiwgYmVjYXVzZSBpbiBoaW0gb2YgYWxsIG90aGVycyBoZSBoYWQKICAgICAgICAgICAgICAgICAgICB0aGUgZ3JlYXRlc3QgZmFpdGggW2hlIGZvdW5kXSB0aGF0IGJ5IGEgY2lyY3VpdG91cyByb3V0ZSBvZiBtb3JlIHRoYW4gZmlmdHkKICAgICAgICAgICAgICAgICAgICBtaWxlcyBoZSBtaWdodCBsZWFkIGhpcyBhcm15IHRocm91Z2ggb3BlbiBwYXJ0czsgaGUgdGhlbiBzZXQgb3V0IGluIHRoZSBmb3VydGgKICAgICAgICAgICAgICAgICAgICB3YXRjaCwgYXMgaGUgaGFkIHNhaWQgW2hlIHdvdWxkXS4gT24gdGhlIHNldmVudGggZGF5LCBhcyBoZSBkaWQgbm90IGRpc2NvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgaGlzIG1hcmNoLCBoZSB3YXMgaW5mb3JtZWQgYnkgc2NvdXRzIHRoYXQgdGhlIGZvcmNlcyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgd2VyZSBvbmx5IGZvdXIgYW5kIHR3ZW50eSBtaWxlcyBkaXN0YW50IGZyb20gb3Vycy4gPC90cmFuc2xhdGlvbj4="
translation['1.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlVwb24gYmVpbmcgYXBwcml6ZWQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgYXJyaXZhbCwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiBzZW5kcyBlbWJhc3NhZG9ycyB0byBoaW0sIFtzYXlpbmddIHRoYXQgd2hhdCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgcmVxdWVzdGVkIGFzIHRvIGEgY29uZmVyZW5jZSwgbWlnaHQgbm93LCBhcyBmYXIgYXMgaGlzIHBlcm1pc3Npb24gd2VudCwKICAgICAgICAgICAgICAgICAgICB0YWtlIHBsYWNlLCBzaW5jZSBoZSBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+XSBoYWQgYXBwcm9hY2hlZCBuZWFyZXIsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhlIGNvbnNpZGVyZWQgdGhhdCBoZSBtaWdodCBub3cgZG8gaXQgd2l0aG91dCBkYW5nZXIuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBkaWQgbm90IHJlamVjdCB0aGUgcHJvcG9zYWwgYW5kIGJlZ2FuIHRvIHRoaW5rIHRoYXQgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgbm93IHJldHVybmluZyB0byBhIHJhdGlvbmFsIHN0YXRlIG9mIG1pbmQgYXMgaGUgc3BvbnRhbmVvdXNseSBwcm9mZmVyZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhlIGhhZCBwcmV2aW91c2x5IHJlZnVzZWQgdG8gaGltIHdoZW4gcmVxdWVzdGluZyBpdDsgYW5kIHdhcyBpbiBncmVhdAogICAgICAgICAgICAgICAgICAgIGhvcGVzIHRoYXQsIGluIGNvbnNpZGVyYXRpb24gb2YgaGlzIG93biBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUncyBncmVhdCBmYXZvcnMgdG93YXJkIGhpbSwgdGhlIGlzc3VlIHdvdWxkIGJlIHRoYXQgaGUgd291bGQgZGVzaXN0IGZyb20KICAgICAgICAgICAgICAgICAgICBoaXMgb2JzdGluYWN5IHVwb24gaGlzIGRlbWFuZHMgYmVpbmcgbWFkZSBrbm93bi4gVGhlIGZpZnRoIGRheSBhZnRlciB0aGF0IHdhcwogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRlZCBhcyB0aGUgZGF5IG9mIGNvbmZlcmVuY2UuIE1lYW53aGlsZSwgYXMgYW1iYXNzYWRvcnMgd2VyZSBiZWluZyBvZnRlbgogICAgICAgICAgICAgICAgICAgIHNlbnQgdG8gYW5kIGZybyBiZXR3ZWVuIHRoZW0sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gZGVtYW5kZWQgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gc2hvdWxkIG5vdCBicmluZyBhbnkgZm9vdC1zb2xkaWVyIHdpdGggaGltIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmZlcmVuY2UsIFtzYXlpbmddIHRoYXQgImhlIHdhcyBhZnJhaWQgb2YgYmVpbmcgZW5zbmFyZWQgYnkgaGltIHRocm91Z2gKICAgICAgICAgICAgICAgICAgICB0cmVhY2hlcnk7IHRoYXQgYm90aCBzaG91bGQgY29tZSBhY2NvbXBhbmllZCBieSBjYXZhbHJ5OyB0aGF0IGhlIHdvdWxkIG5vdCBjb21lCiAgICAgICAgICAgICAgICAgICAgb24gYW55IG90aGVyIGNvbmRpdGlvbi4iIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYXMgaGUgbmVpdGhlciB3aXNoZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBjb25mZXJlbmNlIHNob3VsZCwgYnkgYW4gZXhjdXNlIHRocm93biBpbiB0aGUgd2F5LCBiZSBzZXQgYXNpZGUsIG5vcgogICAgICAgICAgICAgICAgICAgIGR1cnN0IHRydXN0IGhpcyBsaWZlIHRvIHRoZSBjYXZhbHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGRlY2lkZWQgdGhhdCBpdCB3b3VsZCBiZSBtb3N0IGV4cGVkaWVudCB0byB0YWtlIGF3YXkgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxsaWM8L25hbWU+IGNhdmFscnkgYWxsIHRoZWlyIGhvcnNlcywgYW5kIHRoZXJlb24gdG8gbW91bnQgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9uYXJ5IHNvbGRpZXJzIG9mIHRoZSB0ZW50aCBsZWdpb24sIGluIHdoaWNoIGhlIHBsYWNlZCB0aGUgZ3JlYXRlc3QKICAgICAgICAgICAgICAgICAgICBjb25maWRlbmNlLCBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0IGhhdmUgYSBib2R5LWd1YXJkIGFzIHRydXN0d29ydGh5IGFzIHBvc3NpYmxlLAogICAgICAgICAgICAgICAgICAgIHNob3VsZCB0aGVyZSBiZSBhbnkgbmVlZCBmb3IgYWN0aW9uLiBBbmQgd2hlbiB0aGlzIHdhcyBkb25lLCBvbmUgb2YgdGhlIHNvbGRpZXJzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHRlbnRoIGxlZ2lvbiBzYWlkLCBub3Qgd2l0aG91dCBhIHRvdWNoIG9mIGh1bW9yLCAidGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZGlkIG1vcmUgZm9yIHRoZW0gdGhhbiBoZSBoYWQgcHJvbWlzZWQ7IGhlIGhhZCBwcm9taXNlZCB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhlIHRlbnRoIGxlZ2lvbiBpbiBwbGFjZSBvZiBoaXMgcHJhZXRvcmlhbiBjb2hvcnQ7IGJ1dCBoZSBub3cgY29udmVydGVkCiAgICAgICAgICAgICAgICAgICAgdGhlbSBpbnRvIGhvcnNlLiIgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIGFycml2YWwsCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gc2VuZHMgZW1iYXNzYWRvcnMgdG8gaGltLCBbc2F5aW5nXSB0aGF0IHdoYXQgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHJlcXVlc3RlZCBhcyB0byBhIGNvbmZlcmVuY2UsIG1pZ2h0IG5vdywgYXMgZmFyIGFzIGhpcyBwZXJtaXNzaW9uIHdlbnQsCiAgICAgICAgICAgICAgICAgICAgdGFrZSBwbGFjZSwgc2luY2UgaGUgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPl0gaGFkIGFwcHJvYWNoZWQgbmVhcmVyLAogICAgICAgICAgICAgICAgICAgIGFuZCBoZSBjb25zaWRlcmVkIHRoYXQgaGUgbWlnaHQgbm93IGRvIGl0IHdpdGhvdXQgZGFuZ2VyLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZGlkIG5vdCByZWplY3QgdGhlIHByb3Bvc2FsIGFuZCBiZWdhbiB0byB0aGluayB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdyByZXR1cm5pbmcgdG8gYSByYXRpb25hbCBzdGF0ZSBvZiBtaW5kIGFzIGhlIHNwb250YW5lb3VzbHkgcHJvZmZlcmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBoYWQgcHJldmlvdXNseSByZWZ1c2VkIHRvIGhpbSB3aGVuIHJlcXVlc3RpbmcgaXQ7IGFuZCB3YXMgaW4gZ3JlYXQKICAgICAgICAgICAgICAgICAgICBob3BlcyB0aGF0LCBpbiBjb25zaWRlcmF0aW9uIG9mIGhpcyBvd24gYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgcGVvcGxlJ3MgZ3JlYXQgZmF2b3JzIHRvd2FyZCBoaW0sIHRoZSBpc3N1ZSB3b3VsZCBiZSB0aGF0IGhlIHdvdWxkIGRlc2lzdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgaGlzIG9ic3RpbmFjeSB1cG9uIGhpcyBkZW1hbmRzIGJlaW5nIG1hZGUga25vd24uIFRoZSBmaWZ0aCBkYXkgYWZ0ZXIgdGhhdCB3YXMKICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQgYXMgdGhlIGRheSBvZiBjb25mZXJlbmNlLiBNZWFud2hpbGUsIGFzIGFtYmFzc2Fkb3JzIHdlcmUgYmVpbmcgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICBzZW50IHRvIGFuZCBmcm8gYmV0d2VlbiB0aGVtLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+IGRlbWFuZGVkIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHNob3VsZCBub3QgYnJpbmcgYW55IGZvb3Qtc29sZGllciB3aXRoIGhpbSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjb25mZXJlbmNlLCBbc2F5aW5nXSB0aGF0ICJoZSB3YXMgYWZyYWlkIG9mIGJlaW5nIGVuc25hcmVkIGJ5IGhpbSB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgdHJlYWNoZXJ5OyB0aGF0IGJvdGggc2hvdWxkIGNvbWUgYWNjb21wYW5pZWQgYnkgY2F2YWxyeTsgdGhhdCBoZSB3b3VsZCBub3QgY29tZQogICAgICAgICAgICAgICAgICAgIG9uIGFueSBvdGhlciBjb25kaXRpb24uIiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGFzIGhlIG5laXRoZXIgd2lzaGVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgY29uZmVyZW5jZSBzaG91bGQsIGJ5IGFuIGV4Y3VzZSB0aHJvd24gaW4gdGhlIHdheSwgYmUgc2V0IGFzaWRlLCBub3IKICAgICAgICAgICAgICAgICAgICBkdXJzdCB0cnVzdCBoaXMgbGlmZSB0byB0aGUgY2F2YWxyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBkZWNpZGVkIHRoYXQgaXQgd291bGQgYmUgbW9zdCBleHBlZGllbnQgdG8gdGFrZSBhd2F5IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsbGljPC9uYW1lPiBjYXZhbHJ5IGFsbCB0aGVpciBob3JzZXMsIGFuZCB0aGVyZW9uIHRvIG1vdW50IHRoZQogICAgICAgICAgICAgICAgICAgIGxlZ2lvbmFyeSBzb2xkaWVycyBvZiB0aGUgdGVudGggbGVnaW9uLCBpbiB3aGljaCBoZSBwbGFjZWQgdGhlIGdyZWF0ZXN0CiAgICAgICAgICAgICAgICAgICAgY29uZmlkZW5jZSwgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBoYXZlIGEgYm9keS1ndWFyZCBhcyB0cnVzdHdvcnRoeSBhcyBwb3NzaWJsZSwKICAgICAgICAgICAgICAgICAgICBzaG91bGQgdGhlcmUgYmUgYW55IG5lZWQgZm9yIGFjdGlvbi4gQW5kIHdoZW4gdGhpcyB3YXMgZG9uZSwgb25lIG9mIHRoZSBzb2xkaWVycwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSB0ZW50aCBsZWdpb24gc2FpZCwgbm90IHdpdGhvdXQgYSB0b3VjaCBvZiBodW1vciwgInRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRpZCBtb3JlIGZvciB0aGVtIHRoYW4gaGUgaGFkIHByb21pc2VkOyBoZSBoYWQgcHJvbWlzZWQgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIHRoZSB0ZW50aCBsZWdpb24gaW4gcGxhY2Ugb2YgaGlzIHByYWV0b3JpYW4gY29ob3J0OyBidXQgaGUgbm93IGNvbnZlcnRlZAogICAgICAgICAgICAgICAgICAgIHRoZW0gaW50byBob3JzZS4iIDwvdHJhbnNsYXRpb24+"
translation['1.43'] = ""
translation['1.44'] = ""
translation['1.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk1hbnkgdGhpbmdzIHdlcmUgc3RhdGVkIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0byB0aGUgZWZmZWN0IFt0bwogICAgICAgICAgICAgICAgICAgIHNob3ddOyAid2h5IGhlIGNvdWxkIG5vdCB3YWl2ZSB0aGUgYnVzaW5lc3MsIGFuZCB0aGF0IG5laXRoZXIgaGlzIG5vciB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUncyBwcmFjdGljZSB3b3VsZCBzdWZmZXIgaGltIHRvIGFiYW5kb24KICAgICAgICAgICAgICAgICAgICBtb3N0IG1lcml0b3Jpb3VzIGFsbGllcywgbm9yIGRpZCBoZSBkZWVtIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGJlbG9uZ2VkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gcmF0aGVyIHRoYW4gdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBwZW9wbGU7IHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4gYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJ1dGVuaTwvbmFtZT4gaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBzdWJkdWVkIGluIHdhciBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlF1aW50dXMgRmFiaXVzIE1heGltdXM8L25hbWU+LCBhbmQgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgaGFkIHBhcmRvbmVkIHRoZW0gYW5kIGhhZCBub3QgcmVkdWNlZCB0aGVtCiAgICAgICAgICAgICAgICAgICAgaW50byBhIHByb3ZpbmNlIG9yIGltcG9zZWQgYSB0cmlidXRlIHVwb24gdGhlbS4gQW5kIGlmIHRoZSBtb3N0IGFuY2llbnQgcGVyaW9kCiAgICAgICAgICAgICAgICAgICAgd2FzIHRvIGJlIHJlZ2FyZGVkLXRoZW4gd2FzIHRoZSBzb3ZlcmVpZ250eSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IG1vc3QganVzdDogaWYgdGhlIGRlY3JlZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBTZW5hdGUgd2FzIHRvIGJlIG9ic2VydmVkLCB0aGVuIG91Z2h0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB0byBiZSBmcmVlLCB3aGljaCB0aGV5IFt0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Sb21hbnNdPC9uYW1lPiBoYWQgY29ucXVlcmVkIGluIHdhciwgYW5kIGhhZCBwZXJtaXR0ZWQgdG8gZW5qb3kgaXRzCiAgICAgICAgICAgICAgICAgICAgb3duIGxhd3MuIiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRvIHRoZSBlZmZlY3QgW3RvCiAgICAgICAgICAgICAgICAgICAgc2hvd107ICJ3aHkgaGUgY291bGQgbm90IHdhaXZlIHRoZSBidXNpbmVzcywgYW5kIHRoYXQgbmVpdGhlciBoaXMgbm9yIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSdzIHByYWN0aWNlIHdvdWxkIHN1ZmZlciBoaW0gdG8gYWJhbmRvbgogICAgICAgICAgICAgICAgICAgIG1vc3QgbWVyaXRvcmlvdXMgYWxsaWVzLCBub3IgZGlkIGhlIGRlZW0gdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gYmVsb25nZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiByYXRoZXIgdGhhbiB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHBlb3BsZTsgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pPC9uYW1lPiBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UnV0ZW5pPC9uYW1lPiBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIHN1YmR1ZWQgaW4gd2FyIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UXVpbnR1cyBGYWJpdXMgTWF4aW11czwvbmFtZT4sIGFuZCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBoYWQgcGFyZG9uZWQgdGhlbSBhbmQgaGFkIG5vdCByZWR1Y2VkIHRoZW0KICAgICAgICAgICAgICAgICAgICBpbnRvIGEgcHJvdmluY2Ugb3IgaW1wb3NlZCBhIHRyaWJ1dGUgdXBvbiB0aGVtLiBBbmQgaWYgdGhlIG1vc3QgYW5jaWVudCBwZXJpb2QKICAgICAgICAgICAgICAgICAgICB3YXMgdG8gYmUgcmVnYXJkZWQtdGhlbiB3YXMgdGhlIHNvdmVyZWlnbnR5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gbW9zdCBqdXN0OiBpZiB0aGUgZGVjcmVlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIFNlbmF0ZSB3YXMgdG8gYmUgb2JzZXJ2ZWQsIHRoZW4gb3VnaHQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IHRvIGJlIGZyZWUsIHdoaWNoIHRoZXkgW3RoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJvbWFuc108L25hbWU+IGhhZCBjb25xdWVyZWQgaW4gd2FyLCBhbmQgaGFkIHBlcm1pdHRlZCB0byBlbmpveSBpdHMKICAgICAgICAgICAgICAgICAgICBvd24gbGF3cy4iIDwvdHJhbnNsYXRpb24+"
translation['1.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIHRoZXNlIHRoaW5ncyBhcmUgYmVpbmcgdHJhbnNhY3RlZCBpbiB0aGUgY29uZmVyZW5jZSBpdCB3YXMgYW5ub3VuY2VkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0aGF0IHRoZSBjYXZhbHJ5IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB3ZXJlIGFwcHJvYWNoaW5nIG5lYXJlciB0aGUgbW91bmQsIGFuZCB3ZXJlIHJpZGluZyB1cCB0byBvdXIgbWVuLCBhbmQgY2FzdGluZwogICAgICAgICAgICAgICAgICAgIHN0b25lcyBhbmQgd2VhcG9ucyBhdCB0aGVtLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbWFkZSBhbiBlbmQgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgc3BlZWNoIGFuZCBiZXRvb2sgaGltc2VsZiB0byBoaXMgbWVuOyBhbmQgY29tbWFuZGVkIHRoZW0gdGhhdCB0aGV5IHNob3VsZCBieSBubwogICAgICAgICAgICAgICAgICAgIG1lYW5zIHJldHVybiBhIHdlYXBvbiB1cG9uIHRoZSBlbmVteS4gRm9yIHRob3VnaCBoZSBzYXcgdGhhdCBhbiBlbmdhZ2VtZW50IHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgY2F2YWxyeSB3b3VsZCBiZSB3aXRob3V0IGFueSBkYW5nZXIgdG8gaGlzIGNob3NlbiBsZWdpb24sIHlldCBoZSBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgdGhpbmsgcHJvcGVyIHRvIGVuZ2FnZSwgbGVzdCwgYWZ0ZXIgdGhlIGVuZW15IHdlcmUgcm91dGVkLCBpdCBtaWdodCBiZSBzYWlkIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCBiZWVuIGluc25hcmVkIGJ5IGhpbSB1bmRlciB0aGUgc2FuY3Rpb24gb2YgYSBjb25mZXJlbmNlLiBXaGVuIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIHNwcmVhZCBhYnJvYWQgYW1vbmcgdGhlIGNvbW1vbiBzb2xkaWVyeSB3aXRoIHdoYXQgaGF1Z2h0aW5lc3MKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiBoYWQgYmVoYXZlZCBhdCB0aGUgY29uZmVyZW5jZSwgYW5kIGhvdyBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiB0byBxdWl0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgYW5kIGhvdyBoaXMKICAgICAgICAgICAgICAgICAgICBjYXZhbHJ5IGhhZCBtYWRlIGFuIGF0dGFjayB1cG9uIG91ciBtZW4sIGFuZCBob3cgdGhpcyBoYWQgYnJva2VuIG9mZiB0aGUKICAgICAgICAgICAgICAgICAgICBjb25mZXJlbmNlLCBhIG11Y2ggZ3JlYXRlciBhbGFjcml0eSBhbmQgZWFnZXJuZXNzIGZvciBiYXR0bGUgd2FzIGluZnVzZWQgaW50bwogICAgICAgICAgICAgICAgICAgIG91ciBhcm15LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRoYXQgdGhlIGNhdmFscnkgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHdlcmUgYXBwcm9hY2hpbmcgbmVhcmVyIHRoZSBtb3VuZCwgYW5kIHdlcmUgcmlkaW5nIHVwIHRvIG91ciBtZW4sIGFuZCBjYXN0aW5nCiAgICAgICAgICAgICAgICAgICAgc3RvbmVzIGFuZCB3ZWFwb25zIGF0IHRoZW0uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBtYWRlIGFuIGVuZCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBzcGVlY2ggYW5kIGJldG9vayBoaW1zZWxmIHRvIGhpcyBtZW47IGFuZCBjb21tYW5kZWQgdGhlbSB0aGF0IHRoZXkgc2hvdWxkIGJ5IG5vCiAgICAgICAgICAgICAgICAgICAgbWVhbnMgcmV0dXJuIGEgd2VhcG9uIHVwb24gdGhlIGVuZW15LiBGb3IgdGhvdWdoIGhlIHNhdyB0aGF0IGFuIGVuZ2FnZW1lbnQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBjYXZhbHJ5IHdvdWxkIGJlIHdpdGhvdXQgYW55IGRhbmdlciB0byBoaXMgY2hvc2VuIGxlZ2lvbiwgeWV0IGhlIGRpZCBub3QKICAgICAgICAgICAgICAgICAgICB0aGluayBwcm9wZXIgdG8gZW5nYWdlLCBsZXN0LCBhZnRlciB0aGUgZW5lbXkgd2VyZSByb3V0ZWQsIGl0IG1pZ2h0IGJlIHNhaWQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIGJlZW4gaW5zbmFyZWQgYnkgaGltIHVuZGVyIHRoZSBzYW5jdGlvbiBvZiBhIGNvbmZlcmVuY2UuIFdoZW4gaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgc3ByZWFkIGFicm9hZCBhbW9uZyB0aGUgY29tbW9uIHNvbGRpZXJ5IHdpdGggd2hhdCBoYXVnaHRpbmVzcwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+IGhhZCBiZWhhdmVkIGF0IHRoZSBjb25mZXJlbmNlLCBhbmQgaG93IGhlIGhhZAogICAgICAgICAgICAgICAgICAgIG9yZGVyZWQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHRvIHF1aXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgaG93IGhpcwogICAgICAgICAgICAgICAgICAgIGNhdmFscnkgaGFkIG1hZGUgYW4gYXR0YWNrIHVwb24gb3VyIG1lbiwgYW5kIGhvdyB0aGlzIGhhZCBicm9rZW4gb2ZmIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmZlcmVuY2UsIGEgbXVjaCBncmVhdGVyIGFsYWNyaXR5IGFuZCBlYWdlcm5lc3MgZm9yIGJhdHRsZSB3YXMgaW5mdXNlZCBpbnRvCiAgICAgICAgICAgICAgICAgICAgb3VyIGFybXkuIDwvdHJhbnNsYXRpb24+"
translation['1.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlR3byBkYXlzIGFmdGVyLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+IHNlbmRzIGVtYmFzc2Fkb3JzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgdG8gc3RhdGUgInRoYXQgaGUgd2lzaGVkIHRvIHRyZWF0IHdpdGggaGltIGFib3V0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzIHdoaWNoIGhhZCBiZWVuIGJlZ3VuIHRvIGJlIHRyZWF0ZWQgb2YgYmV0d2VlbiB0aGVtLCBidXQgaGFkIG5vdCBiZWVuCiAgICAgICAgICAgICAgICAgICAgY29uY2x1ZGVkOyIgW2FuZCB0byBiZWddIHRoYXQgImhlIHdvdWxkIGVpdGhlciBhZ2FpbiBhcHBvaW50IGEgZGF5IGZvciBhCiAgICAgICAgICAgICAgICAgICAgY29uZmVyZW5jZTsgb3IsIGlmIGhlIHdlcmUgbm90IHdpbGxpbmcgdG8gZG8gdGhhdCwgdGhhdCBoZSB3b3VsZCBzZW5kIG9uZSBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBbb2ZmaWNlcnNdIGFzIGFuIGVtYmFzc2Fkb3IgdG8gaGltLiIgVGhlcmUgZGlkIG5vdCBhcHBlYXIgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGFueSBnb29kIHJlYXNvbiBmb3IgaG9sZGluZyBhIGNvbmZlcmVuY2U7IGFuZCB0aGUgbW9yZSBzbyBhcwogICAgICAgICAgICAgICAgICAgIHRoZSBkYXkgYmVmb3JlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gY291bGQgbm90IGJlIHJlc3RyYWluZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIGNhc3Rpbmcgd2VhcG9ucyBhdCBvdXIgbWVuLiBIZSB0aG91Z2h0IGhlIHNob3VsZCBub3Qgd2l0aG91dCBncmVhdCBkYW5nZXIKICAgICAgICAgICAgICAgICAgICBzZW5kIHRvIGhpbSBhcyBlbWJhc3NhZG9yIG9uZSBvZiBoaXMgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT5dCiAgICAgICAgICAgICAgICAgICAgb2ZmaWNlcnMsIGFuZCBzaG91bGQgZXhwb3NlIGhpbSB0byBzYXZhZ2UgbWVuLiBJdCBzZWVtZWQgW3RoZXJlZm9yZV0gbW9zdCBwcm9wZXIKICAgICAgICAgICAgICAgICAgICB0byBzZW5kIHRvIGhpbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkMuIFZhbGVyaXVzIFByb2NpbGx1czwvbmFtZT4sIHRoZSBzb24gb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DLiBWYWxlcml1cyBDYWJ1cnVzPC9uYW1lPiwgYSB5b3VuZyBtYW4gb2YgdGhlIGhpZ2hlc3QgY291cmFnZQogICAgICAgICAgICAgICAgICAgIGFuZCBhY2NvbXBsaXNobWVudHMgKHdob3NlIGZhdGhlciBoYWQgYmVlbiBwcmVzZW50ZWQgd2l0aCB0aGUgZnJlZWRvbSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5IGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Qy4gVmFsZXJpdXMgRmxhY2N1czwvbmFtZT4pLCBib3RoIG9uIGFjY291bnQgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgZmlkZWxpdHkgYW5kIG9uIGFjY291bnQgb2YgaGlzIGtub3dsZWRnZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxsaWM8L25hbWU+IGxhbmd1YWdlLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4sIGJ5IGxvbmcgcHJhY3RpY2UsIG5vdyBzcG9rZSBmbHVlbnRseTsgYW5kIGJlY2F1c2UKICAgICAgICAgICAgICAgICAgICBpbiBoaXMgY2FzZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHdvdWxkIGhhdmUgbm8gbW90aXZlIGZvcgogICAgICAgICAgICAgICAgICAgIGNvbW1pdHRpbmcgdmlvbGVuY2U7IGFuZCBbYXMgaGlzIGNvbGxlYWd1ZV0gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NLiBNZXR0aXVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aG8gaGFkIHNoYXJlZCB0aGUgaG9zcGl0YWxpdHkgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPi4gSGUgY29tbWlzc2lvbmVkIHRoZW0KICAgICAgICAgICAgICAgICAgICB0byBsZWFybiB3aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gaGFkIHRvIHNheSwgYW5kIHRvIHJlcG9ydCB0byBoaW0uIEJ1dCB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gc2F3IHRoZW0gYmVmb3JlIGhpbSBpbiBoaXMgY2FtcCwgaGUgY3JpZWQgb3V0IGluIHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbmNlIG9mIGhpcyBhcm15LCAiV2h5IHdlcmUgdGhleSBjb21lIHRvIGhpbT8gV2FzIGl0IGZvciB0aGUgcHVycG9zZSBvZgogICAgICAgICAgICAgICAgICAgIGFjdGluZyBhcyBzcGllcz8iIEhlIHN0b3BwZWQgdGhlbSB3aGVuIGF0dGVtcHRpbmcgdG8gc3BlYWssIGFuZCBjYXN0IHRoZW0gaW50bwogICAgICAgICAgICAgICAgICAgIGNoYWlucy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gc2VuZHMgZW1iYXNzYWRvcnMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCB0byBzdGF0ZSAidGhhdCBoZSB3aXNoZWQgdG8gdHJlYXQgd2l0aCBoaW0gYWJvdXQgdGhvc2UKICAgICAgICAgICAgICAgICAgICB0aGluZ3Mgd2hpY2ggaGFkIGJlZW4gYmVndW4gdG8gYmUgdHJlYXRlZCBvZiBiZXR3ZWVuIHRoZW0sIGJ1dCBoYWQgbm90IGJlZW4KICAgICAgICAgICAgICAgICAgICBjb25jbHVkZWQ7IiBbYW5kIHRvIGJlZ10gdGhhdCAiaGUgd291bGQgZWl0aGVyIGFnYWluIGFwcG9pbnQgYSBkYXkgZm9yIGEKICAgICAgICAgICAgICAgICAgICBjb25mZXJlbmNlOyBvciwgaWYgaGUgd2VyZSBub3Qgd2lsbGluZyB0byBkbyB0aGF0LCB0aGF0IGhlIHdvdWxkIHNlbmQgb25lIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIFtvZmZpY2Vyc10gYXMgYW4gZW1iYXNzYWRvciB0byBoaW0uIiBUaGVyZSBkaWQgbm90IGFwcGVhciB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYW55IGdvb2QgcmVhc29uIGZvciBob2xkaW5nIGEgY29uZmVyZW5jZTsgYW5kIHRoZSBtb3JlIHNvIGFzCiAgICAgICAgICAgICAgICAgICAgdGhlIGRheSBiZWZvcmUgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBjb3VsZCBub3QgYmUgcmVzdHJhaW5lZAogICAgICAgICAgICAgICAgICAgIGZyb20gY2FzdGluZyB3ZWFwb25zIGF0IG91ciBtZW4uIEhlIHRob3VnaHQgaGUgc2hvdWxkIG5vdCB3aXRob3V0IGdyZWF0IGRhbmdlcgogICAgICAgICAgICAgICAgICAgIHNlbmQgdG8gaGltIGFzIGVtYmFzc2Fkb3Igb25lIG9mIGhpcyBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPl0KICAgICAgICAgICAgICAgICAgICBvZmZpY2VycywgYW5kIHNob3VsZCBleHBvc2UgaGltIHRvIHNhdmFnZSBtZW4uIEl0IHNlZW1lZCBbdGhlcmVmb3JlXSBtb3N0IHByb3BlcgogICAgICAgICAgICAgICAgICAgIHRvIHNlbmQgdG8gaGltIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Qy4gVmFsZXJpdXMgUHJvY2lsbHVzPC9uYW1lPiwgdGhlIHNvbiBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkMuIFZhbGVyaXVzIENhYnVydXM8L25hbWU+LCBhIHlvdW5nIG1hbiBvZiB0aGUgaGlnaGVzdCBjb3VyYWdlCiAgICAgICAgICAgICAgICAgICAgYW5kIGFjY29tcGxpc2htZW50cyAod2hvc2UgZmF0aGVyIGhhZCBiZWVuIHByZXNlbnRlZCB3aXRoIHRoZSBmcmVlZG9tIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHkgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DLiBWYWxlcml1cyBGbGFjY3VzPC9uYW1lPiksIGJvdGggb24gYWNjb3VudCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBmaWRlbGl0eSBhbmQgb24gYWNjb3VudCBvZiBoaXMga25vd2xlZGdlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGxpYzwvbmFtZT4gbGFuZ3VhZ2UsCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiwgYnkgbG9uZyBwcmFjdGljZSwgbm93IHNwb2tlIGZsdWVudGx5OyBhbmQgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIGluIGhpcyBjYXNlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gd291bGQgaGF2ZSBubyBtb3RpdmUgZm9yCiAgICAgICAgICAgICAgICAgICAgY29tbWl0dGluZyB2aW9sZW5jZTsgYW5kIFthcyBoaXMgY29sbGVhZ3VlXSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPk0uIE1ldHRpdXM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHdobyBoYWQgc2hhcmVkIHRoZSBob3NwaXRhbGl0eSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+LiBIZSBjb21taXNzaW9uZWQgdGhlbQogICAgICAgICAgICAgICAgICAgIHRvIGxlYXJuIHdoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiBoYWQgdG8gc2F5LCBhbmQgdG8gcmVwb3J0IHRvIGhpbS4gQnV0IHdoZW4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiBzYXcgdGhlbSBiZWZvcmUgaGltIGluIGhpcyBjYW1wLCBoZSBjcmllZCBvdXQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2Ugb2YgaGlzIGFybXksICJXaHkgd2VyZSB0aGV5IGNvbWUgdG8gaGltPyBXYXMgaXQgZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgICAgICAgICAgICAgYWN0aW5nIGFzIHNwaWVzPyIgSGUgc3RvcHBlZCB0aGVtIHdoZW4gYXR0ZW1wdGluZyB0byBzcGVhaywgYW5kIGNhc3QgdGhlbSBpbnRvCiAgICAgICAgICAgICAgICAgICAgY2hhaW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBzYW1lIGRheSBoZSBtb3ZlZCBoaXMgY2FtcCBmb3J3YXJkIGFuZCBwaXRjaGVkIHVuZGVyIGEgaGlsbCBzaXggbWlsZXMgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBjYW1wLiBUaGUgZGF5IGZvbGxvd2luZyBoZSBsZWQgaGlzIGZvcmNlcwogICAgICAgICAgICAgICAgICAgIHBhc3QgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgY2FtcCwgYW5kIGVuY2FtcGVkIHR3byBtaWxlcyBiZXlvbmQgaGltOwogICAgICAgICAgICAgICAgICAgIHdpdGggdGhpcyBkZXNpZ24gdGhhdCBoZSBtaWdodCBjdXQgb2ZmIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGNvcm4gYW5kIHByb3Zpc2lvbnMsIHdoaWNoIG1pZ2h0IGJlIGNvbnZleWVkIHRvIGhpbSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4uIEZvciBmaXZlIHN1Y2Nlc3NpdmUgZGF5cwogICAgICAgICAgICAgICAgICAgIGZyb20gdGhhdCBkYXksIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBkcmV3IG91dCBoaXMgZm9yY2VzIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICBjYW1wLCBhbmQgcHV0IHRoZW0gaW4gYmF0dGxlIG9yZGVyLCB0aGF0LCBpZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+IHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHdpbGxpbmcgdG8gZW5nYWdlIGluIGJhdHRsZSwgYW4gb3Bwb3J0dW5pdHkgbWlnaHQgbm90IGJlIHdhbnRpbmcgdG8gaGltLgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+IGFsbCB0aGlzIHRpbWUga2VwdCBoaXMgYXJteSBpbiBjYW1wOiBidXQgZW5nYWdlZAogICAgICAgICAgICAgICAgICAgIGRhaWx5IGluIGNhdmFscnkgc2tpcm1pc2hlcy4gVGhlIG1ldGhvZCBvZiBiYXR0bGUgaW4gd2hpY2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBoYWQgcHJhY3RpY2VkIHRoZW1zZWx2ZXMgd2FzIHRoaXMuIFRoZXJlIHdlcmUKICAgICAgICAgICAgICAgICAgICA2LDAwMCBob3JzZSwgYW5kIGFzIG1hbnkgdmVyeSBhY3RpdmUgYW5kIGNvdXJhZ2VvdXMgZm9vdCwgb25lIG9mIHdob20gZWFjaCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBob3JzZSBzZWxlY3RlZCBvdXQgb2YgdGhlIHdob2xlIGFybXkgZm9yIGhpcyBvd24gcHJvdGVjdGlvbi4gQnkgdGhlc2UgW2Zvb3RdCiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIGNvbnN0YW50bHkgYWNjb21wYW5pZWQgaW4gdGhlaXIgZW5nYWdlbWVudHM7IHRvIHRoZXNlIHRoZSBob3JzZQogICAgICAgICAgICAgICAgICAgIHJldGlyZWQ7IHRoZXNlIG9uIGFueSBlbWVyZ2VuY3kgcnVzaGVkIGZvcndhcmQ7IGlmIGFueSBvbmUsIHVwb24gcmVjZWl2aW5nIGEKICAgICAgICAgICAgICAgICAgICB2ZXJ5IHNldmVyZSB3b3VuZCwgaGFkIGZhbGxlbiBmcm9tIGhpcyBob3JzZSwgdGhleSBzdG9vZCBhcm91bmQgaGltOiBpZiBpdCB3YXMKICAgICAgICAgICAgICAgICAgICBuZWNlc3NhcnkgdG8gYWR2YW5jZSBmdXJ0aGVyIHRoYW4gdXN1YWwsIG9yIHRvIHJldHJlYXQgbW9yZSByYXBpZGx5LCBzbyBncmVhdCwKICAgICAgICAgICAgICAgICAgICBmcm9tIHByYWN0aWNlLCB3YXMgdGhlaXIgc3dpZnRuZXNzLCB0aGF0LCBzdXBwb3J0ZWQgYnkgdGhlIG1hbmVzIG9mIHRoZSBob3JzZXMsCiAgICAgICAgICAgICAgICAgICAgdGhleSBjb3VsZCBrZWVwIHBhY2Ugd2l0aCB0aGVpciBzcGVlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIGNhbXAuIFRoZSBkYXkgZm9sbG93aW5nIGhlIGxlZCBoaXMgZm9yY2VzCiAgICAgICAgICAgICAgICAgICAgcGFzdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBjYW1wLCBhbmQgZW5jYW1wZWQgdHdvIG1pbGVzIGJleW9uZCBoaW07CiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGlzIGRlc2lnbiB0aGF0IGhlIG1pZ2h0IGN1dCBvZmYgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgY29ybiBhbmQgcHJvdmlzaW9ucywgd2hpY2ggbWlnaHQgYmUgY29udmV5ZWQgdG8gaGltIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4gYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPi4gRm9yIGZpdmUgc3VjY2Vzc2l2ZSBkYXlzCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGF0IGRheSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRyZXcgb3V0IGhpcyBmb3JjZXMgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbXAsIGFuZCBwdXQgdGhlbSBpbiBiYXR0bGUgb3JkZXIsIHRoYXQsIGlmIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgd2lsbGluZyB0byBlbmdhZ2UgaW4gYmF0dGxlLCBhbiBvcHBvcnR1bml0eSBtaWdodCBub3QgYmUgd2FudGluZyB0byBoaW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gYWxsIHRoaXMgdGltZSBrZXB0IGhpcyBhcm15IGluIGNhbXA6IGJ1dCBlbmdhZ2VkCiAgICAgICAgICAgICAgICAgICAgZGFpbHkgaW4gY2F2YWxyeSBza2lybWlzaGVzLiBUaGUgbWV0aG9kIG9mIGJhdHRsZSBpbiB3aGljaCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGhhZCBwcmFjdGljZWQgdGhlbXNlbHZlcyB3YXMgdGhpcy4gVGhlcmUgd2VyZQogICAgICAgICAgICAgICAgICAgIDYsMDAwIGhvcnNlLCBhbmQgYXMgbWFueSB2ZXJ5IGFjdGl2ZSBhbmQgY291cmFnZW91cyBmb290LCBvbmUgb2Ygd2hvbSBlYWNoIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGhvcnNlIHNlbGVjdGVkIG91dCBvZiB0aGUgd2hvbGUgYXJteSBmb3IgaGlzIG93biBwcm90ZWN0aW9uLiBCeSB0aGVzZSBbZm9vdF0KICAgICAgICAgICAgICAgICAgICB0aGV5IHdlcmUgY29uc3RhbnRseSBhY2NvbXBhbmllZCBpbiB0aGVpciBlbmdhZ2VtZW50czsgdG8gdGhlc2UgdGhlIGhvcnNlCiAgICAgICAgICAgICAgICAgICAgcmV0aXJlZDsgdGhlc2Ugb24gYW55IGVtZXJnZW5jeSBydXNoZWQgZm9yd2FyZDsgaWYgYW55IG9uZSwgdXBvbiByZWNlaXZpbmcgYQogICAgICAgICAgICAgICAgICAgIHZlcnkgc2V2ZXJlIHdvdW5kLCBoYWQgZmFsbGVuIGZyb20gaGlzIGhvcnNlLCB0aGV5IHN0b29kIGFyb3VuZCBoaW06IGlmIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSB0byBhZHZhbmNlIGZ1cnRoZXIgdGhhbiB1c3VhbCwgb3IgdG8gcmV0cmVhdCBtb3JlIHJhcGlkbHksIHNvIGdyZWF0LAogICAgICAgICAgICAgICAgICAgIGZyb20gcHJhY3RpY2UsIHdhcyB0aGVpciBzd2lmdG5lc3MsIHRoYXQsIHN1cHBvcnRlZCBieSB0aGUgbWFuZXMgb2YgdGhlIGhvcnNlcywKICAgICAgICAgICAgICAgICAgICB0aGV5IGNvdWxkIGtlZXAgcGFjZSB3aXRoIHRoZWlyIHNwZWVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlBlcmNlaXZpbmcgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+IGtlcHQgaGltc2VsZiBpbiBjYW1wLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHRoYXQgaGUgbWlnaHQgbm90IGFueSBsb25nZXIgYmUgY3V0IG9mZiBmcm9tIHByb3Zpc2lvbnMsCiAgICAgICAgICAgICAgICAgICAgY2hvc2UgYSBjb252ZW5pZW50IHBvc2l0aW9uIGZvciBhIGNhbXAgYmV5b25kIHRoYXQgcGxhY2UgaW4gd2hpY2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBoYWQgZW5jYW1wZWQsIGF0IGFib3V0IDYwMCBwYWNlcyBmcm9tIHRoZW0sIGFuZAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBkcmF3biB1cCBoaXMgYXJteSBpbiB0aHJlZSBsaW5lcywgbWFyY2hlZCB0byB0aGF0IHBsYWNlLiBIZSBvcmRlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IGFuZCBzZWNvbmQgbGluZXMgdG8gYmUgdW5kZXIgYXJtczsgdGhlIHRoaXJkIHRvIGZvcnRpZnkgdGhlIGNhbXAuIFRoaXMKICAgICAgICAgICAgICAgICAgICBwbGFjZSB3YXMgZGlzdGFudCBmcm9tIHRoZSBlbmVteSBhYm91dCA2MDAgcGFjZXMsIGFzIGhhcyBiZWVuIHN0YXRlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGl0aGVyIEFyaW92aXN0dXM8L25hbWU+IHNlbnQgbGlnaHQgdHJvb3BzLCBhYm91dCAxNiwwMDAgbWVuIGluCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyLCB3aXRoIGFsbCBoaXMgY2F2YWxyeTsgd2hpY2ggZm9yY2VzIHdlcmUgdG8gaW50aW1pZGF0ZSBvdXIgbWVuLCBhbmQKICAgICAgICAgICAgICAgICAgICBoaW5kZXIgdGhlbSBpbiB0aGVpciBmb3J0aWZpY2F0aW9uLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBuZXZlcnRoZWxlc3MsIGFzIGhlIGhhZCBiZWZvcmUgYXJyYW5nZWQsIG9yZGVyZWQgdHdvIGxpbmVzIHRvIGRyaXZlIG9mZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteTogdGhlIHRoaXJkIHRvIGV4ZWN1dGUgdGhlIHdvcmsuIFRoZSBjYW1wIGJlaW5nIGZvcnRpZmllZCwgaGUgbGVmdCB0aGVyZQogICAgICAgICAgICAgICAgICAgIHR3byBsZWdpb25zIGFuZCBhIHBvcnRpb24gb2YgdGhlIGF1eGlsaWFyaWVzOyBhbmQgbGVkIGJhY2sgdGhlIG90aGVyIGZvdXIKICAgICAgICAgICAgICAgICAgICBsZWdpb25zIGludG8gdGhlIGxhcmdlciBjYW1wLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiBrZXB0IGhpbXNlbGYgaW4gY2FtcCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCB0aGF0IGhlIG1pZ2h0IG5vdCBhbnkgbG9uZ2VyIGJlIGN1dCBvZmYgZnJvbSBwcm92aXNpb25zLAogICAgICAgICAgICAgICAgICAgIGNob3NlIGEgY29udmVuaWVudCBwb3NpdGlvbiBmb3IgYSBjYW1wIGJleW9uZCB0aGF0IHBsYWNlIGluIHdoaWNoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gaGFkIGVuY2FtcGVkLCBhdCBhYm91dCA2MDAgcGFjZXMgZnJvbSB0aGVtLCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgZHJhd24gdXAgaGlzIGFybXkgaW4gdGhyZWUgbGluZXMsIG1hcmNoZWQgdG8gdGhhdCBwbGFjZS4gSGUgb3JkZXJlZCB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBhbmQgc2Vjb25kIGxpbmVzIHRvIGJlIHVuZGVyIGFybXM7IHRoZSB0aGlyZCB0byBmb3J0aWZ5IHRoZSBjYW1wLiBUaGlzCiAgICAgICAgICAgICAgICAgICAgcGxhY2Ugd2FzIGRpc3RhbnQgZnJvbSB0aGUgZW5lbXkgYWJvdXQgNjAwIHBhY2VzLCBhcyBoYXMgYmVlbiBzdGF0ZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhpdGhlciBBcmlvdmlzdHVzPC9uYW1lPiBzZW50IGxpZ2h0IHRyb29wcywgYWJvdXQgMTYsMDAwIG1lbiBpbgogICAgICAgICAgICAgICAgICAgIG51bWJlciwgd2l0aCBhbGwgaGlzIGNhdmFscnk7IHdoaWNoIGZvcmNlcyB3ZXJlIHRvIGludGltaWRhdGUgb3VyIG1lbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgaGluZGVyIHRoZW0gaW4gdGhlaXIgZm9ydGlmaWNhdGlvbi4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgbmV2ZXJ0aGVsZXNzLCBhcyBoZSBoYWQgYmVmb3JlIGFycmFuZ2VkLCBvcmRlcmVkIHR3byBsaW5lcyB0byBkcml2ZSBvZmYgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXk6IHRoZSB0aGlyZCB0byBleGVjdXRlIHRoZSB3b3JrLiBUaGUgY2FtcCBiZWluZyBmb3J0aWZpZWQsIGhlIGxlZnQgdGhlcmUKICAgICAgICAgICAgICAgICAgICB0d28gbGVnaW9ucyBhbmQgYSBwb3J0aW9uIG9mIHRoZSBhdXhpbGlhcmllczsgYW5kIGxlZCBiYWNrIHRoZSBvdGhlciBmb3VyCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucyBpbnRvIHRoZSBsYXJnZXIgY2FtcC4gPC90cmFuc2xhdGlvbj4="
translation['1.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBuZXh0IGRheSwgYWNjb3JkaW5nIHRvIGhpcyBjdXN0b20sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBsZWQgb3V0CiAgICAgICAgICAgICAgICAgICAgaGlzIGZvcmNlcyBmcm9tIGJvdGggY2FtcHMsIGFuZCBoYXZpbmcgYWR2YW5jZWQgYSBsaXR0bGUgZnJvbSB0aGUgbGFyZ2VyIG9uZSwKICAgICAgICAgICAgICAgICAgICBkcmV3IHVwIGhpcyBsaW5lIG9mIGJhdHRsZSwgYW5kIGdhdmUgdGhlIGVuZW15IGFuIG9wcG9ydHVuaXR5IG9mIGZpZ2h0aW5nLiBXaGVuCiAgICAgICAgICAgICAgICAgICAgaGUgZm91bmQgdGhhdCB0aGV5IGRpZCBub3QgZXZlbiB0aGVuIGNvbWUgb3V0IFtmcm9tIHRoZWlyIGludHJlbmNobWVudHMsXSBoZSBsZWQKICAgICAgICAgICAgICAgICAgICBiYWNrIGhpcyBhcm15IGludG8gY2FtcCBhYm91dCBub29uLiBUaGVuIGF0IGxhc3QgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiBzZW50CiAgICAgICAgICAgICAgICAgICAgcGFydCBvZiBoaXMgZm9yY2VzIHRvIGF0dGFjayB0aGUgbGVzc2VyIGNhbXAuIFRoZSBiYXR0bGUgd2FzIHZpZ29yb3VzbHkKICAgICAgICAgICAgICAgICAgICBtYWludGFpbmVkIG9uIGJvdGggc2lkZXMgdGlsbCB0aGUgZXZlbmluZy4gQXQgc3Vuc2V0LCBhZnRlciBtYW55IHdvdW5kcyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGluZmxpY3RlZCBhbmQgcmVjZWl2ZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gbGVkIGJhY2sgaGlzIGZvcmNlcyBpbnRvIGNhbXAuCiAgICAgICAgICAgICAgICAgICAgV2hlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaW5xdWlyZWQgb2YgaGlzIHByaXNvbmVycywgd2hlcmVmb3JlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gZGlkIG5vdCBjb21lIHRvIGFuIGVuZ2FnZW1lbnQsIGhlIGRpc2NvdmVyZWQgdGhpcyB0bwogICAgICAgICAgICAgICAgICAgIGJlIHRoZSByZWFzb24tdGhhdCBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGl0IHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBjdXN0b20gZm9yIHRoZWlyIG1hdHJvbnMgdG8gcHJvbm91bmNlIGZyb20gbG90cyBhbmQgZGl2aW5hdGlvbiwgd2hldGhlciBpdCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZXhwZWRpZW50IHRoYXQgdGhlIGJhdHRsZSBzaG91bGQgYmUgZW5nYWdlZCBpbiBvciBub3Q7IHRoYXQgdGhleSBoYWQgc2FpZCwgInRoYXQKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgbm90IHRoZSB3aWxsIG9mIGhlYXZlbiB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgY29ucXVlciwgaWYgdGhleSBlbmdhZ2VkIGluIGJhdHRsZSBiZWZvcmUgdGhlIG5ldyBtb29uLiIgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUxIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBsZWQgb3V0CiAgICAgICAgICAgICAgICAgICAgaGlzIGZvcmNlcyBmcm9tIGJvdGggY2FtcHMsIGFuZCBoYXZpbmcgYWR2YW5jZWQgYSBsaXR0bGUgZnJvbSB0aGUgbGFyZ2VyIG9uZSwKICAgICAgICAgICAgICAgICAgICBkcmV3IHVwIGhpcyBsaW5lIG9mIGJhdHRsZSwgYW5kIGdhdmUgdGhlIGVuZW15IGFuIG9wcG9ydHVuaXR5IG9mIGZpZ2h0aW5nLiBXaGVuCiAgICAgICAgICAgICAgICAgICAgaGUgZm91bmQgdGhhdCB0aGV5IGRpZCBub3QgZXZlbiB0aGVuIGNvbWUgb3V0IFtmcm9tIHRoZWlyIGludHJlbmNobWVudHMsXSBoZSBsZWQKICAgICAgICAgICAgICAgICAgICBiYWNrIGhpcyBhcm15IGludG8gY2FtcCBhYm91dCBub29uLiBUaGVuIGF0IGxhc3QgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiBzZW50CiAgICAgICAgICAgICAgICAgICAgcGFydCBvZiBoaXMgZm9yY2VzIHRvIGF0dGFjayB0aGUgbGVzc2VyIGNhbXAuIFRoZSBiYXR0bGUgd2FzIHZpZ29yb3VzbHkKICAgICAgICAgICAgICAgICAgICBtYWludGFpbmVkIG9uIGJvdGggc2lkZXMgdGlsbCB0aGUgZXZlbmluZy4gQXQgc3Vuc2V0LCBhZnRlciBtYW55IHdvdW5kcyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGluZmxpY3RlZCBhbmQgcmVjZWl2ZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gbGVkIGJhY2sgaGlzIGZvcmNlcyBpbnRvIGNhbXAuCiAgICAgICAgICAgICAgICAgICAgV2hlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaW5xdWlyZWQgb2YgaGlzIHByaXNvbmVycywgd2hlcmVmb3JlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gZGlkIG5vdCBjb21lIHRvIGFuIGVuZ2FnZW1lbnQsIGhlIGRpc2NvdmVyZWQgdGhpcyB0bwogICAgICAgICAgICAgICAgICAgIGJlIHRoZSByZWFzb24tdGhhdCBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGl0IHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBjdXN0b20gZm9yIHRoZWlyIG1hdHJvbnMgdG8gcHJvbm91bmNlIGZyb20gbG90cyBhbmQgZGl2aW5hdGlvbiwgd2hldGhlciBpdCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZXhwZWRpZW50IHRoYXQgdGhlIGJhdHRsZSBzaG91bGQgYmUgZW5nYWdlZCBpbiBvciBub3Q7IHRoYXQgdGhleSBoYWQgc2FpZCwgInRoYXQKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgbm90IHRoZSB3aWxsIG9mIGhlYXZlbiB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgY29ucXVlciwgaWYgdGhleSBlbmdhZ2VkIGluIGJhdHRsZSBiZWZvcmUgdGhlIG5ldyBtb29uLiIgPC90cmFuc2xhdGlvbj4="
translation['1.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBkYXkgZm9sbG93aW5nLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGVmdCB3aGF0IHNlZW1lZCBzdWZmaWNpZW50IGFzCiAgICAgICAgICAgICAgICAgICAgYSBndWFyZCBmb3IgYm90aCBjYW1wczsgW2FuZCB0aGVuXSBkcmV3IHVwIGFsbCB0aGUgYXV4aWxpYXJpZXMgaW4gc2lnaHQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXksIGJlZm9yZSB0aGUgbGVzc2VyIGNhbXAsIGJlY2F1c2UgaGUgd2FzIG5vdCB2ZXJ5IHBvd2VyZnVsIGluIHRoZSBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICBsZWdpb25hcnkgc29sZGllcnMsIGNvbnNpZGVyaW5nIHRoZSBudW1iZXIgb2YgdGhlIGVuZW15OyB0aGF0IFt0aGVyZWJ5XSBoZSBtaWdodAogICAgICAgICAgICAgICAgICAgIG1ha2UgdXNlIG9mIGhpcyBhdXhpbGlhcmllcyBmb3IgYXBwZWFyYW5jZS4gSGUgaGltc2VsZiwgaGF2aW5nIGRyYXduIHVwIGhpcyBhcm15CiAgICAgICAgICAgICAgICAgICAgaW4gdGhyZWUgbGluZXMsIGFkdmFuY2VkIHRvIHRoZSBjYW1wIG9mIHRoZSBlbmVteS4gVGhlbiBhdCBsYXN0IG9mIG5lY2Vzc2l0eSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGRyZXcgdGhlaXIgZm9yY2VzIG91dCBvZiBjYW1wLCBhbmQKICAgICAgICAgICAgICAgICAgICBkaXNwb3NlZCB0aGVtIGNhbnRvbiBieSBjYW50b24sIGF0IGVxdWFsIGRpc3RhbmNlcywgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGFydWRlczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyY29tYW5uaTwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJpYm9jY2k8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZhbmdpb25lczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVtZXRlczwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VkdXNpaTwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+OyBhbmQKICAgICAgICAgICAgICAgICAgICBzdXJyb3VuZGVkIHRoZWlyIHdob2xlIGFybXkgd2l0aCB0aGVpciBjaGFyaW90cyBhbmQgd2Fnb25zLCB0aGF0IG5vIGhvcGUgbWlnaHQKICAgICAgICAgICAgICAgICAgICBiZSBsZWZ0IGluIGZsaWdodC4gT24gdGhlc2UgdGhleSBwbGFjZWQgdGhlaXIgd29tZW4sIHdobywgd2l0aCBkaXNoZXZlbGVkIGhhaXIKICAgICAgICAgICAgICAgICAgICBhbmQgaW4gdGVhcnMsIGVudHJlYXRlZCB0aGUgc29sZGllcnMsIGFzIHRoZXkgd2VudCBmb3J3YXJkIHRvIGJhdHRsZSwgbm90IHRvCiAgICAgICAgICAgICAgICAgICAgZGVsaXZlciB0aGVtIGludG8gc2xhdmVyeSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGVmdCB3aGF0IHNlZW1lZCBzdWZmaWNpZW50IGFzCiAgICAgICAgICAgICAgICAgICAgYSBndWFyZCBmb3IgYm90aCBjYW1wczsgW2FuZCB0aGVuXSBkcmV3IHVwIGFsbCB0aGUgYXV4aWxpYXJpZXMgaW4gc2lnaHQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXksIGJlZm9yZSB0aGUgbGVzc2VyIGNhbXAsIGJlY2F1c2UgaGUgd2FzIG5vdCB2ZXJ5IHBvd2VyZnVsIGluIHRoZSBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICBsZWdpb25hcnkgc29sZGllcnMsIGNvbnNpZGVyaW5nIHRoZSBudW1iZXIgb2YgdGhlIGVuZW15OyB0aGF0IFt0aGVyZWJ5XSBoZSBtaWdodAogICAgICAgICAgICAgICAgICAgIG1ha2UgdXNlIG9mIGhpcyBhdXhpbGlhcmllcyBmb3IgYXBwZWFyYW5jZS4gSGUgaGltc2VsZiwgaGF2aW5nIGRyYXduIHVwIGhpcyBhcm15CiAgICAgICAgICAgICAgICAgICAgaW4gdGhyZWUgbGluZXMsIGFkdmFuY2VkIHRvIHRoZSBjYW1wIG9mIHRoZSBlbmVteS4gVGhlbiBhdCBsYXN0IG9mIG5lY2Vzc2l0eSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGRyZXcgdGhlaXIgZm9yY2VzIG91dCBvZiBjYW1wLCBhbmQKICAgICAgICAgICAgICAgICAgICBkaXNwb3NlZCB0aGVtIGNhbnRvbiBieSBjYW50b24sIGF0IGVxdWFsIGRpc3RhbmNlcywgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGFydWRlczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyY29tYW5uaTwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJpYm9jY2k8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZhbmdpb25lczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVtZXRlczwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VkdXNpaTwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+OyBhbmQKICAgICAgICAgICAgICAgICAgICBzdXJyb3VuZGVkIHRoZWlyIHdob2xlIGFybXkgd2l0aCB0aGVpciBjaGFyaW90cyBhbmQgd2Fnb25zLCB0aGF0IG5vIGhvcGUgbWlnaHQKICAgICAgICAgICAgICAgICAgICBiZSBsZWZ0IGluIGZsaWdodC4gT24gdGhlc2UgdGhleSBwbGFjZWQgdGhlaXIgd29tZW4sIHdobywgd2l0aCBkaXNoZXZlbGVkIGhhaXIKICAgICAgICAgICAgICAgICAgICBhbmQgaW4gdGVhcnMsIGVudHJlYXRlZCB0aGUgc29sZGllcnMsIGFzIHRoZXkgd2VudCBmb3J3YXJkIHRvIGJhdHRsZSwgbm90IHRvCiAgICAgICAgICAgICAgICAgICAgZGVsaXZlciB0aGVtIGludG8gc2xhdmVyeSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['1.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhcHBvaW50ZWQgb3ZlciBlYWNoIGxlZ2lvbiBhIGxpZXV0ZW5hbnQgYW5kIGEKICAgICAgICAgICAgICAgICAgICBxdWVzdG9yLCB0aGF0IGV2ZXJ5IG9uZSBtaWdodCBoYXZlIHRoZW0gYXMgd2l0bmVzc2VzIG9mIGhpcyB2YWxvci4gSGUgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGJlZ2FuIHRoZSBiYXR0bGUgYXQgdGhlIGhlYWQgb2YgdGhlIHJpZ2h0IHdpbmcsIGJlY2F1c2UgaGUgaGFkIG9ic2VydmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBwYXJ0IG9mIHRoZSBlbmVteSB0byBiZSB0aGUgbGVhc3Qgc3Ryb25nLiBBY2NvcmRpbmdseSBvdXIgbWVuLCB1cG9uIHRoZSBzaWduYWwKICAgICAgICAgICAgICAgICAgICBiZWluZyBnaXZlbiwgdmlnb3JvdXNseSBtYWRlIGFuIGF0dGFjayB1cG9uIHRoZSBlbmVteSwgYW5kIHRoZSBlbmVteSBzbyBzdWRkZW5seQogICAgICAgICAgICAgICAgICAgIGFuZCByYXBpZGx5IHJ1c2hlZCBmb3J3YXJkLCB0aGF0IHRoZXJlIHdhcyBubyB0aW1lIGZvciBjYXN0aW5nIHRoZSBqYXZlbGlucyBhdAogICAgICAgICAgICAgICAgICAgIHRoZW0uIFRocm93aW5nIGFzaWRlIFt0aGVyZWZvcmVdIHRoZWlyIGphdmVsaW5zLCB0aGV5IGZvdWdodCB3aXRoIHN3b3JkcyBoYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgaGFuZC4gQnV0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIGFjY29yZGluZyB0byB0aGVpciBjdXN0b20sCiAgICAgICAgICAgICAgICAgICAgcmFwaWRseSBmb3JtaW5nIGEgcGhhbGFueCwgc3VzdGFpbmVkIHRoZSBhdHRhY2sgb2Ygb3VyIHN3b3Jkcy4gVGhlcmUgd2VyZSBmb3VuZAogICAgICAgICAgICAgICAgICAgIHZlcnkgbWFueSBvZiBvdXIgc29sZGllcnMgd2hvIGxlYXBlZCB1cG9uIHRoZSBwaGFsYW54LCBhbmQgd2l0aCB0aGVpciBoYW5kcyB0b3JlCiAgICAgICAgICAgICAgICAgICAgYXdheSB0aGUgc2hpZWxkcywgYW5kIHdvdW5kZWQgdGhlIGVuZW15IGZyb20gYWJvdmUuIEFsdGhvdWdoIHRoZSBhcm15IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15IHdhcyByb3V0ZWQgb24gdGhlIGxlZnQgd2luZyBhbmQgcHV0IHRvIGZsaWdodCwgdGhleSBbc3RpbGxdIHByZXNzZWQKICAgICAgICAgICAgICAgICAgICBoZWF2aWx5IG9uIG91ciBtZW4gZnJvbSB0aGUgcmlnaHQgd2luZywgYnkgdGhlIGdyZWF0IG51bWJlciBvZiB0aGVpciB0cm9vcHMuIE9uCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2aW5nIHdoaWNoLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlAuIENyYXNzdXM8L25hbWU+LCBhIHlvdW5nIG1hbiwgd2hvIGNvbW1hbmRlZAogICAgICAgICAgICAgICAgICAgIHRoZSBjYXZhbHJ5LWFzIGhlIHdhcyBtb3JlIGRpc2VuZ2FnZWQgdGhhbiB0aG9zZSB3aG8gd2VyZSBlbXBsb3llZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaWdodC1zZW50IHRoZSB0aGlyZCBsaW5lIGFzIGEgcmVsaWVmIHRvIG91ciBtZW4gd2hvIHdlcmUgaW4gZGlzdHJlc3MuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYXBwb2ludGVkIG92ZXIgZWFjaCBsZWdpb24gYSBsaWV1dGVuYW50IGFuZCBhCiAgICAgICAgICAgICAgICAgICAgcXVlc3RvciwgdGhhdCBldmVyeSBvbmUgbWlnaHQgaGF2ZSB0aGVtIGFzIHdpdG5lc3NlcyBvZiBoaXMgdmFsb3IuIEhlIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICBiZWdhbiB0aGUgYmF0dGxlIGF0IHRoZSBoZWFkIG9mIHRoZSByaWdodCB3aW5nLCBiZWNhdXNlIGhlIGhhZCBvYnNlcnZlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgcGFydCBvZiB0aGUgZW5lbXkgdG8gYmUgdGhlIGxlYXN0IHN0cm9uZy4gQWNjb3JkaW5nbHkgb3VyIG1lbiwgdXBvbiB0aGUgc2lnbmFsCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgZ2l2ZW4sIHZpZ29yb3VzbHkgbWFkZSBhbiBhdHRhY2sgdXBvbiB0aGUgZW5lbXksIGFuZCB0aGUgZW5lbXkgc28gc3VkZGVubHkKICAgICAgICAgICAgICAgICAgICBhbmQgcmFwaWRseSBydXNoZWQgZm9yd2FyZCwgdGhhdCB0aGVyZSB3YXMgbm8gdGltZSBmb3IgY2FzdGluZyB0aGUgamF2ZWxpbnMgYXQKICAgICAgICAgICAgICAgICAgICB0aGVtLiBUaHJvd2luZyBhc2lkZSBbdGhlcmVmb3JlXSB0aGVpciBqYXZlbGlucywgdGhleSBmb3VnaHQgd2l0aCBzd29yZHMgaGFuZCB0bwogICAgICAgICAgICAgICAgICAgIGhhbmQuIEJ1dCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCBhY2NvcmRpbmcgdG8gdGhlaXIgY3VzdG9tLAogICAgICAgICAgICAgICAgICAgIHJhcGlkbHkgZm9ybWluZyBhIHBoYWxhbngsIHN1c3RhaW5lZCB0aGUgYXR0YWNrIG9mIG91ciBzd29yZHMuIFRoZXJlIHdlcmUgZm91bmQKICAgICAgICAgICAgICAgICAgICB2ZXJ5IG1hbnkgb2Ygb3VyIHNvbGRpZXJzIHdobyBsZWFwZWQgdXBvbiB0aGUgcGhhbGFueCwgYW5kIHdpdGggdGhlaXIgaGFuZHMgdG9yZQogICAgICAgICAgICAgICAgICAgIGF3YXkgdGhlIHNoaWVsZHMsIGFuZCB3b3VuZGVkIHRoZSBlbmVteSBmcm9tIGFib3ZlLiBBbHRob3VnaCB0aGUgYXJteSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSB3YXMgcm91dGVkIG9uIHRoZSBsZWZ0IHdpbmcgYW5kIHB1dCB0byBmbGlnaHQsIHRoZXkgW3N0aWxsXSBwcmVzc2VkCiAgICAgICAgICAgICAgICAgICAgaGVhdmlseSBvbiBvdXIgbWVuIGZyb20gdGhlIHJpZ2h0IHdpbmcsIGJ5IHRoZSBncmVhdCBudW1iZXIgb2YgdGhlaXIgdHJvb3BzLiBPbgogICAgICAgICAgICAgICAgICAgIG9ic2VydmluZyB3aGljaCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5QLiBDcmFzc3VzPC9uYW1lPiwgYSB5b3VuZyBtYW4sIHdobyBjb21tYW5kZWQKICAgICAgICAgICAgICAgICAgICB0aGUgY2F2YWxyeS1hcyBoZSB3YXMgbW9yZSBkaXNlbmdhZ2VkIHRoYW4gdGhvc2Ugd2hvIHdlcmUgZW1wbG95ZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlnaHQtc2VudCB0aGUgdGhpcmQgbGluZSBhcyBhIHJlbGllZiB0byBvdXIgbWVuIHdobyB3ZXJlIGluIGRpc3RyZXNzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJldXBvbiB0aGUgZW5nYWdlbWVudCB3YXMgcmVuZXdlZCwgYW5kIGFsbCB0aGUgZW5lbXkgdHVybmVkIHRoZWlyIGJhY2tzLCBub3IKICAgICAgICAgICAgICAgICAgICBkaWQgdGhleSBjZWFzZSB0byBmbGVlIHVudGlsIHRoZXkgYXJyaXZlZCBhdCB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYWJvdXQgZmlmdHkgbWlsZXMgZnJvbSB0aGF0IHBsYWNlLiBUaGVyZSBzb21lIGZldywgZWl0aGVyIHJlbHlpbmcgb24KICAgICAgICAgICAgICAgICAgICB0aGVpciBzdHJlbmd0aCwgZW5kZWF2b3JlZCB0byBzd2ltIG92ZXIsIG9yLCBmaW5kaW5nIGJvYXRzLCBwcm9jdXJlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHNhZmV0eS4gQW1vbmcgdGhlIGxhdHRlciB3YXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiwgd2hvIG1lZXRpbmcgd2l0aCBhIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgdmVzc2VsIHRpZWQgdG8gdGhlIGJhbmssIGVzY2FwZWQgaW4gaXQ7IG91ciBob3JzZSBwdXJzdWVkIGFuZCBzbGV3IGFsbCB0aGUgcmVzdAogICAgICAgICAgICAgICAgICAgIG9mIHRoZW0uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gaGFkIHR3byB3aXZlcywgb25lIGEgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2YW48L25hbWU+IGJ5CiAgICAgICAgICAgICAgICAgICAgbmF0aW9uLCB3aG9tIGhlIGJyb3VnaHQgd2l0aCBoaW0gZnJvbSBob21lOyB0aGUgb3RoZXIgYSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5vcmljYW48L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHRoZSBzaXN0ZXIgb2Yga2luZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZvY2lvbjwvbmFtZT4sIHdob20gaGUgaGFkIG1hcnJpZWQgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBzaGUgaGF2aW5nIGJlZW4gc2VudCBbdGhpdGhlciBmb3IgdGhhdCBwdXJwb3NlXSBieSBoZXIKICAgICAgICAgICAgICAgICAgICBicm90aGVyLiBCb3RoIHBlcmlzaGVkIGluIHRoYXQgZmxpZ2h0LiBPZiB0aGVpciB0d28gZGF1Z2h0ZXJzLCBvbmUgd2FzIHNsYWluLAogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlciBjYXB0dXJlZC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DLiBWYWxlcml1cyBQcm9jaWxsdXM8L25hbWU+LCBhcyBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBiZWluZyBkcmFnZ2VkIGJ5IGhpcyBndWFyZHMgaW4gdGhlIGZpZ2h0LCBib3VuZCB3aXRoIGEgdHJpcGxlIGNoYWluLCBmZWxsIGludG8KICAgICAgICAgICAgICAgICAgICB0aGUgaGFuZHMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhpbXNlbGYsIGFzIGhlIHdhcyBwdXJzdWluZyB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSB3aXRoIGhpcyBjYXZhbHJ5LiBUaGlzIGNpcmN1bXN0YW5jZSBpbmRlZWQgYWZmb3JkZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG5vIGxlc3MgcGxlYXN1cmUgdGhhbiB0aGUgdmljdG9yeSBpdHNlbGY7IGJlY2F1c2UgaGUgc2F3IGEKICAgICAgICAgICAgICAgICAgICBtYW4gb2YgdGhlIGZpcnN0IHJhbmsgaW4gdGhlIHByb3ZpbmNlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgaGlzIGludGltYXRlIGFjcXVhaW50YW5jZQogICAgICAgICAgICAgICAgICAgIGFuZCBmcmllbmQsIHJlc2N1ZWQgZnJvbSB0aGUgaGFuZCBvZiB0aGUgZW5lbXksIGFuZCByZXN0b3JlZCB0byBoaW0sIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgZm9ydHVuZSBoYWQgbm90IGRpbWluaXNoZWQgYXVnaHQgb2YgdGhlIGpveSBhbmQgZXh1bHRhdGlvbiBbb2YgdGhhdCBkYXldIGJ5IGhpcwogICAgICAgICAgICAgICAgICAgIGRlc3RydWN0aW9uLiBIZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPltQcm9jaWxsdXNdPC9uYW1lPiBzYWlkIHRoYXQsIGluIGhpcyBvd24gcHJlc2VuY2UsIHRoZQogICAgICAgICAgICAgICAgICAgIGxvdHMgaGFkIGJlZW4gdGhyaWNlIGNvbnN1bHRlZCByZXNwZWN0aW5nIGhpbSwgd2hldGhlciBoZSBzaG91bGQgaW1tZWRpYXRlbHkgYmUKICAgICAgICAgICAgICAgICAgICBwdXQgdG8gZGVhdGggYnkgZmlyZSwgb3IgYmUgcmVzZXJ2ZWQgZm9yIGFub3RoZXIgdGltZTogdGhhdCBieSB0aGUgZmF2b3Igb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbG90cyBoZSB3YXMgdW5pbmp1cmVkLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPk0uIE1ldHRpdXM8L25hbWU+LCBhbHNvLCB3YXMgZm91bmQgYW5kCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBiYWNrIHRvIGhpbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPltDYWVzYXI8L25hbWU+Ll0gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGFib3V0IGZpZnR5IG1pbGVzIGZyb20gdGhhdCBwbGFjZS4gVGhlcmUgc29tZSBmZXcsIGVpdGhlciByZWx5aW5nIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgc3RyZW5ndGgsIGVuZGVhdm9yZWQgdG8gc3dpbSBvdmVyLCBvciwgZmluZGluZyBib2F0cywgcHJvY3VyZWQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBzYWZldHkuIEFtb25nIHRoZSBsYXR0ZXIgd2FzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiwgd2hvIG1lZXRpbmcgd2l0aCBhIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgdmVzc2VsIHRpZWQgdG8gdGhlIGJhbmssIGVzY2FwZWQgaW4gaXQ7IG91ciBob3JzZSBwdXJzdWVkIGFuZCBzbGV3IGFsbCB0aGUgcmVzdAogICAgICAgICAgICAgICAgICAgIG9mIHRoZW0uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gaGFkIHR3byB3aXZlcywgb25lIGEgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2YW48L25hbWU+IGJ5CiAgICAgICAgICAgICAgICAgICAgbmF0aW9uLCB3aG9tIGhlIGJyb3VnaHQgd2l0aCBoaW0gZnJvbSBob21lOyB0aGUgb3RoZXIgYSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5vcmljYW48L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHRoZSBzaXN0ZXIgb2Yga2luZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZvY2lvbjwvbmFtZT4sIHdob20gaGUgaGFkIG1hcnJpZWQgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBzaGUgaGF2aW5nIGJlZW4gc2VudCBbdGhpdGhlciBmb3IgdGhhdCBwdXJwb3NlXSBieSBoZXIKICAgICAgICAgICAgICAgICAgICBicm90aGVyLiBCb3RoIHBlcmlzaGVkIGluIHRoYXQgZmxpZ2h0LiBPZiB0aGVpciB0d28gZGF1Z2h0ZXJzLCBvbmUgd2FzIHNsYWluLAogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlciBjYXB0dXJlZC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DLiBWYWxlcml1cyBQcm9jaWxsdXM8L25hbWU+LCBhcyBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBiZWluZyBkcmFnZ2VkIGJ5IGhpcyBndWFyZHMgaW4gdGhlIGZpZ2h0LCBib3VuZCB3aXRoIGEgdHJpcGxlIGNoYWluLCBmZWxsIGludG8KICAgICAgICAgICAgICAgICAgICB0aGUgaGFuZHMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhpbXNlbGYsIGFzIGhlIHdhcyBwdXJzdWluZyB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSB3aXRoIGhpcyBjYXZhbHJ5LiBUaGlzIGNpcmN1bXN0YW5jZSBpbmRlZWQgYWZmb3JkZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG5vIGxlc3MgcGxlYXN1cmUgdGhhbiB0aGUgdmljdG9yeSBpdHNlbGY7IGJlY2F1c2UgaGUgc2F3IGEKICAgICAgICAgICAgICAgICAgICBtYW4gb2YgdGhlIGZpcnN0IHJhbmsgaW4gdGhlIHByb3ZpbmNlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgaGlzIGludGltYXRlIGFjcXVhaW50YW5jZQogICAgICAgICAgICAgICAgICAgIGFuZCBmcmllbmQsIHJlc2N1ZWQgZnJvbSB0aGUgaGFuZCBvZiB0aGUgZW5lbXksIGFuZCByZXN0b3JlZCB0byBoaW0sIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgZm9ydHVuZSBoYWQgbm90IGRpbWluaXNoZWQgYXVnaHQgb2YgdGhlIGpveSBhbmQgZXh1bHRhdGlvbiBbb2YgdGhhdCBkYXldIGJ5IGhpcwogICAgICAgICAgICAgICAgICAgIGRlc3RydWN0aW9uLiBIZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPltQcm9jaWxsdXNdPC9uYW1lPiBzYWlkIHRoYXQsIGluIGhpcyBvd24gcHJlc2VuY2UsIHRoZQogICAgICAgICAgICAgICAgICAgIGxvdHMgaGFkIGJlZW4gdGhyaWNlIGNvbnN1bHRlZCByZXNwZWN0aW5nIGhpbSwgd2hldGhlciBoZSBzaG91bGQgaW1tZWRpYXRlbHkgYmUKICAgICAgICAgICAgICAgICAgICBwdXQgdG8gZGVhdGggYnkgZmlyZSwgb3IgYmUgcmVzZXJ2ZWQgZm9yIGFub3RoZXIgdGltZTogdGhhdCBieSB0aGUgZmF2b3Igb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbG90cyBoZSB3YXMgdW5pbmp1cmVkLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPk0uIE1ldHRpdXM8L25hbWU+LCBhbHNvLCB3YXMgZm91bmQgYW5kCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBiYWNrIHRvIGhpbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPltDYWVzYXI8L25hbWU+Ll0gPC90cmFuc2xhdGlvbj4="
translation['1.54'] = ""
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGlsZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FzIGluIHdpbnRlciBxdWFydGVycyBpbiBIaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhcyB3ZSBoYXZlIHNob3duIGFib3ZlLCBmcmVxdWVudCByZXBvcnRzIHdlcmUgYnJvdWdodCB0byBoaW0sCiAgICAgICAgICAgICAgICAgICAgYW5kIGhlIHdhcyBhbHNvIGluZm9ybWVkIGJ5IGxldHRlcnMgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhYmllbnVzPC9uYW1lPiwgdGhhdCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiwgd2hvIHdlIGhhdmUgc2FpZCBhcmUgYSB0aGlyZCBwYXJ0IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgd2VyZSBlbnRlcmluZyBpbnRvIGEgY29uZmVkZXJhY3kgYWdhaW5zdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGFuZCBnaXZpbmcgaG9zdGFnZXMgdG8gb25lIGFub3RoZXI7IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgcmVhc29ucyBvZiB0aGUgY29uZmVkZXJhY3kgd2VyZSB0aGVzZS1maXJzdCwgYmVjYXVzZSB0aGV5IGZlYXJlZCB0aGF0LCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGFsbCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPltDZWx0aWNdIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT48L25hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgIHN1YmR1ZWQsIG91ciBhcm15IHdvdWxkIGJlIGxlZCBhZ2FpbnN0IHRoZW07IHNlY29uZGx5LCBiZWNhdXNlIHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgIGluc3RpZ2F0ZWQgYnkgc2V2ZXJhbCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPjsgc29tZSBvZiB3aG9tIGFzCiAgICAgICAgICAgICAgICAgICAgW29uIHRoZSBvbmUgaGFuZF0gdGhleSBoYWQgYmVlbiB1bndpbGxpbmcgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHNob3VsZCByZW1haW4gYW55IGxvbmdlciBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHNvIFtvbiB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlcl0gdGhleSB3ZXJlIGRpc3NhdGlzZmllZCB0aGF0IHRoZSBhcm15IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBzaG91bGQgcGFzcyB0aGUgd2ludGVyIGluIGl0LCBhbmQgc2V0dGxlIHRoZXJlOyBhbmQKICAgICAgICAgICAgICAgICAgICBvdGhlcnMgb2YgdGhlbSwgZnJvbSBhIG5hdHVyYWwgaW5zdGFiaWxpdHkgYW5kIGZpY2tsZW5lc3Mgb2YgZGlzcG9zaXRpb24sIHdlcmUKICAgICAgICAgICAgICAgICAgICBhbnhpb3VzIGZvciBhIHJldm9sdXRpb247IFt0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+IHdlcmUgaW5zdGlnYXRlZF0gYnkgc2V2ZXJhbCwKICAgICAgICAgICAgICAgICAgICBhbHNvLCBiZWNhdXNlIHRoZSBnb3Zlcm5tZW50IGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB3YXMgZ2VuZXJhbGx5IHNlaXplZCB1cG9uCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIG1vcmUgcG93ZXJmdWwgcGVyc29ucyBhbmQgYnkgdGhvc2Ugd2hvIGhhZCB0aGUgbWVhbnMgb2YgaGlyaW5nIHRyb29wcywKICAgICAgICAgICAgICAgICAgICBhbmQgdGhleSBjb3VsZCBsZXNzIGVhc2lseSBlZmZlY3QgdGhpcyBvYmplY3QgdW5kZXIgb3VyIGRvbWluaW9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FzIGluIHdpbnRlciBxdWFydGVycyBpbiBIaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhcyB3ZSBoYXZlIHNob3duIGFib3ZlLCBmcmVxdWVudCByZXBvcnRzIHdlcmUgYnJvdWdodCB0byBoaW0sCiAgICAgICAgICAgICAgICAgICAgYW5kIGhlIHdhcyBhbHNvIGluZm9ybWVkIGJ5IGxldHRlcnMgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhYmllbnVzPC9uYW1lPiwgdGhhdCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiwgd2hvIHdlIGhhdmUgc2FpZCBhcmUgYSB0aGlyZCBwYXJ0IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgd2VyZSBlbnRlcmluZyBpbnRvIGEgY29uZmVkZXJhY3kgYWdhaW5zdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGFuZCBnaXZpbmcgaG9zdGFnZXMgdG8gb25lIGFub3RoZXI7IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgcmVhc29ucyBvZiB0aGUgY29uZmVkZXJhY3kgd2VyZSB0aGVzZS1maXJzdCwgYmVjYXVzZSB0aGV5IGZlYXJlZCB0aGF0LCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGFsbCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPltDZWx0aWNdIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT48L25hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgIHN1YmR1ZWQsIG91ciBhcm15IHdvdWxkIGJlIGxlZCBhZ2FpbnN0IHRoZW07IHNlY29uZGx5LCBiZWNhdXNlIHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgIGluc3RpZ2F0ZWQgYnkgc2V2ZXJhbCBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT47IHNvbWUgb2Ygd2hvbSBhcwogICAgICAgICAgICAgICAgICAgIFtvbiB0aGUgb25lIGhhbmRdIHRoZXkgaGFkIGJlZW4gdW53aWxsaW5nIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBzaG91bGQgcmVtYWluIGFueSBsb25nZXIgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBzbyBbb24gdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXJdIHRoZXkgd2VyZSBkaXNzYXRpc2ZpZWQgdGhhdCB0aGUgYXJteSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgc2hvdWxkIHBhc3MgdGhlIHdpbnRlciBpbiBpdCwgYW5kIHNldHRsZSB0aGVyZTsgYW5kCiAgICAgICAgICAgICAgICAgICAgb3RoZXJzIG9mIHRoZW0sIGZyb20gYSBuYXR1cmFsIGluc3RhYmlsaXR5IGFuZCBmaWNrbGVuZXNzIG9mIGRpc3Bvc2l0aW9uLCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYW54aW91cyBmb3IgYSByZXZvbHV0aW9uOyBbdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiB3ZXJlIGluc3RpZ2F0ZWRdIGJ5IHNldmVyYWwsCiAgICAgICAgICAgICAgICAgICAgYWxzbywgYmVjYXVzZSB0aGUgZ292ZXJubWVudCBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gd2FzIGdlbmVyYWxseSBzZWl6ZWQgdXBvbgogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBtb3JlIHBvd2VyZnVsIHBlcnNvbnMgYW5kIGJ5IHRob3NlIHdobyBoYWQgdGhlIG1lYW5zIG9mIGhpcmluZyB0cm9vcHMsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZXkgY291bGQgbGVzcyBlYXNpbHkgZWZmZWN0IHRoaXMgb2JqZWN0IHVuZGVyIG91ciBkb21pbmlvbi4gPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxhcm1lZCBieSB0aGVzZSB0aWRpbmdzIGFuZCBsZXR0ZXJzLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGV2aWVkIHR3bwogICAgICAgICAgICAgICAgICAgIG5ldyBsZWdpb25zIGluIEhpdGhlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGFuZCwgYXQgdGhlIGJlZ2lubmluZyBvZgogICAgICAgICAgICAgICAgICAgIHN1bW1lciwgc2VudCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlEuIFBlZGl1czwvbmFtZT4sIGhpcyBsaWV1dGVuYW50LCB0byBjb25kdWN0IHRoZW0KICAgICAgICAgICAgICAgICAgICBmdXJ0aGVyIGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LiBIZSwgaGltc2VsZiwgYXMgc29vbiBhcwogICAgICAgICAgICAgICAgICAgIHRoZXJlIGJlZ2FuIHRvIGJlIHBsZW50eSBvZiBmb3JhZ2UsIGNhbWUgdG8gdGhlIGFybXkuIEhlIGdpdmVzIGEgY29tbWlzc2lvbiB0bwogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMzU2OTciIHJlZz0iICArU2Vub25lcyBbNi45ODMsNDguNF0gKGluaGFiaXRlZCBwbGFjZSksIFZvc2dlcywgTG9ycmFpbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAzNTY5NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDM1Njk3Ij5TZW5vbmVzPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBhbmQgdGhlIG90aGVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gd2hvIHdlcmUgbmVpZ2hib3JzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4sIHRvIGxlYXJuIHdoYXQgaXMgZ29pbmcgb24gYW1vbmcgdGhlbSBbaS5lLiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWVdPC9uYW1lPiwgYW5kIGluZm9ybSBoaW0gb2YgdGhlc2UgbWF0dGVycy4gVGhlc2UgYWxsIHVuaWZvcm1seQogICAgICAgICAgICAgICAgICAgIHJlcG9ydGVkIHRoYXQgdHJvb3BzIHdlcmUgYmVpbmcgcmFpc2VkLCBhbmQgdGhhdCBhbiBhcm15IHdhcyBiZWluZyBjb2xsZWN0ZWQgaW4KICAgICAgICAgICAgICAgICAgICBvbmUgcGxhY2UuIFRoZW4sIGluZGVlZCwgaGUgdGhvdWdodCB0aGF0IGhlIG91Z2h0IG5vdCB0byBoZXNpdGF0ZSBhYm91dAogICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmcgdG93YXJkIHRoZW0sIGFuZCBoYXZpbmcgcHJvdmlkZWQgc3VwcGxpZXMsIG1vdmVzIGhpcyBjYW1wLCBhbmQgaW4KICAgICAgICAgICAgICAgICAgICBhYm91dCBmaWZ0ZWVuIGRheXMgYXJyaXZlcyBhdCB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGxldmllZCB0d28KICAgICAgICAgICAgICAgICAgICBuZXcgbGVnaW9ucyBpbiBIaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQsIGF0IHRoZSBiZWdpbm5pbmcgb2YKICAgICAgICAgICAgICAgICAgICBzdW1tZXIsIHNlbnQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5RLiBQZWRpdXM8L25hbWU+LCBoaXMgbGlldXRlbmFudCwgdG8gY29uZHVjdCB0aGVtCiAgICAgICAgICAgICAgICAgICAgZnVydGhlciBpbnRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPi4gSGUsIGhpbXNlbGYsIGFzIHNvb24gYXMKICAgICAgICAgICAgICAgICAgICB0aGVyZSBiZWdhbiB0byBiZSBwbGVudHkgb2YgZm9yYWdlLCBjYW1lIHRvIHRoZSBhcm15LiBIZSBnaXZlcyBhIGNvbW1pc3Npb24gdG8KICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDM1Njk3IiByZWc9IiAgK1Nlbm9uZXMgWzYuOTgzLDQ4LjRdIChpbmhhYml0ZWQgcGxhY2UpLCBWb3NnZXMsIExvcnJhaW5lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMzU2OTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzNTY5NyI+U2Vub25lczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gYW5kIHRoZSBvdGhlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAzNTY5NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDM1Njk3Ij5TZW5vbmVzPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB3aG8gd2VyZSBuZWlnaGJvcnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiwgdG8gbGVhcm4gd2hhdCBpcyBnb2luZyBvbiBhbW9uZyB0aGVtIFtpLmUuIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZV08L25hbWU+LCBhbmQgaW5mb3JtIGhpbSBvZiB0aGVzZSBtYXR0ZXJzLiBUaGVzZSBhbGwgdW5pZm9ybWx5CiAgICAgICAgICAgICAgICAgICAgcmVwb3J0ZWQgdGhhdCB0cm9vcHMgd2VyZSBiZWluZyByYWlzZWQsIGFuZCB0aGF0IGFuIGFybXkgd2FzIGJlaW5nIGNvbGxlY3RlZCBpbgogICAgICAgICAgICAgICAgICAgIG9uZSBwbGFjZS4gVGhlbiwgaW5kZWVkLCBoZSB0aG91Z2h0IHRoYXQgaGUgb3VnaHQgbm90IHRvIGhlc2l0YXRlIGFib3V0CiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZyB0b3dhcmQgdGhlbSwgYW5kIGhhdmluZyBwcm92aWRlZCBzdXBwbGllcywgbW92ZXMgaGlzIGNhbXAsIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIGFib3V0IGZpZnRlZW4gZGF5cyBhcnJpdmVzIGF0IHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXMgaGUgYXJyaXZlZCB0aGVyZSB1bmV4cGVjdGVkbHkgYW5kIHNvb25lciB0aGFuIGFueSBvbmUgYW50aWNpcGF0ZWQsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4sIHdobyBhcmUgdGhlIG5lYXJlc3Qgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPltDZWx0aWNdIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT48L25hbWU+LCBzZW50IHRvCiAgICAgICAgICAgICAgICAgICAgaGltIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWNjaXVzPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbnRlYnJvZ2l1czwvbmFtZT4sIFt0d28gb2ZdIHRoZSBwcmluY2lwYWwKICAgICAgICAgICAgICAgICAgICBwZXJzb25zIG9mIHRoZSBzdGF0ZSwgYXMgdGhlaXIgZW1iYXNzYWRvcnM6IHRvIHRlbGwgaGltIHRoYXQgdGhleSBzdXJyZW5kZXJlZAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgYW5kIGFsbCB0aGVpciBwb3NzZXNzaW9ucyB0byB0aGUgcHJvdGVjdGlvbiBhbmQgZGlzcG9zYWwgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlOiBhbmQgdGhhdCB0aGV5IGhhZCBuZWl0aGVyIGNvbWJpbmVkIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+LCBub3IgZW50ZXJlZCBpbnRvIGFueSBjb25mZWRlcmFjeSBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlOiBhbmQgd2VyZSBwcmVwYXJlZCB0byBnaXZlIGhvc3RhZ2VzLAogICAgICAgICAgICAgICAgICAgIHRvIG9iZXkgaGlzIGNvbW1hbmRzLCB0byByZWNlaXZlIGhpbSBpbnRvIHRoZWlyIHRvd25zLCBhbmQgdG8gYWlkIGhpbSB3aXRoIGNvcm4KICAgICAgICAgICAgICAgICAgICBhbmQgb3RoZXIgdGhpbmdzOyB0aGF0IGFsbCB0aGUgcmVzdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+IHdlcmUgaW4gYXJtczsgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCB3aG8gZHdlbGwgb24gdGhpcyBzaWRlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBoYWQgam9pbmVkIHRoZW1zZWx2ZXMgdG8gdGhlbTsgYW5kIHRoYXQgc28gZ3JlYXQgd2FzIHRoZSBpbmZhdHVhdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZW0gYWxsLCB0aGF0IHRoZXkgY291bGQgbm90IHJlc3RyYWluIGV2ZW4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vlc3Npb25lczwvbmFtZT4sIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3duIGJyZXRocmVuIGFuZCBraW5zbWVuLCB3aG8gZW5qb3kgdGhlIHNhbWUgcmlnaHRzLCBhbmQgdGhlLCBzYW1lIGxhd3MsIGFuZCB3aG8KICAgICAgICAgICAgICAgICAgICBoYXZlIG9uZSBnb3Zlcm5tZW50IGFuZCBvbmUgbWFnaXN0cmFjeSBbaW4gY29tbW9uXSB3aXRoIHRoZW1zZWx2ZXMsIGZyb20gdW5pdGluZwogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlbS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCB3aG8gYXJlIHRoZSBuZWFyZXN0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5bQ2VsdGljXSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+PC9uYW1lPiwgc2VudCB0bwogICAgICAgICAgICAgICAgICAgIGhpbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5JY2NpdXM8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFudGVicm9naXVzPC9uYW1lPiwgW3R3byBvZl0gdGhlIHByaW5jaXBhbAogICAgICAgICAgICAgICAgICAgIHBlcnNvbnMgb2YgdGhlIHN0YXRlLCBhcyB0aGVpciBlbWJhc3NhZG9yczogdG8gdGVsbCBoaW0gdGhhdCB0aGV5IHN1cnJlbmRlcmVkCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBhbmQgYWxsIHRoZWlyIHBvc3Nlc3Npb25zIHRvIHRoZSBwcm90ZWN0aW9uIGFuZCBkaXNwb3NhbCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGU6IGFuZCB0aGF0IHRoZXkgaGFkIG5laXRoZXIgY29tYmluZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSByZXN0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4sIG5vciBlbnRlcmVkIGludG8gYW55IGNvbmZlZGVyYWN5IGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGU6IGFuZCB3ZXJlIHByZXBhcmVkIHRvIGdpdmUgaG9zdGFnZXMsCiAgICAgICAgICAgICAgICAgICAgdG8gb2JleSBoaXMgY29tbWFuZHMsIHRvIHJlY2VpdmUgaGltIGludG8gdGhlaXIgdG93bnMsIGFuZCB0byBhaWQgaGltIHdpdGggY29ybgogICAgICAgICAgICAgICAgICAgIGFuZCBvdGhlciB0aGluZ3M7IHRoYXQgYWxsIHRoZSByZXN0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gd2VyZSBpbiBhcm1zOyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIHdobyBkd2VsbCBvbiB0aGlzIHNpZGUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjYxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIj5SaGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGhhZCBqb2luZWQgdGhlbXNlbHZlcyB0byB0aGVtOyBhbmQgdGhhdCBzbyBncmVhdCB3YXMgdGhlIGluZmF0dWF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbSBhbGwsIHRoYXQgdGhleSBjb3VsZCBub3QgcmVzdHJhaW4gZXZlbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXNzaW9uZXM8L25hbWU+LCB0aGVpcgogICAgICAgICAgICAgICAgICAgIG93biBicmV0aHJlbiBhbmQga2luc21lbiwgd2hvIGVuam95IHRoZSBzYW1lIHJpZ2h0cywgYW5kIHRoZSwgc2FtZSBsYXdzLCBhbmQgd2hvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBvbmUgZ292ZXJubWVudCBhbmQgb25lIG1hZ2lzdHJhY3kgW2luIGNvbW1vbl0gd2l0aCB0aGVtc2VsdmVzLCBmcm9tIHVuaXRpbmcKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['2.4'] = ""
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgZW5jb3VyYWdlZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCBhbmQgYWRkcmVzc2VkIHRoZW0gY291cnRlb3VzbHksIG9yZGVyZWQgdGhlIHdob2xlIHNlbmF0ZSB0bwogICAgICAgICAgICAgICAgICAgIGFzc2VtYmxlIGJlZm9yZSBoaW0sIGFuZCB0aGUgY2hpbGRyZW4gb2YgdGhlaXIgY2hpZWYgbWVuIHRvIGJlIGJyb3VnaHQgdG8gaGltIGFzCiAgICAgICAgICAgICAgICAgICAgaG9zdGFnZXM7IGFsbCB3aGljaCBjb21tYW5kcyB0aGV5IHB1bmN0dWFsbHkgcGVyZm9ybWVkIGJ5IHRoZSBkYXkgW2FwcG9pbnRlZF0uCiAgICAgICAgICAgICAgICAgICAgSGUsIGFkZHJlc3NpbmcgaGltc2VsZiB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+LCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgZWFybmVzdG5lc3MsIHBvaW50cyBvdXQgaG93IG11Y2ggaXQgY29uY2VybnMgdGhlIHJlcHVibGljIGFuZCB0aGVpciBjb21tb24KICAgICAgICAgICAgICAgICAgICBzZWN1cml0eSwgdGhhdCB0aGUgZm9yY2VzIG9mIHRoZSBlbmVteSBzaG91bGQgYmUgZGl2aWRlZCwgc28gdGhhdCBpdCBtaWdodCBub3QKICAgICAgICAgICAgICAgICAgICBiZSBuZWNlc3NhcnkgdG8gZW5nYWdlIHdpdGggc28gbGFyZ2UgYSBudW1iZXIgYXQgb25lIHRpbWUuIFtIZSBhc3NlcnRzXSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhpcyBtaWdodCBiZSBhZmZlY3RlZCBpZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gd291bGQgbGVhZCB0aGVpciBmb3JjZXMgaW50bwogICAgICAgICAgICAgICAgICAgIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+LCBhbmQgYmVnaW4gdG8gbGF5IHdhc3RlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY291bnRyeS4gV2l0aCB0aGVzZSBpbnN0cnVjdGlvbnMgaGUgZGlzbWlzc2VkIGhpbSBmcm9tIGhpcyBwcmVzZW5jZS4gQWZ0ZXIgaGUKICAgICAgICAgICAgICAgICAgICBwZXJjZWl2ZWQgdGhhdCBhbGwgdGhlIGZvcmNlcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+LCB3aGljaCBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZCBpbiBvbmUgcGxhY2UsIHdlcmUgYXBwcm9hY2hpbmcgdG93YXJkIGhpbSwgYW5kIGxlYXJuZWQgZnJvbSB0aGUgc2NvdXRzCiAgICAgICAgICAgICAgICAgICAgd2hvbSBoZSBoYWQgc2VudCBvdXQsIGFuZCBbYWxzb10gZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIHRoZW4gbm90IGZhciBkaXN0YW50LCBoZSBoYXN0ZW5lZCB0byBsZWFkIGhpcyBhcm15IG92ZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjIyMyIgcmVnPSJBaXNuZSBbMC40MTYsNDkuNDVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMjIzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIyMjMiPkFpc25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgd2hpY2ggaXMgb24gdGhlIGJvcmRlcnMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5SZW1pPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgcGl0Y2hlZCBoaXMgY2FtcC4gVGhpcyBwb3NpdGlvbiBmb3J0aWZpZWQgb25lIHNpZGUgb2YgaGlzIGNhbXAgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFua3Mgb2YgdGhlIHJpdmVyLCByZW5kZXJlZCB0aGUgY291bnRyeSB3aGljaCBsYXkgaW4gaGlzIHJlYXIgc2VjdXJlIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXksIGFuZCBmdXJ0aGVybW9yZSBpbnN1cmVkIHRoYXQgcHJvdmlzaW9ucyBtaWdodCB3aXRob3V0IGRhbmdlciBiZSBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgdG8gaGltIGJ5IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4gYW5kIHRoZSByZXN0IG9mIHRoZSBzdGF0ZXMuIE92ZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IHJpdmVyIHdhcyBhIGJyaWRnZTogdGhlcmUgaGUgcGxhY2VzIGEgZ3VhcmQ7IGFuZCBvbiB0aGUgb3RoZXIgc2lkZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICByaXZlciBoZSBsZWF2ZXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5RLiBUaXR1cml1cyBTYWJpbnVzPC9uYW1lPiwgaGlzIGxpZXV0ZW5hbnQsCiAgICAgICAgICAgICAgICAgICAgd2l0aCBzaXggY29ob3J0cy4gSGUgb3JkZXJzIGhpbSB0byBmb3J0aWZ5IGEgY2FtcCB3aXRoIGEgcmFtcGFydCB0d2VsdmUgZmVldCBpbgogICAgICAgICAgICAgICAgICAgIGhlaWdodCwgYW5kIGEgdHJlbmNoIGVpZ2h0ZWVuIGZlZXQgaW4gYnJlYWR0aC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgZW5jb3VyYWdlZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCBhbmQgYWRkcmVzc2VkIHRoZW0gY291cnRlb3VzbHksIG9yZGVyZWQgdGhlIHdob2xlIHNlbmF0ZSB0bwogICAgICAgICAgICAgICAgICAgIGFzc2VtYmxlIGJlZm9yZSBoaW0sIGFuZCB0aGUgY2hpbGRyZW4gb2YgdGhlaXIgY2hpZWYgbWVuIHRvIGJlIGJyb3VnaHQgdG8gaGltIGFzCiAgICAgICAgICAgICAgICAgICAgaG9zdGFnZXM7IGFsbCB3aGljaCBjb21tYW5kcyB0aGV5IHB1bmN0dWFsbHkgcGVyZm9ybWVkIGJ5IHRoZSBkYXkgW2FwcG9pbnRlZF0uCiAgICAgICAgICAgICAgICAgICAgSGUsIGFkZHJlc3NpbmcgaGltc2VsZiB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+LCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgZWFybmVzdG5lc3MsIHBvaW50cyBvdXQgaG93IG11Y2ggaXQgY29uY2VybnMgdGhlIHJlcHVibGljIGFuZCB0aGVpciBjb21tb24KICAgICAgICAgICAgICAgICAgICBzZWN1cml0eSwgdGhhdCB0aGUgZm9yY2VzIG9mIHRoZSBlbmVteSBzaG91bGQgYmUgZGl2aWRlZCwgc28gdGhhdCBpdCBtaWdodCBub3QKICAgICAgICAgICAgICAgICAgICBiZSBuZWNlc3NhcnkgdG8gZW5nYWdlIHdpdGggc28gbGFyZ2UgYSBudW1iZXIgYXQgb25lIHRpbWUuIFtIZSBhc3NlcnRzXSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhpcyBtaWdodCBiZSBhZmZlY3RlZCBpZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gd291bGQgbGVhZCB0aGVpciBmb3JjZXMgaW50bwogICAgICAgICAgICAgICAgICAgIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+LCBhbmQgYmVnaW4gdG8gbGF5IHdhc3RlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY291bnRyeS4gV2l0aCB0aGVzZSBpbnN0cnVjdGlvbnMgaGUgZGlzbWlzc2VkIGhpbSBmcm9tIGhpcyBwcmVzZW5jZS4gQWZ0ZXIgaGUKICAgICAgICAgICAgICAgICAgICBwZXJjZWl2ZWQgdGhhdCBhbGwgdGhlIGZvcmNlcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+LCB3aGljaCBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZCBpbiBvbmUgcGxhY2UsIHdlcmUgYXBwcm9hY2hpbmcgdG93YXJkIGhpbSwgYW5kIGxlYXJuZWQgZnJvbSB0aGUgc2NvdXRzCiAgICAgICAgICAgICAgICAgICAgd2hvbSBoZSBoYWQgc2VudCBvdXQsIGFuZCBbYWxzb10gZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIHRoZW4gbm90IGZhciBkaXN0YW50LCBoZSBoYXN0ZW5lZCB0byBsZWFkIGhpcyBhcm15IG92ZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjIyMyIgcmVnPSJBaXNuZSBbMC40MTYsNDkuNDVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMjIzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIyMjMiPkFpc25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgd2hpY2ggaXMgb24gdGhlIGJvcmRlcnMgb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMjIzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIyMjMiPkFpc25lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBwaXRjaGVkIGhpcyBjYW1wLiBUaGlzIHBvc2l0aW9uIGZvcnRpZmllZCBvbmUgc2lkZSBvZiBoaXMgY2FtcCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBiYW5rcyBvZiB0aGUgcml2ZXIsIHJlbmRlcmVkIHRoZSBjb3VudHJ5IHdoaWNoIGxheSBpbiBoaXMgcmVhciBzZWN1cmUgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSwgYW5kIGZ1cnRoZXJtb3JlIGluc3VyZWQgdGhhdCBwcm92aXNpb25zIG1pZ2h0IHdpdGhvdXQgZGFuZ2VyIGJlIGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICB0byBoaW0gYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5SZW1pPC9uYW1lPiBhbmQgdGhlIHJlc3Qgb2YgdGhlIHN0YXRlcy4gT3ZlcgogICAgICAgICAgICAgICAgICAgIHRoYXQgcml2ZXIgd2FzIGEgYnJpZGdlOiB0aGVyZSBoZSBwbGFjZXMgYSBndWFyZDsgYW5kIG9uIHRoZSBvdGhlciBzaWRlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJpdmVyIGhlIGxlYXZlcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlEuIFRpdHVyaXVzIFNhYmludXM8L25hbWU+LCBoaXMgbGlldXRlbmFudCwKICAgICAgICAgICAgICAgICAgICB3aXRoIHNpeCBjb2hvcnRzLiBIZSBvcmRlcnMgaGltIHRvIGZvcnRpZnkgYSBjYW1wIHdpdGggYSByYW1wYXJ0IHR3ZWx2ZSBmZWV0IGluCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0LCBhbmQgYSB0cmVuY2ggZWlnaHRlZW4gZmVldCBpbiBicmVhZHRoLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmUgd2FzIGEgdG93biBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCBieSBuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmlicmF4PC9uYW1lPiwgZWlnaHQgbWlsZXMgZGlzdGFudCBmcm9tIHRoaXMgY2FtcC4gVGhpcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+IG9uIHRoZWlyIG1hcmNoIGJlZ2FuIHRvIGF0dGFjayB3aXRoIGdyZWF0IHZpZ29yLiBbVGhlCiAgICAgICAgICAgICAgICAgICAgYXNzYXVsdF0gd2FzIHdpdGggZGlmZmljdWx0eSBzdXN0YWluZWQgZm9yIHRoYXQgZGF5LiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYXVsczwvbmFtZT4nCiAgICAgICAgICAgICAgICAgICAgbW9kZSBvZiBiZXNpZWdpbmcgaXMgdGhlIHNhbWUgYXMgdGhhdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+OiB3aGVuIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGRyYXduIGEgbGFyZ2UgbnVtYmVyIG9mIG1lbiBhcm91bmQgdGhlIHdob2xlIG9mIHRoZSBmb3J0aWZpY2F0aW9ucywKICAgICAgICAgICAgICAgICAgICBzdG9uZXMgaGF2ZSBiZWd1biB0byBiZSBjYXN0IGFnYWluc3QgdGhlIHdhbGwgb24gYWxsIHNpZGVzLCBhbmQgdGhlIHdhbGwgaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiBzdHJpcHBlZCBvZiBpdHMgZGVmZW5kZXJzLCBbdGhlbl0sIGZvcm1pbmcgYSB0ZXN0dWRvLCB0aGV5IGFkdmFuY2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZ2F0ZXMgYW5kIHVuZGVybWluZSB0aGUgd2FsbDogd2hpY2ggd2FzIGVhc2lseSBlZmZlY3RlZCBvbiB0aGlzIG9jY2FzaW9uOyBmb3IKICAgICAgICAgICAgICAgICAgICB3aGlsZSBzbyBsYXJnZSBhIG51bWJlciB3ZXJlIGNhc3Rpbmcgc3RvbmVzIGFuZCBkYXJ0cywgbm8gb25lIHdhcyBhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgbWFpbnRhaW4gaGlzIHBvc2l0aW9uIHVwb24gdGhlIHdhbGwuIFdoZW4gbmlnaHQgaGFkIHB1dCBhbiBlbmQgdG8gdGhlIGFzc2F1bHQsCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWNjaXVzPC9uYW1lPiwgd2hvIHdhcyB0aGVuIGluIGNvbW1hbmQgb2YgdGhlIHRvd24sIG9uZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCBhIG1hbiBvZiB0aGUgaGlnaGVzdCByYW5rIGFuZCBpbmZsdWVuY2UgYW1vbmcgaGlzCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlLCBhbmQgb25lIG9mIHRob3NlIHdobyBoYWQgY29tZSB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYXMKICAgICAgICAgICAgICAgICAgICBlbWJhc3NhZG9yIFt0byBzdWVdIGZvciBwZWFjZSwgc2VuZHMgbWVzc2VuZ2VycyB0byBoaW0sIFt0byByZXBvcnRdICJUaGF0LAogICAgICAgICAgICAgICAgICAgIHVubGVzcyBhc3Npc3RhbmNlIHdlcmUgc2VudCB0byBoaW0gaGUgY291bGQgbm90IGhvbGQgb3V0IGFueSBsb25nZXIuIiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4sIGJ5IG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaWJyYXg8L25hbWU+LCBlaWdodCBtaWxlcyBkaXN0YW50IGZyb20gdGhpcyBjYW1wLiBUaGlzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gb24gdGhlaXIgbWFyY2ggYmVnYW4gdG8gYXR0YWNrIHdpdGggZ3JlYXQgdmlnb3IuIFtUaGUKICAgICAgICAgICAgICAgICAgICBhc3NhdWx0XSB3YXMgd2l0aCBkaWZmaWN1bHR5IHN1c3RhaW5lZCBmb3IgdGhhdCBkYXkuIFRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPicKICAgICAgICAgICAgICAgICAgICBtb2RlIG9mIGJlc2llZ2luZyBpcyB0aGUgc2FtZSBhcyB0aGF0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT46IHdoZW4gYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgZHJhd24gYSBsYXJnZSBudW1iZXIgb2YgbWVuIGFyb3VuZCB0aGUgd2hvbGUgb2YgdGhlIGZvcnRpZmljYXRpb25zLAogICAgICAgICAgICAgICAgICAgIHN0b25lcyBoYXZlIGJlZ3VuIHRvIGJlIGNhc3QgYWdhaW5zdCB0aGUgd2FsbCBvbiBhbGwgc2lkZXMsIGFuZCB0aGUgd2FsbCBoYXMKICAgICAgICAgICAgICAgICAgICBiZWVuIHN0cmlwcGVkIG9mIGl0cyBkZWZlbmRlcnMsIFt0aGVuXSwgZm9ybWluZyBhIHRlc3R1ZG8sIHRoZXkgYWR2YW5jZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBnYXRlcyBhbmQgdW5kZXJtaW5lIHRoZSB3YWxsOiB3aGljaCB3YXMgZWFzaWx5IGVmZmVjdGVkIG9uIHRoaXMgb2NjYXNpb247IGZvcgogICAgICAgICAgICAgICAgICAgIHdoaWxlIHNvIGxhcmdlIGEgbnVtYmVyIHdlcmUgY2FzdGluZyBzdG9uZXMgYW5kIGRhcnRzLCBubyBvbmUgd2FzIGFibGUgdG8KICAgICAgICAgICAgICAgICAgICBtYWludGFpbiBoaXMgcG9zaXRpb24gdXBvbiB0aGUgd2FsbC4gV2hlbiBuaWdodCBoYWQgcHV0IGFuIGVuZCB0byB0aGUgYXNzYXVsdCwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5JY2NpdXM8L25hbWU+LCB3aG8gd2FzIHRoZW4gaW4gY29tbWFuZCBvZiB0aGUgdG93biwgb25lIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4sIGEgbWFuIG9mIHRoZSBoaWdoZXN0IHJhbmsgYW5kIGluZmx1ZW5jZSBhbW9uZyBoaXMKICAgICAgICAgICAgICAgICAgICBwZW9wbGUsIGFuZCBvbmUgb2YgdGhvc2Ugd2hvIGhhZCBjb21lIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhcwogICAgICAgICAgICAgICAgICAgIGVtYmFzc2Fkb3IgW3RvIHN1ZV0gZm9yIHBlYWNlLCBzZW5kcyBtZXNzZW5nZXJzIHRvIGhpbSwgW3RvIHJlcG9ydF0gIlRoYXQsCiAgICAgICAgICAgICAgICAgICAgdW5sZXNzIGFzc2lzdGFuY2Ugd2VyZSBzZW50IHRvIGhpbSBoZSBjb3VsZCBub3QgaG9sZCBvdXQgYW55IGxvbmdlci4iIDwvdHJhbnNsYXRpb24+"
translation['2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGl0aGVyPC9uYW1lPiwgaW1tZWRpYXRlbHkgYWZ0ZXIgbWlkbmlnaHQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgdXNpbmcgYXMgZ3VpZGVzIHRoZSBzYW1lIHBlcnNvbnMgd2hvIGhhZCBjb21lIHRvIGhpbSBhcwogICAgICAgICAgICAgICAgICAgIG1lc3NlbmdlcnMgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkljY2l1czwvbmFtZT4sIHNlbmRzIHNvbWUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OdW1pZGlhbjwvbmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3JldGFuPC9uYW1lPiBhcmNoZXJzLCBhbmQgc29tZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJhbGVhcmlhbjwvbmFtZT4gc2xpbmdlcnMgYXMgYQogICAgICAgICAgICAgICAgICAgIHJlbGllZiB0byB0aGUgdG93bnMtcGVvcGxlLCBieSB3aG9zZSBhcnJpdmFsIGJvdGggYSBkZXNpcmUgdG8gcmVzaXN0IHRvZ2V0aGVyCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgaG9wZSBvZiBbbWFraW5nIGdvb2QgdGhlaXJdIGRlZmVuc2UsIHdhcyBpbmZ1c2VkIGludG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5SZW1pPC9uYW1lPiwgYW5kLCBmb3IgdGhlIHNhbWUgcmVhc29uLCB0aGUgaG9wZSBvZiBnYWluaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHRvd24sIGFiYW5kb25lZCB0aGUgZW5lbXkuIFRoZXJlZm9yZSwgYWZ0ZXIgc3RheWluZyBhIHNob3J0IHRpbWUgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIHRvd24sIGFuZCBsYXlpbmcgd2FzdGUgdGhlIGNvdW50cnkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5SZW1pPC9uYW1lPiwgd2hlbgogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgdmlsbGFnZXMgYW5kIGJ1aWxkaW5ncyB3aGljaCB0aGV5IGNvdWxkIGFwcHJvYWNoIGhhZCBiZWVuIGJ1cm5lZCwgdGhleQogICAgICAgICAgICAgICAgICAgIGhhc3RlbmVkIHdpdGggYWxsIHRoZWlyIGZvcmNlcyB0byB0aGUgY2FtcCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYW5kIGVuY2FtcGVkIHdpdGhpbiBsZXNzIHRoYW4gdHdvIG1pbGVzIFtvZiBpdF07IGFuZCB0aGVpciBjYW1wLCBhcyB3YXMKICAgICAgICAgICAgICAgICAgICBpbmRpY2F0ZWQgYnkgdGhlIHNtb2tlIGFuZCBmaXJlcywgZXh0ZW5kZWQgbW9yZSB0aGFuIGVpZ2h0IG1pbGVzIGluIGJyZWFkdGguCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhpdGhlcjwvbmFtZT4sIGltbWVkaWF0ZWx5IGFmdGVyIG1pZG5pZ2h0LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHVzaW5nIGFzIGd1aWRlcyB0aGUgc2FtZSBwZXJzb25zIHdobyBoYWQgY29tZSB0byBoaW0gYXMKICAgICAgICAgICAgICAgICAgICBtZXNzZW5nZXJzIGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5JY2NpdXM8L25hbWU+LCBzZW5kcyBzb21lIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TnVtaWRpYW48L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyZXRhbjwvbmFtZT4gYXJjaGVycywgYW5kIHNvbWUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CYWxlYXJpYW48L25hbWU+IHNsaW5nZXJzIGFzIGEKICAgICAgICAgICAgICAgICAgICByZWxpZWYgdG8gdGhlIHRvd25zLXBlb3BsZSwgYnkgd2hvc2UgYXJyaXZhbCBib3RoIGEgZGVzaXJlIHRvIHJlc2lzdCB0b2dldGhlcgogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIGhvcGUgb2YgW21ha2luZyBnb29kIHRoZWlyXSBkZWZlbnNlLCB3YXMgaW5mdXNlZCBpbnRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4sIGFuZCwgZm9yIHRoZSBzYW1lIHJlYXNvbiwgdGhlIGhvcGUgb2YgZ2FpbmluZyB0aGUKICAgICAgICAgICAgICAgICAgICB0b3duLCBhYmFuZG9uZWQgdGhlIGVuZW15LiBUaGVyZWZvcmUsIGFmdGVyIHN0YXlpbmcgYSBzaG9ydCB0aW1lIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICB0b3duLCBhbmQgbGF5aW5nIHdhc3RlIHRoZSBjb3VudHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4sIHdoZW4KICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIHZpbGxhZ2VzIGFuZCBidWlsZGluZ3Mgd2hpY2ggdGhleSBjb3VsZCBhcHByb2FjaCBoYWQgYmVlbiBidXJuZWQsIHRoZXkKICAgICAgICAgICAgICAgICAgICBoYXN0ZW5lZCB3aXRoIGFsbCB0aGVpciBmb3JjZXMgdG8gdGhlIGNhbXAgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGFuZCBlbmNhbXBlZCB3aXRoaW4gbGVzcyB0aGFuIHR3byBtaWxlcyBbb2YgaXRdOyBhbmQgdGhlaXIgY2FtcCwgYXMgd2FzCiAgICAgICAgICAgICAgICAgICAgaW5kaWNhdGVkIGJ5IHRoZSBzbW9rZSBhbmQgZmlyZXMsIGV4dGVuZGVkIG1vcmUgdGhhbiBlaWdodCBtaWxlcyBpbiBicmVhZHRoLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGF0IGZpcnN0IGRldGVybWluZWQgdG8gZGVjbGluZSBhIGJhdHRsZSwgYXMgd2VsbAogICAgICAgICAgICAgICAgICAgIG9uIGFjY291bnQgb2YgdGhlIGdyZWF0IG51bWJlciBvZiB0aGUgZW5lbXkgYXMgdGhlaXIgZGlzdGluZ3Vpc2hlZCByZXB1dGF0aW9uCiAgICAgICAgICAgICAgICAgICAgZm9yIHZhbG9yOiBkYWlseSwgaG93ZXZlciwgaW4gY2F2YWxyeSBhY3Rpb25zLCBoZSBzdHJvdmUgdG8gYXNjZXJ0YWluIGJ5CiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbnQgdHJpYWxzLCB3aGF0IHRoZSBlbmVteSBjb3VsZCBlZmZlY3QgYnkgdGhlaXIgcHJvd2VzcyBhbmQgd2hhdCBvdXIgbWVuCiAgICAgICAgICAgICAgICAgICAgd291bGQgZGFyZS4gV2hlbiBoZSBwZXJjZWl2ZWQgdGhhdCBvdXIgbWVuIHdlcmUgbm90IGluZmVyaW9yLCBhcyB0aGUgcGxhY2UKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIGNhbXAgd2FzIG5hdHVyYWxseSBjb252ZW5pZW50IGFuZCBzdWl0YWJsZSBmb3IgbWFyc2hhbGluZyBhbiBhcm15CiAgICAgICAgICAgICAgICAgICAgKHNpbmNlIHRoZSBoaWxsIHdoZXJlIHRoZSBjYW1wIHdhcyBwaXRjaGVkLCByaXNpbmcgZ3JhZHVhbGx5IGZyb20gdGhlIHBsYWluLAogICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkIGZvcndhcmQgaW4gYnJlYWR0aCBhcyBmYXIgYXMgdGhlIHNwYWNlIHdoaWNoIHRoZSBtYXJzaGFsZWQgYXJteSBjb3VsZAogICAgICAgICAgICAgICAgICAgIG9jY3VweSwgYW5kIGhhZCBzdGVlcCBkZWNsaW5lcyBvZiBpdHMgc2lkZSBpbiBlaXRoZXIgZGlyZWN0aW9uLCBhbmQgZ2VudGx5CiAgICAgICAgICAgICAgICAgICAgc2xvcGluZyBpbiBmcm9udCBncmFkdWFsbHkgc2FuayB0byB0aGUgcGxhaW4pOyBvbiBlaXRoZXIgc2lkZSBvZiB0aGF0IGhpbGwgaGUKICAgICAgICAgICAgICAgICAgICBkcmV3IGEgY3Jvc3MgdHJlbmNoIG9mIGFib3V0IGZvdXIgaHVuZHJlZCBwYWNlcywgYW5kIGF0IHRoZSBleHRyZW1pdGllcyBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgdHJlbmNoIGJ1aWx0IGZvcnRzLCBhbmQgcGxhY2VkIHRoZXJlIGhpcyBtaWxpdGFyeSBlbmdpbmVzLCBsZXN0LCBhZnRlciBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBtYXJzaGFsZWQgaGlzIGFybXksIHRoZSBlbmVteSwgc2luY2UgdGhleSB3ZXJlIHNvIHBvd2VyZnVsIGluIHBvaW50IG9mIG51bWJlciwKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgYWJsZSB0byBzdXJyb3VuZCBoaXMgbWVuIGluIHRoZSBmbGFuaywgd2hpbGUgZmlnaHRpbmcuIEFmdGVyIGRvaW5nCiAgICAgICAgICAgICAgICAgICAgdGhpcywgYW5kIGxlYXZpbmcgaW4gdGhlIGNhbXAgdGhlIHR3byBsZWdpb25zIHdoaWNoIGhlIGhhZCBsYXN0IHJhaXNlZCwgdGhhdCwgaWYKICAgICAgICAgICAgICAgICAgICB0aGVyZSBzaG91bGQgYmUgYW55IG9jY2FzaW9uLCB0aGV5IG1pZ2h0IGJlIGJyb3VnaHQgYXMgYSByZXNlcnZlLCBoZSBmb3JtZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgc2l4IGxlZ2lvbnMgaW4gb3JkZXIgb2YgYmF0dGxlIGJlZm9yZSB0aGUgY2FtcC4gVGhlIGVuZW15LCBsaWtld2lzZSwgaGFkCiAgICAgICAgICAgICAgICAgICAgZHJhd24gdXAgdGhlaXIgZm9yY2VzIHdoaWNoIHRoZXkgaGFkIGJyb3VnaHQgb3V0IG9mIHRoZSBjYW1wLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYXQgZmlyc3QgZGV0ZXJtaW5lZCB0byBkZWNsaW5lIGEgYmF0dGxlLCBhcyB3ZWxsCiAgICAgICAgICAgICAgICAgICAgb24gYWNjb3VudCBvZiB0aGUgZ3JlYXQgbnVtYmVyIG9mIHRoZSBlbmVteSBhcyB0aGVpciBkaXN0aW5ndWlzaGVkIHJlcHV0YXRpb24KICAgICAgICAgICAgICAgICAgICBmb3IgdmFsb3I6IGRhaWx5LCBob3dldmVyLCBpbiBjYXZhbHJ5IGFjdGlvbnMsIGhlIHN0cm92ZSB0byBhc2NlcnRhaW4gYnkKICAgICAgICAgICAgICAgICAgICBmcmVxdWVudCB0cmlhbHMsIHdoYXQgdGhlIGVuZW15IGNvdWxkIGVmZmVjdCBieSB0aGVpciBwcm93ZXNzIGFuZCB3aGF0IG91ciBtZW4KICAgICAgICAgICAgICAgICAgICB3b3VsZCBkYXJlLiBXaGVuIGhlIHBlcmNlaXZlZCB0aGF0IG91ciBtZW4gd2VyZSBub3QgaW5mZXJpb3IsIGFzIHRoZSBwbGFjZQogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB0aGUgY2FtcCB3YXMgbmF0dXJhbGx5IGNvbnZlbmllbnQgYW5kIHN1aXRhYmxlIGZvciBtYXJzaGFsaW5nIGFuIGFybXkKICAgICAgICAgICAgICAgICAgICAoc2luY2UgdGhlIGhpbGwgd2hlcmUgdGhlIGNhbXAgd2FzIHBpdGNoZWQsIHJpc2luZyBncmFkdWFsbHkgZnJvbSB0aGUgcGxhaW4sCiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWQgZm9yd2FyZCBpbiBicmVhZHRoIGFzIGZhciBhcyB0aGUgc3BhY2Ugd2hpY2ggdGhlIG1hcnNoYWxlZCBhcm15IGNvdWxkCiAgICAgICAgICAgICAgICAgICAgb2NjdXB5LCBhbmQgaGFkIHN0ZWVwIGRlY2xpbmVzIG9mIGl0cyBzaWRlIGluIGVpdGhlciBkaXJlY3Rpb24sIGFuZCBnZW50bHkKICAgICAgICAgICAgICAgICAgICBzbG9waW5nIGluIGZyb250IGdyYWR1YWxseSBzYW5rIHRvIHRoZSBwbGFpbik7IG9uIGVpdGhlciBzaWRlIG9mIHRoYXQgaGlsbCBoZQogICAgICAgICAgICAgICAgICAgIGRyZXcgYSBjcm9zcyB0cmVuY2ggb2YgYWJvdXQgZm91ciBodW5kcmVkIHBhY2VzLCBhbmQgYXQgdGhlIGV4dHJlbWl0aWVzIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICB0cmVuY2ggYnVpbHQgZm9ydHMsIGFuZCBwbGFjZWQgdGhlcmUgaGlzIG1pbGl0YXJ5IGVuZ2luZXMsIGxlc3QsIGFmdGVyIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIG1hcnNoYWxlZCBoaXMgYXJteSwgdGhlIGVuZW15LCBzaW5jZSB0aGV5IHdlcmUgc28gcG93ZXJmdWwgaW4gcG9pbnQgb2YgbnVtYmVyLAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBhYmxlIHRvIHN1cnJvdW5kIGhpcyBtZW4gaW4gdGhlIGZsYW5rLCB3aGlsZSBmaWdodGluZy4gQWZ0ZXIgZG9pbmcKICAgICAgICAgICAgICAgICAgICB0aGlzLCBhbmQgbGVhdmluZyBpbiB0aGUgY2FtcCB0aGUgdHdvIGxlZ2lvbnMgd2hpY2ggaGUgaGFkIGxhc3QgcmFpc2VkLCB0aGF0LCBpZgogICAgICAgICAgICAgICAgICAgIHRoZXJlIHNob3VsZCBiZSBhbnkgb2NjYXNpb24sIHRoZXkgbWlnaHQgYmUgYnJvdWdodCBhcyBhIHJlc2VydmUsIGhlIGZvcm1lZCB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBzaXggbGVnaW9ucyBpbiBvcmRlciBvZiBiYXR0bGUgYmVmb3JlIHRoZSBjYW1wLiBUaGUgZW5lbXksIGxpa2V3aXNlLCBoYWQKICAgICAgICAgICAgICAgICAgICBkcmF3biB1cCB0aGVpciBmb3JjZXMgd2hpY2ggdGhleSBoYWQgYnJvdWdodCBvdXQgb2YgdGhlIGNhbXAuIDwvdHJhbnNsYXRpb24+"
translation['2.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmUgd2FzIGEgbWFyc2ggb2Ygbm8gZ3JlYXQgZXh0ZW50IGJldHdlZW4gb3VyIGFybXkgYW5kIHRoYXQgb2YgdGhlIGVuZW15LiBUaGUKICAgICAgICAgICAgICAgICAgICBsYXR0ZXIgd2VyZSB3YWl0aW5nIHRvIHNlZSBpZiBvdXIgbWVuIHdvdWxkIHBhc3MgdGhpczsgb3VyIG1lbiwgYWxzbywgd2VyZSByZWFkeQogICAgICAgICAgICAgICAgICAgIGluIGFybXMgdG8gYXR0YWNrIHRoZW0gd2hpbGUgZGlzb3JkZXJlZCwgaWYgdGhlIGZpcnN0IGF0dGVtcHQgdG8gcGFzcyBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBtYWRlIGJ5IHRoZW0uIEluIHRoZSBtZWFuIHRpbWUgYmF0dGxlIHdhcyBjb21tZW5jZWQgYmV0d2VlbiB0aGUgdHdvIGFybWllcyBieSBhCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSBhY3Rpb24uIFdoZW4gbmVpdGhlciBhcm15IGJlZ2FuIHRvIHBhc3MgdGhlIG1hcnNoLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHVwb24gdGhlIHNraXJtaXNoZXMgb2YgdGhlIGhvcnNlIFtwcm92aW5nXSBmYXZvcmFibGUgdG8gb3VyCiAgICAgICAgICAgICAgICAgICAgbWVuLCBsZWQgYmFjayBoaXMgZm9yY2VzIGludG8gdGhlIGNhbXAuIFRoZSBlbmVteSBpbW1lZGlhdGVseSBoYXN0ZW5lZCBmcm9tIHRoYXQKICAgICAgICAgICAgICAgICAgICBwbGFjZSB0byB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMjIzIiByZWc9IkFpc25lIFswLjQxNiw0OS40NV0gKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BaXNuZTwvbmFtZT4sIHdoaWNoIGl0IGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW47IHN0YXRlZCB3YXMgYmVoaW5kIG91ciBjYW1wLiBGaW5kaW5nIGEgZm9yZCB0aGVyZSwgdGhleSBlbmRlYXZvcmVkIHRvIGxlYWQKICAgICAgICAgICAgICAgICAgICBhIHBhcnQgb2YgdGhlaXIgZm9yY2VzIG92ZXIgaXQ7IHdpdGggdGhlIGRlc2lnbiwgdGhhdCwgaWYgdGhleSBjb3VsZCwgdGhleSBtaWdodAogICAgICAgICAgICAgICAgICAgIGNhcnJ5IGJ5IHN0b3JtIHRoZSBmb3J0IHdoaWNoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+US4gVGl0dXJpdXM8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBsaWV1dGVuYW50LCBjb21tYW5kZWQsIGFuZCBtaWdodCBjdXQgb2ZmIHRoZQogICAgICAgICAgICAgICAgICAgIGJyaWRnZTsgYnV0LCBpZiB0aGV5IGNvdWxkIG5vdCBkbyB0aGF0LCB0aGV5IHNob3VsZCBsYXkgd2FzdGUgdGhlIGxhbmRzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4sIHdoaWNoIHdlcmUgb2YgZ3JlYXQgdXNlIHRvIHVzIGluIGNhcnJ5aW5nCiAgICAgICAgICAgICAgICAgICAgb24gdGhlIHdhciwgYW5kIG1pZ2h0IGhpbmRlciBvdXIgbWVuIGZyb20gZm9yYWdpbmcuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHVwb24gdGhlIHNraXJtaXNoZXMgb2YgdGhlIGhvcnNlIFtwcm92aW5nXSBmYXZvcmFibGUgdG8gb3VyCiAgICAgICAgICAgICAgICAgICAgbWVuLCBsZWQgYmFjayBoaXMgZm9yY2VzIGludG8gdGhlIGNhbXAuIFRoZSBlbmVteSBpbW1lZGlhdGVseSBoYXN0ZW5lZCBmcm9tIHRoYXQKICAgICAgICAgICAgICAgICAgICBwbGFjZSB0byB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMjIzIiByZWc9IkFpc25lIFswLjQxNiw0OS40NV0gKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BaXNuZTwvbmFtZT4sIHdoaWNoIGl0IGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW47IHN0YXRlZCB3YXMgYmVoaW5kIG91ciBjYW1wLiBGaW5kaW5nIGEgZm9yZCB0aGVyZSwgdGhleSBlbmRlYXZvcmVkIHRvIGxlYWQKICAgICAgICAgICAgICAgICAgICBhIHBhcnQgb2YgdGhlaXIgZm9yY2VzIG92ZXIgaXQ7IHdpdGggdGhlIGRlc2lnbiwgdGhhdCwgaWYgdGhleSBjb3VsZCwgdGhleSBtaWdodAogICAgICAgICAgICAgICAgICAgIGNhcnJ5IGJ5IHN0b3JtIHRoZSBmb3J0IHdoaWNoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+US4gVGl0dXJpdXM8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBsaWV1dGVuYW50LCBjb21tYW5kZWQsIGFuZCBtaWdodCBjdXQgb2ZmIHRoZQogICAgICAgICAgICAgICAgICAgIGJyaWRnZTsgYnV0LCBpZiB0aGV5IGNvdWxkIG5vdCBkbyB0aGF0LCB0aGV5IHNob3VsZCBsYXkgd2FzdGUgdGhlIGxhbmRzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4sIHdoaWNoIHdlcmUgb2YgZ3JlYXQgdXNlIHRvIHVzIGluIGNhcnJ5aW5nCiAgICAgICAgICAgICAgICAgICAgb24gdGhlIHdhciwgYW5kIG1pZ2h0IGhpbmRlciBvdXIgbWVuIGZyb20gZm9yYWdpbmcuIDwvdHJhbnNsYXRpb24+"
translation['2.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYmVpbmcgYXBwcml6ZWQgb2YgdGhpcyBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRpdHVyaXVzPC9uYW1lPiwgbGVhZHMgYWxsIGhpcyBjYXZhbHJ5IGFuZCBsaWdodC1hcm1lZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk51bWlkaWFuczwvbmFtZT4sIHNsaW5nZXJzIGFuZCBhcmNoZXJzLCBvdmVyIHRoZSBicmlkZ2UsIGFuZCBoYXN0ZW5zCiAgICAgICAgICAgICAgICAgICAgdG93YXJkIHRoZW0uIFRoZXJlIHdhcyBhIHNldmVyZSBzdHJ1Z2dsZSBpbiB0aGF0IHBsYWNlLiBPdXIgbWVuLCBhdHRhY2tpbmcgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgcml2ZXIgdGhlIGRpc29yZGVyZWQgZW5lbXksIHNsZXcgYSBncmVhdCBwYXJ0IG9mIHRoZW0uIEJ5IHRoZSBpbW1lbnNlIG51bWJlcgogICAgICAgICAgICAgICAgICAgIG9mIHRoZWlyIG1pc3NpbGVzIHRoZXkgZHJvdmUgYmFjayB0aGUgcmVzdCwgd2hvLCBpbiBhIG1vc3QgY291cmFnZW91cyBtYW5uZXIKICAgICAgICAgICAgICAgICAgICB3ZXJlIGF0dGVtcHRpbmcgdG8gcGFzcyBvdmVyIHRoZWlyIGJvZGllcywgYW5kIHN1cnJvdW5kZWQgd2l0aCB0aGVpciBjYXZhbHJ5LAogICAgICAgICAgICAgICAgICAgIGFuZCBjdXQgdG8gcGllY2VzIHRob3NlIHdobyBoYWQgZmlyc3QgY3Jvc3NlZCB0aGUgcml2ZXIuIFRoZSBlbmVteSwgd2hlbiB0aGV5CiAgICAgICAgICAgICAgICAgICAgcGVyY2VpdmVkIHRoYXQgdGhlaXIgaG9wZXMgaGFkIGRlY2VpdmVkIHRoZW0gYm90aCB3aXRoIHJlZ2FyZCB0byB0aGVpciB0YWtpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgdG93biBieSBzdG9ybSBhbmQgYWxzbyB0aGVpciBwYXNzaW5nIHRoZSByaXZlciwgYW5kIGRpZCBub3Qgc2VlIG91ciBtZW4KICAgICAgICAgICAgICAgICAgICBhZHZhbmNlIHRvIGEgbW9yZSBkaXNhZHZhbnRhZ2VvdXMgcGxhY2UgZm9yIHRoZSBwdXJwb3NlIG9mIGZpZ2h0aW5nLCBhbmQgd2hlbgogICAgICAgICAgICAgICAgICAgIHByb3Zpc2lvbnMgYmVnYW4gdG8gZmFpbCB0aGVtLCBoYXZpbmcgY2FsbGVkIGEgY291bmNpbCwgZGV0ZXJtaW5lZCB0aGF0IGl0IHdhcwogICAgICAgICAgICAgICAgICAgIGJlc3QgZm9yIGVhY2ggdG8gcmV0dXJuIHRvIGhpcyBjb3VudHJ5LCBhbmQgcmVzb2x2ZWQgdG8gYXNzZW1ibGUgZnJvbSBhbGwKICAgICAgICAgICAgICAgICAgICBxdWFydGVycyB0byBkZWZlbmQgdGhvc2UgaW50byB3aG9zZSB0ZXJyaXRvcmllcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gc2hvdWxkIGZpcnN0IG1hcmNoIGFuIGFybXk7IHRoYXQgdGhleSBtaWdodCBjb250ZW5kIGluIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3duIHJhdGhlciB0aGFuIGluIGEgZm9yZWlnbiBjb3VudHJ5LCBhbmQgbWlnaHQgZW5qb3kgdGhlIHN0b3JlcyBvZiBwcm92aXNpb24KICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGV5IHBvc3Nlc3NlZCBhdCBob21lLiBUb2dldGhlciB3aXRoIG90aGVyIGNhdXNlcywgdGhpcyBjb25zaWRlcmF0aW9uCiAgICAgICAgICAgICAgICAgICAgYWxzbyBsZWQgdGhlbSB0byB0aGF0IHJlc29sdXRpb24sIHZpejogdGhhdCB0aGV5IGhhZCBsZWFybmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZpdGlhY3VzPC9uYW1lPiBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IHdlcmUgYXBwcm9hY2hpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbG92YWNpPC9uYW1lPi4gQW5kIGl0IHdhcyBpbXBvc3NpYmxlIHRvIHBlcnN1YWRlIHRoZQogICAgICAgICAgICAgICAgICAgIGxhdHRlciB0byBzdGF5IGFueSBsb25nZXIsIG9yIHRvIGRldGVyIHRoZW0gZnJvbSBjb252ZXlpbmcgc3VjY29yIHRvIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIHBlb3BsZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYmVpbmcgYXBwcml6ZWQgb2YgdGhpcyBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRpdHVyaXVzPC9uYW1lPiwgbGVhZHMgYWxsIGhpcyBjYXZhbHJ5IGFuZCBsaWdodC1hcm1lZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk51bWlkaWFuczwvbmFtZT4sIHNsaW5nZXJzIGFuZCBhcmNoZXJzLCBvdmVyIHRoZSBicmlkZ2UsIGFuZCBoYXN0ZW5zCiAgICAgICAgICAgICAgICAgICAgdG93YXJkIHRoZW0uIFRoZXJlIHdhcyBhIHNldmVyZSBzdHJ1Z2dsZSBpbiB0aGF0IHBsYWNlLiBPdXIgbWVuLCBhdHRhY2tpbmcgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgcml2ZXIgdGhlIGRpc29yZGVyZWQgZW5lbXksIHNsZXcgYSBncmVhdCBwYXJ0IG9mIHRoZW0uIEJ5IHRoZSBpbW1lbnNlIG51bWJlcgogICAgICAgICAgICAgICAgICAgIG9mIHRoZWlyIG1pc3NpbGVzIHRoZXkgZHJvdmUgYmFjayB0aGUgcmVzdCwgd2hvLCBpbiBhIG1vc3QgY291cmFnZW91cyBtYW5uZXIKICAgICAgICAgICAgICAgICAgICB3ZXJlIGF0dGVtcHRpbmcgdG8gcGFzcyBvdmVyIHRoZWlyIGJvZGllcywgYW5kIHN1cnJvdW5kZWQgd2l0aCB0aGVpciBjYXZhbHJ5LAogICAgICAgICAgICAgICAgICAgIGFuZCBjdXQgdG8gcGllY2VzIHRob3NlIHdobyBoYWQgZmlyc3QgY3Jvc3NlZCB0aGUgcml2ZXIuIFRoZSBlbmVteSwgd2hlbiB0aGV5CiAgICAgICAgICAgICAgICAgICAgcGVyY2VpdmVkIHRoYXQgdGhlaXIgaG9wZXMgaGFkIGRlY2VpdmVkIHRoZW0gYm90aCB3aXRoIHJlZ2FyZCB0byB0aGVpciB0YWtpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgdG93biBieSBzdG9ybSBhbmQgYWxzbyB0aGVpciBwYXNzaW5nIHRoZSByaXZlciwgYW5kIGRpZCBub3Qgc2VlIG91ciBtZW4KICAgICAgICAgICAgICAgICAgICBhZHZhbmNlIHRvIGEgbW9yZSBkaXNhZHZhbnRhZ2VvdXMgcGxhY2UgZm9yIHRoZSBwdXJwb3NlIG9mIGZpZ2h0aW5nLCBhbmQgd2hlbgogICAgICAgICAgICAgICAgICAgIHByb3Zpc2lvbnMgYmVnYW4gdG8gZmFpbCB0aGVtLCBoYXZpbmcgY2FsbGVkIGEgY291bmNpbCwgZGV0ZXJtaW5lZCB0aGF0IGl0IHdhcwogICAgICAgICAgICAgICAgICAgIGJlc3QgZm9yIGVhY2ggdG8gcmV0dXJuIHRvIGhpcyBjb3VudHJ5LCBhbmQgcmVzb2x2ZWQgdG8gYXNzZW1ibGUgZnJvbSBhbGwKICAgICAgICAgICAgICAgICAgICBxdWFydGVycyB0byBkZWZlbmQgdGhvc2UgaW50byB3aG9zZSB0ZXJyaXRvcmllcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gc2hvdWxkIGZpcnN0IG1hcmNoIGFuIGFybXk7IHRoYXQgdGhleSBtaWdodCBjb250ZW5kIGluIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3duIHJhdGhlciB0aGFuIGluIGEgZm9yZWlnbiBjb3VudHJ5LCBhbmQgbWlnaHQgZW5qb3kgdGhlIHN0b3JlcyBvZiBwcm92aXNpb24KICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGV5IHBvc3Nlc3NlZCBhdCBob21lLiBUb2dldGhlciB3aXRoIG90aGVyIGNhdXNlcywgdGhpcyBjb25zaWRlcmF0aW9uCiAgICAgICAgICAgICAgICAgICAgYWxzbyBsZWQgdGhlbSB0byB0aGF0IHJlc29sdXRpb24sIHZpejogdGhhdCB0aGV5IGhhZCBsZWFybmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZpdGlhY3VzPC9uYW1lPiBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IHdlcmUgYXBwcm9hY2hpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbG92YWNpPC9uYW1lPi4gQW5kIGl0IHdhcyBpbXBvc3NpYmxlIHRvIHBlcnN1YWRlIHRoZQogICAgICAgICAgICAgICAgICAgIGxhdHRlciB0byBzdGF5IGFueSBsb25nZXIsIG9yIHRvIGRldGVyIHRoZW0gZnJvbSBjb252ZXlpbmcgc3VjY29yIHRvIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['2.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoYXQgbWF0dGVyIGJlaW5nIGRldGVybWluZWQgb24sIG1hcmNoaW5nIG91dCBvZiB0aGVpciBjYW1wIGF0IHRoZSBzZWNvbmQgd2F0Y2gsCiAgICAgICAgICAgICAgICAgICAgd2l0aCBncmVhdCBub2lzZSBhbmQgY29uZnVzaW9uLCBpbiBubyBmaXhlZCBvcmRlciwgbm9yIHVuZGVyIGFueSBjb21tYW5kLCBzaW5jZQogICAgICAgICAgICAgICAgICAgIGVhY2ggc291Z2h0IGZvciBoaW1zZWxmIHRoZSBmb3JlbW9zdCBwbGFjZSBpbiB0aGUgam91cm5leSwgYW5kIGhhc3RlbmVkIHRvIHJlYWNoCiAgICAgICAgICAgICAgICAgICAgaG9tZSwgdGhleSBtYWRlIHRoZWlyIGRlcGFydHVyZSBhcHBlYXIgdmVyeSBsaWtlIGEgZmxpZ2h0LiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGltbWVkaWF0ZWx5IGxlYXJuaW5nIHRoaXMgdGhyb3VnaCBoaXMgc2NvdXRzLCBbYnV0XSBmZWFyaW5nCiAgICAgICAgICAgICAgICAgICAgYW4gYW1idXNjYWRlLCBiZWNhdXNlIGhlIGhhZCBub3QgeWV0IGRpc2NvdmVyZWQgZm9yIHdoYXQgcmVhc29uIHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgIGRlcGFydGluZywga2VwdCBoaXMgYXJteSBhbmQgY2F2YWxyeSB3aXRoaW4gdGhlIGNhbXAuIEF0IGRheWJyZWFrLCB0aGUKICAgICAgICAgICAgICAgICAgICBpbnRlbGxpZ2VuY2UgaGF2aW5nIGJlZW4gY29uZmlybWVkIGJ5IHRoZSBzY291dHMsIGhlIHNlbnQgZm9yd2FyZCBoaXMgY2F2YWxyeSB0bwogICAgICAgICAgICAgICAgICAgIGhhcmFzcyB0aGVpciByZWFyOyBhbmQgZ2F2ZSB0aGUgY29tbWFuZCBvZiBpdCB0byB0d28gb2YgaGlzIGxpZXV0ZW5hbnRzLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlEuIFBlZGl1czwvbmFtZT4sIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkwuIEF1cnVuY3VsZWl1cwogICAgICAgICAgICAgICAgICAgICAgICBDb3R0YTwvbmFtZT4uIEhlIG9yZGVyZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5ULiBMYWJpZW51czwvbmFtZT4sIGFub3RoZXIgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgbGlldXRlbmFudHMsIHRvIGZvbGxvdyB0aGVtIGNsb3NlbHkgd2l0aCB0aHJlZSBsZWdpb25zLiBUaGVzZSwgYXR0YWNraW5nCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcmVhciwgYW5kIHB1cnN1aW5nIHRoZW0gZm9yIG1hbnkgbWlsZXMsIHNsZXcgYSBncmVhdCBudW1iZXIgb2YgdGhlbSBhcwogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBmbGVlaW5nOyB3aGlsZSB0aG9zZSBpbiB0aGUgcmVhciB3aXRoIHdob20gdGhleSBoYWQgY29tZSB1cCwgaGFsdGVkLAogICAgICAgICAgICAgICAgICAgIGFuZCBicmF2ZWx5IHN1c3RhaW5lZCB0aGUgYXR0YWNrIG9mIG91ciBzb2xkaWVyczsgdGhlIHZhbiwgYmVjYXVzZSB0aGV5IGFwcGVhcmVkCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgcmVtb3ZlZCBmcm9tIGRhbmdlciwgYW5kIHdlcmUgbm90IHJlc3RyYWluZWQgYnkgYW55IG5lY2Vzc2l0eSBvciBjb21tYW5kLAogICAgICAgICAgICAgICAgICAgIGFzIHNvb24gYXMgdGhlIG5vaXNlIHdhcyBoZWFyZCwgYnJva2UgdGhlaXIgcmFua3MsIGFuZCwgdG8gYSBtYW4sIHJlc3RlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHNhZmV0eSBpbiBmbGlnaHQuIFRodXMgd2l0aG91dCBhbnkgcmlzayBbdG8gdGhlbXNlbHZlc10gb3VyIG1lbiBraWxsZWQgYXMgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBhIG51bWJlciBvZiB0aGVtIGFzIHRoZSBsZW5ndGggb2YgdGhlIGRheSBhbGxvd2VkOyBhbmQgYXQgc3Vuc2V0IGRlc2lzdGVkIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgcHVyc3VpdCwgYW5kIGJldG9vayB0aGVtc2VsdmVzIGludG8gdGhlIGNhbXAsIGFzIHRoZXkgaGFkIGJlZW4gY29tbWFuZGVkLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBpbW1lZGlhdGVseSBsZWFybmluZyB0aGlzIHRocm91Z2ggaGlzIHNjb3V0cywgW2J1dF0gZmVhcmluZwogICAgICAgICAgICAgICAgICAgIGFuIGFtYnVzY2FkZSwgYmVjYXVzZSBoZSBoYWQgbm90IHlldCBkaXNjb3ZlcmVkIGZvciB3aGF0IHJlYXNvbiB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBkZXBhcnRpbmcsIGtlcHQgaGlzIGFybXkgYW5kIGNhdmFscnkgd2l0aGluIHRoZSBjYW1wLiBBdCBkYXlicmVhaywgdGhlCiAgICAgICAgICAgICAgICAgICAgaW50ZWxsaWdlbmNlIGhhdmluZyBiZWVuIGNvbmZpcm1lZCBieSB0aGUgc2NvdXRzLCBoZSBzZW50IGZvcndhcmQgaGlzIGNhdmFscnkgdG8KICAgICAgICAgICAgICAgICAgICBoYXJhc3MgdGhlaXIgcmVhcjsgYW5kIGdhdmUgdGhlIGNvbW1hbmQgb2YgaXQgdG8gdHdvIG9mIGhpcyBsaWV1dGVuYW50cywgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5RLiBQZWRpdXM8L25hbWU+LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MLiBBdXJ1bmN1bGVpdXMKICAgICAgICAgICAgICAgICAgICAgICAgQ290dGE8L25hbWU+LiBIZSBvcmRlcmVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+VC4gTGFiaWVudXM8L25hbWU+LCBhbm90aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGxpZXV0ZW5hbnRzLCB0byBmb2xsb3cgdGhlbSBjbG9zZWx5IHdpdGggdGhyZWUgbGVnaW9ucy4gVGhlc2UsIGF0dGFja2luZwogICAgICAgICAgICAgICAgICAgIHRoZWlyIHJlYXIsIGFuZCBwdXJzdWluZyB0aGVtIGZvciBtYW55IG1pbGVzLCBzbGV3IGEgZ3JlYXQgbnVtYmVyIG9mIHRoZW0gYXMKICAgICAgICAgICAgICAgICAgICB0aGV5IHdlcmUgZmxlZWluZzsgd2hpbGUgdGhvc2UgaW4gdGhlIHJlYXIgd2l0aCB3aG9tIHRoZXkgaGFkIGNvbWUgdXAsIGhhbHRlZCwKICAgICAgICAgICAgICAgICAgICBhbmQgYnJhdmVseSBzdXN0YWluZWQgdGhlIGF0dGFjayBvZiBvdXIgc29sZGllcnM7IHRoZSB2YW4sIGJlY2F1c2UgdGhleSBhcHBlYXJlZAogICAgICAgICAgICAgICAgICAgIHRvIGJlIHJlbW92ZWQgZnJvbSBkYW5nZXIsIGFuZCB3ZXJlIG5vdCByZXN0cmFpbmVkIGJ5IGFueSBuZWNlc3NpdHkgb3IgY29tbWFuZCwKICAgICAgICAgICAgICAgICAgICBhcyBzb29uIGFzIHRoZSBub2lzZSB3YXMgaGVhcmQsIGJyb2tlIHRoZWlyIHJhbmtzLCBhbmQsIHRvIGEgbWFuLCByZXN0ZWQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBzYWZldHkgaW4gZmxpZ2h0LiBUaHVzIHdpdGhvdXQgYW55IHJpc2sgW3RvIHRoZW1zZWx2ZXNdIG91ciBtZW4ga2lsbGVkIGFzIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgYSBudW1iZXIgb2YgdGhlbSBhcyB0aGUgbGVuZ3RoIG9mIHRoZSBkYXkgYWxsb3dlZDsgYW5kIGF0IHN1bnNldCBkZXNpc3RlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIHB1cnN1aXQsIGFuZCBiZXRvb2sgdGhlbXNlbHZlcyBpbnRvIHRoZSBjYW1wLCBhcyB0aGV5IGhhZCBiZWVuIGNvbW1hbmRlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBkYXkgZm9sbG93aW5nLCBiZWZvcmUgdGhlIGVuZW15IGNvdWxkIHJlY292ZXIgZnJvbSB0aGVpciB0ZXJyb3IgYW5kCiAgICAgICAgICAgICAgICAgICAgZmxpZ2h0LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGVkIGhpcyBhcm15IGludG8gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXNzaW9uZXM8L25hbWU+LCB3aGljaCBhcmUgbmV4dCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCBhbmQgaGF2aW5nIGFjY29tcGxpc2hlZCBhIGxvbmcgbWFyY2gsIGhhc3RlbnMgdG8gdGhlIHRvd24KICAgICAgICAgICAgICAgICAgICBuYW1lZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQwNDIiIHJlZz0iICArSXNhY2NlYSBbMjguMzE2LDQ1LjI4M10gKGluaGFiaXRlZCBwbGFjZSksIFR1bGNlYSwgUm9tYW5pYSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDA0MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0MDQyIj5Ob3Zpb2R1bnVtPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPi4gSGF2aW5nIGF0dGVtcHRlZCB0byB0YWtlIGl0IGJ5IHN0b3JtIG9uIGhpcyBtYXJjaCwgYmVjYXVzZSBoZSBoZWFyZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgd2FzIGRlc3RpdHV0ZSBvZiBbc3VmZmljaWVudF0gZGVmZW5kZXJzLCBoZSB3YXMgbm90IGFibGUgdG8gY2FycnkgaXQgYnkKICAgICAgICAgICAgICAgICAgICBhc3NhdWx0LCBvbiBhY2NvdW50IG9mIHRoZSBicmVhZHRoIG9mIHRoZSBkaXRjaCBhbmQgdGhlIGhlaWdodCBvZiB0aGUgd2FsbCwKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggZmV3IHdlcmUgZGVmZW5kaW5nIGl0LiBUaGVyZWZvcmUsIGhhdmluZyBmb3J0aWZpZWQgdGhlIGNhbXAsIGhlIGJlZ2FuIHRvCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgdXAgdGhlIHZpbmVhZSwgYW5kIHRvIHByb3ZpZGUgd2hhdGV2ZXIgdGhpbmdzIHdlcmUgbmVjZXNzYXJ5IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBzdG9ybS4gSW4gdGhlIG1lYW4gdGltZSB0aGUgd2hvbGUgYm9keSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWVzc2lvbmVzPC9uYW1lPiwgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB0aGVpciBmbGlnaHQsIGNhbWUgdGhlIG5leHQgbmlnaHQgaW50byB0aGUgdG93bi4gVGhlIHZpbmVhZSBoYXZpbmcgYmVlbiBxdWlja2x5CiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCB1cCBhZ2FpbnN0IHRoZSB0b3duLCBhIG1vdW5kIHRocm93biB1cCwgYW5kIHRvd2VycyBidWlsdCwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sIGFtYXplZCBieSB0aGUgZ3JlYXRuZXNzIG9mIHRoZSB3b3Jrcywgc3VjaCBhcwogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIG5laXRoZXIgc2VlbiBub3IgaGVhcmQgb2YgYmVmb3JlLCBhbmQgc3RydWNrIGFsc28gYnkgdGhlIGRpc3BhdGNoIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LCBzZW5kIGVtYmFzc2Fkb3JzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiByZXNwZWN0aW5nIGEgc3VycmVuZGVyLCBhbmQgc3VjY2VlZCBpbiBjb25zZXF1ZW5jZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+IHJlcXVlc3RpbmcgdGhhdCB0aGV5IFt0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWVzc2lvbmVzXTwvbmFtZT4gbWlnaHQgYmUgc3BhcmVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGxlZCBoaXMgYXJteSBpbnRvIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWVzc2lvbmVzPC9uYW1lPiwgd2hpY2ggYXJlIG5leHQgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5SZW1pPC9uYW1lPiwgYW5kIGhhdmluZyBhY2NvbXBsaXNoZWQgYSBsb25nIG1hcmNoLCBoYXN0ZW5zIHRvIHRoZSB0b3duCiAgICAgICAgICAgICAgICAgICAgbmFtZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0MDQyIiByZWc9IiAgK0lzYWNjZWEgWzI4LjMxNiw0NS4yODNdIChpbmhhYml0ZWQgcGxhY2UpLCBUdWxjZWEsIFJvbWFuaWEsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDQwNDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDA0MiI+Tm92aW9kdW51bTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4uIEhhdmluZyBhdHRlbXB0ZWQgdG8gdGFrZSBpdCBieSBzdG9ybSBvbiBoaXMgbWFyY2gsIGJlY2F1c2UgaGUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IHdhcyBkZXN0aXR1dGUgb2YgW3N1ZmZpY2llbnRdIGRlZmVuZGVycywgaGUgd2FzIG5vdCBhYmxlIHRvIGNhcnJ5IGl0IGJ5CiAgICAgICAgICAgICAgICAgICAgYXNzYXVsdCwgb24gYWNjb3VudCBvZiB0aGUgYnJlYWR0aCBvZiB0aGUgZGl0Y2ggYW5kIHRoZSBoZWlnaHQgb2YgdGhlIHdhbGwsCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGZldyB3ZXJlIGRlZmVuZGluZyBpdC4gVGhlcmVmb3JlLCBoYXZpbmcgZm9ydGlmaWVkIHRoZSBjYW1wLCBoZSBiZWdhbiB0bwogICAgICAgICAgICAgICAgICAgIGJyaW5nIHVwIHRoZSB2aW5lYWUsIGFuZCB0byBwcm92aWRlIHdoYXRldmVyIHRoaW5ncyB3ZXJlIG5lY2Vzc2FyeSBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgc3Rvcm0uIEluIHRoZSBtZWFuIHRpbWUgdGhlIHdob2xlIGJvZHkgb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0MDQyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQwNDIiPk5vdmlvZHVudW08L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXNzaW9uZXM8L25hbWU+LCBhZnRlcgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGZsaWdodCwgY2FtZSB0aGUgbmV4dCBuaWdodCBpbnRvIHRoZSB0b3duLiBUaGUgdmluZWFlIGhhdmluZyBiZWVuIHF1aWNrbHkKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHVwIGFnYWluc3QgdGhlIHRvd24sIGEgbW91bmQgdGhyb3duIHVwLCBhbmQgdG93ZXJzIGJ1aWx0LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgYW1hemVkIGJ5IHRoZSBncmVhdG5lc3Mgb2YgdGhlIHdvcmtzLCBzdWNoIGFzCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgbmVpdGhlciBzZWVuIG5vciBoZWFyZCBvZiBiZWZvcmUsIGFuZCBzdHJ1Y2sgYWxzbyBieSB0aGUgZGlzcGF0Y2ggb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIHNlbmQgZW1iYXNzYWRvcnMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHJlc3BlY3RpbmcgYSBzdXJyZW5kZXIsIGFuZCBzdWNjZWVkIGluIGNvbnNlcXVlbmNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4gcmVxdWVzdGluZyB0aGF0IHRoZXkgW3RoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXNzaW9uZXNdPC9uYW1lPiBtaWdodCBiZSBzcGFyZWQuIDwvdHJhbnNsYXRpb24+"
translation['2.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIHJlY2VpdmVkIGFzIGhvc3RhZ2VzIHRoZSBmaXJzdCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhdGUsIGFuZCBldmVuIHRoZSB0d28gc29ucyBvZiBraW5nIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsYmE8L25hbWU+IGhpbXNlbGY7IGFuZCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgYXJtcyBpbiB0aGUgdG93biBoYXZpbmcgYmVlbiBkZWxpdmVyZWQgdXAsIGFkbWl0dGVkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXNzaW9uZXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgdG8gYSBzdXJyZW5kZXIsIGFuZCBsZWQgaGlzIGFybXkgYWdhaW5zdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+LiBXaG8sIHdoZW4KICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCBjb252ZXllZCB0aGVtc2VsdmVzIGFuZCBhbGwgdGhlaXIgcG9zc2Vzc2lvbnMgaW50byB0aGUgdG93biBHYWxsZWQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcmF0dXNwYW50aXVtPC9uYW1lPiwgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3aXRoIGhpcwogICAgICAgICAgICAgICAgICAgIGFybXkgd2FzIGFib3V0IGZpdmUgbWlsZXMgZGlzdGFudCBmcm9tIHRoYXQgdG93biwgYWxsIHRoZSBvbGQgbWVuLCBnb2luZyBvdXQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgdG93biwgYmVnYW4gdG8gc3RyZXRjaCBvdXQgdGhlaXIgaGFuZHMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGFuZCB0byBpbnRpbWF0ZSBieSB0aGVpciB2b2ljZSB0aGF0IHRoZXkgd291bGQgdGhyb3cgdGhlbXNlbHZlcyBvbiBoaXMKICAgICAgICAgICAgICAgICAgICBwcm90ZWN0aW9uIGFuZCBwb3dlciwgbm9yIHdvdWxkIGNvbnRlbmQgaW4gYXJtcyBhZ2FpbnN0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZS4gSW4gbGlrZSBtYW5uZXIsIHdoZW4gaGUgaGFkIGNvbWUgdXAgdG8gdGhlIHRvd24sIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZXJlIHBpdGNoZWQgaGlzIGNhbXAsIHRoZSBib3lzIGFuZCB0aGUgd29tZW4gZnJvbSB0aGUgd2FsbCwgd2l0aCBvdXRzdHJldGNoZWQKICAgICAgICAgICAgICAgICAgICBoYW5kcywgYWZ0ZXIgdGhlaXIgY3VzdG9tLCBiZWdnZWQgcGVhY2UgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhhdmluZyByZWNlaXZlZCBhcyBob3N0YWdlcyB0aGUgZmlyc3QgbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHN0YXRlLCBhbmQgZXZlbiB0aGUgdHdvIHNvbnMgb2Yga2luZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGJhPC9uYW1lPiBoaW1zZWxmOyBhbmQgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGFybXMgaW4gdGhlIHRvd24gaGF2aW5nIGJlZW4gZGVsaXZlcmVkIHVwLCBhZG1pdHRlZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWVzc2lvbmVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHRvIGEgc3VycmVuZGVyLCBhbmQgbGVkIGhpcyBhcm15IGFnYWluc3QgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbG92YWNpPC9uYW1lPi4gV2hvLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgY29udmV5ZWQgdGhlbXNlbHZlcyBhbmQgYWxsIHRoZWlyIHBvc3Nlc3Npb25zIGludG8gdGhlIHRvd24gR2FsbGVkCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJhdHVzcGFudGl1bTwvbmFtZT4sIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2l0aCBoaXMKICAgICAgICAgICAgICAgICAgICBhcm15IHdhcyBhYm91dCBmaXZlIG1pbGVzIGRpc3RhbnQgZnJvbSB0aGF0IHRvd24sIGFsbCB0aGUgb2xkIG1lbiwgZ29pbmcgb3V0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHRvd24sIGJlZ2FuIHRvIHN0cmV0Y2ggb3V0IHRoZWlyIGhhbmRzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBhbmQgdG8gaW50aW1hdGUgYnkgdGhlaXIgdm9pY2UgdGhhdCB0aGV5IHdvdWxkIHRocm93IHRoZW1zZWx2ZXMgb24gaGlzCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGlvbiBhbmQgcG93ZXIsIG5vciB3b3VsZCBjb250ZW5kIGluIGFybXMgYWdhaW5zdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUuIEluIGxpa2UgbWFubmVyLCB3aGVuIGhlIGhhZCBjb21lIHVwIHRvIHRoZSB0b3duLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBwaXRjaGVkIGhpcyBjYW1wLCB0aGUgYm95cyBhbmQgdGhlIHdvbWVuIGZyb20gdGhlIHdhbGwsIHdpdGggb3V0c3RyZXRjaGVkCiAgICAgICAgICAgICAgICAgICAgaGFuZHMsIGFmdGVyIHRoZWlyIGN1c3RvbSwgYmVnZ2VkIHBlYWNlIGZyb20gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['2.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB0aGVzZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+IHBsZWFkcyAoZm9yIGFmdGVyIHRoZSBkZXBhcnR1cmUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiwgaGF2aW5nIGRpc21pc3NlZCB0aGUgdHJvb3BzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgcmV0dXJuZWQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+KS4gIlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBoYWQgYXQgYWxsIHRpbWVzIGJlZW4gaW4gdGhlIGFsbGlhbmNlIGFuZCBmcmllbmRzaGlwIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVhbjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBzdGF0ZTsgdGhhdCB0aGV5IGhhZCByZXZvbHRlZCBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBhbmQgbWFkZSB3YXIgdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGJlaW5nIHVyZ2VkIHRoZXJldG8gYnkgdGhlaXIKICAgICAgICAgICAgICAgICAgICBub2JsZXMsIHdobyBzYWlkIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCByZWR1Y2VkIHRvIHNsYXZlcnkgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCB3ZXJlIHN1ZmZlcmluZyBldmVyeSBpbmRpZ25pdHkgYW5kIGluc3VsdC4gVGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgd2hvIGhhZCBiZWVuIHRoZSBsZWFkZXJzIG9mIHRoYXQgcGxvdCwgYmVjYXVzZSB0aGV5IHBlcmNlaXZlZCBob3cgZ3JlYXQgYQogICAgICAgICAgICAgICAgICAgIGNhbGFtaXR5IHRoZXkgaGFkIGJyb3VnaHQgdXBvbiB0aGUgc3RhdGUsIGhhZCBmbGVkIGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPi4gVGhhdCBub3Qgb25seSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+LCBidXQgYWxzbyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIGVudHJlYXRlZCBoaW0gdG8gdXNlIGhpcyBbYWNjdXN0b21lZF0gY2xlbWVuY3kgYW5kCiAgICAgICAgICAgICAgICAgICAgbGVuaXR5IHRvd2FyZCB0aGVtIFt0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2ldPC9uYW1lPjogd2hpY2ggaWYgaGUgZGlkLCBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGluY3JlYXNlIHRoZSBpbmZsdWVuY2Ugb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IGFtb25nIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+LCBieSB3aG9zZSBzdWNjb3IgYW5kIHJlc291cmNlcyB0aGV5IGhhZCBiZWVuIGFjY3VzdG9tZWQKICAgICAgICAgICAgICAgICAgICB0byBzdXBwb3J0IHRoZW1zZWx2ZXMgd2hlbmV2ZXIgYW55IHdhcnMgb2NjdXJyZWQuIiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZpdGlhY3VzPC9uYW1lPiBwbGVhZHMgKGZvciBhZnRlciB0aGUgZGVwYXJ0dXJlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4sIGhhdmluZyBkaXNtaXNzZWQgdGhlIHRyb29wcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIHJldHVybmVkIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPikuICJUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgaGFkIGF0IGFsbCB0aW1lcyBiZWVuIGluIHRoZSBhbGxpYW5jZSBhbmQgZnJpZW5kc2hpcCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgc3RhdGU7IHRoYXQgdGhleSBoYWQgcmV2b2x0ZWQgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gYW5kIG1hZGUgd2FyIHVwb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLCBiZWluZyB1cmdlZCB0aGVyZXRvIGJ5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbm9ibGVzLCB3aG8gc2FpZCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgcmVkdWNlZCB0byBzbGF2ZXJ5IGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgd2VyZSBzdWZmZXJpbmcgZXZlcnkgaW5kaWduaXR5IGFuZCBpbnN1bHQuIFRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IHdobyBoYWQgYmVlbiB0aGUgbGVhZGVycyBvZiB0aGF0IHBsb3QsIGJlY2F1c2UgdGhleSBwZXJjZWl2ZWQgaG93IGdyZWF0IGEKICAgICAgICAgICAgICAgICAgICBjYWxhbWl0eSB0aGV5IGhhZCBicm91Z2h0IHVwb24gdGhlIHN0YXRlLCBoYWQgZmxlZCBpbnRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODY1MyIgcmVnPSJHcmVhdCBCcml0YWluIChpc2xhbmQpLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QnJpdGFpbjwvbmFtZT4uIFRoYXQgbm90IG9ubHkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbG92YWNpPC9uYW1lPiwgYnV0IGFsc28gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCBlbnRyZWF0ZWQgaGltIHRvIHVzZSBoaXMgW2FjY3VzdG9tZWRdIGNsZW1lbmN5IGFuZAogICAgICAgICAgICAgICAgICAgIGxlbml0eSB0b3dhcmQgdGhlbSBbdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbG92YWNpXTwvbmFtZT46IHdoaWNoIGlmIGhlIGRpZCwgaGUgd291bGQKICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZSB0aGUgaW5mbHVlbmNlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBhbW9uZyBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiwgYnkgd2hvc2Ugc3VjY29yIGFuZCByZXNvdXJjZXMgdGhleSBoYWQgYmVlbiBhY2N1c3RvbWVkCiAgICAgICAgICAgICAgICAgICAgdG8gc3VwcG9ydCB0aGVtc2VsdmVzIHdoZW5ldmVyIGFueSB3YXJzIG9jY3VycmVkLiIgPC90cmFuc2xhdGlvbj4="
translation['2.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBzYWlkIHRoYXQgb24gYWNjb3VudCBvZiBoaXMgcmVzcGVjdCBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZpdGlhY3VzPC9uYW1lPiBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWFuczwvbmFtZT4sIGhlIHdvdWxkIHJlY2VpdmUgdGhlbQogICAgICAgICAgICAgICAgICAgIGludG8gaGlzIHByb3RlY3Rpb24sIGFuZCB3b3VsZCBzcGFyZSB0aGVtOyBidXQsIGJlY2F1c2UgdGhlIHN0YXRlIHdhcyBvZiBncmVhdAogICAgICAgICAgICAgICAgICAgIGluZmx1ZW5jZSBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+LCBhbmQgcHJlLWVtaW5lbnQgaW4gdGhlIG51bWJlciBvZiBpdHMKICAgICAgICAgICAgICAgICAgICBwb3B1bGF0aW9uLCBoZSBkZW1hbmRlZCA2MDAgaG9zdGFnZXMuIFdoZW4gdGhlc2Ugd2VyZSBkZWxpdmVyZWQsIGFuZCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgYXJtcyBpbiB0aGUgdG93biBjb2xsZWN0ZWQsIGhlIHdlbnQgZnJvbSB0aGF0IHBsYWNlIGludG8gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlhbmk8L25hbWU+LCB3aG8sIHdpdGhvdXQgZGVsYXksIHN1cnJlbmRlcmVkIHRoZW1zZWx2ZXMgYW5kIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHBvc3Nlc3Npb25zLiBVcG9uIHRoZWlyIHRlcnJpdG9yaWVzIGJvcmRlcmVkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgY29uY2VybmluZyB3aG9zZSBjaGFyYWN0ZXIgYW5kIGN1c3RvbXMgd2hlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBpbnF1aXJlZCBoZSByZWNlaXZlZCB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uOi1UaGF0IHRoZXJlIHdhcyBubyBhY2Nlc3MgZm9yCiAgICAgICAgICAgICAgICAgICAgbWVyY2hhbnRzIHRvIHRoZW07IHRoYXQgdGhleSBzdWZmZXJlZCBubyB3aW5lIGFuZCBvdGhlciB0aGluZ3MgdGVuZGluZyB0byBsdXh1cnkKICAgICAgICAgICAgICAgICAgICB0byBiZSBpbXBvcnRlZDsgYmVjYXVzZSwgdGhleSB0aG91Z2h0IHRoYXQgYnkgdGhlaXIgdXNlIHRoZSBtaW5kIGlzIGVuZXJ2YXRlZAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgY291cmFnZSBpbXBhaXJlZDogdGhhdCB0aGV5IHdlcmUgYSBzYXZhZ2UgcGVvcGxlIGFuZCBvZiBncmVhdCBicmF2ZXJ5OgogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSB1cGJyYWlkZWQgYW5kIGNvbmRlbW5lZCB0aGUgcmVzdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+IHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBzdXJyZW5kZXJlZCB0aGVtc2VsdmVzIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBhbmQgdGhyb3duCiAgICAgICAgICAgICAgICAgICAgYXNpZGUgdGhlaXIgbmF0aW9uYWwgY291cmFnZTogdGhhdCB0aGV5IG9wZW5seSBkZWNsYXJlZCB0aGV5IHdvdWxkIG5laXRoZXIgc2VuZAogICAgICAgICAgICAgICAgICAgIGVtYmFzc2Fkb3JzLCBub3IgYWNjZXB0IGFueSBjb25kaXRpb24gb2YgcGVhY2UuIiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHNhaWQgdGhhdCBvbiBhY2NvdW50IG9mIGhpcyByZXNwZWN0IGZvcgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW5zPC9uYW1lPiwgaGUgd291bGQgcmVjZWl2ZSB0aGVtCiAgICAgICAgICAgICAgICAgICAgaW50byBoaXMgcHJvdGVjdGlvbiwgYW5kIHdvdWxkIHNwYXJlIHRoZW07IGJ1dCwgYmVjYXVzZSB0aGUgc3RhdGUgd2FzIG9mIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgaW5mbHVlbmNlIGFtb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4sIGFuZCBwcmUtZW1pbmVudCBpbiB0aGUgbnVtYmVyIG9mIGl0cwogICAgICAgICAgICAgICAgICAgIHBvcHVsYXRpb24sIGhlIGRlbWFuZGVkIDYwMCBob3N0YWdlcy4gV2hlbiB0aGVzZSB3ZXJlIGRlbGl2ZXJlZCwgYW5kIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBhcm1zIGluIHRoZSB0b3duIGNvbGxlY3RlZCwgaGUgd2VudCBmcm9tIHRoYXQgcGxhY2UgaW50byB0aGUgdGVycml0b3JpZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaWFuaTwvbmFtZT4sIHdobywgd2l0aG91dCBkZWxheSwgc3VycmVuZGVyZWQgdGhlbXNlbHZlcyBhbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcG9zc2Vzc2lvbnMuIFVwb24gdGhlaXIgdGVycml0b3JpZXMgYm9yZGVyZWQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBjb25jZXJuaW5nIHdob3NlIGNoYXJhY3RlciBhbmQgY3VzdG9tcyB3aGVuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGlucXVpcmVkIGhlIHJlY2VpdmVkIHRoZSBmb2xsb3dpbmcgaW5mb3JtYXRpb246LVRoYXQgdGhlcmUgd2FzIG5vIGFjY2VzcyBmb3IKICAgICAgICAgICAgICAgICAgICBtZXJjaGFudHMgdG8gdGhlbTsgdGhhdCB0aGV5IHN1ZmZlcmVkIG5vIHdpbmUgYW5kIG90aGVyIHRoaW5ncyB0ZW5kaW5nIHRvIGx1eHVyeQogICAgICAgICAgICAgICAgICAgIHRvIGJlIGltcG9ydGVkOyBiZWNhdXNlLCB0aGV5IHRob3VnaHQgdGhhdCBieSB0aGVpciB1c2UgdGhlIG1pbmQgaXMgZW5lcnZhdGVkCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBjb3VyYWdlIGltcGFpcmVkOiB0aGF0IHRoZXkgd2VyZSBhIHNhdmFnZSBwZW9wbGUgYW5kIG9mIGdyZWF0IGJyYXZlcnk6CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IHVwYnJhaWRlZCBhbmQgY29uZGVtbmVkIHRoZSByZXN0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIHN1cnJlbmRlcmVkIHRoZW1zZWx2ZXMgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIGFuZCB0aHJvd24KICAgICAgICAgICAgICAgICAgICBhc2lkZSB0aGVpciBuYXRpb25hbCBjb3VyYWdlOiB0aGF0IHRoZXkgb3Blbmx5IGRlY2xhcmVkIHRoZXkgd291bGQgbmVpdGhlciBzZW5kCiAgICAgICAgICAgICAgICAgICAgZW1iYXNzYWRvcnMsIG5vciBhY2NlcHQgYW55IGNvbmRpdGlvbiBvZiBwZWFjZS4iIDwvdHJhbnNsYXRpb24+"
translation['2.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIGhlIGhhZCBtYWRlIHRocmVlIGRheXMgbWFyY2ggdGhyb3VnaCB0aGVpciB0ZXJyaXRvcmllcywgaGUgZGlzY292ZXJlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgc29tZSBwcmlzb25lcnMsIHRoYXQgdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODczMCIgcmVnPSIgICtTYW1icmUgKHJpdmVyKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODczMCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NzMwIj5TYW1icmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+IHdhcyBub3QgbW9yZSB0aGFuIHRlbiBtaWxlcyBmcm9tIGhpcyBjYW1wOyB0aGF0IGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+IGhhZCBzdGF0aW9uZWQgdGhlbXNlbHZlcyBvbiB0aGUgb3RoZXIgc2lkZSBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgcml2ZXIsIGFuZCB0b2dldGhlciB3aXRoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkF0cmViYXRlczwvbmFtZT4gYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcm9tYW5kdWk8L25hbWU+LCB0aGVpciBuZWlnaGJvcnMsIHdlcmUgdGhlcmUgYXdhaXRpbmcgdGhlIGFycml2YWwgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT47IGZvciB0aGV5IGhhZCBwZXJzdWFkZWQgYm90aCB0aGVzZSBuYXRpb25zCiAgICAgICAgICAgICAgICAgICAgdG8gdHJ5IHRoZSBzYW1lIGZvcnR1bmUgb2Ygd2FyIFthcyB0aGVtc2VsdmVzXTogdGhhdCB0aGUgZm9yY2VzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFkdWF0dWNpPC9uYW1lPiB3ZXJlIGFsc28gZXhwZWN0ZWQgYnkgdGhlbSwgYW5kIHdlcmUgb24gdGhlaXIgbWFyY2g7CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IGhhZCBwdXQgdGhlaXIgd29tZW4sIGFuZCB0aG9zZSB3aG8gdGhyb3VnaCBhZ2UgYXBwZWFyZWQgdXNlbGVzcyBmb3IKICAgICAgICAgICAgICAgICAgICB3YXIsIGluIGEgcGxhY2UgdG8gd2hpY2ggdGhlcmUgd2FzIG5vIGFwcHJvYWNoIGZvciBhbiBhcm15LCBvbiBhY2NvdW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcnNoZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg3MzAiIHJlZz0iICArU2FtYnJlIChyaXZlciksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3MzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODczMCI+U2FtYnJlPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiB3YXMgbm90IG1vcmUgdGhhbiB0ZW4gbWlsZXMgZnJvbSBoaXMgY2FtcDsgdGhhdCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NzMwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg3MzAiPlNhbWJyZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiBoYWQgc3RhdGlvbmVkIHRoZW1zZWx2ZXMgb24gdGhlIG90aGVyIHNpZGUgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIHJpdmVyLCBhbmQgdG9nZXRoZXIgd2l0aCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdHJlYmF0ZXM8L25hbWU+IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJvbWFuZHVpPC9uYW1lPiwgdGhlaXIgbmVpZ2hib3JzLCB3ZXJlIHRoZXJlIGF3YWl0aW5nIHRoZSBhcnJpdmFsIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+OyBmb3IgdGhleSBoYWQgcGVyc3VhZGVkIGJvdGggdGhlc2UgbmF0aW9ucwogICAgICAgICAgICAgICAgICAgIHRvIHRyeSB0aGUgc2FtZSBmb3J0dW5lIG9mIHdhciBbYXMgdGhlbXNlbHZlc106IHRoYXQgdGhlIGZvcmNlcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZHVhdHVjaTwvbmFtZT4gd2VyZSBhbHNvIGV4cGVjdGVkIGJ5IHRoZW0sIGFuZCB3ZXJlIG9uIHRoZWlyIG1hcmNoOwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBoYWQgcHV0IHRoZWlyIHdvbWVuLCBhbmQgdGhvc2Ugd2hvIHRocm91Z2ggYWdlIGFwcGVhcmVkIHVzZWxlc3MgZm9yCiAgICAgICAgICAgICAgICAgICAgd2FyLCBpbiBhIHBsYWNlIHRvIHdoaWNoIHRoZXJlIHdhcyBubyBhcHByb2FjaCBmb3IgYW4gYXJteSwgb24gYWNjb3VudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBtYXJzaGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyBsZWFybmVkIHRoZXNlIHRoaW5ncywgaGUgc2VuZHMgZm9yd2FyZCBzY291dHMgYW5kIGNlbnR1cmlvbnMgdG8gY2hvb3NlIGEKICAgICAgICAgICAgICAgICAgICBjb252ZW5pZW50IHBsYWNlIGZvciB0aGUgY2FtcC4gQW5kIGFzIGEgZ3JlYXQgbWFueSBvZiB0aGUgc3Vycm91bmRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+IGFuZCBvdGhlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBmb2xsb3dpbmcKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBtYXJjaGVkIHdpdGggaGltOyBzb21lIG9mIHRoZXNlLCBhcyB3YXMKICAgICAgICAgICAgICAgICAgICBhZnRlcndhcmRzIGxlYXJuZWQgZnJvbSB0aGUgcHJpc29uZXJzLCBoYXZpbmcgYWNjdXJhdGVseSBvYnNlcnZlZCwgZHVyaW5nIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZGF5cywgdGhlIGFybXkncyBtZXRob2Qgb2YgbWFyY2hpbmcsIHdlbnQgYnkgbmlnaHQgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBhbmQgaW5mb3JtZWQgdGhlbSB0aGF0IGEgZ3JlYXQgbnVtYmVyIG9mIGJhZ2dhZ2UtdHJhaW5zIHBhc3NlZCBiZXR3ZWVuIHRoZQogICAgICAgICAgICAgICAgICAgIHNldmVyYWwgbGVnaW9ucywgYW5kIHRoYXQgdGhlcmUgd291bGQgYmUgbm8gZGlmZmljdWx0eSwgd2hlbiB0aGUgZmlyc3QgbGVnaW9uCiAgICAgICAgICAgICAgICAgICAgaGFkIGNvbWUgaW50byB0aGUgY2FtcCwgYW5kIHRoZSBvdGhlciBsZWdpb25zIHdlcmUgYXQgYSBncmVhdCBkaXN0YW5jZSwgdG8KICAgICAgICAgICAgICAgICAgICBhdHRhY2sgdGhhdCBsZWdpb24gd2hpbGUgdW5kZXIgYmFnZ2FnZSwgd2hpY2ggYmVpbmcgcm91dGVkLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFnZ2FnZS10cmFpbiBzZWl6ZWQsIGl0IHdvdWxkIGNvbWUgdG8gcGFzcyB0aGF0IHRoZSBvdGhlciBsZWdpb25zIHdvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIGRhcmUgdG8gc3RhbmQgdGhlaXIgZ3JvdW5kLiBJdCBhZGRlZCB3ZWlnaHQgYWxzbyB0byB0aGUgYWR2aWNlIG9mIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHJlcG9ydGVkIHRoYXQgY2lyY3Vtc3RhbmNlLCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sIGZyb20gZWFybHkgdGltZXMsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGV5IHdlcmUgd2VhayBpbiBjYXZhbHJ5LCAoZm9yIG5vdCBldmVuIGF0IHRoaXMgdGltZSBkbyB0aGV5IGF0dGVuZCB0bwogICAgICAgICAgICAgICAgICAgIGl0LCBidXQgYWNjb21wbGlzaCBieSB0aGVpciBpbmZhbnRyeSB3aGF0ZXZlciB0aGV5IGNhbiwpIGluIG9yZGVyIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IHRoZSBtb3JlIGVhc2lseSBvYnN0cnVjdCB0aGUgY2F2YWxyeSBvZiB0aGVpciBuZWlnaGJvcnMgaWYgdGhleSBjYW1lIHVwb24KICAgICAgICAgICAgICAgICAgICB0aGVtIGZvciB0aGUgcHVycG9zZSBvZiBwbHVuZGVyaW5nLCBoYXZpbmcgY3V0IHlvdW5nIHRyZWVzLCBhbmQgYmVudCB0aGVtLCBieQogICAgICAgICAgICAgICAgICAgIG1lYW5zIG9mIHRoZWlyIG51bWVyb3VzIGJyYW5jaGVzIFtleHRlbmRpbmddIG9uIHRvIHRoZSBzaWRlcywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHF1aWNrLWJyaWFycyBhbmQgdGhvcm5zIHNwcmluZ2luZyB1cCBiZXR3ZWVuIHRoZW0sIGhhZCBtYWRlIHRoZXNlIGhlZGdlcyBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgYSBmb3J0aWZpY2F0aW9uIGxpa2UgYSB3YWxsLCB0aHJvdWdoIHdoaWNoIGl0IHdhcyBub3Qgb25seSBpbXBvc3NpYmxlIHRvIGVudGVyLAogICAgICAgICAgICAgICAgICAgIGJ1dCBldmVuIHRvIHBlbmV0cmF0ZSB3aXRoIHRoZSBleWUuIFNpbmNlIFt0aGVyZWZvcmVdIHRoZSBtYXJjaCBvZiBvdXIgYXJteQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIG9ic3RydWN0ZWQgYnkgdGhlc2UgdGhpbmdzLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+IHRob3VnaHQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBhZHZpY2Ugb3VnaHQgbm90IHRvIGJlIG5lZ2xlY3RlZCBieSB0aGVtLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+IGFuZCBvdGhlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBmb2xsb3dpbmcKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBtYXJjaGVkIHdpdGggaGltOyBzb21lIG9mIHRoZXNlLCBhcyB3YXMKICAgICAgICAgICAgICAgICAgICBhZnRlcndhcmRzIGxlYXJuZWQgZnJvbSB0aGUgcHJpc29uZXJzLCBoYXZpbmcgYWNjdXJhdGVseSBvYnNlcnZlZCwgZHVyaW5nIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZGF5cywgdGhlIGFybXkncyBtZXRob2Qgb2YgbWFyY2hpbmcsIHdlbnQgYnkgbmlnaHQgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBhbmQgaW5mb3JtZWQgdGhlbSB0aGF0IGEgZ3JlYXQgbnVtYmVyIG9mIGJhZ2dhZ2UtdHJhaW5zIHBhc3NlZCBiZXR3ZWVuIHRoZQogICAgICAgICAgICAgICAgICAgIHNldmVyYWwgbGVnaW9ucywgYW5kIHRoYXQgdGhlcmUgd291bGQgYmUgbm8gZGlmZmljdWx0eSwgd2hlbiB0aGUgZmlyc3QgbGVnaW9uCiAgICAgICAgICAgICAgICAgICAgaGFkIGNvbWUgaW50byB0aGUgY2FtcCwgYW5kIHRoZSBvdGhlciBsZWdpb25zIHdlcmUgYXQgYSBncmVhdCBkaXN0YW5jZSwgdG8KICAgICAgICAgICAgICAgICAgICBhdHRhY2sgdGhhdCBsZWdpb24gd2hpbGUgdW5kZXIgYmFnZ2FnZSwgd2hpY2ggYmVpbmcgcm91dGVkLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFnZ2FnZS10cmFpbiBzZWl6ZWQsIGl0IHdvdWxkIGNvbWUgdG8gcGFzcyB0aGF0IHRoZSBvdGhlciBsZWdpb25zIHdvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIGRhcmUgdG8gc3RhbmQgdGhlaXIgZ3JvdW5kLiBJdCBhZGRlZCB3ZWlnaHQgYWxzbyB0byB0aGUgYWR2aWNlIG9mIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHJlcG9ydGVkIHRoYXQgY2lyY3Vtc3RhbmNlLCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sIGZyb20gZWFybHkgdGltZXMsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGV5IHdlcmUgd2VhayBpbiBjYXZhbHJ5LCAoZm9yIG5vdCBldmVuIGF0IHRoaXMgdGltZSBkbyB0aGV5IGF0dGVuZCB0bwogICAgICAgICAgICAgICAgICAgIGl0LCBidXQgYWNjb21wbGlzaCBieSB0aGVpciBpbmZhbnRyeSB3aGF0ZXZlciB0aGV5IGNhbiwpIGluIG9yZGVyIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IHRoZSBtb3JlIGVhc2lseSBvYnN0cnVjdCB0aGUgY2F2YWxyeSBvZiB0aGVpciBuZWlnaGJvcnMgaWYgdGhleSBjYW1lIHVwb24KICAgICAgICAgICAgICAgICAgICB0aGVtIGZvciB0aGUgcHVycG9zZSBvZiBwbHVuZGVyaW5nLCBoYXZpbmcgY3V0IHlvdW5nIHRyZWVzLCBhbmQgYmVudCB0aGVtLCBieQogICAgICAgICAgICAgICAgICAgIG1lYW5zIG9mIHRoZWlyIG51bWVyb3VzIGJyYW5jaGVzIFtleHRlbmRpbmddIG9uIHRvIHRoZSBzaWRlcywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHF1aWNrLWJyaWFycyBhbmQgdGhvcm5zIHNwcmluZ2luZyB1cCBiZXR3ZWVuIHRoZW0sIGhhZCBtYWRlIHRoZXNlIGhlZGdlcyBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgYSBmb3J0aWZpY2F0aW9uIGxpa2UgYSB3YWxsLCB0aHJvdWdoIHdoaWNoIGl0IHdhcyBub3Qgb25seSBpbXBvc3NpYmxlIHRvIGVudGVyLAogICAgICAgICAgICAgICAgICAgIGJ1dCBldmVuIHRvIHBlbmV0cmF0ZSB3aXRoIHRoZSBleWUuIFNpbmNlIFt0aGVyZWZvcmVdIHRoZSBtYXJjaCBvZiBvdXIgYXJteQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIG9ic3RydWN0ZWQgYnkgdGhlc2UgdGhpbmdzLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+IHRob3VnaHQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBhZHZpY2Ugb3VnaHQgbm90IHRvIGJlIG5lZ2xlY3RlZCBieSB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBuYXR1cmUgb2YgdGhlIGdyb3VuZCB3aGljaCBvdXIgbWVuIGhhZCBjaG9zZW4gZm9yIHRoZSBjYW1wIHdhcyB0aGlzOiBBIGhpbGwsCiAgICAgICAgICAgICAgICAgICAgZGVjbGluaW5nIGV2ZW5seSBmcm9tIHRoZSB0b3AsIGV4dGVuZGluZyB0byB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NzMwIiByZWc9IiAgK1NhbWJyZSAocml2ZXIpLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NzMwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg3MzAiPlNhbWJyZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHdoaWNoIHdlIGhhdmUgbWVudGlvbmVkIGFib3ZlOiBmcm9tIHRoaXMgcml2ZXIgdGhlcmUgYXJvc2UgYSBbc2Vjb25kXQogICAgICAgICAgICAgICAgICAgIGhpbGwgb2YgbGlrZSBhc2NlbnQsIG9uIHRoZSBvdGhlciBzaWRlIGFuZCBvcHBvc2l0ZSB0byB0aGUgZm9ybWVyLCBhbmQgb3BlbiBmb3IKICAgICAgICAgICAgICAgICAgICBhYm91dCAyMDAgcGFjZXMgYXQgdGhlIGxvd2VyIHBhcnQ7IGJ1dCBpbiB0aGUgdXBwZXIgcGFydCwgd29vZHksIChzbyBtdWNoIHNvKQogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgd2FzIG5vdCBlYXN5IHRvIHNlZSB0aHJvdWdoIGl0IGludG8gdGhlIGludGVyaW9yLiBXaXRoaW4gdGhlc2Ugd29vZHMgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXkga2VwdCB0aGVtc2VsdmVzIGluIGNvbmNlYWxtZW50OyBhIGZldyB0cm9vcHMgb2YgaG9yc2Utc29sZGllcnMgYXBwZWFyZWQgb24KICAgICAgICAgICAgICAgICAgICB0aGUgb3BlbiBncm91bmQsIGFsb25nIHRoZSByaXZlci4gVGhlIGRlcHRoIG9mIHRoZSByaXZlciB3YXMgYWJvdXQgdGhyZWUgZmVldC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODczMCIgcmVnPSIgICtTYW1icmUgKHJpdmVyKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODczMCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NzMwIj5TYW1icmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCB3aGljaCB3ZSBoYXZlIG1lbnRpb25lZCBhYm92ZTogZnJvbSB0aGlzIHJpdmVyIHRoZXJlIGFyb3NlIGEgW3NlY29uZF0KICAgICAgICAgICAgICAgICAgICBoaWxsIG9mIGxpa2UgYXNjZW50LCBvbiB0aGUgb3RoZXIgc2lkZSBhbmQgb3Bwb3NpdGUgdG8gdGhlIGZvcm1lciwgYW5kIG9wZW4gZm9yCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgMjAwIHBhY2VzIGF0IHRoZSBsb3dlciBwYXJ0OyBidXQgaW4gdGhlIHVwcGVyIHBhcnQsIHdvb2R5LCAoc28gbXVjaCBzbykKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IHdhcyBub3QgZWFzeSB0byBzZWUgdGhyb3VnaCBpdCBpbnRvIHRoZSBpbnRlcmlvci4gV2l0aGluIHRoZXNlIHdvb2RzIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15IGtlcHQgdGhlbXNlbHZlcyBpbiBjb25jZWFsbWVudDsgYSBmZXcgdHJvb3BzIG9mIGhvcnNlLXNvbGRpZXJzIGFwcGVhcmVkIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIG9wZW4gZ3JvdW5kLCBhbG9uZyB0aGUgcml2ZXIuIFRoZSBkZXB0aCBvZiB0aGUgcml2ZXIgd2FzIGFib3V0IHRocmVlIGZlZXQuCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NzMwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg3MzAiPlNhbWJyZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIHNlbnQgaGlzIGNhdmFscnkgb24gYmVmb3JlLCBmb2xsb3dlZAogICAgICAgICAgICAgICAgICAgIGNsb3NlIGFmdGVyIHRoZW0gd2l0aCBhbGwgaGlzIGZvcmNlczsgYnV0IHRoZSBwbGFuIGFuZCBvcmRlciBvZiB0aGUgbWFyY2ggd2FzCiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW50IGZyb20gdGhhdCB3aGljaCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+IGhhZCByZXBvcnRlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+LiBGb3IgYXMgaGUgd2FzIGFwcHJvYWNoaW5nIHRoZSBlbmVteSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBhY2NvcmRpbmcgdG8gaGlzIGN1c3RvbSwgbGVkIG9uIFthcyB0aGUgdmFuIHNpeCBsZWdpb25zCiAgICAgICAgICAgICAgICAgICAgdW5lbmN1bWJlcmVkIGJ5IGJhZ2dhZ2U7IGJlaGluZCB0aGVtIGhlIGhhZCBwbGFjZWQgdGhlIGJhZ2dhZ2UtdHJhaW5zIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdob2xlIGFybXk7IHRoZW4gdGhlIHR3byBsZWdpb25zIHdoaWNoIGhhZCBiZWVuIGxhc3QgcmFpc2VkIGNsb3NlZCB0aGUgcmVhciwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2VyZSBhIGd1YXJkIGZvciB0aGUgYmFnZ2FnZS10cmFpbi4gT3VyIGhvcnNlLCB3aXRoIHRoZSBzbGluZ2VycyBhbmQgYXJjaGVycywKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgcGFzc2VkIHRoZSByaXZlciwgY29tbWVuY2VkIGFjdGlvbiB3aXRoIHRoZSBjYXZhbHJ5IG9mIHRoZSBlbmVteS4gV2hpbGUKICAgICAgICAgICAgICAgICAgICB0aGV5IGZyb20gdGltZSB0byB0aW1lIGJldG9vayB0aGVtc2VsdmVzIGludG8gdGhlIHdvb2RzIHRvIHRoZWlyIGNvbXBhbmlvbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIGFnYWluIG1hZGUgYW4gYXNzYXVsdCBvdXQgb2YgdGhlIHdvb2QgdXBvbiBvdXIgbWVuLCB3aG8gZGlkIG5vdCBkYXJlIHRvIGZvbGxvdwogICAgICAgICAgICAgICAgICAgIHRoZW0gaW4gdGhlaXIgcmV0cmVhdCBmdXJ0aGVyIHRoYW4gdGhlIGxpbWl0IHRvIHdoaWNoIHRoZSBwbGFpbiBhbmQgb3BlbiBwYXJ0cwogICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkLCBpbiB0aGUgbWVhbiB0aW1lIHRoZSBzaXggbGVnaW9ucyB3aGljaCBoYWQgYXJyaXZlZCBmaXJzdCwgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZWQgb3V0IHRoZSB3b3JrLCBiZWdhbiB0byBmb3J0aWZ5IHRoZSBjYW1wLiBXaGVuIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGJhZ2dhZ2UgdHJhaW4gb2Ygb3VyIGFybXkgd2FzIHNlZW4gYnkgdGhvc2Ugd2hvIGxheSBoaWQgaW4gdGhlIHdvb2RzLCB3aGljaCBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIGFncmVlZCBvbiBhbW9uZyB0aGVtIGFzIHRoZSB0aW1lIGZvciBjb21tZW5jaW5nIGFjdGlvbiwgYXMgc29vbiBhcyB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIGFycmFuZ2VkIHRoZWlyIGxpbmUgb2YgYmF0dGxlIGFuZCBmb3JtZWQgdGhlaXIgcmFua3Mgd2l0aGluIHRoZSB3b29kcywgYW5kIGhhZAogICAgICAgICAgICAgICAgICAgIGVuY291cmFnZWQgb25lIGFub3RoZXIsIHRoZXkgcnVzaGVkIG91dCBzdWRkZW5seSB3aXRoIGFsbCB0aGVpciBmb3JjZXMgYW5kIG1hZGUKICAgICAgICAgICAgICAgICAgICBhbiBhdHRhY2sgdXBvbiBvdXIgaG9yc2UuIFRoZSBsYXR0ZXIgYmVpbmcgZWFzaWx5IHJvdXRlZCBhbmQgdGhyb3duIGludG8KICAgICAgICAgICAgICAgICAgICBjb25mdXNpb24sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4gcmFuIGRvd24gdG8gdGhlIHJpdmVyIHdpdGggc3VjaCBpbmNyZWRpYmxlCiAgICAgICAgICAgICAgICAgICAgc3BlZWQgdGhhdCB0aGV5IHNlZW1lZCB0byBiZSBpbiB0aGUgd29vZHMsIHRoZSByaXZlciwgYW5kIGNsb3NlIHVwb24gdXMgYWxtb3N0CiAgICAgICAgICAgICAgICAgICAgYXQgdGhlIHNhbWUgdGltZS4gQW5kIHdpdGggdGhlIHNhbWUgc3BlZWQgdGhleSBoYXN0ZW5lZCB1cCB0aGUgaGlsbCB0byBvdXIgY2FtcCwKICAgICAgICAgICAgICAgICAgICBhbmQgdG8gdGhvc2Ugd2hvIHdlcmUgZW1wbG95ZWQgaW4gdGhlIHdvcmtzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgc2VudCBoaXMgY2F2YWxyeSBvbiBiZWZvcmUsIGZvbGxvd2VkCiAgICAgICAgICAgICAgICAgICAgY2xvc2UgYWZ0ZXIgdGhlbSB3aXRoIGFsbCBoaXMgZm9yY2VzOyBidXQgdGhlIHBsYW4gYW5kIG9yZGVyIG9mIHRoZSBtYXJjaCB3YXMKICAgICAgICAgICAgICAgICAgICBkaWZmZXJlbnQgZnJvbSB0aGF0IHdoaWNoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gaGFkIHJlcG9ydGVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4uIEZvciBhcyBoZSB3YXMgYXBwcm9hY2hpbmcgdGhlIGVuZW15LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGFjY29yZGluZyB0byBoaXMgY3VzdG9tLCBsZWQgb24gW2FzIHRoZSB2YW4gc2l4IGxlZ2lvbnMKICAgICAgICAgICAgICAgICAgICB1bmVuY3VtYmVyZWQgYnkgYmFnZ2FnZTsgYmVoaW5kIHRoZW0gaGUgaGFkIHBsYWNlZCB0aGUgYmFnZ2FnZS10cmFpbnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgYXJteTsgdGhlbiB0aGUgdHdvIGxlZ2lvbnMgd2hpY2ggaGFkIGJlZW4gbGFzdCByYWlzZWQgY2xvc2VkIHRoZSByZWFyLCBhbmQKICAgICAgICAgICAgICAgICAgICB3ZXJlIGEgZ3VhcmQgZm9yIHRoZSBiYWdnYWdlLXRyYWluLiBPdXIgaG9yc2UsIHdpdGggdGhlIHNsaW5nZXJzIGFuZCBhcmNoZXJzLAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBwYXNzZWQgdGhlIHJpdmVyLCBjb21tZW5jZWQgYWN0aW9uIHdpdGggdGhlIGNhdmFscnkgb2YgdGhlIGVuZW15LiBXaGlsZQogICAgICAgICAgICAgICAgICAgIHRoZXkgZnJvbSB0aW1lIHRvIHRpbWUgYmV0b29rIHRoZW1zZWx2ZXMgaW50byB0aGUgd29vZHMgdG8gdGhlaXIgY29tcGFuaW9ucywgYW5kCiAgICAgICAgICAgICAgICAgICAgYWdhaW4gbWFkZSBhbiBhc3NhdWx0IG91dCBvZiB0aGUgd29vZCB1cG9uIG91ciBtZW4sIHdobyBkaWQgbm90IGRhcmUgdG8gZm9sbG93CiAgICAgICAgICAgICAgICAgICAgdGhlbSBpbiB0aGVpciByZXRyZWF0IGZ1cnRoZXIgdGhhbiB0aGUgbGltaXQgdG8gd2hpY2ggdGhlIHBsYWluIGFuZCBvcGVuIHBhcnRzCiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWQsIGluIHRoZSBtZWFuIHRpbWUgdGhlIHNpeCBsZWdpb25zIHdoaWNoIGhhZCBhcnJpdmVkIGZpcnN0LCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBtZWFzdXJlZCBvdXQgdGhlIHdvcmssIGJlZ2FuIHRvIGZvcnRpZnkgdGhlIGNhbXAuIFdoZW4gdGhlIGZpcnN0IHBhcnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFnZ2FnZSB0cmFpbiBvZiBvdXIgYXJteSB3YXMgc2VlbiBieSB0aG9zZSB3aG8gbGF5IGhpZCBpbiB0aGUgd29vZHMsIHdoaWNoIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gYWdyZWVkIG9uIGFtb25nIHRoZW0gYXMgdGhlIHRpbWUgZm9yIGNvbW1lbmNpbmcgYWN0aW9uLCBhcyBzb29uIGFzIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgYXJyYW5nZWQgdGhlaXIgbGluZSBvZiBiYXR0bGUgYW5kIGZvcm1lZCB0aGVpciByYW5rcyB3aXRoaW4gdGhlIHdvb2RzLCBhbmQgaGFkCiAgICAgICAgICAgICAgICAgICAgZW5jb3VyYWdlZCBvbmUgYW5vdGhlciwgdGhleSBydXNoZWQgb3V0IHN1ZGRlbmx5IHdpdGggYWxsIHRoZWlyIGZvcmNlcyBhbmQgbWFkZQogICAgICAgICAgICAgICAgICAgIGFuIGF0dGFjayB1cG9uIG91ciBob3JzZS4gVGhlIGxhdHRlciBiZWluZyBlYXNpbHkgcm91dGVkIGFuZCB0aHJvd24gaW50bwogICAgICAgICAgICAgICAgICAgIGNvbmZ1c2lvbiwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiByYW4gZG93biB0byB0aGUgcml2ZXIgd2l0aCBzdWNoIGluY3JlZGlibGUKICAgICAgICAgICAgICAgICAgICBzcGVlZCB0aGF0IHRoZXkgc2VlbWVkIHRvIGJlIGluIHRoZSB3b29kcywgdGhlIHJpdmVyLCBhbmQgY2xvc2UgdXBvbiB1cyBhbG1vc3QKICAgICAgICAgICAgICAgICAgICBhdCB0aGUgc2FtZSB0aW1lLiBBbmQgd2l0aCB0aGUgc2FtZSBzcGVlZCB0aGV5IGhhc3RlbmVkIHVwIHRoZSBoaWxsIHRvIG91ciBjYW1wLAogICAgICAgICAgICAgICAgICAgIGFuZCB0byB0aG9zZSB3aG8gd2VyZSBlbXBsb3llZCBpbiB0aGUgd29ya3MuIDwvdHJhbnNsYXRpb24+"
translation['2.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgZXZlcnkgdGhpbmcgdG8gZG8gYXQgb25lIHRpbWU6IHRoZSBzdGFuZGFyZAogICAgICAgICAgICAgICAgICAgIHRvIGJlIGRpc3BsYXllZCwgd2hpY2ggd2FzIHRoZSBzaWduIHdoZW4gaXQgd2FzIG5lY2Vzc2FyeSB0byBydW4gdG8gYXJtczsgdGhlCiAgICAgICAgICAgICAgICAgICAgc2lnbmFsIHRvIGJlIGdpdmVuIGJ5IHRoZSB0cnVtcGV0OyB0aGUgc29sZGllcnMgdG8gYmUgY2FsbGVkIG9mZiBmcm9tIHRoZSB3b3JrczsKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gaGFkIHByb2NlZWRlZCBzb21lIGRpc3RhbmNlIGZvciB0aGUgcHVycG9zZSBvZiBzZWVraW5nIG1hdGVyaWFscyBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgcmFtcGFydCwgdG8gYmUgc3VtbW9uZWQ7IHRoZSBvcmRlciBvZiBiYXR0bGUgdG8gYmUgZm9ybWVkOyB0aGUgc29sZGllcnMgdG8KICAgICAgICAgICAgICAgICAgICBiZSBlbmNvdXJhZ2VkOyB0aGUgd2F0Y2h3b3JkIHRvIGJlIGdpdmVuLiBBIGdyZWF0IHBhcnQgb2YgdGhlc2UgYXJyYW5nZW1lbnRzIHdhcwogICAgICAgICAgICAgICAgICAgIHByZXZlbnRlZCBieSB0aGUgc2hvcnRuZXNzIG9mIHRpbWUgYW5kIHRoZSBzdWRkZW4gYXBwcm9hY2ggYW5kIGNoYXJnZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteS4gVW5kZXIgdGhlc2UgZGlmZmljdWx0aWVzIHR3byB0aGluZ3MgcHJvdmVkIG9mIGFkdmFudGFnZTsgW2ZpcnN0XSB0aGUKICAgICAgICAgICAgICAgICAgICBza2lsbCBhbmQgZXhwZXJpZW5jZSBvZiB0aGUgc29sZGllcnMsIGJlY2F1c2UsIGhhdmluZyBiZWVuIHRyYWluZWQgYnkgZm9ybWVyCiAgICAgICAgICAgICAgICAgICAgZW5nYWdlbWVudHMsIHRoZXkgY291bGQgc3VnZ2VzdCB0byB0aGVtc2VsdmVzIHdoYXQgb3VnaHQgdG8gYmUgZG9uZSwgYXMKICAgICAgICAgICAgICAgICAgICBjb252ZW5pZW50bHkgYXMgcmVjZWl2ZSBpbmZvcm1hdGlvbiBmcm9tIG90aGVyczsgYW5kIFtzZWNvbmRseV0gdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIGZvcmJpZGRlbiBoaXMgc2V2ZXJhbCBsaWV1dGVuYW50cyB0byBkZXBhcnQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSB3b3JrcyBhbmQgdGhlaXIgcmVzcGVjdGl2ZSBsZWdpb25zLCBiZWZvcmUgdGhlIGNhbXAgd2FzIGZvcnRpZmllZC4KICAgICAgICAgICAgICAgICAgICBUaGVzZSwgb24gYWNjb3VudCBvZiB0aGUgbmVhciBhcHByb2FjaCBhbmQgdGhlIHNwZWVkIG9mIHRoZSBlbmVteSwgZGlkIG5vdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgd2FpdCBmb3IgYW55IGNvbW1hbmQgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGJ1dCBvZiB0aGVtc2VsdmVzCiAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZWQgd2hhdGV2ZXIgYXBwZWFyZWQgcHJvcGVyLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBldmVyeSB0aGluZyB0byBkbyBhdCBvbmUgdGltZTogdGhlIHN0YW5kYXJkCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgZGlzcGxheWVkLCB3aGljaCB3YXMgdGhlIHNpZ24gd2hlbiBpdCB3YXMgbmVjZXNzYXJ5IHRvIHJ1biB0byBhcm1zOyB0aGUKICAgICAgICAgICAgICAgICAgICBzaWduYWwgdG8gYmUgZ2l2ZW4gYnkgdGhlIHRydW1wZXQ7IHRoZSBzb2xkaWVycyB0byBiZSBjYWxsZWQgb2ZmIGZyb20gdGhlIHdvcmtzOwogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBoYWQgcHJvY2VlZGVkIHNvbWUgZGlzdGFuY2UgZm9yIHRoZSBwdXJwb3NlIG9mIHNlZWtpbmcgbWF0ZXJpYWxzIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSByYW1wYXJ0LCB0byBiZSBzdW1tb25lZDsgdGhlIG9yZGVyIG9mIGJhdHRsZSB0byBiZSBmb3JtZWQ7IHRoZSBzb2xkaWVycyB0bwogICAgICAgICAgICAgICAgICAgIGJlIGVuY291cmFnZWQ7IHRoZSB3YXRjaHdvcmQgdG8gYmUgZ2l2ZW4uIEEgZ3JlYXQgcGFydCBvZiB0aGVzZSBhcnJhbmdlbWVudHMgd2FzCiAgICAgICAgICAgICAgICAgICAgcHJldmVudGVkIGJ5IHRoZSBzaG9ydG5lc3Mgb2YgdGltZSBhbmQgdGhlIHN1ZGRlbiBhcHByb2FjaCBhbmQgY2hhcmdlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15LiBVbmRlciB0aGVzZSBkaWZmaWN1bHRpZXMgdHdvIHRoaW5ncyBwcm92ZWQgb2YgYWR2YW50YWdlOyBbZmlyc3RdIHRoZQogICAgICAgICAgICAgICAgICAgIHNraWxsIGFuZCBleHBlcmllbmNlIG9mIHRoZSBzb2xkaWVycywgYmVjYXVzZSwgaGF2aW5nIGJlZW4gdHJhaW5lZCBieSBmb3JtZXIKICAgICAgICAgICAgICAgICAgICBlbmdhZ2VtZW50cywgdGhleSBjb3VsZCBzdWdnZXN0IHRvIHRoZW1zZWx2ZXMgd2hhdCBvdWdodCB0byBiZSBkb25lLCBhcwogICAgICAgICAgICAgICAgICAgIGNvbnZlbmllbnRseSBhcyByZWNlaXZlIGluZm9ybWF0aW9uIGZyb20gb3RoZXJzOyBhbmQgW3NlY29uZGx5XSB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgZm9yYmlkZGVuIGhpcyBzZXZlcmFsIGxpZXV0ZW5hbnRzIHRvIGRlcGFydAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHdvcmtzIGFuZCB0aGVpciByZXNwZWN0aXZlIGxlZ2lvbnMsIGJlZm9yZSB0aGUgY2FtcCB3YXMgZm9ydGlmaWVkLgogICAgICAgICAgICAgICAgICAgIFRoZXNlLCBvbiBhY2NvdW50IG9mIHRoZSBuZWFyIGFwcHJvYWNoIGFuZCB0aGUgc3BlZWQgb2YgdGhlIGVuZW15LCBkaWQgbm90IHRoZW4KICAgICAgICAgICAgICAgICAgICB3YWl0IGZvciBhbnkgY29tbWFuZCBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYnV0IG9mIHRoZW1zZWx2ZXMKICAgICAgICAgICAgICAgICAgICBleGVjdXRlZCB3aGF0ZXZlciBhcHBlYXJlZCBwcm9wZXIuIDwvdHJhbnNsYXRpb24+"
translation['2.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIGdpdmVuIHRoZSBuZWNlc3Nhcnkgb3JkZXJzLCBoYXN0ZW5lZCB0bwogICAgICAgICAgICAgICAgICAgIGFuZCBmcm8gaW50byB3aGF0ZXZlciBxdWFydGVyIGZvcnR1bmUgY2FycmllZCBoaW0sIHRvIGFuaW1hdGUgdGhlIHRyb29wcywgYW5kCiAgICAgICAgICAgICAgICAgICAgY2FtZSB0byB0aGUgdGVudGggbGVnaW9uLiBIYXZpbmcgZW5jb3VyYWdlZCB0aGUgc29sZGllcnMgd2l0aCBubyBmdXJ0aGVyIHNwZWVjaAogICAgICAgICAgICAgICAgICAgIHRoYW4gdGhhdCAidGhleSBzaG91bGQga2VlcCB1cCB0aGUgcmVtZW1icmFuY2Ugb2YgdGhlaXIgd29udGVkIHZhbG9yLCBhbmQgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgY29uZnVzZWQgaW4gbWluZCwgYnV0IHZhbGlhbnRseSBzdXN0YWluIHRoZSBhc3NhdWx0IG9mIHRoZSBlbmVteSA7IiBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBsYXR0ZXIgd2VyZSBub3QgZnVydGhlciBmcm9tIHRoZW0gdGhhbiB0aGUgZGlzdGFuY2UgdG8gd2hpY2ggYSBkYXJ0IGNvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgY2FzdCwgaGUgZ2F2ZSB0aGUgc2lnbmFsIGZvciBjb21tZW5jaW5nIGJhdHRsZS4gQW5kIGhhdmluZyBnb25lIHRvIGFub3RoZXIKICAgICAgICAgICAgICAgICAgICBxdWFydGVyIGZvciB0aGUgcHVycG9zZSBvZiBlbmNvdXJhZ2luZyBbdGhlIHNvbGRpZXJzXSwgaGUgZmluZHMgdGhlbSBmaWdodGluZy4KICAgICAgICAgICAgICAgICAgICBTdWNoIHdhcyB0aGUgc2hvcnRuZXNzIG9mIHRoZSB0aW1lLCBhbmQgc28gZGV0ZXJtaW5lZCB3YXMgdGhlIG1pbmQgb2YgdGhlIGVuZW15CiAgICAgICAgICAgICAgICAgICAgb24gZmlnaHRpbmcsIHRoYXQgdGltZSB3YXMgd2FudGluZyBub3Qgb25seSBmb3IgYWZmaXhpbmcgdGhlIG1pbGl0YXJ5IGluc2lnbmlhLAogICAgICAgICAgICAgICAgICAgIGJ1dCBldmVuIGZvciBwdXR0aW5nIG9uIHRoZSBoZWxtZXRzIGFuZCBkcmF3aW5nIG9mZiB0aGUgY292ZXJzIGZyb20gdGhlIHNoaWVsZHMuCiAgICAgICAgICAgICAgICAgICAgVG8gd2hhdGV2ZXIgcGFydCBhbnkgb25lIGJ5IGNoYW5jZSBjYW1lIGZyb20gdGhlIHdvcmtzIChpbiB3aGljaCBoZSBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGVtcGxveWVkKSwgYW5kIHdoYXRldmVyIHN0YW5kYXJkcyBoZSBzYXcgZmlyc3QsIGF0IHRoZXNlIGhlIHN0b29kLCBsZXN0IGluCiAgICAgICAgICAgICAgICAgICAgc2Vla2luZyBoaXMgb3duIGNvbXBhbnkgaGUgc2hvdWxkIGxvc2UgdGhlIHRpbWUgZm9yIGZpZ2h0aW5nLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgZ2l2ZW4gdGhlIG5lY2Vzc2FyeSBvcmRlcnMsIGhhc3RlbmVkIHRvCiAgICAgICAgICAgICAgICAgICAgYW5kIGZybyBpbnRvIHdoYXRldmVyIHF1YXJ0ZXIgZm9ydHVuZSBjYXJyaWVkIGhpbSwgdG8gYW5pbWF0ZSB0aGUgdHJvb3BzLCBhbmQKICAgICAgICAgICAgICAgICAgICBjYW1lIHRvIHRoZSB0ZW50aCBsZWdpb24uIEhhdmluZyBlbmNvdXJhZ2VkIHRoZSBzb2xkaWVycyB3aXRoIG5vIGZ1cnRoZXIgc3BlZWNoCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aGF0ICJ0aGV5IHNob3VsZCBrZWVwIHVwIHRoZSByZW1lbWJyYW5jZSBvZiB0aGVpciB3b250ZWQgdmFsb3IsIGFuZCBub3QgYmUKICAgICAgICAgICAgICAgICAgICBjb25mdXNlZCBpbiBtaW5kLCBidXQgdmFsaWFudGx5IHN1c3RhaW4gdGhlIGFzc2F1bHQgb2YgdGhlIGVuZW15IDsiIGFzIHRoZQogICAgICAgICAgICAgICAgICAgIGxhdHRlciB3ZXJlIG5vdCBmdXJ0aGVyIGZyb20gdGhlbSB0aGFuIHRoZSBkaXN0YW5jZSB0byB3aGljaCBhIGRhcnQgY291bGQgYmUKICAgICAgICAgICAgICAgICAgICBjYXN0LCBoZSBnYXZlIHRoZSBzaWduYWwgZm9yIGNvbW1lbmNpbmcgYmF0dGxlLiBBbmQgaGF2aW5nIGdvbmUgdG8gYW5vdGhlcgogICAgICAgICAgICAgICAgICAgIHF1YXJ0ZXIgZm9yIHRoZSBwdXJwb3NlIG9mIGVuY291cmFnaW5nIFt0aGUgc29sZGllcnNdLCBoZSBmaW5kcyB0aGVtIGZpZ2h0aW5nLgogICAgICAgICAgICAgICAgICAgIFN1Y2ggd2FzIHRoZSBzaG9ydG5lc3Mgb2YgdGhlIHRpbWUsIGFuZCBzbyBkZXRlcm1pbmVkIHdhcyB0aGUgbWluZCBvZiB0aGUgZW5lbXkKICAgICAgICAgICAgICAgICAgICBvbiBmaWdodGluZywgdGhhdCB0aW1lIHdhcyB3YW50aW5nIG5vdCBvbmx5IGZvciBhZmZpeGluZyB0aGUgbWlsaXRhcnkgaW5zaWduaWEsCiAgICAgICAgICAgICAgICAgICAgYnV0IGV2ZW4gZm9yIHB1dHRpbmcgb24gdGhlIGhlbG1ldHMgYW5kIGRyYXdpbmcgb2ZmIHRoZSBjb3ZlcnMgZnJvbSB0aGUgc2hpZWxkcy4KICAgICAgICAgICAgICAgICAgICBUbyB3aGF0ZXZlciBwYXJ0IGFueSBvbmUgYnkgY2hhbmNlIGNhbWUgZnJvbSB0aGUgd29ya3MgKGluIHdoaWNoIGhlIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgZW1wbG95ZWQpLCBhbmQgd2hhdGV2ZXIgc3RhbmRhcmRzIGhlIHNhdyBmaXJzdCwgYXQgdGhlc2UgaGUgc3Rvb2QsIGxlc3QgaW4KICAgICAgICAgICAgICAgICAgICBzZWVraW5nIGhpcyBvd24gY29tcGFueSBoZSBzaG91bGQgbG9zZSB0aGUgdGltZSBmb3IgZmlnaHRpbmcuIDwvdHJhbnNsYXRpb24+"
translation['2.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBhcm15IGhhdmluZyBiZWVuIG1hcnNoYWxlZCwgcmF0aGVyIGFzIHRoZSBuYXR1cmUgb2YgdGhlIGdyb3VuZCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjbGl2aXR5IG9mIHRoZSBoaWxsIGFuZCB0aGUgZXhpZ2VuY3kgb2YgdGhlIHRpbWUsIHRoYW4gYXMgdGhlIG1ldGhvZCBhbmQgb3JkZXIKICAgICAgICAgICAgICAgICAgICBvZiBtaWxpdGFyeSBtYXR0ZXJzIHJlcXVpcmVkOyB3aGlsZSB0aGUgbGVnaW9ucyBpbiB0aGUgZGlmZmVyZW50IHBsYWNlcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgd2l0aHN0YW5kaW5nIHRoZSBlbmVteSwgc29tZSBpbiBvbmUgcXVhcnRlciwgc29tZSBpbiBhbm90aGVyLCBhbmQgdGhlIHZpZXcgd2FzCiAgICAgICAgICAgICAgICAgICAgb2JzdHJ1Y3RlZCBieSB0aGUgdmVyeSB0aGljayBoZWRnZXMgaW50ZXJ2ZW5pbmcsIGFzIHdlIGhhdmUgYmVmb3JlIHJlbWFya2VkLAogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgY291bGQgcHJvcGVyIHJlc2VydmVzIGJlIHBvc3RlZCwgbm9yIGNvdWxkIHRoZSBuZWNlc3NhcnkgbWVhc3VyZXMgYmUKICAgICAgICAgICAgICAgICAgICB0YWtlbiBpbiBlYWNoIHBhcnQsIG5vciBjb3VsZCBhbGwgdGhlIGNvbW1hbmRzIGJlIGlzc3VlZCBieSBvbmUgcGVyc29uLgogICAgICAgICAgICAgICAgICAgIFRoZXJlZm9yZSwgaW4gc3VjaCBhbiB1bmZhdm9yYWJsZSBzdGF0ZSBvZiBhZmZhaXJzLCB2YXJpb3VzIGV2ZW50cyBvZiBmb3J0dW5lCiAgICAgICAgICAgICAgICAgICAgZm9sbG93ZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBzb2xkaWVycyBvZiB0aGUgbmludGggYW5kIHRlbnRoIGxlZ2lvbnMsIGFzIHRoZXkgaGFkIGJlZW4gc3RhdGlvbmVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGxlZnQgcGFydCBvZiB0aGUgYXJteSwgY2FzdGluZyB0aGVpciB3ZWFwb25zLCBzcGVlZGlseSBkcm92ZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdHJlYmF0ZXM8L25hbWU+IChmb3IgdGhhdCBkaXZpc2lvbiBoYWQgYmVlbiBvcHBvc2VkIHRvIHRoZW0sKSB3aG8KICAgICAgICAgICAgICAgICAgICB3ZXJlIGJyZWF0aGxlc3Mgd2l0aCBydW5uaW5nIGFuZCBmYXRpZ3VlLCBhbmQgd29ybiBvdXQgd2l0aCB3b3VuZHMsIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgaGlnaGVyIGdyb3VuZCBpbnRvIHRoZSByaXZlcjsgYW5kIGZvbGxvd2luZyB0aGVtIGFzIHRoZXkgd2VyZSBlbmRlYXZvcmluZyB0bwogICAgICAgICAgICAgICAgICAgIHBhc3MgaXQsIHNsZXcgd2l0aCB0aGVpciBzd29yZHMgYSBncmVhdCBwYXJ0IG9mIHRoZW0gd2hpbGUgaW1wZWRlZCAodGhlcmVpbikuCiAgICAgICAgICAgICAgICAgICAgVGhleSB0aGVtc2VsdmVzIGRpZCBub3QgaGVzaXRhdGUgdG8gcGFzcyB0aGUgcml2ZXI7IGFuZCBoYXZpbmcgYWR2YW5jZWQgdG8gYQogICAgICAgICAgICAgICAgICAgIGRpc2FkdmFudGFnZW91cyBwbGFjZSwgd2hlbiB0aGUgYmF0dGxlIHdhcyByZW5ld2VkLCB0aGV5IFtuZXZlcnRoZWxlc3NdIGFnYWluCiAgICAgICAgICAgICAgICAgICAgcHV0IHRvIGZsaWdodCB0aGUgZW5lbXksIHdobyBoYWQgcmV0dXJuZWQgYW5kIHdlcmUgb3Bwb3NpbmcgdGhlbS4gSW4gbGlrZQogICAgICAgICAgICAgICAgICAgIG1hbm5lciwgaW4gYW5vdGhlciBxdWFydGVyIHR3byBkaWZmZXJlbnQgbGVnaW9ucywgdGhlIGVsZXZlbnRoIGFuZCB0aGUgZWlnaHRoLAogICAgICAgICAgICAgICAgICAgIGhhdmluZyByb3V0ZWQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyb21hbmR1aTwvbmFtZT4sIHdpdGggd2hvbSB0aGV5IGhhZCBlbmdhZ2VkLCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZmlnaHRpbmcgZnJvbSB0aGUgaGlnaGVyIGdyb3VuZCB1cG9uIHRoZSB2ZXJ5IGJhbmtzIG9mIHRoZSByaXZlci4gQnV0LCBhbG1vc3QKICAgICAgICAgICAgICAgICAgICB0aGUgd2hvbGUgY2FtcCBvbiB0aGUgZnJvbnQgYW5kIG9uIHRoZSBsZWZ0IHNpZGUgYmVpbmcgdGhlbiBleHBvc2VkLCBzaW5jZSB0aGUKICAgICAgICAgICAgICAgICAgICB0d2VsZnRoIGxlZ2lvbiB3YXMgcG9zdGVkIGluIHRoZSByaWdodCB3aW5nLCBhbmQgdGhlIHNldmVudGggYXQgbm8gZ3JlYXQKICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSBmcm9tIGl0LCBhbGwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiwgaW4gYSB2ZXJ5IGNsb3NlIGJvZHksIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Cb2R1b2duYXR1czwvbmFtZT4sIHdobyBoZWxkIHRoZSBjaGllZiBjb21tYW5kLCBhcyB0aGVpciBsZWFkZXIsCiAgICAgICAgICAgICAgICAgICAgaGFzdGVuZWQgdG93YXJkIHRoYXQgcGxhY2U7IGFuZCBwYXJ0IG9mIHRoZW0gYmVnYW4gdG8gc3Vycm91bmQgdGhlIGxlZ2lvbnMgb24KICAgICAgICAgICAgICAgICAgICB0aGVpciB1bnByb3RlY3RlZCBmbGFuaywgcGFydCB0byBtYWtlIGZvciB0aGUgaGlnaGVzdCBwb2ludCBvZiB0aGUgZW5jYW1wbWVudC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXRyZWJhdGVzPC9uYW1lPiAoZm9yIHRoYXQgZGl2aXNpb24gaGFkIGJlZW4gb3Bwb3NlZCB0byB0aGVtLCkgd2hvCiAgICAgICAgICAgICAgICAgICAgd2VyZSBicmVhdGhsZXNzIHdpdGggcnVubmluZyBhbmQgZmF0aWd1ZSwgYW5kIHdvcm4gb3V0IHdpdGggd291bmRzLCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGhpZ2hlciBncm91bmQgaW50byB0aGUgcml2ZXI7IGFuZCBmb2xsb3dpbmcgdGhlbSBhcyB0aGV5IHdlcmUgZW5kZWF2b3JpbmcgdG8KICAgICAgICAgICAgICAgICAgICBwYXNzIGl0LCBzbGV3IHdpdGggdGhlaXIgc3dvcmRzIGEgZ3JlYXQgcGFydCBvZiB0aGVtIHdoaWxlIGltcGVkZWQgKHRoZXJlaW4pLgogICAgICAgICAgICAgICAgICAgIFRoZXkgdGhlbXNlbHZlcyBkaWQgbm90IGhlc2l0YXRlIHRvIHBhc3MgdGhlIHJpdmVyOyBhbmQgaGF2aW5nIGFkdmFuY2VkIHRvIGEKICAgICAgICAgICAgICAgICAgICBkaXNhZHZhbnRhZ2VvdXMgcGxhY2UsIHdoZW4gdGhlIGJhdHRsZSB3YXMgcmVuZXdlZCwgdGhleSBbbmV2ZXJ0aGVsZXNzXSBhZ2FpbgogICAgICAgICAgICAgICAgICAgIHB1dCB0byBmbGlnaHQgdGhlIGVuZW15LCB3aG8gaGFkIHJldHVybmVkIGFuZCB3ZXJlIG9wcG9zaW5nIHRoZW0uIEluIGxpa2UKICAgICAgICAgICAgICAgICAgICBtYW5uZXIsIGluIGFub3RoZXIgcXVhcnRlciB0d28gZGlmZmVyZW50IGxlZ2lvbnMsIHRoZSBlbGV2ZW50aCBhbmQgdGhlIGVpZ2h0aCwKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgcm91dGVkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcm9tYW5kdWk8L25hbWU+LCB3aXRoIHdob20gdGhleSBoYWQgZW5nYWdlZCwgd2VyZQogICAgICAgICAgICAgICAgICAgIGZpZ2h0aW5nIGZyb20gdGhlIGhpZ2hlciBncm91bmQgdXBvbiB0aGUgdmVyeSBiYW5rcyBvZiB0aGUgcml2ZXIuIEJ1dCwgYWxtb3N0CiAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIGNhbXAgb24gdGhlIGZyb250IGFuZCBvbiB0aGUgbGVmdCBzaWRlIGJlaW5nIHRoZW4gZXhwb3NlZCwgc2luY2UgdGhlCiAgICAgICAgICAgICAgICAgICAgdHdlbGZ0aCBsZWdpb24gd2FzIHBvc3RlZCBpbiB0aGUgcmlnaHQgd2luZywgYW5kIHRoZSBzZXZlbnRoIGF0IG5vIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgZnJvbSBpdCwgYWxsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sIGluIGEgdmVyeSBjbG9zZSBib2R5LCB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qm9kdW9nbmF0dXM8L25hbWU+LCB3aG8gaGVsZCB0aGUgY2hpZWYgY29tbWFuZCwgYXMgdGhlaXIgbGVhZGVyLAogICAgICAgICAgICAgICAgICAgIGhhc3RlbmVkIHRvd2FyZCB0aGF0IHBsYWNlOyBhbmQgcGFydCBvZiB0aGVtIGJlZ2FuIHRvIHN1cnJvdW5kIHRoZSBsZWdpb25zIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgdW5wcm90ZWN0ZWQgZmxhbmssIHBhcnQgdG8gbWFrZSBmb3IgdGhlIGhpZ2hlc3QgcG9pbnQgb2YgdGhlIGVuY2FtcG1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkF0IHRoZSBzYW1lIHRpbWUgb3VyIGhvcnNlbWVuLCBhbmQgbGlnaHQtYXJtZWQgaW5mYW50cnksIHdobyBoYWQgYmVlbiB3aXRoIHRob3NlLAogICAgICAgICAgICAgICAgICAgIHdobywgYXMgSSBoYXZlIHJlbGF0ZWQsIHdlcmUgcm91dGVkIGJ5IHRoZSBmaXJzdCBhc3NhdWx0IG9mIHRoZSBlbmVteSwgYXMgdGhleQogICAgICAgICAgICAgICAgICAgIHdlcmUgYmV0YWtpbmcgdGhlbXNlbHZlcyBpbnRvIHRoZSBjYW1wLCBtZXQgdGhlIGVuZW15IGZhY2UgdG8gZmFjZSwgYW5kIGFnYWluCiAgICAgICAgICAgICAgICAgICAgc291Z2h0IGZsaWdodCBpbnRvIGFub3RoZXIgcXVhcnRlcjsgYW5kIHRoZSBjYW1wLWZvbGxvd2VycyB3aG8gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWN1bWFuIEdhdGU8L25hbWU+LCBhbmQgZnJvbSB0aGUgaGlnaGVzdCByaWRnZSBvZiB0aGUgaGlsbCBoYWQgc2VlbgogICAgICAgICAgICAgICAgICAgIG91ciBtZW4gcGFzcyB0aGUgcml2ZXIgYXMgdmljdG9ycywgd2hlbiwgYWZ0ZXIgZ29pbmcgb3V0IGZvciB0aGUgcHVycG9zZXMgb2YKICAgICAgICAgICAgICAgICAgICBwbHVuZGVyaW5nLCB0aGV5IGxvb2tlZCBiYWNrIGFuZCBzYXcgdGhlIGVuZW15IHBhcmFkaW5nIGluIG91ciBjYW1wLCBjb21taXR0ZWQKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHByZWNpcGl0YXRlbHkgdG8gZmxpZ2h0OyBhdCB0aGUgc2FtZSB0aW1lIHRoZXJlIGFyb3NlIHRoZSBjcnkgYW5kCiAgICAgICAgICAgICAgICAgICAgc2hvdXQgb2YgdGhvc2Ugd2hvIGNhbWUgd2l0aCB0aGUgYmFnZ2FnZS10cmFpbjogYW5kIHRoZXkgKGFmZnJpZ2h0ZWQpLCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgY2FycmllZCBzb21lIG9uZSB3YXksIHNvbWUgYW5vdGhlci4gQnkgYWxsIHRoZXNlIGNpcmN1bXN0YW5jZXMgdGhlIGNhdmFscnkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDQ0NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3Ij5UcmV2aXJpPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiB3ZXJlIG11Y2ggYWxhcm1lZCwgKHdob3NlIHJlcHV0YXRpb24gZm9yIGNvdXJhZ2UgaXMgZXh0cmFvcmRpbmFyeSBhbW9uZwogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBhbmQgd2hvIGhhZCBjb21lIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYmVpbmcgc2VudCBieSB0aGVpciBzdGF0ZSBhcyBhdXhpbGlhcmllcyksIGFuZCwgd2hlbiB0aGV5CiAgICAgICAgICAgICAgICAgICAgc2F3IG91ciBjYW1wIGZpbGxlZCB3aXRoIGEgbGFyZ2UgbnVtYmVyIG9mIHRoZSBlbmVteSwgdGhlIGxlZ2lvbnMgaGFyZCBwcmVzc2VkCiAgICAgICAgICAgICAgICAgICAgYW5kIGFsbW9zdCBoZWxkIHN1cnJvdW5kZWQsIHRoZSBjYW1wLXJldGFpbmVycywgaG9yc2VtZW4sIHNsaW5nZXJzLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OdW1pZGlhbnM8L25hbWU+IGZsZWVpbmcgb24gYWxsIHNpZGVzIGRpdmlkZWQgYW5kIHNjYXR0ZXJlZCwgdGhleSwKICAgICAgICAgICAgICAgICAgICBkZXNwYWlyaW5nIG9mIG91ciBhZmZhaXJzLCBoYXN0ZW5lZCBob21lLCBhbmQgcmVsYXRlZCB0byB0aGVpciBzdGF0ZSB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiB3ZXJlIHJvdXRlZCBhbmQgY29ucXVlcmVkLCBbYW5kXSB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15IHdlcmUgaW4gcG9zc2Vzc2lvbiBvZiB0aGVpciBjYW1wIGFuZCBiYWdnYWdlLXRyYWluLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWN1bWFuIEdhdGU8L25hbWU+LCBhbmQgZnJvbSB0aGUgaGlnaGVzdCByaWRnZSBvZiB0aGUgaGlsbCBoYWQgc2VlbgogICAgICAgICAgICAgICAgICAgIG91ciBtZW4gcGFzcyB0aGUgcml2ZXIgYXMgdmljdG9ycywgd2hlbiwgYWZ0ZXIgZ29pbmcgb3V0IGZvciB0aGUgcHVycG9zZXMgb2YKICAgICAgICAgICAgICAgICAgICBwbHVuZGVyaW5nLCB0aGV5IGxvb2tlZCBiYWNrIGFuZCBzYXcgdGhlIGVuZW15IHBhcmFkaW5nIGluIG91ciBjYW1wLCBjb21taXR0ZWQKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHByZWNpcGl0YXRlbHkgdG8gZmxpZ2h0OyBhdCB0aGUgc2FtZSB0aW1lIHRoZXJlIGFyb3NlIHRoZSBjcnkgYW5kCiAgICAgICAgICAgICAgICAgICAgc2hvdXQgb2YgdGhvc2Ugd2hvIGNhbWUgd2l0aCB0aGUgYmFnZ2FnZS10cmFpbjogYW5kIHRoZXkgKGFmZnJpZ2h0ZWQpLCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgY2FycmllZCBzb21lIG9uZSB3YXksIHNvbWUgYW5vdGhlci4gQnkgYWxsIHRoZXNlIGNpcmN1bXN0YW5jZXMgdGhlIGNhdmFscnkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDQ0NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3Ij5UcmV2aXJpPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiB3ZXJlIG11Y2ggYWxhcm1lZCwgKHdob3NlIHJlcHV0YXRpb24gZm9yIGNvdXJhZ2UgaXMgZXh0cmFvcmRpbmFyeSBhbW9uZwogICAgICAgICAgICAgICAgICAgIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDQ0NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3Ij5UcmV2aXJpPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgYW5kIHdobyBoYWQgY29tZSB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGJlaW5nIHNlbnQgYnkgdGhlaXIgc3RhdGUgYXMgYXV4aWxpYXJpZXMpLCBhbmQsIHdoZW4gdGhleQogICAgICAgICAgICAgICAgICAgIHNhdyBvdXIgY2FtcCBmaWxsZWQgd2l0aCBhIGxhcmdlIG51bWJlciBvZiB0aGUgZW5lbXksIHRoZSBsZWdpb25zIGhhcmQgcHJlc3NlZAogICAgICAgICAgICAgICAgICAgIGFuZCBhbG1vc3QgaGVsZCBzdXJyb3VuZGVkLCB0aGUgY2FtcC1yZXRhaW5lcnMsIGhvcnNlbWVuLCBzbGluZ2VycywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TnVtaWRpYW5zPC9uYW1lPiBmbGVlaW5nIG9uIGFsbCBzaWRlcyBkaXZpZGVkIGFuZCBzY2F0dGVyZWQsIHRoZXksCiAgICAgICAgICAgICAgICAgICAgZGVzcGFpcmluZyBvZiBvdXIgYWZmYWlycywgaGFzdGVuZWQgaG9tZSwgYW5kIHJlbGF0ZWQgdG8gdGhlaXIgc3RhdGUgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gd2VyZSByb3V0ZWQgYW5kIGNvbnF1ZXJlZCwgW2FuZF0gdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSB3ZXJlIGluIHBvc3Nlc3Npb24gb2YgdGhlaXIgY2FtcCBhbmQgYmFnZ2FnZS10cmFpbi4gPC90cmFuc2xhdGlvbj4="
translation['2.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBwcm9jZWVkZWQsIGFmdGVyIGVuY291cmFnaW5nIHRoZSB0ZW50aCBsZWdpb24sIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpZ2h0IHdpbmc7IHdoZXJlIGhlIHBlcmNlaXZlZCB0aGF0IGhpcyBtZW4gd2VyZSBoYXJkIHByZXNzZWQsIGFuZCB0aGF0IGluCiAgICAgICAgICAgICAgICAgICAgY29uc2VxdWVuY2Ugb2YgdGhlIHN0YW5kYXJkcyBvZiB0aGUgdHdlbGZ0aCBsZWdpb24gYmVpbmcgY29sbGVjdGVkIHRvZ2V0aGVyIGluCiAgICAgICAgICAgICAgICAgICAgb25lIHBsYWNlLCB0aGUgY3Jvd2RlZCBzb2xkaWVycyB3ZXJlIGEgaGluZGVyYW5jZSB0byB0aGVtc2VsdmVzIGluIHRoZSBmaWdodDsKICAgICAgICAgICAgICAgICAgICB0aGF0IGFsbCB0aGUgY2VudHVyaW9ucyBvZiB0aGUgZm91cnRoIGNvaG9ydCB3ZXJlIHNsYWluLCBhbmQgdGhlIHN0YW5kYXJkLWJlYXJlcgogICAgICAgICAgICAgICAgICAgIGtpbGxlZCwgdGhlIHN0YW5kYXJkIGl0c2VsZiBsb3N0LCBhbG1vc3QgYWxsIHRoZSBjZW50dXJpb25zIG9mIHRoZSBvdGhlciBjb2hvcnRzCiAgICAgICAgICAgICAgICAgICAgZWl0aGVyIHdvdW5kZWQgb3Igc2xhaW4sIGFuZCBhbW9uZyB0aGVtIHRoZSBjaGllZiBjZW50dXJpb24gb2YgdGhlIGxlZ2lvbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlAuIFNleHRpdXMgQmFjdWx1czwvbmFtZT4sIGEgdmVyeSB2YWxpYW50IG1hbiwgd2hvIHdhcyBzbwogICAgICAgICAgICAgICAgICAgIGV4aGF1c3RlZCBieSBtYW55IGFuZCBzZXZlcmUgd291bmRzLCB0aGF0IGhlIHdhcyBhbHJlYWR5IHVuYWJsZSB0byBzdXBwb3J0CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZjsgaGUgbGlrZXdpc2UgcGVyY2VpdmVkIHRoYXQgdGhlIHJlc3Qgd2VyZSBzbGFja2VuaW5nIHRoZWlyIGVmZm9ydHMsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgc29tZSwgZGVzZXJ0ZWQgYnkgdGhvc2UgaW4gdGhlIHJlYXIsIHdlcmUgcmV0aXJpbmcgZnJvbSB0aGUgYmF0dGxlIGFuZAogICAgICAgICAgICAgICAgICAgIGF2b2lkaW5nIHRoZSB3ZWFwb25zOyB0aGF0IHRoZSBlbmVteSBbb24gdGhlIG90aGVyIGhhbmRdIHRob3VnaCBhZHZhbmNpbmcgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBsb3dlciBncm91bmQsIHdlcmUgbm90IHJlbGF4aW5nIGluIGZyb250LCBhbmQgd2VyZSBbYXQgdGhlIHNhbWUgdGltZV0KICAgICAgICAgICAgICAgICAgICBwcmVzc2luZyBoYXJkIG9uIGJvdGggZmxhbmtzOyBoZSBhbHNvIHBlcmNlaXZlZCB0aGF0IHRoZSBhZmZhaXIgd2FzIGF0IGEgY3Jpc2lzLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IHRoZXJlIHdhcyBub3QgYW55IHJlc2VydmUgd2hpY2ggY291bGQgYmUgYnJvdWdodCB1cCwgaGF2aW5nIHRoZXJlZm9yZQogICAgICAgICAgICAgICAgICAgIHNuYXRjaGVkIGEgc2hpZWxkIGZyb20gb25lIG9mIHRoZSBzb2xkaWVycyBpbiB0aGUgcmVhciAoZm9yIGhlIGhpbXNlbGYgaGFkIGNvbWUKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGEgc2hpZWxkKSwgaGUgYWR2YW5jZWQgdG8gdGhlIGZyb250IG9mIHRoZSBsaW5lLCBhbmQgYWRkcmVzc2luZyB0aGUKICAgICAgICAgICAgICAgICAgICBjZW50dXJpb25zIGJ5IG5hbWUsIGFuZCBlbmNvdXJhZ2luZyB0aGUgcmVzdCBvZiB0aGUgc29sZGllcnMsIGhlIG9yZGVyZWQgdGhlbSB0bwogICAgICAgICAgICAgICAgICAgIGNhcnJ5IGZvcndhcmQgdGhlIHN0YW5kYXJkcywgYW5kIGV4dGVuZCB0aGUgY29tcGFuaWVzLCB0aGF0IHRoZXkgbWlnaHQgdGhlIG1vcmUKICAgICAgICAgICAgICAgICAgICBlYXNpbHkgdXNlIHRoZWlyIHN3b3Jkcy4gT24gaGlzIGFycml2YWwsIGFzIGhvcGUgd2FzIGJyb3VnaHQgdG8gdGhlIHNvbGRpZXJzIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGNvdXJhZ2UgcmVzdG9yZWQsIHdoaWxlIGV2ZXJ5IG9uZSBmb3IgaGlzIG93biBwYXJ0LCBpbiB0aGUgc2lnaHQgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCwgZGVzaXJlZCB0byBleGVydCBoaXMgdXRtb3N0IGVuZXJneSwgdGhlIGltcGV0dW9zaXR5IG9mIHRoZSBlbmVteSB3YXMgYQogICAgICAgICAgICAgICAgICAgIGxpdHRsZSBjaGVja2VkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHByb2NlZWRlZCwgYWZ0ZXIgZW5jb3VyYWdpbmcgdGhlIHRlbnRoIGxlZ2lvbiwgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgcmlnaHQgd2luZzsgd2hlcmUgaGUgcGVyY2VpdmVkIHRoYXQgaGlzIG1lbiB3ZXJlIGhhcmQgcHJlc3NlZCwgYW5kIHRoYXQgaW4KICAgICAgICAgICAgICAgICAgICBjb25zZXF1ZW5jZSBvZiB0aGUgc3RhbmRhcmRzIG9mIHRoZSB0d2VsZnRoIGxlZ2lvbiBiZWluZyBjb2xsZWN0ZWQgdG9nZXRoZXIgaW4KICAgICAgICAgICAgICAgICAgICBvbmUgcGxhY2UsIHRoZSBjcm93ZGVkIHNvbGRpZXJzIHdlcmUgYSBoaW5kZXJhbmNlIHRvIHRoZW1zZWx2ZXMgaW4gdGhlIGZpZ2h0OwogICAgICAgICAgICAgICAgICAgIHRoYXQgYWxsIHRoZSBjZW50dXJpb25zIG9mIHRoZSBmb3VydGggY29ob3J0IHdlcmUgc2xhaW4sIGFuZCB0aGUgc3RhbmRhcmQtYmVhcmVyCiAgICAgICAgICAgICAgICAgICAga2lsbGVkLCB0aGUgc3RhbmRhcmQgaXRzZWxmIGxvc3QsIGFsbW9zdCBhbGwgdGhlIGNlbnR1cmlvbnMgb2YgdGhlIG90aGVyIGNvaG9ydHMKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgd291bmRlZCBvciBzbGFpbiwgYW5kIGFtb25nIHRoZW0gdGhlIGNoaWVmIGNlbnR1cmlvbiBvZiB0aGUgbGVnaW9uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UC4gU2V4dGl1cyBCYWN1bHVzPC9uYW1lPiwgYSB2ZXJ5IHZhbGlhbnQgbWFuLCB3aG8gd2FzIHNvCiAgICAgICAgICAgICAgICAgICAgZXhoYXVzdGVkIGJ5IG1hbnkgYW5kIHNldmVyZSB3b3VuZHMsIHRoYXQgaGUgd2FzIGFscmVhZHkgdW5hYmxlIHRvIHN1cHBvcnQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmOyBoZSBsaWtld2lzZSBwZXJjZWl2ZWQgdGhhdCB0aGUgcmVzdCB3ZXJlIHNsYWNrZW5pbmcgdGhlaXIgZWZmb3J0cywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBzb21lLCBkZXNlcnRlZCBieSB0aG9zZSBpbiB0aGUgcmVhciwgd2VyZSByZXRpcmluZyBmcm9tIHRoZSBiYXR0bGUgYW5kCiAgICAgICAgICAgICAgICAgICAgYXZvaWRpbmcgdGhlIHdlYXBvbnM7IHRoYXQgdGhlIGVuZW15IFtvbiB0aGUgb3RoZXIgaGFuZF0gdGhvdWdoIGFkdmFuY2luZyBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIGxvd2VyIGdyb3VuZCwgd2VyZSBub3QgcmVsYXhpbmcgaW4gZnJvbnQsIGFuZCB3ZXJlIFthdCB0aGUgc2FtZSB0aW1lXQogICAgICAgICAgICAgICAgICAgIHByZXNzaW5nIGhhcmQgb24gYm90aCBmbGFua3M7IGhlIGFsc28gcGVyY2VpdmVkIHRoYXQgdGhlIGFmZmFpciB3YXMgYXQgYSBjcmlzaXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgdGhlcmUgd2FzIG5vdCBhbnkgcmVzZXJ2ZSB3aGljaCBjb3VsZCBiZSBicm91Z2h0IHVwLCBoYXZpbmcgdGhlcmVmb3JlCiAgICAgICAgICAgICAgICAgICAgc25hdGNoZWQgYSBzaGllbGQgZnJvbSBvbmUgb2YgdGhlIHNvbGRpZXJzIGluIHRoZSByZWFyIChmb3IgaGUgaGltc2VsZiBoYWQgY29tZQogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgYSBzaGllbGQpLCBoZSBhZHZhbmNlZCB0byB0aGUgZnJvbnQgb2YgdGhlIGxpbmUsIGFuZCBhZGRyZXNzaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGNlbnR1cmlvbnMgYnkgbmFtZSwgYW5kIGVuY291cmFnaW5nIHRoZSByZXN0IG9mIHRoZSBzb2xkaWVycywgaGUgb3JkZXJlZCB0aGVtIHRvCiAgICAgICAgICAgICAgICAgICAgY2FycnkgZm9yd2FyZCB0aGUgc3RhbmRhcmRzLCBhbmQgZXh0ZW5kIHRoZSBjb21wYW5pZXMsIHRoYXQgdGhleSBtaWdodCB0aGUgbW9yZQogICAgICAgICAgICAgICAgICAgIGVhc2lseSB1c2UgdGhlaXIgc3dvcmRzLiBPbiBoaXMgYXJyaXZhbCwgYXMgaG9wZSB3YXMgYnJvdWdodCB0byB0aGUgc29sZGllcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY291cmFnZSByZXN0b3JlZCwgd2hpbGUgZXZlcnkgb25lIGZvciBoaXMgb3duIHBhcnQsIGluIHRoZSBzaWdodCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsLCBkZXNpcmVkIHRvIGV4ZXJ0IGhpcyB1dG1vc3QgZW5lcmd5LCB0aGUgaW1wZXR1b3NpdHkgb2YgdGhlIGVuZW15IHdhcyBhCiAgICAgICAgICAgICAgICAgICAgbGl0dGxlIGNoZWNrZWQuIDwvdHJhbnNsYXRpb24+"
translation['2.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgd2hlbiBoZSBwZXJjZWl2ZWQgdGhhdCB0aGUgc2V2ZW50aCBsZWdpb24sIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgc3Rvb2QgY2xvc2UgYnkgaGltLCB3YXMgYWxzbyBoYXJkIHByZXNzZWQgYnkgdGhlIGVuZW15LCBkaXJlY3RlZCB0aGUgdHJpYnVuZXMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgc29sZGllcnMgdG8gZWZmZWN0IGEganVuY3Rpb24gb2YgdGhlIGxlZ2lvbnMgZ3JhZHVhbGx5LCBhbmQgbWFrZSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNoYXJnZSB1cG9uIHRoZSBlbmVteSB3aXRoIGEgZG91YmxlIGZyb250OyB3aGljaCBoYXZpbmcgYmVlbiBkb25lLCBzaW5jZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBhc3Npc3RhbmNlIHRoZSBvbmUgdG8gdGhlIG90aGVyLCBub3IgZmVhcmVkIGxlc3QgdGhlaXIgcmVhciBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBzdXJyb3VuZGVkIGJ5IHRoZSBlbmVteSwgdGhleSBiZWdhbiB0byBzdGFuZCB0aGVpciBncm91bmQgbW9yZSBib2xkbHksIGFuZCB0bwogICAgICAgICAgICAgICAgICAgIGZpZ2h0IG1vcmUgY291cmFnZW91c2x5LiBJbiB0aGUgbWVhbiB0aW1lLCB0aGUgc29sZGllcnMgb2YgdGhlIHR3byBsZWdpb25zIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gaW4gdGhlIHJlYXIgb2YgdGhlIGFybXksIGFzIGEgZ3VhcmQgZm9yIHRoZSBiYWdnYWdlLXRyYWluLCB1cG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGJhdHRsZSBiZWluZyByZXBvcnRlZCB0byB0aGVtLCBxdWlja2VuZWQgdGhlaXIgcGFjZSwgYW5kIHdlcmUgc2VlbiBieSB0aGUgZW5lbXkKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgdG9wIG9mIHRoZSBoaWxsOyBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaXR1cyBMYWJpZW51czwvbmFtZT4sIGhhdmluZyBnYWluZWQKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uIG9mIHRoZSBjYW1wIG9mIHRoZSBlbmVteSwgYW5kIG9ic2VydmVkIGZyb20gdGhlIGhpZ2hlciBncm91bmQgd2hhdAogICAgICAgICAgICAgICAgICAgIHdhcyBnb2luZyBvbiBpbiBvdXIgY2FtcCwgc2VudCB0aGUgdGVudGggbGVnaW9uIGFzIGEgcmVsaWVmIHRvIG91ciBtZW4sIHdobywKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXkgaGFkIGxlYXJuZWQgZnJvbSB0aGUgZmxpZ2h0IG9mIHRoZSBob3JzZSBhbmQgdGhlIHN1dGxlcnMgaW4gd2hhdAogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uIHRoZSBhZmZhaXIgd2FzLCBhbmQgaW4gaG93IGdyZWF0IGRhbmdlciB0aGUgY2FtcCBhbmQgdGhlIGxlZ2lvbiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZGVyIHdlcmUgaW52b2x2ZWQsIGxlZnQgdW5kb25lIG5vdGhpbmcgW3doaWNoIHRlbmRlZF0gdG8gZGlzcGF0Y2guCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHdoZW4gaGUgcGVyY2VpdmVkIHRoYXQgdGhlIHNldmVudGggbGVnaW9uLCB3aGljaAogICAgICAgICAgICAgICAgICAgIHN0b29kIGNsb3NlIGJ5IGhpbSwgd2FzIGFsc28gaGFyZCBwcmVzc2VkIGJ5IHRoZSBlbmVteSwgZGlyZWN0ZWQgdGhlIHRyaWJ1bmVzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHNvbGRpZXJzIHRvIGVmZmVjdCBhIGp1bmN0aW9uIG9mIHRoZSBsZWdpb25zIGdyYWR1YWxseSwgYW5kIG1ha2UgdGhlaXIKICAgICAgICAgICAgICAgICAgICBjaGFyZ2UgdXBvbiB0aGUgZW5lbXkgd2l0aCBhIGRvdWJsZSBmcm9udDsgd2hpY2ggaGF2aW5nIGJlZW4gZG9uZSwgc2luY2UgdGhleQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgYXNzaXN0YW5jZSB0aGUgb25lIHRvIHRoZSBvdGhlciwgbm9yIGZlYXJlZCBsZXN0IHRoZWlyIHJlYXIgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgc3Vycm91bmRlZCBieSB0aGUgZW5lbXksIHRoZXkgYmVnYW4gdG8gc3RhbmQgdGhlaXIgZ3JvdW5kIG1vcmUgYm9sZGx5LCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICBmaWdodCBtb3JlIGNvdXJhZ2VvdXNseS4gSW4gdGhlIG1lYW4gdGltZSwgdGhlIHNvbGRpZXJzIG9mIHRoZSB0d28gbGVnaW9ucyB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIGluIHRoZSByZWFyIG9mIHRoZSBhcm15LCBhcyBhIGd1YXJkIGZvciB0aGUgYmFnZ2FnZS10cmFpbiwgdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBiYXR0bGUgYmVpbmcgcmVwb3J0ZWQgdG8gdGhlbSwgcXVpY2tlbmVkIHRoZWlyIHBhY2UsIGFuZCB3ZXJlIHNlZW4gYnkgdGhlIGVuZW15CiAgICAgICAgICAgICAgICAgICAgb24gdGhlIHRvcCBvZiB0aGUgaGlsbDsgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGl0dXMgTGFiaWVudXM8L25hbWU+LCBoYXZpbmcgZ2FpbmVkCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiBvZiB0aGUgY2FtcCBvZiB0aGUgZW5lbXksIGFuZCBvYnNlcnZlZCBmcm9tIHRoZSBoaWdoZXIgZ3JvdW5kIHdoYXQKICAgICAgICAgICAgICAgICAgICB3YXMgZ29pbmcgb24gaW4gb3VyIGNhbXAsIHNlbnQgdGhlIHRlbnRoIGxlZ2lvbiBhcyBhIHJlbGllZiB0byBvdXIgbWVuLCB3aG8sCiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGV5IGhhZCBsZWFybmVkIGZyb20gdGhlIGZsaWdodCBvZiB0aGUgaG9yc2UgYW5kIHRoZSBzdXRsZXJzIGluIHdoYXQKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiB0aGUgYWZmYWlyIHdhcywgYW5kIGluIGhvdyBncmVhdCBkYW5nZXIgdGhlIGNhbXAgYW5kIHRoZSBsZWdpb24gYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbW1hbmRlciB3ZXJlIGludm9sdmVkLCBsZWZ0IHVuZG9uZSBub3RoaW5nIFt3aGljaCB0ZW5kZWRdIHRvIGRpc3BhdGNoLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ5IHRoZWlyIGFycml2YWwsIHNvIGdyZWF0IGEgY2hhbmdlIG9mIG1hdHRlcnMgd2FzIG1hZGUsIHRoYXQgb3VyIG1lbiwgZXZlbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyBoYWQgZmFsbGVuIGRvd24gZXhoYXVzdGVkIHdpdGggd291bmRzLCBsZWFuZWQgb24gdGhlaXIgc2hpZWxkcywgYW5kIHJlbmV3ZWQKICAgICAgICAgICAgICAgICAgICB0aGUgZmlnaHQ6IHRoZW4gdGhlIGNhbXAtcmV0YWluZXJzLCB0aG91Z2ggdW5hcm1lZCwgc2VlaW5nIHRoZSBlbmVteSBjb21wbGV0ZWx5CiAgICAgICAgICAgICAgICAgICAgZGlzbWF5ZWQsIGF0dGFja2VkIFt0aGVtIHRob3VnaF0gYXJtZWQ7IHRoZSBob3JzZW1lbiB0b28sIHRoYXQgdGhleSBtaWdodCBieQogICAgICAgICAgICAgICAgICAgIHRoZWlyIHZhbG9yIGJsb3QgdGhlIGRpc2dyYWNlIG9mIHRoZWlyIGZsaWdodCwgdGhydXN0IHRoZW1zZWx2ZXMgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIGxlZ2lvbmFyeSBzb2xkaWVycyBpbiBhbGwgcGFydHMgb2YgdGhlIGJhdHRsZS4gQnV0IHRoZSBlbmVteSwgZXZlbiBpbiB0aGUgbGFzdAogICAgICAgICAgICAgICAgICAgIGhvcGUgb2Ygc2FmZXR5LCBkaXNwbGF5ZWQgc3VjaCBncmVhdCBjb3VyYWdlLCB0aGF0IHdoZW4gdGhlIGZvcmVtb3N0IG9mIHRoZW0gaGFkCiAgICAgICAgICAgICAgICAgICAgZmFsbGVuLCB0aGUgbmV4dCBzdG9vZCB1cG9uIHRoZW0gcHJvc3RyYXRlLCBhbmQgZm91Z2h0IGZyb20gdGhlaXIgYm9kaWVzOyB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugd2VyZSBvdmVydGhyb3duLCBhbmQgdGhlaXIgY29ycHNlcyBoZWFwZWQgdXAgdG9nZXRoZXIsIHRob3NlIHdobyBzdXJ2aXZlZAogICAgICAgICAgICAgICAgICAgIGNhc3QgdGhlaXIgd2VhcG9ucyBhZ2FpbnN0IG91ciBtZW4gW3RoZW5jZV0sIGFzIGZyb20gYSBtb3VuZCwgYW5kIHJldHVybmVkIG91cgogICAgICAgICAgICAgICAgICAgIGRhcnRzIHdoaWNoIGhhZCBmYWxsZW4gc2hvcnQgYmV0d2VlbiBbdGhlIGFybWllc107IHNvIHRoYXQgaXQgb3VnaHQgbm90IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgY29uY2x1ZGVkLCB0aGF0IG1lbiBvZiBzdWNoIGdyZWF0IGNvdXJhZ2UgaGFkIGluanVkaWNpb3VzbHkgZGFyZWQgdG8gcGFzcyBhIHZlcnkKICAgICAgICAgICAgICAgICAgICBicm9hZCByaXZlciwgYXNjZW5kIHZlcnkgaGlnaCBiYW5rcywgYW5kIGNvbWUgdXAgdG8gYSB2ZXJ5IGRpc2FkdmFudGFnZW91cwogICAgICAgICAgICAgICAgICAgIHBsYWNlOyBzaW5jZSB0aGVpciBncmVhdG5lc3Mgb2Ygc3Bpcml0IGhhZCByZW5kZXJlZCB0aGVzZSBhY3Rpb25zIGVhc3ksIGFsdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlbXNlbHZlcyB2ZXJ5IGRpZmZpY3VsdC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgYmF0dGxlIGJlaW5nIGVuZGVkLCBhbmQgdGhlIG5hdGlvbiBhbmQgbmFtZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+IGJlaW5nCiAgICAgICAgICAgICAgICAgICAgYWxtb3N0IHJlZHVjZWQgdG8gYW5uaWhpbGF0aW9uLCB0aGVpciBvbGQgbWVuLCB3aG9tIHRvZ2V0aGVyIHdpdGggdGhlIGJveXMgYW5kCiAgICAgICAgICAgICAgICAgICAgd29tZW4gd2UgaGF2ZSBzdGF0ZWQgdG8gaGF2ZSBiZWVuIGNvbGxlY3RlZCB0b2dldGhlciBpbiB0aGUgZmVubnkgcGxhY2VzIGFuZAogICAgICAgICAgICAgICAgICAgIG1hcnNoZXMsIG9uIHRoaXMgYmF0dGxlIGhhdmluZyBiZWVuIHJlcG9ydGVkIHRvIHRoZW0sIHNpbmNlIHRoZXkgd2VyZSBjb252aW5jZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IG5vdGhpbmcgd2FzIGFuIG9ic3RhY2xlIHRvIHRoZSBjb25xdWVyb3JzLCBhbmQgbm90aGluZyBzYWZlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnF1ZXJlZCwgc2VudCBlbWJhc3NhZG9ycyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYnkgdGhlIGNvbnNlbnQgb2YKICAgICAgICAgICAgICAgICAgICBhbGwgd2hvIHJlbWFpbmVkLCBhbmQgc3VycmVuZGVyZWQgdGhlbXNlbHZlcyB0byBoaW07IGFuZCBpbiByZWNvdW50aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbGFtaXR5IG9mIHRoZWlyIHN0YXRlLCBzYWlkIHRoYXQgdGhlaXIgc2VuYXRvcnMgd2VyZSByZWR1Y2VkIGZyb20gNjAwIHRvCiAgICAgICAgICAgICAgICAgICAgdGhyZWU7IHRoYXQgZnJvbSA2MCwwMDAgbWVuIHRoZXkgW3dlcmUgcmVkdWNlZF0gdG8gc2NhcmNlbHkgNTAwIHdobyBjb3VsZCBiZWFyCiAgICAgICAgICAgICAgICAgICAgYXJtczsgd2hvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHRoYXQgaGUgbWlnaHQgYXBwZWFyIHRvIHVzZQogICAgICAgICAgICAgICAgICAgIGNvbXBhc3Npb24gdG93YXJkIHRoZSB3cmV0Y2hlZCBhbmQgdGhlIHN1cHBsaWFudCwgbW9zdCBjYXJlZnVsbHkgc3BhcmVkOyBhbmQKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIHRoZW0gdG8gZW5qb3kgdGhlaXIgb3duIHRlcnJpdG9yaWVzIGFuZCB0b3ducywgYW5kIGNvbW1hbmRlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIG5laWdoYm9ycyB0aGF0IHRoZXkgc2hvdWxkIHJlc3RyYWluIHRoZW1zZWx2ZXMgYW5kIHRoZWlyIGRlcGVuZGVudHMgZnJvbQogICAgICAgICAgICAgICAgICAgIG9mZmVyaW5nIGluanVyeSBvciBvdXRyYWdlIFt0byB0aGVtXS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiBiZWluZwogICAgICAgICAgICAgICAgICAgIGFsbW9zdCByZWR1Y2VkIHRvIGFubmloaWxhdGlvbiwgdGhlaXIgb2xkIG1lbiwgd2hvbSB0b2dldGhlciB3aXRoIHRoZSBib3lzIGFuZAogICAgICAgICAgICAgICAgICAgIHdvbWVuIHdlIGhhdmUgc3RhdGVkIHRvIGhhdmUgYmVlbiBjb2xsZWN0ZWQgdG9nZXRoZXIgaW4gdGhlIGZlbm55IHBsYWNlcyBhbmQKICAgICAgICAgICAgICAgICAgICBtYXJzaGVzLCBvbiB0aGlzIGJhdHRsZSBoYXZpbmcgYmVlbiByZXBvcnRlZCB0byB0aGVtLCBzaW5jZSB0aGV5IHdlcmUgY29udmluY2VkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBub3RoaW5nIHdhcyBhbiBvYnN0YWNsZSB0byB0aGUgY29ucXVlcm9ycywgYW5kIG5vdGhpbmcgc2FmZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjb25xdWVyZWQsIHNlbnQgZW1iYXNzYWRvcnMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGJ5IHRoZSBjb25zZW50IG9mCiAgICAgICAgICAgICAgICAgICAgYWxsIHdobyByZW1haW5lZCwgYW5kIHN1cnJlbmRlcmVkIHRoZW1zZWx2ZXMgdG8gaGltOyBhbmQgaW4gcmVjb3VudGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBjYWxhbWl0eSBvZiB0aGVpciBzdGF0ZSwgc2FpZCB0aGF0IHRoZWlyIHNlbmF0b3JzIHdlcmUgcmVkdWNlZCBmcm9tIDYwMCB0bwogICAgICAgICAgICAgICAgICAgIHRocmVlOyB0aGF0IGZyb20gNjAsMDAwIG1lbiB0aGV5IFt3ZXJlIHJlZHVjZWRdIHRvIHNjYXJjZWx5IDUwMCB3aG8gY291bGQgYmVhcgogICAgICAgICAgICAgICAgICAgIGFybXM7IHdob20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCB0aGF0IGhlIG1pZ2h0IGFwcGVhciB0byB1c2UKICAgICAgICAgICAgICAgICAgICBjb21wYXNzaW9uIHRvd2FyZCB0aGUgd3JldGNoZWQgYW5kIHRoZSBzdXBwbGlhbnQsIG1vc3QgY2FyZWZ1bGx5IHNwYXJlZDsgYW5kCiAgICAgICAgICAgICAgICAgICAgb3JkZXJlZCB0aGVtIHRvIGVuam95IHRoZWlyIG93biB0ZXJyaXRvcmllcyBhbmQgdG93bnMsIGFuZCBjb21tYW5kZWQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMgdGhhdCB0aGV5IHNob3VsZCByZXN0cmFpbiB0aGVtc2VsdmVzIGFuZCB0aGVpciBkZXBlbmRlbnRzIGZyb20KICAgICAgICAgICAgICAgICAgICBvZmZlcmluZyBpbmp1cnkgb3Igb3V0cmFnZSBbdG8gdGhlbV0uIDwvdHJhbnNsYXRpb24+"
translation['2.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXR1Y2k8L25hbWU+LCBvZiB3aG9tIHdlIGhhdmUgd3JpdHRlbiBhYm92ZSwgd2VyZSBjb21pbmcgdXAKICAgICAgICAgICAgICAgICAgICB3aXRoIGFsbCB0aGVpciBmb3JjZXMgdG8gdGhlIGFzc2lzdGFuY2Ugb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiwgdXBvbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlIGJlaW5nIHJlcG9ydGVkIHRvIHRoZW0sIHRoZXkgcmV0dXJuZWQgaG9tZSBhZnRlciB0aGV5IHdlcmUgb24gdGhlIG1hcmNoOwogICAgICAgICAgICAgICAgICAgIGRlc2VydGluZyBhbGwgdGhlaXIgdG93bnMgYW5kIGZvcnRzLCB0aGV5IGNvbnZleWVkIHRvZ2V0aGVyIGFsbCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb25zIGludG8gb25lIHRvd24sIGVtaW5lbnRseSBmb3J0aWZpZWQgYnkgbmF0dXJlLiBXaGlsZSB0aGlzIHRvd24gaGFkIG9uCiAgICAgICAgICAgICAgICAgICAgYWxsIHNpZGVzIGFyb3VuZCBpdCB2ZXJ5IGhpZ2ggcm9ja3MgYW5kIHByZWNpcGljZXMsIHRoZXJlIHdhcyBsZWZ0IG9uIG9uZSBzaWRlIGEKICAgICAgICAgICAgICAgICAgICBnZW50bHkgYXNjZW5kaW5nIGFwcHJvYWNoLCBvZiBub3QgbW9yZSB0aGFuIDIwMCBmZWV0IGluIHdpZHRoOyB3aGljaCBwbGFjZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGZvcnRpZmllZCB3aXRoIGEgdmVyeSBsb2Z0eSBkb3VibGUgd2FsbDogYmVzaWRlcywgdGhleSBoYWQgcGxhY2VkIHN0b25lcyBvZgogICAgICAgICAgICAgICAgICAgIGdyZWF0IHdlaWdodCBhbmQgc2hhcnBlbmVkIHN0YWtlcyB1cG9uIHRoZSB3YWxscy4gVGhleSB3ZXJlIGRlc2NlbmRlZCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpbWJyaTwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGV1dG9uZXM8L25hbWU+LCB3aG8sIHdoZW4gdGhleSB3ZXJlIG1hcmNoaW5nCiAgICAgICAgICAgICAgICAgICAgaW50byBvdXIgcHJvdmluY2UgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPiwgaGF2aW5nIGRlcG9zaXRlZAogICAgICAgICAgICAgICAgICAgIG9uIHRoaXMgc2lkZSB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBzdWNoIG9mIHRoZWlyIGJhZ2dhZ2UtdHJhaW5zIGFzIHRoZXkgY291bGQgbm90IGRyaXZlIG9yIGNvbnZleSB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgbGVmdCA2LDAwMCBvZiB0aGVpciBtZW4gYXMgYSBndWFyZCBhbmQgZGVmZW5zZSBmb3IgdGhlbS4gVGhlc2UgaGF2aW5nLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGVpciBjb3VudHJ5bWVuLCBiZWVuIGhhcmFzc2VkIGZvciBtYW55IHllYXJzIGJ5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3JzLCB3aGlsZSBvbmUgdGltZSB0aGV5IHdhZ2VkIHdhciBvZmZlbnNpdmVseSwgYW5kIGF0IGFub3RoZXIgcmVzaXN0ZWQgaXQKICAgICAgICAgICAgICAgICAgICB3aGVuIHdhZ2VkIGFnYWluc3QgdGhlbSwgY29uY2x1ZGVkIGEgcGVhY2Ugd2l0aCB0aGUgY29uc2VudCBvZiBhbGwsIGFuZCBjaG9zZQogICAgICAgICAgICAgICAgICAgIHRoaXMgcGxhY2UgYXMgdGhlaXIgc2V0dGxlbWVudC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXR1Y2k8L25hbWU+LCBvZiB3aG9tIHdlIGhhdmUgd3JpdHRlbiBhYm92ZSwgd2VyZSBjb21pbmcgdXAKICAgICAgICAgICAgICAgICAgICB3aXRoIGFsbCB0aGVpciBmb3JjZXMgdG8gdGhlIGFzc2lzdGFuY2Ugb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiwgdXBvbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlIGJlaW5nIHJlcG9ydGVkIHRvIHRoZW0sIHRoZXkgcmV0dXJuZWQgaG9tZSBhZnRlciB0aGV5IHdlcmUgb24gdGhlIG1hcmNoOwogICAgICAgICAgICAgICAgICAgIGRlc2VydGluZyBhbGwgdGhlaXIgdG93bnMgYW5kIGZvcnRzLCB0aGV5IGNvbnZleWVkIHRvZ2V0aGVyIGFsbCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb25zIGludG8gb25lIHRvd24sIGVtaW5lbnRseSBmb3J0aWZpZWQgYnkgbmF0dXJlLiBXaGlsZSB0aGlzIHRvd24gaGFkIG9uCiAgICAgICAgICAgICAgICAgICAgYWxsIHNpZGVzIGFyb3VuZCBpdCB2ZXJ5IGhpZ2ggcm9ja3MgYW5kIHByZWNpcGljZXMsIHRoZXJlIHdhcyBsZWZ0IG9uIG9uZSBzaWRlIGEKICAgICAgICAgICAgICAgICAgICBnZW50bHkgYXNjZW5kaW5nIGFwcHJvYWNoLCBvZiBub3QgbW9yZSB0aGFuIDIwMCBmZWV0IGluIHdpZHRoOyB3aGljaCBwbGFjZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGZvcnRpZmllZCB3aXRoIGEgdmVyeSBsb2Z0eSBkb3VibGUgd2FsbDogYmVzaWRlcywgdGhleSBoYWQgcGxhY2VkIHN0b25lcyBvZgogICAgICAgICAgICAgICAgICAgIGdyZWF0IHdlaWdodCBhbmQgc2hhcnBlbmVkIHN0YWtlcyB1cG9uIHRoZSB3YWxscy4gVGhleSB3ZXJlIGRlc2NlbmRlZCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpbWJyaTwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGV1dG9uZXM8L25hbWU+LCB3aG8sIHdoZW4gdGhleSB3ZXJlIG1hcmNoaW5nCiAgICAgICAgICAgICAgICAgICAgaW50byBvdXIgcHJvdmluY2UgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPiwgaGF2aW5nIGRlcG9zaXRlZAogICAgICAgICAgICAgICAgICAgIG9uIHRoaXMgc2lkZSB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyNjExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiPlJoaW5lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBzdWNoIG9mIHRoZWlyIGJhZ2dhZ2UtdHJhaW5zIGFzIHRoZXkgY291bGQgbm90IGRyaXZlIG9yIGNvbnZleSB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgbGVmdCA2LDAwMCBvZiB0aGVpciBtZW4gYXMgYSBndWFyZCBhbmQgZGVmZW5zZSBmb3IgdGhlbS4gVGhlc2UgaGF2aW5nLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGVpciBjb3VudHJ5bWVuLCBiZWVuIGhhcmFzc2VkIGZvciBtYW55IHllYXJzIGJ5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3JzLCB3aGlsZSBvbmUgdGltZSB0aGV5IHdhZ2VkIHdhciBvZmZlbnNpdmVseSwgYW5kIGF0IGFub3RoZXIgcmVzaXN0ZWQgaXQKICAgICAgICAgICAgICAgICAgICB3aGVuIHdhZ2VkIGFnYWluc3QgdGhlbSwgY29uY2x1ZGVkIGEgcGVhY2Ugd2l0aCB0aGUgY29uc2VudCBvZiBhbGwsIGFuZCBjaG9zZQogICAgICAgICAgICAgICAgICAgIHRoaXMgcGxhY2UgYXMgdGhlaXIgc2V0dGxlbWVudC4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTI2MTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSI+UmhpbmU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBvbiB0aGUgZmlyc3QgYXJyaXZhbCBvZiBvdXIgYXJteSB0aGV5IG1hZGUgZnJlcXVlbnQgc2FsbGllcyBmcm9tIHRoZSB0b3duLAogICAgICAgICAgICAgICAgICAgIGFuZCBjb250ZW5kZWQgd2l0aCBvdXIgbWVuIGluIHRyaWZsaW5nIHNraXJtaXNoZXM7IGFmdGVyd2FyZCwgd2hlbiBoZW1tZWQgaW4gYnkKICAgICAgICAgICAgICAgICAgICBhIHJhbXBhcnQgb2YgdHdlbHZlIGZlZXQgW2luIGhlaWdodF0sIGFuZCBmaWZ0ZWVuIG1pbGVzIGluIGNpcmN1aXQsIHRoZXkga2VwdAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgd2l0aGluIHRoZSB0b3duLiBXaGVuLCB2aW5lYWUgaGF2aW5nIGJlZW4gYnJvdWdodCB1cCBhbmQgYSBtb3VuZAogICAgICAgICAgICAgICAgICAgIHJhaXNlZCwgdGhleSBvYnNlcnZlZCB0aGF0IGEgdG93ZXIgYWxzbyB3YXMgYmVpbmcgYnVpbHQgYXQgYSBkaXN0YW5jZSwgdGhleSBhdAogICAgICAgICAgICAgICAgICAgIGZpcnN0IGJlZ2FuIHRvIG1vY2sgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGZyb20gdGhlaXIgd2FsbCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gdGF1bnQgdGhlbSB3aXRoIHRoZSBmb2xsb3dpbmcgc3BlZWNoZXMuICJGb3Igd2hhdCBwdXJwb3NlIHdhcyBzbyB2YXN0IGEKICAgICAgICAgICAgICAgICAgICBtYWNoaW5lIGNvbnN0cnVjdGVkIGF0IHNvIGdyZWF0IGEgZGlzdGFuY2U/IFdpdGggd2hhdCBoYW5kcywiIG9yICJ3aXRoIHdoYXQKICAgICAgICAgICAgICAgICAgICBzdHJlbmd0aCBkaWQgdGhleSwgZXNwZWNpYWxseSBbYXMgdGhleSB3ZXJlXSBtZW4gb2Ygc3VjaCB2ZXJ5IHNtYWxsIHN0YXR1cmUiCiAgICAgICAgICAgICAgICAgICAgKGZvciBvdXIgc2hvcnRuZXNzIG9mIHN0YXR1cmUsIGluIGNvbXBhcmlzb24gdG8gdGhlIGdyZWF0IHNpemUgb2YgdGhlaXIgYm9kaWVzLAogICAgICAgICAgICAgICAgICAgIGlzIGdlbmVyYWxseSBhIHN1YmplY3Qgb2YgbXVjaCBjb250ZW1wdCB0byB0aGUgbWVuIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPikgInRydXN0IHRvCiAgICAgICAgICAgICAgICAgICAgcGxhY2UgYWdhaW5zdCB0aGVpciB3YWxscyBhIHRvd2VyIG9mIHN1Y2ggZ3JlYXQgd2VpZ2h0LiIgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGZyb20gdGhlaXIgd2FsbCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gdGF1bnQgdGhlbSB3aXRoIHRoZSBmb2xsb3dpbmcgc3BlZWNoZXMuICJGb3Igd2hhdCBwdXJwb3NlIHdhcyBzbyB2YXN0IGEKICAgICAgICAgICAgICAgICAgICBtYWNoaW5lIGNvbnN0cnVjdGVkIGF0IHNvIGdyZWF0IGEgZGlzdGFuY2U/IFdpdGggd2hhdCBoYW5kcywiIG9yICJ3aXRoIHdoYXQKICAgICAgICAgICAgICAgICAgICBzdHJlbmd0aCBkaWQgdGhleSwgZXNwZWNpYWxseSBbYXMgdGhleSB3ZXJlXSBtZW4gb2Ygc3VjaCB2ZXJ5IHNtYWxsIHN0YXR1cmUiCiAgICAgICAgICAgICAgICAgICAgKGZvciBvdXIgc2hvcnRuZXNzIG9mIHN0YXR1cmUsIGluIGNvbXBhcmlzb24gdG8gdGhlIGdyZWF0IHNpemUgb2YgdGhlaXIgYm9kaWVzLAogICAgICAgICAgICAgICAgICAgIGlzIGdlbmVyYWxseSBhIHN1YmplY3Qgb2YgbXVjaCBjb250ZW1wdCB0byB0aGUgbWVuIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPikgInRydXN0IHRvCiAgICAgICAgICAgICAgICAgICAgcGxhY2UgYWdhaW5zdCB0aGVpciB3YWxscyBhIHRvd2VyIG9mIHN1Y2ggZ3JlYXQgd2VpZ2h0LiIgPC90cmFuc2xhdGlvbj4="
translation['2.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aGVuIHRoZXkgc2F3IHRoYXQgaXQgd2FzIGJlaW5nIG1vdmVkLCBhbmQgd2FzIGFwcHJvYWNoaW5nIHRoZWlyIHdhbGxzLAogICAgICAgICAgICAgICAgICAgIHN0YXJ0bGVkIGJ5IHRoZSBuZXcgYW5kIHVuYWNjdXN0b21lZCBzaWdodCwgdGhleSBzZW50IGVtYmFzc2Fkb3JzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBbdG8gdHJlYXRdIGFib3V0IHBlYWNlOyB3aG8gc3Bva2UgaW4gdGhlIGZvbGxvd2luZwogICAgICAgICAgICAgICAgICAgIG1hbm5lcjogIlRoYXQgdGhleSBkaWQgbm90IGJlbGlldmUgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHdhZ2VkCiAgICAgICAgICAgICAgICAgICAgd2FyIHdpdGhvdXQgZGl2aW5lIGFpZCwgc2luY2UgdGhleSB3ZXJlIGFibGUgdG8gbW92ZSBmb3J3YXJkIG1hY2hpbmVzIG9mIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIGhlaWdodCB3aXRoIHNvIGdyZWF0IHNwZWVkLCBhbmQgdGh1cyBmaWdodCBmcm9tIGNsb3NlIHF1YXJ0ZXJzOyB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICByZXNpZ25lZCB0aGVtc2VsdmVzIGFuZCBhbGwgdGhlaXIgcG9zc2Vzc2lvbnMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5bQ2Flc2FyPC9uYW1lPidzXQogICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FsOiB0aGF0IHRoZXkgYmVnZ2VkIGFuZCBlYXJuZXN0bHkgZW50cmVhdGVkIG9uZSB0aGluZywgdml6LiwgdGhhdCBpZgogICAgICAgICAgICAgICAgICAgIHBlcmNoYW5jZSwgYWdyZWVhYmxlIHRvIGhpcyBjbGVtZW5jeSBhbmQgaHVtYW5pdHksIHdoaWNoIHRoZXkgaGFkIGhlYXJkIG9mIGZyb20KICAgICAgICAgICAgICAgICAgICBvdGhlcnMsIGhlIHNob3VsZCByZXNvbHZlIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXR1Y2k8L25hbWU+IHdlcmUgdG8gYmUgc3BhcmVkLCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5vdCBkZXByaXZlIHRoZW0gb2YgdGhlaXIgYXJtczsgdGhhdCBhbGwgdGhlaXIgbmVpZ2hib3JzIHdlcmUgZW5lbWllcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZW0gYW5kIGVudmllZCB0aGVpciBjb3VyYWdlLCBmcm9tIHdob20gdGhleSBjb3VsZCBub3QgZGVmZW5kIHRoZW1zZWx2ZXMgaWYKICAgICAgICAgICAgICAgICAgICB0aGVpciBhcm1zIHdlcmUgZGVsaXZlcmVkIHVwOiB0aGF0IGl0IHdhcyBiZXR0ZXIgZm9yIHRoZW0sIGlmIHRoZXkgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgcmVkdWNlZCB0byB0aGF0IHN0YXRlLCB0byBzdWZmZXIgYW55IGZhdGUgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIHRoYW4gdG8gYmUgdG9ydHVyZWQgdG8gZGVhdGggYnkgdGhvc2UgYW1vbmcgd2hvbSB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gYWNjdXN0b21lZCB0byBydWxlLiIgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBbdG8gdHJlYXRdIGFib3V0IHBlYWNlOyB3aG8gc3Bva2UgaW4gdGhlIGZvbGxvd2luZwogICAgICAgICAgICAgICAgICAgIG1hbm5lcjogIlRoYXQgdGhleSBkaWQgbm90IGJlbGlldmUgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHdhZ2VkCiAgICAgICAgICAgICAgICAgICAgd2FyIHdpdGhvdXQgZGl2aW5lIGFpZCwgc2luY2UgdGhleSB3ZXJlIGFibGUgdG8gbW92ZSBmb3J3YXJkIG1hY2hpbmVzIG9mIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIGhlaWdodCB3aXRoIHNvIGdyZWF0IHNwZWVkLCBhbmQgdGh1cyBmaWdodCBmcm9tIGNsb3NlIHF1YXJ0ZXJzOyB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICByZXNpZ25lZCB0aGVtc2VsdmVzIGFuZCBhbGwgdGhlaXIgcG9zc2Vzc2lvbnMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5bQ2Flc2FyPC9uYW1lPidzXQogICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FsOiB0aGF0IHRoZXkgYmVnZ2VkIGFuZCBlYXJuZXN0bHkgZW50cmVhdGVkIG9uZSB0aGluZywgdml6LiwgdGhhdCBpZgogICAgICAgICAgICAgICAgICAgIHBlcmNoYW5jZSwgYWdyZWVhYmxlIHRvIGhpcyBjbGVtZW5jeSBhbmQgaHVtYW5pdHksIHdoaWNoIHRoZXkgaGFkIGhlYXJkIG9mIGZyb20KICAgICAgICAgICAgICAgICAgICBvdGhlcnMsIGhlIHNob3VsZCByZXNvbHZlIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXR1Y2k8L25hbWU+IHdlcmUgdG8gYmUgc3BhcmVkLCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5vdCBkZXByaXZlIHRoZW0gb2YgdGhlaXIgYXJtczsgdGhhdCBhbGwgdGhlaXIgbmVpZ2hib3JzIHdlcmUgZW5lbWllcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZW0gYW5kIGVudmllZCB0aGVpciBjb3VyYWdlLCBmcm9tIHdob20gdGhleSBjb3VsZCBub3QgZGVmZW5kIHRoZW1zZWx2ZXMgaWYKICAgICAgICAgICAgICAgICAgICB0aGVpciBhcm1zIHdlcmUgZGVsaXZlcmVkIHVwOiB0aGF0IGl0IHdhcyBiZXR0ZXIgZm9yIHRoZW0sIGlmIHRoZXkgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgcmVkdWNlZCB0byB0aGF0IHN0YXRlLCB0byBzdWZmZXIgYW55IGZhdGUgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIHRoYW4gdG8gYmUgdG9ydHVyZWQgdG8gZGVhdGggYnkgdGhvc2UgYW1vbmcgd2hvbSB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gYWNjdXN0b21lZCB0byBydWxlLiIgPC90cmFuc2xhdGlvbj4="
translation['2.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRvIHRoZXNlIHRoaW5ncyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gcmVwbGllZCwgIlRoYXQgaGUsIGluIGFjY29yZGFuY2UKICAgICAgICAgICAgICAgICAgICB3aXRoIGhpcyBjdXN0b20sIHJhdGhlciB0aGFuIG93aW5nIHRvIHRoZWlyIGRlc2VydCwgc2hvdWxkIHNwYXJlIHRoZSBzdGF0ZSwgaWYKICAgICAgICAgICAgICAgICAgICB0aGV5IHNob3VsZCBzdXJyZW5kZXIgdGhlbXNlbHZlcyBiZWZvcmUgdGhlIGJhdHRlcmluZy1yYW0gc2hvdWxkIHRvdWNoIHRoZSB3YWxsOwogICAgICAgICAgICAgICAgICAgIGJ1dCB0aGF0IHRoZXJlIHdhcyBubyBjb25kaXRpb24gb2Ygc3VycmVuZGVyLCBleGNlcHQgdXBvbiB0aGVpciBhcm1zIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgZGVsaXZlcmVkIHVwOyB0aGF0IGhlIHNob3VsZCBkbyB0byB0aGVtIHRoYXQgd2hpY2ggaGUgaGFkIGRvbmUgaW4gdGhlIGNhc2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+LCBhbmQgd291bGQgY29tbWFuZCB0aGVpciBuZWlnaGJvcnMgbm90IHRvIG9mZmVyIGFueQogICAgICAgICAgICAgICAgICAgIGluanVyeSB0byB0aG9zZSB3aG8gaGFkIHN1cnJlbmRlcmVkIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgcGVvcGxlLiIgVGhlIG1hdHRlciBiZWluZyByZXBvcnRlZCB0byB0aGVpciBjb3VudHJ5bWVuLCB0aGV5IHNhaWQgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd291bGQgZXhlY3V0ZSBoaXMgY29tbWFuZHMuIEhhdmluZyBjYXN0IGEgdmVyeSBsYXJnZSBxdWFudGl0eSBvZiB0aGVpciBhcm1zIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgd2FsbCBpbnRvIHRoZSB0cmVuY2ggdGhhdCB3YXMgYmVmb3JlIHRoZSB0b3duLCBzbyB0aGF0IHRoZSBoZWFwcyBvZiBhcm1zCiAgICAgICAgICAgICAgICAgICAgYWxtb3N0IGVxdWFsbGVkIHRoZSB0b3Agb2YgdGhlIHdhbGwgYW5kIHRoZSByYW1wYXJ0LCBhbmQgbmV2ZXJ0aGVsZXNzIGhhdmluZwogICAgICAgICAgICAgICAgICAgIHJldGFpbmVkIGFuZCBjb25jZWFsZWQsIGFzIHdlIGFmdGVyd2FyZCBkaXNjb3ZlcmVkLCBhYm91dCBhIHRoaXJkIHBhcnQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgdG93biwgdGhlIGdhdGVzIHdlcmUgb3BlbmVkLCBhbmQgdGhleSBlbmpveWVkIHBlYWNlIGZvciB0aGF0IGRheS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiByZXBsaWVkLCAiVGhhdCBoZSwgaW4gYWNjb3JkYW5jZQogICAgICAgICAgICAgICAgICAgIHdpdGggaGlzIGN1c3RvbSwgcmF0aGVyIHRoYW4gb3dpbmcgdG8gdGhlaXIgZGVzZXJ0LCBzaG91bGQgc3BhcmUgdGhlIHN0YXRlLCBpZgogICAgICAgICAgICAgICAgICAgIHRoZXkgc2hvdWxkIHN1cnJlbmRlciB0aGVtc2VsdmVzIGJlZm9yZSB0aGUgYmF0dGVyaW5nLXJhbSBzaG91bGQgdG91Y2ggdGhlIHdhbGw7CiAgICAgICAgICAgICAgICAgICAgYnV0IHRoYXQgdGhlcmUgd2FzIG5vIGNvbmRpdGlvbiBvZiBzdXJyZW5kZXIsIGV4Y2VwdCB1cG9uIHRoZWlyIGFybXMgYmVpbmcKICAgICAgICAgICAgICAgICAgICBkZWxpdmVyZWQgdXA7IHRoYXQgaGUgc2hvdWxkIGRvIHRvIHRoZW0gdGhhdCB3aGljaCBoZSBoYWQgZG9uZSBpbiB0aGUgY2FzZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sIGFuZCB3b3VsZCBjb21tYW5kIHRoZWlyIG5laWdoYm9ycyBub3QgdG8gb2ZmZXIgYW55CiAgICAgICAgICAgICAgICAgICAgaW5qdXJ5IHRvIHRob3NlIHdobyBoYWQgc3VycmVuZGVyZWQgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUuIiBUaGUgbWF0dGVyIGJlaW5nIHJlcG9ydGVkIHRvIHRoZWlyIGNvdW50cnltZW4sIHRoZXkgc2FpZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICB3b3VsZCBleGVjdXRlIGhpcyBjb21tYW5kcy4gSGF2aW5nIGNhc3QgYSB2ZXJ5IGxhcmdlIHF1YW50aXR5IG9mIHRoZWlyIGFybXMgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSB3YWxsIGludG8gdGhlIHRyZW5jaCB0aGF0IHdhcyBiZWZvcmUgdGhlIHRvd24sIHNvIHRoYXQgdGhlIGhlYXBzIG9mIGFybXMKICAgICAgICAgICAgICAgICAgICBhbG1vc3QgZXF1YWxsZWQgdGhlIHRvcCBvZiB0aGUgd2FsbCBhbmQgdGhlIHJhbXBhcnQsIGFuZCBuZXZlcnRoZWxlc3MgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgcmV0YWluZWQgYW5kIGNvbmNlYWxlZCwgYXMgd2UgYWZ0ZXJ3YXJkIGRpc2NvdmVyZWQsIGFib3V0IGEgdGhpcmQgcGFydCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB0b3duLCB0aGUgZ2F0ZXMgd2VyZSBvcGVuZWQsIGFuZCB0aGV5IGVuam95ZWQgcGVhY2UgZm9yIHRoYXQgZGF5LiA8L3RyYW5zbGF0aW9uPg=="
translation['2.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRvd2FyZCBldmVuaW5nIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBvcmRlcmVkIHRoZSBnYXRlcyB0byBiZSBzaHV0LCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgc29sZGllcnMgdG8gZ28gb3V0IG9mIHRoZSB0b3duLCBsZXN0IHRoZSB0b3ducy1wZW9wbGUgc2hvdWxkIHJlY2VpdmUgYW55CiAgICAgICAgICAgICAgICAgICAgaW5qdXJ5IGZyb20gdGhlbSBieSBuaWdodC4gVGhleSBbdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXR1Y2ldPC9uYW1lPiwgYnkgYSBkZXNpZ24gYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZCBpbnRvLCBhcyB3ZSBhZnRlcndhcmRzIHVuZGVyc3Rvb2QsIGJlY2F1c2UgdGhleSBiZWxpZXZlZCB0aGF0LCBhcyBhCiAgICAgICAgICAgICAgICAgICAgc3VycmVuZGVyIGhhZCBiZWVuIG1hZGUsIG91ciBtZW4gd291bGQgZGlzbWlzcyB0aGVpciBndWFyZHMsIG9yIGF0IGxlYXN0IHdvdWxkCiAgICAgICAgICAgICAgICAgICAga2VlcCB3YXRjaCBsZXNzIGNhcmVmdWxseSwgcGFydGx5IHdpdGggdGhvc2UgYXJtcyB3aGljaCB0aGV5IGhhZCByZXRhaW5lZCBhbmQKICAgICAgICAgICAgICAgICAgICBjb25jZWFsZWQsIHBhcnRseSB3aXRoIHNoaWVsZHMgbWFkZSBvZiBiYXJrIG9yIGludGVyd292ZW4gd2lja2Vycywgd2hpY2ggdGhleQogICAgICAgICAgICAgICAgICAgIGhhZCBoYXN0aWx5IGNvdmVyZWQgb3ZlciB3aXRoIHNraW5zLCAoYXMgdGhlIHNob3J0bmVzcyBvZiB0aW1lIHJlcXVpcmVkKSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB0aGlyZCB3YXRjaCwgc3VkZGVubHkgbWFkZSBhIHNhbGx5IGZyb20gdGhlIHRvd24gd2l0aCBhbGwgdGhlaXIgZm9yY2VzIFtpbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uXSBpbiB3aGljaCB0aGUgYXNjZW50IHRvIG91ciBmb3J0aWZpY2F0aW9ucyBzZWVtZWQgdGhlIGxlYXN0IGRpZmZpY3VsdC4KICAgICAgICAgICAgICAgICAgICBUaGUgc2lnbmFsIGhhdmluZyBiZWVuIGltbWVkaWF0ZWx5IGdpdmVuIGJ5IGZpcmVzLCBhcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIHByZXZpb3VzbHkgY29tbWVuZGVkLCBhIHJ1c2ggd2FzIG1hZGUgdGhpdGhlciBbaS4gZS4gYnkKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBzb2xkaWVyc10gZnJvbSB0aGUgbmVhcmVzdCBmb3J0OyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlIHdhcyBmb3VnaHQgYnkgdGhlIGVuZW15IGFzIHZpZ29yb3VzbHkgYXMgaXQgb3VnaHQgdG8gYmUgZm91Z2h0IGJ5IGJyYXZlCiAgICAgICAgICAgICAgICAgICAgbWVuLCBpbiB0aGUgbGFzdCBob3BlIG9mIHNhZmV0eSwgaW4gYSBkaXNhZHZhbnRhZ2VvdXMgcGxhY2UsIGFuZCBhZ2FpbnN0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIHdlcmUgdGhyb3dpbmcgdGhlaXIgd2VhcG9ucyBmcm9tIGEgcmFtcGFydCBhbmQgZnJvbSB0b3dlcnM7IHNpbmNlIGFsbCBob3BlCiAgICAgICAgICAgICAgICAgICAgb2Ygc2FmZXR5IGRlcGVuZGVkIG9uIHRoZWlyIGNvdXJhZ2UgYWxvbmUuIEFib3V0IDQsMDAwIG9mIHRoZSBtZW4gaGF2aW5nIGJlZW4KICAgICAgICAgICAgICAgICAgICBzbGFpbiwgdGhlIHJlc3Qgd2VyZSBmb3JjZWQgYmFjayBpbnRvIHRoZSB0b3duLiBUaGUgZGF5IGFmdGVyLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGFmdGVyIGJyZWFraW5nIG9wZW4gdGhlIGdhdGVzLCB3aGljaCB0aGVyZSB3YXMgbm8gb25lIHRoZW4KICAgICAgICAgICAgICAgICAgICB0byBkZWZlbmQsIGFuZCBzZW5kaW5nIGluIG91ciBzb2xkaWVycywgc29sZCB0aGUgd2hvbGUgc3BvaWwgb2YgdGhhdCB0b3duLiBUaGUKICAgICAgICAgICAgICAgICAgICBudW1iZXIgb2YgNTMsMDAwIHBlcnNvbnMgd2FzIHJlcG9ydGVkIHRvIGhpbSBieSB0aG9zZSB3aG8gaGFkIGJvdWdodCB0aGVtLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9yZGVyZWQgdGhlIGdhdGVzIHRvIGJlIHNodXQsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBzb2xkaWVycyB0byBnbyBvdXQgb2YgdGhlIHRvd24sIGxlc3QgdGhlIHRvd25zLXBlb3BsZSBzaG91bGQgcmVjZWl2ZSBhbnkKICAgICAgICAgICAgICAgICAgICBpbmp1cnkgZnJvbSB0aGVtIGJ5IG5pZ2h0LiBUaGV5IFt0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZHVhdHVjaV08L25hbWU+LCBieSBhIGRlc2lnbiBiZWZvcmUKICAgICAgICAgICAgICAgICAgICBlbnRlcmVkIGludG8sIGFzIHdlIGFmdGVyd2FyZHMgdW5kZXJzdG9vZCwgYmVjYXVzZSB0aGV5IGJlbGlldmVkIHRoYXQsIGFzIGEKICAgICAgICAgICAgICAgICAgICBzdXJyZW5kZXIgaGFkIGJlZW4gbWFkZSwgb3VyIG1lbiB3b3VsZCBkaXNtaXNzIHRoZWlyIGd1YXJkcywgb3IgYXQgbGVhc3Qgd291bGQKICAgICAgICAgICAgICAgICAgICBrZWVwIHdhdGNoIGxlc3MgY2FyZWZ1bGx5LCBwYXJ0bHkgd2l0aCB0aG9zZSBhcm1zIHdoaWNoIHRoZXkgaGFkIHJldGFpbmVkIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbmNlYWxlZCwgcGFydGx5IHdpdGggc2hpZWxkcyBtYWRlIG9mIGJhcmsgb3IgaW50ZXJ3b3ZlbiB3aWNrZXJzLCB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGhhc3RpbHkgY292ZXJlZCBvdmVyIHdpdGggc2tpbnMsIChhcyB0aGUgc2hvcnRuZXNzIG9mIHRpbWUgcmVxdWlyZWQpIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHRoaXJkIHdhdGNoLCBzdWRkZW5seSBtYWRlIGEgc2FsbHkgZnJvbSB0aGUgdG93biB3aXRoIGFsbCB0aGVpciBmb3JjZXMgW2luIHRoYXQKICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25dIGluIHdoaWNoIHRoZSBhc2NlbnQgdG8gb3VyIGZvcnRpZmljYXRpb25zIHNlZW1lZCB0aGUgbGVhc3QgZGlmZmljdWx0LgogICAgICAgICAgICAgICAgICAgIFRoZSBzaWduYWwgaGF2aW5nIGJlZW4gaW1tZWRpYXRlbHkgZ2l2ZW4gYnkgZmlyZXMsIGFzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgcHJldmlvdXNseSBjb21tZW5kZWQsIGEgcnVzaCB3YXMgbWFkZSB0aGl0aGVyIFtpLiBlLiBieQogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHNvbGRpZXJzXSBmcm9tIHRoZSBuZWFyZXN0IGZvcnQ7IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBiYXR0bGUgd2FzIGZvdWdodCBieSB0aGUgZW5lbXkgYXMgdmlnb3JvdXNseSBhcyBpdCBvdWdodCB0byBiZSBmb3VnaHQgYnkgYnJhdmUKICAgICAgICAgICAgICAgICAgICBtZW4sIGluIHRoZSBsYXN0IGhvcGUgb2Ygc2FmZXR5LCBpbiBhIGRpc2FkdmFudGFnZW91cyBwbGFjZSwgYW5kIGFnYWluc3QgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gd2VyZSB0aHJvd2luZyB0aGVpciB3ZWFwb25zIGZyb20gYSByYW1wYXJ0IGFuZCBmcm9tIHRvd2Vyczsgc2luY2UgYWxsIGhvcGUKICAgICAgICAgICAgICAgICAgICBvZiBzYWZldHkgZGVwZW5kZWQgb24gdGhlaXIgY291cmFnZSBhbG9uZS4gQWJvdXQgNCwwMDAgb2YgdGhlIG1lbiBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIHNsYWluLCB0aGUgcmVzdCB3ZXJlIGZvcmNlZCBiYWNrIGludG8gdGhlIHRvd24uIFRoZSBkYXkgYWZ0ZXIsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYWZ0ZXIgYnJlYWtpbmcgb3BlbiB0aGUgZ2F0ZXMsIHdoaWNoIHRoZXJlIHdhcyBubyBvbmUgdGhlbgogICAgICAgICAgICAgICAgICAgIHRvIGRlZmVuZCwgYW5kIHNlbmRpbmcgaW4gb3VyIHNvbGRpZXJzLCBzb2xkIHRoZSB3aG9sZSBzcG9pbCBvZiB0aGF0IHRvd24uIFRoZQogICAgICAgICAgICAgICAgICAgIG51bWJlciBvZiA1MywwMDAgcGVyc29ucyB3YXMgcmVwb3J0ZWQgdG8gaGltIGJ5IHRob3NlIHdobyBoYWQgYm91Z2h0IHRoZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkF0IHRoZSBzYW1lIHRpbWUgaGUgd2FzIGluZm9ybWVkIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UC4gQ3Jhc3N1czwvbmFtZT4sIHdob20gaGUKICAgICAgICAgICAgICAgICAgICBoYWQgc2VudCB3aXRoIG9uZSBsZWdpb24gYWdhaW5zdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZW5ldGk8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5VbmVsbGk8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pc2lzbWlpPC9uYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DdXJpb3NvbGl0YWU8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXN1dmlpPC9uYW1lPiwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXVsZXJjaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJoZWRvbmVzPC9uYW1lPiwgd2hpY2ggYXJlIG1hcml0aW1lIHN0YXRlcywgYW5kIHRvdWNoIHVwb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNDIwNiIgcmVnPSJBdGxhbnRpYyBPY2VhbiBbLTQwLDFdIChvY2VhbikiIHR5cGU9InBsYWNlIj5bQXRsYW50aWNdIG9jZWFuPC9uYW1lPiwgdGhhdCBhbGwgdGhlc2UgbmF0aW9ucyB3ZXJlIGJyb3VnaHQgdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgZG9taW5pb24gYW5kIHBvd2VyIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UC4gQ3Jhc3N1czwvbmFtZT4sIHdob20gaGUKICAgICAgICAgICAgICAgICAgICBoYWQgc2VudCB3aXRoIG9uZSBsZWdpb24gYWdhaW5zdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZW5ldGk8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5VbmVsbGk8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pc2lzbWlpPC9uYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DdXJpb3NvbGl0YWU8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXN1dmlpPC9uYW1lPiwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXVsZXJjaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJoZWRvbmVzPC9uYW1lPiwgd2hpY2ggYXJlIG1hcml0aW1lIHN0YXRlcywgYW5kIHRvdWNoIHVwb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNDIwNiIgcmVnPSJBdGxhbnRpYyBPY2VhbiBbLTQwLDFdIChvY2VhbikiIHR5cGU9InBsYWNlIj5bQXRsYW50aWNdIG9jZWFuPC9uYW1lPiwgdGhhdCBhbGwgdGhlc2UgbmF0aW9ucyB3ZXJlIGJyb3VnaHQgdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgZG9taW5pb24gYW5kIHBvd2VyIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['2.35'] = ""
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3YXMgc2V0dGluZyBvdXQgZm9yIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPiwgaGUKICAgICAgICAgICAgICAgICAgICBzZW50IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2Vydml1cyBHYWxiYTwvbmFtZT4gd2l0aCB0aGUgdHdlbGZ0aCBsZWdpb24gYW5kIHBhcnQgb2YgdGhlIGNhdmFscnksCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OYW50dWF0ZXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJhZ3JpPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VkdW5pPC9uYW1lPiwgd2hvIGV4dGVuZCBmcm9tIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGxvYnJvZ2VzPC9uYW1lPiwgYW5kIHRoZSBsYWtlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNzI3OSIgcmVnPSIgICtHZW5ldmUgWzYuMTUsNDYuMjE2XSAoaW5oYWJpdGVkIHBsYWNlKSwgR2VuZXZlLCBTd2l0emVybGFuZCwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlbmV2YSA8L25hbWU+LCBhbmQgdGhlIFJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAyMzg5MCIgcmVnPSJSaG9uZSBbNC44MzMsNDMuMzMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaG9uZSA8L25hbWU+IHRvIHRoZSB0b3Agb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNzc0NiIgcmVnPSJBbHBzIChtb3VudGFpbiBzeXN0ZW0pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BbHBzPC9uYW1lPi4gVGhlIHJlYXNvbiBmb3Igc2VuZGluZyBoaW0gd2FzLCB0aGF0IGhlIGRlc2lyZWQgdGhhdCB0aGUgcGFzcwogICAgICAgICAgICAgICAgICAgIGFsb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDc3NDYiIHJlZz0iQWxwcyAobW91bnRhaW4gc3lzdGVtKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QWxwcyA8L25hbWU+LCB0aHJvdWdoIHdoaWNoIFt0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Sb21hbl08L25hbWU+IG1lcmNoYW50cyBoYWQgYmVlbiBhY2N1c3RvbWVkIHRvIHRyYXZlbCB3aXRoIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZGFuZ2VyLCBhbmQgdW5kZXIgZ3JlYXQgaW1wb3N0cywgc2hvdWxkIGJlIG9wZW5lZC4gSGUgcGVybWl0dGVkIGhpbSwgaWYgaGUKICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IGl0IG5lY2Vzc2FyeSwgdG8gc3RhdGlvbiB0aGUgbGVnaW9uIGluIHRoZXNlIHBsYWNlcywgZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgICAgICAgICAgICAgd2ludGVyaW5nLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGJhPC9uYW1lPiBoYXZpbmcgZm91Z2h0IHNvbWUgc3VjY2Vzc2Z1bCBiYXR0bGVzIGFuZCBzdG9ybWVkCiAgICAgICAgICAgICAgICAgICAgc2V2ZXJhbCBvZiB0aGVpciBmb3J0cywgdXBvbiBlbWJhc3NhZG9ycyBiZWluZyBzZW50IHRvIGhpbSBmcm9tIGFsbCBwYXJ0cyBhbmQKICAgICAgICAgICAgICAgICAgICBob3N0YWdlcyBnaXZlbiBhbmQgYSBwZWFjZSBjb25jbHVkZWQsIGRldGVybWluZWQgdG8gc3RhdGlvbiB0d28gY29ob3J0cyBhbW9uZwogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5hbnR1YXRlczwvbmFtZT4sIGFuZCB0byB3aW50ZXIgaW4gcGVyc29uIHdpdGggdGhlIG90aGVyIGNvaG9ydHMgb2YKICAgICAgICAgICAgICAgICAgICB0aGF0IGxlZ2lvbiBpbiBhIHZpbGxhZ2Ugb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyYWdyaTwvbmFtZT4sIHdoaWNoIGlzIGNhbGxlZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk9jdG9kdXJ1czwvbmFtZT47IGFuZCB0aGlzIHZpbGxhZ2UgYmVpbmcgc2l0dWF0ZWQgaW4gYSB2YWxsZXksIHdpdGggYQogICAgICAgICAgICAgICAgICAgIHNtYWxsIHBsYWluIGFubmV4ZWQgdG8gaXQsIGlzIGJvdW5kZWQgb24gYWxsIHNpZGVzIGJ5IHZlcnkgaGlnaCBtb3VudGFpbnMuIEFzCiAgICAgICAgICAgICAgICAgICAgdGhpcyB2aWxsYWdlIHdhcyBkaXZpZGVkIGludG8gdHdvIHBhcnRzIGJ5IGEgcml2ZXIsIGhlIGdyYW50ZWQgb25lIHBhcnQgb2YgaXQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgYW5kIGFzc2lnbmVkIHRoZSBvdGhlciwgd2hpY2ggaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBsZWZ0IGJ5IHRoZW0gdW5vY2N1cGllZCwgdG8gdGhlIGNvaG9ydHMgdG8gd2ludGVyIGluLiBIZSBmb3J0aWZpZWQgdGhpcyBbbGF0dGVyXQogICAgICAgICAgICAgICAgICAgIHBhcnQgd2l0aCBhIHJhbXBhcnQgYW5kIGEgZGl0Y2guIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3YXMgc2V0dGluZyBvdXQgZm9yIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPiwgaGUKICAgICAgICAgICAgICAgICAgICBzZW50IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2Vydml1cyBHYWxiYTwvbmFtZT4gd2l0aCB0aGUgdHdlbGZ0aCBsZWdpb24gYW5kIHBhcnQgb2YgdGhlIGNhdmFscnksCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OYW50dWF0ZXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJhZ3JpPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VkdW5pPC9uYW1lPiwgd2hvIGV4dGVuZCBmcm9tIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGxvYnJvZ2VzPC9uYW1lPiwgYW5kIHRoZSBsYWtlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNzI3OSIgcmVnPSIgICtHZW5ldmUgWzYuMTUsNDYuMjE2XSAoaW5oYWJpdGVkIHBsYWNlKSwgR2VuZXZlLCBTd2l0emVybGFuZCwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlbmV2YSA8L25hbWU+LCBhbmQgdGhlIFJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAyMzg5MCIgcmVnPSJSaG9uZSBbNC44MzMsNDMuMzMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaG9uZSA8L25hbWU+IHRvIHRoZSB0b3Agb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNzc0NiIgcmVnPSJBbHBzIChtb3VudGFpbiBzeXN0ZW0pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BbHBzPC9uYW1lPi4gVGhlIHJlYXNvbiBmb3Igc2VuZGluZyBoaW0gd2FzLCB0aGF0IGhlIGRlc2lyZWQgdGhhdCB0aGUgcGFzcwogICAgICAgICAgICAgICAgICAgIGFsb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDc3NDYiIHJlZz0iQWxwcyAobW91bnRhaW4gc3lzdGVtKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QWxwcyA8L25hbWU+LCB0aHJvdWdoIHdoaWNoIFt0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Sb21hbl08L25hbWU+IG1lcmNoYW50cyBoYWQgYmVlbiBhY2N1c3RvbWVkIHRvIHRyYXZlbCB3aXRoIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZGFuZ2VyLCBhbmQgdW5kZXIgZ3JlYXQgaW1wb3N0cywgc2hvdWxkIGJlIG9wZW5lZC4gSGUgcGVybWl0dGVkIGhpbSwgaWYgaGUKICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IGl0IG5lY2Vzc2FyeSwgdG8gc3RhdGlvbiB0aGUgbGVnaW9uIGluIHRoZXNlIHBsYWNlcywgZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgICAgICAgICAgICAgd2ludGVyaW5nLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGJhPC9uYW1lPiBoYXZpbmcgZm91Z2h0IHNvbWUgc3VjY2Vzc2Z1bCBiYXR0bGVzIGFuZCBzdG9ybWVkCiAgICAgICAgICAgICAgICAgICAgc2V2ZXJhbCBvZiB0aGVpciBmb3J0cywgdXBvbiBlbWJhc3NhZG9ycyBiZWluZyBzZW50IHRvIGhpbSBmcm9tIGFsbCBwYXJ0cyBhbmQKICAgICAgICAgICAgICAgICAgICBob3N0YWdlcyBnaXZlbiBhbmQgYSBwZWFjZSBjb25jbHVkZWQsIGRldGVybWluZWQgdG8gc3RhdGlvbiB0d28gY29ob3J0cyBhbW9uZwogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5hbnR1YXRlczwvbmFtZT4sIGFuZCB0byB3aW50ZXIgaW4gcGVyc29uIHdpdGggdGhlIG90aGVyIGNvaG9ydHMgb2YKICAgICAgICAgICAgICAgICAgICB0aGF0IGxlZ2lvbiBpbiBhIHZpbGxhZ2Ugb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyYWdyaTwvbmFtZT4sIHdoaWNoIGlzIGNhbGxlZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk9jdG9kdXJ1czwvbmFtZT47IGFuZCB0aGlzIHZpbGxhZ2UgYmVpbmcgc2l0dWF0ZWQgaW4gYSB2YWxsZXksIHdpdGggYQogICAgICAgICAgICAgICAgICAgIHNtYWxsIHBsYWluIGFubmV4ZWQgdG8gaXQsIGlzIGJvdW5kZWQgb24gYWxsIHNpZGVzIGJ5IHZlcnkgaGlnaCBtb3VudGFpbnMuIEFzCiAgICAgICAgICAgICAgICAgICAgdGhpcyB2aWxsYWdlIHdhcyBkaXZpZGVkIGludG8gdHdvIHBhcnRzIGJ5IGEgcml2ZXIsIGhlIGdyYW50ZWQgb25lIHBhcnQgb2YgaXQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgYW5kIGFzc2lnbmVkIHRoZSBvdGhlciwgd2hpY2ggaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBsZWZ0IGJ5IHRoZW0gdW5vY2N1cGllZCwgdG8gdGhlIGNvaG9ydHMgdG8gd2ludGVyIGluLiBIZSBmb3J0aWZpZWQgdGhpcyBbbGF0dGVyXQogICAgICAgICAgICAgICAgICAgIHBhcnQgd2l0aCBhIHJhbXBhcnQgYW5kIGEgZGl0Y2guIDwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiBzZXZlcmFsIGRheXMgaGFkIGVsYXBzZWQgaW4gd2ludGVyIHF1YXJ0ZXJzLCBhbmQgaGUgaGFkIG9yZGVyZWQgY29ybiB0byBiZQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgaW4gaGUgd2FzIHN1ZGRlbmx5IGluZm9ybWVkIGJ5IGhpcyBzY291dHMgdGhhdCBhbGwgdGhlIHBlb3BsZSBoYWQgZ29uZQogICAgICAgICAgICAgICAgICAgIG9mZiBpbiB0aGUgbmlnaHQgZnJvbSB0aGF0IHBhcnQgb2YgdGhlIHRvd24gd2hpY2ggaGUgaGFkIGdpdmVuIHVwIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBhbmQgdGhhdCB0aGUgbW91bnRhaW5zIHdoaWNoIGh1bmcgb3ZlciBpdCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgb2NjdXBpZWQgYnkgYSB2ZXJ5IGxhcmdlIGZvcmNlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlZHVuaTwvbmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyYWdyaTwvbmFtZT4uIEl0IGhhZCBoYXBwZW5lZCBmb3Igc2V2ZXJhbCByZWFzb25zIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gc3VkZGVubHkgZm9ybWVkIHRoZSBkZXNpZ24gb2YgcmVuZXdpbmcgdGhlIHdhcgogICAgICAgICAgICAgICAgICAgIGFuZCBjdXR0aW5nIG9mZiB0aGF0IGxlZ2lvbi4gRmlyc3QsIGJlY2F1c2UgdGhleSBkZXNwaXNlZCBhIHNpbmdsZSBsZWdpb24sIG9uCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudCBvZiBpdHMgc21hbGwgbnVtYmVyLCBhbmQgdGhhdCBub3QgcXVpdGUgZnVsbCAodHdvIGNvaG9ydHMgaGF2aW5nIGJlZW4KICAgICAgICAgICAgICAgICAgICBkZXRhY2hlZCwgYW5kIHNldmVyYWwgaW5kaXZpZHVhbHMgYmVpbmcgYWJzZW50LCB3aG8gaGFkIGJlZW4gZGlzcGF0Y2hlZCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcHVycG9zZSBvZiBzZWVraW5nIHByb3Zpc2lvbik7IHRoZW4sIGxpa2V3aXNlLCBiZWNhdXNlIHRoZXkgdGhvdWdodCB0aGF0IG9uCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudCBvZiB0aGUgZGlzYWR2YW50YWdlb3VzIGNoYXJhY3RlciBvZiB0aGUgc2l0dWF0aW9uLCBldmVuIHRoZWlyIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgYXR0YWNrIGNvdWxkIG5vdCBiZSBzdXN0YWluZWQgW2J5IHVzXSB3aGVuIHRoZXkgd291bGQgcnVzaCBmcm9tIHRoZSBtb3VudGFpbnMKICAgICAgICAgICAgICAgICAgICBpbnRvIHRoZSB2YWxsZXksIGFuZCBkaXNjaGFyZ2UgdGhlaXIgd2VhcG9ucyB1cG9uIHVzLiBUbyB0aGlzIHdhcyBhZGRlZCwgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBpbmRpZ25hbnQgdGhhdCB0aGVpciBjaGlsZHJlbiB3ZXJlIHRvcm4gZnJvbSB0aGVtIHVuZGVyIHRoZSB0aXRsZSBvZgogICAgICAgICAgICAgICAgICAgIGhvc3RhZ2VzLCBhbmQgdGhleSB3ZXJlIHBlcnN1YWRlZCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGRlc2lnbmVkIHRvIHNlaXplIHVwb24gdGhlIHN1bW1pdHMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNzc0NiIgcmVnPSJBbHBzIChtb3VudGFpbiBzeXN0ZW0pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BbHBzIDwvbmFtZT4sIGFuZCB1bml0ZSB0aG9zZSBwYXJ0cyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBuZWlnaGJvcmluZyBwcm92aW5jZSBbb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYXVsXTwvbmFtZT4sIG5vdCBvbmx5IHRvIHNlY3VyZSB0aGUgcGFzc2VzLAogICAgICAgICAgICAgICAgICAgIGJ1dCBhbHNvIGEgY29uc3RhbnQgcG9zc2Vzc2lvbi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgYW5kIHRoYXQgdGhlIG1vdW50YWlucyB3aGljaCBodW5nIG92ZXIgaXQgd2VyZQogICAgICAgICAgICAgICAgICAgIG9jY3VwaWVkIGJ5IGEgdmVyeSBsYXJnZSBmb3JjZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZWR1bmk8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmFncmk8L25hbWU+LiBJdCBoYWQgaGFwcGVuZWQgZm9yIHNldmVyYWwgcmVhc29ucyB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHN1ZGRlbmx5IGZvcm1lZCB0aGUgZGVzaWduIG9mIHJlbmV3aW5nIHRoZSB3YXIKICAgICAgICAgICAgICAgICAgICBhbmQgY3V0dGluZyBvZmYgdGhhdCBsZWdpb24uIEZpcnN0LCBiZWNhdXNlIHRoZXkgZGVzcGlzZWQgYSBzaW5nbGUgbGVnaW9uLCBvbgogICAgICAgICAgICAgICAgICAgIGFjY291bnQgb2YgaXRzIHNtYWxsIG51bWJlciwgYW5kIHRoYXQgbm90IHF1aXRlIGZ1bGwgKHR3byBjb2hvcnRzIGhhdmluZyBiZWVuCiAgICAgICAgICAgICAgICAgICAgZGV0YWNoZWQsIGFuZCBzZXZlcmFsIGluZGl2aWR1YWxzIGJlaW5nIGFic2VudCwgd2hvIGhhZCBiZWVuIGRpc3BhdGNoZWQgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHB1cnBvc2Ugb2Ygc2Vla2luZyBwcm92aXNpb24pOyB0aGVuLCBsaWtld2lzZSwgYmVjYXVzZSB0aGV5IHRob3VnaHQgdGhhdCBvbgogICAgICAgICAgICAgICAgICAgIGFjY291bnQgb2YgdGhlIGRpc2FkdmFudGFnZW91cyBjaGFyYWN0ZXIgb2YgdGhlIHNpdHVhdGlvbiwgZXZlbiB0aGVpciBmaXJzdAogICAgICAgICAgICAgICAgICAgIGF0dGFjayBjb3VsZCBub3QgYmUgc3VzdGFpbmVkIFtieSB1c10gd2hlbiB0aGV5IHdvdWxkIHJ1c2ggZnJvbSB0aGUgbW91bnRhaW5zCiAgICAgICAgICAgICAgICAgICAgaW50byB0aGUgdmFsbGV5LCBhbmQgZGlzY2hhcmdlIHRoZWlyIHdlYXBvbnMgdXBvbiB1cy4gVG8gdGhpcyB3YXMgYWRkZWQsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IHdlcmUgaW5kaWduYW50IHRoYXQgdGhlaXIgY2hpbGRyZW4gd2VyZSB0b3JuIGZyb20gdGhlbSB1bmRlciB0aGUgdGl0bGUgb2YKICAgICAgICAgICAgICAgICAgICBob3N0YWdlcywgYW5kIHRoZXkgd2VyZSBwZXJzdWFkZWQgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBkZXNpZ25lZCB0byBzZWl6ZSB1cG9uIHRoZSBzdW1taXRzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDc3NDYiIHJlZz0iQWxwcyAobW91bnRhaW4gc3lzdGVtKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QWxwcyA8L25hbWU+LCBhbmQgdW5pdGUgdGhvc2UgcGFydHMgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgbmVpZ2hib3JpbmcgcHJvdmluY2UgW29mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2F1bF08L25hbWU+LCBub3Qgb25seSB0byBzZWN1cmUgdGhlIHBhc3NlcywKICAgICAgICAgICAgICAgICAgICBidXQgYWxzbyBhIGNvbnN0YW50IHBvc3Nlc3Npb24uIDwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGF2aW5nIHJlY2VpdmVkIHRoZXNlIHRpZGluZ3MsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsYmE8L25hbWU+LCBzaW5jZSB0aGUgd29ya3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgd2ludGVyLXF1YXJ0ZXJzIGFuZCB0aGUgZm9ydGlmaWNhdGlvbnMgd2VyZSBub3QgZnVsbHkgY29tcGxldGVkLCBub3Igd2FzCiAgICAgICAgICAgICAgICAgICAgc3VmZmljaWVudCBwcmVwYXJhdGlvbiBtYWRlIHdpdGggcmVnYXJkIHRvIGNvcm4gYW5kIG90aGVyIHByb3Zpc2lvbnMgKHNpbmNlLCBhcwogICAgICAgICAgICAgICAgICAgIGEgc3VycmVuZGVyIGhhZCBiZWVuIG1hZGUsIGFuZCBob3N0YWdlcyByZWNlaXZlZCwgaGUgaGFkIHRob3VnaHQgaGUgbmVlZAogICAgICAgICAgICAgICAgICAgIGVudGVydGFpbiBubyBhcHByZWhlbnNpb24gb2Ygd2FyKSwgc3BlZWRpbHkgc3VtbW9uaW5nIGEgY291bmNpbCwgYmVnYW4gdG8KICAgICAgICAgICAgICAgICAgICBhbnhpb3VzbHkgaW5xdWlyZSB0aGVpciBvcGluaW9ucy4gSW4gd2hpY2ggY291bmNpbCwgc2luY2Ugc28gbXVjaCBzdWRkZW4gZGFuZ2VyCiAgICAgICAgICAgICAgICAgICAgaGFkIGhhcHBlbmVkIGNvbnRyYXJ5IHRvIHRoZSBnZW5lcmFsIGV4cGVjdGF0aW9uLCBhbmQgYWxtb3N0IGFsbCB0aGUgaGlnaGVyCiAgICAgICAgICAgICAgICAgICAgcGxhY2VzIHdlcmUgc2VlbiBhbHJlYWR5IGNvdmVyZWQgd2l0aCBhIG11bHRpdHVkZSBvZiBhcm1lZCBtZW4sIG5vciBjb3VsZAogICAgICAgICAgICAgICAgICAgIFtlaXRoZXJdIHRyb29wcyBjb21lIHRvIHRoZWlyIHJlbGllZiwgb3IgcHJvdmlzaW9ucyBiZSBicm91Z2h0IGluLCBhcyB0aGUgcGFzc2VzCiAgICAgICAgICAgICAgICAgICAgd2VyZSBibG9ja2VkIHVwIFtieSB0aGUgZW5lbXldOyBzYWZldHkgYmVpbmcgbm93IG5lYXJseSBkZXNwYWlyZWQgb2YsIHNvbWUKICAgICAgICAgICAgICAgICAgICBvcGluaW9ucyBvZiB0aGlzIHNvcnQgd2VyZSBkZWxpdmVyZWQ6IHRoYXQsICJsZWF2aW5nIHRoZWlyIGJhZ2dhZ2UsIGFuZCBtYWtpbmcgYQogICAgICAgICAgICAgICAgICAgIHNhbGx5LCB0aGV5IHNob3VsZCBoYXN0ZW4gYXdheSBmb3Igc2FmZXR5IGJ5IHRoZSBzYW1lIHJvdXRlcyBieSB3aGljaCB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIGNvbWUgdGhpdGhlci4iIFRvIHRoZSBncmVhdGVyIHBhcnQsIGhvd2V2ZXIsIGl0IHNlZW1lZCBiZXN0LCByZXNlcnZpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIG1lYXN1cmUgdG8gdGhlIGxhc3QsIHRvIGF3YWl0IHRoZSBpc3N1ZSBvZiB0aGUgbWF0dGVyLCBhbmQgdG8gZGVmZW5kIHRoZSBjYW1wLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGJhPC9uYW1lPiwgc2luY2UgdGhlIHdvcmtzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdpbnRlci1xdWFydGVycyBhbmQgdGhlIGZvcnRpZmljYXRpb25zIHdlcmUgbm90IGZ1bGx5IGNvbXBsZXRlZCwgbm9yIHdhcwogICAgICAgICAgICAgICAgICAgIHN1ZmZpY2llbnQgcHJlcGFyYXRpb24gbWFkZSB3aXRoIHJlZ2FyZCB0byBjb3JuIGFuZCBvdGhlciBwcm92aXNpb25zIChzaW5jZSwgYXMKICAgICAgICAgICAgICAgICAgICBhIHN1cnJlbmRlciBoYWQgYmVlbiBtYWRlLCBhbmQgaG9zdGFnZXMgcmVjZWl2ZWQsIGhlIGhhZCB0aG91Z2h0IGhlIG5lZWQKICAgICAgICAgICAgICAgICAgICBlbnRlcnRhaW4gbm8gYXBwcmVoZW5zaW9uIG9mIHdhciksIHNwZWVkaWx5IHN1bW1vbmluZyBhIGNvdW5jaWwsIGJlZ2FuIHRvCiAgICAgICAgICAgICAgICAgICAgYW54aW91c2x5IGlucXVpcmUgdGhlaXIgb3BpbmlvbnMuIEluIHdoaWNoIGNvdW5jaWwsIHNpbmNlIHNvIG11Y2ggc3VkZGVuIGRhbmdlcgogICAgICAgICAgICAgICAgICAgIGhhZCBoYXBwZW5lZCBjb250cmFyeSB0byB0aGUgZ2VuZXJhbCBleHBlY3RhdGlvbiwgYW5kIGFsbW9zdCBhbGwgdGhlIGhpZ2hlcgogICAgICAgICAgICAgICAgICAgIHBsYWNlcyB3ZXJlIHNlZW4gYWxyZWFkeSBjb3ZlcmVkIHdpdGggYSBtdWx0aXR1ZGUgb2YgYXJtZWQgbWVuLCBub3IgY291bGQKICAgICAgICAgICAgICAgICAgICBbZWl0aGVyXSB0cm9vcHMgY29tZSB0byB0aGVpciByZWxpZWYsIG9yIHByb3Zpc2lvbnMgYmUgYnJvdWdodCBpbiwgYXMgdGhlIHBhc3NlcwogICAgICAgICAgICAgICAgICAgIHdlcmUgYmxvY2tlZCB1cCBbYnkgdGhlIGVuZW15XTsgc2FmZXR5IGJlaW5nIG5vdyBuZWFybHkgZGVzcGFpcmVkIG9mLCBzb21lCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbnMgb2YgdGhpcyBzb3J0IHdlcmUgZGVsaXZlcmVkOiB0aGF0LCAibGVhdmluZyB0aGVpciBiYWdnYWdlLCBhbmQgbWFraW5nIGEKICAgICAgICAgICAgICAgICAgICBzYWxseSwgdGhleSBzaG91bGQgaGFzdGVuIGF3YXkgZm9yIHNhZmV0eSBieSB0aGUgc2FtZSByb3V0ZXMgYnkgd2hpY2ggdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBjb21lIHRoaXRoZXIuIiBUbyB0aGUgZ3JlYXRlciBwYXJ0LCBob3dldmVyLCBpdCBzZWVtZWQgYmVzdCwgcmVzZXJ2aW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICBtZWFzdXJlIHRvIHRoZSBsYXN0LCB0byBhd2FpdCB0aGUgaXNzdWUgb2YgdGhlIG1hdHRlciwgYW5kIHRvIGRlZmVuZCB0aGUgY2FtcC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QSBzaG9ydCB0aW1lIG9ubHkgaGF2aW5nIGVsYXBzZWQsIHNvIHRoYXQgdGltZSB3YXMgc2NhcmNlbHkgZ2l2ZW4gZm9yIGFycmFuZ2luZwogICAgICAgICAgICAgICAgICAgIGFuZCBleGVjdXRpbmcgdGhvc2UgdGhpbmdzIHdoaWNoIHRoZXkgaGFkIGRldGVybWluZWQgb24sIHRoZSBlbmVteSwgdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBzaWduYWwgYmVpbmcgZ2l2ZW4sIHJ1c2hlZCBkb3duIFt1cG9uIG91ciBtZW5dIGZyb20gYWxsIHBhcnRzLCBhbmQgZGlzY2hhcmdlZAogICAgICAgICAgICAgICAgICAgIHN0b25lcyBhbmQgZGFydHMsIHVwb24gb3VyIHJhbXBhcnQuIE91ciBtZW4gYXQgZmlyc3QsIHdoaWxlIHRoZWlyIHN0cmVuZ3RoIHdhcwogICAgICAgICAgICAgICAgICAgIGZyZXNoLCByZXNpc3RlZCBicmF2ZWx5LCBub3IgZGlkIHRoZXkgY2FzdCBhbnkgd2VhcG9uIGluZWZmZWN0dWFsbHkgZnJvbSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhpZ2hlciBzdGF0aW9uLiBBcyBzb29uIGFzIGFueSBwYXJ0IG9mIHRoZSBjYW1wLCBiZWluZyBkZXN0aXR1dGUgb2YgZGVmZW5kZXJzLAogICAgICAgICAgICAgICAgICAgIHNlZW1lZCB0byBiZSBoYXJkIHByZXNzZWQsIHRoaXRoZXIgdGhleSByYW4sIGFuZCBicm91Z2h0IGFzc2lzdGFuY2UuIEJ1dCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2VyZSBvdmVyLW1hdGNoZWQgaW4gdGhpcywgdGhhdCB0aGUgZW5lbXkgd2hlbiB3ZWFyaWVkIGJ5IHRoZSBsb25nIGNvbnRpbnVhbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGJhdHRsZSwgd2VudCBvdXQgb2YgdGhlIGFjdGlvbiwgYW5kIG90aGVycyB3aXRoIGZyZXNoIHN0cmVuZ3RoIGNhbWUgaW4KICAgICAgICAgICAgICAgICAgICB0aGVpciBwbGFjZTsgbm9uZSBvZiB3aGljaCB0aGluZ3MgY291bGQgYmUgZG9uZSBieSBvdXIgbWVuLCBvd2luZyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBzbWFsbG5lc3Mgb2YgdGhlaXIgbnVtYmVyOyBhbmQgbm90IG9ubHkgd2FzIHBlcm1pc3Npb24gbm90IGdpdmVuIHRvIHRoZSB3ZWFyaWVkCiAgICAgICAgICAgICAgICAgICAgICAgIFs8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+XSB0byByZXRpcmUgZnJvbSB0aGUgZmlnaHQsIGJ1dCBub3QgZXZlbiB0bwogICAgICAgICAgICAgICAgICAgIHRoZSB3b3VuZGVkIFt3YXMgbGliZXJ0eSBncmFudGVkXSB0byBxdWl0IHRoZSBwb3N0IHdoZXJlIGhlIGhhZCBiZWVuIHN0YXRpb25lZCwKICAgICAgICAgICAgICAgICAgICBhbmQgcmVjb3Zlci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPl0gdG8gcmV0aXJlIGZyb20gdGhlIGZpZ2h0LCBidXQgbm90IGV2ZW4gdG8KICAgICAgICAgICAgICAgICAgICB0aGUgd291bmRlZCBbd2FzIGxpYmVydHkgZ3JhbnRlZF0gdG8gcXVpdCB0aGUgcG9zdCB3aGVyZSBoZSBoYWQgYmVlbiBzdGF0aW9uZWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIHJlY292ZXIuIDwvdHJhbnNsYXRpb24+"
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiB0aGV5IGhhZCBub3cgYmVlbiBmaWdodGluZyBmb3IgbW9yZSB0aGFuIHNpeCBob3Vycywgd2l0aG91dCBjZXNzYXRpb24sIGFuZAogICAgICAgICAgICAgICAgICAgIG5vdCBvbmx5IHN0cmVuZ3RoLCBidXQgZXZlbiB3ZWFwb25zIHdlcmUgZmFpbGluZyBvdXIgbWVuLCBhbmQgdGhlIGVuZW15IHdlcmUKICAgICAgICAgICAgICAgICAgICBwcmVzc2luZyBvbiBtb3JlIHJpZ29yb3VzbHksIGFuZCBoYWQgYmVndW4gdG8gZGVtb2xpc2ggdGhlIHJhbXBhcnQgYW5kIHRvIGZpbGwKICAgICAgICAgICAgICAgICAgICB1cCB0aGUgdHJlbmNoLCB3aGlsZSBvdXIgbWVuIHdlcmUgYmVjb21pbmcgZXhoYXVzdGVkLCBhbmQgdGhlIG1hdHRlciB3YXMgbm93CiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCB0byB0aGUgbGFzdCBleHRyZW1pdHksIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UC4gU2V4dGl1cyBCYWN1bHVzPC9uYW1lPiwgYQogICAgICAgICAgICAgICAgICAgIGNlbnR1cmlvbiBvZiB0aGUgZmlyc3QgcmFuaywgd2hvbSB3ZSBoYXZlIHJlbGF0ZWQgdG8gaGF2ZSBiZWVuIGRpc2FibGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgc2V2ZXJlIHdvdW5kcyBpbiB0aGUgZW5nYWdlbWVudCB3aXRoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sIGFuZCBhbHNvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Qy4gVm9sdXNlbnVzPC9uYW1lPiwgYSB0cmlidW5lIG9mIHRoZSBzb2xkaWVycywgYSBtYW4gb2YgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBza2lsbCBhbmQgdmFsb3IsIGhhc3RlbiB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGJhPC9uYW1lPiwgYW5kIGFzc3VyZSBoaW0gdGhhdCB0aGUgb25seSBob3BlCiAgICAgICAgICAgICAgICAgICAgb2Ygc2FmZXR5IGxheSBpbiBtYWtpbmcgYSBzYWxseSwgYW5kIHRyeWluZyB0aGUgbGFzdCByZXNvdXJjZS4gV2hlcmV1cG9uCiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibGluZyB0aGUgY2VudHVyaW9ucywgaGUgcXVpY2tseSBnaXZlcyBvcmRlcnMgdG8gdGhlIHNvbGRpZXJzIHRvCiAgICAgICAgICAgICAgICAgICAgZGlzY29udGludWUgdGhlIGZpZ2h0IGEgc2hvcnQgdGltZSwgYW5kIG9ubHkgY29sbGVjdCB0aGUgd2VhcG9ucyBmbHVuZyBbYXQKICAgICAgICAgICAgICAgICAgICB0aGVtXSwgYW5kIHJlY3J1aXQgdGhlbXNlbHZlcyBhZnRlciB0aGVpciBmYXRpZ3VlLCBhbmQgYWZ0ZXJ3YXJkLCB1cG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHNpZ25hbCBiZWluZyBnaXZlbiwgc2FsbHkgZm9ydGggZnJvbSB0aGUgY2FtcCwgYW5kIHBsYWNlIGluIHRoZWlyIHZhbG9yIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGhvcGUgb2Ygc2FmZXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlAuIFNleHRpdXMgQmFjdWx1czwvbmFtZT4sIGEKICAgICAgICAgICAgICAgICAgICBjZW50dXJpb24gb2YgdGhlIGZpcnN0IHJhbmssIHdob20gd2UgaGF2ZSByZWxhdGVkIHRvIGhhdmUgYmVlbiBkaXNhYmxlZCBieQogICAgICAgICAgICAgICAgICAgIHNldmVyZSB3b3VuZHMgaW4gdGhlIGVuZ2FnZW1lbnQgd2l0aCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+LCBhbmQgYWxzbyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkMuIFZvbHVzZW51czwvbmFtZT4sIGEgdHJpYnVuZSBvZiB0aGUgc29sZGllcnMsIGEgbWFuIG9mIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgc2tpbGwgYW5kIHZhbG9yLCBoYXN0ZW4gdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxiYTwvbmFtZT4sIGFuZCBhc3N1cmUgaGltIHRoYXQgdGhlIG9ubHkgaG9wZQogICAgICAgICAgICAgICAgICAgIG9mIHNhZmV0eSBsYXkgaW4gbWFraW5nIGEgc2FsbHksIGFuZCB0cnlpbmcgdGhlIGxhc3QgcmVzb3VyY2UuIFdoZXJldXBvbgogICAgICAgICAgICAgICAgICAgIGFzc2VtYmxpbmcgdGhlIGNlbnR1cmlvbnMsIGhlIHF1aWNrbHkgZ2l2ZXMgb3JkZXJzIHRvIHRoZSBzb2xkaWVycyB0bwogICAgICAgICAgICAgICAgICAgIGRpc2NvbnRpbnVlIHRoZSBmaWdodCBhIHNob3J0IHRpbWUsIGFuZCBvbmx5IGNvbGxlY3QgdGhlIHdlYXBvbnMgZmx1bmcgW2F0CiAgICAgICAgICAgICAgICAgICAgdGhlbV0sIGFuZCByZWNydWl0IHRoZW1zZWx2ZXMgYWZ0ZXIgdGhlaXIgZmF0aWd1ZSwgYW5kIGFmdGVyd2FyZCwgdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBzaWduYWwgYmVpbmcgZ2l2ZW4sIHNhbGx5IGZvcnRoIGZyb20gdGhlIGNhbXAsIGFuZCBwbGFjZSBpbiB0aGVpciB2YWxvciBhbGwKICAgICAgICAgICAgICAgICAgICB0aGVpciBob3BlIG9mIHNhZmV0eS4gPC90cmFuc2xhdGlvbj4="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhleSBkbyB3aGF0IHRoZXkgd2VyZSBvcmRlcmVkOyBhbmQsIG1ha2luZyBhIHN1ZGRlbiBzYWxseSBmcm9tIGFsbCB0aGUgZ2F0ZXMgW29mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhbXBdLCBsZWF2ZSB0aGUgZW5lbXkgdGhlIG1lYW5zIG5laXRoZXIgb2Yga25vd2luZyB3aGF0IHdhcyB0YWtpbmcgcGxhY2UsCiAgICAgICAgICAgICAgICAgICAgbm9yIG9mIGNvbGxlY3RpbmcgdGhlbXNlbHZlcy4gRm9ydHVuZSB0aHVzIHRha2luZyBhIHR1cm4sIFtvdXIgbWVuXSBzdXJyb3VuZCBvbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IHNpZGUsIGFuZCBzbGF5IHRob3NlIHdobyBoYWQgZW50ZXJ0YWluZWQgdGhlIGhvcGUgb2YgZ2FpbmluZyB0aGUgY2FtcCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXZpbmcga2lsbGVkIG1vcmUgdGhhbiB0aGUgdGhpcmQgcGFydCBvZiBhbiBhcm15IG9mIG1vcmUgdGhhbiAzMCwwMDAgbWVuICh3aGljaAogICAgICAgICAgICAgICAgICAgIG51bWJlciBvZiB0aGUgYmFyYmFyaWFucyBpdCBhcHBlYXJlZCBjZXJ0YWluIGhhZCBjb21lIHVwIHRvIG91ciBjYW1wKSwgcHV0IHRvCiAgICAgICAgICAgICAgICAgICAgZmxpZ2h0IHRoZSByZXN0IHdoZW4gcGFuaWMtc3RyaWNrZW4sIGFuZCBkbyBub3Qgc3VmZmVyIHRoZW0gdG8gaGFsdCBldmVuIHVwb24KICAgICAgICAgICAgICAgICAgICB0aGUgaGlnaGVyIGdyb3VuZHMuIEFsbCB0aGUgZm9yY2VzIG9mIHRoZSBlbmVteSBiZWluZyB0aHVzIHJvdXRlZCwgYW5kIHN0cmlwcGVkCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlaXIgYXJtcywgW291ciBtZW5dIGJldGFrZSB0aGVtc2VsdmVzIHRvIHRoZWlyIGNhbXAgYW5kIGZvcnRpZmljYXRpb25zLgogICAgICAgICAgICAgICAgICAgIFdoaWNoIGJhdHRsZSBiZWluZyBmaW5pc2hlZCwgaW5hc211Y2ggYXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxiYTwvbmFtZT4gd2FzIHVud2lsbGluZyB0bwogICAgICAgICAgICAgICAgICAgIHRlbXB0IGZvcnR1bmUgYWdhaW4sIGFuZCByZW1lbWJlcmVkIHRoYXQgaGUgaGFkIGNvbWUgaW50byB3aW50ZXIgcXVhcnRlcnMgd2l0aAogICAgICAgICAgICAgICAgICAgIG9uZSBkZXNpZ24sIGFuZCBzYXcgdGhhdCBoZSBoYWQgbWV0IHdpdGggYSBkaWZmZXJlbnQgc3RhdGUgb2YgYWZmYWlyczsgY2hpZWZseQogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIgdXJnZWQgYnkgdGhlIHdhbnQgb2YgY29ybiBhbmQgcHJvdmlzaW9uLCBoYXZpbmcgdGhlIG5leHQgZGF5IGJ1cm5lZCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgYnVpbGRpbmdzIG9mIHRoYXQgdmlsbGFnZSwgaGUgaGFzdGVucyB0byByZXR1cm4gaW50byB0aGUgcHJvdmluY2U7IGFuZCBhcyBubwogICAgICAgICAgICAgICAgICAgIGVuZW15IG9wcG9zZWQgb3IgaGluZGVyZWQgaGlzIG1hcmNoLCBoZSBicm91Z2h0IHRoZSBsZWdpb24gc2FmZSBpbnRvIHRoZQogICAgICAgICAgICAgICAgICAgIFtjb3VudHJ5IG9mIHRoZV0gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OYW50dWF0ZXM8L25hbWU+LCB0aGVuY2UgaW50byBbdGhhdCBvZl0gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsb2Jyb2dlczwvbmFtZT4sIGFuZCB0aGVyZSB3aW50ZXJlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxiYTwvbmFtZT4gd2FzIHVud2lsbGluZyB0bwogICAgICAgICAgICAgICAgICAgIHRlbXB0IGZvcnR1bmUgYWdhaW4sIGFuZCByZW1lbWJlcmVkIHRoYXQgaGUgaGFkIGNvbWUgaW50byB3aW50ZXIgcXVhcnRlcnMgd2l0aAogICAgICAgICAgICAgICAgICAgIG9uZSBkZXNpZ24sIGFuZCBzYXcgdGhhdCBoZSBoYWQgbWV0IHdpdGggYSBkaWZmZXJlbnQgc3RhdGUgb2YgYWZmYWlyczsgY2hpZWZseQogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIgdXJnZWQgYnkgdGhlIHdhbnQgb2YgY29ybiBhbmQgcHJvdmlzaW9uLCBoYXZpbmcgdGhlIG5leHQgZGF5IGJ1cm5lZCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgYnVpbGRpbmdzIG9mIHRoYXQgdmlsbGFnZSwgaGUgaGFzdGVucyB0byByZXR1cm4gaW50byB0aGUgcHJvdmluY2U7IGFuZCBhcyBubwogICAgICAgICAgICAgICAgICAgIGVuZW15IG9wcG9zZWQgb3IgaGluZGVyZWQgaGlzIG1hcmNoLCBoZSBicm91Z2h0IHRoZSBsZWdpb24gc2FmZSBpbnRvIHRoZQogICAgICAgICAgICAgICAgICAgIFtjb3VudHJ5IG9mIHRoZV0gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OYW50dWF0ZXM8L25hbWU+LCB0aGVuY2UgaW50byBbdGhhdCBvZl0gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsb2Jyb2dlczwvbmFtZT4sIGFuZCB0aGVyZSB3aW50ZXJlZC4gPC90cmFuc2xhdGlvbj4="
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlc2UgdGhpbmdzIGJlaW5nIGFjaGlldmVkLCB3aGlsZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgcmVhc29uIHRvIHN1cHBvc2UgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gd2FzIHJlZHVjZWQgdG8gYSBzdGF0ZSBvZgogICAgICAgICAgICAgICAgICAgIHRyYW5xdWlsbGl0eSwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiBiZWluZyBvdmVyY29tZSwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBleHBlbGxlZCwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VkdW5pPC9uYW1lPiBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA3NzQ2IiByZWc9IkFscHMgKG1vdW50YWluIHN5c3RlbSksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkFscHMKICAgICAgICAgICAgICAgICAgICA8L25hbWU+IGRlZmVhdGVkLCBhbmQgd2hlbiBoZSBoYWQsIHRoZXJlZm9yZSwgaW4gdGhlIGJlZ2lubmluZyBvZiB3aW50ZXIsIHNldAogICAgICAgICAgICAgICAgICAgIG91dCBmb3IgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NjgzIiByZWc9IiAgK0lsbHlyaWEgKHJlZ2lvbiAoZ2VuZXJhbCkpLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+SWxseXJpY3VtIDwvbmFtZT4sIGFzIGhlIHdpc2hlZAogICAgICAgICAgICAgICAgICAgIHRvIHZpc2l0IHRob3NlIG5hdGlvbnMsIGFuZCBhY3F1aXJlIGEga25vd2xlZGdlIG9mIHRoZWlyIGNvdW50cmllcywgYSBzdWRkZW4gd2FyCiAgICAgICAgICAgICAgICAgICAgc3ByYW5nIHVwIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPi4gVGhlIG9jY2FzaW9uIG9mIHRoYXQgd2FyCiAgICAgICAgICAgICAgICAgICAgd2FzIHRoaXM6IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UC4gQ3Jhc3N1czwvbmFtZT4sIGEgeW91bmcgbWFuLCBoYWQgdGFrZW4gdXAgaGlzCiAgICAgICAgICAgICAgICAgICAgd2ludGVyIHF1YXJ0ZXJzIHdpdGggdGhlIHNldmVudGggbGVnaW9uIGFtb25nIHRoZSBBbmRlcywgd2hvIGJvcmRlciB1cG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTQyMDYiIHJlZz0iQXRsYW50aWMgT2NlYW4gWy00MCwxXSAob2NlYW4pIiB0eXBlPSJwbGFjZSI+W0F0bGFudGljXSBvY2VhbjwvbmFtZT4uIEhlLCBhcyB0aGVyZSB3YXMgYSBzY2FyY2l0eSBvZiBjb3JuIGluIHRob3NlCiAgICAgICAgICAgICAgICAgICAgcGFydHMsIHNlbnQgb3V0IHNvbWUgb2ZmaWNlcnMgb2YgY2F2YWxyeSwgYW5kIHNldmVyYWwgbWlsaXRhcnkgdHJpYnVuZXMgYW1vbmcKICAgICAgICAgICAgICAgICAgICB0aGUgbmVpZ2hib3VyaW5nIHN0YXRlcywgZm9yIHRoZSBwdXJwb3NlIG9mIHByb2N1cmluZyBjb3JuIGFuZCBwcm92aXNpb247IGluCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggbnVtYmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+VC4gVGVycmFzaWRpdXM8L25hbWU+IHdhcyBzZW50IGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVzdWJpaTwvbmFtZT47IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TS4gVHJlYml1cyBHYWxsdXM8L25hbWU+IGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkN1cmlvc29saXRhZTwvbmFtZT47IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+US4gVmVsYW5pdXM8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlQuIFNpbGl1czwvbmFtZT4sIGFtb25nc3QgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVuZXRpPC9uYW1lPi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBldmVyeQogICAgICAgICAgICAgICAgICAgIHJlYXNvbiB0byBzdXBwb3NlIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IHdhcyByZWR1Y2VkIHRvIGEgc3RhdGUgb2YKICAgICAgICAgICAgICAgICAgICB0cmFucXVpbGxpdHksIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gYmVpbmcgb3ZlcmNvbWUsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gZXhwZWxsZWQsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlZHVuaTwvbmFtZT4gYW1vbmcgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNzc0NiIgcmVnPSJBbHBzIChtb3VudGFpbiBzeXN0ZW0pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BbHBzCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBkZWZlYXRlZCwgYW5kIHdoZW4gaGUgaGFkLCB0aGVyZWZvcmUsIGluIHRoZSBiZWdpbm5pbmcgb2Ygd2ludGVyLCBzZXQKICAgICAgICAgICAgICAgICAgICBvdXQgZm9yIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjY4MyIgcmVnPSIgICtJbGx5cmlhIChyZWdpb24gKGdlbmVyYWwpKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPklsbHlyaWN1bSA8L25hbWU+LCBhcyBoZSB3aXNoZWQKICAgICAgICAgICAgICAgICAgICB0byB2aXNpdCB0aG9zZSBuYXRpb25zLCBhbmQgYWNxdWlyZSBhIGtub3dsZWRnZSBvZiB0aGVpciBjb3VudHJpZXMsIGEgc3VkZGVuIHdhcgogICAgICAgICAgICAgICAgICAgIHNwcmFuZyB1cCBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4uIFRoZSBvY2Nhc2lvbiBvZiB0aGF0IHdhcgogICAgICAgICAgICAgICAgICAgIHdhcyB0aGlzOiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlAuIENyYXNzdXM8L25hbWU+LCBhIHlvdW5nIG1hbiwgaGFkIHRha2VuIHVwIGhpcwogICAgICAgICAgICAgICAgICAgIHdpbnRlciBxdWFydGVycyB3aXRoIHRoZSBzZXZlbnRoIGxlZ2lvbiBhbW9uZyB0aGUgQW5kZXMsIHdobyBib3JkZXIgdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE0MjA2IiByZWc9IkF0bGFudGljIE9jZWFuIFstNDAsMV0gKG9jZWFuKSIgdHlwZT0icGxhY2UiPltBdGxhbnRpY10gb2NlYW48L25hbWU+LiBIZSwgYXMgdGhlcmUgd2FzIGEgc2NhcmNpdHkgb2YgY29ybiBpbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHBhcnRzLCBzZW50IG91dCBzb21lIG9mZmljZXJzIG9mIGNhdmFscnksIGFuZCBzZXZlcmFsIG1pbGl0YXJ5IHRyaWJ1bmVzIGFtb25nCiAgICAgICAgICAgICAgICAgICAgdGhlIG5laWdoYm91cmluZyBzdGF0ZXMsIGZvciB0aGUgcHVycG9zZSBvZiBwcm9jdXJpbmcgY29ybiBhbmQgcHJvdmlzaW9uOyBpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIG51bWJlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlQuIFRlcnJhc2lkaXVzPC9uYW1lPiB3YXMgc2VudCBhbW9uZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Fc3ViaWk8L25hbWU+OyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPk0uIFRyZWJpdXMgR2FsbHVzPC9uYW1lPiBhbW9uZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DdXJpb3NvbGl0YWU8L25hbWU+OyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlEuIFZlbGFuaXVzPC9uYW1lPiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5ULiBTaWxpdXM8L25hbWU+LCBhbW9uZ3N0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlbmV0aTwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIGluZmx1ZW5jZSBvZiB0aGlzIHN0YXRlIGlzIGJ5IGZhciB0aGUgbW9zdCBjb25zaWRlcmFibGUgb2YgYW55IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNvdW50cmllcyBvbiB0aGUgd2hvbGUgc2VhIGNvYXN0LCBiZWNhdXNlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlbmV0aTwvbmFtZT4gYm90aCBoYXZlIGEKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGdyZWF0IG51bWJlciBvZiBzaGlwcywgd2l0aCB3aGljaCB0aGV5IGhhdmUgYmVlbiBhY2N1c3RvbWVkIHRvIHNhaWwgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgW3RodXNdIGV4Y2VsIHRoZSByZXN0IGluIHRoZWlyIGtub3dsZWRnZSBhbmQgZXhwZXJpZW5jZSBvZiBuYXV0aWNhbCBhZmZhaXJzOyBhbmQKICAgICAgICAgICAgICAgICAgICBhcyBvbmx5IGEgZmV3IHBvcnRzIGxpZSBzY2F0dGVyZWQgYWxvbmcgdGhhdCBzdG9ybXkgYW5kIG9wZW4gc2VhLCBvZiB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlIGluIHBvc3Nlc3Npb24sIHRoZXkgaG9sZCBhcyB0cmlidXRhcmllcyBhbG1vc3QgYWxsIHRob3NlIHdobyBhcmUgYWNjdXN0b21lZAogICAgICAgICAgICAgICAgICAgIHRvIHRyYWZmaWMgaW4gdGhhdCBzZWEuIFdpdGggdGhlbSBhcm9zZSB0aGUgYmVnaW5uaW5nIFtvZiB0aGUgcmV2b2x0XSBieSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGRldGFpbmluZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlNpbGl1czwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+VmVsYW5pdXM8L25hbWU+OwogICAgICAgICAgICAgICAgICAgIGZvciB0aGV5IHRob3VnaHQgdGhhdCB0aGV5IHNob3VsZCByZWNvdmVyIGJ5IHRoZWlyIG1lYW5zIHRoZSBob3N0YWdlcyB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGdpdmVuIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4uIFRoZSBuZWlnaGJvcmluZyBwZW9wbGUgbGVkIG9uIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaW5mbHVlbmNlIChhcyB0aGUgbWVhc3VyZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gYXJlCiAgICAgICAgICAgICAgICAgICAgc3VkZGVuIGFuZCBoYXN0eSksIGRldGFpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRyZWJpdXM8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRlcnJhc2lkaXVzPC9uYW1lPiBmb3IgdGhlIHNhbWUgbW90aXZlOyBhbmQgcXVpY2tseSBzZW5kaW5nIGVtYmFzc2Fkb3JzLCBieQogICAgICAgICAgICAgICAgICAgIG1lYW5zIG9mIHRoZWlyIGxlYWRpbmcgbWVuLCB0aGV5IGVudGVyIGludG8gYSBtdXR1YWwgY29tcGFjdCB0byBkbyBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IGJ5IGdlbmVyYWwgY29uc2VudCwgYW5kIGFiaWRlIHRoZSBzYW1lIGlzc3VlIG9mIGZvcnR1bmU7IGFuZCB0aGV5IHNvbGljaXQKICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgc3RhdGVzIHRvIGNob29zZSByYXRoZXIgdG8gY29udGludWUgaW4gdGhhdCBsaWJlcnR5IHdoaWNoIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgZnJvbSB0aGVpciBhbmNlc3RvcnMsIHRoYW4gZW5kdXJlIHNsYXZlcnkgdW5kZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LiBBbGwgdGhlIHNlYSBjb2FzdCBiZWluZyBxdWlja2x5IGJyb3VnaHQgb3ZlciB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIHNlbnRpbWVudHMsIHRoZXkgc2VuZCBhIGNvbW1vbiBlbWJhc3N5IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UC4gQ3Jhc3N1czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBbdG8gc2F5XSwgIklmIGhlIHdpc2hlZCB0byByZWNlaXZlIGJhY2sgaGlzIG9mZmljZXJzLCBsZXQgaGltIHNlbmQgYmFjayB0byB0aGVtCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaG9zdGFnZXMuIiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlbmV0aTwvbmFtZT4gYm90aCBoYXZlIGEKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGdyZWF0IG51bWJlciBvZiBzaGlwcywgd2l0aCB3aGljaCB0aGV5IGhhdmUgYmVlbiBhY2N1c3RvbWVkIHRvIHNhaWwgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgW3RodXNdIGV4Y2VsIHRoZSByZXN0IGluIHRoZWlyIGtub3dsZWRnZSBhbmQgZXhwZXJpZW5jZSBvZiBuYXV0aWNhbCBhZmZhaXJzOyBhbmQKICAgICAgICAgICAgICAgICAgICBhcyBvbmx5IGEgZmV3IHBvcnRzIGxpZSBzY2F0dGVyZWQgYWxvbmcgdGhhdCBzdG9ybXkgYW5kIG9wZW4gc2VhLCBvZiB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlIGluIHBvc3Nlc3Npb24sIHRoZXkgaG9sZCBhcyB0cmlidXRhcmllcyBhbG1vc3QgYWxsIHRob3NlIHdobyBhcmUgYWNjdXN0b21lZAogICAgICAgICAgICAgICAgICAgIHRvIHRyYWZmaWMgaW4gdGhhdCBzZWEuIFdpdGggdGhlbSBhcm9zZSB0aGUgYmVnaW5uaW5nIFtvZiB0aGUgcmV2b2x0XSBieSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGRldGFpbmluZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlNpbGl1czwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+VmVsYW5pdXM8L25hbWU+OwogICAgICAgICAgICAgICAgICAgIGZvciB0aGV5IHRob3VnaHQgdGhhdCB0aGV5IHNob3VsZCByZWNvdmVyIGJ5IHRoZWlyIG1lYW5zIHRoZSBob3N0YWdlcyB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGdpdmVuIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4uIFRoZSBuZWlnaGJvcmluZyBwZW9wbGUgbGVkIG9uIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaW5mbHVlbmNlIChhcyB0aGUgbWVhc3VyZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gYXJlCiAgICAgICAgICAgICAgICAgICAgc3VkZGVuIGFuZCBoYXN0eSksIGRldGFpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRyZWJpdXM8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRlcnJhc2lkaXVzPC9uYW1lPiBmb3IgdGhlIHNhbWUgbW90aXZlOyBhbmQgcXVpY2tseSBzZW5kaW5nIGVtYmFzc2Fkb3JzLCBieQogICAgICAgICAgICAgICAgICAgIG1lYW5zIG9mIHRoZWlyIGxlYWRpbmcgbWVuLCB0aGV5IGVudGVyIGludG8gYSBtdXR1YWwgY29tcGFjdCB0byBkbyBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IGJ5IGdlbmVyYWwgY29uc2VudCwgYW5kIGFiaWRlIHRoZSBzYW1lIGlzc3VlIG9mIGZvcnR1bmU7IGFuZCB0aGV5IHNvbGljaXQKICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgc3RhdGVzIHRvIGNob29zZSByYXRoZXIgdG8gY29udGludWUgaW4gdGhhdCBsaWJlcnR5IHdoaWNoIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgZnJvbSB0aGVpciBhbmNlc3RvcnMsIHRoYW4gZW5kdXJlIHNsYXZlcnkgdW5kZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LiBBbGwgdGhlIHNlYSBjb2FzdCBiZWluZyBxdWlja2x5IGJyb3VnaHQgb3ZlciB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIHNlbnRpbWVudHMsIHRoZXkgc2VuZCBhIGNvbW1vbiBlbWJhc3N5IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UC4gQ3Jhc3N1czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBbdG8gc2F5XSwgIklmIGhlIHdpc2hlZCB0byByZWNlaXZlIGJhY2sgaGlzIG9mZmljZXJzLCBsZXQgaGltIHNlbmQgYmFjayB0byB0aGVtCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaG9zdGFnZXMuIiA8L3RyYW5zbGF0aW9uPg=="
translation['3.9'] = ""
translation['3.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIHdlcmUgdGhlc2UgZGlmZmljdWx0aWVzIHdoaWNoIHdlIGhhdmUgbWVudGlvbmVkIGFib3ZlLCBpbiBjYXJyeWluZyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICB3YXIsIGJ1dCBtYW55IHRoaW5ncywgbmV2ZXJ0aGVsZXNzLCB1cmdlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdG8KICAgICAgICAgICAgICAgICAgICB0aGF0IHdhcjstdGhlIG9wZW4gaW5zdWx0IG9mZmVyZWQgdG8gdGhlIHN0YXRlIGluIHRoZSBkZXRlbnRpb24gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4ga25pZ2h0cywgdGhlIHJlYmVsbGlvbiByYWlzZWQgYWZ0ZXIgc3VycmVuZGVyaW5nLAogICAgICAgICAgICAgICAgICAgIHRoZSByZXZvbHQgYWZ0ZXIgaG9zdGFnZXMgd2VyZSBnaXZlbiwgdGhlIGNvbmZlZGVyYWN5IG9mIHNvIG1hbnkgc3RhdGVzLCBidXQKICAgICAgICAgICAgICAgICAgICBwcmluY2lwYWxseSwgbGVzdCBpZiwgW3RoZSBjb25kdWN0IG9mXSB0aGlzIHBhcnQgd2FzIG92ZXJsb29rZWQsIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIG5hdGlvbnMgc2hvdWxkIHRoaW5rIHRoYXQgdGhlIHNhbWUgdGhpbmcgd2FzIHBlcm1pdHRlZCB0aGVtLgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZTwvbmFtZT4sIHNpbmNlIGhlIHJlZmxlY3RlZCB0aGF0IGFsbW9zdCBhbGwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gd2VyZSBmb25kIG9mIHJldm9sdXRpb24sIGFuZCBlYXNpbHkgYW5kIHF1aWNrbHkKICAgICAgICAgICAgICAgICAgICBleGNpdGVkIHRvIHdhcjsgdGhhdCBhbGwgbWVuIGxpa2V3aXNlLCBieSBuYXR1cmUsIGxvdmUgbGliZXJ0eSBhbmQgaGF0ZSB0aGUKICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24gb2Ygc2xhdmVyeSwgaGUgdGhvdWdodCBoZSBvdWdodCB0byBkaXZpZGUgYW5kIG1vcmUgd2lkZWx5IGRpc3RyaWJ1dGUKICAgICAgICAgICAgICAgICAgICBoaXMgYXJteSwgYmVmb3JlIG1vcmUgc3RhdGVzIHNob3VsZCBqb2luIHRoZSBjb25mZWRlcmF0aW9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRvCiAgICAgICAgICAgICAgICAgICAgdGhhdCB3YXI7LXRoZSBvcGVuIGluc3VsdCBvZmZlcmVkIHRvIHRoZSBzdGF0ZSBpbiB0aGUgZGV0ZW50aW9uIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGtuaWdodHMsIHRoZSByZWJlbGxpb24gcmFpc2VkIGFmdGVyIHN1cnJlbmRlcmluZywKICAgICAgICAgICAgICAgICAgICB0aGUgcmV2b2x0IGFmdGVyIGhvc3RhZ2VzIHdlcmUgZ2l2ZW4sIHRoZSBjb25mZWRlcmFjeSBvZiBzbyBtYW55IHN0YXRlcywgYnV0CiAgICAgICAgICAgICAgICAgICAgcHJpbmNpcGFsbHksIGxlc3QgaWYsIFt0aGUgY29uZHVjdCBvZl0gdGhpcyBwYXJ0IHdhcyBvdmVybG9va2VkLCB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBuYXRpb25zIHNob3VsZCB0aGluayB0aGF0IHRoZSBzYW1lIHRoaW5nIHdhcyBwZXJtaXR0ZWQgdGhlbS4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVyZWZvcmU8L25hbWU+LCBzaW5jZSBoZSByZWZsZWN0ZWQgdGhhdCBhbG1vc3QgYWxsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHdlcmUgZm9uZCBvZiByZXZvbHV0aW9uLCBhbmQgZWFzaWx5IGFuZCBxdWlja2x5CiAgICAgICAgICAgICAgICAgICAgZXhjaXRlZCB0byB3YXI7IHRoYXQgYWxsIG1lbiBsaWtld2lzZSwgYnkgbmF0dXJlLCBsb3ZlIGxpYmVydHkgYW5kIGhhdGUgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uIG9mIHNsYXZlcnksIGhlIHRob3VnaHQgaGUgb3VnaHQgdG8gZGl2aWRlIGFuZCBtb3JlIHdpZGVseSBkaXN0cmlidXRlCiAgICAgICAgICAgICAgICAgICAgaGlzIGFybXksIGJlZm9yZSBtb3JlIHN0YXRlcyBzaG91bGQgam9pbiB0aGUgY29uZmVkZXJhdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['3.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlIHRoZXJlZm9yZSBzZW5kcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlQuIExhYmllbnVzPC9uYW1lPiwgaGlzIGxpZXV0ZW5hbnQsIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiwgd2hvIGFyZSBuZWFyZXN0IHRvIHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LiBIZQogICAgICAgICAgICAgICAgICAgIGNoYXJnZXMgaGltIHRvIHZpc2l0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4gYW5kIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdpYW5zPC9uYW1lPiwgYW5kIHRvIGtlZXAgdGhlbSBpbiB0aGVpciBhbGxlZ2lhbmNlIGFuZCByZXBlbCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+ICh3aG8gd2VyZSBzYWlkIHRvIGhhdmUgYmVlbiBzdW1tb25lZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gdG8gdGhlaXIgYWlkLCkgaWYgdGhleSBhdHRlbXB0ZWQgdG8gY3Jvc3MgdGhlIHJpdmVyIGJ5CiAgICAgICAgICAgICAgICAgICAgZm9yY2UgaW4gdGhlaXIgc2hpcHMuIEhlIG9yZGVycyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlAuIENyYXNzdXM8L25hbWU+IHRvIHByb2NlZWQKICAgICAgICAgICAgICAgICAgICBpbnRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg3OCIgcmVnPSJBcXVpdGFpbmUgWzEsNDQuNTgzXSAocmVnaW9uKSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BcXVpdGFuaWEgPC9uYW1lPiB3aXRoCiAgICAgICAgICAgICAgICAgICAgdHdlbHZlIGxlZ2lvbmFyeSBjb2hvcnRzIGFuZCBhIGdyZWF0IG51bWJlciBvZiB0aGUgY2F2YWxyeSwgbGVzdCBhdXhpbGlhcmllcwogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBzZW50IGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGJ5IHRoZXNlIHN0YXRlcywgYW5kIHN1Y2gKICAgICAgICAgICAgICAgICAgICBncmVhdCBuYXRpb25zIGJlIHVuaXRlZC4gSGUgc2VuZHMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5RLiBUaXR1cml1cyBTYWJpbnVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGhpcyBsaWV1dGVuYW50LCB3aXRoIHRocmVlIGxlZ2lvbnMsIGFtb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlVuZWxsaTwvbmFtZT4sIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkN1cmlvc29saXRhZTwvbmFtZT4sIGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXhvdmlpPC9uYW1lPiwgdG8gdGFrZSBjYXJlIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVpciBmb3JjZXMgc2hvdWxkIGJlIGtlcHQgc2VwYXJhdGUgZnJvbSB0aGUgcmVzdC4gSGUgYXBwb2ludHMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5ELiBCcnV0dXM8L25hbWU+LCBhIHlvdW5nIG1hbiwgb3ZlciB0aGUgZmxlZXQgYW5kIHRob3NlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsbGljPC9uYW1lPiB2ZXNzZWxzIHdoaWNoIGhlIGhhZCBvcmRlcmVkIHRvIGJlIGZ1cm5pc2hlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaWN0b25lczwvbmFtZT4gYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNhbnRvbmk8L25hbWU+LCBhbmQgdGhlIG90aGVyIHByb3ZpbmNlcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHJlbWFpbmVkIGF0IHBlYWNlOyBhbmQgY29tbWFuZHMgaGltIHRvIHByb2NlZWQgdG93YXJkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlbmV0aTwvbmFtZT4sIGFzIHNvb24gYXMgaGUgY291bGQuIEhlIGhpbXNlbGYgaGFzdGVucyB0aGl0aGVyIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgbGFuZCBmb3JjZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlQuIExhYmllbnVzPC9uYW1lPiwgaGlzIGxpZXV0ZW5hbnQsIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiwgd2hvIGFyZSBuZWFyZXN0IHRvIHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LiBIZQogICAgICAgICAgICAgICAgICAgIGNoYXJnZXMgaGltIHRvIHZpc2l0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4gYW5kIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdpYW5zPC9uYW1lPiwgYW5kIHRvIGtlZXAgdGhlbSBpbiB0aGVpciBhbGxlZ2lhbmNlIGFuZCByZXBlbCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+ICh3aG8gd2VyZSBzYWlkIHRvIGhhdmUgYmVlbiBzdW1tb25lZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gdG8gdGhlaXIgYWlkLCkgaWYgdGhleSBhdHRlbXB0ZWQgdG8gY3Jvc3MgdGhlIHJpdmVyIGJ5CiAgICAgICAgICAgICAgICAgICAgZm9yY2UgaW4gdGhlaXIgc2hpcHMuIEhlIG9yZGVycyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlAuIENyYXNzdXM8L25hbWU+IHRvIHByb2NlZWQKICAgICAgICAgICAgICAgICAgICBpbnRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg3OCIgcmVnPSJBcXVpdGFpbmUgWzEsNDQuNTgzXSAocmVnaW9uKSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BcXVpdGFuaWEgPC9uYW1lPiB3aXRoCiAgICAgICAgICAgICAgICAgICAgdHdlbHZlIGxlZ2lvbmFyeSBjb2hvcnRzIGFuZCBhIGdyZWF0IG51bWJlciBvZiB0aGUgY2F2YWxyeSwgbGVzdCBhdXhpbGlhcmllcwogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBzZW50IGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGJ5IHRoZXNlIHN0YXRlcywgYW5kIHN1Y2gKICAgICAgICAgICAgICAgICAgICBncmVhdCBuYXRpb25zIGJlIHVuaXRlZC4gSGUgc2VuZHMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5RLiBUaXR1cml1cyBTYWJpbnVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGhpcyBsaWV1dGVuYW50LCB3aXRoIHRocmVlIGxlZ2lvbnMsIGFtb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlVuZWxsaTwvbmFtZT4sIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkN1cmlvc29saXRhZTwvbmFtZT4sIGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXhvdmlpPC9uYW1lPiwgdG8gdGFrZSBjYXJlIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVpciBmb3JjZXMgc2hvdWxkIGJlIGtlcHQgc2VwYXJhdGUgZnJvbSB0aGUgcmVzdC4gSGUgYXBwb2ludHMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5ELiBCcnV0dXM8L25hbWU+LCBhIHlvdW5nIG1hbiwgb3ZlciB0aGUgZmxlZXQgYW5kIHRob3NlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsbGljPC9uYW1lPiB2ZXNzZWxzIHdoaWNoIGhlIGhhZCBvcmRlcmVkIHRvIGJlIGZ1cm5pc2hlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaWN0b25lczwvbmFtZT4gYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNhbnRvbmk8L25hbWU+LCBhbmQgdGhlIG90aGVyIHByb3ZpbmNlcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHJlbWFpbmVkIGF0IHBlYWNlOyBhbmQgY29tbWFuZHMgaGltIHRvIHByb2NlZWQgdG93YXJkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlbmV0aTwvbmFtZT4sIGFzIHNvb24gYXMgaGUgY291bGQuIEhlIGhpbXNlbGYgaGFzdGVucyB0aGl0aGVyIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgbGFuZCBmb3JjZXMuIDwvdHJhbnNsYXRpb24+"
translation['3.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBzaXRlcyBvZiB0aGVpciB0b3ducyB3ZXJlIGdlbmVyYWxseSBzdWNoIHRoYXQsIGJlaW5nIHBsYWNlZCBvbiBleHRyZW1lIHBvaW50cwogICAgICAgICAgICAgICAgICAgIFtvZiBsYW5kXSBhbmQgb24gcHJvbW9udG9yaWVzLCB0aGV5IG5laXRoZXIgaGFkIGFuIGFwcHJvYWNoIGJ5IGxhbmQgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICB0aWRlIGhhZCBydXNoZWQgaW4gZnJvbSB0aGUgbWFpbiBvY2Vhbiwgd2hpY2ggYWx3YXlzIGhhcHBlbnMgdHdpY2UgaW4gdGhlIHNwYWNlCiAgICAgICAgICAgICAgICAgICAgb2YgdHdlbHZlIGhvdXJzOyBub3IgYnkgc2hpcHMsIGJlY2F1c2UsIHVwb24gdGhlIHRpZGUgZWJiaW5nIGFnYWluLCB0aGUgc2hpcHMKICAgICAgICAgICAgICAgICAgICB3ZXJlIGxpa2VseSB0byBiZSBkYXNoZWQgdXBvbiB0aGUgc2hvYWxzLiBUaHVzLCBieSBlaXRoZXIgY2lyY3Vtc3RhbmNlLCB3YXMgdGhlCiAgICAgICAgICAgICAgICAgICAgc3Rvcm1pbmcgb2YgdGhlaXIgdG93bnMgcmVuZGVyZWQgZGlmZmljdWx0OyBhbmQgaWYgYXQgYW55IHRpbWUgcGVyY2hhbmNlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlbmV0aTwvbmFtZT4gb3ZlcnBvd2VyZWQgYnkgdGhlIGdyZWF0bmVzcyBvZiBvdXIgd29ya3MsICh0aGUgc2VhCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGJlZW4gZXhjbHVkZWQgYnkgYSBtb3VuZCBhbmQgbGFyZ2UgZGFtcywgYW5kIHRoZSBsYXR0ZXIgYmVpbmcgbWFkZSBhbG1vc3QKICAgICAgICAgICAgICAgICAgICBlcXVhbCBpbiBoZWlnaHQgdG8gdGhlIHdhbGxzIG9mIHRoZSB0b3duKSBoYWQgYmVndW4gdG8gZGVzcGFpciBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGZvcnR1bmVzOyBicmluZ2luZyB1cCBhIGxhcmdlIG51bWJlciBvZiBzaGlwcywgb2Ygd2hpY2ggdGhleSBoYWQgYSB2ZXJ5IGdyZWF0CiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHksIHRoZXkgY2FycmllZCBvZmYgYWxsIHRoZWlyIHByb3BlcnR5IGFuZCBiZXRvb2sgdGhlbXNlbHZlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBuZWFyZXN0IHRvd25zOyB0aGVyZSB0aGV5IGFnYWluIGRlZmVuZGVkIHRoZW1zZWx2ZXMgYnkgdGhlIHNhbWUgYWR2YW50YWdlcyBvZgogICAgICAgICAgICAgICAgICAgIHNpdHVhdGlvbi4gVGhleSBkaWQgdGhpcyB0aGUgbW9yZSBlYXNpbHkgZHVyaW5nIGEgZ3JlYXQgcGFydCBvZiB0aGUgc3VtbWVyLAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2Ugb3VyIHNoaXBzIHdlcmUga2VwdCBiYWNrIGJ5IHN0b3JtcywgYW5kIHRoZSBkaWZmaWN1bHR5IG9mIHNhaWxpbmcgd2FzCiAgICAgICAgICAgICAgICAgICAgdmVyeSBncmVhdCBpbiB0aGF0IHZhc3QgYW5kIG9wZW4gc2VhLCB3aXRoIGl0cyBzdHJvbmcgdGlkZXMgYW5kIGl0cyBoYXJib3JzIGZhcgogICAgICAgICAgICAgICAgICAgIGFwYXJ0IGFuZCBleGNlZWRpbmdseSBmZXcgaW4gbnVtYmVyLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZW5ldGk8L25hbWU+IG92ZXJwb3dlcmVkIGJ5IHRoZSBncmVhdG5lc3Mgb2Ygb3VyIHdvcmtzLCAodGhlIHNlYQogICAgICAgICAgICAgICAgICAgIGhhdmluZyBiZWVuIGV4Y2x1ZGVkIGJ5IGEgbW91bmQgYW5kIGxhcmdlIGRhbXMsIGFuZCB0aGUgbGF0dGVyIGJlaW5nIG1hZGUgYWxtb3N0CiAgICAgICAgICAgICAgICAgICAgZXF1YWwgaW4gaGVpZ2h0IHRvIHRoZSB3YWxscyBvZiB0aGUgdG93bikgaGFkIGJlZ3VuIHRvIGRlc3BhaXIgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBmb3J0dW5lczsgYnJpbmdpbmcgdXAgYSBsYXJnZSBudW1iZXIgb2Ygc2hpcHMsIG9mIHdoaWNoIHRoZXkgaGFkIGEgdmVyeSBncmVhdAogICAgICAgICAgICAgICAgICAgIHF1YW50aXR5LCB0aGV5IGNhcnJpZWQgb2ZmIGFsbCB0aGVpciBwcm9wZXJ0eSBhbmQgYmV0b29rIHRoZW1zZWx2ZXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbmVhcmVzdCB0b3duczsgdGhlcmUgdGhleSBhZ2FpbiBkZWZlbmRlZCB0aGVtc2VsdmVzIGJ5IHRoZSBzYW1lIGFkdmFudGFnZXMgb2YKICAgICAgICAgICAgICAgICAgICBzaXR1YXRpb24uIFRoZXkgZGlkIHRoaXMgdGhlIG1vcmUgZWFzaWx5IGR1cmluZyBhIGdyZWF0IHBhcnQgb2YgdGhlIHN1bW1lciwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIG91ciBzaGlwcyB3ZXJlIGtlcHQgYmFjayBieSBzdG9ybXMsIGFuZCB0aGUgZGlmZmljdWx0eSBvZiBzYWlsaW5nIHdhcwogICAgICAgICAgICAgICAgICAgIHZlcnkgZ3JlYXQgaW4gdGhhdCB2YXN0IGFuZCBvcGVuIHNlYSwgd2l0aCBpdHMgc3Ryb25nIHRpZGVzIGFuZCBpdHMgaGFyYm9ycyBmYXIKICAgICAgICAgICAgICAgICAgICBhcGFydCBhbmQgZXhjZWVkaW5nbHkgZmV3IGluIG51bWJlci4gPC90cmFuc2xhdGlvbj4="
translation['3.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB0aGVpciBzaGlwcyB3ZXJlIGJ1aWx0IGFuZCBlcXVpcHBlZCBhZnRlciB0aGlzIG1hbm5lci4gVGhlIGtlZWxzIHdlcmUKICAgICAgICAgICAgICAgICAgICBzb21ld2hhdCBmbGF0dGVyIHRoYW4gdGhvc2Ugb2Ygb3VyIHNoaXBzLCB3aGVyZWJ5IHRoZXkgY291bGQgbW9yZSBlYXNpbHkKICAgICAgICAgICAgICAgICAgICBlbmNvdW50ZXIgdGhlIHNoYWxsb3dzIGFuZCB0aGUgZWJiaW5nIG9mIHRoZSB0aWRlOiB0aGUgcHJvd3Mgd2VyZSByYWlzZWQgdmVyeQogICAgICAgICAgICAgICAgICAgIGhpZ2gsIGFuZCwgaW4gbGlrZSBtYW5uZXIgdGhlIHN0ZXJucyB3ZXJlIGFkYXB0ZWQgdG8gdGhlIGZvcmNlIG9mIHRoZSB3YXZlcyBhbmQKICAgICAgICAgICAgICAgICAgICBzdG9ybXMgW3doaWNoIHRoZXkgd2VyZSBmb3JtZWQgdG8gc3VzdGFpbl0uIFRoZSBzaGlwcyB3ZXJlIGJ1aWx0IHdob2xseSBvZiBvYWssCiAgICAgICAgICAgICAgICAgICAgYW5kIGRlc2lnbmVkIHRvIGVuZHVyZSBhbnkgZm9yY2UgYW5kIHZpb2xlbmNlIHdoYXRldmVyOyB0aGUgYmVuY2hlcyB3aGljaCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgbWFkZSBvZiBwbGFua3MgYSBmb290IGluIGJyZWFkdGgsIHdlcmUgZmFzdGVuZWQgYnkgaXJvbiBzcGlrZXMgb2YgdGhlIHRoaWNrbmVzcwogICAgICAgICAgICAgICAgICAgIG9mIGEgbWFuJ3MgdGh1bWI7IHRoZSBhbmNob3JzIHdlcmUgc2VjdXJlZCBmYXN0IGJ5IGlyb24gY2hhaW5zIGluc3RlYWQgb2YKICAgICAgICAgICAgICAgICAgICBjYWJsZXMsIGFuZCBmb3Igc2FpbHMgdGhleSB1c2VkIHNraW5zIGFuZCB0aGluIGRyZXNzZWQgbGVhdGhlci4gVGhlc2UgW3dlcmUKICAgICAgICAgICAgICAgICAgICB1c2VkXSBlaXRoZXIgdGhyb3VnaCB0aGVpciB3YW50IG9mIGNhbnZhcyBhbmQgdGhlaXIgaWdub3JhbmNlIG9mIGl0cwogICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uLCBvciBmb3IgdGhpcyByZWFzb24sIHdoaWNoIGlzIG1vcmUgcHJvYmFibGUsIHRoYXQgdGhleSB0aG91Z2h0IHRoYXQKICAgICAgICAgICAgICAgICAgICBzdWNoIHN0b3JtcyBvZiB0aGUgb2NlYW4sIGFuZCBzdWNoIHZpb2xlbnQgZ2FsZXMgb2Ygd2luZCBjb3VsZCBub3QgYmUgcmVzaXN0ZWQKICAgICAgICAgICAgICAgICAgICBieSBzYWlscywgbm9yIHNoaXBzIG9mIHN1Y2ggZ3JlYXQgYnVyZGVuIGJlIGNvbnZlbmllbnRseSBlbm91Z2ggbWFuYWdlZCBieSB0aGVtLgogICAgICAgICAgICAgICAgICAgIFRoZSBlbmNvdW50ZXIgb2Ygb3VyIGZsZWV0IHdpdGggdGhlc2Ugc2hpcHMnIHdhcyBvZiBzdWNoIGEgbmF0dXJlIHRoYXQgb3VyIGZsZWV0CiAgICAgICAgICAgICAgICAgICAgZXhjZWxsZWQgaW4gc3BlZWQgYWxvbmUsIGFuZCB0aGUgcGx5aW5nIG9mIHRoZSBvYXJzOyBvdGhlciB0aGluZ3MsIGNvbnNpZGVyaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIG5hdHVyZSBvZiB0aGUgcGxhY2UgW2FuZF0gdGhlIHZpb2xlbmNlIG9mIHRoZSBzdG9ybXMsIHdlcmUgbW9yZSBzdWl0YWJsZSBhbmQKICAgICAgICAgICAgICAgICAgICBiZXR0ZXIgYWRhcHRlZCBvbiB0aGVpciBzaWRlOyBmb3IgbmVpdGhlciBjb3VsZCBvdXIgc2hpcHMgaW5qdXJlIHRoZWlycyB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYmVha3MgKHNvIGdyZWF0IHdhcyB0aGVpciBzdHJlbmd0aCksIG5vciBvbiBhY2NvdW50IG9mIHRoZWlyIGhlaWdodCB3YXMgYQogICAgICAgICAgICAgICAgICAgIHdlYXBvbiBlYXNpbHkgY2FzdCB1cCB0byB0aGVtOyBhbmQgZm9yIHRoZSBzYW1lIHJlYXNvbiB0aGV5IHdlcmUgbGVzcyByZWFkaWx5CiAgICAgICAgICAgICAgICAgICAgbG9ja2VkIGluIGJ5IHJvY2tzLiBUbyB0aGlzIHdhcyBhZGRlZCwgdGhhdCB3aGVuZXZlciBhIHN0b3JtIGJlZ2FuIHRvIHJhZ2UgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhleSByYW4gYmVmb3JlIHRoZSB3aW5kLCB0aGV5IGJvdGggY291bGQgd2VhdGhlciB0aGUgc3Rvcm0gbW9yZSBlYXNpbHkgYW5kCiAgICAgICAgICAgICAgICAgICAgaGVhdmUgdG8gc2VjdXJlbHkgaW4gdGhlIHNoYWxsb3dzLCBhbmQgd2hlbiBsZWZ0IGJ5IHRoZSB0aWRlIGZlYXJlZCBub3RoaW5nIGZyb20KICAgICAgICAgICAgICAgICAgICByb2NrcyBhbmQgc2hlbHZlczogdGhlIHJpc2sgb2YgYWxsIHdoaWNoIHRoaW5ncyB3YXMgbXVjaCB0byBiZSBkcmVhZGVkIGJ5IG91cgogICAgICAgICAgICAgICAgICAgIHNoaXBzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYWZ0ZXIgdGFraW5nIG1hbnkgb2YgdGhlaXIgdG93bnMsIHBlcmNlaXZpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IHNvIG11Y2ggbGFib3Igd2FzIHNwZW50IGluIHZhaW4gYW5kIHRoYXQgdGhlIGZsaWdodCBvZiB0aGUgZW5lbXkgY291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgYmUgcHJldmVudGVkIG9uIHRoZSBjYXB0dXJlIG9mIHRoZWlyIHRvd25zLCBhbmQgdGhhdCBpbmp1cnkgY291bGQgbm90IGJlIGRvbmUKICAgICAgICAgICAgICAgICAgICB0aGVtLCBoZSBkZXRlcm1pbmVkIHRvIHdhaXQgZm9yIGhpcyBmbGVldC4gQXMgc29vbiBhcyBpdCBjYW1lIHVwIGFuZCB3YXMgZmlyc3QKICAgICAgICAgICAgICAgICAgICBzZWVuIGJ5IHRoZSBlbmVteSwgYWJvdXQgMjIwIG9mIHRoZWlyIHNoaXBzLCBmdWxseSBlcXVpcHBlZCBhbmQgYXBwb2ludGVkIHdpdGgKICAgICAgICAgICAgICAgICAgICBldmVyeSBraW5kIG9mIFtuYXZhbF0gaW1wbGVtZW50LCBzYWlsZWQgZm9ydGggZnJvbSB0aGUgaGFyYm9yLCBhbmQgZHJldyB1cAogICAgICAgICAgICAgICAgICAgIG9wcG9zaXRlIHRvIG91cnM7IG5vciBkaWQgaXQgYXBwZWFyIGNsZWFyIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+QnJ1dHVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aG8gY29tbWFuZGVkIHRoZSBmbGVldCwgb3IgdG8gdGhlIHRyaWJ1bmVzIG9mIHRoZSBzb2xkaWVycyBhbmQgdGhlIGNlbnR1cmlvbnMsCiAgICAgICAgICAgICAgICAgICAgdG8gd2hvbSB0aGUgc2V2ZXJhbCBzaGlwcyB3ZXJlIGFzc2lnbmVkLCB3aGF0IHRvIGRvLCBvciB3aGF0IHN5c3RlbSBvZiB0YWN0aWNzCiAgICAgICAgICAgICAgICAgICAgdG8gYWRvcHQ7IGZvciB0aGV5IGtuZXcgdGhhdCBkYW1hZ2UgY291bGQgbm90IGJlIGRvbmUgYnkgdGhlaXIgYmVha3M7IGFuZCB0aGF0LAogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIHR1cnJldHMgd2VyZSBidWlsdCBbb24gdGhlaXIgZGVja3NdLCB5ZXQgdGhlIGhlaWdodCBvZiB0aGUgc3RlbXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFyYmFyaWFuIHNoaXBzIGV4Y2VlZGVkIHRoZXNlOyBzbyB0aGF0IHdlYXBvbnMgY291bGQgbm90IGJlIGNhc3QgdXAgZnJvbSBbb3VyXQogICAgICAgICAgICAgICAgICAgIGxvd2VyIHBvc2l0aW9uIHdpdGggc3VmZmljaWVudCBlZmZlY3QsIGFuZCB0aG9zZSBjYXN0IGJ5IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IGZlbGwgdGhlIG1vcmUgZm9yY2libHkgdXBvbiB1cy4gT25lIHRoaW5nIHByb3ZpZGVkIGJ5IG91ciBtZW4KICAgICAgICAgICAgICAgICAgICB3YXMgb2YgZ3JlYXQgc2VydmljZSwgW3Zpei5dIHNoYXJwIGhvb2tzIGluc2VydGVkIGludG8gYW5kIGZhc3RlbmVkIHVwb24gcG9sZXMsCiAgICAgICAgICAgICAgICAgICAgb2YgYSBmb3JtIG5vdCB1bmxpa2UgdGhlIGhvb2tzIHVzZWQgaW4gYXR0YWNraW5nIHRvd24gd2FsbHMuIFdoZW4gdGhlIHJvcGVzCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggZmFzdGVuZWQgdGhlIHNhaWwteWFyZHMgdG8gdGhlIG1hc3RzIHdlcmUgY2F1Z2h0IGJ5IHRoZW0gYW5kIHB1bGxlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgb3VyIHZlc3NlbCB2aWdvcm91c2x5IGltcGVsbGVkIHdpdGggdGhlIG9hcnMsIHRoZXkgW3RoZSByb3Blc10gd2VyZSBzZXZlcmVkOyBhbmQKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXkgd2VyZSBjdXQgYXdheSwgdGhlIHlhcmRzIG5lY2Vzc2FyaWx5IGZlbGwgZG93bjsgc28gdGhhdCBhcyBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgaG9wZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxsaWM8L25hbWU+IHZlc3NlbHMgZGVwZW5kZWQgb24gdGhlaXIgc2FpbHMgYW5kIHJpZ2dpbmcsCiAgICAgICAgICAgICAgICAgICAgdXBvbiB0aGVzZSBiZWluZyBjdXQgYXdheSwgdGhlIGVudGlyZSBtYW5hZ2VtZW50IG9mIHRoZSBzaGlwcyB3YXMgdGFrZW4gZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZW0gYXQgdGhlIHNhbWUgdGltZS4gVGhlIHJlc3Qgb2YgdGhlIGNvbnRlc3QgZGVwZW5kZWQgb24gY291cmFnZTsgaW4gd2hpY2ggb3VyCiAgICAgICAgICAgICAgICAgICAgbWVuIGRlY2lkZWRseSBoYWQgdGhlIGFkdmFudGFnZTsgYW5kIHRoZSBtb3JlIHNvLCBiZWNhdXNlIHRoZSB3aG9sZSBhY3Rpb24gd2FzCiAgICAgICAgICAgICAgICAgICAgY2FycmllZCBvbiBpbiB0aGUgc2lnaHQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGFuZCB0aGUgZW50aXJlIGFybXk7CiAgICAgICAgICAgICAgICAgICAgc28gdGhhdCBubyBhY3QsIGEgbGl0dGxlIG1vcmUgdmFsaWFudCB0aGFuIG9yZGluYXJ5LCBjb3VsZCBwYXNzIHVub2JzZXJ2ZWQsIGZvcgogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgaGlsbHMgYW5kIGhpZ2hlciBncm91bmRzLCBmcm9tIHdoaWNoIHRoZXJlIHdhcyBhIG5lYXIgcHJvc3BlY3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VhIHdlcmUgb2NjdXBpZWQgYnkgb3VyIGFybXkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGFmdGVyIHRha2luZyBtYW55IG9mIHRoZWlyIHRvd25zLCBwZXJjZWl2aW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBzbyBtdWNoIGxhYm9yIHdhcyBzcGVudCBpbiB2YWluIGFuZCB0aGF0IHRoZSBmbGlnaHQgb2YgdGhlIGVuZW15IGNvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIGJlIHByZXZlbnRlZCBvbiB0aGUgY2FwdHVyZSBvZiB0aGVpciB0b3ducywgYW5kIHRoYXQgaW5qdXJ5IGNvdWxkIG5vdCBiZSBkb25lCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgaGUgZGV0ZXJtaW5lZCB0byB3YWl0IGZvciBoaXMgZmxlZXQuIEFzIHNvb24gYXMgaXQgY2FtZSB1cCBhbmQgd2FzIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgc2VlbiBieSB0aGUgZW5lbXksIGFib3V0IDIyMCBvZiB0aGVpciBzaGlwcywgZnVsbHkgZXF1aXBwZWQgYW5kIGFwcG9pbnRlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZXZlcnkga2luZCBvZiBbbmF2YWxdIGltcGxlbWVudCwgc2FpbGVkIGZvcnRoIGZyb20gdGhlIGhhcmJvciwgYW5kIGRyZXcgdXAKICAgICAgICAgICAgICAgICAgICBvcHBvc2l0ZSB0byBvdXJzOyBub3IgZGlkIGl0IGFwcGVhciBjbGVhciB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkJydXR1czwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgd2hvIGNvbW1hbmRlZCB0aGUgZmxlZXQsIG9yIHRvIHRoZSB0cmlidW5lcyBvZiB0aGUgc29sZGllcnMgYW5kIHRoZSBjZW50dXJpb25zLAogICAgICAgICAgICAgICAgICAgIHRvIHdob20gdGhlIHNldmVyYWwgc2hpcHMgd2VyZSBhc3NpZ25lZCwgd2hhdCB0byBkbywgb3Igd2hhdCBzeXN0ZW0gb2YgdGFjdGljcwogICAgICAgICAgICAgICAgICAgIHRvIGFkb3B0OyBmb3IgdGhleSBrbmV3IHRoYXQgZGFtYWdlIGNvdWxkIG5vdCBiZSBkb25lIGJ5IHRoZWlyIGJlYWtzOyBhbmQgdGhhdCwKICAgICAgICAgICAgICAgICAgICBhbHRob3VnaCB0dXJyZXRzIHdlcmUgYnVpbHQgW29uIHRoZWlyIGRlY2tzXSwgeWV0IHRoZSBoZWlnaHQgb2YgdGhlIHN0ZW1zIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGJhcmJhcmlhbiBzaGlwcyBleGNlZWRlZCB0aGVzZTsgc28gdGhhdCB3ZWFwb25zIGNvdWxkIG5vdCBiZSBjYXN0IHVwIGZyb20gW291cl0KICAgICAgICAgICAgICAgICAgICBsb3dlciBwb3NpdGlvbiB3aXRoIHN1ZmZpY2llbnQgZWZmZWN0LCBhbmQgdGhvc2UgY2FzdCBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBmZWxsIHRoZSBtb3JlIGZvcmNpYmx5IHVwb24gdXMuIE9uZSB0aGluZyBwcm92aWRlZCBieSBvdXIgbWVuCiAgICAgICAgICAgICAgICAgICAgd2FzIG9mIGdyZWF0IHNlcnZpY2UsIFt2aXouXSBzaGFycCBob29rcyBpbnNlcnRlZCBpbnRvIGFuZCBmYXN0ZW5lZCB1cG9uIHBvbGVzLAogICAgICAgICAgICAgICAgICAgIG9mIGEgZm9ybSBub3QgdW5saWtlIHRoZSBob29rcyB1c2VkIGluIGF0dGFja2luZyB0b3duIHdhbGxzLiBXaGVuIHRoZSByb3BlcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGZhc3RlbmVkIHRoZSBzYWlsLXlhcmRzIHRvIHRoZSBtYXN0cyB3ZXJlIGNhdWdodCBieSB0aGVtIGFuZCBwdWxsZWQsIGFuZAogICAgICAgICAgICAgICAgICAgIG91ciB2ZXNzZWwgdmlnb3JvdXNseSBpbXBlbGxlZCB3aXRoIHRoZSBvYXJzLCB0aGV5IFt0aGUgcm9wZXNdIHdlcmUgc2V2ZXJlZDsgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGV5IHdlcmUgY3V0IGF3YXksIHRoZSB5YXJkcyBuZWNlc3NhcmlseSBmZWxsIGRvd247IHNvIHRoYXQgYXMgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGhvcGUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsbGljPC9uYW1lPiB2ZXNzZWxzIGRlcGVuZGVkIG9uIHRoZWlyIHNhaWxzIGFuZCByaWdnaW5nLAogICAgICAgICAgICAgICAgICAgIHVwb24gdGhlc2UgYmVpbmcgY3V0IGF3YXksIHRoZSBlbnRpcmUgbWFuYWdlbWVudCBvZiB0aGUgc2hpcHMgd2FzIHRha2VuIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGVtIGF0IHRoZSBzYW1lIHRpbWUuIFRoZSByZXN0IG9mIHRoZSBjb250ZXN0IGRlcGVuZGVkIG9uIGNvdXJhZ2U7IGluIHdoaWNoIG91cgogICAgICAgICAgICAgICAgICAgIG1lbiBkZWNpZGVkbHkgaGFkIHRoZSBhZHZhbnRhZ2U7IGFuZCB0aGUgbW9yZSBzbywgYmVjYXVzZSB0aGUgd2hvbGUgYWN0aW9uIHdhcwogICAgICAgICAgICAgICAgICAgIGNhcnJpZWQgb24gaW4gdGhlIHNpZ2h0IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhbmQgdGhlIGVudGlyZSBhcm15OwogICAgICAgICAgICAgICAgICAgIHNvIHRoYXQgbm8gYWN0LCBhIGxpdHRsZSBtb3JlIHZhbGlhbnQgdGhhbiBvcmRpbmFyeSwgY291bGQgcGFzcyB1bm9ic2VydmVkLCBmb3IKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIGhpbGxzIGFuZCBoaWdoZXIgZ3JvdW5kcywgZnJvbSB3aGljaCB0aGVyZSB3YXMgYSBuZWFyIHByb3NwZWN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNlYSB3ZXJlIG9jY3VwaWVkIGJ5IG91ciBhcm15LiA8L3RyYW5zbGF0aW9uPg=="
translation['3.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBzYWlsIHlhcmRzIFtvZiB0aGUgZW5lbXldLCBhcyB3ZSBoYXZlIHNhaWQsIGJlaW5nIGJyb3VnaHQgZG93biwgYWx0aG91Z2ggdHdvCiAgICAgICAgICAgICAgICAgICAgYW5kIFtpbiBzb21lIGNhc2VzXSB0aHJlZSBzaGlwcyBbb2YgdGhlaXJzXSBzdXJyb3VuZGVkIGVhY2ggb25lIFtvZiBvdXJzXSwgdGhlCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMgc3Ryb3ZlIHdpdGggdGhlIGdyZWF0ZXN0IGVuZXJneSB0byBib2FyZCB0aGUgc2hpcHMgb2YgdGhlIGVuZW15OyBhbmQsCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgdGhlIGJhcmJhcmlhbnMgb2JzZXJ2ZWQgdGhpcyB0YWtpbmcgcGxhY2UsIGFzIGEgZ3JlYXQgbWFueSBvZiB0aGVpciBzaGlwcwogICAgICAgICAgICAgICAgICAgIHdlcmUgYmVhdGVuLCBhbmQgYXMgbm8gcmVsaWVmIGZvciB0aGF0IGV2aWwgY291bGQgYmUgZGlzY292ZXJlZCwgdGhleSBoYXN0ZW5lZAogICAgICAgICAgICAgICAgICAgIHRvIHNlZWsgc2FmZXR5IGluIGZsaWdodC4gQW5kLCBoYXZpbmcgbm93IHR1cm5lZCB0aGVpciB2ZXNzZWxzIHRvIHRoYXQgcXVhcnRlcgogICAgICAgICAgICAgICAgICAgIGluIHdoaWNoIHRoZSB3aW5kIGJsZXcsIHNvIGdyZWF0IGEgY2FsbSBhbmQgbHVsbCBzdWRkZW5seSBhcm9zZSwgdGhhdCB0aGV5IGNvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IG1vdmUgb3V0IG9mIHRoZWlyIHBsYWNlLCB3aGljaCBjaXJjdW1zdGFuY2UsIHRydWx5LCB3YXMgZXhjZWVkaW5nbHkKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bmUgZm9yIGZpbmlzaGluZyB0aGUgYnVzaW5lc3M7IGZvciBvdXIgbWVuIGdhdmUgY2hhc2UgYW5kIHRvb2sgdGhlbSBvbmUKICAgICAgICAgICAgICAgICAgICBieSBvbmUsIHNvIHRoYXQgdmVyeSBmZXcgb3V0IG9mIGFsbCB0aGUgbnVtYmVyLCBbYW5kIHRob3NlXSBieSB0aGUgaW50ZXJ2ZW50aW9uCiAgICAgICAgICAgICAgICAgICAgb2YgbmlnaHQsIGFycml2ZWQgYXQgdGhlIGxhbmQsIGFmdGVyIHRoZSBiYXR0bGUgaGFkIGxhc3RlZCBhbG1vc3QgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBmb3VydGggaG91ciB0aWxsIHN1bi1zZXQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ5IHRoaXMgYmF0dGxlIHRoZSB3YXIgd2l0aCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZW5ldGk8L25hbWU+IGFuZCB0aGUgd2hvbGUgb2YgdGhlIHNlYQogICAgICAgICAgICAgICAgICAgIGNvYXN0IHdhcyBmaW5pc2hlZDsgZm9yIGJvdGggYWxsIHRoZSB5b3V0aCwgYW5kIGFsbCwgdG9vLCBvZiBtb3JlIGFkdmFuY2VkIGFnZSwKICAgICAgICAgICAgICAgICAgICBpbiB3aG9tIHRoZXJlIHdhcyBhbnkgZGlzY3JldGlvbiBvciByYW5rLCBoYWQgYXNzZW1ibGVkIGluIHRoYXQgYmF0dGxlOyBhbmQgdGhleQogICAgICAgICAgICAgICAgICAgIGhhZCBjb2xsZWN0ZWQgaW4gdGhhdCBvbmUgcGxhY2Ugd2hhdGV2ZXIgbmF2YWwgZm9yY2VzIHRoZXkgaGFkIGFueXdoZXJlOyBhbmQKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXNlIHdlcmUgbG9zdCwgdGhlIHN1cnZpdm9ycyBoYWQgbm8gcGxhY2UgdG8gcmV0cmVhdCB0bywgbm9yIG1lYW5zIG9mCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kaW5nIHRoZWlyIHRvd25zLiBUaGV5IGFjY29yZGluZ2x5IHN1cnJlbmRlcmVkIHRoZW1zZWx2ZXMgYW5kIGFsbCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb25zIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb24gd2hvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdGhvdWdodCB0aGF0IHB1bmlzaG1lbnQgc2hvdWxkIGJlIGluZmxpY3RlZCB0aGUgbW9yZQogICAgICAgICAgICAgICAgICAgIHNldmVyZWx5LCBpbiBvcmRlciB0aGF0IGZvciB0aGUgZnV0dXJlIHRoZSByaWdodHMgb2YgZW1iYXNzYWRvcnMgbWlnaHQgYmUgbW9yZQogICAgICAgICAgICAgICAgICAgIGNhcmVmdWxseSByZXNwZWN0ZWQgYnkgYmFyYmFyaWFuczsgaGF2aW5nLCB0aGVyZWZvcmUsIHB1dCB0byBkZWF0aCBhbGwgdGhlaXIKICAgICAgICAgICAgICAgICAgICBzZW5hdGUsIGhlIHNvbGQgdGhlIHJlc3QgZm9yIHNsYXZlcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVuZXRpPC9uYW1lPiBhbmQgdGhlIHdob2xlIG9mIHRoZSBzZWEKICAgICAgICAgICAgICAgICAgICBjb2FzdCB3YXMgZmluaXNoZWQ7IGZvciBib3RoIGFsbCB0aGUgeW91dGgsIGFuZCBhbGwsIHRvbywgb2YgbW9yZSBhZHZhbmNlZCBhZ2UsCiAgICAgICAgICAgICAgICAgICAgaW4gd2hvbSB0aGVyZSB3YXMgYW55IGRpc2NyZXRpb24gb3IgcmFuaywgaGFkIGFzc2VtYmxlZCBpbiB0aGF0IGJhdHRsZTsgYW5kIHRoZXkKICAgICAgICAgICAgICAgICAgICBoYWQgY29sbGVjdGVkIGluIHRoYXQgb25lIHBsYWNlIHdoYXRldmVyIG5hdmFsIGZvcmNlcyB0aGV5IGhhZCBhbnl3aGVyZTsgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGVzZSB3ZXJlIGxvc3QsIHRoZSBzdXJ2aXZvcnMgaGFkIG5vIHBsYWNlIHRvIHJldHJlYXQgdG8sIG5vciBtZWFucyBvZgogICAgICAgICAgICAgICAgICAgIGRlZmVuZGluZyB0aGVpciB0b3ducy4gVGhleSBhY2NvcmRpbmdseSBzdXJyZW5kZXJlZCB0aGVtc2VsdmVzIGFuZCBhbGwgdGhlaXIKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9ucyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIG9uIHdob20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRob3VnaHQgdGhhdCBwdW5pc2htZW50IHNob3VsZCBiZSBpbmZsaWN0ZWQgdGhlIG1vcmUKICAgICAgICAgICAgICAgICAgICBzZXZlcmVseSwgaW4gb3JkZXIgdGhhdCBmb3IgdGhlIGZ1dHVyZSB0aGUgcmlnaHRzIG9mIGVtYmFzc2Fkb3JzIG1pZ2h0IGJlIG1vcmUKICAgICAgICAgICAgICAgICAgICBjYXJlZnVsbHkgcmVzcGVjdGVkIGJ5IGJhcmJhcmlhbnM7IGhhdmluZywgdGhlcmVmb3JlLCBwdXQgdG8gZGVhdGggYWxsIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlLCBoZSBzb2xkIHRoZSByZXN0IGZvciBzbGF2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['3.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIHRoZXNlIHRoaW5ncyBhcmUgZ29pbmcgb24gYW1vbmcgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVuZXRpPC9uYW1lPiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5RLiBUaXR1cml1cyBTYWJpbnVzPC9uYW1lPiB3aXRoIHRob3NlIHRyb29wcyB3aGljaCBoZSBoYWQgcmVjZWl2ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGFycml2ZXMgaW4gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlVuZWxsaTwvbmFtZT4uIE92ZXIgdGhlc2UgcGVvcGxlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmlyaWRvdml4PC9uYW1lPiBydWxlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgaGVsZCB0aGUgY2hpZWYgY29tbWFuZCBvZiBhbGwgdGhvc2Ugc3RhdGVzIHdoaWNoIGhhZCByZXZvbHRlZDsgZnJvbSB3aGljaCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQgYSBsYXJnZSBhbmQgcG93ZXJmdWwgYXJteS4gQW5kIGluIHRob3NlIGZldyBkYXlzLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdWxlcmNpPC9uYW1lPiBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2V4b3ZpaTwvbmFtZT4sIGhhdmluZyBzbGFpbiB0aGVpciBzZW5hdGUKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIHRoZXkgd291bGQgbm90IGNvbnNlbnQgdG8gYmUgcHJvbW90ZXJzIG9mIHRoZSB3YXIsIHNodXQgdGhlaXIgZ2F0ZXMKICAgICAgICAgICAgICAgICAgICBbYWdhaW5zdCB1c10gYW5kIHVuaXRlZCB0aGVtc2VsdmVzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmlyaWRvdml4PC9uYW1lPjsgYSBncmVhdCBtdWx0aXR1ZGUKICAgICAgICAgICAgICAgICAgICBiZXNpZGVzIG9mIGRlc3BlcmF0ZSBtZW4gYW5kIHJvYmJlcnMgYXNzZW1ibGVkIG91dCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gZnJvbSBhbGwKICAgICAgICAgICAgICAgICAgICBxdWFydGVycywgd2hvbSB0aGUgaG9wZSBvZiBwbHVuZGVyaW5nIGFuZCB0aGUgbG92ZSBvZiBmaWdodGluZyBoYWQgY2FsbGVkIGF3YXkKICAgICAgICAgICAgICAgICAgICBmcm9tIGh1c2JhbmRyeSBhbmQgdGhlaXIgZGFpbHkgbGFib3IuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+U2FiaW51czwvbmFtZT4ga2VwdAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgd2l0aGluIGhpcyBjYW1wLCB3aGljaCB3YXMgaW4gYSBwb3NpdGlvbiBjb252ZW5pZW50IGZvciBldmVyeXRoaW5nOwogICAgICAgICAgICAgICAgICAgIHdoaWxlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmlyaWRvdml4PC9uYW1lPiBlbmNhbXBlZCBvdmVyIGFnYWluc3QgaGltIGF0IGEgZGlzdGFuY2Ugb2YgdHdvCiAgICAgICAgICAgICAgICAgICAgbWlsZXMsIGFuZCBkYWlseSBicmluZ2luZyBvdXQgaGlzIGZvcmNlcywgZ2F2ZSBoaW0gYW4gb3Bwb3J0dW5pdHkgb2YgZmlnaHRpbmc7CiAgICAgICAgICAgICAgICAgICAgc28gdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlNhYmludXM8L25hbWU+IGhhZCBub3cgbm90IG9ubHkgY29tZSBpbnRvIGNvbnRlbXB0CiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgZW5lbXksIGJ1dCBhbHNvIHdhcyBzb21ld2hhdCB0YXVudGVkIGJ5IHRoZSBzcGVlY2hlcyBvZiBvdXIgc29sZGllcnM7CiAgICAgICAgICAgICAgICAgICAgYW5kIGZ1cm5pc2hlZCBzbyBncmVhdCBhIHN1c3BpY2lvbiBvZiBoaXMgY293YXJkaWNlIHRoYXQgdGhlIGVuZW15IHByZXN1bWVkIHRvCiAgICAgICAgICAgICAgICAgICAgYXBwcm9hY2ggZXZlbiB0byB0aGUgdmVyeSByYW1wYXJ0IG9mIG91ciBjYW1wLiBIZSBhZG9wdGVkIHRoaXMgY29uZHVjdCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9sbG93aW5nIHJlYXNvbjogYmVjYXVzZSBoZSBkaWQgbm90IHRoaW5rIHRoYXQgYSBsaWV1dGVuYW50IG91Z2h0IHRvIGVuZ2FnZSBpbgogICAgICAgICAgICAgICAgICAgIGJhdHRsZSB3aXRoIHNvIGdyZWF0IGEgZm9yY2UsIGVzcGVjaWFsbHkgd2hpbGUgaGUgd2hvIGhlbGQgdGhlIGNoaWVmIGNvbW1hbmQgd2FzCiAgICAgICAgICAgICAgICAgICAgYWJzZW50LCBleGNlcHQgb24gYWR2YW50YWdlb3VzIGdyb3VuZCBvciBzb21lIGZhdm9yYWJsZSBjaXJjdW1zdGFuY2UgcHJlc2VudGVkCiAgICAgICAgICAgICAgICAgICAgaXRzZWxmLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZW5ldGk8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlEuIFRpdHVyaXVzIFNhYmludXM8L25hbWU+IHdpdGggdGhvc2UgdHJvb3BzIHdoaWNoIGhlIGhhZCByZWNlaXZlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYXJyaXZlcyBpbiB0aGUgdGVycml0b3JpZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VW5lbGxpPC9uYW1lPi4gT3ZlciB0aGVzZSBwZW9wbGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WaXJpZG92aXg8L25hbWU+IHJ1bGVkLCBhbmQKICAgICAgICAgICAgICAgICAgICBoZWxkIHRoZSBjaGllZiBjb21tYW5kIG9mIGFsbCB0aG9zZSBzdGF0ZXMgd2hpY2ggaGFkIHJldm9sdGVkOyBmcm9tIHdoaWNoIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZCBhIGxhcmdlIGFuZCBwb3dlcmZ1bCBhcm15LiBBbmQgaW4gdGhvc2UgZmV3IGRheXMsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkF1bGVyY2k8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXhvdmlpPC9uYW1lPiwgaGF2aW5nIHNsYWluIHRoZWlyIHNlbmF0ZQogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgdGhleSB3b3VsZCBub3QgY29uc2VudCB0byBiZSBwcm9tb3RlcnMgb2YgdGhlIHdhciwgc2h1dCB0aGVpciBnYXRlcwogICAgICAgICAgICAgICAgICAgIFthZ2FpbnN0IHVzXSBhbmQgdW5pdGVkIHRoZW1zZWx2ZXMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WaXJpZG92aXg8L25hbWU+OyBhIGdyZWF0IG11bHRpdHVkZQogICAgICAgICAgICAgICAgICAgIGJlc2lkZXMgb2YgZGVzcGVyYXRlIG1lbiBhbmQgcm9iYmVycyBhc3NlbWJsZWQgb3V0IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBmcm9tIGFsbAogICAgICAgICAgICAgICAgICAgIHF1YXJ0ZXJzLCB3aG9tIHRoZSBob3BlIG9mIHBsdW5kZXJpbmcgYW5kIHRoZSBsb3ZlIG9mIGZpZ2h0aW5nIGhhZCBjYWxsZWQgYXdheQogICAgICAgICAgICAgICAgICAgIGZyb20gaHVzYmFuZHJ5IGFuZCB0aGVpciBkYWlseSBsYWJvci4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5TYWJpbnVzPC9uYW1lPiBrZXB0CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB3aXRoaW4gaGlzIGNhbXAsIHdoaWNoIHdhcyBpbiBhIHBvc2l0aW9uIGNvbnZlbmllbnQgZm9yIGV2ZXJ5dGhpbmc7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WaXJpZG92aXg8L25hbWU+IGVuY2FtcGVkIG92ZXIgYWdhaW5zdCBoaW0gYXQgYSBkaXN0YW5jZSBvZiB0d28KICAgICAgICAgICAgICAgICAgICBtaWxlcywgYW5kIGRhaWx5IGJyaW5naW5nIG91dCBoaXMgZm9yY2VzLCBnYXZlIGhpbSBhbiBvcHBvcnR1bml0eSBvZiBmaWdodGluZzsKICAgICAgICAgICAgICAgICAgICBzbyB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+U2FiaW51czwvbmFtZT4gaGFkIG5vdyBub3Qgb25seSBjb21lIGludG8gY29udGVtcHQKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBlbmVteSwgYnV0IGFsc28gd2FzIHNvbWV3aGF0IHRhdW50ZWQgYnkgdGhlIHNwZWVjaGVzIG9mIG91ciBzb2xkaWVyczsKICAgICAgICAgICAgICAgICAgICBhbmQgZnVybmlzaGVkIHNvIGdyZWF0IGEgc3VzcGljaW9uIG9mIGhpcyBjb3dhcmRpY2UgdGhhdCB0aGUgZW5lbXkgcHJlc3VtZWQgdG8KICAgICAgICAgICAgICAgICAgICBhcHByb2FjaCBldmVuIHRvIHRoZSB2ZXJ5IHJhbXBhcnQgb2Ygb3VyIGNhbXAuIEhlIGFkb3B0ZWQgdGhpcyBjb25kdWN0IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBmb2xsb3dpbmcgcmVhc29uOiBiZWNhdXNlIGhlIGRpZCBub3QgdGhpbmsgdGhhdCBhIGxpZXV0ZW5hbnQgb3VnaHQgdG8gZW5nYWdlIGluCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlIHdpdGggc28gZ3JlYXQgYSBmb3JjZSwgZXNwZWNpYWxseSB3aGlsZSBoZSB3aG8gaGVsZCB0aGUgY2hpZWYgY29tbWFuZCB3YXMKICAgICAgICAgICAgICAgICAgICBhYnNlbnQsIGV4Y2VwdCBvbiBhZHZhbnRhZ2VvdXMgZ3JvdW5kIG9yIHNvbWUgZmF2b3JhYmxlIGNpcmN1bXN0YW5jZSBwcmVzZW50ZWQKICAgICAgICAgICAgICAgICAgICBpdHNlbGYuIDwvdHJhbnNsYXRpb24+"
translation['3.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIGhhdmluZyBlc3RhYmxpc2hlZCB0aGlzIHN1c3BpY2lvbiBvZiBoaXMgY293YXJkaWNlLCBoZSBzZWxlY3RlZCBhIGNlcnRhaW4KICAgICAgICAgICAgICAgICAgICBzdWl0YWJsZSBhbmQgY3JhZnR5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgd2hvIHdhcyBvbmUgb2YgdGhvc2Ugd2hvbQogICAgICAgICAgICAgICAgICAgIGhlIGhhZCB3aXRoIGhpbSBhcyBhdXhpbGlhcmllcy4gSGUgaW5kdWNlcyBoaW0gYnkgZ3JlYXQgZ2lmdHMgYW5kIHByb21pc2VzIHRvIGdvCiAgICAgICAgICAgICAgICAgICAgb3ZlciB0byB0aGUgZW5lbXk7IGFuZCBpbmZvcm1zIFtoaW1dIG9mIHdoYXQgaGUgd2lzaGVkIHRvIGJlIGRvbmUuIFdobywgd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIGFycml2ZXMgYW1vbmcgdGhlbSBhcyBhIGRlc2VydGVyLCBsYXlzIGJlZm9yZSB0aGVtIHRoZSBmZWFycyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT47IGFuZCBpbmZvcm1zIHRoZW0gYnkgd2hhdCBkaWZmaWN1bHRpZXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhpbXNlbGYgd2FzIGhhcmFzc2VkLCBhbmQgdGhhdCB0aGUgbWF0dGVyIHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBmYXIgcmVtb3ZlZCBmcm9tIHRoaXMtIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5TYWJpbnVzPC9uYW1lPiB3b3VsZCB0aGUgbmV4dAogICAgICAgICAgICAgICAgICAgIG5pZ2h0IHByaXZhdGVseSBkcmF3IG9mZiBoaXMgYXJteSBvdXQgb2YgdGhlIGNhbXAgYW5kIHNldCBmb3J0aCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZm9yIHRoZSBwdXJwb3NlIG9mIGNhcnJ5aW5nIFtoaW1dIGFzc2lzdGFuY2UsCiAgICAgICAgICAgICAgICAgICAgd2hpY2gsIHdoZW4gdGhleSBoZWFyZCwgdGhleSBhMTEgY3J5IG91dCB0b2dldGhlciB0aGF0IGFuIG9wcG9ydHVuaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bGx5IGNvbmR1Y3RpbmcgdGhlaXIgZW50ZXJwcmlzZSwgb3VnaHQgbm90IHRvIGJlIHRocm93biBhd2F5OiB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBnbyB0byB0aGUgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT5dIGNhbXAuIE1hbnkgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgcGVyc3VhZGVkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHRvIHRoaXMgbWVhc3VyZTsgdGhlIGRlbGF5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+U2FiaW51czwvbmFtZT4gZHVyaW5nIHRoZSBwcmV2aW91cyBkYXlzOyB0aGUgcG9zaXRpdmUKICAgICAgICAgICAgICAgICAgICBhc3NlcnRpb24gb2YgdGhlIFtwcmV0ZW5kZWRdIGRlc2VydGVyOyB3YW50IG9mIHByb3Zpc2lvbnMsIGZvciBhIHN1cHBseSBvZiB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIG5vdCB0YWtlbiB0aGUgcmVxdWlzaXRlIHByZWNhdXRpb25zOyB0aGUgaG9wZSBzcHJpbmdpbmcgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZW5ldGljPC9uYW1lPiB3YXI7IGFuZCBbYWxzb10gYmVjYXVzZSBpbiBtb3N0IGNhc2VzIG1lbiB3aWxsaW5nbHkKICAgICAgICAgICAgICAgICAgICBiZWxpZXZlIHdoYXQgdGhleSB3aXNoLiBJbmZsdWVuY2VkIGJ5IHRoZXNlIHRoaW5ncyB0aGV5IGRvIG5vdCBkaXNjaGFyZ2UKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WaXJpZG92aXg8L25hbWU+IGFuZCB0aGUgb3RoZXIgbGVhZGVycyBmcm9tIHRoZSBjb3VuY2lsLCBiZWZvcmUgdGhleQogICAgICAgICAgICAgICAgICAgIGdhaW5lZCBwZXJtaXNzaW9uIGZyb20gdGhlbSB0byB0YWtlIHVwIGFybXMgYW5kIGhhc3RlbiB0byBbb3VyXSBjYW1wOyB3aGljaAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGdyYW50ZWQsIHJlam9pY2luZyBhcyBpZiB2aWN0b3J5IHdlcmUgZnVsbHkgY2VydGFpbiwgdGhleSBjb2xsZWN0ZWQKICAgICAgICAgICAgICAgICAgICBmYWdnb3RzIGFuZCBicnVzaHdvb2QsIHdpdGggd2hpY2ggdG8gZmlsbCB1cCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiB0cmVuY2hlcywgYW5kIGhhc3RlbiB0byB0aGUgY2FtcC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgd2hvIHdhcyBvbmUgb2YgdGhvc2Ugd2hvbQogICAgICAgICAgICAgICAgICAgIGhlIGhhZCB3aXRoIGhpbSBhcyBhdXhpbGlhcmllcy4gSGUgaW5kdWNlcyBoaW0gYnkgZ3JlYXQgZ2lmdHMgYW5kIHByb21pc2VzIHRvIGdvCiAgICAgICAgICAgICAgICAgICAgb3ZlciB0byB0aGUgZW5lbXk7IGFuZCBpbmZvcm1zIFtoaW1dIG9mIHdoYXQgaGUgd2lzaGVkIHRvIGJlIGRvbmUuIFdobywgd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIGFycml2ZXMgYW1vbmcgdGhlbSBhcyBhIGRlc2VydGVyLCBsYXlzIGJlZm9yZSB0aGVtIHRoZSBmZWFycyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT47IGFuZCBpbmZvcm1zIHRoZW0gYnkgd2hhdCBkaWZmaWN1bHRpZXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhpbXNlbGYgd2FzIGhhcmFzc2VkLCBhbmQgdGhhdCB0aGUgbWF0dGVyIHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBmYXIgcmVtb3ZlZCBmcm9tIHRoaXMtIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5TYWJpbnVzPC9uYW1lPiB3b3VsZCB0aGUgbmV4dAogICAgICAgICAgICAgICAgICAgIG5pZ2h0IHByaXZhdGVseSBkcmF3IG9mZiBoaXMgYXJteSBvdXQgb2YgdGhlIGNhbXAgYW5kIHNldCBmb3J0aCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZm9yIHRoZSBwdXJwb3NlIG9mIGNhcnJ5aW5nIFtoaW1dIGFzc2lzdGFuY2UsCiAgICAgICAgICAgICAgICAgICAgd2hpY2gsIHdoZW4gdGhleSBoZWFyZCwgdGhleSBhMTEgY3J5IG91dCB0b2dldGhlciB0aGF0IGFuIG9wcG9ydHVuaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bGx5IGNvbmR1Y3RpbmcgdGhlaXIgZW50ZXJwcmlzZSwgb3VnaHQgbm90IHRvIGJlIHRocm93biBhd2F5OiB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBnbyB0byB0aGUgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT5dIGNhbXAuIE1hbnkgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgcGVyc3VhZGVkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHRvIHRoaXMgbWVhc3VyZTsgdGhlIGRlbGF5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+U2FiaW51czwvbmFtZT4gZHVyaW5nIHRoZSBwcmV2aW91cyBkYXlzOyB0aGUgcG9zaXRpdmUKICAgICAgICAgICAgICAgICAgICBhc3NlcnRpb24gb2YgdGhlIFtwcmV0ZW5kZWRdIGRlc2VydGVyOyB3YW50IG9mIHByb3Zpc2lvbnMsIGZvciBhIHN1cHBseSBvZiB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIG5vdCB0YWtlbiB0aGUgcmVxdWlzaXRlIHByZWNhdXRpb25zOyB0aGUgaG9wZSBzcHJpbmdpbmcgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZW5ldGljPC9uYW1lPiB3YXI7IGFuZCBbYWxzb10gYmVjYXVzZSBpbiBtb3N0IGNhc2VzIG1lbiB3aWxsaW5nbHkKICAgICAgICAgICAgICAgICAgICBiZWxpZXZlIHdoYXQgdGhleSB3aXNoLiBJbmZsdWVuY2VkIGJ5IHRoZXNlIHRoaW5ncyB0aGV5IGRvIG5vdCBkaXNjaGFyZ2UKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WaXJpZG92aXg8L25hbWU+IGFuZCB0aGUgb3RoZXIgbGVhZGVycyBmcm9tIHRoZSBjb3VuY2lsLCBiZWZvcmUgdGhleQogICAgICAgICAgICAgICAgICAgIGdhaW5lZCBwZXJtaXNzaW9uIGZyb20gdGhlbSB0byB0YWtlIHVwIGFybXMgYW5kIGhhc3RlbiB0byBbb3VyXSBjYW1wOyB3aGljaAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGdyYW50ZWQsIHJlam9pY2luZyBhcyBpZiB2aWN0b3J5IHdlcmUgZnVsbHkgY2VydGFpbiwgdGhleSBjb2xsZWN0ZWQKICAgICAgICAgICAgICAgICAgICBmYWdnb3RzIGFuZCBicnVzaHdvb2QsIHdpdGggd2hpY2ggdG8gZmlsbCB1cCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiB0cmVuY2hlcywgYW5kIGhhc3RlbiB0byB0aGUgY2FtcC4gPC90cmFuc2xhdGlvbj4="
translation['3.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBzaXR1YXRpb24gb2YgdGhlIGNhbXAgd2FzIGEgcmlzaW5nIGdyb3VuZCwgZ2VudGx5IHNsb3BpbmcgZnJvbSB0aGUgYm90dG9tIGZvcgogICAgICAgICAgICAgICAgICAgIGFib3V0IGEgbWlsZS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGl0aGVyPC9uYW1lPiB0aGV5IHByb2NlZWRlZCB3aXRoIGdyZWF0IHNwZWVkIChpbiBvcmRlcgogICAgICAgICAgICAgICAgICAgIHRoYXQgYXMgbGl0dGxlIHRpbWUgYXMgcG9zc2libGUgbWlnaHQgYmUgZ2l2ZW4gdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHRvIGNvbGxlY3QgYW5kIGFybSB0aGVtc2VsdmVzKSwgYW5kIGFycml2ZWQgcXVpdGUgb3V0IG9mCiAgICAgICAgICAgICAgICAgICAgYnJlYXRoLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlNhYmludXM8L25hbWU+IGhhdmluZyBlbmNvdXJhZ2VkIGhpcyBtZW4sIGdpdmVzIHRoZW0KICAgICAgICAgICAgICAgICAgICB0aGUgc2lnbmFsLCB3aGljaCB0aGV5IGVhcm5lc3RseSBkZXNpcmVkLiBXaGlsZSB0aGUgZW5lbXkgd2VyZSBlbmN1bWJlcmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgcmVhc29uIG9mIHRoZSBidXJkZW5zIHdoaWNoIHRoZXkgd2VyZSBjYXJyeWluZywgaGUgb3JkZXJzIGEgc2FsbHkgdG8gYmUgbWFkZQogICAgICAgICAgICAgICAgICAgIHN1ZGRlbmx5IGZyb20gdHdvIGdhdGVzIFtvZiB0aGUgY2FtcF0uIEl0IGhhcHBlbmVkLCBieSB0aGUgYWR2YW50YWdlIG9mCiAgICAgICAgICAgICAgICAgICAgc2l0dWF0aW9uLCBieSB0aGUgdW5za2lsZnVsbmVzcyBhbmQgdGhlIGZhdGlndWUgb2YgdGhlIGVuZW15LCBieSB0aGUgdmFsb3Igb2YKICAgICAgICAgICAgICAgICAgICBvdXIgc29sZGllcnMsIGFuZCB0aGVpciBleHBlcmllbmNlIGluIGZvcm1lciBiYXR0bGVzLCB0aGF0IHRoZXkgY291bGQgbm90IHN0YW5kCiAgICAgICAgICAgICAgICAgICAgb25lIGF0dGFjayBvZiBvdXIgbWVuLCBhbmQgaW1tZWRpYXRlbHkgdHVybmVkIHRoZWlyIGJhY2tzOyBhbmQgb3VyIG1lbiB3aXRoIGZ1bGwKICAgICAgICAgICAgICAgICAgICB2aWdvciBmb2xsb3dlZCB0aGVtIHdoaWxlIGRpc29yZGVyZWQsIGFuZCBzbGV3IGEgZ3JlYXQgbnVtYmVyIG9mIHRoZW07IHRoZSBob3JzZQogICAgICAgICAgICAgICAgICAgIHB1cnN1aW5nIHRoZSByZXN0LCBsZWZ0IGJ1dCBmZXcsIHdobyBlc2NhcGVkIGJ5IGZsaWdodC4gVGh1cyBhdCB0aGUgc2FtZSB0aW1lLAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlNhYmludXM8L25hbWU+IHdhcyBpbmZvcm1lZCBvZiB0aGUgbmF2YWwgYmF0dGxlIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gb2YgdmljdG9yeSBnYWluZWQgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5TYWJpbnVzPC9uYW1lPjsgYW5kIGFsbCB0aGUgc3RhdGVzIGltbWVkaWF0ZWx5IHN1cnJlbmRlcmVkIHRoZW1zZWx2ZXMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5UaXR1cml1czwvbmFtZT46IGZvciBhcyB0aGUgdGVtcGVyIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IGlzIGltcGV0dW91cyBhbmQgcmVhZHkgdG8gdW5kZXJ0YWtlIHdhcnMsIHNvCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbWluZCBpcyB3ZWFrLCBhbmQgYnkgbm8gbWVhbnMgcmVzb2x1dGUgaW4gZW5kdXJpbmcgY2FsYW1pdGllcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhpdGhlcjwvbmFtZT4gdGhleSBwcm9jZWVkZWQgd2l0aCBncmVhdCBzcGVlZCAoaW4gb3JkZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IGFzIGxpdHRsZSB0aW1lIGFzIHBvc3NpYmxlIG1pZ2h0IGJlIGdpdmVuIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiB0byBjb2xsZWN0IGFuZCBhcm0gdGhlbXNlbHZlcyksIGFuZCBhcnJpdmVkIHF1aXRlIG91dCBvZgogICAgICAgICAgICAgICAgICAgIGJyZWF0aC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5TYWJpbnVzPC9uYW1lPiBoYXZpbmcgZW5jb3VyYWdlZCBoaXMgbWVuLCBnaXZlcyB0aGVtCiAgICAgICAgICAgICAgICAgICAgdGhlIHNpZ25hbCwgd2hpY2ggdGhleSBlYXJuZXN0bHkgZGVzaXJlZC4gV2hpbGUgdGhlIGVuZW15IHdlcmUgZW5jdW1iZXJlZCBieQogICAgICAgICAgICAgICAgICAgIHJlYXNvbiBvZiB0aGUgYnVyZGVucyB3aGljaCB0aGV5IHdlcmUgY2FycnlpbmcsIGhlIG9yZGVycyBhIHNhbGx5IHRvIGJlIG1hZGUKICAgICAgICAgICAgICAgICAgICBzdWRkZW5seSBmcm9tIHR3byBnYXRlcyBbb2YgdGhlIGNhbXBdLiBJdCBoYXBwZW5lZCwgYnkgdGhlIGFkdmFudGFnZSBvZgogICAgICAgICAgICAgICAgICAgIHNpdHVhdGlvbiwgYnkgdGhlIHVuc2tpbGZ1bG5lc3MgYW5kIHRoZSBmYXRpZ3VlIG9mIHRoZSBlbmVteSwgYnkgdGhlIHZhbG9yIG9mCiAgICAgICAgICAgICAgICAgICAgb3VyIHNvbGRpZXJzLCBhbmQgdGhlaXIgZXhwZXJpZW5jZSBpbiBmb3JtZXIgYmF0dGxlcywgdGhhdCB0aGV5IGNvdWxkIG5vdCBzdGFuZAogICAgICAgICAgICAgICAgICAgIG9uZSBhdHRhY2sgb2Ygb3VyIG1lbiwgYW5kIGltbWVkaWF0ZWx5IHR1cm5lZCB0aGVpciBiYWNrczsgYW5kIG91ciBtZW4gd2l0aCBmdWxsCiAgICAgICAgICAgICAgICAgICAgdmlnb3IgZm9sbG93ZWQgdGhlbSB3aGlsZSBkaXNvcmRlcmVkLCBhbmQgc2xldyBhIGdyZWF0IG51bWJlciBvZiB0aGVtOyB0aGUgaG9yc2UKICAgICAgICAgICAgICAgICAgICBwdXJzdWluZyB0aGUgcmVzdCwgbGVmdCBidXQgZmV3LCB3aG8gZXNjYXBlZCBieSBmbGlnaHQuIFRodXMgYXQgdGhlIHNhbWUgdGltZSwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5TYWJpbnVzPC9uYW1lPiB3YXMgaW5mb3JtZWQgb2YgdGhlIG5hdmFsIGJhdHRsZSBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9mIHZpY3RvcnkgZ2FpbmVkIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+U2FiaW51czwvbmFtZT47IGFuZCBhbGwgdGhlIHN0YXRlcyBpbW1lZGlhdGVseSBzdXJyZW5kZXJlZCB0aGVtc2VsdmVzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+VGl0dXJpdXM8L25hbWU+OiBmb3IgYXMgdGhlIHRlbXBlciBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBpcyBpbXBldHVvdXMgYW5kIHJlYWR5IHRvIHVuZGVydGFrZSB3YXJzLCBzbwogICAgICAgICAgICAgICAgICAgIHRoZWlyIG1pbmQgaXMgd2VhaywgYW5kIGJ5IG5vIG1lYW5zIHJlc29sdXRlIGluIGVuZHVyaW5nIGNhbGFtaXRpZXMuIDwvdHJhbnNsYXRpb24+"
translation['3.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFib3V0IHRoZSBzYW1lIHRpbWUsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UC4gQ3Jhc3N1czwvbmFtZT4sIHdoZW4gaGUgaGFkIGFycml2ZWQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyODc4IiByZWc9IkFxdWl0YWluZSBbMSw0NC41ODNdIChyZWdpb24pLCBGcmFuY2UsIEV1cm9wZSIgdHlwZT0icGxhY2UiPkFxdWl0YW5pYSA8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgKHdoaWNoLCBhcyBoYXMgYmVlbiBiZWZvcmUgc2FpZCwgYm90aCBmcm9tIGl0cyBleHRlbnQgb2YgdGVycml0b3J5IGFuZCB0aGUgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBudW1iZXIgb2YgaXRzIHBlb3BsZSwgaXMgdG8gYmUgcmVja29uZWQgYSB0aGlyZCBwYXJ0IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwpCiAgICAgICAgICAgICAgICAgICAgdW5kZXJzdGFuZGluZyB0aGF0IGhlIHdhcyB0byB3YWdlIHdhciBpbiB0aGVzZSBwYXJ0cywgd2hlcmUgYSBmZXcgeWVhcnMgYmVmb3JlLAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkwuIFZhbGVyaXVzIFByYWVjb25pbnVzPC9uYW1lPiwgdGhlIGxpZXV0ZW5hbnQgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBraWxsZWQsIGFuZCBoaXMgYXJteSByb3V0ZWQsIGFuZCBmcm9tIHdoaWNoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TC4KICAgICAgICAgICAgICAgICAgICBNYW5pbGl1czwvbmFtZT4sIHRoZSBwcm9jb25zdWwsIGhhZCBmbGVkIHdpdGggdGhlIGxvc3Mgb2YgaGlzIGJhZ2dhZ2UsIGhlCiAgICAgICAgICAgICAgICAgICAgcGVyY2VpdmVkIHRoYXQgbm8gb3JkaW5hcnkgY2FyZSBtdXN0IGJlIHVzZWQgYnkgaGltLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHByb3ZpZGVkIGNvcm4sIHByb2N1cmVkIGF1eGlsaWFyaWVzIGFuZCBjYXZhbHJ5LCBbYW5kXSBoYXZpbmcgc3VtbW9uZWQgYnkKICAgICAgICAgICAgICAgICAgICBuYW1lIG1hbnkgdmFsaWFudCBtZW4gZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg0NDEiIHJlZz0iICArVG91bG91c2UgWzEuNDMzLDQzLjYxNl0gKGluaGFiaXRlZCBwbGFjZSksIEhhdXRlLUdhcm9ubmUsIE1pZGktUHlyZW5lZXMsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRvbG9zYSA8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIxNzEiIHJlZz0iICArQ2FyY2Fzc29ubmUgWzIuMzUsNDMuMjE2XSAoaW5oYWJpdGVkIHBsYWNlKSwgQXVkZSwgTGFuZ3VlZG9jLVJvdXNzaWxsb24sIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkNhcmNhc28gPC9uYW1lPiwgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM2OCIgcmVnPSIgICtOYXJib25uZSBbMyw0My4xODNdIChpbmhhYml0ZWQgcGxhY2UpLCBBdWRlLCBMYW5ndWVkb2MtUm91c3NpbGxvbiwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TmFyYm8gPC9uYW1lPiwgd2hpY2ggYXJlIHRoZSBzdGF0ZXMgb2YgdGhlIHByb3ZpbmNlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgdGhhdCBib3JkZXIgb24gdGhlc2UgcmVnaW9ucyBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyODc4IiByZWc9IkFxdWl0YWluZSBbMSw0NC41ODNdIChyZWdpb24pLCBGcmFuY2UsIEV1cm9wZSIgdHlwZT0icGxhY2UiPkFxdWl0YW5pYQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT5dLCBoZSBsZWQgaGlzIGFybXkgaW50byB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U290aWF0ZXM8L25hbWU+LiBPbgogICAgICAgICAgICAgICAgICAgIGhpcyBhcnJpdmFsIGJlaW5nIGtub3duLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Tb3RpYXRlczwvbmFtZT4gaGF2aW5nIGJyb3VnaHQgdG9nZXRoZXIgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBmb3JjZXMgYW5kIFttdWNoXSBjYXZhbHJ5LCBpbiB3aGljaCB0aGVpciBzdHJlbmd0aCBwcmluY2lwYWxseSBsYXksIGFuZAogICAgICAgICAgICAgICAgICAgIGFzc2FpbGluZyBvdXIgYXJteSBvbiB0aGUgbWFyY2gsIGVuZ2FnZWQgZmlyc3QgaW4gYSBjYXZhbHJ5IGFjdGlvbiwgdGhlbiB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY2F2YWxyeSB3YXMgcm91dGVkLCBhbmQgb3VyIG1lbiBwdXJzdWluZywgdGhleSBzdWRkZW5seSBkaXNwbGF5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaW5mYW50cnkgZm9yY2VzLCB3aGljaCB0aGV5IGhhZCBwbGFjZWQgaW4gYW1idXNjYWRlIGluIGEgdmFsbGV5LiBUaGVzZSBhdHRhY2tlZAogICAgICAgICAgICAgICAgICAgIG91ciBtZW4gW3doaWxlXSBkaXNvcmRlcmVkLCBhbmQgcmVuZXdlZCB0aGUgZmlnaHQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlAuIENyYXNzdXM8L25hbWU+LCB3aGVuIGhlIGhhZCBhcnJpdmVkIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg3OCIgcmVnPSJBcXVpdGFpbmUgWzEsNDQuNTgzXSAocmVnaW9uKSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BcXVpdGFuaWEgPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICh3aGljaCwgYXMgaGFzIGJlZW4gYmVmb3JlIHNhaWQsIGJvdGggZnJvbSBpdHMgZXh0ZW50IG9mIHRlcnJpdG9yeSBhbmQgdGhlIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIGl0cyBwZW9wbGUsIGlzIHRvIGJlIHJlY2tvbmVkIGEgdGhpcmQgcGFydCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sKQogICAgICAgICAgICAgICAgICAgIHVuZGVyc3RhbmRpbmcgdGhhdCBoZSB3YXMgdG8gd2FnZSB3YXIgaW4gdGhlc2UgcGFydHMsIHdoZXJlIGEgZmV3IHllYXJzIGJlZm9yZSwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MLiBWYWxlcml1cyBQcmFlY29uaW51czwvbmFtZT4sIHRoZSBsaWV1dGVuYW50IGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAga2lsbGVkLCBhbmQgaGlzIGFybXkgcm91dGVkLCBhbmQgZnJvbSB3aGljaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkwuCiAgICAgICAgICAgICAgICAgICAgTWFuaWxpdXM8L25hbWU+LCB0aGUgcHJvY29uc3VsLCBoYWQgZmxlZCB3aXRoIHRoZSBsb3NzIG9mIGhpcyBiYWdnYWdlLCBoZQogICAgICAgICAgICAgICAgICAgIHBlcmNlaXZlZCB0aGF0IG5vIG9yZGluYXJ5IGNhcmUgbXVzdCBiZSB1c2VkIGJ5IGhpbS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVyZWZvcmU8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBwcm92aWRlZCBjb3JuLCBwcm9jdXJlZCBhdXhpbGlhcmllcyBhbmQgY2F2YWxyeSwgW2FuZF0gaGF2aW5nIHN1bW1vbmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgbmFtZSBtYW55IHZhbGlhbnQgbWVuIGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NDQxIiByZWc9IiAgK1RvdWxvdXNlIFsxLjQzMyw0My42MTZdIChpbmhhYml0ZWQgcGxhY2UpLCBIYXV0ZS1HYXJvbm5lLCBNaWRpLVB5cmVuZWVzLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5Ub2xvc2EgPC9uYW1lPiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMTcxIiByZWc9IiAgK0NhcmNhc3Nvbm5lIFsyLjM1LDQzLjIxNl0gKGluaGFiaXRlZCBwbGFjZSksIEF1ZGUsIExhbmd1ZWRvYy1Sb3Vzc2lsbG9uLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5DYXJjYXNvIDwvbmFtZT4sIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzNjgiIHJlZz0iICArTmFyYm9ubmUgWzMsNDMuMTgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgQXVkZSwgTGFuZ3VlZG9jLVJvdXNzaWxsb24sIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPk5hcmJvIDwvbmFtZT4sIHdoaWNoIGFyZSB0aGUgc3RhdGVzIG9mIHRoZSBwcm92aW5jZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHRoYXQgYm9yZGVyIG9uIHRoZXNlIHJlZ2lvbnMgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg3OCIgcmVnPSJBcXVpdGFpbmUgWzEsNDQuNTgzXSAocmVnaW9uKSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BcXVpdGFuaWEKICAgICAgICAgICAgICAgICAgICA8L25hbWU+XSwgaGUgbGVkIGhpcyBhcm15IGludG8gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNvdGlhdGVzPC9uYW1lPi4gT24KICAgICAgICAgICAgICAgICAgICBoaXMgYXJyaXZhbCBiZWluZyBrbm93biwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U290aWF0ZXM8L25hbWU+IGhhdmluZyBicm91Z2h0IHRvZ2V0aGVyIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZm9yY2VzIGFuZCBbbXVjaF0gY2F2YWxyeSwgaW4gd2hpY2ggdGhlaXIgc3RyZW5ndGggcHJpbmNpcGFsbHkgbGF5LCBhbmQKICAgICAgICAgICAgICAgICAgICBhc3NhaWxpbmcgb3VyIGFybXkgb24gdGhlIG1hcmNoLCBlbmdhZ2VkIGZpcnN0IGluIGEgY2F2YWxyeSBhY3Rpb24sIHRoZW4gd2hlbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGNhdmFscnkgd2FzIHJvdXRlZCwgYW5kIG91ciBtZW4gcHVyc3VpbmcsIHRoZXkgc3VkZGVubHkgZGlzcGxheSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGluZmFudHJ5IGZvcmNlcywgd2hpY2ggdGhleSBoYWQgcGxhY2VkIGluIGFtYnVzY2FkZSBpbiBhIHZhbGxleS4gVGhlc2UgYXR0YWNrZWQKICAgICAgICAgICAgICAgICAgICBvdXIgbWVuIFt3aGlsZV0gZGlzb3JkZXJlZCwgYW5kIHJlbmV3ZWQgdGhlIGZpZ2h0LiA8L3RyYW5zbGF0aW9uPg=="
translation['3.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBiYXR0bGUgd2FzIGxvbmcgYW5kIHZpZ29yb3VzbHkgY29udGVzdGVkLCBzaW5jZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Tb3RpYXRlczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgcmVseWluZyBvbiB0aGVpciBmb3JtZXIgdmljdG9yaWVzLCBpbWFnaW5lZCB0aGF0IHRoZSBzYWZldHkgb2YgdGhlIHdob2xlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg3OCIgcmVnPSJBcXVpdGFpbmUgWzEsNDQuNTgzXSAocmVnaW9uKSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BcXVpdGFuaWEgPC9uYW1lPiByZXN0ZWQKICAgICAgICAgICAgICAgICAgICBvbiB0aGVpciB2YWxvcjsgW2FuZF0gb3VyIG1lbiwgb24gdGhlIG90aGVyIGhhbmQsIGRlc2lyZWQgaXQgbWlnaHQgYmUgc2VlbiB3aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBjb3VsZCBhY2NvbXBsaXNoIHdpdGhvdXQgdGhlaXIgZ2VuZXJhbCBhbmQgd2l0aG91dCB0aGUgb3RoZXIgbGVnaW9ucywgdW5kZXIKICAgICAgICAgICAgICAgICAgICBhIHZlcnkgeW91bmcgY29tbWFuZGVyOyBhdCBsZW5ndGggdGhlIGVuZW15LCB3b3JuIG91dCB3aXRoIHdvdW5kcywgYmVnYW4gdG8gdHVybgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGJhY2tzLCBhbmQgYSBncmVhdCBudW1iZXIgb2YgdGhlbSBiZWluZyBzbGFpbiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DcmFzc3VzPC9uYW1lPiBiZWdhbiB0byBiZXNpZWdlIHRoZSBbcHJpbmNpcGFsXSB0b3duIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNvdGlhdGVzPC9uYW1lPiBvbiBoaXMgbWFyY2guIFVwb24gdGhlaXIgdmFsaWFudGx5IHJlc2lzdGluZywgaGUKICAgICAgICAgICAgICAgICAgICByYWlzZWQgdmluZWFlIGFuZCB0dXJyZXRzLiBUaGV5IGF0IG9uZSB0aW1lIGF0dGVtcHRpbmcgYSBzYWxseSwgYXQgYW5vdGhlcgogICAgICAgICAgICAgICAgICAgIGZvcm1pbmcgbWluZXMsIHRvIG91ciByYW1wYXJ0IGFuZCB2aW5lYWUgKGF0IHdoaWNoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFxdWl0YW5pPC9uYW1lPiBhcmUKICAgICAgICAgICAgICAgICAgICBlbWluZW50bHkgc2tpbGxlZCwgYmVjYXVzZSBpbiBtYW55IHBsYWNlcyBhbW9uZyB0aGVtIHRoZXJlIGFyZSBjb3BwZXIgbWluZXMpOwogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhleSBwZXJjZWl2ZWQgdGhhdCBub3RoaW5nIGNvdWxkIGJlIGdhaW5lZCBieSB0aGVzZSBvcGVyYXRpb25zIHRocm91Z2ggdGhlCiAgICAgICAgICAgICAgICAgICAgcGVyc2V2ZXJhbmNlIG9mIG91ciBtZW4sIHRoZXkgc2VuZCBlbWJhc3NhZG9ycyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNyYXNzdXM8L25hbWU+LCBhbmQgZW50cmVhdCBoaW0gdG8gYWRtaXQgdGhlbSB0byBhIHN1cnJlbmRlci4gSGF2aW5nCiAgICAgICAgICAgICAgICAgICAgb2J0YWluZWQgaXQsIHRoZXksIGJlaW5nIG9yZGVyZWQgdG8gZGVsaXZlciB1cCB0aGVpciBhcm1zLCBjb21wbHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNvdGlhdGVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICByZWx5aW5nIG9uIHRoZWlyIGZvcm1lciB2aWN0b3JpZXMsIGltYWdpbmVkIHRoYXQgdGhlIHNhZmV0eSBvZiB0aGUgd2hvbGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyODc4IiByZWc9IkFxdWl0YWluZSBbMSw0NC41ODNdIChyZWdpb24pLCBGcmFuY2UsIEV1cm9wZSIgdHlwZT0icGxhY2UiPkFxdWl0YW5pYSA8L25hbWU+IHJlc3RlZAogICAgICAgICAgICAgICAgICAgIG9uIHRoZWlyIHZhbG9yOyBbYW5kXSBvdXIgbWVuLCBvbiB0aGUgb3RoZXIgaGFuZCwgZGVzaXJlZCBpdCBtaWdodCBiZSBzZWVuIHdoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IGNvdWxkIGFjY29tcGxpc2ggd2l0aG91dCB0aGVpciBnZW5lcmFsIGFuZCB3aXRob3V0IHRoZSBvdGhlciBsZWdpb25zLCB1bmRlcgogICAgICAgICAgICAgICAgICAgIGEgdmVyeSB5b3VuZyBjb21tYW5kZXI7IGF0IGxlbmd0aCB0aGUgZW5lbXksIHdvcm4gb3V0IHdpdGggd291bmRzLCBiZWdhbiB0byB0dXJuCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYmFja3MsIGFuZCBhIGdyZWF0IG51bWJlciBvZiB0aGVtIGJlaW5nIHNsYWluLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNyYXNzdXM8L25hbWU+IGJlZ2FuIHRvIGJlc2llZ2UgdGhlIFtwcmluY2lwYWxdIHRvd24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U290aWF0ZXM8L25hbWU+IG9uIGhpcyBtYXJjaC4gVXBvbiB0aGVpciB2YWxpYW50bHkgcmVzaXN0aW5nLCBoZQogICAgICAgICAgICAgICAgICAgIHJhaXNlZCB2aW5lYWUgYW5kIHR1cnJldHMuIFRoZXkgYXQgb25lIHRpbWUgYXR0ZW1wdGluZyBhIHNhbGx5LCBhdCBhbm90aGVyCiAgICAgICAgICAgICAgICAgICAgZm9ybWluZyBtaW5lcywgdG8gb3VyIHJhbXBhcnQgYW5kIHZpbmVhZSAoYXQgd2hpY2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXF1aXRhbmk8L25hbWU+IGFyZQogICAgICAgICAgICAgICAgICAgIGVtaW5lbnRseSBza2lsbGVkLCBiZWNhdXNlIGluIG1hbnkgcGxhY2VzIGFtb25nIHRoZW0gdGhlcmUgYXJlIGNvcHBlciBtaW5lcyk7CiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGV5IHBlcmNlaXZlZCB0aGF0IG5vdGhpbmcgY291bGQgYmUgZ2FpbmVkIGJ5IHRoZXNlIG9wZXJhdGlvbnMgdGhyb3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICBwZXJzZXZlcmFuY2Ugb2Ygb3VyIG1lbiwgdGhleSBzZW5kIGVtYmFzc2Fkb3JzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4sIGFuZCBlbnRyZWF0IGhpbSB0byBhZG1pdCB0aGVtIHRvIGEgc3VycmVuZGVyLiBIYXZpbmcKICAgICAgICAgICAgICAgICAgICBvYnRhaW5lZCBpdCwgdGhleSwgYmVpbmcgb3JkZXJlZCB0byBkZWxpdmVyIHVwIHRoZWlyIGFybXMsIGNvbXBseS4gPC90cmFuc2xhdGlvbj4="
translation['3.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB3aGlsZSB0aGUgYXR0ZW50aW9uIG9mIG91ciBtZW4gaXMgZW5nYWdlZCBpbiB0aGF0IG1hdHRlciwgaW4gYW5vdGhlciBwYXJ0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWRjYW50dWFubnVzPC9uYW1lPiwgd2hvIGhlbGQgdGhlIGNoaWVmIGNvbW1hbmQsIHdpdGggNjAwIGRldm90ZWQKICAgICAgICAgICAgICAgICAgICBmb2xsb3dlcnMgd2hvbSB0aGV5IGNhbGwgc29sZHVyaWkgKHRoZSBjb25kaXRpb25zIG9mIHdob3NlIGFzc29jaWF0aW9uIGFyZQogICAgICAgICAgICAgICAgICAgIHRoZXNlLC10aGF0IHRoZXkgZW5qb3kgYWxsIHRoZSBjb252ZW5pZW5jZXMgb2YgbGlmZSB3aXRoIHRob3NlIHRvIHdob3NlCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kc2hpcCB0aGV5IGhhdmUgZGV2b3RlZCB0aGVtc2VsdmVzOiBpZiBhbnkgdGhpbmcgY2FsYW1pdG91cyBoYXBwZW4gdG8gdGhlbSwKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgdGhleSBlbmR1cmUgdGhlIHNhbWUgZGVzdGlueSB0b2dldGhlciB3aXRoIHRoZW0sIG9yIGNvbW1pdCBzdWljaWRlOiBub3IKICAgICAgICAgICAgICAgICAgICBoaXRoZXJ0bywgaW4gdGhlLCBtZW1vcnkgb2YgbWVuLCBoYXMgdGhlcmUgYmVlbiBmb3VuZCBhbnkgb25lIHdobywgdXBvbiBoaXMKICAgICAgICAgICAgICAgICAgICBiZWluZyBzbGFpbiB0byB3aG9zZSBmcmllbmRzaGlwIGhlIGhhZCBkZXZvdGVkIGhpbXNlbGYsIHJlZnVzZWQgdG8gZGllKTsKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZGNhbnR1YW5udXM8L25hbWU+LCBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Jc2F5PC9uYW1lPl0gZW5kZWF2b3JpbmcgdG8gbWFrZSBhIHNhbGx5CiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGVzZSwgd2hlbiBvdXIgc29sZGllcnMgaGFkIHJ1c2hlZCB0b2dldGhlciB0byBhcm1zLCB1cG9uIGEgc2hvdXQgYmVpbmcKICAgICAgICAgICAgICAgICAgICByYWlzZWQgYXQgdGhhdCBwYXJ0IG9mIHRoZSwgZm9ydGlmaWNhdGlvbiwgYW5kIGEgZmllcmNlIGJhdHRsZSBoYWQgYmVlbiBmb3VnaHQKICAgICAgICAgICAgICAgICAgICB0aGVyZSwgd2FzIGRyaXZlbiBiYWNrIGludG8gdGhlIHRvd24sIHlldCBoZSBvYnRhaW5lZCBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4gW3RoZSBpbmR1bGdlbmNlXSB0aGF0IGhlIHNob3VsZCBlbmpveSB0aGUgc2FtZSB0ZXJtcyBvZgogICAgICAgICAgICAgICAgICAgIHN1cnJlbmRlciBbYXMgdGhlIG90aGVyIGluaGFiaXRhbnRzXS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWRjYW50dWFubnVzPC9uYW1lPiwgd2hvIGhlbGQgdGhlIGNoaWVmIGNvbW1hbmQsIHdpdGggNjAwIGRldm90ZWQKICAgICAgICAgICAgICAgICAgICBmb2xsb3dlcnMgd2hvbSB0aGV5IGNhbGwgc29sZHVyaWkgKHRoZSBjb25kaXRpb25zIG9mIHdob3NlIGFzc29jaWF0aW9uIGFyZQogICAgICAgICAgICAgICAgICAgIHRoZXNlLC10aGF0IHRoZXkgZW5qb3kgYWxsIHRoZSBjb252ZW5pZW5jZXMgb2YgbGlmZSB3aXRoIHRob3NlIHRvIHdob3NlCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kc2hpcCB0aGV5IGhhdmUgZGV2b3RlZCB0aGVtc2VsdmVzOiBpZiBhbnkgdGhpbmcgY2FsYW1pdG91cyBoYXBwZW4gdG8gdGhlbSwKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgdGhleSBlbmR1cmUgdGhlIHNhbWUgZGVzdGlueSB0b2dldGhlciB3aXRoIHRoZW0sIG9yIGNvbW1pdCBzdWljaWRlOiBub3IKICAgICAgICAgICAgICAgICAgICBoaXRoZXJ0bywgaW4gdGhlLCBtZW1vcnkgb2YgbWVuLCBoYXMgdGhlcmUgYmVlbiBmb3VuZCBhbnkgb25lIHdobywgdXBvbiBoaXMKICAgICAgICAgICAgICAgICAgICBiZWluZyBzbGFpbiB0byB3aG9zZSBmcmllbmRzaGlwIGhlIGhhZCBkZXZvdGVkIGhpbXNlbGYsIHJlZnVzZWQgdG8gZGllKTsKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZGNhbnR1YW5udXM8L25hbWU+LCBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Jc2F5PC9uYW1lPl0gZW5kZWF2b3JpbmcgdG8gbWFrZSBhIHNhbGx5CiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGVzZSwgd2hlbiBvdXIgc29sZGllcnMgaGFkIHJ1c2hlZCB0b2dldGhlciB0byBhcm1zLCB1cG9uIGEgc2hvdXQgYmVpbmcKICAgICAgICAgICAgICAgICAgICByYWlzZWQgYXQgdGhhdCBwYXJ0IG9mIHRoZSwgZm9ydGlmaWNhdGlvbiwgYW5kIGEgZmllcmNlIGJhdHRsZSBoYWQgYmVlbiBmb3VnaHQKICAgICAgICAgICAgICAgICAgICB0aGVyZSwgd2FzIGRyaXZlbiBiYWNrIGludG8gdGhlIHRvd24sIHlldCBoZSBvYnRhaW5lZCBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4gW3RoZSBpbmR1bGdlbmNlXSB0aGF0IGhlIHNob3VsZCBlbmpveSB0aGUgc2FtZSB0ZXJtcyBvZgogICAgICAgICAgICAgICAgICAgIHN1cnJlbmRlciBbYXMgdGhlIG90aGVyIGluaGFiaXRhbnRzXS4gPC90cmFuc2xhdGlvbj4="
translation['3.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4sIGhhdmluZyByZWNlaXZlZCB0aGVpciBhcm1zIGFuZCBob3N0YWdlcywKICAgICAgICAgICAgICAgICAgICBtYXJjaGVkIGludG8gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZvY2F0ZXM8L25hbWU+IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UYXJ1c2F0ZXM8L25hbWU+LiBCdXQgdGhlbiwgdGhlIGJhcmJhcmlhbnMgYmVpbmcgYWxhcm1lZCwgYmVjYXVzZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGhlYXJkIHRoYXQgYSB0b3duIGZvcnRpZmllZCBieSB0aGUgbmF0dXJlIG9mIHRoZSBwbGFjZSBhbmQgYnkgYXJ0LCBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIHRha2VuIGJ5IHVzIGluIGEgZmV3IGRheXMgYWZ0ZXIgb3VyIGFycml2YWwgdGhlcmUsIGJlZ2FuIHRvIHNlbmQgZW1iYXNzYWRvcnMKICAgICAgICAgICAgICAgICAgICBpbnRvIGFsbCBxdWFydGVycywgdG8gY29tYmluZSwgdG8gZ2l2ZSBob3N0YWdlcyBvbmUgdG8gYW5vdGhlciwgdG8gcmFpc2UgdHJvb3BzLgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVtYmFzc2Fkb3JzPC9uYW1lPiBhbHNvIGFyZSBzZW50IHRvIHRob3NlIHN0YXRlcyBvZiBIaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDk1IiByZWc9IlNwYWluIFstNCw0MF0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlNwYWluPC9uYW1lPiB3aGljaCBhcmUgbmVhcmVzdCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI4NzgiIHJlZz0iQXF1aXRhaW5lIFsxLDQ0LjU4M10gKHJlZ2lvbiksIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QXF1aXRhbmlhIDwvbmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgIGF1eGlsaWFyaWVzIGFuZCBsZWFkZXJzIGFyZSBzdW1tb25lZCBmcm9tIHRoZW07IG9uIHdob3NlIGFycml2YWwgdGhleSBwcm9jZWVkIHRvCiAgICAgICAgICAgICAgICAgICAgY2Fycnkgb24gdGhlIHdhciB3aXRoIGdyZWF0IGNvbmZpZGVuY2UsIGFuZCB3aXRoIGEgZ3JlYXQgaG9zdCBvZiBtZW4uIFRoZXkgd2hvCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gd2l0aCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlEuIFNlcnRvcml1czwvbmFtZT4gdGhlIHdob2xlIHBlcmlvZCBbb2YgaGlzIHdhcgogICAgICAgICAgICAgICAgICAgIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGxhY2UiPlNwYWluXTwvbmFtZT4gYW5kIHdlcmUgc3VwcG9zZWQgdG8gaGF2ZSB2ZXJ5IGdyZWF0IHNraWxsCiAgICAgICAgICAgICAgICAgICAgaW4gbWlsaXRhcnkgbWF0dGVycywgYXJlIGNob3NlbiBsZWFkZXJzLiBUaGVzZSwgYWRvcHRpbmcgdGhlIHByYWN0aWNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgYmVnaW4gdG8gc2VsZWN0IFthZHZhbnRhZ2VvdXNdCiAgICAgICAgICAgICAgICAgICAgcGxhY2VzLCB0byBmb3J0aWZ5IHRoZWlyIGNhbXAsIHRvIGN1dCBvZmYgb3VyIG1lbiBmcm9tIHByb3Zpc2lvbnMsIHdoaWNoLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4gb2JzZXJ2ZXMsIFthbmQgbGlrZXdpc2VdIHRoYXQgaGlzIGZvcmNlcywKICAgICAgICAgICAgICAgICAgICBvbiBhY2NvdW50IG9mIHRoZWlyIHNtYWxsIG51bWJlciBjb3VsZCBub3Qgc2FmZWx5IGJlIHNlcGFyYXRlZDsgdGhhdCB0aGUgZW5lbXkKICAgICAgICAgICAgICAgICAgICBib3RoIG1hZGUgZXhjdXJzaW9ucyBhbmQgYmVzZXQgdGhlIHBhc3NlcywgYW5kIFt5ZXRdIGxlZnQgc3VmZmljaWVudCBndWFyZCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGVpciBjYW1wOyB0aGF0IG9uIHRoYXQgYWNjb3VudCwgY29ybiBhbmQgcHJvdmlzaW9uIGNvdWxkIG5vdCB2ZXJ5IGNvbnZlbmllbnRseQogICAgICAgICAgICAgICAgICAgIGJlIGJyb3VnaHQgdXAgdG8gaGltLCBhbmQgdGhhdCB0aGUgbnVtYmVyIG9mIHRoZSBlbmVteSB3YXMgZGFpbHkgaW5jcmVhc2VkLCBoZQogICAgICAgICAgICAgICAgICAgIHRob3VnaHQgdGhhdCBoZSBvdWdodCBub3QgdG8gZGVsYXkgaW4gZ2l2aW5nIGJhdHRsZS4gVGhpcyBtYXR0ZXIgYmVpbmcgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIHRvIGEgY291bmNpbCwgd2hlbiBoZSBkaXNjb3ZlcmVkIHRoYXQgYWxsIHRob3VnaHQgdGhlIHNhbWUgdGhpbmcsIGhlIGFwcG9pbnRlZAogICAgICAgICAgICAgICAgICAgIHRoZSBuZXh0IGRheSBmb3IgdGhlIGZpZ2h0LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DcmFzc3VzPC9uYW1lPiwgaGF2aW5nIHJlY2VpdmVkIHRoZWlyIGFybXMgYW5kIGhvc3RhZ2VzLAogICAgICAgICAgICAgICAgICAgIG1hcmNoZWQgaW50byB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Vm9jYXRlczwvbmFtZT4gYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRhcnVzYXRlczwvbmFtZT4uIEJ1dCB0aGVuLCB0aGUgYmFyYmFyaWFucyBiZWluZyBhbGFybWVkLCBiZWNhdXNlIHRoZXkKICAgICAgICAgICAgICAgICAgICBoYWQgaGVhcmQgdGhhdCBhIHRvd24gZm9ydGlmaWVkIGJ5IHRoZSBuYXR1cmUgb2YgdGhlIHBsYWNlIGFuZCBieSBhcnQsIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgdGFrZW4gYnkgdXMgaW4gYSBmZXcgZGF5cyBhZnRlciBvdXIgYXJyaXZhbCB0aGVyZSwgYmVnYW4gdG8gc2VuZCBlbWJhc3NhZG9ycwogICAgICAgICAgICAgICAgICAgIGludG8gYWxsIHF1YXJ0ZXJzLCB0byBjb21iaW5lLCB0byBnaXZlIGhvc3RhZ2VzIG9uZSB0byBhbm90aGVyLCB0byByYWlzZSB0cm9vcHMuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RW1iYXNzYWRvcnM8L25hbWU+IGFsc28gYXJlIHNlbnQgdG8gdGhvc2Ugc3RhdGVzIG9mIEhpdGhlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiIHJlZz0iU3BhaW4gWy00LDQwXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+U3BhaW48L25hbWU+IHdoaWNoIGFyZSBuZWFyZXN0IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg3OCIgcmVnPSJBcXVpdGFpbmUgWzEsNDQuNTgzXSAocmVnaW9uKSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BcXVpdGFuaWEgPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgYXV4aWxpYXJpZXMgYW5kIGxlYWRlcnMgYXJlIHN1bW1vbmVkIGZyb20gdGhlbTsgb24gd2hvc2UgYXJyaXZhbCB0aGV5IHByb2NlZWQgdG8KICAgICAgICAgICAgICAgICAgICBjYXJyeSBvbiB0aGUgd2FyIHdpdGggZ3JlYXQgY29uZmlkZW5jZSwgYW5kIHdpdGggYSBncmVhdCBob3N0IG9mIG1lbi4gVGhleSB3aG8KICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiB3aXRoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+US4gU2VydG9yaXVzPC9uYW1lPiB0aGUgd2hvbGUgcGVyaW9kIFtvZiBoaXMgd2FyCiAgICAgICAgICAgICAgICAgICAgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwbGFjZSI+U3BhaW5dPC9uYW1lPiBhbmQgd2VyZSBzdXBwb3NlZCB0byBoYXZlIHZlcnkgZ3JlYXQgc2tpbGwKICAgICAgICAgICAgICAgICAgICBpbiBtaWxpdGFyeSBtYXR0ZXJzLCBhcmUgY2hvc2VuIGxlYWRlcnMuIFRoZXNlLCBhZG9wdGluZyB0aGUgcHJhY3RpY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLCBiZWdpbiB0byBzZWxlY3QgW2FkdmFudGFnZW91c10KICAgICAgICAgICAgICAgICAgICBwbGFjZXMsIHRvIGZvcnRpZnkgdGhlaXIgY2FtcCwgdG8gY3V0IG9mZiBvdXIgbWVuIGZyb20gcHJvdmlzaW9ucywgd2hpY2gsIHdoZW4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DcmFzc3VzPC9uYW1lPiBvYnNlcnZlcywgW2FuZCBsaWtld2lzZV0gdGhhdCBoaXMgZm9yY2VzLAogICAgICAgICAgICAgICAgICAgIG9uIGFjY291bnQgb2YgdGhlaXIgc21hbGwgbnVtYmVyIGNvdWxkIG5vdCBzYWZlbHkgYmUgc2VwYXJhdGVkOyB0aGF0IHRoZSBlbmVteQogICAgICAgICAgICAgICAgICAgIGJvdGggbWFkZSBleGN1cnNpb25zIGFuZCBiZXNldCB0aGUgcGFzc2VzLCBhbmQgW3lldF0gbGVmdCBzdWZmaWNpZW50IGd1YXJkIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGNhbXA7IHRoYXQgb24gdGhhdCBhY2NvdW50LCBjb3JuIGFuZCBwcm92aXNpb24gY291bGQgbm90IHZlcnkgY29udmVuaWVudGx5CiAgICAgICAgICAgICAgICAgICAgYmUgYnJvdWdodCB1cCB0byBoaW0sIGFuZCB0aGF0IHRoZSBudW1iZXIgb2YgdGhlIGVuZW15IHdhcyBkYWlseSBpbmNyZWFzZWQsIGhlCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGF0IGhlIG91Z2h0IG5vdCB0byBkZWxheSBpbiBnaXZpbmcgYmF0dGxlLiBUaGlzIG1hdHRlciBiZWluZyBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgdG8gYSBjb3VuY2lsLCB3aGVuIGhlIGRpc2NvdmVyZWQgdGhhdCBhbGwgdGhvdWdodCB0aGUgc2FtZSB0aGluZywgaGUgYXBwb2ludGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIG5leHQgZGF5IGZvciB0aGUgZmlnaHQuIDwvdHJhbnNsYXRpb24+"
translation['3.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyBkcmF3biBvdXQgYWxsIGhpcyBmb3JjZXMgYXQgdGhlIGJyZWFrIG9mIGRheSwgYW5kIG1hcnNoYWxlZCB0aGVtIGluIGEKICAgICAgICAgICAgICAgICAgICBkb3VibGUgbGluZSwgaGUgcG9zdGVkIHRoZSBhdXhpbGlhcmllcyBpbiB0aGUgY2VudGVyLCBhbmQgd2FpdGVkIHRvIHNlZSB3aGF0CiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZXMgdGhlIGVuZW15IHdvdWxkIHRha2UuIFRoZXksIGFsdGhvdWdoIG9uIGFjY291bnQgb2YgdGhlaXIgZ3JlYXQgbnVtYmVyCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZWlyIGFuY2llbnQgcmVub3duIGluIHdhciwgYW5kIHRoZSBzbWFsbCBudW1iZXIgb2Ygb3VyIG1lbiwgdGhleSBzdXBwb3NlZAogICAgICAgICAgICAgICAgICAgIHRoZXkgbWlnaHQgc2FmZWx5IGZpZ2h0LCBuZXZlcnRoZWxlc3MgY29uc2lkZXJlZCBpdCBzYWZlciB0byBnYWluIHRoZSB2aWN0b3J5CiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBhbnkgd291bmQsIGJ5IGJlc2V0dGluZyB0aGUgcGFzc2VzIFthbmRdIGN1dHRpbmcgb2ZmIHRoZSBwcm92aXNpb25zOiBhbmQKICAgICAgICAgICAgICAgICAgICBpZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIG9uIGFjY291bnQgb2YgdGhlIHdhbnQgb2YgY29ybiwgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgYmVnaW4gdG8gcmV0cmVhdCwgdGhleSBpbnRlbmRlZCB0byBhdHRhY2sgdGhlbSB3aGlsZSBlbmN1bWJlcmVkIGluIHRoZWlyIG1hcmNoCiAgICAgICAgICAgICAgICAgICAgYW5kIGRlcHJlc3NlZCBpbiBzcGlyaXQgW2FzIGJlaW5nIGFzc2FpbGVkIHdoaWxlXSB1bmRlciBiYWdnYWdlLiBUaGlzIG1lYXN1cmUKICAgICAgICAgICAgICAgICAgICBiZWluZyBhcHByb3ZlZCBvZiBieSB0aGUgbGVhZGVycyBhbmQgdGhlIGZvcmNlcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gZHJhd24gb3V0LCB0aGUgZW5lbXkgW3N0aWxsXSBrZXB0IHRoZW1zZWx2ZXMgaW4gdGhlaXIgY2FtcC4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DcmFzc3VzPC9uYW1lPiBoYXZpbmcgcmVtYXJrZWQgdGhpcyBjaXJjdW1zdGFuY2UsIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15LCBpbnRpbWlkYXRlZCBieSB0aGVpciBvd24gZGVsYXksIGFuZCBieSB0aGUgcmVwdXRhdGlvbiBbaS5lLiBmb3IKICAgICAgICAgICAgICAgICAgICBjb3dhcmRpY2UgYXJpc2luZyB0aGVuY2VdIGhhZCByZW5kZXJlZCBvdXIgc29sZGllcnMgbW9yZSBlYWdlciBmb3IgZmlnaHRpbmcsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSByZW1hcmtzIG9mIGFsbCB3ZXJlIGhlYXJkIFtkZWNsYXJpbmddIHRoYXQgbm8gbG9uZ2VyIG91Z2h0IGRlbGF5IHRvIGJlIG1hZGUKICAgICAgICAgICAgICAgICAgICBpbiBnb2luZyB0byB0aGUgY2FtcCwgYWZ0ZXIgZW5jb3VyYWdpbmcgaGlzIG1lbiwgaGUgbWFyY2hlcyB0byB0aGUgY2FtcCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSwgdG8gdGhlIGdyZWF0IGdyYXRpZmljYXRpb24gb2YgaGlzIG93biB0cm9vcHMuKSA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIG9uIGFjY291bnQgb2YgdGhlIHdhbnQgb2YgY29ybiwgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgYmVnaW4gdG8gcmV0cmVhdCwgdGhleSBpbnRlbmRlZCB0byBhdHRhY2sgdGhlbSB3aGlsZSBlbmN1bWJlcmVkIGluIHRoZWlyIG1hcmNoCiAgICAgICAgICAgICAgICAgICAgYW5kIGRlcHJlc3NlZCBpbiBzcGlyaXQgW2FzIGJlaW5nIGFzc2FpbGVkIHdoaWxlXSB1bmRlciBiYWdnYWdlLiBUaGlzIG1lYXN1cmUKICAgICAgICAgICAgICAgICAgICBiZWluZyBhcHByb3ZlZCBvZiBieSB0aGUgbGVhZGVycyBhbmQgdGhlIGZvcmNlcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gZHJhd24gb3V0LCB0aGUgZW5lbXkgW3N0aWxsXSBrZXB0IHRoZW1zZWx2ZXMgaW4gdGhlaXIgY2FtcC4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DcmFzc3VzPC9uYW1lPiBoYXZpbmcgcmVtYXJrZWQgdGhpcyBjaXJjdW1zdGFuY2UsIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15LCBpbnRpbWlkYXRlZCBieSB0aGVpciBvd24gZGVsYXksIGFuZCBieSB0aGUgcmVwdXRhdGlvbiBbaS5lLiBmb3IKICAgICAgICAgICAgICAgICAgICBjb3dhcmRpY2UgYXJpc2luZyB0aGVuY2VdIGhhZCByZW5kZXJlZCBvdXIgc29sZGllcnMgbW9yZSBlYWdlciBmb3IgZmlnaHRpbmcsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSByZW1hcmtzIG9mIGFsbCB3ZXJlIGhlYXJkIFtkZWNsYXJpbmddIHRoYXQgbm8gbG9uZ2VyIG91Z2h0IGRlbGF5IHRvIGJlIG1hZGUKICAgICAgICAgICAgICAgICAgICBpbiBnb2luZyB0byB0aGUgY2FtcCwgYWZ0ZXIgZW5jb3VyYWdpbmcgaGlzIG1lbiwgaGUgbWFyY2hlcyB0byB0aGUgY2FtcCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSwgdG8gdGhlIGdyZWF0IGdyYXRpZmljYXRpb24gb2YgaGlzIG93biB0cm9vcHMuKSA8L3RyYW5zbGF0aW9uPg=="
translation['3.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlLCB3aGlsZSBzb21lIHdlcmUgZmlsbGluZyB1cCB0aGUgZGl0Y2gsIGFuZCBvdGhlcnMsIGJ5IHRocm93aW5nIGEgbGFyZ2UKICAgICAgICAgICAgICAgICAgICBudW1iZXIgb2YgZGFydHMsIHdlcmUgZHJpdmluZyB0aGUgZGVmZW5kZXJzIGZyb20gdGhlIHJhbXBhcnQgYW5kIGZvcnRpZmljYXRpb25zLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgYXV4aWxpYXJpZXMsIG9uIHdob20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DcmFzc3VzPC9uYW1lPiBkaWQgbm90IG11Y2ggcmVseQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBiYXR0bGUsIGJ5IHN1cHBseWluZyBzdG9uZXMgYW5kIHdlYXBvbnMgW3RvIHRoZSBzb2xkaWVyc10sIGFuZCBieQogICAgICAgICAgICAgICAgICAgIGNvbnZleWluZyB0dXJmIHRvIHRoZSBtb3VuZCwgcHJlc2VudGVkIHRoZSBhcHBlYXJhbmNlIGFuZCBjaGFyYWN0ZXIgb2YgbWVuCiAgICAgICAgICAgICAgICAgICAgZW5nYWdlZCBpbiBmaWdodGluZzsgd2hpbGUgYWxzbyB0aGUgZW5lbXkgd2VyZSBmaWdodGluZyByZXNvbHV0ZWx5IGFuZCBib2xkbHksCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZWlyIHdlYXBvbnMsIGRpc2NoYXJnZWQgZnJvbSB0aGVpciBoaWdoZXIgcG9zaXRpb24sIGZlbGwgd2l0aCBncmVhdAogICAgICAgICAgICAgICAgICAgIGVmZmVjdDsgdGhlIGhvcnNlLCBoYXZpbmcgZ29uZSByb3VuZCB0aGUgY2FtcCBvZiB0aGUgZW5lbXksIHJlcG9ydGVkIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4gdGhhdCB0aGUgY2FtcCB3YXMgbm90IGZvcnRpZmllZCB3aXRoIGVxdWFsIGNhcmUKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgc2lkZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWN1bWFuPC9uYW1lPiBnYXRlLCBhbmQgaGFkIGFuIGVhc3kgYXBwcm9hY2guCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNyYXNzdXM8L25hbWU+IGRpZCBub3QgbXVjaCByZWx5CiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGJhdHRsZSwgYnkgc3VwcGx5aW5nIHN0b25lcyBhbmQgd2VhcG9ucyBbdG8gdGhlIHNvbGRpZXJzXSwgYW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgY29udmV5aW5nIHR1cmYgdG8gdGhlIG1vdW5kLCBwcmVzZW50ZWQgdGhlIGFwcGVhcmFuY2UgYW5kIGNoYXJhY3RlciBvZiBtZW4KICAgICAgICAgICAgICAgICAgICBlbmdhZ2VkIGluIGZpZ2h0aW5nOyB3aGlsZSBhbHNvIHRoZSBlbmVteSB3ZXJlIGZpZ2h0aW5nIHJlc29sdXRlbHkgYW5kIGJvbGRseSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlaXIgd2VhcG9ucywgZGlzY2hhcmdlZCBmcm9tIHRoZWlyIGhpZ2hlciBwb3NpdGlvbiwgZmVsbCB3aXRoIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OyB0aGUgaG9yc2UsIGhhdmluZyBnb25lIHJvdW5kIHRoZSBjYW1wIG9mIHRoZSBlbmVteSwgcmVwb3J0ZWQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DcmFzc3VzPC9uYW1lPiB0aGF0IHRoZSBjYW1wIHdhcyBub3QgZm9ydGlmaWVkIHdpdGggZXF1YWwgY2FyZQogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBzaWRlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3VtYW48L25hbWU+IGdhdGUsIGFuZCBoYWQgYW4gZWFzeSBhcHByb2FjaC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4sIGhhdmluZyBleGhvcnRlZCB0aGUgY29tbWFuZGVycyBvZiB0aGUgaG9yc2UgdG8KICAgICAgICAgICAgICAgICAgICBhbmltYXRlIHRoZWlyIG1lbiBieSBncmVhdCByZXdhcmRzIGFuZCBwcm9taXNlcywgcG9pbnRzIG91dCB0byB0aGVtIHdoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3aXNoZWQgdG8gaGF2ZSBkb25lLiBUaGV5LCBhcyB0aGV5IGhhZCBiZWVuIGNvbW1hbmRlZCwgaGF2aW5nIGJyb3VnaHQgb3V0IHRoZQogICAgICAgICAgICAgICAgICAgIGZvdXIgY29ob3J0cywgd2hpY2gsIGFzIHRoZXkgaGFkIGJlZW4gbGVmdCBhcyBhIGd1YXJkIGZvciB0aGUgY2FtcCwgd2VyZSBub3QKICAgICAgICAgICAgICAgICAgICBmYXRpZ3VlZCBieSBleGVydGlvbiwgYW5kIGhhdmluZyBsZWQgdGhlbSByb3VuZCBieSBhIHNvbWUgd2hhdCBsb25nZXIgd2F5LCBsZXN0CiAgICAgICAgICAgICAgICAgICAgdGhleSBjb3VsZCBiZSBzZWVuIGZyb20gdGhlIGNhbXAgb2YgdGhlIGVuZW15LCB3aGVuIHRoZSBleWVzIGFuZCBtaW5kcyBvZiBhbGwKICAgICAgICAgICAgICAgICAgICB3ZXJlIGludGVudCB1cG9uIHRoZSBiYXR0bGUsIHF1aWNrbHkgYXJyaXZlZCBhdCB0aG9zZSBmb3J0aWZpY2F0aW9ucyB3aGljaCB3ZQogICAgICAgICAgICAgICAgICAgIGhhdmUgc3Bva2VuIG9mLCBhbmQsIGhhdmluZyBkZW1vbGlzaGVkIHRoZXNlLCBzdG9vZCBpbiB0aGUgY2FtcCBvZiB0aGUgZW5lbXkKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhleSB3ZXJlIHNlZW4gYnkgdGhlbSwgb3IgaXQgd2FzIGtub3duIHdoYXQgd2FzIGdvaW5nIG9uLiBBbmQgdGhlbiwgYQogICAgICAgICAgICAgICAgICAgIHNob3V0IGJlaW5nIGhlYXJkIGluIHRoYXQgcXVhcnRlciwgb3VyIG1lbiwgdGhlaXIgc3RyZW5ndGggaGF2aW5nIGJlZW4KICAgICAgICAgICAgICAgICAgICByZWNydWl0ZWQsICh3aGljaCB1c3VhbGx5IG9jY3VycyBvbiB0aGUgaG9wZSBvZiB2aWN0b3J5KSwgYmVnYW4gdG8gZmlnaHQgbW9yZQogICAgICAgICAgICAgICAgICAgIHZpZ29yb3VzbHkuIFRoZSBlbmVteSBzdXJyb3VuZGVkIG9uIGFsbCBzaWRlcywgW2FuZF0gYWxsIHRoZWlyIGFmZmFpcnMgYmVpbmcKICAgICAgICAgICAgICAgICAgICBkZXNwYWlyZWQgb2YsIG1hZGUgZ3JlYXQgYXR0ZW1wdHMgdG8gY2FzdCB0aGVtc2VsdmVzIGRvd24gb3ZlciB0aGUgcmFtcGFydHMgYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gc2VlayBzYWZldHkgaW4gZmxpZ2h0LiBUaGVzZSB0aGUgY2F2YWxyeSBwdXJzdWVkIG92ZXIgdGhlIHZlcnkgb3BlbiBwbGFpbnMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGFmdGVyIGxlYXZpbmcgc2NhcmNlbHkgYSBmb3VydGggcGFydCBvdXQgb2YgdGhlIG51bWJlciBvZiA1MCwwMDAsIHdoaWNoIGl0CiAgICAgICAgICAgICAgICAgICAgd2FzIGNlcnRhaW4gaGFkIGFzc2VtYmxlZCBvdXQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyODc4IiByZWc9IkFxdWl0YWluZSBbMSw0NC41ODNdIChyZWdpb24pLCBGcmFuY2UsIEV1cm9wZSIgdHlwZT0icGxhY2UiPkFxdWl0YW5pYSA8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FudGFicmk8L25hbWU+LCByZXR1cm5lZCBsYXRlIGF0IG5pZ2h0IHRvIHRoZSBjYW1wLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DcmFzc3VzPC9uYW1lPiwgaGF2aW5nIGV4aG9ydGVkIHRoZSBjb21tYW5kZXJzIG9mIHRoZSBob3JzZSB0bwogICAgICAgICAgICAgICAgICAgIGFuaW1hdGUgdGhlaXIgbWVuIGJ5IGdyZWF0IHJld2FyZHMgYW5kIHByb21pc2VzLCBwb2ludHMgb3V0IHRvIHRoZW0gd2hhdCBoZQogICAgICAgICAgICAgICAgICAgIHdpc2hlZCB0byBoYXZlIGRvbmUuIFRoZXksIGFzIHRoZXkgaGFkIGJlZW4gY29tbWFuZGVkLCBoYXZpbmcgYnJvdWdodCBvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZm91ciBjb2hvcnRzLCB3aGljaCwgYXMgdGhleSBoYWQgYmVlbiBsZWZ0IGFzIGEgZ3VhcmQgZm9yIHRoZSBjYW1wLCB3ZXJlIG5vdAogICAgICAgICAgICAgICAgICAgIGZhdGlndWVkIGJ5IGV4ZXJ0aW9uLCBhbmQgaGF2aW5nIGxlZCB0aGVtIHJvdW5kIGJ5IGEgc29tZSB3aGF0IGxvbmdlciB3YXksIGxlc3QKICAgICAgICAgICAgICAgICAgICB0aGV5IGNvdWxkIGJlIHNlZW4gZnJvbSB0aGUgY2FtcCBvZiB0aGUgZW5lbXksIHdoZW4gdGhlIGV5ZXMgYW5kIG1pbmRzIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIHdlcmUgaW50ZW50IHVwb24gdGhlIGJhdHRsZSwgcXVpY2tseSBhcnJpdmVkIGF0IHRob3NlIGZvcnRpZmljYXRpb25zIHdoaWNoIHdlCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBzcG9rZW4gb2YsIGFuZCwgaGF2aW5nIGRlbW9saXNoZWQgdGhlc2UsIHN0b29kIGluIHRoZSBjYW1wIG9mIHRoZSBlbmVteQogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB0aGV5IHdlcmUgc2VlbiBieSB0aGVtLCBvciBpdCB3YXMga25vd24gd2hhdCB3YXMgZ29pbmcgb24uIEFuZCB0aGVuLCBhCiAgICAgICAgICAgICAgICAgICAgc2hvdXQgYmVpbmcgaGVhcmQgaW4gdGhhdCBxdWFydGVyLCBvdXIgbWVuLCB0aGVpciBzdHJlbmd0aCBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIHJlY3J1aXRlZCwgKHdoaWNoIHVzdWFsbHkgb2NjdXJzIG9uIHRoZSBob3BlIG9mIHZpY3RvcnkpLCBiZWdhbiB0byBmaWdodCBtb3JlCiAgICAgICAgICAgICAgICAgICAgdmlnb3JvdXNseS4gVGhlIGVuZW15IHN1cnJvdW5kZWQgb24gYWxsIHNpZGVzLCBbYW5kXSBhbGwgdGhlaXIgYWZmYWlycyBiZWluZwogICAgICAgICAgICAgICAgICAgIGRlc3BhaXJlZCBvZiwgbWFkZSBncmVhdCBhdHRlbXB0cyB0byBjYXN0IHRoZW1zZWx2ZXMgZG93biBvdmVyIHRoZSByYW1wYXJ0cyBhbmQKICAgICAgICAgICAgICAgICAgICB0byBzZWVrIHNhZmV0eSBpbiBmbGlnaHQuIFRoZXNlIHRoZSBjYXZhbHJ5IHB1cnN1ZWQgb3ZlciB0aGUgdmVyeSBvcGVuIHBsYWlucywKICAgICAgICAgICAgICAgICAgICBhbmQgYWZ0ZXIgbGVhdmluZyBzY2FyY2VseSBhIGZvdXJ0aCBwYXJ0IG91dCBvZiB0aGUgbnVtYmVyIG9mIDUwLDAwMCwgd2hpY2ggaXQKICAgICAgICAgICAgICAgICAgICB3YXMgY2VydGFpbiBoYWQgYXNzZW1ibGVkIG91dCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI4NzgiIHJlZz0iQXF1aXRhaW5lIFsxLDQ0LjU4M10gKHJlZ2lvbiksIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QXF1aXRhbmlhIDwvbmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW50YWJyaTwvbmFtZT4sIHJldHVybmVkIGxhdGUgYXQgbmlnaHQgdG8gdGhlIGNhbXAuIDwvdHJhbnNsYXRpb24+"
translation['3.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyBoZWFyZCBvZiB0aGlzIGJhdHRsZSwgdGhlIGdyZWF0ZXN0IHBhcnQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyODc4IiByZWc9IkFxdWl0YWluZSBbMSw0NC41ODNdIChyZWdpb24pLCBGcmFuY2UsIEV1cm9wZSIgdHlwZT0icGxhY2UiPkFxdWl0YW5pYQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gc3VycmVuZGVyZWQgaXRzZWxmIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4sIGFuZCBvZiBpdHMgb3duCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkIHNlbnQgaG9zdGFnZXMsIGluIHdoaWNoIG51bWJlciB3ZXJlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRhcmJlbGxpPC9uYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmlnZXJyaW9uZXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5QcmVjaWFuaTwvbmFtZT4sIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZvY2FzYXRlczwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRhcnVzYXRlczwvbmFtZT4sIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVsdXJhdGVzPC9uYW1lPiwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FyaXRlczwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkF1c2NpPC9uYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FydW1uaTwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNpYnV6YXRlczwvbmFtZT4sIHRoZQogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29jb3NhdGVzPC9uYW1lPi4gQSBmZXcgW2FuZCB0aG9zZV0gbW9zdCByZW1vdGUgbmF0aW9ucywgcmVseWluZyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICB0aW1lIG9mIHRoZSB5ZWFyLCBiZWNhdXNlIHdpbnRlciB3YXMgYXQgaGFuZCwgbmVnbGVjdGVkIHRvIGRvIHRoaXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI4NzgiIHJlZz0iQXF1aXRhaW5lIFsxLDQ0LjU4M10gKHJlZ2lvbiksIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QXF1aXRhbmlhCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBzdXJyZW5kZXJlZCBpdHNlbGYgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DcmFzc3VzPC9uYW1lPiwgYW5kIG9mIGl0cyBvd24KICAgICAgICAgICAgICAgICAgICBhY2NvcmQgc2VudCBob3N0YWdlcywgaW4gd2hpY2ggbnVtYmVyIHdlcmUgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGFyYmVsbGk8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaWdlcnJpb25lczwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlByZWNpYW5pPC9uYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Vm9jYXNhdGVzPC9uYW1lPiwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGFydXNhdGVzPC9uYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWx1cmF0ZXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYXJpdGVzPC9uYW1lPiwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXVzY2k8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYXJ1bW5pPC9uYW1lPiwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2lidXphdGVzPC9uYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db2Nvc2F0ZXM8L25hbWU+LiBBIGZldyBbYW5kIHRob3NlXSBtb3N0IHJlbW90ZSBuYXRpb25zLCByZWx5aW5nIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHRpbWUgb2YgdGhlIHllYXIsIGJlY2F1c2Ugd2ludGVyIHdhcyBhdCBoYW5kLCBuZWdsZWN0ZWQgdG8gZG8gdGhpcy4gPC90cmFuc2xhdGlvbj4="
translation['3.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFib3V0IHRoZSBzYW1lIHRpbWUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBhbHRob3VnaCB0aGUgc3VtbWVyIHdhcwogICAgICAgICAgICAgICAgICAgIG5lYXJseSBwYXN0LCB5ZXQsIHNpbmNlLCBhbGwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGJlaW5nIHJlZHVjZWQsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmluaTwvbmFtZT4gYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lbmFwaWk8L25hbWU+IGFsb25lIHJlbWFpbmVkIGluIGFybXMsIGFuZAogICAgICAgICAgICAgICAgICAgIGhhZCBuZXZlciBzZW50IGVtYmFzc2Fkb3JzIHRvIGhpbSBbdG8gbWFrZSBhIHRyZWF0eV0gb2YgcGVhY2UsIHNwZWVkaWx5IGxlZCBoaXMKICAgICAgICAgICAgICAgICAgICBhcm15IHRoaXRoZXIsIHRoaW5raW5nIHRoYXQgdGhhdCB3YXIgbWlnaHQgc29vbiBiZSB0ZXJtaW5hdGVkLiBUaGV5IHJlc29sdmVkIHRvCiAgICAgICAgICAgICAgICAgICAgY29uZHVjdCB0aGUgd2FyIG9uIGEgdmVyeSBkaWZmZXJlbnQgbWV0aG9kIGZyb20gdGhlIHJlc3Qgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT47IGZvciBhcyB0aGV5IHBlcmNlaXZlZCB0aGF0IHRoZSBncmVhdGVzdCBuYXRpb25zCiAgICAgICAgICAgICAgICAgICAgW29mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2F1bF08L25hbWU+IHdobyBoYWQgZW5nYWdlZCBpbiB3YXIsIGhhZCBiZWVuIHJvdXRlZCBhbmQgb3ZlcmNvbWUsIGFuZAogICAgICAgICAgICAgICAgICAgIGFzIHRoZXkgcG9zc2Vzc2VkIGNvbnRpbnVvdXMgcmFuZ2VzIG9mIGZvcmVzdHMgYW5kIG1vcmFzc2VzLCB0aGV5IHJlbW92ZWQKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGFuZCBhbGwgdGhlaXIgcHJvcGVydHkgdGhpdGhlci4gV2hlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBoYWQgYXJyaXZlZCBhdCB0aGUgb3BlbmluZyBvZiB0aGVzZSBmb3Jlc3RzLCBhbmQgaGFkIGJlZ2FuIHRvIGZvcnRpZnkgaGlzIGNhbXAsCiAgICAgICAgICAgICAgICAgICAgYW5kIG5vIGVuZW15IHdhcyBpbiB0aGUgbWVhbiB0aW1lIHNlZW4sIHdoaWxlIG91ciBtZW4gd2VyZSBkaXNwZXJzZWQgb24gdGhlaXIKICAgICAgICAgICAgICAgICAgICByZXNwZWN0aXZlIGR1dGllcywgdGhleSBzdWRkZW5seSBydXNoZWQgb3V0IGZyb20gYWxsIHBhcnRzIG9mIHRoZSBmb3Jlc3QsIGFuZAogICAgICAgICAgICAgICAgICAgIG1hZGUgYW4gYXR0YWNrIG9uIG91ciBtZW4uIFRoZSBsYXR0ZXIgcXVpY2tseSB0b29rIHVwIGFybXMgYW5kIGRyb3ZlIHRoZW0gYmFjawogICAgICAgICAgICAgICAgICAgIGFnYWluIHRvIHRoZWlyIGZvcmVzdHM7IGFuZCBoYXZpbmcga2lsbGVkIGEgZ3JlYXQgbWFueSwgbG9zdCBhIGZldyBvZiB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICBtZW4gd2hpbGUgcHVyc3VpbmcgdGhlbSB0b28gZmFyIHRocm91Z2ggdGhvc2UgaW50cmljYXRlIHBsYWNlcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYWx0aG91Z2ggdGhlIHN1bW1lciB3YXMKICAgICAgICAgICAgICAgICAgICBuZWFybHkgcGFzdCwgeWV0LCBzaW5jZSwgYWxsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBiZWluZyByZWR1Y2VkLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3Jpbmk8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZW5hcGlpPC9uYW1lPiBhbG9uZSByZW1haW5lZCBpbiBhcm1zLCBhbmQKICAgICAgICAgICAgICAgICAgICBoYWQgbmV2ZXIgc2VudCBlbWJhc3NhZG9ycyB0byBoaW0gW3RvIG1ha2UgYSB0cmVhdHldIG9mIHBlYWNlLCBzcGVlZGlseSBsZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgYXJteSB0aGl0aGVyLCB0aGlua2luZyB0aGF0IHRoYXQgd2FyIG1pZ2h0IHNvb24gYmUgdGVybWluYXRlZC4gVGhleSByZXNvbHZlZCB0bwogICAgICAgICAgICAgICAgICAgIGNvbmR1Y3QgdGhlIHdhciBvbiBhIHZlcnkgZGlmZmVyZW50IG1ldGhvZCBmcm9tIHRoZSByZXN0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+OyBmb3IgYXMgdGhleSBwZXJjZWl2ZWQgdGhhdCB0aGUgZ3JlYXRlc3QgbmF0aW9ucwogICAgICAgICAgICAgICAgICAgIFtvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxdPC9uYW1lPiB3aG8gaGFkIGVuZ2FnZWQgaW4gd2FyLCBoYWQgYmVlbiByb3V0ZWQgYW5kIG92ZXJjb21lLCBhbmQKICAgICAgICAgICAgICAgICAgICBhcyB0aGV5IHBvc3Nlc3NlZCBjb250aW51b3VzIHJhbmdlcyBvZiBmb3Jlc3RzIGFuZCBtb3Jhc3NlcywgdGhleSByZW1vdmVkCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBhbmQgYWxsIHRoZWlyIHByb3BlcnR5IHRoaXRoZXIuIFdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgaGFkIGFycml2ZWQgYXQgdGhlIG9wZW5pbmcgb2YgdGhlc2UgZm9yZXN0cywgYW5kIGhhZCBiZWdhbiB0byBmb3J0aWZ5IGhpcyBjYW1wLAogICAgICAgICAgICAgICAgICAgIGFuZCBubyBlbmVteSB3YXMgaW4gdGhlIG1lYW4gdGltZSBzZWVuLCB3aGlsZSBvdXIgbWVuIHdlcmUgZGlzcGVyc2VkIG9uIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcmVzcGVjdGl2ZSBkdXRpZXMsIHRoZXkgc3VkZGVubHkgcnVzaGVkIG91dCBmcm9tIGFsbCBwYXJ0cyBvZiB0aGUgZm9yZXN0LCBhbmQKICAgICAgICAgICAgICAgICAgICBtYWRlIGFuIGF0dGFjayBvbiBvdXIgbWVuLiBUaGUgbGF0dGVyIHF1aWNrbHkgdG9vayB1cCBhcm1zIGFuZCBkcm92ZSB0aGVtIGJhY2sKICAgICAgICAgICAgICAgICAgICBhZ2FpbiB0byB0aGVpciBmb3Jlc3RzOyBhbmQgaGF2aW5nIGtpbGxlZCBhIGdyZWF0IG1hbnksIGxvc3QgYSBmZXcgb2YgdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgbWVuIHdoaWxlIHB1cnN1aW5nIHRoZW0gdG9vIGZhciB0aHJvdWdoIHRob3NlIGludHJpY2F0ZSBwbGFjZXMuIDwvdHJhbnNsYXRpb24+"
translation['3.29'] = ""
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgZm9sbG93aW5nIHdpbnRlciAodGhpcyB3YXMgdGhlIHllYXIgaW4gd2hpY2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Dbi4gUG9tcGV5PC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NLiBDcmFzc3VzPC9uYW1lPiB3ZXJlIGNvbnN1bHMgWzxkYXRlIGF1dGhuYW1lPSItNTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii01NSI+NTU8L2RhdGU+IEIuQy5dKSwgdGhvc2UgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IFtjYWxsZWRdIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlVzaXBldGVzPC9uYW1lPiwgYW5kIGxpa2V3aXNlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRlbmNodGhlcmk8L25hbWU+LCB3aXRoIGEKICAgICAgICAgICAgICAgICAgICBncmVhdCBudW1iZXIgb2YgbWVuLCBjcm9zc2VkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LCBub3QgZmFyIGZyb20gdGhlIHBsYWNlCiAgICAgICAgICAgICAgICAgICAgYXQgd2hpY2ggdGhhdCByaXZlciBkaXNjaGFyZ2VzIGl0c2VsZiBpbnRvIHRoZSBzZWEuIFRoZSBtb3RpdmUgZm9yIGNyb3NzaW5nCiAgICAgICAgICAgICAgICAgICAgW3RoYXQgcml2ZXJdIHdhcywgdGhhdCBoYXZpbmcgYmVlbiBmb3Igc2V2ZXJhbCB5ZWFycyBoYXJhc3NlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4sIHRoZXkgd2VyZSBjb25zdGFudGx5IGVuZ2FnZWQgaW4gd2FyLCBhbmQgaGluZGVyZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBwdXJzdWl0cyBvZiBhZ3JpY3VsdHVyZS4gVGhlIG5hdGlvbiBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4gaXMgYnkgZmFyIHRoZQogICAgICAgICAgICAgICAgICAgIGxhcmdlc3QgYW5kIHRoZSBtb3N0IHdhcmxpa2UgbmF0aW9uIG9mIGFsbCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LiBUaGV5IGFyZSBzYWlkIHRvIHBvc3Nlc3MgYSBodW5kcmVkIGNhbnRvbnMsIGZyb20gZWFjaCBvZgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXkgeWVhcmx5IHNlbmQgZnJvbSB0aGVpciB0ZXJyaXRvcmllcyBmb3IgdGhlIHB1cnBvc2Ugb2Ygd2FyIGEgdGhvdXNhbmQKICAgICAgICAgICAgICAgICAgICBhcm1lZCBtZW46IHRoZSBvdGhlcnMgd2hvIHJlbWFpbiBhdCBob21lLCBtYWludGFpbiBbYm90aF0gdGhlbXNlbHZlcyBhbmQKICAgICAgICAgICAgICAgICAgICB0aG9zZS1lbmdhZ2VkIGluIHRoZSBleHBlZGl0aW9uLiBUaGUgbGF0dGVyIGFnYWluLCBpbiB0aGVpciB0dXJuLCBhcmUgaW4gYXJtcwogICAgICAgICAgICAgICAgICAgIHRoZSB5ZWFyIGFmdGVyOiB0aGUgZm9ybWVyIHJlbWFpbiBhdCBob21lLiBUaHVzIG5laXRoZXIgaHVzYmFuZHJ5LCBub3IgdGhlIGFydAogICAgICAgICAgICAgICAgICAgIGFuZCBwcmFjdGljZSBvZiB3YXIgYXJlIG5lZ2xlY3RlZC4gQnV0IGFtb25nIHRoZW0gdGhlcmUgZXhpc3RzIG5vIHByaXZhdGUgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VwYXJhdGUgbGFuZDsgbm9yIGFyZSB0aGV5IHBlcm1pdHRlZCB0byByZW1haW4gbW9yZSB0aGFuIG9uZSB5ZWFyIGluIG9uZSBwbGFjZQogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgcHVycG9zZSBvZiByZXNpZGVuY2UuIFRoZXkgZG8gbm90IGxpdmUgbXVjaCBvbiBjb3JuLCBidXQgc3Vic2lzdCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBwYXJ0IG9uIG1pbGsgYW5kIGZsZXNoLCBhbmQgYXJlIG11Y2ggW2VuZ2FnZWRdIGluIGh1bnRpbmc7IHdoaWNoCiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlIG11c3QsIGJ5IHRoZSBuYXR1cmUgb2YgdGhlaXIgZm9vZCwgYW5kIGJ5IHRoZWlyIGRhaWx5IGV4ZXJjaXNlIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBmcmVlZG9tIG9mIHRoZWlyIGxpZmUgKGZvciBoYXZpbmcgZnJvbSBib3lob29kIGJlZW4gYWNjdXN0b21lZCB0byBubwogICAgICAgICAgICAgICAgICAgIGVtcGxveW1lbnQsIG9yIGRpc2NpcGxpbmUsIHRoZXkgZG8gbm90aGluZyBhdCBhbGwgY29udHJhcnkgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBpbmNsaW5hdGlvbiksIGJvdGggcHJvbW90ZSB0aGVpciBzdHJlbmd0aCBhbmQgcmVuZGVyIHRoZW0gbWVuIG9mIHZhc3Qgc3RhdHVyZSBvZgogICAgICAgICAgICAgICAgICAgIGJvZHkuIEFuZCB0byBzdWNoIGEgaGFiaXQgaGF2ZSB0aGV5IGJyb3VnaHQgdGhlbXNlbHZlcywgdGhhdCBldmVuIGluIHRoZSBjb2xkZXN0CiAgICAgICAgICAgICAgICAgICAgcGFydHMgdGhleSB3ZWFyIG5vIGNsb3RoaW5nIHdoYXRldmVyIGV4Y2VwdCBza2lucywgYnkgcmVhc29uIG9mIHRoZSBzY2FudGluZXNzCiAgICAgICAgICAgICAgICAgICAgb2Ygd2hpY2gsIGEgZ3JlYXQgcG9ydGlvbiBvZiB0aGVpciBib2R5IGlzIGJhcmUsIGFuZCBiZXNpZGVzIHRoZXkgYmF0aGUgaW4gb3BlbgogICAgICAgICAgICAgICAgICAgIHJpdmVycy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Dbi4gUG9tcGV5PC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NLiBDcmFzc3VzPC9uYW1lPiB3ZXJlIGNvbnN1bHMgWzxkYXRlIGF1dGhuYW1lPSItNTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii01NSI+NTU8L2RhdGU+IEIuQy5dKSwgdGhvc2UgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IFtjYWxsZWRdIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlVzaXBldGVzPC9uYW1lPiwgYW5kIGxpa2V3aXNlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRlbmNodGhlcmk8L25hbWU+LCB3aXRoIGEKICAgICAgICAgICAgICAgICAgICBncmVhdCBudW1iZXIgb2YgbWVuLCBjcm9zc2VkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LCBub3QgZmFyIGZyb20gdGhlIHBsYWNlCiAgICAgICAgICAgICAgICAgICAgYXQgd2hpY2ggdGhhdCByaXZlciBkaXNjaGFyZ2VzIGl0c2VsZiBpbnRvIHRoZSBzZWEuIFRoZSBtb3RpdmUgZm9yIGNyb3NzaW5nCiAgICAgICAgICAgICAgICAgICAgW3RoYXQgcml2ZXJdIHdhcywgdGhhdCBoYXZpbmcgYmVlbiBmb3Igc2V2ZXJhbCB5ZWFycyBoYXJhc3NlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4sIHRoZXkgd2VyZSBjb25zdGFudGx5IGVuZ2FnZWQgaW4gd2FyLCBhbmQgaGluZGVyZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBwdXJzdWl0cyBvZiBhZ3JpY3VsdHVyZS4gVGhlIG5hdGlvbiBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4gaXMgYnkgZmFyIHRoZQogICAgICAgICAgICAgICAgICAgIGxhcmdlc3QgYW5kIHRoZSBtb3N0IHdhcmxpa2UgbmF0aW9uIG9mIGFsbCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LiBUaGV5IGFyZSBzYWlkIHRvIHBvc3Nlc3MgYSBodW5kcmVkIGNhbnRvbnMsIGZyb20gZWFjaCBvZgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXkgeWVhcmx5IHNlbmQgZnJvbSB0aGVpciB0ZXJyaXRvcmllcyBmb3IgdGhlIHB1cnBvc2Ugb2Ygd2FyIGEgdGhvdXNhbmQKICAgICAgICAgICAgICAgICAgICBhcm1lZCBtZW46IHRoZSBvdGhlcnMgd2hvIHJlbWFpbiBhdCBob21lLCBtYWludGFpbiBbYm90aF0gdGhlbXNlbHZlcyBhbmQKICAgICAgICAgICAgICAgICAgICB0aG9zZS1lbmdhZ2VkIGluIHRoZSBleHBlZGl0aW9uLiBUaGUgbGF0dGVyIGFnYWluLCBpbiB0aGVpciB0dXJuLCBhcmUgaW4gYXJtcwogICAgICAgICAgICAgICAgICAgIHRoZSB5ZWFyIGFmdGVyOiB0aGUgZm9ybWVyIHJlbWFpbiBhdCBob21lLiBUaHVzIG5laXRoZXIgaHVzYmFuZHJ5LCBub3IgdGhlIGFydAogICAgICAgICAgICAgICAgICAgIGFuZCBwcmFjdGljZSBvZiB3YXIgYXJlIG5lZ2xlY3RlZC4gQnV0IGFtb25nIHRoZW0gdGhlcmUgZXhpc3RzIG5vIHByaXZhdGUgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VwYXJhdGUgbGFuZDsgbm9yIGFyZSB0aGV5IHBlcm1pdHRlZCB0byByZW1haW4gbW9yZSB0aGFuIG9uZSB5ZWFyIGluIG9uZSBwbGFjZQogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgcHVycG9zZSBvZiByZXNpZGVuY2UuIFRoZXkgZG8gbm90IGxpdmUgbXVjaCBvbiBjb3JuLCBidXQgc3Vic2lzdCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBwYXJ0IG9uIG1pbGsgYW5kIGZsZXNoLCBhbmQgYXJlIG11Y2ggW2VuZ2FnZWRdIGluIGh1bnRpbmc7IHdoaWNoCiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlIG11c3QsIGJ5IHRoZSBuYXR1cmUgb2YgdGhlaXIgZm9vZCwgYW5kIGJ5IHRoZWlyIGRhaWx5IGV4ZXJjaXNlIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBmcmVlZG9tIG9mIHRoZWlyIGxpZmUgKGZvciBoYXZpbmcgZnJvbSBib3lob29kIGJlZW4gYWNjdXN0b21lZCB0byBubwogICAgICAgICAgICAgICAgICAgIGVtcGxveW1lbnQsIG9yIGRpc2NpcGxpbmUsIHRoZXkgZG8gbm90aGluZyBhdCBhbGwgY29udHJhcnkgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBpbmNsaW5hdGlvbiksIGJvdGggcHJvbW90ZSB0aGVpciBzdHJlbmd0aCBhbmQgcmVuZGVyIHRoZW0gbWVuIG9mIHZhc3Qgc3RhdHVyZSBvZgogICAgICAgICAgICAgICAgICAgIGJvZHkuIEFuZCB0byBzdWNoIGEgaGFiaXQgaGF2ZSB0aGV5IGJyb3VnaHQgdGhlbXNlbHZlcywgdGhhdCBldmVuIGluIHRoZSBjb2xkZXN0CiAgICAgICAgICAgICAgICAgICAgcGFydHMgdGhleSB3ZWFyIG5vIGNsb3RoaW5nIHdoYXRldmVyIGV4Y2VwdCBza2lucywgYnkgcmVhc29uIG9mIHRoZSBzY2FudGluZXNzCiAgICAgICAgICAgICAgICAgICAgb2Ygd2hpY2gsIGEgZ3JlYXQgcG9ydGlvbiBvZiB0aGVpciBib2R5IGlzIGJhcmUsIGFuZCBiZXNpZGVzIHRoZXkgYmF0aGUgaW4gb3BlbgogICAgICAgICAgICAgICAgICAgIHJpdmVycy4gPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVyY2hhbnRzIGhhdmUgYWNjZXNzIHRvIHRoZW0gcmF0aGVyIHRoYXQgdGhleSBtYXkgaGF2ZSBwZXJzb25zIHRvIHdob20gdGhleSBtYXkKICAgICAgICAgICAgICAgICAgICBzZWxsIHRob3NlIHRoaW5ncyB3aGljaCB0aGV5IGhhdmUgdGFrZW4gaW4gd2FyLCB0aGFuIGJlY2F1c2UgdGhleSBuZWVkIGFueQogICAgICAgICAgICAgICAgICAgIGNvbW1vZGl0eSB0byBiZSBpbXBvcnRlZCB0byB0aGVtLiBNb3Jlb3ZlciwgZXZlbiBhcyB0byBsYWJvcmluZyBjYXR0bGUsIGluIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gdGFrZSB0aGUgZ3JlYXRlc3QgcGxlYXN1cmUsIGFuZCB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgcHJvY3VyZSBhdCBhIGdyZWF0IHByaWNlLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGRvIG5vdCBlbXBsb3kKICAgICAgICAgICAgICAgICAgICBzdWNoIGFzIGFyZSBpbXBvcnRlZCwgYnV0IHRob3NlIHBvb3IgYW5kIGlsbC1zaGFwZWQgYW5pbWFscywgd2hpY2ggYmVsb25nIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY291bnRyeTsgdGhlc2UsIGhvd2V2ZXIsIHRoZXkgcmVuZGVyIGNhcGFibGUgb2YgdGhlIGdyZWF0ZXN0IGxhYm9yIGJ5CiAgICAgICAgICAgICAgICAgICAgZGFpbHkgZXhlcmNpc2UuIEluIGNhdmFscnkgYWN0aW9ucyB0aGV5IGZyZXF1ZW50bHkgbGVhcCBmcm9tIHRoZWlyIGhvcnNlcyBhbmQKICAgICAgICAgICAgICAgICAgICBmaWdodCBvbiBmb290OyBhbmQgdHJhaW4gdGhlaXIgaG9yc2VzIHRvIHN0YW5kIHN0aWxsIGluIHRoZSB2ZXJ5IHNwb3Qgb24gd2hpY2gKICAgICAgICAgICAgICAgICAgICB0aGV5IGxlYXZlIHRoZW0sIHRvIHdoaWNoIHRoZXkgcmV0cmVhdCB3aXRoIGdyZWF0IGFjdGl2aXR5IHdoZW4gdGhlcmUgaXMKICAgICAgICAgICAgICAgICAgICBvY2Nhc2lvbjsgbm9yLCBhY2NvcmRpbmcgdG8gdGhlaXIgcHJhY3RpY2UsIGlzIGFueSB0aGluZyByZWdhcmRlZCBhcyBtb3JlCiAgICAgICAgICAgICAgICAgICAgdW5zZWVtbHksIG9yIG1vcmUgdW5tYW5seSwgdGhhbiB0byB1c2UgaG91c2luZ3MuIEFjY29yZGluZ2x5LCB0aGV5IGhhdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgY291cmFnZSwgdGhvdWdoIHRoZXkgYmUgdGhlbXNlbHZlcyBidXQgZmV3LCB0byBhZHZhbmNlIGFnYWluc3QgYW55IG51bWJlcgogICAgICAgICAgICAgICAgICAgIHdoYXRldmVyIG9mIGhvcnNlIG1vdW50ZWQgd2l0aCBob3VzaW5ncy4gVGhleSBvbiBubyBhY2NvdW50IHBlcm1pdCB3aW5lIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgaW1wb3J0ZWQgdG8gdGhlbSwgYmVjYXVzZSB0aGV5IGNvbnNpZGVyIHRoYXQgbWVuIGRlZ2VuZXJhdGUgaW4gdGhlaXIgcG93ZXJzIG9mCiAgICAgICAgICAgICAgICAgICAgZW5kdXJpbmcgZmF0aWd1ZSwgYW5kIGFyZSByZW5kZXJlZCBlZmZlbWluYXRlIGJ5IHRoYXQgY29tbW9kaXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHRha2UgdGhlIGdyZWF0ZXN0IHBsZWFzdXJlLCBhbmQgd2hpY2ggdGhleQogICAgICAgICAgICAgICAgICAgIHByb2N1cmUgYXQgYSBncmVhdCBwcmljZSwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBkbyBub3QgZW1wbG95CiAgICAgICAgICAgICAgICAgICAgc3VjaCBhcyBhcmUgaW1wb3J0ZWQsIGJ1dCB0aG9zZSBwb29yIGFuZCBpbGwtc2hhcGVkIGFuaW1hbHMsIHdoaWNoIGJlbG9uZyB0bwogICAgICAgICAgICAgICAgICAgIHRoZWlyIGNvdW50cnk7IHRoZXNlLCBob3dldmVyLCB0aGV5IHJlbmRlciBjYXBhYmxlIG9mIHRoZSBncmVhdGVzdCBsYWJvciBieQogICAgICAgICAgICAgICAgICAgIGRhaWx5IGV4ZXJjaXNlLiBJbiBjYXZhbHJ5IGFjdGlvbnMgdGhleSBmcmVxdWVudGx5IGxlYXAgZnJvbSB0aGVpciBob3JzZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgZmlnaHQgb24gZm9vdDsgYW5kIHRyYWluIHRoZWlyIGhvcnNlcyB0byBzdGFuZCBzdGlsbCBpbiB0aGUgdmVyeSBzcG90IG9uIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhleSBsZWF2ZSB0aGVtLCB0byB3aGljaCB0aGV5IHJldHJlYXQgd2l0aCBncmVhdCBhY3Rpdml0eSB3aGVuIHRoZXJlIGlzCiAgICAgICAgICAgICAgICAgICAgb2NjYXNpb247IG5vciwgYWNjb3JkaW5nIHRvIHRoZWlyIHByYWN0aWNlLCBpcyBhbnkgdGhpbmcgcmVnYXJkZWQgYXMgbW9yZQogICAgICAgICAgICAgICAgICAgIHVuc2VlbWx5LCBvciBtb3JlIHVubWFubHksIHRoYW4gdG8gdXNlIGhvdXNpbmdzLiBBY2NvcmRpbmdseSwgdGhleSBoYXZlIHRoZQogICAgICAgICAgICAgICAgICAgIGNvdXJhZ2UsIHRob3VnaCB0aGV5IGJlIHRoZW1zZWx2ZXMgYnV0IGZldywgdG8gYWR2YW5jZSBhZ2FpbnN0IGFueSBudW1iZXIKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBvZiBob3JzZSBtb3VudGVkIHdpdGggaG91c2luZ3MuIFRoZXkgb24gbm8gYWNjb3VudCBwZXJtaXQgd2luZSB0byBiZQogICAgICAgICAgICAgICAgICAgIGltcG9ydGVkIHRvIHRoZW0sIGJlY2F1c2UgdGhleSBjb25zaWRlciB0aGF0IG1lbiBkZWdlbmVyYXRlIGluIHRoZWlyIHBvd2VycyBvZgogICAgICAgICAgICAgICAgICAgIGVuZHVyaW5nIGZhdGlndWUsIGFuZCBhcmUgcmVuZGVyZWQgZWZmZW1pbmF0ZSBieSB0aGF0IGNvbW1vZGl0eS4gPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhleSBlc3RlZW0gaXQgdGhlaXIgZ3JlYXRlc3QgcHJhaXNlIGFzIGEgbmF0aW9uLCB0aGF0IHRoZSBsYW5kcyBhYm91dCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRlcnJpdG9yaWVzIGxpZSB1bm9jY3VwaWVkIHRvIGEgdmVyeSBncmVhdCBleHRlbnQsIGluYXNtdWNoIGFzIFt0aGV5IHRoaW5rXSB0aGF0CiAgICAgICAgICAgICAgICAgICAgYnkgdGhpcyBjaXJjdW1zdGFuY2UgaXMgaW5kaWNhdGVkLCB0aGF0IGEgZ3JlYXQgbnVtYmVyIG9mIG5hdGlvbnMgY2FuIG5vdAogICAgICAgICAgICAgICAgICAgIHdpdGhzdGFuZCB0aGVpciBwb3dlcjsgYW5kIHRodXMgb24gb25lIHNpZGUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+IHRoZSBsYW5kcwogICAgICAgICAgICAgICAgICAgIGFyZSBzYWlkIHRvIGxpZSBkZXNvbGF0ZSBmb3IgYWJvdXQgc2l4IGh1bmRyZWQgbWlsZXMuIE9uIHRoZSBvdGhlciBzaWRlIHRoZXkKICAgICAgICAgICAgICAgICAgICBib3JkZXIgb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VWJpaTwvbmFtZT4sIHdob3NlIHN0YXRlIHdhcyBsYXJnZSBhbmQgZmxvdXJpc2hpbmcsCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJpbmcgdGhlIGNvbmRpdGlvbiBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCBhbmQgd2hvIGFyZQogICAgICAgICAgICAgICAgICAgIHNvbWV3aGF0IG1vcmUgcmVmaW5lZCB0aGFuIHRob3NlIG9mIHRoZSBzYW1lIHJhY2UgYW5kIHRoZSByZXN0IFtvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HZXJtYW5zXTwvbmFtZT4sIGFuZCB0aGF0IGJlY2F1c2UgdGhleSBib3JkZXIgb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYW5kIGFyZSBtdWNoIHJlc29ydGVkIHRvIGJ5IG1lcmNoYW50cywgYW5kIGFyZSBhY2N1c3RvbWVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIG1hbm5lcnMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sIGJ5IHJlYXNvbiBvZiB0aGVpciBhcHByb3hpbWl0eQogICAgICAgICAgICAgICAgICAgIHRvIHRoZW0uIFRob3VnaCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4sIGFmdGVyIG1ha2luZyB0aGUgYXR0ZW1wdCBmcmVxdWVudGx5IGFuZAogICAgICAgICAgICAgICAgICAgIGluIHNldmVyYWwgd2FycywgY291bGQgbm90IGV4cGVsIHRoaXMgbmF0aW9uIGZyb20gdGhlaXIgdGVycml0b3JpZXMsIG9uIGFjY291bnQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZXh0ZW50IGFuZCBwb3B1bGF0aW9uIG9mIHRoZWlyIHN0YXRlLCB5ZXQgdGhleSBtYWRlIHRoZW0gdHJpYnV0YXJpZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkIHRoZW0gbGVzcyBkaXN0aW5ndWlzaGVkIGFuZCBwb3dlcmZ1bCBbdGhhbiB0aGV5IGhhZCBldmVyIGJlZW5dLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiB0aGUgbGFuZHMKICAgICAgICAgICAgICAgICAgICBhcmUgc2FpZCB0byBsaWUgZGVzb2xhdGUgZm9yIGFib3V0IHNpeCBodW5kcmVkIG1pbGVzLiBPbiB0aGUgb3RoZXIgc2lkZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgYm9yZGVyIG9uIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlViaWk8L25hbWU+LCB3aG9zZSBzdGF0ZSB3YXMgbGFyZ2UgYW5kIGZsb3VyaXNoaW5nLAogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyaW5nIHRoZSBjb25kaXRpb24gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgYW5kIHdobyBhcmUKICAgICAgICAgICAgICAgICAgICBzb21ld2hhdCBtb3JlIHJlZmluZWQgdGhhbiB0aG9zZSBvZiB0aGUgc2FtZSByYWNlIGFuZCB0aGUgcmVzdCBbb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2VybWFuc108L25hbWU+LCBhbmQgdGhhdCBiZWNhdXNlIHRoZXkgYm9yZGVyIG9uIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGFuZCBhcmUgbXVjaCByZXNvcnRlZCB0byBieSBtZXJjaGFudHMsIGFuZCBhcmUgYWNjdXN0b21lZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBtYW5uZXJzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBieSByZWFzb24gb2YgdGhlaXIgYXBwcm94aW1pdHkKICAgICAgICAgICAgICAgICAgICB0byB0aGVtLiBUaG91Z2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+LCBhZnRlciBtYWtpbmcgdGhlIGF0dGVtcHQgZnJlcXVlbnRseSBhbmQKICAgICAgICAgICAgICAgICAgICBpbiBzZXZlcmFsIHdhcnMsIGNvdWxkIG5vdCBleHBlbCB0aGlzIG5hdGlvbiBmcm9tIHRoZWlyIHRlcnJpdG9yaWVzLCBvbiBhY2NvdW50CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGV4dGVudCBhbmQgcG9wdWxhdGlvbiBvZiB0aGVpciBzdGF0ZSwgeWV0IHRoZXkgbWFkZSB0aGVtIHRyaWJ1dGFyaWVzLCBhbmQKICAgICAgICAgICAgICAgICAgICByZW5kZXJlZCB0aGVtIGxlc3MgZGlzdGluZ3Vpc2hlZCBhbmQgcG93ZXJmdWwgW3RoYW4gdGhleSBoYWQgZXZlciBiZWVuXS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gdGhlIHNhbWUgY29uZGl0aW9uIHdlcmUgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VXNpcGV0ZXM8L25hbWU+IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UZW5jaHRoZXJpPC9uYW1lPiAod2hvbSB3ZSBoYXZlIG1lbnRpb25lZCBhYm92ZSksIHdobywgZm9yIG1hbnkgeWVhcnMsCiAgICAgICAgICAgICAgICAgICAgcmVzaXN0ZWQgdGhlIHBvd2VyIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiwgYnV0IGJlaW5nIGF0IGxhc3QgZHJpdmVuIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGVpciBwb3NzZXNzaW9ucywgYW5kIGhhdmluZyB3YW5kZXJlZCB0aHJvdWdoIG1hbnkgcGFydHMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMDg0IiByZWc9IiAgK0dlcm1hbnkgWzEwLjUsNTEuNV0gKG5hdGlvbiksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZXJtYW55IDwvbmFtZT4sIGNhbWUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lIDwvbmFtZT4sIHRvIGRpc3RyaWN0cyB3aGljaCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZW5hcGlpPC9uYW1lPiBpbmhhYml0ZWQsIGFuZAogICAgICAgICAgICAgICAgICAgIHdoZXJlIHRoZXkgaGFkIGxhbmRzLCBob3VzZXMsIGFuZCB2aWxsYWdlcyBvbiBlaXRoZXIgc2lkZSBvZiB0aGUgcml2ZXIuIFRoZQogICAgICAgICAgICAgICAgICAgIGxhdHRlciBwZW9wbGUsIGFsYXJtZWQgYnkgdGhlIGFycml2YWwgb2Ygc28gZ3JlYXQgYSBtdWx0aXR1ZGUsIHJlbW92ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRob3NlIGhvdXNlcyB3aGljaCB0aGV5IGhhZCBvbiB0aGUgb3RoZXIgc2lkZSBvZiB0aGUgcml2ZXIsIGFuZCBoYXZpbmcgcGxhY2VkCiAgICAgICAgICAgICAgICAgICAgZ3VhcmRzIG9uIHRoaXMgc2lkZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiwgcHJvY2VlZGVkIHRvIGhpbmRlcgogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gZnJvbSBjcm9zc2luZy4gVGhleSwgZmluZGluZyB0aGVtc2VsdmVzLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZXkgaGFkIHRyaWVkIGFsbCBtZWFucywgdW5hYmxlIGVpdGhlciB0byBmb3JjZSBhIHBhc3NhZ2Ugb24gYWNjb3VudCBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGRlZmljaWVuY3kgaW4gc2hpcHBpbmcsIG9yIGNyb3NzIGJ5IHN0ZWFsdGggb24gYWNjb3VudCBvZiB0aGUgZ3VhcmRzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVuYXBpaTwvbmFtZT4sIHByZXRlbmRlZCB0byByZXR1cm4gdG8gdGhlaXIgb3duIHNldHRsZW1lbnRzIGFuZAogICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0czsgYW5kLCBhZnRlciBoYXZpbmcgcHJvY2VlZGVkIHRocmVlIGRheXMnIG1hcmNoLCByZXR1cm5lZDsgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSBoYXZpbmcgcGVyZm9ybWVkIHRoZSB3aG9sZSBvZiB0aGlzIGpvdXJuZXkgaW4gb25lIG5pZ2h0LCBjdXQgb2ZmIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lbmFwaWk8L25hbWU+LCB3aG8gd2VyZSBpZ25vcmFudCBvZiwgYW5kIGRpZCBub3QgZXhwZWN0IFt0aGVpcgogICAgICAgICAgICAgICAgICAgIGFwcHJvYWNoLCBhbmRdIHdobywgaGF2aW5nIG1vcmVvdmVyIGJlZW4gaW5mb3JtZWQgb2YgdGhlIGRlcGFydHVyZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGJ5IHRoZWlyIHNjb3V0cywgaGFkLCB3aXRob3V0IGFwcHJlaGVuc2lvbiwKICAgICAgICAgICAgICAgICAgICByZXR1cm5lZCB0byB0aGVpciB2aWxsYWdlcyBiZXlvbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lIDwvbmFtZT4uIEhhdmluZyBzbGFpbiB0aGVzZSwKICAgICAgICAgICAgICAgICAgICBhbmQgc2VpemVkIHRoZWlyIHNoaXBzLCB0aGV5IGNyb3NzZWQgdGhlIHJpdmVyIGJlZm9yZSB0aGF0IHBhcnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVuYXBpaTwvbmFtZT4sIHdobyB3ZXJlIGF0IHBlYWNlIGluIHRoZWlyIHNldHRsZW1lbnRzIG92ZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgd2VyZSBhcHByaXplZCBvZiBbdGhlaXIgaW50ZW50aW9uXTsgYW5kIHNlaXppbmcgYWxsIHRoZWlyIGhvdXNlcywKICAgICAgICAgICAgICAgICAgICBtYWludGFpbmVkIHRoZW1zZWx2ZXMgdXBvbiB0aGVpciBwcm92aXNpb25zIGR1cmluZyB0aGUgcmVzdCBvZiB0aGUgd2ludGVyLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlVzaXBldGVzPC9uYW1lPiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGVuY2h0aGVyaTwvbmFtZT4gKHdob20gd2UgaGF2ZSBtZW50aW9uZWQgYWJvdmUpLCB3aG8sIGZvciBtYW55IHllYXJzLAogICAgICAgICAgICAgICAgICAgIHJlc2lzdGVkIHRoZSBwb3dlciBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4sIGJ1dCBiZWluZyBhdCBsYXN0IGRyaXZlbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcG9zc2Vzc2lvbnMsIGFuZCBoYXZpbmcgd2FuZGVyZWQgdGhyb3VnaCBtYW55IHBhcnRzIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDA4NCIgcmVnPSIgICtHZXJtYW55IFsxMC41LDUxLjVdIChuYXRpb24pLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VybWFueSA8L25hbWU+LCBjYW1lIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LCB0byBkaXN0cmljdHMgd2hpY2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVuYXBpaTwvbmFtZT4gaW5oYWJpdGVkLCBhbmQKICAgICAgICAgICAgICAgICAgICB3aGVyZSB0aGV5IGhhZCBsYW5kcywgaG91c2VzLCBhbmQgdmlsbGFnZXMgb24gZWl0aGVyIHNpZGUgb2YgdGhlIHJpdmVyLiBUaGUKICAgICAgICAgICAgICAgICAgICBsYXR0ZXIgcGVvcGxlLCBhbGFybWVkIGJ5IHRoZSBhcnJpdmFsIG9mIHNvIGdyZWF0IGEgbXVsdGl0dWRlLCByZW1vdmVkIGZyb20KICAgICAgICAgICAgICAgICAgICB0aG9zZSBob3VzZXMgd2hpY2ggdGhleSBoYWQgb24gdGhlIG90aGVyIHNpZGUgb2YgdGhlIHJpdmVyLCBhbmQgaGF2aW5nIHBsYWNlZAogICAgICAgICAgICAgICAgICAgIGd1YXJkcyBvbiB0aGlzIHNpZGUgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lIDwvbmFtZT4sIHByb2NlZWRlZCB0byBoaW5kZXIKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGZyb20gY3Jvc3NpbmcuIFRoZXksIGZpbmRpbmcgdGhlbXNlbHZlcywKICAgICAgICAgICAgICAgICAgICBhZnRlciB0aGV5IGhhZCB0cmllZCBhbGwgbWVhbnMsIHVuYWJsZSBlaXRoZXIgdG8gZm9yY2UgYSBwYXNzYWdlIG9uIGFjY291bnQgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBkZWZpY2llbmN5IGluIHNoaXBwaW5nLCBvciBjcm9zcyBieSBzdGVhbHRoIG9uIGFjY291bnQgb2YgdGhlIGd1YXJkcyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lbmFwaWk8L25hbWU+LCBwcmV0ZW5kZWQgdG8gcmV0dXJuIHRvIHRoZWlyIG93biBzZXR0bGVtZW50cyBhbmQKICAgICAgICAgICAgICAgICAgICBkaXN0cmljdHM7IGFuZCwgYWZ0ZXIgaGF2aW5nIHByb2NlZWRlZCB0aHJlZSBkYXlzJyBtYXJjaCwgcmV0dXJuZWQ7IGFuZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNhdmFscnkgaGF2aW5nIHBlcmZvcm1lZCB0aGUgd2hvbGUgb2YgdGhpcyBqb3VybmV5IGluIG9uZSBuaWdodCwgY3V0IG9mZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZW5hcGlpPC9uYW1lPiwgd2hvIHdlcmUgaWdub3JhbnQgb2YsIGFuZCBkaWQgbm90IGV4cGVjdCBbdGhlaXIKICAgICAgICAgICAgICAgICAgICBhcHByb2FjaCwgYW5kXSB3aG8sIGhhdmluZyBtb3Jlb3ZlciBiZWVuIGluZm9ybWVkIG9mIHRoZSBkZXBhcnR1cmUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBieSB0aGVpciBzY291dHMsIGhhZCwgd2l0aG91dCBhcHByZWhlbnNpb24sCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQgdG8gdGhlaXIgdmlsbGFnZXMgYmV5b25kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LiBIYXZpbmcgc2xhaW4gdGhlc2UsCiAgICAgICAgICAgICAgICAgICAgYW5kIHNlaXplZCB0aGVpciBzaGlwcywgdGhleSBjcm9zc2VkIHRoZSByaXZlciBiZWZvcmUgdGhhdCBwYXJ0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lbmFwaWk8L25hbWU+LCB3aG8gd2VyZSBhdCBwZWFjZSBpbiB0aGVpciBzZXR0bGVtZW50cyBvdmVyIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHdlcmUgYXBwcml6ZWQgb2YgW3RoZWlyIGludGVudGlvbl07IGFuZCBzZWl6aW5nIGFsbCB0aGVpciBob3VzZXMsCiAgICAgICAgICAgICAgICAgICAgbWFpbnRhaW5lZCB0aGVtc2VsdmVzIHVwb24gdGhlaXIgcHJvdmlzaW9ucyBkdXJpbmcgdGhlIHJlc3Qgb2YgdGhlIHdpbnRlci4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCB3aGVuIGluZm9ybWVkIG9mIHRoZXNlIG1hdHRlcnMsIGZlYXJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgZmlja2xlIGRpc3Bvc2l0aW9uIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCB3aG8gYXJlIGVhc2lseQogICAgICAgICAgICAgICAgICAgIHByb21wdGVkIHRvIHRha2UgdXAgcmVzb2x1dGlvbnMsIGFuZCBtdWNoIGFkZGljdGVkIHRvIGNoYW5nZSwgY29uc2lkZXJlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgbm90aGluZyB3YXMgdG8gYmUgaW50cnVzdGVkIHRvIHRoZW07IGZvciBpdCBpcyB0aGUgY3VzdG9tIG9mIHRoYXQgcGVvcGxlIHRvCiAgICAgICAgICAgICAgICAgICAgY29tcGVsIHRyYXZlbGVycyB0byBzdG9wLCBldmVuIGFnYWluc3QgdGhlaXIgaW5jbGluYXRpb24sIGFuZCBpbnF1aXJlIHdoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIG1heSBoYXZlIGhlYXJkLCBvciBtYXkga25vdywgcmVzcGVjdGluZyBhbnkgbWF0dGVyOyBhbmQgaW4gdG93bnMgdGhlIGNvbW1vbgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSB0aHJvbmcgYXJvdW5kIG1lcmNoYW50cyBhbmQgZm9yY2UgdGhlbSB0byBzdGF0ZSBmcm9tIHdoYXQgY291bnRyaWVzIHRoZXkKICAgICAgICAgICAgICAgICAgICBjb21lLCBhbmQgd2hhdCBhZmZhaXJzIHRoZXkga25vdyBvZiB0aGVyZS4gVGhleSBvZnRlbiBlbmdhZ2UgaW4gcmVzb2x1dGlvbnMKICAgICAgICAgICAgICAgICAgICBjb25jZXJuaW5nIHRoZSBtb3N0IGltcG9ydGFudCBtYXR0ZXJzLCBpbmR1Y2VkIGJ5IHRoZXNlIHJlcG9ydHMgYW5kIHN0b3JpZXMKICAgICAgICAgICAgICAgICAgICBhbG9uZTsgb2Ygd2hpY2ggdGhleSBtdXN0IG5lY2Vzc2FyaWx5IGluc3RhbnRseSByZXBlbnQsIHNpbmNlIHRoZXkgeWllbGQgdG8gbWVyZQogICAgICAgICAgICAgICAgICAgIHVuYXV0aG9yaXplZCByZXBvcnRzOyBhbmQgc2luY2UgbW9zdCBwZW9wbGUgZ2l2ZSB0byB0aGVpciBxdWVzdGlvbnMgYW5zd2VycwogICAgICAgICAgICAgICAgICAgIGZyYW1lZCBhZ3JlZWFibHkgdG8gdGhlaXIgd2lzaGVzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHdoZW4gaW5mb3JtZWQgb2YgdGhlc2UgbWF0dGVycywgZmVhcmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBmaWNrbGUgZGlzcG9zaXRpb24gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sIHdobyBhcmUgZWFzaWx5CiAgICAgICAgICAgICAgICAgICAgcHJvbXB0ZWQgdG8gdGFrZSB1cCByZXNvbHV0aW9ucywgYW5kIG11Y2ggYWRkaWN0ZWQgdG8gY2hhbmdlLCBjb25zaWRlcmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIHdhcyB0byBiZSBpbnRydXN0ZWQgdG8gdGhlbTsgZm9yIGl0IGlzIHRoZSBjdXN0b20gb2YgdGhhdCBwZW9wbGUgdG8KICAgICAgICAgICAgICAgICAgICBjb21wZWwgdHJhdmVsZXJzIHRvIHN0b3AsIGV2ZW4gYWdhaW5zdCB0aGVpciBpbmNsaW5hdGlvbiwgYW5kIGlucXVpcmUgd2hhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgbWF5IGhhdmUgaGVhcmQsIG9yIG1heSBrbm93LCByZXNwZWN0aW5nIGFueSBtYXR0ZXI7IGFuZCBpbiB0b3ducyB0aGUgY29tbW9uCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHRocm9uZyBhcm91bmQgbWVyY2hhbnRzIGFuZCBmb3JjZSB0aGVtIHRvIHN0YXRlIGZyb20gd2hhdCBjb3VudHJpZXMgdGhleQogICAgICAgICAgICAgICAgICAgIGNvbWUsIGFuZCB3aGF0IGFmZmFpcnMgdGhleSBrbm93IG9mIHRoZXJlLiBUaGV5IG9mdGVuIGVuZ2FnZSBpbiByZXNvbHV0aW9ucwogICAgICAgICAgICAgICAgICAgIGNvbmNlcm5pbmcgdGhlIG1vc3QgaW1wb3J0YW50IG1hdHRlcnMsIGluZHVjZWQgYnkgdGhlc2UgcmVwb3J0cyBhbmQgc3RvcmllcwogICAgICAgICAgICAgICAgICAgIGFsb25lOyBvZiB3aGljaCB0aGV5IG11c3QgbmVjZXNzYXJpbHkgaW5zdGFudGx5IHJlcGVudCwgc2luY2UgdGhleSB5aWVsZCB0byBtZXJlCiAgICAgICAgICAgICAgICAgICAgdW5hdXRob3JpemVkIHJlcG9ydHM7IGFuZCBzaW5jZSBtb3N0IHBlb3BsZSBnaXZlIHRvIHRoZWlyIHF1ZXN0aW9ucyBhbnN3ZXJzCiAgICAgICAgICAgICAgICAgICAgZnJhbWVkIGFncmVlYWJseSB0byB0aGVpciB3aXNoZXMuIDwvdHJhbnNsYXRpb24+"
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBiZWluZyBhd2FyZSBvZiB0aGVpciBjdXN0b20sIGluIG9yZGVyIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBtaWdodCBub3QgZW5jb3VudGVyIGEgbW9yZSBmb3JtaWRhYmxlIHdhciwgc2V0cyBmb3J3YXJkIHRvIHRoZSBhcm15IGVhcmxpZXIgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgeWVhciB0aGFuIGhlIHdhcyBhY2N1c3RvbWVkIHRvIGRvLiBXaGVuIGhlIGhhZCBhcnJpdmVkIHRoZXJlLCBoZSBkaXNjb3ZlcmVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aG9zZSB0aGluZ3MsIHdoaWNoIGhlIGhhZCBzdXNwZWN0ZWQgd291bGQgb2NjdXIsIGhhZCB0YWtlbiBwbGFjZTsgdGhhdAogICAgICAgICAgICAgICAgICAgIGVtYmFzc2llcyBoYWQgYmVlbiBzZW50IHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gYnkgc29tZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZXMsIGFuZCB0aGF0IHRoZXkgaGFkIGJlZW4gZW50cmVhdGVkIHRvIGxlYXZlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LCBhbmQgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBwcm9taXNlZCB0aGF0IGFsbCB0aGluZ3Mgd2hpY2ggdGhleSBkZXNpcmVkIHNob3VsZCBiZSBwcm92aWRlZCBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPi4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGx1cmVkPC9uYW1lPiBieSB0aGlzIGhvcGUsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gd2VyZSB0aGVuIG1ha2luZyBleGN1cnNpb25zIHRvIGdyZWF0ZXIKICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZXMsIGFuZCBoYWQgYWR2YW5jZWQgdG8gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVidXJvbmVzPC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db25kcnVzaTwvbmFtZT4sIHdobyBhcmUgdW5kZXIgdGhlIHByb3RlY3Rpb24gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4uIEFmdGVyIHN1bW1vbmluZyB0aGUgY2hpZWZzIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRob3VnaHQgcHJvcGVyIHRvIHByZXRlbmQgaWdub3JhbmNlIG9mIHRoZSB0aGluZ3MKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBoYWQgZGlzY292ZXJlZDsgYW5kIGhhdmluZyBjb25jaWxpYXRlZCBhbmQgY29uZmlybWVkIHRoZWlyIG1pbmRzLCBhbmQKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIHNvbWUgY2F2YWxyeSB0byBiZSByYWlzZWQsIHJlc29sdmVkIHRvIG1ha2Ugd2FyIGFnYWluc3QgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBiZWluZyBhd2FyZSBvZiB0aGVpciBjdXN0b20sIGluIG9yZGVyIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBtaWdodCBub3QgZW5jb3VudGVyIGEgbW9yZSBmb3JtaWRhYmxlIHdhciwgc2V0cyBmb3J3YXJkIHRvIHRoZSBhcm15IGVhcmxpZXIgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgeWVhciB0aGFuIGhlIHdhcyBhY2N1c3RvbWVkIHRvIGRvLiBXaGVuIGhlIGhhZCBhcnJpdmVkIHRoZXJlLCBoZSBkaXNjb3ZlcmVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aG9zZSB0aGluZ3MsIHdoaWNoIGhlIGhhZCBzdXNwZWN0ZWQgd291bGQgb2NjdXIsIGhhZCB0YWtlbiBwbGFjZTsgdGhhdAogICAgICAgICAgICAgICAgICAgIGVtYmFzc2llcyBoYWQgYmVlbiBzZW50IHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gYnkgc29tZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZXMsIGFuZCB0aGF0IHRoZXkgaGFkIGJlZW4gZW50cmVhdGVkIHRvIGxlYXZlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LCBhbmQgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBwcm9taXNlZCB0aGF0IGFsbCB0aGluZ3Mgd2hpY2ggdGhleSBkZXNpcmVkIHNob3VsZCBiZSBwcm92aWRlZCBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPi4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGx1cmVkPC9uYW1lPiBieSB0aGlzIGhvcGUsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gd2VyZSB0aGVuIG1ha2luZyBleGN1cnNpb25zIHRvIGdyZWF0ZXIKICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZXMsIGFuZCBoYWQgYWR2YW5jZWQgdG8gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVidXJvbmVzPC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db25kcnVzaTwvbmFtZT4sIHdobyBhcmUgdW5kZXIgdGhlIHByb3RlY3Rpb24gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4uIEFmdGVyIHN1bW1vbmluZyB0aGUgY2hpZWZzIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRob3VnaHQgcHJvcGVyIHRvIHByZXRlbmQgaWdub3JhbmNlIG9mIHRoZSB0aGluZ3MKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBoYWQgZGlzY292ZXJlZDsgYW5kIGhhdmluZyBjb25jaWxpYXRlZCBhbmQgY29uZmlybWVkIHRoZWlyIG1pbmRzLCBhbmQKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIHNvbWUgY2F2YWxyeSB0byBiZSByYWlzZWQsIHJlc29sdmVkIHRvIG1ha2Ugd2FyIGFnYWluc3QgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['4.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGF2aW5nIHByb3ZpZGVkIGNvcm4gYW5kIHNlbGVjdGVkIGhpcyBjYXZhbHJ5LCBoZSBiZWdhbiB0byBkaXJlY3QgaGlzIG1hcmNoCiAgICAgICAgICAgICAgICAgICAgdG93YXJkIHRob3NlIHBhcnRzIGluIHdoaWNoIGhlIGhlYXJkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB3ZXJlLiBXaGVuIGhlIHdhcyBkaXN0YW50IGZyb20gdGhlbSBvbmx5IGEgZmV3IGRheXMnIG1hcmNoLCBlbWJhc3NhZG9ycyBjYW1lIHRvCiAgICAgICAgICAgICAgICAgICAgaGltIGZyb20gdGhlaXIgc3RhdGUsIHdob3NlIHNwZWVjaCB3YXMgYXMgZm9sbG93czogIlRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBuZWl0aGVyIG1ha2Ugd2FyIHVwb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUgZmlyc3QsIG5vciBkbyB0aGV5IGRlY2xpbmUsIGlmIHRoZXkgYXJlIHByb3Zva2VkLCB0byBlbmdhZ2Ugd2l0aCB0aGVtIGluCiAgICAgICAgICAgICAgICAgICAgYXJtczsgZm9yIHRoYXQgdGhpcyB3YXMgdGhlIGN1c3RvbSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgaGFuZGVkIGRvd24gdG8gdGhlbSBmcm9tIHRoZWlyIGZvcmVmYXRoZXJzLCAtdG8gcmVzaXN0IHdoYXRzb2V2ZXIgcGVvcGxlIG1ha2UKICAgICAgICAgICAgICAgICAgICB3YXIgdXBvbiB0aGVtIGFuZCBub3QgdG8gYXZlcnQgaXQgYnkgZW50cmVhdHk7IHRoaXMsIGhvd2V2ZXIsIHRoZXkKICAgICAgICAgICAgICAgICAgICBjb25mZXNzZWQsLXRoYXQgdGhleSBoYWQgY29tZSBoaXRoZXIgcmVsdWN0YW50bHksIGhhdmluZyBiZWVuIGV4cGVsbGVkIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGVpciBjb3VudHJ5LiBJZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gd2VyZSBkaXNwb3NlZCB0byBhY2NlcHQKICAgICAgICAgICAgICAgICAgICB0aGVpciBmcmllbmRzaGlwLCB0aGV5IG1pZ2h0IGJlIHNlcnZpY2VhYmxlIGFsbGllcyB0byB0aGVtOyBhbmQgbGV0IHRoZW0gZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgYXNzaWduIHRoZW0gbGFuZHMsIG9yIHBlcm1pdCB0aGVtIHRvIHJldGFpbiB0aG9zZSB3aGljaCB0aGV5IGhhZCBhY3F1aXJlZCBieQogICAgICAgICAgICAgICAgICAgIHRoZWlyIGFybXM7IHRoYXQgdGhleSBhcmUgaW5mZXJpb3IgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+IGFsb25lLCB0byB3aG9tIG5vdAogICAgICAgICAgICAgICAgICAgIGV2ZW4gdGhlIGltbW9ydGFsIGdvZHMgY2FuIHNob3cgdGhlbXNlbHZlcyBlcXVhbDsgdGhhdCB0aGVyZSB3YXMgbm9uZSBhdCBhbGwKICAgICAgICAgICAgICAgICAgICBiZXNpZGVzIG9uIGVhcnRoIHdob20gdGhleSBjb3VsZCBub3QgY29ucXVlci4iIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHdlcmUuIFdoZW4gaGUgd2FzIGRpc3RhbnQgZnJvbSB0aGVtIG9ubHkgYSBmZXcgZGF5cycgbWFyY2gsIGVtYmFzc2Fkb3JzIGNhbWUgdG8KICAgICAgICAgICAgICAgICAgICBoaW0gZnJvbSB0aGVpciBzdGF0ZSwgd2hvc2Ugc3BlZWNoIHdhcyBhcyBmb2xsb3dzOiAiVGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IG5laXRoZXIgbWFrZSB3YXIgdXBvbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBmaXJzdCwgbm9yIGRvIHRoZXkgZGVjbGluZSwgaWYgdGhleSBhcmUgcHJvdm9rZWQsIHRvIGVuZ2FnZSB3aXRoIHRoZW0gaW4KICAgICAgICAgICAgICAgICAgICBhcm1zOyBmb3IgdGhhdCB0aGlzIHdhcyB0aGUgY3VzdG9tIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBoYW5kZWQgZG93biB0byB0aGVtIGZyb20gdGhlaXIgZm9yZWZhdGhlcnMsIC10byByZXNpc3Qgd2hhdHNvZXZlciBwZW9wbGUgbWFrZQogICAgICAgICAgICAgICAgICAgIHdhciB1cG9uIHRoZW0gYW5kIG5vdCB0byBhdmVydCBpdCBieSBlbnRyZWF0eTsgdGhpcywgaG93ZXZlciwgdGhleQogICAgICAgICAgICAgICAgICAgIGNvbmZlc3NlZCwtdGhhdCB0aGV5IGhhZCBjb21lIGhpdGhlciByZWx1Y3RhbnRseSwgaGF2aW5nIGJlZW4gZXhwZWxsZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZWlyIGNvdW50cnkuIElmIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiB3ZXJlIGRpc3Bvc2VkIHRvIGFjY2VwdAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGZyaWVuZHNoaXAsIHRoZXkgbWlnaHQgYmUgc2VydmljZWFibGUgYWxsaWVzIHRvIHRoZW07IGFuZCBsZXQgdGhlbSBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBhc3NpZ24gdGhlbSBsYW5kcywgb3IgcGVybWl0IHRoZW0gdG8gcmV0YWluIHRob3NlIHdoaWNoIHRoZXkgaGFkIGFjcXVpcmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYXJtczsgdGhhdCB0aGV5IGFyZSBpbmZlcmlvciB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4gYWxvbmUsIHRvIHdob20gbm90CiAgICAgICAgICAgICAgICAgICAgZXZlbiB0aGUgaW1tb3J0YWwgZ29kcyBjYW4gc2hvdyB0aGVtc2VsdmVzIGVxdWFsOyB0aGF0IHRoZXJlIHdhcyBub25lIGF0IGFsbAogICAgICAgICAgICAgICAgICAgIGJlc2lkZXMgb24gZWFydGggd2hvbSB0aGV5IGNvdWxkIG5vdCBjb25xdWVyLiIgPC90cmFuc2xhdGlvbj4="
translation['4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VG8gdGhlc2UgcmVtYXJrcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gcmVwbGllZCBpbiBzdWNoIHRlcm1zIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCBwcm9wZXI7IGJ1dCB0aGUgY29uY2x1c2lvbiBvZiBoaXMgc3BlZWNoIHdhcywgIlRoYXQgaGUgY291bGQgbWFrZSBubwogICAgICAgICAgICAgICAgICAgIGFsbGlhbmNlIHdpdGggdGhlbSwgaWYgdGhleSBjb250aW51ZWQgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+OyB0aGF0IGl0IHdhcyBub3QgcHJvYmFibGUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd2hvIHdlcmUgbm90IGFibGUgdG8gZGVmZW5kIHRoZWlyIG93biB0ZXJyaXRvcmllcywgc2hvdWxkIGdldAogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb24gb2YgdGhvc2Ugb2Ygb3RoZXJzLCBub3Igd2VyZSB0aGVyZSBhbnkgbGFuZHMgbHlpbmcgd2FzdGUgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB3aGljaCBjb3VsZCBiZSBnaXZlbiBhd2F5LCBlc3BlY2lhbGx5IHRvIHNvIGdyZWF0IGEgbnVtYmVyIG9mCiAgICAgICAgICAgICAgICAgICAgbWVuLCB3aXRob3V0IGRvaW5nIHdyb25nIFt0byBvdGhlcnNdOyBidXQgdGhleSBtaWdodCwgaWYgdGhleSB3ZXJlIGRlc2lyb3VzLAogICAgICAgICAgICAgICAgICAgIHNldHRsZSBpbiB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VWJpaTwvbmFtZT47IHdob3NlIGVtYmFzc2Fkb3JzIHdlcmUgdGhlbgogICAgICAgICAgICAgICAgICAgIHdpdGggaGltLCBhbmQgd2VyZSBjb21wbGFpbmluZyBvZiB0aGUgYWdncmVzc2lvbnMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICByZXF1ZXN0aW5nIGFzc2lzdGFuY2UgZnJvbSBoaW07IGFuZCB0aGF0IGhlIHdvdWxkIG9idGFpbiB0aGlzIHJlcXVlc3QgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZW0uIiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gcmVwbGllZCBpbiBzdWNoIHRlcm1zIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCBwcm9wZXI7IGJ1dCB0aGUgY29uY2x1c2lvbiBvZiBoaXMgc3BlZWNoIHdhcywgIlRoYXQgaGUgY291bGQgbWFrZSBubwogICAgICAgICAgICAgICAgICAgIGFsbGlhbmNlIHdpdGggdGhlbSwgaWYgdGhleSBjb250aW51ZWQgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+OyB0aGF0IGl0IHdhcyBub3QgcHJvYmFibGUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd2hvIHdlcmUgbm90IGFibGUgdG8gZGVmZW5kIHRoZWlyIG93biB0ZXJyaXRvcmllcywgc2hvdWxkIGdldAogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb24gb2YgdGhvc2Ugb2Ygb3RoZXJzLCBub3Igd2VyZSB0aGVyZSBhbnkgbGFuZHMgbHlpbmcgd2FzdGUgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB3aGljaCBjb3VsZCBiZSBnaXZlbiBhd2F5LCBlc3BlY2lhbGx5IHRvIHNvIGdyZWF0IGEgbnVtYmVyIG9mCiAgICAgICAgICAgICAgICAgICAgbWVuLCB3aXRob3V0IGRvaW5nIHdyb25nIFt0byBvdGhlcnNdOyBidXQgdGhleSBtaWdodCwgaWYgdGhleSB3ZXJlIGRlc2lyb3VzLAogICAgICAgICAgICAgICAgICAgIHNldHRsZSBpbiB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VWJpaTwvbmFtZT47IHdob3NlIGVtYmFzc2Fkb3JzIHdlcmUgdGhlbgogICAgICAgICAgICAgICAgICAgIHdpdGggaGltLCBhbmQgd2VyZSBjb21wbGFpbmluZyBvZiB0aGUgYWdncmVzc2lvbnMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICByZXF1ZXN0aW5nIGFzc2lzdGFuY2UgZnJvbSBoaW07IGFuZCB0aGF0IGhlIHdvdWxkIG9idGFpbiB0aGlzIHJlcXVlc3QgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZW0uIiA8L3RyYW5zbGF0aW9uPg=="
translation['4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIGVtYmFzc2Fkb3JzIHNhaWQgdGhhdCB0aGV5IHdvdWxkIHJlcG9ydCB0aGVzZSB0aGluZ3MgdG8gdGhlaXIgY291bnRyeSBtZW47CiAgICAgICAgICAgICAgICAgICAgYW5kLCBhZnRlciBoYXZpbmcgZGVsaWJlcmF0ZWQgb24gdGhlIG1hdHRlciwgd291bGQgcmV0dXJuIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhZnRlciB0aGUgdGhpcmQgZGF5LCB0aGV5IGJlZ2dlZCB0aGF0IGhlIHdvdWxkIG5vdCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBtZWFuIHRpbWUgYWR2YW5jZSBoaXMgY2FtcCBuZWFyZXIgdG8gdGhlbS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHNhaWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGNvdWxkIG5vdCBncmFudCB0aGVtIGV2ZW4gdGhhdDsgZm9yIGhlIGhhZCBsZWFybmVkIHRoYXQgdGhleSBoYWQgc2VudCBhCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgcGFydCBvZiB0aGVpciBjYXZhbHJ5IG92ZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjg2NSIgcmVnPSIgICtNZXVzZSBbNSw1MS44MzNdIChyaXZlciksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5NZXVzZSA8L25hbWU+IHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYml2YXJpdGk8L25hbWU+LCBzb21lIGRheXMgYmVmb3JlLCBmb3IgdGhlIHB1cnBvc2Ugb2YgcGx1bmRlcmluZyBhbmQKICAgICAgICAgICAgICAgICAgICBwcm9jdXJpbmcgZm9yYWdlLiBIZSBzdXBwb3NlZCB0aGF0IHRoZXkgd2VyZSB0aGVuIHdhaXRpbmcgZm9yIHRoZXNlIGhvcnNlLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBkZWxheSB3YXMgY2F1c2VkIG9uIHRoaXMgYWNjb3VudC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhZnRlciB0aGUgdGhpcmQgZGF5LCB0aGV5IGJlZ2dlZCB0aGF0IGhlIHdvdWxkIG5vdCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBtZWFuIHRpbWUgYWR2YW5jZSBoaXMgY2FtcCBuZWFyZXIgdG8gdGhlbS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHNhaWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGNvdWxkIG5vdCBncmFudCB0aGVtIGV2ZW4gdGhhdDsgZm9yIGhlIGhhZCBsZWFybmVkIHRoYXQgdGhleSBoYWQgc2VudCBhCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgcGFydCBvZiB0aGVpciBjYXZhbHJ5IG92ZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjg2NSIgcmVnPSIgICtNZXVzZSBbNSw1MS44MzNdIChyaXZlciksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5NZXVzZSA8L25hbWU+IHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYml2YXJpdGk8L25hbWU+LCBzb21lIGRheXMgYmVmb3JlLCBmb3IgdGhlIHB1cnBvc2Ugb2YgcGx1bmRlcmluZyBhbmQKICAgICAgICAgICAgICAgICAgICBwcm9jdXJpbmcgZm9yYWdlLiBIZSBzdXBwb3NlZCB0aGF0IHRoZXkgd2VyZSB0aGVuIHdhaXRpbmcgZm9yIHRoZXNlIGhvcnNlLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBkZWxheSB3YXMgY2F1c2VkIG9uIHRoaXMgYWNjb3VudC4gPC90cmFuc2xhdGlvbj4="
translation['4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY4NjUiIHJlZz0iICArTWV1c2UgWzUsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TWV1c2UgPC9uYW1lPiByaXNlcyBmcm9tIG1vdW50CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGUgVm9zZ2U8L25hbWU+LCB3aGljaCBpcyBpbiB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM0MyIgcmVnPSIgICtMYW5ncmVzIFs1LjMzMyw0Ny44ODNdIChpbmhhYml0ZWQgcGxhY2UpLCBIYXV0ZS1NYXJuZSwgQ2hhbXBhZ25lLUFyZGVubmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkxpbmdvbmVzIDwvbmFtZT47IGFuZCwgaGF2aW5nIHJlY2VpdmVkIGEgYnJhbmNoIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHdoaWNoIGlzIGNhbGxlZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTMxNTYyIiByZWc9IiAgK1dhYWwgWzUsNTEuODE2XSAocml2ZXIpLCBOZXRoZXJsYW5kcywgRXVyb3BlICIgdHlwZT0icGxhY2UiPldhYWwgPC9uYW1lPiwgZm9ybXMKICAgICAgICAgICAgICAgICAgICB0aGUgaXNsYW5kIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJhdGF2aTwvbmFtZT4sIGFuZCBub3QgbW9yZSB0aGFuIGVpZ2h0eSBtaWxlcyBmcm9tIGl0IGl0CiAgICAgICAgICAgICAgICAgICAgZmFsbHMgaW50byB0aGUgb2NlYW4uIEJ1dCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiB0YWtlcyBpdHMgc291cmNlIGFtb25nCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGVwb250aWk8L25hbWU+LCB3aG8gaW5oYWJpdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA3NzQ2IiByZWc9IkFscHMgKG1vdW50YWluIHN5c3RlbSksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkFscHMgPC9uYW1lPiwgYW5kIGlzIGNhcnJpZWQgd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgcmFwaWQgY3VycmVudCBmb3IgYSBsb25nIGRpc3RhbmNlIHRocm91Z2ggdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNhcnVuYXRlczwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVkaW9tYXRyaWNpPC9uYW1lPiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UcmlidWNpPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4sIGFuZCB3aGVuIGl0IGFwcHJvYWNoZXMgdGhlIG9jZWFuLCBkaXZpZGVzIGludG8gc2V2ZXJhbAogICAgICAgICAgICAgICAgICAgIGJyYW5jaGVzOyBhbmQsIGhhdmluZyBmb3JtZWQgbWFueSBhbmQgZXh0ZW5zaXZlIGlzbGFuZHMsIGEgZ3JlYXQgcGFydCBvZiB3aGljaAogICAgICAgICAgICAgICAgICAgIGFyZSBpbmhhYml0ZWQgYnkgc2F2YWdlIGFuZCBiYXJiYXJvdXMgbmF0aW9ucyAob2Ygd2hvbSB0aGVyZSBhcmUgc29tZSB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZWQgdG8gbGl2ZSBvbiBmaXNoIGFuZCB0aGUgZWdncyBvZiBzZWEtZm93bCksIGZsb3dzIGludG8gdGhlIG9jZWFuIGJ5CiAgICAgICAgICAgICAgICAgICAgc2V2ZXJhbCBtb3V0aHMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY4NjUiIHJlZz0iICArTWV1c2UgWzUsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TWV1c2UgPC9uYW1lPiByaXNlcyBmcm9tIG1vdW50CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGUgVm9zZ2U8L25hbWU+LCB3aGljaCBpcyBpbiB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM0MyIgcmVnPSIgICtMYW5ncmVzIFs1LjMzMyw0Ny44ODNdIChpbmhhYml0ZWQgcGxhY2UpLCBIYXV0ZS1NYXJuZSwgQ2hhbXBhZ25lLUFyZGVubmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkxpbmdvbmVzIDwvbmFtZT47IGFuZCwgaGF2aW5nIHJlY2VpdmVkIGEgYnJhbmNoIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHdoaWNoIGlzIGNhbGxlZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTMxNTYyIiByZWc9IiAgK1dhYWwgWzUsNTEuODE2XSAocml2ZXIpLCBOZXRoZXJsYW5kcywgRXVyb3BlICIgdHlwZT0icGxhY2UiPldhYWwgPC9uYW1lPiwgZm9ybXMKICAgICAgICAgICAgICAgICAgICB0aGUgaXNsYW5kIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJhdGF2aTwvbmFtZT4sIGFuZCBub3QgbW9yZSB0aGFuIGVpZ2h0eSBtaWxlcyBmcm9tIGl0IGl0CiAgICAgICAgICAgICAgICAgICAgZmFsbHMgaW50byB0aGUgb2NlYW4uIEJ1dCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiB0YWtlcyBpdHMgc291cmNlIGFtb25nCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGVwb250aWk8L25hbWU+LCB3aG8gaW5oYWJpdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA3NzQ2IiByZWc9IkFscHMgKG1vdW50YWluIHN5c3RlbSksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkFscHMgPC9uYW1lPiwgYW5kIGlzIGNhcnJpZWQgd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgcmFwaWQgY3VycmVudCBmb3IgYSBsb25nIGRpc3RhbmNlIHRocm91Z2ggdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNhcnVuYXRlczwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VxdWFuaTwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVkaW9tYXRyaWNpPC9uYW1lPiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UcmlidWNpPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4sIGFuZCB3aGVuIGl0IGFwcHJvYWNoZXMgdGhlIG9jZWFuLCBkaXZpZGVzIGludG8gc2V2ZXJhbAogICAgICAgICAgICAgICAgICAgIGJyYW5jaGVzOyBhbmQsIGhhdmluZyBmb3JtZWQgbWFueSBhbmQgZXh0ZW5zaXZlIGlzbGFuZHMsIGEgZ3JlYXQgcGFydCBvZiB3aGljaAogICAgICAgICAgICAgICAgICAgIGFyZSBpbmhhYml0ZWQgYnkgc2F2YWdlIGFuZCBiYXJiYXJvdXMgbmF0aW9ucyAob2Ygd2hvbSB0aGVyZSBhcmUgc29tZSB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZWQgdG8gbGl2ZSBvbiBmaXNoIGFuZCB0aGUgZWdncyBvZiBzZWEtZm93bCksIGZsb3dzIGludG8gdGhlIG9jZWFuIGJ5CiAgICAgICAgICAgICAgICAgICAgc2V2ZXJhbCBtb3V0aHMuIDwvdHJhbnNsYXRpb24+"
translation['4.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdhcyBub3QgbW9yZSB0aGFuIHR3ZWx2ZSBtaWxlcyBkaXN0YW50IGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgZW5lbXksIHRoZSBlbWJhc3NhZG9ycyByZXR1cm4gdG8gaGltLCBhcyBoYWQgYmVlbiBhcnJhbmdlZDsgd2hvIG1lZXRpbmcgaGltCiAgICAgICAgICAgICAgICAgICAgb24gdGhlIG1hcmNoLCBlYXJuZXN0bHkgZW50cmVhdGVkIGhpbSBub3QgdG8gYWR2YW5jZSBhbnkgZnVydGhlci4gV2hlbiB0aGV5CiAgICAgICAgICAgICAgICAgICAgY291bGQgbm90IG9idGFpbiB0aGlzLCB0aGV5IGJlZ2dlZCBoaW0gdG8gc2VuZCBvbiBhIGRpc3BhdGNoIHRvIHRob3NlIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBtYXJjaGVkIGluIGFkdmFuY2Ugb2YgdGhlIG1haW4gYXJteSwgYW5kIGZvcmJpZCB0aGVtIHRvIGVuZ2FnZTsgYW5kIGdyYW50IHRoZW0KICAgICAgICAgICAgICAgICAgICBwZXJtaXNzaW9uIHRvIHNlbmQgZW1iYXNzYWRvcnMgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VWJpaTwvbmFtZT4sIGFuZCBpZiB0aGUgcHJpbmNlcyBhbmQKICAgICAgICAgICAgICAgICAgICBzZW5hdGUgb2YgdGhlIGxhdHRlciB3b3VsZCBnaXZlIHRoZW0gc2VjdXJpdHkgYnkgb2F0aCwgdGhleSBhc3N1cmVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0aGF0IHRoZXkgd291bGQgYWNjZXB0IHN1Y2ggY29uZGl0aW9ucyBhcyBtaWdodCBiZQogICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkIGJ5IGhpbTsgYW5kIHJlcXVlc3RlZCB0aGF0IGhlIHdvdWxkIGdpdmUgdGhlbSB0aGUgc3BhY2Ugb2YgdGhyZWUgZGF5cwogICAgICAgICAgICAgICAgICAgIGZvciBuZWdvY2lhdGluZyB0aGVzZSBhZmZhaXJzLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdGhvdWdodCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlc2UgdGhpbmdzIHRlbmRlZCB0byB0aGUgc2VsZi1zYW1lIHBvaW50IFthcyB0aGVpciBvdGhlciBwcm9wb3NhbF07IFtuYW1lbHldCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgaW4gY29uc2VxdWVuY2Ugb2YgYSBkZWxheSBvZiB0aHJlZSBkYXlzIGludGVydmVuaW5nLCB0aGVpciBob3JzZSwgd2hpY2gKICAgICAgICAgICAgICAgICAgICB3ZXJlIGF0IGEgZGlzdGFuY2UsIG1pZ2h0IHJldHVybjsgaG93ZXZlciwgaGUgc2FpZCwgdGhhdCBoZSB3b3VsZCBub3QgdGhhdCBkYXkKICAgICAgICAgICAgICAgICAgICBhZHZhbmNlIGZ1cnRoZXIgdGhhbiBmb3VyIG1pbGVzIGZvciB0aGUgcHVycG9zZSBvZiBwcm9jdXJpbmcgd2F0ZXI7IGhlIG9yZGVyZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgc2hvdWxkIGFzc2VtYmxlIGF0IHRoYXQgcGxhY2UgaW4gYXMgbGFyZ2UgYSBudW1iZXIgYXMgcG9zc2libGUsIHRoZQogICAgICAgICAgICAgICAgICAgIGZvbGxvd2luZyBkYXksIHRoYXQgaGUgbWlnaHQgaW5xdWlyZSBpbnRvIHRoZWlyIGRlbWFuZHMuIEluIHRoZSBtZWFuIHRpbWUgaGUKICAgICAgICAgICAgICAgICAgICBzZW5kcyBtZXNzZW5nZXJzIHRvIHRoZSBvZmZpY2VycyB3aG8gaGFkIG1hcmNoZWQgaW4gYWR2YW5jZSB3aXRoIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBjYXZhbHJ5LCB0byBvcmRlciB0aGVtIG5vdCB0byBwcm92b2tlIHRoZSBlbmVteSB0byBhbiBlbmdhZ2VtZW50LCBhbmQgaWYgdGhleQogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgd2VyZSBhc3NhaWxlZCwgdG8gc3VzdGFpbiB0aGUgYXR0YWNrIHVudGlsIGhlIGNhbWUgdXAgd2l0aCB0aGUgYXJteS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3YXMgbm90IG1vcmUgdGhhbiB0d2VsdmUgbWlsZXMgZGlzdGFudCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15LCB0aGUgZW1iYXNzYWRvcnMgcmV0dXJuIHRvIGhpbSwgYXMgaGFkIGJlZW4gYXJyYW5nZWQ7IHdobyBtZWV0aW5nIGhpbQogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBtYXJjaCwgZWFybmVzdGx5IGVudHJlYXRlZCBoaW0gbm90IHRvIGFkdmFuY2UgYW55IGZ1cnRoZXIuIFdoZW4gdGhleQogICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCBvYnRhaW4gdGhpcywgdGhleSBiZWdnZWQgaGltIHRvIHNlbmQgb24gYSBkaXNwYXRjaCB0byB0aG9zZSB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgbWFyY2hlZCBpbiBhZHZhbmNlIG9mIHRoZSBtYWluIGFybXksIGFuZCBmb3JiaWQgdGhlbSB0byBlbmdhZ2U7IGFuZCBncmFudCB0aGVtCiAgICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbiB0byBzZW5kIGVtYmFzc2Fkb3JzIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlViaWk8L25hbWU+LCBhbmQgaWYgdGhlIHByaW5jZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlIG9mIHRoZSBsYXR0ZXIgd291bGQgZ2l2ZSB0aGVtIHNlY3VyaXR5IGJ5IG9hdGgsIHRoZXkgYXNzdXJlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdGhhdCB0aGV5IHdvdWxkIGFjY2VwdCBzdWNoIGNvbmRpdGlvbnMgYXMgbWlnaHQgYmUKICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZCBieSBoaW07IGFuZCByZXF1ZXN0ZWQgdGhhdCBoZSB3b3VsZCBnaXZlIHRoZW0gdGhlIHNwYWNlIG9mIHRocmVlIGRheXMKICAgICAgICAgICAgICAgICAgICBmb3IgbmVnb2NpYXRpbmcgdGhlc2UgYWZmYWlycy4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRob3VnaHQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHRoaW5ncyB0ZW5kZWQgdG8gdGhlIHNlbGYtc2FtZSBwb2ludCBbYXMgdGhlaXIgb3RoZXIgcHJvcG9zYWxdOyBbbmFtZWx5XQogICAgICAgICAgICAgICAgICAgIHRoYXQsIGluIGNvbnNlcXVlbmNlIG9mIGEgZGVsYXkgb2YgdGhyZWUgZGF5cyBpbnRlcnZlbmluZywgdGhlaXIgaG9yc2UsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd2VyZSBhdCBhIGRpc3RhbmNlLCBtaWdodCByZXR1cm47IGhvd2V2ZXIsIGhlIHNhaWQsIHRoYXQgaGUgd291bGQgbm90IHRoYXQgZGF5CiAgICAgICAgICAgICAgICAgICAgYWR2YW5jZSBmdXJ0aGVyIHRoYW4gZm91ciBtaWxlcyBmb3IgdGhlIHB1cnBvc2Ugb2YgcHJvY3VyaW5nIHdhdGVyOyBoZSBvcmRlcmVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IHNob3VsZCBhc3NlbWJsZSBhdCB0aGF0IHBsYWNlIGluIGFzIGxhcmdlIGEgbnVtYmVyIGFzIHBvc3NpYmxlLCB0aGUKICAgICAgICAgICAgICAgICAgICBmb2xsb3dpbmcgZGF5LCB0aGF0IGhlIG1pZ2h0IGlucXVpcmUgaW50byB0aGVpciBkZW1hbmRzLiBJbiB0aGUgbWVhbiB0aW1lIGhlCiAgICAgICAgICAgICAgICAgICAgc2VuZHMgbWVzc2VuZ2VycyB0byB0aGUgb2ZmaWNlcnMgd2hvIGhhZCBtYXJjaGVkIGluIGFkdmFuY2Ugd2l0aCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSwgdG8gb3JkZXIgdGhlbSBub3QgdG8gcHJvdm9rZSB0aGUgZW5lbXkgdG8gYW4gZW5nYWdlbWVudCwgYW5kIGlmIHRoZXkKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHdlcmUgYXNzYWlsZWQsIHRvIHN1c3RhaW4gdGhlIGF0dGFjayB1bnRpbCBoZSBjYW1lIHVwIHdpdGggdGhlIGFybXkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB0aGUgZW5lbXksIGFzIHNvb24gYXMgdGhleSBzYXcgb3VyIGhvcnNlLCB0aGUgbnVtYmVyIG9mIHdoaWNoIHdhcyA1MDAwLAogICAgICAgICAgICAgICAgICAgIHdoZXJlYXMgdGhleSB0aGVtc2VsdmVzIGhhZCBub3QgbW9yZSB0aGFuIDgwMCBob3JzZSwgYmVjYXVzZSB0aG9zZSB3aGljaCBoYWQKICAgICAgICAgICAgICAgICAgICBnb25lIG92ZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjg2NSIgcmVnPSIgICtNZXVzZSBbNSw1MS44MzNdIChyaXZlciksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5NZXVzZSA8L25hbWU+IGZvciB0aGUgcHVycG9zZSBvZgogICAgICAgICAgICAgICAgICAgIGZvcmFnaW5nIGhhZCBub3QgcmV0dXJuZWQsIHdoaWxlIG91ciBtZW4gaGFkIG5vIGFwcHJlaGVuc2lvbnMsIGJlY2F1c2UgdGhlaXIKICAgICAgICAgICAgICAgICAgICBlbWJhc3NhZG9ycyBoYWQgZ29uZSBhd2F5IGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGEgbGl0dGxlIGJlZm9yZSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBkYXkgaGFkIGJlZW4gcmVxdWVzdGVkIGJ5IHRoZW0gYXMgYSBwZXJpb2Qgb2YgdHJ1Y2UsIG1hZGUgYW4gb25zZXQgb24KICAgICAgICAgICAgICAgICAgICBvdXIgbWVuLCBhbmQgc29vbiB0aHJldyB0aGVtIGludG8gZGlzb3JkZXIuIFdoZW4gb3VyIG1lbiwgaW4gdGhlaXIgdHVybiwgbWFkZSBhCiAgICAgICAgICAgICAgICAgICAgc3RhbmQsIHRoZXksIGFjY29yZGluZyB0byB0aGVpciBwcmFjdGljZSwgbGVhcGVkIGZyb20gdGhlaXIgaG9yc2VzIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZmVldCwgYW5kIHN0YWJiaW5nIG91ciBob3JzZXMgaW4gdGhlIGJlbGx5IGFuZCBvdmVydGhyb3dpbmcgYSBncmVhdCBtYW55IG9mIG91cgogICAgICAgICAgICAgICAgICAgIG1lbiwgcHV0IHRoZSByZXN0IHRvIGZsaWdodCwgYW5kIGRyb3ZlIHRoZW0gZm9yd2FyZCBzbyBtdWNoIGFsYXJtZWQgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBkZXNpc3QgZnJvbSB0aGVpciByZXRyZWF0IHRpbGwgdGhleSBoYWQgY29tZSBpbiBzaWdodCBvZiBvdXIgYXJteS4gSW4KICAgICAgICAgICAgICAgICAgICB0aGF0IGVuY291bnRlciBzZXZlbnR5LWZvdXIgb2Ygb3VyIGhvcnNlIHdlcmUgc2xhaW47IGFtb25nIHRoZW0sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UGlzbzwvbmFtZT4sIGFuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5BcXVpdGFuaWFuPC9uYW1lPiwgYSBtb3N0CiAgICAgICAgICAgICAgICAgICAgdmFsaWFudCBtYW4sIGFuZCBkZXNjZW5kZWQgZnJvbSBhIHZlcnkgaWxsdXN0cmlvdXMgZmFtaWx5OyB3aG9zZSBncmFuZGZhdGhlciBoYWQKICAgICAgICAgICAgICAgICAgICBoZWxkIHRoZSBzb3ZlcmVpZ250eSBvZiBoaXMgc3RhdGUsIGFuZCBoYWQgYmVlbiBzdHlsZWQgZnJpZW5kIGJ5IG91ciBzZW5hdGUuIEhlLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIGhlIHdhcyBlbmRlYXZvcmluZyB0byByZW5kZXIgYXNzaXN0YW5jZSB0byBoaXMgYnJvdGhlciB3aG8gd2FzIHN1cnJvdW5kZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGUgZW5lbXksIGFuZCB3aG9tIGhlIHJlc2N1ZWQgZnJvbSBkYW5nZXIsIHdhcyBoaW1zZWxmIHRocm93biBmcm9tIGhpcwogICAgICAgICAgICAgICAgICAgIGhvcnNlLCB3aGljaCB3YXMgd291bmRlZCB1bmRlciBoaW0sIGJ1dCBzdGlsbCBvcHBvc2VkIFtoaXMgYW50YWdvbmlzdHNdIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlc3QgaW50cmVwaWRpdHksIGFzIGxvbmcgYXMgaGUgd2FzIGFibGUgdG8gbWFpbnRhaW4gdGhlIGNvbmZsaWN0LiBXaGVuIGF0CiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoIGhlIGZlbGwsIHN1cnJvdW5kZWQgb24gYWxsIHNpZGVzIGFuZCBhZnRlciByZWNlaXZpbmcgbWFueSB3b3VuZHMsIGFuZCBoaXMKICAgICAgICAgICAgICAgICAgICBicm90aGVyLCB3aG8gaGFkIHRoZW4gcmV0aXJlZCBmcm9tIHRoZSBmaWdodCwgb2JzZXJ2ZWQgaXQgZnJvbSBhIGRpc3RhbmNlLCBoZQogICAgICAgICAgICAgICAgICAgIHNwdXJyZWQgb24gaGlzIGhvcnNlLCB0aHJldyBoaW1zZWxmIHVwb24gdGhlIGVuZW15LCBhbmQgd2FzIGtpbGxlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjg2NSIgcmVnPSIgICtNZXVzZSBbNSw1MS44MzNdIChyaXZlciksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5NZXVzZSA8L25hbWU+IGZvciB0aGUgcHVycG9zZSBvZgogICAgICAgICAgICAgICAgICAgIGZvcmFnaW5nIGhhZCBub3QgcmV0dXJuZWQsIHdoaWxlIG91ciBtZW4gaGFkIG5vIGFwcHJlaGVuc2lvbnMsIGJlY2F1c2UgdGhlaXIKICAgICAgICAgICAgICAgICAgICBlbWJhc3NhZG9ycyBoYWQgZ29uZSBhd2F5IGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGEgbGl0dGxlIGJlZm9yZSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBkYXkgaGFkIGJlZW4gcmVxdWVzdGVkIGJ5IHRoZW0gYXMgYSBwZXJpb2Qgb2YgdHJ1Y2UsIG1hZGUgYW4gb25zZXQgb24KICAgICAgICAgICAgICAgICAgICBvdXIgbWVuLCBhbmQgc29vbiB0aHJldyB0aGVtIGludG8gZGlzb3JkZXIuIFdoZW4gb3VyIG1lbiwgaW4gdGhlaXIgdHVybiwgbWFkZSBhCiAgICAgICAgICAgICAgICAgICAgc3RhbmQsIHRoZXksIGFjY29yZGluZyB0byB0aGVpciBwcmFjdGljZSwgbGVhcGVkIGZyb20gdGhlaXIgaG9yc2VzIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZmVldCwgYW5kIHN0YWJiaW5nIG91ciBob3JzZXMgaW4gdGhlIGJlbGx5IGFuZCBvdmVydGhyb3dpbmcgYSBncmVhdCBtYW55IG9mIG91cgogICAgICAgICAgICAgICAgICAgIG1lbiwgcHV0IHRoZSByZXN0IHRvIGZsaWdodCwgYW5kIGRyb3ZlIHRoZW0gZm9yd2FyZCBzbyBtdWNoIGFsYXJtZWQgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBkZXNpc3QgZnJvbSB0aGVpciByZXRyZWF0IHRpbGwgdGhleSBoYWQgY29tZSBpbiBzaWdodCBvZiBvdXIgYXJteS4gSW4KICAgICAgICAgICAgICAgICAgICB0aGF0IGVuY291bnRlciBzZXZlbnR5LWZvdXIgb2Ygb3VyIGhvcnNlIHdlcmUgc2xhaW47IGFtb25nIHRoZW0sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UGlzbzwvbmFtZT4sIGFuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5BcXVpdGFuaWFuPC9uYW1lPiwgYSBtb3N0CiAgICAgICAgICAgICAgICAgICAgdmFsaWFudCBtYW4sIGFuZCBkZXNjZW5kZWQgZnJvbSBhIHZlcnkgaWxsdXN0cmlvdXMgZmFtaWx5OyB3aG9zZSBncmFuZGZhdGhlciBoYWQKICAgICAgICAgICAgICAgICAgICBoZWxkIHRoZSBzb3ZlcmVpZ250eSBvZiBoaXMgc3RhdGUsIGFuZCBoYWQgYmVlbiBzdHlsZWQgZnJpZW5kIGJ5IG91ciBzZW5hdGUuIEhlLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIGhlIHdhcyBlbmRlYXZvcmluZyB0byByZW5kZXIgYXNzaXN0YW5jZSB0byBoaXMgYnJvdGhlciB3aG8gd2FzIHN1cnJvdW5kZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGUgZW5lbXksIGFuZCB3aG9tIGhlIHJlc2N1ZWQgZnJvbSBkYW5nZXIsIHdhcyBoaW1zZWxmIHRocm93biBmcm9tIGhpcwogICAgICAgICAgICAgICAgICAgIGhvcnNlLCB3aGljaCB3YXMgd291bmRlZCB1bmRlciBoaW0sIGJ1dCBzdGlsbCBvcHBvc2VkIFtoaXMgYW50YWdvbmlzdHNdIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlc3QgaW50cmVwaWRpdHksIGFzIGxvbmcgYXMgaGUgd2FzIGFibGUgdG8gbWFpbnRhaW4gdGhlIGNvbmZsaWN0LiBXaGVuIGF0CiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoIGhlIGZlbGwsIHN1cnJvdW5kZWQgb24gYWxsIHNpZGVzIGFuZCBhZnRlciByZWNlaXZpbmcgbWFueSB3b3VuZHMsIGFuZCBoaXMKICAgICAgICAgICAgICAgICAgICBicm90aGVyLCB3aG8gaGFkIHRoZW4gcmV0aXJlZCBmcm9tIHRoZSBmaWdodCwgb2JzZXJ2ZWQgaXQgZnJvbSBhIGRpc3RhbmNlLCBoZQogICAgICAgICAgICAgICAgICAgIHNwdXJyZWQgb24gaGlzIGhvcnNlLCB0aHJldyBoaW1zZWxmIHVwb24gdGhlIGVuZW15LCBhbmQgd2FzIGtpbGxlZC4gPC90cmFuc2xhdGlvbj4="
translation['4.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHRoaXMgZW5nYWdlbWVudCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGNvbnNpZGVyZWQgdGhhdCBuZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgZW1iYXNzYWRvcnMgdG8gYmUgcmVjZWl2ZWQgdG8gYXVkaWVuY2UsIG5vciBjb25kaXRpb25zIGJlIGFjY2VwdGVkIGJ5IGhpbQogICAgICAgICAgICAgICAgICAgIGZyb20gdGhvc2Ugd2hvLCBhZnRlciBoYXZpbmcgc3VlZCBmb3IgcGVhY2UgYnkgd2F5IG9mIHN0cmF0YWdlbSBhbmQgdHJlYWNoZXJ5LAogICAgICAgICAgICAgICAgICAgIGhhZCBtYWRlIHdhciB3aXRob3V0IHByb3ZvY2F0aW9uLiBBbmQgdG8gd2FpdCB1bnRpbCB0aGUgZW5lbXkncyBmb3JjZXMgd2VyZQogICAgICAgICAgICAgICAgICAgIGF1Z21lbnRlZCBhbmQgdGhlaXIgY2F2YWxyeSBoYWQgcmV0dXJuZWQsIGhlIGNvbmNsdWRlZCwgd291bGQgYmUgdGhlIGdyZWF0ZXN0CiAgICAgICAgICAgICAgICAgICAgbWFkbmVzczsgYW5kIGtub3dpbmcgdGhlIGZpY2tsZW5lc3Mgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sIGhlCiAgICAgICAgICAgICAgICAgICAgZmVsdCBob3cgbXVjaCBpbmZsdWVuY2UgdGhlIGVuZW15IGhhZCBhbHJlYWR5IGFjcXVpcmVkIGFtb25nIHRoZW0gYnkgdGhpcyBvbmUKICAgICAgICAgICAgICAgICAgICBza2lybWlzaC4gSGUgW3RoZXJlZm9yZV0gZGVlbWVkIHRoYXQgbm8gdGltZSBmb3IgY29uY2VydGluZyBtZWFzdXJlcyBvdWdodCB0byBiZQogICAgICAgICAgICAgICAgICAgIGFmZm9yZGVkIHRoZW0uIEFmdGVyIGhhdmluZyByZXNvbHZlZCBvbiB0aG9zZSB0aGluZ3MgYW5kIGNvbW11bmljYXRlZCBoaXMgcGxhbnMKICAgICAgICAgICAgICAgICAgICB0byBoaXMgbGlldXRlbmFudHMgYW5kIHF1YWVzdG9yIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgbm90IHN1ZmZlciBhbnkKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0eSBmb3IgZW5nYWdpbmcgdG8gZXNjYXBlIGhpbSwgYSB2ZXJ5IHNlYXNvbmFibGUgZXZlbnQgb2NjdXJyZWQsCiAgICAgICAgICAgICAgICAgICAgbmFtZWx5LCB0aGF0IG9uIHRoZSBtb3JuaW5nIG9mIHRoZSBuZXh0IGRheSwgYSBsYXJnZSBib2R5IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgY29uc2lzdGluZyBvZiB0aGVpciBwcmluY2VzIGFuZCBvbGQgbWVuLCBjYW1lIHRvIHRoZSBjYW1wCiAgICAgICAgICAgICAgICAgICAgdG8gaGltIHRvIHByYWN0aWNlIHRoZSBzYW1lIHRyZWFjaGVyeSBhbmQgZGlzc2ltdWxhdGlvbjsgYnV0LCBhcyB0aGV5IGFzc2VydGVkLAogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgcHVycG9zZSBvZiBhY3F1aXR0aW5nIHRoZW1zZWx2ZXMgZm9yIGhhdmluZyBlbmdhZ2VkIGluIGEgc2tpcm1pc2ggdGhlCiAgICAgICAgICAgICAgICAgICAgZGF5IGJlZm9yZSwgY29udHJhcnkgdG8gd2hhdCBoYWQgYmVlbiBhZ3JlZWQgYW5kIHRvIHdoYXQgaW5kZWVkLCB0aGV5IHRoZW1zZWx2ZXMKICAgICAgICAgICAgICAgICAgICBoYWQgcmVxdWVzdGVkOyBhbmQgYWxzbyBpZiB0aGV5IGNvdWxkIGJ5IGFueSBtZWFucyBvYnRhaW4gYSB0cnVjZSBieSBkZWNlaXZpbmcKICAgICAgICAgICAgICAgICAgICBoaW0uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgcmVqb2ljaW5nIHRoYXQgdGhleSBoYWQgZmFsbGVuIGludG8gaGlzCiAgICAgICAgICAgICAgICAgICAgcG93ZXIsIG9yZGVyZWQgdGhlbSB0byBiZSBkZXRhaW5lZC4gSGUgdGhlbiBkcmV3IGFsbCBoaXMgZm9yY2VzIG91dCBvZiB0aGUgY2FtcCwKICAgICAgICAgICAgICAgICAgICBhbmQgY29tbWFuZGVkIHRoZSBjYXZhbHJ5LCBiZWNhdXNlIGhlIHRob3VnaHQgdGhleSB3ZXJlIGludGltaWRhdGVkIGJ5IHRoZSBsYXRlCiAgICAgICAgICAgICAgICAgICAgc2tpcm1pc2gsIHRvIGZvbGxvdyBpbiB0aGUgcmVhci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBjb25zaWRlcmVkIHRoYXQgbmVpdGhlcgogICAgICAgICAgICAgICAgICAgIG91Z2h0IGVtYmFzc2Fkb3JzIHRvIGJlIHJlY2VpdmVkIHRvIGF1ZGllbmNlLCBub3IgY29uZGl0aW9ucyBiZSBhY2NlcHRlZCBieSBoaW0KICAgICAgICAgICAgICAgICAgICBmcm9tIHRob3NlIHdobywgYWZ0ZXIgaGF2aW5nIHN1ZWQgZm9yIHBlYWNlIGJ5IHdheSBvZiBzdHJhdGFnZW0gYW5kIHRyZWFjaGVyeSwKICAgICAgICAgICAgICAgICAgICBoYWQgbWFkZSB3YXIgd2l0aG91dCBwcm92b2NhdGlvbi4gQW5kIHRvIHdhaXQgdW50aWwgdGhlIGVuZW15J3MgZm9yY2VzIHdlcmUKICAgICAgICAgICAgICAgICAgICBhdWdtZW50ZWQgYW5kIHRoZWlyIGNhdmFscnkgaGFkIHJldHVybmVkLCBoZSBjb25jbHVkZWQsIHdvdWxkIGJlIHRoZSBncmVhdGVzdAogICAgICAgICAgICAgICAgICAgIG1hZG5lc3M7IGFuZCBrbm93aW5nIHRoZSBmaWNrbGVuZXNzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBoZQogICAgICAgICAgICAgICAgICAgIGZlbHQgaG93IG11Y2ggaW5mbHVlbmNlIHRoZSBlbmVteSBoYWQgYWxyZWFkeSBhY3F1aXJlZCBhbW9uZyB0aGVtIGJ5IHRoaXMgb25lCiAgICAgICAgICAgICAgICAgICAgc2tpcm1pc2guIEhlIFt0aGVyZWZvcmVdIGRlZW1lZCB0aGF0IG5vIHRpbWUgZm9yIGNvbmNlcnRpbmcgbWVhc3VyZXMgb3VnaHQgdG8gYmUKICAgICAgICAgICAgICAgICAgICBhZmZvcmRlZCB0aGVtLiBBZnRlciBoYXZpbmcgcmVzb2x2ZWQgb24gdGhvc2UgdGhpbmdzIGFuZCBjb21tdW5pY2F0ZWQgaGlzIHBsYW5zCiAgICAgICAgICAgICAgICAgICAgdG8gaGlzIGxpZXV0ZW5hbnRzIGFuZCBxdWFlc3RvciBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0IG5vdCBzdWZmZXIgYW55CiAgICAgICAgICAgICAgICAgICAgb3Bwb3J0dW5pdHkgZm9yIGVuZ2FnaW5nIHRvIGVzY2FwZSBoaW0sIGEgdmVyeSBzZWFzb25hYmxlIGV2ZW50IG9jY3VycmVkLAogICAgICAgICAgICAgICAgICAgIG5hbWVseSwgdGhhdCBvbiB0aGUgbW9ybmluZyBvZiB0aGUgbmV4dCBkYXksIGEgbGFyZ2UgYm9keSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIGNvbnNpc3Rpbmcgb2YgdGhlaXIgcHJpbmNlcyBhbmQgb2xkIG1lbiwgY2FtZSB0byB0aGUgY2FtcAogICAgICAgICAgICAgICAgICAgIHRvIGhpbSB0byBwcmFjdGljZSB0aGUgc2FtZSB0cmVhY2hlcnkgYW5kIGRpc3NpbXVsYXRpb247IGJ1dCwgYXMgdGhleSBhc3NlcnRlZCwKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHB1cnBvc2Ugb2YgYWNxdWl0dGluZyB0aGVtc2VsdmVzIGZvciBoYXZpbmcgZW5nYWdlZCBpbiBhIHNraXJtaXNoIHRoZQogICAgICAgICAgICAgICAgICAgIGRheSBiZWZvcmUsIGNvbnRyYXJ5IHRvIHdoYXQgaGFkIGJlZW4gYWdyZWVkIGFuZCB0byB3aGF0IGluZGVlZCwgdGhleSB0aGVtc2VsdmVzCiAgICAgICAgICAgICAgICAgICAgaGFkIHJlcXVlc3RlZDsgYW5kIGFsc28gaWYgdGhleSBjb3VsZCBieSBhbnkgbWVhbnMgb2J0YWluIGEgdHJ1Y2UgYnkgZGVjZWl2aW5nCiAgICAgICAgICAgICAgICAgICAgaGltLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHJlam9pY2luZyB0aGF0IHRoZXkgaGFkIGZhbGxlbiBpbnRvIGhpcwogICAgICAgICAgICAgICAgICAgIHBvd2VyLCBvcmRlcmVkIHRoZW0gdG8gYmUgZGV0YWluZWQuIEhlIHRoZW4gZHJldyBhbGwgaGlzIGZvcmNlcyBvdXQgb2YgdGhlIGNhbXAsCiAgICAgICAgICAgICAgICAgICAgYW5kIGNvbW1hbmRlZCB0aGUgY2F2YWxyeSwgYmVjYXVzZSBoZSB0aG91Z2h0IHRoZXkgd2VyZSBpbnRpbWlkYXRlZCBieSB0aGUgbGF0ZQogICAgICAgICAgICAgICAgICAgIHNraXJtaXNoLCB0byBmb2xsb3cgaW4gdGhlIHJlYXIuIDwvdHJhbnNsYXRpb24+"
translation['4.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyBtYXJzaGFsbGVkIGhpcyBhcm15IGluIHRocmVlIGxpbmVzLCBhbmQgaW4gYSBzaG9ydCB0aW1lIHBlcmZvcm1lZCBhIG1hcmNoCiAgICAgICAgICAgICAgICAgICAgb2YgZWlnaHQgbWlsZXMsIGhlIGFycml2ZWQgYXQgdGhlIGNhbXAgb2YgdGhlIGVuZW15IGJlZm9yZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGNvdWxkIHBlcmNlaXZlIHdoYXQgd2FzIGdvaW5nIG9uOyB3aG8gYmVpbmcKICAgICAgICAgICAgICAgICAgICBzdWRkZW5seSBhbGFybWVkIGJ5IGFsbCB0aGUgY2lyY3Vtc3RhbmNlcywgYm90aCBieSB0aGUgc3BlZWRpbmVzcyBvZiBvdXIgYXJyaXZhbAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgYWJzZW5jZSBvZiB0aGVpciBvd24gb2ZmaWNlcnMsIGFzIHRpbWUgd2FzIGFmZm9yZGVkIG5laXRoZXIgZm9yCiAgICAgICAgICAgICAgICAgICAgY29uY2VydGluZyBtZWFzdXJlcyBub3IgZm9yIHNlaXppbmcgdGhlaXIgYXJtcywgYXJlIHBlcnBsZXhlZCBhcyB0byB3aGV0aGVyIGl0CiAgICAgICAgICAgICAgICAgICAgd291bGQgYmUgYmV0dGVyIHRvIGxlYWQgb3V0IHRoZWlyIGZvcmNlcyBhZ2FpbnN0IHRoZSBlbmVteSwgb3IgdG8gZGVmZW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY2FtcCwgb3Igc2VlayB0aGVpciBzYWZldHkgYnkgZmxpZ2h0LiBUaGVpciBjb25zdGVybmF0aW9uIGJlaW5nIG1hZGUgYXBwYXJlbnQgYnkKICAgICAgICAgICAgICAgICAgICB0aGVpciBub2lzZSBhbmQgdHVtdWx0LCBvdXIgc29sZGllcnMsIGV4Y2l0ZWQgYnkgdGhlIHRyZWFjaGVyeSBvZiB0aGUgcHJlY2VkaW5nCiAgICAgICAgICAgICAgICAgICAgZGF5LCBydXNoZWQgaW50byB0aGUgY2FtcDogc3VjaCBvZiB0aGVtIGFzIGNvdWxkIHJlYWRpbHkgZ2V0IHRoZWlyIGFybXMsIGZvciBhCiAgICAgICAgICAgICAgICAgICAgc2hvcnQgdGltZSB3aXRoc3Rvb2Qgb3VyIG1lbiwgYW5kIGdhdmUgYmF0dGxlIGFtb25nIHRoZWlyIGNhcnRzIGFuZCBiYWdnYWdlCiAgICAgICAgICAgICAgICAgICAgd2Fnb25zOyBidXQgdGhlIHJlc3Qgb2YgdGhlIHBlb3BsZSwgW2NvbnNpc3RpbmddIG9mIGJveXMgYW5kIHdvbWVuIChmb3IgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBsZWZ0IHRoZWlyIGNvdW50cnkgYW5kIGNyb3NzZWQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lIDwvbmFtZT4gd2l0aCBhbGwgdGhlaXIKICAgICAgICAgICAgICAgICAgICBmYW1pbGllcykgYmVnYW4gdG8gZmx5IGluIGFsbCBkaXJlY3Rpb25zOyBpbiBwdXJzdWl0IG9mIHdob20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHNlbnQgdGhlIGNhdmFscnkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gY291bGQgcGVyY2VpdmUgd2hhdCB3YXMgZ29pbmcgb247IHdobyBiZWluZwogICAgICAgICAgICAgICAgICAgIHN1ZGRlbmx5IGFsYXJtZWQgYnkgYWxsIHRoZSBjaXJjdW1zdGFuY2VzLCBib3RoIGJ5IHRoZSBzcGVlZGluZXNzIG9mIG91ciBhcnJpdmFsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBhYnNlbmNlIG9mIHRoZWlyIG93biBvZmZpY2VycywgYXMgdGltZSB3YXMgYWZmb3JkZWQgbmVpdGhlciBmb3IKICAgICAgICAgICAgICAgICAgICBjb25jZXJ0aW5nIG1lYXN1cmVzIG5vciBmb3Igc2VpemluZyB0aGVpciBhcm1zLCBhcmUgcGVycGxleGVkIGFzIHRvIHdoZXRoZXIgaXQKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBiZXR0ZXIgdG8gbGVhZCBvdXQgdGhlaXIgZm9yY2VzIGFnYWluc3QgdGhlIGVuZW15LCBvciB0byBkZWZlbmQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBjYW1wLCBvciBzZWVrIHRoZWlyIHNhZmV0eSBieSBmbGlnaHQuIFRoZWlyIGNvbnN0ZXJuYXRpb24gYmVpbmcgbWFkZSBhcHBhcmVudCBieQogICAgICAgICAgICAgICAgICAgIHRoZWlyIG5vaXNlIGFuZCB0dW11bHQsIG91ciBzb2xkaWVycywgZXhjaXRlZCBieSB0aGUgdHJlYWNoZXJ5IG9mIHRoZSBwcmVjZWRpbmcKICAgICAgICAgICAgICAgICAgICBkYXksIHJ1c2hlZCBpbnRvIHRoZSBjYW1wOiBzdWNoIG9mIHRoZW0gYXMgY291bGQgcmVhZGlseSBnZXQgdGhlaXIgYXJtcywgZm9yIGEKICAgICAgICAgICAgICAgICAgICBzaG9ydCB0aW1lIHdpdGhzdG9vZCBvdXIgbWVuLCBhbmQgZ2F2ZSBiYXR0bGUgYW1vbmcgdGhlaXIgY2FydHMgYW5kIGJhZ2dhZ2UKICAgICAgICAgICAgICAgICAgICB3YWdvbnM7IGJ1dCB0aGUgcmVzdCBvZiB0aGUgcGVvcGxlLCBbY29uc2lzdGluZ10gb2YgYm95cyBhbmQgd29tZW4gKGZvciB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIGxlZnQgdGhlaXIgY291bnRyeSBhbmQgY3Jvc3NlZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiB3aXRoIGFsbCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGZhbWlsaWVzKSBiZWdhbiB0byBmbHkgaW4gYWxsIGRpcmVjdGlvbnM7IGluIHB1cnN1aXQgb2Ygd2hvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gc2VudCB0aGUgY2F2YWxyeS4gPC90cmFuc2xhdGlvbj4="
translation['4.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gd2hlbiwgdXBvbiBoZWFyaW5nIGEgbm9pc2UgYmVoaW5kIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgW3RoZXkgbG9va2VkIGFuZF0gc2F3IHRoYXQgdGhlaXIgZmFtaWxpZXMgd2VyZSBiZWluZyBzbGFpbiwgdGhyb3dpbmcgYXdheSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGFybXMgYW5kIGFiYW5kb25pbmcgdGhlaXIgc3RhbmRhcmRzLCBmbGVkIG91dCBvZiB0aGUgY2FtcCwgYW5kIHdoZW4gdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIGF0IHRoZSBjb25mbHVlbmNlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY4NjUiIHJlZz0iICArTWV1c2UgWzUsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TWV1c2UgPC9uYW1lPiBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgdGhlIHN1cnZpdm9ycyBkZXNwYWlyaW5nIG9mIGZ1cnRoZXIgZXNjYXBlLCBhcyBhIGdyZWF0IG51bWJlciBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNvdW50cnltZW4gaGFkIGJlZW4ga2lsbGVkLCB0aHJldyB0aGVtc2VsdmVzIGludG8gdGhlIHJpdmVyIGFuZCB0aGVyZSBwZXJpc2hlZCwKICAgICAgICAgICAgICAgICAgICBvdmVyY29tZSBieSBmZWFyLCBmYXRpZ3VlLCBhbmQgdGhlIHZpb2xlbmNlIG9mIHRoZSBzdHJlYW0uIE91ciBzb2xkaWVycywgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB0aGUgYWxhcm0gb2Ygc28gZ3JlYXQgYSB3YXIsIGZvciB0aGUgbnVtYmVyIG9mIHRoZSBlbmVteSBhbW91bnRlZCB0byA0MzAsMDAwLAogICAgICAgICAgICAgICAgICAgIHJldHVybmVkIHRvIHRoZWlyIGNhbXAsIGFsbCBzYWZlIHRvIGEgbWFuLCB2ZXJ5IGZldyBiZWluZyBldmVuIHdvdW5kZWQuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBncmFudGVkIHRob3NlIHdob20gaGUgaGFkIGRldGFpbmVkIGluIHRoZSBjYW1wCiAgICAgICAgICAgICAgICAgICAgbGliZXJ0eSBvZiBkZXBhcnRpbmcuIFRoZXkgaG93ZXZlciwgZHJlYWRpbmcgcmV2ZW5nZSBhbmQgdG9ydHVyZSBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCB3aG9zZSBsYW5kcyB0aGV5IGhhZCBoYXJhc3NlZCwgc2FpZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBkZXNpcmVkIHRvIHJlbWFpbiB3aXRoIGhpbS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGdyYW50ZWQgdGhlbQogICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb24uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gd2hlbiwgdXBvbiBoZWFyaW5nIGEgbm9pc2UgYmVoaW5kIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgW3RoZXkgbG9va2VkIGFuZF0gc2F3IHRoYXQgdGhlaXIgZmFtaWxpZXMgd2VyZSBiZWluZyBzbGFpbiwgdGhyb3dpbmcgYXdheSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGFybXMgYW5kIGFiYW5kb25pbmcgdGhlaXIgc3RhbmRhcmRzLCBmbGVkIG91dCBvZiB0aGUgY2FtcCwgYW5kIHdoZW4gdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIGF0IHRoZSBjb25mbHVlbmNlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY4NjUiIHJlZz0iICArTWV1c2UgWzUsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TWV1c2UgPC9uYW1lPiBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgdGhlIHN1cnZpdm9ycyBkZXNwYWlyaW5nIG9mIGZ1cnRoZXIgZXNjYXBlLCBhcyBhIGdyZWF0IG51bWJlciBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNvdW50cnltZW4gaGFkIGJlZW4ga2lsbGVkLCB0aHJldyB0aGVtc2VsdmVzIGludG8gdGhlIHJpdmVyIGFuZCB0aGVyZSBwZXJpc2hlZCwKICAgICAgICAgICAgICAgICAgICBvdmVyY29tZSBieSBmZWFyLCBmYXRpZ3VlLCBhbmQgdGhlIHZpb2xlbmNlIG9mIHRoZSBzdHJlYW0uIE91ciBzb2xkaWVycywgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB0aGUgYWxhcm0gb2Ygc28gZ3JlYXQgYSB3YXIsIGZvciB0aGUgbnVtYmVyIG9mIHRoZSBlbmVteSBhbW91bnRlZCB0byA0MzAsMDAwLAogICAgICAgICAgICAgICAgICAgIHJldHVybmVkIHRvIHRoZWlyIGNhbXAsIGFsbCBzYWZlIHRvIGEgbWFuLCB2ZXJ5IGZldyBiZWluZyBldmVuIHdvdW5kZWQuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBncmFudGVkIHRob3NlIHdob20gaGUgaGFkIGRldGFpbmVkIGluIHRoZSBjYW1wCiAgICAgICAgICAgICAgICAgICAgbGliZXJ0eSBvZiBkZXBhcnRpbmcuIFRoZXkgaG93ZXZlciwgZHJlYWRpbmcgcmV2ZW5nZSBhbmQgdG9ydHVyZSBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCB3aG9zZSBsYW5kcyB0aGV5IGhhZCBoYXJhc3NlZCwgc2FpZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBkZXNpcmVkIHRvIHJlbWFpbiB3aXRoIGhpbS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGdyYW50ZWQgdGhlbQogICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb24uIDwvdHJhbnNsYXRpb24+"
translation['4.16'] = ""
translation['4.17'] = ""
translation['4.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldpdGhpbiB0ZW4gZGF5cyBhZnRlciB0aGUgdGltYmVyIGJlZ2FuIHRvIGJlIGNvbGxlY3RlZCwgdGhlIHdob2xlIHdvcmsgd2FzCiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkLCBhbmQgdGhlIHdob2xlIGFybXkgbGVkIG92ZXIuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgbGVhdmluZwogICAgICAgICAgICAgICAgICAgIGEgc3Ryb25nIGd1YXJkIGF0IGVhY2ggZW5kIG9mIHRoZSBicmlkZ2UsIGhhc3RlbnMgaW50byB0aGUgdGVycml0b3JpZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2lnYW1icmk8L25hbWU+LiBJbiB0aGUgbWVhbiB0aW1lLCBlbWJhc3NhZG9ycyBmcm9tIHNldmVyYWwgbmF0aW9ucwogICAgICAgICAgICAgICAgICAgIGNvbWUgdG8gaGltLCB3aG9tLCBvbiB0aGVpciBzdWluZyBmb3IgcGVhY2UgYW5kIGFsbGlhbmNlLCBoZSBhbnN3ZXJzIGluIGEKICAgICAgICAgICAgICAgICAgICBjb3VydGVvdXMgbWFubmVyLCBhbmQgb3JkZXJzIGhvc3RhZ2VzIHRvIGJlIGJyb3VnaHQgdG8gaGltLiBCdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2lnYW1icmk8L25hbWU+LCBhdCB0aGUgdmVyeSB0aW1lIHRoZSBicmlkZ2Ugd2FzIGJlZ3VuIHRvIGJlIGJ1aWx0LAogICAgICAgICAgICAgICAgICAgIG1hZGUgcHJlcGFyYXRpb25zIGZvciBhIGZsaWdodCAoYnkgdGhlIGFkdmljZSBvZiBzdWNoIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRlbmNodGhlcmk8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlVzaXBldGVzPC9uYW1lPiBhcyB0aGV5IGhhZCBhbW9uZyB0aGVtKSwKICAgICAgICAgICAgICAgICAgICBhbmQgcXVpdHRlZCB0aGVpciB0ZXJyaXRvcmllcywgYW5kIGNvbnZleWVkIGF3YXkgYWxsIHRoZWlyIHBvc3Nlc3Npb25zLCBhbmQKICAgICAgICAgICAgICAgICAgICBjb25jZWFsZWQgdGhlbXNlbHZlcyBpbiBkZXNlcnRzIGFuZCB3b29kcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgbGVhdmluZwogICAgICAgICAgICAgICAgICAgIGEgc3Ryb25nIGd1YXJkIGF0IGVhY2ggZW5kIG9mIHRoZSBicmlkZ2UsIGhhc3RlbnMgaW50byB0aGUgdGVycml0b3JpZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2lnYW1icmk8L25hbWU+LiBJbiB0aGUgbWVhbiB0aW1lLCBlbWJhc3NhZG9ycyBmcm9tIHNldmVyYWwgbmF0aW9ucwogICAgICAgICAgICAgICAgICAgIGNvbWUgdG8gaGltLCB3aG9tLCBvbiB0aGVpciBzdWluZyBmb3IgcGVhY2UgYW5kIGFsbGlhbmNlLCBoZSBhbnN3ZXJzIGluIGEKICAgICAgICAgICAgICAgICAgICBjb3VydGVvdXMgbWFubmVyLCBhbmQgb3JkZXJzIGhvc3RhZ2VzIHRvIGJlIGJyb3VnaHQgdG8gaGltLiBCdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2lnYW1icmk8L25hbWU+LCBhdCB0aGUgdmVyeSB0aW1lIHRoZSBicmlkZ2Ugd2FzIGJlZ3VuIHRvIGJlIGJ1aWx0LAogICAgICAgICAgICAgICAgICAgIG1hZGUgcHJlcGFyYXRpb25zIGZvciBhIGZsaWdodCAoYnkgdGhlIGFkdmljZSBvZiBzdWNoIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRlbmNodGhlcmk8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlVzaXBldGVzPC9uYW1lPiBhcyB0aGV5IGhhZCBhbW9uZyB0aGVtKSwKICAgICAgICAgICAgICAgICAgICBhbmQgcXVpdHRlZCB0aGVpciB0ZXJyaXRvcmllcywgYW5kIGNvbnZleWVkIGF3YXkgYWxsIHRoZWlyIHBvc3Nlc3Npb25zLCBhbmQKICAgICAgICAgICAgICAgICAgICBjb25jZWFsZWQgdGhlbXNlbHZlcyBpbiBkZXNlcnRzIGFuZCB3b29kcy4gPC90cmFuc2xhdGlvbj4="
translation['4.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIHJlbWFpbmVkIGluIHRoZWlyIHRlcnJpdG9yaWVzIGEgZmV3IGRheXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGJ1cm5lZCBhbGwgdGhlaXIgdmlsbGFnZXMgYW5kIGhvdXNlcywgYW5kIGN1dCBkb3duIHRoZWlyIGNvcm4sIHByb2NlZWRlZAogICAgICAgICAgICAgICAgICAgIGludG8gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlViaWk8L25hbWU+OyBhbmQgaGF2aW5nIHByb21pc2VkIHRoZW0gaGlzCiAgICAgICAgICAgICAgICAgICAgYXNzaXN0YW5jZSwgaWYgdGhleSB3ZXJlIGV2ZXIgaGFyYXNzZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+LCBoZSBsZWFybmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGVtIHRoZXNlIHBhcnRpY3VsYXJzOiB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiwgYWZ0ZXIgdGhleSBoYWQgYnkKICAgICAgICAgICAgICAgICAgICBtZWFucyBvZiB0aGVpciBzY291dHMgZm91bmQgdGhhdCB0aGUgYnJpZGdlIHdhcyBiZWluZyBidWlsdCwgaGFkIGNhbGxlZCBhCiAgICAgICAgICAgICAgICAgICAgY291bmNpbCwgYWNjb3JkaW5nIHRvIHRoZWlyIGN1c3RvbSwgYW5kIHNlbnQgb3JkZXJzIHRvIGFsbCBwYXJ0cyBvZiB0aGVpciBzdGF0ZQogICAgICAgICAgICAgICAgICAgIHRvIHJlbW92ZSBmcm9tIHRoZSB0b3ducyBhbmQgY29udmV5IHRoZWlyIGNoaWxkcmVuLCB3aXZlcywgYW5kIGFsbCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb25zIGludG8gdGhlIHdvb2RzLCBhbmQgdGhhdCBhbGwgd2hvIGNvdWxkIGJlYXIgYXJtcyBzaG91bGQgYXNzZW1ibGUgaW4KICAgICAgICAgICAgICAgICAgICBvbmUgcGxhY2U7IHRoYXQgdGhlIHBsYWNlIHRodXMgY2hvc2VuIHdhcyBuZWFybHkgdGhlIGNlbnRyZSBvZiB0aG9zZSByZWdpb25zCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+IHBvc3Nlc3NlZDsgdGhhdCBpbiB0aGlzIHNwb3QgdGhleSBoYWQgcmVzb2x2ZWQgdG8KICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGUgYXJyaXZhbCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIGFuZCBnaXZlIHRoZW0gYmF0dGxlCiAgICAgICAgICAgICAgICAgICAgdGhlcmUuIFdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRpc2NvdmVyZWQgdGhpcywgaGF2aW5nIGFscmVhZHkKICAgICAgICAgICAgICAgICAgICBhY2NvbXBsaXNoZWQgYWxsIHRoZXNlIHRoaW5ncyBvbiBhY2NvdW50IG9mIHdoaWNoIGhlIGhhZCByZXNvbHZlZCB0byBsZWFkIGhpcwogICAgICAgICAgICAgICAgICAgIGFybXkgb3ZlciwgbmFtZWx5LCB0byBzdHJpa2UgZmVhciBpbnRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGFrZSB2ZW5nZWFuY2Ugb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2lnYW1icmk8L25hbWU+LCBhbmQgZnJlZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5VYmlpPC9uYW1lPiBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIGludmFzaW9uIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiwgaGF2aW5nIHNwZW50IGFsdG9nZXRoZXIgZWlnaHRlZW4gZGF5cwogICAgICAgICAgICAgICAgICAgIGJleW9uZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiwgYW5kIHRoaW5raW5nIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkIGZhciBlbm91Z2ggdG8gc2VydmUgYm90aCBob25vciBhbmQgaW50ZXJlc3QsIGhlIHJldHVybmVkIGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgY3V0IGRvd24gdGhlIGJyaWRnZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIHJlbWFpbmVkIGluIHRoZWlyIHRlcnJpdG9yaWVzIGEgZmV3IGRheXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGJ1cm5lZCBhbGwgdGhlaXIgdmlsbGFnZXMgYW5kIGhvdXNlcywgYW5kIGN1dCBkb3duIHRoZWlyIGNvcm4sIHByb2NlZWRlZAogICAgICAgICAgICAgICAgICAgIGludG8gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlViaWk8L25hbWU+OyBhbmQgaGF2aW5nIHByb21pc2VkIHRoZW0gaGlzCiAgICAgICAgICAgICAgICAgICAgYXNzaXN0YW5jZSwgaWYgdGhleSB3ZXJlIGV2ZXIgaGFyYXNzZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+LCBoZSBsZWFybmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGVtIHRoZXNlIHBhcnRpY3VsYXJzOiB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiwgYWZ0ZXIgdGhleSBoYWQgYnkKICAgICAgICAgICAgICAgICAgICBtZWFucyBvZiB0aGVpciBzY291dHMgZm91bmQgdGhhdCB0aGUgYnJpZGdlIHdhcyBiZWluZyBidWlsdCwgaGFkIGNhbGxlZCBhCiAgICAgICAgICAgICAgICAgICAgY291bmNpbCwgYWNjb3JkaW5nIHRvIHRoZWlyIGN1c3RvbSwgYW5kIHNlbnQgb3JkZXJzIHRvIGFsbCBwYXJ0cyBvZiB0aGVpciBzdGF0ZQogICAgICAgICAgICAgICAgICAgIHRvIHJlbW92ZSBmcm9tIHRoZSB0b3ducyBhbmQgY29udmV5IHRoZWlyIGNoaWxkcmVuLCB3aXZlcywgYW5kIGFsbCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb25zIGludG8gdGhlIHdvb2RzLCBhbmQgdGhhdCBhbGwgd2hvIGNvdWxkIGJlYXIgYXJtcyBzaG91bGQgYXNzZW1ibGUgaW4KICAgICAgICAgICAgICAgICAgICBvbmUgcGxhY2U7IHRoYXQgdGhlIHBsYWNlIHRodXMgY2hvc2VuIHdhcyBuZWFybHkgdGhlIGNlbnRyZSBvZiB0aG9zZSByZWdpb25zCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+IHBvc3Nlc3NlZDsgdGhhdCBpbiB0aGlzIHNwb3QgdGhleSBoYWQgcmVzb2x2ZWQgdG8KICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGUgYXJyaXZhbCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIGFuZCBnaXZlIHRoZW0gYmF0dGxlCiAgICAgICAgICAgICAgICAgICAgdGhlcmUuIFdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRpc2NvdmVyZWQgdGhpcywgaGF2aW5nIGFscmVhZHkKICAgICAgICAgICAgICAgICAgICBhY2NvbXBsaXNoZWQgYWxsIHRoZXNlIHRoaW5ncyBvbiBhY2NvdW50IG9mIHdoaWNoIGhlIGhhZCByZXNvbHZlZCB0byBsZWFkIGhpcwogICAgICAgICAgICAgICAgICAgIGFybXkgb3ZlciwgbmFtZWx5LCB0byBzdHJpa2UgZmVhciBpbnRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGFrZSB2ZW5nZWFuY2Ugb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2lnYW1icmk8L25hbWU+LCBhbmQgZnJlZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5VYmlpPC9uYW1lPiBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIGludmFzaW9uIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiwgaGF2aW5nIHNwZW50IGFsdG9nZXRoZXIgZWlnaHRlZW4gZGF5cwogICAgICAgICAgICAgICAgICAgIGJleW9uZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiwgYW5kIHRoaW5raW5nIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkIGZhciBlbm91Z2ggdG8gc2VydmUgYm90aCBob25vciBhbmQgaW50ZXJlc3QsIGhlIHJldHVybmVkIGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgY3V0IGRvd24gdGhlIGJyaWRnZS4gPC90cmFuc2xhdGlvbj4="
translation['4.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkR1cmluZyB0aGUgc2hvcnQgcGFydCBvZiBzdW1tZXIgd2hpY2ggcmVtYWluZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBhbHRob3VnaCBpbiB0aGVzZSBjb3VudHJpZXMsIGFzIGFsbCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gbGllcyB0b3dhcmQgdGhlIG5vcnRoLCB0aGUKICAgICAgICAgICAgICAgICAgICB3aW50ZXJzIGFyZSBlYXJseSwgbmV2ZXJ0aGVsZXNzIHJlc29sdmVkIHRvIHByb2NlZWQgaW50byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+LCBiZWNhdXNlIGhlIGRpc2NvdmVyZWQgdGhhdCBpbiBhbG1vc3QgYWxsIHRoZSB3YXJzIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gc3VjY29ycyBoYWQgYmVlbiBmdXJuaXNoZWQgdG8gb3VyIGVuZW15CiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGF0IGNvdW50cnk7IGFuZCBldmVuIGlmIHRoZSB0aW1lIG9mIHllYXIgc2hvdWxkIGJlIGluc3VmZmljaWVudCBmb3IKICAgICAgICAgICAgICAgICAgICBjYXJyeWluZyBvbiB0aGUgd2FyLCB5ZXQgaGUgdGhvdWdodCBpdCB3b3VsZCBiZSBvZiBncmVhdCBzZXJ2aWNlIHRvIGhpbSBpZiBoZQogICAgICAgICAgICAgICAgICAgIG9ubHkgZW50ZXJlZCB0aGUgaXNsYW5kLCBhbmQgc2F3IGludG8gdGhlIGNoYXJhY3RlciBvZiB0aGUgcGVvcGxlLCBhbmQgZ290CiAgICAgICAgICAgICAgICAgICAga25vd2xlZGdlIG9mIHRoZWlyIGxvY2FsaXRpZXMsIGhhcmJvcnMsIGFuZCBsYW5kaW5nLXBsYWNlcywgYWxsIHdoaWNoIHdlcmUgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vc3QgcGFydCB1bmtub3duIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LiBGb3IgbmVpdGhlciBkb2VzCiAgICAgICAgICAgICAgICAgICAgYW55IG9uZSBleGNlcHQgbWVyY2hhbnRzIGdlbmVyYWxseSBnbyB0aGl0aGVyLCBub3IgZXZlbiB0byB0aGVtIHdhcyBhbnkgcG9ydGlvbgogICAgICAgICAgICAgICAgICAgIG9mIGl0IGtub3duLCBleGNlcHQgdGhlIHNlYS1jb2FzdCBhbmQgdGhvc2UgcGFydHMgd2hpY2ggYXJlIG9wcG9zaXRlIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPi4gVGhlcmVmb3JlLCBhZnRlciBoYXZpbmcgY2FsbGVkIHVwIHRvIGhpbSB0aGUgbWVyY2hhbnRzIGZyb20KICAgICAgICAgICAgICAgICAgICBhbGwgcGFydHMsIGhlIGNvdWxkIGxlYXJuIG5laXRoZXIgd2hhdCB3YXMgdGhlIHNpemUgb2YgdGhlIGlzbGFuZCwgbm9yIHdoYXQgb3IKICAgICAgICAgICAgICAgICAgICBob3cgbnVtZXJvdXMgd2VyZSB0aGUgbmF0aW9ucyB3aGljaCBpbmhhYml0ZWQgaXQsIG5vciB3aGF0IHN5c3RlbSBvZiB3YXIgdGhleQogICAgICAgICAgICAgICAgICAgIGZvbGxvd2VkLCBub3Igd2hhdCBjdXN0b21zIHRoZXkgdXNlZCwgbm9yIHdoYXQgaGFyYm9ycyB3ZXJlIGNvbnZlbmllbnQgZm9yIGEKICAgICAgICAgICAgICAgICAgICBncmVhdCBudW1iZXIgb2YgbGFyZ2Ugc2hpcHMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYWx0aG91Z2ggaW4gdGhlc2UgY291bnRyaWVzLCBhcyBhbGwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGxpZXMgdG93YXJkIHRoZSBub3J0aCwgdGhlCiAgICAgICAgICAgICAgICAgICAgd2ludGVycyBhcmUgZWFybHksIG5ldmVydGhlbGVzcyByZXNvbHZlZCB0byBwcm9jZWVkIGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiwgYmVjYXVzZSBoZSBkaXNjb3ZlcmVkIHRoYXQgaW4gYWxtb3N0IGFsbCB0aGUgd2FycyB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHN1Y2NvcnMgaGFkIGJlZW4gZnVybmlzaGVkIHRvIG91ciBlbmVteQogICAgICAgICAgICAgICAgICAgIGZyb20gdGhhdCBjb3VudHJ5OyBhbmQgZXZlbiBpZiB0aGUgdGltZSBvZiB5ZWFyIHNob3VsZCBiZSBpbnN1ZmZpY2llbnQgZm9yCiAgICAgICAgICAgICAgICAgICAgY2Fycnlpbmcgb24gdGhlIHdhciwgeWV0IGhlIHRob3VnaHQgaXQgd291bGQgYmUgb2YgZ3JlYXQgc2VydmljZSB0byBoaW0gaWYgaGUKICAgICAgICAgICAgICAgICAgICBvbmx5IGVudGVyZWQgdGhlIGlzbGFuZCwgYW5kIHNhdyBpbnRvIHRoZSBjaGFyYWN0ZXIgb2YgdGhlIHBlb3BsZSwgYW5kIGdvdAogICAgICAgICAgICAgICAgICAgIGtub3dsZWRnZSBvZiB0aGVpciBsb2NhbGl0aWVzLCBoYXJib3JzLCBhbmQgbGFuZGluZy1wbGFjZXMsIGFsbCB3aGljaCB3ZXJlIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBtb3N0IHBhcnQgdW5rbm93biB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPi4gRm9yIG5laXRoZXIgZG9lcwogICAgICAgICAgICAgICAgICAgIGFueSBvbmUgZXhjZXB0IG1lcmNoYW50cyBnZW5lcmFsbHkgZ28gdGhpdGhlciwgbm9yIGV2ZW4gdG8gdGhlbSB3YXMgYW55IHBvcnRpb24KICAgICAgICAgICAgICAgICAgICBvZiBpdCBrbm93biwgZXhjZXB0IHRoZSBzZWEtY29hc3QgYW5kIHRob3NlIHBhcnRzIHdoaWNoIGFyZSBvcHBvc2l0ZSB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4uIFRoZXJlZm9yZSwgYWZ0ZXIgaGF2aW5nIGNhbGxlZCB1cCB0byBoaW0gdGhlIG1lcmNoYW50cyBmcm9tCiAgICAgICAgICAgICAgICAgICAgYWxsIHBhcnRzLCBoZSBjb3VsZCBsZWFybiBuZWl0aGVyIHdoYXQgd2FzIHRoZSBzaXplIG9mIHRoZSBpc2xhbmQsIG5vciB3aGF0IG9yCiAgICAgICAgICAgICAgICAgICAgaG93IG51bWVyb3VzIHdlcmUgdGhlIG5hdGlvbnMgd2hpY2ggaW5oYWJpdGVkIGl0LCBub3Igd2hhdCBzeXN0ZW0gb2Ygd2FyIHRoZXkKICAgICAgICAgICAgICAgICAgICBmb2xsb3dlZCwgbm9yIHdoYXQgY3VzdG9tcyB0aGV5IHVzZWQsIG5vciB3aGF0IGhhcmJvcnMgd2VyZSBjb252ZW5pZW50IGZvciBhCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgbnVtYmVyIG9mIGxhcmdlIHNoaXBzLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlIHNlbmRzIGJlZm9yZSBoaW0gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBWb2x1c2VudXM8L25hbWU+IHdpdGggYSBzaGlwIG9mIHdhciwgdG8gYWNxdWlyZSBhCiAgICAgICAgICAgICAgICAgICAga25vd2xlZGdlIG9mIHRoZXNlIHBhcnRpY3VsYXJzIGJlZm9yZSBoZSBpbiBwZXJzb24gc2hvdWxkIG1ha2UgYSBkZXNjZW50IGludG8KICAgICAgICAgICAgICAgICAgICB0aGUgaXNsYW5kLCBhcyBoZSB3YXMgY29udmluY2VkIHRoYXQgdGhpcyB3YXMgYSBqdWRpY2lvdXMgbWVhc3VyZS4gSGUKICAgICAgICAgICAgICAgICAgICBjb21taXNzaW9uZWQgaGltIHRvIHRob3JvdWdobHkgZXhhbWluZSBpbnRvIGFsbCBtYXR0ZXJzLCBhbmQgdGhlbiByZXR1cm4gdG8gaGltCiAgICAgICAgICAgICAgICAgICAgYXMgc29vbiBhcyBwb3NzaWJsZS4gSGUgaGltc2VsZiBwcm9jZWVkcyB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3Jpbmk8L25hbWU+IHdpdGggYWxsIGhpcwogICAgICAgICAgICAgICAgICAgIGZvcmNlcy4gSGUgb3JkZXJzIHNoaXBzIGZyb20gYWxsIHBhcnRzIG9mIHRoZSBuZWlnaGJvcmluZyBjb3VudHJpZXMsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBmbGVldCB3aGljaCB0aGUgcHJlY2VkaW5nIHN1bW1lciBoZSBoYWQgYnVpbHQgZm9yIHRoZSB3YXIgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZW5ldGk8L25hbWU+LCB0byBhc3NlbWJsZSBpbiB0aGlzIHBsYWNlLiBJbiB0aGUgbWVhbiB0aW1lLCBoaXMKICAgICAgICAgICAgICAgICAgICBwdXJwb3NlIGhhdmluZyBiZWVuIGRpc2NvdmVyZWQsIGFuZCByZXBvcnRlZCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ccml0b25zPC9uYW1lPiBieQogICAgICAgICAgICAgICAgICAgIG1lcmNoYW50cywgZW1iYXNzYWRvcnMgY29tZSB0byBoaW0gZnJvbSBzZXZlcmFsIHN0YXRlcyBvZiB0aGUgaXNsYW5kLCB0byBwcm9taXNlCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IHdpbGwgZ2l2ZSBob3N0YWdlcywgYW5kIHN1Ym1pdCB0byB0aGUgZ292ZXJubWVudCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUuIEhhdmluZyBnaXZlbiB0aGVtIGFuIGF1ZGllbmNlLCBoZSBhZnRlcgogICAgICAgICAgICAgICAgICAgIHByb21pc2luZyBsaWJlcmFsbHksIGFuZCBleGhvcnRpbmcgdGhlbSB0byBjb250aW51ZSBpbiB0aGF0IHB1cnBvc2UsIHNlbmRzIHRoZW0KICAgICAgICAgICAgICAgICAgICBiYWNrIHRvIHRoZWlyIG93biBjb3VudHJ5LCBhbmQgW2Rpc3BhdGNoZXNdIHdpdGggdGhlbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbW1pdXM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHdob20sIHVwb24gc3ViZHVpbmcgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXRyZWJhdGVzPC9uYW1lPiwgaGUgaGFkIGNyZWF0ZWQga2luZyB0aGVyZSwgYSBtYW4KICAgICAgICAgICAgICAgICAgICB3aG9zZSBjb3VyYWdlIGFuZCBjb25kdWN0IGhlIGVzdGVlbWVkLCBhbmQgd2hvIGhlIHRob3VnaHQgd291bGQgYmUgZmFpdGhmdWwgdG8KICAgICAgICAgICAgICAgICAgICBoaW0sIGFuZCB3aG9zZSBpbmZsdWVuY2UgcmFua2VkIGhpZ2hseSBpbiB0aG9zZSBjb3VudHJpZXMuIEhlIG9yZGVycyBoaW0gdG8KICAgICAgICAgICAgICAgICAgICB2aXNpdCBhcyBtYW55IHN0YXRlcyBhcyBoZSBjb3VsZCwgYW5kIHBlcnN1YWRlIHRoZW0gdG8gZW1icmFjZSB0aGUgcHJvdGVjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgYW5kIGFwcHJpemUgdGhlbSB0aGF0IGhlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgc2hvcnRseSBjb21lIHRoaXRoZXIuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Vm9sdXNlbnVzPC9uYW1lPiwgaGF2aW5nIHZpZXdlZCB0aGUKICAgICAgICAgICAgICAgICAgICBsb2NhbGl0aWVzIGFzIGZhciBhcyBtZWFucyBjb3VsZCBiZSBhZmZvcmRlZCBvbmUgd2hvIGRhcmVkIG5vdCBsZWF2ZSBoaXMgc2hpcAogICAgICAgICAgICAgICAgICAgIGFuZCB0cnVzdCBoaW1zZWxmIHRvIGJhcmJhcmlhbnMsIHJldHVybnMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIGZpZnRoIGRheSwgYW5kIHJlcG9ydHMgd2hhdCBoZSBoYWQgdGhlcmUgb2JzZXJ2ZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIFZvbHVzZW51czwvbmFtZT4gd2l0aCBhIHNoaXAgb2Ygd2FyLCB0byBhY3F1aXJlIGEKICAgICAgICAgICAgICAgICAgICBrbm93bGVkZ2Ugb2YgdGhlc2UgcGFydGljdWxhcnMgYmVmb3JlIGhlIGluIHBlcnNvbiBzaG91bGQgbWFrZSBhIGRlc2NlbnQgaW50bwogICAgICAgICAgICAgICAgICAgIHRoZSBpc2xhbmQsIGFzIGhlIHdhcyBjb252aW5jZWQgdGhhdCB0aGlzIHdhcyBhIGp1ZGljaW91cyBtZWFzdXJlLiBIZQogICAgICAgICAgICAgICAgICAgIGNvbW1pc3Npb25lZCBoaW0gdG8gdGhvcm91Z2hseSBleGFtaW5lIGludG8gYWxsIG1hdHRlcnMsIGFuZCB0aGVuIHJldHVybiB0byBoaW0KICAgICAgICAgICAgICAgICAgICBhcyBzb29uIGFzIHBvc3NpYmxlLiBIZSBoaW1zZWxmIHByb2NlZWRzIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmluaTwvbmFtZT4gd2l0aCBhbGwgaGlzCiAgICAgICAgICAgICAgICAgICAgZm9yY2VzLiBIZSBvcmRlcnMgc2hpcHMgZnJvbSBhbGwgcGFydHMgb2YgdGhlIG5laWdoYm9yaW5nIGNvdW50cmllcywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGZsZWV0IHdoaWNoIHRoZSBwcmVjZWRpbmcgc3VtbWVyIGhlIGhhZCBidWlsdCBmb3IgdGhlIHdhciB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlbmV0aTwvbmFtZT4sIHRvIGFzc2VtYmxlIGluIHRoaXMgcGxhY2UuIEluIHRoZSBtZWFuIHRpbWUsIGhpcwogICAgICAgICAgICAgICAgICAgIHB1cnBvc2UgaGF2aW5nIGJlZW4gZGlzY292ZXJlZCwgYW5kIHJlcG9ydGVkIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJyaXRvbnM8L25hbWU+IGJ5CiAgICAgICAgICAgICAgICAgICAgbWVyY2hhbnRzLCBlbWJhc3NhZG9ycyBjb21lIHRvIGhpbSBmcm9tIHNldmVyYWwgc3RhdGVzIG9mIHRoZSBpc2xhbmQsIHRvIHByb21pc2UKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd2lsbCBnaXZlIGhvc3RhZ2VzLCBhbmQgc3VibWl0IHRvIHRoZSBnb3Zlcm5tZW50IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZS4gSGF2aW5nIGdpdmVuIHRoZW0gYW4gYXVkaWVuY2UsIGhlIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgcHJvbWlzaW5nIGxpYmVyYWxseSwgYW5kIGV4aG9ydGluZyB0aGVtIHRvIGNvbnRpbnVlIGluIHRoYXQgcHVycG9zZSwgc2VuZHMgdGhlbQogICAgICAgICAgICAgICAgICAgIGJhY2sgdG8gdGhlaXIgb3duIGNvdW50cnksIGFuZCBbZGlzcGF0Y2hlc10gd2l0aCB0aGVtIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tbWl1czwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgd2hvbSwgdXBvbiBzdWJkdWluZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdHJlYmF0ZXM8L25hbWU+LCBoZSBoYWQgY3JlYXRlZCBraW5nIHRoZXJlLCBhIG1hbgogICAgICAgICAgICAgICAgICAgIHdob3NlIGNvdXJhZ2UgYW5kIGNvbmR1Y3QgaGUgZXN0ZWVtZWQsIGFuZCB3aG8gaGUgdGhvdWdodCB3b3VsZCBiZSBmYWl0aGZ1bCB0bwogICAgICAgICAgICAgICAgICAgIGhpbSwgYW5kIHdob3NlIGluZmx1ZW5jZSByYW5rZWQgaGlnaGx5IGluIHRob3NlIGNvdW50cmllcy4gSGUgb3JkZXJzIGhpbSB0bwogICAgICAgICAgICAgICAgICAgIHZpc2l0IGFzIG1hbnkgc3RhdGVzIGFzIGhlIGNvdWxkLCBhbmQgcGVyc3VhZGUgdGhlbSB0byBlbWJyYWNlIHRoZSBwcm90ZWN0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLCBhbmQgYXBwcml6ZSB0aGVtIHRoYXQgaGUgd291bGQKICAgICAgICAgICAgICAgICAgICBzaG9ydGx5IGNvbWUgdGhpdGhlci4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5Wb2x1c2VudXM8L25hbWU+LCBoYXZpbmcgdmlld2VkIHRoZQogICAgICAgICAgICAgICAgICAgIGxvY2FsaXRpZXMgYXMgZmFyIGFzIG1lYW5zIGNvdWxkIGJlIGFmZm9yZGVkIG9uZSB3aG8gZGFyZWQgbm90IGxlYXZlIGhpcyBzaGlwCiAgICAgICAgICAgICAgICAgICAgYW5kIHRydXN0IGhpbXNlbGYgdG8gYmFyYmFyaWFucywgcmV0dXJucyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gb24KICAgICAgICAgICAgICAgICAgICB0aGUgZmlmdGggZGF5LCBhbmQgcmVwb3J0cyB3aGF0IGhlIGhhZCB0aGVyZSBvYnNlcnZlZC4gPC90cmFuc2xhdGlvbj4="
translation['4.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiByZW1haW5zIGluIHRoZXNlIHBhcnRzIGZvciB0aGUgcHVycG9zZSBvZgogICAgICAgICAgICAgICAgICAgIHByb2N1cmluZyBzaGlwcywgZW1iYXNzYWRvcnMgY29tZSB0byBoaW0gZnJvbSBhIGdyZWF0IHBvcnRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yaW5pPC9uYW1lPiwgdG8gcGxlYWQgdGhlaXIgZXhjdXNlIHJlc3BlY3RpbmcgdGhlaXIgY29uZHVjdCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBsYXRlIG9jY2FzaW9uOyBhbGxlZ2luZyB0aGF0IGl0IHdhcyBhcyBtZW4gdW5jaXZpbGl6ZWQsIGFuZCBhcyB0aG9zZSB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIHVuYWNxdWFpbnRlZCB3aXRoIG91ciBjdXN0b20sIHRoYXQgdGhleSBoYWQgbWFkZSB3YXIgdXBvbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGFuZCBwcm9taXNpbmcgdG8gcGVyZm9ybSB3aGF0IGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGNvbW1hbmQuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgdGhpbmtpbmcgdGhhdCB0aGlzIGhhZCBoYXBwZW5lZAogICAgICAgICAgICAgICAgICAgIGZvcnR1bmF0ZWx5IGVub3VnaCBmb3IgaGltLCBiZWNhdXNlIGhlIG5laXRoZXIgd2lzaGVkIHRvIGxlYXZlIGFuIGVuZW15IGJlaGluZAogICAgICAgICAgICAgICAgICAgIGhpbSwgbm9yIGhhZCBhbiBvcHBvcnR1bml0eSBmb3IgY2Fycnlpbmcgb24gYSB3YXIsIGJ5IHJlYXNvbiBvZiB0aGUgdGltZSBvZgogICAgICAgICAgICAgICAgICAgIHllYXIsIG5vciBjb25zaWRlcmVkIHRoYXQgZW1wbG95bWVudCBpbiBzdWNoIHRyaWZsaW5nIG1hdHRlcnMgd2FzIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgcHJlZmVycmVkIHRvIGhpcyBlbnRlcnByaXNlIG9uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODY1MyIgcmVnPSJHcmVhdCBCcml0YWluIChpc2xhbmQpLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QnJpdGFpbjwvbmFtZT4sIGltcG9zZXMKICAgICAgICAgICAgICAgICAgICBhIGxhcmdlIG51bWJlciBvZiBob3N0YWdlczsgYW5kIHdoZW4gdGhlc2Ugd2VyZSBicm91Z2h0LCBoZSByZWNlaXZlZCB0aGVtIHRvIGhpcwogICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24uIEhhdmluZyBjb2xsZWN0ZWQgdG9nZXRoZXIsIGFuZCBwcm92aWRlZCBhYm91dCBlaWdodHkgdHJhbnNwb3J0CiAgICAgICAgICAgICAgICAgICAgc2hpcHMsIGFzIG1hbnkgYXMgaGUgdGhvdWdodCBuZWNlc3NhcnkgZm9yIGNvbnZleWluZyBvdmVyIHR3byBsZWdpb25zLCBoZQogICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkIHN1Y2ggW3NoaXBzXSBvZiB3YXIgYXMgaGUgaGFkIGJlc2lkZXMgdG8gdGhlIHF1YWVzdG9yLCBoaXMgbGlldXRlbmFudHMsCiAgICAgICAgICAgICAgICAgICAgYW5kIG9mZmljZXJzIG9mIGNhdmFscnkuIFRoZXJlIHdlcmUgaW4gYWRkaXRpb24gdG8gdGhlc2UgZWlnaHRlZW4gc2hpcHMgb2YKICAgICAgICAgICAgICAgICAgICBidXJkZW4gd2hpY2ggd2VyZSBwcmV2ZW50ZWQsIGVpZ2h0IG1pbGVzIGZyb20gdGhhdCBwbGFjZSwgYnkgd2luZHMsIGZyb20gYmVpbmcKICAgICAgICAgICAgICAgICAgICBhYmxlIHRvIHJlYWNoIHRoZSBzYW1lIHBvcnQuIFRoZXNlIGhlIGRpc3RyaWJ1dGVkIGFtb25nIHRoZSBob3JzZTsgdGhlIHJlc3Qgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgYXJteSwgaGUgZGVsaXZlcmVkIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+US4gVGl0dXJpdXMgU2FiaW51czwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TC4gQXVydW5jdWxlaXVzIENvdHRhPC9uYW1lPiwgaGlzIGxpZXV0ZW5hbnRzLCB0byBsZWFkIGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVuYXBpaTwvbmFtZT4gYW5kIHRob3NlIGNhbnRvbnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yaW5pPC9uYW1lPiBmcm9tIHdoaWNoIGVtYmFzc2Fkb3JzIGhhZCBub3QgY29tZSB0byBoaW0uIEhlIG9yZGVyZWQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5QLiBTdWxwaWNpdXMgUnVmdXM8L25hbWU+LCBoaXMgbGlldXRlbmFudCwgdG8gaG9sZAogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb24gb2YgdGhlIGhhcmJvciwgd2l0aCBzdWNoIGEgZ2Fycmlzb24gYXMgaGUgdGhvdWdodCBzdWZmaWNpZW50LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHJlbWFpbnMgaW4gdGhlc2UgcGFydHMgZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgICAgICAgICAgICAgcHJvY3VyaW5nIHNoaXBzLCBlbWJhc3NhZG9ycyBjb21lIHRvIGhpbSBmcm9tIGEgZ3JlYXQgcG9ydGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3Jpbmk8L25hbWU+LCB0byBwbGVhZCB0aGVpciBleGN1c2UgcmVzcGVjdGluZyB0aGVpciBjb25kdWN0IG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGxhdGUgb2NjYXNpb247IGFsbGVnaW5nIHRoYXQgaXQgd2FzIGFzIG1lbiB1bmNpdmlsaXplZCwgYW5kIGFzIHRob3NlIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgdW5hY3F1YWludGVkIHdpdGggb3VyIGN1c3RvbSwgdGhhdCB0aGV5IGhhZCBtYWRlIHdhciB1cG9uIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgYW5kIHByb21pc2luZyB0byBwZXJmb3JtIHdoYXQgaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCB0aGlua2luZyB0aGF0IHRoaXMgaGFkIGhhcHBlbmVkCiAgICAgICAgICAgICAgICAgICAgZm9ydHVuYXRlbHkgZW5vdWdoIGZvciBoaW0sIGJlY2F1c2UgaGUgbmVpdGhlciB3aXNoZWQgdG8gbGVhdmUgYW4gZW5lbXkgYmVoaW5kCiAgICAgICAgICAgICAgICAgICAgaGltLCBub3IgaGFkIGFuIG9wcG9ydHVuaXR5IGZvciBjYXJyeWluZyBvbiBhIHdhciwgYnkgcmVhc29uIG9mIHRoZSB0aW1lIG9mCiAgICAgICAgICAgICAgICAgICAgeWVhciwgbm9yIGNvbnNpZGVyZWQgdGhhdCBlbXBsb3ltZW50IGluIHN1Y2ggdHJpZmxpbmcgbWF0dGVycyB3YXMgdG8gYmUKICAgICAgICAgICAgICAgICAgICBwcmVmZXJyZWQgdG8gaGlzIGVudGVycHJpc2Ugb24gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiwgaW1wb3NlcwogICAgICAgICAgICAgICAgICAgIGEgbGFyZ2UgbnVtYmVyIG9mIGhvc3RhZ2VzOyBhbmQgd2hlbiB0aGVzZSB3ZXJlIGJyb3VnaHQsIGhlIHJlY2VpdmVkIHRoZW0gdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGlvbi4gSGF2aW5nIGNvbGxlY3RlZCB0b2dldGhlciwgYW5kIHByb3ZpZGVkIGFib3V0IGVpZ2h0eSB0cmFuc3BvcnQKICAgICAgICAgICAgICAgICAgICBzaGlwcywgYXMgbWFueSBhcyBoZSB0aG91Z2h0IG5lY2Vzc2FyeSBmb3IgY29udmV5aW5nIG92ZXIgdHdvIGxlZ2lvbnMsIGhlCiAgICAgICAgICAgICAgICAgICAgYXNzaWduZWQgc3VjaCBbc2hpcHNdIG9mIHdhciBhcyBoZSBoYWQgYmVzaWRlcyB0byB0aGUgcXVhZXN0b3IsIGhpcyBsaWV1dGVuYW50cywKICAgICAgICAgICAgICAgICAgICBhbmQgb2ZmaWNlcnMgb2YgY2F2YWxyeS4gVGhlcmUgd2VyZSBpbiBhZGRpdGlvbiB0byB0aGVzZSBlaWdodGVlbiBzaGlwcyBvZgogICAgICAgICAgICAgICAgICAgIGJ1cmRlbiB3aGljaCB3ZXJlIHByZXZlbnRlZCwgZWlnaHQgbWlsZXMgZnJvbSB0aGF0IHBsYWNlLCBieSB3aW5kcywgZnJvbSBiZWluZwogICAgICAgICAgICAgICAgICAgIGFibGUgdG8gcmVhY2ggdGhlIHNhbWUgcG9ydC4gVGhlc2UgaGUgZGlzdHJpYnV0ZWQgYW1vbmcgdGhlIGhvcnNlOyB0aGUgcmVzdCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBhcm15LCBoZSBkZWxpdmVyZWQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5RLiBUaXR1cml1cyBTYWJpbnVzPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MLiBBdXJ1bmN1bGVpdXMgQ290dGE8L25hbWU+LCBoaXMgbGlldXRlbmFudHMsIHRvIGxlYWQgaW50byB0aGUKICAgICAgICAgICAgICAgICAgICB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZW5hcGlpPC9uYW1lPiBhbmQgdGhvc2UgY2FudG9ucyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3Jpbmk8L25hbWU+IGZyb20gd2hpY2ggZW1iYXNzYWRvcnMgaGFkIG5vdCBjb21lIHRvIGhpbS4gSGUgb3JkZXJlZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlAuIFN1bHBpY2l1cyBSdWZ1czwvbmFtZT4sIGhpcyBsaWV1dGVuYW50LCB0byBob2xkCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiBvZiB0aGUgaGFyYm9yLCB3aXRoIHN1Y2ggYSBnYXJyaXNvbiBhcyBoZSB0aG91Z2h0IHN1ZmZpY2llbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXNlIG1hdHRlcnMgYmVpbmcgYXJyYW5nZWQsIGZpbmRpbmcgdGhlIHdlYXRoZXIgZmF2b3JhYmxlIGZvciBoaXMgdm95YWdlLCBoZQogICAgICAgICAgICAgICAgICAgIHNldCBzYWlsIGFib3V0IHRoZSB0aGlyZCB3YXRjaCwgYW5kIG9yZGVyZWQgdGhlIGhvcnNlIHRvIG1hcmNoIGZvcndhcmQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZnVydGhlciBwb3J0LCBhbmQgdGhlcmUgZW1iYXJrIGFuZCBmb2xsb3cgaGltLiBBcyB0aGlzIHdhcyBwZXJmb3JtZWQgcmF0aGVyCiAgICAgICAgICAgICAgICAgICAgdGFyZGlseSBieSB0aGVtLCBoZSBoaW1zZWxmIHJlYWNoZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IHNxdWFkcm9uIG9mIHNoaXBzLCBhYm91dCB0aGUgZm91cnRoIGhvdXIgb2YgdGhlIGRheSwgYW5kIHRoZXJlIHNhdyB0aGUKICAgICAgICAgICAgICAgICAgICBmb3JjZXMgb2YgdGhlIGVuZW15IGRyYXduIHVwIGluIGFybXMgb24gYWxsIHRoZSBoaWxscy4gVGhlIG5hdHVyZSBvZiB0aGUgcGxhY2UKICAgICAgICAgICAgICAgICAgICB3YXMgdGhpczogdGhlIHNlYSB3YXMgY29uZmluZWQgYnkgbW91bnRhaW5zIHNvIGNsb3NlIHRvIGl0IHRoYXQgYSBkYXJ0IGNvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgdGhyb3duIGZyb20gdGhlaXIgc3VtbWl0IHVwb24gdGhlIHNob3JlLiBDb25zaWRlcmluZyB0aGlzIGJ5IG5vIG1lYW5zIGEgZml0CiAgICAgICAgICAgICAgICAgICAgcGxhY2UgZm9yIGRpc2VtYmFya2luZywgaGUgcmVtYWluZWQgYXQgYW5jaG9yIHRpbGwgdGhlIG5pbnRoIGhvdXIsIGZvciB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBzaGlwcyB0byBhcnJpdmUgdGhlcmUuIEhhdmluZyBpbiB0aGUgbWVhbiB0aW1lIGFzc2VtYmxlZCB0aGUgbGlldXRlbmFudHMgYW5kCiAgICAgICAgICAgICAgICAgICAgbWlsaXRhcnkgdHJpYnVuZXMsIGhlIHRvbGQgdGhlbSBib3RoIHdoYXQgaGUgaGFkIGxlYXJuZWQgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlZvbHVzZW51czwvbmFtZT4sIGFuZCB3aGF0IGhlIHdpc2hlZCB0byBiZSBkb25lOyBhbmQgZW5qb2luZWQgdGhlbSAoYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJpbmNpcGxlIG9mIG1pbGl0YXJ5IG1hdHRlcnMsIGFuZCBlc3BlY2lhbGx5IGFzIG1hcml0aW1lIGFmZmFpcnMsIHdoaWNoIGhhdmUgYQogICAgICAgICAgICAgICAgICAgIHByZWNpcGl0YXRlIGFuZCB1bmNlcnRhaW4gYWN0aW9uLCByZXF1aXJlZCkgdGhhdCBhbGwgdGhpbmdzIHNob3VsZCBiZSBwZXJmb3JtZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGVtIGF0IGEgbm9kIGFuZCBhdCB0aGUgaW5zdGFudC4gSGF2aW5nIGRpc21pc3NlZCB0aGVtLCBtZWV0aW5nIGJvdGggd2l0aAogICAgICAgICAgICAgICAgICAgIHdpbmQgYW5kIHRpZGUgZmF2b3JhYmxlIGF0IHRoZSBzYW1lIHRpbWUsIHRoZSBzaWduYWwgYmVpbmcgZ2l2ZW4gYW5kIHRoZSBhbmNob3IKICAgICAgICAgICAgICAgICAgICB3ZWlnaGVkLCBoZSBhZHZhbmNlZCBhYm91dCBzZXZlbiBtaWxlcyBmcm9tIHRoYXQgcGxhY2UsIGFuZCBzdGF0aW9uZWQgaGlzIGZsZWV0CiAgICAgICAgICAgICAgICAgICAgb3ZlciBhZ2FpbnN0IGFuIG9wZW4gYW5kIGxldmVsIHNob3JlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IHNxdWFkcm9uIG9mIHNoaXBzLCBhYm91dCB0aGUgZm91cnRoIGhvdXIgb2YgdGhlIGRheSwgYW5kIHRoZXJlIHNhdyB0aGUKICAgICAgICAgICAgICAgICAgICBmb3JjZXMgb2YgdGhlIGVuZW15IGRyYXduIHVwIGluIGFybXMgb24gYWxsIHRoZSBoaWxscy4gVGhlIG5hdHVyZSBvZiB0aGUgcGxhY2UKICAgICAgICAgICAgICAgICAgICB3YXMgdGhpczogdGhlIHNlYSB3YXMgY29uZmluZWQgYnkgbW91bnRhaW5zIHNvIGNsb3NlIHRvIGl0IHRoYXQgYSBkYXJ0IGNvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgdGhyb3duIGZyb20gdGhlaXIgc3VtbWl0IHVwb24gdGhlIHNob3JlLiBDb25zaWRlcmluZyB0aGlzIGJ5IG5vIG1lYW5zIGEgZml0CiAgICAgICAgICAgICAgICAgICAgcGxhY2UgZm9yIGRpc2VtYmFya2luZywgaGUgcmVtYWluZWQgYXQgYW5jaG9yIHRpbGwgdGhlIG5pbnRoIGhvdXIsIGZvciB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBzaGlwcyB0byBhcnJpdmUgdGhlcmUuIEhhdmluZyBpbiB0aGUgbWVhbiB0aW1lIGFzc2VtYmxlZCB0aGUgbGlldXRlbmFudHMgYW5kCiAgICAgICAgICAgICAgICAgICAgbWlsaXRhcnkgdHJpYnVuZXMsIGhlIHRvbGQgdGhlbSBib3RoIHdoYXQgaGUgaGFkIGxlYXJuZWQgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlZvbHVzZW51czwvbmFtZT4sIGFuZCB3aGF0IGhlIHdpc2hlZCB0byBiZSBkb25lOyBhbmQgZW5qb2luZWQgdGhlbSAoYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJpbmNpcGxlIG9mIG1pbGl0YXJ5IG1hdHRlcnMsIGFuZCBlc3BlY2lhbGx5IGFzIG1hcml0aW1lIGFmZmFpcnMsIHdoaWNoIGhhdmUgYQogICAgICAgICAgICAgICAgICAgIHByZWNpcGl0YXRlIGFuZCB1bmNlcnRhaW4gYWN0aW9uLCByZXF1aXJlZCkgdGhhdCBhbGwgdGhpbmdzIHNob3VsZCBiZSBwZXJmb3JtZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGVtIGF0IGEgbm9kIGFuZCBhdCB0aGUgaW5zdGFudC4gSGF2aW5nIGRpc21pc3NlZCB0aGVtLCBtZWV0aW5nIGJvdGggd2l0aAogICAgICAgICAgICAgICAgICAgIHdpbmQgYW5kIHRpZGUgZmF2b3JhYmxlIGF0IHRoZSBzYW1lIHRpbWUsIHRoZSBzaWduYWwgYmVpbmcgZ2l2ZW4gYW5kIHRoZSBhbmNob3IKICAgICAgICAgICAgICAgICAgICB3ZWlnaGVkLCBoZSBhZHZhbmNlZCBhYm91dCBzZXZlbiBtaWxlcyBmcm9tIHRoYXQgcGxhY2UsIGFuZCBzdGF0aW9uZWQgaGlzIGZsZWV0CiAgICAgICAgICAgICAgICAgICAgb3ZlciBhZ2FpbnN0IGFuIG9wZW4gYW5kIGxldmVsIHNob3JlLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB0aGUgYmFyYmFyaWFucywgdXBvbiBwZXJjZWl2aW5nIHRoZSBkZXNpZ24gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LCBzZW50IGZvcndhcmQgdGhlaXIgY2F2YWxyeSBhbmQgY2hhcmlvdGVlcnMsIGEgY2xhc3Mgb2YKICAgICAgICAgICAgICAgICAgICB3YXJyaW9ycyBvZiB3aG9tIGl0IGlzIHRoZWlyIHByYWN0aWNlIHRvIG1ha2UgZ3JlYXQgdXNlIGluIHRoZWlyIGJhdHRsZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIGZvbGxvd2luZyB3aXRoIHRoZSByZXN0IG9mIHRoZWlyIGZvcmNlcywgZW5kZWF2b3JlZCB0byBwcmV2ZW50IG91ciBtZW4gbGFuZGluZy4KICAgICAgICAgICAgICAgICAgICBJbiB0aGlzIHdhcyB0aGUgZ3JlYXRlc3QgZGlmZmljdWx0eSwgZm9yIHRoZSBmb2xsb3dpbmcgcmVhc29ucywgbmFtZWx5LCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgb3VyIHNoaXBzLCBvbiBhY2NvdW50IG9mIHRoZWlyIGdyZWF0IHNpemUsIGNvdWxkIGJlIHN0YXRpb25lZCBvbmx5IGluIGRlZXAKICAgICAgICAgICAgICAgICAgICB3YXRlcjsgYW5kIG91ciBzb2xkaWVycywgaW4gcGxhY2VzIHVua25vd24gdG8gdGhlbSwgd2l0aCB0aGVpciBoYW5kcwogICAgICAgICAgICAgICAgICAgIGVtYmFycmFzc2VkLCBvcHByZXNzZWQgd2l0aCBhIGxhcmdlIGFuZCBoZWF2eSB3ZWlnaHQgb2YgYXJtb3IsIGhhZCBhdCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHRpbWUgdG8gbGVhcCBmcm9tIHRoZSBzaGlwcywgc3RhbmQgYW1pZCB0aGUgd2F2ZXMsIGFuZCBlbmNvdW50ZXIgdGhlIGVuZW15OwogICAgICAgICAgICAgICAgICAgIHdoZXJlYXMgdGhleSwgZWl0aGVyIG9uIGRyeSBncm91bmQsIG9yIGFkdmFuY2luZyBhIGxpdHRsZSB3YXkgaW50byB0aGUgd2F0ZXIsCiAgICAgICAgICAgICAgICAgICAgZnJlZSBpbiBhbGwgdGhlaXIgbGltYnMgaW4gcGxhY2VzIHRob3JvdWdobHkga25vd24gdG8gdGhlbSwgY291bGQgY29uZmlkZW50bHkKICAgICAgICAgICAgICAgICAgICB0aHJvdyB0aGVpciB3ZWFwb25zIGFuZCBzcHVyIG9uIHRoZWlyIGhvcnNlcywgd2hpY2ggd2VyZSBhY2N1c3RvbWVkIHRvIHRoaXMga2luZAogICAgICAgICAgICAgICAgICAgIG9mIHNlcnZpY2UuIERpc21heWVkIGJ5IHRoZXNlIGNpcmN1bXN0YW5jZXMgYW5kIGFsdG9nZXRoZXIgdW50cmFpbmVkIGluIHRoaXMKICAgICAgICAgICAgICAgICAgICBtb2RlIG9mIGJhdHRsZSwgb3VyIG1lbiBkaWQgbm90IGFsbCBleGVydCB0aGUgc2FtZSB2aWdvciBhbmQgZWFnZXJuZXNzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgYmVlbiB3b250IHRvIGV4ZXJ0IGluIGVuZ2FnZW1lbnRzIG9uIGRyeSBncm91bmQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgc2VudCBmb3J3YXJkIHRoZWlyIGNhdmFscnkgYW5kIGNoYXJpb3RlZXJzLCBhIGNsYXNzIG9mCiAgICAgICAgICAgICAgICAgICAgd2FycmlvcnMgb2Ygd2hvbSBpdCBpcyB0aGVpciBwcmFjdGljZSB0byBtYWtlIGdyZWF0IHVzZSBpbiB0aGVpciBiYXR0bGVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBmb2xsb3dpbmcgd2l0aCB0aGUgcmVzdCBvZiB0aGVpciBmb3JjZXMsIGVuZGVhdm9yZWQgdG8gcHJldmVudCBvdXIgbWVuIGxhbmRpbmcuCiAgICAgICAgICAgICAgICAgICAgSW4gdGhpcyB3YXMgdGhlIGdyZWF0ZXN0IGRpZmZpY3VsdHksIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbnMsIG5hbWVseSwgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIG91ciBzaGlwcywgb24gYWNjb3VudCBvZiB0aGVpciBncmVhdCBzaXplLCBjb3VsZCBiZSBzdGF0aW9uZWQgb25seSBpbiBkZWVwCiAgICAgICAgICAgICAgICAgICAgd2F0ZXI7IGFuZCBvdXIgc29sZGllcnMsIGluIHBsYWNlcyB1bmtub3duIHRvIHRoZW0sIHdpdGggdGhlaXIgaGFuZHMKICAgICAgICAgICAgICAgICAgICBlbWJhcnJhc3NlZCwgb3BwcmVzc2VkIHdpdGggYSBsYXJnZSBhbmQgaGVhdnkgd2VpZ2h0IG9mIGFybW9yLCBoYWQgYXQgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICB0aW1lIHRvIGxlYXAgZnJvbSB0aGUgc2hpcHMsIHN0YW5kIGFtaWQgdGhlIHdhdmVzLCBhbmQgZW5jb3VudGVyIHRoZSBlbmVteTsKICAgICAgICAgICAgICAgICAgICB3aGVyZWFzIHRoZXksIGVpdGhlciBvbiBkcnkgZ3JvdW5kLCBvciBhZHZhbmNpbmcgYSBsaXR0bGUgd2F5IGludG8gdGhlIHdhdGVyLAogICAgICAgICAgICAgICAgICAgIGZyZWUgaW4gYWxsIHRoZWlyIGxpbWJzIGluIHBsYWNlcyB0aG9yb3VnaGx5IGtub3duIHRvIHRoZW0sIGNvdWxkIGNvbmZpZGVudGx5CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgdGhlaXIgd2VhcG9ucyBhbmQgc3B1ciBvbiB0aGVpciBob3JzZXMsIHdoaWNoIHdlcmUgYWNjdXN0b21lZCB0byB0aGlzIGtpbmQKICAgICAgICAgICAgICAgICAgICBvZiBzZXJ2aWNlLiBEaXNtYXllZCBieSB0aGVzZSBjaXJjdW1zdGFuY2VzIGFuZCBhbHRvZ2V0aGVyIHVudHJhaW5lZCBpbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgbW9kZSBvZiBiYXR0bGUsIG91ciBtZW4gZGlkIG5vdCBhbGwgZXhlcnQgdGhlIHNhbWUgdmlnb3IgYW5kIGVhZ2VybmVzcyB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIGJlZW4gd29udCB0byBleGVydCBpbiBlbmdhZ2VtZW50cyBvbiBkcnkgZ3JvdW5kLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9ic2VydmVkIHRoaXMsIGhlIG9yZGVyZWQgdGhlIHNoaXBzIG9mIHdhciwKICAgICAgICAgICAgICAgICAgICB0aGUgYXBwZWFyYW5jZSBvZiB3aGljaCB3YXMgc29tZXdoYXQgc3RyYW5nZSB0byB0aGUgYmFyYmFyaWFucyBhbmQgdGhlIG1vdGlvbgogICAgICAgICAgICAgICAgICAgIG1vcmUgcmVhZHkgZm9yIHNlcnZpY2UsIHRvIGJlIHdpdGhkcmF3biBhIGxpdHRsZSBmcm9tIHRoZSB0cmFuc3BvcnQgdmVzc2VscywgYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgcHJvcGVsbGVkIGJ5IHRoZWlyIG9hcnMsIGFuZCBiZSBzdGF0aW9uZWQgdG93YXJkIHRoZSBvcGVuIGZsYW5rIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15LCBhbmQgdGhlIGVuZW15IHRvIGJlIGJlYXRlbiBvZmYgYW5kIGRyaXZlbiBhd2F5LCB3aXRoIHNsaW5ncywgYXJyb3dzLCBhbmQKICAgICAgICAgICAgICAgICAgICBlbmdpbmVzOiB3aGljaCBwbGFuIHdhcyBvZiBncmVhdCBzZXJ2aWNlIHRvIG91ciBtZW47IGZvciB0aGUgYmFyYmFyaWFucyBiZWluZwogICAgICAgICAgICAgICAgICAgIHN0YXJ0bGVkIGJ5IHRoZSBmb3JtIG9mIG91ciBzaGlwcyBhbmQgdGhlIG1vdGlvbnMgb2Ygb3VyIG9hcnMgYW5kIHRoZSBuYXR1cmUgb2YKICAgICAgICAgICAgICAgICAgICBvdXIgZW5naW5lcywgd2hpY2ggd2FzIHN0cmFuZ2UgdG8gdGhlbSwgc3RvcHBlZCwgYW5kIHNob3J0bHkgYWZ0ZXIgcmV0cmVhdGVkIGEKICAgICAgICAgICAgICAgICAgICBsaXR0bGUuIEFuZCB3aGlsZSBvdXIgbWVuIHdlcmUgaGVzaXRhdGluZyBbd2hldGhlciB0aGV5IHNob3VsZCBhZHZhbmNlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHNob3JlXSwgY2hpZWZseSBvbiBhY2NvdW50IG9mIHRoZSBkZXB0aCBvZiB0aGUgc2VhLCBoZSB3aG8gY2FycmllZCB0aGUgZWFnbGUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgdGVudGggbGVnaW9uLCBhZnRlciBzdXBwbGljYXRpbmcgdGhlIGdvZHMgdGhhdCB0aGUgbWF0dGVyIG1pZ2h0IHR1cm4gb3V0CiAgICAgICAgICAgICAgICAgICAgZmF2b3JhYmx5IHRvIHRoZSBsZWdpb24sIGV4Y2xhaW1lZCwgIkxlYXAsIGZlbGxvdyBzb2xkaWVycywgdW5sZXNzIHlvdSB3aXNoIHRvCiAgICAgICAgICAgICAgICAgICAgYmV0cmF5IHlvdXIgZWFnbGUgdG8gdGhlIGVuZW15LiBJLCBmb3IgbXkgcGFydCwgd2lsbCBwZXJmb3JtIG15IGR1dHkgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9ud2VhbHRoIGFuZCBteSBnZW5lcmFsLiIgV2hlbiBoZSBoYWQgc2FpZCB0aGlzIHdpdGggYSBsb3VkIHZvaWNlLCBoZSBsZWFwZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBzaGlwIGFuZCBwcm9jZWVkZWQgdG8gYmVhciB0aGUgZWFnbGUgdG93YXJkIHRoZSBlbmVteS4gVGhlbiBvdXIgbWVuLAogICAgICAgICAgICAgICAgICAgIGV4aG9ydGluZyBvbmUgYW5vdGhlciB0aGF0IHNvIGdyZWF0IGEgZGlzZ3JhY2Ugc2hvdWxkIG5vdCBiZSBpbmN1cnJlZCwgYWxsCiAgICAgICAgICAgICAgICAgICAgbGVhcGVkIGZyb20gdGhlIHNoaXAuIFdoZW4gdGhvc2UgaW4gdGhlIG5lYXJlc3QgdmVzc2VscyBzYXcgdGhlbSwgdGhleSBzcGVlZGlseQogICAgICAgICAgICAgICAgICAgIGZvbGxvd2VkIGFuZCBhcHByb2FjaGVkIHRoZSBlbmVteS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBvYnNlcnZlZCB0aGlzLCBoZSBvcmRlcmVkIHRoZSBzaGlwcyBvZiB3YXIsCiAgICAgICAgICAgICAgICAgICAgdGhlIGFwcGVhcmFuY2Ugb2Ygd2hpY2ggd2FzIHNvbWV3aGF0IHN0cmFuZ2UgdG8gdGhlIGJhcmJhcmlhbnMgYW5kIHRoZSBtb3Rpb24KICAgICAgICAgICAgICAgICAgICBtb3JlIHJlYWR5IGZvciBzZXJ2aWNlLCB0byBiZSB3aXRoZHJhd24gYSBsaXR0bGUgZnJvbSB0aGUgdHJhbnNwb3J0IHZlc3NlbHMsIGFuZAogICAgICAgICAgICAgICAgICAgIHRvIGJlIHByb3BlbGxlZCBieSB0aGVpciBvYXJzLCBhbmQgYmUgc3RhdGlvbmVkIHRvd2FyZCB0aGUgb3BlbiBmbGFuayBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSwgYW5kIHRoZSBlbmVteSB0byBiZSBiZWF0ZW4gb2ZmIGFuZCBkcml2ZW4gYXdheSwgd2l0aCBzbGluZ3MsIGFycm93cywgYW5kCiAgICAgICAgICAgICAgICAgICAgZW5naW5lczogd2hpY2ggcGxhbiB3YXMgb2YgZ3JlYXQgc2VydmljZSB0byBvdXIgbWVuOyBmb3IgdGhlIGJhcmJhcmlhbnMgYmVpbmcKICAgICAgICAgICAgICAgICAgICBzdGFydGxlZCBieSB0aGUgZm9ybSBvZiBvdXIgc2hpcHMgYW5kIHRoZSBtb3Rpb25zIG9mIG91ciBvYXJzIGFuZCB0aGUgbmF0dXJlIG9mCiAgICAgICAgICAgICAgICAgICAgb3VyIGVuZ2luZXMsIHdoaWNoIHdhcyBzdHJhbmdlIHRvIHRoZW0sIHN0b3BwZWQsIGFuZCBzaG9ydGx5IGFmdGVyIHJldHJlYXRlZCBhCiAgICAgICAgICAgICAgICAgICAgbGl0dGxlLiBBbmQgd2hpbGUgb3VyIG1lbiB3ZXJlIGhlc2l0YXRpbmcgW3doZXRoZXIgdGhleSBzaG91bGQgYWR2YW5jZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBzaG9yZV0sIGNoaWVmbHkgb24gYWNjb3VudCBvZiB0aGUgZGVwdGggb2YgdGhlIHNlYSwgaGUgd2hvIGNhcnJpZWQgdGhlIGVhZ2xlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlbnRoIGxlZ2lvbiwgYWZ0ZXIgc3VwcGxpY2F0aW5nIHRoZSBnb2RzIHRoYXQgdGhlIG1hdHRlciBtaWdodCB0dXJuIG91dAogICAgICAgICAgICAgICAgICAgIGZhdm9yYWJseSB0byB0aGUgbGVnaW9uLCBleGNsYWltZWQsICJMZWFwLCBmZWxsb3cgc29sZGllcnMsIHVubGVzcyB5b3Ugd2lzaCB0bwogICAgICAgICAgICAgICAgICAgIGJldHJheSB5b3VyIGVhZ2xlIHRvIHRoZSBlbmVteS4gSSwgZm9yIG15IHBhcnQsIHdpbGwgcGVyZm9ybSBteSBkdXR5IHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbW1vbndlYWx0aCBhbmQgbXkgZ2VuZXJhbC4iIFdoZW4gaGUgaGFkIHNhaWQgdGhpcyB3aXRoIGEgbG91ZCB2b2ljZSwgaGUgbGVhcGVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgc2hpcCBhbmQgcHJvY2VlZGVkIHRvIGJlYXIgdGhlIGVhZ2xlIHRvd2FyZCB0aGUgZW5lbXkuIFRoZW4gb3VyIG1lbiwKICAgICAgICAgICAgICAgICAgICBleGhvcnRpbmcgb25lIGFub3RoZXIgdGhhdCBzbyBncmVhdCBhIGRpc2dyYWNlIHNob3VsZCBub3QgYmUgaW5jdXJyZWQsIGFsbAogICAgICAgICAgICAgICAgICAgIGxlYXBlZCBmcm9tIHRoZSBzaGlwLiBXaGVuIHRob3NlIGluIHRoZSBuZWFyZXN0IHZlc3NlbHMgc2F3IHRoZW0sIHRoZXkgc3BlZWRpbHkKICAgICAgICAgICAgICAgICAgICBmb2xsb3dlZCBhbmQgYXBwcm9hY2hlZCB0aGUgZW5lbXkuIDwvdHJhbnNsYXRpb24+"
translation['4.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBiYXR0bGUgd2FzIG1haW50YWluZWQgdmlnb3JvdXNseSBvbiBib3RoIHNpZGVzLiBPdXIgbWVuLCBob3dldmVyLCBhcyB0aGV5CiAgICAgICAgICAgICAgICAgICAgY291bGQgbmVpdGhlciBrZWVwIHRoZWlyIHJhbmtzLCBub3IgZ2V0IGZpcm0gZm9vdGluZywgbm9yIGZvbGxvdyB0aGVpcgogICAgICAgICAgICAgICAgICAgIHN0YW5kYXJkcywgYW5kIGFzIG9uZSBmcm9tIG9uZSBzaGlwIGFuZCBhbm90aGVyIGZyb20gYW5vdGhlciBhc3NlbWJsZWQgYXJvdW5kCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgc3RhbmRhcmRzIHRoZXkgbWV0LCB3ZXJlIHRocm93biBpbnRvIGdyZWF0IGNvbmZ1c2lvbi4gQnV0IHRoZSBlbmVteSwKICAgICAgICAgICAgICAgICAgICB3aG8gd2VyZSBhY3F1YWludGVkIHdpdGggYWxsIHRoZSBzaGFsbG93cywgd2hlbiBmcm9tIHRoZSBzaG9yZSB0aGV5IHNhdyBhbnkKICAgICAgICAgICAgICAgICAgICBjb21pbmcgZnJvbSBhIHNoaXAgb25lIGJ5IG9uZSwgc3B1cnJlZCBvbiB0aGVpciBob3JzZXMsIGFuZCBhdHRhY2tlZCB0aGVtIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgZW1iYXJyYXNzZWQ7IG1hbnkgc3Vycm91bmRlZCBhIGZldywgb3RoZXJzIHRocmV3IHRoZWlyIHdlYXBvbnMgdXBvbiBvdXIKICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQgZm9yY2VzIG9uIHRoZWlyIGV4cG9zZWQgZmxhbmsuIFdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZWQgdGhpcywgaGUgb3JkZXJlZCB0aGUgYm9hdHMgb2YgdGhlIHNoaXBzIG9mIHdhciBhbmQgdGhlIHNweSBzbG9vcHMgdG8gYmUKICAgICAgICAgICAgICAgICAgICBmaWxsZWQgd2l0aCBzb2xkaWVycywgYW5kIHNlbnQgdGhlbSB1cCB0byB0aGUgc3VjY29yIG9mIHRob3NlIHdob20gaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZWQgaW4gZGlzdHJlc3MuIE91ciBtZW4sIGFzIHNvb24gYXMgdGhleSBtYWRlIGdvb2QgdGhlaXIgZm9vdGluZyBvbiBkcnkKICAgICAgICAgICAgICAgICAgICBncm91bmQsIGFuZCBhbGwgdGhlaXIgY29tcmFkZXMgaGFkIGpvaW5lZCB0aGVtLCBtYWRlIGFuIGF0dGFjayB1cG9uIHRoZSBlbmVteSwKICAgICAgICAgICAgICAgICAgICBhbmQgcHV0IHRoZW0gdG8gZmxpZ2h0LCBidXQgY291bGQgbm90IHB1cnN1ZSB0aGVtIHZlcnkgZmFyLCBiZWNhdXNlIHRoZSBob3JzZQogICAgICAgICAgICAgICAgICAgIGhhZCBub3QgYmVlbiBhYmxlIHRvIG1haW50YWluIHRoZWlyIGNvdXJzZSBhdCBzZWEgYW5kIHJlYWNoIHRoZSBpc2xhbmQuIFRoaXMKICAgICAgICAgICAgICAgICAgICBhbG9uZSB3YXMgd2FudGluZyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBhY2N1c3RvbWVkIHN1Y2Nlc3MuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBvYnNlcnZlZCB0aGlzLCBoZSBvcmRlcmVkIHRoZSBib2F0cyBvZiB0aGUgc2hpcHMgb2Ygd2FyIGFuZCB0aGUgc3B5IHNsb29wcyB0byBiZQogICAgICAgICAgICAgICAgICAgIGZpbGxlZCB3aXRoIHNvbGRpZXJzLCBhbmQgc2VudCB0aGVtIHVwIHRvIHRoZSBzdWNjb3Igb2YgdGhvc2Ugd2hvbSBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBvYnNlcnZlZCBpbiBkaXN0cmVzcy4gT3VyIG1lbiwgYXMgc29vbiBhcyB0aGV5IG1hZGUgZ29vZCB0aGVpciBmb290aW5nIG9uIGRyeQogICAgICAgICAgICAgICAgICAgIGdyb3VuZCwgYW5kIGFsbCB0aGVpciBjb21yYWRlcyBoYWQgam9pbmVkIHRoZW0sIG1hZGUgYW4gYXR0YWNrIHVwb24gdGhlIGVuZW15LAogICAgICAgICAgICAgICAgICAgIGFuZCBwdXQgdGhlbSB0byBmbGlnaHQsIGJ1dCBjb3VsZCBub3QgcHVyc3VlIHRoZW0gdmVyeSBmYXIsIGJlY2F1c2UgdGhlIGhvcnNlCiAgICAgICAgICAgICAgICAgICAgaGFkIG5vdCBiZWVuIGFibGUgdG8gbWFpbnRhaW4gdGhlaXIgY291cnNlIGF0IHNlYSBhbmQgcmVhY2ggdGhlIGlzbGFuZC4gVGhpcwogICAgICAgICAgICAgICAgICAgIGFsb25lIHdhcyB3YW50aW5nIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIGFjY3VzdG9tZWQgc3VjY2Vzcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBlbmVteSBiZWluZyB0aHVzIHZhbnF1aXNoZWQgaW4gYmF0dGxlLCBhcyBzb29uIGFzIHRoZXkgcmVjb3ZlcmVkIGFmdGVyIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZmxpZ2h0LCBpbnN0YW50bHkgc2VudCBlbWJhc3NhZG9ycyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdG8KICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGUgYWJvdXQgcGVhY2UuIFRoZXkgcHJvbWlzZWQgdG8gZ2l2ZSBob3N0YWdlcyBhbmQgcGVyZm9ybSB3aGF0IGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGNvbW1hbmQuIFRvZ2V0aGVyIHdpdGggdGhlc2UgZW1iYXNzYWRvcnMgY2FtZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbW1pdXM8L25hbWU+IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsdHJlYmF0aWFuPC9uYW1lPiwgd2hvLCBhcyBJIGhhdmUgYWJvdmUgc2FpZCwgaGFkIGJlZW4gc2VudCBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaW50byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+LiBIaW0KICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCBzZWl6ZWQgdXBvbiB3aGVuIGxlYXZpbmcgaGlzIHNoaXAsIGFsdGhvdWdoIGluIHRoZSBjaGFyYWN0ZXIgb2YKICAgICAgICAgICAgICAgICAgICBlbWJhc3NhZG9yIGhlIGJvcmUgdGhlIGdlbmVyYWwncyBjb21taXNzaW9uIHRvIHRoZW0sIGFuZCB0aHJvd24gaW50byBjaGFpbnM6CiAgICAgICAgICAgICAgICAgICAgdGhlbiBhZnRlciB0aGUgYmF0dGxlIHdhcyBmb3VnaHQsIHRoZXkgc2VudCBoaW0gYmFjaywgYW5kIGluIHN1aW5nIGZvciBwZWFjZQogICAgICAgICAgICAgICAgICAgIGNhc3QgdGhlIGJsYW1lIG9mIHRoYXQgYWN0IHVwb24gdGhlIGNvbW1vbiBwZW9wbGUsIGFuZCBlbnRyZWF0ZWQgdGhhdCBpdCBtaWdodAogICAgICAgICAgICAgICAgICAgIGJlIHBhcmRvbmVkIG9uIGFjY291bnQgb2YgdGhlaXIgaW5kaXNjcmV0aW9uLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgY29tcGxhaW5pbmcsIHRoYXQgYWZ0ZXIgdGhleSBoYWQgc3VlZCBmb3IgcGVhY2UsIGFuZCBoYWQgdm9sdW50YXJpbHkgc2VudAogICAgICAgICAgICAgICAgICAgIGVtYmFzc2Fkb3JzIGludG8gdGhlIGNvbnRpbmVudCBmb3IgdGhhdCBwdXJwb3NlLCB0aGV5IGhhZCBtYWRlIHdhciB3aXRob3V0IGEKICAgICAgICAgICAgICAgICAgICByZWFzb24sIHNhaWQgdGhhdCBoZSB3b3VsZCBwYXJkb24gdGhlaXIgaW5kaXNjcmV0aW9uLCBhbmQgaW1wb3NlZCBob3N0YWdlcywgYQogICAgICAgICAgICAgICAgICAgIHBhcnQgb2Ygd2hvbSB0aGV5IGdhdmUgaW1tZWRpYXRlbHk7IHRoZSByZXN0IHRoZXkgc2FpZCB0aGV5IHdvdWxkIGdpdmUgaW4gYSBmZXcKICAgICAgICAgICAgICAgICAgICBkYXlzLCBzaW5jZSB0aGV5IHdlcmUgc2VudCBmb3IgZnJvbSByZW1vdGUgcGxhY2VzLiBJbiB0aGUgbWVhbiB0aW1lIHRoZXkgb3JkZXJlZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHBlb3BsZSB0byByZXR1cm4gdG8gdGhlIGNvdW50cnkgcGFydHMsIGFuZCB0aGUgY2hpZWZzIGFzc2VtYmxlZCBmcm9tIGFsbAogICAgICAgICAgICAgICAgICAgIHF1YXJ0ZXIsIGFuZCBwcm9jZWVkZWQgdG8gc3VycmVuZGVyIHRoZW1zZWx2ZXMgYW5kIHRoZWlyIHN0YXRlcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdG8KICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGUgYWJvdXQgcGVhY2UuIFRoZXkgcHJvbWlzZWQgdG8gZ2l2ZSBob3N0YWdlcyBhbmQgcGVyZm9ybSB3aGF0IGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGNvbW1hbmQuIFRvZ2V0aGVyIHdpdGggdGhlc2UgZW1iYXNzYWRvcnMgY2FtZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbW1pdXM8L25hbWU+IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsdHJlYmF0aWFuPC9uYW1lPiwgd2hvLCBhcyBJIGhhdmUgYWJvdmUgc2FpZCwgaGFkIGJlZW4gc2VudCBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaW50byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+LiBIaW0KICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCBzZWl6ZWQgdXBvbiB3aGVuIGxlYXZpbmcgaGlzIHNoaXAsIGFsdGhvdWdoIGluIHRoZSBjaGFyYWN0ZXIgb2YKICAgICAgICAgICAgICAgICAgICBlbWJhc3NhZG9yIGhlIGJvcmUgdGhlIGdlbmVyYWwncyBjb21taXNzaW9uIHRvIHRoZW0sIGFuZCB0aHJvd24gaW50byBjaGFpbnM6CiAgICAgICAgICAgICAgICAgICAgdGhlbiBhZnRlciB0aGUgYmF0dGxlIHdhcyBmb3VnaHQsIHRoZXkgc2VudCBoaW0gYmFjaywgYW5kIGluIHN1aW5nIGZvciBwZWFjZQogICAgICAgICAgICAgICAgICAgIGNhc3QgdGhlIGJsYW1lIG9mIHRoYXQgYWN0IHVwb24gdGhlIGNvbW1vbiBwZW9wbGUsIGFuZCBlbnRyZWF0ZWQgdGhhdCBpdCBtaWdodAogICAgICAgICAgICAgICAgICAgIGJlIHBhcmRvbmVkIG9uIGFjY291bnQgb2YgdGhlaXIgaW5kaXNjcmV0aW9uLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgY29tcGxhaW5pbmcsIHRoYXQgYWZ0ZXIgdGhleSBoYWQgc3VlZCBmb3IgcGVhY2UsIGFuZCBoYWQgdm9sdW50YXJpbHkgc2VudAogICAgICAgICAgICAgICAgICAgIGVtYmFzc2Fkb3JzIGludG8gdGhlIGNvbnRpbmVudCBmb3IgdGhhdCBwdXJwb3NlLCB0aGV5IGhhZCBtYWRlIHdhciB3aXRob3V0IGEKICAgICAgICAgICAgICAgICAgICByZWFzb24sIHNhaWQgdGhhdCBoZSB3b3VsZCBwYXJkb24gdGhlaXIgaW5kaXNjcmV0aW9uLCBhbmQgaW1wb3NlZCBob3N0YWdlcywgYQogICAgICAgICAgICAgICAgICAgIHBhcnQgb2Ygd2hvbSB0aGV5IGdhdmUgaW1tZWRpYXRlbHk7IHRoZSByZXN0IHRoZXkgc2FpZCB0aGV5IHdvdWxkIGdpdmUgaW4gYSBmZXcKICAgICAgICAgICAgICAgICAgICBkYXlzLCBzaW5jZSB0aGV5IHdlcmUgc2VudCBmb3IgZnJvbSByZW1vdGUgcGxhY2VzLiBJbiB0aGUgbWVhbiB0aW1lIHRoZXkgb3JkZXJlZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHBlb3BsZSB0byByZXR1cm4gdG8gdGhlIGNvdW50cnkgcGFydHMsIGFuZCB0aGUgY2hpZWZzIGFzc2VtYmxlZCBmcm9tIGFsbAogICAgICAgICAgICAgICAgICAgIHF1YXJ0ZXIsIGFuZCBwcm9jZWVkZWQgdG8gc3VycmVuZGVyIHRoZW1zZWx2ZXMgYW5kIHRoZWlyIHN0YXRlcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['4.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkEgcGVhY2UgYmVpbmcgZXN0YWJsaXNoZWQgYnkgdGhlc2UgcHJvY2VlZGluZ3MgZm91ciBkYXlzIGFmdGVyIHdlIGhhZCBjb21lIGludG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgZWlnaHRlZW4gc2hpcHMsIHRvIHdoaWNoIHJlZmVyZW5jZSBoYXMgYmVlbiBtYWRlIGFib3ZlLCBhbmQgd2hpY2ggY29udmV5ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSwgc2V0IHNhaWwgZnJvbSB0aGUgdXBwZXIgcG9ydCB3aXRoIGEgZ2VudGxlIGdhbGUsIHdoZW4sIGhvd2V2ZXIsIHRoZXkKICAgICAgICAgICAgICAgICAgICB3ZXJlIGFwcHJvYWNoaW5nIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODY1MyIgcmVnPSJHcmVhdCBCcml0YWluIChpc2xhbmQpLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QnJpdGFpbjwvbmFtZT4gYW5kIHdlcmUKICAgICAgICAgICAgICAgICAgICBzZWVuIGZyb20gdGhlIGNhbXAsIHNvIGdyZWF0IGEgc3Rvcm0gc3VkZGVubHkgYXJvc2UgdGhhdCBub25lIG9mIHRoZW0gY291bGQKICAgICAgICAgICAgICAgICAgICBtYWludGFpbiB0aGVpciBjb3Vyc2UgYXQgc2VhOyBhbmQgc29tZSB3ZXJlIHRha2VuIGJhY2sgdG8gdGhlIHNhbWUgcG9ydCBmcm9tCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhleSBoYWQgc3RhcnRlZDstb3RoZXJzLCB0byB0aGVpciBncmVhdCBkYW5nZXIsIHdlcmUgZHJpdmVuIHRvIHRoZSBsb3dlcgogICAgICAgICAgICAgICAgICAgIHBhcnQgb2YgdGhlIGlzbGFuZCwgbmVhcmVyIHRvIHRoZSB3ZXN0OyB3aGljaCwgaG93ZXZlciwgYWZ0ZXIgaGF2aW5nIGNhc3QKICAgICAgICAgICAgICAgICAgICBhbmNob3IsIGFzIHRoZXkgd2VyZSBnZXR0aW5nIGZpbGxlZCB3aXRoIHdhdGVyLCBwdXQgb3V0IHRvIHNlYSB0aHJvdWdoIG5lY2Vzc2l0eQogICAgICAgICAgICAgICAgICAgIGluIGEgc3Rvcm15IG5pZ2h0LCBhbmQgbWFkZSBmb3IgdGhlIGNvbnRpbmVudC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODY1MyIgcmVnPSJHcmVhdCBCcml0YWluIChpc2xhbmQpLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QnJpdGFpbjwvbmFtZT4sIHRoZQogICAgICAgICAgICAgICAgICAgIGVpZ2h0ZWVuIHNoaXBzLCB0byB3aGljaCByZWZlcmVuY2UgaGFzIGJlZW4gbWFkZSBhYm92ZSwgYW5kIHdoaWNoIGNvbnZleWVkIHRoZQogICAgICAgICAgICAgICAgICAgIGNhdmFscnksIHNldCBzYWlsIGZyb20gdGhlIHVwcGVyIHBvcnQgd2l0aCBhIGdlbnRsZSBnYWxlLCB3aGVuLCBob3dldmVyLCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2VyZSBhcHByb2FjaGluZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+IGFuZCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgc2VlbiBmcm9tIHRoZSBjYW1wLCBzbyBncmVhdCBhIHN0b3JtIHN1ZGRlbmx5IGFyb3NlIHRoYXQgbm9uZSBvZiB0aGVtIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgbWFpbnRhaW4gdGhlaXIgY291cnNlIGF0IHNlYTsgYW5kIHNvbWUgd2VyZSB0YWtlbiBiYWNrIHRvIHRoZSBzYW1lIHBvcnQgZnJvbQogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXkgaGFkIHN0YXJ0ZWQ7LW90aGVycywgdG8gdGhlaXIgZ3JlYXQgZGFuZ2VyLCB3ZXJlIGRyaXZlbiB0byB0aGUgbG93ZXIKICAgICAgICAgICAgICAgICAgICBwYXJ0IG9mIHRoZSBpc2xhbmQsIG5lYXJlciB0byB0aGUgd2VzdDsgd2hpY2gsIGhvd2V2ZXIsIGFmdGVyIGhhdmluZyBjYXN0CiAgICAgICAgICAgICAgICAgICAgYW5jaG9yLCBhcyB0aGV5IHdlcmUgZ2V0dGluZyBmaWxsZWQgd2l0aCB3YXRlciwgcHV0IG91dCB0byBzZWEgdGhyb3VnaCBuZWNlc3NpdHkKICAgICAgICAgICAgICAgICAgICBpbiBhIHN0b3JteSBuaWdodCwgYW5kIG1hZGUgZm9yIHRoZSBjb250aW5lbnQuIDwvdHJhbnNsYXRpb24+"
translation['4.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IGhhcHBlbmVkIHRoYXQgbmlnaHQgdG8gYmUgZnVsbCBtb29uLCB3aGljaCB1c3VhbGx5IG9jY2FzaW9ucyB2ZXJ5IGhpZ2ggdGlkZXMKICAgICAgICAgICAgICAgICAgICBpbiB0aGF0IG9jZWFuOyBhbmQgdGhhdCBjaXJjdW1zdGFuY2Ugd2FzIHVua25vd24gdG8gb3VyIG1lbi4gVGh1cywgYXQgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICB0aW1lLCB0aGUgdGlkZSBiZWdhbiB0byBmaWxsIHRoZSBzaGlwcyBvZiB3YXIgd2hpY2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBwcm92aWRlZCB0byBjb252ZXkgb3ZlciBoaXMgYXJteSwgYW5kIHdoaWNoIGhlIGhhZCBkcmF3bgogICAgICAgICAgICAgICAgICAgIHVwIG9uIHRoZSBzdHJhbmQ7IGFuZCB0aGUgc3Rvcm0gYmVnYW4gdG8gZGFzaCB0aGUgc2hpcHMgb2YgYnVyZGVuIHdoaWNoIHdlcmUKICAgICAgICAgICAgICAgICAgICByaWRpbmcgYXQgYW5jaG9yIGFnYWluc3QgZWFjaCBvdGhlcjsgbm9yIHdhcyBhbnkgbWVhbnMgYWZmb3JkZWQgb3VyIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIGVpdGhlciBtYW5hZ2luZyB0aGVtIG9yIG9mIHJlbmRlcmluZyBhbnkgc2VydmljZS4gQSBncmVhdCBtYW55IHNoaXBzIGhhdmluZyBiZWVuCiAgICAgICAgICAgICAgICAgICAgd3JlY2tlZCwgaW5hc211Y2ggYXMgdGhlIHJlc3QsIGhhdmluZyBsb3N0IHRoZWlyIGNhYmxlcywgYW5jaG9ycywgYW5kIG90aGVyCiAgICAgICAgICAgICAgICAgICAgdGFja2xpbmcsIHdlcmUgdW5maXQgZm9yIHNhaWxpbmcsIGEgZ3JlYXQgY29uZnVzaW9uLCBhcyB3b3VsZCBuZWNlc3NhcmlseQogICAgICAgICAgICAgICAgICAgIGhhcHBlbiwgYXJvc2UgdGhyb3VnaG91dCB0aGUgYXJteTsgZm9yIHRoZXJlIHdlcmUgbm8gb3RoZXIgc2hpcHMgaW4gd2hpY2ggdGhleQogICAgICAgICAgICAgICAgICAgIGNvdWxkIGJlIGNvbnZleWVkIGJhY2ssIGFuZCBhbGwgdGhpbmdzIHdoaWNoIGFyZSBvZiBzZXJ2aWNlIGluIHJlcGFpcmluZyB2ZXNzZWxzCiAgICAgICAgICAgICAgICAgICAgd2VyZSB3YW50aW5nLCBhbmQsIGNvcm4gZm9yIHRoZSB3aW50ZXIgaGFkIG5vdCBiZWVuIHByb3ZpZGVkIGluIHRob3NlIHBsYWNlcywKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGl0IHdhcyB1bmRlcnN0b29kIGJ5IGFsbCB0aGF0IHRoZXkgd291bGQgY2VydGFpbmx5IHdpbnRlciBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIHByb3ZpZGVkIHRvIGNvbnZleSBvdmVyIGhpcyBhcm15LCBhbmQgd2hpY2ggaGUgaGFkIGRyYXduCiAgICAgICAgICAgICAgICAgICAgdXAgb24gdGhlIHN0cmFuZDsgYW5kIHRoZSBzdG9ybSBiZWdhbiB0byBkYXNoIHRoZSBzaGlwcyBvZiBidXJkZW4gd2hpY2ggd2VyZQogICAgICAgICAgICAgICAgICAgIHJpZGluZyBhdCBhbmNob3IgYWdhaW5zdCBlYWNoIG90aGVyOyBub3Igd2FzIGFueSBtZWFucyBhZmZvcmRlZCBvdXIgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgZWl0aGVyIG1hbmFnaW5nIHRoZW0gb3Igb2YgcmVuZGVyaW5nIGFueSBzZXJ2aWNlLiBBIGdyZWF0IG1hbnkgc2hpcHMgaGF2aW5nIGJlZW4KICAgICAgICAgICAgICAgICAgICB3cmVja2VkLCBpbmFzbXVjaCBhcyB0aGUgcmVzdCwgaGF2aW5nIGxvc3QgdGhlaXIgY2FibGVzLCBhbmNob3JzLCBhbmQgb3RoZXIKICAgICAgICAgICAgICAgICAgICB0YWNrbGluZywgd2VyZSB1bmZpdCBmb3Igc2FpbGluZywgYSBncmVhdCBjb25mdXNpb24sIGFzIHdvdWxkIG5lY2Vzc2FyaWx5CiAgICAgICAgICAgICAgICAgICAgaGFwcGVuLCBhcm9zZSB0aHJvdWdob3V0IHRoZSBhcm15OyBmb3IgdGhlcmUgd2VyZSBubyBvdGhlciBzaGlwcyBpbiB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgY291bGQgYmUgY29udmV5ZWQgYmFjaywgYW5kIGFsbCB0aGluZ3Mgd2hpY2ggYXJlIG9mIHNlcnZpY2UgaW4gcmVwYWlyaW5nIHZlc3NlbHMKICAgICAgICAgICAgICAgICAgICB3ZXJlIHdhbnRpbmcsIGFuZCwgY29ybiBmb3IgdGhlIHdpbnRlciBoYWQgbm90IGJlZW4gcHJvdmlkZWQgaW4gdGhvc2UgcGxhY2VzLAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgaXQgd2FzIHVuZGVyc3Rvb2QgYnkgYWxsIHRoYXQgdGhleSB3b3VsZCBjZXJ0YWlubHkgd2ludGVyIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['4.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk9uIGRpc2NvdmVyaW5nIHRoZXNlIHRoaW5ncyB0aGUgY2hpZWZzIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODY1MyIgcmVnPSJHcmVhdCBCcml0YWluIChpc2xhbmQpLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QnJpdGFpbjwvbmFtZT4sIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBjb21lIHVwIGFmdGVyIHRoZSBiYXR0bGUgd2FzIGZvdWdodCB0byBwZXJmb3JtIHRob3NlIGNvbmRpdGlvbnMgd2hpY2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBpbXBvc2VkLCBoZWxkIGEgY29uZmVyZW5jZSwgd2hlbiB0aGV5CiAgICAgICAgICAgICAgICAgICAgcGVyY2VpdmVkIHRoYXQgY2F2YWxyeSwgYW5kIHNoaXBzLCBhbmQgY29ybiB3ZXJlIHdhbnRpbmcgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LCBhbmQgZGlzY292ZXJlZCB0aGUgc21hbGwgbnVtYmVyIG9mIG91ciBzb2xkaWVycwogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHNtYWxsIGV4dGVudCBvZiB0aGUgY2FtcCAod2hpY2gsIHRvbywgd2FzIG9uIHRoaXMgYWNjb3VudCBtb3JlIGxpbWl0ZWQKICAgICAgICAgICAgICAgICAgICB0aGFuIG9yZGluYXJ5LCBiZWNhdXNlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgY29udmV5ZWQgb3ZlciBoaXMKICAgICAgICAgICAgICAgICAgICBsZWdpb25zIHdpdGhvdXQgYmFnZ2FnZSksIGFuZCB0aG91Z2h0IHRoYXQgdGhlIGJlc3QgcGxhbiB3YXMgdG8gcmVuZXcgdGhlIHdhciwKICAgICAgICAgICAgICAgICAgICBhbmQgY3V0IG9mZiBvdXIgbWVuIGZyb20gY29ybiBhbmQgcHJvdmlzaW9ucyBhbmQgcHJvdHJhY3QgdGhlIGFmZmFpciB0aWxsCiAgICAgICAgICAgICAgICAgICAgd2ludGVyOyBiZWNhdXNlIHRoZXkgZmVsdCBjb25maWRlbnQsIHRoYXQsIGlmIHRoZXkgd2VyZSB2YW5xdWlzaGVkIG9yIGN1dCBvZmYKICAgICAgICAgICAgICAgICAgICBmcm9tIGEgcmV0dXJuLCBubyBvbmUgd291bGQgYWZ0ZXJ3YXJkIHBhc3Mgb3ZlciBpbnRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODY1MyIgcmVnPSJHcmVhdCBCcml0YWluIChpc2xhbmQpLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QnJpdGFpbjwvbmFtZT4gZm9yIHRoZSBwdXJwb3NlIG9mIG1ha2luZyB3YXIuIFRoZXJlZm9yZSwgYWdhaW4gZW50ZXJpbmcKICAgICAgICAgICAgICAgICAgICBpbnRvIGEgY29uc3BpcmFjeSwgdGhleSBiZWdhbiB0byBkZXBhcnQgZnJvbSB0aGUgY2FtcCBieSBkZWdyZWVzIGFuZCBzZWNyZXRseQogICAgICAgICAgICAgICAgICAgIGJyaW5nIHVwIHRoZWlyIHBlb3BsZSBmcm9tIHRoZSBjb3VudHJ5IHBhcnRzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiwgd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIGNvbWUgdXAgYWZ0ZXIgdGhlIGJhdHRsZSB3YXMgZm91Z2h0IHRvIHBlcmZvcm0gdGhvc2UgY29uZGl0aW9ucyB3aGljaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIGltcG9zZWQsIGhlbGQgYSBjb25mZXJlbmNlLCB3aGVuIHRoZXkKICAgICAgICAgICAgICAgICAgICBwZXJjZWl2ZWQgdGhhdCBjYXZhbHJ5LCBhbmQgc2hpcHMsIGFuZCBjb3JuIHdlcmUgd2FudGluZyB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIGFuZCBkaXNjb3ZlcmVkIHRoZSBzbWFsbCBudW1iZXIgb2Ygb3VyIHNvbGRpZXJzCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgc21hbGwgZXh0ZW50IG9mIHRoZSBjYW1wICh3aGljaCwgdG9vLCB3YXMgb24gdGhpcyBhY2NvdW50IG1vcmUgbGltaXRlZAogICAgICAgICAgICAgICAgICAgIHRoYW4gb3JkaW5hcnksIGJlY2F1c2UgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBjb252ZXllZCBvdmVyIGhpcwogICAgICAgICAgICAgICAgICAgIGxlZ2lvbnMgd2l0aG91dCBiYWdnYWdlKSwgYW5kIHRob3VnaHQgdGhhdCB0aGUgYmVzdCBwbGFuIHdhcyB0byByZW5ldyB0aGUgd2FyLAogICAgICAgICAgICAgICAgICAgIGFuZCBjdXQgb2ZmIG91ciBtZW4gZnJvbSBjb3JuIGFuZCBwcm92aXNpb25zIGFuZCBwcm90cmFjdCB0aGUgYWZmYWlyIHRpbGwKICAgICAgICAgICAgICAgICAgICB3aW50ZXI7IGJlY2F1c2UgdGhleSBmZWx0IGNvbmZpZGVudCwgdGhhdCwgaWYgdGhleSB3ZXJlIHZhbnF1aXNoZWQgb3IgY3V0IG9mZgogICAgICAgICAgICAgICAgICAgIGZyb20gYSByZXR1cm4sIG5vIG9uZSB3b3VsZCBhZnRlcndhcmQgcGFzcyBvdmVyIGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiBmb3IgdGhlIHB1cnBvc2Ugb2YgbWFraW5nIHdhci4gVGhlcmVmb3JlLCBhZ2FpbiBlbnRlcmluZwogICAgICAgICAgICAgICAgICAgIGludG8gYSBjb25zcGlyYWN5LCB0aGV5IGJlZ2FuIHRvIGRlcGFydCBmcm9tIHRoZSBjYW1wIGJ5IGRlZ3JlZXMgYW5kIHNlY3JldGx5CiAgICAgICAgICAgICAgICAgICAgYnJpbmcgdXAgdGhlaXIgcGVvcGxlIGZyb20gdGhlIGNvdW50cnkgcGFydHMuIDwvdHJhbnNsYXRpb24+"
translation['4.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGFsdGhvdWdoIGhlIGhhZCBub3QgYXMgeWV0IGRpc2NvdmVyZWQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBtZWFzdXJlcywgeWV0LCBib3RoIGZyb20gd2hhdCBoYWQgb2NjdXJyZWQgdG8gaGlzIHNoaXBzLCBhbmQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2UgdGhhdCB0aGV5IGhhZCBuZWdsZWN0ZWQgdG8gZ2l2ZSB0aGUgcHJvbWlzZWQgaG9zdGFnZXMsIHN1c3BlY3RlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHRoaW5nIHdvdWxkIGNvbWUgdG8gcGFzcyB3aGljaCByZWFsbHkgZGlkIGhhcHBlbi4gSGUgdGhlcmVmb3JlIHByb3ZpZGVkCiAgICAgICAgICAgICAgICAgICAgcmVtZWRpZXMgYWdhaW5zdCBhbGwgY29udGluZ2VuY2llczsgZm9yIGhlIGRhaWx5IGNvbnZleWVkIGNvcm4gZnJvbSB0aGUgY291bnRyeQogICAgICAgICAgICAgICAgICAgIHBhcnRzIGludG8gdGhlIGNhbXAsIHVzZWQgdGhlIHRpbWJlciBhbmQgYnJhc3Mgb2Ygc3VjaCBzaGlwcyBhcyB3ZXJlIG1vc3QKICAgICAgICAgICAgICAgICAgICBzZXJpb3VzbHkgZGFtYWdlZCBmb3IgcmVwYWlyaW5nIHRoZSByZXN0LCBhbmQgb3JkZXJlZCB3aGF0ZXZlciB0aGluZ3MgYmVzaWRlcwogICAgICAgICAgICAgICAgICAgIHdlcmUgbmVjZXNzYXJ5IGZvciB0aGlzIG9iamVjdCB0byBiZSBicm91Z2h0IHRvIGhpbSBmcm9tIHRoZSBjb250aW5lbnQuIEFuZAogICAgICAgICAgICAgICAgICAgIHRodXMsIHNpbmNlIHRoYXQgYnVzaW5lc3Mgd2FzIGV4ZWN1dGVkIGJ5IHRoZSBzb2xkaWVycyB3aXRoIHRoZSBncmVhdGVzdCBlbmVyZ3ksCiAgICAgICAgICAgICAgICAgICAgaGUgZWZmZWN0ZWQgdGhhdCwgYWZ0ZXIgdGhlIGxvc3Mgb2YgdHdlbHZlIHNoaXBzLCBhIHZveWFnZSBjb3VsZCBiZSBtYWRlIHdlbGwKICAgICAgICAgICAgICAgICAgICBlbm91Z2ggaW4gdGhlIHJlc3QuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGFsdGhvdWdoIGhlIGhhZCBub3QgYXMgeWV0IGRpc2NvdmVyZWQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBtZWFzdXJlcywgeWV0LCBib3RoIGZyb20gd2hhdCBoYWQgb2NjdXJyZWQgdG8gaGlzIHNoaXBzLCBhbmQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2UgdGhhdCB0aGV5IGhhZCBuZWdsZWN0ZWQgdG8gZ2l2ZSB0aGUgcHJvbWlzZWQgaG9zdGFnZXMsIHN1c3BlY3RlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHRoaW5nIHdvdWxkIGNvbWUgdG8gcGFzcyB3aGljaCByZWFsbHkgZGlkIGhhcHBlbi4gSGUgdGhlcmVmb3JlIHByb3ZpZGVkCiAgICAgICAgICAgICAgICAgICAgcmVtZWRpZXMgYWdhaW5zdCBhbGwgY29udGluZ2VuY2llczsgZm9yIGhlIGRhaWx5IGNvbnZleWVkIGNvcm4gZnJvbSB0aGUgY291bnRyeQogICAgICAgICAgICAgICAgICAgIHBhcnRzIGludG8gdGhlIGNhbXAsIHVzZWQgdGhlIHRpbWJlciBhbmQgYnJhc3Mgb2Ygc3VjaCBzaGlwcyBhcyB3ZXJlIG1vc3QKICAgICAgICAgICAgICAgICAgICBzZXJpb3VzbHkgZGFtYWdlZCBmb3IgcmVwYWlyaW5nIHRoZSByZXN0LCBhbmQgb3JkZXJlZCB3aGF0ZXZlciB0aGluZ3MgYmVzaWRlcwogICAgICAgICAgICAgICAgICAgIHdlcmUgbmVjZXNzYXJ5IGZvciB0aGlzIG9iamVjdCB0byBiZSBicm91Z2h0IHRvIGhpbSBmcm9tIHRoZSBjb250aW5lbnQuIEFuZAogICAgICAgICAgICAgICAgICAgIHRodXMsIHNpbmNlIHRoYXQgYnVzaW5lc3Mgd2FzIGV4ZWN1dGVkIGJ5IHRoZSBzb2xkaWVycyB3aXRoIHRoZSBncmVhdGVzdCBlbmVyZ3ksCiAgICAgICAgICAgICAgICAgICAgaGUgZWZmZWN0ZWQgdGhhdCwgYWZ0ZXIgdGhlIGxvc3Mgb2YgdHdlbHZlIHNoaXBzLCBhIHZveWFnZSBjb3VsZCBiZSBtYWRlIHdlbGwKICAgICAgICAgICAgICAgICAgICBlbm91Z2ggaW4gdGhlIHJlc3QuIDwvdHJhbnNsYXRpb24+"
translation['4.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIHRoZXNlIHRoaW5ncyBhcmUgYmVpbmcgdHJhbnNhY3RlZCwgb25lIGxlZ2lvbiBoYWQgYmVlbiBzZW50IHRvIGZvcmFnZSwKICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gY3VzdG9tLCBhbmQgbm8gc3VzcGljaW9uIG9mIHdhciBoYWQgYXJpc2VuIGFzIHlldCwgYW5kIHNvbWUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHJlbWFpbmVkIGluIHRoZSBjb3VudHJ5IHBhcnRzLCBvdGhlcnMgd2VudCBiYWNrd2FyZCBhbmQgZm9yd2FyZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjYW1wLCB0aGV5IHdobyB3ZXJlIG9uIGR1dHkgYXQgdGhlIGdhdGVzIG9mIHRoZSBjYW1wIHJlcG9ydGVkIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0aGF0IGEgZ3JlYXRlciBkdXN0IHRoYW4gd2FzIHVzdWFsIHdhcyBzZWVuIGluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBkaXJlY3Rpb24gaW4gd2hpY2ggdGhlIGxlZ2lvbiBoYWQgbWFyY2hlZC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHN1c3BlY3RpbmcgdGhhdCB3aGljaCB3YXMgW3JlYWxseSB0aGUgY2FzZV0sLXRoYXQgc29tZSBuZXcgZW50ZXJwcmlzZSB3YXMKICAgICAgICAgICAgICAgICAgICB1bmRlcnRha2VuIGJ5IHRoZSBiYXJiYXJpYW5zLCBvcmRlcmVkIHRoZSB0d28gY29ob3J0cyB3aGljaCB3ZXJlIG9uIGR1dHksIHRvCiAgICAgICAgICAgICAgICAgICAgbWFyY2ggaW50byB0aGF0IHF1YXJ0ZXIgd2l0aCBoaW0sIGFuZCB0d28gb3RoZXIgY29ob3J0cyB0byByZWxpZXZlIHRoZW0gb24gZHV0eTsKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCB0byBiZSBhcm1lZCBhbmQgZm9sbG93IGhpbSBpbW1lZGlhdGVseS4gV2hlbiBoZSBoYWQgYWR2YW5jZWQgc29tZQogICAgICAgICAgICAgICAgICAgIGxpdHRsZSB3YXkgZnJvbSB0aGUgY2FtcCwgaGUgc2F3IHRoYXQgaGlzIG1lbiB3ZXJlIG92ZXJwb3dlcmVkIGJ5IHRoZSBlbmVteSBhbmQKICAgICAgICAgICAgICAgICAgICBzY2FyY2VseSBhYmxlIHRvIHN0YW5kIHRoZWlyIGdyb3VuZCwgYW5kIHRoYXQsIHRoZSBsZWdpb24gYmVpbmcgY3Jvd2RlZAogICAgICAgICAgICAgICAgICAgIHRvZ2V0aGVyLCB3ZWFwb25zIHdlcmUgYmVpbmcgY2FzdCBvbiB0aGVtIGZyb20gYWxsIHNpZGVzLiBGb3IgYXMgYWxsIHRoZSBjb3JuCiAgICAgICAgICAgICAgICAgICAgd2FzIHJlYXBlZCBpbiBldmVyeSBwYXJ0IHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBvbmUsIHRoZSBlbmVteSwgc3VzcGVjdGluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgb3VyIG1lbiB3b3VsZCByZXBhaXIgdG8gdGhhdCwgaGFkIGNvbmNlYWxlZCB0aGVtc2VsdmVzIGluIHRoZSB3b29kcyBkdXJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgbmlnaHQuIFRoZW4gYXR0YWNraW5nIHRoZW0gc3VkZGVubHksIHNjYXR0ZXJlZCBhcyB0aGV5IHdlcmUsIGFuZCB3aGVuIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgbGFpZCBhc2lkZSB0aGVpciBhcm1zLCBhbmQgd2VyZSBlbmdhZ2VkIGluIHJlYXBpbmcsIHRoZXkga2lsbGVkIGEgc21hbGwgbnVtYmVyLAogICAgICAgICAgICAgICAgICAgIHRocmV3IHRoZSByZXN0IGludG8gY29uZnVzaW9uLCBhbmQgc3Vycm91bmRlZCB0aGVtIHdpdGggdGhlaXIgY2F2YWxyeSBhbmQKICAgICAgICAgICAgICAgICAgICBjaGFyaW90cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0aGF0IGEgZ3JlYXRlciBkdXN0IHRoYW4gd2FzIHVzdWFsIHdhcyBzZWVuIGluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBkaXJlY3Rpb24gaW4gd2hpY2ggdGhlIGxlZ2lvbiBoYWQgbWFyY2hlZC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHN1c3BlY3RpbmcgdGhhdCB3aGljaCB3YXMgW3JlYWxseSB0aGUgY2FzZV0sLXRoYXQgc29tZSBuZXcgZW50ZXJwcmlzZSB3YXMKICAgICAgICAgICAgICAgICAgICB1bmRlcnRha2VuIGJ5IHRoZSBiYXJiYXJpYW5zLCBvcmRlcmVkIHRoZSB0d28gY29ob3J0cyB3aGljaCB3ZXJlIG9uIGR1dHksIHRvCiAgICAgICAgICAgICAgICAgICAgbWFyY2ggaW50byB0aGF0IHF1YXJ0ZXIgd2l0aCBoaW0sIGFuZCB0d28gb3RoZXIgY29ob3J0cyB0byByZWxpZXZlIHRoZW0gb24gZHV0eTsKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCB0byBiZSBhcm1lZCBhbmQgZm9sbG93IGhpbSBpbW1lZGlhdGVseS4gV2hlbiBoZSBoYWQgYWR2YW5jZWQgc29tZQogICAgICAgICAgICAgICAgICAgIGxpdHRsZSB3YXkgZnJvbSB0aGUgY2FtcCwgaGUgc2F3IHRoYXQgaGlzIG1lbiB3ZXJlIG92ZXJwb3dlcmVkIGJ5IHRoZSBlbmVteSBhbmQKICAgICAgICAgICAgICAgICAgICBzY2FyY2VseSBhYmxlIHRvIHN0YW5kIHRoZWlyIGdyb3VuZCwgYW5kIHRoYXQsIHRoZSBsZWdpb24gYmVpbmcgY3Jvd2RlZAogICAgICAgICAgICAgICAgICAgIHRvZ2V0aGVyLCB3ZWFwb25zIHdlcmUgYmVpbmcgY2FzdCBvbiB0aGVtIGZyb20gYWxsIHNpZGVzLiBGb3IgYXMgYWxsIHRoZSBjb3JuCiAgICAgICAgICAgICAgICAgICAgd2FzIHJlYXBlZCBpbiBldmVyeSBwYXJ0IHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBvbmUsIHRoZSBlbmVteSwgc3VzcGVjdGluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgb3VyIG1lbiB3b3VsZCByZXBhaXIgdG8gdGhhdCwgaGFkIGNvbmNlYWxlZCB0aGVtc2VsdmVzIGluIHRoZSB3b29kcyBkdXJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgbmlnaHQuIFRoZW4gYXR0YWNraW5nIHRoZW0gc3VkZGVubHksIHNjYXR0ZXJlZCBhcyB0aGV5IHdlcmUsIGFuZCB3aGVuIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgbGFpZCBhc2lkZSB0aGVpciBhcm1zLCBhbmQgd2VyZSBlbmdhZ2VkIGluIHJlYXBpbmcsIHRoZXkga2lsbGVkIGEgc21hbGwgbnVtYmVyLAogICAgICAgICAgICAgICAgICAgIHRocmV3IHRoZSByZXN0IGludG8gY29uZnVzaW9uLCBhbmQgc3Vycm91bmRlZCB0aGVtIHdpdGggdGhlaXIgY2F2YWxyeSBhbmQKICAgICAgICAgICAgICAgICAgICBjaGFyaW90cy4gPC90cmFuc2xhdGlvbj4="
translation['4.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZWlyIG1vZGUgb2YgZmlnaHRpbmcgd2l0aCB0aGVpciBjaGFyaW90cyBpcyB0aGlzOiBmaXJzdGx5LCB0aGV5IGRyaXZlIGFib3V0IGluCiAgICAgICAgICAgICAgICAgICAgYWxsIGRpcmVjdGlvbnMgYW5kIHRocm93IHRoZWlyIHdlYXBvbnMgYW5kIGdlbmVyYWxseSBicmVhayB0aGUgcmFua3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXkgd2l0aCB0aGUgdmVyeSBkcmVhZCBvZiB0aGVpciBob3JzZXMgYW5kIHRoZSBub2lzZSBvZiB0aGVpciB3aGVlbHM7IGFuZAogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhleSBoYXZlIHdvcmtlZCB0aGVtc2VsdmVzIGluIGJldHdlZW4gdGhlIHRyb29wcyBvZiBob3JzZSwgbGVhcCBmcm9tIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY2hhcmlvdHMgYW5kIGVuZ2FnZSBvbiBmb290LiBUaGUgY2hhcmlvdGVlcnMgaW4gdGhlIG1lYW4gdGltZSB3aXRoZHJhdyBzb21lCiAgICAgICAgICAgICAgICAgICAgbGl0dGxlIGRpc3RhbmNlIGZyb20gdGhlIGJhdHRsZSwgYW5kIHNvIHBsYWNlIHRoZW1zZWx2ZXMgd2l0aCB0aGUgY2hhcmlvdHMgdGhhdCwKICAgICAgICAgICAgICAgICAgICBpZiB0aGVpciBtYXN0ZXJzIGFyZSBvdmVycG93ZXJlZCBieSB0aGUgbnVtYmVyIG9mIHRoZSBlbmVteSwgdGhleSBtYXkgaGF2ZSBhCiAgICAgICAgICAgICAgICAgICAgcmVhZHkgcmV0cmVhdCB0byB0aGVpciBvd24gdHJvb3BzLiBUaHVzIHRoZXkgZGlzcGxheSBpbiBiYXR0bGUgdGhlIHNwZWVkIG9mCiAgICAgICAgICAgICAgICAgICAgaG9yc2UsIFt0b2dldGhlciB3aXRoXSB0aGUgZmlybW5lc3Mgb2YgaW5mYW50cnk7IGFuZCBieSBkYWlseSBwcmFjdGljZSBhbmQKICAgICAgICAgICAgICAgICAgICBleGVyY2lzZSBhdHRhaW4gdG8gc3VjaCBleHBlcnRuZXNzIHRoYXQgdGhleSBhcmUgYWNjdXN0b21lZCwgZXZlbiBvbiBhIGRlY2xpbmluZwogICAgICAgICAgICAgICAgICAgIGFuZCBzdGVlcCBwbGFjZSwgdG8gY2hlY2sgdGhlaXIgaG9yc2VzIGF0IGZ1bGwgc3BlZWQsIGFuZCBtYW5hZ2UgYW5kIHR1cm4gdGhlbQogICAgICAgICAgICAgICAgICAgIGluIGFuIGluc3RhbnQgYW5kIHJ1biBhbG9uZyB0aGUgcG9sZSwgYW5kIHN0YW5kIG9uIHRoZSB5b2tlLCBhbmQgdGhlbmNlIGJldGFrZQogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgd2l0aCB0aGUgZ3JlYXRlc3QgY2VsZXJpdHkgdG8gdGhlaXIgY2hhcmlvdHMgYWdhaW4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlVuZGVyIHRoZXNlIGNpcmN1bXN0YW5jZXMsIG91ciBtZW4gYmVpbmcgZGlzbWF5ZWQgYnkgdGhlIG5vdmVsdHkgb2YgdGhpcyBtb2RlIG9mCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbW9zdCBzZWFzb25hYmx5IGJyb3VnaHQgYXNzaXN0YW5jZTsgZm9yCiAgICAgICAgICAgICAgICAgICAgdXBvbiBoaXMgYXJyaXZhbCB0aGUgZW5lbXkgcGF1c2VkLCBhbmQgb3VyIG1lbiByZWNvdmVyZWQgZnJvbSB0aGVpciBmZWFyOyB1cG9uCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhpbmtpbmcgdGhlIHRpbWUgdW5mYXZvcmFibGUgZm9yIHByb3Zva2luZyB0aGUgZW5lbXkgYW5kIGNvbWluZyB0byBhbgogICAgICAgICAgICAgICAgICAgIGFjdGlvbiwgaGUga2VwdCBoaW1zZWxmIGluIGhpcyBvd24gcXVhcnRlciwgYW5kLCBhIHNob3J0IHRpbWUgaGF2aW5nIGludGVydmVuZWQsCiAgICAgICAgICAgICAgICAgICAgZHJldyBiYWNrIHRoZSBsZWdpb25zIGludG8gdGhlIGNhbXAuIFdoaWxlIHRoZXNlIHRoaW5ncyBhcmUgZ29pbmcgb24sIGFuZCBhbGwKICAgICAgICAgICAgICAgICAgICBvdXIgbWVuIGVuZ2FnZWQsIHRoZSByZXN0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJyaXRvbnM8L25hbWU+LCB3aG8gd2VyZSBpbiB0aGUgZmllbGRzLAogICAgICAgICAgICAgICAgICAgIGRlcGFydGVkLiBTdG9ybXMgdGhlbiBzZXQgaW4gZm9yIHNldmVyYWwgc3VjY2Vzc2l2ZSBkYXlzLCB3aGljaCBib3RoIGNvbmZpbmVkCiAgICAgICAgICAgICAgICAgICAgb3VyIG1lbiB0byB0aGUgY2FtcCBhbmQgaGluZGVyZWQgdGhlIGVuZW15IGZyb20gYXR0YWNraW5nIHVzLiBJbiB0aGUgbWVhbiB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGhlIGJhcmJhcmlhbnMgZGlzcGF0Y2hlZCBtZXNzZW5nZXJzIHRvIGFsbCBwYXJ0cywgYW5kIHJlcG9ydGVkIHRvIHRoZWlyIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIHRoZSBzbWFsbCBudW1iZXIgb2Ygb3VyIHNvbGRpZXJzLCBhbmQgaG93IGdvb2QgYW4gb3Bwb3J0dW5pdHkgd2FzIGdpdmVuIGZvcgogICAgICAgICAgICAgICAgICAgIG9idGFpbmluZyBzcG9pbCBhbmQgZm9yIGxpYmVyYXRpbmcgdGhlbXNlbHZlcyBmb3JldmVyLCBpZiB0aGV5IHNob3VsZCBvbmx5IGRyaXZlCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGZyb20gdGhlaXIgY2FtcC4gSGF2aW5nIGJ5IHRoZXNlIG1lYW5zCiAgICAgICAgICAgICAgICAgICAgc3BlZWRpbHkgZ290IHRvZ2V0aGVyIGEgbGFyZ2UgZm9yY2Ugb2YgaW5mYW50cnkgYW5kIG9mIGNhdmFscnkgdGhleSBjYW1lIHVwIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhbXAuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbW9zdCBzZWFzb25hYmx5IGJyb3VnaHQgYXNzaXN0YW5jZTsgZm9yCiAgICAgICAgICAgICAgICAgICAgdXBvbiBoaXMgYXJyaXZhbCB0aGUgZW5lbXkgcGF1c2VkLCBhbmQgb3VyIG1lbiByZWNvdmVyZWQgZnJvbSB0aGVpciBmZWFyOyB1cG9uCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhpbmtpbmcgdGhlIHRpbWUgdW5mYXZvcmFibGUgZm9yIHByb3Zva2luZyB0aGUgZW5lbXkgYW5kIGNvbWluZyB0byBhbgogICAgICAgICAgICAgICAgICAgIGFjdGlvbiwgaGUga2VwdCBoaW1zZWxmIGluIGhpcyBvd24gcXVhcnRlciwgYW5kLCBhIHNob3J0IHRpbWUgaGF2aW5nIGludGVydmVuZWQsCiAgICAgICAgICAgICAgICAgICAgZHJldyBiYWNrIHRoZSBsZWdpb25zIGludG8gdGhlIGNhbXAuIFdoaWxlIHRoZXNlIHRoaW5ncyBhcmUgZ29pbmcgb24sIGFuZCBhbGwKICAgICAgICAgICAgICAgICAgICBvdXIgbWVuIGVuZ2FnZWQsIHRoZSByZXN0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJyaXRvbnM8L25hbWU+LCB3aG8gd2VyZSBpbiB0aGUgZmllbGRzLAogICAgICAgICAgICAgICAgICAgIGRlcGFydGVkLiBTdG9ybXMgdGhlbiBzZXQgaW4gZm9yIHNldmVyYWwgc3VjY2Vzc2l2ZSBkYXlzLCB3aGljaCBib3RoIGNvbmZpbmVkCiAgICAgICAgICAgICAgICAgICAgb3VyIG1lbiB0byB0aGUgY2FtcCBhbmQgaGluZGVyZWQgdGhlIGVuZW15IGZyb20gYXR0YWNraW5nIHVzLiBJbiB0aGUgbWVhbiB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGhlIGJhcmJhcmlhbnMgZGlzcGF0Y2hlZCBtZXNzZW5nZXJzIHRvIGFsbCBwYXJ0cywgYW5kIHJlcG9ydGVkIHRvIHRoZWlyIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIHRoZSBzbWFsbCBudW1iZXIgb2Ygb3VyIHNvbGRpZXJzLCBhbmQgaG93IGdvb2QgYW4gb3Bwb3J0dW5pdHkgd2FzIGdpdmVuIGZvcgogICAgICAgICAgICAgICAgICAgIG9idGFpbmluZyBzcG9pbCBhbmQgZm9yIGxpYmVyYXRpbmcgdGhlbXNlbHZlcyBmb3JldmVyLCBpZiB0aGV5IHNob3VsZCBvbmx5IGRyaXZlCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGZyb20gdGhlaXIgY2FtcC4gSGF2aW5nIGJ5IHRoZXNlIG1lYW5zCiAgICAgICAgICAgICAgICAgICAgc3BlZWRpbHkgZ290IHRvZ2V0aGVyIGEgbGFyZ2UgZm9yY2Ugb2YgaW5mYW50cnkgYW5kIG9mIGNhdmFscnkgdGhleSBjYW1lIHVwIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhbXAuIDwvdHJhbnNsYXRpb24+"
translation['4.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFsdGhvdWdoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhbnRpY2lwYXRlZCB0aGF0IHRoZSBzYW1lIHRoaW5nIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGFkIGhhcHBlbmVkIG9uIGZvcm1lciBvY2Nhc2lvbnMgd291bGQgdGhlbiBvY2N1ci10aGF0LCBpZiB0aGUgZW5lbXkgd2VyZQogICAgICAgICAgICAgICAgICAgIHJvdXRlZCwgdGhleSB3b3VsZCBlc2NhcGUgZnJvbSBkYW5nZXIgYnkgdGhlaXIgc3BlZWQ7IHN0aWxsLCBoYXZpbmcgZ290IGFib3V0CiAgICAgICAgICAgICAgICAgICAgdGhpcnR5IGhvcnNlLCB3aGljaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbW1pdXM8L25hbWU+IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkF0cmViYXRpYW48L25hbWU+LCBvZiB3aG9tCiAgICAgICAgICAgICAgICAgICAgbWVudGlvbiBoYXMgYmVlbiBtYWRlLCBoYWQgYnJvdWdodCBvdmVyIHdpdGggaGltIFtmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2F1bF08L25hbWU+LCBoZQogICAgICAgICAgICAgICAgICAgIGRyZXcgdXAgdGhlIGxlZ2lvbnMgaW4gb3JkZXIgb2YgYmF0dGxlIGJlZm9yZSB0aGUgY2FtcC4gV2hlbiB0aGUgYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgY29tbWVuY2VkLCB0aGUgZW5lbXkgd2VyZSB1bmFibGUgdG8gc3VzdGFpbiB0aGUgYXR0YWNrIG9mIG91ciBtZW4gbG9uZywgYW5kCiAgICAgICAgICAgICAgICAgICAgdHVybmVkIHRoZWlyIGJhY2tzOyBvdXIgbWVuIHB1cnN1ZWQgdGhlbSBhcyBmYXIgYXMgdGhlaXIgc3BlZWQgYW5kIHN0cmVuZ3RoCiAgICAgICAgICAgICAgICAgICAgcGVybWl0dGVkLCBhbmQgc2xldyBhIGdyZWF0IG51bWJlciBvZiB0aGVtOyB0aGVuLCBoYXZpbmcgZGVzdHJveWVkIGFuZCBidXJuZWQKICAgICAgICAgICAgICAgICAgICBldmVyeSB0aGluZyBmYXIgYW5kIHdpZGUsIHRoZXkgcmV0cmVhdGVkIHRvIHRoZWlyIGNhbXAuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYW50aWNpcGF0ZWQgdGhhdCB0aGUgc2FtZSB0aGluZyB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhZCBoYXBwZW5lZCBvbiBmb3JtZXIgb2NjYXNpb25zIHdvdWxkIHRoZW4gb2NjdXItdGhhdCwgaWYgdGhlIGVuZW15IHdlcmUKICAgICAgICAgICAgICAgICAgICByb3V0ZWQsIHRoZXkgd291bGQgZXNjYXBlIGZyb20gZGFuZ2VyIGJ5IHRoZWlyIHNwZWVkOyBzdGlsbCwgaGF2aW5nIGdvdCBhYm91dAogICAgICAgICAgICAgICAgICAgIHRoaXJ0eSBob3JzZSwgd2hpY2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21taXVzPC9uYW1lPiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdHJlYmF0aWFuPC9uYW1lPiwgb2Ygd2hvbQogICAgICAgICAgICAgICAgICAgIG1lbnRpb24gaGFzIGJlZW4gbWFkZSwgaGFkIGJyb3VnaHQgb3ZlciB3aXRoIGhpbSBbZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxdPC9uYW1lPiwgaGUKICAgICAgICAgICAgICAgICAgICBkcmV3IHVwIHRoZSBsZWdpb25zIGluIG9yZGVyIG9mIGJhdHRsZSBiZWZvcmUgdGhlIGNhbXAuIFdoZW4gdGhlIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIGNvbW1lbmNlZCwgdGhlIGVuZW15IHdlcmUgdW5hYmxlIHRvIHN1c3RhaW4gdGhlIGF0dGFjayBvZiBvdXIgbWVuIGxvbmcsIGFuZAogICAgICAgICAgICAgICAgICAgIHR1cm5lZCB0aGVpciBiYWNrczsgb3VyIG1lbiBwdXJzdWVkIHRoZW0gYXMgZmFyIGFzIHRoZWlyIHNwZWVkIGFuZCBzdHJlbmd0aAogICAgICAgICAgICAgICAgICAgIHBlcm1pdHRlZCwgYW5kIHNsZXcgYSBncmVhdCBudW1iZXIgb2YgdGhlbTsgdGhlbiwgaGF2aW5nIGRlc3Ryb3llZCBhbmQgYnVybmVkCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgdGhpbmcgZmFyIGFuZCB3aWRlLCB0aGV5IHJldHJlYXRlZCB0byB0aGVpciBjYW1wLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBzYW1lIGRheSwgZW1iYXNzYWRvcnMgc2VudCBieSB0aGUgZW5lbXkgY2FtZSB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdG8gbmVnb3RpYXRlIGEgcGVhY2UuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBkb3VibGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIG51bWJlciBvZiBob3N0YWdlcyB3aGljaCBoZSBoYWQgYmVmb3JlIGRlbWFuZGVkOyBhbmQgb3JkZXJlZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgYnJvdWdodCBvdmVyIHRvIHRoZSBjb250aW5lbnQsIGJlY2F1c2UsIHNpbmNlIHRoZSB0aW1lIG9mIHRoZSBlcXVpbm94CiAgICAgICAgICAgICAgICAgICAgd2FzIG5lYXIsIGhlIGRpZCBub3QgY29uc2lkZXIgdGhhdCwgd2l0aCBoaXMgc2hpcHMgb3V0IG9mIHJlcGFpciwgdGhlIHZveWFnZQogICAgICAgICAgICAgICAgICAgIG91Z2h0IHRvIGJlIGRlZmVycmVkIHRpbGwgd2ludGVyLiBIYXZpbmcgbWV0IHdpdGggZmF2b3JhYmxlIHdlYXRoZXIsIGhlIHNldCBzYWlsCiAgICAgICAgICAgICAgICAgICAgYSBsaXR0bGUgYWZ0ZXIgbWlkbmlnaHQsIGFuZCBhbGwgaGlzIGZsZWV0IGFycml2ZWQgc2FmZSBhdCB0aGUgY29udGluZW50LCBleGNlcHQKICAgICAgICAgICAgICAgICAgICB0d28gb2YgdGhlIHNoaXBzIG9mIGJ1cmRlbiB3aGljaCBjb3VsZCBub3QgbWFrZSB0aGUgc2FtZSBwb3J0IHdoaWNoIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIHNoaXBzIGRpZCwgYW5kIHdlcmUgY2FycmllZCBhIGxpdHRsZSBsb3dlciBkb3duLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRvIG5lZ290aWF0ZSBhIHBlYWNlLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZG91YmxlZAogICAgICAgICAgICAgICAgICAgIHRoZSBudW1iZXIgb2YgaG9zdGFnZXMgd2hpY2ggaGUgaGFkIGJlZm9yZSBkZW1hbmRlZDsgYW5kIG9yZGVyZWQgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJlIGJyb3VnaHQgb3ZlciB0byB0aGUgY29udGluZW50LCBiZWNhdXNlLCBzaW5jZSB0aGUgdGltZSBvZiB0aGUgZXF1aW5veAogICAgICAgICAgICAgICAgICAgIHdhcyBuZWFyLCBoZSBkaWQgbm90IGNvbnNpZGVyIHRoYXQsIHdpdGggaGlzIHNoaXBzIG91dCBvZiByZXBhaXIsIHRoZSB2b3lhZ2UKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBiZSBkZWZlcnJlZCB0aWxsIHdpbnRlci4gSGF2aW5nIG1ldCB3aXRoIGZhdm9yYWJsZSB3ZWF0aGVyLCBoZSBzZXQgc2FpbAogICAgICAgICAgICAgICAgICAgIGEgbGl0dGxlIGFmdGVyIG1pZG5pZ2h0LCBhbmQgYWxsIGhpcyBmbGVldCBhcnJpdmVkIHNhZmUgYXQgdGhlIGNvbnRpbmVudCwgZXhjZXB0CiAgICAgICAgICAgICAgICAgICAgdHdvIG9mIHRoZSBzaGlwcyBvZiBidXJkZW4gd2hpY2ggY291bGQgbm90IG1ha2UgdGhlIHNhbWUgcG9ydCB3aGljaCB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBzaGlwcyBkaWQsIGFuZCB3ZXJlIGNhcnJpZWQgYSBsaXR0bGUgbG93ZXIgZG93bi4gPC90cmFuc2xhdGlvbj4="
translation['4.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gb3VyIHNvbGRpZXJzLCBhYm91dCAzMDAgaW4gbnVtYmVyLCBoYWQgYmVlbiBkcmF3biBvdXQgb2YgdGhlc2UgdHdvIHNoaXBzLAogICAgICAgICAgICAgICAgICAgIGFuZCB3ZXJlIG1hcmNoaW5nIHRvIHRoZSBjYW1wLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3Jpbmk8L25hbWU+LCB3aG9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgd2hlbiBzZXR0aW5nIGZvcnRoIGZvciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+LCBoYWQKICAgICAgICAgICAgICAgICAgICBsZWZ0IGluIGEgc3RhdGUgb2YgcGVhY2UsIGV4Y2l0ZWQgYnkgdGhlIGhvcGUgb2Ygc3BvaWwsIGF0IGZpcnN0IHN1cnJvdW5kZWQgdGhlbQogICAgICAgICAgICAgICAgICAgIHdpdGggYSBzbWFsbCBudW1iZXIgb2YgbWVuLCBhbmQgb3JkZXJlZCB0aGVtIHRvIGxheSBkb3duIHRoZWlyIGFybXMsIGlmIHRoZXkgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IHdpc2ggdG8gYmUgc2xhaW47IGFmdGVyd2FyZCBob3dldmVyLCB3aGVuIHRoZXksIGZvcm1pbmcgYSBjaXJjbGUsIHN0b29kIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZGVmZW5zZSwgYSBzaG91dCB3YXMgcmFpc2VkIGFuZCBhYm91dCA2MDAwIG9mIHRoZSBlbmVteSBzb29uIGFzc2VtYmxlZDsKICAgICAgICAgICAgICAgICAgICB3aGljaCBiZWluZyByZXBvcnRlZCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHNlbnQgYWxsIHRoZSBjYXZhbHJ5IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhbXAgYXMgYSByZWxpZWYgdG8gaGlzIG1lbi4gSW4gdGhlIG1lYW4gdGltZSBvdXIgc29sZGllcnMgc3VzdGFpbmVkIHRoZQogICAgICAgICAgICAgICAgICAgIGF0dGFjayBvZiB0aGUgZW5lbXksIGFuZCBmb3VnaHQgbW9zdCB2YWxpYW50bHkgZm9yIG1vcmUgdGhhbiBmb3VyIGhvdXJzLCBhbmQsCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nIGJ1dCBmZXcgd291bmRzIHRoZW1zZWx2ZXMsIHNsZXcgc2V2ZXJhbCBvZiB0aGVtLiBCdXQgYWZ0ZXIgb3VyIGNhdmFscnkKICAgICAgICAgICAgICAgICAgICBjYW1lIGluIHNpZ2h0LCB0aGUgZW5lbXksIHRocm93aW5nIGF3YXkgdGhlaXIgYXJtcywgdHVybmVkIHRoZWlyIGJhY2tzLCBhbmQgYQogICAgICAgICAgICAgICAgICAgIGdyZWF0IG51bWJlciBvZiB0aGVtIHdlcmUga2lsbGVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3Jpbmk8L25hbWU+LCB3aG9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgd2hlbiBzZXR0aW5nIGZvcnRoIGZvciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+LCBoYWQKICAgICAgICAgICAgICAgICAgICBsZWZ0IGluIGEgc3RhdGUgb2YgcGVhY2UsIGV4Y2l0ZWQgYnkgdGhlIGhvcGUgb2Ygc3BvaWwsIGF0IGZpcnN0IHN1cnJvdW5kZWQgdGhlbQogICAgICAgICAgICAgICAgICAgIHdpdGggYSBzbWFsbCBudW1iZXIgb2YgbWVuLCBhbmQgb3JkZXJlZCB0aGVtIHRvIGxheSBkb3duIHRoZWlyIGFybXMsIGlmIHRoZXkgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IHdpc2ggdG8gYmUgc2xhaW47IGFmdGVyd2FyZCBob3dldmVyLCB3aGVuIHRoZXksIGZvcm1pbmcgYSBjaXJjbGUsIHN0b29kIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZGVmZW5zZSwgYSBzaG91dCB3YXMgcmFpc2VkIGFuZCBhYm91dCA2MDAwIG9mIHRoZSBlbmVteSBzb29uIGFzc2VtYmxlZDsKICAgICAgICAgICAgICAgICAgICB3aGljaCBiZWluZyByZXBvcnRlZCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHNlbnQgYWxsIHRoZSBjYXZhbHJ5IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhbXAgYXMgYSByZWxpZWYgdG8gaGlzIG1lbi4gSW4gdGhlIG1lYW4gdGltZSBvdXIgc29sZGllcnMgc3VzdGFpbmVkIHRoZQogICAgICAgICAgICAgICAgICAgIGF0dGFjayBvZiB0aGUgZW5lbXksIGFuZCBmb3VnaHQgbW9zdCB2YWxpYW50bHkgZm9yIG1vcmUgdGhhbiBmb3VyIGhvdXJzLCBhbmQsCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nIGJ1dCBmZXcgd291bmRzIHRoZW1zZWx2ZXMsIHNsZXcgc2V2ZXJhbCBvZiB0aGVtLiBCdXQgYWZ0ZXIgb3VyIGNhdmFscnkKICAgICAgICAgICAgICAgICAgICBjYW1lIGluIHNpZ2h0LCB0aGUgZW5lbXksIHRocm93aW5nIGF3YXkgdGhlaXIgYXJtcywgdHVybmVkIHRoZWlyIGJhY2tzLCBhbmQgYQogICAgICAgICAgICAgICAgICAgIGdyZWF0IG51bWJlciBvZiB0aGVtIHdlcmUga2lsbGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.38'] = ""
translation['5.1'] = ""
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlc2UgdGhpbmdzIGJlaW5nIGZpbmlzaGVkLCBhbmQgdGhlIGFzc2l6ZXMgYmVpbmcgY29uY2x1ZGVkLCBoZSByZXR1cm5zIGludG8KICAgICAgICAgICAgICAgICAgICBIaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgcHJvY2VlZHMgdGhlbmNlIHRvIHRoZSBhcm15LiBXaGVuIGhlIGhhZCBhcnJpdmVkIHRoZXJlLAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBtYWRlIGEgc3VydmV5IG9mIHRoZSB3aW50ZXIgcXVhcnRlciwgaGUgZmluZHMgdGhhdCwgYnkgdGhlIGV4dHJhb3JkaW5hcnkKICAgICAgICAgICAgICAgICAgICBhcmRvciBvZiB0aGUgc29sZGllcnMsIGFtaWQgdGhlIHV0bW9zdCBzY2FyY2l0eSBvZiBhbGwgbWF0ZXJpYWxzLCBhYm91dCBzaXgKICAgICAgICAgICAgICAgICAgICBodW5kcmVkIHNoaXBzIG9mIHRoYXQga2luZCB3aGljaCB3ZSBoYXZlIGRlc2NyaWJlZCBhYm92ZSBhbmQgdHdlbnR5LWVpZ2h0IHNoaXBzCiAgICAgICAgICAgICAgICAgICAgb2Ygd2FyLCBoYWQgYmVlbiBidWlsdCwgYW5kIHdlcmUgbm90IGZhciBmcm9tIHRoYXQgc3RhdGUsIHRoYXQgdGhleSBtaWdodCBiZQogICAgICAgICAgICAgICAgICAgIGxhdW5jaGVkIGluIGEgZmV3IGRheXMuIEhhdmluZyBjb21tZW5kZWQgdGhlIHNvbGRpZXJzIGFuZCB0aG9zZSB3aG8gaGFkIHByZXNpZGVkCiAgICAgICAgICAgICAgICAgICAgb3ZlciB0aGUgd29yaywgaGUgaW5mb3JtcyB0aGVtIHdoYXQgaGUgd2lzaGVzIHRvIGJlIGRvbmUsIGFuZCBvcmRlcnMgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHNoaXBzIHRvIGFzc2VtYmxlIGF0IHBvcnQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5JdGl1czwvbmFtZT4sIGZyb20gd2hpY2ggcG9ydCBoZSBoYWQgbGVhcm5lZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHBhc3NhZ2UgaW50byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgIHNob3J0ZXN0LCBbYmVpbmcgb25seV0gYWJvdXQgdGhpcnR5IG1pbGVzIGZyb20gdGhlIGNvbnRpbmVudC4gSGUgbGVmdCB3aGF0CiAgICAgICAgICAgICAgICAgICAgc2VlbWVkIGEgc3VmZmljaWVudCBudW1iZXIgb2Ygc29sZGllcnMgZm9yIHRoYXQgZGVzaWduOyBoZSBoaW1zZWxmIHByb2NlZWRzIGludG8KICAgICAgICAgICAgICAgICAgICB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4gd2l0aCBmb3VyIGxlZ2lvbnMgd2l0aG91dCBiYWdnYWdlLCBhbmQgODAwIGhvcnNlLCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgdGhleSBuZWl0aGVyIGNhbWUgdG8gdGhlIGdlbmVyYWwgZGlldHMgW29mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2F1bF08L25hbWU+LCBub3Igb2JleWVkIGhpcwogICAgICAgICAgICAgICAgICAgIGNvbW1hbmRzLCBhbmQgd2VyZSBtb3Jlb3Zlciwgc2FpZCB0byBiZSB0YW1wZXJpbmcgd2l0aCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGJleW9uZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgcHJvY2VlZHMgdGhlbmNlIHRvIHRoZSBhcm15LiBXaGVuIGhlIGhhZCBhcnJpdmVkIHRoZXJlLAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBtYWRlIGEgc3VydmV5IG9mIHRoZSB3aW50ZXIgcXVhcnRlciwgaGUgZmluZHMgdGhhdCwgYnkgdGhlIGV4dHJhb3JkaW5hcnkKICAgICAgICAgICAgICAgICAgICBhcmRvciBvZiB0aGUgc29sZGllcnMsIGFtaWQgdGhlIHV0bW9zdCBzY2FyY2l0eSBvZiBhbGwgbWF0ZXJpYWxzLCBhYm91dCBzaXgKICAgICAgICAgICAgICAgICAgICBodW5kcmVkIHNoaXBzIG9mIHRoYXQga2luZCB3aGljaCB3ZSBoYXZlIGRlc2NyaWJlZCBhYm92ZSBhbmQgdHdlbnR5LWVpZ2h0IHNoaXBzCiAgICAgICAgICAgICAgICAgICAgb2Ygd2FyLCBoYWQgYmVlbiBidWlsdCwgYW5kIHdlcmUgbm90IGZhciBmcm9tIHRoYXQgc3RhdGUsIHRoYXQgdGhleSBtaWdodCBiZQogICAgICAgICAgICAgICAgICAgIGxhdW5jaGVkIGluIGEgZmV3IGRheXMuIEhhdmluZyBjb21tZW5kZWQgdGhlIHNvbGRpZXJzIGFuZCB0aG9zZSB3aG8gaGFkIHByZXNpZGVkCiAgICAgICAgICAgICAgICAgICAgb3ZlciB0aGUgd29yaywgaGUgaW5mb3JtcyB0aGVtIHdoYXQgaGUgd2lzaGVzIHRvIGJlIGRvbmUsIGFuZCBvcmRlcnMgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHNoaXBzIHRvIGFzc2VtYmxlIGF0IHBvcnQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5JdGl1czwvbmFtZT4sIGZyb20gd2hpY2ggcG9ydCBoZSBoYWQgbGVhcm5lZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHBhc3NhZ2UgaW50byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgIHNob3J0ZXN0LCBbYmVpbmcgb25seV0gYWJvdXQgdGhpcnR5IG1pbGVzIGZyb20gdGhlIGNvbnRpbmVudC4gSGUgbGVmdCB3aGF0CiAgICAgICAgICAgICAgICAgICAgc2VlbWVkIGEgc3VmZmljaWVudCBudW1iZXIgb2Ygc29sZGllcnMgZm9yIHRoYXQgZGVzaWduOyBoZSBoaW1zZWxmIHByb2NlZWRzIGludG8KICAgICAgICAgICAgICAgICAgICB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4gd2l0aCBmb3VyIGxlZ2lvbnMgd2l0aG91dCBiYWdnYWdlLCBhbmQgODAwIGhvcnNlLCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgdGhleSBuZWl0aGVyIGNhbWUgdG8gdGhlIGdlbmVyYWwgZGlldHMgW29mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2F1bF08L25hbWU+LCBub3Igb2JleWVkIGhpcwogICAgICAgICAgICAgICAgICAgIGNvbW1hbmRzLCBhbmQgd2VyZSBtb3Jlb3Zlciwgc2FpZCB0byBiZSB0YW1wZXJpbmcgd2l0aCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGJleW9uZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['5.3'] = ""
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCB0aG91Z2ggaGUgZGlzY2VybmVkIGZyb20gd2hhdCBtb3RpdmUgdGhlc2UKICAgICAgICAgICAgICAgICAgICB0aGluZ3Mgd2VyZSBzYWlkLCBhbmQgd2hhdCBjaXJjdW1zdGFuY2VzIGRldGVycmVkIGhpbSBmcm9tIGhpcyBtZWRpdGF0ZWQgcGxhbiwKICAgICAgICAgICAgICAgICAgICBzdGlsbCwgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBub3QgYmUgY29tcGVsbGVkIHRvIHdhc3RlIHRoZSBzdW1tZXIgYW1vbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4sIHdoaWxlIGFsbCB0aGluZ3Mgd2VyZSBwcmVwYXJlZCBmb3IgdGhlIHdhciB3aXRoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODY1MyIgcmVnPSJHcmVhdCBCcml0YWluIChpc2xhbmQpLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QnJpdGFpbjwvbmFtZT4sIG9yZGVyZWQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbmR1dGlvbWFydXM8L25hbWU+IHRvIGNvbWUgdG8gaGltIHdpdGggMjAwIGhvc3RhZ2VzLiBXaGVuIHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQsIFthbmRdIGFtb25nIHRoZW0gaGlzIHNvbiBhbmQgbmVhciByZWxhdGlvbnMsIHdob20gaGUgaGFkIGRlbWFuZGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgbmFtZSwgaGUgY29uc29sZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbmR1dGlvbWFydXM8L25hbWU+LCBhbmQgZW5qb2luZWQgaGltIHRvIGNvbnRpbnVlIGluIGhpcwogICAgICAgICAgICAgICAgICAgIGFsbGVnaWFuY2U7IHlldCwgbmV2ZXJ0aGVsZXNzLCBzdW1tb25pbmcgdG8gaGltIHRoZSBjaGllZiBtZW4gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4sIGhlIHJlY29uY2lsZWQgdGhlbSBpbmRpdmlkdWFsbHkgdG8KICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpbmdldG9yaXg8L25hbWU+OiB0aGlzIGhlIGJvdGggdGhvdWdodCBzaG91bGQgYmUgZG9uZSBieSBoaW0gaW4ganVzdGljZQogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBtZXJpdHMgb2YgdGhlIGxhdHRlciwgYW5kIGFsc28ganVkZ2VkIHRoYXQgaXQgd2FzIG9mIGdyZWF0IGltcG9ydGFuY2UKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBpbmZsdWVuY2Ugb2Ygb25lIHdob3NlIHNpbmd1bGFyIGF0dGFjaG1lbnQgdG93YXJkIGhpbSBoZSBoYWQgZnVsbHkKICAgICAgICAgICAgICAgICAgICBzZWVuLCBzaG91bGQgcHJldmFpbCBhcyBtdWNoIGFzIHBvc3NpYmxlIGFtb25nIGhpcyBwZW9wbGUuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5kdXRpb21hcnVzPC9uYW1lPiB3YXMgdmVyeSBtdWNoIG9mZmVuZGVkIGF0IHRoaXMgYWN0LCBbc2VlaW5nIHRoYXRdCiAgICAgICAgICAgICAgICAgICAgaGlzIGluZmx1ZW5jZSB3YXMgZGltaW5pc2hlZCBhbW9uZyBoaXMgY291bnRyeW1lbjsgYW5kIGhlLCB3aG8gYWxyZWFkeSBiZWZvcmUKICAgICAgICAgICAgICAgICAgICBoYWQgYm9ybmUgYSBob3N0aWxlIG1pbmQgdG93YXJkIHVzLCB3YXMgbXVjaCBtb3JlIHZpb2xlbnRseSBpbmZsYW1lZCBhZ2FpbnN0IHVzCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCByZXNlbnRtZW50IGF0IHRoaXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgdGhvdWdoIGhlIGRpc2Nlcm5lZCBmcm9tIHdoYXQgbW90aXZlIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzIHdlcmUgc2FpZCwgYW5kIHdoYXQgY2lyY3Vtc3RhbmNlcyBkZXRlcnJlZCBoaW0gZnJvbSBoaXMgbWVkaXRhdGVkIHBsYW4sCiAgICAgICAgICAgICAgICAgICAgc3RpbGwsIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgbm90IGJlIGNvbXBlbGxlZCB0byB3YXN0ZSB0aGUgc3VtbWVyIGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NDciIHJlZz0iICArVHJpZXIgWzYuNjUsNDkuNzVdIChpbmhhYml0ZWQgcGxhY2UpLCBUcmllciwgUmhlaW5sYW5kLVBmYWx6LCBHZXJtYW55LCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+VHJldmlyaSA8L25hbWU+LCB3aGlsZSBhbGwgdGhpbmdzIHdlcmUgcHJlcGFyZWQgZm9yIHRoZSB3YXIgd2l0aCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+LCBvcmRlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5kdXRpb21hcnVzPC9uYW1lPiB0byBjb21lIHRvIGhpbSB3aXRoIDIwMCBob3N0YWdlcy4gV2hlbiB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBicm91Z2h0LCBbYW5kXSBhbW9uZyB0aGVtIGhpcyBzb24gYW5kIG5lYXIgcmVsYXRpb25zLCB3aG9tIGhlIGhhZCBkZW1hbmRlZCBieQogICAgICAgICAgICAgICAgICAgIG5hbWUsIGhlIGNvbnNvbGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5kdXRpb21hcnVzPC9uYW1lPiwgYW5kIGVuam9pbmVkIGhpbSB0byBjb250aW51ZSBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBhbGxlZ2lhbmNlOyB5ZXQsIG5ldmVydGhlbGVzcywgc3VtbW9uaW5nIHRvIGhpbSB0aGUgY2hpZWYgbWVuIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NDciIHJlZz0iICArVHJpZXIgWzYuNjUsNDkuNzVdIChpbmhhYml0ZWQgcGxhY2UpLCBUcmllciwgUmhlaW5sYW5kLVBmYWx6LCBHZXJtYW55LCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+VHJldmlyaSA8L25hbWU+LCBoZSByZWNvbmNpbGVkIHRoZW0gaW5kaXZpZHVhbGx5IHRvCiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaW5nZXRvcml4PC9uYW1lPjogdGhpcyBoZSBib3RoIHRob3VnaHQgc2hvdWxkIGJlIGRvbmUgYnkgaGltIGluIGp1c3RpY2UKICAgICAgICAgICAgICAgICAgICB0byB0aGUgbWVyaXRzIG9mIHRoZSBsYXR0ZXIsIGFuZCBhbHNvIGp1ZGdlZCB0aGF0IGl0IHdhcyBvZiBncmVhdCBpbXBvcnRhbmNlCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgaW5mbHVlbmNlIG9mIG9uZSB3aG9zZSBzaW5ndWxhciBhdHRhY2htZW50IHRvd2FyZCBoaW0gaGUgaGFkIGZ1bGx5CiAgICAgICAgICAgICAgICAgICAgc2Vlbiwgc2hvdWxkIHByZXZhaWwgYXMgbXVjaCBhcyBwb3NzaWJsZSBhbW9uZyBoaXMgcGVvcGxlLgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkluZHV0aW9tYXJ1czwvbmFtZT4gd2FzIHZlcnkgbXVjaCBvZmZlbmRlZCBhdCB0aGlzIGFjdCwgW3NlZWluZyB0aGF0XQogICAgICAgICAgICAgICAgICAgIGhpcyBpbmZsdWVuY2Ugd2FzIGRpbWluaXNoZWQgYW1vbmcgaGlzIGNvdW50cnltZW47IGFuZCBoZSwgd2hvIGFscmVhZHkgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgaGFkIGJvcm5lIGEgaG9zdGlsZSBtaW5kIHRvd2FyZCB1cywgd2FzIG11Y2ggbW9yZSB2aW9sZW50bHkgaW5mbGFtZWQgYWdhaW5zdCB1cwogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggcmVzZW50bWVudCBhdCB0aGlzLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlc2UgbWF0dGVycyBiZWluZyBzZXR0bGVkLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2VudCB0byBwb3J0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXRpdXM8L25hbWU+IHdpdGggdGhlIGxlZ2lvbnMuIFRoZXJlIGhlIGRpc2NvdmVycyB0aGF0IGZvcnR5IHNoaXBzLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhhZCBiZWVuIGJ1aWx0IGluIHRoZSBjb3VudHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgwMDgiIHJlZz0iICArTWVhdXggWzIuOSw0OC45NjZdIChpbmhhYml0ZWQgcGxhY2UpLCBTZWluZS1ldC1NYXJuZSwgSWxlLWRlLUZyYW5jZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TWVsZGkgPC9uYW1lPiwgaGF2aW5nIGJlZW4gZHJpdmVuIGJhY2sgYnkgYSBzdG9ybSwgaGFkIGJlZW4gdW5hYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgbWFpbnRhaW4gdGhlaXIgY291cnNlLCBhbmQgaGFkIHJldHVybmVkIHRvIHRoZSBzYW1lIHBvcnQgZnJvbSB3aGljaCB0aGV5IGhhZCBzZXQKICAgICAgICAgICAgICAgICAgICBvdXQ7IGhlIGZpbmRzIHRoZSByZXN0IHJlYWR5IGZvciBzYWlsaW5nLCBhbmQgZnVybmlzaGVkIHdpdGggZXZlcnkgdGhpbmcuIEluIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgcGxhY2UsIHRoZSBjYXZhbHJ5IG9mIHRoZSB3aG9sZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGluIG51bWJlciA0LDAwMCwKICAgICAgICAgICAgICAgICAgICBhc3NlbWJsZXMsIGFuZCBbYWxzb10gdGhlIGNoaWVmIHBlcnNvbnMgb2YgYWxsIHRoZSBzdGF0ZXM7IGhlIGhhZCBkZXRlcm1pbmVkIHRvCiAgICAgICAgICAgICAgICAgICAgbGVhdmUgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGEgdmVyeSBmZXcgb2YgdGhlbSwgd2hvc2UKICAgICAgICAgICAgICAgICAgICBmaWRlbGl0eSB0b3dhcmQgaGltIGhlIGhhZCBjbGVhcmx5IGRpc2Nlcm5lZCwgYW5kIHRha2UgdGhlIHJlc3Qgd2l0aCBoaW0gYXMKICAgICAgICAgICAgICAgICAgICBob3N0YWdlczsgYmVjYXVzZSBoZSBmZWFyZWQgYSBjb21tb3Rpb24gaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IHdoZW4gaGUgc2hvdWxkIGJlIGFic2VudC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdlbnQgdG8gcG9ydAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkl0aXVzPC9uYW1lPiB3aXRoIHRoZSBsZWdpb25zLiBUaGVyZSBoZSBkaXNjb3ZlcnMgdGhhdCBmb3J0eSBzaGlwcywKICAgICAgICAgICAgICAgICAgICB3aGljaCBoYWQgYmVlbiBidWlsdCBpbiB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MDA4IiByZWc9IiAgK01lYXV4IFsyLjksNDguOTY2XSAoaW5oYWJpdGVkIHBsYWNlKSwgU2VpbmUtZXQtTWFybmUsIElsZS1kZS1GcmFuY2UsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPk1lbGRpIDwvbmFtZT4sIGhhdmluZyBiZWVuIGRyaXZlbiBiYWNrIGJ5IGEgc3Rvcm0sIGhhZCBiZWVuIHVuYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIG1haW50YWluIHRoZWlyIGNvdXJzZSwgYW5kIGhhZCByZXR1cm5lZCB0byB0aGUgc2FtZSBwb3J0IGZyb20gd2hpY2ggdGhleSBoYWQgc2V0CiAgICAgICAgICAgICAgICAgICAgb3V0OyBoZSBmaW5kcyB0aGUgcmVzdCByZWFkeSBmb3Igc2FpbGluZywgYW5kIGZ1cm5pc2hlZCB3aXRoIGV2ZXJ5IHRoaW5nLiBJbiB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIHBsYWNlLCB0aGUgY2F2YWxyeSBvZiB0aGUgd2hvbGUgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBpbiBudW1iZXIgNCwwMDAsCiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibGVzLCBhbmQgW2Fsc29dIHRoZSBjaGllZiBwZXJzb25zIG9mIGFsbCB0aGUgc3RhdGVzOyBoZSBoYWQgZGV0ZXJtaW5lZCB0bwogICAgICAgICAgICAgICAgICAgIGxlYXZlIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBhIHZlcnkgZmV3IG9mIHRoZW0sIHdob3NlCiAgICAgICAgICAgICAgICAgICAgZmlkZWxpdHkgdG93YXJkIGhpbSBoZSBoYWQgY2xlYXJseSBkaXNjZXJuZWQsIGFuZCB0YWtlIHRoZSByZXN0IHdpdGggaGltIGFzCiAgICAgICAgICAgICAgICAgICAgaG9zdGFnZXM7IGJlY2F1c2UgaGUgZmVhcmVkIGEgY29tbW90aW9uIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB3aGVuIGhlIHNob3VsZCBiZSBhYnNlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.6'] = ""
translation['5.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGF2aW5nIGxlYXJuZWQgdGhpcyBmYWN0LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGJlY2F1c2UgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgY29uZmVycmVkIHNvIG11Y2ggaG9ub3IgdXBvbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+IHN0YXRlLCBkZXRlcm1pbmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1ub3JpeDwvbmFtZT4gc2hvdWxkIGJlIHJlc3RyYWluZWQgYW5kIGRldGVycmVkIGJ5IHdoYXRldmVyIG1lYW5zIGhlCiAgICAgICAgICAgICAgICAgICAgY291bGQ7IGFuZCB0aGF0LCBiZWNhdXNlIGhlIHBlcmNlaXZlZCBoaXMgaW5zYW5lIGRlc2lnbnMgdG8gYmUgcHJvY2VlZGluZwogICAgICAgICAgICAgICAgICAgIGZ1cnRoZXIgYW5kIGZ1cnRoZXIsIGNhcmUgc2hvdWxkIGJlIHRha2VuIGxlc3QgaGUgbWlnaHQgYmUgYWJsZSB0byBpbmp1cmUgaGltCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBjb21tb253ZWFsdGguIFRoZXJlZm9yZSwgaGF2aW5nIHN0YXllZCBhYm91dCB0d2VudHktZml2ZSBkYXlzIGluIHRoYXQKICAgICAgICAgICAgICAgICAgICBwbGFjZSwgYmVjYXVzZSB0aGUgbm9ydGggd2luZCwgd2hpY2ggdXN1YWxseSBibG93cyBhIGdyZWF0IHBhcnQgb2YgZXZlcnkgc2Vhc29uLAogICAgICAgICAgICAgICAgICAgIHByZXZlbnRlZCB0aGUgdm95YWdlLCBoZSBleGVydGVkIGhpbXNlbGYgdG8ga2VlcCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5vcml4PC9uYW1lPiBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBhbGxlZ2lhbmNlIFthbmRdIG5ldmVydGhlbGVzcyBsZWFybiBhbGwgaGlzIG1lYXN1cmVzOiBoYXZpbmcgYXQgbGVuZ3RoIG1ldCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZmF2b3JhYmxlIHdlYXRoZXIsIGhlIG9yZGVycyB0aGUgZm9vdCBzb2xkaWVycyBhbmQgdGhlIGhvcnNlIHRvIGVtYmFyayBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzaGlwcy4gQnV0LCB3aGlsZSB0aGUgbWluZHMgb2YgYWxsIHdlcmUgb2NjdXBpZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbm9yaXg8L25hbWU+IGJlZ2FuIHRvCiAgICAgICAgICAgICAgICAgICAgdGFrZSBoaXMgZGVwYXJ0dXJlIGZyb20gdGhlIGNhbXAgaG9tZXdhcmQgd2l0aCB0aGUgY2F2YWxyeSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBiZWluZyBpZ25vcmFudCBvZiBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBvbiB0aGlzIG1hdHRlciBiZWluZyByZXBvcnRlZCB0byBoaW0sCiAgICAgICAgICAgICAgICAgICAgY2Vhc2luZyBmcm9tIGhpcyBleHBlZGl0aW9uIGFuZCBkZWZlcnJpbmcgYWxsIG90aGVyIGFmZmFpcnMsIHNlbmRzIGEgZ3JlYXQgcGFydAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBjYXZhbHJ5IHRvIHB1cnN1ZSBoaW0sIGFuZCBjb21tYW5kcyB0aGF0IGhlIGJlIGJyb3VnaHQgYmFjazsgaGUgb3JkZXJzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpZiBoZSB1c2UgdmlvbGVuY2UgYW5kIGRvIG5vdCBzdWJtaXQsIHRoYXQgaGUgYmUgc2xhaW47IGNvbnNpZGVyaW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1ub3JpeDwvbmFtZT4gd291bGQgZG8gbm90aGluZyBhcyBhIHJhdGlvbmFsIG1hbiB3aGlsZSBoZSBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgd2FzIGFic2VudCwgc2luY2UgaGUgaGFkIGRpc3JlZ2FyZGVkIGhpcyBjb21tYW5kIGV2ZW4gd2hlbiBwcmVzZW50LiBIZSwgaG93ZXZlciwKICAgICAgICAgICAgICAgICAgICB3aGVuIHJlY2FsbGVkLCBiZWdhbiB0byByZXNpc3QgYW5kIGRlZmVuZCBoaW1zZWxmIHdpdGggaGlzIGhhbmQsIGFuZCBpbXBsb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIHN1cHBvcnQgb2YgaGlzIHBlb3BsZSwgb2Z0ZW4gZXhjbGFpbWluZyB0aGF0ICJoZSB3YXMgZnJlZSBhbmQgdGhlIHN1YmplY3Qgb2YgYQogICAgICAgICAgICAgICAgICAgIGZyZWUgc3RhdGUuIiBUaGV5IHN1cnJvdW5kIGFuZCBraWxsIHRoZSBtYW4gYXMgdGhleSBoYWQgYmVlbiBjb21tYW5kZWQ7IGJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+IGhvcnNlbWVuIGFsbCByZXR1cm4gdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGJlY2F1c2UgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgY29uZmVycmVkIHNvIG11Y2ggaG9ub3IgdXBvbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+IHN0YXRlLCBkZXRlcm1pbmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1ub3JpeDwvbmFtZT4gc2hvdWxkIGJlIHJlc3RyYWluZWQgYW5kIGRldGVycmVkIGJ5IHdoYXRldmVyIG1lYW5zIGhlCiAgICAgICAgICAgICAgICAgICAgY291bGQ7IGFuZCB0aGF0LCBiZWNhdXNlIGhlIHBlcmNlaXZlZCBoaXMgaW5zYW5lIGRlc2lnbnMgdG8gYmUgcHJvY2VlZGluZwogICAgICAgICAgICAgICAgICAgIGZ1cnRoZXIgYW5kIGZ1cnRoZXIsIGNhcmUgc2hvdWxkIGJlIHRha2VuIGxlc3QgaGUgbWlnaHQgYmUgYWJsZSB0byBpbmp1cmUgaGltCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBjb21tb253ZWFsdGguIFRoZXJlZm9yZSwgaGF2aW5nIHN0YXllZCBhYm91dCB0d2VudHktZml2ZSBkYXlzIGluIHRoYXQKICAgICAgICAgICAgICAgICAgICBwbGFjZSwgYmVjYXVzZSB0aGUgbm9ydGggd2luZCwgd2hpY2ggdXN1YWxseSBibG93cyBhIGdyZWF0IHBhcnQgb2YgZXZlcnkgc2Vhc29uLAogICAgICAgICAgICAgICAgICAgIHByZXZlbnRlZCB0aGUgdm95YWdlLCBoZSBleGVydGVkIGhpbXNlbGYgdG8ga2VlcCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5vcml4PC9uYW1lPiBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBhbGxlZ2lhbmNlIFthbmRdIG5ldmVydGhlbGVzcyBsZWFybiBhbGwgaGlzIG1lYXN1cmVzOiBoYXZpbmcgYXQgbGVuZ3RoIG1ldCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZmF2b3JhYmxlIHdlYXRoZXIsIGhlIG9yZGVycyB0aGUgZm9vdCBzb2xkaWVycyBhbmQgdGhlIGhvcnNlIHRvIGVtYmFyayBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzaGlwcy4gQnV0LCB3aGlsZSB0aGUgbWluZHMgb2YgYWxsIHdlcmUgb2NjdXBpZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbm9yaXg8L25hbWU+IGJlZ2FuIHRvCiAgICAgICAgICAgICAgICAgICAgdGFrZSBoaXMgZGVwYXJ0dXJlIGZyb20gdGhlIGNhbXAgaG9tZXdhcmQgd2l0aCB0aGUgY2F2YWxyeSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBiZWluZyBpZ25vcmFudCBvZiBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBvbiB0aGlzIG1hdHRlciBiZWluZyByZXBvcnRlZCB0byBoaW0sCiAgICAgICAgICAgICAgICAgICAgY2Vhc2luZyBmcm9tIGhpcyBleHBlZGl0aW9uIGFuZCBkZWZlcnJpbmcgYWxsIG90aGVyIGFmZmFpcnMsIHNlbmRzIGEgZ3JlYXQgcGFydAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBjYXZhbHJ5IHRvIHB1cnN1ZSBoaW0sIGFuZCBjb21tYW5kcyB0aGF0IGhlIGJlIGJyb3VnaHQgYmFjazsgaGUgb3JkZXJzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpZiBoZSB1c2UgdmlvbGVuY2UgYW5kIGRvIG5vdCBzdWJtaXQsIHRoYXQgaGUgYmUgc2xhaW47IGNvbnNpZGVyaW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1ub3JpeDwvbmFtZT4gd291bGQgZG8gbm90aGluZyBhcyBhIHJhdGlvbmFsIG1hbiB3aGlsZSBoZSBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgd2FzIGFic2VudCwgc2luY2UgaGUgaGFkIGRpc3JlZ2FyZGVkIGhpcyBjb21tYW5kIGV2ZW4gd2hlbiBwcmVzZW50LiBIZSwgaG93ZXZlciwKICAgICAgICAgICAgICAgICAgICB3aGVuIHJlY2FsbGVkLCBiZWdhbiB0byByZXNpc3QgYW5kIGRlZmVuZCBoaW1zZWxmIHdpdGggaGlzIGhhbmQsIGFuZCBpbXBsb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIHN1cHBvcnQgb2YgaGlzIHBlb3BsZSwgb2Z0ZW4gZXhjbGFpbWluZyB0aGF0ICJoZSB3YXMgZnJlZSBhbmQgdGhlIHN1YmplY3Qgb2YgYQogICAgICAgICAgICAgICAgICAgIGZyZWUgc3RhdGUuIiBUaGV5IHN1cnJvdW5kIGFuZCBraWxsIHRoZSBtYW4gYXMgdGhleSBoYWQgYmVlbiBjb21tYW5kZWQ7IGJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+IGhvcnNlbWVuIGFsbCByZXR1cm4gdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiB0aGVzZSB0aGluZ3Mgd2VyZSBkb25lIFthbmRdIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+LCBsZWZ0IG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnRpbmVudCB3aXRoIHRocmVlIGxlZ2lvbnMgYW5kIDIsMDAwIGhvcnNlLCB0byBkZWZlbmQgdGhlIGhhcmJvcnMgYW5kIHByb3ZpZGUKICAgICAgICAgICAgICAgICAgICBjb3JuLCBhbmQgZGlzY292ZXIgd2hhdCB3YXMgZ29pbmcgb24gaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgdGFrZSBtZWFzdXJlcwogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byB0aGUgb2NjYXNpb24gYW5kIGFjY29yZGluZyB0byB0aGUgY2lyY3Vtc3RhbmNlOyBoZSBoaW1zZWxmLCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZml2ZSBsZWdpb25zIGFuZCBhIG51bWJlciBvZiBob3JzZSwgZXF1YWwgdG8gdGhhdCB3aGljaCBoZSB3YXMgbGVhdmluZyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb250aW5lbnQsIHNldCBzYWlsIGF0IHN1bi1zZXQsIGFuZCBbdGhvdWdoIGZvciBhIHRpbWVdIGJvcm5lIGZvcndhcmQgYnkgYQogICAgICAgICAgICAgICAgICAgIGdlbnRsZSBzb3V0aC13ZXN0IHdpbmQsIGhlIGRpZCBub3QgbWFpbnRhaW4gaGlzIGNvdXJzZSwgaW4gY29uc2VxdWVuY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgd2luZCBkeWluZyBhd2F5IGFib3V0IG1pZG5pZ2h0LCBhbmQgYmVpbmcgY2FycmllZCBvbiB0b28gZmFyIGJ5IHRoZSB0aWRlLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlIHN1biByb3NlLCBlc3BpZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiBwYXNzZWQKICAgICAgICAgICAgICAgICAgICBvbiBoaXMgbGVmdC4gVGhlbiwgYWdhaW4sIGZvbGxvd2luZyB0aGUgY2hhbmdlIG9mIHRpZGUsIGhlIHVyZ2VkIG9uIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgb2FycyB0aGF0IGhlIG1pZ2h0IG1ha2UgdGhhdCBwYXJ0IG9mIHRoZSBpc2xhbmQgaW4gd2hpY2ggaGUgaGFkIGRpc2NvdmVyZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlY2VkaW5nIHN1bW1lciwgdGhhdCB0aGVyZSB3YXMgdGhlIGJlc3QgbGFuZGluZy1wbGFjZSwgYW5kIGluIHRoaXMgYWZmYWlyIHRoZQogICAgICAgICAgICAgICAgICAgIHNwaXJpdCBvZiBvdXIgc29sZGllcnMgd2FzIHZlcnkgbXVjaCB0byBiZSBleHRvbGxlZDsgZm9yIHRoZXkgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRzIGFuZCBoZWF2eSBzaGlwcywgdGhlIGxhYm9yIG9mIHJvd2luZyBub3QgYmVpbmcgW2ZvciBhIG1vbWVudF0KICAgICAgICAgICAgICAgICAgICBkaXNjb250aW51ZWQsIGVxdWFsZWQgdGhlIHNwZWVkIG9mIHRoZSBzaGlwcyBvZiB3YXIuIEFsbCB0aGUgc2hpcHMgcmVhY2hlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+IG5lYXJseQogICAgICAgICAgICAgICAgICAgIGF0IG1pZC1kYXk7IG5vciB3YXMgdGhlcmUgc2VlbiBhIFtzaW5nbGVdIGVuZW15IGluIHRoYXQgcGxhY2UsIGJ1dCwgYXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGFmdGVyd2FyZCBmb3VuZCBmcm9tIHNvbWUgcHJpc29uZXJzLCB0aG91Z2ggbGFyZ2UKICAgICAgICAgICAgICAgICAgICBib2RpZXMgb2YgdHJvb3BzIGhhZCBhc3NlbWJsZWQgdGhlcmUsIHlldCBiZWluZyBhbGFybWVkIGJ5IHRoZSBncmVhdCBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICBvdXIgc2hpcHMsIG1vcmUgdGhhbiBlaWdodCBodW5kcmVkIG9mIHdoaWNoLCBpbmNsdWRpbmcgdGhlIHNoaXBzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHByZWNlZGluZyB5ZWFyLCBhbmQgdGhvc2UgcHJpdmF0ZSB2ZXNzZWxzIHdoaWNoIGVhY2ggaGFkIGJ1aWx0IGZvciBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgY29udmVuaWVuY2UsIGhhZCBhcHBlYXJlZCBhdCBvbmUgdGltZSwgdGhleSBoYWQgcXVpdHRlZCB0aGUgY29hc3QgYW5kIGNvbmNlYWxlZAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgYW1vbmcgdGhlIGhpZ2hlciBwb2ludHMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+LCBsZWZ0IG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnRpbmVudCB3aXRoIHRocmVlIGxlZ2lvbnMgYW5kIDIsMDAwIGhvcnNlLCB0byBkZWZlbmQgdGhlIGhhcmJvcnMgYW5kIHByb3ZpZGUKICAgICAgICAgICAgICAgICAgICBjb3JuLCBhbmQgZGlzY292ZXIgd2hhdCB3YXMgZ29pbmcgb24gaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgdGFrZSBtZWFzdXJlcwogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byB0aGUgb2NjYXNpb24gYW5kIGFjY29yZGluZyB0byB0aGUgY2lyY3Vtc3RhbmNlOyBoZSBoaW1zZWxmLCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZml2ZSBsZWdpb25zIGFuZCBhIG51bWJlciBvZiBob3JzZSwgZXF1YWwgdG8gdGhhdCB3aGljaCBoZSB3YXMgbGVhdmluZyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb250aW5lbnQsIHNldCBzYWlsIGF0IHN1bi1zZXQsIGFuZCBbdGhvdWdoIGZvciBhIHRpbWVdIGJvcm5lIGZvcndhcmQgYnkgYQogICAgICAgICAgICAgICAgICAgIGdlbnRsZSBzb3V0aC13ZXN0IHdpbmQsIGhlIGRpZCBub3QgbWFpbnRhaW4gaGlzIGNvdXJzZSwgaW4gY29uc2VxdWVuY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgd2luZCBkeWluZyBhd2F5IGFib3V0IG1pZG5pZ2h0LCBhbmQgYmVpbmcgY2FycmllZCBvbiB0b28gZmFyIGJ5IHRoZSB0aWRlLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlIHN1biByb3NlLCBlc3BpZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiBwYXNzZWQKICAgICAgICAgICAgICAgICAgICBvbiBoaXMgbGVmdC4gVGhlbiwgYWdhaW4sIGZvbGxvd2luZyB0aGUgY2hhbmdlIG9mIHRpZGUsIGhlIHVyZ2VkIG9uIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgb2FycyB0aGF0IGhlIG1pZ2h0IG1ha2UgdGhhdCBwYXJ0IG9mIHRoZSBpc2xhbmQgaW4gd2hpY2ggaGUgaGFkIGRpc2NvdmVyZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlY2VkaW5nIHN1bW1lciwgdGhhdCB0aGVyZSB3YXMgdGhlIGJlc3QgbGFuZGluZy1wbGFjZSwgYW5kIGluIHRoaXMgYWZmYWlyIHRoZQogICAgICAgICAgICAgICAgICAgIHNwaXJpdCBvZiBvdXIgc29sZGllcnMgd2FzIHZlcnkgbXVjaCB0byBiZSBleHRvbGxlZDsgZm9yIHRoZXkgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRzIGFuZCBoZWF2eSBzaGlwcywgdGhlIGxhYm9yIG9mIHJvd2luZyBub3QgYmVpbmcgW2ZvciBhIG1vbWVudF0KICAgICAgICAgICAgICAgICAgICBkaXNjb250aW51ZWQsIGVxdWFsZWQgdGhlIHNwZWVkIG9mIHRoZSBzaGlwcyBvZiB3YXIuIEFsbCB0aGUgc2hpcHMgcmVhY2hlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+IG5lYXJseQogICAgICAgICAgICAgICAgICAgIGF0IG1pZC1kYXk7IG5vciB3YXMgdGhlcmUgc2VlbiBhIFtzaW5nbGVdIGVuZW15IGluIHRoYXQgcGxhY2UsIGJ1dCwgYXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGFmdGVyd2FyZCBmb3VuZCBmcm9tIHNvbWUgcHJpc29uZXJzLCB0aG91Z2ggbGFyZ2UKICAgICAgICAgICAgICAgICAgICBib2RpZXMgb2YgdHJvb3BzIGhhZCBhc3NlbWJsZWQgdGhlcmUsIHlldCBiZWluZyBhbGFybWVkIGJ5IHRoZSBncmVhdCBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICBvdXIgc2hpcHMsIG1vcmUgdGhhbiBlaWdodCBodW5kcmVkIG9mIHdoaWNoLCBpbmNsdWRpbmcgdGhlIHNoaXBzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHByZWNlZGluZyB5ZWFyLCBhbmQgdGhvc2UgcHJpdmF0ZSB2ZXNzZWxzIHdoaWNoIGVhY2ggaGFkIGJ1aWx0IGZvciBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgY29udmVuaWVuY2UsIGhhZCBhcHBlYXJlZCBhdCBvbmUgdGltZSwgdGhleSBoYWQgcXVpdHRlZCB0aGUgY29hc3QgYW5kIGNvbmNlYWxlZAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgYW1vbmcgdGhlIGhpZ2hlciBwb2ludHMuIDwvdHJhbnNsYXRpb24+"
translation['5.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgZGlzZW1iYXJrZWQgaGlzIGFybXkgYW5kIGNob3NlbiBhCiAgICAgICAgICAgICAgICAgICAgY29udmVuaWVudCBwbGFjZSBmb3IgdGhlIGNhbXAsIHdoZW4gaGUgZGlzY292ZXJlZCBmcm9tIHRoZSBwcmlzb25lcnMgaW4gd2hhdAogICAgICAgICAgICAgICAgICAgIHBhcnQgdGhlIGZvcmNlcyBvZiB0aGUgZW5lbXkgaGFkIGxvZGdlZCB0aGVtc2VsdmVzLCBoYXZpbmcgbGVmdCB0ZW4gY29ob3J0cyBhbmQKICAgICAgICAgICAgICAgICAgICAzMDAgaG9yc2UgYXQgdGhlIHNlYSwgdG8gYmUgYSBndWFyZCB0byB0aGUgc2hpcHMsIGhhc3RlbnMgdG8gdGhlIGVuZW15LCBhdCB0aGUKICAgICAgICAgICAgICAgICAgICB0aGlyZCB3YXRjaCwgZmVhcmluZyB0aGUgbGVzcyBmb3IgdGhlIHNoaXBzLCBmb3IgdGhpcyByZWFzb24gYmVjYXVzZSBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBsZWF2aW5nIHRoZW0gZmFzdGVuZWQgYXQgYW5jaG9yIHVwb24gYW4gZXZlbiBhbmQgb3BlbiBzaG9yZTsgYW5kIGhlIHBsYWNlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlEuIEF0cml1czwvbmFtZT4gb3ZlciB0aGUgZ3VhcmQgb2YgdGhlIHNoaXBzLiBIZSBoaW1zZWxmLCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZCBieSBuaWdodCBhYm91dCB0d2VsdmUgbWlsZXMsIGVzcGllZCB0aGUgZm9yY2VzIG9mIHRoZSBlbmVteS4gVGhleSwKICAgICAgICAgICAgICAgICAgICBhZHZhbmNpbmcgdG8gdGhlIHJpdmVyIHdpdGggdGhlaXIgY2F2YWxyeSBhbmQgY2hhcmlvdHMgZnJvbSB0aGUgaGlnaGVyIGdyb3VuZCwKICAgICAgICAgICAgICAgICAgICBiZWdhbiB0byBhbm5veSBvdXIgbWVuIGFuZCBnaXZlIGJhdHRsZS4gQmVpbmcgcmVwdWxzZWQgYnkgb3VyIGNhdmFscnksIHRoZXkKICAgICAgICAgICAgICAgICAgICBjb25jZWFsZWQgdGhlbXNlbHZlcyBpbiB3b29kcywgYXMgdGhleSBoYWQgc2VjdXJlZCBhIHBsYWNlIGFkbWlyYWJseSBmb3J0aWZpZWQKICAgICAgICAgICAgICAgICAgICBieSBuYXR1cmUgYW5kIGJ5IGFydCwgd2hpY2gsIGFzIGl0IHNlZW1lZCwgdGhleSBoYWQgYmVmb3JlIHByZXBhcmVkIG9uIGFjY291bnQKICAgICAgICAgICAgICAgICAgICBvZiBhIGNpdmlsIHdhcjsgZm9yIGFsbCBlbnRyYW5jZXMgdG8gaXQgd2VyZSBzaHV0IHVwIGJ5IGEgZ3JlYXQgbnVtYmVyIG9mIGZlbGxlZAogICAgICAgICAgICAgICAgICAgIHRyZWVzLiBUaGV5IHRoZW1zZWx2ZXMgcnVzaGVkIG91dCBvZiB0aGUgd29vZHMgdG8gZmlnaHQgaGVyZSBhbmQgdGhlcmUsIGFuZAogICAgICAgICAgICAgICAgICAgIHByZXZlbnRlZCBvdXIgbWVuIGZyb20gZW50ZXJpbmcgdGhlaXIgZm9ydGlmaWNhdGlvbnMuIEJ1dCB0aGUgc29sZGllcnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2V2ZW50aCBsZWdpb24sIGhhdmluZyBmb3JtZWQgYSB0ZXN0dWRvIGFuZCB0aHJvd24gdXAgYSByYW1wYXJ0IGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9ydGlmaWNhdGlvbiwgdG9vayB0aGUgcGxhY2UgYW5kIGRyb3ZlIHRoZW0gb3V0IG9mIHRoZSB3b29kcywgcmVjZWl2aW5nIG9ubHkgYQogICAgICAgICAgICAgICAgICAgIGZldyB3b3VuZHMuIEJ1dCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZm9yYmFkZSBoaXMgbWVuIHRvIHB1cnN1ZSB0aGVtCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlaXIgZmxpZ2h0IGFueSBncmVhdCBkaXN0YW5jZTsgYm90aCBiZWNhdXNlIGhlIHdhcyBpZ25vcmFudCBvZiB0aGUgbmF0dXJlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGdyb3VuZCwgYW5kIGJlY2F1c2UsIGFzIGEgZ3JlYXQgcGFydCBvZiB0aGUgZGF5IHdhcyBzcGVudCwgaGUgd2lzaGVkIHRpbWUKICAgICAgICAgICAgICAgICAgICB0byBiZSBsZWZ0IGZvciB0aGUgZm9ydGlmaWNhdGlvbiBvZiB0aGUgY2FtcC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIGRpc2VtYmFya2VkIGhpcyBhcm15IGFuZCBjaG9zZW4gYQogICAgICAgICAgICAgICAgICAgIGNvbnZlbmllbnQgcGxhY2UgZm9yIHRoZSBjYW1wLCB3aGVuIGhlIGRpc2NvdmVyZWQgZnJvbSB0aGUgcHJpc29uZXJzIGluIHdoYXQKICAgICAgICAgICAgICAgICAgICBwYXJ0IHRoZSBmb3JjZXMgb2YgdGhlIGVuZW15IGhhZCBsb2RnZWQgdGhlbXNlbHZlcywgaGF2aW5nIGxlZnQgdGVuIGNvaG9ydHMgYW5kCiAgICAgICAgICAgICAgICAgICAgMzAwIGhvcnNlIGF0IHRoZSBzZWEsIHRvIGJlIGEgZ3VhcmQgdG8gdGhlIHNoaXBzLCBoYXN0ZW5zIHRvIHRoZSBlbmVteSwgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgdGhpcmQgd2F0Y2gsIGZlYXJpbmcgdGhlIGxlc3MgZm9yIHRoZSBzaGlwcywgZm9yIHRoaXMgcmVhc29uIGJlY2F1c2UgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgbGVhdmluZyB0aGVtIGZhc3RlbmVkIGF0IGFuY2hvciB1cG9uIGFuIGV2ZW4gYW5kIG9wZW4gc2hvcmU7IGFuZCBoZSBwbGFjZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5RLiBBdHJpdXM8L25hbWU+IG92ZXIgdGhlIGd1YXJkIG9mIHRoZSBzaGlwcy4gSGUgaGltc2VsZiwgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYWR2YW5jZWQgYnkgbmlnaHQgYWJvdXQgdHdlbHZlIG1pbGVzLCBlc3BpZWQgdGhlIGZvcmNlcyBvZiB0aGUgZW5lbXkuIFRoZXksCiAgICAgICAgICAgICAgICAgICAgYWR2YW5jaW5nIHRvIHRoZSByaXZlciB3aXRoIHRoZWlyIGNhdmFscnkgYW5kIGNoYXJpb3RzIGZyb20gdGhlIGhpZ2hlciBncm91bmQsCiAgICAgICAgICAgICAgICAgICAgYmVnYW4gdG8gYW5ub3kgb3VyIG1lbiBhbmQgZ2l2ZSBiYXR0bGUuIEJlaW5nIHJlcHVsc2VkIGJ5IG91ciBjYXZhbHJ5LCB0aGV5CiAgICAgICAgICAgICAgICAgICAgY29uY2VhbGVkIHRoZW1zZWx2ZXMgaW4gd29vZHMsIGFzIHRoZXkgaGFkIHNlY3VyZWQgYSBwbGFjZSBhZG1pcmFibHkgZm9ydGlmaWVkCiAgICAgICAgICAgICAgICAgICAgYnkgbmF0dXJlIGFuZCBieSBhcnQsIHdoaWNoLCBhcyBpdCBzZWVtZWQsIHRoZXkgaGFkIGJlZm9yZSBwcmVwYXJlZCBvbiBhY2NvdW50CiAgICAgICAgICAgICAgICAgICAgb2YgYSBjaXZpbCB3YXI7IGZvciBhbGwgZW50cmFuY2VzIHRvIGl0IHdlcmUgc2h1dCB1cCBieSBhIGdyZWF0IG51bWJlciBvZiBmZWxsZWQKICAgICAgICAgICAgICAgICAgICB0cmVlcy4gVGhleSB0aGVtc2VsdmVzIHJ1c2hlZCBvdXQgb2YgdGhlIHdvb2RzIHRvIGZpZ2h0IGhlcmUgYW5kIHRoZXJlLCBhbmQKICAgICAgICAgICAgICAgICAgICBwcmV2ZW50ZWQgb3VyIG1lbiBmcm9tIGVudGVyaW5nIHRoZWlyIGZvcnRpZmljYXRpb25zLiBCdXQgdGhlIHNvbGRpZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNldmVudGggbGVnaW9uLCBoYXZpbmcgZm9ybWVkIGEgdGVzdHVkbyBhbmQgdGhyb3duIHVwIGEgcmFtcGFydCBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgIGZvcnRpZmljYXRpb24sIHRvb2sgdGhlIHBsYWNlIGFuZCBkcm92ZSB0aGVtIG91dCBvZiB0aGUgd29vZHMsIHJlY2VpdmluZyBvbmx5IGEKICAgICAgICAgICAgICAgICAgICBmZXcgd291bmRzLiBCdXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGZvcmJhZGUgaGlzIG1lbiB0byBwdXJzdWUgdGhlbQogICAgICAgICAgICAgICAgICAgIGluIHRoZWlyIGZsaWdodCBhbnkgZ3JlYXQgZGlzdGFuY2U7IGJvdGggYmVjYXVzZSBoZSB3YXMgaWdub3JhbnQgb2YgdGhlIG5hdHVyZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBncm91bmQsIGFuZCBiZWNhdXNlLCBhcyBhIGdyZWF0IHBhcnQgb2YgdGhlIGRheSB3YXMgc3BlbnQsIGhlIHdpc2hlZCB0aW1lCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgbGVmdCBmb3IgdGhlIGZvcnRpZmljYXRpb24gb2YgdGhlIGNhbXAuIDwvdHJhbnNsYXRpb24+"
translation['5.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBuZXh0IGRheSwgZWFybHkgaW4gdGhlIG1vcm5pbmcsIGhlIHNlbnQgYm90aCBmb290LXNvbGRpZXJzIGFuZCBob3JzZSBpbiB0aHJlZQogICAgICAgICAgICAgICAgICAgIGRpdmlzaW9ucyBvbiBhbiBleHBlZGl0aW9uIHRvIHB1cnN1ZSB0aG9zZSB3aG8gaGFkIGZsZWQuIFRoZXNlIGhhdmluZyBhZHZhbmNlZCBhCiAgICAgICAgICAgICAgICAgICAgbGl0dGxlIHdheSwgd2hlbiBhbHJlYWR5IHRoZSByZWFyIFtvZiB0aGUgZW5lbXldIHdhcyBpbiBzaWdodCwgc29tZSBob3JzZSBjYW1lCiAgICAgICAgICAgICAgICAgICAgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5RdWludHVzIEF0cml1czwvbmFtZT4sIHRvIHJlcG9ydAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHByZWNlZGluZyBuaWdodCwgYSB2ZXJ5IGdyZWF0IHN0b3JtIGhhdmluZyBhcmlzZW4sIGFsbW9zdCBhbGwgdGhlIHNoaXBzCiAgICAgICAgICAgICAgICAgICAgd2VyZSBkYXNoZWQgdG8gcGllY2VzIGFuZCBjYXN0IHVwb24gdGhlIHNob3JlLCBiZWNhdXNlIG5laXRoZXIgdGhlIGFuY2hvcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgY2FibGVzIGNvdWxkIHJlc2lzdCwgbm9yIGNvdWxkIHRoZSBzYWlsb3JzIGFuZCBwaWxvdHMgc3VzdGFpbiB0aGUgdmlvbGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgc3Rvcm07IGFuZCB0aHVzIGdyZWF0IGRhbWFnZSB3YXMgcmVjZWl2ZWQgYnkgdGhhdCBjb2xsaXNpb24gb2YgdGhlIHNoaXBzLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5RdWludHVzIEF0cml1czwvbmFtZT4sIHRvIHJlcG9ydAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHByZWNlZGluZyBuaWdodCwgYSB2ZXJ5IGdyZWF0IHN0b3JtIGhhdmluZyBhcmlzZW4sIGFsbW9zdCBhbGwgdGhlIHNoaXBzCiAgICAgICAgICAgICAgICAgICAgd2VyZSBkYXNoZWQgdG8gcGllY2VzIGFuZCBjYXN0IHVwb24gdGhlIHNob3JlLCBiZWNhdXNlIG5laXRoZXIgdGhlIGFuY2hvcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgY2FibGVzIGNvdWxkIHJlc2lzdCwgbm9yIGNvdWxkIHRoZSBzYWlsb3JzIGFuZCBwaWxvdHMgc3VzdGFpbiB0aGUgdmlvbGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgc3Rvcm07IGFuZCB0aHVzIGdyZWF0IGRhbWFnZSB3YXMgcmVjZWl2ZWQgYnkgdGhhdCBjb2xsaXNpb24gb2YgdGhlIHNoaXBzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXNlIHRoaW5ncyBiZWluZyBrbm93biBbdG8gaGltXSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9yZGVycyB0aGUKICAgICAgICAgICAgICAgICAgICBsZWdpb25zIGFuZCBjYXZhbHJ5IHRvIGJlIHJlY2FsbGVkIGFuZCB0byBjZWFzZSBmcm9tIHRoZWlyIG1hcmNoOyBoZSBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgcmV0dXJucyB0byB0aGUgc2hpcHM6IGhlIHNlZXMgY2xlYXJseSBiZWZvcmUgaGltIGFsbW9zdCB0aGUgc2FtZSB0aGluZ3Mgd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICBoYWQgaGVhcmQgb2YgZnJvbSB0aGUgbWVzc2VuZ2VycyBhbmQgYnkgbGV0dGVyLCBzbyB0aGF0LCBhYm91dCBmb3J0eSBzaGlwcyBiZWluZwogICAgICAgICAgICAgICAgICAgIGxvc3QsIHRoZSByZW1haW5kZXIgc2VlbWVkIGNhcGFibGUgb2YgYmVpbmcgcmVwYWlyZWQgd2l0aCBtdWNoIGxhYm9yLiBUaGVyZWZvcmUKICAgICAgICAgICAgICAgICAgICBoZSBzZWxlY3RzIHdvcmttZW4gZnJvbSB0aGUgbGVnaW9ucywgYW5kIG9yZGVycyBvdGhlcnMgdG8gYmUgc2VudCBmb3IgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBjb250aW5lbnQ7IGhlIHdyaXRlcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiB0byBidWlsZCBhcyBtYW55IHNoaXBzCiAgICAgICAgICAgICAgICAgICAgYXMgaGUgY291bGQgd2l0aCB0aG9zZSBsZWdpb25zIHdoaWNoIHdlcmUgd2l0aCBoaW0uIEhlIGhpbXNlbGYsIHRob3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIgd2FzIG9uZSBvZiBncmVhdCBkaWZmaWN1bHR5IGFuZCBsYWJvciwgeWV0IHRob3VnaHQgaXQgdG8gYmUgbW9zdAogICAgICAgICAgICAgICAgICAgIGV4cGVkaWVudCBmb3IgYWxsIHRoZSBzaGlwcyB0byBiZSBicm91Z2h0IHVwIG9uIHNob3JlIGFuZCBqb2luZWQgd2l0aCB0aGUgY2FtcAogICAgICAgICAgICAgICAgICAgIGJ5IG9uZSBmb3J0aWZpY2F0aW9uLiBJbiB0aGVzZSBtYXR0ZXJzIGhlIGVtcGxveWVkIGFib3V0IHRlbiBkYXlzLCB0aGUgbGFib3Igb2YKICAgICAgICAgICAgICAgICAgICB0aGUgc29sZGllcnMgYmVpbmcgdW5yZW1pdHRpbmcgZXZlbiBkdXJpbmcgdGhlIGhvdXJzIG9mIG5pZ2h0LiBUaGUgc2hpcHMgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVlbiBicm91Z2h0IHVwIG9uIHNob3JlIGFuZCB0aGUgY2FtcCBzdHJvbmdseSBmb3J0aWZpZWQsIGhlIGxlZnQgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBmb3JjZXMgYXMgaGUgZGlkIGJlZm9yZSBhcyBhIGd1YXJkIGZvciB0aGUgc2hpcHM7IGhlIHNldHMgb3V0IGluIHBlcnNvbiBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBwbGFjZSB0aGF0IGhlIGhhZCByZXR1cm5lZCBmcm9tLiBXaGVuIGhlIGhhZCBjb21lIHRoaXRoZXIsIGdyZWF0ZXIgZm9yY2VzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJpdG9uczwvbmFtZT4gaGFkIGFscmVhZHkgYXNzZW1ibGVkIGF0IHRoYXQgcGxhY2UsIHRoZSBjaGllZgogICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgYW5kIG1hbmFnZW1lbnQgb2YgdGhlIHdhciBoYXZpbmcgYmVlbiBpbnRydXN0ZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXNzaXZlbGxhdW51czwvbmFtZT4sIHdob3NlIHRlcnJpdG9yaWVzIGEgcml2ZXIsIHdoaWNoIGlzIGNhbGxlZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExOTEzIiByZWc9IlRoYW1lcyAocml2ZXIpLCBFbmdsYW5kLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+VGhhbWVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBzZXBhcmF0ZXMsIGZyb20gdGhlIG1hcml0aW1lIHN0YXRlcyBhdCBhYm91dCBlaWdodHkgbWlsZXMgZnJvbSB0aGUgc2VhLiBBdCBhbgogICAgICAgICAgICAgICAgICAgIGVhcmxpZXIgcGVyaW9kIHBlcnBldHVhbCB3YXJzIGhhZCB0YWtlbiBwbGFjZSBiZXR3ZWVuIGhpbSBhbmQgdGhlIG90aGVyIHN0YXRlczsKICAgICAgICAgICAgICAgICAgICBidXQsIGdyZWF0bHkgYWxhcm1lZCBieSBvdXIgYXJyaXZhbCwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJpdG9uczwvbmFtZT4gaGFkIHBsYWNlZCBoaW0KICAgICAgICAgICAgICAgICAgICBvdmVyIHRoZSB3aG9sZSB3YXIgYW5kIHRoZSBjb25kdWN0IG9mIGl0LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9yZGVycyB0aGUKICAgICAgICAgICAgICAgICAgICBsZWdpb25zIGFuZCBjYXZhbHJ5IHRvIGJlIHJlY2FsbGVkIGFuZCB0byBjZWFzZSBmcm9tIHRoZWlyIG1hcmNoOyBoZSBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgcmV0dXJucyB0byB0aGUgc2hpcHM6IGhlIHNlZXMgY2xlYXJseSBiZWZvcmUgaGltIGFsbW9zdCB0aGUgc2FtZSB0aGluZ3Mgd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICBoYWQgaGVhcmQgb2YgZnJvbSB0aGUgbWVzc2VuZ2VycyBhbmQgYnkgbGV0dGVyLCBzbyB0aGF0LCBhYm91dCBmb3J0eSBzaGlwcyBiZWluZwogICAgICAgICAgICAgICAgICAgIGxvc3QsIHRoZSByZW1haW5kZXIgc2VlbWVkIGNhcGFibGUgb2YgYmVpbmcgcmVwYWlyZWQgd2l0aCBtdWNoIGxhYm9yLiBUaGVyZWZvcmUKICAgICAgICAgICAgICAgICAgICBoZSBzZWxlY3RzIHdvcmttZW4gZnJvbSB0aGUgbGVnaW9ucywgYW5kIG9yZGVycyBvdGhlcnMgdG8gYmUgc2VudCBmb3IgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBjb250aW5lbnQ7IGhlIHdyaXRlcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiB0byBidWlsZCBhcyBtYW55IHNoaXBzCiAgICAgICAgICAgICAgICAgICAgYXMgaGUgY291bGQgd2l0aCB0aG9zZSBsZWdpb25zIHdoaWNoIHdlcmUgd2l0aCBoaW0uIEhlIGhpbXNlbGYsIHRob3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIgd2FzIG9uZSBvZiBncmVhdCBkaWZmaWN1bHR5IGFuZCBsYWJvciwgeWV0IHRob3VnaHQgaXQgdG8gYmUgbW9zdAogICAgICAgICAgICAgICAgICAgIGV4cGVkaWVudCBmb3IgYWxsIHRoZSBzaGlwcyB0byBiZSBicm91Z2h0IHVwIG9uIHNob3JlIGFuZCBqb2luZWQgd2l0aCB0aGUgY2FtcAogICAgICAgICAgICAgICAgICAgIGJ5IG9uZSBmb3J0aWZpY2F0aW9uLiBJbiB0aGVzZSBtYXR0ZXJzIGhlIGVtcGxveWVkIGFib3V0IHRlbiBkYXlzLCB0aGUgbGFib3Igb2YKICAgICAgICAgICAgICAgICAgICB0aGUgc29sZGllcnMgYmVpbmcgdW5yZW1pdHRpbmcgZXZlbiBkdXJpbmcgdGhlIGhvdXJzIG9mIG5pZ2h0LiBUaGUgc2hpcHMgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVlbiBicm91Z2h0IHVwIG9uIHNob3JlIGFuZCB0aGUgY2FtcCBzdHJvbmdseSBmb3J0aWZpZWQsIGhlIGxlZnQgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBmb3JjZXMgYXMgaGUgZGlkIGJlZm9yZSBhcyBhIGd1YXJkIGZvciB0aGUgc2hpcHM7IGhlIHNldHMgb3V0IGluIHBlcnNvbiBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBwbGFjZSB0aGF0IGhlIGhhZCByZXR1cm5lZCBmcm9tLiBXaGVuIGhlIGhhZCBjb21lIHRoaXRoZXIsIGdyZWF0ZXIgZm9yY2VzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJpdG9uczwvbmFtZT4gaGFkIGFscmVhZHkgYXNzZW1ibGVkIGF0IHRoYXQgcGxhY2UsIHRoZSBjaGllZgogICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgYW5kIG1hbmFnZW1lbnQgb2YgdGhlIHdhciBoYXZpbmcgYmVlbiBpbnRydXN0ZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXNzaXZlbGxhdW51czwvbmFtZT4sIHdob3NlIHRlcnJpdG9yaWVzIGEgcml2ZXIsIHdoaWNoIGlzIGNhbGxlZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExOTEzIiByZWc9IlRoYW1lcyAocml2ZXIpLCBFbmdsYW5kLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+VGhhbWVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBzZXBhcmF0ZXMsIGZyb20gdGhlIG1hcml0aW1lIHN0YXRlcyBhdCBhYm91dCBlaWdodHkgbWlsZXMgZnJvbSB0aGUgc2VhLiBBdCBhbgogICAgICAgICAgICAgICAgICAgIGVhcmxpZXIgcGVyaW9kIHBlcnBldHVhbCB3YXJzIGhhZCB0YWtlbiBwbGFjZSBiZXR3ZWVuIGhpbSBhbmQgdGhlIG90aGVyIHN0YXRlczsKICAgICAgICAgICAgICAgICAgICBidXQsIGdyZWF0bHkgYWxhcm1lZCBieSBvdXIgYXJyaXZhbCwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJpdG9uczwvbmFtZT4gaGFkIHBsYWNlZCBoaW0KICAgICAgICAgICAgICAgICAgICBvdmVyIHRoZSB3aG9sZSB3YXIgYW5kIHRoZSBjb25kdWN0IG9mIGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBpbnRlcmlvciBwb3J0aW9uIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODY1MyIgcmVnPSJHcmVhdCBCcml0YWluIChpc2xhbmQpLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QnJpdGFpbjwvbmFtZT4gaXMKICAgICAgICAgICAgICAgICAgICBpbmhhYml0ZWQgYnkgdGhvc2Ugb2Ygd2hvbSB0aGV5IHNheSB0aGF0IGl0IGlzIGhhbmRlZCBkb3duIGJ5IHRyYWRpdGlvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIGJvcm4gaW4gdGhlIGlzbGFuZCBpdHNlbGY6IHRoZSBtYXJpdGltZSBwb3J0aW9uIGJ5IHRob3NlIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBwYXNzZWQgb3ZlciBmcm9tIHRoZSBjb3VudHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4gZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgICAgICAgICAgICAgcGx1bmRlciBhbmQgbWFraW5nIHdhcjsgYWxtb3N0IGFsbCBvZiB3aG9tIGFyZSBjYWxsZWQgYnkgdGhlIG5hbWVzIG9mIHRob3NlCiAgICAgICAgICAgICAgICAgICAgc3RhdGVzIGZyb20gd2hpY2ggYmVpbmcgc3BydW5nIHRoZXkgd2VudCB0aGl0aGVyLCBhbmQgaGF2aW5nIHdhZ2VkIHdhciwKICAgICAgICAgICAgICAgICAgICBjb250aW51ZWQgdGhlcmUgYW5kIGJlZ2FuIHRvIGN1bHRpdmF0ZSB0aGUgbGFuZHMuIFRoZSBudW1iZXIgb2YgdGhlIHBlb3BsZSBpcwogICAgICAgICAgICAgICAgICAgIGNvdW50bGVzcywgYW5kIHRoZWlyIGJ1aWxkaW5ncyBleGNlZWRpbmdseSBudW1lcm91cywgZm9yIHRoZSBtb3N0IHBhcnQgdmVyeSBsaWtlCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT46IHRoZSBudW1iZXIgb2YgY2F0dGxlIGlzIGdyZWF0LgogICAgICAgICAgICAgICAgICAgIFRoZXkgdXNlIGVpdGhlciBicmFzcyBvciBpcm9uIHJpbmdzLCBkZXRlcm1pbmVkIGF0IGEgY2VydGFpbiB3ZWlnaHQsIGFzIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbW9uZXkuIFRpbiBpcyBwcm9kdWNlZCBpbiB0aGUgbWlkbGFuZCByZWdpb25zOyBpbiB0aGUgbWFyaXRpbWUsIGlyb247IGJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICBxdWFudGl0eSBvZiBpdCBpcyBzbWFsbDogdGhleSBlbXBsb3kgYnJhc3MsIHdoaWNoIGlzIGltcG9ydGVkLiBUaGVyZSwgYXMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBpcyB0aW1iZXIgb2YgZXZlcnkgZGVzY3JpcHRpb24sIGV4Y2VwdCBiZWVjaCBhbmQgZmlyLiBUaGV5IGRvCiAgICAgICAgICAgICAgICAgICAgbm90IHJlZ2FyZCBpdCBsYXdmdWwgdG8gZWF0IHRoZSBoYXJlLCBhbmQgdGhlIGNvY2ssIGFuZCB0aGUgZ29vc2U7IHRoZXksCiAgICAgICAgICAgICAgICAgICAgaG93ZXZlciwgYnJlZWQgdGhlbSBmb3IgYW11c2VtZW50IGFuZCBwbGVhc3VyZS4gVGhlIGNsaW1hdGUgaXMgbW9yZSB0ZW1wZXJhdGUKICAgICAgICAgICAgICAgICAgICB0aGFuIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgdGhlIGNvbGRzIGJlaW5nIGxlc3MKICAgICAgICAgICAgICAgICAgICBzZXZlcmUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+IGlzCiAgICAgICAgICAgICAgICAgICAgaW5oYWJpdGVkIGJ5IHRob3NlIG9mIHdob20gdGhleSBzYXkgdGhhdCBpdCBpcyBoYW5kZWQgZG93biBieSB0cmFkaXRpb24gdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBib3JuIGluIHRoZSBpc2xhbmQgaXRzZWxmOiB0aGUgbWFyaXRpbWUgcG9ydGlvbiBieSB0aG9zZSB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgcGFzc2VkIG92ZXIgZnJvbSB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+IGZvciB0aGUgcHVycG9zZSBvZgogICAgICAgICAgICAgICAgICAgIHBsdW5kZXIgYW5kIG1ha2luZyB3YXI7IGFsbW9zdCBhbGwgb2Ygd2hvbSBhcmUgY2FsbGVkIGJ5IHRoZSBuYW1lcyBvZiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHN0YXRlcyBmcm9tIHdoaWNoIGJlaW5nIHNwcnVuZyB0aGV5IHdlbnQgdGhpdGhlciwgYW5kIGhhdmluZyB3YWdlZCB3YXIsCiAgICAgICAgICAgICAgICAgICAgY29udGludWVkIHRoZXJlIGFuZCBiZWdhbiB0byBjdWx0aXZhdGUgdGhlIGxhbmRzLiBUaGUgbnVtYmVyIG9mIHRoZSBwZW9wbGUgaXMKICAgICAgICAgICAgICAgICAgICBjb3VudGxlc3MsIGFuZCB0aGVpciBidWlsZGluZ3MgZXhjZWVkaW5nbHkgbnVtZXJvdXMsIGZvciB0aGUgbW9zdCBwYXJ0IHZlcnkgbGlrZQogICAgICAgICAgICAgICAgICAgIHRob3NlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+OiB0aGUgbnVtYmVyIG9mIGNhdHRsZSBpcyBncmVhdC4KICAgICAgICAgICAgICAgICAgICBUaGV5IHVzZSBlaXRoZXIgYnJhc3Mgb3IgaXJvbiByaW5ncywgZGV0ZXJtaW5lZCBhdCBhIGNlcnRhaW4gd2VpZ2h0LCBhcyB0aGVpcgogICAgICAgICAgICAgICAgICAgIG1vbmV5LiBUaW4gaXMgcHJvZHVjZWQgaW4gdGhlIG1pZGxhbmQgcmVnaW9uczsgaW4gdGhlIG1hcml0aW1lLCBpcm9uOyBidXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHkgb2YgaXQgaXMgc21hbGw6IHRoZXkgZW1wbG95IGJyYXNzLCB3aGljaCBpcyBpbXBvcnRlZC4gVGhlcmUsIGFzIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgaXMgdGltYmVyIG9mIGV2ZXJ5IGRlc2NyaXB0aW9uLCBleGNlcHQgYmVlY2ggYW5kIGZpci4gVGhleSBkbwogICAgICAgICAgICAgICAgICAgIG5vdCByZWdhcmQgaXQgbGF3ZnVsIHRvIGVhdCB0aGUgaGFyZSwgYW5kIHRoZSBjb2NrLCBhbmQgdGhlIGdvb3NlOyB0aGV5LAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIGJyZWVkIHRoZW0gZm9yIGFtdXNlbWVudCBhbmQgcGxlYXN1cmUuIFRoZSBjbGltYXRlIGlzIG1vcmUgdGVtcGVyYXRlCiAgICAgICAgICAgICAgICAgICAgdGhhbiBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHRoZSBjb2xkcyBiZWluZyBsZXNzCiAgICAgICAgICAgICAgICAgICAgc2V2ZXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBpc2xhbmQgaXMgdHJpYW5ndWxhciBpbiBpdHMgZm9ybSwgYW5kIG9uZSBvZiBpdHMgc2lkZXMgaXMgb3Bwb3NpdGUgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LiBPbmUgYW5nbGUgb2YgdGhpcyBzaWRlLCB3aGljaCBpcyBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgxNTMiIHJlZz0iICArS2VudCBbMC42NSw1MS4yMTZdIChjb3VudHkpLCBFbmdsYW5kLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPktlbnQKICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCB3aGl0aGVyIGFsbW9zdCBhbGwgc2hpcHMgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gYXJlIGRpcmVjdGVkLCBbbG9va3NdIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGVhc3Q7IHRoZSBsb3dlciBsb29rcyB0byB0aGUgc291dGguIFRoaXMgc2lkZSBleHRlbmRzIGFib3V0IDUwMCBtaWxlcy4KICAgICAgICAgICAgICAgICAgICBBbm90aGVyIHNpZGUgbGllcyB0b3dhcmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDk1IiByZWc9IlNwYWluIFstNCw0MF0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlNwYWluPC9uYW1lPiBhbmQgdGhlIHdlc3QsIG9uIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgcGFydCBpcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDExODEiIHJlZz0iICArSXJlbGFuZCAoaXNsYW5kKSwgQnJpdGlzaCBJc2xlcywgRXVyb3BlICIgdHlwZT0icGxhY2UiPklyZWxhbmQgPC9uYW1lPiwgbGVzcywgYXMKICAgICAgICAgICAgICAgICAgICBpcyByZWNrb25lZCwgdGhhbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+LCBieSBvbmUKICAgICAgICAgICAgICAgICAgICBoYWxmOiBidXQgdGhlIHBhc3NhZ2UgW2Zyb20gaXRdIGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiBpcyBvZgogICAgICAgICAgICAgICAgICAgIGVxdWFsIGRpc3RhbmNlIHdpdGggdGhhdCBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPi4gSW4gdGhlIG1pZGRsZSBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgdm95YWdlLCBpcyBhbiBpc2xhbmQsIHdoaWNoIGlzIGNhbGxlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDUyNjAiIHJlZz0iSXNsZSBvZiBNYW4gWy00LjUsNTQuMjVdIChpc2xhbmQpLCBJc2xlIG9mIE1hbiwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+TW9uYTwvbmFtZT46CiAgICAgICAgICAgICAgICAgICAgbWFueSBzbWFsbGVyIGlzbGFuZHMgYmVzaWRlcyBhcmUgc3VwcG9zZWQgdG8gbGllIFt0aGVyZV0sIG9mIHdoaWNoIGlzbGFuZHMgc29tZQogICAgICAgICAgICAgICAgICAgIGhhdmUgd3JpdHRlbiB0aGF0IGF0IHRoZSB0aW1lIG9mIHRoZSB3aW50ZXIgc29sc3RpY2UgaXQgaXMgbmlnaHQgdGhlcmUgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhpcnR5IGNvbnNlY3V0aXZlIGRheXMuIFdlLCBpbiBvdXIgaW5xdWlyaWVzIGFib3V0IHRoYXQgbWF0dGVyLCBhc2NlcnRhaW5lZAogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcsIGV4Y2VwdCB0aGF0LCBieSBhY2N1cmF0ZSBtZWFzdXJlbWVudHMgd2l0aCB3YXRlciwgd2UgcGVyY2VpdmVkIHRoZQogICAgICAgICAgICAgICAgICAgIG5pZ2h0cyB0byBiZSBzaG9ydGVyIHRoZXJlIHRoYW4gb24gdGhlIGNvbnRpbmVudC4gVGhlIGxlbmd0aCBvZiB0aGlzIHNpZGUsIGFzCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYWNjb3VudCBzdGF0ZXMsIGlzIDcwMCBtaWxlcy4gVGhlIHRoaXJkIHNpZGUgaXMgdG93YXJkIHRoZSBub3J0aCwgdG8gd2hpY2gKICAgICAgICAgICAgICAgICAgICBwb3J0aW9uIG9mIHRoZSBpc2xhbmQgbm8gbGFuZCBpcyBvcHBvc2l0ZTsgYnV0IGFuIGFuZ2xlIG9mIHRoYXQgc2lkZSBsb29rcwogICAgICAgICAgICAgICAgICAgIHByaW5jaXBhbGx5IHRvd2FyZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAwODQiIHJlZz0iICArR2VybWFueSBbMTAuNSw1MS41XSAobmF0aW9uKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcm1hbnkgPC9uYW1lPi4gVGhpcyBzaWRlIGlzCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJlZCB0byBiZSA4MDAgbWlsZXMgaW4gbGVuZ3RoLiBUaHVzIHRoZSB3aG9sZSBpc2xhbmQgaXMgW2Fib3V0XSAyLDAwMAogICAgICAgICAgICAgICAgICAgIG1pbGVzIGluIGNpcmN1bWZlcmVuY2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4uIE9uZSBhbmdsZSBvZiB0aGlzIHNpZGUsIHdoaWNoIGlzIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODE1MyIgcmVnPSIgICtLZW50IFswLjY1LDUxLjIxNl0gKGNvdW50eSksIEVuZ2xhbmQsIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+S2VudAogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHdoaXRoZXIgYWxtb3N0IGFsbCBzaGlwcyBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBhcmUgZGlyZWN0ZWQsIFtsb29rc10gdG8KICAgICAgICAgICAgICAgICAgICB0aGUgZWFzdDsgdGhlIGxvd2VyIGxvb2tzIHRvIHRoZSBzb3V0aC4gVGhpcyBzaWRlIGV4dGVuZHMgYWJvdXQgNTAwIG1pbGVzLgogICAgICAgICAgICAgICAgICAgIEFub3RoZXIgc2lkZSBsaWVzIHRvd2FyZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiIHJlZz0iU3BhaW4gWy00LDQwXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+U3BhaW48L25hbWU+IGFuZCB0aGUgd2VzdCwgb24gd2hpY2gKICAgICAgICAgICAgICAgICAgICBwYXJ0IGlzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTE4MSIgcmVnPSIgICtJcmVsYW5kIChpc2xhbmQpLCBCcml0aXNoIElzbGVzLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+SXJlbGFuZCA8L25hbWU+LCBsZXNzLCBhcwogICAgICAgICAgICAgICAgICAgIGlzIHJlY2tvbmVkLCB0aGFuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODY1MyIgcmVnPSJHcmVhdCBCcml0YWluIChpc2xhbmQpLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QnJpdGFpbjwvbmFtZT4sIGJ5IG9uZQogICAgICAgICAgICAgICAgICAgIGhhbGY6IGJ1dCB0aGUgcGFzc2FnZSBbZnJvbSBpdF0gaW50byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg2NTMiIHJlZz0iR3JlYXQgQnJpdGFpbiAoaXNsYW5kKSwgVW5pdGVkIEtpbmdkb20sIEV1cm9wZSIgdHlwZT0icGxhY2UiPkJyaXRhaW48L25hbWU+IGlzIG9mCiAgICAgICAgICAgICAgICAgICAgZXF1YWwgZGlzdGFuY2Ugd2l0aCB0aGF0IGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LiBJbiB0aGUgbWlkZGxlIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICB2b3lhZ2UsIGlzIGFuIGlzbGFuZCwgd2hpY2ggaXMgY2FsbGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNTI2MCIgcmVnPSJJc2xlIG9mIE1hbiBbLTQuNSw1NC4yNV0gKGlzbGFuZCksIElzbGUgb2YgTWFuLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Nb25hPC9uYW1lPjoKICAgICAgICAgICAgICAgICAgICBtYW55IHNtYWxsZXIgaXNsYW5kcyBiZXNpZGVzIGFyZSBzdXBwb3NlZCB0byBsaWUgW3RoZXJlXSwgb2Ygd2hpY2ggaXNsYW5kcyBzb21lCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB3cml0dGVuIHRoYXQgYXQgdGhlIHRpbWUgb2YgdGhlIHdpbnRlciBzb2xzdGljZSBpdCBpcyBuaWdodCB0aGVyZSBmb3IKICAgICAgICAgICAgICAgICAgICB0aGlydHkgY29uc2VjdXRpdmUgZGF5cy4gV2UsIGluIG91ciBpbnF1aXJpZXMgYWJvdXQgdGhhdCBtYXR0ZXIsIGFzY2VydGFpbmVkCiAgICAgICAgICAgICAgICAgICAgbm90aGluZywgZXhjZXB0IHRoYXQsIGJ5IGFjY3VyYXRlIG1lYXN1cmVtZW50cyB3aXRoIHdhdGVyLCB3ZSBwZXJjZWl2ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgbmlnaHRzIHRvIGJlIHNob3J0ZXIgdGhlcmUgdGhhbiBvbiB0aGUgY29udGluZW50LiBUaGUgbGVuZ3RoIG9mIHRoaXMgc2lkZSwgYXMKICAgICAgICAgICAgICAgICAgICB0aGVpciBhY2NvdW50IHN0YXRlcywgaXMgNzAwIG1pbGVzLiBUaGUgdGhpcmQgc2lkZSBpcyB0b3dhcmQgdGhlIG5vcnRoLCB0byB3aGljaAogICAgICAgICAgICAgICAgICAgIHBvcnRpb24gb2YgdGhlIGlzbGFuZCBubyBsYW5kIGlzIG9wcG9zaXRlOyBidXQgYW4gYW5nbGUgb2YgdGhhdCBzaWRlIGxvb2tzCiAgICAgICAgICAgICAgICAgICAgcHJpbmNpcGFsbHkgdG93YXJkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDA4NCIgcmVnPSIgICtHZXJtYW55IFsxMC41LDUxLjVdIChuYXRpb24pLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VybWFueSA8L25hbWU+LiBUaGlzIHNpZGUgaXMKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmVkIHRvIGJlIDgwMCBtaWxlcyBpbiBsZW5ndGguIFRodXMgdGhlIHdob2xlIGlzbGFuZCBpcyBbYWJvdXRdIDIsMDAwCiAgICAgICAgICAgICAgICAgICAgbWlsZXMgaW4gY2lyY3VtZmVyZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['5.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBtb3N0IGNpdmlsaXplZCBvZiBhbGwgdGhlc2UgbmF0aW9ucyBhcmUgdGhleSB3aG8gaW5oYWJpdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgxNTMiIHJlZz0iICArS2VudCBbMC42NSw1MS4yMTZdIChjb3VudHkpLCBFbmdsYW5kLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPktlbnQKICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCB3aGljaCBpcyBlbnRpcmVseSBhIG1hcml0aW1lIGRpc3RyaWN0LCBub3IgZG8gdGhleSBkaWZmZXIgbXVjaCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGxpYzwvbmFtZT4gY3VzdG9tcy4gTW9zdCBvZiB0aGUgaW5sYW5kIGluaGFiaXRhbnRzIGRvIG5vdCBzb3cgY29ybiwKICAgICAgICAgICAgICAgICAgICBidXQgbGl2ZSBvbiBtaWxrIGFuZCBmbGVzaCwgYW5kIGFyZSBjbGFkIHdpdGggc2tpbnMuIEFsbCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ccml0YWluczwvbmFtZT4sIGluZGVlZCwgZHllIHRoZW1zZWx2ZXMgd2l0aCB3b29kLCB3aGljaCBvY2Nhc2lvbnMgYQogICAgICAgICAgICAgICAgICAgIGJsdWlzaCBjb2xvciwgYW5kIHRoZXJlYnkgaGF2ZSBhIG1vcmUgdGVycmlibGUgYXBwZWFyYW5jZSBpbiBmaWdodC4gVGhleSB3ZWFyCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaGFpciBsb25nLCBhbmQgaGF2ZSBldmVyeSBwYXJ0IG9mIHRoZWlyIGJvZHkgc2hhdmVkIGV4Y2VwdCB0aGVpciBoZWFkIGFuZAogICAgICAgICAgICAgICAgICAgIHVwcGVyIGxpcC4gVGVuIGFuZCBldmVuIHR3ZWx2ZSBoYXZlIHdpdmVzIGNvbW1vbiB0byB0aGVtLCBhbmQgcGFydGljdWxhcmx5CiAgICAgICAgICAgICAgICAgICAgYnJvdGhlcnMgYW1vbmcgYnJvdGhlcnMsIGFuZCBwYXJlbnRzIGFtb25nIHRoZWlyIGNoaWxkcmVuOyBidXQgaWYgdGhlcmUgYmUgYW55CiAgICAgICAgICAgICAgICAgICAgaXNzdWUgYnkgdGhlc2Ugd2l2ZXMsIHRoZXkgYXJlIHJlcHV0ZWQgdG8gYmUgdGhlIGNoaWxkcmVuIG9mIHRob3NlIGJ5IHdob20KICAgICAgICAgICAgICAgICAgICByZXNwZWN0aXZlbHkgZWFjaCB3YXMgZmlyc3QgZXNwb3VzZWQgd2hlbiBhIHZpcmdpbi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODE1MyIgcmVnPSIgICtLZW50IFswLjY1LDUxLjIxNl0gKGNvdW50eSksIEVuZ2xhbmQsIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+S2VudAogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHdoaWNoIGlzIGVudGlyZWx5IGEgbWFyaXRpbWUgZGlzdHJpY3QsIG5vciBkbyB0aGV5IGRpZmZlciBtdWNoIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsbGljPC9uYW1lPiBjdXN0b21zLiBNb3N0IG9mIHRoZSBpbmxhbmQgaW5oYWJpdGFudHMgZG8gbm90IHNvdyBjb3JuLAogICAgICAgICAgICAgICAgICAgIGJ1dCBsaXZlIG9uIG1pbGsgYW5kIGZsZXNoLCBhbmQgYXJlIGNsYWQgd2l0aCBza2lucy4gQWxsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJyaXRhaW5zPC9uYW1lPiwgaW5kZWVkLCBkeWUgdGhlbXNlbHZlcyB3aXRoIHdvb2QsIHdoaWNoIG9jY2FzaW9ucyBhCiAgICAgICAgICAgICAgICAgICAgYmx1aXNoIGNvbG9yLCBhbmQgdGhlcmVieSBoYXZlIGEgbW9yZSB0ZXJyaWJsZSBhcHBlYXJhbmNlIGluIGZpZ2h0LiBUaGV5IHdlYXIKICAgICAgICAgICAgICAgICAgICB0aGVpciBoYWlyIGxvbmcsIGFuZCBoYXZlIGV2ZXJ5IHBhcnQgb2YgdGhlaXIgYm9keSBzaGF2ZWQgZXhjZXB0IHRoZWlyIGhlYWQgYW5kCiAgICAgICAgICAgICAgICAgICAgdXBwZXIgbGlwLiBUZW4gYW5kIGV2ZW4gdHdlbHZlIGhhdmUgd2l2ZXMgY29tbW9uIHRvIHRoZW0sIGFuZCBwYXJ0aWN1bGFybHkKICAgICAgICAgICAgICAgICAgICBicm90aGVycyBhbW9uZyBicm90aGVycywgYW5kIHBhcmVudHMgYW1vbmcgdGhlaXIgY2hpbGRyZW47IGJ1dCBpZiB0aGVyZSBiZSBhbnkKICAgICAgICAgICAgICAgICAgICBpc3N1ZSBieSB0aGVzZSB3aXZlcywgdGhleSBhcmUgcmVwdXRlZCB0byBiZSB0aGUgY2hpbGRyZW4gb2YgdGhvc2UgYnkgd2hvbQogICAgICAgICAgICAgICAgICAgIHJlc3BlY3RpdmVseSBlYWNoIHdhcyBmaXJzdCBlc3BvdXNlZCB3aGVuIGEgdmlyZ2luLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBob3JzZSBhbmQgY2hhcmlvdGVlcnMgb2YgdGhlIGVuZW15IGNvbnRlbmRlZCB2aWdvcm91c2x5IGluIGEgc2tpcm1pc2ggd2l0aAogICAgICAgICAgICAgICAgICAgIG91ciBjYXZhbHJ5IG9uIHRoZSBtYXJjaDsgeWV0IHNvIHRoYXQgb3VyIG1lbiB3ZXJlIGNvbnF1ZXJvcnMgaW4gYWxsIHBhcnRzLCBhbmQKICAgICAgICAgICAgICAgICAgICBkcm92ZSB0aGVtIHRvIHRoZWlyIHdvb2RzIGFuZCBoaWxsczsgYnV0LCBoYXZpbmcgc2xhaW4gYSBncmVhdCBtYW55LCB0aGV5CiAgICAgICAgICAgICAgICAgICAgcHVyc3VlZCB0b28gZWFnZXJseSwgYW5kIGxvc3Qgc29tZSBvZiB0aGVpciBtZW4uIEJ1dCB0aGUgZW5lbXksIGFmdGVyIHNvbWUgdGltZQogICAgICAgICAgICAgICAgICAgIGhhZCBlbGFwc2VkLCB3aGVuIG91ciBtZW4gd2VyZSBvZmYgdGhlaXIgZ3VhcmQsIGFuZCBvY2N1cGllZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpY2F0aW9uIG9mIHRoZSBjYW1wLCBydXNoZWQgb3V0IG9mIHRoZSB3b29kcywgYW5kIG1ha2luZyBhbiBhdHRhY2sgdXBvbgogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyB3ZXJlIHBsYWNlZCBvbiBkdXR5IGJlZm9yZSB0aGUgY2FtcCwgZm91Z2h0IGluIGEgZGV0ZXJtaW5lZCBtYW5uZXI7CiAgICAgICAgICAgICAgICAgICAgYW5kIHR3byBjb2hvcnRzIGJlaW5nIHNlbnQgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHRvIHRoZWlyIHJlbGllZiwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlc2Ugc2V2ZXJhbGx5IHRoZSBmaXJzdCBvZiB0d28gbGVnaW9ucywgd2hlbiB0aGVzZSBoYWQgdGFrZW4gdXAgdGhlaXIKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiBhdCBhIHZlcnkgc21hbGwgZGlzdGFuY2UgZnJvbSBlYWNoIG90aGVyLCBhcyBvdXIgbWVuIHdlcmUgZGlzY29uY2VydGVkCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIHVudXN1YWwgbW9kZSBvZiBiYXR0bGUsIHRoZSBlbmVteSBicm9rZSB0aHJvdWdoIHRoZSBtaWRkbGUgb2YgdGhlbSBtb3N0CiAgICAgICAgICAgICAgICAgICAgY291cmFnZW91c2x5LCBhbmQgcmV0cmVhdGVkIHRoZW5jZSBpbiBzYWZldHkuIFRoYXQgZGF5LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlEuCiAgICAgICAgICAgICAgICAgICAgICAgIExhYmVyaXVzIER1cnVzPC9uYW1lPiwgYSB0cmlidW5lIG9mIHRoZSBzb2xkaWVycywgd2FzIHNsYWluLiBUaGUgZW5lbXksCiAgICAgICAgICAgICAgICAgICAgc2luY2UgbW9yZSBjb2hvcnRzIHdlcmUgc2VudCBhZ2FpbnN0IHRoZW0sIHdlcmUgcmVwdWxzZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdG8gdGhlaXIgcmVsaWVmLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGVzZSBzZXZlcmFsbHkgdGhlIGZpcnN0IG9mIHR3byBsZWdpb25zLCB3aGVuIHRoZXNlIGhhZCB0YWtlbiB1cCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uIGF0IGEgdmVyeSBzbWFsbCBkaXN0YW5jZSBmcm9tIGVhY2ggb3RoZXIsIGFzIG91ciBtZW4gd2VyZSBkaXNjb25jZXJ0ZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGUgdW51c3VhbCBtb2RlIG9mIGJhdHRsZSwgdGhlIGVuZW15IGJyb2tlIHRocm91Z2ggdGhlIG1pZGRsZSBvZiB0aGVtIG1vc3QKICAgICAgICAgICAgICAgICAgICBjb3VyYWdlb3VzbHksIGFuZCByZXRyZWF0ZWQgdGhlbmNlIGluIHNhZmV0eS4gVGhhdCBkYXksIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+US4KICAgICAgICAgICAgICAgICAgICAgICAgTGFiZXJpdXMgRHVydXM8L25hbWU+LCBhIHRyaWJ1bmUgb2YgdGhlIHNvbGRpZXJzLCB3YXMgc2xhaW4uIFRoZSBlbmVteSwKICAgICAgICAgICAgICAgICAgICBzaW5jZSBtb3JlIGNvaG9ydHMgd2VyZSBzZW50IGFnYWluc3QgdGhlbSwgd2VyZSByZXB1bHNlZC4gPC90cmFuc2xhdGlvbj4="
translation['5.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSB3aG9sZSBvZiB0aGlzIG1ldGhvZCBvZiBmaWdodGluZyBzaW5jZSB0aGUgZW5nYWdlbWVudCB0b29rIHBsYWNlIHVuZGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGV5ZXMgb2YgYWxsIGFuZCBiZWZvcmUgdGhlIGNhbXAsIGl0IHdhcyBwZXJjZWl2ZWQgdGhhdCBvdXIgbWVuLCBvbiBhY2NvdW50IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHdlaWdodCBvZiB0aGVpciBhcm1zLCBpbmFzbXVjaCBhcyB0aGV5IGNvdWxkIG5laXRoZXIgcHVyc3VlIFt0aGUgZW5lbXkgd2hlbl0KICAgICAgICAgICAgICAgICAgICByZXRyZWF0aW5nLCBub3IgZGFyZSBxdWl0IHRoZWlyIHN0YW5kYXJkcywgd2VyZSBsaXR0bGUgc3VpdGVkIHRvIHRoaXMga2luZCBvZgogICAgICAgICAgICAgICAgICAgIGVuZW15OyB0aGF0IHRoZSBob3JzZSBhbHNvIGZvdWdodCB3aXRoIGdyZWF0IGRhbmdlciwgYmVjYXVzZSB0aGV5IFt0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ccml0b25zXTwvbmFtZT4gZ2VuZXJhbGx5IHJldHJlYXRlZCBldmVuIGRlc2lnbmVkbHksIGFuZCwgd2hlbiB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGRyYXduIG9mZiBvdXIgbWVuIGEgc2hvcnQgZGlzdGFuY2UgZnJvbSB0aGUgbGVnaW9ucywgbGVhcGVkIGZyb20gdGhlaXIKICAgICAgICAgICAgICAgICAgICBjaGFyaW90cyBhbmQgZm91Z2h0IG9uIGZvb3QgaW4gdW5lcXVhbCBbYW5kIHRvIHRoZW0gYWR2YW50YWdlb3VzXSBiYXR0bGUuIEJ1dAogICAgICAgICAgICAgICAgICAgIHRoZSBzeXN0ZW0gb2YgY2F2YWxyeSBlbmdhZ2VtZW50IGlzIHdvbnQgdG8gcHJvZHVjZSBlcXVhbCBkYW5nZXIsIGFuZCBpbmRlZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSwgYm90aCB0byB0aG9zZSB3aG8gcmV0cmVhdCBhbmQgdG8gdGhvc2Ugd2hvIHB1cnN1ZS4gVG8gdGhpcyB3YXMgYWRkZWQsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IG5ldmVyIGZvdWdodCBpbiBjbG9zZSBvcmRlciwgYnV0IGluIHNtYWxsIHBhcnRpZXMgYW5kIGF0IGdyZWF0IGRpc3RhbmNlcywKICAgICAgICAgICAgICAgICAgICBhbmQgaGFkIGRldGFjaG1lbnRzIHBsYWNlZCBbaW4gZGlmZmVyZW50IHBhcnRzXSwgYW5kIHRoZW4gdGhlIG9uZSByZWxpZXZlZCB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciwgYW5kIHRoZSB2aWdvcm91cyBhbmQgZnJlc2ggc3VjY2VlZGVkIHRoZSB3ZWFyaWVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ccml0b25zXTwvbmFtZT4gZ2VuZXJhbGx5IHJldHJlYXRlZCBldmVuIGRlc2lnbmVkbHksIGFuZCwgd2hlbiB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGRyYXduIG9mZiBvdXIgbWVuIGEgc2hvcnQgZGlzdGFuY2UgZnJvbSB0aGUgbGVnaW9ucywgbGVhcGVkIGZyb20gdGhlaXIKICAgICAgICAgICAgICAgICAgICBjaGFyaW90cyBhbmQgZm91Z2h0IG9uIGZvb3QgaW4gdW5lcXVhbCBbYW5kIHRvIHRoZW0gYWR2YW50YWdlb3VzXSBiYXR0bGUuIEJ1dAogICAgICAgICAgICAgICAgICAgIHRoZSBzeXN0ZW0gb2YgY2F2YWxyeSBlbmdhZ2VtZW50IGlzIHdvbnQgdG8gcHJvZHVjZSBlcXVhbCBkYW5nZXIsIGFuZCBpbmRlZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSwgYm90aCB0byB0aG9zZSB3aG8gcmV0cmVhdCBhbmQgdG8gdGhvc2Ugd2hvIHB1cnN1ZS4gVG8gdGhpcyB3YXMgYWRkZWQsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IG5ldmVyIGZvdWdodCBpbiBjbG9zZSBvcmRlciwgYnV0IGluIHNtYWxsIHBhcnRpZXMgYW5kIGF0IGdyZWF0IGRpc3RhbmNlcywKICAgICAgICAgICAgICAgICAgICBhbmQgaGFkIGRldGFjaG1lbnRzIHBsYWNlZCBbaW4gZGlmZmVyZW50IHBhcnRzXSwgYW5kIHRoZW4gdGhlIG9uZSByZWxpZXZlZCB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciwgYW5kIHRoZSB2aWdvcm91cyBhbmQgZnJlc2ggc3VjY2VlZGVkIHRoZSB3ZWFyaWVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBmb2xsb3dpbmcgZGF5IHRoZSBlbmVteSBoYWx0ZWQgb24gdGhlIGhpbGxzLCBhIGRpc3RhbmNlIGZyb20gb3VyIGNhbXAsIGFuZAogICAgICAgICAgICAgICAgICAgIHByZXNlbnRlZCB0aGVtc2VsdmVzIGluIHNtYWxsIHBhcnRpZXMsIGFuZCBiZWdhbiB0byBjaGFsbGVuZ2Ugb3VyIGhvcnNlIHRvCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlIHdpdGggbGVzcyBzcGlyaXQgdGhhbiB0aGUgZGF5IGJlZm9yZS4gQnV0IGF0IG5vb24sIHdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBzZW50IHRocmVlIGxlZ2lvbnMsIGFuZCBhbGwgdGhlIGNhdmFscnksIHdpdGggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DLiBUcmVib25pdXM8L25hbWU+LCB0aGUgbGlldXRlbmFudCwgZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgICAgICAgICAgICAgZm9yYWdpbmcsIHRoZXkgZmxldyB1cG9uIHRoZSBmb3JhZ2VycyBzdWRkZW5seSBmcm9tIGFsbCBxdWFydGVycywgc28gdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBrZWVwIG9mZiBbZXZlbl0gZnJvbSB0aGUgc3RhbmRhcmRzIGFuZCB0aGUgbGVnaW9ucy4gT3VyIG1lbiBtYWtpbmcgYW4KICAgICAgICAgICAgICAgICAgICBhdHRhY2sgb24gdGhlbSB2aWdvcm91c2x5LCByZXB1bHNlZCB0aGVtOyBub3IgZGlkIHRoZXkgY2Vhc2UgdG8gcHVyc3VlIHRoZW0KICAgICAgICAgICAgICAgICAgICB1bnRpbCB0aGUgaG9yc2UsIHJlbHlpbmcgb24gcmVsaWVmLCBhcyB0aGV5IHNhdyB0aGUgbGVnaW9ucyBiZWhpbmQgdGhlbSwgZHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGUgZW5lbXkgcHJlY2lwaXRhdGVseSBiZWZvcmUgdGhlbSwgYW5kIHNsYXlpbmcgYSBncmVhdCBudW1iZXIgb2YgdGhlbSwgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIGdpdmUgdGhlbSB0aGUgb3Bwb3J0dW5pdHkgZWl0aGVyIG9mIHJhbGx5aW5nLCBvciBoYWx0aW5nLCBvciBsZWFwaW5nIGZyb20gdGhlaXIKICAgICAgICAgICAgICAgICAgICBjaGFyaW90cy4gSW1tZWRpYXRlbHkgYWZ0ZXIgdGhpcyByZXRyZWF0LCB0aGUgYXV4aWxpYXJpZXMgd2hvIGhhZCBhc3NlbWJsZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIGFsbCBzaWRlcywgZGVwYXJ0ZWQ7IG5vciBhZnRlciB0aGF0IHRpbWUgZGlkIHRoZSBlbmVteSBldmVyIGVuZ2FnZSB3aXRoIHVzIGluCiAgICAgICAgICAgICAgICAgICAgdmVyeSBsYXJnZSBudW1iZXJzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBzZW50IHRocmVlIGxlZ2lvbnMsIGFuZCBhbGwgdGhlIGNhdmFscnksIHdpdGggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DLiBUcmVib25pdXM8L25hbWU+LCB0aGUgbGlldXRlbmFudCwgZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgICAgICAgICAgICAgZm9yYWdpbmcsIHRoZXkgZmxldyB1cG9uIHRoZSBmb3JhZ2VycyBzdWRkZW5seSBmcm9tIGFsbCBxdWFydGVycywgc28gdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBrZWVwIG9mZiBbZXZlbl0gZnJvbSB0aGUgc3RhbmRhcmRzIGFuZCB0aGUgbGVnaW9ucy4gT3VyIG1lbiBtYWtpbmcgYW4KICAgICAgICAgICAgICAgICAgICBhdHRhY2sgb24gdGhlbSB2aWdvcm91c2x5LCByZXB1bHNlZCB0aGVtOyBub3IgZGlkIHRoZXkgY2Vhc2UgdG8gcHVyc3VlIHRoZW0KICAgICAgICAgICAgICAgICAgICB1bnRpbCB0aGUgaG9yc2UsIHJlbHlpbmcgb24gcmVsaWVmLCBhcyB0aGV5IHNhdyB0aGUgbGVnaW9ucyBiZWhpbmQgdGhlbSwgZHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGUgZW5lbXkgcHJlY2lwaXRhdGVseSBiZWZvcmUgdGhlbSwgYW5kIHNsYXlpbmcgYSBncmVhdCBudW1iZXIgb2YgdGhlbSwgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIGdpdmUgdGhlbSB0aGUgb3Bwb3J0dW5pdHkgZWl0aGVyIG9mIHJhbGx5aW5nLCBvciBoYWx0aW5nLCBvciBsZWFwaW5nIGZyb20gdGhlaXIKICAgICAgICAgICAgICAgICAgICBjaGFyaW90cy4gSW1tZWRpYXRlbHkgYWZ0ZXIgdGhpcyByZXRyZWF0LCB0aGUgYXV4aWxpYXJpZXMgd2hvIGhhZCBhc3NlbWJsZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIGFsbCBzaWRlcywgZGVwYXJ0ZWQ7IG5vciBhZnRlciB0aGF0IHRpbWUgZGlkIHRoZSBlbmVteSBldmVyIGVuZ2FnZSB3aXRoIHVzIGluCiAgICAgICAgICAgICAgICAgICAgdmVyeSBsYXJnZSBudW1iZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgZGlzY292ZXJpbmcgdGhlaXIgZGVzaWduLCBsZWFkcyBoaXMgYXJteSBpbnRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlcnJpdG9yaWVzIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Fzc2l2ZWxsYXVudXM8L25hbWU+IHRvIHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTE5MTMiIHJlZz0iVGhhbWVzIChyaXZlciksIEVuZ2xhbmQsIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5UaGFtZXM8L25hbWU+OyB3aGljaAogICAgICAgICAgICAgICAgICAgIHJpdmVyIGNhbiBiZSBmb3JkZWQgaW4gb25lIHBsYWNlIG9ubHkgYW5kIHRoYXQgd2l0aCBkaWZmaWN1bHR5LiBXaGVuIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGFycml2ZWQgdGhlcmUsIGhlIHBlcmNlaXZlcyB0aGF0IG51bWVyb3VzIGZvcmNlcyBvZiB0aGUgZW5lbXkgd2VyZSBtYXJzaGFsZWQgb24KICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgYmFuayBvZiB0aGUgcml2ZXI7IHRoZSBiYW5rIGFsc28gd2FzIGRlZmVuZGVkIGJ5IHNoYXJwIHN0YWtlcyBmaXhlZCBpbgogICAgICAgICAgICAgICAgICAgIGZyb250LCBhbmQgc3Rha2VzIG9mIHRoZSBzYW1lIGtpbmQgZml4ZWQgdW5kZXIgdGhlIHdhdGVyIHdlcmUgY292ZXJlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICByaXZlci4gVGhlc2UgdGhpbmdzIGJlaW5nIGRpc2NvdmVyZWQgZnJvbSBbc29tZV0gcHJpc29uZXJzIGFuZCBkZXNlcnRlcnMsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgc2VuZGluZyBmb3J3YXJkIHRoZSBjYXZhbHJ5LCBvcmRlcmVkIHRoZSBsZWdpb25zCiAgICAgICAgICAgICAgICAgICAgdG8gZm9sbG93IHRoZW0gaW1tZWRpYXRlbHkuIEJ1dCB0aGUgc29sZGllcnMgYWR2YW5jZWQgd2l0aCBzdWNoIHNwZWVkIGFuZCBzdWNoCiAgICAgICAgICAgICAgICAgICAgYXJkb3IsIHRob3VnaCB0aGV5IHN0b29kIGFib3ZlIHRoZSB3YXRlciBieSB0aGVpciBoZWFkcyBvbmx5LCB0aGF0IHRoZSBlbmVteQogICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCBzdXN0YWluIHRoZSBhdHRhY2sgb2YgdGhlIGxlZ2lvbnMgYW5kIG9mIHRoZSBob3JzZSwgYW5kIHF1aXR0ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFua3MsIGFuZCBjb21taXR0ZWQgdGhlbXNlbHZlcyB0byBmbGlnaHQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGRpc2NvdmVyaW5nIHRoZWlyIGRlc2lnbiwgbGVhZHMgaGlzIGFybXkgaW50bwogICAgICAgICAgICAgICAgICAgIHRoZSB0ZXJyaXRvcmllcyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhc3NpdmVsbGF1bnVzPC9uYW1lPiB0byB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExOTEzIiByZWc9IlRoYW1lcyAocml2ZXIpLCBFbmdsYW5kLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+VGhhbWVzPC9uYW1lPjsgd2hpY2gKICAgICAgICAgICAgICAgICAgICByaXZlciBjYW4gYmUgZm9yZGVkIGluIG9uZSBwbGFjZSBvbmx5IGFuZCB0aGF0IHdpdGggZGlmZmljdWx0eS4gV2hlbiBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIHRoZXJlLCBoZSBwZXJjZWl2ZXMgdGhhdCBudW1lcm91cyBmb3JjZXMgb2YgdGhlIGVuZW15IHdlcmUgbWFyc2hhbGVkIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIG90aGVyIGJhbmsgb2YgdGhlIHJpdmVyOyB0aGUgYmFuayBhbHNvIHdhcyBkZWZlbmRlZCBieSBzaGFycCBzdGFrZXMgZml4ZWQgaW4KICAgICAgICAgICAgICAgICAgICBmcm9udCwgYW5kIHN0YWtlcyBvZiB0aGUgc2FtZSBraW5kIGZpeGVkIHVuZGVyIHRoZSB3YXRlciB3ZXJlIGNvdmVyZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgcml2ZXIuIFRoZXNlIHRoaW5ncyBiZWluZyBkaXNjb3ZlcmVkIGZyb20gW3NvbWVdIHByaXNvbmVycyBhbmQgZGVzZXJ0ZXJzLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHNlbmRpbmcgZm9yd2FyZCB0aGUgY2F2YWxyeSwgb3JkZXJlZCB0aGUgbGVnaW9ucwogICAgICAgICAgICAgICAgICAgIHRvIGZvbGxvdyB0aGVtIGltbWVkaWF0ZWx5LiBCdXQgdGhlIHNvbGRpZXJzIGFkdmFuY2VkIHdpdGggc3VjaCBzcGVlZCBhbmQgc3VjaAogICAgICAgICAgICAgICAgICAgIGFyZG9yLCB0aG91Z2ggdGhleSBzdG9vZCBhYm92ZSB0aGUgd2F0ZXIgYnkgdGhlaXIgaGVhZHMgb25seSwgdGhhdCB0aGUgZW5lbXkKICAgICAgICAgICAgICAgICAgICBjb3VsZCBub3Qgc3VzdGFpbiB0aGUgYXR0YWNrIG9mIHRoZSBsZWdpb25zIGFuZCBvZiB0aGUgaG9yc2UsIGFuZCBxdWl0dGVkIHRoZQogICAgICAgICAgICAgICAgICAgIGJhbmtzLCBhbmQgY29tbWl0dGVkIHRoZW1zZWx2ZXMgdG8gZmxpZ2h0LiA8L3RyYW5zbGF0aW9uPg=="
translation['5.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Fzc2l2ZWxsYXVudXM8L25hbWU+LCBhcyB3ZSBoYXZlIHN0YXRlZCBhYm92ZSwgYWxsIGhvcGUgW3Jpc2luZyBvdXRdIG9mCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlIGJlaW5nIGxhaWQgYXNpZGUsIHRoZSBncmVhdGVyIHBhcnQgb2YgaGlzIGZvcmNlcyBiZWluZyBkaXNtaXNzZWQsIGFuZAogICAgICAgICAgICAgICAgICAgIGFib3V0IDQsMDAwIGNoYXJpb3RlZXJzIG9ubHkgYmVpbmcgbGVmdCwgdXNlZCB0byBvYnNlcnZlIG91ciBtYXJjaGVzIGFuZCByZXRpcmUKICAgICAgICAgICAgICAgICAgICBhIGxpdHRsZSBmcm9tIHRoZSByb2FkLCBhbmQgY29uY2VhbCBoaW1zZWxmIGluIGludHJpY2F0ZSBhbmQgd29vZHkgcGxhY2VzLCBhbmQKICAgICAgICAgICAgICAgICAgICBpbiB0aG9zZSBuZWlnaGJvcmhvb2RzIGluIHdoaWNoIGhlIGhhZCBkaXNjb3ZlcmVkIHdlIHdlcmUgYWJvdXQgdG8gbWFyY2gsIGhlCiAgICAgICAgICAgICAgICAgICAgdXNlZCB0byBkcml2ZSB0aGUgY2F0dGxlIGFuZCB0aGUgaW5oYWJpdGFudHMgZnJvbSB0aGUgZmllbGRzIGludG8gdGhlIHdvb2RzOwogICAgICAgICAgICAgICAgICAgIGFuZCwgd2hlbiBvdXIgY2F2YWxyeSwgZm9yIHRoZSBzYWtlIG9mIHBsdW5kZXJpbmcgYW5kIHJhdmFnaW5nIHRoZSBtb3JlIGZyZWVseSwKICAgICAgICAgICAgICAgICAgICBzY2F0dGVyZWQgdGhlbXNlbHZlcyBhbW9uZyB0aGUgZmllbGRzLCBoZSB1c2VkIHRvIHNlbmQgb3V0IGNoYXJpb3RlZXJzIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgd29vZHMgYnkgYWxsIHRoZSB3ZWxsLWtub3duIHJvYWRzIGFuZCBwYXRocywgYW5kIHRvIHRoZSBncmVhdCBkYW5nZXIgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgaG9yc2UsIGVuZ2FnZSB3aXRoIHRoZW07IGFuZCB0aGlzIHNvdXJjZSBvZiBmZWFyIGhpbmRlcmVkIHRoZW0gZnJvbSBzdHJhZ2dsaW5nCiAgICAgICAgICAgICAgICAgICAgdmVyeSBleHRlbnNpdmVseS4gVGhlIHJlc3VsdCB3YXMsIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRpZCBub3QKICAgICAgICAgICAgICAgICAgICBhbGxvdyBleGN1cnNpb25zIHRvIGJlIG1hZGUgdG8gYSBncmVhdCBkaXN0YW5jZSBmcm9tIHRoZSBtYWluIGJvZHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucywgYW5kIG9yZGVyZWQgdGhhdCBkYW1hZ2Ugc2hvdWxkIGJlIGRvbmUgdG8gdGhlIGVuZW15IGluIHJhdmFnaW5nIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbGFuZHMsIGFuZCBraW5kbGluZyBmaXJlcyBvbmx5IHNvIGZhciBhcyB0aGUgbGVnaW9uYXJ5IHNvbGRpZXJzIGNvdWxkLCBieSB0aGVpcgogICAgICAgICAgICAgICAgICAgIG93biBleGVydGlvbiBhbmQgbWFyY2hpbmcsIGFjY29tcGxpc2ggaXQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhc3NpdmVsbGF1bnVzPC9uYW1lPiwgYXMgd2UgaGF2ZSBzdGF0ZWQgYWJvdmUsIGFsbCBob3BlIFtyaXNpbmcgb3V0XSBvZgogICAgICAgICAgICAgICAgICAgIGJhdHRsZSBiZWluZyBsYWlkIGFzaWRlLCB0aGUgZ3JlYXRlciBwYXJ0IG9mIGhpcyBmb3JjZXMgYmVpbmcgZGlzbWlzc2VkLCBhbmQKICAgICAgICAgICAgICAgICAgICBhYm91dCA0LDAwMCBjaGFyaW90ZWVycyBvbmx5IGJlaW5nIGxlZnQsIHVzZWQgdG8gb2JzZXJ2ZSBvdXIgbWFyY2hlcyBhbmQgcmV0aXJlCiAgICAgICAgICAgICAgICAgICAgYSBsaXR0bGUgZnJvbSB0aGUgcm9hZCwgYW5kIGNvbmNlYWwgaGltc2VsZiBpbiBpbnRyaWNhdGUgYW5kIHdvb2R5IHBsYWNlcywgYW5kCiAgICAgICAgICAgICAgICAgICAgaW4gdGhvc2UgbmVpZ2hib3Job29kcyBpbiB3aGljaCBoZSBoYWQgZGlzY292ZXJlZCB3ZSB3ZXJlIGFib3V0IHRvIG1hcmNoLCBoZQogICAgICAgICAgICAgICAgICAgIHVzZWQgdG8gZHJpdmUgdGhlIGNhdHRsZSBhbmQgdGhlIGluaGFiaXRhbnRzIGZyb20gdGhlIGZpZWxkcyBpbnRvIHRoZSB3b29kczsKICAgICAgICAgICAgICAgICAgICBhbmQsIHdoZW4gb3VyIGNhdmFscnksIGZvciB0aGUgc2FrZSBvZiBwbHVuZGVyaW5nIGFuZCByYXZhZ2luZyB0aGUgbW9yZSBmcmVlbHksCiAgICAgICAgICAgICAgICAgICAgc2NhdHRlcmVkIHRoZW1zZWx2ZXMgYW1vbmcgdGhlIGZpZWxkcywgaGUgdXNlZCB0byBzZW5kIG91dCBjaGFyaW90ZWVycyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHdvb2RzIGJ5IGFsbCB0aGUgd2VsbC1rbm93biByb2FkcyBhbmQgcGF0aHMsIGFuZCB0byB0aGUgZ3JlYXQgZGFuZ2VyIG9mIG91cgogICAgICAgICAgICAgICAgICAgIGhvcnNlLCBlbmdhZ2Ugd2l0aCB0aGVtOyBhbmQgdGhpcyBzb3VyY2Ugb2YgZmVhciBoaW5kZXJlZCB0aGVtIGZyb20gc3RyYWdnbGluZwogICAgICAgICAgICAgICAgICAgIHZlcnkgZXh0ZW5zaXZlbHkuIFRoZSByZXN1bHQgd2FzLCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgYWxsb3cgZXhjdXJzaW9ucyB0byBiZSBtYWRlIHRvIGEgZ3JlYXQgZGlzdGFuY2UgZnJvbSB0aGUgbWFpbiBib2R5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGxlZ2lvbnMsIGFuZCBvcmRlcmVkIHRoYXQgZGFtYWdlIHNob3VsZCBiZSBkb25lIHRvIHRoZSBlbmVteSBpbiByYXZhZ2luZyB0aGVpcgogICAgICAgICAgICAgICAgICAgIGxhbmRzLCBhbmQga2luZGxpbmcgZmlyZXMgb25seSBzbyBmYXIgYXMgdGhlIGxlZ2lvbmFyeSBzb2xkaWVycyBjb3VsZCwgYnkgdGhlaXIKICAgICAgICAgICAgICAgICAgICBvd24gZXhlcnRpb24gYW5kIG1hcmNoaW5nLCBhY2NvbXBsaXNoIGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['5.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtZWFuIHRpbWUsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyaW5vYmFudGVzPC9uYW1lPiwgYWxtb3N0IHRoZSBtb3N0IHBvd2VyZnVsIHN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgcGFydHMsIGZyb20gd2hpY2ggdGhlIHlvdW5nIG1hbiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYW5kdWJyYXRpdXM8L25hbWU+IGVtYnJhY2luZyB0aGUKICAgICAgICAgICAgICAgICAgICBwcm90ZWN0aW9uIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgY29tZSB0byB0aGUgY29udGluZW50IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB0byBbbWVldF0gaGltICh3aG9zZSBmYXRoZXIsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW1hbnVlbnRpdXM8L25hbWU+LCBoYWQKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzZWQgdGhlIHNvdmVyZWlnbnR5IGluIHRoYXQgc3RhdGUsIGFuZCBoYWQgYmVlbiBraWxsZWQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXNzaXZlbGxhdW51czwvbmFtZT47IGhlIGhpbXNlbGYgaGFkIGVzY2FwZWQgZGVhdGggYnkgZmxpZ2h0KSwgc2VuZAogICAgICAgICAgICAgICAgICAgIGVtYmFzc2Fkb3JzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYW5kIHByb21pc2UgdGhhdCB0aGV5IHdpbGwKICAgICAgICAgICAgICAgICAgICBzdXJyZW5kZXIgdGhlbXNlbHZlcyB0byBoaW0gYW5kIHBlcmZvcm0gaGlzIGNvbW1hbmRzOyB0aGV5IGVudHJlYXQgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hbmR1YnJhdGl1czwvbmFtZT4gZnJvbSB0aGUgdmlvbGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXNzaXZlbGxhdW51czwvbmFtZT4sIGFuZCBzZW5kIHRvIHRoZWlyIHN0YXRlIHNvbWUgb25lIHRvIHByZXNpZGUKICAgICAgICAgICAgICAgICAgICBvdmVyIGl0LCBhbmQgcG9zc2VzcyB0aGUgZ292ZXJubWVudC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRlbWFuZHMKICAgICAgICAgICAgICAgICAgICBmb3J0eSBob3N0YWdlcyBmcm9tIHRoZW0sIGFuZCBjb3JuIGZvciBoaXMgYXJteSwgYW5kIHNlbmRzCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFuZHVicmF0aXVzPC9uYW1lPiB0byB0aGVtLiBUaGV5IHNwZWVkaWx5IHBlcmZvcm1lZCB0aGUgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgZGVtYW5kZWQsIGFuZCBzZW50IGhvc3RhZ2VzIHRvIHRoZSBudW1iZXIgYXBwb2ludGVkLCBhbmQgdGhlIGNvcm4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyaW5vYmFudGVzPC9uYW1lPiwgYWxtb3N0IHRoZSBtb3N0IHBvd2VyZnVsIHN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgcGFydHMsIGZyb20gd2hpY2ggdGhlIHlvdW5nIG1hbiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYW5kdWJyYXRpdXM8L25hbWU+IGVtYnJhY2luZyB0aGUKICAgICAgICAgICAgICAgICAgICBwcm90ZWN0aW9uIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgY29tZSB0byB0aGUgY29udGluZW50IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB0byBbbWVldF0gaGltICh3aG9zZSBmYXRoZXIsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW1hbnVlbnRpdXM8L25hbWU+LCBoYWQKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzZWQgdGhlIHNvdmVyZWlnbnR5IGluIHRoYXQgc3RhdGUsIGFuZCBoYWQgYmVlbiBraWxsZWQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXNzaXZlbGxhdW51czwvbmFtZT47IGhlIGhpbXNlbGYgaGFkIGVzY2FwZWQgZGVhdGggYnkgZmxpZ2h0KSwgc2VuZAogICAgICAgICAgICAgICAgICAgIGVtYmFzc2Fkb3JzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYW5kIHByb21pc2UgdGhhdCB0aGV5IHdpbGwKICAgICAgICAgICAgICAgICAgICBzdXJyZW5kZXIgdGhlbXNlbHZlcyB0byBoaW0gYW5kIHBlcmZvcm0gaGlzIGNvbW1hbmRzOyB0aGV5IGVudHJlYXQgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hbmR1YnJhdGl1czwvbmFtZT4gZnJvbSB0aGUgdmlvbGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXNzaXZlbGxhdW51czwvbmFtZT4sIGFuZCBzZW5kIHRvIHRoZWlyIHN0YXRlIHNvbWUgb25lIHRvIHByZXNpZGUKICAgICAgICAgICAgICAgICAgICBvdmVyIGl0LCBhbmQgcG9zc2VzcyB0aGUgZ292ZXJubWVudC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRlbWFuZHMKICAgICAgICAgICAgICAgICAgICBmb3J0eSBob3N0YWdlcyBmcm9tIHRoZW0sIGFuZCBjb3JuIGZvciBoaXMgYXJteSwgYW5kIHNlbmRzCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFuZHVicmF0aXVzPC9uYW1lPiB0byB0aGVtLiBUaGV5IHNwZWVkaWx5IHBlcmZvcm1lZCB0aGUgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgZGVtYW5kZWQsIGFuZCBzZW50IGhvc3RhZ2VzIHRvIHRoZSBudW1iZXIgYXBwb2ludGVkLCBhbmQgdGhlIGNvcm4uIDwvdHJhbnNsYXRpb24+"
translation['5.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyaW5vYmFudGVzPC9uYW1lPiBiZWluZyBwcm90ZWN0ZWQgYW5kIHNlY3VyZWQgZnJvbSBhbnkgdmlvbGVuY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNlbmltYWduaTwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlZ29udGlhY2k8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmNhbGl0ZXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaWJyb2NpPC9uYW1lPiwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Fzc2k8L25hbWU+LCBzZW5kaW5nIGVtYmFzc2llcywgc3VycmVuZGVyZWQgdGhlbXNlbHZlcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4uIEZyb20gdGhlbSBoZSBsZWFybnMgdGhhdCB0aGUgY2FwaXRhbCB0b3duIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Fzc2l2ZWxsYXVudXM8L25hbWU+IHdhcyBub3QgZmFyIGZyb20gdGhhdCBwbGFjZSwgYW5kIHdhcyBkZWZlbmRlZCBieQogICAgICAgICAgICAgICAgICAgIHdvb2RzIGFuZCBtb3Jhc3NlcywgYW5kIGEgdmVyeSBsYXJnZSBudW1iZXIgb2YgbWVuIGFuZCBvZiBjYXR0bGUgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQgaW4gaXQuIChOb3cgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJpdG9uczwvbmFtZT4sIHdoZW4gdGhleSBoYXZlIGZvcnRpZmllZCB0aGUKICAgICAgICAgICAgICAgICAgICBpbnRyaWNhdGUgd29vZHMsIGluIHdoaWNoIHRoZXkgYXJlIHdvbnQgdG8gYXNzZW1ibGUgZm9yIHRoZSBwdXJwb3NlIG9mIGF2b2lkaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIGluY3Vyc2lvbiBvZiBhbiBlbmVteSwgd2l0aCBhbiBpbnRyZW5jaG1lbnQgYW5kIGEgcmFtcGFydCwgY2FsbCB0aGVtIGEKICAgICAgICAgICAgICAgICAgICB0b3duLikgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGl0aGVyPC9uYW1lPiBoZSBwcm9jZWVkcyB3aXRoIGhpcyBsZWdpb25zOiBoZSBmaW5kcyB0aGUgcGxhY2UKICAgICAgICAgICAgICAgICAgICBhZG1pcmFibHkgZm9ydGlmaWVkIGJ5IG5hdHVyZSBhbmQgYXJ0OyBoZSwgaG93ZXZlciwgdW5kZXJ0YWtlcyB0byBhdHRhY2sgaXQgaW4KICAgICAgICAgICAgICAgICAgICB0d28gZGlyZWN0aW9ucy4gVGhlIGVuZW15LCBoYXZpbmcgcmVtYWluZWQgb25seSBhIHNob3J0IHRpbWUsIGRpZCBub3Qgc3VzdGFpbgogICAgICAgICAgICAgICAgICAgIHRoZSBhdHRhY2sgb2Ygb3VyIHNvbGRpZXJzLCBhbmQgaHVycmllZCBhd2F5IG9uIHRoZSBvdGhlciBzaWRlIG9mIHRoZSB0b3duLiBBCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgYW1vdW50IG9mIGNhdHRsZSB3YXMgZm91bmQgdGhlcmUsIGFuZCBtYW55IG9mIHRoZSBlbmVteSB3ZXJlIHRha2VuIGFuZAogICAgICAgICAgICAgICAgICAgIHNsYWluIGluIHRoZWlyIGZsaWdodC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJpbm9iYW50ZXM8L25hbWU+IGJlaW5nIHByb3RlY3RlZCBhbmQgc2VjdXJlZCBmcm9tIGFueSB2aW9sZW5jZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycywgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2VuaW1hZ25pPC9uYW1lPiwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2Vnb250aWFjaTwvbmFtZT4sIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuY2FsaXRlczwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpYnJvY2k8L25hbWU+LCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXNzaTwvbmFtZT4sIHNlbmRpbmcgZW1iYXNzaWVzLCBzdXJyZW5kZXJlZCB0aGVtc2VsdmVzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPi4gRnJvbSB0aGVtIGhlIGxlYXJucyB0aGF0IHRoZSBjYXBpdGFsIHRvd24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXNzaXZlbGxhdW51czwvbmFtZT4gd2FzIG5vdCBmYXIgZnJvbSB0aGF0IHBsYWNlLCBhbmQgd2FzIGRlZmVuZGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgd29vZHMgYW5kIG1vcmFzc2VzLCBhbmQgYSB2ZXJ5IGxhcmdlIG51bWJlciBvZiBtZW4gYW5kIG9mIGNhdHRsZSBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZCBpbiBpdC4gKE5vdyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ccml0b25zPC9uYW1lPiwgd2hlbiB0aGV5IGhhdmUgZm9ydGlmaWVkIHRoZQogICAgICAgICAgICAgICAgICAgIGludHJpY2F0ZSB3b29kcywgaW4gd2hpY2ggdGhleSBhcmUgd29udCB0byBhc3NlbWJsZSBmb3IgdGhlIHB1cnBvc2Ugb2YgYXZvaWRpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgaW5jdXJzaW9uIG9mIGFuIGVuZW15LCB3aXRoIGFuIGludHJlbmNobWVudCBhbmQgYSByYW1wYXJ0LCBjYWxsIHRoZW0gYQogICAgICAgICAgICAgICAgICAgIHRvd24uKSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXRoZXI8L25hbWU+IGhlIHByb2NlZWRzIHdpdGggaGlzIGxlZ2lvbnM6IGhlIGZpbmRzIHRoZSBwbGFjZQogICAgICAgICAgICAgICAgICAgIGFkbWlyYWJseSBmb3J0aWZpZWQgYnkgbmF0dXJlIGFuZCBhcnQ7IGhlLCBob3dldmVyLCB1bmRlcnRha2VzIHRvIGF0dGFjayBpdCBpbgogICAgICAgICAgICAgICAgICAgIHR3byBkaXJlY3Rpb25zLiBUaGUgZW5lbXksIGhhdmluZyByZW1haW5lZCBvbmx5IGEgc2hvcnQgdGltZSwgZGlkIG5vdCBzdXN0YWluCiAgICAgICAgICAgICAgICAgICAgdGhlIGF0dGFjayBvZiBvdXIgc29sZGllcnMsIGFuZCBodXJyaWVkIGF3YXkgb24gdGhlIG90aGVyIHNpZGUgb2YgdGhlIHRvd24uIEEKICAgICAgICAgICAgICAgICAgICBncmVhdCBhbW91bnQgb2YgY2F0dGxlIHdhcyBmb3VuZCB0aGVyZSwgYW5kIG1hbnkgb2YgdGhlIGVuZW15IHdlcmUgdGFrZW4gYW5kCiAgICAgICAgICAgICAgICAgICAgc2xhaW4gaW4gdGhlaXIgZmxpZ2h0LiA8L3RyYW5zbGF0aW9uPg=="
translation['5.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIHRoZXNlIHRoaW5ncyBhcmUgZ29pbmcgZm9yd2FyZCBpbiB0aG9zZSBwbGFjZXMsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Fzc2l2ZWxsYXVudXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgc2VuZHMgbWVzc2VuZ2VycyBpbnRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODE1MyIgcmVnPSIgICtLZW50IFswLjY1LDUxLjIxNl0gKGNvdW50eSksIEVuZ2xhbmQsIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+S2VudAogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHdoaWNoLCB3ZSBoYXZlIG9ic2VydmVkIGFib3ZlLCBpcyBvbiB0aGUgc2VhLCBvdmVyIHdoaWNoIGRpc3RyaWN0cyBmb3VyCiAgICAgICAgICAgICAgICAgICAgc2V2ZXJhbCBraW5ncyByZWlnbmVkLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpbmdldG9yaXg8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcnZpbGl1czwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGF4aW1hZ3VsdXM8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlZ29uYXg8L25hbWU+LCBhbmQgY29tbWFuZHMgdGhlbSB0bwogICAgICAgICAgICAgICAgICAgIGNvbGxlY3QgYWxsIHRoZWlyIGZvcmNlcywgYW5kIHVuZXhwZWN0ZWRseSBhc3NhaWwgYW5kIHN0b3JtIHRoZSBuYXZhbCBjYW1wLiBXaGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgY29tZSB0byB0aGUgY2FtcCwgb3VyIG1lbiwgYWZ0ZXIgbWFraW5nIGEgc2FsbHksIHNsYXlpbmcgbWFueSBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIG1lbiwgYW5kIGFsc28gY2FwdHVyaW5nIGEgZGlzdGluZ3Vpc2hlZCBsZWFkZXIgbmFtZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWdvdG9yaXg8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgYmFjayB0aGVpciBvd24gbWVuIGluIHNhZmV0eS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXNzaXZlbGxhdW51czwvbmFtZT4sIHdoZW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGJhdHRsZSB3YXMgcmVwb3J0ZWQgdG8gaGltIGFzIHNvIG1hbnkgbG9zc2VzIGhhZCBiZWVuIHN1c3RhaW5lZCwgYW5kIGhpcwogICAgICAgICAgICAgICAgICAgIHRlcnJpdG9yaWVzIGxhaWQgd2FzdGUsIGJlaW5nIGFsYXJtZWQgbW9zdCBvZiBhbGwgYnkgdGhlIGRlc2VydGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZXMsIHNlbmRzIGVtYmFzc2Fkb3JzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBbdG8gdHJlYXRdIGFib3V0IGEKICAgICAgICAgICAgICAgICAgICBzdXJyZW5kZXIgdGhyb3VnaCB0aGUgbWVkaWF0aW9uIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tbWl1czwvbmFtZT4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXRyZWJhdGlhbjwvbmFtZT4uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgc2luY2UgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lZCB0byBwYXNzIHRoZSB3aW50ZXIgb24gdGhlIGNvbnRpbmVudCwgb24gYWNjb3VudCBvZiB0aGUgc3VkZGVuIHJldm9sdHMKICAgICAgICAgICAgICAgICAgICBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGFuZCBhcyBtdWNoIG9mIHRoZSBzdW1tZXIgZGlkIG5vdCByZW1haW4sIGFuZCBoZSBwZXJjZWl2ZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGV2ZW4gdGhhdCBjb3VsZCBiZSBlYXNpbHkgcHJvdHJhY3RlZCwgZGVtYW5kcyBob3N0YWdlcywgYW5kIHByZXNjcmliZXMgd2hhdAogICAgICAgICAgICAgICAgICAgIHRyaWJ1dGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiBzaG91bGQKICAgICAgICAgICAgICAgICAgICBwYXkgZWFjaCB5ZWFyIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZTsgaGUgZm9yYmlkcyBhbmQKICAgICAgICAgICAgICAgICAgICBjb21tYW5kcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhc3NpdmVsbGF1bnVzPC9uYW1lPiB0aGF0IGhlIHdhZ2Ugbm90IHdhciBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFuZHVicmF0aXVzPC9uYW1lPiBvciB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ucmlub2JhbnRlczwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhc3NpdmVsbGF1bnVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHNlbmRzIG1lc3NlbmdlcnMgaW50byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgxNTMiIHJlZz0iICArS2VudCBbMC42NSw1MS4yMTZdIChjb3VudHkpLCBFbmdsYW5kLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPktlbnQKICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCB3aGljaCwgd2UgaGF2ZSBvYnNlcnZlZCBhYm92ZSwgaXMgb24gdGhlIHNlYSwgb3ZlciB3aGljaCBkaXN0cmljdHMgZm91cgogICAgICAgICAgICAgICAgICAgIHNldmVyYWwga2luZ3MgcmVpZ25lZCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaW5nZXRvcml4PC9uYW1lPiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJ2aWxpdXM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRheGltYWd1bHVzPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZWdvbmF4PC9uYW1lPiwgYW5kIGNvbW1hbmRzIHRoZW0gdG8KICAgICAgICAgICAgICAgICAgICBjb2xsZWN0IGFsbCB0aGVpciBmb3JjZXMsIGFuZCB1bmV4cGVjdGVkbHkgYXNzYWlsIGFuZCBzdG9ybSB0aGUgbmF2YWwgY2FtcC4gV2hlbgogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIGNvbWUgdG8gdGhlIGNhbXAsIG91ciBtZW4sIGFmdGVyIG1ha2luZyBhIHNhbGx5LCBzbGF5aW5nIG1hbnkgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBtZW4sIGFuZCBhbHNvIGNhcHR1cmluZyBhIGRpc3Rpbmd1aXNoZWQgbGVhZGVyIG5hbWVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVnb3Rvcml4PC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IGJhY2sgdGhlaXIgb3duIG1lbiBpbiBzYWZldHkuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Fzc2l2ZWxsYXVudXM8L25hbWU+LCB3aGVuIHRoaXMKICAgICAgICAgICAgICAgICAgICBiYXR0bGUgd2FzIHJlcG9ydGVkIHRvIGhpbSBhcyBzbyBtYW55IGxvc3NlcyBoYWQgYmVlbiBzdXN0YWluZWQsIGFuZCBoaXMKICAgICAgICAgICAgICAgICAgICB0ZXJyaXRvcmllcyBsYWlkIHdhc3RlLCBiZWluZyBhbGFybWVkIG1vc3Qgb2YgYWxsIGJ5IHRoZSBkZXNlcnRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhdGVzLCBzZW5kcyBlbWJhc3NhZG9ycyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gW3RvIHRyZWF0XSBhYm91dCBhCiAgICAgICAgICAgICAgICAgICAgc3VycmVuZGVyIHRocm91Z2ggdGhlIG1lZGlhdGlvbiBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbW1pdXM8L25hbWU+IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkF0cmViYXRpYW48L25hbWU+LiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHNpbmNlIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGRldGVybWluZWQgdG8gcGFzcyB0aGUgd2ludGVyIG9uIHRoZSBjb250aW5lbnQsIG9uIGFjY291bnQgb2YgdGhlIHN1ZGRlbiByZXZvbHRzCiAgICAgICAgICAgICAgICAgICAgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhbmQgYXMgbXVjaCBvZiB0aGUgc3VtbWVyIGRpZCBub3QgcmVtYWluLCBhbmQgaGUgcGVyY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBldmVuIHRoYXQgY291bGQgYmUgZWFzaWx5IHByb3RyYWN0ZWQsIGRlbWFuZHMgaG9zdGFnZXMsIGFuZCBwcmVzY3JpYmVzIHdoYXQKICAgICAgICAgICAgICAgICAgICB0cmlidXRlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODY1MyIgcmVnPSJHcmVhdCBCcml0YWluIChpc2xhbmQpLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QnJpdGFpbjwvbmFtZT4gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgcGF5IGVhY2ggeWVhciB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGU7IGhlIGZvcmJpZHMgYW5kCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZHMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXNzaXZlbGxhdW51czwvbmFtZT4gdGhhdCBoZSB3YWdlIG5vdCB3YXIgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hbmR1YnJhdGl1czwvbmFtZT4gb3IgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHJpbm9iYW50ZXM8L25hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['5.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gaGUgaGFkIHJlY2VpdmVkIHRoZSBob3N0YWdlcywgaGUgbGVhZHMgYmFjayB0aGUgYXJteSB0byB0aGUgc2VhLCBhbmQgZmluZHMKICAgICAgICAgICAgICAgICAgICB0aGUgc2hpcHMgcmVwYWlyZWQuIEFmdGVyIGxhdW5jaGluZyB0aGVzZSwgYmVjYXVzZSBoZSBoYWQgYSBsYXJnZSBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICBwcmlzb25lcnMsIGFuZCBzb21lIG9mIHRoZSBzaGlwcyBoYWQgYmVlbiBsb3N0IGluIHRoZSBzdG9ybSwgaGUgZGV0ZXJtaW5lcyB0bwogICAgICAgICAgICAgICAgICAgIGNvbnZleSBiYWNrIGhpcyBhcm15IGF0IHR3byBlbWJhcmthdGlvbnMuIEFuZCBpdCBzbyBoYXBwZW5lZCwgdGhhdCBvdXQgb2Ygc28KICAgICAgICAgICAgICAgICAgICBsYXJnZSBhIG51bWJlciBvZiBzaGlwcywgaW4gc28gbWFueSB2b3lhZ2VzLCBuZWl0aGVyIGluIHRoaXMgbm9yIGluIHRoZSBwcmV2aW91cwogICAgICAgICAgICAgICAgICAgIHllYXIgd2FzIGFueSBzaGlwIG1pc3Npbmcgd2hpY2ggY29udmV5ZWQgc29sZGllcnM7IGJ1dCB2ZXJ5IGZldyBvdXQgb2YgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aGljaCB3ZXJlIHNlbnQgYmFjayB0byBoaW0gZnJvbSB0aGUgY29udGluZW50IGVtcHR5LCBhcyB0aGUgc29sZGllcnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9ybWVyIGNvbnZveSBoYWQgYmVlbiBkaXNlbWJhcmtlZCwgYW5kIG91dCBvZiB0aG9zZSAoc2l4dHkgaW4gbnVtYmVyKSB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiBoYWQgdGFrZW4gY2FyZSB0byBoYXZlIGJ1aWx0LCByZWFjaGVkCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZGVzdGluYXRpb247IGFsbW9zdCBhbGwgdGhlIHJlc3Qgd2VyZSBkcml2ZW4gYmFjaywgYW5kIHdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCB3YWl0ZWQgZm9yIHRoZW0gZm9yIHNvbWUgdGltZSBpbiB2YWluLCBsZXN0IGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJlIGRlYmFycmVkIGZyb20gYSB2b3lhZ2UgYnkgdGhlIHNlYXNvbiBvZiB0aGUgeWVhciwgaW5hc211Y2ggYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgZXF1aW5veCB3YXMgYXQgaGFuZCwgaGUgb2YgbmVjZXNzaXR5IHN0b3dlZCBoaXMgc29sZGllcnMgdGhlIG1vcmUgY2xvc2VseSwgYW5kLAogICAgICAgICAgICAgICAgICAgIGEgdmVyeSBncmVhdCBjYWxtIGNvbWluZyBvbiwgYWZ0ZXIgaGUgaGFkIHdlaWdoZWQgYW5jaG9yIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2Vjb25kIHdhdGNoLCBoZSByZWFjaGVkIGxhbmQgYXQgYnJlYWsgb2YgZGF5IGFuZCBicm91Z2h0IGluIGFsbCB0aGUgc2hpcHMgaW4KICAgICAgICAgICAgICAgICAgICBzYWZldHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiBoYWQgdGFrZW4gY2FyZSB0byBoYXZlIGJ1aWx0LCByZWFjaGVkCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZGVzdGluYXRpb247IGFsbW9zdCBhbGwgdGhlIHJlc3Qgd2VyZSBkcml2ZW4gYmFjaywgYW5kIHdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCB3YWl0ZWQgZm9yIHRoZW0gZm9yIHNvbWUgdGltZSBpbiB2YWluLCBsZXN0IGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJlIGRlYmFycmVkIGZyb20gYSB2b3lhZ2UgYnkgdGhlIHNlYXNvbiBvZiB0aGUgeWVhciwgaW5hc211Y2ggYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgZXF1aW5veCB3YXMgYXQgaGFuZCwgaGUgb2YgbmVjZXNzaXR5IHN0b3dlZCBoaXMgc29sZGllcnMgdGhlIG1vcmUgY2xvc2VseSwgYW5kLAogICAgICAgICAgICAgICAgICAgIGEgdmVyeSBncmVhdCBjYWxtIGNvbWluZyBvbiwgYWZ0ZXIgaGUgaGFkIHdlaWdoZWQgYW5jaG9yIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2Vjb25kIHdhdGNoLCBoZSByZWFjaGVkIGxhbmQgYXQgYnJlYWsgb2YgZGF5IGFuZCBicm91Z2h0IGluIGFsbCB0aGUgc2hpcHMgaW4KICAgICAgICAgICAgICAgICAgICBzYWZldHkuIDwvdHJhbnNsYXRpb24+"
translation['5.24'] = ""
translation['5.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIHdhcyBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4gYSBtYW4gbmFtZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UYXNnZXRpdXM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGJvcm4gb2YgdmVyeSBoaWdoIHJhbmssIHdob3NlIGFuY2VzdG9ycyBoYWQgaGVsZCB0aGUgc292ZXJlaWdudHkgaW4gaGlzIHN0YXRlLgogICAgICAgICAgICAgICAgICAgIFRvIGhpbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIHJlc3RvcmVkIHRoZSBwb3NpdGlvbiBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMsIGluIGNvbnNpZGVyYXRpb24gb2YgaGlzIHByb3dlc3MgYW5kIGF0dGFjaG1lbnQgdG93YXJkIGhpbSwgYmVjYXVzZSBpbgogICAgICAgICAgICAgICAgICAgIGFsbCBoaXMgd2FycyBoZSBoYWQgYXZhaWxlZCBoaW1zZWxmIG9mIGhpcyB2YWx1YWJsZSBzZXJ2aWNlcy4gSGlzIHBlcnNvbmFsCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcyBoYWQga2lsbGVkIGhpbSB3aGVuIGluIHRoZSB0aGlyZCB5ZWFyIG9mIGhpcyByZWlnbiwgbWFueSBldmVuIG9mIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBzdGF0ZSBiZWluZyBvcGVubHkgcHJvbW90ZXJzIFtvZiB0aGF0IGFjdF0gVGhpcyBldmVudCBpcyByZWxhdGVkIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPi4gSGUgZmVhcmluZywgYmVjYXVzZSBzZXZlcmFsIHdlcmUgaW52b2x2ZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgYWN0LCB0aGF0IHRoZSBzdGF0ZSBtaWdodCByZXZvbHQgYXQgdGhlaXIgaW5zdGlnYXRpb24sIG9yZGVycyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y2l1cwogICAgICAgICAgICAgICAgICAgICAgICBQbGFuY3VzPC9uYW1lPiwgd2l0aCBhIGxlZ2lvbiwgdG8gcHJvY2VlZCBxdWlja2x5IGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDYzIiByZWc9IiAgK0JlbGdpdW0gWzQsNTAuODMzXSAobmF0aW9uKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkJlbGdpdW0gPC9uYW1lPiB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4sIGFuZCB3aW50ZXIgdGhlcmUsIGFuZCBhcnJlc3QKICAgICAgICAgICAgICAgICAgICBhbmQgc2VuZCB0byBoaW0gdGhlIHBlcnNvbnMgYnkgd2hvc2UgaW5zdHJ1bWVudGFsaXR5IGhlIHNob3VsZCBkaXNjb3ZlciB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGFzZ2V0aXVzPC9uYW1lPiB3YXMgc2xhaW4uIEluIHRoZSBtZWFuIHRpbWUsIGhlIHdhcyBhcHByaXNlZCBieSBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgbGlldXRlbmFudHMgYW5kIHF1ZXN0b3JzIHRvIHdob20gaGUgaGFkIGFzc2lnbmVkIHRoZSBsZWdpb25zLCB0aGF0IHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCBpbiB3aW50ZXItcXVhcnRlcnMsIGFuZCB0aGF0IHRoZSBwbGFjZSBmb3IgdGhlIHF1YXJ0ZXJzIHdhcyBmb3J0aWZpZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPiBhIG1hbiBuYW1lZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRhc2dldGl1czwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYm9ybiBvZiB2ZXJ5IGhpZ2ggcmFuaywgd2hvc2UgYW5jZXN0b3JzIGhhZCBoZWxkIHRoZSBzb3ZlcmVpZ250eSBpbiBoaXMgc3RhdGUuCiAgICAgICAgICAgICAgICAgICAgVG8gaGltIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgcmVzdG9yZWQgdGhlIHBvc2l0aW9uIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycywgaW4gY29uc2lkZXJhdGlvbiBvZiBoaXMgcHJvd2VzcyBhbmQgYXR0YWNobWVudCB0b3dhcmQgaGltLCBiZWNhdXNlIGluCiAgICAgICAgICAgICAgICAgICAgYWxsIGhpcyB3YXJzIGhlIGhhZCBhdmFpbGVkIGhpbXNlbGYgb2YgaGlzIHZhbHVhYmxlIHNlcnZpY2VzLiBIaXMgcGVyc29uYWwKICAgICAgICAgICAgICAgICAgICBlbmVtaWVzIGhhZCBraWxsZWQgaGltIHdoZW4gaW4gdGhlIHRoaXJkIHllYXIgb2YgaGlzIHJlaWduLCBtYW55IGV2ZW4gb2YgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIHN0YXRlIGJlaW5nIG9wZW5seSBwcm9tb3RlcnMgW29mIHRoYXQgYWN0XSBUaGlzIGV2ZW50IGlzIHJlbGF0ZWQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LiBIZSBmZWFyaW5nLCBiZWNhdXNlIHNldmVyYWwgd2VyZSBpbnZvbHZlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBhY3QsIHRoYXQgdGhlIHN0YXRlIG1pZ2h0IHJldm9sdCBhdCB0aGVpciBpbnN0aWdhdGlvbiwgb3JkZXJzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIFBsYW5jdXM8L25hbWU+LCB3aXRoIGEgbGVnaW9uLCB0byBwcm9jZWVkIHF1aWNrbHkgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNjMiIHJlZz0iICArQmVsZ2l1bSBbNCw1MC44MzNdIChuYXRpb24pLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QmVsZ2l1bSA8L25hbWU+IHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPiwgYW5kIHdpbnRlciB0aGVyZSwgYW5kIGFycmVzdAogICAgICAgICAgICAgICAgICAgIGFuZCBzZW5kIHRvIGhpbSB0aGUgcGVyc29ucyBieSB3aG9zZSBpbnN0cnVtZW50YWxpdHkgaGUgc2hvdWxkIGRpc2NvdmVyIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UYXNnZXRpdXM8L25hbWU+IHdhcyBzbGFpbi4gSW4gdGhlIG1lYW4gdGltZSwgaGUgd2FzIGFwcHJpc2VkIGJ5IGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSBsaWV1dGVuYW50cyBhbmQgcXVlc3RvcnMgdG8gd2hvbSBoZSBoYWQgYXNzaWduZWQgdGhlIGxlZ2lvbnMsIHRoYXQgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIGluIHdpbnRlci1xdWFydGVycywgYW5kIHRoYXQgdGhlIHBsYWNlIGZvciB0aGUgcXVhcnRlcnMgd2FzIGZvcnRpZmllZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFib3V0IGZpZnRlZW4gZGF5cyBhZnRlciB0aGV5IGhhZCBjb21lIGludG8gd2ludGVyLXF1YXJ0ZXJzLCB0aGUgYmVnaW5uaW5nIG9mIGEKICAgICAgICAgICAgICAgICAgICBzdWRkZW4gaW5zdXJyZWN0aW9uIGFuZCByZXZvbHQgYXJvc2UgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRpdm9sY3VzPC9uYW1lPiwgd2hvLCB0aG91Z2ggdGhleSBoYWQgbWV0IHdpdGggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5TYWJpbnVzPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5Db3R0YTwvbmFtZT4gYXQgdGhlIGJvcmRlcnMgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBraW5nZG9tLCBhbmQgaGFkIGNvbnZleWVkIGNvcm4gaW50byBvdXIgd2ludGVyLXF1YXJ0ZXJzLCBpbmR1Y2VkIGJ5IHRoZSBtZXNzYWdlcwogICAgICAgICAgICAgICAgICAgIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5kdXRpb21hcnVzPC9uYW1lPiwgb25lIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NDciIHJlZz0iICArVHJpZXIgWzYuNjUsNDkuNzVdIChpbmhhYml0ZWQgcGxhY2UpLCBUcmllciwgUmhlaW5sYW5kLVBmYWx6LCBHZXJtYW55LCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+VHJldmlyaSA8L25hbWU+LCBleGNpdGVkIHRoZWlyIHBlb3BsZSwgYW5kIGFmdGVyIGhhdmluZyBzdWRkZW5seSBhc3NhaWxlZAogICAgICAgICAgICAgICAgICAgIHRoZSBzb2xkaWVycyBlbmdhZ2VkIGluIHByb2N1cmluZyB3b29kLCBjYW1lIHdpdGggYSBsYXJnZSBib2R5IHRvIGF0dGFjayB0aGUKICAgICAgICAgICAgICAgICAgICBjYW1wLiBXaGVuIG91ciBtZW4gaGFkIHNwZWVkaWx5IHRha2VuIHVwIGFybXMgYW5kIGhhZCBhc2NlbmRlZCB0aGUgcmFtcGFydCwgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VuZGluZyBvdXQgc29tZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNwYW5pc2g8L25hbWU+IGhvcnNlIG9uIG9uZSBzaWRlLCBoYWQgcHJvdmVkIGNvbnF1ZXJvcnMKICAgICAgICAgICAgICAgICAgICBpbiBhIGNhdmFscnkgYWN0aW9uLCB0aGUgZW5lbXksIGRlc3BhaXJpbmcgb2Ygc3VjY2VzcywgZHJldyBvZmYgdGhlaXIgdHJvb3BzCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgYXNzYXVsdC4gVGhlbiB0aGV5IHNob3V0ZWQsIGFjY29yZGluZyB0byB0aGVpciBjdXN0b20sIHRoYXQgc29tZSBvZiBvdXIKICAgICAgICAgICAgICAgICAgICBtZW4gc2hvdWxkIGdvIGZvcndhcmQgdG8gYSBjb25mZXJlbmNlLCBbYWxsZWdpbmddIHRoYXQgdGhleSBoYWQgc29tZSB0aGluZ3MKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGV5IGRlc2lyZWQgdG8gc2F5IHJlc3BlY3RpbmcgdGhlIGNvbW1vbiBpbnRlcmVzdCwgYnkgd2hpY2ggdGhleSB0cnVzdGVkCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZGlzcHV0ZXMgY291bGQgYmUgcmVtb3ZlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdGl2b2xjdXM8L25hbWU+LCB3aG8sIHRob3VnaCB0aGV5IGhhZCBtZXQgd2l0aCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlNhYmludXM8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNvdHRhPC9uYW1lPiBhdCB0aGUgYm9yZGVycyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGtpbmdkb20sIGFuZCBoYWQgY29udmV5ZWQgY29ybiBpbnRvIG91ciB3aW50ZXItcXVhcnRlcnMsIGluZHVjZWQgYnkgdGhlIG1lc3NhZ2VzCiAgICAgICAgICAgICAgICAgICAgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbmR1dGlvbWFydXM8L25hbWU+LCBvbmUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4sIGV4Y2l0ZWQgdGhlaXIgcGVvcGxlLCBhbmQgYWZ0ZXIgaGF2aW5nIHN1ZGRlbmx5IGFzc2FpbGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIHNvbGRpZXJzIGVuZ2FnZWQgaW4gcHJvY3VyaW5nIHdvb2QsIGNhbWUgd2l0aCBhIGxhcmdlIGJvZHkgdG8gYXR0YWNrIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbXAuIFdoZW4gb3VyIG1lbiBoYWQgc3BlZWRpbHkgdGFrZW4gdXAgYXJtcyBhbmQgaGFkIGFzY2VuZGVkIHRoZSByYW1wYXJ0LCBhbmQKICAgICAgICAgICAgICAgICAgICBzZW5kaW5nIG91dCBzb21lIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3BhbmlzaDwvbmFtZT4gaG9yc2Ugb24gb25lIHNpZGUsIGhhZCBwcm92ZWQgY29ucXVlcm9ycwogICAgICAgICAgICAgICAgICAgIGluIGEgY2F2YWxyeSBhY3Rpb24sIHRoZSBlbmVteSwgZGVzcGFpcmluZyBvZiBzdWNjZXNzLCBkcmV3IG9mZiB0aGVpciB0cm9vcHMKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBhc3NhdWx0LiBUaGVuIHRoZXkgc2hvdXRlZCwgYWNjb3JkaW5nIHRvIHRoZWlyIGN1c3RvbSwgdGhhdCBzb21lIG9mIG91cgogICAgICAgICAgICAgICAgICAgIG1lbiBzaG91bGQgZ28gZm9yd2FyZCB0byBhIGNvbmZlcmVuY2UsIFthbGxlZ2luZ10gdGhhdCB0aGV5IGhhZCBzb21lIHRoaW5ncwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXkgZGVzaXJlZCB0byBzYXkgcmVzcGVjdGluZyB0aGUgY29tbW9uIGludGVyZXN0LCBieSB3aGljaCB0aGV5IHRydXN0ZWQKICAgICAgICAgICAgICAgICAgICB0aGVpciBkaXNwdXRlcyBjb3VsZCBiZSByZW1vdmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.27'] = ""
translation['5.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+QXJwaW5laXVzPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5KdW5pdXM8L25hbWU+IHJlbGF0ZSB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBsaWV1dGVuYW50cyB3aGF0IHRoZXkgaGFkIGhlYXJkLiBUaGV5LCBncmVhdGx5IGFsYXJtZWQgYnkgdGhlIHVuZXhwZWN0ZWQKICAgICAgICAgICAgICAgICAgICBhZmZhaXIsIHRob3VnaCB0aG9zZSB0aGluZ3Mgd2VyZSBzcG9rZW4gYnkgYW4gZW5lbXksIHN0aWxsIHRob3VnaHQgdGhleSB3ZXJlIG5vdAogICAgICAgICAgICAgICAgICAgIHRvIGJlIGRpc3JlZ2FyZGVkOyBhbmQgdGhleSB3ZXJlIGVzcGVjaWFsbHkgaW5mbHVlbmNlZCBieSB0aGlzIGNvbnNpZGVyYXRpb24sCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpdCB3YXMgc2NhcmNlbHkgY3JlZGlibGUgdGhhdCB0aGUgb2JzY3VyZSBhbmQgaHVtYmxlIHN0YXRlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVidXJvbmVzPC9uYW1lPiBoYWQgZGFyZWQgdG8gbWFrZSB3YXIgdXBvbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUgb2YgdGhlaXIgb3duIGFjY29yZC4gQWNjb3JkaW5nbHksIHRoZXkgcmVmZXIgdGhlIG1hdHRlcgogICAgICAgICAgICAgICAgICAgIHRvIGEgY291bmNpbCwgYW5kIGEgZ3JlYXQgY29udHJvdmVyc3kgYXJpc2VzIGFtb25nIHRoZW0uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TC4KICAgICAgICAgICAgICAgICAgICAgICAgQXVydW5jdWxlaXVzPC9uYW1lPiwgYW5kIHNldmVyYWwgdHJpYnVuZXMgb2YgdGhlIHNvbGRpZXJzIGFuZCB0aGUgY2VudHVyaW9ucwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBmaXJzdCByYW5rLCB3ZXJlIG9mIG9waW5pb24gInRoYXQgbm90aGluZyBzaG91bGQgYmUgZG9uZSBoYXN0aWx5LCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgc2hvdWxkIG5vdCBkZXBhcnQgZnJvbSB0aGUgY2FtcCB3aXRob3V0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIG9yZGVyczsiIHRoZXkgZGVjbGFyZWQsICJ0aGF0IGFueSBmb3JjZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgaG93ZXZlciBncmVhdCwgbWlnaHQgYmUgZW5jb3VudGVyZWQgYnkKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpZWQgd2ludGVyLXF1YXJ0ZXJzOyB0aGF0IHRoaXMgZmFjdCB3YXMgYSBwcm9vZiBbb2YgaXRdOyB0aGF0IHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgc3VzdGFpbmVkIHRoZSBmaXJzdCBhc3NhdWx0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gbW9zdAogICAgICAgICAgICAgICAgICAgIHZhbGlhbnRseSwgaW5mbGljdGluZyBtYW55IHdvdW5kcyB1cG9uIHRoZW07IHRoYXQgdGhleSB3ZXJlIG5vdCBkaXN0cmVzc2VkIGZvcgogICAgICAgICAgICAgICAgICAgIGNvcm47IHRoYXQgaW4gdGhlIG1lYW4gdGltZSByZWxpZWYgd291bGQgY29tZSBib3RoIGZyb20gdGhlIG5lYXJlc3QKICAgICAgICAgICAgICAgICAgICB3aW50ZXItcXVhcnRlcnMgYW5kIGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+OyBsYXN0bHksIHRoZXkgcHV0IHRoZQogICAgICAgICAgICAgICAgICAgIHF1ZXJ5LCAid2hhdCBjb3VsZCBiZSBtb3JlIHVuZGV0ZXJtaW5lZCwgbW9yZSB1bmRpZ25pZmllZCwgdGhhbiB0byBhZG9wdAogICAgICAgICAgICAgICAgICAgIG1lYXN1cmVzIHJlc3BlY3RpbmcgdGhlIG1vc3QgaW1wb3J0YW50IGFmZmFpcnMgb24gdGhlIGF1dGhvcml0eSBvZiBhbiBlbmVteT8iCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkFycGluZWl1czwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+SnVuaXVzPC9uYW1lPiByZWxhdGUgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgbGlldXRlbmFudHMgd2hhdCB0aGV5IGhhZCBoZWFyZC4gVGhleSwgZ3JlYXRseSBhbGFybWVkIGJ5IHRoZSB1bmV4cGVjdGVkCiAgICAgICAgICAgICAgICAgICAgYWZmYWlyLCB0aG91Z2ggdGhvc2UgdGhpbmdzIHdlcmUgc3Bva2VuIGJ5IGFuIGVuZW15LCBzdGlsbCB0aG91Z2h0IHRoZXkgd2VyZSBub3QKICAgICAgICAgICAgICAgICAgICB0byBiZSBkaXNyZWdhcmRlZDsgYW5kIHRoZXkgd2VyZSBlc3BlY2lhbGx5IGluZmx1ZW5jZWQgYnkgdGhpcyBjb25zaWRlcmF0aW9uLAogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgd2FzIHNjYXJjZWx5IGNyZWRpYmxlIHRoYXQgdGhlIG9ic2N1cmUgYW5kIGh1bWJsZSBzdGF0ZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5FYnVyb25lczwvbmFtZT4gaGFkIGRhcmVkIHRvIG1ha2Ugd2FyIHVwb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIG9mIHRoZWlyIG93biBhY2NvcmQuIEFjY29yZGluZ2x5LCB0aGV5IHJlZmVyIHRoZSBtYXR0ZXIKICAgICAgICAgICAgICAgICAgICB0byBhIGNvdW5jaWwsIGFuZCBhIGdyZWF0IGNvbnRyb3ZlcnN5IGFyaXNlcyBhbW9uZyB0aGVtLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkwuCiAgICAgICAgICAgICAgICAgICAgICAgIEF1cnVuY3VsZWl1czwvbmFtZT4sIGFuZCBzZXZlcmFsIHRyaWJ1bmVzIG9mIHRoZSBzb2xkaWVycyBhbmQgdGhlIGNlbnR1cmlvbnMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZmlyc3QgcmFuaywgd2VyZSBvZiBvcGluaW9uICJ0aGF0IG5vdGhpbmcgc2hvdWxkIGJlIGRvbmUgaGFzdGlseSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IHNob3VsZCBub3QgZGVwYXJ0IGZyb20gdGhlIGNhbXAgd2l0aG91dCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBvcmRlcnM7IiB0aGV5IGRlY2xhcmVkLCAidGhhdCBhbnkgZm9yY2VzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIGhvd2V2ZXIgZ3JlYXQsIG1pZ2h0IGJlIGVuY291bnRlcmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgZm9ydGlmaWVkIHdpbnRlci1xdWFydGVyczsgdGhhdCB0aGlzIGZhY3Qgd2FzIGEgcHJvb2YgW29mIGl0XTsgdGhhdCB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIHN1c3RhaW5lZCB0aGUgZmlyc3QgYXNzYXVsdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IG1vc3QKICAgICAgICAgICAgICAgICAgICB2YWxpYW50bHksIGluZmxpY3RpbmcgbWFueSB3b3VuZHMgdXBvbiB0aGVtOyB0aGF0IHRoZXkgd2VyZSBub3QgZGlzdHJlc3NlZCBmb3IKICAgICAgICAgICAgICAgICAgICBjb3JuOyB0aGF0IGluIHRoZSBtZWFuIHRpbWUgcmVsaWVmIHdvdWxkIGNvbWUgYm90aCBmcm9tIHRoZSBuZWFyZXN0CiAgICAgICAgICAgICAgICAgICAgd2ludGVyLXF1YXJ0ZXJzIGFuZCBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPjsgbGFzdGx5LCB0aGV5IHB1dCB0aGUKICAgICAgICAgICAgICAgICAgICBxdWVyeSwgIndoYXQgY291bGQgYmUgbW9yZSB1bmRldGVybWluZWQsIG1vcmUgdW5kaWduaWZpZWQsIHRoYW4gdG8gYWRvcHQKICAgICAgICAgICAgICAgICAgICBtZWFzdXJlcyByZXNwZWN0aW5nIHRoZSBtb3N0IGltcG9ydGFudCBhZmZhaXJzIG9uIHRoZSBhdXRob3JpdHkgb2YgYW4gZW5lbXk/IgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIG9wcG9zaXRpb24gdG8gdGhvc2UgdGhpbmdzLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRpdHVyaXVzPC9uYW1lPiBleGNsYWltZWQsICJUaGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSB3b3VsZCBkbyB0aGlzIHRvbyBsYXRlLCB3aGVuIGdyZWF0ZXIgZm9yY2VzIG9mIHRoZSBlbmVteSwgYWZ0ZXIgYSBqdW5jdGlvbgogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgc2hvdWxkIGhhdmUgYXNzZW1ibGVkOyBvciB3aGVuIHNvbWUKICAgICAgICAgICAgICAgICAgICBkaXNhc3RlciBoYWQgYmVlbiByZWNlaXZlZCBpbiB0aGUgbmVpZ2hib3Jpbmcgd2ludGVyLXF1YXJ0ZXJzOyB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIG9wcG9ydHVuaXR5IGZvciBkZWxpYmVyYXRpbmcgd2FzIHNob3J0OyB0aGF0IGhlIGJlbGlldmVkIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBzZXQgZm9ydGggaW50byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiIHJlZz0iSXRhbHkgWzEyLjgzMyw0Mi44MzNdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5JdGFseTwvbmFtZT4sIGFzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPiB3b3VsZCBub3Qgb3RoZXJ3aXNlIGhhdmUgdGFrZW4gdGhlIG1lYXN1cmUgb2Ygc2xheWluZwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRhc2dldGl1czwvbmFtZT4sIG5vciB3b3VsZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5FYnVyb25lczwvbmFtZT4sIGlmIGhlIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCwgaGF2ZSBjb21lIHRvIHRoZSBjYW1wIHdpdGggc28gZ3JlYXQgZGVmaWFuY2Ugb2YgdXM7IHRoYXQgaGUgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCB0aGUgZW5lbXksIGJ1dCB0aGUgZmFjdCwgYXMgdGhlIGF1dGhvcml0eTsgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUKICAgICAgICAgICAgICAgICAgICA8L25hbWU+IHdhcyBuZWFyOyB0aGF0IHRoZSBkZWF0aCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+IGFuZCBvdXIgcHJldmlvdXMKICAgICAgICAgICAgICAgICAgICB2aWN0b3JpZXMgd2VyZSBzdWJqZWN0cyBvZiBncmVhdCBpbmRpZ25hdGlvbiB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+OyB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB3YXMgaW5mbGFtZWQsIHRoYXQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgcmVjZWl2ZWQgc28gbWFueSBkZWZlYXRzIHNoZSB3YXMgcmVkdWNlZCB1bmRlciB0aGUgc3dheSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIGhlciBwcmlzdGluZSBnbG9yeSBpbiBtaWxpdGFyeSBtYXR0ZXJzCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgZXh0aW5ndWlzaGVkLiIgTGFzdGx5LCAid2hvIHdvdWxkIHBlcnN1YWRlIGhpbXNlbGYgb2YgdGhpcywgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiBoYWQgcmVzb3J0ZWQgdG8gYSBkZXNpZ24gb2YgdGhhdCBuYXR1cmUgd2l0aG91dCBzdXJlCiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kcz8gVGhhdCBoaXMgb3duIG9waW5pb24gd2FzIHNhZmUgb24gZWl0aGVyIHNpZGU7IGlmIHRoZXJlIGJlIG5vdGhpbmcgdmVyeQogICAgICAgICAgICAgICAgICAgIGZvcm1pZGFibGUsIHRoZXkgd291bGQgZ28gd2l0aG91dCBkYW5nZXIgdG8gdGhlIG5lYXJlc3QgbGVnaW9uOyBpZiBhbGwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGNvbnNwaXJlZCB3aXRoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb25seSBzYWZldHkgbGF5IGluIGRpc3BhdGNoLiBXaGF0IGlzc3VlIHdvdWxkIHRoZSBhZHZpY2Ugb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5Db3R0YTwvbmFtZT4gYW5kIG9mIHRob3NlIHdobyBkaWZmZXJlZCBmcm9tIGhpbSwgaGF2ZT8gZnJvbSB3aGljaCwgaWYKICAgICAgICAgICAgICAgICAgICBpbW1lZGlhdGUgZGFuZ2VyIHdhcyBub3QgdG8gYmUgZHJlYWRlZCwgeWV0IGNlcnRhaW5seSBmYW1pbmUsIGJ5IGEgcHJvdHJhY3RlZAogICAgICAgICAgICAgICAgICAgIHNpZWdlLCB3YXMuIiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5UaXR1cml1czwvbmFtZT4gZXhjbGFpbWVkLCAiVGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgd291bGQgZG8gdGhpcyB0b28gbGF0ZSwgd2hlbiBncmVhdGVyIGZvcmNlcyBvZiB0aGUgZW5lbXksIGFmdGVyIGEganVuY3Rpb24KICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIHNob3VsZCBoYXZlIGFzc2VtYmxlZDsgb3Igd2hlbiBzb21lCiAgICAgICAgICAgICAgICAgICAgZGlzYXN0ZXIgaGFkIGJlZW4gcmVjZWl2ZWQgaW4gdGhlIG5laWdoYm9yaW5nIHdpbnRlci1xdWFydGVyczsgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0eSBmb3IgZGVsaWJlcmF0aW5nIHdhcyBzaG9ydDsgdGhhdCBoZSBiZWxpZXZlZCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgc2V0IGZvcnRoIGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIiByZWc9Ikl0YWx5IFsxMi44MzMsNDIuODMzXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+SXRhbHk8L25hbWU+LCBhcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4gd291bGQgbm90IG90aGVyd2lzZSBoYXZlIHRha2VuIHRoZSBtZWFzdXJlIG9mIHNsYXlpbmcKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UYXNnZXRpdXM8L25hbWU+LCBub3Igd291bGQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWJ1cm9uZXM8L25hbWU+LCBpZiBoZSBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIHByZXNlbnQsIGhhdmUgY29tZSB0byB0aGUgY2FtcCB3aXRoIHNvIGdyZWF0IGRlZmlhbmNlIG9mIHVzOyB0aGF0IGhlIGRpZCBub3QKICAgICAgICAgICAgICAgICAgICByZWdhcmQgdGhlIGVuZW15LCBidXQgdGhlIGZhY3QsIGFzIHRoZSBhdXRob3JpdHk7IHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiB3YXMgbmVhcjsgdGhhdCB0aGUgZGVhdGggb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlvdmlzdHVzPC9uYW1lPiBhbmQgb3VyIHByZXZpb3VzCiAgICAgICAgICAgICAgICAgICAgdmljdG9yaWVzIHdlcmUgc3ViamVjdHMgb2YgZ3JlYXQgaW5kaWduYXRpb24gdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPjsgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gd2FzIGluZmxhbWVkLCB0aGF0IGFmdGVyCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHJlY2VpdmVkIHNvIG1hbnkgZGVmZWF0cyBzaGUgd2FzIHJlZHVjZWQgdW5kZXIgdGhlIHN3YXkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLCBoZXIgcHJpc3RpbmUgZ2xvcnkgaW4gbWlsaXRhcnkgbWF0dGVycwogICAgICAgICAgICAgICAgICAgIGJlaW5nIGV4dGluZ3Vpc2hlZC4iIExhc3RseSwgIndobyB3b3VsZCBwZXJzdWFkZSBoaW1zZWxmIG9mIHRoaXMsIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4gaGFkIHJlc29ydGVkIHRvIGEgZGVzaWduIG9mIHRoYXQgbmF0dXJlIHdpdGhvdXQgc3VyZQogICAgICAgICAgICAgICAgICAgIGdyb3VuZHM/IFRoYXQgaGlzIG93biBvcGluaW9uIHdhcyBzYWZlIG9uIGVpdGhlciBzaWRlOyBpZiB0aGVyZSBiZSBub3RoaW5nIHZlcnkKICAgICAgICAgICAgICAgICAgICBmb3JtaWRhYmxlLCB0aGV5IHdvdWxkIGdvIHdpdGhvdXQgZGFuZ2VyIHRvIHRoZSBuZWFyZXN0IGxlZ2lvbjsgaWYgYWxsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBjb25zcGlyZWQgd2l0aCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCB0aGVpcgogICAgICAgICAgICAgICAgICAgIG9ubHkgc2FmZXR5IGxheSBpbiBkaXNwYXRjaC4gV2hhdCBpc3N1ZSB3b3VsZCB0aGUgYWR2aWNlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q290dGE8L25hbWU+IGFuZCBvZiB0aG9zZSB3aG8gZGlmZmVyZWQgZnJvbSBoaW0sIGhhdmU/IGZyb20gd2hpY2gsIGlmCiAgICAgICAgICAgICAgICAgICAgaW1tZWRpYXRlIGRhbmdlciB3YXMgbm90IHRvIGJlIGRyZWFkZWQsIHlldCBjZXJ0YWlubHkgZmFtaW5lLCBieSBhIHByb3RyYWN0ZWQKICAgICAgICAgICAgICAgICAgICBzaWVnZSwgd2FzLiIgPC90cmFuc2xhdGlvbj4="
translation['5.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgZGlzY3Vzc2lvbiBoYXZpbmcgYmVlbiBoZWxkIG9uIHRoZSB0d28gc2lkZXMsIHdoZW4gb3Bwb3NpdGlvbiB3YXMgb2ZmZXJlZAogICAgICAgICAgICAgICAgICAgIHN0cmVudW91c2x5IGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q290dGE8L25hbWU+IGFuZCB0aGUgcHJpbmNpcGFsIG9mZmljZXJzLAogICAgICAgICAgICAgICAgICAgICJQcmV2YWlsLCIgc2FpZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlNhYmludXM8L25hbWU+LCAiaWYgc28geW91IHdpc2ggaXQ7IiBhbmQgaGUKICAgICAgICAgICAgICAgICAgICBzYWlkIGl0IHdpdGggYSBsb3VkZXIgdm9pY2UsIHRoYXQgYSBncmVhdCBwb3J0aW9uIG9mIHRoZSBzb2xkaWVycyBtaWdodCBoZWFyCiAgICAgICAgICAgICAgICAgICAgaGltOyAibm9yIGFtIEkgdGhlIHBlcnNvbiBhbW9uZyB5b3UsIiBoZSBzYWlkLCAid2hvIGlzIG1vc3QgcG93ZXJmdWxseSBhbGFybWVkCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIGRhbmdlciBvZiBkZWF0aDsgdGhlc2Ugd2lsbCBiZSBhd2FyZSBvZiBpdCwgYW5kIHRoZW4sIGlmIGFueSB0aGluZwogICAgICAgICAgICAgICAgICAgIGRpc2FzdHJvdXMgc2hhbGwgaGF2ZSBvY2N1cnJlZCwgdGhleSB3aWxsIGRlbWFuZCBhIHJlY2tvbmluZyBhdCB5b3VyIGhhbmRzOwogICAgICAgICAgICAgICAgICAgIHRoZXNlLCB3aG8sIGlmIGl0IHdlcmUgcGVybWl0dGVkIGJ5IHlvdSwgdW5pdGVkIHRocmVlIGRheXMgaGVuY2Ugd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBuZWFyZXN0IHdpbnRlci1xdWFydGVycywgbWF5IGVuY291bnRlciB0aGUgY29tbW9uIGNvbmRpdGlvbiBvZiB3YXIgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICByZXN0LCBhbmQgbm90LCBhcyBpZiBmb3JjZWQgYXdheSBhbmQgc2VwYXJhdGVkIGZhciBmcm9tIHRoZSByZXN0LCBwZXJpc2ggZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIHN3b3JkIG9yIGJ5IGZhbWluZS4iIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNvdHRhPC9uYW1lPiBhbmQgdGhlIHByaW5jaXBhbCBvZmZpY2VycywKICAgICAgICAgICAgICAgICAgICAiUHJldmFpbCwiIHNhaWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5TYWJpbnVzPC9uYW1lPiwgImlmIHNvIHlvdSB3aXNoIGl0OyIgYW5kIGhlCiAgICAgICAgICAgICAgICAgICAgc2FpZCBpdCB3aXRoIGEgbG91ZGVyIHZvaWNlLCB0aGF0IGEgZ3JlYXQgcG9ydGlvbiBvZiB0aGUgc29sZGllcnMgbWlnaHQgaGVhcgogICAgICAgICAgICAgICAgICAgIGhpbTsgIm5vciBhbSBJIHRoZSBwZXJzb24gYW1vbmcgeW91LCIgaGUgc2FpZCwgIndobyBpcyBtb3N0IHBvd2VyZnVsbHkgYWxhcm1lZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBkYW5nZXIgb2YgZGVhdGg7IHRoZXNlIHdpbGwgYmUgYXdhcmUgb2YgaXQsIGFuZCB0aGVuLCBpZiBhbnkgdGhpbmcKICAgICAgICAgICAgICAgICAgICBkaXNhc3Ryb3VzIHNoYWxsIGhhdmUgb2NjdXJyZWQsIHRoZXkgd2lsbCBkZW1hbmQgYSByZWNrb25pbmcgYXQgeW91ciBoYW5kczsKICAgICAgICAgICAgICAgICAgICB0aGVzZSwgd2hvLCBpZiBpdCB3ZXJlIHBlcm1pdHRlZCBieSB5b3UsIHVuaXRlZCB0aHJlZSBkYXlzIGhlbmNlIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgbmVhcmVzdCB3aW50ZXItcXVhcnRlcnMsIG1heSBlbmNvdW50ZXIgdGhlIGNvbW1vbiBjb25kaXRpb24gb2Ygd2FyIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzdCwgYW5kIG5vdCwgYXMgaWYgZm9yY2VkIGF3YXkgYW5kIHNlcGFyYXRlZCBmYXIgZnJvbSB0aGUgcmVzdCwgcGVyaXNoIGVpdGhlcgogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBzd29yZCBvciBieSBmYW1pbmUuIiA8L3RyYW5zbGF0aW9uPg=="
translation['5.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXkgcmlzZSBmcm9tIHRoZSBjb3VuY2lsLCBkZXRhaW4gYm90aCwgYW5kIGVudHJlYXQsIHRoYXQgInRoZXkgZG8gbm90IGJyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIG1hdHRlciBpbnRvIHRoZSBncmVhdGVzdCBqZW9wYXJkeSBieSB0aGVpciBkaXNzZW5zaW9uIGFuZCBvYnN0aW5hY3k7IHRoZSBhZmZhaXIKICAgICAgICAgICAgICAgICAgICB3YXMgYW4gZWFzeSBvbmUsIGlmIG9ubHkgdGhleSBhbGwgdGhvdWdodCBhbmQgYXBwcm92ZWQgb2YgdGhlIHNhbWUgdGhpbmcsCiAgICAgICAgICAgICAgICAgICAgd2hldGhlciB0aGV5IHJlbWFpbiBvciBkZXBhcnQ7IG9uIHRoZSBvdGhlciBoYW5kLCB0aGV5IHNhdyBubyBzZWN1cml0eSBpbgogICAgICAgICAgICAgICAgICAgIGRpc3NlbnNpb24uIiBUaGUgbWF0dGVyIGlzIHByb2xvbmdlZCBieSBkZWJhdGUgdGlsbCBtaWRuaWdodC4gQXQgbGFzdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNvdHRhPC9uYW1lPiwgYmVpbmcgb3ZlcnJ1bGVkLCB5aWVsZHMgaGlzIGFzc2VudDsgdGhlIG9waW5pb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5TYWJpbnVzPC9uYW1lPiBwcmV2YWlscy4gSXQgaXMgcHJvY2xhaW1lZCB0aGF0IHRoZXkgd2lsbAogICAgICAgICAgICAgICAgICAgIG1hcmNoIGF0IGRheS1icmVhazsgdGhlIHJlbWFpbmRlciBvZiB0aGUgbmlnaHQgaXMgc3BlbnQgd2l0aG91dCBzbGVlcCwgc2luY2UKICAgICAgICAgICAgICAgICAgICBldmVyeSBzb2xkaWVyIHdhcyBpbnNwZWN0aW5nIGhpcyBwcm9wZXJ0eSwgW3RvIHNlZV0gd2hhdCBoZSBjb3VsZCBjYXJyeSB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGltLCBhbmQgd2hhdCwgb3V0IG9mIHRoZSBhcHB1cnRlbmFuY2VzIG9mIHRoZSB3aW50ZXItcXVhcnRlcnMsIGhlIHdvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgY29tcGVsbGVkIHRvIGxlYXZlOyBldmVyeSByZWFzb24gaXMgc3VnZ2VzdGVkIHRvIHNob3cgd2h5IHRoZXkgY291bGQgbm90IHN0YXkKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGRhbmdlciwgYW5kIGhvdyB0aGF0IGRhbmdlciB3b3VsZCBiZSBpbmNyZWFzZWQgYnkgdGhlIGZhdGlndWUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMgYW5kIHRoZWlyIHdhbnQgb2Ygc2xlZXAuIEF0IGJyZWFrIG9mIGRheSB0aGV5IHF1aXQgdGhlIGNhbXAsIGluIGEgdmVyeQogICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkIGxpbmUgYW5kIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBiYWdnYWdlLCBpbiBzdWNoIGEgbWFubmVyIGFzIG1lbgogICAgICAgICAgICAgICAgICAgIHdobyB3ZXJlIGNvbnZpbmNlZCB0aGF0IHRoZSBhZHZpY2Ugd2FzIGdpdmVuIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+LCBub3QgYXMgYW4KICAgICAgICAgICAgICAgICAgICBlbmVteSwgYnV0IGFzIG1vc3QgZnJpZW5kbHkgW3Rvd2FyZCB0aGVtXS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q290dGE8L25hbWU+LCBiZWluZyBvdmVycnVsZWQsIHlpZWxkcyBoaXMgYXNzZW50OyB0aGUgb3BpbmlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlNhYmludXM8L25hbWU+IHByZXZhaWxzLiBJdCBpcyBwcm9jbGFpbWVkIHRoYXQgdGhleSB3aWxsCiAgICAgICAgICAgICAgICAgICAgbWFyY2ggYXQgZGF5LWJyZWFrOyB0aGUgcmVtYWluZGVyIG9mIHRoZSBuaWdodCBpcyBzcGVudCB3aXRob3V0IHNsZWVwLCBzaW5jZQogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IHNvbGRpZXIgd2FzIGluc3BlY3RpbmcgaGlzIHByb3BlcnR5LCBbdG8gc2VlXSB3aGF0IGhlIGNvdWxkIGNhcnJ5IHdpdGgKICAgICAgICAgICAgICAgICAgICBoaW0sIGFuZCB3aGF0LCBvdXQgb2YgdGhlIGFwcHVydGVuYW5jZXMgb2YgdGhlIHdpbnRlci1xdWFydGVycywgaGUgd291bGQgYmUKICAgICAgICAgICAgICAgICAgICBjb21wZWxsZWQgdG8gbGVhdmU7IGV2ZXJ5IHJlYXNvbiBpcyBzdWdnZXN0ZWQgdG8gc2hvdyB3aHkgdGhleSBjb3VsZCBub3Qgc3RheQogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgZGFuZ2VyLCBhbmQgaG93IHRoYXQgZGFuZ2VyIHdvdWxkIGJlIGluY3JlYXNlZCBieSB0aGUgZmF0aWd1ZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycyBhbmQgdGhlaXIgd2FudCBvZiBzbGVlcC4gQXQgYnJlYWsgb2YgZGF5IHRoZXkgcXVpdCB0aGUgY2FtcCwgaW4gYSB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWQgbGluZSBhbmQgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIGJhZ2dhZ2UsIGluIHN1Y2ggYSBtYW5uZXIgYXMgbWVuCiAgICAgICAgICAgICAgICAgICAgd2hvIHdlcmUgY29udmluY2VkIHRoYXQgdGhlIGFkdmljZSB3YXMgZ2l2ZW4gYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4sIG5vdCBhcyBhbgogICAgICAgICAgICAgICAgICAgIGVuZW15LCBidXQgYXMgbW9zdCBmcmllbmRseSBbdG93YXJkIHRoZW1dLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB0aGUgZW5lbXksIGFmdGVyIHRoZXkgaGFkIG1hZGUgdGhlIGRpc2NvdmVyeSBvZiB0aGVpciBpbnRlbmRlZCBkZXBhcnR1cmUgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgbm9pc2UgZHVyaW5nIHRoZSBuaWdodCBhbmQgdGhlaXIgbm90IHJldGlyaW5nIHRvIHJlc3QsIGhhdmluZyBwbGFjZWQgYW4KICAgICAgICAgICAgICAgICAgICBhbWJ1c2NhZGUgaW4gdHdvIGRpdmlzaW9ucyBpbiB0aGUgd29vZHMsIGluIGEgc3VpdGFibGUgYW5kIGNvbmNlYWxlZCBwbGFjZSwgdHdvCiAgICAgICAgICAgICAgICAgICAgbWlsZXMgZnJvbSB0aGUgY2FtcCwgd2FpdGVkIGZvciB0aGUgYXJyaXZhbCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT46IGFuZCB3aGVuIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGxpbmUgb2YgbWFyY2ggaGFkIGRlc2NlbmRlZAogICAgICAgICAgICAgICAgICAgIGludG8gYSBjb25zaWRlcmFibGUgdmFsbGV5LCB0aGV5IHN1ZGRlbmx5IHByZXNlbnRlZCB0aGVtc2VsdmVzIG9uIGVpdGhlciBzaWRlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhhdCB2YWxsZXksIGFuZCBiZWdhbiBib3RoIHRvIGhhcmFzcyB0aGUgcmVhciBhbmQgaGluZGVyIHRoZSB2YW4gZnJvbQogICAgICAgICAgICAgICAgICAgIGFzY2VuZGluZywgYW5kIHRvIGdpdmUgYmF0dGxlIGluIGEgcGxhY2UgZXhjZWVkaW5nbHkgZGlzYWR2YW50YWdlb3VzIHRvIG91ciBtZW4uCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPjogYW5kIHdoZW4gdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgbGluZSBvZiBtYXJjaCBoYWQgZGVzY2VuZGVkCiAgICAgICAgICAgICAgICAgICAgaW50byBhIGNvbnNpZGVyYWJsZSB2YWxsZXksIHRoZXkgc3VkZGVubHkgcHJlc2VudGVkIHRoZW1zZWx2ZXMgb24gZWl0aGVyIHNpZGUgb2YKICAgICAgICAgICAgICAgICAgICB0aGF0IHZhbGxleSwgYW5kIGJlZ2FuIGJvdGggdG8gaGFyYXNzIHRoZSByZWFyIGFuZCBoaW5kZXIgdGhlIHZhbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgYXNjZW5kaW5nLCBhbmQgdG8gZ2l2ZSBiYXR0bGUgaW4gYSBwbGFjZSBleGNlZWRpbmdseSBkaXNhZHZhbnRhZ2VvdXMgdG8gb3VyIG1lbi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW4gYXQgbGVuZ3RoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+VGl0dXJpdXM8L25hbWU+LCBhcyBvbmUgd2hvIGhhZCBwcm92aWRlZCBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlaGFuZCwgd2FzIGNvbmZ1c2VkLCByYW4gdG8gYW5kIGZybywgYW5kIHNldCBhYm91dCBhcnJhbmdpbmcgaGlzIHRyb29wczsKICAgICAgICAgICAgICAgICAgICB0aGVzZSB2ZXJ5IHRoaW5ncywgaG93ZXZlciwgaGUgZGlkIHRpbWlkbHkgYW5kIGluIHN1Y2ggYSBtYW5uZXIgdGhhdCBhbGwKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMgc2VlbWVkIHRvIGZhaWwgaGltOiB3aGljaCBnZW5lcmFsbHkgaGFwcGVucyB0byB0aG9zZSB3aG8gYXJlIGNvbXBlbGxlZAogICAgICAgICAgICAgICAgICAgIHRvIHRha2UgY291bmNpbCBpbiB0aGUgYWN0aW9uIGl0c2VsZi4gQnV0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q290dGE8L25hbWU+LCB3aG8KICAgICAgICAgICAgICAgICAgICBoYWQgcmVmbGVjdGVkIHRoYXQgdGhlc2UgdGhpbmdzIG1pZ2h0IG9jY3VyIG9uIHRoZSBtYXJjaCwgYW5kIG9uIHRoYXQgYWNjb3VudAogICAgICAgICAgICAgICAgICAgIGhhZCBub3QgYmVlbiBhbiBhZHZpc2VyIG9mIHRoZSBkZXBhcnR1cmUsIHdhcyB3YW50aW5nIHRvIHRoZSBjb21tb24gc2FmZXR5IGluIG5vCiAgICAgICAgICAgICAgICAgICAgcmVzcGVjdDsgYm90aCBpbiBhZGRyZXNzaW5nIGFuZCBlbmNvdXJhZ2luZyB0aGUgc29sZGllcnMsIGhlIHBlcmZvcm1lZCB0aGUKICAgICAgICAgICAgICAgICAgICBkdXRpZXMgb2YgYSBnZW5lcmFsLCBhbmQgaW4gdGhlIGJhdHRsZSB0aG9zZSBvZiBhIHNvbGRpZXIuIEFuZCBzaW5jZSB0aGV5IFs8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRpdHVyaXVzPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5Db3R0YTwvbmFtZT5dIGNvdWxkIGxlc3MKICAgICAgICAgICAgICAgICAgICBlYXNpbHkgcGVyZm9ybSBldmVyeSB0aGluZyBieSB0aGVtc2VsdmVzLCBhbmQgcHJvdmlkZSB3aGF0IHdhcyB0byBiZSBkb25lIGluCiAgICAgICAgICAgICAgICAgICAgZWFjaCBwbGFjZSwgYnkgcmVhc29uIG9mIHRoZSBsZW5ndGggb2YgdGhlIGxpbmUgb2YgbWFyY2gsIHRoZXkgb3JkZXJlZCBbdGhlCiAgICAgICAgICAgICAgICAgICAgb2ZmaWNlcnNdIHRvIGdpdmUgdGhlIGNvbW1hbmQgdGhhdCB0aGV5IHNob3VsZCBsZWF2ZSB0aGUgYmFnZ2FnZSBhbmQgZm9ybQogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgaW50byBhbiBvcmIsIHdoaWNoIG1lYXN1cmUsIHRob3VnaCBpbiBhIGNvbnRpbmdlbmN5IG9mIHRoYXQgbmF0dXJlIGl0CiAgICAgICAgICAgICAgICAgICAgd2FzIG5vdCB0byBiZSBjb25kZW1uZWQsIHN0aWxsIHR1cm5lZCBvdXQgdW5mb3J0dW5hdGVseTsgZm9yIGl0IGJvdGggZGltaW5pc2hlZAogICAgICAgICAgICAgICAgICAgIHRoZSBob3BlIG9mIG91ciBzb2xkaWVycyBhbmQgcmVuZGVyZWQgdGhlIGVuZW15IG1vcmUgZWFnZXIgZm9yIHRoZSBmaWdodCwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGl0IGFwcGVhcmVkIHRoYXQgdGhpcyB3YXMgbm90IGRvbmUgd2l0aG91dCB0aGUgZ3JlYXRlc3QgZmVhciBhbmQKICAgICAgICAgICAgICAgICAgICBkZXNwYWlyLiBCZXNpZGVzIHRoYXQgaGFwcGVuZWQsIHdoaWNoIHdvdWxkIG5lY2Vzc2FyaWx5IGJlIHRoZSBjYXNlLCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIGZvciB0aGUgbW9zdCBwYXJ0IHF1aXR0ZWQgdGhlaXIgZW5zaWducyBhbmQgaHVycmllZCB0byBzZWVrIGFuZCBjYXJyeQogICAgICAgICAgICAgICAgICAgIG9mZiBmcm9tIHRoZSBiYWdnYWdlIHdoYXRldmVyIGVhY2ggdGhvdWdodCB2YWx1YWJsZSwgYW5kIGFsbCBwYXJ0cyB3ZXJlIGZpbGxlZAogICAgICAgICAgICAgICAgICAgIHdpdGggdXByb2FyIGFuZCBsYW1lbnRhdGlvbi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+VGl0dXJpdXM8L25hbWU+LCBhcyBvbmUgd2hvIGhhZCBwcm92aWRlZCBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlaGFuZCwgd2FzIGNvbmZ1c2VkLCByYW4gdG8gYW5kIGZybywgYW5kIHNldCBhYm91dCBhcnJhbmdpbmcgaGlzIHRyb29wczsKICAgICAgICAgICAgICAgICAgICB0aGVzZSB2ZXJ5IHRoaW5ncywgaG93ZXZlciwgaGUgZGlkIHRpbWlkbHkgYW5kIGluIHN1Y2ggYSBtYW5uZXIgdGhhdCBhbGwKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMgc2VlbWVkIHRvIGZhaWwgaGltOiB3aGljaCBnZW5lcmFsbHkgaGFwcGVucyB0byB0aG9zZSB3aG8gYXJlIGNvbXBlbGxlZAogICAgICAgICAgICAgICAgICAgIHRvIHRha2UgY291bmNpbCBpbiB0aGUgYWN0aW9uIGl0c2VsZi4gQnV0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q290dGE8L25hbWU+LCB3aG8KICAgICAgICAgICAgICAgICAgICBoYWQgcmVmbGVjdGVkIHRoYXQgdGhlc2UgdGhpbmdzIG1pZ2h0IG9jY3VyIG9uIHRoZSBtYXJjaCwgYW5kIG9uIHRoYXQgYWNjb3VudAogICAgICAgICAgICAgICAgICAgIGhhZCBub3QgYmVlbiBhbiBhZHZpc2VyIG9mIHRoZSBkZXBhcnR1cmUsIHdhcyB3YW50aW5nIHRvIHRoZSBjb21tb24gc2FmZXR5IGluIG5vCiAgICAgICAgICAgICAgICAgICAgcmVzcGVjdDsgYm90aCBpbiBhZGRyZXNzaW5nIGFuZCBlbmNvdXJhZ2luZyB0aGUgc29sZGllcnMsIGhlIHBlcmZvcm1lZCB0aGUKICAgICAgICAgICAgICAgICAgICBkdXRpZXMgb2YgYSBnZW5lcmFsLCBhbmQgaW4gdGhlIGJhdHRsZSB0aG9zZSBvZiBhIHNvbGRpZXIuIEFuZCBzaW5jZSB0aGV5IFs8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRpdHVyaXVzPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5Db3R0YTwvbmFtZT5dIGNvdWxkIGxlc3MKICAgICAgICAgICAgICAgICAgICBlYXNpbHkgcGVyZm9ybSBldmVyeSB0aGluZyBieSB0aGVtc2VsdmVzLCBhbmQgcHJvdmlkZSB3aGF0IHdhcyB0byBiZSBkb25lIGluCiAgICAgICAgICAgICAgICAgICAgZWFjaCBwbGFjZSwgYnkgcmVhc29uIG9mIHRoZSBsZW5ndGggb2YgdGhlIGxpbmUgb2YgbWFyY2gsIHRoZXkgb3JkZXJlZCBbdGhlCiAgICAgICAgICAgICAgICAgICAgb2ZmaWNlcnNdIHRvIGdpdmUgdGhlIGNvbW1hbmQgdGhhdCB0aGV5IHNob3VsZCBsZWF2ZSB0aGUgYmFnZ2FnZSBhbmQgZm9ybQogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgaW50byBhbiBvcmIsIHdoaWNoIG1lYXN1cmUsIHRob3VnaCBpbiBhIGNvbnRpbmdlbmN5IG9mIHRoYXQgbmF0dXJlIGl0CiAgICAgICAgICAgICAgICAgICAgd2FzIG5vdCB0byBiZSBjb25kZW1uZWQsIHN0aWxsIHR1cm5lZCBvdXQgdW5mb3J0dW5hdGVseTsgZm9yIGl0IGJvdGggZGltaW5pc2hlZAogICAgICAgICAgICAgICAgICAgIHRoZSBob3BlIG9mIG91ciBzb2xkaWVycyBhbmQgcmVuZGVyZWQgdGhlIGVuZW15IG1vcmUgZWFnZXIgZm9yIHRoZSBmaWdodCwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGl0IGFwcGVhcmVkIHRoYXQgdGhpcyB3YXMgbm90IGRvbmUgd2l0aG91dCB0aGUgZ3JlYXRlc3QgZmVhciBhbmQKICAgICAgICAgICAgICAgICAgICBkZXNwYWlyLiBCZXNpZGVzIHRoYXQgaGFwcGVuZWQsIHdoaWNoIHdvdWxkIG5lY2Vzc2FyaWx5IGJlIHRoZSBjYXNlLCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIGZvciB0aGUgbW9zdCBwYXJ0IHF1aXR0ZWQgdGhlaXIgZW5zaWducyBhbmQgaHVycmllZCB0byBzZWVrIGFuZCBjYXJyeQogICAgICAgICAgICAgICAgICAgIG9mZiBmcm9tIHRoZSBiYWdnYWdlIHdoYXRldmVyIGVhY2ggdGhvdWdodCB2YWx1YWJsZSwgYW5kIGFsbCBwYXJ0cyB3ZXJlIGZpbGxlZAogICAgICAgICAgICAgICAgICAgIHdpdGggdXByb2FyIGFuZCBsYW1lbnRhdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['5.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBqdWRnbWVudCB3YXMgbm90IHdhbnRpbmcgdG8gdGhlIGJhcmJhcmlhbnM7IGZvciB0aGVpciBsZWFkZXJzIG9yZGVyZWQgW3RoZQogICAgICAgICAgICAgICAgICAgIG9mZmljZXJzXSB0byBwcm9jbGFpbSB0aHJvdWdoIHRoZSByYW5rcyAidGhhdCBubyBtYW4gc2hvdWxkIHF1aXQgaGlzIHBsYWNlOyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGJvb3R5IHdhcyB0aGVpcnMsIGFuZCBmb3IgdGhlbSB3YXMgcmVzZXJ2ZWQgd2hhdGV2ZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHNob3VsZCBsZWF2ZTsgdGhlcmVmb3JlIGxldCB0aGVtIGNvbnNpZGVyIHRoYXQgYWxsIHRoaW5ncwogICAgICAgICAgICAgICAgICAgIGRlcGVuZGVkIG9uIHRoZWlyIHZpY3RvcnkuIE91ciBtZW4gd2VyZSBlcXVhbCB0byB0aGVtIGluIGZpZ2h0aW5nLCBib3RoIGluCiAgICAgICAgICAgICAgICAgICAgY291cmFnZSBhbmQgaW4gbnVtYmVyLCBhbmQgdGhvdWdoIHRoZXkgd2VyZSBkZXNlcnRlZCBieSB0aGVpciBsZWFkZXIgYW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgZm9ydHVuZSwgeWV0IHRoZXkgc3RpbGwgcGxhY2VkIGFsbCBob3BlIG9mIHNhZmV0eSBpbiB0aGVpciB2YWxvciwgYW5kIGFzIG9mdGVuCiAgICAgICAgICAgICAgICAgICAgYXMgYW55IGNvaG9ydCBzYWxsaWVkIGZvcnRoIG9uIHRoYXQgc2lkZSwgYSBncmVhdCBudW1iZXIgb2YgdGhlIGVuZW15IHVzdWFsbHkKICAgICAgICAgICAgICAgICAgICBmZWxsLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiwgd2hlbiBoZSBvYnNlcnZlZCB0aGlzLCBvcmRlcnMgdGhlIGNvbW1hbmQgdG8gYmUKICAgICAgICAgICAgICAgICAgICBpc3N1ZWQgdGhhdCB0aGV5IHRocm93IHRoZWlyIHdlYXBvbnMgZnJvbSBhIGRpc3RhbmNlIGFuZCBkbyBub3QgYXBwcm9hY2ggdG9vCiAgICAgICAgICAgICAgICAgICAgbmVhciwgYW5kIGluIHdoYXRldmVyIGRpcmVjdGlvbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbWFrZSBhbiBhdHRhY2ssIHRoZXJlIGdpdmUgd2F5IChmcm9tIHRoZSBsaWdodG5lc3Mgb2YgdGhlaXIgYXBwb2ludG1lbnRzIGFuZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlaXIgZGFpbHkgcHJhY3RpY2Ugbm8gZGFtYWdlIGNvdWxkIGJlIGRvbmUgdGhlbSk7IFtidXRdIHB1cnN1ZSB0aGVtIHdoZW4KICAgICAgICAgICAgICAgICAgICBiZXRha2luZyB0aGVtc2VsdmVzIHRvIHRoZWlyIHN0YW5kYXJkcyBhZ2Fpbi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHNob3VsZCBsZWF2ZTsgdGhlcmVmb3JlIGxldCB0aGVtIGNvbnNpZGVyIHRoYXQgYWxsIHRoaW5ncwogICAgICAgICAgICAgICAgICAgIGRlcGVuZGVkIG9uIHRoZWlyIHZpY3RvcnkuIE91ciBtZW4gd2VyZSBlcXVhbCB0byB0aGVtIGluIGZpZ2h0aW5nLCBib3RoIGluCiAgICAgICAgICAgICAgICAgICAgY291cmFnZSBhbmQgaW4gbnVtYmVyLCBhbmQgdGhvdWdoIHRoZXkgd2VyZSBkZXNlcnRlZCBieSB0aGVpciBsZWFkZXIgYW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgZm9ydHVuZSwgeWV0IHRoZXkgc3RpbGwgcGxhY2VkIGFsbCBob3BlIG9mIHNhZmV0eSBpbiB0aGVpciB2YWxvciwgYW5kIGFzIG9mdGVuCiAgICAgICAgICAgICAgICAgICAgYXMgYW55IGNvaG9ydCBzYWxsaWVkIGZvcnRoIG9uIHRoYXQgc2lkZSwgYSBncmVhdCBudW1iZXIgb2YgdGhlIGVuZW15IHVzdWFsbHkKICAgICAgICAgICAgICAgICAgICBmZWxsLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiwgd2hlbiBoZSBvYnNlcnZlZCB0aGlzLCBvcmRlcnMgdGhlIGNvbW1hbmQgdG8gYmUKICAgICAgICAgICAgICAgICAgICBpc3N1ZWQgdGhhdCB0aGV5IHRocm93IHRoZWlyIHdlYXBvbnMgZnJvbSBhIGRpc3RhbmNlIGFuZCBkbyBub3QgYXBwcm9hY2ggdG9vCiAgICAgICAgICAgICAgICAgICAgbmVhciwgYW5kIGluIHdoYXRldmVyIGRpcmVjdGlvbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbWFrZSBhbiBhdHRhY2ssIHRoZXJlIGdpdmUgd2F5IChmcm9tIHRoZSBsaWdodG5lc3Mgb2YgdGhlaXIgYXBwb2ludG1lbnRzIGFuZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlaXIgZGFpbHkgcHJhY3RpY2Ugbm8gZGFtYWdlIGNvdWxkIGJlIGRvbmUgdGhlbSk7IFtidXRdIHB1cnN1ZSB0aGVtIHdoZW4KICAgICAgICAgICAgICAgICAgICBiZXRha2luZyB0aGVtc2VsdmVzIHRvIHRoZWlyIHN0YW5kYXJkcyBhZ2Fpbi4gPC90cmFuc2xhdGlvbj4="
translation['5.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWNoIGNvbW1hbmQgaGF2aW5nIGJlZW4gbW9zdCBjYXJlZnVsbHkgb2JleWVkLCB3aGVuIGFueSBjb2hvcnQgaGFkIHF1aXR0ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgY2lyY2xlIGFuZCBtYWRlIGEgY2hhcmdlLCB0aGUgZW5lbXkgZmxlZCB2ZXJ5IHByZWNpcGl0YXRlbHkuIEluIHRoZSBtZWFuIHRpbWUsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBwYXJ0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGFybXksIG9mIG5lY2Vzc2l0eSwgd2FzIGxlZnQKICAgICAgICAgICAgICAgICAgICB1bnByb3RlY3RlZCwgYW5kIHRoZSB3ZWFwb25zIHJlY2VpdmVkIG9uIHRoZWlyIG9wZW4gZmxhbmsuIEFnYWluLCB3aGVuIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVndW4gdG8gcmV0dXJuIHRvIHRoYXQgcGxhY2UgZnJvbSB3aGljaCB0aGV5IGhhZCBhZHZhbmNlZCwgdGhleSB3ZXJlIHN1cnJvdW5kZWQKICAgICAgICAgICAgICAgICAgICBib3RoIGJ5IHRob3NlIHdobyBoYWQgcmV0cmVhdGVkIGFuZCBieSB0aG9zZSB3aG8gc3Rvb2QgbmV4dCB0aGVtOyBidXQgaWYsIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIGhhbmQsIHRoZXkgd2lzaCB0byBrZWVwIHRoZWlyIHBsYWNlLCBuZWl0aGVyIHdhcyBhbiBvcHBvcnR1bml0eSBsZWZ0IGZvcgogICAgICAgICAgICAgICAgICAgIHZhbG9yLCBub3IgY291bGQgdGhleSwgYmVpbmcgY3Jvd2RlZCB0b2dldGhlciwgZXNjYXBlIHRoZSB3ZWFwb25zIGNhc3QgYnkgc28KICAgICAgICAgICAgICAgICAgICBsYXJnZSBhIGJvZHkgb2YgbWVuLiBZZXQsIHRob3VnaCBhc3NhaWxlZCBieSBzbyBtYW55IGRpc2FkdmFudGFnZXMsIFthbmRdIGhhdmluZwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIG1hbnkgd291bmRzLCB0aGV5IHdpdGhzdG9vZCB0aGUgZW5lbXksIGFuZCwgYSBncmVhdCBwb3J0aW9uIG9mIHRoZSBkYXkKICAgICAgICAgICAgICAgICAgICBiZWluZyBzcGVudCwgdGhvdWdoIHRoZXkgZm91Z2h0IGZyb20gZGF5LWJyZWFrIHRpbGwgdGhlIGVpZ2h0aCBob3VyLCB0aGV5IGRpZAogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgd2hpY2ggd2FzIHVud29ydGh5IG9mIHRoZW0uIEF0IGxlbmd0aCwgZWFjaCB0aGlnaCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlQuIEJhbHZlbnRpdXM8L25hbWU+LCB3aG8gdGhlIHllYXIgYmVmb3JlIGhhZCBiZWVuIGNoaWVmIGNlbnR1cmlvbiwgYSBicmF2ZQogICAgICAgICAgICAgICAgICAgIG1hbiBhbmQgb25lIG9mIGdyZWF0IGF1dGhvcml0eSwgaXMgcGllcmNlZCB3aXRoIGEgamF2ZWxpbjsgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5RLgogICAgICAgICAgICAgICAgICAgICAgICBMdWNhbml1czwvbmFtZT4sIG9mIHRoZSBzYW1lIHJhbmssIGZpZ2h0aW5nIG1vc3QgdmFsaWFudGx5LCBpcyBzbGFpbiB3aGlsZQogICAgICAgICAgICAgICAgICAgIGhlIGFzc2lzdHMgaGlzIHNvbiB3aGVuIHN1cnJvdW5kZWQgYnkgdGhlIGVuZW15OyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkwuCiAgICAgICAgICAgICAgICAgICAgICAgIENvdHRhPC9uYW1lPiwgdGhlIGxpZXV0ZW5hbnQsIHdoZW4gZW5jb3VyYWdpbmcgYWxsIHRoZSBjb2hvcnRzIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbXBhbmllcywgaXMgd291bmRlZCBmdWxsIGluIHRoZSBtb3V0aCBieSBhIHNsaW5nLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBhcm15LCBvZiBuZWNlc3NpdHksIHdhcyBsZWZ0CiAgICAgICAgICAgICAgICAgICAgdW5wcm90ZWN0ZWQsIGFuZCB0aGUgd2VhcG9ucyByZWNlaXZlZCBvbiB0aGVpciBvcGVuIGZsYW5rLiBBZ2Fpbiwgd2hlbiB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIGJlZ3VuIHRvIHJldHVybiB0byB0aGF0IHBsYWNlIGZyb20gd2hpY2ggdGhleSBoYWQgYWR2YW5jZWQsIHRoZXkgd2VyZSBzdXJyb3VuZGVkCiAgICAgICAgICAgICAgICAgICAgYm90aCBieSB0aG9zZSB3aG8gaGFkIHJldHJlYXRlZCBhbmQgYnkgdGhvc2Ugd2hvIHN0b29kIG5leHQgdGhlbTsgYnV0IGlmLCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBoYW5kLCB0aGV5IHdpc2ggdG8ga2VlcCB0aGVpciBwbGFjZSwgbmVpdGhlciB3YXMgYW4gb3Bwb3J0dW5pdHkgbGVmdCBmb3IKICAgICAgICAgICAgICAgICAgICB2YWxvciwgbm9yIGNvdWxkIHRoZXksIGJlaW5nIGNyb3dkZWQgdG9nZXRoZXIsIGVzY2FwZSB0aGUgd2VhcG9ucyBjYXN0IGJ5IHNvCiAgICAgICAgICAgICAgICAgICAgbGFyZ2UgYSBib2R5IG9mIG1lbi4gWWV0LCB0aG91Z2ggYXNzYWlsZWQgYnkgc28gbWFueSBkaXNhZHZhbnRhZ2VzLCBbYW5kXSBoYXZpbmcKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCBtYW55IHdvdW5kcywgdGhleSB3aXRoc3Rvb2QgdGhlIGVuZW15LCBhbmQsIGEgZ3JlYXQgcG9ydGlvbiBvZiB0aGUgZGF5CiAgICAgICAgICAgICAgICAgICAgYmVpbmcgc3BlbnQsIHRob3VnaCB0aGV5IGZvdWdodCBmcm9tIGRheS1icmVhayB0aWxsIHRoZSBlaWdodGggaG91ciwgdGhleSBkaWQKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIHdoaWNoIHdhcyB1bndvcnRoeSBvZiB0aGVtLiBBdCBsZW5ndGgsIGVhY2ggdGhpZ2ggb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5ULiBCYWx2ZW50aXVzPC9uYW1lPiwgd2hvIHRoZSB5ZWFyIGJlZm9yZSBoYWQgYmVlbiBjaGllZiBjZW50dXJpb24sIGEgYnJhdmUKICAgICAgICAgICAgICAgICAgICBtYW4gYW5kIG9uZSBvZiBncmVhdCBhdXRob3JpdHksIGlzIHBpZXJjZWQgd2l0aCBhIGphdmVsaW47IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+US4KICAgICAgICAgICAgICAgICAgICAgICAgTHVjYW5pdXM8L25hbWU+LCBvZiB0aGUgc2FtZSByYW5rLCBmaWdodGluZyBtb3N0IHZhbGlhbnRseSwgaXMgc2xhaW4gd2hpbGUKICAgICAgICAgICAgICAgICAgICBoZSBhc3Npc3RzIGhpcyBzb24gd2hlbiBzdXJyb3VuZGVkIGJ5IHRoZSBlbmVteTsgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MLgogICAgICAgICAgICAgICAgICAgICAgICBDb3R0YTwvbmFtZT4sIHRoZSBsaWV1dGVuYW50LCB3aGVuIGVuY291cmFnaW5nIGFsbCB0aGUgY29ob3J0cyBhbmQKICAgICAgICAgICAgICAgICAgICBjb21wYW5pZXMsIGlzIHdvdW5kZWQgZnVsbCBpbiB0aGUgbW91dGggYnkgYSBzbGluZy4gPC90cmFuc2xhdGlvbj4="
translation['5.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk11Y2ggdHJvdWJsZWQgYnkgdGhlc2UgZXZlbnRzLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlEuIFRpdHVyaXVzPC9uYW1lPiwgd2hlbiBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBwZXJjZWl2ZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4gaW4gdGhlIGRpc3RhbmNlIGVuY291cmFnaW5nIGhpcyBtZW4sIHNlbmRzIHRvCiAgICAgICAgICAgICAgICAgICAgaGltIGhpcyBpbnRlcnByZXRlciwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Dbi4gUG9tcGV5PC9uYW1lPiwgdG8gYmVnIHRoYXQgaGUgd291bGQgc3BhcmUgaGltIGFuZAogICAgICAgICAgICAgICAgICAgIGhpcyBzb2xkaWVycy4gSGUsIHdoZW4gYWRkcmVzc2VkLCByZXBsaWVkLCAiSWYgaGUgd2lzaGVzIHRvIGNvbmZlciB3aXRoIGhpbSwgaXQKICAgICAgICAgICAgICAgICAgICB3YXMgcGVybWl0dGVkOyB0aGF0IGhlIGhvcGVkIHdoYXQgcGVydGFpbmVkIHRvIHRoZSBzYWZldHkgb2YgdGhlIHNvbGRpZXJzIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgYmUgb2J0YWluZWQgZnJvbSB0aGUgcGVvcGxlOyB0aGF0IHRvIGhpbSBob3dldmVyIGNlcnRhaW5seSBubyBpbmp1cnkgd291bGQgYmUKICAgICAgICAgICAgICAgICAgICBkb25lLCBhbmQgdGhhdCBoZSBwbGVkZ2VkIGhpcyBmYWl0aCB0byB0aGF0IGVmZmVjdC4iIEhlIGNvbnN1bHRzIHdpdGggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5Db3R0YTwvbmFtZT4sIHdobyBoYWQgYmVlbiB3b3VuZGVkLCB3aGV0aGVyIGl0IHdvdWxkIGFwcGVhcgogICAgICAgICAgICAgICAgICAgIHJpZ2h0IHRvIHJldGlyZSBmcm9tIGJhdHRsZSwgYW5kIGNvbmZlciB3aXRoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+OyBbc2F5aW5nXQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaG9wZWQgdG8gYmUgYWJsZSB0byBzdWNjZWVkIHJlc3BlY3RpbmcgaGlzIG93biBhbmQgdGhlIHNvbGRpZXJzJyBzYWZldHkuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q290dGE8L25hbWU+IHNheXMgaGUgd2lsbCBub3QgZ28gdG8gYW4gYXJtZWQgZW5lbXksIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIHRoYXQgcGVyc2V2ZXJlcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+US4gVGl0dXJpdXM8L25hbWU+LCB3aGVuIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIHBlcmNlaXZlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiBpbiB0aGUgZGlzdGFuY2UgZW5jb3VyYWdpbmcgaGlzIG1lbiwgc2VuZHMgdG8KICAgICAgICAgICAgICAgICAgICBoaW0gaGlzIGludGVycHJldGVyLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNuLiBQb21wZXk8L25hbWU+LCB0byBiZWcgdGhhdCBoZSB3b3VsZCBzcGFyZSBoaW0gYW5kCiAgICAgICAgICAgICAgICAgICAgaGlzIHNvbGRpZXJzLiBIZSwgd2hlbiBhZGRyZXNzZWQsIHJlcGxpZWQsICJJZiBoZSB3aXNoZXMgdG8gY29uZmVyIHdpdGggaGltLCBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBwZXJtaXR0ZWQ7IHRoYXQgaGUgaG9wZWQgd2hhdCBwZXJ0YWluZWQgdG8gdGhlIHNhZmV0eSBvZiB0aGUgc29sZGllcnMgY291bGQKICAgICAgICAgICAgICAgICAgICBiZSBvYnRhaW5lZCBmcm9tIHRoZSBwZW9wbGU7IHRoYXQgdG8gaGltIGhvd2V2ZXIgY2VydGFpbmx5IG5vIGluanVyeSB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGRvbmUsIGFuZCB0aGF0IGhlIHBsZWRnZWQgaGlzIGZhaXRoIHRvIHRoYXQgZWZmZWN0LiIgSGUgY29uc3VsdHMgd2l0aCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNvdHRhPC9uYW1lPiwgd2hvIGhhZCBiZWVuIHdvdW5kZWQsIHdoZXRoZXIgaXQgd291bGQgYXBwZWFyCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgdG8gcmV0aXJlIGZyb20gYmF0dGxlLCBhbmQgY29uZmVyIHdpdGggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT47IFtzYXlpbmddCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBob3BlZCB0byBiZSBhYmxlIHRvIHN1Y2NlZWQgcmVzcGVjdGluZyBoaXMgb3duIGFuZCB0aGUgc29sZGllcnMnIHNhZmV0eS4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5Db3R0YTwvbmFtZT4gc2F5cyBoZSB3aWxsIG5vdCBnbyB0byBhbiBhcm1lZCBlbmVteSwgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBwZXJzZXZlcmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+U2FiaW51czwvbmFtZT4gb3JkZXJzIHRob3NlIHRyaWJ1bmVzIG9mIHRoZSBzb2xkaWVycyB3aG9tIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGF0IHRoZSB0aW1lIGFyb3VuZCBoaW0sIGFuZCB0aGUgY2VudHVyaW9ucyBvZiB0aGUgZmlyc3QgcmFua3MsIHRvIGZvbGxvdwogICAgICAgICAgICAgICAgICAgIGhpbSwgYW5kIHdoZW4gaGUgaGFkIGFwcHJvYWNoZWQgbmVhciB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiwgYmVpbmcgb3JkZXJlZCB0bwogICAgICAgICAgICAgICAgICAgIHRocm93IGRvd24gaGlzIGFybXMsIGhlIG9iZXlzIHRoZSBvcmRlciBhbmQgY29tbWFuZHMgaGlzIG1lbiB0byBkbyB0aGUgc2FtZS4gSW4KICAgICAgICAgICAgICAgICAgICB0aGUgbWVhbiB0aW1lLCB3aGlsZSB0aGV5IHRyZWF0IHVwb24gdGhlIHRlcm1zLCBhbmQgYSBsb25nZXIgZGViYXRlIHRoYW4KICAgICAgICAgICAgICAgICAgICBuZWNlc3NhcnkgaXMgZGVzaWduZWRseSBlbnRlcmVkIGludG8gYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4sIGJlaW5nIHN1cnJvdW5kZWQKICAgICAgICAgICAgICAgICAgICBieSBkZWdyZWVzLCBoZSBpcyBzbGFpbi4gVGhlbiB0aGV5LCBhY2NvcmRpbmcgdG8gdGhlaXIgY3VzdG9tLCBzaG91dCBvdXQKICAgICAgICAgICAgICAgICAgICAiVmljdG9yeSwiIGFuZCByYWlzZSB0aGVpciB3YXItY3J5LCBhbmQsIG1ha2luZyBhbiBhdHRhY2sgb24gb3VyIG1lbiwgYnJlYWsKICAgICAgICAgICAgICAgICAgICB0aGVpciByYW5rcy4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5UaGVyZSBMLiBDb3R0YTwvbmFtZT4sIHdoaWxlIGZpZ2h0aW5nLCBpcyBzbGFpbiwKICAgICAgICAgICAgICAgICAgICB0b2dldGhlciB3aXRoIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIHNvbGRpZXJzOyB0aGUgcmVzdCBiZXRha2UgdGhlbXNlbHZlcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBjYW1wLCBmcm9tIHdoaWNoIHRoZXkgaGFkIG1hcmNoZWQgZm9ydGgsIGFuZCBvbmUgb2YgdGhlbSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MLiBQZXRyb3NpZGl1czwvbmFtZT4sIHRoZSBzdGFuZGFyZCBiZWFyZXIsIHdoZW4gaGUgd2FzIG92ZXJwb3dlcmVkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGdyZWF0IG51bWJlciBvZiB0aGUgZW5lbXksIHRocmV3IHRoZSBlYWdsZSB3aXRoaW4gdGhlIGludHJlbmNobWVudHMgYW5kIGlzCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBzbGFpbiB3aGlsZSBmaWdodGluZyB3aXRoIHRoZSBncmVhdGVzdCBjb3VyYWdlIGJlZm9yZSB0aGUgY2FtcC4gVGhleQogICAgICAgICAgICAgICAgICAgIHdpdGggZGlmZmljdWx0eSBzdXN0YWluIHRoZSBhdHRhY2sgdGlsbCBuaWdodDsgZGVzcGFpcmluZyBvZiBzYWZldHksIHRoZXkgYWxsIHRvCiAgICAgICAgICAgICAgICAgICAgYSBtYW4gZGVzdHJveSB0aGVtc2VsdmVzIGluIHRoZSBuaWdodC4gQSBmZXcgZXNjYXBpbmcgZnJvbSB0aGUgYmF0dGxlLCBtYWRlCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgd2F5IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+IGF0IHdpbnRlci1xdWFydGVycywgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB3YW5kZXJpbmcgYXQgcmFuZG9tIHRocm91Z2ggdGhlIHdvb2RzLCBhbmQgaW5mb3JtIGhpbSBvZiB0aGVzZSBldmVudHMgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+U2FiaW51czwvbmFtZT4gb3JkZXJzIHRob3NlIHRyaWJ1bmVzIG9mIHRoZSBzb2xkaWVycyB3aG9tIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGF0IHRoZSB0aW1lIGFyb3VuZCBoaW0sIGFuZCB0aGUgY2VudHVyaW9ucyBvZiB0aGUgZmlyc3QgcmFua3MsIHRvIGZvbGxvdwogICAgICAgICAgICAgICAgICAgIGhpbSwgYW5kIHdoZW4gaGUgaGFkIGFwcHJvYWNoZWQgbmVhciB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiwgYmVpbmcgb3JkZXJlZCB0bwogICAgICAgICAgICAgICAgICAgIHRocm93IGRvd24gaGlzIGFybXMsIGhlIG9iZXlzIHRoZSBvcmRlciBhbmQgY29tbWFuZHMgaGlzIG1lbiB0byBkbyB0aGUgc2FtZS4gSW4KICAgICAgICAgICAgICAgICAgICB0aGUgbWVhbiB0aW1lLCB3aGlsZSB0aGV5IHRyZWF0IHVwb24gdGhlIHRlcm1zLCBhbmQgYSBsb25nZXIgZGViYXRlIHRoYW4KICAgICAgICAgICAgICAgICAgICBuZWNlc3NhcnkgaXMgZGVzaWduZWRseSBlbnRlcmVkIGludG8gYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4sIGJlaW5nIHN1cnJvdW5kZWQKICAgICAgICAgICAgICAgICAgICBieSBkZWdyZWVzLCBoZSBpcyBzbGFpbi4gVGhlbiB0aGV5LCBhY2NvcmRpbmcgdG8gdGhlaXIgY3VzdG9tLCBzaG91dCBvdXQKICAgICAgICAgICAgICAgICAgICAiVmljdG9yeSwiIGFuZCByYWlzZSB0aGVpciB3YXItY3J5LCBhbmQsIG1ha2luZyBhbiBhdHRhY2sgb24gb3VyIG1lbiwgYnJlYWsKICAgICAgICAgICAgICAgICAgICB0aGVpciByYW5rcy4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5UaGVyZSBMLiBDb3R0YTwvbmFtZT4sIHdoaWxlIGZpZ2h0aW5nLCBpcyBzbGFpbiwKICAgICAgICAgICAgICAgICAgICB0b2dldGhlciB3aXRoIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIHNvbGRpZXJzOyB0aGUgcmVzdCBiZXRha2UgdGhlbXNlbHZlcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBjYW1wLCBmcm9tIHdoaWNoIHRoZXkgaGFkIG1hcmNoZWQgZm9ydGgsIGFuZCBvbmUgb2YgdGhlbSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MLiBQZXRyb3NpZGl1czwvbmFtZT4sIHRoZSBzdGFuZGFyZCBiZWFyZXIsIHdoZW4gaGUgd2FzIG92ZXJwb3dlcmVkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGdyZWF0IG51bWJlciBvZiB0aGUgZW5lbXksIHRocmV3IHRoZSBlYWdsZSB3aXRoaW4gdGhlIGludHJlbmNobWVudHMgYW5kIGlzCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBzbGFpbiB3aGlsZSBmaWdodGluZyB3aXRoIHRoZSBncmVhdGVzdCBjb3VyYWdlIGJlZm9yZSB0aGUgY2FtcC4gVGhleQogICAgICAgICAgICAgICAgICAgIHdpdGggZGlmZmljdWx0eSBzdXN0YWluIHRoZSBhdHRhY2sgdGlsbCBuaWdodDsgZGVzcGFpcmluZyBvZiBzYWZldHksIHRoZXkgYWxsIHRvCiAgICAgICAgICAgICAgICAgICAgYSBtYW4gZGVzdHJveSB0aGVtc2VsdmVzIGluIHRoZSBuaWdodC4gQSBmZXcgZXNjYXBpbmcgZnJvbSB0aGUgYmF0dGxlLCBtYWRlCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgd2F5IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+IGF0IHdpbnRlci1xdWFydGVycywgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB3YW5kZXJpbmcgYXQgcmFuZG9tIHRocm91Z2ggdGhlIHdvb2RzLCBhbmQgaW5mb3JtIGhpbSBvZiB0aGVzZSBldmVudHMgPC90cmFuc2xhdGlvbj4="
translation['5.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWxhdGVkPC9uYW1lPiBieSB0aGlzIHZpY3RvcnksIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+IG1hcmNoZXMgaW1tZWRpYXRlbHkKICAgICAgICAgICAgICAgICAgICB3aXRoIGhpcyBjYXZhbHJ5IHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFkdWF0dWNpPC9uYW1lPiwgd2hvIGJvcmRlcmVkIG9uIGhpcyBraW5nZG9tOyBoZQogICAgICAgICAgICAgICAgICAgIGhhbHRzIG5laXRoZXIgZGF5IG5vciBuaWdodCwgYW5kIG9yZGVycyB0aGUgaW5mYW50cnkgdG8gZm9sbG93IGhpbSBjbG9zZWx5LgogICAgICAgICAgICAgICAgICAgIEhhdmluZyByZWxhdGVkIHRoZSBleHBsb2l0IGFuZCByb3VzZWQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXR1Y2k8L25hbWU+LCB0aGUgbmV4dCBkYXkgaGUKICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIGFtb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sIGFuZCBlbnRyZWF0cyAidGhhdCB0aGV5IHNob3VsZCBub3QgdGhyb3cKICAgICAgICAgICAgICAgICAgICBhd2F5IHRoZSBvcHBvcnR1bml0eSBvZiBsaWJlcmF0aW5nIHRoZW1zZWx2ZXMgZm9yZXZlciBhbmQgb2YgcHVuaXNoaW5nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiBmb3IgdGhvc2Ugd3JvbmdzIHdoaWNoIHRoZXkgaGFkIHJlY2VpdmVkIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGVtOyIgW2hlIHRlbGxzIHRoZW1dICJ0aGF0IHR3byBsaWV1dGVuYW50cyBoYXZlIGJlZW4gc2xhaW4sIGFuZCB0aGF0IGEgbGFyZ2UKICAgICAgICAgICAgICAgICAgICBwb3J0aW9uIG9mIHRoZSBhcm15IGhhcyBwZXJpc2hlZDsgdGhhdCBpdCB3YXMgbm90IGEgbWF0dGVyIG9mIGRpZmZpY3VsdHkgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGxlZ2lvbiB3aGljaCB3YXMgd2ludGVyaW5nIHdpdGggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DaWNlcm88L25hbWU+IHRvIGJlIGN1dCBvZmYsCiAgICAgICAgICAgICAgICAgICAgd2hlbiBzdWRkZW5seSBhc3NhdWx0ZWQ7IGhlIGRlY2xhcmVzIGhpbXNlbGYgcmVhZHkgdG8gY29vcGVyYXRlIGluIHRoYXQgZGVzaWduLgogICAgICAgICAgICAgICAgICAgIEhlIGVhc2lseSBnYWlucyBvdmVyIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4gYnkgdGhpcyBzcGVlY2guIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVsYXRlZDwvbmFtZT4gYnkgdGhpcyB2aWN0b3J5LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiBtYXJjaGVzIGltbWVkaWF0ZWx5CiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaXMgY2F2YWxyeSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZHVhdHVjaTwvbmFtZT4sIHdobyBib3JkZXJlZCBvbiBoaXMga2luZ2RvbTsgaGUKICAgICAgICAgICAgICAgICAgICBoYWx0cyBuZWl0aGVyIGRheSBub3IgbmlnaHQsIGFuZCBvcmRlcnMgdGhlIGluZmFudHJ5IHRvIGZvbGxvdyBoaW0gY2xvc2VseS4KICAgICAgICAgICAgICAgICAgICBIYXZpbmcgcmVsYXRlZCB0aGUgZXhwbG9pdCBhbmQgcm91c2VkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFkdWF0dWNpPC9uYW1lPiwgdGhlIG5leHQgZGF5IGhlCiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+LCBhbmQgZW50cmVhdHMgInRoYXQgdGhleSBzaG91bGQgbm90IHRocm93CiAgICAgICAgICAgICAgICAgICAgYXdheSB0aGUgb3Bwb3J0dW5pdHkgb2YgbGliZXJhdGluZyB0aGVtc2VsdmVzIGZvcmV2ZXIgYW5kIG9mIHB1bmlzaGluZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gZm9yIHRob3NlIHdyb25ncyB3aGljaCB0aGV5IGhhZCByZWNlaXZlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlbTsiIFtoZSB0ZWxscyB0aGVtXSAidGhhdCB0d28gbGlldXRlbmFudHMgaGF2ZSBiZWVuIHNsYWluLCBhbmQgdGhhdCBhIGxhcmdlCiAgICAgICAgICAgICAgICAgICAgcG9ydGlvbiBvZiB0aGUgYXJteSBoYXMgcGVyaXNoZWQ7IHRoYXQgaXQgd2FzIG5vdCBhIG1hdHRlciBvZiBkaWZmaWN1bHR5IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBsZWdpb24gd2hpY2ggd2FzIHdpbnRlcmluZyB3aXRoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPiB0byBiZSBjdXQgb2ZmLAogICAgICAgICAgICAgICAgICAgIHdoZW4gc3VkZGVubHkgYXNzYXVsdGVkOyBoZSBkZWNsYXJlcyBoaW1zZWxmIHJlYWR5IHRvIGNvb3BlcmF0ZSBpbiB0aGF0IGRlc2lnbi4KICAgICAgICAgICAgICAgICAgICBIZSBlYXNpbHkgZ2FpbnMgb3ZlciB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+IGJ5IHRoaXMgc3BlZWNoLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFjY29yZGluZ2x5LCBtZXNzZW5nZXJzIGhhdmluZyBiZWVuIGZvcnRod2l0aCBkaXNwYXRjaGVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNlbnRyb25lczwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdydWRpaTwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldmFjaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGxldW1veGlpPC9uYW1lPiwgYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdlaWR1bmk8L25hbWU+LCBhbGwgb2Ygd2hvbSBhcmUgdW5kZXIKICAgICAgICAgICAgICAgICAgICB0aGVpciBnb3Zlcm5tZW50LCB0aGV5IGFzc2VtYmxlIGFzIGxhcmdlIGJvZGllcyBhcyB0aGV5IGNhbiwgYW5kIHJ1c2gKICAgICAgICAgICAgICAgICAgICB1bmV4cGVjdGVkbHkgdG8gdGhlIHdpbnRlci1xdWFydGVycyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4sIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcG9ydCBvZiB0aGUgZGVhdGggb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5UaXR1cml1czwvbmFtZT4gbm90IGhhdmluZyBhcyB5ZXQgYmVlbgogICAgICAgICAgICAgICAgICAgIGNvbnZleWVkIHRvIGhpbS4gVGhhdCBhbHNvIG9jY3VycmVkIHRvIGhpbSwgd2hpY2ggd2FzIHRoZSBjb25zZXF1ZW5jZSBvZiBhCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IHdvcmstdGhhdCBzb21lIHNvbGRpZXJzIHdobyBoYWQgZ29uZSBvZmYgaW50byB0aGUgd29vZHMgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHB1cnBvc2Ugb2YgcHJvY3VyaW5nIHRpbWJlciBhbmQgdGhlcmV3aXRoIGNvbnN0cnVjdGluZyBmb3J0aWZpY2F0aW9ucywgd2VyZQogICAgICAgICAgICAgICAgICAgIGludGVyY2VwdGVkIGJ5IHRoZSBzdWRkZW4gYXJyaXZhbCBvZiBbdGhlIGVuZW15J3NdIGhvcnNlLiBUaGVzZSBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIGVudHJhcHBlZCwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWJ1cm9uZXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+LCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXRpY2k8L25hbWU+IGFuZCBhbGwgdGhlaXIgYWxsaWVzIGFuZCBkZXBlbmRlbnRzLCBiZWdpbiB0byBhdHRhY2sKICAgICAgICAgICAgICAgICAgICB0aGUgbGVnaW9uOiBvdXIgbWVuIHF1aWNrbHkgcnVuIHRvZ2V0aGVyIHRvIGFybXMgYW5kIG1vdW50IHRoZSByYW1wYXJ0OyB0aGV5CiAgICAgICAgICAgICAgICAgICAgc3VzdGFpbmVkIHRoZSBhdHRhY2sgdGhhdCBkYXkgd2l0aCBncmVhdCBkaWZmaWN1bHR5LCBzaW5jZSB0aGUgZW5lbXkgcGxhY2VkIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGhvcGUgaW4gZGlzcGF0Y2gsIGFuZCBmZWx0IGFzc3VyZWQgdGhhdCwgaWYgdGhleSBvYnRhaW5lZCB0aGlzIHZpY3RvcnksCiAgICAgICAgICAgICAgICAgICAgdGhleSB3b3VsZCBiZSBjb25xdWVyb3JzIGZvcmV2ZXIuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNlbnRyb25lczwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdydWRpaTwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldmFjaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGxldW1veGlpPC9uYW1lPiwgYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdlaWR1bmk8L25hbWU+LCBhbGwgb2Ygd2hvbSBhcmUgdW5kZXIKICAgICAgICAgICAgICAgICAgICB0aGVpciBnb3Zlcm5tZW50LCB0aGV5IGFzc2VtYmxlIGFzIGxhcmdlIGJvZGllcyBhcyB0aGV5IGNhbiwgYW5kIHJ1c2gKICAgICAgICAgICAgICAgICAgICB1bmV4cGVjdGVkbHkgdG8gdGhlIHdpbnRlci1xdWFydGVycyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4sIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcG9ydCBvZiB0aGUgZGVhdGggb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5UaXR1cml1czwvbmFtZT4gbm90IGhhdmluZyBhcyB5ZXQgYmVlbgogICAgICAgICAgICAgICAgICAgIGNvbnZleWVkIHRvIGhpbS4gVGhhdCBhbHNvIG9jY3VycmVkIHRvIGhpbSwgd2hpY2ggd2FzIHRoZSBjb25zZXF1ZW5jZSBvZiBhCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IHdvcmstdGhhdCBzb21lIHNvbGRpZXJzIHdobyBoYWQgZ29uZSBvZmYgaW50byB0aGUgd29vZHMgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHB1cnBvc2Ugb2YgcHJvY3VyaW5nIHRpbWJlciBhbmQgdGhlcmV3aXRoIGNvbnN0cnVjdGluZyBmb3J0aWZpY2F0aW9ucywgd2VyZQogICAgICAgICAgICAgICAgICAgIGludGVyY2VwdGVkIGJ5IHRoZSBzdWRkZW4gYXJyaXZhbCBvZiBbdGhlIGVuZW15J3NdIGhvcnNlLiBUaGVzZSBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIGVudHJhcHBlZCwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWJ1cm9uZXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+LCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXRpY2k8L25hbWU+IGFuZCBhbGwgdGhlaXIgYWxsaWVzIGFuZCBkZXBlbmRlbnRzLCBiZWdpbiB0byBhdHRhY2sKICAgICAgICAgICAgICAgICAgICB0aGUgbGVnaW9uOiBvdXIgbWVuIHF1aWNrbHkgcnVuIHRvZ2V0aGVyIHRvIGFybXMgYW5kIG1vdW50IHRoZSByYW1wYXJ0OyB0aGV5CiAgICAgICAgICAgICAgICAgICAgc3VzdGFpbmVkIHRoZSBhdHRhY2sgdGhhdCBkYXkgd2l0aCBncmVhdCBkaWZmaWN1bHR5LCBzaW5jZSB0aGUgZW5lbXkgcGxhY2VkIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGhvcGUgaW4gZGlzcGF0Y2gsIGFuZCBmZWx0IGFzc3VyZWQgdGhhdCwgaWYgdGhleSBvYnRhaW5lZCB0aGlzIHZpY3RvcnksCiAgICAgICAgICAgICAgICAgICAgdGhleSB3b3VsZCBiZSBjb25xdWVyb3JzIGZvcmV2ZXIuIDwvdHJhbnNsYXRpb24+"
translation['5.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcnMgYXJlIGltbWVkaWF0ZWx5IHNlbnQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPiwgZ3JlYXQgcmV3YXJkcyBiZWluZyBvZmZlcmVkIFt0byB0aGUgbWVzc2VuZ2Vyc10KICAgICAgICAgICAgICAgICAgICBpZiB0aGV5IGNhcnJpZWQgdGhlbSB0aHJvdWdoLiBBbGwgdGhlc2UgcGFzc2VzIGhhdmluZyBiZWVuIGJlc2V0LCB0aG9zZSB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIHNlbnQgYXJlIGludGVyY2VwdGVkLiBEdXJpbmcgdGhlIG5pZ2h0IGFzIG1hbnkgYXMgMTIwIHRvd2VycyBhcmUgcmFpc2VkIHdpdGgKICAgICAgICAgICAgICAgICAgICBpbmNyZWRpYmxlIGRpc3BhdGNoIG91dCBvZiB0aGUgdGltYmVyIHdoaWNoIHRoZXkgaGFkIGNvbGxlY3RlZCBmb3IgdGhlIHB1cnBvc2UKICAgICAgICAgICAgICAgICAgICBvZiBmb3J0aWZpY2F0aW9uOiB0aGUgdGhpbmdzIHdoaWNoIHNlZW1lZCBuZWNlc3NhcnkgdG8gdGhlIHdvcmsgYXJlIGNvbXBsZXRlZC4KICAgICAgICAgICAgICAgICAgICBUaGUgZm9sbG93aW5nIGRheSB0aGUgZW5lbXksIGhhdmluZyBjb2xsZWN0ZWQgZmFyIGdyZWF0ZXIgZm9yY2VzLCBhdHRhY2sgdGhlCiAgICAgICAgICAgICAgICAgICAgY2FtcCBbYW5kXSBmaWxsIHVwIHRoZSBkaXRjaC4gUmVzaXN0YW5jZSBpcyBtYWRlIGJ5IG91ciBtZW4gaW4gdGhlIHNhbWUgbWFubmVyCiAgICAgICAgICAgICAgICAgICAgYXMgdGhlIGRheSBiZWZvcmU7IHRoaXMgc2FtZSB0aGluZyBpcyBkb25lIGFmdGVyd2FyZCBkdXJpbmcgdGhlIHJlbWFpbmluZyBkYXlzLgogICAgICAgICAgICAgICAgICAgIFRoZSB3b3JrIGlzIGNhcnJpZWQgb24gaW5jZXNzYW50bHkgaW4gdGhlIG5pZ2h0OiBub3QgZXZlbiB0byB0aGUgc2ljaywgb3IKICAgICAgICAgICAgICAgICAgICB3b3VuZGVkLCBpcyBvcHBvcnR1bml0eSBnaXZlbiBmb3IgcmVzdDogd2hhdGV2ZXIgdGhpbmdzIGFyZSByZXF1aXJlZCBmb3IKICAgICAgICAgICAgICAgICAgICByZXNpc3RpbmcgdGhlIGFzc2F1bHQgb2YgdGhlIG5leHQgZGF5IGFyZSBwcm92aWRlZCBkdXJpbmcgdGhlIG5pZ2h0OiBtYW55IHN0YWtlcwogICAgICAgICAgICAgICAgICAgIGJ1cm5lZCBhdCB0aGUgZW5kLCBhbmQgYSBsYXJnZSBudW1iZXIgb2YgbXVyYWwgcGlrZXMgYXJlIHByb2N1cmVkOiB0b3dlcnMgYXJlCiAgICAgICAgICAgICAgICAgICAgYnVpbHQgdXAsIGJhdHRsZW1lbnRzIGFuZCBwYXJhcGV0cyBhcmUgZm9ybWVkIG9mIGludGVyd292ZW4gaHVyZGxlcy4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DaWNlcm88L25hbWU+IGhpbXNlbGYsIHRob3VnaCBoZSB3YXMgaW4gdmVyeSB3ZWFrIGhlYWx0aCwgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IGxlYXZlIGhpbXNlbGYgdGhlIG5pZ2h0LXRpbWUgZm9yIHJlcG9zZSwgc28gdGhhdCBoZSB3YXMgZm9yY2VkIHRvIHNwYXJlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBieSB0aGUgc3BvbnRhbmVvdXMgbW92ZW1lbnQgYW5kIGVudHJlYXRpZXMgb2YgdGhlIHNvbGRpZXJzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPiwgZ3JlYXQgcmV3YXJkcyBiZWluZyBvZmZlcmVkIFt0byB0aGUgbWVzc2VuZ2Vyc10KICAgICAgICAgICAgICAgICAgICBpZiB0aGV5IGNhcnJpZWQgdGhlbSB0aHJvdWdoLiBBbGwgdGhlc2UgcGFzc2VzIGhhdmluZyBiZWVuIGJlc2V0LCB0aG9zZSB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIHNlbnQgYXJlIGludGVyY2VwdGVkLiBEdXJpbmcgdGhlIG5pZ2h0IGFzIG1hbnkgYXMgMTIwIHRvd2VycyBhcmUgcmFpc2VkIHdpdGgKICAgICAgICAgICAgICAgICAgICBpbmNyZWRpYmxlIGRpc3BhdGNoIG91dCBvZiB0aGUgdGltYmVyIHdoaWNoIHRoZXkgaGFkIGNvbGxlY3RlZCBmb3IgdGhlIHB1cnBvc2UKICAgICAgICAgICAgICAgICAgICBvZiBmb3J0aWZpY2F0aW9uOiB0aGUgdGhpbmdzIHdoaWNoIHNlZW1lZCBuZWNlc3NhcnkgdG8gdGhlIHdvcmsgYXJlIGNvbXBsZXRlZC4KICAgICAgICAgICAgICAgICAgICBUaGUgZm9sbG93aW5nIGRheSB0aGUgZW5lbXksIGhhdmluZyBjb2xsZWN0ZWQgZmFyIGdyZWF0ZXIgZm9yY2VzLCBhdHRhY2sgdGhlCiAgICAgICAgICAgICAgICAgICAgY2FtcCBbYW5kXSBmaWxsIHVwIHRoZSBkaXRjaC4gUmVzaXN0YW5jZSBpcyBtYWRlIGJ5IG91ciBtZW4gaW4gdGhlIHNhbWUgbWFubmVyCiAgICAgICAgICAgICAgICAgICAgYXMgdGhlIGRheSBiZWZvcmU7IHRoaXMgc2FtZSB0aGluZyBpcyBkb25lIGFmdGVyd2FyZCBkdXJpbmcgdGhlIHJlbWFpbmluZyBkYXlzLgogICAgICAgICAgICAgICAgICAgIFRoZSB3b3JrIGlzIGNhcnJpZWQgb24gaW5jZXNzYW50bHkgaW4gdGhlIG5pZ2h0OiBub3QgZXZlbiB0byB0aGUgc2ljaywgb3IKICAgICAgICAgICAgICAgICAgICB3b3VuZGVkLCBpcyBvcHBvcnR1bml0eSBnaXZlbiBmb3IgcmVzdDogd2hhdGV2ZXIgdGhpbmdzIGFyZSByZXF1aXJlZCBmb3IKICAgICAgICAgICAgICAgICAgICByZXNpc3RpbmcgdGhlIGFzc2F1bHQgb2YgdGhlIG5leHQgZGF5IGFyZSBwcm92aWRlZCBkdXJpbmcgdGhlIG5pZ2h0OiBtYW55IHN0YWtlcwogICAgICAgICAgICAgICAgICAgIGJ1cm5lZCBhdCB0aGUgZW5kLCBhbmQgYSBsYXJnZSBudW1iZXIgb2YgbXVyYWwgcGlrZXMgYXJlIHByb2N1cmVkOiB0b3dlcnMgYXJlCiAgICAgICAgICAgICAgICAgICAgYnVpbHQgdXAsIGJhdHRsZW1lbnRzIGFuZCBwYXJhcGV0cyBhcmUgZm9ybWVkIG9mIGludGVyd292ZW4gaHVyZGxlcy4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DaWNlcm88L25hbWU+IGhpbXNlbGYsIHRob3VnaCBoZSB3YXMgaW4gdmVyeSB3ZWFrIGhlYWx0aCwgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IGxlYXZlIGhpbXNlbGYgdGhlIG5pZ2h0LXRpbWUgZm9yIHJlcG9zZSwgc28gdGhhdCBoZSB3YXMgZm9yY2VkIHRvIHNwYXJlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBieSB0aGUgc3BvbnRhbmVvdXMgbW92ZW1lbnQgYW5kIGVudHJlYXRpZXMgb2YgdGhlIHNvbGRpZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW4gdGhlc2UgbGVhZGVycyBhbmQgY2hpZWZzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sIHdobyBoYWQgYW55IGludGltYWN5CiAgICAgICAgICAgICAgICAgICAgYW5kIGdyb3VuZHMgb2YgZnJpZW5kc2hpcCB3aXRoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPiwgc2F5IHRoZXkgZGVzaXJlCiAgICAgICAgICAgICAgICAgICAgdG8gY29uZmVyIHdpdGggaGltLiBXaGVuIHBlcm1pc3Npb24gd2FzIGdyYW50ZWQsIHRoZXkgcmVjb3VudCB0aGUgc2FtZSB0aGluZ3MKICAgICAgICAgICAgICAgICAgICB3aGljaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiBoYWQgcmVsYXRlZCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRpdHVyaXVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBuYW1lbHksICJ0aGF0IGFsbCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gd2FzIGluIGFybXMsIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBoYWQgcGFzc2VkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHdpbnRlci1xdWFydGVycyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYW5kIG9mIHRoZSBvdGhlcnMgd2VyZQogICAgICAgICAgICAgICAgICAgIGF0dGFja2VkLiIgVGhleSByZXBvcnQgaW4gYWRkaXRpb24gYWxzbywgYWJvdXQgdGhlIGRlYXRoIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+U2FiaW51czwvbmFtZT4uIFRoZXkgcG9pbnQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4gZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgICAgICAgICAgICAgb2J0YWluaW5nIGNyZWRlbmNlOyAidGhleSBhcmUgbWlzdGFrZW4sIiBzYXkgdGhleSwgImlmIHRoZXkgaG9wZWQgZm9yIGFueSByZWxpZWYKICAgICAgICAgICAgICAgICAgICBmcm9tIHRob3NlIHdobyBkaXN0cnVzdCB0aGVpciBvd24gYWZmYWlyczsgdGhhdCB0aGV5IGJlYXIgc3VjaCBmZWVsaW5ncyB0b3dhcmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DaWNlcm88L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSB0aGF0IHRoZXkgZGVueSB0aGVtIG5vdGhpbmcgYnV0IHdpbnRlci1xdWFydGVycywgYW5kIGFyZSB1bndpbGxpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBwcmFjdGljZSBzaG91bGQgYmVjb21lIGNvbnN0YW50OyB0aGF0IHRocm91Z2ggdGhlaXIgW3RoZQogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPidzXSBtZWFucyBpdCBpcyBwb3NzaWJsZSBmb3IgdGhlbSBbdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tYW5zXTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0byBkZXBhcnQgZnJvbSB0aGVpciB3aW50ZXItcXVhcnRlcnMgc2FmZWx5IGFuZCB0byBwcm9jZWVkIHdpdGhvdXQgZmVhciBpbnRvCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgcGFydHMgdGhleSBkZXNpcmUuIiBUbyB0aGVzZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4gbWFkZSBvbmx5CiAgICAgICAgICAgICAgICAgICAgb25lIHJlcGx5OiAidGhhdCBpdCBpcyBub3QgdGhlIGN1c3RvbSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSB0byBhY2NlcHQgYW55IGNvbmRpdGlvbiBmcm9tIGFuIGFybWVkIGVuZW15OiBpZiB0aGV5IGFyZSB3aWxsaW5nIHRvIGxheQogICAgICAgICAgICAgICAgICAgIGRvd24gdGhlaXIgYXJtcywgdGhleSBtYXkgZW1wbG95IGhpbSBhcyB0aGVpciBhZHZvY2F0ZSBhbmQgc2VuZCBlbWJhc3NhZG9ycyB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT46IHRoYXQgaGUgYmVsaWV2ZWQsIGZyb20gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+W0NhZXNhcjwvbmFtZT4nc10ganVzdGljZSwgdGhleSB3b3VsZCBvYnRhaW4gdGhlIHRoaW5ncyB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgbWlnaHQgcmVxdWVzdC4iIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sIHdobyBoYWQgYW55IGludGltYWN5CiAgICAgICAgICAgICAgICAgICAgYW5kIGdyb3VuZHMgb2YgZnJpZW5kc2hpcCB3aXRoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPiwgc2F5IHRoZXkgZGVzaXJlCiAgICAgICAgICAgICAgICAgICAgdG8gY29uZmVyIHdpdGggaGltLiBXaGVuIHBlcm1pc3Npb24gd2FzIGdyYW50ZWQsIHRoZXkgcmVjb3VudCB0aGUgc2FtZSB0aGluZ3MKICAgICAgICAgICAgICAgICAgICB3aGljaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiBoYWQgcmVsYXRlZCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRpdHVyaXVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBuYW1lbHksICJ0aGF0IGFsbCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gd2FzIGluIGFybXMsIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBoYWQgcGFzc2VkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHdpbnRlci1xdWFydGVycyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYW5kIG9mIHRoZSBvdGhlcnMgd2VyZQogICAgICAgICAgICAgICAgICAgIGF0dGFja2VkLiIgVGhleSByZXBvcnQgaW4gYWRkaXRpb24gYWxzbywgYWJvdXQgdGhlIGRlYXRoIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+U2FiaW51czwvbmFtZT4uIFRoZXkgcG9pbnQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4gZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgICAgICAgICAgICAgb2J0YWluaW5nIGNyZWRlbmNlOyAidGhleSBhcmUgbWlzdGFrZW4sIiBzYXkgdGhleSwgImlmIHRoZXkgaG9wZWQgZm9yIGFueSByZWxpZWYKICAgICAgICAgICAgICAgICAgICBmcm9tIHRob3NlIHdobyBkaXN0cnVzdCB0aGVpciBvd24gYWZmYWlyczsgdGhhdCB0aGV5IGJlYXIgc3VjaCBmZWVsaW5ncyB0b3dhcmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DaWNlcm88L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSB0aGF0IHRoZXkgZGVueSB0aGVtIG5vdGhpbmcgYnV0IHdpbnRlci1xdWFydGVycywgYW5kIGFyZSB1bndpbGxpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBwcmFjdGljZSBzaG91bGQgYmVjb21lIGNvbnN0YW50OyB0aGF0IHRocm91Z2ggdGhlaXIgW3RoZQogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPidzXSBtZWFucyBpdCBpcyBwb3NzaWJsZSBmb3IgdGhlbSBbdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tYW5zXTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0byBkZXBhcnQgZnJvbSB0aGVpciB3aW50ZXItcXVhcnRlcnMgc2FmZWx5IGFuZCB0byBwcm9jZWVkIHdpdGhvdXQgZmVhciBpbnRvCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgcGFydHMgdGhleSBkZXNpcmUuIiBUbyB0aGVzZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4gbWFkZSBvbmx5CiAgICAgICAgICAgICAgICAgICAgb25lIHJlcGx5OiAidGhhdCBpdCBpcyBub3QgdGhlIGN1c3RvbSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSB0byBhY2NlcHQgYW55IGNvbmRpdGlvbiBmcm9tIGFuIGFybWVkIGVuZW15OiBpZiB0aGV5IGFyZSB3aWxsaW5nIHRvIGxheQogICAgICAgICAgICAgICAgICAgIGRvd24gdGhlaXIgYXJtcywgdGhleSBtYXkgZW1wbG95IGhpbSBhcyB0aGVpciBhZHZvY2F0ZSBhbmQgc2VuZCBlbWJhc3NhZG9ycyB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT46IHRoYXQgaGUgYmVsaWV2ZWQsIGZyb20gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+W0NhZXNhcjwvbmFtZT4nc10ganVzdGljZSwgdGhleSB3b3VsZCBvYnRhaW4gdGhlIHRoaW5ncyB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgbWlnaHQgcmVxdWVzdC4iIDwvdHJhbnNsYXRpb24+"
translation['5.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkRpc2FwcG9pbnRlZCBpbiB0aGlzIGhvcGUsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4gc3Vycm91bmQgdGhlIHdpbnRlci1xdWFydGVycwogICAgICAgICAgICAgICAgICAgIHdpdGggYSByYW1wYXJ0IGVsZXZlbiBmZWV0IGhpZ2gsIGFuZCBhIGRpdGNoIHRoaXJ0ZWVuIGZlZXQgaW4gZGVwdGguIFRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWlsaXRhcnkgd29ya3MgdGhleSBoYWQgbGVhcm5lZCBmcm9tIG91ciBtZW4gaW4gdGhlIGludGVyY291cnNlIG9mIGZvcm1lciB5ZWFycywKICAgICAgICAgICAgICAgICAgICBhbmQsIGhhdmluZyB0YWtlbiBzb21lIG9mIG91ciBhcm15IHByaXNvbmVycywgd2VyZSBpbnN0cnVjdGVkIGJ5IHRoZW06IGJ1dCwgYXMKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCBubyBzdXBwbHkgb2YgaXJvbiB0b29scyB3aGljaCBhcmUgcmVxdWlzaXRlIGZvciB0aGlzIHNlcnZpY2UsIHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgIGZvcmNlZCB0byBjdXQgdGhlIHR1cmYgd2l0aCB0aGVpciBzd29yZHMsIGFuZCB0byBlbXB0eSBvdXQgdGhlIGVhcnRoIHdpdGggdGhlaXIKICAgICAgICAgICAgICAgICAgICBoYW5kcyBhbmQgY2xvYWtzLCBmcm9tIHdoaWNoIGNpcmN1bXN0YW5jZSwgdGhlIHZhc3QgbnVtYmVyIG9mIHRoZSBtZW4gY291bGQgYmUKICAgICAgICAgICAgICAgICAgICBpbmZlcnJlZDsgZm9yIGluIGxlc3MgdGhhbiB0aHJlZSBob3VycyB0aGV5IGNvbXBsZXRlZCBhIGZvcnRpZmljYXRpb24gb2YgdGVuCiAgICAgICAgICAgICAgICAgICAgbWlsZXMgaW4gY2lyY3VtZmVyZW5jZTsgYW5kIGR1cmluZyB0aGUgcmVzdCBvZiB0aGUgZGF5cyB0aGV5IGJlZ2FuIHRvIHByZXBhcmUKICAgICAgICAgICAgICAgICAgICBhbmQgY29uc3RydWN0IHRvd2VycyBvZiB0aGUgaGVpZ2h0IG9mIHRoZSByYW1wYXJ0cywgYW5kIGdyYXBwbGluZyBpcm9ucywgYW5kCiAgICAgICAgICAgICAgICAgICAgbWFudGVsZXRzLCB3aGljaCB0aGUgc2FtZSBwcmlzb25lcnMgaGFkIHRhdWdodCB0aGVtLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+IHN1cnJvdW5kIHRoZSB3aW50ZXItcXVhcnRlcnMKICAgICAgICAgICAgICAgICAgICB3aXRoIGEgcmFtcGFydCBlbGV2ZW4gZmVldCBoaWdoLCBhbmQgYSBkaXRjaCB0aGlydGVlbiBmZWV0IGluIGRlcHRoLiBUaGVzZQogICAgICAgICAgICAgICAgICAgIG1pbGl0YXJ5IHdvcmtzIHRoZXkgaGFkIGxlYXJuZWQgZnJvbSBvdXIgbWVuIGluIHRoZSBpbnRlcmNvdXJzZSBvZiBmb3JtZXIgeWVhcnMsCiAgICAgICAgICAgICAgICAgICAgYW5kLCBoYXZpbmcgdGFrZW4gc29tZSBvZiBvdXIgYXJteSBwcmlzb25lcnMsIHdlcmUgaW5zdHJ1Y3RlZCBieSB0aGVtOiBidXQsIGFzCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgbm8gc3VwcGx5IG9mIGlyb24gdG9vbHMgd2hpY2ggYXJlIHJlcXVpc2l0ZSBmb3IgdGhpcyBzZXJ2aWNlLCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBmb3JjZWQgdG8gY3V0IHRoZSB0dXJmIHdpdGggdGhlaXIgc3dvcmRzLCBhbmQgdG8gZW1wdHkgb3V0IHRoZSBlYXJ0aCB3aXRoIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaGFuZHMgYW5kIGNsb2FrcywgZnJvbSB3aGljaCBjaXJjdW1zdGFuY2UsIHRoZSB2YXN0IG51bWJlciBvZiB0aGUgbWVuIGNvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgaW5mZXJyZWQ7IGZvciBpbiBsZXNzIHRoYW4gdGhyZWUgaG91cnMgdGhleSBjb21wbGV0ZWQgYSBmb3J0aWZpY2F0aW9uIG9mIHRlbgogICAgICAgICAgICAgICAgICAgIG1pbGVzIGluIGNpcmN1bWZlcmVuY2U7IGFuZCBkdXJpbmcgdGhlIHJlc3Qgb2YgdGhlIGRheXMgdGhleSBiZWdhbiB0byBwcmVwYXJlCiAgICAgICAgICAgICAgICAgICAgYW5kIGNvbnN0cnVjdCB0b3dlcnMgb2YgdGhlIGhlaWdodCBvZiB0aGUgcmFtcGFydHMsIGFuZCBncmFwcGxpbmcgaXJvbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIG1hbnRlbGV0cywgd2hpY2ggdGhlIHNhbWUgcHJpc29uZXJzIGhhZCB0YXVnaHQgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['5.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBzZXZlbnRoIGRheSBvZiB0aGUgYXR0YWNrLCBhIHZlcnkgaGlnaCB3aW5kIGhhdmluZyBzcHJ1bmcgdXAsIHRoZXkgYmVnYW4KICAgICAgICAgICAgICAgICAgICB0byBkaXNjaGFyZ2UgYnkgdGhlaXIgc2xpbmdzIGhvdCBiYWxscyBtYWRlIG9mIGJ1cm5lZCBvciBoYXJkZW5lZCBjbGF5LCBhbmQKICAgICAgICAgICAgICAgICAgICBoZWF0ZWQgamF2ZWxpbnMsIHVwb24gdGhlIGh1dHMsIHdoaWNoLCBhZnRlciB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxsaWM8L25hbWU+IGN1c3RvbSwKICAgICAgICAgICAgICAgICAgICB3ZXJlIHRoYXRjaGVkIHdpdGggc3RyYXcuIFRoZXNlIHF1aWNrbHkgdG9vayBmaXJlLCBhbmQgYnkgdGhlIHZpb2xlbmNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdpbmQsIHNjYXR0ZXJlZCB0aGVpciBmbGFtZXMgaW4gZXZlcnkgcGFydCBvZiB0aGUgY2FtcC4gVGhlIGVuZW15IGZvbGxvd2luZyB1cAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHN1Y2Nlc3Mgd2l0aCBhIHZlcnkgbG91ZCBzaG91dCwgYXMgaWYgdmljdG9yeSB3ZXJlIGFscmVhZHkgb2J0YWluZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VjdXJlZCwgYmVnYW4gdG8gYWR2YW5jZSB0aGVpciB0b3dlcnMgYW5kIG1hbnRlbGV0cywgYW5kIGNsaW1iIHRoZSByYW1wYXJ0IHdpdGgKICAgICAgICAgICAgICAgICAgICBsYWRkZXJzLiBCdXQgc28gZ3JlYXQgd2FzIHRoZSBjb3VyYWdlIG9mIG91ciBzb2xkaWVycywgYW5kIHN1Y2ggdGhlaXIgcHJlc2VuY2UKICAgICAgICAgICAgICAgICAgICBvZiBtaW5kLCB0aGF0IHRob3VnaCB0aGV5IHdlcmUgc2NvcmNoZWQgb24gYWxsIHNpZGVzLCBhbmQgaGFyYXNzZWQgYnkgYSB2YXN0CiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIHdlYXBvbnMsIGFuZCB3ZXJlIGF3YXJlIHRoYXQgdGhlaXIgYmFnZ2FnZSBhbmQgdGhlaXIgcG9zc2Vzc2lvbnMgd2VyZQogICAgICAgICAgICAgICAgICAgIGJ1cm5pbmcsIG5vdCBvbmx5IGRpZCBubyBvbmUgcXVpdCB0aGUgcmFtcGFydCBmb3IgdGhlIHB1cnBvc2Ugb2Ygd2l0aGRyYXdpbmcKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBzY2VuZSwgYnV0IHNjYXJjZWx5IGRpZCBhbnkgb25lIGV2ZW4gdGhlbiBsb29rIGJlaGluZDsgYW5kIHRoZXkgYWxsCiAgICAgICAgICAgICAgICAgICAgZm91Z2h0IG1vc3Qgdmlnb3JvdXNseSBhbmQgbW9zdCB2YWxpYW50bHkuIFRoaXMgZGF5IHdhcyBieSBmYXIgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBjYWxhbWl0b3VzIHRvIG91ciBtZW47IGl0IGhhZCB0aGlzIHJlc3VsdCwgaG93ZXZlciwgdGhhdCBvbiB0aGF0IGRheSB0aGUgbGFyZ2VzdAogICAgICAgICAgICAgICAgICAgIG51bWJlciBvZiB0aGUgZW5lbXkgd2FzIHdvdW5kZWQgYW5kIHNsYWluLCBzaW5jZSB0aGV5IGhhZCBjcm93ZGVkIGJlbmVhdGggdGhlCiAgICAgICAgICAgICAgICAgICAgdmVyeSByYW1wYXJ0LCBhbmQgdGhlIGhpbmRtb3N0IGRpZCBub3QgYWZmb3JkIHRoZSBmb3JlbW9zdCBhIHJldHJlYXQuIFRoZSBmbGFtZQogICAgICAgICAgICAgICAgICAgIGhhdmluZyBhYmF0ZWQgYSBsaXR0bGUsIGFuZCBhIHRvd2VyIGhhdmluZyBiZWVuIGJyb3VnaHQgdXAgaW4gYSBwYXJ0aWN1bGFyIHBsYWNlCiAgICAgICAgICAgICAgICAgICAgYW5kIHRvdWNoaW5nIHRoZSByYW1wYXJ0LCB0aGUgY2VudHVyaW9ucyBvZiB0aGUgdGhpcmQgY29ob3J0IHJldGlyZWQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFjZSBpbiB3aGljaCB0aGV5IHdlcmUgc3RhbmRpbmcsIGFuZCBkcmV3IG9mZiBhbGwgdGhlaXIgbWVuOiB0aGV5IGJlZ2FuIHRvCiAgICAgICAgICAgICAgICAgICAgY2FsbCBvbiB0aGUgZW5lbXkgYnkgZ2VzdHVyZXMgYW5kIGJ5IHdvcmRzLCB0byBlbnRlciBpZiB0aGV5IHdpc2hlZDsgYnV0IG5vbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGVtIGRhcmVkIHRvIGFkdmFuY2UuIFRoZW4gc3RvbmVzIGhhdmluZyBiZWVuIGNhc3QgZnJvbSBldmVyeSBxdWFydGVyLCB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSB3ZXJlIGRpc2xvZGdlZCwgYW5kIHRoZWlyIHRvd2VyIHNldCBvbiBmaXJlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxsaWM8L25hbWU+IGN1c3RvbSwKICAgICAgICAgICAgICAgICAgICB3ZXJlIHRoYXRjaGVkIHdpdGggc3RyYXcuIFRoZXNlIHF1aWNrbHkgdG9vayBmaXJlLCBhbmQgYnkgdGhlIHZpb2xlbmNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdpbmQsIHNjYXR0ZXJlZCB0aGVpciBmbGFtZXMgaW4gZXZlcnkgcGFydCBvZiB0aGUgY2FtcC4gVGhlIGVuZW15IGZvbGxvd2luZyB1cAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHN1Y2Nlc3Mgd2l0aCBhIHZlcnkgbG91ZCBzaG91dCwgYXMgaWYgdmljdG9yeSB3ZXJlIGFscmVhZHkgb2J0YWluZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VjdXJlZCwgYmVnYW4gdG8gYWR2YW5jZSB0aGVpciB0b3dlcnMgYW5kIG1hbnRlbGV0cywgYW5kIGNsaW1iIHRoZSByYW1wYXJ0IHdpdGgKICAgICAgICAgICAgICAgICAgICBsYWRkZXJzLiBCdXQgc28gZ3JlYXQgd2FzIHRoZSBjb3VyYWdlIG9mIG91ciBzb2xkaWVycywgYW5kIHN1Y2ggdGhlaXIgcHJlc2VuY2UKICAgICAgICAgICAgICAgICAgICBvZiBtaW5kLCB0aGF0IHRob3VnaCB0aGV5IHdlcmUgc2NvcmNoZWQgb24gYWxsIHNpZGVzLCBhbmQgaGFyYXNzZWQgYnkgYSB2YXN0CiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIHdlYXBvbnMsIGFuZCB3ZXJlIGF3YXJlIHRoYXQgdGhlaXIgYmFnZ2FnZSBhbmQgdGhlaXIgcG9zc2Vzc2lvbnMgd2VyZQogICAgICAgICAgICAgICAgICAgIGJ1cm5pbmcsIG5vdCBvbmx5IGRpZCBubyBvbmUgcXVpdCB0aGUgcmFtcGFydCBmb3IgdGhlIHB1cnBvc2Ugb2Ygd2l0aGRyYXdpbmcKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBzY2VuZSwgYnV0IHNjYXJjZWx5IGRpZCBhbnkgb25lIGV2ZW4gdGhlbiBsb29rIGJlaGluZDsgYW5kIHRoZXkgYWxsCiAgICAgICAgICAgICAgICAgICAgZm91Z2h0IG1vc3Qgdmlnb3JvdXNseSBhbmQgbW9zdCB2YWxpYW50bHkuIFRoaXMgZGF5IHdhcyBieSBmYXIgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBjYWxhbWl0b3VzIHRvIG91ciBtZW47IGl0IGhhZCB0aGlzIHJlc3VsdCwgaG93ZXZlciwgdGhhdCBvbiB0aGF0IGRheSB0aGUgbGFyZ2VzdAogICAgICAgICAgICAgICAgICAgIG51bWJlciBvZiB0aGUgZW5lbXkgd2FzIHdvdW5kZWQgYW5kIHNsYWluLCBzaW5jZSB0aGV5IGhhZCBjcm93ZGVkIGJlbmVhdGggdGhlCiAgICAgICAgICAgICAgICAgICAgdmVyeSByYW1wYXJ0LCBhbmQgdGhlIGhpbmRtb3N0IGRpZCBub3QgYWZmb3JkIHRoZSBmb3JlbW9zdCBhIHJldHJlYXQuIFRoZSBmbGFtZQogICAgICAgICAgICAgICAgICAgIGhhdmluZyBhYmF0ZWQgYSBsaXR0bGUsIGFuZCBhIHRvd2VyIGhhdmluZyBiZWVuIGJyb3VnaHQgdXAgaW4gYSBwYXJ0aWN1bGFyIHBsYWNlCiAgICAgICAgICAgICAgICAgICAgYW5kIHRvdWNoaW5nIHRoZSByYW1wYXJ0LCB0aGUgY2VudHVyaW9ucyBvZiB0aGUgdGhpcmQgY29ob3J0IHJldGlyZWQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFjZSBpbiB3aGljaCB0aGV5IHdlcmUgc3RhbmRpbmcsIGFuZCBkcmV3IG9mZiBhbGwgdGhlaXIgbWVuOiB0aGV5IGJlZ2FuIHRvCiAgICAgICAgICAgICAgICAgICAgY2FsbCBvbiB0aGUgZW5lbXkgYnkgZ2VzdHVyZXMgYW5kIGJ5IHdvcmRzLCB0byBlbnRlciBpZiB0aGV5IHdpc2hlZDsgYnV0IG5vbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGVtIGRhcmVkIHRvIGFkdmFuY2UuIFRoZW4gc3RvbmVzIGhhdmluZyBiZWVuIGNhc3QgZnJvbSBldmVyeSBxdWFydGVyLCB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSB3ZXJlIGRpc2xvZGdlZCwgYW5kIHRoZWlyIHRvd2VyIHNldCBvbiBmaXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.44'] = ""
translation['5.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHByb3BvcnRpb24gYXMgdGhlIGF0dGFjayBiZWNhbWUgZGFpbHkgbW9yZSBmb3JtaWRhYmxlIGFuZCB2aW9sZW50LCBhbmQKICAgICAgICAgICAgICAgICAgICBwYXJ0aWN1bGFybHksIGJlY2F1c2UsIGFzIGEgZ3JlYXQgbnVtYmVyIG9mIHRoZSBzb2xkaWVycyB3ZXJlIGV4aGF1c3RlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgd291bmRzLCB0aGUgbWF0dGVyIGhhZCBjb21lIHRvIGEgc21hbGwgbnVtYmVyIG9mIGRlZmVuZGVycywgbW9yZSBmcmVxdWVudAogICAgICAgICAgICAgICAgICAgIGxldHRlcnMgYW5kIG1lc3NhZ2VzIHdlcmUgc2VudCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT47IGEgcGFydCBvZgogICAgICAgICAgICAgICAgICAgIHdoaWNoIG1lc3NlbmdlcnMgd2VyZSB0YWtlbiBhbmQgdG9ydHVyZWQgdG8gZGVhdGggaW4gdGhlIHNpZ2h0IG9mIG91ciBzb2xkaWVycy4KICAgICAgICAgICAgICAgICAgICBUaGVyZSB3YXMgd2l0aGluIG91ciBjYW1wIGEgY2VydGFpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpYW48L25hbWU+LCBieSBuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVydGljbzwvbmFtZT4sIGJvcm4gaW4gYSBkaXN0aW5ndWlzaGVkIHBvc2l0aW9uLCB3aG8gaW4gdGhlIGJlZ2lubmluZwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBibG9ja2FkZSBoYWQgZGVzZXJ0ZWQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DaWNlcm88L25hbWU+LCBhbmQgaGFkCiAgICAgICAgICAgICAgICAgICAgZXhoaWJpdGVkIGhpcyBmaWRlbGl0eSB0byBoaW0uIEhlIHBlcnN1YWRlcyBoaXMgc2xhdmUsIGJ5IHRoZSBob3BlIG9mIGZyZWVkb20sCiAgICAgICAgICAgICAgICAgICAgYW5kIGJ5IGdyZWF0IHJld2FyZHMsIHRvIGNvbnZleSBhIGxldHRlciB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4uCiAgICAgICAgICAgICAgICAgICAgVGhpcyBoZSBjYXJyaWVzIG91dCBib3VuZCBhYm91dCBoaXMgamF2ZWxpbjsgYW5kIG1peGluZyBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB3aXRob3V0IGFueSBzdXNwaWNpb24gYnkgYmVpbmcgYSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGhlIHJlYWNoZXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LiBGcm9tIGhpbSB0aGV5CiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgaW5mb3JtYXRpb24gb2YgdGhlIGltbWluZW50IGRhbmdlciBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGxlZ2lvbi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPjsgYSBwYXJ0IG9mCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggbWVzc2VuZ2VycyB3ZXJlIHRha2VuIGFuZCB0b3J0dXJlZCB0byBkZWF0aCBpbiB0aGUgc2lnaHQgb2Ygb3VyIHNvbGRpZXJzLgogICAgICAgICAgICAgICAgICAgIFRoZXJlIHdhcyB3aXRoaW4gb3VyIGNhbXAgYSBjZXJ0YWluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlhbjwvbmFtZT4sIGJ5IG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJ0aWNvPC9uYW1lPiwgYm9ybiBpbiBhIGRpc3Rpbmd1aXNoZWQgcG9zaXRpb24sIHdobyBpbiB0aGUgYmVnaW5uaW5nCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGJsb2NrYWRlIGhhZCBkZXNlcnRlZCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4sIGFuZCBoYWQKICAgICAgICAgICAgICAgICAgICBleGhpYml0ZWQgaGlzIGZpZGVsaXR5IHRvIGhpbS4gSGUgcGVyc3VhZGVzIGhpcyBzbGF2ZSwgYnkgdGhlIGhvcGUgb2YgZnJlZWRvbSwKICAgICAgICAgICAgICAgICAgICBhbmQgYnkgZ3JlYXQgcmV3YXJkcywgdG8gY29udmV5IGEgbGV0dGVyIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPi4KICAgICAgICAgICAgICAgICAgICBUaGlzIGhlIGNhcnJpZXMgb3V0IGJvdW5kIGFib3V0IGhpcyBqYXZlbGluOyBhbmQgbWl4aW5nIGFtb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHdpdGhvdXQgYW55IHN1c3BpY2lvbiBieSBiZWluZyBhIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgaGUgcmVhY2hlcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4uIEZyb20gaGltIHRoZXkKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCBpbmZvcm1hdGlvbiBvZiB0aGUgaW1taW5lbnQgZGFuZ2VyIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgbGVnaW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYXZpbmcgcmVjZWl2ZWQgdGhlIGxldHRlciBhYm91dCB0aGUgZWxldmVudGgKICAgICAgICAgICAgICAgICAgICBob3VyIG9mIHRoZSBkYXksIGltbWVkaWF0ZWx5IHNlbmRzIGEgbWVzc2VuZ2VyIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4sIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TS4gQ3Jhc3N1czwvbmFtZT4sIHF1ZXN0b3IgdGhlcmUsIHdob3NlIHdpbnRlci1xdWFydGVycwogICAgICAgICAgICAgICAgICAgIHdlcmUgdHdlbnR5LWZpdmUgbWlsZXMgZGlzdGFudCBmcm9tIGhpbS4gSGUgb3JkZXJzIHRoZSBsZWdpb24gdG8gc2V0IGZvcndhcmQgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgbWlkZGxlIG9mIHRoZSBuaWdodCwgYW5kIGNvbWUgdG8gaGltIHdpdGggZGlzcGF0Y2guIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4gc2V0cyBvdXQgd2l0aCB0aGUgbWVzc2VuZ2VyLiBIZSBzZW5kcyBhbm90aGVyIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Qy4gRmFiaXVzPC9uYW1lPiwgdGhlIGxpZXV0ZW5hbnQsIG9yZGVyaW5nIGhpbSB0byBsZWFkIGZvcnRoIGhpcwogICAgICAgICAgICAgICAgICAgIGxlZ2lvbiBpbnRvIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdHJlYmF0ZXM8L25hbWU+LCB0byB3aGljaCBoZSBrbmV3IGhpcwogICAgICAgICAgICAgICAgICAgIG1hcmNoIG11c3QgYmUgbWFkZS4gSGUgd3JpdGVzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+IHRvIGNvbWUgd2l0aAogICAgICAgICAgICAgICAgICAgIGhpcyBsZWdpb24gdG8gdGhlIGZyb250aWVycyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+LCBpZiBoZSBjb3VsZCBkbyBzbyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBhZHZhbnRhZ2Ugb2YgdGhlIGNvbW1vbndlYWx0aDogaGUgZG9lcyBub3QgY29uc2lkZXIgdGhhdCB0aGUgcmVtYWluaW5nIHBvcnRpb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgYXJteSwgYmVjYXVzZSBpdCB3YXMgc29tZXdoYXQgZnVydGhlciBkaXN0YW50LCBzaG91bGQgYmUgd2FpdGVkIGZvcjsgYnV0CiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibGVzIGFib3V0IDQwMCBob3JzZSBmcm9tIHRoZSBuZWFyZXN0IHdpbnRlci1xdWFydGVycy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYXZpbmcgcmVjZWl2ZWQgdGhlIGxldHRlciBhYm91dCB0aGUgZWxldmVudGgKICAgICAgICAgICAgICAgICAgICBob3VyIG9mIHRoZSBkYXksIGltbWVkaWF0ZWx5IHNlbmRzIGEgbWVzc2VuZ2VyIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4sIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TS4gQ3Jhc3N1czwvbmFtZT4sIHF1ZXN0b3IgdGhlcmUsIHdob3NlIHdpbnRlci1xdWFydGVycwogICAgICAgICAgICAgICAgICAgIHdlcmUgdHdlbnR5LWZpdmUgbWlsZXMgZGlzdGFudCBmcm9tIGhpbS4gSGUgb3JkZXJzIHRoZSBsZWdpb24gdG8gc2V0IGZvcndhcmQgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgbWlkZGxlIG9mIHRoZSBuaWdodCwgYW5kIGNvbWUgdG8gaGltIHdpdGggZGlzcGF0Y2guIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4gc2V0cyBvdXQgd2l0aCB0aGUgbWVzc2VuZ2VyLiBIZSBzZW5kcyBhbm90aGVyIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Qy4gRmFiaXVzPC9uYW1lPiwgdGhlIGxpZXV0ZW5hbnQsIG9yZGVyaW5nIGhpbSB0byBsZWFkIGZvcnRoIGhpcwogICAgICAgICAgICAgICAgICAgIGxlZ2lvbiBpbnRvIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdHJlYmF0ZXM8L25hbWU+LCB0byB3aGljaCBoZSBrbmV3IGhpcwogICAgICAgICAgICAgICAgICAgIG1hcmNoIG11c3QgYmUgbWFkZS4gSGUgd3JpdGVzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+IHRvIGNvbWUgd2l0aAogICAgICAgICAgICAgICAgICAgIGhpcyBsZWdpb24gdG8gdGhlIGZyb250aWVycyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+LCBpZiBoZSBjb3VsZCBkbyBzbyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBhZHZhbnRhZ2Ugb2YgdGhlIGNvbW1vbndlYWx0aDogaGUgZG9lcyBub3QgY29uc2lkZXIgdGhhdCB0aGUgcmVtYWluaW5nIHBvcnRpb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgYXJteSwgYmVjYXVzZSBpdCB3YXMgc29tZXdoYXQgZnVydGhlciBkaXN0YW50LCBzaG91bGQgYmUgd2FpdGVkIGZvcjsgYnV0CiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibGVzIGFib3V0IDQwMCBob3JzZSBmcm9tIHRoZSBuZWFyZXN0IHdpbnRlci1xdWFydGVycy4gPC90cmFuc2xhdGlvbj4="
translation['5.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyBiZWVuIGFwcHJpc2VkIG9mIHRoZSBhcnJpdmFsIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4gYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc2NvdXRzIGF0IGFib3V0IHRoZSB0aGlyZCBob3VyLCBoZSBhZHZhbmNlcyB0d2VudHkgbWlsZXMgdGhhdCBkYXkuIEhlIGFwcG9pbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4gb3ZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNhbWFyb2JyaXZhPC9uYW1lPiBhbmQgYXNzaWducwogICAgICAgICAgICAgICAgICAgIGhpbSBhIGxlZ2lvbiwgYmVjYXVzZSBoZSB3YXMgbGVhdmluZyB0aGVyZSB0aGUgYmFnZ2FnZSBvZiB0aGUgYXJteSwgdGhlIGhvc3RhZ2VzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHN0YXRlcywgdGhlIHB1YmxpYyBkb2N1bWVudHMsIGFuZCBhbGwgdGhlIGNvcm4sIHdoaWNoIGhlIGhhZCBjb252ZXllZAogICAgICAgICAgICAgICAgICAgIHRoaXRoZXIgZm9yIHBhc3NpbmcgdGhlIHdpbnRlci4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5GYWJpdXM8L25hbWU+LCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgZGVsYXlpbmcgYSBtb21lbnQsIG1lZXRzIGhpbSBvbiB0aGUgbWFyY2ggd2l0aCBoaXMgbGVnaW9uLCBhcyBoZSBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGNvbW1hbmRlZC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4sIGhhdmluZyBsZWFybmVkIHRoZSBkZWF0aCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlNhYmludXM8L25hbWU+IGFuZCB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIGNvaG9ydHMsIGFzIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBmb3JjZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4gaGFkIGNvbWUgYWdhaW5zdCBoaW0sIGJlZ2lubmluZyB0byBmZWFyIGxlc3QsIGlmIGhlIG1hZGUgYQogICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZSBmcm9tIGhpcyB3aW50ZXItcXVhcnRlcnMsIHJlc2VtYmxpbmcgYSBmbGlnaHQsIGhlIHNob3VsZCBub3QgYmUgYWJsZQogICAgICAgICAgICAgICAgICAgIHRvIHN1cHBvcnQgdGhlIGF0dGFjayBvZiB0aGUgZW5lbXksIHBhcnRpY3VsYXJseSBzaW5jZSBoZSBrbmV3IHRoZW0gdG8gYmUgZWxhdGVkCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlaXIgcmVjZW50IHZpY3RvcnksIHNlbmRzIGJhY2sgYSBsZXR0ZXIgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGluZm9ybWluZyBoaW0gd2l0aCB3aGF0IGdyZWF0IGhhemFyZCBoZSB3b3VsZCBsZWFkIG91dCBoaXMgbGVnaW9uIGZyb20KICAgICAgICAgICAgICAgICAgICB3aW50ZXItcXVhcnRlcnM7IGhlIHJlbGF0ZXMgYXQgbGFyZ2UgdGhlIGFmZmFpcnMgd2hpY2ggaGFkIHRha2VuIHBsYWNlIGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVidXJvbmVzPC9uYW1lPjsgaGUgaW5mb3JtcyBoaW0gdGhhdCBhbGwgdGhlIGluZmFudHJ5IGFuZCBjYXZhbHJ5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4gaGFkIGVuY2FtcGVkIGF0IGEgZGlzdGFuY2Ugb2Ygb25seSB0aHJlZSBtaWxlcyBmcm9tIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBjYW1wLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DcmFzc3VzPC9uYW1lPiBieSB0aGUKICAgICAgICAgICAgICAgICAgICBzY291dHMgYXQgYWJvdXQgdGhlIHRoaXJkIGhvdXIsIGhlIGFkdmFuY2VzIHR3ZW50eSBtaWxlcyB0aGF0IGRheS4gSGUgYXBwb2ludHMKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DcmFzc3VzPC9uYW1lPiBvdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2FtYXJvYnJpdmE8L25hbWU+IGFuZCBhc3NpZ25zCiAgICAgICAgICAgICAgICAgICAgaGltIGEgbGVnaW9uLCBiZWNhdXNlIGhlIHdhcyBsZWF2aW5nIHRoZXJlIHRoZSBiYWdnYWdlIG9mIHRoZSBhcm15LCB0aGUgaG9zdGFnZXMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc3RhdGVzLCB0aGUgcHVibGljIGRvY3VtZW50cywgYW5kIGFsbCB0aGUgY29ybiwgd2hpY2ggaGUgaGFkIGNvbnZleWVkCiAgICAgICAgICAgICAgICAgICAgdGhpdGhlciBmb3IgcGFzc2luZyB0aGUgd2ludGVyLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkZhYml1czwvbmFtZT4sIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBkZWxheWluZyBhIG1vbWVudCwgbWVldHMgaGltIG9uIHRoZSBtYXJjaCB3aXRoIGhpcyBsZWdpb24sIGFzIGhlIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZGVkLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiwgaGF2aW5nIGxlYXJuZWQgdGhlIGRlYXRoIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+U2FiaW51czwvbmFtZT4gYW5kIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgY29ob3J0cywgYXMgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGZvcmNlcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiBoYWQgY29tZSBhZ2FpbnN0IGhpbSwgYmVnaW5uaW5nIHRvIGZlYXIgbGVzdCwgaWYgaGUgbWFkZSBhCiAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlIGZyb20gaGlzIHdpbnRlci1xdWFydGVycywgcmVzZW1ibGluZyBhIGZsaWdodCwgaGUgc2hvdWxkIG5vdCBiZSBhYmxlCiAgICAgICAgICAgICAgICAgICAgdG8gc3VwcG9ydCB0aGUgYXR0YWNrIG9mIHRoZSBlbmVteSwgcGFydGljdWxhcmx5IHNpbmNlIGhlIGtuZXcgdGhlbSB0byBiZSBlbGF0ZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGVpciByZWNlbnQgdmljdG9yeSwgc2VuZHMgYmFjayBhIGxldHRlciB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgaW5mb3JtaW5nIGhpbSB3aXRoIHdoYXQgZ3JlYXQgaGF6YXJkIGhlIHdvdWxkIGxlYWQgb3V0IGhpcyBsZWdpb24gZnJvbQogICAgICAgICAgICAgICAgICAgIHdpbnRlci1xdWFydGVyczsgaGUgcmVsYXRlcyBhdCBsYXJnZSB0aGUgYWZmYWlycyB3aGljaCBoYWQgdGFrZW4gcGxhY2UgYW1vbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWJ1cm9uZXM8L25hbWU+OyBoZSBpbmZvcm1zIGhpbSB0aGF0IGFsbCB0aGUgaW5mYW50cnkgYW5kIGNhdmFscnkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiBoYWQgZW5jYW1wZWQgYXQgYSBkaXN0YW5jZSBvZiBvbmx5IHRocmVlIG1pbGVzIGZyb20gaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGNhbXAuIDwvdHJhbnNsYXRpb24+"
translation['5.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYXBwcm92aW5nIG9mIGhpcyBtb3RpdmVzLCBhbHRob3VnaCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBkaXNhcHBvaW50ZWQgaW4gaGlzIGV4cGVjdGF0aW9uIG9mIHRocmVlIGxlZ2lvbnMsIGFuZCByZWR1Y2VkIHRvIHR3bywgeWV0IHBsYWNlZAogICAgICAgICAgICAgICAgICAgIGhpcyBvbmx5IGhvcGVzIG9mIHRoZSBjb21tb24gc2FmZXR5IGluIGRpc3BhdGNoLiBIZSBnb2VzIGludG8gdGhlIHRlcnJpdG9yaWVzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiBieSBsb25nIG1hcmNoZXMuIFRoZXJlIGhlIGxlYXJucyBmcm9tIHNvbWUgcHJpc29uZXJzCiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGluZ3MgYXJlIGdvaW5nIG9uIGluIHRoZSBjYW1wIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPiwgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgaG93IGdyZWF0IGplb3BhcmR5IHRoZSBhZmZhaXIgaXMuIFRoZW4gd2l0aCBncmVhdCByZXdhcmRzIGhlIGluZHVjZXMgYSBjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgbWFuIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGxpYzwvbmFtZT4gaG9yc2UgdG8gY29udmV5IGEgbGV0dGVyIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPi4gVGhpcyBoZSBzZW5kcyB3cml0dGVuIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGxhY2UiPkdyZWVrPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcnMsIGxlc3QgdGhlIGxldHRlciBiZWluZyBpbnRlcmNlcHRlZCwgb3VyIG1lYXN1cmVzIHNob3VsZCBiZSBkaXNjb3ZlcmVkCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIGVuZW15LiBIZSBkaXJlY3RzIGhpbSwgaWYgaGUgc2hvdWxkIGJlIHVuYWJsZSB0byBlbnRlciwgdG8gdGhyb3cgaGlzCiAgICAgICAgICAgICAgICAgICAgc3BlYXIgd2l0aCB0aGUgbGV0dGVyIGZhc3RlbmVkIHRvIHRoZSB0aG9uZywgaW5zaWRlIHRoZSBmb3J0aWZpY2F0aW9ucyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjYW1wLiBIZSB3cml0ZXMgaW4gdGhlIGxldHRlciwgdGhhdCBoZSBoYXZpbmcgc2V0IG91dCB3aXRoIGhpcyBsZWdpb25zLCB3aWxsCiAgICAgICAgICAgICAgICAgICAgcXVpY2tseSBiZSB0aGVyZTogaGUgZW50cmVhdHMgaGltIHRvIG1haW50YWluIGhpcyBhbmNpZW50IHZhbG9yLiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGFwcHJlaGVuZGluZyBkYW5nZXIsIHRocm93cyBoaXMgc3BlYXIgYXMgaGUgaGFzIGJlZW4gZGlyZWN0ZWQuCiAgICAgICAgICAgICAgICAgICAgSXMgYnkgY2hhbmNlIHN0dWNrIGluIGEgdG93ZXIsIGFuZCwgbm90IGJlaW5nIG9ic2VydmVkIGJ5IG91ciBtZW4gZm9yIHR3byBkYXlzLAogICAgICAgICAgICAgICAgICAgIHdhcyBzZWVuIGJ5IGEgY2VydGFpbiBzb2xkaWVyIG9uIHRoZSB0aGlyZCBkYXk6IHdoZW4gdGFrZW4gZG93biwgaXQgd2FzIGNhcnJpZWQKICAgICAgICAgICAgICAgICAgICB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4uIEhlLCBhZnRlciBwZXJ1c2luZyBpdCwgcmVhZHMgaXQgb3V0IGluIGFuCiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibHkgb2YgdGhlIHNvbGRpZXJzLCBhbmQgZmlsbHMgYWxsIHdpdGggdGhlIGdyZWF0ZXN0IGpveS4gVGhlbiB0aGUgc21va2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZmlyZXMgd2FzIHNlZW4gaW4gdGhlIGRpc3RhbmNlLCBhIGNpcmN1bXN0YW5jZSB3aGljaCBiYW5pc2hlZCBhbGwgZG91YnQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgYXJyaXZhbCBvZiB0aGUgbGVnaW9ucy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYXBwcm92aW5nIG9mIGhpcyBtb3RpdmVzLCBhbHRob3VnaCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBkaXNhcHBvaW50ZWQgaW4gaGlzIGV4cGVjdGF0aW9uIG9mIHRocmVlIGxlZ2lvbnMsIGFuZCByZWR1Y2VkIHRvIHR3bywgeWV0IHBsYWNlZAogICAgICAgICAgICAgICAgICAgIGhpcyBvbmx5IGhvcGVzIG9mIHRoZSBjb21tb24gc2FmZXR5IGluIGRpc3BhdGNoLiBIZSBnb2VzIGludG8gdGhlIHRlcnJpdG9yaWVzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiBieSBsb25nIG1hcmNoZXMuIFRoZXJlIGhlIGxlYXJucyBmcm9tIHNvbWUgcHJpc29uZXJzCiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGluZ3MgYXJlIGdvaW5nIG9uIGluIHRoZSBjYW1wIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPiwgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgaG93IGdyZWF0IGplb3BhcmR5IHRoZSBhZmZhaXIgaXMuIFRoZW4gd2l0aCBncmVhdCByZXdhcmRzIGhlIGluZHVjZXMgYSBjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgbWFuIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGxpYzwvbmFtZT4gaG9yc2UgdG8gY29udmV5IGEgbGV0dGVyIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPi4gVGhpcyBoZSBzZW5kcyB3cml0dGVuIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGxhY2UiPkdyZWVrPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcnMsIGxlc3QgdGhlIGxldHRlciBiZWluZyBpbnRlcmNlcHRlZCwgb3VyIG1lYXN1cmVzIHNob3VsZCBiZSBkaXNjb3ZlcmVkCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIGVuZW15LiBIZSBkaXJlY3RzIGhpbSwgaWYgaGUgc2hvdWxkIGJlIHVuYWJsZSB0byBlbnRlciwgdG8gdGhyb3cgaGlzCiAgICAgICAgICAgICAgICAgICAgc3BlYXIgd2l0aCB0aGUgbGV0dGVyIGZhc3RlbmVkIHRvIHRoZSB0aG9uZywgaW5zaWRlIHRoZSBmb3J0aWZpY2F0aW9ucyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjYW1wLiBIZSB3cml0ZXMgaW4gdGhlIGxldHRlciwgdGhhdCBoZSBoYXZpbmcgc2V0IG91dCB3aXRoIGhpcyBsZWdpb25zLCB3aWxsCiAgICAgICAgICAgICAgICAgICAgcXVpY2tseSBiZSB0aGVyZTogaGUgZW50cmVhdHMgaGltIHRvIG1haW50YWluIGhpcyBhbmNpZW50IHZhbG9yLiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGFwcHJlaGVuZGluZyBkYW5nZXIsIHRocm93cyBoaXMgc3BlYXIgYXMgaGUgaGFzIGJlZW4gZGlyZWN0ZWQuCiAgICAgICAgICAgICAgICAgICAgSXMgYnkgY2hhbmNlIHN0dWNrIGluIGEgdG93ZXIsIGFuZCwgbm90IGJlaW5nIG9ic2VydmVkIGJ5IG91ciBtZW4gZm9yIHR3byBkYXlzLAogICAgICAgICAgICAgICAgICAgIHdhcyBzZWVuIGJ5IGEgY2VydGFpbiBzb2xkaWVyIG9uIHRoZSB0aGlyZCBkYXk6IHdoZW4gdGFrZW4gZG93biwgaXQgd2FzIGNhcnJpZWQKICAgICAgICAgICAgICAgICAgICB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4uIEhlLCBhZnRlciBwZXJ1c2luZyBpdCwgcmVhZHMgaXQgb3V0IGluIGFuCiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibHkgb2YgdGhlIHNvbGRpZXJzLCBhbmQgZmlsbHMgYWxsIHdpdGggdGhlIGdyZWF0ZXN0IGpveS4gVGhlbiB0aGUgc21va2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZmlyZXMgd2FzIHNlZW4gaW4gdGhlIGRpc3RhbmNlLCBhIGNpcmN1bXN0YW5jZSB3aGljaCBiYW5pc2hlZCBhbGwgZG91YnQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgYXJyaXZhbCBvZiB0aGUgbGVnaW9ucy4gPC90cmFuc2xhdGlvbj4="
translation['5.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiwgaGF2aW5nIGRpc2NvdmVyZWQgdGhlIG1hdHRlciB0aHJvdWdoIHRoZWlyIHNjb3V0cywKICAgICAgICAgICAgICAgICAgICBhYmFuZG9uIHRoZSBibG9ja2FkZSwgYW5kIG1hcmNoIHRvd2FyZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2l0aCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGVpciBmb3JjZXM7IHRoZXNlIHdlcmUgYWJvdXQgNjAsMDAwIGFybWVkIG1lbi4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DaWNlcm88L25hbWU+LCBhbiBvcHBvcnR1bml0eSBiZWluZyBub3cgYWZmb3JkZWQsIGFnYWluIGJlZ3Mgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcnRpY288L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB3aG9tIHdlIG1lbnRpb25lZCBhYm92ZSwKICAgICAgICAgICAgICAgICAgICB0byBjb252ZXkgYmFjayBhIGxldHRlciB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT47IGhlIGFkdmlzZXMgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybSBoaXMgam91cm5leSB3YXJpbHk7IGhlIHdyaXRlcyBpbiB0aGUgbGV0dGVyIHRoYXQgdGhlIGVuZW15IGhhZCBkZXBhcnRlZAogICAgICAgICAgICAgICAgICAgIGFuZCBoYWQgdHVybmVkIHRoZWlyIGVudGlyZSBmb3JjZSBhZ2FpbnN0IGhpbS4gV2hlbiB0aGlzIGxldHRlciB3YXMgYnJvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIGhpbSBhYm91dCB0aGUgbWlkZGxlIG9mIHRoZSBuaWdodCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGFwcHJpc2VzIGhpcwogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIG9mIGl0cyBjb250ZW50cywgYW5kIGluc3BpcmVzIHRoZW0gd2l0aCBjb3VyYWdlIGZvciBmaWdodGluZzogdGhlCiAgICAgICAgICAgICAgICAgICAgZm9sbG93aW5nIGRheSwgYXQgdGhlIGRhd24sIGhlIG1vdmVzIGhpcyBjYW1wLCBhbmQsIGhhdmluZyBwcm9jZWVkZWQgZm91ciBtaWxlcywKICAgICAgICAgICAgICAgICAgICBoZSBlc3BpZXMgdGhlIGZvcmNlcyBvZiB0aGUgZW5lbXkgb24gdGhlIG90aGVyIHNpZGUgb2YgYSBjb25zaWRlcmFibGUgdmFsbGV5IGFuZAogICAgICAgICAgICAgICAgICAgIHJpdnVsZXQuIEl0IHdhcyBhbiBhZmZhaXIgb2YgZ3JlYXQgZGFuZ2VyIHRvIGZpZ2h0IHdpdGggc3VjaCBsYXJnZSBmb3JjZXMgaW4gYQogICAgICAgICAgICAgICAgICAgIGRpc2FkdmFudGFnZW91cyBzaXR1YXRpb24uIEZvciB0aGUgcHJlc2VudCwgdGhlcmVmb3JlLCBpbmFzbXVjaCBhcyBoZSBrbmV3IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DaWNlcm88L25hbWU+IHdhcyByZWxlYXNlZCBmcm9tIHRoZSBibG9ja2FkZSwgYW5kIHRob3VnaHQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIG1pZ2h0LCBvbiB0aGF0IGFjY291bnQsIHJlbGF4IGhpcyBzcGVlZCwgaGUgaGFsdGVkIHRoZXJlIGFuZCBmb3J0aWZpZXMgYQogICAgICAgICAgICAgICAgICAgIGNhbXAgaW4gdGhlIG1vc3QgZmF2b3JhYmxlIHBvc2l0aW9uIGhlIGNhbi4gQW5kIHRoaXMsIHRob3VnaCBpdCB3YXMgc21hbGwgaW4KICAgICAgICAgICAgICAgICAgICBpdHNlbGYsIFt0aGVyZSBiZWluZ10gc2NhcmNlbHkgNywwMDAgbWVuLCBhbmQgdGhlc2UgdG9vIHdpdGhvdXQgYmFnZ2FnZSwgc3RpbGwKICAgICAgICAgICAgICAgICAgICBieSB0aGUgbmFycm93bmVzcyBvZiB0aGUgcGFzc2FnZXMsIGhlIGNvbnRyYWN0cyBhcyBtdWNoIGFzIGhlIGNhbiwgd2l0aCB0aGlzCiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LCB0aGF0IGhlIG1heSBjb21lIGludG8gdGhlIGdyZWF0ZXN0IGNvbnRlbXB0IHdpdGggdGhlIGVuZW15LiBJbiB0aGUgbWVhbgogICAgICAgICAgICAgICAgICAgIHdoaWxlIHNjb3V0cyBoYXZpbmcgYmVlbiBzZW50IGluIGFsbCBkaXJlY3Rpb25zLCBoZSBleGFtaW5lcyBieSB3aGF0IG1vc3QKICAgICAgICAgICAgICAgICAgICBjb252ZW5pZW50IHBhdGggaGUgbWlnaHQgY3Jvc3MgdGhlIHZhbGxleS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2F1bHM8L25hbWU+LCBoYXZpbmcgZGlzY292ZXJlZCB0aGUgbWF0dGVyIHRocm91Z2ggdGhlaXIgc2NvdXRzLAogICAgICAgICAgICAgICAgICAgIGFiYW5kb24gdGhlIGJsb2NrYWRlLCBhbmQgbWFyY2ggdG93YXJkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3aXRoIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGZvcmNlczsgdGhlc2Ugd2VyZSBhYm91dCA2MCwwMDAgYXJtZWQgbWVuLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4sIGFuIG9wcG9ydHVuaXR5IGJlaW5nIG5vdyBhZmZvcmRlZCwgYWdhaW4gYmVncyBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVydGljbzwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHdob20gd2UgbWVudGlvbmVkIGFib3ZlLAogICAgICAgICAgICAgICAgICAgIHRvIGNvbnZleSBiYWNrIGEgbGV0dGVyIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPjsgaGUgYWR2aXNlcyBoaW0gdG8KICAgICAgICAgICAgICAgICAgICBwZXJmb3JtIGhpcyBqb3VybmV5IHdhcmlseTsgaGUgd3JpdGVzIGluIHRoZSBsZXR0ZXIgdGhhdCB0aGUgZW5lbXkgaGFkIGRlcGFydGVkCiAgICAgICAgICAgICAgICAgICAgYW5kIGhhZCB0dXJuZWQgdGhlaXIgZW50aXJlIGZvcmNlIGFnYWluc3QgaGltLiBXaGVuIHRoaXMgbGV0dGVyIHdhcyBicm91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgaGltIGFib3V0IHRoZSBtaWRkbGUgb2YgdGhlIG5pZ2h0LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYXBwcmlzZXMgaGlzCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMgb2YgaXRzIGNvbnRlbnRzLCBhbmQgaW5zcGlyZXMgdGhlbSB3aXRoIGNvdXJhZ2UgZm9yIGZpZ2h0aW5nOiB0aGUKICAgICAgICAgICAgICAgICAgICBmb2xsb3dpbmcgZGF5LCBhdCB0aGUgZGF3biwgaGUgbW92ZXMgaGlzIGNhbXAsIGFuZCwgaGF2aW5nIHByb2NlZWRlZCBmb3VyIG1pbGVzLAogICAgICAgICAgICAgICAgICAgIGhlIGVzcGllcyB0aGUgZm9yY2VzIG9mIHRoZSBlbmVteSBvbiB0aGUgb3RoZXIgc2lkZSBvZiBhIGNvbnNpZGVyYWJsZSB2YWxsZXkgYW5kCiAgICAgICAgICAgICAgICAgICAgcml2dWxldC4gSXQgd2FzIGFuIGFmZmFpciBvZiBncmVhdCBkYW5nZXIgdG8gZmlnaHQgd2l0aCBzdWNoIGxhcmdlIGZvcmNlcyBpbiBhCiAgICAgICAgICAgICAgICAgICAgZGlzYWR2YW50YWdlb3VzIHNpdHVhdGlvbi4gRm9yIHRoZSBwcmVzZW50LCB0aGVyZWZvcmUsIGluYXNtdWNoIGFzIGhlIGtuZXcgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4gd2FzIHJlbGVhc2VkIGZyb20gdGhlIGJsb2NrYWRlLCBhbmQgdGhvdWdodAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgbWlnaHQsIG9uIHRoYXQgYWNjb3VudCwgcmVsYXggaGlzIHNwZWVkLCBoZSBoYWx0ZWQgdGhlcmUgYW5kIGZvcnRpZmllcyBhCiAgICAgICAgICAgICAgICAgICAgY2FtcCBpbiB0aGUgbW9zdCBmYXZvcmFibGUgcG9zaXRpb24gaGUgY2FuLiBBbmQgdGhpcywgdGhvdWdoIGl0IHdhcyBzbWFsbCBpbgogICAgICAgICAgICAgICAgICAgIGl0c2VsZiwgW3RoZXJlIGJlaW5nXSBzY2FyY2VseSA3LDAwMCBtZW4sIGFuZCB0aGVzZSB0b28gd2l0aG91dCBiYWdnYWdlLCBzdGlsbAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBuYXJyb3duZXNzIG9mIHRoZSBwYXNzYWdlcywgaGUgY29udHJhY3RzIGFzIG11Y2ggYXMgaGUgY2FuLCB3aXRoIHRoaXMKICAgICAgICAgICAgICAgICAgICBvYmplY3QsIHRoYXQgaGUgbWF5IGNvbWUgaW50byB0aGUgZ3JlYXRlc3QgY29udGVtcHQgd2l0aCB0aGUgZW5lbXkuIEluIHRoZSBtZWFuCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgc2NvdXRzIGhhdmluZyBiZWVuIHNlbnQgaW4gYWxsIGRpcmVjdGlvbnMsIGhlIGV4YW1pbmVzIGJ5IHdoYXQgbW9zdAogICAgICAgICAgICAgICAgICAgIGNvbnZlbmllbnQgcGF0aCBoZSBtaWdodCBjcm9zcyB0aGUgdmFsbGV5LiA8L3RyYW5zbGF0aW9uPg=="
translation['5.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoYXQgZGF5LCBzbGlnaHQgc2tpcm1pc2hlcyBvZiBjYXZhbHJ5IGhhdmluZyB0YWtlbiBwbGFjZSBuZWFyIHRoZSByaXZlciwgYm90aAogICAgICAgICAgICAgICAgICAgIGFybWllcyBrZXB0IGluIHRoZWlyIG93biBwb3NpdGlvbnM6IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgdGhleSB3ZXJlIGF3YWl0aW5nIGxhcmdlciBmb3JjZXMgd2hpY2ggaGFkIG5vdCB0aGVuIGFycml2ZWQ7IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgW3RvIHNlZV0gaWYgcGVyY2hhbmNlIGJ5IHByZXRlbnNlIG9mIGZlYXIgaGUKICAgICAgICAgICAgICAgICAgICBjb3VsZCBhbGx1cmUgdGhlIGVuZW15IHRvd2FyZCBoaXMgcG9zaXRpb24sIHNvIHRoYXQgaGUgbWlnaHQgZW5nYWdlIGluIGJhdHRsZSwKICAgICAgICAgICAgICAgICAgICBpbiBmcm9udCBvZiBoaXMgY2FtcCwgb24gdGhpcyBzaWRlIG9mIHRoZSB2YWxsZXk7IGlmIGhlIGNvdWxkIG5vdCBhY2NvbXBsaXNoCiAgICAgICAgICAgICAgICAgICAgdGhpcywgdGhhdCwgaGF2aW5nIGlucXVpcmVkIGFib3V0IHRoZSBwYXNzZXMsIGhlIG1pZ2h0IGNyb3NzIHRoZSB2YWxsZXkgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHJpdmVyIHdpdGggdGhlIGxlc3MgaGF6YXJkLiBBdCBkYXlicmVhayB0aGUgY2F2YWxyeSBvZiB0aGUgZW5lbXkgYXBwcm9hY2hlcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBjYW1wIGFuZCBqb2lucyBiYXR0bGUgd2l0aCBvdXIgaG9yc2UuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBvcmRlcnMKICAgICAgICAgICAgICAgICAgICB0aGUgaG9yc2UgdG8gZ2l2ZSB3YXkgcHVycG9zZWx5LCBhbmQgcmV0cmVhdCB0byB0aGUgY2FtcDogYXQgdGhlIHNhbWUgdGltZSBoZQogICAgICAgICAgICAgICAgICAgIG9yZGVycyB0aGUgY2FtcCB0byBiZSBmb3J0aWZpZWQgd2l0aCBhIGhpZ2hlciByYW1wYXJ0IGluIGFsbCBkaXJlY3Rpb25zLCB0aGUKICAgICAgICAgICAgICAgICAgICBnYXRlcyB0byBiZSBiYXJyaWNhZGVkLCBhbmQgaW4gZXhlY3V0aW5nIHRoZXNlIHRoaW5ncyBhcyBtdWNoIGNvbmZ1c2lvbiB0byBiZQogICAgICAgICAgICAgICAgICAgIHNob3duIGFzIHBvc3NpYmxlLCBhbmQgdG8gcGVyZm9ybSB0aGVtIHVuZGVyIHRoZSBwcmV0ZW5zZSBvZiBmZWFyLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIHRoZXkgd2VyZSBhd2FpdGluZyBsYXJnZXIgZm9yY2VzIHdoaWNoIGhhZCBub3QgdGhlbiBhcnJpdmVkOyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIFt0byBzZWVdIGlmIHBlcmNoYW5jZSBieSBwcmV0ZW5zZSBvZiBmZWFyIGhlCiAgICAgICAgICAgICAgICAgICAgY291bGQgYWxsdXJlIHRoZSBlbmVteSB0b3dhcmQgaGlzIHBvc2l0aW9uLCBzbyB0aGF0IGhlIG1pZ2h0IGVuZ2FnZSBpbiBiYXR0bGUsCiAgICAgICAgICAgICAgICAgICAgaW4gZnJvbnQgb2YgaGlzIGNhbXAsIG9uIHRoaXMgc2lkZSBvZiB0aGUgdmFsbGV5OyBpZiBoZSBjb3VsZCBub3QgYWNjb21wbGlzaAogICAgICAgICAgICAgICAgICAgIHRoaXMsIHRoYXQsIGhhdmluZyBpbnF1aXJlZCBhYm91dCB0aGUgcGFzc2VzLCBoZSBtaWdodCBjcm9zcyB0aGUgdmFsbGV5IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICByaXZlciB3aXRoIHRoZSBsZXNzIGhhemFyZC4gQXQgZGF5YnJlYWsgdGhlIGNhdmFscnkgb2YgdGhlIGVuZW15IGFwcHJvYWNoZXMgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgY2FtcCBhbmQgam9pbnMgYmF0dGxlIHdpdGggb3VyIGhvcnNlLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gb3JkZXJzCiAgICAgICAgICAgICAgICAgICAgdGhlIGhvcnNlIHRvIGdpdmUgd2F5IHB1cnBvc2VseSwgYW5kIHJldHJlYXQgdG8gdGhlIGNhbXA6IGF0IHRoZSBzYW1lIHRpbWUgaGUKICAgICAgICAgICAgICAgICAgICBvcmRlcnMgdGhlIGNhbXAgdG8gYmUgZm9ydGlmaWVkIHdpdGggYSBoaWdoZXIgcmFtcGFydCBpbiBhbGwgZGlyZWN0aW9ucywgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2F0ZXMgdG8gYmUgYmFycmljYWRlZCwgYW5kIGluIGV4ZWN1dGluZyB0aGVzZSB0aGluZ3MgYXMgbXVjaCBjb25mdXNpb24gdG8gYmUKICAgICAgICAgICAgICAgICAgICBzaG93biBhcyBwb3NzaWJsZSwgYW5kIHRvIHBlcmZvcm0gdGhlbSB1bmRlciB0aGUgcHJldGVuc2Ugb2YgZmVhci4gPC90cmFuc2xhdGlvbj4="
translation['5.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluZHVjZWQgYnkgYWxsIHRoZXNlIHRoaW5ncywgdGhlIGVuZW15IGxlYWQgb3ZlciB0aGVpciBmb3JjZXMgYW5kIGRyYXcgdXAgdGhlaXIKICAgICAgICAgICAgICAgICAgICBsaW5lIGluIGEgZGlzYWR2YW50YWdlb3VzIHBvc2l0aW9uOyBhbmQgYXMgb3VyIG1lbiBhbHNvIGhhZCBiZWVuIGxlZCBkb3duIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgcmFtcGFydHMsIHRoZXkgYXBwcm9hY2ggbmVhcmVyLCBhbmQgdGhyb3cgdGhlaXIgd2VhcG9ucyBpbnRvIHRoZQogICAgICAgICAgICAgICAgICAgIGZvcnRpZmljYXRpb24gZnJvbSBhbGwgc2lkZXMsIGFuZCBzZW5kaW5nIGhlcmFsZHMgcm91bmQsIG9yZGVyIGl0IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgcHJvY2xhaW1lZCB0aGF0LCBpZiAiYW55LCBlaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IG9yIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4sIHdhcyB3aWxsaW5nIHRvIGdvIG92ZXIgdG8gdGhlbSBiZWZvcmUgdGhlIHRoaXJkIGhvdXIsIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIHBlcm1pdHRlZDsgYWZ0ZXIgdGhhdCB0aW1lIHRoZXJlIHdvdWxkIG5vdCBiZSBwZXJtaXNzaW9uOyIgYW5kIHNvIG11Y2ggZGlkIHRoZXkKICAgICAgICAgICAgICAgICAgICBkaXNyZWdhcmQgb3VyIG1lbiwgdGhhdCB0aGUgZ2F0ZXMgaGF2aW5nIGJlZW4gYmxvY2tlZCB1cCB3aXRoIHNpbmdsZSByb3dzIG9mCiAgICAgICAgICAgICAgICAgICAgdHVyZiBhcyBhIG1lcmUgYXBwZWFyYW5jZSwgYmVjYXVzZSB0aGV5IGRpZCBub3Qgc2VlbSBhYmxlIHRvIGJ1cnN0IGluIHRoYXQgd2F5LAogICAgICAgICAgICAgICAgICAgIHNvbWUgYmVnYW4gdG8gcHVsbCBkb3duIHRoZSByYW1wYXJ0IHdpdGggdGhlaXIgaGFuZHMsIG90aGVycyB0byBmaWxsIHVwIHRoZQogICAgICAgICAgICAgICAgICAgIHRyZW5jaGVzLiBUaGVuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgbWFraW5nIGEgc2FsbHkgZnJvbSBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2F0ZXMsIGFuZCBzZW5kaW5nIG91dCB0aGUgY2F2YWxyeSwgc29vbiBwdXRzIHRoZSBlbmVteSB0byBmbGlnaHQsIHNvIHRoYXQgbm8KICAgICAgICAgICAgICAgICAgICBvbmUgYXQgYWxsIHN0b29kIGhpcyBncm91bmQgd2l0aCB0aGUgaW50ZW50aW9uIG9mIGZpZ2h0aW5nOyBhbmQgaGUgc2xldyBhIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIHRoZW0sIGFuZCBkZXByaXZlZCBhbGwgb2YgdGhlaXIgYXJtcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBvciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+LCB3YXMgd2lsbGluZyB0byBnbyBvdmVyIHRvIHRoZW0gYmVmb3JlIHRoZSB0aGlyZCBob3VyLCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICBwZXJtaXR0ZWQ7IGFmdGVyIHRoYXQgdGltZSB0aGVyZSB3b3VsZCBub3QgYmUgcGVybWlzc2lvbjsiIGFuZCBzbyBtdWNoIGRpZCB0aGV5CiAgICAgICAgICAgICAgICAgICAgZGlzcmVnYXJkIG91ciBtZW4sIHRoYXQgdGhlIGdhdGVzIGhhdmluZyBiZWVuIGJsb2NrZWQgdXAgd2l0aCBzaW5nbGUgcm93cyBvZgogICAgICAgICAgICAgICAgICAgIHR1cmYgYXMgYSBtZXJlIGFwcGVhcmFuY2UsIGJlY2F1c2UgdGhleSBkaWQgbm90IHNlZW0gYWJsZSB0byBidXJzdCBpbiB0aGF0IHdheSwKICAgICAgICAgICAgICAgICAgICBzb21lIGJlZ2FuIHRvIHB1bGwgZG93biB0aGUgcmFtcGFydCB3aXRoIHRoZWlyIGhhbmRzLCBvdGhlcnMgdG8gZmlsbCB1cCB0aGUKICAgICAgICAgICAgICAgICAgICB0cmVuY2hlcy4gVGhlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIG1ha2luZyBhIHNhbGx5IGZyb20gYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGdhdGVzLCBhbmQgc2VuZGluZyBvdXQgdGhlIGNhdmFscnksIHNvb24gcHV0cyB0aGUgZW5lbXkgdG8gZmxpZ2h0LCBzbyB0aGF0IG5vCiAgICAgICAgICAgICAgICAgICAgb25lIGF0IGFsbCBzdG9vZCBoaXMgZ3JvdW5kIHdpdGggdGhlIGludGVudGlvbiBvZiBmaWdodGluZzsgYW5kIGhlIHNsZXcgYSBncmVhdAogICAgICAgICAgICAgICAgICAgIG51bWJlciBvZiB0aGVtLCBhbmQgZGVwcml2ZWQgYWxsIG9mIHRoZWlyIGFybXMuIDwvdHJhbnNsYXRpb24+"
translation['5.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgZmVhcmluZyB0byBwdXJzdWUgdGhlbSB2ZXJ5IGZhciwgYmVjYXVzZSB3b29kcwogICAgICAgICAgICAgICAgICAgIGFuZCBtb3Jhc3NlcyBpbnRlcnZlbmVkLCBhbmQgYWxzbyBbYmVjYXVzZV0gaGUgc2F3IHRoYXQgdGhleSBzdWZmZXJlZCBubyBzbWFsbAogICAgICAgICAgICAgICAgICAgIGxvc3MgaW4gYWJhbmRvbmluZyB0aGVpciBwb3NpdGlvbiwgcmVhY2hlcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBkYXkgd2l0aCBhbGwgaGlzIGZvcmNlcyBzYWZlLiBIZSB3aXRuZXNzZXMgd2l0aCBzdXJwcmlzZSB0aGUgdG93ZXJzLAogICAgICAgICAgICAgICAgICAgIG1hbnRlbGV0cywgYW5kIFtvdGhlcl0gZm9ydGlmaWNhdGlvbnMgYmVsb25naW5nIHRvIHRoZSBlbmVteTogdGhlIGxlZ2lvbiBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBiZWVuIGRyYXduIG91dCwgaGUgZmluZHMgdGhhdCBldmVuIGV2ZXJ5IHRlbnRoIHNvbGRpZXIgaGFkIG5vdCBlc2NhcGVkIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICB3b3VuZHMuIEZyb20gYWxsIHRoZXNlIHRoaW5ncyBoZSBqdWRnZXMgd2l0aCB3aGF0IGRhbmdlciBhbmQgd2l0aCB3aGF0IGdyZWF0CiAgICAgICAgICAgICAgICAgICAgY291cmFnZSBtYXR0ZXJzIGhhZCBiZWVuIGNvbmR1Y3RlZDsgaGUgY29tbWVuZHMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DaWNlcm88L25hbWU+CiAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIGhpcyBkZXNlcnQsIGFuZCBsaWtld2lzZSB0aGUgbGVnaW9uOyBoZSBhZGRyZXNzZXMgaW5kaXZpZHVhbGx5IHRoZQogICAgICAgICAgICAgICAgICAgIGNlbnR1cmlvbnMgYW5kIHRoZSB0cmlidW5lcyBvZiB0aGUgc29sZGllcnMsIHdob3NlIHZhbG9yIGhlIGhhZCBkaXNjb3ZlcmVkIHRvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIHNpZ25hbC4gSGUgcmVjZWl2ZXMgaW5mb3JtYXRpb24gb2YgdGhlIGRlYXRoIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+U2FiaW51czwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q290dGE8L25hbWU+IGZyb20gdGhlIHByaXNvbmVycy4gQW4KICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSBiZWluZyBoZWxkIHRoZSBmb2xsb3dpbmcgZGF5LCBoZSBzdGF0ZXMgdGhlIG9jY3VycmVuY2U7IGhlIGNvbnNvbGVzIGFuZAogICAgICAgICAgICAgICAgICAgIGVuY291cmFnZXMgdGhlIHNvbGRpZXJzOyBoZSBzdWdnZXN0cywgdGhhdCB0aGUgZGlzYXN0ZXIsIHdoaWNoIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgb2NjYXNpb25lZCBieSB0aGUgbWlzY29uZHVjdCBhbmQgcmFzaG5lc3Mgb2YgaGlzIGxpZXV0ZW5hbnQsIHNob3VsZCBiZSBib3JuZQogICAgICAgICAgICAgICAgICAgIHdpdGggYSBwYXRpZW50IG1pbmQsIGJlY2F1c2UgYnkgdGhlIGZhdm9yIG9mIHRoZSBpbW1vcnRhbCBnb2RzIGFuZCB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICB2YWxvciwgbmVpdGhlciB3YXMgbGFzdGluZyBqb3kgbGVmdCB0byB0aGUgZW5lbXksIG5vciB2ZXJ5IGxhc3RpbmcgZ3JpZWYgdG8KICAgICAgICAgICAgICAgICAgICB0aGVtLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBmZWFyaW5nIHRvIHB1cnN1ZSB0aGVtIHZlcnkgZmFyLCBiZWNhdXNlIHdvb2RzCiAgICAgICAgICAgICAgICAgICAgYW5kIG1vcmFzc2VzIGludGVydmVuZWQsIGFuZCBhbHNvIFtiZWNhdXNlXSBoZSBzYXcgdGhhdCB0aGV5IHN1ZmZlcmVkIG5vIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgbG9zcyBpbiBhYmFuZG9uaW5nIHRoZWlyIHBvc2l0aW9uLCByZWFjaGVzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPiB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGRheSB3aXRoIGFsbCBoaXMgZm9yY2VzIHNhZmUuIEhlIHdpdG5lc3NlcyB3aXRoIHN1cnByaXNlIHRoZSB0b3dlcnMsCiAgICAgICAgICAgICAgICAgICAgbWFudGVsZXRzLCBhbmQgW290aGVyXSBmb3J0aWZpY2F0aW9ucyBiZWxvbmdpbmcgdG8gdGhlIGVuZW15OiB0aGUgbGVnaW9uIGhhdmluZwogICAgICAgICAgICAgICAgICAgIGJlZW4gZHJhd24gb3V0LCBoZSBmaW5kcyB0aGF0IGV2ZW4gZXZlcnkgdGVudGggc29sZGllciBoYWQgbm90IGVzY2FwZWQgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIHdvdW5kcy4gRnJvbSBhbGwgdGhlc2UgdGhpbmdzIGhlIGp1ZGdlcyB3aXRoIHdoYXQgZGFuZ2VyIGFuZCB3aXRoIHdoYXQgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBjb3VyYWdlIG1hdHRlcnMgaGFkIGJlZW4gY29uZHVjdGVkOyBoZSBjb21tZW5kcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNpY2VybzwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gaGlzIGRlc2VydCwgYW5kIGxpa2V3aXNlIHRoZSBsZWdpb247IGhlIGFkZHJlc3NlcyBpbmRpdmlkdWFsbHkgdGhlCiAgICAgICAgICAgICAgICAgICAgY2VudHVyaW9ucyBhbmQgdGhlIHRyaWJ1bmVzIG9mIHRoZSBzb2xkaWVycywgd2hvc2UgdmFsb3IgaGUgaGFkIGRpc2NvdmVyZWQgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gc2lnbmFsLiBIZSByZWNlaXZlcyBpbmZvcm1hdGlvbiBvZiB0aGUgZGVhdGggb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5TYWJpbnVzPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5Db3R0YTwvbmFtZT4gZnJvbSB0aGUgcHJpc29uZXJzLiBBbgogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5IGJlaW5nIGhlbGQgdGhlIGZvbGxvd2luZyBkYXksIGhlIHN0YXRlcyB0aGUgb2NjdXJyZW5jZTsgaGUgY29uc29sZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgZW5jb3VyYWdlcyB0aGUgc29sZGllcnM7IGhlIHN1Z2dlc3RzLCB0aGF0IHRoZSBkaXNhc3Rlciwgd2hpY2ggaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBvY2Nhc2lvbmVkIGJ5IHRoZSBtaXNjb25kdWN0IGFuZCByYXNobmVzcyBvZiBoaXMgbGlldXRlbmFudCwgc2hvdWxkIGJlIGJvcm5lCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIHBhdGllbnQgbWluZCwgYmVjYXVzZSBieSB0aGUgZmF2b3Igb2YgdGhlIGltbW9ydGFsIGdvZHMgYW5kIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIHZhbG9yLCBuZWl0aGVyIHdhcyBsYXN0aW5nIGpveSBsZWZ0IHRvIHRoZSBlbmVteSwgbm9yIHZlcnkgbGFzdGluZyBncmllZiB0bwogICAgICAgICAgICAgICAgICAgIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['5.53'] = ""
translation['5.54'] = ""
translation['5.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ucml2aXJpPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbmR1dGlvbWFydXM8L25hbWU+IGxldCBubyBwYXJ0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVudGlyZSB3aW50ZXIgcGFzcyB3aXRob3V0IHNlbmRpbmcgZW1iYXNzYWRvcnMgYWNyb3NzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGltcG9ydHVuaW5nIHRoZSBzdGF0ZXMsIHByb21pc2luZyBtb25leSwgYW5kIGFzc2VydGluZyB0aGF0LCBhcyBhIGxhcmdlCiAgICAgICAgICAgICAgICAgICAgcG9ydGlvbiBvZiBvdXIgYXJteSBoYWQgYmVlbiBjdXQgb2ZmLCBhIG11Y2ggc21hbGxlciBwb3J0aW9uIHJlbWFpbmVkLiBIb3dldmVyLAogICAgICAgICAgICAgICAgICAgIG5vbmUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2VybWFuIFN0YXRlczwvbmFtZT4gY291bGQgYmUgaW5kdWNlZCB0byBjcm9zcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUKICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBzaW5jZSAidGhleSBoYWQgdHdpY2UgZXNzYXllZCBpdCwiIHRoZXkgc2FpZCwgImluIHRoZSB3YXIgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaW92aXN0dXM8L25hbWU+IGFuZCBpbiB0aGUgcGFzc2FnZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UZW5jaHRoZXJpPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHRoZXJlOyB0aGF0IGZvcnR1bmUgd2FzIG5vdCB0byBiZSB0ZW1wdGVkIGFueSBtb3JlLiIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbmR1dGlvbWFydXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgZGlzYXBwb2ludGVkIGluIHRoaXMgZXhwZWN0YXRpb24sIG5ldmVydGhlbGVzcyBiZWdhbiB0byByYWlzZSB0cm9vcHMsIGFuZAogICAgICAgICAgICAgICAgICAgIGRpc2NpcGxpbmUgdGhlbSwgYW5kIHByb2N1cmUgaG9yc2VzIGZyb20gdGhlIG5laWdoYm9yaW5nIHBlb3BsZSwgYW5kIGFsbHVyZSB0bwogICAgICAgICAgICAgICAgICAgIGhpbSBieSBncmVhdCByZXdhcmRzIHRoZSBvdXRsYXdzIGFuZCBjb252aWN0cyB0aHJvdWdob3V0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPi4gQW5kIHN1Y2gKICAgICAgICAgICAgICAgICAgICBncmVhdCBpbmZsdWVuY2UgaGFkIGhlIGFscmVhZHkgYWNxdWlyZWQgZm9yIGhpbXNlbGYgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGJ5IHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVhbnMsIHRoYXQgZW1iYXNzaWVzIHdlcmUgZmxvY2tpbmcgdG8gaGltIGluIGFsbCBkaXJlY3Rpb25zLCBhbmQgc2Vla2luZywKICAgICAgICAgICAgICAgICAgICBwdWJsaWNseSBhbmQgcHJpdmF0ZWx5LCBoaXMgZmF2b3IgYW5kIGZyaWVuZHNoaXAuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyaXZpcmk8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkluZHV0aW9tYXJ1czwvbmFtZT4gbGV0IG5vIHBhcnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZW50aXJlIHdpbnRlciBwYXNzIHdpdGhvdXQgc2VuZGluZyBlbWJhc3NhZG9ycyBhY3Jvc3MgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgaW1wb3J0dW5pbmcgdGhlIHN0YXRlcywgcHJvbWlzaW5nIG1vbmV5LCBhbmQgYXNzZXJ0aW5nIHRoYXQsIGFzIGEgbGFyZ2UKICAgICAgICAgICAgICAgICAgICBwb3J0aW9uIG9mIG91ciBhcm15IGhhZCBiZWVuIGN1dCBvZmYsIGEgbXVjaCBzbWFsbGVyIHBvcnRpb24gcmVtYWluZWQuIEhvd2V2ZXIsCiAgICAgICAgICAgICAgICAgICAgbm9uZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HZXJtYW4gU3RhdGVzPC9uYW1lPiBjb3VsZCBiZSBpbmR1Y2VkIHRvIGNyb3NzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIHNpbmNlICJ0aGV5IGhhZCB0d2ljZSBlc3NheWVkIGl0LCIgdGhleSBzYWlkLCAiaW4gdGhlIHdhciB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpb3Zpc3R1czwvbmFtZT4gYW5kIGluIHRoZSBwYXNzYWdlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRlbmNodGhlcmk8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgdGhlcmU7IHRoYXQgZm9ydHVuZSB3YXMgbm90IHRvIGJlIHRlbXB0ZWQgYW55IG1vcmUuIiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkluZHV0aW9tYXJ1czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBkaXNhcHBvaW50ZWQgaW4gdGhpcyBleHBlY3RhdGlvbiwgbmV2ZXJ0aGVsZXNzIGJlZ2FuIHRvIHJhaXNlIHRyb29wcywgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzY2lwbGluZSB0aGVtLCBhbmQgcHJvY3VyZSBob3JzZXMgZnJvbSB0aGUgbmVpZ2hib3JpbmcgcGVvcGxlLCBhbmQgYWxsdXJlIHRvCiAgICAgICAgICAgICAgICAgICAgaGltIGJ5IGdyZWF0IHJld2FyZHMgdGhlIG91dGxhd3MgYW5kIGNvbnZpY3RzIHRocm91Z2hvdXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LiBBbmQgc3VjaAogICAgICAgICAgICAgICAgICAgIGdyZWF0IGluZmx1ZW5jZSBoYWQgaGUgYWxyZWFkeSBhY3F1aXJlZCBmb3IgaGltc2VsZiBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gYnkgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtZWFucywgdGhhdCBlbWJhc3NpZXMgd2VyZSBmbG9ja2luZyB0byBoaW0gaW4gYWxsIGRpcmVjdGlvbnMsIGFuZCBzZWVraW5nLAogICAgICAgICAgICAgICAgICAgIHB1YmxpY2x5IGFuZCBwcml2YXRlbHksIGhpcyBmYXZvciBhbmQgZnJpZW5kc2hpcC4gPC90cmFuc2xhdGlvbj4="
translation['5.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gaGUgcGVyY2VpdmVkIHRoYXQgdGhleSB3ZXJlIGNvbWluZyB0byBoaW0gdm9sdW50YXJpbHk7IHRoYXQgb24gdGhlIG9uZSBzaWRlCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzNTY5NyIgcmVnPSIgICtTZW5vbmVzIFs2Ljk4Myw0OC40XSAoaW5oYWJpdGVkIHBsYWNlKSwgVm9zZ2VzLCBMb3JyYWluZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2Vub25lcyA8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4gd2VyZSBzdGltdWxhdGVkIGJ5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY29uc2Npb3VzbmVzcyBvZiBndWlsdCwgb24gdGhlIG90aGVyIHNpZGUgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXR1Y2k8L25hbWU+IHdlcmUgcHJlcGFyaW5nIHdhciBhZ2FpbnN0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgYW5kIHRoYXQgZm9yY2VzIG9mIHZvbHVudGVlcnMgd291bGQgbm90IGJlIHdhbnRpbmcgdG8gaGltIGlmCiAgICAgICAgICAgICAgICAgICAgaGUgYmVnYW4gdG8gYWR2YW5jZSBmcm9tIGhpcyBvd24gdGVycml0b3JpZXMsIGhlIHByb2NsYWltcyBhbiBhcm1lZCBjb3VuY2lsCiAgICAgICAgICAgICAgICAgICAgKHRoaXMgYWNjb3JkaW5nIHRvIHRoZSBjdXN0b20gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbWVuY2VtZW50IG9mIHdhcikgYXQgd2hpY2gsIGJ5IGEgY29tbW9uIGxhdywgYWxsIHRoZSB5b3V0aCB3ZXJlIHdvbnQgdG8KICAgICAgICAgICAgICAgICAgICBhc3NlbWJsZSBpbiBhcm1zLCB3aG9ldmVyIG9mIHRoZW0gY29tZXMgbGFzdCBpcyBraWxsZWQgaW4gdGhlIHNpZ2h0IG9mIHRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5IGFmdGVyIGJlaW5nIHJhY2tlZCB3aXRoIGV2ZXJ5IHRvcnR1cmUuIEluIHRoYXQgY291bmNpbCBoZSBkZWNsYXJlcwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpbmdldG9yaXg8L25hbWU+LCB0aGUgbGVhZGVyIG9mIHRoZSBvdGhlciBmYWN0aW9uLCBoaXMgb3duIHNvbi1pbi1sYXcKICAgICAgICAgICAgICAgICAgICAod2hvbSB3ZSBoYXZlIGFib3ZlIG1lbnRpb25lZCwgYXMgaGF2aW5nIGVtYnJhY2VkIHRoZSBwcm90ZWN0aW9uIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYW5kIG5ldmVyIGhhdmluZyBkZXNlcnRlZCBoaW0pIGFuIGVuZW15IGFuZAogICAgICAgICAgICAgICAgICAgIGNvbmZpc2NhdGVzIGhpcyBwcm9wZXJ0eS4gV2hlbiB0aGVzZSB0aGluZ3Mgd2VyZSBmaW5pc2hlZCwgaGUgYXNzZXJ0cyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VuY2lsIHRoYXQgaGUsIGludml0ZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzNTY5NyIgcmVnPSIgICtTZW5vbmVzIFs2Ljk4Myw0OC40XSAoaW5oYWJpdGVkIHBsYWNlKSwgVm9zZ2VzLCBMb3JyYWluZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2Vub25lcyA8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4sIGFuZCBzZXZlcmFsIG90aGVyIHN0YXRlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHdhcyBhYm91dCB0byBtYXJjaCB0aGl0aGVyIHRocm91Z2ggdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4sIGRldmFzdGF0ZSB0aGVpciBsYW5kcywgYW5kIGF0dGFjayB0aGUgY2FtcAogICAgICAgICAgICAgICAgICAgIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+OiBiZWZvcmUgaGUgZG9lcyB0aGF0LCBoZSBpbmZvcm1zIHRoZW0gb2YKICAgICAgICAgICAgICAgICAgICB3aGF0IGhlIGRlc2lyZXMgdG8gYmUgZG9uZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzNTY5NyIgcmVnPSIgICtTZW5vbmVzIFs2Ljk4Myw0OC40XSAoaW5oYWJpdGVkIHBsYWNlKSwgVm9zZ2VzLCBMb3JyYWluZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2Vub25lcyA8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4gd2VyZSBzdGltdWxhdGVkIGJ5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY29uc2Npb3VzbmVzcyBvZiBndWlsdCwgb24gdGhlIG90aGVyIHNpZGUgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVydmlpPC9uYW1lPiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXR1Y2k8L25hbWU+IHdlcmUgcHJlcGFyaW5nIHdhciBhZ2FpbnN0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgYW5kIHRoYXQgZm9yY2VzIG9mIHZvbHVudGVlcnMgd291bGQgbm90IGJlIHdhbnRpbmcgdG8gaGltIGlmCiAgICAgICAgICAgICAgICAgICAgaGUgYmVnYW4gdG8gYWR2YW5jZSBmcm9tIGhpcyBvd24gdGVycml0b3JpZXMsIGhlIHByb2NsYWltcyBhbiBhcm1lZCBjb3VuY2lsCiAgICAgICAgICAgICAgICAgICAgKHRoaXMgYWNjb3JkaW5nIHRvIHRoZSBjdXN0b20gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbWVuY2VtZW50IG9mIHdhcikgYXQgd2hpY2gsIGJ5IGEgY29tbW9uIGxhdywgYWxsIHRoZSB5b3V0aCB3ZXJlIHdvbnQgdG8KICAgICAgICAgICAgICAgICAgICBhc3NlbWJsZSBpbiBhcm1zLCB3aG9ldmVyIG9mIHRoZW0gY29tZXMgbGFzdCBpcyBraWxsZWQgaW4gdGhlIHNpZ2h0IG9mIHRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5IGFmdGVyIGJlaW5nIHJhY2tlZCB3aXRoIGV2ZXJ5IHRvcnR1cmUuIEluIHRoYXQgY291bmNpbCBoZSBkZWNsYXJlcwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpbmdldG9yaXg8L25hbWU+LCB0aGUgbGVhZGVyIG9mIHRoZSBvdGhlciBmYWN0aW9uLCBoaXMgb3duIHNvbi1pbi1sYXcKICAgICAgICAgICAgICAgICAgICAod2hvbSB3ZSBoYXZlIGFib3ZlIG1lbnRpb25lZCwgYXMgaGF2aW5nIGVtYnJhY2VkIHRoZSBwcm90ZWN0aW9uIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYW5kIG5ldmVyIGhhdmluZyBkZXNlcnRlZCBoaW0pIGFuIGVuZW15IGFuZAogICAgICAgICAgICAgICAgICAgIGNvbmZpc2NhdGVzIGhpcyBwcm9wZXJ0eS4gV2hlbiB0aGVzZSB0aGluZ3Mgd2VyZSBmaW5pc2hlZCwgaGUgYXNzZXJ0cyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VuY2lsIHRoYXQgaGUsIGludml0ZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzNTY5NyIgcmVnPSIgICtTZW5vbmVzIFs2Ljk4Myw0OC40XSAoaW5oYWJpdGVkIHBsYWNlKSwgVm9zZ2VzLCBMb3JyYWluZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2Vub25lcyA8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4sIGFuZCBzZXZlcmFsIG90aGVyIHN0YXRlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHdhcyBhYm91dCB0byBtYXJjaCB0aGl0aGVyIHRocm91Z2ggdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4sIGRldmFzdGF0ZSB0aGVpciBsYW5kcywgYW5kIGF0dGFjayB0aGUgY2FtcAogICAgICAgICAgICAgICAgICAgIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+OiBiZWZvcmUgaGUgZG9lcyB0aGF0LCBoZSBpbmZvcm1zIHRoZW0gb2YKICAgICAgICAgICAgICAgICAgICB3aGF0IGhlIGRlc2lyZXMgdG8gYmUgZG9uZS4gPC90cmFuc2xhdGlvbj4="
translation['5.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+LCBzaW5jZSBoZSB3YXMgY29uZmluaW5nIGhpbXNlbGYgd2l0aGluIGEgY2FtcAogICAgICAgICAgICAgICAgICAgIHN0cm9uZ2x5IGZvcnRpZmllZCBieSB0aGUgbmF0dXJlIG9mIHRoZSBncm91bmQgYW5kIGJ5IGFydCwgaGFkIG5vIGFwcHJlaGVuc2lvbnMKICAgICAgICAgICAgICAgICAgICBhcyB0byBoaXMgb3duIGFuZCB0aGUgbGVnaW9uJ3MgZGFuZ2VyLCBidXQgd2FzIGRldmlzaW5nIHRoYXQgaGUgbWlnaHQgdGhyb3cgYXdheQogICAgICAgICAgICAgICAgICAgIG5vIG9wcG9ydHVuaXR5IG9mIGNvbmR1Y3RpbmcgdGhlIHdhciBzdWNjZXNzZnVsbHkuIEFjY29yZGluZ2x5LCB0aGUgc3BlZWNoIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5kdXRpb21hcnVzPC9uYW1lPiwgd2hpY2ggaGUgaGFkIGRlbGl2ZXJlZCBpbiB0aGUgY291bmNpbCwgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVlbiBtYWRlIGtub3duIFt0byBoaW1dIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2luZ2V0b3JpeDwvbmFtZT4gYW5kIGhpcyBhbGxpZXMsIGhlIHNlbmRzCiAgICAgICAgICAgICAgICAgICAgbWVzc2VuZ2VycyB0byB0aGUgbmVpZ2hib3Jpbmcgc3RhdGVzIGFuZCBzdW1tb25zIGhvcnNlIGZyb20gYWxsIHF1YXJ0ZXJzOiBoZQogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRzIHRvIHRoZW0gYSBmaXhlZCBkYXkgZm9yIGFzc2VtYmxpbmcuIEluIHRoZSBtZWFuIHRpbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5kdXRpb21hcnVzPC9uYW1lPiwgd2l0aCBhbGwgaGlzIGNhdmFscnksIG5lYXJseSBldmVyeSBkYXkgdXNlZCB0bwogICAgICAgICAgICAgICAgICAgIHBhcmFkZSBjbG9zZSB0byBoaXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5bTGFiaWVudXM8L25hbWU+J10gY2FtcDsgYXQgb25lIHRpbWUsIHRoYXQgaGUgbWlnaHQKICAgICAgICAgICAgICAgICAgICBpbmZvcm0gaGltc2VsZiBvZiB0aGUgc2l0dWF0aW9uIG9mIHRoZSBjYW1wOyBhdCBhbm90aGVyIHRpbWUsIGZvciB0aGUgcHVycG9zZSBvZgogICAgICAgICAgICAgICAgICAgIGNvbmZlcnJpbmcgd2l0aCBvciBvZiBpbnRpbWlkYXRpbmcgaGltLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGNvbmZpbmVkIGhpcyBtZW4gd2l0aGluIHRoZSBmb3J0aWZpY2F0aW9ucywgYW5kIHByb21vdGVkIHRoZSBlbmVteSdzIGJlbGllZiBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBmZWFyIGJ5IHdoYXRldmVyIG1ldGhvZHMgaGUgY291bGQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiwgc2luY2UgaGUgd2FzIGNvbmZpbmluZyBoaW1zZWxmIHdpdGhpbiBhIGNhbXAKICAgICAgICAgICAgICAgICAgICBzdHJvbmdseSBmb3J0aWZpZWQgYnkgdGhlIG5hdHVyZSBvZiB0aGUgZ3JvdW5kIGFuZCBieSBhcnQsIGhhZCBubyBhcHByZWhlbnNpb25zCiAgICAgICAgICAgICAgICAgICAgYXMgdG8gaGlzIG93biBhbmQgdGhlIGxlZ2lvbidzIGRhbmdlciwgYnV0IHdhcyBkZXZpc2luZyB0aGF0IGhlIG1pZ2h0IHRocm93IGF3YXkKICAgICAgICAgICAgICAgICAgICBubyBvcHBvcnR1bml0eSBvZiBjb25kdWN0aW5nIHRoZSB3YXIgc3VjY2Vzc2Z1bGx5LiBBY2NvcmRpbmdseSwgdGhlIHNwZWVjaCBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkluZHV0aW9tYXJ1czwvbmFtZT4sIHdoaWNoIGhlIGhhZCBkZWxpdmVyZWQgaW4gdGhlIGNvdW5jaWwsIGhhdmluZwogICAgICAgICAgICAgICAgICAgIGJlZW4gbWFkZSBrbm93biBbdG8gaGltXSBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpbmdldG9yaXg8L25hbWU+IGFuZCBoaXMgYWxsaWVzLCBoZSBzZW5kcwogICAgICAgICAgICAgICAgICAgIG1lc3NlbmdlcnMgdG8gdGhlIG5laWdoYm9yaW5nIHN0YXRlcyBhbmQgc3VtbW9ucyBob3JzZSBmcm9tIGFsbCBxdWFydGVyczogaGUKICAgICAgICAgICAgICAgICAgICBhcHBvaW50cyB0byB0aGVtIGEgZml4ZWQgZGF5IGZvciBhc3NlbWJsaW5nLiBJbiB0aGUgbWVhbiB0aW1lLAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkluZHV0aW9tYXJ1czwvbmFtZT4sIHdpdGggYWxsIGhpcyBjYXZhbHJ5LCBuZWFybHkgZXZlcnkgZGF5IHVzZWQgdG8KICAgICAgICAgICAgICAgICAgICBwYXJhZGUgY2xvc2UgdG8gaGlzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+W0xhYmllbnVzPC9uYW1lPiddIGNhbXA7IGF0IG9uZSB0aW1lLCB0aGF0IGhlIG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgaW5mb3JtIGhpbXNlbGYgb2YgdGhlIHNpdHVhdGlvbiBvZiB0aGUgY2FtcDsgYXQgYW5vdGhlciB0aW1lLCBmb3IgdGhlIHB1cnBvc2Ugb2YKICAgICAgICAgICAgICAgICAgICBjb25mZXJyaW5nIHdpdGggb3Igb2YgaW50aW1pZGF0aW5nIGhpbS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBjb25maW5lZCBoaXMgbWVuIHdpdGhpbiB0aGUgZm9ydGlmaWNhdGlvbnMsIGFuZCBwcm9tb3RlZCB0aGUgZW5lbXkncyBiZWxpZWYgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgZmVhciBieSB3aGF0ZXZlciBtZXRob2RzIGhlIGNvdWxkLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.58'] = ""
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj48bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGV4cGVjdGluZyBmb3IgbWFueSByZWFzb25zIGEgZ3JlYXRlciBjb21tb3Rpb24KICAgICAgICAgICAgICAgICAgICBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHJlc29sdmVzIHRvIGhvbGQgYSBsZXZ5IGJ5IHRoZSBtZWFucyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPk0uCiAgICAgICAgICAgICAgICAgICAgICAgIFNpbGFudXMgQy4gQW50aXN0aXVzIFJlZ2ludXM8L25hbWU+LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5ULgogICAgICAgICAgICAgICAgICAgIFNleHRpdXM8L25hbWU+LCBoaXMgbGlldXRlbmFudHM6IGF0IHRoZSBzYW1lIHRpbWUgaGUgcmVxdWVzdGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q24uCiAgICAgICAgICAgICAgICAgICAgICAgIFBvbXBleTwvbmFtZT4sIHRoZSBwcm9jb25zdWwsIHRoYXQgc2luY2UgaGUgd2FzIHJlbWFpbmluZyBuZWFyIHRoZSBjaXR5CiAgICAgICAgICAgICAgICAgICAgaW52ZXN0ZWQgd2l0aCBtaWxpdGFyeSBjb21tYW5kIGZvciB0aGUgaW50ZXJlc3RzIG9mIHRoZSBjb21tb253ZWFsdGgsIGhlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZCB0aG9zZSBtZW4gd2hvbSB3aGVuIGNvbnN1bCBbPGRhdGUgYXV0aG5hbWU9Ii01NSIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTU1Ij41NTwvZGF0ZT4gQi5DLl0gaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgbGV2aWVkIGJ5IHRoZSBtaWxpdGFyeSBvYXRoIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGxhY2UiPkNpc2FscGluZSBHYXVsPC9uYW1lPiwgdG8gam9pbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIHJlc3BlY3RpdmUgY29ycHMsIGFuZCB0byBwcm9jZWVkIHRvIGhpbTsgdGhpbmtpbmcgaXQgb2YgZ3JlYXQgaW1wb3J0YW5jZSwKICAgICAgICAgICAgICAgICAgICBhcyBmYXIgYXMgcmVnYXJkZWQgdGhlIG9waW5pb24gd2hpY2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gd291bGQKICAgICAgICAgICAgICAgICAgICBlbnRlcnRhaW4gZm9yIHRoZSBmdXR1cmUsIHRoYXQgdGhhdCB0aGUgcmVzb3VyY2VzIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHNob3VsZCBhcHBlYXIgc28gZ3JlYXQgdGhhdCBpZiBhbnkgbG9zcyBzaG91bGQgYmUgc3VzdGFpbmVkIGluIHdhciwgbm90IG9ubHkKICAgICAgICAgICAgICAgICAgICBjb3VsZCBpdCBiZSByZXBhaXJlZCBpbiBhIHNob3J0IHRpbWUsIGJ1dCBsaWtld2lzZSBiZSBmdXJ0aGVyIHN1cHBsaWVkIGJ5IHN0aWxsCiAgICAgICAgICAgICAgICAgICAgbGFyZ2VyIGZvcmNlcy4gQW5kIHdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L25hbWU+IGhhZCBncmFudGVkIHRoaXMgdG8gdGhlIGludGVyZXN0cyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBjb21tb253ZWFsdGggYW5kIHRoZSBjbGFpbXMgb2YgZnJpZW5kc2hpcCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHF1aWNrbHkgY29tcGxldGVkIHRoZSBsZXZ5IGJ5IG1lYW5zIG9mIGhpcyBsaWV1dGVuYW50cywgYWZ0ZXIgdGhyZWUKICAgICAgICAgICAgICAgICAgICByZWdpbWVudHMgaGFkIGJlZW4gYm90aCBmb3JtZWQgYW5kIGJyb3VnaHQgdG8gaGltIGJlZm9yZSB0aGUgd2ludGVyIFtoYWRdCiAgICAgICAgICAgICAgICAgICAgZXhwaXJlZCwgYW5kIHRoZSBudW1iZXIgb2YgdGhvc2UgY29ob3J0cyB3aGljaCBoZSBoYWQgbG9zdCB1bmRlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlEuIFRpdHVyaXVzPC9uYW1lPiBoYWQgYmVlbiBkb3VibGVkLCB0YXVnaHQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sIGJvdGggYnkgaGlzIGRpc3BhdGNoIGFuZCBieSBoaXMgZm9yY2VzIHdoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGlzY2lwbGluZSBhbmQgdGhlIHBvd2VyIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBjb3VsZAogICAgICAgICAgICAgICAgICAgIGFjY29tcGxpc2guIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgZXhwZWN0aW5nIGZvciBtYW55IHJlYXNvbnMgYSBncmVhdGVyIGNvbW1vdGlvbgogICAgICAgICAgICAgICAgICAgIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgcmVzb2x2ZXMgdG8gaG9sZCBhIGxldnkgYnkgdGhlIG1lYW5zIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TS4KICAgICAgICAgICAgICAgICAgICAgICAgU2lsYW51cyBDLiBBbnRpc3RpdXMgUmVnaW51czwvbmFtZT4sIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlQuCiAgICAgICAgICAgICAgICAgICAgU2V4dGl1czwvbmFtZT4sIGhpcyBsaWV1dGVuYW50czogYXQgdGhlIHNhbWUgdGltZSBoZSByZXF1ZXN0ZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Dbi4KICAgICAgICAgICAgICAgICAgICAgICAgUG9tcGV5PC9uYW1lPiwgdGhlIHByb2NvbnN1bCwgdGhhdCBzaW5jZSBoZSB3YXMgcmVtYWluaW5nIG5lYXIgdGhlIGNpdHkKICAgICAgICAgICAgICAgICAgICBpbnZlc3RlZCB3aXRoIG1pbGl0YXJ5IGNvbW1hbmQgZm9yIHRoZSBpbnRlcmVzdHMgb2YgdGhlIGNvbW1vbndlYWx0aCwgaGUgd291bGQKICAgICAgICAgICAgICAgICAgICBjb21tYW5kIHRob3NlIG1lbiB3aG9tIHdoZW4gY29uc3VsIFs8ZGF0ZSBhdXRobmFtZT0iLTU1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNTUiPjU1PC9kYXRlPiBCLkMuXSBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBsZXZpZWQgYnkgdGhlIG1pbGl0YXJ5IG9hdGggaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwbGFjZSI+Q2lzYWxwaW5lIEdhdWw8L25hbWU+LCB0byBqb2luCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcmVzcGVjdGl2ZSBjb3JwcywgYW5kIHRvIHByb2NlZWQgdG8gaGltOyB0aGlua2luZyBpdCBvZiBncmVhdCBpbXBvcnRhbmNlLAogICAgICAgICAgICAgICAgICAgIGFzIGZhciBhcyByZWdhcmRlZCB0aGUgb3BpbmlvbiB3aGljaCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB3b3VsZAogICAgICAgICAgICAgICAgICAgIGVudGVydGFpbiBmb3IgdGhlIGZ1dHVyZSwgdGhhdCB0aGF0IHRoZSByZXNvdXJjZXMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIiByZWc9Ikl0YWx5IFsxMi44MzMsNDIuODMzXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+SXRhbHk8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGFwcGVhciBzbyBncmVhdCB0aGF0IGlmIGFueSBsb3NzIHNob3VsZCBiZSBzdXN0YWluZWQgaW4gd2FyLCBub3Qgb25seQogICAgICAgICAgICAgICAgICAgIGNvdWxkIGl0IGJlIHJlcGFpcmVkIGluIGEgc2hvcnQgdGltZSwgYnV0IGxpa2V3aXNlIGJlIGZ1cnRoZXIgc3VwcGxpZWQgYnkgc3RpbGwKICAgICAgICAgICAgICAgICAgICBsYXJnZXIgZm9yY2VzLiBBbmQgd2hlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvbmFtZT4gaGFkIGdyYW50ZWQgdGhpcyB0byB0aGUgaW50ZXJlc3RzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbW1vbndlYWx0aCBhbmQgdGhlIGNsYWltcyBvZiBmcmllbmRzaGlwLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBoYXZpbmcgcXVpY2tseSBjb21wbGV0ZWQgdGhlIGxldnkgYnkgbWVhbnMgb2YgaGlzIGxpZXV0ZW5hbnRzLCBhZnRlciB0aHJlZQogICAgICAgICAgICAgICAgICAgIHJlZ2ltZW50cyBoYWQgYmVlbiBib3RoIGZvcm1lZCBhbmQgYnJvdWdodCB0byBoaW0gYmVmb3JlIHRoZSB3aW50ZXIgW2hhZF0KICAgICAgICAgICAgICAgICAgICBleHBpcmVkLCBhbmQgdGhlIG51bWJlciBvZiB0aG9zZSBjb2hvcnRzIHdoaWNoIGhlIGhhZCBsb3N0IHVuZGVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+US4gVGl0dXJpdXM8L25hbWU+IGhhZCBiZWVuIGRvdWJsZWQsIHRhdWdodCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgYm90aCBieSBoaXMgZGlzcGF0Y2ggYW5kIGJ5IGhpcyBmb3JjZXMgd2hhdCB0aGUKICAgICAgICAgICAgICAgICAgICBkaXNjaXBsaW5lIGFuZCB0aGUgcG93ZXIgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgYWNjb21wbGlzaC4gPC90cmFuc2xhdGlvbj4="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbmR1dGlvbWFydXM8L25hbWU+IGhhdmluZyBiZWVuIHNsYWluLCBhcyB3ZSBoYXZlIHN0YXRlZCwgdGhlIGdvdmVybm1lbnQKICAgICAgICAgICAgICAgICAgICB3YXMgY29uZmVycmVkIHVwb24gaGlzIHJlbGF0aXZlcyBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPi4gVGhleSBjZWFzZSBub3QgdG8gaW1wb3J0dW5lIHRoZSBuZWlnaGJvcmluZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gYW5kIHRvIHByb21pc2UgdGhlbSBtb25leTogd2hlbiB0aGV5IGNvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIG9idGFpbiBbdGhlaXIgb2JqZWN0XSBmcm9tIHRob3NlIG5lYXJlc3QgdGhlbSwgdGhleSB0cnkgdGhvc2UgbW9yZSByZW1vdGUuCiAgICAgICAgICAgICAgICAgICAgSGF2aW5nIGZvdW5kIHNvbWUgc3RhdGVzIHdpbGxpbmcgdG8gYWNjZWRlIHRvIHRoZWlyIHdpc2hlcywgdGhleSBlbnRlciBpbnRvIGEKICAgICAgICAgICAgICAgICAgICBjb21wYWN0IHdpdGggdGhlbSBieSBhIG11dHVhbCBvYXRoLCBhbmQgZ2l2ZSBob3N0YWdlcyBhcyBhIHNlY3VyaXR5IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBtb25leTogdGhleSBhdHRhY2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4gdG8gdGhlbSBieSBhbiBhbGxpYW5jZSBhbmQgY29uZmVkZXJhY3kuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb24gYmVpbmcgaW5mb3JtZWQgb2YgdGhlaXIgYWN0cywgc2luY2UgaGUKICAgICAgICAgICAgICAgICAgICBzYXcgdGhhdCB3YXIgd2FzIGJlaW5nIHByZXBhcmVkIG9uIGFsbCBzaWRlcywgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFkdWF0dWNpPC9uYW1lPiwgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVuYXBpaTwvbmFtZT4sIHdpdGggdGhlIGFkZGl0aW9uIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gb24gdGhpcyBzaWRlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gd2VyZSB1bmRlciBhcm1zLCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMzU2OTciIHJlZz0iICArU2Vub25lcyBbNi45ODMsNDguNF0gKGluaGFiaXRlZCBwbGFjZSksIFZvc2dlcywgTG9ycmFpbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlNlbm9uZXMgPC9uYW1lPiBkaWQgbm90IGFzc2VtYmxlIGFjY29yZGluZyB0byBoaXMgY29tbWFuZCwgYW5kIHdlcmUKICAgICAgICAgICAgICAgICAgICBjb25jZXJ0aW5nIG1lYXN1cmVzIHdpdGggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FybnV0ZXM8L25hbWU+IGFuZCB0aGUgbmVpZ2hib3Jpbmcgc3RhdGVzLAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiB3ZXJlIGltcG9ydHVuZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4gaW4gZnJlcXVlbnQgZW1iYXNzaWVzLCB0aG91Z2h0IHRoYXQgaGUgb3VnaHQgdG8gdGFrZQogICAgICAgICAgICAgICAgICAgIG1lYXN1cmVzIGZvciB0aGUgd2FyIGVhcmxpZXIgW3RoYW4gdXN1YWxdLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkluZHV0aW9tYXJ1czwvbmFtZT4gaGF2aW5nIGJlZW4gc2xhaW4sIGFzIHdlIGhhdmUgc3RhdGVkLCB0aGUgZ292ZXJubWVudAogICAgICAgICAgICAgICAgICAgIHdhcyBjb25mZXJyZWQgdXBvbiBoaXMgcmVsYXRpdmVzIGJ5IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NDciIHJlZz0iICArVHJpZXIgWzYuNjUsNDkuNzVdIChpbmhhYml0ZWQgcGxhY2UpLCBUcmllciwgUmhlaW5sYW5kLVBmYWx6LCBHZXJtYW55LCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+VHJldmlyaSA8L25hbWU+LiBUaGV5IGNlYXNlIG5vdCB0byBpbXBvcnR1bmUgdGhlIG5laWdoYm9yaW5nIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBhbmQgdG8gcHJvbWlzZSB0aGVtIG1vbmV5OiB3aGVuIHRoZXkgY291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgb2J0YWluIFt0aGVpciBvYmplY3RdIGZyb20gdGhvc2UgbmVhcmVzdCB0aGVtLCB0aGV5IHRyeSB0aG9zZSBtb3JlIHJlbW90ZS4KICAgICAgICAgICAgICAgICAgICBIYXZpbmcgZm91bmQgc29tZSBzdGF0ZXMgd2lsbGluZyB0byBhY2NlZGUgdG8gdGhlaXIgd2lzaGVzLCB0aGV5IGVudGVyIGludG8gYQogICAgICAgICAgICAgICAgICAgIGNvbXBhY3Qgd2l0aCB0aGVtIGJ5IGEgbXV0dWFsIG9hdGgsIGFuZCBnaXZlIGhvc3RhZ2VzIGFzIGEgc2VjdXJpdHkgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIG1vbmV5OiB0aGV5IGF0dGFjaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiB0byB0aGVtIGJ5IGFuIGFsbGlhbmNlIGFuZCBjb25mZWRlcmFjeS4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBvbiBiZWluZyBpbmZvcm1lZCBvZiB0aGVpciBhY3RzLCBzaW5jZSBoZQogICAgICAgICAgICAgICAgICAgIHNhdyB0aGF0IHdhciB3YXMgYmVpbmcgcHJlcGFyZWQgb24gYWxsIHNpZGVzLCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXR1Y2k8L25hbWU+LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZW5hcGlpPC9uYW1lPiwgd2l0aCB0aGUgYWRkaXRpb24gb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBvbiB0aGlzIHNpZGUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiB3ZXJlIHVuZGVyIGFybXMsIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzNTY5NyIgcmVnPSIgICtTZW5vbmVzIFs2Ljk4Myw0OC40XSAoaW5oYWJpdGVkIHBsYWNlKSwgVm9zZ2VzLCBMb3JyYWluZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2Vub25lcyA8L25hbWU+IGRpZCBub3QgYXNzZW1ibGUgYWNjb3JkaW5nIHRvIGhpcyBjb21tYW5kLCBhbmQgd2VyZQogICAgICAgICAgICAgICAgICAgIGNvbmNlcnRpbmcgbWVhc3VyZXMgd2l0aCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4gYW5kIHRoZSBuZWlnaGJvcmluZyBzdGF0ZXMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHdlcmUgaW1wb3J0dW5lZCBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiBpbiBmcmVxdWVudCBlbWJhc3NpZXMsIHRob3VnaHQgdGhhdCBoZSBvdWdodCB0byB0YWtlCiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZXMgZm9yIHRoZSB3YXIgZWFybGllciBbdGhhbiB1c3VhbF0uIDwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWNjb3JkaW5nbHksIHdoaWxlIHRoZSB3aW50ZXIgd2FzIG5vdCB5ZXQgZW5kZWQsIGhhdmluZyBjb25jZW50cmF0ZWQgdGhlIGZvdXIKICAgICAgICAgICAgICAgICAgICBuZWFyZXN0IGxlZ2lvbnMsIGhlIG1hcmNoZWQgdW5leHBlY3RlZGx5IGludG8gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sIGFuZCBiZWZvcmUgdGhleSBjb3VsZCBlaXRoZXIgYXNzZW1ibGUgb3IgcmV0cmVhdCwgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBjYXB0dXJpbmcgYSBsYXJnZSBudW1iZXIgb2YgY2F0dGxlIGFuZCBvZiBtZW4sIGFuZCB3YXN0aW5nIHRoZWlyIGxhbmRzIGFuZAogICAgICAgICAgICAgICAgICAgIGdpdmluZyB1cCB0aGF0IGJvb3R5IHRvIHRoZSBzb2xkaWVycywgY29tcGVsbGVkIHRoZW0gdG8gZW50ZXIgaW50byBhIHN1cnJlbmRlcgogICAgICAgICAgICAgICAgICAgIGFuZCBnaXZlIGhpbSBob3N0YWdlcy4gVGhhdCBidXNpbmVzcyBoYXZpbmcgYmVlbiBzcGVlZGlseSBleGVjdXRlZCwgaGUgYWdhaW4gbGVkCiAgICAgICAgICAgICAgICAgICAgaGlzIGxlZ2lvbnMgYmFjayBpbnRvIHdpbnRlci1xdWFydGVycy4gSGF2aW5nIHByb2NsYWltZWQgYSBjb3VuY2lsIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBpbiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzcHJpbmcsIGFzIGhlIGhhZCBiZWVuIGFjY3VzdG9tZWQgW3RvCiAgICAgICAgICAgICAgICAgICAgZG9dLCB3aGVuIHRoZSBkZXB1dGllcyBmcm9tIHRoZSByZXN0LCBleGNlcHQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzNTY5NyIgcmVnPSIgICtTZW5vbmVzIFs2Ljk4Myw0OC40XSAoaW5oYWJpdGVkIHBsYWNlKSwgVm9zZ2VzLCBMb3JyYWluZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2Vub25lcyA8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4sIGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiwgaGFkIGNvbWUsIGp1ZGdpbmcgdGhpcyB0byBiZSB0aGUgY29tbWVuY2VtZW50IG9mIHdhciBhbmQKICAgICAgICAgICAgICAgICAgICByZXZvbHQsIHRoYXQgaGUgbWlnaHQgYXBwZWFyIHRvIGNvbnNpZGVyIGFsbCB0aGluZ3Mgb2YgbGVzcyBjb25zZXF1ZW5jZSBbdGhhbgogICAgICAgICAgICAgICAgICAgIHRoYXQgd2FyXSwgaGUgdHJhbnNmZXJzIHRoZSBjb3VuY2lsIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODAzOCIgcmVnPSIgICtQYXJpcyBbMi4zMzMsNDguODY2XSAoaW5oYWJpdGVkIHBsYWNlKSwgRGVwYXJ0bWVudCBkZSBWaWxsZSBkZSBQYXJpcywgSWxlLWRlLUZyYW5jZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+THV0ZXRpYSA8L25hbWU+IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgwMzgiIHJlZz0iICArUGFyaXMgWzIuMzMzLDQ4Ljg2Nl0gKGluaGFiaXRlZCBwbGFjZSksIERlcGFydG1lbnQgZGUgVmlsbGUgZGUgUGFyaXMsIElsZS1kZS1GcmFuY2UsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlBhcmlzaWkgPC9uYW1lPi4gVGhlc2Ugd2VyZSBhZGphY2VudCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDM1Njk3IiByZWc9IiAgK1Nlbm9uZXMgWzYuOTgzLDQ4LjRdIChpbmhhYml0ZWQgcGxhY2UpLCBWb3NnZXMsIExvcnJhaW5lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5TZW5vbmVzIDwvbmFtZT4sIGFuZCBoYWQgdW5pdGVkIHRoZWlyIHN0YXRlIHRvIHRoZW0gZHVyaW5nIHRoZSBtZW1vcnkgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBmYXRoZXJzLCBidXQgd2VyZSB0aG91Z2h0IHRvIGhhdmUgbm8gcGFydCBpbiB0aGUgcHJlc2VudCBwbG90LiBIYXZpbmcKICAgICAgICAgICAgICAgICAgICBwcm9jbGFpbWVkIHRoaXMgZnJvbSB0aGUgdHJpYnVuYWwsIGhlIGFkdmFuY2VzIHRoZSBzYW1lIGRheSB0b3dhcmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzNTY5NyIgcmVnPSIgICtTZW5vbmVzIFs2Ljk4Myw0OC40XSAoaW5oYWJpdGVkIHBsYWNlKSwgVm9zZ2VzLCBMb3JyYWluZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2Vub25lcyA8L25hbWU+IHdpdGggaGlzIGxlZ2lvbnMsIGFuZCBhcnJpdmVzIGFtb25nIHRoZW0gYnkgbG9uZyBtYXJjaGVzLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lcnZpaTwvbmFtZT4sIGFuZCBiZWZvcmUgdGhleSBjb3VsZCBlaXRoZXIgYXNzZW1ibGUgb3IgcmV0cmVhdCwgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBjYXB0dXJpbmcgYSBsYXJnZSBudW1iZXIgb2YgY2F0dGxlIGFuZCBvZiBtZW4sIGFuZCB3YXN0aW5nIHRoZWlyIGxhbmRzIGFuZAogICAgICAgICAgICAgICAgICAgIGdpdmluZyB1cCB0aGF0IGJvb3R5IHRvIHRoZSBzb2xkaWVycywgY29tcGVsbGVkIHRoZW0gdG8gZW50ZXIgaW50byBhIHN1cnJlbmRlcgogICAgICAgICAgICAgICAgICAgIGFuZCBnaXZlIGhpbSBob3N0YWdlcy4gVGhhdCBidXNpbmVzcyBoYXZpbmcgYmVlbiBzcGVlZGlseSBleGVjdXRlZCwgaGUgYWdhaW4gbGVkCiAgICAgICAgICAgICAgICAgICAgaGlzIGxlZ2lvbnMgYmFjayBpbnRvIHdpbnRlci1xdWFydGVycy4gSGF2aW5nIHByb2NsYWltZWQgYSBjb3VuY2lsIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBpbiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzcHJpbmcsIGFzIGhlIGhhZCBiZWVuIGFjY3VzdG9tZWQgW3RvCiAgICAgICAgICAgICAgICAgICAgZG9dLCB3aGVuIHRoZSBkZXB1dGllcyBmcm9tIHRoZSByZXN0LCBleGNlcHQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzNTY5NyIgcmVnPSIgICtTZW5vbmVzIFs2Ljk4Myw0OC40XSAoaW5oYWJpdGVkIHBsYWNlKSwgVm9zZ2VzLCBMb3JyYWluZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2Vub25lcyA8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4sIGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiwgaGFkIGNvbWUsIGp1ZGdpbmcgdGhpcyB0byBiZSB0aGUgY29tbWVuY2VtZW50IG9mIHdhciBhbmQKICAgICAgICAgICAgICAgICAgICByZXZvbHQsIHRoYXQgaGUgbWlnaHQgYXBwZWFyIHRvIGNvbnNpZGVyIGFsbCB0aGluZ3Mgb2YgbGVzcyBjb25zZXF1ZW5jZSBbdGhhbgogICAgICAgICAgICAgICAgICAgIHRoYXQgd2FyXSwgaGUgdHJhbnNmZXJzIHRoZSBjb3VuY2lsIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODAzOCIgcmVnPSIgICtQYXJpcyBbMi4zMzMsNDguODY2XSAoaW5oYWJpdGVkIHBsYWNlKSwgRGVwYXJ0bWVudCBkZSBWaWxsZSBkZSBQYXJpcywgSWxlLWRlLUZyYW5jZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+THV0ZXRpYSA8L25hbWU+IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgwMzgiIHJlZz0iICArUGFyaXMgWzIuMzMzLDQ4Ljg2Nl0gKGluaGFiaXRlZCBwbGFjZSksIERlcGFydG1lbnQgZGUgVmlsbGUgZGUgUGFyaXMsIElsZS1kZS1GcmFuY2UsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlBhcmlzaWkgPC9uYW1lPi4gVGhlc2Ugd2VyZSBhZGphY2VudCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDM1Njk3IiByZWc9IiAgK1Nlbm9uZXMgWzYuOTgzLDQ4LjRdIChpbmhhYml0ZWQgcGxhY2UpLCBWb3NnZXMsIExvcnJhaW5lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5TZW5vbmVzIDwvbmFtZT4sIGFuZCBoYWQgdW5pdGVkIHRoZWlyIHN0YXRlIHRvIHRoZW0gZHVyaW5nIHRoZSBtZW1vcnkgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBmYXRoZXJzLCBidXQgd2VyZSB0aG91Z2h0IHRvIGhhdmUgbm8gcGFydCBpbiB0aGUgcHJlc2VudCBwbG90LiBIYXZpbmcKICAgICAgICAgICAgICAgICAgICBwcm9jbGFpbWVkIHRoaXMgZnJvbSB0aGUgdHJpYnVuYWwsIGhlIGFkdmFuY2VzIHRoZSBzYW1lIGRheSB0b3dhcmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzNTY5NyIgcmVnPSIgICtTZW5vbmVzIFs2Ljk4Myw0OC40XSAoaW5oYWJpdGVkIHBsYWNlKSwgVm9zZ2VzLCBMb3JyYWluZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2Vub25lcyA8L25hbWU+IHdpdGggaGlzIGxlZ2lvbnMsIGFuZCBhcnJpdmVzIGFtb25nIHRoZW0gYnkgbG9uZyBtYXJjaGVzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BY2NvPC9uYW1lPiwgd2hvIGhhZCBiZWVuIHRoZSBhdXRob3Igb2YgdGhhdCBlbnRlcnByaXNlLCBvbiBiZWluZyBpbmZvcm1lZAogICAgICAgICAgICAgICAgICAgIG9mIGhpcyBhcnJpdmFsLCBvcmRlcnMgdGhlIHBlb3BsZSB0byBhc3NlbWJsZSBpbiB0aGUgdG93bnM7IHRvIHRoZW0sIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdGluZyB0aGlzLCBhbmQgYmVmb3JlIGl0IGNvdWxkIGJlIGFjY29tcGxpc2hlZCwgbmV3cyBpcyBicm91Z2h0IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGFyZSBjbG9zZSBhdCBoYW5kOiB0aHJvdWdoIG5lY2Vzc2l0eSB0aGV5CiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBvdmVyIHRoZWlyIGRlc2lnbiBhbmQgc2VuZCBlbWJhc3NhZG9ycyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHB1cnBvc2Ugb2YgaW1wbG9yaW5nIHBhcmRvbjsgdGhleSBtYWtlIGFkdmFuY2VzIHRvIGhpbSB0aHJvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgd2hvc2Ugc3RhdGUgd2FzIGZyb20gYW5jaWVudCB0aW1lcyB1bmRlciB0aGUgcHJvdGVjdGlvbgogICAgICAgICAgICAgICAgICAgIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiIHJlZz0iICArUm9tZSBbMTIuNDgzMyw0MS45XSAoUGVyc2V1cykgIiB0eXBlPSJwbGFjZSI+Um9tZSA8L25hbWU+LiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gcmVhZGlseSBncmFudHMgdGhlbSBwYXJkb24sCiAgICAgICAgICAgICAgICAgICAgYW5kIHJlY2VpdmVzIHRoZWlyIGV4Y3VzZSwgYXQgdGhlIHJlcXVlc3Qgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCBiZWNhdXNlIGhlCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGF0IHRoZSBzdW1tZXIgc2Vhc29uIHdhcyBvbmUgZm9yIGFuIGltcGVuZGluZyB3YXIsIG5vdCBmb3IgYW4KICAgICAgICAgICAgICAgICAgICBpbnZlc3RpZ2F0aW9uLiBIYXZpbmcgaW1wb3NlZCBvbmUgaHVuZHJlZCBob3N0YWdlcywgaGUgZGVsaXZlcnMgdGhlc2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IHRvIGJlIGhlbGQgaW4gY2hhcmdlIGJ5IHRoZW0uIFRvIHRoZSBzYW1lIHBsYWNlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPiBzZW5kIGVtYmFzc2Fkb3JzIGFuZCBob3N0YWdlcywgZW1wbG95aW5nIGFzIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbWVkaWF0b3JzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4sIHVuZGVyIHdob3NlIHByb3RlY3Rpb24gdGhleSB3ZXJlOgogICAgICAgICAgICAgICAgICAgIHRoZXkgcmVjZWl2ZSB0aGUgc2FtZSBhbnN3ZXJzLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gY29uY2x1ZGVzIHRoZQogICAgICAgICAgICAgICAgICAgIGNvdW5jaWwgYW5kIGltcG9zZXMgYSBsZXZ5IG9mIGNhdmFscnkgb24gdGhlIHN0YXRlcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BY2NvPC9uYW1lPiwgd2hvIGhhZCBiZWVuIHRoZSBhdXRob3Igb2YgdGhhdCBlbnRlcnByaXNlLCBvbiBiZWluZyBpbmZvcm1lZAogICAgICAgICAgICAgICAgICAgIG9mIGhpcyBhcnJpdmFsLCBvcmRlcnMgdGhlIHBlb3BsZSB0byBhc3NlbWJsZSBpbiB0aGUgdG93bnM7IHRvIHRoZW0sIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdGluZyB0aGlzLCBhbmQgYmVmb3JlIGl0IGNvdWxkIGJlIGFjY29tcGxpc2hlZCwgbmV3cyBpcyBicm91Z2h0IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGFyZSBjbG9zZSBhdCBoYW5kOiB0aHJvdWdoIG5lY2Vzc2l0eSB0aGV5CiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBvdmVyIHRoZWlyIGRlc2lnbiBhbmQgc2VuZCBlbWJhc3NhZG9ycyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHB1cnBvc2Ugb2YgaW1wbG9yaW5nIHBhcmRvbjsgdGhleSBtYWtlIGFkdmFuY2VzIHRvIGhpbSB0aHJvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgd2hvc2Ugc3RhdGUgd2FzIGZyb20gYW5jaWVudCB0aW1lcyB1bmRlciB0aGUgcHJvdGVjdGlvbgogICAgICAgICAgICAgICAgICAgIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiIHJlZz0iICArUm9tZSBbMTIuNDgzMyw0MS45XSAoUGVyc2V1cykgIiB0eXBlPSJwbGFjZSI+Um9tZSA8L25hbWU+LiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gcmVhZGlseSBncmFudHMgdGhlbSBwYXJkb24sCiAgICAgICAgICAgICAgICAgICAgYW5kIHJlY2VpdmVzIHRoZWlyIGV4Y3VzZSwgYXQgdGhlIHJlcXVlc3Qgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCBiZWNhdXNlIGhlCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGF0IHRoZSBzdW1tZXIgc2Vhc29uIHdhcyBvbmUgZm9yIGFuIGltcGVuZGluZyB3YXIsIG5vdCBmb3IgYW4KICAgICAgICAgICAgICAgICAgICBpbnZlc3RpZ2F0aW9uLiBIYXZpbmcgaW1wb3NlZCBvbmUgaHVuZHJlZCBob3N0YWdlcywgaGUgZGVsaXZlcnMgdGhlc2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IHRvIGJlIGhlbGQgaW4gY2hhcmdlIGJ5IHRoZW0uIFRvIHRoZSBzYW1lIHBsYWNlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPiBzZW5kIGVtYmFzc2Fkb3JzIGFuZCBob3N0YWdlcywgZW1wbG95aW5nIGFzIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbWVkaWF0b3JzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4sIHVuZGVyIHdob3NlIHByb3RlY3Rpb24gdGhleSB3ZXJlOgogICAgICAgICAgICAgICAgICAgIHRoZXkgcmVjZWl2ZSB0aGUgc2FtZSBhbnN3ZXJzLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gY29uY2x1ZGVzIHRoZQogICAgICAgICAgICAgICAgICAgIGNvdW5jaWwgYW5kIGltcG9zZXMgYSBsZXZ5IG9mIGNhdmFscnkgb24gdGhlIHN0YXRlcy4gPC90cmFuc2xhdGlvbj4="
translation['6.5'] = ""
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgZGl2aWRlZCBoaXMgZm9yY2VzIHdpdGggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DLiBGYWJpdXM8L25hbWU+LCBoaXMgbGlldXRlbmFudCwgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TS4gQ3Jhc3N1czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBoaXMgcXVlc3RvciwgYW5kIGhhdmluZyBoYXN0aWx5IGNvbnN0cnVjdGVkIHNvbWUgYnJpZGdlcywgZW50ZXJzIHRoZWlyIGNvdW50cnkKICAgICAgICAgICAgICAgICAgICBpbiB0aHJlZSBkaXZpc2lvbnMsIGJ1cm5zIHRoZWlyIGhvdXNlcyBhbmQgdmlsbGFnZXMsIGFuZCBnZXRzIHBvc3Nlc3Npb24gb2YgYQogICAgICAgICAgICAgICAgICAgIGxhcmdlIG51bWJlciBvZiBjYXR0bGUgYW5kIG1lbi4gQ29uc3RyYWluZWQgYnkgdGhlc2UgY2lyY3Vtc3RhbmNlcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZW5hcGlpPC9uYW1lPiBzZW5kIGVtYmFzc2Fkb3JzIHRvIGhpbSBmb3IgdGhlIHB1cnBvc2Ugb2Ygc3VpbmcgZm9yCiAgICAgICAgICAgICAgICAgICAgcGVhY2UuIEhlLCBhZnRlciByZWNlaXZpbmcgaG9zdGFnZXMsIGFzc3VyZXMgdGhlbSB0aGF0IGhlIHdpbGwgY29uc2lkZXIgdGhlbSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBudW1iZXIgb2YgaGlzIGVuZW1pZXMgaWYgdGhleSBzaGFsbCByZWNlaXZlIHdpdGhpbiB0aGVpciB0ZXJyaXRvcmllcyBlaXRoZXIKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4gb3IgaGlzIGVtYmFzc2Fkb3JzLiBIYXZpbmcgZGV0ZXJtaW5hdGVseSBzZXR0bGVkIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzLCBoZSBsZWZ0IGFtb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lbmFwaWk8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbW1pdXM8L25hbWU+IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkF0cmViYXRpYW48L25hbWU+LCB3aXRoIHNvbWUgY2F2YWxyeSBhcyBhIGd1YXJkOyBoZSBoaW1zZWxmIHByb2NlZWRzCiAgICAgICAgICAgICAgICAgICAgdG93YXJkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NDciIHJlZz0iICArVHJpZXIgWzYuNjUsNDkuNzVdIChpbmhhYml0ZWQgcGxhY2UpLCBUcmllciwgUmhlaW5sYW5kLVBmYWx6LCBHZXJtYW55LCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+VHJldmlyaSA8L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhhdmluZyBkaXZpZGVkIGhpcyBmb3JjZXMgd2l0aCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkMuIEZhYml1czwvbmFtZT4sIGhpcyBsaWV1dGVuYW50LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NLiBDcmFzc3VzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGhpcyBxdWVzdG9yLCBhbmQgaGF2aW5nIGhhc3RpbHkgY29uc3RydWN0ZWQgc29tZSBicmlkZ2VzLCBlbnRlcnMgdGhlaXIgY291bnRyeQogICAgICAgICAgICAgICAgICAgIGluIHRocmVlIGRpdmlzaW9ucywgYnVybnMgdGhlaXIgaG91c2VzIGFuZCB2aWxsYWdlcywgYW5kIGdldHMgcG9zc2Vzc2lvbiBvZiBhCiAgICAgICAgICAgICAgICAgICAgbGFyZ2UgbnVtYmVyIG9mIGNhdHRsZSBhbmQgbWVuLiBDb25zdHJhaW5lZCBieSB0aGVzZSBjaXJjdW1zdGFuY2VzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lbmFwaWk8L25hbWU+IHNlbmQgZW1iYXNzYWRvcnMgdG8gaGltIGZvciB0aGUgcHVycG9zZSBvZiBzdWluZyBmb3IKICAgICAgICAgICAgICAgICAgICBwZWFjZS4gSGUsIGFmdGVyIHJlY2VpdmluZyBob3N0YWdlcywgYXNzdXJlcyB0aGVtIHRoYXQgaGUgd2lsbCBjb25zaWRlciB0aGVtIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIG51bWJlciBvZiBoaXMgZW5lbWllcyBpZiB0aGV5IHNoYWxsIHJlY2VpdmUgd2l0aGluIHRoZWlyIHRlcnJpdG9yaWVzIGVpdGhlcgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiBvciBoaXMgZW1iYXNzYWRvcnMuIEhhdmluZyBkZXRlcm1pbmF0ZWx5IHNldHRsZWQgdGhlc2UKICAgICAgICAgICAgICAgICAgICB0aGluZ3MsIGhlIGxlZnQgYW1vbmcgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVuYXBpaTwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tbWl1czwvbmFtZT4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXRyZWJhdGlhbjwvbmFtZT4sIHdpdGggc29tZSBjYXZhbHJ5IGFzIGEgZ3VhcmQ7IGhlIGhpbXNlbGYgcHJvY2VlZHMKICAgICAgICAgICAgICAgICAgICB0b3dhcmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['6.7'] = ""
translation['6.8'] = ""
translation['6.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBhZnRlciBoZSBjYW1lIGZyb20gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lbmFwaWk8L25hbWU+IGludG8gdGhvc2Ugb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4sIHJlc29sdmVkIGZvciB0d28gcmVhc29ucyB0byBjcm9zcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUKICAgICAgICAgICAgICAgICAgICA8L25hbWU+OyBvbmUgb2Ygd2hpY2ggd2FzLCBiZWNhdXNlIHRoZXkgaGFkIHNlbnQgYXNzaXN0YW5jZSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiBhZ2FpbnN0IGhpbTsgdGhlIG90aGVyLCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+IG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgbm90IGhhdmUgYSByZXRyZWF0IGFtb25nIHRoZW0uIEhhdmluZyBkZXRlcm1pbmVkIG9uIHRoZXNlIG1hdHRlcnMsIGhlIGJlZ2FuIHRvCiAgICAgICAgICAgICAgICAgICAgYnVpbGQgYSBicmlkZ2UgYSBsaXR0bGUgYWJvdmUgdGhhdCBwbGFjZSB3aGVyZSBoZSBoYWQgYmVmb3JlIGNvbnZleWVkIG92ZXIgaGlzCiAgICAgICAgICAgICAgICAgICAgYXJteS4gVGhlIHBsYW4gaGF2aW5nIGJlZW4ga25vd24gYW5kIGxhaWQgZG93biwgdGhlIHdvcmsgaXMgYWNjb21wbGlzaGVkIGluIGEKICAgICAgICAgICAgICAgICAgICBmZXcgZGF5cyBieSB0aGUgZ3JlYXQgZXhlcnRpb24gb2YgdGhlIHNvbGRpZXJzLiBIYXZpbmcgbGVmdCBhIHN0cm9uZyBndWFyZCBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBicmlkZ2Ugb24gdGhlIHNpZGUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4sIGxlc3QgYW55IGNvbW1vdGlvbiBzaG91bGQgc3VkZGVubHkgYXJpc2UgYW1vbmcgdGhlbSwgaGUKICAgICAgICAgICAgICAgICAgICBsZWFkcyBvdmVyIHRoZSByZXN0IG9mIHRoZSBmb3JjZXMgYW5kIHRoZSBjYXZhbHJ5LiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5VYmlpPC9uYW1lPiwgd2hvCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGhhZCBzZW50IGhvc3RhZ2VzIGFuZCBjb21lIHRvIGEgY2FwaXR1bGF0aW9uLCBzZW5kIGVtYmFzc2Fkb3JzIHRvIGhpbSwKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHB1cnBvc2Ugb2YgdmluZGljYXRpbmcgdGhlbXNlbHZlcywgdG8gYXNzdXJlIGhpbSB0aGF0ICJuZWl0aGVyIGhhZAogICAgICAgICAgICAgICAgICAgIGF1eGlsaWFyaWVzIGJlZW4gc2VudCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiBmcm9tIHRoZWlyIHN0YXRlLCBub3IgaGFkIHRoZXkgdmlvbGF0ZWQgdGhlaXIgYWxsZWdpYW5jZTsiCiAgICAgICAgICAgICAgICAgICAgdGhleSBlbnRyZWF0IGFuZCBiZXNlZWNoIGhpbSAidG8gc3BhcmUgdGhlbSwgbGVzdCwgaW4gaGlzIGNvbW1vbiBoYXRyZWQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgdGhlIGlubm9jZW50IHNob3VsZCBzdWZmZXIgdGhlIHBlbmFsdHkKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZ3VpbHR5OiB0aGV5IHByb21pc2UgdG8gZ2l2ZSBtb3JlIGhvc3RhZ2VzLCBpZiBoZSBkZXNpcmUgdGhlbS4iIEhhdmluZwogICAgICAgICAgICAgICAgICAgIGludmVzdGlnYXRlZCB0aGUgY2FzZSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGZpbmRzIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgYXV4aWxpYXJpZXMgaGFkIGJlZW4gc2VudCBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT47IGhlIGFjY2VwdHMgdGhlIGFwb2xvZ3kgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5VYmlpPC9uYW1lPiwgYW5kIG1ha2VzIHRoZSBtaW51dGUgaW5xdWlyaWVzIGNvbmNlcm5pbmcgdGhlIGFwcHJvYWNoZXMKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHJvdXRlcyB0byB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBhZnRlciBoZSBjYW1lIGZyb20gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lbmFwaWk8L25hbWU+IGludG8gdGhvc2Ugb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4sIHJlc29sdmVkIGZvciB0d28gcmVhc29ucyB0byBjcm9zcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUKICAgICAgICAgICAgICAgICAgICA8L25hbWU+OyBvbmUgb2Ygd2hpY2ggd2FzLCBiZWNhdXNlIHRoZXkgaGFkIHNlbnQgYXNzaXN0YW5jZSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiBhZ2FpbnN0IGhpbTsgdGhlIG90aGVyLCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+IG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgbm90IGhhdmUgYSByZXRyZWF0IGFtb25nIHRoZW0uIEhhdmluZyBkZXRlcm1pbmVkIG9uIHRoZXNlIG1hdHRlcnMsIGhlIGJlZ2FuIHRvCiAgICAgICAgICAgICAgICAgICAgYnVpbGQgYSBicmlkZ2UgYSBsaXR0bGUgYWJvdmUgdGhhdCBwbGFjZSB3aGVyZSBoZSBoYWQgYmVmb3JlIGNvbnZleWVkIG92ZXIgaGlzCiAgICAgICAgICAgICAgICAgICAgYXJteS4gVGhlIHBsYW4gaGF2aW5nIGJlZW4ga25vd24gYW5kIGxhaWQgZG93biwgdGhlIHdvcmsgaXMgYWNjb21wbGlzaGVkIGluIGEKICAgICAgICAgICAgICAgICAgICBmZXcgZGF5cyBieSB0aGUgZ3JlYXQgZXhlcnRpb24gb2YgdGhlIHNvbGRpZXJzLiBIYXZpbmcgbGVmdCBhIHN0cm9uZyBndWFyZCBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBicmlkZ2Ugb24gdGhlIHNpZGUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4sIGxlc3QgYW55IGNvbW1vdGlvbiBzaG91bGQgc3VkZGVubHkgYXJpc2UgYW1vbmcgdGhlbSwgaGUKICAgICAgICAgICAgICAgICAgICBsZWFkcyBvdmVyIHRoZSByZXN0IG9mIHRoZSBmb3JjZXMgYW5kIHRoZSBjYXZhbHJ5LiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5VYmlpPC9uYW1lPiwgd2hvCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGhhZCBzZW50IGhvc3RhZ2VzIGFuZCBjb21lIHRvIGEgY2FwaXR1bGF0aW9uLCBzZW5kIGVtYmFzc2Fkb3JzIHRvIGhpbSwKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHB1cnBvc2Ugb2YgdmluZGljYXRpbmcgdGhlbXNlbHZlcywgdG8gYXNzdXJlIGhpbSB0aGF0ICJuZWl0aGVyIGhhZAogICAgICAgICAgICAgICAgICAgIGF1eGlsaWFyaWVzIGJlZW4gc2VudCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiBmcm9tIHRoZWlyIHN0YXRlLCBub3IgaGFkIHRoZXkgdmlvbGF0ZWQgdGhlaXIgYWxsZWdpYW5jZTsiCiAgICAgICAgICAgICAgICAgICAgdGhleSBlbnRyZWF0IGFuZCBiZXNlZWNoIGhpbSAidG8gc3BhcmUgdGhlbSwgbGVzdCwgaW4gaGlzIGNvbW1vbiBoYXRyZWQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgdGhlIGlubm9jZW50IHNob3VsZCBzdWZmZXIgdGhlIHBlbmFsdHkKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZ3VpbHR5OiB0aGV5IHByb21pc2UgdG8gZ2l2ZSBtb3JlIGhvc3RhZ2VzLCBpZiBoZSBkZXNpcmUgdGhlbS4iIEhhdmluZwogICAgICAgICAgICAgICAgICAgIGludmVzdGlnYXRlZCB0aGUgY2FzZSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGZpbmRzIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgYXV4aWxpYXJpZXMgaGFkIGJlZW4gc2VudCBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT47IGhlIGFjY2VwdHMgdGhlIGFwb2xvZ3kgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5VYmlpPC9uYW1lPiwgYW5kIG1ha2VzIHRoZSBtaW51dGUgaW5xdWlyaWVzIGNvbmNlcm5pbmcgdGhlIGFwcHJvYWNoZXMKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHJvdXRlcyB0byB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['6.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtZWFuIHRpbWUgaGUgaXMgaW5mb3JtZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VWJpaTwvbmFtZT4sIGEgZmV3IGRheXMgYWZ0ZXIsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4gYXJlIGRyYXdpbmcgYWxsIHRoZWlyIGZvcmNlcyBpbnRvIG9uZSBwbGFjZSwgYW5kIGFyZQogICAgICAgICAgICAgICAgICAgIGdpdmluZyBvcmRlcnMgdG8gdGhvc2UgbmF0aW9ucyB3aGljaCBhcmUgdW5kZXIgdGhlaXIgZ292ZXJubWVudCB0byBzZW5kCiAgICAgICAgICAgICAgICAgICAgYXV4aWxpYXJpZXMgb2YgaW5mYW50cnkgYW5kIG9mIGNhdmFscnkuIEhhdmluZyBsZWFybmVkIHRoZXNlIHRoaW5ncywgaGUgcHJvdmlkZXMKICAgICAgICAgICAgICAgICAgICBhIHN1cHBseSBvZiBjb3JuLCBzZWxlY3RzIGEgcHJvcGVyIHBsYWNlIGZvciBoaXMgY2FtcCwgYW5kIGNvbW1hbmRzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlViaWk8L25hbWU+IHRvIGRyaXZlIG9mZiB0aGVpciBjYXR0bGUgYW5kIGNhcnJ5IGF3YXkgYWxsIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbnMgZnJvbSB0aGUgY291bnRyeSBwYXJ0cyBpbnRvIHRoZSB0b3ducywgaG9waW5nIHRoYXQgdGhleSwgYmVpbmcgYQogICAgICAgICAgICAgICAgICAgIGJhcmJhcm91cyBhbmQgaWdub3JhbnQgcGVvcGxlLCB3aGVuIGhhcmFzc2VkIGJ5IHRoZSB3YW50IG9mIHByb3Zpc2lvbnMsIG1pZ2h0IGJlCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCB0byBhbiBlbmdhZ2VtZW50IG9uIGRpc2FkdmFudGFnZW91cyB0ZXJtczogaGUgb3JkZXJzIHRoZW0gdG8gc2VuZAogICAgICAgICAgICAgICAgICAgIG51bWVyb3VzIHNjb3V0cyBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4sIGFuZCBsZWFybiB3aGF0IHRoaW5ncyBhcmUgZ29pbmcgb24KICAgICAgICAgICAgICAgICAgICBhbW9uZyB0aGVtLiBUaGV5IGV4ZWN1dGUgdGhlIG9yZGVycywgYW5kLCBhIGZldyBkYXlzIGhhdmluZyBpbnRlcnZlbmVkLCByZXBvcnQKICAgICAgICAgICAgICAgICAgICB0aGF0IGFsbCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4sIGFmdGVyIGNlcnRhaW4gaW50ZWxsaWdlbmNlIGNvbmNlcm5pbmcgdGhlIGFybXkKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gaGFkIGNvbWUsIHJldHJlYXRlZCB3aXRoIGFsbCB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICBmb3JjZXMgYW5kIHRob3NlIG9mIHRoZWlyIGFsbGllcywgd2hpY2ggdGhleSBoYWQgYXNzZW1ibGVkLCB0byB0aGUgdXRtb3N0CiAgICAgICAgICAgICAgICAgICAgZXh0cmVtaXRpZXMgb2YgdGhlaXIgdGVycml0b3JpZXM6IHRoYXQgdGhlcmUgaXMgYSB3b29kIHRoZXJlIG9mIHZlcnkgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBleHRlbnQsIHdoaWNoIGlzIGNhbGxlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJhY2VuaXM8L25hbWU+OyB0aGF0IHRoaXMgc3RyZXRjaGVzIGEgZ3JlYXQgd2F5CiAgICAgICAgICAgICAgICAgICAgaW50byB0aGUgaW50ZXJpb3IsIGFuZCwgYmVpbmcgb3Bwb3NlZCBhcyBhIG5hdHVyYWwgYmFycmllciwgZGVmZW5kcyBmcm9tCiAgICAgICAgICAgICAgICAgICAgaW5qdXJpZXMgYW5kIGluY3Vyc2lvbnMgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hlcnVzY2k8L25hbWU+IGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4sIGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4gYWdhaW5zdCB0aGUKICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNoZXJ1c2NpPC9uYW1lPjogdGhhdCBhdCB0aGUgZW50cmFuY2Ugb2YgdGhhdCBmb3Jlc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vldmk8L25hbWU+IGhhZCBkZXRlcm1pbmVkIHRvIGF3YWl0IHRoZSBjb21pbmcgdXAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5VYmlpPC9uYW1lPiwgYSBmZXcgZGF5cyBhZnRlciwgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiBhcmUgZHJhd2luZyBhbGwgdGhlaXIgZm9yY2VzIGludG8gb25lIHBsYWNlLCBhbmQgYXJlCiAgICAgICAgICAgICAgICAgICAgZ2l2aW5nIG9yZGVycyB0byB0aG9zZSBuYXRpb25zIHdoaWNoIGFyZSB1bmRlciB0aGVpciBnb3Zlcm5tZW50IHRvIHNlbmQKICAgICAgICAgICAgICAgICAgICBhdXhpbGlhcmllcyBvZiBpbmZhbnRyeSBhbmQgb2YgY2F2YWxyeS4gSGF2aW5nIGxlYXJuZWQgdGhlc2UgdGhpbmdzLCBoZSBwcm92aWRlcwogICAgICAgICAgICAgICAgICAgIGEgc3VwcGx5IG9mIGNvcm4sIHNlbGVjdHMgYSBwcm9wZXIgcGxhY2UgZm9yIGhpcyBjYW1wLCBhbmQgY29tbWFuZHMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VWJpaTwvbmFtZT4gdG8gZHJpdmUgb2ZmIHRoZWlyIGNhdHRsZSBhbmQgY2FycnkgYXdheSBhbGwgdGhlaXIKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9ucyBmcm9tIHRoZSBjb3VudHJ5IHBhcnRzIGludG8gdGhlIHRvd25zLCBob3BpbmcgdGhhdCB0aGV5LCBiZWluZyBhCiAgICAgICAgICAgICAgICAgICAgYmFyYmFyb3VzIGFuZCBpZ25vcmFudCBwZW9wbGUsIHdoZW4gaGFyYXNzZWQgYnkgdGhlIHdhbnQgb2YgcHJvdmlzaW9ucywgbWlnaHQgYmUKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHRvIGFuIGVuZ2FnZW1lbnQgb24gZGlzYWR2YW50YWdlb3VzIHRlcm1zOiBoZSBvcmRlcnMgdGhlbSB0byBzZW5kCiAgICAgICAgICAgICAgICAgICAgbnVtZXJvdXMgc2NvdXRzIGFtb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiwgYW5kIGxlYXJuIHdoYXQgdGhpbmdzIGFyZSBnb2luZyBvbgogICAgICAgICAgICAgICAgICAgIGFtb25nIHRoZW0uIFRoZXkgZXhlY3V0ZSB0aGUgb3JkZXJzLCBhbmQsIGEgZmV3IGRheXMgaGF2aW5nIGludGVydmVuZWQsIHJlcG9ydAogICAgICAgICAgICAgICAgICAgIHRoYXQgYWxsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiwgYWZ0ZXIgY2VydGFpbiBpbnRlbGxpZ2VuY2UgY29uY2VybmluZyB0aGUgYXJteQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiBoYWQgY29tZSwgcmV0cmVhdGVkIHdpdGggYWxsIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIGZvcmNlcyBhbmQgdGhvc2Ugb2YgdGhlaXIgYWxsaWVzLCB3aGljaCB0aGV5IGhhZCBhc3NlbWJsZWQsIHRvIHRoZSB1dG1vc3QKICAgICAgICAgICAgICAgICAgICBleHRyZW1pdGllcyBvZiB0aGVpciB0ZXJyaXRvcmllczogdGhhdCB0aGVyZSBpcyBhIHdvb2QgdGhlcmUgb2YgdmVyeSBncmVhdAogICAgICAgICAgICAgICAgICAgIGV4dGVudCwgd2hpY2ggaXMgY2FsbGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmFjZW5pczwvbmFtZT47IHRoYXQgdGhpcyBzdHJldGNoZXMgYSBncmVhdCB3YXkKICAgICAgICAgICAgICAgICAgICBpbnRvIHRoZSBpbnRlcmlvciwgYW5kLCBiZWluZyBvcHBvc2VkIGFzIGEgbmF0dXJhbCBiYXJyaWVyLCBkZWZlbmRzIGZyb20KICAgICAgICAgICAgICAgICAgICBpbmp1cmllcyBhbmQgaW5jdXJzaW9ucyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaGVydXNjaTwvbmFtZT4gYWdhaW5zdCB0aGUKICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiwgYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXZpPC9uYW1lPiBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hlcnVzY2k8L25hbWU+OiB0aGF0IGF0IHRoZSBlbnRyYW5jZSBvZiB0aGF0IGZvcmVzdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4gaGFkIGRldGVybWluZWQgdG8gYXdhaXQgdGhlIGNvbWluZyB1cCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['6.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlNpbmNlIHdlIGhhdmUgY29tZSB0byB0aGUgcGxhY2UsIGl0IGRvZXMgbm90IGFwcGVhciB0byBiZSBmb3JlaWduIHRvIG91ciBzdWJqZWN0CiAgICAgICAgICAgICAgICAgICAgdG8gbGF5IGJlZm9yZSB0aGUgcmVhZGVyIGFuIGFjY291bnQgb2YgdGhlIG1hbm5lcnMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAwODQiIHJlZz0iICArR2VybWFueSBbMTAuNSw1MS41XSAobmF0aW9uKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcm1hbnkgPC9uYW1lPiwgYW5kIHdoZXJlaW4KICAgICAgICAgICAgICAgICAgICB0aGVzZSBuYXRpb25zIGRpZmZlciBmcm9tIGVhY2ggb3RoZXIuIEluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB0aGVyZSBhcmUgZmFjdGlvbnMgbm90IG9ubHkKICAgICAgICAgICAgICAgICAgICBpbiBhbGwgdGhlIHN0YXRlcywgYW5kIGluIGFsbCB0aGUgY2FudG9ucyBhbmQgdGhlaXIgZGl2aXNpb25zLCBidXQgYWxtb3N0IGluCiAgICAgICAgICAgICAgICAgICAgZWFjaCBmYW1pbHksIGFuZCBvZiB0aGVzZSBmYWN0aW9ucyB0aG9zZSBhcmUgdGhlIGxlYWRlcnMgd2hvIGFyZSBjb25zaWRlcmVkCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHRoZWlyIGp1ZGdtZW50IHRvIHBvc3Nlc3MgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSwgdXBvbiB3aG9zZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgYW5kIGRldGVybWluYXRpb24gdGhlIG1hbmFnZW1lbnQgb2YgYWxsIGFmZmFpcnMgYW5kIG1lYXN1cmVzIGRlcGVuZHMuIEFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgc2VlbXMgdG8gaGF2ZSBiZWVuIGluc3RpdHV0ZWQgaW4gYW5jaWVudCB0aW1lcyB3aXRoIHRoaXMgdmlldywgdGhhdCBubyBvbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgY29tbW9uIHBlb3BsZSBzaG91bGQgYmUgaW4gd2FudCBvZiBzdXBwb3J0IGFnYWluc3Qgb25lIG1vcmUgcG93ZXJmdWw7IGZvciwKICAgICAgICAgICAgICAgICAgICBub25lIFtvZiB0aG9zZSBsZWFkZXJzXSBzdWZmZXJzIGhpcyBwYXJ0eSB0byBiZSBvcHByZXNzZWQgYW5kIGRlZnJhdWRlZCwgYW5kIGlmCiAgICAgICAgICAgICAgICAgICAgaGUgZG8gb3RoZXJ3aXNlLCBoZSBoYXMgbm8gaW5mbHVlbmNlIGFtb25nIGhpcyBwYXJ0eS4gVGhpcyBzYW1lIHBvbGljeSBleGlzdHMKICAgICAgICAgICAgICAgICAgICB0aHJvdWdob3V0IHRoZSB3aG9sZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT47IGZvciBhbGwgdGhlIHN0YXRlcyBhcmUKICAgICAgICAgICAgICAgICAgICBkaXZpZGVkIGludG8gdHdvIGZhY3Rpb25zLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAwODQiIHJlZz0iICArR2VybWFueSBbMTAuNSw1MS41XSAobmF0aW9uKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcm1hbnkgPC9uYW1lPiwgYW5kIHdoZXJlaW4KICAgICAgICAgICAgICAgICAgICB0aGVzZSBuYXRpb25zIGRpZmZlciBmcm9tIGVhY2ggb3RoZXIuIEluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB0aGVyZSBhcmUgZmFjdGlvbnMgbm90IG9ubHkKICAgICAgICAgICAgICAgICAgICBpbiBhbGwgdGhlIHN0YXRlcywgYW5kIGluIGFsbCB0aGUgY2FudG9ucyBhbmQgdGhlaXIgZGl2aXNpb25zLCBidXQgYWxtb3N0IGluCiAgICAgICAgICAgICAgICAgICAgZWFjaCBmYW1pbHksIGFuZCBvZiB0aGVzZSBmYWN0aW9ucyB0aG9zZSBhcmUgdGhlIGxlYWRlcnMgd2hvIGFyZSBjb25zaWRlcmVkCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHRoZWlyIGp1ZGdtZW50IHRvIHBvc3Nlc3MgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSwgdXBvbiB3aG9zZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgYW5kIGRldGVybWluYXRpb24gdGhlIG1hbmFnZW1lbnQgb2YgYWxsIGFmZmFpcnMgYW5kIG1lYXN1cmVzIGRlcGVuZHMuIEFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgc2VlbXMgdG8gaGF2ZSBiZWVuIGluc3RpdHV0ZWQgaW4gYW5jaWVudCB0aW1lcyB3aXRoIHRoaXMgdmlldywgdGhhdCBubyBvbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgY29tbW9uIHBlb3BsZSBzaG91bGQgYmUgaW4gd2FudCBvZiBzdXBwb3J0IGFnYWluc3Qgb25lIG1vcmUgcG93ZXJmdWw7IGZvciwKICAgICAgICAgICAgICAgICAgICBub25lIFtvZiB0aG9zZSBsZWFkZXJzXSBzdWZmZXJzIGhpcyBwYXJ0eSB0byBiZSBvcHByZXNzZWQgYW5kIGRlZnJhdWRlZCwgYW5kIGlmCiAgICAgICAgICAgICAgICAgICAgaGUgZG8gb3RoZXJ3aXNlLCBoZSBoYXMgbm8gaW5mbHVlbmNlIGFtb25nIGhpcyBwYXJ0eS4gVGhpcyBzYW1lIHBvbGljeSBleGlzdHMKICAgICAgICAgICAgICAgICAgICB0aHJvdWdob3V0IHRoZSB3aG9sZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT47IGZvciBhbGwgdGhlIHN0YXRlcyBhcmUKICAgICAgICAgICAgICAgICAgICBkaXZpZGVkIGludG8gdHdvIGZhY3Rpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.12'] = ""
translation['6.13'] = ""
translation['6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRydWlkczwvbmFtZT4gZG8gbm90IGdvIHRvIHdhciwgbm9yIHBheSB0cmlidXRlIHRvZ2V0aGVyIHdpdGggdGhlIHJlc3Q7CiAgICAgICAgICAgICAgICAgICAgdGhleSBoYXZlIGFuIGV4ZW1wdGlvbiBmcm9tIG1pbGl0YXJ5IHNlcnZpY2UgYW5kIGEgZGlzcGVuc2F0aW9uIGluIGFsbCBtYXR0ZXJzLgogICAgICAgICAgICAgICAgICAgIEluZHVjZWQgYnkgc3VjaCBncmVhdCBhZHZhbnRhZ2VzLCBtYW55IGVtYnJhY2UgdGhpcyBwcm9mZXNzaW9uIG9mIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIGFjY29yZCwgYW5kIFttYW55XSBhcmUgc2VudCB0byBpdCBieSB0aGVpciBwYXJlbnRzIGFuZCByZWxhdGlvbnMuIFRoZXkgYXJlIHNhaWQKICAgICAgICAgICAgICAgICAgICB0aGVyZSB0byBsZWFybiBieSBoZWFydCBhIGdyZWF0IG51bWJlciBvZiB2ZXJzZXM7IGFjY29yZGluZ2x5IHNvbWUgcmVtYWluIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNvdXJzZSBvZiB0cmFpbmluZyB0d2VudHkgeWVhcnMuIE5vciBkbyB0aGV5IHJlZ2FyZCBpdCBsYXdmdWwgdG8gY29tbWl0IHRoZXNlIHRvCiAgICAgICAgICAgICAgICAgICAgd3JpdGluZywgdGhvdWdoIGluIGFsbW9zdCBhbGwgb3RoZXIgbWF0dGVycywgaW4gdGhlaXIgcHVibGljIGFuZCBwcml2YXRlCiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zLCB0aGV5IHVzZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdyZWVrPC9uYW1lPiBjaGFyYWN0ZXJzLiBUaGF0IHByYWN0aWNlIHRoZXkgc2VlbSB0bwogICAgICAgICAgICAgICAgICAgIG1lIHRvIGhhdmUgYWRvcHRlZCBmb3IgdHdvIHJlYXNvbnM7IGJlY2F1c2UgdGhleSBuZWl0aGVyIGRlc2lyZSB0aGVpciBkb2N0cmluZXMKICAgICAgICAgICAgICAgICAgICB0byBiZSBkaXZ1bGdlZCBhbW9uZyB0aGUgbWFzcyBvZiB0aGUgcGVvcGxlLCBub3IgdGhvc2Ugd2hvIGxlYXJuLCB0byBkZXZvdGUKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHRoZSBsZXNzIHRvIHRoZSBlZmZvcnRzIG9mIG1lbW9yeSwgcmVseWluZyBvbiB3cml0aW5nOyBzaW5jZSBpdAogICAgICAgICAgICAgICAgICAgIGdlbmVyYWxseSBvY2N1cnMgdG8gbW9zdCBtZW4sIHRoYXQsIGluIHRoZWlyIGRlcGVuZGVuY2Ugb24gd3JpdGluZywgdGhleSByZWxheAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGRpbGlnZW5jZSBpbiBsZWFybmluZyB0aG9yb3VnaGx5LCBhbmQgdGhlaXIgZW1wbG95bWVudCBvZiB0aGUgbWVtb3J5LiBUaGV5CiAgICAgICAgICAgICAgICAgICAgd2lzaCB0byBpbmN1bGNhdGUgdGhpcyBhcyBvbmUgb2YgdGhlaXIgbGVhZGluZyB0ZW5ldHMsIHRoYXQgc291bHMgZG8gbm90IGJlY29tZQogICAgICAgICAgICAgICAgICAgIGV4dGluY3QsIGJ1dCBwYXNzIGFmdGVyIGRlYXRoIGZyb20gb25lIGJvZHkgdG8gYW5vdGhlciwgYW5kIHRoZXkgdGhpbmsgdGhhdCBtZW4KICAgICAgICAgICAgICAgICAgICBieSB0aGlzIHRlbmV0IGFyZSBpbiBhIGdyZWF0IGRlZ3JlZSBleGNpdGVkIHRvIHZhbG9yLCB0aGUgZmVhciBvZiBkZWF0aCBiZWluZwogICAgICAgICAgICAgICAgICAgIGRpc3JlZ2FyZGVkLiBUaGV5IGxpa2V3aXNlIGRpc2N1c3MgYW5kIGltcGFydCB0byB0aGUgeW91dGggbWFueSB0aGluZ3MKICAgICAgICAgICAgICAgICAgICByZXNwZWN0aW5nIHRoZSBzdGFycyBhbmQgdGhlaXIgbW90aW9uLCByZXNwZWN0aW5nIHRoZSBleHRlbnQgb2YgdGhlIHdvcmxkIGFuZCBvZgogICAgICAgICAgICAgICAgICAgIG91ciBlYXJ0aCwgcmVzcGVjdGluZyB0aGUgbmF0dXJlIG9mIHRoaW5ncywgcmVzcGVjdGluZyB0aGUgcG93ZXIgYW5kIHRoZSBtYWplc3R5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGltbW9ydGFsIGdvZHMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRydWlkczwvbmFtZT4gZG8gbm90IGdvIHRvIHdhciwgbm9yIHBheSB0cmlidXRlIHRvZ2V0aGVyIHdpdGggdGhlIHJlc3Q7CiAgICAgICAgICAgICAgICAgICAgdGhleSBoYXZlIGFuIGV4ZW1wdGlvbiBmcm9tIG1pbGl0YXJ5IHNlcnZpY2UgYW5kIGEgZGlzcGVuc2F0aW9uIGluIGFsbCBtYXR0ZXJzLgogICAgICAgICAgICAgICAgICAgIEluZHVjZWQgYnkgc3VjaCBncmVhdCBhZHZhbnRhZ2VzLCBtYW55IGVtYnJhY2UgdGhpcyBwcm9mZXNzaW9uIG9mIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIGFjY29yZCwgYW5kIFttYW55XSBhcmUgc2VudCB0byBpdCBieSB0aGVpciBwYXJlbnRzIGFuZCByZWxhdGlvbnMuIFRoZXkgYXJlIHNhaWQKICAgICAgICAgICAgICAgICAgICB0aGVyZSB0byBsZWFybiBieSBoZWFydCBhIGdyZWF0IG51bWJlciBvZiB2ZXJzZXM7IGFjY29yZGluZ2x5IHNvbWUgcmVtYWluIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNvdXJzZSBvZiB0cmFpbmluZyB0d2VudHkgeWVhcnMuIE5vciBkbyB0aGV5IHJlZ2FyZCBpdCBsYXdmdWwgdG8gY29tbWl0IHRoZXNlIHRvCiAgICAgICAgICAgICAgICAgICAgd3JpdGluZywgdGhvdWdoIGluIGFsbW9zdCBhbGwgb3RoZXIgbWF0dGVycywgaW4gdGhlaXIgcHVibGljIGFuZCBwcml2YXRlCiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zLCB0aGV5IHVzZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdyZWVrPC9uYW1lPiBjaGFyYWN0ZXJzLiBUaGF0IHByYWN0aWNlIHRoZXkgc2VlbSB0bwogICAgICAgICAgICAgICAgICAgIG1lIHRvIGhhdmUgYWRvcHRlZCBmb3IgdHdvIHJlYXNvbnM7IGJlY2F1c2UgdGhleSBuZWl0aGVyIGRlc2lyZSB0aGVpciBkb2N0cmluZXMKICAgICAgICAgICAgICAgICAgICB0byBiZSBkaXZ1bGdlZCBhbW9uZyB0aGUgbWFzcyBvZiB0aGUgcGVvcGxlLCBub3IgdGhvc2Ugd2hvIGxlYXJuLCB0byBkZXZvdGUKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHRoZSBsZXNzIHRvIHRoZSBlZmZvcnRzIG9mIG1lbW9yeSwgcmVseWluZyBvbiB3cml0aW5nOyBzaW5jZSBpdAogICAgICAgICAgICAgICAgICAgIGdlbmVyYWxseSBvY2N1cnMgdG8gbW9zdCBtZW4sIHRoYXQsIGluIHRoZWlyIGRlcGVuZGVuY2Ugb24gd3JpdGluZywgdGhleSByZWxheAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGRpbGlnZW5jZSBpbiBsZWFybmluZyB0aG9yb3VnaGx5LCBhbmQgdGhlaXIgZW1wbG95bWVudCBvZiB0aGUgbWVtb3J5LiBUaGV5CiAgICAgICAgICAgICAgICAgICAgd2lzaCB0byBpbmN1bGNhdGUgdGhpcyBhcyBvbmUgb2YgdGhlaXIgbGVhZGluZyB0ZW5ldHMsIHRoYXQgc291bHMgZG8gbm90IGJlY29tZQogICAgICAgICAgICAgICAgICAgIGV4dGluY3QsIGJ1dCBwYXNzIGFmdGVyIGRlYXRoIGZyb20gb25lIGJvZHkgdG8gYW5vdGhlciwgYW5kIHRoZXkgdGhpbmsgdGhhdCBtZW4KICAgICAgICAgICAgICAgICAgICBieSB0aGlzIHRlbmV0IGFyZSBpbiBhIGdyZWF0IGRlZ3JlZSBleGNpdGVkIHRvIHZhbG9yLCB0aGUgZmVhciBvZiBkZWF0aCBiZWluZwogICAgICAgICAgICAgICAgICAgIGRpc3JlZ2FyZGVkLiBUaGV5IGxpa2V3aXNlIGRpc2N1c3MgYW5kIGltcGFydCB0byB0aGUgeW91dGggbWFueSB0aGluZ3MKICAgICAgICAgICAgICAgICAgICByZXNwZWN0aW5nIHRoZSBzdGFycyBhbmQgdGhlaXIgbW90aW9uLCByZXNwZWN0aW5nIHRoZSBleHRlbnQgb2YgdGhlIHdvcmxkIGFuZCBvZgogICAgICAgICAgICAgICAgICAgIG91ciBlYXJ0aCwgcmVzcGVjdGluZyB0aGUgbmF0dXJlIG9mIHRoaW5ncywgcmVzcGVjdGluZyB0aGUgcG93ZXIgYW5kIHRoZSBtYWplc3R5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGltbW9ydGFsIGdvZHMuIDwvdHJhbnNsYXRpb24+"
translation['6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBvdGhlciBvcmRlciBpcyB0aGF0IG9mIHRoZSBrbmlnaHRzLiBUaGVzZSwgd2hlbiB0aGVyZSBpcyBvY2Nhc2lvbiBhbmQgYW55IHdhcgogICAgICAgICAgICAgICAgICAgIG9jY3VycyAod2hpY2ggYmVmb3JlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIGFycml2YWwgd2FzIGZvciB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHBhcnQgd29udCB0byBoYXBwZW4gZXZlcnkgeWVhciwgYXMgZWl0aGVyIHRoZXkgb24gdGhlaXIgcGFydCB3ZXJlIGluZmxlY3RpbmcKICAgICAgICAgICAgICAgICAgICBpbmp1cmllcyBvciByZXBlbGxpbmcgdGhvc2Ugd2hpY2ggb3RoZXJzIGluZmxlY3RlZCBvbiB0aGVtKSwgYXJlIGFsbCBlbmdhZ2VkIGluCiAgICAgICAgICAgICAgICAgICAgd2FyLiBBbmQgdGhvc2Ugb2YgdGhlbSBtb3N0IGRpc3Rpbmd1aXNoZWQgYnkgYmlydGggYW5kIHJlc291cmNlcywgaGF2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBncmVhdGVzdCBudW1iZXIgb2YgdmFzc2FscyBhbmQgZGVwZW5kZW50cyBhYm91dCB0aGVtLiBUaGV5IGFja25vd2xlZGdlIHRoaXMgc29ydAogICAgICAgICAgICAgICAgICAgIG9mIGluZmx1ZW5jZSBhbmQgcG93ZXIgb25seS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIGFycml2YWwgd2FzIGZvciB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHBhcnQgd29udCB0byBoYXBwZW4gZXZlcnkgeWVhciwgYXMgZWl0aGVyIHRoZXkgb24gdGhlaXIgcGFydCB3ZXJlIGluZmxlY3RpbmcKICAgICAgICAgICAgICAgICAgICBpbmp1cmllcyBvciByZXBlbGxpbmcgdGhvc2Ugd2hpY2ggb3RoZXJzIGluZmxlY3RlZCBvbiB0aGVtKSwgYXJlIGFsbCBlbmdhZ2VkIGluCiAgICAgICAgICAgICAgICAgICAgd2FyLiBBbmQgdGhvc2Ugb2YgdGhlbSBtb3N0IGRpc3Rpbmd1aXNoZWQgYnkgYmlydGggYW5kIHJlc291cmNlcywgaGF2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBncmVhdGVzdCBudW1iZXIgb2YgdmFzc2FscyBhbmQgZGVwZW5kZW50cyBhYm91dCB0aGVtLiBUaGV5IGFja25vd2xlZGdlIHRoaXMgc29ydAogICAgICAgICAgICAgICAgICAgIG9mIGluZmx1ZW5jZSBhbmQgcG93ZXIgb25seS4gPC90cmFuc2xhdGlvbj4="
translation['6.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBuYXRpb24gb2YgYWxsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IGlzIGV4dHJlbWVseSBkZXZvdGVkIHRvCiAgICAgICAgICAgICAgICAgICAgc3VwZXJzdGl0aW91cyByaXRlczsgYW5kIG9uIHRoYXQgYWNjb3VudCB0aGV5IHdobyBhcmUgdHJvdWJsZWQgd2l0aCB1bnVzdWFsbHkKICAgICAgICAgICAgICAgICAgICBzZXZlcmUgZGlzZWFzZXMsIGFuZCB0aGV5IHdobyBhcmUgZW5nYWdlZCBpbiBiYXR0bGVzIGFuZCBkYW5nZXJzLCBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBzYWNyaWZpY2UgbWVuIGFzIHZpY3RpbXMsIG9yIHZvdyB0aGF0IHRoZXkgd2lsbCBzYWNyaWZpY2UgdGhlbSwgYW5kIGVtcGxveSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EcnVpZHM8L25hbWU+IGFzIHRoZSBwZXJmb3JtZXJzIG9mIHRob3NlIHNhY3JpZmljZXM7IGJlY2F1c2UgdGhleQogICAgICAgICAgICAgICAgICAgIHRoaW5rIHRoYXQgdW5sZXNzIHRoZSBsaWZlIG9mIGEgbWFuIGJlIG9mZmVyZWQgZm9yIHRoZSBsaWZlIG9mIGEgbWFuLCB0aGUgbWluZAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBpbW1vcnRhbCBnb2RzIGNhbiBub3QgYmUgcmVuZGVyZWQgcHJvcGl0aW91cywgYW5kIHRoZXkgaGF2ZSBzYWNyaWZpY2VzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhhdCBraW5kIG9yZGFpbmVkIGZvciBuYXRpb25hbCBwdXJwb3Nlcy4gT3RoZXJzIGhhdmUgZmlndXJlcyBvZiB2YXN0IHNpemUsIHRoZQogICAgICAgICAgICAgICAgICAgIGxpbWJzIG9mIHdoaWNoIGZvcm1lZCBvZiBvc2llcnMgdGhleSBmaWxsIHdpdGggbGl2aW5nIG1lbiwgd2hpY2ggYmVpbmcgc2V0IG9uCiAgICAgICAgICAgICAgICAgICAgZmlyZSwgdGhlIG1lbiBwZXJpc2ggZW52ZWxvcGVkIGluIHRoZSBmbGFtZXMuIFRoZXkgY29uc2lkZXIgdGhhdCB0aGUgb2JsYXRpb24gb2YKICAgICAgICAgICAgICAgICAgICBzdWNoIGFzIGhhdmUgYmVlbiB0YWtlbiBpbiB0aGVmdCwgb3IgaW4gcm9iYmVyeSwgb3IgYW55IG90aGVyIG9mZmVuc2UsIGlzIG1vcmUKICAgICAgICAgICAgICAgICAgICBhY2NlcHRhYmxlIHRvIHRoZSBpbW1vcnRhbCBnb2RzOyBidXQgd2hlbiBhIHN1cHBseSBvZiB0aGF0IGNsYXNzIGlzIHdhbnRpbmcsCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYXZlIHJlY291cnNlIHRvIHRoZSBvYmxhdGlvbiBvZiBldmVuIHRoZSBpbm5vY2VudC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gaXMgZXh0cmVtZWx5IGRldm90ZWQgdG8KICAgICAgICAgICAgICAgICAgICBzdXBlcnN0aXRpb3VzIHJpdGVzOyBhbmQgb24gdGhhdCBhY2NvdW50IHRoZXkgd2hvIGFyZSB0cm91YmxlZCB3aXRoIHVudXN1YWxseQogICAgICAgICAgICAgICAgICAgIHNldmVyZSBkaXNlYXNlcywgYW5kIHRoZXkgd2hvIGFyZSBlbmdhZ2VkIGluIGJhdHRsZXMgYW5kIGRhbmdlcnMsIGVpdGhlcgogICAgICAgICAgICAgICAgICAgIHNhY3JpZmljZSBtZW4gYXMgdmljdGltcywgb3Igdm93IHRoYXQgdGhleSB3aWxsIHNhY3JpZmljZSB0aGVtLCBhbmQgZW1wbG95IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRydWlkczwvbmFtZT4gYXMgdGhlIHBlcmZvcm1lcnMgb2YgdGhvc2Ugc2FjcmlmaWNlczsgYmVjYXVzZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgdGhpbmsgdGhhdCB1bmxlc3MgdGhlIGxpZmUgb2YgYSBtYW4gYmUgb2ZmZXJlZCBmb3IgdGhlIGxpZmUgb2YgYSBtYW4sIHRoZSBtaW5kCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGltbW9ydGFsIGdvZHMgY2FuIG5vdCBiZSByZW5kZXJlZCBwcm9waXRpb3VzLCBhbmQgdGhleSBoYXZlIHNhY3JpZmljZXMgb2YKICAgICAgICAgICAgICAgICAgICB0aGF0IGtpbmQgb3JkYWluZWQgZm9yIG5hdGlvbmFsIHB1cnBvc2VzLiBPdGhlcnMgaGF2ZSBmaWd1cmVzIG9mIHZhc3Qgc2l6ZSwgdGhlCiAgICAgICAgICAgICAgICAgICAgbGltYnMgb2Ygd2hpY2ggZm9ybWVkIG9mIG9zaWVycyB0aGV5IGZpbGwgd2l0aCBsaXZpbmcgbWVuLCB3aGljaCBiZWluZyBzZXQgb24KICAgICAgICAgICAgICAgICAgICBmaXJlLCB0aGUgbWVuIHBlcmlzaCBlbnZlbG9wZWQgaW4gdGhlIGZsYW1lcy4gVGhleSBjb25zaWRlciB0aGF0IHRoZSBvYmxhdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIHN1Y2ggYXMgaGF2ZSBiZWVuIHRha2VuIGluIHRoZWZ0LCBvciBpbiByb2JiZXJ5LCBvciBhbnkgb3RoZXIgb2ZmZW5zZSwgaXMgbW9yZQogICAgICAgICAgICAgICAgICAgIGFjY2VwdGFibGUgdG8gdGhlIGltbW9ydGFsIGdvZHM7IGJ1dCB3aGVuIGEgc3VwcGx5IG9mIHRoYXQgY2xhc3MgaXMgd2FudGluZywKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhdmUgcmVjb3Vyc2UgdG8gdGhlIG9ibGF0aW9uIG9mIGV2ZW4gdGhlIGlubm9jZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['6.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXkgd29yc2hpcCBhcyB0aGVpciBkaXZpbml0eSwgTWVyY3VyeSBpbiBwYXJ0aWN1bGFyLCBhbmQgaGF2ZSBtYW55IGltYWdlcyBvZgogICAgICAgICAgICAgICAgICAgIGhpbSwgYW5kIHJlZ2FyZCBoaW0gYXMgdGhlIGludmVudG9yIG9mIGFsbCBhcnRzLCB0aGV5IGNvbnNpZGVyIGhpbSB0aGUgZ3VpZGUgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBqb3VybmV5cyBhbmQgbWFyY2hlcywgYW5kIGJlbGlldmUgaGltIHRvIGhhdmUgZ3JlYXQgaW5mbHVlbmNlIG92ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgYWNxdWlzaXRpb24gb2YgZ2FpbiBhbmQgbWVyY2FudGlsZSB0cmFuc2FjdGlvbnMuIE5leHQgdG8gaGltIHRoZXkgd29yc2hpcCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkFwb2xsbzwvbmFtZT4sIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPk1hcnM8L25hbWU+LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI1MjYwIiByZWc9IiAgK0p1cGl0ZXIgKHJpdmVyKSwgQW50aWNvc3RpIElzbGFuZCwgUXVlYmVjLCBDYW5hZGEsIE5vcnRoIGFuZCBDZW50cmFsIEFtZXJpY2EgIiB0eXBlPSJwbGFjZSI+SnVwaXRlciA8L25hbWU+LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NaW5lcnZhPC9uYW1lPjsgcmVzcGVjdGluZyB0aGVzZQogICAgICAgICAgICAgICAgICAgIGRlaXRpZXMgdGhleSBoYXZlIGZvciB0aGUgbW9zdCBwYXJ0IHRoZSBzYW1lIGJlbGllZiBhcyBvdGhlciBuYXRpb25zOiB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+QXBvbGxvPC9uYW1lPiBhdmVydHMgZGlzZWFzZXMsIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NaW5lcnZhPC9uYW1lPiBpbXBhcnRzIHRoZSBpbnZlbnRpb24gb2YgbWFudWZhY3R1cmVzLCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyNTI2MCIgcmVnPSIgICtKdXBpdGVyIChyaXZlciksIEFudGljb3N0aSBJc2xhbmQsIFF1ZWJlYywgQ2FuYWRhLCBOb3J0aCBhbmQgQ2VudHJhbCBBbWVyaWNhICIgdHlwZT0icGxhY2UiPkp1cGl0ZXIgPC9uYW1lPiBwb3NzZXNzZXMgdGhlIHNvdmVyZWlnbnR5IG9mIHRoZSBoZWF2ZW5seSBwb3dlcnM7IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NYXJzPC9uYW1lPiBwcmVzaWRlcyBvdmVyIHdhcnMuIFRvIGhpbSwgd2hlbiB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICBkZXRlcm1pbmVkIHRvIGVuZ2FnZSBpbiBiYXR0bGUsIHRoZXkgY29tbW9ubHkgdm93IHRob3NlIHRoaW5ncyB3aGljaCB0aGV5IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgdGFrZSBpbiB3YXIuIFdoZW4gdGhleSBoYXZlIGNvbnF1ZXJlZCwgdGhleSBzYWNyaWZpY2Ugd2hhdGV2ZXIgY2FwdHVyZWQgYW5pbWFscwogICAgICAgICAgICAgICAgICAgIG1heSBoYXZlIHN1cnZpdmVkIHRoZSBjb25mbGljdCwgYW5kIGNvbGxlY3QgdGhlIG90aGVyIHRoaW5ncyBpbnRvIG9uZSBwbGFjZS4gSW4KICAgICAgICAgICAgICAgICAgICBtYW55IHN0YXRlcyB5b3UgbWF5IHNlZSBwaWxlcyBvZiB0aGVzZSB0aGluZ3MgaGVhcGVkIHVwIGluIHRoZWlyIGNvbnNlY3JhdGVkCiAgICAgICAgICAgICAgICAgICAgc3BvdHM7IG5vciBkb2VzIGl0IG9mdGVuIGhhcHBlbiB0aGF0IGFueSBvbmUsIGRpc3JlZ2FyZGluZyB0aGUgc2FuY3RpdHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2FzZSwgZGFyZXMgZWl0aGVyIHRvIHNlY3JldGUgaW4gaGlzIGhvdXNlIHRoaW5ncyBjYXB0dXJlZCwgb3IgdGFrZSBhd2F5IHRob3NlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGVkOyBhbmQgdGhlIG1vc3Qgc2V2ZXJlIHB1bmlzaG1lbnQsIHdpdGggdG9ydHVyZSwgaGFzIGJlZW4gZXN0YWJsaXNoZWQKICAgICAgICAgICAgICAgICAgICBmb3Igc3VjaCBhIGRlZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkFwb2xsbzwvbmFtZT4sIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPk1hcnM8L25hbWU+LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI1MjYwIiByZWc9IiAgK0p1cGl0ZXIgKHJpdmVyKSwgQW50aWNvc3RpIElzbGFuZCwgUXVlYmVjLCBDYW5hZGEsIE5vcnRoIGFuZCBDZW50cmFsIEFtZXJpY2EgIiB0eXBlPSJwbGFjZSI+SnVwaXRlciA8L25hbWU+LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NaW5lcnZhPC9uYW1lPjsgcmVzcGVjdGluZyB0aGVzZQogICAgICAgICAgICAgICAgICAgIGRlaXRpZXMgdGhleSBoYXZlIGZvciB0aGUgbW9zdCBwYXJ0IHRoZSBzYW1lIGJlbGllZiBhcyBvdGhlciBuYXRpb25zOiB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+QXBvbGxvPC9uYW1lPiBhdmVydHMgZGlzZWFzZXMsIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NaW5lcnZhPC9uYW1lPiBpbXBhcnRzIHRoZSBpbnZlbnRpb24gb2YgbWFudWZhY3R1cmVzLCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyNTI2MCIgcmVnPSIgICtKdXBpdGVyIChyaXZlciksIEFudGljb3N0aSBJc2xhbmQsIFF1ZWJlYywgQ2FuYWRhLCBOb3J0aCBhbmQgQ2VudHJhbCBBbWVyaWNhICIgdHlwZT0icGxhY2UiPkp1cGl0ZXIgPC9uYW1lPiBwb3NzZXNzZXMgdGhlIHNvdmVyZWlnbnR5IG9mIHRoZSBoZWF2ZW5seSBwb3dlcnM7IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NYXJzPC9uYW1lPiBwcmVzaWRlcyBvdmVyIHdhcnMuIFRvIGhpbSwgd2hlbiB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICBkZXRlcm1pbmVkIHRvIGVuZ2FnZSBpbiBiYXR0bGUsIHRoZXkgY29tbW9ubHkgdm93IHRob3NlIHRoaW5ncyB3aGljaCB0aGV5IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgdGFrZSBpbiB3YXIuIFdoZW4gdGhleSBoYXZlIGNvbnF1ZXJlZCwgdGhleSBzYWNyaWZpY2Ugd2hhdGV2ZXIgY2FwdHVyZWQgYW5pbWFscwogICAgICAgICAgICAgICAgICAgIG1heSBoYXZlIHN1cnZpdmVkIHRoZSBjb25mbGljdCwgYW5kIGNvbGxlY3QgdGhlIG90aGVyIHRoaW5ncyBpbnRvIG9uZSBwbGFjZS4gSW4KICAgICAgICAgICAgICAgICAgICBtYW55IHN0YXRlcyB5b3UgbWF5IHNlZSBwaWxlcyBvZiB0aGVzZSB0aGluZ3MgaGVhcGVkIHVwIGluIHRoZWlyIGNvbnNlY3JhdGVkCiAgICAgICAgICAgICAgICAgICAgc3BvdHM7IG5vciBkb2VzIGl0IG9mdGVuIGhhcHBlbiB0aGF0IGFueSBvbmUsIGRpc3JlZ2FyZGluZyB0aGUgc2FuY3RpdHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2FzZSwgZGFyZXMgZWl0aGVyIHRvIHNlY3JldGUgaW4gaGlzIGhvdXNlIHRoaW5ncyBjYXB0dXJlZCwgb3IgdGFrZSBhd2F5IHRob3NlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGVkOyBhbmQgdGhlIG1vc3Qgc2V2ZXJlIHB1bmlzaG1lbnQsIHdpdGggdG9ydHVyZSwgaGFzIGJlZW4gZXN0YWJsaXNoZWQKICAgICAgICAgICAgICAgICAgICBmb3Igc3VjaCBhIGRlZWQuIDwvdHJhbnNsYXRpb24+"
translation['6.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFsbCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBhc3NlcnQgdGhhdCB0aGV5IGFyZSBkZXNjZW5kZWQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBnb2QgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXM8L25hbWU+LCBhbmQgc2F5IHRoYXQgdGhpcyB0cmFkaXRpb24gaGFzIGJlZW4gaGFuZGVkIGRvd24gYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHJ1aWRzPC9uYW1lPi4gRm9yIHRoYXQgcmVhc29uIHRoZXkgY29tcHV0ZSB0aGUgZGl2aXNpb25zIG9mIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgc2Vhc29uLCBub3QgYnkgdGhlIG51bWJlciBvZiBkYXlzLCBidXQgb2YgbmlnaHRzOyB0aGV5IGtlZXAgYmlydGhkYXlzIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBiZWdpbm5pbmdzIG9mIG1vbnRocyBhbmQgeWVhcnMgaW4gc3VjaCBhbiBvcmRlciB0aGF0IHRoZSBkYXkgZm9sbG93cyB0aGUgbmlnaHQuCiAgICAgICAgICAgICAgICAgICAgQW1vbmcgdGhlIG90aGVyIHVzYWdlcyBvZiB0aGVpciBsaWZlLCB0aGV5IGRpZmZlciBpbiB0aGlzIGZyb20gYWxtb3N0IGFsbCBvdGhlcgogICAgICAgICAgICAgICAgICAgIG5hdGlvbnMsIHRoYXQgdGhleSBkbyBub3QgcGVybWl0IHRoZWlyIGNoaWxkcmVuIHRvIGFwcHJvYWNoIHRoZW0gb3Blbmx5IHVudGlsCiAgICAgICAgICAgICAgICAgICAgdGhleSBhcmUgZ3Jvd24gdXAgc28gYXMgdG8gYmUgYWJsZSB0byBiZWFyIHRoZSBzZXJ2aWNlIG9mIHdhcjsgYW5kIHRoZXkgcmVnYXJkCiAgICAgICAgICAgICAgICAgICAgaXQgYXMgaW5kZWNvcm91cyBmb3IgYSBzb24gb2YgYm95aXNoIGFnZSB0byBzdGFuZCBpbiBwdWJsaWMgaW4gdGhlIHByZXNlbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGZhdGhlci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gYXNzZXJ0IHRoYXQgdGhleSBhcmUgZGVzY2VuZGVkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZ29kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGlzPC9uYW1lPiwgYW5kIHNheSB0aGF0IHRoaXMgdHJhZGl0aW9uIGhhcyBiZWVuIGhhbmRlZCBkb3duIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRydWlkczwvbmFtZT4uIEZvciB0aGF0IHJlYXNvbiB0aGV5IGNvbXB1dGUgdGhlIGRpdmlzaW9ucyBvZiBldmVyeQogICAgICAgICAgICAgICAgICAgIHNlYXNvbiwgbm90IGJ5IHRoZSBudW1iZXIgb2YgZGF5cywgYnV0IG9mIG5pZ2h0czsgdGhleSBrZWVwIGJpcnRoZGF5cyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgYmVnaW5uaW5ncyBvZiBtb250aHMgYW5kIHllYXJzIGluIHN1Y2ggYW4gb3JkZXIgdGhhdCB0aGUgZGF5IGZvbGxvd3MgdGhlIG5pZ2h0LgogICAgICAgICAgICAgICAgICAgIEFtb25nIHRoZSBvdGhlciB1c2FnZXMgb2YgdGhlaXIgbGlmZSwgdGhleSBkaWZmZXIgaW4gdGhpcyBmcm9tIGFsbW9zdCBhbGwgb3RoZXIKICAgICAgICAgICAgICAgICAgICBuYXRpb25zLCB0aGF0IHRoZXkgZG8gbm90IHBlcm1pdCB0aGVpciBjaGlsZHJlbiB0byBhcHByb2FjaCB0aGVtIG9wZW5seSB1bnRpbAogICAgICAgICAgICAgICAgICAgIHRoZXkgYXJlIGdyb3duIHVwIHNvIGFzIHRvIGJlIGFibGUgdG8gYmVhciB0aGUgc2VydmljZSBvZiB3YXI7IGFuZCB0aGV5IHJlZ2FyZAogICAgICAgICAgICAgICAgICAgIGl0IGFzIGluZGVjb3JvdXMgZm9yIGEgc29uIG9mIGJveWlzaCBhZ2UgdG8gc3RhbmQgaW4gcHVibGljIGluIHRoZSBwcmVzZW5jZSBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBmYXRoZXIuIDwvdHJhbnNsYXRpb24+"
translation['6.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXRldmVyIHN1bXMgb2YgbW9uZXkgdGhlIGh1c2JhbmRzIGhhdmUgcmVjZWl2ZWQgaW4gdGhlIG5hbWUgb2YgZG93cnkgZnJvbSB0aGVpcgogICAgICAgICAgICAgICAgICAgIHdpdmVzLCBtYWtpbmcgYW4gZXN0aW1hdGUgb2YgaXQsIHRoZXkgYWRkIHRoZSBzYW1lIGFtb3VudCBvdXQgb2YgdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgZXN0YXRlcy4gQW4gYWNjb3VudCBpcyBrZXB0IG9mIGFsbCB0aGlzIG1vbmV5IGNvbmpvaW50bHksIGFuZCB0aGUgcHJvZml0cyBhcmUKICAgICAgICAgICAgICAgICAgICBsYWlkIGJ5OiB3aGljaGV2ZXIgb2YgdGhlbSBzaGFsbCBoYXZlIHN1cnZpdmVkIFt0aGUgb3RoZXJdLCB0byB0aGF0IG9uZSB0aGUKICAgICAgICAgICAgICAgICAgICBwb3J0aW9uIG9mIGJvdGggcmV2ZXJ0cyB0b2dldGhlciB3aXRoIHRoZSBwcm9maXRzIG9mIHRoZSBwcmV2aW91cyB0aW1lLiBIdXNiYW5kcwogICAgICAgICAgICAgICAgICAgIGhhdmUgcG93ZXIgb2YgbGlmZSBhbmQgZGVhdGggb3ZlciB0aGVpciB3aXZlcyBhcyB3ZWxsIGFzIG92ZXIgdGhlaXIgY2hpbGRyZW46CiAgICAgICAgICAgICAgICAgICAgYW5kIHdoZW4gdGhlIGZhdGhlciBvZiBhIGZhbWlseSwgYm9ybiBpbiBhIG1vcmUgdGhhbiBjb21tb25seSBkaXN0aW5ndWlzaGVkCiAgICAgICAgICAgICAgICAgICAgcmFuaywgaGFzIGRpZWQsIGhpcyByZWxhdGlvbnMgYXNzZW1ibGUsIGFuZCwgaWYgdGhlIGNpcmN1bXN0YW5jZXMgb2YgaGlzIGRlYXRoCiAgICAgICAgICAgICAgICAgICAgYXJlIHN1c3BpY2lvdXMsIGhvbGQgYW4gaW52ZXN0aWdhdGlvbiB1cG9uIHRoZSB3aXZlcyBpbiB0aGUgbWFubmVyIGFkb3B0ZWQKICAgICAgICAgICAgICAgICAgICB0b3dhcmQgc2xhdmVzOyBhbmQsIGlmIHByb29mIGJlIG9idGFpbmVkLCBwdXQgdGhlbSB0byBzZXZlcmUgdG9ydHVyZSwgYW5kIGtpbGwKICAgICAgICAgICAgICAgICAgICB0aGVtLiBUaGVpciBmdW5lcmFscywgY29uc2lkZXJpbmcgdGhlIHN0YXRlIG9mIGNpdmlsaXphdGlvbiBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgYXJlIG1hZ25pZmljZW50IGFuZCBjb3N0bHk7IGFuZCB0aGV5IGNhc3QgaW50bwogICAgICAgICAgICAgICAgICAgIHRoZSBmaXJlIGFsbCB0aGluZ3MsIGluY2x1ZGluZyBsaXZpbmcgY3JlYXR1cmVzLCB3aGljaCB0aGV5IHN1cHBvc2UgdG8gaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgZGVhciB0byB0aGVtIHdoZW4gYWxpdmU7IGFuZCwgYSBsaXR0bGUgYmVmb3JlIHRoaXMgcGVyaW9kLCBzbGF2ZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW50cywgd2hvIHdlcmUgYXNjZXJ0YWluZWQgdG8gaGF2ZSBiZWVuIGJlbG92ZWQgYnkgdGhlbSwgd2VyZSwgYWZ0ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVndWxhciBmdW5lcmFsIHJpdGVzIHdlcmUgY29tcGxldGVkLCBidXJudCB0b2dldGhlciB3aXRoIHRoZW0uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBhcmUgbWFnbmlmaWNlbnQgYW5kIGNvc3RseTsgYW5kIHRoZXkgY2FzdCBpbnRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGZpcmUgYWxsIHRoaW5ncywgaW5jbHVkaW5nIGxpdmluZyBjcmVhdHVyZXMsIHdoaWNoIHRoZXkgc3VwcG9zZSB0byBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBkZWFyIHRvIHRoZW0gd2hlbiBhbGl2ZTsgYW5kLCBhIGxpdHRsZSBiZWZvcmUgdGhpcyBwZXJpb2QsIHNsYXZlcyBhbmQKICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbnRzLCB3aG8gd2VyZSBhc2NlcnRhaW5lZCB0byBoYXZlIGJlZW4gYmVsb3ZlZCBieSB0aGVtLCB3ZXJlLCBhZnRlciB0aGUKICAgICAgICAgICAgICAgICAgICByZWd1bGFyIGZ1bmVyYWwgcml0ZXMgd2VyZSBjb21wbGV0ZWQsIGJ1cm50IHRvZ2V0aGVyIHdpdGggdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['6.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRob3NlIHN0YXRlcyB3aGljaCBhcmUgY29uc2lkZXJlZCB0byBjb25kdWN0IHRoZWlyIGNvbW1vbndlYWx0aCBtb3JlIGp1ZGljaW91c2x5LAogICAgICAgICAgICAgICAgICAgIGhhdmUgaXQgb3JkYWluZWQgYnkgdGhlaXIgbGF3cywgdGhhdCwgaWYgYW55IHBlcnNvbiBzaGFsbCBoYXZlIGhlYXJkIGJ5IHJ1bW9yCiAgICAgICAgICAgICAgICAgICAgYW5kIHJlcG9ydCBmcm9tIGhpcyBuZWlnaGJvcnMgYW55IHRoaW5nIGNvbmNlcm5pbmcgdGhlIGNvbW1vbndlYWx0aCwgaGUgc2hhbGwKICAgICAgICAgICAgICAgICAgICBjb252ZXkgaXQgdG8gdGhlIG1hZ2lzdHJhdGUsIGFuZCBub3QgaW1wYXJ0IGl0IHRvIGFueSBvdGhlcjsgYmVjYXVzZSBpdCBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIGRpc2NvdmVyZWQgdGhhdCBpbmNvbnNpZGVyYXRlIGFuZCBpbmV4cGVyaWVuY2VkIG1lbiB3ZXJlIG9mdGVuIGFsYXJtZWQgYnkgZmFsc2UKICAgICAgICAgICAgICAgICAgICByZXBvcnRzLCBhbmQgZHJpdmVuIHRvIHNvbWUgcmFzaCBhY3QsIG9yIGVsc2UgdG9vayBoYXN0eSBtZWFzdXJlcyBpbiBhZmZhaXJzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGhpZ2hlc3QgaW1wb3J0YW5jZS4gVGhlIG1hZ2lzdHJhdGVzIGNvbmNlYWwgdGhvc2UgdGhpbmdzIHdoaWNoIHJlcXVpcmUgdG8gYmUKICAgICAgICAgICAgICAgICAgICBrZXB0IHVua25vd247IGFuZCB0aGV5IGRpc2Nsb3NlIHRvIHRoZSBwZW9wbGUgd2hhdGV2ZXIgdGhleSBkZXRlcm1pbmUgdG8gYmUKICAgICAgICAgICAgICAgICAgICBleHBlZGllbnQuIEl0IGlzIG5vdCBsYXdmdWwgdG8gc3BlYWsgb2YgdGhlIGNvbW1vbndlYWx0aCwgZXhjZXB0IGluIGNvdW5jaWwuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gZGlmZmVyIG11Y2ggZnJvbSB0aGVzZSB1c2FnZXMsIGZvciB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBuZWl0aGVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHJ1aWRzPC9uYW1lPiB0byBwcmVzaWRlIG92ZXIgc2FjcmVkIG9mZmljZXMsIG5vciBkbyB0aGV5IHBheQogICAgICAgICAgICAgICAgICAgIGdyZWF0IHJlZ2FyZCB0byBzYWNyaWZpY2VzLiBUaGV5IHJhbmsgaW4gdGhlIG51bWJlciBvZiB0aGUgZ29kcyB0aG9zZSBhbG9uZSB3aG9tCiAgICAgICAgICAgICAgICAgICAgdGhleSBiZWhvbGQsIGFuZCBieSB3aG9zZSBpbnN0cnVtZW50YWxpdHkgdGhleSBhcmUgb2J2aW91c2x5IGJlbmVmaXRlZCwgbmFtZWx5LAogICAgICAgICAgICAgICAgICAgIHRoZSBzdW4sIGZpcmUsIGFuZCB0aGUgbW9vbjsgdGhleSBoYXZlIG5vdCBoZWFyZCBvZiB0aGUgb3RoZXIgZGVpdGllcyBldmVuIGJ5CiAgICAgICAgICAgICAgICAgICAgcmVwb3J0LiBUaGVpciB3aG9sZSBsaWZlIGlzIG9jY3VwaWVkIGluIGh1bnRpbmcgYW5kIGluIHRoZSBwdXJzdWl0cyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBtaWxpdGFyeSBhcnQ7IGZyb20gY2hpbGRob29kIHRoZXkgZGV2b3RlIHRoZW1zZWx2ZXMgdG8gZmF0aWd1ZSBhbmQgaGFyZHNoaXBzLgogICAgICAgICAgICAgICAgICAgIFRob3NlIHdobyBoYXZlIHJlbWFpbmVkIGNoYXN0ZSBmb3IgdGhlIGxvbmdlc3QgdGltZSwgcmVjZWl2ZSB0aGUgZ3JlYXRlc3QKICAgICAgICAgICAgICAgICAgICBjb21tZW5kYXRpb24gYW1vbmcgdGhlaXIgcGVvcGxlOyB0aGV5IHRoaW5rIHRoYXQgYnkgdGhpcyB0aGUgZ3Jvd3RoIGlzIHByb21vdGVkLAogICAgICAgICAgICAgICAgICAgIGJ5IHRoaXMgdGhlIHBoeXNpY2FsIHBvd2VycyBhcmUgaW5jcmVhc2VkIGFuZCB0aGUgc2luZXdzIGFyZSBzdHJlbmd0aGVuZWQuIEFuZAogICAgICAgICAgICAgICAgICAgIHRvIGhhdmUgaGFkIGtub3dsZWRnZSBvZiBhIHdvbWFuIGJlZm9yZSB0aGUgdHdlbnRpZXRoIHllYXIgdGhleSByZWNrb24gYW1vbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBkaXNncmFjZWZ1bCBhY3RzOyBvZiB3aGljaCBtYXR0ZXIgdGhlcmUgaXMgbm8gY29uY2VhbG1lbnQsIGJlY2F1c2UgdGhleQogICAgICAgICAgICAgICAgICAgIGJhdGhlIHByb21pc2N1b3VzbHkgaW4gdGhlIHJpdmVycyBhbmQgW29ubHldIHVzZSBza2lucyBvciBzbWFsbCBjbG9ha3Mgb2YgZGVlcidzCiAgICAgICAgICAgICAgICAgICAgaGlkZXMsIGEgbGFyZ2UgcG9ydGlvbiBvZiB0aGUgYm9keSBiZWluZyBpbiBjb25zZXF1ZW5jZSBuYWtlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBkaWZmZXIgbXVjaCBmcm9tIHRoZXNlIHVzYWdlcywgZm9yIHRoZXkKICAgICAgICAgICAgICAgICAgICBoYXZlIG5laXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EcnVpZHM8L25hbWU+IHRvIHByZXNpZGUgb3ZlciBzYWNyZWQgb2ZmaWNlcywgbm9yIGRvIHRoZXkgcGF5CiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgcmVnYXJkIHRvIHNhY3JpZmljZXMuIFRoZXkgcmFuayBpbiB0aGUgbnVtYmVyIG9mIHRoZSBnb2RzIHRob3NlIGFsb25lIHdob20KICAgICAgICAgICAgICAgICAgICB0aGV5IGJlaG9sZCwgYW5kIGJ5IHdob3NlIGluc3RydW1lbnRhbGl0eSB0aGV5IGFyZSBvYnZpb3VzbHkgYmVuZWZpdGVkLCBuYW1lbHksCiAgICAgICAgICAgICAgICAgICAgdGhlIHN1biwgZmlyZSwgYW5kIHRoZSBtb29uOyB0aGV5IGhhdmUgbm90IGhlYXJkIG9mIHRoZSBvdGhlciBkZWl0aWVzIGV2ZW4gYnkKICAgICAgICAgICAgICAgICAgICByZXBvcnQuIFRoZWlyIHdob2xlIGxpZmUgaXMgb2NjdXBpZWQgaW4gaHVudGluZyBhbmQgaW4gdGhlIHB1cnN1aXRzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG1pbGl0YXJ5IGFydDsgZnJvbSBjaGlsZGhvb2QgdGhleSBkZXZvdGUgdGhlbXNlbHZlcyB0byBmYXRpZ3VlIGFuZCBoYXJkc2hpcHMuCiAgICAgICAgICAgICAgICAgICAgVGhvc2Ugd2hvIGhhdmUgcmVtYWluZWQgY2hhc3RlIGZvciB0aGUgbG9uZ2VzdCB0aW1lLCByZWNlaXZlIHRoZSBncmVhdGVzdAogICAgICAgICAgICAgICAgICAgIGNvbW1lbmRhdGlvbiBhbW9uZyB0aGVpciBwZW9wbGU7IHRoZXkgdGhpbmsgdGhhdCBieSB0aGlzIHRoZSBncm93dGggaXMgcHJvbW90ZWQsCiAgICAgICAgICAgICAgICAgICAgYnkgdGhpcyB0aGUgcGh5c2ljYWwgcG93ZXJzIGFyZSBpbmNyZWFzZWQgYW5kIHRoZSBzaW5ld3MgYXJlIHN0cmVuZ3RoZW5lZC4gQW5kCiAgICAgICAgICAgICAgICAgICAgdG8gaGF2ZSBoYWQga25vd2xlZGdlIG9mIGEgd29tYW4gYmVmb3JlIHRoZSB0d2VudGlldGggeWVhciB0aGV5IHJlY2tvbiBhbW9uZyB0aGUKICAgICAgICAgICAgICAgICAgICBtb3N0IGRpc2dyYWNlZnVsIGFjdHM7IG9mIHdoaWNoIG1hdHRlciB0aGVyZSBpcyBubyBjb25jZWFsbWVudCwgYmVjYXVzZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgYmF0aGUgcHJvbWlzY3VvdXNseSBpbiB0aGUgcml2ZXJzIGFuZCBbb25seV0gdXNlIHNraW5zIG9yIHNtYWxsIGNsb2FrcyBvZiBkZWVyJ3MKICAgICAgICAgICAgICAgICAgICBoaWRlcywgYSBsYXJnZSBwb3J0aW9uIG9mIHRoZSBib2R5IGJlaW5nIGluIGNvbnNlcXVlbmNlIG5ha2VkLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXkgZG8gbm90IHBheSBtdWNoIGF0dGVudGlvbiB0byBhZ3JpY3VsdHVyZSwgYW5kIGEgbGFyZ2UgcG9ydGlvbiBvZiB0aGVpciBmb29kCiAgICAgICAgICAgICAgICAgICAgY29uc2lzdHMgaW4gbWlsaywgY2hlZXNlLCBhbmQgZmxlc2g7IG5vciBoYXMgYW55IG9uZSBhIGZpeGVkIHF1YW50aXR5IG9mIGxhbmQgb3IKICAgICAgICAgICAgICAgICAgICBoaXMgb3duIGluZGl2aWR1YWwgbGltaXRzOyBidXQgdGhlIG1hZ2lzdHJhdGVzIGFuZCB0aGUgbGVhZGluZyBtZW4gZWFjaCB5ZWFyCiAgICAgICAgICAgICAgICAgICAgYXBwb3J0aW9uIHRvIHRoZSB0cmliZXMgYW5kIGZhbWlsaWVzLCB3aG8gaGF2ZSB1bml0ZWQgdG9nZXRoZXIsIGFzIG11Y2ggbGFuZCBhcywKICAgICAgICAgICAgICAgICAgICBhbmQgaW4gdGhlIHBsYWNlIGluIHdoaWNoLCB0aGV5IHRoaW5rIHByb3BlciwgYW5kIHRoZSB5ZWFyIGFmdGVyIGNvbXBlbCB0aGVtIHRvCiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlIGVsc2V3aGVyZS4gRm9yIHRoaXMgZW5hY3RtZW50IHRoZXkgYWR2YW5jZSBtYW55IHJlYXNvbnMtbGVzdCBzZWR1Y2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgbG9uZy1jb250aW51ZWQgY3VzdG9tLCB0aGV5IG1heSBleGNoYW5nZSB0aGVpciBhcmRvciBpbiB0aGUgd2FnaW5nIG9mIHdhciBmb3IKICAgICAgICAgICAgICAgICAgICBhZ3JpY3VsdHVyZTsgbGVzdCB0aGV5IG1heSBiZSBhbnhpb3VzIHRvIGFjcXVpcmUgZXh0ZW5zaXZlIGVzdGF0ZXMsIGFuZCB0aGUgbW9yZQogICAgICAgICAgICAgICAgICAgIHBvd2VyZnVsIGRyaXZlIHRoZSB3ZWFrZXIgZnJvbSB0aGVpciBwb3NzZXNzaW9uczsgbGVzdCB0aGV5IGNvbnN0cnVjdCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhvdXNlcyB3aXRoIHRvbyBncmVhdCBhIGRlc2lyZSB0byBhdm9pZCBjb2xkIGFuZCBoZWF0OyBsZXN0IHRoZSBkZXNpcmUgb2Ygd2VhbHRoCiAgICAgICAgICAgICAgICAgICAgc3ByaW5nIHVwLCBmcm9tIHdoaWNoIGNhdXNlIGRpdmlzaW9ucyBhbmQgZGlzY29yZHMgYXJpc2U7IGFuZCB0aGF0IHRoZXkgbWF5IGtlZXAKICAgICAgICAgICAgICAgICAgICB0aGUgY29tbW9uIHBlb3BsZSBpbiBhIGNvbnRlbnRlZCBzdGF0ZSBvZiBtaW5kLCB3aGVuIGVhY2ggc2VlcyBoaXMgb3duIG1lYW5zCiAgICAgICAgICAgICAgICAgICAgcGxhY2VkIG9uIGFuIGVxdWFsaXR5IHdpdGggW3Rob3NlIG9mXSB0aGUgbW9zdCBwb3dlcmZ1bC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IGlzIHRoZSBncmVhdGVzdCBnbG9yeSB0byB0aGUgc2V2ZXJhbCBzdGF0ZXMgdG8gaGF2ZSBhcyB3aWRlIGRlc2VydHMgYXMKICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSBhcm91bmQgdGhlbSwgdGhlaXIgZnJvbnRpZXJzIGhhdmluZyBiZWVuIGxhaWQgd2FzdGUuIFRoZXkgY29uc2lkZXIgdGhpcwogICAgICAgICAgICAgICAgICAgIHRoZSByZWFsIGV2aWRlbmNlIG9mIHRoZWlyIHByb3dlc3MsIHRoYXQgdGhlaXIgbmVpZ2hib3JzIHNoYWxsIGJlIGRyaXZlbiBvdXQgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBsYW5kcyBhbmQgYWJhbmRvbiB0aGVtLCBhbmQgdGhhdCBubyBvbmUgZGFyZSBzZXR0bGUgbmVhciB0aGVtOyBhdCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHRpbWUgdGhleSB0aGluayB0aGF0IHRoZXkgc2hhbGwgYmUgb24gdGhhdCBhY2NvdW50IHRoZSBtb3JlIHNlY3VyZSwgYmVjYXVzZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSByZW1vdmVkIHRoZSBhcHByZWhlbnNpb24gb2YgYSBzdWRkZW4gaW5jdXJzaW9uLiBXaGVuIGEgc3RhdGUgZWl0aGVyIHJlcGVscwogICAgICAgICAgICAgICAgICAgIHdhciB3YWdlZCBhZ2FpbnN0IGl0LCBvciB3YWdlcyBpdCBhZ2FpbnN0IGFub3RoZXIsIG1hZ2lzdHJhdGVzIGFyZSBjaG9zZW4gdG8KICAgICAgICAgICAgICAgICAgICBwcmVzaWRlIG92ZXIgdGhhdCB3YXIgd2l0aCBzdWNoIGF1dGhvcml0eSwgdGhhdCB0aGV5IGhhdmUgcG93ZXIgb2YgbGlmZSBhbmQKICAgICAgICAgICAgICAgICAgICBkZWF0aC4gSW4gcGVhY2UgdGhlcmUgaXMgbm8gY29tbW9uIG1hZ2lzdHJhdGUsIGJ1dCB0aGUgY2hpZWZzIG9mIHByb3ZpbmNlcyBhbmQKICAgICAgICAgICAgICAgICAgICBjYW50b25zIGFkbWluaXN0ZXIganVzdGljZSBhbmQgZGV0ZXJtaW5lIGNvbnRyb3ZlcnNpZXMgYW1vbmcgdGhlaXIgb3duIHBlb3BsZS4KICAgICAgICAgICAgICAgICAgICBSb2JiZXJpZXMgd2hpY2ggYXJlIGNvbW1pdHRlZCBiZXlvbmQgdGhlIGJvdW5kYXJpZXMgb2YgZWFjaCBzdGF0ZSBiZWFyIG5vCiAgICAgICAgICAgICAgICAgICAgaW5mYW15LCBhbmQgdGhleSBhdm93IHRoYXQgdGhlc2UgYXJlIGNvbW1pdHRlZCBmb3IgdGhlIHB1cnBvc2Ugb2YgZGlzY2lwbGluaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgeW91dGggYW5kIG9mIHByZXZlbnRpbmcgc2xvdGguIEFuZCB3aGVuIGFueSBvZiB0aGVpciBjaGllZnMgaGFzIHNhaWQgaW4gYW4KICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSAidGhhdCBoZSB3aWxsIGJlIHRoZWlyIGxlYWRlciwgbGV0IHRob3NlIHdobyBhcmUgd2lsbGluZyB0byBmb2xsb3csCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBpbiB0aGVpciBuYW1lczsiIHRoZXkgd2hvIGFwcHJvdmUgb2YgYm90aCB0aGUgZW50ZXJwcmlzZSBhbmQgdGhlIG1hbiBhcmlzZQogICAgICAgICAgICAgICAgICAgIGFuZCBwcm9taXNlIHRoZWlyIGFzc2lzdGFuY2UgYW5kIGFyZSBhcHBsYXVkZWQgYnkgdGhlIHBlb3BsZTsgc3VjaCBvZiB0aGVtIGFzCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBub3QgZm9sbG93ZWQgaGltIGFyZSBhY2NvdW50ZWQgaW4gdGhlIG51bWJlciBvZiBkZXNlcnRlcnMgYW5kIHRyYWl0b3JzLCBhbmQKICAgICAgICAgICAgICAgICAgICBjb25maWRlbmNlIGluIGFsbCBtYXR0ZXJzIGlzIGFmdGVyd2FyZCByZWZ1c2VkIHRoZW0uIFRvIGluanVyZSBndWVzdHMgdGhleQogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCBhcyBpbXBpb3VzOyB0aGV5IGRlZmVuZCBmcm9tIHdyb25nIHRob3NlIHdobyBoYXZlIGNvbWUgdG8gdGhlbSBmb3IgYW55CiAgICAgICAgICAgICAgICAgICAgcHVycG9zZSB3aGF0ZXZlciwgYW5kIGVzdGVlbSB0aGVtIGludmlvbGFibGU7IHRvIHRoZW0gdGhlIGhvdXNlcyBvZiBhbGwgYXJlIG9wZW4KICAgICAgICAgICAgICAgICAgICBhbmQgbWFpbnRlbmFuY2UgaXMgZnJlZWx5IHN1cHBsaWVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB0aGVyZSB3YXMgZm9ybWVybHkgYSB0aW1lIHdoZW4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gZXhjZWxsZWQKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGluIHByb3dlc3MsIGFuZCB3YWdlZCB3YXIgb24gdGhlbQogICAgICAgICAgICAgICAgICAgIG9mZmVuc2l2ZWx5LCBhbmQsIG9uIGFjY291bnQgb2YgdGhlIGdyZWF0IG51bWJlciBvZiB0aGVpciBwZW9wbGUgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGluc3VmZmljaWVuY3kgb2YgdGhlaXIgbGFuZCwgc2VudCBjb2xvbmllcyBvdmVyIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LgogICAgICAgICAgICAgICAgICAgIEFjY29yZGluZ2x5LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Wb2xjYWUgVGVjdG9zYWdlczwvbmFtZT4sIHNlaXplZCBvbiB0aG9zZSBwYXJ0cyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAwODQiIHJlZz0iICArR2VybWFueSBbMTAuNSw1MS41XSAobmF0aW9uKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcm1hbnkgPC9uYW1lPiB3aGljaCBhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBmcnVpdGZ1bCBbYW5kIGxpZV0gYXJvdW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlcmN5bmlhbjwvbmFtZT4gZm9yZXN0LCAod2hpY2gsIEkKICAgICAgICAgICAgICAgICAgICBwZXJjZWl2ZSwgd2FzIGtub3duIGJ5IHJlcG9ydCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVyYXRvc3RoZW5lczwvbmFtZT4gYW5kIHNvbWUgb3RoZXIKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HcmVla3M8L25hbWU+LCBhbmQgd2hpY2ggdGhleSBjYWxsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3JjeW5pYTwvbmFtZT4pLCBhbmQgc2V0dGxlZAogICAgICAgICAgICAgICAgICAgIHRoZXJlLiBXaGljaCBuYXRpb24gdG8gdGhpcyB0aW1lIHJldGFpbnMgaXRzIHBvc2l0aW9uIGluIHRob3NlIHNldHRsZW1lbnRzLCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXMgYSB2ZXJ5IGhpZ2ggY2hhcmFjdGVyIGZvciBqdXN0aWNlIGFuZCBtaWxpdGFyeSBtZXJpdDsgbm93IGFsc28gdGhleSBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBzYW1lIHNjYXJjaXR5LCBpbmRpZ2VuY2UsIGhhcmRpaG9vZCwgYXMgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgYW5kIHVzZSB0aGUgc2FtZSBmb29kIGFuZCBkcmVzczsgYnV0IHRoZWlyIHByb3hpbWl0eSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBQcm92aW5jZSBhbmQga25vd2xlZGdlIG9mIGNvbW1vZGl0aWVzIGZyb20gY291bnRyaWVzIGJleW9uZCB0aGUgc2VhIHN1cHBsaWVzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gbWFueSB0aGluZ3MgdGVuZGluZyB0byBsdXh1cnkgYXMgd2VsbCBhcwogICAgICAgICAgICAgICAgICAgIGNpdmlsaXphdGlvbi4gQWNjdXN0b21lZCBieSBkZWdyZWVzIHRvIGJlIG92ZXJtYXRjaGVkIGFuZCB3b3JzdGVkIGluIG1hbnkKICAgICAgICAgICAgICAgICAgICBlbmdhZ2VtZW50cywgdGhleSBkbyBub3QgZXZlbiBjb21wYXJlIHRoZW1zZWx2ZXMgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiBpbiBwcm93ZXNzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBleGNlbGxlZAogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gaW4gcHJvd2VzcywgYW5kIHdhZ2VkIHdhciBvbiB0aGVtCiAgICAgICAgICAgICAgICAgICAgb2ZmZW5zaXZlbHksIGFuZCwgb24gYWNjb3VudCBvZiB0aGUgZ3JlYXQgbnVtYmVyIG9mIHRoZWlyIHBlb3BsZSBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgaW5zdWZmaWNpZW5jeSBvZiB0aGVpciBsYW5kLCBzZW50IGNvbG9uaWVzIG92ZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lIDwvbmFtZT4uCiAgICAgICAgICAgICAgICAgICAgQWNjb3JkaW5nbHksIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZvbGNhZSBUZWN0b3NhZ2VzPC9uYW1lPiwgc2VpemVkIG9uIHRob3NlIHBhcnRzIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDA4NCIgcmVnPSIgICtHZXJtYW55IFsxMC41LDUxLjVdIChuYXRpb24pLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VybWFueSA8L25hbWU+IHdoaWNoIGFyZSB0aGUKICAgICAgICAgICAgICAgICAgICBtb3N0IGZydWl0ZnVsIFthbmQgbGllXSBhcm91bmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVyY3luaWFuPC9uYW1lPiBmb3Jlc3QsICh3aGljaCwgSQogICAgICAgICAgICAgICAgICAgIHBlcmNlaXZlLCB3YXMga25vd24gYnkgcmVwb3J0IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXJhdG9zdGhlbmVzPC9uYW1lPiBhbmQgc29tZSBvdGhlcgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdyZWVrczwvbmFtZT4sIGFuZCB3aGljaCB0aGV5IGNhbGwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5PcmN5bmlhPC9uYW1lPiksIGFuZCBzZXR0bGVkCiAgICAgICAgICAgICAgICAgICAgdGhlcmUuIFdoaWNoIG5hdGlvbiB0byB0aGlzIHRpbWUgcmV0YWlucyBpdHMgcG9zaXRpb24gaW4gdGhvc2Ugc2V0dGxlbWVudHMsIGFuZAogICAgICAgICAgICAgICAgICAgIGhhcyBhIHZlcnkgaGlnaCBjaGFyYWN0ZXIgZm9yIGp1c3RpY2UgYW5kIG1pbGl0YXJ5IG1lcml0OyBub3cgYWxzbyB0aGV5IGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHNhbWUgc2NhcmNpdHksIGluZGlnZW5jZSwgaGFyZGlob29kLCBhcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCBhbmQgdXNlIHRoZSBzYW1lIGZvb2QgYW5kIGRyZXNzOyBidXQgdGhlaXIgcHJveGltaXR5IHRvIHRoZQogICAgICAgICAgICAgICAgICAgIFByb3ZpbmNlIGFuZCBrbm93bGVkZ2Ugb2YgY29tbW9kaXRpZXMgZnJvbSBjb3VudHJpZXMgYmV5b25kIHRoZSBzZWEgc3VwcGxpZXMgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBtYW55IHRoaW5ncyB0ZW5kaW5nIHRvIGx1eHVyeSBhcyB3ZWxsIGFzCiAgICAgICAgICAgICAgICAgICAgY2l2aWxpemF0aW9uLiBBY2N1c3RvbWVkIGJ5IGRlZ3JlZXMgdG8gYmUgb3Zlcm1hdGNoZWQgYW5kIHdvcnN0ZWQgaW4gbWFueQogICAgICAgICAgICAgICAgICAgIGVuZ2FnZW1lbnRzLCB0aGV5IGRvIG5vdCBldmVuIGNvbXBhcmUgdGhlbXNlbHZlcyB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IGluIHByb3dlc3MuIDwvdHJhbnNsYXRpb24+"
translation['6.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBicmVhZHRoIG9mIHRoaXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZXJjeW5pYW48L25hbWU+IGZvcmVzdCwgd2hpY2ggaGFzIGJlZW4gcmVmZXJyZWQgdG8KICAgICAgICAgICAgICAgICAgICBhYm92ZSwgaXMgdG8gYSBxdWljayB0cmF2ZWxlciwgYSBqb3VybmV5IG9mIG5pbmUgZGF5cy4gRm9yIGl0IGNhbiBub3QgYmUKICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgY29tcHV0ZWQsIG5vciBhcmUgdGhleSBhY3F1YWludGVkIHdpdGggdGhlIG1lYXN1cmVzIG9mIHJvYWRzLiBJdAogICAgICAgICAgICAgICAgICAgIGJlZ2lucyBhdCB0aGUgZnJvbnRpZXJzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+SGVsdmV0aWk8L25hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5lbWV0ZXM8L25hbWU+LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5SYXVyYWNpPC9uYW1lPiwgYW5kIGV4dGVuZHMgaW4gYSByaWdodCBsaW5lCiAgICAgICAgICAgICAgICAgICAgYWxvbmcgdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjkxMyIgcmVnPSIgICtEYW51YmUgKHJpdmVyKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkRhbnViZSA8L25hbWU+IHRvIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EYWNpPC9uYW1lPiBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hcnRlczwvbmFtZT47IGl0IGJlbmRzIHRoZW5jZSB0byB0aGUgbGVmdAogICAgICAgICAgICAgICAgICAgIGluIGEgZGlmZmVyZW50IGRpcmVjdGlvbiBmcm9tIHRoZSByaXZlciwgYW5kIG93aW5nIHRvIGl0cyBleHRlbnQgdG91Y2hlcyB0aGUKICAgICAgICAgICAgICAgICAgICBjb25maW5lcyBvZiBtYW55IG5hdGlvbnM7IG5vciBpcyB0aGVyZSBhbnkgcGVyc29uIGJlbG9uZ2luZyB0byB0aGlzIHBhcnQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMDg0IiByZWc9IiAgK0dlcm1hbnkgWzEwLjUsNTEuNV0gKG5hdGlvbiksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZXJtYW55IDwvbmFtZT4gd2hvIHNheXMgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGVpdGhlciBoYXMgZ29uZSB0byB0aGUgZXh0cmVtaXR5IG9mIHRoYXQgZm9yZXN0LCB0aG91Z2ggaGUgaGFkIGFkdmFuY2VkIGEKICAgICAgICAgICAgICAgICAgICBqb3VybmV5IG9mIHNpeHR5IGRheXMsIG9yIGhhcyBoZWFyZCBpbiB3aGF0IHBsYWNlIGl0IGJlZ2lucy4gSXQgaXMgY2VydGFpbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgbWFueSBraW5kcyBvZiB3aWxkIGJlYXN0IGFyZSBwcm9kdWNlZCBpbiBpdCB3aGljaCBoYXZlIG5vdCBiZWVuIHNlZW4gaW4gb3RoZXIKICAgICAgICAgICAgICAgICAgICBwYXJ0czsgb2Ygd2hpY2ggdGhlIGZvbGxvd2luZyBhcmUgc3VjaCBhcyBkaWZmZXIgcHJpbmNpcGFsbHkgZnJvbSBvdGhlciBhbmltYWxzLAogICAgICAgICAgICAgICAgICAgIGFuZCBhcHBlYXIgd29ydGh5IG9mIGJlaW5nIGNvbW1pdHRlZCB0byByZWNvcmQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlcmN5bmlhbjwvbmFtZT4gZm9yZXN0LCB3aGljaCBoYXMgYmVlbiByZWZlcnJlZCB0bwogICAgICAgICAgICAgICAgICAgIGFib3ZlLCBpcyB0byBhIHF1aWNrIHRyYXZlbGVyLCBhIGpvdXJuZXkgb2YgbmluZSBkYXlzLiBGb3IgaXQgY2FuIG5vdCBiZQogICAgICAgICAgICAgICAgICAgIG90aGVyd2lzZSBjb21wdXRlZCwgbm9yIGFyZSB0aGV5IGFjcXVhaW50ZWQgd2l0aCB0aGUgbWVhc3VyZXMgb2Ygcm9hZHMuIEl0CiAgICAgICAgICAgICAgICAgICAgYmVnaW5zIGF0IHRoZSBmcm9udGllcnMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5IZWx2ZXRpaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmVtZXRlczwvbmFtZT4sIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJhdXJhY2k8L25hbWU+LCBhbmQgZXh0ZW5kcyBpbiBhIHJpZ2h0IGxpbmUKICAgICAgICAgICAgICAgICAgICBhbG9uZyB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyOTEzIiByZWc9IiAgK0RhbnViZSAocml2ZXIpLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+RGFudWJlIDwvbmFtZT4gdG8gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRhY2k8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFydGVzPC9uYW1lPjsgaXQgYmVuZHMgdGhlbmNlIHRvIHRoZSBsZWZ0CiAgICAgICAgICAgICAgICAgICAgaW4gYSBkaWZmZXJlbnQgZGlyZWN0aW9uIGZyb20gdGhlIHJpdmVyLCBhbmQgb3dpbmcgdG8gaXRzIGV4dGVudCB0b3VjaGVzIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmZpbmVzIG9mIG1hbnkgbmF0aW9uczsgbm9yIGlzIHRoZXJlIGFueSBwZXJzb24gYmVsb25naW5nIHRvIHRoaXMgcGFydCBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAwODQiIHJlZz0iICArR2VybWFueSBbMTAuNSw1MS41XSAobmF0aW9uKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcm1hbnkgPC9uYW1lPiB3aG8gc2F5cyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgZWl0aGVyIGhhcyBnb25lIHRvIHRoZSBleHRyZW1pdHkgb2YgdGhhdCBmb3Jlc3QsIHRob3VnaCBoZSBoYWQgYWR2YW5jZWQgYQogICAgICAgICAgICAgICAgICAgIGpvdXJuZXkgb2Ygc2l4dHkgZGF5cywgb3IgaGFzIGhlYXJkIGluIHdoYXQgcGxhY2UgaXQgYmVnaW5zLiBJdCBpcyBjZXJ0YWluIHRoYXQKICAgICAgICAgICAgICAgICAgICBtYW55IGtpbmRzIG9mIHdpbGQgYmVhc3QgYXJlIHByb2R1Y2VkIGluIGl0IHdoaWNoIGhhdmUgbm90IGJlZW4gc2VlbiBpbiBvdGhlcgogICAgICAgICAgICAgICAgICAgIHBhcnRzOyBvZiB3aGljaCB0aGUgZm9sbG93aW5nIGFyZSBzdWNoIGFzIGRpZmZlciBwcmluY2lwYWxseSBmcm9tIG90aGVyIGFuaW1hbHMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGFwcGVhciB3b3J0aHkgb2YgYmVpbmcgY29tbWl0dGVkIHRvIHJlY29yZC4gPC90cmFuc2xhdGlvbj4="
translation['6.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGlzIGFuIG94IG9mIHRoZSBzaGFwZSBvZiBhIHN0YWcsIGJldHdlZW4gd2hvc2UgZWFycyBhIGhvcm4gcmlzZXMgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBtaWRkbGUgb2YgdGhlIGZvcmVoZWFkLCBoaWdoZXIgYW5kIHN0cmFpZ2h0ZXIgdGhhbiB0aG9zZSBob3JucyB3aGljaCBhcmUga25vd24KICAgICAgICAgICAgICAgICAgICB0byB1cy4gRnJvbSB0aGUgdG9wIG9mIHRoaXMsIGJyYW5jaGVzLCBsaWtlIHBhbG1zLCBzdHJldGNoIG91dCBhIGNvbnNpZGVyYWJsZQogICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlLiBUaGUgc2hhcGUgb2YgdGhlIGZlbWFsZSBhbmQgb2YgdGhlIG1hbGUgaXMgdGhlLCBzYW1lOyB0aGUgYXBwZWFyYW5jZQogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgc2l6ZSBvZiB0aGUgaG9ybnMgaXMgdGhlIHNhbWUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGFyZSBhbHNvIFthbmltYWxzXSB3aGljaCBhcmUgY2FsbGVkIGVsa3MuIFRoZSBzaGFwZSBvZiB0aGVzZSwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHZhcmllZCBjb2xvciBvZiB0aGVpciBza2lucywgaXMgbXVjaCBsaWtlIHJvZXMsIGJ1dCBpbiBzaXplIHRoZXkgc3VycGFzcyB0aGVtIGEKICAgICAgICAgICAgICAgICAgICBsaXR0bGUgYW5kIGFyZSBkZXN0aXR1dGUgb2YgaG9ybnMsIGFuZCBoYXZlIGxlZ3Mgd2l0aG91dCBqb2ludHMgYW5kIGxpZ2F0dXJlczsKICAgICAgICAgICAgICAgICAgICBub3IgZG8gdGhleSBsaWUgZG93biBmb3IgdGhlIHB1cnBvc2Ugb2YgcmVzdCwgbm9yLCBpZiB0aGV5IGhhdmUgYmVlbiB0aHJvd24gZG93bgogICAgICAgICAgICAgICAgICAgIGJ5IGFueSBhY2NpZGVudCwgY2FuIHRoZXkgcmFpc2Ugb3IgbGlmdCB0aGVtc2VsdmVzIHVwLiBUcmVlcyBzZXJ2ZSBhcyBiZWRzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlbTsgdGhleSBsZWFuIHRoZW1zZWx2ZXMgYWdhaW5zdCB0aGVtLCBhbmQgdGh1cyByZWNsaW5pbmcgb25seSBzbGlnaHRseSwgdGhleQogICAgICAgICAgICAgICAgICAgIHRha2UgdGhlaXIgcmVzdDsgd2hlbiB0aGUgaHVudHNtZW4gaGF2ZSBkaXNjb3ZlcmVkIGZyb20gdGhlIGZvb3RzdGVwcyBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIGFuaW1hbHMgd2hpdGhlciB0aGV5IGFyZSBhY2N1c3RvbWVkIHRvIGJldGFrZSB0aGVtc2VsdmVzLCB0aGV5IGVpdGhlciB1bmRlcm1pbmUKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIHRyZWVzIGF0IHRoZSByb290cywgb3IgY3V0IGludG8gdGhlbSBzbyBmYXIgdGhhdCB0aGUgdXBwZXIgcGFydCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB0cmVlcyBtYXkgYXBwZWFyIHRvIGJlIGxlZnQgc3RhbmRpbmcuIFdoZW4gdGhleSBoYXZlIGxlYW50IHVwb24gdGhlbSwgYWNjb3JkaW5nCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlaXIgaGFiaXQsIHRoZXkga25vY2sgZG93biBieSB0aGVpciB3ZWlnaHQgdGhlIHVuc3VwcG9ydGVkIHRyZWVzLCBhbmQgZmFsbAogICAgICAgICAgICAgICAgICAgIGRvd24gdGhlbXNlbHZlcyBhbG9uZyB3aXRoIHRoZW0uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGlzIGEgdGhpcmQga2luZCwgY29uc2lzdGluZyBvZiB0aG9zZSBhbmltYWxzIHdoaWNoIGFyZSBjYWxsZWQgdXJpLiBUaGVzZQogICAgICAgICAgICAgICAgICAgIGFyZSBhIGxpdHRsZSBiZWxvdyB0aGUgZWxlcGhhbnQgaW4gc2l6ZSwgYW5kIG9mIHRoZSBhcHBlYXJhbmNlLCBjb2xvciwgYW5kIHNoYXBlCiAgICAgICAgICAgICAgICAgICAgb2YgYSBidWxsLiBUaGVpciBzdHJlbmd0aCBhbmQgc3BlZWQgYXJlIGV4dHJhb3JkaW5hcnk7IHRoZXkgc3BhcmUgbmVpdGhlciBtYW4KICAgICAgICAgICAgICAgICAgICBub3Igd2lsZCBiZWFzdCB3aGljaCB0aGV5IGhhdmUgZXNwaWVkLiBUaGVzZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHRha2Ugd2l0aCBtdWNoIHBhaW5zIGluIHBpdHMgYW5kIGtpbGwgdGhlbS4gVGhlIHlvdW5nIG1lbgogICAgICAgICAgICAgICAgICAgIGhhcmRlbiB0aGVtc2VsdmVzIHdpdGggdGhpcyBleGVyY2lzZSwgYW5kIHByYWN0aWNlIHRoZW1zZWx2ZXMgaW4gdGhpcyBraW5kIG9mCiAgICAgICAgICAgICAgICAgICAgaHVudGluZywgYW5kIHRob3NlIHdobyBoYXZlIHNsYWluIHRoZSBncmVhdGVzdCBudW1iZXIgb2YgdGhlbSwgaGF2aW5nIHByb2R1Y2VkCiAgICAgICAgICAgICAgICAgICAgdGhlIGhvcm5zIGluIHB1YmxpYywgdG8gc2VydmUgYXMgZXZpZGVuY2UsIHJlY2VpdmUgZ3JlYXQgcHJhaXNlLiBCdXQgbm90IGV2ZW4KICAgICAgICAgICAgICAgICAgICB3aGVuIHRha2VuIHZlcnkgeW91bmcgY2FuIHRoZXkgYmUgcmVuZGVyZWQgZmFtaWxpYXIgdG8gbWVuIGFuZCB0YW1lZC4gVGhlIHNpemUsCiAgICAgICAgICAgICAgICAgICAgc2hhcGUsIGFuZCBhcHBlYXJhbmNlIG9mIHRoZWlyIGhvcm5zIGRpZmZlciBtdWNoIGZyb20gdGhlIGhvcm5zIG9mIG91ciBveGVuLgogICAgICAgICAgICAgICAgICAgIFRoZXNlIHRoZXkgYW54aW91c2x5IHNlZWsgYWZ0ZXIsIGFuZCBiaW5kIGF0IHRoZSB0aXBzIHdpdGggc2lsdmVyLCBhbmQgdXNlIGFzCiAgICAgICAgICAgICAgICAgICAgY3VwcyBhdCB0aGVpciBtb3N0IHN1bXB0dW91cyBlbnRlcnRhaW5tZW50cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiB0YWtlIHdpdGggbXVjaCBwYWlucyBpbiBwaXRzIGFuZCBraWxsIHRoZW0uIFRoZSB5b3VuZyBtZW4KICAgICAgICAgICAgICAgICAgICBoYXJkZW4gdGhlbXNlbHZlcyB3aXRoIHRoaXMgZXhlcmNpc2UsIGFuZCBwcmFjdGljZSB0aGVtc2VsdmVzIGluIHRoaXMga2luZCBvZgogICAgICAgICAgICAgICAgICAgIGh1bnRpbmcsIGFuZCB0aG9zZSB3aG8gaGF2ZSBzbGFpbiB0aGUgZ3JlYXRlc3QgbnVtYmVyIG9mIHRoZW0sIGhhdmluZyBwcm9kdWNlZAogICAgICAgICAgICAgICAgICAgIHRoZSBob3JucyBpbiBwdWJsaWMsIHRvIHNlcnZlIGFzIGV2aWRlbmNlLCByZWNlaXZlIGdyZWF0IHByYWlzZS4gQnV0IG5vdCBldmVuCiAgICAgICAgICAgICAgICAgICAgd2hlbiB0YWtlbiB2ZXJ5IHlvdW5nIGNhbiB0aGV5IGJlIHJlbmRlcmVkIGZhbWlsaWFyIHRvIG1lbiBhbmQgdGFtZWQuIFRoZSBzaXplLAogICAgICAgICAgICAgICAgICAgIHNoYXBlLCBhbmQgYXBwZWFyYW5jZSBvZiB0aGVpciBob3JucyBkaWZmZXIgbXVjaCBmcm9tIHRoZSBob3JucyBvZiBvdXIgb3hlbi4KICAgICAgICAgICAgICAgICAgICBUaGVzZSB0aGV5IGFueGlvdXNseSBzZWVrIGFmdGVyLCBhbmQgYmluZCBhdCB0aGUgdGlwcyB3aXRoIHNpbHZlciwgYW5kIHVzZSBhcwogICAgICAgICAgICAgICAgICAgIGN1cHMgYXQgdGhlaXIgbW9zdCBzdW1wdHVvdXMgZW50ZXJ0YWlubWVudHMuIDwvdHJhbnNsYXRpb24+"
translation['6.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYWZ0ZXIgaGUgZGlzY292ZXJlZCB0aHJvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlViaWFuPC9uYW1lPiBzY291dHMgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4gaGFkIHJldGlyZWQgaW50byB0aGVpcgogICAgICAgICAgICAgICAgICAgIHdvb2RzLCBhcHByZWhlbmRpbmcgYSBzY2FyY2l0eSBvZiBjb3JuLCBiZWNhdXNlLCBhcyB3ZSBoYXZlIG9ic2VydmVkIGFib3ZlLCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHBheSB2ZXJ5IGxpdHRsZSBhdHRlbnRpb24gdG8gYWdyaWN1bHR1cmUsCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQgbm90IHRvIHByb2NlZWQgYW55IGZ1cnRoZXI7IGJ1dCwgdGhhdCBoZSBtaWdodCBub3QgYWx0b2dldGhlciByZWxpZXZlCiAgICAgICAgICAgICAgICAgICAgdGhlIGJhcmJhcmlhbnMgZnJvbSB0aGUgZmVhciBvZiBoaXMgcmV0dXJuLCBhbmQgdGhhdCBoZSBtaWdodCBkZWxheSB0aGVpcgogICAgICAgICAgICAgICAgICAgIHN1Y2NvcnMsIGhhdmluZyBsZWQgYmFjayBoaXMgYXJteSwgaGUgYnJlYWtzIGRvd24sIHRvIHRoZSBsZW5ndGggb2YgMjAwIGZlZXQsCiAgICAgICAgICAgICAgICAgICAgdGhlIGZ1cnRoZXIgZW5kIG9mIHRoZSBicmlkZ2UsIHdoaWNoIGpvaW5lZCB0aGUgYmFua3Mgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VWJpaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYW5kIGF0IHRoZSBleHRyZW1pdHkgb2YgdGhlIGJyaWRnZSByYWlzZXMgdG93ZXJzIG9mIGZvdXIgc3RvcmllcywgYW5kIHN0YXRpb25zIGEKICAgICAgICAgICAgICAgICAgICBndWFyZCBvZiB0d2VsdmUgY29ob3J0cyBmb3IgdGhlIHB1cnBvc2Ugb2YgZGVmZW5kaW5nIHRoZSBicmlkZ2UsIGFuZCBzdHJlbmd0aGVucwogICAgICAgICAgICAgICAgICAgIHRoZSBwbGFjZSB3aXRoIGNvbnNpZGVyYWJsZSBmb3J0aWZpY2F0aW9ucy4gT3ZlciB0aGF0IGZvcnQgYW5kIGd1YXJkIGhlCiAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Qy4gVm9sY2F0aXVzIFR1bGx1czwvbmFtZT4sIGEgeW91bmcgbWFuOyBoZSBoaW1zZWxmLAogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIGNvcm4gYmVnYW4gdG8gcmlwZW4sIGhhdmluZyBzZXQgZm9ydGggZm9yIHRoZSB3YXIgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiAodGhyb3VnaCB0aGUgZm9yZXN0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJkdWVubmE8L25hbWU+LCB3aGljaCBpcwogICAgICAgICAgICAgICAgICAgIHRoZSBsYXJnZXN0IG9mIGFsbCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGFuZCByZWFjaGVzIGZyb20gdGhlIGJhbmtzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lIDwvbmFtZT4gYW5kIHRoZSBmcm9udGllcnMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiB0byB0aG9zZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+LCBhbmQgZXh0ZW5kcyBvdmVyIG1vcmUKICAgICAgICAgICAgICAgICAgICB0aGFuIDUwMCBtaWxlcyksIGhlIHNlbmRzIGZvcndhcmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MLiBNaW51Y2l1cyBCYXNpbHVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHdpdGggYWxsIHRoZSBjYXZhbHJ5LCB0byB0cnkgaWYgaGUgbWlnaHQgZ2FpbiBhbnkgYWR2YW50YWdlIGJ5IHJhcGlkIG1hcmNoZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIGFkdmFudGFnZSBvZiB0aW1lLCBoZSB3YXJucyBoaW0gdG8gZm9yYmlkIGZpcmVzIGJlaW5nIG1hZGUgaW4gdGhlIGNhbXAsIGxlc3QKICAgICAgICAgICAgICAgICAgICBhbnkgaW5kaWNhdGlvbiBvZiBoaXMgYXBwcm9hY2ggYmUgZ2l2ZW4gYXQgYSBkaXN0YW5jZTogaGUgdGVsbHMgaGltIHRoYXQgaGUgd2lsbAogICAgICAgICAgICAgICAgICAgIGZvbGxvdyBpbW1lZGlhdGVseS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYWZ0ZXIgaGUgZGlzY292ZXJlZCB0aHJvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlViaWFuPC9uYW1lPiBzY291dHMgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWV2aTwvbmFtZT4gaGFkIHJldGlyZWQgaW50byB0aGVpcgogICAgICAgICAgICAgICAgICAgIHdvb2RzLCBhcHByZWhlbmRpbmcgYSBzY2FyY2l0eSBvZiBjb3JuLCBiZWNhdXNlLCBhcyB3ZSBoYXZlIG9ic2VydmVkIGFib3ZlLCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHBheSB2ZXJ5IGxpdHRsZSBhdHRlbnRpb24gdG8gYWdyaWN1bHR1cmUsCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQgbm90IHRvIHByb2NlZWQgYW55IGZ1cnRoZXI7IGJ1dCwgdGhhdCBoZSBtaWdodCBub3QgYWx0b2dldGhlciByZWxpZXZlCiAgICAgICAgICAgICAgICAgICAgdGhlIGJhcmJhcmlhbnMgZnJvbSB0aGUgZmVhciBvZiBoaXMgcmV0dXJuLCBhbmQgdGhhdCBoZSBtaWdodCBkZWxheSB0aGVpcgogICAgICAgICAgICAgICAgICAgIHN1Y2NvcnMsIGhhdmluZyBsZWQgYmFjayBoaXMgYXJteSwgaGUgYnJlYWtzIGRvd24sIHRvIHRoZSBsZW5ndGggb2YgMjAwIGZlZXQsCiAgICAgICAgICAgICAgICAgICAgdGhlIGZ1cnRoZXIgZW5kIG9mIHRoZSBicmlkZ2UsIHdoaWNoIGpvaW5lZCB0aGUgYmFua3Mgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VWJpaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYW5kIGF0IHRoZSBleHRyZW1pdHkgb2YgdGhlIGJyaWRnZSByYWlzZXMgdG93ZXJzIG9mIGZvdXIgc3RvcmllcywgYW5kIHN0YXRpb25zIGEKICAgICAgICAgICAgICAgICAgICBndWFyZCBvZiB0d2VsdmUgY29ob3J0cyBmb3IgdGhlIHB1cnBvc2Ugb2YgZGVmZW5kaW5nIHRoZSBicmlkZ2UsIGFuZCBzdHJlbmd0aGVucwogICAgICAgICAgICAgICAgICAgIHRoZSBwbGFjZSB3aXRoIGNvbnNpZGVyYWJsZSBmb3J0aWZpY2F0aW9ucy4gT3ZlciB0aGF0IGZvcnQgYW5kIGd1YXJkIGhlCiAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Qy4gVm9sY2F0aXVzIFR1bGx1czwvbmFtZT4sIGEgeW91bmcgbWFuOyBoZSBoaW1zZWxmLAogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIGNvcm4gYmVnYW4gdG8gcmlwZW4sIGhhdmluZyBzZXQgZm9ydGggZm9yIHRoZSB3YXIgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiAodGhyb3VnaCB0aGUgZm9yZXN0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJkdWVubmE8L25hbWU+LCB3aGljaCBpcwogICAgICAgICAgICAgICAgICAgIHRoZSBsYXJnZXN0IG9mIGFsbCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGFuZCByZWFjaGVzIGZyb20gdGhlIGJhbmtzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lIDwvbmFtZT4gYW5kIHRoZSBmcm9udGllcnMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiB0byB0aG9zZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXJ2aWk8L25hbWU+LCBhbmQgZXh0ZW5kcyBvdmVyIG1vcmUKICAgICAgICAgICAgICAgICAgICB0aGFuIDUwMCBtaWxlcyksIGhlIHNlbmRzIGZvcndhcmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MLiBNaW51Y2l1cyBCYXNpbHVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHdpdGggYWxsIHRoZSBjYXZhbHJ5LCB0byB0cnkgaWYgaGUgbWlnaHQgZ2FpbiBhbnkgYWR2YW50YWdlIGJ5IHJhcGlkIG1hcmNoZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIGFkdmFudGFnZSBvZiB0aW1lLCBoZSB3YXJucyBoaW0gdG8gZm9yYmlkIGZpcmVzIGJlaW5nIG1hZGUgaW4gdGhlIGNhbXAsIGxlc3QKICAgICAgICAgICAgICAgICAgICBhbnkgaW5kaWNhdGlvbiBvZiBoaXMgYXBwcm9hY2ggYmUgZ2l2ZW4gYXQgYSBkaXN0YW5jZTogaGUgdGVsbHMgaGltIHRoYXQgaGUgd2lsbAogICAgICAgICAgICAgICAgICAgIGZvbGxvdyBpbW1lZGlhdGVseS4gPC90cmFuc2xhdGlvbj4="
translation['6.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+QmFzaWx1czwvbmFtZT4gZG9lcyBhcyBoZSB3YXMgY29tbWFuZGVkOyBoYXZpbmcgcGVyZm9ybWVkIGhpcwogICAgICAgICAgICAgICAgICAgIG1hcmNoIHJhcGlkbHksIGFuZCBldmVuIHN1cnBhc3NlZCB0aGUgZXhwZWN0YXRpb25zIG9mIGFsbCwgaGUgc3VycHJpc2VzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGZpZWxkcyBtYW55IG5vdCBleHBlY3RpbmcgaGltOyB0aHJvdWdoIHRoZWlyIGluZm9ybWF0aW9uIGhlIGFkdmFuY2VzIHRvd2FyZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiBoaW1zZWxmLCB0byB0aGUgcGxhY2UgaW4gd2hpY2ggaGUgd2FzIHNhaWQgdG8gYmUgd2l0aAogICAgICAgICAgICAgICAgICAgIGEgZmV3IGhvcnNlLiBGb3J0dW5lIGFjY29tcGxpc2hlcyBtdWNoLCBub3Qgb25seSBpbiBvdGhlciBtYXR0ZXJzLCBidXQgYWxzbyBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBhcnQgb2Ygd2FyLiBGb3IgYXMgaXQgaGFwcGVuZWQgYnkgYSByZW1hcmthYmxlIGNoYW5jZSwgdGhhdCBoZSBmZWxsIHVwb24KICAgICAgICAgICAgICAgICAgICAgICAgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+XSBoaW1zZWxmIHVuZ3VhcmRlZCBhbmQgdW5wcmVwYXJlZCwgYW5kIHRoYXQgaGlzCiAgICAgICAgICAgICAgICAgICAgYXJyaXZhbCB3YXMgc2VlbiBieSB0aGUgcGVvcGxlIGJlZm9yZSB0aGUgcmVwb3J0IG9yIGluZm9ybWF0aW9uIG9mIGhpcyBhcnJpdmFsCiAgICAgICAgICAgICAgICAgICAgd2FzIGNhcnJpZWQgdGhpdGhlcjsgc28gaXQgd2FzIGFuIGluY2lkZW50IG9mIGV4dHJhb3JkaW5hcnkgZm9ydHVuZSB0aGF0LAogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIGV2ZXJ5IGltcGxlbWVudCBvZiB3YXIgd2hpY2ggaGUgd2FzIGFjY3VzdG9tZWQgdG8gaGF2ZSBhYm91dCBoaW0gd2FzCiAgICAgICAgICAgICAgICAgICAgc2VpemVkLCBhbmQgaGlzIGNoYXJpb3RzIGFuZCBob3JzZXMgc3VycHJpc2VkLCB5ZXQgaGUgaGltc2VsZiBlc2NhcGVkIGRlYXRoLiBCdXQKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgZWZmZWN0ZWQgb3dpbmcgdG8gdGhpcyBjaXJjdW1zdGFuY2UsIHRoYXQgaGlzIGhvdXNlIGJlaW5nIHN1cnJvdW5kZWQgYnkgYQogICAgICAgICAgICAgICAgICAgIHdvb2QgKGFzIGFyZSBnZW5lcmFsbHkgdGhlIGR3ZWxsaW5ncyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aG8sIGZvciB0aGUgcHVycG9zZSBvZiBhdm9pZGluZyBoZWF0LCBtb3N0bHkgc2VlayB0aGUgbmVpZ2hib3Job29kIG9mIHdvb2RzIGFuZAogICAgICAgICAgICAgICAgICAgIHJpdmVycyksIGhpcyBhdHRlbmRhbnRzIGFuZCBmcmllbmRzIGluIGEgbmFycm93IHNwb3Qgc3VzdGFpbmVkIGZvciBhIHNob3J0IHRpbWUKICAgICAgICAgICAgICAgICAgICB0aGUgYXR0YWNrIG9mIG91ciBob3JzZS4gV2hpbGUgdGhleSB3ZXJlIGZpZ2h0aW5nLCBvbmUgb2YgaGlzIGZvbGxvd2VycyBtb3VudGVkCiAgICAgICAgICAgICAgICAgICAgaGltIG9uIGEgaG9yc2U7IHRoZSB3b29kcyBzaGVsdGVyZWQgaGltIGFzIGhlIGZsZWQuIFRodXMgZm9ydHVuZSB0ZW5kZWQgbXVjaAogICAgICAgICAgICAgICAgICAgIGJvdGggdG93YXJkIGhpcyBlbmNvdW50ZXJpbmcgYW5kIGhpcyBlc2NhcGluZyBkYW5nZXIuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkJhc2lsdXM8L25hbWU+IGRvZXMgYXMgaGUgd2FzIGNvbW1hbmRlZDsgaGF2aW5nIHBlcmZvcm1lZCBoaXMKICAgICAgICAgICAgICAgICAgICBtYXJjaCByYXBpZGx5LCBhbmQgZXZlbiBzdXJwYXNzZWQgdGhlIGV4cGVjdGF0aW9ucyBvZiBhbGwsIGhlIHN1cnByaXNlcyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaWVsZHMgbWFueSBub3QgZXhwZWN0aW5nIGhpbTsgdGhyb3VnaCB0aGVpciBpbmZvcm1hdGlvbiBoZSBhZHZhbmNlcyB0b3dhcmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4gaGltc2VsZiwgdG8gdGhlIHBsYWNlIGluIHdoaWNoIGhlIHdhcyBzYWlkIHRvIGJlIHdpdGgKICAgICAgICAgICAgICAgICAgICBhIGZldyBob3JzZS4gRm9ydHVuZSBhY2NvbXBsaXNoZXMgbXVjaCwgbm90IG9ubHkgaW4gb3RoZXIgbWF0dGVycywgYnV0IGFsc28gaW4KICAgICAgICAgICAgICAgICAgICB0aGUgYXJ0IG9mIHdhci4gRm9yIGFzIGl0IGhhcHBlbmVkIGJ5IGEgcmVtYXJrYWJsZSBjaGFuY2UsIHRoYXQgaGUgZmVsbCB1cG9uCiAgICAgICAgICAgICAgICAgICAgICAgIFs8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPl0gaGltc2VsZiB1bmd1YXJkZWQgYW5kIHVucHJlcGFyZWQsIGFuZCB0aGF0IGhpcwogICAgICAgICAgICAgICAgICAgIGFycml2YWwgd2FzIHNlZW4gYnkgdGhlIHBlb3BsZSBiZWZvcmUgdGhlIHJlcG9ydCBvciBpbmZvcm1hdGlvbiBvZiBoaXMgYXJyaXZhbAogICAgICAgICAgICAgICAgICAgIHdhcyBjYXJyaWVkIHRoaXRoZXI7IHNvIGl0IHdhcyBhbiBpbmNpZGVudCBvZiBleHRyYW9yZGluYXJ5IGZvcnR1bmUgdGhhdCwKICAgICAgICAgICAgICAgICAgICBhbHRob3VnaCBldmVyeSBpbXBsZW1lbnQgb2Ygd2FyIHdoaWNoIGhlIHdhcyBhY2N1c3RvbWVkIHRvIGhhdmUgYWJvdXQgaGltIHdhcwogICAgICAgICAgICAgICAgICAgIHNlaXplZCwgYW5kIGhpcyBjaGFyaW90cyBhbmQgaG9yc2VzIHN1cnByaXNlZCwgeWV0IGhlIGhpbXNlbGYgZXNjYXBlZCBkZWF0aC4gQnV0CiAgICAgICAgICAgICAgICAgICAgaXQgd2FzIGVmZmVjdGVkIG93aW5nIHRvIHRoaXMgY2lyY3Vtc3RhbmNlLCB0aGF0IGhpcyBob3VzZSBiZWluZyBzdXJyb3VuZGVkIGJ5IGEKICAgICAgICAgICAgICAgICAgICB3b29kIChhcyBhcmUgZ2VuZXJhbGx5IHRoZSBkd2VsbGluZ3Mgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgd2hvLCBmb3IgdGhlIHB1cnBvc2Ugb2YgYXZvaWRpbmcgaGVhdCwgbW9zdGx5IHNlZWsgdGhlIG5laWdoYm9yaG9vZCBvZiB3b29kcyBhbmQKICAgICAgICAgICAgICAgICAgICByaXZlcnMpLCBoaXMgYXR0ZW5kYW50cyBhbmQgZnJpZW5kcyBpbiBhIG5hcnJvdyBzcG90IHN1c3RhaW5lZCBmb3IgYSBzaG9ydCB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGhlIGF0dGFjayBvZiBvdXIgaG9yc2UuIFdoaWxlIHRoZXkgd2VyZSBmaWdodGluZywgb25lIG9mIGhpcyBmb2xsb3dlcnMgbW91bnRlZAogICAgICAgICAgICAgICAgICAgIGhpbSBvbiBhIGhvcnNlOyB0aGUgd29vZHMgc2hlbHRlcmVkIGhpbSBhcyBoZSBmbGVkLiBUaHVzIGZvcnR1bmUgdGVuZGVkIG11Y2gKICAgICAgICAgICAgICAgICAgICBib3RoIHRvd2FyZCBoaXMgZW5jb3VudGVyaW5nIGFuZCBoaXMgZXNjYXBpbmcgZGFuZ2VyLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4gZGlkIG5vdCBjb2xsZWN0IGhpcyBmb3JjZXMgZnJvbSBjb29sIGRlbGliZXJhdGlvbiwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGhlIGNvbnNpZGVyZWQgaGUgb3VnaHQgbm90IHRvIGVuZ2FnZSBpbiBhIGJhdHRsZSwgb3IgW3doZXRoZXJdIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGRlYmFycmVkIGJ5IHRpbWUgYW5kIHByZXZlbnRlZCBieSB0aGUgc3VkZGVuIGFycml2YWwgb2Ygb3VyIGhvcnNlLCB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZWQgdGhlIHJlc3Qgb2YgdGhlIGFybXkgd2FzIGNsb3NlbHkgZm9sbG93aW5nLCBpcyBkb3VidGZ1bDogYnV0IGNlcnRhaW5seSwKICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGluZyBtZXNzZW5nZXJzIHRocm91Z2ggdGhlIGNvdW50cnksIGhlIG9yZGVyZWQgZXZlcnkgb25lIHRvIHByb3ZpZGUgZm9yCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZjsgYW5kIGEgcGFydCBvZiB0aGVtIGZsZWQgaW50byB0aGUgZm9yZXN0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJkdWVubmE8L25hbWU+LCBhIHBhcnQKICAgICAgICAgICAgICAgICAgICBpbnRvIHRoZSBleHRlbnNpdmUgbW9yYXNzZXM7IHRob3NlIHdobyB3ZXJlIG5lYXJlc3QgdGhlIG9jZWFuIGNvbmNlYWxlZAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgaW4gdGhlIGlzbGFuZHMgd2hpY2ggdGhlIHRpZGVzIHVzdWFsbHkgZm9ybTsgbWFueSwgZGVwYXJ0aW5nIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGVpciB0ZXJyaXRvcmllcywgY29tbWl0dGVkIHRoZW1zZWx2ZXMgYW5kIGFsbCB0aGVpciBwb3NzZXNzaW9ucyB0byBwZXJmZWN0CiAgICAgICAgICAgICAgICAgICAgc3RyYW5nZXJzLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdGl2b2xjdXM8L25hbWU+LCBraW5nIG9mIG9uZSBoYWxmIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVidXJvbmVzPC9uYW1lPiwgd2hvIGhhZCBlbnRlcmVkIGludG8gdGhlIGRlc2lnbiB0b2dldGhlciB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+LCBzaW5jZSwgYmVpbmcgbm93IHdvcm4gb3V0IGJ5IGFnZSwgaGUgd2FzIHVuYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIGVuZHVyZSB0aGUgZmF0aWd1ZSBlaXRoZXIgb2Ygd2FyIG9yIGZsaWdodCwgaGF2aW5nIGN1cnNlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHdpdGggZXZlcnkgaW1wcmVjYXRpb24sIGFzIHRoZSBwZXJzb24gd2hvIGhhZCBiZWVuIHRoZSBjb250cml2ZXIgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIG1lYXN1cmUsIGRlc3Ryb3llZCBoaW1zZWxmIHdpdGggdGhlIGp1aWNlIG9mIHRoZSB5ZXctdHJlZSwgb2Ygd2hpY2ggdGhlcmUgaXMgYQogICAgICAgICAgICAgICAgICAgIGdyZWF0IGFidW5kYW5jZSBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDA4NCIgcmVnPSIgICtHZXJtYW55IFsxMC41LDUxLjVdIChuYXRpb24pLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VybWFueSA8L25hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4gZGlkIG5vdCBjb2xsZWN0IGhpcyBmb3JjZXMgZnJvbSBjb29sIGRlbGliZXJhdGlvbiwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGhlIGNvbnNpZGVyZWQgaGUgb3VnaHQgbm90IHRvIGVuZ2FnZSBpbiBhIGJhdHRsZSwgb3IgW3doZXRoZXJdIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGRlYmFycmVkIGJ5IHRpbWUgYW5kIHByZXZlbnRlZCBieSB0aGUgc3VkZGVuIGFycml2YWwgb2Ygb3VyIGhvcnNlLCB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZWQgdGhlIHJlc3Qgb2YgdGhlIGFybXkgd2FzIGNsb3NlbHkgZm9sbG93aW5nLCBpcyBkb3VidGZ1bDogYnV0IGNlcnRhaW5seSwKICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGluZyBtZXNzZW5nZXJzIHRocm91Z2ggdGhlIGNvdW50cnksIGhlIG9yZGVyZWQgZXZlcnkgb25lIHRvIHByb3ZpZGUgZm9yCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZjsgYW5kIGEgcGFydCBvZiB0aGVtIGZsZWQgaW50byB0aGUgZm9yZXN0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJkdWVubmE8L25hbWU+LCBhIHBhcnQKICAgICAgICAgICAgICAgICAgICBpbnRvIHRoZSBleHRlbnNpdmUgbW9yYXNzZXM7IHRob3NlIHdobyB3ZXJlIG5lYXJlc3QgdGhlIG9jZWFuIGNvbmNlYWxlZAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgaW4gdGhlIGlzbGFuZHMgd2hpY2ggdGhlIHRpZGVzIHVzdWFsbHkgZm9ybTsgbWFueSwgZGVwYXJ0aW5nIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGVpciB0ZXJyaXRvcmllcywgY29tbWl0dGVkIHRoZW1zZWx2ZXMgYW5kIGFsbCB0aGVpciBwb3NzZXNzaW9ucyB0byBwZXJmZWN0CiAgICAgICAgICAgICAgICAgICAgc3RyYW5nZXJzLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdGl2b2xjdXM8L25hbWU+LCBraW5nIG9mIG9uZSBoYWxmIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVidXJvbmVzPC9uYW1lPiwgd2hvIGhhZCBlbnRlcmVkIGludG8gdGhlIGRlc2lnbiB0b2dldGhlciB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+LCBzaW5jZSwgYmVpbmcgbm93IHdvcm4gb3V0IGJ5IGFnZSwgaGUgd2FzIHVuYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIGVuZHVyZSB0aGUgZmF0aWd1ZSBlaXRoZXIgb2Ygd2FyIG9yIGZsaWdodCwgaGF2aW5nIGN1cnNlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHdpdGggZXZlcnkgaW1wcmVjYXRpb24sIGFzIHRoZSBwZXJzb24gd2hvIGhhZCBiZWVuIHRoZSBjb250cml2ZXIgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIG1lYXN1cmUsIGRlc3Ryb3llZCBoaW1zZWxmIHdpdGggdGhlIGp1aWNlIG9mIHRoZSB5ZXctdHJlZSwgb2Ygd2hpY2ggdGhlcmUgaXMgYQogICAgICAgICAgICAgICAgICAgIGdyZWF0IGFidW5kYW5jZSBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDA4NCIgcmVnPSIgICtHZXJtYW55IFsxMC41LDUxLjVdIChuYXRpb24pLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VybWFueSA8L25hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+U2VndWk8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbmRydXNpPC9uYW1lPiwgb2YgdGhlIG5hdGlvbiBhbmQKICAgICAgICAgICAgICAgICAgICBudW1iZXIgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgYW5kIHdobyBhcmUgYmV0d2VlbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5FYnVyb25lczwvbmFtZT4gYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NDciIHJlZz0iICArVHJpZXIgWzYuNjUsNDkuNzVdIChpbmhhYml0ZWQgcGxhY2UpLCBUcmllciwgUmhlaW5sYW5kLVBmYWx6LCBHZXJtYW55LCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+VHJldmlyaSA8L25hbWU+LCBzZW50IGVtYmFzc2Fkb3JzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0bwogICAgICAgICAgICAgICAgICAgIGVudHJlYXQgdGhhdCBoZSB3b3VsZCBub3QgcmVnYXJkIHRoZW0gaW4gdGhlIG51bWJlciBvZiBoaXMgZW5lbWllcywgbm9yIGNvbnNpZGVyCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgY2F1c2Ugb2YgYWxsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gb24gdGhpcyBzaWRlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+IHdhcyBvbmUgYW5kIHRoZSBzYW1lOyB0aGF0IHRoZXkgaGFkIGZvcm1lZCBubyBwbGFucyBvZiB3YXIsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhhZCBzZW50IG5vIGF1eGlsaWFyaWVzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+LiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhhdmluZyBhc2NlcnRhaW5lZCB0aGlzIGZhY3QgYnkgYW4gZXhhbWluYXRpb24gb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgcHJpc29uZXJzLCBjb21tYW5kZWQgdGhhdCBpZiBhbnkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWJ1cm9uZXM8L25hbWU+IGluIHRoZWlyIGZsaWdodAogICAgICAgICAgICAgICAgICAgIGhhZCByZXBhaXJlZCB0byB0aGVtLCB0aGV5IHNob3VsZCBiZSBzZW50IGJhY2sgdG8gaGltOyBoZSBhc3N1cmVzIHRoZW0gdGhhdCBpZgogICAgICAgICAgICAgICAgICAgIHRoZXkgZGlkIHRoYXQsIGhlIHdpbGwgbm90IGluanVyZSB0aGVpciB0ZXJyaXRvcmllcy4gVGhlbiwgaGF2aW5nIGRpdmlkZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgZm9yY2VzIGludG8gdGhyZWUgcGFydHMsIGhlIHNlbnQgdGhlIGJhZ2dhZ2Ugb2YgYWxsIHRoZSBsZWdpb25zIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXR1Y2E8L25hbWU+LiBUaGF0IGlzIHRoZSBuYW1lIG9mIGEgZm9ydC4gVGhpcyBpcyBuZWFybHkgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbWlkZGxlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVidXJvbmVzPC9uYW1lPiwgd2hlcmUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5UaXR1cml1czwvbmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+QXVydW5jdWxlaXVzPC9uYW1lPiBoYWQgYmVlbiBxdWFydGVyZWQgZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgICAgICAgICAgICAgd2ludGVyaW5nLiBUaGlzIHBsYWNlIGhlIHNlbGVjdGVkIGFzIHdlbGwgb24gb3RoZXIgYWNjb3VudHMgYXMgYmVjYXVzZSB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpY2F0aW9ucyBvZiB0aGUgcHJldmlvdXMgeWVhciByZW1haW5lZCwgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCByZWxpZXZlIHRoZQogICAgICAgICAgICAgICAgICAgIGxhYm9yIG9mIHRoZSBzb2xkaWVycy4gSGUgbGVmdCB0aGUgZm91cnRlZW50aCBsZWdpb24gYXMgYSBndWFyZCBmb3IgdGhlIGJhZ2dhZ2UsCiAgICAgICAgICAgICAgICAgICAgb25lIG9mIHRob3NlIHRocmVlIHdoaWNoIGhlIGhhZCBsYXRlbHkgcmFpc2VkIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IG92ZXIuIE92ZXIgdGhhdCBsZWdpb24gYW5kIGNhbXAgaGUgcGxhY2VzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+US4gVHVsbGl1cwogICAgICAgICAgICAgICAgICAgICAgICBDaWNlcm88L25hbWU+IGFuZCBnaXZlcyBoaW0gMjAwIGhvcnNlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlNlZ3VpPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db25kcnVzaTwvbmFtZT4sIG9mIHRoZSBuYXRpb24gYW5kCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIGFuZCB3aG8gYXJlIGJldHdlZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWJ1cm9uZXM8L25hbWU+IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiwgc2VudCBlbWJhc3NhZG9ycyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdG8KICAgICAgICAgICAgICAgICAgICBlbnRyZWF0IHRoYXQgaGUgd291bGQgbm90IHJlZ2FyZCB0aGVtIGluIHRoZSBudW1iZXIgb2YgaGlzIGVuZW1pZXMsIG5vciBjb25zaWRlcgogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGNhdXNlIG9mIGFsbCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IG9uIHRoaXMgc2lkZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiB3YXMgb25lIGFuZCB0aGUgc2FtZTsgdGhhdCB0aGV5IGhhZCBmb3JtZWQgbm8gcGxhbnMgb2Ygd2FyLAogICAgICAgICAgICAgICAgICAgIGFuZCBoYWQgc2VudCBubyBhdXhpbGlhcmllcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPi4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgYXNjZXJ0YWluZWQgdGhpcyBmYWN0IGJ5IGFuIGV4YW1pbmF0aW9uIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIHByaXNvbmVycywgY29tbWFuZGVkIHRoYXQgaWYgYW55IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVidXJvbmVzPC9uYW1lPiBpbiB0aGVpciBmbGlnaHQKICAgICAgICAgICAgICAgICAgICBoYWQgcmVwYWlyZWQgdG8gdGhlbSwgdGhleSBzaG91bGQgYmUgc2VudCBiYWNrIHRvIGhpbTsgaGUgYXNzdXJlcyB0aGVtIHRoYXQgaWYKICAgICAgICAgICAgICAgICAgICB0aGV5IGRpZCB0aGF0LCBoZSB3aWxsIG5vdCBpbmp1cmUgdGhlaXIgdGVycml0b3JpZXMuIFRoZW4sIGhhdmluZyBkaXZpZGVkIGhpcwogICAgICAgICAgICAgICAgICAgIGZvcmNlcyBpbnRvIHRocmVlIHBhcnRzLCBoZSBzZW50IHRoZSBiYWdnYWdlIG9mIGFsbCB0aGUgbGVnaW9ucyB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFkdWF0dWNhPC9uYW1lPi4gVGhhdCBpcyB0aGUgbmFtZSBvZiBhIGZvcnQuIFRoaXMgaXMgbmVhcmx5IGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1pZGRsZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5FYnVyb25lczwvbmFtZT4sIHdoZXJlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+VGl0dXJpdXM8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkF1cnVuY3VsZWl1czwvbmFtZT4gaGFkIGJlZW4gcXVhcnRlcmVkIGZvciB0aGUgcHVycG9zZSBvZgogICAgICAgICAgICAgICAgICAgIHdpbnRlcmluZy4gVGhpcyBwbGFjZSBoZSBzZWxlY3RlZCBhcyB3ZWxsIG9uIG90aGVyIGFjY291bnRzIGFzIGJlY2F1c2UgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9ydGlmaWNhdGlvbnMgb2YgdGhlIHByZXZpb3VzIHllYXIgcmVtYWluZWQsIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgcmVsaWV2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBsYWJvciBvZiB0aGUgc29sZGllcnMuIEhlIGxlZnQgdGhlIGZvdXJ0ZWVudGggbGVnaW9uIGFzIGEgZ3VhcmQgZm9yIHRoZSBiYWdnYWdlLAogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aG9zZSB0aHJlZSB3aGljaCBoZSBoYWQgbGF0ZWx5IHJhaXNlZCBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiIHJlZz0iSXRhbHkgWzEyLjgzMyw0Mi44MzNdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5JdGFseTwvbmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBvdmVyLiBPdmVyIHRoYXQgbGVnaW9uIGFuZCBjYW1wIGhlIHBsYWNlcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlEuIFR1bGxpdXMKICAgICAgICAgICAgICAgICAgICAgICAgQ2ljZXJvPC9uYW1lPiBhbmQgZ2l2ZXMgaGltIDIwMCBob3JzZS4gPC90cmFuc2xhdGlvbj4="
translation['6.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyBkaXZpZGVkIHRoZSBhcm15LCBoZSBvcmRlcnMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5ULiBMYWJpZW51czwvbmFtZT4gdG8KICAgICAgICAgICAgICAgICAgICBwcm9jZWVkIHdpdGggdGhyZWUgbGVnaW9ucyB0b3dhcmQgdGhlIG9jZWFuIGludG8gdGhvc2UgcGFydHMgd2hpY2ggYm9yZGVyIG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lbmFwaWk8L25hbWU+OyBoZSBzZW5kcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkMuIFRyZWJvbml1czwvbmFtZT4gd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgbGlrZSBudW1iZXIgb2YgbGVnaW9ucyB0byBsYXkgd2FzdGUgdGhhdCBkaXN0cmljdCB3aGljaCBsaWVzIGNvbnRpZ3VvdXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWR1YXR1Y2k8L25hbWU+OyBoZSBoaW1zZWxmIGRldGVybWluZXMgdG8gZ28gd2l0aCB0aGUgcmVtYWluaW5nIHRocmVlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODczMCIgcmVnPSIgICtTYW1icmUgKHJpdmVyKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlNhbWJyZSA8L25hbWU+LCB3aGljaCBmbG93cyBpbnRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY4NjUiIHJlZz0iICArTWV1c2UgWzUsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TWV1c2UgPC9uYW1lPiwgYW5kIHRvIHRoZSBtb3N0IHJlbW90ZSBwYXJ0cyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyZHVlbm5hPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aGl0aGVyIGhlIGhlYXJkIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4gaGFkIGdvbmUgd2l0aCBhIGZldyBob3JzZS4gV2hlbgogICAgICAgICAgICAgICAgICAgIGRlcGFydGluZywgaGUgcHJvbWlzZXMgdGhhdCBoZSB3aWxsIHJldHVybiBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgc2V2ZW50aCBkYXksIG9uCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggZGF5IGhlIHdhcyBhd2FyZSBjb3JuIHdhcyBkdWUgdG8gdGhhdCBsZWdpb24gd2hpY2ggd2FzIGJlaW5nIGxlZnQgaW4KICAgICAgICAgICAgICAgICAgICBnYXJyaXNvbi4gSGUgZGlyZWN0cyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5UcmVib25pdXM8L25hbWU+IHRvIHJldHVybiBieSB0aGUgc2FtZSBkYXksIGlmIHRoZXkgY2FuIGRvIHNvIGFncmVlYWJseSB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBpbnRlcmVzdHMgb2YgdGhlIHJlcHVibGljOyBzbyB0aGF0IHRoZWlyIG1lYXN1cmVzIGhhdmluZyBiZWVuIG11dHVhbGx5CiAgICAgICAgICAgICAgICAgICAgaW1wYXJ0ZWQsIGFuZCB0aGUgcGxhbnMgb2YgdGhlIGVuZW15IGhhdmluZyBiZWVuIGRpc2NvdmVyZWQsIHRoZXkgbWlnaHQgYmUgYWJsZQogICAgICAgICAgICAgICAgICAgIHRvIGNvbW1lbmNlIGEgZGlmZmVyZW50IGxpbmUgb2Ygb3BlcmF0aW9ucy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+VC4gTGFiaWVudXM8L25hbWU+IHRvCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZCB3aXRoIHRocmVlIGxlZ2lvbnMgdG93YXJkIHRoZSBvY2VhbiBpbnRvIHRob3NlIHBhcnRzIHdoaWNoIGJvcmRlciBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZW5hcGlpPC9uYW1lPjsgaGUgc2VuZHMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DLiBUcmVib25pdXM8L25hbWU+IHdpdGggYQogICAgICAgICAgICAgICAgICAgIGxpa2UgbnVtYmVyIG9mIGxlZ2lvbnMgdG8gbGF5IHdhc3RlIHRoYXQgZGlzdHJpY3Qgd2hpY2ggbGllcyBjb250aWd1b3VzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFkdWF0dWNpPC9uYW1lPjsgaGUgaGltc2VsZiBkZXRlcm1pbmVzIHRvIGdvIHdpdGggdGhlIHJlbWFpbmluZyB0aHJlZQogICAgICAgICAgICAgICAgICAgIHRvIHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg3MzAiIHJlZz0iICArU2FtYnJlIChyaXZlciksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5TYW1icmUgPC9uYW1lPiwgd2hpY2ggZmxvd3MgaW50byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2ODY1IiByZWc9IiAgK01ldXNlIFs1LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPk1ldXNlIDwvbmFtZT4sIGFuZCB0byB0aGUgbW9zdCByZW1vdGUgcGFydHMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmR1ZW5uYTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgd2hpdGhlciBoZSBoZWFyZCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+IGhhZCBnb25lIHdpdGggYSBmZXcgaG9yc2UuIFdoZW4KICAgICAgICAgICAgICAgICAgICBkZXBhcnRpbmcsIGhlIHByb21pc2VzIHRoYXQgaGUgd2lsbCByZXR1cm4gYmVmb3JlIHRoZSBlbmQgb2YgdGhlIHNldmVudGggZGF5LCBvbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIGRheSBoZSB3YXMgYXdhcmUgY29ybiB3YXMgZHVlIHRvIHRoYXQgbGVnaW9uIHdoaWNoIHdhcyBiZWluZyBsZWZ0IGluCiAgICAgICAgICAgICAgICAgICAgZ2Fycmlzb24uIEhlIGRpcmVjdHMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+VHJlYm9uaXVzPC9uYW1lPiB0byByZXR1cm4gYnkgdGhlIHNhbWUgZGF5LCBpZiB0aGV5IGNhbiBkbyBzbyBhZ3JlZWFibHkgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgaW50ZXJlc3RzIG9mIHRoZSByZXB1YmxpYzsgc28gdGhhdCB0aGVpciBtZWFzdXJlcyBoYXZpbmcgYmVlbiBtdXR1YWxseQogICAgICAgICAgICAgICAgICAgIGltcGFydGVkLCBhbmQgdGhlIHBsYW5zIG9mIHRoZSBlbmVteSBoYXZpbmcgYmVlbiBkaXNjb3ZlcmVkLCB0aGV5IG1pZ2h0IGJlIGFibGUKICAgICAgICAgICAgICAgICAgICB0byBjb21tZW5jZSBhIGRpZmZlcmVudCBsaW5lIG9mIG9wZXJhdGlvbnMuIDwvdHJhbnNsYXRpb24+"
translation['6.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIHdhcywgYXMgd2UgaGF2ZSBhYm92ZSBvYnNlcnZlZCwgbm8gcmVndWxhciBhcm15LCBub3IgYSB0b3duLCBub3IgYSBnYXJyaXNvbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIGNvdWxkIGRlZmVuZCBpdHNlbGYgYnkgYXJtczsgYnV0IHRoZSBwZW9wbGUgd2VyZSBzY2F0dGVyZWQgaW4gYWxsCiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9ucy4gV2hlcmUgZWl0aGVyIGEgaGlkZGVuIHZhbGxleSwgb3IgYSB3b29keSBzcG90LCBvciBhIGRpZmZpY3VsdCBtb3Jhc3MKICAgICAgICAgICAgICAgICAgICBmdXJuaXNoZWQgYW55IGhvcGUgb2YgcHJvdGVjdGlvbiBvciBvZiBzZWN1cml0eSB0byBhbnkgb25lLCB0aGVyZSBoZSBoYWQgZml4ZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmLiBUaGVzZSBwbGFjZXMgd2VyZSBrbm93biB0byB0aG9zZSB3aG8gZHdlbHQgaW4gdGhlIG5laWdoYm9yaG9vZCwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIG1hdHRlciBkZW1hbmRlZCBncmVhdCBhdHRlbnRpb24sIG5vdCBzbyBtdWNoIGluIHByb3RlY3RpbmcgdGhlIG1haW4gYm9keSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBhcm15IChmb3Igbm8gcGVyaWwgY291bGQgb2NjdXIgdG8gdGhlbSBhbHRvZ2V0aGVyIGZyb20gdGhvc2UgYWxhcm1lZCBhbmQKICAgICAgICAgICAgICAgICAgICBzY2F0dGVyZWQgdHJvb3BzKSwgYXMgaW4gcHJlc2VydmluZyBpbmRpdmlkdWFsIHNvbGRpZXJzOyB3aGljaCBpbiBzb21lIG1lYXN1cmUKICAgICAgICAgICAgICAgICAgICB0ZW5kZWQgdG8gdGhlIHNhZmV0eSBvZiB0aGUgYXJteS4gRm9yIGJvdGggdGhlIGRlc2lyZSBvZiBib290eSB3YXMgbGVhZGluZyBtYW55CiAgICAgICAgICAgICAgICAgICAgdG9vIGZhciwgYW5kIHRoZSB3b29kcyB3aXRoIHRoZWlyIHVua25vd24gYW5kIGhpZGRlbiByb3V0ZXMgd291bGQgbm90IGFsbG93IHRoZW0KICAgICAgICAgICAgICAgICAgICB0byBnbyBpbiBsYXJnZSBib2RpZXMuIElmIGhlIGRlc2lyZWQgdGhlIGJ1c2luZXNzIHRvIGJlIGNvbXBsZXRlZCBhbmQgdGhlIHJhY2UKICAgICAgICAgICAgICAgICAgICBvZiB0aG9zZSBpbmZhbW91cyBwZW9wbGUgdG8gYmUgY3V0IG9mZiwgbW9yZSBib2RpZXMgb2YgbWVuIG11c3QgYmUgc2VudCBpbgogICAgICAgICAgICAgICAgICAgIHNldmVyYWwgZGlyZWN0aW9ucyBhbmQgdGhlIHNvbGRpZXJzIG11c3QgYmUgZGV0YWNoZWQgb24gYWxsIHNpZGVzOyBpZiBoZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZWQgdG8ga2VlcCB0aGUgY29tcGFuaWVzIGF0IHRoZWlyIHN0YW5kYXJkcywgYXMgdGhlIGVzdGFibGlzaGVkIGRpc2NpcGxpbmUKICAgICAgICAgICAgICAgICAgICBhbmQgcHJhY3RpY2Ugb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gYXJteSByZXF1aXJlZCwgdGhlCiAgICAgICAgICAgICAgICAgICAgc2l0dWF0aW9uIGl0c2VsZiB3YXMgYSBzYWZlZ3VhcmQgdG8gdGhlIGJhcmJhcmlhbnMsIG5vciB3YXMgdGhlcmUgd2FudGluZyB0bwogICAgICAgICAgICAgICAgICAgIGluZGl2aWR1YWxzIHRoZSBkYXJpbmcgdG8gbGF5IHNlY3JldCBhbWJ1c2NhZGVzIGFuZCBiZXNldCBzY2F0dGVyZWQgc29sZGllcnMuCiAgICAgICAgICAgICAgICAgICAgQnV0IGFtaWQgZGlmZmljdWx0aWVzIG9mIHRoaXMgbmF0dXJlIGFzIGZhciBhcyBwcmVjYXV0aW9ucyBjb3VsZCBiZSB0YWtlbiBieQogICAgICAgICAgICAgICAgICAgIHZpZ2lsYW5jZSwgc3VjaCBwcmVjYXV0aW9ucyB3ZXJlIHRha2VuOyBzbyB0aGF0IHNvbWUgb3Bwb3J0dW5pdGllcyBvZiBpbmp1cmluZwogICAgICAgICAgICAgICAgICAgIHRoZSBlbmVteSB3ZXJlIG5lZ2xlY3RlZCwgdGhvdWdoIHRoZSBtaW5kcyBvZiBhbGwgd2VyZSBidXJuaW5nIHRvIHRha2UgcmV2ZW5nZSwKICAgICAgICAgICAgICAgICAgICByYXRoZXIgdGhhbiB0aGF0IGluanVyeSBzaG91bGQgYmUgZWZmZWN0ZWQgd2l0aCBhbnkgbG9zcyB0byBvdXIgc29sZGllcnMuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBkaXNwYXRjaGVzIG1lc3NlbmdlcnMgdG8gdGhlIG5laWdoYm9yaW5nIHN0YXRlczsKICAgICAgICAgICAgICAgICAgICBieSB0aGUgaG9wZSBvZiBib290eSBoZSBpbnZpdGVzIGFsbCB0byBoaW0sIGZvciB0aGUgcHVycG9zZSBvZiBwbHVuZGVyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVidXJvbmVzPC9uYW1lPiwgaW4gb3JkZXIgdGhhdCB0aGUgbGlmZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBtaWdodCBiZSBoYXphcmRlZCBpbiB0aGUgd29vZHMgcmF0aGVyIHRoYW4gdGhlIGxlZ2lvbmFyeQogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzOyBhdCB0aGUgc2FtZSB0aW1lLCBpbiBvcmRlciB0aGF0IGEgbGFyZ2UgZm9yY2UgYmVpbmcgZHJhd24gYXJvdW5kIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgdGhlIHJhY2UgYW5kIG5hbWUgb2YgdGhhdCBzdGF0ZSBtYXkgYmUgYW5uaWhpbGF0ZWQgZm9yIHN1Y2ggYSBjcmltZS4gQSBsYXJnZQogICAgICAgICAgICAgICAgICAgIG51bWJlciBmcm9tIGFsbCBxdWFydGVycyBzcGVlZGlseSBhc3NlbWJsZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGFybXkgcmVxdWlyZWQsIHRoZQogICAgICAgICAgICAgICAgICAgIHNpdHVhdGlvbiBpdHNlbGYgd2FzIGEgc2FmZWd1YXJkIHRvIHRoZSBiYXJiYXJpYW5zLCBub3Igd2FzIHRoZXJlIHdhbnRpbmcgdG8KICAgICAgICAgICAgICAgICAgICBpbmRpdmlkdWFscyB0aGUgZGFyaW5nIHRvIGxheSBzZWNyZXQgYW1idXNjYWRlcyBhbmQgYmVzZXQgc2NhdHRlcmVkIHNvbGRpZXJzLgogICAgICAgICAgICAgICAgICAgIEJ1dCBhbWlkIGRpZmZpY3VsdGllcyBvZiB0aGlzIG5hdHVyZSBhcyBmYXIgYXMgcHJlY2F1dGlvbnMgY291bGQgYmUgdGFrZW4gYnkKICAgICAgICAgICAgICAgICAgICB2aWdpbGFuY2UsIHN1Y2ggcHJlY2F1dGlvbnMgd2VyZSB0YWtlbjsgc28gdGhhdCBzb21lIG9wcG9ydHVuaXRpZXMgb2YgaW5qdXJpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgZW5lbXkgd2VyZSBuZWdsZWN0ZWQsIHRob3VnaCB0aGUgbWluZHMgb2YgYWxsIHdlcmUgYnVybmluZyB0byB0YWtlIHJldmVuZ2UsCiAgICAgICAgICAgICAgICAgICAgcmF0aGVyIHRoYW4gdGhhdCBpbmp1cnkgc2hvdWxkIGJlIGVmZmVjdGVkIHdpdGggYW55IGxvc3MgdG8gb3VyIHNvbGRpZXJzLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZGlzcGF0Y2hlcyBtZXNzZW5nZXJzIHRvIHRoZSBuZWlnaGJvcmluZyBzdGF0ZXM7CiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIGhvcGUgb2YgYm9vdHkgaGUgaW52aXRlcyBhbGwgdG8gaGltLCBmb3IgdGhlIHB1cnBvc2Ugb2YgcGx1bmRlcmluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5FYnVyb25lczwvbmFtZT4sIGluIG9yZGVyIHRoYXQgdGhlIGxpZmUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gbWlnaHQgYmUgaGF6YXJkZWQgaW4gdGhlIHdvb2RzIHJhdGhlciB0aGFuIHRoZSBsZWdpb25hcnkKICAgICAgICAgICAgICAgICAgICBzb2xkaWVyczsgYXQgdGhlIHNhbWUgdGltZSwgaW4gb3JkZXIgdGhhdCBhIGxhcmdlIGZvcmNlIGJlaW5nIGRyYXduIGFyb3VuZCB0aGVtLAogICAgICAgICAgICAgICAgICAgIHRoZSByYWNlIGFuZCBuYW1lIG9mIHRoYXQgc3RhdGUgbWF5IGJlIGFubmloaWxhdGVkIGZvciBzdWNoIGEgY3JpbWUuIEEgbGFyZ2UKICAgICAgICAgICAgICAgICAgICBudW1iZXIgZnJvbSBhbGwgcXVhcnRlcnMgc3BlZWRpbHkgYXNzZW1ibGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXNlIHRoaW5ncyB3ZXJlIGdvaW5nIG9uIGluIGFsbCBwYXJ0cyBvZiB0aGUgdGVycml0b3JpZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWJ1cm9uZXM8L25hbWU+LCBhbmQgdGhlIHNldmVudGggZGF5IHdhcyBkcmF3aW5nIG5lYXIsIGJ5IHdoaWNoIGRheQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIHB1cnBvc2VkIHRvIHJldHVybiB0byB0aGUgYmFnZ2FnZSBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgbGVnaW9uLiBIZXJlIGl0IG1pZ2h0IGJlIGxlYXJuZWQgaG93IG11Y2ggZm9ydHVuZSBhY2hpZXZlcyBpbiB3YXIsIGFuZCBob3cKICAgICAgICAgICAgICAgICAgICBncmVhdCBjYXN1YWx0aWVzIHNoZSBwcm9kdWNlcy4gVGhlIGVuZW15IGhhdmluZyBiZWVuIHNjYXR0ZXJlZCBhbmQgYWxhcm1lZCwgYXMKICAgICAgICAgICAgICAgICAgICB3ZSByZWxhdGVkIGFib3ZlLCB0aGVyZSB3YXMgbm8gZm9yY2Ugd2hpY2ggbWlnaHQgcHJvZHVjZSBldmVuIGEgc2xpZ2h0IG9jY2FzaW9uCiAgICAgICAgICAgICAgICAgICAgb2YgZmVhci4gVGhlIHJlcG9ydCBleHRlbmRzIGJleW9uZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWJ1cm9uZXM8L25hbWU+IGFyZSBiZWluZwogICAgICAgICAgICAgICAgICAgIHBpbGxhZ2VkLCBhbmQgdGhhdCBhbGwgd2VyZSB3aXRob3V0IGRpc3RpbmN0aW9uIGludml0ZWQgdG8gdGhlIHBsdW5kZXIuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNpZ2FtYnJpPC9uYW1lPiwgd2hvIGFyZSBuZWFyZXN0IHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LCBieSB3aG9tLAogICAgICAgICAgICAgICAgICAgIHdlIGhhdmUgbWVudGlvbmVkIGFib3ZlLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UZW5jaHRoZXJpPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Vc2lwZXRlczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB3ZXJlIHJlY2VpdmVkIGFmdGVyIHRoZWlyIHJldHJlYXQsIGNvbGxlY3QgMiwwMDAgaG9yc2U7IHRoZXkgY3Jvc3MgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBpbiBzaGlwcyBhbmQgYmFya3MgdGhpcnR5IG1pbGVzIGJlbG93IHRoYXQgcGxhY2Ugd2hlcmUgdGhlIGJyaWRnZSB3YXMKICAgICAgICAgICAgICAgICAgICBlbnRpcmUgYW5kIHRoZSBnYXJyaXNvbiBsZWZ0IGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPjsgdGhleSBhcnJpdmUgYXQKICAgICAgICAgICAgICAgICAgICB0aGUgZnJvbnRpZXJzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVidXJvbmVzPC9uYW1lPiwgc3VycHJpc2UgbWFueSB3aG8gd2VyZSBzY2F0dGVyZWQgaW4KICAgICAgICAgICAgICAgICAgICBmbGlnaHQsIGFuZCBnZXQgcG9zc2Vzc2lvbiBvZiBhIGxhcmdlIGFtb3VudCBvZiBjYXR0bGUsIG9mIHdoaWNoIGJhcmJhcmlhbnMgYXJlCiAgICAgICAgICAgICAgICAgICAgZXh0cmVtZWx5IGNvdmV0b3VzLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbHVyZWQ8L25hbWU+IGJ5IGJvb3R5LCB0aGV5IGFkdmFuY2UgZnVydGhlcjsgbmVpdGhlcgogICAgICAgICAgICAgICAgICAgIG1vcmFzcyBub3IgZm9yZXN0IG9ic3RydWN0cyB0aGVzZSBtZW4sIGJvcm4gYW1pZCB3YXIgYW5kIGRlcHJlZGF0aW9uczsgdGhleQogICAgICAgICAgICAgICAgICAgIGlucXVpcmUgb2YgdGhlaXIgcHJpc29uZXJzIGluIHdoYXQgcGFydCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaXM7IHRoZXkKICAgICAgICAgICAgICAgICAgICBmaW5kIHRoYXQgaGUgaGFzIGFkdmFuY2VkIGZ1cnRoZXIsIGFuZCBsZWFybiB0aGF0IGFsbCB0aGUgYXJteSBoYXMgcmVtb3ZlZC4KICAgICAgICAgICAgICAgICAgICBUaGVyZW9uIG9uZSBvZiB0aGUgcHJpc29uZXJzIHNheXMsICJXaHkgZG8geW91IHB1cnN1ZSBzdWNoIHdyZXRjaGVkIGFuZCB0cmlmbGluZwogICAgICAgICAgICAgICAgICAgIHNwb2lsOyB5b3UsIHRvIHdob20gaXQgaXMgZ3JhbnRlZCB0byBiZWNvbWUgZXZlbiBub3cgbW9zdCByaWNobHkgZW5kb3dlZCBieQogICAgICAgICAgICAgICAgICAgIGZvcnR1bmU/IEluIHRocmVlIGhvdXJzIHlvdSBjYW4gcmVhY2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZHVhdHVjYTwvbmFtZT47IHRoZXJlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGFybXkgaGFzIGRlcG9zaXRlZCBhbGwgaXRzIGZvcnR1bmVzOyB0aGVyZSBpcyBzbwogICAgICAgICAgICAgICAgICAgIGxpdHRsZSBvZiBhIGdhcnJpc29uIHRoYXQgbm90IGV2ZW4gdGhlIHdhbGwgY2FuIGJlIG1hbm5lZCwgbm9yIGRhcmUgYW55IG9uZSBnbwogICAgICAgICAgICAgICAgICAgIGJleW9uZCB0aGUgZm9ydGlmaWNhdGlvbnMuIiBBIGhvcGUgaGF2aW5nIGJlZW4gcHJlc2VudGVkIHRoZW0sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gbGVhdmUgaW4gY29uY2VhbG1lbnQgdGhlIHBsdW5kZXIgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBhY3F1aXJlZDsgdGhleSB0aGVtc2VsdmVzIGhhc3RlbiB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFkdWF0dWNhPC9uYW1lPiwgZW1wbG95aW5nIGFzIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZ3VpZGUgdGhlIHNhbWUgbWFuIGJ5IHdob3NlIGluZm9ybWF0aW9uIHRoZXkgaGFkIGJlY29tZSBpbmZvcm1lZCBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIHRoaW5ncy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWJ1cm9uZXM8L25hbWU+LCBhbmQgdGhlIHNldmVudGggZGF5IHdhcyBkcmF3aW5nIG5lYXIsIGJ5IHdoaWNoIGRheQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIHB1cnBvc2VkIHRvIHJldHVybiB0byB0aGUgYmFnZ2FnZSBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgbGVnaW9uLiBIZXJlIGl0IG1pZ2h0IGJlIGxlYXJuZWQgaG93IG11Y2ggZm9ydHVuZSBhY2hpZXZlcyBpbiB3YXIsIGFuZCBob3cKICAgICAgICAgICAgICAgICAgICBncmVhdCBjYXN1YWx0aWVzIHNoZSBwcm9kdWNlcy4gVGhlIGVuZW15IGhhdmluZyBiZWVuIHNjYXR0ZXJlZCBhbmQgYWxhcm1lZCwgYXMKICAgICAgICAgICAgICAgICAgICB3ZSByZWxhdGVkIGFib3ZlLCB0aGVyZSB3YXMgbm8gZm9yY2Ugd2hpY2ggbWlnaHQgcHJvZHVjZSBldmVuIGEgc2xpZ2h0IG9jY2FzaW9uCiAgICAgICAgICAgICAgICAgICAgb2YgZmVhci4gVGhlIHJlcG9ydCBleHRlbmRzIGJleW9uZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWJ1cm9uZXM8L25hbWU+IGFyZSBiZWluZwogICAgICAgICAgICAgICAgICAgIHBpbGxhZ2VkLCBhbmQgdGhhdCBhbGwgd2VyZSB3aXRob3V0IGRpc3RpbmN0aW9uIGludml0ZWQgdG8gdGhlIHBsdW5kZXIuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNpZ2FtYnJpPC9uYW1lPiwgd2hvIGFyZSBuZWFyZXN0IHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+LCBieSB3aG9tLAogICAgICAgICAgICAgICAgICAgIHdlIGhhdmUgbWVudGlvbmVkIGFib3ZlLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UZW5jaHRoZXJpPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Vc2lwZXRlczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB3ZXJlIHJlY2VpdmVkIGFmdGVyIHRoZWlyIHJldHJlYXQsIGNvbGxlY3QgMiwwMDAgaG9yc2U7IHRoZXkgY3Jvc3MgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiBpbiBzaGlwcyBhbmQgYmFya3MgdGhpcnR5IG1pbGVzIGJlbG93IHRoYXQgcGxhY2Ugd2hlcmUgdGhlIGJyaWRnZSB3YXMKICAgICAgICAgICAgICAgICAgICBlbnRpcmUgYW5kIHRoZSBnYXJyaXNvbiBsZWZ0IGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPjsgdGhleSBhcnJpdmUgYXQKICAgICAgICAgICAgICAgICAgICB0aGUgZnJvbnRpZXJzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVidXJvbmVzPC9uYW1lPiwgc3VycHJpc2UgbWFueSB3aG8gd2VyZSBzY2F0dGVyZWQgaW4KICAgICAgICAgICAgICAgICAgICBmbGlnaHQsIGFuZCBnZXQgcG9zc2Vzc2lvbiBvZiBhIGxhcmdlIGFtb3VudCBvZiBjYXR0bGUsIG9mIHdoaWNoIGJhcmJhcmlhbnMgYXJlCiAgICAgICAgICAgICAgICAgICAgZXh0cmVtZWx5IGNvdmV0b3VzLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbHVyZWQ8L25hbWU+IGJ5IGJvb3R5LCB0aGV5IGFkdmFuY2UgZnVydGhlcjsgbmVpdGhlcgogICAgICAgICAgICAgICAgICAgIG1vcmFzcyBub3IgZm9yZXN0IG9ic3RydWN0cyB0aGVzZSBtZW4sIGJvcm4gYW1pZCB3YXIgYW5kIGRlcHJlZGF0aW9uczsgdGhleQogICAgICAgICAgICAgICAgICAgIGlucXVpcmUgb2YgdGhlaXIgcHJpc29uZXJzIGluIHdoYXQgcGFydCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaXM7IHRoZXkKICAgICAgICAgICAgICAgICAgICBmaW5kIHRoYXQgaGUgaGFzIGFkdmFuY2VkIGZ1cnRoZXIsIGFuZCBsZWFybiB0aGF0IGFsbCB0aGUgYXJteSBoYXMgcmVtb3ZlZC4KICAgICAgICAgICAgICAgICAgICBUaGVyZW9uIG9uZSBvZiB0aGUgcHJpc29uZXJzIHNheXMsICJXaHkgZG8geW91IHB1cnN1ZSBzdWNoIHdyZXRjaGVkIGFuZCB0cmlmbGluZwogICAgICAgICAgICAgICAgICAgIHNwb2lsOyB5b3UsIHRvIHdob20gaXQgaXMgZ3JhbnRlZCB0byBiZWNvbWUgZXZlbiBub3cgbW9zdCByaWNobHkgZW5kb3dlZCBieQogICAgICAgICAgICAgICAgICAgIGZvcnR1bmU/IEluIHRocmVlIGhvdXJzIHlvdSBjYW4gcmVhY2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZHVhdHVjYTwvbmFtZT47IHRoZXJlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGFybXkgaGFzIGRlcG9zaXRlZCBhbGwgaXRzIGZvcnR1bmVzOyB0aGVyZSBpcyBzbwogICAgICAgICAgICAgICAgICAgIGxpdHRsZSBvZiBhIGdhcnJpc29uIHRoYXQgbm90IGV2ZW4gdGhlIHdhbGwgY2FuIGJlIG1hbm5lZCwgbm9yIGRhcmUgYW55IG9uZSBnbwogICAgICAgICAgICAgICAgICAgIGJleW9uZCB0aGUgZm9ydGlmaWNhdGlvbnMuIiBBIGhvcGUgaGF2aW5nIGJlZW4gcHJlc2VudGVkIHRoZW0sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gbGVhdmUgaW4gY29uY2VhbG1lbnQgdGhlIHBsdW5kZXIgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBhY3F1aXJlZDsgdGhleSB0aGVtc2VsdmVzIGhhc3RlbiB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFkdWF0dWNhPC9uYW1lPiwgZW1wbG95aW5nIGFzIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZ3VpZGUgdGhlIHNhbWUgbWFuIGJ5IHdob3NlIGluZm9ybWF0aW9uIHRoZXkgaGFkIGJlY29tZSBpbmZvcm1lZCBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIHRoaW5ncy4gPC90cmFuc2xhdGlvbj4="
translation['6.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPiwgd2hvIGR1cmluZyBhbGwgdGhlIGZvcmVnb2luZyBkYXlzIGhhZCBrZXB0IGhpcwogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIGluIGNhbXAgd2l0aCB0aGUgZ3JlYXRlc3QgZXhhY3RuZXNzLCBhbmQgYWdyZWVhYmxlIHRvIHRoZSBpbmp1bmN0aW9ucwogICAgICAgICAgICAgICAgICAgIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGFkIG5vdCBwZXJtaXR0ZWQgZXZlbiBhbnkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2FtcC1mb2xsb3dlcnMgdG8gZ28gYmV5b25kIHRoZSBmb3J0aWZpY2F0aW9uLCBkaXN0cnVzdGluZyBvbiB0aGUgc2V2ZW50aCBkYXkKICAgICAgICAgICAgICAgICAgICB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3b3VsZCBrZWVwIGhpcyBwcm9taXNlIGFzIHRvIHRoZSBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICBkYXlzLCBiZWNhdXNlIGhlIGhlYXJkIHRoYXQgaGUgaGFkIHByb2NlZWRlZCBmdXJ0aGVyLCBhbmQgbm8gcmVwb3J0IGFzIHRvIGhpcwogICAgICAgICAgICAgICAgICAgIHJldHVybiB3YXMgYnJvdWdodCB0byBoaW0sIGFuZCBiZWluZyB1cmdlZCBhdCB0aGUgc2FtZSB0aW1lIGJ5IHRoZSBleHByZXNzaW9ucwogICAgICAgICAgICAgICAgICAgIG9mIHRob3NlIHdobyBjYWxsZWQgaGlzIHRvbGVyYW5jZSBhbG1vc3QgYSBzaWVnZSwgaWYsIGZvcnNvb3RoLCBpdCB3YXMgbm90CiAgICAgICAgICAgICAgICAgICAgcGVybWl0dGVkIHRoZW0gdG8gZ28gb3V0IG9mIHRoZSBjYW1wLCBzaW5jZSBoZSBtaWdodCBleHBlY3Qgbm8gZGlzYXN0ZXIsIHdoZXJlYnkKICAgICAgICAgICAgICAgICAgICBoZSBjb3VsZCBiZSBpbmp1cmVkLCB3aXRoaW4gdGhyZWUgbWlsZXMgb2YgdGhlIGNhbXAsIHdoaWxlIG5pbmUgbGVnaW9ucyBhbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhdmFscnkgd2VyZSB1bmRlciBhcm1zLCBhbmQgdGhlIGVuZW15IHNjYXR0ZXJlZCBhbmQgYWxtb3N0IGFubmloaWxhdGVkLAogICAgICAgICAgICAgICAgICAgIHNlbnQgZml2ZSBjb2hvcnRzIGludG8gdGhlIG5laWdoYm9yaW5nIGNvcm4tbGFuZHMsIGJldHdlZW4gd2hpY2ggYW5kIHRoZSBjYW1wCiAgICAgICAgICAgICAgICAgICAgb25seSBvbmUgaGlsbCBpbnRlcnZlbmVkLCBmb3IgdGhlIHB1cnBvc2Ugb2YgZm9yYWdpbmcuIE1hbnkgc29sZGllcnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucyBoYWQgYmVlbiBsZWZ0IGludmFsaWRlZCBpbiB0aGUgY2FtcCwgb2Ygd2hvbSB0aG9zZSB3aG8gaGFkIHJlY292ZXJlZCBpbgogICAgICAgICAgICAgICAgICAgIHRoaXMgc3BhY2Ugb2YgdGltZSwgYmVpbmcgYWJvdXQgMzAwLCBhcmUgc2VudCB0b2dldGhlciB1bmRlciBvbmUgc3RhbmRhcmQ7IGEKICAgICAgICAgICAgICAgICAgICBsYXJnZSBudW1iZXIgb2Ygc29sZGllcnMnIGF0dGVuZGFudHMgYmVzaWRlcywgd2l0aCBhIGdyZWF0IG51bWJlciBvZiBiZWFzdHMgb2YKICAgICAgICAgICAgICAgICAgICBidXJkZW4sIHdoaWNoIGhhZCByZW1haW5lZCBpbiB0aGUgY2FtcCwgcGVybWlzc2lvbiBiZWluZyBncmFudGVkLCBmb2xsb3cgdGhlbS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2ljZXJvPC9uYW1lPiwgd2hvIGR1cmluZyBhbGwgdGhlIGZvcmVnb2luZyBkYXlzIGhhZCBrZXB0IGhpcwogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIGluIGNhbXAgd2l0aCB0aGUgZ3JlYXRlc3QgZXhhY3RuZXNzLCBhbmQgYWdyZWVhYmxlIHRvIHRoZSBpbmp1bmN0aW9ucwogICAgICAgICAgICAgICAgICAgIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGFkIG5vdCBwZXJtaXR0ZWQgZXZlbiBhbnkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2FtcC1mb2xsb3dlcnMgdG8gZ28gYmV5b25kIHRoZSBmb3J0aWZpY2F0aW9uLCBkaXN0cnVzdGluZyBvbiB0aGUgc2V2ZW50aCBkYXkKICAgICAgICAgICAgICAgICAgICB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3b3VsZCBrZWVwIGhpcyBwcm9taXNlIGFzIHRvIHRoZSBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICBkYXlzLCBiZWNhdXNlIGhlIGhlYXJkIHRoYXQgaGUgaGFkIHByb2NlZWRlZCBmdXJ0aGVyLCBhbmQgbm8gcmVwb3J0IGFzIHRvIGhpcwogICAgICAgICAgICAgICAgICAgIHJldHVybiB3YXMgYnJvdWdodCB0byBoaW0sIGFuZCBiZWluZyB1cmdlZCBhdCB0aGUgc2FtZSB0aW1lIGJ5IHRoZSBleHByZXNzaW9ucwogICAgICAgICAgICAgICAgICAgIG9mIHRob3NlIHdobyBjYWxsZWQgaGlzIHRvbGVyYW5jZSBhbG1vc3QgYSBzaWVnZSwgaWYsIGZvcnNvb3RoLCBpdCB3YXMgbm90CiAgICAgICAgICAgICAgICAgICAgcGVybWl0dGVkIHRoZW0gdG8gZ28gb3V0IG9mIHRoZSBjYW1wLCBzaW5jZSBoZSBtaWdodCBleHBlY3Qgbm8gZGlzYXN0ZXIsIHdoZXJlYnkKICAgICAgICAgICAgICAgICAgICBoZSBjb3VsZCBiZSBpbmp1cmVkLCB3aXRoaW4gdGhyZWUgbWlsZXMgb2YgdGhlIGNhbXAsIHdoaWxlIG5pbmUgbGVnaW9ucyBhbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhdmFscnkgd2VyZSB1bmRlciBhcm1zLCBhbmQgdGhlIGVuZW15IHNjYXR0ZXJlZCBhbmQgYWxtb3N0IGFubmloaWxhdGVkLAogICAgICAgICAgICAgICAgICAgIHNlbnQgZml2ZSBjb2hvcnRzIGludG8gdGhlIG5laWdoYm9yaW5nIGNvcm4tbGFuZHMsIGJldHdlZW4gd2hpY2ggYW5kIHRoZSBjYW1wCiAgICAgICAgICAgICAgICAgICAgb25seSBvbmUgaGlsbCBpbnRlcnZlbmVkLCBmb3IgdGhlIHB1cnBvc2Ugb2YgZm9yYWdpbmcuIE1hbnkgc29sZGllcnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucyBoYWQgYmVlbiBsZWZ0IGludmFsaWRlZCBpbiB0aGUgY2FtcCwgb2Ygd2hvbSB0aG9zZSB3aG8gaGFkIHJlY292ZXJlZCBpbgogICAgICAgICAgICAgICAgICAgIHRoaXMgc3BhY2Ugb2YgdGltZSwgYmVpbmcgYWJvdXQgMzAwLCBhcmUgc2VudCB0b2dldGhlciB1bmRlciBvbmUgc3RhbmRhcmQ7IGEKICAgICAgICAgICAgICAgICAgICBsYXJnZSBudW1iZXIgb2Ygc29sZGllcnMnIGF0dGVuZGFudHMgYmVzaWRlcywgd2l0aCBhIGdyZWF0IG51bWJlciBvZiBiZWFzdHMgb2YKICAgICAgICAgICAgICAgICAgICBidXJkZW4sIHdoaWNoIGhhZCByZW1haW5lZCBpbiB0aGUgY2FtcCwgcGVybWlzc2lvbiBiZWluZyBncmFudGVkLCBmb2xsb3cgdGhlbS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkF0IHRoaXMgdmVyeSB0aW1lLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbjwvbmFtZT4gaG9yc2UgYnkgY2hhbmNlIGNhbWUgdXAsCiAgICAgICAgICAgICAgICAgICAgYW5kIGltbWVkaWF0ZWx5LCB3aXRoIHRoZSBzYW1lIHNwZWVkIHdpdGggd2hpY2ggdGhleSBoYWQgYWR2YW5jZWQsIGF0dGVtcHQgdG8KICAgICAgICAgICAgICAgICAgICBmb3JjZSB0aGUgY2FtcCBhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWN1bWFuPC9uYW1lPiBnYXRlLCBub3Igd2VyZSB0aGV5IHNlZW4sIGluCiAgICAgICAgICAgICAgICAgICAgY29uc2VxdWVuY2Ugb2Ygd29vZHMgbHlpbmcgaW4gdGhlIHdheSBvbiB0aGF0IHNpZGUsIGJlZm9yZSB0aGV5IHdlcmUganVzdAogICAgICAgICAgICAgICAgICAgIHJlYWNoaW5nIHRoZSBjYW1wOiBzbyBtdWNoIHNvLCB0aGF0IHRoZSBzdXRsZXJzIHdobyBoYWQgdGhlaXIgYm9vdGhzIHVuZGVyIHRoZQogICAgICAgICAgICAgICAgICAgIHJhbXBhcnQgaGFkIG5vdCBhbiBvcHBvcnR1bml0eSBvZiByZXRyZWF0aW5nIHdpdGhpbiB0aGUgY2FtcC4gT3VyIG1lbiwgbm90CiAgICAgICAgICAgICAgICAgICAgYW50aWNpcGF0aW5nIGl0LCBhcmUgcGVycGxleGVkIGJ5IHRoZSBzdWRkZW4gYWZmYWlyLCBhbmQgdGhlIGNvaG9ydCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBvdXRwb3N0IHNjYXJjZWx5IHN1c3RhaW5zIHRoZSBmaXJzdCBhdHRhY2suIFRoZSBlbmVteSBzcHJlYWQgdGhlbXNlbHZlcyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBzaWRlcyB0byBhc2NlcnRhaW4gaWYgdGhleSBjb3VsZCBmaW5kIGFueSBhY2Nlc3MuIE91ciBtZW4gd2l0aCBkaWZmaWN1bHR5CiAgICAgICAgICAgICAgICAgICAgZGVmZW5kIHRoZSBnYXRlczsgdGhlIHZlcnkgcG9zaXRpb24gb2YgaXRzZWxmIGFuZCB0aGUgZm9ydGlmaWNhdGlvbiBzZWN1cmVzIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIGFjY2Vzc2VzLiBUaGVyZSBpcyBhIHBhbmljIGluIHRoZSBlbnRpcmUgY2FtcCwgYW5kIG9uZSBpbnF1aXJlcyBvZiBhbm90aGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhdXNlIG9mIHRoZSBjb25mdXNpb24sIG5vciBkbyB0aGV5IHJlYWRpbHkgZGV0ZXJtaW5lIHdoaXRoZXIgdGhlIHN0YW5kYXJkcwogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBib3JuZSwgbm9yIGludG8gd2hhdCBxdWFydGVyIGVhY2ggc2hvdWxkIGJldGFrZSBoaW1zZWxmLiBPbmUgYXZvd3MKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBjYW1wIGlzIGFscmVhZHkgdGFrZW4sIGFub3RoZXIgbWFpbnRhaW5zIHRoYXQsIHRoZSBlbmVteSBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBkZXN0cm95ZWQgdGhlIGFybXkgYW5kIGNvbW1hbmRlci1pbi1jaGllZiwgYXJlIGNvbWUgaGl0aGVyIGFzIGNvbnF1ZXJvcnM7IG1vc3QKICAgICAgICAgICAgICAgICAgICBmb3JtIHN0cmFuZ2Ugc3VwZXJzdGl0aW91cyBmYW5jaWVzIGZyb20gdGhlIHNwb3QsIGFuZCBwbGFjZSBiZWZvcmUgdGhlaXIgZXllcwogICAgICAgICAgICAgICAgICAgIHRoZSBjYXRhc3Ryb3BoZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNvdHRhPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5UaXR1cml1czwvbmFtZT4sIHdobyBoYWQgZmFsbGVuIGluIHRoZSBzYW1lIGZvcnQuIEFsbCBiZWluZyBncmVhdGx5CiAgICAgICAgICAgICAgICAgICAgZGlzY29uY2VydGVkIGJ5IHRoaXMgYWxhcm0sIHRoZSBiZWxpZWYgb2YgdGhlIGJhcmJhcmlhbnMgaXMgc3RyZW5ndGhlbmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBpcyBubyBnYXJyaXNvbiB3aXRoaW4sIGFzIHRoZXkgaGFkIGhlYXJkIGZyb20gdGhlaXIgcHJpc29uZXIuIFRoZXkKICAgICAgICAgICAgICAgICAgICBlbmRlYXZvciB0byBmb3JjZSBhbiBlbnRyYW5jZSBhbmQgZW5jb3VyYWdlIG9uZSBhbm90aGVyIG5vdCB0byBjYXN0IGZyb20gdGhlaXIKICAgICAgICAgICAgICAgICAgICBoYW5kcyBzbyB2YWx1YWJsZSBhIHByaXplLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbjwvbmFtZT4gaG9yc2UgYnkgY2hhbmNlIGNhbWUgdXAsCiAgICAgICAgICAgICAgICAgICAgYW5kIGltbWVkaWF0ZWx5LCB3aXRoIHRoZSBzYW1lIHNwZWVkIHdpdGggd2hpY2ggdGhleSBoYWQgYWR2YW5jZWQsIGF0dGVtcHQgdG8KICAgICAgICAgICAgICAgICAgICBmb3JjZSB0aGUgY2FtcCBhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWN1bWFuPC9uYW1lPiBnYXRlLCBub3Igd2VyZSB0aGV5IHNlZW4sIGluCiAgICAgICAgICAgICAgICAgICAgY29uc2VxdWVuY2Ugb2Ygd29vZHMgbHlpbmcgaW4gdGhlIHdheSBvbiB0aGF0IHNpZGUsIGJlZm9yZSB0aGV5IHdlcmUganVzdAogICAgICAgICAgICAgICAgICAgIHJlYWNoaW5nIHRoZSBjYW1wOiBzbyBtdWNoIHNvLCB0aGF0IHRoZSBzdXRsZXJzIHdobyBoYWQgdGhlaXIgYm9vdGhzIHVuZGVyIHRoZQogICAgICAgICAgICAgICAgICAgIHJhbXBhcnQgaGFkIG5vdCBhbiBvcHBvcnR1bml0eSBvZiByZXRyZWF0aW5nIHdpdGhpbiB0aGUgY2FtcC4gT3VyIG1lbiwgbm90CiAgICAgICAgICAgICAgICAgICAgYW50aWNpcGF0aW5nIGl0LCBhcmUgcGVycGxleGVkIGJ5IHRoZSBzdWRkZW4gYWZmYWlyLCBhbmQgdGhlIGNvaG9ydCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBvdXRwb3N0IHNjYXJjZWx5IHN1c3RhaW5zIHRoZSBmaXJzdCBhdHRhY2suIFRoZSBlbmVteSBzcHJlYWQgdGhlbXNlbHZlcyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBzaWRlcyB0byBhc2NlcnRhaW4gaWYgdGhleSBjb3VsZCBmaW5kIGFueSBhY2Nlc3MuIE91ciBtZW4gd2l0aCBkaWZmaWN1bHR5CiAgICAgICAgICAgICAgICAgICAgZGVmZW5kIHRoZSBnYXRlczsgdGhlIHZlcnkgcG9zaXRpb24gb2YgaXRzZWxmIGFuZCB0aGUgZm9ydGlmaWNhdGlvbiBzZWN1cmVzIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIGFjY2Vzc2VzLiBUaGVyZSBpcyBhIHBhbmljIGluIHRoZSBlbnRpcmUgY2FtcCwgYW5kIG9uZSBpbnF1aXJlcyBvZiBhbm90aGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhdXNlIG9mIHRoZSBjb25mdXNpb24sIG5vciBkbyB0aGV5IHJlYWRpbHkgZGV0ZXJtaW5lIHdoaXRoZXIgdGhlIHN0YW5kYXJkcwogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBib3JuZSwgbm9yIGludG8gd2hhdCBxdWFydGVyIGVhY2ggc2hvdWxkIGJldGFrZSBoaW1zZWxmLiBPbmUgYXZvd3MKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBjYW1wIGlzIGFscmVhZHkgdGFrZW4sIGFub3RoZXIgbWFpbnRhaW5zIHRoYXQsIHRoZSBlbmVteSBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBkZXN0cm95ZWQgdGhlIGFybXkgYW5kIGNvbW1hbmRlci1pbi1jaGllZiwgYXJlIGNvbWUgaGl0aGVyIGFzIGNvbnF1ZXJvcnM7IG1vc3QKICAgICAgICAgICAgICAgICAgICBmb3JtIHN0cmFuZ2Ugc3VwZXJzdGl0aW91cyBmYW5jaWVzIGZyb20gdGhlIHNwb3QsIGFuZCBwbGFjZSBiZWZvcmUgdGhlaXIgZXllcwogICAgICAgICAgICAgICAgICAgIHRoZSBjYXRhc3Ryb3BoZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNvdHRhPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5UaXR1cml1czwvbmFtZT4sIHdobyBoYWQgZmFsbGVuIGluIHRoZSBzYW1lIGZvcnQuIEFsbCBiZWluZyBncmVhdGx5CiAgICAgICAgICAgICAgICAgICAgZGlzY29uY2VydGVkIGJ5IHRoaXMgYWxhcm0sIHRoZSBiZWxpZWYgb2YgdGhlIGJhcmJhcmlhbnMgaXMgc3RyZW5ndGhlbmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBpcyBubyBnYXJyaXNvbiB3aXRoaW4sIGFzIHRoZXkgaGFkIGhlYXJkIGZyb20gdGhlaXIgcHJpc29uZXIuIFRoZXkKICAgICAgICAgICAgICAgICAgICBlbmRlYXZvciB0byBmb3JjZSBhbiBlbnRyYW5jZSBhbmQgZW5jb3VyYWdlIG9uZSBhbm90aGVyIG5vdCB0byBjYXN0IGZyb20gdGhlaXIKICAgICAgICAgICAgICAgICAgICBoYW5kcyBzbyB2YWx1YWJsZSBhIHByaXplLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UC4gU2V4dGl1cyBCYWN1bHVzPC9uYW1lPiwgd2hvIGhhZCBsZWQgYSBwcmluY2lwYWwgY2VudHVyeQogICAgICAgICAgICAgICAgICAgIHVuZGVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiAob2Ygd2hvbSB3ZSBoYXZlIG1hZGUgbWVudGlvbiBpbiBwcmV2aW91cwogICAgICAgICAgICAgICAgICAgIGVuZ2FnZW1lbnRzKSwgaGFkIGJlZW4gbGVmdCBhbiBpbnZhbGlkIGluIHRoZSBnYXJyaXNvbiwgYW5kIGhhZCBub3cgYmVlbiBmaXZlCiAgICAgICAgICAgICAgICAgICAgZGF5cyB3aXRob3V0IGZvb2QuIEhlLCBkaXN0cnVzdGluZyBoaXMgb3duIHNhZmV0eSBhbmQgdGhhdCBvZiBhbGwsIGdvZXMgZm9ydGgKICAgICAgICAgICAgICAgICAgICBmcm9tIGhpcyB0ZW50IHVuYXJtZWQ7IGhlIHNlZXMgdGhhdCB0aGUgZW5lbXkgYXJlIGNsb3NlIGF0IGhhbmQgYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWF0dGVyIGlzIGluIHRoZSB1dG1vc3QgZGFuZ2VyOyBoZSBzbmF0Y2hlcyBhcm1zIGZyb20gdGhvc2UgbmVhcmVzdCwgYW5kCiAgICAgICAgICAgICAgICAgICAgc3RhdGlvbnMgaGltc2VsZiBhdCB0aGUgZ2F0ZS4gVGhlIGNlbnR1cmlvbnMgb2YgdGhhdCBjb2hvcnQgd2hpY2ggd2FzIG9uIGd1YXJkCiAgICAgICAgICAgICAgICAgICAgZm9sbG93IGhpbTsgZm9yIGEgc2hvcnQgdGltZSB0aGV5IHN1c3RhaW4gdGhlIGZpZ2h0IHRvZ2V0aGVyLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlNleHRpdXM8L25hbWU+IGZhaW50cywgYWZ0ZXIgcmVjZWl2aW5nIG1hbnkgd291bmRzOyBoZSBpcyB3aXRoIGRpZmZpY3VsdHkKICAgICAgICAgICAgICAgICAgICBzYXZlZCwgZHJhd24gYXdheSBieSB0aGUgaGFuZHMgb2YgdGhlIHNvbGRpZXJzLiBUaGlzIHNwYWNlIGhhdmluZyBpbnRlcnZlbmVkLAogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlcnMgcmVzdW1lIGNvdXJhZ2Ugc28gZmFyIGFzIHRvIHZlbnR1cmUgdG8gdGFrZSB0aGVpciBwbGFjZSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpY2F0aW9ucyBhbmQgcHJlc2VudCB0aGUgYXNwZWN0IG9mIGRlZmVuZGVycy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+UC4gU2V4dGl1cyBCYWN1bHVzPC9uYW1lPiwgd2hvIGhhZCBsZWQgYSBwcmluY2lwYWwgY2VudHVyeQogICAgICAgICAgICAgICAgICAgIHVuZGVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiAob2Ygd2hvbSB3ZSBoYXZlIG1hZGUgbWVudGlvbiBpbiBwcmV2aW91cwogICAgICAgICAgICAgICAgICAgIGVuZ2FnZW1lbnRzKSwgaGFkIGJlZW4gbGVmdCBhbiBpbnZhbGlkIGluIHRoZSBnYXJyaXNvbiwgYW5kIGhhZCBub3cgYmVlbiBmaXZlCiAgICAgICAgICAgICAgICAgICAgZGF5cyB3aXRob3V0IGZvb2QuIEhlLCBkaXN0cnVzdGluZyBoaXMgb3duIHNhZmV0eSBhbmQgdGhhdCBvZiBhbGwsIGdvZXMgZm9ydGgKICAgICAgICAgICAgICAgICAgICBmcm9tIGhpcyB0ZW50IHVuYXJtZWQ7IGhlIHNlZXMgdGhhdCB0aGUgZW5lbXkgYXJlIGNsb3NlIGF0IGhhbmQgYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWF0dGVyIGlzIGluIHRoZSB1dG1vc3QgZGFuZ2VyOyBoZSBzbmF0Y2hlcyBhcm1zIGZyb20gdGhvc2UgbmVhcmVzdCwgYW5kCiAgICAgICAgICAgICAgICAgICAgc3RhdGlvbnMgaGltc2VsZiBhdCB0aGUgZ2F0ZS4gVGhlIGNlbnR1cmlvbnMgb2YgdGhhdCBjb2hvcnQgd2hpY2ggd2FzIG9uIGd1YXJkCiAgICAgICAgICAgICAgICAgICAgZm9sbG93IGhpbTsgZm9yIGEgc2hvcnQgdGltZSB0aGV5IHN1c3RhaW4gdGhlIGZpZ2h0IHRvZ2V0aGVyLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlNleHRpdXM8L25hbWU+IGZhaW50cywgYWZ0ZXIgcmVjZWl2aW5nIG1hbnkgd291bmRzOyBoZSBpcyB3aXRoIGRpZmZpY3VsdHkKICAgICAgICAgICAgICAgICAgICBzYXZlZCwgZHJhd24gYXdheSBieSB0aGUgaGFuZHMgb2YgdGhlIHNvbGRpZXJzLiBUaGlzIHNwYWNlIGhhdmluZyBpbnRlcnZlbmVkLAogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlcnMgcmVzdW1lIGNvdXJhZ2Ugc28gZmFyIGFzIHRvIHZlbnR1cmUgdG8gdGFrZSB0aGVpciBwbGFjZSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpY2F0aW9ucyBhbmQgcHJlc2VudCB0aGUgYXNwZWN0IG9mIGRlZmVuZGVycy4gPC90cmFuc2xhdGlvbj4="
translation['6.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBmb3JhZ2luZyBoYXZpbmcgaW4gdGhlIG1lYW4gdGltZSBiZWVuIGNvbXBsZXRlZCwgb3VyIHNvbGRpZXJzIGRpc3RpbmN0bHkgaGVhcgogICAgICAgICAgICAgICAgICAgIHRoZSBzaG91dDsgdGhlIGhvcnNlIGhhc3RlbiBvbiBiZWZvcmUgYW5kIGRpc2NvdmVyIGluIHdoYXQgZGFuZ2VyIHRoZSBhZmZhaXIgaXMuCiAgICAgICAgICAgICAgICAgICAgQnV0IGhlcmUgdGhlcmUgaXMgbm8gZm9ydGlmaWNhdGlvbiB0byByZWNlaXZlIHRoZW0sIGluIHRoZWlyIGFsYXJtOiB0aG9zZSBsYXN0CiAgICAgICAgICAgICAgICAgICAgZW5saXN0ZWQsIGFuZCB1bnNraWxsZWQgaW4gbWlsaXRhcnkgZGlzY2lwbGluZSB0dXJuIHRoZWlyIGZhY2VzIHRvIHRoZSBtaWxpdGFyeQogICAgICAgICAgICAgICAgICAgIHRyaWJ1bmUgYW5kIHRoZSBjZW50dXJpb25zOyB0aGV5IHdhaXQgdG8gZmluZCB3aGF0IG9yZGVycyBtYXkgYmUgZ2l2ZW4gYnkgdGhlbS4KICAgICAgICAgICAgICAgICAgICBObyBvbmUgaXMgc28gY291cmFnZW91cyBhcyBub3QgdG8gYmUgZGlzY29uY2VydGVkIGJ5IHRoZSBzdWRkZW5uZXNzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGFmZmFpci4gVGhlIGJhcmJhcmlhbnMsIGVzcHlpbmcgb3VyIHN0YW5kYXJkIGluIHRoZSBkaXN0YW5jZSwgZGVzaXN0IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgYXR0YWNrOyBhdCBmaXJzdCB0aGV5IHN1cHBvc2UgdGhhdCB0aGUgbGVnaW9ucywgd2hpY2ggdGhleSBoYWQgbGVhcm5lZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcHJpc29uZXJzIGhhZCByZW1vdmVkIGZ1cnRoZXIgb2ZmLCBoYWQgcmV0dXJuZWQ7IGFmdGVyd2FyZCwgZGVzcGlzaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgc21hbGwgbnVtYmVyLCB0aGV5IG1ha2UgYW4gYXR0YWNrIG9uIHRoZW0gYXQgYWxsIHNpZGVzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBjYW1wLWZvbGxvd2VycyBydW4gZm9yd2FyZCB0byB0aGUgbmVhcmVzdCByaXNpbmcgZ3JvdW5kOyBiZWluZyBzcGVlZGlseQogICAgICAgICAgICAgICAgICAgIGRyaXZlbiBmcm9tIHRoaXMgdGhleSB0aHJvdyB0aGVtc2VsdmVzIGFtb25nIHRoZSBzdGFuZGFyZHMgYW5kIGNvbXBhbmllczogdGhleQogICAgICAgICAgICAgICAgICAgIHRodXMgc28gbXVjaCB0aGUgbW9yZSBhbGFybSB0aGUgc29sZGllcnMgYWxyZWFkeSBhZmZyaWdodGVkLiBTb21lIHByb3Bvc2UgdGhhdCwKICAgICAgICAgICAgICAgICAgICBmb3JtaW5nIGEgd2VkZ2UsIHRoZXkgc3VkZGVubHkgYnJlYWsgdGhyb3VnaCwgc2luY2UgdGhlIGNhbXAgd2FzIHNvIG5lYXI7IGFuZCBpZgogICAgICAgICAgICAgICAgICAgIGFueSBwYXJ0IHNob3VsZCBiZSBzdXJyb3VuZGVkIGFuZCBzbGFpbiwgdGhleSBmdWxseSB0cnVzdCB0aGF0IGF0IGxlYXN0IHRoZSByZXN0CiAgICAgICAgICAgICAgICAgICAgbWF5IGJlIHNhdmVkOyBvdGhlcnMsIHRoYXQgdGhleSB0YWtlIHRoZWlyIHN0YW5kIG9uIGFuIGVtaW5lbmNlLCBhbmQgYWxsIHVuZGVyZ28KICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSBkZXN0aW55LiBUaGUgdmV0ZXJhbiBzb2xkaWVycyB3aG9tIHdlIHN0YXRlZCB0byBoYXZlIHNldCBvdXQgdG9nZXRoZXIKICAgICAgICAgICAgICAgICAgICBbd2l0aCB0aGUgb3RoZXJzXSB1bmRlciBhIHN0YW5kYXJkLCBkbyBub3QgYXBwcm92ZSBvZiB0aGlzLiBUaGVyZWZvcmUKICAgICAgICAgICAgICAgICAgICBlbmNvdXJhZ2luZyBlYWNoIG90aGVyLCB1bmRlciB0aGUgY29uZHVjdCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIFRyZWJvbml1czwvbmFtZT4sIGEKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBrbmlnaHQsIHdobyBoYWQgYmVlbiBhcHBvaW50ZWQgb3ZlciB0aGVtLAogICAgICAgICAgICAgICAgICAgIHRoZXkgYnJlYWsgdGhyb3VnaCB0aGUgbWlkc3Qgb2YgdGhlIGVuZW15LCBhbmQgYXJyaXZlIGluIHRoZSBjYW1wIHNhZmUgdG8gYSBtYW4uCiAgICAgICAgICAgICAgICAgICAgVGhlIGNhbXAgYXR0ZW5kYW50cyBhbmQgdGhlIGhvcnNlIGZvbGxvd2luZyBjbG9zZSB1cG9uIHRoZW0gd2l0aCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIGltcGV0dW9zaXR5LCBhcmUgc2F2ZWQgYnkgdGhlIGNvdXJhZ2Ugb2YgdGhlIHNvbGRpZXJzLiBCdXQgdGhvc2Ugd2hvIGhhZCB0YWtlbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIHN0YW5kIHVwb24gdGhlIGVtaW5lbmNlIGhhdmluZyBldmVuIG5vdyBhY3F1aXJlZCBubyBleHBlcmllbmNlIG9mIG1pbGl0YXJ5CiAgICAgICAgICAgICAgICAgICAgbWF0dGVycywgbmVpdGhlciBjb3VsZCBwZXJzZXZlcmUgaW4gdGhhdCByZXNvbHV0aW9uIHdoaWNoIHRoZXkgYXBwcm92ZWQgb2YsCiAgICAgICAgICAgICAgICAgICAgbmFtZWx5LCB0byBkZWZlbmQgdGhlbXNlbHZlcyBmcm9tIHRoZWlyIGhpZ2hlciBwb3NpdGlvbiwgbm9yIGltaXRhdGUgdGhhdCB2aWdvcgogICAgICAgICAgICAgICAgICAgIGFuZCBzcGVlZCB3aGljaCB0aGV5IGhhZCBvYnNlcnZlZCB0byBoYXZlIGF2YWlsZWQgb3RoZXJzOyBidXQsIGF0dGVtcHRpbmcgdG8KICAgICAgICAgICAgICAgICAgICByZWFjaCB0aGUgY2FtcCwgaGFkIGRlc2NlbmRlZCBpbnRvIGFuIHVuZmF2b3JhYmxlIHNpdHVhdGlvbi4gVGhlIGNlbnR1cmlvbnMsCiAgICAgICAgICAgICAgICAgICAgc29tZSBvZiB3aG9tIGhhZCBiZWVuIHByb21vdGVkIGZvciB0aGVpciB2YWxvciBmcm9tIHRoZSBsb3dlciByYW5rcyBvZiBvdGhlcgogICAgICAgICAgICAgICAgICAgIGxlZ2lvbnMgdG8gaGlnaGVyIHJhbmtzIGluIHRoaXMgbGVnaW9uLCBpbiBvcmRlciB0aGF0IHRoZXkgbWlnaHQgbm90IGZvcmZlaXQKICAgICAgICAgICAgICAgICAgICB0aGVpciBnbG9yeSBmb3IgbWlsaXRhcnkgZXhwbG9pdHMgcHJldmlvdXNseSBhY3F1aXJlZCwgZmVsbCB0b2dldGhlciBmaWdodGluZwogICAgICAgICAgICAgICAgICAgIG1vc3QgdmFsaWFudGx5LiBUaGUgZW5lbXkgaGF2aW5nIGJlZW4gZGlzbG9kZ2VkIGJ5IHRoZWlyIHZhbG9yLCBhIHBhcnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMgYXJyaXZlZCBzYWZlIGluIGNhbXAgY29udHJhcnkgdG8gdGhlaXIgZXhwZWN0YXRpb25zOyBhIHBhcnQgcGVyaXNoZWQsCiAgICAgICAgICAgICAgICAgICAgc3Vycm91bmRlZCBieSB0aGUgYmFyYmFyaWFucy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQxIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMgVHJlYm9uaXVzPC9uYW1lPiwgYQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGtuaWdodCwgd2hvIGhhZCBiZWVuIGFwcG9pbnRlZCBvdmVyIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgdGhleSBicmVhayB0aHJvdWdoIHRoZSBtaWRzdCBvZiB0aGUgZW5lbXksIGFuZCBhcnJpdmUgaW4gdGhlIGNhbXAgc2FmZSB0byBhIG1hbi4KICAgICAgICAgICAgICAgICAgICBUaGUgY2FtcCBhdHRlbmRhbnRzIGFuZCB0aGUgaG9yc2UgZm9sbG93aW5nIGNsb3NlIHVwb24gdGhlbSB3aXRoIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgaW1wZXR1b3NpdHksIGFyZSBzYXZlZCBieSB0aGUgY291cmFnZSBvZiB0aGUgc29sZGllcnMuIEJ1dCB0aG9zZSB3aG8gaGFkIHRha2VuCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgc3RhbmQgdXBvbiB0aGUgZW1pbmVuY2UgaGF2aW5nIGV2ZW4gbm93IGFjcXVpcmVkIG5vIGV4cGVyaWVuY2Ugb2YgbWlsaXRhcnkKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzLCBuZWl0aGVyIGNvdWxkIHBlcnNldmVyZSBpbiB0aGF0IHJlc29sdXRpb24gd2hpY2ggdGhleSBhcHByb3ZlZCBvZiwKICAgICAgICAgICAgICAgICAgICBuYW1lbHksIHRvIGRlZmVuZCB0aGVtc2VsdmVzIGZyb20gdGhlaXIgaGlnaGVyIHBvc2l0aW9uLCBub3IgaW1pdGF0ZSB0aGF0IHZpZ29yCiAgICAgICAgICAgICAgICAgICAgYW5kIHNwZWVkIHdoaWNoIHRoZXkgaGFkIG9ic2VydmVkIHRvIGhhdmUgYXZhaWxlZCBvdGhlcnM7IGJ1dCwgYXR0ZW1wdGluZyB0bwogICAgICAgICAgICAgICAgICAgIHJlYWNoIHRoZSBjYW1wLCBoYWQgZGVzY2VuZGVkIGludG8gYW4gdW5mYXZvcmFibGUgc2l0dWF0aW9uLiBUaGUgY2VudHVyaW9ucywKICAgICAgICAgICAgICAgICAgICBzb21lIG9mIHdob20gaGFkIGJlZW4gcHJvbW90ZWQgZm9yIHRoZWlyIHZhbG9yIGZyb20gdGhlIGxvd2VyIHJhbmtzIG9mIG90aGVyCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucyB0byBoaWdoZXIgcmFua3MgaW4gdGhpcyBsZWdpb24sIGluIG9yZGVyIHRoYXQgdGhleSBtaWdodCBub3QgZm9yZmVpdAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGdsb3J5IGZvciBtaWxpdGFyeSBleHBsb2l0cyBwcmV2aW91c2x5IGFjcXVpcmVkLCBmZWxsIHRvZ2V0aGVyIGZpZ2h0aW5nCiAgICAgICAgICAgICAgICAgICAgbW9zdCB2YWxpYW50bHkuIFRoZSBlbmVteSBoYXZpbmcgYmVlbiBkaXNsb2RnZWQgYnkgdGhlaXIgdmFsb3IsIGEgcGFydCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycyBhcnJpdmVkIHNhZmUgaW4gY2FtcCBjb250cmFyeSB0byB0aGVpciBleHBlY3RhdGlvbnM7IGEgcGFydCBwZXJpc2hlZCwKICAgICAgICAgICAgICAgICAgICBzdXJyb3VuZGVkIGJ5IHRoZSBiYXJiYXJpYW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIGRlc3BhaXJpbmcgb2YgdGFraW5nIHRoZSBjYW1wIGJ5IHN0b3JtLAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgdGhleSBzYXcgdGhhdCBvdXIgbWVuIGhhZCB0YWtlbiB1cCB0aGVpciBwb3NpdGlvbiBvbiB0aGUgZm9ydGlmaWNhdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgcmV0cmVhdGVkIGJleW9uZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiB3aXRoIHRoYXQgcGx1bmRlciB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIGRlcG9zaXRlZCBpbiB0aGUgd29vZHMuIEFuZCBzbyBncmVhdCB3YXMgdGhlIGFsYXJtLCBldmVuIGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZSBvZiB0aGUgZW5lbXksIHRoYXQgd2hlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkMuIFZvbHVzZW51czwvbmFtZT4sIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIHNlbnQgd2l0aCB0aGUgY2F2YWxyeSwgYXJyaXZlZCB0aGF0IG5pZ2h0LCBoZSBjb3VsZCBub3QgZ2FpbiBjcmVkZW5jZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3YXMgY2xvc2UgYXQgaGFuZCB3aXRoIGhpcyBhcm15IHNhZmUuIEZlYXIKICAgICAgICAgICAgICAgICAgICBoYWQgc28gcHJlLW9jY3VwaWVkIHRoZSBtaW5kcyBvZiBhbGwsIHRoYXQgdGhlaXIgcmVhc29uIGJlaW5nIGFsbW9zdCBlc3RyYW5nZWQsCiAgICAgICAgICAgICAgICAgICAgdGhleSBzYWlkIHRoYXQgYWxsIHRoZSBvdGhlciBmb3JjZXMgaGF2aW5nIGJlZW4gY3V0IG9mZiwgdGhlIGNhdmFscnkgYWxvbmUgaGFkCiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCB0aGVyZSBieSBmbGlnaHQsIGFuZCBhc3NlcnRlZCB0aGF0LCBpZiB0aGUgYXJteSB3ZXJlIHNhZmUsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4gd291bGQgbm90IGhhdmUgYXR0YWNrZWQgdGhlIGNhbXA7IHdoaWNoIGZlYXIKICAgICAgICAgICAgICAgICAgICB0aGUgYXJyaXZhbCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gcmVtb3ZlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgZGVzcGFpcmluZyBvZiB0YWtpbmcgdGhlIGNhbXAgYnkgc3Rvcm0sCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGV5IHNhdyB0aGF0IG91ciBtZW4gaGFkIHRha2VuIHVwIHRoZWlyIHBvc2l0aW9uIG9uIHRoZSBmb3J0aWZpY2F0aW9ucywKICAgICAgICAgICAgICAgICAgICByZXRyZWF0ZWQgYmV5b25kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZSA8L25hbWU+IHdpdGggdGhhdCBwbHVuZGVyIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgZGVwb3NpdGVkIGluIHRoZSB3b29kcy4gQW5kIHNvIGdyZWF0IHdhcyB0aGUgYWxhcm0sIGV2ZW4gYWZ0ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlIG9mIHRoZSBlbmVteSwgdGhhdCB3aGVuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Qy4gVm9sdXNlbnVzPC9uYW1lPiwgd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gc2VudCB3aXRoIHRoZSBjYXZhbHJ5LCBhcnJpdmVkIHRoYXQgbmlnaHQsIGhlIGNvdWxkIG5vdCBnYWluIGNyZWRlbmNlIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdhcyBjbG9zZSBhdCBoYW5kIHdpdGggaGlzIGFybXkgc2FmZS4gRmVhcgogICAgICAgICAgICAgICAgICAgIGhhZCBzbyBwcmUtb2NjdXBpZWQgdGhlIG1pbmRzIG9mIGFsbCwgdGhhdCB0aGVpciByZWFzb24gYmVpbmcgYWxtb3N0IGVzdHJhbmdlZCwKICAgICAgICAgICAgICAgICAgICB0aGV5IHNhaWQgdGhhdCBhbGwgdGhlIG90aGVyIGZvcmNlcyBoYXZpbmcgYmVlbiBjdXQgb2ZmLCB0aGUgY2F2YWxyeSBhbG9uZSBoYWQKICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIHRoZXJlIGJ5IGZsaWdodCwgYW5kIGFzc2VydGVkIHRoYXQsIGlmIHRoZSBhcm15IHdlcmUgc2FmZSwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiB3b3VsZCBub3QgaGF2ZSBhdHRhY2tlZCB0aGUgY2FtcDsgd2hpY2ggZmVhcgogICAgICAgICAgICAgICAgICAgIHRoZSBhcnJpdmFsIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiByZW1vdmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlLCBvbiBoaXMgcmV0dXJuLCBiZWluZyB3ZWxsIGF3YXJlIG9mIHRoZSBjYXN1YWx0aWVzIG9mIHdhciwgY29tcGxhaW5lZCBvZiBvbmUKICAgICAgICAgICAgICAgICAgICB0aGluZyBbb25seV0sIG5hbWVseSwgdGhhdCB0aGUgY29ob3J0cyBoYWQgYmVlbiBzZW50IGF3YXkgZnJvbSB0aGUgb3V0cG9zdHMgYW5kCiAgICAgICAgICAgICAgICAgICAgZ2Fycmlzb24gW2R1dHldLCBhbmQgcG9pbnRlZCBvdXQgdGhhdCByb29tIG91Z2h0IG5vdCB0byBoYXZlIGJlZW4gbGVmdCBmb3IgZXZlbgogICAgICAgICAgICAgICAgICAgIHRoZSBtb3N0IHRyaXZpYWwgY2FzdWFsdHk7IHRoYXQgZm9ydHVuZSBoYWQgZXhlcmNpc2VkIGdyZWF0IGluZmx1ZW5jZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzdWRkZW4gYXJyaXZhbCBvZiB0aGVpciBlbmVteTsgbXVjaCBncmVhdGVyLCBpbiB0aGF0IHNoZSBoYWQgdHVybmVkIHRoZQogICAgICAgICAgICAgICAgICAgIGJhcmJhcmlhbnMgYXdheSBmcm9tIHRoZSB2ZXJ5IHJhbXBhcnQgYW5kIGdhdGVzIG9mIHRoZSBjYW1wLiBPZiBhbGwgd2hpY2gKICAgICAgICAgICAgICAgICAgICBldmVudHMsIGl0IHNlZW1lZCB0aGUgbW9zdCBzdXJwcmlzaW5nLCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIHdobyBoYWQgY3Jvc3NlZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiB3aXRoIHRoaXMgb2JqZWN0LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBtaWdodCBwbHVuZGVyIHRoZSB0ZXJyaXRvcmllcyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiwgYmVpbmcgbGVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbXAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LCByZW5kZXJlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiBhCiAgICAgICAgICAgICAgICAgICAgbW9zdCBhY2NlcHRhYmxlIHNlcnZpY2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIHdobyBoYWQgY3Jvc3NlZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiB3aXRoIHRoaXMgb2JqZWN0LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBtaWdodCBwbHVuZGVyIHRoZSB0ZXJyaXRvcmllcyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiwgYmVpbmcgbGVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbXAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LCByZW5kZXJlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiBhCiAgICAgICAgICAgICAgICAgICAgbW9zdCBhY2NlcHRhYmxlIHNlcnZpY2UuIDwvdHJhbnNsYXRpb24+"
translation['6.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIGFnYWluIG1hcmNoZWQgdG8gaGFyYXNzIHRoZSBlbmVteSwgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW5nIGEgbGFyZ2UgbnVtYmVyIFtvZiBhdXhpbGlhcmllc10gZnJvbSB0aGUgbmVpZ2hib3Jpbmcgc3RhdGVzLAogICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoZXMgdGhlbSBpbiBhbGwgZGlyZWN0aW9ucy4gQWxsIHRoZSB2aWxsYWdlcyBhbmQgYWxsIHRoZSBidWlsZGluZ3MsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgZWFjaCBiZWhlbGQsIHdlcmUgb24gZmlyZTogc3BvaWwgd2FzIGJlaW5nIGRyaXZlbiBvZmYgZnJvbSBhbGwgcGFydHM7IHRoZSBjb3JuCiAgICAgICAgICAgICAgICAgICAgbm90IG9ubHkgd2FzIGJlaW5nIGNvbnN1bWVkIGJ5IHNvIGdyZWF0IG51bWJlcnMgb2YgY2F0dGxlIGFuZCBtZW4sIGJ1dCBhbHNvIGhhZAogICAgICAgICAgICAgICAgICAgIGZhbGxlbiB0byB0aGUgZWFydGgsIG93aW5nIHRvIHRoZSB0aW1lIG9mIHRoZSB5ZWFyIGFuZCB0aGUgc3Rvcm1zOyBzbyB0aGF0IGlmCiAgICAgICAgICAgICAgICAgICAgYW55IGhhZCBjb25jZWFsZWQgdGhlbXNlbHZlcyBmb3IgdGhlIHByZXNlbnQsIHN0aWxsLCBpdCBhcHBlYXJlZCBsaWtlbHkgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgbXVzdCBwZXJpc2ggdGhyb3VnaCB3YW50IG9mIGFsbCB0aGluZ3MsIHdoZW4gdGhlIGFybXkgc2hvdWxkIGJlIGRyYXduIG9mZi4KICAgICAgICAgICAgICAgICAgICBBbmQgZnJlcXVlbnRseSBpdCBjYW1lIHRvIHRoYXQgcG9pbnQsIGFzIHNvIGxhcmdlIGEgYm9keSBvZiBjYXZhbHJ5IGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgc2VudCBhYnJvYWQgaW4gYWxsIGRpcmVjdGlvbnMsIHRoYXQgdGhlIHByaXNvbmVycyBkZWNsYXJlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGhhZCBqdXN0IHRoZW4gYmVlbiBzZWVuIGJ5IHRoZW0gaW4gZmxpZ2h0LCBhbmQgaGFkIG5vdCBldmVuIHBhc3NlZCBvdXQgb2Ygc2lnaHQsCiAgICAgICAgICAgICAgICAgICAgc28gdGhhdCB0aGUgaG9wZSBvZiBvdmVydGFraW5nIGhpbSBiZWluZyByYWlzZWQsIGFuZCB1bmJvdW5kZWQgZXhlcnRpb25zIGhhdmluZwogICAgICAgICAgICAgICAgICAgIGJlZW4gcmVzb3J0ZWQgdG8sIHRob3NlIHdobyB0aG91Z2h0IHRoZXkgc2hvdWxkIGFjcXVpcmUgdGhlIGhpZ2hlc3QgZmF2b3Igd2l0aAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIG5lYXJseSBvdmVyY2FtZSBuYXR1cmUgYnkgdGhlaXIgYXJkb3IsIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVhbGx5LCBhIGxpdHRsZSBvbmx5IHNlZW1lZCB3YW50aW5nIHRvIGNvbXBsZXRlIHN1Y2Nlc3M7IGJ1dCBoZSByZXNjdWVkCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBieSBbbWVhbnMgb2ZdIGx1cmtpbmctcGxhY2VzIGFuZCBmb3Jlc3RzLCBhbmQsIGNvbmNlYWxlZCBieSB0aGUgbmlnaHQKICAgICAgICAgICAgICAgICAgICBtYWRlIGZvciBvdGhlciBkaXN0cmljdHMgYW5kIHF1YXJ0ZXJzLCB3aXRoIG5vIGdyZWF0ZXIgZ3VhcmQgdGhhbiB0aGF0IG9mIGZvdXIKICAgICAgICAgICAgICAgICAgICBob3JzZW1lbiwgdG8gd2hvbSBhbG9uZyBoZSB2ZW50dXJlZCB0byBjb25maWRlIGhpcyBsaWZlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgYWdhaW4gbWFyY2hlZCB0byBoYXJhc3MgdGhlIGVuZW15LCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGNvbGxlY3RpbmcgYSBsYXJnZSBudW1iZXIgW29mIGF1eGlsaWFyaWVzXSBmcm9tIHRoZSBuZWlnaGJvcmluZyBzdGF0ZXMsCiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hlcyB0aGVtIGluIGFsbCBkaXJlY3Rpb25zLiBBbGwgdGhlIHZpbGxhZ2VzIGFuZCBhbGwgdGhlIGJ1aWxkaW5ncywgd2hpY2gKICAgICAgICAgICAgICAgICAgICBlYWNoIGJlaGVsZCwgd2VyZSBvbiBmaXJlOiBzcG9pbCB3YXMgYmVpbmcgZHJpdmVuIG9mZiBmcm9tIGFsbCBwYXJ0czsgdGhlIGNvcm4KICAgICAgICAgICAgICAgICAgICBub3Qgb25seSB3YXMgYmVpbmcgY29uc3VtZWQgYnkgc28gZ3JlYXQgbnVtYmVycyBvZiBjYXR0bGUgYW5kIG1lbiwgYnV0IGFsc28gaGFkCiAgICAgICAgICAgICAgICAgICAgZmFsbGVuIHRvIHRoZSBlYXJ0aCwgb3dpbmcgdG8gdGhlIHRpbWUgb2YgdGhlIHllYXIgYW5kIHRoZSBzdG9ybXM7IHNvIHRoYXQgaWYKICAgICAgICAgICAgICAgICAgICBhbnkgaGFkIGNvbmNlYWxlZCB0aGVtc2VsdmVzIGZvciB0aGUgcHJlc2VudCwgc3RpbGwsIGl0IGFwcGVhcmVkIGxpa2VseSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBtdXN0IHBlcmlzaCB0aHJvdWdoIHdhbnQgb2YgYWxsIHRoaW5ncywgd2hlbiB0aGUgYXJteSBzaG91bGQgYmUgZHJhd24gb2ZmLgogICAgICAgICAgICAgICAgICAgIEFuZCBmcmVxdWVudGx5IGl0IGNhbWUgdG8gdGhhdCBwb2ludCwgYXMgc28gbGFyZ2UgYSBib2R5IG9mIGNhdmFscnkgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBzZW50IGFicm9hZCBpbiBhbGwgZGlyZWN0aW9ucywgdGhhdCB0aGUgcHJpc29uZXJzIGRlY2xhcmVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW1iaW9yaXg8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgaGFkIGp1c3QgdGhlbiBiZWVuIHNlZW4gYnkgdGhlbSBpbiBmbGlnaHQsIGFuZCBoYWQgbm90IGV2ZW4gcGFzc2VkIG91dCBvZiBzaWdodCwKICAgICAgICAgICAgICAgICAgICBzbyB0aGF0IHRoZSBob3BlIG9mIG92ZXJ0YWtpbmcgaGltIGJlaW5nIHJhaXNlZCwgYW5kIHVuYm91bmRlZCBleGVydGlvbnMgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVlbiByZXNvcnRlZCB0bywgdGhvc2Ugd2hvIHRob3VnaHQgdGhleSBzaG91bGQgYWNxdWlyZSB0aGUgaGlnaGVzdCBmYXZvciB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgbmVhcmx5IG92ZXJjYW1lIG5hdHVyZSBieSB0aGVpciBhcmRvciwgYW5kCiAgICAgICAgICAgICAgICAgICAgY29udGludWFsbHksIGEgbGl0dGxlIG9ubHkgc2VlbWVkIHdhbnRpbmcgdG8gY29tcGxldGUgc3VjY2VzczsgYnV0IGhlIHJlc2N1ZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGJ5IFttZWFucyBvZl0gbHVya2luZy1wbGFjZXMgYW5kIGZvcmVzdHMsIGFuZCwgY29uY2VhbGVkIGJ5IHRoZSBuaWdodAogICAgICAgICAgICAgICAgICAgIG1hZGUgZm9yIG90aGVyIGRpc3RyaWN0cyBhbmQgcXVhcnRlcnMsIHdpdGggbm8gZ3JlYXRlciBndWFyZCB0aGFuIHRoYXQgb2YgZm91cgogICAgICAgICAgICAgICAgICAgIGhvcnNlbWVuLCB0byB3aG9tIGFsb25nIGhlIHZlbnR1cmVkIHRvIGNvbmZpZGUgaGlzIGxpZmUuIDwvdHJhbnNsYXRpb24+"
translation['6.44'] = ""
translation['7.1'] = ""
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hpbGUgdGhlc2UgdGhpbmdzIGFyZSBpbiBhZ2l0YXRpb24sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPiBkZWNsYXJlICJ0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICB3b3VsZCBkZWNsaW5lIG5vIGRhbmdlciBmb3IgdGhlIHNha2Ugb2YgdGhlIGdlbmVyYWwgc2FmZXR5LCBhbmQgcHJvbWlzZSIgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgd291bGQgYmUgdGhlIGZpcnN0IG9mIGFsbCB0byBiZWdpbiB0aGUgd2FyOyBhbmQgc2luY2UgdGhleSBjYW4gbm90IGF0CiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCB0YWtlIHByZWNhdXRpb25zLCBieSBnaXZpbmcgYW5kIHJlY2VpdmluZyBob3N0YWdlcywgdGhhdCB0aGUgYWZmYWlyCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgbm90IGJlIGRpdnVsZ2VkLCB0aGV5IHJlcXVpcmUgdGhhdCBhIHNvbGVtbiBhc3N1cmFuY2UgYmUgZ2l2ZW4gdGhlbSBieQogICAgICAgICAgICAgICAgICAgIG9hdGggYW5kIHBsaWdodGVkIGhvbm9yLCB0aGVpciBtaWxpdGFyeSBzdGFuZGFyZHMgYmVpbmcgYnJvdWdodCB0b2dldGhlciAoaW4KICAgICAgICAgICAgICAgICAgICB3aGljaCBtYW5uZXIgdGhlaXIgbW9zdCBzYWNyZWQgb2JsaWdhdGlvbnMgYXJlIG1hZGUgYmluZGluZyksIHRoYXQgdGhleSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBub3QgYmUgZGVzZXJ0ZWQgYnkgdGhlIHJlc3Qgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gb24KICAgICAgICAgICAgICAgICAgICBjb21tZW5jaW5nIHRoZSB3YXIuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FybnV0ZXM8L25hbWU+IGRlY2xhcmUgInRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGRlY2xpbmUgbm8gZGFuZ2VyIGZvciB0aGUgc2FrZSBvZiB0aGUgZ2VuZXJhbCBzYWZldHksIGFuZCBwcm9taXNlIiB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSB3b3VsZCBiZSB0aGUgZmlyc3Qgb2YgYWxsIHRvIGJlZ2luIHRoZSB3YXI7IGFuZCBzaW5jZSB0aGV5IGNhbiBub3QgYXQKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IHRha2UgcHJlY2F1dGlvbnMsIGJ5IGdpdmluZyBhbmQgcmVjZWl2aW5nIGhvc3RhZ2VzLCB0aGF0IHRoZSBhZmZhaXIKICAgICAgICAgICAgICAgICAgICBzaGFsbCBub3QgYmUgZGl2dWxnZWQsIHRoZXkgcmVxdWlyZSB0aGF0IGEgc29sZW1uIGFzc3VyYW5jZSBiZSBnaXZlbiB0aGVtIGJ5CiAgICAgICAgICAgICAgICAgICAgb2F0aCBhbmQgcGxpZ2h0ZWQgaG9ub3IsIHRoZWlyIG1pbGl0YXJ5IHN0YW5kYXJkcyBiZWluZyBicm91Z2h0IHRvZ2V0aGVyIChpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIG1hbm5lciB0aGVpciBtb3N0IHNhY3JlZCBvYmxpZ2F0aW9ucyBhcmUgbWFkZSBiaW5kaW5nKSwgdGhhdCB0aGV5IHNob3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBiZSBkZXNlcnRlZCBieSB0aGUgcmVzdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBvbgogICAgICAgICAgICAgICAgICAgIGNvbW1lbmNpbmcgdGhlIHdhci4gPC90cmFuc2xhdGlvbj4="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiB0aGUgYXBwb2ludGVkIGRheSBjYW1lLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4sIHVuZGVyIHRoZSBjb21tYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q290dWF0dXM8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbmV0b2R1bnVzPC9uYW1lPiwgZGVzcGVyYXRlIG1lbiwgbWVldAogICAgICAgICAgICAgICAgICAgIHRvZ2V0aGVyIGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODMzNyIgcmVnPSIgICtPcmxlYW5zIFsxLjksNDcuOV0gKGluaGFiaXRlZCBwbGFjZSksIExvaXJldCwgQ2VudHJlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZW5hYnVtIDwvbmFtZT4sIGFuZCBzbGF5IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGNpdGl6ZW5zIHdobwogICAgICAgICAgICAgICAgICAgIGhhZCBzZXR0bGVkIHRoZXJlIGZvciB0aGUgcHVycG9zZSBvZiB0cmFkaW5nIChhbW9uZyB0aGUgcmVzdCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBGdXNpdXMKICAgICAgICAgICAgICAgICAgICAgICAgQ2l0YTwvbmFtZT4sIGEgZGlzdGluZ3Vpc2hlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGtuaWdodCwgd2hvIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIG9yZGVycyBoYWQgcHJlc2lkZWQgb3ZlciB0aGUgcHJvdmlzaW9uCiAgICAgICAgICAgICAgICAgICAgZGVwYXJ0bWVudCksIGFuZCBwbHVuZGVyIHRoZWlyIHByb3BlcnR5LiBUaGUgcmVwb3J0IGlzIHF1aWNrbHkgc3ByZWFkIGFtb25nIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSBzdGF0ZXMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+OyBmb3IsIHdoZW5ldmVyIGEgbW9yZQogICAgICAgICAgICAgICAgICAgIGltcG9ydGFudCBhbmQgcmVtYXJrYWJsZSBldmVudCB0YWtlcyBwbGFjZSwgdGhleSB0cmFuc21pdCB0aGUgaW50ZWxsaWdlbmNlCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCB0aGVpciBsYW5kcyBhbmQgZGlzdHJpY3RzIGJ5IGEgc2hvdXQ7IHRoZSBvdGhlcnMgdGFrZSBpdCB1cCBpbgogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3Npb24sIGFuZCBwYXNzIGl0IHRvIHRoZWlyIG5laWdoYm9ycywgYXMgaGFwcGVuZWQgb24gdGhpcyBvY2Nhc2lvbjsgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIHRoaW5ncyB3aGljaCB3ZXJlIGRvbmUgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzM3IiByZWc9IiAgK09ybGVhbnMgWzEuOSw0Ny45XSAoaW5oYWJpdGVkIHBsYWNlKSwgTG9pcmV0LCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlbmFidW0gPC9uYW1lPiBhdCBzdW5yaXNlLCB3ZXJlIGhlYXJkIGluIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pPC9uYW1lPiBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgZmlyc3Qgd2F0Y2gsIHdoaWNoIGlzIGFuIGV4dGVudAogICAgICAgICAgICAgICAgICAgIG9mIG1vcmUgdGhhbiBhIGh1bmRyZWQgYW5kIHNpeHR5IG1pbGVzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPiwgdW5kZXIgdGhlIGNvbW1hbmQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3R1YXR1czwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29uZXRvZHVudXM8L25hbWU+LCBkZXNwZXJhdGUgbWVuLCBtZWV0CiAgICAgICAgICAgICAgICAgICAgdG9nZXRoZXIgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzM3IiByZWc9IiAgK09ybGVhbnMgWzEuOSw0Ny45XSAoaW5oYWJpdGVkIHBsYWNlKSwgTG9pcmV0LCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlbmFidW0gPC9uYW1lPiwgYW5kIHNsYXkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gY2l0aXplbnMgd2hvCiAgICAgICAgICAgICAgICAgICAgaGFkIHNldHRsZWQgdGhlcmUgZm9yIHRoZSBwdXJwb3NlIG9mIHRyYWRpbmcgKGFtb25nIHRoZSByZXN0LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIEZ1c2l1cwogICAgICAgICAgICAgICAgICAgICAgICBDaXRhPC9uYW1lPiwgYSBkaXN0aW5ndWlzaGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4ga25pZ2h0LCB3aG8gYnkKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3Mgb3JkZXJzIGhhZCBwcmVzaWRlZCBvdmVyIHRoZSBwcm92aXNpb24KICAgICAgICAgICAgICAgICAgICBkZXBhcnRtZW50KSwgYW5kIHBsdW5kZXIgdGhlaXIgcHJvcGVydHkuIFRoZSByZXBvcnQgaXMgcXVpY2tseSBzcHJlYWQgYW1vbmcgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIHN0YXRlcyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT47IGZvciwgd2hlbmV2ZXIgYSBtb3JlCiAgICAgICAgICAgICAgICAgICAgaW1wb3J0YW50IGFuZCByZW1hcmthYmxlIGV2ZW50IHRha2VzIHBsYWNlLCB0aGV5IHRyYW5zbWl0IHRoZSBpbnRlbGxpZ2VuY2UKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIHRoZWlyIGxhbmRzIGFuZCBkaXN0cmljdHMgYnkgYSBzaG91dDsgdGhlIG90aGVycyB0YWtlIGl0IHVwIGluCiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2lvbiwgYW5kIHBhc3MgaXQgdG8gdGhlaXIgbmVpZ2hib3JzLCBhcyBoYXBwZW5lZCBvbiB0aGlzIG9jY2FzaW9uOyBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgdGhpbmdzIHdoaWNoIHdlcmUgZG9uZSBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzMzciIHJlZz0iICArT3JsZWFucyBbMS45LDQ3LjldIChpbmhhYml0ZWQgcGxhY2UpLCBMb2lyZXQsIENlbnRyZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VuYWJ1bSA8L25hbWU+IGF0IHN1bnJpc2UsIHdlcmUgaGVhcmQgaW4gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFydmVybmk8L25hbWU+IGJlZm9yZSB0aGUgZW5kIG9mIHRoZSBmaXJzdCB3YXRjaCwgd2hpY2ggaXMgYW4gZXh0ZW50CiAgICAgICAgICAgICAgICAgICAgb2YgbW9yZSB0aGFuIGEgaHVuZHJlZCBhbmQgc2l4dHkgbWlsZXMuIDwvdHJhbnNsYXRpb24+"
translation['7.4'] = ""
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGF2aW5nIHF1aWNrbHkgY29sbGVjdGVkIGFuIGFybXkgYnkgdGhlaXIgcHVuaXNobWVudHMsIGhlIHNlbmRzCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdGVyaXVzPC9uYW1lPiwgb25lIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZHVyY2k8L25hbWU+LCBhIG1hbiB0aGUgdXRtb3N0CiAgICAgICAgICAgICAgICAgICAgZGFyaW5nLCB3aXRoIHBhcnQgb2YgaGlzIGZvcmNlcywgaW50byB0aGUgdGVycml0b3J5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJ1dGVuaTwvbmFtZT47CiAgICAgICAgICAgICAgICAgICAgYW5kIG1hcmNoZXMgaW4gcGVyc29uIGludG8gdGhlIGNvdW50cnkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPi4gT24gaGlzCiAgICAgICAgICAgICAgICAgICAgYXJyaXZhbCwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiBzZW5kIGVtYmFzc2Fkb3JzIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB1bmRlciB3aG9zZSBwcm90ZWN0aW9uIHRoZXkgd2VyZSwgdG8gc29saWNpdCBhaWQgaW4gb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IG1vcmUKICAgICAgICAgICAgICAgICAgICBlYXNpbHkgcmVzaXN0IHRoZSBmb3JjZXMgb2YgdGhlIGVuZW15LiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIGJ5IHRoZSBhZHZpY2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgbGlldXRlbmFudHMgd2hvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIGxlZnQgd2l0aCB0aGUgYXJteSwKICAgICAgICAgICAgICAgICAgICBzZW5kIHN1cHBsaWVzIG9mIGhvcnNlIGFuZCBmb290IHRvIHN1Y2NvciB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+LiBXaGVuIHRoZXkKICAgICAgICAgICAgICAgICAgICBjYW1lIHRvIHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIyNDkiIHJlZz0iICArTG9pcmUgKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TG9pcmUgPC9uYW1lPiwgd2hpY2ggc2VwYXJhdGVzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpdHVyaWdlczwvbmFtZT4gZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIHRoZXkgZGVsYXllZCBhIGZldyBkYXlzCiAgICAgICAgICAgICAgICAgICAgdGhlcmUsIGFuZCwgbm90IGRhcmluZyB0byBwYXNzIHRoZSByaXZlciwgcmV0dXJuIGhvbWUsIGFuZCBzZW5kIGJhY2sgd29yZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBsaWV1dGVuYW50cyB0aGF0IHRoZXkgaGFkIHJldHVybmVkIHRocm91Z2ggZmVhciBvZiB0aGUgdHJlYWNoZXJ5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpdHVyaWdlczwvbmFtZT4sIHdobywgdGhleSBhc2NlcnRhaW5lZCwgaGFkIGZvcm1lZCB0aGlzIGRlc2lnbiwgdGhhdAogICAgICAgICAgICAgICAgICAgIGlmIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBzaG91bGQgY3Jvc3MgdGhlIHJpdmVyLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIG9uZSBzaWRlLCBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4gb24gdGhlIG90aGVyLCBzaG91bGQgc3Vycm91bmQgdGhlbS4KICAgICAgICAgICAgICAgICAgICBXaGV0aGVyIHRoZXkgZGlkIHRoaXMgZm9yIHRoZSByZWFzb24gd2hpY2ggdGhleSBhbGxlZ2VkIHRvIHRoZSBsaWV1dGVuYW50cywgb3IKICAgICAgICAgICAgICAgICAgICBpbmZsdWVuY2VkIGJ5IHRyZWFjaGVyeSwgd2UgdGhpbmsgdGhhdCB3ZSBvdWdodCBub3QgdG8gc3RhdGUgYXMgY2VydGFpbiwgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHdlIGhhdmUgbm8gcHJvb2YuIE9uIHRoZWlyIGRlcGFydHVyZSwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiBpbW1lZGlhdGVseQogICAgICAgICAgICAgICAgICAgIHVuaXRlIHRoZW1zZWx2ZXMgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdGVyaXVzPC9uYW1lPiwgb25lIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZHVyY2k8L25hbWU+LCBhIG1hbiB0aGUgdXRtb3N0CiAgICAgICAgICAgICAgICAgICAgZGFyaW5nLCB3aXRoIHBhcnQgb2YgaGlzIGZvcmNlcywgaW50byB0aGUgdGVycml0b3J5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJ1dGVuaTwvbmFtZT47CiAgICAgICAgICAgICAgICAgICAgYW5kIG1hcmNoZXMgaW4gcGVyc29uIGludG8gdGhlIGNvdW50cnkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPi4gT24gaGlzCiAgICAgICAgICAgICAgICAgICAgYXJyaXZhbCwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiBzZW5kIGVtYmFzc2Fkb3JzIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB1bmRlciB3aG9zZSBwcm90ZWN0aW9uIHRoZXkgd2VyZSwgdG8gc29saWNpdCBhaWQgaW4gb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IG1vcmUKICAgICAgICAgICAgICAgICAgICBlYXNpbHkgcmVzaXN0IHRoZSBmb3JjZXMgb2YgdGhlIGVuZW15LiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIGJ5IHRoZSBhZHZpY2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgbGlldXRlbmFudHMgd2hvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIGxlZnQgd2l0aCB0aGUgYXJteSwKICAgICAgICAgICAgICAgICAgICBzZW5kIHN1cHBsaWVzIG9mIGhvcnNlIGFuZCBmb290IHRvIHN1Y2NvciB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+LiBXaGVuIHRoZXkKICAgICAgICAgICAgICAgICAgICBjYW1lIHRvIHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIyNDkiIHJlZz0iICArTG9pcmUgKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TG9pcmUgPC9uYW1lPiwgd2hpY2ggc2VwYXJhdGVzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpdHVyaWdlczwvbmFtZT4gZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIHRoZXkgZGVsYXllZCBhIGZldyBkYXlzCiAgICAgICAgICAgICAgICAgICAgdGhlcmUsIGFuZCwgbm90IGRhcmluZyB0byBwYXNzIHRoZSByaXZlciwgcmV0dXJuIGhvbWUsIGFuZCBzZW5kIGJhY2sgd29yZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBsaWV1dGVuYW50cyB0aGF0IHRoZXkgaGFkIHJldHVybmVkIHRocm91Z2ggZmVhciBvZiB0aGUgdHJlYWNoZXJ5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpdHVyaWdlczwvbmFtZT4sIHdobywgdGhleSBhc2NlcnRhaW5lZCwgaGFkIGZvcm1lZCB0aGlzIGRlc2lnbiwgdGhhdAogICAgICAgICAgICAgICAgICAgIGlmIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBzaG91bGQgY3Jvc3MgdGhlIHJpdmVyLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIG9uZSBzaWRlLCBhbmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4gb24gdGhlIG90aGVyLCBzaG91bGQgc3Vycm91bmQgdGhlbS4KICAgICAgICAgICAgICAgICAgICBXaGV0aGVyIHRoZXkgZGlkIHRoaXMgZm9yIHRoZSByZWFzb24gd2hpY2ggdGhleSBhbGxlZ2VkIHRvIHRoZSBsaWV1dGVuYW50cywgb3IKICAgICAgICAgICAgICAgICAgICBpbmZsdWVuY2VkIGJ5IHRyZWFjaGVyeSwgd2UgdGhpbmsgdGhhdCB3ZSBvdWdodCBub3QgdG8gc3RhdGUgYXMgY2VydGFpbiwgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHdlIGhhdmUgbm8gcHJvb2YuIE9uIHRoZWlyIGRlcGFydHVyZSwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiBpbW1lZGlhdGVseQogICAgICAgICAgICAgICAgICAgIHVuaXRlIHRoZW1zZWx2ZXMgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['7.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlc2UgYWZmYWlycyBiZWluZyBhbm5vdW5jZWQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPiwgYXQgdGhlIHRpbWUgd2hlbiBoZSB1bmRlcnN0b29kIHRoYXQgbWF0dGVycyBpbiB0aGUgY2l0eSBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIHJlZHVjZWQgdG8gYSBtb3JlIHRyYW5xdWlsIHN0YXRlIGJ5IHRoZSBlbmVyZ3kgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbmVpdXMKICAgICAgICAgICAgICAgICAgICAgICAgUG9tcGV5PC9uYW1lPiwgaGUgc2V0IG91dCBmb3IgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UcmFuc2FscGluZSBHYXVsPC9uYW1lPi4gQWZ0ZXIgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCB0aGVyZSwgaGUgd2FzIGdyZWF0bHkgYXQgYSBsb3NzIHRvIGtub3cgYnkgd2hhdCBtZWFucyBoZSBjb3VsZCByZWFjaCBoaXMKICAgICAgICAgICAgICAgICAgICBhcm15LiBGb3IgaWYgaGUgc2hvdWxkIHN1bW1vbiB0aGUgbGVnaW9ucyBpbnRvIHRoZSBwcm92aW5jZSwgaGUgd2FzIGF3YXJlIHRoYXQKICAgICAgICAgICAgICAgICAgICBvbiB0aGVpciBtYXJjaCB0aGV5IHdvdWxkIGhhdmUgdG8gZmlnaHQgaW4gaGlzIGFic2VuY2U7IGhlIGZvcmVzYXcgdG9vIHRoYXQgaWYKICAgICAgICAgICAgICAgICAgICBoZSBoaW1zZWxmIHNob3VsZCBlbmRlYXZvciB0byByZWFjaCB0aGUgYXJteSwgaGUgd291bGQgYWN0IGluanVkaWNpb3VzbHksIGluCiAgICAgICAgICAgICAgICAgICAgdHJ1c3RpbmcgaGlzIHNhZmV0eSBldmVuIHRvIHRob3NlIHdobyBzZWVtZWQgdG8gYmUgdHJhbnF1aWxpemVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIiByZWc9Ikl0YWx5IFsxMi44MzMsNDIuODMzXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+SXRhbHk8L25hbWU+LCBhdCB0aGUgdGltZSB3aGVuIGhlIHVuZGVyc3Rvb2QgdGhhdCBtYXR0ZXJzIGluIHRoZSBjaXR5IGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gcmVkdWNlZCB0byBhIG1vcmUgdHJhbnF1aWwgc3RhdGUgYnkgdGhlIGVuZXJneSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNuZWl1cwogICAgICAgICAgICAgICAgICAgICAgICBQb21wZXk8L25hbWU+LCBoZSBzZXQgb3V0IGZvciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyYW5zYWxwaW5lIEdhdWw8L25hbWU+LiBBZnRlciBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIHRoZXJlLCBoZSB3YXMgZ3JlYXRseSBhdCBhIGxvc3MgdG8ga25vdyBieSB3aGF0IG1lYW5zIGhlIGNvdWxkIHJlYWNoIGhpcwogICAgICAgICAgICAgICAgICAgIGFybXkuIEZvciBpZiBoZSBzaG91bGQgc3VtbW9uIHRoZSBsZWdpb25zIGludG8gdGhlIHByb3ZpbmNlLCBoZSB3YXMgYXdhcmUgdGhhdAogICAgICAgICAgICAgICAgICAgIG9uIHRoZWlyIG1hcmNoIHRoZXkgd291bGQgaGF2ZSB0byBmaWdodCBpbiBoaXMgYWJzZW5jZTsgaGUgZm9yZXNhdyB0b28gdGhhdCBpZgogICAgICAgICAgICAgICAgICAgIGhlIGhpbXNlbGYgc2hvdWxkIGVuZGVhdm9yIHRvIHJlYWNoIHRoZSBhcm15LCBoZSB3b3VsZCBhY3QgaW5qdWRpY2lvdXNseSwgaW4KICAgICAgICAgICAgICAgICAgICB0cnVzdGluZyBoaXMgc2FmZXR5IGV2ZW4gdG8gdGhvc2Ugd2hvIHNlZW1lZCB0byBiZSB0cmFucXVpbGl6ZWQuIDwvdHJhbnNsYXRpb24+"
translation['7.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gdGhlIG1lYW4gdGltZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3Rlcml1czwvbmFtZT4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FkdXJjYW48L25hbWU+LCBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIHNlbnQgaW50byB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5SdXRlbmk8L25hbWU+LCBnYWlucyBvdmVyIHRoYXQgc3RhdGUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4uIEhhdmluZyBhZHZhbmNlZCBpbnRvIHRoZSBjb3VudHJ5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5pdGlvYnJpZ2VzPC9uYW1lPiwgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FiYWxpPC9uYW1lPiwgaGUgcmVjZWl2ZXMgaG9zdGFnZXMgZnJvbQogICAgICAgICAgICAgICAgICAgIGJvdGggbmF0aW9ucywgYW5kLCBhc3NlbWJsaW5nIGEgbnVtZXJvdXMgZm9yY2UsIG1hcmNoZXMgdG8gbWFrZSBhIGRlc2NlbnQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UgaW4gdGhlIGRpcmVjdGlvbiBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzNjgiIHJlZz0iICArTmFyYm9ubmUgWzMsNDMuMTgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgQXVkZSwgTGFuZ3VlZG9jLVJvdXNzaWxsb24sIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPk5hcmJvIDwvbmFtZT4uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgd2hlbiB0aGlzIGNpcmN1bXN0YW5jZSB3YXMKICAgICAgICAgICAgICAgICAgICBhbm5vdW5jZWQgdG8gaGltLCB0aG91Z2h0IHRoYXQgdGhlIG1hcmNoIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM2OCIgcmVnPSIgICtOYXJib25uZSBbMyw0My4xODNdIChpbmhhYml0ZWQgcGxhY2UpLCBBdWRlLCBMYW5ndWVkb2MtUm91c3NpbGxvbiwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TmFyYm8gPC9uYW1lPiBvdWdodCB0byB0YWtlIHRoZSBwcmVjZWRlbmNlIG9mIGFsbCBoaXMgb3RoZXIgcGxhbnMuIFdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIHRoZXJlLCBoZSBlbmNvdXJhZ2VzIHRoZSB0aW1pZCBhbmQgc3RhdGlvbnMgZ2Fycmlzb25zIGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJ1dGVuaTwvbmFtZT4sIGluIHRoZSBwcm92aW5jZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Wb2xjYWUgQXJlY29taWNpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGNvdW50cnkgYXJvdW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM2OCIgcmVnPSIgICtOYXJib25uZSBbMyw0My4xODNdIChpbmhhYml0ZWQgcGxhY2UpLCBBdWRlLCBMYW5ndWVkb2MtUm91c3NpbGxvbiwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TmFyYm8gPC9uYW1lPiB3aGljaCB3YXMgaW4gdGhlIHZpY2luaXR5IG9mIHRoZSBlbmVteTsgaGUgb3JkZXJzIGEgcG9ydGlvbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBmb3JjZXMgZnJvbSB0aGUgcHJvdmluY2UsIGFuZCB0aGUgcmVjcnVpdHMgd2hpY2ggaGUgaGFkIGJyb3VnaHQgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiIHJlZz0iSXRhbHkgWzEyLjgzMyw0Mi44MzNdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5JdGFseTwvbmFtZT4sIHRvIHJlbmRlenZvdXMKICAgICAgICAgICAgICAgICAgICBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWx2aWk8L25hbWU+IHdobyBib3JkZXIgb24gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFydmVybmk8L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3Rlcml1czwvbmFtZT4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FkdXJjYW48L25hbWU+LCBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIHNlbnQgaW50byB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5SdXRlbmk8L25hbWU+LCBnYWlucyBvdmVyIHRoYXQgc3RhdGUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4uIEhhdmluZyBhZHZhbmNlZCBpbnRvIHRoZSBjb3VudHJ5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5pdGlvYnJpZ2VzPC9uYW1lPiwgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FiYWxpPC9uYW1lPiwgaGUgcmVjZWl2ZXMgaG9zdGFnZXMgZnJvbQogICAgICAgICAgICAgICAgICAgIGJvdGggbmF0aW9ucywgYW5kLCBhc3NlbWJsaW5nIGEgbnVtZXJvdXMgZm9yY2UsIG1hcmNoZXMgdG8gbWFrZSBhIGRlc2NlbnQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UgaW4gdGhlIGRpcmVjdGlvbiBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzNjgiIHJlZz0iICArTmFyYm9ubmUgWzMsNDMuMTgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgQXVkZSwgTGFuZ3VlZG9jLVJvdXNzaWxsb24sIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPk5hcmJvIDwvbmFtZT4uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgd2hlbiB0aGlzIGNpcmN1bXN0YW5jZSB3YXMKICAgICAgICAgICAgICAgICAgICBhbm5vdW5jZWQgdG8gaGltLCB0aG91Z2h0IHRoYXQgdGhlIG1hcmNoIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM2OCIgcmVnPSIgICtOYXJib25uZSBbMyw0My4xODNdIChpbmhhYml0ZWQgcGxhY2UpLCBBdWRlLCBMYW5ndWVkb2MtUm91c3NpbGxvbiwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TmFyYm8gPC9uYW1lPiBvdWdodCB0byB0YWtlIHRoZSBwcmVjZWRlbmNlIG9mIGFsbCBoaXMgb3RoZXIgcGxhbnMuIFdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIHRoZXJlLCBoZSBlbmNvdXJhZ2VzIHRoZSB0aW1pZCBhbmQgc3RhdGlvbnMgZ2Fycmlzb25zIGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJ1dGVuaTwvbmFtZT4sIGluIHRoZSBwcm92aW5jZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Wb2xjYWUgQXJlY29taWNpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGNvdW50cnkgYXJvdW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM2OCIgcmVnPSIgICtOYXJib25uZSBbMyw0My4xODNdIChpbmhhYml0ZWQgcGxhY2UpLCBBdWRlLCBMYW5ndWVkb2MtUm91c3NpbGxvbiwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TmFyYm8gPC9uYW1lPiB3aGljaCB3YXMgaW4gdGhlIHZpY2luaXR5IG9mIHRoZSBlbmVteTsgaGUgb3JkZXJzIGEgcG9ydGlvbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBmb3JjZXMgZnJvbSB0aGUgcHJvdmluY2UsIGFuZCB0aGUgcmVjcnVpdHMgd2hpY2ggaGUgaGFkIGJyb3VnaHQgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiIHJlZz0iSXRhbHkgWzEyLjgzMyw0Mi44MzNdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5JdGFseTwvbmFtZT4sIHRvIHJlbmRlenZvdXMKICAgICAgICAgICAgICAgICAgICBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWx2aWk8L25hbWU+IHdobyBib3JkZXIgb24gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFydmVybmk8L25hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['7.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlc2UgbWF0dGVycyBiZWluZyBhcnJhbmdlZCwgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdGVyaXVzPC9uYW1lPiBub3cgY2hlY2tlZCBhbmQgZm9yY2VkCiAgICAgICAgICAgICAgICAgICAgdG8gcmV0cmVhdCwgYmVjYXVzZSBoZSB0aG91Z2h0IGl0IGRhbmdlcm91cyB0byBlbnRlciB0aGUgbGluZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGdhcnJpc29ucywgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgbWFyY2hlcyBpbnRvIHRoZSBjb3VudHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZpaTwvbmFtZT47IGFsdGhvdWdoIG1vdW50IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwOTAxMSIgcmVnPSIgICtDZXZlbm5lcyBbMy41LDQ0XSAocmVnaW9uIChnZW5lcmFsKSksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkNldmVubmVzCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgd2hpY2ggc2VwYXJhdGVzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFydmVybmk8L25hbWU+IGZyb20gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsdmlpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBibG9ja2VkIHVwIHRoZSB3YXkgd2l0aCB2ZXJ5IGRlZXAgc25vdywgYXMgaXQgd2FzIHRoZSBzZXZlcmVzdCBzZWFzb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgeWVhcjsgeWV0IGhhdmluZyBjbGVhcmVkIGF3YXkgdGhlIHNub3cgdG8gdGhlIGRlcHRoIG9mIHNpeCBmZWV0LCBhbmQgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgb3BlbmVkIHRoZSByb2FkcywgaGUgcmVhY2hlcyB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4sIHdpdGgKICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZSBsYWJvciB0byBoaXMgc29sZGllcnMuIFRoaXMgcGVvcGxlIGJlaW5nIHN1cnByaXNlZCwgYmVjYXVzZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJlZCB0aGVtc2VsdmVzIGRlZmVuZGVkIGJ5IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDkwMTEiIHJlZz0iICArQ2V2ZW5uZXMgWzMuNSw0NF0gKHJlZ2lvbiAoZ2VuZXJhbCkpLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5DZXZlbm5lcwogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gYXMgYnkgYSB3YWxsLCBhbmQgdGhlIHBhdGhzIGF0IHRoaXMgc2Vhc29uIG9mIHRoZSB5ZWFyIGhhZCBuZXZlciBiZWZvcmUKICAgICAgICAgICAgICAgICAgICBiZWVuIHBhc3NhYmxlIGV2ZW4gdG8gaW5kaXZpZHVhbHMsIGhlIG9yZGVycyB0aGUgY2F2YWxyeSB0byBleHRlbmQgdGhlbXNlbHZlcyBhcwogICAgICAgICAgICAgICAgICAgIGZhciBhcyB0aGV5IGNvdWxkLCBhbmQgc3RyaWtlIGFzIGdyZWF0IGEgcGFuaWMgYXMgcG9zc2libGUgaW50byB0aGUgZW5lbXkuIFRoZXNlCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZ3MgYXJlIHNwZWVkaWx5IGFubm91bmNlZCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+IGJ5IHJ1bW9yIGFuZAogICAgICAgICAgICAgICAgICAgIGhpcyBtZXNzZW5nZXJzLiBBcm91bmQgaGltIGFsbCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pPC9uYW1lPiBjcm93ZCBpbiBhbGFybSwgYW5kCiAgICAgICAgICAgICAgICAgICAgc29sZW1ubHkgZW50cmVhdCBoaW0gdG8gcHJvdGVjdCB0aGVpciBwcm9wZXJ0eSwgYW5kIG5vdCB0byBzdWZmZXIgdGhlbSB0byBiZQogICAgICAgICAgICAgICAgICAgIHBsdW5kZXJlZCBieSB0aGUgZW5lbXksIGVzcGVjaWFsbHkgYXMgaGUgc2F3IHRoYXQgYWxsIHRoZSB3YXIgd2FzIHRyYW5zZmVycmVkCiAgICAgICAgICAgICAgICAgICAgaW50byB0aGVpciBjb3VudHJ5LiBCZWluZyBwcmV2YWlsZWQgdXBvbiBieSB0aGVpciBlbnRyZWF0aWVzIGhlIG1vdmVzIGhpcyBjYW1wCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+IGluIHRoZSBkaXJlY3Rpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdGVyaXVzPC9uYW1lPiBub3cgY2hlY2tlZCBhbmQgZm9yY2VkCiAgICAgICAgICAgICAgICAgICAgdG8gcmV0cmVhdCwgYmVjYXVzZSBoZSB0aG91Z2h0IGl0IGRhbmdlcm91cyB0byBlbnRlciB0aGUgbGluZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGdhcnJpc29ucywgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgbWFyY2hlcyBpbnRvIHRoZSBjb3VudHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZpaTwvbmFtZT47IGFsdGhvdWdoIG1vdW50IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwOTAxMSIgcmVnPSIgICtDZXZlbm5lcyBbMy41LDQ0XSAocmVnaW9uIChnZW5lcmFsKSksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkNldmVubmVzCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgd2hpY2ggc2VwYXJhdGVzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFydmVybmk8L25hbWU+IGZyb20gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsdmlpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBibG9ja2VkIHVwIHRoZSB3YXkgd2l0aCB2ZXJ5IGRlZXAgc25vdywgYXMgaXQgd2FzIHRoZSBzZXZlcmVzdCBzZWFzb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgeWVhcjsgeWV0IGhhdmluZyBjbGVhcmVkIGF3YXkgdGhlIHNub3cgdG8gdGhlIGRlcHRoIG9mIHNpeCBmZWV0LCBhbmQgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgb3BlbmVkIHRoZSByb2FkcywgaGUgcmVhY2hlcyB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4sIHdpdGgKICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZSBsYWJvciB0byBoaXMgc29sZGllcnMuIFRoaXMgcGVvcGxlIGJlaW5nIHN1cnByaXNlZCwgYmVjYXVzZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJlZCB0aGVtc2VsdmVzIGRlZmVuZGVkIGJ5IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDkwMTEiIHJlZz0iICArQ2V2ZW5uZXMgWzMuNSw0NF0gKHJlZ2lvbiAoZ2VuZXJhbCkpLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5DZXZlbm5lcwogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gYXMgYnkgYSB3YWxsLCBhbmQgdGhlIHBhdGhzIGF0IHRoaXMgc2Vhc29uIG9mIHRoZSB5ZWFyIGhhZCBuZXZlciBiZWZvcmUKICAgICAgICAgICAgICAgICAgICBiZWVuIHBhc3NhYmxlIGV2ZW4gdG8gaW5kaXZpZHVhbHMsIGhlIG9yZGVycyB0aGUgY2F2YWxyeSB0byBleHRlbmQgdGhlbXNlbHZlcyBhcwogICAgICAgICAgICAgICAgICAgIGZhciBhcyB0aGV5IGNvdWxkLCBhbmQgc3RyaWtlIGFzIGdyZWF0IGEgcGFuaWMgYXMgcG9zc2libGUgaW50byB0aGUgZW5lbXkuIFRoZXNlCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZ3MgYXJlIHNwZWVkaWx5IGFubm91bmNlZCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+IGJ5IHJ1bW9yIGFuZAogICAgICAgICAgICAgICAgICAgIGhpcyBtZXNzZW5nZXJzLiBBcm91bmQgaGltIGFsbCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pPC9uYW1lPiBjcm93ZCBpbiBhbGFybSwgYW5kCiAgICAgICAgICAgICAgICAgICAgc29sZW1ubHkgZW50cmVhdCBoaW0gdG8gcHJvdGVjdCB0aGVpciBwcm9wZXJ0eSwgYW5kIG5vdCB0byBzdWZmZXIgdGhlbSB0byBiZQogICAgICAgICAgICAgICAgICAgIHBsdW5kZXJlZCBieSB0aGUgZW5lbXksIGVzcGVjaWFsbHkgYXMgaGUgc2F3IHRoYXQgYWxsIHRoZSB3YXIgd2FzIHRyYW5zZmVycmVkCiAgICAgICAgICAgICAgICAgICAgaW50byB0aGVpciBjb3VudHJ5LiBCZWluZyBwcmV2YWlsZWQgdXBvbiBieSB0aGVpciBlbnRyZWF0aWVzIGhlIG1vdmVzIGhpcyBjYW1wCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+IGluIHRoZSBkaXJlY3Rpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['7.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgZGVsYXllZCB0d28gZGF5cyBpbiB0aGF0IHBsYWNlLCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIGFudGljaXBhdGVkIHRoYXQsIGluIHRoZSBuYXR1cmFsIGNvdXJzZSBvZiBldmVudHMsIHN1Y2ggd291bGQgYmUgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uZHVjdCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+LCBsZWF2ZXMgdGhlIGFybXkgdW5kZXIgcHJldGVuc2Ugb2YgcmFpc2luZwogICAgICAgICAgICAgICAgICAgIHJlY3J1aXRzIGFuZCBjYXZhbHJ5OiBoZSBwbGFjZXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5CcnV0dXM8L25hbWU+LCBhIHlvdW5nIG1hbiwgaW4KICAgICAgICAgICAgICAgICAgICBjb21tYW5kIG9mIHRoZXNlIGZvcmNlczsgaGUgZ2l2ZXMgaGltIGluc3RydWN0aW9ucyB0aGF0IHRoZSBjYXZhbHJ5IHNob3VsZCByYW5nZQogICAgICAgICAgICAgICAgICAgIGFzIGV4dGVuc2l2ZWx5IGFzIHBvc3NpYmxlIGluIGFsbCBkaXJlY3Rpb25zOyB0aGF0IGhlIHdvdWxkIGV4ZXJ0IGhpbXNlbGYgbm90IHRvCiAgICAgICAgICAgICAgICAgICAgYmUgYWJzZW50IGZyb20gdGhlIGNhbXAgbG9uZ2VyIHRoYW4gdGhyZWUgZGF5cy4gSGF2aW5nIGFycmFuZ2VkIHRoZXNlIG1hdHRlcnMsCiAgICAgICAgICAgICAgICAgICAgaGUgbWFyY2hlcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg1ODkiIHJlZz0iICArVmllbm5lIFs0LjksNDUuNTMzXSAoaW5oYWJpdGVkIHBsYWNlKSwgSXNlcmUsIFJob25lLUFscGVzLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5WaWVubmEgPC9uYW1lPiBieSBhcyBsb25nIGpvdXJuZXlzIGFzIGhlIGNhbiwgd2hlbiBoaXMgb3duIHNvbGRpZXJzIGRpZCBub3QKICAgICAgICAgICAgICAgICAgICBleHBlY3QgaGltLiBGaW5kaW5nIHRoZXJlIGEgZnJlc2ggYm9keSBvZiBjYXZhbHJ5LCB3aGljaCBoZSBoYWQgc2VudCBvbiB0byB0aGF0CiAgICAgICAgICAgICAgICAgICAgcGxhY2Ugc2V2ZXJhbCBkYXlzIGJlZm9yZSwgbWFyY2hpbmcgaW5jZXNzYW50bHkgbmlnaHQgYW5kIGRheSwgaGUgYWR2YW5jZWQKICAgICAgICAgICAgICAgICAgICByYXBpZGx5IHRocm91Z2ggdGhlIHRlcnJpdG9yeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gaW50byB0aGF0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzNDMiIHJlZz0iICArTGFuZ3JlcyBbNS4zMzMsNDcuODgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgSGF1dGUtTWFybmUsIENoYW1wYWduZS1BcmRlbm5lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5MaW5nb25lcyA8L25hbWU+LCBpbiB3aGljaCB0d28gbGVnaW9ucyB3ZXJlIHdpbnRlcmluZywgdGhhdCwgaWYgYW55IHBsYW4KICAgICAgICAgICAgICAgICAgICBhZmZlY3RpbmcgaGlzIG93biBzYWZldHkgc2hvdWxkIGhhdmUgYmVlbiBvcmdhbml6ZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGhlIG1pZ2h0IGRlZmVhdCBpdCBieSB0aGUgcmFwaWRpdHkgb2YgaGlzIG1vdmVtZW50cy4gV2hlbiBoZSBhcnJpdmVkIHRoZXJlLCBoZQogICAgICAgICAgICAgICAgICAgIHNlbmRzIGluZm9ybWF0aW9uIHRvIHRoZSByZXN0IG9mIHRoZSBsZWdpb25zLCBhbmQgZ2F0aGVycyBhbGwgaGlzIGFybXkgaW50byBvbmUKICAgICAgICAgICAgICAgICAgICBwbGFjZSBiZWZvcmUgaW50ZWxsaWdlbmNlIG9mIGhpcyBhcnJpdmFsIGNvdWxkIGJlIGFubm91bmNlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pPC9uYW1lPi4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiwgb24gaGVhcmluZyB0aGlzCiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlLCBsZWFkcyBiYWNrIGhpcyBhcm15IGludG8gdGhlIGNvdW50cnkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+OyBhbmQgYWZ0ZXIgbWFyY2hpbmcgZnJvbSBpdCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDIyMzIiIHJlZz0iICArR2VyZ292aWUgWzMuMTE2LDQ1LjcxNl0gKGRlc2VydGVkIHNldHRsZW1lbnQpLCBQdXktZGUtRG9tZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcmdvdmlhIDwvbmFtZT4sIGEgdG93biBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Cb2lpPC9uYW1lPiwgd2hvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIHNldHRsZWQgdGhlcmUgYWZ0ZXIgZGVmZWF0aW5nIHRoZW0gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsdmV0aWFuPC9uYW1lPiB3YXIsIGFuZCBoYWQgcmVuZGVyZWQgdHJpYnV0YXJ5IHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgaGUgZGV0ZXJtaW5lZCB0byBhdHRhY2sgaXQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhhdmluZyBkZWxheWVkIHR3byBkYXlzIGluIHRoYXQgcGxhY2UsIGJlY2F1c2UKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgYW50aWNpcGF0ZWQgdGhhdCwgaW4gdGhlIG5hdHVyYWwgY291cnNlIG9mIGV2ZW50cywgc3VjaCB3b3VsZCBiZSB0aGUKICAgICAgICAgICAgICAgICAgICBjb25kdWN0IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4sIGxlYXZlcyB0aGUgYXJteSB1bmRlciBwcmV0ZW5zZSBvZiByYWlzaW5nCiAgICAgICAgICAgICAgICAgICAgcmVjcnVpdHMgYW5kIGNhdmFscnk6IGhlIHBsYWNlcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkJydXR1czwvbmFtZT4sIGEgeW91bmcgbWFuLCBpbgogICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgb2YgdGhlc2UgZm9yY2VzOyBoZSBnaXZlcyBoaW0gaW5zdHJ1Y3Rpb25zIHRoYXQgdGhlIGNhdmFscnkgc2hvdWxkIHJhbmdlCiAgICAgICAgICAgICAgICAgICAgYXMgZXh0ZW5zaXZlbHkgYXMgcG9zc2libGUgaW4gYWxsIGRpcmVjdGlvbnM7IHRoYXQgaGUgd291bGQgZXhlcnQgaGltc2VsZiBub3QgdG8KICAgICAgICAgICAgICAgICAgICBiZSBhYnNlbnQgZnJvbSB0aGUgY2FtcCBsb25nZXIgdGhhbiB0aHJlZSBkYXlzLiBIYXZpbmcgYXJyYW5nZWQgdGhlc2UgbWF0dGVycywKICAgICAgICAgICAgICAgICAgICBoZSBtYXJjaGVzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODU4OSIgcmVnPSIgICtWaWVubmUgWzQuOSw0NS41MzNdIChpbmhhYml0ZWQgcGxhY2UpLCBJc2VyZSwgUmhvbmUtQWxwZXMsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlZpZW5uYSA8L25hbWU+IGJ5IGFzIGxvbmcgam91cm5leXMgYXMgaGUgY2FuLCB3aGVuIGhpcyBvd24gc29sZGllcnMgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIGV4cGVjdCBoaW0uIEZpbmRpbmcgdGhlcmUgYSBmcmVzaCBib2R5IG9mIGNhdmFscnksIHdoaWNoIGhlIGhhZCBzZW50IG9uIHRvIHRoYXQKICAgICAgICAgICAgICAgICAgICBwbGFjZSBzZXZlcmFsIGRheXMgYmVmb3JlLCBtYXJjaGluZyBpbmNlc3NhbnRseSBuaWdodCBhbmQgZGF5LCBoZSBhZHZhbmNlZAogICAgICAgICAgICAgICAgICAgIHJhcGlkbHkgdGhyb3VnaCB0aGUgdGVycml0b3J5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBpbnRvIHRoYXQgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM0MyIgcmVnPSIgICtMYW5ncmVzIFs1LjMzMyw0Ny44ODNdIChpbmhhYml0ZWQgcGxhY2UpLCBIYXV0ZS1NYXJuZSwgQ2hhbXBhZ25lLUFyZGVubmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkxpbmdvbmVzIDwvbmFtZT4sIGluIHdoaWNoIHR3byBsZWdpb25zIHdlcmUgd2ludGVyaW5nLCB0aGF0LCBpZiBhbnkgcGxhbgogICAgICAgICAgICAgICAgICAgIGFmZmVjdGluZyBoaXMgb3duIHNhZmV0eSBzaG91bGQgaGF2ZSBiZWVuIG9yZ2FuaXplZCBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgaGUgbWlnaHQgZGVmZWF0IGl0IGJ5IHRoZSByYXBpZGl0eSBvZiBoaXMgbW92ZW1lbnRzLiBXaGVuIGhlIGFycml2ZWQgdGhlcmUsIGhlCiAgICAgICAgICAgICAgICAgICAgc2VuZHMgaW5mb3JtYXRpb24gdG8gdGhlIHJlc3Qgb2YgdGhlIGxlZ2lvbnMsIGFuZCBnYXRoZXJzIGFsbCBoaXMgYXJteSBpbnRvIG9uZQogICAgICAgICAgICAgICAgICAgIHBsYWNlIGJlZm9yZSBpbnRlbGxpZ2VuY2Ugb2YgaGlzIGFycml2YWwgY291bGQgYmUgYW5ub3VuY2VkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFydmVybmk8L25hbWU+LiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+LCBvbiBoZWFyaW5nIHRoaXMKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2UsIGxlYWRzIGJhY2sgaGlzIGFybXkgaW50byB0aGUgY291bnRyeSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpdHVyaWdlczwvbmFtZT47IGFuZCBhZnRlciBtYXJjaGluZyBmcm9tIGl0IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMjIzMiIgcmVnPSIgICtHZXJnb3ZpZSBbMy4xMTYsNDUuNzE2XSAoZGVzZXJ0ZWQgc2V0dGxlbWVudCksIFB1eS1kZS1Eb21lLCBBdXZlcmduZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VyZ292aWEgPC9uYW1lPiwgYSB0b3duIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJvaWk8L25hbWU+LCB3aG9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgc2V0dGxlZCB0aGVyZSBhZnRlciBkZWZlYXRpbmcgdGhlbSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWx2ZXRpYW48L25hbWU+IHdhciwgYW5kIGhhZCByZW5kZXJlZCB0cmlidXRhcnkgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCBoZSBkZXRlcm1pbmVkIHRvIGF0dGFjayBpdC4gPC90cmFuc2xhdGlvbj4="
translation['7.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgYWN0aW9uIGNhdXNlZCBncmVhdCBwZXJwbGV4aXR5IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24gb2YgaGlzIHBsYW5zOyBbaGUgZmVhcmVkXSBsZXN0LCBpZiBoZSBzaG91bGQgY29uZmluZSBoaXMgbGVnaW9ucyBpbgogICAgICAgICAgICAgICAgICAgIG9uZSBwbGFjZSBmb3IgdGhlIHJlbWFpbmluZyBwb3J0aW9uIG9mIHRoZSB3aW50ZXIsIGFsbCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gc2hvdWxkIHJldm9sdAogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHRyaWJ1dGFyaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiB3ZXJlIHN1YmR1ZWQsIGJlY2F1c2UgaXQgd291bGQKICAgICAgICAgICAgICAgICAgICBhcHBlYXIgdGhhdCB0aGVyZSB3YXMgaW4gaGltIG5vIHByb3RlY3Rpb24gZm9yIGhpcyBmcmllbmRzOyBidXQgaWYgaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgZHJhdyB0aGVtIHRvbyBzb29uIG91dCBvZiB0aGVpciB3aW50ZXIgcXVhcnRlcnMsIGhlIG1pZ2h0IGJlIGRpc3RyZXNzZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgd2FudCBvZiBwcm92aXNpb25zLCBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgZGlmZmljdWx0eSBvZiBjb252ZXlhbmNlLiBJdCBzZWVtZWQKICAgICAgICAgICAgICAgICAgICBiZXR0ZXIsIGhvd2V2ZXIsIHRvIGVuZHVyZSBldmVyeSBoYXJkc2hpcCB0aGFuIHRvIGFsaWVuYXRlIHRoZSBhZmZlY3Rpb25zIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIGhpcyBhbGxpZXMsIGJ5IHN1Ym1pdHRpbmcgdG8gc3VjaCBhbiBpbnN1bHQuIEhhdmluZywgdGhlcmVmb3JlLCBpbXByZXNzZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IHRoZSBuZWNlc3NpdHkgb2Ygc3VwcGx5aW5nIGhpbSB3aXRoIHByb3Zpc2lvbnMsIGhlIHNlbmRzCiAgICAgICAgICAgICAgICAgICAgZm9yd2FyZCBtZXNzZW5nZXJzIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJvaWk8L25hbWU+IHRvIGluZm9ybSB0aGVtIG9mIGhpcyBhcnJpdmFsLCBhbmQKICAgICAgICAgICAgICAgICAgICBlbmNvdXJhZ2UgdGhlbSB0byByZW1haW4gZmlybSBpbiB0aGVpciBhbGxlZ2lhbmNlLCBhbmQgcmVzaXN0IHRoZSBhdHRhY2sgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXkgd2l0aCBncmVhdCByZXNvbHV0aW9uLiBIYXZpbmcgbGVmdCB0d28gbGVnaW9ucyBhbmQgdGhlIGx1Z2dhZ2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZW50aXJlIGFybXkgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwbGFjZSI+QWdlbmRpY3VtPC9uYW1lPiwgaGUgbWFyY2hlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Cb2lpPC9uYW1lPi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24gb2YgaGlzIHBsYW5zOyBbaGUgZmVhcmVkXSBsZXN0LCBpZiBoZSBzaG91bGQgY29uZmluZSBoaXMgbGVnaW9ucyBpbgogICAgICAgICAgICAgICAgICAgIG9uZSBwbGFjZSBmb3IgdGhlIHJlbWFpbmluZyBwb3J0aW9uIG9mIHRoZSB3aW50ZXIsIGFsbCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gc2hvdWxkIHJldm9sdAogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHRyaWJ1dGFyaWVzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiB3ZXJlIHN1YmR1ZWQsIGJlY2F1c2UgaXQgd291bGQKICAgICAgICAgICAgICAgICAgICBhcHBlYXIgdGhhdCB0aGVyZSB3YXMgaW4gaGltIG5vIHByb3RlY3Rpb24gZm9yIGhpcyBmcmllbmRzOyBidXQgaWYgaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgZHJhdyB0aGVtIHRvbyBzb29uIG91dCBvZiB0aGVpciB3aW50ZXIgcXVhcnRlcnMsIGhlIG1pZ2h0IGJlIGRpc3RyZXNzZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgd2FudCBvZiBwcm92aXNpb25zLCBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgZGlmZmljdWx0eSBvZiBjb252ZXlhbmNlLiBJdCBzZWVtZWQKICAgICAgICAgICAgICAgICAgICBiZXR0ZXIsIGhvd2V2ZXIsIHRvIGVuZHVyZSBldmVyeSBoYXJkc2hpcCB0aGFuIHRvIGFsaWVuYXRlIHRoZSBhZmZlY3Rpb25zIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIGhpcyBhbGxpZXMsIGJ5IHN1Ym1pdHRpbmcgdG8gc3VjaCBhbiBpbnN1bHQuIEhhdmluZywgdGhlcmVmb3JlLCBpbXByZXNzZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IHRoZSBuZWNlc3NpdHkgb2Ygc3VwcGx5aW5nIGhpbSB3aXRoIHByb3Zpc2lvbnMsIGhlIHNlbmRzCiAgICAgICAgICAgICAgICAgICAgZm9yd2FyZCBtZXNzZW5nZXJzIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJvaWk8L25hbWU+IHRvIGluZm9ybSB0aGVtIG9mIGhpcyBhcnJpdmFsLCBhbmQKICAgICAgICAgICAgICAgICAgICBlbmNvdXJhZ2UgdGhlbSB0byByZW1haW4gZmlybSBpbiB0aGVpciBhbGxlZ2lhbmNlLCBhbmQgcmVzaXN0IHRoZSBhdHRhY2sgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXkgd2l0aCBncmVhdCByZXNvbHV0aW9uLiBIYXZpbmcgbGVmdCB0d28gbGVnaW9ucyBhbmQgdGhlIGx1Z2dhZ2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZW50aXJlIGFybXkgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwbGFjZSI+QWdlbmRpY3VtPC9uYW1lPiwgaGUgbWFyY2hlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Cb2lpPC9uYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['7.11'] = ""
translation['7.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4sIHdoZW4gaGUgYXNjZXJ0YWluZWQgdGhlIGFycml2YWwgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBkZXNpc3RlZCBmcm9tIHRoZSBzaWVnZSBbb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HZXJnb3ZpYV08L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICBtYXJjaGVkIHRvIG1lZXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LiBUaGUgbGF0dGVyIGhhZCBjb21tZW5jZWQgdG8KICAgICAgICAgICAgICAgICAgICBiZXNpZWdlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDA0MiIgcmVnPSIgICtJc2FjY2VhIFsyOC4zMTYsNDUuMjgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgVHVsY2VhLCBSb21hbmlhLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+Tm92aW9kdW51bSA8L25hbWU+OyBhbmQgd2hlbiBlbWJhc3NhZG9ycyBjYW1lIGZyb20gdGhpcyB0b3duIHRvIGJlZyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgd291bGQgcGFyZG9uIHRoZW0gYW5kIHNwYXJlIHRoZWlyIGxpdmVzLCBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0IGV4ZWN1dGUgdGhlIHJlc3QKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgZGVzaWducyB3aXRoIHRoZSByYXBpZGl0eSBieSB3aGljaCBoZSBoYWQgYWNjb21wbGlzaGVkIG1vc3Qgb2YgdGhlbSwgaGUKICAgICAgICAgICAgICAgICAgICBvcmRlcnMgdGhlaXIgYXJtcyB0byBiZSBjb2xsZWN0ZWQsIHRoZWlyIGhvcnNlcyB0byBiZSBicm91Z2h0IGZvcnRoLCBhbmQKICAgICAgICAgICAgICAgICAgICBob3N0YWdlcyB0byBiZSBnaXZlbi4gQSBwYXJ0IG9mIHRoZSBob3N0YWdlcyBiZWluZyBub3cgZGVsaXZlcmVkIHVwLCB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3Qgb2YgdGhlIHRlcm1zIHdlcmUgYmVpbmcgcGVyZm9ybWVkLCBhIGZldyBjZW50dXJpb25zIGFuZCBzb2xkaWVycyBiZWluZyBzZW50CiAgICAgICAgICAgICAgICAgICAgaW50byB0aGUgdG93biB0byBjb2xsZWN0IHRoZSBhcm1zIGFuZCBob3JzZXMsIHRoZSBlbmVteSdzIGNhdmFscnkgd2hpY2ggaGFkCiAgICAgICAgICAgICAgICAgICAgb3V0c3RyaXBwZWQgdGhlIG1haW4gYm9keSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+J3MgYXJteSwgd2FzIHNlZW4gYXQgYQogICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlOyBhcyBzb29uIGFzIHRoZSB0b3duc21lbiBiZWhlbGQgdGhlbSwgYW5kIGVudGVydGFpbmVkIGhvcGVzIG9mCiAgICAgICAgICAgICAgICAgICAgYXNzaXN0YW5jZSwgcmFpc2luZyBhIHNob3V0LCB0aGV5IGJlZ2FuIHRvIHRha2UgdXAgYXJtcywgc2h1dCB0aGUgZ2F0ZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIGxpbmUgdGhlIHdhbGxzLiBXaGVuIHRoZSBjZW50dXJpb25zIGluIHRoZSB0b3duIHVuZGVyc3Rvb2QgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBzaWduYWwtbWFraW5nIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHRoYXQgdGhleSB3ZXJlIGZvcm1pbmcKICAgICAgICAgICAgICAgICAgICBzb21lIG5ldyBkZXNpZ24sIHRoZXkgZHJldyB0aGVpciBzd29yZHMgYW5kIHNlaXplZCB0aGUgZ2F0ZXMsIGFuZCByZWNvdmVyZWQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbWVuIHNhZmUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+LCB3aGVuIGhlIGFzY2VydGFpbmVkIHRoZSBhcnJpdmFsIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgZGVzaXN0ZWQgZnJvbSB0aGUgc2llZ2UgW29mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2VyZ292aWFdPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgbWFyY2hlZCB0byBtZWV0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPi4gVGhlIGxhdHRlciBoYWQgY29tbWVuY2VkIHRvCiAgICAgICAgICAgICAgICAgICAgYmVzaWVnZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQwNDIiIHJlZz0iICArSXNhY2NlYSBbMjguMzE2LDQ1LjI4M10gKGluaGFiaXRlZCBwbGFjZSksIFR1bGNlYSwgUm9tYW5pYSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPk5vdmlvZHVudW0gPC9uYW1lPjsgYW5kIHdoZW4gZW1iYXNzYWRvcnMgY2FtZSBmcm9tIHRoaXMgdG93biB0byBiZWcgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHBhcmRvbiB0aGVtIGFuZCBzcGFyZSB0aGVpciBsaXZlcywgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBleGVjdXRlIHRoZSByZXN0CiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGRlc2lnbnMgd2l0aCB0aGUgcmFwaWRpdHkgYnkgd2hpY2ggaGUgaGFkIGFjY29tcGxpc2hlZCBtb3N0IG9mIHRoZW0sIGhlCiAgICAgICAgICAgICAgICAgICAgb3JkZXJzIHRoZWlyIGFybXMgdG8gYmUgY29sbGVjdGVkLCB0aGVpciBob3JzZXMgdG8gYmUgYnJvdWdodCBmb3J0aCwgYW5kCiAgICAgICAgICAgICAgICAgICAgaG9zdGFnZXMgdG8gYmUgZ2l2ZW4uIEEgcGFydCBvZiB0aGUgaG9zdGFnZXMgYmVpbmcgbm93IGRlbGl2ZXJlZCB1cCwgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICByZXN0IG9mIHRoZSB0ZXJtcyB3ZXJlIGJlaW5nIHBlcmZvcm1lZCwgYSBmZXcgY2VudHVyaW9ucyBhbmQgc29sZGllcnMgYmVpbmcgc2VudAogICAgICAgICAgICAgICAgICAgIGludG8gdGhlIHRvd24gdG8gY29sbGVjdCB0aGUgYXJtcyBhbmQgaG9yc2VzLCB0aGUgZW5lbXkncyBjYXZhbHJ5IHdoaWNoIGhhZAogICAgICAgICAgICAgICAgICAgIG91dHN0cmlwcGVkIHRoZSBtYWluIGJvZHkgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPidzIGFybXksIHdhcyBzZWVuIGF0IGEKICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTsgYXMgc29vbiBhcyB0aGUgdG93bnNtZW4gYmVoZWxkIHRoZW0sIGFuZCBlbnRlcnRhaW5lZCBob3BlcyBvZgogICAgICAgICAgICAgICAgICAgIGFzc2lzdGFuY2UsIHJhaXNpbmcgYSBzaG91dCwgdGhleSBiZWdhbiB0byB0YWtlIHVwIGFybXMsIHNodXQgdGhlIGdhdGVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBsaW5lIHRoZSB3YWxscy4gV2hlbiB0aGUgY2VudHVyaW9ucyBpbiB0aGUgdG93biB1bmRlcnN0b29kIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgc2lnbmFsLW1ha2luZyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB0aGF0IHRoZXkgd2VyZSBmb3JtaW5nCiAgICAgICAgICAgICAgICAgICAgc29tZSBuZXcgZGVzaWduLCB0aGV5IGRyZXcgdGhlaXIgc3dvcmRzIGFuZCBzZWl6ZWQgdGhlIGdhdGVzLCBhbmQgcmVjb3ZlcmVkIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZWlyIG1lbiBzYWZlLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBvcmRlcnMgdGhlIGhvcnNlIHRvIGJlIGRyYXduIG91dCBvZiB0aGUgY2FtcCwgYW5kCiAgICAgICAgICAgICAgICAgICAgY29tbWVuY2VzIGEgY2F2YWxyeSBhY3Rpb24uIEhpcyBtZW4gYmVpbmcgbm93IGRpc3RyZXNzZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBzZW5kcyB0byB0aGVpciBhaWQgYWJvdXQgZm91ciBodW5kcmVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW48L25hbWU+IGhvcnNlLCB3aGljaCBoZSBoYWQgZGV0ZXJtaW5lZCwgYXQgdGhlIGJlZ2lubmluZywgdG8ga2VlcAogICAgICAgICAgICAgICAgICAgIHdpdGggaGltc2VsZi4gVGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2F1bHM8L25hbWU+IGNvdWxkIG5vdCB3aXRoc3RhbmQgdGhlaXIgYXR0YWNrLCBidXQgd2VyZQogICAgICAgICAgICAgICAgICAgIHB1dCB0byBmbGlnaHQsIGFuZCByZXRyZWF0ZWQgdG8gdGhlaXIgbWFpbiBib2R5LCBhZnRlciBsb3NpbmcgYSBncmVhdCBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICBtZW4uIFdoZW4gdGhleSB3ZXJlIHJvdXRlZCwgdGhlIHRvd25zbWVuLCBhZ2FpbiBpbnRpbWlkYXRlZCwgYXJyZXN0ZWQgdGhvc2UKICAgICAgICAgICAgICAgICAgICBwZXJzb25zIGJ5IHdob3NlIGV4ZXJ0aW9ucyB0aGV5IHRob3VnaHQgdGhhdCB0aGUgbW9iIGhhZCBiZWVuIHJvdXNlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCB0aGVtIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYW5kIHN1cnJlbmRlcmVkIHRoZW1zZWx2ZXMgdG8KICAgICAgICAgICAgICAgICAgICBoaW0uIFdoZW4gdGhlc2UgYWZmYWlycyB3ZXJlIGFjY29tcGxpc2hlZCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgbWFyY2hlZCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NDE1IiByZWc9IiAgK0JvdXJnZXMgWzIuMzgzLDQ3LjgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgQ2hlciwgQ2VudHJlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BdmFyaWN1bSA8L25hbWU+LCB3aGljaCB3YXMgdGhlIGxhcmdlc3QgYW5kIGJlc3QgZm9ydGlmaWVkIHRvd24gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiwgYW5kIHNpdHVhdGVkIGluIGEgbW9zdCBmZXJ0aWxlIHRyYWN0CiAgICAgICAgICAgICAgICAgICAgb2YgY291bnRyeTsgYmVjYXVzZSBoZSBjb25maWRlbnRseSBleHBlY3RlZCB0aGF0IG9uIHRha2luZyB0aGF0IHRvd24sIGhlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgcmVkdWNlIGJlbmVhdGggaGlzIGRvbWluaW9uIHRoZSBzdGF0ZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9yZGVycyB0aGUgaG9yc2UgdG8gYmUgZHJhd24gb3V0IG9mIHRoZSBjYW1wLCBhbmQKICAgICAgICAgICAgICAgICAgICBjb21tZW5jZXMgYSBjYXZhbHJ5IGFjdGlvbi4gSGlzIG1lbiBiZWluZyBub3cgZGlzdHJlc3NlZCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHNlbmRzIHRvIHRoZWlyIGFpZCBhYm91dCBmb3VyIGh1bmRyZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbjwvbmFtZT4gaG9yc2UsIHdoaWNoIGhlIGhhZCBkZXRlcm1pbmVkLCBhdCB0aGUgYmVnaW5uaW5nLCB0byBrZWVwCiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaW1zZWxmLiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYXVsczwvbmFtZT4gY291bGQgbm90IHdpdGhzdGFuZCB0aGVpciBhdHRhY2ssIGJ1dCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcHV0IHRvIGZsaWdodCwgYW5kIHJldHJlYXRlZCB0byB0aGVpciBtYWluIGJvZHksIGFmdGVyIGxvc2luZyBhIGdyZWF0IG51bWJlciBvZgogICAgICAgICAgICAgICAgICAgIG1lbi4gV2hlbiB0aGV5IHdlcmUgcm91dGVkLCB0aGUgdG93bnNtZW4sIGFnYWluIGludGltaWRhdGVkLCBhcnJlc3RlZCB0aG9zZQogICAgICAgICAgICAgICAgICAgIHBlcnNvbnMgYnkgd2hvc2UgZXhlcnRpb25zIHRoZXkgdGhvdWdodCB0aGF0IHRoZSBtb2IgaGFkIGJlZW4gcm91c2VkLCBhbmQKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHRoZW0gdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBhbmQgc3VycmVuZGVyZWQgdGhlbXNlbHZlcyB0bwogICAgICAgICAgICAgICAgICAgIGhpbS4gV2hlbiB0aGVzZSBhZmZhaXJzIHdlcmUgYWNjb21wbGlzaGVkLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBtYXJjaGVkIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4sIHdoaWNoIHdhcyB0aGUgbGFyZ2VzdCBhbmQgYmVzdCBmb3J0aWZpZWQgdG93biBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+LCBhbmQgc2l0dWF0ZWQgaW4gYSBtb3N0IGZlcnRpbGUgdHJhY3QKICAgICAgICAgICAgICAgICAgICBvZiBjb3VudHJ5OyBiZWNhdXNlIGhlIGNvbmZpZGVudGx5IGV4cGVjdGVkIHRoYXQgb24gdGFraW5nIHRoYXQgdG93biwgaGUgd291bGQKICAgICAgICAgICAgICAgICAgICByZWR1Y2UgYmVuZWF0aCBoaXMgZG9taW5pb24gdGhlIHN0YXRlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpdHVyaWdlczwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['7.14'] = ""
translation['7.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgb3BpbmlvbiBoYXZpbmcgYmVlbiBhcHByb3ZlZCBvZiBieSB1bmFuaW1vdXMgY29uc2VudCwgbW9yZSB0aGFuIHR3ZW50eSB0b3ducwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpdHVyaWdlczwvbmFtZT4gYXJlIGJ1cm5lZCBpbiBvbmUgZGF5LiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbmZsYWdyYXRpb25zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGFyZSBiZWhlbGQgaW4gZXZlcnkgcXVhcnRlcjsgYW5kIGFsdGhvdWdoIGFsbCBib3JlIHRoaXMgd2l0aCBncmVhdCByZWdyZXQsIHlldAogICAgICAgICAgICAgICAgICAgIHRoZXkgbGFpZCBiZWZvcmUgdGhlbXNlbHZlcyB0aGlzIGNvbnNvbGF0aW9uLCB0aGF0LCBhcyB0aGUgdmljdG9yeSB3YXMgY2VydGFpbiwKICAgICAgICAgICAgICAgICAgICB0aGV5IGNvdWxkIHF1aWNrbHkgcmVjb3ZlciB0aGVpciBsb3NzZXMuIFRoZXJlIGlzIGEgZGViYXRlIGNvbmNlcm5pbmcgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NDE1IiByZWc9IiAgK0JvdXJnZXMgWzIuMzgzLDQ3LjgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgQ2hlciwgQ2VudHJlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BdmFyaWN1bSA8L25hbWU+IGluIHRoZSBnZW5lcmFsIGNvdW5jaWwsIHdoZXRoZXIgdGhleSBzaG91bGQgZGVjaWRlLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaXQgc2hvdWxkIGJlIGJ1cm5lZCBvciBkZWZlbmRlZC4gVGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiB0aHJldyB0aGVtc2VsdmVzIGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGZlZXQgb2YgYWxsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBhbmQgZW50cmVhdCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBzaG91bGQgbm90IGJlIGNvbXBlbGxlZCB0byBzZXQgZmlyZSB3aXRoIHRoZWlyIG93biBoYW5kcyB0byB0aGUgZmFpcmVzdCBjaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgYWxtb3N0IHRoZSB3aG9sZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHdoaWNoIHdhcyBib3RoIGEKICAgICAgICAgICAgICAgICAgICBwcm90ZWN0aW9uIGFuZCBvcm5hbWVudCB0byB0aGUgc3RhdGU7IHRoZXkgc2F5IHRoYXQgInRoZXkgY291bGQgZWFzaWx5IGRlZmVuZAogICAgICAgICAgICAgICAgICAgIGl0LCBvd2luZyB0byB0aGUgbmF0dXJlIG9mIHRoZSBncm91bmQsIGZvciwgYmVpbmcgaW5jbG9zZWQgYWxtb3N0IG9uIGV2ZXJ5IHNpZGUKICAgICAgICAgICAgICAgICAgICBieSBhIHJpdmVyIGFuZCBhIG1hcnNoLCBpdCBoYWQgb25seSBvbmUgZW50cmFuY2UsIGFuZCB0aGF0IHZlcnkgbmFycm93LiIKICAgICAgICAgICAgICAgICAgICBQZXJtaXNzaW9uIGJlaW5nIGdyYW50ZWQgdG8gdGhlbSBhdCB0aGVpciBlYXJuZXN0IHJlcXVlc3QsCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gYXQgZmlyc3QgZGlzc3VhZGVzIHRoZW0gZnJvbSBpdCwgYnV0IGFmdGVyd2FyZAogICAgICAgICAgICAgICAgICAgIGNvbmNlZGVzIHRoZSBwb2ludCwgb3dpbmcgdG8gdGhlaXIgZW50cmVhdGllcyBhbmQgdGhlIGNvbXBhc3Npb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMuIEEgcHJvcGVyIGdhcnJpc29uIGlzIHNlbGVjdGVkIGZvciB0aGUgdG93bi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiBhcmUgYnVybmVkIGluIG9uZSBkYXkuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29uZmxhZ3JhdGlvbnM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgYXJlIGJlaGVsZCBpbiBldmVyeSBxdWFydGVyOyBhbmQgYWx0aG91Z2ggYWxsIGJvcmUgdGhpcyB3aXRoIGdyZWF0IHJlZ3JldCwgeWV0CiAgICAgICAgICAgICAgICAgICAgdGhleSBsYWlkIGJlZm9yZSB0aGVtc2VsdmVzIHRoaXMgY29uc29sYXRpb24sIHRoYXQsIGFzIHRoZSB2aWN0b3J5IHdhcyBjZXJ0YWluLAogICAgICAgICAgICAgICAgICAgIHRoZXkgY291bGQgcXVpY2tseSByZWNvdmVyIHRoZWlyIGxvc3Nlcy4gVGhlcmUgaXMgYSBkZWJhdGUgY29uY2VybmluZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4gaW4gdGhlIGdlbmVyYWwgY291bmNpbCwgd2hldGhlciB0aGV5IHNob3VsZCBkZWNpZGUsIHRoYXQKICAgICAgICAgICAgICAgICAgICBpdCBzaG91bGQgYmUgYnVybmVkIG9yIGRlZmVuZGVkLiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+IHRocmV3IHRoZW1zZWx2ZXMgYXQKICAgICAgICAgICAgICAgICAgICB0aGUgZmVldCBvZiBhbGwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sIGFuZCBlbnRyZWF0IHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBub3QgYmUgY29tcGVsbGVkIHRvIHNldCBmaXJlIHdpdGggdGhlaXIgb3duIGhhbmRzIHRvIHRoZSBmYWlyZXN0IGNpdHkgb2YKICAgICAgICAgICAgICAgICAgICBhbG1vc3QgdGhlIHdob2xlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgd2hpY2ggd2FzIGJvdGggYQogICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24gYW5kIG9ybmFtZW50IHRvIHRoZSBzdGF0ZTsgdGhleSBzYXkgdGhhdCAidGhleSBjb3VsZCBlYXNpbHkgZGVmZW5kCiAgICAgICAgICAgICAgICAgICAgaXQsIG93aW5nIHRvIHRoZSBuYXR1cmUgb2YgdGhlIGdyb3VuZCwgZm9yLCBiZWluZyBpbmNsb3NlZCBhbG1vc3Qgb24gZXZlcnkgc2lkZQogICAgICAgICAgICAgICAgICAgIGJ5IGEgcml2ZXIgYW5kIGEgbWFyc2gsIGl0IGhhZCBvbmx5IG9uZSBlbnRyYW5jZSwgYW5kIHRoYXQgdmVyeSBuYXJyb3cuIgogICAgICAgICAgICAgICAgICAgIFBlcm1pc3Npb24gYmVpbmcgZ3JhbnRlZCB0byB0aGVtIGF0IHRoZWlyIGVhcm5lc3QgcmVxdWVzdCwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiBhdCBmaXJzdCBkaXNzdWFkZXMgdGhlbSBmcm9tIGl0LCBidXQgYWZ0ZXJ3YXJkCiAgICAgICAgICAgICAgICAgICAgY29uY2VkZXMgdGhlIHBvaW50LCBvd2luZyB0byB0aGVpciBlbnRyZWF0aWVzIGFuZCB0aGUgY29tcGFzc2lvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycy4gQSBwcm9wZXIgZ2Fycmlzb24gaXMgc2VsZWN0ZWQgZm9yIHRoZSB0b3duLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gZm9sbG93cyBjbG9zZWx5IHVwb24gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgYnkgc2hvcnRlciBtYXJjaGVzLCBhbmQgc2VsZWN0cyBmb3IgaGlzIGNhbXAgYSBwbGFjZSBkZWZlbmRlZCBieSB3b29kcyBhbmQKICAgICAgICAgICAgICAgICAgICBtYXJzaGVzLCBhdCB0aGUgZGlzdGFuY2Ugb2YgZmlmdGVlbiBtaWxlcyBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzQxNSIgcmVnPSIgICtCb3VyZ2VzIFsyLjM4Myw0Ny44M10gKGluaGFiaXRlZCBwbGFjZSksIENoZXIsIENlbnRyZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QXZhcmljdW0gPC9uYW1lPi4gVGhlcmUgaGUgcmVjZWl2ZWQgaW50ZWxsaWdlbmNlIGJ5IHRydXN0eSBzY291dHMsIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgaG91ciBpbiB0aGUgZGF5LCBvZiB3aGF0IHdhcyBnb2luZyBvbiBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4sIGFuZCBvcmRlcmVkIHdoYXRldmVyIGhlIHdpc2hlZCB0byBiZSBkb25lOyBoZSBjbG9zZWx5CiAgICAgICAgICAgICAgICAgICAgd2F0Y2hlZCBhbGwgb3VyIGV4cGVkaXRpb25zIGZvciBjb3JuIGFuZCBmb3JhZ2UsIGFuZCB3aGVuZXZlciB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBjb21wZWxsZWQgdG8gZ28gdG8gYSBncmVhdGVyIGRpc3RhbmNlLCBoZSBhdHRhY2tlZCB0aGVtIHdoZW4gZGlzcGVyc2VkLCBhbmQKICAgICAgICAgICAgICAgICAgICBpbmZsaWN0ZWQgc2V2ZXJlIGxvc3MgdXBvbiB0aGVtOyBhbHRob3VnaCB0aGUgZXZpbCB3YXMgcmVtZWRpZWQgYnkgb3VyIG1lbiwgYXMKICAgICAgICAgICAgICAgICAgICBmYXIgYXMgcHJlY2F1dGlvbnMgY291bGQgYmUgdGFrZW4sIGJ5IGdvaW5nIGZvcnRoIGF0IGlycmVndWxhciB0aW1lcycgYW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW50IHdheXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+IGZvbGxvd3MgY2xvc2VseSB1cG9uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGJ5IHNob3J0ZXIgbWFyY2hlcywgYW5kIHNlbGVjdHMgZm9yIGhpcyBjYW1wIGEgcGxhY2UgZGVmZW5kZWQgYnkgd29vZHMgYW5kCiAgICAgICAgICAgICAgICAgICAgbWFyc2hlcywgYXQgdGhlIGRpc3RhbmNlIG9mIGZpZnRlZW4gbWlsZXMgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4uIFRoZXJlIGhlIHJlY2VpdmVkIGludGVsbGlnZW5jZSBieSB0cnVzdHkgc2NvdXRzLCBldmVyeQogICAgICAgICAgICAgICAgICAgIGhvdXIgaW4gdGhlIGRheSwgb2Ygd2hhdCB3YXMgZ29pbmcgb24gYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NDE1IiByZWc9IiAgK0JvdXJnZXMgWzIuMzgzLDQ3LjgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgQ2hlciwgQ2VudHJlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BdmFyaWN1bSA8L25hbWU+LCBhbmQgb3JkZXJlZCB3aGF0ZXZlciBoZSB3aXNoZWQgdG8gYmUgZG9uZTsgaGUgY2xvc2VseQogICAgICAgICAgICAgICAgICAgIHdhdGNoZWQgYWxsIG91ciBleHBlZGl0aW9ucyBmb3IgY29ybiBhbmQgZm9yYWdlLCBhbmQgd2hlbmV2ZXIgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgY29tcGVsbGVkIHRvIGdvIHRvIGEgZ3JlYXRlciBkaXN0YW5jZSwgaGUgYXR0YWNrZWQgdGhlbSB3aGVuIGRpc3BlcnNlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5mbGljdGVkIHNldmVyZSBsb3NzIHVwb24gdGhlbTsgYWx0aG91Z2ggdGhlIGV2aWwgd2FzIHJlbWVkaWVkIGJ5IG91ciBtZW4sIGFzCiAgICAgICAgICAgICAgICAgICAgZmFyIGFzIHByZWNhdXRpb25zIGNvdWxkIGJlIHRha2VuLCBieSBnb2luZyBmb3J0aCBhdCBpcnJlZ3VsYXIgdGltZXMnIGFuZCBieQogICAgICAgICAgICAgICAgICAgIGRpZmZlcmVudCB3YXlzLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBwaXRjaGluZyBoaXMgY2FtcCBhdCB0aGF0IHNpZGUgb2YgdGhlIHRvd24gd2hpY2gKICAgICAgICAgICAgICAgICAgICB3YXMgbm90IGRlZmVuZGVkIGJ5IHRoZSByaXZlciBhbmQgbWFyc2gsIGFuZCBoYWQgYSB2ZXJ5IG5hcnJvdyBhcHByb2FjaCwgYXMgd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIG1lbnRpb25lZCwgYmVnYW4gdG8gcmFpc2UgdGhlIHZpbmVhZSBhbmQgZXJlY3QgdHdvIHRvd2VyczogZm9yIHRoZSBuYXR1cmUKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcGxhY2UgcHJldmVudGVkIGhpbSBmcm9tIGRyYXdpbmcgYSBsaW5lIG9mIGNpcmN1bXZhbGxhdGlvbi4gSGUgbmV2ZXIKICAgICAgICAgICAgICAgICAgICBjZWFzZWQgdG8gaW1wb3J0dW5lIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJvaWk8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBmb3Igc3VwcGxpZXMgb2YKICAgICAgICAgICAgICAgICAgICBjb3JuOyBvZiB3aG9tIHRoZSBvbmUgW3RoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpXTwvbmFtZT4sIGJlY2F1c2UgdGhleSB3ZXJlIGFjdGluZyB3aXRoIG5vCiAgICAgICAgICAgICAgICAgICAgemVhbCwgZGlkIG5vdCBhaWQgaGltIG11Y2g7IHRoZSBvdGhlcnMgW3RoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJvaWldPC9uYW1lPiwgYXMgdGhlaXIKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMgd2VyZSBub3QgZ3JlYXQsIHF1aWNrbHkgY29uc3VtZWQgd2hhdCB0aGV5IGhhZC4gQWx0aG91Z2ggdGhlIGFybXkgd2FzCiAgICAgICAgICAgICAgICAgICAgZGlzdHJlc3NlZCBieSB0aGUgZ3JlYXRlc3Qgd2FudCBvZiBjb3JuLCB0aHJvdWdoIHRoZSBwb3ZlcnR5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJvaWk8L25hbWU+LCB0aGUgYXBhdGh5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYW5kIHRoZSBidXJuaW5nIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGhvdXNlcywgdG8gc3VjaCBhIGRlZ3JlZSwgdGhhdCBmb3Igc2V2ZXJhbCBkYXlzIHRoZSBzb2xkaWVycyB3ZXJlIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBjb3JuLCBhbmQgc2F0aXNmaWVkIHRoZWlyIGV4dHJlbWUgaHVuZ2VyIHdpdGggY2F0dGxlIGRyaXZlbiBmcm9tIHRoZSByZW1vdGUKICAgICAgICAgICAgICAgICAgICB2aWxsYWdlczsgeWV0IG5vIGxhbmd1YWdlIHdhcyBoZWFyZCBmcm9tIHRoZW0gdW53b3J0aHkgb2YgdGhlIG1hamVzdHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlIGFuZCB0aGVpciBmb3JtZXIgdmljdG9yaWVzLgogICAgICAgICAgICAgICAgICAgIE1vcmVvdmVyLCB3aGVuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhZGRyZXNzZWQgdGhlIGxlZ2lvbnMsIG9uZSBieQogICAgICAgICAgICAgICAgICAgIG9uZSwgd2hlbiBhdCB3b3JrLCBhbmQgc2FpZCB0aGF0IGhlIHdvdWxkIHJhaXNlIHRoZSBzaWVnZSwgaWYgdGhleSBmZWx0IHRoZQogICAgICAgICAgICAgICAgICAgIHNjYXJjaXR5IHRvbyBzZXZlcmVseSwgdGhleSB1bmFuaW1vdXNseSBiZWdnZWQgaGltICJub3QgdG8gZG8gc287IHRoYXQgdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICBzZXJ2ZWQgZm9yIHNldmVyYWwgeWVhcnMgdW5kZXIgaGlzIGNvbW1hbmQgaW4gc3VjaCBhIG1hbm5lciB0aGF0IHRoZXkgbmV2ZXIKICAgICAgICAgICAgICAgICAgICBzdWJtaXR0ZWQgdG8gaW5zdWx0LCBhbmQgbmV2ZXIgYWJhbmRvbmVkIGFuIGVudGVycHJpc2Ugd2l0aG91dCBhY2NvbXBsaXNoaW5nIGl0OwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBzaG91bGQgY29uc2lkZXIgaXQgYSBkaXNncmFjZSBpZiB0aGV5IGFiYW5kb25lZCB0aGUgc2llZ2UgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBjb21tZW5jaW5nIGl0OyB0aGF0IGl0IHdhcyBiZXR0ZXIgdG8gZW5kdXJlIGV2ZXJ5IGhhcmRzaGlwIHRoYW4gdG8gbm90IGF2ZW5nZQogICAgICAgICAgICAgICAgICAgIHRoZSBuYW1lcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBjaXRpemVucyB3aG8gcGVyaXNoZWQgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzM3IiByZWc9IiAgK09ybGVhbnMgWzEuOSw0Ny45XSAoaW5oYWJpdGVkIHBsYWNlKSwgTG9pcmV0LCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlbmFidW0gPC9uYW1lPiBieSB0aGUgcGVyZmlkeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPi4iCiAgICAgICAgICAgICAgICAgICAgVGhleSBpbnRydXN0ZWQgdGhlIHNhbWUgZGVjbGFyYXRpb25zIHRvIHRoZSBjZW50dXJpb25zIGFuZCBtaWxpdGFyeSB0cmlidW5lcywKICAgICAgICAgICAgICAgICAgICB0aGF0IHRocm91Z2ggdGhlbSB0aGV5IG1pZ2h0IGJlIGNvbW11bmljYXRlZCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gcGl0Y2hpbmcgaGlzIGNhbXAgYXQgdGhhdCBzaWRlIG9mIHRoZSB0b3duIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd2FzIG5vdCBkZWZlbmRlZCBieSB0aGUgcml2ZXIgYW5kIG1hcnNoLCBhbmQgaGFkIGEgdmVyeSBuYXJyb3cgYXBwcm9hY2gsIGFzIHdlCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBtZW50aW9uZWQsIGJlZ2FuIHRvIHJhaXNlIHRoZSB2aW5lYWUgYW5kIGVyZWN0IHR3byB0b3dlcnM6IGZvciB0aGUgbmF0dXJlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHBsYWNlIHByZXZlbnRlZCBoaW0gZnJvbSBkcmF3aW5nIGEgbGluZSBvZiBjaXJjdW12YWxsYXRpb24uIEhlIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgY2Vhc2VkIHRvIGltcG9ydHVuZSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Cb2lpPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gZm9yIHN1cHBsaWVzIG9mCiAgICAgICAgICAgICAgICAgICAgY29ybjsgb2Ygd2hvbSB0aGUgb25lIFt0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aV08L25hbWU+LCBiZWNhdXNlIHRoZXkgd2VyZSBhY3Rpbmcgd2l0aCBubwogICAgICAgICAgICAgICAgICAgIHplYWwsIGRpZCBub3QgYWlkIGhpbSBtdWNoOyB0aGUgb3RoZXJzIFt0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Cb2lpXTwvbmFtZT4sIGFzIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzIHdlcmUgbm90IGdyZWF0LCBxdWlja2x5IGNvbnN1bWVkIHdoYXQgdGhleSBoYWQuIEFsdGhvdWdoIHRoZSBhcm15IHdhcwogICAgICAgICAgICAgICAgICAgIGRpc3RyZXNzZWQgYnkgdGhlIGdyZWF0ZXN0IHdhbnQgb2YgY29ybiwgdGhyb3VnaCB0aGUgcG92ZXJ0eSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Cb2lpPC9uYW1lPiwgdGhlIGFwYXRoeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIGFuZCB0aGUgYnVybmluZyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBob3VzZXMsIHRvIHN1Y2ggYSBkZWdyZWUsIHRoYXQgZm9yIHNldmVyYWwgZGF5cyB0aGUgc29sZGllcnMgd2VyZSB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgY29ybiwgYW5kIHNhdGlzZmllZCB0aGVpciBleHRyZW1lIGh1bmdlciB3aXRoIGNhdHRsZSBkcml2ZW4gZnJvbSB0aGUgcmVtb3RlCiAgICAgICAgICAgICAgICAgICAgdmlsbGFnZXM7IHlldCBubyBsYW5ndWFnZSB3YXMgaGVhcmQgZnJvbSB0aGVtIHVud29ydGh5IG9mIHRoZSBtYWplc3R5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSBhbmQgdGhlaXIgZm9ybWVyIHZpY3Rvcmllcy4KICAgICAgICAgICAgICAgICAgICBNb3Jlb3Zlciwgd2hlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYWRkcmVzc2VkIHRoZSBsZWdpb25zLCBvbmUgYnkKICAgICAgICAgICAgICAgICAgICBvbmUsIHdoZW4gYXQgd29yaywgYW5kIHNhaWQgdGhhdCBoZSB3b3VsZCByYWlzZSB0aGUgc2llZ2UsIGlmIHRoZXkgZmVsdCB0aGUKICAgICAgICAgICAgICAgICAgICBzY2FyY2l0eSB0b28gc2V2ZXJlbHksIHRoZXkgdW5hbmltb3VzbHkgYmVnZ2VkIGhpbSAibm90IHRvIGRvIHNvOyB0aGF0IHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgc2VydmVkIGZvciBzZXZlcmFsIHllYXJzIHVuZGVyIGhpcyBjb21tYW5kIGluIHN1Y2ggYSBtYW5uZXIgdGhhdCB0aGV5IG5ldmVyCiAgICAgICAgICAgICAgICAgICAgc3VibWl0dGVkIHRvIGluc3VsdCwgYW5kIG5ldmVyIGFiYW5kb25lZCBhbiBlbnRlcnByaXNlIHdpdGhvdXQgYWNjb21wbGlzaGluZyBpdDsKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgc2hvdWxkIGNvbnNpZGVyIGl0IGEgZGlzZ3JhY2UgaWYgdGhleSBhYmFuZG9uZWQgdGhlIHNpZWdlIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgY29tbWVuY2luZyBpdDsgdGhhdCBpdCB3YXMgYmV0dGVyIHRvIGVuZHVyZSBldmVyeSBoYXJkc2hpcCB0aGFuIHRvIG5vdCBhdmVuZ2UKICAgICAgICAgICAgICAgICAgICB0aGUgbmFtZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gY2l0aXplbnMgd2hvIHBlcmlzaGVkIGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODMzNyIgcmVnPSIgICtPcmxlYW5zIFsxLjksNDcuOV0gKGluaGFiaXRlZCBwbGFjZSksIExvaXJldCwgQ2VudHJlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZW5hYnVtIDwvbmFtZT4gYnkgdGhlIHBlcmZpZHkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4uIgogICAgICAgICAgICAgICAgICAgIFRoZXkgaW50cnVzdGVkIHRoZSBzYW1lIGRlY2xhcmF0aW9ucyB0byB0aGUgY2VudHVyaW9ucyBhbmQgbWlsaXRhcnkgdHJpYnVuZXMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aHJvdWdoIHRoZW0gdGhleSBtaWdodCBiZSBjb21tdW5pY2F0ZWQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gdGhlIHRvd2VycyBoYWQgbm93IGFwcHJvYWNoZWQgdGhlIHdhbGxzLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBhc2NlcnRhaW5lZCBmcm9tIHRoZSBjYXB0aXZlcyB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gYWZ0ZXIgZGVzdHJveWluZwogICAgICAgICAgICAgICAgICAgIHRoZSBmb3JhZ2UsIGhhZCBwaXRjaGVkIGhpcyBjYW1wIG5lYXJlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4sIGFuZCB0aGF0IGhlIGhpbXNlbGYgd2l0aCB0aGUgY2F2YWxyeSBhbmQgbGlnaHQtYXJtZWQKICAgICAgICAgICAgICAgICAgICBpbmZhbnRyeSwgd2hvIGdlbmVyYWxseSBmb3VnaHQgYW1vbmcgdGhlIGhvcnNlLCBoYWQgZ29uZSB0byBsYXkgYW4gYW1idXNjYWRlIGluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBxdWFydGVyLCB0byB3aGljaCBoZSB0aG91Z2h0IHRoYXQgb3VyIHRyb29wcyB3b3VsZCBjb21lIHRoZSBuZXh0IGRheSB0bwogICAgICAgICAgICAgICAgICAgIGZvcmFnZS4gT24gbGVhcm5pbmcgdGhlc2UgZmFjdHMsIGhlIHNldCBvdXQgZnJvbSB0aGUgY2FtcCBzZWNyZXRseSBhdCBtaWRuaWdodCwKICAgICAgICAgICAgICAgICAgICBhbmQgcmVhY2hlZCB0aGUgY2FtcCBvZiB0aGUgZW5lbXkgZWFybHkgaW4gdGhlIG1vcm5pbmcuIFRoZXkgaGF2aW5nIHF1aWNrbHkKICAgICAgICAgICAgICAgICAgICBsZWFybmVkIHRoZSBhcnJpdmFsIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBieSBzY291dHMsIGhpZCB0aGVpciBjYXJzCiAgICAgICAgICAgICAgICAgICAgYW5kIGJhZ2dhZ2UgaW4gdGhlIHRoaWNrZXN0IHBhcnRzIG9mIHRoZSB3b29kcywgYW5kIGRyZXcgdXAgYWxsIHRoZWlyIGZvcmNlcyBpbgogICAgICAgICAgICAgICAgICAgIGEgbG9mdHkgYW5kIG9wZW4gc3BhY2U6IHdoaWNoIGNpcmN1bXN0YW5jZSBiZWluZyBhbm5vdW5jZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBpbW1lZGlhdGVseSBvcmRlcmVkIHRoZSBiYWdnYWdlIHRvIGJlIHBpbGVkLCBhbmQgdGhlIGFybXMgdG8KICAgICAgICAgICAgICAgICAgICBiZSBnb3QgcmVhZHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBhc2NlcnRhaW5lZCBmcm9tIHRoZSBjYXB0aXZlcyB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gYWZ0ZXIgZGVzdHJveWluZwogICAgICAgICAgICAgICAgICAgIHRoZSBmb3JhZ2UsIGhhZCBwaXRjaGVkIGhpcyBjYW1wIG5lYXJlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4sIGFuZCB0aGF0IGhlIGhpbXNlbGYgd2l0aCB0aGUgY2F2YWxyeSBhbmQgbGlnaHQtYXJtZWQKICAgICAgICAgICAgICAgICAgICBpbmZhbnRyeSwgd2hvIGdlbmVyYWxseSBmb3VnaHQgYW1vbmcgdGhlIGhvcnNlLCBoYWQgZ29uZSB0byBsYXkgYW4gYW1idXNjYWRlIGluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBxdWFydGVyLCB0byB3aGljaCBoZSB0aG91Z2h0IHRoYXQgb3VyIHRyb29wcyB3b3VsZCBjb21lIHRoZSBuZXh0IGRheSB0bwogICAgICAgICAgICAgICAgICAgIGZvcmFnZS4gT24gbGVhcm5pbmcgdGhlc2UgZmFjdHMsIGhlIHNldCBvdXQgZnJvbSB0aGUgY2FtcCBzZWNyZXRseSBhdCBtaWRuaWdodCwKICAgICAgICAgICAgICAgICAgICBhbmQgcmVhY2hlZCB0aGUgY2FtcCBvZiB0aGUgZW5lbXkgZWFybHkgaW4gdGhlIG1vcm5pbmcuIFRoZXkgaGF2aW5nIHF1aWNrbHkKICAgICAgICAgICAgICAgICAgICBsZWFybmVkIHRoZSBhcnJpdmFsIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBieSBzY291dHMsIGhpZCB0aGVpciBjYXJzCiAgICAgICAgICAgICAgICAgICAgYW5kIGJhZ2dhZ2UgaW4gdGhlIHRoaWNrZXN0IHBhcnRzIG9mIHRoZSB3b29kcywgYW5kIGRyZXcgdXAgYWxsIHRoZWlyIGZvcmNlcyBpbgogICAgICAgICAgICAgICAgICAgIGEgbG9mdHkgYW5kIG9wZW4gc3BhY2U6IHdoaWNoIGNpcmN1bXN0YW5jZSBiZWluZyBhbm5vdW5jZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBpbW1lZGlhdGVseSBvcmRlcmVkIHRoZSBiYWdnYWdlIHRvIGJlIHBpbGVkLCBhbmQgdGhlIGFybXMgdG8KICAgICAgICAgICAgICAgICAgICBiZSBnb3QgcmVhZHkuIDwvdHJhbnNsYXRpb24+"
translation['7.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIHdhcyBhIGhpbGwgb2YgYSBnZW50bGUgYXNjZW50IGZyb20gdGhlIGJvdHRvbTsgYSBkYW5nZXJvdXMgYW5kIGltcGFzc2FibGUKICAgICAgICAgICAgICAgICAgICBtYXJzaCwgbm90IG1vcmUgdGhhbiBmaWZ0eSBmZWV0IGJyb2FkLCBiZWdpcnQgaXQgb24gYWxtb3N0IGV2ZXJ5IHNpZGUuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiwgaGF2aW5nIGJyb2tlbiBkb3duIHRoZSBicmlkZ2VzLCBwb3N0ZWQgdGhlbXNlbHZlcyBvbgogICAgICAgICAgICAgICAgICAgIHRoaXMgaGlsbCwgaW4gY29uZmlkZW5jZSBvZiB0aGVpciBwb3NpdGlvbiwgYW5kIGJlaW5nIGRyYXduIHVwIGluIHRyaWJlcwogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byB0aGVpciByZXNwZWN0aXZlIHN0YXRlcywgaGVsZCBhbGwgdGhlIGZvcmRzIGFuZCBwYXNzYWdlcyBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgbWFyc2ggd2l0aCB0cnVzdHkgZ3VhcmRzLCB0aHVzIGRldGVybWluZWQgdGhhdCBpZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gc2hvdWxkIGF0dGVtcHQgdG8gZm9yY2UgdGhlIG1hcnNoLCB0aGV5IHdvdWxkIG92ZXJwb3dlciB0aGVtCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgaGlnaGVyIGdyb3VuZCB3aGlsZSBzdGlja2luZyBpbiBpdCwgc28gdGhhdCB3aG9ldmVyIHNhdyB0aGUgbmVhcm5lc3Mgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcG9zaXRpb24sIHdvdWxkIGltYWdpbmUgdGhhdCB0aGUgdHdvIGFybWllcyB3ZXJlIHByZXBhcmVkIHRvIGZpZ2h0IG9uIGFsbW9zdAogICAgICAgICAgICAgICAgICAgIGVxdWFsIHRlcm1zOyBidXQgd2hvZXZlciBzaG91bGQgdmlldyBhY2N1cmF0ZWx5IHRoZSBkaXNhZHZhbnRhZ2Ugb2YgcG9zaXRpb24sCiAgICAgICAgICAgICAgICAgICAgd291bGQgZGlzY292ZXIgdGhhdCB0aGV5IHdlcmUgc2hvd2luZyBvZmYgYW4gZW1wdHkgYWZmZWN0YXRpb24gb2YgY291cmFnZS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGNsZWFybHkgcG9pbnRzIG91dCB0byBoaXMgc29sZGllcnMsIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgaW5kaWduYW50IHRoYXQgdGhlIGVuZW15IGNvdWxkIGJlYXIgdGhlIHNpZ2h0IG9mIHRoZW0gYXQgdGhlIGRpc3RhbmNlIG9mIHNvCiAgICAgICAgICAgICAgICAgICAgc2hvcnQgYSBzcGFjZSwgYW5kIHdlcmUgZWFybmVzdGx5IGRlbWFuZGluZyB0aGUgc2lnbmFsIGZvciBhY3Rpb24sICJ3aXRoIGhvdwogICAgICAgICAgICAgICAgICAgIGdyZWF0IGxvc3MgYW5kIHRoZSBkZWF0aCBvZiBob3cgbWFueSBnYWxsYW50IG1lbiB0aGUgdmljdG9yeSB3b3VsZCBuZWNlc3NhcmlseQogICAgICAgICAgICAgICAgICAgIGJlIHB1cmNoYXNlZDogYW5kIHdoZW4gaGUgc2F3IHRoZW0gc28gZGV0ZXJtaW5lZCB0byBkZWNsaW5lIG5vIGRhbmdlciBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgcmVub3duLCB0aGF0IGhlIG91Z2h0IHRvIGJlIGNvbnNpZGVyZWQgZ3VpbHR5IG9mIHRoZSB1dG1vc3QgaW5qdXN0aWNlIGlmIGhlIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBob2xkIHRoZWlyIGxpZmUgZGVhcmVyIHRoYW4gaGlzIHBlcnNvbmFsIHNhZmV0eS4iIEhhdmluZyB0aHVzIGNvbnNvbGVkIGhpcwogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzLCBoZSBsZWFkcyB0aGVtIGJhY2sgb24gdGhlIHNhbWUgZGF5IHRvIHRoZSBjYW1wLCBhbmQgZGV0ZXJtaW5lZCB0bwogICAgICAgICAgICAgICAgICAgIHByZXBhcmUgdGhlIG90aGVyIHRoaW5ncyB3aGljaCB3ZXJlIG5lY2Vzc2FyeSBmb3IgdGhlIHNpZWdlIG9mIHRoZSB0b3duLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYXVsczwvbmFtZT4sIGhhdmluZyBicm9rZW4gZG93biB0aGUgYnJpZGdlcywgcG9zdGVkIHRoZW1zZWx2ZXMgb24KICAgICAgICAgICAgICAgICAgICB0aGlzIGhpbGwsIGluIGNvbmZpZGVuY2Ugb2YgdGhlaXIgcG9zaXRpb24sIGFuZCBiZWluZyBkcmF3biB1cCBpbiB0cmliZXMKICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gdGhlaXIgcmVzcGVjdGl2ZSBzdGF0ZXMsIGhlbGQgYWxsIHRoZSBmb3JkcyBhbmQgcGFzc2FnZXMgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIG1hcnNoIHdpdGggdHJ1c3R5IGd1YXJkcywgdGh1cyBkZXRlcm1pbmVkIHRoYXQgaWYgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHNob3VsZCBhdHRlbXB0IHRvIGZvcmNlIHRoZSBtYXJzaCwgdGhleSB3b3VsZCBvdmVycG93ZXIgdGhlbQogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGhpZ2hlciBncm91bmQgd2hpbGUgc3RpY2tpbmcgaW4gaXQsIHNvIHRoYXQgd2hvZXZlciBzYXcgdGhlIG5lYXJuZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHBvc2l0aW9uLCB3b3VsZCBpbWFnaW5lIHRoYXQgdGhlIHR3byBhcm1pZXMgd2VyZSBwcmVwYXJlZCB0byBmaWdodCBvbiBhbG1vc3QKICAgICAgICAgICAgICAgICAgICBlcXVhbCB0ZXJtczsgYnV0IHdob2V2ZXIgc2hvdWxkIHZpZXcgYWNjdXJhdGVseSB0aGUgZGlzYWR2YW50YWdlIG9mIHBvc2l0aW9uLAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGRpc2NvdmVyIHRoYXQgdGhleSB3ZXJlIHNob3dpbmcgb2ZmIGFuIGVtcHR5IGFmZmVjdGF0aW9uIG9mIGNvdXJhZ2UuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBjbGVhcmx5IHBvaW50cyBvdXQgdG8gaGlzIHNvbGRpZXJzLCB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIGluZGlnbmFudCB0aGF0IHRoZSBlbmVteSBjb3VsZCBiZWFyIHRoZSBzaWdodCBvZiB0aGVtIGF0IHRoZSBkaXN0YW5jZSBvZiBzbwogICAgICAgICAgICAgICAgICAgIHNob3J0IGEgc3BhY2UsIGFuZCB3ZXJlIGVhcm5lc3RseSBkZW1hbmRpbmcgdGhlIHNpZ25hbCBmb3IgYWN0aW9uLCAid2l0aCBob3cKICAgICAgICAgICAgICAgICAgICBncmVhdCBsb3NzIGFuZCB0aGUgZGVhdGggb2YgaG93IG1hbnkgZ2FsbGFudCBtZW4gdGhlIHZpY3Rvcnkgd291bGQgbmVjZXNzYXJpbHkKICAgICAgICAgICAgICAgICAgICBiZSBwdXJjaGFzZWQ6IGFuZCB3aGVuIGhlIHNhdyB0aGVtIHNvIGRldGVybWluZWQgdG8gZGVjbGluZSBubyBkYW5nZXIgZm9yIGhpcwogICAgICAgICAgICAgICAgICAgIHJlbm93biwgdGhhdCBoZSBvdWdodCB0byBiZSBjb25zaWRlcmVkIGd1aWx0eSBvZiB0aGUgdXRtb3N0IGluanVzdGljZSBpZiBoZSBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgaG9sZCB0aGVpciBsaWZlIGRlYXJlciB0aGFuIGhpcyBwZXJzb25hbCBzYWZldHkuIiBIYXZpbmcgdGh1cyBjb25zb2xlZCBoaXMKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycywgaGUgbGVhZHMgdGhlbSBiYWNrIG9uIHRoZSBzYW1lIGRheSB0byB0aGUgY2FtcCwgYW5kIGRldGVybWluZWQgdG8KICAgICAgICAgICAgICAgICAgICBwcmVwYXJlIHRoZSBvdGhlciB0aGluZ3Mgd2hpY2ggd2VyZSBuZWNlc3NhcnkgZm9yIHRoZSBzaWVnZSBvZiB0aGUgdG93bi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.20'] = ""
translation['7.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSB3aG9sZSBtdWx0aXR1ZGUgcmFpc2UgYSBzaG91dCBhbmQgY2xhc2ggdGhlaXIgYXJtcywgYWNjb3JkaW5nIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY3VzdG9tLCBhcyB0aGV5IHVzdWFsbHkgZG8gaW4gdGhlIGNhc2Ugb2YgaGltIG9mIHdob3NlIHNwZWVjaCB0aGV5IGFwcHJvdmU7CiAgICAgICAgICAgICAgICAgICAgW3RoZXkgZXhjbGFpbV0gdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+IHdhcyBhIGNvbnN1bW1hdGUgZ2VuZXJhbCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IGhhZCBubyBkb3VidCBvZiBoaXMgaG9ub3I7IHRoYXQgdGhlIHdhciBjb3VsZCBub3QgYmUgY29uZHVjdGVkIHdpdGgKICAgICAgICAgICAgICAgICAgICBncmVhdGVyIHBydWRlbmNlLiBUaGV5IGRldGVybWluZSB0aGF0IHRlbiB0aG91c2FuZCBtZW4gc2hvdWxkIGJlIHBpY2tlZCBvdXQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZW50aXJlIGFybXkgYW5kIHNlbnQgaW50byB0aGUgdG93biwgYW5kIGRlY2lkZSB0aGF0IHRoZSBnZW5lcmFsIHNhZmV0eQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBub3QgYmUgaW50cnVzdGVkIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpdHVyaWdlczwvbmFtZT4gYWxvbmUsIGJlY2F1c2UgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYXdhcmUgdGhhdCB0aGUgZ2xvcnkgb2YgdGhlIHZpY3RvcnkgbXVzdCByZXN0IHdpdGggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBpZiB0aGV5IG1hZGUgZ29vZCB0aGUgZGVmZW5zZSBvZiB0aGUgdG93bi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gd2FzIGEgY29uc3VtbWF0ZSBnZW5lcmFsLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgaGFkIG5vIGRvdWJ0IG9mIGhpcyBob25vcjsgdGhhdCB0aGUgd2FyIGNvdWxkIG5vdCBiZSBjb25kdWN0ZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIGdyZWF0ZXIgcHJ1ZGVuY2UuIFRoZXkgZGV0ZXJtaW5lIHRoYXQgdGVuIHRob3VzYW5kIG1lbiBzaG91bGQgYmUgcGlja2VkIG91dCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBlbnRpcmUgYXJteSBhbmQgc2VudCBpbnRvIHRoZSB0b3duLCBhbmQgZGVjaWRlIHRoYXQgdGhlIGdlbmVyYWwgc2FmZXR5CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIG5vdCBiZSBpbnRydXN0ZWQgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiBhbG9uZSwgYmVjYXVzZSB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBhd2FyZSB0aGF0IHRoZSBnbG9yeSBvZiB0aGUgdmljdG9yeSBtdXN0IHJlc3Qgd2l0aCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGlmIHRoZXkgbWFkZSBnb29kIHRoZSBkZWZlbnNlIG9mIHRoZSB0b3duLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRvIHRoZSBleHRyYW9yZGluYXJ5IHZhbG9yIG9mIG91ciBzb2xkaWVycywgZGV2aWNlcyBvZiBldmVyeSBzb3J0IHdlcmUgb3Bwb3NlZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+OyBzaW5jZSB0aGV5IGFyZSBhIG5hdGlvbiBvZiBjb25zdW1tYXRlCiAgICAgICAgICAgICAgICAgICAgaW5nZW51aXR5LCBhbmQgbW9zdCBza2lsbGZ1bCBpbiBpbWl0YXRpbmcgYW5kIG1ha2luZyB0aG9zZSB0aGluZ3Mgd2hpY2ggYXJlCiAgICAgICAgICAgICAgICAgICAgaW1wYXJ0ZWQgYnkgYW55IG9uZTsgZm9yIHRoZXkgdHVybmVkIGFzaWRlIHRoZSBob29rcyB3aXRoIG5vb3NlcywgYW5kIHdoZW4gdGhleQogICAgICAgICAgICAgICAgICAgIGhhZCBjYXVnaHQgaG9sZCBvZiB0aGVtIGZpcm1seSwgZHJldyB0aGVtIG9uIGJ5IG1lYW5zIG9mIGVuZ2luZXMsIGFuZCB1bmRlcm1pbmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vdW5kIHRoZSBtb3JlIHNraWxsZnVsbHkgb24gdGhpcyBhY2NvdW50LCBiZWNhdXNlIHRoZXJlIGFyZSBpbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRlcnJpdG9yaWVzIGV4dGVuc2l2ZSBpcm9uIG1pbmVzLCBhbmQgY29uc2VxdWVudGx5IGV2ZXJ5IGRlc2NyaXB0aW9uIG9mIG1pbmluZwogICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbnMgaXMga25vd24gYW5kIHByYWN0aWNlZCBieSB0aGVtLiBUaGV5IGhhZCBmdXJuaXNoZWQsIG1vcmUgb3ZlciwgdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgd2FsbCBvbiBldmVyeSBzaWRlIHdpdGggdHVycmV0cywgYW5kIGhhZCBjb3ZlcmVkIHRoZW0gd2l0aCBza2lucy4gQmVzaWRlcywKICAgICAgICAgICAgICAgICAgICBpbiB0aGVpciBmcmVxdWVudCBzYWxsaWVzIGJ5IGRheSBhbmQgbmlnaHQsIHRoZXkgYXR0ZW1wdGVkIGVpdGhlciB0byBzZXQgZmlyZSB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBtb3VuZCwgb3IgYXR0YWNrIG91ciBzb2xkaWVycyB3aGVuIGVuZ2FnZWQgaW4gdGhlIHdvcmtzOyBhbmQsIG1vcmVvdmVyLCBieQogICAgICAgICAgICAgICAgICAgIHNwbGljaW5nIHRoZSB1cHJpZ2h0IHRpbWJlcnMgb2YgdGhlaXIgb3duIHRvd2VycywgdGhleSBlcXVhbGVkIHRoZSBoZWlnaHQgb2YKICAgICAgICAgICAgICAgICAgICBvdXJzLCBhcyBmYXN0IGFzIHRoZSBtb3VuZCBoYWQgZGFpbHkgcmFpc2VkIHRoZW0sIGFuZCBjb3VudGVybWluZWQgb3VyIG1pbmVzLAogICAgICAgICAgICAgICAgICAgIGFuZCBpbXBlZGVkIHRoZSB3b3JraW5nIG9mIHRoZW0gYnkgc3Rha2VzIGJlbnQgYW5kIHNoYXJwZW5lZCBhdCB0aGUgZW5kcywgYW5kCiAgICAgICAgICAgICAgICAgICAgYm9pbGluZyBwaXRjaCBhbmQgc3RvbmVzIG9mIHZlcnkgZ3JlYXQgd2VpZ2h0LCBhbmQgcHJldmVudGVkIHRoZW0gZnJvbQogICAgICAgICAgICAgICAgICAgIGFwcHJvYWNoaW5nIHRoZSB3YWxscy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT47IHNpbmNlIHRoZXkgYXJlIGEgbmF0aW9uIG9mIGNvbnN1bW1hdGUKICAgICAgICAgICAgICAgICAgICBpbmdlbnVpdHksIGFuZCBtb3N0IHNraWxsZnVsIGluIGltaXRhdGluZyBhbmQgbWFraW5nIHRob3NlIHRoaW5ncyB3aGljaCBhcmUKICAgICAgICAgICAgICAgICAgICBpbXBhcnRlZCBieSBhbnkgb25lOyBmb3IgdGhleSB0dXJuZWQgYXNpZGUgdGhlIGhvb2tzIHdpdGggbm9vc2VzLCBhbmQgd2hlbiB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGNhdWdodCBob2xkIG9mIHRoZW0gZmlybWx5LCBkcmV3IHRoZW0gb24gYnkgbWVhbnMgb2YgZW5naW5lcywgYW5kIHVuZGVybWluZWQKICAgICAgICAgICAgICAgICAgICB0aGUgbW91bmQgdGhlIG1vcmUgc2tpbGxmdWxseSBvbiB0aGlzIGFjY291bnQsIGJlY2F1c2UgdGhlcmUgYXJlIGluIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdGVycml0b3JpZXMgZXh0ZW5zaXZlIGlyb24gbWluZXMsIGFuZCBjb25zZXF1ZW50bHkgZXZlcnkgZGVzY3JpcHRpb24gb2YgbWluaW5nCiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9ucyBpcyBrbm93biBhbmQgcHJhY3RpY2VkIGJ5IHRoZW0uIFRoZXkgaGFkIGZ1cm5pc2hlZCwgbW9yZSBvdmVyLCB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSB3YWxsIG9uIGV2ZXJ5IHNpZGUgd2l0aCB0dXJyZXRzLCBhbmQgaGFkIGNvdmVyZWQgdGhlbSB3aXRoIHNraW5zLiBCZXNpZGVzLAogICAgICAgICAgICAgICAgICAgIGluIHRoZWlyIGZyZXF1ZW50IHNhbGxpZXMgYnkgZGF5IGFuZCBuaWdodCwgdGhleSBhdHRlbXB0ZWQgZWl0aGVyIHRvIHNldCBmaXJlIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vdW5kLCBvciBhdHRhY2sgb3VyIHNvbGRpZXJzIHdoZW4gZW5nYWdlZCBpbiB0aGUgd29ya3M7IGFuZCwgbW9yZW92ZXIsIGJ5CiAgICAgICAgICAgICAgICAgICAgc3BsaWNpbmcgdGhlIHVwcmlnaHQgdGltYmVycyBvZiB0aGVpciBvd24gdG93ZXJzLCB0aGV5IGVxdWFsZWQgdGhlIGhlaWdodCBvZgogICAgICAgICAgICAgICAgICAgIG91cnMsIGFzIGZhc3QgYXMgdGhlIG1vdW5kIGhhZCBkYWlseSByYWlzZWQgdGhlbSwgYW5kIGNvdW50ZXJtaW5lZCBvdXIgbWluZXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGltcGVkZWQgdGhlIHdvcmtpbmcgb2YgdGhlbSBieSBzdGFrZXMgYmVudCBhbmQgc2hhcnBlbmVkIGF0IHRoZSBlbmRzLCBhbmQKICAgICAgICAgICAgICAgICAgICBib2lsaW5nIHBpdGNoIGFuZCBzdG9uZXMgb2YgdmVyeSBncmVhdCB3ZWlnaHQsIGFuZCBwcmV2ZW50ZWQgdGhlbSBmcm9tCiAgICAgICAgICAgICAgICAgICAgYXBwcm9hY2hpbmcgdGhlIHdhbGxzLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB0aGlzIGlzIHVzdWFsbHkgdGhlIGZvcm0gb2YgYWxsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGxpYzwvbmFtZT4gd2FsbHMuIFN0cmFpZ2h0CiAgICAgICAgICAgICAgICAgICAgYmVhbXMsIGNvbm5lY3RlZCBsZW5ndGh3aXNlIGFuZCB0d28gZmVldCBkaXN0YW50IGZyb20gZWFjaCBvdGhlciBhdCBlcXVhbAogICAgICAgICAgICAgICAgICAgIGludGVydmFscywgYXJlIHBsYWNlZCB0b2dldGhlciBvbiB0aGUgZ3JvdW5kOyB0aGVzZSBhcmUgbW9ydGlzZWQgb24gdGhlIGluc2lkZSwKICAgICAgICAgICAgICAgICAgICBhbmQgY292ZXJlZCB3aXRoIHBsZW50eSBvZiBlYXJ0aC4gQnV0IHRoZSBpbnRlcnZhbHMgd2hpY2ggd2UgaGF2ZSBtZW50aW9uZWQsIGFyZQogICAgICAgICAgICAgICAgICAgIGNsb3NlZCB1cCBpbiBmcm9udCBieSBsYXJnZSBzdG9uZXMuIFRoZXNlIGJlaW5nIHRodXMgbGFpZCBhbmQgY2VtZW50ZWQgdG9nZXRoZXIsCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciByb3cgaXMgYWRkZWQgYWJvdmUsIGluIHN1Y2ggYSBtYW5uZXIsIHRoYXQgdGhlIHNhbWUgaW50ZXJ2YWwgbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZWQsIGFuZCB0aGF0IHRoZSBiZWFtcyBtYXkgbm90IHRvdWNoIG9uZSBhbm90aGVyLCBidXQgZXF1YWwgc3BhY2VzCiAgICAgICAgICAgICAgICAgICAgaW50ZXJ2ZW5pbmcsIGVhY2ggcm93IG9mIGJlYW1zIGlzIGtlcHQgZmlybWx5IGluIGl0cyBwbGFjZSBieSBhIHJvdyBvZiBzdG9uZXMuCiAgICAgICAgICAgICAgICAgICAgSW4gdGhpcyBtYW5uZXIgdGhlIHdob2xlIHdhbGwgaXMgY29uc29saWRhdGVkLCB1bnRpbCB0aGUgcmVndWxhciBoZWlnaHQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgd2FsbCBiZSBjb21wbGV0ZWQuIFRoaXMgd29yaywgd2l0aCByZXNwZWN0IHRvIGFwcGVhcmFuY2UgYW5kIHZhcmlldHksIGlzIG5vdAogICAgICAgICAgICAgICAgICAgIHVuc2lnaHRseSwgb3dpbmcgdG8gdGhlIGFsdGVybmF0ZSByb3dzIG9mIGJlYW1zIGFuZCBzdG9uZXMsIHdoaWNoIHByZXNlcnZlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgaW4gcmlnaHQgbGluZXM7IGFuZCwgYmVzaWRlcywgaXQgcG9zc2Vzc2VzIGdyZWF0IGFkdmFudGFnZXMgYXMgcmVnYXJkcwogICAgICAgICAgICAgICAgICAgIHV0aWxpdHkgYW5kIHRoZSBkZWZlbnNlIG9mIGNpdGllczsgZm9yIHRoZSBzdG9uZSBwcm90ZWN0cyBpdCBmcm9tIGZpcmUsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICB3b29kIGZyb20gdGhlIGJhdHRlcmluZyByYW0sIHNpbmNlIGl0IFt0aGUgd29vZF0gYmVpbmcgbW9ydGlzZWQgaW4gdGhlIGluc2lkZQogICAgICAgICAgICAgICAgICAgIHdpdGggcm93cyBvZiBiZWFtcywgZ2VuZXJhbGx5IGZvcnR5IGZlZXQgZWFjaCBpbiBsZW5ndGgsIGNhbiBuZWl0aGVyIGJlIGJyb2tlbgogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggbm9yIHRvcm4gYXN1bmRlci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsbGljPC9uYW1lPiB3YWxscy4gU3RyYWlnaHQKICAgICAgICAgICAgICAgICAgICBiZWFtcywgY29ubmVjdGVkIGxlbmd0aHdpc2UgYW5kIHR3byBmZWV0IGRpc3RhbnQgZnJvbSBlYWNoIG90aGVyIGF0IGVxdWFsCiAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWxzLCBhcmUgcGxhY2VkIHRvZ2V0aGVyIG9uIHRoZSBncm91bmQ7IHRoZXNlIGFyZSBtb3J0aXNlZCBvbiB0aGUgaW5zaWRlLAogICAgICAgICAgICAgICAgICAgIGFuZCBjb3ZlcmVkIHdpdGggcGxlbnR5IG9mIGVhcnRoLiBCdXQgdGhlIGludGVydmFscyB3aGljaCB3ZSBoYXZlIG1lbnRpb25lZCwgYXJlCiAgICAgICAgICAgICAgICAgICAgY2xvc2VkIHVwIGluIGZyb250IGJ5IGxhcmdlIHN0b25lcy4gVGhlc2UgYmVpbmcgdGh1cyBsYWlkIGFuZCBjZW1lbnRlZCB0b2dldGhlciwKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIHJvdyBpcyBhZGRlZCBhYm92ZSwgaW4gc3VjaCBhIG1hbm5lciwgdGhhdCB0aGUgc2FtZSBpbnRlcnZhbCBtYXkgYmUKICAgICAgICAgICAgICAgICAgICBvYnNlcnZlZCwgYW5kIHRoYXQgdGhlIGJlYW1zIG1heSBub3QgdG91Y2ggb25lIGFub3RoZXIsIGJ1dCBlcXVhbCBzcGFjZXMKICAgICAgICAgICAgICAgICAgICBpbnRlcnZlbmluZywgZWFjaCByb3cgb2YgYmVhbXMgaXMga2VwdCBmaXJtbHkgaW4gaXRzIHBsYWNlIGJ5IGEgcm93IG9mIHN0b25lcy4KICAgICAgICAgICAgICAgICAgICBJbiB0aGlzIG1hbm5lciB0aGUgd2hvbGUgd2FsbCBpcyBjb25zb2xpZGF0ZWQsIHVudGlsIHRoZSByZWd1bGFyIGhlaWdodCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB3YWxsIGJlIGNvbXBsZXRlZC4gVGhpcyB3b3JrLCB3aXRoIHJlc3BlY3QgdG8gYXBwZWFyYW5jZSBhbmQgdmFyaWV0eSwgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgdW5zaWdodGx5LCBvd2luZyB0byB0aGUgYWx0ZXJuYXRlIHJvd3Mgb2YgYmVhbXMgYW5kIHN0b25lcywgd2hpY2ggcHJlc2VydmUgdGhlaXIKICAgICAgICAgICAgICAgICAgICBvcmRlciBpbiByaWdodCBsaW5lczsgYW5kLCBiZXNpZGVzLCBpdCBwb3NzZXNzZXMgZ3JlYXQgYWR2YW50YWdlcyBhcyByZWdhcmRzCiAgICAgICAgICAgICAgICAgICAgdXRpbGl0eSBhbmQgdGhlIGRlZmVuc2Ugb2YgY2l0aWVzOyBmb3IgdGhlIHN0b25lIHByb3RlY3RzIGl0IGZyb20gZmlyZSwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHdvb2QgZnJvbSB0aGUgYmF0dGVyaW5nIHJhbSwgc2luY2UgaXQgW3RoZSB3b29kXSBiZWluZyBtb3J0aXNlZCBpbiB0aGUgaW5zaWRlCiAgICAgICAgICAgICAgICAgICAgd2l0aCByb3dzIG9mIGJlYW1zLCBnZW5lcmFsbHkgZm9ydHkgZmVldCBlYWNoIGluIGxlbmd0aCwgY2FuIG5laXRoZXIgYmUgYnJva2VuCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCBub3IgdG9ybiBhc3VuZGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBzaWVnZSBoYXZpbmcgYmVlbiBpbXBlZGVkIGJ5IHNvIG1hbnkgZGlzYWR2YW50YWdlcywgdGhlIHNvbGRpZXJzLCBhbHRob3VnaAogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSByZXRhcmRlZCBkdXJpbmcgdGhlIHdob2xlIHRpbWUgYnkgdGhlIG11ZCwgY29sZCwgYW5kIGNvbnN0YW50IHNob3dlcnMsCiAgICAgICAgICAgICAgICAgICAgeWV0IGJ5IHRoZWlyIGluY2Vzc2FudCBsYWJvciBvdmVyY2FtZSBhbGwgdGhlc2Ugb2JzdGFjbGVzLCBhbmQgaW4gdHdlbnR5LWZpdmUKICAgICAgICAgICAgICAgICAgICBkYXlzIHJhaXNlZCBhIG1vdW5kIHRocmVlIGh1bmRyZWQgYW5kIHRoaXJ0eSBmZWV0IGJyb2FkIGFuZCBlaWdodHkgZmVldCBoaWdoLgogICAgICAgICAgICAgICAgICAgIFdoZW4gaXQgYWxtb3N0IHRvdWNoZWQgdGhlIGVuZW15J3Mgd2FsbHMsIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIGhpcyB1c3VhbCBjdXN0b20sIGtlcHQgd2F0Y2ggYXQgdGhlIHdvcmssIGFuZCBlbmNvdXJhZ2VkIHRoZQogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIG5vdCB0byBkaXNjb250aW51ZSB0aGUgd29yayBmb3IgYSBtb21lbnQ6IGEgbGl0dGxlIGJlZm9yZSB0aGUgdGhpcmQKICAgICAgICAgICAgICAgICAgICB3YXRjaCB0aGV5IGRpc2NvdmVyZWQgdGhhdCB0aGUgbW91bmQgd2FzIHNpbmtpbmcsIHNpbmNlIHRoZSBlbmVteSBoYWQgc2V0IGl0IG9uCiAgICAgICAgICAgICAgICAgICAgZmlyZSBieSBhIG1pbmU7IGFuZCBhdCB0aGUgc2FtZSB0aW1lIGEgc2hvdXQgd2FzIHJhaXNlZCBhbG9uZyB0aGUgZW50aXJlIHdhbGwsCiAgICAgICAgICAgICAgICAgICAgYW5kIGEgc2FsbHkgd2FzIG1hZGUgZnJvbSB0d28gZ2F0ZXMgb24gZWFjaCBzaWRlIG9mIHRoZSB0dXJyZXRzLiBTb21lIGF0IGEKICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSB3ZXJlIGNhc3RpbmcgdG9yY2hlcyBhbmQgZHJ5IHdvb2QgZnJvbSB0aGUgd2FsbCBvbiB0aGUgbW91bmQsIG90aGVycwogICAgICAgICAgICAgICAgICAgIHdlcmUgcG91cmluZyBvbiBpdCBwaXRjaCwgYW5kIG90aGVyIG1hdGVyaWFscywgYnkgd2hpY2ggdGhlIGZsYW1lIG1pZ2h0IGJlCiAgICAgICAgICAgICAgICAgICAgZXhjaXRlZCwgc28gdGhhdCBhIHBsYW4gY291bGQgaGFyZGx5IGJlIGZvcm1lZCwgYXMgdG8gd2hlcmUgdGhleSBzaG91bGQgZmlyc3QKICAgICAgICAgICAgICAgICAgICBydW4gdG8gdGhlIGRlZmVuc2UsIG9yIHRvIHdoYXQgcGFydCBhaWQgc2hvdWxkIGJlIGJyb3VnaHQuIEhvd2V2ZXIsIGFzIHR3bwogICAgICAgICAgICAgICAgICAgIGxlZ2lvbnMgYWx3YXlzIGtlcHQgZ3VhcmQgYmVmb3JlIHRoZSBjYW1wIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzCiAgICAgICAgICAgICAgICAgICAgb3JkZXJzLCBhbmQgc2V2ZXJhbCBvZiB0aGVtIHdlcmUgYXQgc3RhdGVkIHRpbWVzIGF0IHRoZSB3b3JrLCBtZWFzdXJlcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcHJvbXB0bHkgdGFrZW4sIHRoYXQgc29tZSBzaG91bGQgb3Bwb3NlIHRoZSBzYWxseWluZyBwYXJ0eSwgb3RoZXJzIGRyYXcgYmFjayB0aGUKICAgICAgICAgICAgICAgICAgICB0b3dlcnMgYW5kIG1ha2UgYSBjdXQgaW4gdGhlIHJhbXBhcnQ7IGFuZCBtb3Jlb3ZlciwgdGhhdCB0aGUgd2hvbGUgYXJteSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBoYXN0ZW4gZnJvbSB0aGUgY2FtcCB0byBleHRpbmd1aXNoIHRoZSBmbGFtZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIGhpcyB1c3VhbCBjdXN0b20sIGtlcHQgd2F0Y2ggYXQgdGhlIHdvcmssIGFuZCBlbmNvdXJhZ2VkIHRoZQogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIG5vdCB0byBkaXNjb250aW51ZSB0aGUgd29yayBmb3IgYSBtb21lbnQ6IGEgbGl0dGxlIGJlZm9yZSB0aGUgdGhpcmQKICAgICAgICAgICAgICAgICAgICB3YXRjaCB0aGV5IGRpc2NvdmVyZWQgdGhhdCB0aGUgbW91bmQgd2FzIHNpbmtpbmcsIHNpbmNlIHRoZSBlbmVteSBoYWQgc2V0IGl0IG9uCiAgICAgICAgICAgICAgICAgICAgZmlyZSBieSBhIG1pbmU7IGFuZCBhdCB0aGUgc2FtZSB0aW1lIGEgc2hvdXQgd2FzIHJhaXNlZCBhbG9uZyB0aGUgZW50aXJlIHdhbGwsCiAgICAgICAgICAgICAgICAgICAgYW5kIGEgc2FsbHkgd2FzIG1hZGUgZnJvbSB0d28gZ2F0ZXMgb24gZWFjaCBzaWRlIG9mIHRoZSB0dXJyZXRzLiBTb21lIGF0IGEKICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSB3ZXJlIGNhc3RpbmcgdG9yY2hlcyBhbmQgZHJ5IHdvb2QgZnJvbSB0aGUgd2FsbCBvbiB0aGUgbW91bmQsIG90aGVycwogICAgICAgICAgICAgICAgICAgIHdlcmUgcG91cmluZyBvbiBpdCBwaXRjaCwgYW5kIG90aGVyIG1hdGVyaWFscywgYnkgd2hpY2ggdGhlIGZsYW1lIG1pZ2h0IGJlCiAgICAgICAgICAgICAgICAgICAgZXhjaXRlZCwgc28gdGhhdCBhIHBsYW4gY291bGQgaGFyZGx5IGJlIGZvcm1lZCwgYXMgdG8gd2hlcmUgdGhleSBzaG91bGQgZmlyc3QKICAgICAgICAgICAgICAgICAgICBydW4gdG8gdGhlIGRlZmVuc2UsIG9yIHRvIHdoYXQgcGFydCBhaWQgc2hvdWxkIGJlIGJyb3VnaHQuIEhvd2V2ZXIsIGFzIHR3bwogICAgICAgICAgICAgICAgICAgIGxlZ2lvbnMgYWx3YXlzIGtlcHQgZ3VhcmQgYmVmb3JlIHRoZSBjYW1wIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzCiAgICAgICAgICAgICAgICAgICAgb3JkZXJzLCBhbmQgc2V2ZXJhbCBvZiB0aGVtIHdlcmUgYXQgc3RhdGVkIHRpbWVzIGF0IHRoZSB3b3JrLCBtZWFzdXJlcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcHJvbXB0bHkgdGFrZW4sIHRoYXQgc29tZSBzaG91bGQgb3Bwb3NlIHRoZSBzYWxseWluZyBwYXJ0eSwgb3RoZXJzIGRyYXcgYmFjayB0aGUKICAgICAgICAgICAgICAgICAgICB0b3dlcnMgYW5kIG1ha2UgYSBjdXQgaW4gdGhlIHJhbXBhcnQ7IGFuZCBtb3Jlb3ZlciwgdGhhdCB0aGUgd2hvbGUgYXJteSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBoYXN0ZW4gZnJvbSB0aGUgY2FtcCB0byBleHRpbmd1aXNoIHRoZSBmbGFtZXMuIDwvdHJhbnNsYXRpb24+"
translation['7.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gdGhlIGJhdHRsZSB3YXMgZ29pbmcgb24gaW4gZXZlcnkgZGlyZWN0aW9uLCB0aGUgcmVzdCBvZiB0aGUgbmlnaHQgYmVpbmcgbm93CiAgICAgICAgICAgICAgICAgICAgc3BlbnQsIGFuZCBmcmVzaCBob3BlcyBvZiB2aWN0b3J5IGFsd2F5cyBhcm9zZSBiZWZvcmUgdGhlIGVuZW15OiB0aGUgbW9yZSBzbyBvbgogICAgICAgICAgICAgICAgICAgIHRoaXMgYWNjb3VudCBiZWNhdXNlIHRoZXkgc2F3IHRoZSBjb3ZlcmluZ3Mgb2Ygb3VyIHRvd2VycyBidXJudCBhd2F5LCBhbmQKICAgICAgICAgICAgICAgICAgICBwZXJjZWl2ZWQsIHRoYXQgd2UsIGJlaW5nIGV4cG9zZWQsIGNvdWxkIG5vdCBlYXNpbHkgZ28gdG8gZ2l2ZSBhc3Npc3RhbmNlLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGV5IHRoZW1zZWx2ZXMgd2VyZSBhbHdheXMgcmVsaWV2aW5nIHRoZSB3ZWFyeSB3aXRoIGZyZXNoIG1lbiwgYW5kIGNvbnNpZGVyZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGFsbCB0aGUgc2FmZXR5IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiByZXN0ZWQgb24gdGhpcyBjcmlzaXM7CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaGFwcGVuZWQgaW4gbXkgb3duIHZpZXcgYSBjaXJjdW1zdGFuY2Ugd2hpY2gsIGhhdmluZyBhcHBlYXJlZCB0byBiZSB3b3J0aHkKICAgICAgICAgICAgICAgICAgICBvZiByZWNvcmQsIHdlIHRob3VnaHQgaXQgb3VnaHQgbm90IHRvIGJlIG9taXR0ZWQuIEEgY2VydGFpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gYmVmb3JlIHRoZSBnYXRlIG9mIHRoZSB0b3duLCB3aG8gd2FzIGNhc3RpbmcgaW50byB0aGUgZmlyZQogICAgICAgICAgICAgICAgICAgIG9wcG9zaXRlIHRoZSB0dXJyZXQgYmFsbHMgb2YgdGFsbG93IGFuZCBmaXJlIHdoaWNoIHdlcmUgcGFzc2VkIGFsb25nIHRvIGhpbSwgd2FzCiAgICAgICAgICAgICAgICAgICAgcGllcmNlZCB3aXRoIGEgZGFydCBvbiB0aGUgcmlnaHQgc2lkZSBhbmQgZmVsbCBkZWFkLiBPbmUgb2YgdGhvc2UgbmV4dCBoaW0KICAgICAgICAgICAgICAgICAgICBzdGVwcGVkIG92ZXIgaGltIGFzIGhlIGxheSwgYW5kIGRpc2NoYXJnZWQgdGhlIHNhbWUgb2ZmaWNlOiB3aGVuIHRoZSBzZWNvbmQgbWFuCiAgICAgICAgICAgICAgICAgICAgd2FzIHNsYWluIGluIHRoZSBzYW1lIG1hbm5lciBieSBhIHdvdW5kIGZyb20gYSBjcm9zcy1ib3csIGEgdGhpcmQgc3VjY2VlZGVkIGhpbSwKICAgICAgICAgICAgICAgICAgICBhbmQgYSBmb3VydGggc3VjY2VlZGVkIHRoZSB0aGlyZDogbm9yIHdhcyB0aGlzIHBvc3QgbGVmdCB2YWNhbnQgYnkgdGhlIGJlc2llZ2VkLAogICAgICAgICAgICAgICAgICAgIHVudGlsLCB0aGUgZmlyZSBvZiB0aGUgbW91bmQgaGF2aW5nIGJlZW4gZXh0aW5ndWlzaGVkLCBhbmQgdGhlIGVuZW15IHJlcHVsc2VkIGluCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgZGlyZWN0aW9uLCBhbiBlbmQgd2FzIHB1dCB0byB0aGUgZmlnaHRpbmcuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gcmVzdGVkIG9uIHRoaXMgY3Jpc2lzOwogICAgICAgICAgICAgICAgICAgIHRoZXJlIGhhcHBlbmVkIGluIG15IG93biB2aWV3IGEgY2lyY3Vtc3RhbmNlIHdoaWNoLCBoYXZpbmcgYXBwZWFyZWQgdG8gYmUgd29ydGh5CiAgICAgICAgICAgICAgICAgICAgb2YgcmVjb3JkLCB3ZSB0aG91Z2h0IGl0IG91Z2h0IG5vdCB0byBiZSBvbWl0dGVkLiBBIGNlcnRhaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGJlZm9yZSB0aGUgZ2F0ZSBvZiB0aGUgdG93biwgd2hvIHdhcyBjYXN0aW5nIGludG8gdGhlIGZpcmUKICAgICAgICAgICAgICAgICAgICBvcHBvc2l0ZSB0aGUgdHVycmV0IGJhbGxzIG9mIHRhbGxvdyBhbmQgZmlyZSB3aGljaCB3ZXJlIHBhc3NlZCBhbG9uZyB0byBoaW0sIHdhcwogICAgICAgICAgICAgICAgICAgIHBpZXJjZWQgd2l0aCBhIGRhcnQgb24gdGhlIHJpZ2h0IHNpZGUgYW5kIGZlbGwgZGVhZC4gT25lIG9mIHRob3NlIG5leHQgaGltCiAgICAgICAgICAgICAgICAgICAgc3RlcHBlZCBvdmVyIGhpbSBhcyBoZSBsYXksIGFuZCBkaXNjaGFyZ2VkIHRoZSBzYW1lIG9mZmljZTogd2hlbiB0aGUgc2Vjb25kIG1hbgogICAgICAgICAgICAgICAgICAgIHdhcyBzbGFpbiBpbiB0aGUgc2FtZSBtYW5uZXIgYnkgYSB3b3VuZCBmcm9tIGEgY3Jvc3MtYm93LCBhIHRoaXJkIHN1Y2NlZWRlZCBoaW0sCiAgICAgICAgICAgICAgICAgICAgYW5kIGEgZm91cnRoIHN1Y2NlZWRlZCB0aGUgdGhpcmQ6IG5vciB3YXMgdGhpcyBwb3N0IGxlZnQgdmFjYW50IGJ5IHRoZSBiZXNpZWdlZCwKICAgICAgICAgICAgICAgICAgICB1bnRpbCwgdGhlIGZpcmUgb2YgdGhlIG1vdW5kIGhhdmluZyBiZWVuIGV4dGluZ3Vpc2hlZCwgYW5kIHRoZSBlbmVteSByZXB1bHNlZCBpbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGRpcmVjdGlvbiwgYW4gZW5kIHdhcyBwdXQgdG8gdGhlIGZpZ2h0aW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiBoYXZpbmcgdHJpZWQgZXZlcnkgZXhwZWRpZW50LCBhcyBub3RoaW5nIGhhZCBzdWNjZWVkZWQsCiAgICAgICAgICAgICAgICAgICAgYWRvcHRlZCB0aGUgZGVzaWduIG9mIGZsZWVpbmcgZnJvbSB0aGUgdG93biB0aGUgbmV4dCBkYXksIGJ5IHRoZSBhZHZpY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPi4gVGhleSBob3BlZCB0aGF0LCBieSBhdHRlbXB0aW5nIGl0IGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGRlYWQgb2YgbmlnaHQsIHRoZXkgd291bGQgZWZmZWN0IGl0IHdpdGhvdXQgYW55IGdyZWF0IGxvc3Mgb2YgbWVuLCBiZWNhdXNlIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbXAgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiB3YXMgbm90IGZhciBkaXN0YW50IGZyb20gdGhlIHRvd24sIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBleHRlbnNpdmUgbWFyc2ggd2hpY2ggaW50ZXJ2ZW5lZCwgd2FzIGxpa2VseSB0byByZXRhcmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGluIHRoZSBwdXJzdWl0LiBBbmQgdGhleSB3ZXJlIG5vdyBwcmVwYXJpbmcgdG8gZXhlY3V0ZSB0aGlzCiAgICAgICAgICAgICAgICAgICAgYnkgbmlnaHQsIHdoZW4gdGhlIG1hdHJvbnMgc3VkZGVubHkgcmFuIG91dC1pbnRvIHRoZSBzdHJlZXRzLCBhbmQgd2VlcGluZyBjYXN0CiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBhdCB0aGUgZmVldCBvZiB0aGVpciBodXNiYW5kcywgYW5kIHJlcXVlc3RlZCBvZiB0aGVtLCB3aXRoIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgZW50cmVhdHksIHRoYXQgdGhleSBzaG91bGQgbm90IGFiYW5kb24gdGhlbXNlbHZlcyBhbmQgdGhlaXIgY29tbW9uIGNoaWxkcmVuIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15IGZvciBwdW5pc2htZW50LCBiZWNhdXNlIHRoZSB3ZWFrbmVzcyBvZiB0aGVpciBuYXR1cmUgYW5kIHBoeXNpY2FsCiAgICAgICAgICAgICAgICAgICAgcG93ZXJzIHByZXZlbnRlZCB0aGVtIGZyb20gdGFraW5nIHRvIGZsaWdodC4gV2hlbiB0aGV5IHNhdyB0aGF0IHRoZXkgKGFzIGZlYXIKICAgICAgICAgICAgICAgICAgICBkb2VzIG5vdCBnZW5lcmFsbHkgYWRtaXQgb2YgbWVyY3kgaW4gZXh0cmVtZSBkYW5nZXIpIHBlcnNpc3RlZCBpbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb24sIHRoZXkgYmVnYW4gdG8gc2hvdXQgYWxvdWQsIGFuZCBnaXZlIGludGVsbGlnZW5jZSBvZiB0aGVpciBmbGlnaHQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4uIFRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiBiZWluZyBpbnRpbWlkYXRlZAogICAgICAgICAgICAgICAgICAgIGJ5IGZlYXIgb2YgdGhpcywgbGVzdCB0aGUgcGFzc2VzIHNob3VsZCBiZSBwcmUtb2NjdXBpZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gY2F2YWxyeSwgZGVzaXN0ZWQgZnJvbSB0aGVpciBkZXNpZ24uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiBoYXZpbmcgdHJpZWQgZXZlcnkgZXhwZWRpZW50LCBhcyBub3RoaW5nIGhhZCBzdWNjZWVkZWQsCiAgICAgICAgICAgICAgICAgICAgYWRvcHRlZCB0aGUgZGVzaWduIG9mIGZsZWVpbmcgZnJvbSB0aGUgdG93biB0aGUgbmV4dCBkYXksIGJ5IHRoZSBhZHZpY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPi4gVGhleSBob3BlZCB0aGF0LCBieSBhdHRlbXB0aW5nIGl0IGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGRlYWQgb2YgbmlnaHQsIHRoZXkgd291bGQgZWZmZWN0IGl0IHdpdGhvdXQgYW55IGdyZWF0IGxvc3Mgb2YgbWVuLCBiZWNhdXNlIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbXAgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiB3YXMgbm90IGZhciBkaXN0YW50IGZyb20gdGhlIHRvd24sIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBleHRlbnNpdmUgbWFyc2ggd2hpY2ggaW50ZXJ2ZW5lZCwgd2FzIGxpa2VseSB0byByZXRhcmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGluIHRoZSBwdXJzdWl0LiBBbmQgdGhleSB3ZXJlIG5vdyBwcmVwYXJpbmcgdG8gZXhlY3V0ZSB0aGlzCiAgICAgICAgICAgICAgICAgICAgYnkgbmlnaHQsIHdoZW4gdGhlIG1hdHJvbnMgc3VkZGVubHkgcmFuIG91dC1pbnRvIHRoZSBzdHJlZXRzLCBhbmQgd2VlcGluZyBjYXN0CiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBhdCB0aGUgZmVldCBvZiB0aGVpciBodXNiYW5kcywgYW5kIHJlcXVlc3RlZCBvZiB0aGVtLCB3aXRoIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgZW50cmVhdHksIHRoYXQgdGhleSBzaG91bGQgbm90IGFiYW5kb24gdGhlbXNlbHZlcyBhbmQgdGhlaXIgY29tbW9uIGNoaWxkcmVuIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15IGZvciBwdW5pc2htZW50LCBiZWNhdXNlIHRoZSB3ZWFrbmVzcyBvZiB0aGVpciBuYXR1cmUgYW5kIHBoeXNpY2FsCiAgICAgICAgICAgICAgICAgICAgcG93ZXJzIHByZXZlbnRlZCB0aGVtIGZyb20gdGFraW5nIHRvIGZsaWdodC4gV2hlbiB0aGV5IHNhdyB0aGF0IHRoZXkgKGFzIGZlYXIKICAgICAgICAgICAgICAgICAgICBkb2VzIG5vdCBnZW5lcmFsbHkgYWRtaXQgb2YgbWVyY3kgaW4gZXh0cmVtZSBkYW5nZXIpIHBlcnNpc3RlZCBpbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb24sIHRoZXkgYmVnYW4gdG8gc2hvdXQgYWxvdWQsIGFuZCBnaXZlIGludGVsbGlnZW5jZSBvZiB0aGVpciBmbGlnaHQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4uIFRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiBiZWluZyBpbnRpbWlkYXRlZAogICAgICAgICAgICAgICAgICAgIGJ5IGZlYXIgb2YgdGhpcywgbGVzdCB0aGUgcGFzc2VzIHNob3VsZCBiZSBwcmUtb2NjdXBpZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gY2F2YWxyeSwgZGVzaXN0ZWQgZnJvbSB0aGVpciBkZXNpZ24uIDwvdHJhbnNsYXRpb24+"
translation['7.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBuZXh0IGRheSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHRoZSB0b3dlciBiZWluZyBhZHZhbmNlZCwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHdvcmtzIHdoaWNoIGhlIGhhZCBkZXRlcm1pbmVkIHRvIHJhaXNlIGJlaW5nIGFycmFuZ2VkLCBhIHZpb2xlbnQgc3Rvcm0gYXJpc2luZywKICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IHRoaXMgbm8gYmFkIHRpbWUgZm9yIGV4ZWN1dGluZyBoaXMgZGVzaWducywgYmVjYXVzZSBoZSBvYnNlcnZlZCB0aGUKICAgICAgICAgICAgICAgICAgICBndWFyZHMgYXJyYW5nZWQgb24gdGhlIHdhbGxzIGEgbGl0dGxlIHRvbyBuZWdsaWdlbnRseSwgYW5kIHRoZXJlZm9yZSBvcmRlcmVkIGhpcwogICAgICAgICAgICAgICAgICAgIG93biBtZW4gdG8gZW5nYWdlIGluIHRoZWlyIHdvcmsgbW9yZSByZW1pc3NseSwgYW5kIHBvaW50ZWQgb3V0IHdoYXQgaGUgd2lzaGVkIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgZG9uZS4gSGUgZHJldyB1cCBoaXMgc29sZGllcnMgaW4gYSBzZWNyZXQgcG9zaXRpb24gd2l0aGluIHRoZSB2aW5lYWUsIGFuZAogICAgICAgICAgICAgICAgICAgIGV4aG9ydHMgdGhlbSB0byByZWFwLCBhdCBsZWFzdCwgdGhlIGhhcnZlc3Qgb2YgdmljdG9yeSBwcm9wb3J0aW9uYXRlIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZXhlcnRpb25zLiBIZSBwcm9wb3NlZCBhIHJld2FyZCBmb3IgdGhvc2Ugd2hvIHNob3VsZCBmaXJzdCBzY2FsZSB0aGUgd2FsbHMsIGFuZAogICAgICAgICAgICAgICAgICAgIGdhdmUgdGhlIHNpZ25hbCB0byB0aGUgc29sZGllcnMuIFRoZXkgc3VkZGVubHkgZmxldyBvdXQgZnJvbSBhbGwgcXVhcnRlcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgcXVpY2tseSBmaWxsZWQgdGhlIHdhbGxzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCB0aGUgdG93ZXIgYmVpbmcgYWR2YW5jZWQsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICB3b3JrcyB3aGljaCBoZSBoYWQgZGV0ZXJtaW5lZCB0byByYWlzZSBiZWluZyBhcnJhbmdlZCwgYSB2aW9sZW50IHN0b3JtIGFyaXNpbmcsCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGlzIG5vIGJhZCB0aW1lIGZvciBleGVjdXRpbmcgaGlzIGRlc2lnbnMsIGJlY2F1c2UgaGUgb2JzZXJ2ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ3VhcmRzIGFycmFuZ2VkIG9uIHRoZSB3YWxscyBhIGxpdHRsZSB0b28gbmVnbGlnZW50bHksIGFuZCB0aGVyZWZvcmUgb3JkZXJlZCBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gbWVuIHRvIGVuZ2FnZSBpbiB0aGVpciB3b3JrIG1vcmUgcmVtaXNzbHksIGFuZCBwb2ludGVkIG91dCB3aGF0IGhlIHdpc2hlZCB0bwogICAgICAgICAgICAgICAgICAgIGJlIGRvbmUuIEhlIGRyZXcgdXAgaGlzIHNvbGRpZXJzIGluIGEgc2VjcmV0IHBvc2l0aW9uIHdpdGhpbiB0aGUgdmluZWFlLCBhbmQKICAgICAgICAgICAgICAgICAgICBleGhvcnRzIHRoZW0gdG8gcmVhcCwgYXQgbGVhc3QsIHRoZSBoYXJ2ZXN0IG9mIHZpY3RvcnkgcHJvcG9ydGlvbmF0ZSB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIGV4ZXJ0aW9ucy4gSGUgcHJvcG9zZWQgYSByZXdhcmQgZm9yIHRob3NlIHdobyBzaG91bGQgZmlyc3Qgc2NhbGUgdGhlIHdhbGxzLCBhbmQKICAgICAgICAgICAgICAgICAgICBnYXZlIHRoZSBzaWduYWwgdG8gdGhlIHNvbGRpZXJzLiBUaGV5IHN1ZGRlbmx5IGZsZXcgb3V0IGZyb20gYWxsIHF1YXJ0ZXJzIGFuZAogICAgICAgICAgICAgICAgICAgIHF1aWNrbHkgZmlsbGVkIHRoZSB3YWxscy4gPC90cmFuc2xhdGlvbj4="
translation['7.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBlbmVteSBiZWluZyBhbGFybWVkIGJ5IHRoZSBzdWRkZW5uZXNzIG9mIHRoZSBhdHRhY2ssIHdlcmUgZGlzbG9kZ2VkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgd2FsbCBhbmQgdG93ZXJzLCBhbmQgZHJldyB1cCwgaW4gZm9ybSBvZiBhIHdlZGdlLCBpbiB0aGUgbWFya2V0IHBsYWNlIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBvcGVuIHN0cmVldHMsIHdpdGggdGhpcyBpbnRlbnRpb24gdGhhdCwgaWYgYW4gYXR0YWNrIHNob3VsZCBiZSBtYWRlIG9uIGFueSBzaWRlLAogICAgICAgICAgICAgICAgICAgIHRoZXkgc2hvdWxkIGZpZ2h0IHdpdGggdGhlaXIgbGluZSBkcmF3biB1cCB0byByZWNlaXZlIGl0LiBXaGVuIHRoZXkgc2F3IG5vIG9uZQogICAgICAgICAgICAgICAgICAgIGRlc2NlbmRpbmcgdG8gdGhlIGxldmVsIGdyb3VuZCwgYW5kIHRoZSBlbmVteSBleHRlbmRpbmcgdGhlbXNlbHZlcyBhbG9uZyB0aGUKICAgICAgICAgICAgICAgICAgICBlbnRpcmUgd2FsbCBpbiBldmVyeSBkaXJlY3Rpb24sIGZlYXJpbmcgbGVzdCBldmVyeSBob3BlIG9mIGZsaWdodCBzaG91bGQgYmUgY3V0CiAgICAgICAgICAgICAgICAgICAgb2ZmLCB0aGV5IGNhc3QgYXdheSB0aGVpciBhcm1zLCBhbmQgc291Z2h0LCB3aXRob3V0IHN0b3BwaW5nLCB0aGUgbW9zdCByZW1vdGUKICAgICAgICAgICAgICAgICAgICBwYXJ0cyBvZiB0aGUgdG93bi4gQSBwYXJ0IHdhcyB0aGVuIHNsYWluIGJ5IHRoZSBpbmZhbnRyeSB3aGVuIHRoZXkgd2VyZSBjcm93ZGluZwogICAgICAgICAgICAgICAgICAgIHVwb24gb25lIGFub3RoZXIgaW4gdGhlIG5hcnJvdyBwYXNzYWdlIG9mIHRoZSBnYXRlczsgYW5kIGEgcGFydCBoYXZpbmcgZ290CiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCB0aGUgZ2F0ZXMsIHdlcmUgY3V0IHRvIHBpZWNlcyBieSB0aGUgY2F2YWxyeTogbm9yIHdhcyB0aGVyZSBvbmUgd2hvIHdhcwogICAgICAgICAgICAgICAgICAgIGFueGlvdXMgZm9yIHRoZSBwbHVuZGVyLiBUaHVzLCBiZWluZyBleGNpdGVkIGJ5IHRoZSBtYXNzYWNyZSBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzMzciIHJlZz0iICArT3JsZWFucyBbMS45LDQ3LjldIChpbmhhYml0ZWQgcGxhY2UpLCBMb2lyZXQsIENlbnRyZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VuYWJ1bSA8L25hbWU+IGFuZCB0aGUgZmF0aWd1ZSBvZiB0aGUgc2llZ2UsIHRoZXkgc3BhcmVkIG5laXRoZXIgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3b3JuIG91dCB3aXRoIHllYXJzLCB3b21lbiwgb3IgY2hpbGRyZW4uIEZpbmFsbHksIG91dCBvZiBhbGwgdGhhdCBudW1iZXIsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgYW1vdW50ZWQgdG8gYWJvdXQgZm9ydHkgdGhvdXNhbmQsIHNjYXJjZWx5IGVpZ2h0IGh1bmRyZWQsIHdobyBmbGVkIGZyb20gdGhlIHRvd24KICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXkgaGVhcmQgdGhlIGZpcnN0IGFsYXJtLCByZWFjaGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gaW4gc2FmZXR5OgogICAgICAgICAgICAgICAgICAgIGFuZCBoZSwgdGhlIG5pZ2h0IGJlaW5nIG5vdyBmYXIgc3BlbnQsIHJlY2VpdmVkIHRoZW0gaW4gc2lsZW5jZSBhZnRlciB0aGVpcgogICAgICAgICAgICAgICAgICAgIGZsaWdodCAoZmVhcmluZyB0aGF0IGFueSBzZWRpdGlvbiBzaG91bGQgYXJpc2UgaW4gdGhlIGNhbXAgZnJvbSB0aGVpciBlbnRyYW5jZQogICAgICAgICAgICAgICAgICAgIGluIGEgYm9keSBhbmQgdGhlIGNvbXBhc3Npb24gb2YgdGhlIHNvbGRpZXJzKSwgc28gdGhhdCwgaGF2aW5nIGFycmFuZ2VkIGhpcwogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIHRoZSBjaGllZnMgb2YgdGhlIHN0YXRlcyBhdCBhIGRpc3RhbmNlIG9uIHRoZSByb2FkLCBoZSB0b29rCiAgICAgICAgICAgICAgICAgICAgcHJlY2F1dGlvbnMgdGhhdCB0aGV5IHNob3VsZCBiZSBzZXBhcmF0ZWQgYW5kIGNvbmR1Y3RlZCB0byB0aGVpciBmZWxsb3cKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5bWVuLCB0byB3aGF0ZXZlciBwYXJ0IG9mIHRoZSBjYW1wIGhhZCBiZWVuIGFzc2lnbmVkIHRvIGVhY2ggc3RhdGUgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBiZWdpbm5pbmcuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzMzciIHJlZz0iICArT3JsZWFucyBbMS45LDQ3LjldIChpbmhhYml0ZWQgcGxhY2UpLCBMb2lyZXQsIENlbnRyZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VuYWJ1bSA8L25hbWU+IGFuZCB0aGUgZmF0aWd1ZSBvZiB0aGUgc2llZ2UsIHRoZXkgc3BhcmVkIG5laXRoZXIgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3b3JuIG91dCB3aXRoIHllYXJzLCB3b21lbiwgb3IgY2hpbGRyZW4uIEZpbmFsbHksIG91dCBvZiBhbGwgdGhhdCBudW1iZXIsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgYW1vdW50ZWQgdG8gYWJvdXQgZm9ydHkgdGhvdXNhbmQsIHNjYXJjZWx5IGVpZ2h0IGh1bmRyZWQsIHdobyBmbGVkIGZyb20gdGhlIHRvd24KICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXkgaGVhcmQgdGhlIGZpcnN0IGFsYXJtLCByZWFjaGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gaW4gc2FmZXR5OgogICAgICAgICAgICAgICAgICAgIGFuZCBoZSwgdGhlIG5pZ2h0IGJlaW5nIG5vdyBmYXIgc3BlbnQsIHJlY2VpdmVkIHRoZW0gaW4gc2lsZW5jZSBhZnRlciB0aGVpcgogICAgICAgICAgICAgICAgICAgIGZsaWdodCAoZmVhcmluZyB0aGF0IGFueSBzZWRpdGlvbiBzaG91bGQgYXJpc2UgaW4gdGhlIGNhbXAgZnJvbSB0aGVpciBlbnRyYW5jZQogICAgICAgICAgICAgICAgICAgIGluIGEgYm9keSBhbmQgdGhlIGNvbXBhc3Npb24gb2YgdGhlIHNvbGRpZXJzKSwgc28gdGhhdCwgaGF2aW5nIGFycmFuZ2VkIGhpcwogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIHRoZSBjaGllZnMgb2YgdGhlIHN0YXRlcyBhdCBhIGRpc3RhbmNlIG9uIHRoZSByb2FkLCBoZSB0b29rCiAgICAgICAgICAgICAgICAgICAgcHJlY2F1dGlvbnMgdGhhdCB0aGV5IHNob3VsZCBiZSBzZXBhcmF0ZWQgYW5kIGNvbmR1Y3RlZCB0byB0aGVpciBmZWxsb3cKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5bWVuLCB0byB3aGF0ZXZlciBwYXJ0IG9mIHRoZSBjYW1wIGhhZCBiZWVuIGFzc2lnbmVkIHRvIGVhY2ggc3RhdGUgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBiZWdpbm5pbmcuIDwvdHJhbnNsYXRpb24+"
translation['7.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gaGF2aW5nIGNvbnZlbmVkIGFuIGFzc2VtYmx5IG9uIHRoZSBmb2xsb3dpbmcgZGF5LAogICAgICAgICAgICAgICAgICAgIGNvbnNvbGVkIGFuZCBlbmNvdXJhZ2VkIGhpcyBzb2xkaWVycyBpbiB0aGUgZm9sbG93aW5nIHdvcmRzOiAiVGhhdCB0aGV5IHNob3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBiZSB0b28gbXVjaCBkZXByZXNzZWQgaW4gc3Bpcml0LCBub3IgYWxhcm1lZCBhdCB0aGVpciBsb3NzOyB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiBkaWQgbm90IGNvbnF1ZXIgYnkgdmFsb3Igbm9yIGluIHRoZSBmaWVsZCwgYnV0CiAgICAgICAgICAgICAgICAgICAgYnkgYSBraW5kIG9mIGFydCBhbmQgc2tpbGwgaW4gYXNzYXVsdCwgd2l0aCB3aGljaCB0aGV5IHRoZW1zZWx2ZXMgd2VyZQogICAgICAgICAgICAgICAgICAgIHVuYWNxdWFpbnRlZDsgdGhhdCB3aG9ldmVyIGV4cGVjdGVkIGV2ZXJ5IGV2ZW50IGluIHRoZSB3YXIgdG8gYmUgZmF2b3JhYmxlLAogICAgICAgICAgICAgICAgICAgIGVycmVkOyB0aGF0IGl0IG5ldmVyIHdhcyBoaXMgb3BpbmlvbiB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzQxNSIgcmVnPSIgICtCb3VyZ2VzIFsyLjM4Myw0Ny44M10gKGluaGFiaXRlZCBwbGFjZSksIENoZXIsIENlbnRyZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QXZhcmljdW0gPC9uYW1lPiBzaG91bGQgYmUgZGVmZW5kZWQsIG9mIHRoZSB0cnV0aCBvZiB3aGljaCBzdGF0ZW1lbnQgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBhcyB3aXRuZXNzZXMsIGJ1dCB0aGF0IGl0IHdhcyBvd2luZyB0byB0aGUgaW1wcnVkZW5jZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+LCBhbmQgdGhlIHRvbyByZWFkeSBjb21wbGlhbmNlIG9mIHRoZSByZXN0LCB0aGF0IHRoaXMKICAgICAgICAgICAgICAgICAgICBsb3NzIHdhcyBzdXN0YWluZWQ7IHRoYXQsIGhvd2V2ZXIsIGhlIHdvdWxkIHNvb24gY29tcGVuc2F0ZSBpdCBieSBzdXBlcmlvcgogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZXM7IGZvciB0aGF0IGhlIHdvdWxkLCBieSBoaXMgZXhlcnRpb25zLCBicmluZyBvdmVyIHRob3NlIHN0YXRlcyB3aGljaAogICAgICAgICAgICAgICAgICAgIHNldmVyZWQgdGhlbXNlbHZlcyBmcm9tIHRoZSByZXN0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICB3b3VsZCBjcmVhdGUgYSBnZW5lcmFsIHVuYW5pbWl0eSB0aHJvdWdob3V0IHRoZSB3aG9sZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIHRoZSB1bmlvbiBvZgogICAgICAgICAgICAgICAgICAgIHdoaWNoIG5vdCBldmVuIHRoZSB3aG9sZSBlYXJ0aCBjb3VsZCB3aXRoc3RhbmQsIGFuZCB0aGF0IGhlIGhhZCBpdCBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgYWxtb3N0IGVmZmVjdGVkOyB0aGF0IGluIHRoZSBtZWFuIHRpbWUgaXQgd2FzIHJlYXNvbmFibGUgdGhhdCBoZSBzaG91bGQgcHJldmFpbAogICAgICAgICAgICAgICAgICAgIG9uIHRoZW0sIGZvciB0aGUgc2FrZSBvZiB0aGUgZ2VuZXJhbCBzYWZldHksIHRvIGJlZ2luIHRvIGZvcnRpZnkgdGhlaXIgY2FtcCwgaW4KICAgICAgICAgICAgICAgICAgICBvcmRlciB0aGF0IHRoZXkgbWlnaHQgdGhlIG1vcmUgZWFzaWx5IHN1c3RhaW4gdGhlIHN1ZGRlbiBhdHRhY2tzIG9mIHRoZSBlbmVteS4iCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+IGhhdmluZyBjb252ZW5lZCBhbiBhc3NlbWJseSBvbiB0aGUgZm9sbG93aW5nIGRheSwKICAgICAgICAgICAgICAgICAgICBjb25zb2xlZCBhbmQgZW5jb3VyYWdlZCBoaXMgc29sZGllcnMgaW4gdGhlIGZvbGxvd2luZyB3b3JkczogIlRoYXQgdGhleSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBub3QgYmUgdG9vIG11Y2ggZGVwcmVzc2VkIGluIHNwaXJpdCwgbm9yIGFsYXJtZWQgYXQgdGhlaXIgbG9zczsgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gZGlkIG5vdCBjb25xdWVyIGJ5IHZhbG9yIG5vciBpbiB0aGUgZmllbGQsIGJ1dAogICAgICAgICAgICAgICAgICAgIGJ5IGEga2luZCBvZiBhcnQgYW5kIHNraWxsIGluIGFzc2F1bHQsIHdpdGggd2hpY2ggdGhleSB0aGVtc2VsdmVzIHdlcmUKICAgICAgICAgICAgICAgICAgICB1bmFjcXVhaW50ZWQ7IHRoYXQgd2hvZXZlciBleHBlY3RlZCBldmVyeSBldmVudCBpbiB0aGUgd2FyIHRvIGJlIGZhdm9yYWJsZSwKICAgICAgICAgICAgICAgICAgICBlcnJlZDsgdGhhdCBpdCBuZXZlciB3YXMgaGlzIG9waW5pb24gdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4gc2hvdWxkIGJlIGRlZmVuZGVkLCBvZiB0aGUgdHJ1dGggb2Ygd2hpY2ggc3RhdGVtZW50IGhlIGhhZAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgYXMgd2l0bmVzc2VzLCBidXQgdGhhdCBpdCB3YXMgb3dpbmcgdG8gdGhlIGltcHJ1ZGVuY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiwgYW5kIHRoZSB0b28gcmVhZHkgY29tcGxpYW5jZSBvZiB0aGUgcmVzdCwgdGhhdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgbG9zcyB3YXMgc3VzdGFpbmVkOyB0aGF0LCBob3dldmVyLCBoZSB3b3VsZCBzb29uIGNvbXBlbnNhdGUgaXQgYnkgc3VwZXJpb3IKICAgICAgICAgICAgICAgICAgICBhZHZhbnRhZ2VzOyBmb3IgdGhhdCBoZSB3b3VsZCwgYnkgaGlzIGV4ZXJ0aW9ucywgYnJpbmcgb3ZlciB0aG9zZSBzdGF0ZXMgd2hpY2gKICAgICAgICAgICAgICAgICAgICBzZXZlcmVkIHRoZW1zZWx2ZXMgZnJvbSB0aGUgcmVzdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgd291bGQgY3JlYXRlIGEgZ2VuZXJhbCB1bmFuaW1pdHkgdGhyb3VnaG91dCB0aGUgd2hvbGUgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB0aGUgdW5pb24gb2YKICAgICAgICAgICAgICAgICAgICB3aGljaCBub3QgZXZlbiB0aGUgd2hvbGUgZWFydGggY291bGQgd2l0aHN0YW5kLCBhbmQgdGhhdCBoZSBoYWQgaXQgYWxyZWFkeQogICAgICAgICAgICAgICAgICAgIGFsbW9zdCBlZmZlY3RlZDsgdGhhdCBpbiB0aGUgbWVhbiB0aW1lIGl0IHdhcyByZWFzb25hYmxlIHRoYXQgaGUgc2hvdWxkIHByZXZhaWwKICAgICAgICAgICAgICAgICAgICBvbiB0aGVtLCBmb3IgdGhlIHNha2Ugb2YgdGhlIGdlbmVyYWwgc2FmZXR5LCB0byBiZWdpbiB0byBmb3J0aWZ5IHRoZWlyIGNhbXAsIGluCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IHRoZSBtb3JlIGVhc2lseSBzdXN0YWluIHRoZSBzdWRkZW4gYXR0YWNrcyBvZiB0aGUgZW5lbXkuIgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgc3BlZWNoIHdhcyBub3QgZGlzYWdyZWVhYmxlIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHByaW5jaXBhbGx5LCBiZWNhdXNlIGhlIGhpbXNlbGYgd2FzIG5vdCBkaXNoZWFydGVuZWQgYnkgcmVjZWl2aW5nIHNvIHNldmVyZSBhCiAgICAgICAgICAgICAgICAgICAgbG9zcywgYW5kIGhhZCBub3QgY29uY2VhbGVkIGhpbXNlbGYsIG5vciBzaHVubmVkIHRoZSBleWVzIG9mIHRoZSBwZW9wbGU6IGFuZCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBiZWxpZXZlZCB0byBwb3NzZXNzIGdyZWF0ZXIgZm9yZXNpZ2h0IGFuZCBzb3VuZGVyIGp1ZGdtZW50IHRoYW4gdGhlIHJlc3QsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSwgd2hlbiB0aGUgYWZmYWlyIHdhcyB1bmRlY2lkZWQsIGhlIGhhZCBhdCBmaXJzdCBiZWVuIG9mIG9waW5pb24gdGhhdAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4gc2hvdWxkIGJlIGJ1cm50LCBhbmQgYWZ0ZXJ3YXJkIHRoYXQgaXQgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgYWJhbmRvbmVkLiBBY2NvcmRpbmdseSwgYXMgaWxsIHN1Y2Nlc3Mgd2Vha2VucyB0aGUgYXV0aG9yaXR5IG9mIG90aGVyIGdlbmVyYWxzLAogICAgICAgICAgICAgICAgICAgIHNvLCBvbiB0aGUgY29udHJhcnksIGhpcyBkaWduaXR5IGluY3JlYXNlZCBkYWlseSwgYWx0aG91Z2ggYSBsb3NzIHdhcyBzdXN0YWluZWQ6CiAgICAgICAgICAgICAgICAgICAgYXQgdGhlIHNhbWUgdGltZSB0aGV5IGJlZ2FuIHRvIGVudGVydGFpbiBob3Blcywgb24gaGlzIGFzc2VydGlvbiwgb2YgdW5pdGluZyB0aGUKICAgICAgICAgICAgICAgICAgICByZXN0IG9mIHRoZSBzdGF0ZXMgdG8gdGhlbXNlbHZlcywgYW5kIG9uIHRoaXMgb2NjYXNpb24sIGZvciB0aGUgZmlyc3QgdGltZSwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gYmVnYW4gdG8gZm9ydGlmeSB0aGVpciBjYW1wcywgYW5kIHdlcmUgc28KICAgICAgICAgICAgICAgICAgICBhbGFybWVkIHRoYXQgYWx0aG91Z2ggdGhleSB3ZXJlIG1lbiB1bmFjY3VzdG9tZWQgdG8gdG9pbCwgeWV0IHRoZXkgd2VyZSBvZgogICAgICAgICAgICAgICAgICAgIG9waW5pb24gdGhhdCB0aGV5IG91Z2h0IHRvIGVuZHVyZSBhbmQgc3VmZmVyIGV2ZXJ5IHRoaW5nIHdoaWNoIHNob3VsZCBiZSBpbXBvc2VkCiAgICAgICAgICAgICAgICAgICAgdXBvbiB0aGVtLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBwcmluY2lwYWxseSwgYmVjYXVzZSBoZSBoaW1zZWxmIHdhcyBub3QgZGlzaGVhcnRlbmVkIGJ5IHJlY2VpdmluZyBzbyBzZXZlcmUgYQogICAgICAgICAgICAgICAgICAgIGxvc3MsIGFuZCBoYWQgbm90IGNvbmNlYWxlZCBoaW1zZWxmLCBub3Igc2h1bm5lZCB0aGUgZXllcyBvZiB0aGUgcGVvcGxlOiBhbmQgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgYmVsaWV2ZWQgdG8gcG9zc2VzcyBncmVhdGVyIGZvcmVzaWdodCBhbmQgc291bmRlciBqdWRnbWVudCB0aGFuIHRoZSByZXN0LAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UsIHdoZW4gdGhlIGFmZmFpciB3YXMgdW5kZWNpZGVkLCBoZSBoYWQgYXQgZmlyc3QgYmVlbiBvZiBvcGluaW9uIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NDE1IiByZWc9IiAgK0JvdXJnZXMgWzIuMzgzLDQ3LjgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgQ2hlciwgQ2VudHJlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BdmFyaWN1bSA8L25hbWU+IHNob3VsZCBiZSBidXJudCwgYW5kIGFmdGVyd2FyZCB0aGF0IGl0IHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGFiYW5kb25lZC4gQWNjb3JkaW5nbHksIGFzIGlsbCBzdWNjZXNzIHdlYWtlbnMgdGhlIGF1dGhvcml0eSBvZiBvdGhlciBnZW5lcmFscywKICAgICAgICAgICAgICAgICAgICBzbywgb24gdGhlIGNvbnRyYXJ5LCBoaXMgZGlnbml0eSBpbmNyZWFzZWQgZGFpbHksIGFsdGhvdWdoIGEgbG9zcyB3YXMgc3VzdGFpbmVkOgogICAgICAgICAgICAgICAgICAgIGF0IHRoZSBzYW1lIHRpbWUgdGhleSBiZWdhbiB0byBlbnRlcnRhaW4gaG9wZXMsIG9uIGhpcyBhc3NlcnRpb24sIG9mIHVuaXRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzdCBvZiB0aGUgc3RhdGVzIHRvIHRoZW1zZWx2ZXMsIGFuZCBvbiB0aGlzIG9jY2FzaW9uLCBmb3IgdGhlIGZpcnN0IHRpbWUsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IGJlZ2FuIHRvIGZvcnRpZnkgdGhlaXIgY2FtcHMsIGFuZCB3ZXJlIHNvCiAgICAgICAgICAgICAgICAgICAgYWxhcm1lZCB0aGF0IGFsdGhvdWdoIHRoZXkgd2VyZSBtZW4gdW5hY2N1c3RvbWVkIHRvIHRvaWwsIHlldCB0aGV5IHdlcmUgb2YKICAgICAgICAgICAgICAgICAgICBvcGluaW9uIHRoYXQgdGhleSBvdWdodCB0byBlbmR1cmUgYW5kIHN1ZmZlciBldmVyeSB0aGluZyB3aGljaCBzaG91bGQgYmUgaW1wb3NlZAogICAgICAgICAgICAgICAgICAgIHVwb24gdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['7.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vciBkaWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiB1c2UgbGVzcyBlZmZvcnRzIHRoYW4gaGUgaGFkIHByb21pc2VkLCB0byBnYWluCiAgICAgICAgICAgICAgICAgICAgb3ZlciB0aGUgb3RoZXIgc3RhdGVzLCBhbmQgW2luIGNvbnNlcXVlbmNlXSBlbmRlYXZvcmVkIHRvIGVudGljZSB0aGVpciBsZWFkZXJzCiAgICAgICAgICAgICAgICAgICAgYnkgZ2lmdHMgYW5kIHByb21pc2VzLiBGb3IgdGhpcyBvYmplY3QgaGUgc2VsZWN0ZWQgZml0dGluZyBlbWlzc2FyaWVzLCBieSB3aG9zZQogICAgICAgICAgICAgICAgICAgIHN1YnRsZSBwbGVhZGluZyBvciBwcml2YXRlIGZyaWVuZHNoaXAsIGVhY2ggb2YgdGhlIG5vYmxlcyBjb3VsZCBiZSBtb3N0IGVhc2lseQogICAgICAgICAgICAgICAgICAgIGluZmx1ZW5jZWQuIEhlIHRha2VzIGNhcmUgdGhhdCB0aG9zZSB3aG8gZmxlZCB0byBoaW0gb24gdGhlIHN0b3JtaW5nIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzQxNSIgcmVnPSIgICtCb3VyZ2VzIFsyLjM4Myw0Ny44M10gKGluaGFiaXRlZCBwbGFjZSksIENoZXIsIENlbnRyZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QXZhcmljdW0gPC9uYW1lPiBzaG91bGQgYmUgcHJvdmlkZWQgd2l0aCBhcm1zIGFuZCBjbG90aGVzLiBBdCB0aGUgc2FtZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoaXMgZGltaW5pc2hlZCBmb3JjZXMgc2hvdWxkIGJlIHJlY3J1aXRlZCwgaGUgbGV2aWVzIGEgZml4ZWQgcXVvdGEgb2YKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycyBmcm9tIGVhY2ggc3RhdGUsIGFuZCBkZWZpbmVzIHRoZSBudW1iZXIgYW5kIGRheSBiZWZvcmUgd2hpY2ggaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgd2lzaCB0aGVtIGJyb3VnaHQgdG8gdGhlIGNhbXAsIGFuZCBvcmRlcnMgYWxsIHRoZSBhcmNoZXJzLCBvZiB3aG9tIHRoZXJlIHdhcyBhCiAgICAgICAgICAgICAgICAgICAgdmVyeSBncmVhdCBudW1iZXIgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB0byBiZSBjb2xsZWN0ZWQgYW5kIHNlbnQKICAgICAgICAgICAgICAgICAgICB0byBoaW0uIEJ5IHRoZXNlIG1lYW5zLCB0aGUgdHJvb3BzIHdoaWNoIHdlcmUgbG9zdCBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4gYXJlIHNwZWVkaWx5IHJlcGxhY2VkLiBJbiB0aGUgbWVhbiB0aW1lLAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRldXRvbWFydXM8L25hbWU+LCB0aGUgc29uIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2xsb3ZpY29uPC9uYW1lPiwgdGhlIGtpbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tml0aW9icmlnZXM8L25hbWU+LCB3aG9zZSBmYXRoZXIgaGFkIHJlY2VpdmVkIHRoZSBhcHBlbGxhdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIGZyaWVuZCBmcm9tIG91ciBzZW5hdGUsIGNhbWUgdG8gaGltIHdpdGggYSBncmVhdCBudW1iZXIgb2YgaGlzIG93biBob3JzZSBhbmQKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG9tIGhlIGhhZCBoaXJlZCBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg3OCIgcmVnPSJBcXVpdGFpbmUgWzEsNDQuNTgzXSAocmVnaW9uKSwgRnJhbmNlLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5BcXVpdGFuaWEgPC9uYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gdXNlIGxlc3MgZWZmb3J0cyB0aGFuIGhlIGhhZCBwcm9taXNlZCwgdG8gZ2FpbgogICAgICAgICAgICAgICAgICAgIG92ZXIgdGhlIG90aGVyIHN0YXRlcywgYW5kIFtpbiBjb25zZXF1ZW5jZV0gZW5kZWF2b3JlZCB0byBlbnRpY2UgdGhlaXIgbGVhZGVycwogICAgICAgICAgICAgICAgICAgIGJ5IGdpZnRzIGFuZCBwcm9taXNlcy4gRm9yIHRoaXMgb2JqZWN0IGhlIHNlbGVjdGVkIGZpdHRpbmcgZW1pc3NhcmllcywgYnkgd2hvc2UKICAgICAgICAgICAgICAgICAgICBzdWJ0bGUgcGxlYWRpbmcgb3IgcHJpdmF0ZSBmcmllbmRzaGlwLCBlYWNoIG9mIHRoZSBub2JsZXMgY291bGQgYmUgbW9zdCBlYXNpbHkKICAgICAgICAgICAgICAgICAgICBpbmZsdWVuY2VkLiBIZSB0YWtlcyBjYXJlIHRoYXQgdGhvc2Ugd2hvIGZsZWQgdG8gaGltIG9uIHRoZSBzdG9ybWluZyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4gc2hvdWxkIGJlIHByb3ZpZGVkIHdpdGggYXJtcyBhbmQgY2xvdGhlcy4gQXQgdGhlIHNhbWUgdGltZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGlzIGRpbWluaXNoZWQgZm9yY2VzIHNob3VsZCBiZSByZWNydWl0ZWQsIGhlIGxldmllcyBhIGZpeGVkIHF1b3RhIG9mCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMgZnJvbSBlYWNoIHN0YXRlLCBhbmQgZGVmaW5lcyB0aGUgbnVtYmVyIGFuZCBkYXkgYmVmb3JlIHdoaWNoIGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIHdpc2ggdGhlbSBicm91Z2h0IHRvIHRoZSBjYW1wLCBhbmQgb3JkZXJzIGFsbCB0aGUgYXJjaGVycywgb2Ygd2hvbSB0aGVyZSB3YXMgYQogICAgICAgICAgICAgICAgICAgIHZlcnkgZ3JlYXQgbnVtYmVyIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgdG8gYmUgY29sbGVjdGVkIGFuZCBzZW50CiAgICAgICAgICAgICAgICAgICAgdG8gaGltLiBCeSB0aGVzZSBtZWFucywgdGhlIHRyb29wcyB3aGljaCB3ZXJlIGxvc3QgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NDE1IiByZWc9IiAgK0JvdXJnZXMgWzIuMzgzLDQ3LjgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgQ2hlciwgQ2VudHJlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BdmFyaWN1bSA8L25hbWU+IGFyZSBzcGVlZGlseSByZXBsYWNlZC4gSW4gdGhlIG1lYW4gdGltZSwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UZXV0b21hcnVzPC9uYW1lPiwgdGhlIHNvbiBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk9sbG92aWNvbjwvbmFtZT4sIHRoZSBraW5nIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5pdGlvYnJpZ2VzPC9uYW1lPiwgd2hvc2UgZmF0aGVyIGhhZCByZWNlaXZlZCB0aGUgYXBwZWxsYXRpb24gb2YKICAgICAgICAgICAgICAgICAgICBmcmllbmQgZnJvbSBvdXIgc2VuYXRlLCBjYW1lIHRvIGhpbSB3aXRoIGEgZ3JlYXQgbnVtYmVyIG9mIGhpcyBvd24gaG9yc2UgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvbSBoZSBoYWQgaGlyZWQgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI4NzgiIHJlZz0iQXF1aXRhaW5lIFsxLDQ0LjU4M10gKHJlZ2lvbiksIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QXF1aXRhbmlhIDwvbmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYWZ0ZXIgZGVsYXlpbmcgc2V2ZXJhbCBkYXlzIGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzQxNSIgcmVnPSIgICtCb3VyZ2VzIFsyLjM4Myw0Ny44M10gKGluaGFiaXRlZCBwbGFjZSksIENoZXIsIENlbnRyZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QXZhcmljdW0gPC9uYW1lPiwgYW5kLCBmaW5kaW5nIHRoZXJlIHRoZSBncmVhdGVzdCBwbGVudHkgb2YgY29ybiBhbmQgb3RoZXIKICAgICAgICAgICAgICAgICAgICBwcm92aXNpb25zLCByZWZyZXNoZWQgaGlzIGFybXkgYWZ0ZXIgdGhlaXIgZmF0aWd1ZSBhbmQgcHJpdmF0aW9uLiBUaGUgd2ludGVyCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgYWxtb3N0IGVuZGVkLCB3aGVuIGhlIHdhcyBpbnZpdGVkIGJ5IHRoZSBmYXZvcmFibGUgc2Vhc29uIG9mIHRoZSB5ZWFyIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvc2VjdXRlIHRoZSB3YXIgYW5kIG1hcmNoIGFnYWluc3QgdGhlIGVuZW15LCBbYW5kIHRyeV0gd2hldGhlciBoZSBjb3VsZCBkcmF3CiAgICAgICAgICAgICAgICAgICAgdGhlbSBmcm9tIHRoZSBtYXJzaGVzIGFuZCB3b29kcywgb3IgZWxzZSBwcmVzcyB0aGVtIGJ5IGEgYmxvY2thZGU7IHNvbWUgbm9ibGVtZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gY2FtZSB0byBoaW0gYXMgZW1iYXNzYWRvcnMgdG8gZW50cmVhdCAidGhhdCBpbiBhbgogICAgICAgICAgICAgICAgICAgIGV4dHJlbWUgZW1lcmdlbmN5IGhlIHNob3VsZCBzdWNjb3IgdGhlaXIgc3RhdGU7IHRoYXQgdGhlaXIgYWZmYWlycyB3ZXJlIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHV0bW9zdCBkYW5nZXIsIGJlY2F1c2UsIHdoZXJlYXMgc2luZ2xlIG1hZ2lzdHJhdGVzIGhhZCBiZWVuIHVzdWFsbHkgYXBwb2ludGVkIGluCiAgICAgICAgICAgICAgICAgICAgYW5jaWVudCB0aW1lcyBhbmQgaGVsZCB0aGUgcG93ZXIgb2Yga2luZyBmb3IgYSBzaW5nbGUgeWVhciwgdHdvIHBlcnNvbnMgbm93CiAgICAgICAgICAgICAgICAgICAgZXhlcmNpc2VkIHRoaXMgb2ZmaWNlLCBhbmQgZWFjaCBhc3NlcnRlZCB0aGF0IGhlIHdhcyBhcHBvaW50ZWQgYWNjb3JkaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbGF3cy4gVGhhdCBvbmUgb2YgdGhlbSB3YXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db252aWN0b2xpdGFuaXM8L25hbWU+LCBhIHBvd2VyZnVsIGFuZAogICAgICAgICAgICAgICAgICAgIGlsbHVzdHJpb3VzIHlvdXRoOyB0aGUgb3RoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3R1czwvbmFtZT4sIHNwcnVuZyBmcm9tIGEgbW9zdCBhbmNpZW50CiAgICAgICAgICAgICAgICAgICAgZmFtaWx5LCBhbmQgcGVyc29uYWxseSBhIG1hbiBvZiB2ZXJ5IGdyZWF0IGluZmx1ZW5jZSBhbmQgZXh0ZW5zaXZlIGNvbm5lY3Rpb25zLgogICAgICAgICAgICAgICAgICAgIEhpcyBicm90aGVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmFsZXRpYWN1czwvbmFtZT4gaGFkIGJvcm5lIHRoZSBzYW1lIG9mZmljZSBkdXJpbmcgdGhlIGxhc3QKICAgICAgICAgICAgICAgICAgICB5ZWFyOiB0aGF0IHRoZSB3aG9sZSBzdGF0ZSB3YXMgdXAgaW4gYXJtczsgdGhlIHNlbmF0ZSBkaXZpZGVkLCB0aGUgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgZGl2aWRlZDsgdGhhdCBlYWNoIG9mIHRoZW0gaGFkIGhpcyBvd24gYWRoZXJlbnRzOyBhbmQgdGhhdCwgaWYgdGhlIGFuaW1vc2l0eQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIGZvbWVudGVkIGFueSBsb25nZXIsIHRoZSByZXN1bHQgd291bGQgYmUgdGhhdCBvbmUgcGFydCBvZiB0aGUgc3RhdGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBjb21lIHRvIGEgY29sbGlzaW9uIHdpdGggdGhlIG90aGVyOyB0aGF0IGl0IHJlc3RlZCB3aXRoIGhpcyBhY3Rpdml0eSBhbmQKICAgICAgICAgICAgICAgICAgICBpbmZsdWVuY2UgdG8gcHJldmVudCBpdC4iIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGFmdGVyIGRlbGF5aW5nIHNldmVyYWwgZGF5cyBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4sIGFuZCwgZmluZGluZyB0aGVyZSB0aGUgZ3JlYXRlc3QgcGxlbnR5IG9mIGNvcm4gYW5kIG90aGVyCiAgICAgICAgICAgICAgICAgICAgcHJvdmlzaW9ucywgcmVmcmVzaGVkIGhpcyBhcm15IGFmdGVyIHRoZWlyIGZhdGlndWUgYW5kIHByaXZhdGlvbi4gVGhlIHdpbnRlcgogICAgICAgICAgICAgICAgICAgIGJlaW5nIGFsbW9zdCBlbmRlZCwgd2hlbiBoZSB3YXMgaW52aXRlZCBieSB0aGUgZmF2b3JhYmxlIHNlYXNvbiBvZiB0aGUgeWVhciB0bwogICAgICAgICAgICAgICAgICAgIHByb3NlY3V0ZSB0aGUgd2FyIGFuZCBtYXJjaCBhZ2FpbnN0IHRoZSBlbmVteSwgW2FuZCB0cnldIHdoZXRoZXIgaGUgY291bGQgZHJhdwogICAgICAgICAgICAgICAgICAgIHRoZW0gZnJvbSB0aGUgbWFyc2hlcyBhbmQgd29vZHMsIG9yIGVsc2UgcHJlc3MgdGhlbSBieSBhIGJsb2NrYWRlOyBzb21lIG5vYmxlbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IGNhbWUgdG8gaGltIGFzIGVtYmFzc2Fkb3JzIHRvIGVudHJlYXQgInRoYXQgaW4gYW4KICAgICAgICAgICAgICAgICAgICBleHRyZW1lIGVtZXJnZW5jeSBoZSBzaG91bGQgc3VjY29yIHRoZWlyIHN0YXRlOyB0aGF0IHRoZWlyIGFmZmFpcnMgd2VyZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB1dG1vc3QgZGFuZ2VyLCBiZWNhdXNlLCB3aGVyZWFzIHNpbmdsZSBtYWdpc3RyYXRlcyBoYWQgYmVlbiB1c3VhbGx5IGFwcG9pbnRlZCBpbgogICAgICAgICAgICAgICAgICAgIGFuY2llbnQgdGltZXMgYW5kIGhlbGQgdGhlIHBvd2VyIG9mIGtpbmcgZm9yIGEgc2luZ2xlIHllYXIsIHR3byBwZXJzb25zIG5vdwogICAgICAgICAgICAgICAgICAgIGV4ZXJjaXNlZCB0aGlzIG9mZmljZSwgYW5kIGVhY2ggYXNzZXJ0ZWQgdGhhdCBoZSB3YXMgYXBwb2ludGVkIGFjY29yZGluZyB0bwogICAgICAgICAgICAgICAgICAgIHRoZWlyIGxhd3MuIFRoYXQgb25lIG9mIHRoZW0gd2FzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29udmljdG9saXRhbmlzPC9uYW1lPiwgYSBwb3dlcmZ1bCBhbmQKICAgICAgICAgICAgICAgICAgICBpbGx1c3RyaW91cyB5b3V0aDsgdGhlIG90aGVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q290dXM8L25hbWU+LCBzcHJ1bmcgZnJvbSBhIG1vc3QgYW5jaWVudAogICAgICAgICAgICAgICAgICAgIGZhbWlseSwgYW5kIHBlcnNvbmFsbHkgYSBtYW4gb2YgdmVyeSBncmVhdCBpbmZsdWVuY2UgYW5kIGV4dGVuc2l2ZSBjb25uZWN0aW9ucy4KICAgICAgICAgICAgICAgICAgICBIaXMgYnJvdGhlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZhbGV0aWFjdXM8L25hbWU+IGhhZCBib3JuZSB0aGUgc2FtZSBvZmZpY2UgZHVyaW5nIHRoZSBsYXN0CiAgICAgICAgICAgICAgICAgICAgeWVhcjogdGhhdCB0aGUgd2hvbGUgc3RhdGUgd2FzIHVwIGluIGFybXM7IHRoZSBzZW5hdGUgZGl2aWRlZCwgdGhlIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIGRpdmlkZWQ7IHRoYXQgZWFjaCBvZiB0aGVtIGhhZCBoaXMgb3duIGFkaGVyZW50czsgYW5kIHRoYXQsIGlmIHRoZSBhbmltb3NpdHkKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBmb21lbnRlZCBhbnkgbG9uZ2VyLCB0aGUgcmVzdWx0IHdvdWxkIGJlIHRoYXQgb25lIHBhcnQgb2YgdGhlIHN0YXRlCiAgICAgICAgICAgICAgICAgICAgd291bGQgY29tZSB0byBhIGNvbGxpc2lvbiB3aXRoIHRoZSBvdGhlcjsgdGhhdCBpdCByZXN0ZWQgd2l0aCBoaXMgYWN0aXZpdHkgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5mbHVlbmNlIHRvIHByZXZlbnQgaXQuIiA8L3RyYW5zbGF0aW9uPg=="
translation['7.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFsdGhvdWdoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBjb25zaWRlcmVkIGl0IHJ1aW5vdXMgdG8gbGVhdmUgdGhlIHdhcgogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgZW5lbXksIHlldCwgYmVpbmcgd2VsbCBhd2FyZSB3aGF0IGdyZWF0IGV2aWxzIGdlbmVyYWxseSBhcmlzZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWwgZGlzc2Vuc2lvbnMsIGxlc3QgYSBzdGF0ZSBzbyBwb3dlcmZ1bCBhbmQgc28gY2xvc2VseSBjb25uZWN0ZWQgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIHdoaWNoIGhlIGhpbXNlbGYgaGFkIGFsd2F5cwogICAgICAgICAgICAgICAgICAgIGZvc3RlcmVkIGFuZCBob25vcmVkIGluIGV2ZXJ5IHJlc3BlY3QsIHNob3VsZCBoYXZlIHJlY291cnNlIHRvIHZpb2xlbmNlIGFuZAogICAgICAgICAgICAgICAgICAgIGFybXMsIGFuZCB0aGF0IHRoZSBwYXJ0eSB3aGljaCBoYWQgbGVzcyBjb25maWRlbmNlIGluIGl0cyBvd24gcG93ZXIgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgc3VtbW9uIGFpZCBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4sIGhlIGRldGVybWluZWQgdG8gYW50aWNpcGF0ZSB0aGlzCiAgICAgICAgICAgICAgICAgICAgbW92ZW1lbnQ7IGFuZCBiZWNhdXNlLCBieSB0aGUgbGF3cyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIGl0IHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBwZXJtaXR0ZWQgdGhvc2Ugd2hvIGhlbGQgdGhlIHN1cHJlbWUgYXV0aG9yaXR5IHRvIGxlYXZlIHRoZSBjb3VudHJ5LCBoZQogICAgICAgICAgICAgICAgICAgIGRldGVybWluZWQgdG8gZ28gaW4gcGVyc29uIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgbGVzdCBoZSBzaG91bGQgYXBwZWFyIHRvCiAgICAgICAgICAgICAgICAgICAgaW5mcmluZ2UgdXBvbiB0aGVpciBnb3Zlcm5tZW50IGFuZCBsYXdzLCBhbmQgc3VtbW9uZWQgYWxsIHRoZSBzZW5hdGUsIGFuZCB0aG9zZQogICAgICAgICAgICAgICAgICAgIGJldHdlZW4gd2hvbSB0aGUgZGlzcHV0ZSB3YXMsIHRvIG1lZXQgaGltIGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGxhY2UiPkRlY2V0aWE8L25hbWU+LgogICAgICAgICAgICAgICAgICAgIFdoZW4gYWxtb3N0IGFsbCB0aGUgc3RhdGUgaGFkIGFzc2VtYmxlZCB0aGVyZSwgYW5kIGhlIHdhcyBpbmZvcm1lZCB0aGF0IG9uZQogICAgICAgICAgICAgICAgICAgIGJyb3RoZXIgaGFkIGJlZW4gZGVjbGFyZWQgbWFnaXN0cmF0ZSBieSB0aGUgb3RoZXIsIHdoZW4gb25seSBhIGZldyBwZXJzb25zIHdlcmUKICAgICAgICAgICAgICAgICAgICBwcml2YXRlbHkgc3VtbW9uZWQgZm9yIHRoZSBwdXJwb3NlLCBhdCBhIGRpZmZlcmVudCB0aW1lIGFuZCBwbGFjZSBmcm9tIHdoYXQgaGUKICAgICAgICAgICAgICAgICAgICBvdWdodCwgd2hlcmVhcyB0aGUgbGF3cyBub3Qgb25seSBmb3JiYWRlIHR3byBiZWxvbmdpbmcgdG8gb25lIGZhbWlseSB0byBiZQogICAgICAgICAgICAgICAgICAgIGVsZWN0ZWQgbWFnaXN0cmF0ZXMgd2hpbGUgZWFjaCB3YXMgYWxpdmUsIGJ1dCBldmVuIGRldGVycmVkIHRoZW0gZnJvbSBiZWluZyBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBzZW5hdGUsIGhlIGNvbXBlbGxlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvdHVzPC9uYW1lPiB0byByZXNpZ24gaGlzIG9mZmljZTsgaGUgb3JkZXJlZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbnZpY3RvbGl0YW5pczwvbmFtZT4sIHdobyBoYWQgYmVlbiBlbGVjdGVkIGJ5IHRoZSBwcmllc3RzLCBhY2NvcmRpbmcKICAgICAgICAgICAgICAgICAgICB0byB0aGUgdXNhZ2Ugb2YgdGhlIHN0YXRlLCBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIG1hZ2lzdHJhdGVzLCB0byBob2xkIHRoZQogICAgICAgICAgICAgICAgICAgIHN1cHJlbWUgYXV0aG9yaXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGNvbnNpZGVyZWQgaXQgcnVpbm91cyB0byBsZWF2ZSB0aGUgd2FyCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBlbmVteSwgeWV0LCBiZWluZyB3ZWxsIGF3YXJlIHdoYXQgZ3JlYXQgZXZpbHMgZ2VuZXJhbGx5IGFyaXNlIGZyb20KICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbCBkaXNzZW5zaW9ucywgbGVzdCBhIHN0YXRlIHNvIHBvd2VyZnVsIGFuZCBzbyBjbG9zZWx5IGNvbm5lY3RlZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgd2hpY2ggaGUgaGltc2VsZiBoYWQgYWx3YXlzCiAgICAgICAgICAgICAgICAgICAgZm9zdGVyZWQgYW5kIGhvbm9yZWQgaW4gZXZlcnkgcmVzcGVjdCwgc2hvdWxkIGhhdmUgcmVjb3Vyc2UgdG8gdmlvbGVuY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgYXJtcywgYW5kIHRoYXQgdGhlIHBhcnR5IHdoaWNoIGhhZCBsZXNzIGNvbmZpZGVuY2UgaW4gaXRzIG93biBwb3dlciBzaG91bGQKICAgICAgICAgICAgICAgICAgICBzdW1tb24gYWlkIGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiwgaGUgZGV0ZXJtaW5lZCB0byBhbnRpY2lwYXRlIHRoaXMKICAgICAgICAgICAgICAgICAgICBtb3ZlbWVudDsgYW5kIGJlY2F1c2UsIGJ5IHRoZSBsYXdzIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgaXQgd2FzIG5vdAogICAgICAgICAgICAgICAgICAgIHBlcm1pdHRlZCB0aG9zZSB3aG8gaGVsZCB0aGUgc3VwcmVtZSBhdXRob3JpdHkgdG8gbGVhdmUgdGhlIGNvdW50cnksIGhlCiAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lZCB0byBnbyBpbiBwZXJzb24gdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCBsZXN0IGhlIHNob3VsZCBhcHBlYXIgdG8KICAgICAgICAgICAgICAgICAgICBpbmZyaW5nZSB1cG9uIHRoZWlyIGdvdmVybm1lbnQgYW5kIGxhd3MsIGFuZCBzdW1tb25lZCBhbGwgdGhlIHNlbmF0ZSwgYW5kIHRob3NlCiAgICAgICAgICAgICAgICAgICAgYmV0d2VlbiB3aG9tIHRoZSBkaXNwdXRlIHdhcywgdG8gbWVldCBoaW0gYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwbGFjZSI+RGVjZXRpYTwvbmFtZT4uCiAgICAgICAgICAgICAgICAgICAgV2hlbiBhbG1vc3QgYWxsIHRoZSBzdGF0ZSBoYWQgYXNzZW1ibGVkIHRoZXJlLCBhbmQgaGUgd2FzIGluZm9ybWVkIHRoYXQgb25lCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciBoYWQgYmVlbiBkZWNsYXJlZCBtYWdpc3RyYXRlIGJ5IHRoZSBvdGhlciwgd2hlbiBvbmx5IGEgZmV3IHBlcnNvbnMgd2VyZQogICAgICAgICAgICAgICAgICAgIHByaXZhdGVseSBzdW1tb25lZCBmb3IgdGhlIHB1cnBvc2UsIGF0IGEgZGlmZmVyZW50IHRpbWUgYW5kIHBsYWNlIGZyb20gd2hhdCBoZQogICAgICAgICAgICAgICAgICAgIG91Z2h0LCB3aGVyZWFzIHRoZSBsYXdzIG5vdCBvbmx5IGZvcmJhZGUgdHdvIGJlbG9uZ2luZyB0byBvbmUgZmFtaWx5IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgZWxlY3RlZCBtYWdpc3RyYXRlcyB3aGlsZSBlYWNoIHdhcyBhbGl2ZSwgYnV0IGV2ZW4gZGV0ZXJyZWQgdGhlbSBmcm9tIGJlaW5nIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSwgaGUgY29tcGVsbGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q290dXM8L25hbWU+IHRvIHJlc2lnbiBoaXMgb2ZmaWNlOyBoZSBvcmRlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29udmljdG9saXRhbmlzPC9uYW1lPiwgd2hvIGhhZCBiZWVuIGVsZWN0ZWQgYnkgdGhlIHByaWVzdHMsIGFjY29yZGluZwogICAgICAgICAgICAgICAgICAgIHRvIHRoZSB1c2FnZSBvZiB0aGUgc3RhdGUsIGluIHRoZSBwcmVzZW5jZSBvZiB0aGUgbWFnaXN0cmF0ZXMsIHRvIGhvbGQgdGhlCiAgICAgICAgICAgICAgICAgICAgc3VwcmVtZSBhdXRob3JpdHkuIDwvdHJhbnNsYXRpb24+"
translation['7.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyBwcm9ub3VuY2VkIHRoaXMgZGVjcmVlIGJldHdlZW4gW3RoZSBjb250ZW5kaW5nIHBhcnRpZXNdLCBoZSBleGhvcnRlZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gdG8gYnVyeSBpbiBvYmxpdmlvbiB0aGVpciBkaXNwdXRlcyBhbmQgZGlzc2Vuc2lvbnMsIGFuZCwKICAgICAgICAgICAgICAgICAgICBsYXlpbmcgYXNpZGUgYWxsIHRoZXNlIHRoaW5ncywgZGV2b3RlIHRoZW1zZWx2ZXMgdG8gdGhlIHdhciwgYW5kIGV4cGVjdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgaGltLCBvbiB0aGUgY29ucXVlc3Qgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB0aG9zZSByZXdhcmRzIHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICBzaG91bGQgaGF2ZSBlYXJuZWQsIGFuZCBzZW5kIHNwZWVkaWx5IHRvIGhpbSBhbGwgdGhlaXIgY2F2YWxyeSBhbmQgdGVuIHRob3VzYW5kCiAgICAgICAgICAgICAgICAgICAgaW5mYW50cnksIHdoaWNoIGhlIG1pZ2h0IHBsYWNlIGluIGRpZmZlcmVudCBnYXJyaXNvbnMgdG8gcHJvdGVjdCBoaXMgY29udm95cyBvZgogICAgICAgICAgICAgICAgICAgIHByb3Zpc2lvbnMsIGFuZCB0aGVuIGRpdmlkZWQgaGlzIGFybXkgaW50byB0d28gcGFydHM6IGhlIGdhdmUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4gZm91ciBsZWdpb25zIHRvIGxlYWQgaW50byB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDM1Njk3IiByZWc9IiAgK1Nlbm9uZXMgWzYuOTgzLDQ4LjRdIChpbmhhYml0ZWQgcGxhY2UpLCBWb3NnZXMsIExvcnJhaW5lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5TZW5vbmVzIDwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODAzOCIgcmVnPSIgICtQYXJpcyBbMi4zMzMsNDguODY2XSAoaW5oYWJpdGVkIHBsYWNlKSwgRGVwYXJ0bWVudCBkZSBWaWxsZSBkZSBQYXJpcywgSWxlLWRlLUZyYW5jZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+UGFyaXNpaSA8L25hbWU+OyBhbmQgbGVkIGluIHBlcnNvbiBzaXggaW50byB0aGUgY291bnRyeSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pPC9uYW1lPiwgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgdG93biBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDIyMzIiIHJlZz0iICArR2VyZ292aWUgWzMuMTE2LDQ1LjcxNl0gKGRlc2VydGVkIHNldHRsZW1lbnQpLCBQdXktZGUtRG9tZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcmdvdmlhIDwvbmFtZT4sIGFsb25nIHRoZSBiYW5rcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyODY2IiByZWc9IiAgK0FsbGllciBbMy4zMyw0Ni40MTZdIChkZXBhcnRtZW50KSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkFsbGllcgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4uIEhlIGdhdmUgcGFydCBvZiB0aGUgY2F2YWxyeSB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICBrZXB0IHBhcnQgdG8gaGltc2VsZi4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiwgb24gbGVhcm5pbmcgdGhpcyBjaXJjdW1zdGFuY2UsCiAgICAgICAgICAgICAgICAgICAgYnJva2UgZG93biBhbGwgdGhlIGJyaWRnZXMgb3ZlciB0aGUgcml2ZXIgYW5kIGJlZ2FuIHRvIG1hcmNoIG9uIHRoZSBvdGhlciBiYW5rCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg2NiIgcmVnPSIgICtBbGxpZXIgWzMuMzMsNDYuNDE2XSAoZGVwYXJ0bWVudCksIEF1dmVyZ25lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BbGxpZXIKICAgICAgICAgICAgICAgICAgICA8L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gdG8gYnVyeSBpbiBvYmxpdmlvbiB0aGVpciBkaXNwdXRlcyBhbmQgZGlzc2Vuc2lvbnMsIGFuZCwKICAgICAgICAgICAgICAgICAgICBsYXlpbmcgYXNpZGUgYWxsIHRoZXNlIHRoaW5ncywgZGV2b3RlIHRoZW1zZWx2ZXMgdG8gdGhlIHdhciwgYW5kIGV4cGVjdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgaGltLCBvbiB0aGUgY29ucXVlc3Qgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB0aG9zZSByZXdhcmRzIHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICBzaG91bGQgaGF2ZSBlYXJuZWQsIGFuZCBzZW5kIHNwZWVkaWx5IHRvIGhpbSBhbGwgdGhlaXIgY2F2YWxyeSBhbmQgdGVuIHRob3VzYW5kCiAgICAgICAgICAgICAgICAgICAgaW5mYW50cnksIHdoaWNoIGhlIG1pZ2h0IHBsYWNlIGluIGRpZmZlcmVudCBnYXJyaXNvbnMgdG8gcHJvdGVjdCBoaXMgY29udm95cyBvZgogICAgICAgICAgICAgICAgICAgIHByb3Zpc2lvbnMsIGFuZCB0aGVuIGRpdmlkZWQgaGlzIGFybXkgaW50byB0d28gcGFydHM6IGhlIGdhdmUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4gZm91ciBsZWdpb25zIHRvIGxlYWQgaW50byB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDM1Njk3IiByZWc9IiAgK1Nlbm9uZXMgWzYuOTgzLDQ4LjRdIChpbmhhYml0ZWQgcGxhY2UpLCBWb3NnZXMsIExvcnJhaW5lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5TZW5vbmVzIDwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODAzOCIgcmVnPSIgICtQYXJpcyBbMi4zMzMsNDguODY2XSAoaW5oYWJpdGVkIHBsYWNlKSwgRGVwYXJ0bWVudCBkZSBWaWxsZSBkZSBQYXJpcywgSWxlLWRlLUZyYW5jZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+UGFyaXNpaSA8L25hbWU+OyBhbmQgbGVkIGluIHBlcnNvbiBzaXggaW50byB0aGUgY291bnRyeSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pPC9uYW1lPiwgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgdG93biBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDIyMzIiIHJlZz0iICArR2VyZ292aWUgWzMuMTE2LDQ1LjcxNl0gKGRlc2VydGVkIHNldHRsZW1lbnQpLCBQdXktZGUtRG9tZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcmdvdmlhIDwvbmFtZT4sIGFsb25nIHRoZSBiYW5rcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyODY2IiByZWc9IiAgK0FsbGllciBbMy4zMyw0Ni40MTZdIChkZXBhcnRtZW50KSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkFsbGllcgogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4uIEhlIGdhdmUgcGFydCBvZiB0aGUgY2F2YWxyeSB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICBrZXB0IHBhcnQgdG8gaGltc2VsZi4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiwgb24gbGVhcm5pbmcgdGhpcyBjaXJjdW1zdGFuY2UsCiAgICAgICAgICAgICAgICAgICAgYnJva2UgZG93biBhbGwgdGhlIGJyaWRnZXMgb3ZlciB0aGUgcml2ZXIgYW5kIGJlZ2FuIHRvIG1hcmNoIG9uIHRoZSBvdGhlciBiYW5rCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjg2NiIgcmVnPSIgICtBbGxpZXIgWzMuMzMsNDYuNDE2XSAoZGVwYXJ0bWVudCksIEF1dmVyZ25lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BbGxpZXIKICAgICAgICAgICAgICAgICAgICA8L25hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['7.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gZWFjaCBhcm15IHdhcyBpbiBzaWdodCBvZiB0aGUgb3RoZXIsIGFuZCB3YXMgcGl0Y2hpbmcgdGhlaXIgY2FtcCBhbG1vc3QKICAgICAgICAgICAgICAgICAgICBvcHBvc2l0ZSB0aGF0IG9mIHRoZSBlbmVteSwgc2NvdXRzIGJlaW5nIGRpc3RyaWJ1dGVkIGluIGV2ZXJ5IHF1YXJ0ZXIsIGxlc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHNob3VsZCBidWlsZCBhIGJyaWRnZSBhbmQgYnJpbmcgb3ZlciB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRyb29wczsgaXQgd2FzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhIG1hdHRlciBhdHRlbmRlZCB3aXRoIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0aWVzLCBsZXN0IGhlIHNob3VsZCBiZSBoaW5kZXJlZCBmcm9tIHBhc3NpbmcgdGhlIHJpdmVyIGR1cmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBncmVhdGVyIHBhcnQgb2YgdGhlIHN1bW1lciwgYXMgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyMTExNiIgcmVnPSJBbGxpZXIgWzMuNjE2LDQ1LjgzXSAocml2ZXIpLCBIYXV0ZS1Mb2lyZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QWxsaWVyPC9uYW1lPiBjYW4gbm90IGdlbmVyYWxseSBiZSBmb3JkZWQgYmVmb3JlIHRoZSBhdXR1bW4uIFRoZXJlZm9yZSwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgbWlnaHQgbm90IGhhcHBlbiwgaGF2aW5nIHBpdGNoZWQgaGlzIGNhbXAgaW4gYSB3b29keSBwbGFjZSBvcHBvc2l0ZSB0bwogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aG9zZSBicmlkZ2VzIHdoaWNoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gaGFkIHRha2VuIGNhcmUgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgYnJva2VuIGRvd24sIHRoZSBuZXh0IGRheSBoZSBzdG9wcGVkIGJlaGluZCB3aXRoIHR3byBsZWdpb25zIGluIGEgc2VjcmV0IHBsYWNlOwogICAgICAgICAgICAgICAgICAgIGhlIHNlbnQgb24gdGhlIHJlc3Qgb2YgdGhlIGZvcmNlcyBhcyB1c3VhbCwgd2l0aCBhbGwgdGhlIGJhZ2dhZ2UsIGFmdGVyIGhhdmluZwogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkIHNvbWUgY29ob3J0cywgdGhhdCB0aGUgbnVtYmVyIG9mIHRoZSBsZWdpb25zIG1pZ2h0IGFwcGVhciB0byBiZQogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlLiBIYXZpbmcgb3JkZXJlZCB0aGVzZSB0byBhZHZhbmNlIGFzIGZhciBhcyB0aGV5IGNvdWxkLCB3aGVuIG5vdywgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSB0aW1lIG9mIGRheSwgaGUgY29uamVjdHVyZWQgdGhleSBoYWQgY29tZSB0byBhbiBlbmNhbXBtZW50LCBoZSBiZWdhbiB0bwogICAgICAgICAgICAgICAgICAgIHJlYnVpbGQgdGhlIGJyaWRnZSBvbiB0aGUgc2FtZSBwaWxlcywgdGhlIGxvd2VyIHBhcnQgb2Ygd2hpY2ggcmVtYWluZWQgZW50aXJlLgogICAgICAgICAgICAgICAgICAgIEhhdmluZyBxdWlja2x5IGZpbmlzaGVkIHRoZSB3b3JrIGFuZCBsZWQgaGlzIGxlZ2lvbnMgYWNyb3NzLCBoZSBzZWxlY3RlZCBhIGZpdAogICAgICAgICAgICAgICAgICAgIHBsYWNlIGZvciBhIGNhbXAsIGFuZCByZWNhbGxlZCB0aGUgcmVzdCBvZiBoaXMgdHJvb3BzLgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+LCBvbiBhc2NlcnRhaW5pbmcgdGhpcyBmYWN0LCB3ZW50IGJlZm9yZSBoaW0gYnkKICAgICAgICAgICAgICAgICAgICBmb3JjZWQgbWFyY2hlcywgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBub3QgYmUgY29tcGVsbGVkIHRvIGNvbWUgdG8gYW4gYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBoaXMgd2lsbC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHNob3VsZCBidWlsZCBhIGJyaWRnZSBhbmQgYnJpbmcgb3ZlciB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRyb29wczsgaXQgd2FzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhIG1hdHRlciBhdHRlbmRlZCB3aXRoIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0aWVzLCBsZXN0IGhlIHNob3VsZCBiZSBoaW5kZXJlZCBmcm9tIHBhc3NpbmcgdGhlIHJpdmVyIGR1cmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBncmVhdGVyIHBhcnQgb2YgdGhlIHN1bW1lciwgYXMgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyMTExNiIgcmVnPSJBbGxpZXIgWzMuNjE2LDQ1LjgzXSAocml2ZXIpLCBIYXV0ZS1Mb2lyZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QWxsaWVyPC9uYW1lPiBjYW4gbm90IGdlbmVyYWxseSBiZSBmb3JkZWQgYmVmb3JlIHRoZSBhdXR1bW4uIFRoZXJlZm9yZSwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgbWlnaHQgbm90IGhhcHBlbiwgaGF2aW5nIHBpdGNoZWQgaGlzIGNhbXAgaW4gYSB3b29keSBwbGFjZSBvcHBvc2l0ZSB0bwogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aG9zZSBicmlkZ2VzIHdoaWNoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gaGFkIHRha2VuIGNhcmUgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgYnJva2VuIGRvd24sIHRoZSBuZXh0IGRheSBoZSBzdG9wcGVkIGJlaGluZCB3aXRoIHR3byBsZWdpb25zIGluIGEgc2VjcmV0IHBsYWNlOwogICAgICAgICAgICAgICAgICAgIGhlIHNlbnQgb24gdGhlIHJlc3Qgb2YgdGhlIGZvcmNlcyBhcyB1c3VhbCwgd2l0aCBhbGwgdGhlIGJhZ2dhZ2UsIGFmdGVyIGhhdmluZwogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkIHNvbWUgY29ob3J0cywgdGhhdCB0aGUgbnVtYmVyIG9mIHRoZSBsZWdpb25zIG1pZ2h0IGFwcGVhciB0byBiZQogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlLiBIYXZpbmcgb3JkZXJlZCB0aGVzZSB0byBhZHZhbmNlIGFzIGZhciBhcyB0aGV5IGNvdWxkLCB3aGVuIG5vdywgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSB0aW1lIG9mIGRheSwgaGUgY29uamVjdHVyZWQgdGhleSBoYWQgY29tZSB0byBhbiBlbmNhbXBtZW50LCBoZSBiZWdhbiB0bwogICAgICAgICAgICAgICAgICAgIHJlYnVpbGQgdGhlIGJyaWRnZSBvbiB0aGUgc2FtZSBwaWxlcywgdGhlIGxvd2VyIHBhcnQgb2Ygd2hpY2ggcmVtYWluZWQgZW50aXJlLgogICAgICAgICAgICAgICAgICAgIEhhdmluZyBxdWlja2x5IGZpbmlzaGVkIHRoZSB3b3JrIGFuZCBsZWQgaGlzIGxlZ2lvbnMgYWNyb3NzLCBoZSBzZWxlY3RlZCBhIGZpdAogICAgICAgICAgICAgICAgICAgIHBsYWNlIGZvciBhIGNhbXAsIGFuZCByZWNhbGxlZCB0aGUgcmVzdCBvZiBoaXMgdHJvb3BzLgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+LCBvbiBhc2NlcnRhaW5pbmcgdGhpcyBmYWN0LCB3ZW50IGJlZm9yZSBoaW0gYnkKICAgICAgICAgICAgICAgICAgICBmb3JjZWQgbWFyY2hlcywgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBub3QgYmUgY29tcGVsbGVkIHRvIGNvbWUgdG8gYW4gYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBoaXMgd2lsbC4gPC90cmFuc2xhdGlvbj4="
translation['7.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaW4gZml2ZSBkYXlzJyBtYXJjaCwgd2VudCBmcm9tIHRoYXQgcGxhY2UgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAyMjMyIiByZWc9IiAgK0dlcmdvdmllIFszLjExNiw0NS43MTZdIChkZXNlcnRlZCBzZXR0bGVtZW50KSwgUHV5LWRlLURvbWUsIEF1dmVyZ25lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZXJnb3ZpYSA8L25hbWU+LCBhbmQgYWZ0ZXIgZW5nYWdpbmcgaW4gYSBzbGlnaHQgY2F2YWxyeSBza2lybWlzaCB0aGF0IGRheSwKICAgICAgICAgICAgICAgICAgICBvbiB2aWV3aW5nIHRoZSBzaXR1YXRpb24gb2YgdGhlIGNpdHksIHdoaWNoLCBiZWluZyBidWlsdCBvbiBhIHZlcnkgaGlnaAogICAgICAgICAgICAgICAgICAgIG1vdW50YWluLCB3YXMgdmVyeSBkaWZmaWN1bHQgb2YgYWNjZXNzLCBoZSBkZXNwYWlyZWQgb2YgdGFraW5nIGl0IGJ5IHN0b3JtLCBhbmQKICAgICAgICAgICAgICAgICAgICBkZXRlcm1pbmVkIHRvIHRha2Ugbm8gbWVhc3VyZXMgd2l0aCByZWdhcmQgdG8gYmVzaWVnaW5nIGl0IGJlZm9yZSBoZSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBzZWN1cmUgYSBzdXBwbHkgb2YgcHJvdmlzaW9ucy4gQnV0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4sIGhhdmluZyBwaXRjaGVkCiAgICAgICAgICAgICAgICAgICAgaGlzIGNhbXAgb24gdGhlIG1vdW50YWluIG5lYXIgdGhlIHRvd24sIHBsYWNlZCB0aGUgZm9yY2VzIG9mIGVhY2ggc3RhdGUKICAgICAgICAgICAgICAgICAgICBzZXBhcmF0ZWx5IGFuZCBhdCBzbWFsbCBpbnRlcnZhbHMgYXJvdW5kIGhpbXNlbGYsIGFuZCBoYXZpbmcgb2NjdXBpZWQgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGhpbGxzIG9mIHRoYXQgcmFuZ2UgYXMgZmFyIGFzIHRoZXkgY29tbWFuZGVkIGEgdmlldyBbb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gZW5jYW1wbWVudF0sIGhlIHByZXNlbnRlZCBhIGZvcm1pZGFibGUgYXBwZWFyYW5jZTsgaGUgb3JkZXJlZAogICAgICAgICAgICAgICAgICAgIHRoZSBydWxlcnMgb2YgdGhlIHN0YXRlcywgd2hvbSBoZSBoYWQgc2VsZWN0ZWQgYXMgaGlzIGNvdW5jaWwgb2Ygd2FyLCB0byBjb21lIHRvCiAgICAgICAgICAgICAgICAgICAgaGltIGRhaWx5IGF0IHRoZSBkYXduLCB3aGV0aGVyIGFueSBtZWFzdXJlIHNlZW1lZCB0byByZXF1aXJlIGRlbGliZXJhdGlvbiBvcgogICAgICAgICAgICAgICAgICAgIGV4ZWN1dGlvbi4gTm9yIGRpZCBoZSBhbGxvdyBhbG1vc3QgYW55IGRheSB0byBwYXNzIHdpdGhvdXQgdGVzdGluZyBpbiBhIGNhdmFscnkKICAgICAgICAgICAgICAgICAgICBhY3Rpb24sIHRoZSBhcmNoZXJzIGJlaW5nIGludGVybWl4ZWQsIHdoYXQgc3Bpcml0IGFuZCB2YWxvciB0aGVyZSB3YXMgaW4gZWFjaCBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gbWVuLiBUaGVyZSB3YXMgYSBoaWxsIG9wcG9zaXRlIHRoZSB0b3duLCBhdCB0aGUgdmVyeSBmb290IG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBtb3VudGFpbiwgc3Ryb25nbHkgZm9ydGlmaWVkIGFuZCBwcmVjaXBpdG91cyBvbiBldmVyeSBzaWRlICh3aGljaCBpZiBvdXIgbWVuCiAgICAgICAgICAgICAgICAgICAgY291bGQgZ2FpbiwgdGhleSBzZWVtZWQgbGlrZWx5IHRvIGV4Y2x1ZGUgdGhlIGVuZW15IGZyb20gYSBncmVhdCBzaGFyZSBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHN1cHBseSBvZiB3YXRlciwgYW5kIGZyb20gZnJlZSBmb3JhZ2luZzsgYnV0IHRoaXMgcGxhY2Ugd2FzIG9jY3VwaWVkIGJ5IHRoZW0KICAgICAgICAgICAgICAgICAgICB3aXRoIGEgd2VhayBnYXJyaXNvbik6IGhvd2V2ZXIsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBzZXQgb3V0IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgY2FtcCBpbiB0aGUgc2lsZW5jZSBvZiBuaWdodCwgYW5kIGRpc2xvZGdpbmcgdGhlIGdhcnJpc29uIGJlZm9yZSBzdWNjb3IgY291bGQKICAgICAgICAgICAgICAgICAgICBjb21lIGZyb20gdGhlIHRvd24sIGhlIGdvdCBwb3NzZXNzaW9uIG9mIHRoZSBwbGFjZSBhbmQgcG9zdGVkIHR3byBsZWdpb25zIHRoZXJlLAogICAgICAgICAgICAgICAgICAgIGFuZCBkcmV3IGZyb20gdGhlIGdyZWF0ZXIgY2FtcCB0byB0aGUgbGVzcyBhIGRvdWJsZSB0cmVuY2ggdHdlbHZlIGZlZXQgYnJvYWQsIHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgc29sZGllcnMgY291bGQgZXZlbiBzaW5nbHkgcGFzcyBzZWN1cmUgZnJvbSBhbnkgc3VkZGVuIGF0dGFjayBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaW4gZml2ZSBkYXlzJyBtYXJjaCwgd2VudCBmcm9tIHRoYXQgcGxhY2UgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAyMjMyIiByZWc9IiAgK0dlcmdvdmllIFszLjExNiw0NS43MTZdIChkZXNlcnRlZCBzZXR0bGVtZW50KSwgUHV5LWRlLURvbWUsIEF1dmVyZ25lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZXJnb3ZpYSA8L25hbWU+LCBhbmQgYWZ0ZXIgZW5nYWdpbmcgaW4gYSBzbGlnaHQgY2F2YWxyeSBza2lybWlzaCB0aGF0IGRheSwKICAgICAgICAgICAgICAgICAgICBvbiB2aWV3aW5nIHRoZSBzaXR1YXRpb24gb2YgdGhlIGNpdHksIHdoaWNoLCBiZWluZyBidWlsdCBvbiBhIHZlcnkgaGlnaAogICAgICAgICAgICAgICAgICAgIG1vdW50YWluLCB3YXMgdmVyeSBkaWZmaWN1bHQgb2YgYWNjZXNzLCBoZSBkZXNwYWlyZWQgb2YgdGFraW5nIGl0IGJ5IHN0b3JtLCBhbmQKICAgICAgICAgICAgICAgICAgICBkZXRlcm1pbmVkIHRvIHRha2Ugbm8gbWVhc3VyZXMgd2l0aCByZWdhcmQgdG8gYmVzaWVnaW5nIGl0IGJlZm9yZSBoZSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBzZWN1cmUgYSBzdXBwbHkgb2YgcHJvdmlzaW9ucy4gQnV0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4sIGhhdmluZyBwaXRjaGVkCiAgICAgICAgICAgICAgICAgICAgaGlzIGNhbXAgb24gdGhlIG1vdW50YWluIG5lYXIgdGhlIHRvd24sIHBsYWNlZCB0aGUgZm9yY2VzIG9mIGVhY2ggc3RhdGUKICAgICAgICAgICAgICAgICAgICBzZXBhcmF0ZWx5IGFuZCBhdCBzbWFsbCBpbnRlcnZhbHMgYXJvdW5kIGhpbXNlbGYsIGFuZCBoYXZpbmcgb2NjdXBpZWQgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGhpbGxzIG9mIHRoYXQgcmFuZ2UgYXMgZmFyIGFzIHRoZXkgY29tbWFuZGVkIGEgdmlldyBbb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gZW5jYW1wbWVudF0sIGhlIHByZXNlbnRlZCBhIGZvcm1pZGFibGUgYXBwZWFyYW5jZTsgaGUgb3JkZXJlZAogICAgICAgICAgICAgICAgICAgIHRoZSBydWxlcnMgb2YgdGhlIHN0YXRlcywgd2hvbSBoZSBoYWQgc2VsZWN0ZWQgYXMgaGlzIGNvdW5jaWwgb2Ygd2FyLCB0byBjb21lIHRvCiAgICAgICAgICAgICAgICAgICAgaGltIGRhaWx5IGF0IHRoZSBkYXduLCB3aGV0aGVyIGFueSBtZWFzdXJlIHNlZW1lZCB0byByZXF1aXJlIGRlbGliZXJhdGlvbiBvcgogICAgICAgICAgICAgICAgICAgIGV4ZWN1dGlvbi4gTm9yIGRpZCBoZSBhbGxvdyBhbG1vc3QgYW55IGRheSB0byBwYXNzIHdpdGhvdXQgdGVzdGluZyBpbiBhIGNhdmFscnkKICAgICAgICAgICAgICAgICAgICBhY3Rpb24sIHRoZSBhcmNoZXJzIGJlaW5nIGludGVybWl4ZWQsIHdoYXQgc3Bpcml0IGFuZCB2YWxvciB0aGVyZSB3YXMgaW4gZWFjaCBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gbWVuLiBUaGVyZSB3YXMgYSBoaWxsIG9wcG9zaXRlIHRoZSB0b3duLCBhdCB0aGUgdmVyeSBmb290IG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBtb3VudGFpbiwgc3Ryb25nbHkgZm9ydGlmaWVkIGFuZCBwcmVjaXBpdG91cyBvbiBldmVyeSBzaWRlICh3aGljaCBpZiBvdXIgbWVuCiAgICAgICAgICAgICAgICAgICAgY291bGQgZ2FpbiwgdGhleSBzZWVtZWQgbGlrZWx5IHRvIGV4Y2x1ZGUgdGhlIGVuZW15IGZyb20gYSBncmVhdCBzaGFyZSBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHN1cHBseSBvZiB3YXRlciwgYW5kIGZyb20gZnJlZSBmb3JhZ2luZzsgYnV0IHRoaXMgcGxhY2Ugd2FzIG9jY3VwaWVkIGJ5IHRoZW0KICAgICAgICAgICAgICAgICAgICB3aXRoIGEgd2VhayBnYXJyaXNvbik6IGhvd2V2ZXIsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBzZXQgb3V0IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgY2FtcCBpbiB0aGUgc2lsZW5jZSBvZiBuaWdodCwgYW5kIGRpc2xvZGdpbmcgdGhlIGdhcnJpc29uIGJlZm9yZSBzdWNjb3IgY291bGQKICAgICAgICAgICAgICAgICAgICBjb21lIGZyb20gdGhlIHRvd24sIGhlIGdvdCBwb3NzZXNzaW9uIG9mIHRoZSBwbGFjZSBhbmQgcG9zdGVkIHR3byBsZWdpb25zIHRoZXJlLAogICAgICAgICAgICAgICAgICAgIGFuZCBkcmV3IGZyb20gdGhlIGdyZWF0ZXIgY2FtcCB0byB0aGUgbGVzcyBhIGRvdWJsZSB0cmVuY2ggdHdlbHZlIGZlZXQgYnJvYWQsIHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgc29sZGllcnMgY291bGQgZXZlbiBzaW5nbHkgcGFzcyBzZWN1cmUgZnJvbSBhbnkgc3VkZGVuIGF0dGFjayBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteS4gPC90cmFuc2xhdGlvbj4="
translation['7.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIHRoZXNlIGFmZmFpcnMgd2VyZSBnb2luZyBvbiBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDIyMzIiIHJlZz0iICArR2VyZ292aWUgWzMuMTE2LDQ1LjcxNl0gKGRlc2VydGVkIHNldHRsZW1lbnQpLCBQdXktZGUtRG9tZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcmdvdmlhIDwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29udmljdG9sYW5pczwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVhbjwvbmFtZT4sIHRvCiAgICAgICAgICAgICAgICAgICAgd2hvbSB3ZSBoYXZlIG9ic2VydmVkIHRoZSBtYWdpc3RyYWN5IHdhcyBhZGp1ZGdlZCBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGJlaW5nIGJyaWJlZCBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pPC9uYW1lPiwgaG9sZHMgYSBjb25mZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgd2l0aCBjZXJ0YWluIHlvdW5nIG1lbiwgdGhlIGNoaWVmIG9mIHdob20gd2VyZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxpdGF2aWN1czwvbmFtZT4gYW5kIGhpcwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXJzLCB3aG8gd2VyZSBib3JuIG9mIGEgbW9zdCBub2JsZSBmYW1pbHkuIEhlIHNoYXJlcyB0aGUgYnJpYmUgd2l0aCB0aGVtLAogICAgICAgICAgICAgICAgICAgIGFuZCBleGhvcnRzIHRoZW0gdG8gInJlbWVtYmVyIHRoYXQgdGhleSB3ZXJlIGZyZWUgYW5kIGJvcm4gZm9yIGVtcGlyZTsgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gd2FzIHRoZSBvbmx5IG9uZSB3aGljaCByZXRhcmRlZCB0aGUgbW9zdCBjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgdmljdG9yeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPjsgdGhhdCB0aGUgcmVzdCB3ZXJlIGhlbGQgaW4KICAgICAgICAgICAgICAgICAgICBjaGVjayBieSBpdHMgYXV0aG9yaXR5OyBhbmQsIGlmIGl0IHdhcyBicm91Z2h0IG92ZXIsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiB3b3VsZCBub3QgaGF2ZSByb29tIHRvIHN0YW5kIG9uIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPjsgdGhhdCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCBzb21lIGtpbmRuZXNzIGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBvbmx5IHNvIGZhciwKICAgICAgICAgICAgICAgICAgICBob3dldmVyLCBhcyBnYWluaW5nIGEgbW9zdCBqdXN0IGNhdXNlIGJ5IGhpcyBkZWNpc2lvbjsgYnV0IHRoYXQgaGUgYXNzaWduZWQgbW9yZQogICAgICAgICAgICAgICAgICAgIHdlaWdodCB0byB0aGUgZ2VuZXJhbCBmcmVlZG9tOyBmb3IsIHdoeSBzaG91bGQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IGdvIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB0byBkZWNpZGUgY29uY2VybmluZyB0aGVpciByaWdodHMgYW5kIGxhd3MsCiAgICAgICAgICAgICAgICAgICAgcmF0aGVyIHRoYW4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGNvbWUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4/IiBUaGUgeW91bmcgbWVuIGJlaW5nIGVhc2lseSB3b24gb3ZlciBieSB0aGUgc3BlZWNoIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG1hZ2lzdHJhdGUgYW5kIHRoZSBicmliZSwgd2hlbiB0aGV5IGRlY2xhcmVkIHRoYXQgdGhleSB3b3VsZCBldmVuIGJlIGxlYWRlcnMgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgcGxvdCwgYSBwbGFuIGZvciBhY2NvbXBsaXNoaW5nIGl0IHdhcyBjb25zaWRlcmVkLCBiZWNhdXNlIHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgIGNvbmZpZGVudCB0aGVpciBzdGF0ZSBjb3VsZCBub3QgYmUgaW5kdWNlZCB0byB1bmRlcnRha2UgdGhlIHdhciBvbiBzbGlnaHQKICAgICAgICAgICAgICAgICAgICBncm91bmRzLiBJdCB3YXMgcmVzb2x2ZWQgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxpdGF2aWN1czwvbmFtZT4gc2hvdWxkIGhhdmUgdGhlIGNvbW1hbmQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgdGVuIHRob3VzYW5kLCB3aGljaCB3ZXJlIGJlaW5nIHNlbnQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSB3YXIsIGFuZCBzaG91bGQgaGF2ZSBjaGFyZ2Ugb2YgdGhlbSBvbiB0aGVpciBtYXJjaCwgYW5kIHRoYXQgaGlzIGJyb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGdvIGJlZm9yZSBoaW0gdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LiBUaGV5IGFycmFuZ2UgdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZXMsIGFuZCB0aGUgbWFubmVyIGluIHdoaWNoIHRoZXkgc2hvdWxkIGhhdmUgdGhlbSBkb25lLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAyMjMyIiByZWc9IiAgK0dlcmdvdmllIFszLjExNiw0NS43MTZdIChkZXNlcnRlZCBzZXR0bGVtZW50KSwgUHV5LWRlLURvbWUsIEF1dmVyZ25lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZXJnb3ZpYSA8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbnZpY3RvbGFuaXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+LCB0bwogICAgICAgICAgICAgICAgICAgIHdob20gd2UgaGF2ZSBvYnNlcnZlZCB0aGUgbWFnaXN0cmFjeSB3YXMgYWRqdWRnZWQgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBiZWluZyBicmliZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4sIGhvbGRzIGEgY29uZmVyZW5jZQogICAgICAgICAgICAgICAgICAgIHdpdGggY2VydGFpbiB5b3VuZyBtZW4sIHRoZSBjaGllZiBvZiB3aG9tIHdlcmUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXRhdmljdXM8L25hbWU+IGFuZCBoaXMKICAgICAgICAgICAgICAgICAgICBicm90aGVycywgd2hvIHdlcmUgYm9ybiBvZiBhIG1vc3Qgbm9ibGUgZmFtaWx5LiBIZSBzaGFyZXMgdGhlIGJyaWJlIHdpdGggdGhlbSwKICAgICAgICAgICAgICAgICAgICBhbmQgZXhob3J0cyB0aGVtIHRvICJyZW1lbWJlciB0aGF0IHRoZXkgd2VyZSBmcmVlIGFuZCBib3JuIGZvciBlbXBpcmU7IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhdGUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IHdhcyB0aGUgb25seSBvbmUgd2hpY2ggcmV0YXJkZWQgdGhlIG1vc3QgY2VydGFpbgogICAgICAgICAgICAgICAgICAgIHZpY3Rvcnkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT47IHRoYXQgdGhlIHJlc3Qgd2VyZSBoZWxkIGluCiAgICAgICAgICAgICAgICAgICAgY2hlY2sgYnkgaXRzIGF1dGhvcml0eTsgYW5kLCBpZiBpdCB3YXMgYnJvdWdodCBvdmVyLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gd291bGQgbm90IGhhdmUgcm9vbSB0byBzdGFuZCBvbiBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT47IHRoYXQgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgc29tZSBraW5kbmVzcyBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb25seSBzbyBmYXIsCiAgICAgICAgICAgICAgICAgICAgaG93ZXZlciwgYXMgZ2FpbmluZyBhIG1vc3QganVzdCBjYXVzZSBieSBoaXMgZGVjaXNpb247IGJ1dCB0aGF0IGhlIGFzc2lnbmVkIG1vcmUKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQgdG8gdGhlIGdlbmVyYWwgZnJlZWRvbTsgZm9yLCB3aHkgc2hvdWxkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBnbyB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gdG8gZGVjaWRlIGNvbmNlcm5pbmcgdGhlaXIgcmlnaHRzIGFuZCBsYXdzLAogICAgICAgICAgICAgICAgICAgIHJhdGhlciB0aGFuIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiBjb21lIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+PyIgVGhlIHlvdW5nIG1lbiBiZWluZyBlYXNpbHkgd29uIG92ZXIgYnkgdGhlIHNwZWVjaCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBtYWdpc3RyYXRlIGFuZCB0aGUgYnJpYmUsIHdoZW4gdGhleSBkZWNsYXJlZCB0aGF0IHRoZXkgd291bGQgZXZlbiBiZSBsZWFkZXJzIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHBsb3QsIGEgcGxhbiBmb3IgYWNjb21wbGlzaGluZyBpdCB3YXMgY29uc2lkZXJlZCwgYmVjYXVzZSB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBjb25maWRlbnQgdGhlaXIgc3RhdGUgY291bGQgbm90IGJlIGluZHVjZWQgdG8gdW5kZXJ0YWtlIHRoZSB3YXIgb24gc2xpZ2h0CiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kcy4gSXQgd2FzIHJlc29sdmVkIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXRhdmljdXM8L25hbWU+IHNob3VsZCBoYXZlIHRoZSBjb21tYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlbiB0aG91c2FuZCwgd2hpY2ggd2VyZSBiZWluZyBzZW50IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgd2FyLCBhbmQgc2hvdWxkIGhhdmUgY2hhcmdlIG9mIHRoZW0gb24gdGhlaXIgbWFyY2gsIGFuZCB0aGF0IGhpcyBicm90aGVycwogICAgICAgICAgICAgICAgICAgIHNob3VsZCBnbyBiZWZvcmUgaGltIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPi4gVGhleSBhcnJhbmdlIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIG1lYXN1cmVzLCBhbmQgdGhlIG1hbm5lciBpbiB3aGljaCB0aGV5IHNob3VsZCBoYXZlIHRoZW0gZG9uZS4gPC90cmFuc2xhdGlvbj4="
translation['7.38'] = ""
translation['7.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBvcmVkaXJpeDwvbmFtZT4sIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVhbjwvbmFtZT4gLCBhIHlvdW5nIG1hbiBib3JuIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGhpZ2hlc3QgcmFuayBhbmQgcG9zc2Vzc2luZyB2ZXJ5IGdyZWF0IGluZmx1ZW5jZSBhdCBob21lLCBhbmQsIGFsb25nIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WaXJpZG9tYXJ1czwvbmFtZT4sIG9mIGVxdWFsIGFnZSBhbmQgaW5mbHVlbmNlLCBidXQgb2YgaW5mZXJpb3IgYmlydGgsCiAgICAgICAgICAgICAgICAgICAgd2hvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIHJhaXNlZCBmcm9tIGEgaHVtYmxlIHBvc2l0aW9uIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGhpZ2hlc3QgcmFuaywgb24gYmVpbmcgcmVjb21tZW5kZWQgdG8gaGltIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2aXRpYWN1czwvbmFtZT4sIGhhZCBjb21lCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIG51bWJlciBvZiBob3JzZSwgYmVpbmcgc3VtbW9uZWQgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGJ5CiAgICAgICAgICAgICAgICAgICAgbmFtZS4gVGhlc2UgaGFkIGEgZGlzcHV0ZSB3aXRoIGVhY2ggb3RoZXIgZm9yIHByZWNlZGVuY2UsIGFuZCBpbiB0aGUgc3RydWdnbGUKICAgICAgICAgICAgICAgICAgICBiZXR3ZWVuIHRoZSBtYWdpc3RyYXRlcyB0aGV5IGhhZCBjb250ZW5kZWQgd2l0aCB0aGVpciB1dG1vc3QgZWZmb3J0cywgdGhlIG9uZQogICAgICAgICAgICAgICAgICAgIGZvciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbnZpY3RvbGl0YW5pczwvbmFtZT4sIHRoZSBvdGhlciBmb3IgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3R1czwvbmFtZT4uIE9mIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBvcmVkaXJpeDwvbmFtZT4sIG9uIGxlYXJuaW5nIHRoZSBkZXNpZ24gb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXRhdmljdXM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGxheXMgdGhlIG1hdHRlciBiZWZvcmUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGFsbW9zdCBhdCBtaWRuaWdodDsgaGUKICAgICAgICAgICAgICAgICAgICBlbnRyZWF0cyB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBzaG91bGQgbm90IHN1ZmZlciB0aGVpciBzdGF0ZSB0bwogICAgICAgICAgICAgICAgICAgIHN3ZXJ2ZSBmcm9tIHRoZSBhbGxpYW5jZSB3aXRoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgb3dpbmcKICAgICAgICAgICAgICAgICAgICB0byB0aGUgZGVwcmF2ZWQgY291bnNlbHMgb2YgYSBmZXcgeW91bmcgbWVuIHdoaWNoIGhlIGZvcmVzYXcgd291bGQgYmUgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc2VxdWVuY2UgaWYgc28gbWFueSB0aG91c2FuZCBtZW4gc2hvdWxkIHVuaXRlIHRoZW1zZWx2ZXMgdG8gdGhlIGVuZW15LCBhcwogICAgICAgICAgICAgICAgICAgIHRoZWlyIHJlbGF0aW9ucyBjb3VsZCBub3QgbmVnbGVjdCB0aGVpciBzYWZldHksIG5vciB0aGUgc3RhdGUgcmVnYXJkIGl0IGFzIGEKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIgb2Ygc2xpZ2h0IGltcG9ydGFuY2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwb3JlZGlyaXg8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+ICwgYSB5b3VuZyBtYW4gYm9ybiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBoaWdoZXN0IHJhbmsgYW5kIHBvc3Nlc3NpbmcgdmVyeSBncmVhdCBpbmZsdWVuY2UgYXQgaG9tZSwgYW5kLCBhbG9uZyB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmlyaWRvbWFydXM8L25hbWU+LCBvZiBlcXVhbCBhZ2UgYW5kIGluZmx1ZW5jZSwgYnV0IG9mIGluZmVyaW9yIGJpcnRoLAogICAgICAgICAgICAgICAgICAgIHdob20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCByYWlzZWQgZnJvbSBhIGh1bWJsZSBwb3NpdGlvbiB0byB0aGUKICAgICAgICAgICAgICAgICAgICBoaWdoZXN0IHJhbmssIG9uIGJlaW5nIHJlY29tbWVuZGVkIHRvIGhpbSBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdml0aWFjdXM8L25hbWU+LCBoYWQgY29tZQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBudW1iZXIgb2YgaG9yc2UsIGJlaW5nIHN1bW1vbmVkIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBieQogICAgICAgICAgICAgICAgICAgIG5hbWUuIFRoZXNlIGhhZCBhIGRpc3B1dGUgd2l0aCBlYWNoIG90aGVyIGZvciBwcmVjZWRlbmNlLCBhbmQgaW4gdGhlIHN0cnVnZ2xlCiAgICAgICAgICAgICAgICAgICAgYmV0d2VlbiB0aGUgbWFnaXN0cmF0ZXMgdGhleSBoYWQgY29udGVuZGVkIHdpdGggdGhlaXIgdXRtb3N0IGVmZm9ydHMsIHRoZSBvbmUKICAgICAgICAgICAgICAgICAgICBmb3IgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db252aWN0b2xpdGFuaXM8L25hbWU+LCB0aGUgb3RoZXIgZm9yIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q290dXM8L25hbWU+LiBPZiB0aGVzZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwb3JlZGlyaXg8L25hbWU+LCBvbiBsZWFybmluZyB0aGUgZGVzaWduIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGl0YXZpY3VzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBsYXlzIHRoZSBtYXR0ZXIgYmVmb3JlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhbG1vc3QgYXQgbWlkbmlnaHQ7IGhlCiAgICAgICAgICAgICAgICAgICAgZW50cmVhdHMgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gc2hvdWxkIG5vdCBzdWZmZXIgdGhlaXIgc3RhdGUgdG8KICAgICAgICAgICAgICAgICAgICBzd2VydmUgZnJvbSB0aGUgYWxsaWFuY2Ugd2l0aCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIG93aW5nCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGRlcHJhdmVkIGNvdW5zZWxzIG9mIGEgZmV3IHlvdW5nIG1lbiB3aGljaCBoZSBmb3Jlc2F3IHdvdWxkIGJlIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnNlcXVlbmNlIGlmIHNvIG1hbnkgdGhvdXNhbmQgbWVuIHNob3VsZCB1bml0ZSB0aGVtc2VsdmVzIHRvIHRoZSBlbmVteSwgYXMKICAgICAgICAgICAgICAgICAgICB0aGVpciByZWxhdGlvbnMgY291bGQgbm90IG5lZ2xlY3QgdGhlaXIgc2FmZXR5LCBub3IgdGhlIHN0YXRlIHJlZ2FyZCBpdCBhcyBhCiAgICAgICAgICAgICAgICAgICAgbWF0dGVyIG9mIHNsaWdodCBpbXBvcnRhbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBmZWx0IGdyZWF0IGFueGlldHkgb24gdGhpcyBpbnRlbGxpZ2VuY2UsIGJlY2F1c2UKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgYWx3YXlzIGVzcGVjaWFsbHkgaW5kdWxnZWQgdGhlIHN0YXRlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYW5kLAogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgYW55IGhlc2l0YXRpb24sIGRyYXdzIG91dCBmcm9tIHRoZSBjYW1wIGZvdXIgbGlnaHQtYXJtZWQgbGVnaW9ucyBhbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhdmFscnk6IG5vciBoYWQgaGUgdGltZSwgYXQgc3VjaCBhIGNyaXNpcywgdG8gY29udHJhY3QgdGhlIGNhbXAsIGJlY2F1c2UKICAgICAgICAgICAgICAgICAgICB0aGUgYWZmYWlyIHNlZW1lZCB0byBkZXBlbmQgdXBvbiBkaXNwYXRjaC4gSGUgbGVhdmVzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMgRmFiaXVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBoaXMgbGlldXRlbmFudCwgd2l0aCB0d28gbGVnaW9ucyB0byBndWFyZCB0aGUgY2FtcC4gV2hlbiBoZSBvcmRlcmVkIHRoZSBicm90aGVycwogICAgICAgICAgICAgICAgICAgIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGl0YXZpY3VzPC9uYW1lPiB0byBiZSBhcnJlc3RlZCwgaGUgZGlzY292ZXJzIHRoYXQgdGhleSBoYWQgZmxlZCBhCiAgICAgICAgICAgICAgICAgICAgc2hvcnQgdGltZSBiZWZvcmUgdG8gdGhlIGNhbXAgb2YgdGhlIGVuZW15LiBIZSBlbmNvdXJhZ2VkIGhpcyBzb2xkaWVycyAibm90IHRvCiAgICAgICAgICAgICAgICAgICAgYmUgZGlzaGVhcnRlbmVkIGJ5IHRoZSBsYWJvciBvZiB0aGUgam91cm5leSBvbiBzdWNoIGEgbmVjZXNzYXJ5IG9jY2FzaW9uLCIgYW5kLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIGFkdmFuY2luZyB0d2VudHktZml2ZSBtaWxlcywgYWxsIGJlaW5nIG1vc3QgZWFnZXIsIGhlIGNhbWUgaW4gc2lnaHQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYXJteSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIGFuZCwgYnkgc2VuZGluZyBvbiBoaXMgY2F2YWxyeSwgcmV0YXJkcyBhbmQKICAgICAgICAgICAgICAgICAgICBpbXBlZGVzIHRoZWlyIG1hcmNoOyBoZSB0aGVuIGlzc3VlcyBzdHJpY3Qgb3JkZXJzIHRvIGFsbCBoaXMgc29sZGllcnMgdG8ga2lsbCBubwogICAgICAgICAgICAgICAgICAgIG9uZS4gSGUgY29tbWFuZHMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcG9yZWRpcml4PC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WaXJpZG9tYXJ1czwvbmFtZT4sIHdobyB0aGV5CiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB3ZXJlIGtpbGxlZCwgdG8gbW92ZSBhbW9uZyB0aGUgY2F2YWxyeSBhbmQgYWRkcmVzcyB0aGVpciBmcmllbmRzLiBXaGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIHJlY29nbml6ZWQgYW5kIHRoZSB0cmVhY2hlcnkgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXRhdmljdXM8L25hbWU+IGRpc2NvdmVyZWQsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBiZWdhbiB0byBleHRlbmQgdGhlaXIgaGFuZHMgdG8gaW50aW1hdGUgc3VibWlzc2lvbiwgYW5kLAogICAgICAgICAgICAgICAgICAgIGxheWluZyBkb3duIHRoZWlyIGFybXMsIHRvIGRlcHJlY2F0ZSBkZWF0aC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXRhdmljdXM8L25hbWU+LCB3aXRoIGhpcwogICAgICAgICAgICAgICAgICAgIGNsYW5zbWVuLCB3aG8gYWZ0ZXIgdGhlIGN1c3RvbSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBjb25zaWRlcgogICAgICAgICAgICAgICAgICAgIGl0IGEgY3JpbWUgdG8gZGVzZXJ0IHRoZWlyIHBhdHJvbnMsIGV2ZW4gaW4gZXh0cmVtZSBtaXNmb3J0dW5lLCBmbGVlcyBmb3J0aCB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDIyMzIiIHJlZz0iICArR2VyZ292aWUgWzMuMTE2LDQ1LjcxNl0gKGRlc2VydGVkIHNldHRsZW1lbnQpLCBQdXktZGUtRG9tZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcmdvdmlhIDwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZmVsdCBncmVhdCBhbnhpZXR5IG9uIHRoaXMgaW50ZWxsaWdlbmNlLCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIGFsd2F5cyBlc3BlY2lhbGx5IGluZHVsZ2VkIHRoZSBzdGF0ZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIGFuZCwKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGFueSBoZXNpdGF0aW9uLCBkcmF3cyBvdXQgZnJvbSB0aGUgY2FtcCBmb3VyIGxpZ2h0LWFybWVkIGxlZ2lvbnMgYW5kIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSBjYXZhbHJ5OiBub3IgaGFkIGhlIHRpbWUsIGF0IHN1Y2ggYSBjcmlzaXMsIHRvIGNvbnRyYWN0IHRoZSBjYW1wLCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgdGhlIGFmZmFpciBzZWVtZWQgdG8gZGVwZW5kIHVwb24gZGlzcGF0Y2guIEhlIGxlYXZlcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIEZhYml1czwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgaGlzIGxpZXV0ZW5hbnQsIHdpdGggdHdvIGxlZ2lvbnMgdG8gZ3VhcmQgdGhlIGNhbXAuIFdoZW4gaGUgb3JkZXJlZCB0aGUgYnJvdGhlcnMKICAgICAgICAgICAgICAgICAgICBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxpdGF2aWN1czwvbmFtZT4gdG8gYmUgYXJyZXN0ZWQsIGhlIGRpc2NvdmVycyB0aGF0IHRoZXkgaGFkIGZsZWQgYQogICAgICAgICAgICAgICAgICAgIHNob3J0IHRpbWUgYmVmb3JlIHRvIHRoZSBjYW1wIG9mIHRoZSBlbmVteS4gSGUgZW5jb3VyYWdlZCBoaXMgc29sZGllcnMgIm5vdCB0bwogICAgICAgICAgICAgICAgICAgIGJlIGRpc2hlYXJ0ZW5lZCBieSB0aGUgbGFib3Igb2YgdGhlIGpvdXJuZXkgb24gc3VjaCBhIG5lY2Vzc2FyeSBvY2Nhc2lvbiwiIGFuZCwKICAgICAgICAgICAgICAgICAgICBhZnRlciBhZHZhbmNpbmcgdHdlbnR5LWZpdmUgbWlsZXMsIGFsbCBiZWluZyBtb3N0IGVhZ2VyLCBoZSBjYW1lIGluIHNpZ2h0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGFybXkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCBhbmQsIGJ5IHNlbmRpbmcgb24gaGlzIGNhdmFscnksIHJldGFyZHMgYW5kCiAgICAgICAgICAgICAgICAgICAgaW1wZWRlcyB0aGVpciBtYXJjaDsgaGUgdGhlbiBpc3N1ZXMgc3RyaWN0IG9yZGVycyB0byBhbGwgaGlzIHNvbGRpZXJzIHRvIGtpbGwgbm8KICAgICAgICAgICAgICAgICAgICBvbmUuIEhlIGNvbW1hbmRzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBvcmVkaXJpeDwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmlyaWRvbWFydXM8L25hbWU+LCB3aG8gdGhleQogICAgICAgICAgICAgICAgICAgIHRob3VnaHQgd2VyZSBraWxsZWQsIHRvIG1vdmUgYW1vbmcgdGhlIGNhdmFscnkgYW5kIGFkZHJlc3MgdGhlaXIgZnJpZW5kcy4gV2hlbgogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSByZWNvZ25pemVkIGFuZCB0aGUgdHJlYWNoZXJ5IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGl0YXZpY3VzPC9uYW1lPiBkaXNjb3ZlcmVkLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gYmVnYW4gdG8gZXh0ZW5kIHRoZWlyIGhhbmRzIHRvIGludGltYXRlIHN1Ym1pc3Npb24sIGFuZCwKICAgICAgICAgICAgICAgICAgICBsYXlpbmcgZG93biB0aGVpciBhcm1zLCB0byBkZXByZWNhdGUgZGVhdGguIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGl0YXZpY3VzPC9uYW1lPiwgd2l0aCBoaXMKICAgICAgICAgICAgICAgICAgICBjbGFuc21lbiwgd2hvIGFmdGVyIHRoZSBjdXN0b20gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gY29uc2lkZXIKICAgICAgICAgICAgICAgICAgICBpdCBhIGNyaW1lIHRvIGRlc2VydCB0aGVpciBwYXRyb25zLCBldmVuIGluIGV4dHJlbWUgbWlzZm9ydHVuZSwgZmxlZXMgZm9ydGggdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAyMjMyIiByZWc9IiAgK0dlcmdvdmllIFszLjExNiw0NS43MTZdIChkZXNlcnRlZCBzZXR0bGVtZW50KSwgUHV5LWRlLURvbWUsIEF1dmVyZ25lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZXJnb3ZpYSA8L25hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['7.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYWZ0ZXIgc2VuZGluZyBtZXNzZW5nZXJzIHRvIHRoZSBzdGF0ZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIHRvIGluZm9ybSB0aGVtIHRoYXQgdGhleSB3aG9tIGhlIGNvdWxkIGhhdmUgcHV0IHRvIGRlYXRoCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIHJpZ2h0IG9mIHdhciB3ZXJlIHNwYXJlZCB0aHJvdWdoIGhpcyBraW5kbmVzcywgYW5kIGFmdGVyIGdpdmluZyB0aHJlZQogICAgICAgICAgICAgICAgICAgIGhvdXJzIG9mIHRoZSBuaWdodCB0byBoaXMgYXJteSBmb3IgaGlzIHJlcG9zZSwgZGlyZWN0ZWQgaGlzIG1hcmNoIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMjIzMiIgcmVnPSIgICtHZXJnb3ZpZSBbMy4xMTYsNDUuNzE2XSAoZGVzZXJ0ZWQgc2V0dGxlbWVudCksIFB1eS1kZS1Eb21lLCBBdXZlcmduZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VyZ292aWEgPC9uYW1lPi4gQWxtb3N0IGluIHRoZSBtaWRkbGUgb2YgdGhlIGpvdXJuZXksIGEgcGFydHkgb2YgaG9yc2UKICAgICAgICAgICAgICAgICAgICB0aGF0IHdlcmUgc2VudCBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkZhYml1czwvbmFtZT4gc3RhdGVkIGluIGhvdyBncmVhdCBkYW5nZXIKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzIHdlcmUsIHRoZXkgaW5mb3JtIGhpbSB0aGF0IHRoZSBjYW1wIHdhcyBhdHRhY2tlZCBieSBhIHZlcnkgcG93ZXJmdWwKICAgICAgICAgICAgICAgICAgICBhcm15LCB3aGlsZSBmcmVzaCBtZW4gd2VyZSBmcmVxdWVudGx5IHJlbGlldmluZyB0aGUgd2VhcmllZCwgYW5kIGV4aGF1c3Rpbmcgb3VyCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMgYnkgdGhlIGluY2Vzc2FudCB0b2lsLCBzaW5jZSBvbiBhY2NvdW50IG9mIHRoZSBzaXplIG9mIHRoZSBjYW1wLCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGNvbnN0YW50bHkgdG8gcmVtYWluIG9uIHRoZSByYW1wYXJ0OyB0aGF0IG1hbnkgaGFkIGJlZW4gd291bmRlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBpbW1lbnNlIG51bWJlciBvZiBhcnJvd3MgYW5kIGFsbCBraW5kcyBvZiBtaXNzaWxlczsgdGhhdCB0aGUgZW5naW5lcyB3ZXJlIG9mCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgc2VydmljZSBpbiB3aXRoc3RhbmRpbmcgdGhlbTsgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkZhYml1czwvbmFtZT4sIGF0CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZGVwYXJ0dXJlLCBsZWF2aW5nIG9ubHkgdHdvIGdhdGVzIG9wZW4sIHdhcyBibG9ja2luZyB1cCB0aGUgcmVzdCwgYW5kIHdhcwogICAgICAgICAgICAgICAgICAgIGFkZGluZyBicmVhc3Qtd29ya3MgdG8gdGhlIHJhbXBhcnRzLCBhbmQgd2FzIHByZXBhcmluZyBoaW1zZWxmIGZvciBhIHNpbWlsYXIKICAgICAgICAgICAgICAgICAgICBjYXN1YWx0eSBvbiB0aGUgZm9sbG93aW5nIGRheS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBhZnRlciByZWNlaXZpbmcKICAgICAgICAgICAgICAgICAgICB0aGlzIGluZm9ybWF0aW9uLCByZWFjaGVkIHRoZSBjYW1wIGJlZm9yZSBzdW5yaXNlIG93aW5nIHRvIHRoZSB2ZXJ5IGdyZWF0IHplYWwKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgc29sZGllcnMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGFmdGVyIHNlbmRpbmcgbWVzc2VuZ2VycyB0byB0aGUgc3RhdGUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCB0byBpbmZvcm0gdGhlbSB0aGF0IHRoZXkgd2hvbSBoZSBjb3VsZCBoYXZlIHB1dCB0byBkZWF0aAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSByaWdodCBvZiB3YXIgd2VyZSBzcGFyZWQgdGhyb3VnaCBoaXMga2luZG5lc3MsIGFuZCBhZnRlciBnaXZpbmcgdGhyZWUKICAgICAgICAgICAgICAgICAgICBob3VycyBvZiB0aGUgbmlnaHQgdG8gaGlzIGFybXkgZm9yIGhpcyByZXBvc2UsIGRpcmVjdGVkIGhpcyBtYXJjaCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDIyMzIiIHJlZz0iICArR2VyZ292aWUgWzMuMTE2LDQ1LjcxNl0gKGRlc2VydGVkIHNldHRsZW1lbnQpLCBQdXktZGUtRG9tZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcmdvdmlhIDwvbmFtZT4uIEFsbW9zdCBpbiB0aGUgbWlkZGxlIG9mIHRoZSBqb3VybmV5LCBhIHBhcnR5IG9mIGhvcnNlCiAgICAgICAgICAgICAgICAgICAgdGhhdCB3ZXJlIHNlbnQgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5GYWJpdXM8L25hbWU+IHN0YXRlZCBpbiBob3cgZ3JlYXQgZGFuZ2VyCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycyB3ZXJlLCB0aGV5IGluZm9ybSBoaW0gdGhhdCB0aGUgY2FtcCB3YXMgYXR0YWNrZWQgYnkgYSB2ZXJ5IHBvd2VyZnVsCiAgICAgICAgICAgICAgICAgICAgYXJteSwgd2hpbGUgZnJlc2ggbWVuIHdlcmUgZnJlcXVlbnRseSByZWxpZXZpbmcgdGhlIHdlYXJpZWQsIGFuZCBleGhhdXN0aW5nIG91cgogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIGJ5IHRoZSBpbmNlc3NhbnQgdG9pbCwgc2luY2Ugb24gYWNjb3VudCBvZiB0aGUgc2l6ZSBvZiB0aGUgY2FtcCwgdGhleQogICAgICAgICAgICAgICAgICAgIGhhZCBjb25zdGFudGx5IHRvIHJlbWFpbiBvbiB0aGUgcmFtcGFydDsgdGhhdCBtYW55IGhhZCBiZWVuIHdvdW5kZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgaW1tZW5zZSBudW1iZXIgb2YgYXJyb3dzIGFuZCBhbGwga2luZHMgb2YgbWlzc2lsZXM7IHRoYXQgdGhlIGVuZ2luZXMgd2VyZSBvZgogICAgICAgICAgICAgICAgICAgIGdyZWF0IHNlcnZpY2UgaW4gd2l0aHN0YW5kaW5nIHRoZW07IHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5GYWJpdXM8L25hbWU+LCBhdAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGRlcGFydHVyZSwgbGVhdmluZyBvbmx5IHR3byBnYXRlcyBvcGVuLCB3YXMgYmxvY2tpbmcgdXAgdGhlIHJlc3QsIGFuZCB3YXMKICAgICAgICAgICAgICAgICAgICBhZGRpbmcgYnJlYXN0LXdvcmtzIHRvIHRoZSByYW1wYXJ0cywgYW5kIHdhcyBwcmVwYXJpbmcgaGltc2VsZiBmb3IgYSBzaW1pbGFyCiAgICAgICAgICAgICAgICAgICAgY2FzdWFsdHkgb24gdGhlIGZvbGxvd2luZyBkYXkuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYWZ0ZXIgcmVjZWl2aW5nCiAgICAgICAgICAgICAgICAgICAgdGhpcyBpbmZvcm1hdGlvbiwgcmVhY2hlZCB0aGUgY2FtcCBiZWZvcmUgc3VucmlzZSBvd2luZyB0byB0aGUgdmVyeSBncmVhdCB6ZWFsCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIHNvbGRpZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIHRoZXNlIHRoaW5ncyBhcmUgZ29pbmcgb24gYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAyMjMyIiByZWc9IiAgK0dlcmdvdmllIFszLjExNiw0NS43MTZdIChkZXNlcnRlZCBzZXR0bGVtZW50KSwgUHV5LWRlLURvbWUsIEF1dmVyZ25lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZXJnb3ZpYSA8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIG9uIHJlY2VpdmluZyB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBhbm5vdW5jZW1lbnRzIGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXRhdmljdXM8L25hbWU+LCBsZWF2ZSB0aGVtc2VsdmVzIG5vIHRpbWUgdG8gYXNjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgdGhlIHRydXRoIG9mIHRob3NlIHN0YXRlbWVudHMuIFNvbWUgYXJlIHN0aW11bGF0ZWQgYnkgYXZhcmljZSwgb3RoZXJzIGJ5IHJldmVuZ2UKICAgICAgICAgICAgICAgICAgICBhbmQgY3JlZHVsaXR5LCB3aGljaCBpcyBhbiBpbm5hdGUgcHJvcGVuc2l0eSBpbiB0aGF0IHJhY2Ugb2YgbWVuIHRvIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIGRlZ3JlZSB0aGF0IHRoZXkgY29uc2lkZXIgYSBzbGlnaHQgcnVtb3IgYXMgYW4gYXNjZXJ0YWluZWQgZmFjdC4gVGhleSBwbHVuZGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIHByb3BlcnR5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGNpdGl6ZW5zLCBhbmQgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgbWFzc2FjcmUgdGhlbSBvciBkcmFnIHRoZW0gYXdheSB0byBzbGF2ZXJ5LiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbnZpY3RvbGl0YW5pczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZXMgdGhlIGV2aWwgc3RhdGUgb2YgYWZmYWlycywgYW5kIGdvYWRzIG9uIHRoZSBwZW9wbGUgdG8gZnVyeSwgdGhhdCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBjb21taXNzaW9uIG9mIHNvbWUgb3V0cmFnZSB0aGV5IG1heSBiZSBhc2hhbWVkIHRvIHJldHVybiB0byBwcm9wcmlldHkuIFRoZXkKICAgICAgICAgICAgICAgICAgICBlbnRpY2UgZnJvbSB0aGUgdG93biBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhYmlsbG9udXM8L25hbWU+LCBieSBhIHByb21pc2Ugb2Ygc2FmZXR5LAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmN1cyBBcmlzdGl1czwvbmFtZT4sIGEgbWlsaXRhcnkgdHJpYnVuZSwgd2hvIHdhcyBvbiBoaXMgbWFyY2ggdG8KICAgICAgICAgICAgICAgICAgICBoaXMgbGVnaW9uOyB0aGV5IGNvbXBlbCB0aG9zZSB3aG8gaGFkIHNldHRsZWQgdGhlcmUgZm9yIHRoZSBwdXJwb3NlIG9mIHRyYWRpbmcKICAgICAgICAgICAgICAgICAgICB0byBkbyB0aGUgc2FtZS4gQnkgY29uc3RhbnRseSBhdHRhY2tpbmcgdGhlbSBvbiB0aGVpciBtYXJjaCB0aGV5IHN0cmlwIHRoZW0gb2YKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlaXIgYmFnZ2FnZTsgdGhleSBiZXNpZWdlIGRheSBhbmQgbmlnaHQgdGhvc2UgdGhhdCByZXNpc3RlZDsgd2hlbiBtYW55CiAgICAgICAgICAgICAgICAgICAgd2VyZSBzbGFpbiBvbiBib3RoIHNpZGVzLCB0aGV5IGV4Y2l0ZSBhIGdyZWF0IG51bWJlciB0byBhcm1zLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAyMjMyIiByZWc9IiAgK0dlcmdvdmllIFszLjExNiw0NS43MTZdIChkZXNlcnRlZCBzZXR0bGVtZW50KSwgUHV5LWRlLURvbWUsIEF1dmVyZ25lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZXJnb3ZpYSA8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIG9uIHJlY2VpdmluZyB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBhbm5vdW5jZW1lbnRzIGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXRhdmljdXM8L25hbWU+LCBsZWF2ZSB0aGVtc2VsdmVzIG5vIHRpbWUgdG8gYXNjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgdGhlIHRydXRoIG9mIHRob3NlIHN0YXRlbWVudHMuIFNvbWUgYXJlIHN0aW11bGF0ZWQgYnkgYXZhcmljZSwgb3RoZXJzIGJ5IHJldmVuZ2UKICAgICAgICAgICAgICAgICAgICBhbmQgY3JlZHVsaXR5LCB3aGljaCBpcyBhbiBpbm5hdGUgcHJvcGVuc2l0eSBpbiB0aGF0IHJhY2Ugb2YgbWVuIHRvIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIGRlZ3JlZSB0aGF0IHRoZXkgY29uc2lkZXIgYSBzbGlnaHQgcnVtb3IgYXMgYW4gYXNjZXJ0YWluZWQgZmFjdC4gVGhleSBwbHVuZGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIHByb3BlcnR5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGNpdGl6ZW5zLCBhbmQgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgbWFzc2FjcmUgdGhlbSBvciBkcmFnIHRoZW0gYXdheSB0byBzbGF2ZXJ5LiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbnZpY3RvbGl0YW5pczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZXMgdGhlIGV2aWwgc3RhdGUgb2YgYWZmYWlycywgYW5kIGdvYWRzIG9uIHRoZSBwZW9wbGUgdG8gZnVyeSwgdGhhdCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBjb21taXNzaW9uIG9mIHNvbWUgb3V0cmFnZSB0aGV5IG1heSBiZSBhc2hhbWVkIHRvIHJldHVybiB0byBwcm9wcmlldHkuIFRoZXkKICAgICAgICAgICAgICAgICAgICBlbnRpY2UgZnJvbSB0aGUgdG93biBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhYmlsbG9udXM8L25hbWU+LCBieSBhIHByb21pc2Ugb2Ygc2FmZXR5LAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmN1cyBBcmlzdGl1czwvbmFtZT4sIGEgbWlsaXRhcnkgdHJpYnVuZSwgd2hvIHdhcyBvbiBoaXMgbWFyY2ggdG8KICAgICAgICAgICAgICAgICAgICBoaXMgbGVnaW9uOyB0aGV5IGNvbXBlbCB0aG9zZSB3aG8gaGFkIHNldHRsZWQgdGhlcmUgZm9yIHRoZSBwdXJwb3NlIG9mIHRyYWRpbmcKICAgICAgICAgICAgICAgICAgICB0byBkbyB0aGUgc2FtZS4gQnkgY29uc3RhbnRseSBhdHRhY2tpbmcgdGhlbSBvbiB0aGVpciBtYXJjaCB0aGV5IHN0cmlwIHRoZW0gb2YKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlaXIgYmFnZ2FnZTsgdGhleSBiZXNpZWdlIGRheSBhbmQgbmlnaHQgdGhvc2UgdGhhdCByZXNpc3RlZDsgd2hlbiBtYW55CiAgICAgICAgICAgICAgICAgICAgd2VyZSBzbGFpbiBvbiBib3RoIHNpZGVzLCB0aGV5IGV4Y2l0ZSBhIGdyZWF0IG51bWJlciB0byBhcm1zLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtZWFuIHRpbWUsIHdoZW4gaW50ZWxsaWdlbmNlIHdhcyBicm91Z2h0IHRoYXQgYWxsIHRoZWlyIHNvbGRpZXJzIHdlcmUgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgcG93ZXIsIHRoZXkgcnVuIGluIGEgYm9keSB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaXN0aXVzPC9uYW1lPjsgdGhleSBhc3N1cmUgaGltIHRoYXQgbm90aGluZyBoYWQgYmVlbiBkb25lIGJ5IHB1YmxpYwogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eTsgdGhleSBvcmRlciBhbiBpbnF1aXJ5IHRvIGJlIG1hZGUgYWJvdXQgdGhlIHBsdW5kZXJlZCBwcm9wZXJ0eTsgdGhleQogICAgICAgICAgICAgICAgICAgIGNvbmZpc2NhdGUgdGhlIHByb3BlcnR5IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGl0YXZpY3VzPC9uYW1lPiBhbmQgaGlzIGJyb3RoZXJzOyB0aGV5IHNlbmQKICAgICAgICAgICAgICAgICAgICBlbWJhc3NhZG9ycyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZm9yIHRoZSBwdXJwb3NlIG9mIGNsZWFyaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcy4gVGhleSBkbyBhbGwgdGhpcyB3aXRoIGEgdmlldyB0byByZWNvdmVyIHRoZWlyIHNvbGRpZXJzOyBidXQgYmVpbmcKICAgICAgICAgICAgICAgICAgICBjb250YW1pbmF0ZWQgYnkgZ3VpbHQsIGFuZCBjaGFybWVkIGJ5IHRoZSBnYWlucyBhcmlzaW5nIGZyb20gdGhlIHBsdW5kZXJlZAogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LCBhcyB0aGF0IGFjdCB3YXMgc2hhcmVkIGluIGJ5IG1hbnksIGFuZCBiZWluZyB0ZW1wdGVkIGJ5IHRoZSBmZWFyIG9mCiAgICAgICAgICAgICAgICAgICAgcHVuaXNobWVudCwgdGhleSBiZWdhbiB0byBmb3JtIHBsYW5zIG9mIHdhciBhbmQgc3RpciB1cCB0aGUgb3RoZXIgc3RhdGVzIGJ5CiAgICAgICAgICAgICAgICAgICAgZW1iYXNzaWVzLiBBbHRob3VnaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FzIGF3YXJlIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBwcm9jZWVkaW5nLCB5ZXQgaGUgYWRkcmVzc2VzIHRoZSBlbWJhc3NhZG9ycyB3aXRoIGFzIG11Y2ggbWlsZG5lc3MgYXMgaGUgY2FuOgogICAgICAgICAgICAgICAgICAgICJUaGF0IGhlIGRpZCBub3QgdGhpbmsgd29yc2Ugb2YgdGhlIHN0YXRlIG9uIGFjY291bnQgb2YgdGhlIGlnbm9yYW5jZSBhbmQKICAgICAgICAgICAgICAgICAgICBmaWNrbGVuZXNzIG9mIHRoZSBtb2IsIG5vciB3b3VsZCBkaW1pbmlzaCBoaXMgcmVnYXJkIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPi4iIEhlIGhpbXNlbGYsIGZlYXJpbmcgYSBncmVhdGVyIGNvbW1vdGlvbiBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGluIG9yZGVyIHRvIHByZXZlbnQgaGlzIGJlaW5nIHN1cnJvdW5kZWQgYnkgYWxsIHRoZSBzdGF0ZXMsCiAgICAgICAgICAgICAgICAgICAgYmVnYW4gdG8gZm9ybSBwbGFucyBhcyB0byB0aGUgbWFubmVyIGluIHdoaWNoIGhlIHNob3VsZCByZXR1cm4gZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDIyMzIiIHJlZz0iICArR2VyZ292aWUgWzMuMTE2LDQ1LjcxNl0gKGRlc2VydGVkIHNldHRsZW1lbnQpLCBQdXktZGUtRG9tZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcmdvdmlhIDwvbmFtZT4gYW5kIGFnYWluIGNvbmNlbnRyYXRlIGhpcyBmb3JjZXMsIGxlc3QgYSBkZXBhcnR1cmUgYXJpc2luZwogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGZlYXIgb2YgYSByZXZvbHQgc2hvdWxkIHNlZW0gbGlrZSBhIGZsaWdodC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIHBvd2VyLCB0aGV5IHJ1biBpbiBhIGJvZHkgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlzdGl1czwvbmFtZT47IHRoZXkgYXNzdXJlIGhpbSB0aGF0IG5vdGhpbmcgaGFkIGJlZW4gZG9uZSBieSBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHk7IHRoZXkgb3JkZXIgYW4gaW5xdWlyeSB0byBiZSBtYWRlIGFib3V0IHRoZSBwbHVuZGVyZWQgcHJvcGVydHk7IHRoZXkKICAgICAgICAgICAgICAgICAgICBjb25maXNjYXRlIHRoZSBwcm9wZXJ0eSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkxpdGF2aWN1czwvbmFtZT4gYW5kIGhpcyBicm90aGVyczsgdGhleSBzZW5kCiAgICAgICAgICAgICAgICAgICAgZW1iYXNzYWRvcnMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGZvciB0aGUgcHVycG9zZSBvZiBjbGVhcmluZwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMuIFRoZXkgZG8gYWxsIHRoaXMgd2l0aCBhIHZpZXcgdG8gcmVjb3ZlciB0aGVpciBzb2xkaWVyczsgYnV0IGJlaW5nCiAgICAgICAgICAgICAgICAgICAgY29udGFtaW5hdGVkIGJ5IGd1aWx0LCBhbmQgY2hhcm1lZCBieSB0aGUgZ2FpbnMgYXJpc2luZyBmcm9tIHRoZSBwbHVuZGVyZWQKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSwgYXMgdGhhdCBhY3Qgd2FzIHNoYXJlZCBpbiBieSBtYW55LCBhbmQgYmVpbmcgdGVtcHRlZCBieSB0aGUgZmVhciBvZgogICAgICAgICAgICAgICAgICAgIHB1bmlzaG1lbnQsIHRoZXkgYmVnYW4gdG8gZm9ybSBwbGFucyBvZiB3YXIgYW5kIHN0aXIgdXAgdGhlIG90aGVyIHN0YXRlcyBieQogICAgICAgICAgICAgICAgICAgIGVtYmFzc2llcy4gQWx0aG91Z2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdhcyBhd2FyZSBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZywgeWV0IGhlIGFkZHJlc3NlcyB0aGUgZW1iYXNzYWRvcnMgd2l0aCBhcyBtdWNoIG1pbGRuZXNzIGFzIGhlIGNhbjoKICAgICAgICAgICAgICAgICAgICAiVGhhdCBoZSBkaWQgbm90IHRoaW5rIHdvcnNlIG9mIHRoZSBzdGF0ZSBvbiBhY2NvdW50IG9mIHRoZSBpZ25vcmFuY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgZmlja2xlbmVzcyBvZiB0aGUgbW9iLCBub3Igd291bGQgZGltaW5pc2ggaGlzIHJlZ2FyZCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4uIiBIZSBoaW1zZWxmLCBmZWFyaW5nIGEgZ3JlYXRlciBjb21tb3Rpb24gaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBpbiBvcmRlciB0byBwcmV2ZW50IGhpcyBiZWluZyBzdXJyb3VuZGVkIGJ5IGFsbCB0aGUgc3RhdGVzLAogICAgICAgICAgICAgICAgICAgIGJlZ2FuIHRvIGZvcm0gcGxhbnMgYXMgdG8gdGhlIG1hbm5lciBpbiB3aGljaCBoZSBzaG91bGQgcmV0dXJuIGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAyMjMyIiByZWc9IiAgK0dlcmdvdmllIFszLjExNiw0NS43MTZdIChkZXNlcnRlZCBzZXR0bGVtZW50KSwgUHV5LWRlLURvbWUsIEF1dmVyZ25lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZXJnb3ZpYSA8L25hbWU+IGFuZCBhZ2FpbiBjb25jZW50cmF0ZSBoaXMgZm9yY2VzLCBsZXN0IGEgZGVwYXJ0dXJlIGFyaXNpbmcKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBmZWFyIG9mIGEgcmV2b2x0IHNob3VsZCBzZWVtIGxpa2UgYSBmbGlnaHQuIDwvdHJhbnNsYXRpb24+"
translation['7.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIGhlIHdhcyBjb25zaWRlcmluZyB0aGVzZSB0aGluZ3MgYW4gb3Bwb3J0dW5pdHkgb2YgYWN0aW5nIHN1Y2Nlc3NmdWxseQogICAgICAgICAgICAgICAgICAgIHNlZW1lZCB0byBvZmZlci4gRm9yLCB3aGVuIGhlIGhhZCBjb21lIGludG8gdGhlIHNtYWxsZXIgY2FtcCBmb3IgdGhlIHB1cnBvc2Ugb2YKICAgICAgICAgICAgICAgICAgICBzZWN1cmluZyB0aGUgd29ya3MsIGhlIG5vdGljZWQgdGhhdCB0aGUgaGlsbCBpbiB0aGUgcG9zc2Vzc2lvbiBvZiB0aGUgZW5lbXkgd2FzCiAgICAgICAgICAgICAgICAgICAgc3RyaXBwZWQgb2YgbWVuLCBhbHRob3VnaCwgb24gdGhlIGZvcm1lciBkYXlzLCBpdCBjb3VsZCBzY2FyY2VseSBiZSBzZWVuIG9uCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudCBvZiB0aGUgbnVtYmVycyBvbiBpdC4gQmVpbmcgYXN0b25pc2hlZCwgaGUgaW5xdWlyZXMgdGhlIHJlYXNvbiBvZiBpdAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGRlc2VydGVycywgYSBncmVhdCBudW1iZXIgb2Ygd2hvbSBmbG9ja2VkIHRvIGhpbSBkYWlseS4gVGhleSBhbGwKICAgICAgICAgICAgICAgICAgICBjb25jdXJyZWQgaW4gYXNzZXJ0aW5nLCB3aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoaW1zZWxmIGhhZCBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgYXNjZXJ0YWluZWQgYnkgaGlzIHNjb3V0cywgdGhhdCB0aGUgYmFjayBvZiB0aGF0IGhpbGwgd2FzIGFsbW9zdCBsZXZlbDsgYnV0CiAgICAgICAgICAgICAgICAgICAgbGlrZXdpc2Ugd29vZHkgYW5kIG5hcnJvdywgYnkgd2hpY2ggdGhlcmUgd2FzIGEgcGFzcyB0byB0aGUgb3RoZXIgc2lkZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB0b3duOyB0aGF0IHRoZXkgaGFkIHNlcmlvdXMgYXBwcmVoZW5zaW9ucyBmb3IgdGhpcyBwbGFjZSwgYW5kIGhhZCBubyBvdGhlciBpZGVhLAogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBvY2N1cGF0aW9uIG9mIG9uZSBoaWxsIGJ5IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgdGhhbgogICAgICAgICAgICAgICAgICAgIHRoYXQsIGlmIHRoZXkgc2hvdWxkIGxvc2UgdGhlIG90aGVyLCB0aGV5IHdvdWxkIGJlIGFsbW9zdCBzdXJyb3VuZGVkLCBhbmQgY3V0CiAgICAgICAgICAgICAgICAgICAgb2ZmIGZyb20gYWxsIGVncmVzcyBhbmQgZm9yYWdpbmc7IHRoYXQgdGhleSB3ZXJlIGFsbCBzdW1tb25lZCBieQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+IHRvIGZvcnRpZnkgdGhpcyBwbGFjZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoaW1zZWxmIGhhZCBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgYXNjZXJ0YWluZWQgYnkgaGlzIHNjb3V0cywgdGhhdCB0aGUgYmFjayBvZiB0aGF0IGhpbGwgd2FzIGFsbW9zdCBsZXZlbDsgYnV0CiAgICAgICAgICAgICAgICAgICAgbGlrZXdpc2Ugd29vZHkgYW5kIG5hcnJvdywgYnkgd2hpY2ggdGhlcmUgd2FzIGEgcGFzcyB0byB0aGUgb3RoZXIgc2lkZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB0b3duOyB0aGF0IHRoZXkgaGFkIHNlcmlvdXMgYXBwcmVoZW5zaW9ucyBmb3IgdGhpcyBwbGFjZSwgYW5kIGhhZCBubyBvdGhlciBpZGVhLAogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBvY2N1cGF0aW9uIG9mIG9uZSBoaWxsIGJ5IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgdGhhbgogICAgICAgICAgICAgICAgICAgIHRoYXQsIGlmIHRoZXkgc2hvdWxkIGxvc2UgdGhlIG90aGVyLCB0aGV5IHdvdWxkIGJlIGFsbW9zdCBzdXJyb3VuZGVkLCBhbmQgY3V0CiAgICAgICAgICAgICAgICAgICAgb2ZmIGZyb20gYWxsIGVncmVzcyBhbmQgZm9yYWdpbmc7IHRoYXQgdGhleSB3ZXJlIGFsbCBzdW1tb25lZCBieQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+IHRvIGZvcnRpZnkgdGhpcyBwbGFjZS4gPC90cmFuc2xhdGlvbj4="
translation['7.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb24gYmVpbmcgaW5mb3JtZWQgb2YgdGhpcyBjaXJjdW1zdGFuY2UsIHNlbmRzCiAgICAgICAgICAgICAgICAgICAgc2V2ZXJhbCB0cm9vcHMgb2YgaG9yc2UgdG8gdGhlIHBsYWNlIGltbWVkaWF0ZWx5IGFmdGVyIG1pZG5pZ2h0OyBoZSBvcmRlcnMgdGhlbQogICAgICAgICAgICAgICAgICAgIHRvIHJhbmdlIGluIGV2ZXJ5IHF1YXJ0ZXIgd2l0aCBtb3JlIHR1bXVsdCB0aGFuIHVzdWFsLiBBdCBkYXduIGhlIG9yZGVycyBhIGxhcmdlCiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHkgb2YgYmFnZ2FnZSB0byBiZSBkcmF3biBvdXQgb2YgdGhlIGNhbXAsIGFuZCB0aGUgbXVsZXRlZXJzIHdpdGggaGVsbWV0cywKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgYXBwZWFyYW5jZSBhbmQgZ3Vpc2Ugb2YgaG9yc2VtZW4sIHRvIHJpZGUgcm91bmQgdGhlIGhpbGxzLiBUbyB0aGVzZSBoZQogICAgICAgICAgICAgICAgICAgIGFkZHMgYSBmZXcgY2F2YWxyeSwgd2l0aCBpbnN0cnVjdGlvbnMgdG8gcmFuZ2UgbW9yZSB3aWRlbHkgdG8gbWFrZSBhIHNob3cuIEhlCiAgICAgICAgICAgICAgICAgICAgb3JkZXJzIHRoZW0gYWxsIHRvIHNlZWsgdGhlIHNhbWUgcXVhcnRlciBieSBhIGxvbmcgY2lyY3VpdDsgdGhlc2UgcHJvY2VlZGluZ3MKICAgICAgICAgICAgICAgICAgICB3ZXJlIHNlZW4gYXQgYSBkaXN0YW5jZSBmcm9tIHRoZSB0b3duLCBhcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDIyMzIiIHJlZz0iICArR2VyZ292aWUgWzMuMTE2LDQ1LjcxNl0gKGRlc2VydGVkIHNldHRsZW1lbnQpLCBQdXktZGUtRG9tZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcmdvdmlhIDwvbmFtZT4gY29tbWFuZGVkIGEgdmlldyBvZiB0aGUgY2FtcCwgbm9yIGNvdWxkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IGFzY2VydGFpbiBhdCBzbyBncmVhdCBhIGRpc3RhbmNlLCB3aGF0IGNlcnRhaW50eQogICAgICAgICAgICAgICAgICAgIHRoZXJlIHdhcyBpbiB0aGUgbWFuZXV2ZXIuIEhlIHNlbmRzIG9uZSBsZWdpb24gdG8gdGhlIHNhbWUgaGlsbCwgYW5kIGFmdGVyIGl0CiAgICAgICAgICAgICAgICAgICAgaGFkIG1hcmNoZWQgYSBsaXR0bGUsIHN0YXRpb25zIGl0IGluIHRoZSBsb3dlciBncm91bmQsIGFuZCBjb25nZWFscyBpdCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB3b29kcy4gVGhlIHN1c3BpY2lvbiBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBhcmUgaW5jcmVhc2VkLCBhbmQKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlaXIgZm9yY2VzIGFyZSBtYXJjaGVkIHRvIHRoYXQgcGxhY2UgdG8gZGVmZW5kIGl0LiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhhdmluZyBwZXJjZWl2ZWQgdGhlIGNhbXAgb2YgdGhlIGVuZW15IGRlc2VydGVkLCBjb3ZlcnMgdGhlCiAgICAgICAgICAgICAgICAgICAgbWlsaXRhcnkgaW5zaWduaWEgb2YgaGlzIG1lbiwgY29uY2VhbHMgdGhlIHN0YW5kYXJkcywgYW5kIHRyYW5zZmVycyBoaXMgc29sZGllcnMKICAgICAgICAgICAgICAgICAgICBpbiBzbWFsbCBib2RpZXMgZnJvbSB0aGUgZ3JlYXRlciB0byB0aGUgbGVzcyBjYW1wLCBhbmQgcG9pbnRzIG91dCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBsaWV1dGVuYW50cyB3aG9tIGhlIGhhZCBwbGFjZWQgaW4gY29tbWFuZCBvdmVyIHRoZSByZXNwZWN0aXZlIGxlZ2lvbnMsIHdoYXQgaGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQgd2lzaCB0byBiZSBkb25lOyBoZSBwYXJ0aWN1bGFybHkgYWR2aXNlcyB0aGVtIHRvIHJlc3RyYWluIHRoZWlyIG1lbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgYWR2YW5jaW5nIHRvbyBmYXIsIHRocm91Z2ggdGhlaXIgZGVzaXJlIG9mIGZpZ2h0aW5nLCBvciB0aGVpciBob3BlIG9mIHBsdW5kZXIsCiAgICAgICAgICAgICAgICAgICAgaGUgc2V0cyBiZWZvcmUgdGhlbSB3aGF0IGRpc2FkdmFudGFnZXMgdGhlIHVuZmF2b3JhYmxlIG5hdHVyZSBvZiB0aGUgZ3JvdW5kCiAgICAgICAgICAgICAgICAgICAgY2FycmllcyB3aXRoIGl0OyB0aGF0IHRoZXkgY291bGQgYmUgYXNzaXN0ZWQgYnkgZGlzcGF0Y2ggYWxvbmU6IHRoYXQgc3VjY2VzcwogICAgICAgICAgICAgICAgICAgIGRlcGVuZGVkIG9uIGEgc3VycHJpc2UsIGFuZCBub3Qgb24gYSBiYXR0bGUuIEFmdGVyIHN0YXRpbmcgdGhlc2UgcGFydGljdWxhcnMsIGhlCiAgICAgICAgICAgICAgICAgICAgZ2l2ZXMgdGhlIHNpZ25hbCBmb3IgYWN0aW9uLCBhbmQgZGV0YWNoZXMgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IGF0IHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgdGltZSBieSBhbm90aGVyIGFzY2VudCBvbiB0aGUgcmlnaHQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIG9uIGJlaW5nIGluZm9ybWVkIG9mIHRoaXMgY2lyY3Vtc3RhbmNlLCBzZW5kcwogICAgICAgICAgICAgICAgICAgIHNldmVyYWwgdHJvb3BzIG9mIGhvcnNlIHRvIHRoZSBwbGFjZSBpbW1lZGlhdGVseSBhZnRlciBtaWRuaWdodDsgaGUgb3JkZXJzIHRoZW0KICAgICAgICAgICAgICAgICAgICB0byByYW5nZSBpbiBldmVyeSBxdWFydGVyIHdpdGggbW9yZSB0dW11bHQgdGhhbiB1c3VhbC4gQXQgZGF3biBoZSBvcmRlcnMgYSBsYXJnZQogICAgICAgICAgICAgICAgICAgIHF1YW50aXR5IG9mIGJhZ2dhZ2UgdG8gYmUgZHJhd24gb3V0IG9mIHRoZSBjYW1wLCBhbmQgdGhlIG11bGV0ZWVycyB3aXRoIGhlbG1ldHMsCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGFwcGVhcmFuY2UgYW5kIGd1aXNlIG9mIGhvcnNlbWVuLCB0byByaWRlIHJvdW5kIHRoZSBoaWxscy4gVG8gdGhlc2UgaGUKICAgICAgICAgICAgICAgICAgICBhZGRzIGEgZmV3IGNhdmFscnksIHdpdGggaW5zdHJ1Y3Rpb25zIHRvIHJhbmdlIG1vcmUgd2lkZWx5IHRvIG1ha2UgYSBzaG93LiBIZQogICAgICAgICAgICAgICAgICAgIG9yZGVycyB0aGVtIGFsbCB0byBzZWVrIHRoZSBzYW1lIHF1YXJ0ZXIgYnkgYSBsb25nIGNpcmN1aXQ7IHRoZXNlIHByb2NlZWRpbmdzCiAgICAgICAgICAgICAgICAgICAgd2VyZSBzZWVuIGF0IGEgZGlzdGFuY2UgZnJvbSB0aGUgdG93biwgYXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAyMjMyIiByZWc9IiAgK0dlcmdvdmllIFszLjExNiw0NS43MTZdIChkZXNlcnRlZCBzZXR0bGVtZW50KSwgUHV5LWRlLURvbWUsIEF1dmVyZ25lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZXJnb3ZpYSA8L25hbWU+IGNvbW1hbmRlZCBhIHZpZXcgb2YgdGhlIGNhbXAsIG5vciBjb3VsZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBhc2NlcnRhaW4gYXQgc28gZ3JlYXQgYSBkaXN0YW5jZSwgd2hhdCBjZXJ0YWludHkKICAgICAgICAgICAgICAgICAgICB0aGVyZSB3YXMgaW4gdGhlIG1hbmV1dmVyLiBIZSBzZW5kcyBvbmUgbGVnaW9uIHRvIHRoZSBzYW1lIGhpbGwsIGFuZCBhZnRlciBpdAogICAgICAgICAgICAgICAgICAgIGhhZCBtYXJjaGVkIGEgbGl0dGxlLCBzdGF0aW9ucyBpdCBpbiB0aGUgbG93ZXIgZ3JvdW5kLCBhbmQgY29uZ2VhbHMgaXQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgd29vZHMuIFRoZSBzdXNwaWNpb24gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gYXJlIGluY3JlYXNlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZWlyIGZvcmNlcyBhcmUgbWFyY2hlZCB0byB0aGF0IHBsYWNlIHRvIGRlZmVuZCBpdC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgcGVyY2VpdmVkIHRoZSBjYW1wIG9mIHRoZSBlbmVteSBkZXNlcnRlZCwgY292ZXJzIHRoZQogICAgICAgICAgICAgICAgICAgIG1pbGl0YXJ5IGluc2lnbmlhIG9mIGhpcyBtZW4sIGNvbmNlYWxzIHRoZSBzdGFuZGFyZHMsIGFuZCB0cmFuc2ZlcnMgaGlzIHNvbGRpZXJzCiAgICAgICAgICAgICAgICAgICAgaW4gc21hbGwgYm9kaWVzIGZyb20gdGhlIGdyZWF0ZXIgdG8gdGhlIGxlc3MgY2FtcCwgYW5kIHBvaW50cyBvdXQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbGlldXRlbmFudHMgd2hvbSBoZSBoYWQgcGxhY2VkIGluIGNvbW1hbmQgb3ZlciB0aGUgcmVzcGVjdGl2ZSBsZWdpb25zLCB3aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHdpc2ggdG8gYmUgZG9uZTsgaGUgcGFydGljdWxhcmx5IGFkdmlzZXMgdGhlbSB0byByZXN0cmFpbiB0aGVpciBtZW4gZnJvbQogICAgICAgICAgICAgICAgICAgIGFkdmFuY2luZyB0b28gZmFyLCB0aHJvdWdoIHRoZWlyIGRlc2lyZSBvZiBmaWdodGluZywgb3IgdGhlaXIgaG9wZSBvZiBwbHVuZGVyLAogICAgICAgICAgICAgICAgICAgIGhlIHNldHMgYmVmb3JlIHRoZW0gd2hhdCBkaXNhZHZhbnRhZ2VzIHRoZSB1bmZhdm9yYWJsZSBuYXR1cmUgb2YgdGhlIGdyb3VuZAogICAgICAgICAgICAgICAgICAgIGNhcnJpZXMgd2l0aCBpdDsgdGhhdCB0aGV5IGNvdWxkIGJlIGFzc2lzdGVkIGJ5IGRpc3BhdGNoIGFsb25lOiB0aGF0IHN1Y2Nlc3MKICAgICAgICAgICAgICAgICAgICBkZXBlbmRlZCBvbiBhIHN1cnByaXNlLCBhbmQgbm90IG9uIGEgYmF0dGxlLiBBZnRlciBzdGF0aW5nIHRoZXNlIHBhcnRpY3VsYXJzLCBoZQogICAgICAgICAgICAgICAgICAgIGdpdmVzIHRoZSBzaWduYWwgZm9yIGFjdGlvbiwgYW5kIGRldGFjaGVzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBhdCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHRpbWUgYnkgYW5vdGhlciBhc2NlbnQgb24gdGhlIHJpZ2h0LiA8L3RyYW5zbGF0aW9uPg=="
translation['7.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSB0b3duIHdhbGwgd2FzIDxkYXRlIGF1dGhuYW1lPSIxMjAwIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIxMjAwIj4xMjAwPC9kYXRlPiBwYWNlcyBkaXN0YW50IGZyb20gdGhlIHBsYWluIGFuZAogICAgICAgICAgICAgICAgICAgIGZvb3Qgb2YgdGhlIGFzY2VudCwgaW4gYSBzdHJhaWdodCBsaW5lLCBpZiBubyBnYXAgaW50ZXJ2ZW5lZDsgd2hhdGV2ZXIgY2lyY3VpdAogICAgICAgICAgICAgICAgICAgIHdhcyBhZGRlZCB0byB0aGlzIGFzY2VudCwgdG8gbWFrZSB0aGUgaGlsbCBlYXN5LCBpbmNyZWFzZWQgdGhlIGxlbmd0aCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICByb3V0ZS4gQnV0IGFsbW9zdCBpbiB0aGUgbWlkZGxlIG9mIHRoZSBoaWxsLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBoYWQgcHJldmlvdXNseSBidWlsdCBhIHdhbGwgc2l4IGZlZXQgaGlnaCwgbWFkZSBvZiBsYXJnZQogICAgICAgICAgICAgICAgICAgIHN0b25lcywgYW5kIGV4dGVuZGluZyBpbiBsZW5ndGggYXMgZmFyIGFzIHRoZSBuYXR1cmUgb2YgdGhlIGdyb3VuZCBwZXJtaXR0ZWQsIGFzCiAgICAgICAgICAgICAgICAgICAgYSBiYXJyaWVyIHRvIHJldGFyZCB0aGUgYWR2YW5jZSBvZiBvdXIgbWVuOyBhbmQgbGVhdmluZyBhbGwgdGhlIGxvd2VyIHNwYWNlCiAgICAgICAgICAgICAgICAgICAgZW1wdHksIHRoZXkgaGFkIGZpbGxlZCB0aGUgdXBwZXIgcGFydCBvZiB0aGUgaGlsbCwgYXMgZmFyIGFzIHRoZSB3YWxsIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHRvd24sIHdpdGggdGhlaXIgY2FtcHMgdmVyeSBjbG9zZSB0byBvbmUgYW5vdGhlci4gVGhlIHNvbGRpZXJzLCBvbiB0aGUgc2lnbmFsCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgZ2l2ZW4sIHF1aWNrbHkgYWR2YW5jZSB0byB0aGlzIGZvcnRpZmljYXRpb24sIGFuZCBwYXNzaW5nIG92ZXIgaXQsIG1ha2UKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIG1hc3RlcnMgb2YgdGhlIHNlcGFyYXRlIGNhbXBzLiBBbmQgc28gZ3JlYXQgd2FzIHRoZWlyIGFjdGl2aXR5IGluCiAgICAgICAgICAgICAgICAgICAgdGFraW5nIHRoZSBjYW1wcywgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRldXRvbWFydXM8L25hbWU+LCB0aGUga2luZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaXRpb2JyaWdlczwvbmFtZT4sIGJlaW5nIHN1ZGRlbmx5IHN1cnByaXNlZCBpbiBoaXMgdGVudCwgYXMgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgZ29uZSB0byByZXN0IGF0IG5vb24sIHdpdGggZGlmZmljdWx0eSBlc2NhcGVkIGZyb20gdGhlIGhhbmRzIG9mIHRoZSBwbHVuZGVyZXJzLAogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIHVwcGVyIHBhcnQgb2YgaGlzIHBlcnNvbiBuYWtlZCwgYW5kIGhpcyBob3JzZSB3b3VuZGVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPGRhdGUgYXV0aG5hbWU9IjEyMDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9IjEyMDAiPjEyMDA8L2RhdGU+IHBhY2VzIGRpc3RhbnQgZnJvbSB0aGUgcGxhaW4gYW5kCiAgICAgICAgICAgICAgICAgICAgZm9vdCBvZiB0aGUgYXNjZW50LCBpbiBhIHN0cmFpZ2h0IGxpbmUsIGlmIG5vIGdhcCBpbnRlcnZlbmVkOyB3aGF0ZXZlciBjaXJjdWl0CiAgICAgICAgICAgICAgICAgICAgd2FzIGFkZGVkIHRvIHRoaXMgYXNjZW50LCB0byBtYWtlIHRoZSBoaWxsIGVhc3ksIGluY3JlYXNlZCB0aGUgbGVuZ3RoIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJvdXRlLiBCdXQgYWxtb3N0IGluIHRoZSBtaWRkbGUgb2YgdGhlIGhpbGwsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IGhhZCBwcmV2aW91c2x5IGJ1aWx0IGEgd2FsbCBzaXggZmVldCBoaWdoLCBtYWRlIG9mIGxhcmdlCiAgICAgICAgICAgICAgICAgICAgc3RvbmVzLCBhbmQgZXh0ZW5kaW5nIGluIGxlbmd0aCBhcyBmYXIgYXMgdGhlIG5hdHVyZSBvZiB0aGUgZ3JvdW5kIHBlcm1pdHRlZCwgYXMKICAgICAgICAgICAgICAgICAgICBhIGJhcnJpZXIgdG8gcmV0YXJkIHRoZSBhZHZhbmNlIG9mIG91ciBtZW47IGFuZCBsZWF2aW5nIGFsbCB0aGUgbG93ZXIgc3BhY2UKICAgICAgICAgICAgICAgICAgICBlbXB0eSwgdGhleSBoYWQgZmlsbGVkIHRoZSB1cHBlciBwYXJ0IG9mIHRoZSBoaWxsLCBhcyBmYXIgYXMgdGhlIHdhbGwgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgdG93biwgd2l0aCB0aGVpciBjYW1wcyB2ZXJ5IGNsb3NlIHRvIG9uZSBhbm90aGVyLiBUaGUgc29sZGllcnMsIG9uIHRoZSBzaWduYWwKICAgICAgICAgICAgICAgICAgICBiZWluZyBnaXZlbiwgcXVpY2tseSBhZHZhbmNlIHRvIHRoaXMgZm9ydGlmaWNhdGlvbiwgYW5kIHBhc3Npbmcgb3ZlciBpdCwgbWFrZQogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgbWFzdGVycyBvZiB0aGUgc2VwYXJhdGUgY2FtcHMuIEFuZCBzbyBncmVhdCB3YXMgdGhlaXIgYWN0aXZpdHkgaW4KICAgICAgICAgICAgICAgICAgICB0YWtpbmcgdGhlIGNhbXBzLCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGV1dG9tYXJ1czwvbmFtZT4sIHRoZSBraW5nIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk5pdGlvYnJpZ2VzPC9uYW1lPiwgYmVpbmcgc3VkZGVubHkgc3VycHJpc2VkIGluIGhpcyB0ZW50LCBhcyBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBnb25lIHRvIHJlc3QgYXQgbm9vbiwgd2l0aCBkaWZmaWN1bHR5IGVzY2FwZWQgZnJvbSB0aGUgaGFuZHMgb2YgdGhlIHBsdW5kZXJlcnMsCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgdXBwZXIgcGFydCBvZiBoaXMgcGVyc29uIG5ha2VkLCBhbmQgaGlzIGhvcnNlIHdvdW5kZWQuIDwvdHJhbnNsYXRpb24+"
translation['7.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIGFjY29tcGxpc2hlZCB0aGUgb2JqZWN0IHdoaWNoIGhlIGhhZCBpbgogICAgICAgICAgICAgICAgICAgIHZpZXcsIG9yZGVyZWQgdGhlIHNpZ25hbCB0byBiZSBzb3VuZGVkIGZvciBhIHJldHJlYXQ7IGFuZCB0aGUgc29sZGllcnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgdGVudGggbGVnaW9uLCBieSB3aGljaCBoZSB3YXMgdGhlbiBhY2NvbXBhbmllZCwgaGFsdGVkLiBCdXQgdGhlIHNvbGRpZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIGxlZ2lvbnMsIG5vdCBoZWFyaW5nIHRoZSBzb3VuZCBvZiB0aGUgdHJ1bXBldCwgYmVjYXVzZSB0aGVyZSB3YXMgYSB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgbGFyZ2UgdmFsbGV5IGJldHdlZW4gdGhlbSwgd2VyZSBob3dldmVyIGtlcHQgYmFjayBieSB0aGUgdHJpYnVuZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMgYW5kIHRoZSBsaWV1dGVuYW50cywgYWNjb3JkaW5nIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzCiAgICAgICAgICAgICAgICAgICAgb3JkZXJzOyBidXQgYmVpbmcgYW5pbWF0ZWQgYnkgdGhlIHByb3NwZWN0IG9mIHNwZWVkeSB2aWN0b3J5LCBhbmQgdGhlIGZsaWdodCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBlbmVteSwgYW5kIHRoZSBmYXZvcmFibGUgYmF0dGxlcyBvZiBmb3JtZXIgcGVyaW9kcywgdGhleSB0aG91Z2h0IG5vdGhpbmcgc28KICAgICAgICAgICAgICAgICAgICBkaWZmaWN1bHQgdGhhdCB0aGVpciBicmF2ZXJ5IGNvdWxkIG5vdCBhY2NvbXBsaXNoIGl0OyBub3IgZGlkIHRoZXkgcHV0IGFuIGVuZCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBwdXJzdWl0LCB1bnRpbCB0aGV5IGRyZXcgbmlnaCB0byB0aGUgd2FsbCBvZiB0aGUgdG93biBhbmQgdGhlIGdhdGVzLiBCdXQKICAgICAgICAgICAgICAgICAgICB0aGVuLCB3aGVuIGEgc2hvdXQgYXJvc2UgaW4gZXZlcnkgcXVhcnRlciBvZiB0aGUgY2l0eSwgdGhvc2Ugd2hvIHdlcmUgYXQgYQogICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlIGJlaW5nIGFsYXJtZWQgYnkgdGhlIHN1ZGRlbiB0dW11bHQsIGZsZWQgaGFzdGlseSBmcm9tIHRoZSB0b3duLCBzaW5jZQogICAgICAgICAgICAgICAgICAgIHRoZXkgdGhvdWdodCB0aGF0IHRoZSBlbmVteSB3ZXJlIHdpdGhpbiB0aGUgZ2F0ZXMuIFRoZSBtYXRyb25zIGJlZ2luIHRvIGNhc3QKICAgICAgICAgICAgICAgICAgICB0aGVpciBjbG90aGVzIGFuZCBzaWx2ZXIgb3ZlciB0aGUgd2FsbCwgYW5kIGJlbmRpbmcgb3ZlciBhcyBmYXIgYXMgdGhlIGxvd2VyCiAgICAgICAgICAgICAgICAgICAgcGFydCBvZiB0aGUgYm9zb20sIHdpdGggb3V0c3RyZXRjaGVkIGhhbmRzIGJlc2VlY2ggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHRvIHNwYXJlIHRoZW0sIGFuZCBub3QgdG8gc2FjcmlmaWNlIHRvIHRoZWlyIHJlc2VudG1lbnQgZXZlbgogICAgICAgICAgICAgICAgICAgIHdvbWVuIGFuZCBjaGlsZHJlbiwgYXMgdGhleSBoYWQgZG9uZSBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4uIFNvbWUgb2YgdGhlbSBsZXQgdGhlbXNlbHZlcyBkb3duIGZyb20gdGhlIHdhbGxzIGJ5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaGFuZHMsIGFuZCBzdXJyZW5kZXJlZCB0byBvdXIgc29sZGllcnMuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzIEZhYml1czwvbmFtZT4gYSBjZW50dXJpb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZWlnaHRoIGxlZ2lvbiwgd2hvLCBpdCB3YXMgYXNjZXJ0YWluZWQsIGhhZCBzYWlkIHRoYXQgZGF5IGFtb25nIGhpcwogICAgICAgICAgICAgICAgICAgIGZlbGxvdyBzb2xkaWVycyB0aGF0IGhlIHdhcyBleGNpdGVkIGJ5IHRoZSBwbHVuZGVyIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzQxNSIgcmVnPSIgICtCb3VyZ2VzIFsyLjM4Myw0Ny44M10gKGluaGFiaXRlZCBwbGFjZSksIENoZXIsIENlbnRyZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QXZhcmljdW0gPC9uYW1lPiwgYW5kIHdvdWxkIG5vdCBhbGxvdyBhbnkgb25lIHRvIG1vdW50IHRoZSB3YWxsIGJlZm9yZSBoaW0sCiAgICAgICAgICAgICAgICAgICAgZmluZGluZyB0aHJlZSBtZW4gb2YgaGlzIG93biBjb21wYW55LCBhbmQgYmVpbmcgcmFpc2VkIHVwIGJ5IHRoZW0sIHNjYWxlZCB0aGUKICAgICAgICAgICAgICAgICAgICB3YWxsLiBIZSBoaW1zZWxmLCBpbiB0dXJuLCB0YWtpbmcgaG9sZCBvZiB0aGVtIG9uZSBieSBvbmUgZHJldyB0aGVtIHVwIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHdhbGwuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhhdmluZyBhY2NvbXBsaXNoZWQgdGhlIG9iamVjdCB3aGljaCBoZSBoYWQgaW4KICAgICAgICAgICAgICAgICAgICB2aWV3LCBvcmRlcmVkIHRoZSBzaWduYWwgdG8gYmUgc291bmRlZCBmb3IgYSByZXRyZWF0OyBhbmQgdGhlIHNvbGRpZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHRlbnRoIGxlZ2lvbiwgYnkgd2hpY2ggaGUgd2FzIHRoZW4gYWNjb21wYW5pZWQsIGhhbHRlZC4gQnV0IHRoZSBzb2xkaWVycyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBsZWdpb25zLCBub3QgaGVhcmluZyB0aGUgc291bmQgb2YgdGhlIHRydW1wZXQsIGJlY2F1c2UgdGhlcmUgd2FzIGEgdmVyeQogICAgICAgICAgICAgICAgICAgIGxhcmdlIHZhbGxleSBiZXR3ZWVuIHRoZW0sIHdlcmUgaG93ZXZlciBrZXB0IGJhY2sgYnkgdGhlIHRyaWJ1bmVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIGFuZCB0aGUgbGlldXRlbmFudHMsIGFjY29yZGluZyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncwogICAgICAgICAgICAgICAgICAgIG9yZGVyczsgYnV0IGJlaW5nIGFuaW1hdGVkIGJ5IHRoZSBwcm9zcGVjdCBvZiBzcGVlZHkgdmljdG9yeSwgYW5kIHRoZSBmbGlnaHQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZW5lbXksIGFuZCB0aGUgZmF2b3JhYmxlIGJhdHRsZXMgb2YgZm9ybWVyIHBlcmlvZHMsIHRoZXkgdGhvdWdodCBub3RoaW5nIHNvCiAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0IHRoYXQgdGhlaXIgYnJhdmVyeSBjb3VsZCBub3QgYWNjb21wbGlzaCBpdDsgbm9yIGRpZCB0aGV5IHB1dCBhbiBlbmQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgcHVyc3VpdCwgdW50aWwgdGhleSBkcmV3IG5pZ2ggdG8gdGhlIHdhbGwgb2YgdGhlIHRvd24gYW5kIHRoZSBnYXRlcy4gQnV0CiAgICAgICAgICAgICAgICAgICAgdGhlbiwgd2hlbiBhIHNob3V0IGFyb3NlIGluIGV2ZXJ5IHF1YXJ0ZXIgb2YgdGhlIGNpdHksIHRob3NlIHdobyB3ZXJlIGF0IGEKICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSBiZWluZyBhbGFybWVkIGJ5IHRoZSBzdWRkZW4gdHVtdWx0LCBmbGVkIGhhc3RpbHkgZnJvbSB0aGUgdG93biwgc2luY2UKICAgICAgICAgICAgICAgICAgICB0aGV5IHRob3VnaHQgdGhhdCB0aGUgZW5lbXkgd2VyZSB3aXRoaW4gdGhlIGdhdGVzLiBUaGUgbWF0cm9ucyBiZWdpbiB0byBjYXN0CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY2xvdGhlcyBhbmQgc2lsdmVyIG92ZXIgdGhlIHdhbGwsIGFuZCBiZW5kaW5nIG92ZXIgYXMgZmFyIGFzIHRoZSBsb3dlcgogICAgICAgICAgICAgICAgICAgIHBhcnQgb2YgdGhlIGJvc29tLCB3aXRoIG91dHN0cmV0Y2hlZCBoYW5kcyBiZXNlZWNoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiB0byBzcGFyZSB0aGVtLCBhbmQgbm90IHRvIHNhY3JpZmljZSB0byB0aGVpciByZXNlbnRtZW50IGV2ZW4KICAgICAgICAgICAgICAgICAgICB3b21lbiBhbmQgY2hpbGRyZW4sIGFzIHRoZXkgaGFkIGRvbmUgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NDE1IiByZWc9IiAgK0JvdXJnZXMgWzIuMzgzLDQ3LjgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgQ2hlciwgQ2VudHJlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BdmFyaWN1bSA8L25hbWU+LiBTb21lIG9mIHRoZW0gbGV0IHRoZW1zZWx2ZXMgZG93biBmcm9tIHRoZSB3YWxscyBieSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhhbmRzLCBhbmQgc3VycmVuZGVyZWQgdG8gb3VyIHNvbGRpZXJzLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y2l1cyBGYWJpdXM8L25hbWU+IGEgY2VudHVyaW9uCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGVpZ2h0aCBsZWdpb24sIHdobywgaXQgd2FzIGFzY2VydGFpbmVkLCBoYWQgc2FpZCB0aGF0IGRheSBhbW9uZyBoaXMKICAgICAgICAgICAgICAgICAgICBmZWxsb3cgc29sZGllcnMgdGhhdCBoZSB3YXMgZXhjaXRlZCBieSB0aGUgcGx1bmRlciBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTUiIHJlZz0iICArQm91cmdlcyBbMi4zODMsNDcuODNdIChpbmhhYml0ZWQgcGxhY2UpLCBDaGVyLCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkF2YXJpY3VtIDwvbmFtZT4sIGFuZCB3b3VsZCBub3QgYWxsb3cgYW55IG9uZSB0byBtb3VudCB0aGUgd2FsbCBiZWZvcmUgaGltLAogICAgICAgICAgICAgICAgICAgIGZpbmRpbmcgdGhyZWUgbWVuIG9mIGhpcyBvd24gY29tcGFueSwgYW5kIGJlaW5nIHJhaXNlZCB1cCBieSB0aGVtLCBzY2FsZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgd2FsbC4gSGUgaGltc2VsZiwgaW4gdHVybiwgdGFraW5nIGhvbGQgb2YgdGhlbSBvbmUgYnkgb25lIGRyZXcgdGhlbSB1cCB0byB0aGUKICAgICAgICAgICAgICAgICAgICB3YWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtZWFuIHRpbWUgdGhvc2Ugd2hvIGhhZCBnb25lIHRvIHRoZSBvdGhlciBwYXJ0IG9mIHRoZSB0b3duIHRvIGRlZmVuZCBpdCwKICAgICAgICAgICAgICAgICAgICBhcyB3ZSBoYXZlIG1lbnRpb25lZCBhYm92ZSwgYXQgZmlyc3QsIGFyb3VzZWQgYnkgaGVhcmluZyB0aGUgc2hvdXRzLCBhbmQsCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJ3YXJkLCBieSBmcmVxdWVudCBhY2NvdW50cywgdGhhdCB0aGUgdG93biB3YXMgaW4gcG9zc2Vzc2lvbiBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIHNlbnQgZm9yd2FyZCB0aGVpciBjYXZhbHJ5LCBhbmQgaGFzdGVuZWQgaW4KICAgICAgICAgICAgICAgICAgICBsYXJnZXIgbnVtYmVycyB0byB0aGF0IHF1YXJ0ZXIuIEFzIGVhY2ggZmlyc3QgY2FtZSBoZSBzdG9vZCBiZW5lYXRoIHRoZSB3YWxsLAogICAgICAgICAgICAgICAgICAgIGFuZCBpbmNyZWFzZWQgdGhlIG51bWJlciBvZiBoaXMgY291bnRyeW1lbiBlbmdhZ2VkIGluIGFjdGlvbi4gV2hlbiBhIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgbXVsdGl0dWRlIG9mIHRoZW0gaGFkIGFzc2VtYmxlZCwgdGhlIG1hdHJvbnMsIHdobyBhIGxpdHRsZSBiZWZvcmUgd2VyZQogICAgICAgICAgICAgICAgICAgIHN0cmV0Y2hpbmcgdGhlaXIgaGFuZHMgZnJvbSB0aGUgd2FsbHMgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGJlZ2FuIHRvIGJlc2VlY2ggdGhlaXIgY291bnRyeW1lbiwgYW5kIGFmdGVyIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGxpYzwvbmFtZT4gZmFzaGlvbiB0bwogICAgICAgICAgICAgICAgICAgIHNob3cgdGhlaXIgZGlzaGV2ZWxlZCBoYWlyLCBhbmQgYnJpbmcgdGhlaXIgY2hpbGRyZW4gaW50byBwdWJsaWMgdmlldy4gTmVpdGhlcgogICAgICAgICAgICAgICAgICAgIGluIHBvc2l0aW9uIG5vciBpbiBudW1iZXJzIHdhcyB0aGUgY29udGVzdCBhbiBlcXVhbCBvbmUgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+OyBhdCB0aGUgc2FtZSB0aW1lLCBiZWluZyBleGhhdXN0ZWQgYnkgcnVubmluZwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgbG9uZyBjb250aW51YXRpb24gb2YgdGhlIGZpZ2h0LCB0aGV5IGNvdWxkIG5vdCBlYXNpbHkgd2l0aHN0YW5kIGZyZXNoCiAgICAgICAgICAgICAgICAgICAgYW5kIHZpZ29yb3VzIHRyb29wcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LCBzZW50IGZvcndhcmQgdGhlaXIgY2F2YWxyeSwgYW5kIGhhc3RlbmVkIGluCiAgICAgICAgICAgICAgICAgICAgbGFyZ2VyIG51bWJlcnMgdG8gdGhhdCBxdWFydGVyLiBBcyBlYWNoIGZpcnN0IGNhbWUgaGUgc3Rvb2QgYmVuZWF0aCB0aGUgd2FsbCwKICAgICAgICAgICAgICAgICAgICBhbmQgaW5jcmVhc2VkIHRoZSBudW1iZXIgb2YgaGlzIGNvdW50cnltZW4gZW5nYWdlZCBpbiBhY3Rpb24uIFdoZW4gYSBncmVhdAogICAgICAgICAgICAgICAgICAgIG11bHRpdHVkZSBvZiB0aGVtIGhhZCBhc3NlbWJsZWQsIHRoZSBtYXRyb25zLCB3aG8gYSBsaXR0bGUgYmVmb3JlIHdlcmUKICAgICAgICAgICAgICAgICAgICBzdHJldGNoaW5nIHRoZWlyIGhhbmRzIGZyb20gdGhlIHdhbGxzIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBiZWdhbiB0byBiZXNlZWNoIHRoZWlyIGNvdW50cnltZW4sIGFuZCBhZnRlciB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxsaWM8L25hbWU+IGZhc2hpb24gdG8KICAgICAgICAgICAgICAgICAgICBzaG93IHRoZWlyIGRpc2hldmVsZWQgaGFpciwgYW5kIGJyaW5nIHRoZWlyIGNoaWxkcmVuIGludG8gcHVibGljIHZpZXcuIE5laXRoZXIKICAgICAgICAgICAgICAgICAgICBpbiBwb3NpdGlvbiBub3IgaW4gbnVtYmVycyB3YXMgdGhlIGNvbnRlc3QgYW4gZXF1YWwgb25lIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPjsgYXQgdGhlIHNhbWUgdGltZSwgYmVpbmcgZXhoYXVzdGVkIGJ5IHJ1bm5pbmcKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGxvbmcgY29udGludWF0aW9uIG9mIHRoZSBmaWdodCwgdGhleSBjb3VsZCBub3QgZWFzaWx5IHdpdGhzdGFuZCBmcmVzaAogICAgICAgICAgICAgICAgICAgIGFuZCB2aWdvcm91cyB0cm9vcHMuIDwvdHJhbnNsYXRpb24+"
translation['7.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgd2hlbiBoZSBwZXJjZWl2ZWQgdGhhdCBoaXMgc29sZGllcnMgd2VyZQogICAgICAgICAgICAgICAgICAgIGZpZ2h0aW5nIG9uIHVuZmF2b3JhYmxlIGdyb3VuZCwgYW5kIHRoYXQgdGhlIGVuZW15J3MgZm9yY2VzIHdlcmUgaW5jcmVhc2luZywKICAgICAgICAgICAgICAgICAgICBiZWluZyBhbGFybWVkIGZvciB0aGUgc2FmZXR5IG9mIGhpcyB0cm9vcHMsIHNlbnQgb3JkZXJzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGl0dXMKICAgICAgICAgICAgICAgICAgICAgICAgU2V4dGl1czwvbmFtZT4sIG9uZSBvZiBoaXMgbGlldXRlbmFudHMsIHdob20gaGUgaGFkIGxlZnQgdG8gZ3VhcmQgdGhlCiAgICAgICAgICAgICAgICAgICAgc21hbGxlciBjYW1wLCB0byBsZWFkIG91dCBoaXMgY29ob3J0cyBxdWlja2x5IGZyb20gdGhlIGNhbXAsIGFuZCBwb3N0IHRoZW0gYXQKICAgICAgICAgICAgICAgICAgICB0aGUgZm9vdCBvZiB0aGUgaGlsbCwgb24gdGhlIHJpZ2h0IHdpbmcgb2YgdGhlIGVuZW15OyB0aGF0IGlmIGhlIHNob3VsZCBzZWUgb3VyCiAgICAgICAgICAgICAgICAgICAgbWVuIGRyaXZlbiBmcm9tIHRoZSBncm91bmQsIGhlIHNob3VsZCBkZXRlciB0aGUgZW5lbXkgZnJvbSBmb2xsb3dpbmcgdG9vCiAgICAgICAgICAgICAgICAgICAgY2xvc2VseS4gSGUgaGltc2VsZiwgYWR2YW5jaW5nIHdpdGggdGhlIGxlZ2lvbiBhIGxpdHRsZSBmcm9tIHRoYXQgcGxhY2Ugd2hlcmUgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgdGFrZW4gaGlzIHBvc3QsIGF3YWl0ZWQgdGhlIGlzc3VlIG9mIHRoZSBiYXR0bGUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHdoZW4gaGUgcGVyY2VpdmVkIHRoYXQgaGlzIHNvbGRpZXJzIHdlcmUKICAgICAgICAgICAgICAgICAgICBmaWdodGluZyBvbiB1bmZhdm9yYWJsZSBncm91bmQsIGFuZCB0aGF0IHRoZSBlbmVteSdzIGZvcmNlcyB3ZXJlIGluY3JlYXNpbmcsCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgYWxhcm1lZCBmb3IgdGhlIHNhZmV0eSBvZiBoaXMgdHJvb3BzLCBzZW50IG9yZGVycyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRpdHVzCiAgICAgICAgICAgICAgICAgICAgICAgIFNleHRpdXM8L25hbWU+LCBvbmUgb2YgaGlzIGxpZXV0ZW5hbnRzLCB3aG9tIGhlIGhhZCBsZWZ0IHRvIGd1YXJkIHRoZQogICAgICAgICAgICAgICAgICAgIHNtYWxsZXIgY2FtcCwgdG8gbGVhZCBvdXQgaGlzIGNvaG9ydHMgcXVpY2tseSBmcm9tIHRoZSBjYW1wLCBhbmQgcG9zdCB0aGVtIGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGZvb3Qgb2YgdGhlIGhpbGwsIG9uIHRoZSByaWdodCB3aW5nIG9mIHRoZSBlbmVteTsgdGhhdCBpZiBoZSBzaG91bGQgc2VlIG91cgogICAgICAgICAgICAgICAgICAgIG1lbiBkcml2ZW4gZnJvbSB0aGUgZ3JvdW5kLCBoZSBzaG91bGQgZGV0ZXIgdGhlIGVuZW15IGZyb20gZm9sbG93aW5nIHRvbwogICAgICAgICAgICAgICAgICAgIGNsb3NlbHkuIEhlIGhpbXNlbGYsIGFkdmFuY2luZyB3aXRoIHRoZSBsZWdpb24gYSBsaXR0bGUgZnJvbSB0aGF0IHBsYWNlIHdoZXJlIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIHRha2VuIGhpcyBwb3N0LCBhd2FpdGVkIHRoZSBpc3N1ZSBvZiB0aGUgYmF0dGxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIHRoZSBmaWdodCB3YXMgZ29pbmcgb24gbW9zdCB2aWdvcm91c2x5LCBoYW5kIHRvIGhhbmQsIGFuZCB0aGUgZW5lbXkKICAgICAgICAgICAgICAgICAgICBkZXBlbmRlZCBvbiB0aGVpciBwb3NpdGlvbiBhbmQgbnVtYmVycywgb3VyIG1lbiBvbiB0aGVpciBicmF2ZXJ5LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gc3VkZGVubHkgYXBwZWFyZWQgb24gb3VyIGV4cG9zZWQgZmxhbmssIGFzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgc2VudCB0aGVtIGJ5IGFub3RoZXIgYXNjZW50IG9uIHRoZSByaWdodCwgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIHNha2Ugb2YgY3JlYXRpbmcgYSBkaXZlcnNpb24uIFRoZXNlLCBmcm9tIHRoZSBzaW1pbGFyaXR5IG9mIHRoZWlyIGFybXMsCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRseSB0ZXJyaWZpZWQgb3VyIG1lbjsgYW5kIGFsdGhvdWdoIHRoZXkgd2VyZSBkaXNjb3ZlcmVkIHRvIGhhdmUgdGhlaXIgcmlnaHQKICAgICAgICAgICAgICAgICAgICBzaG91bGRlcnMgYmFyZSwgd2hpY2ggd2FzIHVzdWFsbHkgdGhlIHNpZ24gb2YgdGhvc2UgcmVkdWNlZCB0byBwZWFjZSwgeWV0IHRoZQogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIHN1c3BlY3RlZCB0aGF0IHRoaXMgdmVyeSB0aGluZyB3YXMgZG9uZSBieSB0aGUgZW5lbXkgdG8gZGVjZWl2ZSB0aGVtLgogICAgICAgICAgICAgICAgICAgIEF0IHRoZSBzYW1lIHRpbWUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWNpdXMgRmFiaXVzPC9uYW1lPiB0aGUgY2VudHVyaW9uLCBhbmQgdGhvc2Ugd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIHNjYWxlZCB0aGUgd2FsbCB3aXRoIGhpbSwgYmVpbmcgc3Vycm91bmRlZCBhbmQgc2xhaW4sIHdlcmUgY2FzdCBmcm9tIHRoZSB3YWxsLgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmN1cyBQZXRyZWl1czwvbmFtZT4sIGEgY2VudHVyaW9uIG9mIHRoZSBzYW1lIGxlZ2lvbiwgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBhdHRlbXB0aW5nIHRvIGhldyBkb3duIHRoZSBnYXRlcywgd2FzIG92ZXJwb3dlcmVkIGJ5IG51bWJlcnMsIGFuZCwgZGVzcGFpcmluZyBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBzYWZldHksIGhhdmluZyBhbHJlYWR5IHJlY2VpdmVkIG1hbnkgd291bmRzLCBzYWlkIHRvIHRoZSBzb2xkaWVycyBvZiBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgY29tcGFueSB3aG8gZm9sbG93ZWQgaGltOiAiU2luY2UgSSBjYW4gbm90IHNhdmUgeW91IGFzIHdlbGwgYXMgbXlzZWxmLCBJIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgYXQgbGVhc3QgcHJvdmlkZSBmb3IgeW91ciBzYWZldHksIHNpbmNlIEksIGFsbHVyZWQgYnkgdGhlIGxvdmUgb2YgZ2xvcnksIGxlZCB5b3UKICAgICAgICAgICAgICAgICAgICBpbnRvIHRoaXMgZGFuZ2VyLCBkbyB5b3Ugc2F2ZSB5b3Vyc2VsdmVzIHdoZW4gYW4gb3Bwb3J0dW5pdHkgaXMgZ2l2ZW4uIiBBdCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIHRpbWUgaGUgcnVzaGVkIGludG8gdGhlIG1pZHN0IG9mIHRoZSBlbmVteSwgYW5kIHNsYXlpbmcgdHdvIG9mIHRoZW0sIGRyb3ZlCiAgICAgICAgICAgICAgICAgICAgYmFjayB0aGUgcmVzdCBhIGxpdHRsZSBmcm9tIHRoZSBnYXRlLiBXaGVuIGhpcyBtZW4gYXR0ZW1wdGVkIHRvIGFpZCBoaW0sICJJbgogICAgICAgICAgICAgICAgICAgIHZhaW4sIiBoZSBzYXlzLCAieW91IGVuZGVhdm9yIHRvIHByb2N1cmUgbWUgc2FmZXR5LCBzaW5jZSBibG9vZCBhbmQgc3RyZW5ndGggYXJlCiAgICAgICAgICAgICAgICAgICAgbm93IGZhaWxpbmcgbWUsIHRoZXJlZm9yZSBsZWF2ZSB0aGlzLCB3aGlsZSB5b3UgaGF2ZSB0aGUgb3Bwb3J0dW5pdHksIGFuZAogICAgICAgICAgICAgICAgICAgIHJldHJlYXQgdG8gdGhlIGxlZ2lvbi4iIFRodXMgaGUgZmVsbCBmaWdodGluZyBhIGZldyBtb21lbnRzIGFmdGVyLCBhbmQgc2F2ZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgbWVuIGJ5IGhpcyBvd24gZGVhdGguIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBzdWRkZW5seSBhcHBlYXJlZCBvbiBvdXIgZXhwb3NlZCBmbGFuaywgYXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBzZW50IHRoZW0gYnkgYW5vdGhlciBhc2NlbnQgb24gdGhlIHJpZ2h0LCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgc2FrZSBvZiBjcmVhdGluZyBhIGRpdmVyc2lvbi4gVGhlc2UsIGZyb20gdGhlIHNpbWlsYXJpdHkgb2YgdGhlaXIgYXJtcywKICAgICAgICAgICAgICAgICAgICBncmVhdGx5IHRlcnJpZmllZCBvdXIgbWVuOyBhbmQgYWx0aG91Z2ggdGhleSB3ZXJlIGRpc2NvdmVyZWQgdG8gaGF2ZSB0aGVpciByaWdodAogICAgICAgICAgICAgICAgICAgIHNob3VsZGVycyBiYXJlLCB3aGljaCB3YXMgdXN1YWxseSB0aGUgc2lnbiBvZiB0aG9zZSByZWR1Y2VkIHRvIHBlYWNlLCB5ZXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMgc3VzcGVjdGVkIHRoYXQgdGhpcyB2ZXJ5IHRoaW5nIHdhcyBkb25lIGJ5IHRoZSBlbmVteSB0byBkZWNlaXZlIHRoZW0uCiAgICAgICAgICAgICAgICAgICAgQXQgdGhlIHNhbWUgdGltZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y2l1cyBGYWJpdXM8L25hbWU+IHRoZSBjZW50dXJpb24sIGFuZCB0aG9zZSB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgc2NhbGVkIHRoZSB3YWxsIHdpdGggaGltLCBiZWluZyBzdXJyb3VuZGVkIGFuZCBzbGFpbiwgd2VyZSBjYXN0IGZyb20gdGhlIHdhbGwuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyY3VzIFBldHJlaXVzPC9uYW1lPiwgYSBjZW50dXJpb24gb2YgdGhlIHNhbWUgbGVnaW9uLCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGF0dGVtcHRpbmcgdG8gaGV3IGRvd24gdGhlIGdhdGVzLCB3YXMgb3ZlcnBvd2VyZWQgYnkgbnVtYmVycywgYW5kLCBkZXNwYWlyaW5nIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIHNhZmV0eSwgaGF2aW5nIGFscmVhZHkgcmVjZWl2ZWQgbWFueSB3b3VuZHMsIHNhaWQgdG8gdGhlIHNvbGRpZXJzIG9mIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBjb21wYW55IHdobyBmb2xsb3dlZCBoaW06ICJTaW5jZSBJIGNhbiBub3Qgc2F2ZSB5b3UgYXMgd2VsbCBhcyBteXNlbGYsIEkgc2hhbGwKICAgICAgICAgICAgICAgICAgICBhdCBsZWFzdCBwcm92aWRlIGZvciB5b3VyIHNhZmV0eSwgc2luY2UgSSwgYWxsdXJlZCBieSB0aGUgbG92ZSBvZiBnbG9yeSwgbGVkIHlvdQogICAgICAgICAgICAgICAgICAgIGludG8gdGhpcyBkYW5nZXIsIGRvIHlvdSBzYXZlIHlvdXJzZWx2ZXMgd2hlbiBhbiBvcHBvcnR1bml0eSBpcyBnaXZlbi4iIEF0IHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgdGltZSBoZSBydXNoZWQgaW50byB0aGUgbWlkc3Qgb2YgdGhlIGVuZW15LCBhbmQgc2xheWluZyB0d28gb2YgdGhlbSwgZHJvdmUKICAgICAgICAgICAgICAgICAgICBiYWNrIHRoZSByZXN0IGEgbGl0dGxlIGZyb20gdGhlIGdhdGUuIFdoZW4gaGlzIG1lbiBhdHRlbXB0ZWQgdG8gYWlkIGhpbSwgIkluCiAgICAgICAgICAgICAgICAgICAgdmFpbiwiIGhlIHNheXMsICJ5b3UgZW5kZWF2b3IgdG8gcHJvY3VyZSBtZSBzYWZldHksIHNpbmNlIGJsb29kIGFuZCBzdHJlbmd0aCBhcmUKICAgICAgICAgICAgICAgICAgICBub3cgZmFpbGluZyBtZSwgdGhlcmVmb3JlIGxlYXZlIHRoaXMsIHdoaWxlIHlvdSBoYXZlIHRoZSBvcHBvcnR1bml0eSwgYW5kCiAgICAgICAgICAgICAgICAgICAgcmV0cmVhdCB0byB0aGUgbGVnaW9uLiIgVGh1cyBoZSBmZWxsIGZpZ2h0aW5nIGEgZmV3IG1vbWVudHMgYWZ0ZXIsIGFuZCBzYXZlZCBoaXMKICAgICAgICAgICAgICAgICAgICBtZW4gYnkgaGlzIG93biBkZWF0aC4gPC90cmFuc2xhdGlvbj4="
translation['7.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk91ciBzb2xkaWVycywgYmVpbmcgaGFyZCBwcmVzc2VkIG9uIGV2ZXJ5IHNpZGUsIHdlcmUgZGlzbG9kZ2VkIGZyb20gdGhlaXIKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiwgd2l0aCB0aGUgbG9zcyBvZiBmb3J0eS1zaXggY2VudHVyaW9uczsgYnV0IHRoZSB0ZW50aCBsZWdpb24sIHdoaWNoIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gcG9zdGVkIGluIHJlc2VydmUgb24gZ3JvdW5kIGEgbGl0dGxlIG1vcmUgbGV2ZWwsIGNoZWNrZWQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gaW4gdGhlaXIgZWFnZXIgcHVyc3VpdC4gSXQgd2FzIHN1cHBvcnRlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBjb2hvcnRzIG9mIHRoZSB0aGlydGVlbnRoIGxlZ2lvbiwgd2hpY2gsIGJlaW5nIGxlZCBmcm9tIHRoZSBzbWFsbGVyIGNhbXAsIGhhZCwKICAgICAgICAgICAgICAgICAgICB1bmRlciB0aGUgY29tbWFuZCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRpdHVzIFNleHRpdXM8L25hbWU+LCBvY2N1cGllZCB0aGUgaGlnaGVyIGdyb3VuZC4gVGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucywgYXMgc29vbiBhcyB0aGV5IHJlYWNoZWQgdGhlIHBsYWluLCBoYWx0ZWQgYW5kIGZhY2VkIHRoZSBlbmVteS4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiBsZWQgYmFjayBoaXMgbWVuIGZyb20gdGhlIHBhcnQgb2YgdGhlIGhpbGwgd2l0aGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvcnRpZmljYXRpb25zLiBPbiB0aGF0IGRheSBsaXR0bGUgbGVzcyB0aGFuIHNldmVuIGh1bmRyZWQgb2YgdGhlIHNvbGRpZXJzCiAgICAgICAgICAgICAgICAgICAgd2VyZSBtaXNzaW5nLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBpbiB0aGVpciBlYWdlciBwdXJzdWl0LiBJdCB3YXMgc3VwcG9ydGVkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGNvaG9ydHMgb2YgdGhlIHRoaXJ0ZWVudGggbGVnaW9uLCB3aGljaCwgYmVpbmcgbGVkIGZyb20gdGhlIHNtYWxsZXIgY2FtcCwgaGFkLAogICAgICAgICAgICAgICAgICAgIHVuZGVyIHRoZSBjb21tYW5kIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGl0dXMgU2V4dGl1czwvbmFtZT4sIG9jY3VwaWVkIHRoZSBoaWdoZXIgZ3JvdW5kLiBUaGUKICAgICAgICAgICAgICAgICAgICBsZWdpb25zLCBhcyBzb29uIGFzIHRoZXkgcmVhY2hlZCB0aGUgcGxhaW4sIGhhbHRlZCBhbmQgZmFjZWQgdGhlIGVuZW15LgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+IGxlZCBiYWNrIGhpcyBtZW4gZnJvbSB0aGUgcGFydCBvZiB0aGUgaGlsbCB3aXRoaW4KICAgICAgICAgICAgICAgICAgICB0aGUgZm9ydGlmaWNhdGlvbnMuIE9uIHRoYXQgZGF5IGxpdHRsZSBsZXNzIHRoYW4gc2V2ZW4gaHVuZHJlZCBvZiB0aGUgc29sZGllcnMKICAgICAgICAgICAgICAgICAgICB3ZXJlIG1pc3NpbmcuIDwvdHJhbnNsYXRpb24+"
translation['7.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBuZXh0IGRheSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgY2FsbGVkIGEgbWVldGluZywKICAgICAgICAgICAgICAgICAgICBjZW5zdXJlZCB0aGUgcmFzaG5lc3MgYW5kIGF2YXJpY2Ugb2YgaGlzIHNvbGRpZXJzLCAiSW4gdGhhdCB0aGV5IGhhZCBqdWRnZWQgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBob3cgZmFyIHRoZXkgb3VnaHQgdG8gcHJvY2VlZCwgb3Igd2hhdCB0aGV5IG91Z2h0IHRvIGRvLCBhbmQgY291bGQKICAgICAgICAgICAgICAgICAgICBub3QgYmUga2VwdCBiYWNrIGJ5IHRoZSB0cmlidW5lcyBvZiB0aGUgc29sZGllcnMgYW5kIHRoZSBsaWV1dGVuYW50czsiIGFuZAogICAgICAgICAgICAgICAgICAgIHN0YXRlZCwgIndoYXQgdGhlIGRpc2FkdmFudGFnZSBvZiB0aGUgZ3JvdW5kIGNvdWxkIGVmZmVjdCwgd2hhdCBvcGluaW9uIGhlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBoYWQgZW50ZXJ0YWluZWQgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NDE1IiByZWc9IiAgK0JvdXJnZXMgWzIuMzgzLDQ3LjgzXSAoaW5oYWJpdGVkIHBsYWNlKSwgQ2hlciwgQ2VudHJlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BdmFyaWN1bSA8L25hbWU+LCB3aGVuIGhhdmluZyBzdXJwcmlzZWQgdGhlIGVuZW15IHdpdGhvdXQgZWl0aGVyIGdlbmVyYWwgb3IKICAgICAgICAgICAgICAgICAgICBjYXZhbHJ5LCBoZSBoYWQgZ2l2ZW4gdXAgYSBjZXJ0YWluIHZpY3RvcnksIGxlc3QgZXZlbiBhIHRyaWZsaW5nIGxvc3Mgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgb2NjdXIgaW4gdGhlIGNvbnRlc3Qgb3dpbmcgdG8gdGhlIGRpc2FkdmFudGFnZSBvZiBwb3NpdGlvbi4gVGhhdCBhcyBtdWNoIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgYWRtaXJlZCB0aGUgZ3JlYXRuZXNzIG9mIHRoZWlyIGNvdXJhZ2UsIHNpbmNlIG5laXRoZXIgdGhlIGZvcnRpZmljYXRpb25zIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbXAsIG5vciB0aGUgaGVpZ2h0IG9mIHRoZSBtb3VudGFpbiwgbm9yIHRoZSB3YWxsIG9mIHRoZSB0b3duIGNvdWxkIHJldGFyZAogICAgICAgICAgICAgICAgICAgIHRoZW07IGluIHRoZSBzYW1lIGRlZ3JlZSBoZSBjZW5zdXJlZCB0aGVpciBsaWNlbnRpb3VzbmVzcyBhbmQgYXJyb2dhbmNlLCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgdGhleSB0aG91Z2h0IHRoYXQgdGhleSBrbmV3IG1vcmUgdGhhbiB0aGVpciBnZW5lcmFsIGNvbmNlcm5pbmcgdmljdG9yeSwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGlzc3VlIG9mIGFjdGlvbnM6IGFuZCB0aGF0IGhlIHJlcXVpcmVkIGluIGhpcyBzb2xkaWVycyBmb3JiZWFyYW5jZSBhbmQKICAgICAgICAgICAgICAgICAgICBzZWxmLWNvbW1hbmQsIG5vdCBsZXNzIHRoYW4gdmFsb3IgYW5kIG1hZ25hbmltaXR5LiIgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIGNhbGxlZCBhIG1lZXRpbmcsCiAgICAgICAgICAgICAgICAgICAgY2Vuc3VyZWQgdGhlIHJhc2huZXNzIGFuZCBhdmFyaWNlIG9mIGhpcyBzb2xkaWVycywgIkluIHRoYXQgdGhleSBoYWQganVkZ2VkIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgaG93IGZhciB0aGV5IG91Z2h0IHRvIHByb2NlZWQsIG9yIHdoYXQgdGhleSBvdWdodCB0byBkbywgYW5kIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IGJlIGtlcHQgYmFjayBieSB0aGUgdHJpYnVuZXMgb2YgdGhlIHNvbGRpZXJzIGFuZCB0aGUgbGlldXRlbmFudHM7IiBhbmQKICAgICAgICAgICAgICAgICAgICBzdGF0ZWQsICJ3aGF0IHRoZSBkaXNhZHZhbnRhZ2Ugb2YgdGhlIGdyb3VuZCBjb3VsZCBlZmZlY3QsIHdoYXQgb3BpbmlvbiBoZQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgaGFkIGVudGVydGFpbmVkIGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzQxNSIgcmVnPSIgICtCb3VyZ2VzIFsyLjM4Myw0Ny44M10gKGluaGFiaXRlZCBwbGFjZSksIENoZXIsIENlbnRyZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QXZhcmljdW0gPC9uYW1lPiwgd2hlbiBoYXZpbmcgc3VycHJpc2VkIHRoZSBlbmVteSB3aXRob3V0IGVpdGhlciBnZW5lcmFsIG9yCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSwgaGUgaGFkIGdpdmVuIHVwIGEgY2VydGFpbiB2aWN0b3J5LCBsZXN0IGV2ZW4gYSB0cmlmbGluZyBsb3NzIHNob3VsZAogICAgICAgICAgICAgICAgICAgIG9jY3VyIGluIHRoZSBjb250ZXN0IG93aW5nIHRvIHRoZSBkaXNhZHZhbnRhZ2Ugb2YgcG9zaXRpb24uIFRoYXQgYXMgbXVjaCBhcyBoZQogICAgICAgICAgICAgICAgICAgIGFkbWlyZWQgdGhlIGdyZWF0bmVzcyBvZiB0aGVpciBjb3VyYWdlLCBzaW5jZSBuZWl0aGVyIHRoZSBmb3J0aWZpY2F0aW9ucyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjYW1wLCBub3IgdGhlIGhlaWdodCBvZiB0aGUgbW91bnRhaW4sIG5vciB0aGUgd2FsbCBvZiB0aGUgdG93biBjb3VsZCByZXRhcmQKICAgICAgICAgICAgICAgICAgICB0aGVtOyBpbiB0aGUgc2FtZSBkZWdyZWUgaGUgY2Vuc3VyZWQgdGhlaXIgbGljZW50aW91c25lc3MgYW5kIGFycm9nYW5jZSwgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHRoZXkgdGhvdWdodCB0aGF0IHRoZXkga25ldyBtb3JlIHRoYW4gdGhlaXIgZ2VuZXJhbCBjb25jZXJuaW5nIHZpY3RvcnksIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBpc3N1ZSBvZiBhY3Rpb25zOiBhbmQgdGhhdCBoZSByZXF1aXJlZCBpbiBoaXMgc29sZGllcnMgZm9yYmVhcmFuY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VsZi1jb21tYW5kLCBub3QgbGVzcyB0aGFuIHZhbG9yIGFuZCBtYWduYW5pbWl0eS4iIDwvdHJhbnNsYXRpb24+"
translation['7.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyBoZWxkIHRoaXMgYXNzZW1ibHksIGFuZCBoYXZpbmcgZW5jb3VyYWdlZCB0aGUgc29sZGllcnMgYXQgdGhlIGNvbmNsdXNpb24KICAgICAgICAgICAgICAgICAgICBvZiBoaXMgc3BlZWNoLCAiVGhhdCB0aGV5IHNob3VsZCBub3QgYmUgZGlzcGlyaXRlZCBvbiB0aGlzIGFjY291bnQsIG5vcgogICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSB0byB0aGUgdmFsb3Igb2YgdGhlIGVuZW15LCB3aGF0IHRoZSBkaXNhZHZhbnRhZ2Ugb2YgcG9zaXRpb24gaGFkCiAgICAgICAgICAgICAgICAgICAgY2F1c2VkOyIgZW50ZXJ0YWluaW5nIHRoZSBzYW1lIHZpZXdzIG9mIGhpcyBkZXBhcnR1cmUgdGhhdCBoZSBoYWQgcHJldmlvdXNseQogICAgICAgICAgICAgICAgICAgIGhhZCwgaGUgbGVkIGZvcnRoIHRoZSBsZWdpb25zIGZyb20gdGhlIGNhbXAsIGFuZCBkcmV3IHVwIGhpcyBhcm15IGluIG9yZGVyIG9mCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlIGluIGEgc3VpdGFibGUgcGxhY2UuIFdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiwgbmV2ZXJ0aGVsZXNzLCB3b3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBkZXNjZW5kIHRvIHRoZSBsZXZlbCBncm91bmQsIGEgc2xpZ2h0IGNhdmFscnkgYWN0aW9uLCBhbmQgdGhhdCBhIHN1Y2Nlc3NmdWwKICAgICAgICAgICAgICAgICAgICBvbmUsIGhhdmluZyB0YWtlbiBwbGFjZSwgaGUgbGVkIGJhY2sgaGlzIGFybXkgaW50byB0aGUgY2FtcC4gV2hlbiBoZSBoYWQgZG9uZQogICAgICAgICAgICAgICAgICAgIHRoaXMsIHRoZSBuZXh0IGRheSwgdGhpbmtpbmcgdGhhdCBoZSBoYWQgZG9uZSBlbm91Z2ggdG8gbG93ZXIgdGhlIHByaWRlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBhbmQgdG8gZW5jb3VyYWdlIHRoZSBtaW5kcyBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycywgaGUgbW92ZWQgaGlzIGNhbXAgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4uIFRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15IG5vdCBldmVuIHRoZW4gcHVyc3VpbmcgdXMsIG9uIHRoZSB0aGlyZCBkYXkgaGUgcmVwYWlyZWQgdGhlIGJyaWRnZSBvdmVyCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyMTExNiIgcmVnPSJBbGxpZXIgWzMuNjE2LDQ1LjgzXSAocml2ZXIpLCBIYXV0ZS1Mb2lyZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QWxsaWVyPC9uYW1lPiwgYW5kIGxlZCBvdmVyIGhpcyB3aG9sZSBhcm15LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiwgbmV2ZXJ0aGVsZXNzLCB3b3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBkZXNjZW5kIHRvIHRoZSBsZXZlbCBncm91bmQsIGEgc2xpZ2h0IGNhdmFscnkgYWN0aW9uLCBhbmQgdGhhdCBhIHN1Y2Nlc3NmdWwKICAgICAgICAgICAgICAgICAgICBvbmUsIGhhdmluZyB0YWtlbiBwbGFjZSwgaGUgbGVkIGJhY2sgaGlzIGFybXkgaW50byB0aGUgY2FtcC4gV2hlbiBoZSBoYWQgZG9uZQogICAgICAgICAgICAgICAgICAgIHRoaXMsIHRoZSBuZXh0IGRheSwgdGhpbmtpbmcgdGhhdCBoZSBoYWQgZG9uZSBlbm91Z2ggdG8gbG93ZXIgdGhlIHByaWRlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBhbmQgdG8gZW5jb3VyYWdlIHRoZSBtaW5kcyBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycywgaGUgbW92ZWQgaGlzIGNhbXAgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4uIFRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15IG5vdCBldmVuIHRoZW4gcHVyc3VpbmcgdXMsIG9uIHRoZSB0aGlyZCBkYXkgaGUgcmVwYWlyZWQgdGhlIGJyaWRnZSBvdmVyCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyMTExNiIgcmVnPSJBbGxpZXIgWzMuNjE2LDQ1LjgzXSAocml2ZXIpLCBIYXV0ZS1Mb2lyZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QWxsaWVyPC9uYW1lPiwgYW5kIGxlZCBvdmVyIGhpcyB3aG9sZSBhcm15LiA8L3RyYW5zbGF0aW9uPg=="
translation['7.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyB0aGVuIGhlbGQgYW4gaW50ZXJ2aWV3IHdpdGggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WaXJpZG9tYXJ1czwvbmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBvcmVkaXJpeDwvbmFtZT4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWFuczwvbmFtZT4sIGhlIGxlYXJucyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGl0YXZpY3VzPC9uYW1lPiBoYWQgc2V0IG91dCB3aXRoIGFsbCB0aGUgY2F2YWxyeSB0byByYWlzZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT47IHRoYXQgaXQgd2FzIG5lY2Vzc2FyeSB0aGF0IHRoZXkgdG9vIHNob3VsZCBnbyBiZWZvcmUgaGltCiAgICAgICAgICAgICAgICAgICAgdG8gY29uZmlybSB0aGUgc3RhdGUgaW4gdGhlaXIgYWxsZWdpYW5jZS4gQWx0aG91Z2ggaGUgbm93IHNhdyBkaXN0aW5jdGx5IHRoZQogICAgICAgICAgICAgICAgICAgIHRyZWFjaGVyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gaW4gbWFueSB0aGluZ3MsIGFuZCB3YXMgb2Ygb3BpbmlvbiB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHJldm9sdCBvZiB0aGUgZW50aXJlIHN0YXRlIHdvdWxkIGJlIGhhc3RlbmVkIGJ5IHRoZWlyIGRlcGFydHVyZTsgeWV0IGhlIHRob3VnaHQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgc2hvdWxkIG5vdCBiZSBkZXRhaW5lZCwgbGVzdCBoZSBzaG91bGQgYXBwZWFyIGVpdGhlciB0byBvZmZlciBhbgogICAgICAgICAgICAgICAgICAgIGluc3VsdCwgb3IgYmV0cmF5IHNvbWUgc3VzcGljaW9uIG9mIGZlYXIuIEhlIGJyaWVmbHkgc3RhdGVzIHRvIHRoZW0gd2hlbgogICAgICAgICAgICAgICAgICAgIGRlcGFydGluZyBoaXMgc2VydmljZXMgdG93YXJkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPjogaW4gd2hhdCBhIHN0YXRlIGFuZCBob3cKICAgICAgICAgICAgICAgICAgICBodW1ibGVkIGhlIGhhZCBmb3VuZCB0aGVtLCBkcml2ZW4gaW50byB0aGVpciB0b3ducywgZGVwcml2ZWQgb2YgdGhlaXIgbGFuZHMsCiAgICAgICAgICAgICAgICAgICAgc3RyaXBwZWQgb2YgYWxsIHRoZWlyIGZvcmNlcywgYSB0cmlidXRlIGltcG9zZWQgb24gdGhlbSwgYW5kIGhvc3RhZ2VzIHdyZXN0ZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZW0gd2l0aCB0aGUgdXRtb3N0IGluc3VsdDsgYW5kIHRvIHdoYXQgY29uZGl0aW9uIGFuZCB0byB3aGF0IGdyZWF0bmVzcyBoZQogICAgICAgICAgICAgICAgICAgIGhhZCByYWlzZWQgdGhlbSwgW3NvIG11Y2ggc29dIHRoYXQgdGhleSBoYWQgbm90IG9ubHkgcmVjb3ZlcmVkIHRoZWlyIGZvcm1lcgogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLCBidXQgc2VlbWVkIHRvIHN1cnBhc3MgdGhlIGRpZ25pdHkgYW5kIGluZmx1ZW5jZSBvZiBhbGwgdGhlIHByZXZpb3VzCiAgICAgICAgICAgICAgICAgICAgZXJhcyBvZiB0aGVpciBoaXN0b3J5LiBBZnRlciBnaXZpbmcgdGhlc2UgYWRtb25pdGlvbnMgaGUgZGlzbWlzc2VkIHRoZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZpcmlkb21hcnVzPC9uYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcG9yZWRpcml4PC9uYW1lPiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW5zPC9uYW1lPiwgaGUgbGVhcm5zIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXRhdmljdXM8L25hbWU+IGhhZCBzZXQgb3V0IHdpdGggYWxsIHRoZSBjYXZhbHJ5IHRvIHJhaXNlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPjsgdGhhdCBpdCB3YXMgbmVjZXNzYXJ5IHRoYXQgdGhleSB0b28gc2hvdWxkIGdvIGJlZm9yZSBoaW0KICAgICAgICAgICAgICAgICAgICB0byBjb25maXJtIHRoZSBzdGF0ZSBpbiB0aGVpciBhbGxlZ2lhbmNlLiBBbHRob3VnaCBoZSBub3cgc2F3IGRpc3RpbmN0bHkgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJlYWNoZXJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBpbiBtYW55IHRoaW5ncywgYW5kIHdhcyBvZiBvcGluaW9uIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmV2b2x0IG9mIHRoZSBlbnRpcmUgc3RhdGUgd291bGQgYmUgaGFzdGVuZWQgYnkgdGhlaXIgZGVwYXJ0dXJlOyB5ZXQgaGUgdGhvdWdodAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBzaG91bGQgbm90IGJlIGRldGFpbmVkLCBsZXN0IGhlIHNob3VsZCBhcHBlYXIgZWl0aGVyIHRvIG9mZmVyIGFuCiAgICAgICAgICAgICAgICAgICAgaW5zdWx0LCBvciBiZXRyYXkgc29tZSBzdXNwaWNpb24gb2YgZmVhci4gSGUgYnJpZWZseSBzdGF0ZXMgdG8gdGhlbSB3aGVuCiAgICAgICAgICAgICAgICAgICAgZGVwYXJ0aW5nIGhpcyBzZXJ2aWNlcyB0b3dhcmQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+OiBpbiB3aGF0IGEgc3RhdGUgYW5kIGhvdwogICAgICAgICAgICAgICAgICAgIGh1bWJsZWQgaGUgaGFkIGZvdW5kIHRoZW0sIGRyaXZlbiBpbnRvIHRoZWlyIHRvd25zLCBkZXByaXZlZCBvZiB0aGVpciBsYW5kcywKICAgICAgICAgICAgICAgICAgICBzdHJpcHBlZCBvZiBhbGwgdGhlaXIgZm9yY2VzLCBhIHRyaWJ1dGUgaW1wb3NlZCBvbiB0aGVtLCBhbmQgaG9zdGFnZXMgd3Jlc3RlZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlbSB3aXRoIHRoZSB1dG1vc3QgaW5zdWx0OyBhbmQgdG8gd2hhdCBjb25kaXRpb24gYW5kIHRvIHdoYXQgZ3JlYXRuZXNzIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIHJhaXNlZCB0aGVtLCBbc28gbXVjaCBzb10gdGhhdCB0aGV5IGhhZCBub3Qgb25seSByZWNvdmVyZWQgdGhlaXIgZm9ybWVyCiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24sIGJ1dCBzZWVtZWQgdG8gc3VycGFzcyB0aGUgZGlnbml0eSBhbmQgaW5mbHVlbmNlIG9mIGFsbCB0aGUgcHJldmlvdXMKICAgICAgICAgICAgICAgICAgICBlcmFzIG9mIHRoZWlyIGhpc3RvcnkuIEFmdGVyIGdpdmluZyB0aGVzZSBhZG1vbml0aW9ucyBoZSBkaXNtaXNzZWQgdGhlbS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.55'] = ""
translation['7.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBvbiBiZWluZyBpbmZvcm1lZCBvZiB0aGVzZSBtb3ZlbWVudHMgd2FzIG9mCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiB0aGF0IGhlIG91Z2h0IHRvIG1ha2UgaGFzdGUsIGV2ZW4gaWYgaGUgc2hvdWxkIHJ1biBzb21lIHJpc2sgaW4KICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW5nIHRoZSBicmlkZ2VzLCBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0IGVuZ2FnZSBiZWZvcmUgZ3JlYXRlciBmb3JjZXMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZW5lbXkgc2hvdWxkIGJlIGNvbGxlY3RlZCBpbiB0aGF0IHBsYWNlLiBGb3Igbm8gb25lIGV2ZW4gdGhlbiBjb25zaWRlcmVkIGl0CiAgICAgICAgICAgICAgICAgICAgYW4gYWJzb2x1dGVseSBuZWNlc3NhcnkgYWN0LCB0aGF0IGNoYW5naW5nIGhpcyBkZXNpZ24gaGUgc2hvdWxkIGRpcmVjdCBoaXMgbWFyY2gKICAgICAgICAgICAgICAgICAgICBpbnRvIHRoZSBQcm92aW5jZSwgYm90aCBiZWNhdXNlIHRoZSBpbmZhbXkgYW5kIGRpc2dyYWNlIG9mIHRoZSB0aGluZywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGludGVydmVuaW5nIG1vdW50IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwOTAxMSIgcmVnPSIgICtDZXZlbm5lcyBbMy41LDQ0XSAocmVnaW9uIChnZW5lcmFsKSksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkNldmVubmVzCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgYW5kIHRoZSBkaWZmaWN1bHR5IG9mIHRoZSByb2FkcyBwcmV2ZW50ZWQgaGltOyBhbmQgZXNwZWNpYWxseSBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIHNlcmlvdXMgYXBwcmVoZW5zaW9ucyBmb3IgdGhlIHNhZmV0eSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHdob20gaGUgaGFkIGRldGFjaGVkLCBhbmQgdGhvc2UgbGVnaW9ucyB3aG9tIGhlIGhhZCBzZW50IHdpdGggaGltLiBUaGVyZWZvcmUsCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIG1hZGUgdmVyeSBsb25nIG1hcmNoZXMgYnkgZGF5IGFuZCBuaWdodCwgaGUgY2FtZSB0byB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMjQ5IiByZWc9IiAgK0xvaXJlIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkxvaXJlCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgY29udHJhcnkgdG8gdGhlIGV4cGVjdGF0aW9uIG9mIGFsbDsgYW5kIGhhdmluZyBieSBtZWFucyBvZiB0aGUgY2F2YWxyeSwKICAgICAgICAgICAgICAgICAgICBmb3VuZCBvdXQgYSBmb3JkLCBzdWl0YWJsZSBlbm91Z2ggY29uc2lkZXJpbmcgdGhlIGVtZXJnZW5jeSwgb2Ygc3VjaCBkZXB0aCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYXJtcyBhbmQgc2hvdWxkZXJzIGNvdWxkIGJlIGFib3ZlIHdhdGVyIGZvciBzdXBwb3J0aW5nIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgYWNjb3V0cmVtZW50cywgaGUgZGlzcGVyc2VkIGhpcyBjYXZhbHJ5IGluIHN1Y2ggYSBtYW5uZXIgYXMgdG8gYnJlYWsgdGhlIGZvcmNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGN1cnJlbnQsIGFuZCBoYXZpbmcgY29uZm91bmRlZCB0aGUgZW5lbXkgYXQgdGhlIGZpcnN0IHNpZ2h0LCBsZWQgaGlzIGFybXkKICAgICAgICAgICAgICAgICAgICBhY3Jvc3MgdGhlIHJpdmVyIGluIHNhZmV0eTsgYW5kIGZpbmRpbmcgY29ybiBhbmQgY2F0dGxlIGluIHRoZSBmaWVsZHMsIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaGluZyBoaXMgYXJteSB3aXRoIHRoZW0sIGhlIGRldGVybWluZWQgdG8gbWFyY2ggaW50byB0aGUgY291bnRyeSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDM1Njk3IiByZWc9IiAgK1Nlbm9uZXMgWzYuOTgzLDQ4LjRdIChpbmhhYml0ZWQgcGxhY2UpLCBWb3NnZXMsIExvcnJhaW5lLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5TZW5vbmVzIDwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gb24gYmVpbmcgaW5mb3JtZWQgb2YgdGhlc2UgbW92ZW1lbnRzIHdhcyBvZgogICAgICAgICAgICAgICAgICAgIG9waW5pb24gdGhhdCBoZSBvdWdodCB0byBtYWtlIGhhc3RlLCBldmVuIGlmIGhlIHNob3VsZCBydW4gc29tZSByaXNrIGluCiAgICAgICAgICAgICAgICAgICAgY29tcGxldGluZyB0aGUgYnJpZGdlcywgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBlbmdhZ2UgYmVmb3JlIGdyZWF0ZXIgZm9yY2VzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15IHNob3VsZCBiZSBjb2xsZWN0ZWQgaW4gdGhhdCBwbGFjZS4gRm9yIG5vIG9uZSBldmVuIHRoZW4gY29uc2lkZXJlZCBpdAogICAgICAgICAgICAgICAgICAgIGFuIGFic29sdXRlbHkgbmVjZXNzYXJ5IGFjdCwgdGhhdCBjaGFuZ2luZyBoaXMgZGVzaWduIGhlIHNob3VsZCBkaXJlY3QgaGlzIG1hcmNoCiAgICAgICAgICAgICAgICAgICAgaW50byB0aGUgUHJvdmluY2UsIGJvdGggYmVjYXVzZSB0aGUgaW5mYW15IGFuZCBkaXNncmFjZSBvZiB0aGUgdGhpbmcsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBpbnRlcnZlbmluZyBtb3VudCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDkwMTEiIHJlZz0iICArQ2V2ZW5uZXMgWzMuNSw0NF0gKHJlZ2lvbiAoZ2VuZXJhbCkpLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5DZXZlbm5lcwogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGFuZCB0aGUgZGlmZmljdWx0eSBvZiB0aGUgcm9hZHMgcHJldmVudGVkIGhpbTsgYW5kIGVzcGVjaWFsbHkgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBzZXJpb3VzIGFwcHJlaGVuc2lvbnMgZm9yIHRoZSBzYWZldHkgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB3aG9tIGhlIGhhZCBkZXRhY2hlZCwgYW5kIHRob3NlIGxlZ2lvbnMgd2hvbSBoZSBoYWQgc2VudCB3aXRoIGhpbS4gVGhlcmVmb3JlLAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBtYWRlIHZlcnkgbG9uZyBtYXJjaGVzIGJ5IGRheSBhbmQgbmlnaHQsIGhlIGNhbWUgdG8gdGhlIHJpdmVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjI0OSIgcmVnPSIgICtMb2lyZSAocml2ZXIpLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5Mb2lyZQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGNvbnRyYXJ5IHRvIHRoZSBleHBlY3RhdGlvbiBvZiBhbGw7IGFuZCBoYXZpbmcgYnkgbWVhbnMgb2YgdGhlIGNhdmFscnksCiAgICAgICAgICAgICAgICAgICAgZm91bmQgb3V0IGEgZm9yZCwgc3VpdGFibGUgZW5vdWdoIGNvbnNpZGVyaW5nIHRoZSBlbWVyZ2VuY3ksIG9mIHN1Y2ggZGVwdGggdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGFybXMgYW5kIHNob3VsZGVycyBjb3VsZCBiZSBhYm92ZSB3YXRlciBmb3Igc3VwcG9ydGluZyB0aGVpcgogICAgICAgICAgICAgICAgICAgIGFjY291dHJlbWVudHMsIGhlIGRpc3BlcnNlZCBoaXMgY2F2YWxyeSBpbiBzdWNoIGEgbWFubmVyIGFzIHRvIGJyZWFrIHRoZSBmb3JjZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBjdXJyZW50LCBhbmQgaGF2aW5nIGNvbmZvdW5kZWQgdGhlIGVuZW15IGF0IHRoZSBmaXJzdCBzaWdodCwgbGVkIGhpcyBhcm15CiAgICAgICAgICAgICAgICAgICAgYWNyb3NzIHRoZSByaXZlciBpbiBzYWZldHk7IGFuZCBmaW5kaW5nIGNvcm4gYW5kIGNhdHRsZSBpbiB0aGUgZmllbGRzLCBhZnRlcgogICAgICAgICAgICAgICAgICAgIHJlZnJlc2hpbmcgaGlzIGFybXkgd2l0aCB0aGVtLCBoZSBkZXRlcm1pbmVkIHRvIG1hcmNoIGludG8gdGhlIGNvdW50cnkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAzNTY5NyIgcmVnPSIgICtTZW5vbmVzIFs2Ljk4Myw0OC40XSAoaW5oYWJpdGVkIHBsYWNlKSwgVm9zZ2VzLCBMb3JyYWluZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2Vub25lcyA8L25hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['7.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIHRoZXNlIHRoaW5ncyBhcmUgYmVpbmcgZG9uZSBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+LCBsZWF2aW5nIGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGxhY2UiPkFnZW5kaWN1bTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0aGUgcmVjcnVpdHMgd2hvIGhhZCBsYXRlbHkgYXJyaXZlZCBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPiwgdG8gZ3VhcmQgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFnZ2FnZSwgbWFyY2hlcyB3aXRoIGZvdXIgbGVnaW9ucyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgwMzgiIHJlZz0iICArUGFyaXMgWzIuMzMzLDQ4Ljg2Nl0gKGluaGFiaXRlZCBwbGFjZSksIERlcGFydG1lbnQgZGUgVmlsbGUgZGUgUGFyaXMsIElsZS1kZS1GcmFuY2UsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkx1dGV0aWEgPC9uYW1lPiAod2hpY2ggaXMgYSB0b3duIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgwMzgiIHJlZz0iICArUGFyaXMgWzIuMzMzLDQ4Ljg2Nl0gKGluaGFiaXRlZCBwbGFjZSksIERlcGFydG1lbnQgZGUgVmlsbGUgZGUgUGFyaXMsIElsZS1kZS1GcmFuY2UsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlBhcmlzaWkgPC9uYW1lPiwgc2l0dWF0ZWQgb24gYW4gaXNsYW5kIG9uIHRoZSByaXZlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDk3MDciIHJlZz0iICArU2VpbmUgWzAuNDMzLDQ5LjQzM10gKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2VpbmUKICAgICAgICAgICAgICAgICAgICA8L25hbWU+KSwgd2hvc2UgYXJyaXZhbCBiZWluZyBkaXNjb3ZlcmVkIGJ5IHRoZSBlbmVteSwgbnVtZXJvdXMgZm9yY2VzIGFycml2ZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBuZWlnaGJvcmluZyBzdGF0ZXMuIFRoZSBzdXByZW1lIGNvbW1hbmQgaXMgaW50cnVzdGVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FtYWx1Z2VudXM8L25hbWU+IG9uZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdWxlcmNpPC9uYW1lPiwgd2hvLCBhbHRob3VnaAogICAgICAgICAgICAgICAgICAgIGFsbW9zdCB3b3JuIG91dCB3aXRoIGFnZSwgd2FzIGNhbGxlZCB0byB0aGF0IGhvbm9yIG9uIGFjY291bnQgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgZXh0cmFvcmRpbmFyeSBrbm93bGVkZ2Ugb2YgbWlsaXRhcnkgdGFjdGljcy4gSGUsIHdoZW4gaGUgb2JzZXJ2ZWQgdGhhdCB0aGVyZSB3YXMKICAgICAgICAgICAgICAgICAgICBhIGxhcmdlIG1hcnNoIHdoaWNoIGNvbW11bmljYXRlZCB3aXRoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDk3MDciIHJlZz0iICArU2VpbmUgWzAuNDMzLDQ5LjQzM10gKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2VpbmUgPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWQgYWxsIHRoYXQgY291bnRyeSBpbXBhc3NhYmxlLCBlbmNhbXBlZCB0aGVyZSwgYW5kIGRldGVybWluZWQgdG8gcHJldmVudAogICAgICAgICAgICAgICAgICAgIG91ciB0cm9vcHMgZnJvbSBwYXNzaW5nIGl0LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiwgbGVhdmluZyBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBsYWNlIj5BZ2VuZGljdW08L25hbWU+CiAgICAgICAgICAgICAgICAgICAgdGhlIHJlY3J1aXRzIHdobyBoYWQgbGF0ZWx5IGFycml2ZWQgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiIHJlZz0iSXRhbHkgWzEyLjgzMyw0Mi44MzNdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5JdGFseTwvbmFtZT4sIHRvIGd1YXJkIHRoZQogICAgICAgICAgICAgICAgICAgIGJhZ2dhZ2UsIG1hcmNoZXMgd2l0aCBmb3VyIGxlZ2lvbnMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MDM4IiByZWc9IiAgK1BhcmlzIFsyLjMzMyw0OC44NjZdIChpbmhhYml0ZWQgcGxhY2UpLCBEZXBhcnRtZW50IGRlIFZpbGxlIGRlIFBhcmlzLCBJbGUtZGUtRnJhbmNlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5MdXRldGlhIDwvbmFtZT4gKHdoaWNoIGlzIGEgdG93biBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MDM4IiByZWc9IiAgK1BhcmlzIFsyLjMzMyw0OC44NjZdIChpbmhhYml0ZWQgcGxhY2UpLCBEZXBhcnRtZW50IGRlIFZpbGxlIGRlIFBhcmlzLCBJbGUtZGUtRnJhbmNlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5QYXJpc2lpIDwvbmFtZT4sIHNpdHVhdGVkIG9uIGFuIGlzbGFuZCBvbiB0aGUgcml2ZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA5NzA3IiByZWc9IiAgK1NlaW5lIFswLjQzMyw0OS40MzNdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlNlaW5lCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiksIHdob3NlIGFycml2YWwgYmVpbmcgZGlzY292ZXJlZCBieSB0aGUgZW5lbXksIG51bWVyb3VzIGZvcmNlcyBhcnJpdmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgbmVpZ2hib3Jpbmcgc3RhdGVzLiBUaGUgc3VwcmVtZSBjb21tYW5kIGlzIGludHJ1c3RlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbWFsdWdlbnVzPC9uYW1lPiBvbmUgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXVsZXJjaTwvbmFtZT4sIHdobywgYWx0aG91Z2gKICAgICAgICAgICAgICAgICAgICBhbG1vc3Qgd29ybiBvdXQgd2l0aCBhZ2UsIHdhcyBjYWxsZWQgdG8gdGhhdCBob25vciBvbiBhY2NvdW50IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGV4dHJhb3JkaW5hcnkga25vd2xlZGdlIG9mIG1pbGl0YXJ5IHRhY3RpY3MuIEhlLCB3aGVuIGhlIG9ic2VydmVkIHRoYXQgdGhlcmUgd2FzCiAgICAgICAgICAgICAgICAgICAgYSBsYXJnZSBtYXJzaCB3aGljaCBjb21tdW5pY2F0ZWQgd2l0aCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA5NzA3IiByZWc9IiAgK1NlaW5lIFswLjQzMyw0OS40MzNdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlNlaW5lIDwvbmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkIGFsbCB0aGF0IGNvdW50cnkgaW1wYXNzYWJsZSwgZW5jYW1wZWQgdGhlcmUsIGFuZCBkZXRlcm1pbmVkIHRvIHByZXZlbnQKICAgICAgICAgICAgICAgICAgICBvdXIgdHJvb3BzIGZyb20gcGFzc2luZyBpdC4gPC90cmFuc2xhdGlvbj4="
translation['7.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+IGF0IGZpcnN0IGF0dGVtcHRlZCB0byByYWlzZQogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmluZWFlPC9uYW1lPiwgZmlsbCB1cCB0aGUgbWFyc2ggd2l0aCBodXJkbGVzIGFuZCBjbGF5LCBhbmQgc2VjdXJlIGEgcm9hZC4KICAgICAgICAgICAgICAgICAgICBBZnRlciBoZSBwZXJjZWl2ZWQgdGhhdCB0aGlzIHdhcyB0b28gZGlmZmljdWx0IHRvIGFjY29tcGxpc2gsIGhlIGlzc3VlZCBpbgogICAgICAgICAgICAgICAgICAgIHNpbGVuY2UgZnJvbSBoaXMgY2FtcCBhdCB0aGUgdGhpcmQgd2F0Y2gsIGFuZCByZWFjaGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODAwOSIgcmVnPSIgICtNZWx1biBbMi42NjYsNDguNTMzXSAoaW5oYWJpdGVkIHBsYWNlKSwgU2VpbmUtZXQtTWFybmUsIElsZS1kZS1GcmFuY2UsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPk1lbG9kdW51bSA8L25hbWU+IGJ5IHRoZSBzYW1lIHJvdXRlIGJ5IHdoaWNoIGhlIGNhbWUuIFRoaXMgaXMgYSB0b3duIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMzU2OTciIHJlZz0iICArU2Vub25lcyBbNi45ODMsNDguNF0gKGluaGFiaXRlZCBwbGFjZSksIFZvc2dlcywgTG9ycmFpbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlNlbm9uZXMgPC9uYW1lPiwgc2l0dWF0ZWQgb24gYW4gaXNsYW5kIGluIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDk3MDciIHJlZz0iICArU2VpbmUgWzAuNDMzLDQ5LjQzM10gKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2VpbmUKICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBhcyB3ZSBoYXZlIGp1c3QgYmVmb3JlIG9ic2VydmVkIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODAzOCIgcmVnPSIgICtQYXJpcyBbMi4zMzMsNDguODY2XSAoaW5oYWJpdGVkIHBsYWNlKSwgRGVwYXJ0bWVudCBkZSBWaWxsZSBkZSBQYXJpcywgSWxlLWRlLUZyYW5jZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+THV0ZXRpYSA8L25hbWU+LiBIYXZpbmcgc2VpemVkIHVwb24gYWJvdXQgZmlmdHkgc2hpcHMgYW5kIHF1aWNrbHkgam9pbmVkCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0b2dldGhlciwgYW5kIGhhdmluZyBwbGFjZWQgc29sZGllcnMgaW4gdGhlbSwgaGUgaW50aW1pZGF0ZWQgYnkgaGlzCiAgICAgICAgICAgICAgICAgICAgdW5leHBlY3RlZCBhcnJpdmFsIHRoZSBpbmhhYml0YW50cywgb2Ygd2hvbSBhIGdyZWF0IG51bWJlciBoYWQgYmVlbiBjYWxsZWQgb3V0CiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHdhciwgYW5kIG9idGFpbnMgcG9zc2Vzc2lvbiBvZiB0aGUgdG93biB3aXRob3V0IGEgY29udGVzdC4gSGF2aW5nCiAgICAgICAgICAgICAgICAgICAgcmVwYWlyZWQgdGhlIGJyaWRnZSwgd2hpY2ggdGhlIGVuZW15IGhhZCBicm9rZW4gZG93biBkdXJpbmcgdGhlIHByZWNlZGluZyBkYXlzLAogICAgICAgICAgICAgICAgICAgIGhlIGxlZCBvdmVyIGhpcyBhcm15LCBhbmQgYmVnYW4gdG8gbWFyY2ggYWxvbmcgdGhlIGJhbmtzIG9mIHRoZSByaXZlciB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgwMzgiIHJlZz0iICArUGFyaXMgWzIuMzMzLDQ4Ljg2Nl0gKGluaGFiaXRlZCBwbGFjZSksIERlcGFydG1lbnQgZGUgVmlsbGUgZGUgUGFyaXMsIElsZS1kZS1GcmFuY2UsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkx1dGV0aWEgPC9uYW1lPi4gVGhlIGVuZW15LCBvbiBsZWFybmluZyB0aGUgY2lyY3Vtc3RhbmNlIGZyb20gdGhvc2Ugd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgwMDkiIHJlZz0iICArTWVsdW4gWzIuNjY2LDQ4LjUzM10gKGluaGFiaXRlZCBwbGFjZSksIFNlaW5lLWV0LU1hcm5lLCBJbGUtZGUtRnJhbmNlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5NZWxvZHVudW0gPC9uYW1lPiwgc2V0IGZpcmUgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MDM4IiByZWc9IiAgK1BhcmlzIFsyLjMzMyw0OC44NjZdIChpbmhhYml0ZWQgcGxhY2UpLCBEZXBhcnRtZW50IGRlIFZpbGxlIGRlIFBhcmlzLCBJbGUtZGUtRnJhbmNlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5MdXRldGlhIDwvbmFtZT4sIGFuZCBvcmRlciB0aGUgYnJpZGdlcyBvZiB0aGF0IHRvd24gdG8gYmUgYnJva2VuIGRvd246IHRoZXkKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHNldCBvdXQgZnJvbSB0aGUgbWFyc2gsIGFuZCB0YWtlIHRoZWlyIHBvc2l0aW9uIG9uIHRoZSBiYW5rcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA5NzA3IiByZWc9IiAgK1NlaW5lIFswLjQzMyw0OS40MzNdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlNlaW5lIDwvbmFtZT4sIG92ZXIKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODAzOCIgcmVnPSIgICtQYXJpcyBbMi4zMzMsNDguODY2XSAoaW5oYWJpdGVkIHBsYWNlKSwgRGVwYXJ0bWVudCBkZSBWaWxsZSBkZSBQYXJpcywgSWxlLWRlLUZyYW5jZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+THV0ZXRpYSA8L25hbWU+IGFuZCBvcHBvc2l0ZSB0aGUgY2FtcCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+IGF0IGZpcnN0IGF0dGVtcHRlZCB0byByYWlzZQogICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmluZWFlPC9uYW1lPiwgZmlsbCB1cCB0aGUgbWFyc2ggd2l0aCBodXJkbGVzIGFuZCBjbGF5LCBhbmQgc2VjdXJlIGEgcm9hZC4KICAgICAgICAgICAgICAgICAgICBBZnRlciBoZSBwZXJjZWl2ZWQgdGhhdCB0aGlzIHdhcyB0b28gZGlmZmljdWx0IHRvIGFjY29tcGxpc2gsIGhlIGlzc3VlZCBpbgogICAgICAgICAgICAgICAgICAgIHNpbGVuY2UgZnJvbSBoaXMgY2FtcCBhdCB0aGUgdGhpcmQgd2F0Y2gsIGFuZCByZWFjaGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODAwOSIgcmVnPSIgICtNZWx1biBbMi42NjYsNDguNTMzXSAoaW5oYWJpdGVkIHBsYWNlKSwgU2VpbmUtZXQtTWFybmUsIElsZS1kZS1GcmFuY2UsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPk1lbG9kdW51bSA8L25hbWU+IGJ5IHRoZSBzYW1lIHJvdXRlIGJ5IHdoaWNoIGhlIGNhbWUuIFRoaXMgaXMgYSB0b3duIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMzU2OTciIHJlZz0iICArU2Vub25lcyBbNi45ODMsNDguNF0gKGluaGFiaXRlZCBwbGFjZSksIFZvc2dlcywgTG9ycmFpbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlNlbm9uZXMgPC9uYW1lPiwgc2l0dWF0ZWQgb24gYW4gaXNsYW5kIGluIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDk3MDciIHJlZz0iICArU2VpbmUgWzAuNDMzLDQ5LjQzM10gKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2VpbmUKICAgICAgICAgICAgICAgICAgICA8L25hbWU+LCBhcyB3ZSBoYXZlIGp1c3QgYmVmb3JlIG9ic2VydmVkIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODAzOCIgcmVnPSIgICtQYXJpcyBbMi4zMzMsNDguODY2XSAoaW5oYWJpdGVkIHBsYWNlKSwgRGVwYXJ0bWVudCBkZSBWaWxsZSBkZSBQYXJpcywgSWxlLWRlLUZyYW5jZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+THV0ZXRpYSA8L25hbWU+LiBIYXZpbmcgc2VpemVkIHVwb24gYWJvdXQgZmlmdHkgc2hpcHMgYW5kIHF1aWNrbHkgam9pbmVkCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0b2dldGhlciwgYW5kIGhhdmluZyBwbGFjZWQgc29sZGllcnMgaW4gdGhlbSwgaGUgaW50aW1pZGF0ZWQgYnkgaGlzCiAgICAgICAgICAgICAgICAgICAgdW5leHBlY3RlZCBhcnJpdmFsIHRoZSBpbmhhYml0YW50cywgb2Ygd2hvbSBhIGdyZWF0IG51bWJlciBoYWQgYmVlbiBjYWxsZWQgb3V0CiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHdhciwgYW5kIG9idGFpbnMgcG9zc2Vzc2lvbiBvZiB0aGUgdG93biB3aXRob3V0IGEgY29udGVzdC4gSGF2aW5nCiAgICAgICAgICAgICAgICAgICAgcmVwYWlyZWQgdGhlIGJyaWRnZSwgd2hpY2ggdGhlIGVuZW15IGhhZCBicm9rZW4gZG93biBkdXJpbmcgdGhlIHByZWNlZGluZyBkYXlzLAogICAgICAgICAgICAgICAgICAgIGhlIGxlZCBvdmVyIGhpcyBhcm15LCBhbmQgYmVnYW4gdG8gbWFyY2ggYWxvbmcgdGhlIGJhbmtzIG9mIHRoZSByaXZlciB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgwMzgiIHJlZz0iICArUGFyaXMgWzIuMzMzLDQ4Ljg2Nl0gKGluaGFiaXRlZCBwbGFjZSksIERlcGFydG1lbnQgZGUgVmlsbGUgZGUgUGFyaXMsIElsZS1kZS1GcmFuY2UsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkx1dGV0aWEgPC9uYW1lPi4gVGhlIGVuZW15LCBvbiBsZWFybmluZyB0aGUgY2lyY3Vtc3RhbmNlIGZyb20gdGhvc2Ugd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgwMDkiIHJlZz0iICArTWVsdW4gWzIuNjY2LDQ4LjUzM10gKGluaGFiaXRlZCBwbGFjZSksIFNlaW5lLWV0LU1hcm5lLCBJbGUtZGUtRnJhbmNlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5NZWxvZHVudW0gPC9uYW1lPiwgc2V0IGZpcmUgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MDM4IiByZWc9IiAgK1BhcmlzIFsyLjMzMyw0OC44NjZdIChpbmhhYml0ZWQgcGxhY2UpLCBEZXBhcnRtZW50IGRlIFZpbGxlIGRlIFBhcmlzLCBJbGUtZGUtRnJhbmNlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5MdXRldGlhIDwvbmFtZT4sIGFuZCBvcmRlciB0aGUgYnJpZGdlcyBvZiB0aGF0IHRvd24gdG8gYmUgYnJva2VuIGRvd246IHRoZXkKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHNldCBvdXQgZnJvbSB0aGUgbWFyc2gsIGFuZCB0YWtlIHRoZWlyIHBvc2l0aW9uIG9uIHRoZSBiYW5rcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA5NzA3IiByZWc9IiAgK1NlaW5lIFswLjQzMyw0OS40MzNdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlNlaW5lIDwvbmFtZT4sIG92ZXIKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODAzOCIgcmVnPSIgICtQYXJpcyBbMi4zMzMsNDguODY2XSAoaW5oYWJpdGVkIHBsYWNlKSwgRGVwYXJ0bWVudCBkZSBWaWxsZSBkZSBQYXJpcywgSWxlLWRlLUZyYW5jZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+THV0ZXRpYSA8L25hbWU+IGFuZCBvcHBvc2l0ZSB0aGUgY2FtcCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3YXMgbm93IHJlcG9ydGVkIHRvIGhhdmUgZGVwYXJ0ZWQgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDIyMzIiIHJlZz0iICArR2VyZ292aWUgWzMuMTE2LDQ1LjcxNl0gKGRlc2VydGVkIHNldHRsZW1lbnQpLCBQdXktZGUtRG9tZSwgQXV2ZXJnbmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcmdvdmlhIDwvbmFtZT47IGludGVsbGlnZW5jZSB3YXMgbGlrZXdpc2UgYnJvdWdodCB0byB0aGVtIGNvbmNlcm5pbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgcmV2b2x0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYW5kIGEgc3VjY2Vzc2Z1bCByaXNpbmcgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+OyBhbmQgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhhdmluZyBiZWVuCiAgICAgICAgICAgICAgICAgICAgcHJldmVudGVkIGZyb20gcHJvc2VjdXRpbmcgaGlzIGpvdXJuZXkgYW5kIGNyb3NzaW5nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIyNDkiIHJlZz0iICArTG9pcmUgKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TG9pcmUgPC9uYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGJlZW4gY29tcGVsbGVkIGJ5IHRoZSB3YW50IG9mIGNvcm4sIGhhZCBtYXJjaGVkIGhhc3RpbHkgdG8gdGhlIHByb3ZpbmNlLgogICAgICAgICAgICAgICAgICAgIEJ1dCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+LCB3aG8gaGFkIGJlZW4gcHJldmlvdXNseSBkaXNhZmZlY3RlZCBvZgogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMsIG9uIGxlYXJuaW5nIHRoZSByZXZvbHQgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCBiZWdhbiB0byBhc3NlbWJsZQogICAgICAgICAgICAgICAgICAgIGZvcmNlcyBhbmQgb3Blbmx5IHRvIHByZXBhcmUgZm9yIHdhci4gVGhlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiwgYXMKICAgICAgICAgICAgICAgICAgICB0aGUgY2hhbmdlIGluIGFmZmFpcnMgd2FzIHNvIGdyZWF0LCB0aG91Z2h0IHRoYXQgaGUgbXVzdCBhZG9wdCBhIHZlcnkgZGlmZmVyZW50CiAgICAgICAgICAgICAgICAgICAgc3lzdGVtIGZyb20gd2hhdCBoZSBoYWQgcHJldmlvdXNseSBpbnRlbmRlZCwgYW5kIGhlIGRpZCBub3Qgbm93IHRoaW5rIG9mIG1ha2luZwogICAgICAgICAgICAgICAgICAgIGFueSBuZXcgYWNxdWlzaXRpb25zLCBvciBvZiBwcm92b2tpbmcgdGhlIGVuZW15IHRvIGFuIGFjdGlvbjsgYnV0IHRoYXQgaGUgbWlnaHQKICAgICAgICAgICAgICAgICAgICBicmluZyBiYWNrIGhpcyBhcm15IHNhZmUgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VuZGljdW08L25hbWU+LiBGb3IsIG9uIG9uZSBzaWRlLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+LCBhIHN0YXRlIHdoaWNoIGhlbGQgdGhlIGhpZ2hlc3QgcmVwdXRhdGlvbiBmb3IKICAgICAgICAgICAgICAgICAgICBwcm93ZXNzIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgd2VyZSBwcmVzc2luZyBvbiBoaW07IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbXVsb2dlbnVzPC9uYW1lPiwgd2l0aCBhIGRpc2NpcGxpbmVkIGFuZCB3ZWxsLWVxdWlwcGVkIGFybXksIGhlbGQKICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgc2lkZTsgbW9yZW92ZXIsIGEgdmVyeSBncmVhdCByaXZlciBzZXBhcmF0ZWQgYW5kIGN1dCBvZmYgdGhlIGxlZ2lvbnMKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBnYXJyaXNvbiBhbmQgYmFnZ2FnZS4gSGUgc2F3IHRoYXQsIGluIGNvbnNlcXVlbmNlIG9mIHN1Y2ggZ3JlYXQKICAgICAgICAgICAgICAgICAgICBkaWZmaWN1bHRpZXMgYmVpbmcgdGhyb3duIGluIGhpcyB3YXksIGhlIG11c3Qgc2VlayBhaWQgZnJvbSBoaXMgb3duIGVuZXJneSBvZgogICAgICAgICAgICAgICAgICAgIGRpc3Bvc2l0aW9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdhcyBub3cgcmVwb3J0ZWQgdG8gaGF2ZSBkZXBhcnRlZCBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMjIzMiIgcmVnPSIgICtHZXJnb3ZpZSBbMy4xMTYsNDUuNzE2XSAoZGVzZXJ0ZWQgc2V0dGxlbWVudCksIFB1eS1kZS1Eb21lLCBBdXZlcmduZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VyZ292aWEgPC9uYW1lPjsgaW50ZWxsaWdlbmNlIHdhcyBsaWtld2lzZSBicm91Z2h0IHRvIHRoZW0gY29uY2VybmluZyB0aGUKICAgICAgICAgICAgICAgICAgICByZXZvbHQgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCBhbmQgYSBzdWNjZXNzZnVsIHJpc2luZyBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT47IGFuZCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIGJlZW4KICAgICAgICAgICAgICAgICAgICBwcmV2ZW50ZWQgZnJvbSBwcm9zZWN1dGluZyBoaXMgam91cm5leSBhbmQgY3Jvc3NpbmcgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjI0OSIgcmVnPSIgICtMb2lyZSAocml2ZXIpLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5Mb2lyZSA8L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgYmVlbiBjb21wZWxsZWQgYnkgdGhlIHdhbnQgb2YgY29ybiwgaGFkIG1hcmNoZWQgaGFzdGlseSB0byB0aGUgcHJvdmluY2UuCiAgICAgICAgICAgICAgICAgICAgQnV0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4sIHdobyBoYWQgYmVlbiBwcmV2aW91c2x5IGRpc2FmZmVjdGVkIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcywgb24gbGVhcm5pbmcgdGhlIHJldm9sdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIGJlZ2FuIHRvIGFzc2VtYmxlCiAgICAgICAgICAgICAgICAgICAgZm9yY2VzIGFuZCBvcGVubHkgdG8gcHJlcGFyZSBmb3Igd2FyLiBUaGVuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+LCBhcwogICAgICAgICAgICAgICAgICAgIHRoZSBjaGFuZ2UgaW4gYWZmYWlycyB3YXMgc28gZ3JlYXQsIHRob3VnaHQgdGhhdCBoZSBtdXN0IGFkb3B0IGEgdmVyeSBkaWZmZXJlbnQKICAgICAgICAgICAgICAgICAgICBzeXN0ZW0gZnJvbSB3aGF0IGhlIGhhZCBwcmV2aW91c2x5IGludGVuZGVkLCBhbmQgaGUgZGlkIG5vdCBub3cgdGhpbmsgb2YgbWFraW5nCiAgICAgICAgICAgICAgICAgICAgYW55IG5ldyBhY3F1aXNpdGlvbnMsIG9yIG9mIHByb3Zva2luZyB0aGUgZW5lbXkgdG8gYW4gYWN0aW9uOyBidXQgdGhhdCBoZSBtaWdodAogICAgICAgICAgICAgICAgICAgIGJyaW5nIGJhY2sgaGlzIGFybXkgc2FmZSB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZW5kaWN1bTwvbmFtZT4uIEZvciwgb24gb25lIHNpZGUsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4sIGEgc3RhdGUgd2hpY2ggaGVsZCB0aGUgaGlnaGVzdCByZXB1dGF0aW9uIGZvcgogICAgICAgICAgICAgICAgICAgIHByb3dlc3MgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB3ZXJlIHByZXNzaW5nIG9uIGhpbTsgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FtdWxvZ2VudXM8L25hbWU+LCB3aXRoIGEgZGlzY2lwbGluZWQgYW5kIHdlbGwtZXF1aXBwZWQgYXJteSwgaGVsZAogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlciBzaWRlOyBtb3Jlb3ZlciwgYSB2ZXJ5IGdyZWF0IHJpdmVyIHNlcGFyYXRlZCBhbmQgY3V0IG9mZiB0aGUgbGVnaW9ucwogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGdhcnJpc29uIGFuZCBiYWdnYWdlLiBIZSBzYXcgdGhhdCwgaW4gY29uc2VxdWVuY2Ugb2Ygc3VjaCBncmVhdAogICAgICAgICAgICAgICAgICAgIGRpZmZpY3VsdGllcyBiZWluZyB0aHJvd24gaW4gaGlzIHdheSwgaGUgbXVzdCBzZWVrIGFpZCBmcm9tIGhpcyBvd24gZW5lcmd5IG9mCiAgICAgICAgICAgICAgICAgICAgZGlzcG9zaXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['7.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZywgdGhlcmVmb3JlLCBjYWxsZWQgYSBjb3VuY2lsIG9mIHdhciBhIGxpdHRsZSBiZWZvcmUgZXZlbmluZywgaGUgZXhob3J0ZWQKICAgICAgICAgICAgICAgICAgICBoaXMgc29sZGllcnMgdG8gZXhlY3V0ZSB3aXRoIGRpbGlnZW5jZSBhbmQgZW5lcmd5IHN1Y2ggY29tbWFuZHMgYXMgaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgZ2l2ZTsgaGUgYXNzaWducyB0aGUgc2hpcHMgd2hpY2ggaGUgaGFkIGJyb3VnaHQgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgwMDkiIHJlZz0iICArTWVsdW4gWzIuNjY2LDQ4LjUzM10gKGluaGFiaXRlZCBwbGFjZSksIFNlaW5lLWV0LU1hcm5lLCBJbGUtZGUtRnJhbmNlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5NZWxvZHVudW0gPC9uYW1lPiB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGtuaWdodHMsIG9uZSB0byBlYWNoLAogICAgICAgICAgICAgICAgICAgIGFuZCBvcmRlcnMgdGhlbSB0byBmYWxsIGRvd24gdGhlIHJpdmVyIHNpbGVudGx5IGZvciBmb3VyIG1pbGVzLCBhdCB0aGUgZW5kIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvdXJ0aCB3YXRjaCwgYW5kIHRoZXJlIHdhaXQgZm9yIGhpbS4gSGUgbGVhdmVzIHRoZSBmaXZlIGNvaG9ydHMsIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJlZCB0byBiZSB0aGUgbW9zdCBzdGVhZHkgaW4gYWN0aW9uLCB0byBndWFyZCB0aGUgY2FtcDsgaGUgb3JkZXJzIHRoZQogICAgICAgICAgICAgICAgICAgIGZpdmUgcmVtYWluaW5nIGNvaG9ydHMgb2YgdGhlIHNhbWUgbGVnaW9uIHRvIHByb2NlZWQgYSBsaXR0bGUgYWZ0ZXIgbWlkbmlnaHQgdXAKICAgICAgICAgICAgICAgICAgICB0aGUgcml2ZXIgd2l0aCBhbGwgdGhlaXIgYmFnZ2FnZSwgaW4gYSBncmVhdCB0dW11bHQuIEhlIGNvbGxlY3RzIGFsc28gc29tZSBzbWFsbAogICAgICAgICAgICAgICAgICAgIGJvYXRzOyBhbmQgc2VuZHMgdGhlbSBpbiB0aGUgc2FtZSBkaXJlY3Rpb24sIHdpdGggb3JkZXJzIHRvIG1ha2UgYSBsb3VkIG5vaXNlIGluCiAgICAgICAgICAgICAgICAgICAgcm93aW5nLiBIZSBoaW1zZWxmLCBhIGxpdHRsZSBhZnRlciwgbWFyY2hlZCBvdXQgaW4gc2lsZW5jZSwgYW5kLCBhdCB0aGUgaGVhZCBvZgogICAgICAgICAgICAgICAgICAgIHRocmVlIGxlZ2lvbnMsIHNlZWtzIHRoYXQgcGxhY2UgdG8gd2hpY2ggaGUgaGFkIG9yZGVyZWQgdGhlIHNoaXBzIHRvIGJlIGJyb3VnaHQuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgwMDkiIHJlZz0iICArTWVsdW4gWzIuNjY2LDQ4LjUzM10gKGluaGFiaXRlZCBwbGFjZSksIFNlaW5lLWV0LU1hcm5lLCBJbGUtZGUtRnJhbmNlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5NZWxvZHVudW0gPC9uYW1lPiB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGtuaWdodHMsIG9uZSB0byBlYWNoLAogICAgICAgICAgICAgICAgICAgIGFuZCBvcmRlcnMgdGhlbSB0byBmYWxsIGRvd24gdGhlIHJpdmVyIHNpbGVudGx5IGZvciBmb3VyIG1pbGVzLCBhdCB0aGUgZW5kIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvdXJ0aCB3YXRjaCwgYW5kIHRoZXJlIHdhaXQgZm9yIGhpbS4gSGUgbGVhdmVzIHRoZSBmaXZlIGNvaG9ydHMsIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJlZCB0byBiZSB0aGUgbW9zdCBzdGVhZHkgaW4gYWN0aW9uLCB0byBndWFyZCB0aGUgY2FtcDsgaGUgb3JkZXJzIHRoZQogICAgICAgICAgICAgICAgICAgIGZpdmUgcmVtYWluaW5nIGNvaG9ydHMgb2YgdGhlIHNhbWUgbGVnaW9uIHRvIHByb2NlZWQgYSBsaXR0bGUgYWZ0ZXIgbWlkbmlnaHQgdXAKICAgICAgICAgICAgICAgICAgICB0aGUgcml2ZXIgd2l0aCBhbGwgdGhlaXIgYmFnZ2FnZSwgaW4gYSBncmVhdCB0dW11bHQuIEhlIGNvbGxlY3RzIGFsc28gc29tZSBzbWFsbAogICAgICAgICAgICAgICAgICAgIGJvYXRzOyBhbmQgc2VuZHMgdGhlbSBpbiB0aGUgc2FtZSBkaXJlY3Rpb24sIHdpdGggb3JkZXJzIHRvIG1ha2UgYSBsb3VkIG5vaXNlIGluCiAgICAgICAgICAgICAgICAgICAgcm93aW5nLiBIZSBoaW1zZWxmLCBhIGxpdHRsZSBhZnRlciwgbWFyY2hlZCBvdXQgaW4gc2lsZW5jZSwgYW5kLCBhdCB0aGUgaGVhZCBvZgogICAgICAgICAgICAgICAgICAgIHRocmVlIGxlZ2lvbnMsIHNlZWtzIHRoYXQgcGxhY2UgdG8gd2hpY2ggaGUgaGFkIG9yZGVyZWQgdGhlIHNoaXBzIHRvIGJlIGJyb3VnaHQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gaGUgaGFkIGFycml2ZWQgdGhlcmUsIHRoZSBlbmVteSdzIHNjb3V0cywgYXMgdGhleSB3ZXJlIHN0YXRpb25lZCBhbG9uZyBldmVyeQogICAgICAgICAgICAgICAgICAgIHBhcnQgb2YgdGhlIHJpdmVyLCBub3QgZXhwZWN0aW5nIGFuIGF0dGFjaywgYmVjYXVzZSBhIGdyZWF0IHN0b3JtIGhhZCBzdWRkZW5seQogICAgICAgICAgICAgICAgICAgIGFyaXNlbiwgd2VyZSBzdXJwcmlzZWQgYnkgb3VyIHNvbGRpZXJzOiB0aGUgaW5mYW50cnkgYW5kIGNhdmFscnkgYXJlIHF1aWNrbHkKICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRlZCwgdW5kZXIgdGhlIHN1cGVyaW50ZW5kZW5jZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGtuaWdodHMsIHdob20gaGUgaGFkIGFwcG9pbnRlZCB0byB0aGF0IG9mZmljZS4gQWxtb3N0IGF0IHRoZSBzYW1lIHRpbWUsIGEgbGl0dGxlCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGRheWxpZ2h0LCBpbnRlbGxpZ2VuY2Ugd2FzIGdpdmVuIHRvIHRoZSBlbmVteSB0aGF0IHRoZXJlIHdhcyBhbiB1bnVzdWFsCiAgICAgICAgICAgICAgICAgICAgdHVtdWx0IGluIHRoZSBjYW1wIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgYW5kIHRoYXQgYSBzdHJvbmcKICAgICAgICAgICAgICAgICAgICBmb3JjZSB3YXMgbWFyY2hpbmcgdXAgdGhlIHJpdmVyLCBhbmQgdGhhdCB0aGUgc291bmQgb2Ygb2FycyB3YXMgZGlzdGluY3RseSBoZWFyZAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBzYW1lIHF1YXJ0ZXIsIGFuZCB0aGF0IHNvbGRpZXJzIHdlcmUgYmVpbmcgY29udmV5ZWQgYWNyb3NzIGluIHNoaXBzIGEKICAgICAgICAgICAgICAgICAgICBsaXR0bGUgYmVsb3cuIE9uIGhlYXJpbmcgdGhlc2UgdGhpbmdzLCBiZWNhdXNlIHRoZXkgd2VyZSBvZiBvcGluaW9uIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucyB3ZXJlIHBhc3NpbmcgaW4gdGhyZWUgZGlmZmVyZW50IHBsYWNlcywgYW5kIHRoYXQgdGhlIGVudGlyZSBhcm15LCBiZWluZwogICAgICAgICAgICAgICAgICAgIHRlcnJpZmllZCBieSB0aGUgcmV2b2x0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgd2VyZSBwcmVwYXJpbmcgZm9yIGZsaWdodCwKICAgICAgICAgICAgICAgICAgICB0aGV5IGRpdmlkZWQgdGhlaXIgZm9yY2VzIGFsc28gaW50byB0aHJlZSBkaXZpc2lvbnMuIEZvciBsZWF2aW5nIGEgZ3VhcmQKICAgICAgICAgICAgICAgICAgICBvcHBvc2l0ZSB0byB0aGUgY2FtcCBhbmQgc2VuZGluZyBhIHNtYWxsIGJvZHkgaW4gdGhlIGRpcmVjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1ldGlvc2VkdW08L25hbWU+LCB3aXRoIG9yZGVycyB0byBhZHZhbmNlIGFzIGZhciBhcyB0aGUgc2hpcHMgd291bGQKICAgICAgICAgICAgICAgICAgICBwcm9jZWVkLCB0aGV5IGxlZCB0aGUgcmVzdCBvZiB0aGVpciB0cm9vcHMgYWdhaW5zdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBrbmlnaHRzLCB3aG9tIGhlIGhhZCBhcHBvaW50ZWQgdG8gdGhhdCBvZmZpY2UuIEFsbW9zdCBhdCB0aGUgc2FtZSB0aW1lLCBhIGxpdHRsZQogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBkYXlsaWdodCwgaW50ZWxsaWdlbmNlIHdhcyBnaXZlbiB0byB0aGUgZW5lbXkgdGhhdCB0aGVyZSB3YXMgYW4gdW51c3VhbAogICAgICAgICAgICAgICAgICAgIHR1bXVsdCBpbiB0aGUgY2FtcCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIGFuZCB0aGF0IGEgc3Ryb25nCiAgICAgICAgICAgICAgICAgICAgZm9yY2Ugd2FzIG1hcmNoaW5nIHVwIHRoZSByaXZlciwgYW5kIHRoYXQgdGhlIHNvdW5kIG9mIG9hcnMgd2FzIGRpc3RpbmN0bHkgaGVhcmQKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2FtZSBxdWFydGVyLCBhbmQgdGhhdCBzb2xkaWVycyB3ZXJlIGJlaW5nIGNvbnZleWVkIGFjcm9zcyBpbiBzaGlwcyBhCiAgICAgICAgICAgICAgICAgICAgbGl0dGxlIGJlbG93LiBPbiBoZWFyaW5nIHRoZXNlIHRoaW5ncywgYmVjYXVzZSB0aGV5IHdlcmUgb2Ygb3BpbmlvbiB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGxlZ2lvbnMgd2VyZSBwYXNzaW5nIGluIHRocmVlIGRpZmZlcmVudCBwbGFjZXMsIGFuZCB0aGF0IHRoZSBlbnRpcmUgYXJteSwgYmVpbmcKICAgICAgICAgICAgICAgICAgICB0ZXJyaWZpZWQgYnkgdGhlIHJldm9sdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIHdlcmUgcHJlcGFyaW5nIGZvciBmbGlnaHQsCiAgICAgICAgICAgICAgICAgICAgdGhleSBkaXZpZGVkIHRoZWlyIGZvcmNlcyBhbHNvIGludG8gdGhyZWUgZGl2aXNpb25zLiBGb3IgbGVhdmluZyBhIGd1YXJkCiAgICAgICAgICAgICAgICAgICAgb3Bwb3NpdGUgdG8gdGhlIGNhbXAgYW5kIHNlbmRpbmcgYSBzbWFsbCBib2R5IGluIHRoZSBkaXJlY3Rpb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZXRpb3NlZHVtPC9uYW1lPiwgd2l0aCBvcmRlcnMgdG8gYWR2YW5jZSBhcyBmYXIgYXMgdGhlIHNoaXBzIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZCwgdGhleSBsZWQgdGhlIHJlc3Qgb2YgdGhlaXIgdHJvb3BzIGFnYWluc3QgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['7.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ5IGRheS1icmVhayBhbGwgb3VyIHNvbGRpZXJzIHdlcmUgYnJvdWdodCBhY3Jvc3MsIGFuZCB0aGUgYXJteSBvZiB0aGUgZW5lbXkgd2FzCiAgICAgICAgICAgICAgICAgICAgaW4gc2lnaHQuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+LCBoYXZpbmcgZW5jb3VyYWdlZCBoaXMgc29sZGllcnMgInRvCiAgICAgICAgICAgICAgICAgICAgcmV0YWluIHRoZSBtZW1vcnkgb2YgdGhlaXIgYW5jaWVudCB2YWxvciwgYW5kIHNvIG1hbnkgbW9zdCBzdWNjZXNzZnVsIGFjdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGltYWdpbmUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhpbXNlbGYsIHVuZGVyIHdob3NlIGNvbW1hbmQgdGhleQogICAgICAgICAgICAgICAgICAgIGhhZCBzbyBvZnRlbiByb3V0ZWQgdGhlIGVuZW15LCB0byBiZSBwcmVzZW50LCIgZ2l2ZXMgdGhlIHNpZ25hbCBmb3IgYWN0aW9uLiBBdAogICAgICAgICAgICAgICAgICAgIHRoZSBmaXJzdCBvbnNldCB0aGUgZW5lbXkgYXJlIGJlYXRlbiBhbmQgcHV0IHRvIGZsaWdodCBpbiB0aGUgcmlnaHQgd2luZywgd2hlcmUKICAgICAgICAgICAgICAgICAgICB0aGUgc2V2ZW50aCBsZWdpb24gc3Rvb2Q6IG9uIHRoZSBsZWZ0IHdpbmcsIHdoaWNoIHBvc2l0aW9uIHRoZSB0d2VsZnRoIGxlZ2lvbgogICAgICAgICAgICAgICAgICAgIGhlbGQsIGFsdGhvdWdoIHRoZSBmaXJzdCByYW5rcyBmZWxsIHRyYW5zZml4ZWQgYnkgdGhlIGphdmVsaW5zIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgeWV0IHRoZSByZXN0IHJlc2lzdGVkIG1vc3QgYnJhdmVseTsgbm9yIGRpZCBhbnkKICAgICAgICAgICAgICAgICAgICBvbmUgb2YgdGhlbSBzaG93IHRoZSBzbGlnaHRlc3QgaW50ZW50aW9uIG9mIGZseWluZy4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW11bG9nZW51czwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhlIGdlbmVyYWwgb2YgdGhlIGVuZW15LCB3YXMgcHJlc2VudCBhbmQgZW5jb3VyYWdlZCBoaXMgdHJvb3BzLiBCdXQgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBpc3N1ZSBvZiB0aGUgdmljdG9yeSB3YXMgc3RpbGwgdW5jZXJ0YWluLCBhbmQgdGhlIGNpcmN1bXN0YW5jZXMgd2hpY2ggd2VyZQogICAgICAgICAgICAgICAgICAgIHRha2luZyBwbGFjZSBvbiB0aGUgbGVmdCB3aW5nIHdlcmUgYW5ub3VuY2VkIHRvIHRoZSB0cmlidW5lcyBvZiB0aGUgc2V2ZW50aAogICAgICAgICAgICAgICAgICAgIGxlZ2lvbiwgdGhleSBmYWNlZCBhYm91dCB0aGVpciBsZWdpb24gdG8gdGhlIGVuZW15J3MgcmVhciBhbmQgYXR0YWNrZWQgaXQ6IG5vdAogICAgICAgICAgICAgICAgICAgIGV2ZW4gdGhlbiBkaWQgYW55IG9uZSByZXRyZWF0LCBidXQgYWxsIHdlcmUgc3Vycm91bmRlZCBhbmQgc2xhaW4uCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FtdWxvZ2VudXM8L25hbWU+IG1ldCB0aGUgc2FtZSBmYXRlLiBCdXQgdGhvc2Ugd2hvIHdlcmUgbGVmdCBhcyBhCiAgICAgICAgICAgICAgICAgICAgZ3VhcmQgb3Bwb3NpdGUgdGhlIGNhbXAgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4sIHdoZW4gdGhleSBoZWFyZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGJhdHRsZSB3YXMgY29tbWVuY2VkLCBtYXJjaGVkIHRvIGFpZCB0aGVpciBjb3VudHJ5bWVuIGFuZCB0YWtlCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiBvZiBhIGhpbGwsIGJ1dCB3ZXJlIHVuYWJsZSB0byB3aXRoc3RhbmQgdGhlIGF0dGFjayBvZiB0aGUgdmljdG9yaW91cwogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzLiBJbiB0aGlzIG1hbm5lciwgbWl4ZWQgd2l0aCB0aGVpciBvd24gZnVnaXRpdmVzLCBzdWNoIGFzIHRoZSB3b29kcyBhbmQKICAgICAgICAgICAgICAgICAgICBtb3VudGFpbnMgZGlkIG5vdCBzaGVsdGVyIHdlcmUgY3V0IHRvIHBpZWNlcyBieSBvdXIgY2F2YWxyeS4gV2hlbiB0aGlzIGJhdHRsZQogICAgICAgICAgICAgICAgICAgIHdhcyBmaW5pc2hlZCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4gcmV0dXJucyB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZW5kaWN1bTwvbmFtZT4sIHdoZXJlIHRoZSBiYWdnYWdlIG9mIHRoZSB3aG9sZSBhcm15IGhhZCBiZWVuIGxlZnQ6CiAgICAgICAgICAgICAgICAgICAgZnJvbSBpdCBoZSBtYXJjaGVkIHdpdGggYWxsIGhpcyBmb3JjZXMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4sIGhhdmluZyBlbmNvdXJhZ2VkIGhpcyBzb2xkaWVycyAidG8KICAgICAgICAgICAgICAgICAgICByZXRhaW4gdGhlIG1lbW9yeSBvZiB0aGVpciBhbmNpZW50IHZhbG9yLCBhbmQgc28gbWFueSBtb3N0IHN1Y2Nlc3NmdWwgYWN0aW9ucywKICAgICAgICAgICAgICAgICAgICBhbmQgaW1hZ2luZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGltc2VsZiwgdW5kZXIgd2hvc2UgY29tbWFuZCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIHNvIG9mdGVuIHJvdXRlZCB0aGUgZW5lbXksIHRvIGJlIHByZXNlbnQsIiBnaXZlcyB0aGUgc2lnbmFsIGZvciBhY3Rpb24uIEF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGZpcnN0IG9uc2V0IHRoZSBlbmVteSBhcmUgYmVhdGVuIGFuZCBwdXQgdG8gZmxpZ2h0IGluIHRoZSByaWdodCB3aW5nLCB3aGVyZQogICAgICAgICAgICAgICAgICAgIHRoZSBzZXZlbnRoIGxlZ2lvbiBzdG9vZDogb24gdGhlIGxlZnQgd2luZywgd2hpY2ggcG9zaXRpb24gdGhlIHR3ZWxmdGggbGVnaW9uCiAgICAgICAgICAgICAgICAgICAgaGVsZCwgYWx0aG91Z2ggdGhlIGZpcnN0IHJhbmtzIGZlbGwgdHJhbnNmaXhlZCBieSB0aGUgamF2ZWxpbnMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LCB5ZXQgdGhlIHJlc3QgcmVzaXN0ZWQgbW9zdCBicmF2ZWx5OyBub3IgZGlkIGFueQogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aGVtIHNob3cgdGhlIHNsaWdodGVzdCBpbnRlbnRpb24gb2YgZmx5aW5nLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbXVsb2dlbnVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB0aGUgZ2VuZXJhbCBvZiB0aGUgZW5lbXksIHdhcyBwcmVzZW50IGFuZCBlbmNvdXJhZ2VkIGhpcyB0cm9vcHMuIEJ1dCB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIGlzc3VlIG9mIHRoZSB2aWN0b3J5IHdhcyBzdGlsbCB1bmNlcnRhaW4sIGFuZCB0aGUgY2lyY3Vtc3RhbmNlcyB3aGljaCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgdGFraW5nIHBsYWNlIG9uIHRoZSBsZWZ0IHdpbmcgd2VyZSBhbm5vdW5jZWQgdG8gdGhlIHRyaWJ1bmVzIG9mIHRoZSBzZXZlbnRoCiAgICAgICAgICAgICAgICAgICAgbGVnaW9uLCB0aGV5IGZhY2VkIGFib3V0IHRoZWlyIGxlZ2lvbiB0byB0aGUgZW5lbXkncyByZWFyIGFuZCBhdHRhY2tlZCBpdDogbm90CiAgICAgICAgICAgICAgICAgICAgZXZlbiB0aGVuIGRpZCBhbnkgb25lIHJldHJlYXQsIGJ1dCBhbGwgd2VyZSBzdXJyb3VuZGVkIGFuZCBzbGFpbi4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW11bG9nZW51czwvbmFtZT4gbWV0IHRoZSBzYW1lIGZhdGUuIEJ1dCB0aG9zZSB3aG8gd2VyZSBsZWZ0IGFzIGEKICAgICAgICAgICAgICAgICAgICBndWFyZCBvcHBvc2l0ZSB0aGUgY2FtcCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiwgd2hlbiB0aGV5IGhlYXJkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgYmF0dGxlIHdhcyBjb21tZW5jZWQsIG1hcmNoZWQgdG8gYWlkIHRoZWlyIGNvdW50cnltZW4gYW5kIHRha2UKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uIG9mIGEgaGlsbCwgYnV0IHdlcmUgdW5hYmxlIHRvIHdpdGhzdGFuZCB0aGUgYXR0YWNrIG9mIHRoZSB2aWN0b3Jpb3VzCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMuIEluIHRoaXMgbWFubmVyLCBtaXhlZCB3aXRoIHRoZWlyIG93biBmdWdpdGl2ZXMsIHN1Y2ggYXMgdGhlIHdvb2RzIGFuZAogICAgICAgICAgICAgICAgICAgIG1vdW50YWlucyBkaWQgbm90IHNoZWx0ZXIgd2VyZSBjdXQgdG8gcGllY2VzIGJ5IG91ciBjYXZhbHJ5LiBXaGVuIHRoaXMgYmF0dGxlCiAgICAgICAgICAgICAgICAgICAgd2FzIGZpbmlzaGVkLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiByZXR1cm5zIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlbmRpY3VtPC9uYW1lPiwgd2hlcmUgdGhlIGJhZ2dhZ2Ugb2YgdGhlIHdob2xlIGFybXkgaGFkIGJlZW4gbGVmdDoKICAgICAgICAgICAgICAgICAgICBmcm9tIGl0IGhlIG1hcmNoZWQgd2l0aCBhbGwgaGlzIGZvcmNlcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.63'] = ""
translation['7.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBsYXR0ZXIgZGVtYW5kcyBob3N0YWdlcyBmcm9tIHRoZSByZW1haW5pbmcgc3RhdGVzOyBuYXksIG1vcmUsIGFwcG9pbnRlZCBhIGRheQogICAgICAgICAgICAgICAgICAgIGZvciB0aGlzIHByb2NlZWRpbmc7IGhlIG9yZGVycyBhbGwgdGhlIGNhdmFscnksIGZpZnRlZW4gdGhvdXNhbmQgaW4gbnVtYmVyLCB0bwogICAgICAgICAgICAgICAgICAgIHF1aWNrbHkgYXNzZW1ibGUgaGVyZTsgaGUgc2F5cyB0aGF0IGhlIHdpbGwgYmUgY29udGVudCB3aXRoIHRoZSBpbmZhbnRyeSB3aGljaAogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBiZWZvcmUsIGFuZCB3b3VsZCBub3QgdGVtcHQgZm9ydHVuZSBub3IgY29tZSB0byBhIHJlZ3VsYXIgZW5nYWdlbWVudDsgYnV0CiAgICAgICAgICAgICAgICAgICAgc2luY2UgaGUgaGFkIGFidW5kYW5jZSBvZiBjYXZhbHJ5LCBpdCB3b3VsZCBiZSB2ZXJ5IGVhc3kgZm9yIGhpbSB0byBwcmV2ZW50IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiBmcm9tIG9idGFpbmluZyBmb3JhZ2Ugb3IgY29ybiwgcHJvdmlkZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgdGhlbXNlbHZlcyBzaG91bGQgcmVzb2x1dGVseSBkZXN0cm95IHRoZWlyIGNvcm4gYW5kIHNldCBmaXJlIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaG91c2VzOyBieSB3aGljaCBzYWNyaWZpY2Ugb2YgcHJpdmF0ZSBwcm9wZXJ0eSB0aGV5IHdvdWxkIGV2aWRlbnRseSBvYnRhaW4KICAgICAgICAgICAgICAgICAgICBwZXJwZXR1YWwgZG9taW5pb24gYW5kIGZyZWVkb20uIEFmdGVyIGFycmFuZ2luZyB0aGVzZSBtYXR0ZXJzLCBoZSBsZXZpZXMgdGVuCiAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQgaW5mYW50cnkgb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlZ3VzaWFuaTwvbmFtZT4sIHdobwogICAgICAgICAgICAgICAgICAgIGJvcmRlciBvbiBvdXIgcHJvdmluY2U6IHRvIHRoZXNlIGhlIGFkZHMgZWlnaHQgaHVuZHJlZCBob3JzZS4gSGUgc2V0cyBvdmVyIHRoZW0KICAgICAgICAgICAgICAgICAgICB0aGUgYnJvdGhlciBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwb3JlZGlyaXg8L25hbWU+LCBhbmQgb3JkZXJzIGhpbSB0byB3YWdlIHdhciBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbG9icm9nZXM8L25hbWU+LiBPbiB0aGUgb3RoZXIgc2lkZSBoZSBzZW5kcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWJhbGk8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBuZWFyZXN0IGNhbnRvbnMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4gYWdhaW5zdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWx2aWk8L25hbWU+OyBoZSBsaWtld2lzZSBzZW5kcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5SdXRlbmk8L25hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZHVyY2k8L25hbWU+IHRvIGxheSB3YXN0ZSB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Vm9sY2FlCiAgICAgICAgICAgICAgICAgICAgICAgIEFyZWNvbWljaTwvbmFtZT4uIEJlc2lkZXMsIGJ5IHNlY3JldCBtZXNzYWdlcyBhbmQgZW1iYXNzaWVzLCBoZSB0YW1wZXJzIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGxvYnJvZ2VzPC9uYW1lPiwgd2hvc2UgbWluZHMsIGhlIGhvcGVzLCBoYWQgbm90IHlldCBzZXR0bGVkIGRvd24KICAgICAgICAgICAgICAgICAgICBhZnRlciB0aGUgZXhjaXRlbWVudCBvZiB0aGUgbGF0ZSB3YXIuIFRvIHRoZWlyIG5vYmxlcyBoZSBwcm9taXNlcyBtb25leSwgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgc3RhdGUgdGhlIGRvbWluaW9uIG9mIHRoZSB3aG9sZSBwcm92aW5jZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGZyb20gb2J0YWluaW5nIGZvcmFnZSBvciBjb3JuLCBwcm92aWRlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSB0aGVtc2VsdmVzIHNob3VsZCByZXNvbHV0ZWx5IGRlc3Ryb3kgdGhlaXIgY29ybiBhbmQgc2V0IGZpcmUgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBob3VzZXM7IGJ5IHdoaWNoIHNhY3JpZmljZSBvZiBwcml2YXRlIHByb3BlcnR5IHRoZXkgd291bGQgZXZpZGVudGx5IG9idGFpbgogICAgICAgICAgICAgICAgICAgIHBlcnBldHVhbCBkb21pbmlvbiBhbmQgZnJlZWRvbS4gQWZ0ZXIgYXJyYW5naW5nIHRoZXNlIG1hdHRlcnMsIGhlIGxldmllcyB0ZW4KICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCBpbmZhbnRyeSBvbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VndXNpYW5pPC9uYW1lPiwgd2hvCiAgICAgICAgICAgICAgICAgICAgYm9yZGVyIG9uIG91ciBwcm92aW5jZTogdG8gdGhlc2UgaGUgYWRkcyBlaWdodCBodW5kcmVkIGhvcnNlLiBIZSBzZXRzIG92ZXIgdGhlbQogICAgICAgICAgICAgICAgICAgIHRoZSBicm90aGVyIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBvcmVkaXJpeDwvbmFtZT4sIGFuZCBvcmRlcnMgaGltIHRvIHdhZ2Ugd2FyIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsb2Jyb2dlczwvbmFtZT4uIE9uIHRoZSBvdGhlciBzaWRlIGhlIHNlbmRzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhYmFsaTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIG5lYXJlc3QgY2FudG9ucyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pPC9uYW1lPiBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZpaTwvbmFtZT47IGhlIGxpa2V3aXNlIHNlbmRzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlJ1dGVuaTwvbmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FkdXJjaTwvbmFtZT4gdG8gbGF5IHdhc3RlIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Wb2xjYWUKICAgICAgICAgICAgICAgICAgICAgICAgQXJlY29taWNpPC9uYW1lPi4gQmVzaWRlcywgYnkgc2VjcmV0IG1lc3NhZ2VzIGFuZCBlbWJhc3NpZXMsIGhlIHRhbXBlcnMgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbG9icm9nZXM8L25hbWU+LCB3aG9zZSBtaW5kcywgaGUgaG9wZXMsIGhhZCBub3QgeWV0IHNldHRsZWQgZG93bgogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSBleGNpdGVtZW50IG9mIHRoZSBsYXRlIHdhci4gVG8gdGhlaXIgbm9ibGVzIGhlIHByb21pc2VzIG1vbmV5LCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICB0aGVpciBzdGF0ZSB0aGUgZG9taW5pb24gb2YgdGhlIHdob2xlIHByb3ZpbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBvbmx5IGd1YXJkcyBwcm92aWRlZCBhZ2FpbnN0IGFsbCB0aGVzZSBjb250aW5nZW5jaWVzIHdlcmUgdHdlbnR5LXR3byBjb2hvcnRzLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdlcmUgY29sbGVjdGVkIGZyb20gdGhlIGVudGlyZSBwcm92aW5jZSBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y2l1cyBDYWVzYXI8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICBsaWV1dGVuYW50LCBhbmQgb3Bwb3NlZCB0byB0aGUgZW5lbXkgaW4gZXZlcnkgcXVhcnRlci4gVGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsdmlpPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB2b2x1bnRhcmlseSBlbmdhZ2luZyBpbiBiYXR0bGUgd2l0aCB0aGVpciBuZWlnaGJvcnMsIGFyZSBkZWZlYXRlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMgVmFsZXJpdXMgRG9ub3RhdXJ1czwvbmFtZT4sIHRoZSBzb24gb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWJ1cnVzPC9uYW1lPiwgdGhlIHByaW5jaXBhbCBtYW4gb2YgdGhlIHN0YXRlLCBhbmQgc2V2ZXJhbCBvdGhlcnMsIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgc2xhaW4sIHRoZXkgYXJlIGZvcmNlZCB0byByZXRpcmUgd2l0aGluIHRoZWlyIHRvd25zIGFuZCBmb3J0aWZpY2F0aW9ucy4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsb2Jyb2dlczwvbmFtZT4sIHBsYWNpbmcgZ3VhcmRzIGFsb25nIHRoZSBjb3Vyc2Ugb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lCiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPiwgZGVmZW5kIHRoZWlyIGZyb250aWVycyB3aXRoIGdyZWF0IHZpZ2lsYW5jZSBhbmQgZW5lcmd5LiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGFzIGhlIHBlcmNlaXZlZCB0aGF0IHRoZSBlbmVteSB3ZXJlIHN1cGVyaW9yIGluCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSwgYW5kIGhlIGhpbXNlbGYgY291bGQgcmVjZWl2ZSBubyBhaWQgZnJvbSB0aGUgUHJvdmluY2Ugb3IgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIiByZWc9Ikl0YWx5IFsxMi44MzMsNDIuODMzXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+SXRhbHk8L25hbWU+LCB3aGlsZSBhbGwgY29tbXVuaWNhdGlvbiB3YXMgY3V0IG9mZiwgc2VuZHMgYWNyb3NzIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4gaW50byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAwODQiIHJlZz0iICArR2VybWFueSBbMTAuNSw1MS41XSAobmF0aW9uKSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlcm1hbnkgPC9uYW1lPiB0byB0aG9zZQogICAgICAgICAgICAgICAgICAgIHN0YXRlcyB3aGljaCBoZSBoYWQgc3ViZHVlZCBpbiB0aGUgcHJlY2VkaW5nIGNhbXBhaWducywgYW5kIHN1bW1vbnMgZnJvbSB0aGVtCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSBhbmQgdGhlIGxpZ2h0LWFybWVkIGluZmFudHJ5LCB3aG8gd2VyZSBhY2N1c3RvbWVkIHRvIGVuZ2FnZSBhbW9uZyB0aGVtLgogICAgICAgICAgICAgICAgICAgIE9uIHRoZWlyIGFycml2YWwsIGFzIHRoZXkgd2VyZSBtb3VudGVkIG9uIHVuc2VydmljZWFibGUgaG9yc2VzLCBoZSB0YWtlcyBob3JzZXMKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBtaWxpdGFyeSB0cmlidW5lcyBhbmQgdGhlIHJlc3QsIG5heSwgZXZlbiBmcm9tIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGtuaWdodHMgYW5kIHZldGVyYW5zLCBhbmQgZGlzdHJpYnV0ZXMgdGhlbSBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWNpdXMgQ2Flc2FyPC9uYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgbGlldXRlbmFudCwgYW5kIG9wcG9zZWQgdG8gdGhlIGVuZW15IGluIGV2ZXJ5IHF1YXJ0ZXIuIFRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbHZpaTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdm9sdW50YXJpbHkgZW5nYWdpbmcgaW4gYmF0dGxlIHdpdGggdGhlaXIgbmVpZ2hib3JzLCBhcmUgZGVmZWF0ZWQsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIFZhbGVyaXVzIERvbm90YXVydXM8L25hbWU+LCB0aGUgc29uIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2FidXJ1czwvbmFtZT4sIHRoZSBwcmluY2lwYWwgbWFuIG9mIHRoZSBzdGF0ZSwgYW5kIHNldmVyYWwgb3RoZXJzLCBiZWluZwogICAgICAgICAgICAgICAgICAgIHNsYWluLCB0aGV5IGFyZSBmb3JjZWQgdG8gcmV0aXJlIHdpdGhpbiB0aGVpciB0b3ducyBhbmQgZm9ydGlmaWNhdGlvbnMuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbG9icm9nZXM8L25hbWU+LCBwbGFjaW5nIGd1YXJkcyBhbG9uZyB0aGUgY291cnNlIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTI2MTEiIHJlZz0iUmhpbmUgWzYsNTEuODMzXSAocml2ZXIpLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5SaGluZQogICAgICAgICAgICAgICAgICAgIDwvbmFtZT4sIGRlZmVuZCB0aGVpciBmcm9udGllcnMgd2l0aCBncmVhdCB2aWdpbGFuY2UgYW5kIGVuZXJneS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBhcyBoZSBwZXJjZWl2ZWQgdGhhdCB0aGUgZW5lbXkgd2VyZSBzdXBlcmlvciBpbgogICAgICAgICAgICAgICAgICAgIGNhdmFscnksIGFuZCBoZSBoaW1zZWxmIGNvdWxkIHJlY2VpdmUgbm8gYWlkIGZyb20gdGhlIFByb3ZpbmNlIG9yIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPiwgd2hpbGUgYWxsIGNvbW11bmljYXRpb24gd2FzIGN1dCBvZmYsIHNlbmRzIGFjcm9zcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUKICAgICAgICAgICAgICAgICAgICA8L25hbWU+IGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMDg0IiByZWc9IiAgK0dlcm1hbnkgWzEwLjUsNTEuNV0gKG5hdGlvbiksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZXJtYW55IDwvbmFtZT4gdG8gdGhvc2UKICAgICAgICAgICAgICAgICAgICBzdGF0ZXMgd2hpY2ggaGUgaGFkIHN1YmR1ZWQgaW4gdGhlIHByZWNlZGluZyBjYW1wYWlnbnMsIGFuZCBzdW1tb25zIGZyb20gdGhlbQogICAgICAgICAgICAgICAgICAgIGNhdmFscnkgYW5kIHRoZSBsaWdodC1hcm1lZCBpbmZhbnRyeSwgd2hvIHdlcmUgYWNjdXN0b21lZCB0byBlbmdhZ2UgYW1vbmcgdGhlbS4KICAgICAgICAgICAgICAgICAgICBPbiB0aGVpciBhcnJpdmFsLCBhcyB0aGV5IHdlcmUgbW91bnRlZCBvbiB1bnNlcnZpY2VhYmxlIGhvcnNlcywgaGUgdGFrZXMgaG9yc2VzCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgbWlsaXRhcnkgdHJpYnVuZXMgYW5kIHRoZSByZXN0LCBuYXksIGV2ZW4gZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBrbmlnaHRzIGFuZCB2ZXRlcmFucywgYW5kIGRpc3RyaWJ1dGVzIHRoZW0gYW1vbmcgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['7.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtZWFuIHRpbWUsIHdoaWxzdCB0aGVzZSB0aGluZ3MgYXJlIGdvaW5nIG9uLCB0aGUgZm9yY2VzIG9mIHRoZSBlbmVteSBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaTwvbmFtZT4sIGFuZCB0aGUgY2F2YWxyeSB3aGljaCBoYWQgYmVlbiBkZW1hbmRlZCBmcm9tIGFsbCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIG1lZXQgdG9nZXRoZXIuIEEgZ3JlYXQgbnVtYmVyIG9mIHRoZXNlIGhhdmluZyBiZWVuIGNvbGxlY3RlZCwKICAgICAgICAgICAgICAgICAgICB3aGVuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3YXMgbWFyY2hpbmcgaW50byB0aGUgY291bnRyeSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXF1YW5pPC9uYW1lPiwgdGhyb3VnaCB0aGUgY29uZmluZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM0MyIgcmVnPSIgICtMYW5ncmVzIFs1LjMzMyw0Ny44ODNdIChpbmhhYml0ZWQgcGxhY2UpLCBIYXV0ZS1NYXJuZSwgQ2hhbXBhZ25lLUFyZGVubmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkxpbmdvbmVzIDwvbmFtZT4sIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgdGhlIG1vcmUgZWFzaWx5IHJlbmRlciBhaWQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gZW5jYW1wZWQgaW4gdGhyZWUgY2FtcHMsIGFib3V0IHRlbiBtaWxlcwogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+OiBhbmQgaGF2aW5nIHN1bW1vbmVkIHRoZSBjb21tYW5kZXJzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGNhdmFscnkgdG8gYSBjb3VuY2lsLCBoZSBzaG93cyB0aGF0IHRoZSB0aW1lIG9mIHZpY3Rvcnkgd2FzIGNvbWU7IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gd2VyZSBmbGVlaW5nIGludG8gdGhlIFByb3ZpbmNlIGFuZCBsZWF2aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPjsgdGhhdCB0aGlzIHdhcyBzdWZmaWNpZW50IGZvciBvYnRhaW5pbmcgaW1tZWRpYXRlIGZyZWVkb207IGJ1dAogICAgICAgICAgICAgICAgICAgIHdhcyBvZiBsaXR0bGUgbW9tZW50IGluIGFjcXVpcmluZyBwZWFjZSBhbmQgdHJhbnF1aWxsaXR5IGZvciB0aGUgZnV0dXJlOyBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHdvdWxkIHJldHVybiBhZnRlciBhc3NlbWJsaW5nIGdyZWF0ZXIKICAgICAgICAgICAgICAgICAgICBmb3JjZXMgYW5kIHdvdWxkIG5vdCBwdXQgYW4gZW5kIHRvIHRoZSB3YXIuIFRoZXJlZm9yZSB0aGV5IHNob3VsZCBhdHRhY2sgdGhlbSBvbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIG1hcmNoLCB3aGVuIGVuY3VtYmVyZWQuIElmIHRoZSBpbmZhbnRyeSBzaG91bGQgW2JlIG9ibGlnZWQgdG9dIHJlbGlldmUKICAgICAgICAgICAgICAgICAgICB0aGVpciBjYXZhbHJ5LCBhbmQgYmUgcmV0YXJkZWQgYnkgZG9pbmcgc28sIHRoZSBtYXJjaCBjb3VsZCBub3QgYmUgYWNjb21wbGlzaGVkOgogICAgICAgICAgICAgICAgICAgIGlmLCBhYmFuZG9uaW5nIHRoZWlyIGJhZ2dhZ2UgdGhleSBzaG91bGQgcHJvdmlkZSBmb3IgdGhlaXIgc2FmZXR5IChhIHJlc3VsdAogICAgICAgICAgICAgICAgICAgIHdoaWNoLCBoZSB0cnVzdGVkLCB3YXMgbW9yZSBsaWtlIHRvIGVuc3VlKSwgdGhleSB3b3VsZCBsb3NlIGJvdGggcHJvcGVydHkgYW5kCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyLiBGb3IgYXMgdG8gdGhlIGVuZW15J3MgaG9yc2UsIHRoZXkgb3VnaHQgbm90IHRvIGVudGVydGFpbiBhIGRvdWJ0IHRoYXQKICAgICAgICAgICAgICAgICAgICBub25lIG9mIHRoZW0gd291bGQgZGFyZSB0byBhZHZhbmNlIGJleW9uZCB0aGUgbWFpbiBib2R5LiBJbiBvcmRlciB0aGF0IHRoZXkgW3RoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzXTwvbmFtZT4gbWF5IGRvIHNvIHdpdGggZ3JlYXRlciBzcGlyaXQsIGhlIHdvdWxkIG1hcnNoYWwgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZm9yY2VzIGJlZm9yZSB0aGUgY2FtcCwgYW5kIGludGltaWRhdGUgdGhlIGVuZW15LiBUaGUgY2F2YWxyeSB1bmFuaW1vdXNseQogICAgICAgICAgICAgICAgICAgIHNob3V0IG91dCwgIlRoYXQgdGhleSBvdWdodCB0byBiaW5kIHRoZW1zZWx2ZXMgYnkgYSBtb3N0IHNhY3JlZCBvYXRoLCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIG5vdCBiZSByZWNlaXZlZCB1bmRlciBhIHJvb2YsIG5vciBoYXZlIGFjY2VzcyB0byBoaXMgY2hpbGRyZW4sIHBhcmVudHMsCiAgICAgICAgICAgICAgICAgICAgb3Igd2lmZSwgd2hvIHNoYWxsIG5vdCB0d2ljZSBoYXZlIHJpZGRlbiB0aHJvdWdoIHRoZSBlbmVteSdzIGFybXkuIiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pPC9uYW1lPiwgYW5kIHRoZSBjYXZhbHJ5IHdoaWNoIGhhZCBiZWVuIGRlbWFuZGVkIGZyb20gYWxsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgbWVldCB0b2dldGhlci4gQSBncmVhdCBudW1iZXIgb2YgdGhlc2UgaGF2aW5nIGJlZW4gY29sbGVjdGVkLAogICAgICAgICAgICAgICAgICAgIHdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdhcyBtYXJjaGluZyBpbnRvIHRoZSBjb3VudHJ5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+LCB0aHJvdWdoIHRoZSBjb25maW5lcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzQzIiByZWc9IiAgK0xhbmdyZXMgWzUuMzMzLDQ3Ljg4M10gKGluaGFiaXRlZCBwbGFjZSksIEhhdXRlLU1hcm5lLCBDaGFtcGFnbmUtQXJkZW5uZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TGluZ29uZXMgPC9uYW1lPiwgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCB0aGUgbW9yZSBlYXNpbHkgcmVuZGVyIGFpZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBwcm92aW5jZSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiBlbmNhbXBlZCBpbiB0aHJlZSBjYW1wcywgYWJvdXQgdGVuIG1pbGVzCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT46IGFuZCBoYXZpbmcgc3VtbW9uZWQgdGhlIGNvbW1hbmRlcnMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgY2F2YWxyeSB0byBhIGNvdW5jaWwsIGhlIHNob3dzIHRoYXQgdGhlIHRpbWUgb2YgdmljdG9yeSB3YXMgY29tZTsgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiB3ZXJlIGZsZWVpbmcgaW50byB0aGUgUHJvdmluY2UgYW5kIGxlYXZpbmcKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+OyB0aGF0IHRoaXMgd2FzIHN1ZmZpY2llbnQgZm9yIG9idGFpbmluZyBpbW1lZGlhdGUgZnJlZWRvbTsgYnV0CiAgICAgICAgICAgICAgICAgICAgd2FzIG9mIGxpdHRsZSBtb21lbnQgaW4gYWNxdWlyaW5nIHBlYWNlIGFuZCB0cmFucXVpbGxpdHkgZm9yIHRoZSBmdXR1cmU7IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gd291bGQgcmV0dXJuIGFmdGVyIGFzc2VtYmxpbmcgZ3JlYXRlcgogICAgICAgICAgICAgICAgICAgIGZvcmNlcyBhbmQgd291bGQgbm90IHB1dCBhbiBlbmQgdG8gdGhlIHdhci4gVGhlcmVmb3JlIHRoZXkgc2hvdWxkIGF0dGFjayB0aGVtIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbWFyY2gsIHdoZW4gZW5jdW1iZXJlZC4gSWYgdGhlIGluZmFudHJ5IHNob3VsZCBbYmUgb2JsaWdlZCB0b10gcmVsaWV2ZQogICAgICAgICAgICAgICAgICAgIHRoZWlyIGNhdmFscnksIGFuZCBiZSByZXRhcmRlZCBieSBkb2luZyBzbywgdGhlIG1hcmNoIGNvdWxkIG5vdCBiZSBhY2NvbXBsaXNoZWQ6CiAgICAgICAgICAgICAgICAgICAgaWYsIGFiYW5kb25pbmcgdGhlaXIgYmFnZ2FnZSB0aGV5IHNob3VsZCBwcm92aWRlIGZvciB0aGVpciBzYWZldHkgKGEgcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgd2hpY2gsIGhlIHRydXN0ZWQsIHdhcyBtb3JlIGxpa2UgdG8gZW5zdWUpLCB0aGV5IHdvdWxkIGxvc2UgYm90aCBwcm9wZXJ0eSBhbmQKICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIuIEZvciBhcyB0byB0aGUgZW5lbXkncyBob3JzZSwgdGhleSBvdWdodCBub3QgdG8gZW50ZXJ0YWluIGEgZG91YnQgdGhhdAogICAgICAgICAgICAgICAgICAgIG5vbmUgb2YgdGhlbSB3b3VsZCBkYXJlIHRvIGFkdmFuY2UgYmV5b25kIHRoZSBtYWluIGJvZHkuIEluIG9yZGVyIHRoYXQgdGhleSBbdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2F1bHNdPC9uYW1lPiBtYXkgZG8gc28gd2l0aCBncmVhdGVyIHNwaXJpdCwgaGUgd291bGQgbWFyc2hhbCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGVpciBmb3JjZXMgYmVmb3JlIHRoZSBjYW1wLCBhbmQgaW50aW1pZGF0ZSB0aGUgZW5lbXkuIFRoZSBjYXZhbHJ5IHVuYW5pbW91c2x5CiAgICAgICAgICAgICAgICAgICAgc2hvdXQgb3V0LCAiVGhhdCB0aGV5IG91Z2h0IHRvIGJpbmQgdGhlbXNlbHZlcyBieSBhIG1vc3Qgc2FjcmVkIG9hdGgsIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQgbm90IGJlIHJlY2VpdmVkIHVuZGVyIGEgcm9vZiwgbm9yIGhhdmUgYWNjZXNzIHRvIGhpcyBjaGlsZHJlbiwgcGFyZW50cywKICAgICAgICAgICAgICAgICAgICBvciB3aWZlLCB3aG8gc2hhbGwgbm90IHR3aWNlIGhhdmUgcmlkZGVuIHRocm91Z2ggdGhlIGVuZW15J3MgYXJteS4iIDwvdHJhbnNsYXRpb24+"
translation['7.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgcHJvcG9zYWwgcmVjZWl2aW5nIGdlbmVyYWwgYXBwcm9iYXRpb24sIGFuZCBhbGwgYmVpbmcgZm9yY2VkIHRvIHRha2UgdGhlCiAgICAgICAgICAgICAgICAgICAgb2F0aCwgb24gdGhlIG5leHQgZGF5IHRoZSBjYXZhbHJ5IHdlcmUgZGl2aWRlZCBpbnRvIHRocmVlIHBhcnRzLCBhbmQgdHdvIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgZGl2aXNpb25zIG1hZGUgYSBkZW1vbnN0cmF0aW9uIG9uIG91ciB0d28gZmxhbmtzOyB3aGlsZSBvbmUgaW4gZnJvbnQgYmVnYW4KICAgICAgICAgICAgICAgICAgICB0byBvYnN0cnVjdCBvdXIgbWFyY2guIE9uIHRoaXMgY2lyY3Vtc3RhbmNlIGJlaW5nIGFubm91bmNlZCwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9yZGVycyBoaXMgY2F2YWxyeSBhbHNvIHRvIGZvcm0gdGhyZWUgZGl2aXNpb25zIGFuZCBjaGFyZ2UKICAgICAgICAgICAgICAgICAgICB0aGUgZW5lbXkuIFRoZW4gdGhlIGFjdGlvbiBjb21tZW5jZXMgc2ltdWx0YW5lb3VzbHkgaW4gZXZlcnkgcGFydDogdGhlIG1haW4gYm9keQogICAgICAgICAgICAgICAgICAgIGhhbHRzOyB0aGUgYmFnZ2FnZSBpcyByZWNlaXZlZCB3aXRoaW4gdGhlIHJhbmtzIG9mIHRoZSBsZWdpb25zLiBJZiBvdXIgbWVuCiAgICAgICAgICAgICAgICAgICAgc2VlbWVkIHRvIGJlIGRpc3RyZXNzZWQsIG9yIGhhcmQgcHJlc3NlZCBpbiBhbnkgcXVhcnRlciwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHVzdWFsbHkgb3JkZXJlZCB0aGUgdHJvb3BzIHRvIGFkdmFuY2UsIGFuZCB0aGUgYXJteSB0byB3aGVlbAogICAgICAgICAgICAgICAgICAgIHJvdW5kIGluIHRoYXQgcXVhcnRlcjsgd2hpY2ggY29uZHVjdCByZXRhcmRlZCB0aGUgZW5lbXkgaW4gdGhlIHB1cnN1aXQsIGFuZAogICAgICAgICAgICAgICAgICAgIGVuY291cmFnZWQgb3VyIG1lbiBieSB0aGUgaG9wZSBvZiBzdXBwb3J0LiBBdCBsZW5ndGggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgb24gdGhlIHJpZ2h0IHdpbmcsIGhhdmluZyBnYWluZWQgdGhlIHRvcCBvZiB0aGUgaGlsbCwKICAgICAgICAgICAgICAgICAgICBkaXNsb2RnZSB0aGUgZW5lbXkgZnJvbSB0aGVpciBwb3NpdGlvbiBhbmQgcHVyc3VlIHRoZW0gZXZlbiBhcyBmYXIgYXMgdGhlIHJpdmVyCiAgICAgICAgICAgICAgICAgICAgYXQgd2hpY2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiB3aXRoIHRoZSBpbmZhbnRyeSB3YXMgc3RhdGlvbmVkLCBhbmQgc2xheQogICAgICAgICAgICAgICAgICAgIHNldmVyYWwgb2YgdGhlbS4gVGhlIHJlc3QsIG9uIG9ic2VydmluZyB0aGlzIGFjdGlvbiwgZmVhcmluZyBsZXN0IHRoZXkgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgc3Vycm91bmRlZCwgYmV0YWtlIHRoZW1zZWx2ZXMgdG8gZmxpZ2h0LiBBIHNsYXVnaHRlciBlbnN1ZXMgaW4gZXZlcnkgZGlyZWN0aW9uLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aHJlZSBvZiB0aGUgbm9ibGVzdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gYXJlIHRha2VuIGFuZCBicm91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPjogPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3R1czwvbmFtZT4sIHRoZSBjb21tYW5kZXIgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSwgd2hvIGhhZCBiZWVuIGVuZ2FnZWQgaW4gdGhlIGNvbnRlc3Qgd2l0aCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbnZpY3RvbGl0YW5pczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0aGUgbGFzdCBlbGVjdGlvbiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXZhcmlsbHVzPC9uYW1lPiwgd2hvIGhhZCBoZWxkIHRoZSBjb21tYW5kIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGluZmFudHJ5IGFmdGVyIHRoZSByZXZvbHQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXRhdmljdXM8L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwb3JlZGlyaXg8L25hbWU+LCB1bmRlciB3aG9zZSBjb21tYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBoYWQgZW5nYWdlZAogICAgICAgICAgICAgICAgICAgIGluIHdhciBhZ2FpbnN0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+LCBiZWZvcmUgdGhlIGFycml2YWwgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9yZGVycyBoaXMgY2F2YWxyeSBhbHNvIHRvIGZvcm0gdGhyZWUgZGl2aXNpb25zIGFuZCBjaGFyZ2UKICAgICAgICAgICAgICAgICAgICB0aGUgZW5lbXkuIFRoZW4gdGhlIGFjdGlvbiBjb21tZW5jZXMgc2ltdWx0YW5lb3VzbHkgaW4gZXZlcnkgcGFydDogdGhlIG1haW4gYm9keQogICAgICAgICAgICAgICAgICAgIGhhbHRzOyB0aGUgYmFnZ2FnZSBpcyByZWNlaXZlZCB3aXRoaW4gdGhlIHJhbmtzIG9mIHRoZSBsZWdpb25zLiBJZiBvdXIgbWVuCiAgICAgICAgICAgICAgICAgICAgc2VlbWVkIHRvIGJlIGRpc3RyZXNzZWQsIG9yIGhhcmQgcHJlc3NlZCBpbiBhbnkgcXVhcnRlciwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHVzdWFsbHkgb3JkZXJlZCB0aGUgdHJvb3BzIHRvIGFkdmFuY2UsIGFuZCB0aGUgYXJteSB0byB3aGVlbAogICAgICAgICAgICAgICAgICAgIHJvdW5kIGluIHRoYXQgcXVhcnRlcjsgd2hpY2ggY29uZHVjdCByZXRhcmRlZCB0aGUgZW5lbXkgaW4gdGhlIHB1cnN1aXQsIGFuZAogICAgICAgICAgICAgICAgICAgIGVuY291cmFnZWQgb3VyIG1lbiBieSB0aGUgaG9wZSBvZiBzdXBwb3J0LiBBdCBsZW5ndGggdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgb24gdGhlIHJpZ2h0IHdpbmcsIGhhdmluZyBnYWluZWQgdGhlIHRvcCBvZiB0aGUgaGlsbCwKICAgICAgICAgICAgICAgICAgICBkaXNsb2RnZSB0aGUgZW5lbXkgZnJvbSB0aGVpciBwb3NpdGlvbiBhbmQgcHVyc3VlIHRoZW0gZXZlbiBhcyBmYXIgYXMgdGhlIHJpdmVyCiAgICAgICAgICAgICAgICAgICAgYXQgd2hpY2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiB3aXRoIHRoZSBpbmZhbnRyeSB3YXMgc3RhdGlvbmVkLCBhbmQgc2xheQogICAgICAgICAgICAgICAgICAgIHNldmVyYWwgb2YgdGhlbS4gVGhlIHJlc3QsIG9uIG9ic2VydmluZyB0aGlzIGFjdGlvbiwgZmVhcmluZyBsZXN0IHRoZXkgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgc3Vycm91bmRlZCwgYmV0YWtlIHRoZW1zZWx2ZXMgdG8gZmxpZ2h0LiBBIHNsYXVnaHRlciBlbnN1ZXMgaW4gZXZlcnkgZGlyZWN0aW9uLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aHJlZSBvZiB0aGUgbm9ibGVzdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4gYXJlIHRha2VuIGFuZCBicm91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPjogPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3R1czwvbmFtZT4sIHRoZSBjb21tYW5kZXIgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSwgd2hvIGhhZCBiZWVuIGVuZ2FnZWQgaW4gdGhlIGNvbnRlc3Qgd2l0aCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbnZpY3RvbGl0YW5pczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0aGUgbGFzdCBlbGVjdGlvbiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXZhcmlsbHVzPC9uYW1lPiwgd2hvIGhhZCBoZWxkIHRoZSBjb21tYW5kIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGluZmFudHJ5IGFmdGVyIHRoZSByZXZvbHQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXRhdmljdXM8L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwb3JlZGlyaXg8L25hbWU+LCB1bmRlciB3aG9zZSBjb21tYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiBoYWQgZW5nYWdlZAogICAgICAgICAgICAgICAgICAgIGluIHdhciBhZ2FpbnN0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcXVhbmk8L25hbWU+LCBiZWZvcmUgdGhlIGFycml2YWwgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['7.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFsbCBoaXMgY2F2YWxyeSBiZWluZyByb3V0ZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gbGVkIGJhY2sgaGlzIHRyb29wcyBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIG9yZGVyIGFzIGhlIGhhZCBhcnJhbmdlZCB0aGVtIGJlZm9yZSB0aGUgY2FtcCwgYW5kIGltbWVkaWF0ZWx5IGJlZ2FuIHRvCiAgICAgICAgICAgICAgICAgICAgbWFyY2ggdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MjEzIiByZWc9IiAgK0FsaXNlLVNhaW50ZS1SZWluZSBbNC41LDQ3LjU1XSAoaW5oYWJpdGVkIHBsYWNlKSwgQ290ZS1kJ09yLCBCdXJndW5keSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QWxlc2lhIDwvbmFtZT4sIHdoaWNoIGlzIGEgdG93biBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYW5kdWJpaTwvbmFtZT4sIGFuZCBvcmRlcmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGJhZ2dhZ2UgdG8gYmUgc3BlZWRpbHkgYnJvdWdodCBmb3J0aCBmcm9tIHRoZSBjYW1wLCBhbmQgZm9sbG93IGhpbSBjbG9zZWx5LgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhhdmluZyBjb252ZXllZCBoaXMgYmFnZ2FnZSB0byB0aGUgbmVhcmVzdAogICAgICAgICAgICAgICAgICAgIGhpbGwsIGFuZCBoYXZpbmcgbGVmdCB0d28gbGVnaW9ucyB0byBndWFyZCBpdCwgcHVyc3VlZCBhcyBmYXIgYXMgdGhlIHRpbWUgb2YgZGF5CiAgICAgICAgICAgICAgICAgICAgd291bGQgcGVybWl0LCBhbmQgYWZ0ZXIgc2xheWluZyBhYm91dCB0aHJlZSB0aG91c2FuZCBvZiB0aGUgcmVhciBvZiB0aGUgZW5lbXksCiAgICAgICAgICAgICAgICAgICAgZW5jYW1wZWQgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MjEzIiByZWc9IiAgK0FsaXNlLVNhaW50ZS1SZWluZSBbNC41LDQ3LjU1XSAoaW5oYWJpdGVkIHBsYWNlKSwgQ290ZS1kJ09yLCBCdXJndW5keSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QWxlc2lhIDwvbmFtZT4gb24gdGhlIG5leHQgZGF5LiBPbiByZWNvbm5vaXRlcmluZyB0aGUgc2l0dWF0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHksIGZpbmRpbmcgdGhhdCB0aGUgZW5lbXkgd2VyZSBwYW5pYy1zdHJpY2tlbiwgYmVjYXVzZSB0aGUgY2F2YWxyeSBpbiB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZXkgcGxhY2VkIHRoZWlyIGNoaWVmIHJlbGlhbmNlLCB3ZXJlIGJlYXRlbiwgaGUgZW5jb3VyYWdlZCBoaXMgbWVuIHRvIGVuZHVyZQogICAgICAgICAgICAgICAgICAgIHRoZSB0b2lsLCBhbmQgYmVnYW4gdG8gZHJhdyBhIGxpbmUgb2YgY2lyY3VtdmFsbGF0aW9uIHJvdW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODIxMyIgcmVnPSIgICtBbGlzZS1TYWludGUtUmVpbmUgWzQuNSw0Ny41NV0gKGluaGFiaXRlZCBwbGFjZSksIENvdGUtZCdPciwgQnVyZ3VuZHksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkFsZXNpYSA8L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjkiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiBsZWQgYmFjayBoaXMgdHJvb3BzIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgb3JkZXIgYXMgaGUgaGFkIGFycmFuZ2VkIHRoZW0gYmVmb3JlIHRoZSBjYW1wLCBhbmQgaW1tZWRpYXRlbHkgYmVnYW4gdG8KICAgICAgICAgICAgICAgICAgICBtYXJjaCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgyMTMiIHJlZz0iICArQWxpc2UtU2FpbnRlLVJlaW5lIFs0LjUsNDcuNTVdIChpbmhhYml0ZWQgcGxhY2UpLCBDb3RlLWQnT3IsIEJ1cmd1bmR5LCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BbGVzaWEgPC9uYW1lPiwgd2hpY2ggaXMgYSB0b3duIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hbmR1YmlpPC9uYW1lPiwgYW5kIG9yZGVyZWQKICAgICAgICAgICAgICAgICAgICB0aGUgYmFnZ2FnZSB0byBiZSBzcGVlZGlseSBicm91Z2h0IGZvcnRoIGZyb20gdGhlIGNhbXAsIGFuZCBmb2xsb3cgaGltIGNsb3NlbHkuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIGNvbnZleWVkIGhpcyBiYWdnYWdlIHRvIHRoZSBuZWFyZXN0CiAgICAgICAgICAgICAgICAgICAgaGlsbCwgYW5kIGhhdmluZyBsZWZ0IHR3byBsZWdpb25zIHRvIGd1YXJkIGl0LCBwdXJzdWVkIGFzIGZhciBhcyB0aGUgdGltZSBvZiBkYXkKICAgICAgICAgICAgICAgICAgICB3b3VsZCBwZXJtaXQsIGFuZCBhZnRlciBzbGF5aW5nIGFib3V0IHRocmVlIHRob3VzYW5kIG9mIHRoZSByZWFyIG9mIHRoZSBlbmVteSwKICAgICAgICAgICAgICAgICAgICBlbmNhbXBlZCBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgyMTMiIHJlZz0iICArQWxpc2UtU2FpbnRlLVJlaW5lIFs0LjUsNDcuNTVdIChpbmhhYml0ZWQgcGxhY2UpLCBDb3RlLWQnT3IsIEJ1cmd1bmR5LCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BbGVzaWEgPC9uYW1lPiBvbiB0aGUgbmV4dCBkYXkuIE9uIHJlY29ubm9pdGVyaW5nIHRoZSBzaXR1YXRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eSwgZmluZGluZyB0aGF0IHRoZSBlbmVteSB3ZXJlIHBhbmljLXN0cmlja2VuLCBiZWNhdXNlIHRoZSBjYXZhbHJ5IGluIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhleSBwbGFjZWQgdGhlaXIgY2hpZWYgcmVsaWFuY2UsIHdlcmUgYmVhdGVuLCBoZSBlbmNvdXJhZ2VkIGhpcyBtZW4gdG8gZW5kdXJlCiAgICAgICAgICAgICAgICAgICAgdGhlIHRvaWwsIGFuZCBiZWdhbiB0byBkcmF3IGEgbGluZSBvZiBjaXJjdW12YWxsYXRpb24gcm91bmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MjEzIiByZWc9IiAgK0FsaXNlLVNhaW50ZS1SZWluZSBbNC41LDQ3LjU1XSAoaW5oYWJpdGVkIHBsYWNlKSwgQ290ZS1kJ09yLCBCdXJndW5keSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QWxlc2lhIDwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['7.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSB0b3duIGl0c2VsZiB3YXMgc2l0dWF0ZWQgb24gdGhlIHRvcCBvZiBhIGhpbGwsIGluIGEgdmVyeSBsb2Z0eSBwb3NpdGlvbiwgc28KICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IGRpZCBub3QgYXBwZWFyIGxpa2VseSB0byBiZSB0YWtlbiwgZXhjZXB0IGJ5IGEgcmVndWxhciBzaWVnZS4gVHdvCiAgICAgICAgICAgICAgICAgICAgcml2ZXJzLCBvbiB0d28gZGlmZmVyZW50IHNpZGVzLCB3YXNoZWQgdGhlIGZvb3Qgb2YgdGhlIGhpbGwuIEJlZm9yZSB0aGUgdG93biBsYXkKICAgICAgICAgICAgICAgICAgICBhIHBsYWluIG9mIGFib3V0IHRocmVlIG1pbGVzIGluIGxlbmd0aDsgb24gZXZlcnkgb3RoZXIgc2lkZSBoaWxscyBhdCBhIG1vZGVyYXRlCiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UsIGFuZCBvZiBhbiBlcXVhbCBkZWdyZWUgb2YgaGVpZ2h0LCBzdXJyb3VuZGVkIHRoZSB0b3duLiBUaGUgYXJteSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBoYWQgZmlsbGVkIGFsbCB0aGUgc3BhY2UgdW5kZXIgdGhlIHdhbGwsCiAgICAgICAgICAgICAgICAgICAgY29tcHJpc2luZyBhIHBhcnQgb2YgdGhlIGhpbGwgd2hpY2ggbG9va2VkIHRvIHRoZSByaXNpbmcgc3VuLCBhbmQgaGFkIGRyYXduIGluCiAgICAgICAgICAgICAgICAgICAgZnJvbnQgYSB0cmVuY2ggYW5kIGEgc3RvbmUgd2FsbCBzaXggZmVldCBoaWdoLiBUaGUgY2lyY3VpdCBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgZm9ydGlmaWNhdGlvbiwgd2hpY2ggd2FzIGNvbW1lbmNlZCBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgY29tcHJpc2VkIGVsZXZlbiBtaWxlcy4gVGhlIGNhbXAgd2FzIHBpdGNoZWQgaW4gYSBzdHJvbmcgcG9zaXRpb24sIGFuZAogICAgICAgICAgICAgICAgICAgIHR3ZW50eS10aHJlZSByZWRvdWJ0cyB3ZXJlIHJhaXNlZCBpbiBpdCwgaW4gd2hpY2ggc2VudGluZWxzIHdlcmUgcGxhY2VkIGJ5IGRheSwKICAgICAgICAgICAgICAgICAgICBsZXN0IGFueSBzYWxseSBzaG91bGQgYmUgbWFkZSBzdWRkZW5seTsgYW5kIGJ5IG5pZ2h0IHRoZSBzYW1lIHdlcmUgb2NjdXBpZWQgYnkKICAgICAgICAgICAgICAgICAgICB3YXRjaGVzIGFuZCBzdHJvbmcgZ3VhcmRzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBoYWQgZmlsbGVkIGFsbCB0aGUgc3BhY2UgdW5kZXIgdGhlIHdhbGwsCiAgICAgICAgICAgICAgICAgICAgY29tcHJpc2luZyBhIHBhcnQgb2YgdGhlIGhpbGwgd2hpY2ggbG9va2VkIHRvIHRoZSByaXNpbmcgc3VuLCBhbmQgaGFkIGRyYXduIGluCiAgICAgICAgICAgICAgICAgICAgZnJvbnQgYSB0cmVuY2ggYW5kIGEgc3RvbmUgd2FsbCBzaXggZmVldCBoaWdoLiBUaGUgY2lyY3VpdCBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgZm9ydGlmaWNhdGlvbiwgd2hpY2ggd2FzIGNvbW1lbmNlZCBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgY29tcHJpc2VkIGVsZXZlbiBtaWxlcy4gVGhlIGNhbXAgd2FzIHBpdGNoZWQgaW4gYSBzdHJvbmcgcG9zaXRpb24sIGFuZAogICAgICAgICAgICAgICAgICAgIHR3ZW50eS10aHJlZSByZWRvdWJ0cyB3ZXJlIHJhaXNlZCBpbiBpdCwgaW4gd2hpY2ggc2VudGluZWxzIHdlcmUgcGxhY2VkIGJ5IGRheSwKICAgICAgICAgICAgICAgICAgICBsZXN0IGFueSBzYWxseSBzaG91bGQgYmUgbWFkZSBzdWRkZW5seTsgYW5kIGJ5IG5pZ2h0IHRoZSBzYW1lIHdlcmUgb2NjdXBpZWQgYnkKICAgICAgICAgICAgICAgICAgICB3YXRjaGVzIGFuZCBzdHJvbmcgZ3VhcmRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSB3b3JrIGhhdmluZyBiZWVuIGJlZ3VuLCBhIGNhdmFscnkgYWN0aW9uIGVuc3VlcyBpbiB0aGF0IHBsYWluLCB3aGljaCB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeSBkZXNjcmliZWQgYXMgYnJva2VuIGJ5IGhpbGxzLCBhbmQgZXh0ZW5kaW5nIHRocmVlIG1pbGVzIGluIGxlbmd0aC4gVGhlCiAgICAgICAgICAgICAgICAgICAgY29udGVzdCBpcyBtYWludGFpbmVkIG9uIGJvdGggc2lkZXMgd2l0aCB0aGUgdXRtb3N0IHZpZ29yOyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gc2VuZHMgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiB0byBhaWQgb3VyCiAgICAgICAgICAgICAgICAgICAgdHJvb3BzIHdoZW4gZGlzdHJlc3NlZCwgYW5kIGRyYXdzIHVwIHRoZSBsZWdpb25zIGluIGZyb250IG9mIHRoZSBjYW1wLCBsZXN0IGFueQogICAgICAgICAgICAgICAgICAgIHNhbGx5IHNob3VsZCBiZSBzdWRkZW5seSBtYWRlIGJ5IHRoZSBlbmVteSdzIGluZmFudHJ5LiBUaGUgY291cmFnZSBvZiBvdXIgbWVuIGlzCiAgICAgICAgICAgICAgICAgICAgaW5jcmVhc2VkIGJ5IHRoZSBhZGRpdGlvbmFsIHN1cHBvcnQgb2YgdGhlIGxlZ2lvbnM7IHRoZSBlbmVteSBiZWluZyBwdXQgdG8KICAgICAgICAgICAgICAgICAgICBmbGlnaHQsIGhpbmRlciBvbmUgYW5vdGhlciBieSB0aGVpciBudW1iZXJzLCBhbmQgYXMgb25seSB0aGUgbmFycm93ZXIgZ2F0ZXMgd2VyZQogICAgICAgICAgICAgICAgICAgIGxlZnQgb3BlbiwgYXJlIGNyb3dkZWQgdG9nZXRoZXIgaW4gdGhlbTsgdGhlbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHB1cnN1ZSB0aGVtIHdpdGggdmlnb3IgZXZlbiB0byB0aGUgZm9ydGlmaWNhdGlvbnMuIEEgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBzbGF1Z2h0ZXIgZW5zdWVzOyBzb21lIGxlYXZlIHRoZWlyIGhvcnNlcywgYW5kIGVuZGVhdm9yIHRvIGNyb3NzIHRoZSBkaXRjaCBhbmQKICAgICAgICAgICAgICAgICAgICBjbGltYiB0aGUgd2FsbC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9yZGVycyB0aGUgbGVnaW9ucyB3aGljaCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBkcmF3biB1cCBpbiBmcm9udCBvZiB0aGUgcmFtcGFydCB0byBhZHZhbmNlIGEgbGl0dGxlLiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYXVsczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgd2hvIHdlcmUgd2l0aGluIHRoZSBmb3J0aWZpY2F0aW9ucywgd2VyZSBubyBsZXNzIHBhbmljLXN0cmlja2VuLCB0aGlua2luZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15IHdlcmUgY29taW5nIHRoYXQgbW9tZW50IGFnYWluc3QgdGhlbSwgYW5kIHVuYW5pbW91c2x5IHNob3V0ICJ0byBhcm1zOyIKICAgICAgICAgICAgICAgICAgICBzb21lIGluIHRoZWlyIGFsYXJtIHJ1c2ggaW50byB0aGUgdG93bjsgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiBvcmRlcnMgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2F0ZXMgdG8gYmUgc2h1dCwgbGVzdCB0aGUgY2FtcCBzaG91bGQgYmUgbGVmdCB1bmRlZmVuZGVkLiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHJldHJlYXQsIGFmdGVyIHNsYXlpbmcgbWFueSBhbmQgdGFraW5nIHNldmVyYWwKICAgICAgICAgICAgICAgICAgICBob3JzZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gc2VuZHMgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiB0byBhaWQgb3VyCiAgICAgICAgICAgICAgICAgICAgdHJvb3BzIHdoZW4gZGlzdHJlc3NlZCwgYW5kIGRyYXdzIHVwIHRoZSBsZWdpb25zIGluIGZyb250IG9mIHRoZSBjYW1wLCBsZXN0IGFueQogICAgICAgICAgICAgICAgICAgIHNhbGx5IHNob3VsZCBiZSBzdWRkZW5seSBtYWRlIGJ5IHRoZSBlbmVteSdzIGluZmFudHJ5LiBUaGUgY291cmFnZSBvZiBvdXIgbWVuIGlzCiAgICAgICAgICAgICAgICAgICAgaW5jcmVhc2VkIGJ5IHRoZSBhZGRpdGlvbmFsIHN1cHBvcnQgb2YgdGhlIGxlZ2lvbnM7IHRoZSBlbmVteSBiZWluZyBwdXQgdG8KICAgICAgICAgICAgICAgICAgICBmbGlnaHQsIGhpbmRlciBvbmUgYW5vdGhlciBieSB0aGVpciBudW1iZXJzLCBhbmQgYXMgb25seSB0aGUgbmFycm93ZXIgZ2F0ZXMgd2VyZQogICAgICAgICAgICAgICAgICAgIGxlZnQgb3BlbiwgYXJlIGNyb3dkZWQgdG9nZXRoZXIgaW4gdGhlbTsgdGhlbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHB1cnN1ZSB0aGVtIHdpdGggdmlnb3IgZXZlbiB0byB0aGUgZm9ydGlmaWNhdGlvbnMuIEEgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBzbGF1Z2h0ZXIgZW5zdWVzOyBzb21lIGxlYXZlIHRoZWlyIGhvcnNlcywgYW5kIGVuZGVhdm9yIHRvIGNyb3NzIHRoZSBkaXRjaCBhbmQKICAgICAgICAgICAgICAgICAgICBjbGltYiB0aGUgd2FsbC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IG9yZGVycyB0aGUgbGVnaW9ucyB3aGljaCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBkcmF3biB1cCBpbiBmcm9udCBvZiB0aGUgcmFtcGFydCB0byBhZHZhbmNlIGEgbGl0dGxlLiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYXVsczwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgd2hvIHdlcmUgd2l0aGluIHRoZSBmb3J0aWZpY2F0aW9ucywgd2VyZSBubyBsZXNzIHBhbmljLXN0cmlja2VuLCB0aGlua2luZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15IHdlcmUgY29taW5nIHRoYXQgbW9tZW50IGFnYWluc3QgdGhlbSwgYW5kIHVuYW5pbW91c2x5IHNob3V0ICJ0byBhcm1zOyIKICAgICAgICAgICAgICAgICAgICBzb21lIGluIHRoZWlyIGFsYXJtIHJ1c2ggaW50byB0aGUgdG93bjsgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiBvcmRlcnMgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2F0ZXMgdG8gYmUgc2h1dCwgbGVzdCB0aGUgY2FtcCBzaG91bGQgYmUgbGVmdCB1bmRlZmVuZGVkLiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHJldHJlYXQsIGFmdGVyIHNsYXlpbmcgbWFueSBhbmQgdGFraW5nIHNldmVyYWwKICAgICAgICAgICAgICAgICAgICBob3JzZXMuIDwvdHJhbnNsYXRpb24+"
translation['7.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4gYWRvcHRzIHRoZSBkZXNpZ24gb2Ygc2VuZGluZyBhd2F5IGFsbCBoaXMgY2F2YWxyeSBieQogICAgICAgICAgICAgICAgICAgIG5pZ2h0LCBiZWZvcmUgdGhlIGZvcnRpZmljYXRpb25zIHNob3VsZCBiZSBjb21wbGV0ZWQgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LiBIZSBjaGFyZ2VzIHRoZW0gd2hlbiBkZXBhcnRpbmcgInRoYXQgZWFjaCBvZiB0aGVtIHNob3VsZCBnbwogICAgICAgICAgICAgICAgICAgIHRvIGhpcyByZXNwZWN0aXZlIHN0YXRlLCBhbmQgcHJlc3MgZm9yIHRoZSB3YXIgYWxsIHdobyB3ZXJlIG9sZCBlbm91Z2ggdG8gYmVhcgogICAgICAgICAgICAgICAgICAgIGFybXM7IGhlIHN0YXRlcyBoaXMgb3duIG1lcml0cywgYW5kIGNvbmp1cmVzIHRoZW0gdG8gY29uc2lkZXIgaGlzIHNhZmV0eSwgYW5kCiAgICAgICAgICAgICAgICAgICAgbm90IHN1cnJlbmRlciBoaW0gd2hvIGhhZCBkZXNlcnZlZCBzbyB3ZWxsIG9mIHRoZSBnZW5lcmFsIGZyZWVkb20sIHRvIHRoZSBlbmVteQogICAgICAgICAgICAgICAgICAgIGZvciB0b3J0dXJlOyBoZSBwb2ludHMgb3V0IHRvIHRoZW0gdGhhdCwgaWYgdGhleSBzaG91bGQgYmUgcmVtaXNzLCBlaWdodHkKICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCBjaG9zZW4gbWVuIHdvdWxkIHBlcmlzaCB3aXRoIGhpbTsgdGhhdCB1cG9uIG1ha2luZyBhIGNhbGN1bGF0aW9uLCBoZQogICAgICAgICAgICAgICAgICAgIGhhZCBiYXJlbHkgY29ybiBmb3IgdGhpcnR5IGRheXMsIGJ1dCBjb3VsZCBob2xkIG91dCBhIGxpdHRsZSBsb25nZXIgYnkgZWNvbm9teS4iCiAgICAgICAgICAgICAgICAgICAgQWZ0ZXIgZ2l2aW5nIHRoZXNlIGluc3RydWN0aW9ucyBoZSBzaWxlbnRseSBkaXNtaXNzZXMgdGhlIGNhdmFscnkgaW4gdGhlIHNlY29uZAogICAgICAgICAgICAgICAgICAgIHdhdGNoLCBbb24gdGhhdCBzaWRlXSB3aGVyZSBvdXIgd29ya3Mgd2VyZSBub3QgY29tcGxldGVkOyBoZSBvcmRlcnMgYWxsIHRoZSBjb3JuCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgYnJvdWdodCB0byBoaW1zZWxmOyBoZSBvcmRhaW5zIGNhcGl0YWwgcHVuaXNobWVudCB0byBzdWNoIGFzIHNob3VsZCBub3QKICAgICAgICAgICAgICAgICAgICBvYmV5OyBoZSBkaXN0cmlidXRlcyBhbW9uZyB0aGVtLCBtYW4gYnkgbWFuLCB0aGUgY2F0dGxlLCBncmVhdCBxdWFudGl0aWVzIG9mCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGFkIGJlZW4gZHJpdmVuIHRoZXJlIGJ5IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hbmR1YmlpPC9uYW1lPjsgaGUgYmVnYW4gdG8gbWVhc3VyZQogICAgICAgICAgICAgICAgICAgIG91dCB0aGUgY29ybiBzcGFyaW5nbHksIGFuZCBieSBsaXR0bGUgYW5kIGxpdHRsZTsgaGUgcmVjZWl2ZXMgaW50byB0aGUgdG93biBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgZm9yY2VzIHdoaWNoIGhlIGhhZCBwb3N0ZWQgaW4gZnJvbnQgb2YgaXQuIEluIHRoaXMgbWFubmVyIGhlIHByZXBhcmVzIHRvCiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhlIHN1Y2NvcnMgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGFuZCBjYXJyeSBvbiB0aGUgd2FyLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiBhZG9wdHMgdGhlIGRlc2lnbiBvZiBzZW5kaW5nIGF3YXkgYWxsIGhpcyBjYXZhbHJ5IGJ5CiAgICAgICAgICAgICAgICAgICAgbmlnaHQsIGJlZm9yZSB0aGUgZm9ydGlmaWNhdGlvbnMgc2hvdWxkIGJlIGNvbXBsZXRlZCBieSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4uIEhlIGNoYXJnZXMgdGhlbSB3aGVuIGRlcGFydGluZyAidGhhdCBlYWNoIG9mIHRoZW0gc2hvdWxkIGdvCiAgICAgICAgICAgICAgICAgICAgdG8gaGlzIHJlc3BlY3RpdmUgc3RhdGUsIGFuZCBwcmVzcyBmb3IgdGhlIHdhciBhbGwgd2hvIHdlcmUgb2xkIGVub3VnaCB0byBiZWFyCiAgICAgICAgICAgICAgICAgICAgYXJtczsgaGUgc3RhdGVzIGhpcyBvd24gbWVyaXRzLCBhbmQgY29uanVyZXMgdGhlbSB0byBjb25zaWRlciBoaXMgc2FmZXR5LCBhbmQKICAgICAgICAgICAgICAgICAgICBub3Qgc3VycmVuZGVyIGhpbSB3aG8gaGFkIGRlc2VydmVkIHNvIHdlbGwgb2YgdGhlIGdlbmVyYWwgZnJlZWRvbSwgdG8gdGhlIGVuZW15CiAgICAgICAgICAgICAgICAgICAgZm9yIHRvcnR1cmU7IGhlIHBvaW50cyBvdXQgdG8gdGhlbSB0aGF0LCBpZiB0aGV5IHNob3VsZCBiZSByZW1pc3MsIGVpZ2h0eQogICAgICAgICAgICAgICAgICAgIHRob3VzYW5kIGNob3NlbiBtZW4gd291bGQgcGVyaXNoIHdpdGggaGltOyB0aGF0IHVwb24gbWFraW5nIGEgY2FsY3VsYXRpb24sIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGJhcmVseSBjb3JuIGZvciB0aGlydHkgZGF5cywgYnV0IGNvdWxkIGhvbGQgb3V0IGEgbGl0dGxlIGxvbmdlciBieSBlY29ub215LiIKICAgICAgICAgICAgICAgICAgICBBZnRlciBnaXZpbmcgdGhlc2UgaW5zdHJ1Y3Rpb25zIGhlIHNpbGVudGx5IGRpc21pc3NlcyB0aGUgY2F2YWxyeSBpbiB0aGUgc2Vjb25kCiAgICAgICAgICAgICAgICAgICAgd2F0Y2gsIFtvbiB0aGF0IHNpZGVdIHdoZXJlIG91ciB3b3JrcyB3ZXJlIG5vdCBjb21wbGV0ZWQ7IGhlIG9yZGVycyBhbGwgdGhlIGNvcm4KICAgICAgICAgICAgICAgICAgICB0byBiZSBicm91Z2h0IHRvIGhpbXNlbGY7IGhlIG9yZGFpbnMgY2FwaXRhbCBwdW5pc2htZW50IHRvIHN1Y2ggYXMgc2hvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIG9iZXk7IGhlIGRpc3RyaWJ1dGVzIGFtb25nIHRoZW0sIG1hbiBieSBtYW4sIHRoZSBjYXR0bGUsIGdyZWF0IHF1YW50aXRpZXMgb2YKICAgICAgICAgICAgICAgICAgICB3aGljaCBoYWQgYmVlbiBkcml2ZW4gdGhlcmUgYnkgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFuZHViaWk8L25hbWU+OyBoZSBiZWdhbiB0byBtZWFzdXJlCiAgICAgICAgICAgICAgICAgICAgb3V0IHRoZSBjb3JuIHNwYXJpbmdseSwgYW5kIGJ5IGxpdHRsZSBhbmQgbGl0dGxlOyBoZSByZWNlaXZlcyBpbnRvIHRoZSB0b3duIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSBmb3JjZXMgd2hpY2ggaGUgaGFkIHBvc3RlZCBpbiBmcm9udCBvZiBpdC4gSW4gdGhpcyBtYW5uZXIgaGUgcHJlcGFyZXMgdG8KICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGUgc3VjY29ycyBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgYW5kIGNhcnJ5IG9uIHRoZSB3YXIuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb24gbGVhcm5pbmcgdGhlc2UgcHJvY2VlZGluZ3MgZnJvbSB0aGUgZGVzZXJ0ZXJzCiAgICAgICAgICAgICAgICAgICAgYW5kIGNhcHRpdmVzLCBhZG9wdGVkIHRoZSBmb2xsb3dpbmcgc3lzdGVtIG9mIGZvcnRpZmljYXRpb247IGhlIGR1ZyBhIHRyZW5jaAogICAgICAgICAgICAgICAgICAgIHR3ZW50eSBmZWV0IGRlZXAsIHdpdGggcGVycGVuZGljdWxhciBzaWRlcywgaW4gc3VjaCBhIG1hbm5lciB0aGF0IHRoZSBiYXNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyB0cmVuY2ggc2hvdWxkIGV4dGVuZCBzbyBmYXIgYXMgdGhlIGVkZ2VzIHdlcmUgYXBhcnQgYXQgdGhlIHRvcC4gSGUgcmFpc2VkCiAgICAgICAgICAgICAgICAgICAgYWxsIGhpcyBvdGhlciB3b3JrcyBhdCBhIGRpc3RhbmNlIG9mIGZvdXIgaHVuZHJlZCBmZWV0IGZyb20gdGhhdCBkaXRjaDsgW2hlIGRpZF0KICAgICAgICAgICAgICAgICAgICB0aGF0IHdpdGggdGhpcyBpbnRlbnRpb24sIGxlc3QgKHNpbmNlIGhlIG5lY2Vzc2FyaWx5IGVtYnJhY2VkIHNvIGV4dGVuc2l2ZSBhbgogICAgICAgICAgICAgICAgICAgIGFyZWEsIGFuZCB0aGUgd2hvbGUgd29ya3MgY291bGQgbm90IGJlIGVhc2lseSBzdXJyb3VuZGVkIGJ5IGEgbGluZSBvZiBzb2xkaWVycykKICAgICAgICAgICAgICAgICAgICBhIGxhcmdlIG51bWJlciBvZiB0aGUgZW5lbXkgc2hvdWxkIHN1ZGRlbmx5LCBvciBieSBuaWdodCwgc2FsbHkgYWdhaW5zdCB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpY2F0aW9uczsgb3IgbGVzdCB0aGV5IHNob3VsZCBieSBkYXkgY2FzdCB3ZWFwb25zIGFnYWluc3Qgb3VyIG1lbiB3aGlsZQogICAgICAgICAgICAgICAgICAgIG9jY3VwaWVkIHdpdGggdGhlIHdvcmtzLiBIYXZpbmcgbGVmdCB0aGlzIGludGVydmFsLCBoZSBkcmV3IHR3byB0cmVuY2hlcyBmaWZ0ZWVuCiAgICAgICAgICAgICAgICAgICAgZmVldCBicm9hZCwgYW5kIG9mIHRoZSBzYW1lIGRlcHRoOyB0aGUgaW5uZXJtb3N0IG9mIHRoZW0sIGJlaW5nIGluIGxvdyBhbmQgbGV2ZWwKICAgICAgICAgICAgICAgICAgICBncm91bmQsIGhlIGZpbGxlZCB3aXRoIHdhdGVyIGNvbnZleWVkIGZyb20gdGhlIHJpdmVyLiBCZWhpbmQgdGhlc2UgaGUgcmFpc2VkIGEKICAgICAgICAgICAgICAgICAgICByYW1wYXJ0IGFuZCB3YWxsIHR3ZWx2ZSBmZWV0IGhpZ2g7IHRvIHRoaXMgaGUgYWRkZWQgYSBwYXJhcGV0IGFuZCBiYXR0bGVtZW50cywKICAgICAgICAgICAgICAgICAgICB3aXRoIGxhcmdlIHN0YWtlcyBjdXQgbGlrZSBzdGFncycgaG9ybnMsIHByb2plY3RpbmcgZnJvbSB0aGUganVuY3Rpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGFyYXBldCBhbmQgYmF0dGxlbWVudHMsIHRvIHByZXZlbnQgdGhlIGVuZW15IGZyb20gc2NhbGluZyBpdCwgYW5kIHN1cnJvdW5kZWQKICAgICAgICAgICAgICAgICAgICB0aGUgZW50aXJlIHdvcmsgd2l0aCB0dXJyZXRzLCB3aGljaCB3ZXJlIGVpZ2h0eSBmZWV0IGRpc3RhbnQgZnJvbSBvbmUgYW5vdGhlci4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjczIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb24gbGVhcm5pbmcgdGhlc2UgcHJvY2VlZGluZ3MgZnJvbSB0aGUgZGVzZXJ0ZXJzCiAgICAgICAgICAgICAgICAgICAgYW5kIGNhcHRpdmVzLCBhZG9wdGVkIHRoZSBmb2xsb3dpbmcgc3lzdGVtIG9mIGZvcnRpZmljYXRpb247IGhlIGR1ZyBhIHRyZW5jaAogICAgICAgICAgICAgICAgICAgIHR3ZW50eSBmZWV0IGRlZXAsIHdpdGggcGVycGVuZGljdWxhciBzaWRlcywgaW4gc3VjaCBhIG1hbm5lciB0aGF0IHRoZSBiYXNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyB0cmVuY2ggc2hvdWxkIGV4dGVuZCBzbyBmYXIgYXMgdGhlIGVkZ2VzIHdlcmUgYXBhcnQgYXQgdGhlIHRvcC4gSGUgcmFpc2VkCiAgICAgICAgICAgICAgICAgICAgYWxsIGhpcyBvdGhlciB3b3JrcyBhdCBhIGRpc3RhbmNlIG9mIGZvdXIgaHVuZHJlZCBmZWV0IGZyb20gdGhhdCBkaXRjaDsgW2hlIGRpZF0KICAgICAgICAgICAgICAgICAgICB0aGF0IHdpdGggdGhpcyBpbnRlbnRpb24sIGxlc3QgKHNpbmNlIGhlIG5lY2Vzc2FyaWx5IGVtYnJhY2VkIHNvIGV4dGVuc2l2ZSBhbgogICAgICAgICAgICAgICAgICAgIGFyZWEsIGFuZCB0aGUgd2hvbGUgd29ya3MgY291bGQgbm90IGJlIGVhc2lseSBzdXJyb3VuZGVkIGJ5IGEgbGluZSBvZiBzb2xkaWVycykKICAgICAgICAgICAgICAgICAgICBhIGxhcmdlIG51bWJlciBvZiB0aGUgZW5lbXkgc2hvdWxkIHN1ZGRlbmx5LCBvciBieSBuaWdodCwgc2FsbHkgYWdhaW5zdCB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpY2F0aW9uczsgb3IgbGVzdCB0aGV5IHNob3VsZCBieSBkYXkgY2FzdCB3ZWFwb25zIGFnYWluc3Qgb3VyIG1lbiB3aGlsZQogICAgICAgICAgICAgICAgICAgIG9jY3VwaWVkIHdpdGggdGhlIHdvcmtzLiBIYXZpbmcgbGVmdCB0aGlzIGludGVydmFsLCBoZSBkcmV3IHR3byB0cmVuY2hlcyBmaWZ0ZWVuCiAgICAgICAgICAgICAgICAgICAgZmVldCBicm9hZCwgYW5kIG9mIHRoZSBzYW1lIGRlcHRoOyB0aGUgaW5uZXJtb3N0IG9mIHRoZW0sIGJlaW5nIGluIGxvdyBhbmQgbGV2ZWwKICAgICAgICAgICAgICAgICAgICBncm91bmQsIGhlIGZpbGxlZCB3aXRoIHdhdGVyIGNvbnZleWVkIGZyb20gdGhlIHJpdmVyLiBCZWhpbmQgdGhlc2UgaGUgcmFpc2VkIGEKICAgICAgICAgICAgICAgICAgICByYW1wYXJ0IGFuZCB3YWxsIHR3ZWx2ZSBmZWV0IGhpZ2g7IHRvIHRoaXMgaGUgYWRkZWQgYSBwYXJhcGV0IGFuZCBiYXR0bGVtZW50cywKICAgICAgICAgICAgICAgICAgICB3aXRoIGxhcmdlIHN0YWtlcyBjdXQgbGlrZSBzdGFncycgaG9ybnMsIHByb2plY3RpbmcgZnJvbSB0aGUganVuY3Rpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGFyYXBldCBhbmQgYmF0dGxlbWVudHMsIHRvIHByZXZlbnQgdGhlIGVuZW15IGZyb20gc2NhbGluZyBpdCwgYW5kIHN1cnJvdW5kZWQKICAgICAgICAgICAgICAgICAgICB0aGUgZW50aXJlIHdvcmsgd2l0aCB0dXJyZXRzLCB3aGljaCB3ZXJlIGVpZ2h0eSBmZWV0IGRpc3RhbnQgZnJvbSBvbmUgYW5vdGhlci4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IHdhcyBuZWNlc3NhcnksIGF0IG9uZSBhbmQgdGhlIHNhbWUgdGltZSwgdG8gcHJvY3VyZSB0aW1iZXIgW2ZvciB0aGUgcmFtcGFydF0sCiAgICAgICAgICAgICAgICAgICAgbGF5IGluIHN1cHBsaWVzIG9mIGNvcm4sIGFuZCByYWlzZSBhbHNvIGV4dGVuc2l2ZSBmb3J0aWZpY2F0aW9ucywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZSB0cm9vcHMgd2VyZSBpbiBjb25zZXF1ZW5jZSBvZiB0aGlzIHJlZHVjZWQgaW4gbnVtYmVyLCBzaW5jZSB0aGV5IHVzZWQKICAgICAgICAgICAgICAgICAgICB0byBhZHZhbmNlIHRvIHNvbWUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtcCwgYW5kIHNvbWV0aW1lcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBlbmRlYXZvcmVkIHRvIGF0dGFjayBvdXIgd29ya3MsIGFuZCB0byBtYWtlIGEgc2FsbHkgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICB0b3duIGJ5IHNldmVyYWwgZ2F0ZXMgYW5kIGluIGdyZWF0IGZvcmNlLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IHRoYXQgZnVydGhlciBhZGRpdGlvbnMgc2hvdWxkIGJlIG1hZGUgdG8gdGhlc2Ugd29ya3MsIGluIG9yZGVyIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9ydGlmaWNhdGlvbnMgbWlnaHQgYmUgZGVmZW5zaWJsZSBieSBhIHNtYWxsIG51bWJlciBvZiBzb2xkaWVycy4gSGF2aW5nLAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgY3V0IGRvd24gdGhlIHRydW5rcyBvZiB0cmVlcyBvciB2ZXJ5IHRoaWNrIGJyYW5jaGVzLCBhbmQgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgc3RyaXBwZWQgdGhlaXIgdG9wcyBvZiB0aGUgYmFyaywgYW5kIHNoYXJwZW5lZCB0aGVtIGludG8gYSBwb2ludCwgaGUgZHJldyBhCiAgICAgICAgICAgICAgICAgICAgY29udGludWVkIHRyZW5jaCBldmVyeSB3aGVyZSBmaXZlIGZlZXQgZGVlcC4gVGhlc2Ugc3Rha2VzIGJlaW5nIHN1bmsgaW50byB0aGlzCiAgICAgICAgICAgICAgICAgICAgdHJlbmNoLCBhbmQgZmFzdGVuZWQgZmlybWx5IGF0IHRoZSBib3R0b20sIHRvIHByZXZlbnQgdGhlIHBvc3NpYmlsaXR5IG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgdG9ybiB1cCwgaGFkIHRoZWlyIGJyYW5jaGVzIG9ubHkgcHJvamVjdGluZyBmcm9tIHRoZSBncm91bmQuIFRoZXJlIHdlcmUKICAgICAgICAgICAgICAgICAgICBmaXZlIHJvd3MgaW4gY29ubmVjdGlvbiB3aXRoLCBhbmQgaW50ZXJzZWN0aW5nIGVhY2ggb3RoZXI7IGFuZCB3aG9ldmVyIGVudGVyZWQKICAgICAgICAgICAgICAgICAgICB3aXRoaW4gdGhlbSB3ZXJlIGxpa2VseSB0byBpbXBhbGUgdGhlbXNlbHZlcyBvbiB2ZXJ5IHNoYXJwIHN0YWtlcy4gVGhlIHNvbGRpZXJzCiAgICAgICAgICAgICAgICAgICAgY2FsbGVkIHRoZXNlICJjaXBwaS4iIEJlZm9yZSB0aGVzZSwgd2hpY2ggd2VyZSBhcnJhbmdlZCBpbiBvYmxpcXVlIHJvd3MgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZm9ybSBvZiBhIHF1aW5jdW54LCBwaXRzIHRocmVlIGZlZXQgZGVlcCB3ZXJlIGR1Zywgd2hpY2ggZ3JhZHVhbGx5IGRpbWluaXNoZWQgaW4KICAgICAgICAgICAgICAgICAgICBkZXB0aCB0byB0aGUgYm90dG9tLiBJbiB0aGVzZSBwaXRzIHRhcGVyaW5nIHN0YWtlcywgb2YgdGhlIHRoaWNrbmVzcyBvZiBhIG1hbidzCiAgICAgICAgICAgICAgICAgICAgdGhpZ2g7IHNoYXJwZW5lZCBhdCB0aGUgdG9wIGFuZCBoYXJkZW5lZCBpbiB0aGUgZmlyZSwgd2VyZSBzdW5rIGluIHN1Y2ggYSBtYW5uZXIKICAgICAgICAgICAgICAgICAgICBhcyB0byBwcm9qZWN0IGZyb20gdGhlIGdyb3VuZCBub3QgbW9yZSB0aGFuIGZvdXIgaW5jaGVzOyBhdCB0aGUgc2FtZSB0aW1lIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBwdXJwb3NlIG9mIGdpdmluZyB0aGVtIHN0cmVuZ3RoIGFuZCBzdGFiaWxpdHksIHRoZXkgd2VyZSBlYWNoIGZpbGxlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgdHJhbXBsZWQgY2xheSB0byB0aGUgaGVpZ2h0IG9mIG9uZSBmb290IGZyb20gdGhlIGJvdHRvbTogdGhlIHJlc3Qgb2YgdGhlIHBpdCB3YXMKICAgICAgICAgICAgICAgICAgICBjb3ZlcmVkIG92ZXIgd2l0aCBvc2llcnMgYW5kIHR3aWdzLCB0byBjb25jZWFsIHRoZSBkZWNlaXQuIEVpZ2h0IHJvd3Mgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgIGtpbmQgd2VyZSBkdWcsIGFuZCB3ZXJlIHRocmVlIGZlZXQgZGlzdGFudCBmcm9tIGVhY2ggb3RoZXIuIFRoZXkgY2FsbGVkIHRoaXMgYQogICAgICAgICAgICAgICAgICAgIGxpbHkgZnJvbSBpdHMgcmVzZW1ibGFuY2UgdG8gdGhhdCBmbG93ZXIuIFN0YWtlcyBhIGZvb3QgbG9uZywgd2l0aCBpcm9uIGhvb2tzCiAgICAgICAgICAgICAgICAgICAgYXR0YWNoZWQgdG8gdGhlbSwgd2VyZSBlbnRpcmVseSBzdW5rIGluIHRoZSBncm91bmQgYmVmb3JlIHRoZXNlLCBhbmQgd2VyZQogICAgICAgICAgICAgICAgICAgIHBsYW50ZWQgaW4gZXZlcnkgcGxhY2UgYXQgc21hbGwgaW50ZXJ2YWxzOyB0aGVzZSB0aGV5IGNhbGxlZCBzcHVycy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijc0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gZW5kZWF2b3JlZCB0byBhdHRhY2sgb3VyIHdvcmtzLCBhbmQgdG8gbWFrZSBhIHNhbGx5IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgdG93biBieSBzZXZlcmFsIGdhdGVzIGFuZCBpbiBncmVhdCBmb3JjZS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGF0IGZ1cnRoZXIgYWRkaXRpb25zIHNob3VsZCBiZSBtYWRlIHRvIHRoZXNlIHdvcmtzLCBpbiBvcmRlciB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGZvcnRpZmljYXRpb25zIG1pZ2h0IGJlIGRlZmVuc2libGUgYnkgYSBzbWFsbCBudW1iZXIgb2Ygc29sZGllcnMuIEhhdmluZywKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIGN1dCBkb3duIHRoZSB0cnVua3Mgb2YgdHJlZXMgb3IgdmVyeSB0aGljayBicmFuY2hlcywgYW5kIGhhdmluZwogICAgICAgICAgICAgICAgICAgIHN0cmlwcGVkIHRoZWlyIHRvcHMgb2YgdGhlIGJhcmssIGFuZCBzaGFycGVuZWQgdGhlbSBpbnRvIGEgcG9pbnQsIGhlIGRyZXcgYQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlZCB0cmVuY2ggZXZlcnkgd2hlcmUgZml2ZSBmZWV0IGRlZXAuIFRoZXNlIHN0YWtlcyBiZWluZyBzdW5rIGludG8gdGhpcwogICAgICAgICAgICAgICAgICAgIHRyZW5jaCwgYW5kIGZhc3RlbmVkIGZpcm1seSBhdCB0aGUgYm90dG9tLCB0byBwcmV2ZW50IHRoZSBwb3NzaWJpbGl0eSBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGJlaW5nIHRvcm4gdXAsIGhhZCB0aGVpciBicmFuY2hlcyBvbmx5IHByb2plY3RpbmcgZnJvbSB0aGUgZ3JvdW5kLiBUaGVyZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZml2ZSByb3dzIGluIGNvbm5lY3Rpb24gd2l0aCwgYW5kIGludGVyc2VjdGluZyBlYWNoIG90aGVyOyBhbmQgd2hvZXZlciBlbnRlcmVkCiAgICAgICAgICAgICAgICAgICAgd2l0aGluIHRoZW0gd2VyZSBsaWtlbHkgdG8gaW1wYWxlIHRoZW1zZWx2ZXMgb24gdmVyeSBzaGFycCBzdGFrZXMuIFRoZSBzb2xkaWVycwogICAgICAgICAgICAgICAgICAgIGNhbGxlZCB0aGVzZSAiY2lwcGkuIiBCZWZvcmUgdGhlc2UsIHdoaWNoIHdlcmUgYXJyYW5nZWQgaW4gb2JsaXF1ZSByb3dzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGZvcm0gb2YgYSBxdWluY3VueCwgcGl0cyB0aHJlZSBmZWV0IGRlZXAgd2VyZSBkdWcsIHdoaWNoIGdyYWR1YWxseSBkaW1pbmlzaGVkIGluCiAgICAgICAgICAgICAgICAgICAgZGVwdGggdG8gdGhlIGJvdHRvbS4gSW4gdGhlc2UgcGl0cyB0YXBlcmluZyBzdGFrZXMsIG9mIHRoZSB0aGlja25lc3Mgb2YgYSBtYW4ncwogICAgICAgICAgICAgICAgICAgIHRoaWdoOyBzaGFycGVuZWQgYXQgdGhlIHRvcCBhbmQgaGFyZGVuZWQgaW4gdGhlIGZpcmUsIHdlcmUgc3VuayBpbiBzdWNoIGEgbWFubmVyCiAgICAgICAgICAgICAgICAgICAgYXMgdG8gcHJvamVjdCBmcm9tIHRoZSBncm91bmQgbm90IG1vcmUgdGhhbiBmb3VyIGluY2hlczsgYXQgdGhlIHNhbWUgdGltZSBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgcHVycG9zZSBvZiBnaXZpbmcgdGhlbSBzdHJlbmd0aCBhbmQgc3RhYmlsaXR5LCB0aGV5IHdlcmUgZWFjaCBmaWxsZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRyYW1wbGVkIGNsYXkgdG8gdGhlIGhlaWdodCBvZiBvbmUgZm9vdCBmcm9tIHRoZSBib3R0b206IHRoZSByZXN0IG9mIHRoZSBwaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgY292ZXJlZCBvdmVyIHdpdGggb3NpZXJzIGFuZCB0d2lncywgdG8gY29uY2VhbCB0aGUgZGVjZWl0LiBFaWdodCByb3dzIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBraW5kIHdlcmUgZHVnLCBhbmQgd2VyZSB0aHJlZSBmZWV0IGRpc3RhbnQgZnJvbSBlYWNoIG90aGVyLiBUaGV5IGNhbGxlZCB0aGlzIGEKICAgICAgICAgICAgICAgICAgICBsaWx5IGZyb20gaXRzIHJlc2VtYmxhbmNlIHRvIHRoYXQgZmxvd2VyLiBTdGFrZXMgYSBmb290IGxvbmcsIHdpdGggaXJvbiBob29rcwogICAgICAgICAgICAgICAgICAgIGF0dGFjaGVkIHRvIHRoZW0sIHdlcmUgZW50aXJlbHkgc3VuayBpbiB0aGUgZ3JvdW5kIGJlZm9yZSB0aGVzZSwgYW5kIHdlcmUKICAgICAgICAgICAgICAgICAgICBwbGFudGVkIGluIGV2ZXJ5IHBsYWNlIGF0IHNtYWxsIGludGVydmFsczsgdGhlc2UgdGhleSBjYWxsZWQgc3B1cnMuIDwvdHJhbnNsYXRpb24+"
translation['7.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIGNvbXBsZXRpbmcgdGhlc2Ugd29ya3MsIHNhdmluZyBzZWxlY3RlZCBhcyBsZXZlbCBncm91bmQgYXMgaGUgY291bGQsCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJpbmcgdGhlIG5hdHVyZSBvZiB0aGUgY291bnRyeSwgYW5kIGhhdmluZyBpbmNsb3NlZCBhbiBhcmVhIG9mIGZvdXJ0ZWVuCiAgICAgICAgICAgICAgICAgICAgbWlsZXMsIGhlIGNvbnN0cnVjdGVkLCBhZ2FpbnN0IGFuIGV4dGVybmFsIGVuZW15LCBmb3J0aWZpY2F0aW9ucyBvZiB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIGtpbmQgaW4gZXZlcnkgcmVzcGVjdCwgYW5kIHNlcGFyYXRlIGZyb20gdGhlc2UsIHNvIHRoYXQgdGhlIGd1YXJkcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpY2F0aW9ucyBjb3VsZCBub3QgYmUgc3Vycm91bmRlZCBldmVuIGJ5IGltbWVuc2UgbnVtYmVycywgaWYgc3VjaCBhCiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlIHNob3VsZCB0YWtlIHBsYWNlIG93aW5nIHRvIHRoZSBkZXBhcnR1cmUgb2YgdGhlIGVuZW15J3MgY2F2YWxyeTsKICAgICAgICAgICAgICAgICAgICBhbmQgaW4gb3JkZXIgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBzb2xkaWVycyBtaWdodCBub3QgYmUKICAgICAgICAgICAgICAgICAgICBjb21wZWxsZWQgdG8gZ28gb3V0IG9mIHRoZSBjYW1wIHdpdGggZ3JlYXQgcmlzaywgaG8gb3JkZXJzIGFsbCB0byBwcm92aWRlIGZvcmFnZQogICAgICAgICAgICAgICAgICAgIGFuZCBjb3JuIGZvciB0aGlydHkgZGF5cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijc1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gc29sZGllcnMgbWlnaHQgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgY29tcGVsbGVkIHRvIGdvIG91dCBvZiB0aGUgY2FtcCB3aXRoIGdyZWF0IHJpc2ssIGhvIG9yZGVycyBhbGwgdG8gcHJvdmlkZSBmb3JhZ2UKICAgICAgICAgICAgICAgICAgICBhbmQgY29ybiBmb3IgdGhpcnR5IGRheXMuIDwvdHJhbnNsYXRpb24+"
translation['7.75'] = ""
translation['7.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQsIGFzIHdlIGhhdmUgcHJldmlvdXNseSBuYXJyYXRlZCwgYXZhaWxlZAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgb2YgdGhlIGZhaXRoZnVsIGFuZCB2YWx1YWJsZSBzZXJ2aWNlcyBvZiB0aGlzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tbWl1czwvbmFtZT4sIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODY1MyIgcmVnPSJHcmVhdCBCcml0YWluIChpc2xhbmQpLCBVbml0ZWQgS2luZ2RvbSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+QnJpdGFpbjwvbmFtZT4sIGluCiAgICAgICAgICAgICAgICAgICAgZm9ybWVyIHllYXJzOiBpbiBjb25zaWRlcmF0aW9uIG9mIHdoaWNoIG1lcml0cyBoZSBoYWQgZXhlbXB0ZWQgZnJvbSB0YXhlcyBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5bQ29tbWl1czwvbmFtZT4nc10gc3RhdGUsIGFuZCBoYWQgY29uZmVycmVkIG9uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tbWl1czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHRoZSBjb3VudHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmluaTwvbmFtZT4uIFlldCBzdWNoIHdhcyB0aGUgdW5hbmltaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gaW4gYXNzZXJ0aW5nIHRoZWlyIGZyZWVkb20sIGFuZCByZWNvdmVyaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYW5jaWVudCByZW5vd24gaW4gd2FyLCB0aGF0IHRoZXkgd2VyZSBpbmZsdWVuY2VkIG5laXRoZXIgYnkgZmF2b3JzLCBub3IgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgcmVjb2xsZWN0aW9uIG9mIHByaXZhdGUgZnJpZW5kc2hpcDsgYW5kIGFsbCBlYXJuZXN0bHkgZGlyZWN0ZWQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBlbmVyZ2llcyBhbmQgcmVzb3VyY2VzIHRvIHRoYXQgd2FyLCBhbmQgY29sbGVjdGVkIGVpZ2h0IHRob3VzYW5kIGNhdmFscnksIGFuZAogICAgICAgICAgICAgICAgICAgIGFib3V0IHR3byBodW5kcmVkIGFuZCBmb3J0eSB0aG91c2FuZCBpbmZhbnRyeS4gVGhlc2Ugd2VyZSByZXZpZXdlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYW5kIGEgY2FsY3VsYXRpb24gd2FzIG1hZGUgb2YgdGhlaXIgbnVtYmVyczoKICAgICAgICAgICAgICAgICAgICBjb21tYW5kZXJzIHdlcmUgYXBwb2ludGVkOiB0aGUgc3VwcmVtZSBjb21tYW5kIGlzIGludHJ1c3RlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbW1pdXM8L25hbWU+IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkF0cmViYXRpYW48L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZpcmlkb21hcnVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwb3JlZGlyaXg8L25hbWU+IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVhbnM8L25hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJnYXNpbGxhdW51czwvbmFtZT4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuYW48L25hbWU+LCB0aGUgY291c2luLWdlcm1hbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+LiBUbyB0aGVtIGFyZSBhc3NpZ25lZCBtZW4gc2VsZWN0ZWQgZnJvbSBlYWNoCiAgICAgICAgICAgICAgICAgICAgc3RhdGUsIGJ5IHdob3NlIGFkdmljZSB0aGUgd2FyIHNob3VsZCBiZSBjb25kdWN0ZWQuIEFsbCBtYXJjaCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgyMTMiIHJlZz0iICArQWxpc2UtU2FpbnRlLVJlaW5lIFs0LjUsNDcuNTVdIChpbmhhYml0ZWQgcGxhY2UpLCBDb3RlLWQnT3IsIEJ1cmd1bmR5LCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BbGVzaWEgPC9uYW1lPiwgc2FuZ3VpbmUgYW5kIGZ1bGwgb2YgY29uZmlkZW5jZTogbm9yIHdhcyB0aGVyZSBhIHNpbmdsZQogICAgICAgICAgICAgICAgICAgIGluZGl2aWR1YWwgd2hvIGltYWdpbmVkIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGNvdWxkCiAgICAgICAgICAgICAgICAgICAgd2l0aHN0YW5kIHRoZSBzaWdodCBvZiBzdWNoIGFuIGltbWVuc2UgaG9zdDogZXNwZWNpYWxseSBpbiBhbiBhY3Rpb24gY2FycmllZCBvbgogICAgICAgICAgICAgICAgICAgIGJvdGggaW4gZnJvbnQgYW5kIHJlYXIsIHdoZW4gW29uIHRoZSBpbnNpZGVdIHRoZSBiZXNpZWdlZCB3b3VsZCBzYWxseSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHRvd24gYW5kIGF0dGFjayB0aGUgZW5lbXksIGFuZCBvbiB0aGUgb3V0c2lkZSBzbyBncmVhdCBmb3JjZXMgb2YgY2F2YWxyeSBhbmQKICAgICAgICAgICAgICAgICAgICBpbmZhbnRyeSB3b3VsZCBiZSBzZWVuLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCwgYXMgd2UgaGF2ZSBwcmV2aW91c2x5IG5hcnJhdGVkLCBhdmFpbGVkCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBvZiB0aGUgZmFpdGhmdWwgYW5kIHZhbHVhYmxlIHNlcnZpY2VzIG9mIHRoaXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21taXVzPC9uYW1lPiwgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NjUzIiByZWc9IkdyZWF0IEJyaXRhaW4gKGlzbGFuZCksIFVuaXRlZCBLaW5nZG9tLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5Ccml0YWluPC9uYW1lPiwgaW4KICAgICAgICAgICAgICAgICAgICBmb3JtZXIgeWVhcnM6IGluIGNvbnNpZGVyYXRpb24gb2Ygd2hpY2ggbWVyaXRzIGhlIGhhZCBleGVtcHRlZCBmcm9tIHRheGVzIGhpcwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPltDb21taXVzPC9uYW1lPidzXSBzdGF0ZSwgYW5kIGhhZCBjb25mZXJyZWQgb24gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21taXVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgdGhlIGNvdW50cnkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yaW5pPC9uYW1lPi4gWWV0IHN1Y2ggd2FzIHRoZSB1bmFuaW1pdHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiBpbiBhc3NlcnRpbmcgdGhlaXIgZnJlZWRvbSwgYW5kIHJlY292ZXJpbmcKICAgICAgICAgICAgICAgICAgICB0aGVpciBhbmNpZW50IHJlbm93biBpbiB3YXIsIHRoYXQgdGhleSB3ZXJlIGluZmx1ZW5jZWQgbmVpdGhlciBieSBmYXZvcnMsIG5vciBieQogICAgICAgICAgICAgICAgICAgIHRoZSByZWNvbGxlY3Rpb24gb2YgcHJpdmF0ZSBmcmllbmRzaGlwOyBhbmQgYWxsIGVhcm5lc3RseSBkaXJlY3RlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGVuZXJnaWVzIGFuZCByZXNvdXJjZXMgdG8gdGhhdCB3YXIsIGFuZCBjb2xsZWN0ZWQgZWlnaHQgdGhvdXNhbmQgY2F2YWxyeSwgYW5kCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdHdvIGh1bmRyZWQgYW5kIGZvcnR5IHRob3VzYW5kIGluZmFudHJ5LiBUaGVzZSB3ZXJlIHJldmlld2VkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNvdW50cnkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCBhbmQgYSBjYWxjdWxhdGlvbiB3YXMgbWFkZSBvZiB0aGVpciBudW1iZXJzOgogICAgICAgICAgICAgICAgICAgIGNvbW1hbmRlcnMgd2VyZSBhcHBvaW50ZWQ6IHRoZSBzdXByZW1lIGNvbW1hbmQgaXMgaW50cnVzdGVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tbWl1czwvbmFtZT4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXRyZWJhdGlhbjwvbmFtZT4sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmlyaWRvbWFydXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBvcmVkaXJpeDwvbmFtZT4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWFuczwvbmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmdhc2lsbGF1bnVzPC9uYW1lPiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5hbjwvbmFtZT4sIHRoZSBjb3VzaW4tZ2VybWFuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4uIFRvIHRoZW0gYXJlIGFzc2lnbmVkIG1lbiBzZWxlY3RlZCBmcm9tIGVhY2gKICAgICAgICAgICAgICAgICAgICBzdGF0ZSwgYnkgd2hvc2UgYWR2aWNlIHRoZSB3YXIgc2hvdWxkIGJlIGNvbmR1Y3RlZC4gQWxsIG1hcmNoIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODIxMyIgcmVnPSIgICtBbGlzZS1TYWludGUtUmVpbmUgWzQuNSw0Ny41NV0gKGluaGFiaXRlZCBwbGFjZSksIENvdGUtZCdPciwgQnVyZ3VuZHksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkFsZXNpYSA8L25hbWU+LCBzYW5ndWluZSBhbmQgZnVsbCBvZiBjb25maWRlbmNlOiBub3Igd2FzIHRoZXJlIGEgc2luZ2xlCiAgICAgICAgICAgICAgICAgICAgaW5kaXZpZHVhbCB3aG8gaW1hZ2luZWQgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gY291bGQKICAgICAgICAgICAgICAgICAgICB3aXRoc3RhbmQgdGhlIHNpZ2h0IG9mIHN1Y2ggYW4gaW1tZW5zZSBob3N0OiBlc3BlY2lhbGx5IGluIGFuIGFjdGlvbiBjYXJyaWVkIG9uCiAgICAgICAgICAgICAgICAgICAgYm90aCBpbiBmcm9udCBhbmQgcmVhciwgd2hlbiBbb24gdGhlIGluc2lkZV0gdGhlIGJlc2llZ2VkIHdvdWxkIHNhbGx5IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgdG93biBhbmQgYXR0YWNrIHRoZSBlbmVteSwgYW5kIG9uIHRoZSBvdXRzaWRlIHNvIGdyZWF0IGZvcmNlcyBvZiBjYXZhbHJ5IGFuZAogICAgICAgICAgICAgICAgICAgIGluZmFudHJ5IHdvdWxkIGJlIHNlZW4uIDwvdHJhbnNsYXRpb24+"
translation['7.77'] = ""
translation['7.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gZGlmZmVyZW50IG9waW5pb25zIHdlcmUgZXhwcmVzc2VkLCB0aGV5IGRldGVybWluZWQgdGhhdCB0aG9zZSB3aG8sIG93aW5nIHRvCiAgICAgICAgICAgICAgICAgICAgYWdlIG9yIGlsbCBoZWFsdGgsIHdlcmUgdW5zZXJ2aWNlYWJsZSBmb3Igd2FyLCBzaG91bGQgZGVwYXJ0IGZyb20gdGhlIHRvd24sIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlbXNlbHZlcyBzaG91bGQgdHJ5IGV2ZXJ5IGV4cGVkaWVudCBiZWZvcmUgdGhleSBoYWQgcmVjb3Vyc2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgYWR2aWNlIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3JpdG9nbmF0dXM8L25hbWU+OiBob3dldmVyLCB0aGF0IHRoZXkgd291bGQgcmF0aGVyIGFkb3B0IHRoYXQKICAgICAgICAgICAgICAgICAgICBkZXNpZ24sIGlmIGNpcmN1bXN0YW5jZXMgc2hvdWxkIGNvbXBlbCB0aGVtIGFuZCB0aGVpciBhbGxpZXMgc2hvdWxkIGRlbGF5LCB0aGFuCiAgICAgICAgICAgICAgICAgICAgYWNjZXB0IGFueSB0ZXJtcyBvZiBhIHN1cnJlbmRlciBvciBwZWFjZS4gVGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFuZHViaWk8L25hbWU+LCB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgYWRtaXR0ZWQgdGhlbSBpbnRvIHRoZSB0b3duLCBhcmUgY29tcGVsbGVkIHRvIGdvIGZvcnRoIHdpdGggdGhlaXIgd2l2ZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4uIFdoZW4gdGhlc2UgY2FtZSB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGZvcnRpZmljYXRpb25zLCB3ZWVwaW5nLCB0aGV5IGJlZ2dlZCBvZiB0aGUgc29sZGllcnMgYnkgZXZlcnkgZW50cmVhdHkgdG8KICAgICAgICAgICAgICAgICAgICByZWNlaXZlIHRoZW0gYXMgc2xhdmVzIGFuZCByZWxpZXZlIHRoZW0gd2l0aCBmb29kLiBCdXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBwbGFjaW5nIGd1YXJkcyBvbiB0aGUgcmFtcGFydCwgZm9yYmFkZSB0aGVtIHRvIGJlIGFkbWl0dGVkLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzkiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Dcml0b2duYXR1czwvbmFtZT46IGhvd2V2ZXIsIHRoYXQgdGhleSB3b3VsZCByYXRoZXIgYWRvcHQgdGhhdAogICAgICAgICAgICAgICAgICAgIGRlc2lnbiwgaWYgY2lyY3Vtc3RhbmNlcyBzaG91bGQgY29tcGVsIHRoZW0gYW5kIHRoZWlyIGFsbGllcyBzaG91bGQgZGVsYXksIHRoYW4KICAgICAgICAgICAgICAgICAgICBhY2NlcHQgYW55IHRlcm1zIG9mIGEgc3VycmVuZGVyIG9yIHBlYWNlLiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYW5kdWJpaTwvbmFtZT4sIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBhZG1pdHRlZCB0aGVtIGludG8gdGhlIHRvd24sIGFyZSBjb21wZWxsZWQgdG8gZ28gZm9ydGggd2l0aCB0aGVpciB3aXZlcyBhbmQKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi4gV2hlbiB0aGVzZSBjYW1lIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgZm9ydGlmaWNhdGlvbnMsIHdlZXBpbmcsIHRoZXkgYmVnZ2VkIG9mIHRoZSBzb2xkaWVycyBieSBldmVyeSBlbnRyZWF0eSB0bwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgdGhlbSBhcyBzbGF2ZXMgYW5kIHJlbGlldmUgdGhlbSB3aXRoIGZvb2QuIEJ1dCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHBsYWNpbmcgZ3VhcmRzIG9uIHRoZSByYW1wYXJ0LCBmb3JiYWRlIHRoZW0gdG8gYmUgYWRtaXR0ZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtZWFuIHRpbWUsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tbWl1czwvbmFtZT4gYW5kIHRoZSByZXN0IG9mIHRoZSBsZWFkZXJzLCB0byB3aG9tIHRoZQogICAgICAgICAgICAgICAgICAgIHN1cHJlbWUgY29tbWFuZCBoYWQgYmVlbiBpbnRydXN0ZWQsIGNhbWUgd2l0aCBhbGwgdGhlaXIgZm9yY2VzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODIxMyIgcmVnPSIgICtBbGlzZS1TYWludGUtUmVpbmUgWzQuNSw0Ny41NV0gKGluaGFiaXRlZCBwbGFjZSksIENvdGUtZCdPciwgQnVyZ3VuZHksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkFsZXNpYSA8L25hbWU+LCBhbmQgaGF2aW5nIG9jY3VwaWVkIHRoZSBlbnRpcmUgaGlsbCwgZW5jYW1wZWQgbm90IG1vcmUgdGhhbgogICAgICAgICAgICAgICAgICAgIGEgbWlsZSBmcm9tIG91ciBmb3J0aWZpY2F0aW9ucy4gVGhlIGZvbGxvd2luZyBkYXksIGhhdmluZyBsZWQgZm9ydGggdGhlaXIKICAgICAgICAgICAgICAgICAgICBjYXZhbHJ5IGZyb20gdGhlIGNhbXAsIHRoZXkgZmlsbCBhbGwgdGhhdCBwbGFpbiwgd2hpY2gsIHdlIGhhdmUgcmVsYXRlZCwKICAgICAgICAgICAgICAgICAgICBleHRlbmRlZCB0aHJlZSBtaWxlcyBpbiBsZW5ndGgsIGFuZCBkcmV3IG91dCB0aGVpciBpbmZhbnRyeSBhIGxpdHRsZSBmcm9tIHRoYXQKICAgICAgICAgICAgICAgICAgICBwbGFjZSwgYW5kIHBvc3QgdGhlbSBvbiB0aGUgaGlnaGVyIGdyb3VuZC4gVGhlIHRvd24gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MjEzIiByZWc9IiAgK0FsaXNlLVNhaW50ZS1SZWluZSBbNC41LDQ3LjU1XSAoaW5oYWJpdGVkIHBsYWNlKSwgQ290ZS1kJ09yLCBCdXJndW5keSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QWxlc2lhIDwvbmFtZT4gY29tbWFuZGVkIGEgdmlldyBvZiB0aGUgd2hvbGUgcGxhaW4uIFRoZSBiZXNpZWdlZCBydW4KICAgICAgICAgICAgICAgICAgICB0b2dldGhlciB3aGVuIHRoZXNlIGF1eGlsaWFyaWVzIHdlcmUgc2VlbjsgbXV0dWFsIGNvbmdyYXR1bGF0aW9ucyBlbnN1ZSwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIG1pbmRzIG9mIGFsbCBhcmUgZWxhdGVkIHdpdGggam95LiBBY2NvcmRpbmdseSwgZHJhd2luZyBvdXQgdGhlaXIgdHJvb3BzLCB0aGV5CiAgICAgICAgICAgICAgICAgICAgZW5jYW1wIGJlZm9yZSB0aGUgdG93biwgYW5kIGNvdmVyIHRoZSBuZWFyZXN0IHRyZW5jaCB3aXRoIGh1cmRsZXMgYW5kIGZpbGwgaXQgdXAKICAgICAgICAgICAgICAgICAgICB3aXRoIGVhcnRoLCBhbmQgbWFrZSByZWFkeSBmb3IgYSBzYWxseSBhbmQgZXZlcnkgY2FzdWFsdHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbW1pdXM8L25hbWU+IGFuZCB0aGUgcmVzdCBvZiB0aGUgbGVhZGVycywgdG8gd2hvbSB0aGUKICAgICAgICAgICAgICAgICAgICBzdXByZW1lIGNvbW1hbmQgaGFkIGJlZW4gaW50cnVzdGVkLCBjYW1lIHdpdGggYWxsIHRoZWlyIGZvcmNlcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgyMTMiIHJlZz0iICArQWxpc2UtU2FpbnRlLVJlaW5lIFs0LjUsNDcuNTVdIChpbmhhYml0ZWQgcGxhY2UpLCBDb3RlLWQnT3IsIEJ1cmd1bmR5LCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BbGVzaWEgPC9uYW1lPiwgYW5kIGhhdmluZyBvY2N1cGllZCB0aGUgZW50aXJlIGhpbGwsIGVuY2FtcGVkIG5vdCBtb3JlIHRoYW4KICAgICAgICAgICAgICAgICAgICBhIG1pbGUgZnJvbSBvdXIgZm9ydGlmaWNhdGlvbnMuIFRoZSBmb2xsb3dpbmcgZGF5LCBoYXZpbmcgbGVkIGZvcnRoIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSBmcm9tIHRoZSBjYW1wLCB0aGV5IGZpbGwgYWxsIHRoYXQgcGxhaW4sIHdoaWNoLCB3ZSBoYXZlIHJlbGF0ZWQsCiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWQgdGhyZWUgbWlsZXMgaW4gbGVuZ3RoLCBhbmQgZHJldyBvdXQgdGhlaXIgaW5mYW50cnkgYSBsaXR0bGUgZnJvbSB0aGF0CiAgICAgICAgICAgICAgICAgICAgcGxhY2UsIGFuZCBwb3N0IHRoZW0gb24gdGhlIGhpZ2hlciBncm91bmQuIFRoZSB0b3duIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODIxMyIgcmVnPSIgICtBbGlzZS1TYWludGUtUmVpbmUgWzQuNSw0Ny41NV0gKGluaGFiaXRlZCBwbGFjZSksIENvdGUtZCdPciwgQnVyZ3VuZHksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkFsZXNpYSA8L25hbWU+IGNvbW1hbmRlZCBhIHZpZXcgb2YgdGhlIHdob2xlIHBsYWluLiBUaGUgYmVzaWVnZWQgcnVuCiAgICAgICAgICAgICAgICAgICAgdG9nZXRoZXIgd2hlbiB0aGVzZSBhdXhpbGlhcmllcyB3ZXJlIHNlZW47IG11dHVhbCBjb25ncmF0dWxhdGlvbnMgZW5zdWUsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBtaW5kcyBvZiBhbGwgYXJlIGVsYXRlZCB3aXRoIGpveS4gQWNjb3JkaW5nbHksIGRyYXdpbmcgb3V0IHRoZWlyIHRyb29wcywgdGhleQogICAgICAgICAgICAgICAgICAgIGVuY2FtcCBiZWZvcmUgdGhlIHRvd24sIGFuZCBjb3ZlciB0aGUgbmVhcmVzdCB0cmVuY2ggd2l0aCBodXJkbGVzIGFuZCBmaWxsIGl0IHVwCiAgICAgICAgICAgICAgICAgICAgd2l0aCBlYXJ0aCwgYW5kIG1ha2UgcmVhZHkgZm9yIGEgc2FsbHkgYW5kIGV2ZXJ5IGNhc3VhbHR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['7.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIHN0YXRpb25lZCBoaXMgYXJteSBvbiBib3RoIHNpZGVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGZvcnRpZmljYXRpb25zLCBpbiBvcmRlciB0aGF0LCBpZiBvY2Nhc2lvbiBzaG91bGQgYXJpc2UsIGVhY2ggc2hvdWxkIGhvbGQgYW5kCiAgICAgICAgICAgICAgICAgICAga25vdyBoaXMgb3duIHBvc3QsIG9yZGVycyB0aGUgY2F2YWxyeSB0byBpc3N1ZSBmb3J0aCBmcm9tIHRoZSBjYW1wIGFuZCBjb21tZW5jZQogICAgICAgICAgICAgICAgICAgIGFjdGlvbi4gVGhlcmUgd2FzIGEgY29tbWFuZGluZyB2aWV3IGZyb20gdGhlIGVudGlyZSBjYW1wLCB3aGljaCBvY2N1cGllZCBhIHJpZGdlCiAgICAgICAgICAgICAgICAgICAgb2YgaGlsbHM7IGFuZCB0aGUgbWluZHMgb2YgYWxsIHRoZSBzb2xkaWVycyBhbnhpb3VzbHkgYXdhaXRlZCB0aGUgaXNzdWUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlLiBUaGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYXVsczwvbmFtZT4gaGFkIHNjYXR0ZXJlZCBhcmNoZXJzIGFuZCBsaWdodC1hcm1lZCBpbmZhbnRyeQogICAgICAgICAgICAgICAgICAgIGhlcmUgYW5kIHRoZXJlLCBhbW9uZyB0aGVpciBjYXZhbHJ5LCB0byBnaXZlIHJlbGllZiB0byB0aGVpciByZXRyZWF0aW5nIHRyb29wcywKICAgICAgICAgICAgICAgICAgICBhbmQgc3VzdGFpbiB0aGUgaW1wZXR1b3NpdHkgb2Ygb3VyIGNhdmFscnkuIFNldmVyYWwgb2Ygb3VyIHNvbGRpZXJzIHdlcmUKICAgICAgICAgICAgICAgICAgICB1bmV4cGVjdGVkbHkgd291bmRlZCBieSB0aGVzZSwgYW5kIGxlZnQgdGhlIGJhdHRsZS4gV2hlbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB3ZXJlIGNvbmZpZGVudCB0aGF0IHRoZWlyIGNvdW50cnltZW4gd2VyZSB0aGUgY29ucXVlcm9ycyBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBhY3Rpb24sIGFuZCBiZWhlbGQgb3VyIG1lbiBoYXJkIHByZXNzZWQgYnkgbnVtYmVycywgYm90aCB0aG9zZSB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIGhlbW1lZCBpbiBieSB0aGUgbGluZSBvZiBjaXJjdW12YWxsYXRpb24gYW5kIHRob3NlIHdobyBoYWQgY29tZSB0byBhaWQgdGhlbSwKICAgICAgICAgICAgICAgICAgICBzdXBwb3J0ZWQgdGhlIHNwaXJpdHMgb2YgdGhlaXIgbWVuIGJ5IHNob3V0cyBhbmQgeWVsbHMgZnJvbSBldmVyeSBxdWFydGVyLiBBcwogICAgICAgICAgICAgICAgICAgIHRoZSBhY3Rpb24gd2FzIGNhcnJpZWQgb24gaW4gc2lnaHQgb2YgYWxsLCBuZWl0aGVyIGEgYnJhdmUgbm9yIGNvd2FyZGx5IGFjdAogICAgICAgICAgICAgICAgICAgIGNvdWxkIGJlIGNvbmNlYWxlZDsgYm90aCB0aGUgZGVzaXJlIG9mIHByYWlzZSBhbmQgdGhlIGZlYXIgb2YgaWdub21pbnksIHVyZ2VkIG9uCiAgICAgICAgICAgICAgICAgICAgZWFjaCBwYXJ0eSB0byB2YWxvci4gQWZ0ZXIgZmlnaHRpbmcgZnJvbSBub29uIGFsbW9zdCB0byBzdW5zZXQsIHdpdGhvdXQgdmljdG9yeQogICAgICAgICAgICAgICAgICAgIGluY2xpbmluZyBpbiBmYXZvciBvZiBlaXRoZXIsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIG9uIG9uZQogICAgICAgICAgICAgICAgICAgIHNpZGUsIG1hZGUgYSBjaGFyZ2UgYWdhaW5zdCB0aGUgZW5lbXkgaW4gYSBjb21wYWN0IGJvZHksIGFuZCBkcm92ZSB0aGVtIGJhY2s7CiAgICAgICAgICAgICAgICAgICAgYW5kLCB3aGVuIHRoZXkgd2VyZSBwdXQgdG8gZmxpZ2h0LCB0aGUgYXJjaGVycyB3ZXJlIHN1cnJvdW5kZWQgYW5kIGN1dCB0bwogICAgICAgICAgICAgICAgICAgIHBpZWNlcy4gSW4gb3RoZXIgcGFydHMsIGxpa2V3aXNlLCBvdXIgbWVuIHB1cnN1ZWQgdG8gdGhlIGNhbXAgdGhlIHJldHJlYXRpbmcKICAgICAgICAgICAgICAgICAgICBlbmVteSwgYW5kIGRpZCBub3QgZ2l2ZSB0aGVtIGFuIG9wcG9ydHVuaXR5IG9mIHJhbGx5aW5nLiBCdXQgdGhvc2Ugd2hvIGhhZCBjb21lCiAgICAgICAgICAgICAgICAgICAgZm9ydGggZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgyMTMiIHJlZz0iICArQWxpc2UtU2FpbnRlLVJlaW5lIFs0LjUsNDcuNTVdIChpbmhhYml0ZWQgcGxhY2UpLCBDb3RlLWQnT3IsIEJ1cmd1bmR5LCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BbGVzaWEgPC9uYW1lPiByZXR1cm5lZCBpbnRvIHRoZSB0b3duIGRlamVjdGVkIGFuZCBhbG1vc3QgZGVzcGFpcmluZyBvZgogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhhdmluZyBzdGF0aW9uZWQgaGlzIGFybXkgb24gYm90aCBzaWRlcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpY2F0aW9ucywgaW4gb3JkZXIgdGhhdCwgaWYgb2NjYXNpb24gc2hvdWxkIGFyaXNlLCBlYWNoIHNob3VsZCBob2xkIGFuZAogICAgICAgICAgICAgICAgICAgIGtub3cgaGlzIG93biBwb3N0LCBvcmRlcnMgdGhlIGNhdmFscnkgdG8gaXNzdWUgZm9ydGggZnJvbSB0aGUgY2FtcCBhbmQgY29tbWVuY2UKICAgICAgICAgICAgICAgICAgICBhY3Rpb24uIFRoZXJlIHdhcyBhIGNvbW1hbmRpbmcgdmlldyBmcm9tIHRoZSBlbnRpcmUgY2FtcCwgd2hpY2ggb2NjdXBpZWQgYSByaWRnZQogICAgICAgICAgICAgICAgICAgIG9mIGhpbGxzOyBhbmQgdGhlIG1pbmRzIG9mIGFsbCB0aGUgc29sZGllcnMgYW54aW91c2x5IGF3YWl0ZWQgdGhlIGlzc3VlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGJhdHRsZS4gVGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2F1bHM8L25hbWU+IGhhZCBzY2F0dGVyZWQgYXJjaGVycyBhbmQgbGlnaHQtYXJtZWQgaW5mYW50cnkKICAgICAgICAgICAgICAgICAgICBoZXJlIGFuZCB0aGVyZSwgYW1vbmcgdGhlaXIgY2F2YWxyeSwgdG8gZ2l2ZSByZWxpZWYgdG8gdGhlaXIgcmV0cmVhdGluZyB0cm9vcHMsCiAgICAgICAgICAgICAgICAgICAgYW5kIHN1c3RhaW4gdGhlIGltcGV0dW9zaXR5IG9mIG91ciBjYXZhbHJ5LiBTZXZlcmFsIG9mIG91ciBzb2xkaWVycyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgdW5leHBlY3RlZGx5IHdvdW5kZWQgYnkgdGhlc2UsIGFuZCBsZWZ0IHRoZSBiYXR0bGUuIFdoZW4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gd2VyZSBjb25maWRlbnQgdGhhdCB0aGVpciBjb3VudHJ5bWVuIHdlcmUgdGhlIGNvbnF1ZXJvcnMgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgYWN0aW9uLCBhbmQgYmVoZWxkIG91ciBtZW4gaGFyZCBwcmVzc2VkIGJ5IG51bWJlcnMsIGJvdGggdGhvc2Ugd2hvIHdlcmUKICAgICAgICAgICAgICAgICAgICBoZW1tZWQgaW4gYnkgdGhlIGxpbmUgb2YgY2lyY3VtdmFsbGF0aW9uIGFuZCB0aG9zZSB3aG8gaGFkIGNvbWUgdG8gYWlkIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkIHRoZSBzcGlyaXRzIG9mIHRoZWlyIG1lbiBieSBzaG91dHMgYW5kIHllbGxzIGZyb20gZXZlcnkgcXVhcnRlci4gQXMKICAgICAgICAgICAgICAgICAgICB0aGUgYWN0aW9uIHdhcyBjYXJyaWVkIG9uIGluIHNpZ2h0IG9mIGFsbCwgbmVpdGhlciBhIGJyYXZlIG5vciBjb3dhcmRseSBhY3QKICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSBjb25jZWFsZWQ7IGJvdGggdGhlIGRlc2lyZSBvZiBwcmFpc2UgYW5kIHRoZSBmZWFyIG9mIGlnbm9taW55LCB1cmdlZCBvbgogICAgICAgICAgICAgICAgICAgIGVhY2ggcGFydHkgdG8gdmFsb3IuIEFmdGVyIGZpZ2h0aW5nIGZyb20gbm9vbiBhbG1vc3QgdG8gc3Vuc2V0LCB3aXRob3V0IHZpY3RvcnkKICAgICAgICAgICAgICAgICAgICBpbmNsaW5pbmcgaW4gZmF2b3Igb2YgZWl0aGVyLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCBvbiBvbmUKICAgICAgICAgICAgICAgICAgICBzaWRlLCBtYWRlIGEgY2hhcmdlIGFnYWluc3QgdGhlIGVuZW15IGluIGEgY29tcGFjdCBib2R5LCBhbmQgZHJvdmUgdGhlbSBiYWNrOwogICAgICAgICAgICAgICAgICAgIGFuZCwgd2hlbiB0aGV5IHdlcmUgcHV0IHRvIGZsaWdodCwgdGhlIGFyY2hlcnMgd2VyZSBzdXJyb3VuZGVkIGFuZCBjdXQgdG8KICAgICAgICAgICAgICAgICAgICBwaWVjZXMuIEluIG90aGVyIHBhcnRzLCBsaWtld2lzZSwgb3VyIG1lbiBwdXJzdWVkIHRvIHRoZSBjYW1wIHRoZSByZXRyZWF0aW5nCiAgICAgICAgICAgICAgICAgICAgZW5lbXksIGFuZCBkaWQgbm90IGdpdmUgdGhlbSBhbiBvcHBvcnR1bml0eSBvZiByYWxseWluZy4gQnV0IHRob3NlIHdobyBoYWQgY29tZQogICAgICAgICAgICAgICAgICAgIGZvcnRoIGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MjEzIiByZWc9IiAgK0FsaXNlLVNhaW50ZS1SZWluZSBbNC41LDQ3LjU1XSAoaW5oYWJpdGVkIHBsYWNlKSwgQ290ZS1kJ09yLCBCdXJndW5keSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QWxlc2lhIDwvbmFtZT4gcmV0dXJuZWQgaW50byB0aGUgdG93biBkZWplY3RlZCBhbmQgYWxtb3N0IGRlc3BhaXJpbmcgb2YKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiwgYWZ0ZXIgdGhlIGludGVydmFsIG9mIGEgZGF5IGFuZCBhZnRlciBtYWtpbmcsIGR1cmluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGltZSwgYW4gaW1tZW5zZSBudW1iZXIgb2YgaHVyZGxlcywgc2NhbGluZy1sYWRkZXJzLCBhbmQgaXJvbiBob29rcywgc2lsZW50bHkKICAgICAgICAgICAgICAgICAgICB3ZW50IGZvcnRoIGZyb20gdGhlIGNhbXAgYXQgbWlkbmlnaHQgYW5kIGFwcHJvYWNoZWQgdGhlIGZvcnRpZmljYXRpb25zIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHBsYWluLiBSYWlzaW5nIGEgc2hvdXQgc3VkZGVubHksIHRoYXQgYnkgdGhpcyBpbnRpbWF0aW9uIHRob3NlIHdobyB3ZXJlIGJlc2VpZ2VkCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHRvd24gbWlnaHQgbGVhcm4gdGhlaXIgYXJyaXZhbCwgdGhleSBiZWdhbiB0byBjYXN0IGRvd24gaHVyZGxlcyBhbmQKICAgICAgICAgICAgICAgICAgICBkaXNsb2RnZSBvdXIgbWVuIGZyb20gdGhlIHJhbXBhcnQgYnkgc2xpbmdzLCBhcnJvd3MsIGFuZCBzdG9uZXMsIGFuZCBleGVjdXRlZAogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlciBtb3ZlbWVudHMgd2hpY2ggYXJlIHJlcXVpc2l0ZSBpbiBzdG9ybWluZy4gQXQgdGhlIHNhbWUgdGltZSwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiwgaGF2aW5nIGhlYXJkIHRoZSBzaG91dCwgZ2l2ZXMgdGhlIHNpZ25hbCB0byBoaXMKICAgICAgICAgICAgICAgICAgICB0cm9vcHMgYnkgYSB0cnVtcGV0LCBhbmQgbGVhZHMgdGhlbSBmb3J0aCBmcm9tIHRoZSB0b3duLiBPdXIgdHJvb3BzLCBhcyBlYWNoCiAgICAgICAgICAgICAgICAgICAgbWFuJ3MgcG9zdCBoYWQgYmVlbiBhc3NpZ25lZCBoaW0gc29tZSBkYXlzIGJlZm9yZSwgbWFuIHRoZSBmb3J0aWZpY2F0aW9uczsgdGhleQogICAgICAgICAgICAgICAgICAgIGludGltaWRhdGUgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gYnkgc2xpbmdzLCBsYXJnZSBzdG9uZXMsIHN0YWtlcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXkgaGFkIHBsYWNlZCBhbG9uZyB0aGUgd29ya3MsIGFuZCBidWxsZXRzLiBBbGwgdmlldyBiZWluZyBwcmV2ZW50ZWQgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgZGFya25lc3MsIG1hbnkgd291bmRzIGFyZSByZWNlaXZlZCBvbiBib3RoIHNpZGVzOyBzZXZlcmFsIG1pc3NpbGVzLCBhcmUKICAgICAgICAgICAgICAgICAgICB0aHJvd24gZnJvbSB0aGUgZW5naW5lcy4gQnV0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyY3VzIEFudG9uaXVzPC9uYW1lPiwgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMKICAgICAgICAgICAgICAgICAgICAgICAgVHJlYm9uaXVzPC9uYW1lPiwgdGhlIGxpZXV0ZW5hbnRzLCB0byB3aG9tIHRoZSBkZWZlbnNlIG9mIHRoZXNlIHBhcnRzIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gYWxsb3R0ZWQsIGRyYXVnaHRlZCB0cm9vcHMgZnJvbSB0aGUgcmVkb3VidHMgd2hpY2ggd2VyZSBtb3JlIHJlbW90ZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VudCB0aGVtIHRvIGFpZCBvdXIgdHJvb3BzLCBpbiB3aGF0ZXZlciBkaXJlY3Rpb24gdGhleSB1bmRlcnN0b29kIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIHdlcmUgaGFyZCBwcmVzc2VkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iODIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYXVsczwvbmFtZT4sIGFmdGVyIHRoZSBpbnRlcnZhbCBvZiBhIGRheSBhbmQgYWZ0ZXIgbWFraW5nLCBkdXJpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIHRpbWUsIGFuIGltbWVuc2UgbnVtYmVyIG9mIGh1cmRsZXMsIHNjYWxpbmctbGFkZGVycywgYW5kIGlyb24gaG9va3MsIHNpbGVudGx5CiAgICAgICAgICAgICAgICAgICAgd2VudCBmb3J0aCBmcm9tIHRoZSBjYW1wIGF0IG1pZG5pZ2h0IGFuZCBhcHByb2FjaGVkIHRoZSBmb3J0aWZpY2F0aW9ucyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFpbi4gUmFpc2luZyBhIHNob3V0IHN1ZGRlbmx5LCB0aGF0IGJ5IHRoaXMgaW50aW1hdGlvbiB0aG9zZSB3aG8gd2VyZSBiZXNlaWdlZAogICAgICAgICAgICAgICAgICAgIGluIHRoZSB0b3duIG1pZ2h0IGxlYXJuIHRoZWlyIGFycml2YWwsIHRoZXkgYmVnYW4gdG8gY2FzdCBkb3duIGh1cmRsZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzbG9kZ2Ugb3VyIG1lbiBmcm9tIHRoZSByYW1wYXJ0IGJ5IHNsaW5ncywgYXJyb3dzLCBhbmQgc3RvbmVzLCBhbmQgZXhlY3V0ZWQKICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgbW92ZW1lbnRzIHdoaWNoIGFyZSByZXF1aXNpdGUgaW4gc3Rvcm1pbmcuIEF0IHRoZSBzYW1lIHRpbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4sIGhhdmluZyBoZWFyZCB0aGUgc2hvdXQsIGdpdmVzIHRoZSBzaWduYWwgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgdHJvb3BzIGJ5IGEgdHJ1bXBldCwgYW5kIGxlYWRzIHRoZW0gZm9ydGggZnJvbSB0aGUgdG93bi4gT3VyIHRyb29wcywgYXMgZWFjaAogICAgICAgICAgICAgICAgICAgIG1hbidzIHBvc3QgaGFkIGJlZW4gYXNzaWduZWQgaGltIHNvbWUgZGF5cyBiZWZvcmUsIG1hbiB0aGUgZm9ydGlmaWNhdGlvbnM7IHRoZXkKICAgICAgICAgICAgICAgICAgICBpbnRpbWlkYXRlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IGJ5IHNsaW5ncywgbGFyZ2Ugc3RvbmVzLCBzdGFrZXMKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGV5IGhhZCBwbGFjZWQgYWxvbmcgdGhlIHdvcmtzLCBhbmQgYnVsbGV0cy4gQWxsIHZpZXcgYmVpbmcgcHJldmVudGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIGRhcmtuZXNzLCBtYW55IHdvdW5kcyBhcmUgcmVjZWl2ZWQgb24gYm90aCBzaWRlczsgc2V2ZXJhbCBtaXNzaWxlcywgYXJlCiAgICAgICAgICAgICAgICAgICAgdGhyb3duIGZyb20gdGhlIGVuZ2luZXMuIEJ1dCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmN1cyBBbnRvbml1czwvbmFtZT4sIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIFRyZWJvbml1czwvbmFtZT4sIHRoZSBsaWV1dGVuYW50cywgdG8gd2hvbSB0aGUgZGVmZW5zZSBvZiB0aGVzZSBwYXJ0cyBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIGFsbG90dGVkLCBkcmF1Z2h0ZWQgdHJvb3BzIGZyb20gdGhlIHJlZG91YnRzIHdoaWNoIHdlcmUgbW9yZSByZW1vdGUsIGFuZAogICAgICAgICAgICAgICAgICAgIHNlbnQgdGhlbSB0byBhaWQgb3VyIHRyb29wcywgaW4gd2hhdGV2ZXIgZGlyZWN0aW9uIHRoZXkgdW5kZXJzdG9vZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICB3ZXJlIGhhcmQgcHJlc3NlZC4gPC90cmFuc2xhdGlvbj4="
translation['7.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHdlcmUgYXQgYSBkaXN0YW5jZSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGZvcnRpZmljYXRpb24sIHRoZXkgZGlkIG1vcmUgZXhlY3V0aW9uLCBvd2luZyB0byB0aGUgaW1tZW5zZSBudW1iZXIgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICB3ZWFwb25zOiBhZnRlciB0aGV5IGNhbWUgbmVhcmVyLCB0aGV5IGVpdGhlciB1bmF3YXJlcyBlbXBhbGVkIHRoZW1zZWx2ZXMgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgc3B1cnMsIG9yIHdlcmUgcGllcmNlZCBieSB0aGUgbXVyYWwgZGFydHMgZnJvbSB0aGUgcmFtcGFydHMgYW5kIHRvd2VycywgYW5kIHRodXMKICAgICAgICAgICAgICAgICAgICBwZXJpc2hlZC4gQWZ0ZXIgcmVjZWl2aW5nIG1hbnkgd291bmRzIG9uIGFsbCBzaWRlcywgYW5kIGhhdmluZyBmb3JjZWQgbm8gcGFydCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB3b3Jrcywgd2hlbiBkYXkgZHJldyBuaWdoLCBmZWFyaW5nIGxlc3QgdGhleSBzaG91bGQgYmUgc3Vycm91bmRlZCBieSBhIHNhbGx5CiAgICAgICAgICAgICAgICAgICAgbWFkZSBmcm9tIHRoZSBoaWdoZXIgY2FtcCBvbiB0aGUgZXhwb3NlZCBmbGFuaywgdGhleSByZXRyZWF0ZWQgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5bWVuLiBCdXQgdGhvc2Ugd2l0aGluLCB3aGlsZSB0aGV5IGJyaW5nIGZvcndhcmQgdGhvc2UgdGhpbmdzIHdoaWNoIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gcHJlcGFyZWQgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiBmb3IgYSBzYWxseSwgZmlsbCB1cCB0aGUgbmVhcmVzdAogICAgICAgICAgICAgICAgICAgIHRyZW5jaGVzOyBoYXZpbmcgZGVsYXllZCBhIGxvbmcgdGltZSBpbiBleGVjdXRpbmcgdGhlc2UgbW92ZW1lbnRzLCB0aGV5IGxlYXJuZWQKICAgICAgICAgICAgICAgICAgICB0aGUgcmV0cmVhdCBvZiB0aGVpciBjb3VudHJ5bWVuIGJlZm9yZSB0aGV5IGRyZXcgbmlnaCB0byB0aGUgZm9ydGlmaWNhdGlvbnMuCiAgICAgICAgICAgICAgICAgICAgVGh1cyB0aGV5IHJldHVybmVkIHRvIHRoZSB0b3duIHdpdGhvdXQgYWNjb21wbGlzaGluZyB0aGVpciBvYmplY3QuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHdlcmUgYXQgYSBkaXN0YW5jZSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGZvcnRpZmljYXRpb24sIHRoZXkgZGlkIG1vcmUgZXhlY3V0aW9uLCBvd2luZyB0byB0aGUgaW1tZW5zZSBudW1iZXIgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICB3ZWFwb25zOiBhZnRlciB0aGV5IGNhbWUgbmVhcmVyLCB0aGV5IGVpdGhlciB1bmF3YXJlcyBlbXBhbGVkIHRoZW1zZWx2ZXMgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgc3B1cnMsIG9yIHdlcmUgcGllcmNlZCBieSB0aGUgbXVyYWwgZGFydHMgZnJvbSB0aGUgcmFtcGFydHMgYW5kIHRvd2VycywgYW5kIHRodXMKICAgICAgICAgICAgICAgICAgICBwZXJpc2hlZC4gQWZ0ZXIgcmVjZWl2aW5nIG1hbnkgd291bmRzIG9uIGFsbCBzaWRlcywgYW5kIGhhdmluZyBmb3JjZWQgbm8gcGFydCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB3b3Jrcywgd2hlbiBkYXkgZHJldyBuaWdoLCBmZWFyaW5nIGxlc3QgdGhleSBzaG91bGQgYmUgc3Vycm91bmRlZCBieSBhIHNhbGx5CiAgICAgICAgICAgICAgICAgICAgbWFkZSBmcm9tIHRoZSBoaWdoZXIgY2FtcCBvbiB0aGUgZXhwb3NlZCBmbGFuaywgdGhleSByZXRyZWF0ZWQgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5bWVuLiBCdXQgdGhvc2Ugd2l0aGluLCB3aGlsZSB0aGV5IGJyaW5nIGZvcndhcmQgdGhvc2UgdGhpbmdzIHdoaWNoIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gcHJlcGFyZWQgYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJjaW5nZXRvcml4PC9uYW1lPiBmb3IgYSBzYWxseSwgZmlsbCB1cCB0aGUgbmVhcmVzdAogICAgICAgICAgICAgICAgICAgIHRyZW5jaGVzOyBoYXZpbmcgZGVsYXllZCBhIGxvbmcgdGltZSBpbiBleGVjdXRpbmcgdGhlc2UgbW92ZW1lbnRzLCB0aGV5IGxlYXJuZWQKICAgICAgICAgICAgICAgICAgICB0aGUgcmV0cmVhdCBvZiB0aGVpciBjb3VudHJ5bWVuIGJlZm9yZSB0aGV5IGRyZXcgbmlnaCB0byB0aGUgZm9ydGlmaWNhdGlvbnMuCiAgICAgICAgICAgICAgICAgICAgVGh1cyB0aGV5IHJldHVybmVkIHRvIHRoZSB0b3duIHdpdGhvdXQgYWNjb21wbGlzaGluZyB0aGVpciBvYmplY3QuIDwvdHJhbnNsYXRpb24+"
translation['7.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiwgaGF2aW5nIGJlZW4gdHdpY2UgcmVwdWxzZWQgd2l0aCBncmVhdCBsb3NzLCBjb25zdWx0IHdoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IHNob3VsZCBkbzsgdGhleSBhdmFpbCB0aGVtc2VsdmVzIG9mIHRoZSBpbmZvcm1hdGlvbiBvZiB0aG9zZSB3aG8gd2VyZSB3ZWxsCiAgICAgICAgICAgICAgICAgICAgYWNxdWFpbnRlZCB3aXRoIHRoZSBjb3VudHJ5OyBmcm9tIHRoZW0gdGhleSBhc2NlcnRhaW4gdGhlIHBvc2l0aW9uIGFuZAogICAgICAgICAgICAgICAgICAgIGZvcnRpZmljYXRpb24gb2YgdGhlIHVwcGVyIGNhbXAuIFRoZXJlIHdhcywgb24gdGhlIG5vcnRoIHNpZGUsIGEgaGlsbCwgd2hpY2ggb3VyCiAgICAgICAgICAgICAgICAgICAgbWVuIGNvdWxkIG5vdCBpbmNsdWRlIGluIHRoZWlyIHdvcmtzLCBvbiBhY2NvdW50IG9mIHRoZSBleHRlbnQgb2YgdGhlIGNpcmN1aXQsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhhZCBuZWNlc3NhcmlseSBtYWRlIHRoZWlyIGNhbXAgaW4gZ3JvdW5kIGFsbW9zdCBkaXNhZHZhbnRhZ2VvdXMsIGFuZCBwcmV0dHkKICAgICAgICAgICAgICAgICAgICBzdGVlcC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBBbnRpc3RpdXMgUmVnaW51czwvbmFtZT4sIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIENhbmluaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIFJlYmlsdXM8L25hbWU+LCB0d28gb2YgdGhlIGxpZXV0ZW5hbnRzLCB3aXRoIHR3byBsZWdpb25zLCB3ZXJlIGluIHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIGNhbXAuIFRoZSBsZWFkZXJzIG9mIHRoZSBlbmVteSwgaGF2aW5nIHJlY29ubm9pdGVyZWQgdGhlIGNvdW50cnkgYnkKICAgICAgICAgICAgICAgICAgICB0aGVpciBzY291dHMsIHNlbGVjdCBmcm9tIHRoZSBlbnRpcmUgYXJteSBzaXh0eSB0aG91c2FuZCBtZW4sIGJlbG9uZ2luZyB0byB0aG9zZQogICAgICAgICAgICAgICAgICAgIHN0YXRlcywgd2hpY2ggYmVhciB0aGUgaGlnaGVzdCBjaGFyYWN0ZXIgZm9yIGNvdXJhZ2U7IHRoZXkgcHJpdmF0ZWx5IGFycmFuZ2UKICAgICAgICAgICAgICAgICAgICBhbW9uZyB0aGVtc2VsdmVzIHdoYXQgdGhleSB3aXNoZWQgdG8gYmUgZG9uZSwgYW5kIGluIHdoYXQgbWFubmVyOyB0aGV5IGRlY2lkZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGF0dGFjayBzaG91bGQgdGFrZSBwbGFjZSB3aGVuIGl0IHNob3VsZCBzZWVtIHRvIGJlIG5vb24uIFRoZXkgYXBwb2ludAogICAgICAgICAgICAgICAgICAgIG92ZXIgdGhlaXIgZm9yY2VzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyZ2FzaWxsYXVudXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pYW48L25hbWU+LCBvbmUKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZm91ciBnZW5lcmFscywgYW5kIGEgbmVhciByZWxhdGl2ZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+LiBIZSwKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgaXNzdWVkIGZyb20gdGhlIGNhbXAgYXQgdGhlIGZpcnN0IHdhdGNoLCBhbmQgaGF2aW5nIGFsbW9zdCBjb21wbGV0ZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgbWFyY2ggYSBsaXR0bGUgYmVmb3JlIHRoZSBkYXduLCBoaWQgaGltc2VsZiBiZWhpbmQgdGhlIG1vdW50YWluLCBhbmQgb3JkZXJlZCBoaXMKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycyB0byByZWZyZXNoIHRoZW1zZWx2ZXMgYWZ0ZXIgdGhlaXIgbGFib3IgZHVyaW5nIHRoZSBuaWdodC4gV2hlbiBub29uIG5vdwogICAgICAgICAgICAgICAgICAgIHNlZW1lZCB0byBkcmF3IG5pZ2gsIGhlIG1hcmNoZWQgaGFzdGlseSBhZ2FpbnN0IHRoYXQgY2FtcCB3aGljaCB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbWVudGlvbmVkIGJlZm9yZTsgYW5kLCBhdCB0aGUgc2FtZSB0aW1lLCB0aGUgY2F2YWxyeSBiZWdhbiB0byBhcHByb2FjaCB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpY2F0aW9ucyBpbiB0aGUgcGxhaW4sIGFuZCB0aGUgcmVzdCBvZiB0aGUgZm9yY2VzIHRvIG1ha2UgYSBkZW1vbnN0cmF0aW9uCiAgICAgICAgICAgICAgICAgICAgaW4gZnJvbnQgb2YgdGhlIGNhbXAuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiwgaGF2aW5nIGJlZW4gdHdpY2UgcmVwdWxzZWQgd2l0aCBncmVhdCBsb3NzLCBjb25zdWx0IHdoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IHNob3VsZCBkbzsgdGhleSBhdmFpbCB0aGVtc2VsdmVzIG9mIHRoZSBpbmZvcm1hdGlvbiBvZiB0aG9zZSB3aG8gd2VyZSB3ZWxsCiAgICAgICAgICAgICAgICAgICAgYWNxdWFpbnRlZCB3aXRoIHRoZSBjb3VudHJ5OyBmcm9tIHRoZW0gdGhleSBhc2NlcnRhaW4gdGhlIHBvc2l0aW9uIGFuZAogICAgICAgICAgICAgICAgICAgIGZvcnRpZmljYXRpb24gb2YgdGhlIHVwcGVyIGNhbXAuIFRoZXJlIHdhcywgb24gdGhlIG5vcnRoIHNpZGUsIGEgaGlsbCwgd2hpY2ggb3VyCiAgICAgICAgICAgICAgICAgICAgbWVuIGNvdWxkIG5vdCBpbmNsdWRlIGluIHRoZWlyIHdvcmtzLCBvbiBhY2NvdW50IG9mIHRoZSBleHRlbnQgb2YgdGhlIGNpcmN1aXQsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhhZCBuZWNlc3NhcmlseSBtYWRlIHRoZWlyIGNhbXAgaW4gZ3JvdW5kIGFsbW9zdCBkaXNhZHZhbnRhZ2VvdXMsIGFuZCBwcmV0dHkKICAgICAgICAgICAgICAgICAgICBzdGVlcC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBBbnRpc3RpdXMgUmVnaW51czwvbmFtZT4sIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIENhbmluaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIFJlYmlsdXM8L25hbWU+LCB0d28gb2YgdGhlIGxpZXV0ZW5hbnRzLCB3aXRoIHR3byBsZWdpb25zLCB3ZXJlIGluIHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIGNhbXAuIFRoZSBsZWFkZXJzIG9mIHRoZSBlbmVteSwgaGF2aW5nIHJlY29ubm9pdGVyZWQgdGhlIGNvdW50cnkgYnkKICAgICAgICAgICAgICAgICAgICB0aGVpciBzY291dHMsIHNlbGVjdCBmcm9tIHRoZSBlbnRpcmUgYXJteSBzaXh0eSB0aG91c2FuZCBtZW4sIGJlbG9uZ2luZyB0byB0aG9zZQogICAgICAgICAgICAgICAgICAgIHN0YXRlcywgd2hpY2ggYmVhciB0aGUgaGlnaGVzdCBjaGFyYWN0ZXIgZm9yIGNvdXJhZ2U7IHRoZXkgcHJpdmF0ZWx5IGFycmFuZ2UKICAgICAgICAgICAgICAgICAgICBhbW9uZyB0aGVtc2VsdmVzIHdoYXQgdGhleSB3aXNoZWQgdG8gYmUgZG9uZSwgYW5kIGluIHdoYXQgbWFubmVyOyB0aGV5IGRlY2lkZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGF0dGFjayBzaG91bGQgdGFrZSBwbGFjZSB3aGVuIGl0IHNob3VsZCBzZWVtIHRvIGJlIG5vb24uIFRoZXkgYXBwb2ludAogICAgICAgICAgICAgICAgICAgIG92ZXIgdGhlaXIgZm9yY2VzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyZ2FzaWxsYXVudXM8L25hbWU+LCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pYW48L25hbWU+LCBvbmUKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZm91ciBnZW5lcmFscywgYW5kIGEgbmVhciByZWxhdGl2ZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmNpbmdldG9yaXg8L25hbWU+LiBIZSwKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgaXNzdWVkIGZyb20gdGhlIGNhbXAgYXQgdGhlIGZpcnN0IHdhdGNoLCBhbmQgaGF2aW5nIGFsbW9zdCBjb21wbGV0ZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgbWFyY2ggYSBsaXR0bGUgYmVmb3JlIHRoZSBkYXduLCBoaWQgaGltc2VsZiBiZWhpbmQgdGhlIG1vdW50YWluLCBhbmQgb3JkZXJlZCBoaXMKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycyB0byByZWZyZXNoIHRoZW1zZWx2ZXMgYWZ0ZXIgdGhlaXIgbGFib3IgZHVyaW5nIHRoZSBuaWdodC4gV2hlbiBub29uIG5vdwogICAgICAgICAgICAgICAgICAgIHNlZW1lZCB0byBkcmF3IG5pZ2gsIGhlIG1hcmNoZWQgaGFzdGlseSBhZ2FpbnN0IHRoYXQgY2FtcCB3aGljaCB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbWVudGlvbmVkIGJlZm9yZTsgYW5kLCBhdCB0aGUgc2FtZSB0aW1lLCB0aGUgY2F2YWxyeSBiZWdhbiB0byBhcHByb2FjaCB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpY2F0aW9ucyBpbiB0aGUgcGxhaW4sIGFuZCB0aGUgcmVzdCBvZiB0aGUgZm9yY2VzIHRvIG1ha2UgYSBkZW1vbnN0cmF0aW9uCiAgICAgICAgICAgICAgICAgICAgaW4gZnJvbnQgb2YgdGhlIGNhbXAuIDwvdHJhbnNsYXRpb24+"
translation['7.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4sIGhhdmluZyBiZWhlbGQgaGlzIGNvdW50cnltZW4gZnJvbSB0aGUgY2l0YWRlbCBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgyMTMiIHJlZz0iICArQWxpc2UtU2FpbnRlLVJlaW5lIFs0LjUsNDcuNTVdIChpbmhhYml0ZWQgcGxhY2UpLCBDb3RlLWQnT3IsIEJ1cmd1bmR5LCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BbGVzaWEgPC9uYW1lPiwgaXNzdWVzIGZvcnRoIGZyb20gdGhlIHRvd247IGhlIGJyaW5ncyBmb3J0aCBmcm9tIHRoZSBjYW1wCiAgICAgICAgICAgICAgICAgICAgbG9uZyBob29rcywgbW92YWJsZSBwZW50LWhvdXNlcywgbXVyYWwgaG9va3MsIGFuZCBvdGhlciB0aGluZ3MsIHdoaWNoIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIHByZXBhcmVkIGZvciB0aGUgcHVycG9zZSBvZiBtYWtpbmcgYSBzYWxseS4gVGhleSBlbmdhZ2Ugb24gYWxsIHNpZGVzIGF0IG9uY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgZXhwZWRpZW50IGlzIGFkb3B0ZWQuIFRoZXkgZmxvY2tlZCB0byB3aGF0ZXZlciBwYXJ0IG9mIHRoZSB3b3JrcyBzZWVtZWQKICAgICAgICAgICAgICAgICAgICB3ZWFrZXN0LiBUaGUgYXJteSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gaXMgZGlzdHJpYnV0ZWQgYWxvbmcKICAgICAgICAgICAgICAgICAgICB0aGVpciBleHRlbnNpdmUgbGluZXMsIGFuZCB3aXRoIGRpZmZpY3VsdHkgbWVldHMgdGhlIGVuZW15IGluIGV2ZXJ5IHF1YXJ0ZXIuIFRoZQogICAgICAgICAgICAgICAgICAgIHNob3V0cyB3aGljaCB3ZXJlIHJhaXNlZCBieSB0aGUgY29tYmF0YW50cyBpbiB0aGVpciByZWFyLCBoYWQgYSBncmVhdCB0ZW5kZW5jeQogICAgICAgICAgICAgICAgICAgIHRvIGludGltaWRhdGUgb3VyIG1lbiwgYmVjYXVzZSB0aGV5IHBlcmNlaXZlZCB0aGF0IHRoZWlyIGRhbmdlciByZXN0ZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgdmFsb3Igb2Ygb3RoZXJzOiBmb3IgZ2VuZXJhbGx5IGFsbCBldmlscyB3aGljaCBhcmUgZGlzdGFudCBtb3N0IHBvd2VyZnVsbHkgYWxhcm0KICAgICAgICAgICAgICAgICAgICBtZW4ncyBtaW5kcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijg1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyY2luZ2V0b3JpeDwvbmFtZT4sIGhhdmluZyBiZWhlbGQgaGlzIGNvdW50cnltZW4gZnJvbSB0aGUgY2l0YWRlbCBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgyMTMiIHJlZz0iICArQWxpc2UtU2FpbnRlLVJlaW5lIFs0LjUsNDcuNTVdIChpbmhhYml0ZWQgcGxhY2UpLCBDb3RlLWQnT3IsIEJ1cmd1bmR5LCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BbGVzaWEgPC9uYW1lPiwgaXNzdWVzIGZvcnRoIGZyb20gdGhlIHRvd247IGhlIGJyaW5ncyBmb3J0aCBmcm9tIHRoZSBjYW1wCiAgICAgICAgICAgICAgICAgICAgbG9uZyBob29rcywgbW92YWJsZSBwZW50LWhvdXNlcywgbXVyYWwgaG9va3MsIGFuZCBvdGhlciB0aGluZ3MsIHdoaWNoIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIHByZXBhcmVkIGZvciB0aGUgcHVycG9zZSBvZiBtYWtpbmcgYSBzYWxseS4gVGhleSBlbmdhZ2Ugb24gYWxsIHNpZGVzIGF0IG9uY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgZXhwZWRpZW50IGlzIGFkb3B0ZWQuIFRoZXkgZmxvY2tlZCB0byB3aGF0ZXZlciBwYXJ0IG9mIHRoZSB3b3JrcyBzZWVtZWQKICAgICAgICAgICAgICAgICAgICB3ZWFrZXN0LiBUaGUgYXJteSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gaXMgZGlzdHJpYnV0ZWQgYWxvbmcKICAgICAgICAgICAgICAgICAgICB0aGVpciBleHRlbnNpdmUgbGluZXMsIGFuZCB3aXRoIGRpZmZpY3VsdHkgbWVldHMgdGhlIGVuZW15IGluIGV2ZXJ5IHF1YXJ0ZXIuIFRoZQogICAgICAgICAgICAgICAgICAgIHNob3V0cyB3aGljaCB3ZXJlIHJhaXNlZCBieSB0aGUgY29tYmF0YW50cyBpbiB0aGVpciByZWFyLCBoYWQgYSBncmVhdCB0ZW5kZW5jeQogICAgICAgICAgICAgICAgICAgIHRvIGludGltaWRhdGUgb3VyIG1lbiwgYmVjYXVzZSB0aGV5IHBlcmNlaXZlZCB0aGF0IHRoZWlyIGRhbmdlciByZXN0ZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgdmFsb3Igb2Ygb3RoZXJzOiBmb3IgZ2VuZXJhbGx5IGFsbCBldmlscyB3aGljaCBhcmUgZGlzdGFudCBtb3N0IHBvd2VyZnVsbHkgYWxhcm0KICAgICAgICAgICAgICAgICAgICBtZW4ncyBtaW5kcy4gPC90cmFuc2xhdGlvbj4="
translation['7.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIHNlbGVjdGVkIGEgY29tbWFuZGluZyBzaXR1YXRpb24sIHNlZXMKICAgICAgICAgICAgICAgICAgICBkaXN0aW5jdGx5IHdoYXRldmVyIGlzIGdvaW5nIG9uIGluIGV2ZXJ5IHF1YXJ0ZXIsIGFuZCBzZW5kcyBhc3Npc3RhbmNlIHRvIGhpcwogICAgICAgICAgICAgICAgICAgIHRyb29wcyB3aGVuIGhhcmQgcHJlc3NlZC4gVGhlIGlkZWEgdXBwZXJtb3N0IGluIHRoZSBtaW5kcyBvZiBib3RoIHBhcnRpZXMgaXMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgcHJlc2VudCBpcyB0aGUgdGltZSBpbiB3aGljaCB0aGV5IHdvdWxkIGhhdmUgdGhlIGZhaXJlc3Qgb3Bwb3J0dW5pdHkgb2YKICAgICAgICAgICAgICAgICAgICBtYWtpbmcgYSBzdHJ1Z2dsZTsgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gZGVzcGFpcmluZyBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBzYWZldHksIHVubGVzcyB0aGV5IHNob3VsZCBzdWNjZWVkIGluIGZvcmNpbmcgdGhlIGxpbmVzOiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gZXhwZWN0aW5nIGFuIGVuZCB0byBhbGwgdGhlaXIgbGFib3JzIGlmIHRoZXkgc2hvdWxkIGdhaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZGF5LiBUaGUgcHJpbmNpcGFsIHN0cnVnZ2xlIGlzIGF0IHRoZSB1cHBlciBsaW5lcywgdG8gd2hpY2ggYXMgd2UgaGF2ZSBzYWlkCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmVyZ2FzaWxsYXVudXM8L25hbWU+IHdhcyBzZW50LiBUaGUgbGVhc3QgZWxldmF0aW9uIG9mIGdyb3VuZCwgYWRkZWQKICAgICAgICAgICAgICAgICAgICB0byBhIGRlY2xpdml0eSwgZXhlcmNpc2VzIGEgbW9tZW50b3VzIGluZmx1ZW5jZS4gU29tZSBhcmUgY2FzdGluZyBtaXNzaWxlcywKICAgICAgICAgICAgICAgICAgICBvdGhlcnMsIGZvcm1pbmcgYSB0ZXN0dWRvLCBhZHZhbmNlIHRvIHRoZSBhdHRhY2s7IGZyZXNoIG1lbiBieSB0dXJucyByZWxpZXZlIHRoZQogICAgICAgICAgICAgICAgICAgIHdlYXJpZWQuIFRoZSBlYXJ0aCwgaGVhcGVkIHVwIGJ5IGFsbCBhZ2FpbnN0IHRoZSBmb3J0aWZpY2F0aW9ucywgZ2l2ZXMgdGhlIG1lYW5zCiAgICAgICAgICAgICAgICAgICAgb2YgYXNjZW50IHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBhbmQgY292ZXJzIHRob3NlIHdvcmtzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGhhZCBjb25jZWFsZWQgaW4gdGhlIGdyb3VuZC4gT3VyIG1lbiBoYXZlCiAgICAgICAgICAgICAgICAgICAgbm8gbG9uZ2VyIGFybXMgb3Igc3RyZW5ndGguIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhhdmluZyBzZWxlY3RlZCBhIGNvbW1hbmRpbmcgc2l0dWF0aW9uLCBzZWVzCiAgICAgICAgICAgICAgICAgICAgZGlzdGluY3RseSB3aGF0ZXZlciBpcyBnb2luZyBvbiBpbiBldmVyeSBxdWFydGVyLCBhbmQgc2VuZHMgYXNzaXN0YW5jZSB0byBoaXMKICAgICAgICAgICAgICAgICAgICB0cm9vcHMgd2hlbiBoYXJkIHByZXNzZWQuIFRoZSBpZGVhIHVwcGVybW9zdCBpbiB0aGUgbWluZHMgb2YgYm90aCBwYXJ0aWVzIGlzLAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHByZXNlbnQgaXMgdGhlIHRpbWUgaW4gd2hpY2ggdGhleSB3b3VsZCBoYXZlIHRoZSBmYWlyZXN0IG9wcG9ydHVuaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgbWFraW5nIGEgc3RydWdnbGU7IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IGRlc3BhaXJpbmcgb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgc2FmZXR5LCB1bmxlc3MgdGhleSBzaG91bGQgc3VjY2VlZCBpbiBmb3JjaW5nIHRoZSBsaW5lczogdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGV4cGVjdGluZyBhbiBlbmQgdG8gYWxsIHRoZWlyIGxhYm9ycyBpZiB0aGV5IHNob3VsZCBnYWluIHRoZQogICAgICAgICAgICAgICAgICAgIGRheS4gVGhlIHByaW5jaXBhbCBzdHJ1Z2dsZSBpcyBhdCB0aGUgdXBwZXIgbGluZXMsIHRvIHdoaWNoIGFzIHdlIGhhdmUgc2FpZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcmdhc2lsbGF1bnVzPC9uYW1lPiB3YXMgc2VudC4gVGhlIGxlYXN0IGVsZXZhdGlvbiBvZiBncm91bmQsIGFkZGVkCiAgICAgICAgICAgICAgICAgICAgdG8gYSBkZWNsaXZpdHksIGV4ZXJjaXNlcyBhIG1vbWVudG91cyBpbmZsdWVuY2UuIFNvbWUgYXJlIGNhc3RpbmcgbWlzc2lsZXMsCiAgICAgICAgICAgICAgICAgICAgb3RoZXJzLCBmb3JtaW5nIGEgdGVzdHVkbywgYWR2YW5jZSB0byB0aGUgYXR0YWNrOyBmcmVzaCBtZW4gYnkgdHVybnMgcmVsaWV2ZSB0aGUKICAgICAgICAgICAgICAgICAgICB3ZWFyaWVkLiBUaGUgZWFydGgsIGhlYXBlZCB1cCBieSBhbGwgYWdhaW5zdCB0aGUgZm9ydGlmaWNhdGlvbnMsIGdpdmVzIHRoZSBtZWFucwogICAgICAgICAgICAgICAgICAgIG9mIGFzY2VudCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgYW5kIGNvdmVycyB0aG9zZSB3b3JrcyB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiBoYWQgY29uY2VhbGVkIGluIHRoZSBncm91bmQuIE91ciBtZW4gaGF2ZQogICAgICAgICAgICAgICAgICAgIG5vIGxvbmdlciBhcm1zIG9yIHN0cmVuZ3RoLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb24gb2JzZXJ2aW5nIHRoZXNlIG1vdmVtZW50cywgc2VuZHMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4gd2l0aCBzaXggY29ob3J0cyB0byByZWxpZXZlIGhpcyBkaXN0cmVzc2VkCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnM6IGhlIG9yZGVycyBoaW0sIGlmIGhlIHNob3VsZCBiZSB1bmFibGUgdG8gd2l0aHN0YW5kIHRoZW0sIHRvIGRyYXcgb2ZmCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvaG9ydHMgYW5kIG1ha2UgYSBzYWxseTsgYnV0IG5vdCB0byBkbyB0aGlzIGV4Y2VwdCB0aHJvdWdoIG5lY2Vzc2l0eS4gSGUKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGdvZXMgdG8gdGhlIHJlc3QsIGFuZCBleGhvcnRzIHRoZW0gbm90IHRvIHN1Y2N1bWIgdG8gdGhlIHRvaWw7IGhlIHNob3dzCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0aGF0IHRoZSBmcnVpdHMgb2YgYWxsIGZvcm1lciBlbmdhZ2VtZW50cyBkZXBlbmQgb24gdGhhdCBkYXkgYW5kIGhvdXIuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiB3aXRoaW4sIGRlc3BhaXJpbmcgb2YgZm9yY2luZyB0aGUgZm9ydGlmaWNhdGlvbnMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcGxhaW5zIG9uIGFjY291bnQgb2YgdGhlIGdyZWF0bmVzcyBvZiB0aGUgd29ya3MsIGF0dGVtcHQgdGhlIHBsYWNlcyBwcmVjaXBpdG91cwogICAgICAgICAgICAgICAgICAgIGluIGFzY2VudDogaGl0aGVyIHRoZXkgYnJpbmcgdGhlIGVuZ2luZXMgd2hpY2ggdGhleSBoYWQgcHJlcGFyZWQ7IGJ5IHRoZSBpbW1lbnNlCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIHRoZWlyIG1pc3NpbGVzIHRoZXkgZGlzbG9kZ2UgdGhlIGRlZmVuZGVycyBmcm9tIHRoZSB0dXJyZXRzOiB0aGV5IGZpbGwKICAgICAgICAgICAgICAgICAgICB0aGUgZGl0Y2hlcyB3aXRoIGNsYXkgYW5kIGh1cmRsZXMsIHRoZW4gY2xlYXIgdGhlIHdheTsgdGhleSB0ZWFyIGRvd24gdGhlCiAgICAgICAgICAgICAgICAgICAgcmFtcGFydCBhbmQgYnJlYXN0LXdvcmsgd2l0aCBob29rcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijg3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb24gb2JzZXJ2aW5nIHRoZXNlIG1vdmVtZW50cywgc2VuZHMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4gd2l0aCBzaXggY29ob3J0cyB0byByZWxpZXZlIGhpcyBkaXN0cmVzc2VkCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnM6IGhlIG9yZGVycyBoaW0sIGlmIGhlIHNob3VsZCBiZSB1bmFibGUgdG8gd2l0aHN0YW5kIHRoZW0sIHRvIGRyYXcgb2ZmCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvaG9ydHMgYW5kIG1ha2UgYSBzYWxseTsgYnV0IG5vdCB0byBkbyB0aGlzIGV4Y2VwdCB0aHJvdWdoIG5lY2Vzc2l0eS4gSGUKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGdvZXMgdG8gdGhlIHJlc3QsIGFuZCBleGhvcnRzIHRoZW0gbm90IHRvIHN1Y2N1bWIgdG8gdGhlIHRvaWw7IGhlIHNob3dzCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0aGF0IHRoZSBmcnVpdHMgb2YgYWxsIGZvcm1lciBlbmdhZ2VtZW50cyBkZXBlbmQgb24gdGhhdCBkYXkgYW5kIGhvdXIuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiB3aXRoaW4sIGRlc3BhaXJpbmcgb2YgZm9yY2luZyB0aGUgZm9ydGlmaWNhdGlvbnMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcGxhaW5zIG9uIGFjY291bnQgb2YgdGhlIGdyZWF0bmVzcyBvZiB0aGUgd29ya3MsIGF0dGVtcHQgdGhlIHBsYWNlcyBwcmVjaXBpdG91cwogICAgICAgICAgICAgICAgICAgIGluIGFzY2VudDogaGl0aGVyIHRoZXkgYnJpbmcgdGhlIGVuZ2luZXMgd2hpY2ggdGhleSBoYWQgcHJlcGFyZWQ7IGJ5IHRoZSBpbW1lbnNlCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIHRoZWlyIG1pc3NpbGVzIHRoZXkgZGlzbG9kZ2UgdGhlIGRlZmVuZGVycyBmcm9tIHRoZSB0dXJyZXRzOiB0aGV5IGZpbGwKICAgICAgICAgICAgICAgICAgICB0aGUgZGl0Y2hlcyB3aXRoIGNsYXkgYW5kIGh1cmRsZXMsIHRoZW4gY2xlYXIgdGhlIHdheTsgdGhleSB0ZWFyIGRvd24gdGhlCiAgICAgICAgICAgICAgICAgICAgcmFtcGFydCBhbmQgYnJlYXN0LXdvcmsgd2l0aCBob29rcy4gPC90cmFuc2xhdGlvbj4="
translation['7.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBzZW5kcyBhdCBmaXJzdCB5b3VuZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkJydXR1czwvbmFtZT4sIHdpdGggc2l4IGNvaG9ydHMsIGFuZCBhZnRlcndhcmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBGYWJpdXM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGhpcyBsaWV1dGVuYW50LCB3aXRoIHNldmVuIG90aGVyczogZmluYWxseSwgYXMgdGhleSBmb3VnaHQgbW9yZSBvYnN0aW5hdGVseSwgaGUKICAgICAgICAgICAgICAgICAgICBsZWFkcyB1cCBmcmVzaCBtZW4gdG8gdGhlIGFzc2lzdGFuY2Ugb2YgaGlzIHNvbGRpZXJzLiBBZnRlciByZW5ld2luZyB0aGUgYWN0aW9uLAogICAgICAgICAgICAgICAgICAgIGFuZCByZXB1bHNpbmcgdGhlIGVuZW15LCBoZSBtYXJjaGVzIGluIHRoZSBkaXJlY3Rpb24gaW4gd2hpY2ggaGUgaGFkIHNlbnQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4sIGRyYWZ0cyBmb3VyIGNvaG9ydHMgZnJvbSB0aGUgbmVhcmVzdCByZWRvdWJ0LAogICAgICAgICAgICAgICAgICAgIGFuZCBvcmRlcnMgcGFydCBvZiB0aGUgY2F2YWxyeSB0byBmb2xsb3cgaGltLCBhbmQgcGFydCB0byBtYWtlIHRoZSBjaXJjdWl0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGV4dGVybmFsIGZvcnRpZmljYXRpb25zIGFuZCBhdHRhY2sgdGhlIGVuZW15IGluIHRoZSByZWFyLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiwgd2hlbiBuZWl0aGVyIHRoZSByYW1wYXJ0cyBvciBkaXRjaGVzIGNvdWxkIGNoZWNrIHRoZSBvbnNldAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBlbmVteSwgaW5mb3JtcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYnkgbWVzc2VuZ2VycyBvZiB3aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaW50ZW5kZWQgdG8gZG8uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYXN0ZW5zIHRvIHNoYXJlIGluIHRoZSBhY3Rpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gc2VuZHMgYXQgZmlyc3QgeW91bmcgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5CcnV0dXM8L25hbWU+LCB3aXRoIHNpeCBjb2hvcnRzLCBhbmQgYWZ0ZXJ3YXJkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMgRmFiaXVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBoaXMgbGlldXRlbmFudCwgd2l0aCBzZXZlbiBvdGhlcnM6IGZpbmFsbHksIGFzIHRoZXkgZm91Z2h0IG1vcmUgb2JzdGluYXRlbHksIGhlCiAgICAgICAgICAgICAgICAgICAgbGVhZHMgdXAgZnJlc2ggbWVuIHRvIHRoZSBhc3Npc3RhbmNlIG9mIGhpcyBzb2xkaWVycy4gQWZ0ZXIgcmVuZXdpbmcgdGhlIGFjdGlvbiwKICAgICAgICAgICAgICAgICAgICBhbmQgcmVwdWxzaW5nIHRoZSBlbmVteSwgaGUgbWFyY2hlcyBpbiB0aGUgZGlyZWN0aW9uIGluIHdoaWNoIGhlIGhhZCBzZW50IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+LCBkcmFmdHMgZm91ciBjb2hvcnRzIGZyb20gdGhlIG5lYXJlc3QgcmVkb3VidCwKICAgICAgICAgICAgICAgICAgICBhbmQgb3JkZXJzIHBhcnQgb2YgdGhlIGNhdmFscnkgdG8gZm9sbG93IGhpbSwgYW5kIHBhcnQgdG8gbWFrZSB0aGUgY2lyY3VpdCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBleHRlcm5hbCBmb3J0aWZpY2F0aW9ucyBhbmQgYXR0YWNrIHRoZSBlbmVteSBpbiB0aGUgcmVhci4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4sIHdoZW4gbmVpdGhlciB0aGUgcmFtcGFydHMgb3IgZGl0Y2hlcyBjb3VsZCBjaGVjayB0aGUgb25zZXQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZW5lbXksIGluZm9ybXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGJ5IG1lc3NlbmdlcnMgb2Ygd2hhdCBoZQogICAgICAgICAgICAgICAgICAgIGludGVuZGVkIHRvIGRvLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFzdGVucyB0byBzaGFyZSBpbiB0aGUgYWN0aW9uLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.88'] = ""
translation['7.90'] = ""
translation['8.0'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIwIiB1bml0PSJjaGFwdGVyIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5QcmV2YWlsZWQgb24gYnkgeW91ciBjb250aW51ZWQgc29saWNpdGF0aW9ucywgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CYWxidXM8L25hbWU+LCBJIGhhdmUgZW5nYWdlZAogICAgICAgICAgICAgICAgICAgIGluIGEgbW9zdCBkaWZmaWN1bHQgdGFzaywgYXMgbXkgZGFpbHkgcmVmdXNhbHMgYXBwZWFyIHRvIHBsZWFkIG5vdCBteSBpbmFiaWxpdHksCiAgICAgICAgICAgICAgICAgICAgYnV0IGluZG9sZW5jZSwgYXMgYW4gZXhjdXNlLiBJIGhhdmUgY29tcGlsZWQgYSBjb250aW51YXRpb24gb2YgdGhlIENvbW1lbnRhcmllcwogICAgICAgICAgICAgICAgICAgIG9mIG91ciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcidzIFdhcnM8L25hbWU+IGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgbm90IGluZGVlZCB0byBiZSBjb21wYXJlZAogICAgICAgICAgICAgICAgICAgIHRvIGhpcyB3cml0aW5ncywgd2hpY2ggZWl0aGVyIHByZWNlZGUgb3IgZm9sbG93IHRoZW07IGFuZCByZWNlbnRseSwgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkIHdoYXQgaGUgbGVmdCBpbXBlcmZlY3QgYWZ0ZXIgdGhlIHRyYW5zYWN0aW9ucyBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIiByZWc9IiAgK0FsZXhhbmRyaWEgWzI5LjksMzEuMl0gKFBlcnNldXMpICIgdHlwZT0icGxhY2UiPkFsZXhhbmRyaWEgPC9uYW1lPiwgdG8gdGhlIGVuZCwKICAgICAgICAgICAgICAgICAgICBub3QgaW5kZWVkIG9mIHRoZSBjaXZpbCBicm9pbHMsIHRvIHdoaWNoIHdlIHNlZSBubyBpc3N1ZSwgYnV0IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIGxpZmUuIEkgd2lzaCB0aGF0IHRob3NlIHdobyBtYXkgcmVhZCB0aGVtIGNvdWxkCiAgICAgICAgICAgICAgICAgICAga25vdyBob3cgdW53aWxsaW5nbHkgSSB1bmRlcnRvb2sgdG8gd3JpdGUgdGhlbSwgYXMgdGhlbiBJIG1pZ2h0IHRoZSBtb3JlIHJlYWRpbHkKICAgICAgICAgICAgICAgICAgICBlc2NhcGUgdGhlIGltcHV0YXRpb24gb2YgZm9sbHkgYW5kIGFycm9nYW5jZSwgaW4gcHJlc3VtaW5nIHRvIGludHJ1ZGUgYW1vbmcKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3Mgd3JpdGluZ3MuIEZvciBpdCBpcyBhZ3JlZWQgb24gYWxsIGhhbmRzLAogICAgICAgICAgICAgICAgICAgIHRoYXQgbm8gY29tcG9zaXRpb24gd2FzIGV2ZXIgZXhlY3V0ZWQgd2l0aCBzbyBncmVhdCBjYXJlLCB0aGF0IGl0IGlzIG5vdAogICAgICAgICAgICAgICAgICAgIGV4Y2VlZGVkIGluIGVsZWdhbmNlIGJ5IHRoZXNlIENvbW1lbnRhcmllcywgd2hpY2ggd2VyZSBwdWJsaXNoZWQgZm9yIHRoZSB1c2Ugb2YKICAgICAgICAgICAgICAgICAgICBoaXN0b3JpYW5zLCB0aGF0IHRoZXkgbWlnaHQgbm90IHdhbnQgbWVtb2lycyBvZiBzdWNoIGFjaGlldmVtZW50czsgYW5kIHRoZXkKICAgICAgICAgICAgICAgICAgICBzdGFuZCBzbyBoaWdoIGluIHRoZSBlc3RlZW0gb2YgYWxsIG1lbiwgdGhhdCBoaXN0b3JpYW5zIHNlZW0gcmF0aGVyIGRlcHJpdmVkIG9mLAogICAgICAgICAgICAgICAgICAgIHRoYW4gZnVybmlzaGVkIHdpdGggbWF0ZXJpYWwuIEF0IHdoaWNoIHdlIGhhdmUgbW9yZSByZWFzb24gdG8gYmUgc3VycHJpc2VkIHRoYW4KICAgICAgICAgICAgICAgICAgICBvdGhlciBtZW47IGZvciB0aGV5IGNhbiBvbmx5IGFwcHJlY2lhdGUgdGhlIGVsZWdhbmNlIGFuZCBjb3JyZWN0bmVzcyB3aXRoIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgZmluaXNoZWQgdGhlbSwgd2hpbGUgd2Uga25vdyB3aXRoIHdoYXQgZWFzZSBhbmQgZXhwZWRpdGlvbi4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHBvc3Nlc3NlZCBub3Qgb25seSBhbiB1bmNvbW1vbiBmbG93IG9mIGxhbmd1YWdlIGFuZCBlbGVnYW5jZQogICAgICAgICAgICAgICAgICAgIG9mIHN0eWxlLCBidXQgYWxzbyBhIHRob3JvdWdoIGtub3dsZWRnZSBvZiB0aGUgbWV0aG9kIG9mIGNvbnZleWluZyBoaXMgaWRlYXMuCiAgICAgICAgICAgICAgICAgICAgQnV0IEkgaGFkIG5vdCBldmVuIHRoZSBnb29kIGZvcnR1bmUgdG8gc2hhcmUgaW4gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxleGFuZHJpYW48L25hbWU+IG9yCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWZyaWNhbjwvbmFtZT4gd2FyOyBhbmQgdGhvdWdoIHRoZXNlIHdlcmUgcGFydGx5IGNvbW11bmljYXRlZCB0byBtZSBieQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGltc2VsZiwgaW4gY29udmVyc2F0aW9uLCB5ZXQgd2UgbGlzdGVuIHdpdGgKICAgICAgICAgICAgICAgICAgICBhIGRpZmZlcmVudCBkZWdyZWUgb2YgYXR0ZW50aW9uIHRvIHRob3NlIHRoaW5ncyB3aGljaCBzdHJpa2UgdXMgd2l0aCBhZG1pcmF0aW9uCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlaXIgbm92ZWx0eSwgYW5kIHRob3NlIHdoaWNoIHdlIGRlc2lnbiB0byBhdHRlc3QgdG8gcG9zdGVyaXR5LiBCdXQsIGluCiAgICAgICAgICAgICAgICAgICAgdHJ1dGgsIHdoaWxlIEkgdXJnZSBldmVyeSBhcG9sb2d5LCB0aGF0IEkgbWF5IG5vdCBiZSBjb21wYXJlZCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIEkgaW5jdXIgdGhlIGNoYXJnZSBvZiB2YW5pdHksIGJ5IHRoaW5raW5nIGl0CiAgICAgICAgICAgICAgICAgICAgcG9zc2libGUgdGhhdCBJIGNhbiBpbiB0aGUganVkZ21lbnQgb2YgYW55IG9uZSBiZSBwdXQgaW4gY29tcGV0aXRpb24gd2l0aCBoaW0uCiAgICAgICAgICAgICAgICAgICAgRmFyZXdlbGwuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmFsYnVzPC9uYW1lPiwgSSBoYXZlIGVuZ2FnZWQKICAgICAgICAgICAgICAgICAgICBpbiBhIG1vc3QgZGlmZmljdWx0IHRhc2ssIGFzIG15IGRhaWx5IHJlZnVzYWxzIGFwcGVhciB0byBwbGVhZCBub3QgbXkgaW5hYmlsaXR5LAogICAgICAgICAgICAgICAgICAgIGJ1dCBpbmRvbGVuY2UsIGFzIGFuIGV4Y3VzZS4gSSBoYXZlIGNvbXBpbGVkIGEgY29udGludWF0aW9uIG9mIHRoZSBDb21tZW50YXJpZXMKICAgICAgICAgICAgICAgICAgICBvZiBvdXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXIncyBXYXJzPC9uYW1lPiBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIG5vdCBpbmRlZWQgdG8gYmUgY29tcGFyZWQKICAgICAgICAgICAgICAgICAgICB0byBoaXMgd3JpdGluZ3MsIHdoaWNoIGVpdGhlciBwcmVjZWRlIG9yIGZvbGxvdyB0aGVtOyBhbmQgcmVjZW50bHksIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZCB3aGF0IGhlIGxlZnQgaW1wZXJmZWN0IGFmdGVyIHRoZSB0cmFuc2FjdGlvbnMgaW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQWxleGFuZHJpYSIgcmVnPSIgICtBbGV4YW5kcmlhIFsyOS45LDMxLjJdIChQZXJzZXVzKSAiIHR5cGU9InBsYWNlIj5BbGV4YW5kcmlhIDwvbmFtZT4sIHRvIHRoZSBlbmQsCiAgICAgICAgICAgICAgICAgICAgbm90IGluZGVlZCBvZiB0aGUgY2l2aWwgYnJvaWxzLCB0byB3aGljaCB3ZSBzZWUgbm8gaXNzdWUsIGJ1dCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBsaWZlLiBJIHdpc2ggdGhhdCB0aG9zZSB3aG8gbWF5IHJlYWQgdGhlbSBjb3VsZAogICAgICAgICAgICAgICAgICAgIGtub3cgaG93IHVud2lsbGluZ2x5IEkgdW5kZXJ0b29rIHRvIHdyaXRlIHRoZW0sIGFzIHRoZW4gSSBtaWdodCB0aGUgbW9yZSByZWFkaWx5CiAgICAgICAgICAgICAgICAgICAgZXNjYXBlIHRoZSBpbXB1dGF0aW9uIG9mIGZvbGx5IGFuZCBhcnJvZ2FuY2UsIGluIHByZXN1bWluZyB0byBpbnRydWRlIGFtb25nCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIHdyaXRpbmdzLiBGb3IgaXQgaXMgYWdyZWVkIG9uIGFsbCBoYW5kcywKICAgICAgICAgICAgICAgICAgICB0aGF0IG5vIGNvbXBvc2l0aW9uIHdhcyBldmVyIGV4ZWN1dGVkIHdpdGggc28gZ3JlYXQgY2FyZSwgdGhhdCBpdCBpcyBub3QKICAgICAgICAgICAgICAgICAgICBleGNlZWRlZCBpbiBlbGVnYW5jZSBieSB0aGVzZSBDb21tZW50YXJpZXMsIHdoaWNoIHdlcmUgcHVibGlzaGVkIGZvciB0aGUgdXNlIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzdG9yaWFucywgdGhhdCB0aGV5IG1pZ2h0IG5vdCB3YW50IG1lbW9pcnMgb2Ygc3VjaCBhY2hpZXZlbWVudHM7IGFuZCB0aGV5CiAgICAgICAgICAgICAgICAgICAgc3RhbmQgc28gaGlnaCBpbiB0aGUgZXN0ZWVtIG9mIGFsbCBtZW4sIHRoYXQgaGlzdG9yaWFucyBzZWVtIHJhdGhlciBkZXByaXZlZCBvZiwKICAgICAgICAgICAgICAgICAgICB0aGFuIGZ1cm5pc2hlZCB3aXRoIG1hdGVyaWFsLiBBdCB3aGljaCB3ZSBoYXZlIG1vcmUgcmVhc29uIHRvIGJlIHN1cnByaXNlZCB0aGFuCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgbWVuOyBmb3IgdGhleSBjYW4gb25seSBhcHByZWNpYXRlIHRoZSBlbGVnYW5jZSBhbmQgY29ycmVjdG5lc3Mgd2l0aCB3aGljaAogICAgICAgICAgICAgICAgICAgIGhlIGZpbmlzaGVkIHRoZW0sIHdoaWxlIHdlIGtub3cgd2l0aCB3aGF0IGVhc2UgYW5kIGV4cGVkaXRpb24uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBwb3NzZXNzZWQgbm90IG9ubHkgYW4gdW5jb21tb24gZmxvdyBvZiBsYW5ndWFnZSBhbmQgZWxlZ2FuY2UKICAgICAgICAgICAgICAgICAgICBvZiBzdHlsZSwgYnV0IGFsc28gYSB0aG9yb3VnaCBrbm93bGVkZ2Ugb2YgdGhlIG1ldGhvZCBvZiBjb252ZXlpbmcgaGlzIGlkZWFzLgogICAgICAgICAgICAgICAgICAgIEJ1dCBJIGhhZCBub3QgZXZlbiB0aGUgZ29vZCBmb3J0dW5lIHRvIHNoYXJlIGluIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsZXhhbmRyaWFuPC9uYW1lPiBvcgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFmcmljYW48L25hbWU+IHdhcjsgYW5kIHRob3VnaCB0aGVzZSB3ZXJlIHBhcnRseSBjb21tdW5pY2F0ZWQgdG8gbWUgYnkKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhpbXNlbGYsIGluIGNvbnZlcnNhdGlvbiwgeWV0IHdlIGxpc3RlbiB3aXRoCiAgICAgICAgICAgICAgICAgICAgYSBkaWZmZXJlbnQgZGVncmVlIG9mIGF0dGVudGlvbiB0byB0aG9zZSB0aGluZ3Mgd2hpY2ggc3RyaWtlIHVzIHdpdGggYWRtaXJhdGlvbgogICAgICAgICAgICAgICAgICAgIGJ5IHRoZWlyIG5vdmVsdHksIGFuZCB0aG9zZSB3aGljaCB3ZSBkZXNpZ24gdG8gYXR0ZXN0IHRvIHBvc3Rlcml0eS4gQnV0LCBpbgogICAgICAgICAgICAgICAgICAgIHRydXRoLCB3aGlsZSBJIHVyZ2UgZXZlcnkgYXBvbG9neSwgdGhhdCBJIG1heSBub3QgYmUgY29tcGFyZWQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBJIGluY3VyIHRoZSBjaGFyZ2Ugb2YgdmFuaXR5LCBieSB0aGlua2luZyBpdAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlIHRoYXQgSSBjYW4gaW4gdGhlIGp1ZGdtZW50IG9mIGFueSBvbmUgYmUgcHV0IGluIGNvbXBldGl0aW9uIHdpdGggaGltLgogICAgICAgICAgICAgICAgICAgIEZhcmV3ZWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGJlaW5nIGVudGlyZWx5IHJlZHVjZWQsIHdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHdhZ2VkIHdhciBpbmNlc3NhbnRseSBkdXJpbmcgdGhlIGZvcm1lciBzdW1tZXIsIHdpc2hlZCB0byByZWNydWl0IGhpcwogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIGFmdGVyIHNvIG11Y2ggZmF0aWd1ZSwgYnkgcmVwb3NlIGluIHdpbnRlciBxdWFydGVycywgbmV3cyB3YXMgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIGhpbSB0aGF0IHNldmVyYWwgc3RhdGVzIHdlcmUgc2ltdWx0YW5lb3VzbHkgcmVuZXdpbmcgdGhlaXIgaG9zdGlsZSBpbnRlbnRpb24sCiAgICAgICAgICAgICAgICAgICAgYW5kIGZvcm1pbmcgY29tYmluYXRpb25zLiBGb3Igd2hpY2ggYSBwcm9iYWJsZSByZWFzb24gd2FzIGFzc2lnbmVkOyBuYW1lbHksIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB3ZXJlIGNvbnZpbmNlZCB0aGF0IHRoZXkgd2VyZSBub3QgYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHJlc2lzdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIHdpdGggYW55IGZvcmNlIHRoZXkgY291bGQgY29sbGVjdAogICAgICAgICAgICAgICAgICAgIGluIG9uZSBwbGFjZTsgYW5kIGhvcGVkIHRoYXQgaWYgc2V2ZXJhbCBzdGF0ZXMgbWFkZSB3YXIgaW4gZGlmZmVyZW50IHBsYWNlcyBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIHRpbWUsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGFybXkgd291bGQgbmVpdGhlciBoYXZlIGFpZCwKICAgICAgICAgICAgICAgICAgICBub3IgdGltZSwgbm9yIGZvcmNlcywgdG8gcHJvc2VjdXRlIHRoZW0gYWxsOiBub3Igb3VnaHQgYW55IHNpbmdsZSBzdGF0ZSB0bwogICAgICAgICAgICAgICAgICAgIGRlY2xpbmUgYW55IGluY29udmVuaWVuY2VzIHRoYXQgbWlnaHQgYmVmYWxsIHRoZW0sIHByb3ZpZGVkIHRoYXQgYnkgc3VjaCBkZWxheSwKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCBzaG91bGQgYmUgZW5hYmxlZCB0byBhc3NlcnQgdGhlaXIgbGliZXJ0eS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGJlaW5nIGVudGlyZWx5IHJlZHVjZWQsIHdoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHdhZ2VkIHdhciBpbmNlc3NhbnRseSBkdXJpbmcgdGhlIGZvcm1lciBzdW1tZXIsIHdpc2hlZCB0byByZWNydWl0IGhpcwogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIGFmdGVyIHNvIG11Y2ggZmF0aWd1ZSwgYnkgcmVwb3NlIGluIHdpbnRlciBxdWFydGVycywgbmV3cyB3YXMgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIGhpbSB0aGF0IHNldmVyYWwgc3RhdGVzIHdlcmUgc2ltdWx0YW5lb3VzbHkgcmVuZXdpbmcgdGhlaXIgaG9zdGlsZSBpbnRlbnRpb24sCiAgICAgICAgICAgICAgICAgICAgYW5kIGZvcm1pbmcgY29tYmluYXRpb25zLiBGb3Igd2hpY2ggYSBwcm9iYWJsZSByZWFzb24gd2FzIGFzc2lnbmVkOyBuYW1lbHksIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB3ZXJlIGNvbnZpbmNlZCB0aGF0IHRoZXkgd2VyZSBub3QgYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHJlc2lzdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIHdpdGggYW55IGZvcmNlIHRoZXkgY291bGQgY29sbGVjdAogICAgICAgICAgICAgICAgICAgIGluIG9uZSBwbGFjZTsgYW5kIGhvcGVkIHRoYXQgaWYgc2V2ZXJhbCBzdGF0ZXMgbWFkZSB3YXIgaW4gZGlmZmVyZW50IHBsYWNlcyBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIHRpbWUsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGFybXkgd291bGQgbmVpdGhlciBoYXZlIGFpZCwKICAgICAgICAgICAgICAgICAgICBub3IgdGltZSwgbm9yIGZvcmNlcywgdG8gcHJvc2VjdXRlIHRoZW0gYWxsOiBub3Igb3VnaHQgYW55IHNpbmdsZSBzdGF0ZSB0bwogICAgICAgICAgICAgICAgICAgIGRlY2xpbmUgYW55IGluY29udmVuaWVuY2VzIHRoYXQgbWlnaHQgYmVmYWxsIHRoZW0sIHByb3ZpZGVkIHRoYXQgYnkgc3VjaCBkZWxheSwKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCBzaG91bGQgYmUgZW5hYmxlZCB0byBhc3NlcnQgdGhlaXIgbGliZXJ0eS4gPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhhdCB0aGlzIG5vdGlvbiBtaWdodCBub3QgYmUgY29uZmlybWVkIGFtb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGVmdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmN1cwogICAgICAgICAgICAgICAgICAgICAgICBBbnRvbml1czwvbmFtZT4sIGhpcyBxdWVzdG9yLCBpbiBjaGFyZ2Ugb2YgaGlzIHF1YXJ0ZXJzLCBhbmQgc2V0IG91dCBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGd1YXJkIG9mIGhvcnNlLCB0aGUgZGF5IGJlZm9yZSB0aGUga2FsZW5kcyBvZiA8ZGF0ZSBjbGFzcz0idHJhbnNsYXRpb24iPkphbnVhcnk8L2RhdGU+LCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIHRvd24gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAwNzk4IiByZWc9IiAgK01vbnQgQmV1dnJheSAoaW5oYWJpdGVkIHBsYWNlKSwgU2FvbmUtZXQtTG9pcmUsIEJ1cmd1bmR5LCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5CaWJyYWN0ZSA8L25hbWU+LCB0byB0aGUgdGhpcnRlZW50aCBsZWdpb24sIHdoaWNoIGhlIGhhZCBzdGF0aW9uZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+LCBub3QgZmFyIGZyb20gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYW5kIGpvaW5lZCB0byBpdCB0aGUgZWxldmVudGggbGVnaW9uIHdoaWNoIHdhcyBuZXh0IGl0LgogICAgICAgICAgICAgICAgICAgIExlYXZpbmcgdHdvIGNvaG9ydHMgdG8gZ3VhcmQgdGhlIGJhZ2dhZ2UsIGhlIGxlYWRzIHRoZSByZXN0IG9mIGhpcyBhcm15IGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBwbGVudGlmdWwgcGFydCBvZiB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+OyB3aG8sCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2luZyBhbiBleHRlbnNpdmUgdGVycml0b3J5IGFuZCBzZXZlcmFsIHRvd25zLCB3ZXJlIG5vdCB0byBiZSBkZXRlcnJlZCwgYnkKICAgICAgICAgICAgICAgICAgICBhIHNpbmdsZSBsZWdpb24gcXVhcnRlcmVkIGFtb25nIHRoZW0sIGZyb20gbWFraW5nIHdhcmxpa2UgcHJlcGFyYXRpb24sIGFuZAogICAgICAgICAgICAgICAgICAgIGZvcm1pbmcgY29tYmluYXRpb25zLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gbGVmdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmN1cwogICAgICAgICAgICAgICAgICAgICAgICBBbnRvbml1czwvbmFtZT4sIGhpcyBxdWVzdG9yLCBpbiBjaGFyZ2Ugb2YgaGlzIHF1YXJ0ZXJzLCBhbmQgc2V0IG91dCBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGd1YXJkIG9mIGhvcnNlLCB0aGUgZGF5IGJlZm9yZSB0aGUga2FsZW5kcyBvZiA8ZGF0ZSBjbGFzcz0idHJhbnNsYXRpb24iPkphbnVhcnk8L2RhdGU+LCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIHRvd24gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAwNzk4IiByZWc9IiAgK01vbnQgQmV1dnJheSAoaW5oYWJpdGVkIHBsYWNlKSwgU2FvbmUtZXQtTG9pcmUsIEJ1cmd1bmR5LCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5CaWJyYWN0ZSA8L25hbWU+LCB0byB0aGUgdGhpcnRlZW50aCBsZWdpb24sIHdoaWNoIGhlIGhhZCBzdGF0aW9uZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+LCBub3QgZmFyIGZyb20gdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPiwgYW5kIGpvaW5lZCB0byBpdCB0aGUgZWxldmVudGggbGVnaW9uIHdoaWNoIHdhcyBuZXh0IGl0LgogICAgICAgICAgICAgICAgICAgIExlYXZpbmcgdHdvIGNvaG9ydHMgdG8gZ3VhcmQgdGhlIGJhZ2dhZ2UsIGhlIGxlYWRzIHRoZSByZXN0IG9mIGhpcyBhcm15IGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBwbGVudGlmdWwgcGFydCBvZiB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+OyB3aG8sCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2luZyBhbiBleHRlbnNpdmUgdGVycml0b3J5IGFuZCBzZXZlcmFsIHRvd25zLCB3ZXJlIG5vdCB0byBiZSBkZXRlcnJlZCwgYnkKICAgICAgICAgICAgICAgICAgICBhIHNpbmdsZSBsZWdpb24gcXVhcnRlcmVkIGFtb25nIHRoZW0sIGZyb20gbWFraW5nIHdhcmxpa2UgcHJlcGFyYXRpb24sIGFuZAogICAgICAgICAgICAgICAgICAgIGZvcm1pbmcgY29tYmluYXRpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3Mgc3VkZGVuIGFycml2YWwsIGl0IGhhcHBlbmVkLCBhcyBpdAogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyaWx5IG11c3QsIHRvIGFuIHVucHJvdmlkZWQgYW5kIGRpc3BlcnNlZCBwZW9wbGUsIHRoYXQgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgc3VycHJpc2VkIGJ5IG91ciBob3JzZSwgd2hpbGUgY3VsdGl2YXRpbmcgdGhlIGZpZWxkcyB3aXRob3V0IGFueSBhcHByZWhlbnNpb25zLAogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB0aGV5IGhhZCB0aW1lIHRvIGZseSB0byB0aGVpciB0b3ducy4gRm9yIHRoZSB1c3VhbCBzaWduIG9mIGFuIGVuZW15J3MKICAgICAgICAgICAgICAgICAgICBpbnZhc2lvbiwgd2hpY2ggaXMgZ2VuZXJhbGx5IGludGltYXRlZCBieSB0aGUgYnVybmluZyBvZiB0aGVpciB0b3ducywgd2FzCiAgICAgICAgICAgICAgICAgICAgZm9yYmlkZGVuIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIG9yZGVyczsgbGVzdCBpZiBoZSBhZHZhbmNlZCBmYXIsCiAgICAgICAgICAgICAgICAgICAgZm9yYWdlIGFuZCBjb3JuIHNob3VsZCBiZWNvbWUgc2NhcmNlLCBvciB0aGUgZW5lbXkgYmUgd2FybmVkIGJ5IHRoZSBmaXJlcyB0bwogICAgICAgICAgICAgICAgICAgIG1ha2UgdGhlaXIgZXNjYXBlLiBNYW55IHRob3VzYW5kcyBiZWluZyB0YWtlbiwgYXMgbWFueSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+IGFzIHdlcmUgYWJsZSB0byBlc2NhcGUgdGhlIGZpcnN0IGNvbWluZyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIGZsZWQgdG8gdGhlIG5laWdoYm9yaW5nIHN0YXRlcywgcmVseWluZyBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBvbiBwcml2YXRlIGZyaWVuZHNoaXAsIG9yIHB1YmxpYyBhbGxpYW5jZS4gSW4gdmFpbjsgZm9yIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYnkgaGFzdHkgbWFyY2hlcywgYW50aWNpcGF0ZWQgdGhlbSBpbiBldmVyeSBwbGFjZSwgbm9yIGRpZAogICAgICAgICAgICAgICAgICAgIGhlIGFsbG93IGFueSBzdGF0ZSBsZWlzdXJlIHRvIGNvbnNpZGVyIHRoZSBzYWZldHkgb2Ygb3RoZXJzLCBpbiBwcmVmZXJlbmNlIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgb3duLiBCeSB0aGlzIGFjdGl2aXR5LCBoZSBib3RoIHJldGFpbmVkIGhpcyBmcmllbmRzIGluIHRoZWlyIGxveWFsdHksIGFuZAogICAgICAgICAgICAgICAgICAgIGJ5IGZlYXIsIG9ibGlnZWQgdGhlIHdhdmVyaW5nIHRvIGFjY2VwdCBvZmZlcnMgb2YgcGVhY2UuIFN1Y2ggb2ZmZXJzIGJlaW5nIG1hZGUKICAgICAgICAgICAgICAgICAgICB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+LCB3aGVuIHRoZXkgcGVyY2VpdmVkIHRoYXQgdGhyb3VnaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBjbGVtZW5jeSwgYW4gYXZlbnVlIHdhcyBvcGVuIHRvIGhpcyBmcmllbmRzaGlwLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IHRoZSBuZWlnaGJvcmluZyBzdGF0ZXMgaGFkIGdpdmVuIGhvc3RhZ2VzLCB3aXRob3V0IGluY3VycmluZyBhbnkKICAgICAgICAgICAgICAgICAgICBwdW5pc2htZW50LCBhbmQgaGFkIGJlZW4gcmVjZWl2ZWQgdW5kZXIgaGlzIHByb3RlY3Rpb24sIHRoZXkgZGlkIHRoZSBzYW1lLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBzdWRkZW4gYXJyaXZhbCwgaXQgaGFwcGVuZWQsIGFzIGl0CiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJpbHkgbXVzdCwgdG8gYW4gdW5wcm92aWRlZCBhbmQgZGlzcGVyc2VkIHBlb3BsZSwgdGhhdCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBzdXJwcmlzZWQgYnkgb3VyIGhvcnNlLCB3aGlsZSBjdWx0aXZhdGluZyB0aGUgZmllbGRzIHdpdGhvdXQgYW55IGFwcHJlaGVuc2lvbnMsCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHRoZXkgaGFkIHRpbWUgdG8gZmx5IHRvIHRoZWlyIHRvd25zLiBGb3IgdGhlIHVzdWFsIHNpZ24gb2YgYW4gZW5lbXkncwogICAgICAgICAgICAgICAgICAgIGludmFzaW9uLCB3aGljaCBpcyBnZW5lcmFsbHkgaW50aW1hdGVkIGJ5IHRoZSBidXJuaW5nIG9mIHRoZWlyIHRvd25zLCB3YXMKICAgICAgICAgICAgICAgICAgICBmb3JiaWRkZW4gYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3Mgb3JkZXJzOyBsZXN0IGlmIGhlIGFkdmFuY2VkIGZhciwKICAgICAgICAgICAgICAgICAgICBmb3JhZ2UgYW5kIGNvcm4gc2hvdWxkIGJlY29tZSBzY2FyY2UsIG9yIHRoZSBlbmVteSBiZSB3YXJuZWQgYnkgdGhlIGZpcmVzIHRvCiAgICAgICAgICAgICAgICAgICAgbWFrZSB0aGVpciBlc2NhcGUuIE1hbnkgdGhvdXNhbmRzIGJlaW5nIHRha2VuLCBhcyBtYW55IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpdHVyaWdlczwvbmFtZT4gYXMgd2VyZSBhYmxlIHRvIGVzY2FwZSB0aGUgZmlyc3QgY29taW5nIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgZmxlZCB0byB0aGUgbmVpZ2hib3Jpbmcgc3RhdGVzLCByZWx5aW5nIGVpdGhlcgogICAgICAgICAgICAgICAgICAgIG9uIHByaXZhdGUgZnJpZW5kc2hpcCwgb3IgcHVibGljIGFsbGlhbmNlLiBJbiB2YWluOyBmb3IgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBieSBoYXN0eSBtYXJjaGVzLCBhbnRpY2lwYXRlZCB0aGVtIGluIGV2ZXJ5IHBsYWNlLCBub3IgZGlkCiAgICAgICAgICAgICAgICAgICAgaGUgYWxsb3cgYW55IHN0YXRlIGxlaXN1cmUgdG8gY29uc2lkZXIgdGhlIHNhZmV0eSBvZiBvdGhlcnMsIGluIHByZWZlcmVuY2UgdG8KICAgICAgICAgICAgICAgICAgICB0aGVpciBvd24uIEJ5IHRoaXMgYWN0aXZpdHksIGhlIGJvdGggcmV0YWluZWQgaGlzIGZyaWVuZHMgaW4gdGhlaXIgbG95YWx0eSwgYW5kCiAgICAgICAgICAgICAgICAgICAgYnkgZmVhciwgb2JsaWdlZCB0aGUgd2F2ZXJpbmcgdG8gYWNjZXB0IG9mZmVycyBvZiBwZWFjZS4gU3VjaCBvZmZlcnMgYmVpbmcgbWFkZQogICAgICAgICAgICAgICAgICAgIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpdHVyaWdlczwvbmFtZT4sIHdoZW4gdGhleSBwZXJjZWl2ZWQgdGhhdCB0aHJvdWdoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIGNsZW1lbmN5LCBhbiBhdmVudWUgd2FzIG9wZW4gdG8gaGlzIGZyaWVuZHNoaXAsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgdGhlIG5laWdoYm9yaW5nIHN0YXRlcyBoYWQgZ2l2ZW4gaG9zdGFnZXMsIHdpdGhvdXQgaW5jdXJyaW5nIGFueQogICAgICAgICAgICAgICAgICAgIHB1bmlzaG1lbnQsIGFuZCBoYWQgYmVlbiByZWNlaXZlZCB1bmRlciBoaXMgcHJvdGVjdGlvbiwgdGhleSBkaWQgdGhlIHNhbWUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHByb21pc2VzIGhpcyBzb2xkaWVycywgYXMgYSByZXdhcmQgZm9yIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbGFib3IgYW5kIHBhdGllbmNlLCBpbiBjaGVlcmZ1bGx5IHN1Ym1pdHRpbmcgdG8gaGFyZHNoaXBzIGZyb20gdGhlIHNldmVyaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHdpbnRlciwgdGhlIGRpZmZpY3VsdHkgb2YgdGhlIHJvYWRzLCBhbmQgdGhlIGludG9sZXJhYmxlIGNvbGQsIHR3byBodW5kcmVkCiAgICAgICAgICAgICAgICAgICAgc2VzdGVydGlpIGVhY2gsIGFuZCB0byBldmVyeSBjZW50dXJpYW4gdHdvIHRob3VzYW5kLCB0byBiZSBnaXZlbiBpbnN0ZWFkIG9mCiAgICAgICAgICAgICAgICAgICAgcGx1bmRlcjogYW5kIHNlbmRpbmcgaGlzIGxlZ2lvbnMgYmFjayB0byBxdWFydGVycywgaGUgaGltc2VsZiByZXR1cm5lZCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0aWV0aCBkYXkgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAwNzk4IiByZWc9IiAgK01vbnQgQmV1dnJheSAoaW5oYWJpdGVkIHBsYWNlKSwgU2FvbmUtZXQtTG9pcmUsIEJ1cmd1bmR5LCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5CaWJyYWN0ZSA8L25hbWU+LiBXaGlsZSBoZSB3YXMgZGlzcGVuc2luZyBqdXN0aWNlIHRoZXJlLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CaXR1cmlnZXM8L25hbWU+IHNlbmQgZW1iYXNzYWRvcnMgdG8gaGltLCB0byBlbnRyZWF0IGhpcyBhaWQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPiwgd2hvIHRoZXkgY29tcGxhaW5lZCBoYWQgbWFkZSB3YXIgYWdhaW5zdCB0aGVtLiBVcG9uCiAgICAgICAgICAgICAgICAgICAgdGhpcyBpbnRlbGxpZ2VuY2UsIHRob3VnaCBoZSBoYWQgbm90IHJlbWFpbmVkIG1vcmUgdGhhbiBlaWdodGVlbiBkYXlzIGluIHdpbnRlcgogICAgICAgICAgICAgICAgICAgIHF1YXJ0ZXJzLCBoZSBkcmF3cyB0aGUgZm91cnRlZW50aCBhbmQgc2l4dGggbGVnaW9uIG91dCBvZiBxdWFydGVycyBvbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTI5MzE2IiByZWc9IiAgK1Nhb25lIFs0LjgzMyw0NS43NV0gKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+U2FvbmUgPC9uYW1lPiwgd2hlcmUKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgcG9zdGVkIHRoZW0gYXMgbWVudGlvbmVkIGluIGEgZm9ybWVyIENvbW1lbnRhcnksIHRvIHByb2N1cmUgc3VwcGxpZXMgb2YKICAgICAgICAgICAgICAgICAgICBjb3JuLiBXaXRoIHRoZXNlIHR3byBsZWdpb25zIGhlIG1hcmNoZXMgaW4gcHVyc3VpdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBwcm9taXNlcyBoaXMgc29sZGllcnMsIGFzIGEgcmV3YXJkIGZvciB0aGVpcgogICAgICAgICAgICAgICAgICAgIGxhYm9yIGFuZCBwYXRpZW5jZSwgaW4gY2hlZXJmdWxseSBzdWJtaXR0aW5nIHRvIGhhcmRzaGlwcyBmcm9tIHRoZSBzZXZlcml0eSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB3aW50ZXIsIHRoZSBkaWZmaWN1bHR5IG9mIHRoZSByb2FkcywgYW5kIHRoZSBpbnRvbGVyYWJsZSBjb2xkLCB0d28gaHVuZHJlZAogICAgICAgICAgICAgICAgICAgIHNlc3RlcnRpaSBlYWNoLCBhbmQgdG8gZXZlcnkgY2VudHVyaWFuIHR3byB0aG91c2FuZCwgdG8gYmUgZ2l2ZW4gaW5zdGVhZCBvZgogICAgICAgICAgICAgICAgICAgIHBsdW5kZXI6IGFuZCBzZW5kaW5nIGhpcyBsZWdpb25zIGJhY2sgdG8gcXVhcnRlcnMsIGhlIGhpbXNlbGYgcmV0dXJuZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgZm9ydGlldGggZGF5IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMDc5OCIgcmVnPSIgICtNb250IEJldXZyYXkgKGluaGFiaXRlZCBwbGFjZSksIFNhb25lLWV0LUxvaXJlLCBCdXJndW5keSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QmlicmFjdGUgPC9uYW1lPi4gV2hpbGUgaGUgd2FzIGRpc3BlbnNpbmcganVzdGljZSB0aGVyZSwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiBzZW5kIGVtYmFzc2Fkb3JzIHRvIGhpbSwgdG8gZW50cmVhdCBoaXMgYWlkIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4sIHdobyB0aGV5IGNvbXBsYWluZWQgaGFkIG1hZGUgd2FyIGFnYWluc3QgdGhlbS4gVXBvbgogICAgICAgICAgICAgICAgICAgIHRoaXMgaW50ZWxsaWdlbmNlLCB0aG91Z2ggaGUgaGFkIG5vdCByZW1haW5lZCBtb3JlIHRoYW4gZWlnaHRlZW4gZGF5cyBpbiB3aW50ZXIKICAgICAgICAgICAgICAgICAgICBxdWFydGVycywgaGUgZHJhd3MgdGhlIGZvdXJ0ZWVudGggYW5kIHNpeHRoIGxlZ2lvbiBvdXQgb2YgcXVhcnRlcnMgb24gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTMxNiIgcmVnPSIgICtTYW9uZSBbNC44MzMsNDUuNzVdIChyaXZlciksIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlNhb25lIDwvbmFtZT4sIHdoZXJlCiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIHBvc3RlZCB0aGVtIGFzIG1lbnRpb25lZCBpbiBhIGZvcm1lciBDb21tZW50YXJ5LCB0byBwcm9jdXJlIHN1cHBsaWVzIG9mCiAgICAgICAgICAgICAgICAgICAgY29ybi4gV2l0aCB0aGVzZSB0d28gbGVnaW9ucyBoZSBtYXJjaGVzIGluIHB1cnN1aXQgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FybnV0ZXM8L25hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiB0aGUgbmV3cyBvZiB0aGUgYXBwcm9hY2ggb2Ygb3VyIGFybXkgcmVhY2hlZCB0aGUgZW5lbXksIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPiwgdGVycmlmaWVkIGJ5IHRoZSBzdWZmZXJpbmcgb2Ygb3RoZXIgc3RhdGVzLCBkZXNlcnRlZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHZpbGxhZ2VzIGFuZCB0b3ducyAod2hpY2ggd2VyZSBzbWFsbCBidWlsZGluZ3MsIHJhaXNlZCBpbiBhIGh1cnJ5LCB0byBtZWV0CiAgICAgICAgICAgICAgICAgICAgdGhlIGltbWVkaWF0ZSBuZWNlc3NpdHksIGluIHdoaWNoIHRoZXkgbGl2ZWQgdG8gc2hlbHRlciB0aGVtc2VsdmVzIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgd2ludGVyLCBmb3IsIGJlaW5nIGxhdGVseSBjb25xdWVyZWQsIHRoZXkgaGFkIGxvc3Qgc2V2ZXJhbCB0b3ducyksIGFuZCBkaXNwZXJzZWQKICAgICAgICAgICAgICAgICAgICBhbmQgZmxlZC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCB1bndpbGxpbmcgdG8gZXhwb3NlIGhpcyBzb2xkaWVycyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSB2aW9sZW50IHN0b3JtcyB0aGF0IGJyZWFrIG91dCwgZXNwZWNpYWxseSBhdCB0aGF0IHNlYXNvbiwgdG9vayB1cCBoaXMKICAgICAgICAgICAgICAgICAgICBxdWFydGVycyBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzMzciIHJlZz0iICArT3JsZWFucyBbMS45LDQ3LjldIChpbmhhYml0ZWQgcGxhY2UpLCBMb2lyZXQsIENlbnRyZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VuYWJ1bSA8L25hbWU+LCBhIHRvd24gb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FybnV0ZXM8L25hbWU+OyBhbmQgbG9kZ2VkIGhpcyBtZW4gaW4KICAgICAgICAgICAgICAgICAgICBob3VzZXMsIHBhcnRseSBiZWxvbmdpbmcgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sIGFuZCBwYXJ0bHkKICAgICAgICAgICAgICAgICAgICBidWlsdCB0byBzaGVsdGVyIHRoZSB0ZW50cywgYW5kIGhhc3RpbHkgY292ZXJlZCB3aXRoIHRoYXRjaC4gQnV0IHRoZSBob3JzZSBhbmQKICAgICAgICAgICAgICAgICAgICBhdXhpbGlhcmllcyBoZSBzZW5kcyB0byBhbGwgcGFydHMgdG8gd2hpY2ggaGUgd2FzIHRvbGQgdGhlIGVuZW15IGhhZCBtYXJjaGVkOwogICAgICAgICAgICAgICAgICAgIGFuZCBub3Qgd2l0aG91dCBlZmZlY3QsIGFzIG91ciBtZW4gZ2VuZXJhbGx5IHJldHVybmVkIGxvYWRlZCB3aXRoIGJvb3R5LiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4sIG92ZXJwb3dlcmVkIGJ5IHRoZSBzZXZlcml0eSBvZiB0aGUgd2ludGVyLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZmVhciBvZiBkYW5nZXIsIGFuZCBub3QgZGFyaW5nIHRvIGNvbnRpbnVlIGxvbmcgaW4gYW55IHBsYWNlLCBhcyB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBkcml2ZW4gZnJvbSB0aGVpciBob3VzZXMsIGFuZCBub3QgZmluZGluZyBzdWZmaWNpZW50IHByb3RlY3Rpb24gaW4gdGhlIHdvb2RzLAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHZpb2xlbmNlIG9mIHRoZSBzdG9ybXMsIGFmdGVyIGxvc2luZyBhIGNvbnNpZGVyYWJsZSBudW1iZXIgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBtZW4sIGRpc3BlcnNlLCBhbmQgdGFrZSByZWZ1Z2UgYW1vbmcgdGhlIG5laWdoYm9yaW5nIHN0YXRlcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4sIHRlcnJpZmllZCBieSB0aGUgc3VmZmVyaW5nIG9mIG90aGVyIHN0YXRlcywgZGVzZXJ0ZWQKICAgICAgICAgICAgICAgICAgICB0aGVpciB2aWxsYWdlcyBhbmQgdG93bnMgKHdoaWNoIHdlcmUgc21hbGwgYnVpbGRpbmdzLCByYWlzZWQgaW4gYSBodXJyeSwgdG8gbWVldAogICAgICAgICAgICAgICAgICAgIHRoZSBpbW1lZGlhdGUgbmVjZXNzaXR5LCBpbiB3aGljaCB0aGV5IGxpdmVkIHRvIHNoZWx0ZXIgdGhlbXNlbHZlcyBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgIHdpbnRlciwgZm9yLCBiZWluZyBsYXRlbHkgY29ucXVlcmVkLCB0aGV5IGhhZCBsb3N0IHNldmVyYWwgdG93bnMpLCBhbmQgZGlzcGVyc2VkCiAgICAgICAgICAgICAgICAgICAgYW5kIGZsZWQuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgdW53aWxsaW5nIHRvIGV4cG9zZSBoaXMgc29sZGllcnMgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgdmlvbGVudCBzdG9ybXMgdGhhdCBicmVhayBvdXQsIGVzcGVjaWFsbHkgYXQgdGhhdCBzZWFzb24sIHRvb2sgdXAgaGlzCiAgICAgICAgICAgICAgICAgICAgcXVhcnRlcnMgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzM3IiByZWc9IiAgK09ybGVhbnMgWzEuOSw0Ny45XSAoaW5oYWJpdGVkIHBsYWNlKSwgTG9pcmV0LCBDZW50cmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkdlbmFidW0gPC9uYW1lPiwgYSB0b3duIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPjsgYW5kIGxvZGdlZCBoaXMgbWVuIGluCiAgICAgICAgICAgICAgICAgICAgaG91c2VzLCBwYXJ0bHkgYmVsb25naW5nIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBhbmQgcGFydGx5CiAgICAgICAgICAgICAgICAgICAgYnVpbHQgdG8gc2hlbHRlciB0aGUgdGVudHMsIGFuZCBoYXN0aWx5IGNvdmVyZWQgd2l0aCB0aGF0Y2guIEJ1dCB0aGUgaG9yc2UgYW5kCiAgICAgICAgICAgICAgICAgICAgYXV4aWxpYXJpZXMgaGUgc2VuZHMgdG8gYWxsIHBhcnRzIHRvIHdoaWNoIGhlIHdhcyB0b2xkIHRoZSBlbmVteSBoYWQgbWFyY2hlZDsKICAgICAgICAgICAgICAgICAgICBhbmQgbm90IHdpdGhvdXQgZWZmZWN0LCBhcyBvdXIgbWVuIGdlbmVyYWxseSByZXR1cm5lZCBsb2FkZWQgd2l0aCBib290eS4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FybnV0ZXM8L25hbWU+LCBvdmVycG93ZXJlZCBieSB0aGUgc2V2ZXJpdHkgb2YgdGhlIHdpbnRlciwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGZlYXIgb2YgZGFuZ2VyLCBhbmQgbm90IGRhcmluZyB0byBjb250aW51ZSBsb25nIGluIGFueSBwbGFjZSwgYXMgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZHJpdmVuIGZyb20gdGhlaXIgaG91c2VzLCBhbmQgbm90IGZpbmRpbmcgc3VmZmljaWVudCBwcm90ZWN0aW9uIGluIHRoZSB3b29kcywKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSB2aW9sZW5jZSBvZiB0aGUgc3Rvcm1zLCBhZnRlciBsb3NpbmcgYSBjb25zaWRlcmFibGUgbnVtYmVyIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbWVuLCBkaXNwZXJzZSwgYW5kIHRha2UgcmVmdWdlIGFtb25nIHRoZSBuZWlnaGJvcmluZyBzdGF0ZXMuIDwvdHJhbnNsYXRpb24+"
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBiZWluZyBjb250ZW50ZWQsIGF0IHNvIHNldmVyZSBhIHNlYXNvbiwgdG8KICAgICAgICAgICAgICAgICAgICBkaXNwZXJzZSB0aGUgZ2F0aGVyaW5nIGZvZXMsIGFuZCBwcmV2ZW50IGFueSBuZXcgd2FyIGZyb20gYnJlYWtpbmcgb3V0LCBhbmQKICAgICAgICAgICAgICAgICAgICBiZWluZyBjb252aW5jZWQsIGFzIGZhciBhcyByZWFzb24gY291bGQgZm9yZXNlZSwgdGhhdCBubyB3YXIgb2YgY29uc2VxdWVuY2UKICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSBzZXQgb24gZm9vdCBpbiB0aGUgc3VtbWVyIGNhbXBhaWduLCBzdGF0aW9uZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cwogICAgICAgICAgICAgICAgICAgICAgICBUcmVib25pdXM8L25hbWU+LCB3aXRoIHRoZSB0d28gbGVnaW9ucyB3aGljaCBoZSBoYWQgd2l0aCBoaW0sIGluIHF1YXJ0ZXJzIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODMzNyIgcmVnPSIgICtPcmxlYW5zIFsxLjksNDcuOV0gKGluaGFiaXRlZCBwbGFjZSksIExvaXJldCwgQ2VudHJlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZW5hYnVtIDwvbmFtZT46IGFuZCBiZWluZyBpbmZvcm1lZCBieSBmcmVxdWVudCBlbWJhc3NpZXMgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4gKHdobyBleGNlZWQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiBpbiBtaWxpdGFyeQogICAgICAgICAgICAgICAgICAgIHByb3dlc3MpLCBhbmQgdGhlIG5laWdoYm9yaW5nIHN0YXRlcywgaGVhZGVkIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29ycmV1czwvbmFtZT4sIG9uZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21pdXM8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkF0cmViYXRpYW48L25hbWU+LCB3ZXJlIHJhaXNpbmcgYW4gYXJteSwgYW5kIGFzc2VtYmxpbmcgYXQgYSBnZW5lcmFsCiAgICAgICAgICAgICAgICAgICAgcmVuZGV6dm91cywgZGVzaWduaW5nIHdpdGggdGhlaXIgdW5pdGVkIGZvcmNlcyB0byBpbnZhZGUgdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXNzaW9uZXM8L25hbWU+LCB3aG8gd2VyZSBwdXQgdW5kZXIgdGhlIHBhdHJvbmFnZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+OiBhbmQgbW9yZW92ZXIsIGNvbnNpZGVyaW5nIHRoYXQgbm90IG9ubHkgaGlzCiAgICAgICAgICAgICAgICAgICAgaG9ub3IsIGJ1dCBoaXMgaW50ZXJlc3Qgd2FzIGNvbmNlcm5lZCwgdGhhdCBzdWNoIG9mIGhpcyBhbGxpZXMsIGFzIGRlc2VydmVkIHdlbGwKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcmVwdWJsaWMsIHNob3VsZCBzdWZmZXIgbm8gY2FsYW1pdHk7IGhlIGFnYWluIGRyYXdzIHRoZSBlbGV2ZW50aCBsZWdpb24KICAgICAgICAgICAgICAgICAgICBvdXQgb2YgcXVhcnRlcnMsIGFuZCB3cml0ZXMgYmVzaWRlcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIEZhYml1czwvbmFtZT4sIHRvIG1hcmNoIHdpdGgKICAgICAgICAgICAgICAgICAgICBoaXMgdHdvIGxlZ2lvbnMgdG8gdGhlIGNvdW50cnkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vlc3Npb25lczwvbmFtZT47IGFuZCBoZSBzZW5kcyB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRyZWJvbml1czwvbmFtZT4gZm9yIG9uZSBvZiBoaXMgdHdvIGxlZ2lvbnMuIFRodXMsIGFzIGZhcgogICAgICAgICAgICAgICAgICAgIGFzIHRoZSBjb252ZW5pZW5jZSBvZiB0aGUgcXVhcnRlcnMsIGFuZCB0aGUgbWFuYWdlbWVudCBvZiB0aGUgd2FyIGFkbWl0dGVkLCBoZQogICAgICAgICAgICAgICAgICAgIGxhaWQgdGhlIGJ1cmRlbiBvZiB0aGUgZXhwZWRpdGlvbiBvbiB0aGUgbGVnaW9ucyBieSB0dXJucywgd2l0aG91dCBhbnkKICAgICAgICAgICAgICAgICAgICBpbnRlcm1pc3Npb24gdG8gaGlzIG93biB0b2lscy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBiZWluZyBjb250ZW50ZWQsIGF0IHNvIHNldmVyZSBhIHNlYXNvbiwgdG8KICAgICAgICAgICAgICAgICAgICBkaXNwZXJzZSB0aGUgZ2F0aGVyaW5nIGZvZXMsIGFuZCBwcmV2ZW50IGFueSBuZXcgd2FyIGZyb20gYnJlYWtpbmcgb3V0LCBhbmQKICAgICAgICAgICAgICAgICAgICBiZWluZyBjb252aW5jZWQsIGFzIGZhciBhcyByZWFzb24gY291bGQgZm9yZXNlZSwgdGhhdCBubyB3YXIgb2YgY29uc2VxdWVuY2UKICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSBzZXQgb24gZm9vdCBpbiB0aGUgc3VtbWVyIGNhbXBhaWduLCBzdGF0aW9uZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cwogICAgICAgICAgICAgICAgICAgICAgICBUcmVib25pdXM8L25hbWU+LCB3aXRoIHRoZSB0d28gbGVnaW9ucyB3aGljaCBoZSBoYWQgd2l0aCBoaW0sIGluIHF1YXJ0ZXJzIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODMzNyIgcmVnPSIgICtPcmxlYW5zIFsxLjksNDcuOV0gKGluaGFiaXRlZCBwbGFjZSksIExvaXJldCwgQ2VudHJlLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5HZW5hYnVtIDwvbmFtZT46IGFuZCBiZWluZyBpbmZvcm1lZCBieSBmcmVxdWVudCBlbWJhc3NpZXMgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4gKHdobyBleGNlZWQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiBpbiBtaWxpdGFyeQogICAgICAgICAgICAgICAgICAgIHByb3dlc3MpLCBhbmQgdGhlIG5laWdoYm9yaW5nIHN0YXRlcywgaGVhZGVkIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29ycmV1czwvbmFtZT4sIG9uZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21pdXM8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkF0cmViYXRpYW48L25hbWU+LCB3ZXJlIHJhaXNpbmcgYW4gYXJteSwgYW5kIGFzc2VtYmxpbmcgYXQgYSBnZW5lcmFsCiAgICAgICAgICAgICAgICAgICAgcmVuZGV6dm91cywgZGVzaWduaW5nIHdpdGggdGhlaXIgdW5pdGVkIGZvcmNlcyB0byBpbnZhZGUgdGhlIHRlcnJpdG9yaWVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1ZXNzaW9uZXM8L25hbWU+LCB3aG8gd2VyZSBwdXQgdW5kZXIgdGhlIHBhdHJvbmFnZSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+OiBhbmQgbW9yZW92ZXIsIGNvbnNpZGVyaW5nIHRoYXQgbm90IG9ubHkgaGlzCiAgICAgICAgICAgICAgICAgICAgaG9ub3IsIGJ1dCBoaXMgaW50ZXJlc3Qgd2FzIGNvbmNlcm5lZCwgdGhhdCBzdWNoIG9mIGhpcyBhbGxpZXMsIGFzIGRlc2VydmVkIHdlbGwKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcmVwdWJsaWMsIHNob3VsZCBzdWZmZXIgbm8gY2FsYW1pdHk7IGhlIGFnYWluIGRyYXdzIHRoZSBlbGV2ZW50aCBsZWdpb24KICAgICAgICAgICAgICAgICAgICBvdXQgb2YgcXVhcnRlcnMsIGFuZCB3cml0ZXMgYmVzaWRlcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIEZhYml1czwvbmFtZT4sIHRvIG1hcmNoIHdpdGgKICAgICAgICAgICAgICAgICAgICBoaXMgdHdvIGxlZ2lvbnMgdG8gdGhlIGNvdW50cnkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3Vlc3Npb25lczwvbmFtZT47IGFuZCBoZSBzZW5kcyB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlRyZWJvbml1czwvbmFtZT4gZm9yIG9uZSBvZiBoaXMgdHdvIGxlZ2lvbnMuIFRodXMsIGFzIGZhcgogICAgICAgICAgICAgICAgICAgIGFzIHRoZSBjb252ZW5pZW5jZSBvZiB0aGUgcXVhcnRlcnMsIGFuZCB0aGUgbWFuYWdlbWVudCBvZiB0aGUgd2FyIGFkbWl0dGVkLCBoZQogICAgICAgICAgICAgICAgICAgIGxhaWQgdGhlIGJ1cmRlbiBvZiB0aGUgZXhwZWRpdGlvbiBvbiB0aGUgbGVnaW9ucyBieSB0dXJucywgd2l0aG91dCBhbnkKICAgICAgICAgICAgICAgICAgICBpbnRlcm1pc3Npb24gdG8gaGlzIG93biB0b2lscy4gPC90cmFuc2xhdGlvbj4="
translation['8.7'] = ""
translation['8.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FzIGNvbnZpbmNlZCBvZiB0aGUgdHJ1dGggb2YgdGhpcyBhY2NvdW50CiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgY29uY3VycmluZyB0ZXN0aW1vbnkgb2Ygc2V2ZXJhbCBwZXJzb25zLCBhbmQgcGVyY2VpdmVkIHRoYXQgdGhlIHBsYW5zCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2VyZSBwcm9wb3NlZCB3ZXJlIGZ1bGwgb2YgcHJ1ZGVuY2UsIGFuZCB2ZXJ5IHVubGlrZSB0aGUgcmFzaCByZXNvbHZlcyBvZgogICAgICAgICAgICAgICAgICAgIGEgYmFyYmFyb3VzIHBlb3BsZSwgaGUgY29uc2lkZXJlZCBpdCBpbmN1bWJlbnQgb24gaGltIHRvIHVzZSBldmVyeSBleGVydGlvbiwgaW4KICAgICAgICAgICAgICAgICAgICBvcmRlciB0aGF0IHRoZSBlbmVteSBtaWdodCBkZXNwaXNlIGhpcyBzbWFsbCBmb3JjZSBhbmQgY29tZSB0byBhbiBhY3Rpb24uIEZvciBoZQogICAgICAgICAgICAgICAgICAgIGhhZCB0aHJlZSB2ZXRlcmFuIGxlZ2lvbnMgb2YgZGlzdGluZ3Vpc2hlZCB2YWxvciwgdGhlIHNldmVudGgsIGVpZ2h0aCBhbmQgbmludGguCiAgICAgICAgICAgICAgICAgICAgVGhlIGVsZXZlbnRoIGNvbnNpc3RlZCBvZiBjaG9zZW4geW91dGggb2YgZ3JlYXQgaG9wZXMsIHdobyBoYWQgc2VydmVkIGVpZ2h0CiAgICAgICAgICAgICAgICAgICAgY2FtcGFpZ25zLCBidXQgd2hvLCBjb21wYXJlZCB3aXRoIHRoZSBvdGhlcnMsIGhhZCBub3QgeWV0IGFjcXVpcmVkIGFueSBncmVhdAogICAgICAgICAgICAgICAgICAgIHJlcHV0YXRpb24gZm9yIGV4cGVyaWVuY2UgYW5kIHZhbG9yLiBDYWxsaW5nIHRoZXJlZm9yZSBhIGNvdW5jaWwsIGFuZCBsYXlpbmcKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgaXQgdGhlIGludGVsbGlnZW5jZSB3aGljaCBoZSBoYWQgcmVjZWl2ZWQsIGhlIGVuY291cmFnZWQgaGlzIHNvbGRpZXJzLiBJbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIGlmIHBvc3NpYmxlIHRvIGVudGljZSB0aGUgZW5lbXkgdG8gYW4gZW5nYWdlbWVudCBieSB0aGUgYXBwZWFyYW5jZSBvZiBvbmx5CiAgICAgICAgICAgICAgICAgICAgdGhyZWUgbGVnaW9ucywgaGUgcmFuZ2VkIGhpcyBhcm15IGluIHRoZSBmb2xsb3dpbmcgbWFubmVyLCB0aGF0IHRoZSBzZXZlbnRoLAogICAgICAgICAgICAgICAgICAgIGVpZ2h0aCwgYW5kIG5pbnRoIGxlZ2lvbnMgc2hvdWxkIG1hcmNoIGJlZm9yZSBhbGwgdGhlIGJhZ2dhZ2U7IHRoYXQgdGhlbiB0aGUKICAgICAgICAgICAgICAgICAgICBlbGV2ZW50aCBzaG91bGQgYnJpbmcgdXAgdGhlIHJlYXIgb2YgdGhlIHdob2xlIHRyYWluIG9mIGJhZ2dhZ2UgKHdoaWNoIGhvd2V2ZXIKICAgICAgICAgICAgICAgICAgICB3YXMgYnV0IHNtYWxsLCBhcyBpcyB1c3VhbCBvbiBzdWNoIGV4cGVkaXRpb25zKSwgc28gdGhhdCB0aGUgZW5lbXkgY291bGQgbm90IGdldAogICAgICAgICAgICAgICAgICAgIGEgc2lnaHQgb2YgYSBncmVhdGVyIG51bWJlciB0aGFuIHRoZXkgdGhlbXNlbHZlcyB3ZXJlIHdpbGxpbmcgdG8gZW5jb3VudGVyLiBCeQogICAgICAgICAgICAgICAgICAgIHRoaXMgZGlzcG9zaXRpb24gaGUgZm9ybWVkIGhpcyBhcm15IGFsbW9zdCBpbnRvIGEgc3F1YXJlLCBhbmQgYnJvdWdodCB0aGVtCiAgICAgICAgICAgICAgICAgICAgd2l0aGluIHNpZ2h0IG9mIHRoZSBlbmVteSBzb29uZXIgdGhhbiB3YXMgYW50aWNpcGF0ZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiB3YXMgY29udmluY2VkIG9mIHRoZSB0cnV0aCBvZiB0aGlzIGFjY291bnQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBjb25jdXJyaW5nIHRlc3RpbW9ueSBvZiBzZXZlcmFsIHBlcnNvbnMsIGFuZCBwZXJjZWl2ZWQgdGhhdCB0aGUgcGxhbnMKICAgICAgICAgICAgICAgICAgICB3aGljaCB3ZXJlIHByb3Bvc2VkIHdlcmUgZnVsbCBvZiBwcnVkZW5jZSwgYW5kIHZlcnkgdW5saWtlIHRoZSByYXNoIHJlc29sdmVzIG9mCiAgICAgICAgICAgICAgICAgICAgYSBiYXJiYXJvdXMgcGVvcGxlLCBoZSBjb25zaWRlcmVkIGl0IGluY3VtYmVudCBvbiBoaW0gdG8gdXNlIGV2ZXJ5IGV4ZXJ0aW9uLCBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRoYXQgdGhlIGVuZW15IG1pZ2h0IGRlc3Bpc2UgaGlzIHNtYWxsIGZvcmNlIGFuZCBjb21lIHRvIGFuIGFjdGlvbi4gRm9yIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIHRocmVlIHZldGVyYW4gbGVnaW9ucyBvZiBkaXN0aW5ndWlzaGVkIHZhbG9yLCB0aGUgc2V2ZW50aCwgZWlnaHRoIGFuZCBuaW50aC4KICAgICAgICAgICAgICAgICAgICBUaGUgZWxldmVudGggY29uc2lzdGVkIG9mIGNob3NlbiB5b3V0aCBvZiBncmVhdCBob3Blcywgd2hvIGhhZCBzZXJ2ZWQgZWlnaHQKICAgICAgICAgICAgICAgICAgICBjYW1wYWlnbnMsIGJ1dCB3aG8sIGNvbXBhcmVkIHdpdGggdGhlIG90aGVycywgaGFkIG5vdCB5ZXQgYWNxdWlyZWQgYW55IGdyZWF0CiAgICAgICAgICAgICAgICAgICAgcmVwdXRhdGlvbiBmb3IgZXhwZXJpZW5jZSBhbmQgdmFsb3IuIENhbGxpbmcgdGhlcmVmb3JlIGEgY291bmNpbCwgYW5kIGxheWluZwogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBpdCB0aGUgaW50ZWxsaWdlbmNlIHdoaWNoIGhlIGhhZCByZWNlaXZlZCwgaGUgZW5jb3VyYWdlZCBoaXMgc29sZGllcnMuIEluCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgaWYgcG9zc2libGUgdG8gZW50aWNlIHRoZSBlbmVteSB0byBhbiBlbmdhZ2VtZW50IGJ5IHRoZSBhcHBlYXJhbmNlIG9mIG9ubHkKICAgICAgICAgICAgICAgICAgICB0aHJlZSBsZWdpb25zLCBoZSByYW5nZWQgaGlzIGFybXkgaW4gdGhlIGZvbGxvd2luZyBtYW5uZXIsIHRoYXQgdGhlIHNldmVudGgsCiAgICAgICAgICAgICAgICAgICAgZWlnaHRoLCBhbmQgbmludGggbGVnaW9ucyBzaG91bGQgbWFyY2ggYmVmb3JlIGFsbCB0aGUgYmFnZ2FnZTsgdGhhdCB0aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIGVsZXZlbnRoIHNob3VsZCBicmluZyB1cCB0aGUgcmVhciBvZiB0aGUgd2hvbGUgdHJhaW4gb2YgYmFnZ2FnZSAod2hpY2ggaG93ZXZlcgogICAgICAgICAgICAgICAgICAgIHdhcyBidXQgc21hbGwsIGFzIGlzIHVzdWFsIG9uIHN1Y2ggZXhwZWRpdGlvbnMpLCBzbyB0aGF0IHRoZSBlbmVteSBjb3VsZCBub3QgZ2V0CiAgICAgICAgICAgICAgICAgICAgYSBzaWdodCBvZiBhIGdyZWF0ZXIgbnVtYmVyIHRoYW4gdGhleSB0aGVtc2VsdmVzIHdlcmUgd2lsbGluZyB0byBlbmNvdW50ZXIuIEJ5CiAgICAgICAgICAgICAgICAgICAgdGhpcyBkaXNwb3NpdGlvbiBoZSBmb3JtZWQgaGlzIGFybXkgYWxtb3N0IGludG8gYSBzcXVhcmUsIGFuZCBicm91Z2h0IHRoZW0KICAgICAgICAgICAgICAgICAgICB3aXRoaW4gc2lnaHQgb2YgdGhlIGVuZW15IHNvb25lciB0aGFuIHdhcyBhbnRpY2lwYXRlZC4gPC90cmFuc2xhdGlvbj4="
translation['8.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgd2hvc2UgYm9sZCByZXNvbHV0aW9ucyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIHJlcG9ydGVkIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgc2F3IHRoZSBsZWdpb25zIGFkdmFuY2Ugd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgcmVndWxhciBtb3Rpb24sIGRyYXduIHVwIGluIGJhdHRsZSBhcnJheTsgZWl0aGVyIGZyb20gdGhlIGRhbmdlciBvZiBhbgogICAgICAgICAgICAgICAgICAgIGVuZ2FnZW1lbnQsIG9yIG91ciBzdWRkZW4gYXBwcm9hY2gsIG9yIHdpdGggdGhlIGRlc2lnbiBvZiB3YXRjaGluZyBvdXIKICAgICAgICAgICAgICAgICAgICBtb3ZlbWVudHMsIHRoZXkgZHJldyB1cCB0aGVpciBmb3JjZXMgYmVmb3JlIHRoZSBjYW1wLCBhbmQgZGlkIG5vdCBxdWl0IHRoZQogICAgICAgICAgICAgICAgICAgIHJpc2luZyBncm91bmQuIFRob3VnaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2lzaGVkIHRvIGJyaW5nIHRoZW0gdG8KICAgICAgICAgICAgICAgICAgICBiYXR0bGUsIHlldCBiZWluZyBzdXJwcmlzZWQgdG8gc2VlIHNvIHZhc3QgYSBob3N0IG9mIHRoZSBlbmVteSwgaGUgZW5jYW1wZWQKICAgICAgICAgICAgICAgICAgICBvcHBvc2l0ZSB0byB0aGVtLCB3aXRoIGEgdmFsbGV5IGJldHdlZW4gdGhlbSwgZGVlcCByYXRoZXIgdGhhbiBleHRlbnNpdmUuIEhlCiAgICAgICAgICAgICAgICAgICAgb3JkZXJlZCBoaXMgY2FtcCB0byBiZSBmb3J0aWZpZWQgd2l0aCBhIHJhbXBhcnQgdHdlbHZlIGZlZXQgaGlnaCwgd2l0aAogICAgICAgICAgICAgICAgICAgIGJyZWFzdHdvcmtzIGJ1aWx0IG9uIGl0IHByb3BvcnRpb25lZCB0byBpdHMgaGVpZ2h0IGFuZCB0d28gdHJlbmNoZXMsIGVhY2gKICAgICAgICAgICAgICAgICAgICBmaWZ0ZWVuIGZlZXQgYnJvYWQsIHdpdGggcGVycGVuZGljdWxhciBzaWRlcyB0byBiZSBzdW5rOiBsaWtld2lzZSBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgdHVycmV0cywgdGhyZWUgc3RvcmllcyBoaWdoLCB0byBiZSByYWlzZWQsIHdpdGggYSBjb21tdW5pY2F0aW9uIHRvIGVhY2ggb3RoZXIgYnkKICAgICAgICAgICAgICAgICAgICBnYWxsZXJpZXMgbGFpZCBhY3Jvc3MgYW5kIGNvdmVyZWQgb3Zlcjsgd2hpY2ggc2hvdWxkIGJlIGd1YXJkZWQgaW4gZnJvbnQgYnkKICAgICAgICAgICAgICAgICAgICBzbWFsbCBwYXJhcGV0cyBvZiBvc2llcnM7IHRoYXQgdGhlIGVuZW15IG1pZ2h0IGJlIHJlcHVsc2VkIGJ5IHR3byByb3dzIG9mCiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMuIFRoZSBvbmUgb2Ygd2hvbSwgYmVpbmcgbW9yZSBzZWN1cmUgZnJvbSBkYW5nZXIgYnkgdGhlaXIgaGVpZ2h0IG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgdGhlaXIgZGFydHMgd2l0aCBtb3JlIGRhcmluZyBhbmQgdG8gYSBncmVhdGVyIGRpc3RhbmNlOyB0aGUgb3RoZXIgd2hpY2gKICAgICAgICAgICAgICAgICAgICB3YXMgbmVhcmVyIHRoZSBlbmVteSwgYmVpbmcgc3RhdGlvbmVkIG9uIHRoZSByYW1wYXJ0LCB3b3VsZCBiZSBwcm90ZWN0ZWQgYnkKICAgICAgICAgICAgICAgICAgICB0aGVpciBnYWxsZXJpZXMgZnJvbSBkYXJ0cyBmYWxsaW5nIG9uIHRoZWlyIGhlYWRzLiBBdCB0aGUgZW50cmFuY2UgaGUgZXJlY3RlZAogICAgICAgICAgICAgICAgICAgIGdhdGVzIGFuZCB0dXJyZXRzIG9mIGEgY29uc2lkZXJhYmxlIGhlaWdodC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sIHdob3NlIGJvbGQgcmVzb2x1dGlvbnMgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICByZXBvcnRlZCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHNhdyB0aGUgbGVnaW9ucyBhZHZhbmNlIHdpdGggYQogICAgICAgICAgICAgICAgICAgIHJlZ3VsYXIgbW90aW9uLCBkcmF3biB1cCBpbiBiYXR0bGUgYXJyYXk7IGVpdGhlciBmcm9tIHRoZSBkYW5nZXIgb2YgYW4KICAgICAgICAgICAgICAgICAgICBlbmdhZ2VtZW50LCBvciBvdXIgc3VkZGVuIGFwcHJvYWNoLCBvciB3aXRoIHRoZSBkZXNpZ24gb2Ygd2F0Y2hpbmcgb3VyCiAgICAgICAgICAgICAgICAgICAgbW92ZW1lbnRzLCB0aGV5IGRyZXcgdXAgdGhlaXIgZm9yY2VzIGJlZm9yZSB0aGUgY2FtcCwgYW5kIGRpZCBub3QgcXVpdCB0aGUKICAgICAgICAgICAgICAgICAgICByaXNpbmcgZ3JvdW5kLiBUaG91Z2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdpc2hlZCB0byBicmluZyB0aGVtIHRvCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlLCB5ZXQgYmVpbmcgc3VycHJpc2VkIHRvIHNlZSBzbyB2YXN0IGEgaG9zdCBvZiB0aGUgZW5lbXksIGhlIGVuY2FtcGVkCiAgICAgICAgICAgICAgICAgICAgb3Bwb3NpdGUgdG8gdGhlbSwgd2l0aCBhIHZhbGxleSBiZXR3ZWVuIHRoZW0sIGRlZXAgcmF0aGVyIHRoYW4gZXh0ZW5zaXZlLiBIZQogICAgICAgICAgICAgICAgICAgIG9yZGVyZWQgaGlzIGNhbXAgdG8gYmUgZm9ydGlmaWVkIHdpdGggYSByYW1wYXJ0IHR3ZWx2ZSBmZWV0IGhpZ2gsIHdpdGgKICAgICAgICAgICAgICAgICAgICBicmVhc3R3b3JrcyBidWlsdCBvbiBpdCBwcm9wb3J0aW9uZWQgdG8gaXRzIGhlaWdodCBhbmQgdHdvIHRyZW5jaGVzLCBlYWNoCiAgICAgICAgICAgICAgICAgICAgZmlmdGVlbiBmZWV0IGJyb2FkLCB3aXRoIHBlcnBlbmRpY3VsYXIgc2lkZXMgdG8gYmUgc3VuazogbGlrZXdpc2Ugc2V2ZXJhbAogICAgICAgICAgICAgICAgICAgIHR1cnJldHMsIHRocmVlIHN0b3JpZXMgaGlnaCwgdG8gYmUgcmFpc2VkLCB3aXRoIGEgY29tbXVuaWNhdGlvbiB0byBlYWNoIG90aGVyIGJ5CiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyaWVzIGxhaWQgYWNyb3NzIGFuZCBjb3ZlcmVkIG92ZXI7IHdoaWNoIHNob3VsZCBiZSBndWFyZGVkIGluIGZyb250IGJ5CiAgICAgICAgICAgICAgICAgICAgc21hbGwgcGFyYXBldHMgb2Ygb3NpZXJzOyB0aGF0IHRoZSBlbmVteSBtaWdodCBiZSByZXB1bHNlZCBieSB0d28gcm93cyBvZgogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzLiBUaGUgb25lIG9mIHdob20sIGJlaW5nIG1vcmUgc2VjdXJlIGZyb20gZGFuZ2VyIGJ5IHRoZWlyIGhlaWdodCBtaWdodAogICAgICAgICAgICAgICAgICAgIHRocm93IHRoZWlyIGRhcnRzIHdpdGggbW9yZSBkYXJpbmcgYW5kIHRvIGEgZ3JlYXRlciBkaXN0YW5jZTsgdGhlIG90aGVyIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd2FzIG5lYXJlciB0aGUgZW5lbXksIGJlaW5nIHN0YXRpb25lZCBvbiB0aGUgcmFtcGFydCwgd291bGQgYmUgcHJvdGVjdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZ2FsbGVyaWVzIGZyb20gZGFydHMgZmFsbGluZyBvbiB0aGVpciBoZWFkcy4gQXQgdGhlIGVudHJhbmNlIGhlIGVyZWN0ZWQKICAgICAgICAgICAgICAgICAgICBnYXRlcyBhbmQgdHVycmV0cyBvZiBhIGNvbnNpZGVyYWJsZSBoZWlnaHQuIDwvdHJhbnNsYXRpb24+"
translation['8.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQgYSBkb3VibGUgZGVzaWduIGluIHRoaXMgZm9ydGlmaWNhdGlvbjsgZm9yIGhlCiAgICAgICAgICAgICAgICAgICAgYm90aCBob3BlZCB0aGF0IHRoZSBzdHJlbmd0aCBvZiBoaXMgd29ya3MsIGFuZCBoaXMgW2FwcGFyZW50XSBmZWFycyB3b3VsZCByYWlzZQogICAgICAgICAgICAgICAgICAgIGNvbmZpZGVuY2UgaW4gdGhlIGJhcmJhcmlhbnM7IGFuZCB3aGVuIHRoZXJlIHNob3VsZCBiZSBvY2Nhc2lvbiB0byBtYWtlIGEKICAgICAgICAgICAgICAgICAgICBkaXN0YW50IGV4Y3Vyc2lvbiB0byBnZXQgZm9yYWdlIG9yIGNvcm4sIGhlIHNhdyB0aGF0IGhpcyBjYW1wIHdvdWxkIGJlIHNlY3VyZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGUgd29ya3Mgd2l0aCBhIHZlcnkgc21hbGwgZm9yY2UuIEluIHRoZSBtZWFuIHRpbWUgdGhlcmUgd2VyZSBmcmVxdWVudAogICAgICAgICAgICAgICAgICAgIHNraXJtaXNoZXMgYWNyb3NzIHRoZSBtYXJzaCwgYSBmZXcgb24gYm90aCBzaWRlcyBzYWxseWluZyBvdXQgYmV0d2VlbiB0aGUgdHdvCiAgICAgICAgICAgICAgICAgICAgY2FtcHMuIFNvbWV0aW1lcywgaG93ZXZlciwgb3VyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsbGljPC9uYW1lPiBvciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuPC9uYW1lPiBhdXhpbGlhcmllcyBjcm9zc2VkIHRoZSBtYXJzaCwgYW5kIGZ1cmlvdXNseSBwdXJzdWVkIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15OyBvciBvbiB0aGUgb3RoZXIgaGFuZCB0aGUgZW5lbXkgcGFzc2VkIGl0IGFuZCBiZWF0IGJhY2sgb3VyIG1lbi4gTW9yZW92ZXIKICAgICAgICAgICAgICAgICAgICB0aGVyZSBoYXBwZW5lZCBpbiB0aGUgY291cnNlIG9mIG91ciBkYWlseSBmb3JhZ2luZywgd2hhdCBtdXN0IG9mIG5lY2Vzc2l0eQogICAgICAgICAgICAgICAgICAgIGhhcHBlbiwgd2hlbiBjb3JuIGlzIHRvIGJlIGNvbGxlY3RlZCBieSBhIGZldyBzY2F0dGVyZWQgbWVuIG91dCBvZiBwcml2YXRlCiAgICAgICAgICAgICAgICAgICAgaG91c2VzLCB0aGF0IG91ciBmb3JhZ2VycyBkaXNwZXJzaW5nIGluIGFuIGludHJpY2F0ZSBjb3VudHJ5IHdlcmUgc3Vycm91bmRlZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBlbmVteTsgYnkgd2hpY2gsIHRob3VnaCB3ZSBzdWZmZXJlZCBidXQgYW4gaW5jb25zaWRlcmFibGUgbG9zcyBvZiBjYXR0bGUgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VydmFudHMsIHlldCBpdCByYWlzZWQgZm9vbGlzaCBob3BlcyBpbiB0aGUgYmFyYmFyaWFuczsgYnV0IG1vcmUgZXNwZWNpYWxseSwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29taXVzPC9uYW1lPiwgd2hvIEkgc2FpZCBoYWQgZ29uZSB0byBnZXQgYWlkIGZyb20gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgcmV0dXJuZWQgd2l0aCBzb21lIGNhdmFscnksIGFuZCB0aG91Z2ggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiB3ZXJlIG9ubHkgNTAwLCB5ZXQgdGhlIGJhcmJhcmlhbnMgd2VyZQogICAgICAgICAgICAgICAgICAgIGVsYXRlZCBieSB0aGVpciBhcnJpdmFsLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBhIGRvdWJsZSBkZXNpZ24gaW4gdGhpcyBmb3J0aWZpY2F0aW9uOyBmb3IgaGUKICAgICAgICAgICAgICAgICAgICBib3RoIGhvcGVkIHRoYXQgdGhlIHN0cmVuZ3RoIG9mIGhpcyB3b3JrcywgYW5kIGhpcyBbYXBwYXJlbnRdIGZlYXJzIHdvdWxkIHJhaXNlCiAgICAgICAgICAgICAgICAgICAgY29uZmlkZW5jZSBpbiB0aGUgYmFyYmFyaWFuczsgYW5kIHdoZW4gdGhlcmUgc2hvdWxkIGJlIG9jY2FzaW9uIHRvIG1ha2UgYQogICAgICAgICAgICAgICAgICAgIGRpc3RhbnQgZXhjdXJzaW9uIHRvIGdldCBmb3JhZ2Ugb3IgY29ybiwgaGUgc2F3IHRoYXQgaGlzIGNhbXAgd291bGQgYmUgc2VjdXJlZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSB3b3JrcyB3aXRoIGEgdmVyeSBzbWFsbCBmb3JjZS4gSW4gdGhlIG1lYW4gdGltZSB0aGVyZSB3ZXJlIGZyZXF1ZW50CiAgICAgICAgICAgICAgICAgICAgc2tpcm1pc2hlcyBhY3Jvc3MgdGhlIG1hcnNoLCBhIGZldyBvbiBib3RoIHNpZGVzIHNhbGx5aW5nIG91dCBiZXR3ZWVuIHRoZSB0d28KICAgICAgICAgICAgICAgICAgICBjYW1wcy4gU29tZXRpbWVzLCBob3dldmVyLCBvdXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxsaWM8L25hbWU+IG9yIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW48L25hbWU+IGF1eGlsaWFyaWVzIGNyb3NzZWQgdGhlIG1hcnNoLCBhbmQgZnVyaW91c2x5IHB1cnN1ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXk7IG9yIG9uIHRoZSBvdGhlciBoYW5kIHRoZSBlbmVteSBwYXNzZWQgaXQgYW5kIGJlYXQgYmFjayBvdXIgbWVuLiBNb3Jlb3ZlcgogICAgICAgICAgICAgICAgICAgIHRoZXJlIGhhcHBlbmVkIGluIHRoZSBjb3Vyc2Ugb2Ygb3VyIGRhaWx5IGZvcmFnaW5nLCB3aGF0IG11c3Qgb2YgbmVjZXNzaXR5CiAgICAgICAgICAgICAgICAgICAgaGFwcGVuLCB3aGVuIGNvcm4gaXMgdG8gYmUgY29sbGVjdGVkIGJ5IGEgZmV3IHNjYXR0ZXJlZCBtZW4gb3V0IG9mIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBob3VzZXMsIHRoYXQgb3VyIGZvcmFnZXJzIGRpc3BlcnNpbmcgaW4gYW4gaW50cmljYXRlIGNvdW50cnkgd2VyZSBzdXJyb3VuZGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15OyBieSB3aGljaCwgdGhvdWdoIHdlIHN1ZmZlcmVkIGJ1dCBhbiBpbmNvbnNpZGVyYWJsZSBsb3NzIG9mIGNhdHRsZSBhbmQKICAgICAgICAgICAgICAgICAgICBzZXJ2YW50cywgeWV0IGl0IHJhaXNlZCBmb29saXNoIGhvcGVzIGluIHRoZSBiYXJiYXJpYW5zOyBidXQgbW9yZSBlc3BlY2lhbGx5LAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21pdXM8L25hbWU+LCB3aG8gSSBzYWlkIGhhZCBnb25lIHRvIGdldCBhaWQgZnJvbSB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCByZXR1cm5lZCB3aXRoIHNvbWUgY2F2YWxyeSwgYW5kIHRob3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+IHdlcmUgb25seSA1MDAsIHlldCB0aGUgYmFyYmFyaWFucyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZWxhdGVkIGJ5IHRoZWlyIGFycml2YWwuIDwvdHJhbnNsYXRpb24+"
translation['8.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb2JzZXJ2aW5nIHRoYXQgdGhlIGVuZW15IGtlcHQgZm9yIHNldmVyYWwgZGF5cwogICAgICAgICAgICAgICAgICAgIHdpdGhpbiB0aGVpciBjYW1wLCB3aGljaCB3YXMgd2VsbCBzZWN1cmVkIGJ5IGEgbW9yYXNzIGFuZCBpdHMgbmF0dXJhbCBzaXR1YXRpb24sCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgaXQgY291bGQgbm90IGJlIGFzc2F1bHRlZCB3aXRob3V0IGEgZGFuZ2Vyb3VzIGVuZ2FnZW1lbnQsIG5vciB0aGUgcGxhY2UKICAgICAgICAgICAgICAgICAgICBpbmNsb3NlZCB3aXRoIGxpbmVzIHdpdGhvdXQgYW4gYWRkaXRpb24gdG8gaGlzIGFybXksIHdyb3RlIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+VHJlYm9uaXVzPC9uYW1lPiB0byBzZW5kIHdpdGggYWxsIGRpc3BhdGNoIGZvciB0aGUgdGhpcnRlZW50aCBsZWdpb24gd2hpY2gKICAgICAgICAgICAgICAgICAgICB3YXMgaW4gd2ludGVyIHF1YXJ0ZXJzIGFtb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJpdHVyaWdlczwvbmFtZT4gdW5kZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaXR1cwogICAgICAgICAgICAgICAgICAgICAgICBTZXh0aXVzPC9uYW1lPiwgb25lIG9mIGhpcyBsaWV1dGVuYW50czsgYW5kIHRoZW4gdG8gY29tZSB0byBoaW0gYnkgZm9yY2VkCiAgICAgICAgICAgICAgICAgICAgbWFyY2hlcyB3aXRoIHRoZSB0aHJlZSBsZWdpb25zLiBIZSBoaW1zZWxmIHNlbnQgdGhlIGNhdmFscnkgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5SZW1pPC9uYW1lPiwgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM0MyIgcmVnPSIgICtMYW5ncmVzIFs1LjMzMyw0Ny44ODNdIChpbmhhYml0ZWQgcGxhY2UpLCBIYXV0ZS1NYXJuZSwgQ2hhbXBhZ25lLUFyZGVubmUsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkxpbmdvbmVzIDwvbmFtZT4sIGFuZCBvdGhlciBzdGF0ZXMsIGZyb20gd2hvbSBoZSBoYWQgcmVxdWlyZWQgYSB2YXN0CiAgICAgICAgICAgICAgICAgICAgbnVtYmVyLCB0byBndWFyZCBoaXMgZm9yYWdpbmcgcGFydGllcywgYW5kIHRvIHN1cHBvcnQgdGhlbSBpbiBjYXNlIG9mIGFueSBzdWRkZW4KICAgICAgICAgICAgICAgICAgICBhdHRhY2sgb2YgdGhlIGVuZW15LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBvYnNlcnZpbmcgdGhhdCB0aGUgZW5lbXkga2VwdCBmb3Igc2V2ZXJhbCBkYXlzCiAgICAgICAgICAgICAgICAgICAgd2l0aGluIHRoZWlyIGNhbXAsIHdoaWNoIHdhcyB3ZWxsIHNlY3VyZWQgYnkgYSBtb3Jhc3MgYW5kIGl0cyBuYXR1cmFsIHNpdHVhdGlvbiwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBpdCBjb3VsZCBub3QgYmUgYXNzYXVsdGVkIHdpdGhvdXQgYSBkYW5nZXJvdXMgZW5nYWdlbWVudCwgbm9yIHRoZSBwbGFjZQogICAgICAgICAgICAgICAgICAgIGluY2xvc2VkIHdpdGggbGluZXMgd2l0aG91dCBhbiBhZGRpdGlvbiB0byBoaXMgYXJteSwgd3JvdGUgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5UcmVib25pdXM8L25hbWU+IHRvIHNlbmQgd2l0aCBhbGwgZGlzcGF0Y2ggZm9yIHRoZSB0aGlydGVlbnRoIGxlZ2lvbiB3aGljaAogICAgICAgICAgICAgICAgICAgIHdhcyBpbiB3aW50ZXIgcXVhcnRlcnMgYW1vbmcgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qml0dXJpZ2VzPC9uYW1lPiB1bmRlciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRpdHVzCiAgICAgICAgICAgICAgICAgICAgICAgIFNleHRpdXM8L25hbWU+LCBvbmUgb2YgaGlzIGxpZXV0ZW5hbnRzOyBhbmQgdGhlbiB0byBjb21lIHRvIGhpbSBieSBmb3JjZWQKICAgICAgICAgICAgICAgICAgICBtYXJjaGVzIHdpdGggdGhlIHRocmVlIGxlZ2lvbnMuIEhlIGhpbXNlbGYgc2VudCB0aGUgY2F2YWxyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+LCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzQzIiByZWc9IiAgK0xhbmdyZXMgWzUuMzMzLDQ3Ljg4M10gKGluaGFiaXRlZCBwbGFjZSksIEhhdXRlLU1hcm5lLCBDaGFtcGFnbmUtQXJkZW5uZSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TGluZ29uZXMgPC9uYW1lPiwgYW5kIG90aGVyIHN0YXRlcywgZnJvbSB3aG9tIGhlIGhhZCByZXF1aXJlZCBhIHZhc3QKICAgICAgICAgICAgICAgICAgICBudW1iZXIsIHRvIGd1YXJkIGhpcyBmb3JhZ2luZyBwYXJ0aWVzLCBhbmQgdG8gc3VwcG9ydCB0aGVtIGluIGNhc2Ugb2YgYW55IHN1ZGRlbgogICAgICAgICAgICAgICAgICAgIGF0dGFjayBvZiB0aGUgZW5lbXkuIDwvdHJhbnNsYXRpb24+"
translation['8.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFzIHRoaXMgY29udGludWVkIGZvciBzZXZlcmFsIGRheXMsIGFuZCB0aGVpciB2aWdpbGFuY2Ugd2FzIHJlbGF4ZWQgYnkgY3VzdG9tIChhbgogICAgICAgICAgICAgICAgICAgIGVmZmVjdCB3aGljaCBpcyBnZW5lcmFsbHkgcHJvZHVjZWQgYnkgdGltZSksIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4sIGhhdmluZwogICAgICAgICAgICAgICAgICAgIG1hZGUgdGhlbXNlbHZlcyBhY3F1YWludGVkIHdpdGggdGhlIGRhaWx5IHN0YXRpb25zIG9mIG91ciBob3JzZSwgbGllIGluIGFtYnVzaAogICAgICAgICAgICAgICAgICAgIHdpdGggYSBzZWxlY3QgYm9keSBvZiBmb290IGluIGEgcGxhY2UgY292ZXJlZCB3aXRoIHdvb2RzOyB0byBpdCB0aGV5IHNlbnQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBob3JzZSB0aGUgbmV4dCBkYXksIHdobyB3ZXJlIGZpcnN0IHRvIGRlY295IG91ciBtZW4gaW50byB0aGUgYW1idXNjYWRlLCBhbmQgdGhlbgogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhleSB3ZXJlIHN1cnJvdW5kZWQsIHRvIGF0dGFjayB0aGVtLiBJdCB3YXMgdGhlIGxvdCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+IHRvIGZhbGwgaW50byB0aGlzIHNuYXJlLCB0byB3aG9tIHRoYXQgZGF5IGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgYWxsb3R0ZWQgdG8gcGVyZm9ybSB0aGlzIGR1dHk7IGZvciwgaGF2aW5nIHN1ZGRlbmx5IGdvdCBzaWdodCBvZiB0aGUgZW5lbXkncwogICAgICAgICAgICAgICAgICAgIGNhdmFscnksIGFuZCBkZXNwaXNpbmcgdGhlaXIgd2Vha25lc3MsIGluIGNvbnNlcXVlbmNlIG9mIHRoZWlyIHN1cGVyaW9yIG51bWJlcnMsCiAgICAgICAgICAgICAgICAgICAgdGhleSBwdXJzdWVkIHRoZW0gdG9vIGVhZ2VybHksIGFuZCB3ZXJlIHN1cnJvdW5kZWQgb24gZXZlcnkgc2lkZSBieSB0aGUgZm9vdC4KICAgICAgICAgICAgICAgICAgICBCZWluZywgYnkgdGhpcyBtZWFucyB0aHJvd24gaW50byBkaXNvcmRlciB0aGV5IHJldHVybmVkIHdpdGggbW9yZSBwcmVjaXBpdGF0aW9uCiAgICAgICAgICAgICAgICAgICAgdGhhbiBpcyB1c3VhbCBpbiBjYXZhbHJ5IGFjdGlvbnMsIHdpdGggdGhlIGxvc3Mgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5WZXJ0aXNjdXM8L25hbWU+IHRoZQogICAgICAgICAgICAgICAgICAgIGdvdmVybm9yIG9mIHRoZWlyIHN0YXRlLCBhbmQgdGhlIGdlbmVyYWwgb2YgdGhlaXIgaG9yc2UsIHdobywgdGhvdWdoIHNjYXJjZWx5CiAgICAgICAgICAgICAgICAgICAgYWJsZSB0byBzaXQgb24gaG9yc2ViYWNrIHRocm91Z2ggeWVhcnMsIG5laXRoZXIsIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgY3VzdG9tCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4sIHBsZWFkZWQgaGlzIGFnZSBpbiBleGN1c2UgZm9yIG5vdAogICAgICAgICAgICAgICAgICAgIGFjY2VwdGluZyB0aGUgY29tbWFuZCwgbm9yIHdvdWxkIGhlIHN1ZmZlciB0aGVtIHRvIGZpZ2h0IHdpdGhvdXQgaGltLiBUaGUKICAgICAgICAgICAgICAgICAgICBzcGlyaXRzIG9mIHRoZSBiYXJiYXJpYW5zIHdlcmUgcHVmZmVkIHVwLCBhbmQgaW5mbGF0ZWQgYXQgdGhlIHN1Y2Nlc3Mgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgIGJhdHRsZSwgaW4ga2lsbGluZyB0aGUgcHJpbmNlLCBhbmQgZ2VuZXJhbCBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJlbWk8L25hbWU+OyBhbmQgb3VyIG1lbiB3ZXJlIHRhdWdodCBieSB0aGlzIGxvc3MsIHRvIGV4YW1pbmUgdGhlIGNvdW50cnksCiAgICAgICAgICAgICAgICAgICAgYW5kIHBvc3QgdGhlaXIgZ3VhcmRzIHdpdGggbW9yZSBjYXV0aW9uLCBhbmQgdG8gYmUgbW9yZSBtb2RlcmF0ZSBpbiBwdXJzdWluZyBhCiAgICAgICAgICAgICAgICAgICAgcmV0cmVhdGluZyBlbmVteS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbG92YWNpPC9uYW1lPiwgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgbWFkZSB0aGVtc2VsdmVzIGFjcXVhaW50ZWQgd2l0aCB0aGUgZGFpbHkgc3RhdGlvbnMgb2Ygb3VyIGhvcnNlLCBsaWUgaW4gYW1idXNoCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIHNlbGVjdCBib2R5IG9mIGZvb3QgaW4gYSBwbGFjZSBjb3ZlcmVkIHdpdGggd29vZHM7IHRvIGl0IHRoZXkgc2VudCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhvcnNlIHRoZSBuZXh0IGRheSwgd2hvIHdlcmUgZmlyc3QgdG8gZGVjb3kgb3VyIG1lbiBpbnRvIHRoZSBhbWJ1c2NhZGUsIGFuZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGV5IHdlcmUgc3Vycm91bmRlZCwgdG8gYXR0YWNrIHRoZW0uIEl0IHdhcyB0aGUgbG90IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT4gdG8gZmFsbCBpbnRvIHRoaXMgc25hcmUsIHRvIHdob20gdGhhdCBkYXkgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBhbGxvdHRlZCB0byBwZXJmb3JtIHRoaXMgZHV0eTsgZm9yLCBoYXZpbmcgc3VkZGVubHkgZ290IHNpZ2h0IG9mIHRoZSBlbmVteSdzCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSwgYW5kIGRlc3Bpc2luZyB0aGVpciB3ZWFrbmVzcywgaW4gY29uc2VxdWVuY2Ugb2YgdGhlaXIgc3VwZXJpb3IgbnVtYmVycywKICAgICAgICAgICAgICAgICAgICB0aGV5IHB1cnN1ZWQgdGhlbSB0b28gZWFnZXJseSwgYW5kIHdlcmUgc3Vycm91bmRlZCBvbiBldmVyeSBzaWRlIGJ5IHRoZSBmb290LgogICAgICAgICAgICAgICAgICAgIEJlaW5nLCBieSB0aGlzIG1lYW5zIHRocm93biBpbnRvIGRpc29yZGVyIHRoZXkgcmV0dXJuZWQgd2l0aCBtb3JlIHByZWNpcGl0YXRpb24KICAgICAgICAgICAgICAgICAgICB0aGFuIGlzIHVzdWFsIGluIGNhdmFscnkgYWN0aW9ucywgd2l0aCB0aGUgbG9zcyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlZlcnRpc2N1czwvbmFtZT4gdGhlCiAgICAgICAgICAgICAgICAgICAgZ292ZXJub3Igb2YgdGhlaXIgc3RhdGUsIGFuZCB0aGUgZ2VuZXJhbCBvZiB0aGVpciBob3JzZSwgd2hvLCB0aG91Z2ggc2NhcmNlbHkKICAgICAgICAgICAgICAgICAgICBhYmxlIHRvIHNpdCBvbiBob3JzZWJhY2sgdGhyb3VnaCB5ZWFycywgbmVpdGhlciwgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBjdXN0b20KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgcGxlYWRlZCBoaXMgYWdlIGluIGV4Y3VzZSBmb3Igbm90CiAgICAgICAgICAgICAgICAgICAgYWNjZXB0aW5nIHRoZSBjb21tYW5kLCBub3Igd291bGQgaGUgc3VmZmVyIHRoZW0gdG8gZmlnaHQgd2l0aG91dCBoaW0uIFRoZQogICAgICAgICAgICAgICAgICAgIHNwaXJpdHMgb2YgdGhlIGJhcmJhcmlhbnMgd2VyZSBwdWZmZWQgdXAsIGFuZCBpbmZsYXRlZCBhdCB0aGUgc3VjY2VzcyBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlLCBpbiBraWxsaW5nIHRoZSBwcmluY2UsIGFuZCBnZW5lcmFsIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+UmVtaTwvbmFtZT47IGFuZCBvdXIgbWVuIHdlcmUgdGF1Z2h0IGJ5IHRoaXMgbG9zcywgdG8gZXhhbWluZSB0aGUgY291bnRyeSwKICAgICAgICAgICAgICAgICAgICBhbmQgcG9zdCB0aGVpciBndWFyZHMgd2l0aCBtb3JlIGNhdXRpb24sIGFuZCB0byBiZSBtb3JlIG1vZGVyYXRlIGluIHB1cnN1aW5nIGEKICAgICAgICAgICAgICAgICAgICByZXRyZWF0aW5nIGVuZW15LiA8L3RyYW5zbGF0aW9uPg=="
translation['8.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtZWFuIHRpbWUgZGFpbHkgc2tpcm1pc2hlcyB0YWtlIHBsYWNlIGNvbnRpbnVhbGx5IGluIHZpZXcgb2YgYm90aCBjYW1wczsKICAgICAgICAgICAgICAgICAgICB0aGVzZSB3ZXJlIGZvdWdodCBhdCB0aGUgZm9yZCBhbmQgcGFzcyBvZiB0aGUgbW9yYXNzLiBJbiBvbmUgb2YgdGhlc2UgY29udGVzdHMKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbnM8L25hbWU+LCB3aG9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoYWQKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IG92ZXIgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjYxMSIgcmVnPSJSaGluZSBbNiw1MS44MzNdIChyaXZlciksIEV1cm9wZSIgdHlwZT0icGxhY2UiPlJoaW5lIDwvbmFtZT4sIHRvIGZpZ2h0LCBpbnRlcm1peGVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgaG9yc2UsIGhhdmluZyByZXNvbHV0ZWx5IGNyb3NzZWQgdGhlIG1hcnNoLCBhbmQgc2xhaW4gdGhlIGZldyB3aG8gbWFkZQogICAgICAgICAgICAgICAgICAgIHJlc2lzdGFuY2UsIGFuZCBib2xkbHkgcHVyc3VlZCB0aGUgcmVzdCwgc28gdGVycmlmaWVkIHRoZW0sIHRoYXQgbm90IG9ubHkgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gd2VyZSBhdHRhY2tlZCBoYW5kIHRvIGhhbmQsIG9yIHdvdW5kZWQgYXQgYSBkaXN0YW5jZSwgYnV0IGV2ZW4gdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgd2VyZSBzdGF0aW9uZWQgYXQgYSBncmVhdGVyIGRpc3RhbmNlIHRvIHN1cHBvcnQgdGhlbSwgZmxlZCBkaXNncmFjZWZ1bGx5OyBhbmQKICAgICAgICAgICAgICAgICAgICBiZWluZyBvZnRlbiBiZWF0ZW4gZnJvbSB0aGUgcmlzaW5nIGdyb3VuZHMsIGRpZCBub3Qgc3RvcCB0aWxsIHRoZXkgaGFkIHJldGlyZWQKICAgICAgICAgICAgICAgICAgICBpbnRvIHRoZWlyIGNhbXAsIG9yIHNvbWUsIGltcGVsbGVkIGJ5IGZlYXIsIGhhZCBmbGVkIGZ1cnRoZXIuIFRoZWlyIGRhbmdlciB0aHJldwogICAgICAgICAgICAgICAgICAgIHRoZWlyIHdob2xlIGFybXkgaW50byBzdWNoIGNvbmZ1c2lvbiwgdGhhdCBpdCB3YXMgZGlmZmljdWx0IHRvIGp1ZGdlIHdoZXRoZXIKICAgICAgICAgICAgICAgICAgICB0aGV5IHdlcmUgbW9yZSBpbnNvbGVudCBhZnRlciBhIHNsaWdodCBhZHZhbnRhZ2Ugb3IgbW9yZSBkZWplY3RlZCBieSBhIHRyaWZsaW5nCiAgICAgICAgICAgICAgICAgICAgY2FsYW1pdHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIHdob20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZAogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgb3ZlciB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyNjExIiByZWc9IlJoaW5lIFs2LDUxLjgzM10gKHJpdmVyKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+UmhpbmUgPC9uYW1lPiwgdG8gZmlnaHQsIGludGVybWl4ZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBob3JzZSwgaGF2aW5nIHJlc29sdXRlbHkgY3Jvc3NlZCB0aGUgbWFyc2gsIGFuZCBzbGFpbiB0aGUgZmV3IHdobyBtYWRlCiAgICAgICAgICAgICAgICAgICAgcmVzaXN0YW5jZSwgYW5kIGJvbGRseSBwdXJzdWVkIHRoZSByZXN0LCBzbyB0ZXJyaWZpZWQgdGhlbSwgdGhhdCBub3Qgb25seSB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyB3ZXJlIGF0dGFja2VkIGhhbmQgdG8gaGFuZCwgb3Igd291bmRlZCBhdCBhIGRpc3RhbmNlLCBidXQgZXZlbiB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICB3ZXJlIHN0YXRpb25lZCBhdCBhIGdyZWF0ZXIgZGlzdGFuY2UgdG8gc3VwcG9ydCB0aGVtLCBmbGVkIGRpc2dyYWNlZnVsbHk7IGFuZAogICAgICAgICAgICAgICAgICAgIGJlaW5nIG9mdGVuIGJlYXRlbiBmcm9tIHRoZSByaXNpbmcgZ3JvdW5kcywgZGlkIG5vdCBzdG9wIHRpbGwgdGhleSBoYWQgcmV0aXJlZAogICAgICAgICAgICAgICAgICAgIGludG8gdGhlaXIgY2FtcCwgb3Igc29tZSwgaW1wZWxsZWQgYnkgZmVhciwgaGFkIGZsZWQgZnVydGhlci4gVGhlaXIgZGFuZ2VyIHRocmV3CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgd2hvbGUgYXJteSBpbnRvIHN1Y2ggY29uZnVzaW9uLCB0aGF0IGl0IHdhcyBkaWZmaWN1bHQgdG8ganVkZ2Ugd2hldGhlcgogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBtb3JlIGluc29sZW50IGFmdGVyIGEgc2xpZ2h0IGFkdmFudGFnZSBvciBtb3JlIGRlamVjdGVkIGJ5IGEgdHJpZmxpbmcKICAgICAgICAgICAgICAgICAgICBjYWxhbWl0eS4gPC90cmFuc2xhdGlvbj4="
translation['8.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHNwZW5kaW5nIHNldmVyYWwgZGF5cyBpbiB0aGUgc2FtZSBjYW1wLCB0aGUgZ3VhcmRzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4sIGxlYXJuaW5nIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBUcmVib25pdXM8L25hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgIGFkdmFuY2luZyBuZWFyZXIgd2l0aCBoaXMgbGVnaW9ucywgYW5kIGZlYXJpbmcgYSBzaWVnZSBsaWtlIHRoYXQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MjEzIiByZWc9IiAgK0FsaXNlLVNhaW50ZS1SZWluZSBbNC41LDQ3LjU1XSAoaW5oYWJpdGVkIHBsYWNlKSwgQ290ZS1kJ09yLCBCdXJndW5keSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QWxlc2lhIDwvbmFtZT4sIHNlbmQgb2ZmIGJ5IG5pZ2h0IGFsbCB3aG8gd2VyZSBkaXNhYmxlZCBieSBhZ2Ugb3IKICAgICAgICAgICAgICAgICAgICBpbmZpcm1pdHksIG9yIHVuYXJtZWQsIGFuZCBhbG9uZyB3aXRoIHRoZW0gdGhlaXIgd2hvbGUgYmFnZ2FnZS4gV2hpbGUgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBwcmVwYXJpbmcgdGhlaXIgZGlzb3JkZXJseSBhbmQgY29uZnVzZWQgdHJvb3AgZm9yIG1hcmNoIChmb3IgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gYXJlIGFsd2F5cyBhdHRlbmRlZCBieSBhIHZhc3QgbXVsdGl0dWRlIG9mCiAgICAgICAgICAgICAgICAgICAgd2Fnb25zLCBldmVuIHdoZW4gdGhleSBoYXZlIHZlcnkgbGlnaHQgYmFnZ2FnZSksIGJlaW5nIG92ZXJ0YWtlbiBieSBkYXktbGlnaHQsCiAgICAgICAgICAgICAgICAgICAgdGhleSBkcmV3IHRoZWlyIGZvcmNlcyBvdXQgYmVmb3JlIHRoZWlyIGNhbXAsIHRvIHByZXZlbnQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGF0dGVtcHRpbmcgYSBwdXJzdWl0IGJlZm9yZSB0aGUgbGluZSBvZiB0aGVpciBiYWdnYWdlIGhhZAogICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkIHRvIGEgY29uc2lkZXJhYmxlIGRpc3RhbmNlLiBCdXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRpZCBub3QKICAgICAgICAgICAgICAgICAgICB0aGluayBpdCBwcnVkZW50IHRvIGF0dGFjayB0aGVtIHdoZW4gc3RhbmRpbmcgb24gdGhlaXIgZGVmZW5zZSwgd2l0aCBzdWNoIGEKICAgICAgICAgICAgICAgICAgICBzdGVlcCBoaWxsIGluIHRoZWlyIGZhdm9yLCBub3Iga2VlcCBoaXMgbGVnaW9ucyBhdCBzdWNoIGEgZGlzdGFuY2UgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgY291bGQgcXVpdCB0aGVpciBwb3N0IHdpdGhvdXQgZGFuZ2VyOiBidXQsIHBlcmNlaXZpbmcgdGhhdCBoaXMgY2FtcCB3YXMgZGl2aWRlZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGVuZW15J3MgYnkgYSBkZWVwIG1vcmFzcywgc28gZGlmZmljdWx0IHRvIGNyb3NzIHRoYXQgaGUgY291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgcHVyc3VlIHdpdGggZXhwZWRpdGlvbiwgYW5kIHRoYXQgdGhlIGhpbGwgYmV5b25kIHRoZSBtb3Jhc3MsIHdoaWNoIGV4dGVuZGVkCiAgICAgICAgICAgICAgICAgICAgYWxtb3N0IHRvIHRoZSBlbmVteSdzIGNhbXAsIHdhcyBzZXBhcmF0ZWQgZnJvbSBpdCBvbmx5IGJ5IGEgc21hbGwgdmFsbGV5LCBoZQogICAgICAgICAgICAgICAgICAgIGxhaWQgYSBicmlkZ2Ugb3ZlciB0aGUgbW9yYXNzIGFuZCBsZWQgaGlzIGFybXkgYWNyb3NzLCBhbmQgc29vbiByZWFjaGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHBsYWluIG9uIHRoZSB0b3Agb2YgdGhlIGhpbGwsIHdoaWNoIHdhcyBmb3J0aWZpZWQgb24gZWl0aGVyIHNpZGUgYnkgYSBzdGVlcAogICAgICAgICAgICAgICAgICAgIGFzY2VudC4gSGF2aW5nIHRoZXJlIGRyYXduIHVwIGhpcyBhcm15IGluIG9yZGVyIG9mIGJhdHRsZSwgaGUgbWFyY2hlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBmdXJ0aGVzdCBoaWxsLCBmcm9tIHdoaWNoIGhlIGNvdWxkLCB3aXRoIGhpcyBlbmdpbmVzLCBzaG93ZXIgZGFydHMgdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICB0aGlja2VzdCBvZiB0aGUgZW5lbXkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4sIGxlYXJuaW5nIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBUcmVib25pdXM8L25hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgIGFkdmFuY2luZyBuZWFyZXIgd2l0aCBoaXMgbGVnaW9ucywgYW5kIGZlYXJpbmcgYSBzaWVnZSBsaWtlIHRoYXQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MjEzIiByZWc9IiAgK0FsaXNlLVNhaW50ZS1SZWluZSBbNC41LDQ3LjU1XSAoaW5oYWJpdGVkIHBsYWNlKSwgQ290ZS1kJ09yLCBCdXJndW5keSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QWxlc2lhIDwvbmFtZT4sIHNlbmQgb2ZmIGJ5IG5pZ2h0IGFsbCB3aG8gd2VyZSBkaXNhYmxlZCBieSBhZ2Ugb3IKICAgICAgICAgICAgICAgICAgICBpbmZpcm1pdHksIG9yIHVuYXJtZWQsIGFuZCBhbG9uZyB3aXRoIHRoZW0gdGhlaXIgd2hvbGUgYmFnZ2FnZS4gV2hpbGUgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBwcmVwYXJpbmcgdGhlaXIgZGlzb3JkZXJseSBhbmQgY29uZnVzZWQgdHJvb3AgZm9yIG1hcmNoIChmb3IgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gYXJlIGFsd2F5cyBhdHRlbmRlZCBieSBhIHZhc3QgbXVsdGl0dWRlIG9mCiAgICAgICAgICAgICAgICAgICAgd2Fnb25zLCBldmVuIHdoZW4gdGhleSBoYXZlIHZlcnkgbGlnaHQgYmFnZ2FnZSksIGJlaW5nIG92ZXJ0YWtlbiBieSBkYXktbGlnaHQsCiAgICAgICAgICAgICAgICAgICAgdGhleSBkcmV3IHRoZWlyIGZvcmNlcyBvdXQgYmVmb3JlIHRoZWlyIGNhbXAsIHRvIHByZXZlbnQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGF0dGVtcHRpbmcgYSBwdXJzdWl0IGJlZm9yZSB0aGUgbGluZSBvZiB0aGVpciBiYWdnYWdlIGhhZAogICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkIHRvIGEgY29uc2lkZXJhYmxlIGRpc3RhbmNlLiBCdXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGRpZCBub3QKICAgICAgICAgICAgICAgICAgICB0aGluayBpdCBwcnVkZW50IHRvIGF0dGFjayB0aGVtIHdoZW4gc3RhbmRpbmcgb24gdGhlaXIgZGVmZW5zZSwgd2l0aCBzdWNoIGEKICAgICAgICAgICAgICAgICAgICBzdGVlcCBoaWxsIGluIHRoZWlyIGZhdm9yLCBub3Iga2VlcCBoaXMgbGVnaW9ucyBhdCBzdWNoIGEgZGlzdGFuY2UgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgY291bGQgcXVpdCB0aGVpciBwb3N0IHdpdGhvdXQgZGFuZ2VyOiBidXQsIHBlcmNlaXZpbmcgdGhhdCBoaXMgY2FtcCB3YXMgZGl2aWRlZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGVuZW15J3MgYnkgYSBkZWVwIG1vcmFzcywgc28gZGlmZmljdWx0IHRvIGNyb3NzIHRoYXQgaGUgY291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgcHVyc3VlIHdpdGggZXhwZWRpdGlvbiwgYW5kIHRoYXQgdGhlIGhpbGwgYmV5b25kIHRoZSBtb3Jhc3MsIHdoaWNoIGV4dGVuZGVkCiAgICAgICAgICAgICAgICAgICAgYWxtb3N0IHRvIHRoZSBlbmVteSdzIGNhbXAsIHdhcyBzZXBhcmF0ZWQgZnJvbSBpdCBvbmx5IGJ5IGEgc21hbGwgdmFsbGV5LCBoZQogICAgICAgICAgICAgICAgICAgIGxhaWQgYSBicmlkZ2Ugb3ZlciB0aGUgbW9yYXNzIGFuZCBsZWQgaGlzIGFybXkgYWNyb3NzLCBhbmQgc29vbiByZWFjaGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHBsYWluIG9uIHRoZSB0b3Agb2YgdGhlIGhpbGwsIHdoaWNoIHdhcyBmb3J0aWZpZWQgb24gZWl0aGVyIHNpZGUgYnkgYSBzdGVlcAogICAgICAgICAgICAgICAgICAgIGFzY2VudC4gSGF2aW5nIHRoZXJlIGRyYXduIHVwIGhpcyBhcm15IGluIG9yZGVyIG9mIGJhdHRsZSwgaGUgbWFyY2hlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBmdXJ0aGVzdCBoaWxsLCBmcm9tIHdoaWNoIGhlIGNvdWxkLCB3aXRoIGhpcyBlbmdpbmVzLCBzaG93ZXIgZGFydHMgdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICB0aGlja2VzdCBvZiB0aGUgZW5lbXkuIDwvdHJhbnNsYXRpb24+"
translation['8.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiwgY29uZmlkaW5nIGluIHRoZSBuYXR1cmFsIHN0cmVuZ3RoIG9mIHRoZWlyIHBvc2l0aW9uLAogICAgICAgICAgICAgICAgICAgIHRob3VnaCB0aGV5IHdvdWxkIG5vdCBkZWNsaW5lIGFuIGVuZ2FnZW1lbnQgaWYgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGF0dGVtcHRlZCB0byBhc2NlbmQgdGhlIGhpbGwsIHlldCBkYXJlZCBub3QgZGl2aWRlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZm9yY2VzIGludG8gc21hbGwgcGFydGllcywgbGVzdCB0aGV5IHNob3VsZCBiZSB0aHJvd24gaW50byBkaXNvcmRlciBieSBiZWluZwogICAgICAgICAgICAgICAgICAgIGRpc3BlcnNlZCwgYW5kIHRoZXJlZm9yZSByZW1haW5lZCBpbiBvcmRlciBvZiBiYXR0bGUuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgcGVyY2VpdmluZyB0aGF0IHRoZXkgcGVyc2lzdGVkIGluIHRoZWlyIHJlc29sdXRpb24sIGtlcHQKICAgICAgICAgICAgICAgICAgICB0d2VudHkgY29ob3J0cyBpbiBiYXR0bGUgYXJyYXksIGFuZCwgbWVhc3VyaW5nIG91dCBncm91bmQgdGhlcmUgZm9yIGEgY2FtcCwKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIGl0IHRvIGJlIGZvcnRpZmllZC4gSGF2aW5nIGNvbXBsZXRlZCBoaXMgd29ya3MsIGhlIGRyZXcgdXAgaGlzIGxlZ2lvbnMKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIHJhbXBhcnQgYW5kIHN0YXRpb25lZCB0aGUgY2F2YWxyeSBpbiBjZXJ0YWluIHBvc2l0aW9ucywgd2l0aCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhvcnNlcyBicmlkbGVkLiBXaGVuIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4gc2F3IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiBwcmVwYXJlZCB0byBwdXJzdWUgdGhlbSwgYW5kIHRoYXQgdGhleSBjb3VsZCBub3Qgd2FpdCB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBuaWdodCwgb3IgY29udGludWUgbG9uZ2VyIGluIHRoZSBzYW1lIHBsYWNlIHdpdGhvdXQgcHJvdmlzaW9ucywgdGhleQogICAgICAgICAgICAgICAgICAgIGZvcm1lZCB0aGUgZm9sbG93aW5nIHBsYW4gdG8gc2VjdXJlIGEgcmV0cmVhdC4gVGhleSBoYW5kZWQgdG8gb25lIGFub3RoZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgYnVuZGxlcyBvZiBzdHJhdyBhbmQgc3RpY2tzIG9uIHdoaWNoIHRoZXkgc2F0IChmb3IgaXQgaXMgdGhlIGN1c3RvbSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB0byBzaXQgd2hlbiBkcmF3biB1cCBpbiBvcmRlciBvZiBiYXR0bGUsIGFzIGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gYXNzZXJ0ZWQgaW4gZm9ybWVyIGNvbW1lbnRhcmllcyksIG9mIHdoaWNoIHRoZXkgaGFkIGdyZWF0IHBsZW50eSBpbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNhbXAsIGFuZCBwaWxlZCB0aGVtIGluIHRoZSBmcm9udCBvZiB0aGVpciBsaW5lOyBhbmQgYXQgdGhlIGNsb3NlIG9mIHRoZSBkYXksIG9uCiAgICAgICAgICAgICAgICAgICAgYSBjZXJ0YWluIHNpZ25hbCwgc2V0IHRoZW0gYWxsIG9uIGZpcmUgYXQgb25lIGFuZCB0aGUgc2FtZSB0aW1lLiBUaGUgY29udGludWVkCiAgICAgICAgICAgICAgICAgICAgYmxhemUgc29vbiBzY3JlZW5lZCBhbGwgdGhlaXIgZm9yY2VzIGZyb20gdGhlIHNpZ2h0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgd2hpY2ggbm8gc29vbmVyIGhhcHBlbmVkIHRoYW4gdGhlIGJhcmJhcmlhbnMgZmxlZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGdyZWF0ZXN0IHByZWNpcGl0YXRpb24uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiwgY29uZmlkaW5nIGluIHRoZSBuYXR1cmFsIHN0cmVuZ3RoIG9mIHRoZWlyIHBvc2l0aW9uLAogICAgICAgICAgICAgICAgICAgIHRob3VnaCB0aGV5IHdvdWxkIG5vdCBkZWNsaW5lIGFuIGVuZ2FnZW1lbnQgaWYgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IGF0dGVtcHRlZCB0byBhc2NlbmQgdGhlIGhpbGwsIHlldCBkYXJlZCBub3QgZGl2aWRlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZm9yY2VzIGludG8gc21hbGwgcGFydGllcywgbGVzdCB0aGV5IHNob3VsZCBiZSB0aHJvd24gaW50byBkaXNvcmRlciBieSBiZWluZwogICAgICAgICAgICAgICAgICAgIGRpc3BlcnNlZCwgYW5kIHRoZXJlZm9yZSByZW1haW5lZCBpbiBvcmRlciBvZiBiYXR0bGUuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgcGVyY2VpdmluZyB0aGF0IHRoZXkgcGVyc2lzdGVkIGluIHRoZWlyIHJlc29sdXRpb24sIGtlcHQKICAgICAgICAgICAgICAgICAgICB0d2VudHkgY29ob3J0cyBpbiBiYXR0bGUgYXJyYXksIGFuZCwgbWVhc3VyaW5nIG91dCBncm91bmQgdGhlcmUgZm9yIGEgY2FtcCwKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIGl0IHRvIGJlIGZvcnRpZmllZC4gSGF2aW5nIGNvbXBsZXRlZCBoaXMgd29ya3MsIGhlIGRyZXcgdXAgaGlzIGxlZ2lvbnMKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIHJhbXBhcnQgYW5kIHN0YXRpb25lZCB0aGUgY2F2YWxyeSBpbiBjZXJ0YWluIHBvc2l0aW9ucywgd2l0aCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhvcnNlcyBicmlkbGVkLiBXaGVuIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4gc2F3IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiBwcmVwYXJlZCB0byBwdXJzdWUgdGhlbSwgYW5kIHRoYXQgdGhleSBjb3VsZCBub3Qgd2FpdCB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBuaWdodCwgb3IgY29udGludWUgbG9uZ2VyIGluIHRoZSBzYW1lIHBsYWNlIHdpdGhvdXQgcHJvdmlzaW9ucywgdGhleQogICAgICAgICAgICAgICAgICAgIGZvcm1lZCB0aGUgZm9sbG93aW5nIHBsYW4gdG8gc2VjdXJlIGEgcmV0cmVhdC4gVGhleSBoYW5kZWQgdG8gb25lIGFub3RoZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgYnVuZGxlcyBvZiBzdHJhdyBhbmQgc3RpY2tzIG9uIHdoaWNoIHRoZXkgc2F0IChmb3IgaXQgaXMgdGhlIGN1c3RvbSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB0byBzaXQgd2hlbiBkcmF3biB1cCBpbiBvcmRlciBvZiBiYXR0bGUsIGFzIGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gYXNzZXJ0ZWQgaW4gZm9ybWVyIGNvbW1lbnRhcmllcyksIG9mIHdoaWNoIHRoZXkgaGFkIGdyZWF0IHBsZW50eSBpbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNhbXAsIGFuZCBwaWxlZCB0aGVtIGluIHRoZSBmcm9udCBvZiB0aGVpciBsaW5lOyBhbmQgYXQgdGhlIGNsb3NlIG9mIHRoZSBkYXksIG9uCiAgICAgICAgICAgICAgICAgICAgYSBjZXJ0YWluIHNpZ25hbCwgc2V0IHRoZW0gYWxsIG9uIGZpcmUgYXQgb25lIGFuZCB0aGUgc2FtZSB0aW1lLiBUaGUgY29udGludWVkCiAgICAgICAgICAgICAgICAgICAgYmxhemUgc29vbiBzY3JlZW5lZCBhbGwgdGhlaXIgZm9yY2VzIGZyb20gdGhlIHNpZ2h0IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgd2hpY2ggbm8gc29vbmVyIGhhcHBlbmVkIHRoYW4gdGhlIGJhcmJhcmlhbnMgZmxlZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGdyZWF0ZXN0IHByZWNpcGl0YXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['8.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRob3VnaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gY291bGQgbm90IHBlcmNlaXZlIHRoZSByZXRyZWF0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15IGZvciB0aGUgaW50ZXJ2ZW50aW9uIG9mIHRoZSBmaXJlLCB5ZXQsIHN1c3BlY3RpbmcgdGhhdCB0aGV5IGhhZCBhZG9wdGVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBtZXRob2QgdG8gZmF2b3IgdGhlaXIgZXNjYXBlLCBoZSBtYWRlIGhpcyBsZWdpb25zIGFkdmFuY2UsIGFuZCBzZW50IGEgcGFydHkKICAgICAgICAgICAgICAgICAgICBvZiBob3JzZSB0byBwdXJzdWUgdGhlbTsgYnV0LCBhcHByZWhlbnNpdmUgb2YgYW4gYW1idXNjYWRlLCBhbmQgdGhhdCB0aGUgZW5lbXkKICAgICAgICAgICAgICAgICAgICBtaWdodCByZW1haW4gaW4gdGhlIHNhbWUgcGxhY2UgYW5kIGVuZGVhdm9yIHRvIGRyYXcgb3VyIG1lbiBpbnRvIGEKICAgICAgICAgICAgICAgICAgICBkaXNhZHZhbnRhZ2VvdXMgc2l0dWF0aW9uLCBoZSBhZHZhbmNlcyBoaW1zZWxmIGJ1dCBzbG93bHkuIFRoZSBob3JzZSwgYmVpbmcKICAgICAgICAgICAgICAgICAgICBhZnJhaWQgdG8gdmVudHVyZSBpbnRvIHRoZSBzbW9rZSBhbmQgZGVuc2UgbGluZSBvZiBmbGFtZSwgYW5kIHRob3NlIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYm9sZCBlbm91Z2ggdG8gYXR0ZW1wdCBpdCBiZWluZyBzY2FyY2VseSBhYmxlIHRvIHNlZSB0aGVpciBob3JzZSdzIGhlYWRzLCBnYXZlCiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15IGZyZWUgbGliZXJ0eSB0byByZXRyZWF0LCB0aHJvdWdoIGZlYXIgb2YgYW4gYW1idXNjYWRlLiBUaHVzIGJ5IGEKICAgICAgICAgICAgICAgICAgICBmbGlnaHQsIGZ1bGwgYXQgb25jZSBvZiBjb3dhcmRpY2UgYW5kIGFkZHJlc3MsIHRoZXkgYWR2YW5jZWQgd2l0aG91dCBhbnkgbG9zcwogICAgICAgICAgICAgICAgICAgIGFib3V0IHRlbiBtaWxlcywgYW5kIGVuY2FtcGVkIGluIGEgdmVyeSBzdHJvbmcgcG9zaXRpb24uIEZyb20gd2hpY2gsIGxheWluZwogICAgICAgICAgICAgICAgICAgIG51bWVyb3VzIGFtYnVzY2FkZXMsIGJvdGggb2YgaG9yc2UgYW5kIGZvb3QsIHRoZXkgZGlkIGNvbnNpZGVyYWJsZSBkYW1hZ2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gZm9yYWdlcnMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gY291bGQgbm90IHBlcmNlaXZlIHRoZSByZXRyZWF0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15IGZvciB0aGUgaW50ZXJ2ZW50aW9uIG9mIHRoZSBmaXJlLCB5ZXQsIHN1c3BlY3RpbmcgdGhhdCB0aGV5IGhhZCBhZG9wdGVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBtZXRob2QgdG8gZmF2b3IgdGhlaXIgZXNjYXBlLCBoZSBtYWRlIGhpcyBsZWdpb25zIGFkdmFuY2UsIGFuZCBzZW50IGEgcGFydHkKICAgICAgICAgICAgICAgICAgICBvZiBob3JzZSB0byBwdXJzdWUgdGhlbTsgYnV0LCBhcHByZWhlbnNpdmUgb2YgYW4gYW1idXNjYWRlLCBhbmQgdGhhdCB0aGUgZW5lbXkKICAgICAgICAgICAgICAgICAgICBtaWdodCByZW1haW4gaW4gdGhlIHNhbWUgcGxhY2UgYW5kIGVuZGVhdm9yIHRvIGRyYXcgb3VyIG1lbiBpbnRvIGEKICAgICAgICAgICAgICAgICAgICBkaXNhZHZhbnRhZ2VvdXMgc2l0dWF0aW9uLCBoZSBhZHZhbmNlcyBoaW1zZWxmIGJ1dCBzbG93bHkuIFRoZSBob3JzZSwgYmVpbmcKICAgICAgICAgICAgICAgICAgICBhZnJhaWQgdG8gdmVudHVyZSBpbnRvIHRoZSBzbW9rZSBhbmQgZGVuc2UgbGluZSBvZiBmbGFtZSwgYW5kIHRob3NlIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYm9sZCBlbm91Z2ggdG8gYXR0ZW1wdCBpdCBiZWluZyBzY2FyY2VseSBhYmxlIHRvIHNlZSB0aGVpciBob3JzZSdzIGhlYWRzLCBnYXZlCiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15IGZyZWUgbGliZXJ0eSB0byByZXRyZWF0LCB0aHJvdWdoIGZlYXIgb2YgYW4gYW1idXNjYWRlLiBUaHVzIGJ5IGEKICAgICAgICAgICAgICAgICAgICBmbGlnaHQsIGZ1bGwgYXQgb25jZSBvZiBjb3dhcmRpY2UgYW5kIGFkZHJlc3MsIHRoZXkgYWR2YW5jZWQgd2l0aG91dCBhbnkgbG9zcwogICAgICAgICAgICAgICAgICAgIGFib3V0IHRlbiBtaWxlcywgYW5kIGVuY2FtcGVkIGluIGEgdmVyeSBzdHJvbmcgcG9zaXRpb24uIEZyb20gd2hpY2gsIGxheWluZwogICAgICAgICAgICAgICAgICAgIG51bWVyb3VzIGFtYnVzY2FkZXMsIGJvdGggb2YgaG9yc2UgYW5kIGZvb3QsIHRoZXkgZGlkIGNvbnNpZGVyYWJsZSBkYW1hZ2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gZm9yYWdlcnMuIDwvdHJhbnNsYXRpb24+"
translation['8.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHRoaXMgaGFkIGhhcHBlbmVkIHNldmVyYWwgdGltZXMsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBkaXNjb3ZlcmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSBhIGNlcnRhaW4gcHJpc29uZXIsIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3JyZXVzPC9uYW1lPiwgdGhlIGdlbmVyYWwgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbG92YWNpPC9uYW1lPiwgaGFkIHNlbGVjdGVkIHNpeCB0aG91c2FuZCBvZiBoaXMgYnJhdmVzdCBmb290IGFuZCBhCiAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQgaG9yc2UsIHdpdGggd2hpY2ggaGUgZGVzaWduZWQgdG8gbGllIGluIGFtYnVzaCBpbiBhIHBsYWNlIHRvIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgc3VzcGVjdGVkIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiB3b3VsZCBzZW5kIHRvIGxvb2sgZm9yIGZvcmFnZSwKICAgICAgICAgICAgICAgICAgICBvbiBhY2NvdW50IG9mIHRoZSBhYnVuZGFuY2Ugb2YgY29ybiBhbmQgZ3Jhc3MuIFVwb24gcmVjZWl2aW5nIGluZm9ybWF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZGVzaWduIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBkcmV3IG91dCBtb3JlIGxlZ2lvbnMgdGhhbiBoZQogICAgICAgICAgICAgICAgICAgIHVzdWFsbHkgZGlkLCBhbmQgc2VudCBmb3J3YXJkIGhpcyBjYXZhbHJ5IGFzIHVzdWFsLCB0byBwcm90ZWN0IHRoZSBmb3JhZ2Vycy4KICAgICAgICAgICAgICAgICAgICBXaXRoIHRoZXNlIGhlIGludGVybWl4ZWQgYSBndWFyZCBvZiBsaWdodCBpbmZhbnRyeSwgYW5kIGhpbXNlbGYgYWR2YW5jZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBsZWdpb25zIGFzIGZhc3QgYXMgaGUgY291bGQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZGlzY292ZXJlZAogICAgICAgICAgICAgICAgICAgIGZyb20gYSBjZXJ0YWluIHByaXNvbmVyLCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29ycmV1czwvbmFtZT4sIHRoZSBnZW5lcmFsIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4sIGhhZCBzZWxlY3RlZCBzaXggdGhvdXNhbmQgb2YgaGlzIGJyYXZlc3QgZm9vdCBhbmQgYQogICAgICAgICAgICAgICAgICAgIHRob3VzYW5kIGhvcnNlLCB3aXRoIHdoaWNoIGhlIGRlc2lnbmVkIHRvIGxpZSBpbiBhbWJ1c2ggaW4gYSBwbGFjZSB0byB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIHN1c3BlY3RlZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gd291bGQgc2VuZCB0byBsb29rIGZvciBmb3JhZ2UsCiAgICAgICAgICAgICAgICAgICAgb24gYWNjb3VudCBvZiB0aGUgYWJ1bmRhbmNlIG9mIGNvcm4gYW5kIGdyYXNzLiBVcG9uIHJlY2VpdmluZyBpbmZvcm1hdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGRlc2lnbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gZHJldyBvdXQgbW9yZSBsZWdpb25zIHRoYW4gaGUKICAgICAgICAgICAgICAgICAgICB1c3VhbGx5IGRpZCwgYW5kIHNlbnQgZm9yd2FyZCBoaXMgY2F2YWxyeSBhcyB1c3VhbCwgdG8gcHJvdGVjdCB0aGUgZm9yYWdlcnMuCiAgICAgICAgICAgICAgICAgICAgV2l0aCB0aGVzZSBoZSBpbnRlcm1peGVkIGEgZ3VhcmQgb2YgbGlnaHQgaW5mYW50cnksIGFuZCBoaW1zZWxmIGFkdmFuY2VkIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgbGVnaW9ucyBhcyBmYXN0IGFzIGhlIGNvdWxkLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhdWxzPC9uYW1lPiwgcGxhY2VkIGluIGFtYnVzaCwgaGFkIGNob3NlbiBmb3IgdGhlIHNlYXQgb2YgYWN0aW9uIGEKICAgICAgICAgICAgICAgICAgICBsZXZlbCBwaWVjZSBvZiBncm91bmQsIG5vdCBtb3JlIHRoYW4gYSBtaWxlIGluIGV4dGVudCwgaW5jbG9zZWQgb24gZXZlcnkgc2lkZSBieQogICAgICAgICAgICAgICAgICAgIGEgdGhpY2sgd29vZCBvciBhIHZlcnkgZGVlcCByaXZlciwgYXMgYnkgYSB0b2lsLCBhbmQgdGhpcyB0aGV5IHN1cnJvdW5kZWQuIE91cgogICAgICAgICAgICAgICAgICAgIG1lbiwgYXBwcmlzZWQgb2YgdGhlIGVuZW15J3MgZGVzaWduLCBtYXJjaGVkIGluIGdvb2Qgb3JkZXIgdG8gdGhlIGdyb3VuZCwgcmVhZHkKICAgICAgICAgICAgICAgICAgICBib3RoIGluIGhlYXJ0IGFuZCBoYW5kIHRvIGdpdmUgYmF0dGxlLCBhbmQgd2lsbGluZyB0byBoYXphcmQgYW55IGVuZ2FnZW1lbnQgd2hlbgogICAgICAgICAgICAgICAgICAgIHRoZSBsZWdpb25zIHdlcmUgYXQgdGhlaXIgYmFjay4gT24gdGhlaXIgYXBwcm9hY2gsIGFzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29ycmV1czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBzdXBwb3NlZCB0aGF0IGhlIGhhZCBnb3QgYW4gb3Bwb3J0dW5pdHkgb2YgZWZmZWN0aW5nIGhpcyBwdXJwb3NlLCBoZSBhdCBmaXJzdAogICAgICAgICAgICAgICAgICAgIHNob3dzIGhpbXNlbGYgd2l0aCBhIHNtYWxsIHBhcnR5IGFuZCBhdHRhY2tzIHRoZSBmb3JlbW9zdCB0cm9vcHMuIE91ciBtZW4KICAgICAgICAgICAgICAgICAgICByZXNvbHV0ZWx5IHN0b29kIHRoZSBjaGFyZ2UsIGFuZCBkaWQgbm90IGNyb3dkIHRvZ2V0aGVyIGluIG9uZSBwbGFjZSwgYXMKICAgICAgICAgICAgICAgICAgICBjb21tb25seSBoYXBwZW5zIGZyb20gc3VycHJpc2UgaW4gZW5nYWdlbWVudHMgYmV0d2VlbiB0aGUgaG9yc2UsIHdob3NlIG51bWJlcnMKICAgICAgICAgICAgICAgICAgICBwcm92ZSBpbmp1cmlvdXMgdG8gdGhlbXNlbHZlcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2F1bHM8L25hbWU+LCBwbGFjZWQgaW4gYW1idXNoLCBoYWQgY2hvc2VuIGZvciB0aGUgc2VhdCBvZiBhY3Rpb24gYQogICAgICAgICAgICAgICAgICAgIGxldmVsIHBpZWNlIG9mIGdyb3VuZCwgbm90IG1vcmUgdGhhbiBhIG1pbGUgaW4gZXh0ZW50LCBpbmNsb3NlZCBvbiBldmVyeSBzaWRlIGJ5CiAgICAgICAgICAgICAgICAgICAgYSB0aGljayB3b29kIG9yIGEgdmVyeSBkZWVwIHJpdmVyLCBhcyBieSBhIHRvaWwsIGFuZCB0aGlzIHRoZXkgc3Vycm91bmRlZC4gT3VyCiAgICAgICAgICAgICAgICAgICAgbWVuLCBhcHByaXNlZCBvZiB0aGUgZW5lbXkncyBkZXNpZ24sIG1hcmNoZWQgaW4gZ29vZCBvcmRlciB0byB0aGUgZ3JvdW5kLCByZWFkeQogICAgICAgICAgICAgICAgICAgIGJvdGggaW4gaGVhcnQgYW5kIGhhbmQgdG8gZ2l2ZSBiYXR0bGUsIGFuZCB3aWxsaW5nIHRvIGhhemFyZCBhbnkgZW5nYWdlbWVudCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlIGxlZ2lvbnMgd2VyZSBhdCB0aGVpciBiYWNrLiBPbiB0aGVpciBhcHByb2FjaCwgYXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3JyZXVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHN1cHBvc2VkIHRoYXQgaGUgaGFkIGdvdCBhbiBvcHBvcnR1bml0eSBvZiBlZmZlY3RpbmcgaGlzIHB1cnBvc2UsIGhlIGF0IGZpcnN0CiAgICAgICAgICAgICAgICAgICAgc2hvd3MgaGltc2VsZiB3aXRoIGEgc21hbGwgcGFydHkgYW5kIGF0dGFja3MgdGhlIGZvcmVtb3N0IHRyb29wcy4gT3VyIG1lbgogICAgICAgICAgICAgICAgICAgIHJlc29sdXRlbHkgc3Rvb2QgdGhlIGNoYXJnZSwgYW5kIGRpZCBub3QgY3Jvd2QgdG9nZXRoZXIgaW4gb25lIHBsYWNlLCBhcwogICAgICAgICAgICAgICAgICAgIGNvbW1vbmx5IGhhcHBlbnMgZnJvbSBzdXJwcmlzZSBpbiBlbmdhZ2VtZW50cyBiZXR3ZWVuIHRoZSBob3JzZSwgd2hvc2UgbnVtYmVycwogICAgICAgICAgICAgICAgICAgIHByb3ZlIGluanVyaW91cyB0byB0aGVtc2VsdmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gYnkgdGhlIGp1ZGljaW91cyBhcnJhbmdlbWVudCBvZiBvdXIgZm9yY2VzIG9ubHkgYSBmZXcgb2Ygb3VyIG1lbiBmb3VnaHQgYnkKICAgICAgICAgICAgICAgICAgICB0dXJucywgYW5kIGRpZCBub3Qgc3VmZmVyIHRoZW1zZWx2ZXMgdG8gYmUgc3Vycm91bmRlZCwgdGhlIHJlc3Qgb2YgdGhlIGVuZW15CiAgICAgICAgICAgICAgICAgICAgYnJva2Ugb3V0IGZyb20gdGhlIHdvb2RzIHdoaWxlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29ycmV1czwvbmFtZT4gd2FzIGVuZ2FnZWQuIFRoZSBiYXR0bGUgd2FzCiAgICAgICAgICAgICAgICAgICAgbWFpbnRhaW5lZCBpbiBkaWZmZXJlbnQgcGFydHMgd2l0aCBncmVhdCB2aWdvciwgYW5kIGNvbnRpbnVlZCBmb3IgYSBsb25nIHRpbWUKICAgICAgICAgICAgICAgICAgICB1bmRlY2lkZWQsIHRpbGwgYXQgbGVuZ3RoIGEgYm9keSBvZiBmb290IGdyYWR1YWxseSBhZHZhbmNlZCBmcm9tIHRoZSB3b29kcyBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIG9mIGJhdHRsZSBhbmQgZm9yY2VkIG91ciBob3JzZSB0byBnaXZlIGdyb3VuZDogdGhlIGxpZ2h0IGluZmFudHJ5LCB3aGljaAogICAgICAgICAgICAgICAgICAgIHdlcmUgc2VudCBiZWZvcmUgdGhlIGxlZ2lvbnMgdG8gdGhlIGFzc2lzdGFuY2Ugb2YgdGhlIGNhdmFscnksIHNvb24gY2FtZSB1cCwKICAgICAgICAgICAgICAgICAgICBhbmQsIG1peGluZyB3aXRoIHRoZSBob3JzZSwgZm91Z2h0IHdpdGggZ3JlYXQgY291cmFnZS4gVGhlIGJhdHRsZSB3YXMgZm9yIHNvbWUKICAgICAgICAgICAgICAgICAgICB0aW1lIGRvdWJ0ZnVsLCBidXQsIGFzIHVzdWFsbHkgaGFwcGVucywgb3VyIG1lbiwgd2hvIHN0b29kIHRoZSBlbmVteSdzIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgY2hhcmdlLCBiZWNhbWUgc3VwZXJpb3IgZnJvbSB0aGlzIHZlcnkgY2lyY3Vtc3RhbmNlIHRoYXQsIHRob3VnaCBzdWRkZW5seQogICAgICAgICAgICAgICAgICAgIGF0dGFja2VkIGZyb20gYW4gYW1idXNjYWRlLCB0aGV5IGhhZCBzdXN0YWluZWQgbm8gbG9zcy4gSW4gdGhlIG1lYW4gdGltZSB0aGUKICAgICAgICAgICAgICAgICAgICBsZWdpb25zIHdlcmUgYXBwcm9hY2hpbmcsIGFuZCBzZXZlcmFsIG1lc3NlbmdlcnMgYXJyaXZlZCB3aXRoIG5vdGljZSB0byBvdXIgbWVuCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBlbmVteSB0aGF0IHRoZSBbPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPl0gZ2VuZXJhbCB3YXMgbmVhciBhdAogICAgICAgICAgICAgICAgICAgIGhhbmQsIHdpdGggaGlzIGZvcmNlcyBpbiBiYXR0bGUgYXJyYXkuIFVwb24gdGhpcyBpbnRlbGxpZ2VuY2UsIG91ciBtZW4sCiAgICAgICAgICAgICAgICAgICAgY29uZmlkaW5nIGluIHRoZSBzdXBwb3J0IG9mIHRoZSBjb2hvcnRzLCBmb3VnaHQgbW9zdCByZXNvbHV0ZWx5LCBmZWFyaW5nLCBsZXN0CiAgICAgICAgICAgICAgICAgICAgaWYgdGhleSBzaG91bGQgYmUgc2xvdyBpbiB0aGVpciBvcGVyYXRpb25zIHRoZXkgc2hvdWxkIGxldCB0aGUgbGVnaW9ucwogICAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYXRlIGluIHRoZSBnbG9yeSBvZiB0aGUgY29ucXVlc3QuIFRoZSBlbmVteSBsb3NlIGNvdXJhZ2UgYW5kIGF0dGVtcHQgdG8KICAgICAgICAgICAgICAgICAgICBlc2NhcGUgYnkgZGlmZmVyZW50IHdheXMuIEluIHZhaW47IGZvciB0aGV5IHdlcmUgdGhlbXNlbHZlcyBlbnRhbmdsZWQgaW4gdGhhdAogICAgICAgICAgICAgICAgICAgIGxhYnlyaW50aCBpbiB3aGljaCB0aGV5IHRob3VnaHQgdG8gZW50cmFwIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPi4KICAgICAgICAgICAgICAgICAgICBCZWluZyBkZWZlYXRlZCBhbmQgcHV0IHRvIHRoZSByb3V0LCBhbmQgaGF2aW5nIGxvc3QgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIG1lbiwgdGhleSBmbGVkIGluIGNvbnN0ZXJuYXRpb24gd2hpdGhlcnNvZXZlciBjaGFuY2UgY2FycmllZCB0aGVtOyBzb21lIHNvdWdodAogICAgICAgICAgICAgICAgICAgIHRoZSB3b29kcywgb3RoZXJzIHRoZSByaXZlciwgYnV0IHdlcmUgdmlnb3JvdXNseSBwdXJzdWVkIGJ5IG91ciBtZW4gYW5kIHB1dCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBzd29yZC4gWWV0LCBpbiB0aGUgbWVhbiB0aW1lLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvcnJldXM8L25hbWU+LCB1bmNvbnF1ZXJlZCBieSBjYWxhbWl0eSwKICAgICAgICAgICAgICAgICAgICBjb3VsZCBub3QgYmUgcHJldmFpbGVkIG9uIHRvIHF1aXQgdGhlIGZpZWxkIGFuZCB0YWtlIHJlZnVnZSBpbiB0aGUgd29vZHMsIG9yCiAgICAgICAgICAgICAgICAgICAgYWNjZXB0IG91ciBvZmZlcnMgb2YgcXVhcnRlciwgYnV0LCBmaWdodGluZyBjb3VyYWdlb3VzbHkgYW5kIHdvdW5kaW5nIHNldmVyYWwsCiAgICAgICAgICAgICAgICAgICAgcHJvdm9rZWQgb3VyIG1lbiwgZWxhdGVkIHdpdGggdmljdG9yeSwgdG8gZGlzY2hhcmdlIHRoZWlyIHdlYXBvbnMgYWdhaW5zdCBoaW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvcnJldXM8L25hbWU+IHdhcyBlbmdhZ2VkLiBUaGUgYmF0dGxlIHdhcwogICAgICAgICAgICAgICAgICAgIG1haW50YWluZWQgaW4gZGlmZmVyZW50IHBhcnRzIHdpdGggZ3JlYXQgdmlnb3IsIGFuZCBjb250aW51ZWQgZm9yIGEgbG9uZyB0aW1lCiAgICAgICAgICAgICAgICAgICAgdW5kZWNpZGVkLCB0aWxsIGF0IGxlbmd0aCBhIGJvZHkgb2YgZm9vdCBncmFkdWFsbHkgYWR2YW5jZWQgZnJvbSB0aGUgd29vZHMgaW4KICAgICAgICAgICAgICAgICAgICBvcmRlciBvZiBiYXR0bGUgYW5kIGZvcmNlZCBvdXIgaG9yc2UgdG8gZ2l2ZSBncm91bmQ6IHRoZSBsaWdodCBpbmZhbnRyeSwgd2hpY2gKICAgICAgICAgICAgICAgICAgICB3ZXJlIHNlbnQgYmVmb3JlIHRoZSBsZWdpb25zIHRvIHRoZSBhc3Npc3RhbmNlIG9mIHRoZSBjYXZhbHJ5LCBzb29uIGNhbWUgdXAsCiAgICAgICAgICAgICAgICAgICAgYW5kLCBtaXhpbmcgd2l0aCB0aGUgaG9yc2UsIGZvdWdodCB3aXRoIGdyZWF0IGNvdXJhZ2UuIFRoZSBiYXR0bGUgd2FzIGZvciBzb21lCiAgICAgICAgICAgICAgICAgICAgdGltZSBkb3VidGZ1bCwgYnV0LCBhcyB1c3VhbGx5IGhhcHBlbnMsIG91ciBtZW4sIHdobyBzdG9vZCB0aGUgZW5lbXkncyBmaXJzdAogICAgICAgICAgICAgICAgICAgIGNoYXJnZSwgYmVjYW1lIHN1cGVyaW9yIGZyb20gdGhpcyB2ZXJ5IGNpcmN1bXN0YW5jZSB0aGF0LCB0aG91Z2ggc3VkZGVubHkKICAgICAgICAgICAgICAgICAgICBhdHRhY2tlZCBmcm9tIGFuIGFtYnVzY2FkZSwgdGhleSBoYWQgc3VzdGFpbmVkIG5vIGxvc3MuIEluIHRoZSBtZWFuIHRpbWUgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucyB3ZXJlIGFwcHJvYWNoaW5nLCBhbmQgc2V2ZXJhbCBtZXNzZW5nZXJzIGFycml2ZWQgd2l0aCBub3RpY2UgdG8gb3VyIG1lbgogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgZW5lbXkgdGhhdCB0aGUgWzxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT5dIGdlbmVyYWwgd2FzIG5lYXIgYXQKICAgICAgICAgICAgICAgICAgICBoYW5kLCB3aXRoIGhpcyBmb3JjZXMgaW4gYmF0dGxlIGFycmF5LiBVcG9uIHRoaXMgaW50ZWxsaWdlbmNlLCBvdXIgbWVuLAogICAgICAgICAgICAgICAgICAgIGNvbmZpZGluZyBpbiB0aGUgc3VwcG9ydCBvZiB0aGUgY29ob3J0cywgZm91Z2h0IG1vc3QgcmVzb2x1dGVseSwgZmVhcmluZywgbGVzdAogICAgICAgICAgICAgICAgICAgIGlmIHRoZXkgc2hvdWxkIGJlIHNsb3cgaW4gdGhlaXIgb3BlcmF0aW9ucyB0aGV5IHNob3VsZCBsZXQgdGhlIGxlZ2lvbnMKICAgICAgICAgICAgICAgICAgICBwYXJ0aWNpcGF0ZSBpbiB0aGUgZ2xvcnkgb2YgdGhlIGNvbnF1ZXN0LiBUaGUgZW5lbXkgbG9zZSBjb3VyYWdlIGFuZCBhdHRlbXB0IHRvCiAgICAgICAgICAgICAgICAgICAgZXNjYXBlIGJ5IGRpZmZlcmVudCB3YXlzLiBJbiB2YWluOyBmb3IgdGhleSB3ZXJlIHRoZW1zZWx2ZXMgZW50YW5nbGVkIGluIHRoYXQKICAgICAgICAgICAgICAgICAgICBsYWJ5cmludGggaW4gd2hpY2ggdGhleSB0aG91Z2h0IHRvIGVudHJhcCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4uCiAgICAgICAgICAgICAgICAgICAgQmVpbmcgZGVmZWF0ZWQgYW5kIHB1dCB0byB0aGUgcm91dCwgYW5kIGhhdmluZyBsb3N0IHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBtZW4sIHRoZXkgZmxlZCBpbiBjb25zdGVybmF0aW9uIHdoaXRoZXJzb2V2ZXIgY2hhbmNlIGNhcnJpZWQgdGhlbTsgc29tZSBzb3VnaHQKICAgICAgICAgICAgICAgICAgICB0aGUgd29vZHMsIG90aGVycyB0aGUgcml2ZXIsIGJ1dCB3ZXJlIHZpZ29yb3VzbHkgcHVyc3VlZCBieSBvdXIgbWVuIGFuZCBwdXQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgc3dvcmQuIFlldCwgaW4gdGhlIG1lYW4gdGltZSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3JyZXVzPC9uYW1lPiwgdW5jb25xdWVyZWQgYnkgY2FsYW1pdHksCiAgICAgICAgICAgICAgICAgICAgY291bGQgbm90IGJlIHByZXZhaWxlZCBvbiB0byBxdWl0IHRoZSBmaWVsZCBhbmQgdGFrZSByZWZ1Z2UgaW4gdGhlIHdvb2RzLCBvcgogICAgICAgICAgICAgICAgICAgIGFjY2VwdCBvdXIgb2ZmZXJzIG9mIHF1YXJ0ZXIsIGJ1dCwgZmlnaHRpbmcgY291cmFnZW91c2x5IGFuZCB3b3VuZGluZyBzZXZlcmFsLAogICAgICAgICAgICAgICAgICAgIHByb3Zva2VkIG91ciBtZW4sIGVsYXRlZCB3aXRoIHZpY3RvcnksIHRvIGRpc2NoYXJnZSB0aGVpciB3ZWFwb25zIGFnYWluc3QgaGltLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHRoaXMgdHJhbnNhY3Rpb24sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgaGF2aW5nIGNvbWUgdXAKICAgICAgICAgICAgICAgICAgICBpbW1lZGlhdGVseSBhZnRlciB0aGUgYmF0dGxlLCBhbmQgaW1hZ2luaW5nIHRoYXQgdGhlIGVuZW15LCB1cG9uIHJlY2VpdmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBuZXdzIG9mIHNvIGdyZWF0IGEgZGVmZWF0LCB3b3VsZCBiZSBzbyBkZXByZXNzZWQgdGhhdCB0aGV5IHdvdWxkIGFiYW5kb24gdGhlaXIKICAgICAgICAgICAgICAgICAgICBjYW1wLCB3aGljaCB3YXMgbm90IGFib3ZlIGVpZ2h0IG1pbGVzIGRpc3RhbnQgZnJvbSB0aGUgc2NlbmUgb2YgYWN0aW9uLCB0aG91Z2gKICAgICAgICAgICAgICAgICAgICBoZSBzYXcgaGlzIHBhc3NhZ2Ugb2JzdHJ1Y3RlZCBieSB0aGUgcml2ZXIsIHlldCBoZSBtYXJjaGVkIGhpcyBhcm15IG92ZXIgYW5kCiAgICAgICAgICAgICAgICAgICAgYWR2YW5jZWQuIEJ1dCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+IGFuZCB0aGUgb3RoZXIgc3RhdGVzLCBiZWluZyBpbmZvcm1lZCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBsb3NzIHRoZXkgaGFkIHN1c3RhaW5lZCBieSBhIGZldyB3b3VuZGVkIG1lbiB3aG8gaGF2aW5nIGVzY2FwZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc2hlbHRlciBvZiB0aGUgd29vZHMsIGhhZCByZXR1cm5lZCB0byB0aGVtIGFmdGVyIHRoZSBkZWZlYXQsIGFuZCBsZWFybmluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgZXZlcnkgdGhpbmcgaGFkIHR1cm5lZCBvdXQgdW5mYXZvcmFibGUsIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3JyZXVzPC9uYW1lPiB3YXMgc2xhaW4sIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBob3JzZSBhbmQgbW9zdCB2YWxpYW50IG9mIHRoZWlyIGZvb3QgY3V0IG9mZiwgaW1hZ2luZWQgdGhhdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4gd2VyZSBtYXJjaGluZyBhZ2FpbnN0IHRoZW0sIGFuZCBjYWxsaW5nIGEKICAgICAgICAgICAgICAgICAgICBjb3VuY2lsIGluIGhhc3RlIGJ5IHNvdW5kIG9mIHRydW1wZXQsIHVuYW5pbW91c2x5IGNyeSBvdXQgdG8gc2VuZCBlbWJhc3NhZG9ycwogICAgICAgICAgICAgICAgICAgIGFuZCBob3N0YWdlcyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhhdmluZyBjb21lIHVwCiAgICAgICAgICAgICAgICAgICAgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGJhdHRsZSwgYW5kIGltYWdpbmluZyB0aGF0IHRoZSBlbmVteSwgdXBvbiByZWNlaXZpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgbmV3cyBvZiBzbyBncmVhdCBhIGRlZmVhdCwgd291bGQgYmUgc28gZGVwcmVzc2VkIHRoYXQgdGhleSB3b3VsZCBhYmFuZG9uIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY2FtcCwgd2hpY2ggd2FzIG5vdCBhYm92ZSBlaWdodCBtaWxlcyBkaXN0YW50IGZyb20gdGhlIHNjZW5lIG9mIGFjdGlvbiwgdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgaGUgc2F3IGhpcyBwYXNzYWdlIG9ic3RydWN0ZWQgYnkgdGhlIHJpdmVyLCB5ZXQgaGUgbWFyY2hlZCBoaXMgYXJteSBvdmVyIGFuZAogICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkLiBCdXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbG92YWNpPC9uYW1lPiBhbmQgdGhlIG90aGVyIHN0YXRlcywgYmVpbmcgaW5mb3JtZWQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgbG9zcyB0aGV5IGhhZCBzdXN0YWluZWQgYnkgYSBmZXcgd291bmRlZCBtZW4gd2hvIGhhdmluZyBlc2NhcGVkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHNoZWx0ZXIgb2YgdGhlIHdvb2RzLCBoYWQgcmV0dXJuZWQgdG8gdGhlbSBhZnRlciB0aGUgZGVmZWF0LCBhbmQgbGVhcm5pbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IHRoaW5nIGhhZCB0dXJuZWQgb3V0IHVuZmF2b3JhYmxlLCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29ycmV1czwvbmFtZT4gd2FzIHNsYWluLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgaG9yc2UgYW5kIG1vc3QgdmFsaWFudCBvZiB0aGVpciBmb290IGN1dCBvZmYsIGltYWdpbmVkIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+IHdlcmUgbWFyY2hpbmcgYWdhaW5zdCB0aGVtLCBhbmQgY2FsbGluZyBhCiAgICAgICAgICAgICAgICAgICAgY291bmNpbCBpbiBoYXN0ZSBieSBzb3VuZCBvZiB0cnVtcGV0LCB1bmFuaW1vdXNseSBjcnkgb3V0IHRvIHNlbmQgZW1iYXNzYWRvcnMKICAgICAgICAgICAgICAgICAgICBhbmQgaG9zdGFnZXMgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['8.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgcHJvcG9zYWwgaGF2aW5nIG1ldCB3aXRoIGdlbmVyYWwgYXBwcm9iYXRpb24sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29taXVzPC9uYW1lPiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdHJlYmF0aWFuPC9uYW1lPiBmbGVkIHRvIHRob3NlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIGZyb20gd2hvbSBoZSBoYWQgYm9ycm93ZWQgYXV4aWxpYXJpZXMgZm9yIHRoYXQgd2FyLiBUaGUgcmVzdCBpbnN0YW50bHkgc2VuZAogICAgICAgICAgICAgICAgICAgIGVtYmFzc2Fkb3JzIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPjsgYW5kIHJlcXVlc3RlZCB0aGF0IGhlIHdvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgY29udGVudGVkIHdpdGggdGhhdCBwdW5pc2htZW50IG9mIGhpcyBlbmVteSwgd2hpY2ggaWYgaGUgaGFkIHBvc3Nlc3NlZCB0aGUgcG93ZXIKICAgICAgICAgICAgICAgICAgICB0byBpbmZsaWN0IG9uIHRoZW0gYmVmb3JlIHRoZSBlbmdhZ2VtZW50LCB3aGVuIHRoZXkgd2VyZSB5ZXQgdW5pbmp1cmVkLCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2VyZSBwZXJzdWFkZWQgZnJvbSBoaXMgdXN1YWwgY2xlbWVuY3kgYW5kIG1lcmN5LCBoZSBuZXZlciB3b3VsZCBoYXZlIGluZmxpY3RlZDsKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBwb3dlciBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+IHdhcyBjcnVzaGVkIGJ5IHRoZSBjYXZhbHJ5IGFjdGlvbjsKICAgICAgICAgICAgICAgICAgICB0aGF0IG1hbnkgdGhvdXNhbmQgb2YgdGhlaXIgY2hvaWNlc3QgZm9vdCBoYWQgZmFsbGVuLCB0aGF0IHNjYXJjZSBhIG1hbiBoYWQKICAgICAgICAgICAgICAgICAgICBlc2NhcGVkIHRvIGJyaW5nIHRoZSBmYXRhbCBuZXdzLiBUaGF0LCBob3dldmVyLCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsb3ZhY2k8L25hbWU+IGhhZAogICAgICAgICAgICAgICAgICAgIGRlcml2ZWQgZnJvbSB0aGUgYmF0dGxlIG9uZSBhZHZhbnRhZ2UsIG9mIHNvbWUgaW1wb3J0YW5jZSwgY29uc2lkZXJpbmcgdGhlaXIKICAgICAgICAgICAgICAgICAgICBsb3NzOyB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29ycmV1czwvbmFtZT4sIHRoZSBhdXRob3Igb2YgdGhlIHJlYmVsbGlvbiwgYW5kIGFnaXRhdG9yIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHBlb3BsZSwgd2FzIHNsYWluOiBmb3IgdGhhdCB3aGlsZSBoZSBsaXZlZCB0aGUgc2VuYXRlIGhhZCBuZXZlciBlcXVhbAogICAgICAgICAgICAgICAgICAgIGluZmx1ZW5jZSBpbiB0aGUgc3RhdGUgd2l0aCB0aGUgZ2lkZHkgcG9wdWxhY2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbWl1czwvbmFtZT4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXRyZWJhdGlhbjwvbmFtZT4gZmxlZCB0byB0aG9zZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICBmcm9tIHdob20gaGUgaGFkIGJvcnJvd2VkIGF1eGlsaWFyaWVzIGZvciB0aGF0IHdhci4gVGhlIHJlc3QgaW5zdGFudGx5IHNlbmQKICAgICAgICAgICAgICAgICAgICBlbWJhc3NhZG9ycyB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT47IGFuZCByZXF1ZXN0ZWQgdGhhdCBoZSB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRlZCB3aXRoIHRoYXQgcHVuaXNobWVudCBvZiBoaXMgZW5lbXksIHdoaWNoIGlmIGhlIGhhZCBwb3NzZXNzZWQgdGhlIHBvd2VyCiAgICAgICAgICAgICAgICAgICAgdG8gaW5mbGljdCBvbiB0aGVtIGJlZm9yZSB0aGUgZW5nYWdlbWVudCwgd2hlbiB0aGV5IHdlcmUgeWV0IHVuaW5qdXJlZCwgdGhleQogICAgICAgICAgICAgICAgICAgIHdlcmUgcGVyc3VhZGVkIGZyb20gaGlzIHVzdWFsIGNsZW1lbmN5IGFuZCBtZXJjeSwgaGUgbmV2ZXIgd291bGQgaGF2ZSBpbmZsaWN0ZWQ7CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgcG93ZXIgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbG92YWNpPC9uYW1lPiB3YXMgY3J1c2hlZCBieSB0aGUgY2F2YWxyeSBhY3Rpb247CiAgICAgICAgICAgICAgICAgICAgdGhhdCBtYW55IHRob3VzYW5kIG9mIHRoZWlyIGNob2ljZXN0IGZvb3QgaGFkIGZhbGxlbiwgdGhhdCBzY2FyY2UgYSBtYW4gaGFkCiAgICAgICAgICAgICAgICAgICAgZXNjYXBlZCB0byBicmluZyB0aGUgZmF0YWwgbmV3cy4gVGhhdCwgaG93ZXZlciwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbG92YWNpPC9uYW1lPiBoYWQKICAgICAgICAgICAgICAgICAgICBkZXJpdmVkIGZyb20gdGhlIGJhdHRsZSBvbmUgYWR2YW50YWdlLCBvZiBzb21lIGltcG9ydGFuY2UsIGNvbnNpZGVyaW5nIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbG9zczsgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvcnJldXM8L25hbWU+LCB0aGUgYXV0aG9yIG9mIHRoZSByZWJlbGxpb24sIGFuZCBhZ2l0YXRvciBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBwZW9wbGUsIHdhcyBzbGFpbjogZm9yIHRoYXQgd2hpbGUgaGUgbGl2ZWQgdGhlIHNlbmF0ZSBoYWQgbmV2ZXIgZXF1YWwKICAgICAgICAgICAgICAgICAgICBpbmZsdWVuY2UgaW4gdGhlIHN0YXRlIHdpdGggdGhlIGdpZGR5IHBvcHVsYWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiByZW1pbmRlZCB0aGUgZW1iYXNzYWRvcnMgd2hvIG1hZGUgdGhlc2UKICAgICAgICAgICAgICAgICAgICBzdXBwbGljYXRpb25zLCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4gaGFkIGF0IHRoZSBzYW1lIHNlYXNvbiB0aGUgeWVhcgogICAgICAgICAgICAgICAgICAgIGJlZm9yZSwgaW4gY29uanVuY3Rpb24gd2l0aCBvdGhlciBzdGF0ZXMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB1bmRlcnRha2VuIGEgd2FyLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIHBlcnNldmVyZWQgdGhlIG1vc3Qgb2JzdGluYXRlbHkgb2YgYWxsIGluIHRoZWlyIHB1cnBvc2UsIGFuZCB3ZXJlIG5vdAogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgdG8gYSBwcm9wZXIgd2F5IG9mIHRoaW5raW5nIGJ5IHRoZSBzdWJtaXNzaW9uIG9mIHRoZSByZXN0OiB0aGF0IGhlIGtuZXcKICAgICAgICAgICAgICAgICAgICBhbmQgd2FzIGF3YXJlIHRoYXQgdGhlIGd1aWx0IG9mIGEgY3JpbWUgd2FzIGVhc2lseSB0cmFuc2ZlcnJlZCB0byB0aGUgZGVhZDsgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBubyBvbmUgcGVyc29uIGNvdWxkIGhhdmUgc3VjaCBpbmZsdWVuY2UsIGFzIHRvIGJlIGFibGUgYnkgdGhlIGZlZWJsZQogICAgICAgICAgICAgICAgICAgIHN1cHBvcnQgb2YgdGhlIG11bHRpdHVkZSB0byByYWlzZSBhIHdhciBhbmQgY2FycnkgaXQgb24gd2l0aG91dCB0aGUgY29uc2VudCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBub2JsZXMsIGluIG9wcG9zaXRpb24gdG8gdGhlIHNlbmF0ZSwgYW5kIGluIGRlc3BpdGUgb2YgZXZlcnkgdmlydHVvdXMgbWFuOwogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIgaGUgd2FzIHNhdGlzZmllZCB3aXRoIHRoZSBwdW5pc2htZW50LCB3aGljaCB0aGV5IGhhZCBkcmF3biB1cG9uCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiByZW1pbmRlZCB0aGUgZW1iYXNzYWRvcnMgd2hvIG1hZGUgdGhlc2UKICAgICAgICAgICAgICAgICAgICBzdXBwbGljYXRpb25zLCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4gaGFkIGF0IHRoZSBzYW1lIHNlYXNvbiB0aGUgeWVhcgogICAgICAgICAgICAgICAgICAgIGJlZm9yZSwgaW4gY29uanVuY3Rpb24gd2l0aCBvdGhlciBzdGF0ZXMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB1bmRlcnRha2VuIGEgd2FyLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIHBlcnNldmVyZWQgdGhlIG1vc3Qgb2JzdGluYXRlbHkgb2YgYWxsIGluIHRoZWlyIHB1cnBvc2UsIGFuZCB3ZXJlIG5vdAogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgdG8gYSBwcm9wZXIgd2F5IG9mIHRoaW5raW5nIGJ5IHRoZSBzdWJtaXNzaW9uIG9mIHRoZSByZXN0OiB0aGF0IGhlIGtuZXcKICAgICAgICAgICAgICAgICAgICBhbmQgd2FzIGF3YXJlIHRoYXQgdGhlIGd1aWx0IG9mIGEgY3JpbWUgd2FzIGVhc2lseSB0cmFuc2ZlcnJlZCB0byB0aGUgZGVhZDsgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBubyBvbmUgcGVyc29uIGNvdWxkIGhhdmUgc3VjaCBpbmZsdWVuY2UsIGFzIHRvIGJlIGFibGUgYnkgdGhlIGZlZWJsZQogICAgICAgICAgICAgICAgICAgIHN1cHBvcnQgb2YgdGhlIG11bHRpdHVkZSB0byByYWlzZSBhIHdhciBhbmQgY2FycnkgaXQgb24gd2l0aG91dCB0aGUgY29uc2VudCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBub2JsZXMsIGluIG9wcG9zaXRpb24gdG8gdGhlIHNlbmF0ZSwgYW5kIGluIGRlc3BpdGUgb2YgZXZlcnkgdmlydHVvdXMgbWFuOwogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIgaGUgd2FzIHNhdGlzZmllZCB3aXRoIHRoZSBwdW5pc2htZW50LCB3aGljaCB0aGV5IGhhZCBkcmF3biB1cG9uCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcy4gPC90cmFuc2xhdGlvbj4="
translation['8.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBuaWdodCBmb2xsb3dpbmcgdGhlIGVtYmFzc2Fkb3JzIGJyaW5nIGJhY2sgaGlzIGFuc3dlciB0byB0aGVpciBjb3VudHJ5bWVuIGFuZAogICAgICAgICAgICAgICAgICAgIHByZXBhcmUgdGhlIGhvc3RhZ2VzLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVtYmFzc2Fkb3JzPC9uYW1lPiBmbG9jayBpbiBmcm9tIHRoZSBvdGhlciBzdGF0ZXMsCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2VyZSB3YWl0aW5nIGZvciB0aGUgaXNzdWUgb2YgdGhlIFt3YXIgd2l0aCB0aGVdIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbG92YWNpPC9uYW1lPjoKICAgICAgICAgICAgICAgICAgICB0aGV5IGdpdmUgaG9zdGFnZXMsIGFuZCByZWNlaXZlIGhpcyBvcmRlcnM7IGFsbCBleGNlcHQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21pdXM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHdob3NlIGZlYXJzIHJlc3RyYWluZWQgaGltIGZyb20gaW50cnVzdGluZyBoaXMgc2FmZXR5IHRvIGFueSBwZXJzb24ncyBob25vci4gRm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIHllYXIgYmVmb3JlLCB3aGlsZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FzIGhvbGRpbmcgdGhlIGFzc2l6ZXMKICAgICAgICAgICAgICAgICAgICBpbiBIaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRpdHVzCiAgICAgICAgICAgICAgICAgICAgICAgIExhYmllbnVzPC9uYW1lPiwgaGF2aW5nIGRpc2NvdmVyZWQgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbWl1czwvbmFtZT4gd2FzIHRhbXBlcmluZwogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIHN0YXRlLCBhbmQgcmFpc2luZyBhIGNvbnNwaXJhY3kgYWdhaW5zdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHRob3VnaHQgaGUgbWlnaHQgcHVuaXNoIGhpcyBpbmZpZGVsaXR5IHdpdGhvdXQgcGVyZmlkeTsgYnV0CiAgICAgICAgICAgICAgICAgICAganVkZ2luZyB0aGF0IGhlIHdvdWxkIG5vdCBjb21lIHRvIGhpcyBjYW1wIGF0IGhpcyBpbnZpdGF0aW9uLCBhbmQgdW53aWxsaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgcHV0IGhpbSBvbiBoaXMgZ3VhcmQgYnkgdGhlIGF0dGVtcHQsIGhlIHNlbnQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBWb2x1c2VudXMKICAgICAgICAgICAgICAgICAgICAgICAgUXVhZHJhdHVzPC9uYW1lPiwgd2l0aCBvcmRlcnMgdG8gaGF2ZSBoaW0gcHV0IHRvIGRlYXRoIHVuZGVyIHByZXRlbnNlIG9mCiAgICAgICAgICAgICAgICAgICAgY29uZmVyZW5jZS4gVG8gZWZmZWN0IGhpcyBwdXJwb3NlLCBoZSBzZW50IHdpdGggaGltIHNvbWUgY2hvc2VuIGNlbnR1cmlvbnMuIFdoZW4KICAgICAgICAgICAgICAgICAgICB0aGV5IGNhbWUgdG8gdGhlIGNvbmZlcmVuY2UsIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPlZvbHVzZW51czwvbmFtZT4sIGFzIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgYWdyZWVkIG9uLCBoYWQgdGFrZW4gaG9sZCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbWl1czwvbmFtZT4gYnkgdGhlIGhhbmQsIGFuZCBvbmUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2VudHVyaW9ucywgYXMgaWYgc3VycHJpc2VkIGF0IHNvIHVuY29tbW9uIGFuIGluY2lkZW50LCBhdHRlbXB0ZWQgdG8ga2lsbCBoaW0sCiAgICAgICAgICAgICAgICAgICAgaGUgd2FzIHByZXZlbnRlZCBieSB0aGUgZnJpZW5kcyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbWl1czwvbmFtZT4sIGJ1dCB3b3VuZGVkIGhpbSBzZXZlcmVseQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBoZWFkIGJ5IHRoZSBmaXJzdCBibG93LiBTd29yZHMgd2VyZSBkcmF3biBvbiBib3RoIHNpZGVzLCBub3Qgc28gbXVjaCB3aXRoCiAgICAgICAgICAgICAgICAgICAgYSBkZXNpZ24gdG8gZmlnaHQgYXMgdG8gZWZmZWN0IGFuIGVzY2FwZSwgb3VyIG1lbiBiZWxpZXZpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbWl1czwvbmFtZT4gaGFkIHJlY2VpdmVkIGEgbW9ydGFsIHN0cm9rZTsgYW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+LCBmcm9tIHRoZSB0cmVhY2hlcnkgd2hpY2ggdGhleSBoYWQgc2VlbiwgZHJlYWRpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IGEgZGVlcGVyIGRlc2lnbiBsYXkgY29uY2VhbGVkLiBVcG9uIHRoaXMgdHJhbnNhY3Rpb24sIGl0IHdhcyBzYWlkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21pdXM8L25hbWU+IG1hZGUgYSByZXNvbHV0aW9uIG5ldmVyIHRvIGNvbWUgd2l0aGluIHNpZ2h0IG9mIGFueQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5FbWJhc3NhZG9yczwvbmFtZT4gZmxvY2sgaW4gZnJvbSB0aGUgb3RoZXIgc3RhdGVzLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdlcmUgd2FpdGluZyBmb3IgdGhlIGlzc3VlIG9mIHRoZSBbd2FyIHdpdGggdGhlXSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT46CiAgICAgICAgICAgICAgICAgICAgdGhleSBnaXZlIGhvc3RhZ2VzLCBhbmQgcmVjZWl2ZSBoaXMgb3JkZXJzOyBhbGwgZXhjZXB0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29taXVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aG9zZSBmZWFycyByZXN0cmFpbmVkIGhpbSBmcm9tIGludHJ1c3RpbmcgaGlzIHNhZmV0eSB0byBhbnkgcGVyc29uJ3MgaG9ub3IuIEZvcgogICAgICAgICAgICAgICAgICAgIHRoZSB5ZWFyIGJlZm9yZSwgd2hpbGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdhcyBob2xkaW5nIHRoZSBhc3NpemVzCiAgICAgICAgICAgICAgICAgICAgaW4gSGl0aGVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaXR1cwogICAgICAgICAgICAgICAgICAgICAgICBMYWJpZW51czwvbmFtZT4sIGhhdmluZyBkaXNjb3ZlcmVkIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21pdXM8L25hbWU+IHdhcyB0YW1wZXJpbmcKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBzdGF0ZSwgYW5kIHJhaXNpbmcgYSBjb25zcGlyYWN5IGFnYWluc3QgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCB0aG91Z2h0IGhlIG1pZ2h0IHB1bmlzaCBoaXMgaW5maWRlbGl0eSB3aXRob3V0IHBlcmZpZHk7IGJ1dAogICAgICAgICAgICAgICAgICAgIGp1ZGdpbmcgdGhhdCBoZSB3b3VsZCBub3QgY29tZSB0byBoaXMgY2FtcCBhdCBoaXMgaW52aXRhdGlvbiwgYW5kIHVud2lsbGluZyB0bwogICAgICAgICAgICAgICAgICAgIHB1dCBoaW0gb24gaGlzIGd1YXJkIGJ5IHRoZSBhdHRlbXB0LCBoZSBzZW50IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMgVm9sdXNlbnVzCiAgICAgICAgICAgICAgICAgICAgICAgIFF1YWRyYXR1czwvbmFtZT4sIHdpdGggb3JkZXJzIHRvIGhhdmUgaGltIHB1dCB0byBkZWF0aCB1bmRlciBwcmV0ZW5zZSBvZgogICAgICAgICAgICAgICAgICAgIGNvbmZlcmVuY2UuIFRvIGVmZmVjdCBoaXMgcHVycG9zZSwgaGUgc2VudCB3aXRoIGhpbSBzb21lIGNob3NlbiBjZW50dXJpb25zLiBXaGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBjYW1lIHRvIHRoZSBjb25mZXJlbmNlLCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5Wb2x1c2VudXM8L25hbWU+LCBhcyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGFncmVlZCBvbiwgaGFkIHRha2VuIGhvbGQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21pdXM8L25hbWU+IGJ5IHRoZSBoYW5kLCBhbmQgb25lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNlbnR1cmlvbnMsIGFzIGlmIHN1cnByaXNlZCBhdCBzbyB1bmNvbW1vbiBhbiBpbmNpZGVudCwgYXR0ZW1wdGVkIHRvIGtpbGwgaGltLAogICAgICAgICAgICAgICAgICAgIGhlIHdhcyBwcmV2ZW50ZWQgYnkgdGhlIGZyaWVuZHMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21pdXM8L25hbWU+LCBidXQgd291bmRlZCBoaW0gc2V2ZXJlbHkKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgaGVhZCBieSB0aGUgZmlyc3QgYmxvdy4gU3dvcmRzIHdlcmUgZHJhd24gb24gYm90aCBzaWRlcywgbm90IHNvIG11Y2ggd2l0aAogICAgICAgICAgICAgICAgICAgIGEgZGVzaWduIHRvIGZpZ2h0IGFzIHRvIGVmZmVjdCBhbiBlc2NhcGUsIG91ciBtZW4gYmVsaWV2aW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21pdXM8L25hbWU+IGhhZCByZWNlaXZlZCBhIG1vcnRhbCBzdHJva2U7IGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiwgZnJvbSB0aGUgdHJlYWNoZXJ5IHdoaWNoIHRoZXkgaGFkIHNlZW4sIGRyZWFkaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhIGRlZXBlciBkZXNpZ24gbGF5IGNvbmNlYWxlZC4gVXBvbiB0aGlzIHRyYW5zYWN0aW9uLCBpdCB3YXMgc2FpZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29taXVzPC9uYW1lPiBtYWRlIGEgcmVzb2x1dGlvbiBuZXZlciB0byBjb21lIHdpdGhpbiBzaWdodCBvZiBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['8.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgY29tcGxldGVseSBjb25xdWVyZWQgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICB3YXJsaWtlIG5hdGlvbnMsIHBlcmNlaXZlZCB0aGF0IHRoZXJlIHdhcyBub3cgbm8gc3RhdGUgd2hpY2ggY291bGQgbWFrZQogICAgICAgICAgICAgICAgICAgIHByZXBhcmF0aW9ucyBmb3Igd2FyIHRvIG9wcG9zZSBoaW0sIGJ1dCB0aGF0IHNvbWUgd2VyZSByZW1vdmluZyBhbmQgZmxlZWluZyBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY291bnRyeSB0byBhdm9pZCBwcmVzZW50IHN1YmplY3Rpb24sIGhlIHJlc29sdmVkIHRvIGRldGFjaCBoaXMgYXJteSBpbnRvCiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW50IHBhcnRzIG9mIHRoZSBjb3VudHJ5LiBIZSBrZXB0IHdpdGggaGltc2VsZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmN1cwogICAgICAgICAgICAgICAgICAgICAgICBBbnRvbml1czwvbmFtZT4gdGhlIHF1YWVzdG9yLCB3aXRoIHRoZSBlbGV2ZW50aCBsZWdpb247IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMKICAgICAgICAgICAgICAgICAgICAgICAgRmFiaXVzPC9uYW1lPiB3YXMgZGV0YWNoZWQgd2l0aCB0d2VudHktZml2ZSBjb2hvcnRzIGludG8gdGhlIHJlbW90ZXN0IHBhcnQKICAgICAgICAgICAgICAgICAgICBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGJlY2F1c2UgaXQgd2FzIHJ1bW9yZWQgdGhhdCBzb21lIHN0YXRlcyBoYWQgcmlzZW4gaW4gYXJtcywgYW5kCiAgICAgICAgICAgICAgICAgICAgaGUgZGlkIG5vdCB0aGluayB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMgQ2FuaW5pdXMgUmViaWx1czwvbmFtZT4sIHdobyBoYWQgdGhlIGNoYXJnZSBvZgogICAgICAgICAgICAgICAgICAgIHRoYXQgY291bnRyeSwgd2FzIHN0cm9uZyBlbm91Z2ggdG8gcHJvdGVjdCBpdCB3aXRoIHR3byBsZWdpb25zLiBIZSBvcmRlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGl0dXMgTGFiaWVudXM8L25hbWU+IHRvIGF0dGVuZCBoaW1zZWxmLCBhbmQgc2VudCB0aGUgdHdlbGZ0aCBsZWdpb24KICAgICAgICAgICAgICAgICAgICB3aGljaCBoYWQgYmVlbiB1bmRlciBoaW0gaW4gd2ludGVyIHF1YXJ0ZXJzLCB0byBIaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB0byBwcm90ZWN0CiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gY29sb25pZXMsIGFuZCBwcmV2ZW50IGFueSBsb3NzIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGlucm9hZHMgb2YgYmFyYmFyaWFucyBzaW1pbGFyIHRvIHRoYXQgd2hpY2ggaGFkIGhhcHBlbmVkIHRoZSB5ZWFyIGJlZm9yZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UZXJnZXN0aW5lczwvbmFtZT4sIHdobyB3ZXJlIGN1dCBvZmYgYnkgYSBzdWRkZW4gZGVwcmVkYXRpb24gYW5kCiAgICAgICAgICAgICAgICAgICAgYXR0YWNrLiBIZSBoaW1zZWxmIG1hcmNoZWQgdG8gZGVwb3B1bGF0ZSB0aGUgY291bnRyeSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aG9tIGhlIGhhZCB0ZXJyaWZpZWQgYW5kIGZvcmNlZCB0byBmbHksIGJ1dCBkZXNwYWlyZWQgb2YgYmVpbmcgYWJsZSB0byByZWR1Y2UKICAgICAgICAgICAgICAgICAgICB1bmRlciBoaXMgcG93ZXI7IGJ1dCBoZSB0aG91Z2h0IGl0IG1vc3QgY29uc2lzdGVudCB3aXRoIGhpcyBob25vciB0byB3YXN0ZSBoaXMKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5IGJvdGggb2YgaW5oYWJpdGFudHMsIGNhdHRsZSwgYW5kIGJ1aWxkaW5ncywgc28gdGhhdCBmcm9tIHRoZSBhYmhvcnJlbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGNvdW50cnltZW4sIGlmIGZvcnR1bmUgc3VmZmVyZWQgYW55IHRvIHN1cnZpdmUsIGhlIG1pZ2h0IGJlIGV4Y2x1ZGVkIGZyb20KICAgICAgICAgICAgICAgICAgICBhIHJldHVybiB0byBoaXMgc3RhdGUgZm9yIHRoZSBjYWxhbWl0aWVzIHdoaWNoIGhlIGhhZCBicm91Z2h0IG9uIGl0LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoYXZpbmcgY29tcGxldGVseSBjb25xdWVyZWQgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICB3YXJsaWtlIG5hdGlvbnMsIHBlcmNlaXZlZCB0aGF0IHRoZXJlIHdhcyBub3cgbm8gc3RhdGUgd2hpY2ggY291bGQgbWFrZQogICAgICAgICAgICAgICAgICAgIHByZXBhcmF0aW9ucyBmb3Igd2FyIHRvIG9wcG9zZSBoaW0sIGJ1dCB0aGF0IHNvbWUgd2VyZSByZW1vdmluZyBhbmQgZmxlZWluZyBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY291bnRyeSB0byBhdm9pZCBwcmVzZW50IHN1YmplY3Rpb24sIGhlIHJlc29sdmVkIHRvIGRldGFjaCBoaXMgYXJteSBpbnRvCiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW50IHBhcnRzIG9mIHRoZSBjb3VudHJ5LiBIZSBrZXB0IHdpdGggaGltc2VsZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmN1cwogICAgICAgICAgICAgICAgICAgICAgICBBbnRvbml1czwvbmFtZT4gdGhlIHF1YWVzdG9yLCB3aXRoIHRoZSBlbGV2ZW50aCBsZWdpb247IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMKICAgICAgICAgICAgICAgICAgICAgICAgRmFiaXVzPC9uYW1lPiB3YXMgZGV0YWNoZWQgd2l0aCB0d2VudHktZml2ZSBjb2hvcnRzIGludG8gdGhlIHJlbW90ZXN0IHBhcnQKICAgICAgICAgICAgICAgICAgICBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGJlY2F1c2UgaXQgd2FzIHJ1bW9yZWQgdGhhdCBzb21lIHN0YXRlcyBoYWQgcmlzZW4gaW4gYXJtcywgYW5kCiAgICAgICAgICAgICAgICAgICAgaGUgZGlkIG5vdCB0aGluayB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMgQ2FuaW5pdXMgUmViaWx1czwvbmFtZT4sIHdobyBoYWQgdGhlIGNoYXJnZSBvZgogICAgICAgICAgICAgICAgICAgIHRoYXQgY291bnRyeSwgd2FzIHN0cm9uZyBlbm91Z2ggdG8gcHJvdGVjdCBpdCB3aXRoIHR3byBsZWdpb25zLiBIZSBvcmRlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGl0dXMgTGFiaWVudXM8L25hbWU+IHRvIGF0dGVuZCBoaW1zZWxmLCBhbmQgc2VudCB0aGUgdHdlbGZ0aCBsZWdpb24KICAgICAgICAgICAgICAgICAgICB3aGljaCBoYWQgYmVlbiB1bmRlciBoaW0gaW4gd2ludGVyIHF1YXJ0ZXJzLCB0byBIaXRoZXIgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCB0byBwcm90ZWN0CiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gY29sb25pZXMsIGFuZCBwcmV2ZW50IGFueSBsb3NzIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGlucm9hZHMgb2YgYmFyYmFyaWFucyBzaW1pbGFyIHRvIHRoYXQgd2hpY2ggaGFkIGhhcHBlbmVkIHRoZSB5ZWFyIGJlZm9yZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5UZXJnZXN0aW5lczwvbmFtZT4sIHdobyB3ZXJlIGN1dCBvZmYgYnkgYSBzdWRkZW4gZGVwcmVkYXRpb24gYW5kCiAgICAgICAgICAgICAgICAgICAgYXR0YWNrLiBIZSBoaW1zZWxmIG1hcmNoZWQgdG8gZGVwb3B1bGF0ZSB0aGUgY291bnRyeSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFtYmlvcml4PC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aG9tIGhlIGhhZCB0ZXJyaWZpZWQgYW5kIGZvcmNlZCB0byBmbHksIGJ1dCBkZXNwYWlyZWQgb2YgYmVpbmcgYWJsZSB0byByZWR1Y2UKICAgICAgICAgICAgICAgICAgICB1bmRlciBoaXMgcG93ZXI7IGJ1dCBoZSB0aG91Z2h0IGl0IG1vc3QgY29uc2lzdGVudCB3aXRoIGhpcyBob25vciB0byB3YXN0ZSBoaXMKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5IGJvdGggb2YgaW5oYWJpdGFudHMsIGNhdHRsZSwgYW5kIGJ1aWxkaW5ncywgc28gdGhhdCBmcm9tIHRoZSBhYmhvcnJlbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGNvdW50cnltZW4sIGlmIGZvcnR1bmUgc3VmZmVyZWQgYW55IHRvIHN1cnZpdmUsIGhlIG1pZ2h0IGJlIGV4Y2x1ZGVkIGZyb20KICAgICAgICAgICAgICAgICAgICBhIHJldHVybiB0byBoaXMgc3RhdGUgZm9yIHRoZSBjYWxhbWl0aWVzIHdoaWNoIGhlIGhhZCBicm91Z2h0IG9uIGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['8.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIGhlIGhhZCBzZW50IGVpdGhlciBoaXMgbGVnaW9ucyBvciBhdXhpbGlhcmllcyB0aHJvdWdoIGV2ZXJ5IHBhcnQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4ncyBkb21pbmlvbnMsIGFuZCB3YXN0ZWQgdGhlIHdob2xlIGNvdW50cnkgYnkgc3dvcmQsCiAgICAgICAgICAgICAgICAgICAgZmlyZSwgYW5kIHJhcGluZSwgYW5kIGhhZCBraWxsZWQgb3IgdGFrZW4gcHJvZGlnaW91cyBudW1iZXJzLCBoZSBzZW50IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+IHdpdGggdHdvIGxlZ2lvbnMgYWdhaW5zdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiwgd2hvc2Ugc3RhdGUsIGZyb20gaXRzIHZpY2luaXR5IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDA4NCIgcmVnPSIgICtHZXJtYW55IFsxMC41LDUxLjVdIChuYXRpb24pLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VybWFueSA8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGVuZ2FnZWQgaW4gY29uc3RhbnQgd2FyLCBkaWZmZXJlZCBidXQgbGl0dGxlIGZyb20gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgaW4gY2l2aWxpemF0aW9uIGFuZCBzYXZhZ2UgYmFyYmFyaXR5OyBhbmQgbmV2ZXIgY29udGludWVkCiAgICAgICAgICAgICAgICAgICAgaW4gaXRzIGFsbGVnaWFuY2UsIGV4Y2VwdCB3aGVuIGF3ZWQgYnkgdGhlIHByZXNlbmNlIG9mIGhpcyBhcm15LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWJpb3JpeDwvbmFtZT4ncyBkb21pbmlvbnMsIGFuZCB3YXN0ZWQgdGhlIHdob2xlIGNvdW50cnkgYnkgc3dvcmQsCiAgICAgICAgICAgICAgICAgICAgZmlyZSwgYW5kIHJhcGluZSwgYW5kIGhhZCBraWxsZWQgb3IgdGFrZW4gcHJvZGlnaW91cyBudW1iZXJzLCBoZSBzZW50IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+IHdpdGggdHdvIGxlZ2lvbnMgYWdhaW5zdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiwgd2hvc2Ugc3RhdGUsIGZyb20gaXRzIHZpY2luaXR5IHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDA4NCIgcmVnPSIgICtHZXJtYW55IFsxMC41LDUxLjVdIChuYXRpb24pLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+R2VybWFueSA8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGVuZ2FnZWQgaW4gY29uc3RhbnQgd2FyLCBkaWZmZXJlZCBidXQgbGl0dGxlIGZyb20gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgaW4gY2l2aWxpemF0aW9uIGFuZCBzYXZhZ2UgYmFyYmFyaXR5OyBhbmQgbmV2ZXIgY29udGludWVkCiAgICAgICAgICAgICAgICAgICAgaW4gaXRzIGFsbGVnaWFuY2UsIGV4Y2VwdCB3aGVuIGF3ZWQgYnkgdGhlIHByZXNlbmNlIG9mIGhpcyBhcm15LiA8L3RyYW5zbGF0aW9uPg=="
translation['8.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtZWFuIHRpbWUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBDYW5pbml1czwvbmFtZT4sIGEgbGlldXRlbmFudCwgaGF2aW5nIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb24gYnkgbGV0dGVycyBhbmQgbWVzc2FnZXMgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1cmFjaXVzPC9uYW1lPiwgd2hvIGhhZCBhbHdheXMKICAgICAgICAgICAgICAgICAgICBjb250aW51ZWQgaW4gZnJpZW5kc2hpcCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIHRob3VnaCBhCiAgICAgICAgICAgICAgICAgICAgcGFydCBvZiBoaXMgc3RhdGUgaGFkIHJldm9sdGVkLCB0aGF0IGEgZ3JlYXQgbXVsdGl0dWRlIG9mIHRoZSBlbmVteSB3ZXJlIGluIGFybXMKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaWN0b25lczwvbmFtZT4sIG1hcmNoZWQgdG8gdGhlIHRvd24gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NDE4IiByZWc9IiAgK1BvaXRpZXJzIFswLjMzMyw0Ni41ODNdIChpbmhhYml0ZWQgcGxhY2UpLCBWaWVubmUsIFBvaXRvdS1DaGFyZW50ZXMsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkxpbW9udW0gPC9uYW1lPi4gV2hlbiBoZSB3YXMgYXBwcm9hY2hpbmcgaXQsIGhlIHdhcyBpbmZvcm1lZCBieSBzb21lCiAgICAgICAgICAgICAgICAgICAgcHJpc29uZXJzLCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVyYWNpdXM8L25hbWU+IHdhcyBzaHV0IHVwIGJ5IHNldmVyYWwgdGhvdXNhbmQgbWVuLCB1bmRlcgogICAgICAgICAgICAgICAgICAgIHRoZSBjb21tYW5kIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbmFjdXM8L25hbWU+LCBnZW5lcmFsIG9mIHRoZSBBbmRlcywgYW5kIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NDE4IiByZWc9IiAgK1BvaXRpZXJzIFswLjMzMyw0Ni41ODNdIChpbmhhYml0ZWQgcGxhY2UpLCBWaWVubmUsIFBvaXRvdS1DaGFyZW50ZXMsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkxpbW9udW0gPC9uYW1lPiB3YXMgYmVzaWVnZWQsIGJ1dCBub3QgZGFyaW5nIHRvIGZhY2UgdGhlIGVuZW15IHdpdGggaGlzCiAgICAgICAgICAgICAgICAgICAgd2VhayBsZWdpb25zLCBoZSBlbmNhbXBlZCBpbiBhIHN0cm9uZyBwb3NpdGlvbjogPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1uYWN1czwvbmFtZT4sIGhhdmluZwogICAgICAgICAgICAgICAgICAgIG5vdGljZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbmluaXVzPC9uYW1lPidzIGFwcHJvYWNoLCB0dXJuZWQgaGlzIHdob2xlIGZvcmNlIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucywgYW5kIHByZXBhcmVkIHRvIGFzc2F1bHQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gY2FtcC4gQnV0CiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgc3BlbmRpbmcgc2V2ZXJhbCBkYXlzIGluIHRoZSBhdHRlbXB0LCBhbmQgbG9zaW5nIGEgY29uc2lkZXJhYmxlIG51bWJlciBvZgogICAgICAgICAgICAgICAgICAgIG1lbiwgd2l0aG91dCBiZWluZyBhYmxlIHRvIG1ha2UgYSBicmVhY2ggaW4gYW55IHBhcnQgb2YgdGhlIHdvcmtzLCBoZSByZXR1cm5lZAogICAgICAgICAgICAgICAgICAgIGFnYWluIHRvIHRoZSBzaWVnZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTgiIHJlZz0iICArUG9pdGllcnMgWzAuMzMzLDQ2LjU4M10gKGluaGFiaXRlZCBwbGFjZSksIFZpZW5uZSwgUG9pdG91LUNoYXJlbnRlcywgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TGltb251bSA8L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBDYW5pbml1czwvbmFtZT4sIGEgbGlldXRlbmFudCwgaGF2aW5nIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb24gYnkgbGV0dGVycyBhbmQgbWVzc2FnZXMgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1cmFjaXVzPC9uYW1lPiwgd2hvIGhhZCBhbHdheXMKICAgICAgICAgICAgICAgICAgICBjb250aW51ZWQgaW4gZnJpZW5kc2hpcCB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBwZW9wbGUsIHRob3VnaCBhCiAgICAgICAgICAgICAgICAgICAgcGFydCBvZiBoaXMgc3RhdGUgaGFkIHJldm9sdGVkLCB0aGF0IGEgZ3JlYXQgbXVsdGl0dWRlIG9mIHRoZSBlbmVteSB3ZXJlIGluIGFybXMKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaWN0b25lczwvbmFtZT4sIG1hcmNoZWQgdG8gdGhlIHRvd24gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NDE4IiByZWc9IiAgK1BvaXRpZXJzIFswLjMzMyw0Ni41ODNdIChpbmhhYml0ZWQgcGxhY2UpLCBWaWVubmUsIFBvaXRvdS1DaGFyZW50ZXMsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkxpbW9udW0gPC9uYW1lPi4gV2hlbiBoZSB3YXMgYXBwcm9hY2hpbmcgaXQsIGhlIHdhcyBpbmZvcm1lZCBieSBzb21lCiAgICAgICAgICAgICAgICAgICAgcHJpc29uZXJzLCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVyYWNpdXM8L25hbWU+IHdhcyBzaHV0IHVwIGJ5IHNldmVyYWwgdGhvdXNhbmQgbWVuLCB1bmRlcgogICAgICAgICAgICAgICAgICAgIHRoZSBjb21tYW5kIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbmFjdXM8L25hbWU+LCBnZW5lcmFsIG9mIHRoZSBBbmRlcywgYW5kIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NDE4IiByZWc9IiAgK1BvaXRpZXJzIFswLjMzMyw0Ni41ODNdIChpbmhhYml0ZWQgcGxhY2UpLCBWaWVubmUsIFBvaXRvdS1DaGFyZW50ZXMsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPkxpbW9udW0gPC9uYW1lPiB3YXMgYmVzaWVnZWQsIGJ1dCBub3QgZGFyaW5nIHRvIGZhY2UgdGhlIGVuZW15IHdpdGggaGlzCiAgICAgICAgICAgICAgICAgICAgd2VhayBsZWdpb25zLCBoZSBlbmNhbXBlZCBpbiBhIHN0cm9uZyBwb3NpdGlvbjogPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1uYWN1czwvbmFtZT4sIGhhdmluZwogICAgICAgICAgICAgICAgICAgIG5vdGljZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbmluaXVzPC9uYW1lPidzIGFwcHJvYWNoLCB0dXJuZWQgaGlzIHdob2xlIGZvcmNlIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucywgYW5kIHByZXBhcmVkIHRvIGFzc2F1bHQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gY2FtcC4gQnV0CiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgc3BlbmRpbmcgc2V2ZXJhbCBkYXlzIGluIHRoZSBhdHRlbXB0LCBhbmQgbG9zaW5nIGEgY29uc2lkZXJhYmxlIG51bWJlciBvZgogICAgICAgICAgICAgICAgICAgIG1lbiwgd2l0aG91dCBiZWluZyBhYmxlIHRvIG1ha2UgYSBicmVhY2ggaW4gYW55IHBhcnQgb2YgdGhlIHdvcmtzLCBoZSByZXR1cm5lZAogICAgICAgICAgICAgICAgICAgIGFnYWluIHRvIHRoZSBzaWVnZSBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc0MTgiIHJlZz0iICArUG9pdGllcnMgWzAuMzMzLDQ2LjU4M10gKGluaGFiaXRlZCBwbGFjZSksIFZpZW5uZSwgUG9pdG91LUNoYXJlbnRlcywgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TGltb251bSA8L25hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['8.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkF0IHRoZSBzYW1lIHRpbWUsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMgRmFiaXVzPC9uYW1lPiwgYSBsaWV1dGVuYW50LCBicmluZ3MgYmFjayBtYW55CiAgICAgICAgICAgICAgICAgICAgc3RhdGVzIHRvIHRoZWlyIGFsbGVnaWFuY2UsIGFuZCBjb25maXJtcyB0aGVpciBzdWJtaXNzaW9uIGJ5IHRha2luZyBob3N0YWdlczsgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgdGhlbiBpbmZvcm1lZCBieSBsZXR0ZXJzIGZyb20gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW5pbml1czwvbmFtZT4sIG9mIHRoZSBwcm9jZWVkaW5ncwogICAgICAgICAgICAgICAgICAgIGFtb25nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlBpY3RvbmVzPC9uYW1lPi4gVXBvbiB3aGljaCBoZSBzZXQgb2ZmIHRvIGJyaW5nIGFzc2lzdGFuY2UgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdXJhY2l1czwvbmFtZT4uIEJ1dCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5hY3VzPC9uYW1lPiwgaGVhcmluZyBvZiB0aGUgYXBwcm9hY2ggb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5GYWJpdXM8L25hbWU+LCBhbmQgZGVzcGFpcmluZyBvZiBzYWZldHksIGlmIGF0IHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgdGltZSBoZSBzaG91bGQgYmUgZm9yY2VkIHRvIHdpdGhzdGFuZCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBhcm15CiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCwgYW5kIG9ic2VydmUsIGFuZCBiZSB1bmRlciBhcHByZWhlbnNpb24gZnJvbSB0aGUgdG93bidzIHBlb3BsZSwgbWFkZSBhCiAgICAgICAgICAgICAgICAgICAgcHJlY2lwaXRhdGUgcmV0cmVhdCBmcm9tIHRoYXQgcGxhY2Ugd2l0aCBhbGwgaGlzIGZvcmNlcy4gTm9yIGRpZCBoZSB0aGluayB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgc2hvdWxkIGJlIHN1ZmZpY2llbnRseSBzZWN1cmUgZnJvbSBkYW5nZXIsIHVubGVzcyBoZSBsZWQgaGlzIGFybXkgYWNyb3NzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIyNDkiIHJlZz0iICArTG9pcmUgKHJpdmVyKSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TG9pcmUgPC9uYW1lPiwgd2hpY2ggd2FzIHRvbyBkZWVwIGEgcml2ZXIgdG8gcGFzcyBleGNlcHQgYnkgYSBicmlkZ2UuCiAgICAgICAgICAgICAgICAgICAgVGhvdWdoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+RmFiaXVzPC9uYW1lPiBoYWQgbm90IHlldCBjb21lIHdpdGhpbiBzaWdodCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVteSwgbm9yIGpvaW5lZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbmluaXVzPC9uYW1lPjsgeWV0IGJlaW5nIGluZm9ybWVkIG9mIHRoZSBuYXR1cmUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY291bnRyeSwgYnkgcGVyc29ucyBhY3F1YWludGVkIHdpdGggaXQsIGhlIGp1ZGdlZCBpdCBtb3N0IGxpa2VseSB0aGF0IHRoZSBlbmVteQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHRha2UgdGhhdCB3YXksIHdoaWNoIGhlIGZvdW5kIHRoZXkgZGlkIHRha2UuIEhlIHRoZXJlZm9yZSBtYXJjaGVkIHRvIHRoYXQKICAgICAgICAgICAgICAgICAgICBicmlkZ2Ugd2l0aCBoaXMgYXJteSwgYW5kIG9yZGVyZWQgaGlzIGNhdmFscnkgdG8gYWR2YW5jZSBubyBmYXJ0aGVyIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICBsZWdpb25zIHRoYW4gdGhhdCB0aGV5IGNvdWxkIHJldHVybiB0byB0aGUgc2FtZSBjYW1wIGF0IG5pZ2h0LCB3aXRob3V0IGZhdGlndWluZwogICAgICAgICAgICAgICAgICAgIHRoZWlyIGhvcnNlcy4gT3VyIGhvcnNlIHB1cnN1ZWQgYWNjb3JkaW5nIHRvIG9yZGVycywgYW5kIGZlbGwgdXBvbgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5hY3VzPC9uYW1lPidzIHJlYXIgYW5kIGF0dGFja2luZyB0aGVtIG9uIHRoZWlyIG1hcmNoLCB3aGlsZQogICAgICAgICAgICAgICAgICAgIGZsZWVpbmcsIGRpc21heWVkLCBhbmQgbGFkZW4gd2l0aCBiYWdnYWdlLCB0aGV5IHNsZXcgYSBncmVhdCBudW1iZXIsIGFuZCB0b29rIGEKICAgICAgICAgICAgICAgICAgICByaWNoIGJvb3R5LiBIYXZpbmcgZXhlY3V0ZWQgdGhlIGFmZmFpciBzbyBzdWNjZXNzZnVsbHksIHRoZXkgcmV0aXJlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjYW1wLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBGYWJpdXM8L25hbWU+LCBhIGxpZXV0ZW5hbnQsIGJyaW5ncyBiYWNrIG1hbnkKICAgICAgICAgICAgICAgICAgICBzdGF0ZXMgdG8gdGhlaXIgYWxsZWdpYW5jZSwgYW5kIGNvbmZpcm1zIHRoZWlyIHN1Ym1pc3Npb24gYnkgdGFraW5nIGhvc3RhZ2VzOyBoZQogICAgICAgICAgICAgICAgICAgIHdhcyB0aGVuIGluZm9ybWVkIGJ5IGxldHRlcnMgZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbmluaXVzPC9uYW1lPiwgb2YgdGhlIHByb2NlZWRpbmdzCiAgICAgICAgICAgICAgICAgICAgYW1vbmcgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGljdG9uZXM8L25hbWU+LiBVcG9uIHdoaWNoIGhlIHNldCBvZmYgdG8gYnJpbmcgYXNzaXN0YW5jZSB0bwogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1cmFjaXVzPC9uYW1lPi4gQnV0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbmFjdXM8L25hbWU+LCBoZWFyaW5nIG9mIHRoZSBhcHByb2FjaCBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkZhYml1czwvbmFtZT4sIGFuZCBkZXNwYWlyaW5nIG9mIHNhZmV0eSwgaWYgYXQgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICB0aW1lIGhlIHNob3VsZCBiZSBmb3JjZWQgdG8gd2l0aHN0YW5kIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGFybXkKICAgICAgICAgICAgICAgICAgICB3aXRob3V0LCBhbmQgb2JzZXJ2ZSwgYW5kIGJlIHVuZGVyIGFwcHJlaGVuc2lvbiBmcm9tIHRoZSB0b3duJ3MgcGVvcGxlLCBtYWRlIGEKICAgICAgICAgICAgICAgICAgICBwcmVjaXBpdGF0ZSByZXRyZWF0IGZyb20gdGhhdCBwbGFjZSB3aXRoIGFsbCBoaXMgZm9yY2VzLiBOb3IgZGlkIGhlIHRoaW5rIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBzaG91bGQgYmUgc3VmZmljaWVudGx5IHNlY3VyZSBmcm9tIGRhbmdlciwgdW5sZXNzIGhlIGxlZCBoaXMgYXJteSBhY3Jvc3MgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjI0OSIgcmVnPSIgICtMb2lyZSAocml2ZXIpLCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5Mb2lyZSA8L25hbWU+LCB3aGljaCB3YXMgdG9vIGRlZXAgYSByaXZlciB0byBwYXNzIGV4Y2VwdCBieSBhIGJyaWRnZS4KICAgICAgICAgICAgICAgICAgICBUaG91Z2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5GYWJpdXM8L25hbWU+IGhhZCBub3QgeWV0IGNvbWUgd2l0aGluIHNpZ2h0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15LCBub3Igam9pbmVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FuaW5pdXM8L25hbWU+OyB5ZXQgYmVpbmcgaW5mb3JtZWQgb2YgdGhlIG5hdHVyZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LCBieSBwZXJzb25zIGFjcXVhaW50ZWQgd2l0aCBpdCwgaGUganVkZ2VkIGl0IG1vc3QgbGlrZWx5IHRoYXQgdGhlIGVuZW15CiAgICAgICAgICAgICAgICAgICAgd291bGQgdGFrZSB0aGF0IHdheSwgd2hpY2ggaGUgZm91bmQgdGhleSBkaWQgdGFrZS4gSGUgdGhlcmVmb3JlIG1hcmNoZWQgdG8gdGhhdAogICAgICAgICAgICAgICAgICAgIGJyaWRnZSB3aXRoIGhpcyBhcm15LCBhbmQgb3JkZXJlZCBoaXMgY2F2YWxyeSB0byBhZHZhbmNlIG5vIGZhcnRoZXIgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIGxlZ2lvbnMgdGhhbiB0aGF0IHRoZXkgY291bGQgcmV0dXJuIHRvIHRoZSBzYW1lIGNhbXAgYXQgbmlnaHQsIHdpdGhvdXQgZmF0aWd1aW5nCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaG9yc2VzLiBPdXIgaG9yc2UgcHVyc3VlZCBhY2NvcmRpbmcgdG8gb3JkZXJzLCBhbmQgZmVsbCB1cG9uCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbmFjdXM8L25hbWU+J3MgcmVhciBhbmQgYXR0YWNraW5nIHRoZW0gb24gdGhlaXIgbWFyY2gsIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgZmxlZWluZywgZGlzbWF5ZWQsIGFuZCBsYWRlbiB3aXRoIGJhZ2dhZ2UsIHRoZXkgc2xldyBhIGdyZWF0IG51bWJlciwgYW5kIHRvb2sgYQogICAgICAgICAgICAgICAgICAgIHJpY2ggYm9vdHkuIEhhdmluZyBleGVjdXRlZCB0aGUgYWZmYWlyIHNvIHN1Y2Nlc3NmdWxseSwgdGhleSByZXRpcmVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbXAuIDwvdHJhbnNsYXRpb24+"
translation['8.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBuaWdodCBmb2xsb3dpbmcsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+RmFiaXVzPC9uYW1lPiBzZW50IGhpcyBob3JzZSBiZWZvcmUgaGltLAogICAgICAgICAgICAgICAgICAgIHdpdGggb3JkZXJzIHRvIGVuZ2FnZSB0aGUgZW5lbXksIGFuZCBkZWxheSB0aGVpciBtYXJjaCB0aWxsIGhlIGhpbXNlbGYgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgY29tZSB1cC4gVGhhdCBoaXMgb3JkZXJzIG1pZ2h0IGJlIGZhaXRoZnVsbHkgcGVyZm9ybWVkLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlF1aW50dXMgQXRpdXMKICAgICAgICAgICAgICAgICAgICAgICAgVmFydXM8L25hbWU+LCBnZW5lcmFsIG9mIHRoZSBob3JzZSwgYSBtYW4gb2YgdW5jb21tb24gc3Bpcml0IGFuZCBza2lsbCwKICAgICAgICAgICAgICAgICAgICBlbmNvdXJhZ2VkIGhpcyBtZW4sIGFuZCBwdXJzdWluZyB0aGUgZW5lbXksIGRpc3Bvc2VkIHNvbWUgb2YgaGlzIHRyb29wcyBpbgogICAgICAgICAgICAgICAgICAgIGNvbnZlbmllbnQgcGxhY2VzLCBhbmQgd2l0aCB0aGUgcmVzdCBnYXZlIGJhdHRsZSB0byB0aGUgZW5lbXkuIFRoZSBlbmVteSdzCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSBtYWRlIGEgYm9sZCBzdGFuZCwgdGhlIGZvb3QgcmVsaWV2aW5nIGVhY2ggb3RoZXIsIGFuZCBtYWtpbmcgYSBnZW5lcmFsCiAgICAgICAgICAgICAgICAgICAgaGFsdCwgdG8gYXNzaXN0IHRoZWlyIGhvcnNlIGFnYWluc3Qgb3Vycy4gVGhlIGJhdHRsZSB3YXMgd2FybWx5IGNvbnRlc3RlZC4gRm9yCiAgICAgICAgICAgICAgICAgICAgb3VyIG1lbiwgZGVzcGlzaW5nIHRoZSBlbmVteSB3aG9tIHRoZXkgaGFkIGNvbnF1ZXJlZCB0aGUgZGF5IGJlZm9yZSwgYW5kIGtub3dpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBsZWdpb25zIHdlcmUgZm9sbG93aW5nIHRoZW0sIGFuaW1hdGVkIGJvdGggYnkgdGhlIGRpc2dyYWNlIG9mCiAgICAgICAgICAgICAgICAgICAgcmV0cmVhdGluZywgYW5kIGEgZGVzaXJlIG9mIGNvbmNsdWRpbmcgdGhlIGJhdHRsZSBleHBlZGl0aW91c2x5IGJ5IHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIGNvdXJhZ2UsIGZvdWdodCBtb3N0IHZhbGlhbnRseSBhZ2FpbnN0IHRoZSBmb290OiBhbmQgdGhlIGVuZW15LCBpbWFnaW5pbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIG5vIG1vcmUgZm9yY2VzIHdvdWxkIGNvbWUgYWdhaW5zdCB0aGVtLCBhcyB0aGV5IGhhZCBleHBlcmllbmNlZCB0aGUgZGF5IGJlZm9yZSwKICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IHRoZXkgaGFkIGdvdCBhIGZhdm9yYWJsZSBvcHBvcnR1bml0eSBvZiBkZXN0cm95aW5nIG91ciB3aG9sZSBjYXZhbHJ5LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5GYWJpdXM8L25hbWU+IHNlbnQgaGlzIGhvcnNlIGJlZm9yZSBoaW0sCiAgICAgICAgICAgICAgICAgICAgd2l0aCBvcmRlcnMgdG8gZW5nYWdlIHRoZSBlbmVteSwgYW5kIGRlbGF5IHRoZWlyIG1hcmNoIHRpbGwgaGUgaGltc2VsZiBzaG91bGQKICAgICAgICAgICAgICAgICAgICBjb21lIHVwLiBUaGF0IGhpcyBvcmRlcnMgbWlnaHQgYmUgZmFpdGhmdWxseSBwZXJmb3JtZWQsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UXVpbnR1cyBBdGl1cwogICAgICAgICAgICAgICAgICAgICAgICBWYXJ1czwvbmFtZT4sIGdlbmVyYWwgb2YgdGhlIGhvcnNlLCBhIG1hbiBvZiB1bmNvbW1vbiBzcGlyaXQgYW5kIHNraWxsLAogICAgICAgICAgICAgICAgICAgIGVuY291cmFnZWQgaGlzIG1lbiwgYW5kIHB1cnN1aW5nIHRoZSBlbmVteSwgZGlzcG9zZWQgc29tZSBvZiBoaXMgdHJvb3BzIGluCiAgICAgICAgICAgICAgICAgICAgY29udmVuaWVudCBwbGFjZXMsIGFuZCB3aXRoIHRoZSByZXN0IGdhdmUgYmF0dGxlIHRvIHRoZSBlbmVteS4gVGhlIGVuZW15J3MKICAgICAgICAgICAgICAgICAgICBjYXZhbHJ5IG1hZGUgYSBib2xkIHN0YW5kLCB0aGUgZm9vdCByZWxpZXZpbmcgZWFjaCBvdGhlciwgYW5kIG1ha2luZyBhIGdlbmVyYWwKICAgICAgICAgICAgICAgICAgICBoYWx0LCB0byBhc3Npc3QgdGhlaXIgaG9yc2UgYWdhaW5zdCBvdXJzLiBUaGUgYmF0dGxlIHdhcyB3YXJtbHkgY29udGVzdGVkLiBGb3IKICAgICAgICAgICAgICAgICAgICBvdXIgbWVuLCBkZXNwaXNpbmcgdGhlIGVuZW15IHdob20gdGhleSBoYWQgY29ucXVlcmVkIHRoZSBkYXkgYmVmb3JlLCBhbmQga25vd2luZwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGxlZ2lvbnMgd2VyZSBmb2xsb3dpbmcgdGhlbSwgYW5pbWF0ZWQgYm90aCBieSB0aGUgZGlzZ3JhY2Ugb2YKICAgICAgICAgICAgICAgICAgICByZXRyZWF0aW5nLCBhbmQgYSBkZXNpcmUgb2YgY29uY2x1ZGluZyB0aGUgYmF0dGxlIGV4cGVkaXRpb3VzbHkgYnkgdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgY291cmFnZSwgZm91Z2h0IG1vc3QgdmFsaWFudGx5IGFnYWluc3QgdGhlIGZvb3Q6IGFuZCB0aGUgZW5lbXksIGltYWdpbmluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgbm8gbW9yZSBmb3JjZXMgd291bGQgY29tZSBhZ2FpbnN0IHRoZW0sIGFzIHRoZXkgaGFkIGV4cGVyaWVuY2VkIHRoZSBkYXkgYmVmb3JlLAogICAgICAgICAgICAgICAgICAgIHRob3VnaHQgdGhleSBoYWQgZ290IGEgZmF2b3JhYmxlIG9wcG9ydHVuaXR5IG9mIGRlc3Ryb3lpbmcgb3VyIHdob2xlIGNhdmFscnkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHRoZSBjb25mbGljdCBoYWQgY29udGludWVkIGZvciBzb21lIHRpbWUgd2l0aCBncmVhdCB2aW9sZW5jZSwKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1uYWN1czwvbmFtZT4gZHJldyBvdXQgaGlzIGFybXkgaW4gc3VjaCBhIG1hbm5lciwgdGhhdCB0aGUgZm9vdAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBieSB0dXJucyBhc3Npc3QgdGhlIGhvcnNlLiBUaGVuIHRoZSBsZWdpb25zLCBtYXJjaGluZyBpbiBjbG9zZSBvcmRlciwKICAgICAgICAgICAgICAgICAgICBjYW1lIHN1ZGRlbmx5IGluIHNpZ2h0IG9mIHRoZSBlbmVteS4gQXQgdGhpcyBzaWdodCwgdGhlIGJhcmJhcmlhbiBob3JzZSB3ZXJlIHNvCiAgICAgICAgICAgICAgICAgICAgYXN0b25pc2hlZCwgYW5kIHRoZSBmb290IHNvIHRlcnJpZmllZCwgdGhhdCBicmVha2luZyB0aHJvdWdoIHRoZSBsaW5lIG9mCiAgICAgICAgICAgICAgICAgICAgYmFnZ2FnZSwgdGhleSBiZXRvb2sgdGhlbXNlbHZlcyB0byBmbGlnaHQgd2l0aCBhIGxvdWQgc2hvdXQsIGFuZCBpbiBncmVhdAogICAgICAgICAgICAgICAgICAgIGRpc29yZGVyLiBCdXQgb3VyIGhvcnNlLCB3aG8gYSBsaXR0bGUgYmVmb3JlIGhhZCB2aWdvcm91c2x5IGVuZ2FnZWQgdGhlbSwgd2hpbGUKICAgICAgICAgICAgICAgICAgICB0aGV5IG1hZGUgcmVzaXN0YW5jZSwgYmVpbmcgZWxhdGVkIHdpdGggam95IGF0IHRoZWlyIHZpY3RvcnksIHJhaXNpbmcgYSBzaG91dCBvbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IHNpZGUsIHBvdXJlZCByb3VuZCB0aGVtIGFzIHRoZXkgcmFuLCBhbmQgYXMgbG9uZyBhcyB0aGVpciBob3JzZXMgaGFkCiAgICAgICAgICAgICAgICAgICAgc3RyZW5ndGggdG8gcHVyc3VlLCBvciB0aGVpciBhcm1zIHRvIGdpdmUgYSBibG93LCBzbyBsb25nIGRpZCB0aGV5IGNvbnRpbnVlIHRoZQogICAgICAgICAgICAgICAgICAgIHNsYXVnaHRlciBvZiB0aGUgZW5lbXkgaW4gdGhhdCBiYXR0bGUsIGFuZCBoYXZpbmcga2lsbGVkIGFib3ZlIHR3ZWx2ZSB0aG91c2FuZAogICAgICAgICAgICAgICAgICAgIG1lbiBpbiBhcm1zLCBvciBzdWNoIGFzIHRocmV3IGF3YXkgdGhlaXIgYXJtcyB0aHJvdWdoIGZlYXIsIHRoZXkgdG9vayB0aGVpcgogICAgICAgICAgICAgICAgICAgIHdob2xlIHRyYWluIG9mIGJhZ2dhZ2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5hY3VzPC9uYW1lPiBkcmV3IG91dCBoaXMgYXJteSBpbiBzdWNoIGEgbWFubmVyLCB0aGF0IHRoZSBmb290CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJ5IHR1cm5zIGFzc2lzdCB0aGUgaG9yc2UuIFRoZW4gdGhlIGxlZ2lvbnMsIG1hcmNoaW5nIGluIGNsb3NlIG9yZGVyLAogICAgICAgICAgICAgICAgICAgIGNhbWUgc3VkZGVubHkgaW4gc2lnaHQgb2YgdGhlIGVuZW15LiBBdCB0aGlzIHNpZ2h0LCB0aGUgYmFyYmFyaWFuIGhvcnNlIHdlcmUgc28KICAgICAgICAgICAgICAgICAgICBhc3RvbmlzaGVkLCBhbmQgdGhlIGZvb3Qgc28gdGVycmlmaWVkLCB0aGF0IGJyZWFraW5nIHRocm91Z2ggdGhlIGxpbmUgb2YKICAgICAgICAgICAgICAgICAgICBiYWdnYWdlLCB0aGV5IGJldG9vayB0aGVtc2VsdmVzIHRvIGZsaWdodCB3aXRoIGEgbG91ZCBzaG91dCwgYW5kIGluIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZGlzb3JkZXIuIEJ1dCBvdXIgaG9yc2UsIHdobyBhIGxpdHRsZSBiZWZvcmUgaGFkIHZpZ29yb3VzbHkgZW5nYWdlZCB0aGVtLCB3aGlsZQogICAgICAgICAgICAgICAgICAgIHRoZXkgbWFkZSByZXNpc3RhbmNlLCBiZWluZyBlbGF0ZWQgd2l0aCBqb3kgYXQgdGhlaXIgdmljdG9yeSwgcmFpc2luZyBhIHNob3V0IG9uCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgc2lkZSwgcG91cmVkIHJvdW5kIHRoZW0gYXMgdGhleSByYW4sIGFuZCBhcyBsb25nIGFzIHRoZWlyIGhvcnNlcyBoYWQKICAgICAgICAgICAgICAgICAgICBzdHJlbmd0aCB0byBwdXJzdWUsIG9yIHRoZWlyIGFybXMgdG8gZ2l2ZSBhIGJsb3csIHNvIGxvbmcgZGlkIHRoZXkgY29udGludWUgdGhlCiAgICAgICAgICAgICAgICAgICAgc2xhdWdodGVyIG9mIHRoZSBlbmVteSBpbiB0aGF0IGJhdHRsZSwgYW5kIGhhdmluZyBraWxsZWQgYWJvdmUgdHdlbHZlIHRob3VzYW5kCiAgICAgICAgICAgICAgICAgICAgbWVuIGluIGFybXMsIG9yIHN1Y2ggYXMgdGhyZXcgYXdheSB0aGVpciBhcm1zIHRocm91Z2ggZmVhciwgdGhleSB0b29rIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgdHJhaW4gb2YgYmFnZ2FnZS4gPC90cmFuc2xhdGlvbj4="
translation['8.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHRoaXMgZGVmZWF0LCB3aGVuIGl0IHdhcyBhc2NlcnRhaW5lZCB0aGF0IERyYXBlcywgYSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlbm9uaWFuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICh3aG8gaW4gdGhlIGJlZ2lubmluZyBvZiB0aGUgcmV2b2x0IG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBoYWQgY29sbGVjdGVkIGZyb20gYWxsCiAgICAgICAgICAgICAgICAgICAgcXVhcnRlcnMgbWVuIG9mIGRlc3BlcmF0ZSBmb3J0dW5lcywgaW52aXRlZCB0aGUgc2xhdmVzIHRvIGxpYmVydHksIGNhbGxlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBleGlsZXMgb2YgdGhlIHdob2xlIGtpbmdkb20sIGdpdmVuIGFuIGFzeWx1bSB0byByb2JiZXJzLCBhbmQgaW50ZXJjZXB0ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gYmFnZ2FnZSBhbmQgcHJvdmlzaW9ucyksIHdhcyBtYXJjaGluZyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBwcm92aW5jZSB3aXRoIGZpdmUgdGhvdXNhbmQgbWVuLCBiZWluZyBhbGwgaGUgY291bGQgY29sbGVjdCBhZnRlciB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlYXQsIGFuZCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THV0ZXJpdXM8L25hbWU+IGEgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWR1cmNpYW48L25hbWU+IHdobywgYXMgaXQgaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiBvYnNlcnZlZCBpbiBhIGZvcm1lciBjb21tZW50YXJ5LCBoYWQgZGVzaWduZWQgdG8gbWFrZSBhbiBhdHRhY2sgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgUHJvdmluY2UgaW4gdGhlIGZpcnN0IHJldm9sdCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4sIGhhZCBmb3JtZWQgYSBqdW5jdGlvbiB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGltLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIENhbmluaXVzPC9uYW1lPiB3ZW50IGluIHB1cnN1aXQgb2YgdGhlbSB3aXRoIHR3byBsZWdpb25zLCBsZXN0CiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgZGlzZ3JhY2UgbWlnaHQgYmUgaW5jdXJyZWQgZnJvbSB0aGUgZmVhcnMgb3IgaW5qdXJpZXMgZG9uZSB0byB0aGUgUHJvdmluY2UKICAgICAgICAgICAgICAgICAgICBieSB0aGUgZGVwcmVkYXRpb25zIG9mIGEgYmFuZCBvZiBkZXNwZXJhdGUgbWVuLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZW5vbmlhbjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAod2hvIGluIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHJldm9sdCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gaGFkIGNvbGxlY3RlZCBmcm9tIGFsbAogICAgICAgICAgICAgICAgICAgIHF1YXJ0ZXJzIG1lbiBvZiBkZXNwZXJhdGUgZm9ydHVuZXMsIGludml0ZWQgdGhlIHNsYXZlcyB0byBsaWJlcnR5LCBjYWxsZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZXhpbGVzIG9mIHRoZSB3aG9sZSBraW5nZG9tLCBnaXZlbiBhbiBhc3lsdW0gdG8gcm9iYmVycywgYW5kIGludGVyY2VwdGVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGJhZ2dhZ2UgYW5kIHByb3Zpc2lvbnMpLCB3YXMgbWFyY2hpbmcgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgcHJvdmluY2Ugd2l0aCBmaXZlIHRob3VzYW5kIG1lbiwgYmVpbmcgYWxsIGhlIGNvdWxkIGNvbGxlY3QgYWZ0ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZWF0LCBhbmQgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1dGVyaXVzPC9uYW1lPiBhIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FkdXJjaWFuPC9uYW1lPiB3aG8sIGFzIGl0IGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gb2JzZXJ2ZWQgaW4gYSBmb3JtZXIgY29tbWVudGFyeSwgaGFkIGRlc2lnbmVkIHRvIG1ha2UgYW4gYXR0YWNrIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIFByb3ZpbmNlIGluIHRoZSBmaXJzdCByZXZvbHQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBoYWQgZm9ybWVkIGEganVuY3Rpb24gd2l0aAogICAgICAgICAgICAgICAgICAgIGhpbSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBDYW5pbml1czwvbmFtZT4gd2VudCBpbiBwdXJzdWl0IG9mIHRoZW0gd2l0aCB0d28gbGVnaW9ucywgbGVzdAogICAgICAgICAgICAgICAgICAgIGdyZWF0IGRpc2dyYWNlIG1pZ2h0IGJlIGluY3VycmVkIGZyb20gdGhlIGZlYXJzIG9yIGluanVyaWVzIGRvbmUgdG8gdGhlIFByb3ZpbmNlCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIGRlcHJlZGF0aW9ucyBvZiBhIGJhbmQgb2YgZGVzcGVyYXRlIG1lbi4gPC90cmFuc2xhdGlvbj4="
translation['8.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMgRmFiaXVzPC9uYW1lPiBzZXQgb2ZmIHdpdGggdGhlIHJlc3Qgb2YgdGhlIGFybXkgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FybnV0ZXM8L25hbWU+IGFuZCB0aG9zZSBvdGhlciBzdGF0ZXMsIHdob3NlIGZvcmNlIGhlIHdhcyBpbmZvcm1lZCwKICAgICAgICAgICAgICAgICAgICBoYWQgc2VydmVkIGFzIGF1eGlsaWFyaWVzIGluIHRoYXQgYmF0dGxlLCB3aGljaCBoZSBmb3VnaHQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5hY3VzPC9uYW1lPi4gRm9yIGhlIGhhZCBubyBkb3VidCB0aGF0IHRoZXkgd291bGQgYmUgbW9yZQogICAgICAgICAgICAgICAgICAgIHN1Ym1pc3NpdmUgYWZ0ZXIgdGhlaXIgcmVjZW50IHN1ZmZlcmluZ3MsIGJ1dCBpZiByZXNwaXRlIGFuZCB0aW1lIHdlcmUgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICB0aGVtLCB0aGV5IG1pZ2h0IGJlIGVhc2lseSBleGNpdGVkIGJ5IHRoZSBlYXJuZXN0IHNvbGljaXRhdGlvbnMgb2YgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1uYWN1czwvbmFtZT4uIE9uIHRoaXMgb2NjYXNpb24gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5GYWJpdXM8L25hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgIGV4dHJlbWVseSBmb3J0dW5hdGUgYW5kIGV4cGVkaXRpb3VzIGluIHJlY292ZXJpbmcgdGhlIHN0YXRlcy4gRm9yIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPiwgd2hvLCB0aG91Z2ggb2Z0ZW4gaGFyYXNzZWQgaGFkIG5ldmVyIG1lbnRpb25lZCBwZWFjZSwKICAgICAgICAgICAgICAgICAgICBzdWJtaXR0ZWQgYW5kIGdhdmUgaG9zdGFnZXM6IGFuZCB0aGUgb3RoZXIgc3RhdGVzLCB3aGljaCBsaWUgaW4gdGhlIHJlbW90ZXN0CiAgICAgICAgICAgICAgICAgICAgcGFydHMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LCBhZGpvaW5pbmcgdGhlIG9jZWFuLCBhbmQKICAgICAgICAgICAgICAgICAgICB3aGljaCBhcmUgY2FsbGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJtb3JpY2FlPC9uYW1lPiwgaW5mbHVlbmNlZCBieSB0aGUgZXhhbXBsZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4sIGFzIHNvb24gYXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5GYWJpdXM8L25hbWU+IGFycml2ZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIGhpcyBsZWdpb25zLCB3aXRob3V0IGRlbGF5IGNvbXBseSB3aXRoIGhpcyBjb21tYW5kLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkR1bW5hY3VzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICBleHBlbGxlZCBmcm9tIGhpcyBvd24gdGVycml0b3JpZXMsIHdhbmRlcmluZyBhbmQgc2t1bGtpbmcgYWJvdXQsIHdhcyBmb3JjZWQgdG8KICAgICAgICAgICAgICAgICAgICBzZWVrIHJlZnVnZSBieSBoaW1zZWxmIGluIHRoZSBtb3N0IHJlbW90ZSBwYXJ0cyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIEZhYml1czwvbmFtZT4gc2V0IG9mZiB3aXRoIHRoZSByZXN0IG9mIHRoZSBhcm15IHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhcm51dGVzPC9uYW1lPiBhbmQgdGhvc2Ugb3RoZXIgc3RhdGVzLCB3aG9zZSBmb3JjZSBoZSB3YXMgaW5mb3JtZWQsCiAgICAgICAgICAgICAgICAgICAgaGFkIHNlcnZlZCBhcyBhdXhpbGlhcmllcyBpbiB0aGF0IGJhdHRsZSwgd2hpY2ggaGUgZm91Z2h0IGFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1uYWN1czwvbmFtZT4uIEZvciBoZSBoYWQgbm8gZG91YnQgdGhhdCB0aGV5IHdvdWxkIGJlIG1vcmUKICAgICAgICAgICAgICAgICAgICBzdWJtaXNzaXZlIGFmdGVyIHRoZWlyIHJlY2VudCBzdWZmZXJpbmdzLCBidXQgaWYgcmVzcGl0ZSBhbmQgdGltZSB3ZXJlIGdpdmVuCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgdGhleSBtaWdodCBiZSBlYXNpbHkgZXhjaXRlZCBieSB0aGUgZWFybmVzdCBzb2xpY2l0YXRpb25zIG9mIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHVtbmFjdXM8L25hbWU+LiBPbiB0aGlzIG9jY2FzaW9uIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+RmFiaXVzPC9uYW1lPiB3YXMKICAgICAgICAgICAgICAgICAgICBleHRyZW1lbHkgZm9ydHVuYXRlIGFuZCBleHBlZGl0aW91cyBpbiByZWNvdmVyaW5nIHRoZSBzdGF0ZXMuIEZvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXJudXRlczwvbmFtZT4sIHdobywgdGhvdWdoIG9mdGVuIGhhcmFzc2VkIGhhZCBuZXZlciBtZW50aW9uZWQgcGVhY2UsCiAgICAgICAgICAgICAgICAgICAgc3VibWl0dGVkIGFuZCBnYXZlIGhvc3RhZ2VzOiBhbmQgdGhlIG90aGVyIHN0YXRlcywgd2hpY2ggbGllIGluIHRoZSByZW1vdGVzdAogICAgICAgICAgICAgICAgICAgIHBhcnRzIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiwgYWRqb2luaW5nIHRoZSBvY2VhbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggYXJlIGNhbGxlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFybW9yaWNhZTwvbmFtZT4sIGluZmx1ZW5jZWQgYnkgdGhlIGV4YW1wbGUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FybnV0ZXM8L25hbWU+LCBhcyBzb29uIGFzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+RmFiaXVzPC9uYW1lPiBhcnJpdmVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaXMgbGVnaW9ucywgd2l0aG91dCBkZWxheSBjb21wbHkgd2l0aCBoaXMgY29tbWFuZC4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5EdW1uYWN1czwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgZXhwZWxsZWQgZnJvbSBoaXMgb3duIHRlcnJpdG9yaWVzLCB3YW5kZXJpbmcgYW5kIHNrdWxraW5nIGFib3V0LCB3YXMgZm9yY2VkIHRvCiAgICAgICAgICAgICAgICAgICAgc2VlayByZWZ1Z2UgYnkgaGltc2VsZiBpbiB0aGUgbW9zdCByZW1vdGUgcGFydHMgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['8.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IERyYXBlczwvbmFtZT4gaW4gY29uanVuY3Rpb24gd2l0aCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1dGVyaXVzPC9uYW1lPiwga25vd2luZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FuaW5pdXM8L25hbWU+IHdhcyBhdCBoYW5kIHdpdGggdGhlIGxlZ2lvbnMsIGFuZCB0aGF0IHRoZXkgdGhlbXNlbHZlcwogICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCB3aXRob3V0IGNlcnRhaW4gZGVzdHJ1Y3Rpb24gZW50ZXIgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHByb3ZpbmNlLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIGFuIGFybXkgd2FzIGluIHB1cnN1aXQgb2YgdGhlbSwgYW5kIGJlaW5nIG5vIGxvbmdlciBhdCBsaWJlcnR5IHRvIHJvYW0gdXAKICAgICAgICAgICAgICAgICAgICBhbmQgZG93biBhbmQgcGlsbGFnZSwgaGFsdCBpbiB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWR1cmNpPC9uYW1lPiwgYXMKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdXRlcml1czwvbmFtZT4gaGFkIG9uY2UgaW4gaGlzIHByb3NwZXJpdHkgcG9zc2Vzc2VkIGEgcG93ZXJmdWwKICAgICAgICAgICAgICAgICAgICBpbmZsdWVuY2Ugb3ZlciB0aGUgaW5oYWJpdGFudHMsIHdobyB3ZXJlIGhpcyBjb3VudHJ5bWVuLCBhbmQgYmVpbmcgYWx3YXlzIHRoZQogICAgICAgICAgICAgICAgICAgIGF1dGhvciBvZiBuZXcgcHJvamVjdHMsIGhhZCBjb25zaWRlcmFibGUgYXV0aG9yaXR5IGFtb25nIHRoZSBiYXJiYXJpYW5zOyB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBhbmQgRHJhcGVzJyB0cm9vcHMgaGUgc2VpemVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VXhlbGxvZHVudW08L25hbWU+LCBhIHRvd24gZm9ybWVybHkKICAgICAgICAgICAgICAgICAgICBpbiB2YXNzYWxhZ2UgdG8gaGltLCBhbmQgc3Ryb25nbHkgZm9ydGlmaWVkIGJ5IGl0cyBuYXR1cmFsIHNpdHVhdGlvbjsgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJldmFpbGVkIG9uIHRoZSBpbmhhYml0YW50cyB0byBqb2luIGhpbS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IERyYXBlczwvbmFtZT4gaW4gY29uanVuY3Rpb24gd2l0aCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1dGVyaXVzPC9uYW1lPiwga25vd2luZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FuaW5pdXM8L25hbWU+IHdhcyBhdCBoYW5kIHdpdGggdGhlIGxlZ2lvbnMsIGFuZCB0aGF0IHRoZXkgdGhlbXNlbHZlcwogICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCB3aXRob3V0IGNlcnRhaW4gZGVzdHJ1Y3Rpb24gZW50ZXIgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHByb3ZpbmNlLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIGFuIGFybXkgd2FzIGluIHB1cnN1aXQgb2YgdGhlbSwgYW5kIGJlaW5nIG5vIGxvbmdlciBhdCBsaWJlcnR5IHRvIHJvYW0gdXAKICAgICAgICAgICAgICAgICAgICBhbmQgZG93biBhbmQgcGlsbGFnZSwgaGFsdCBpbiB0aGUgY291bnRyeSBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWR1cmNpPC9uYW1lPiwgYXMKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdXRlcml1czwvbmFtZT4gaGFkIG9uY2UgaW4gaGlzIHByb3NwZXJpdHkgcG9zc2Vzc2VkIGEgcG93ZXJmdWwKICAgICAgICAgICAgICAgICAgICBpbmZsdWVuY2Ugb3ZlciB0aGUgaW5oYWJpdGFudHMsIHdobyB3ZXJlIGhpcyBjb3VudHJ5bWVuLCBhbmQgYmVpbmcgYWx3YXlzIHRoZQogICAgICAgICAgICAgICAgICAgIGF1dGhvciBvZiBuZXcgcHJvamVjdHMsIGhhZCBjb25zaWRlcmFibGUgYXV0aG9yaXR5IGFtb25nIHRoZSBiYXJiYXJpYW5zOyB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBhbmQgRHJhcGVzJyB0cm9vcHMgaGUgc2VpemVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VXhlbGxvZHVudW08L25hbWU+LCBhIHRvd24gZm9ybWVybHkKICAgICAgICAgICAgICAgICAgICBpbiB2YXNzYWxhZ2UgdG8gaGltLCBhbmQgc3Ryb25nbHkgZm9ydGlmaWVkIGJ5IGl0cyBuYXR1cmFsIHNpdHVhdGlvbjsgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJldmFpbGVkIG9uIHRoZSBpbmhhYml0YW50cyB0byBqb2luIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['8.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FuaW5pdXM8L25hbWU+IGhhZCByYXBpZGx5IG1hcmNoZWQgdG8gdGhpcyBwbGFjZSwgYW5kIHBlcmNlaXZlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgYWxsIHBhcnRzIG9mIHRoZSB0b3duIHdlcmUgc2VjdXJlZCBieSB2ZXJ5IGNyYWdneSByb2Nrcywgd2hpY2ggaXQgd291bGQgYmUKICAgICAgICAgICAgICAgICAgICBkaWZmaWN1bHQgZm9yIG1lbiBpbiBhcm1zIHRvIGNsaW1iIGV2ZW4gaWYgdGhleSBtZXQgd2l0aCBubyByZXNpc3RhbmNlOyBhbmQKICAgICAgICAgICAgICAgICAgICBtb3Jlb3Zlciwgb2JzZXJ2aW5nIHRoYXQgdGhlIHRvd24ncyBwZW9wbGUgd2VyZSBwb3NzZXNzZWQgb2YgZWZmZWN0cywgdG8gYQogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYWJsZSBhbW91bnQsIGFuZCB0aGF0IGlmIHRoZXkgYXR0ZW1wdGVkIHRvIGNvbnZleSB0aGVtIGF3YXkgaW4gYQogICAgICAgICAgICAgICAgICAgIGNsYW5kZXN0aW5lIG1hbm5lciwgdGhleSBjb3VsZCBub3QgZXNjYXBlIG91ciBob3JzZSwgb3IgZXZlbiBvdXIgbGVnaW9uczsgaGUKICAgICAgICAgICAgICAgICAgICBkaXZpZGVkIGhpcyBmb3JjZXMgaW50byB0aHJlZSBwYXJ0cywgYW5kIHBpdGNoZWQgdGhyZWUgY2FtcHMgb24gdmVyeSBoaWdoCiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kLCB3aXRoIHRoZSBpbnRlbnRpb24gb2YgZHJhd2luZyBsaW5lcyByb3VuZCB0aGUgdG93biBieSBkZWdyZWVzLCBhcyBoaXMKICAgICAgICAgICAgICAgICAgICBmb3JjZXMgY291bGQgYmVhciB0aGUgZmF0aWd1ZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FuaW5pdXM8L25hbWU+IGhhZCByYXBpZGx5IG1hcmNoZWQgdG8gdGhpcyBwbGFjZSwgYW5kIHBlcmNlaXZlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgYWxsIHBhcnRzIG9mIHRoZSB0b3duIHdlcmUgc2VjdXJlZCBieSB2ZXJ5IGNyYWdneSByb2Nrcywgd2hpY2ggaXQgd291bGQgYmUKICAgICAgICAgICAgICAgICAgICBkaWZmaWN1bHQgZm9yIG1lbiBpbiBhcm1zIHRvIGNsaW1iIGV2ZW4gaWYgdGhleSBtZXQgd2l0aCBubyByZXNpc3RhbmNlOyBhbmQKICAgICAgICAgICAgICAgICAgICBtb3Jlb3Zlciwgb2JzZXJ2aW5nIHRoYXQgdGhlIHRvd24ncyBwZW9wbGUgd2VyZSBwb3NzZXNzZWQgb2YgZWZmZWN0cywgdG8gYQogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYWJsZSBhbW91bnQsIGFuZCB0aGF0IGlmIHRoZXkgYXR0ZW1wdGVkIHRvIGNvbnZleSB0aGVtIGF3YXkgaW4gYQogICAgICAgICAgICAgICAgICAgIGNsYW5kZXN0aW5lIG1hbm5lciwgdGhleSBjb3VsZCBub3QgZXNjYXBlIG91ciBob3JzZSwgb3IgZXZlbiBvdXIgbGVnaW9uczsgaGUKICAgICAgICAgICAgICAgICAgICBkaXZpZGVkIGhpcyBmb3JjZXMgaW50byB0aHJlZSBwYXJ0cywgYW5kIHBpdGNoZWQgdGhyZWUgY2FtcHMgb24gdmVyeSBoaWdoCiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kLCB3aXRoIHRoZSBpbnRlbnRpb24gb2YgZHJhd2luZyBsaW5lcyByb3VuZCB0aGUgdG93biBieSBkZWdyZWVzLCBhcyBoaXMKICAgICAgICAgICAgICAgICAgICBmb3JjZXMgY291bGQgYmVhciB0aGUgZmF0aWd1ZS4gPC90cmFuc2xhdGlvbj4="
translation['8.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gdGhlIHRvd25zbWVuIHBlcmNlaXZlZCBoaXMgZGVzaWduLCBiZWluZyB0ZXJyaWZpZWQgYnkgdGhlIHJlY29sbGVjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBkaXN0cmVzcyBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgyMTMiIHJlZz0iICArQWxpc2UtU2FpbnRlLVJlaW5lIFs0LjUsNDcuNTVdIChpbmhhYml0ZWQgcGxhY2UpLCBDb3RlLWQnT3IsIEJ1cmd1bmR5LCBGcmFuY2UsIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5BbGVzaWEgPC9uYW1lPiwgdGhleSBiZWdhbiB0byBkcmVhZCBzaW1pbGFyIGNvbnNlcXVlbmNlcyBmcm9tIGEgc2llZ2U7IGFuZAogICAgICAgICAgICAgICAgICAgIGFib3ZlIGFsbCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1dGVyaXVzPC9uYW1lPiwgd2hvIGhhZCBleHBlcmllbmNlZCB0aGF0IGZhdGFsIGV2ZW50LCBjYXV0aW9uZWQKICAgICAgICAgICAgICAgICAgICB0aGVtIHRvIG1ha2UgcHJvdmlzaW9ucyBvZiBjb3JuOyB0aGV5IHRoZXJlZm9yZSByZXNvbHZlIGJ5IGdlbmVyYWwgY29uc2VudCB0bwogICAgICAgICAgICAgICAgICAgIGxlYXZlIHBhcnQgb2YgdGhlaXIgdHJvb3BzIGJlaGluZCwgYW5kIHNldCBvdXQgd2l0aCB0aGVpciBsaWdodCB0cm9vcHMgdG8gYnJpbmcKICAgICAgICAgICAgICAgICAgICBpbiBjb3JuLiBUaGUgc2NoZW1lIGhhdmluZyBtZXQgd2l0aCBhcHByb2JhdGlvbiwgdGhlIGZvbGxvd2luZyBuaWdodCBEcmFwZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THV0ZXJpdXM8L25hbWU+IGxlYXZpbmcgdHdvIHRob3VzYW5kIG1lbiBpbiB0aGUgZ2Fycmlzb24sIG1hcmNoZWQgb3V0CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHRvd24gd2l0aCB0aGUgcmVzdC4gQWZ0ZXIgYSBmZXcgZGF5cycgc3RheSBpbiB0aGUgY291bnRyeSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWR1cmNpPC9uYW1lPiAoc29tZSBvZiB3aG9tIHdlcmUgZGlzcG9zZWQgdG8gYXNzaXN0IHRoZW0gd2l0aCBjb3JuLAogICAgICAgICAgICAgICAgICAgIGFuZCBvdGhlcnMgd2VyZSB1bmFibGUgdG8gcHJldmVudCB0aGVpciB0YWtpbmcgaXQpIHRoZXkgY29sbGVjdGVkIGEgZ3JlYXQgc3RvcmUuCiAgICAgICAgICAgICAgICAgICAgU29tZXRpbWVzIGFsc28gYXR0YWNrcyB3ZXJlIG1hZGUgb24gb3VyIGxpdHRsZSBmb3J0cyBieSBzYWxsaWVzIGF0IG5pZ2h0LiBGb3IKICAgICAgICAgICAgICAgICAgICB0aGlzIHJlYXNvbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbmluaXVzPC9uYW1lPiBkZWZlcnJlZCBkcmF3aW5nIGhpcyB3b3JrcyByb3VuZCB0aGUgd2hvbGUKICAgICAgICAgICAgICAgICAgICB0b3duLCBsZXN0IGhlIHNob3VsZCBiZSB1bmFibGUgdG8gcHJvdGVjdCB0aGVtIHdoZW4gY29tcGxldGVkLCBvciBieSBkaXNwb3NpbmcKICAgICAgICAgICAgICAgICAgICBoaXMgZ2Fycmlzb25zIGluIHNldmVyYWwgcGxhY2VzLCBzaG91bGQgbWFrZSB0aGVtIHRvbyB3ZWFrLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MjEzIiByZWc9IiAgK0FsaXNlLVNhaW50ZS1SZWluZSBbNC41LDQ3LjU1XSAoaW5oYWJpdGVkIHBsYWNlKSwgQ290ZS1kJ09yLCBCdXJndW5keSwgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+QWxlc2lhIDwvbmFtZT4sIHRoZXkgYmVnYW4gdG8gZHJlYWQgc2ltaWxhciBjb25zZXF1ZW5jZXMgZnJvbSBhIHNpZWdlOyBhbmQKICAgICAgICAgICAgICAgICAgICBhYm92ZSBhbGwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdXRlcml1czwvbmFtZT4sIHdobyBoYWQgZXhwZXJpZW5jZWQgdGhhdCBmYXRhbCBldmVudCwgY2F1dGlvbmVkCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0byBtYWtlIHByb3Zpc2lvbnMgb2YgY29ybjsgdGhleSB0aGVyZWZvcmUgcmVzb2x2ZSBieSBnZW5lcmFsIGNvbnNlbnQgdG8KICAgICAgICAgICAgICAgICAgICBsZWF2ZSBwYXJ0IG9mIHRoZWlyIHRyb29wcyBiZWhpbmQsIGFuZCBzZXQgb3V0IHdpdGggdGhlaXIgbGlnaHQgdHJvb3BzIHRvIGJyaW5nCiAgICAgICAgICAgICAgICAgICAgaW4gY29ybi4gVGhlIHNjaGVtZSBoYXZpbmcgbWV0IHdpdGggYXBwcm9iYXRpb24sIHRoZSBmb2xsb3dpbmcgbmlnaHQgRHJhcGVzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1dGVyaXVzPC9uYW1lPiBsZWF2aW5nIHR3byB0aG91c2FuZCBtZW4gaW4gdGhlIGdhcnJpc29uLCBtYXJjaGVkIG91dAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSB0b3duIHdpdGggdGhlIHJlc3QuIEFmdGVyIGEgZmV3IGRheXMnIHN0YXkgaW4gdGhlIGNvdW50cnkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FkdXJjaTwvbmFtZT4gKHNvbWUgb2Ygd2hvbSB3ZXJlIGRpc3Bvc2VkIHRvIGFzc2lzdCB0aGVtIHdpdGggY29ybiwKICAgICAgICAgICAgICAgICAgICBhbmQgb3RoZXJzIHdlcmUgdW5hYmxlIHRvIHByZXZlbnQgdGhlaXIgdGFraW5nIGl0KSB0aGV5IGNvbGxlY3RlZCBhIGdyZWF0IHN0b3JlLgogICAgICAgICAgICAgICAgICAgIFNvbWV0aW1lcyBhbHNvIGF0dGFja3Mgd2VyZSBtYWRlIG9uIG91ciBsaXR0bGUgZm9ydHMgYnkgc2FsbGllcyBhdCBuaWdodC4gRm9yCiAgICAgICAgICAgICAgICAgICAgdGhpcyByZWFzb24gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW5pbml1czwvbmFtZT4gZGVmZXJyZWQgZHJhd2luZyBoaXMgd29ya3Mgcm91bmQgdGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgdG93biwgbGVzdCBoZSBzaG91bGQgYmUgdW5hYmxlIHRvIHByb3RlY3QgdGhlbSB3aGVuIGNvbXBsZXRlZCwgb3IgYnkgZGlzcG9zaW5nCiAgICAgICAgICAgICAgICAgICAgaGlzIGdhcnJpc29ucyBpbiBzZXZlcmFsIHBsYWNlcywgc2hvdWxkIG1ha2UgdGhlbSB0b28gd2Vhay4gPC90cmFuc2xhdGlvbj4="
translation['8.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkRyYXBlcyBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdXRlcml1czwvbmFtZT4sIGhhdmluZyBsYWlkIGluIGEgbGFyZ2Ugc3VwcGx5IG9mIGNvcm4sCiAgICAgICAgICAgICAgICAgICAgb2NjdXB5aW5nIGEgcG9zaXRpb24gYXQgYWJvdXQgdGVuIG1pbGVzIGRpc3RhbmNlIGZyb20gdGhlIHRvd24sIGludGVuZGluZyBmcm9tCiAgICAgICAgICAgICAgICAgICAgaXQgdG8gY29udmV5IHRoZSBjb3JuIGludG8gdGhlIHRvd24gYnkgZGVncmVlcy4gVGhleSBjaG9zZSBlYWNoIGhpcyByZXNwZWN0aXZlCiAgICAgICAgICAgICAgICAgICAgZGVwYXJ0bWVudC4gRHJhcGVzIHN0YXllZCBiZWhpbmQgaW4gdGhlIGNhbXAgd2l0aCBwYXJ0IG9mIHRoZSBhcm15IHRvIHByb3RlY3QKICAgICAgICAgICAgICAgICAgICBpdDsgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdXRlcml1czwvbmFtZT4gY29udmV5cyB0aGUgdHJhaW4gd2l0aCBwcm92aXNpb25zIGludG8gdGhlIHRvd24uCiAgICAgICAgICAgICAgICAgICAgQWNjb3JkaW5nbHksIGhhdmluZyBkaXNwb3NlZCBndWFyZHMgaGVyZSBhbmQgdGhlcmUgYWxvbmcgdGhlIHJvYWQsIGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIHRlbnRoIGhvdXIgb2YgdGhlIG5pZ2h0LCBoZSBzZXQgb3V0IGJ5IG5hcnJvdyBwYXRocyB0aHJvdWdoIHRoZSB3b29kcywgdG8gZmV0Y2gKICAgICAgICAgICAgICAgICAgICB0aGUgY29ybiBpbnRvIHRoZSB0b3duLiBCdXQgdGhlaXIgbm9pc2UgYmVpbmcgaGVhcmQgYnkgdGhlIHNlbnRpbmVscyBvZiBvdXIKICAgICAgICAgICAgICAgICAgICBjYW1wLCBhbmQgdGhlIHNjb3V0cyB3aGljaCB3ZSBoYWQgc2VudCBvdXQsIGhhdmluZyBicm91Z2h0IGFuIGFjY291bnQgb2Ygd2hhdAogICAgICAgICAgICAgICAgICAgIHdhcyBnb2luZyBvbiwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW5pbml1czwvbmFtZT4gaW5zdGFudGx5IHdpdGggdGhlIHJlYWR5LWFybWVkIGNvaG9ydHMgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBuZWFyZXN0IHR1cnJldHMgbWFkZSBhbiBhdHRhY2sgb24gdGhlIGNvbnZveSBhdCB0aGUgYnJlYWsgb2YgZGF5LiBUaGV5LAogICAgICAgICAgICAgICAgICAgIGFsYXJtZWQgYXQgc28gdW5leHBlY3RlZCBhbiBldmlsLCBmbGVkIGJ5IGRpZmZlcmVudCB3YXlzIHRvIHRoZWlyIGd1YXJkOiB3aGljaAogICAgICAgICAgICAgICAgICAgIGFzIHNvb24gYXMgb3VyIG1lbiBwZXJjZWl2ZWQsIHRoZXkgZmVsbCB3aXRoIGdyZWF0IGZ1cnkgb24gdGhlIGVzY29ydCwgYW5kIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBhbGxvdyBhIHNpbmdsZSBtYW4gdG8gYmUgdGFrZW4gYWxpdmUuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THV0ZXJpdXM8L25hbWU+IGVzY2FwZWQgdGhlbmNlCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGZldyBmb2xsb3dlcnMsIGJ1dCBkaWQgbm90IHJldHVybiB0byB0aGUgY2FtcC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THV0ZXJpdXM8L25hbWU+LCBoYXZpbmcgbGFpZCBpbiBhIGxhcmdlIHN1cHBseSBvZiBjb3JuLAogICAgICAgICAgICAgICAgICAgIG9jY3VweWluZyBhIHBvc2l0aW9uIGF0IGFib3V0IHRlbiBtaWxlcyBkaXN0YW5jZSBmcm9tIHRoZSB0b3duLCBpbnRlbmRpbmcgZnJvbQogICAgICAgICAgICAgICAgICAgIGl0IHRvIGNvbnZleSB0aGUgY29ybiBpbnRvIHRoZSB0b3duIGJ5IGRlZ3JlZXMuIFRoZXkgY2hvc2UgZWFjaCBoaXMgcmVzcGVjdGl2ZQogICAgICAgICAgICAgICAgICAgIGRlcGFydG1lbnQuIERyYXBlcyBzdGF5ZWQgYmVoaW5kIGluIHRoZSBjYW1wIHdpdGggcGFydCBvZiB0aGUgYXJteSB0byBwcm90ZWN0CiAgICAgICAgICAgICAgICAgICAgaXQ7IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THV0ZXJpdXM8L25hbWU+IGNvbnZleXMgdGhlIHRyYWluIHdpdGggcHJvdmlzaW9ucyBpbnRvIHRoZSB0b3duLgogICAgICAgICAgICAgICAgICAgIEFjY29yZGluZ2x5LCBoYXZpbmcgZGlzcG9zZWQgZ3VhcmRzIGhlcmUgYW5kIHRoZXJlIGFsb25nIHRoZSByb2FkLCBhYm91dCB0aGUKICAgICAgICAgICAgICAgICAgICB0ZW50aCBob3VyIG9mIHRoZSBuaWdodCwgaGUgc2V0IG91dCBieSBuYXJyb3cgcGF0aHMgdGhyb3VnaCB0aGUgd29vZHMsIHRvIGZldGNoCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvcm4gaW50byB0aGUgdG93bi4gQnV0IHRoZWlyIG5vaXNlIGJlaW5nIGhlYXJkIGJ5IHRoZSBzZW50aW5lbHMgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgY2FtcCwgYW5kIHRoZSBzY291dHMgd2hpY2ggd2UgaGFkIHNlbnQgb3V0LCBoYXZpbmcgYnJvdWdodCBhbiBhY2NvdW50IG9mIHdoYXQKICAgICAgICAgICAgICAgICAgICB3YXMgZ29pbmcgb24sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FuaW5pdXM8L25hbWU+IGluc3RhbnRseSB3aXRoIHRoZSByZWFkeS1hcm1lZCBjb2hvcnRzIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgbmVhcmVzdCB0dXJyZXRzIG1hZGUgYW4gYXR0YWNrIG9uIHRoZSBjb252b3kgYXQgdGhlIGJyZWFrIG9mIGRheS4gVGhleSwKICAgICAgICAgICAgICAgICAgICBhbGFybWVkIGF0IHNvIHVuZXhwZWN0ZWQgYW4gZXZpbCwgZmxlZCBieSBkaWZmZXJlbnQgd2F5cyB0byB0aGVpciBndWFyZDogd2hpY2gKICAgICAgICAgICAgICAgICAgICBhcyBzb29uIGFzIG91ciBtZW4gcGVyY2VpdmVkLCB0aGV5IGZlbGwgd2l0aCBncmVhdCBmdXJ5IG9uIHRoZSBlc2NvcnQsIGFuZCBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgYWxsb3cgYSBzaW5nbGUgbWFuIHRvIGJlIHRha2VuIGFsaXZlLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1dGVyaXVzPC9uYW1lPiBlc2NhcGVkIHRoZW5jZQogICAgICAgICAgICAgICAgICAgIHdpdGggYSBmZXcgZm9sbG93ZXJzLCBidXQgZGlkIG5vdCByZXR1cm4gdG8gdGhlIGNhbXAuIDwvdHJhbnNsYXRpb24+"
translation['8.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHRoaXMgc3VjY2VzcywgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW5pbml1czwvbmFtZT4gbGVhcm5lZCBmcm9tIHNvbWUgcHJpc29uZXJzLCB0aGF0IGEKICAgICAgICAgICAgICAgICAgICBwYXJ0IG9mIHRoZSBmb3JjZXMgd2FzIGVuY2FtcGVkIHdpdGggRHJhcGVzLCBub3QgbW9yZSB0aGFuIHRlbiBtaWxlcyBvZmY6IHdoaWNoCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgY29uZmlybWVkIGJ5IHNldmVyYWwsIHN1cHBvc2luZyB0aGF0IGFmdGVyIHRoZSBkZWZlYXQgb2Ygb25lIGdlbmVyYWwsIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3Qgd291bGQgYmUgdGVycmlmaWVkLCBhbmQgbWlnaHQgYmUgZWFzaWx5IGNvbnF1ZXJlZCwgaGUgdGhvdWdodCBpdCBhIG1vc3QKICAgICAgICAgICAgICAgICAgICBmb3J0dW5hdGUgZXZlbnQgdGhhdCBub25lIG9mIHRoZSBlbmVteSBoYWQgZmxlZCBiYWNrIGZyb20gdGhlIHNsYXVnaHRlciB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjYW1wLCB0byBnaXZlIERyYXBlcyBub3RpY2Ugb2YgdGhlIGNhbGFtaXR5IHdoaWNoIGhhZCBiZWZhbGxlbiBoaW0uIEFuZCBhcyBoZQogICAgICAgICAgICAgICAgICAgIGNvdWxkIHNlZSBubyBkYW5nZXIgaW4gbWFraW5nIHRoZSBhdHRlbXB0LCBoZSBzZW50IGZvcndhcmQgYWxsIGhpcyBjYXZhbHJ5IGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuPC9uYW1lPiBmb290LCBtZW4gb2YgZ3JlYXQgYWN0aXZpdHksIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15J3MgY2FtcC4gSGUgZGl2aWRlcyBvbmUgbGVnaW9uIGFtb25nIHRoZSB0aHJlZSBjYW1wcywgYW5kIHRha2VzIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgYmFnZ2FnZSBhbG9uZyB3aXRoIGhpbS4gV2hlbiBoZSBoYWQgYWR2YW5jZWQgbmVhciB0aGUgZW5lbXksIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGluZm9ybWVkIGJ5IHNjb3V0cywgd2hpY2ggaGUgaGFkIHNlbnQgYmVmb3JlIGhpbSwgdGhhdCB0aGUgZW5lbXkncyBjYW1wLCBhcyBpcwogICAgICAgICAgICAgICAgICAgIHRoZSBjdXN0b20gb2YgYmFyYmFyaWFucywgd2FzIHBpdGNoZWQgbG93LCBuZWFyIHRoZSBiYW5rcyBvZiBhIHJpdmVyLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBoaWdoZXIgZ3JvdW5kcyB3ZXJlIHVub2NjdXBpZWQ6IGJ1dCB0aGF0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuPC9uYW1lPiBob3JzZSBoYWQgbWFkZSBhIHN1ZGRlbiBhdHRhY2sgb24gdGhlbSwgYW5kIGhhZCBiZWd1biB0aGUKICAgICAgICAgICAgICAgICAgICBiYXR0bGUuIFVwb24gdGhpcyBpbnRlbGxpZ2VuY2UsIGhlIG1hcmNoZWQgdXAgd2l0aCBoaXMgbGVnaW9uLCBhcm1lZCBhbmQgaW4KICAgICAgICAgICAgICAgICAgICBvcmRlciBvZiBiYXR0bGUuIFRoZW4sIG9uIGEgc2lnbmFsIGJlaW5nIHN1ZGRlbmx5IGdpdmVuIG9uIGV2ZXJ5IHNpZGUsIG91ciBtZW4KICAgICAgICAgICAgICAgICAgICB0b29rIHBvc3Nlc3Npb24gb2YgdGhlIGhpZ2hlciBncm91bmRzLiBVcG9uIHRoaXMgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW48L25hbWU+IGhvcnNlIG9ic2VydmluZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBjb2xvcnMsCiAgICAgICAgICAgICAgICAgICAgZm91Z2h0IHdpdGggZ3JlYXQgdmlnb3IuIEltbWVkaWF0ZWx5IGFsbCB0aGUgY29ob3J0cyBhdHRhY2sgdGhlbSBvbiBldmVyeSBzaWRlOwogICAgICAgICAgICAgICAgICAgIGFuZCBoYXZpbmcgZWl0aGVyIGtpbGxlZCBvciBtYWRlIHByaXNvbmVycyBvZiB0aGVtIGFsbCwgZ2FpbmVkIGdyZWF0IGJvb3R5LiBJbgogICAgICAgICAgICAgICAgICAgIHRoYXQgYmF0dGxlLCBEcmFwZXMgaGltc2VsZiB3YXMgdGFrZW4gcHJpc29uZXIuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbmluaXVzPC9uYW1lPiBsZWFybmVkIGZyb20gc29tZSBwcmlzb25lcnMsIHRoYXQgYQogICAgICAgICAgICAgICAgICAgIHBhcnQgb2YgdGhlIGZvcmNlcyB3YXMgZW5jYW1wZWQgd2l0aCBEcmFwZXMsIG5vdCBtb3JlIHRoYW4gdGVuIG1pbGVzIG9mZjogd2hpY2gKICAgICAgICAgICAgICAgICAgICBiZWluZyBjb25maXJtZWQgYnkgc2V2ZXJhbCwgc3VwcG9zaW5nIHRoYXQgYWZ0ZXIgdGhlIGRlZmVhdCBvZiBvbmUgZ2VuZXJhbCwgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzdCB3b3VsZCBiZSB0ZXJyaWZpZWQsIGFuZCBtaWdodCBiZSBlYXNpbHkgY29ucXVlcmVkLCBoZSB0aG91Z2h0IGl0IGEgbW9zdAogICAgICAgICAgICAgICAgICAgIGZvcnR1bmF0ZSBldmVudCB0aGF0IG5vbmUgb2YgdGhlIGVuZW15IGhhZCBmbGVkIGJhY2sgZnJvbSB0aGUgc2xhdWdodGVyIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbXAsIHRvIGdpdmUgRHJhcGVzIG5vdGljZSBvZiB0aGUgY2FsYW1pdHkgd2hpY2ggaGFkIGJlZmFsbGVuIGhpbS4gQW5kIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgY291bGQgc2VlIG5vIGRhbmdlciBpbiBtYWtpbmcgdGhlIGF0dGVtcHQsIGhlIHNlbnQgZm9yd2FyZCBhbGwgaGlzIGNhdmFscnkgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW48L25hbWU+IGZvb3QsIG1lbiBvZiBncmVhdCBhY3Rpdml0eSwgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXkncyBjYW1wLiBIZSBkaXZpZGVzIG9uZSBsZWdpb24gYW1vbmcgdGhlIHRocmVlIGNhbXBzLCBhbmQgdGFrZXMgdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBiYWdnYWdlIGFsb25nIHdpdGggaGltLiBXaGVuIGhlIGhhZCBhZHZhbmNlZCBuZWFyIHRoZSBlbmVteSwgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgaW5mb3JtZWQgYnkgc2NvdXRzLCB3aGljaCBoZSBoYWQgc2VudCBiZWZvcmUgaGltLCB0aGF0IHRoZSBlbmVteSdzIGNhbXAsIGFzIGlzCiAgICAgICAgICAgICAgICAgICAgdGhlIGN1c3RvbSBvZiBiYXJiYXJpYW5zLCB3YXMgcGl0Y2hlZCBsb3csIG5lYXIgdGhlIGJhbmtzIG9mIGEgcml2ZXIsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGhpZ2hlciBncm91bmRzIHdlcmUgdW5vY2N1cGllZDogYnV0IHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW48L25hbWU+IGhvcnNlIGhhZCBtYWRlIGEgc3VkZGVuIGF0dGFjayBvbiB0aGVtLCBhbmQgaGFkIGJlZ3VuIHRoZQogICAgICAgICAgICAgICAgICAgIGJhdHRsZS4gVXBvbiB0aGlzIGludGVsbGlnZW5jZSwgaGUgbWFyY2hlZCB1cCB3aXRoIGhpcyBsZWdpb24sIGFybWVkIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIG9mIGJhdHRsZS4gVGhlbiwgb24gYSBzaWduYWwgYmVpbmcgc3VkZGVubHkgZ2l2ZW4gb24gZXZlcnkgc2lkZSwgb3VyIG1lbgogICAgICAgICAgICAgICAgICAgIHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGUgaGlnaGVyIGdyb3VuZHMuIFVwb24gdGhpcyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdlcm1hbjwvbmFtZT4gaG9yc2Ugb2JzZXJ2aW5nIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IGNvbG9ycywKICAgICAgICAgICAgICAgICAgICBmb3VnaHQgd2l0aCBncmVhdCB2aWdvci4gSW1tZWRpYXRlbHkgYWxsIHRoZSBjb2hvcnRzIGF0dGFjayB0aGVtIG9uIGV2ZXJ5IHNpZGU7CiAgICAgICAgICAgICAgICAgICAgYW5kIGhhdmluZyBlaXRoZXIga2lsbGVkIG9yIG1hZGUgcHJpc29uZXJzIG9mIHRoZW0gYWxsLCBnYWluZWQgZ3JlYXQgYm9vdHkuIEluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBiYXR0bGUsIERyYXBlcyBoaW1zZWxmIHdhcyB0YWtlbiBwcmlzb25lci4gPC90cmFuc2xhdGlvbj4="
translation['8.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FuaW5pdXM8L25hbWU+LCBoYXZpbmcgYWNjb21wbGlzaGVkIHRoZSBidXNpbmVzcyBzbyBzdWNjZXNzZnVsbHksIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgc2NhcmNlbHkgYSBtYW4gd291bmRlZCwgcmV0dXJuZWQgdG8gYmVzaWVnZSB0aGUgdG93bjsgYW5kLCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBkZXN0cm95ZWQgdGhlIGVuZW15IHdpdGhvdXQsIGZvciBmZWFyIG9mIHdob20gaGUgaGFkIGJlZW4gcHJldmVudGVkIGZyb20KICAgICAgICAgICAgICAgICAgICBzdHJlbmd0aGVuaW5nIGhpcyByZWRvdWJ0cywgYW5kIHN1cnJvdW5kaW5nIHRoZSBlbmVteSB3aXRoIGhpcyBsaW5lcywgaGUgb3JkZXJzCiAgICAgICAgICAgICAgICAgICAgdGhlIHdvcmsgdG8gYmUgY29tcGxldGVkIG9uIGV2ZXJ5IHNpZGUuIFRoZSBuZXh0IGRheSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBGYWJpdXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgY2FtZSB0byBqb2luIGhpbSB3aXRoIGhpcyBmb3JjZXMsIGFuZCB0b29rIHVwb24gaGltIHRoZSBzaWVnZSBvZiBvbmUgc2lkZS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FuaW5pdXM8L25hbWU+LCBoYXZpbmcgYWNjb21wbGlzaGVkIHRoZSBidXNpbmVzcyBzbyBzdWNjZXNzZnVsbHksIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgc2NhcmNlbHkgYSBtYW4gd291bmRlZCwgcmV0dXJuZWQgdG8gYmVzaWVnZSB0aGUgdG93bjsgYW5kLCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBkZXN0cm95ZWQgdGhlIGVuZW15IHdpdGhvdXQsIGZvciBmZWFyIG9mIHdob20gaGUgaGFkIGJlZW4gcHJldmVudGVkIGZyb20KICAgICAgICAgICAgICAgICAgICBzdHJlbmd0aGVuaW5nIGhpcyByZWRvdWJ0cywgYW5kIHN1cnJvdW5kaW5nIHRoZSBlbmVteSB3aXRoIGhpcyBsaW5lcywgaGUgb3JkZXJzCiAgICAgICAgICAgICAgICAgICAgdGhlIHdvcmsgdG8gYmUgY29tcGxldGVkIG9uIGV2ZXJ5IHNpZGUuIFRoZSBuZXh0IGRheSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBGYWJpdXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgY2FtZSB0byBqb2luIGhpbSB3aXRoIGhpcyBmb3JjZXMsIGFuZCB0b29rIHVwb24gaGltIHRoZSBzaWVnZSBvZiBvbmUgc2lkZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtZWFuIHRpbWUsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBsZWZ0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMKICAgICAgICAgICAgICAgICAgICAgICAgQW50b25pdXM8L25hbWU+IGluIHRoZSBjb3VudHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4sIHdpdGggZmlmdGVlbgogICAgICAgICAgICAgICAgICAgIGNvaG9ydHMsIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiBtaWdodCBoYXZlIG5vIG9wcG9ydHVuaXR5IG9mIGZvcm1pbmcgbmV3CiAgICAgICAgICAgICAgICAgICAgcGxhbnMgaW4gZnV0dXJlLiBIZSBoaW1zZWxmIHZpc2l0cyB0aGUgb3RoZXIgc3RhdGVzLCBkZW1hbmRzIGEgZ3JlYXQgbnVtYmVyIG9mCiAgICAgICAgICAgICAgICAgICAgaG9zdGFnZXMsIGFuZCBieSBoaXMgZW5jb3VyYWdpbmcgbGFuZ3VhZ2UgYWxsYXlzIHRoZSBhcHByZWhlbnNpb25zIG9mIGFsbC4gV2hlbgogICAgICAgICAgICAgICAgICAgIGhlIGNhbWUgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FybnV0ZXM8L25hbWU+LCBpbiB3aG9zZSBzdGF0ZSBoZSBoYXMgaW4gYSBmb3JtZXIKICAgICAgICAgICAgICAgICAgICBjb21tZW50YXJ5IG1lbnRpb25lZCB0aGF0IHRoZSB3YXIgZmlyc3QgYnJva2Ugb3V0OyBvYnNlcnZpbmcsIHRoYXQgZnJvbSBhCiAgICAgICAgICAgICAgICAgICAgY29uc2Npb3VzbmVzcyBvZiB0aGVpciBndWlsdCwgdGhleSBzZWVtZWQgdG8gYmUgaW4gdGhlIGdyZWF0ZXN0IHRlcnJvcjogdG8KICAgICAgICAgICAgICAgICAgICByZWxpZXZlIHRoZSBzdGF0ZSB0aGUgc29vbmVyIGZyb20gaXRzIGZlYXIsIGhlIGRlbWFuZGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HdXR1cnZhdHVzPC9uYW1lPiwgdGhlIHByb21vdGVyIG9mIHRoYXQgdHJlYXNvbiwgYW5kIHRoZSBpbnN0aWdhdG9yIG9mCiAgICAgICAgICAgICAgICAgICAgdGhhdCByZWJlbGxpb24sIHNob3VsZCBiZSBkZWxpdmVyZWQgdXAgdG8gcHVuaXNobWVudC4gQW5kIHRob3VnaCB0aGUgbGF0dGVyIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBkYXJlIHRvIHRydXN0IGhpcyBsaWZlIGV2ZW4gdG8gaGlzIG93biBjb3VudHJ5bWVuLCB5ZXQgc3VjaCBkaWxpZ2VudCBzZWFyY2gKICAgICAgICAgICAgICAgICAgICB3YXMgbWFkZSBieSB0aGVtIGFsbCwgdGhhdCBoZSB3YXMgc29vbiBicm91Z2h0IHRvIG91ciBjYW1wLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FzIGZvcmNlZCB0byBwdW5pc2ggaGltLCBieSB0aGUgY2xhbW9ycyBvZiB0aGUgc29sZGllcnMsCiAgICAgICAgICAgICAgICAgICAgY29udHJhcnkgdG8gaGlzIG5hdHVyYWwgaHVtYW5pdHksIGZvciB0aGV5IGFsbGVnZWQgdGhhdCBhbGwgdGhlIGRhbmdlcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgbG9zc2VzIGluY3VycmVkIGluIHRoYXQgd2FyLCBvdWdodCB0byBiZSBpbXB1dGVkIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R3V0dXJ2YXR1czwvbmFtZT4uCiAgICAgICAgICAgICAgICAgICAgQWNjb3JkaW5nbHksIGhlIHdhcyB3aGlwcGVkIHRvIGRlYXRoLCBhbmQgaGlzIGhlYWQgY3V0IG9mZi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBsZWZ0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMKICAgICAgICAgICAgICAgICAgICAgICAgQW50b25pdXM8L25hbWU+IGluIHRoZSBjb3VudHJ5IG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGxvdmFjaTwvbmFtZT4sIHdpdGggZmlmdGVlbgogICAgICAgICAgICAgICAgICAgIGNvaG9ydHMsIHRoYXQgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiBtaWdodCBoYXZlIG5vIG9wcG9ydHVuaXR5IG9mIGZvcm1pbmcgbmV3CiAgICAgICAgICAgICAgICAgICAgcGxhbnMgaW4gZnV0dXJlLiBIZSBoaW1zZWxmIHZpc2l0cyB0aGUgb3RoZXIgc3RhdGVzLCBkZW1hbmRzIGEgZ3JlYXQgbnVtYmVyIG9mCiAgICAgICAgICAgICAgICAgICAgaG9zdGFnZXMsIGFuZCBieSBoaXMgZW5jb3VyYWdpbmcgbGFuZ3VhZ2UgYWxsYXlzIHRoZSBhcHByZWhlbnNpb25zIG9mIGFsbC4gV2hlbgogICAgICAgICAgICAgICAgICAgIGhlIGNhbWUgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FybnV0ZXM8L25hbWU+LCBpbiB3aG9zZSBzdGF0ZSBoZSBoYXMgaW4gYSBmb3JtZXIKICAgICAgICAgICAgICAgICAgICBjb21tZW50YXJ5IG1lbnRpb25lZCB0aGF0IHRoZSB3YXIgZmlyc3QgYnJva2Ugb3V0OyBvYnNlcnZpbmcsIHRoYXQgZnJvbSBhCiAgICAgICAgICAgICAgICAgICAgY29uc2Npb3VzbmVzcyBvZiB0aGVpciBndWlsdCwgdGhleSBzZWVtZWQgdG8gYmUgaW4gdGhlIGdyZWF0ZXN0IHRlcnJvcjogdG8KICAgICAgICAgICAgICAgICAgICByZWxpZXZlIHRoZSBzdGF0ZSB0aGUgc29vbmVyIGZyb20gaXRzIGZlYXIsIGhlIGRlbWFuZGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5HdXR1cnZhdHVzPC9uYW1lPiwgdGhlIHByb21vdGVyIG9mIHRoYXQgdHJlYXNvbiwgYW5kIHRoZSBpbnN0aWdhdG9yIG9mCiAgICAgICAgICAgICAgICAgICAgdGhhdCByZWJlbGxpb24sIHNob3VsZCBiZSBkZWxpdmVyZWQgdXAgdG8gcHVuaXNobWVudC4gQW5kIHRob3VnaCB0aGUgbGF0dGVyIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBkYXJlIHRvIHRydXN0IGhpcyBsaWZlIGV2ZW4gdG8gaGlzIG93biBjb3VudHJ5bWVuLCB5ZXQgc3VjaCBkaWxpZ2VudCBzZWFyY2gKICAgICAgICAgICAgICAgICAgICB3YXMgbWFkZSBieSB0aGVtIGFsbCwgdGhhdCBoZSB3YXMgc29vbiBicm91Z2h0IHRvIG91ciBjYW1wLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FzIGZvcmNlZCB0byBwdW5pc2ggaGltLCBieSB0aGUgY2xhbW9ycyBvZiB0aGUgc29sZGllcnMsCiAgICAgICAgICAgICAgICAgICAgY29udHJhcnkgdG8gaGlzIG5hdHVyYWwgaHVtYW5pdHksIGZvciB0aGV5IGFsbGVnZWQgdGhhdCBhbGwgdGhlIGRhbmdlcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgbG9zc2VzIGluY3VycmVkIGluIHRoYXQgd2FyLCBvdWdodCB0byBiZSBpbXB1dGVkIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R3V0dXJ2YXR1czwvbmFtZT4uCiAgICAgICAgICAgICAgICAgICAgQWNjb3JkaW5nbHksIGhlIHdhcyB3aGlwcGVkIHRvIGRlYXRoLCBhbmQgaGlzIGhlYWQgY3V0IG9mZi4gPC90cmFuc2xhdGlvbj4="
translation['8.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlcmUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdhcyBpbmZvcm1lZCBieSBudW1lcm91cyBsZXR0ZXJzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW5pbml1czwvbmFtZT4gb2Ygd2hhdCBoYWQgaGFwcGVuZWQgdG8gRHJhcGVzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1dGVyaXVzPC9uYW1lPiwgYW5kIGluIHdoYXQgY29uZHVjdCB0aGUgdG93bidzIHBlb3BsZSBwZXJzaXN0ZWQ6IGFuZAogICAgICAgICAgICAgICAgICAgIHRob3VnaCBoZSBkZXNwaXNlZCB0aGUgc21hbGxuZXNzIG9mIHRoZWlyIG51bWJlcnMsIHlldCBoZSB0aG91Z2h0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb2JzdGluYWN5IGRlc2VydmluZyBhIHNldmVyZSBwdW5pc2htZW50LCBsZXN0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiBpbiBnZW5lcmFsCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGFkb3B0IGFuIGlkZWEgdGhhdCBzaGUgZGlkIG5vdCB3YW50IHN0cmVuZ3RoIGJ1dCBwZXJzZXZlcmFuY2UgdG8gb3Bwb3NlCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+OyBhbmQgbGVzdCB0aGUgb3RoZXIgc3RhdGVzLCByZWx5aW5nIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZSBvZiBzaXR1YXRpb24sIHNob3VsZCBmb2xsb3cgdGhlaXIgZXhhbXBsZSBhbmQgYXNzZXJ0IHRoZWlyIGxpYmVydHk7CiAgICAgICAgICAgICAgICAgICAgZXNwZWNpYWxseSBhcyBoZSBrbmV3IHRoYXQgYWxsIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHVuZGVyc3Rvb2QKICAgICAgICAgICAgICAgICAgICB0aGF0IGhpcyBjb21tYW5kIHdhcyB0byBjb250aW51ZSBidXQgb25lIHN1bW1lciBsb25nZXIsIGFuZCBpZiB0aGV5IGNvdWxkIGhvbGQKICAgICAgICAgICAgICAgICAgICBvdXQgZm9yIHRoYXQgdGltZSwgdGhhdCB0aGV5IHdvdWxkIGhhdmUgbm8gZnVydGhlciBkYW5nZXIgdG8gYXBwcmVoZW5kLiBIZQogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSBsZWZ0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UXVpbnR1cyBDYWxlbnVzPC9uYW1lPiwgb25lIG9mIGhpcyBsaWV1dGVuYW50cywgYmVoaW5kIGhpbSwKICAgICAgICAgICAgICAgICAgICB3aXRoIHR3byBsZWdpb25zLCBhbmQgaW5zdHJ1Y3Rpb25zIHRvIGZvbGxvdyBoaW0gYnkgcmVndWxhciBtYXJjaGVzLiBIZSBoYXN0ZW5lZAogICAgICAgICAgICAgICAgICAgIGFzIG11Y2ggYXMgaGUgY291bGQgd2l0aCBhbGwgdGhlIGNhdmFscnkgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW5pbml1czwvbmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FzIGluZm9ybWVkIGJ5IG51bWVyb3VzIGxldHRlcnMgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbmluaXVzPC9uYW1lPiBvZiB3aGF0IGhhZCBoYXBwZW5lZCB0byBEcmFwZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THV0ZXJpdXM8L25hbWU+LCBhbmQgaW4gd2hhdCBjb25kdWN0IHRoZSB0b3duJ3MgcGVvcGxlIHBlcnNpc3RlZDogYW5kCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGhlIGRlc3Bpc2VkIHRoZSBzbWFsbG5lc3Mgb2YgdGhlaXIgbnVtYmVycywgeWV0IGhlIHRob3VnaHQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBvYnN0aW5hY3kgZGVzZXJ2aW5nIGEgc2V2ZXJlIHB1bmlzaG1lbnQsIGxlc3QgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+IGluIGdlbmVyYWwKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYWRvcHQgYW4gaWRlYSB0aGF0IHNoZSBkaWQgbm90IHdhbnQgc3RyZW5ndGggYnV0IHBlcnNldmVyYW5jZSB0byBvcHBvc2UKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT47IGFuZCBsZXN0IHRoZSBvdGhlciBzdGF0ZXMsIHJlbHlpbmcgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgYWR2YW50YWdlIG9mIHNpdHVhdGlvbiwgc2hvdWxkIGZvbGxvdyB0aGVpciBleGFtcGxlIGFuZCBhc3NlcnQgdGhlaXIgbGliZXJ0eTsKICAgICAgICAgICAgICAgICAgICBlc3BlY2lhbGx5IGFzIGhlIGtuZXcgdGhhdCBhbGwgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HYXVsczwvbmFtZT4gdW5kZXJzdG9vZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGlzIGNvbW1hbmQgd2FzIHRvIGNvbnRpbnVlIGJ1dCBvbmUgc3VtbWVyIGxvbmdlciwgYW5kIGlmIHRoZXkgY291bGQgaG9sZAogICAgICAgICAgICAgICAgICAgIG91dCBmb3IgdGhhdCB0aW1lLCB0aGF0IHRoZXkgd291bGQgaGF2ZSBubyBmdXJ0aGVyIGRhbmdlciB0byBhcHByZWhlbmQuIEhlCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlIGxlZnQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5RdWludHVzIENhbGVudXM8L25hbWU+LCBvbmUgb2YgaGlzIGxpZXV0ZW5hbnRzLCBiZWhpbmQgaGltLAogICAgICAgICAgICAgICAgICAgIHdpdGggdHdvIGxlZ2lvbnMsIGFuZCBpbnN0cnVjdGlvbnMgdG8gZm9sbG93IGhpbSBieSByZWd1bGFyIG1hcmNoZXMuIEhlIGhhc3RlbmVkCiAgICAgICAgICAgICAgICAgICAgYXMgbXVjaCBhcyBoZSBjb3VsZCB3aXRoIGFsbCB0aGUgY2F2YWxyeSB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbmluaXVzPC9uYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['8.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyBhcnJpdmVkIGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGxhY2UiPlV4ZWxsb2R1bnVtPC9uYW1lPiwgY29udHJhcnkgdG8gdGhlIGdlbmVyYWwKICAgICAgICAgICAgICAgICAgICBleHBlY3RhdGlvbiwgYW5kIHBlcmNlaXZpbmcgdGhhdCB0aGUgdG93biB3YXMgc3Vycm91bmRlZCBieSB0aGUgd29ya3MsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15IGhhZCBubyBwb3NzaWJsZSBtZWFucyBvZiByZXRpcmluZyBmcm9tIHRoZSBhc3NhdWx0LCBhbmQgYmVpbmcgbGlrZXdpc2UKICAgICAgICAgICAgICAgICAgICBpbmZvcm1lZCBieSB0aGUgZGVzZXJ0ZXJzIHRoYXQgdGhlIHRvd25zbWVuIGhhZCBhYnVuZGFuY2Ugb2YgY29ybiwgaGUKICAgICAgICAgICAgICAgICAgICBlbmRlYXZvdXJlZCB0byBwcmV2ZW50IHRoZWlyIGdldHRpbmcgd2F0ZXIuIEEgcml2ZXIgZGl2aWRlZCB0aGUgdmFsbGV5IGJlbG93LAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGFsbW9zdCBzdXJyb3VuZGVkIHRoZSBzdGVlcCBjcmFnZ3kgbW91bnRhaW4gb24gd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5VeGVsbG9kdW51bTwvbmFtZT4gd2FzIGJ1aWx0LiBUaGUgbmF0dXJlIG9mIHRoZSBncm91bmQgcHJldmVudGVkIGhpcwogICAgICAgICAgICAgICAgICAgIHR1cm5pbmcgdGhlIGN1cnJlbnQ6IGZvciBpdCByYW4gc28gbG93IGRvd24gYXQgdGhlIGZvb3Qgb2YgdGhlIG1vdW50YWluLCB0aGF0IG5vCiAgICAgICAgICAgICAgICAgICAgZHJhaW5zIGNvdWxkIGJlIHN1bmsgZGVlcCBlbm91Z2ggdG8gZHJhdyBpdCBvZmYgaW4gYW55IGRpcmVjdGlvbi4gQnV0IHRoZQogICAgICAgICAgICAgICAgICAgIGRlc2NlbnQgdG8gaXQgd2FzIHNvIGRpZmZpY3VsdCwgdGhhdCBpZiB3ZSBtYWRlIG9wcG9zaXRpb24sIHRoZSBiZXNpZWdlZCBjb3VsZAogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgY29tZSB0byB0aGUgcml2ZXIgbm9yIHJldGlyZSB1cCB0aGUgcHJlY2lwaWNlIHdpdGhvdXQgaGF6YXJkIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbGl2ZXMuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBwZXJjZWl2aW5nIHRoZSBkaWZmaWN1bHR5LCBkaXNwb3NlZAogICAgICAgICAgICAgICAgICAgIGFyY2hlcnMgYW5kIHNsaW5nZXJzLCBhbmQgaW4gc29tZSBwbGFjZXMsIG9wcG9zaXRlIHRvIHRoZSBlYXNpZXN0IGRlc2NlbnRzLAogICAgICAgICAgICAgICAgICAgIHBsYWNlZCBlbmdpbmVzLCBhbmQgYXR0ZW1wdGVkIHRvIGhpbmRlciB0aGUgdG93bnNtZW4gZnJvbSBnZXR0aW5nIHdhdGVyIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHJpdmVyLCB3aGljaCBvYmxpZ2VkIHRoZW0gYWZ0ZXJ3YXJkIHRvIGdvIGFsbCB0byBvbmUgcGxhY2UgdG8gcHJvY3VyZSB3YXRlci4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQxIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGxhY2UiPlV4ZWxsb2R1bnVtPC9uYW1lPiwgY29udHJhcnkgdG8gdGhlIGdlbmVyYWwKICAgICAgICAgICAgICAgICAgICBleHBlY3RhdGlvbiwgYW5kIHBlcmNlaXZpbmcgdGhhdCB0aGUgdG93biB3YXMgc3Vycm91bmRlZCBieSB0aGUgd29ya3MsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGVuZW15IGhhZCBubyBwb3NzaWJsZSBtZWFucyBvZiByZXRpcmluZyBmcm9tIHRoZSBhc3NhdWx0LCBhbmQgYmVpbmcgbGlrZXdpc2UKICAgICAgICAgICAgICAgICAgICBpbmZvcm1lZCBieSB0aGUgZGVzZXJ0ZXJzIHRoYXQgdGhlIHRvd25zbWVuIGhhZCBhYnVuZGFuY2Ugb2YgY29ybiwgaGUKICAgICAgICAgICAgICAgICAgICBlbmRlYXZvdXJlZCB0byBwcmV2ZW50IHRoZWlyIGdldHRpbmcgd2F0ZXIuIEEgcml2ZXIgZGl2aWRlZCB0aGUgdmFsbGV5IGJlbG93LAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGFsbW9zdCBzdXJyb3VuZGVkIHRoZSBzdGVlcCBjcmFnZ3kgbW91bnRhaW4gb24gd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5VeGVsbG9kdW51bTwvbmFtZT4gd2FzIGJ1aWx0LiBUaGUgbmF0dXJlIG9mIHRoZSBncm91bmQgcHJldmVudGVkIGhpcwogICAgICAgICAgICAgICAgICAgIHR1cm5pbmcgdGhlIGN1cnJlbnQ6IGZvciBpdCByYW4gc28gbG93IGRvd24gYXQgdGhlIGZvb3Qgb2YgdGhlIG1vdW50YWluLCB0aGF0IG5vCiAgICAgICAgICAgICAgICAgICAgZHJhaW5zIGNvdWxkIGJlIHN1bmsgZGVlcCBlbm91Z2ggdG8gZHJhdyBpdCBvZmYgaW4gYW55IGRpcmVjdGlvbi4gQnV0IHRoZQogICAgICAgICAgICAgICAgICAgIGRlc2NlbnQgdG8gaXQgd2FzIHNvIGRpZmZpY3VsdCwgdGhhdCBpZiB3ZSBtYWRlIG9wcG9zaXRpb24sIHRoZSBiZXNpZWdlZCBjb3VsZAogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgY29tZSB0byB0aGUgcml2ZXIgbm9yIHJldGlyZSB1cCB0aGUgcHJlY2lwaWNlIHdpdGhvdXQgaGF6YXJkIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbGl2ZXMuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBwZXJjZWl2aW5nIHRoZSBkaWZmaWN1bHR5LCBkaXNwb3NlZAogICAgICAgICAgICAgICAgICAgIGFyY2hlcnMgYW5kIHNsaW5nZXJzLCBhbmQgaW4gc29tZSBwbGFjZXMsIG9wcG9zaXRlIHRvIHRoZSBlYXNpZXN0IGRlc2NlbnRzLAogICAgICAgICAgICAgICAgICAgIHBsYWNlZCBlbmdpbmVzLCBhbmQgYXR0ZW1wdGVkIHRvIGhpbmRlciB0aGUgdG93bnNtZW4gZnJvbSBnZXR0aW5nIHdhdGVyIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHJpdmVyLCB3aGljaCBvYmxpZ2VkIHRoZW0gYWZ0ZXJ3YXJkIHRvIGdvIGFsbCB0byBvbmUgcGxhY2UgdG8gcHJvY3VyZSB3YXRlci4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkNsb3NlIHVuZGVyIHRoZSB3YWxscyBvZiB0aGUgdG93biwgYSBjb3Bpb3VzIHNwcmluZyBndXNoZWQgb3V0IG9uIHRoYXQgcGFydCwKICAgICAgICAgICAgICAgICAgICB3aGljaCBmb3IgdGhlIHNwYWNlIG9mIG5lYXJseSB0aHJlZSBodW5kcmVkIGZlZXQsIHdhcyBub3Qgc3Vycm91bmRlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICByaXZlci4gV2hpbGUgZXZlcnkgb3RoZXIgcGVyc29uIHdpc2hlZCB0aGF0IHRoZSBiZXNpZWdlZCBjb3VsZCBiZSBkZWJhcnJlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhpcyBzcHJpbmcsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhbG9uZSBzYXcgdGhhdCBpdCBjb3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGVmZmVjdGVkLCB0aG91Z2ggbm90IHdpdGhvdXQgZ3JlYXQgZGFuZ2VyLiBPcHBvc2l0ZSB0byBpdCBoZSBiZWdhbiB0byBhZHZhbmNlCiAgICAgICAgICAgICAgICAgICAgdGhlIHZpbmVhZSB0b3dhcmQgdGhlIG1vdW50YWluLCBhbmQgdG8gdGhyb3cgdXAgYSBtb3VuZCwgd2l0aCBncmVhdCBsYWJvciBhbmQKICAgICAgICAgICAgICAgICAgICBjb250aW51YWwgc2tpcm1pc2hpbmcuIEZvciB0aGUgdG93bnNtZW4gcmFuIGRvd24gZnJvbSB0aGUgaGlnaCBncm91bmQsIGFuZAogICAgICAgICAgICAgICAgICAgIGZvdWdodCB3aXRob3V0IGFueSByaXNrLCBhbmQgd291bmRlZCBzZXZlcmFsIG9mIG91ciBtZW4sIHlldCB0aGV5IG9ic3RpbmF0ZWx5CiAgICAgICAgICAgICAgICAgICAgcHVzaGVkIG9uIGFuZCB3ZXJlIG5vdCBkZXRlcnJlZCBmcm9tIG1vdmluZyBmb3J3YXJkIHRoZSB2aW5lYWUsIGFuZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgc3VybW91bnRpbmcgYnkgdGhlaXIgYXNzaWR1aXR5IHRoZSBkaWZmaWN1bHRpZXMgb2Ygc2l0dWF0aW9uLiBBdCB0aGUgc2FtZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGhleSB3b3JrIG1pbmVzLCBhbmQgbW92ZSB0aGUgY3JhdGVzIGFuZCB2aW5lYWUgdG8gdGhlIHNvdXJjZSBvZiB0aGUgZm91bnRhaW4uCiAgICAgICAgICAgICAgICAgICAgVGhpcyB3YXMgdGhlIG9ubHkgd29yayB3aGljaCB0aGV5IGNvdWxkIGRvIHdpdGhvdXQgZGFuZ2VyIG9yIHN1c3BpY2lvbi4gQSBtb3VuZAogICAgICAgICAgICAgICAgICAgIHNpeHR5IGZlZXQgaGlnaCB3YXMgcmFpc2VkOyBvbiBpdCB3YXMgZXJlY3RlZCBhIHR1cnJldCBvZiB0ZW4gc3Rvcmllcywgbm90IHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgaW50ZW50aW9uIHRoYXQgaXQgc2hvdWxkIGJlIG9uIGEgbGV2ZWwgd2l0aCB0aGUgd2FsbCAoZm9yIHRoYXQgY291bGQgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgZWZmZWN0ZWQgYnkgYW55IHdvcmtzKSwgYnV0IHRvIHJpc2UgYWJvdmUgdGhlIHRvcCBvZiB0aGUgc3ByaW5nLiBXaGVuIG91cgogICAgICAgICAgICAgICAgICAgIGVuZ2luZXMgYmVnYW4gdG8gcGxheSBmcm9tIGl0IHVwb24gdGhlIHBhdGhzIHRoYXQgbGVkIHRvIHRoZSBmb3VudGFpbiwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHRvd25zbWVuIGNvdWxkIG5vdCBnbyBmb3Igd2F0ZXIgd2l0aG91dCBkYW5nZXIsIG5vdCBvbmx5IHRoZSBjYXR0bGUgZGVzaWduZWQgZm9yCiAgICAgICAgICAgICAgICAgICAgZm9vZCBhbmQgdGhlIHdvcmtpbmcgY2F0dGxlLCBidXQgYSBncmVhdCBudW1iZXIgb2YgbWVuIGFsc28gZGllZCBvZiB0aGlyc3QuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gYWxvbmUgc2F3IHRoYXQgaXQgY291bGQgYmUKICAgICAgICAgICAgICAgICAgICBlZmZlY3RlZCwgdGhvdWdoIG5vdCB3aXRob3V0IGdyZWF0IGRhbmdlci4gT3Bwb3NpdGUgdG8gaXQgaGUgYmVnYW4gdG8gYWR2YW5jZQogICAgICAgICAgICAgICAgICAgIHRoZSB2aW5lYWUgdG93YXJkIHRoZSBtb3VudGFpbiwgYW5kIHRvIHRocm93IHVwIGEgbW91bmQsIHdpdGggZ3JlYXQgbGFib3IgYW5kCiAgICAgICAgICAgICAgICAgICAgY29udGludWFsIHNraXJtaXNoaW5nLiBGb3IgdGhlIHRvd25zbWVuIHJhbiBkb3duIGZyb20gdGhlIGhpZ2ggZ3JvdW5kLCBhbmQKICAgICAgICAgICAgICAgICAgICBmb3VnaHQgd2l0aG91dCBhbnkgcmlzaywgYW5kIHdvdW5kZWQgc2V2ZXJhbCBvZiBvdXIgbWVuLCB5ZXQgdGhleSBvYnN0aW5hdGVseQogICAgICAgICAgICAgICAgICAgIHB1c2hlZCBvbiBhbmQgd2VyZSBub3QgZGV0ZXJyZWQgZnJvbSBtb3ZpbmcgZm9yd2FyZCB0aGUgdmluZWFlLCBhbmQgZnJvbQogICAgICAgICAgICAgICAgICAgIHN1cm1vdW50aW5nIGJ5IHRoZWlyIGFzc2lkdWl0eSB0aGUgZGlmZmljdWx0aWVzIG9mIHNpdHVhdGlvbi4gQXQgdGhlIHNhbWUgdGltZQogICAgICAgICAgICAgICAgICAgIHRoZXkgd29yayBtaW5lcywgYW5kIG1vdmUgdGhlIGNyYXRlcyBhbmQgdmluZWFlIHRvIHRoZSBzb3VyY2Ugb2YgdGhlIGZvdW50YWluLgogICAgICAgICAgICAgICAgICAgIFRoaXMgd2FzIHRoZSBvbmx5IHdvcmsgd2hpY2ggdGhleSBjb3VsZCBkbyB3aXRob3V0IGRhbmdlciBvciBzdXNwaWNpb24uIEEgbW91bmQKICAgICAgICAgICAgICAgICAgICBzaXh0eSBmZWV0IGhpZ2ggd2FzIHJhaXNlZDsgb24gaXQgd2FzIGVyZWN0ZWQgYSB0dXJyZXQgb2YgdGVuIHN0b3JpZXMsIG5vdCB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlIGludGVudGlvbiB0aGF0IGl0IHNob3VsZCBiZSBvbiBhIGxldmVsIHdpdGggdGhlIHdhbGwgKGZvciB0aGF0IGNvdWxkIG5vdCBiZQogICAgICAgICAgICAgICAgICAgIGVmZmVjdGVkIGJ5IGFueSB3b3JrcyksIGJ1dCB0byByaXNlIGFib3ZlIHRoZSB0b3Agb2YgdGhlIHNwcmluZy4gV2hlbiBvdXIKICAgICAgICAgICAgICAgICAgICBlbmdpbmVzIGJlZ2FuIHRvIHBsYXkgZnJvbSBpdCB1cG9uIHRoZSBwYXRocyB0aGF0IGxlZCB0byB0aGUgZm91bnRhaW4sIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICB0b3duc21lbiBjb3VsZCBub3QgZ28gZm9yIHdhdGVyIHdpdGhvdXQgZGFuZ2VyLCBub3Qgb25seSB0aGUgY2F0dGxlIGRlc2lnbmVkIGZvcgogICAgICAgICAgICAgICAgICAgIGZvb2QgYW5kIHRoZSB3b3JraW5nIGNhdHRsZSwgYnV0IGEgZ3JlYXQgbnVtYmVyIG9mIG1lbiBhbHNvIGRpZWQgb2YgdGhpcnN0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFsYXJtZWQgYXQgdGhpcyBjYWxhbWl0eSwgdGhlIHRvd25zbWVuIGZpbGwgYmFycmVscyB3aXRoIHRhbGxvdywgcGl0Y2gsIGFuZCBkcmllZAogICAgICAgICAgICAgICAgICAgIHdvb2Q6IHRoZXNlIHRoZXkgc2V0IG9uIGZpcmUsIGFuZCByb2xsIGRvd24gb24gb3VyIHdvcmtzLiBBdCB0aGUgc2FtZSB0aW1lLCB0aGV5CiAgICAgICAgICAgICAgICAgICAgZmlnaHQgbW9zdCBmdXJpb3VzbHksIHRvIGRldGVyIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5nYWdlbWVudCBhbmQgZGFuZ2VyLCBmcm9tIGV4dGluZ3Vpc2hpbmcgdGhlIGZsYW1lcy4gSW5zdGFudGx5IGEgZ3JlYXQgYmxhemUKICAgICAgICAgICAgICAgICAgICBhcm9zZSBpbiB0aGUgd29ya3MuIEZvciB3aGF0ZXZlciB0aGV5IHRocmV3IGRvd24gdGhlIHByZWNpcGljZSwgc3RyaWtpbmcgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZSB2aW5lYWUgYW5kIGFnZ2VyLCBjb21tdW5pY2F0ZWQgdGhlIGZpcmUgdG8gd2hhdGV2ZXIgd2FzIGluIHRoZSB3YXkuIE91cgogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIG9uIHRoZSBvdGhlciBoYW5kLCB0aG91Z2ggdGhleSB3ZXJlIGVuZ2FnZWQgaW4gYSBwZXJpbG91cyBzb3J0IG9mCiAgICAgICAgICAgICAgICAgICAgZW5jb3VudGVyLCBhbmQgbGFib3JpbmcgdW5kZXIgdGhlIGRpc2FkdmFudGFnZXMgb2YgcG9zaXRpb24sIHlldCBzdXBwb3J0ZWQgYWxsCiAgICAgICAgICAgICAgICAgICAgd2l0aCB2ZXJ5IGdyZWF0IHByZXNlbmNlIG9mIG1pbmQuIEZvciB0aGUgYWN0aW9uIGhhcHBlbmVkIGluIGFuIGVsZXZhdGVkCiAgICAgICAgICAgICAgICAgICAgc2l0dWF0aW9uLCBhbmQgaW4gc2lnaHQgb2Ygb3VyIGFybXk7IGFuZCBhIGdyZWF0IHNob3V0IHdhcyByYWlzZWQgb24gYm90aCBzaWRlczsKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUgZXZlcnkgbWFuIGZhY2VkIHRoZSB3ZWFwb25zIG9mIHRoZSBlbmVteSBhbmQgdGhlIGZsYW1lcyBpbiBhcwogICAgICAgICAgICAgICAgICAgIGNvbnNwaWN1b3VzIGEgbWFubmVyIGFzIGhlIGNvdWxkLCB0aGF0IGhpcyB2YWxvciBtaWdodCBiZSB0aGUgYmV0dGVyIGtub3duIGFuZAogICAgICAgICAgICAgICAgICAgIGF0dGVzdGVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGVuZ2FnZW1lbnQgYW5kIGRhbmdlciwgZnJvbSBleHRpbmd1aXNoaW5nIHRoZSBmbGFtZXMuIEluc3RhbnRseSBhIGdyZWF0IGJsYXplCiAgICAgICAgICAgICAgICAgICAgYXJvc2UgaW4gdGhlIHdvcmtzLiBGb3Igd2hhdGV2ZXIgdGhleSB0aHJldyBkb3duIHRoZSBwcmVjaXBpY2UsIHN0cmlraW5nIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aGUgdmluZWFlIGFuZCBhZ2dlciwgY29tbXVuaWNhdGVkIHRoZSBmaXJlIHRvIHdoYXRldmVyIHdhcyBpbiB0aGUgd2F5LiBPdXIKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycyBvbiB0aGUgb3RoZXIgaGFuZCwgdGhvdWdoIHRoZXkgd2VyZSBlbmdhZ2VkIGluIGEgcGVyaWxvdXMgc29ydCBvZgogICAgICAgICAgICAgICAgICAgIGVuY291bnRlciwgYW5kIGxhYm9yaW5nIHVuZGVyIHRoZSBkaXNhZHZhbnRhZ2VzIG9mIHBvc2l0aW9uLCB5ZXQgc3VwcG9ydGVkIGFsbAogICAgICAgICAgICAgICAgICAgIHdpdGggdmVyeSBncmVhdCBwcmVzZW5jZSBvZiBtaW5kLiBGb3IgdGhlIGFjdGlvbiBoYXBwZW5lZCBpbiBhbiBlbGV2YXRlZAogICAgICAgICAgICAgICAgICAgIHNpdHVhdGlvbiwgYW5kIGluIHNpZ2h0IG9mIG91ciBhcm15OyBhbmQgYSBncmVhdCBzaG91dCB3YXMgcmFpc2VkIG9uIGJvdGggc2lkZXM7CiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlIGV2ZXJ5IG1hbiBmYWNlZCB0aGUgd2VhcG9ucyBvZiB0aGUgZW5lbXkgYW5kIHRoZSBmbGFtZXMgaW4gYXMKICAgICAgICAgICAgICAgICAgICBjb25zcGljdW91cyBhIG1hbm5lciBhcyBoZSBjb3VsZCwgdGhhdCBoaXMgdmFsb3IgbWlnaHQgYmUgdGhlIGJldHRlciBrbm93biBhbmQKICAgICAgICAgICAgICAgICAgICBhdHRlc3RlZC4gPC90cmFuc2xhdGlvbj4="
translation['8.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb2JzZXJ2aW5nIHRoYXQgc2V2ZXJhbCBvZiBoaXMgbWVuIHdlcmUgd291bmRlZCwKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIHRoZSBjb2hvcnRzIHRvIGFzY2VuZCB0aGUgbW91bnRhaW4gb24gYWxsIHNpZGVzLCBhbmQsIHVuZGVyIHByZXRlbnNlIG9mCiAgICAgICAgICAgICAgICAgICAgYXNzYWlsaW5nIHRoZSB3YWxscywgdG8gcmFpc2UgYSBzaG91dDogYXQgd2hpY2ggdGhlIGJlc2llZ2VkIGJlaW5nIGZyaWdodGVuZWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIG5vdCBrbm93aW5nIHdoYXQgd2FzIGdvaW5nIG9uIGluIG90aGVyIHBsYWNlcywgY2FsbCBvZmYgdGhlaXIgYXJtZWQgdHJvb3BzCiAgICAgICAgICAgICAgICAgICAgZnJvbSBhdHRhY2tpbmcgb3VyIHdvcmtzLCBhbmQgZGlzcG9zZSB0aGVtIG9uIHRoZSB3YWxscy4gVGh1cyBvdXIgbWVuIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBoYXphcmRpbmcgYSBiYXR0bGUsIGdhaW5lZCB0aW1lIHBhcnRseSB0byBleHRpbmd1aXNoIHRoZSB3b3JrcyB3aGljaCBoYWQgY2F1Z2h0CiAgICAgICAgICAgICAgICAgICAgZmlyZSwgYW5kIHBhcnRseSB0byBjdXQgb2ZmIHRoZSBjb21tdW5pY2F0aW9uLiBBcyB0aGUgdG93bnNtZW4gc3RpbGwgY29udGludWVkCiAgICAgICAgICAgICAgICAgICAgdG8gbWFrZSBhbiBvYnN0aW5hdGUgcmVzaXN0YW5jZSwgYW5kIGV2ZW4sIGFmdGVyIGxvc2luZyB0aGUgZ3JlYXRlc3QgcGFydCBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGZvcmNlcyBieSBkcm91Z2h0LCBwZXJzZXZlcmVkIGluIHRoZWlyIHJlc29sdXRpb246IGF0IGxhc3QgdGhlIHZlaW5zIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHNwcmluZyB3ZXJlIGN1dCBhY3Jvc3MgYnkgb3VyIG1pbmVzLCBhbmQgdHVybmVkIGZyb20gdGhlaXIgY291cnNlLiBCeSB0aGlzCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY29uc3RhbnQgc3ByaW5nIHdhcyBzdWRkZW5seSBkcmllZCB1cCwgd2hpY2ggcmVkdWNlZCB0aGVtIHRvIHN1Y2ggZGVzcGFpcgogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBpbWFnaW5lZCB0aGF0IGl0IHdhcyBub3QgZG9uZSBieSB0aGUgYXJ0IG9mIG1hbiwgYnV0IHRoZSB3aWxsIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGdvZHM7IGZvcmNlZCwgdGhlcmVmb3JlLCBieSBuZWNlc3NpdHksIHRoZXkgYXQgbGVuZ3RoIHN1Ym1pdHRlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb2JzZXJ2aW5nIHRoYXQgc2V2ZXJhbCBvZiBoaXMgbWVuIHdlcmUgd291bmRlZCwKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIHRoZSBjb2hvcnRzIHRvIGFzY2VuZCB0aGUgbW91bnRhaW4gb24gYWxsIHNpZGVzLCBhbmQsIHVuZGVyIHByZXRlbnNlIG9mCiAgICAgICAgICAgICAgICAgICAgYXNzYWlsaW5nIHRoZSB3YWxscywgdG8gcmFpc2UgYSBzaG91dDogYXQgd2hpY2ggdGhlIGJlc2llZ2VkIGJlaW5nIGZyaWdodGVuZWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIG5vdCBrbm93aW5nIHdoYXQgd2FzIGdvaW5nIG9uIGluIG90aGVyIHBsYWNlcywgY2FsbCBvZmYgdGhlaXIgYXJtZWQgdHJvb3BzCiAgICAgICAgICAgICAgICAgICAgZnJvbSBhdHRhY2tpbmcgb3VyIHdvcmtzLCBhbmQgZGlzcG9zZSB0aGVtIG9uIHRoZSB3YWxscy4gVGh1cyBvdXIgbWVuIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBoYXphcmRpbmcgYSBiYXR0bGUsIGdhaW5lZCB0aW1lIHBhcnRseSB0byBleHRpbmd1aXNoIHRoZSB3b3JrcyB3aGljaCBoYWQgY2F1Z2h0CiAgICAgICAgICAgICAgICAgICAgZmlyZSwgYW5kIHBhcnRseSB0byBjdXQgb2ZmIHRoZSBjb21tdW5pY2F0aW9uLiBBcyB0aGUgdG93bnNtZW4gc3RpbGwgY29udGludWVkCiAgICAgICAgICAgICAgICAgICAgdG8gbWFrZSBhbiBvYnN0aW5hdGUgcmVzaXN0YW5jZSwgYW5kIGV2ZW4sIGFmdGVyIGxvc2luZyB0aGUgZ3JlYXRlc3QgcGFydCBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGZvcmNlcyBieSBkcm91Z2h0LCBwZXJzZXZlcmVkIGluIHRoZWlyIHJlc29sdXRpb246IGF0IGxhc3QgdGhlIHZlaW5zIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHNwcmluZyB3ZXJlIGN1dCBhY3Jvc3MgYnkgb3VyIG1pbmVzLCBhbmQgdHVybmVkIGZyb20gdGhlaXIgY291cnNlLiBCeSB0aGlzCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY29uc3RhbnQgc3ByaW5nIHdhcyBzdWRkZW5seSBkcmllZCB1cCwgd2hpY2ggcmVkdWNlZCB0aGVtIHRvIHN1Y2ggZGVzcGFpcgogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBpbWFnaW5lZCB0aGF0IGl0IHdhcyBub3QgZG9uZSBieSB0aGUgYXJ0IG9mIG1hbiwgYnV0IHRoZSB3aWxsIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGdvZHM7IGZvcmNlZCwgdGhlcmVmb3JlLCBieSBuZWNlc3NpdHksIHRoZXkgYXQgbGVuZ3RoIHN1Ym1pdHRlZC4gPC90cmFuc2xhdGlvbj4="
translation['8.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYmVpbmcgY29udmluY2VkIHRoYXQgaGlzIGxlbml0eSB3YXMga25vd24gdG8gYWxsCiAgICAgICAgICAgICAgICAgICAgbWVuLCBhbmQgYmVpbmcgdW5kZXIgbm8gZmVhcnMgb2YgYmVpbmcgdGhvdWdodCB0byBhY3Qgc2V2ZXJlbHkgZnJvbSBhIG5hdHVyYWwKICAgICAgICAgICAgICAgICAgICBjcnVlbHR5LCBhbmQgcGVyY2VpdmluZyB0aGF0IHRoZXJlIHdvdWxkIGJlIG5vIGVuZCB0byBoaXMgdHJvdWJsZXMgaWYgc2V2ZXJhbAogICAgICAgICAgICAgICAgICAgIHN0YXRlcyBzaG91bGQgYXR0ZW1wdCB0byByZWJlbCBpbiBsaWtlIG1hbm5lciBhbmQgaW4gZGlmZmVyZW50IHBsYWNlcywgcmVzb2x2ZWQKICAgICAgICAgICAgICAgICAgICB0byBkZXRlciBvdGhlcnMgYnkgaW5mbGljdGluZyBhbiBleGVtcGxhcnkgcHVuaXNobWVudCBvbiB0aGVzZS4gQWNjb3JkaW5nbHkgaGUKICAgICAgICAgICAgICAgICAgICBjdXQgb2ZmIHRoZSBoYW5kcyBvZiB0aG9zZSB3aG8gaGFkIGJvcm5lIGFybXMgYWdhaW5zdCBoaW0uIFRoZWlyIGxpdmVzIGhlCiAgICAgICAgICAgICAgICAgICAgc3BhcmVkLCB0aGF0IHRoZSBwdW5pc2htZW50IG9mIHRoZWlyIHJlYmVsbGlvbiBtaWdodCBiZSB0aGUgbW9yZSBjb25zcGljdW91cy4KICAgICAgICAgICAgICAgICAgICBEcmFwZXMsIHdobyBJIGhhdmUgc2FpZCB3YXMgdGFrZW4gYnkgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW5pbml1czwvbmFtZT4sIGVpdGhlciB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgaW5kaWduYXRpb24gYW5kIGdyaWVmIGFyaXNpbmcgZnJvbSBoaXMgY2FwdGl2aXR5LCBvciB0aHJvdWdoIGZlYXIgb2Ygc2V2ZXJlcgogICAgICAgICAgICAgICAgICAgIHB1bmlzaG1lbnRzLCBhYnN0YWluZWQgZnJvbSBmb29kIGZvciBzZXZlcmFsIGRheXMsIGFuZCB0aHVzIHBlcmlzaGVkLiBBdCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIHRpbWUsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THV0ZXJpdXM8L25hbWU+LCB3aG8sIEkgaGF2ZSByZWxhdGVkLCBoYWQgZXNjYXBlZCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGJhdHRsZSwgaGF2aW5nIGZhbGxlbiBpbnRvIHRoZSBoYW5kcyBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwYXNuYWN0dXM8L25hbWU+LCBhbgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFydmVybmlhbjwvbmFtZT4gKGZvciBoZSBmcmVxdWVudGx5IGNoYW5nZWQgaGlzIHF1YXJ0ZXJzLCBhbmQgdGhyZXcKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIG9uIHRoZSBob25vciBvZiBzZXZlcmFsIHBlcnNvbnMsIGFzIGhlIHNhdyB0aGF0IGhlIGRhcmUgbm90IHJlbWFpbiBsb25nCiAgICAgICAgICAgICAgICAgICAgaW4gb25lIHBsYWNlLCBhbmQgd2FzIGNvbnNjaW91cyBob3cgZ3JlYXQgYW4gZW5lbXkgaGUgZGVzZXJ2ZWQgdG8gaGF2ZSBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4pLCB3YXMgYnkgdGhpcyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwYXNuYWN0dXM8L25hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcnZlcm5pYW48L25hbWU+LCBhIHNpbmNlcmUgZnJpZW5kIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW48L25hbWU+IHBlb3BsZSwgZGVsaXZlcmVkIHdpdGhvdXQgYW55IGhlc2l0YXRpb24sIGEgcHJpc29uZXIgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBiZWluZyBjb252aW5jZWQgdGhhdCBoaXMgbGVuaXR5IHdhcyBrbm93biB0byBhbGwKICAgICAgICAgICAgICAgICAgICBtZW4sIGFuZCBiZWluZyB1bmRlciBubyBmZWFycyBvZiBiZWluZyB0aG91Z2h0IHRvIGFjdCBzZXZlcmVseSBmcm9tIGEgbmF0dXJhbAogICAgICAgICAgICAgICAgICAgIGNydWVsdHksIGFuZCBwZXJjZWl2aW5nIHRoYXQgdGhlcmUgd291bGQgYmUgbm8gZW5kIHRvIGhpcyB0cm91YmxlcyBpZiBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgc3RhdGVzIHNob3VsZCBhdHRlbXB0IHRvIHJlYmVsIGluIGxpa2UgbWFubmVyIGFuZCBpbiBkaWZmZXJlbnQgcGxhY2VzLCByZXNvbHZlZAogICAgICAgICAgICAgICAgICAgIHRvIGRldGVyIG90aGVycyBieSBpbmZsaWN0aW5nIGFuIGV4ZW1wbGFyeSBwdW5pc2htZW50IG9uIHRoZXNlLiBBY2NvcmRpbmdseSBoZQogICAgICAgICAgICAgICAgICAgIGN1dCBvZmYgdGhlIGhhbmRzIG9mIHRob3NlIHdobyBoYWQgYm9ybmUgYXJtcyBhZ2FpbnN0IGhpbS4gVGhlaXIgbGl2ZXMgaGUKICAgICAgICAgICAgICAgICAgICBzcGFyZWQsIHRoYXQgdGhlIHB1bmlzaG1lbnQgb2YgdGhlaXIgcmViZWxsaW9uIG1pZ2h0IGJlIHRoZSBtb3JlIGNvbnNwaWN1b3VzLgogICAgICAgICAgICAgICAgICAgIERyYXBlcywgd2hvIEkgaGF2ZSBzYWlkIHdhcyB0YWtlbiBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbmluaXVzPC9uYW1lPiwgZWl0aGVyIHRocm91Z2gKICAgICAgICAgICAgICAgICAgICBpbmRpZ25hdGlvbiBhbmQgZ3JpZWYgYXJpc2luZyBmcm9tIGhpcyBjYXB0aXZpdHksIG9yIHRocm91Z2ggZmVhciBvZiBzZXZlcmVyCiAgICAgICAgICAgICAgICAgICAgcHVuaXNobWVudHMsIGFic3RhaW5lZCBmcm9tIGZvb2QgZm9yIHNldmVyYWwgZGF5cywgYW5kIHRodXMgcGVyaXNoZWQuIEF0IHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgdGltZSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdXRlcml1czwvbmFtZT4sIHdobywgSSBoYXZlIHJlbGF0ZWQsIGhhZCBlc2NhcGVkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlLCBoYXZpbmcgZmFsbGVuIGludG8gdGhlIGhhbmRzIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBhc25hY3R1czwvbmFtZT4sIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ2ZXJuaWFuPC9uYW1lPiAoZm9yIGhlIGZyZXF1ZW50bHkgY2hhbmdlZCBoaXMgcXVhcnRlcnMsIGFuZCB0aHJldwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgb24gdGhlIGhvbm9yIG9mIHNldmVyYWwgcGVyc29ucywgYXMgaGUgc2F3IHRoYXQgaGUgZGFyZSBub3QgcmVtYWluIGxvbmcKICAgICAgICAgICAgICAgICAgICBpbiBvbmUgcGxhY2UsIGFuZCB3YXMgY29uc2Npb3VzIGhvdyBncmVhdCBhbiBlbmVteSBoZSBkZXNlcnZlZCB0byBoYXZlIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiksIHdhcyBieSB0aGlzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBhc25hY3R1czwvbmFtZT4sIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFydmVybmlhbjwvbmFtZT4sIGEgc2luY2VyZSBmcmllbmQgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcGVvcGxlLCBkZWxpdmVyZWQgd2l0aG91dCBhbnkgaGVzaXRhdGlvbiwgYSBwcmlzb25lciB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['8.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtZWFuIHRpbWUsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+IGVuZ2FnZXMgaW4gYSBzdWNjZXNzZnVsCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSBhY3Rpb24gYW1vbmcgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT47IGFuZCwgaGF2aW5nIGtpbGxlZCBzZXZlcmFsIG9mIHRoZW0gYW5kIG9mIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2VybWFuczwvbmFtZT4sIHdobyBuZXZlciByZWZ1c2VkIHRoZWlyIGFpZCB0byBhbnkgcGVyc29uCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuczwvbmFtZT4sIGhlIGdvdCB0aGVpciBjaGllZnMgYWxpdmUgaW50bwogICAgICAgICAgICAgICAgICAgIGhpcyBwb3dlciwgYW5kLCBhbW9uZyB0aGVtLCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1cnVzPC9uYW1lPiwgYW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+LCB3aG8gd2FzCiAgICAgICAgICAgICAgICAgICAgaGlnaGx5IHJlbm93bmVkIGJvdGggZm9yIGhpcyB2YWxvciBhbmQgYmlydGgsIGFuZCB3YXMgdGhlIG9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1YW48L25hbWU+IHRoYXQgaGFkIGNvbnRpbnVlZCBpbiBhcm1zIHRpbGwgdGhhdCB0aW1lLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5MYWJpZW51czwvbmFtZT4gZW5nYWdlcyBpbiBhIHN1Y2Nlc3NmdWwKICAgICAgICAgICAgICAgICAgICBjYXZhbHJ5IGFjdGlvbiBhbW9uZyB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPjsgYW5kLCBoYXZpbmcga2lsbGVkIHNldmVyYWwgb2YgdGhlbSBhbmQgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5HZXJtYW5zPC9uYW1lPiwgd2hvIG5ldmVyIHJlZnVzZWQgdGhlaXIgYWlkIHRvIGFueSBwZXJzb24KICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgaGUgZ290IHRoZWlyIGNoaWVmcyBhbGl2ZSBpbnRvCiAgICAgICAgICAgICAgICAgICAgaGlzIHBvd2VyLCBhbmQsIGFtb25nIHRoZW0sIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3VydXM8L25hbWU+LCBhbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVhbjwvbmFtZT4sIHdobyB3YXMKICAgICAgICAgICAgICAgICAgICBoaWdobHkgcmVub3duZWQgYm90aCBmb3IgaGlzIHZhbG9yIGFuZCBiaXJ0aCwgYW5kIHdhcyB0aGUgb25seQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVhbjwvbmFtZT4gdGhhdCBoYWQgY29udGludWVkIGluIGFybXMgdGlsbCB0aGF0IHRpbWUuIDwvdHJhbnNsYXRpb24+"
translation['8.46'] = ""
translation['8.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyBmaW5pc2hlZCB0aGVzZSBhZmZhaXJzLCBoZSByZXR1cm5lZCB0byBoaXMgbGVnaW9ucyBhbW9uZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+IGFuZCB3aW50ZXJlZCBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg0NjgiIHJlZz0iICArQXJyYXMgWzIuNzY2LDUwLjI4M10gKGluaGFiaXRlZCBwbGFjZSksIFBhcy1kZS1DYWxhaXMsIE5vcmQtUGFzLWRlLUNhbGFpcywgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TmVtZXRvY2VubmEgPC9uYW1lPjogdGhlcmUgaGUgZ290IGludGVsbGlnZW5jZSB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29taXVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdHJlYmF0aWFuPC9uYW1lPiBoYWQgaGFkIGFuIGVuZ2FnZW1lbnQgd2l0aCBoaXMgY2F2YWxyeS4gRm9yIHdoZW4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbnRvbml1czwvbmFtZT4gaGFkIGdvbmUgaW50byB3aW50ZXIgcXVhcnRlcnMsIGFuZCB0aGUgc3RhdGUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXRyZWJhdGVzPC9uYW1lPiBjb250aW51ZWQgaW4gdGhlaXIgYWxsZWdpYW5jZSwgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21pdXM8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHdobywgYWZ0ZXIgdGhhdCB3b3VuZCB3aGljaCBJIGJlZm9yZSBtZW50aW9uZWQsIHdhcyBhbHdheXMgcmVhZHkgdG8gam9pbiBoaXMKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5bWVuIHVwb24gZXZlcnkgY29tbW90aW9uLCB0aGF0IHRoZXkgbWlnaHQgbm90IHdhbnQgYSBwZXJzb24gdG8gYWR2aXNlIGFuZAogICAgICAgICAgICAgICAgICAgIGhlYWQgdGhlbSBpbiB0aGUgbWFuYWdlbWVudCBvZiB0aGUgd2FyLCB3aGVuIGhpcyBzdGF0ZSBzdWJtaXR0ZWQgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbnM8L25hbWU+LCBzdXBwb3J0ZWQgaGltc2VsZiBhbmQgaGlzIGFkaGVyZW50cyBvbiBwbHVuZGVyCiAgICAgICAgICAgICAgICAgICAgYnkgbWVhbnMgb2YgaGlzIGNhdmFscnksIGluZmVzdGVkIHRoZSByb2FkcywgYW5kIGludGVyY2VwdGVkIHNldmVyYWwgY29udm95cwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdlcmUgYnJpbmdpbmcgcHJvdmlzaW9ucyB0byB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPlJvbWFuPC9uYW1lPiBxdWFydGVycy4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiBhbmQgd2ludGVyZWQgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NDY4IiByZWc9IiAgK0FycmFzIFsyLjc2Niw1MC4yODNdIChpbmhhYml0ZWQgcGxhY2UpLCBQYXMtZGUtQ2FsYWlzLCBOb3JkLVBhcy1kZS1DYWxhaXMsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPk5lbWV0b2Nlbm5hIDwvbmFtZT46IHRoZXJlIGhlIGdvdCBpbnRlbGxpZ2VuY2UgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbWl1czwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXRyZWJhdGlhbjwvbmFtZT4gaGFkIGhhZCBhbiBlbmdhZ2VtZW50IHdpdGggaGlzIGNhdmFscnkuIEZvciB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW50b25pdXM8L25hbWU+IGhhZCBnb25lIGludG8gd2ludGVyIHF1YXJ0ZXJzLCBhbmQgdGhlIHN0YXRlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkF0cmViYXRlczwvbmFtZT4gY29udGludWVkIGluIHRoZWlyIGFsbGVnaWFuY2UsIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29taXVzPC9uYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aG8sIGFmdGVyIHRoYXQgd291bmQgd2hpY2ggSSBiZWZvcmUgbWVudGlvbmVkLCB3YXMgYWx3YXlzIHJlYWR5IHRvIGpvaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgY291bnRyeW1lbiB1cG9uIGV2ZXJ5IGNvbW1vdGlvbiwgdGhhdCB0aGV5IG1pZ2h0IG5vdCB3YW50IGEgcGVyc29uIHRvIGFkdmlzZSBhbmQKICAgICAgICAgICAgICAgICAgICBoZWFkIHRoZW0gaW4gdGhlIG1hbmFnZW1lbnQgb2YgdGhlIHdhciwgd2hlbiBoaXMgc3RhdGUgc3VibWl0dGVkIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+Um9tYW5zPC9uYW1lPiwgc3VwcG9ydGVkIGhpbXNlbGYgYW5kIGhpcyBhZGhlcmVudHMgb24gcGx1bmRlcgogICAgICAgICAgICAgICAgICAgIGJ5IG1lYW5zIG9mIGhpcyBjYXZhbHJ5LCBpbmZlc3RlZCB0aGUgcm9hZHMsIGFuZCBpbnRlcmNlcHRlZCBzZXZlcmFsIGNvbnZveXMKICAgICAgICAgICAgICAgICAgICB3aGljaCB3ZXJlIGJyaW5naW5nIHByb3Zpc2lvbnMgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iZXRobmljIj5Sb21hbjwvbmFtZT4gcXVhcnRlcnMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.48'] = ""
translation['8.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgd2hpbGUgaW4gd2ludGVyIHF1YXJ0ZXJzIGluIHRoZSBjb3VudHJ5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4sIG1hZGUgaXQgaGlzIG9ubHkgYnVzaW5lc3MgdG8ga2VlcCB0aGUgc3RhdGVzIGluIGFtaXR5CiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaW0sIGFuZCB0byBnaXZlIG5vbmUgZWl0aGVyIGhvcGVzIG9mLCBvciBwcmV0ZXh0IGZvciBhIHJldm9sdC4gRm9yIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICB3YXMgZnVydGhlciBmcm9tIGhpcyB3aXNoZXMgdGhhbiB0byBiZSB1bmRlciB0aGUgbmVjZXNzaXR5IG9mIGVuZ2FnaW5nIGluCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciB3YXIgYXQgaGlzIGRlcGFydHVyZTsgbGVzdCwgd2hlbiBoZSB3YXMgZHJhd2luZyBoaXMgYXJteSBvdXQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY291bnRyeSwgYW55IHdhciBzaG91bGQgYmUgbGVmdCB1bmZpbmlzaGVkLCB3aGljaCB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJldGhuaWMiPkdhdWxzPC9uYW1lPiB3b3VsZCBjaGVlcmZ1bGx5IHVuZGVydGFrZSwgd2hlbiB0aGVyZSB3YXMgbm8gaW1tZWRpYXRlCiAgICAgICAgICAgICAgICAgICAgZGFuZ2VyLiBUaGVyZWZvcmUsIGJ5IHRyZWF0aW5nIHRoZSBzdGF0ZXMgd2l0aCByZXNwZWN0LCBtYWtpbmcgcmljaCBwcmVzZW50cyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBsZWFkaW5nIG1lbiwgaW1wb3Npbmcgbm8gbmV3IGJ1cmRlbnMsIGFuZCBtYWtpbmcgdGhlIHRlcm1zIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgc3ViamVjdGlvbiBsaWdodGVyLCBoZSBlYXNpbHkga2VwdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gKGFscmVhZHkgZXhoYXVzdGVkIGJ5IHNvCiAgICAgICAgICAgICAgICAgICAgbWFueSB1bnN1Y2Nlc3NmdWwgYmF0dGxlcykgaW4gb2JlZGllbmNlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCB3aGlsZSBpbiB3aW50ZXIgcXVhcnRlcnMgaW4gdGhlIGNvdW50cnkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiwgbWFkZSBpdCBoaXMgb25seSBidXNpbmVzcyB0byBrZWVwIHRoZSBzdGF0ZXMgaW4gYW1pdHkKICAgICAgICAgICAgICAgICAgICB3aXRoIGhpbSwgYW5kIHRvIGdpdmUgbm9uZSBlaXRoZXIgaG9wZXMgb2YsIG9yIHByZXRleHQgZm9yIGEgcmV2b2x0LiBGb3Igbm90aGluZwogICAgICAgICAgICAgICAgICAgIHdhcyBmdXJ0aGVyIGZyb20gaGlzIHdpc2hlcyB0aGFuIHRvIGJlIHVuZGVyIHRoZSBuZWNlc3NpdHkgb2YgZW5nYWdpbmcgaW4KICAgICAgICAgICAgICAgICAgICBhbm90aGVyIHdhciBhdCBoaXMgZGVwYXJ0dXJlOyBsZXN0LCB3aGVuIGhlIHdhcyBkcmF3aW5nIGhpcyBhcm15IG91dCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LCBhbnkgd2FyIHNob3VsZCBiZSBsZWZ0IHVuZmluaXNoZWQsIHdoaWNoIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9ImV0aG5pYyI+R2F1bHM8L25hbWU+IHdvdWxkIGNoZWVyZnVsbHkgdW5kZXJ0YWtlLCB3aGVuIHRoZXJlIHdhcyBubyBpbW1lZGlhdGUKICAgICAgICAgICAgICAgICAgICBkYW5nZXIuIFRoZXJlZm9yZSwgYnkgdHJlYXRpbmcgdGhlIHN0YXRlcyB3aXRoIHJlc3BlY3QsIG1ha2luZyByaWNoIHByZXNlbnRzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGxlYWRpbmcgbWVuLCBpbXBvc2luZyBubyBuZXcgYnVyZGVucywgYW5kIG1ha2luZyB0aGUgdGVybXMgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBzdWJqZWN0aW9uIGxpZ2h0ZXIsIGhlIGVhc2lseSBrZXB0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiAoYWxyZWFkeSBleGhhdXN0ZWQgYnkgc28KICAgICAgICAgICAgICAgICAgICBtYW55IHVuc3VjY2Vzc2Z1bCBiYXR0bGVzKSBpbiBvYmVkaWVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['8.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gdGhlIHdpbnRlciBxdWFydGVycyB3ZXJlIGJyb2tlbiB1cCBoZSBoaW1zZWxmLCBjb250cmFyeSB0byBoaXMgdXN1YWwKICAgICAgICAgICAgICAgICAgICBwcmFjdGljZSwgcHJvY2VlZGVkIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPiwgYnkgdGhlIGxvbmdlc3QKICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSBzdGFnZXMsIGluIG9yZGVyIHRvIHZpc2l0IHRoZSBmcmVlIHRvd25zIGFuZCBjb2xvbmllcywgdGhhdCBoZSBtaWdodAogICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZCB0byB0aGVtIHRoZSBwZXRpdGlvbiBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmN1cyBBbnRvbml1czwvbmFtZT4sIGhpcyB0cmVhc3VyZXIsCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBwcmllc3Rob29kLiBGb3IgaGUgZXhlcnRlZCBoaXMgaW50ZXJlc3QgYm90aCBjaGVlcmZ1bGx5IGluIGZhdm9yIG9mIGEKICAgICAgICAgICAgICAgICAgICBtYW4gc3Ryb25nbHkgYXR0YWNoZWQgdG8gaGltLCB3aG9tIGhlIGhhZCBzZW50IGhvbWUgYmVmb3JlIGhpbSB0byBhdHRlbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZWxlY3Rpb24sIGFuZCB6ZWFsb3VzbHkgdG8gb3Bwb3NlIHRoZSBmYWN0aW9uIGFuZCBwb3dlciBvZiBhIGZldyBtZW4sIHdobywgYnkKICAgICAgICAgICAgICAgICAgICByZWplY3RpbmcgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJjdXMgQW50b25pdXM8L25hbWU+LCB3aXNoZWQgdG8gdW5kZXJtaW5lIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIGluZmx1ZW5jZSB3aGVuIGdvaW5nIG91dCBvZiBvZmZpY2UuIFRob3VnaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGVhcmQgb24gdGhlIHJvYWQsIGJlZm9yZSBoZSByZWFjaGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCIgcmVnPSJJdGFseSBbMTIuODMzLDQyLjgzM10gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkl0YWx5PC9uYW1lPiB0aGF0IGhlIHdhcyBjcmVhdGVkIGF1Z3VyLCB5ZXQgaGUgdGhvdWdodCBoaW1zZWxmIGluIGhvbm9yCiAgICAgICAgICAgICAgICAgICAgYm91bmQgdG8gdmlzaXQgdGhlIGZyZWUgdG93bnMgYW5kIGNvbG9uaWVzLCB0byByZXR1cm4gdGhlbSB0aGFua3MgZm9yIHJlbmRlcmluZwogICAgICAgICAgICAgICAgICAgIHN1Y2ggc2VydmljZSB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFudG9uaXVzPC9uYW1lPiBieSB0aGVpciBwcmVzZW5jZSBpbiBzdWNoIGdyZWF0IG51bWJlcnMKICAgICAgICAgICAgICAgICAgICBbYXQgdGhlIGVsZWN0aW9uXSwgYW5kIGF0IHRoZSBzYW1lIHRpbWUgdG8gcmVjb21tZW5kIHRvIHRoZW0gaGltc2VsZiwgYW5kIGhpcwogICAgICAgICAgICAgICAgICAgIGhvbm9yIGluIGhpcyBzdWl0IGZvciB0aGUgY29uc3VsYXRlIHRoZSBlbnN1aW5nIHllYXIgWzxkYXRlIGF1dGhuYW1lPSItNDgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00OCI+NDg8L2RhdGU+IEIuQy5dLiBGb3IgaGlzIGFkdmVyc2FyaWVzIGFycm9nYW50bHkgYm9hc3RlZCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIExlbnR1bHVzPC9uYW1lPiBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBNYXJjZWxsdXM8L25hbWU+IGhhZCBiZWVuIGFwcG9pbnRlZCBjb25zdWxzLAogICAgICAgICAgICAgICAgICAgIHdobyB3b3VsZCBzdHJpcCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gb2YgYWxsIGhvbm9yIGFuZCBkaWduaXR5OiBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBjb25zdWxhdGUgaGFkIGJlZW4gaW5qdXJpb3VzbHkgdGFrZW4gZnJvbSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcmdpdXMgR2FsYmE8L25hbWU+LAogICAgICAgICAgICAgICAgICAgIHRob3VnaCBoZSBoYWQgYmVlbiBtdWNoIHN1cGVyaW9yIGluIHZvdGVzIGFuZCBpbnRlcmVzdCwgYmVjYXVzZSBoZSB3YXMgdW5pdGVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYm90aCBieSBmcmllbmRzaGlwLCBhbmQgYnkgc2VydmluZyBhcwogICAgICAgICAgICAgICAgICAgIGxpZXV0ZW5hbnQgdW5kZXIgaGltLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgogICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIiByZWc9Ikl0YWx5IFsxMi44MzMsNDIuODMzXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+SXRhbHk8L25hbWU+LCBieSB0aGUgbG9uZ2VzdAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlIHN0YWdlcywgaW4gb3JkZXIgdG8gdmlzaXQgdGhlIGZyZWUgdG93bnMgYW5kIGNvbG9uaWVzLCB0aGF0IGhlIG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgcmVjb21tZW5kIHRvIHRoZW0gdGhlIHBldGl0aW9uIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyY3VzIEFudG9uaXVzPC9uYW1lPiwgaGlzIHRyZWFzdXJlciwKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHByaWVzdGhvb2QuIEZvciBoZSBleGVydGVkIGhpcyBpbnRlcmVzdCBib3RoIGNoZWVyZnVsbHkgaW4gZmF2b3Igb2YgYQogICAgICAgICAgICAgICAgICAgIG1hbiBzdHJvbmdseSBhdHRhY2hlZCB0byBoaW0sIHdob20gaGUgaGFkIHNlbnQgaG9tZSBiZWZvcmUgaGltIHRvIGF0dGVuZCB0aGUKICAgICAgICAgICAgICAgICAgICBlbGVjdGlvbiwgYW5kIHplYWxvdXNseSB0byBvcHBvc2UgdGhlIGZhY3Rpb24gYW5kIHBvd2VyIG9mIGEgZmV3IG1lbiwgd2hvLCBieQogICAgICAgICAgICAgICAgICAgIHJlamVjdGluZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcmN1cyBBbnRvbml1czwvbmFtZT4sIHdpc2hlZCB0byB1bmRlcm1pbmUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgaW5mbHVlbmNlIHdoZW4gZ29pbmcgb3V0IG9mIG9mZmljZS4gVGhvdWdoIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBoZWFyZCBvbiB0aGUgcm9hZCwgYmVmb3JlIGhlIHJlYWNoZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIiByZWc9Ikl0YWx5IFsxMi44MzMsNDIuODMzXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+SXRhbHk8L25hbWU+IHRoYXQgaGUgd2FzIGNyZWF0ZWQgYXVndXIsIHlldCBoZSB0aG91Z2h0IGhpbXNlbGYgaW4gaG9ub3IKICAgICAgICAgICAgICAgICAgICBib3VuZCB0byB2aXNpdCB0aGUgZnJlZSB0b3ducyBhbmQgY29sb25pZXMsIHRvIHJldHVybiB0aGVtIHRoYW5rcyBmb3IgcmVuZGVyaW5nCiAgICAgICAgICAgICAgICAgICAgc3VjaCBzZXJ2aWNlIHRvIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW50b25pdXM8L25hbWU+IGJ5IHRoZWlyIHByZXNlbmNlIGluIHN1Y2ggZ3JlYXQgbnVtYmVycwogICAgICAgICAgICAgICAgICAgIFthdCB0aGUgZWxlY3Rpb25dLCBhbmQgYXQgdGhlIHNhbWUgdGltZSB0byByZWNvbW1lbmQgdG8gdGhlbSBoaW1zZWxmLCBhbmQgaGlzCiAgICAgICAgICAgICAgICAgICAgaG9ub3IgaW4gaGlzIHN1aXQgZm9yIHRoZSBjb25zdWxhdGUgdGhlIGVuc3VpbmcgeWVhciBbPGRhdGUgYXV0aG5hbWU9Ii00OCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTQ4Ij40ODwvZGF0ZT4gQi5DLl0uIEZvciBoaXMgYWR2ZXJzYXJpZXMgYXJyb2dhbnRseSBib2FzdGVkIHRoYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWNpdXMKICAgICAgICAgICAgICAgICAgICAgICAgTGVudHVsdXM8L25hbWU+IGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIE1hcmNlbGx1czwvbmFtZT4gaGFkIGJlZW4gYXBwb2ludGVkIGNvbnN1bHMsCiAgICAgICAgICAgICAgICAgICAgd2hvIHdvdWxkIHN0cmlwIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBvZiBhbGwgaG9ub3IgYW5kIGRpZ25pdHk6IGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGNvbnN1bGF0ZSBoYWQgYmVlbiBpbmp1cmlvdXNseSB0YWtlbiBmcm9tIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VyZ2l1cyBHYWxiYTwvbmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGhlIGhhZCBiZWVuIG11Y2ggc3VwZXJpb3IgaW4gdm90ZXMgYW5kIGludGVyZXN0LCBiZWNhdXNlIGhlIHdhcyB1bml0ZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBib3RoIGJ5IGZyaWVuZHNoaXAsIGFuZCBieSBzZXJ2aW5nIGFzCiAgICAgICAgICAgICAgICAgICAgbGlldXRlbmFudCB1bmRlciBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['8.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgb24gaGlzIGFycml2YWwsIHdhcyByZWNlaXZlZCBieSB0aGUgcHJpbmNpcGFsCiAgICAgICAgICAgICAgICAgICAgdG93bnMgYW5kIGNvbG9uaWVzIHdpdGggaW5jcmVkaWJsZSByZXNwZWN0IGFuZCBhZmZlY3Rpb247IGZvciB0aGlzIHdhcyB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICB0aW1lIGhlIGNhbWUgc2luY2UgdGhlIHdhciBhZ2FpbnN0IHVuaXRlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4uIE5vdGhpbmcgd2FzIG9taXR0ZWQgd2hpY2gKICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSB0aG91Z2h0IG9mIGZvciB0aGUgb3JuYW1lbnQgb2YgdGhlIGdhdGVzLCByb2FkcywgYW5kIGV2ZXJ5IHBsYWNlCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCB3aGljaCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gd2FzIHRvIHBhc3MuIEFsbCB0aGUgcGVvcGxlIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGVpciBjaGlsZHJlbiB3ZW50IG91dCB0byBtZWV0IGhpbS4gU2FjcmlmaWNlcyB3ZXJlIG9mZmVyZWQgdXAgaW4gZXZlcnkKICAgICAgICAgICAgICAgICAgICBxdWFydGVyLiBUaGUgbWFya2V0IHBsYWNlcyBhbmQgdGVtcGxlcyB3ZXJlIGxhaWQgb3V0IHdpdGggZW50ZXJ0YWlubWVudHMsIGFzIGlmCiAgICAgICAgICAgICAgICAgICAgYW50aWNpcGF0aW5nIHRoZSBqb3kgb2YgYSBtb3N0IHNwbGVuZGlkIHRyaXVtcGguIFNvIGdyZWF0IHdhcyB0aGUgbWFnbmlmaWNlbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHJpY2hlciBhbmQgemVhbCBvZiB0aGUgcG9vcmVyIHJhbmtzIG9mIHRoZSBwZW9wbGUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIG9uIGhpcyBhcnJpdmFsLCB3YXMgcmVjZWl2ZWQgYnkgdGhlIHByaW5jaXBhbAogICAgICAgICAgICAgICAgICAgIHRvd25zIGFuZCBjb2xvbmllcyB3aXRoIGluY3JlZGlibGUgcmVzcGVjdCBhbmQgYWZmZWN0aW9uOyBmb3IgdGhpcyB3YXMgdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgdGltZSBoZSBjYW1lIHNpbmNlIHRoZSB3YXIgYWdhaW5zdCB1bml0ZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIiByZWc9IkZyYW5jZSBbMiw0Nl0gKG5hdGlvbiksIEV1cm9wZSIgdHlwZT0icGxhY2UiPkdhdWw8L25hbWU+LiBOb3RoaW5nIHdhcyBvbWl0dGVkIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgY291bGQgYmUgdGhvdWdodCBvZiBmb3IgdGhlIG9ybmFtZW50IG9mIHRoZSBnYXRlcywgcm9hZHMsIGFuZCBldmVyeSBwbGFjZQogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggd2hpY2ggPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IHdhcyB0byBwYXNzLiBBbGwgdGhlIHBlb3BsZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY2hpbGRyZW4gd2VudCBvdXQgdG8gbWVldCBoaW0uIFNhY3JpZmljZXMgd2VyZSBvZmZlcmVkIHVwIGluIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgcXVhcnRlci4gVGhlIG1hcmtldCBwbGFjZXMgYW5kIHRlbXBsZXMgd2VyZSBsYWlkIG91dCB3aXRoIGVudGVydGFpbm1lbnRzLCBhcyBpZgogICAgICAgICAgICAgICAgICAgIGFudGljaXBhdGluZyB0aGUgam95IG9mIGEgbW9zdCBzcGxlbmRpZCB0cml1bXBoLiBTbyBncmVhdCB3YXMgdGhlIG1hZ25pZmljZW5jZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSByaWNoZXIgYW5kIHplYWwgb2YgdGhlIHBvb3JlciByYW5rcyBvZiB0aGUgcGVvcGxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGhhZCBnb25lIHRocm91Z2ggYWxsIHRoZSBzdGF0ZXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaXNhbHBpbmUgR2F1bDwvbmFtZT4sIGhlIHJldHVybmVkIHdpdGggdGhlIGdyZWF0ZXN0IGhhc3RlIHRvIHRoZSBhcm15CiAgICAgICAgICAgICAgICAgICAgYXQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NDY4IiByZWc9IiAgK0FycmFzIFsyLjc2Niw1MC4yODNdIChpbmhhYml0ZWQgcGxhY2UpLCBQYXMtZGUtQ2FsYWlzLCBOb3JkLVBhcy1kZS1DYWxhaXMsIEZyYW5jZSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPk5lbWV0b2Nlbm5hIDwvbmFtZT47IGFuZCBoYXZpbmcgb3JkZXJlZCBhbGwgaGlzIGxlZ2lvbnMgdG8gbWFyY2ggZnJvbQogICAgICAgICAgICAgICAgICAgIHdpbnRlciBxdWFydGVycyB0byB0aGUgdGVycml0b3JpZXMgb2YgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDQ0NyIgcmVnPSIgICtUcmllciBbNi42NSw0OS43NV0gKGluaGFiaXRlZCBwbGFjZSksIFRyaWVyLCBSaGVpbmxhbmQtUGZhbHosIEdlcm1hbnksIEV1cm9wZSAiIHR5cGU9InBsYWNlIj5UcmV2aXJpIDwvbmFtZT4sIGhlIHdlbnQgdGhpdGhlciBhbmQgcmV2aWV3ZWQgdGhlbS4gSGUgbWFkZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlRpdHVzCiAgICAgICAgICAgICAgICAgICAgICAgIExhYmllbnVzPC9uYW1lPiBnb3Zlcm5vciBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpc2FscGluZSBHYXVsPC9uYW1lPiwgdGhhdCBoZSBtaWdodCBiZQogICAgICAgICAgICAgICAgICAgIHRoZSBtb3JlIGluY2xpbmVkIHRvIHN1cHBvcnQgaGltIGluIGhpcyBzdWl0IGZvciB0aGUgY29uc3VsYXRlLiBIZSBoaW1zZWxmIG1hZGUKICAgICAgICAgICAgICAgICAgICBzdWNoIGpvdXJuZXlzIGFzIGhlIHRob3VnaHQgd291bGQgY29uZHVjZSB0byB0aGUgaGVhbHRoIG9mIGhpcyBtZW4gYnkgY2hhbmdlIG9mCiAgICAgICAgICAgICAgICAgICAgYWlyOyBhbmQgdGhvdWdoIGhlIHdhcyBmcmVxdWVudGx5IHRvbGQgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIHdhcyBzb2xpY2l0ZWQgYnkgaGlzIGVuZW1pZXMsIGFuZCB3YXMgYXNzdXJlZCB0aGF0IGEgc2NoZW1lIHdhcyBpbiBhZ2l0YXRpb24gYnkKICAgICAgICAgICAgICAgICAgICB0aGUgY29udHJpdmFuY2Ugb2YgYSBmZXcsIHRoYXQgdGhlIHNlbmF0ZSBzaG91bGQgaW50ZXJwb3NlIHRoZWlyIGF1dGhvcml0eSB0bwogICAgICAgICAgICAgICAgICAgIGRlcHJpdmUgaGltIG9mIGEgcGFydCBvZiBoaXMgYXJteTsgeWV0IGhlIG5laXRoZXIgZ2F2ZSBjcmVkaXQgdG8gYW55IHN0b3J5CiAgICAgICAgICAgICAgICAgICAgY29uY2VybmluZyA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkxhYmllbnVzPC9uYW1lPiwgbm9yIGNvdWxkIGJlIHByZXZhaWxlZCB1cG9uIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgYW55IHRoaW5nIGluIG9wcG9zaXRpb24gdG8gdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlOyBmb3IgaGUgdGhvdWdodCB0aGF0IGhpcwogICAgICAgICAgICAgICAgICAgIGNhdXNlIHdvdWxkIGJlIGVhc2lseSBnYWluZWQgYnkgdGhlIGZyZWUgdm9pY2Ugb2YgdGhlIHNlbmF0b3JzLiBGb3IgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cwogICAgICAgICAgICAgICAgICAgICAgICBDdXJpbzwvbmFtZT4sIG9uZSBvZiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSwgaGF2aW5nIHVuZGVydGFrZW4gdG8gZGVmZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIGNhdXNlIGFuZCBkaWduaXR5LCBoYWQgb2Z0ZW4gcHJvcG9zZWQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgc2VuYXRlLCAidGhhdCBpZiB0aGUgZHJlYWQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgYXJtcwogICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkIGFueSBhcHByZWhlbnNpdmUsIGFzIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC9uYW1lPidzIGF1dGhvcml0eSBhbmQgYXJtcyB3ZXJlIG5vCiAgICAgICAgICAgICAgICAgICAgbGVzcyBmb3JtaWRhYmxlIHRvIHRoZSBmb3J1bSwgYm90aCBzaG91bGQgcmVzaWduIHRoZWlyIGNvbW1hbmQsIGFuZCBkaXNiYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYXJtaWVzLiBUaGF0IHRoZW4gdGhlIGNpdHkgd291bGQgYmUgZnJlZSwgYW5kIGVuam95IGl0cyBkdWUgcmlnaHRzLiIgQW5kCiAgICAgICAgICAgICAgICAgICAgaGUgbm90IG9ubHkgcHJvcG9zZWQgdGhpcywgYnV0IG9mIGhpbXNlbGYgY2FsbGVkIHVwb24gdGhlIHNlbmF0ZSB0byBkaXZpZGUgb24KICAgICAgICAgICAgICAgICAgICB0aGUgcXVlc3Rpb24uIEJ1dCB0aGUgY29uc3VscyBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L25hbWU+J3MgZnJpZW5kcyBpbnRlcnBvc2VkIHRvCiAgICAgICAgICAgICAgICAgICAgcHJldmVudCBpdDsgYW5kIHJlZ3VsYXRpbmcgbWF0dGVycyBhcyB0aGV5IGRlc2lyZWQsIHRoZXkgYnJva2UgdXAgdGhlIG1lZXRpbmcuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4gaGFkIGdvbmUgdGhyb3VnaCBhbGwgdGhlIHN0YXRlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpc2FscGluZSBHYXVsPC9uYW1lPiwgaGUgcmV0dXJuZWQgd2l0aCB0aGUgZ3JlYXRlc3QgaGFzdGUgdG8gdGhlIGFybXkKICAgICAgICAgICAgICAgICAgICBhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg0NjgiIHJlZz0iICArQXJyYXMgWzIuNzY2LDUwLjI4M10gKGluaGFiaXRlZCBwbGFjZSksIFBhcy1kZS1DYWxhaXMsIE5vcmQtUGFzLWRlLUNhbGFpcywgRnJhbmNlLCBFdXJvcGUgIiB0eXBlPSJwbGFjZSI+TmVtZXRvY2VubmEgPC9uYW1lPjsgYW5kIGhhdmluZyBvcmRlcmVkIGFsbCBoaXMgbGVnaW9ucyB0byBtYXJjaCBmcm9tCiAgICAgICAgICAgICAgICAgICAgd2ludGVyIHF1YXJ0ZXJzIHRvIHRoZSB0ZXJyaXRvcmllcyBvZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDQ3IiByZWc9IiAgK1RyaWVyIFs2LjY1LDQ5Ljc1XSAoaW5oYWJpdGVkIHBsYWNlKSwgVHJpZXIsIFJoZWlubGFuZC1QZmFseiwgR2VybWFueSwgRXVyb3BlICIgdHlwZT0icGxhY2UiPlRyZXZpcmkgPC9uYW1lPiwgaGUgd2VudCB0aGl0aGVyIGFuZCByZXZpZXdlZCB0aGVtLiBIZSBtYWRlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGl0dXMKICAgICAgICAgICAgICAgICAgICAgICAgTGFiaWVudXM8L25hbWU+IGdvdmVybm9yIG9mIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2lzYWxwaW5lIEdhdWw8L25hbWU+LCB0aGF0IGhlIG1pZ2h0IGJlCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vcmUgaW5jbGluZWQgdG8gc3VwcG9ydCBoaW0gaW4gaGlzIHN1aXQgZm9yIHRoZSBjb25zdWxhdGUuIEhlIGhpbXNlbGYgbWFkZQogICAgICAgICAgICAgICAgICAgIHN1Y2ggam91cm5leXMgYXMgaGUgdGhvdWdodCB3b3VsZCBjb25kdWNlIHRvIHRoZSBoZWFsdGggb2YgaGlzIG1lbiBieSBjaGFuZ2Ugb2YKICAgICAgICAgICAgICAgICAgICBhaXI7IGFuZCB0aG91Z2ggaGUgd2FzIGZyZXF1ZW50bHkgdG9sZCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgd2FzIHNvbGljaXRlZCBieSBoaXMgZW5lbWllcywgYW5kIHdhcyBhc3N1cmVkIHRoYXQgYSBzY2hlbWUgd2FzIGluIGFnaXRhdGlvbiBieQogICAgICAgICAgICAgICAgICAgIHRoZSBjb250cml2YW5jZSBvZiBhIGZldywgdGhhdCB0aGUgc2VuYXRlIHNob3VsZCBpbnRlcnBvc2UgdGhlaXIgYXV0aG9yaXR5IHRvCiAgICAgICAgICAgICAgICAgICAgZGVwcml2ZSBoaW0gb2YgYSBwYXJ0IG9mIGhpcyBhcm15OyB5ZXQgaGUgbmVpdGhlciBnYXZlIGNyZWRpdCB0byBhbnkgc3RvcnkKICAgICAgICAgICAgICAgICAgICBjb25jZXJuaW5nIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TGFiaWVudXM8L25hbWU+LCBub3IgY291bGQgYmUgcHJldmFpbGVkIHVwb24gdG8gZG8KICAgICAgICAgICAgICAgICAgICBhbnkgdGhpbmcgaW4gb3Bwb3NpdGlvbiB0byB0aGUgYXV0aG9yaXR5IG9mIHRoZSBzZW5hdGU7IGZvciBoZSB0aG91Z2h0IHRoYXQgaGlzCiAgICAgICAgICAgICAgICAgICAgY2F1c2Ugd291bGQgYmUgZWFzaWx5IGdhaW5lZCBieSB0aGUgZnJlZSB2b2ljZSBvZiB0aGUgc2VuYXRvcnMuIEZvciA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIEN1cmlvPC9uYW1lPiwgb25lIG9mIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCBoYXZpbmcgdW5kZXJ0YWtlbiB0byBkZWZlbmQKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgY2F1c2UgYW5kIGRpZ25pdHksIGhhZCBvZnRlbiBwcm9wb3NlZCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBzZW5hdGUsICJ0aGF0IGlmIHRoZSBkcmVhZCBvZiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBhcm1zCiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWQgYW55IGFwcHJlaGVuc2l2ZSwgYXMgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L25hbWU+J3MgYXV0aG9yaXR5IGFuZCBhcm1zIHdlcmUgbm8KICAgICAgICAgICAgICAgICAgICBsZXNzIGZvcm1pZGFibGUgdG8gdGhlIGZvcnVtLCBib3RoIHNob3VsZCByZXNpZ24gdGhlaXIgY29tbWFuZCwgYW5kIGRpc2JhbmQKICAgICAgICAgICAgICAgICAgICB0aGVpciBhcm1pZXMuIFRoYXQgdGhlbiB0aGUgY2l0eSB3b3VsZCBiZSBmcmVlLCBhbmQgZW5qb3kgaXRzIGR1ZSByaWdodHMuIiBBbmQKICAgICAgICAgICAgICAgICAgICBoZSBub3Qgb25seSBwcm9wb3NlZCB0aGlzLCBidXQgb2YgaGltc2VsZiBjYWxsZWQgdXBvbiB0aGUgc2VuYXRlIHRvIGRpdmlkZSBvbgogICAgICAgICAgICAgICAgICAgIHRoZSBxdWVzdGlvbi4gQnV0IHRoZSBjb25zdWxzIGFuZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvbmFtZT4ncyBmcmllbmRzIGludGVycG9zZWQgdG8KICAgICAgICAgICAgICAgICAgICBwcmV2ZW50IGl0OyBhbmQgcmVndWxhdGluZyBtYXR0ZXJzIGFzIHRoZXkgZGVzaXJlZCwgdGhleSBicm9rZSB1cCB0aGUgbWVldGluZy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgdGVzdGltb255IG9mIHRoZSB1bmFuaW1vdXMgdm9pY2Ugb2YgdGhlIHNlbmF0ZSB3YXMgdmVyeSBncmVhdCwgYW5kCiAgICAgICAgICAgICAgICAgICAgY29uc2lzdGVudCB3aXRoIHRoZWlyIGZvcm1lciBjb25kdWN0OyBmb3IgdGhlIHByZWNlZGluZyB5ZWFyLCB3aGVuIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TWFyY2VsbHVzPC9uYW1lPiBhdHRhY2tlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncwogICAgICAgICAgICAgICAgICAgIGRpZ25pdHksIGhlIHByb3Bvc2VkIHRvIHRoZSBzZW5hdGUsIGNvbnRyYXJ5IHRvIHRoZSBsYXcgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4sIHRvIGRpc3Bvc2Ugb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgcHJvdmluY2UsIGJlZm9yZSB0aGUgZXhwaXJhdGlvbiBvZiBoaXMgY29tbWFuZCwgYW5kIHdoZW4KICAgICAgICAgICAgICAgICAgICB0aGUgdm90ZXMgd2VyZSBjYWxsZWQgZm9yLCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NYXJjZWxsdXM8L25hbWU+LCB3aG8KICAgICAgICAgICAgICAgICAgICBlbmRlYXZvcmVkIHRvIGFkdmFuY2UgaGlzIG93biBkaWduaXR5LCBieSByYWlzaW5nIGVudnkgYWdhaW5zdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHdhbnRlZCBhIGRpdmlzaW9uLCB0aGUgZnVsbCBzZW5hdGUgd2VudCBvdmVyIHRvIHRoZSBvcHBvc2l0ZQogICAgICAgICAgICAgICAgICAgIHNpZGUuIFRoZSBzcGlyaXQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgZm9lcyB3YXMgbm90IGJyb2tlbiBieQogICAgICAgICAgICAgICAgICAgIHRoaXMsIGJ1dCBpdCB0YXVnaHQgdGhlbSwgdGhhdCB0aGV5IG91Z2h0IHRvIHN0cmVuZ3RoZW4gdGhlaXIgaW50ZXJlc3QgYnkKICAgICAgICAgICAgICAgICAgICBlbmxhcmdpbmcgdGhlaXIgY29ubmVjdGlvbnMsIHNvIGFzIHRvIGZvcmNlIHRoZSBzZW5hdGUgdG8gY29tcGx5IHdpdGggd2hhdGV2ZXIKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCByZXNvbHZlZCBvbi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+TWFyY2VsbHVzPC9uYW1lPiBhdHRhY2tlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncwogICAgICAgICAgICAgICAgICAgIGRpZ25pdHksIGhlIHByb3Bvc2VkIHRvIHRoZSBzZW5hdGUsIGNvbnRyYXJ5IHRvIHRoZSBsYXcgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgYW5kIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q3Jhc3N1czwvbmFtZT4sIHRvIGRpc3Bvc2Ugb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgcHJvdmluY2UsIGJlZm9yZSB0aGUgZXhwaXJhdGlvbiBvZiBoaXMgY29tbWFuZCwgYW5kIHdoZW4KICAgICAgICAgICAgICAgICAgICB0aGUgdm90ZXMgd2VyZSBjYWxsZWQgZm9yLCBhbmQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5NYXJjZWxsdXM8L25hbWU+LCB3aG8KICAgICAgICAgICAgICAgICAgICBlbmRlYXZvcmVkIHRvIGFkdmFuY2UgaGlzIG93biBkaWduaXR5LCBieSByYWlzaW5nIGVudnkgYWdhaW5zdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHdhbnRlZCBhIGRpdmlzaW9uLCB0aGUgZnVsbCBzZW5hdGUgd2VudCBvdmVyIHRvIHRoZSBvcHBvc2l0ZQogICAgICAgICAgICAgICAgICAgIHNpZGUuIFRoZSBzcGlyaXQgb2YgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+J3MgZm9lcyB3YXMgbm90IGJyb2tlbiBieQogICAgICAgICAgICAgICAgICAgIHRoaXMsIGJ1dCBpdCB0YXVnaHQgdGhlbSwgdGhhdCB0aGV5IG91Z2h0IHRvIHN0cmVuZ3RoZW4gdGhlaXIgaW50ZXJlc3QgYnkKICAgICAgICAgICAgICAgICAgICBlbmxhcmdpbmcgdGhlaXIgY29ubmVjdGlvbnMsIHNvIGFzIHRvIGZvcmNlIHRoZSBzZW5hdGUgdG8gY29tcGx5IHdpdGggd2hhdGV2ZXIKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCByZXNvbHZlZCBvbi4gPC90cmFuc2xhdGlvbj4="
translation['8.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHRoaXMgYSBkZWNyZWUgd2FzIHBhc3NlZCBieSB0aGUgc2VuYXRlLCB0aGF0IG9uZSBsZWdpb24gc2hvdWxkIGJlIHNlbnQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L25hbWU+LCBhbmQgYW5vdGhlciBieSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlBhcnRoaWFuPC9uYW1lPiB3YXIuIEJ1dCB0aGVzZSB0d28gbGVnaW9ucyB3ZXJlIGV2aWRlbnRseSBkcmF3biBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiBhbG9uZS4gRm9yIHRoZSBmaXJzdCBsZWdpb24gd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L25hbWU+IHNlbnQgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBoZSBnYXZlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgYXMgaWYgaXQgYmVsb25nZWQgdG8gaGltc2VsZiwgdGhvdWdoIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIGxldmllZCBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4ncyBwcm92aW5jZS4gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBob3dldmVyLCB0aG91Z2ggbm8gb25lIGNvdWxkIGRvdWJ0IHRoZSBkZXNpZ24gb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcywgc2VudCB0aGUgbGVnaW9uIGJhY2sgdG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbmVpdXMgUG9tcGV5PC9uYW1lPiwgYW5kIGluIGNvbXBsaWFuY2UKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBkZWNyZWUgb2YgdGhlIHNlbmF0ZSwgb3JkZXJlZCB0aGUgZmlmdGVlbnRoLCBiZWxvbmdpbmcgdG8gaGltc2VsZiwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2FzIHF1YXJ0ZXJlZCBpbiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBsYWNlIj5DaXNhbHBpbmUgR2F1bDwvbmFtZT4sIHRvIGJlIGRlbGl2ZXJlZAogICAgICAgICAgICAgICAgICAgIHVwLiBJbiBpdHMgcm9vbSBoZSBzZW50IHRoZSB0aGlydGVlbnRoIGludG8gPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIiByZWc9Ikl0YWx5IFsxMi44MzMsNDIuODMzXSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+SXRhbHk8L25hbWU+LCB0byBwcm90ZWN0IHRoZQogICAgICAgICAgICAgICAgICAgIGdhcnJpc29ucyBmcm9tIHdoaWNoIGhlIGhhZCBkcmFmdGVkIHRoZSBmaWZ0ZWVudGguIEhlIGRpc3Bvc2VkIGhpcyBhcm15IGluCiAgICAgICAgICAgICAgICAgICAgd2ludGVyIHF1YXJ0ZXJzLCBwbGFjZWQgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBUcmVib25pdXM8L25hbWU+LCB3aXRoIGZvdXIgbGVnaW9ucyBhbW9uZwogICAgICAgICAgICAgICAgICAgIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGdhZTwvbmFtZT4sIGFuZCBkZXRhY2hlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIEZhYml1czwvbmFtZT4sIHdpdGggZm91ciBtb3JlLAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlZHVpPC9uYW1lPjsgZm9yIGhlIHRob3VnaHQgdGhhdCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiIHJlZz0iRnJhbmNlIFsyLDQ2XSAobmF0aW9uKSwgRXVyb3BlIiB0eXBlPSJwbGFjZSI+R2F1bDwvbmFtZT4gd291bGQgYmUgbW9zdAogICAgICAgICAgICAgICAgICAgIHNlY3VyZSwgaWYgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiwgYSBwZW9wbGUgb2YgdGhlIGdyZWF0ZXN0IHZhbG9yLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+LCB3aG8gcG9zc2Vzc2VkIHRoZSBtb3N0IHBvd2VyZnVsIGluZmx1ZW5jZSwgd2VyZSBrZXB0IGluCiAgICAgICAgICAgICAgICAgICAgYXdlIGJ5IGhpcyBhcm1pZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CiAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvbmFtZT4sIGFuZCBhbm90aGVyIGJ5IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPiwgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGFydGhpYW48L25hbWU+IHdhci4gQnV0IHRoZXNlIHR3byBsZWdpb25zIHdlcmUgZXZpZGVudGx5IGRyYXduIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+IGFsb25lLiBGb3IgdGhlIGZpcnN0IGxlZ2lvbiB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvbmFtZT4gc2VudCB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhlIGdhdmUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJwZXJzIj5DYWVzYXI8L25hbWU+LCBhcyBpZiBpdCBiZWxvbmdlZCB0byBoaW1zZWxmLCB0aG91Z2ggaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgbGV2aWVkIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGVycyI+Q2Flc2FyPC9uYW1lPidzIHByb3ZpbmNlLiA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InBlcnMiPkNhZXNhcjwvbmFtZT4sIGhvd2V2ZXIsIHRob3VnaCBubyBvbmUgY291bGQgZG91YnQgdGhlIGRlc2lnbiBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBlbmVtaWVzLCBzZW50IHRoZSBsZWdpb24gYmFjayB0byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNuZWl1cyBQb21wZXk8L25hbWU+LCBhbmQgaW4gY29tcGxpYW5jZQogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIGRlY3JlZSBvZiB0aGUgc2VuYXRlLCBvcmRlcmVkIHRoZSBmaWZ0ZWVudGgsIGJlbG9uZ2luZyB0byBoaW1zZWxmLCBhbmQKICAgICAgICAgICAgICAgICAgICB3aGljaCB3YXMgcXVhcnRlcmVkIGluIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0icGxhY2UiPkNpc2FscGluZSBHYXVsPC9uYW1lPiwgdG8gYmUgZGVsaXZlcmVkCiAgICAgICAgICAgICAgICAgICAgdXAuIEluIGl0cyByb29tIGhlIHNlbnQgdGhlIHRoaXJ0ZWVudGggaW50byA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiIHJlZz0iSXRhbHkgWzEyLjgzMyw0Mi44MzNdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5JdGFseTwvbmFtZT4sIHRvIHByb3RlY3QgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2Fycmlzb25zIGZyb20gd2hpY2ggaGUgaGFkIGRyYWZ0ZWQgdGhlIGZpZnRlZW50aC4gSGUgZGlzcG9zZWQgaGlzIGFybXkgaW4KICAgICAgICAgICAgICAgICAgICB3aW50ZXIgcXVhcnRlcnMsIHBsYWNlZCA8bmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhaXVzIFRyZWJvbml1czwvbmFtZT4sIHdpdGggZm91ciBsZWdpb25zIGFtb25nCiAgICAgICAgICAgICAgICAgICAgdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsZ2FlPC9uYW1lPiwgYW5kIGRldGFjaGVkIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMgRmFiaXVzPC9uYW1lPiwgd2l0aCBmb3VyIG1vcmUsCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVkdWk8L25hbWU+OyBmb3IgaGUgdGhvdWdodCB0aGF0IDxuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCIgcmVnPSJGcmFuY2UgWzIsNDZdIChuYXRpb24pLCBFdXJvcGUiIHR5cGU9InBsYWNlIj5HYXVsPC9uYW1lPiB3b3VsZCBiZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgc2VjdXJlLCBpZiB0aGUgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxnYWU8L25hbWU+LCBhIHBlb3BsZSBvZiB0aGUgZ3JlYXRlc3QgdmFsb3IsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZWR1aTwvbmFtZT4sIHdobyBwb3NzZXNzZWQgdGhlIG1vc3QgcG93ZXJmdWwgaW5mbHVlbmNlLCB3ZXJlIGtlcHQgaW4KICAgICAgICAgICAgICAgICAgICBhd2UgYnkgaGlzIGFybWllcy4gPC90cmFuc2xhdGlvbj4="
