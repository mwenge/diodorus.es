var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    translatedSection.style.backgroundColor = "";
  }
  translatedSection = document.getElementById(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  translatedSection.style.backgroundColor = "yellow";
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  translatedSection.style.backgroundColor = "";
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['0.1'] = ""
translation['0.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgb2ghIHdoYXQgZ3JlYXRlciBqb3kgdGhhbiB0aGlzIGNhbnN0IHRob3Ugb2J0YWluLDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgb2ghIHdoYXQgZ3JlYXRlciBqb3kgdGhhbiB0aGlzIGNhbnN0IHRob3Ugb2J0YWluLDwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBpYW1iaWMgdHJpbWV0ZXIgZnJvbSB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHltcGFuaXN0YWU8L3RpdGxlPiBvZiBTb3Bob2NsZXMgKE5hdWNrLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UcmFnLiBHcmFlYy4gRnJhZy4yPC90aXRsZT4sIHAuIDI3MCkuPC9ub3RlPiBhbmQgbW9yZSBlZmZpY2FjaW91cyBmb3IgbW9yYWwgaW1wcm92ZW1lbnQ/IERlbW9jcml0dXMgc2F5cyB3ZSBvdWdodCB0byBwcmF5IHRoYXQgd2UgbWF5IGJlIHZpc2l0ZWQgYnkgcGhhbnRvbXMgd2hpY2ggYXJlIHByb3BpdGlvdXMsIGFuZCB0aGF0IGZyb20gb3V0IHRoZSBjaXJjdW1hbWJpZW50IGFpciBzdWNoIG9ubHkgbWF5IGVuY291bnRlciB1cyBhcyBhcmUgYWdyZWVhYmxlIHRvIG91ciBuYXR1cmVzIGFuZCBnb29kLCByYXRoZXIgdGhhbiB0aG9zZSB3aGljaCBhcmUgcGVydmVyc2UgYW5kIGJhZCwgdGhlcmVieSBpbnRydWRpbmcgaW50byBwaGlsb3NvcGh5IGEgZG9jdHJpbmUgd2hpY2ggaXMgbm90IHRydWUsIGFuZCB3aGljaCBsZWFkcyBhc3RyYXkgaW50byBib3VuZGxlc3Mgc3VwZXJzdGl0aW9ucy4gCgkJCQk8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UeW1wYW5pc3RhZTwvdGl0bGU+IG9mIFNvcGhvY2xlcyAoTmF1Y2ssIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyYWcuIEdyYWVjLiBGcmFnLjI8L3RpdGxlPiwgcC4gMjcwKS48L3RyYW5zbGF0aW9uPg=="
translation['0.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBteSBvd24gY2FzZSwgdGhlIHN0dWR5IG9mIGhpc3RvcnkgYW5kIHRoZSBmYW1pbGlhcml0eSB3aXRoIGl0IHdoaWNoIG15IHdyaXRpbmcgcHJvZHVjZXMsIGVuYWJsZXMgbWUsIHNpbmNlIEkgYWx3YXlzIGNoZXJpc2ggaW4gbXkgc291bCB0aGUgcmVjb3JkcyBvZiB0aGUgbm9ibGVzdCBhbmQgbW9zdCBlc3RpbWFibGUgY2hhcmFjdGVycywgdG8gcmVwZWwgYW5kIHB1dCBmYXIgZnJvbSBtZSB3aGF0ZXZlciBiYXNlLCBtYWxpY2lvdXMsIG9yIGlnbm9ibGUgc3VnZ2VzdGlvbiBteSBlbmZvcmNlZCBhc3NvY2lhdGlvbnMgbWF5IGludHJ1ZGUgdXBvbiBtZSwgY2FsbWx5IGFuZCBkaXNwYXNzaW9uYXRlbHkgdHVybmluZyBteSB0aG91Z2h0cyBhd2F5IGZyb20gdGhlbSB0byB0aGUgZmFpcmVzdCBvZiBteSBleGFtcGxlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['0.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZXNlIHdlcmUgVGltb2xlb24gdGhlIENvcmludGhpYW4gYW5kIEFlbWlsaXVzIFBhdWx1cywgd2hvc2UgTGl2ZXMgSSBoYXZlIG5vdyB1bmRlcnRha2VuIHRvIGxheSBiZWZvcmUgbXkgcmVhZGVyczsgdGhlIG1lbiB3ZXJlIGFsaWtlIG5vdCBvbmx5IGluIHRoZSBnb29kIHByaW5jaXBsZXMgd2hpY2ggdGhleSBhZG9wdGVkLCBidXQgYWxzbyBpbiB0aGUgZ29vZCBmb3J0dW5lIHdoaWNoIHRoZXkgZW5qb3llZCBpbiB0aGVpciBjb25kdWN0IG9mIGFmZmFpcnMsIGFuZCB0aGV5IHdpbGwgbWFrZSBpdCBoYXJkIGZvciBteSByZWFkZXJzIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBncmVhdGVzdCBvZiB0aGVpciBzdWNjZXNzZnVsIGFjaGlldmVtZW50cyB3ZXJlIGR1ZSB0byB0aGVpciBnb29kIGZvcnR1bmUgb3IgdGhlaXIgd2lzZG9tLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIE1TUy4gdGhpcyBJbnRyb2R1Y3Rpb24gc3RhbmRzIGFzIHRoZSBmaXJzdCBjaGFwdGVyIG9mIHRoZSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZW1pbGl1cyBQYXVsdXM8L3RpdGxlPi48L25vdGU+CgkJCSAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlbWlsaXVzIFBhdWx1czwvdGl0bGU+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHN0YXRlIG9mIGFmZmFpcnMgaW4gU3lyYWN1c2UsIGJlZm9yZSB0aGUgZXhwZWRpdGlvbiBvZiBUaW1vbGVvbiBpbnRvIFNpY2lseSwgd2FzIGFzIGZvbGxvd3MuIEFmdGVyIERpb24gaGFkIGRyaXZlbiBvdXQgRGlvbnlzaXVzIHRoZSB0eXJhbnQsIGhlIHdhcyBhdCBvbmNlIHRyZWFjaGVyb3VzbHkgc2xhaW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8dGl0bGU+RGlvbjwvdGl0bGU+LCBjaGFwdGVyIGx2aWkuICBUaGlzIHdhcyBpbiAzNTQgQi5DLjwvbm90ZT4gYW5kIHRob3NlIHdobyBoYWQgaGVscGVkIGhpbSB0byBmcmVlIFN5cmFjdXNlIHdlcmUgZGl2aWRlZCBhbW9uZyB0aGVtc2VsdmVzLiBUaGUgY2l0eSwgdGhlcmVmb3JlLCB3YXMgY29udGludWFsbHkgZXhjaGFuZ2luZyBvbmUgdHlyYW50IGZvciBhbm90aGVyLCBhbmQgb3dpbmcgdG8gYSBtdWx0aXR1ZGUgb2YgaWxscyB3YXMgYWxtb3N0IGFiYW5kb25lZCwgd2hpbGUgYXMgZm9yIHRoZSByZXN0IG9mIFNpY2lseSwgcGFydCBvZiBpdCB3YXMgcnVpbmVkIGFuZCBhbHJlYWR5IHdob2xseSB3aXRob3V0IGluaGFiaXRhbnRzIGJ5IHJlYXNvbiBvZiB0aGUgd2FycywgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIG1vc3Qgb2YgdGhlIGNpdGllcyB3ZXJlIG9jY3VwaWVkIGJ5IEJhcmJhcmlhbnMgb2YgbWl4ZWQgcmFjZXMgYW5kIHNvbGRpZXJzIG91dCBvZiBlbXBsb3ltZW50LCB3aG8gcmVhZGlseSBjb25zZW50ZWQgdG8gdGhlIHN1Y2Nlc3NpdmUgY2hhbmdlcyBpbiB0aGUgZGVzcG90aWMgcG93ZXIuIEF0IGxhc3QgRGlvbnlzaXVzLCBpbiB0aGUgdGVudGggeWVhciBvZiBoaXMgZXhpbGUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MzQ2IEIuQy48L25vdGU+IGNvbGxlY3RlZCBtZXJjZW5hcmllcywgZHJvdmUgb3V0IE5pc2FldXM7IHdobyB3YXMgYXQgdGhhdCB0aW1lIG1hc3RlciBvZiBTeXJhY3VzZSwgcmVjb3ZlcmVkIHRoZSBwb3dlciBhZ2FpbiwgYW5kIGVzdGFibGlzaGVkIGhpbXNlbGYgYXMgdHlyYW50IGFuZXc7IGhlIGhhZCBiZWVuIHVuYWNjb3VudGFibHkgZGVwcml2ZWQgYnkgYSBzbWFsbCBmb3JjZSBvZiB0aGUgZ3JlYXRlc3QgdHlyYW5ueSB0aGF0IGV2ZXIgd2FzLCBhbmQgbm93IG1vcmUgdW5hY2NvdW50YWJseSBzdGlsbCBoZSBoYWQgYmVjb21lLCBmcm9tIGEgbG93bHkgZXhpbGUsIG1hc3RlciBvZiB0aG9zZSB3aG8gZHJvdmUgaGltIGZvcnRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhvc2Ugb2YgdGhlIFN5cmFjdXNhbnMgd2hvIHJlbWFpbmVkIGluIHRoZSBjaXR5IHdlcmUgdGhlIHNsYXZlcyBvZiBhIHR5cmFudCB3aG8gYXQgYWxsIHRpbWVzIHdhcyB1bnJlYXNvbmFibGUsIGFuZCB3aG9zZSBzcGlyaXQgYXQgdGhpcyB0aW1lIHdhcyByZW5kZXJlZCBhbHRvZ2V0aGVyIHNhdmFnZSBieSBtaXNmb3J0dW5lcywgYnV0IHRoZSBiZXN0IGFuZCBtb3N0IGRpc3Rpbmd1aXNoZWQgb2YgdGhlbSBoYWQgcmVjb3Vyc2UgdG8gSGljZXRhcyB0aGUgcnVsZXIgb2YgTGVvbnRpbmksIHB1dCB0aGVtc2VsdmVzIHVuZGVyIGhpcyBwcm90ZWN0aW9uLCBhbmQgY2hvc2UgaGltIHRoZWlyIGdlbmVyYWwgZm9yIHRoZSB3YXI7IG5vdCB0aGF0IGhlIHdhcyBiZXR0ZXIgdGhhbiBhbnkgYWNrbm93bGVkZ2VkIHR5cmFudCwgYnV0IGJlY2F1c2UgdGhleSBoYWQgbm8gb3RoZXIgcmVmdWdlLCBhbmQgZmVsdCBjb25maWRlbmNlIGluIG9uZSB3aG8gd2FzIGEgU3lyYWN1c2FuIGJ5IGJpcnRoIGFuZCBwb3NzZXNzZWQgYSBmb3JjZSB0aGF0IHdhcyBhYmxlIHRvIGNvcGUgd2l0aCB0aGF0IG9mIERpb255c2l1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc3RhdGUgb2YgYWZmYWlycyBpbiBTeXJhY3VzZSwgYmVmb3JlIHRoZSBleHBlZGl0aW9uIG9mIFRpbW9sZW9uIGludG8gU2ljaWx5LCB3YXMgYXMgZm9sbG93cy4gQWZ0ZXIgRGlvbiBoYWQgZHJpdmVuIG91dCBEaW9ueXNpdXMgdGhlIHR5cmFudCwgaGUgd2FzIGF0IG9uY2UgdHJlYWNoZXJvdXNseSBzbGFpbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGlvbjwvdGl0bGU+LCBjaGFwdGVyIGx2aWkuICBUaGlzIHdhcyBpbiAzNTQgQi5DLjwvbm90ZT4gYW5kIHRob3NlIHdobyBoYWQgaGVscGVkIGhpbSB0byBmcmVlIFN5cmFjdXNlIHdlcmUgZGl2aWRlZCBhbW9uZyB0aGVtc2VsdmVzLiBUaGUgY2l0eSwgdGhlcmVmb3JlLCB3YXMgY29udGludWFsbHkgZXhjaGFuZ2luZyBvbmUgdHlyYW50IGZvciBhbm90aGVyLCBhbmQgb3dpbmcgdG8gYSBtdWx0aXR1ZGUgb2YgaWxscyB3YXMgYWxtb3N0IGFiYW5kb25lZCwgd2hpbGUgYXMgZm9yIHRoZSByZXN0IG9mIFNpY2lseSwgcGFydCBvZiBpdCB3YXMgcnVpbmVkIGFuZCBhbHJlYWR5IHdob2xseSB3aXRob3V0IGluaGFiaXRhbnRzIGJ5IHJlYXNvbiBvZiB0aGUgd2FycywgCgkJCQk8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaW9uPC90aXRsZT4sIGNoYXB0ZXIgbHZpaS4gIFRoaXMgd2FzIGluIDM1NCBCLkMuPC90cmFuc2xhdGlvbj4="
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBtb3N0IG9mIHRoZSBjaXRpZXMgd2VyZSBvY2N1cGllZCBieSBCYXJiYXJpYW5zIG9mIG1peGVkIHJhY2VzIGFuZCBzb2xkaWVycyBvdXQgb2YgZW1wbG95bWVudCwgd2hvIHJlYWRpbHkgY29uc2VudGVkIHRvIHRoZSBzdWNjZXNzaXZlIGNoYW5nZXMgaW4gdGhlIGRlc3BvdGljIHBvd2VyLiBBdCBsYXN0IERpb255c2l1cywgaW4gdGhlIHRlbnRoIHllYXIgb2YgaGlzIGV4aWxlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MzQ2IEIuQy48L25vdGU+IGNvbGxlY3RlZCBtZXJjZW5hcmllcywgZHJvdmUgb3V0IE5pc2FldXM7IHdobyB3YXMgYXQgdGhhdCB0aW1lIG1hc3RlciBvZiBTeXJhY3VzZSwgcmVjb3ZlcmVkIHRoZSBwb3dlciBhZ2FpbiwgYW5kIGVzdGFibGlzaGVkIGhpbXNlbGYgYXMgdHlyYW50IGFuZXc7IGhlIGhhZCBiZWVuIHVuYWNjb3VudGFibHkgZGVwcml2ZWQgYnkgYSBzbWFsbCBmb3JjZSBvZiB0aGUgZ3JlYXRlc3QgdHlyYW5ueSB0aGF0IGV2ZXIgd2FzLCBhbmQgbm93IG1vcmUgdW5hY2NvdW50YWJseSBzdGlsbCBoZSBoYWQgYmVjb21lLCBmcm9tIGEgbG93bHkgZXhpbGUsIG1hc3RlciBvZiB0aG9zZSB3aG8gZHJvdmUgaGltIGZvcnRoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aG9zZSBvZiB0aGUgU3lyYWN1c2FucyB3aG8gcmVtYWluZWQgaW4gdGhlIGNpdHkgd2VyZSB0aGUgc2xhdmVzIG9mIGEgdHlyYW50IHdobyBhdCBhbGwgdGltZXMgd2FzIHVucmVhc29uYWJsZSwgYW5kIHdob3NlIHNwaXJpdCBhdCB0aGlzIHRpbWUgd2FzIHJlbmRlcmVkIGFsdG9nZXRoZXIgc2F2YWdlIGJ5IG1pc2ZvcnR1bmVzLCBidXQgdGhlIGJlc3QgYW5kIG1vc3QgZGlzdGluZ3Vpc2hlZCBvZiB0aGVtIGhhZCByZWNvdXJzZSB0byBIaWNldGFzIHRoZSBydWxlciBvZiBMZW9udGluaSwgcHV0IHRoZW1zZWx2ZXMgdW5kZXIgaGlzIHByb3RlY3Rpb24sIGFuZCBjaG9zZSBoaW0gdGhlaXIgZ2VuZXJhbCBmb3IgdGhlIHdhcjsgbm90IHRoYXQgaGUgd2FzIGJldHRlciB0aGFuIGFueSBhY2tub3dsZWRnZWQgdHlyYW50LCBidXQgYmVjYXVzZSB0aGV5IGhhZCBubyBvdGhlciByZWZ1Z2UsIGFuZCBmZWx0IGNvbmZpZGVuY2UgaW4gb25lIHdobyB3YXMgYSBTeXJhY3VzYW4gYnkgYmlydGggYW5kIHBvc3Nlc3NlZCBhIGZvcmNlIHRoYXQgd2FzIGFibGUgdG8gY29wZSB3aXRoIHRoYXQgb2YgRGlvbnlzaXVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSB0aGUgQ2FydGhhZ2luaWFucyBjYW1lIHdpdGggYSBsYXJnZSBhcm1hbWVudCB0byBTaWNpbHkgYW5kIHdlcmUgd2F0Y2hpbmcgdGhlaXIgb3Bwb3J0dW5pdHksIGFuZCB0aGUgU2ljaWxpYW4gR3JlZWtzLCBpbiB0aGVpciBmcmlnaHQsIHdpc2hlZCB0byBzZW5kIGFuIGVtYmFzc3kgdG8gR3JlZWNlIGFuZCBhc2sgZm9yIGFzc2lzdGFuY2UgZnJvbSB0aGUgQ29yaW50aGlhbnMsIG5vdCBvbmx5IGJlY2F1c2UgdGhleSB0cnVzdGVkIHRoZW0gb24gYWNjb3VudCBvZiB0aGVpciBraW5zaGlwPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U3lyYWN1c2Ugd2FzIGZvdW5kZWQgYnkgQ29yaW50aGlhbnMgaW4gNzM1IEIuQy48L25vdGU+IGFuZCBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgbWFueSBiZW5lZml0cyB0aGV5IGhhZCBhbHJlYWR5IHJlY2VpdmVkIGZyb20gdGhlbSwgYnV0IGFsc28gaW4gZ2VuZXJhbCBiZWNhdXNlIHRoZXkgc2F3IHRoYXQgdGhlIGNpdHkgd2FzIGFsd2F5cyBhIGxvdmVyIG9mIGZyZWVkb20gYW5kIGEgaGF0ZXIgb2YgdHlyYW50cywgYW5kIGhhZCB3YWdlZCB0aGUgbW9zdCBhbmQgZ3JlYXRlc3Qgb2YgaGVyIHdhcnMsIG5vdCBmb3Igc3VwcmVtYWN5IGFuZCBhZ2dyYW5kaXplbWVudCwgYnV0IGZvciB0aGUgbGliZXJ0eSBvZiB0aGUgR3JlZWtzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IaWNldGFzLCBob3dldmVyLCBzaW5jZSBoZSBoYWQgbWFkZSBhIHR5cmFubnkgZm9yIGhpbXNlbGYsIGFuZCBub3QgdGhlIGZyZWVkb20gb2YgU3lyYWN1c2UsIGhpcyBzb2xlIG9iamVjdCBpbiB0YWtpbmcgdGhlIGZpZWxkLCBoYWQgYWxyZWFkeSBoZWxkIHNlY3JldCBjb25mZXJlbmNlcyB3aXRoIHRoZSBDYXJ0aGFnaW5pYW5zOyB5ZXQgb3Blbmx5IGhlIGNvbW1lbmRlZCB0aGUgcGxhbiBvZiB0aGUgU3lyYWN1c2FucyBhbmQgam9pbmVkIHRoZW0gaW4gc2VuZGluZyB0aGUgZW1iYXNzeSB0byBQZWxvcG9ubmVzdXMsIG5vdCBiZWNhdXNlIGhlIHdpc2hlZCB0aGF0IGFuIGFsbGllZCBmb3JjZSBzaG91bGQgY29tZSBmcm9tIHRoZXJlLCBidXQgYmVjYXVzZSBoZSBob3BlZCB0aGF0IGlmLCBhcyB3YXMgbGlrZWx5LCB0aGUgQ29yaW50aGlhbnMgc2hvdWxkIHJlZnVzZSB0aGVpciBhc3Npc3RhbmNlIGJlY2F1c2UgdGhlIGRpc3R1cmJlZCBjb25kaXRpb24gb2YgR3JlZWNlIGtlcHQgdGhlbSBidXN5IGF0IGhvbWUsIGhlIG1pZ2h0IG1vcmUgZWFzaWx5IHR1cm4gdGhlIGNvbnRyb2wgb2YgYWZmYWlycyBpbnRvIHRoZSBoYW5kcyBvZiB0aGUgQ2FydGhhZ2luaWFucyBhbmQgdXNlIHRoZXNlIGludmFkZXJzIGFzIGFsbGllcyBhbmQgaGVscGVycyBpbiBhIHN0cnVnZ2xlIGFnYWluc3QgdGhlIFN5cmFjdXNhbnMgb3IgYWdhaW5zdCBEaW9ueXNpdXMuICBUaGlzLCB0aGVuLCB3YXMgZnVsbHkgcHJvdmVkIGEgbGl0dGxlIGxhdGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NZWFud2hpbGUgdGhlIENhcnRoYWdpbmlhbnMgY2FtZSB3aXRoIGEgbGFyZ2UgYXJtYW1lbnQgdG8gU2ljaWx5IGFuZCB3ZXJlIHdhdGNoaW5nIHRoZWlyIG9wcG9ydHVuaXR5LCBhbmQgdGhlIFNpY2lsaWFuIEdyZWVrcywgaW4gdGhlaXIgZnJpZ2h0LCB3aXNoZWQgdG8gc2VuZCBhbiBlbWJhc3N5IHRvIEdyZWVjZSBhbmQgYXNrIGZvciBhc3Npc3RhbmNlIGZyb20gdGhlIENvcmludGhpYW5zLCBub3Qgb25seSBiZWNhdXNlIHRoZXkgdHJ1c3RlZCB0aGVtIG9uIGFjY291bnQgb2YgdGhlaXIga2luc2hpcDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U3lyYWN1c2Ugd2FzIGZvdW5kZWQgYnkgQ29yaW50aGlhbnMgaW4gNzM1IEIuQy48L25vdGU+IGFuZCBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgbWFueSBiZW5lZml0cyB0aGV5IGhhZCBhbHJlYWR5IHJlY2VpdmVkIGZyb20gdGhlbSwgYnV0IGFsc28gaW4gZ2VuZXJhbCBiZWNhdXNlIHRoZXkgc2F3IHRoYXQgdGhlIGNpdHkgd2FzIGFsd2F5cyBhIGxvdmVyIG9mIGZyZWVkb20gYW5kIGEgaGF0ZXIgb2YgdHlyYW50cywgYW5kIGhhZCB3YWdlZCB0aGUgbW9zdCBhbmQgZ3JlYXRlc3Qgb2YgaGVyIHdhcnMsIG5vdCBmb3Igc3VwcmVtYWN5IGFuZCBhZ2dyYW5kaXplbWVudCwgYnV0IGZvciB0aGUgbGliZXJ0eSBvZiB0aGUgR3JlZWtzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpY2V0YXMsIGhvd2V2ZXIsIHNpbmNlIGhlIGhhZCBtYWRlIGEgdHlyYW5ueSBmb3IgaGltc2VsZiwgYW5kIG5vdCB0aGUgZnJlZWRvbSBvZiBTeXJhY3VzZSwgaGlzIHNvbGUgb2JqZWN0IGluIHRha2luZyB0aGUgZmllbGQsIGhhZCBhbHJlYWR5IGhlbGQgc2VjcmV0IGNvbmZlcmVuY2VzIHdpdGggdGhlIENhcnRoYWdpbmlhbnM7IHlldCBvcGVubHkgaGUgY29tbWVuZGVkIHRoZSBwbGFuIG9mIHRoZSBTeXJhY3VzYW5zIGFuZCBqb2luZWQgdGhlbSBpbiBzZW5kaW5nIHRoZSBlbWJhc3N5IHRvIFBlbG9wb25uZXN1cywgbm90IGJlY2F1c2UgaGUgd2lzaGVkIHRoYXQgYW4gYWxsaWVkIGZvcmNlIHNob3VsZCBjb21lIGZyb20gdGhlcmUsIGJ1dCBiZWNhdXNlIGhlIGhvcGVkIHRoYXQgaWYsIGFzIHdhcyBsaWtlbHksIHRoZSBDb3JpbnRoaWFucyBzaG91bGQgcmVmdXNlIHRoZWlyIGFzc2lzdGFuY2UgYmVjYXVzZSB0aGUgZGlzdHVyYmVkIGNvbmRpdGlvbiBvZiBHcmVlY2Uga2VwdCB0aGVtIGJ1c3kgYXQgaG9tZSwgaGUgbWlnaHQgbW9yZSBlYXNpbHkgdHVybiB0aGUgY29udHJvbCBvZiBhZmZhaXJzIGludG8gdGhlIGhhbmRzIG9mIHRoZSBDYXJ0aGFnaW5pYW5zIGFuZCB1c2UgdGhlc2UgaW52YWRlcnMgYXMgYWxsaWVzIGFuZCBoZWxwZXJzIGluIGEgc3RydWdnbGUgYWdhaW5zdCB0aGUgU3lyYWN1c2FucyBvciBhZ2FpbnN0IERpb255c2l1cy4gIFRoaXMsIHRoZW4sIHdhcyBmdWxseSBwcm92ZWQgYSBsaXR0bGUgbGF0ZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIGVtYmFzc3kgYXJyaXZlZCwgdGhlIENvcmludGhpYW5zLCBzaW5jZSB0aGV5IHdlcmUgd29udCB0byBiZSBldmVyIHNvbGljaXRvdXMgZm9yIHRoZWlyIGNvbG9uaWFsIGNpdGllcyBhbmQgZm9yIFN5cmFjdXNlIGluIHBhcnRpY3VsYXIsIGFuZCBzaW5jZSBieSBnb29kIGZvcnR1bmUgdGhlcmUgd2FzIG5vdGhpbmcgaW4gR3JlZWNlIGF0IHRoYXQgdGltZSB0byBkaXN0dXJiIHRoZW0sIGJ1dCB0aGV5IHdlcmUgZW5qb3lpbmcgcGVhY2UgYW5kIGxlaXN1cmUsIHZvdGVkIHJlYWRpbHkgdG8gZ2l2ZSB0aGUgYXNzaXN0YW5jZSBkZXNpcmVkLiAgQW5kIHdoaWxlIHRoZXkgd2VyZSBzZWVraW5nIGZvciBhIGNvbW1hbmRlciwgYW5kIHRoZSBtYWdpc3RyYXRlcyB3ZXJlIHdyaXRpbmcgZG93biB0aGUgbmFtZXMgb2YgdGhvc2UgaW4gdGhlIGNpdHkgd2hvIHdlcmUgZWFnZXIgZm9yIHRoZSBob25vdXIgYW5kIHByb3Bvc2luZyB0aGVtIGZvciBlbGVjdGlvbiwgb25lIG9mIHRoZSBjb21tb24gcGVvcGxlIHJvc2UgdG8gaGlzIGZlZXQgYW5kIG5vbWluYXRlZCBUaW1vbGVvbiB0aGUgc29uIG9mIFRpbW9kZW11cywgYWx0aG91Z2ggaGUgbm8gbG9uZ2VyIHRvb2sgcGFydCBpbiBwdWJsaWMgYnVzaW5lc3MsIGFuZCBoYWQgbm8gZXhwZWN0YXRpb24gb3IgcHVycG9zZSBvZiBkb2luZyBzbzsgIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBzb21lIGdvZCwgYXMgaXQgd291bGQgc2VlbSwgcHV0IGl0IGludG8gdGhlIG1hbidzIG1pbmQgdG8gbm9taW5hdGUgaGltLCBzdWNoIHdhcyB0aGUga2luZGxpbmVzcyBvZiBGb3J0dW5lIHRoYXQgc2hvbmUgZm9ydGggYXQgb25jZSB1cG9uIGhpcyBlbGVjdGlvbiwgYW5kIHN1Y2ggdGhlIGdyYWNlIHRoYXQgYXR0ZW5kZWQgaGlzIHN1YnNlcXVlbnQgYWN0aW9ucyBhbmQgYWRvcm5lZCBoaXMgdmlydHVlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgZW1iYXNzeSBhcnJpdmVkLCB0aGUgQ29yaW50aGlhbnMsIHNpbmNlIHRoZXkgd2VyZSB3b250IHRvIGJlIGV2ZXIgc29saWNpdG91cyBmb3IgdGhlaXIgY29sb25pYWwgY2l0aWVzIGFuZCBmb3IgU3lyYWN1c2UgaW4gcGFydGljdWxhciwgYW5kIHNpbmNlIGJ5IGdvb2QgZm9ydHVuZSB0aGVyZSB3YXMgbm90aGluZyBpbiBHcmVlY2UgYXQgdGhhdCB0aW1lIHRvIGRpc3R1cmIgdGhlbSwgYnV0IHRoZXkgd2VyZSBlbmpveWluZyBwZWFjZSBhbmQgbGVpc3VyZSwgdm90ZWQgcmVhZGlseSB0byBnaXZlIHRoZSBhc3Npc3RhbmNlIGRlc2lyZWQuICBBbmQgd2hpbGUgdGhleSB3ZXJlIHNlZWtpbmcgZm9yIGEgY29tbWFuZGVyLCBhbmQgdGhlIG1hZ2lzdHJhdGVzIHdlcmUgd3JpdGluZyBkb3duIHRoZSBuYW1lcyBvZiB0aG9zZSBpbiB0aGUgY2l0eSB3aG8gd2VyZSBlYWdlciBmb3IgdGhlIGhvbm91ciBhbmQgcHJvcG9zaW5nIHRoZW0gZm9yIGVsZWN0aW9uLCBvbmUgb2YgdGhlIGNvbW1vbiBwZW9wbGUgcm9zZSB0byBoaXMgZmVldCBhbmQgbm9taW5hdGVkIFRpbW9sZW9uIHRoZSBzb24gb2YgVGltb2RlbXVzLCBhbHRob3VnaCBoZSBubyBsb25nZXIgdG9vayBwYXJ0IGluIHB1YmxpYyBidXNpbmVzcywgYW5kIGhhZCBubyBleHBlY3RhdGlvbiBvciBwdXJwb3NlIG9mIGRvaW5nIHNvOyAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBzb21lIGdvZCwgYXMgaXQgd291bGQgc2VlbSwgcHV0IGl0IGludG8gdGhlIG1hbidzIG1pbmQgdG8gbm9taW5hdGUgaGltLCBzdWNoIHdhcyB0aGUga2luZGxpbmVzcyBvZiBGb3J0dW5lIHRoYXQgc2hvbmUgZm9ydGggYXQgb25jZSB1cG9uIGhpcyBlbGVjdGlvbiwgYW5kIHN1Y2ggdGhlIGdyYWNlIHRoYXQgYXR0ZW5kZWQgaGlzIHN1YnNlcXVlbnQgYWN0aW9ucyBhbmQgYWRvcm5lZCBoaXMgdmlydHVlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5IZSB3YXMgYm9ybiBvZiBwYXJlbnRzIHdobyB3ZXJlIGlsbHVzdHJpb3VzIGluIHRoZSBjaXR5LCBUaW1vZGVtdXMgYW5kIERlbWFyaXN0ZSwgYW5kIGhlIHdhcyBhIGxvdmVyIG9mIGhpcyBjb3VudHJ5IGFuZCBleGNlZWRpbmdseSBnZW50bGUsIGV4Y2VwdCBhcyBoZSB3YXMgYSBoYXRlciBvZiB0eXJhbnRzIGFuZCBvZiBiYXNlIG1lbi4gIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgYSBzb2xkaWVyIGhpcyBuYXR1cmUgd2FzIHNvIHdlbGwgYW5kIGV2ZW5seSBhdHRlbXBlcmVkIHRoYXQgZ3JlYXQgc2FnYWNpdHkgd2FzIG1hbmlmZXN0ZWQgaW4gdGhlIGV4cGxvaXRzIG9mIGhpcyB5b3V0aCwgYW5kIG5vIGxlc3MgYnJhdmVyeSBpbiB0aG9zZSBvZiBoaXMgb2xkIGFnZS4gSGUgaGFkIGEgYnJvdGhlciBUaW1vcGhhbmVzLCBvbGRlciB0aGFuIGhlLCBhbmQgbm90IGF0IGFsbCBsaWtlIGhpbSwgYnV0IGhlYWRzdHJvbmcgYW5kIGZpbGxlZCB3aXRoIGEgcnVpbm91cyBwYXNzaW9uIGZvciBhYnNvbHV0ZSBwb3dlciBieSB3b3J0aGxlc3MgZnJpZW5kcyBhbmQgZm9yZWlnbiBtaWxpdGFyeSBhZHZlbnR1cmVycyB3aG8gd2VyZSBldmVyIGFib3V0IGhpbSwgYW5kIGhhdmluZyB0aGUgcmVwdXRhdGlvbiBvZiBiZWluZyByYXRoZXIgaW1wZXR1b3VzIGFuZCBmb25kIG9mIGRhbmdlciBpbiBtaWxpdGFyeSBzZXJ2aWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgaGUgd29uIGZvbGxvd2VycyBhbW9uZyB0aGUgY2l0aXplbnMgYW5kIGFzIGFuIGVmZmljaWVudCB3YXJyaW9yIHdhcyBnaXZlbiBwb3N0cyBvZiBoaWdoIGNvbW1hbmQuIEFuZCBUaW1vbGVvbiBhaWRlZCBoaW0gaW4gb2J0YWluaW5nIHRoZXNlLCB0cnlpbmcgdG8gY29uY2VhbCBoaXMgbWlzdGFrZXMgYWx0b2dldGhlciBvciB0byBtYWtlIHRoZW0gc2VlbSB0cmlmbGluZywgYW5kIGVtYmVsbGlzaGluZyBhbmQgZW5oYW5jaW5nIGhpcyBnb29kIG5hdHVyYWwgcXVhbGl0aWVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGEgc29sZGllciBoaXMgbmF0dXJlIHdhcyBzbyB3ZWxsIGFuZCBldmVubHkgYXR0ZW1wZXJlZCB0aGF0IGdyZWF0IHNhZ2FjaXR5IHdhcyBtYW5pZmVzdGVkIGluIHRoZSBleHBsb2l0cyBvZiBoaXMgeW91dGgsIGFuZCBubyBsZXNzIGJyYXZlcnkgaW4gdGhvc2Ugb2YgaGlzIG9sZCBhZ2UuIEhlIGhhZCBhIGJyb3RoZXIgVGltb3BoYW5lcywgb2xkZXIgdGhhbiBoZSwgYW5kIG5vdCBhdCBhbGwgbGlrZSBoaW0sIGJ1dCBoZWFkc3Ryb25nIGFuZCBmaWxsZWQgd2l0aCBhIHJ1aW5vdXMgcGFzc2lvbiBmb3IgYWJzb2x1dGUgcG93ZXIgYnkgd29ydGhsZXNzIGZyaWVuZHMgYW5kIGZvcmVpZ24gbWlsaXRhcnkgYWR2ZW50dXJlcnMgd2hvIHdlcmUgZXZlciBhYm91dCBoaW0sIGFuZCBoYXZpbmcgdGhlIHJlcHV0YXRpb24gb2YgYmVpbmcgcmF0aGVyIGltcGV0dW91cyBhbmQgZm9uZCBvZiBkYW5nZXIgaW4gbWlsaXRhcnkgc2VydmljZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBoZSB3b24gZm9sbG93ZXJzIGFtb25nIHRoZSBjaXRpemVucyBhbmQgYXMgYW4gZWZmaWNpZW50IHdhcnJpb3Igd2FzIGdpdmVuIHBvc3RzIG9mIGhpZ2ggY29tbWFuZC4gQW5kIFRpbW9sZW9uIGFpZGVkIGhpbSBpbiBvYnRhaW5pbmcgdGhlc2UsIHRyeWluZyB0byBjb25jZWFsIGhpcyBtaXN0YWtlcyBhbHRvZ2V0aGVyIG9yIHRvIG1ha2UgdGhlbSBzZWVtIHRyaWZsaW5nLCBhbmQgZW1iZWxsaXNoaW5nIGFuZCBlbmhhbmNpbmcgaGlzIGdvb2QgbmF0dXJhbCBxdWFsaXRpZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGJhdHRsZSBmb3VnaHQgYnkgdGhlIENvcmludGhpYW5zIGFnYWluc3QgdGhlIEFyZ2l2ZXMgYW5kIENsZW9uYWVhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGVyaGFwcyBiZXR3ZWVuIDM2OCBhbmQgMzY2IEIuQy48L25vdGU+IFRpbW9sZW9uIHdhcyBzdGF0aW9uZWQgYW1vbmcgdGhlIG1lbi1hdC1hcm1zLCBhbmQgVGltb3BoYW5lcywgd2hvIGNvbW1hbmRlZCB0aGUgY2F2YWxyeSwgd2FzIG92ZXJ0YWtlbiBieSBleHRyZW1lIHBlcmlsLiBGb3IgaGlzIGhvcnNlIHdhcyB3b3VuZGVkIGFuZCB0aHJldyBoaW0gaW4gYW1vbmcgdGhlIGVuZW15LCBhbmQgb2YgaGlzIGNvbXJhZGVzLCBzb21lIHNjYXR0ZXJlZCBpbiBwYW5pYyBmbGlnaHQsIHdoaWxlIHRoZSBmZXcgd2hvIHJlbWFpbmVkIGZvdWdodCBhZ2FpbnN0IGdyZWF0IG51bWJlcnMgYW5kIHdlcmUgd2l0aCBkaWZmaWN1bHR5IGhvbGRpbmcgdGhlaXIgZ3JvdW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgd2hlbiBUaW1vbGVvbiBzYXcgd2hhdCBoYWQgaGFwcGVuZWQsIGhlIGNhbWUgcnVubmluZyB0byB0aGUgaGVscCBvZiBUaW1vcGhhbmVzIGFuZCBoZWxkIGhpcyBzaGllbGQgb3ZlciBoaW0gYXMgaGUgbGF5IG9uIHRoZSBncm91bmQsIGFuZCBhZnRlciByZWNlaXZpbmcgbWFueSBqYXZlbGlucyBhbmQgbWFueSBoYW5kIHRvIGhhbmQgYmxvd3MgdXBvbiBoaXMgcGVyc29uIGFuZCBoaXMgYXJtb3VyLCBhdCBsYXN0IHN1Y2NlZWRlZCBpbiByZXB1bHNpbmcgdGhlIGVuZW15IGFuZCBzYXZpbmcgaGlzIGJyb3RoZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgYmF0dGxlIGZvdWdodCBieSB0aGUgQ29yaW50aGlhbnMgYWdhaW5zdCB0aGUgQXJnaXZlcyBhbmQgQ2xlb25hZWFucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBlcmhhcHMgYmV0d2VlbiAzNjggYW5kIDM2NiBCLkMuPC9ub3RlPiBUaW1vbGVvbiB3YXMgc3RhdGlvbmVkIGFtb25nIHRoZSBtZW4tYXQtYXJtcywgYW5kIFRpbW9waGFuZXMsIHdobyBjb21tYW5kZWQgdGhlIGNhdmFscnksIHdhcyBvdmVydGFrZW4gYnkgZXh0cmVtZSBwZXJpbC4gRm9yIGhpcyBob3JzZSB3YXMgd291bmRlZCBhbmQgdGhyZXcgaGltIGluIGFtb25nIHRoZSBlbmVteSwgYW5kIG9mIGhpcyBjb21yYWRlcywgc29tZSBzY2F0dGVyZWQgaW4gcGFuaWMgZmxpZ2h0LCB3aGlsZSB0aGUgZmV3IHdobyByZW1haW5lZCBmb3VnaHQgYWdhaW5zdCBncmVhdCBudW1iZXJzIGFuZCB3ZXJlIHdpdGggZGlmZmljdWx0eSBob2xkaW5nIHRoZWlyIGdyb3VuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIFRpbW9sZW9uIHNhdyB3aGF0IGhhZCBoYXBwZW5lZCwgaGUgY2FtZSBydW5uaW5nIHRvIHRoZSBoZWxwIG9mIFRpbW9waGFuZXMgYW5kIGhlbGQgaGlzIHNoaWVsZCBvdmVyIGhpbSBhcyBoZSBsYXkgb24gdGhlIGdyb3VuZCwgYW5kIGFmdGVyIHJlY2VpdmluZyBtYW55IGphdmVsaW5zIGFuZCBtYW55IGhhbmQgdG8gaGFuZCBibG93cyB1cG9uIGhpcyBwZXJzb24gYW5kIGhpcyBhcm1vdXIsIGF0IGxhc3Qgc3VjY2VlZGVkIGluIHJlcHVsc2luZyB0aGUgZW5lbXkgYW5kIHNhdmluZyBoaXMgYnJvdGhlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BZnRlciB0aGlzLCB0aGUgQ29yaW50aGlhbnMsIGZlYXJpbmcgbGVzdCB0aGV5IHNob3VsZCBzdWZmZXIgYSBzZWNvbmQgbG9zcyBvZiB0aGVpciBjaXR5IHRocm91Z2ggdGhlIHRyZWFjaGVyeSBvZiB0aGVpciBhbGxpZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BcyB0aGV5IGhhZCBhdCBoYW5kcyBvZiB0aGUgQXJnaXZlcyBpbiAzOTMgQi5DLjwvbm90ZT4gdm90ZWQgdG8gbWFpbnRhaW4gZm91ciBodW5kcmVkIG1lcmNlbmFyaWVzLCBhbmQgcHV0IFRpbW9waGFuZXMgaW4gY29tbWFuZCBvZiB0aGVtOyAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBoZSwgd2l0aG91dCByZWdhcmQgZm9yIGhvbm91ciBhbmQganVzdGljZSwgYXQgb25jZSB0b29rIG1lYXN1cmVzIHRvIGJyaW5nIHRoZSBjaXR5IHVuZGVyIGhpcyBvd24gcG93ZXIsIGFuZCwgYWZ0ZXIgcHV0dGluZyB0byBkZWF0aCB3aXRob3V0IGEgdHJpYWwgZ3JlYXQgbnVtYmVycyBvZiB0aGUgbGVhZGluZyBjaXRpemVucywgZGVjbGFyZWQgaGltc2VsZiB0eXJhbnQuIEF0IHRoaXMsIFRpbW9sZW9uIHdhcyBncmVhdGx5IGRpc3RyZXNzZWQsIGFuZCBjb25zaWRlcmluZyBoaXMgYnJvdGhlcidzIGJhc2VuZXNzIHRvIGJlIGhpcyBvd24gbWlzZm9ydHVuZSwgaGUgYXR0ZW1wdGVkIHRvIHJlYXNvbiB3aXRoIGhpbSBhbmQgZXhob3J0IGhpbSB0byByZW5vdW5jZSB0aGF0IHVuZm9ydHVuYXRlIGFuZCBtYWQgYW1iaXRpb24gb2YgaGlzIGFuZCBzZWVrIHRvIG1ha2Ugc29tZSBhbWVuZHMgZm9yIGhpcyB0cmFuc2dyZXNzaW9ucyBhZ2FpbnN0IGhpcyBmZWxsb3cgY2l0aXplbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhpcyBicm90aGVyIHJlamVjdGVkIGhpcyBhcHBlYWxzIHdpdGggc2Nvcm4sIGhlIHRvb2sgaGlzIGtpbnNtYW4gQWVzY2h5bHVzLCB3aG8gd2FzIGEgYnJvdGhlciBvZiB0aGUgd2lmZSBvZiBUaW1vcGhhbmVzLCBhbmQgaGlzIGZyaWVuZCB0aGUgc2VlciB3aG9zZSBuYW1lLCBhY2NvcmRpbmcgdG8gVGhlb3BvbXB1cywgd2FzIFNhdHlydXMsIGJ1dCBhY2NvcmRpbmcgdG8gRXBob3J1cyBhbmQgVGltYWV1cywgT3J0aGFnb3JhcywgYW5kIGFmdGVyIHdhaXRpbmcgYSBmZXcgZGF5cyB3ZW50IHVwIGFnYWluIHRvIGhpcyBicm90aGVyOyBhbmQgdGhlIHRocmVlLCBzdXJyb3VuZGluZyBoaW0sIGJlc291Z2h0IGhpbSBldmVuIG5vdyB0byBsaXN0ZW4gdG8gcmVhc29uIGFuZCBjaGFuZ2UgaGlzIG1pbmQuIEJ1dCBUaW1vcGhhbmVzIGZpcnN0IG1vY2tlZCB0aGVtLCBhbmQgdGhlbiBsb3N0IGhpcyB0ZW1wZXIgYW5kIHdhcyB2aW9sZW50LCB3aGVyZXVwb24gVGltb2xlb24gd2l0aGRyZXcgYSBsaXR0bGUgc3BhY2UgZnJvbSBoaW0gYW5kIHN0b29kIHdlZXBpbmcgd2l0aCBtdWZmbGVkIGhlYWQsIHdoaWxlIHRoZSBvdGhlciB0d28sIGRyYXdpbmcgdGhlaXIgc3dvcmRzIHNwZWVkaWx5IGRlc3BhdGNoZWQgaGltLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTYuNjUuNCIgdmFsaWQ9InllcyI+RGlvZG9ydXMgKHh2aS4gNjUsIDQpPC9iaWJsPiBzYXlzIHRoYXQgVGltb2xlb24gc2xldyBoaXMgYnJvdGhlciB3aXRoIGhpcyBvd24gaGFuZCBpbiB0aGUgbWFya2V0IHBsYWNlOyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTmVwLiBUaW1vbC4gMS40IiB2YWxpZD0ieWVzIj5OZXBvcyAoPHRpdGxlPlRpbW9sZW9uPC90aXRsZT4sIGkuIDQpPC9iaWJsPiBzdXBwb3J0cyBQbHV0YXJjaCdzIGFjY291bnQsIHRob3VnaCB3aXRoIGRpZmZlcmluZyBkZXRhaWxzLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFzIHRoZXkgaGFkIGF0IGhhbmRzIG9mIHRoZSBBcmdpdmVzIGluIDM5MyBCLkMuPC9ub3RlPiB2b3RlZCB0byBtYWludGFpbiBmb3VyIGh1bmRyZWQgbWVyY2VuYXJpZXMsIGFuZCBwdXQgVGltb3BoYW5lcyBpbiBjb21tYW5kIG9mIHRoZW07IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBoZSwgd2l0aG91dCByZWdhcmQgZm9yIGhvbm91ciBhbmQganVzdGljZSwgYXQgb25jZSB0b29rIG1lYXN1cmVzIHRvIGJyaW5nIHRoZSBjaXR5IHVuZGVyIGhpcyBvd24gcG93ZXIsIGFuZCwgYWZ0ZXIgcHV0dGluZyB0byBkZWF0aCB3aXRob3V0IGEgdHJpYWwgZ3JlYXQgbnVtYmVycyBvZiB0aGUgbGVhZGluZyBjaXRpemVucywgZGVjbGFyZWQgaGltc2VsZiB0eXJhbnQuIEF0IHRoaXMsIFRpbW9sZW9uIHdhcyBncmVhdGx5IGRpc3RyZXNzZWQsIGFuZCBjb25zaWRlcmluZyBoaXMgYnJvdGhlcidzIGJhc2VuZXNzIHRvIGJlIGhpcyBvd24gbWlzZm9ydHVuZSwgaGUgYXR0ZW1wdGVkIHRvIHJlYXNvbiB3aXRoIGhpbSBhbmQgZXhob3J0IGhpbSB0byByZW5vdW5jZSB0aGF0IHVuZm9ydHVuYXRlIGFuZCBtYWQgYW1iaXRpb24gb2YgaGlzIGFuZCBzZWVrIHRvIG1ha2Ugc29tZSBhbWVuZHMgZm9yIGhpcyB0cmFuc2dyZXNzaW9ucyBhZ2FpbnN0IGhpcyBmZWxsb3cgY2l0aXplbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhpcyBicm90aGVyIHJlamVjdGVkIGhpcyBhcHBlYWxzIHdpdGggc2Nvcm4sIGhlIHRvb2sgaGlzIGtpbnNtYW4gQWVzY2h5bHVzLCB3aG8gd2FzIGEgYnJvdGhlciBvZiB0aGUgd2lmZSBvZiBUaW1vcGhhbmVzLCBhbmQgaGlzIGZyaWVuZCB0aGUgc2VlciB3aG9zZSBuYW1lLCBhY2NvcmRpbmcgdG8gVGhlb3BvbXB1cywgd2FzIFNhdHlydXMsIGJ1dCBhY2NvcmRpbmcgdG8gRXBob3J1cyBhbmQgVGltYWV1cywgT3J0aGFnb3JhcywgYW5kIGFmdGVyIHdhaXRpbmcgYSBmZXcgZGF5cyB3ZW50IHVwIGFnYWluIHRvIGhpcyBicm90aGVyOyBhbmQgdGhlIHRocmVlLCBzdXJyb3VuZGluZyBoaW0sIGJlc291Z2h0IGhpbSBldmVuIG5vdyB0byBsaXN0ZW4gdG8gcmVhc29uIGFuZCBjaGFuZ2UgaGlzIG1pbmQuIEJ1dCBUaW1vcGhhbmVzIGZpcnN0IG1vY2tlZCB0aGVtLCBhbmQgdGhlbiBsb3N0IGhpcyB0ZW1wZXIgYW5kIHdhcyB2aW9sZW50LCB3aGVyZXVwb24gVGltb2xlb24gd2l0aGRyZXcgYSBsaXR0bGUgc3BhY2UgZnJvbSBoaW0gYW5kIHN0b29kIHdlZXBpbmcgd2l0aCBtdWZmbGVkIGhlYWQsIHdoaWxlIHRoZSBvdGhlciB0d28sIGRyYXdpbmcgdGhlaXIgc3dvcmRzIHNwZWVkaWx5IGRlc3BhdGNoZWQgaGltLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE2LjY1LjQiIHZhbGlkPSJ5ZXMiPkRpb2RvcnVzICh4dmkuIDY1LCA0KTwvYmlibD4gc2F5cyB0aGF0IFRpbW9sZW9uIHNsZXcgaGlzIGJyb3RoZXIgd2l0aCBoaXMgb3duIGhhbmQgaW4gdGhlIG1hcmtldCBwbGFjZTsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTmVwLiBUaW1vbC4gMS40IiB2YWxpZD0ieWVzIj5OZXBvcyAoPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGltb2xlb248L3RpdGxlPiwgaS4gNCk8L2JpYmw+IHN1cHBvcnRzIFBsdXRhcmNoJ3MgYWNjb3VudCwgdGhvdWdoIHdpdGggZGlmZmVyaW5nIGRldGFpbHMuPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNi42NS40IiB2YWxpZD0ieWVzIj5EaW9kb3J1cyAoeHZpLiA2NSwgNCk8L2JpYmw+IHNheXMgdGhhdCBUaW1vbGVvbiBzbGV3IGhpcyBicm90aGVyIHdpdGggaGlzIG93biBoYW5kIGluIHRoZSBtYXJrZXQgcGxhY2U7IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ik5lcC4gVGltb2wuIDEuNCIgdmFsaWQ9InllcyI+TmVwb3MgKDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRpbW9sZW9uPC90aXRsZT4sIGkuIDQpPC9iaWJsPiBzdXBwb3J0cyBQbHV0YXJjaCdzIGFjY291bnQsIHRob3VnaCB3aXRoIGRpZmZlcmluZyBkZXRhaWxzLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRpbW9sZW9uPC90aXRsZT4sIGkuIDQpPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZGVlZCBoYXZpbmcgYmVlbiBub2lzZWQgYWJyb2FkLCB0aGUgbW9zdCBpbmZsdWVudGlhbCBDb3JpbnRoaWFucyBhcHBsYXVkZWQgVGltb2xlb24gZm9yIGhpcyBoYXRyZWQgb2YgYmFzZW5lc3MgYW5kIGdyZWF0bmVzcyBvZiBzb3VsLCBpbiB0aGF0LCBhbHRob3VnaCBhIGtpbmRseSBtYW4gYW5kIGZvbmQgb2YgaGlzIGZhbWlseSwgaGUgaGFkIG5ldmVydGhlbGVzcyBzZXQgaGlzIGNvdW50cnkgYmVmb3JlIGhpcyBmYW1pbHksIGFuZCBob25vdXIgYW5kIGp1c3RpY2UgYmVmb3JlIGV4cGVkaWVuY3k7IGZvciB3aGVuIGhpcyBicm90aGVyIHdhcyBmaWdodGluZyB2YWxpYW50bHkgZm9yIGhpcyBjb3VudHJ5LCBUaW1vbGVvbiBoYWQgc2F2ZWQgaGlzIGxpZmUsIGJ1dCBhZnRlciBoZSBoYWQgcGxvdHRlZCBhZ2FpbnN0IGhlciBhbmQgZW5zbGF2ZWQgaGVyLCBUaW1vbGVvbiBoYWQgc2xhaW4gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aG9zZSB3aG8gd2VyZSB1bmFibGUgdG8gbGl2ZSBpbiBhIGRlbW9jcmFjeSBhbmQgd2VyZSBhY2N1c3RvbWVkIHRvIHBheSBjb3VydCB0byBtZW4gaW4gcG93ZXIsIHdoaWxlIHRoZXkgcHJldGVuZGVkIHRvIHJlam9pY2UgYXQgdGhlIGRlYXRoIG9mIHRoZSB0eXJhbnQsIHN0aWxsLCBieSB0aGVpciBhYnVzZSBvZiBUaW1vbGVvbiBhcyB0aGUgcGVycGV0cmF0b3Igb2YgYW4gaW1waW91cyBhbmQgYWJvbWluYWJsZSBkZWVkLCBkcm92ZSBoaW0gaW50byBkZXNwb25kZW5jeS4gQW5kIG5vdyBoZSBsZWFybmVkIHRoYXQgaGlzIG1vdGhlciB3YXMgYW5ncnkgd2l0aCBoaW0gYW5kIHV0dGVyZWQgZHJlYWRmdWwgcmVwcm9hY2hlcyBhbmQgZmVhcmZ1bCBpbXByZWNhdGlvbnMgYWdhaW5zdCBoaW0sIGFuZCB3ZW50IHRvIHBsZWFkIGhpcyBjYXVzZSB3aXRoIGhlcjsgYnV0IHNoZSBjb3VsZCBub3QgZW5kdXJlIHRvIHNlZSBoaXMgZmFjZSwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGNsb3NlZCBoZXIgaG91c2UgYWdhaW5zdCBoaW0uIFRoZW4gaW5kZWVkIGhlIGJlY2FtZSBhbHRvZ2V0aGVyIGEgcHJleSB0byBncmllZiBhbmQgZGlzb3JkZXJlZCBpbiBtaW5kLCBhbmQgZGV0ZXJtaW5lZCB0byBzdGFydmUgaGltc2VsZiB0byBkZWF0aDsgYnV0IGhpcyBmcmllbmRzIHdvdWxkIG5vdCBzdWZmZXIgdGhpcywgYW5kIGJyb3VnaHQgYWxsIG1hbm5lciBvZiBlbnRyZWF0eSBhbmQgY29uc3RyYWludCB0byBiZWFyIHVwb24gaGltLCBzbyB0aGF0IGhlIG1hZGUgdXAgaGlzIG1pbmQgdG8gbGl2ZSBieSBoaW1zZWxmLCBhcGFydCBmcm9tIHRoZSB3b3JsZC4gU28gaGUgZ2F2ZSB1cCBhbGwgcHVibGljIGxpZmUsIGFuZCBmb3IgYSBsb25nIHdoaWxlIGRpZCBub3QgZXZlbiByZXR1cm4gdG8gdGhlIGNpdHksIGJ1dCBzcGVudCBoaXMgdGltZSB3YW5kZXJpbmcgaW4gZ3JlYXQgZGlzdHJlc3Mgb2YgbWluZCBhbW9uZyB0aGUgbW9zdCBkZXNvbGF0ZSBwYXJ0cyBvZiB0aGUgY291bnRyeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZGVlZCBoYXZpbmcgYmVlbiBub2lzZWQgYWJyb2FkLCB0aGUgbW9zdCBpbmZsdWVudGlhbCBDb3JpbnRoaWFucyBhcHBsYXVkZWQgVGltb2xlb24gZm9yIGhpcyBoYXRyZWQgb2YgYmFzZW5lc3MgYW5kIGdyZWF0bmVzcyBvZiBzb3VsLCBpbiB0aGF0LCBhbHRob3VnaCBhIGtpbmRseSBtYW4gYW5kIGZvbmQgb2YgaGlzIGZhbWlseSwgaGUgaGFkIG5ldmVydGhlbGVzcyBzZXQgaGlzIGNvdW50cnkgYmVmb3JlIGhpcyBmYW1pbHksIGFuZCBob25vdXIgYW5kIGp1c3RpY2UgYmVmb3JlIGV4cGVkaWVuY3k7IGZvciB3aGVuIGhpcyBicm90aGVyIHdhcyBmaWdodGluZyB2YWxpYW50bHkgZm9yIGhpcyBjb3VudHJ5LCBUaW1vbGVvbiBoYWQgc2F2ZWQgaGlzIGxpZmUsIGJ1dCBhZnRlciBoZSBoYWQgcGxvdHRlZCBhZ2FpbnN0IGhlciBhbmQgZW5zbGF2ZWQgaGVyLCBUaW1vbGVvbiBoYWQgc2xhaW4gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRob3NlIHdobyB3ZXJlIHVuYWJsZSB0byBsaXZlIGluIGEgZGVtb2NyYWN5IGFuZCB3ZXJlIGFjY3VzdG9tZWQgdG8gcGF5IGNvdXJ0IHRvIG1lbiBpbiBwb3dlciwgd2hpbGUgdGhleSBwcmV0ZW5kZWQgdG8gcmVqb2ljZSBhdCB0aGUgZGVhdGggb2YgdGhlIHR5cmFudCwgc3RpbGwsIGJ5IHRoZWlyIGFidXNlIG9mIFRpbW9sZW9uIGFzIHRoZSBwZXJwZXRyYXRvciBvZiBhbiBpbXBpb3VzIGFuZCBhYm9taW5hYmxlIGRlZWQsIGRyb3ZlIGhpbSBpbnRvIGRlc3BvbmRlbmN5LiBBbmQgbm93IGhlIGxlYXJuZWQgdGhhdCBoaXMgbW90aGVyIHdhcyBhbmdyeSB3aXRoIGhpbSBhbmQgdXR0ZXJlZCBkcmVhZGZ1bCByZXByb2FjaGVzIGFuZCBmZWFyZnVsIGltcHJlY2F0aW9ucyBhZ2FpbnN0IGhpbSwgYW5kIHdlbnQgdG8gcGxlYWQgaGlzIGNhdXNlIHdpdGggaGVyOyBidXQgc2hlIGNvdWxkIG5vdCBlbmR1cmUgdG8gc2VlIGhpcyBmYWNlLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBjbG9zZWQgaGVyIGhvdXNlIGFnYWluc3QgaGltLiBUaGVuIGluZGVlZCBoZSBiZWNhbWUgYWx0b2dldGhlciBhIHByZXkgdG8gZ3JpZWYgYW5kIGRpc29yZGVyZWQgaW4gbWluZCwgYW5kIGRldGVybWluZWQgdG8gc3RhcnZlIGhpbXNlbGYgdG8gZGVhdGg7IGJ1dCBoaXMgZnJpZW5kcyB3b3VsZCBub3Qgc3VmZmVyIHRoaXMsIGFuZCBicm91Z2h0IGFsbCBtYW5uZXIgb2YgZW50cmVhdHkgYW5kIGNvbnN0cmFpbnQgdG8gYmVhciB1cG9uIGhpbSwgc28gdGhhdCBoZSBtYWRlIHVwIGhpcyBtaW5kIHRvIGxpdmUgYnkgaGltc2VsZiwgYXBhcnQgZnJvbSB0aGUgd29ybGQuIFNvIGhlIGdhdmUgdXAgYWxsIHB1YmxpYyBsaWZlLCBhbmQgZm9yIGEgbG9uZyB3aGlsZSBkaWQgbm90IGV2ZW4gcmV0dXJuIHRvIHRoZSBjaXR5LCBidXQgc3BlbnQgaGlzIHRpbWUgd2FuZGVyaW5nIGluIGdyZWF0IGRpc3RyZXNzIG9mIG1pbmQgYW1vbmcgdGhlIG1vc3QgZGVzb2xhdGUgcGFydHMgb2YgdGhlIGNvdW50cnkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gdHJ1ZSBpcyBpdCB0aGF0IHRoZSBwdXJwb3NlcyBvZiBtZW4sIHVubGVzcyB0aGV5IGFjcXVpcmUgZmlybW5lc3MgYW5kIHN0cmVuZ3RoIGZyb20gcmVhc29uIGFuZCBwaGlsb3NvcGh5IGZvciB0aGUgYWN0aXZpdGllcyBvZiBsaWZlLCBhcmUgdW5zZXR0bGVkIGFuZCBlYXNpbHkgY2FycmllZCBhd2F5IGJ5IGNhc3VhbCBwcmFpc2UgYW5kIGJsYW1lLCBiZWluZyBmb3JjZWQgb3V0IG9mIHRoZWlyIG5hdGl2ZSByZWNrb25pbmdzLiBGb3IgaXQgd291bGQgc2VlbSB0aGF0IG5vdCBvbmx5IG91ciBhY3Rpb24gbXVzdCBiZSBub2JsZSBhbmQganVzdCwgYnV0IHRoZSBjb252aWN0aW9uIGFsc28gZnJvbSB3aGljaCBvdXIgYWN0aW9uIHNwcmluZ3MgbXVzdCBiZSBhYmlkaW5nIGFuZCB1bmNoYW5nZWFibGUsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmluIG9yZGVyIHRoYXQgd2UgbWF5IGJlIHNhdGlzZmllZCB3aXRoIHdoYXQgd2UgYXJlIGFib3V0IHRvIGRvLCBhbmQgdGhhdCBtZXJlIHdlYWtuZXNzIG1heSBub3QgbWFrZSB1cyBkZWplY3RlZCBvdmVyIGFjdGlvbnMgd2hpY2ggaGF2ZSBvbmNlIGJlZW4gYWNjb21wbGlzaGVkLCB3aGVuIHRoZSBmYWlyIHZpc2lvbiBvZiB0aGUgR29vZCBmYWRlcyBhd2F5OyBqdXN0IGFzIGdsdXR0b25zIHdobyBkZXZvdXIgY2xveWluZyB2aWFuZHMgd2l0aCB0aGUga2VlbmVzdCBhcHBldGl0ZSBhcmUgdmVyeSBzb29uIHNhdGVkIGFuZCB0aGVuIGRpc2d1c3RlZCB3aXRoIHRoZW0uIEZvciByZXBlbnRhbmNlIG1ha2VzIGV2ZW4gdGhlIG5vYmxlIGFjdGlvbiBiYXNlOyB3aGVyZWFzIHRoZSBjaG9pY2Ugd2hpY2ggc3ByaW5ncyBmcm9tIGEgd2lzZSBhbmQgdW5kZXJzdGFuZGluZyBjYWxjdWxhdGlvbiBkb2VzIG5vdCBjaGFuZ2UsIGV2ZW4gdGhvdWdoIGl0cyByZXN1bHRzIGFyZSB1bnN1Y2Nlc3NmdWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBQaG9jaW9uIHRoZSBBdGhlbmlhbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDx0aXRsZT5QaG9jaW9uPC90aXRsZT4sIHh4aWlpLiA0Ljwvbm90ZT4gYWZ0ZXIgaGF2aW5nIG9wcG9zZWQgdGhlIGFjdGl2aXRpZXMgb2YgTGVvc3RoZW5lcywgd2hlbiBMZW9zdGhlbmVzIHdhcyB0aG91Z2h0IHRvIGJlIHN1Y2Nlc3NmdWwgYW5kIHRoZSBBdGhlbmlhbnMgd2VyZSBzZWVuIHNhY3JpZmljaW5nIGFuZCBleHVsdGluZyBvdmVyIHRoZSB2aWN0b3J5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPldvbiBieSB0aGUgYWxsaWVkIEdyZWVrcyB1bmRlciBMZW9zdGhlbmVzIG92ZXIgQW50aXBhdGVyIG9mIE1hY2Vkb25pYSwgaW4gMzIzIEIuQy4gVGhlIHZpY3Rvcnkgd2FzIHNvb24gZm9sbG93ZWQgYnkgdGhlIGRlZmVhdCBvZiB0aGUgR3JlZWtzIGF0IENyYW5ub24uPC9ub3RlPiBzYWlkIGhlIGNvdWxkIGhhdmUgd2lzaGVkIHRoYXQgdGhlIGFjaGlldmVtZW50IHdlcmUgaGlzIG93biwgYnV0IHdhcyBnbGFkIHRoYXQgaGUgY291bnNlbGxlZCBhcyBoZSBkaWQuIEFuZCB3aXRoIG1vcmUgZm9yY2UgQXJpc3RpZGVzIHRoZSBMb2NyaWFuLCBvbmUgb2YgUGxhdG8ncyBjb21wYW5pb25zLCB3aGVuIERpb255c2l1cyB0aGUgRWxkZXIgYXNrZWQgaGltIGZvciBvbmUgb2YgaGlzIGRhdWdodGVycyBpbiBtYXJyaWFnZSwgc2FpZCBoZSB3b3VsZCBiZSBtb3JlIHBsZWFzZWQgdG8gc2VlIHRoZSBtYWlkIGRlYWQgdGhhbiBsaXZpbmcgd2l0aCBhIHR5cmFudDsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdoZW4sIGFmdGVyIGEgbGl0dGxlIHdoaWxlLCBEaW9ueXNpdXMgcHV0IGhpcyBjaGlsZHJlbiB0byBkZWF0aCBhbmQgdGhlbiBhc2tlZCBoaW0gaW5zdWx0aW5nbHkgd2hldGhlciBoZSB3YXMgc3RpbGwgb2YgdGhlIHNhbWUgbWluZCBhYm91dCBnaXZpbmcgaGlzIGRhdWdodGVycyBpbiBtYXJyaWFnZSwgYW5zd2VyZWQgdGhhdCBoZSB3YXMgYWZmbGljdGVkIGJ5IHdoYXQgaGFkIGJlZW4gZG9uZSwgYnV0IGRpZCBub3QgcmVwZW50IGhpbSBvZiB3aGF0IGhhZCBiZWVuIHNhaWQuIFN1Y2ggdXR0ZXJhbmNlcyBhcyB0aGVzZSwgdGhlbiwgYmV0b2tlbiBwZXJoYXBzIGEgbGFyZ2VyIGFuZCBtb3JlIGNvbnN1bW1hdGUgdmlydHVlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0cnVlIGlzIGl0IHRoYXQgdGhlIHB1cnBvc2VzIG9mIG1lbiwgdW5sZXNzIHRoZXkgYWNxdWlyZSBmaXJtbmVzcyBhbmQgc3RyZW5ndGggZnJvbSByZWFzb24gYW5kIHBoaWxvc29waHkgZm9yIHRoZSBhY3Rpdml0aWVzIG9mIGxpZmUsIGFyZSB1bnNldHRsZWQgYW5kIGVhc2lseSBjYXJyaWVkIGF3YXkgYnkgY2FzdWFsIHByYWlzZSBhbmQgYmxhbWUsIGJlaW5nIGZvcmNlZCBvdXQgb2YgdGhlaXIgbmF0aXZlIHJlY2tvbmluZ3MuIEZvciBpdCB3b3VsZCBzZWVtIHRoYXQgbm90IG9ubHkgb3VyIGFjdGlvbiBtdXN0IGJlIG5vYmxlIGFuZCBqdXN0LCBidXQgdGhlIGNvbnZpY3Rpb24gYWxzbyBmcm9tIHdoaWNoIG91ciBhY3Rpb24gc3ByaW5ncyBtdXN0IGJlIGFiaWRpbmcgYW5kIHVuY2hhbmdlYWJsZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmluIG9yZGVyIHRoYXQgd2UgbWF5IGJlIHNhdGlzZmllZCB3aXRoIHdoYXQgd2UgYXJlIGFib3V0IHRvIGRvLCBhbmQgdGhhdCBtZXJlIHdlYWtuZXNzIG1heSBub3QgbWFrZSB1cyBkZWplY3RlZCBvdmVyIGFjdGlvbnMgd2hpY2ggaGF2ZSBvbmNlIGJlZW4gYWNjb21wbGlzaGVkLCB3aGVuIHRoZSBmYWlyIHZpc2lvbiBvZiB0aGUgR29vZCBmYWRlcyBhd2F5OyBqdXN0IGFzIGdsdXR0b25zIHdobyBkZXZvdXIgY2xveWluZyB2aWFuZHMgd2l0aCB0aGUga2VlbmVzdCBhcHBldGl0ZSBhcmUgdmVyeSBzb29uIHNhdGVkIGFuZCB0aGVuIGRpc2d1c3RlZCB3aXRoIHRoZW0uIEZvciByZXBlbnRhbmNlIG1ha2VzIGV2ZW4gdGhlIG5vYmxlIGFjdGlvbiBiYXNlOyB3aGVyZWFzIHRoZSBjaG9pY2Ugd2hpY2ggc3ByaW5ncyBmcm9tIGEgd2lzZSBhbmQgdW5kZXJzdGFuZGluZyBjYWxjdWxhdGlvbiBkb2VzIG5vdCBjaGFuZ2UsIGV2ZW4gdGhvdWdoIGl0cyByZXN1bHRzIGFyZSB1bnN1Y2Nlc3NmdWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBQaG9jaW9uIHRoZSBBdGhlbmlhbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhvY2lvbjwvdGl0bGU+LCB4eGlpaS4gNC48L25vdGU+IGFmdGVyIGhhdmluZyBvcHBvc2VkIHRoZSBhY3Rpdml0aWVzIG9mIExlb3N0aGVuZXMsIHdoZW4gTGVvc3RoZW5lcyB3YXMgdGhvdWdodCB0byBiZSBzdWNjZXNzZnVsIGFuZCB0aGUgQXRoZW5pYW5zIHdlcmUgc2VlbiBzYWNyaWZpY2luZyBhbmQgZXh1bHRpbmcgb3ZlciB0aGUgdmljdG9yeSw8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaG9jaW9uPC90aXRsZT4sIHh4aWlpLiA0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+V29uIGJ5IHRoZSBhbGxpZWQgR3JlZWtzIHVuZGVyIExlb3N0aGVuZXMgb3ZlciBBbnRpcGF0ZXIgb2YgTWFjZWRvbmlhLCBpbiAzMjMgQi5DLiBUaGUgdmljdG9yeSB3YXMgc29vbiBmb2xsb3dlZCBieSB0aGUgZGVmZWF0IG9mIHRoZSBHcmVla3MgYXQgQ3Jhbm5vbi48L25vdGU+IHNhaWQgaGUgY291bGQgaGF2ZSB3aXNoZWQgdGhhdCB0aGUgYWNoaWV2ZW1lbnQgd2VyZSBoaXMgb3duLCBidXQgd2FzIGdsYWQgdGhhdCBoZSBjb3Vuc2VsbGVkIGFzIGhlIGRpZC4gQW5kIHdpdGggbW9yZSBmb3JjZSBBcmlzdGlkZXMgdGhlIExvY3JpYW4sIG9uZSBvZiBQbGF0bydzIGNvbXBhbmlvbnMsIHdoZW4gRGlvbnlzaXVzIHRoZSBFbGRlciBhc2tlZCBoaW0gZm9yIG9uZSBvZiBoaXMgZGF1Z2h0ZXJzIGluIG1hcnJpYWdlLCBzYWlkIGhlIHdvdWxkIGJlIG1vcmUgcGxlYXNlZCB0byBzZWUgdGhlIG1haWQgZGVhZCB0aGFuIGxpdmluZyB3aXRoIGEgdHlyYW50OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuLCBhZnRlciBhIGxpdHRsZSB3aGlsZSwgRGlvbnlzaXVzIHB1dCBoaXMgY2hpbGRyZW4gdG8gZGVhdGggYW5kIHRoZW4gYXNrZWQgaGltIGluc3VsdGluZ2x5IHdoZXRoZXIgaGUgd2FzIHN0aWxsIG9mIHRoZSBzYW1lIG1pbmQgYWJvdXQgZ2l2aW5nIGhpcyBkYXVnaHRlcnMgaW4gbWFycmlhZ2UsIGFuc3dlcmVkIHRoYXQgaGUgd2FzIGFmZmxpY3RlZCBieSB3aGF0IGhhZCBiZWVuIGRvbmUsIGJ1dCBkaWQgbm90IHJlcGVudCBoaW0gb2Ygd2hhdCBoYWQgYmVlbiBzYWlkLiBTdWNoIHV0dGVyYW5jZXMgYXMgdGhlc2UsIHRoZW4sIGJldG9rZW4gcGVyaGFwcyBhIGxhcmdlciBhbmQgbW9yZSBjb25zdW1tYXRlIHZpcnR1ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGdyaWVmIG9mIFRpbW9sZW9uIG92ZXIgd2hhdCBoYWQgYmVlbiBkb25lLCB3aGV0aGVyIGl0IHdhcyBkdWUgdG8gcGl0eSBmb3IgaGlzIGRlYWQgYnJvdGhlciBvciB0byByZXZlcmVuY2UgZm9yIGhpcyBtb3RoZXIsIHNvIHNoYXR0ZXJlZCBhbmQgY29uZm91bmRlZCBoaXMgbWVudGFsIHBvd2VycyB0aGF0IGFsbW9zdCB0d2VudHkgeWVhcnMgcGFzc2VkIHdpdGhvdXQgaGlzIHNldHRpbmcgaGlzIGhhbmQgdG8gYSBzaW5nbGUgY29uc3BpY3VvdXMgb3IgcHVibGljIGVudGVycHJpc2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGhlIGhhZCBiZWVuIG5vbWluYXRlZCBnZW5lcmFsLCBhbmQgdGhlIHBlb3BsZSBoYWQgcmVhZGlseSBhcHByb3ZlZCBvZiBpdCBhbmQgZ2l2ZW4gaGltIHRoZWlyIHZvdGVzLCBUZWxlY2xlaWRlcywgd2hvIHdhcyBhdCB0aGF0IHRpbWUgdGhlIGZvcmVtb3N0IG1hbiBpbiB0aGUgY2l0eSBmb3IgcmVwdXRhdGlvbiBhbmQgaW5mbHVlbmNlLCByb3NlIHVwIGFuZCBleGhvcnRlZCBUaW1vbGVvbiB0byBiZSBhIG5vYmxlIGFuZCBicmF2ZSBtYW4gaW4gaGlzIGVudGVycHJpc2VzLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciBpZiw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvdSBjb250ZW5kZXN0IHN1Y2Nlc3NmdWxseSwgd2Ugc2hhbGwgdGhpbmsgb2YgdGhlZSBhcyBhIHR5cmFubmljaWRlOyBidXQgaWYgcG9vcmx5LCBhcyBhIGZyYXRyaWNpZGUuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGdyaWVmIG9mIFRpbW9sZW9uIG92ZXIgd2hhdCBoYWQgYmVlbiBkb25lLCB3aGV0aGVyIGl0IHdhcyBkdWUgdG8gcGl0eSBmb3IgaGlzIGRlYWQgYnJvdGhlciBvciB0byByZXZlcmVuY2UgZm9yIGhpcyBtb3RoZXIsIHNvIHNoYXR0ZXJlZCBhbmQgY29uZm91bmRlZCBoaXMgbWVudGFsIHBvd2VycyB0aGF0IGFsbW9zdCB0d2VudHkgeWVhcnMgcGFzc2VkIHdpdGhvdXQgaGlzIHNldHRpbmcgaGlzIGhhbmQgdG8gYSBzaW5nbGUgY29uc3BpY3VvdXMgb3IgcHVibGljIGVudGVycHJpc2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGhlIGhhZCBiZWVuIG5vbWluYXRlZCBnZW5lcmFsLCBhbmQgdGhlIHBlb3BsZSBoYWQgcmVhZGlseSBhcHByb3ZlZCBvZiBpdCBhbmQgZ2l2ZW4gaGltIHRoZWlyIHZvdGVzLCBUZWxlY2xlaWRlcywgd2hvIHdhcyBhdCB0aGF0IHRpbWUgdGhlIGZvcmVtb3N0IG1hbiBpbiB0aGUgY2l0eSBmb3IgcmVwdXRhdGlvbiBhbmQgaW5mbHVlbmNlLCByb3NlIHVwIGFuZCBleGhvcnRlZCBUaW1vbGVvbiB0byBiZSBhIG5vYmxlIGFuZCBicmF2ZSBtYW4gaW4gaGlzIGVudGVycHJpc2VzLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIGlmLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRob3UgY29udGVuZGVzdCBzdWNjZXNzZnVsbHksIHdlIHNoYWxsIHRoaW5rIG9mIHRoZWUgYXMgYSB0eXJhbm5pY2lkZTsgYnV0IGlmIHBvb3JseSwgYXMgYSBmcmF0cmljaWRlLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoaWxlIFRpbW9sZW9uIHdhcyBnZXR0aW5nIHJlYWR5IGZvciBoaXMgdm95YWdlIGFuZCBjb2xsZWN0aW5nIHNvbGRpZXJzLCBhIGxldHRlciB3YXMgYnJvdWdodCB0byB0aGUgQ29yaW50aGlhbnMgZnJvbSBIaWNldGFzIHdoaWNoIGRpc2Nsb3NlZCBoaXMgdHJlYWNoZXJvdXMgY2hhbmdlIG9mIHNpZGVzLiBGb3IgYXMgc29vbiBhcyBoZSBoYWQgc2VudCBvdXQgdGhlIGVtYmFzc3ksIGhlIG9wZW5seSBhdHRhY2hlZCBoaW1zZWxmIHRvIHRoZSBDYXJ0aGFnaW5pYW5zIGFuZCBhY3RlZCB3aXRoIHRoZW0gaW4gb3JkZXIgdG8gZXhwZWwgRGlvbnlzaXVzIGZyb20gU3lyYWN1c2UgYW5kIGJlY29tZSBpdHMgdHlyYW50IGhpbXNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmZWFyaW5nIGxlc3QgaGlzIG9wcG9ydHVuaXRpZXMgZm9yIGFjdGlvbiBzaG91bGQgZXNjYXBlIGhpbSBpZiBhIGdlbmVyYWwgYW5kIGFuIGFybXkgY2FtZSBmcm9tIENvcmludGggaW4gYWR2YW5jZSwgaGUgc2VudCBhIGxldHRlciB0byB0aGUgQ29yaW50aGlhbnMgdGVsbGluZyB0aGVtIHRoYXQgdGhlcmUgd2FzIG5vIG5lZWQgb2YgdGhlaXIgcHV0dGluZyB0aGVtc2VsdmVzIHRvIHRoZSB0cm91YmxlIGFuZCBleHBlbnNlIG9mIGEgdm95YWdlIHRvIFNpY2lseSB3aXRoIGFsbCBpdHMgcGVyaWxzLCBlc3BlY2lhbGx5IHNpbmNlIHRoZSBDYXJ0aGFnaW5pYW5zLCB3aXRoIHdob20gdGhlaXIgZGVsYXkgaGFkIGZvcmNlZCBoaW0gdG8gbWFrZSBhbiBhbGxpYW5jZSBhZ2FpbnN0IHRoZSB0eXJhbnQsIGZvcmJhZGUgdGhlaXIgZXhwZWRpdGlvbiBhbmQgd2VyZSBvbiB0aGUgd2F0Y2ggZm9yIGl0IHdpdGggYSBsYXJnZSBmbGVldC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGlzIGxldHRlciBoYWQgYmVlbiByZWFkIHB1YmxpY2x5IGlmIGFueSBvZiB0aGUgQ29yaW50aGlhbnMgaGFkIGJlZm9yZSBiZWVuIGx1a2V3YXJtIHRvd2FyZHMgdGhlIGV4cGVkaXRpb24sIHRoZWlyIHdyYXRoIGFnYWluc3QgSGljZXRhcyBub3cgaW5jaXRlZCB0aGVtIGFsbCwgc28gdGhhdCB0aGV5IGVhZ2VybHkgam9pbmVkIGluIHN1cHBseWluZyBUaW1vbGVvbiBhbmQgaGVscGluZyBoaW0gZ2V0IHJlYWR5IGZvciBoaXMgdm95YWdlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSBUaW1vbGVvbiB3YXMgZ2V0dGluZyByZWFkeSBmb3IgaGlzIHZveWFnZSBhbmQgY29sbGVjdGluZyBzb2xkaWVycywgYSBsZXR0ZXIgd2FzIGJyb3VnaHQgdG8gdGhlIENvcmludGhpYW5zIGZyb20gSGljZXRhcyB3aGljaCBkaXNjbG9zZWQgaGlzIHRyZWFjaGVyb3VzIGNoYW5nZSBvZiBzaWRlcy4gRm9yIGFzIHNvb24gYXMgaGUgaGFkIHNlbnQgb3V0IHRoZSBlbWJhc3N5LCBoZSBvcGVubHkgYXR0YWNoZWQgaGltc2VsZiB0byB0aGUgQ2FydGhhZ2luaWFucyBhbmQgYWN0ZWQgd2l0aCB0aGVtIGluIG9yZGVyIHRvIGV4cGVsIERpb255c2l1cyBmcm9tIFN5cmFjdXNlIGFuZCBiZWNvbWUgaXRzIHR5cmFudCBoaW1zZWxmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmZWFyaW5nIGxlc3QgaGlzIG9wcG9ydHVuaXRpZXMgZm9yIGFjdGlvbiBzaG91bGQgZXNjYXBlIGhpbSBpZiBhIGdlbmVyYWwgYW5kIGFuIGFybXkgY2FtZSBmcm9tIENvcmludGggaW4gYWR2YW5jZSwgaGUgc2VudCBhIGxldHRlciB0byB0aGUgQ29yaW50aGlhbnMgdGVsbGluZyB0aGVtIHRoYXQgdGhlcmUgd2FzIG5vIG5lZWQgb2YgdGhlaXIgcHV0dGluZyB0aGVtc2VsdmVzIHRvIHRoZSB0cm91YmxlIGFuZCBleHBlbnNlIG9mIGEgdm95YWdlIHRvIFNpY2lseSB3aXRoIGFsbCBpdHMgcGVyaWxzLCBlc3BlY2lhbGx5IHNpbmNlIHRoZSBDYXJ0aGFnaW5pYW5zLCB3aXRoIHdob20gdGhlaXIgZGVsYXkgaGFkIGZvcmNlZCBoaW0gdG8gbWFrZSBhbiBhbGxpYW5jZSBhZ2FpbnN0IHRoZSB0eXJhbnQsIGZvcmJhZGUgdGhlaXIgZXhwZWRpdGlvbiBhbmQgd2VyZSBvbiB0aGUgd2F0Y2ggZm9yIGl0IHdpdGggYSBsYXJnZSBmbGVldC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhpcyBsZXR0ZXIgaGFkIGJlZW4gcmVhZCBwdWJsaWNseSBpZiBhbnkgb2YgdGhlIENvcmludGhpYW5zIGhhZCBiZWZvcmUgYmVlbiBsdWtld2FybSB0b3dhcmRzIHRoZSBleHBlZGl0aW9uLCB0aGVpciB3cmF0aCBhZ2FpbnN0IEhpY2V0YXMgbm93IGluY2l0ZWQgdGhlbSBhbGwsIHNvIHRoYXQgdGhleSBlYWdlcmx5IGpvaW5lZCBpbiBzdXBwbHlpbmcgVGltb2xlb24gYW5kIGhlbHBpbmcgaGltIGdldCByZWFkeSBmb3IgaGlzIHZveWFnZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBmbGVldCB3YXMgcmVhZHksIGFuZCB0aGUgc29sZGllcnMgcHJvdmlkZWQgd2l0aCB3aGF0IHRoZXkgbmVlZGVkLCB0aGUgcHJpZXN0ZXNzZXMgb2YgUGVyc2VwaG9uZSBmYW5jaWVkIHRoZXkgc2F3IGluIHRoZWlyIGRyZWFtcyB0aGF0IGdvZGRlc3MgYW5kIGhlciBtb3RoZXIgbWFraW5nIHJlYWR5IGZvciBhIGpvdXJuZXksIGFuZCBoZWFyZCB0aGVtIHNheSB0aGF0IHRoZXkgd2VyZSBnb2luZyB0byBzYWlsIHdpdGggVGltb2xlb24gdG8gU2ljaWx5LiBUaGVyZWZvcmUgdGhlIENvcmludGhpYW5zIGVxdWlwcGVkIGEgc2FjcmVkIHRyaXJlbWUgYmVzaWRlcywgYW5kIG5hbWVkIGl0IGFmdGVyIHRoZSB0d28gZ29kZGVzc2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgVGltb2xlb24gaGltc2VsZiBqb3VybmV5ZWQgdG8gRGVscGhpIGFuZCBzYWNyaWZpY2VkIHRvIHRoZSBnb2QsIGFuZCBhcyBoZSBkZXNjZW5kZWQgaW50byB0aGUgcGxhY2Ugb2YgdGhlIG9yYWNsZSwgaGUgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyBzaWduLiBGcm9tIHRoZSB2b3RpdmUgb2ZmZXJpbmdzIHN1c3BlbmRlZCB0aGVyZSBhIGZpbGxldCB3aGljaCBoYWQgY3Jvd25zIGFuZCBmaWd1cmVzIG9mIFZpY3RvcnkgZW1icm9pZGVyZWQgdXBvbiBpdCBzbGlwcGVkIGF3YXkgYW5kIGZlbGwgZGlyZWN0bHkgdXBvbiB0aGUgaGVhZCBvZiBUaW1vbGVvbiwgc28gdGhhdCBpdCBhcHBlYXJlZCBhcyBpZiBoZSB3ZXJlIGJlaW5nIGNyb3duZWQgYnkgdGhlIGdvZCBhbmQgdGh1cyBzZW50IGZvcnRoIHVwb24gaGlzIHVuZGVydGFraW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBmbGVldCB3YXMgcmVhZHksIGFuZCB0aGUgc29sZGllcnMgcHJvdmlkZWQgd2l0aCB3aGF0IHRoZXkgbmVlZGVkLCB0aGUgcHJpZXN0ZXNzZXMgb2YgUGVyc2VwaG9uZSBmYW5jaWVkIHRoZXkgc2F3IGluIHRoZWlyIGRyZWFtcyB0aGF0IGdvZGRlc3MgYW5kIGhlciBtb3RoZXIgbWFraW5nIHJlYWR5IGZvciBhIGpvdXJuZXksIGFuZCBoZWFyZCB0aGVtIHNheSB0aGF0IHRoZXkgd2VyZSBnb2luZyB0byBzYWlsIHdpdGggVGltb2xlb24gdG8gU2ljaWx5LiBUaGVyZWZvcmUgdGhlIENvcmludGhpYW5zIGVxdWlwcGVkIGEgc2FjcmVkIHRyaXJlbWUgYmVzaWRlcywgYW5kIG5hbWVkIGl0IGFmdGVyIHRoZSB0d28gZ29kZGVzc2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBUaW1vbGVvbiBoaW1zZWxmIGpvdXJuZXllZCB0byBEZWxwaGkgYW5kIHNhY3JpZmljZWQgdG8gdGhlIGdvZCwgYW5kIGFzIGhlIGRlc2NlbmRlZCBpbnRvIHRoZSBwbGFjZSBvZiB0aGUgb3JhY2xlLCBoZSByZWNlaXZlZCB0aGUgZm9sbG93aW5nIHNpZ24uIEZyb20gdGhlIHZvdGl2ZSBvZmZlcmluZ3Mgc3VzcGVuZGVkIHRoZXJlIGEgZmlsbGV0IHdoaWNoIGhhZCBjcm93bnMgYW5kIGZpZ3VyZXMgb2YgVmljdG9yeSBlbWJyb2lkZXJlZCB1cG9uIGl0IHNsaXBwZWQgYXdheSBhbmQgZmVsbCBkaXJlY3RseSB1cG9uIHRoZSBoZWFkIG9mIFRpbW9sZW9uLCBzbyB0aGF0IGl0IGFwcGVhcmVkIGFzIGlmIGhlIHdlcmUgYmVpbmcgY3Jvd25lZCBieSB0aGUgZ29kIGFuZCB0aHVzIHNlbnQgZm9ydGggdXBvbiBoaXMgdW5kZXJ0YWtpbmcuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIHdpdGggc2V2ZW4gQ29yaW50aGlhbiBzaGlwcywgYW5kIHR3byBmcm9tIENvcmN5cmEsIGFuZCBhIHRlbnRoIHdoaWNoIHRoZSBMZXVjYWRpYW5zIGZ1cm5pc2hlZCwgaGUgc2V0IHNhaWwuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzQ0IEIuQy48L25vdGU+IEFuZCBhdCBuaWdodCwgYWZ0ZXIgaGUgaGFkIGVudGVyZWQgdGhlIG9wZW4gc2VhIGFuZCB3YXMgZW5qb3lpbmcgYSBmYXZvdXJpbmcgd2luZCwgdGhlIGhlYXZlbnMgc2VlbWVkIHRvIGJ1cnN0IG9wZW4gb24gYSBzdWRkZW4gYWJvdmUgaGlzIHNoaXAsIGFuZCB0byBwb3VyIGZvcnRoIGFuIGFidW5kYW50IGFuZCBjb25zcGljdW91cyBmaXJlLiBGcm9tIHRoaXMgYSB0b3JjaCBsaWZ0ZWQgaXRzZWxmIG9uIGhpZ2gsIGxpa2UgdGhvc2Ugd2hpY2ggdGhlIG15c3RpY3MgYmVhciwgYW5kIHJ1bm5pbmcgYWxvbmcgd2l0aCB0aGVtIG9uIHRoZWlyIGNvdXJzZSwgZGFydGVkIGRvd24gdXBvbiBwcmVjaXNlbHkgdGhhdCBwYXJ0IG9mIEl0YWx5IHRvd2FyZHMgd2hpY2ggdGhlIHBpbG90cyB3ZXJlIHN0ZWVyaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc29vdGhzYXllcnMgZGVjbGFyZWQgdGhhdCB0aGUgYXBwYXJpdGlvbiBib3JlIHdpdG5lc3MgdG8gdGhlIGRyZWFtcyBvZiB0aGUgcHJpZXN0ZXNzZXMsIGFuZCB0aGF0IHRoZSBnb2RkZXNzZXMgd2VyZSB0YWtpbmcgcGFydCBpbiB0aGUgZXhwZWRpdGlvbiBhbmQgc2hvd2luZyBmb3J0aCB0aGUgbGlnaHQgZnJvbSBoZWF2ZW47IGZvciBTaWNpbHksIHRoZXkgc2FpZCwgd2FzIHNhY3JlZCB0byBQZXJzZXBob25lLCBzaW5jZSBteXRob2xvZ3kgbWFrZXMgaXQgdGhlIHNjZW5lIG9mIGhlciByYXBlOyBhbmQgdGhlIGlzbGFuZCB3YXMgZ2l2ZW4gdG8gaGVyIGFzIGEgd2VkZGluZyBwcmVzZW50LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIHdpdGggc2V2ZW4gQ29yaW50aGlhbiBzaGlwcywgYW5kIHR3byBmcm9tIENvcmN5cmEsIGFuZCBhIHRlbnRoIHdoaWNoIHRoZSBMZXVjYWRpYW5zIGZ1cm5pc2hlZCwgaGUgc2V0IHNhaWwuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNDQgQi5DLjwvbm90ZT4gQW5kIGF0IG5pZ2h0LCBhZnRlciBoZSBoYWQgZW50ZXJlZCB0aGUgb3BlbiBzZWEgYW5kIHdhcyBlbmpveWluZyBhIGZhdm91cmluZyB3aW5kLCB0aGUgaGVhdmVucyBzZWVtZWQgdG8gYnVyc3Qgb3BlbiBvbiBhIHN1ZGRlbiBhYm92ZSBoaXMgc2hpcCwgYW5kIHRvIHBvdXIgZm9ydGggYW4gYWJ1bmRhbnQgYW5kIGNvbnNwaWN1b3VzIGZpcmUuIEZyb20gdGhpcyBhIHRvcmNoIGxpZnRlZCBpdHNlbGYgb24gaGlnaCwgbGlrZSB0aG9zZSB3aGljaCB0aGUgbXlzdGljcyBiZWFyLCBhbmQgcnVubmluZyBhbG9uZyB3aXRoIHRoZW0gb24gdGhlaXIgY291cnNlLCBkYXJ0ZWQgZG93biB1cG9uIHByZWNpc2VseSB0aGF0IHBhcnQgb2YgSXRhbHkgdG93YXJkcyB3aGljaCB0aGUgcGlsb3RzIHdlcmUgc3RlZXJpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzb290aHNheWVycyBkZWNsYXJlZCB0aGF0IHRoZSBhcHBhcml0aW9uIGJvcmUgd2l0bmVzcyB0byB0aGUgZHJlYW1zIG9mIHRoZSBwcmllc3Rlc3NlcywgYW5kIHRoYXQgdGhlIGdvZGRlc3NlcyB3ZXJlIHRha2luZyBwYXJ0IGluIHRoZSBleHBlZGl0aW9uIGFuZCBzaG93aW5nIGZvcnRoIHRoZSBsaWdodCBmcm9tIGhlYXZlbjsgZm9yIFNpY2lseSwgdGhleSBzYWlkLCB3YXMgc2FjcmVkIHRvIFBlcnNlcGhvbmUsIHNpbmNlIG15dGhvbG9neSBtYWtlcyBpdCB0aGUgc2NlbmUgb2YgaGVyIHJhcGU7IGFuZCB0aGUgaXNsYW5kIHdhcyBnaXZlbiB0byBoZXIgYXMgYSB3ZWRkaW5nIHByZXNlbnQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgd2VyZSB0aGUgc2lnbnMgZnJvbSBIZWF2ZW4gd2hpY2ggZW5jb3VyYWdlZCB0aGUgZXhwZWRpdGlvbjsgYW5kIG1ha2luZyBoYXN0ZSwgc2luY2UgdGhleSB3ZXJlIGNyb3NzaW5nIHRoZSBvcGVuIHNlYSwgdGhleSBza2lydGVkIHRoZSBjb2FzdCBvZiBJdGFseS4gQnV0IHRoZSB0aWRpbmdzIGZyb20gU2ljaWx5IG11Y2ggcGVycGxleGVkIFRpbW9sZW9uIGFuZCBkaXNoZWFydGVuZWQgaGlzIHNvbGRpZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSGljZXRhcywgYWZ0ZXIgZGVmZWF0aW5nIERpb255c2l1cyBpbiBiYXR0bGUgYW5kIG9jY3VweWluZyBtb3N0IG9mIHRoZSBvdXRseWluZyBwb3J0aW9ucyBvZiBTeXJhY3VzZSwgaGFkIHNodXQgdGhlIHR5cmFudCB1cCBpbiB0aGUgYWNyb3BvbGlzIGFuZCB3aGF0IHdhcyBjYWxsZWQgVGhlIElzbGFuZCwgd2hlcmUgaGUgd2FzIGhpbXNlbGYgaGVscGluZyB0byBiZXNpZWdlIGFuZCB3YWxsIGhpbSBpbiwgd2hpbGUgaGUgb3JkZXJlZCB0aGUgQ2FydGhhZ2luaWFucyB0byBzZWUgdG8gaXQgdGhhdCBUaW1vbGVvbiBzaG91bGQgbm90IGxhbmQgaW4gU2ljaWx5LCBidXQgdGhhdCBoZSBhbmQgaGlzIGZvcmNlcyBzaG91bGQgYmUgcmVwdWxzZWQsIGFuZCB0aGF0IHRoZXkgdGhlbXNlbHZlcywgYXQgdGhlaXIgbGVpc3VyZSwgc2hvdWxkIGRpdmlkZSB0aGUgaXNsYW5kIHdpdGggb25lIGFub3RoZXIuIFNvIHRoZSBDYXJ0aGFnaW5pYW5zIHNlbnQgdHdlbnR5IHRyaXJlbWVzIHRvIFJoZWdpdW0sIG9uIGJvYXJkIG9mIHdoaWNoIHdlcmUgZW52b3lzIGZyb20gSGljZXRhcyB0byBUaW1vbGVvbiBjYXJyeWluZyBwcm9wb3NhbHMgd2hpY2ggY29uZm9ybWVkIHRvIGhpcyBwcm9jZWVkaW5ncy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXkgd2VyZSBzcGVjaW91cyBhbmQgbWlzbGVhZGluZyBzdWdnZXN0aW9ucyBjb3ZlcmluZyBiYXNlIGRlc2lnbnMsIHRoZSBlbnZveXMgZGVtYW5kaW5nIHRoYXQgVGltb2xlb24gaGltc2VsZiwgaWYgaGUgd2lzaGVkLCBzaG91bGQgY29tZSB0byBIaWNldGFzIGFzIGNvdW5zZWxsb3IgYW5kIHBhcnRuZXIgaW4gYWxsIGhpcyBzdWNjZXNzZXMsIGJ1dCB0aGF0IGhlIHNob3VsZCBzZW5kIGhpcyBzaGlwcyBhbmQgaGlzIHNvbGRpZXJzIGJhY2sgdG8gQ29yaW50aCwgc2luY2UsIGFzIHRoZXkgY2xhaW1lZCwgdGhlIHdhciB3YXMgYWxtb3N0IGZpbmlzaGVkLCBhbmQgdGhlIENhcnRoYWdpbmlhbnMgd2VyZSByZWFkeSB0byBwcmV2ZW50IHRoZWlyIHBhc3NhZ2UgYW5kIHRvIGZpZ2h0IHRoZW0gaWYgdGhleSB0cmllZCB0byBmb3JjZSBvbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwgdGhlIENvcmludGhpYW5zLCBhZnRlciBwdXR0aW5nIGluIGF0IFJoZWdpdW0sIG1ldCB0aGVzZSBlbnZveXMsIGFuZCBzYXcgdGhlIENhcnRoYWdpbmlhbnMgcmlkaW5nIGF0IGFuY2hvciBub3QgZmFyIG9mZiB0aGV5IHdlcmUgaW5kaWduYW50IGF0IHRoZSBpbnN1bHQgcHV0IHVwb24gdGhlbSwgYW5kIHdlcmUgYWxsIG9mIHRoZW0gZmlsbGVkIHdpdGggcmFnZSBhdCBIaWNldGFzIGFuZCBmZWFyIGZvciB0aGUgU2ljaWxpYW4gR3JlZWtzLCB3aG8sIGFzIHRoZXkgY2xlYXJseSBzYXcsIHdlcmUgbGVmdCB0byBiZSBhIHByaXplIGFuZCByZXdhcmQsIHRvIEhpY2V0YXMgb24gdGhlIG9uZSBoYW5kIGZvciBoaXMgdHJlYWNoZXJ5LCBhbmQgdG8gdGhlIENhcnRoYWdpbmlhbnMgb24gdGhlIG90aGVyIGZvciBtYWtpbmcgaGltIHR5cmFudC4gTW9yZW92ZXIsIGl0IHNlZW1lZCBpbXBvc3NpYmxlIHRvIG92ZXJjb21lIGJvdGggdGhlIHNoaXBzIG9mIHRoZSBCYXJiYXJpYW5zIGNvbmZyb250aW5nIHRoZW0gdGhlcmUgd2l0aCB0d2ljZSB0aGVpciBudW1iZXJzLCBhbmQgdGhlIGZvcmNlIHVuZGVyIEhpY2V0YXMgaW4gU3lyYWN1c2UsIHdoZXJlIHRoZXkgaGFkIGNvbWUgdG8gdGFrZSBjb21tYW5kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoLCB0aGVuLCB3ZXJlIHRoZSBzaWducyBmcm9tIEhlYXZlbiB3aGljaCBlbmNvdXJhZ2VkIHRoZSBleHBlZGl0aW9uOyBhbmQgbWFraW5nIGhhc3RlLCBzaW5jZSB0aGV5IHdlcmUgY3Jvc3NpbmcgdGhlIG9wZW4gc2VhLCB0aGV5IHNraXJ0ZWQgdGhlIGNvYXN0IG9mIEl0YWx5LiBCdXQgdGhlIHRpZGluZ3MgZnJvbSBTaWNpbHkgbXVjaCBwZXJwbGV4ZWQgVGltb2xlb24gYW5kIGRpc2hlYXJ0ZW5lZCBoaXMgc29sZGllcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBIaWNldGFzLCBhZnRlciBkZWZlYXRpbmcgRGlvbnlzaXVzIGluIGJhdHRsZSBhbmQgb2NjdXB5aW5nIG1vc3Qgb2YgdGhlIG91dGx5aW5nIHBvcnRpb25zIG9mIFN5cmFjdXNlLCBoYWQgc2h1dCB0aGUgdHlyYW50IHVwIGluIHRoZSBhY3JvcG9saXMgYW5kIHdoYXQgd2FzIGNhbGxlZCBUaGUgSXNsYW5kLCB3aGVyZSBoZSB3YXMgaGltc2VsZiBoZWxwaW5nIHRvIGJlc2llZ2UgYW5kIHdhbGwgaGltIGluLCB3aGlsZSBoZSBvcmRlcmVkIHRoZSBDYXJ0aGFnaW5pYW5zIHRvIHNlZSB0byBpdCB0aGF0IFRpbW9sZW9uIHNob3VsZCBub3QgbGFuZCBpbiBTaWNpbHksIGJ1dCB0aGF0IGhlIGFuZCBoaXMgZm9yY2VzIHNob3VsZCBiZSByZXB1bHNlZCwgYW5kIHRoYXQgdGhleSB0aGVtc2VsdmVzLCBhdCB0aGVpciBsZWlzdXJlLCBzaG91bGQgZGl2aWRlIHRoZSBpc2xhbmQgd2l0aCBvbmUgYW5vdGhlci4gU28gdGhlIENhcnRoYWdpbmlhbnMgc2VudCB0d2VudHkgdHJpcmVtZXMgdG8gUmhlZ2l1bSwgb24gYm9hcmQgb2Ygd2hpY2ggd2VyZSBlbnZveXMgZnJvbSBIaWNldGFzIHRvIFRpbW9sZW9uIGNhcnJ5aW5nIHByb3Bvc2FscyB3aGljaCBjb25mb3JtZWQgdG8gaGlzIHByb2NlZWRpbmdzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IHdlcmUgc3BlY2lvdXMgYW5kIG1pc2xlYWRpbmcgc3VnZ2VzdGlvbnMgY292ZXJpbmcgYmFzZSBkZXNpZ25zLCB0aGUgZW52b3lzIGRlbWFuZGluZyB0aGF0IFRpbW9sZW9uIGhpbXNlbGYsIGlmIGhlIHdpc2hlZCwgc2hvdWxkIGNvbWUgdG8gSGljZXRhcyBhcyBjb3Vuc2VsbG9yIGFuZCBwYXJ0bmVyIGluIGFsbCBoaXMgc3VjY2Vzc2VzLCBidXQgdGhhdCBoZSBzaG91bGQgc2VuZCBoaXMgc2hpcHMgYW5kIGhpcyBzb2xkaWVycyBiYWNrIHRvIENvcmludGgsIHNpbmNlLCBhcyB0aGV5IGNsYWltZWQsIHRoZSB3YXIgd2FzIGFsbW9zdCBmaW5pc2hlZCwgYW5kIHRoZSBDYXJ0aGFnaW5pYW5zIHdlcmUgcmVhZHkgdG8gcHJldmVudCB0aGVpciBwYXNzYWdlIGFuZCB0byBmaWdodCB0aGVtIGlmIHRoZXkgdHJpZWQgdG8gZm9yY2Ugb25lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwgdGhlIENvcmludGhpYW5zLCBhZnRlciBwdXR0aW5nIGluIGF0IFJoZWdpdW0sIG1ldCB0aGVzZSBlbnZveXMsIGFuZCBzYXcgdGhlIENhcnRoYWdpbmlhbnMgcmlkaW5nIGF0IGFuY2hvciBub3QgZmFyIG9mZiB0aGV5IHdlcmUgaW5kaWduYW50IGF0IHRoZSBpbnN1bHQgcHV0IHVwb24gdGhlbSwgYW5kIHdlcmUgYWxsIG9mIHRoZW0gZmlsbGVkIHdpdGggcmFnZSBhdCBIaWNldGFzIGFuZCBmZWFyIGZvciB0aGUgU2ljaWxpYW4gR3JlZWtzLCB3aG8sIGFzIHRoZXkgY2xlYXJseSBzYXcsIHdlcmUgbGVmdCB0byBiZSBhIHByaXplIGFuZCByZXdhcmQsIHRvIEhpY2V0YXMgb24gdGhlIG9uZSBoYW5kIGZvciBoaXMgdHJlYWNoZXJ5LCBhbmQgdG8gdGhlIENhcnRoYWdpbmlhbnMgb24gdGhlIG90aGVyIGZvciBtYWtpbmcgaGltIHR5cmFudC4gTW9yZW92ZXIsIGl0IHNlZW1lZCBpbXBvc3NpYmxlIHRvIG92ZXJjb21lIGJvdGggdGhlIHNoaXBzIG9mIHRoZSBCYXJiYXJpYW5zIGNvbmZyb250aW5nIHRoZW0gdGhlcmUgd2l0aCB0d2ljZSB0aGVpciBudW1iZXJzLCBhbmQgdGhlIGZvcmNlIHVuZGVyIEhpY2V0YXMgaW4gU3lyYWN1c2UsIHdoZXJlIHRoZXkgaGFkIGNvbWUgdG8gdGFrZSBjb21tYW5kLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhZnRlciBUaW1vbGVvbiBoYWQgbWV0IHRoZSBlbnZveXMgb2YgSGljZXRhcyBhbmQgdGhlIGNvbW1hbmRlcnMgb2YgdGhlIENhcnRoYWdpbmlhbnMsIGhlIGNhbG1seSBzYWlkIHRoYXQgaGUgd291bGQgb2JleSB0aGVpciBjb21tYW5kcyAoZm9yIHdoYXQgd291bGQgaGUgYWNjb21wbGlzaCBieSByZWZ1c2luZyA/KSwgYnV0IGhlIHdpc2hlZCB0aGF0LCBiZWZvcmUgaGUgd2VudCBhd2F5LCB0aGVpciBwcm9wb3NhbHMgYW5kIGhpcyByZXBseSBzaG91bGQgYmUgbWFkZSBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIHBlb3BsZSBvZiBSaGVnaXVtLCBhIEdyZWVrIGNpdHkgYW5kIGEgZnJpZW5kIG9mIGJvdGggcGFydGllczsgZm9yIHRoaXMgd291bGQgY29uZHVjZSB0byBoaXMgb3duIHNhZmV0eSwgYW5kIHRoZXksIG9uIHRoZWlyIHBhcnQsIHdvdWxkIGFiaWRlIG1vcmUgZmlybWx5IGJ5IHRoZWlyIHByb21pc2VzIHJlZ2FyZGluZyB0aGUgU3lyYWN1c2FucyBpZiB0aGV5IG1hZGUgYSBwZW9wbGUgd2l0bmVzcyB0byB0aGUgYWdyZWVtZW50cyBpbnRvIHdoaWNoIHRoZXkgZW50ZXJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gbWFraW5nIHRoaXMgb3ZlcnR1cmUgdG8gdGhlbSBoZSB3YXMgY29udHJpdmluZyBhIGRlY2VpdCB3aGljaCBzaG91bGQgc2VjdXJlIGhpcyBzYWZlIHBhc3NhZ2UgYWNyb3NzIHRoZSBzdHJhaXQsIGFuZCB0aGUgbGVhZGVycyBvZiB0aGUgUmhlZ2lhbnMgaGVscGVkIGhpbSBjb250cml2ZSBpdCwgc2luY2UgdGhleSB3ZXJlIGFsbCBkZXNpcm91cyB0aGF0IHRoZSBhZmZhaXJzIG9mIHRoZSBTaWNpbGlhbiBHcmVla3Mgc2hvdWxkIGJlIGluIHRoZSBoYW5kcyBvZiB0aGUgQ29yaW50aGlhbnMsIGFuZCBmZWFyZWQgdG8gaGF2ZSB0aGUgQmFyYmFyaWFucyBhcyBuZWlnaGJvdXJzLiBUaGVyZWZvcmUgdGhleSBjb252ZW5lZCBhbiBhc3NlbWJseSBhbmQgY2xvc2VkIHRoZSBnYXRlcywgaW4gb3JkZXIgdGhhdCB0aGUgY2l0aXplbnMgbWlnaHQgbm90IGVuZ2FnZSBpbiBhbnkgb3RoZXIgYnVzaW5lc3M7IHRoZW4gdGhleSBjYW1lIGZvcndhcmQgYW5kIGFkZHJlc3NlZCB0aGUgbXVsdGl0dWRlIGluIGxlbmd0aHkgc3BlZWNoZXMsIG9uZSBoYW5kaW5nIG92ZXIgdG8gYW5vdGhlciB0aGUgc2FtZSB0b3BpYyBhbmQgY29taW5nIHRvIG5vIGNvbmNsdXNpb24sIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBwcm90cmFjdGluZyB0aGUgdGltZSB0byBubyBhcHBhcmVudCBwdXJwb3NlLCB1bnRpbCB0aGUgQ29yaW50aGlhbiB0cmlyZW1lcyBzaG91bGQgaGF2ZSBwdXQgdG8gc2VhLCBhbmQga2VlcGluZyB0aGUgQ2FydGhhZ2luaWFucyBpbiB0aGUgYXNzZW1ibHkgZnJlZSBmcm9tIGFsbCBzdXNwaWNpb24sIHNpbmNlIFRpbW9sZW9uIGFsc28gd2FzIHRoZXJlIGFuZCBsZWQgdGhlbSB0byB0aGluayB0aGF0IGhlIHdhcyBvbiB0aGUgcG9pbnQgb2YgcmlzaW5nIHRvIGFkZHJlc3MgdGhlIHBlb3BsZS4gQnV0IHdoZW4gc29tZSBvbmUgc2VjcmV0bHkgYnJvdWdodCBoaW0gd29yZCB0aGF0IHRoZSBvdGhlciB0cmlyZW1lcyBoYWQgcHV0IHRvIHNlYSwgYW5kIHRoYXQgb25lIG9ubHksIGhpcyBvd24sIGhhZCBiZWVuIGxlZnQgYmVoaW5kIGFuZCB3YXMgd2FpdGluZyBmb3IgaGltLCBoZSBzbGlwcGVkIHRocm91Z2ggdGhlIGNyb3dkIHVubm90aWNlZCwgd2l0aCB0aGUgY29ubml2YW5jZSBvZiB0aGUgUmhlZ2lhbnMgYWJvdXQgdGhlIGJlbWEsIHdlbnQgZG93biB0byB0aGUgc2VhLCBhbmQgc2FpbGVkIG9mZiB3aXRoIGFsbCBzcGVlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZXkgcHV0IGluIGF0IFRhdXJvbWVuaXVtIGluIFNpY2lseSwgd2hpdGhlciB0aGV5IGhhZCBiZWVuIGVhcm5lc3RseSBpbnZpdGVkIHNvbWUgdGltZSBhZ28sIGFuZCB3aGVyZSB0aGV5IHdlcmUgbm93IGtpbmRseSByZWNlaXZlZCBieSBBbmRyb21hY2h1cywgdGhlIG1hc3RlciBhbmQgcnVsZXIgb2YgdGhlIGNpdHkuIEFuZHJvbWFjaHVzIHdhcyBmYXRoZXIgb2YgVGltYWV1cyB0aGUgaGlzdG9yaWFuLCBhbmQgYWZ0ZXIgbWFraW5nIGhpbXNlbGYgYnkgZmFyIHRoZSBtb3N0IHBvd2VyZnVsIG9mIHRoZSBydWxlcnMgaW4gU2ljaWx5IGF0IHRoYXQgdGltZSBub3Qgb25seSBsZWQgaGlzIG93biBjaXRpemVucyBpbiB0aGUgd2F5cyBvZiBsYXcgYW5kIGp1c3RpY2UsIGJ1dCB3YXMgYWxzbyBrbm93biB0byBiZSBhbHdheXMgYXZlcnNlIGFuZCBob3N0aWxlIHRvIHR5cmFudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBhdCB0aGlzIHRpbWUgYWxzbyBoZSBhbGxvd2VkIFRpbW9sZW9uIHRvIG1ha2UgdGhlIGNpdHkgYSBiYXNlIG9mIG9wZXJhdGlvbnMsIGFuZCBwZXJzdWFkZWQgaGlzIGNpdGl6ZW5zIHRvIGpvaW4gdGhlIENvcmludGhpYW5zIGluIHRoZWlyIHN0cnVnZ2xlIHRvIHNldCBTaWNpbHkgZnJlZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYWZ0ZXIgVGltb2xlb24gaGFkIG1ldCB0aGUgZW52b3lzIG9mIEhpY2V0YXMgYW5kIHRoZSBjb21tYW5kZXJzIG9mIHRoZSBDYXJ0aGFnaW5pYW5zLCBoZSBjYWxtbHkgc2FpZCB0aGF0IGhlIHdvdWxkIG9iZXkgdGhlaXIgY29tbWFuZHMgKGZvciB3aGF0IHdvdWxkIGhlIGFjY29tcGxpc2ggYnkgcmVmdXNpbmcgPyksIGJ1dCBoZSB3aXNoZWQgdGhhdCwgYmVmb3JlIGhlIHdlbnQgYXdheSwgdGhlaXIgcHJvcG9zYWxzIGFuZCBoaXMgcmVwbHkgc2hvdWxkIGJlIG1hZGUgaW4gdGhlIHByZXNlbmNlIG9mIHRoZSBwZW9wbGUgb2YgUmhlZ2l1bSwgYSBHcmVlayBjaXR5IGFuZCBhIGZyaWVuZCBvZiBib3RoIHBhcnRpZXM7IGZvciB0aGlzIHdvdWxkIGNvbmR1Y2UgdG8gaGlzIG93biBzYWZldHksIGFuZCB0aGV5LCBvbiB0aGVpciBwYXJ0LCB3b3VsZCBhYmlkZSBtb3JlIGZpcm1seSBieSB0aGVpciBwcm9taXNlcyByZWdhcmRpbmcgdGhlIFN5cmFjdXNhbnMgaWYgdGhleSBtYWRlIGEgcGVvcGxlIHdpdG5lc3MgdG8gdGhlIGFncmVlbWVudHMgaW50byB3aGljaCB0aGV5IGVudGVyZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIG1ha2luZyB0aGlzIG92ZXJ0dXJlIHRvIHRoZW0gaGUgd2FzIGNvbnRyaXZpbmcgYSBkZWNlaXQgd2hpY2ggc2hvdWxkIHNlY3VyZSBoaXMgc2FmZSBwYXNzYWdlIGFjcm9zcyB0aGUgc3RyYWl0LCBhbmQgdGhlIGxlYWRlcnMgb2YgdGhlIFJoZWdpYW5zIGhlbHBlZCBoaW0gY29udHJpdmUgaXQsIHNpbmNlIHRoZXkgd2VyZSBhbGwgZGVzaXJvdXMgdGhhdCB0aGUgYWZmYWlycyBvZiB0aGUgU2ljaWxpYW4gR3JlZWtzIHNob3VsZCBiZSBpbiB0aGUgaGFuZHMgb2YgdGhlIENvcmludGhpYW5zLCBhbmQgZmVhcmVkIHRvIGhhdmUgdGhlIEJhcmJhcmlhbnMgYXMgbmVpZ2hib3Vycy4gVGhlcmVmb3JlIHRoZXkgY29udmVuZWQgYW4gYXNzZW1ibHkgYW5kIGNsb3NlZCB0aGUgZ2F0ZXMsIGluIG9yZGVyIHRoYXQgdGhlIGNpdGl6ZW5zIG1pZ2h0IG5vdCBlbmdhZ2UgaW4gYW55IG90aGVyIGJ1c2luZXNzOyB0aGVuIHRoZXkgY2FtZSBmb3J3YXJkIGFuZCBhZGRyZXNzZWQgdGhlIG11bHRpdHVkZSBpbiBsZW5ndGh5IHNwZWVjaGVzLCBvbmUgaGFuZGluZyBvdmVyIHRvIGFub3RoZXIgdGhlIHNhbWUgdG9waWMgYW5kIGNvbWluZyB0byBubyBjb25jbHVzaW9uLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBwcm90cmFjdGluZyB0aGUgdGltZSB0byBubyBhcHBhcmVudCBwdXJwb3NlLCB1bnRpbCB0aGUgQ29yaW50aGlhbiB0cmlyZW1lcyBzaG91bGQgaGF2ZSBwdXQgdG8gc2VhLCBhbmQga2VlcGluZyB0aGUgQ2FydGhhZ2luaWFucyBpbiB0aGUgYXNzZW1ibHkgZnJlZSBmcm9tIGFsbCBzdXNwaWNpb24sIHNpbmNlIFRpbW9sZW9uIGFsc28gd2FzIHRoZXJlIGFuZCBsZWQgdGhlbSB0byB0aGluayB0aGF0IGhlIHdhcyBvbiB0aGUgcG9pbnQgb2YgcmlzaW5nIHRvIGFkZHJlc3MgdGhlIHBlb3BsZS4gQnV0IHdoZW4gc29tZSBvbmUgc2VjcmV0bHkgYnJvdWdodCBoaW0gd29yZCB0aGF0IHRoZSBvdGhlciB0cmlyZW1lcyBoYWQgcHV0IHRvIHNlYSwgYW5kIHRoYXQgb25lIG9ubHksIGhpcyBvd24sIGhhZCBiZWVuIGxlZnQgYmVoaW5kIGFuZCB3YXMgd2FpdGluZyBmb3IgaGltLCBoZSBzbGlwcGVkIHRocm91Z2ggdGhlIGNyb3dkIHVubm90aWNlZCwgd2l0aCB0aGUgY29ubml2YW5jZSBvZiB0aGUgUmhlZ2lhbnMgYWJvdXQgdGhlIGJlbWEsIHdlbnQgZG93biB0byB0aGUgc2VhLCBhbmQgc2FpbGVkIG9mZiB3aXRoIGFsbCBzcGVlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IHB1dCBpbiBhdCBUYXVyb21lbml1bSBpbiBTaWNpbHksIHdoaXRoZXIgdGhleSBoYWQgYmVlbiBlYXJuZXN0bHkgaW52aXRlZCBzb21lIHRpbWUgYWdvLCBhbmQgd2hlcmUgdGhleSB3ZXJlIG5vdyBraW5kbHkgcmVjZWl2ZWQgYnkgQW5kcm9tYWNodXMsIHRoZSBtYXN0ZXIgYW5kIHJ1bGVyIG9mIHRoZSBjaXR5LiBBbmRyb21hY2h1cyB3YXMgZmF0aGVyIG9mIFRpbWFldXMgdGhlIGhpc3RvcmlhbiwgYW5kIGFmdGVyIG1ha2luZyBoaW1zZWxmIGJ5IGZhciB0aGUgbW9zdCBwb3dlcmZ1bCBvZiB0aGUgcnVsZXJzIGluIFNpY2lseSBhdCB0aGF0IHRpbWUgbm90IG9ubHkgbGVkIGhpcyBvd24gY2l0aXplbnMgaW4gdGhlIHdheXMgb2YgbGF3IGFuZCBqdXN0aWNlLCBidXQgd2FzIGFsc28ga25vd24gdG8gYmUgYWx3YXlzIGF2ZXJzZSBhbmQgaG9zdGlsZSB0byB0eXJhbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBhdCB0aGlzIHRpbWUgYWxzbyBoZSBhbGxvd2VkIFRpbW9sZW9uIHRvIG1ha2UgdGhlIGNpdHkgYSBiYXNlIG9mIG9wZXJhdGlvbnMsIGFuZCBwZXJzdWFkZWQgaGlzIGNpdGl6ZW5zIHRvIGpvaW4gdGhlIENvcmludGhpYW5zIGluIHRoZWlyIHN0cnVnZ2xlIHRvIHNldCBTaWNpbHkgZnJlZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBDYXJ0aGFnaW5pYW5zIGluIFJoZWdpdW0sIGFmdGVyIFRpbW9sZW9uIGhhZCBwdXQgdG8gc2VhIGFuZCB0aGUgYXNzZW1ibHkgaGFkIGJlZW4gZGlzc29sdmVkLCB3ZXJlIGluZGlnbmFudCwgYW5kIGluIHRoZWlyIGRpc2NvbWZpdHVyZSBhZmZvcmRlZCBhbXVzZW1lbnQgdG8gdGhlIFJoZWdpYW5zLCBzZWVpbmcgdGhhdCwgdGhvdWdoIFBob2VuaWNpYW5zLCB0aGV5IHdlcmUgbm90IHBsZWFzZWQgd2l0aCB3aGF0IHdhcyBlZmZlY3RlZCBieSBkZWNlaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgdGhleSBzZW50IGFuIGVudm95IGFib2FyZCBhIHRyaXJlbWUgdG8gVGF1cm9tZW5pdW0sIHdobywgYWZ0ZXIgYSBsb25nIGNvbnZlcnNhdGlvbiB3aXRoIEFuZHJvbWFjaHVzLCBpbiB3aGljaCBoZSBtZW5hY2VkIGhpbSBpbiBpbnNvbGVudCBiYXJiYXJpYyBmYXNoaW9uIGlmIGhlIGRpZCBub3QgZXhwZWwgdGhlIENvcmludGhpYW5zIGFzIHNvb24gYXMgcG9zc2libGUsIGZpbmFsbHkgc2hvd2VkIGhpbSBoaXMgaGFuZCB3aXRoIHRoZSBwYWxtIHVwLCBhbmQgdGhlbiB0dXJuaW5nIGl0IGRvd24sIHRocmVhdGVuZWQgdGhhdCBoZSB3b3VsZCB0dXJuIGhpcyBjaXR5IGFzIGNvbXBsZXRlbHkgdXBzaWRlIGRvd24uIEFuZHJvbWFjaHVzLCBob3dldmVyLCB3aXRoIGEgbGF1Z2gsIG1hZGUgbm8gZnVydGhlciByZXBseSB0aGFuIHRvIHN0cmV0Y2ggb3V0IGhpcyBoYW5kLCBhcyB0aGUgQmFyYmFyaWFuIGhhZCBkb25lLCBub3cgcGFsbSB1cCwgYW5kIG5vdyBwYWxtIGRvd24sIGFuZCB0aGVuIG9yZGVyIGhpbSB0byBzYWlsIG9mZiwgaWYgaGUgZGlkIG5vdCB3aXNoIGhpcyBzaGlwIHRvIGJlIHR1cm5lZCB1cHNpZGUgZG93biBpbiB0aGUgc2FtZSBmYXNoaW9uLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBDYXJ0aGFnaW5pYW5zIGluIFJoZWdpdW0sIGFmdGVyIFRpbW9sZW9uIGhhZCBwdXQgdG8gc2VhIGFuZCB0aGUgYXNzZW1ibHkgaGFkIGJlZW4gZGlzc29sdmVkLCB3ZXJlIGluZGlnbmFudCwgYW5kIGluIHRoZWlyIGRpc2NvbWZpdHVyZSBhZmZvcmRlZCBhbXVzZW1lbnQgdG8gdGhlIFJoZWdpYW5zLCBzZWVpbmcgdGhhdCwgdGhvdWdoIFBob2VuaWNpYW5zLCB0aGV5IHdlcmUgbm90IHBsZWFzZWQgd2l0aCB3aGF0IHdhcyBlZmZlY3RlZCBieSBkZWNlaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgdGhleSBzZW50IGFuIGVudm95IGFib2FyZCBhIHRyaXJlbWUgdG8gVGF1cm9tZW5pdW0sIHdobywgYWZ0ZXIgYSBsb25nIGNvbnZlcnNhdGlvbiB3aXRoIEFuZHJvbWFjaHVzLCBpbiB3aGljaCBoZSBtZW5hY2VkIGhpbSBpbiBpbnNvbGVudCBiYXJiYXJpYyBmYXNoaW9uIGlmIGhlIGRpZCBub3QgZXhwZWwgdGhlIENvcmludGhpYW5zIGFzIHNvb24gYXMgcG9zc2libGUsIGZpbmFsbHkgc2hvd2VkIGhpbSBoaXMgaGFuZCB3aXRoIHRoZSBwYWxtIHVwLCBhbmQgdGhlbiB0dXJuaW5nIGl0IGRvd24sIHRocmVhdGVuZWQgdGhhdCBoZSB3b3VsZCB0dXJuIGhpcyBjaXR5IGFzIGNvbXBsZXRlbHkgdXBzaWRlIGRvd24uIEFuZHJvbWFjaHVzLCBob3dldmVyLCB3aXRoIGEgbGF1Z2gsIG1hZGUgbm8gZnVydGhlciByZXBseSB0aGFuIHRvIHN0cmV0Y2ggb3V0IGhpcyBoYW5kLCBhcyB0aGUgQmFyYmFyaWFuIGhhZCBkb25lLCBub3cgcGFsbSB1cCwgYW5kIG5vdyBwYWxtIGRvd24sIGFuZCB0aGVuIG9yZGVyIGhpbSB0byBzYWlsIG9mZiwgaWYgaGUgZGlkIG5vdCB3aXNoIGhpcyBzaGlwIHRvIGJlIHR1cm5lZCB1cHNpZGUgZG93biBpbiB0aGUgc2FtZSBmYXNoaW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSGljZXRhcyB3YXMgYWZyYWlkIHdoZW4gaGUgbGVhcm5lZCB0aGF0IFRpbW9sZW9uIGhhZCBjcm9zc2VkIHRoZSBzdHJhaXQsIGFuZCBzZW50IGZvciBncmVhdCBudW1iZXJzIG9mIHRoZSBDYXJ0aGFnaW5pYW4gdHJpcmVtZXMuIEFuZCBub3cgaXQgd2FzIHRoYXQgdGhlIFN5cmFjdXNhbnMgYWx0b2dldGhlciBkZXNwYWlyZWQgb2YgdGhlaXIgZGVsaXZlcmFuY2UsIHNlZWluZyB0aGVpciBoYXJib3VyIGluIHRoZSBwb3dlciBvZiB0aGUgQ2FydGhhZ2luaWFucywgdGhlaXIgY2l0eSBpbiB0aGUgaGFuZHMgb2YgSGljZXRhcyBhbmQgdGhlaXIgY2l0YWRlbCBpbiB0aGUgcG9zc2Vzc2lvbiBvZiBEaW9ueXNpdXM7IHdoaWxlIFRpbW9sZW9uIGhhZCBidXQgYSBob2xkIGFzIGl0IHdlcmUgb24gdGhlIGZyaW5nZSBvZiBTaWNpbHkgaW4gdGhlIGxpdHRsZSBjaXR5IG9mIFRhdXJvbWVuaXVtLCB3aXRoIGEgZmVlYmxlIGhvcGUgYW5kIGEgc21hbGwgZm9yY2UgdG8gc3VwcG9ydCBoaW07IGZvciBhcGFydCBmcm9tIGEgdGhvdXNhbmQgc29sZGllcnMgYW5kIHByb3Zpc2lvbnMgYmFyZWx5IHN1ZmZpY2llbnQgZm9yIHRoZW0sIGhlIGhhZCBub3RoaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IgZGlkIHRoZSBjaXRpZXMgZmVlbCBjb25maWRlbmNlIGluIGhpbSwgb3ZlciBmdWxsIG9mIGlsbHMgYXMgdGhleSB3ZXJlIGFuZCBlbWJpdHRlcmVkIGFnYWluc3QgYWxsIGxlYWRlcnMgb2YgYXJtaWVzLCBwYXJ0aWN1bGFybHkgYnkgcmVhc29uIG9mIHRoZSBwZXJmaWR5IG9mIENhbGxpcHB1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBmYWxzZSBmcmllbmQgb2YgRGlvbiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERpbyA1NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRpb248L3RpdGxlPiwgY2hhcHRlcnMgbGl2LWx2aWkuPC9iaWJsPu+8iTwvbm90ZT4gYW5kIFBoYXJheCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEaW8gNDguMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EaW9uPC90aXRsZT4sIHhsdmlpaS4gMzwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEaW8gNDkuMSIgdmFsaWQ9InllcyI+eGxpeC4gMS4gZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gb25lIG9mIHdob20gd2FzIGFuIEF0aGVuaWFuLCBhbmQgdGhlIG90aGVyIGEgTGFjZWRhZW1vbmlhbjsgYnV0IGJvdGggb2YgdGhlbSwgd2hpbGUgZGVjbGFyaW5nIHRoYXQgdGhleSBjYW1lIHRvIHNlY3VyZSB0aGUgZnJlZWRvbSBvZiBTaWNpbHkgYW5kIHdpc2hlZCB0byBvdmVydGhyb3cgaXRzIHR5cmFudHMsIG1hZGUgdGhlIGNhbGFtaXRpZXMgb2YgU2ljaWx5IHVuZGVyIGhlciB0eXJhbnRzIHNlZW0gYXMgZ29sZCBpbiBjb21wYXJpc29uLCBhbmQgYnJvdWdodCBoZXIgcGVvcGxlIHRvIHRoaW5rIHRob3NlIG1vcmUgdG8gYmUgZW52aWVkIHdobyBoYWQgcGVyaXNoZWQgaW4gc2xhdmVyeSB0aGFuIHRob3NlIHdobyBoYWQgbGl2ZWQgdG8gc2VlIGhlciBpbmRlcGVuZGVuY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBIaWNldGFzIHdhcyBhZnJhaWQgd2hlbiBoZSBsZWFybmVkIHRoYXQgVGltb2xlb24gaGFkIGNyb3NzZWQgdGhlIHN0cmFpdCwgYW5kIHNlbnQgZm9yIGdyZWF0IG51bWJlcnMgb2YgdGhlIENhcnRoYWdpbmlhbiB0cmlyZW1lcy4gQW5kIG5vdyBpdCB3YXMgdGhhdCB0aGUgU3lyYWN1c2FucyBhbHRvZ2V0aGVyIGRlc3BhaXJlZCBvZiB0aGVpciBkZWxpdmVyYW5jZSwgc2VlaW5nIHRoZWlyIGhhcmJvdXIgaW4gdGhlIHBvd2VyIG9mIHRoZSBDYXJ0aGFnaW5pYW5zLCB0aGVpciBjaXR5IGluIHRoZSBoYW5kcyBvZiBIaWNldGFzIGFuZCB0aGVpciBjaXRhZGVsIGluIHRoZSBwb3NzZXNzaW9uIG9mIERpb255c2l1czsgd2hpbGUgVGltb2xlb24gaGFkIGJ1dCBhIGhvbGQgYXMgaXQgd2VyZSBvbiB0aGUgZnJpbmdlIG9mIFNpY2lseSBpbiB0aGUgbGl0dGxlIGNpdHkgb2YgVGF1cm9tZW5pdW0sIHdpdGggYSBmZWVibGUgaG9wZSBhbmQgYSBzbWFsbCBmb3JjZSB0byBzdXBwb3J0IGhpbTsgZm9yIGFwYXJ0IGZyb20gYSB0aG91c2FuZCBzb2xkaWVycyBhbmQgcHJvdmlzaW9ucyBiYXJlbHkgc3VmZmljaWVudCBmb3IgdGhlbSwgaGUgaGFkIG5vdGhpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vciBkaWQgdGhlIGNpdGllcyBmZWVsIGNvbmZpZGVuY2UgaW4gaGltLCBvdmVyIGZ1bGwgb2YgaWxscyBhcyB0aGV5IHdlcmUgYW5kIGVtYml0dGVyZWQgYWdhaW5zdCBhbGwgbGVhZGVycyBvZiBhcm1pZXMsIHBhcnRpY3VsYXJseSBieSByZWFzb24gb2YgdGhlIHBlcmZpZHkgb2YgQ2FsbGlwcHVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgZmFsc2UgZnJpZW5kIG9mIERpb24gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERpbyA1NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGlvbjwvdGl0bGU+LCBjaGFwdGVycyBsaXYtbHZpaS48L2JpYmw+77yJPC9ub3RlPiBhbmQgUGhhcmF4LDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERpbyA1NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGlvbjwvdGl0bGU+LCBjaGFwdGVycyBsaXYtbHZpaS48L2JpYmw+77yJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGlvbjwvdGl0bGU+LCBjaGFwdGVycyBsaXYtbHZpaS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGlvIDQ4LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaW9uPC90aXRsZT4sIHhsdmlpaS4gMzwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERpbyA0OS4xIiB2YWxpZD0ieWVzIj54bGl4LiAxLiBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBvbmUgb2Ygd2hvbSB3YXMgYW4gQXRoZW5pYW4sIGFuZCB0aGUgb3RoZXIgYSBMYWNlZGFlbW9uaWFuOyBidXQgYm90aCBvZiB0aGVtLCB3aGlsZSBkZWNsYXJpbmcgdGhhdCB0aGV5IGNhbWUgdG8gc2VjdXJlIHRoZSBmcmVlZG9tIG9mIFNpY2lseSBhbmQgd2lzaGVkIHRvIG92ZXJ0aHJvdyBpdHMgdHlyYW50cywgbWFkZSB0aGUgY2FsYW1pdGllcyBvZiBTaWNpbHkgdW5kZXIgaGVyIHR5cmFudHMgc2VlbSBhcyBnb2xkIGluIGNvbXBhcmlzb24sIGFuZCBicm91Z2h0IGhlciBwZW9wbGUgdG8gdGhpbmsgdGhvc2UgbW9yZSB0byBiZSBlbnZpZWQgd2hvIGhhZCBwZXJpc2hlZCBpbiBzbGF2ZXJ5IHRoYW4gdGhvc2Ugd2hvIGhhZCBsaXZlZCB0byBzZWUgaGVyIGluZGVwZW5kZW5jZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGlvIDQ4LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaW9uPC90aXRsZT4sIHhsdmlpaS4gMzwvYmlibD47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpb248L3RpdGxlPiwgeGx2aWlpLiAzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGlvIDQ5LjEiIHZhbGlkPSJ5ZXMiPnhsaXguIDEuIGYuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5FeHBlY3RpbmcsIHRoZXJlZm9yZSwgdGhhdCB0aGUgQ29yaW50aGlhbiBsZWFkZXIgd291bGQgYmUgbm8gd2hpdCBiZXR0ZXIgdGhhbiB0aG9zZSB3aG8gaGFkIHByZWNlZGVkIGhpbSwgYnV0IHRoYXQgdGhlIHNhbWUgc29waGlzdHJpZXMgYW5kIGx1cmVzIHdlcmUgY29tZSB0byB0aGVtIGFnYWluLCBhbmQgdGhhdCB3aXRoIGZhaXIgaG9wZXMgYW5kIGtpbmQgcHJvbWlzZXMgdGhleSB3ZXJlIHRvIGJlIG1hZGUgZG9jaWxlIGVub3VnaCB0byByZWNlaXZlIGEgbmV3IG1hc3RlciBpbiBwbGFjZSBvZiBhbiBvbGQgb25lLCB0aGV5IGFsbCBzdXNwZWN0ZWQgYW5kIHJlcHVsc2VkIHRoZSBhcHBlYWxzIG9mIHRoZSBDb3JpbnRoaWFucyBleGNlcHQgdGhlIHBlb3BsZSBvZiBBZHJhbnVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBkd2VsdCBpbiBhIGNpdHkgdGhhdCB3YXMgc21hbGwsIGJ1dCBzYWNyZWQgdG8gQWRyYW51cywgYSBnb2QgaGlnaGx5IGhvbm91cmVkIHRocm91Z2hvdXQgYWxsIFNpY2lseSwgYW5kIGJlaW5nIGF0IHZhcmlhbmNlIHdpdGggb25lIGFub3RoZXIsIG9uZSBwYXJ0eSBpbnZpdGVkIGluIEhpY2V0YXMgYW5kIHRoZSBDYXJ0aGFnaW5pYW5zLCB3aGlsZSB0aGUgb3RoZXIgc2VudCBhbiBpbnZpdGF0aW9uIHRvIFRpbW9sZW9uLiBBbmQgYnkgc29tZSBmcmVhayBvZiBmb3J0dW5lLCBib3RoIGdlbmVyYWxzIGhhc3RlbmluZyB0byBhbnN3ZXIgdGhlIHN1bW1vbnMsIGJvdGggYXJyaXZlZCBhdCBvbmUgYW5kIHRoZSBzYW1lIHRpbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBIaWNldGFzIGNhbWUgd2l0aCBmaXZlIHRob3VzYW5kIHNvbGRpZXJzLCB3aGlsZSBUaW1vbGVvbiBoYWQgbm8gbW9yZSB0aGFuIHR3ZWx2ZSBodW5kcmVkIGFsbCB0b2xkLiBUYWtpbmcgdGhlc2Ugd2l0aCBoaW0gZnJvbSBUYXVyb21lbml1bSwgaGUgc2V0IG91dCBmb3IgQWRyYW51bSwgd2hpY2ggd2FzIHRocmVlIGh1bmRyZWQgYW5kIGZvcnR5IGZ1cmxvbmdzIG9mZi4gVGhlIGZpcnN0IGRheSBoZSBhZHZhbmNlZCBvbmx5IGEgc21hbGwgcGFydCBvZiB0aGUgam91cm5leSBhbmQgYml2b3VhY2tlZCBmb3IgdGhlIG5pZ2h0OyBidXQgb24gdGhlIHNlY29uZCBkYXkgaGUgcXVpY2tlbmVkIGhpcyBwYWNlLCBhbmQgYWZ0ZXIgdHJhdmVyc2luZyBkaWZmaWN1bHQgcmVnaW9ucywgd2hlbiBkYXkgd2FzIGFscmVhZHkgZGVjbGluaW5nIGhlIGhlYXJkIHRoYXQgSGljZXRhcyB3YXMganVzdCBhcnJpdmluZyBhdCB0aGUgbGl0dGxlIGNpdHkgYW5kIHBpdGNoaW5nIGhpcyBjYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgaGlzIGNhcHRhaW5zIGFuZCB0YXhpYXJjaHMgaGFsdGVkIHRoZSB2YW4tZ3VhcmQsIGluIG9yZGVyIHRvIGdpdmUgdGhlIG1lbiBmb29kIGFuZCByZXN0IGFuZCBzbyBtYWtlIHRoZW0gbW9yZSByZWFkeSB0byBmaWdodDsgYnV0IHdoZW4gVGltb2xlb24gY2FtZSB1cCwgaGUgYmVnZ2VkIHRoZW0gbm90IHRvIGRvIHRoaXMsIGJ1dCB0byBsZWFkIG9uIHdpdGggc3BlZWQgYW5kIGVuZ2FnZSB0aGUgZW5lbXkgd2hpbGUgdGhleSB3ZXJlIGluIGRpc29yZGVyLCBhcyB0aGV5IHdlcmUgbGlrZWx5IHRvIGJlIHdoZW4ganVzdCBhdCB0aGUgZW5kIG9mIHRoZWlyIG1hcmNoIGFuZCBidXN5IHdpdGggdGhlaXIgdGVudHMgYW5kIHN1cHBlci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFzIGhlIHRodXMgc3Bva2UsIGhlIHRvb2sgaGlzIHNoaWVsZCwgcHV0IGhpbXNlbGYgYXQgdGhlIGhlYWQsIGFuZCBsZWQgdGhlIHNvbGRpZXJzIG9uIGFzIGlmIHRvIGNlcnRhaW4gdmljdG9yeS4gQW5kIHRoZXkgZm9sbG93ZWQsIGVtYm9sZGVuZWQgYnkgaGlzIGV4YW1wbGUsIGJlaW5nIG5vdyBkaXN0YW50IGZyb20gdGhlIGVuZW15IGxlc3MgdGhhbiB0aGlydHkgZnVybG9uZ3MuIEFuZCB3aGVuIHRoZXkgaGFkIHRyYXZlcnNlZCB0aGVzZSB0b28sIHRoZXkgZmVsbCB1cG9uIHRoZSBlbmVteSwgd2hvIHdlcmUgY29uZm91bmRlZCBhbmQgdG9vayB0byBmbGlnaHQgYXMgc29vbiBhcyB0aGV5IHBlcmNlaXZlZCB0aGVtIGNvbWluZyB1cDsgd2hlcmVmb3JlIG5vdCBtYW55IG1vcmUgdGhhbiB0aHJlZSBodW5kcmVkIG9mIHRoZW0gd2VyZSBzbGFpbiwgd2hpbGUgdHdpY2UgYXMgbWFueSB3ZXJlIHRha2VuIGFsaXZlLCBhbmQgdGhlaXIgY2FtcCB3YXMgY2FwdHVyZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgcGVvcGxlIG9mIEFkcmFudW0gdGhyZXcgb3BlbiB0aGVpciBnYXRlcyBhbmQgam9pbmVkIFRpbW9sZW9uLCByZXBvcnRpbmcgdG8gaGltIHdpdGggdGVycm9yIGFuZCBhbWF6ZW1lbnQgdGhhdCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBiYXR0bGUgdGhlIHNhY3JlZCBwb3J0YWxzIG9mIHRoZWlyIHRlbXBsZSBmbGV3IG9wZW4gb2YgdGhlaXIgb3duIGFjY29yZCwgYW5kIHRoZSBzcGVhciBvZiB0aGUgZ29kIHdhcyBzZWVuIHRvIGJlIHRyZW1ibGluZyB0byB0aGUgdGlwIG9mIGl0cyBwb2ludCwgd2hpbGUgY29waW91cyBzd2VhdCByYW4gZG93biBoaXMgZmFjZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RXhwZWN0aW5nLCB0aGVyZWZvcmUsIHRoYXQgdGhlIENvcmludGhpYW4gbGVhZGVyIHdvdWxkIGJlIG5vIHdoaXQgYmV0dGVyIHRoYW4gdGhvc2Ugd2hvIGhhZCBwcmVjZWRlZCBoaW0sIGJ1dCB0aGF0IHRoZSBzYW1lIHNvcGhpc3RyaWVzIGFuZCBsdXJlcyB3ZXJlIGNvbWUgdG8gdGhlbSBhZ2FpbiwgYW5kIHRoYXQgd2l0aCBmYWlyIGhvcGVzIGFuZCBraW5kIHByb21pc2VzIHRoZXkgd2VyZSB0byBiZSBtYWRlIGRvY2lsZSBlbm91Z2ggdG8gcmVjZWl2ZSBhIG5ldyBtYXN0ZXIgaW4gcGxhY2Ugb2YgYW4gb2xkIG9uZSwgdGhleSBhbGwgc3VzcGVjdGVkIGFuZCByZXB1bHNlZCB0aGUgYXBwZWFscyBvZiB0aGUgQ29yaW50aGlhbnMgZXhjZXB0IHRoZSBwZW9wbGUgb2YgQWRyYW51bS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGR3ZWx0IGluIGEgY2l0eSB0aGF0IHdhcyBzbWFsbCwgYnV0IHNhY3JlZCB0byBBZHJhbnVzLCBhIGdvZCBoaWdobHkgaG9ub3VyZWQgdGhyb3VnaG91dCBhbGwgU2ljaWx5LCBhbmQgYmVpbmcgYXQgdmFyaWFuY2Ugd2l0aCBvbmUgYW5vdGhlciwgb25lIHBhcnR5IGludml0ZWQgaW4gSGljZXRhcyBhbmQgdGhlIENhcnRoYWdpbmlhbnMsIHdoaWxlIHRoZSBvdGhlciBzZW50IGFuIGludml0YXRpb24gdG8gVGltb2xlb24uIEFuZCBieSBzb21lIGZyZWFrIG9mIGZvcnR1bmUsIGJvdGggZ2VuZXJhbHMgaGFzdGVuaW5nIHRvIGFuc3dlciB0aGUgc3VtbW9ucywgYm90aCBhcnJpdmVkIGF0IG9uZSBhbmQgdGhlIHNhbWUgdGltZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBIaWNldGFzIGNhbWUgd2l0aCBmaXZlIHRob3VzYW5kIHNvbGRpZXJzLCB3aGlsZSBUaW1vbGVvbiBoYWQgbm8gbW9yZSB0aGFuIHR3ZWx2ZSBodW5kcmVkIGFsbCB0b2xkLiBUYWtpbmcgdGhlc2Ugd2l0aCBoaW0gZnJvbSBUYXVyb21lbml1bSwgaGUgc2V0IG91dCBmb3IgQWRyYW51bSwgd2hpY2ggd2FzIHRocmVlIGh1bmRyZWQgYW5kIGZvcnR5IGZ1cmxvbmdzIG9mZi4gVGhlIGZpcnN0IGRheSBoZSBhZHZhbmNlZCBvbmx5IGEgc21hbGwgcGFydCBvZiB0aGUgam91cm5leSBhbmQgYml2b3VhY2tlZCBmb3IgdGhlIG5pZ2h0OyBidXQgb24gdGhlIHNlY29uZCBkYXkgaGUgcXVpY2tlbmVkIGhpcyBwYWNlLCBhbmQgYWZ0ZXIgdHJhdmVyc2luZyBkaWZmaWN1bHQgcmVnaW9ucywgd2hlbiBkYXkgd2FzIGFscmVhZHkgZGVjbGluaW5nIGhlIGhlYXJkIHRoYXQgSGljZXRhcyB3YXMganVzdCBhcnJpdmluZyBhdCB0aGUgbGl0dGxlIGNpdHkgYW5kIHBpdGNoaW5nIGhpcyBjYW1wLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoaXMgY2FwdGFpbnMgYW5kIHRheGlhcmNocyBoYWx0ZWQgdGhlIHZhbi1ndWFyZCwgaW4gb3JkZXIgdG8gZ2l2ZSB0aGUgbWVuIGZvb2QgYW5kIHJlc3QgYW5kIHNvIG1ha2UgdGhlbSBtb3JlIHJlYWR5IHRvIGZpZ2h0OyBidXQgd2hlbiBUaW1vbGVvbiBjYW1lIHVwLCBoZSBiZWdnZWQgdGhlbSBub3QgdG8gZG8gdGhpcywgYnV0IHRvIGxlYWQgb24gd2l0aCBzcGVlZCBhbmQgZW5nYWdlIHRoZSBlbmVteSB3aGlsZSB0aGV5IHdlcmUgaW4gZGlzb3JkZXIsIGFzIHRoZXkgd2VyZSBsaWtlbHkgdG8gYmUgd2hlbiBqdXN0IGF0IHRoZSBlbmQgb2YgdGhlaXIgbWFyY2ggYW5kIGJ1c3kgd2l0aCB0aGVpciB0ZW50cyBhbmQgc3VwcGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBoZSB0aHVzIHNwb2tlLCBoZSB0b29rIGhpcyBzaGllbGQsIHB1dCBoaW1zZWxmIGF0IHRoZSBoZWFkLCBhbmQgbGVkIHRoZSBzb2xkaWVycyBvbiBhcyBpZiB0byBjZXJ0YWluIHZpY3RvcnkuIEFuZCB0aGV5IGZvbGxvd2VkLCBlbWJvbGRlbmVkIGJ5IGhpcyBleGFtcGxlLCBiZWluZyBub3cgZGlzdGFudCBmcm9tIHRoZSBlbmVteSBsZXNzIHRoYW4gdGhpcnR5IGZ1cmxvbmdzLiBBbmQgd2hlbiB0aGV5IGhhZCB0cmF2ZXJzZWQgdGhlc2UgdG9vLCB0aGV5IGZlbGwgdXBvbiB0aGUgZW5lbXksIHdobyB3ZXJlIGNvbmZvdW5kZWQgYW5kIHRvb2sgdG8gZmxpZ2h0IGFzIHNvb24gYXMgdGhleSBwZXJjZWl2ZWQgdGhlbSBjb21pbmcgdXA7IHdoZXJlZm9yZSBub3QgbWFueSBtb3JlIHRoYW4gdGhyZWUgaHVuZHJlZCBvZiB0aGVtIHdlcmUgc2xhaW4sIHdoaWxlIHR3aWNlIGFzIG1hbnkgd2VyZSB0YWtlbiBhbGl2ZSwgYW5kIHRoZWlyIGNhbXAgd2FzIGNhcHR1cmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgcGVvcGxlIG9mIEFkcmFudW0gdGhyZXcgb3BlbiB0aGVpciBnYXRlcyBhbmQgam9pbmVkIFRpbW9sZW9uLCByZXBvcnRpbmcgdG8gaGltIHdpdGggdGVycm9yIGFuZCBhbWF6ZW1lbnQgdGhhdCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBiYXR0bGUgdGhlIHNhY3JlZCBwb3J0YWxzIG9mIHRoZWlyIHRlbXBsZSBmbGV3IG9wZW4gb2YgdGhlaXIgb3duIGFjY29yZCwgYW5kIHRoZSBzcGVhciBvZiB0aGUgZ29kIHdhcyBzZWVuIHRvIGJlIHRyZW1ibGluZyB0byB0aGUgdGlwIG9mIGl0cyBwb2ludCwgd2hpbGUgY29waW91cyBzd2VhdCByYW4gZG93biBoaXMgZmFjZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgcHJvZGlnaWVzLCBhcyBpdCB3b3VsZCBzZWVtLCB3ZXJlIGEgc2lnbiBub3Qgb25seSBvZiB0aGUgdmljdG9yeSB3aGljaCB3YXMgdGhlbiB3b24sIGJ1dCBhbHNvIG9mIHRoZSBhY2hpZXZlbWVudHMgc3VjY2VlZGluZyB0aGVtLCB0byB3aGljaCB0aGF0IHN0cnVnZ2xlIGFmZm9yZGVkIGEgcHJvcGl0aW91cyBiZWdpbm5pbmcuIEZvciBjaXRpZXMgYXQgb25jZSBzZW50IGVudm95cyB0byBUaW1vbGVvbiBhbmQgZXNwb3VzZWQgaGlzIGNhdXNlLCBhbmQgcGFydGljdWxhcmx5IE1hbWVyY3VzLCB0aGUgdHlyYW50IG9mIENhdGFuYSwgYSB3YXJsaWtlIGFuZCB3ZWFsdGh5IG1hbiwgcHJlc2VudGVkIGhpbXNlbGYgYXMgYW4gYWxseS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoYXQgd2FzIG1vc3QgaW1wb3J0YW50LCBEaW9ueXNpdXMgaGltc2VsZiwgbm93IGdyb3duIGRlc3BlcmF0ZSBhbmQgYWxtb3N0IGZvcmNlZCB0byBzdXJyZW5kZXIsIGRlc3Bpc2VkIEhpY2V0YXMgZm9yIGhpcyBzaGFtZWZ1bCBkZWZlYXQsIGFuZCBpbiBhZG1pcmF0aW9uIG9mIFRpbW9sZW9uIHNlbnQgdG8gaGltIGFuZCBoaXMgQ29yaW50aGlhbnMgb2ZmZXJpbmcgdG8gc3VycmVuZGVyIGhpbXNlbGYgYW5kIHRoZSBjaXRhZGVsIHRvIHRoZW0uIFRpbW9sZW9uIGFjY2VwdGVkIHRoaXMgdW5leHBlY3RlZCBnb29kIGZvcnR1bmUsIGFuZCBzZW50IEV1Y2xlaWRlcyBhbmQgVGVsZW1hY2h1cywgbWVuIG9mIENvcmludGgsIGludG8gdGhlIGFjcm9wb2xpcywgYW5kIHdpdGggdGhlbSBmb3VyIGh1bmRyZWQgc29sZGllcnMsIG5vdCBhbGwgYXQgb25jZSwgbm9yIG9wZW5seSwgZm9yIHRoaXMgd2FzIGltcG9zc2libGUgd2hlbiBhbiBlbmVteSB3YXMgYmxvY2thZGluZyB0aGUgaGFyYm91cjsgYnV0IHRoZXkgbWFkZSB0aGVpciB3YXkgaW4gc2VjcmV0bHkgYW5kIGluIHNtYWxsIGNvbXBhbmllcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2Ugc29sZGllcnMsIHRoZW4sIHRvb2sgb3ZlciB0aGUgYWNyb3BvbGlzIGFuZCB0aGUgY2FzdGxlIG9mIHRoZSB0eXJhbnQsIHRvZ2V0aGVyIHdpdGggaGlzIGVxdWlwbWVudCBhbmQgc3RvcmVzIGZvciB0aGUgd2FyOyBmb3IgdGhlcmUgd2VyZSBtYW55IGhvcnNlcyB0aGVyZSwgYWxsIHNvcnRzIG9mIGVuZ2luZXMgb2Ygd2FyLCBhbmQgYSBncmVhdCBxdWFudGl0eSBvZiBtaXNzaWxlcywgYW5kIGFybW91ciBmb3Igc2V2ZW50eSB0aG91c2FuZCBtZW4gaGFkIGJlZW4gc3RvcmVkIHVwIHRoZXJlIGZvciBhIGxvbmcgdGltZS4gRGlvbnlzaXVzIGFsc28gaGFkIHdpdGggaGltIHR3byB0aG91c2FuZCBzb2xkaWVyczsgdGhlc2UsIGFzIHdlbGwgYXMgdGhlIHN1cHBsaWVzLCBoZSB0dXJuZWQgb3ZlciB0byBUaW1vbGVvbiwgd2hpbGUgaGUgaGltc2VsZiwgd2l0aCBoaXMgdHJlYXN1cmUgYW5kIGEgZmV3IG9mIGhpcyBmcmllbmRzLCBzYWlsZWQgb2ZmIHdpdGhvdXQgdGhlIGtub3dsZWRnZSBvZiBIaWNldGFzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWZ0ZXIgaGUgaGFkIGJlZW4gY29udmV5ZWQgdG8gdGhlIGNhbXAgb2YgVGltb2xlb24sIHdoZXJlIGZvciB0aGUgZmlyc3QgdGltZSBoZSB3YXMgc2VlbiBhcyBhIHByaXZhdGUgcGVyc29uIGFuZCBpbiBodW1ibGUgZ2FyYiwgaGUgd2FzIHNlbnQgb2ZmIHRvIENvcmludGggd2l0aCBhIHNpbmdsZSBzaGlwIGFuZCBhIHNtYWxsIHRyZWFzdXJlLCBoYXZpbmcgYmVlbiBib3JuIGFuZCByZWFyZWQgaW4gYSB0eXJhbm55IHdoaWNoIHdhcyB0aGUgZ3JlYXRlc3QgYW5kIG1vc3QgaWxsdXN0cmlvdXMgb2YgYWxsIHR5cmFubmllcyBhbmQgaGF2aW5nIGhlbGQgdGhpcyBmb3IgdGVuIHllYXJzLCBhbmQgdGhlbiBmb3IgdHdlbHZlIG90aGVyIHllYXJzLCBhZnRlciB0aGUgZXhwZWRpdGlvbiBvZiBEaW9uLCBoYXZpbmcgYmVlbiBpbnZvbHZlZCBpbiBoYXJhc3Npbmcgc3RydWdnbGVzIGFuZCB3YXJzLCBhbmQgaGF2aW5nIHN1cnBhc3NlZCBpbiBoaXMgc3VmZmVyaW5ncyBhbGwgaGlzIGFjdHMgb2YgdHlyYW5ueS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGxpdmVkIHRvIHNlZSB0aGUgdmlvbGVudCBkZWF0aHMgb2YgaGlzIGdyb3duLXVwIHNvbnMgYW5kIHRoZSB2aW9sYXRpb24gb2YgaGlzIG1haWRlbiBkYXVnaHRlcnMsIGFuZCB0aGUgc2hhbWVmdWwgYWJ1c2Ugb2YgdGhlIHBlcnNvbiBvZiBoaXMgd2lmZSwgd2hvIHdhcyBhdCB0aGUgc2FtZSB0aW1lIGhpcyBzaXN0ZXIsIGFuZCB3aG8sIHdoaWxlIGxpdmluZywgd2FzIHN1YmplY3RlZCB0byB0aGUgbW9zdCB3YW50b24gcGxlYXN1cmVzIG9mIGhpcyBlbmVtaWVzLCBhbmQgYWZ0ZXIgYmVpbmcgbXVyZGVyZWQsIHRvZ2V0aGVyIHdpdGggaGVyIGNoaWxkcmVuLCB3YXMgY2FzdCBpbnRvIHRoZSBzZWEuIFRoZXNlIHRoaW5ncywgdGhlbiwgaGF2ZSBiZWVuIGZ1bGx5IGRlc2NyaWJlZCBpbiBteSBMaWZlIG9mIERpb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlcmUgaXMgbm90aGluZyBpbiB0aGUgPHRpdGxlPkRpb248L3RpdGxlPiB0byBqdXN0aWZ5IHRoaXMgc3RhdGVtZW50LiAgVGhlIGNydWVsdGllcyBkZXNjcmliZWQgd2VyZSBjb21taXR0ZWQgYnkgdGhlIHJldm9sdGluZyBwZW9wbGUgb2YgTG9jcmksIHRvIHdob20gRGlvbnlzaXVzIGhhZCBtYWRlIGhpbXNlbGYgb2Rpb3VzIGR1cmluZyBoaXMgcmVzaWRlbmNlIHRoZXJlIGZyb20gMzU2IHRvIDM0NiBCLkMuICBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkF0aC4gMTIuNTQxYyI+QXRoZW5hZXVzLCBwLiA1NDEgYy1lLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgcHJvZGlnaWVzLCBhcyBpdCB3b3VsZCBzZWVtLCB3ZXJlIGEgc2lnbiBub3Qgb25seSBvZiB0aGUgdmljdG9yeSB3aGljaCB3YXMgdGhlbiB3b24sIGJ1dCBhbHNvIG9mIHRoZSBhY2hpZXZlbWVudHMgc3VjY2VlZGluZyB0aGVtLCB0byB3aGljaCB0aGF0IHN0cnVnZ2xlIGFmZm9yZGVkIGEgcHJvcGl0aW91cyBiZWdpbm5pbmcuIEZvciBjaXRpZXMgYXQgb25jZSBzZW50IGVudm95cyB0byBUaW1vbGVvbiBhbmQgZXNwb3VzZWQgaGlzIGNhdXNlLCBhbmQgcGFydGljdWxhcmx5IE1hbWVyY3VzLCB0aGUgdHlyYW50IG9mIENhdGFuYSwgYSB3YXJsaWtlIGFuZCB3ZWFsdGh5IG1hbiwgcHJlc2VudGVkIGhpbXNlbGYgYXMgYW4gYWxseS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGF0IHdhcyBtb3N0IGltcG9ydGFudCwgRGlvbnlzaXVzIGhpbXNlbGYsIG5vdyBncm93biBkZXNwZXJhdGUgYW5kIGFsbW9zdCBmb3JjZWQgdG8gc3VycmVuZGVyLCBkZXNwaXNlZCBIaWNldGFzIGZvciBoaXMgc2hhbWVmdWwgZGVmZWF0LCBhbmQgaW4gYWRtaXJhdGlvbiBvZiBUaW1vbGVvbiBzZW50IHRvIGhpbSBhbmQgaGlzIENvcmludGhpYW5zIG9mZmVyaW5nIHRvIHN1cnJlbmRlciBoaW1zZWxmIGFuZCB0aGUgY2l0YWRlbCB0byB0aGVtLiBUaW1vbGVvbiBhY2NlcHRlZCB0aGlzIHVuZXhwZWN0ZWQgZ29vZCBmb3J0dW5lLCBhbmQgc2VudCBFdWNsZWlkZXMgYW5kIFRlbGVtYWNodXMsIG1lbiBvZiBDb3JpbnRoLCBpbnRvIHRoZSBhY3JvcG9saXMsIGFuZCB3aXRoIHRoZW0gZm91ciBodW5kcmVkIHNvbGRpZXJzLCBub3QgYWxsIGF0IG9uY2UsIG5vciBvcGVubHksIGZvciB0aGlzIHdhcyBpbXBvc3NpYmxlIHdoZW4gYW4gZW5lbXkgd2FzIGJsb2NrYWRpbmcgdGhlIGhhcmJvdXI7IGJ1dCB0aGV5IG1hZGUgdGhlaXIgd2F5IGluIHNlY3JldGx5IGFuZCBpbiBzbWFsbCBjb21wYW5pZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHNvbGRpZXJzLCB0aGVuLCB0b29rIG92ZXIgdGhlIGFjcm9wb2xpcyBhbmQgdGhlIGNhc3RsZSBvZiB0aGUgdHlyYW50LCB0b2dldGhlciB3aXRoIGhpcyBlcXVpcG1lbnQgYW5kIHN0b3JlcyBmb3IgdGhlIHdhcjsgZm9yIHRoZXJlIHdlcmUgbWFueSBob3JzZXMgdGhlcmUsIGFsbCBzb3J0cyBvZiBlbmdpbmVzIG9mIHdhciwgYW5kIGEgZ3JlYXQgcXVhbnRpdHkgb2YgbWlzc2lsZXMsIGFuZCBhcm1vdXIgZm9yIHNldmVudHkgdGhvdXNhbmQgbWVuIGhhZCBiZWVuIHN0b3JlZCB1cCB0aGVyZSBmb3IgYSBsb25nIHRpbWUuIERpb255c2l1cyBhbHNvIGhhZCB3aXRoIGhpbSB0d28gdGhvdXNhbmQgc29sZGllcnM7IHRoZXNlLCBhcyB3ZWxsIGFzIHRoZSBzdXBwbGllcywgaGUgdHVybmVkIG92ZXIgdG8gVGltb2xlb24sIHdoaWxlIGhlIGhpbXNlbGYsIHdpdGggaGlzIHRyZWFzdXJlIGFuZCBhIGZldyBvZiBoaXMgZnJpZW5kcywgc2FpbGVkIG9mZiB3aXRob3V0IHRoZSBrbm93bGVkZ2Ugb2YgSGljZXRhcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciBoZSBoYWQgYmVlbiBjb252ZXllZCB0byB0aGUgY2FtcCBvZiBUaW1vbGVvbiwgd2hlcmUgZm9yIHRoZSBmaXJzdCB0aW1lIGhlIHdhcyBzZWVuIGFzIGEgcHJpdmF0ZSBwZXJzb24gYW5kIGluIGh1bWJsZSBnYXJiLCBoZSB3YXMgc2VudCBvZmYgdG8gQ29yaW50aCB3aXRoIGEgc2luZ2xlIHNoaXAgYW5kIGEgc21hbGwgdHJlYXN1cmUsIGhhdmluZyBiZWVuIGJvcm4gYW5kIHJlYXJlZCBpbiBhIHR5cmFubnkgd2hpY2ggd2FzIHRoZSBncmVhdGVzdCBhbmQgbW9zdCBpbGx1c3RyaW91cyBvZiBhbGwgdHlyYW5uaWVzIGFuZCBoYXZpbmcgaGVsZCB0aGlzIGZvciB0ZW4geWVhcnMsIGFuZCB0aGVuIGZvciB0d2VsdmUgb3RoZXIgeWVhcnMsIGFmdGVyIHRoZSBleHBlZGl0aW9uIG9mIERpb24sIGhhdmluZyBiZWVuIGludm9sdmVkIGluIGhhcmFzc2luZyBzdHJ1Z2dsZXMgYW5kIHdhcnMsIGFuZCBoYXZpbmcgc3VycGFzc2VkIGluIGhpcyBzdWZmZXJpbmdzIGFsbCBoaXMgYWN0cyBvZiB0eXJhbm55LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBsaXZlZCB0byBzZWUgdGhlIHZpb2xlbnQgZGVhdGhzIG9mIGhpcyBncm93bi11cCBzb25zIGFuZCB0aGUgdmlvbGF0aW9uIG9mIGhpcyBtYWlkZW4gZGF1Z2h0ZXJzLCBhbmQgdGhlIHNoYW1lZnVsIGFidXNlIG9mIHRoZSBwZXJzb24gb2YgaGlzIHdpZmUsIHdobyB3YXMgYXQgdGhlIHNhbWUgdGltZSBoaXMgc2lzdGVyLCBhbmQgd2hvLCB3aGlsZSBsaXZpbmcsIHdhcyBzdWJqZWN0ZWQgdG8gdGhlIG1vc3Qgd2FudG9uIHBsZWFzdXJlcyBvZiBoaXMgZW5lbWllcywgYW5kIGFmdGVyIGJlaW5nIG11cmRlcmVkLCB0b2dldGhlciB3aXRoIGhlciBjaGlsZHJlbiwgd2FzIGNhc3QgaW50byB0aGUgc2VhLiBUaGVzZSB0aGluZ3MsIHRoZW4sIGhhdmUgYmVlbiBmdWxseSBkZXNjcmliZWQgaW4gbXkgTGlmZSBvZiBEaW9uLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlcmUgaXMgbm90aGluZyBpbiB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGlvbjwvdGl0bGU+IHRvIGp1c3RpZnkgdGhpcyBzdGF0ZW1lbnQuICBUaGUgY3J1ZWx0aWVzIGRlc2NyaWJlZCB3ZXJlIGNvbW1pdHRlZCBieSB0aGUgcmV2b2x0aW5nIHBlb3BsZSBvZiBMb2NyaSwgdG8gd2hvbSBEaW9ueXNpdXMgaGFkIG1hZGUgaGltc2VsZiBvZGlvdXMgZHVyaW5nIGhpcyByZXNpZGVuY2UgdGhlcmUgZnJvbSAzNTYgdG8gMzQ2IEIuQy4gIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBdGguIDEyLjU0MWMiPkF0aGVuYWV1cywgcC4gNTQxIGMtZS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGlvbjwvdGl0bGU+IHRvIGp1c3RpZnkgdGhpcyBzdGF0ZW1lbnQuICBUaGUgY3J1ZWx0aWVzIGRlc2NyaWJlZCB3ZXJlIGNvbW1pdHRlZCBieSB0aGUgcmV2b2x0aW5nIHBlb3BsZSBvZiBMb2NyaSwgdG8gd2hvbSBEaW9ueXNpdXMgaGFkIG1hZGUgaGltc2VsZiBvZGlvdXMgZHVyaW5nIGhpcyByZXNpZGVuY2UgdGhlcmUgZnJvbSAzNTYgdG8gMzQ2IEIuQy4gIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBdGguIDEyLjU0MWMiPkF0aGVuYWV1cywgcC4gNTQxIGMtZS48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgRGlvbnlzaXVzLCBhZnRlciBoaXMgYXJyaXZhbCBhdCBDb3JpbnRoIHRoZXJlIHdhcyBubyBHcmVlayB3aG8gZGlkIG5vdCBsb25nIHRvIGJlaG9sZCBhbmQgc3BlYWsgdG8gaGltLiBCdXQgdGhvc2Ugd2hvIHJlam9pY2VkIGluIGhpcyBtaXNmb3J0dW5lcyB3ZXJlIGxlYWQgYnkgdGhlaXIgaGF0cmVkIHRvIGNvbWUgdG9nZXRoZXIgZ2xhZGx5IHRoYXQgdGhleSBtaWdodCB0cmFtcGxlLCBhcyBpdCB3ZXJlLCB1cG9uIG9uZSB3aG8gaGFkIGJlZW4gY2FzdCBkb3duIGJ5IEZvcnR1bmU7IHdoaWxlIHRob3NlIHdobyByZWdhcmRlZCByYXRoZXIgdGhlIHJldmVyc2FsIG9mIGhpcyBmb3J0dW5lIGFuZCBzeW1wYXRoaXNlZCB3aXRoIGhpbSwgc2F3IHN0cm9uZyBwcm9vZiwgYW1pZCB0aGUgd2Vha25lc3Mgb2YgdGhpbmdzIHRoYXQgYXJlIGh1bWFuIGFuZCBzZWVuLCBvZiB0aGUgcG93ZXIgb2YgY2F1c2VzIHRoYXQgYXJlIHVuc2VlbiBhbmQgZGl2aW5lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhhdCBhZ2Ugc2hvd2VkIG5vIHdvcmsgZWl0aGVyIG9mIG5hdHVyZSBvciBvZiBhcnQgdGhhdCB3YXMgY29tcGFyYWJsZSB0byB0aGlzIHdvcmsgb2YgRm9ydHVuZSwgbmFtZWx5LCB0aGUgcmVjZW50IHR5cmFudCBvZiBTaWNpbHkgaW4gQ29yaW50aCwgd2hpbGluZyBoaXMgdGltZSBhd2F5IGF0IGEgZmlzaG1vbmdlcidzIG9yIHNpdHRpbmcgaW4gYSBwZXJmdW1lcidzIHNob3AsIGRyaW5raW5nIGRpbHV0ZWQgd2luZSBmcm9tIHRoZSB0YXZlcm5zIGFuZCBza2lybWlzaGluZyBpbiBwdWJsaWMgd2l0aCBjb21tb24gcHJvc3RpdHV0ZXMsIG9yIHRyeWluZyB0byB0ZWFjaCBtdXNpYy1naXJscyBpbiB0aGVpciBzaW5naW5nLCBhbmQgZWFybmVzdGx5IGNvbnRlbmRpbmcgd2l0aCB0aGVtIGFib3V0IHNvbmdzIGZvciB0aGUgc3RhZ2UgYW5kIG1lbG9keSBpbiBoeW1ucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSB0aG91Z2h0IHRoYXQgRGlvbnlzaXVzIGRpZCB0aGVzZSB0aGluZ3MgYXMgYW4gYWltbGVzcyBsb2l0ZXJlciwgYW5kIGJlY2F1c2UgaGUgd2FzIG5hdHVyYWxseSBlYXN5LWdvaW5nIGFuZCBmb25kIG9mIGxpY2Vuc2U7IGJ1dCBvdGhlcnMgdGhvdWdodCB0aGF0IGl0IHdhcyBpbiBvcmRlciB0byBiZSBoZWxkIGluIGNvbnRlbXB0IGFuZCBub3QgaW4gZmVhciBieSB0aGUgQ29yaW50aGlhbnMsIG5vciB1bmRlciBzdXNwaWNpb24gb2YgYmVpbmcgb3BwcmVzc2VkIGJ5IHRoZSBjaGFuZ2UgaW4gaGlzIGxpZmUgYW5kIG9mIHN0cml2aW5nIGFmdGVyIHBvd2VyLCB0aGF0IGhlIGVuZ2FnZWQgaW4gdGhlc2UgcHJhY3RpY2VzIGFuZCBwbGF5ZWQgYW4gdW5uYXR1cmFsIHBhcnQsIG1ha2luZyBhIGRpc3BsYXkgb2YgZ3JlYXQgc2lsbGluZXNzIGluIHRoZSB3YXkgaGUgYW11c2VkIGhpbXNlbGYuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGZvciBEaW9ueXNpdXMsIGFmdGVyIGhpcyBhcnJpdmFsIGF0IENvcmludGggdGhlcmUgd2FzIG5vIEdyZWVrIHdobyBkaWQgbm90IGxvbmcgdG8gYmVob2xkIGFuZCBzcGVhayB0byBoaW0uIEJ1dCB0aG9zZSB3aG8gcmVqb2ljZWQgaW4gaGlzIG1pc2ZvcnR1bmVzIHdlcmUgbGVhZCBieSB0aGVpciBoYXRyZWQgdG8gY29tZSB0b2dldGhlciBnbGFkbHkgdGhhdCB0aGV5IG1pZ2h0IHRyYW1wbGUsIGFzIGl0IHdlcmUsIHVwb24gb25lIHdobyBoYWQgYmVlbiBjYXN0IGRvd24gYnkgRm9ydHVuZTsgd2hpbGUgdGhvc2Ugd2hvIHJlZ2FyZGVkIHJhdGhlciB0aGUgcmV2ZXJzYWwgb2YgaGlzIGZvcnR1bmUgYW5kIHN5bXBhdGhpc2VkIHdpdGggaGltLCBzYXcgc3Ryb25nIHByb29mLCBhbWlkIHRoZSB3ZWFrbmVzcyBvZiB0aGluZ3MgdGhhdCBhcmUgaHVtYW4gYW5kIHNlZW4sIG9mIHRoZSBwb3dlciBvZiBjYXVzZXMgdGhhdCBhcmUgdW5zZWVuIGFuZCBkaXZpbmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGF0IGFnZSBzaG93ZWQgbm8gd29yayBlaXRoZXIgb2YgbmF0dXJlIG9yIG9mIGFydCB0aGF0IHdhcyBjb21wYXJhYmxlIHRvIHRoaXMgd29yayBvZiBGb3J0dW5lLCBuYW1lbHksIHRoZSByZWNlbnQgdHlyYW50IG9mIFNpY2lseSBpbiBDb3JpbnRoLCB3aGlsaW5nIGhpcyB0aW1lIGF3YXkgYXQgYSBmaXNobW9uZ2VyJ3Mgb3Igc2l0dGluZyBpbiBhIHBlcmZ1bWVyJ3Mgc2hvcCwgZHJpbmtpbmcgZGlsdXRlZCB3aW5lIGZyb20gdGhlIHRhdmVybnMgYW5kIHNraXJtaXNoaW5nIGluIHB1YmxpYyB3aXRoIGNvbW1vbiBwcm9zdGl0dXRlcywgb3IgdHJ5aW5nIHRvIHRlYWNoIG11c2ljLWdpcmxzIGluIHRoZWlyIHNpbmdpbmcsIGFuZCBlYXJuZXN0bHkgY29udGVuZGluZyB3aXRoIHRoZW0gYWJvdXQgc29uZ3MgZm9yIHRoZSBzdGFnZSBhbmQgbWVsb2R5IGluIGh5bW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgdGhvdWdodCB0aGF0IERpb255c2l1cyBkaWQgdGhlc2UgdGhpbmdzIGFzIGFuIGFpbWxlc3MgbG9pdGVyZXIsIGFuZCBiZWNhdXNlIGhlIHdhcyBuYXR1cmFsbHkgZWFzeS1nb2luZyBhbmQgZm9uZCBvZiBsaWNlbnNlOyBidXQgb3RoZXJzIHRob3VnaHQgdGhhdCBpdCB3YXMgaW4gb3JkZXIgdG8gYmUgaGVsZCBpbiBjb250ZW1wdCBhbmQgbm90IGluIGZlYXIgYnkgdGhlIENvcmludGhpYW5zLCBub3IgdW5kZXIgc3VzcGljaW9uIG9mIGJlaW5nIG9wcHJlc3NlZCBieSB0aGUgY2hhbmdlIGluIGhpcyBsaWZlIGFuZCBvZiBzdHJpdmluZyBhZnRlciBwb3dlciwgdGhhdCBoZSBlbmdhZ2VkIGluIHRoZXNlIHByYWN0aWNlcyBhbmQgcGxheWVkIGFuIHVubmF0dXJhbCBwYXJ0LCBtYWtpbmcgYSBkaXNwbGF5IG9mIGdyZWF0IHNpbGxpbmVzcyBpbiB0aGUgd2F5IGhlIGFtdXNlZCBoaW1zZWxmLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBjZXJ0YWluIHNheWluZ3Mgb2YgaGlzIGFyZSBwcmVzZXJ2ZWQsIGZyb20gd2hpY2ggaXQgd291bGQgYXBwZWFyIHRoYXQgaGUgYWNjb21tb2RhdGVkIGhpbXNlbGYgdG8gaGlzIHByZXNlbnQgY2lyY3Vtc3RhbmNlcyBub3QgaWdub2JseS4gT25jZSwgbmFtZWx5LCB3aGVuIGhlIGxhbmRlZCBhdCBMZXVjYWRpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbiBoaXMgdm95YWdlIGZyb20gU3lyYWN1c2UgdG8gQ29yaW50aC48L25vdGU+IGEgY2l0eSB3aGljaCBoYWQgYmVlbiBjb2xvbml6ZWQgYnkgQ29yaW50aGlhbnMsIGp1c3QgbGlrZSBTeXJhY3VzZSwgaGUgc2FpZCBoZSBoYWQgdGhlIHNhbWUgZmVlbGluZ3MgYXMgeW91bmcgbWVuIHdobyBoYXZlIGJlZW4gZ3VpbHR5IG9mIG1pc2RlbWVhbm91cnM7IGZvciBqdXN0IGFzIHRoZXNlIHBhc3MgdGhlaXIgdGltZSBtZXJyaWx5IHdpdGggdGhlaXIgYnJvdGhlcnMsIGJ1dCBzaHVuIHRoZWlyIGZhdGhlcnMgZnJvbSBhIGZlZWxpbmcgb2Ygc2hhbWUsIHNvIGhlIHdhcyBhc2hhbWVkIHRvIGxpdmUgaW4gdGhlaXIgY29tbW9uIG1vdGhlci1jaXR5LCBhbmQgd291bGQgZ2xhZGx5IGR3ZWxsIHRoZXJlIHdpdGggdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFnYWluLCBpbiBDb3JpbnRoLCB3aGVuIGEgc3RyYW5nZXIgc29tZXdoYXQgcnVkZWx5IGRlcmlkZWQgaGltIGFib3V0IGhpcyBhc3NvY2lhdGlvbnMgd2l0aCBwaGlsb3NvcGhlcnMsIGluIHdoaWNoIGhlIHVzZWQgdG8gdGFrZSBkZWxpZ2h0IHdoZW4gaGUgd2FzIGEgdHlyYW50LCBhbmQgZmluYWxseSBhc2tlZCBoaW0gd2hhdCBnb29kIFBsYXRvJ3Mgd2lzZG9tIGRpZCBoaW0gbm93LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvc3QgdGhvdSB0aGluayw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCBJIGhhdmUgaGFkIG5vIGhlbHAgZnJvbSBQbGF0bywgd2hlbiBJIGJlYXIgbXkgY2hhbmdlIG9mIGZvcnR1bmUgYXMgSSBkbz88L3E+IEZ1cnRoZXIsIHdoZW4gQXJpc3RveGVudXMgdGhlIG11c2ljaWFuIGFuZCBjZXJ0YWluIG90aGVycyBpbnF1aXJlZCB3aGF0IGhpcyBjb21wbGFpbnQgYWdhaW5zdCBQbGF0byB3YXMgYW5kIHdoYXQgaXRzIG9yaWdpbiwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+aGUgdG9sZCB0aGVtIHRoYXQgb2YgdGhlIG1hbnkgaWxscyB3aXRoIHdoaWNoIHR5cmFubnkgYWJvdW5kZWQgdGhlcmUgd2FzIG5vbmUgc28gZ3JlYXQgYXMgdGhpcywgdGhhdCBub3Qgb25lIG9mIHRob3NlIHJlcHV0ZWQgdG8gYmUgZnJpZW5kcyBzcGVha3MgZnJhbmtseSB3aXRoIHRoZSB0eXJhbnQ7IGZvciBpbmRlZWQgaXQgd2FzIGJ5IHN1Y2ggZnJpZW5kcyB0aGF0IGhlIGhpbXNlbGYgaGFkIGJlZW4gZGVwcml2ZWQgb2YgUGxhdG8ncyBnb29kIHdpbGwuIEFnYWluLCB3aGVuIG9uZSBvZiB0aG9zZSB3aG8gd2lzaCB0byBiZSB3aXR0eSwgaW4gbW9ja2VyeSBvZiBEaW9ueXNpdXMgc2hvb2sgb3V0IGhpcyByb2JlIG9uIGNvbWluZyBpbnRvIGhpcyBwcmVzZW5jZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UbyBzaG93IHRoYXQgbm8gd2VhcG9uIHdhcyBjb25jZWFsZWQgdGhlcmUuPC9ub3RlPiBhcyBpZiBpbnRvIHRoZSBwcmVzZW5jZSBvZiBhIHR5cmFudCwgRGlvbnlzaXVzIHR1cm5lZCB0aGUgamVzdCB1cG9uIGhpbSBieSBiaWRkaW5nIGhpbSBkbyBzbyB3aGVuIGhlIHdlbnQgb3V0IGZyb20gaGlzIHByZXNlbmNlLCB0aGF0IGhlIG1pZ2h0IG5vdCB0YWtlIGFueXRoaW5nIGluIHRoZSBob3VzZSBhd2F5IHdpdGggaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBQaGlsaXAgb2YgTWFjZWRvbiwgYXQgYSBiYW5xdWV0LCBiZWdhbiB0byB0YWxrIGluIGJhbnRlciBhYm91dCB0aGUgbHlyaWMgcG9lbXMgYW5kIHRyYWdlZGllcyB3aGljaCBEaW9ueXNpdXMgdGhlIEVsZGVyIGhhZCBsZWZ0IGJlaGluZCBoaW0sIGFuZCBwcmV0ZW5kZWQgdG8gd29uZGVyIHdoZW4gdGhhdCBtb25hcmNoIGZvdW5kIHRpbWUgZm9yIHRoZXNlIGNvbXBvc2l0aW9ucywgRGlvbnlzaXVzIG5vdCBpbmFwdGx5IHJlcGxpZWQgYnkgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoZW4gdGhvdSBhbmQgSSBhbmQgYWxsIHRob3NlIHdob20gbWVuIGNhbGwgaGFwcHkgYXJlIGJ1c3kgYXQgdGhlIGJvd2wuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgY2VydGFpbiBzYXlpbmdzIG9mIGhpcyBhcmUgcHJlc2VydmVkLCBmcm9tIHdoaWNoIGl0IHdvdWxkIGFwcGVhciB0aGF0IGhlIGFjY29tbW9kYXRlZCBoaW1zZWxmIHRvIGhpcyBwcmVzZW50IGNpcmN1bXN0YW5jZXMgbm90IGlnbm9ibHkuIE9uY2UsIG5hbWVseSwgd2hlbiBoZSBsYW5kZWQgYXQgTGV1Y2FkaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbiBoaXMgdm95YWdlIGZyb20gU3lyYWN1c2UgdG8gQ29yaW50aC48L25vdGU+IGEgY2l0eSB3aGljaCBoYWQgYmVlbiBjb2xvbml6ZWQgYnkgQ29yaW50aGlhbnMsIGp1c3QgbGlrZSBTeXJhY3VzZSwgaGUgc2FpZCBoZSBoYWQgdGhlIHNhbWUgZmVlbGluZ3MgYXMgeW91bmcgbWVuIHdobyBoYXZlIGJlZW4gZ3VpbHR5IG9mIG1pc2RlbWVhbm91cnM7IGZvciBqdXN0IGFzIHRoZXNlIHBhc3MgdGhlaXIgdGltZSBtZXJyaWx5IHdpdGggdGhlaXIgYnJvdGhlcnMsIGJ1dCBzaHVuIHRoZWlyIGZhdGhlcnMgZnJvbSBhIGZlZWxpbmcgb2Ygc2hhbWUsIHNvIGhlIHdhcyBhc2hhbWVkIHRvIGxpdmUgaW4gdGhlaXIgY29tbW9uIG1vdGhlci1jaXR5LCBhbmQgd291bGQgZ2xhZGx5IGR3ZWxsIHRoZXJlIHdpdGggdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZ2FpbiwgaW4gQ29yaW50aCwgd2hlbiBhIHN0cmFuZ2VyIHNvbWV3aGF0IHJ1ZGVseSBkZXJpZGVkIGhpbSBhYm91dCBoaXMgYXNzb2NpYXRpb25zIHdpdGggcGhpbG9zb3BoZXJzLCBpbiB3aGljaCBoZSB1c2VkIHRvIHRha2UgZGVsaWdodCB3aGVuIGhlIHdhcyBhIHR5cmFudCwgYW5kIGZpbmFsbHkgYXNrZWQgaGltIHdoYXQgZ29vZCBQbGF0bydzIHdpc2RvbSBkaWQgaGltIG5vdywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvc3QgdGhvdSB0aGluayw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGF0IEkgaGF2ZSBoYWQgbm8gaGVscCBmcm9tIFBsYXRvLCB3aGVuIEkgYmVhciBteSBjaGFuZ2Ugb2YgZm9ydHVuZSBhcyBJIGRvPzwvcT4gRnVydGhlciwgd2hlbiBBcmlzdG94ZW51cyB0aGUgbXVzaWNpYW4gYW5kIGNlcnRhaW4gb3RoZXJzIGlucXVpcmVkIHdoYXQgaGlzIGNvbXBsYWludCBhZ2FpbnN0IFBsYXRvIHdhcyBhbmQgd2hhdCBpdHMgb3JpZ2luLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmhlIHRvbGQgdGhlbSB0aGF0IG9mIHRoZSBtYW55IGlsbHMgd2l0aCB3aGljaCB0eXJhbm55IGFib3VuZGVkIHRoZXJlIHdhcyBub25lIHNvIGdyZWF0IGFzIHRoaXMsIHRoYXQgbm90IG9uZSBvZiB0aG9zZSByZXB1dGVkIHRvIGJlIGZyaWVuZHMgc3BlYWtzIGZyYW5rbHkgd2l0aCB0aGUgdHlyYW50OyBmb3IgaW5kZWVkIGl0IHdhcyBieSBzdWNoIGZyaWVuZHMgdGhhdCBoZSBoaW1zZWxmIGhhZCBiZWVuIGRlcHJpdmVkIG9mIFBsYXRvJ3MgZ29vZCB3aWxsLiBBZ2Fpbiwgd2hlbiBvbmUgb2YgdGhvc2Ugd2hvIHdpc2ggdG8gYmUgd2l0dHksIGluIG1vY2tlcnkgb2YgRGlvbnlzaXVzIHNob29rIG91dCBoaXMgcm9iZSBvbiBjb21pbmcgaW50byBoaXMgcHJlc2VuY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UbyBzaG93IHRoYXQgbm8gd2VhcG9uIHdhcyBjb25jZWFsZWQgdGhlcmUuPC9ub3RlPiBhcyBpZiBpbnRvIHRoZSBwcmVzZW5jZSBvZiBhIHR5cmFudCwgRGlvbnlzaXVzIHR1cm5lZCB0aGUgamVzdCB1cG9uIGhpbSBieSBiaWRkaW5nIGhpbSBkbyBzbyB3aGVuIGhlIHdlbnQgb3V0IGZyb20gaGlzIHByZXNlbmNlLCB0aGF0IGhlIG1pZ2h0IG5vdCB0YWtlIGFueXRoaW5nIGluIHRoZSBob3VzZSBhd2F5IHdpdGggaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFBoaWxpcCBvZiBNYWNlZG9uLCBhdCBhIGJhbnF1ZXQsIGJlZ2FuIHRvIHRhbGsgaW4gYmFudGVyIGFib3V0IHRoZSBseXJpYyBwb2VtcyBhbmQgdHJhZ2VkaWVzIHdoaWNoIERpb255c2l1cyB0aGUgRWxkZXIgaGFkIGxlZnQgYmVoaW5kIGhpbSwgYW5kIHByZXRlbmRlZCB0byB3b25kZXIgd2hlbiB0aGF0IG1vbmFyY2ggZm91bmQgdGltZSBmb3IgdGhlc2UgY29tcG9zaXRpb25zLCBEaW9ueXNpdXMgbm90IGluYXB0bHkgcmVwbGllZCBieSBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVuIHRob3UgYW5kIEkgYW5kIGFsbCB0aG9zZSB3aG9tIG1lbiBjYWxsIGhhcHB5IGFyZSBidXN5IGF0IHRoZSBib3dsLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBQbGF0byBkaWQgbm90IGxpdmUgdG8gc2VlIERpb255c2l1cyB3aGVuIGhlIHdhcyBpbiBDb3JpbnRoLCBidXQgaGUgd2FzIGFscmVhZHkgZGVhZDs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QbGF0byBkaWVkIGluIDM0OCBCLkMuOyBEaW9ueXNpdXMgY2FtZSB0byBDb3JpbnRoIGluIDM0MyBCLkMuPC9ub3RlPiBEaW9nZW5lcyBvZiBTaW5vcGUsIGhvd2V2ZXIsIG9uIG1lZXRpbmcgaGltIGZvciB0aGUgZmlyc3QgdGltZSwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ib3cgbGl0dGxlIHRob3UgZGVzZXJ2ZXN0LCBEaW9ueXNpdXMsIHRodXMgdG8gbGl2ZSE8L3E+IFVwb24gdGhpcywgRGlvbnlzaXVzIHN0b3BwZWQgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgZ29vZCBvZiB0aGVlLCBPIERpb2dlbmVzLCB0byBzeW1wYXRoaXplIHdpdGggbWUgaW4gbXkgbWlzZm9ydHVuZXMuPC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SG93IGlzIHRoYXQ/PC9xPiBzYWlkIERpb2dlbmVzOyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvc3QgdGhvdSBzdXBwb3NlIHRoYXQgSSBhbSBzeW1wYXRoaXppbmcgd2l0aCB0aGVlPyBOYXksIEkgYW0gaW5kaWduYW50IHRoYXQgc3VjaCBhIHNsYXZlIGFzIHRob3UsIGFuZCBvbmUgc28gd29ydGh5IHRvIGhhdmUgZ3Jvd24gb2xkIGFuZCBkaWVkIGluIHRoZSB0eXJhbnQncyBlc3RhdGUsIGp1c3QgYXMgdGh5IGZhdGhlciBkaWQsIHNob3VsZCBiZSBsaXZpbmcgaGVyZSB3aXRoIHVzIGluIG1pcnRoIGFuZCBsdXh1cnkuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgd2hlbiBJIGNvbXBhcmUgd2l0aCB0aGVzZSB3b3JkcyB0aGUgbW91cm5mdWwgdXR0ZXJhbmNlcyBvZiBQaGlsaXN0dXMgYWJvdXQgdGhlIGRhdWdodGVycyBvZiBMZXB0aW5lcywgaG93IGZyb20gdGhlIGdyZWF0IGJsZXNzaW5ncyBvZiB0aGUgdHlyYW5ueSB0aGV5IGZlbGwgdG8gYSBsb3dseSBsaWZlLCB0aGV5IHNlZW0gdGhlIGxhbWVudGF0aW9ucyBvZiBhIHdvbWFuIHdobyBwaW5lcyBmb3IgaGVyIGFsYWJhc3RlciBjYXNrZXRzIGFuZCBwdXJwbGUgZ293bnMgYW5kIGdvbGRlbiB0cmlua2V0cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgUGxhdG8gZGlkIG5vdCBsaXZlIHRvIHNlZSBEaW9ueXNpdXMgd2hlbiBoZSB3YXMgaW4gQ29yaW50aCwgYnV0IGhlIHdhcyBhbHJlYWR5IGRlYWQ7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QbGF0byBkaWVkIGluIDM0OCBCLkMuOyBEaW9ueXNpdXMgY2FtZSB0byBDb3JpbnRoIGluIDM0MyBCLkMuPC9ub3RlPiBEaW9nZW5lcyBvZiBTaW5vcGUsIGhvd2V2ZXIsIG9uIG1lZXRpbmcgaGltIGZvciB0aGUgZmlyc3QgdGltZSwgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhvdyBsaXR0bGUgdGhvdSBkZXNlcnZlc3QsIERpb255c2l1cywgdGh1cyB0byBsaXZlITwvcT4gVXBvbiB0aGlzLCBEaW9ueXNpdXMgc3RvcHBlZCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIGdvb2Qgb2YgdGhlZSwgTyBEaW9nZW5lcywgdG8gc3ltcGF0aGl6ZSB3aXRoIG1lIGluIG15IG1pc2ZvcnR1bmVzLjwvcT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SG93IGlzIHRoYXQ/PC9xPiBzYWlkIERpb2dlbmVzOyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9zdCB0aG91IHN1cHBvc2UgdGhhdCBJIGFtIHN5bXBhdGhpemluZyB3aXRoIHRoZWU/IE5heSwgSSBhbSBpbmRpZ25hbnQgdGhhdCBzdWNoIGEgc2xhdmUgYXMgdGhvdSwgYW5kIG9uZSBzbyB3b3J0aHkgdG8gaGF2ZSBncm93biBvbGQgYW5kIGRpZWQgaW4gdGhlIHR5cmFudCdzIGVzdGF0ZSwganVzdCBhcyB0aHkgZmF0aGVyIGRpZCwgc2hvdWxkIGJlIGxpdmluZyBoZXJlIHdpdGggdXMgaW4gbWlydGggYW5kIGx1eHVyeS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgd2hlbiBJIGNvbXBhcmUgd2l0aCB0aGVzZSB3b3JkcyB0aGUgbW91cm5mdWwgdXR0ZXJhbmNlcyBvZiBQaGlsaXN0dXMgYWJvdXQgdGhlIGRhdWdodGVycyBvZiBMZXB0aW5lcywgaG93IGZyb20gdGhlIGdyZWF0IGJsZXNzaW5ncyBvZiB0aGUgdHlyYW5ueSB0aGV5IGZlbGwgdG8gYSBsb3dseSBsaWZlLCB0aGV5IHNlZW0gdGhlIGxhbWVudGF0aW9ucyBvZiBhIHdvbWFuIHdobyBwaW5lcyBmb3IgaGVyIGFsYWJhc3RlciBjYXNrZXRzIGFuZCBwdXJwbGUgZ293bnMgYW5kIGdvbGRlbiB0cmlua2V0cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVzZSBkZXRhaWxzLCB0aGVuLCB3aWxsIG5vdCBzZWVtIGZvcmVpZ24gdG8gbXkgYmlvZ3JhcGh5LCBJIHRoaW5rLCBub3Igd2l0aG91dCB1c2VmdWxuZXNzLCB0byByZWFkZXJzIHdobyBhcmUgbm90IGluIGhhc3RlLCBhbmQgYXJlIG5vdCBvY2N1cGllZCB3aXRoIG90aGVyIG1hdHRlcnMuCgkJCTwvcD4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRob3VnaCB0aGUgbWlzZm9ydHVuZSBvZiBEaW9ueXNpdXMgc2VlbWVkIGV4dHJhb3JkaW5hcnksIG5vbmUgdGhlIGxlc3MgZGlkIHRoZSBnb29kIGZvcnR1bmUgb2YgVGltb2xlb24gaGF2ZSBzb21ldGhpbmcgbWFydmVsbG91cyBhYm91dCBpdC4gRm9yIHdpdGhpbiBmaWZ0eSBkYXlzIGFmdGVyIGhpcyBsYW5kaW5nIGluIFNpY2lseSB0aGUgYWNyb3BvbGlzIG9mIFN5cmFjdXNlIHdhcyBzdXJyZW5kZXJlZCB0byBoaW0gYW5kIERpb255c2l1cyB3YXMgc2VudCBvZmYgdG8gUGVsb3Bvbm5lc3VzLiBTdGltdWxhdGVkIGJ5IHRoaXMgc3VjY2VzcywgdGhlIENvcmludGhpYW5zIHNlbnQgaGltIHR3byB0aG91c2FuZCBtZW4tYXQtYXJtcyBhbmQgdHdvIGh1bmRyZWQgaG9yc2VtZW4uICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBnb3QgYXMgZmFyIGFzIFRodXJpaSwgYnV0IHNlZWluZyB0aGF0IHRoZWlyIHBhc3NhZ2UgdGhlbmNlIHdhcyBpbXByYWN0aWNhYmxlLCBzaW5jZSB0aGUgc2VhIHdhcyBiZXNldCB3aXRoIG1hbnkgQ2FydGhhZ2luaWFuIHNoaXBzLCB0aGV5IHdlcmUgY29tcGVsbGVkIHRvIHJlbWFpbiB0aGVyZSBxdWlldGx5IGFuZCBhd2FpdCB0aGVpciBvcHBvcnR1bml0eSwgYW5kIHRoZXJlZm9yZSB0dXJuZWQgdGhlaXIgbGVpc3VyZSB0byBhZHZhbnRhZ2UgaW4gYSBtb3N0IG5vYmxlIGFjdGlvbi4gV2hlbiB0aGUgVGh1cmlhbnMsIG5hbWVseSwgd2VudCBvbiBhbiBleHBlZGl0aW9uIGFnYWluc3QgdGhlIEJydXR0aWFucywgdGhlIENvcmludGhpYW5zIHJlY2VpdmVkIHRoZWlyIGNpdHkgaW4gY2hhcmdlLCBhbmQgZ3VhcmRlZCBpdCBob25lc3RseSBhbmQgZmFpdGhmdWxseSB0byB0aGUgZW5kLCBhcyB0aG91Z2ggaXQgd2VyZSB0aGVpciBvd24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRob3VnaCB0aGUgbWlzZm9ydHVuZSBvZiBEaW9ueXNpdXMgc2VlbWVkIGV4dHJhb3JkaW5hcnksIG5vbmUgdGhlIGxlc3MgZGlkIHRoZSBnb29kIGZvcnR1bmUgb2YgVGltb2xlb24gaGF2ZSBzb21ldGhpbmcgbWFydmVsbG91cyBhYm91dCBpdC4gRm9yIHdpdGhpbiBmaWZ0eSBkYXlzIGFmdGVyIGhpcyBsYW5kaW5nIGluIFNpY2lseSB0aGUgYWNyb3BvbGlzIG9mIFN5cmFjdXNlIHdhcyBzdXJyZW5kZXJlZCB0byBoaW0gYW5kIERpb255c2l1cyB3YXMgc2VudCBvZmYgdG8gUGVsb3Bvbm5lc3VzLiBTdGltdWxhdGVkIGJ5IHRoaXMgc3VjY2VzcywgdGhlIENvcmludGhpYW5zIHNlbnQgaGltIHR3byB0aG91c2FuZCBtZW4tYXQtYXJtcyBhbmQgdHdvIGh1bmRyZWQgaG9yc2VtZW4uICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGdvdCBhcyBmYXIgYXMgVGh1cmlpLCBidXQgc2VlaW5nIHRoYXQgdGhlaXIgcGFzc2FnZSB0aGVuY2Ugd2FzIGltcHJhY3RpY2FibGUsIHNpbmNlIHRoZSBzZWEgd2FzIGJlc2V0IHdpdGggbWFueSBDYXJ0aGFnaW5pYW4gc2hpcHMsIHRoZXkgd2VyZSBjb21wZWxsZWQgdG8gcmVtYWluIHRoZXJlIHF1aWV0bHkgYW5kIGF3YWl0IHRoZWlyIG9wcG9ydHVuaXR5LCBhbmQgdGhlcmVmb3JlIHR1cm5lZCB0aGVpciBsZWlzdXJlIHRvIGFkdmFudGFnZSBpbiBhIG1vc3Qgbm9ibGUgYWN0aW9uLiBXaGVuIHRoZSBUaHVyaWFucywgbmFtZWx5LCB3ZW50IG9uIGFuIGV4cGVkaXRpb24gYWdhaW5zdCB0aGUgQnJ1dHRpYW5zLCB0aGUgQ29yaW50aGlhbnMgcmVjZWl2ZWQgdGhlaXIgY2l0eSBpbiBjaGFyZ2UsIGFuZCBndWFyZGVkIGl0IGhvbmVzdGx5IGFuZCBmYWl0aGZ1bGx5IHRvIHRoZSBlbmQsIGFzIHRob3VnaCBpdCB3ZXJlIHRoZWlyIG93bi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEhpY2V0YXMga2VwdCB0aGUgYWNyb3BvbGlzIG9mIFN5cmFjdXNlIHVuZGVyIHNpZWdlIGFuZCBwcmV2ZW50ZWQgdGhlIGltcG9ydGF0aW9uIG9mIGZvb2QgZm9yIHRoZSBDb3JpbnRoaWFucyB0aGVyZTsgaGUgYWxzbyBzZW50IHRvIEFkcmFudW0gdHdvIGZvcmVpZ25lcnMgd2hvbSBoZSBoYWQgZW5nYWdlZCB0byBhc3Nhc3NpbmF0ZSBUaW1vbGVvbjsgZm9yIFRpbW9sZW9uIGF0IG5vIHRpbWUga2VwdCBhIGd1YXJkIGluIGFycmF5IGFib3V0IGhpcyBwZXJzb24sIGFuZCBhdCB0aGlzIHRpbWUgaW4gcGFydGljdWxhciwgb3dpbmcgdG8gaGlzIHRydXN0IGluIHRoZWlyIGdvZCwgaGUgd2FzIGFsdG9nZXRoZXIgd2l0aG91dCBhbnhpZXR5IG9yIHN1c3BpY2lvbiBpbiBoaXMgZGl2ZXJzaW9ucyB3aXRoIHRoZSBwZW9wbGUgb2YgQWRyYW51bS4gVGhlIG1lbiB3aG8gaGFkIHRodXMgYmVlbiBzZW50IGxlYXJuZWQsIGFzIGNoYW5jZSB3b3VsZCBoYXZlIGl0LCB0aGF0IGhlIHdhcyBhYm91dCB0byBvZmZlciBhIHNhY3JpZmljZSwgYW5kIHRoZXJlZm9yZSBjYW1lIGludG8gdGhlIHNhY3JlZCBwcmVjaW5jdCB3aXRoIGRhZ2dlcnMgdW5kZXIgdGhlaXIgcm9iZXMsIG1pbmdsZWQgd2l0aCB0aG9zZSB3aG8gc3Rvb2QgYXJvdW5kIHRoZSBhbHRhciwgYW5kIGdyYWR1YWxseSBkcmV3IG5lYXJlciB0aGVpciBpbnRlbmRlZCB2aWN0aW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyB0aGV5IHdlcmUganVzdCBvbiB0aGUgcG9pbnQgb2YgZXhob3J0aW5nIG9uZSBhbm90aGVyIHRvIGJlZ2luIHRoZWlyIHdvcmssIHNvbWVib2R5IHNtb3RlIG9uZSBvZiB0aGVtIG9uIHRoZSBoZWFkIHdpdGggYSBzd29yZCBhbmQgbGFpZCBoaW0gbG93LCB3aGVyZXVwb24gbmVpdGhlciBoZSB3aG8gaGFkIHN0cnVjayB0aGUgYmxvdyBub3IgdGhlIGNvbXBhbmlvbiBvZiBoaW0gd2hvIGhhZCByZWNlaXZlZCBpdCBrZXB0IGhpcyBwbGFjZTsgYnV0IHRoZSBvbmUsIHdpdGggaGlzIHN3b3JkIHN0aWxsIGluIGhpcyBoYW5kLCBmbGVkIHRvIGEgbG9mdHkgcm9jayBhbmQgc3ByYW5nIHVwb24gaXQsIHdoaWxlIHRoZSBvdGhlciBsYWlkIGhvbGQgb2YgdGhlIGFsdGFyIGFuZCBiZWdnZWQgaW1tdW5pdHkgZnJvbSBUaW1vbGVvbiBvbiB0aGUgY29uZGl0aW9uIG9mIGhpcyByZXZlYWxpbmcgZXZlcnl0aGluZy4gQW5kIHdoZW4gaGUgaGFkIG9idGFpbmVkIGhpcyByZXF1ZXN0LCBoZSB0ZXN0aWZpZWQgYWdhaW5zdCBoaW1zZWxmIGFuZCBhZ2FpbnN0IGhpcyBkZWFkIGNvbXJhZGUgdGhhdCB0aGV5IGhhZCBiZWVuIHNlbnQgdG8ga2lsbCBUaW1vbGVvbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIG90aGVycyBicm91Z2h0IGRvd24gdGhlIG1hbiB3aG8gaGFkIGZsZWQgdG8gdGhlIHJvY2ssIHdobyBrZXB0IGNyeWluZyBvdXQgdGhhdCBoZSBoYWQgZG9uZSBubyB3cm9uZywgYnV0IGhhZCBqdXN0bHkgc2xhaW4gdGhlIG1hbiBvbiBiZWhhbGYgb2YgaGlzIGRlYWQgZmF0aGVyLCB3aG8gaGFkIGJlZW4gbXVyZGVyZWQgYnkgaGltIHNvbWUgdGltZSBhZ28gaW4gTGVvbnRpbmkuIFNvbWUgb2YgdGhlIGJ5c3RhbmRlcnMgYm9yZSB3aXRuZXNzIGFsc28gdG8gdGhlIHRydXRoIG9mIGhpcyB3b3JkcywgYW5kIHdvbmRlcmVkLCB0b28sIGF0IHRoZSBkZXh0ZXJpdHkgb2YgRm9ydHVuZSwgc2VlaW5nIGhvdyBzaGUgbWFrZXMgc29tZSB0aGluZ3MgbGVhZCB1cCB0byBvdGhlcnMsIGJyaW5ncyBhbGwgdGhpbmdzIHRvZ2V0aGVyIGZyb20gYWZhciwgd2VhdmVzIHRvZ2V0aGVyIGluY2lkZW50cyB3aGljaCBzZWVtIHRvIGJlIG1vc3QgZGl2ZXJnZW50IGFuZCB0byBoYXZlIG5vdGhpbmcgaW4gY29tbW9uIHdpdGggb25lIGFub3RoZXIsIGFuZCBzbyBtYWtlcyB1c2Ugb2YgdGhlaXIgcmVjaXByb2NhbCBiZWdpbm5pbmdzIGFuZCBlbmRpbmdzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBIaWNldGFzIGtlcHQgdGhlIGFjcm9wb2xpcyBvZiBTeXJhY3VzZSB1bmRlciBzaWVnZSBhbmQgcHJldmVudGVkIHRoZSBpbXBvcnRhdGlvbiBvZiBmb29kIGZvciB0aGUgQ29yaW50aGlhbnMgdGhlcmU7IGhlIGFsc28gc2VudCB0byBBZHJhbnVtIHR3byBmb3JlaWduZXJzIHdob20gaGUgaGFkIGVuZ2FnZWQgdG8gYXNzYXNzaW5hdGUgVGltb2xlb247IGZvciBUaW1vbGVvbiBhdCBubyB0aW1lIGtlcHQgYSBndWFyZCBpbiBhcnJheSBhYm91dCBoaXMgcGVyc29uLCBhbmQgYXQgdGhpcyB0aW1lIGluIHBhcnRpY3VsYXIsIG93aW5nIHRvIGhpcyB0cnVzdCBpbiB0aGVpciBnb2QsIGhlIHdhcyBhbHRvZ2V0aGVyIHdpdGhvdXQgYW54aWV0eSBvciBzdXNwaWNpb24gaW4gaGlzIGRpdmVyc2lvbnMgd2l0aCB0aGUgcGVvcGxlIG9mIEFkcmFudW0uIFRoZSBtZW4gd2hvIGhhZCB0aHVzIGJlZW4gc2VudCBsZWFybmVkLCBhcyBjaGFuY2Ugd291bGQgaGF2ZSBpdCwgdGhhdCBoZSB3YXMgYWJvdXQgdG8gb2ZmZXIgYSBzYWNyaWZpY2UsIGFuZCB0aGVyZWZvcmUgY2FtZSBpbnRvIHRoZSBzYWNyZWQgcHJlY2luY3Qgd2l0aCBkYWdnZXJzIHVuZGVyIHRoZWlyIHJvYmVzLCBtaW5nbGVkIHdpdGggdGhvc2Ugd2hvIHN0b29kIGFyb3VuZCB0aGUgYWx0YXIsIGFuZCBncmFkdWFsbHkgZHJldyBuZWFyZXIgdGhlaXIgaW50ZW5kZWQgdmljdGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyB0aGV5IHdlcmUganVzdCBvbiB0aGUgcG9pbnQgb2YgZXhob3J0aW5nIG9uZSBhbm90aGVyIHRvIGJlZ2luIHRoZWlyIHdvcmssIHNvbWVib2R5IHNtb3RlIG9uZSBvZiB0aGVtIG9uIHRoZSBoZWFkIHdpdGggYSBzd29yZCBhbmQgbGFpZCBoaW0gbG93LCB3aGVyZXVwb24gbmVpdGhlciBoZSB3aG8gaGFkIHN0cnVjayB0aGUgYmxvdyBub3IgdGhlIGNvbXBhbmlvbiBvZiBoaW0gd2hvIGhhZCByZWNlaXZlZCBpdCBrZXB0IGhpcyBwbGFjZTsgYnV0IHRoZSBvbmUsIHdpdGggaGlzIHN3b3JkIHN0aWxsIGluIGhpcyBoYW5kLCBmbGVkIHRvIGEgbG9mdHkgcm9jayBhbmQgc3ByYW5nIHVwb24gaXQsIHdoaWxlIHRoZSBvdGhlciBsYWlkIGhvbGQgb2YgdGhlIGFsdGFyIGFuZCBiZWdnZWQgaW1tdW5pdHkgZnJvbSBUaW1vbGVvbiBvbiB0aGUgY29uZGl0aW9uIG9mIGhpcyByZXZlYWxpbmcgZXZlcnl0aGluZy4gQW5kIHdoZW4gaGUgaGFkIG9idGFpbmVkIGhpcyByZXF1ZXN0LCBoZSB0ZXN0aWZpZWQgYWdhaW5zdCBoaW1zZWxmIGFuZCBhZ2FpbnN0IGhpcyBkZWFkIGNvbXJhZGUgdGhhdCB0aGV5IGhhZCBiZWVuIHNlbnQgdG8ga2lsbCBUaW1vbGVvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSBvdGhlcnMgYnJvdWdodCBkb3duIHRoZSBtYW4gd2hvIGhhZCBmbGVkIHRvIHRoZSByb2NrLCB3aG8ga2VwdCBjcnlpbmcgb3V0IHRoYXQgaGUgaGFkIGRvbmUgbm8gd3JvbmcsIGJ1dCBoYWQganVzdGx5IHNsYWluIHRoZSBtYW4gb24gYmVoYWxmIG9mIGhpcyBkZWFkIGZhdGhlciwgd2hvIGhhZCBiZWVuIG11cmRlcmVkIGJ5IGhpbSBzb21lIHRpbWUgYWdvIGluIExlb250aW5pLiBTb21lIG9mIHRoZSBieXN0YW5kZXJzIGJvcmUgd2l0bmVzcyBhbHNvIHRvIHRoZSB0cnV0aCBvZiBoaXMgd29yZHMsIGFuZCB3b25kZXJlZCwgdG9vLCBhdCB0aGUgZGV4dGVyaXR5IG9mIEZvcnR1bmUsIHNlZWluZyBob3cgc2hlIG1ha2VzIHNvbWUgdGhpbmdzIGxlYWQgdXAgdG8gb3RoZXJzLCBicmluZ3MgYWxsIHRoaW5ncyB0b2dldGhlciBmcm9tIGFmYXIsIHdlYXZlcyB0b2dldGhlciBpbmNpZGVudHMgd2hpY2ggc2VlbSB0byBiZSBtb3N0IGRpdmVyZ2VudCBhbmQgdG8gaGF2ZSBub3RoaW5nIGluIGNvbW1vbiB3aXRoIG9uZSBhbm90aGVyLCBhbmQgc28gbWFrZXMgdXNlIG9mIHRoZWlyIHJlY2lwcm9jYWwgYmVnaW5uaW5ncyBhbmQgZW5kaW5ncy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhpcyBtYW4sIHRoZW4sIHRoZSBDb3JpbnRoaWFucyBnYXZlIGEgcmV3YXJkIG9mIHRlbiBtaW5hcywgYmVjYXVzZSBoZSBoYWQgcHV0IGhpcyBqdXN0IHJlc2VudG1lbnQgYXQgdGhlIHNlcnZpY2Ugb2YgdGhlIGRlaXR5IHdobyB3YXMgZ3VhcmRpbmcgVGltb2xlb24sIGFuZCBoYWQgbm90IGF0IGFuIGVhcmxpZXIgdGltZSBleHBlbmRlZCB0aGUgd3JhdGggd2hpY2ggaGFkIGxvbmcgYmVlbiBpbiBoaXMgaGVhcnQsIGJ1dCB3aXRoIGEgcGVyc29uYWwgbW90aXZlIGhhZCByZXNlcnZlZCBpdCwgdW5kZXIgRm9ydHVuZSdzIGd1aWRhbmNlLCBmb3IgdGhlIHByZXNlcnZhdGlvbiBvZiB0aGF0IGdlbmVyYWwuIE1vcmVvdmVyLCB0aGVpciBnb29kIGZvcnR1bmUgaW4gdGhlIHByZXNlbnQgY3Jpc2lzIHJhaXNlZCB0aGVpciBob3BlcyBmb3IgdGhlIGZ1dHVyZSBhbHNvLCBhbmQgdGhleSBhbnRpY2lwYXRlZCB0aGF0IG1lbiB3b3VsZCByZXZlcmUgYW5kIHByb3RlY3QgVGltb2xlb24sIGxvb2tpbmcgdXBvbiBoaW0gYXMgYSBzYWNyZWQgcGVyc29uYWdlLCBhbmQgb25lIHdobyBoYWQgY29tZSB1bmRlciBkaXZpbmUgZ3VpZGFuY2UgdG8gYXZlbmdlIHRoZSB3cm9uZ3Mgb2YgU2ljaWx5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBHcmVlayBvZiB0aGlzIHNlbnRlbmNlIGlzIG9ic2N1cmUsIGFuZCBoYXMgdGh1cyBmYXIgZGVmaWVkIGVtZW5kYXRpb24uPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgbWFuLCB0aGVuLCB0aGUgQ29yaW50aGlhbnMgZ2F2ZSBhIHJld2FyZCBvZiB0ZW4gbWluYXMsIGJlY2F1c2UgaGUgaGFkIHB1dCBoaXMganVzdCByZXNlbnRtZW50IGF0IHRoZSBzZXJ2aWNlIG9mIHRoZSBkZWl0eSB3aG8gd2FzIGd1YXJkaW5nIFRpbW9sZW9uLCBhbmQgaGFkIG5vdCBhdCBhbiBlYXJsaWVyIHRpbWUgZXhwZW5kZWQgdGhlIHdyYXRoIHdoaWNoIGhhZCBsb25nIGJlZW4gaW4gaGlzIGhlYXJ0LCBidXQgd2l0aCBhIHBlcnNvbmFsIG1vdGl2ZSBoYWQgcmVzZXJ2ZWQgaXQsIHVuZGVyIEZvcnR1bmUncyBndWlkYW5jZSwgZm9yIHRoZSBwcmVzZXJ2YXRpb24gb2YgdGhhdCBnZW5lcmFsLiBNb3Jlb3ZlciwgdGhlaXIgZ29vZCBmb3J0dW5lIGluIHRoZSBwcmVzZW50IGNyaXNpcyByYWlzZWQgdGhlaXIgaG9wZXMgZm9yIHRoZSBmdXR1cmUgYWxzbywgYW5kIHRoZXkgYW50aWNpcGF0ZWQgdGhhdCBtZW4gd291bGQgcmV2ZXJlIGFuZCBwcm90ZWN0IFRpbW9sZW9uLCBsb29raW5nIHVwb24gaGltIGFzIGEgc2FjcmVkIHBlcnNvbmFnZSwgYW5kIG9uZSB3aG8gaGFkIGNvbWUgdW5kZXIgZGl2aW5lIGd1aWRhbmNlIHRvIGF2ZW5nZSB0aGUgd3JvbmdzIG9mIFNpY2lseS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBHcmVlayBvZiB0aGlzIHNlbnRlbmNlIGlzIG9ic2N1cmUsIGFuZCBoYXMgdGh1cyBmYXIgZGVmaWVkIGVtZW5kYXRpb24uPC9ub3RlPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBIaWNldGFzIGhhZCBmYWlsZWQgaW4gdGhpcyBhdHRlbXB0IGFuZCBzYXcgdGhhdCBtYW55IHdlcmUgbm93IHRocm9uZ2luZyB0byB0aGUgc3VwcG9ydCBvZiBUaW1vbGVvbiwgaGUgZm91bmQgZmF1bHQgd2l0aCBoaW1zZWxmIGJlY2F1c2UsIHdoZW4gc28gbGFyZ2UgYSBmb3JjZSBvZiB0aGUgQ2FydGhhZ2luaWFucyB3YXMgYXQgaGFuZCwgaGUgd2FzIHVzaW5nIGl0IGluIHNtYWxsIGRldGFjaG1lbnRzIGFuZCBzZWNyZXRseSwgYXMgdGhvdWdoIGhlIHdlcmUgYXNoYW1lZCBvZiBpdCwgYnJpbmdpbmcgaW4gaGlzIGFsbGllZCB0cm9vcHMgbGlrZSBhIHRoaWVmIGFuZCBieSBzdGVhbHRoOyBoZSB0aGVyZWZvcmUgY2FsbGVkIGluIE1hZ28gdGhlaXIgZ2VuZXJhbCB0b2dldGhlciB3aXRoIGhpcyB3aG9sZSBhcm1hbWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBNYWdvLCB3aXRoIGEgZm9ybWlkYWJsZSBmbGVldCBvZiBhIGh1bmRyZWQgYW5kIGZpZnR5IHNoaXBzLCBzYWlsZWQgaW4gYW5kIG9jY3VwaWVkIHRoZSBoYXJib3VyLCBkaXNlbWJhcmtpbmcgYWxzbyBzaXh0eSB0aG91c2FuZCBvZiBoaXMgaW5mYW50cnkgYW5kIGVuY2FtcGluZyB0aGVtIGluIHRoZSBjaXR5IG9mIFN5cmFjdXNlLCBzbyB0aGF0IGFsbCBtZW4gdGhvdWdodCB0aGF0IHRoZSBiYXJiYXJpemF0aW9uIG9mIFNpY2lseSwgbG9uZyB0YWxrZWQgb2YgYW5kIGV4cGVjdGVkLCBoYWQgY29tZSB1cG9uIGhlci4gRm9yIG5ldmVyIGJlZm9yZSBpbiBhbGwgdGhlaXIgY291bnRsZXNzIHdhcnMgaW4gU2ljaWx5IGhhZCB0aGUgQ2FydGhhZ2luaWFucyBzdWNjZWVkZWQgaW4gdGFraW5nIFN5cmFjdXNlOyBidXQgbm93IEhpY2V0YXMgYWRtaXR0ZWQgdGhlbSBhbmQgaGFuZGVkIG92ZXIgdG8gdGhlbSB0aGUgY2l0eSwgYW5kIG1lbiBzYXcgdGhhdCBpdCB3YXMgYSBiYXJiYXJpYW4gY2FtcC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRob3NlIG9mIHRoZSBDb3JpbnRoaWFucyB3aG8gaGVsZCB0aGUgYWNyb3BvbGlzIHdlcmUgYmVzZXQgd2l0aCBkaWZmaWN1bHR5IGFuZCBkYW5nZXI7IGZvciB0aGV5IG5vIGxvbmdlciBoYWQgc3VmZmljaWVudCBmb29kLCBidXQgc3VmZmVyZWQgbGFjayBiZWNhdXNlIHRoZSBoYXJib3VycyB3ZXJlIGJsb2NrYWRlZDsgYW5kIHRoZXkgd2VyZSBmb3JldmVyIGRpdmlkaW5nIHVwIHRoZWlyIGZvcmNlcyBpbiBza2lybWlzaGVzIGFuZCBiYXR0bGVzIGFyb3VuZCB0aGUgd2FsbHMsIGFuZCBpbiByZXBlbGxpbmcgYWxsIHNvcnRzIG9mIGVuZ2luZXMgYW5kIGV2ZXJ5IHNwZWNpZXMgb2Ygc2llZ2Ugd2FyZmFyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gSGljZXRhcyBoYWQgZmFpbGVkIGluIHRoaXMgYXR0ZW1wdCBhbmQgc2F3IHRoYXQgbWFueSB3ZXJlIG5vdyB0aHJvbmdpbmcgdG8gdGhlIHN1cHBvcnQgb2YgVGltb2xlb24sIGhlIGZvdW5kIGZhdWx0IHdpdGggaGltc2VsZiBiZWNhdXNlLCB3aGVuIHNvIGxhcmdlIGEgZm9yY2Ugb2YgdGhlIENhcnRoYWdpbmlhbnMgd2FzIGF0IGhhbmQsIGhlIHdhcyB1c2luZyBpdCBpbiBzbWFsbCBkZXRhY2htZW50cyBhbmQgc2VjcmV0bHksIGFzIHRob3VnaCBoZSB3ZXJlIGFzaGFtZWQgb2YgaXQsIGJyaW5naW5nIGluIGhpcyBhbGxpZWQgdHJvb3BzIGxpa2UgYSB0aGllZiBhbmQgYnkgc3RlYWx0aDsgaGUgdGhlcmVmb3JlIGNhbGxlZCBpbiBNYWdvIHRoZWlyIGdlbmVyYWwgdG9nZXRoZXIgd2l0aCBoaXMgd2hvbGUgYXJtYW1lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgTWFnbywgd2l0aCBhIGZvcm1pZGFibGUgZmxlZXQgb2YgYSBodW5kcmVkIGFuZCBmaWZ0eSBzaGlwcywgc2FpbGVkIGluIGFuZCBvY2N1cGllZCB0aGUgaGFyYm91ciwgZGlzZW1iYXJraW5nIGFsc28gc2l4dHkgdGhvdXNhbmQgb2YgaGlzIGluZmFudHJ5IGFuZCBlbmNhbXBpbmcgdGhlbSBpbiB0aGUgY2l0eSBvZiBTeXJhY3VzZSwgc28gdGhhdCBhbGwgbWVuIHRob3VnaHQgdGhhdCB0aGUgYmFyYmFyaXphdGlvbiBvZiBTaWNpbHksIGxvbmcgdGFsa2VkIG9mIGFuZCBleHBlY3RlZCwgaGFkIGNvbWUgdXBvbiBoZXIuIEZvciBuZXZlciBiZWZvcmUgaW4gYWxsIHRoZWlyIGNvdW50bGVzcyB3YXJzIGluIFNpY2lseSBoYWQgdGhlIENhcnRoYWdpbmlhbnMgc3VjY2VlZGVkIGluIHRha2luZyBTeXJhY3VzZTsgYnV0IG5vdyBIaWNldGFzIGFkbWl0dGVkIHRoZW0gYW5kIGhhbmRlZCBvdmVyIHRvIHRoZW0gdGhlIGNpdHksIGFuZCBtZW4gc2F3IHRoYXQgaXQgd2FzIGEgYmFyYmFyaWFuIGNhbXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG9zZSBvZiB0aGUgQ29yaW50aGlhbnMgd2hvIGhlbGQgdGhlIGFjcm9wb2xpcyB3ZXJlIGJlc2V0IHdpdGggZGlmZmljdWx0eSBhbmQgZGFuZ2VyOyBmb3IgdGhleSBubyBsb25nZXIgaGFkIHN1ZmZpY2llbnQgZm9vZCwgYnV0IHN1ZmZlcmVkIGxhY2sgYmVjYXVzZSB0aGUgaGFyYm91cnMgd2VyZSBibG9ja2FkZWQ7IGFuZCB0aGV5IHdlcmUgZm9yZXZlciBkaXZpZGluZyB1cCB0aGVpciBmb3JjZXMgaW4gc2tpcm1pc2hlcyBhbmQgYmF0dGxlcyBhcm91bmQgdGhlIHdhbGxzLCBhbmQgaW4gcmVwZWxsaW5nIGFsbCBzb3J0cyBvZiBlbmdpbmVzIGFuZCBldmVyeSBzcGVjaWVzIG9mIHNpZWdlIHdhcmZhcmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIFRpbW9sZW9uIGNhbWUgdG8gdGhlaXIgYWlkIGJ5IHNlbmRpbmcgdGhlbSBncmFpbiBmcm9tIENhdGFuYSBpbiBzbWFsbCBmaXNoaW5nIGJvYXRzIGFuZCBsaWdodCBza2lmZnM7IHRoZXNlIHdvdWxkIG1ha2UgdGhlaXIgd2F5IGluLCBlc3BlY2lhbGx5IGluIHN0b3JteSB3ZWF0aGVyLCBieSBzdGVhbGluZyBhbG9uZyB0aHJvdWdoIHRoZSBiYXJiYXJpYW4gdHJpcmVtZXMsIHdoaWNoIGxheSBhdCB3aWRlIGludGVydmFscyBmcm9tIG9uZSBhbm90aGVyIGJlY2F1c2Ugb2YgdGhlIHJvdWdobmVzcyBvZiB0aGUgc2VhLiBUaGlzIHNvb24gY2FtZSB0byB0aGUgbm90aWNlIG9mIE1hZ28gYW5kIEhpY2V0YXMsIHdobyB0aGVyZWZvcmUgZGV0ZXJtaW5lZCB0byB0YWtlIENhdGFuYSwgZnJvbSB3aGljaCBwcm92aXNpb25zIGNhbWUgaW4gYnkgc2VhIHRvIHRoZSBiZXNpZWdlZDsgc28gdGFraW5nIHdpdGggdGhlbSB0aGUgYmVzdCBvZiB0aGVpciBmaWdodGluZyBtZW4sIHRoZXkgc2FpbGVkIGZvcnRoIGZyb20gU3lyYWN1c2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBOZW9uIHRoZSBDb3JpbnRoaWFuIChmb3IgaGUgaXQgd2FzIHdobyBjb21tYW5kZWQgdGhlIGJlc2llZ2VkKSwgb2JzZXJ2aW5nIGZyb20gdGhlIGNpdGFkZWwgdGhhdCB0aGUgZW5lbXkgd2hvIGhhZCBiZWVuIGxlZnQgYmVoaW5kIHdlcmUga2VlcGluZyBhbiBlYXN5IGFuZCBjYXJlbGVzcyB3YXRjaCwgZmVsbCBzdWRkZW5seSB1cG9uIHRoZW0gYXMgdGhleSB3ZXJlIHNjYXR0ZXJlZCBhcGFydDsgc29tZSBoZSBzbGV3LCBvdGhlcnMgaGUgcHV0IHRvIGZsaWdodCwgYW5kIHRoZW4gbWFzdGVyZWQgYW5kIHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGUgcXVhcnRlciBjYWxsZWQgQWNocmFkaW5hLiBUaGlzIHNlZW1zIHRvIGhhdmUgYmVlbiB0aGUgc3Ryb25nZXN0IGFuZCBsZWFzdCB2dWxuZXJhYmxlIHBhcnQgb2YgdGhlIGNpdHkgb2YgU3lyYWN1c2UsIHdoaWNoIHdhcywgaW4gYSBtYW5uZXIsIGFuIGFzc2VtYmxhZ2UgYW5kIHVuaW9uIG9mIHNldmVyYWwgY2l0aWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgdGh1cyBzdXBwbGllZCBoaW1zZWxmIHdpdGggZ3JhaW4gYW5kIG1vbmV5LCBoZSBkaWQgbm90IGdpdmUgdXAgdGhlIHBsYWNlLCBub3IgZGlkIGhlIGdvIGJhY2sgYWdhaW4gdG8gdGhlIGNpdGFkZWwsIGJ1dCBmZW5jZWQgaW4gdGhlIGNpcmN1bWZlcmVuY2Ugb2YgQWNocmFkaW5hLCB1bml0ZWQgaXQgYnkgaGlzIGZvcnRpZmljYXRpb25zIHdpdGggdGhlIGFjcm9wb2xpcywgYW5kIGd1YXJkZWQgYm90aC4gTWFnbyBhbmQgSGljZXRhcyB3ZXJlIGFscmVhZHkgbmVhciBDYXRhbmEsIHdoZW4gYSBob3JzZW1hbiBmcm9tIFN5cmFjdXNlIG92ZXJ0b29rIHRoZW0gYW5kIHRvbGQgdGhlbSBvZiB0aGUgY2FwdHVyZSBvZiBBY2hyYWRpbmEuIFRoZXkgd2VyZSBjb25mb3VuZGVkIGJ5IHRoZSB0aWRpbmdzIGFuZCB3ZW50IGJhY2sgaW4gaGFzdGUsIGhhdmluZyBuZWl0aGVyIHRha2VuIHRoZSBjaXR5IGFnYWluc3Qgd2hpY2ggdGhleSB3ZW50IGZvcnRoLCBub3Iga2VwdCB0aGUgb25lIHRoZXkgaGFkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgVGltb2xlb24gY2FtZSB0byB0aGVpciBhaWQgYnkgc2VuZGluZyB0aGVtIGdyYWluIGZyb20gQ2F0YW5hIGluIHNtYWxsIGZpc2hpbmcgYm9hdHMgYW5kIGxpZ2h0IHNraWZmczsgdGhlc2Ugd291bGQgbWFrZSB0aGVpciB3YXkgaW4sIGVzcGVjaWFsbHkgaW4gc3Rvcm15IHdlYXRoZXIsIGJ5IHN0ZWFsaW5nIGFsb25nIHRocm91Z2ggdGhlIGJhcmJhcmlhbiB0cmlyZW1lcywgd2hpY2ggbGF5IGF0IHdpZGUgaW50ZXJ2YWxzIGZyb20gb25lIGFub3RoZXIgYmVjYXVzZSBvZiB0aGUgcm91Z2huZXNzIG9mIHRoZSBzZWEuIFRoaXMgc29vbiBjYW1lIHRvIHRoZSBub3RpY2Ugb2YgTWFnbyBhbmQgSGljZXRhcywgd2hvIHRoZXJlZm9yZSBkZXRlcm1pbmVkIHRvIHRha2UgQ2F0YW5hLCBmcm9tIHdoaWNoIHByb3Zpc2lvbnMgY2FtZSBpbiBieSBzZWEgdG8gdGhlIGJlc2llZ2VkOyBzbyB0YWtpbmcgd2l0aCB0aGVtIHRoZSBiZXN0IG9mIHRoZWlyIGZpZ2h0aW5nIG1lbiwgdGhleSBzYWlsZWQgZm9ydGggZnJvbSBTeXJhY3VzZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBOZW9uIHRoZSBDb3JpbnRoaWFuIChmb3IgaGUgaXQgd2FzIHdobyBjb21tYW5kZWQgdGhlIGJlc2llZ2VkKSwgb2JzZXJ2aW5nIGZyb20gdGhlIGNpdGFkZWwgdGhhdCB0aGUgZW5lbXkgd2hvIGhhZCBiZWVuIGxlZnQgYmVoaW5kIHdlcmUga2VlcGluZyBhbiBlYXN5IGFuZCBjYXJlbGVzcyB3YXRjaCwgZmVsbCBzdWRkZW5seSB1cG9uIHRoZW0gYXMgdGhleSB3ZXJlIHNjYXR0ZXJlZCBhcGFydDsgc29tZSBoZSBzbGV3LCBvdGhlcnMgaGUgcHV0IHRvIGZsaWdodCwgYW5kIHRoZW4gbWFzdGVyZWQgYW5kIHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGUgcXVhcnRlciBjYWxsZWQgQWNocmFkaW5hLiBUaGlzIHNlZW1zIHRvIGhhdmUgYmVlbiB0aGUgc3Ryb25nZXN0IGFuZCBsZWFzdCB2dWxuZXJhYmxlIHBhcnQgb2YgdGhlIGNpdHkgb2YgU3lyYWN1c2UsIHdoaWNoIHdhcywgaW4gYSBtYW5uZXIsIGFuIGFzc2VtYmxhZ2UgYW5kIHVuaW9uIG9mIHNldmVyYWwgY2l0aWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyB0aHVzIHN1cHBsaWVkIGhpbXNlbGYgd2l0aCBncmFpbiBhbmQgbW9uZXksIGhlIGRpZCBub3QgZ2l2ZSB1cCB0aGUgcGxhY2UsIG5vciBkaWQgaGUgZ28gYmFjayBhZ2FpbiB0byB0aGUgY2l0YWRlbCwgYnV0IGZlbmNlZCBpbiB0aGUgY2lyY3VtZmVyZW5jZSBvZiBBY2hyYWRpbmEsIHVuaXRlZCBpdCBieSBoaXMgZm9ydGlmaWNhdGlvbnMgd2l0aCB0aGUgYWNyb3BvbGlzLCBhbmQgZ3VhcmRlZCBib3RoLiBNYWdvIGFuZCBIaWNldGFzIHdlcmUgYWxyZWFkeSBuZWFyIENhdGFuYSwgd2hlbiBhIGhvcnNlbWFuIGZyb20gU3lyYWN1c2Ugb3ZlcnRvb2sgdGhlbSBhbmQgdG9sZCB0aGVtIG9mIHRoZSBjYXB0dXJlIG9mIEFjaHJhZGluYS4gVGhleSB3ZXJlIGNvbmZvdW5kZWQgYnkgdGhlIHRpZGluZ3MgYW5kIHdlbnQgYmFjayBpbiBoYXN0ZSwgaGF2aW5nIG5laXRoZXIgdGFrZW4gdGhlIGNpdHkgYWdhaW5zdCB3aGljaCB0aGV5IHdlbnQgZm9ydGgsIG5vciBrZXB0IHRoZSBvbmUgdGhleSBoYWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZXNlIHN1Y2Nlc3NlcywgdGhlbiwgZm9yZXNpZ2h0IGFuZCB2YWxvdXIgbWlnaHQgc3RpbGwgZGlzcHV0ZSB0aGUgY2xhaW1zIG9mIEZvcnR1bmU7IGJ1dCB0aGF0IHdoaWNoIGZvbGxvd2VkIHRoZW0gd291bGQgc2VlbSB0byBoYXZlIGJlZW4gd2hvbGx5IGR1ZSB0byBnb29kIGZvcnR1bmUuIFRoZSBDb3JpbnRoaWFuIHNvbGRpZXJzLCBuYW1lbHksIHdobyB3ZXJlIHRhcnJ5aW5nIGF0IFRodXJpaSwgcGFydGx5IGJlY2F1c2UgdGhleSBmZWFyZWQgdGhlIENhcnRoYWdpbmlhbiB0cmlyZW1lcyB3aGljaCB3ZXJlIGx5aW5nIGluIHdhaXQgZm9yIHRoZW0gdW5kZXIgSGFubm8sIGFuZCBwYXJ0bHkgYmVjYXVzZSBhIHN0b3JtIG9mIG1hbnkgZGF5cycgZHVyYXRpb24gaGFkIG1hZGUgdGhlIHNlYSB2ZXJ5IHJvdWdoIGFuZCBzYXZhZ2UsIHNldCBvdXQgdG8gdHJhdmVsIGJ5IGxhbmQgdGhyb3VnaCBCcnV0dGl1bTsgYW5kIHBhcnRseSBieSBwZXJzdWFkaW5nLCBwYXJ0bHkgYnkgY29tcGVsbGluZyB0aGUgQmFyYmFyaWFucywgdGhleSBtYWRlIHRoZWlyIHdheSBkb3duIHRvIFJoZWdpdW0gd2hpbGUgYSBncmVhdCBzdG9ybSB3YXMgc3RpbGwgcmFnaW5nIGF0IHNlYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBDYXJ0aGFnaW5pYW4gYWRtaXJhbCwgc2luY2UgaGUgZGlkIG5vdCBleHBlY3QgdGhhdCB0aGUgQ29yaW50aGlhbnMgd291bGQgdmVudHVyZSBmb3J0aCBhbmQgdGhvdWdodCBoaXMgcmVtYWluaW5nIHRoZXJlIGluYWN0aXZlIGFuIGlkbGUgdGhpbmcsIGFmdGVyIGNvbnZpbmNpbmcgaGltc2VsZiB0aGF0IGhlIGhhZCBkZXZpc2VkIHNvbWV0aGluZyBjbGV2ZXIgYW5kIG1pc2NoaWV2b3VzIGluIHRoZSB3YXkgb2YgZGVjZWl0LCBvcmRlcmVkIGhpcyBzYWlsb3JzIHRvIGNyb3duIHRoZWlyIGhlYWRzIHdpdGggZ2FybGFuZHMsIGRlY29yYXRlZCBoaXMgdHJpcmVtZXMgd2l0aCBwdXJwbGUgYmF0dGxlLWZsYWdzIGFuZCBHcmVlayBzaGllbGRzLCBhbmQgc2FpbGVkIGZvciBTeXJhY3VzZS4gQW5kIGFzIGhlIHBhc3NlZCB0aGUgYWNyb3BvbGlzIGF0IGEgZGFzaGluZyBzcGVlZCBhbWlkIGNsYXBwaW5nIG9mIGhhbmRzIGFuZCBsYXVnaHRlciwgaGUgc2hvdXRlZCB0aGF0IGhlIHdhcyBjb21lIGZyb20gY29ucXVlcmluZyBhbmQgY2FwdHVyaW5nIHRoZSBDb3JpbnRoaWFucywgd2hvbSBoZSBoYWQgY2F1Z2h0IGF0IHNlYSBhcyB0aGV5IHdlcmUgdHJ5aW5nIHRvIGNyb3NzIHRoZSBzdHJhaXQ7IHN1cHBvc2luZywgaW5kZWVkLCB0aGF0IGhlIHdvdWxkIHRodXMgZ3JlYXRseSBkaXNoZWFydGVuIHRoZSBiZXNpZWdlZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgaGUgd2FzIHRodXMgYmFiYmxpbmcgYW5kIHBsYXlpbmcgdGhlIHRyaWNrc3RlciwgdGhlIENvcmludGhpYW5zIHdobyBoYWQgY29tZSBkb3duIGZyb20gQnJ1dHRpdW0gdG8gUmhlZ2l1bSwgc2luY2Ugbm8gb25lIHdhcyBseWluZyBpbiB3YWl0IGZvciB0aGVtIGFuZCB0aGUgdW5leHBlY3RlZCBjZXNzYXRpb24gb2YgdGhlIHN0b3JtIGhhZCBtYWRlIHRoZSBzdHJhaXQgc21vb3RoIGFuZCBjYWxtIHRvIGxvb2sgdXBvbiwgc3BlZWRpbHkgbWFubmVkIHRoZSBmZXJyeS1ib2F0cyBhbmQgZmlzaGluZyBjcmFmdCB3aGljaCB0aGV5IGZvdW5kIGF0IGhhbmQsIHB1dCBvZmYgYW5kIG1hZGUgdGhlaXIgd2F5IGFjcm9zcyB0byBTaWNpbHksIHdpdGggc3VjaCBzYWZldHkgYW5kIGluIHNvIGdyZWF0IGEgY2FsbSB0aGF0IHRoZWlyIGhvcnNlcyBhbHNvIHN3YW0gYWxvbmcgYnkgdGhlIHNpZGUgb2YgdGhlIGJvYXRzIGFuZCB3ZXJlIHRvd2VkIGJ5IHRoZSByZWlucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlc2Ugc3VjY2Vzc2VzLCB0aGVuLCBmb3Jlc2lnaHQgYW5kIHZhbG91ciBtaWdodCBzdGlsbCBkaXNwdXRlIHRoZSBjbGFpbXMgb2YgRm9ydHVuZTsgYnV0IHRoYXQgd2hpY2ggZm9sbG93ZWQgdGhlbSB3b3VsZCBzZWVtIHRvIGhhdmUgYmVlbiB3aG9sbHkgZHVlIHRvIGdvb2QgZm9ydHVuZS4gVGhlIENvcmludGhpYW4gc29sZGllcnMsIG5hbWVseSwgd2hvIHdlcmUgdGFycnlpbmcgYXQgVGh1cmlpLCBwYXJ0bHkgYmVjYXVzZSB0aGV5IGZlYXJlZCB0aGUgQ2FydGhhZ2luaWFuIHRyaXJlbWVzIHdoaWNoIHdlcmUgbHlpbmcgaW4gd2FpdCBmb3IgdGhlbSB1bmRlciBIYW5ubywgYW5kIHBhcnRseSBiZWNhdXNlIGEgc3Rvcm0gb2YgbWFueSBkYXlzJyBkdXJhdGlvbiBoYWQgbWFkZSB0aGUgc2VhIHZlcnkgcm91Z2ggYW5kIHNhdmFnZSwgc2V0IG91dCB0byB0cmF2ZWwgYnkgbGFuZCB0aHJvdWdoIEJydXR0aXVtOyBhbmQgcGFydGx5IGJ5IHBlcnN1YWRpbmcsIHBhcnRseSBieSBjb21wZWxsaW5nIHRoZSBCYXJiYXJpYW5zLCB0aGV5IG1hZGUgdGhlaXIgd2F5IGRvd24gdG8gUmhlZ2l1bSB3aGlsZSBhIGdyZWF0IHN0b3JtIHdhcyBzdGlsbCByYWdpbmcgYXQgc2VhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgQ2FydGhhZ2luaWFuIGFkbWlyYWwsIHNpbmNlIGhlIGRpZCBub3QgZXhwZWN0IHRoYXQgdGhlIENvcmludGhpYW5zIHdvdWxkIHZlbnR1cmUgZm9ydGggYW5kIHRob3VnaHQgaGlzIHJlbWFpbmluZyB0aGVyZSBpbmFjdGl2ZSBhbiBpZGxlIHRoaW5nLCBhZnRlciBjb252aW5jaW5nIGhpbXNlbGYgdGhhdCBoZSBoYWQgZGV2aXNlZCBzb21ldGhpbmcgY2xldmVyIGFuZCBtaXNjaGlldm91cyBpbiB0aGUgd2F5IG9mIGRlY2VpdCwgb3JkZXJlZCBoaXMgc2FpbG9ycyB0byBjcm93biB0aGVpciBoZWFkcyB3aXRoIGdhcmxhbmRzLCBkZWNvcmF0ZWQgaGlzIHRyaXJlbWVzIHdpdGggcHVycGxlIGJhdHRsZS1mbGFncyBhbmQgR3JlZWsgc2hpZWxkcywgYW5kIHNhaWxlZCBmb3IgU3lyYWN1c2UuIEFuZCBhcyBoZSBwYXNzZWQgdGhlIGFjcm9wb2xpcyBhdCBhIGRhc2hpbmcgc3BlZWQgYW1pZCBjbGFwcGluZyBvZiBoYW5kcyBhbmQgbGF1Z2h0ZXIsIGhlIHNob3V0ZWQgdGhhdCBoZSB3YXMgY29tZSBmcm9tIGNvbnF1ZXJpbmcgYW5kIGNhcHR1cmluZyB0aGUgQ29yaW50aGlhbnMsIHdob20gaGUgaGFkIGNhdWdodCBhdCBzZWEgYXMgdGhleSB3ZXJlIHRyeWluZyB0byBjcm9zcyB0aGUgc3RyYWl0OyBzdXBwb3NpbmcsIGluZGVlZCwgdGhhdCBoZSB3b3VsZCB0aHVzIGdyZWF0bHkgZGlzaGVhcnRlbiB0aGUgYmVzaWVnZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIGhlIHdhcyB0aHVzIGJhYmJsaW5nIGFuZCBwbGF5aW5nIHRoZSB0cmlja3N0ZXIsIHRoZSBDb3JpbnRoaWFucyB3aG8gaGFkIGNvbWUgZG93biBmcm9tIEJydXR0aXVtIHRvIFJoZWdpdW0sIHNpbmNlIG5vIG9uZSB3YXMgbHlpbmcgaW4gd2FpdCBmb3IgdGhlbSBhbmQgdGhlIHVuZXhwZWN0ZWQgY2Vzc2F0aW9uIG9mIHRoZSBzdG9ybSBoYWQgbWFkZSB0aGUgc3RyYWl0IHNtb290aCBhbmQgY2FsbSB0byBsb29rIHVwb24sIHNwZWVkaWx5IG1hbm5lZCB0aGUgZmVycnktYm9hdHMgYW5kIGZpc2hpbmcgY3JhZnQgd2hpY2ggdGhleSBmb3VuZCBhdCBoYW5kLCBwdXQgb2ZmIGFuZCBtYWRlIHRoZWlyIHdheSBhY3Jvc3MgdG8gU2ljaWx5LCB3aXRoIHN1Y2ggc2FmZXR5IGFuZCBpbiBzbyBncmVhdCBhIGNhbG0gdGhhdCB0aGVpciBob3JzZXMgYWxzbyBzd2FtIGFsb25nIGJ5IHRoZSBzaWRlIG9mIHRoZSBib2F0cyBhbmQgd2VyZSB0b3dlZCBieSB0aGUgcmVpbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhleSBoYWQgYWxsIGNyb3NzZWQgb3ZlciwgVGltb2xlb24gdG9vayB0aGVtIGFuZCBhdCBvbmNlIG9jY3VwaWVkIE1lc3NhbmEsIHRoZW4sIHVuaXRpbmcgdGhlbSB3aXRoIGhpcyBvdGhlciBmb3JjZXMsIG1hcmNoZWQgYWdhaW5zdCBTeXJhY3VzZSwgcmVseWluZyBvbiB0aGUgZ29vZCBmb3J0dW5lIGFuZCBzdWNjZXNzIHRoYXQgYXR0ZW5kZWQgaGlzIGVmZm9ydHMgcmF0aGVyIHRoYW4gb24gdGhlIHN0cmVuZ3RoIG9mIGhpcyBhcm15OyBmb3IgaGlzIGZvbGxvd2VycyB3ZXJlIG5vdCBtb3JlIHRoYW4gZm91ciB0aG91c2FuZCBpbiBudW1iZXIuIEJ1dCB3aGVuIE1hZ28gZ290IHRpZGluZ3Mgb2YgaGlzIGFwcHJvYWNoLCBkaXN0dXJiZWQgYW5kIGZlYXJmdWwgYXMgaGUgd2FzLCBoZSB3YXMgbWFkZSBzdGlsbCBtb3JlIHN1c3BpY2lvdXMgZm9yIHRoZSBmb2xsb3dpbmcgcmVhc29uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2hvYWxzIGFib3V0IHRoZSBjaXR5LCB3aGljaCByZWNlaXZlIG11Y2ggZnJlc2ggd2F0ZXIgZnJvbSBzcHJpbmdzLCBhbmQgbXVjaCBmcm9tIG1hcnNoZXMgYW5kIHJpdmVycyBlbXB0eWluZyBpbnRvIHRoZSBzZWEsIGdyZWF0IG51bWJlcnMgb2YgZWVscyBsaXZlLCBhbmQgdGhlcmUgaXMgYWx3YXlzIGFuIGFidW5kYW5jZSBvZiB0aGlzIGNhdGNoIGZvciBhbnlib2R5LiBUaGVzZSBlZWxzIHRoZSBtZXJjZW5hcnkgc29sZGllcnMgb24gYm90aCBzaWRlcywgd2hlbiB0aGV5IGhhZCBsZWlzdXJlIG9yIGEgdHJ1Y2Ugd2FzIG9uLCB1c2VkIHRvIGh1bnQgdG9nZXRoZXIuIEFuZCBzaW5jZSB0aGV5IHdlcmUgR3JlZWtzIGFuZCBoYWQgbm8gcmVhc29uIGZvciBwcml2YXRlIGhhdHJlZCBvZiBvbmUgYW5vdGhlciwgd2hpbGUgaW4gdGhlaXIgYmF0dGxlcyB0aGV5IHJpc2tlZCB0aGVpciBsaXZlcyBicmF2ZWx5LCBpbiB0aGVpciB0aW1lcyBvZiB0cnVjZSB0aGV5IHdvdWxkIHZpc2l0IGFuZCBjb252ZXJzZSB3aXRoIG9uZSBhbm90aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gbm93LCBhcyB0aGV5IHdlcmUgYnVzeSB0b2dldGhlciB3aXRoIHRoZWlyIGZpc2hpbmcsIHRoZXkgY29udmVyc2VkLCBleHByZXNzaW5nIHRoZWlyIGFkbWlyYXRpb24gb2YgdGhlIHJpY2huZXNzIG9mIHRoZSBzZWEgYW5kIHRoZSBjaGFyYWN0ZXIgb2YgdGhlIGFkamFjZW50IGxhbmRzLiBBbmQgb25lIG9mIHRob3NlIHdobyB3ZXJlIHNlcnZpbmcgb24gdGhlIENvcmludGhpYW4gc2lkZSBzYWlkOiAgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYW4gaXQgcmVhbGx5IGJlIHRoYXQgeW91LCB3aG8gYXJlIEdyZWVrcywgYXJlIGVhZ2VyIHRvIGJhcmJhcml6ZSBhIGNpdHkgb2Ygc3VjaCBncmVhdCBzaXplIGFuZCBmdXJuaXNoZWQgd2l0aCBzdWNoIGdyZWF0IGFkdmFudGFnZXMsIHRodXMgc2V0dGxpbmcgQ2FydGhhZ2luaWFucywgd2hvIGFyZSB0aGUgYmFzZXN0IGFuZCBibG9vZGllc3Qgb2YgbWVuLCBuZWFyZXIgdG8gdXMsIHdoZW4geW91IG91Z2h0IHRvIHByYXkgZm9yIG1hbnkgU2ljaWxpZXMgdG8gbGllIGFzIGEgYmFycmllciBiZXR3ZWVuIEdyZWVjZSBhbmQgdGhlbT8gCgkJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9yIGRvIHlvdSBzdXBwb3NlIHRoYXQgdGhleSBoYXZlIGNvbGxlY3RlZCBhbiBhcm15IGFuZCBhcmUgY29tZSBoaXRoZXIgZnJvbSB0aGUgcGlsbGFycyBvZiBIZXJhY2xlcyBhbmQgdGhlIEF0bGFudGljIHNlYSBpbiBvcmRlciB0byByaXNrIHRoZWlyIGxpdmVzIGluIGJlaGFsZiBvZiB0aGUgZHluYXN0eSBvZiBIaWNldGFzPyBIZSwgaWYgaGUgcmVhc29uZWQgbGlrZSBhIHRydWUgbGVhZGVyLCB3b3VsZCBub3QgYmUgY2FzdGluZyBvdXQgaGlzIGtpbmRyZWQgcGVvcGxlLCBub3Igd291bGQgaGUgYmUgbGVhZGluZyBhZ2FpbnN0IGhpcyBjb3VudHJ5IGhlciBuYXR1cmFsIGVuZW1pZXMsIGJ1dCB3b3VsZCBiZSBlbmpveWluZyBhIGJlZml0dGluZyBhbW91bnQgb2YgaG9ub3VyIGFuZCBwb3dlciwgd2l0aCB0aGUgY29uc2VudCBvZiBUaW1vbGVvbiBhbmQgdGhlIENvcmludGhpYW5zLjwvcT4gU3VjaCBzcGVlY2hlcyBhcyB0aGVzZSB0aGUgbWVyY2VuYXJpZXMgZGlzc2VtaW5hdGVkIGluIHRoZWlyIGNhbXAsIGFuZCBtYWRlIE1hZ28gc3VzcGljaW91cyBvZiB0cmVhY2hlcnksIHRob3VnaCBoZSBoYWQgbG9uZyB3YW50ZWQgYSBwcmV0ZXh0IGZvciBnb2luZyBhd2F5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgd2hlbiBIaWNldGFzIGJlZ2dlZCBoaW0gdG8gcmVtYWluIGFuZCB0cmllZCB0byBzaG93IGhpbSBob3cgbXVjaCBzdXBlcmlvciB0aGV5IHdlcmUgdG8gdGhlaXIgZW5lbWllcywgaGUgdGhvdWdodCByYXRoZXIgdGhhdCB0aGV5IHdlcmUgbW9yZSBpbmZlcmlvciB0byBUaW1vbGVvbiBpbiBicmF2ZXJ5IGFuZCBnb29kIGZvcnR1bmUgdGhhbiB0aGV5IHN1cnBhc3NlZCBoaW0gaW4gdGhlIG51bWJlciBvZiB0aGVpciBmb3JjZXMsIGFuZCB3ZWlnaGluZyBhbmNob3IgYXQgb25jZSwgc2FpbGVkIG9mZiB0byBMaWJ5YSwgdGh1cyBsZXR0aW5nIFNpY2lseSBzbGlwIG91dCBvZiBoaXMgaGFuZHMgZGlzZ3JhY2VmdWxseSBhbmQgZm9yIG5vIHJlYXNvbiB0aGF0IG1hbiBjb3VsZCBzdWdnZXN0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGV5IGhhZCBhbGwgY3Jvc3NlZCBvdmVyLCBUaW1vbGVvbiB0b29rIHRoZW0gYW5kIGF0IG9uY2Ugb2NjdXBpZWQgTWVzc2FuYSwgdGhlbiwgdW5pdGluZyB0aGVtIHdpdGggaGlzIG90aGVyIGZvcmNlcywgbWFyY2hlZCBhZ2FpbnN0IFN5cmFjdXNlLCByZWx5aW5nIG9uIHRoZSBnb29kIGZvcnR1bmUgYW5kIHN1Y2Nlc3MgdGhhdCBhdHRlbmRlZCBoaXMgZWZmb3J0cyByYXRoZXIgdGhhbiBvbiB0aGUgc3RyZW5ndGggb2YgaGlzIGFybXk7IGZvciBoaXMgZm9sbG93ZXJzIHdlcmUgbm90IG1vcmUgdGhhbiBmb3VyIHRob3VzYW5kIGluIG51bWJlci4gQnV0IHdoZW4gTWFnbyBnb3QgdGlkaW5ncyBvZiBoaXMgYXBwcm9hY2gsIGRpc3R1cmJlZCBhbmQgZmVhcmZ1bCBhcyBoZSB3YXMsIGhlIHdhcyBtYWRlIHN0aWxsIG1vcmUgc3VzcGljaW91cyBmb3IgdGhlIGZvbGxvd2luZyByZWFzb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzaG9hbHMgYWJvdXQgdGhlIGNpdHksIHdoaWNoIHJlY2VpdmUgbXVjaCBmcmVzaCB3YXRlciBmcm9tIHNwcmluZ3MsIGFuZCBtdWNoIGZyb20gbWFyc2hlcyBhbmQgcml2ZXJzIGVtcHR5aW5nIGludG8gdGhlIHNlYSwgZ3JlYXQgbnVtYmVycyBvZiBlZWxzIGxpdmUsIGFuZCB0aGVyZSBpcyBhbHdheXMgYW4gYWJ1bmRhbmNlIG9mIHRoaXMgY2F0Y2ggZm9yIGFueWJvZHkuIFRoZXNlIGVlbHMgdGhlIG1lcmNlbmFyeSBzb2xkaWVycyBvbiBib3RoIHNpZGVzLCB3aGVuIHRoZXkgaGFkIGxlaXN1cmUgb3IgYSB0cnVjZSB3YXMgb24sIHVzZWQgdG8gaHVudCB0b2dldGhlci4gQW5kIHNpbmNlIHRoZXkgd2VyZSBHcmVla3MgYW5kIGhhZCBubyByZWFzb24gZm9yIHByaXZhdGUgaGF0cmVkIG9mIG9uZSBhbm90aGVyLCB3aGlsZSBpbiB0aGVpciBiYXR0bGVzIHRoZXkgcmlza2VkIHRoZWlyIGxpdmVzIGJyYXZlbHksIGluIHRoZWlyIHRpbWVzIG9mIHRydWNlIHRoZXkgd291bGQgdmlzaXQgYW5kIGNvbnZlcnNlIHdpdGggb25lIGFub3RoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBub3csIGFzIHRoZXkgd2VyZSBidXN5IHRvZ2V0aGVyIHdpdGggdGhlaXIgZmlzaGluZywgdGhleSBjb252ZXJzZWQsIGV4cHJlc3NpbmcgdGhlaXIgYWRtaXJhdGlvbiBvZiB0aGUgcmljaG5lc3Mgb2YgdGhlIHNlYSBhbmQgdGhlIGNoYXJhY3RlciBvZiB0aGUgYWRqYWNlbnQgbGFuZHMuIEFuZCBvbmUgb2YgdGhvc2Ugd2hvIHdlcmUgc2VydmluZyBvbiB0aGUgQ29yaW50aGlhbiBzaWRlIHNhaWQ6ICAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2FuIGl0IHJlYWxseSBiZSB0aGF0IHlvdSwgd2hvIGFyZSBHcmVla3MsIGFyZSBlYWdlciB0byBiYXJiYXJpemUgYSBjaXR5IG9mIHN1Y2ggZ3JlYXQgc2l6ZSBhbmQgZnVybmlzaGVkIHdpdGggc3VjaCBncmVhdCBhZHZhbnRhZ2VzLCB0aHVzIHNldHRsaW5nIENhcnRoYWdpbmlhbnMsIHdobyBhcmUgdGhlIGJhc2VzdCBhbmQgYmxvb2RpZXN0IG9mIG1lbiwgbmVhcmVyIHRvIHVzLCB3aGVuIHlvdSBvdWdodCB0byBwcmF5IGZvciBtYW55IFNpY2lsaWVzIHRvIGxpZSBhcyBhIGJhcnJpZXIgYmV0d2VlbiBHcmVlY2UgYW5kIHRoZW0/IAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9yIGRvIHlvdSBzdXBwb3NlIHRoYXQgdGhleSBoYXZlIGNvbGxlY3RlZCBhbiBhcm15IGFuZCBhcmUgY29tZSBoaXRoZXIgZnJvbSB0aGUgcGlsbGFycyBvZiBIZXJhY2xlcyBhbmQgdGhlIEF0bGFudGljIHNlYSBpbiBvcmRlciB0byByaXNrIHRoZWlyIGxpdmVzIGluIGJlaGFsZiBvZiB0aGUgZHluYXN0eSBvZiBIaWNldGFzPyBIZSwgaWYgaGUgcmVhc29uZWQgbGlrZSBhIHRydWUgbGVhZGVyLCB3b3VsZCBub3QgYmUgY2FzdGluZyBvdXQgaGlzIGtpbmRyZWQgcGVvcGxlLCBub3Igd291bGQgaGUgYmUgbGVhZGluZyBhZ2FpbnN0IGhpcyBjb3VudHJ5IGhlciBuYXR1cmFsIGVuZW1pZXMsIGJ1dCB3b3VsZCBiZSBlbmpveWluZyBhIGJlZml0dGluZyBhbW91bnQgb2YgaG9ub3VyIGFuZCBwb3dlciwgd2l0aCB0aGUgY29uc2VudCBvZiBUaW1vbGVvbiBhbmQgdGhlIENvcmludGhpYW5zLjwvcT4gU3VjaCBzcGVlY2hlcyBhcyB0aGVzZSB0aGUgbWVyY2VuYXJpZXMgZGlzc2VtaW5hdGVkIGluIHRoZWlyIGNhbXAsIGFuZCBtYWRlIE1hZ28gc3VzcGljaW91cyBvZiB0cmVhY2hlcnksIHRob3VnaCBoZSBoYWQgbG9uZyB3YW50ZWQgYSBwcmV0ZXh0IGZvciBnb2luZyBhd2F5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9yIGRvIHlvdSBzdXBwb3NlIHRoYXQgdGhleSBoYXZlIGNvbGxlY3RlZCBhbiBhcm15IGFuZCBhcmUgY29tZSBoaXRoZXIgZnJvbSB0aGUgcGlsbGFycyBvZiBIZXJhY2xlcyBhbmQgdGhlIEF0bGFudGljIHNlYSBpbiBvcmRlciB0byByaXNrIHRoZWlyIGxpdmVzIGluIGJlaGFsZiBvZiB0aGUgZHluYXN0eSBvZiBIaWNldGFzPyBIZSwgaWYgaGUgcmVhc29uZWQgbGlrZSBhIHRydWUgbGVhZGVyLCB3b3VsZCBub3QgYmUgY2FzdGluZyBvdXQgaGlzIGtpbmRyZWQgcGVvcGxlLCBub3Igd291bGQgaGUgYmUgbGVhZGluZyBhZ2FpbnN0IGhpcyBjb3VudHJ5IGhlciBuYXR1cmFsIGVuZW1pZXMsIGJ1dCB3b3VsZCBiZSBlbmpveWluZyBhIGJlZml0dGluZyBhbW91bnQgb2YgaG9ub3VyIGFuZCBwb3dlciwgd2l0aCB0aGUgY29uc2VudCBvZiBUaW1vbGVvbiBhbmQgdGhlIENvcmludGhpYW5zLjwvdHJhbnNsYXRpb24+"
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB3aGVuIEhpY2V0YXMgYmVnZ2VkIGhpbSB0byByZW1haW4gYW5kIHRyaWVkIHRvIHNob3cgaGltIGhvdyBtdWNoIHN1cGVyaW9yIHRoZXkgd2VyZSB0byB0aGVpciBlbmVtaWVzLCBoZSB0aG91Z2h0IHJhdGhlciB0aGF0IHRoZXkgd2VyZSBtb3JlIGluZmVyaW9yIHRvIFRpbW9sZW9uIGluIGJyYXZlcnkgYW5kIGdvb2QgZm9ydHVuZSB0aGFuIHRoZXkgc3VycGFzc2VkIGhpbSBpbiB0aGUgbnVtYmVyIG9mIHRoZWlyIGZvcmNlcywgYW5kIHdlaWdoaW5nIGFuY2hvciBhdCBvbmNlLCBzYWlsZWQgb2ZmIHRvIExpYnlhLCB0aHVzIGxldHRpbmcgU2ljaWx5IHNsaXAgb3V0IG9mIGhpcyBoYW5kcyBkaXNncmFjZWZ1bGx5IGFuZCBmb3Igbm8gcmVhc29uIHRoYXQgbWFuIGNvdWxkIHN1Z2dlc3QuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBkYXkgYWZ0ZXIgaGlzIGRlcGFydHVyZSwgVGltb2xlb24gY2FtZSB1cCB3aXRoIGhpcyBmb3JjZXMgYXJyYXllZCBmb3IgYmF0dGxlLiBCdXQgd2hlbiB0aGV5IGxlYXJuZWQgb2YgTWFnbydzIGZsaWdodCBhbmQgc2F3IHRoZSBkb2NrcyBlbXB0eSBvZiB2ZXNzZWxzLCB0aGV5IGNvdWxkIG5vdCBoZWxwIGxhdWdoaW5nIGF0IGhpcyBjb3dhcmRpY2UsIGFuZCB3ZW50IGFib3V0IHRoZSBjaXR5IHByb2NsYWltaW5nIGEgcmV3YXJkIGZvciBhbnkgb25lIHdobyB0b2xkIHRoZW0gd2hpdGhlciB0aGUgQ2FydGhhZ2luaWFuIGZsZWV0IGhhZCBmbGVkIGF3YXkgZnJvbSB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBzaW5jZSBIaWNldGFzIHdhcyBzdGlsbCBlYWdlciBmb3IgYmF0dGxlIGFuZCB3b3VsZCBub3QgbGV0IGdvIGhpcyBob2xkIHVwb24gdGhlIGNpdHksIGJ1dCBjbHVuZyB0byB0aGUgcGFydHMgb2YgaXQgaW4gaGlzIHBvc3Nlc3Npb24sIHdoaWNoIHdlcmUgc3Ryb25nIGFuZCBkYW5nZXJvdXMgdG8gYXR0YWNrLCBUaW1vbGVvbiBkaXZpZGVkIGhpcyBmb3JjZXMsIGhlIGhpbXNlbGYgYXR0YWNraW5nIGFsb25nIHRoZSByaXZlciBBbmFwdXMgd2hlcmUgdGhlIHN0cnVnZ2xlIHdhcyBsaWtlbHkgdG8gYmUgaG90dGVzdCwgYW5kIG9yZGVyaW5nIG90aGVycywgdW5kZXIgdGhlIGxlYWQgb2YgSXNpYXMgdGhlIENvcmludGhpYW4sIHRvIG1ha2UgdGhlaXIgYXR0ZW1wdCBmcm9tIEFjaHJhZGluYS4gVGhlIHRoaXJkIGRpdmlzaW9uIHdhcyBsZWQgYWdhaW5zdCBFcGlwb2xhZSBieSBEZWluYXJjaHVzIGFuZCBEZW1hcmV0dXMsIHdobyBoYWQgYnJvdWdodCB0aGUgc2Vjb25kIHJlaW5mb3JjZW1lbnQgZnJvbSBDb3JpbnRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYXR0YWNrIHdhcyBtYWRlIGluIGFsbCB0aHJlZSBwbGFjZXMgYXQgb25jZSwgYW5kIHRoZSB0cm9vcHMgb2YgSGljZXRhcyB3ZXJlIG92ZXJ3aGVsbWVkIGFuZCB0b29rIHRvIGZsaWdodC4gVGhhdCB0aGUgY2l0eSB3YXMgdGFrZW4gYnkgc3Rvcm0gYW5kIGZlbGwgcXVpY2tseSBpbnRvIHRoZWlyIGhhbmRzIGFmdGVyIHRoZSBlbmVteSBoYWQgYmVlbiBkcml2ZW4gb3V0LCBpdCBpcyByaWdodCB0byBhc2NyaWJlIHRvIHRoZSBicmF2ZXJ5IG9mIHRoZSBzb2xkaWVycyBhbmQgdGhlIGFiaWxpdHkgb2YgdGhlaXIgZ2VuZXJhbDsgYnV0IHRoYXQgbm90IG9uZSBvZiB0aGUgQ29yaW50aGlhbnMgd2FzIGtpbGxlZCBvciBldmVuIHdvdW5kZWQsIHRoaXMgdGhlIGdvb2QgZm9ydHVuZSBvZiBUaW1vbGVvbiBzaG93ZWQgdG8gYmUgaGVyIG93biB3b3JrLCB2eWluZyBlbXVsb3VzbHksIGFzIGl0IHdlcmUsIHdpdGggaGlzIHZhbG91ciwgaW4gb3JkZXIgdGhhdCB0aG9zZSB3aG8gaGVhciBoaXMgc3RvcnkgbWF5IHdvbmRlciBhdCBoaXMgaGFwcHkgc3VjY2Vzc2VzIG1vcmUgdGhhbiBhdCBoaXMgbGF1ZGFibGUgZWZmb3J0cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhpcyBmYW1lIG5vdCBvbmx5IGZpbGxlZCBhdCBvbmNlIGFsbCBTaWNpbHkgYW5kIEl0YWx5LCBidXQgd2l0aGluIGEgZmV3IGRheXMgR3JlZWNlIGVjaG9lZCB3aXRoIGhpcyBncmVhdCBzdWNjZXNzLCBzbyB0aGF0IHRoZSBjaXR5IG9mIENvcmludGgsIHdoaWNoIHdhcyBpbiBkb3VidCB3aGV0aGVyIGhpcyBhcm1hbWVudCBoYWQgZ290IGFjcm9zcyB0aGUgc2VhLCBoZWFyZCBhdCBvbmUgYW5kIHRoZSBzYW1lIHRpbWUgdGhhdCBpdCBoYWQgc2FmZWx5IGNyb3NzZWQsIGFuZCB0aGF0IGl0IHdhcyB2aWN0b3Jpb3VzLiBTbyBwcm9zcGVyb3VzIHdhcyB0aGUgY291cnNlIG9mIGhpcyBlbnRlcnByaXNlcywgYW5kIHN1Y2ggd2FzIHRoZSBzcGVlZCB3aXRoIHdoaWNoIEZvcnR1bmUgY3Jvd25lZCB0aGUgYmVhdXR5IG9mIGhpcyBhY2hpZXZlbWVudHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIGRheSBhZnRlciBoaXMgZGVwYXJ0dXJlLCBUaW1vbGVvbiBjYW1lIHVwIHdpdGggaGlzIGZvcmNlcyBhcnJheWVkIGZvciBiYXR0bGUuIEJ1dCB3aGVuIHRoZXkgbGVhcm5lZCBvZiBNYWdvJ3MgZmxpZ2h0IGFuZCBzYXcgdGhlIGRvY2tzIGVtcHR5IG9mIHZlc3NlbHMsIHRoZXkgY291bGQgbm90IGhlbHAgbGF1Z2hpbmcgYXQgaGlzIGNvd2FyZGljZSwgYW5kIHdlbnQgYWJvdXQgdGhlIGNpdHkgcHJvY2xhaW1pbmcgYSByZXdhcmQgZm9yIGFueSBvbmUgd2hvIHRvbGQgdGhlbSB3aGl0aGVyIHRoZSBDYXJ0aGFnaW5pYW4gZmxlZXQgaGFkIGZsZWQgYXdheSBmcm9tIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHNpbmNlIEhpY2V0YXMgd2FzIHN0aWxsIGVhZ2VyIGZvciBiYXR0bGUgYW5kIHdvdWxkIG5vdCBsZXQgZ28gaGlzIGhvbGQgdXBvbiB0aGUgY2l0eSwgYnV0IGNsdW5nIHRvIHRoZSBwYXJ0cyBvZiBpdCBpbiBoaXMgcG9zc2Vzc2lvbiwgd2hpY2ggd2VyZSBzdHJvbmcgYW5kIGRhbmdlcm91cyB0byBhdHRhY2ssIFRpbW9sZW9uIGRpdmlkZWQgaGlzIGZvcmNlcywgaGUgaGltc2VsZiBhdHRhY2tpbmcgYWxvbmcgdGhlIHJpdmVyIEFuYXB1cyB3aGVyZSB0aGUgc3RydWdnbGUgd2FzIGxpa2VseSB0byBiZSBob3R0ZXN0LCBhbmQgb3JkZXJpbmcgb3RoZXJzLCB1bmRlciB0aGUgbGVhZCBvZiBJc2lhcyB0aGUgQ29yaW50aGlhbiwgdG8gbWFrZSB0aGVpciBhdHRlbXB0IGZyb20gQWNocmFkaW5hLiBUaGUgdGhpcmQgZGl2aXNpb24gd2FzIGxlZCBhZ2FpbnN0IEVwaXBvbGFlIGJ5IERlaW5hcmNodXMgYW5kIERlbWFyZXR1cywgd2hvIGhhZCBicm91Z2h0IHRoZSBzZWNvbmQgcmVpbmZvcmNlbWVudCBmcm9tIENvcmludGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBhdHRhY2sgd2FzIG1hZGUgaW4gYWxsIHRocmVlIHBsYWNlcyBhdCBvbmNlLCBhbmQgdGhlIHRyb29wcyBvZiBIaWNldGFzIHdlcmUgb3ZlcndoZWxtZWQgYW5kIHRvb2sgdG8gZmxpZ2h0LiBUaGF0IHRoZSBjaXR5IHdhcyB0YWtlbiBieSBzdG9ybSBhbmQgZmVsbCBxdWlja2x5IGludG8gdGhlaXIgaGFuZHMgYWZ0ZXIgdGhlIGVuZW15IGhhZCBiZWVuIGRyaXZlbiBvdXQsIGl0IGlzIHJpZ2h0IHRvIGFzY3JpYmUgdG8gdGhlIGJyYXZlcnkgb2YgdGhlIHNvbGRpZXJzIGFuZCB0aGUgYWJpbGl0eSBvZiB0aGVpciBnZW5lcmFsOyBidXQgdGhhdCBub3Qgb25lIG9mIHRoZSBDb3JpbnRoaWFucyB3YXMga2lsbGVkIG9yIGV2ZW4gd291bmRlZCwgdGhpcyB0aGUgZ29vZCBmb3J0dW5lIG9mIFRpbW9sZW9uIHNob3dlZCB0byBiZSBoZXIgb3duIHdvcmssIHZ5aW5nIGVtdWxvdXNseSwgYXMgaXQgd2VyZSwgd2l0aCBoaXMgdmFsb3VyLCBpbiBvcmRlciB0aGF0IHRob3NlIHdobyBoZWFyIGhpcyBzdG9yeSBtYXkgd29uZGVyIGF0IGhpcyBoYXBweSBzdWNjZXNzZXMgbW9yZSB0aGFuIGF0IGhpcyBsYXVkYWJsZSBlZmZvcnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoaXMgZmFtZSBub3Qgb25seSBmaWxsZWQgYXQgb25jZSBhbGwgU2ljaWx5IGFuZCBJdGFseSwgYnV0IHdpdGhpbiBhIGZldyBkYXlzIEdyZWVjZSBlY2hvZWQgd2l0aCBoaXMgZ3JlYXQgc3VjY2Vzcywgc28gdGhhdCB0aGUgY2l0eSBvZiBDb3JpbnRoLCB3aGljaCB3YXMgaW4gZG91YnQgd2hldGhlciBoaXMgYXJtYW1lbnQgaGFkIGdvdCBhY3Jvc3MgdGhlIHNlYSwgaGVhcmQgYXQgb25lIGFuZCB0aGUgc2FtZSB0aW1lIHRoYXQgaXQgaGFkIHNhZmVseSBjcm9zc2VkLCBhbmQgdGhhdCBpdCB3YXMgdmljdG9yaW91cy4gU28gcHJvc3Blcm91cyB3YXMgdGhlIGNvdXJzZSBvZiBoaXMgZW50ZXJwcmlzZXMsIGFuZCBzdWNoIHdhcyB0aGUgc3BlZWQgd2l0aCB3aGljaCBGb3J0dW5lIGNyb3duZWQgdGhlIGJlYXV0eSBvZiBoaXMgYWNoaWV2ZW1lbnRzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIGhhZCBiZWNvbWUgbWFzdGVyIG9mIHRoZSBjaXRhZGVsLCBoZSBkaWQgbm90IHJlcGVhdCB0aGUgZXhwZXJpZW5jZSBvZiBEaW9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERpbyA1My4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRpb248L3RpdGxlPiwgY2hhcHRlciBsaWlpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBub3IgZGlkIGhlIHNwYXJlIHRoZSBwbGFjZSBvbiBhY2NvdW50IG9mIHRoZSBiZWF1dHkgYW5kIGdyZWF0IGNvc3Qgb2YgaXRzIGFyY2hpdGVjdHVyZSwgYnV0IGd1YXJkaW5nIGFnYWluc3QgdGhlIHN1c3BpY2lvbnMgd2hpY2ggaGFkIGJyb3VnaHQgY2FsdW1ueSBhbmQgdGhlbiBkZXN0cnVjdGlvbiB1cG9uIGhpcyBwcmVkZWNlc3NvciwgaGUgbWFkZSBwcm9jbGFtYXRpb24gdGhhdCBhbGwgU3lyYWN1c2FucyB3aG8gd2lzaGVkIHNob3VsZCBjb21lIHdpdGggaW1wbGVtZW50cyBvZiBpcm9uIGFuZCBoZWxwIGluIHRoZSBkZW1vbGl0aW9uIG9mIHRoZSB0eXJhbnRzJyBidWx3YXJrcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gdGhleSBoYWQgYWxsIGNvbWUgdXAsIGNvbnNpZGVyaW5nIHRoYXQgZGF5IHdpdGggaXRzIHByb2NsYW1hdGlvbiB0byBiZSBhIG1vc3Qgc2VjdXJlIGJlZ2lubmluZyBvZiBmcmVlZG9tLCB0aGV5IG92ZXJ0aHJldyBhbmQgZGVtb2xpc2hlZCwgbm90IG9ubHkgdGhlIGNpdGFkZWwsIGJ1dCBhbHNvIHRoZSBwYWxhY2VzIGFuZCB0aGUgdG9tYnMgb2YgdGhlIHR5cmFudHMuIFRoZW4sIGFzIHNvb24gYXMgaGUgaGFkIGxldmVsbGVkIG9mZiB0aGUgcGxhY2UsIFRpbW9sZW9uIGJ1aWx0IHRoZSBjb3VydHMgb2YganVzdGljZSB0aGVyZSwgdGh1cyBncmF0aWZ5aW5nIHRoZSBjaXRpemVucyBieSBtYWtpbmcgdGhlaXIgZGVtb2NyYWN5IHRyaXVtcGhhbnQgb3ZlciB0eXJhbm55LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBoYWQgYmVjb21lIG1hc3RlciBvZiB0aGUgY2l0YWRlbCwgaGUgZGlkIG5vdCByZXBlYXQgdGhlIGV4cGVyaWVuY2Ugb2YgRGlvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGlvIDUzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaW9uPC90aXRsZT4sIGNoYXB0ZXIgbGlpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbm9yIGRpZCBoZSBzcGFyZSB0aGUgcGxhY2Ugb24gYWNjb3VudCBvZiB0aGUgYmVhdXR5IGFuZCBncmVhdCBjb3N0IG9mIGl0cyBhcmNoaXRlY3R1cmUsIGJ1dCBndWFyZGluZyBhZ2FpbnN0IHRoZSBzdXNwaWNpb25zIHdoaWNoIGhhZCBicm91Z2h0IGNhbHVtbnkgYW5kIHRoZW4gZGVzdHJ1Y3Rpb24gdXBvbiBoaXMgcHJlZGVjZXNzb3IsIGhlIG1hZGUgcHJvY2xhbWF0aW9uIHRoYXQgYWxsIFN5cmFjdXNhbnMgd2hvIHdpc2hlZCBzaG91bGQgY29tZSB3aXRoIGltcGxlbWVudHMgb2YgaXJvbiBhbmQgaGVscCBpbiB0aGUgZGVtb2xpdGlvbiBvZiB0aGUgdHlyYW50cycgYnVsd2Fya3MuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGlvIDUzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaW9uPC90aXRsZT4sIGNoYXB0ZXIgbGlpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpb248L3RpdGxlPiwgY2hhcHRlciBsaWlpLiAxLjwvdHJhbnNsYXRpb24+"
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZXkgaGFkIGFsbCBjb21lIHVwLCBjb25zaWRlcmluZyB0aGF0IGRheSB3aXRoIGl0cyBwcm9jbGFtYXRpb24gdG8gYmUgYSBtb3N0IHNlY3VyZSBiZWdpbm5pbmcgb2YgZnJlZWRvbSwgdGhleSBvdmVydGhyZXcgYW5kIGRlbW9saXNoZWQsIG5vdCBvbmx5IHRoZSBjaXRhZGVsLCBidXQgYWxzbyB0aGUgcGFsYWNlcyBhbmQgdGhlIHRvbWJzIG9mIHRoZSB0eXJhbnRzLiBUaGVuLCBhcyBzb29uIGFzIGhlIGhhZCBsZXZlbGxlZCBvZmYgdGhlIHBsYWNlLCBUaW1vbGVvbiBidWlsdCB0aGUgY291cnRzIG9mIGp1c3RpY2UgdGhlcmUsIHRodXMgZ3JhdGlmeWluZyB0aGUgY2l0aXplbnMgYnkgbWFraW5nIHRoZWlyIGRlbW9jcmFjeSB0cml1bXBoYW50IG92ZXIgdHlyYW5ueS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBjaXR5IHdoaWNoIGhlIGhhZCB0YWtlbiBoYWQgbm90IGNpdGl6ZW5zIGVub3VnaCwgc2luY2Ugc29tZSBoYWQgcGVyaXNoZWQgaW4gdGhlaXIgd2FycyBhbmQgc2VkaXRpb25zLCB3aGlsZSBvdGhlcnMgaGFkIGdvbmUgaW50byBleGlsZSBmcm9tIHR5cmFubmljYWwgZ292ZXJubWVudHMuIEluZGVlZCwgZm9yIGxhY2sgb2YgcG9wdWxhdGlvbiB0aGUgbWFya2V0IHBsYWNlIG9mIFN5cmFjdXNlIGhhZCBwcm9kdWNlZCBzdWNoIGEgcXVhbnRpdHkgb2YgZGVuc2UgaGVyYmFnZSB0aGF0IGhvcnNlcyB3ZXJlIHBhc3R1cmVkIGluIGl0LCB3aGlsZSB0aGVpciBncm9vbXMgbGF5IGRvd24gaW4gdGhlIGdyYXNzOyBhbmQgdGhlIG90aGVyIGNpdGllcywgd2l0aCBhbG1vc3Qgbm8gZXhjZXB0aW9ucywgd2VyZSBmdWxsIG9mIGRlZXIgYW5kIHdpbGQgc3dpbmUsIHdoaWxlIGluIHRoZWlyIHN1YnVyYnMgYW5kIGFyb3VuZCB0aGVpciB3YWxscyB0aG9zZSB3aG8gaGFkIGxlaXN1cmUgZm9yIGl0IHdlbnQgaHVudGluZywgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIG5vdCBvbmUgb2YgdGhvc2Ugd2hvIHdlcmUgZXN0YWJsaXNoZWQgaW4gZm9ydHJlc3NlcyBhbmQgc3Ryb25naG9sZHMgd291bGQgaGVhcmtlbiB0byBhbnkgc3VtbW9ucywgb3IgY29tZSBkb3duIGludG8gdGhlIGNpdHksIGJ1dCBmZWFyIGFuZCBoYXRyZWQga2VwdCBhbGwgYXdheSBmcm9tIG1hcmtldCBwbGFjZSBhbmQgY2l2aWMgbGlmZSBhbmQgcHVibGljIHNwZWFraW5nLCB3aGljaCBoYWQgcHJvZHVjZWQgdGhlIG1vc3Qgb2YgdGhlaXIgdHlyYW50cy4gVGhlcmVmb3JlIFRpbW9sZW9uIGFuZCB0aGUgU3lyYWN1c2FucyBkZWNpZGVkIHRvIHdyaXRlIHRvIHRoZSBDb3JpbnRoaWFucyB1cmdpbmcgdGhlbSB0byBzZW5kIHNldHRsZXJzIHRvIFN5cmFjdXNlIGZyb20gR3JlZWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igb3RoZXJ3aXNlIHRoZSBsYW5kIHdhcyBsaWtlbHkgdG8gbGllIHVuY3VsdGl2YXRlZCwgYW5kIHRoZXkgZXhwZWN0ZWQgYSBncmVhdCB3YXIgZnJvbSBBZnJpY2EsIHNpbmNlIHRoZXkgbGVhcm5lZCB0aGF0IHRoZSBDYXJ0aGFnaW5pYW5zLCBhZnRlciBNYWdvJ3Mgc3VpY2lkZSwgaGFkIGltcGFsZWQgaGlzIGRlYWQgYm9keSwgaW4gdGhlaXIgcmFnZSBhdCBoaXMgY29uZHVjdCBvZiB0aGUgZXhwZWRpdGlvbiwgYW5kIHRoYXQgdGhleSB3ZXJlIGFzc2VtYmxpbmcgYSBncmVhdCBmb3JjZSB3aXRoIHRoZSBpbnRlbnRpb24gb2YgY3Jvc3NpbmcgaW50byBTaWNpbHkgaW4gdGhlIHN1bW1lci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgY2l0eSB3aGljaCBoZSBoYWQgdGFrZW4gaGFkIG5vdCBjaXRpemVucyBlbm91Z2gsIHNpbmNlIHNvbWUgaGFkIHBlcmlzaGVkIGluIHRoZWlyIHdhcnMgYW5kIHNlZGl0aW9ucywgd2hpbGUgb3RoZXJzIGhhZCBnb25lIGludG8gZXhpbGUgZnJvbSB0eXJhbm5pY2FsIGdvdmVybm1lbnRzLiBJbmRlZWQsIGZvciBsYWNrIG9mIHBvcHVsYXRpb24gdGhlIG1hcmtldCBwbGFjZSBvZiBTeXJhY3VzZSBoYWQgcHJvZHVjZWQgc3VjaCBhIHF1YW50aXR5IG9mIGRlbnNlIGhlcmJhZ2UgdGhhdCBob3JzZXMgd2VyZSBwYXN0dXJlZCBpbiBpdCwgd2hpbGUgdGhlaXIgZ3Jvb21zIGxheSBkb3duIGluIHRoZSBncmFzczsgYW5kIHRoZSBvdGhlciBjaXRpZXMsIHdpdGggYWxtb3N0IG5vIGV4Y2VwdGlvbnMsIHdlcmUgZnVsbCBvZiBkZWVyIGFuZCB3aWxkIHN3aW5lLCB3aGlsZSBpbiB0aGVpciBzdWJ1cmJzIGFuZCBhcm91bmQgdGhlaXIgd2FsbHMgdGhvc2Ugd2hvIGhhZCBsZWlzdXJlIGZvciBpdCB3ZW50IGh1bnRpbmcsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBub3Qgb25lIG9mIHRob3NlIHdobyB3ZXJlIGVzdGFibGlzaGVkIGluIGZvcnRyZXNzZXMgYW5kIHN0cm9uZ2hvbGRzIHdvdWxkIGhlYXJrZW4gdG8gYW55IHN1bW1vbnMsIG9yIGNvbWUgZG93biBpbnRvIHRoZSBjaXR5LCBidXQgZmVhciBhbmQgaGF0cmVkIGtlcHQgYWxsIGF3YXkgZnJvbSBtYXJrZXQgcGxhY2UgYW5kIGNpdmljIGxpZmUgYW5kIHB1YmxpYyBzcGVha2luZywgd2hpY2ggaGFkIHByb2R1Y2VkIHRoZSBtb3N0IG9mIHRoZWlyIHR5cmFudHMuIFRoZXJlZm9yZSBUaW1vbGVvbiBhbmQgdGhlIFN5cmFjdXNhbnMgZGVjaWRlZCB0byB3cml0ZSB0byB0aGUgQ29yaW50aGlhbnMgdXJnaW5nIHRoZW0gdG8gc2VuZCBzZXR0bGVycyB0byBTeXJhY3VzZSBmcm9tIEdyZWVjZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBvdGhlcndpc2UgdGhlIGxhbmQgd2FzIGxpa2VseSB0byBsaWUgdW5jdWx0aXZhdGVkLCBhbmQgdGhleSBleHBlY3RlZCBhIGdyZWF0IHdhciBmcm9tIEFmcmljYSwgc2luY2UgdGhleSBsZWFybmVkIHRoYXQgdGhlIENhcnRoYWdpbmlhbnMsIGFmdGVyIE1hZ28ncyBzdWljaWRlLCBoYWQgaW1wYWxlZCBoaXMgZGVhZCBib2R5LCBpbiB0aGVpciByYWdlIGF0IGhpcyBjb25kdWN0IG9mIHRoZSBleHBlZGl0aW9uLCBhbmQgdGhhdCB0aGV5IHdlcmUgYXNzZW1ibGluZyBhIGdyZWF0IGZvcmNlIHdpdGggdGhlIGludGVudGlvbiBvZiBjcm9zc2luZyBpbnRvIFNpY2lseSBpbiB0aGUgc3VtbWVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZXNlIGxldHRlcnMgZnJvbSBUaW1vbGVvbiBoYWQgYmVlbiBkZWxpdmVyZWQgYW5kIHdlcmUgYWNjb21wYW5pZWQgYnkgU3lyYWN1c2FuIGVudm95cyB3aG8gYmVnZ2VkIHRoZW0gdG8gdGFrZSB0aG91Z2h0IGZvciB0aGVpciBjaXR5IGFuZCB0byBiZWNvbWUgYW5ldyBpdHMgZm91bmRlcnMsIHRoZSBDb3JpbnRoaWFucyBkaWQgbm90IHNlaXplIHRoZSBvcHBvcnR1bml0eSBmb3IgdGhlaXIgb3duIGFnZ3JhbmRpemVtZW50LCBub3IgZGlkIHRoZXkgYXBwcm9wcmlhdGUgdGhlIGNpdHkgZm9yIHRoZW1zZWx2ZXMsIGJ1dCwgaW4gdGhlIGZpcnN0IHBsYWNlLCB0aGV5IHZpc2l0ZWQgdGhlIHNhY3JlZCBnYW1lcyBpbiBHcmVlY2UgYW5kIHRoZSBncmVhdGVzdCBmZXN0aXZhbCBhc3NlbWJsYWdlcywgYW5kIHByb2NsYWltZWQgYnkgaGVyYWxkcyB0aGF0IHRoZSBDb3JpbnRoaWFucyBoYWQgb3ZlcnRocm93biB0aGUgdHlyYW5ueSBpbiBTeXJhY3VzZSwgYW5kIGRyaXZlbiBvdXQgdGhlIHR5cmFudCwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIG5vdyBpbnZpdGVkIFN5cmFjdXNhbnMsIGFuZCBhbnkgb3RoZXIgU2ljaWxpYW4gR3JlZWtzIHdobyB3aXNoZWQsIHRvIHBlb3BsZSB0aGUgY2l0eSB3aXRoIGZyZWUgYW5kIGluZGVwZW5kZW50IGNpdGl6ZW5zLCBhbGxvdHRpbmcgdGhlIGxhbmQgYW1vbmcgdGhlbSBvbiBlcXVhbCBhbmQganVzdCB0ZXJtcy4gSW4gdGhlIHNlY29uZCBwbGFjZSwgdGhleSBzZW50IG1lc3NlbmdlcnMgdG8gQXNpYSBhbmQgdGhlIGlzbGFuZHMsIHdoZXJlIHRoZXkgbGVhcm5lZCB0aGF0IG1vc3Qgb2YgdGhlIHNjYXR0ZXJlZCBleGlsZXMgd2VyZSByZXNpZGluZywgYW5kIGludml0ZWQgdGhlbSBhbGwgdG8gY29tZSB0byBDb3JpbnRoLCBhc3N1cmluZyB0aGVtIHRoYXQgdGhlIENvcmludGhpYW5zLCBhdCB0aGVpciBvd24gZXhwZW5zZSwgd291bGQgZnVybmlzaCB0aGVtIHdpdGggbGVhZGVycyBhbmQgdHJhbnNwb3J0cyBhbmQgYSBzYWZlIGNvbnZveSB0byBTeXJhY3VzZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnkgdGhlc2UgcHJvY2xhbWF0aW9ucyB0aGUgY2l0eSBvZiBDb3JpbnRoIGVhcm5lZCB0aGUganVzdGVzdCBwcmFpc2UgYW5kIHRoZSBmYWlyZXN0IGdsb3J5OyBzaGUgd2FzIGZyZWVpbmcgdGhlIGxhbmQgZnJvbSBpdHMgdHlyYW50cywgc2F2aW5nIGl0IGZyb20gdGhlIEJhcmJhcmlhbnMsIGFuZCByZXN0b3JpbmcgaXQgdG8gaXRzIHJpZ2h0ZnVsIGNpdGl6ZW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGVzZSBsZXR0ZXJzIGZyb20gVGltb2xlb24gaGFkIGJlZW4gZGVsaXZlcmVkIGFuZCB3ZXJlIGFjY29tcGFuaWVkIGJ5IFN5cmFjdXNhbiBlbnZveXMgd2hvIGJlZ2dlZCB0aGVtIHRvIHRha2UgdGhvdWdodCBmb3IgdGhlaXIgY2l0eSBhbmQgdG8gYmVjb21lIGFuZXcgaXRzIGZvdW5kZXJzLCB0aGUgQ29yaW50aGlhbnMgZGlkIG5vdCBzZWl6ZSB0aGUgb3Bwb3J0dW5pdHkgZm9yIHRoZWlyIG93biBhZ2dyYW5kaXplbWVudCwgbm9yIGRpZCB0aGV5IGFwcHJvcHJpYXRlIHRoZSBjaXR5IGZvciB0aGVtc2VsdmVzLCBidXQsIGluIHRoZSBmaXJzdCBwbGFjZSwgdGhleSB2aXNpdGVkIHRoZSBzYWNyZWQgZ2FtZXMgaW4gR3JlZWNlIGFuZCB0aGUgZ3JlYXRlc3QgZmVzdGl2YWwgYXNzZW1ibGFnZXMsIGFuZCBwcm9jbGFpbWVkIGJ5IGhlcmFsZHMgdGhhdCB0aGUgQ29yaW50aGlhbnMgaGFkIG92ZXJ0aHJvd24gdGhlIHR5cmFubnkgaW4gU3lyYWN1c2UsIGFuZCBkcml2ZW4gb3V0IHRoZSB0eXJhbnQsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBub3cgaW52aXRlZCBTeXJhY3VzYW5zLCBhbmQgYW55IG90aGVyIFNpY2lsaWFuIEdyZWVrcyB3aG8gd2lzaGVkLCB0byBwZW9wbGUgdGhlIGNpdHkgd2l0aCBmcmVlIGFuZCBpbmRlcGVuZGVudCBjaXRpemVucywgYWxsb3R0aW5nIHRoZSBsYW5kIGFtb25nIHRoZW0gb24gZXF1YWwgYW5kIGp1c3QgdGVybXMuIEluIHRoZSBzZWNvbmQgcGxhY2UsIHRoZXkgc2VudCBtZXNzZW5nZXJzIHRvIEFzaWEgYW5kIHRoZSBpc2xhbmRzLCB3aGVyZSB0aGV5IGxlYXJuZWQgdGhhdCBtb3N0IG9mIHRoZSBzY2F0dGVyZWQgZXhpbGVzIHdlcmUgcmVzaWRpbmcsIGFuZCBpbnZpdGVkIHRoZW0gYWxsIHRvIGNvbWUgdG8gQ29yaW50aCwgYXNzdXJpbmcgdGhlbSB0aGF0IHRoZSBDb3JpbnRoaWFucywgYXQgdGhlaXIgb3duIGV4cGVuc2UsIHdvdWxkIGZ1cm5pc2ggdGhlbSB3aXRoIGxlYWRlcnMgYW5kIHRyYW5zcG9ydHMgYW5kIGEgc2FmZSBjb252b3kgdG8gU3lyYWN1c2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ5IHRoZXNlIHByb2NsYW1hdGlvbnMgdGhlIGNpdHkgb2YgQ29yaW50aCBlYXJuZWQgdGhlIGp1c3Rlc3QgcHJhaXNlIGFuZCB0aGUgZmFpcmVzdCBnbG9yeTsgc2hlIHdhcyBmcmVlaW5nIHRoZSBsYW5kIGZyb20gaXRzIHR5cmFudHMsIHNhdmluZyBpdCBmcm9tIHRoZSBCYXJiYXJpYW5zLCBhbmQgcmVzdG9yaW5nIGl0IHRvIGl0cyByaWdodGZ1bCBjaXRpemVucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVuIHRoZXNlIGhhZCBhc3NlbWJsZWQgYXQgQ29yaW50aCwgYmVpbmcgdG9vIGZldyBpbiBudW1iZXIsIHRoZXkgYmVnZ2VkIHRoYXQgdGhleSBtaWdodCByZWNlaXZlIGZlbGxvdyBjb2xvbmlzdHMgZnJvbSBDb3JpbnRoIGFuZCB0aGUgcmVzdCBvZiBHcmVlY2U7IGFuZCBhZnRlciB0aGVpciBudW1iZXJzIGhhZCByaXNlbiB0byBhcyBtYW55IGFzIHRlbiB0aG91c2FuZCwgdGhleSBzYWlsZWQgdG8gU3lyYWN1c2UuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGJ5IHRoaXMgdGltZSBtYW55IGFsc28gZnJvbSBJdGFseSBhbmQgU2ljaWx5IGhhZCBmbG9ja2VkIHRvIFRpbW9sZW9uOyBhbmQgd2hlbiB0aGVpciBudW1iZXJzIGhhZCByaXNlbiB0byBzaXh0eSB0aG91c2FuZCwgYXMgQXRoYW5pcyBzdGF0ZXMsIFRpbW9sZW9uIGRpdmlkZWQgdGhlIGxhbmQgYW1vbmcgdGhlbSwgYW5kIHNvbGQgdGhlIGhvdXNlcyBvZiB0aGUgY2l0eSBmb3IgYSB0aG91c2FuZCB0YWxlbnRzLCB0aHVzIGF0IG9uY2UgcmVzZXJ2aW5nIGZvciB0aGUgb3JpZ2luYWwgU3lyYWN1c2FucyB0aGUgcG93ZXIgdG8gcHVyY2hhc2UgdGhlaXIgb3duIGhvdXNlcywgYW5kIGRldmlzaW5nIGFuIGFidW5kYW5jZSBvZiBtb25leSBmb3IgdGhlIGNvbW11bml0eTsgdGhpcyBoYWQgc28gbGl0dGxlLCBib3RoIGZvciBvdGhlciBwdXJwb3NlcywgYW5kIGVzcGVjaWFsbHkgZm9yIHRoZSB3YXIsIHRoYXQgaXQgYWN0dWFsbHkgc29sZCBpdHMgcHVibGljIHN0YXR1ZXMgYXQgYXVjdGlvbiwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YSByZWd1bGFyIHZvdGUgb2YgY29uZGVtbmF0aW9uIGJlaW5nIHBhc3NlZCBhZ2FpbnN0IGVhY2gsIGFzIHRob3VnaCB0aGV5IHdlcmUgbWVuIHN1Ym1pdHRpbmcgdGhlaXIgYWNjb3VudHMuIEl0IHdhcyBhdCB0aGlzIHRpbWUsIHRoZXkgc2F5LCB0aGF0IHRoZSBzdGF0dWUgb2YgR2Vsb24sIHRoZWlyIGFuY2llbnQgdHlyYW50LCB3YXMgcHJlc2VydmVkIGJ5IHRoZSBTeXJhY3VzYW5zLCB0aG91Z2ggdGhleSBjb25kZW1uZWQgdGhlIHJlc3QsIGJlY2F1c2UgdGhleSBhZG1pcmVkIGFuZCBob25vdXJlZCBoaW0gZm9yIHRoZSB2aWN0b3J5IHdoaWNoIGhlIGhhZCB3b24gb3ZlciB0aGUgQ2FydGhhZ2luaWFucyBhdCBIaW1lcmEuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDgwIEIuQy4sIG9uIHRoZSBzYW1lIGRheSwgaXQgaXMgc2FpZCwgYXMgdGhlIHZpY3RvcnkgYXQgU2FsYW1pcy4gIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSGR0LiA3LjE2NiIgdmFsaWQ9InllcyI+SGVyb2RvdHVzLCB2aWkuIDE2Ni48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBieSB0aGlzIHRpbWUgbWFueSBhbHNvIGZyb20gSXRhbHkgYW5kIFNpY2lseSBoYWQgZmxvY2tlZCB0byBUaW1vbGVvbjsgYW5kIHdoZW4gdGhlaXIgbnVtYmVycyBoYWQgcmlzZW4gdG8gc2l4dHkgdGhvdXNhbmQsIGFzIEF0aGFuaXMgc3RhdGVzLCBUaW1vbGVvbiBkaXZpZGVkIHRoZSBsYW5kIGFtb25nIHRoZW0sIGFuZCBzb2xkIHRoZSBob3VzZXMgb2YgdGhlIGNpdHkgZm9yIGEgdGhvdXNhbmQgdGFsZW50cywgdGh1cyBhdCBvbmNlIHJlc2VydmluZyBmb3IgdGhlIG9yaWdpbmFsIFN5cmFjdXNhbnMgdGhlIHBvd2VyIHRvIHB1cmNoYXNlIHRoZWlyIG93biBob3VzZXMsIGFuZCBkZXZpc2luZyBhbiBhYnVuZGFuY2Ugb2YgbW9uZXkgZm9yIHRoZSBjb21tdW5pdHk7IHRoaXMgaGFkIHNvIGxpdHRsZSwgYm90aCBmb3Igb3RoZXIgcHVycG9zZXMsIGFuZCBlc3BlY2lhbGx5IGZvciB0aGUgd2FyLCB0aGF0IGl0IGFjdHVhbGx5IHNvbGQgaXRzIHB1YmxpYyBzdGF0dWVzIGF0IGF1Y3Rpb24sIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmEgcmVndWxhciB2b3RlIG9mIGNvbmRlbW5hdGlvbiBiZWluZyBwYXNzZWQgYWdhaW5zdCBlYWNoLCBhcyB0aG91Z2ggdGhleSB3ZXJlIG1lbiBzdWJtaXR0aW5nIHRoZWlyIGFjY291bnRzLiBJdCB3YXMgYXQgdGhpcyB0aW1lLCB0aGV5IHNheSwgdGhhdCB0aGUgc3RhdHVlIG9mIEdlbG9uLCB0aGVpciBhbmNpZW50IHR5cmFudCwgd2FzIHByZXNlcnZlZCBieSB0aGUgU3lyYWN1c2FucywgdGhvdWdoIHRoZXkgY29uZGVtbmVkIHRoZSByZXN0LCBiZWNhdXNlIHRoZXkgYWRtaXJlZCBhbmQgaG9ub3VyZWQgaGltIGZvciB0aGUgdmljdG9yeSB3aGljaCBoZSBoYWQgd29uIG92ZXIgdGhlIENhcnRoYWdpbmlhbnMgYXQgSGltZXJhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDgwIEIuQy4sIG9uIHRoZSBzYW1lIGRheSwgaXQgaXMgc2FpZCwgYXMgdGhlIHZpY3RvcnkgYXQgU2FsYW1pcy4gIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDcuMTY2IiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIHZpaS4gMTY2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDcuMTY2IiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIHZpaS4gMTY2LjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2VlaW5nIHRoZSBjaXR5IHRodXMgYmVnaW5uaW5nIHRvIHJldml2ZSBhbmQgZmlsbCBpdHNlbGYgd2l0aCBwZW9wbGUsIHNpbmNlIGl0cyBjaXRpemVucyB3ZXJlIHN0cmVhbWluZyBpbnRvIGl0IGZyb20gYWxsIHNpZGVzLCBUaW1vbGVvbiBkZXRlcm1pbmVkIHRvIHNldCB0aGUgb3RoZXIgY2l0aWVzIGFsc28gZnJlZSwgYW5kIHV0dGVybHkgdG8gcm9vdCBvdXQgYWxsIHR5cmFubmllcyBmcm9tIFNpY2lseS4gSGUgdGhlcmVmb3JlIG1hZGUgYW4gZXhwZWRpdGlvbiBpbnRvIHRoZWlyIHRlcnJpdG9yaWVzIGFuZCBjb21wZWxsZWQgSGljZXRhcyB0byBmb3JzYWtlIHRoZSBjYXVzZSBvZiBDYXJ0aGFnZSwgYW5kIHRvIGFncmVlIHRvIGRlbW9saXNoIGhpcyBjaXRhZGVscyBhbmQgbGl2ZSBhcyBhIHByaXZhdGUgcGVyc29uIGluIExlb250aW5pLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXMgZm9yIExlcHRpbmVzLCB3aG8gbG9yZGVkIGl0IG92ZXIgQXBvbGxvbmlhIGFuZCBudW1lcm91cyBvdGhlciBzdHJvbmdob2xkcywgd2hlbiBoZSB3YXMgaW4gZGFuZ2VyIG9mIGJlaW5nIHRha2VuIGJ5IG1haW4gZm9yY2UsIGhlIHN1cnJlbmRlcmVkIGhpbXNlbGY7IGFuZCBUaW1vbGVvbiBzcGFyZWQgaGlzIGxpZmUgYW5kIHNlbnQgaGltIG9mZiB0byBDb3JpbnRoLCBjb25zaWRlcmluZyBpdCBhIGZpbmUgdGhpbmcgdG8gaGF2ZSB0aGUgdHlyYW50cyBvZiBTaWNpbHkgaW4gdGhlIG1vdGhlciBjaXR5IHdoZXJlIHRoZSBHcmVla3MgY291bGQgb2JzZXJ2ZSB0aGVtIGxpdmluZyB0aGUgbG93bHkgbGlmZSBvZiBleGlsZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBoZSB3aXNoZWQgdGhhdCBoaXMgbWVyY2VuYXJpZXMgbWlnaHQgZ2V0IGJvb3R5IGZyb20gdGhlIGVuZW15J3MgY291bnRyeSBhbmQgbm90IHJlbWFpbiBpZGxlLiBBY2NvcmRpbmdseSwgd2hpbGUgaGUgaGltc2VsZiByZXR1cm5lZCB0byBTeXJhY3VzZSBpbiBvcmRlciB0byBhcHBseSBoaW1zZWxmIHRvIHRoZSBlc3RhYmxpc2htZW50IG9mIHRoZSBjaXZpbCBwb2xpdHkgYW5kIHRvIGFzc2lzdCB0aGUgbGF3Z2l2ZXJzIHdobyBoYWQgY29tZSBmcm9tIENvcmludGgsIENlcGhhbHVzIGFuZCBEaW9ueXNpdXMsIGluIGFycmFuZ2luZyBpdHMgbW9zdCBpbXBvcnRhbnQgZGV0YWlscyBpbiB0aGUgbW9zdCBhdHRyYWN0aXZlIHdheSwgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+aGUgc2VudCBmb3J0aCB0aGUgdHJvb3BzIHVuZGVyIERlaW5hcmNodXMgYW5kIERlbWFyZXR1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGltLiAyMi4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4aWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGludG8gdGhhdCBwYXJ0IG9mIHRoZSBpc2xhbmQgd2hpY2ggdGhlIENhcnRoYWdpbmlhbnMgY29udHJvbGxlZCwgd2hlcmUgdGhleSBicm91Z2h0IG1hbnkgY2l0aWVzIHRvIHJldm9sdCBmcm9tIHRoZSBCYXJiYXJpYW5zLCBhbmQgbm90IG9ubHkgbGl2ZWQgaW4gcGxlbnR5IHRoZW1zZWx2ZXMsIGJ1dCBhY3R1YWxseSByYWlzZWQgbW9uZXlzIGZvciB0aGUgd2FyIGZyb20gdGhlIHNwb2lscyB0aGV5IG1hZGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2VlaW5nIHRoZSBjaXR5IHRodXMgYmVnaW5uaW5nIHRvIHJldml2ZSBhbmQgZmlsbCBpdHNlbGYgd2l0aCBwZW9wbGUsIHNpbmNlIGl0cyBjaXRpemVucyB3ZXJlIHN0cmVhbWluZyBpbnRvIGl0IGZyb20gYWxsIHNpZGVzLCBUaW1vbGVvbiBkZXRlcm1pbmVkIHRvIHNldCB0aGUgb3RoZXIgY2l0aWVzIGFsc28gZnJlZSwgYW5kIHV0dGVybHkgdG8gcm9vdCBvdXQgYWxsIHR5cmFubmllcyBmcm9tIFNpY2lseS4gSGUgdGhlcmVmb3JlIG1hZGUgYW4gZXhwZWRpdGlvbiBpbnRvIHRoZWlyIHRlcnJpdG9yaWVzIGFuZCBjb21wZWxsZWQgSGljZXRhcyB0byBmb3JzYWtlIHRoZSBjYXVzZSBvZiBDYXJ0aGFnZSwgYW5kIHRvIGFncmVlIHRvIGRlbW9saXNoIGhpcyBjaXRhZGVscyBhbmQgbGl2ZSBhcyBhIHByaXZhdGUgcGVyc29uIGluIExlb250aW5pLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgTGVwdGluZXMsIHdobyBsb3JkZWQgaXQgb3ZlciBBcG9sbG9uaWEgYW5kIG51bWVyb3VzIG90aGVyIHN0cm9uZ2hvbGRzLCB3aGVuIGhlIHdhcyBpbiBkYW5nZXIgb2YgYmVpbmcgdGFrZW4gYnkgbWFpbiBmb3JjZSwgaGUgc3VycmVuZGVyZWQgaGltc2VsZjsgYW5kIFRpbW9sZW9uIHNwYXJlZCBoaXMgbGlmZSBhbmQgc2VudCBoaW0gb2ZmIHRvIENvcmludGgsIGNvbnNpZGVyaW5nIGl0IGEgZmluZSB0aGluZyB0byBoYXZlIHRoZSB0eXJhbnRzIG9mIFNpY2lseSBpbiB0aGUgbW90aGVyIGNpdHkgd2hlcmUgdGhlIEdyZWVrcyBjb3VsZCBvYnNlcnZlIHRoZW0gbGl2aW5nIHRoZSBsb3dseSBsaWZlIG9mIGV4aWxlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBoZSB3aXNoZWQgdGhhdCBoaXMgbWVyY2VuYXJpZXMgbWlnaHQgZ2V0IGJvb3R5IGZyb20gdGhlIGVuZW15J3MgY291bnRyeSBhbmQgbm90IHJlbWFpbiBpZGxlLiBBY2NvcmRpbmdseSwgd2hpbGUgaGUgaGltc2VsZiByZXR1cm5lZCB0byBTeXJhY3VzZSBpbiBvcmRlciB0byBhcHBseSBoaW1zZWxmIHRvIHRoZSBlc3RhYmxpc2htZW50IG9mIHRoZSBjaXZpbCBwb2xpdHkgYW5kIHRvIGFzc2lzdCB0aGUgbGF3Z2l2ZXJzIHdobyBoYWQgY29tZSBmcm9tIENvcmludGgsIENlcGhhbHVzIGFuZCBEaW9ueXNpdXMsIGluIGFycmFuZ2luZyBpdHMgbW9zdCBpbXBvcnRhbnQgZGV0YWlscyBpbiB0aGUgbW9zdCBhdHRyYWN0aXZlIHdheSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhlIHNlbnQgZm9ydGggdGhlIHRyb29wcyB1bmRlciBEZWluYXJjaHVzIGFuZCBEZW1hcmV0dXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBUaW0uIDIyLjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW50byB0aGF0IHBhcnQgb2YgdGhlIGlzbGFuZCB3aGljaCB0aGUgQ2FydGhhZ2luaWFucyBjb250cm9sbGVkLCB3aGVyZSB0aGV5IGJyb3VnaHQgbWFueSBjaXRpZXMgdG8gcmV2b2x0IGZyb20gdGhlIEJhcmJhcmlhbnMsIGFuZCBub3Qgb25seSBsaXZlZCBpbiBwbGVudHkgdGhlbXNlbHZlcywgYnV0IGFjdHVhbGx5IHJhaXNlZCBtb25leXMgZm9yIHRoZSB3YXIgZnJvbSB0aGUgc3BvaWxzIHRoZXkgbWFkZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGltLiAyMi4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4aWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NZWFud2hpbGUgdGhlIENhcnRoYWdpbmlhbnMgcHV0IGluIGF0IExpbHliYWV1bSB3aXRoIGFuIGFybXkgb2Ygc2V2ZW50eSB0aG91c2FuZCBtZW4sIHR3byBodW5kcmVkIHRyaXJlbWVzLCBhbmQgYSB0aG91c2FuZCB0cmFuc3BvcnRzIGNhcnJ5aW5nIGVuZ2luZXMgb2Ygd2FyLCBmb3VyLWhvcnNlIGNoYXJpb3RzLCBncmFpbiBpbiBhYnVuZGFuY2UsIGFuZCBvdGhlciByZXF1aXNpdGUgZXF1aXBtZW50LiBUaGVpciBwdXJwb3NlIHdhcywgbm90IHRvIGNhcnJ5IG9uIHRoZSB3YXIgYnkgcGllY2UtbWVhbCBhbnkgbW9yZSwgYnV0IGF0IG9uZSB0aW1lIHRvIGRyaXZlIHRoZSBpbnZhZGluZyBHcmVla3Mgb3V0IG9mIGFsbCBTaWNpbHk7IGZvciB0aGVpciBmb3JjZSB3b3VsZCBoYXZlIGJlZW4gc3VmZmljaWVudCB0byBjYXB0dXJlIHRoZSBuYXRpdmUgR3JlZWtzLCBldmVuIHRob3VnaCB0aGV5IGhhZCBub3QgYmVlbiBwb2xpdGljYWxseSB3ZWFrIGFuZCB1dHRlcmx5IHJ1aW5lZCBieSBvbmUgYW5vdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG9uIGxlYXJuaW5nIHRoYXQgdGhlIHRlcnJpdG9yeSB3aGljaCB0aGV5IGNvbnRyb2xsZWQgd2FzIGJlaW5nIHJhdmFnZWQgYnkgdGhlIENvcmludGhpYW5zLCB0aGV5IHdlcmUgZnVyaW91cywgYW5kIHN0cmFpZ2h0d2F5IG1hcmNoZWQgYWdhaW5zdCB0aGVtIHVuZGVyIHRoZSBjb21tYW5kIG9mIEhhc2RydWJhbCBhbmQgSGFtaWxjYXIuIFRpZGluZ3Mgb2YgdGhpcyBjb21pbmcgcXVpY2tseSB0byBTeXJhY3VzZSwgdGhlIFN5cmFjdXNhbnMgd2VyZSBzbyB0ZXJyaWZpZWQgYXQgdGhlIG1hZ25pdHVkZSBvZiB0aGUgZW5lbXkncyBmb3JjZXMgdGhhdCBvbmx5IHRocmVlIHRob3VzYW5kIG91dCBvZiBzbyBtYW55IHRlbnMgb2YgdGhvdXNhbmRzIGNvdWxkIHdpdGggZGlmZmljdWx0eSBiZSBicm91Z2h0IHRvIHBsdWNrIHVwIGNvdXJhZ2UsIHRha2UgdGhlaXIgYXJtcywgYW5kIGdvIGZvcnRoIHdpdGggVGltb2xlb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCB0aGUgbWVyY2VuYXJpZXMgd2VyZSBvbmx5IGZvdXIgdGhvdXNhbmQgaW4gbnVtYmVyOyBhbmQgb2YgdGhlc2UsIGFnYWluLCBhYm91dCBhIHRob3VzYW5kIHBsYXllZCB0aGUgY293YXJkIG9uIHRoZSBtYXJjaCBhbmQgd2VudCBiYWNrIHRvIFN5cmFjdXNlLCBkZWNsYXJpbmcgdGhhdCBUaW1vbGVvbiB3YXMgbm90IGluIGhpcyByaWdodCBtaW5kLCBidXQgd2FzIG1vcmUgY3JhenkgdGhhbiBoaXMgeWVhcnMgd291bGQgbGVhZCBvbmUgdG8gZXhwZWN0LCBhbmQgd2FzIG1hcmNoaW5nIGFnYWluc3Qgc2V2ZW50eSB0aG91c2FuZCBvZiB0aGUgZW5lbXkgd2l0aCBmaXZlIHRob3VzYW5kIGZvb3QgYW5kIGEgdGhvdXNhbmQgaG9yc2UsIGFuZCB3YXMgdGFraW5nIGhpcyBmb3JjZSBhIG1hcmNoIG9mIGVpZ2h0IGRheXMgYXdheSBmcm9tIFN5cmFjdXNlLCBzbyB0aGF0IHRob3NlIG9mIHRoZW0gd2hvIGZsZWQgZnJvbSB0aGUgZmllbGQgd291bGQgZmluZCBubyBzYWZldHksIGFuZCB0aG9zZSB3aG8gZmVsbCB1cG9uIGl0IHdvdWxkIGhhdmUgbm8gYnVyaWFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgdGhlc2UgbWVuLCB0aGVuLCBUaW1vbGVvbiBjb3VudGVkIGl0IGdhaW4gdGhhdCB0aGV5IGhhZCBzaG93biB3aGF0IHRoZXkgd2VyZSBiZWZvcmUgdGhlIGJhdHRsZTsgdGhlIHJlc3QgaGUgZW5jb3VyYWdlZCBhbmQgbGVkIHRoZW0gd2l0aCBhbGwgc3BlZWQgdG8gdGhlIHJpdmVyIENyaW1lc3VzLCB3aGVyZSBoZSBoZWFyZCB0aGF0IHRoZSBDYXJ0aGFnaW5pYW5zIGFsc28gd2VyZSBjb25jZW50cmF0aW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIHRoZSBDYXJ0aGFnaW5pYW5zIHB1dCBpbiBhdCBMaWx5YmFldW0gd2l0aCBhbiBhcm15IG9mIHNldmVudHkgdGhvdXNhbmQgbWVuLCB0d28gaHVuZHJlZCB0cmlyZW1lcywgYW5kIGEgdGhvdXNhbmQgdHJhbnNwb3J0cyBjYXJyeWluZyBlbmdpbmVzIG9mIHdhciwgZm91ci1ob3JzZSBjaGFyaW90cywgZ3JhaW4gaW4gYWJ1bmRhbmNlLCBhbmQgb3RoZXIgcmVxdWlzaXRlIGVxdWlwbWVudC4gVGhlaXIgcHVycG9zZSB3YXMsIG5vdCB0byBjYXJyeSBvbiB0aGUgd2FyIGJ5IHBpZWNlLW1lYWwgYW55IG1vcmUsIGJ1dCBhdCBvbmUgdGltZSB0byBkcml2ZSB0aGUgaW52YWRpbmcgR3JlZWtzIG91dCBvZiBhbGwgU2ljaWx5OyBmb3IgdGhlaXIgZm9yY2Ugd291bGQgaGF2ZSBiZWVuIHN1ZmZpY2llbnQgdG8gY2FwdHVyZSB0aGUgbmF0aXZlIEdyZWVrcywgZXZlbiB0aG91Z2ggdGhleSBoYWQgbm90IGJlZW4gcG9saXRpY2FsbHkgd2VhayBhbmQgdXR0ZXJseSBydWluZWQgYnkgb25lIGFub3RoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbiBsZWFybmluZyB0aGF0IHRoZSB0ZXJyaXRvcnkgd2hpY2ggdGhleSBjb250cm9sbGVkIHdhcyBiZWluZyByYXZhZ2VkIGJ5IHRoZSBDb3JpbnRoaWFucywgdGhleSB3ZXJlIGZ1cmlvdXMsIGFuZCBzdHJhaWdodHdheSBtYXJjaGVkIGFnYWluc3QgdGhlbSB1bmRlciB0aGUgY29tbWFuZCBvZiBIYXNkcnViYWwgYW5kIEhhbWlsY2FyLiBUaWRpbmdzIG9mIHRoaXMgY29taW5nIHF1aWNrbHkgdG8gU3lyYWN1c2UsIHRoZSBTeXJhY3VzYW5zIHdlcmUgc28gdGVycmlmaWVkIGF0IHRoZSBtYWduaXR1ZGUgb2YgdGhlIGVuZW15J3MgZm9yY2VzIHRoYXQgb25seSB0aHJlZSB0aG91c2FuZCBvdXQgb2Ygc28gbWFueSB0ZW5zIG9mIHRob3VzYW5kcyBjb3VsZCB3aXRoIGRpZmZpY3VsdHkgYmUgYnJvdWdodCB0byBwbHVjayB1cCBjb3VyYWdlLCB0YWtlIHRoZWlyIGFybXMsIGFuZCBnbyBmb3J0aCB3aXRoIFRpbW9sZW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCB0aGUgbWVyY2VuYXJpZXMgd2VyZSBvbmx5IGZvdXIgdGhvdXNhbmQgaW4gbnVtYmVyOyBhbmQgb2YgdGhlc2UsIGFnYWluLCBhYm91dCBhIHRob3VzYW5kIHBsYXllZCB0aGUgY293YXJkIG9uIHRoZSBtYXJjaCBhbmQgd2VudCBiYWNrIHRvIFN5cmFjdXNlLCBkZWNsYXJpbmcgdGhhdCBUaW1vbGVvbiB3YXMgbm90IGluIGhpcyByaWdodCBtaW5kLCBidXQgd2FzIG1vcmUgY3JhenkgdGhhbiBoaXMgeWVhcnMgd291bGQgbGVhZCBvbmUgdG8gZXhwZWN0LCBhbmQgd2FzIG1hcmNoaW5nIGFnYWluc3Qgc2V2ZW50eSB0aG91c2FuZCBvZiB0aGUgZW5lbXkgd2l0aCBmaXZlIHRob3VzYW5kIGZvb3QgYW5kIGEgdGhvdXNhbmQgaG9yc2UsIGFuZCB3YXMgdGFraW5nIGhpcyBmb3JjZSBhIG1hcmNoIG9mIGVpZ2h0IGRheXMgYXdheSBmcm9tIFN5cmFjdXNlLCBzbyB0aGF0IHRob3NlIG9mIHRoZW0gd2hvIGZsZWQgZnJvbSB0aGUgZmllbGQgd291bGQgZmluZCBubyBzYWZldHksIGFuZCB0aG9zZSB3aG8gZmVsbCB1cG9uIGl0IHdvdWxkIGhhdmUgbm8gYnVyaWFsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGVzZSBtZW4sIHRoZW4sIFRpbW9sZW9uIGNvdW50ZWQgaXQgZ2FpbiB0aGF0IHRoZXkgaGFkIHNob3duIHdoYXQgdGhleSB3ZXJlIGJlZm9yZSB0aGUgYmF0dGxlOyB0aGUgcmVzdCBoZSBlbmNvdXJhZ2VkIGFuZCBsZWQgdGhlbSB3aXRoIGFsbCBzcGVlZCB0byB0aGUgcml2ZXIgQ3JpbWVzdXMsIHdoZXJlIGhlIGhlYXJkIHRoYXQgdGhlIENhcnRoYWdpbmlhbnMgYWxzbyB3ZXJlIGNvbmNlbnRyYXRpbmcuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHdhcyBtYXJjaGluZyB1cCBhIGhpbGwsIGZyb20gdGhlIGNyZXN0IG9mIHdoaWNoIHRoZXkgZXhwZWN0ZWQgdG8gbG9vayBkb3duIHVwb24gdGhlIGNhbXAgYW5kIHRoZSBmb3JjZXMgb2YgdGhlIGVuZW15LCB0aGVyZSBtZXQgdGhlbSBieSBjaGFuY2Ugc29tZSBtdWxlcyBsYWRlbiB3aXRoIHBhcnNsZXk7IGFuZCBpdCBvY2N1cnJlZCB0byB0aGUgc29sZGllcnMgdGhhdCB0aGUgc2lnbiB3YXMgYSBiYWQgb25lLCBiZWNhdXNlIHdlIGFyZSBnZW5lcmFsbHkgYWNjdXN0b21lZCB0byB3cmVhdGggdGhlIHRvbWJzIG9mIHRoZSBkZWFkIHdpdGggcGFyc2xleTsgYW5kIHRoaXMgaGFzIGdpdmVuIHJpc2UgdG8gYSBwcm92ZXJiLCBuYW1lbHksIHRoYXQgb25lIHdobyBpcyBkYW5nZXJvdXNseSBzaWNrIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bmVlZHMgb25seSBwYXJzbGV5LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgd2lzaGluZyB0byBmcmVlIHRoZW0gZnJvbSB0aGVpciBzdXBlcnN0aXRpb3VzIGZlYXJzIGFuZCB0YWtlIGF3YXkgdGhlaXIgZGVzcG9uZGVuY3ksIFRpbW9sZW9uIGhhbHRlZCB0aGVtIG9uIHRoZWlyIG1hcmNoLCBhbmQgYWZ0ZXIgZGlzY291cnNpbmcgb3RoZXJ3aXNlIGFzIGJlZml0dGVkIHRoZSBvY2Nhc2lvbiwgc2FpZCBhbHNvIHRoYXQgdGhlIHdyZWF0aCBmb3IgdGhlaXIgdmljdG9yeSBoYWQgY29tZSBpbnRvIHRoZWlyIGhhbmRzIGluIGFkdmFuY2UgYW5kIG9mIGl0cyBvd24gYWNjb3JkLCB0aGUgd3JlYXRoIHdpdGggd2hpY2ggQ29yaW50aGlhbnMgY3Jvd24gdGhlIHZpY3RvcnMgYXQgdGhlIElzdGhtaWFuIGdhbWVzLCBjb25zaWRlcmluZyB0aGUgZ2FybGFuZCBvZiBwYXJzbGV5IHRvIGJlIHRyYWRpdGlvbmFsbHkgc2FjcmVkIGluIHRoZWlyIGNvdW50cnkuIEZvciBhdCB0aGF0IHRpbWUgcGFyc2xleSB3YXMgc3RpbGwgdXNlZCBmb3Igd3JlYXRocyBhdCB0aGUgSXN0aG1pYW4sIGFzIGl0IGlzIG5vdyBhdCB0aGUgTmVtZWFuIGdhbWVzLCBhbmQgaXQgd2FzIG5vdCBsb25nIGFnbyB0aGF0IHRoZSBwaW5lIGNhbWUgaW50byB1c2UgaW5zdGVhZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gVGltb2xlb24gaGFkIGFkZHJlc3NlZCBoaXMgc29sZGllcnMsIGFzIEkgaGF2ZSBzYWlkLCBoZSB0b29rIG9mIHRoZSBwYXJzbGV5IGFtaWQgY3Jvd25lZCBoaW1zZWxmIHdpdGggaXQgZmlyc3QsIGFuZCB0aGVuIHRoZSBjYXB0YWlucyBhbmQgdGhlIGNvbW1vbiBzb2xkaWVycyBhYm91dCBoaW0gZGlkIHRoZSBzYW1lLiBNb3Jlb3ZlciwgdGhlIHNvb3Roc2F5ZXJzLCBvYnNlcnZpbmcgdHdvIGVhZ2xlcyBjb21pbmcgdXAgb24gdGhlIHdpbmcsIG9uZSBvZiB3aGljaCBib3JlIGEgc2VycGVudCBwaWVyY2VkIHdpdGggaXRzIHRhbG9ucywgd2hpbGUgdGhlIG90aGVyIGZsZXcgd2l0aCBhIGxvdWQgYW5kIGluc3BpcmluZyBjcnksIHBvaW50ZWQgdGhlbSBvdXQgdG8gdGhlIHNvbGRpZXJzLCBhbmQgYWxsIGJldG9vayB0aGVtc2VsdmVzIHRvIGludm9raW5nIHRoZSBnb2RzIHdpdGggcHJheWVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgaGUgd2FzIG1hcmNoaW5nIHVwIGEgaGlsbCwgZnJvbSB0aGUgY3Jlc3Qgb2Ygd2hpY2ggdGhleSBleHBlY3RlZCB0byBsb29rIGRvd24gdXBvbiB0aGUgY2FtcCBhbmQgdGhlIGZvcmNlcyBvZiB0aGUgZW5lbXksIHRoZXJlIG1ldCB0aGVtIGJ5IGNoYW5jZSBzb21lIG11bGVzIGxhZGVuIHdpdGggcGFyc2xleTsgYW5kIGl0IG9jY3VycmVkIHRvIHRoZSBzb2xkaWVycyB0aGF0IHRoZSBzaWduIHdhcyBhIGJhZCBvbmUsIGJlY2F1c2Ugd2UgYXJlIGdlbmVyYWxseSBhY2N1c3RvbWVkIHRvIHdyZWF0aCB0aGUgdG9tYnMgb2YgdGhlIGRlYWQgd2l0aCBwYXJzbGV5OyBhbmQgdGhpcyBoYXMgZ2l2ZW4gcmlzZSB0byBhIHByb3ZlcmIsIG5hbWVseSwgdGhhdCBvbmUgd2hvIGlzIGRhbmdlcm91c2x5IHNpY2sgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPm5lZWRzIG9ubHkgcGFyc2xleS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aXNoaW5nIHRvIGZyZWUgdGhlbSBmcm9tIHRoZWlyIHN1cGVyc3RpdGlvdXMgZmVhcnMgYW5kIHRha2UgYXdheSB0aGVpciBkZXNwb25kZW5jeSwgVGltb2xlb24gaGFsdGVkIHRoZW0gb24gdGhlaXIgbWFyY2gsIGFuZCBhZnRlciBkaXNjb3Vyc2luZyBvdGhlcndpc2UgYXMgYmVmaXR0ZWQgdGhlIG9jY2FzaW9uLCBzYWlkIGFsc28gdGhhdCB0aGUgd3JlYXRoIGZvciB0aGVpciB2aWN0b3J5IGhhZCBjb21lIGludG8gdGhlaXIgaGFuZHMgaW4gYWR2YW5jZSBhbmQgb2YgaXRzIG93biBhY2NvcmQsIHRoZSB3cmVhdGggd2l0aCB3aGljaCBDb3JpbnRoaWFucyBjcm93biB0aGUgdmljdG9ycyBhdCB0aGUgSXN0aG1pYW4gZ2FtZXMsIGNvbnNpZGVyaW5nIHRoZSBnYXJsYW5kIG9mIHBhcnNsZXkgdG8gYmUgdHJhZGl0aW9uYWxseSBzYWNyZWQgaW4gdGhlaXIgY291bnRyeS4gRm9yIGF0IHRoYXQgdGltZSBwYXJzbGV5IHdhcyBzdGlsbCB1c2VkIGZvciB3cmVhdGhzIGF0IHRoZSBJc3RobWlhbiwgYXMgaXQgaXMgbm93IGF0IHRoZSBOZW1lYW4gZ2FtZXMsIGFuZCBpdCB3YXMgbm90IGxvbmcgYWdvIHRoYXQgdGhlIHBpbmUgY2FtZSBpbnRvIHVzZSBpbnN0ZWFkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIFRpbW9sZW9uIGhhZCBhZGRyZXNzZWQgaGlzIHNvbGRpZXJzLCBhcyBJIGhhdmUgc2FpZCwgaGUgdG9vayBvZiB0aGUgcGFyc2xleSBhbWlkIGNyb3duZWQgaGltc2VsZiB3aXRoIGl0IGZpcnN0LCBhbmQgdGhlbiB0aGUgY2FwdGFpbnMgYW5kIHRoZSBjb21tb24gc29sZGllcnMgYWJvdXQgaGltIGRpZCB0aGUgc2FtZS4gTW9yZW92ZXIsIHRoZSBzb290aHNheWVycywgb2JzZXJ2aW5nIHR3byBlYWdsZXMgY29taW5nIHVwIG9uIHRoZSB3aW5nLCBvbmUgb2Ygd2hpY2ggYm9yZSBhIHNlcnBlbnQgcGllcmNlZCB3aXRoIGl0cyB0YWxvbnMsIHdoaWxlIHRoZSBvdGhlciBmbGV3IHdpdGggYSBsb3VkIGFuZCBpbnNwaXJpbmcgY3J5LCBwb2ludGVkIHRoZW0gb3V0IHRvIHRoZSBzb2xkaWVycywgYW5kIGFsbCBiZXRvb2sgdGhlbXNlbHZlcyB0byBpbnZva2luZyB0aGUgZ29kcyB3aXRoIHByYXllcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIHNlYXNvbiBvZiB0aGUgeWVhciB3YXMgZWFybHkgc3VtbWVyLCB0aGUgbW9udGggb2YgVGhhcmdlbGlvbiB3YXMgZHJhd2luZyB0byBhIGNsb3NlLCBhbmQgdGhlIHN1bW1lciBzb2xzdGljZSB3YXMgbmVhcjs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JdCB3YXMgZWFybHkgaW4gSnVuZSwgMzM5IEIuQy48L25vdGU+IHRoZSByaXZlciBleGhhbGVkIGEgdGhpY2sgbWlzdCB3aGljaCBhdCBmaXJzdCBoaWQgdGhlIHBsYWluIGluIGRhcmtuZXNzLCBhbmQgbm90aGluZyBjb3VsZCBiZSBzZWVuIGluIHRoZSBlbmVteSdzIGNhbXAsIG9ubHkgYW4gaW5hcnRpY3VsYXRlIGFuZCBjb25mdXNlZCBub2lzZSBtYWRlIGl0cyB3YXkgdXAgdG8gdGhlIGhpbGwsIHNob3dpbmcgdGhhdCB0aGUgdmFzdCBob3N0IHdhcyBtb3ZpbmcgZm9yd2FyZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIHRoZSBDb3JpbnRoaWFucyBoYWQgYXNjZW5kZWQgdGhlIGhpbGwsIHdoZXJlIHRoZXkgc3RvcHBlZCwgbGFpZCBkb3duIHRoZWlyIHNoaWVsZHMsIGFuZCByZXN0ZWQgdGhlbXNlbHZlcywgdGhlIHN1biB3YXMgcGFzc2luZyB0aGUgbWVyaWRpYW4gYW5kIGRyYXdpbmcgdGhlIHZhcG91cnMgb24gaGlnaCwgdGhlIHRoaWNrIGhhemUgbW92ZWQgaW4gbWFzc2VzIHRvd2FyZHMgdGhlIGhlaWdodHMgYW5kIGh1bmcgaW4gY2xvdWRzIGFib3V0IHRoZSBtb3VudGFpbiBzdW1taXRzLCB3aGlsZSB0aGUgcmVnaW9ucyBiZWxvdyBjbGVhcmVkIHVwLCB0aGUgQ3JpbWVzdXMgY2FtZSBpbnRvIHZpZXcsIGFuZCB0aGUgZW5lbXkgd2VyZSBzZWVuIGNyb3NzaW5nIGl0LCBpbiB0aGUgdmFuIHRoZWlyIGZvdXItaG9yc2UgY2hhcmlvdHMgZm9ybWlkYWJseSBhcnJheWVkIGZvciBiYXR0bGUsIGFuZCBiZWhpbmQgdGhlc2UgdGVuIHRob3VzYW5kIG1lbi1hdC1hcm1zIHdpdGggd2hpdGUgc2hpZWxkcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgdGhlIENvcmludGhpYW5zIGNvbmplY3R1cmVkIHRvIGJlIENhcnRoYWdpbmlhbnMsIGZyb20gdGhlIHNwbGVuZG91ciBvZiB0aGVpciBhcm1vdXIgYW5kIHRoZSBzbG93bmVzcyBhbmQgZ29vZCBvcmRlciBvZiB0aGVpciBtYXJjaC4gQWZ0ZXIgdGhlc2UgdGhlIG90aGVyIG5hdGlvbnMgc3RyZWFtZWQgb24gYW5kIHdlcmUgbWFraW5nIHRoZSBjcm9zc2luZyBpbiB0dW11bHR1b3VzIGNvbmZ1c2lvbi4gVGhlbiBUaW1vbGVvbiwgbm90aWNpbmcgdGhhdCB0aGUgcml2ZXIgd2FzIHB1dHRpbmcgaXQgaW4gdGhlaXIgcG93ZXIgdG8gY3V0IG9mZiBhbmQgZW5nYWdlIHdpdGggd2hhdGV2ZXIgbnVtYmVycyBvZiB0aGUgZW5lbXkgdGhleSB0aGVtc2VsdmVzIGRlc2lyZWQsIGFuZCBiaWRkaW5nIGhpcyBzb2xkaWVycyBvYnNlcnZlIHRoYXQgdGhlIHBoYWxhbnggb2YgdGhlIGVuZW15IHdhcyBzdW5kZXJlZCBieSB0aGUgcml2ZXIsIHNpbmNlIHNvbWUgb2YgdGhlbSBoYWQgYWxyZWFkeSBjcm9zc2VkLCB3aGlsZSBvdGhlcnMgd2VyZSBhYm91dCB0byBkbyBzbywgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+b3JkZXJlZCBEZW1hcmV0dXMgdG8gdGFrZSB0aGUgaG9yc2VtZW4gYW5kIGZhbGwgdXBvbiB0aGUgQ2FydGhhZ2luaWFucyBhbmQgdGhyb3cgdGhlaXIgcmFua3MgaW50byBjb25mdXNpb24gYmVmb3JlIHRoZWlyIGFycmF5IHdhcyB5ZXQgZm9ybWVkLiBUaGVuIGhlIGhpbXNlbGYsIGRlc2NlbmRpbmcgaW50byB0aGUgcGxhaW4sIGFzc2lnbmVkIHRoZSB3aW5ncyB0byB0aGUgb3RoZXIgU2ljaWxpYW4gR3JlZWtzLCB1bml0aW5nIGEgZmV3IG9mIGhpcyBtZXJjZW5hcmllcyB3aXRoIGVhY2ggd2luZywgd2hpbGUgaGUgdG9vayB0aGUgU3lyYWN1c2FucyBhbmQgdGhlIGJlc3QgZmlnaHRlcnMgYW1vbmcgaGlzIG1lcmNlbmFyaWVzIHVuZGVyIGhpcyBvd24gY29tbWFuZCBpbiB0aGUgY2VudHJlLiBUaGVuIGhlIHdhaXRlZCBhIGxpdHRsZSB3aGlsZSwgd2F0Y2hpbmcgd2hhdCBoaXMgaG9yc2VtZW4gd291bGQgZG8sIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuIGhlIHNhdyB0aGF0IHRoZXkgd2VyZSB1bmFibGUgdG8gY29tZSB0byBjbG9zZSBxdWFydGVycyB3aXRoIHRoZSBDYXJ0aGFnaW5pYW5zIG9uIGFjY291bnQgb2YgdGhlIGNoYXJpb3RzIHdoaWNoIGNvdXJzZWQgdXAgYW5kIGRvd24gaW4gZnJvbnQgb2YgdGhlaXIgbGluZXMsIGJ1dCB3ZXJlIGZvcmNlZCB0byB3aGVlbCBhYm91dCBjb250aW51YWxseSB0aGF0IHRoZWlyIHJhbmtzIG1pZ2h0IG5vdCBiZSBicm9rZW4sIGFuZCB0byBtYWtlIHRoZWlyIGNoYXJnZXMgaW4gcXVpY2sgc3VjY2Vzc2lvbiBhZnRlciBmYWNpbmcgYWJvdXQgYWdhaW4sIGhlIHRvb2sgdXAgaGlzIHNoaWVsZCBhbmQgc2hvdXRlZCB0byBoaXMgaW5mYW50cnltZW4gdG8gZm9sbG93IGFuZCBiZSBvZiBnb29kIGNvdXJhZ2U7IGFuZCBoaXMgdm9pY2Ugc2VlbWVkIHN0cm9uZ2VyIHRoYW4gdXN1YWwgYW5kIG1vcmUgdGhhbiBodW1hbiwgd2hldGhlciBpdCB3YXMgZnJvbSBlbW90aW9uIHRoYXQgaGUgbWFkZSBpdCBzbyBsb3VkLCBpbiB2aWV3IG9mIHRoZSBzdHJ1Z2dsZSBhbmQgdGhlIGVudGh1c2lhc20gd2hpY2ggaXQgaW5zcGlyZWQsIG9yIHdoZXRoZXIsIGFzIG1vc3QgZmVsdCBhdCB0aGUgdGltZSwgc29tZSBkZWl0eSBqb2luZWQgaW4gaGlzIHV0dGVyYW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgaGlzIG1lbiByZS1lY2hvaW5nIGhpcyBzaG91dCwgYW5kIGJlZ2dpbmcgaGltIHRvIGxlYWQgdGhlbSBvbiB3aXRob3V0IGRlbGF5LCBoZSBzaWduYWxsZWQgdG8gaGlzIGhvcnNlbWVuIHRvIHJpZGUgYWxvbmcgb3V0c2lkZSBhbmQgcGFzdCB0aGUgbGluZSBvZiBjaGFyaW90cyBhbmQgYXR0YWNrIHRoZSBlbmVteSBvbiB0aGUgZmxhbmssIHdoaWxlIGhlIGhpbXNlbGYgbWFkZSBoaXMgdmFuZ3VhcmQgbG9jayB0aGVpciBzaGllbGRzIGluIGNsb3NlIGFycmF5LCBvcmRlcmVkIHRoZSB0cnVtcGV0IHRvIHNvdW5kIHRoZSBjaGFyZ2UsIGFuZCBmZWxsIHVwb24gdGhlIENhcnRoYWdpbmlhbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGUgc2Vhc29uIG9mIHRoZSB5ZWFyIHdhcyBlYXJseSBzdW1tZXIsIHRoZSBtb250aCBvZiBUaGFyZ2VsaW9uIHdhcyBkcmF3aW5nIHRvIGEgY2xvc2UsIGFuZCB0aGUgc3VtbWVyIHNvbHN0aWNlIHdhcyBuZWFyOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SXQgd2FzIGVhcmx5IGluIEp1bmUsIDMzOSBCLkMuPC9ub3RlPiB0aGUgcml2ZXIgZXhoYWxlZCBhIHRoaWNrIG1pc3Qgd2hpY2ggYXQgZmlyc3QgaGlkIHRoZSBwbGFpbiBpbiBkYXJrbmVzcywgYW5kIG5vdGhpbmcgY291bGQgYmUgc2VlbiBpbiB0aGUgZW5lbXkncyBjYW1wLCBvbmx5IGFuIGluYXJ0aWN1bGF0ZSBhbmQgY29uZnVzZWQgbm9pc2UgbWFkZSBpdHMgd2F5IHVwIHRvIHRoZSBoaWxsLCBzaG93aW5nIHRoYXQgdGhlIHZhc3QgaG9zdCB3YXMgbW92aW5nIGZvcndhcmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciB0aGUgQ29yaW50aGlhbnMgaGFkIGFzY2VuZGVkIHRoZSBoaWxsLCB3aGVyZSB0aGV5IHN0b3BwZWQsIGxhaWQgZG93biB0aGVpciBzaGllbGRzLCBhbmQgcmVzdGVkIHRoZW1zZWx2ZXMsIHRoZSBzdW4gd2FzIHBhc3NpbmcgdGhlIG1lcmlkaWFuIGFuZCBkcmF3aW5nIHRoZSB2YXBvdXJzIG9uIGhpZ2gsIHRoZSB0aGljayBoYXplIG1vdmVkIGluIG1hc3NlcyB0b3dhcmRzIHRoZSBoZWlnaHRzIGFuZCBodW5nIGluIGNsb3VkcyBhYm91dCB0aGUgbW91bnRhaW4gc3VtbWl0cywgd2hpbGUgdGhlIHJlZ2lvbnMgYmVsb3cgY2xlYXJlZCB1cCwgdGhlIENyaW1lc3VzIGNhbWUgaW50byB2aWV3LCBhbmQgdGhlIGVuZW15IHdlcmUgc2VlbiBjcm9zc2luZyBpdCwgaW4gdGhlIHZhbiB0aGVpciBmb3VyLWhvcnNlIGNoYXJpb3RzIGZvcm1pZGFibHkgYXJyYXllZCBmb3IgYmF0dGxlLCBhbmQgYmVoaW5kIHRoZXNlIHRlbiB0aG91c2FuZCBtZW4tYXQtYXJtcyB3aXRoIHdoaXRlIHNoaWVsZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHRoZSBDb3JpbnRoaWFucyBjb25qZWN0dXJlZCB0byBiZSBDYXJ0aGFnaW5pYW5zLCBmcm9tIHRoZSBzcGxlbmRvdXIgb2YgdGhlaXIgYXJtb3VyIGFuZCB0aGUgc2xvd25lc3MgYW5kIGdvb2Qgb3JkZXIgb2YgdGhlaXIgbWFyY2guIEFmdGVyIHRoZXNlIHRoZSBvdGhlciBuYXRpb25zIHN0cmVhbWVkIG9uIGFuZCB3ZXJlIG1ha2luZyB0aGUgY3Jvc3NpbmcgaW4gdHVtdWx0dW91cyBjb25mdXNpb24uIFRoZW4gVGltb2xlb24sIG5vdGljaW5nIHRoYXQgdGhlIHJpdmVyIHdhcyBwdXR0aW5nIGl0IGluIHRoZWlyIHBvd2VyIHRvIGN1dCBvZmYgYW5kIGVuZ2FnZSB3aXRoIHdoYXRldmVyIG51bWJlcnMgb2YgdGhlIGVuZW15IHRoZXkgdGhlbXNlbHZlcyBkZXNpcmVkLCBhbmQgYmlkZGluZyBoaXMgc29sZGllcnMgb2JzZXJ2ZSB0aGF0IHRoZSBwaGFsYW54IG9mIHRoZSBlbmVteSB3YXMgc3VuZGVyZWQgYnkgdGhlIHJpdmVyLCBzaW5jZSBzb21lIG9mIHRoZW0gaGFkIGFscmVhZHkgY3Jvc3NlZCwgd2hpbGUgb3RoZXJzIHdlcmUgYWJvdXQgdG8gZG8gc28sIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPm9yZGVyZWQgRGVtYXJldHVzIHRvIHRha2UgdGhlIGhvcnNlbWVuIGFuZCBmYWxsIHVwb24gdGhlIENhcnRoYWdpbmlhbnMgYW5kIHRocm93IHRoZWlyIHJhbmtzIGludG8gY29uZnVzaW9uIGJlZm9yZSB0aGVpciBhcnJheSB3YXMgeWV0IGZvcm1lZC4gVGhlbiBoZSBoaW1zZWxmLCBkZXNjZW5kaW5nIGludG8gdGhlIHBsYWluLCBhc3NpZ25lZCB0aGUgd2luZ3MgdG8gdGhlIG90aGVyIFNpY2lsaWFuIEdyZWVrcywgdW5pdGluZyBhIGZldyBvZiBoaXMgbWVyY2VuYXJpZXMgd2l0aCBlYWNoIHdpbmcsIHdoaWxlIGhlIHRvb2sgdGhlIFN5cmFjdXNhbnMgYW5kIHRoZSBiZXN0IGZpZ2h0ZXJzIGFtb25nIGhpcyBtZXJjZW5hcmllcyB1bmRlciBoaXMgb3duIGNvbW1hbmQgaW4gdGhlIGNlbnRyZS4gVGhlbiBoZSB3YWl0ZWQgYSBsaXR0bGUgd2hpbGUsIHdhdGNoaW5nIHdoYXQgaGlzIGhvcnNlbWVuIHdvdWxkIGRvLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuIGhlIHNhdyB0aGF0IHRoZXkgd2VyZSB1bmFibGUgdG8gY29tZSB0byBjbG9zZSBxdWFydGVycyB3aXRoIHRoZSBDYXJ0aGFnaW5pYW5zIG9uIGFjY291bnQgb2YgdGhlIGNoYXJpb3RzIHdoaWNoIGNvdXJzZWQgdXAgYW5kIGRvd24gaW4gZnJvbnQgb2YgdGhlaXIgbGluZXMsIGJ1dCB3ZXJlIGZvcmNlZCB0byB3aGVlbCBhYm91dCBjb250aW51YWxseSB0aGF0IHRoZWlyIHJhbmtzIG1pZ2h0IG5vdCBiZSBicm9rZW4sIGFuZCB0byBtYWtlIHRoZWlyIGNoYXJnZXMgaW4gcXVpY2sgc3VjY2Vzc2lvbiBhZnRlciBmYWNpbmcgYWJvdXQgYWdhaW4sIGhlIHRvb2sgdXAgaGlzIHNoaWVsZCBhbmQgc2hvdXRlZCB0byBoaXMgaW5mYW50cnltZW4gdG8gZm9sbG93IGFuZCBiZSBvZiBnb29kIGNvdXJhZ2U7IGFuZCBoaXMgdm9pY2Ugc2VlbWVkIHN0cm9uZ2VyIHRoYW4gdXN1YWwgYW5kIG1vcmUgdGhhbiBodW1hbiwgd2hldGhlciBpdCB3YXMgZnJvbSBlbW90aW9uIHRoYXQgaGUgbWFkZSBpdCBzbyBsb3VkLCBpbiB2aWV3IG9mIHRoZSBzdHJ1Z2dsZSBhbmQgdGhlIGVudGh1c2lhc20gd2hpY2ggaXQgaW5zcGlyZWQsIG9yIHdoZXRoZXIsIGFzIG1vc3QgZmVsdCBhdCB0aGUgdGltZSwgc29tZSBkZWl0eSBqb2luZWQgaW4gaGlzIHV0dGVyYW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGhpcyBtZW4gcmUtZWNob2luZyBoaXMgc2hvdXQsIGFuZCBiZWdnaW5nIGhpbSB0byBsZWFkIHRoZW0gb24gd2l0aG91dCBkZWxheSwgaGUgc2lnbmFsbGVkIHRvIGhpcyBob3JzZW1lbiB0byByaWRlIGFsb25nIG91dHNpZGUgYW5kIHBhc3QgdGhlIGxpbmUgb2YgY2hhcmlvdHMgYW5kIGF0dGFjayB0aGUgZW5lbXkgb24gdGhlIGZsYW5rLCB3aGlsZSBoZSBoaW1zZWxmIG1hZGUgaGlzIHZhbmd1YXJkIGxvY2sgdGhlaXIgc2hpZWxkcyBpbiBjbG9zZSBhcnJheSwgb3JkZXJlZCB0aGUgdHJ1bXBldCB0byBzb3VuZCB0aGUgY2hhcmdlLCBhbmQgZmVsbCB1cG9uIHRoZSBDYXJ0aGFnaW5pYW5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlc2Ugd2l0aHN0b29kIGhpcyBmaXJzdCBvbnNldCBzdHVyZGlseSwgYW5kIG93aW5nIHRvIHRoZSBpcm9uIGJyZWFzdHBsYXRlcyBhbmQgYnJvbnplIGhlbG1ldHMgd2l0aCB3aGljaCB0aGVpciBwZXJzb25zIHdlcmUgcHJvdGVjdGVkLCBhbmQgdGhlIGdyZWF0IHNoaWVsZHMgd2hpY2ggdGhleSBoZWxkIGluIGZyb250IG9mIHRoZW0sIHJlcGVsbGVkIHRoZSBzcGVhciB0aHJ1c3RzLiBCdXQgd2hlbiB0aGUgc3RydWdnbGUgY2FtZSB0byBzd29yZHMgYW5kIHRoZSB3b3JrIHJlcXVpcmVkIHNraWxsIG5vIGxlc3MgdGhhbiBzdHJlbmd0aCwgc3VkZGVubHksIGZyb20gdGhlIGhpbGxzLCBmZWFyZnVsIHBlYWxzIG9mIHRodW5kZXIgY3Jhc2hlZCBkb3duLCBhbmQgdml2aWQgZmxhc2hlcyBvZiBsaWdodG5pbmcgZGFydGVkIGZvcnRoIHdpdGggdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGUgZGFya25lc3MgaG92ZXJpbmcgb3ZlciB0aGUgaGlsbHMgYW5kIG1vdW50YWluIHN1bW1pdHMgY2FtZSBkb3duIHRvIHRoZSBmaWVsZCBvZiBiYXR0bGUsIG1pbmdsZWQgd2l0aCByYWluLCB3aW5kLCBhbmQgaGFpbC4gSXQgZW52ZWxvcGVkIHRoZSBHcmVla3MgZnJvbSBiZWhpbmQgYW5kIHNtb3RlIHRoZWlyIGJhY2tzLCBidXQgaXQgc21vdGUgdGhlIEJhcmJhcmlhbnMgaW4gdGhlIGZhY2UgYW5kIGRhenpsZWQgdGhlaXIgZXllcywgYSB0ZW1wZXN0IG9mIHJhaW4gYW5kIGNvbnRpbnVvdXMgZmxhbWVzIGRhc2hpbmcgZnJvbSB0aGUgY2xvdWRzLiBJbiBhbGwgdGhpcyB0aGVyZSB3YXMgbXVjaCB0aGF0IGdhdmUgZGlzdHJlc3MsIGFuZCBtb3N0IG9mIGFsbCB0byB0aGUgaW5leHBlcmllbmNlZDsgYW5kIHBhcnRpY3VsYXJseSwgYXMgaXQgd291bGQgc2VlbSwgdGhlIHBlYWxzIG9mIHRodW5kZXIgd29ya2VkIGhhcm0sIGFuZCB0aGUgY2xhdHRlciBvZiB0aGUgYXJtb3VyIHNtaXR0ZW4gYnkgdGhlIGRhc2hpbmcgcmFpbiBhbmQgaGFpbCwgd2hpY2ggbWFkZSBpdCBpbXBvc3NpYmxlIHRvIGhlYXIgdGhlIGNvbW1hbmRzIG9mIHRoZSBsZWFkZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzLCBzaW5jZSB0aGUgQ2FydGhhZ2luaWFucyB3ZXJlIG5vdCBsaWdodGx5IGVxdWlwcGVkLCBidXQsIGFzIEkgaGF2ZSBzYWlkLCBlbmNhc2VkIGluIGFybW91ciwgYm90aCB0aGUgbXVkIGFuZCB0aGUgYm9zb21zIG9mIHRoZWlyIHR1bmljcyBmaWxsZWQgd2l0aCB3YXRlciBpbXBlZGVkIHRoZW0sIHNvIHRoYXQgdGhleSB3ZXJlIHVud2llbGR5IGFuZCBpbmVmZmVjdGl2ZSBpbiB0aGVpciBmaWdodGluZywgYW5kIGVhc2lseSB1cHNldCBieSB0aGUgR3JlZWtzLCBhbmQgd2hlbiB0aGV5IGhhZCBvbmNlIGZhbGxlbiBpdCB3YXMgaW1wb3NzaWJsZSBmb3IgdGhlbSB0byByaXNlIGFnYWluIGZyb20gdGhlIG11ZCB3aXRoIHRoZWlyIHdlYXBvbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgQ3JpbWVzdXMsIGhhdmluZyBiZWVuIGFscmVhZHkgZ3JlYXRseSBzd29sbGVuIGJ5IHRoZSByYWlucywgd2FzIGZvcmNlZCBvdmVyIGl0cyBiYW5rcyBieSB0aG9zZSB3aG8gd2VyZSBjcm9zc2luZyBpdCwgYW5kIHRoZSBhZGphY2VudCBwbGFpbiwgaW50byB3aGljaCBtYW55IGdsZW5zIGFuZCByYXZpbmVzIG9wZW5lZCBmcm9tIHRoZSBoaWxscywgd2FzIGZpbGxlZCB3aXRoIHN0cmVhbXMgdGhhdCBodXJyaWVkIGFsb25nIG5vIGZpeGVkIGNoYW5uZWxzLCBhbmQgaW4gdGhlc2UgdGhlIENhcnRoYWdpbmlhbnMgd2FsbG93ZWQgYWJvdXQgYW5kIHdlcmUgaGFyZCBiZXNldC4gRmluYWxseSwgdGhlIHN0b3JtIHN0aWxsIGFzc2FpbGluZyB0aGVtLCBhbmQgdGhlIEdyZWVrcyBoYXZpbmcgb3ZlcnRocm93biB0aGVpciBmaXJzdCByYW5rIG9mIGZvdXIgaHVuZHJlZCBtZW4sIHRoZSBtYWluIGJvZHkgd2FzIHB1dCB0byBmbGlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgd2VyZSBvdmVydGFrZW4gaW4gdGhlIHBsYWluIGFuZCBjdXQgdG8gcGllY2VzLCBhbmQgbWFueSB0aGUgcml2ZXIgZGFzaGVkIHVwb24gYW5kIGNhcnJpZWQgYXdheSB0byBkZXN0cnVjdGlvbiBhcyB0aGV5IGVuY291bnRlcmVkIHRob3NlIHdobyB3ZXJlIHN0aWxsIHRyeWluZyB0byBjcm9zcywgYnV0IG1vc3Qgb2YgdGhlbSB0aGUgbGlnaHQtYXJtZWQgR3JlZWtzIHJhbiB1cG9uIGFuZCBkZXNwYXRjaGVkIGFzIHRoZXkgd2VyZSBtYWtpbmcgZm9yIHRoZSBoaWxscy4gQXQgYW55IHJhdGUsIGl0IGlzIHNhaWQgdGhhdCBhbW9uZyB0ZW4gdGhvdXNhbmQgZGVhZCBib2RpZXMsIHRocmVlIHRob3VzYW5kIHdlcmUgdGhvc2Ugb2YgQ2FydGhhZ2luaWFuc+KAlGEgZ3JlYXQgYWZmbGljdGlvbiBmb3IgdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBubyBvdGhlcnMgd2VyZSBzdXBlcmlvciB0byB0aGVzZSBpbiBiaXJ0aCBvciB3ZWFsdGggb3IgcmVwdXRhdGlvbiwgbm9yIGlzIGl0IHJlY29yZGVkIHRoYXQgc28gbWFueSBuYXRpdmUgQ2FydGhhZ2luaWFucyBldmVyIHBlcmlzaGVkIGluIGEgc2luZ2xlIGJhdHRsZSBiZWZvcmUsIGJ1dCB0aGV5IHVzZWQgTGlieWFucyBmb3IgdGhlIG1vc3QgcGFydCBhbmQgSWJlcmlhbnMgYW5kIE51bWlkaWFucyBmb3IgdGhlaXIgYmF0dGxlcywgYW5kIHRodXMgc3VzdGFpbmVkIHRoZWlyIGRlZmVhdHMgYXQgdGhlIGNvc3Qgb2Ygb3RoZXIgbmF0aW9ucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXNlIHdpdGhzdG9vZCBoaXMgZmlyc3Qgb25zZXQgc3R1cmRpbHksIGFuZCBvd2luZyB0byB0aGUgaXJvbiBicmVhc3RwbGF0ZXMgYW5kIGJyb256ZSBoZWxtZXRzIHdpdGggd2hpY2ggdGhlaXIgcGVyc29ucyB3ZXJlIHByb3RlY3RlZCwgYW5kIHRoZSBncmVhdCBzaGllbGRzIHdoaWNoIHRoZXkgaGVsZCBpbiBmcm9udCBvZiB0aGVtLCByZXBlbGxlZCB0aGUgc3BlYXIgdGhydXN0cy4gQnV0IHdoZW4gdGhlIHN0cnVnZ2xlIGNhbWUgdG8gc3dvcmRzIGFuZCB0aGUgd29yayByZXF1aXJlZCBza2lsbCBubyBsZXNzIHRoYW4gc3RyZW5ndGgsIHN1ZGRlbmx5LCBmcm9tIHRoZSBoaWxscywgZmVhcmZ1bCBwZWFscyBvZiB0aHVuZGVyIGNyYXNoZWQgZG93biwgYW5kIHZpdmlkIGZsYXNoZXMgb2YgbGlnaHRuaW5nIGRhcnRlZCBmb3J0aCB3aXRoIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIGRhcmtuZXNzIGhvdmVyaW5nIG92ZXIgdGhlIGhpbGxzIGFuZCBtb3VudGFpbiBzdW1taXRzIGNhbWUgZG93biB0byB0aGUgZmllbGQgb2YgYmF0dGxlLCBtaW5nbGVkIHdpdGggcmFpbiwgd2luZCwgYW5kIGhhaWwuIEl0IGVudmVsb3BlZCB0aGUgR3JlZWtzIGZyb20gYmVoaW5kIGFuZCBzbW90ZSB0aGVpciBiYWNrcywgYnV0IGl0IHNtb3RlIHRoZSBCYXJiYXJpYW5zIGluIHRoZSBmYWNlIGFuZCBkYXp6bGVkIHRoZWlyIGV5ZXMsIGEgdGVtcGVzdCBvZiByYWluIGFuZCBjb250aW51b3VzIGZsYW1lcyBkYXNoaW5nIGZyb20gdGhlIGNsb3Vkcy4gSW4gYWxsIHRoaXMgdGhlcmUgd2FzIG11Y2ggdGhhdCBnYXZlIGRpc3RyZXNzLCBhbmQgbW9zdCBvZiBhbGwgdG8gdGhlIGluZXhwZXJpZW5jZWQ7IGFuZCBwYXJ0aWN1bGFybHksIGFzIGl0IHdvdWxkIHNlZW0sIHRoZSBwZWFscyBvZiB0aHVuZGVyIHdvcmtlZCBoYXJtLCBhbmQgdGhlIGNsYXR0ZXIgb2YgdGhlIGFybW91ciBzbWl0dGVuIGJ5IHRoZSBkYXNoaW5nIHJhaW4gYW5kIGhhaWwsIHdoaWNoIG1hZGUgaXQgaW1wb3NzaWJsZSB0byBoZWFyIHRoZSBjb21tYW5kcyBvZiB0aGUgbGVhZGVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMsIHNpbmNlIHRoZSBDYXJ0aGFnaW5pYW5zIHdlcmUgbm90IGxpZ2h0bHkgZXF1aXBwZWQsIGJ1dCwgYXMgSSBoYXZlIHNhaWQsIGVuY2FzZWQgaW4gYXJtb3VyLCBib3RoIHRoZSBtdWQgYW5kIHRoZSBib3NvbXMgb2YgdGhlaXIgdHVuaWNzIGZpbGxlZCB3aXRoIHdhdGVyIGltcGVkZWQgdGhlbSwgc28gdGhhdCB0aGV5IHdlcmUgdW53aWVsZHkgYW5kIGluZWZmZWN0aXZlIGluIHRoZWlyIGZpZ2h0aW5nLCBhbmQgZWFzaWx5IHVwc2V0IGJ5IHRoZSBHcmVla3MsIGFuZCB3aGVuIHRoZXkgaGFkIG9uY2UgZmFsbGVuIGl0IHdhcyBpbXBvc3NpYmxlIGZvciB0aGVtIHRvIHJpc2UgYWdhaW4gZnJvbSB0aGUgbXVkIHdpdGggdGhlaXIgd2VhcG9ucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgQ3JpbWVzdXMsIGhhdmluZyBiZWVuIGFscmVhZHkgZ3JlYXRseSBzd29sbGVuIGJ5IHRoZSByYWlucywgd2FzIGZvcmNlZCBvdmVyIGl0cyBiYW5rcyBieSB0aG9zZSB3aG8gd2VyZSBjcm9zc2luZyBpdCwgYW5kIHRoZSBhZGphY2VudCBwbGFpbiwgaW50byB3aGljaCBtYW55IGdsZW5zIGFuZCByYXZpbmVzIG9wZW5lZCBmcm9tIHRoZSBoaWxscywgd2FzIGZpbGxlZCB3aXRoIHN0cmVhbXMgdGhhdCBodXJyaWVkIGFsb25nIG5vIGZpeGVkIGNoYW5uZWxzLCBhbmQgaW4gdGhlc2UgdGhlIENhcnRoYWdpbmlhbnMgd2FsbG93ZWQgYWJvdXQgYW5kIHdlcmUgaGFyZCBiZXNldC4gRmluYWxseSwgdGhlIHN0b3JtIHN0aWxsIGFzc2FpbGluZyB0aGVtLCBhbmQgdGhlIEdyZWVrcyBoYXZpbmcgb3ZlcnRocm93biB0aGVpciBmaXJzdCByYW5rIG9mIGZvdXIgaHVuZHJlZCBtZW4sIHRoZSBtYWluIGJvZHkgd2FzIHB1dCB0byBmbGlnaHQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgd2VyZSBvdmVydGFrZW4gaW4gdGhlIHBsYWluIGFuZCBjdXQgdG8gcGllY2VzLCBhbmQgbWFueSB0aGUgcml2ZXIgZGFzaGVkIHVwb24gYW5kIGNhcnJpZWQgYXdheSB0byBkZXN0cnVjdGlvbiBhcyB0aGV5IGVuY291bnRlcmVkIHRob3NlIHdobyB3ZXJlIHN0aWxsIHRyeWluZyB0byBjcm9zcywgYnV0IG1vc3Qgb2YgdGhlbSB0aGUgbGlnaHQtYXJtZWQgR3JlZWtzIHJhbiB1cG9uIGFuZCBkZXNwYXRjaGVkIGFzIHRoZXkgd2VyZSBtYWtpbmcgZm9yIHRoZSBoaWxscy4gQXQgYW55IHJhdGUsIGl0IGlzIHNhaWQgdGhhdCBhbW9uZyB0ZW4gdGhvdXNhbmQgZGVhZCBib2RpZXMsIHRocmVlIHRob3VzYW5kIHdlcmUgdGhvc2Ugb2YgQ2FydGhhZ2luaWFuc+KAlGEgZ3JlYXQgYWZmbGljdGlvbiBmb3IgdGhlIGNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBubyBvdGhlcnMgd2VyZSBzdXBlcmlvciB0byB0aGVzZSBpbiBiaXJ0aCBvciB3ZWFsdGggb3IgcmVwdXRhdGlvbiwgbm9yIGlzIGl0IHJlY29yZGVkIHRoYXQgc28gbWFueSBuYXRpdmUgQ2FydGhhZ2luaWFucyBldmVyIHBlcmlzaGVkIGluIGEgc2luZ2xlIGJhdHRsZSBiZWZvcmUsIGJ1dCB0aGV5IHVzZWQgTGlieWFucyBmb3IgdGhlIG1vc3QgcGFydCBhbmQgSWJlcmlhbnMgYW5kIE51bWlkaWFucyBmb3IgdGhlaXIgYmF0dGxlcywgYW5kIHRodXMgc3VzdGFpbmVkIHRoZWlyIGRlZmVhdHMgYXQgdGhlIGNvc3Qgb2Ygb3RoZXIgbmF0aW9ucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHJhbmsgb2YgdGhvc2Ugd2hvIGhhZCBmYWxsZW4gd2FzIG1hZGUga25vd24gdG8gdGhlIEdyZWVrcyBmcm9tIHRoZSBzcG9pbHMuIEZvciB0aG9zZSB3aG8gc3RyaXBwZWQgdGhlIGJvZGllcyBtYWRlIHZlcnkgbGl0dGxlIGFjY291bnQgb2YgYnJvbnplIGFuZCBpcm9uOyBzbyBhYnVuZGFudCB3YXMgc2lsdmVyLCBzbyBhYnVuZGFudCBnb2xkLiBGb3IgdGhleSBjcm9zc2VkIHRoZSByaXZlciBhbmQgc2VpemVkIHRoZSBjYW1wIHdpdGggaXRzIGJhZ2dhZ2UtdHJhaW5zLiBBcyBmb3IgdGhlIHByaXNvbmVycywgbW9zdCBvZiB0aGVtIHdlcmUgc3RvbGVuIGF3YXkgYW5kIGhpZGRlbiBieSB0aGUgc29sZGllcnMsIGJ1dCBhcyBtYW55IGFzIGZpdmUgdGhvdXNhbmQgd2VyZSBkZWxpdmVyZWQgaW50byB0aGUgcHVibGljIHN0b2NrOyB0aGVyZSB3ZXJlIGFsc28gY2FwdHVyZWQgdHdvIGh1bmRyZWQgb2YgdGhlIGZvdXItaG9yc2UgY2hhcmlvdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgbW9zdCBnbG9yaW91cyBhbmQgbWFnbmlmaWNlbnQgc2lnaHQgd2FzIHByZXNlbnRlZCBieSB0aGUgdGVudCBvZiBUaW1vbGVvbiwgd2hpY2ggd2FzIGhlYXBlZCBhYm91dCB3aXRoIGFsbCBzb3J0cyBvZiBzcG9pbHMsIGFtb25nIHdoaWNoIGEgdGhvdXNhbmQgYnJlYXN0LXBsYXRlcyBvZiBzdXBlcmlvciB3b3JrbWFuc2hpcCBhbmQgYmVhdXR5IGFuZCB0ZW4gdGhvdXNhbmQgc2hpZWxkcyB3ZXJlIGV4cG9zZWQgdG8gdmlldy4gQW5kIGFzIHRoZXJlIHdlcmUgYnV0IGZldyB0byBzdHJpcCBtYW55LCBhbmQgdGhlIGJvb3R5IHRoZXkgY2FtZSB1cG9uIHdhcyBncmVhdCwgaXQgd2FzIHRoZSB0aGlyZCBkYXkgYWZ0ZXIgdGhlIGJhdHRsZSBiZWZvcmUgdGhleSBjb3VsZCBlcmVjdCB0aGVpciB0cm9waHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHJhbmsgb2YgdGhvc2Ugd2hvIGhhZCBmYWxsZW4gd2FzIG1hZGUga25vd24gdG8gdGhlIEdyZWVrcyBmcm9tIHRoZSBzcG9pbHMuIEZvciB0aG9zZSB3aG8gc3RyaXBwZWQgdGhlIGJvZGllcyBtYWRlIHZlcnkgbGl0dGxlIGFjY291bnQgb2YgYnJvbnplIGFuZCBpcm9uOyBzbyBhYnVuZGFudCB3YXMgc2lsdmVyLCBzbyBhYnVuZGFudCBnb2xkLiBGb3IgdGhleSBjcm9zc2VkIHRoZSByaXZlciBhbmQgc2VpemVkIHRoZSBjYW1wIHdpdGggaXRzIGJhZ2dhZ2UtdHJhaW5zLiBBcyBmb3IgdGhlIHByaXNvbmVycywgbW9zdCBvZiB0aGVtIHdlcmUgc3RvbGVuIGF3YXkgYW5kIGhpZGRlbiBieSB0aGUgc29sZGllcnMsIGJ1dCBhcyBtYW55IGFzIGZpdmUgdGhvdXNhbmQgd2VyZSBkZWxpdmVyZWQgaW50byB0aGUgcHVibGljIHN0b2NrOyB0aGVyZSB3ZXJlIGFsc28gY2FwdHVyZWQgdHdvIGh1bmRyZWQgb2YgdGhlIGZvdXItaG9yc2UgY2hhcmlvdHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgbW9zdCBnbG9yaW91cyBhbmQgbWFnbmlmaWNlbnQgc2lnaHQgd2FzIHByZXNlbnRlZCBieSB0aGUgdGVudCBvZiBUaW1vbGVvbiwgd2hpY2ggd2FzIGhlYXBlZCBhYm91dCB3aXRoIGFsbCBzb3J0cyBvZiBzcG9pbHMsIGFtb25nIHdoaWNoIGEgdGhvdXNhbmQgYnJlYXN0LXBsYXRlcyBvZiBzdXBlcmlvciB3b3JrbWFuc2hpcCBhbmQgYmVhdXR5IGFuZCB0ZW4gdGhvdXNhbmQgc2hpZWxkcyB3ZXJlIGV4cG9zZWQgdG8gdmlldy4gQW5kIGFzIHRoZXJlIHdlcmUgYnV0IGZldyB0byBzdHJpcCBtYW55LCBhbmQgdGhlIGJvb3R5IHRoZXkgY2FtZSB1cG9uIHdhcyBncmVhdCwgaXQgd2FzIHRoZSB0aGlyZCBkYXkgYWZ0ZXIgdGhlIGJhdHRsZSBiZWZvcmUgdGhleSBjb3VsZCBlcmVjdCB0aGVpciB0cm9waHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxvbmcgd2l0aCB0aGUgcmVwb3J0IG9mIGhpcyB2aWN0b3J5IFRpbW9sZW9uIHNlbnQgdG8gQ29yaW50aCB0aGUgbW9zdCBiZWF1dGlmdWwgb2YgdGhlIGNhcHR1cmVkIGFybW91ciwgd2lzaGluZyB0aGF0IGhpcyBvd24gbmF0aXZlIGNpdHkgc2hvdWxkIGJlIGVudmllZCBvZiBhbGwgbWVuLCAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndoZW4gaW4gaGVyIGFsb25lIG9mIEdyZWVrIGNpdGllcyB0aGV5IHNhdyB0aGUgbW9zdCBjb25zcGljdW91cyB0ZW1wbGVzLCBub3QgYWRvcm5lZCB3aXRoIEdyZWVrIHNwb2lscywgbm9yIHBvc3Nlc3NlZCBvZiBqb3lsZXNzIG1lbW9yaWFscyBpbiB0aGUgc2hhcGUgb2Ygdm90aXZlIG9mZmVyaW5ncyBmcm9tIHRoZSBzbGF1Z2h0ZXIgb2Yga2luc21lbiBhbmQgZmVsbG93IGNpdGl6ZW5zLCBidXQgZGVja2VkIHdpdGggYmFyYmFyaWFuIHNwb2lscyB3aGljaCBzZXQgZm9ydGggaW4gZmFpcmVzdCBpbnNjcmlwdGlvbnMgdGhlIGp1c3RpY2UgYXMgd2VsbCBhcyB0aGUgdmFsb3VyIG9mIHRoZSB2aWN0b3JzLCBkZWNsYXJpbmcgdGhhdCBDb3JpbnRoaWFucyBhbmQgVGltb2xlb24gdGhlaXIgZ2VuZXJhbCBzZXQgdGhlIEdyZWVrcyBkd2VsbGluZyBpbiBTaWNpbHkgZnJlZSBmcm9tIENhcnRoYWdpbmlhbnMsIGFuZCB0aHVzIGRlZGljYXRlZCB0aGFuay1vZmZlcmluZ3MgdG8gdGhlIGdvZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndoZW4gaW4gaGVyIGFsb25lIG9mIEdyZWVrIGNpdGllcyB0aGV5IHNhdyB0aGUgbW9zdCBjb25zcGljdW91cyB0ZW1wbGVzLCBub3QgYWRvcm5lZCB3aXRoIEdyZWVrIHNwb2lscywgbm9yIHBvc3Nlc3NlZCBvZiBqb3lsZXNzIG1lbW9yaWFscyBpbiB0aGUgc2hhcGUgb2Ygdm90aXZlIG9mZmVyaW5ncyBmcm9tIHRoZSBzbGF1Z2h0ZXIgb2Yga2luc21lbiBhbmQgZmVsbG93IGNpdGl6ZW5zLCBidXQgZGVja2VkIHdpdGggYmFyYmFyaWFuIHNwb2lscyB3aGljaCBzZXQgZm9ydGggaW4gZmFpcmVzdCBpbnNjcmlwdGlvbnMgdGhlIGp1c3RpY2UgYXMgd2VsbCBhcyB0aGUgdmFsb3VyIG9mIHRoZSB2aWN0b3JzLCBkZWNsYXJpbmcgdGhhdCBDb3JpbnRoaWFucyBhbmQgVGltb2xlb24gdGhlaXIgZ2VuZXJhbCBzZXQgdGhlIEdyZWVrcyBkd2VsbGluZyBpbiBTaWNpbHkgZnJlZSBmcm9tIENhcnRoYWdpbmlhbnMsIGFuZCB0aHVzIGRlZGljYXRlZCB0aGFuay1vZmZlcmluZ3MgdG8gdGhlIGdvZHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIGhlIGxlZnQgaGlzIG1lcmNlbmFyaWVzIGluIHRoZSBlbmVteSdzIHRlcnJpdG9yeSBwbHVuZGVyaW5nIHRoZSBkb21pbmlvbiBvZiB0aGUgQ2FydGhhZ2luaWFucywgYW5kIHdlbnQgaGltc2VsZiB0byBTeXJhY3VzZTsgdGhlcmUgaGUgb3JkZXJlZCBvdXQgb2YgU2ljaWx5IHRoZSB0aG91c2FuZCBtZXJjZW5hcmllcyBieSB3aG9tIGhlIGhhZCBiZWVuIGRlc2VydGVkIGJlZm9yZSB0aGUgYmF0dGxlLCBhbmQgY29tcGVsbGVkIHRoZW0gdG8gZGVwYXJ0IGZyb20gU3lyYWN1c2UgYmVmb3JlIHRoZSBzdW4gd2VudCBkb3duLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSwgdGhlbiwgYWZ0ZXIgY3Jvc3NpbmcgaW50byBJdGFseSwgd2VyZSBwZXJmaWRpb3VzbHkgc2xhaW4gYnkgdGhlIEJydXR0aWFucywgdGh1cyByZWNlaXZpbmcgZnJvbSB0aGUgZGl2aW5lIHBvd2VyIGEgcGVuYWx0eSBmb3IgdGhlaXIgdHJlYWNoZXJ5LiBNYW1lcmN1cywgaG93ZXZlciwgdGhlIHR5cmFudCBvZiBDYXRhbmEsIGFuZCBIaWNldGFzLCB3aGV0aGVyIHRocm91Z2ggZW52eSBvZiB0aGUgc3VjY2Vzc2VzIHdvbiBieSBUaW1vbGVvbiwgb3IgYmVjYXVzZSB0aGV5IGZlYXJlZCBoaW0gYXMgb25lIHdobyBkaXN0cnVzdGVkIHR5cmFudHMgYW5kIHdvdWxkIG1ha2Ugbm8gcGVhY2Ugd2l0aCB0aGVtLCBmb3JtZWQgYW4gYWxsaWFuY2Ugd2l0aCB0aGUgQ2FydGhhZ2luaWFucyBhbmQgdXJnZWQgdGhlbSB0byBzZW5kIGEgZ2VuZXJhbCB3aXRoIGFuIGFybXkgaWYgdGhleSBkaWQgbm90IHdpc2ggdG8gYmUgY2FzdCBvdXQgb2YgU2ljaWx5IGFsdG9nZXRoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBHaXNjbyBzZXQgc2FpbDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBzcHJpbmcgb2YgMzM4IEIuQy48L25vdGU+IHdpdGggYSBmbGVldCBvZiBzZXZlbnR5IHNoaXBzLCBhbmQgYWRkZWQgR3JlZWsgbWVyY2VuYXJpZXMgdG8gaGlzIGZvcmNlcywgYWx0aG91Z2ggdGhlIENhcnRoYWdpbmlhbnMgaGFkIG5ldmVyIGJlZm9yZSBlbXBsb3llZCBHcmVlayBzb2xkaWVyczsgdGhleSBkaWQgc28gYXQgdGhpcyB0aW1lLCBob3dldmVyLCBiZWNhdXNlIHRoZXkgaGFkIGNvbWUgdG8gYWRtaXJlIHRoZW0gYXMgdGhlIGJlc3QgYW5kIG1vc3QgaXJyZXNpc3RpYmxlIGZpZ2h0ZXJzIGluIHRoZSB3b3JsZC4gQWZ0ZXIgdGhleSBoYWQgYWxsIHVuaXRlZCB0aGVpciBmb3JjZXMgaW4gdGhlIHRlcnJpdG9yeSBvZiBNZXNzYW5hLCB0aGV5IHNsZXcgZm91ciBodW5kcmVkIG9mIFRpbW9sZW9uJ3MgbWVyY2VuYXJpZXMgd2hvIGhhZCBiZWVuIHNlbnQgdGhpdGhlciBhcyBhdXhpbGlhcmllcywgYW5kIGluIHRoYXQgcGFydCBvZiB0aGUgaXNsYW5kIGJlbG9uZ2luZyB0byB0aGUgQ2FydGhhZ2luaWFucywgbmVhciB0aGUgcGxhY2UgY2FsbGVkIElldGFlLCB0aGV5IHNldCBhbiBhbWJ1c2ggZm9yIHRoZSBtZXJjZW5hcmllcyB1bmRlciBFdXRoeW11cyB0aGUgTGV1Y2FkaWFuIGFuZCBjdXQgdGhlbSB0byBwaWVjZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlcmVpbiBldmVuIG1vc3Qgb2YgYWxsIGRpZCB0aGUgZ29vZCBmb3J0dW5lIG9mIFRpbW9sZW9uIGJlY29tZSBmYW1vdXMuIEZvciB0aGVzZSB3ZXJlIHNvbWUgb2YgdGhlIG1lbiB3aG8sIHdpdGggUGhpbG9tZWx1cyB0aGUgUGhvY2lhbiBhbmQgT25vbWFyY2h1cywgaGFkIHNlaXplZCBEZWxwaGkgYW5kIHNoYXJlZCBpbiB0aGVpciBzcG9saWF0aW9uIG9mIHRoZSBzYW5jdHVhcnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhpcyB3YXMgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc2Vjb25kIHNvLWNhbGxlZCBTYWNyZWQgV2FyLCAzNTYgQi5DLjwvbm90ZT4gIFRoZW4sIHNpbmNlIGFsbCBtYW5raW5kIGhhdGVkIHRoZW0gYW5kIHNodW5uZWQgdGhlbSBhcyBtZW4gd2hvIGhhZCBwdXQgdGhlbXNlbHZlcyB1bmRlciBhIGN1cnNlLCB0aGV5IHdhbmRlcmVkIGFib3V0IFBlbG9wb25uZXN1cywgd2hlcmUgdGhleSB3ZXJlIGVubGlzdGVkIGluIGhpcyBzZXJ2aWNlIGJ5IFRpbW9sZW9uLCBpbiB0aGUgZGVhcnRoIG9mIG90aGVyIHNvbGRpZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWZ0ZXIgY29taW5nIGludG8gU2ljaWx5LCB0aGV5IHdlcmUgdmljdG9yaW91cyBpbiBhbGwgdGhlIGJhdHRsZXMgd2hpY2ggdGhleSBmb3VnaHQgdW5kZXIgaGlzIGxlYWRlcnNoaXAsIGJ1dCB3aGVuIHRoZSBtb3N0IGFuZCBncmVhdGVzdCBvZiBoaXMgc3RydWdnbGVzIHdlcmUgb3ZlciwgdGhleSB3ZXJlIHNlbnQgb3V0IGJ5IGhpbSB0byB0aGUgYXNzaXN0YW5jZSBvZiBvdGhlcnMsIGFuZCB0aGVuIHBlcmlzaGVkIHV0dGVybHksIG5vdCBhbGwgYXQgb25lIHRpbWUsIGJ1dCBsaXR0bGUgYnkgbGl0dGxlLiBBbmQgSnVzdGljZSB0aHVzIHB1bmlzaGVkIHRoZW0sIHdoaWxlIGF0IHRoZSBzYW1lIHRpbWUgc2hlIHN1c3RhaW5lZCB0aGUgZ29vZCBmb3J0dW5lIG9mIFRpbW9sZW9uLCBpbiBvcmRlciB0aGF0IG5vIGhhcm0gbWlnaHQgY29tZSB0byB0aGUgZ29vZCBmcm9tIHRoZSBjaGFzdGlzZW1lbnQgb2YgdGhlIHdpY2tlZC4gU28sIHRoZW4sIHRoZSBnb29kIHdpbGwgb2YgdGhlIGdvZHMgdG93YXJkcyBUaW1vbGVvbiB3YXMgbm8gbGVzcyB0byBiZSBhZG1pcmVkIGluIGhpcyByZXZlcnNlcyB0aGFuIGluIGhpcyBzdWNjZXNzZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgbGVmdCBoaXMgbWVyY2VuYXJpZXMgaW4gdGhlIGVuZW15J3MgdGVycml0b3J5IHBsdW5kZXJpbmcgdGhlIGRvbWluaW9uIG9mIHRoZSBDYXJ0aGFnaW5pYW5zLCBhbmQgd2VudCBoaW1zZWxmIHRvIFN5cmFjdXNlOyB0aGVyZSBoZSBvcmRlcmVkIG91dCBvZiBTaWNpbHkgdGhlIHRob3VzYW5kIG1lcmNlbmFyaWVzIGJ5IHdob20gaGUgaGFkIGJlZW4gZGVzZXJ0ZWQgYmVmb3JlIHRoZSBiYXR0bGUsIGFuZCBjb21wZWxsZWQgdGhlbSB0byBkZXBhcnQgZnJvbSBTeXJhY3VzZSBiZWZvcmUgdGhlIHN1biB3ZW50IGRvd24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlLCB0aGVuLCBhZnRlciBjcm9zc2luZyBpbnRvIEl0YWx5LCB3ZXJlIHBlcmZpZGlvdXNseSBzbGFpbiBieSB0aGUgQnJ1dHRpYW5zLCB0aHVzIHJlY2VpdmluZyBmcm9tIHRoZSBkaXZpbmUgcG93ZXIgYSBwZW5hbHR5IGZvciB0aGVpciB0cmVhY2hlcnkuIE1hbWVyY3VzLCBob3dldmVyLCB0aGUgdHlyYW50IG9mIENhdGFuYSwgYW5kIEhpY2V0YXMsIHdoZXRoZXIgdGhyb3VnaCBlbnZ5IG9mIHRoZSBzdWNjZXNzZXMgd29uIGJ5IFRpbW9sZW9uLCBvciBiZWNhdXNlIHRoZXkgZmVhcmVkIGhpbSBhcyBvbmUgd2hvIGRpc3RydXN0ZWQgdHlyYW50cyBhbmQgd291bGQgbWFrZSBubyBwZWFjZSB3aXRoIHRoZW0sIGZvcm1lZCBhbiBhbGxpYW5jZSB3aXRoIHRoZSBDYXJ0aGFnaW5pYW5zIGFuZCB1cmdlZCB0aGVtIHRvIHNlbmQgYSBnZW5lcmFsIHdpdGggYW4gYXJteSBpZiB0aGV5IGRpZCBub3Qgd2lzaCB0byBiZSBjYXN0IG91dCBvZiBTaWNpbHkgYWx0b2dldGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBHaXNjbyBzZXQgc2FpbDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNwcmluZyBvZiAzMzggQi5DLjwvbm90ZT4gd2l0aCBhIGZsZWV0IG9mIHNldmVudHkgc2hpcHMsIGFuZCBhZGRlZCBHcmVlayBtZXJjZW5hcmllcyB0byBoaXMgZm9yY2VzLCBhbHRob3VnaCB0aGUgQ2FydGhhZ2luaWFucyBoYWQgbmV2ZXIgYmVmb3JlIGVtcGxveWVkIEdyZWVrIHNvbGRpZXJzOyB0aGV5IGRpZCBzbyBhdCB0aGlzIHRpbWUsIGhvd2V2ZXIsIGJlY2F1c2UgdGhleSBoYWQgY29tZSB0byBhZG1pcmUgdGhlbSBhcyB0aGUgYmVzdCBhbmQgbW9zdCBpcnJlc2lzdGlibGUgZmlnaHRlcnMgaW4gdGhlIHdvcmxkLiBBZnRlciB0aGV5IGhhZCBhbGwgdW5pdGVkIHRoZWlyIGZvcmNlcyBpbiB0aGUgdGVycml0b3J5IG9mIE1lc3NhbmEsIHRoZXkgc2xldyBmb3VyIGh1bmRyZWQgb2YgVGltb2xlb24ncyBtZXJjZW5hcmllcyB3aG8gaGFkIGJlZW4gc2VudCB0aGl0aGVyIGFzIGF1eGlsaWFyaWVzLCBhbmQgaW4gdGhhdCBwYXJ0IG9mIHRoZSBpc2xhbmQgYmVsb25naW5nIHRvIHRoZSBDYXJ0aGFnaW5pYW5zLCBuZWFyIHRoZSBwbGFjZSBjYWxsZWQgSWV0YWUsIHRoZXkgc2V0IGFuIGFtYnVzaCBmb3IgdGhlIG1lcmNlbmFyaWVzIHVuZGVyIEV1dGh5bXVzIHRoZSBMZXVjYWRpYW4gYW5kIGN1dCB0aGVtIHRvIHBpZWNlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlcmVpbiBldmVuIG1vc3Qgb2YgYWxsIGRpZCB0aGUgZ29vZCBmb3J0dW5lIG9mIFRpbW9sZW9uIGJlY29tZSBmYW1vdXMuIEZvciB0aGVzZSB3ZXJlIHNvbWUgb2YgdGhlIG1lbiB3aG8sIHdpdGggUGhpbG9tZWx1cyB0aGUgUGhvY2lhbiBhbmQgT25vbWFyY2h1cywgaGFkIHNlaXplZCBEZWxwaGkgYW5kIHNoYXJlZCBpbiB0aGVpciBzcG9saWF0aW9uIG9mIHRoZSBzYW5jdHVhcnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGlzIHdhcyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZWNvbmQgc28tY2FsbGVkIFNhY3JlZCBXYXIsIDM1NiBCLkMuPC9ub3RlPiAgVGhlbiwgc2luY2UgYWxsIG1hbmtpbmQgaGF0ZWQgdGhlbSBhbmQgc2h1bm5lZCB0aGVtIGFzIG1lbiB3aG8gaGFkIHB1dCB0aGVtc2VsdmVzIHVuZGVyIGEgY3Vyc2UsIHRoZXkgd2FuZGVyZWQgYWJvdXQgUGVsb3Bvbm5lc3VzLCB3aGVyZSB0aGV5IHdlcmUgZW5saXN0ZWQgaW4gaGlzIHNlcnZpY2UgYnkgVGltb2xlb24sIGluIHRoZSBkZWFydGggb2Ygb3RoZXIgc29sZGllcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciBjb21pbmcgaW50byBTaWNpbHksIHRoZXkgd2VyZSB2aWN0b3Jpb3VzIGluIGFsbCB0aGUgYmF0dGxlcyB3aGljaCB0aGV5IGZvdWdodCB1bmRlciBoaXMgbGVhZGVyc2hpcCwgYnV0IHdoZW4gdGhlIG1vc3QgYW5kIGdyZWF0ZXN0IG9mIGhpcyBzdHJ1Z2dsZXMgd2VyZSBvdmVyLCB0aGV5IHdlcmUgc2VudCBvdXQgYnkgaGltIHRvIHRoZSBhc3Npc3RhbmNlIG9mIG90aGVycywgYW5kIHRoZW4gcGVyaXNoZWQgdXR0ZXJseSwgbm90IGFsbCBhdCBvbmUgdGltZSwgYnV0IGxpdHRsZSBieSBsaXR0bGUuIEFuZCBKdXN0aWNlIHRodXMgcHVuaXNoZWQgdGhlbSwgd2hpbGUgYXQgdGhlIHNhbWUgdGltZSBzaGUgc3VzdGFpbmVkIHRoZSBnb29kIGZvcnR1bmUgb2YgVGltb2xlb24sIGluIG9yZGVyIHRoYXQgbm8gaGFybSBtaWdodCBjb21lIHRvIHRoZSBnb29kIGZyb20gdGhlIGNoYXN0aXNlbWVudCBvZiB0aGUgd2lja2VkLiBTbywgdGhlbiwgdGhlIGdvb2Qgd2lsbCBvZiB0aGUgZ29kcyB0b3dhcmRzIFRpbW9sZW9uIHdhcyBubyBsZXNzIHRvIGJlIGFkbWlyZWQgaW4gaGlzIHJldmVyc2VzIHRoYW4gaW4gaGlzIHN1Y2Nlc3Nlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBwZW9wbGUgb2YgU3lyYWN1c2Ugd2VyZSB2ZXhlZCBhdCB0aGUgaW5zdWx0cyBoZWFwZWQgdXBvbiB0aGVtIGJ5IHRoZSB0eXJhbnRzLiBGb3IgTWFtZXJjdXMsIHdobyB2YWx1ZWQgaGltc2VsZiBoaWdobHkgYXMgYSB3cml0ZXIgb2YgcG9lbXMgYW5kIHRyYWdlZGllcywgYm9hc3RlZCBvZiBoaXMgdmljdG9yeSBvdmVyIHRoZSBtZXJjZW5hcmllcywgYW5kIGluIGRlZGljYXRpbmcgdGhlaXIgc2hpZWxkcyB0byB0aGUgZ29kcyB3cm90ZSB0aGUgZm9sbG93aW5nIGluc29sZW50IGNvdXBsZXQ64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPlRoZXNlIGJ1Y2tsZXJzLCBwdXJwbGUtcGFpbnRlZCwgZGVja2VkIHdpdGggaXZvcnksIGdvbGQsIGFuZCBhbWJlciw8L2w+CgkJCQkJICAgICAgICAgIDxsPldlIGNhcHR1cmVkIHdpdGggb3VyIHNpbXBsZSBsaXR0bGUgc2hpZWxkcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUFuZCBhZnRlciB0aGlzLCB3aGVuIFRpbW9sZW9uIHdhcyBvbiBhbiBleHBlZGl0aW9uIHRvIENhbGF1cmlhLCBIaWNldGFzIGJ1cnN0IGludG8gdGhlIHRlcnJpdG9yeSBvZiBTeXJhY3VzZSwgdG9vayBtdWNoIGJvb3R5LCB3cm91Z2h0IG11Y2ggd2FudG9uIGhhdm9jLCBhbmQgd2FzIG1hcmNoaW5nIG9mZiBwYXN0IENhbGF1cmlhIGl0c2VsZiwgZGVzcGlzaW5nIFRpbW9sZW9uLCB3aG8gaGFkIGJ1dCBmZXcgc29sZGllcnMuIEJ1dCBUaW1vbGVvbiBzdWZmZXJlZCBoaW0gdG8gcGFzcyBvbiwgYW5kIHRoZW4gcHVyc3VlZCBoaW0gd2l0aCBjYXZhbHJ5IGFuZCBsaWdodC1hcm1lZCB0cm9vcHMuIFdoZW4gSGljZXRhcyB3YXMgYXdhcmUgb2YgdGhpcywgaGUgY3Jvc3NlZCB0aGUgcml2ZXIgRGFtdXJpYXMsIGFuZCBoYWx0ZWQgb24gdGhlIGZhcnRoZXIgYmFuayB0byBkZWZlbmQgaGltc2VsZjsgZm9yIHRoZSBkaWZmaWN1bHR5IG9mIHRoZSBwYXNzYWdlLCBhbmQgdGhlIHN0ZWVwbmVzcyBvZiB0aGUgYmFua3Mgb24gZWl0aGVyIHNpZGUsIGdhdmUgaGltIGNvdXJhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYW1vbmcgVGltb2xlb24ncyBjYXZhbHJ5IG9mZmljZXJzIGFuIGFzdG9uaXNoaW5nIHN0cmlmZSBhbmQgY29udGVudGlvbiBhcm9zZSB3aGljaCBkZWxheWVkIHRoZSBiYXR0bGUuIEZvciBub3Qgb25lIG9mIHRoZW0gd2FzIHdpbGxpbmcgdG8gY3Jvc3MgdGhlIHJpdmVyIGFnYWluc3QgdGhlIGVuZW15IGFmdGVyIGFub3RoZXIsIGJ1dCBlYWNoIGRlbWFuZGVkIHRvIGJlZ2luIHRoZSBvbnNldCBoaW1zZWxmLCBhbmQgdGhlaXIgY3Jvc3Npbmcgd2FzIGxpa2VseSB0byBiZSB3aXRob3V0IG9yZGVyIGlmIHRoZXkgY3Jvd2RlZCBhbmQgdHJpZWQgdG8gcnVuIHBhc3Qgb25lIGFub3RoZXIuIFRpbW9sZW9uLCB0aGVyZWZvcmUsIHdpc2hpbmcgdG8gZGVjaWRlIHRoZWlyIG9yZGVyIGJ5IGxvdCwgdG9vayBhIHNlYWwtcmluZyBmcm9tIGVhY2ggb2YgdGhlIGxlYWRlcnMsIGFuZCBhZnRlciBjYXN0aW5nIGFsbCB0aGUgcmluZ3MgaW50byBoaXMgb3duIGNsb2FrIGFuZCBtaXhpbmcgdGhlbSB1cCwgaGUgc2hvd2VkIHRoZSBmaXJzdCB0aGF0IGNhbWUgb3V0LCBhbmQgaXQgaGFkIGJ5IGNoYW5jZSBhcyB0aGUgZGV2aWNlIG9mIGl0cyBzZWFsIGEgdHJvcGh5IG9mIHZpY3RvcnkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHlvdW5nIG1lbiBzYXcgaXQsIHRoZXkgY3JpZWQgYWxvdWQgZm9yIGpveSBhbmQgd291bGQgbm8gbG9uZ2VyIHdhaXQgZm9yIHRoZSByZXN0IG9mIHRoZSBsb3QsIGJ1dCBhbGwgZGFzaGVkIHRocm91Z2ggdGhlIHJpdmVyIGFzIGZhc3QgYXMgdGhleSBjb3VsZCBhbmQgY2xvc2VkIHdpdGggdGhlIGVuZW15LiBUaGVzZSBjb3VsZCBub3Qgd2l0aHN0YW5kIHRoZSB2aW9sZW5jZSBvZiB0aGVpciBvbnNldCwgYnV0IGZsZWQsIGFsbCBhbGlrZSBsb3NpbmcgdGhlaXIgYXJtcywgYW5kIGEgdGhvdXNhbmQgYmVpbmcgbGVmdCBkZWFkIG9uIHRoZSBmaWVsZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBwZW9wbGUgb2YgU3lyYWN1c2Ugd2VyZSB2ZXhlZCBhdCB0aGUgaW5zdWx0cyBoZWFwZWQgdXBvbiB0aGVtIGJ5IHRoZSB0eXJhbnRzLiBGb3IgTWFtZXJjdXMsIHdobyB2YWx1ZWQgaGltc2VsZiBoaWdobHkgYXMgYSB3cml0ZXIgb2YgcG9lbXMgYW5kIHRyYWdlZGllcywgYm9hc3RlZCBvZiBoaXMgdmljdG9yeSBvdmVyIHRoZSBtZXJjZW5hcmllcywgYW5kIGluIGRlZGljYXRpbmcgdGhlaXIgc2hpZWxkcyB0byB0aGUgZ29kcyB3cm90ZSB0aGUgZm9sbG93aW5nIGluc29sZW50IGNvdXBsZXQ64oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVzZSBidWNrbGVycywgcHVycGxlLXBhaW50ZWQsIGRlY2tlZCB3aXRoIGl2b3J5LCBnb2xkLCBhbmQgYW1iZXIsPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPldlIGNhcHR1cmVkIHdpdGggb3VyIHNpbXBsZSBsaXR0bGUgc2hpZWxkcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlc2UgYnVja2xlcnMsIHB1cnBsZS1wYWludGVkLCBkZWNrZWQgd2l0aCBpdm9yeSwgZ29sZCwgYW5kIGFtYmVyLDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5XZSBjYXB0dXJlZCB3aXRoIG91ciBzaW1wbGUgbGl0dGxlIHNoaWVsZHMuPC9sPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQW5kIGFmdGVyIHRoaXMsIHdoZW4gVGltb2xlb24gd2FzIG9uIGFuIGV4cGVkaXRpb24gdG8gQ2FsYXVyaWEsIEhpY2V0YXMgYnVyc3QgaW50byB0aGUgdGVycml0b3J5IG9mIFN5cmFjdXNlLCB0b29rIG11Y2ggYm9vdHksIHdyb3VnaHQgbXVjaCB3YW50b24gaGF2b2MsIGFuZCB3YXMgbWFyY2hpbmcgb2ZmIHBhc3QgQ2FsYXVyaWEgaXRzZWxmLCBkZXNwaXNpbmcgVGltb2xlb24sIHdobyBoYWQgYnV0IGZldyBzb2xkaWVycy4gQnV0IFRpbW9sZW9uIHN1ZmZlcmVkIGhpbSB0byBwYXNzIG9uLCBhbmQgdGhlbiBwdXJzdWVkIGhpbSB3aXRoIGNhdmFscnkgYW5kIGxpZ2h0LWFybWVkIHRyb29wcy4gV2hlbiBIaWNldGFzIHdhcyBhd2FyZSBvZiB0aGlzLCBoZSBjcm9zc2VkIHRoZSByaXZlciBEYW11cmlhcywgYW5kIGhhbHRlZCBvbiB0aGUgZmFydGhlciBiYW5rIHRvIGRlZmVuZCBoaW1zZWxmOyBmb3IgdGhlIGRpZmZpY3VsdHkgb2YgdGhlIHBhc3NhZ2UsIGFuZCB0aGUgc3RlZXBuZXNzIG9mIHRoZSBiYW5rcyBvbiBlaXRoZXIgc2lkZSwgZ2F2ZSBoaW0gY291cmFnZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYW1vbmcgVGltb2xlb24ncyBjYXZhbHJ5IG9mZmljZXJzIGFuIGFzdG9uaXNoaW5nIHN0cmlmZSBhbmQgY29udGVudGlvbiBhcm9zZSB3aGljaCBkZWxheWVkIHRoZSBiYXR0bGUuIEZvciBub3Qgb25lIG9mIHRoZW0gd2FzIHdpbGxpbmcgdG8gY3Jvc3MgdGhlIHJpdmVyIGFnYWluc3QgdGhlIGVuZW15IGFmdGVyIGFub3RoZXIsIGJ1dCBlYWNoIGRlbWFuZGVkIHRvIGJlZ2luIHRoZSBvbnNldCBoaW1zZWxmLCBhbmQgdGhlaXIgY3Jvc3Npbmcgd2FzIGxpa2VseSB0byBiZSB3aXRob3V0IG9yZGVyIGlmIHRoZXkgY3Jvd2RlZCBhbmQgdHJpZWQgdG8gcnVuIHBhc3Qgb25lIGFub3RoZXIuIFRpbW9sZW9uLCB0aGVyZWZvcmUsIHdpc2hpbmcgdG8gZGVjaWRlIHRoZWlyIG9yZGVyIGJ5IGxvdCwgdG9vayBhIHNlYWwtcmluZyBmcm9tIGVhY2ggb2YgdGhlIGxlYWRlcnMsIGFuZCBhZnRlciBjYXN0aW5nIGFsbCB0aGUgcmluZ3MgaW50byBoaXMgb3duIGNsb2FrIGFuZCBtaXhpbmcgdGhlbSB1cCwgaGUgc2hvd2VkIHRoZSBmaXJzdCB0aGF0IGNhbWUgb3V0LCBhbmQgaXQgaGFkIGJ5IGNoYW5jZSBhcyB0aGUgZGV2aWNlIG9mIGl0cyBzZWFsIGEgdHJvcGh5IG9mIHZpY3RvcnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHlvdW5nIG1lbiBzYXcgaXQsIHRoZXkgY3JpZWQgYWxvdWQgZm9yIGpveSBhbmQgd291bGQgbm8gbG9uZ2VyIHdhaXQgZm9yIHRoZSByZXN0IG9mIHRoZSBsb3QsIGJ1dCBhbGwgZGFzaGVkIHRocm91Z2ggdGhlIHJpdmVyIGFzIGZhc3QgYXMgdGhleSBjb3VsZCBhbmQgY2xvc2VkIHdpdGggdGhlIGVuZW15LiBUaGVzZSBjb3VsZCBub3Qgd2l0aHN0YW5kIHRoZSB2aW9sZW5jZSBvZiB0aGVpciBvbnNldCwgYnV0IGZsZWQsIGFsbCBhbGlrZSBsb3NpbmcgdGhlaXIgYXJtcywgYW5kIGEgdGhvdXNhbmQgYmVpbmcgbGVmdCBkZWFkIG9uIHRoZSBmaWVsZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IGxvbmcgYWZ0ZXJ3YXJkcyBUaW1vbGVvbiBtYWRlIGFuIGV4cGVkaXRpb24gaW50byB0aGUgdGVycml0b3J5IG9mIExlb250aW5pIGFuZCBjYXB0dXJlZCBIaWNldGFzIGFsaXZlLCB0b2dldGhlciB3aXRoIGhpcyBzb24gRXVwb2xlbXVzIGFuZCBoaXMgbWFzdGVyIG9mIGhvcnNlIEV1dGh5bXVzLCB3aG8gd2VyZSBib3VuZCBhbmQgYnJvdWdodCB0byBUaW1vbGVvbiBieSBoaXMgc29sZGllcnMuIEhpY2V0YXMsIHRoZW4sIGFuZCBoaXMgeW91bmcgc29uLCB3ZXJlIHB1bmlzaGVkIGFzIHR5cmFudHMgYW5kIHRyYWl0b3JzIGFuZCBwdXQgdG8gZGVhdGgsIGFuZCBFdXRoeW11cywgdGhvdWdoIGEgYnJhdmUgbWFuIGluIGFjdGlvbiBhbmQgb2Ygc3VycGFzc2luZyBib2xkbmVzcywgZm91bmQgbm8gcGl0eSBiZWNhdXNlIG9mIGEgY2VydGFpbiBpbnN1bHQgdG8gdGhlIENvcmludGhpYW5zIHdoaWNoIHdhcyBhbGxlZ2VkIGFnYWluc3QgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzYWlkLCBuYW1lbHksIHRoYXQgd2hlbiB0aGUgQ29yaW50aGlhbnMgaGFkIHRha2VuIHRoZSBmaWVsZCBhZ2FpbnN0IHRoZW0sIEV1dGh5bXVzIHRvbGQgdGhlIG1lbiBvZiBMZW9udGluaSBpbiBhIHB1YmxpYyBoYXJhbmd1ZSB0aGF0IGl0IHdhcyBub3RoaW5nIGZlYXJmdWwgb3IgZHJlYWRmdWwgaWYKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+Q29yaW50aGlhbiB3b21lbiBjYW1lIGZvcnRoIGZyb20gdGhlaXIgaG9tZXMuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBhZGFwdGF0aW9uIG9mIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIE1lZC4gMjE1IiB2YWxpZD0ieWVzIj5FdXJpcGlkZXMsIDx0aXRsZT5NZWRlaWE8L3RpdGxlPiwgMjE1PC9iaWJsPiAoS2lyY2hob2ZmKSwgd2hlcmUgTWVkZWEgc3BlYWtzIHRvIHRoZSBjaG9ydXMgaW4gdGhlIGZpcnN0IHBlcnNvbi48L25vdGU+CgkJCQlTbyBuYXR1cmFsIGlzIGl0IGZvciBtb3N0IG1lbiB0byBiZSBtb3JlIGdhbGxlZCBieSBiaXR0ZXIgd29yZHMgdGhhbiBob3N0aWxlIGFjdHM7IHNpbmNlIGluc29sZW5jZSBpcyBoYXJkZXIgZm9yIHRoZW0gdG8gYmVhciB0aGFuIGluanVyeS4gQmVzaWRlcywgZGVmZW5zaXZlIGFjdHMgYXJlIHRvbGVyYXRlZCBpbiBhbiBlbmVteSBhcyBhIG5lY2Vzc2FyeSByaWdodCwgYnV0IGluc3VsdHMgYXJlIHRob3VnaHQgdG8gc3ByaW5nIGZyb20gYW4gZXhjZXNzIG9mIGhhdHJlZCBvciBiYXNlbmVzcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IGxvbmcgYWZ0ZXJ3YXJkcyBUaW1vbGVvbiBtYWRlIGFuIGV4cGVkaXRpb24gaW50byB0aGUgdGVycml0b3J5IG9mIExlb250aW5pIGFuZCBjYXB0dXJlZCBIaWNldGFzIGFsaXZlLCB0b2dldGhlciB3aXRoIGhpcyBzb24gRXVwb2xlbXVzIGFuZCBoaXMgbWFzdGVyIG9mIGhvcnNlIEV1dGh5bXVzLCB3aG8gd2VyZSBib3VuZCBhbmQgYnJvdWdodCB0byBUaW1vbGVvbiBieSBoaXMgc29sZGllcnMuIEhpY2V0YXMsIHRoZW4sIGFuZCBoaXMgeW91bmcgc29uLCB3ZXJlIHB1bmlzaGVkIGFzIHR5cmFudHMgYW5kIHRyYWl0b3JzIGFuZCBwdXQgdG8gZGVhdGgsIGFuZCBFdXRoeW11cywgdGhvdWdoIGEgYnJhdmUgbWFuIGluIGFjdGlvbiBhbmQgb2Ygc3VycGFzc2luZyBib2xkbmVzcywgZm91bmQgbm8gcGl0eSBiZWNhdXNlIG9mIGEgY2VydGFpbiBpbnN1bHQgdG8gdGhlIENvcmludGhpYW5zIHdoaWNoIHdhcyBhbGxlZ2VkIGFnYWluc3QgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIG5hbWVseSwgdGhhdCB3aGVuIHRoZSBDb3JpbnRoaWFucyBoYWQgdGFrZW4gdGhlIGZpZWxkIGFnYWluc3QgdGhlbSwgRXV0aHltdXMgdG9sZCB0aGUgbWVuIG9mIExlb250aW5pIGluIGEgcHVibGljIGhhcmFuZ3VlIHRoYXQgaXQgd2FzIG5vdGhpbmcgZmVhcmZ1bCBvciBkcmVhZGZ1bCBpZgoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29yaW50aGlhbiB3b21lbiBjYW1lIGZvcnRoIGZyb20gdGhlaXIgaG9tZXMuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkNvcmludGhpYW4gd29tZW4gY2FtZSBmb3J0aCBmcm9tIHRoZWlyIGhvbWVzLjwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBhZGFwdGF0aW9uIG9mIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkV1ci4gTWVkLiAyMTUiIHZhbGlkPSJ5ZXMiPkV1cmlwaWRlcywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVkZWlhPC90aXRsZT4sIDIxNTwvYmlibD4gKEtpcmNoaG9mZiksIHdoZXJlIE1lZGVhIHNwZWFrcyB0byB0aGUgY2hvcnVzIGluIHRoZSBmaXJzdCBwZXJzb24uPC9ub3RlPgoJCQkJU28gbmF0dXJhbCBpcyBpdCBmb3IgbW9zdCBtZW4gdG8gYmUgbW9yZSBnYWxsZWQgYnkgYml0dGVyIHdvcmRzIHRoYW4gaG9zdGlsZSBhY3RzOyBzaW5jZSBpbnNvbGVuY2UgaXMgaGFyZGVyIGZvciB0aGVtIHRvIGJlYXIgdGhhbiBpbmp1cnkuIEJlc2lkZXMsIGRlZmVuc2l2ZSBhY3RzIGFyZSB0b2xlcmF0ZWQgaW4gYW4gZW5lbXkgYXMgYSBuZWNlc3NhcnkgcmlnaHQsIGJ1dCBpbnN1bHRzIGFyZSB0aG91Z2h0IHRvIHNwcmluZyBmcm9tIGFuIGV4Y2VzcyBvZiBoYXRyZWQgb3IgYmFzZW5lc3MuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkV1ci4gTWVkLiAyMTUiIHZhbGlkPSJ5ZXMiPkV1cmlwaWRlcywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVkZWlhPC90aXRsZT4sIDIxNTwvYmlibD4gKEtpcmNoaG9mZiksIHdoZXJlIE1lZGVhIHNwZWFrcyB0byB0aGUgY2hvcnVzIGluIHRoZSBmaXJzdCBwZXJzb24uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVkZWlhPC90aXRsZT4sIDIxNTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIFRpbW9sZW9uIGhhZCByZXR1cm5lZCwgdGhlIFN5cmFjdXNhbnMgYnJvdWdodCB0aGUgd2l2ZXMgYW5kIGRhdWdodGVycyBvZiBIaWNldGFzIGFuZCBoaXMgZnJpZW5kcyB0byBwdWJsaWMgdHJpYWwsIGFuZCB0aGVuIHB1dCB0aGVtIHRvIGRlYXRoLiBBbmQgdGhpcyB3b3VsZCBzZWVtIHRvIGhhdmUgYmVlbiB0aGUgbW9zdCBkaXNwbGVhc2luZyB0aGluZyBpbiBUaW1vbGVvbidzIGNhcmVlcjsgZm9yIGlmIGhlIGhhZCBvcHBvc2VkIGl0LCB0aGUgd29tZW4gd291bGQgbm90IGhhdmUgYmVlbiB0aHVzIHB1dCB0byBkZWF0aC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFwcGFyZW50bHkgaGUgbmVnbGVjdGVkIHRoZW0gYW5kIGFiYW5kb25lZCB0aGVtIHRvIHRoZSB3cmF0aCBvZiB0aGUgY2l0aXplbnMsIHdobyB3ZXJlIGJlbnQgb24gdGFraW5nIHZlbmdlYW5jZSBpbiBiZWhhbGYgb2YgRGlvbiwgd2hvIGRyb3ZlIG91dCBEaW9ueXNpdXMuIEZvciBIaWNldGFzIHdhcyB0aGUgbWFuIHdobyB0b29rIEFyZXRlIHRoZSB3aWZlIG9mIERpb24sIGFuZCBBcmlzdG9tYWNoZSBoaXMgc2lzdGVyLCBhbmQgaGlzIHNvbiwgd2hvIHdhcyBzdGlsbCBhIGJveSwgYW5kIHRocmV3IHRoZW0gaW50byB0aGUgc2VhIGFsaXZlLCBjb25jZXJuaW5nIHdoaWNoIHRoaW5ncyBJIGhhdmUgd3JpdHRlbiBpbiBteSBMaWZlIG9mIERpb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEaW8gNTguNCIgdmFsaWQ9InllcyI+Q2hhcHRlciBsdmlpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgVGltb2xlb24gaGFkIHJldHVybmVkLCB0aGUgU3lyYWN1c2FucyBicm91Z2h0IHRoZSB3aXZlcyBhbmQgZGF1Z2h0ZXJzIG9mIEhpY2V0YXMgYW5kIGhpcyBmcmllbmRzIHRvIHB1YmxpYyB0cmlhbCwgYW5kIHRoZW4gcHV0IHRoZW0gdG8gZGVhdGguIEFuZCB0aGlzIHdvdWxkIHNlZW0gdG8gaGF2ZSBiZWVuIHRoZSBtb3N0IGRpc3BsZWFzaW5nIHRoaW5nIGluIFRpbW9sZW9uJ3MgY2FyZWVyOyBmb3IgaWYgaGUgaGFkIG9wcG9zZWQgaXQsIHRoZSB3b21lbiB3b3VsZCBub3QgaGF2ZSBiZWVuIHRodXMgcHV0IHRvIGRlYXRoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcHBhcmVudGx5IGhlIG5lZ2xlY3RlZCB0aGVtIGFuZCBhYmFuZG9uZWQgdGhlbSB0byB0aGUgd3JhdGggb2YgdGhlIGNpdGl6ZW5zLCB3aG8gd2VyZSBiZW50IG9uIHRha2luZyB2ZW5nZWFuY2UgaW4gYmVoYWxmIG9mIERpb24sIHdobyBkcm92ZSBvdXQgRGlvbnlzaXVzLiBGb3IgSGljZXRhcyB3YXMgdGhlIG1hbiB3aG8gdG9vayBBcmV0ZSB0aGUgd2lmZSBvZiBEaW9uLCBhbmQgQXJpc3RvbWFjaGUgaGlzIHNpc3RlciwgYW5kIGhpcyBzb24sIHdobyB3YXMgc3RpbGwgYSBib3ksIGFuZCB0aHJldyB0aGVtIGludG8gdGhlIHNlYSBhbGl2ZSwgY29uY2VybmluZyB3aGljaCB0aGluZ3MgSSBoYXZlIHdyaXR0ZW4gaW4gbXkgTGlmZSBvZiBEaW9uLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERpbyA1OC40IiB2YWxpZD0ieWVzIj5DaGFwdGVyIGx2aWlpLiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEaW8gNTguNCIgdmFsaWQ9InllcyI+Q2hhcHRlciBsdmlpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIFRpbW9sZW9uIG1hZGUgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IE1hbWVyY3VzIHRvIENhdGFuYSwgY29ucXVlcmVkIGFuZCByb3V0ZWQgaGltIGluIGEgcGl0Y2hlZCBiYXR0bGUgbmVhciB0aGUgc3RyZWFtIG9mIHRoZSBBYm9sdXMsIGFuZCBzbGV3IGFib3ZlIHR3byB0aG91c2FuZCBvZiBoaXMgc29sZGllcnMsIGEgbGFyZ2UgcGFydCBvZiB3aG9tIHdlcmUgdGhlIENhcnRoYWdpbmlhbnMgc2VudCBoaW0gYXMgYXV4aWxpYXJpZXMgYnkgR2lzY28uIFRoZXJldXBvbiB0aGUgQ2FydGhhZ2luaWFucyBtYWRlIGEgcGVhY2Ugd2l0aCBoaW0gd2hpY2ggdGhleSBzb3VnaHQgdGhlbXNlbHZlczsgdGhlIHRlcm1zIHdlcmUgdGhhdCB0aGV5IHNob3VsZCBrZWVwIHRoZSB0ZXJyaXRvcnkgd2l0aGluIHRoZSByaXZlciBMeWN1cywgcmVzdG9yaW5nIHRoZWlyIGZhbWlsaWVzIGFuZCBwcm9wZXJ0eSB0byBhbGwgd2hvIHdpc2hlZCB0byBjaGFuZ2UgdGhlaXIgaG9tZXMgZnJvbSB0aGVyZSB0byBTeXJhY3VzZSwgYW5kIHJlbm91bmNpbmcgdGhlaXIgYWxsaWFuY2Ugd2l0aCB0aGUgdHlyYW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBNYW1lcmN1cywgZGVzcGFpcmluZyBvZiBzdWNjZXNzLCB0b29rIHNoaXAgZm9yIEl0YWx5IHdpdGggdGhlIHB1cnBvc2Ugb2YgYnJpbmdpbmcgdGhlIEx1Y2FuaWFucyBhZ2FpbnN0IFRpbW9sZW9uIGFuZCBTeXJhY3VzZTsgYnV0IGhpcyBjb21wYW5pb25zIG9uIHRoZSB2b3lhZ2UgdHVybmVkIHRoZWlyIHRyaXJlbWVzIGJhY2ssIHNhaWxlZCB0byBTaWNpbHksIGFuZCBoYW5kZWQgQ2F0YW5hIG92ZXIgdG8gVGltb2xlb24sIHdoZXJldXBvbiBNYW1lcmN1cyBoaW1zZWxmIGFsc28gd2FzIGNvbXBlbGxlZCB0byBzZWVrIHJlZnVnZSBpbiBNZXNzYW5hIHdpdGggSGlwcG8gdGhlIHR5cmFudCBvZiB0aGF0IGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBUaW1vbGVvbiBjYW1lIHVwIGFnYWluc3QgdGhlbSBhbmQgYmVzaWVnZWQgdGhlbSBieSBsYW5kIGFuZCBzZWEsIGFuZCBIaXBwbyB3YXMgY2F1Z2h0IGFzIGhlIHdhcyB0cnlpbmcgdG8gc3RlYWwgYXdheSBvbiBib2FyZCBhIHNoaXAuIFRoZW4gdGhlIE1lc3NhbmlhbnMgdG9vayBoaW0gaW50byB0aGUgdGhlYXRyZSwgYnJvdWdodCB0aGVpciBjaGlsZHJlbiB0aGl0aGVyIGZyb20gdGhlaXIgc2Nob29scyB0byBiZWhvbGQsIGFzIGEgZ2xvcmlvdXMgc3BlY3RhY2xlLCB0aGUgdHlyYW50J3MgcHVuaXNobWVudCwgYW5kIHB1dCBoaW0gdG8gdG9ybWVudCBhbmQgZGVhdGguIEFzIGZvciBNYW1lcmN1cywgaGUgZ2F2ZSBoaW1zZWxmIHVwIHRvIFRpbW9sZW9uIG9uIGNvbmRpdGlvbiB0aGF0IGhlIHNob3VsZCB1bmRlcmdvIHRyaWFsIGF0IFN5cmFjdXNlLCBhbmQgdGhhdCBUaW1vbGVvbiBzaG91bGQgbm90IGRlbm91bmNlIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U28gaGUgd2FzIGJyb3VnaHQgdG8gU3lyYWN1c2UsIGFuZCB3aGVuIGhlIGNhbWUgYmVmb3JlIHRoZSBwZW9wbGUsIGF0dGVtcHRlZCB0byByZWhlYXJzZSBhIHNwZWVjaCBjb21wb3NlZCBieSBoaW0gYSBsb25nIHRpbWUgYmVmb3JlOyBidXQgYmVpbmcgcmVjZWl2ZWQgd2l0aCBub2lzZSBhbmQgY2xhbW91ciwgYW5kIHNlZWluZyB0aGF0IHRoZSBhc3NlbWJseSB3YXMgaW5leG9yYWJsZSwgaGUgZmx1bmcgYXdheSBoaXMgbWFudGxlLCByYW4gcmlnaHQgYWNyb3NzIHRoZSB0aGVhdHJlLCBhbmQgZGFzaGVkIGhlYWQgZm9yZW1vc3QgYWdhaW5zdCBvbmUgb2YgdGhlIHN0b25lIHN0ZXBzLCBob3BpbmcgdG8ga2lsbCBoaW1zZWxmLiBIb3dldmVyLCBoZSB3YXMgbm90IHNvIGZvcnR1bmF0ZSBhcyB0byBkaWUgaW4gdGhpcyB3YXksIGJ1dCB3YXMgdGFrZW4gYXdheSwgc3RpbGwgbGl2aW5nLCBhbmQgY3J1Y2lmaWVkIGxpa2UgYSByb2JiZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgVGltb2xlb24gbWFkZSBhbiBleHBlZGl0aW9uIGFnYWluc3QgTWFtZXJjdXMgdG8gQ2F0YW5hLCBjb25xdWVyZWQgYW5kIHJvdXRlZCBoaW0gaW4gYSBwaXRjaGVkIGJhdHRsZSBuZWFyIHRoZSBzdHJlYW0gb2YgdGhlIEFib2x1cywgYW5kIHNsZXcgYWJvdmUgdHdvIHRob3VzYW5kIG9mIGhpcyBzb2xkaWVycywgYSBsYXJnZSBwYXJ0IG9mIHdob20gd2VyZSB0aGUgQ2FydGhhZ2luaWFucyBzZW50IGhpbSBhcyBhdXhpbGlhcmllcyBieSBHaXNjby4gVGhlcmV1cG9uIHRoZSBDYXJ0aGFnaW5pYW5zIG1hZGUgYSBwZWFjZSB3aXRoIGhpbSB3aGljaCB0aGV5IHNvdWdodCB0aGVtc2VsdmVzOyB0aGUgdGVybXMgd2VyZSB0aGF0IHRoZXkgc2hvdWxkIGtlZXAgdGhlIHRlcnJpdG9yeSB3aXRoaW4gdGhlIHJpdmVyIEx5Y3VzLCByZXN0b3JpbmcgdGhlaXIgZmFtaWxpZXMgYW5kIHByb3BlcnR5IHRvIGFsbCB3aG8gd2lzaGVkIHRvIGNoYW5nZSB0aGVpciBob21lcyBmcm9tIHRoZXJlIHRvIFN5cmFjdXNlLCBhbmQgcmVub3VuY2luZyB0aGVpciBhbGxpYW5jZSB3aXRoIHRoZSB0eXJhbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gTWFtZXJjdXMsIGRlc3BhaXJpbmcgb2Ygc3VjY2VzcywgdG9vayBzaGlwIGZvciBJdGFseSB3aXRoIHRoZSBwdXJwb3NlIG9mIGJyaW5naW5nIHRoZSBMdWNhbmlhbnMgYWdhaW5zdCBUaW1vbGVvbiBhbmQgU3lyYWN1c2U7IGJ1dCBoaXMgY29tcGFuaW9ucyBvbiB0aGUgdm95YWdlIHR1cm5lZCB0aGVpciB0cmlyZW1lcyBiYWNrLCBzYWlsZWQgdG8gU2ljaWx5LCBhbmQgaGFuZGVkIENhdGFuYSBvdmVyIHRvIFRpbW9sZW9uLCB3aGVyZXVwb24gTWFtZXJjdXMgaGltc2VsZiBhbHNvIHdhcyBjb21wZWxsZWQgdG8gc2VlayByZWZ1Z2UgaW4gTWVzc2FuYSB3aXRoIEhpcHBvIHRoZSB0eXJhbnQgb2YgdGhhdCBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBUaW1vbGVvbiBjYW1lIHVwIGFnYWluc3QgdGhlbSBhbmQgYmVzaWVnZWQgdGhlbSBieSBsYW5kIGFuZCBzZWEsIGFuZCBIaXBwbyB3YXMgY2F1Z2h0IGFzIGhlIHdhcyB0cnlpbmcgdG8gc3RlYWwgYXdheSBvbiBib2FyZCBhIHNoaXAuIFRoZW4gdGhlIE1lc3NhbmlhbnMgdG9vayBoaW0gaW50byB0aGUgdGhlYXRyZSwgYnJvdWdodCB0aGVpciBjaGlsZHJlbiB0aGl0aGVyIGZyb20gdGhlaXIgc2Nob29scyB0byBiZWhvbGQsIGFzIGEgZ2xvcmlvdXMgc3BlY3RhY2xlLCB0aGUgdHlyYW50J3MgcHVuaXNobWVudCwgYW5kIHB1dCBoaW0gdG8gdG9ybWVudCBhbmQgZGVhdGguIEFzIGZvciBNYW1lcmN1cywgaGUgZ2F2ZSBoaW1zZWxmIHVwIHRvIFRpbW9sZW9uIG9uIGNvbmRpdGlvbiB0aGF0IGhlIHNob3VsZCB1bmRlcmdvIHRyaWFsIGF0IFN5cmFjdXNlLCBhbmQgdGhhdCBUaW1vbGVvbiBzaG91bGQgbm90IGRlbm91bmNlIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIHdhcyBicm91Z2h0IHRvIFN5cmFjdXNlLCBhbmQgd2hlbiBoZSBjYW1lIGJlZm9yZSB0aGUgcGVvcGxlLCBhdHRlbXB0ZWQgdG8gcmVoZWFyc2UgYSBzcGVlY2ggY29tcG9zZWQgYnkgaGltIGEgbG9uZyB0aW1lIGJlZm9yZTsgYnV0IGJlaW5nIHJlY2VpdmVkIHdpdGggbm9pc2UgYW5kIGNsYW1vdXIsIGFuZCBzZWVpbmcgdGhhdCB0aGUgYXNzZW1ibHkgd2FzIGluZXhvcmFibGUsIGhlIGZsdW5nIGF3YXkgaGlzIG1hbnRsZSwgcmFuIHJpZ2h0IGFjcm9zcyB0aGUgdGhlYXRyZSwgYW5kIGRhc2hlZCBoZWFkIGZvcmVtb3N0IGFnYWluc3Qgb25lIG9mIHRoZSBzdG9uZSBzdGVwcywgaG9waW5nIHRvIGtpbGwgaGltc2VsZi4gSG93ZXZlciwgaGUgd2FzIG5vdCBzbyBmb3J0dW5hdGUgYXMgdG8gZGllIGluIHRoaXMgd2F5LCBidXQgd2FzIHRha2VuIGF3YXksIHN0aWxsIGxpdmluZywgYW5kIGNydWNpZmllZCBsaWtlIGEgcm9iYmVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIG1hbm5lciwgdGhlbiwgZGlkIFRpbW9sZW9uIGV4dGlycGF0ZSB0aGUgdHlyYW5uaWVzIGFuZCBwdXQgYSBzdG9wIHRvIHRoZWlyIHdhcnMuIEhlIGZvdW5kIHRoZSB3aG9sZSBpc2xhbmQgcmVkdWNlZCB0byBhIHNhdmFnZSBzdGF0ZSBieSBpdHMgdHJvdWJsZXMgYW5kIGhhdGVkIGJ5IGl0cyBpbmhhYml0YW50cywgYnV0IGhlIG1hZGUgaXQgc28gY2l2aWxpemVkIGFuZCBzbyBkZXNpcmFibGUgaW4gdGhlIGV5ZXMgb2YgYWxsIG1lbiB0aGF0IG90aGVycyBjYW1lIGJ5IHNlYSB0byBkd2VsbCBpbiB0aGUgcGxhY2VzIGZyb20gd2hpY2ggdGhlaXIgb3duIGNpdGl6ZW5zIHVzZWQgdG8gcnVuIGF3YXkgYmVmb3JlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BZ3JpZ2VudHVtIGFuZCBHZWxhLCBmb3IgaW5zdGFuY2UsIGdyZWF0IGNpdGllcyB3aGljaCBoYWQgYmVlbiBydWluZWQgYW5kIGRlcG9wdWxhdGVkIGJ5IHRoZSBDYXJ0aGFnaW5pYW5zIGFmdGVyIHRoZSBBdHRpYyB3YXIsIHdlcmUgcmVwZW9wbGVkIGF0IHRoaXMgdGltZSwgb25lIGJ5IE1lZ2VsbHVzIGFuZCBQaGVyaXN0dXMgZnJvbSBWZWxpYSwgdGhlIG90aGVyIGJ5IEdvcmd1cywgd2hvIHNhaWxlZCBmcm9tIENlb3MgYW5kIGJyb3VnaHQgd2l0aCBoaXMgY29tcGFueSB0aGUgb2xkIGNpdGl6ZW5zLiBUbyB0aGVzZSBzZXR0bGVycyBUaW1vbGVvbiBub3Qgb25seSBhZmZvcmRlZCBzYWZldHkgYW5kIGNhbG0gYWZ0ZXIgc28gbG9uZyBhIHN0b3JtIG9mIHdhciwgYnV0IGFsc28gc3VwcGxpZWQgdGhlaXIgZnVydGhlciBuZWVkcyBhbmQgemVhbG91c2x5IGFzc2lzdGVkIHRoZW0sIHNvIHRoYXQgaGUgd2FzIHJldmVyZWQgYnkgdGhlbSBhcyBhIGZvdW5kZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgb3RoZXIgaW5oYWJpdGFudHMgYWxzbyBjaGVyaXNoZWQgbGlrZSBmZWVsaW5ncyB0b3dhcmRzIGhpbSwgYW5kIG5vIGNvbmNsdXNpb24gb2Ygd2FyLCBubyBpbnN0aXR1dGlvbiBvZiBsYXdzLCBubyBzZXR0bGVtZW50IG9mIHRlcnJpdG9yeSwgbm8gYXJyYW5nZW1lbnQgb2YgY2l2aWwgcG9saXR5IHNlZW1lZCBzYXRpc2ZhY3RvcnksIHVubGVzcyBoZSBnYXZlIHRoZSBmaW5pc2hpbmcgdG91Y2hlcyB0byBpdCwgbGlrZSBhIG1hc3RlciBidWlsZGVyIGFkZGluZyB0byBhIHdvcmsgdGhhdCBpcyBkcmF3aW5nIHRvIGNvbXBsZXRpb24gc29tZSBncmFjZSB3aGljaCBwbGVhc2VzIGdvZHMgYW5kIG1lbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyBtYW5uZXIsIHRoZW4sIGRpZCBUaW1vbGVvbiBleHRpcnBhdGUgdGhlIHR5cmFubmllcyBhbmQgcHV0IGEgc3RvcCB0byB0aGVpciB3YXJzLiBIZSBmb3VuZCB0aGUgd2hvbGUgaXNsYW5kIHJlZHVjZWQgdG8gYSBzYXZhZ2Ugc3RhdGUgYnkgaXRzIHRyb3VibGVzIGFuZCBoYXRlZCBieSBpdHMgaW5oYWJpdGFudHMsIGJ1dCBoZSBtYWRlIGl0IHNvIGNpdmlsaXplZCBhbmQgc28gZGVzaXJhYmxlIGluIHRoZSBleWVzIG9mIGFsbCBtZW4gdGhhdCBvdGhlcnMgY2FtZSBieSBzZWEgdG8gZHdlbGwgaW4gdGhlIHBsYWNlcyBmcm9tIHdoaWNoIHRoZWlyIG93biBjaXRpemVucyB1c2VkIHRvIHJ1biBhd2F5IGJlZm9yZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFncmlnZW50dW0gYW5kIEdlbGEsIGZvciBpbnN0YW5jZSwgZ3JlYXQgY2l0aWVzIHdoaWNoIGhhZCBiZWVuIHJ1aW5lZCBhbmQgZGVwb3B1bGF0ZWQgYnkgdGhlIENhcnRoYWdpbmlhbnMgYWZ0ZXIgdGhlIEF0dGljIHdhciwgd2VyZSByZXBlb3BsZWQgYXQgdGhpcyB0aW1lLCBvbmUgYnkgTWVnZWxsdXMgYW5kIFBoZXJpc3R1cyBmcm9tIFZlbGlhLCB0aGUgb3RoZXIgYnkgR29yZ3VzLCB3aG8gc2FpbGVkIGZyb20gQ2VvcyBhbmQgYnJvdWdodCB3aXRoIGhpcyBjb21wYW55IHRoZSBvbGQgY2l0aXplbnMuIFRvIHRoZXNlIHNldHRsZXJzIFRpbW9sZW9uIG5vdCBvbmx5IGFmZm9yZGVkIHNhZmV0eSBhbmQgY2FsbSBhZnRlciBzbyBsb25nIGEgc3Rvcm0gb2Ygd2FyLCBidXQgYWxzbyBzdXBwbGllZCB0aGVpciBmdXJ0aGVyIG5lZWRzIGFuZCB6ZWFsb3VzbHkgYXNzaXN0ZWQgdGhlbSwgc28gdGhhdCBoZSB3YXMgcmV2ZXJlZCBieSB0aGVtIGFzIGEgZm91bmRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgb3RoZXIgaW5oYWJpdGFudHMgYWxzbyBjaGVyaXNoZWQgbGlrZSBmZWVsaW5ncyB0b3dhcmRzIGhpbSwgYW5kIG5vIGNvbmNsdXNpb24gb2Ygd2FyLCBubyBpbnN0aXR1dGlvbiBvZiBsYXdzLCBubyBzZXR0bGVtZW50IG9mIHRlcnJpdG9yeSwgbm8gYXJyYW5nZW1lbnQgb2YgY2l2aWwgcG9saXR5IHNlZW1lZCBzYXRpc2ZhY3RvcnksIHVubGVzcyBoZSBnYXZlIHRoZSBmaW5pc2hpbmcgdG91Y2hlcyB0byBpdCwgbGlrZSBhIG1hc3RlciBidWlsZGVyIGFkZGluZyB0byBhIHdvcmsgdGhhdCBpcyBkcmF3aW5nIHRvIGNvbXBsZXRpb24gc29tZSBncmFjZSB3aGljaCBwbGVhc2VzIGdvZHMgYW5kIG1lbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIHRob3VnaCBpbiBoaXMgdGltZSBHcmVlY2UgcHJvZHVjZWQgbWFueSBtZW4gd2hvIHdlcmUgZ3JlYXQgYW5kIHdyb3VnaHQgZ3JlYXQgdGhpbmdzLCBzdWNoIGFzIFRpbW90aGV1cywgQWdlc2lsYcO8cywgUGVsb3BpZGFzLCBhbmQgRXBhbWlub25kYXMgKHdob20gVGltb2xlb24gbW9zdCBlbXVsYXRlZCksIHN0aWxsLCB0aGUgbHVzdHJlIG9mIHRoZWlyIGFjaGlldmVtZW50cyB3YXMgdGFybmlzaGVkIGJ5IGEgY2VydGFpbiBkZWdyZWUgb2YgdmlvbGVuY2UgYW5kIGxhYm9yaW91cyBlZmZvcnQsIHNvIHRoYXQgc29tZSBvZiB0aGVtIHdlcmUgZm9sbG93ZWQgYnkgY2Vuc3VyZSBhbmQgcmVwZW50YW5jZTsgd2hlcmVhcyBpbiB0aGUgY2FyZWVyIG9mIFRpbW9sZW9uLCBzZXR0aW5nIGFzaWRlIGhpcyBuZWNlc3NhcnkgdHJlYXRtZW50IG9mIGhpcyBicm90aGVyLCB0aGVyZSBpcyBub3RoaW5nIHRvIHdoaWNoIGl0IHdlcmUgbm90IG1lZXQsIGFzIFRpbWFldXMgc2F5cywgdG8gYXBwbHkgdGhlIHdvcmRzIG9mIFNvcGhvY2xlczrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+WWUgR29kcywgcHJheSB0ZWxsIHdoYXQgQ3lwcmlzIG9yIHdoYXQgd2lubmluZyBsb3ZlLjwvbD4KCQkJCQkgICAgICAgICAgPGw+V2FzIHBhcnRuZXIgaW4gdGhpcyB3b3JrPzwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TmF1Y2ssIDx0aXRsZT5UcmFnLiBHcmFlYy4gRnJhZy4yPC90aXRsZT4gcC4gMzE2Ljwvbm90ZT4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJRm9yIGp1c3QgYXMgdGhlIHBvZXRyeSBvZiBBbnRpbWFjaHVzIGFuZCB0aGUgcGljdHVyZXMgb2YgRGlvbnlzaXVzLCBib3RoIENvbG9waG9uaWFucywgZm9yIGFsbCB0aGVpciBzdHJlbmd0aCBhbmQgdmlnb3VyLCBzZWVtIGZvcmNlZCBhbmQgbGFib3VyZWQsIHdoaWxlIHRoZSBwYWludGluZ3Mgb2YgTmljb21hY2h1cyBhbmQgdGhlIHZlcnNlcyBvZiBIb21lciBub3Qgb25seSBoYXZlIHBvd2VyIGFuZCBncmFjZSBiZXNpZGVzLCBidXQgYWxzbyBnaXZlIHRoZSBpbXByZXNzaW9uIG9mIGhhdmluZyBiZWVuIGV4ZWN1dGVkIHJlYWRpbHkgYW5kIGVhc2lseTsgc28sIGlmIHdlIGNvbXBhcmUgdGhlIGdlbmVyYWxzaGlwIG9mIEVwYW1pbm9uZGFzIGFuZCBBZ2VzaWxhw7xzLCB3aGljaCBpbiBib3RoIGNhc2VzIHdhcyBmdWxsIG9mIHRvaWwgYW5kIGJpdHRlciBzdHJ1Z2dsZXMsIHdpdGggdGhhdCBvZiBUaW1vbGVvbiwgd2hpY2ggd2FzIGV4ZXJjaXNlZCB3aXRoIG11Y2ggZWFzZSBhcyB3ZWxsIGFzIGdsb3J5LCBpdCBhcHBlYXJzIHRvIG1lbiBvZiBqdXN0IGFuZCBjYXJlZnVsIHJlYXNvbmluZyBhIHByb2R1Y3QsIG5vdCBvZiBmb3J0dW5lLCBidXQgb2YgZm9ydHVuYXRlIHZhbG91ci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBhbGwgaGlzIHN1Y2Nlc3NlcyB3ZXJlIGFzY3JpYmVkIGJ5IGhpbSB0byBmb3J0dW5lOyBmb3IgaW4gaGlzIGxldHRlcnMgdG8gaGlzIGZyaWVuZHMgYXQgaG9tZSBhbmQgaW4gaGlzIHB1YmxpYyBhZGRyZXNzZXMgdG8gdGhlIFN5cmFjdXNhbnMgaGUgb2Z0ZW4gc2FpZCBoZSB3YXMgdGhhbmtmdWwgdG8gR29kLCB3aG8sIGRlc2lyaW5nIHRvIHNhdmUgU2ljaWx5LCBnYXZlIGhpbSB0aGUgbmFtZSBhbmQgdGl0bGUgb2YgaXRzIHNhdmlvdXIuIE1vcmVvdmVyLCBpbiBoaXMgaG91c2UgaGUgYnVpbHQgYSBzaHJpbmUgZm9yIHNhY3JpZmljZSB0byBBdXRvbWF0aWEsIG9yIENoYW5jZSwgYW5kIHRoZSBob3VzZSBpdHNlbGYgaGUgY29uc2VjcmF0ZWQgdG8gbWFuJ3Mgc2FjcmVkIGdlbml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBob3VzZSBpbiB3aGljaCBoZSBkd2VsdCB3YXMgcGlja2VkIG91dCBmb3IgaGltIGJ5IHRoZSBTeXJhY3VzYW5zIGFzIGEgcHJpemUgZm9yIGhpcyBhY2hpZXZlbWVudHMgaW4gdGhlIGZpZWxkOyB0aGV5IGFsc28gZ2F2ZSBoaW0gdGhlIHBsZWFzYW50ZXN0IGFuZCBtb3N0IGJlYXV0aWZ1bCBvZiB0aGVpciBjb3VudHJ5IGVzdGF0ZXMsIGFuZCBhdCB0aGlzIGhlIHVzZWQgdG8gc3BlbmQgdGhlIGdyZWF0ZXIgcGFydCBvZiBoaXMgbGVpc3VyZSB0aW1lLCBhZnRlciBoZSBoYWQgc2VudCBob21lIGZvciBoaXMgd2lmZSBhbmQgY2hpbGRyZW4uIEZvciBoZSBkaWQgbm90IHJldHVybiB0byBDb3JpbnRoLCBub3IgZGlkIGhlIHRha2UgcGFydCBpbiB0aGUgZGlzdHVyYmFuY2VzIG9mIEdyZWVjZSBvciBleHBvc2UgaGltc2VsZiB0byB0aGUgamVhbG91c3kgb2YgaGlzIGZlbGxvdyBjaXRpemVucywgdGhlIHJvY2sgb24gd2hpY2ggbW9zdCBnZW5lcmFscywgaW4gdGhlaXIgaW5zYXRpYWJsZSBncmVlZCBmb3IgaG9ub3VycyBhbmQgcG93ZXIsIG1ha2Ugc2hpcHdyZWNrOyBidXQgaGUgcmVtYWluZWQgaW4gU2ljaWx5LCBlbmpveWluZyB0aGUgYmxlc3NpbmdzIG9mIGhpcyBvd24gY3JlYXRpb24sIHRoZSBncmVhdGVzdCBvZiB3aGljaCB3YXMgdGhlIHNpZ2h0IG9mIHNvIG1hbnkgY2l0aWVzIGFuZCBteXJpYWRzIG9mIHBlb3BsZSB3aG9zZSBoYXBwaW5lc3Mgd2FzIGR1ZSB0byBoaW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIHRob3VnaCBpbiBoaXMgdGltZSBHcmVlY2UgcHJvZHVjZWQgbWFueSBtZW4gd2hvIHdlcmUgZ3JlYXQgYW5kIHdyb3VnaHQgZ3JlYXQgdGhpbmdzLCBzdWNoIGFzIFRpbW90aGV1cywgQWdlc2lsYcO8cywgUGVsb3BpZGFzLCBhbmQgRXBhbWlub25kYXMgKHdob20gVGltb2xlb24gbW9zdCBlbXVsYXRlZCksIHN0aWxsLCB0aGUgbHVzdHJlIG9mIHRoZWlyIGFjaGlldmVtZW50cyB3YXMgdGFybmlzaGVkIGJ5IGEgY2VydGFpbiBkZWdyZWUgb2YgdmlvbGVuY2UgYW5kIGxhYm9yaW91cyBlZmZvcnQsIHNvIHRoYXQgc29tZSBvZiB0aGVtIHdlcmUgZm9sbG93ZWQgYnkgY2Vuc3VyZSBhbmQgcmVwZW50YW5jZTsgd2hlcmVhcyBpbiB0aGUgY2FyZWVyIG9mIFRpbW9sZW9uLCBzZXR0aW5nIGFzaWRlIGhpcyBuZWNlc3NhcnkgdHJlYXRtZW50IG9mIGhpcyBicm90aGVyLCB0aGVyZSBpcyBub3RoaW5nIHRvIHdoaWNoIGl0IHdlcmUgbm90IG1lZXQsIGFzIFRpbWFldXMgc2F5cywgdG8gYXBwbHkgdGhlIHdvcmRzIG9mIFNvcGhvY2xlczrigJQKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlllIEdvZHMsIHByYXkgdGVsbCB3aGF0IEN5cHJpcyBvciB3aGF0IHdpbm5pbmcgbG92ZS48L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2FzIHBhcnRuZXIgaW4gdGhpcyB3b3JrPzwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5ZZSBHb2RzLCBwcmF5IHRlbGwgd2hhdCBDeXByaXMgb3Igd2hhdCB3aW5uaW5nIGxvdmUuPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPldhcyBwYXJ0bmVyIGluIHRoaXMgd29yaz88L2w+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TmF1Y2ssIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyYWcuIEdyYWVjLiBGcmFnLjI8L3RpdGxlPiBwLiAzMTYuPC9ub3RlPgoJCQkJICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UcmFnLiBHcmFlYy4gRnJhZy4yPC90aXRsZT4gcC4gMzE2LjwvdHJhbnNsYXRpb24+"
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJRm9yIGp1c3QgYXMgdGhlIHBvZXRyeSBvZiBBbnRpbWFjaHVzIGFuZCB0aGUgcGljdHVyZXMgb2YgRGlvbnlzaXVzLCBib3RoIENvbG9waG9uaWFucywgZm9yIGFsbCB0aGVpciBzdHJlbmd0aCBhbmQgdmlnb3VyLCBzZWVtIGZvcmNlZCBhbmQgbGFib3VyZWQsIHdoaWxlIHRoZSBwYWludGluZ3Mgb2YgTmljb21hY2h1cyBhbmQgdGhlIHZlcnNlcyBvZiBIb21lciBub3Qgb25seSBoYXZlIHBvd2VyIGFuZCBncmFjZSBiZXNpZGVzLCBidXQgYWxzbyBnaXZlIHRoZSBpbXByZXNzaW9uIG9mIGhhdmluZyBiZWVuIGV4ZWN1dGVkIHJlYWRpbHkgYW5kIGVhc2lseTsgc28sIGlmIHdlIGNvbXBhcmUgdGhlIGdlbmVyYWxzaGlwIG9mIEVwYW1pbm9uZGFzIGFuZCBBZ2VzaWxhw7xzLCB3aGljaCBpbiBib3RoIGNhc2VzIHdhcyBmdWxsIG9mIHRvaWwgYW5kIGJpdHRlciBzdHJ1Z2dsZXMsIHdpdGggdGhhdCBvZiBUaW1vbGVvbiwgd2hpY2ggd2FzIGV4ZXJjaXNlZCB3aXRoIG11Y2ggZWFzZSBhcyB3ZWxsIGFzIGdsb3J5LCBpdCBhcHBlYXJzIHRvIG1lbiBvZiBqdXN0IGFuZCBjYXJlZnVsIHJlYXNvbmluZyBhIHByb2R1Y3QsIG5vdCBvZiBmb3J0dW5lLCBidXQgb2YgZm9ydHVuYXRlIHZhbG91ci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgYWxsIGhpcyBzdWNjZXNzZXMgd2VyZSBhc2NyaWJlZCBieSBoaW0gdG8gZm9ydHVuZTsgZm9yIGluIGhpcyBsZXR0ZXJzIHRvIGhpcyBmcmllbmRzIGF0IGhvbWUgYW5kIGluIGhpcyBwdWJsaWMgYWRkcmVzc2VzIHRvIHRoZSBTeXJhY3VzYW5zIGhlIG9mdGVuIHNhaWQgaGUgd2FzIHRoYW5rZnVsIHRvIEdvZCwgd2hvLCBkZXNpcmluZyB0byBzYXZlIFNpY2lseSwgZ2F2ZSBoaW0gdGhlIG5hbWUgYW5kIHRpdGxlIG9mIGl0cyBzYXZpb3VyLiBNb3Jlb3ZlciwgaW4gaGlzIGhvdXNlIGhlIGJ1aWx0IGEgc2hyaW5lIGZvciBzYWNyaWZpY2UgdG8gQXV0b21hdGlhLCBvciBDaGFuY2UsIGFuZCB0aGUgaG91c2UgaXRzZWxmIGhlIGNvbnNlY3JhdGVkIHRvIG1hbidzIHNhY3JlZCBnZW5pdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgaG91c2UgaW4gd2hpY2ggaGUgZHdlbHQgd2FzIHBpY2tlZCBvdXQgZm9yIGhpbSBieSB0aGUgU3lyYWN1c2FucyBhcyBhIHByaXplIGZvciBoaXMgYWNoaWV2ZW1lbnRzIGluIHRoZSBmaWVsZDsgdGhleSBhbHNvIGdhdmUgaGltIHRoZSBwbGVhc2FudGVzdCBhbmQgbW9zdCBiZWF1dGlmdWwgb2YgdGhlaXIgY291bnRyeSBlc3RhdGVzLCBhbmQgYXQgdGhpcyBoZSB1c2VkIHRvIHNwZW5kIHRoZSBncmVhdGVyIHBhcnQgb2YgaGlzIGxlaXN1cmUgdGltZSwgYWZ0ZXIgaGUgaGFkIHNlbnQgaG9tZSBmb3IgaGlzIHdpZmUgYW5kIGNoaWxkcmVuLiBGb3IgaGUgZGlkIG5vdCByZXR1cm4gdG8gQ29yaW50aCwgbm9yIGRpZCBoZSB0YWtlIHBhcnQgaW4gdGhlIGRpc3R1cmJhbmNlcyBvZiBHcmVlY2Ugb3IgZXhwb3NlIGhpbXNlbGYgdG8gdGhlIGplYWxvdXN5IG9mIGhpcyBmZWxsb3cgY2l0aXplbnMsIHRoZSByb2NrIG9uIHdoaWNoIG1vc3QgZ2VuZXJhbHMsIGluIHRoZWlyIGluc2F0aWFibGUgZ3JlZWQgZm9yIGhvbm91cnMgYW5kIHBvd2VyLCBtYWtlIHNoaXB3cmVjazsgYnV0IGhlIHJlbWFpbmVkIGluIFNpY2lseSwgZW5qb3lpbmcgdGhlIGJsZXNzaW5ncyBvZiBoaXMgb3duIGNyZWF0aW9uLCB0aGUgZ3JlYXRlc3Qgb2Ygd2hpY2ggd2FzIHRoZSBzaWdodCBvZiBzbyBtYW55IGNpdGllcyBhbmQgbXlyaWFkcyBvZiBwZW9wbGUgd2hvc2UgaGFwcGluZXNzIHdhcyBkdWUgdG8gaGltLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UsIGFzIGl0IHdvdWxkIHNlZW0sIG5vdCBvbmx5IGFsbCBsYXJrcyBtdXN0IGdyb3cgYSBjcmVzdCwgYXMgU2ltb25pZGVzIHNheXMsIGJ1dCBhbHNvIGV2ZXJ5IGRlbW9jcmFjeSBhIGZhbHNlIGFjY3VzZXIsIGV2ZW4gVGltb2xlb24gd2FzIGF0dGFja2VkIGJ5IHR3byBvZiB0aGUgcG9wdWxhciBsZWFkZXJzIGF0IFN5cmFjdXNlLCBMYXBoeXN0aXVzIGFuZCBEZW1hZW5ldHVzLiBPZiB0aGVzZSwgTGFwaHlzdGl1cyBvbmNlIHRyaWVkIHRvIG1ha2UgaGltIGdpdmUgc3VyZXR5IHRoYXQgaGUgd291bGQgYXBwZWFyIGF0IGEgY2VydGFpbiB0cmlhbCwgYW5kIFRpbW9sZW9uIHdvdWxkIG5vdCBzdWZmZXIgdGhlIGNpdGl6ZW5zIHRvIHN0b3AgdGhlIG1hbiBieSB0aGVpciB0dXJidWxlbnQgZGlzYXBwcm92YWw7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciBoZSBoaW1zZWxmLCBoZSBzYWlkLCBoYWQgb2YgaGlzIG93biBhY2NvcmQgZW5kdXJlZCBhbGwgaGlzIHRvaWxzIGFuZCBkYW5nZXJzIGluIG9yZGVyIHRoYXQgYW55IFN5cmFjdXNhbiB3aG8gd2lzaGVkIG1pZ2h0IGF2YWlsIGhpbXNlbGYgb2YgdGhlIGxhd3MuIEFuZCB3aGVuIHRoZSBvdGhlciwgRGVtYWVuZXR1cywgYnJvdWdodCBtYW55IGRlbnVuY2lhdGlvbnMgaW4gb3BlbiBhc3NlbWJseSBhZ2FpbnN0IGhpcyBjb25kdWN0IGluIHRoZSBmaWVsZCwgdG8gaGltLCBpbmRlZWQsIFRpbW9sZW9uIG1hZGUgbm8gYW5zd2VyLCBidXQgc2FpZCBoZSBvd2VkIHRoYW5rcyB0byB0aGUgZ29kcywgZm9yIGhlIGhhZCBwcmF5ZWQgdGhlbSB0aGF0IGhlIG1pZ2h0IGxpdmUgdG8gc2VlIHRoZSBTeXJhY3VzYW5zIGdhaW4gdGhlIHJpZ2h0IG9mIGZyZWUgc3BlZWNoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNpbmNlLCBhcyBpdCB3b3VsZCBzZWVtLCBub3Qgb25seSBhbGwgbGFya3MgbXVzdCBncm93IGEgY3Jlc3QsIGFzIFNpbW9uaWRlcyBzYXlzLCBidXQgYWxzbyBldmVyeSBkZW1vY3JhY3kgYSBmYWxzZSBhY2N1c2VyLCBldmVuIFRpbW9sZW9uIHdhcyBhdHRhY2tlZCBieSB0d28gb2YgdGhlIHBvcHVsYXIgbGVhZGVycyBhdCBTeXJhY3VzZSwgTGFwaHlzdGl1cyBhbmQgRGVtYWVuZXR1cy4gT2YgdGhlc2UsIExhcGh5c3RpdXMgb25jZSB0cmllZCB0byBtYWtlIGhpbSBnaXZlIHN1cmV0eSB0aGF0IGhlIHdvdWxkIGFwcGVhciBhdCBhIGNlcnRhaW4gdHJpYWwsIGFuZCBUaW1vbGVvbiB3b3VsZCBub3Qgc3VmZmVyIHRoZSBjaXRpemVucyB0byBzdG9wIHRoZSBtYW4gYnkgdGhlaXIgdHVyYnVsZW50IGRpc2FwcHJvdmFsOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciBoZSBoaW1zZWxmLCBoZSBzYWlkLCBoYWQgb2YgaGlzIG93biBhY2NvcmQgZW5kdXJlZCBhbGwgaGlzIHRvaWxzIGFuZCBkYW5nZXJzIGluIG9yZGVyIHRoYXQgYW55IFN5cmFjdXNhbiB3aG8gd2lzaGVkIG1pZ2h0IGF2YWlsIGhpbXNlbGYgb2YgdGhlIGxhd3MuIEFuZCB3aGVuIHRoZSBvdGhlciwgRGVtYWVuZXR1cywgYnJvdWdodCBtYW55IGRlbnVuY2lhdGlvbnMgaW4gb3BlbiBhc3NlbWJseSBhZ2FpbnN0IGhpcyBjb25kdWN0IGluIHRoZSBmaWVsZCwgdG8gaGltLCBpbmRlZWQsIFRpbW9sZW9uIG1hZGUgbm8gYW5zd2VyLCBidXQgc2FpZCBoZSBvd2VkIHRoYW5rcyB0byB0aGUgZ29kcywgZm9yIGhlIGhhZCBwcmF5ZWQgdGhlbSB0aGF0IGhlIG1pZ2h0IGxpdmUgdG8gc2VlIHRoZSBTeXJhY3VzYW5zIGdhaW4gdGhlIHJpZ2h0IG9mIGZyZWUgc3BlZWNoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPiAgCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJU28sIHRoZW4sIGhhdmluZyBieSBnZW5lcmFsIGNvbmZlc3Npb24gcGVyZm9ybWVkIHRoZSBncmVhdGVzdCBhbmQgbW9zdCBnbG9yaW91cyBkZWVkcyBvZiBhbnkgR3JlZWsgb2YgaGlzIHRpbWUsIGFuZCBoYXZpbmcgYmVlbiB0aGUgb25seSBvbmUgdG8gc3VjY2VlZCBpbiB0aG9zZSBhY2hpZXZlbWVudHMgdG8gd2hpY2ggdGhlIHJoZXRvcmljaWFucywgaW4gdGhlaXIgc3BlZWNoZXMgYXQgdGhlIG5hdGlvbmFsIGFzc2VtYmxpZXMsIHdlcmUgZXZlciBleGhvcnRpbmcgdGhlIEdyZWVrczsgaGF2aW5nIGJlZW4gcmVtb3ZlZCBiZXRpbWVzIGJ5IGEgaGFwcHkgZm9ydHVuZSwgcHVyZSBhbmQgdW5zdGFpbmVkIHdpdGggYmxvb2QsIGZyb20gdGhlIGV2aWxzIHdoaWNoIHdlcmUgcmlmZSBpbiB0aGUgbW90aGVyIGNvdW50cnksIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYXZpbmcgZGlzcGxheWVkIGFiaWxpdHkgYW5kIHZhbG91ciBpbiBoaXMgZGVhbGluZ3Mgd2l0aCBCYXJiYXJpYW5zIGFuZCB0eXJhbnRzLCBhcyB3ZWxsIGFzIGp1c3RpY2UgYW5kIGdlbnRsZW5lc3MgaW4gaGlzIGRlYWxpbmdzIHdpdGggdGhlIEdyZWVrcyBhbmQgaGlzIGZyaWVuZHM7IGhhdmluZyBzZXQgdXAgbW9zdCBvZiB0aGUgdHJvcGhpZXMgb2YgaGlzIGNvbnRlc3RzIHdpdGhvdXQgY2F1c2luZyBoaXMgZmVsbG93IGNpdGl6ZW5zIGVpdGhlciB0ZWFycyBvciBtb3VybmluZywgYW5kIGhhdmluZyBpbiBldmVuIGxlc3MgdGhhbiBlaWdodCB5ZWFyczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjM0Ni0zMzggQi5DLjwvbm90ZT4gaGFuZGVkIG92ZXIgdG8gaGVyIGluaGFiaXRhbnRzIGEgU2ljaWx5IHB1cmdlZCBvZiBoZXIgcGVycGV0dWFsIGludGVzdGluZSBtaXNlcmllcyBhbmQgY29tcGxhaW50czsgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YXQgbGFzdCwgYmVpbmcgbm93IGFkdmFuY2VkIGluIHllYXJzLCBoZSBiZWdhbiB0byBsb3NlIGhpcyBzaWdodCwgYW5kIHRoZW4sIGFmdGVyIGEgbGl0dGxlLCBiZWNhbWUgY29tcGxldGVseSBibGluZC4gSGUgaGFkIGRvbmUgbm90aGluZyBoaW1zZWxmIHRvIG9jY2FzaW9uIHRoaXMsIG5vciB3YXMgaGUgdGhlcmVpbiB0aGUgc3BvcnQgYW5kIG1vY2tlcnkgb2YgRm9ydHVuZSwgYnV0IHN1ZmZlcmVkIGZyb20gc29tZSBjb25nZW5pdGFsIGRpc2Vhc2UsIGFzIGl0IHdvdWxkIHNlZW0sIHdoaWNoIGNhbWUgdXBvbiBoaW0gd2l0aCBoaXMgeWVhcnM7IGZvciBpdCBpcyBzYWlkIHRoYXQgbm90IGEgZmV3IG9mIGhpcyBraW5kcmVkIGxvc3QgdGhlaXIgc2lnaHQgaW4gYSBzaW1pbGFyIHdheSwgd2hlbiBpdCB3YXMgZW5mZWVibGVkIGJ5IG9sZCBhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBdGhhbmlzIHNheXMgdGhhdCB3aGlsZSB0aGUgd2FyIGFnYWluc3QgSGlwcG8gYW5kIE1hbWVyY3VzIHdhcyBzdGlsbCBpbiBwcm9ncmVzcywgaW4gaGlzIGNhbXAgYXQgTXlsYWUsIGhpcyB2aXNpb24gd2FzIG9ic2N1cmVkIGJ5IGEgY2F0YXJhY3QgaW4gdGhlIGV5ZSwgYW5kIGl0IHdhcyBwbGFpbiB0byBhbGwgdGhhdCBoZSB3YXMgZ2V0dGluZyBibGluZDsgaGUgZGlkIG5vdCwgaG93ZXZlciwgZGVzaXN0IGZyb20gdGhlIHNpZWdlIG9uIHRoaXMgYWNjb3VudCwgYnV0IHBlcnNpc3RlZCBpbiB0aGUgd2FyIGFuZCBjYXB0dXJlZCB0aGUgdHlyYW50czsgeWV0IGFmdGVyIGhpcyByZXR1cm4gdG8gU3lyYWN1c2UsIGhlIGF0IG9uY2UgbGFpZCBhc2lkZSB0aGUgc29sZSBjb21tYW5kIGFuZCBiZWdnZWQgdGhlIGNpdGl6ZW5zIHRvIGV4Y3VzZSBoaW0gZnJvbSBpdCwgbm93IHRoYXQgbWF0dGVycyBoYWQgcmVhY2hlZCB0aGUgaGFwcGllc3QgY29uY2x1c2lvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJU28sIHRoZW4sIGhhdmluZyBieSBnZW5lcmFsIGNvbmZlc3Npb24gcGVyZm9ybWVkIHRoZSBncmVhdGVzdCBhbmQgbW9zdCBnbG9yaW91cyBkZWVkcyBvZiBhbnkgR3JlZWsgb2YgaGlzIHRpbWUsIGFuZCBoYXZpbmcgYmVlbiB0aGUgb25seSBvbmUgdG8gc3VjY2VlZCBpbiB0aG9zZSBhY2hpZXZlbWVudHMgdG8gd2hpY2ggdGhlIHJoZXRvcmljaWFucywgaW4gdGhlaXIgc3BlZWNoZXMgYXQgdGhlIG5hdGlvbmFsIGFzc2VtYmxpZXMsIHdlcmUgZXZlciBleGhvcnRpbmcgdGhlIEdyZWVrczsgaGF2aW5nIGJlZW4gcmVtb3ZlZCBiZXRpbWVzIGJ5IGEgaGFwcHkgZm9ydHVuZSwgcHVyZSBhbmQgdW5zdGFpbmVkIHdpdGggYmxvb2QsIGZyb20gdGhlIGV2aWxzIHdoaWNoIHdlcmUgcmlmZSBpbiB0aGUgbW90aGVyIGNvdW50cnksIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYXZpbmcgZGlzcGxheWVkIGFiaWxpdHkgYW5kIHZhbG91ciBpbiBoaXMgZGVhbGluZ3Mgd2l0aCBCYXJiYXJpYW5zIGFuZCB0eXJhbnRzLCBhcyB3ZWxsIGFzIGp1c3RpY2UgYW5kIGdlbnRsZW5lc3MgaW4gaGlzIGRlYWxpbmdzIHdpdGggdGhlIEdyZWVrcyBhbmQgaGlzIGZyaWVuZHM7IGhhdmluZyBzZXQgdXAgbW9zdCBvZiB0aGUgdHJvcGhpZXMgb2YgaGlzIGNvbnRlc3RzIHdpdGhvdXQgY2F1c2luZyBoaXMgZmVsbG93IGNpdGl6ZW5zIGVpdGhlciB0ZWFycyBvciBtb3VybmluZywgYW5kIGhhdmluZyBpbiBldmVuIGxlc3MgdGhhbiBlaWdodCB5ZWFyczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MzQ2LTMzOCBCLkMuPC9ub3RlPiBoYW5kZWQgb3ZlciB0byBoZXIgaW5oYWJpdGFudHMgYSBTaWNpbHkgcHVyZ2VkIG9mIGhlciBwZXJwZXR1YWwgaW50ZXN0aW5lIG1pc2VyaWVzIGFuZCBjb21wbGFpbnRzOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmF0IGxhc3QsIGJlaW5nIG5vdyBhZHZhbmNlZCBpbiB5ZWFycywgaGUgYmVnYW4gdG8gbG9zZSBoaXMgc2lnaHQsIGFuZCB0aGVuLCBhZnRlciBhIGxpdHRsZSwgYmVjYW1lIGNvbXBsZXRlbHkgYmxpbmQuIEhlIGhhZCBkb25lIG5vdGhpbmcgaGltc2VsZiB0byBvY2Nhc2lvbiB0aGlzLCBub3Igd2FzIGhlIHRoZXJlaW4gdGhlIHNwb3J0IGFuZCBtb2NrZXJ5IG9mIEZvcnR1bmUsIGJ1dCBzdWZmZXJlZCBmcm9tIHNvbWUgY29uZ2VuaXRhbCBkaXNlYXNlLCBhcyBpdCB3b3VsZCBzZWVtLCB3aGljaCBjYW1lIHVwb24gaGltIHdpdGggaGlzIHllYXJzOyBmb3IgaXQgaXMgc2FpZCB0aGF0IG5vdCBhIGZldyBvZiBoaXMga2luZHJlZCBsb3N0IHRoZWlyIHNpZ2h0IGluIGEgc2ltaWxhciB3YXksIHdoZW4gaXQgd2FzIGVuZmVlYmxlZCBieSBvbGQgYWdlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBdGhhbmlzIHNheXMgdGhhdCB3aGlsZSB0aGUgd2FyIGFnYWluc3QgSGlwcG8gYW5kIE1hbWVyY3VzIHdhcyBzdGlsbCBpbiBwcm9ncmVzcywgaW4gaGlzIGNhbXAgYXQgTXlsYWUsIGhpcyB2aXNpb24gd2FzIG9ic2N1cmVkIGJ5IGEgY2F0YXJhY3QgaW4gdGhlIGV5ZSwgYW5kIGl0IHdhcyBwbGFpbiB0byBhbGwgdGhhdCBoZSB3YXMgZ2V0dGluZyBibGluZDsgaGUgZGlkIG5vdCwgaG93ZXZlciwgZGVzaXN0IGZyb20gdGhlIHNpZWdlIG9uIHRoaXMgYWNjb3VudCwgYnV0IHBlcnNpc3RlZCBpbiB0aGUgd2FyIGFuZCBjYXB0dXJlZCB0aGUgdHlyYW50czsgeWV0IGFmdGVyIGhpcyByZXR1cm4gdG8gU3lyYWN1c2UsIGhlIGF0IG9uY2UgbGFpZCBhc2lkZSB0aGUgc29sZSBjb21tYW5kIGFuZCBiZWdnZWQgdGhlIGNpdGl6ZW5zIHRvIGV4Y3VzZSBoaW0gZnJvbSBpdCwgbm93IHRoYXQgbWF0dGVycyBoYWQgcmVhY2hlZCB0aGUgaGFwcGllc3QgY29uY2x1c2lvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgdGhhdCBoZSBoaW1zZWxmIHNob3VsZCBiZWFyIGhpcyBtaXNmb3J0dW5lIHdpdGhvdXQgcmVwaW5pbmcgaXMgbGVzcyBhIG1hdHRlciBmb3Igd29uZGVyOyBidXQgdGhlIGdyYXRpdHVkZSBhbmQgaG9ub3VyIHdoaWNoIHRoZSBTeXJhY3VzYW5zIHNob3dlZCBoaW0gaW4gaGlzIGJsaW5kbmVzcyBhcmUgd29ydGh5IG9mIGFkbWlyYXRpb24uIFRoZXkgb2Z0ZW4gd2VudCB0byB2aXNpdCBoaW0gaW4gcGVyc29uLCBhbmQgYnJvdWdodCBzdHJhbmdlcnMgd2hvIHdlcmUgc29qb3VybmluZyBpbiB0aGUgY2l0eSB0byBoaXMgaG91c2UgYW5kIHRvIGhpcyBjb3VudHJ5IHNlYXQgdG8gc2VlIHRoZWlyIGJlbmVmYWN0b3IsIGV4dWx0aW5nIGFuZCBwcm91ZCB0aGF0IGhlIGNob3NlIHRvIGVuZCBoaXMgZGF5cyBhbW9uZyB0aGVtIGFuZCB0aHVzIG1hZGUgbGlnaHQgb2YgdGhlIGJyaWxsaWFudCByZXR1cm4gdG8gR3JlZWNlIHdoaWNoIGhhZCBiZWVuIHByZXBhcmVkIGZvciBoaW0gYnkgcmVhc29uIG9mIGhpcyBzdWNjZXNzZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvZiB0aGUgbWFueSBncmVhdCB0aGluZ3MgZGVjcmVlZCBhbmQgZG9uZSBpbiBoaXMgaG9ub3VyLCBub3RoaW5nIHN1cnBhc3NlZCB0aGUgdm90ZSBwYXNzZWQgYnkgdGhlIHBlb3BsZSBvZiBTeXJhY3VzZSB0aGF0IHdoZW5ldmVyIHRoZXkgd2VudCB0byB3YXIgYWdhaW5zdCBhbGllbiBwZW9wbGVzLCB0aGV5IHdvdWxkIGVtcGxveSBhIENvcmludGhpYW4gYXMgdGhlaXIgZ2VuZXJhbC4gTW9yZW92ZXIsIHRoZSBwcm9jZWVkaW5ncyBpbiB0aGVpciBhc3NlbWJsaWVzIGFmZm9yZGVkIGEgbm9ibGUgc3BlY3RhY2xlIGluIGhpcyBob25vdXIsIHNpbmNlLCB3aGlsZSB0aGV5IGRlY2lkZWQgb3RoZXIgbWF0dGVycyBieSB0aGVtc2VsdmVzLCBmb3IgdGhlIG1vcmUgaW1wb3J0YW50IGRlbGliZXJhdGlvbnMgdGhleSBzdW1tb25lZCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgd291bGQgcHJvY2VlZCB0byB0aGUgdGhlYXRyZSBjYXJyaWVkIHRocm91Z2ggdGhlIG1hcmtldCBwbGFjZSBvbiBhIG11bGUtY2FyOyBhbmQgd2hlbiB0aGUgdmVoaWNsZSBpbiB3aGljaCBoZSBzYXQgd2FzIGJyb3VnaHQgaW4sIHRoZSBwZW9wbGUgd291bGQgZ3JlZXQgaGltIHdpdGggb25lIHZvaWNlIGFuZCBjYWxsIGhpbSBieSBuYW1lLCBhbmQgaGUsIGFmdGVyIHJldHVybmluZyB0aGVpciBncmVldGluZ3MgYW5kIGFsbG93aW5nIHNvbWUgdGltZSBmb3IgdGhlaXIgZmVsaWNpdGF0aW9ucyBhbmQgcHJhaXNlcywgd291bGQgdGhlbiBsaXN0ZW4gY2FyZWZ1bGx5IHRvIHRoZSBtYXR0ZXIgdW5kZXIgZGViYXRlIGFuZCBwcm9ub3VuY2Ugb3Bpbmlvbi4gQW5kIHdoZW4gdGhpcyBvcGluaW9uIGhhZCBiZWVuIGFkb3B0ZWQsIGhpcyByZXRhaW5lcnMgd291bGQgY29uZHVjdCBoaXMgY2FyIGJhY2sgYWdhaW4gdGhyb3VnaCB0aGUgdGhlYXRyZSwgYW5kIHRoZSBjaXRpemVucywgYWZ0ZXIgc2VuZGluZyBoaW0gb24gaGlzIHdheSB3aXRoIHNob3V0cyBvZiBhcHBsYXVzZSwgd291bGQgcHJvY2VlZCBhdCBvbmNlIHRvIHRyYW5zYWN0IHRoZSByZXN0IG9mIHRoZSBwdWJsaWMgYnVzaW5lc3MgYnkgdGhlbXNlbHZlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgdGhhdCBoZSBoaW1zZWxmIHNob3VsZCBiZWFyIGhpcyBtaXNmb3J0dW5lIHdpdGhvdXQgcmVwaW5pbmcgaXMgbGVzcyBhIG1hdHRlciBmb3Igd29uZGVyOyBidXQgdGhlIGdyYXRpdHVkZSBhbmQgaG9ub3VyIHdoaWNoIHRoZSBTeXJhY3VzYW5zIHNob3dlZCBoaW0gaW4gaGlzIGJsaW5kbmVzcyBhcmUgd29ydGh5IG9mIGFkbWlyYXRpb24uIFRoZXkgb2Z0ZW4gd2VudCB0byB2aXNpdCBoaW0gaW4gcGVyc29uLCBhbmQgYnJvdWdodCBzdHJhbmdlcnMgd2hvIHdlcmUgc29qb3VybmluZyBpbiB0aGUgY2l0eSB0byBoaXMgaG91c2UgYW5kIHRvIGhpcyBjb3VudHJ5IHNlYXQgdG8gc2VlIHRoZWlyIGJlbmVmYWN0b3IsIGV4dWx0aW5nIGFuZCBwcm91ZCB0aGF0IGhlIGNob3NlIHRvIGVuZCBoaXMgZGF5cyBhbW9uZyB0aGVtIGFuZCB0aHVzIG1hZGUgbGlnaHQgb2YgdGhlIGJyaWxsaWFudCByZXR1cm4gdG8gR3JlZWNlIHdoaWNoIGhhZCBiZWVuIHByZXBhcmVkIGZvciBoaW0gYnkgcmVhc29uIG9mIGhpcyBzdWNjZXNzZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvZiB0aGUgbWFueSBncmVhdCB0aGluZ3MgZGVjcmVlZCBhbmQgZG9uZSBpbiBoaXMgaG9ub3VyLCBub3RoaW5nIHN1cnBhc3NlZCB0aGUgdm90ZSBwYXNzZWQgYnkgdGhlIHBlb3BsZSBvZiBTeXJhY3VzZSB0aGF0IHdoZW5ldmVyIHRoZXkgd2VudCB0byB3YXIgYWdhaW5zdCBhbGllbiBwZW9wbGVzLCB0aGV5IHdvdWxkIGVtcGxveSBhIENvcmludGhpYW4gYXMgdGhlaXIgZ2VuZXJhbC4gTW9yZW92ZXIsIHRoZSBwcm9jZWVkaW5ncyBpbiB0aGVpciBhc3NlbWJsaWVzIGFmZm9yZGVkIGEgbm9ibGUgc3BlY3RhY2xlIGluIGhpcyBob25vdXIsIHNpbmNlLCB3aGlsZSB0aGV5IGRlY2lkZWQgb3RoZXIgbWF0dGVycyBieSB0aGVtc2VsdmVzLCBmb3IgdGhlIG1vcmUgaW1wb3J0YW50IGRlbGliZXJhdGlvbnMgdGhleSBzdW1tb25lZCBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgd291bGQgcHJvY2VlZCB0byB0aGUgdGhlYXRyZSBjYXJyaWVkIHRocm91Z2ggdGhlIG1hcmtldCBwbGFjZSBvbiBhIG11bGUtY2FyOyBhbmQgd2hlbiB0aGUgdmVoaWNsZSBpbiB3aGljaCBoZSBzYXQgd2FzIGJyb3VnaHQgaW4sIHRoZSBwZW9wbGUgd291bGQgZ3JlZXQgaGltIHdpdGggb25lIHZvaWNlIGFuZCBjYWxsIGhpbSBieSBuYW1lLCBhbmQgaGUsIGFmdGVyIHJldHVybmluZyB0aGVpciBncmVldGluZ3MgYW5kIGFsbG93aW5nIHNvbWUgdGltZSBmb3IgdGhlaXIgZmVsaWNpdGF0aW9ucyBhbmQgcHJhaXNlcywgd291bGQgdGhlbiBsaXN0ZW4gY2FyZWZ1bGx5IHRvIHRoZSBtYXR0ZXIgdW5kZXIgZGViYXRlIGFuZCBwcm9ub3VuY2Ugb3Bpbmlvbi4gQW5kIHdoZW4gdGhpcyBvcGluaW9uIGhhZCBiZWVuIGFkb3B0ZWQsIGhpcyByZXRhaW5lcnMgd291bGQgY29uZHVjdCBoaXMgY2FyIGJhY2sgYWdhaW4gdGhyb3VnaCB0aGUgdGhlYXRyZSwgYW5kIHRoZSBjaXRpemVucywgYWZ0ZXIgc2VuZGluZyBoaW0gb24gaGlzIHdheSB3aXRoIHNob3V0cyBvZiBhcHBsYXVzZSwgd291bGQgcHJvY2VlZCBhdCBvbmNlIHRvIHRyYW5zYWN0IHRoZSByZXN0IG9mIHRoZSBwdWJsaWMgYnVzaW5lc3MgYnkgdGhlbXNlbHZlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2hlcmlzaGVkIGluIG9sZCBhZ2UgYW1pZCBzdWNoIGhvbm91ciBhbmQgZ29vZCB3aWxsLCBsaWtlIGEgY29tbW9uIGZhdGhlciwgYSBzbGlnaHQgY2F1c2UgY28tb3BlcmF0ZWQgd2l0aCBoaXMgZ3JlYXQgYWdlIHRvIGJyaW5nIGhpbSB0byBoaXMgZW5kLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMzNyBvciAzMzYgQi5DLjwvbm90ZT4gIEEgbnVtYmVyIG9mIGRheXMgaGF2aW5nIGJlZW4gYWxsb3dlZCBpbiB3aGljaCB0aGUgU3lyYWN1c2FucyBtaWdodCBwcmVwYXJlIGZvciBoaXMgZnVuZXJhbCwgd2hpbGUgdGhlIGNvdW50cnkgZm9sayBhbmQgc3RyYW5nZXJzIGNhbWUgdG9nZXRoZXIsIHRoZSB3aG9sZSBjZXJlbW9ueSB3YXMgY29uZHVjdGVkIHdpdGggZ3JlYXQgbWFnbmlmaWNlbmNlLCBhbmQgYmVzaWRlcywgeW91bmcgbWVuIHNlbGVjdGVkIGJ5IGxvdCBjYXJyaWVkIGhpcyBiaWVyIHdpdGggYWxsIGl0cyBkZWNvcmF0aW9ucyB0aHJvdWdoIHRoZSBwcmVjaW5jdCB3aGVyZSB0aGUgcGFsYWNlIG9mIERpb255c2l1cyBoYWQgc3Rvb2QgYmVmb3JlIFRpbW9sZW9uIGRlc3Ryb3llZCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGJpZXIgd2FzIGVzY29ydGVkLCB0b28sIGJ5IG1hbnkgdGhvdXNhbmRzIG9mIG1lbiBhbmQgd29tZW4sIHdob3NlIGFwcGVhcmFuY2Ugd2FzIG9uZSB0aGF0IGJlY2F1c2UgYSBmZXN0aXZhbCwgc2luY2UgYWxsIHdlcmUgY3Jvd25lZCB3aXRoIGdhcmxhbmRzIGFuZCB3b3JlIHdoaXRlIHJhaW1lbnQ7IHdoaWxlIGNyaWVzIGFuZCB0ZWFycywgbWluZ2xlZCB3aXRoIGJlbmVkaWN0aW9ucyB1cG9uIHRoZSBkZWFkLCBiZXRva2VuZWQsIG5vdCBhIGZvcm1hbCB0cmlidXRlIG9mIHJlc3BlY3QsIG5vciBhIHNlcnZpY2UgcGVyZm9ybWVkIGluIG9iZWRpZW5jZSB0byBwdWJsaWMgZGVjcmVlLCBidXQgYSBqdXN0IHNvcnJvdyBhbmQgYSB0aGFua2Z1bG5lc3MgYXJpc2luZyBmcm9tIGdlbnVpbmUgZ29vZCB3aWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZmluYWxseSwgd2hlbiB0aGUgYmllciBoYWQgYmVlbiBwbGFjZWQgdXBvbiB0aGUgZnVuZXJhbCBweXJlLCBEZW1ldHJpdXMsIHdobyBoYWQgdGhlIGxvdWRlc3Qgdm9pY2Ugb2YgYW55IGhlcmFsZCBvZiB0aGUgdGltZSwgcmVhZCBmcm9tIG1hbnVzY3JpcHQgdGhlIGZvbGxvd2luZyBkZWNyZWU64oCUCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CeSB0aGUgcGVvcGxlIG9mIFN5cmFjdXNlLCBUaW1vbGVvbiwgc29uIG9mIFRpbW9kZW11cywgZnJvbSBDb3JpbnRoLCBpcyBoZXJlIGJ1cmllZCBhdCBhIHB1YmxpYyBjb3N0IG9mIHR3byBodW5kcmVkIG1pbmFzLCBhbmQgaXMgaG9ub3VyZWQgZm9yIGFsbCB0aW1lIHdpdGggYW5udWFsIGNvbnRlc3RzLCBtdXNpY2FsLCBlcXVlc3RyaWFuLCBhbmQgZ3ltbmFzdGljLCBiZWNhdXNlIGhlIG92ZXJ0aHJldyB0aGUgdHlyYW50cywgc3ViZHVlZCB0aGUgQmFyYmFyaWFucywgcmUtcGVvcGxlZCB0aGUgbGFyZ2VzdCBvZiB0aGUgZGV2YXN0YXRlZCBjaXRpZXMsIGFuZCB0aGVuIHJlc3RvcmVkIHRoZWlyIGxhd3MgdG8gdGhlIEdyZWVrcyBvZiBTaWNpbHkuPC9xPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlGdXJ0aGVybW9yZSwgdGhleSBidXJpZWQgaGlzIGFzaGVzIGluIHRoZSBtYXJrZXQgcGxhY2UsIGFuZCBhZnRlcndhcmRzLCB3aGVuIHRoZXkgaGFkIHN1cnJvdW5kZWQgaXQgd2l0aCBwb3J0aWNvZXMgYW5kIGJ1aWx0IHBhbGFlc3RyYXMgaW4gaXQsIHRoZXkgc2V0IGl0IGFwYXJ0IGFzIGEgZ3ltbmFzaXVtIGZvciB0aGVpciB5b3VuZyBtZW4sIGFuZCBuYW1lZCBpdCBUaW1vbGVvbnRldW0uIEFuZCB0aGV5IHRoZW1zZWx2ZXMsIHVzaW5nIHRoZSBjaXZpbCBwb2xpdHkgYW5kIHRoZSBsYXdzIHdoaWNoIGhlIGhhZCBvcmRhaW5lZCwgZW5qb3llZCBhIGxvbmcgY291cnNlIG9mIHVuYnJva2VuIHByb3NwZXJpdHkgYW5kIGhhcHBpbmVzcy4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2hlcmlzaGVkIGluIG9sZCBhZ2UgYW1pZCBzdWNoIGhvbm91ciBhbmQgZ29vZCB3aWxsLCBsaWtlIGEgY29tbW9uIGZhdGhlciwgYSBzbGlnaHQgY2F1c2UgY28tb3BlcmF0ZWQgd2l0aCBoaXMgZ3JlYXQgYWdlIHRvIGJyaW5nIGhpbSB0byBoaXMgZW5kLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzM3IG9yIDMzNiBCLkMuPC9ub3RlPiAgQSBudW1iZXIgb2YgZGF5cyBoYXZpbmcgYmVlbiBhbGxvd2VkIGluIHdoaWNoIHRoZSBTeXJhY3VzYW5zIG1pZ2h0IHByZXBhcmUgZm9yIGhpcyBmdW5lcmFsLCB3aGlsZSB0aGUgY291bnRyeSBmb2xrIGFuZCBzdHJhbmdlcnMgY2FtZSB0b2dldGhlciwgdGhlIHdob2xlIGNlcmVtb255IHdhcyBjb25kdWN0ZWQgd2l0aCBncmVhdCBtYWduaWZpY2VuY2UsIGFuZCBiZXNpZGVzLCB5b3VuZyBtZW4gc2VsZWN0ZWQgYnkgbG90IGNhcnJpZWQgaGlzIGJpZXIgd2l0aCBhbGwgaXRzIGRlY29yYXRpb25zIHRocm91Z2ggdGhlIHByZWNpbmN0IHdoZXJlIHRoZSBwYWxhY2Ugb2YgRGlvbnlzaXVzIGhhZCBzdG9vZCBiZWZvcmUgVGltb2xlb24gZGVzdHJveWVkIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBiaWVyIHdhcyBlc2NvcnRlZCwgdG9vLCBieSBtYW55IHRob3VzYW5kcyBvZiBtZW4gYW5kIHdvbWVuLCB3aG9zZSBhcHBlYXJhbmNlIHdhcyBvbmUgdGhhdCBiZWNhdXNlIGEgZmVzdGl2YWwsIHNpbmNlIGFsbCB3ZXJlIGNyb3duZWQgd2l0aCBnYXJsYW5kcyBhbmQgd29yZSB3aGl0ZSByYWltZW50OyB3aGlsZSBjcmllcyBhbmQgdGVhcnMsIG1pbmdsZWQgd2l0aCBiZW5lZGljdGlvbnMgdXBvbiB0aGUgZGVhZCwgYmV0b2tlbmVkLCBub3QgYSBmb3JtYWwgdHJpYnV0ZSBvZiByZXNwZWN0LCBub3IgYSBzZXJ2aWNlIHBlcmZvcm1lZCBpbiBvYmVkaWVuY2UgdG8gcHVibGljIGRlY3JlZSwgYnV0IGEganVzdCBzb3Jyb3cgYW5kIGEgdGhhbmtmdWxuZXNzIGFyaXNpbmcgZnJvbSBnZW51aW5lIGdvb2Qgd2lsbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCB3aGVuIHRoZSBiaWVyIGhhZCBiZWVuIHBsYWNlZCB1cG9uIHRoZSBmdW5lcmFsIHB5cmUsIERlbWV0cml1cywgd2hvIGhhZCB0aGUgbG91ZGVzdCB2b2ljZSBvZiBhbnkgaGVyYWxkIG9mIHRoZSB0aW1lLCByZWFkIGZyb20gbWFudXNjcmlwdCB0aGUgZm9sbG93aW5nIGRlY3JlZTrigJQKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnkgdGhlIHBlb3BsZSBvZiBTeXJhY3VzZSwgVGltb2xlb24sIHNvbiBvZiBUaW1vZGVtdXMsIGZyb20gQ29yaW50aCwgaXMgaGVyZSBidXJpZWQgYXQgYSBwdWJsaWMgY29zdCBvZiB0d28gaHVuZHJlZCBtaW5hcywgYW5kIGlzIGhvbm91cmVkIGZvciBhbGwgdGltZSB3aXRoIGFubnVhbCBjb250ZXN0cywgbXVzaWNhbCwgZXF1ZXN0cmlhbiwgYW5kIGd5bW5hc3RpYywgYmVjYXVzZSBoZSBvdmVydGhyZXcgdGhlIHR5cmFudHMsIHN1YmR1ZWQgdGhlIEJhcmJhcmlhbnMsIHJlLXBlb3BsZWQgdGhlIGxhcmdlc3Qgb2YgdGhlIGRldmFzdGF0ZWQgY2l0aWVzLCBhbmQgdGhlbiByZXN0b3JlZCB0aGVpciBsYXdzIHRvIHRoZSBHcmVla3Mgb2YgU2ljaWx5LjwvcT4KCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
