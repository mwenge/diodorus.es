var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = document.getElementsByClassName(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIHRoZSBjaGllZiBkZWVkIG9mIFJvbXVsdXMgd2FzIHRoZSBzbGF5aW5nIG9mIGEgc2luZ2xlIHR5cmFudCBvZiBBbGJhOyB3aGVyZWFzIGZvciBtZXJlIGJ5LWFkdmVudHVyZXMgYW5kIHByZWxpbWluYXJ5IHN0cnVnZ2xlcyBUaGVzZXVzIGhhZCBTY2lyb24sIFNpbmlzLCBQcm9jcnVzdGVzLCBhbmQgQ29yeW5ldGVzLCBieSBzbGF5aW5nIGFuZCBjaGFzdGlzaW5nIHdob20gaGUgZnJlZWQgR3JlZWNlIGZyb20gZHJlYWRmdWwgdHlyYW50cyBiZWZvcmUgdGhvc2Ugd2hvIHdlcmUgc2F2ZWQgYnkgaGltIGtuZXcgd2hvIGhlIHdhcy4gVGhlc2V1cyBtaWdodCBoYXZlIHRyYXZlbGxlZCB0byBBdGhlbnMgYnkgc2VhIHdpdGhvdXQgYW55IHRyb3VibGUsIGFuZCBzdWZmZXJpbmcgbm8gb3V0cmFnZSBhdCB0aGUgaGFuZHMgb2YgdGhvc2Ugcm9iYmVyczsgd2hlcmVhcyBSb211bHVzIGNvdWxkIG5vdCBiZSB3aXRob3V0IHRyb3VibGUgd2hpbGUgQW11bGl1cyBsaXZlZC4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVyZSBpcyBzdHJvbmcgcHJvb2Ygb2YgdGhpczsgZm9yIFRoZXNldXMsIGFsdGhvdWdoIGhlIGhhZCBzdWZmZXJlZCBubyB3cm9uZyBhdCB0aGVpciBoYW5kcyBoaW1zZWxmLCBzYWxsaWVkIG91dCBpbiBiZWhhbGYgb2Ygb3RoZXJzIGFnYWluc3QgdGhvc2UgbWlzY3JlYW50czsgd2hpbGUgUm9tdWx1cyBhbmQgUmVtdXMsIGFzIGxvbmcgYXMgdGhleSB0aGVtc2VsdmVzIHdlcmUgbm90IGhhcm1lZCBieSB0aGUgdHlyYW50LCBzdWZmZXJlZCBoaW0gdG8gd3JvbmcgZXZlcnlib2R5IGVsc2UuIEFuZCBzdXJlbHksIGlmIGl0IHdhcyBhIGdyZWF0IHRoaW5nIGZvciBSb211bHVzIHRvIGJlIHdvdW5kZWQgaW4gYSBiYXR0bGUgd2l0aCB0aGUgU2FiaW5lcywgYW5kIHRvIHNsYXkgQWNyb24sIGFuZCB0byBjb25xdWVyIG1hbnkgZW5lbWllcyBpbiBiYXR0bGUsIHdpdGggdGhlc2UgZXhwbG9pdHMgd2UgbWF5IGNvbXBhcmUsIG9uIHRoZSBwYXJ0IG9mIFRoZXNldXMsIGhpcyBiYXR0bGUgd2l0aCB0aGUgQ2VudGF1cnMgYW5kIGhpcyBjYW1wYWlnbiBhZ2FpbnN0IHRoZSBBbWF6b25zOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhcyBmb3IgdGhlIGRhcmluZyB3aGljaCBoZSBzaG93ZWQgYWJvdXQgdGhlIENyZXRhbiB0cmlidXRlLCB3aGV0aGVyIHRoYXQgd2FzIGZvb2QgZm9yIHNvbWUgbW9uc3Rlciwgb3IgYSBzYWNyaWZpY2Ugb24gdGhlIHRvbWIgb2YgQW5kcm9nZW9zLCBvciB3aGV0aGVy4oCUYW5kIHRoaXMgaXMgdGhlIG1pbGRlc3QgZm9ybSBvZiB0aGUgc3RvcnnigJQgaGUgb2ZmZXJlZCBoaW1zZWxmIGZvciBpbmdsb3Jpb3VzIGFuZCBkaXNob25vdXJhYmxlIHNlcnZpdHVkZSBhbW9uZyBpbnNvbGVudCBhbmQgY3J1ZWwgbWVuIHdoZW4gaGUgdm9sdW50ZWVyZWQgdG8gc2FpbCBhd2F5IHdpdGggbWFpZGVucyBhbmQgeW91bmcgYm95cywgd29yZHMgY2Fubm90IGRlcGljdCBzdWNoIGNvdXJhZ2UsIG1hZ25hbmltaXR5LCByaWdodGVvdXMgemVhbCBmb3IgdGhlIGNvbW1vbiBnb29kLCBvciB5ZWFybmluZyBmb3IgZ2xvcnkgYW5kIHZpcnR1ZS4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHRoZXJlZm9yZSBteSBvcGluaW9uIHRoYXQgdGhlIHBoaWxvc29wZXJzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qb2xlbW9uLCBhcyBjaXRlZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDc4MGQiPk1vcmFscywgcC4gNzgwIGQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGdpdmUgYW4gZXhjZWxsZW50IGRlZmluaXRpb24gb2YgbG92ZSB3aGVuIHRoZXkgY2FsbCBpdCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDc4MGQiPk1vcmFscywgcC4gNzgwIGQuPC9iaWJsPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmEgbWluaXN0cmF0aW9uIG9mIHRoZSBnb2RzIGZvciB0aGUgY2FyZSBhbmQgcHJlc2VydmF0aW9uIG9mIHRoZSB5b3VuZy48L3E+IEZvciBBcmlhZG5lJ3MgbG92ZSBzZWVtcyB0byBoYXZlIGJlZW4sIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlLCBhIGdvZCdzIHdvcmssIGFuZCBhIGRldmljZSB3aGVyZWJ5IFRoZXNldXMgc2hvdWxkIGJlIHNhdmVkLiBBbmQgd2Ugc2hvdWxkIG5vdCBibGFtZSBoZXIgZm9yIGxvdmluZyBoaW0sIGJ1dCByYXRoZXIgd29uZGVyIHRoYXQgYWxsIG1lbiBhbmQgd29tZW4gd2VyZSBub3QgdGh1cyBhZmZlY3RlZCB0b3dhcmRzIGhpbTsgYW5kIGlmIHNoZSBhbG9uZSBmZWx0IHRoaXMgcGFzc2lvbiwgSSBzaG91bGQgc2F5LCBmb3IgbXkgcGFydCwgdGhhdCBzaGUgd2FzIHByb3Blcmx5IHdvcnRoeSBvZiBhIGdvZCdzIGxvdmUsIHNpbmNlIHNoZSB3YXMgZm9uZCBvZiB2aXJ0dWUsIGZvbmQgb2YgZ29vZG5lc3MsIGFuZCBhIGxvdmVyIG9mIHRoZSBoaWdoZXN0IHF1YWxpdGllcyBpbiBtYW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWx0aG91Z2ggVGhlc2V1cyBhbmQgUm9tdWx1cyB3ZXJlIGJvdGggc3RhdGVzbWVuIGJ5IG5hdHVyZSwgbmVpdGhlciBtYWludGFpbmVkIHRvIHRoZSBlbmQgdGhlIHRydWUgY2hhcmFjdGVyIG9mIGEga2luZywgYnV0IGJvdGggZGV2aWF0ZWQgZnJvbSBpdCBhbmQgdW5kZXJ3ZW50IGEgY2hhbmdlLCB0aGUgZm9ybWVyIGluIHRoZSBkaXJlY3Rpb24gb2YgZGVtb2NyYWN5LCB0aGUgbGF0dGVyIGluIHRoZSBkaXJlY3Rpb24gb2YgdHlyYW5ueSwgbWFraW5nIHRodXMgdGhlIHNhbWUgbWlzdGFrZSB0aHJvdWdoIG9wcG9zaXRlIGFmZmVjdGlvbnMuIEZvciB0aGUgcnVsZXIgbXVzdCBwcmVzZXJ2ZSBmaXJzdCBvZiBhbGwgdGhlIHJlYWxtIGl0c2VsZiwgYW5kIHRoaXMgaXMgcHJlc2VydmVkIG5vIGxlc3MgYnkgcmVmcmFpbmluZyBmcm9tIHdoYXQgaXMgdW5iZWNvbWluZyB0aGFuIGJ5IGNsZWF2aW5nIHRvIHdoYXQgaXMgYmVjb21pbmcuCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIHdobyByZW1pdHMgb3IgZXh0ZW5kcyBoaXMgYXV0aG9yaXR5IGlzIG5vIGxvbmdlciBhIGtpbmcgb3IgYSBydWxlcjsgaGUgYmVjb21lcyBlaXRoZXIgYSBkZW1hZ29ndWUgb3IgYSBkZXNwb3QsIGFuZCBpbXBsYW50cyBoYXRyZWQgb3IgY29udGVtcHQgaW4gdGhlIGhlYXJ0cyBvZiBoaXMgc3ViamVjdHMuIEhvd2V2ZXIsIHRoZSBmaXJzdCBlcnJvciBzZWVtcyB0byBhcmlzZSBmcm9tIGtpbmRsaW5lc3MgYW5kIGh1bWFuaXR5OyB0aGUgc2Vjb25kIGZyb20gc2VsZmlzaG5lc3MgYW5kIHNldmVyaXR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbHRob3VnaCBUaGVzZXVzIGFuZCBSb211bHVzIHdlcmUgYm90aCBzdGF0ZXNtZW4gYnkgbmF0dXJlLCBuZWl0aGVyIG1haW50YWluZWQgdG8gdGhlIGVuZCB0aGUgdHJ1ZSBjaGFyYWN0ZXIgb2YgYSBraW5nLCBidXQgYm90aCBkZXZpYXRlZCBmcm9tIGl0IGFuZCB1bmRlcndlbnQgYSBjaGFuZ2UsIHRoZSBmb3JtZXIgaW4gdGhlIGRpcmVjdGlvbiBvZiBkZW1vY3JhY3ksIHRoZSBsYXR0ZXIgaW4gdGhlIGRpcmVjdGlvbiBvZiB0eXJhbm55LCBtYWtpbmcgdGh1cyB0aGUgc2FtZSBtaXN0YWtlIHRocm91Z2ggb3Bwb3NpdGUgYWZmZWN0aW9ucy4gRm9yIHRoZSBydWxlciBtdXN0IHByZXNlcnZlIGZpcnN0IG9mIGFsbCB0aGUgcmVhbG0gaXRzZWxmLCBhbmQgdGhpcyBpcyBwcmVzZXJ2ZWQgbm8gbGVzcyBieSByZWZyYWluaW5nIGZyb20gd2hhdCBpcyB1bmJlY29taW5nIHRoYW4gYnkgY2xlYXZpbmcgdG8gd2hhdCBpcyBiZWNvbWluZy4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSB3aG8gcmVtaXRzIG9yIGV4dGVuZHMgaGlzIGF1dGhvcml0eSBpcyBubyBsb25nZXIgYSBraW5nIG9yIGEgcnVsZXI7IGhlIGJlY29tZXMgZWl0aGVyIGEgZGVtYWdvZ3VlIG9yIGEgZGVzcG90LCBhbmQgaW1wbGFudHMgaGF0cmVkIG9yIGNvbnRlbXB0IGluIHRoZSBoZWFydHMgb2YgaGlzIHN1YmplY3RzLiBIb3dldmVyLCB0aGUgZmlyc3QgZXJyb3Igc2VlbXMgdG8gYXJpc2UgZnJvbSBraW5kbGluZXNzIGFuZCBodW1hbml0eTsgdGhlIHNlY29uZCBmcm9tIHNlbGZpc2huZXNzIGFuZCBzZXZlcml0eS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4gSUlJLiBBZ2FpbiwgaWYgdGhlIG1pc2ZvcnR1bmVzIG9mIG1lbiBhcmUgbm90IHRvIGJlIGF0dHJpYnV0ZWQgYWx0b2dldGhlciB0byBmb3J0dW5lLCBidXQgdG8gdGhlIGRpZmZlcmVudCBoYWJpdHMgYW5kIHBhc3Npb25zIHdoaWNoIHdpbGwgYmUgZm91bmQgdW5kZXJseWluZyB0aGVtLCB0aGVuIG5vIG9uZSBzaGFsbCBhY3F1aXQgUm9tdWx1cyBvZiB1bnJlYXNvbmluZyBhbmdlciBvciBoYXN0eSBhbmQgc2Vuc2VsZXNzIHdyYXRoIGluIGRlYWxpbmcgd2l0aCBoaXMgYnJvdGhlciwgbm9yIFRoZXNldXMgaW4gZGVhbGluZyB3aXRoIGhpcyBzb24sIGFsdGhvdWdoIHRoZSBjYXVzZSB3aGljaCBzdGlycmVkIGhpcyBhbmdlciBsZWFkcyB1cyB0byBiZSBtb3JlIGxlbmllbnQgdG93YXJkcyB0aGUgb25lIHdobyB3YXMgb3ZlcnRocm93biBieSBhIHN0cm9uZ2VyIHByb3ZvY2F0aW9uLCBhcyBieSBhIGhlYXZpZXIgYmxvdy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHNpbmNlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gUm9tdWx1cyBhbmQgaGlzIGJyb3RoZXIgYXJvc2UgZnJvbSBhIGRlbGliZXJhdGUgaW52ZXN0aWdhdGlvbiBvZiB0aGUgY29tbW9uIHdlbGZhcmUsIHRoZXJlIGNvdWxkIGhhdmUgYmVlbiBubyBnb29kIHJlYXNvbiBmb3IgaGlzIGZseWluZyBpbnRvIHN1Y2ggYSBwYXNzaW9uOyB3aGlsZSBUaGVzZXVzIHdhcyBpbXBlbGxlZCB0byB3cm9uZyBoaXMgc29uIGJ5IGxvdmUsIGplYWxvdXN5LCBhbmQgYSB3b21hbidzIHNsYW5kZXJzLCB0aGUgb3Zlcm1hc3RlcmluZyBwb3dlciBvZiB3aGljaCB2ZXJ5IGZldyBtZW4gaGF2ZSBlc2NhcGVkLiBBbmQgd2hhdCBpcyBvZiBncmVhdGVyIHdlaWdodCwgdGhlIGFuZ2VyIG9mIFJvbXVsdXMgdmVudGVkIGl0c2VsZiBpbiBhY3Rpb24gYW5kIGEgZGVlZCBvZiBtb3N0IHVuZm9ydHVuYXRlIGlzc3VlOyB3aGVyZWFzIHRoZSB3cmF0aCBvZiBUaGVzZXVzIGdvdCBubyBmYXJ0aGVyIHRoYW4gd29yZHMgb2YgYWJ1c2UgYW5kIGFuIG9sZCBtYW4ncyBjdXJzZSwgYW5kIHRoZSByZXN0IG9mIHRoZSB5b3V0aCdzIGNhbGFtaXRpZXMgc2VlbSB0byBoYXZlIGJlZW4gZHVlIHRvIGZvcnR1bmUuIE9uIHRoZXNlIGNvdW50cywgdGhlcmVmb3JlLCBvbmUgd291bGQgZ2l2ZSBoaXMgdm90ZSBvZiBwcmVmZXJlbmNlIHRvIFRoZXNldXMuIAoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4gSUlJLiBBZ2FpbiwgaWYgdGhlIG1pc2ZvcnR1bmVzIG9mIG1lbiBhcmUgbm90IHRvIGJlIGF0dHJpYnV0ZWQgYWx0b2dldGhlciB0byBmb3J0dW5lLCBidXQgdG8gdGhlIGRpZmZlcmVudCBoYWJpdHMgYW5kIHBhc3Npb25zIHdoaWNoIHdpbGwgYmUgZm91bmQgdW5kZXJseWluZyB0aGVtLCB0aGVuIG5vIG9uZSBzaGFsbCBhY3F1aXQgUm9tdWx1cyBvZiB1bnJlYXNvbmluZyBhbmdlciBvciBoYXN0eSBhbmQgc2Vuc2VsZXNzIHdyYXRoIGluIGRlYWxpbmcgd2l0aCBoaXMgYnJvdGhlciwgbm9yIFRoZXNldXMgaW4gZGVhbGluZyB3aXRoIGhpcyBzb24sIGFsdGhvdWdoIHRoZSBjYXVzZSB3aGljaCBzdGlycmVkIGhpcyBhbmdlciBsZWFkcyB1cyB0byBiZSBtb3JlIGxlbmllbnQgdG93YXJkcyB0aGUgb25lIHdobyB3YXMgb3ZlcnRocm93biBieSBhIHN0cm9uZ2VyIHByb3ZvY2F0aW9uLCBhcyBieSBhIGhlYXZpZXIgYmxvdy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBzaW5jZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFJvbXVsdXMgYW5kIGhpcyBicm90aGVyIGFyb3NlIGZyb20gYSBkZWxpYmVyYXRlIGludmVzdGlnYXRpb24gb2YgdGhlIGNvbW1vbiB3ZWxmYXJlLCB0aGVyZSBjb3VsZCBoYXZlIGJlZW4gbm8gZ29vZCByZWFzb24gZm9yIGhpcyBmbHlpbmcgaW50byBzdWNoIGEgcGFzc2lvbjsgd2hpbGUgVGhlc2V1cyB3YXMgaW1wZWxsZWQgdG8gd3JvbmcgaGlzIHNvbiBieSBsb3ZlLCBqZWFsb3VzeSwgYW5kIGEgd29tYW4ncyBzbGFuZGVycywgdGhlIG92ZXJtYXN0ZXJpbmcgcG93ZXIgb2Ygd2hpY2ggdmVyeSBmZXcgbWVuIGhhdmUgZXNjYXBlZC4gQW5kIHdoYXQgaXMgb2YgZ3JlYXRlciB3ZWlnaHQsIHRoZSBhbmdlciBvZiBSb211bHVzIHZlbnRlZCBpdHNlbGYgaW4gYWN0aW9uIGFuZCBhIGRlZWQgb2YgbW9zdCB1bmZvcnR1bmF0ZSBpc3N1ZTsgd2hlcmVhcyB0aGUgd3JhdGggb2YgVGhlc2V1cyBnb3Qgbm8gZmFydGhlciB0aGFuIHdvcmRzIG9mIGFidXNlIGFuZCBhbiBvbGQgbWFuJ3MgY3Vyc2UsIGFuZCB0aGUgcmVzdCBvZiB0aGUgeW91dGgncyBjYWxhbWl0aWVzIHNlZW0gdG8gaGF2ZSBiZWVuIGR1ZSB0byBmb3J0dW5lLiBPbiB0aGVzZSBjb3VudHMsIHRoZXJlZm9yZSwgb25lIHdvdWxkIGdpdmUgaGlzIHZvdGUgb2YgcHJlZmVyZW5jZSB0byBUaGVzZXVzLiAKCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgUm9tdWx1cyBoYXMsIGluIHRoZSBmaXJzdCBwbGFjZSwgdGhpcyBncmVhdCBzdXBlcmlvcml0eSwgdGhhdCBoZSByb3NlIHRvIGVtaW5lbmNlIGZyb20gdGhlIHNtYWxsZXN0IGJlZ2lubmluZ3MuIEZvciBoZSBhbmQgaGlzIGJyb3RoZXIgd2VyZSByZXB1dGVkIHRvIGJlIHNsYXZlcyBhbmQgc29ucyBvZiBzd2luZWhlcmRzLCBhbmQgeWV0IHRoZXkgbm90IG9ubHkgbWFkZSB0aGVtc2VsdmVzIGZyZWUsIGJ1dCBmcmVlZCBmaXJzdCBhbG1vc3QgYWxsIHRoZSBMYXRpbnMsIGVuam95aW5nIGF0IG9uZSBhbmQgdGhlIHNhbWUgdGltZSBzdWNoIG1vc3QgaG9ub3VyYWJsZSB0aXRsZXMgYXMgc2xheWVycyBvZiB0aGVpciBmb2VzLCBzYXZpb3VycyBvZiB0aGVpciBraW5kcmVkIGFuZCBmcmllbmRzLCBraW5ncyBvZiByYWNlcyBhbmQgcGVvcGxlcywgZm91bmRlcnMgb2YgY2l0aWVzOyBub3QgdHJhbnNwbGFudGVycywgYXMgVGhlc2V1cyB3YXMsIHdobyBwdXQgdG9nZXRoZXIgYW5kIGNvbnNvbGlkYXRlZCBvbmUgZHdlbGxpbmctcGxhY2Ugb3V0IG9mIG1hbnksIGJ1dCBkZW1vbGlzaGVkIG1hbnkgY2l0aWVzIGJlYXJpbmcgdGhlIG5hbWVzIG9mIGFuY2llbnQga2luZ3MgYW5kIGhlcm9lcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Um9tdWx1cywgaXQgaXMgdHJ1ZSwgZGlkIHRoaXMgbGF0ZXIsIGNvbXBlbGxpbmcgaGlzIGVuZW1pZXMgdG8gdGVhciBkb3duIGFuZCBvYmxpdGVyYXRlIHRoZWlyIGR3ZWxsaW5ncyBhbmQgZW5yb2wgdGhlbXNlbHZlcyBhbW9uZyB0aGVpciBjb25xdWVyb3JzOyBidXQgYXQgZmlyc3QsIG5vdCBieSByZW1vdmluZyBvciBlbmxhcmdpbmcgYSBjaXR5IHdoaWNoIGFscmVhZHkgZXhpc3RlZCwgYnV0IGJ5IGNyZWF0aW5nIG9uZSBmcm9tIG5vdGhpbmcsIGFuZCBieSBhY3F1aXJpbmcgZm9yIGhpbXNlbGYgYXQgb25jZSB0ZXJyaXRvcnksIGNvdW50cnksIGtpbmdkb20sIGNsYW5zLCBtYXJyaWFnZXMgYW5kIHJlbGF0aW9uc2hpcHMsIGhlIHJ1aW5lZCBubyBvbmUgYW5kIGtpbGxlZCBubyBvbmUsIGJ1dCB3YXMgYSBiZW5lZmFjdG9yIG9mIG1lbiB3aXRob3V0IGhvbWVzIGFuZCBoZWFydGhzLCB3aG8gd2lzaGVkIGluc3RlYWQgdG8gYmUgYSBwZW9wbGUgYW5kIGNpdGl6ZW5zIG9mIGEgY29tbW9uIGNpdHkuIFJvYmJlcnMgYW5kIG1pc2NyZWFudHMsIGl0IGlzIHRydWUsIGhlIGRpZCBub3Qgc2xheSwgYnV0IGhlIHN1YmR1ZWQgbmF0aW9ucyBpbiB3YXIsIGxhaWQgY2l0aWVzIGxvdywgYW5kIHRyaXVtcGhlZCBvdmVyIGtpbmdzIGFuZCBjb21tYW5kZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgUm9tdWx1cyBoYXMsIGluIHRoZSBmaXJzdCBwbGFjZSwgdGhpcyBncmVhdCBzdXBlcmlvcml0eSwgdGhhdCBoZSByb3NlIHRvIGVtaW5lbmNlIGZyb20gdGhlIHNtYWxsZXN0IGJlZ2lubmluZ3MuIEZvciBoZSBhbmQgaGlzIGJyb3RoZXIgd2VyZSByZXB1dGVkIHRvIGJlIHNsYXZlcyBhbmQgc29ucyBvZiBzd2luZWhlcmRzLCBhbmQgeWV0IHRoZXkgbm90IG9ubHkgbWFkZSB0aGVtc2VsdmVzIGZyZWUsIGJ1dCBmcmVlZCBmaXJzdCBhbG1vc3QgYWxsIHRoZSBMYXRpbnMsIGVuam95aW5nIGF0IG9uZSBhbmQgdGhlIHNhbWUgdGltZSBzdWNoIG1vc3QgaG9ub3VyYWJsZSB0aXRsZXMgYXMgc2xheWVycyBvZiB0aGVpciBmb2VzLCBzYXZpb3VycyBvZiB0aGVpciBraW5kcmVkIGFuZCBmcmllbmRzLCBraW5ncyBvZiByYWNlcyBhbmQgcGVvcGxlcywgZm91bmRlcnMgb2YgY2l0aWVzOyBub3QgdHJhbnNwbGFudGVycywgYXMgVGhlc2V1cyB3YXMsIHdobyBwdXQgdG9nZXRoZXIgYW5kIGNvbnNvbGlkYXRlZCBvbmUgZHdlbGxpbmctcGxhY2Ugb3V0IG9mIG1hbnksIGJ1dCBkZW1vbGlzaGVkIG1hbnkgY2l0aWVzIGJlYXJpbmcgdGhlIG5hbWVzIG9mIGFuY2llbnQga2luZ3MgYW5kIGhlcm9lcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlJvbXVsdXMsIGl0IGlzIHRydWUsIGRpZCB0aGlzIGxhdGVyLCBjb21wZWxsaW5nIGhpcyBlbmVtaWVzIHRvIHRlYXIgZG93biBhbmQgb2JsaXRlcmF0ZSB0aGVpciBkd2VsbGluZ3MgYW5kIGVucm9sIHRoZW1zZWx2ZXMgYW1vbmcgdGhlaXIgY29ucXVlcm9yczsgYnV0IGF0IGZpcnN0LCBub3QgYnkgcmVtb3Zpbmcgb3IgZW5sYXJnaW5nIGEgY2l0eSB3aGljaCBhbHJlYWR5IGV4aXN0ZWQsIGJ1dCBieSBjcmVhdGluZyBvbmUgZnJvbSBub3RoaW5nLCBhbmQgYnkgYWNxdWlyaW5nIGZvciBoaW1zZWxmIGF0IG9uY2UgdGVycml0b3J5LCBjb3VudHJ5LCBraW5nZG9tLCBjbGFucywgbWFycmlhZ2VzIGFuZCByZWxhdGlvbnNoaXBzLCBoZSBydWluZWQgbm8gb25lIGFuZCBraWxsZWQgbm8gb25lLCBidXQgd2FzIGEgYmVuZWZhY3RvciBvZiBtZW4gd2l0aG91dCBob21lcyBhbmQgaGVhcnRocywgd2hvIHdpc2hlZCBpbnN0ZWFkIHRvIGJlIGEgcGVvcGxlIGFuZCBjaXRpemVucyBvZiBhIGNvbW1vbiBjaXR5LiBSb2JiZXJzIGFuZCBtaXNjcmVhbnRzLCBpdCBpcyB0cnVlLCBoZSBkaWQgbm90IHNsYXksIGJ1dCBoZSBzdWJkdWVkIG5hdGlvbnMgaW4gd2FyLCBsYWlkIGNpdGllcyBsb3csIGFuZCB0cml1bXBoZWQgb3ZlciBraW5ncyBhbmQgY29tbWFuZGVycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcywgdGhlcmUgaXMgZGlzcHV0ZSBhcyB0byB3aG8gYWN0dWFsbHkgc2xldyBSZW11cywgYW5kIG1vc3Qgb2YgdGhlIGJsYW1lIGZvciB0aGUgZGVlZCBpcyBwdXQgdXBvbiBvdGhlcnMgdGhhbiBSb211bHVzOyBidXQgUm9tdWx1cyBkaWQgdW5xdWVzdGlvbmFibHkgc2F2ZSBoaXMgbW90aGVyIGZyb20gZGVzdHJ1Y3Rpb24sIGFuZCBoZSBzZXQgaGlzIGdyYW5kZmF0aGVyLCB3aG8gd2FzIGxpdmluZyBpbiBpbmdsb3Jpb3VzIGFuZCBkaXNob25vdXJhYmxlIHN1YmplY3Rpb24gdXBvbiB0aGUgdGhyb25lIG9mIEFlbmVhcy4gTW9yZW92ZXIsIGhlIGRpZCBoaW0gbWFueSBmYXZvdXJzIG9mIGhpcyBvd24gYWNjb3JkLCBhbmQgZGlkIGhpbSBubyBoYXJtIG5vdCBldmVuIGluYWR2ZXJ0ZW50bHkuIFRoZXNldXMsIG9uIHRoZSBjb250cmFyeSwgZm9yIGhpcyBmb3JnZXRmdWxuZXNzIGFuZCBuZWdsZWN0IG9mIHRoZSBjb21tYW5kIGFib3V0IHRoZSBzYWlsLCBjYW4gaGFyZGx5LCBJIHRoaW5rLCBlc2NhcGUgdGhlIGNoYXJnZSBvZiBwYXJyaWNpZGUsIGJlIHRoZSBwbGVhIG9mIGhpcyBhZHZvY2F0ZSBldmVyIHNvIGxvbmcgYW5kIGhpcyBqdWRnZXMgZXZlciBzbyBsZW5pZW50LiBJbmRlZWQsIGEgY2VydGFpbiBBdHRpYyB3cml0ZXIsIGNvbnNjaW91cyB0aGF0IHdvdWxkLWJlIGRlZmVuZGVycyBvZiBUaGVzZXVzIGhhdmUgYSBkaWZmaWN1bHQgdGFzaywgZmVpZ25zIHRoYXQgQWVnZXVzLCBvbiB0aGUgYXBwcm9hY2ggb2YgdGhlIHNoaXAsIHJhbiB1cCB0byB0aGUgYWNyb3BvbGlzIGluIGhpcyBlYWdlcm5lc3MgdG8gY2F0Y2ggc2lnaHQgb2YgaGVyLCBhbmQgc3R1bWJsZWQgYW5kIGZlbGwgZG93biB0aGUgY2xpZmY7IGFzIHRob3VnaCBoZSB3ZXJlIHdpdGhvdXQgYSByZXRpbnVlLCBvciB3YXMgaHVycnlpbmcgZG93biB0byB0aGUgc2VhIHdpdGhvdXQgYW55IHNlcnZhbnRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzLCB0aGVyZSBpcyBkaXNwdXRlIGFzIHRvIHdobyBhY3R1YWxseSBzbGV3IFJlbXVzLCBhbmQgbW9zdCBvZiB0aGUgYmxhbWUgZm9yIHRoZSBkZWVkIGlzIHB1dCB1cG9uIG90aGVycyB0aGFuIFJvbXVsdXM7IGJ1dCBSb211bHVzIGRpZCB1bnF1ZXN0aW9uYWJseSBzYXZlIGhpcyBtb3RoZXIgZnJvbSBkZXN0cnVjdGlvbiwgYW5kIGhlIHNldCBoaXMgZ3JhbmRmYXRoZXIsIHdobyB3YXMgbGl2aW5nIGluIGluZ2xvcmlvdXMgYW5kIGRpc2hvbm91cmFibGUgc3ViamVjdGlvbiB1cG9uIHRoZSB0aHJvbmUgb2YgQWVuZWFzLiBNb3Jlb3ZlciwgaGUgZGlkIGhpbSBtYW55IGZhdm91cnMgb2YgaGlzIG93biBhY2NvcmQsIGFuZCBkaWQgaGltIG5vIGhhcm0gbm90IGV2ZW4gaW5hZHZlcnRlbnRseS4gVGhlc2V1cywgb24gdGhlIGNvbnRyYXJ5LCBmb3IgaGlzIGZvcmdldGZ1bG5lc3MgYW5kIG5lZ2xlY3Qgb2YgdGhlIGNvbW1hbmQgYWJvdXQgdGhlIHNhaWwsIGNhbiBoYXJkbHksIEkgdGhpbmssIGVzY2FwZSB0aGUgY2hhcmdlIG9mIHBhcnJpY2lkZSwgYmUgdGhlIHBsZWEgb2YgaGlzIGFkdm9jYXRlIGV2ZXIgc28gbG9uZyBhbmQgaGlzIGp1ZGdlcyBldmVyIHNvIGxlbmllbnQuIEluZGVlZCwgYSBjZXJ0YWluIEF0dGljIHdyaXRlciwgY29uc2Npb3VzIHRoYXQgd291bGQtYmUgZGVmZW5kZXJzIG9mIFRoZXNldXMgaGF2ZSBhIGRpZmZpY3VsdCB0YXNrLCBmZWlnbnMgdGhhdCBBZWdldXMsIG9uIHRoZSBhcHByb2FjaCBvZiB0aGUgc2hpcCwgcmFuIHVwIHRvIHRoZSBhY3JvcG9saXMgaW4gaGlzIGVhZ2VybmVzcyB0byBjYXRjaCBzaWdodCBvZiBoZXIsIGFuZCBzdHVtYmxlZCBhbmQgZmVsbCBkb3duIHRoZSBjbGlmZjsgYXMgdGhvdWdoIGhlIHdlcmUgd2l0aG91dCBhIHJldGludWUsIG9yIHdhcyBodXJyeWluZyBkb3duIHRvIHRoZSBzZWEgd2l0aG91dCBhbnkgc2VydmFudHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIHRoZSB0cmFuc2dyZXNzaW9ucyBvZiBUaGVzZXVzIGluIGhpcyByYXBlcyBvZiB3b21lbiBhZG1pdCBvZiBubyBwbGF1c2libGUgZXhjdXNlLiBUaGlzIGlzIHRydWUsIGZpcnN0LCBiZWNhdXNlIHRoZXJlIHdlcmUgc28gbWFueTsgZm9yIGhlIGNhcnJpZWQgb2ZmIEFyaWFkbmUsIEFudGlvcGUsIEFuYXhvIG9mIFRyb2V6ZW4sIGFuZCBhdCBsYXN0IEhlbGVuLCB3aGVuIGhlIHdhcyBwYXN0IGhpcyBwcmltZSBhbmQgc2hlIGhhZCBub3QgcmVhY2hlZCBoZXIgcHJpbWUsIGJ1dCB3YXMgYW4gdW5yaXBlIGNoaWxkLCB3aGlsZSBoZSB3YXMgYWxyZWFkeSBvZiBhbiBhZ2UgdG9vIGdyZWF0IGZvciBldmVuIGxhd2Z1bCB3ZWRsb2NrLiBJdCBpcyB0cnVlLCBzZWNvbmRseSwgYmVjYXVzZSBvZiB0aGUgcmVhc29uIGZvciB0aGVtOyBmb3IgdGhlIGRhdWdodGVycyBvZiBUcm9lemVuaWFucyBhbmQgTGFjb25pYW5zIGFuZCBBbWF6b25zIHdlcmUgbm90IGJldHJvdGhlZCB0byBoaW0sIGFuZCB3ZXJlIG5vIHdvcnRoaWVyLCBzdXJlbHksIHRvIGJlIHRoZSBtb3RoZXJzIG9mIGhpcyBjaGlsZHJlbiB0aGFuIHRoZSBkYXVnaHRlcnMgb2YgRXJlY2h0aGV1cyBhbmQgQ2Vjcm9wcyBhdCBBdGhlbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvbmUgbWF5IHN1c3BlY3QgdGhhdCB0aGVzZSBkZWVkcyBvZiBoaXMgd2VyZSBkb25lIGluIGx1c3RmdWwgd2FudG9ubmVzcy4gUm9tdWx1cywgb24gdGhlIG90aGVyIGhhbmQsIGluIHRoZSBmaXJzdCBwbGFjZSwgYWx0aG91Z2ggaGUgY2FycmllZCBvZmYgbmVhcmx5IGVpZ2h0IGh1bmRyZWQgd29tZW4sIHRvb2sgdGhlbSBub3QgYWxsIHRvIHdpZmUsIGJ1dCBvbmx5IG9uZSwgYXMgdGhleSBzYXksIEhlcnNpbGlhLCBhbmQgZGlzdHJpYnV0ZWQgdGhlIHJlc3QgYW1vbmcgdGhlIGJlc3Qgb2YgdGhlIGNpdGl6ZW5zLiBBbmQgaW4gdGhlIHNlY29uZCBwbGFjZSwgYnkgdGhlIHN1YnNlcXVlbnQgaG9ub3VyLCBsb3ZlLCBhbmQgcmlnaHRlb3VzIHRyZWF0bWVudCBnaXZlbiB0byB0aGVzZSB3b21lbiwgaGUgbWFkZSBpdCBjbGVhciB0aGF0IGhpcyBkZWVkIG9mIHZpb2xlbmNlIGFuZCBpbmp1c3RpY2Ugd2FzIGEgbW9zdCBob25vdXJhYmxlIGFjaGlldmVtZW50LCBhbmQgb25lIG1vc3QgYWRhcHRlZCB0byBwcm9tb3RlIHBvbGl0aWNhbCBwYXJ0bmVyc2hpcC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyB3YXkgaGUgaW50ZXJtaXhlZCBhbmQgYmxlbmRlZCB0aGUgdHdvIHBlb3BsZXMgd2l0aCBvbmUgYW5vdGhlciwgYW5kIHN1cHBsaWVkIGhpcyBzdGF0ZSB3aXRoIGEgZmxvd2luZyBmb3VudGFpbiBvZiBzdHJlbmd0aCBhbmQgZ29vZCB3aWxsIGZvciB0aGUgdGltZSB0byBjb21lLiBBbmQgdG8gdGhlIG1vZGVzdHksIHRlbmRlcm5lc3MsIGFuZCBzdGFiaWxpdHkgd2hpY2ggaGUgaW1wYXJ0ZWQgdG8gdGhlIG1hcnJpYWdlIHJlbGF0aW9uLCB0aW1lIGlzIHdpdG5lc3MuIEZvciBpbiB0d28gaHVuZHJlZCBhbmQgdGhpcnR5IHllYXJzIG5vIG1hbiB2ZW50dXJlZCB0byBsZWF2ZSBoaXMgd2lmZSwgbm9yIGFueSB3b21hbiBoZXIgaHVzYmFuZDsgYnV0LCBqdXN0IGFzIHRoZSB2ZXJ5IGN1cmlvdXMgYW1vbmcgdGhlIEdyZWVrcyBjYW4gbmFtZSB0aGUgZmlyc3QgcGFycmljaWRlIG9yIG1hdHJpY2lkZSwgc28gdGhlIFJvbWFucyBhbGwga25vdyB0aGF0IFNwdXJpdXMgQ2FydmlsaXVzIHdhcyB0aGUgZmlyc3QgdG8gcHV0IGF3YXkgaGlzIHdpZmUsIGFjY3VzaW5nIGhlciBvZiBiYXJyZW5uZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlIGltbWVkaWF0ZSByZXN1bHRzIG9mIGhpcyBhY3QsIGFzIHdlbGwgYXMgdGhlIGxvbmcgbGFwc2Ugb2YgdGltZSwgd2l0bmVzcyBpbiBmYXZvdXIgb2YgUm9tdWx1cy4gRm9yIHRoZSB0d28ga2luZ3Mgc2hhcmVkIHRoZSBnb3Zlcm5tZW50IGluIGNvbW1vbiwgYW5kIHRoZSB0d28gcGVvcGxlcyB0aGUgcmlnaHRzIGFuZCBkdXRpZXMgb2YgY2l0aXplbnNoaXAsIGJlY2F1c2Ugb2YgdGhhdCBpbnRlcm1hcnJpYWdlOyB3aGVyZWFzIGZyb20gdGhlIG1hcnJpYWdlcyBvZiBUaGVzZXVzIHRoZSBBdGhlbmlhbnMgZ290IG5vIG5ldyBmcmllbmRzIGF0IGFsbCwgbm9yIGV2ZW4gYW55IGNvbW11bml0eSBvZiBlbnRlcnByaXNlIHdoYXRzb2V2ZXIsIGJ1dCBlbm1pdGllcywgd2Fycywgc2xhdWdodGVycyBvZiBjaXRpemVucywgYW5kIGF0IGxhc3QgdGhlIGxvc3Mgb2YgQXBoaWRuYWUsIGFuZCBhbiBlc2NhcGUgZnJvbSB0aGUgZmF0ZSB3aGljaCBUcm95IHN1ZmZlcmVkIGJ5IHJlYXNvbiBvZiBBbGV4YW5kZXIsIG9ubHkgYmVjYXVzZSB0aGVpciBlbmVtaWVzIHRvb2sgY29tcGFzc2lvbiBvbiB0aGVtIHdoZW4gdGhleSBjYWxsZWQgdXBvbiB0aGVtIHdvcnNoaXBmdWxseSBhcyBnb2RzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGUgbW90aGVyIG9mIFRoZXNldXMgYXMgbm90IG9ubHkgaW4gZGFuZ2VyLCBidXQgYWN0dWFsbHkgc3VmZmVyZWQgdGhlIGZhdGUgb2YgSGVjdWJhIHdoZW4gc2hlIHdhcyBkZXNlcnRlZCBhbmQgYWJhbmRvbmVkIGJ5IGhlciBzb24sIHVubGVzcywgaW5kZWVkLCB0aGUgdGFsZSBvZiBoZXIgY2FwdGl2aXR5IGlzIGZpY3RpdGlvdXMsIGFuZCBpdCBtYXkgd2VsbCBiZSBmYWxzZSwgYXMgd2VsbCBhcyBtb3N0IG9mIHRoZSBvdGhlciBzdG9yaWVzLiBGb3IgZXhhbXBsZSwgdGhlIHRhbGVzIHRvbGQgb2YgZGl2aW5lIGludGVydmVudGlvbiBpbiB0aGVpciBsaXZlcyBhcmUgaW4gZ3JlYXQgY29udHJhc3Q7IGZvciBSb211bHVzIHdhcyBwcmVzZXJ2ZWQgYnkgdGhlIHNpZ25hbCBmYXZvdXIgb2YgdGhlIGdvZHMsIHdoaWxlIHRoZSBvcmFjbGUgZ2l2ZW4gdG8gQWVnZXVzLCBmb3JiaWRkaW5nIGhpbSB0byBhcHByb2FjaCBhIHdvbWFuIHdoaWxlIGluIGEgZm9yZWlnbiBsYW5kLCBzZWVtcyB0byBpbmRpY2F0ZSB0aGF0IHRoZSBiaXJ0aCBvZiBUaGVzZXVzIHdhcyBub3QgYWdyZWVhYmxlIHRvIHRoZSB3aWxsIG9mIHRoZSBnb2RzLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgdGhlIHRyYW5zZ3Jlc3Npb25zIG9mIFRoZXNldXMgaW4gaGlzIHJhcGVzIG9mIHdvbWVuIGFkbWl0IG9mIG5vIHBsYXVzaWJsZSBleGN1c2UuIFRoaXMgaXMgdHJ1ZSwgZmlyc3QsIGJlY2F1c2UgdGhlcmUgd2VyZSBzbyBtYW55OyBmb3IgaGUgY2FycmllZCBvZmYgQXJpYWRuZSwgQW50aW9wZSwgQW5heG8gb2YgVHJvZXplbiwgYW5kIGF0IGxhc3QgSGVsZW4sIHdoZW4gaGUgd2FzIHBhc3QgaGlzIHByaW1lIGFuZCBzaGUgaGFkIG5vdCByZWFjaGVkIGhlciBwcmltZSwgYnV0IHdhcyBhbiB1bnJpcGUgY2hpbGQsIHdoaWxlIGhlIHdhcyBhbHJlYWR5IG9mIGFuIGFnZSB0b28gZ3JlYXQgZm9yIGV2ZW4gbGF3ZnVsIHdlZGxvY2suIEl0IGlzIHRydWUsIHNlY29uZGx5LCBiZWNhdXNlIG9mIHRoZSByZWFzb24gZm9yIHRoZW07IGZvciB0aGUgZGF1Z2h0ZXJzIG9mIFRyb2V6ZW5pYW5zIGFuZCBMYWNvbmlhbnMgYW5kIEFtYXpvbnMgd2VyZSBub3QgYmV0cm90aGVkIHRvIGhpbSwgYW5kIHdlcmUgbm8gd29ydGhpZXIsIHN1cmVseSwgdG8gYmUgdGhlIG1vdGhlcnMgb2YgaGlzIGNoaWxkcmVuIHRoYW4gdGhlIGRhdWdodGVycyBvZiBFcmVjaHRoZXVzIGFuZCBDZWNyb3BzIGF0IEF0aGVucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvbmUgbWF5IHN1c3BlY3QgdGhhdCB0aGVzZSBkZWVkcyBvZiBoaXMgd2VyZSBkb25lIGluIGx1c3RmdWwgd2FudG9ubmVzcy4gUm9tdWx1cywgb24gdGhlIG90aGVyIGhhbmQsIGluIHRoZSBmaXJzdCBwbGFjZSwgYWx0aG91Z2ggaGUgY2FycmllZCBvZmYgbmVhcmx5IGVpZ2h0IGh1bmRyZWQgd29tZW4sIHRvb2sgdGhlbSBub3QgYWxsIHRvIHdpZmUsIGJ1dCBvbmx5IG9uZSwgYXMgdGhleSBzYXksIEhlcnNpbGlhLCBhbmQgZGlzdHJpYnV0ZWQgdGhlIHJlc3QgYW1vbmcgdGhlIGJlc3Qgb2YgdGhlIGNpdGl6ZW5zLiBBbmQgaW4gdGhlIHNlY29uZCBwbGFjZSwgYnkgdGhlIHN1YnNlcXVlbnQgaG9ub3VyLCBsb3ZlLCBhbmQgcmlnaHRlb3VzIHRyZWF0bWVudCBnaXZlbiB0byB0aGVzZSB3b21lbiwgaGUgbWFkZSBpdCBjbGVhciB0aGF0IGhpcyBkZWVkIG9mIHZpb2xlbmNlIGFuZCBpbmp1c3RpY2Ugd2FzIGEgbW9zdCBob25vdXJhYmxlIGFjaGlldmVtZW50LCBhbmQgb25lIG1vc3QgYWRhcHRlZCB0byBwcm9tb3RlIHBvbGl0aWNhbCBwYXJ0bmVyc2hpcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgd2F5IGhlIGludGVybWl4ZWQgYW5kIGJsZW5kZWQgdGhlIHR3byBwZW9wbGVzIHdpdGggb25lIGFub3RoZXIsIGFuZCBzdXBwbGllZCBoaXMgc3RhdGUgd2l0aCBhIGZsb3dpbmcgZm91bnRhaW4gb2Ygc3RyZW5ndGggYW5kIGdvb2Qgd2lsbCBmb3IgdGhlIHRpbWUgdG8gY29tZS4gQW5kIHRvIHRoZSBtb2Rlc3R5LCB0ZW5kZXJuZXNzLCBhbmQgc3RhYmlsaXR5IHdoaWNoIGhlIGltcGFydGVkIHRvIHRoZSBtYXJyaWFnZSByZWxhdGlvbiwgdGltZSBpcyB3aXRuZXNzLiBGb3IgaW4gdHdvIGh1bmRyZWQgYW5kIHRoaXJ0eSB5ZWFycyBubyBtYW4gdmVudHVyZWQgdG8gbGVhdmUgaGlzIHdpZmUsIG5vciBhbnkgd29tYW4gaGVyIGh1c2JhbmQ7IGJ1dCwganVzdCBhcyB0aGUgdmVyeSBjdXJpb3VzIGFtb25nIHRoZSBHcmVla3MgY2FuIG5hbWUgdGhlIGZpcnN0IHBhcnJpY2lkZSBvciBtYXRyaWNpZGUsIHNvIHRoZSBSb21hbnMgYWxsIGtub3cgdGhhdCBTcHVyaXVzIENhcnZpbGl1cyB3YXMgdGhlIGZpcnN0IHRvIHB1dCBhd2F5IGhpcyB3aWZlLCBhY2N1c2luZyBoZXIgb2YgYmFycmVubmVzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgaW1tZWRpYXRlIHJlc3VsdHMgb2YgaGlzIGFjdCwgYXMgd2VsbCBhcyB0aGUgbG9uZyBsYXBzZSBvZiB0aW1lLCB3aXRuZXNzIGluIGZhdm91ciBvZiBSb211bHVzLiBGb3IgdGhlIHR3byBraW5ncyBzaGFyZWQgdGhlIGdvdmVybm1lbnQgaW4gY29tbW9uLCBhbmQgdGhlIHR3byBwZW9wbGVzIHRoZSByaWdodHMgYW5kIGR1dGllcyBvZiBjaXRpemVuc2hpcCwgYmVjYXVzZSBvZiB0aGF0IGludGVybWFycmlhZ2U7IHdoZXJlYXMgZnJvbSB0aGUgbWFycmlhZ2VzIG9mIFRoZXNldXMgdGhlIEF0aGVuaWFucyBnb3Qgbm8gbmV3IGZyaWVuZHMgYXQgYWxsLCBub3IgZXZlbiBhbnkgY29tbXVuaXR5IG9mIGVudGVycHJpc2Ugd2hhdHNvZXZlciwgYnV0IGVubWl0aWVzLCB3YXJzLCBzbGF1Z2h0ZXJzIG9mIGNpdGl6ZW5zLCBhbmQgYXQgbGFzdCB0aGUgbG9zcyBvZiBBcGhpZG5hZSwgYW5kIGFuIGVzY2FwZSBmcm9tIHRoZSBmYXRlIHdoaWNoIFRyb3kgc3VmZmVyZWQgYnkgcmVhc29uIG9mIEFsZXhhbmRlciwgb25seSBiZWNhdXNlIHRoZWlyIGVuZW1pZXMgdG9vayBjb21wYXNzaW9uIG9uIHRoZW0gd2hlbiB0aGV5IGNhbGxlZCB1cG9uIHRoZW0gd29yc2hpcGZ1bGx5IGFzIGdvZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
