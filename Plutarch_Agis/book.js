var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  if (Array.isArray(lineNumber)) {
    lineNumber = lineNumber[0];
  }
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQW5kIHRoaXMsIGluIHRydXRoLCBpcyB0aGUgZXhwZXJpZW5jZSBvZiBwdWJsaWMgbWVuIHdobyBhY3QgaW4gY29uZm9ybWl0eSB3aXRoIHRoZSBkZXNpcmVzIGFuZCBpbXB1bHNlcyBvZiBtdWx0aXR1ZGVzLCBtYWtpbmcgdGhlbXNlbHZlcyBhdHRlbmRhbnRzIGFuZCBzbGF2ZXMgaW4gb3JkZXIgdGhhdCB0aGV5IG1heSBiZSBjYWxsZWQgcG9wdWxhciBsZWFkZXJzIGFuZCBydWxlcnMuIEZvciBqdXN0IGFzIGEgc2hpcCdzIGxvb2tvdXQsIHdobyBzZWVzIHdoYXQgbGllcyBhaGVhZCBiZWZvcmUgdGhlIHNoaXAncyBjYXB0YWluIGRvZXMsIG5ldmVydGhlbGVzcyB0dXJucyB0byBoaW0gZm9yIG9yZGVycyBhbmQgZG9lcyB3aGF0IGhlIG9yZGFpbnMsIHNvIHRoZSBwdWJsaWMgbWFuIHdob3NlIGV5ZXMgYXJlIGZpeGVkIG9uIGdsb3J5IGlzIGEgc2VydmFudCBvZiB0aGUgbXVsdGl0dWRlLCBhbHRob3VnaCBoZSBoYXMgdGhlIG5hbWUgb2YgcnVsZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG1hbiwgaW5kZWVkLCB3aG9zZSBnb29kbmVzcyBpcyBjb21wbGV0ZSBhbmQgcGVyZmVjdCB3aWxsIGhhdmUgbm8gbmVlZCBhdCBhbGwgb2YgZ2xvcnksIGV4Y2VwdCBzbyBmYXIgYXMgZ2xvcnkgZ2l2ZXMgaGltIGFjY2VzcyB0byBhY2hpZXZlbWVudCBieSByZWFzb24gb2YgdGhlIGNvbmZpZGVuY2UgbWVuIGhhdmUgaW4gaGltOyBidXQgYSBtYW4gd2hvIGlzIHN0aWxsIHlvdW5nIGFuZCBpcyBmb25kIG9mIGhvbm91cnMgbWF5IGJlIGFsbG93ZWQgdG8gcGx1bWUgYW5kIGV4YWx0IGhpbXNlbGYgc29tZXdoYXQgZXZlbiB1cG9uIGdsb3J5LCBwcm92aWRlZCB0aGF0IGdsb3J5IGlzIHRoZSBvdXRjb21lIG9mIG5vYmxlIGRlZWRzLiBGb3IgdGhlIHZpcnR1ZXMsIHdoaWNoIGFyZSBpbmNpcGllbnQgYW5kIGJ1ZGRpbmcgaW4gdGhlIHlvdW5nLCBhcmUgY29uZmlybWVkIGluIHRoZWlyIHByb3BlciBkZXZlbG9wbWVudCwgYXMgVGhlb3BocmFzdHVzIHNheXMsIGJ5IHRoZSBwcmFpc2VzIG9mIG1lbiwgYW5kIGNvbXBsZXRlIHRoZWlyIGdyb3d0aCB1bmRlciB0aGUgaW5jZW50aXZlIG9mIHByaWRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZXhjZXNzIGlzIGV2ZXJ5d2hlcmUgaGFybWZ1bCwgYW5kIGluIHRoZSBjYXNlIG9mIG1lbiB3aG8gY2hlcmlzaCBwb2xpdGljYWwgYW1iaXRpb25zLCBpdCBpcyBkZWFkbHk7IGZvciBpdCBzd2VlcHMgdGhlbSBhd2F5IGludG8gbWFuaWZlc3QgZm9sbHkgYW5kIG1hZG5lc3MgYXMgdGhleSBncmFzcCBhZnRlciBncmVhdCBwb3dlciwgd2hlbiB0aGV5IHJlZnVzZSB0byByZWdhcmQgd2hhdCBpcyBob25vdXJhYmxlIGFzIGdsb3Jpb3VzLCBidXQgY29uc2lkZXIgdGhhdCB3aGF0IGlzIGdsb3Jpb3VzIGlzIGdvb2QuIFRoZXJlZm9yZSwgd2hhdCBQaG9jaW9uIHNhaWQgdG8gQW50aXBhdGVyLCB3aG8gZGVtYW5kZWQgZnJvbSBoaW0gc29tZSBkaXNob25vdXJhYmxlIHNlcnZpY2UsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBjYW5zdCBub3QgaGF2ZSBQaG9jaW9uIGFzIHRoeSBmcmllbmQgYW5kIGF0IHRoZSBzYW1lIHRpbWUgdGh5IGZsYXR0ZXJlciw8L3E+IHRoaXMsIG9yIHNvbWV0aGluZyBha2luIHRvIHRoaXMsIG11c3QgYmUgc2FpZCB0byB0aGUgbXVsdGl0dWRlOiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWUgY2Fubm90IGhhdmUgdGhlIHNhbWUgbWFuIGFzIHlvdXIgcnVsZXIgYW5kIHlvdXIgc2xhdmUuPC9xPiBTaW5jZSBpbiB0aGlzIGNhc2UgYWxzbyBvbmUgY2VydGFpbmx5IGNhbiBhcHBseSB0aGUgZmFibGUgb2YgdGhlIHNlcnBlbnQgd2hvc2UgdGFpbCByZWJlbGxlZCBhZ2FpbnN0IGl0cyBoZWFkIGFuZCBkZW1hbmRlZCB0aGUgcmlnaHQgdG8gbGVhZCBpbiB0dXJuIGluc3RlYWQgb2YgYWx3YXlzIGZvbGxvd2luZzsgc28gaXQgdG9vayB0aGUgbGVhZCwgYW5kIGJ5IHRoZSBmb2xseSBvZiBpdHMgcHJvZ3Jlc3MgZ290IGl0c2VsZiBpbnRvIG1pc2NoaWVmIGFuZCBsYWNlcmF0ZWQgdGhlIGhlYWQsIHdoaWNoIHdhcyBjb21wZWxsZWQsIGNvbnRyYXJ5IHRvIG5hdHVyZSwgdG8gZm9sbG93IGEgcGFydCB0aGF0IGhhZCBuZWl0aGVyIGV5ZXMgbm9yIGVhcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGFzIHdlIHNlZSwgaGFzIGJlZW4gdGhlIGV4cGVyaWVuY2Ugb2YgbWFueSBvZiB0aGUgbWVuIHdob3NlIHdob2xlIHBvbGl0aWNhbCBhY3Rpdml0eSBpcyBkaXJlY3RlZCB0b3dhcmRzIHRoZSB3aW5uaW5nIG9mIHBvcHVsYXIgZmF2b3VyOyB0aGV5IG1hZGUgdGhlbXNlbHZlcyBkZXBlbmRlbnQgb24gdGhlIG11bHRpdHVkZSwgd2hpY2ggaXMgYm9ybmUgYWJvdXQgYXQgcmFuZG9tLCBhbmQgdGhlbiBjb3VsZCBuZWl0aGVyIHJlY292ZXIgdGhlbXNlbHZlcyBub3IgcHV0IGEgc3RvcCB0byB0aGUgcHJvZ3Jlc3Mgb2YgZGlzb3JkZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbWFuLCBpbmRlZWQsIHdob3NlIGdvb2RuZXNzIGlzIGNvbXBsZXRlIGFuZCBwZXJmZWN0IHdpbGwgaGF2ZSBubyBuZWVkIGF0IGFsbCBvZiBnbG9yeSwgZXhjZXB0IHNvIGZhciBhcyBnbG9yeSBnaXZlcyBoaW0gYWNjZXNzIHRvIGFjaGlldmVtZW50IGJ5IHJlYXNvbiBvZiB0aGUgY29uZmlkZW5jZSBtZW4gaGF2ZSBpbiBoaW07IGJ1dCBhIG1hbiB3aG8gaXMgc3RpbGwgeW91bmcgYW5kIGlzIGZvbmQgb2YgaG9ub3VycyBtYXkgYmUgYWxsb3dlZCB0byBwbHVtZSBhbmQgZXhhbHQgaGltc2VsZiBzb21ld2hhdCBldmVuIHVwb24gZ2xvcnksIHByb3ZpZGVkIHRoYXQgZ2xvcnkgaXMgdGhlIG91dGNvbWUgb2Ygbm9ibGUgZGVlZHMuIEZvciB0aGUgdmlydHVlcywgd2hpY2ggYXJlIGluY2lwaWVudCBhbmQgYnVkZGluZyBpbiB0aGUgeW91bmcsIGFyZSBjb25maXJtZWQgaW4gdGhlaXIgcHJvcGVyIGRldmVsb3BtZW50LCBhcyBUaGVvcGhyYXN0dXMgc2F5cywgYnkgdGhlIHByYWlzZXMgb2YgbWVuLCBhbmQgY29tcGxldGUgdGhlaXIgZ3Jvd3RoIHVuZGVyIHRoZSBpbmNlbnRpdmUgb2YgcHJpZGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBleGNlc3MgaXMgZXZlcnl3aGVyZSBoYXJtZnVsLCBhbmQgaW4gdGhlIGNhc2Ugb2YgbWVuIHdobyBjaGVyaXNoIHBvbGl0aWNhbCBhbWJpdGlvbnMsIGl0IGlzIGRlYWRseTsgZm9yIGl0IHN3ZWVwcyB0aGVtIGF3YXkgaW50byBtYW5pZmVzdCBmb2xseSBhbmQgbWFkbmVzcyBhcyB0aGV5IGdyYXNwIGFmdGVyIGdyZWF0IHBvd2VyLCB3aGVuIHRoZXkgcmVmdXNlIHRvIHJlZ2FyZCB3aGF0IGlzIGhvbm91cmFibGUgYXMgZ2xvcmlvdXMsIGJ1dCBjb25zaWRlciB0aGF0IHdoYXQgaXMgZ2xvcmlvdXMgaXMgZ29vZC4gVGhlcmVmb3JlLCB3aGF0IFBob2Npb24gc2FpZCB0byBBbnRpcGF0ZXIsIHdobyBkZW1hbmRlZCBmcm9tIGhpbSBzb21lIGRpc2hvbm91cmFibGUgc2VydmljZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3UgY2Fuc3Qgbm90IGhhdmUgUGhvY2lvbiBhcyB0aHkgZnJpZW5kIGFuZCBhdCB0aGUgc2FtZSB0aW1lIHRoeSBmbGF0dGVyZXIsPC9xPiB0aGlzLCBvciBzb21ldGhpbmcgYWtpbiB0byB0aGlzLCBtdXN0IGJlIHNhaWQgdG8gdGhlIG11bHRpdHVkZTogCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllIGNhbm5vdCBoYXZlIHRoZSBzYW1lIG1hbiBhcyB5b3VyIHJ1bGVyIGFuZCB5b3VyIHNsYXZlLjwvcT4gU2luY2UgaW4gdGhpcyBjYXNlIGFsc28gb25lIGNlcnRhaW5seSBjYW4gYXBwbHkgdGhlIGZhYmxlIG9mIHRoZSBzZXJwZW50IHdob3NlIHRhaWwgcmViZWxsZWQgYWdhaW5zdCBpdHMgaGVhZCBhbmQgZGVtYW5kZWQgdGhlIHJpZ2h0IHRvIGxlYWQgaW4gdHVybiBpbnN0ZWFkIG9mIGFsd2F5cyBmb2xsb3dpbmc7IHNvIGl0IHRvb2sgdGhlIGxlYWQsIGFuZCBieSB0aGUgZm9sbHkgb2YgaXRzIHByb2dyZXNzIGdvdCBpdHNlbGYgaW50byBtaXNjaGllZiBhbmQgbGFjZXJhdGVkIHRoZSBoZWFkLCB3aGljaCB3YXMgY29tcGVsbGVkLCBjb250cmFyeSB0byBuYXR1cmUsIHRvIGZvbGxvdyBhIHBhcnQgdGhhdCBoYWQgbmVpdGhlciBleWVzIG5vciBlYXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGFzIHdlIHNlZSwgaGFzIGJlZW4gdGhlIGV4cGVyaWVuY2Ugb2YgbWFueSBvZiB0aGUgbWVuIHdob3NlIHdob2xlIHBvbGl0aWNhbCBhY3Rpdml0eSBpcyBkaXJlY3RlZCB0b3dhcmRzIHRoZSB3aW5uaW5nIG9mIHBvcHVsYXIgZmF2b3VyOyB0aGV5IG1hZGUgdGhlbXNlbHZlcyBkZXBlbmRlbnQgb24gdGhlIG11bHRpdHVkZSwgd2hpY2ggaXMgYm9ybmUgYWJvdXQgYXQgcmFuZG9tLCBhbmQgdGhlbiBjb3VsZCBuZWl0aGVyIHJlY292ZXIgdGhlbXNlbHZlcyBub3IgcHV0IGEgc3RvcCB0byB0aGUgcHJvZ3Jlc3Mgb2YgZGlzb3JkZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlc2UgcmVtYXJrcyB1cG9uIHRoZSBnbG9yeSB3aGljaCBjb21lcyBmcm9tIHRoZSBmYXZvdXIgb2YgdGhlIG11bHRpdHVkZSBJIGhhdmUgYmVlbiBsZWQgdG8gbWFrZSBiZWNhdXNlIEkgd2FzIHJlbWluZGVkIG9mIGl0cyBncmVhdCBpbmZsdWVuY2UgYnkgdGhlIGZvcnR1bmVzIG9mIFRpYmVyaXVzIGFuZCBDYWl1cyBHcmFjY2h1cy4gVGhleSB3ZXJlIG1lbiBvZiBtb3N0IGdlbmVyb3VzIG5hdHVyZXMsIGFuZCBoYWQgYSBtb3N0IGdlbmVyb3VzIHJlYXJpbmcsIGFuZCBhZG9wdGVkIG1vc3QgZ2VuZXJvdXMgcG9saXRpY2FsIHByaW5jaXBsZXM7IGFuZCB5ZXQgdGhleSB3ZXJlIHJ1aW5lZCwgSSB3aWxsIG5vdCBzYXkgYnkgYW4gaW1tb2RlcmF0ZSBkZXNpcmUgZm9yIGdsb3J5LCBidXQgcmF0aGVyIGJ5IGEgZmVhciBvZiBsb3NpbmcgaXQuIEFuZCB0aGlzIGZlYXIgaGFkIG5vIHVud29ydGh5IG9yaWdpbi4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYWZ0ZXIgdGhleSBoYWQgZW5qb3llZCBncmVhdCBraW5kbmVzcyBmcm9tIHRoZWlyIGZlbGxvdyBjaXRpemVucywgdGhleSB3ZXJlIGFzaGFtZWQgdG8gbGVhdmUgaXQgdW5wYWlkLCBsaWtlIGEgZGVidCBvZiBtb25leTsgYW5kIHNvIHRoZXkgd2VyZSBmb3JldmVyIHN0cml2aW5nIGJ5IHRoZSBleGNlbGxlbmNlIG9mIHRoZWlyIHBvbGl0aWNhbCBzZXJ2aWNlcyB0byBzdXJwYXNzIHRoZSBob25vdXJzIGNvbmZlcnJlZCB1cG9uIHRoZW0sIGFuZCB3ZXJlIGhvbm91cmVkIGFsbCB0aGUgbW9yZSBpbiBjb25zZXF1ZW5jZSBvZiB0aGVpciBncmF0ZWZ1bCBwb2xpdGljYWwgc2VydmljZXMsIGluIHRoaXMgd2F5LCBhZnRlciBraW5kbGluZyBhbiBlcXVhbCBhcmRvdXIgaW4gdGhlbXNlbHZlcyB0b3dhcmRzIHRoZSBwZW9wbGUgYW5kIGluIHRoZSBwZW9wbGUgdG93YXJkcyB0aGVtc2VsdmVzLCB0aGV5IGVuZ2FnZWQgaW4gZW50ZXJwcmlzZXMgd2hlcmVpbiwgdGhvdWdoIHRoZXkga25ldyBpdCBub3QsIGl0IHdhcyBubyBsb25nZXIgaG9ub3VyYWJsZSBmb3IgdGhlbSB0byBwZXJzaXN0LCBhbmQgYWxyZWFkeSBkaXNncmFjZWZ1bCBmb3IgdGhlbSB0byBzdG9wLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciB0aGV5IGhhZCBlbmpveWVkIGdyZWF0IGtpbmRuZXNzIGZyb20gdGhlaXIgZmVsbG93IGNpdGl6ZW5zLCB0aGV5IHdlcmUgYXNoYW1lZCB0byBsZWF2ZSBpdCB1bnBhaWQsIGxpa2UgYSBkZWJ0IG9mIG1vbmV5OyBhbmQgc28gdGhleSB3ZXJlIGZvcmV2ZXIgc3RyaXZpbmcgYnkgdGhlIGV4Y2VsbGVuY2Ugb2YgdGhlaXIgcG9saXRpY2FsIHNlcnZpY2VzIHRvIHN1cnBhc3MgdGhlIGhvbm91cnMgY29uZmVycmVkIHVwb24gdGhlbSwgYW5kIHdlcmUgaG9ub3VyZWQgYWxsIHRoZSBtb3JlIGluIGNvbnNlcXVlbmNlIG9mIHRoZWlyIGdyYXRlZnVsIHBvbGl0aWNhbCBzZXJ2aWNlcywgaW4gdGhpcyB3YXksIGFmdGVyIGtpbmRsaW5nIGFuIGVxdWFsIGFyZG91ciBpbiB0aGVtc2VsdmVzIHRvd2FyZHMgdGhlIHBlb3BsZSBhbmQgaW4gdGhlIHBlb3BsZSB0b3dhcmRzIHRoZW1zZWx2ZXMsIHRoZXkgZW5nYWdlZCBpbiBlbnRlcnByaXNlcyB3aGVyZWluLCB0aG91Z2ggdGhleSBrbmV3IGl0IG5vdCwgaXQgd2FzIG5vIGxvbmdlciBob25vdXJhYmxlIGZvciB0aGVtIHRvIHBlcnNpc3QsIGFuZCBhbHJlYWR5IGRpc2dyYWNlZnVsIGZvciB0aGVtIHRvIHN0b3AuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFzIHRvIHRoaXMgbWF0dGVyLCBob3dldmVyLCBteSByZWFkZXIgd2lsbCBqdWRnZSBmb3IgaGltc2VsZiBmcm9tIG15IG5hcnJhdGl2ZTsgYW5kIEkgc2hhbGwgY29tcGFyZSB3aXRoIHRoZSBHcmFjY2hpIGEgcGFpciBvZiBwb3B1bGFyIGxlYWRlcnMgaW4gU3BhcnRhLCBBZ2lzIGFuZCBDbGVvbWVuZXMgdGhlIGtpbmdzLiBGb3IgdGhlc2UgYWxzbyB0cmllZCB0byBleGFsdCB0aGUgcGVvcGxlLCBqdXN0IGFzIHRoZSBHcmFjY2hpIGRpZCwgYW5kIHRyaWVkIHRvIHJlc3RvcmUgYW4gaG9ub3VyYWJsZSBhbmQganVzdCBjaXZpbCBwb2xpdHkgd2hpY2ggaGFkIGxhcHNlZCBmb3IgYSBsb25ndGltZTsgYW5kIGxpa2UgdGhlIEdyYWNjaGkgdGhleSBpbmN1cnJlZCB0aGUgaGF0cmVkIG9mIHRoZSBub2JsZXMsIHdobyB3ZXJlIHVud2lsbGluZyB0byByZWxheCB0aGVpciB3b250ZWQgZ3JlZWQuIEl0IGlzIHRydWUgdGhhdCB0aGUgU3BhcnRhbnMgd2VyZSBub3QgYnJvdGhlcnM7IHN0aWxsLCB0aGV5IGFkb3B0ZWQgcG9saXRpY2FsIGNvdXJzZXMgd2hpY2ggd2VyZSBraW5kcmVkIGFuZCBicm90aGVyIHRvIG9uZSBhbm90aGVyLiBUaGUgb2NjYXNpb24gd2FzIGFzIGZvbGxvd3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFzIHRvIHRoaXMgbWF0dGVyLCBob3dldmVyLCBteSByZWFkZXIgd2lsbCBqdWRnZSBmb3IgaGltc2VsZiBmcm9tIG15IG5hcnJhdGl2ZTsgYW5kIEkgc2hhbGwgY29tcGFyZSB3aXRoIHRoZSBHcmFjY2hpIGEgcGFpciBvZiBwb3B1bGFyIGxlYWRlcnMgaW4gU3BhcnRhLCBBZ2lzIGFuZCBDbGVvbWVuZXMgdGhlIGtpbmdzLiBGb3IgdGhlc2UgYWxzbyB0cmllZCB0byBleGFsdCB0aGUgcGVvcGxlLCBqdXN0IGFzIHRoZSBHcmFjY2hpIGRpZCwgYW5kIHRyaWVkIHRvIHJlc3RvcmUgYW4gaG9ub3VyYWJsZSBhbmQganVzdCBjaXZpbCBwb2xpdHkgd2hpY2ggaGFkIGxhcHNlZCBmb3IgYSBsb25ndGltZTsgYW5kIGxpa2UgdGhlIEdyYWNjaGkgdGhleSBpbmN1cnJlZCB0aGUgaGF0cmVkIG9mIHRoZSBub2JsZXMsIHdobyB3ZXJlIHVud2lsbGluZyB0byByZWxheCB0aGVpciB3b250ZWQgZ3JlZWQuIEl0IGlzIHRydWUgdGhhdCB0aGUgU3BhcnRhbnMgd2VyZSBub3QgYnJvdGhlcnM7IHN0aWxsLCB0aGV5IGFkb3B0ZWQgcG9saXRpY2FsIGNvdXJzZXMgd2hpY2ggd2VyZSBraW5kcmVkIGFuZCBicm90aGVyIHRvIG9uZSBhbm90aGVyLiBUaGUgb2NjYXNpb24gd2FzIGFzIGZvbGxvd3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBvbmNlIHRoZSBsb3ZlIG9mIHNpbHZlciBhbmQgZ29sZCBoYWQgY3JlcHQgaW50byB0aGUgY2l0eSwgY2xvc2VseSBmb2xsb3dlZCBieSBncmVlZCBhbmQgcGFyc2ltb255IGluIHRoZSBhY3F1aXNpdGlvbiBvZiB3ZWFsdGggYW5kIGJ5IGx1eHVyeSwgZWZmZW1pbmFjeSwgYW5kIGV4dHJhdmFnYW5jZSBpbiB0aGUgdXNlIGFuZCBlbmpveW1lbnQgb2YgaXQsIFNwYXJ0YSBmZWxsIGF3YXkgZnJvbSBtb3N0IG9mIGhlciBub2JsZSB0cmFpdHMsIGFuZCBjb250aW51ZWQgaW4gYSBsb3cgZXN0YXRlIHRoYXQgd2FzIHVud29ydGh5IG9mIGhlciBkb3duIHRvIHRoZSB0aW1lcyB3aGVuIEFnaXMgYW5kIExlb25pZGFzIHdlcmUga2luZ3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnaXMgd2FzIG9mIHRoZSBFdXJ5cG9udGlkIHJveWFsIGhvdXNlLCBhIHNvbiBvZiBFdWRhbWlkYXMsIGFuZCB0aGUgc2l4dGggaW4gZGVzY2VudCBmcm9tIHRoZSBBZ2VzaWxhw7xzIHdobyBjcm9zc2VkIGludG8gQXNpYSBhbmQgYmVjYW1lIHRoZSBtb3N0IHBvd2VyZnVsIEdyZWVrIG9mIGhpcyB0aW1lLiBGb3IgQWdlc2lsYcO8cyBoYWQgYSBzb24gQXJjaGlkYW11cywgd2hvIHdhcyBzbGFpbiBieSB0aGUgTWVzc2FwaWFucyBhdCBNYW5kdXJpdW0gaW4gSXRhbHk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzMzggQi5DLjwvbm90ZT47IEFyY2hpZGFtdXMgaGFkIGFuIGVsZGVyIHNvbiBBZ2lzLCBhbmQgYSB5b3VuZ2VyIHNvbiBFdWRhbWlkYXMsIHdobywgYWZ0ZXIgQWdpcyB3YXMgc2xhaW4gYnkgQW50aXBhdGVyIGF0IE1lZ2Fsb3BvbGlzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzMwIEIuQy48L25vdGU+IGxlYXZpbmcgbm8gaXNzdWUsIGJlY2FtZSBraW5nOyBFdWRhbWlkYXMgd2FzIHN1Y2NlZWRlZCBieSBBcmNoaWRhbXVzLCBBcmNoaWRhbXVzIGJ5IGFub3RoZXIgRXVkYW1pZGFzLCBhbmQgRXVkYW1pZGFzIGJ5IEFnaXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjI0IEIuQy48L25vdGU+IHRoZSBzdWJqZWN0IG9mIHRoaXMgPHRpdGxlPkxpZmU8L3RpdGxlPi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TGVvbmlkYXMsIG9uIHRoZSBvdGhlciBoYW5kLCB0aGUgc29uIG9mIENsZW9ueW11cywgd2FzIG9mIHRoZSBvdGhlciByb3lhbCBob3VzZSwgdGhlIEFnaWFkLCBhbmQgd2FzIGVpZ2h0aCBpbiBkZXNjZW50IGZyb20gdGhlIFBhdXNhbmlhcyB3aG8gZGVmZWF0ZWQgTWFyZG9uaXVzIGF0IFBsYXRhZWEuIEZvciBQYXVzYW5pYXMgaGFkIGEgc29uIFBsZWlzdG9hbmF4LCBhbmQgUGxlaXN0b2FuYXggYSBzb24gUGF1c2FuaWFzLCB1cG9uIHdob3NlIGV4aWxlIGFuZCBmbGlnaHQgZnJvbSBTcGFydGEgdG8gVGVnZWE8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzOTUgQi5DLiAgU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHlzLiAzMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5c2FuZGVyPC90aXRsZT4sIHh4eC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGlzIGVsZGVyIHNvbiBBZ2VzaXBvbGlzIGJlY2FtZSBraW5nOyBBZ2VzaXBvbGlzLCBkeWluZyB3aXRob3V0IGlzc3VlLCB3YXMgc3VjY2VlZGVkIGJ5IGEgeW91bmdlciBicm90aGVyIENsZW9tYnJvdHVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgQ2xlb21icm90dXMsIGluIHR1cm4sIGhhZCB0d28gc29ucywgQWdlc2lwb2xpcyBhbmQgQ2xlb21lbmVzLCBvZiB3aG9tIEFnZXNpcG9saXMgcmVpZ25lZCBvbmx5IGEgc2hvcnQgdGltZSBhbmQgbGVmdCBubyBzb25zLCB3aGlsZSBDbGVvbWVuZXMsIHdobyBiZWNhbWUga2luZyBhZnRlciBoaW0sIGxpdmVkIHRvIGxvc2UgaGlzIGVsZGVyIHNvbiBBY3JvdGF0dXMsIGJ1dCBsZWZ0IGJlaGluZCBoaW0gYSB5b3VuZ2VyIHNvbiBDbGVvbnltdXMgQ2xlb255bXVzLCBob3dldmVyLCBkaWQgbm90IGNvbWUgdG8gdGhlIHRocm9uZSwgYnV0IEFyZXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB5cnJoLiAyNi44IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlB5cnJodXM8L3RpdGxlPiwgeHh2aS4gOGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aG8gd2FzIGEgZ3JhbmRzb24gb2YgQ2xlb21lbmVzIGFuZCBzb24gb2YgQWNyb3RhdHVzOyBBcmV1cyBmZWxsIGluIGJhdHRsZSBhdCBDb3JpbnRoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDI2NSBCLkMuLCBpbiBiYXR0bGUgd2l0aCBBbnRpZ29udXMgR29uYXRhcy48L25vdGU+IGFuZCBoaXMgc29uIEFjcm90YXR1cyBjYW1lIHRvIHRoZSB0aHJvbmU7IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjcm90YXR1cyBhbHNvIHdhcyBkZWZlYXRlZCBhbmQgc2xhaW4gYXQgTWVnYWxvcG9saXMsIGJ5IHRoZSB0eXJhbnQgQXJpc3RvZGVtdXMsIGxlYXZpbmcgaGlzIHdpZmUgd2l0aCBjaGlsZDsgYW5kIGFmdGVyIHNoZSBoYWQgZ2l2ZW4gYmlydGggdG8gYSBzb24sIExlb25pZGFzIHRoZSBzb24gb2YgQ2xlb255bXVzIHdhcyBtYWRlIHRoZSBjaGlsZCdzIGd1YXJkaWFuLiBCdXQgdGhlIHlvdW5nIGtpbmcgZGllZCBiZWZvcmUgcmVhY2hpbmcgbWFuaG9vZCwgYW5kIHRoZSBraW5nc2hpcCB0aGVyZWZvcmUgZGV2b2x2ZWQgdXBvbiBMZW9uaWRhcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BYm91dCAyNTYgQi5DLjwvbm90ZT4gd2hvIHdhcyBhbHRvZ2V0aGVyIHVuYWNjZXB0YWJsZSB0byB0aGUgcGVvcGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYWx0aG91Z2ggdGhlIGRlc3RydWN0aW9uIG9mIHRoZSBjb25zdGl0dXRpb24gaGFkIGFscmVhZHkgbGVkIHRvIGEgZ2VuZXJhbCBkZWNsaW5lIGluIG1hbm5lcnMsIHRoZXJlIHdhcyBpbiBMZW9uaWRhcyBhIHZlcnkgbWFya2VkIGRlcGFydHVyZSBmcm9tIHRoZSB0cmFkaXRpb25zIG9mIGhpcyBjb3VudHJ5LCBzaW5jZSBmb3IgYSBsb25nIHRpbWUgaGUgaGFkIGZyZXF1ZW50ZWQgb3JpZW50YWwgY291cnRzIGFuZCBoYWQgYmVlbiBhIHNlcnZpbGUgZm9sbG93ZXIgb2YgU2VsZXVjdXMsIGFuZCBub3cgc291Z2h0IHRvIHRyYW5zZmVyIHRoZSBwcmlkZSBhbmQgcG9tcCB3aGljaCBwcmV2YWlsZWQgYWJyb2FkIGludG8gSGVsbGVuaWMgcmVsYXRpb25zIGFuZCBhIGNvbnN0aXR1dGlvbmFsIGdvdmVybm1lbnQsIHdoZXJlIHRoZXkgd2VyZSBvdXQgb2YgcGxhY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIG9uY2UgdGhlIGxvdmUgb2Ygc2lsdmVyIGFuZCBnb2xkIGhhZCBjcmVwdCBpbnRvIHRoZSBjaXR5LCBjbG9zZWx5IGZvbGxvd2VkIGJ5IGdyZWVkIGFuZCBwYXJzaW1vbnkgaW4gdGhlIGFjcXVpc2l0aW9uIG9mIHdlYWx0aCBhbmQgYnkgbHV4dXJ5LCBlZmZlbWluYWN5LCBhbmQgZXh0cmF2YWdhbmNlIGluIHRoZSB1c2UgYW5kIGVuam95bWVudCBvZiBpdCwgU3BhcnRhIGZlbGwgYXdheSBmcm9tIG1vc3Qgb2YgaGVyIG5vYmxlIHRyYWl0cywgYW5kIGNvbnRpbnVlZCBpbiBhIGxvdyBlc3RhdGUgdGhhdCB3YXMgdW53b3J0aHkgb2YgaGVyIGRvd24gdG8gdGhlIHRpbWVzIHdoZW4gQWdpcyBhbmQgTGVvbmlkYXMgd2VyZSBraW5ncy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnaXMgd2FzIG9mIHRoZSBFdXJ5cG9udGlkIHJveWFsIGhvdXNlLCBhIHNvbiBvZiBFdWRhbWlkYXMsIGFuZCB0aGUgc2l4dGggaW4gZGVzY2VudCBmcm9tIHRoZSBBZ2VzaWxhw7xzIHdobyBjcm9zc2VkIGludG8gQXNpYSBhbmQgYmVjYW1lIHRoZSBtb3N0IHBvd2VyZnVsIEdyZWVrIG9mIGhpcyB0aW1lLiBGb3IgQWdlc2lsYcO8cyBoYWQgYSBzb24gQXJjaGlkYW11cywgd2hvIHdhcyBzbGFpbiBieSB0aGUgTWVzc2FwaWFucyBhdCBNYW5kdXJpdW0gaW4gSXRhbHk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMzOCBCLkMuPC9ub3RlPjsgQXJjaGlkYW11cyBoYWQgYW4gZWxkZXIgc29uIEFnaXMsIGFuZCBhIHlvdW5nZXIgc29uIEV1ZGFtaWRhcywgd2hvLCBhZnRlciBBZ2lzIHdhcyBzbGFpbiBieSBBbnRpcGF0ZXIgYXQgTWVnYWxvcG9saXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMzMCBCLkMuPC9ub3RlPiBsZWF2aW5nIG5vIGlzc3VlLCBiZWNhbWUga2luZzsgRXVkYW1pZGFzIHdhcyBzdWNjZWVkZWQgYnkgQXJjaGlkYW11cywgQXJjaGlkYW11cyBieSBhbm90aGVyIEV1ZGFtaWRhcywgYW5kIEV1ZGFtaWRhcyBieSBBZ2lzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjI0IEIuQy48L25vdGU+IHRoZSBzdWJqZWN0IG9mIHRoaXMgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlmZTwvdGl0bGU+LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkxlb25pZGFzLCBvbiB0aGUgb3RoZXIgaGFuZCwgdGhlIHNvbiBvZiBDbGVvbnltdXMsIHdhcyBvZiB0aGUgb3RoZXIgcm95YWwgaG91c2UsIHRoZSBBZ2lhZCwgYW5kIHdhcyBlaWdodGggaW4gZGVzY2VudCBmcm9tIHRoZSBQYXVzYW5pYXMgd2hvIGRlZmVhdGVkIE1hcmRvbml1cyBhdCBQbGF0YWVhLiBGb3IgUGF1c2FuaWFzIGhhZCBhIHNvbiBQbGVpc3RvYW5heCwgYW5kIFBsZWlzdG9hbmF4IGEgc29uIFBhdXNhbmlhcywgdXBvbiB3aG9zZSBleGlsZSBhbmQgZmxpZ2h0IGZyb20gU3BhcnRhIHRvIFRlZ2VhPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzOTUgQi5DLiAgU2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeXNhbmRlcjwvdGl0bGU+LCB4eHguIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhpcyBlbGRlciBzb24gQWdlc2lwb2xpcyBiZWNhbWUga2luZzsgQWdlc2lwb2xpcywgZHlpbmcgd2l0aG91dCBpc3N1ZSwgd2FzIHN1Y2NlZWRlZCBieSBhIHlvdW5nZXIgYnJvdGhlciBDbGVvbWJyb3R1cywgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeXMuIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeXNhbmRlcjwvdGl0bGU+LCB4eHguIDEuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeXNhbmRlcjwvdGl0bGU+LCB4eHguIDEuPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBDbGVvbWJyb3R1cywgaW4gdHVybiwgaGFkIHR3byBzb25zLCBBZ2VzaXBvbGlzIGFuZCBDbGVvbWVuZXMsIG9mIHdob20gQWdlc2lwb2xpcyByZWlnbmVkIG9ubHkgYSBzaG9ydCB0aW1lIGFuZCBsZWZ0IG5vIHNvbnMsIHdoaWxlIENsZW9tZW5lcywgd2hvIGJlY2FtZSBraW5nIGFmdGVyIGhpbSwgbGl2ZWQgdG8gbG9zZSBoaXMgZWxkZXIgc29uIEFjcm90YXR1cywgYnV0IGxlZnQgYmVoaW5kIGhpbSBhIHlvdW5nZXIgc29uIENsZW9ueW11cyBDbGVvbnltdXMsIGhvd2V2ZXIsIGRpZCBub3QgY29tZSB0byB0aGUgdGhyb25lLCBidXQgQXJldXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB5cnJoLiAyNi44IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHlycmh1czwvdGl0bGU+LCB4eHZpLiA4ZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdobyB3YXMgYSBncmFuZHNvbiBvZiBDbGVvbWVuZXMgYW5kIHNvbiBvZiBBY3JvdGF0dXM7IEFyZXVzIGZlbGwgaW4gYmF0dGxlIGF0IENvcmludGgsPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHlycmguIDI2LjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QeXJyaHVzPC90aXRsZT4sIHh4dmkuIDhmZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlB5cnJodXM8L3RpdGxlPiwgeHh2aS4gOGZmLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjY1IEIuQy4sIGluIGJhdHRsZSB3aXRoIEFudGlnb251cyBHb25hdGFzLjwvbm90ZT4gYW5kIGhpcyBzb24gQWNyb3RhdHVzIGNhbWUgdG8gdGhlIHRocm9uZTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjcm90YXR1cyBhbHNvIHdhcyBkZWZlYXRlZCBhbmQgc2xhaW4gYXQgTWVnYWxvcG9saXMsIGJ5IHRoZSB0eXJhbnQgQXJpc3RvZGVtdXMsIGxlYXZpbmcgaGlzIHdpZmUgd2l0aCBjaGlsZDsgYW5kIGFmdGVyIHNoZSBoYWQgZ2l2ZW4gYmlydGggdG8gYSBzb24sIExlb25pZGFzIHRoZSBzb24gb2YgQ2xlb255bXVzIHdhcyBtYWRlIHRoZSBjaGlsZCdzIGd1YXJkaWFuLiBCdXQgdGhlIHlvdW5nIGtpbmcgZGllZCBiZWZvcmUgcmVhY2hpbmcgbWFuaG9vZCwgYW5kIHRoZSBraW5nc2hpcCB0aGVyZWZvcmUgZGV2b2x2ZWQgdXBvbiBMZW9uaWRhcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFib3V0IDI1NiBCLkMuPC9ub3RlPiB3aG8gd2FzIGFsdG9nZXRoZXIgdW5hY2NlcHRhYmxlIHRvIHRoZSBwZW9wbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbHRob3VnaCB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIGNvbnN0aXR1dGlvbiBoYWQgYWxyZWFkeSBsZWQgdG8gYSBnZW5lcmFsIGRlY2xpbmUgaW4gbWFubmVycywgdGhlcmUgd2FzIGluIExlb25pZGFzIGEgdmVyeSBtYXJrZWQgZGVwYXJ0dXJlIGZyb20gdGhlIHRyYWRpdGlvbnMgb2YgaGlzIGNvdW50cnksIHNpbmNlIGZvciBhIGxvbmcgdGltZSBoZSBoYWQgZnJlcXVlbnRlZCBvcmllbnRhbCBjb3VydHMgYW5kIGhhZCBiZWVuIGEgc2VydmlsZSBmb2xsb3dlciBvZiBTZWxldWN1cywgYW5kIG5vdyBzb3VnaHQgdG8gdHJhbnNmZXIgdGhlIHByaWRlIGFuZCBwb21wIHdoaWNoIHByZXZhaWxlZCBhYnJvYWQgaW50byBIZWxsZW5pYyByZWxhdGlvbnMgYW5kIGEgY29uc3RpdHV0aW9uYWwgZ292ZXJubWVudCwgd2hlcmUgdGhleSB3ZXJlIG91dCBvZiBwbGFjZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2lzLCBvbiB0aGUgY29udHJhcnksIGZhciBzdXJwYXNzZWQgaW4gbmF0aXZlIGV4Y2VsbGVuY2UgYW5kIGluIGxvZnRpbmVzcyBvZiBzcGlyaXQgbm90IG9ubHkgTGVvbmlkYXMsIGJ1dCBhbG1vc3QgYWxsIHRoZSBraW5ncyB3aG8gaGFkIGZvbGxvd2VkIHRoZSBncmVhdCBBZ2VzaWxhw7xzLiBUaGVyZWZvcmUsIGV2ZW4gYmVmb3JlIGhlIGhhZCByZWFjaGVkIGhpcyB0d2VudGlldGggeWVhciwgYW5kIGFsdGhvdWdoIGhlIGhhZCBiZWVuIHJlYXJlZCBhbWlkIHRoZSB3ZWFsdGggYW5kIGx1eHVyeSBvZiB3b21lbiwgbmFtZWx5LCBoaXMgbW90aGVyIEFnZXNpc3RyYXRhIGFuZCBoaXMgZ3JhbmRtb3RoZXIgQXJjaGlkYW1pYSAod2hvIHdlcmUgdGhlIHJpY2hlc3QgcGVvcGxlIGluIFNwYXJ0YSksIGhlIGF0IG9uY2Ugc2V0IGhpcyBmYWNlIGFnYWluc3QgcGxlYXN1cmVzLiBIZSBwdXQgYXdheSBmcm9tIGhpcyBwZXJzb24gdGhlIGFkb3JubWVudHMgd2hpY2ggd2VyZSB0aG91Z2h0IHRvIGJlZml0IHRoZSBncmFjZSBvZiBoaXMgZmlndXJlLCBsYWlkIGFzaWRlIGFuZCBhdm9pZGVkIGV2ZXJ5IGV4dHJhdmFnYW5jZSwgcHJpZGVkIGhpbXNlbGYgb24gaGlzIHNob3J0IFNwYXJ0YW4gY2xvYWssIG9ic2VydmVkIHNlZHVsb3VzbHkgdGhlIFNwYXJ0YW4gY3VzdG9tcyBpbiBoaXMgbWVhbHMgYW5kIGJhdGhzIGFuZCBnZW5lcmFsIHdheXMgb2YgbGl2aW5nLCBhbmQgZGVjbGFyZWQgdGhhdCBoZSBkaWQgbm90IHdhbnQgdGhlIHJveWFsIHBvd2VyIGF0IGFsbCB1bmxlc3MgYnkgbWVhbnMgb2YgaXQgaGUgY291bGQgcmVzdG9yZSB0aGUgYW5jaWVudCBsYXdzIGFuZCBkaXNjaXBsaW5lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2lzLCBvbiB0aGUgY29udHJhcnksIGZhciBzdXJwYXNzZWQgaW4gbmF0aXZlIGV4Y2VsbGVuY2UgYW5kIGluIGxvZnRpbmVzcyBvZiBzcGlyaXQgbm90IG9ubHkgTGVvbmlkYXMsIGJ1dCBhbG1vc3QgYWxsIHRoZSBraW5ncyB3aG8gaGFkIGZvbGxvd2VkIHRoZSBncmVhdCBBZ2VzaWxhw7xzLiBUaGVyZWZvcmUsIGV2ZW4gYmVmb3JlIGhlIGhhZCByZWFjaGVkIGhpcyB0d2VudGlldGggeWVhciwgYW5kIGFsdGhvdWdoIGhlIGhhZCBiZWVuIHJlYXJlZCBhbWlkIHRoZSB3ZWFsdGggYW5kIGx1eHVyeSBvZiB3b21lbiwgbmFtZWx5LCBoaXMgbW90aGVyIEFnZXNpc3RyYXRhIGFuZCBoaXMgZ3JhbmRtb3RoZXIgQXJjaGlkYW1pYSAod2hvIHdlcmUgdGhlIHJpY2hlc3QgcGVvcGxlIGluIFNwYXJ0YSksIGhlIGF0IG9uY2Ugc2V0IGhpcyBmYWNlIGFnYWluc3QgcGxlYXN1cmVzLiBIZSBwdXQgYXdheSBmcm9tIGhpcyBwZXJzb24gdGhlIGFkb3JubWVudHMgd2hpY2ggd2VyZSB0aG91Z2h0IHRvIGJlZml0IHRoZSBncmFjZSBvZiBoaXMgZmlndXJlLCBsYWlkIGFzaWRlIGFuZCBhdm9pZGVkIGV2ZXJ5IGV4dHJhdmFnYW5jZSwgcHJpZGVkIGhpbXNlbGYgb24gaGlzIHNob3J0IFNwYXJ0YW4gY2xvYWssIG9ic2VydmVkIHNlZHVsb3VzbHkgdGhlIFNwYXJ0YW4gY3VzdG9tcyBpbiBoaXMgbWVhbHMgYW5kIGJhdGhzIGFuZCBnZW5lcmFsIHdheXMgb2YgbGl2aW5nLCBhbmQgZGVjbGFyZWQgdGhhdCBoZSBkaWQgbm90IHdhbnQgdGhlIHJveWFsIHBvd2VyIGF0IGFsbCB1bmxlc3MgYnkgbWVhbnMgb2YgaXQgaGUgY291bGQgcmVzdG9yZSB0aGUgYW5jaWVudCBsYXdzIGFuZCBkaXNjaXBsaW5lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZXJlIEkgbWF5IHNheSB0aGF0IHRoZSBMYWNlZGFlbW9uaWFuIHN0YXRlIGJlZ2FuIHRvIHN1ZmZlciBkaXN0ZW1wZXIgYW5kIGNvcnJ1cHRpb24gc29vbiBhZnRlciBpdHMgc3VidmVyc2lvbiBvZiB0aGUgQXRoZW5pYW4gc3VwcmVtYWN5IGZpbGxlZCBpdCB3aXRoIGdvbGQgYW5kIHNpbHZlci4gSG93ZXZlciwgc2luY2UgdGhlIG51bWJlciBvZiBmYW1pbGllcyBpbnN0aXR1dGVkIGJ5IEx5Y3VyZ3VzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiA4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THljdXJndXM8L3RpdGxlPiwgdmlpaS5mLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3YXMgc3RpbGwgcHJlc2VydmVkIGluIHRoZSB0cmFuc21pc3Npb24gb2YgZXN0YXRlcywgYW5kIGZhdGhlciBsZWZ0IHRvIHNvbiBoaXMgaW5oZXJpdGFuY2UsIHRvIHNvbWUgZXh0ZW50IHRoZSBjb250aW51YW5jZSBvZiB0aGlzIG9yZGVyIGFuZCBlcXVhbGl0eSBzdXN0YWluZWQgdGhlIHN0YXRlIGluIHNwaXRlIG9mIGl0cyBlcnJvcnMgaW4gb3RoZXIgcmVzcGVjdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGEgY2VydGFpbiBwb3dlcmZ1bCBtYW4gY2FtZSB0byBiZSBlcGhvciB3aG8gd2FzIGhlYWRzdHJvbmcgYW5kIG9mIGEgdmlvbGVudCB0ZW1wZXIsIEVwaXRhZGV1cyBieSBuYW1lLCBoZSBoYWQgYSBxdWFycmVsIHdpdGggaGlzIHNvbiwgYW5kIGludHJvZHVjZWQgYSBsYXcgcGVybWl0dGluZyBhIG1hbiBkdXJpbmcgaGlzIGxpZmV0aW1lIHRvIGdpdmUgaGlzIGVzdGF0ZSBhbmQgYWxsb3RtZW50IHRvIGFueSBvbmUgaGUgd2lzaGVkLCBvciBpbiBoaXMgd2lsbCBhbmQgdGVzdGFtZW50IHNvIHRvIGxlYXZlIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1hbiwgdGhlbiwgc2F0aXNmaWVkIGEgcHJpdmF0ZSBncnVkZ2Ugb2YgaGlzIG93biBpbiBpbnRyb2R1Y2luZyB0aGUgbGF3OyBidXQgaGlzIGZlbGxvdyBjaXRpemVucyB3ZWxjb21lZCB0aGUgbGF3IG91dCBvZiBncmVlZCwgbWFkZSBpdCB2YWxpZCwgYW5kIHNvIGRlc3Ryb3llZCB0aGUgbW9zdCBleGNlbGxlbnQgb2YgaW5zdGl0dXRpb25zLiBGb3IgdGhlIG1lbiBvZiBwb3dlciBhbmQgaW5mbHVlbmNlIGF0IG9uY2UgYmVnYW4gdG8gYWNxdWlyZSBlc3RhdGVzIHdpdGhvdXQgc2NydXBsZSwgZWplY3RpbmcgdGhlIHJpZ2h0ZnVsIGhlaXJzIGZyb20gdGhlaXIgaW5oZXJpdGFuY2VzOyBhbmQgc3BlZWRpbHkgdGhlIHdlYWx0aCBvZiB0aGUgc3RhdGUgc3RyZWFtZWQgaW50byB0aGUgaGFuZHMgb2YgYSBmZXcgbWVuLCBhbmQgcG92ZXJ0eSBiZWNhbWUgdGhlIGdlbmVyYWwgcnVsZSwgYnJpbmdpbmcgaW4gaXRzIHRyYWluIGxhY2sgb2YgbGVpc3VyZSBmb3Igbm9ibGUgcHVyc3VpdHMgYW5kIG9jY3VwYXRpb25zIHVud29ydGh5IG9mIGZyZWVtZW4sIGFsb25nIHdpdGggZW52eSBhbmQgaGF0cmVkIHRvd2FyZHMgdGhlIG1lbiBvZiBwcm9wZXJ0eS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyB0aGVyZSB3ZXJlIGxlZnQgb2YgdGhlIG9sZCBTcGFydGFuIGZhbWlsaWVzIG5vdCBtb3JlIHRoYW4gc2V2ZW4gaHVuZHJlZCwgYW5kIG9mIHRoZXNlIHRoZXJlIHdlcmUgcGVyaGFwcyBhIGh1bmRyZWQgd2hvIHBvc3Nlc3NlZCBsYW5kIGFuZCBhbGxvdG1lbnQ7IHdoaWxlIHRoZSBvcmRpbmFyeSB0aHJvbmcsIHdpdGhvdXQgcmVzb3VyY2VzIGFuZCB3aXRob3V0IGNpdmljIHJpZ2h0cywgbGl2ZWQgaW4gZW5mb3JjZWQgaWRsZW5lc3MsIHNob3dpbmcgbm8gemVhbCBvciBlbmVyZ3kgaW4gd2FyZGluZyBvZmYgZm9yZWlnbiB3YXJzLCBidXQgZXZlciB3YXRjaGluZyBmb3Igc29tZSBvcHBvcnR1bml0eSB0byBzdWJ2ZXJ0IGFuZCBjaGFuZ2UgYWZmYWlycyBhdCBob21lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGVyZSBJIG1heSBzYXkgdGhhdCB0aGUgTGFjZWRhZW1vbmlhbiBzdGF0ZSBiZWdhbiB0byBzdWZmZXIgZGlzdGVtcGVyIGFuZCBjb3JydXB0aW9uIHNvb24gYWZ0ZXIgaXRzIHN1YnZlcnNpb24gb2YgdGhlIEF0aGVuaWFuIHN1cHJlbWFjeSBmaWxsZWQgaXQgd2l0aCBnb2xkIGFuZCBzaWx2ZXIuIEhvd2V2ZXIsIHNpbmNlIHRoZSBudW1iZXIgb2YgZmFtaWxpZXMgaW5zdGl0dXRlZCBieSBMeWN1cmd1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5Y3VyZ3VzPC90aXRsZT4sIHZpaWkuZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2FzIHN0aWxsIHByZXNlcnZlZCBpbiB0aGUgdHJhbnNtaXNzaW9uIG9mIGVzdGF0ZXMsIGFuZCBmYXRoZXIgbGVmdCB0byBzb24gaGlzIGluaGVyaXRhbmNlLCB0byBzb21lIGV4dGVudCB0aGUgY29udGludWFuY2Ugb2YgdGhpcyBvcmRlciBhbmQgZXF1YWxpdHkgc3VzdGFpbmVkIHRoZSBzdGF0ZSBpbiBzcGl0ZSBvZiBpdHMgZXJyb3JzIGluIG90aGVyIHJlc3BlY3RzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgdmlpaS5mLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgdmlpaS5mLjwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGEgY2VydGFpbiBwb3dlcmZ1bCBtYW4gY2FtZSB0byBiZSBlcGhvciB3aG8gd2FzIGhlYWRzdHJvbmcgYW5kIG9mIGEgdmlvbGVudCB0ZW1wZXIsIEVwaXRhZGV1cyBieSBuYW1lLCBoZSBoYWQgYSBxdWFycmVsIHdpdGggaGlzIHNvbiwgYW5kIGludHJvZHVjZWQgYSBsYXcgcGVybWl0dGluZyBhIG1hbiBkdXJpbmcgaGlzIGxpZmV0aW1lIHRvIGdpdmUgaGlzIGVzdGF0ZSBhbmQgYWxsb3RtZW50IHRvIGFueSBvbmUgaGUgd2lzaGVkLCBvciBpbiBoaXMgd2lsbCBhbmQgdGVzdGFtZW50IHNvIHRvIGxlYXZlIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuLCB0aGVuLCBzYXRpc2ZpZWQgYSBwcml2YXRlIGdydWRnZSBvZiBoaXMgb3duIGluIGludHJvZHVjaW5nIHRoZSBsYXc7IGJ1dCBoaXMgZmVsbG93IGNpdGl6ZW5zIHdlbGNvbWVkIHRoZSBsYXcgb3V0IG9mIGdyZWVkLCBtYWRlIGl0IHZhbGlkLCBhbmQgc28gZGVzdHJveWVkIHRoZSBtb3N0IGV4Y2VsbGVudCBvZiBpbnN0aXR1dGlvbnMuIEZvciB0aGUgbWVuIG9mIHBvd2VyIGFuZCBpbmZsdWVuY2UgYXQgb25jZSBiZWdhbiB0byBhY3F1aXJlIGVzdGF0ZXMgd2l0aG91dCBzY3J1cGxlLCBlamVjdGluZyB0aGUgcmlnaHRmdWwgaGVpcnMgZnJvbSB0aGVpciBpbmhlcml0YW5jZXM7IGFuZCBzcGVlZGlseSB0aGUgd2VhbHRoIG9mIHRoZSBzdGF0ZSBzdHJlYW1lZCBpbnRvIHRoZSBoYW5kcyBvZiBhIGZldyBtZW4sIGFuZCBwb3ZlcnR5IGJlY2FtZSB0aGUgZ2VuZXJhbCBydWxlLCBicmluZ2luZyBpbiBpdHMgdHJhaW4gbGFjayBvZiBsZWlzdXJlIGZvciBub2JsZSBwdXJzdWl0cyBhbmQgb2NjdXBhdGlvbnMgdW53b3J0aHkgb2YgZnJlZW1lbiwgYWxvbmcgd2l0aCBlbnZ5IGFuZCBoYXRyZWQgdG93YXJkcyB0aGUgbWVuIG9mIHByb3BlcnR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgdGhlcmUgd2VyZSBsZWZ0IG9mIHRoZSBvbGQgU3BhcnRhbiBmYW1pbGllcyBub3QgbW9yZSB0aGFuIHNldmVuIGh1bmRyZWQsIGFuZCBvZiB0aGVzZSB0aGVyZSB3ZXJlIHBlcmhhcHMgYSBodW5kcmVkIHdobyBwb3NzZXNzZWQgbGFuZCBhbmQgYWxsb3RtZW50OyB3aGlsZSB0aGUgb3JkaW5hcnkgdGhyb25nLCB3aXRob3V0IHJlc291cmNlcyBhbmQgd2l0aG91dCBjaXZpYyByaWdodHMsIGxpdmVkIGluIGVuZm9yY2VkIGlkbGVuZXNzLCBzaG93aW5nIG5vIHplYWwgb3IgZW5lcmd5IGluIHdhcmRpbmcgb2ZmIGZvcmVpZ24gd2FycywgYnV0IGV2ZXIgd2F0Y2hpbmcgZm9yIHNvbWUgb3Bwb3J0dW5pdHkgdG8gc3VidmVydCBhbmQgY2hhbmdlIGFmZmFpcnMgYXQgaG9tZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2lzLCB0aGVyZWZvcmUsIHRoaW5raW5nIGl0IGEgbm9ibGUgYWNoaWV2ZW1lbnQsIGFzIGl0IHdhcywgdG8gZXF1YWxpemUgYW5kIHJlc3RvcmUgdG8gZnVsbCBudW1iZXJzIHRoZSBib2R5IG9mIGNpdGl6ZW5zLCBiZWdhbiB0byBzb3VuZCB0aGUgaW5jbGluYXRpb25zIG9mIHBlb3BsZS4gVGhlIHlvdW5nIG1lbiwgYXMgaGUgZm91bmQsIHF1aWNrbHkgYW5kIGJleW9uZCBoaXMgZXhwZWN0YXRpb25zIGdhdmUgZWFyIHRvIGhpbSwgYW5kIHN0cmlwcGVkIHRoZW1zZWx2ZXMgZm9yIHRoZSBjb250ZXN0IGluIGJlaGFsZiBvZiB2aXJ0dWUsIGxpa2UgaGltIGNhc3RpbmcgYXNpZGUgdGhlaXIgb2xkIHdheXMgb2YgbGl2aW5nIGFzIHdvcm4tb3V0IGdhcm1lbnRzIGluIG9yZGVyIHRvIGF0dGFpbiBsaWJlcnR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbW9zdCBvZiB0aGUgb2xkZXIgbWVuLCBzaW5jZSB0aGV5IHdlcmUgbm93IGZhciBnb25lIGluIGNvcnJ1cHRpb24sIGZlYXJlZCBhbmQgc2h1ZGRlcmVkIGF0IHRoZSBuYW1lIG9mIEx5Y3VyZ3VzIGFzIGlmIHRoZXkgaGFkIHJ1biBhd2F5IGZyb20gdGhlaXIgbWFzdGVyIGFuZCB3ZXJlIGJlaW5nIGxlZCBiYWNrIHRvIGhpbSwgYW5kIHRoZXkgdXBicmFpZGVkIEFnaXMgZm9yIGJld2FpbGluZyB0aGUgcHJlc2VudCBzdGF0ZSBvZiBhZmZhaXJzIGFuZCB5ZWFybmluZyBhZnRlciB0aGUgYW5jaWVudCBkaWduaXR5IG9mIFNwYXJ0YS4gTHlzYW5kZXIsIGhvd2V2ZXIsIHRoZSBzb24gb2YgTGlieXMsIE1hbmRyb2NsZWlkYXMgdGhlIHNvbiBvZiBFY3BoYW5lcywgYXMgd2VsbCBhcyBBZ2VzaWxhw7xzLCBhcHByb3ZlZCBvZiB0aGUga2luZydzIGFzcGlyYXRpb25zIGFuZCBzdXBwb3J0ZWQgaGltIGluIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkx5c2FuZGVyIHdhcyBpbiB0aGUgaGlnaGVzdCByZXB1dGUgYW1vbmcgdGhlIGNpdGl6ZW5zLCBhbmQgTWFuZHJvY2xlaWRhcyB3YXMgdGhlIGFibGVzdCBHcmVlayBvZiBoaXMgdGltZSBpbiBzZXR0aW5nIHNjaGVtZXMgb24gZm9vdCwgYW5kIGhpcyBzYWdhY2l0eSBhbmQgY3JhZnQgd2VyZSBtaW5nbGVkIHdpdGggZGFyaW5nOyBBZ2VzaWxhw7xzLCB3aG8gd2FzIHRoZSBraW5nJ3MgdW5jbGUgb24gaGlzIG1vdGhlcidzIHNpZGUsIGFuZCBhIHBvd2VyZnVsIG9yYXRvciwgdGhvdWdoIG90aGVyd2lzZSBlZmZlbWluYXRlIGFuZCBhdmFyaWNpb3VzLCBXYXMgb3Blbmx5IHVyZ2VkIG9uIGFuZCBlbmNvdXJhZ2VkIGJ5IGhpcyBzb24gSGlwcG9tZWRvbiwgd2hvIGhhZCB3b24gZmFpciBmYW1lIGluIG1hbnkgd2FycywgYW5kIGhhZCBncmVhdCBpbmZsdWVuY2UgYmVjYXVzZSBoZSBzdG9vZCBpbiBmYXZvdXIgd2l0aCB0aGUgeW91bmcgbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hhdCByZWFsbHkgaW5kdWNlZCBBZ2VzaWxhw7xzIHRvIHRha2UgcGFydCBpbiB0aGUga2luZydzIGVudGVycHJpc2Ugd2FzIHRoZSBtdWx0aXR1ZGUgb2YgaGlzIGRlYnRzLCBvZiB3aGljaCBoZSBob3BlZCB0byByaWQgaGltc2VsZiBieSBjaGFuZ2luZyB0aGUgY29uc3RpdHV0aW9uLiBBcyBzb29uLCB0aGVuLCBhcyBBZ2lzIGhhZCB3b24gb3ZlciBBZ2VzaWxhw7xzLCBoZSBzdHJhaWdodHdheSBzb3VnaHQgd2l0aCB0aGUgYWlkIG9mIGhpcyB1bmNsZSB0byBwZXJzdWFkZSBoaXMgbW90aGVyLCB3aG8gd2FzIGEgc2lzdGVyIG9mIEFnZXNpbGHDvHMsIGFuZCBvd2luZyB0byB0aGUgbXVsdGl0dWRlIG9mIGhlciByZXRhaW5lcnMsIGZyaWVuZHMsIGFuZCBkZWJ0b3JzLCBoYWQgZ3JlYXQgaW5mbHVlbmNlIGluIHRoZSBzdGF0ZSBhbmQgdG9vayBhIGxhcmdlIHBhcnQgaW4gcHVibGljIGFmZmFpcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2lzLCB0aGVyZWZvcmUsIHRoaW5raW5nIGl0IGEgbm9ibGUgYWNoaWV2ZW1lbnQsIGFzIGl0IHdhcywgdG8gZXF1YWxpemUgYW5kIHJlc3RvcmUgdG8gZnVsbCBudW1iZXJzIHRoZSBib2R5IG9mIGNpdGl6ZW5zLCBiZWdhbiB0byBzb3VuZCB0aGUgaW5jbGluYXRpb25zIG9mIHBlb3BsZS4gVGhlIHlvdW5nIG1lbiwgYXMgaGUgZm91bmQsIHF1aWNrbHkgYW5kIGJleW9uZCBoaXMgZXhwZWN0YXRpb25zIGdhdmUgZWFyIHRvIGhpbSwgYW5kIHN0cmlwcGVkIHRoZW1zZWx2ZXMgZm9yIHRoZSBjb250ZXN0IGluIGJlaGFsZiBvZiB2aXJ0dWUsIGxpa2UgaGltIGNhc3RpbmcgYXNpZGUgdGhlaXIgb2xkIHdheXMgb2YgbGl2aW5nIGFzIHdvcm4tb3V0IGdhcm1lbnRzIGluIG9yZGVyIHRvIGF0dGFpbiBsaWJlcnR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IG9mIHRoZSBvbGRlciBtZW4sIHNpbmNlIHRoZXkgd2VyZSBub3cgZmFyIGdvbmUgaW4gY29ycnVwdGlvbiwgZmVhcmVkIGFuZCBzaHVkZGVyZWQgYXQgdGhlIG5hbWUgb2YgTHljdXJndXMgYXMgaWYgdGhleSBoYWQgcnVuIGF3YXkgZnJvbSB0aGVpciBtYXN0ZXIgYW5kIHdlcmUgYmVpbmcgbGVkIGJhY2sgdG8gaGltLCBhbmQgdGhleSB1cGJyYWlkZWQgQWdpcyBmb3IgYmV3YWlsaW5nIHRoZSBwcmVzZW50IHN0YXRlIG9mIGFmZmFpcnMgYW5kIHllYXJuaW5nIGFmdGVyIHRoZSBhbmNpZW50IGRpZ25pdHkgb2YgU3BhcnRhLiBMeXNhbmRlciwgaG93ZXZlciwgdGhlIHNvbiBvZiBMaWJ5cywgTWFuZHJvY2xlaWRhcyB0aGUgc29uIG9mIEVjcGhhbmVzLCBhcyB3ZWxsIGFzIEFnZXNpbGHDvHMsIGFwcHJvdmVkIG9mIHRoZSBraW5nJ3MgYXNwaXJhdGlvbnMgYW5kIHN1cHBvcnRlZCBoaW0gaW4gdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkx5c2FuZGVyIHdhcyBpbiB0aGUgaGlnaGVzdCByZXB1dGUgYW1vbmcgdGhlIGNpdGl6ZW5zLCBhbmQgTWFuZHJvY2xlaWRhcyB3YXMgdGhlIGFibGVzdCBHcmVlayBvZiBoaXMgdGltZSBpbiBzZXR0aW5nIHNjaGVtZXMgb24gZm9vdCwgYW5kIGhpcyBzYWdhY2l0eSBhbmQgY3JhZnQgd2VyZSBtaW5nbGVkIHdpdGggZGFyaW5nOyBBZ2VzaWxhw7xzLCB3aG8gd2FzIHRoZSBraW5nJ3MgdW5jbGUgb24gaGlzIG1vdGhlcidzIHNpZGUsIGFuZCBhIHBvd2VyZnVsIG9yYXRvciwgdGhvdWdoIG90aGVyd2lzZSBlZmZlbWluYXRlIGFuZCBhdmFyaWNpb3VzLCBXYXMgb3Blbmx5IHVyZ2VkIG9uIGFuZCBlbmNvdXJhZ2VkIGJ5IGhpcyBzb24gSGlwcG9tZWRvbiwgd2hvIGhhZCB3b24gZmFpciBmYW1lIGluIG1hbnkgd2FycywgYW5kIGhhZCBncmVhdCBpbmZsdWVuY2UgYmVjYXVzZSBoZSBzdG9vZCBpbiBmYXZvdXIgd2l0aCB0aGUgeW91bmcgbWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGF0IHJlYWxseSBpbmR1Y2VkIEFnZXNpbGHDvHMgdG8gdGFrZSBwYXJ0IGluIHRoZSBraW5nJ3MgZW50ZXJwcmlzZSB3YXMgdGhlIG11bHRpdHVkZSBvZiBoaXMgZGVidHMsIG9mIHdoaWNoIGhlIGhvcGVkIHRvIHJpZCBoaW1zZWxmIGJ5IGNoYW5naW5nIHRoZSBjb25zdGl0dXRpb24uIEFzIHNvb24sIHRoZW4sIGFzIEFnaXMgaGFkIHdvbiBvdmVyIEFnZXNpbGHDvHMsIGhlIHN0cmFpZ2h0d2F5IHNvdWdodCB3aXRoIHRoZSBhaWQgb2YgaGlzIHVuY2xlIHRvIHBlcnN1YWRlIGhpcyBtb3RoZXIsIHdobyB3YXMgYSBzaXN0ZXIgb2YgQWdlc2lsYcO8cywgYW5kIG93aW5nIHRvIHRoZSBtdWx0aXR1ZGUgb2YgaGVyIHJldGFpbmVycywgZnJpZW5kcywgYW5kIGRlYnRvcnMsIGhhZCBncmVhdCBpbmZsdWVuY2UgaW4gdGhlIHN0YXRlIGFuZCB0b29rIGEgbGFyZ2UgcGFydCBpbiBwdWJsaWMgYWZmYWlycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHNoZSBoZWFyZCBoZXIgc29uJ3MgcGxlYSwgc2hlIHdhcyBhdCBmaXJzdCBhbWF6ZWQsIGFuZCB0cmllZCB0byBzdG9wIHRoZSB5b3VuZyBtYW4gZnJvbSBhdHRlbXB0aW5nIHdoYXQgc2hlIHRob3VnaHQgd2FzIG5laXRoZXIgcG9zc2libGUgbm9yIHByb2ZpdGFibGU7IGJ1dCBBZ2VzaWxhw7xzIHRyaWVkIHRvIHNob3cgaGVyIHRoYXQgdGhlIGtpbmcncyBwcm9qZWN0IHdvdWxkIGJlIGZlYXNpYmxlIGFuZCBpdHMgYWNjb21wbGlzaG1lbnQgYWR2YW50YWdlb3VzLCBhbmQgdGhlIGtpbmcgaGltc2VsZiBiZXNvdWdodCBoaXMgbW90aGVyIHRvIGNvbnRyaWJ1dGUgaGVyIHdlYWx0aCBmb3IgdGhlIGFkdmFuY2VtZW50IG9mIGhpcyBhbWJpdGlvbiBhbmQgZ2xvcnkuIEZvciBpbiB0aGUgbWF0dGVyIG9mIHByb3BlcnR5LCBoZSBzYWlkLCBoZSBjb3VsZCBub3QgZXF1YWwgdGhlIG90aGVyIGtpbmdzIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPihzaW5jZSB0aGUgc2VydmFudHMgYW5kIHNsYXZlcyBvZiB0aGUgc2F0cmFwcyBhbmQgb3ZlcnNlZXJzIG9mIFB0b2xlbXkgYW5kIFNlbGV1Y3VzIGhhZCBsYXJnZXIgcG9zc2Vzc2lvbnMgdGhhbiBhbGwgdGhlIGtpbmdzIG9mIFNwYXJ0YSBwdXQgdG9nZXRoZXIpOyBidXQgaWYgaW4gc2VsZi1yZXN0cmFpbnQsIHNpbXBsaWNpdHksIGFuZCBtYWduYW5pbWl0eSBoZSBzaG91bGQgc3VycGFzcyB0aGVpciBsdXh1cnksIGFuZCB0aGVyZWJ5IGVzdGFibGlzaCBlcXVhbGl0eSBhbmQgY29tbXVuaXR5IG9mIHBvc3Nlc3Npb24gYW1vbmcgaGlzIGNpdGl6ZW5zLCBoZSB3b3VsZCB3aW4gdGhlIG5hbWUgYW5kIGZhbWUgb2YgYSByZWFsbHkgZ3JlYXQga2luZy4gVGhlIHdvbWVuLCBsaWZ0ZWQgdXAgYnkgdGhlIHlvdW5nIG1hbidzIGhpZ2ggYW1iaXRpb24sIHdlcmUgc28gY2hhbmdlZCBpbiB0aGVpciBwdXJwb3NlcywgYW5kIHBvc3Nlc3NlZCwgYXMgaXQgd2VyZSwgYnkgc28gZ3JlYXQgYW4gaW5zcGlyYXRpb24gdG8gdGFrZSB0aGUgbm9ibGUgY291cnNlLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IHRoZXkgam9pbmVkIGluIHVyZ2luZyBhbmQgaGFzdGVuaW5nIG9uIHRoZSBwcm9qZWN0cyBvZiBBZ2lzLCBzZW50IGZvciB0aGVpciBmcmllbmRzIGFtb25nIHRoZSBtZW4gYW5kIGludml0ZWQgdGhlbSB0byBoZWxwLCBhbmQgaGVsZCBjb25mZXJlbmNlIHdpdGggdGhlIHdvbWVuIGJlc2lkZXMsIHNpbmNlIHRoZXkgd2VyZSB3ZWxsIGF3YXJlIHRoYXQgdGhlIG1lbiBvZiBTcGFydGEgd2VyZSBhbHdheXMgb2JlZGllbnQgdG8gdGhlaXIgd2l2ZXMsIGFuZCBhbGxvd2VkIHRoZW0gdG8gbWVkZGxlIGluIHB1YmxpYyBhZmZhaXJzIG1vcmUgdGhhbiB0aGV5IHRoZW1zZWx2ZXMgd2VyZSBhbGxvd2VkIHRvIG1lZGRsZSBpbiBkb21lc3RpYyBjb25jZXJucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHNoZSBoZWFyZCBoZXIgc29uJ3MgcGxlYSwgc2hlIHdhcyBhdCBmaXJzdCBhbWF6ZWQsIGFuZCB0cmllZCB0byBzdG9wIHRoZSB5b3VuZyBtYW4gZnJvbSBhdHRlbXB0aW5nIHdoYXQgc2hlIHRob3VnaHQgd2FzIG5laXRoZXIgcG9zc2libGUgbm9yIHByb2ZpdGFibGU7IGJ1dCBBZ2VzaWxhw7xzIHRyaWVkIHRvIHNob3cgaGVyIHRoYXQgdGhlIGtpbmcncyBwcm9qZWN0IHdvdWxkIGJlIGZlYXNpYmxlIGFuZCBpdHMgYWNjb21wbGlzaG1lbnQgYWR2YW50YWdlb3VzLCBhbmQgdGhlIGtpbmcgaGltc2VsZiBiZXNvdWdodCBoaXMgbW90aGVyIHRvIGNvbnRyaWJ1dGUgaGVyIHdlYWx0aCBmb3IgdGhlIGFkdmFuY2VtZW50IG9mIGhpcyBhbWJpdGlvbiBhbmQgZ2xvcnkuIEZvciBpbiB0aGUgbWF0dGVyIG9mIHByb3BlcnR5LCBoZSBzYWlkLCBoZSBjb3VsZCBub3QgZXF1YWwgdGhlIG90aGVyIGtpbmdzIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPihzaW5jZSB0aGUgc2VydmFudHMgYW5kIHNsYXZlcyBvZiB0aGUgc2F0cmFwcyBhbmQgb3ZlcnNlZXJzIG9mIFB0b2xlbXkgYW5kIFNlbGV1Y3VzIGhhZCBsYXJnZXIgcG9zc2Vzc2lvbnMgdGhhbiBhbGwgdGhlIGtpbmdzIG9mIFNwYXJ0YSBwdXQgdG9nZXRoZXIpOyBidXQgaWYgaW4gc2VsZi1yZXN0cmFpbnQsIHNpbXBsaWNpdHksIGFuZCBtYWduYW5pbWl0eSBoZSBzaG91bGQgc3VycGFzcyB0aGVpciBsdXh1cnksIGFuZCB0aGVyZWJ5IGVzdGFibGlzaCBlcXVhbGl0eSBhbmQgY29tbXVuaXR5IG9mIHBvc3Nlc3Npb24gYW1vbmcgaGlzIGNpdGl6ZW5zLCBoZSB3b3VsZCB3aW4gdGhlIG5hbWUgYW5kIGZhbWUgb2YgYSByZWFsbHkgZ3JlYXQga2luZy4gVGhlIHdvbWVuLCBsaWZ0ZWQgdXAgYnkgdGhlIHlvdW5nIG1hbidzIGhpZ2ggYW1iaXRpb24sIHdlcmUgc28gY2hhbmdlZCBpbiB0aGVpciBwdXJwb3NlcywgYW5kIHBvc3Nlc3NlZCwgYXMgaXQgd2VyZSwgYnkgc28gZ3JlYXQgYW4gaW5zcGlyYXRpb24gdG8gdGFrZSB0aGUgbm9ibGUgY291cnNlLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgdGhleSBqb2luZWQgaW4gdXJnaW5nIGFuZCBoYXN0ZW5pbmcgb24gdGhlIHByb2plY3RzIG9mIEFnaXMsIHNlbnQgZm9yIHRoZWlyIGZyaWVuZHMgYW1vbmcgdGhlIG1lbiBhbmQgaW52aXRlZCB0aGVtIHRvIGhlbHAsIGFuZCBoZWxkIGNvbmZlcmVuY2Ugd2l0aCB0aGUgd29tZW4gYmVzaWRlcywgc2luY2UgdGhleSB3ZXJlIHdlbGwgYXdhcmUgdGhhdCB0aGUgbWVuIG9mIFNwYXJ0YSB3ZXJlIGFsd2F5cyBvYmVkaWVudCB0byB0aGVpciB3aXZlcywgYW5kIGFsbG93ZWQgdGhlbSB0byBtZWRkbGUgaW4gcHVibGljIGFmZmFpcnMgbW9yZSB0aGFuIHRoZXkgdGhlbXNlbHZlcyB3ZXJlIGFsbG93ZWQgdG8gbWVkZGxlIGluIGRvbWVzdGljIGNvbmNlcm5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdywgYXQgdGhpcyB0aW1lIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIHdlYWx0aCBvZiBTcGFydGEgd2FzIGluIHRoZSBoYW5kcyBvZiB0aGUgd29tZW4sIGFuZCB0aGlzIG1hZGUgdGhlIHdvcmsgb2YgQWdpcyBhIGdyaWV2b3VzIGFuZCBkaWZmaWN1bHQgb25lLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgd29tZW4gd2VyZSBvcHBvc2VkIHRvIGl0LCBub3Qgb25seSBiZWNhdXNlIHRoZXkgd291bGQgYmUgc3RyaXBwZWQgb2YgdGhlIGx1eHVyeSB3aGljaCwgaW4gdGhlIGdlbmVyYWwgbGFjayBvZiBoaWdoZXIgY3VsdHVyZSwgbWFkZSB0aGVpciBsaXZlcyBzZWVtIGhhcHB5LCBidXQgYWxzbyBiZWNhdXNlIHRoZXkgc2F3IHRoYXQgdGhlIGhvbm91ciBhbmQgaW5mbHVlbmNlIHdoaWNoIHRoZXkgZW5qb3llZCBpbiBjb25zZXF1ZW5jZSBvZiB0aGVpciB3ZWFsdGggd291bGQgYmUgY3V0IG9mZi4gU28gdGhleSBoYWQgcmVjb3Vyc2UgdG8gTGVvbmlkYXMsIGFuZCBiZXNvdWdodCBoaW0sIHNpbmNlIGhlIHdhcyBhbiBvbGRlciBtYW4sIHRvIHdpdGhzdGFuZCBBZ2lzIGFuZCBoaW5kZXIgd2hhdCBoZSB3YXMgdHJ5aW5nIHRvIGFjY29tcGxpc2guIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkxlb25pZGFzLCBhY2NvcmRpbmdseSwgd2FzIGRlc2lyb3VzIG9mIGFpZGluZyB0aGUgcmljaCwgYnV0IGhlIGZlYXJlZCB0aGUgcGVvcGxlLCB3aG8gd2VyZSBlYWdlciBmb3IgYSByZXZvbHV0aW9uLiBIZSB0aGVyZWZvcmUgbWFkZSBubyBvcGVuIG9wcG9zaXRpb24gdG8gQWdpcywgYnV0IHNlY3JldGx5IHNvdWdodCB0byBkYW1hZ2UgaGlzIHVuZGVydGFraW5nIGFuZCBicmluZyBpdCB0byBub3VnaHQgYnkgc2xhbmRlcmluZyBoaW0gdG8gdGhlIGNoaWVmIG1hZ2lzdHJhdGVzLCBkZWNsYXJpbmcgdGhhdCBoZSB3YXMgcHVyY2hhc2luZyBhIHR5cmFubnkgYnkgb2ZmZXJpbmcgdG8gdGhlIHBvb3IgdGhlIHByb3BlcnR5IG9mIHRoZSByaWNoLCBhbmQgYnkgZGlzdHJpYnV0aW9uIG9mIGxhbmQgYW5kIHJlbWlzc2lvbiBvZiBkZWJ0cyB3YXMgYnV5aW5nIGEgbGFyZ2UgYm9keS1ndWFyZCBmb3IgaGltc2VsZiwgbm90IG1hbnkgY2l0aXplbnMgZm9yIFNwYXJ0YS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgd29tZW4gd2VyZSBvcHBvc2VkIHRvIGl0LCBub3Qgb25seSBiZWNhdXNlIHRoZXkgd291bGQgYmUgc3RyaXBwZWQgb2YgdGhlIGx1eHVyeSB3aGljaCwgaW4gdGhlIGdlbmVyYWwgbGFjayBvZiBoaWdoZXIgY3VsdHVyZSwgbWFkZSB0aGVpciBsaXZlcyBzZWVtIGhhcHB5LCBidXQgYWxzbyBiZWNhdXNlIHRoZXkgc2F3IHRoYXQgdGhlIGhvbm91ciBhbmQgaW5mbHVlbmNlIHdoaWNoIHRoZXkgZW5qb3llZCBpbiBjb25zZXF1ZW5jZSBvZiB0aGVpciB3ZWFsdGggd291bGQgYmUgY3V0IG9mZi4gU28gdGhleSBoYWQgcmVjb3Vyc2UgdG8gTGVvbmlkYXMsIGFuZCBiZXNvdWdodCBoaW0sIHNpbmNlIGhlIHdhcyBhbiBvbGRlciBtYW4sIHRvIHdpdGhzdGFuZCBBZ2lzIGFuZCBoaW5kZXIgd2hhdCBoZSB3YXMgdHJ5aW5nIHRvIGFjY29tcGxpc2guIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkxlb25pZGFzLCBhY2NvcmRpbmdseSwgd2FzIGRlc2lyb3VzIG9mIGFpZGluZyB0aGUgcmljaCwgYnV0IGhlIGZlYXJlZCB0aGUgcGVvcGxlLCB3aG8gd2VyZSBlYWdlciBmb3IgYSByZXZvbHV0aW9uLiBIZSB0aGVyZWZvcmUgbWFkZSBubyBvcGVuIG9wcG9zaXRpb24gdG8gQWdpcywgYnV0IHNlY3JldGx5IHNvdWdodCB0byBkYW1hZ2UgaGlzIHVuZGVydGFraW5nIGFuZCBicmluZyBpdCB0byBub3VnaHQgYnkgc2xhbmRlcmluZyBoaW0gdG8gdGhlIGNoaWVmIG1hZ2lzdHJhdGVzLCBkZWNsYXJpbmcgdGhhdCBoZSB3YXMgcHVyY2hhc2luZyBhIHR5cmFubnkgYnkgb2ZmZXJpbmcgdG8gdGhlIHBvb3IgdGhlIHByb3BlcnR5IG9mIHRoZSByaWNoLCBhbmQgYnkgZGlzdHJpYnV0aW9uIG9mIGxhbmQgYW5kIHJlbWlzc2lvbiBvZiBkZWJ0cyB3YXMgYnV5aW5nIGEgbGFyZ2UgYm9keS1ndWFyZCBmb3IgaGltc2VsZiwgbm90IG1hbnkgY2l0aXplbnMgZm9yIFNwYXJ0YS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBBZ2lzIHByb2N1cmVkIEx5c2FuZGVyJ3MgZWxlY3Rpb24gYXMgZXBob3IsIGFuZCBhdCBvbmNlIGVtcGxveWVkIGhpbSB0byBpbnRyb2R1Y2UgYSBiaWxsIGludG8gdGhlIHNlbmF0ZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BYm91dCAyNDMgQi5DLjwvbm90ZT4gdGhlIGNoaWVmIHByb3Zpc2lvbnMgb2Ygd2hpY2ggd2VyZSB0aGF0IGRlYnRvcnMgc2hvdWxkIGJlIHJlbGlldmVkIG9mIHRoZWlyIGRlYnRzLCBhbmQgdGhhdCB0aGUgbGFuZCBzaG91bGQgYmUgZGl2aWRlZCB1cCwgdGhhdCB3aGljaCBsYXkgYmV0d2VlbiB0aGUgd2F0ZXItY291cnNlIGF0IFBlbGxlbmUgYW5kIFRhw79nZXR1cywgTWFsZWEsIGFuZCBTZWxsYXNpYSwgaW50byBmb3J0eS1maXZlIGh1bmRyZWQgbG90cywgYW5kIHRoYXQgd2hpY2ggbGF5IG91dHNpZGUgdGhpcyBpbnRvIGZpZnRlZW4gdGhvdXNhbmQ7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgdGhpcyBsYXJnZXIgbGFuZCBzaG91bGQgYmUgYXBwb3J0aW9uZWQgYW1vbmcgdGhvc2Ugb2YgdGhlIHByb3ZpbmNpYWxzIHdobyB3ZXJlIGNhcGFibGUgb2YgYmVhcmluZyBhcm1zLCBhbmQgdGhlIHNtYWxsZXIgYW1vbmcgdGhlIGdlbnVpbmUgU3BhcnRhbnM7IHRoYXQgdGhlIG51bWJlciBvZiB0aGVzZSBTcGFydGFucyBzaG91bGQgYmUgZmlsbGVkIHVwIGZyb20gdGhlIHByb3ZpbmNpYWxzIGFuZCBmb3JlaWduZXJzIHdobyBoYWQgcmVjZWl2ZWQgdGhlIHJlYXJpbmcgb2YgZnJlZW1lbiBhbmQgd2VyZSwgYmVzaWRlcywgb2Ygdmlnb3JvdXMgYm9kaWVzIGFuZCBpbiB0aGUgcHJpbWUgb2YgbGlmZTsgYW5kIHRoYXQgdGhlc2Ugc2hvdWxkIGJlIGZvcm1lZCBpbnRvIGZpZnRlZW4gcHVibGljIG1lc3NlcyBieSBmb3VyIGh1bmRyZWRzIGFuZCB0d28gaHVuZHJlZHMsIGFuZCBzaG91bGQgcHJhY3Rpc2UgdGhlIG1vZGUgb2YgbGlmZSB3aGljaCB0aGUgYW5jaWVudCBTcGFydGFucyBoYWQgZm9sbG93ZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBBZ2lzIHByb2N1cmVkIEx5c2FuZGVyJ3MgZWxlY3Rpb24gYXMgZXBob3IsIGFuZCBhdCBvbmNlIGVtcGxveWVkIGhpbSB0byBpbnRyb2R1Y2UgYSBiaWxsIGludG8gdGhlIHNlbmF0ZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFib3V0IDI0MyBCLkMuPC9ub3RlPiB0aGUgY2hpZWYgcHJvdmlzaW9ucyBvZiB3aGljaCB3ZXJlIHRoYXQgZGVidG9ycyBzaG91bGQgYmUgcmVsaWV2ZWQgb2YgdGhlaXIgZGVidHMsIGFuZCB0aGF0IHRoZSBsYW5kIHNob3VsZCBiZSBkaXZpZGVkIHVwLCB0aGF0IHdoaWNoIGxheSBiZXR3ZWVuIHRoZSB3YXRlci1jb3Vyc2UgYXQgUGVsbGVuZSBhbmQgVGHDv2dldHVzLCBNYWxlYSwgYW5kIFNlbGxhc2lhLCBpbnRvIGZvcnR5LWZpdmUgaHVuZHJlZCBsb3RzLCBhbmQgdGhhdCB3aGljaCBsYXkgb3V0c2lkZSB0aGlzIGludG8gZmlmdGVlbiB0aG91c2FuZDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgdGhpcyBsYXJnZXIgbGFuZCBzaG91bGQgYmUgYXBwb3J0aW9uZWQgYW1vbmcgdGhvc2Ugb2YgdGhlIHByb3ZpbmNpYWxzIHdobyB3ZXJlIGNhcGFibGUgb2YgYmVhcmluZyBhcm1zLCBhbmQgdGhlIHNtYWxsZXIgYW1vbmcgdGhlIGdlbnVpbmUgU3BhcnRhbnM7IHRoYXQgdGhlIG51bWJlciBvZiB0aGVzZSBTcGFydGFucyBzaG91bGQgYmUgZmlsbGVkIHVwIGZyb20gdGhlIHByb3ZpbmNpYWxzIGFuZCBmb3JlaWduZXJzIHdobyBoYWQgcmVjZWl2ZWQgdGhlIHJlYXJpbmcgb2YgZnJlZW1lbiBhbmQgd2VyZSwgYmVzaWRlcywgb2Ygdmlnb3JvdXMgYm9kaWVzIGFuZCBpbiB0aGUgcHJpbWUgb2YgbGlmZTsgYW5kIHRoYXQgdGhlc2Ugc2hvdWxkIGJlIGZvcm1lZCBpbnRvIGZpZnRlZW4gcHVibGljIG1lc3NlcyBieSBmb3VyIGh1bmRyZWRzIGFuZCB0d28gaHVuZHJlZHMsIGFuZCBzaG91bGQgcHJhY3Rpc2UgdGhlIG1vZGUgb2YgbGlmZSB3aGljaCB0aGUgYW5jaWVudCBTcGFydGFucyBoYWQgZm9sbG93ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cmhldHJhPC9xPiB3YXMgaW50cm9kdWNlZCBpbiB0aGUgc2VuYXRlLCBhbmQgdGhlIHNlbmF0b3JzIHdlcmUgZGl2aWRlZCBpbiBvcGluaW9uLiBMeXNhbmRlciB0aGVyZWZvcmUgY2FsbGVkIHRvZ2V0aGVyIGEgZ2VuZXJhbCBhc3NlbWJseSBhbmQgZGlzY3Vzc2VkIHRoZSBtYXR0ZXIgaGltc2VsZiB3aXRoIHRoZSBjaXRpemVucywgYW5kIE1hbmRyb2NsZWlkYXMgYW5kIEFnZXNpbGHDvHMgYmVnZ2VkIHRoZW0gbm90IHRvIHN1ZmZlciB0aGUgaW5zb2xlbnQgb3Bwb3NpdGlvbiBvZiBhIGZldyB0byBibGluZCB0aGVtIHRvIHRoZSBwcm9zdHJhdGlvbiBvZiBTcGFydGEncyBkaWduaXR5LCBidXQgdG8gY2FsbCB0byBtaW5kIHRoZSBlYXJsaWVyIG9yYWNsZXMgd2hpY2ggYmFkZSB0aGVtIGJld2FyZSBvZiB0aGUgbG92ZSBvZiByaWNoZXMgYXMgYSBmYXRhbCB0aGluZyBmb3IgU3BhcnRhLCBhcyB3ZWxsIGFzIHRoZSBvcmFjbGVzIHdoaWNoIGhhZCBsYXRlbHkgYmVlbiBicm91Z2h0IHRvIHRoZW0gZnJvbSBQYXNpcGhhw6suCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnJoZXRyYTwvcT4gd2FzIGludHJvZHVjZWQgaW4gdGhlIHNlbmF0ZSwgYW5kIHRoZSBzZW5hdG9ycyB3ZXJlIGRpdmlkZWQgaW4gb3Bpbmlvbi4gTHlzYW5kZXIgdGhlcmVmb3JlIGNhbGxlZCB0b2dldGhlciBhIGdlbmVyYWwgYXNzZW1ibHkgYW5kIGRpc2N1c3NlZCB0aGUgbWF0dGVyIGhpbXNlbGYgd2l0aCB0aGUgY2l0aXplbnMsIGFuZCBNYW5kcm9jbGVpZGFzIGFuZCBBZ2VzaWxhw7xzIGJlZ2dlZCB0aGVtIG5vdCB0byBzdWZmZXIgdGhlIGluc29sZW50IG9wcG9zaXRpb24gb2YgYSBmZXcgdG8gYmxpbmQgdGhlbSB0byB0aGUgcHJvc3RyYXRpb24gb2YgU3BhcnRhJ3MgZGlnbml0eSwgYnV0IHRvIGNhbGwgdG8gbWluZCB0aGUgZWFybGllciBvcmFjbGVzIHdoaWNoIGJhZGUgdGhlbSBiZXdhcmUgb2YgdGhlIGxvdmUgb2YgcmljaGVzIGFzIGEgZmF0YWwgdGhpbmcgZm9yIFNwYXJ0YSwgYXMgd2VsbCBhcyB0aGUgb3JhY2xlcyB3aGljaCBoYWQgbGF0ZWx5IGJlZW4gYnJvdWdodCB0byB0aGVtIGZyb20gUGFzaXBoYcOrLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlcmUgd2FzIGEgdGVtcGxlIG9mIFBhc2lwaGHDqyBhdCBUaGFsYW1hZSwgYW5kIGhlciBvcmFjbGUgdGhlcmUgd2FzIGhlbGQgaW4gaG9ub3VyLiBTb21lIHNheSB0aGF0IFBhc2lwaGHDqyB3YXMgb25lIG9mIHRoZSBkYXVnaHRlcnMgb2YgQXRsYXMsIGFuZCB0aGUgbW90aGVyIG9mIEFtbW9uIGJ5IFpldXMsIGFuZCBzb21lIHRoYXQgQ2Fzc2FuZHJhIHRoZSBkYXVnaHRlciBvZiBQcmlhbSBkaWVkIGF0IFRoYWxhbWFlLCBhbmQgd2FzIGNhbGxlZCBQYXNpcGhhw6sgYmVjYXVzZSBzaGUgPGVtcGg+ZGVjbGFyZWQ8L2VtcGg+IGhlciBvcmFjbGVzIDxlbXBoPnRvIGFsbDwvZW1waD4uICBQaHlsYXJjaHVzLCBob3dldmVyLCBzYXlzIHRoYXQgc2hlIHdhcyBhIGRhdWdodGVyIG9mIEFteWNsYXMsIERhcGhuZSBieSBuYW1lLCBhbmQgdGhhdCwgZmxlZWluZyB0aGUgZW1icmFjZXMgb2YgQXBvbGxvLCBzaGUgd2FzIGNoYW5nZWQgaW50byB0aGUgdHJlZSBvZiBsaWtlIG5hbWUsIGFmdGVyIHdoaWNoIHNoZSB3YXMgaG9ub3VyZWQgYnkgdGhlIGdvZCB3aXRoIHRoZSBnaWZ0IG9mIHByb3BoZXRpYyBwb3dlci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QmUgdGhpcyBhcyBpdCBtYXksIGl0IHdhcyBub3cgc2FpZCB0aGF0IHRoZSBvcmFjbGVzIGJyb3VnaHQgZnJvbSB0aGlzIGdvZGRlc3Mgb3JkYWluZWQgdGhhdCBhbGwgU3BhcnRhbnMgc2hvdWxkIGJlIG9uIGFuIGVxdWFsaXR5IGFjY29yZGluZyB0byB0aGUgb3JpZ2luYWwgbGF3IG1hZGUgYnkgTHljdXJndXMuIEFuZCBmaW5hbGx5LCBLaW5nIEFnaXMgY2FtZSBmb3J3YXJkIGFuZCBhZnRlciBhIGJyaWVmIGRpc2NvdXJzZSBzYWlkIHRoYXQgaGUgb2ZmZXJlZCB2ZXJ5IGxhcmdlIGNvbnRyaWJ1dGlvbnMgdG8gdGhlIGNvbnN0aXR1dGlvbnMgd2hpY2ggaGUgd2FzIHRyeWluZyB0byBlc3RhYmxpc2g7IGZvciBpbiB0aGUgZmlyc3QgcGxhY2UgaGUgcHV0IGludG8gdGhlIGNvbW1vbiBzdG9jayBoaXMgb3duIGVzdGF0ZSwgd2hpY2ggaW5jbHVkZWQgZXh0ZW5zaXZlIHRpbGxhZ2UgYW5kIHBhc3R1cmUsIGFuZCBhcGFydCBmcm9tIHRoaXMgc2l4IGh1bmRyZWQgdGFsZW50cyBpbiBtb25leTsgYW5kLCBiZXNpZGVzLCBoaXMgbW90aGVyIGFuZCBoaXMgZ3JhbmRtb3RoZXIgZGlkIGxpa2V3aXNlLCB0b2dldGhlciB3aXRoIHRoZWlyIHJlbGF0aXZlcyBhbmQgZnJpZW5kcywgYW5kIHRoZXkgd2VyZSB0aGUgd2VhbHRoaWVzdCBhbW9uZyB0aGUgU3BhcnRhbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGVyZSB3YXMgYSB0ZW1wbGUgb2YgUGFzaXBoYcOrIGF0IFRoYWxhbWFlLCBhbmQgaGVyIG9yYWNsZSB0aGVyZSB3YXMgaGVsZCBpbiBob25vdXIuIFNvbWUgc2F5IHRoYXQgUGFzaXBoYcOrIHdhcyBvbmUgb2YgdGhlIGRhdWdodGVycyBvZiBBdGxhcywgYW5kIHRoZSBtb3RoZXIgb2YgQW1tb24gYnkgWmV1cywgYW5kIHNvbWUgdGhhdCBDYXNzYW5kcmEgdGhlIGRhdWdodGVyIG9mIFByaWFtIGRpZWQgYXQgVGhhbGFtYWUsIGFuZCB3YXMgY2FsbGVkIFBhc2lwaGHDqyBiZWNhdXNlIHNoZSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmRlY2xhcmVkPC9lbXBoPiBoZXIgb3JhY2xlcyA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnRvIGFsbDwvZW1waD4uICBQaHlsYXJjaHVzLCBob3dldmVyLCBzYXlzIHRoYXQgc2hlIHdhcyBhIGRhdWdodGVyIG9mIEFteWNsYXMsIERhcGhuZSBieSBuYW1lLCBhbmQgdGhhdCwgZmxlZWluZyB0aGUgZW1icmFjZXMgb2YgQXBvbGxvLCBzaGUgd2FzIGNoYW5nZWQgaW50byB0aGUgdHJlZSBvZiBsaWtlIG5hbWUsIGFmdGVyIHdoaWNoIHNoZSB3YXMgaG9ub3VyZWQgYnkgdGhlIGdvZCB3aXRoIHRoZSBnaWZ0IG9mIHByb3BoZXRpYyBwb3dlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlIHRoaXMgYXMgaXQgbWF5LCBpdCB3YXMgbm93IHNhaWQgdGhhdCB0aGUgb3JhY2xlcyBicm91Z2h0IGZyb20gdGhpcyBnb2RkZXNzIG9yZGFpbmVkIHRoYXQgYWxsIFNwYXJ0YW5zIHNob3VsZCBiZSBvbiBhbiBlcXVhbGl0eSBhY2NvcmRpbmcgdG8gdGhlIG9yaWdpbmFsIGxhdyBtYWRlIGJ5IEx5Y3VyZ3VzLiBBbmQgZmluYWxseSwgS2luZyBBZ2lzIGNhbWUgZm9yd2FyZCBhbmQgYWZ0ZXIgYSBicmllZiBkaXNjb3Vyc2Ugc2FpZCB0aGF0IGhlIG9mZmVyZWQgdmVyeSBsYXJnZSBjb250cmlidXRpb25zIHRvIHRoZSBjb25zdGl0dXRpb25zIHdoaWNoIGhlIHdhcyB0cnlpbmcgdG8gZXN0YWJsaXNoOyBmb3IgaW4gdGhlIGZpcnN0IHBsYWNlIGhlIHB1dCBpbnRvIHRoZSBjb21tb24gc3RvY2sgaGlzIG93biBlc3RhdGUsIHdoaWNoIGluY2x1ZGVkIGV4dGVuc2l2ZSB0aWxsYWdlIGFuZCBwYXN0dXJlLCBhbmQgYXBhcnQgZnJvbSB0aGlzIHNpeCBodW5kcmVkIHRhbGVudHMgaW4gbW9uZXk7IGFuZCwgYmVzaWRlcywgaGlzIG1vdGhlciBhbmQgaGlzIGdyYW5kbW90aGVyIGRpZCBsaWtld2lzZSwgdG9nZXRoZXIgd2l0aCB0aGVpciByZWxhdGl2ZXMgYW5kIGZyaWVuZHMsIGFuZCB0aGV5IHdlcmUgdGhlIHdlYWx0aGllc3QgYW1vbmcgdGhlIFNwYXJ0YW5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGVvcGxlLCBhY2NvcmRpbmdseSwgd2VyZSBmaWxsZWQgd2l0aCBhbWF6ZW1lbnQgYXQgdGhlIG1hZ25hbmltaXR5IG9mIHRoZSB5b3VuZyBtYW4sIGFuZCB3ZXJlIGRlbGlnaHRlZCwgZmVlbGluZyB0aGF0IGFmdGVyIGEgbGFwc2Ugb2YgbmVhcmx5IHR3byBodW5kcmVkIHllYXJzIGEga2luZyBoYWQgYXBwZWFyZWQgd2hvIHdhcyB3b3J0aHkgb2YgU3BhcnRhOyBidXQgTGVvbmlkYXMsIG5vdyBtb3JlIHRoYW4gZXZlciwgc3Ryb3ZlIGluIG9wcG9zaXRpb24uIEZvciBoZSByZWFzb25lZCB0aGF0IGhlIHdvdWxkIGJlIGNvbXBlbGxlZCB0byBkbyBhcyBBZ2lzIGhhZCBkb25lLCBhbmQgdGhhdCBoZSB3b3VsZCBub3QgZ2V0IHRoZSBzYW1lIGdyYXRpdHVkZSBmb3IgaXQgYW1vbmcgdGhlIGNpdGl6ZW5zLCBidXQgdGhhdCBpZiBhbGwgdGhlIHJpY2ggYWxpa2UgbWFkZSB0aGVpciBwcm9wZXJ0eSBhIHBhcnQgb2YgdGhlIGNvbW1vbiBmdW5kLCB0aGUgaG9ub3VyIGZvciBpdCB3b3VsZCBiZSBnaXZlbiB0byBoaW0gYWxvbmUgd2hvIGhhZCBsZWQgdGhlIHdheS4gSGUgdGhlcmVmb3JlIGFza2VkIEFnaXMgaWYgaGUgdGhvdWdodCB0aGF0IEx5Y3VyZ3VzIGhhZCBzaG93biBoaW1zZWxmIGEganVzdCBhbmQgd29ydGh5IG1hbiwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdoZW4gQWdpcyBzYWlkIHRoYXQgaGUgZGlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoZW4sIHRoZW4sPC9xPiBzYWlkIExlb25pZGFzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpZCBMeWN1cmd1cyBlaXRoZXIgZ3JhbnQgYWJvbGl0aW9uIG9mIGRlYnRzIG9yIGFkbWl0IGZvcmVpZ25lcnMgaW50byBjaXRpemVuc2hpcOKAlGEgbWFuIHdobyBoZWxkIHRoYXQgdGhlIHN0YXRlIHdhcyBpbiBubyBoZWFsdGh5IHdheSBhdCBhbGwgaWYgaXQgZGlkIG5vdCBwcmFjdGlzZSBleHB1bHNpb24gb2YgZm9yZWlnbmVycz88L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBlb3BsZSwgYWNjb3JkaW5nbHksIHdlcmUgZmlsbGVkIHdpdGggYW1hemVtZW50IGF0IHRoZSBtYWduYW5pbWl0eSBvZiB0aGUgeW91bmcgbWFuLCBhbmQgd2VyZSBkZWxpZ2h0ZWQsIGZlZWxpbmcgdGhhdCBhZnRlciBhIGxhcHNlIG9mIG5lYXJseSB0d28gaHVuZHJlZCB5ZWFycyBhIGtpbmcgaGFkIGFwcGVhcmVkIHdobyB3YXMgd29ydGh5IG9mIFNwYXJ0YTsgYnV0IExlb25pZGFzLCBub3cgbW9yZSB0aGFuIGV2ZXIsIHN0cm92ZSBpbiBvcHBvc2l0aW9uLiBGb3IgaGUgcmVhc29uZWQgdGhhdCBoZSB3b3VsZCBiZSBjb21wZWxsZWQgdG8gZG8gYXMgQWdpcyBoYWQgZG9uZSwgYW5kIHRoYXQgaGUgd291bGQgbm90IGdldCB0aGUgc2FtZSBncmF0aXR1ZGUgZm9yIGl0IGFtb25nIHRoZSBjaXRpemVucywgYnV0IHRoYXQgaWYgYWxsIHRoZSByaWNoIGFsaWtlIG1hZGUgdGhlaXIgcHJvcGVydHkgYSBwYXJ0IG9mIHRoZSBjb21tb24gZnVuZCwgdGhlIGhvbm91ciBmb3IgaXQgd291bGQgYmUgZ2l2ZW4gdG8gaGltIGFsb25lIHdobyBoYWQgbGVkIHRoZSB3YXkuIEhlIHRoZXJlZm9yZSBhc2tlZCBBZ2lzIGlmIGhlIHRob3VnaHQgdGhhdCBMeWN1cmd1cyBoYWQgc2hvd24gaGltc2VsZiBhIGp1c3QgYW5kIHdvcnRoeSBtYW4sIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuIEFnaXMgc2FpZCB0aGF0IGhlIGRpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoZW4sIHRoZW4sPC9xPiBzYWlkIExlb25pZGFzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZGlkIEx5Y3VyZ3VzIGVpdGhlciBncmFudCBhYm9saXRpb24gb2YgZGVidHMgb3IgYWRtaXQgZm9yZWlnbmVycyBpbnRvIGNpdGl6ZW5zaGlw4oCUYSBtYW4gd2hvIGhlbGQgdGhhdCB0aGUgc3RhdGUgd2FzIGluIG5vIGhlYWx0aHkgd2F5IGF0IGFsbCBpZiBpdCBkaWQgbm90IHByYWN0aXNlIGV4cHVsc2lvbiBvZiBmb3JlaWduZXJzPzwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgQWdpcyByZXBsaWVkIHRoYXQgaGUgd2FzIG5vdCBhc3RvbmlzaGVkIHRvIGZpbmQgTGVvbmlkYXMsIHdobyBoYWQgYmVlbiByZWFyZWQgaW4gZm9yZWlnbiBsYW5kcyBhbmQgaGFkIGNoaWxkcmVuIGJ5IGFuIG9yaWVudGFsIG1hcnJpYWdlLCBpZ25vcmFudCB0aGF0IEx5Y3VyZ3VzIGhhZCBiYW5pc2hlZCBmcm9tIHRoZSBzdGF0ZSBkZWJ0cyBhbmQgbG9hbnMgYWxvbmcgd2l0aCBjb2luZWQgbW9uZXksIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoYXQgZm9yZWlnbmVycyBpbiB0aGUgY2l0aWVzIHdlcmUgaGVsZCBieSBoaW0gaW4gbGVzcyBkaXNwbGVhc3VyZSB0aGFuIG1lbiB0byB3aG9tIHRoZSBTcGFydGFuIHByYWN0aWNlcyBhbmQgd2F5cyBvZiBsaXZpbmcgd2VyZSBub3QgY29uZ2VuaWFsOyB0aGVzZSwgaW5kZWVkLCBoZSBzb3VnaHQgdG8gZHJpdmUgYXdheSwgbm90IGJlY2F1c2UgaGUgd2FzIGhvc3RpbGUgdG8gdGhlaXIgcGVyc29ucywgYnV0IGJlY2F1c2UgaGUgZmVhcmVkIGxlc3QgdGhlaXIgbGl2ZXMgYW5kIG1hbm5lcnMgc2hvdWxkIGNvbnRhbWluYXRlIHRoZSBjaXRpemVucywgYW5kIGJyZWVkIGluIHRoZW0gYSBsb3ZlIG9mIGx1eHVyeSwgZWZmZW1pbmFjeSwgYW5kIGdyZWVkOyBmb3IgY2VydGFpbmx5IFRlcnBhbmRlciBhbmQgVGhhbGVzIGFuZCBQaGVyZWN5ZGVzIHdlcmUgZm9yZWlnbmVycywgYW5kIHlldCwgYmVjYXVzZSB0aGUgdGVhY2hpbmdzIG9mIHRoZWlyIHNvbmdzIGFuZCBwaGlsb3NvcGh5IGFsd2F5cyBhY2NvcmRlZCB3aXRoIHRob3NlIG9mIEx5Y3VyZ3VzLCB0aGV5IHdlcmUgaGVsZCBpbiBzdXJwYXNzaW5nIGhvbm91ciBhdCBTcGFydGEuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IHByYWlzZXN0IEVjcHJlcGVzLDwvcT4gc2FpZCBBZ2lzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndobywgYXMgZXBob3IsIGN1dCBvdXQgd2l0aCBhbiBhZHplIHR3byBvZiB0aGUgbmluZSBsdXRlLXN0cmluZ3Mgb2YgUGhyeW5pcyB0aGUgbXVzaWNpYW4sIGFuZCBsaWtld2lzZSB0aGUgbWFnaXN0cmF0ZXMgaW4gdGhlIHRpbWUgb2YgVGltb3RoZXVzLCB3aG8gZGlkIHRoZSBzYW1lIHRoaW5nIGluIHRoZWlyIHR1cm4sIGJ1dCB0aG91IGJsYW1lc3QgbWUgZm9yIHRyeWluZyB0byByZW1vdmUgbHV4dXJ5LCBleHRyYXZhZ2FuY2UsIGFuZCBvc3RlbnRhdGlvbiBmcm9tIFNwYXJ0YSwgYXMgaWYgdGhvc2UgbWFnaXN0cmF0ZXMgYWxzbyB3ZXJlIG5vdCBvbiB0aGUgd2F0Y2ggdG8gcHJldmVudCB0aGUgcG9tcG91cyBhbmQgc3VwZXJmbHVvdXMgaW4gbXVzaWMgZnJvbSBtYWtpbmcgc3VjaCBhZHZhbmNlcyBhcyBvdXIgbGl2ZXMgYW5kIG1hbm5lcnMgaGF2ZSBjb21lIHRvLCB3aG9zZSBleGNlc3MgYW5kIGRpc2NvcmQgaGFzIG1hZGUgdGhlIGNpdHkgZGlzc29uYW50IGFuZCBvdXQgb2YgdHVuZSB3aXRoIGl0c2VsZi48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IGZvcmVpZ25lcnMgaW4gdGhlIGNpdGllcyB3ZXJlIGhlbGQgYnkgaGltIGluIGxlc3MgZGlzcGxlYXN1cmUgdGhhbiBtZW4gdG8gd2hvbSB0aGUgU3BhcnRhbiBwcmFjdGljZXMgYW5kIHdheXMgb2YgbGl2aW5nIHdlcmUgbm90IGNvbmdlbmlhbDsgdGhlc2UsIGluZGVlZCwgaGUgc291Z2h0IHRvIGRyaXZlIGF3YXksIG5vdCBiZWNhdXNlIGhlIHdhcyBob3N0aWxlIHRvIHRoZWlyIHBlcnNvbnMsIGJ1dCBiZWNhdXNlIGhlIGZlYXJlZCBsZXN0IHRoZWlyIGxpdmVzIGFuZCBtYW5uZXJzIHNob3VsZCBjb250YW1pbmF0ZSB0aGUgY2l0aXplbnMsIGFuZCBicmVlZCBpbiB0aGVtIGEgbG92ZSBvZiBsdXh1cnksIGVmZmVtaW5hY3ksIGFuZCBncmVlZDsgZm9yIGNlcnRhaW5seSBUZXJwYW5kZXIgYW5kIFRoYWxlcyBhbmQgUGhlcmVjeWRlcyB3ZXJlIGZvcmVpZ25lcnMsIGFuZCB5ZXQsIGJlY2F1c2UgdGhlIHRlYWNoaW5ncyBvZiB0aGVpciBzb25ncyBhbmQgcGhpbG9zb3BoeSBhbHdheXMgYWNjb3JkZWQgd2l0aCB0aG9zZSBvZiBMeWN1cmd1cywgdGhleSB3ZXJlIGhlbGQgaW4gc3VycGFzc2luZyBob25vdXIgYXQgU3BhcnRhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3UgcHJhaXNlc3QgRWNwcmVwZXMsPC9xPiBzYWlkIEFnaXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj53aG8sIGFzIGVwaG9yLCBjdXQgb3V0IHdpdGggYW4gYWR6ZSB0d28gb2YgdGhlIG5pbmUgbHV0ZS1zdHJpbmdzIG9mIFBocnluaXMgdGhlIG11c2ljaWFuLCBhbmQgbGlrZXdpc2UgdGhlIG1hZ2lzdHJhdGVzIGluIHRoZSB0aW1lIG9mIFRpbW90aGV1cywgd2hvIGRpZCB0aGUgc2FtZSB0aGluZyBpbiB0aGVpciB0dXJuLCBidXQgdGhvdSBibGFtZXN0IG1lIGZvciB0cnlpbmcgdG8gcmVtb3ZlIGx1eHVyeSwgZXh0cmF2YWdhbmNlLCBhbmQgb3N0ZW50YXRpb24gZnJvbSBTcGFydGEsIGFzIGlmIHRob3NlIG1hZ2lzdHJhdGVzIGFsc28gd2VyZSBub3Qgb24gdGhlIHdhdGNoIHRvIHByZXZlbnQgdGhlIHBvbXBvdXMgYW5kIHN1cGVyZmx1b3VzIGluIG11c2ljIGZyb20gbWFraW5nIHN1Y2ggYWR2YW5jZXMgYXMgb3VyIGxpdmVzIGFuZCBtYW5uZXJzIGhhdmUgY29tZSB0bywgd2hvc2UgZXhjZXNzIGFuZCBkaXNjb3JkIGhhcyBtYWRlIHRoZSBjaXR5IGRpc3NvbmFudCBhbmQgb3V0IG9mIHR1bmUgd2l0aCBpdHNlbGYuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCB0aGUgY29tbW9uIHBlb3BsZSB0b29rIHNpZGVzIHdpdGggQWdpcywgYnV0IHRoZSBtZW4gb2Ygd2VhbHRoIGVudHJlYXRlZCBMZW9uaWRhcyBub3QgdG8gYWJhbmRvbiB0aGVtLiBBbmQgYnkgcHJheWVycyBhbmQgYXJndW1lbnRzIHdpdGggdGhlIHNlbmF0b3JzLCB3aG9zZSBwb3dlciBsYXkgaW4gdGhlaXIgcHJpdmlsZWdlIG9mIHByZXNlbnRpbmcgYWxsIG1lYXN1cmVzIHRvIHRoZSBwZW9wbGUsIHRoZXkgc28gZmFyIHByZXZhaWxlZCB0aGF0IGJ5IGEgc2luZ2xlIHZvdGUgdGhlIHByb3Bvc2VkIHJoZXRyYSB3YXMgcmVqZWN0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx5c2FuZGVyLCBob3dldmVyLCB3aG8gd2FzIHN0aWxsIGVwaG9yLCBzZXQgb24gZm9vdCBhbiBpbmRpY3RtZW50IG9mIExlb25pZGFzIGJ5IHZpcnR1ZSBvZiBhbiBhbmNpZW50IGxhdyB3aGljaCBmb3JiYWRlIGFueSBkZXNjZW5kYW50IG9mIEhlcmFjbGVzIHRvIGJlZ2V0IGNoaWxkcmVuIGJ5IGEgZm9yZWlnbiB3b21hbiwgYW5kIG9yZGFpbmVkIHRoYXQgYW55b25lIHdobyBsZWZ0IFNwYXJ0YSB0byBzZXR0bGUgYW1vbmcgZm9yZWlnbmVycyBzaG91bGQgYmUgcHV0IHRvIGRlYXRoLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIGhlcmUgbWVyZ2VzIHR3byBzZXBhcmF0ZSBsYXdzLiBDZi4gdGhlICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAyNy4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5Y3VyZ3VzPC90aXRsZT4sIHh4dmlpLiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBZnRlciBpbnN0cnVjdGluZyBvdGhlcnMgdG8gc3ByZWFkIHRoZXNlIGNoYXJnZXMgYWdhaW5zdCBMZW9uaWRhcywgaGUgaGltc2VsZiwgd2l0aCBoaXMgY29sbGVhZ3VlcywgcHJvY2VlZGVkIHRvIG9ic2VydmUgdGhlIHRyYWRpdGlvbmFsIHNpZ24gZnJvbSBoZWF2ZW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhlIGNvbW1vbiBwZW9wbGUgdG9vayBzaWRlcyB3aXRoIEFnaXMsIGJ1dCB0aGUgbWVuIG9mIHdlYWx0aCBlbnRyZWF0ZWQgTGVvbmlkYXMgbm90IHRvIGFiYW5kb24gdGhlbS4gQW5kIGJ5IHByYXllcnMgYW5kIGFyZ3VtZW50cyB3aXRoIHRoZSBzZW5hdG9ycywgd2hvc2UgcG93ZXIgbGF5IGluIHRoZWlyIHByaXZpbGVnZSBvZiBwcmVzZW50aW5nIGFsbCBtZWFzdXJlcyB0byB0aGUgcGVvcGxlLCB0aGV5IHNvIGZhciBwcmV2YWlsZWQgdGhhdCBieSBhIHNpbmdsZSB2b3RlIHRoZSBwcm9wb3NlZCByaGV0cmEgd2FzIHJlamVjdGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx5c2FuZGVyLCBob3dldmVyLCB3aG8gd2FzIHN0aWxsIGVwaG9yLCBzZXQgb24gZm9vdCBhbiBpbmRpY3RtZW50IG9mIExlb25pZGFzIGJ5IHZpcnR1ZSBvZiBhbiBhbmNpZW50IGxhdyB3aGljaCBmb3JiYWRlIGFueSBkZXNjZW5kYW50IG9mIEhlcmFjbGVzIHRvIGJlZ2V0IGNoaWxkcmVuIGJ5IGEgZm9yZWlnbiB3b21hbiwgYW5kIG9yZGFpbmVkIHRoYXQgYW55b25lIHdobyBsZWZ0IFNwYXJ0YSB0byBzZXR0bGUgYW1vbmcgZm9yZWlnbmVycyBzaG91bGQgYmUgcHV0IHRvIGRlYXRoLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGx1dGFyY2ggaGVyZSBtZXJnZXMgdHdvIHNlcGFyYXRlIGxhd3MuIENmLiB0aGUgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMjcuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5Y3VyZ3VzPC90aXRsZT4sIHh4dmlpLiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBZnRlciBpbnN0cnVjdGluZyBvdGhlcnMgdG8gc3ByZWFkIHRoZXNlIGNoYXJnZXMgYWdhaW5zdCBMZW9uaWRhcywgaGUgaGltc2VsZiwgd2l0aCBoaXMgY29sbGVhZ3VlcywgcHJvY2VlZGVkIHRvIG9ic2VydmUgdGhlIHRyYWRpdGlvbmFsIHNpZ24gZnJvbSBoZWF2ZW4uCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMjcuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5Y3VyZ3VzPC90aXRsZT4sIHh4dmlpLiAzLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgeHh2aWkuIDMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpcyBvYnNlcnZlZCBhcyBmb2xsb3dzLiBFdmVyeSBuaW50aCB5ZWFyIHRoZSBlcGhvcnMgc2VsZWN0IGEgY2xlYXIgYW5kIG1vb25sZXNzIG5pZ2h0LCBhbmQgaW4gc2lsZW50IHNlc3Npb24gd2F0Y2ggdGhlIGZhY2Ugb2YgdGhlIGhlYXZlbnMuIElmLCB0aGVuLCBhIHN0YXIgc2hvb3RzIGFjcm9zcyB0aGUgc2t5LCB0aGV5IGRlY2lkZSB0aGF0IHRoZWlyIGtpbmdzIGhhdmUgdHJhbnNncmVzc2VkIGluIHRoZWlyIGRlYWxpbmdzIHdpdGggdGhlIGdvZHMsIGFuZCBzdXNwZW5kIHRoZW0gZnJvbSB0aGVpciBvZmZpY2UsIHVudGlsIGFuIG9yYWNsZSBmcm9tIERlbHBoaSBvciBPbHltcGlhIGNvbWVzIHRvIHRoZSBzdWNjb3VyIG9mIHRoZSBraW5ncyB0aHVzIGZvdW5kIGd1aWx0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgb2JzZXJ2ZWQgYXMgZm9sbG93cy4gRXZlcnkgbmludGggeWVhciB0aGUgZXBob3JzIHNlbGVjdCBhIGNsZWFyIGFuZCBtb29ubGVzcyBuaWdodCwgYW5kIGluIHNpbGVudCBzZXNzaW9uIHdhdGNoIHRoZSBmYWNlIG9mIHRoZSBoZWF2ZW5zLiBJZiwgdGhlbiwgYSBzdGFyIHNob290cyBhY3Jvc3MgdGhlIHNreSwgdGhleSBkZWNpZGUgdGhhdCB0aGVpciBraW5ncyBoYXZlIHRyYW5zZ3Jlc3NlZCBpbiB0aGVpciBkZWFsaW5ncyB3aXRoIHRoZSBnb2RzLCBhbmQgc3VzcGVuZCB0aGVtIGZyb20gdGhlaXIgb2ZmaWNlLCB1bnRpbCBhbiBvcmFjbGUgZnJvbSBEZWxwaGkgb3IgT2x5bXBpYSBjb21lcyB0byB0aGUgc3VjY291ciBvZiB0aGUga2luZ3MgdGh1cyBmb3VuZCBndWlsdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc2lnbiBMeXNhbmRlciBub3cgZGVjbGFyZWQgaGFkIGJlZW4gZ2l2ZW4gaGltLCBhbmQgaW5kaWN0ZWQgTGVvbmlkYXMsIGFuZCBwcm9kdWNlZCB3aXRuZXNzZXMgc2hvd2luZyB0aGF0IGhlIHdhcyB0aGUgZmF0aGVyIG9mIHR3byBjaGlsZHJlbiBieSBhIHdvbWFuIG9mIEFzaWEgd2hvIGhhZCBiZWVuIGdpdmVuIGhpbSB0byB3aWZlIGJ5IG9uZSBvZiB0aGUgbGlldXRlbmFudHMgb2YgU2VsZXVjdXM7IGFuZCB0aGF0IG93aW5nIHRvIHRoZSB3b21hbidzIGRpc2xpa2UgYW5kIGhhdHJlZCBvZiBoaW0gaGUgaGFkIGNvbWUgYmFjayBob21lIGFnYWluc3QgaGlzIG93biB3aXNoZXMsIHdoZXJlIGhlIGhhZCBhc3N1bWVkIHRoZSByb3lhbCBkaWduaXR5LCB0byB3aGljaCB0aGVyZSB3YXMgdGhlbiBubyBkaXJlY3Qgc3VjY2Vzc29yLiBCZXNpZGVzIGJyaW5naW5nIHRoaXMgaW5kaWN0bWVudCwgTHlzYW5kZXIgdHJpZWQgdG8gcGVyc3VhZGUgQ2xlb21icm90dXMgdG8gbGF5IGNsYWltIHRvIHRoZSByb3lhbCBkaWduaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5DbGVvbWJyb3R1cyB3YXMgYSBzb24taW4tbGF3IG9mIExlb25pZGFzLCBhbmQgb25lIG9mIHRoZSByb3lhbCBsaW5lLiBMZW9uaWRhcywgYWNjb3JkaW5nbHksIHRvb2sgZnJpZ2h0LCBhbmQgZmxlZCBhcyBhIHN1cHBsaWFudCB0byB0aGUgdGVtcGxlIG9mIEF0aGVuYSBvZiB0aGUgQnJhemVuIEhvdXNlLiBIaXMgZGF1Z2h0ZXIgYWxzbyBmb3Jzb29rIENsZW9tYnJvdHVzIGFuZCBiZWNhbWUgYSBzdXBwbGlhbnQgd2l0aCBoZXIgZmF0aGVyLiBXaGVuIExlb25pZGFzIHdhcyBzdW1tb25lZCB0byBoaXMgdHJpYWwgYW5kIGRpZCBub3QgYXBwZWFyLCBoZSB3YXMgZGVwb3NlZCwgYW5kIENsZW9tYnJvdHVzIHdhcyBtYWRlIGtpbmcgaW4gaGlzIHBsYWNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFib3V0IDI0MiBCLkMuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc2lnbiBMeXNhbmRlciBub3cgZGVjbGFyZWQgaGFkIGJlZW4gZ2l2ZW4gaGltLCBhbmQgaW5kaWN0ZWQgTGVvbmlkYXMsIGFuZCBwcm9kdWNlZCB3aXRuZXNzZXMgc2hvd2luZyB0aGF0IGhlIHdhcyB0aGUgZmF0aGVyIG9mIHR3byBjaGlsZHJlbiBieSBhIHdvbWFuIG9mIEFzaWEgd2hvIGhhZCBiZWVuIGdpdmVuIGhpbSB0byB3aWZlIGJ5IG9uZSBvZiB0aGUgbGlldXRlbmFudHMgb2YgU2VsZXVjdXM7IGFuZCB0aGF0IG93aW5nIHRvIHRoZSB3b21hbidzIGRpc2xpa2UgYW5kIGhhdHJlZCBvZiBoaW0gaGUgaGFkIGNvbWUgYmFjayBob21lIGFnYWluc3QgaGlzIG93biB3aXNoZXMsIHdoZXJlIGhlIGhhZCBhc3N1bWVkIHRoZSByb3lhbCBkaWduaXR5LCB0byB3aGljaCB0aGVyZSB3YXMgdGhlbiBubyBkaXJlY3Qgc3VjY2Vzc29yLiBCZXNpZGVzIGJyaW5naW5nIHRoaXMgaW5kaWN0bWVudCwgTHlzYW5kZXIgdHJpZWQgdG8gcGVyc3VhZGUgQ2xlb21icm90dXMgdG8gbGF5IGNsYWltIHRvIHRoZSByb3lhbCBkaWduaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNsZW9tYnJvdHVzIHdhcyBhIHNvbi1pbi1sYXcgb2YgTGVvbmlkYXMsIGFuZCBvbmUgb2YgdGhlIHJveWFsIGxpbmUuIExlb25pZGFzLCBhY2NvcmRpbmdseSwgdG9vayBmcmlnaHQsIGFuZCBmbGVkIGFzIGEgc3VwcGxpYW50IHRvIHRoZSB0ZW1wbGUgb2YgQXRoZW5hIG9mIHRoZSBCcmF6ZW4gSG91c2UuIEhpcyBkYXVnaHRlciBhbHNvIGZvcnNvb2sgQ2xlb21icm90dXMgYW5kIGJlY2FtZSBhIHN1cHBsaWFudCB3aXRoIGhlciBmYXRoZXIuIFdoZW4gTGVvbmlkYXMgd2FzIHN1bW1vbmVkIHRvIGhpcyB0cmlhbCBhbmQgZGlkIG5vdCBhcHBlYXIsIGhlIHdhcyBkZXBvc2VkLCBhbmQgQ2xlb21icm90dXMgd2FzIG1hZGUga2luZyBpbiBoaXMgcGxhY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BYm91dCAyNDIgQi5DLjwvbm90ZT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyBwb2ludCwgTHlzYW5kZXIncyB0ZXJtIGV4cGlyZWQgYW5kIGhlIHdlbnQgb3V0IG9mIG9mZmljZS4gVGhlIG5ldyBib2FyZCBvZiBlcGhvcnMgZW5jb3VyYWdlZCBMZW9uaWRhcyB0byBsZWF2ZSBoaXMgc3VwcGxpYW50J3MgYXN5bHVtLCBhbmQgYnJvdWdodCBhbiBpbmRpY3RtZW50IGFnYWluc3QgTHlzYW5kZXIgYW5kIE1hbmRyb2NsZWlkYXMgZm9yIHZpb2xhdGluZyB0aGUgbGF3IGluIHByb3Bvc2luZyBhbiBhYm9saXRpb24gb2YgZGVidHMgYW5kIGEgZGlzdHJpYnV0aW9uIG9mIGxhbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgcHV0IGluIGxlZ2FsIHBlcmlsLCBMeXNhbmRlciBhbmQgTWFuZHJvY2xlaWRhcyBwZXJzdWFkZWQgdGhlIHR3byBraW5ncyB0byBhY3QgdG9nZXRoZXIgYW5kIGRpc3JlZ2FyZCB0aGUgZWRpY3RzIG9mIHRoZSBlcGhvcnM7IGZvciB0aGF0IGJvYXJkIG9mIG1hZ2lzdHJhdGVzLCB0aGV5IHNhaWQsIGRlcml2ZWQgaXRzIHBvd2VyIGZyb20gZGlzc2Vuc2lvbiBiZXR3ZWVuIHRoZSB0d28ga2luZ3MsIGJ5IGdpdmluZyB0aGVpciB2b3RlIHRvIHRoZSBraW5nIHdobyBvZmZlcmVkIHRoZSBiZXR0ZXIgYWR2aWNlLCB3aGVuZXZlciB0aGUgb3RoZXIgd2FzIGF0IHZhcmlhbmNlIHdpdGggdGhlIHB1YmxpYyBnb29kOyBidXQgd2hlbiB0aGUgdHdvIGtpbmdzIHdlcmUgaW4gYWNjb3JkLCB0aGVpciBwb3dlciB3YXMgaW5kaXNzb2x1YmxlLCBhbmQgaXQgd291bGQgYmUgdW5sYXdmdWwgZm9yIHRoZSBlcGhvcnMgdG8gY29udGVuZCBhZ2FpbnN0IHRoZW0sIGFsdGhvdWdoIHdoZW4gdGhlIGtpbmdzIHdlcmUgaW4gY29udGVudGlvbiB3aXRoIG9uZSBhbm90aGVyIGl0IHdhcyB0aGUgcHJpdmlsZWdlIG9mIHRoZSBlcGhvcnMgdG8gYWN0IGFzIGFyYml0ZXJzIGJldHdlZW4gdGhlbSwgYnV0IG5vdCB0byBpbnRlcmZlcmUgd2hlbiB0aGV5IHdlcmUgb2Ygb25lIG1pbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBlcnN1YWRlZCBieSB0aGVzZSBhcmd1bWVudHMsIGJvdGggdGhlIGtpbmdzIHdlbnQgd2l0aCB0aGVpciBmcmllbmRzIGludG8gdGhlIG1hcmtldCBwbGFjZSwgcmVtb3ZlZCB0aGUgZXBob3JzIGZyb20gdGhlaXIgc2VhdHMsIGFuZCBhcHBvaW50ZWQgb3RoZXJzIGluIHRoZWlyIHN0ZWFkLCBvbmUgb2Ygd2hvbSB3YXMgQWdlc2lsYcO8cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnaXMgNi4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHZpLiAzIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoZW4gdGhleSBhcm1lZCBhIGxhcmdlIGJvZHkgb2YgeW91bmcgbWVuIGFuZCBzZXQgZnJlZSBhbGwgd2hvIHdlcmUgaW4gcHJpc29uLCB0aHVzIHN0cmlraW5nIGZlYXIgaW50byB0aGVpciBvcHBvbmVudHMsIHdobyB0aG91Z2h0IHRoZXkgd291bGQgcHV0IG1hbnkgb2YgdGhlbSB0byBkZWF0aC4gTm8gb25lLCBob3dldmVyLCBsb3N0IGhpcyBsaWZlIGF0IHRoZWlyIGhhbmRzOyAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5vbiB0aGUgY29udHJhcnksIHdoZW4gQWdpcyBsZWFybmVkIHRoYXQgQWdlc2lsYcO8cyBoYWQgcGxvdHRlZCB0byBtYWtlIGF3YXkgd2l0aCBMZW9uaWRhcyBhcyBoZSB3YXMgdHJ5aW5nIHRvIHdpdGhkcmF3IHRvIFRlZ2VhLCBhbmQgaGFkIHNlbnQgbWVuIHRvIGFzc2F1bHQgaGltIG9uIHRoZSByb2FkLCBoZSBzZW50IG91dCBhbm90aGVyIGNvbXBhbnkgb2YgdHJ1c3RlZCBmb2xsb3dlcnMgd2hvIHRvb2sgTGVvbmlkYXMgdW5kZXIgdGhlaXIgcHJvdGVjdGlvbiBhbmQgYnJvdWdodCBoaW0gc2FmZWx5IHRvIFRlZ2VhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyBwb2ludCwgTHlzYW5kZXIncyB0ZXJtIGV4cGlyZWQgYW5kIGhlIHdlbnQgb3V0IG9mIG9mZmljZS4gVGhlIG5ldyBib2FyZCBvZiBlcGhvcnMgZW5jb3VyYWdlZCBMZW9uaWRhcyB0byBsZWF2ZSBoaXMgc3VwcGxpYW50J3MgYXN5bHVtLCBhbmQgYnJvdWdodCBhbiBpbmRpY3RtZW50IGFnYWluc3QgTHlzYW5kZXIgYW5kIE1hbmRyb2NsZWlkYXMgZm9yIHZpb2xhdGluZyB0aGUgbGF3IGluIHByb3Bvc2luZyBhbiBhYm9saXRpb24gb2YgZGVidHMgYW5kIGEgZGlzdHJpYnV0aW9uIG9mIGxhbmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgcHV0IGluIGxlZ2FsIHBlcmlsLCBMeXNhbmRlciBhbmQgTWFuZHJvY2xlaWRhcyBwZXJzdWFkZWQgdGhlIHR3byBraW5ncyB0byBhY3QgdG9nZXRoZXIgYW5kIGRpc3JlZ2FyZCB0aGUgZWRpY3RzIG9mIHRoZSBlcGhvcnM7IGZvciB0aGF0IGJvYXJkIG9mIG1hZ2lzdHJhdGVzLCB0aGV5IHNhaWQsIGRlcml2ZWQgaXRzIHBvd2VyIGZyb20gZGlzc2Vuc2lvbiBiZXR3ZWVuIHRoZSB0d28ga2luZ3MsIGJ5IGdpdmluZyB0aGVpciB2b3RlIHRvIHRoZSBraW5nIHdobyBvZmZlcmVkIHRoZSBiZXR0ZXIgYWR2aWNlLCB3aGVuZXZlciB0aGUgb3RoZXIgd2FzIGF0IHZhcmlhbmNlIHdpdGggdGhlIHB1YmxpYyBnb29kOyBidXQgd2hlbiB0aGUgdHdvIGtpbmdzIHdlcmUgaW4gYWNjb3JkLCB0aGVpciBwb3dlciB3YXMgaW5kaXNzb2x1YmxlLCBhbmQgaXQgd291bGQgYmUgdW5sYXdmdWwgZm9yIHRoZSBlcGhvcnMgdG8gY29udGVuZCBhZ2FpbnN0IHRoZW0sIGFsdGhvdWdoIHdoZW4gdGhlIGtpbmdzIHdlcmUgaW4gY29udGVudGlvbiB3aXRoIG9uZSBhbm90aGVyIGl0IHdhcyB0aGUgcHJpdmlsZWdlIG9mIHRoZSBlcGhvcnMgdG8gYWN0IGFzIGFyYml0ZXJzIGJldHdlZW4gdGhlbSwgYnV0IG5vdCB0byBpbnRlcmZlcmUgd2hlbiB0aGV5IHdlcmUgb2Ygb25lIG1pbmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBlcnN1YWRlZCBieSB0aGVzZSBhcmd1bWVudHMsIGJvdGggdGhlIGtpbmdzIHdlbnQgd2l0aCB0aGVpciBmcmllbmRzIGludG8gdGhlIG1hcmtldCBwbGFjZSwgcmVtb3ZlZCB0aGUgZXBob3JzIGZyb20gdGhlaXIgc2VhdHMsIGFuZCBhcHBvaW50ZWQgb3RoZXJzIGluIHRoZWlyIHN0ZWFkLCBvbmUgb2Ygd2hvbSB3YXMgQWdlc2lsYcO8cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2lzIDYuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aS4gMyBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGVuIHRoZXkgYXJtZWQgYSBsYXJnZSBib2R5IG9mIHlvdW5nIG1lbiBhbmQgc2V0IGZyZWUgYWxsIHdobyB3ZXJlIGluIHByaXNvbiwgdGh1cyBzdHJpa2luZyBmZWFyIGludG8gdGhlaXIgb3Bwb25lbnRzLCB3aG8gdGhvdWdodCB0aGV5IHdvdWxkIHB1dCBtYW55IG9mIHRoZW0gdG8gZGVhdGguIE5vIG9uZSwgaG93ZXZlciwgbG9zdCBoaXMgbGlmZSBhdCB0aGVpciBoYW5kczsgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2lzIDYuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aS4gMyBmLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPm9uIHRoZSBjb250cmFyeSwgd2hlbiBBZ2lzIGxlYXJuZWQgdGhhdCBBZ2VzaWxhw7xzIGhhZCBwbG90dGVkIHRvIG1ha2UgYXdheSB3aXRoIExlb25pZGFzIGFzIGhlIHdhcyB0cnlpbmcgdG8gd2l0aGRyYXcgdG8gVGVnZWEsIGFuZCBoYWQgc2VudCBtZW4gdG8gYXNzYXVsdCBoaW0gb24gdGhlIHJvYWQsIGhlIHNlbnQgb3V0IGFub3RoZXIgY29tcGFueSBvZiB0cnVzdGVkIGZvbGxvd2VycyB3aG8gdG9vayBMZW9uaWRhcyB1bmRlciB0aGVpciBwcm90ZWN0aW9uIGFuZCBicm91Z2h0IGhpbSBzYWZlbHkgdG8gVGVnZWEuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgdGhlIGVudGVycHJpc2Ugb2YgdGhlIGtpbmdzIHdhcyBtYWtpbmcgZ29vZCBwcm9ncmVzcyBhbmQgbm8gb25lIHRyaWVkIHRvIG9wcG9zZSBvciBoaW5kZXIgdGhlbSwgd2hlbiBvbmUgbWFuLCBBZ2VzaWxhw7xzLCB1cHNldCBhbmQgcnVpbmVkIGV2ZXJ5dGhpbmcuIEhlIGFsbG93ZWQgYSBtb3N0IHNoYW1lZnVsIGRpc2Vhc2Ugb2YgYXZhcmljZSB0byB3cmVjayBhIG1vc3Qgbm9ibGUgYW5kIG1vc3QgdHJ1bHkgU3BhcnRhbiBwbGFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igc2luY2UgaGUgd2FzIGFuIGV4Y2VlZGluZ2x5IGxhcmdlIG93bmVyIG9mIHZhbHVhYmxlIGxhbmQsIGJ1dCBvd2VkIGh1Z2Ugc3VtcyBvZiBtb25leSwgYmVpbmcgdW5hYmxlIHRvIHBheSBoaXMgZGVidHMgYW5kIHVud2lsbGluZyB0byBnaXZlIHVwIGhpcyBsYW5kcywgaGUgcGVyc3VhZGVkIEFnaXMgdGhhdCBpZiBib3RoIGhpcyBwcm9qZWN0cyBzaG91bGQgYmUgY2FycmllZCB0aHJvdWdoIGF0IHRoZSBzYW1lIHRpbWUgdGhlIHJlc3VsdGluZyBjb252dWxzaW9uIGluIHRoZSBzdGF0ZSB3b3VsZCBiZSBncmVhdDsgYnV0IHRoYXQgaWYgdGhlIG1lbiBvZiBwcm9wZXJ0eSBzaG91bGQgZmlyc3QgYmUgd29uIG92ZXIgYnkgYSByZW1pc3Npb24gb2YgdGhlaXIgZGVidHMsIHRoZXkgd291bGQgYWZ0ZXJ3YXJkcyBhY2NlcHQgdGhlIGRpc3RyaWJ1dGlvbiBvZiBsYW5kIGNvbnRlbnRlZGx5IGFuZCBxdWlldGx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyBhbHNvIHRoZSBvcGluaW9uIG9mIEx5c2FuZGVyLCB3aG8gd2FzIGRlY2VpdmVkIGluIGxpa2UgbWFubmVyIGJ5IEFnZXNpbGHDvHMuIFNvIHRoZXkgY2F1c2VkIHRoZSBtb3J0Z2FnZXMgKHRoZSBTcGFydGFucyBjYWxsIHRoZW0gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5rbGFyaWEsPC9xPiBvciBhbGxvdG1lbnQgcGxlZGdlcykgIHRvIGJlIGJyb3VnaHQgaW50byB0aGUgbWFya2V0LXBsYWNlLCBoZWFwZWQgdGhlbSBhbHRvZ2V0aGVyLCBhbmQgc2V0IGZpcmUgdG8gdGhlbS4gQXMgdGhlIGZsYW1lcyByb3NlLCB0aGUgbWVuIG9mIHdlYWx0aCBhbmQgdGhlIGxlbmRlcnMgb2YgbW9uZXkgd2VudCBhd2F5IHdpdGggaGVhdnkgaGVhcnRzOyBidXQgQWdlc2lsYcO8cywgYXMgaWYgaW4gbW9ja2VyeSBvZiB0aGVtLCBkZWNsYXJlZCB0aGF0IGhpcyBleWVzIGhhZCBuZXZlciBzZWVuIGEgYnJpZ2h0ZXIgb3IgcHVyZXIgZmxhbWUgdGhhbiB0aGF0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyB0aGUgZW50ZXJwcmlzZSBvZiB0aGUga2luZ3Mgd2FzIG1ha2luZyBnb29kIHByb2dyZXNzIGFuZCBubyBvbmUgdHJpZWQgdG8gb3Bwb3NlIG9yIGhpbmRlciB0aGVtLCB3aGVuIG9uZSBtYW4sIEFnZXNpbGHDvHMsIHVwc2V0IGFuZCBydWluZWQgZXZlcnl0aGluZy4gSGUgYWxsb3dlZCBhIG1vc3Qgc2hhbWVmdWwgZGlzZWFzZSBvZiBhdmFyaWNlIHRvIHdyZWNrIGEgbW9zdCBub2JsZSBhbmQgbW9zdCB0cnVseSBTcGFydGFuIHBsYW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBzaW5jZSBoZSB3YXMgYW4gZXhjZWVkaW5nbHkgbGFyZ2Ugb3duZXIgb2YgdmFsdWFibGUgbGFuZCwgYnV0IG93ZWQgaHVnZSBzdW1zIG9mIG1vbmV5LCBiZWluZyB1bmFibGUgdG8gcGF5IGhpcyBkZWJ0cyBhbmQgdW53aWxsaW5nIHRvIGdpdmUgdXAgaGlzIGxhbmRzLCBoZSBwZXJzdWFkZWQgQWdpcyB0aGF0IGlmIGJvdGggaGlzIHByb2plY3RzIHNob3VsZCBiZSBjYXJyaWVkIHRocm91Z2ggYXQgdGhlIHNhbWUgdGltZSB0aGUgcmVzdWx0aW5nIGNvbnZ1bHNpb24gaW4gdGhlIHN0YXRlIHdvdWxkIGJlIGdyZWF0OyBidXQgdGhhdCBpZiB0aGUgbWVuIG9mIHByb3BlcnR5IHNob3VsZCBmaXJzdCBiZSB3b24gb3ZlciBieSBhIHJlbWlzc2lvbiBvZiB0aGVpciBkZWJ0cywgdGhleSB3b3VsZCBhZnRlcndhcmRzIGFjY2VwdCB0aGUgZGlzdHJpYnV0aW9uIG9mIGxhbmQgY29udGVudGVkbHkgYW5kIHF1aWV0bHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGFsc28gdGhlIG9waW5pb24gb2YgTHlzYW5kZXIsIHdobyB3YXMgZGVjZWl2ZWQgaW4gbGlrZSBtYW5uZXIgYnkgQWdlc2lsYcO8cy4gU28gdGhleSBjYXVzZWQgdGhlIG1vcnRnYWdlcyAodGhlIFNwYXJ0YW5zIGNhbGwgdGhlbSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+a2xhcmlhLDwvcT4gb3IgYWxsb3RtZW50IHBsZWRnZXMpICB0byBiZSBicm91Z2h0IGludG8gdGhlIG1hcmtldC1wbGFjZSwgaGVhcGVkIHRoZW0gYWx0b2dldGhlciwgYW5kIHNldCBmaXJlIHRvIHRoZW0uIEFzIHRoZSBmbGFtZXMgcm9zZSwgdGhlIG1lbiBvZiB3ZWFsdGggYW5kIHRoZSBsZW5kZXJzIG9mIG1vbmV5IHdlbnQgYXdheSB3aXRoIGhlYXZ5IGhlYXJ0czsgYnV0IEFnZXNpbGHDvHMsIGFzIGlmIGluIG1vY2tlcnkgb2YgdGhlbSwgZGVjbGFyZWQgdGhhdCBoaXMgZXllcyBoYWQgbmV2ZXIgc2VlbiBhIGJyaWdodGVyIG9yIHB1cmVyIGZsYW1lIHRoYW4gdGhhdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0aGUgbXVsdGl0dWRlIGRlbWFuZGVkIGFsc28gdGhhdCB0aGUgbGFuZCBzaG91bGQgYXQgb25jZSBiZSBkaXZpZGVkLCBhbmQgdGhlIGtpbmdzIGdhdmUgb3JkZXJzIHRoYXQgdGhpcyBzaG91bGQgYmUgZG9uZTsgYnV0IEFnZXNpbGHDvHMgIHdvdWxkIGFsd2F5cyBpbnRlcnBvc2Ugc29tZSBvYnN0YWNsZSBvciBtYWtlIHNvbWUgZXhjdXNlLCBhbmQgc28gY29uc3VtZWQgdGltZSB1bnRpbCBpdCBiZWNhbWUgdGhlIGR1dHkgb2YgQWdpcyB0byBoZWFkIGEgbWlsaXRhcnkgZXhwZWRpdGlvbiwgd2hlbiB0aGUgQWNoYWVhbnMsIHdobyB3ZXJlIHRoZWlyIGFsbGllcywgc2VudCBmb3IgYWlkIGZyb20gU3BhcnRhLiBGb3IgdGhlIEFldG9saWFucyB3ZXJlIGV4cGVjdGVkIHRvIGludmFkZSBQZWxvcG9ubmVzdXMgYnkgd2F5IG9mIE1lZ2FyYTsgYW5kIEFyYXR1cywgdGhlIGdlbmVyYWwgb2YgdGhlIEFjaGFlYW5zLCBpbiBhbiBlZmZvcnQgdG8gcHJldmVudCB0aGlzLCB3YXMgYXNzZW1ibGluZyBhIGZvcmNlIGFuZCB3cm90ZSBhIGxldHRlciB0byB0aGUgZXBob3JzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgdGhlIG11bHRpdHVkZSBkZW1hbmRlZCBhbHNvIHRoYXQgdGhlIGxhbmQgc2hvdWxkIGF0IG9uY2UgYmUgZGl2aWRlZCwgYW5kIHRoZSBraW5ncyBnYXZlIG9yZGVycyB0aGF0IHRoaXMgc2hvdWxkIGJlIGRvbmU7IGJ1dCBBZ2VzaWxhw7xzICB3b3VsZCBhbHdheXMgaW50ZXJwb3NlIHNvbWUgb2JzdGFjbGUgb3IgbWFrZSBzb21lIGV4Y3VzZSwgYW5kIHNvIGNvbnN1bWVkIHRpbWUgdW50aWwgaXQgYmVjYW1lIHRoZSBkdXR5IG9mIEFnaXMgdG8gaGVhZCBhIG1pbGl0YXJ5IGV4cGVkaXRpb24sIHdoZW4gdGhlIEFjaGFlYW5zLCB3aG8gd2VyZSB0aGVpciBhbGxpZXMsIHNlbnQgZm9yIGFpZCBmcm9tIFNwYXJ0YS4gRm9yIHRoZSBBZXRvbGlhbnMgd2VyZSBleHBlY3RlZCB0byBpbnZhZGUgUGVsb3Bvbm5lc3VzIGJ5IHdheSBvZiBNZWdhcmE7IGFuZCBBcmF0dXMsIHRoZSBnZW5lcmFsIG9mIHRoZSBBY2hhZWFucywgaW4gYW4gZWZmb3J0IHRvIHByZXZlbnQgdGhpcywgd2FzIGFzc2VtYmxpbmcgYSBmb3JjZSBhbmQgd3JvdGUgYSBsZXR0ZXIgdG8gdGhlIGVwaG9ycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgYXQgb25jZSBzZW50IG91dCBBZ2lzLCB3aG8gd2FzIGV4YWx0ZWQgaW4gc3Bpcml0IGJ5IHRoZSBhbWJpdGlvbiBhbmQgYXJkb3VyIG9mIHRoZSBzb2xkaWVycyB1bmRlciBoaW0uIEZvciBiZWluZyB5b3VuZyBtZW4gZm9yIHRoZSBtb3N0IHBhcnQgYW5kIHBvb3IsIGFuZCBoYXZpbmcgbm93IGltbXVuaXR5IGZyb20gdGhlaXIgZGVidHMgYW5kIGFic29sdXRpb24sIGFuZCBleHBlY3RpbmcgdGhhdCB0aGV5IHdvdWxkIHJlY2VpdmUgYWxsb3RtZW50cyBvZiBsYW5kIGlmIHRoZXkgcmV0dXJuZWQgZnJvbSB0aGUgZXhwZWRpdGlvbiwgdGhlaXIgZGV2b3Rpb24gdG8gQWdpcyB3YXMgYXN0b25pc2hpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IHdlcmUgYSBzcGVjdGFjbGUgdG8gdGhlIGNpdGllcyBhcyB0aGV5IG1hcmNoZWQgdGhyb3VnaCB0aGUgUGVsb3Bvbm5lc3VzIHdpdGhvdXQgZG9pbmcgYW55IGluanVyeSwgd2l0aG91dCBydWRlbmVzcywgYW5kIGFsbW9zdCB3aXRob3V0IG5vaXNlLCBzbyB0aGF0IHRoZSBvdGhlciBHcmVla3Mgd2VyZSBhbWF6ZWQgYW5kIGFza2VkIHRoZW1zZWx2ZXMgd2hhdCBtdXN0IGhhdmUgYmVlbiB0aGUgZGlzY2lwbGluZSBvZiBhIFNwYXJ0YW4gYXJteSB1bmRlciB0aGUgY29tbWFuZCBvZiB0aGUgZ3JlYXQgQWdlc2lsYcO8cywgb3IgdGhlIGZhbW91cyBMeXNhbmRlciwgb3IgTGVvbmlkYXMgb2Ygb2xkLCBzaW5jZSB0b3dhcmRzIGEgc3RyaXBsaW5nIHdobyB3YXMgYWxtb3N0IHRoZSB5b3VuZ2VzdCBvZiB0aGUgd2hvbGUgYXJteSBzbyBncmVhdCByZXZlcmVuY2UgYW5kIGZlYXIgd2VyZSBmZWx0IGJ5IGhpcyBzb2xkaWVycy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluZGVlZCB0aGUgeW91bmcgbWFuIGhpbXNlbGYsIG93aW5nIHRvIGhpcyBzaW1wbGljaXR5LCBoaXMgbG92ZSBvZiBoYXJkc2hpcHMsIGFuZCB0aGUgcHJpZGUgaGUgdG9vayBpbiBjbG90aGluZyBhbmQgYXJtaW5nIGhpbXNlbGYgd2l0aCBubyBtb3JlIHNwbGVuZG91ciB0aGFuIGEgY29tbW9uIHNvbGRpZXIsIHdvbiB0aGUgYWRtaXJhdGlvbiBhbmQgZGV2b3Rpb24gb2YgdGhlIG11bHRpdHVkZXM7IGZvciB0byB0aGUgcmljaCwgY2VydGFpbmx5LCBoaXMgaW5ub3ZhdGluZyB3YXlzIHdlcmUgbm90IHBsZWFzaW5nLCBvd2luZyB0byBhIGZlYXIgdGhhdCB0aGV5IG1pZ2h0IHByb3ZlIGEgZGlzdHVyYmluZyBmb3JjZSBhbmQgc2V0IGEgYmFkIGV4YW1wbGUgYW1vbmcgdGhlIGNvbW1vbiBwZW9wbGUgZXZlcnl3aGVyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgYXQgb25jZSBzZW50IG91dCBBZ2lzLCB3aG8gd2FzIGV4YWx0ZWQgaW4gc3Bpcml0IGJ5IHRoZSBhbWJpdGlvbiBhbmQgYXJkb3VyIG9mIHRoZSBzb2xkaWVycyB1bmRlciBoaW0uIEZvciBiZWluZyB5b3VuZyBtZW4gZm9yIHRoZSBtb3N0IHBhcnQgYW5kIHBvb3IsIGFuZCBoYXZpbmcgbm93IGltbXVuaXR5IGZyb20gdGhlaXIgZGVidHMgYW5kIGFic29sdXRpb24sIGFuZCBleHBlY3RpbmcgdGhhdCB0aGV5IHdvdWxkIHJlY2VpdmUgYWxsb3RtZW50cyBvZiBsYW5kIGlmIHRoZXkgcmV0dXJuZWQgZnJvbSB0aGUgZXhwZWRpdGlvbiwgdGhlaXIgZGV2b3Rpb24gdG8gQWdpcyB3YXMgYXN0b25pc2hpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IHdlcmUgYSBzcGVjdGFjbGUgdG8gdGhlIGNpdGllcyBhcyB0aGV5IG1hcmNoZWQgdGhyb3VnaCB0aGUgUGVsb3Bvbm5lc3VzIHdpdGhvdXQgZG9pbmcgYW55IGluanVyeSwgd2l0aG91dCBydWRlbmVzcywgYW5kIGFsbW9zdCB3aXRob3V0IG5vaXNlLCBzbyB0aGF0IHRoZSBvdGhlciBHcmVla3Mgd2VyZSBhbWF6ZWQgYW5kIGFza2VkIHRoZW1zZWx2ZXMgd2hhdCBtdXN0IGhhdmUgYmVlbiB0aGUgZGlzY2lwbGluZSBvZiBhIFNwYXJ0YW4gYXJteSB1bmRlciB0aGUgY29tbWFuZCBvZiB0aGUgZ3JlYXQgQWdlc2lsYcO8cywgb3IgdGhlIGZhbW91cyBMeXNhbmRlciwgb3IgTGVvbmlkYXMgb2Ygb2xkLCBzaW5jZSB0b3dhcmRzIGEgc3RyaXBsaW5nIHdobyB3YXMgYWxtb3N0IHRoZSB5b3VuZ2VzdCBvZiB0aGUgd2hvbGUgYXJteSBzbyBncmVhdCByZXZlcmVuY2UgYW5kIGZlYXIgd2VyZSBmZWx0IGJ5IGhpcyBzb2xkaWVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhlIHlvdW5nIG1hbiBoaW1zZWxmLCBvd2luZyB0byBoaXMgc2ltcGxpY2l0eSwgaGlzIGxvdmUgb2YgaGFyZHNoaXBzLCBhbmQgdGhlIHByaWRlIGhlIHRvb2sgaW4gY2xvdGhpbmcgYW5kIGFybWluZyBoaW1zZWxmIHdpdGggbm8gbW9yZSBzcGxlbmRvdXIgdGhhbiBhIGNvbW1vbiBzb2xkaWVyLCB3b24gdGhlIGFkbWlyYXRpb24gYW5kIGRldm90aW9uIG9mIHRoZSBtdWx0aXR1ZGVzOyBmb3IgdG8gdGhlIHJpY2gsIGNlcnRhaW5seSwgaGlzIGlubm92YXRpbmcgd2F5cyB3ZXJlIG5vdCBwbGVhc2luZywgb3dpbmcgdG8gYSBmZWFyIHRoYXQgdGhleSBtaWdodCBwcm92ZSBhIGRpc3R1cmJpbmcgZm9yY2UgYW5kIHNldCBhIGJhZCBleGFtcGxlIGFtb25nIHRoZSBjb21tb24gcGVvcGxlIGV2ZXJ5d2hlcmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cywgd2hlbiBBZ2lzIGpvaW5lZCBoaW0gbmVhciBDb3JpbnRoLCB3YXMgc3RpbGwgZGVsaWJlcmF0aW5nIHdoZXRoZXIgb3Igbm90IHRvIG1lZXQgdGhlIGVuZW15IGluIG9wZW4gYmF0dGxlLiBIZXJlIEFnaXMgZGlzcGxheWVkIGdyZWF0IGFyZG91ciwgYW5kIGNvdXJhZ2Ugd2hpY2ggd2FzIHNhbmUgYW5kIGNhbGN1bGF0aW5nLiBGb3IgaGUgZGVjbGFyZWQgdGhhdCBpbiBoaXMgb3BpbmlvbiBpdCB3YXMgYmVzdCB0byBmaWdodCBhIGRlY2lzaXZlIGJhdHRsZSBhbmQgbm90IHRvIGFiYW5kb24gdGhlIGdhdGUgb2YgdGhlIFBlbG9wb25uZXN1cyBhbmQgc3VmZmVyIHRoZSBlbmVteSB0byBwYXNzIGluc2lkZTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ib3dldmVyLDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHdpbGwgZG8gYXMgc2VlbXMgYmVzdCB0byBBcmF0dXMsIGZvciBBcmF0dXMgaXMgYW4gb2xkZXIgbWFuLCBhbmQgaXMgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbnM7IEkgZGlkIG5vdCBjb21lIGhpdGhlciB0byBiZSB0aGVpciBsZWFkZXIgb3IgdG8gZ2l2ZSB0aGVtIG9yZGVycywgYnV0IHRvIGdpdmUgdGhlbSBhaWQgYW5kIHNoYXJlIHRoZWlyIGV4cGVkaXRpb24uPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXJhdHVzLCB3aGVuIEFnaXMgam9pbmVkIGhpbSBuZWFyIENvcmludGgsIHdhcyBzdGlsbCBkZWxpYmVyYXRpbmcgd2hldGhlciBvciBub3QgdG8gbWVldCB0aGUgZW5lbXkgaW4gb3BlbiBiYXR0bGUuIEhlcmUgQWdpcyBkaXNwbGF5ZWQgZ3JlYXQgYXJkb3VyLCBhbmQgY291cmFnZSB3aGljaCB3YXMgc2FuZSBhbmQgY2FsY3VsYXRpbmcuIEZvciBoZSBkZWNsYXJlZCB0aGF0IGluIGhpcyBvcGluaW9uIGl0IHdhcyBiZXN0IHRvIGZpZ2h0IGEgZGVjaXNpdmUgYmF0dGxlIGFuZCBub3QgdG8gYWJhbmRvbiB0aGUgZ2F0ZSBvZiB0aGUgUGVsb3Bvbm5lc3VzIGFuZCBzdWZmZXIgdGhlIGVuZW15IHRvIHBhc3MgaW5zaWRlOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SG93ZXZlciw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHdpbGwgZG8gYXMgc2VlbXMgYmVzdCB0byBBcmF0dXMsIGZvciBBcmF0dXMgaXMgYW4gb2xkZXIgbWFuLCBhbmQgaXMgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbnM7IEkgZGlkIG5vdCBjb21lIGhpdGhlciB0byBiZSB0aGVpciBsZWFkZXIgb3IgdG8gZ2l2ZSB0aGVtIG9yZGVycywgYnV0IHRvIGdpdmUgdGhlbSBhaWQgYW5kIHNoYXJlIHRoZWlyIGV4cGVkaXRpb24uPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CYXRvbiBvZiBTaW5vcMOpLCBob3dldmVyLCBzYXlzIHRoYXQgQWdpcyBoaW1zZWxmIHdhcyB1bndpbGxpbmcgdG8gZ2l2ZSBiYXR0bGUgYWx0aG91Z2ggQXJhdHVzIHVyZ2VkIGl0OyBidXQgQmF0b24gaGFzIG5vdCByZWFkIHdoYXQgQXJhdHVzIHdyb3RlIGFib3V0IHRoaXMgbWF0dGVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIGhpcyAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db21tZW50YXJpZXMuPC9xPiAgU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFyYXR1czwvdGl0bGU+LCBpaWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHVyZ2luZyBpbiBzZWxmLWRlZmVuY2UgdGhhdCBoZSB0aG91Z2h0IGl0IGJldHRlciwgbm93IHRoYXQgdGhlIGh1c2JhbmRtZW4gaGFkIGdhdGhlcmVkIGluIGFsbW9zdCBhbGwgdGhlaXIgY3JvcHMsIHRvIHN1ZmZlciB0aGUgZW5lbXkgdG8gcGFzcyBieSwgaW5zdGVhZCBvZiByaXNraW5nIGV2ZXJ5dGhpbmcgaW4gYmF0dGxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJhdG9uIG9mIFNpbm9ww6ksIGhvd2V2ZXIsIHNheXMgdGhhdCBBZ2lzIGhpbXNlbGYgd2FzIHVud2lsbGluZyB0byBnaXZlIGJhdHRsZSBhbHRob3VnaCBBcmF0dXMgdXJnZWQgaXQ7IGJ1dCBCYXRvbiBoYXMgbm90IHJlYWQgd2hhdCBBcmF0dXMgd3JvdGUgYWJvdXQgdGhpcyBtYXR0ZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBoaXMgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db21tZW50YXJpZXMuPC9xPiAgU2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiAzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmF0dXM8L3RpdGxlPiwgaWlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB1cmdpbmcgaW4gc2VsZi1kZWZlbmNlIHRoYXQgaGUgdGhvdWdodCBpdCBiZXR0ZXIsIG5vdyB0aGF0IHRoZSBodXNiYW5kbWVuIGhhZCBnYXRoZXJlZCBpbiBhbG1vc3QgYWxsIHRoZWlyIGNyb3BzLCB0byBzdWZmZXIgdGhlIGVuZW15IHRvIHBhc3MgYnksIGluc3RlYWQgb2Ygcmlza2luZyBldmVyeXRoaW5nIGluIGJhdHRsZS4KCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db21tZW50YXJpZXMuPC9xPiAgU2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiAzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmF0dXM8L3RpdGxlPiwgaWlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sIGlpaS4gMi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCB0aGVyZWZvcmUsIEFyYXR1cyBkZWNpZGVkIG5vdCB0byBnaXZlIGJhdHRsZSwgYW5kIGRpc21pc3NlZCBoaXMgYWxsaWVzIHdpdGggcHJhaXNlcyBmb3IgdGhlaXIgcHJvZmZlcmVkIGFpZCwgQWdpcywgd2hvIGhhZCB3b24gdW5pdmVyc2FsIGFkbWlyYXRpb24sIGxlZCBoaXMgZm9yY2VzIGJhY2sgdG8gU3BhcnRhLCB3aGVyZSB0aGVyZSB3YXMgYWxyZWFkeSBtdWNoIGNvbW1vdGlvbiBhbmQgYSByZXZvbHV0aW9uLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwgQXJhdHVzIGRlY2lkZWQgbm90IHRvIGdpdmUgYmF0dGxlLCBhbmQgZGlzbWlzc2VkIGhpcyBhbGxpZXMgd2l0aCBwcmFpc2VzIGZvciB0aGVpciBwcm9mZmVyZWQgYWlkLCBBZ2lzLCB3aG8gaGFkIHdvbiB1bml2ZXJzYWwgYWRtaXJhdGlvbiwgbGVkIGhpcyBmb3JjZXMgYmFjayB0byBTcGFydGEsIHdoZXJlIHRoZXJlIHdhcyBhbHJlYWR5IG11Y2ggY29tbW90aW9uIGFuZCBhIHJldm9sdXRpb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZvciBBZ2VzaWxhw7xzLCB3aG8gd2FzIG9uZSBvZiB0aGUgZXBob3JzLCBiZWluZyBub3cgZnJlZWQgZnJvbSB3aGF0IGhhZCBrZXB0IGhpbSBpbiByZXN0cmFpbnQgYmVmb3JlLCBzaHJhbmsgZnJvbSBubyBpbmp1c3RpY2UgdGhhdCBicm91Z2h0IGhpbSBtb25leSwgbmF5LCBjb250cmFyeSB0byB0aGUgY3VzdG9tYXJ5IGFycmFuZ2VtZW50IG9mIHRoZSBjYWxlbmRhciwgYW5kIHdoZW4gdGhlIHRpbWUgZm9yIGl0IGhhZCBub3QgeWV0IGNvbWUsIGhlIGluc2VydGVkIGEgdGhpcnRlZW50aCBtb250aDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgd2FzIHJlZ3VsYXJseSBkb25lIHRocmljZSBkdXJpbmcgYSBwZXJpb2Qgb2YgbmluZSB5ZWFycywgYnV0IGluIGRpc3RpbmN0bHkgc3BlY2lmaWVkIHllYXJzLiAgVGhlIG9iamVjdCB3YXMgdG8gZXF1YWxpemUgdGhlIGx1bmFyIGFuZCBzb2xhciB5ZWFycy48L25vdGU+IGFuZCBleGFjdGVkIHRoZSB0YXhlcyBmb3IgaXQuIE1vcmVvdmVyLCBpbiBmZWFyIG9mIHRoZSB2aWN0aW1zIG9mIGhpcyBpbmp1c3RpY2UgYW5kIGhhdGVkIGJ5IGFsbCBtZW4sIGhlIGtlcHQgYW4gYXJtZWQgYm9keWd1YXJkLCBhbmQgd291bGQgZ28gZG93biB0byBoaXMgbWFnaXN0cmFjeSB1bmRlciB0aGVpciBwcm90ZWN0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXMgZm9yIHRoZSBraW5ncywgaGUgd2lzaGVkIG1lbiB0byB0aGluayB0aGF0IGhlIHV0dGVybHkgZGVzcGlzZWQgdGhlIG9uZSwgYW5kIGhlbGQgQWdpcyBpbiBzb21lIHNsaWdodCBob25vdXIgbW9yZSBiZWNhdXNlIG9mIGhpcyBuZWFyIHJlbGF0aW9uc2hpcCB0aGFuIGJlY2F1c2UgaGUgd2FzIGtpbmcuIEhlIGFsc28gc3ByZWFkIHJlcG9ydHMgdGhhdCBoZSB3YXMgZ29pbmcgdG8gYmUgZXBob3IgYWdhaW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEFnZXNpbGHDvHMsIHdobyB3YXMgb25lIG9mIHRoZSBlcGhvcnMsIGJlaW5nIG5vdyBmcmVlZCBmcm9tIHdoYXQgaGFkIGtlcHQgaGltIGluIHJlc3RyYWludCBiZWZvcmUsIHNocmFuayBmcm9tIG5vIGluanVzdGljZSB0aGF0IGJyb3VnaHQgaGltIG1vbmV5LCBuYXksIGNvbnRyYXJ5IHRvIHRoZSBjdXN0b21hcnkgYXJyYW5nZW1lbnQgb2YgdGhlIGNhbGVuZGFyLCBhbmQgd2hlbiB0aGUgdGltZSBmb3IgaXQgaGFkIG5vdCB5ZXQgY29tZSwgaGUgaW5zZXJ0ZWQgYSB0aGlydGVlbnRoIG1vbnRoPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGlzIHdhcyByZWd1bGFybHkgZG9uZSB0aHJpY2UgZHVyaW5nIGEgcGVyaW9kIG9mIG5pbmUgeWVhcnMsIGJ1dCBpbiBkaXN0aW5jdGx5IHNwZWNpZmllZCB5ZWFycy4gIFRoZSBvYmplY3Qgd2FzIHRvIGVxdWFsaXplIHRoZSBsdW5hciBhbmQgc29sYXIgeWVhcnMuPC9ub3RlPiBhbmQgZXhhY3RlZCB0aGUgdGF4ZXMgZm9yIGl0LiBNb3Jlb3ZlciwgaW4gZmVhciBvZiB0aGUgdmljdGltcyBvZiBoaXMgaW5qdXN0aWNlIGFuZCBoYXRlZCBieSBhbGwgbWVuLCBoZSBrZXB0IGFuIGFybWVkIGJvZHlndWFyZCwgYW5kIHdvdWxkIGdvIGRvd24gdG8gaGlzIG1hZ2lzdHJhY3kgdW5kZXIgdGhlaXIgcHJvdGVjdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgdGhlIGtpbmdzLCBoZSB3aXNoZWQgbWVuIHRvIHRoaW5rIHRoYXQgaGUgdXR0ZXJseSBkZXNwaXNlZCB0aGUgb25lLCBhbmQgaGVsZCBBZ2lzIGluIHNvbWUgc2xpZ2h0IGhvbm91ciBtb3JlIGJlY2F1c2Ugb2YgaGlzIG5lYXIgcmVsYXRpb25zaGlwIHRoYW4gYmVjYXVzZSBoZSB3YXMga2luZy4gSGUgYWxzbyBzcHJlYWQgcmVwb3J0cyB0aGF0IGhlIHdhcyBnb2luZyB0byBiZSBlcGhvciBhZ2Fpbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Gb3IgdGhpcyByZWFzb24gaGlzIGVuZW1pZXMgbG9zdCBubyB0aW1lIGluIHRha2luZyB0aGUgZ3JlYXQgaGF6YXJkLCBhbmQgYmFuZGluZyB0b2dldGhlciwgb3Blbmx5IGJyb3VnaHQgaG9tZSBMZW9uaWRhcyBmcm9tIFRlZ2VhIHRvIGV4ZXJjaXNlIHRoZSByb3lhbCBwb3dlci4gRXZlbiB0aGUgY29tbW9uIHBlb3BsZSB3ZXJlIGdsYWQgdG8gc2VlIHRoaXMgZG9uZSwgZm9yIHRoZXkgd2VyZSBpbmNlbnNlZCBhdCB0aGVpciBkZWNlcHRpb24gaW4gdGhlIHByb21pc2VkIGRpdmlzaW9uIG9mIHRoZSBsYW5kLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMsIGFjY29yZGluZ2x5LCB3YXMgdGFrZW4gb3V0IG9mIHRoZSBjb3VudHJ5IGFuZCBzYXZlZCBieSBoaXMgc29uIEhpcHBvbWVkb24sIHdobyBlbnRyZWF0ZWQgaGlzIGZlbGxvdy1jaXRpemVucywgYW5kIHdhcyBiZWxvdmVkIG9mIGFsbCBiZWNhdXNlIG9mIGhpcyB2YWxvdXI7IGFuZCBhcyBmb3IgdGhlIGtpbmdzLCBBZ2lzIGZsZWQgZm9yIHJlZnVnZSB0byB0aGUgdGVtcGxlIG9mIEF0aGVuYSBvZiB0aGUgQnJhemVuIEhvdXNlLCB3aGlsZSBDbGVvbWJyb3R1cyB3ZW50IGFzIGEgc3VwcGxpYW50IHRvIHRoZSBzYW5jdHVhcnkgb2YgUG9zZWlkb247PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T24gdGhlIHByb21vbnRvcnkgb2YgVGFlbmFydW0uIFNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAyMi41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNsZW9tZW5lczwvdGl0bGU+LCB4eGlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBmb3IgTGVvbmlkYXMgd2FzIHRob3VnaHQgdG8gYmUgbW9yZSBiaXR0ZXIgYWdhaW5zdCBoaW0sIGFuZCBpbiBmYWN0IGhlIGxlZnQgQWdpcyB1bm1vbGVzdGVkIGFuZCB3ZW50IHVwIGFnYWluc3QgQ2xlb21icm90dXMgd2l0aCBzb2xkaWVycy4gQW5kIHdoZW4gaGUgYXJyaXZlZCBoZSBkZW5vdW5jZWQgQ2xlb21icm90dXMgYW5ncmlseSBiZWNhdXNlLCB0aG91Z2ggYSBzb24taW4tbGF3LCBoZSBoYWQgcGxvdHRlZCBhZ2FpbnN0IGhpbSwgcm9iYmVkIGhpbSBvZiB0aGUgcm95YWwgcG93ZXIsIGFuZCBoZWxwZWQgaW4gZHJpdmluZyBoaW0gZnJvbSB0aGUgY291bnRyeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMsIGFjY29yZGluZ2x5LCB3YXMgdGFrZW4gb3V0IG9mIHRoZSBjb3VudHJ5IGFuZCBzYXZlZCBieSBoaXMgc29uIEhpcHBvbWVkb24sIHdobyBlbnRyZWF0ZWQgaGlzIGZlbGxvdy1jaXRpemVucywgYW5kIHdhcyBiZWxvdmVkIG9mIGFsbCBiZWNhdXNlIG9mIGhpcyB2YWxvdXI7IGFuZCBhcyBmb3IgdGhlIGtpbmdzLCBBZ2lzIGZsZWQgZm9yIHJlZnVnZSB0byB0aGUgdGVtcGxlIG9mIEF0aGVuYSBvZiB0aGUgQnJhemVuIEhvdXNlLCB3aGlsZSBDbGVvbWJyb3R1cyB3ZW50IGFzIGEgc3VwcGxpYW50IHRvIHRoZSBzYW5jdHVhcnkgb2YgUG9zZWlkb247PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbiB0aGUgcHJvbW9udG9yeSBvZiBUYWVuYXJ1bS4gU2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMjIuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4eGlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBmb3IgTGVvbmlkYXMgd2FzIHRob3VnaHQgdG8gYmUgbW9yZSBiaXR0ZXIgYWdhaW5zdCBoaW0sIGFuZCBpbiBmYWN0IGhlIGxlZnQgQWdpcyB1bm1vbGVzdGVkIGFuZCB3ZW50IHVwIGFnYWluc3QgQ2xlb21icm90dXMgd2l0aCBzb2xkaWVycy4gQW5kIHdoZW4gaGUgYXJyaXZlZCBoZSBkZW5vdW5jZWQgQ2xlb21icm90dXMgYW5ncmlseSBiZWNhdXNlLCB0aG91Z2ggYSBzb24taW4tbGF3LCBoZSBoYWQgcGxvdHRlZCBhZ2FpbnN0IGhpbSwgcm9iYmVkIGhpbSBvZiB0aGUgcm95YWwgcG93ZXIsIGFuZCBoZWxwZWQgaW4gZHJpdmluZyBoaW0gZnJvbSB0aGUgY291bnRyeS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDIyLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeHhpaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4eGlpLiA1LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkNsZW9tYnJvdHVzLCBvbiBoaXMgcGFydCwgaGFkIG5hdWdodCB0byBzYXkgZm9yIGhpbXNlbGYsIGJ1dCBzYXQgcGVycGxleGVkIGFuZCBzcGVlY2hsZXNzOyBDaGlsb25pcywgaG93ZXZlciwgdGhlIGRhdWdodGVyIG9mIExlb25pZGFzLCB3aG8gYmVmb3JlIHRoaXMgaGFkIGZlbHQgaGVyc2VsZiB3cm9uZ2VkIGluIHRoZSB3cm9uZ3MgZG9uZSB0byBoZXIgZmF0aGVyLCBhbmQgd2hlbiBDbGVvbWJyb3R1cyB3YXMgbWFkZSBraW5nIGhhZCBsZWZ0IGhpbSBhbmQgbWluaXN0ZXJlZCB0byBoZXIgZmF0aGVyIGluIGhpcyBtaXNmb3J0dW5lcyzigJRzaGFyaW5nIGhpcyBzdXBwbGlhbnQgbGlmZSB3aGlsZSBoZSB3YXMgaW4gdGhlIGNpdHksIGFuZCBpbiBoaXMgZXhpbGUgY29udGludWFsbHkgZ3JpZXZpbmcgZm9yIGhpbSBhbmQgY2hlcmlzaGluZyBiaXR0ZXIgdGhvdWdodHMgb2YgQ2xlb21icm90dXPigJRhdCB0aGlzIHRpbWUgY2hhbmdlZCBiYWNrIGFnYWluIHdpdGggdGhlIGNoYW5nZWQgZm9ydHVuZXMgb2YgdGhlIG1lbiwgYW5kIHdhcyBzZWVuIHNpdHRpbmcgYXMgYSBzdXBwbGlhbnQgd2l0aCBoZXIgaHVzYmFuZCwgaGVyIGFybXMgdGhyb3duIGFib3V0IGhpbSwgYW5kIGEgbGl0dGxlIGNoaWxkIGNsaW5naW5nIHRvIGhlciBvbiBlaXRoZXIgc2lkZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIGJlaG9sZGVycyB3ZXJlIG1vdmVkIHRvIHdvbmRlciBhbmQgdGVhcnMgYXQgdGhlIGZpZGVsaXR5IGFuZCBkZXZvdGlvbiBvZiB0aGUgd29tYW4sIHdobywgdG91Y2hpbmcgaGVyIHJvYmVzIGFuZCBoZXIgaGFpciwgYWxpa2UgdW5rZW1wdCwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGdhcmIsIG15IGZhdGhlciwgYW5kIHRoaXMgYXBwZWFyYW5jZSwgYXJlIG5vdCBkdWUgdG8gbXkgcGl0eSBmb3IgQ2xlb21icm90dXM7IG5heSwgZXZlciBzaW5jZSB0aHkgc29ycm93cyBhbmQgdGhpbmUgZXhpbGUgZ3JpZWYgaGFzIGJlZW4gbXkgc3RlYWRmYXN0IG1hdGUgYW5kIGNvbXBhbmlvbi4gTXVzdCBJLCB0aGVuLCBub3cgdGhhdCB0aG91IGFydCBraW5nIGluIFNwYXJ0YSBhbmQgdmljdG9yaW91cyBvdmVyIHRoaW5lIGVuZW1pZXMsIGNvbnRpbnVlIHRvIGxpdmUgaW4gdGhpcyBzYWQgc3RhdGUsIG9yIHB1dCBvbiB0aGUgc3BsZW5kaWQgYXR0aXJlIG9mIHJveWFsdHksIGFmdGVyIHNlZWluZyB0aGUgaHVzYmFuZCBvZiBteSB5b3V0aCBzbGFpbiBhdCB0aHkgaGFuZHM/IAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IGh1c2JhbmQsIHVubGVzcyBoZSBwZXJzdWFkZXMgYW5kIHdpbnMgdGhlZSBvdmVyIGJ5IHRoZSB0ZWFycyBvZiBoaXMgd2lmZSBhbmQgY2hpbGRyZW4sIHdpbGwgcGF5IGEgbW9yZSBncmlldm91cyBwZW5hbHR5IGZvciBoaXMgZXZpbCBkZXNpZ25zIHRoYW4gdGhvdSBkZXNpcmVzdCwgZm9yIGhlIHNoYWxsIHNlZSBtZSwgaGlzIG1vc3QgYmVsb3ZlZCBvbmUsIGRlYWQgYmVmb3JlIGhlIGlzLiBGb3Igd2l0aCB3aGF0IGFzc3VyYW5jZSBjb3VsZCBJIGxpdmUgYW5kIGZhY2UgdGhlIG90aGVyIHdvbWVuLCBJLCB3aG9zZSBwcmF5ZXJzIGF3YWtlbmVkIG5vIHBpdHkgaW4gZWl0aGVyIGh1c2JhbmQgb3IgZmF0aGVyPyBOYXksIGJvdGggYXMgd2lmZSBhbmQgYXMgZGF1Z2h0ZXIgSSB3YXMgYm9ybiB0byBzaGFyZSBvbmx5IHRoZSBtaXNmb3J0dW5lIGFuZCBkaXNob25vdXIgb2YgdGhlIG1lbiBuZWFyZXN0IGFuZCBkZWFyZXN0IHRvIG1lLiAKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIG15IGh1c2JhbmQsIGV2ZW4gaWYgaGUgaGFkIHNvbWUgcGxhdXNpYmxlIGV4Y3VzZSBmb3IgaGlzIGNvdXJzZSwgSSByb2JiZWQgaGltIG9mIGl0IGF0IHRoYXQgdGltZSBieSB0YWtpbmcgdGh5IHBhcnQgYW5kIHRlc3RpZnlpbmcgdG8gd2hhdCBoZSBoYWQgZG9uZTsgYnV0IHRob3UgbWFrZXN0IGhpcyBjcmltZSBhbiBlYXN5IG9uZSB0byBkZWZlbmQgYnkgc2hvd2luZyBtZW4gdGhhdCByb3lhbCBwb3dlciBpcyBhIHRoaW5nIHNvIGdyZWF0IGFuZCBzbyB3b3J0aCBmaWdodGluZyBmb3IgdGhhdCBmb3IgaXRzIHNha2UgaXQgaXMgcmlnaHQgdG8gc2xheSBhIHNvbi1pbi1sYXcgYW5kIGlnbm9yZSBhIGNoaWxkLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2xlb21icm90dXMsIG9uIGhpcyBwYXJ0LCBoYWQgbmF1Z2h0IHRvIHNheSBmb3IgaGltc2VsZiwgYnV0IHNhdCBwZXJwbGV4ZWQgYW5kIHNwZWVjaGxlc3M7IENoaWxvbmlzLCBob3dldmVyLCB0aGUgZGF1Z2h0ZXIgb2YgTGVvbmlkYXMsIHdobyBiZWZvcmUgdGhpcyBoYWQgZmVsdCBoZXJzZWxmIHdyb25nZWQgaW4gdGhlIHdyb25ncyBkb25lIHRvIGhlciBmYXRoZXIsIGFuZCB3aGVuIENsZW9tYnJvdHVzIHdhcyBtYWRlIGtpbmcgaGFkIGxlZnQgaGltIGFuZCBtaW5pc3RlcmVkIHRvIGhlciBmYXRoZXIgaW4gaGlzIG1pc2ZvcnR1bmVzLOKAlHNoYXJpbmcgaGlzIHN1cHBsaWFudCBsaWZlIHdoaWxlIGhlIHdhcyBpbiB0aGUgY2l0eSwgYW5kIGluIGhpcyBleGlsZSBjb250aW51YWxseSBncmlldmluZyBmb3IgaGltIGFuZCBjaGVyaXNoaW5nIGJpdHRlciB0aG91Z2h0cyBvZiBDbGVvbWJyb3R1c+KAlGF0IHRoaXMgdGltZSBjaGFuZ2VkIGJhY2sgYWdhaW4gd2l0aCB0aGUgY2hhbmdlZCBmb3J0dW5lcyBvZiB0aGUgbWVuLCBhbmQgd2FzIHNlZW4gc2l0dGluZyBhcyBhIHN1cHBsaWFudCB3aXRoIGhlciBodXNiYW5kLCBoZXIgYXJtcyB0aHJvd24gYWJvdXQgaGltLCBhbmQgYSBsaXR0bGUgY2hpbGQgY2xpbmdpbmcgdG8gaGVyIG9uIGVpdGhlciBzaWRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsbCBiZWhvbGRlcnMgd2VyZSBtb3ZlZCB0byB3b25kZXIgYW5kIHRlYXJzIGF0IHRoZSBmaWRlbGl0eSBhbmQgZGV2b3Rpb24gb2YgdGhlIHdvbWFuLCB3aG8sIHRvdWNoaW5nIGhlciByb2JlcyBhbmQgaGVyIGhhaXIsIGFsaWtlIHVua2VtcHQsIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGdhcmIsIG15IGZhdGhlciwgYW5kIHRoaXMgYXBwZWFyYW5jZSwgYXJlIG5vdCBkdWUgdG8gbXkgcGl0eSBmb3IgQ2xlb21icm90dXM7IG5heSwgZXZlciBzaW5jZSB0aHkgc29ycm93cyBhbmQgdGhpbmUgZXhpbGUgZ3JpZWYgaGFzIGJlZW4gbXkgc3RlYWRmYXN0IG1hdGUgYW5kIGNvbXBhbmlvbi4gTXVzdCBJLCB0aGVuLCBub3cgdGhhdCB0aG91IGFydCBraW5nIGluIFNwYXJ0YSBhbmQgdmljdG9yaW91cyBvdmVyIHRoaW5lIGVuZW1pZXMsIGNvbnRpbnVlIHRvIGxpdmUgaW4gdGhpcyBzYWQgc3RhdGUsIG9yIHB1dCBvbiB0aGUgc3BsZW5kaWQgYXR0aXJlIG9mIHJveWFsdHksIGFmdGVyIHNlZWluZyB0aGUgaHVzYmFuZCBvZiBteSB5b3V0aCBzbGFpbiBhdCB0aHkgaGFuZHM/IAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgaHVzYmFuZCwgdW5sZXNzIGhlIHBlcnN1YWRlcyBhbmQgd2lucyB0aGVlIG92ZXIgYnkgdGhlIHRlYXJzIG9mIGhpcyB3aWZlIGFuZCBjaGlsZHJlbiwgd2lsbCBwYXkgYSBtb3JlIGdyaWV2b3VzIHBlbmFsdHkgZm9yIGhpcyBldmlsIGRlc2lnbnMgdGhhbiB0aG91IGRlc2lyZXN0LCBmb3IgaGUgc2hhbGwgc2VlIG1lLCBoaXMgbW9zdCBiZWxvdmVkIG9uZSwgZGVhZCBiZWZvcmUgaGUgaXMuIEZvciB3aXRoIHdoYXQgYXNzdXJhbmNlIGNvdWxkIEkgbGl2ZSBhbmQgZmFjZSB0aGUgb3RoZXIgd29tZW4sIEksIHdob3NlIHByYXllcnMgYXdha2VuZWQgbm8gcGl0eSBpbiBlaXRoZXIgaHVzYmFuZCBvciBmYXRoZXI/IE5heSwgYm90aCBhcyB3aWZlIGFuZCBhcyBkYXVnaHRlciBJIHdhcyBib3JuIHRvIHNoYXJlIG9ubHkgdGhlIG1pc2ZvcnR1bmUgYW5kIGRpc2hvbm91ciBvZiB0aGUgbWVuIG5lYXJlc3QgYW5kIGRlYXJlc3QgdG8gbWUuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgbXkgaHVzYmFuZCwgZXZlbiBpZiBoZSBoYWQgc29tZSBwbGF1c2libGUgZXhjdXNlIGZvciBoaXMgY291cnNlLCBJIHJvYmJlZCBoaW0gb2YgaXQgYXQgdGhhdCB0aW1lIGJ5IHRha2luZyB0aHkgcGFydCBhbmQgdGVzdGlmeWluZyB0byB3aGF0IGhlIGhhZCBkb25lOyBidXQgdGhvdSBtYWtlc3QgaGlzIGNyaW1lIGFuIGVhc3kgb25lIHRvIGRlZmVuZCBieSBzaG93aW5nIG1lbiB0aGF0IHJveWFsIHBvd2VyIGlzIGEgdGhpbmcgc28gZ3JlYXQgYW5kIHNvIHdvcnRoIGZpZ2h0aW5nIGZvciB0aGF0IGZvciBpdHMgc2FrZSBpdCBpcyByaWdodCB0byBzbGF5IGEgc29uLWluLWxhdyBhbmQgaWdub3JlIGEgY2hpbGQuPC9xPgoJCQkgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgaHVzYmFuZCwgdW5sZXNzIGhlIHBlcnN1YWRlcyBhbmQgd2lucyB0aGVlIG92ZXIgYnkgdGhlIHRlYXJzIG9mIGhpcyB3aWZlIGFuZCBjaGlsZHJlbiwgd2lsbCBwYXkgYSBtb3JlIGdyaWV2b3VzIHBlbmFsdHkgZm9yIGhpcyBldmlsIGRlc2lnbnMgdGhhbiB0aG91IGRlc2lyZXN0LCBmb3IgaGUgc2hhbGwgc2VlIG1lLCBoaXMgbW9zdCBiZWxvdmVkIG9uZSwgZGVhZCBiZWZvcmUgaGUgaXMuIEZvciB3aXRoIHdoYXQgYXNzdXJhbmNlIGNvdWxkIEkgbGl2ZSBhbmQgZmFjZSB0aGUgb3RoZXIgd29tZW4sIEksIHdob3NlIHByYXllcnMgYXdha2VuZWQgbm8gcGl0eSBpbiBlaXRoZXIgaHVzYmFuZCBvciBmYXRoZXI/IE5heSwgYm90aCBhcyB3aWZlIGFuZCBhcyBkYXVnaHRlciBJIHdhcyBib3JuIHRvIHNoYXJlIG9ubHkgdGhlIG1pc2ZvcnR1bmUgYW5kIGRpc2hvbm91ciBvZiB0aGUgbWVuIG5lYXJlc3QgYW5kIGRlYXJlc3QgdG8gbWUuIAoJCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBteSBodXNiYW5kLCBldmVuIGlmIGhlIGhhZCBzb21lIHBsYXVzaWJsZSBleGN1c2UgZm9yIGhpcyBjb3Vyc2UsIEkgcm9iYmVkIGhpbSBvZiBpdCBhdCB0aGF0IHRpbWUgYnkgdGFraW5nIHRoeSBwYXJ0IGFuZCB0ZXN0aWZ5aW5nIHRvIHdoYXQgaGUgaGFkIGRvbmU7IGJ1dCB0aG91IG1ha2VzdCBoaXMgY3JpbWUgYW4gZWFzeSBvbmUgdG8gZGVmZW5kIGJ5IHNob3dpbmcgbWVuIHRoYXQgcm95YWwgcG93ZXIgaXMgYSB0aGluZyBzbyBncmVhdCBhbmQgc28gd29ydGggZmlnaHRpbmcgZm9yIHRoYXQgZm9yIGl0cyBzYWtlIGl0IGlzIHJpZ2h0IHRvIHNsYXkgYSBzb24taW4tbGF3IGFuZCBpZ25vcmUgYSBjaGlsZC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5VdHRlcmluZyBzdWNoIHN1cHBsaWNhdGlvbnMgQ2hpbG9uaXMgcmVzdGVkIGhlciBmYWNlIHVwb24gdGhlIGhlYWQgb2YgQ2xlb21icm90dXMgYW5kIHR1cm5lZCBoZXIgZXllcywgYWxsIG1lbHRlZCBhbmQgbWFycmVkIHdpdGggZ3JpZWYsIHVwb24gdGhlIGJ5c3RhbmRlcnMuIFRoZW4gTGVvbmlkYXMsIGFmdGVyIGNvbmZlcmVuY2Ugd2l0aCBoaXMgZnJpZW5kcywgYmFkZSBDbGVvbWJyb3R1cyBsZWF2ZSBoaXMgYXN5bHVtIGFuZCBnbyBpbnRvIGV4aWxlLCBidXQgYmVnZ2VkIGhpcyBkYXVnaHRlciB0byByZW1haW4sIGFuZCBub3QgdG8gYWJhbmRvbiBoaW0sIHNpbmNlIGhlIGxvdmVkIGhlciBzbyBtdWNoLCBhbmQgaGFkIG1hZGUgaGVyIGEgZnJlZSBnaWZ0IG9mIGhlciBodXNiYW5kJ3MgbGlmZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgY291bGQgbm90IHBlcnN1YWRlIGhlciwgaG93ZXZlciwgYnV0IHdoZW4gaGVyIGh1c2JhbmQgcm9zZSB0byBnbyBzaGUgcHV0IG9uZSBvZiBoZXIgY2hpbGRyZW4gaW4gaGlzIGFybXMsIHRvb2sgdXAgdGhlIG90aGVyIG9uZSBoZXJzZWxmLCBhbmQgd2VudCBmb3J0aCBpbiBoaXMgY29tcGFueSBhZnRlciBhbiBvYmVpc2FuY2UgdG8gdGhlIGFsdGFyIG9mIHRoZSBnb2Q7IHNvIHRoYXQgaWYgQ2xlb21icm90dXMgaGFkIG5vdCBiZWVuIHdob2xseSBjb3JydXB0ZWQgYnkgdmFpbiBhbWJpdGlvbiwgaGUgd291bGQgaGF2ZSBjb25zaWRlcmVkIHRoYXQgZXhpbGUgd2FzIGEgZ3JlYXRlciBibGVzc2luZyBmb3IgaGltIHRoYW4gdGhlIGtpbmdkb20sIGJlY2F1c2UgaXQgcmVzdG9yZWQgdG8gaGltIGhpcyB3aWZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VXR0ZXJpbmcgc3VjaCBzdXBwbGljYXRpb25zIENoaWxvbmlzIHJlc3RlZCBoZXIgZmFjZSB1cG9uIHRoZSBoZWFkIG9mIENsZW9tYnJvdHVzIGFuZCB0dXJuZWQgaGVyIGV5ZXMsIGFsbCBtZWx0ZWQgYW5kIG1hcnJlZCB3aXRoIGdyaWVmLCB1cG9uIHRoZSBieXN0YW5kZXJzLiBUaGVuIExlb25pZGFzLCBhZnRlciBjb25mZXJlbmNlIHdpdGggaGlzIGZyaWVuZHMsIGJhZGUgQ2xlb21icm90dXMgbGVhdmUgaGlzIGFzeWx1bSBhbmQgZ28gaW50byBleGlsZSwgYnV0IGJlZ2dlZCBoaXMgZGF1Z2h0ZXIgdG8gcmVtYWluLCBhbmQgbm90IHRvIGFiYW5kb24gaGltLCBzaW5jZSBoZSBsb3ZlZCBoZXIgc28gbXVjaCwgYW5kIGhhZCBtYWRlIGhlciBhIGZyZWUgZ2lmdCBvZiBoZXIgaHVzYmFuZCdzIGxpZmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGNvdWxkIG5vdCBwZXJzdWFkZSBoZXIsIGhvd2V2ZXIsIGJ1dCB3aGVuIGhlciBodXNiYW5kIHJvc2UgdG8gZ28gc2hlIHB1dCBvbmUgb2YgaGVyIGNoaWxkcmVuIGluIGhpcyBhcm1zLCB0b29rIHVwIHRoZSBvdGhlciBvbmUgaGVyc2VsZiwgYW5kIHdlbnQgZm9ydGggaW4gaGlzIGNvbXBhbnkgYWZ0ZXIgYW4gb2JlaXNhbmNlIHRvIHRoZSBhbHRhciBvZiB0aGUgZ29kOyBzbyB0aGF0IGlmIENsZW9tYnJvdHVzIGhhZCBub3QgYmVlbiB3aG9sbHkgY29ycnVwdGVkIGJ5IHZhaW4gYW1iaXRpb24sIGhlIHdvdWxkIGhhdmUgY29uc2lkZXJlZCB0aGF0IGV4aWxlIHdhcyBhIGdyZWF0ZXIgYmxlc3NpbmcgZm9yIGhpbSB0aGFuIHRoZSBraW5nZG9tLCBiZWNhdXNlIGl0IHJlc3RvcmVkIHRvIGhpbSBoaXMgd2lmZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BZnRlciByZW1vdmluZyBDbGVvbWJyb3R1cyBmcm9tIGhpcyBhc3lsdW0sIExlb25pZGFzIGV4cGVsbGVkIHRoZSBvZmZpY2lhdGluZyBlcGhvcnMgZnJvbSB0aGVpciBvZmZpY2UsIGFwcG9pbnRlZCBvdGhlcnMgaW4gdGhlaXIgcGxhY2UsIGFuZCBhdCBvbmNlIGJlZ2FuIHRvIGxheSBwbG90cyBhZ2FpbnN0IHRoZSBsaWZlIG9mIEFnaXMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VG8gYmVnaW4gd2l0aCwgaGUgdHJpZWQgdG8gcGVyc3VhZGUgQWdpcyB0byBsZWF2ZSBoaXMgYXN5bHVtIGFuZCBzaGFyZSB0aGUgcm95YWwgcG93ZXIgd2l0aCBoaW0sIGFzc3VyaW5nIEFnaXMgdGhhdCB0aGUgY2l0aXplbnMgaGFkIHBhcmRvbmVkIGhpbSwgYmVjYXVzZSwgYmVpbmcgYSB5b3VuZyBtYW4gYW5kIGFtYml0aW91cywgaGUgaGFkIGJlZW4gb25lIG9mIHRob3NlIHdob20gQWdlc2lsYcO8cyBoYWQgY29tcGxldGVseSBkZWNlaXZlZC4gQnV0IEFnaXMgY29udGludWVkIHRvIGJlIHN1c3BpY2lvdXMgYW5kIHdvdWxkIG5vdCBsZWF2ZSBoaXMgYXN5bHVtLiBTbyBMZW9uaWRhcyBoaW1zZWxmIHN0b3BwZWQgdHJ5aW5nIHRvIGNoZWF0IGFuZCBwbGF5IHRyaWNrcyB1cG9uIGhpbSwgYnV0IEFtcGhhcmVzLCBEYW1vY2hhcmVzLCBhbmQgQXJjZXNpbGHDvHMgZGlkIG5vdC4gVGhleSB3ZXJlIHdvbnQgdG8gZ28gdXAgdG8gdGhlIHRlbXBsZSBhbmQgdmVyc2Ugd2l0aCBBZ2lzOyBhbmQgb25jZSB0aGV5IGFjdHVhbGx5IHRvb2sgaGltIGluIGNoYXJnZSBhbmQgYnJvdWdodCBoaW0gZG93biBmcm9tIHRoZSB0ZW1wbGUgZm9yIGEgYmF0aCwgYW5kIGFmdGVyIGhlIGhhZCBiYXRoZWQsIHJlc3RvcmVkIGhpbSBhZ2FpbiB0byB0aGUgdGVtcGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHdlcmUgYWxsIGNvbXJhZGVzIG9mIGhpcywgYnV0IEFtcGhhcmVzIGhhZCBhbHNvIGJvcnJvd2VkIHJlY2VudGx5IHNvbWUgY29zdGx5IHZlc3R1cmVzIGFuZCBiZWFrZXJzIGZyb20gQWdlc2lzdHJhdGEsIGFuZCB0aGVyZWZvcmUgcGxvdHRlZCB0byBkZXN0cm95IHRoZSBraW5nIGFuZCB0aGUgd29tZW4sIHRoYXQgaGUgbWlnaHQgbm90IGhhdmUgdG8gcmV0dXJuIHdoYXQgaGUgaGFkIGJvcnJvd2VkLiBBbmQgaGUsIGNlcnRhaW5seSwgbW9yZSB0aGFuIGFueW9uZSBlbHNlLCBhcyB3ZSBhcmUgdG9sZCwgZm9sbG93ZWQgdGhlIGNvdW5zZWxzIG9mIExlb25pZGFzIGFuZCBlbWJpdHRlcmVkIHRoZSBlcGhvcnMsIG9mIHdob20gaGUgd2FzIG9uZSwgYWdhaW5zdCBBZ2lzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvIGJlZ2luIHdpdGgsIGhlIHRyaWVkIHRvIHBlcnN1YWRlIEFnaXMgdG8gbGVhdmUgaGlzIGFzeWx1bSBhbmQgc2hhcmUgdGhlIHJveWFsIHBvd2VyIHdpdGggaGltLCBhc3N1cmluZyBBZ2lzIHRoYXQgdGhlIGNpdGl6ZW5zIGhhZCBwYXJkb25lZCBoaW0sIGJlY2F1c2UsIGJlaW5nIGEgeW91bmcgbWFuIGFuZCBhbWJpdGlvdXMsIGhlIGhhZCBiZWVuIG9uZSBvZiB0aG9zZSB3aG9tIEFnZXNpbGHDvHMgaGFkIGNvbXBsZXRlbHkgZGVjZWl2ZWQuIEJ1dCBBZ2lzIGNvbnRpbnVlZCB0byBiZSBzdXNwaWNpb3VzIGFuZCB3b3VsZCBub3QgbGVhdmUgaGlzIGFzeWx1bS4gU28gTGVvbmlkYXMgaGltc2VsZiBzdG9wcGVkIHRyeWluZyB0byBjaGVhdCBhbmQgcGxheSB0cmlja3MgdXBvbiBoaW0sIGJ1dCBBbXBoYXJlcywgRGFtb2NoYXJlcywgYW5kIEFyY2VzaWxhw7xzIGRpZCBub3QuIFRoZXkgd2VyZSB3b250IHRvIGdvIHVwIHRvIHRoZSB0ZW1wbGUgYW5kIHZlcnNlIHdpdGggQWdpczsgYW5kIG9uY2UgdGhleSBhY3R1YWxseSB0b29rIGhpbSBpbiBjaGFyZ2UgYW5kIGJyb3VnaHQgaGltIGRvd24gZnJvbSB0aGUgdGVtcGxlIGZvciBhIGJhdGgsIGFuZCBhZnRlciBoZSBoYWQgYmF0aGVkLCByZXN0b3JlZCBoaW0gYWdhaW4gdG8gdGhlIHRlbXBsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSBhbGwgY29tcmFkZXMgb2YgaGlzLCBidXQgQW1waGFyZXMgaGFkIGFsc28gYm9ycm93ZWQgcmVjZW50bHkgc29tZSBjb3N0bHkgdmVzdHVyZXMgYW5kIGJlYWtlcnMgZnJvbSBBZ2VzaXN0cmF0YSwgYW5kIHRoZXJlZm9yZSBwbG90dGVkIHRvIGRlc3Ryb3kgdGhlIGtpbmcgYW5kIHRoZSB3b21lbiwgdGhhdCBoZSBtaWdodCBub3QgaGF2ZSB0byByZXR1cm4gd2hhdCBoZSBoYWQgYm9ycm93ZWQuIEFuZCBoZSwgY2VydGFpbmx5LCBtb3JlIHRoYW4gYW55b25lIGVsc2UsIGFzIHdlIGFyZSB0b2xkLCBmb2xsb3dlZCB0aGUgY291bnNlbHMgb2YgTGVvbmlkYXMgYW5kIGVtYml0dGVyZWQgdGhlIGVwaG9ycywgb2Ygd2hvbSBoZSB3YXMgb25lLCBhZ2FpbnN0IEFnaXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBBZ2lzIHNwZW50IG1vc3Qgb2YgaGlzIHRpbWUgaW4gdGhlIHNhbmN0dWFyeSwgYnV0IHdhcyB3b250IHRvIGdvIGRvd24gZnJvbSB0aW1lIHRvIHRpbWUgdG8gaGlzIGJhdGguIFRoZXJlLCB0aGVuLCB0aGV5IGRldGVybWluZWQgdG8gc2VpemUgaGltLCB3aGVuIGhlIHdhcyBvdXRzaWRlIHRoZSBzYW5jdHVhcnkuIFNvIHRoZXkgd2FpdGVkIHRpbGwgaGUgaGFkIGZpbmlzaGVkIGhpcyBiYXRoLCBhbmQgdGhlbiBjYW1lIHRvIG1lZXQgaGltIHdpdGggZnJpZW5kbHkgZ3JlZXRpbmdzLCBhbmQgd2Fsa2VkIGFsb25nIHdpdGggaGltLCBjb252ZXJzaW5nIGFuZCBqZXN0aW5nIHdpdGggaGltIGFmdGVyIHRoZSBtYW5uZXIgb2YgeW91dGhmdWwgY29tcmFkZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCBhIGNlcnRhaW4gcG9pbnQgdGhlIHJvYWQgYnJhbmNoZWQgb2ZmIHRvd2FyZHMgdGhlIHByaXNvbiwgYW5kIHdoZW4gdGhleSB3ZXJlIGNvbWUgdG8gdGhhdCBwbGFjZSwgQW1waGFyZXMsIGJ5IHZpcnR1ZSBvZiBoaXMgb2ZmaWNlLCBsYWlkIGhhbmRzIG9uIEFnaXMgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBzaGFsbCBsZWFkIHRoZWUsIEFnaXMsIHRvIHRoZSBlcGhvcnMsIHRvIGFuc3dlciBmb3IgdGh5IG1lYXN1cmVzIG9mIHN0YXRlPC9xPjsgYW5kIERhbW9jaGFyZXMsIHdobyB3YXMgdGFsbCBhbmQgcm9idXN0LCB0aHJldyBoaXMgY2xvYWsgYWJvdXQgdGhlIGtpbmcncyBuZWNrIGFuZCBkcmFnZ2VkIGhpbSBhbG9uZy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T3RoZXJzIHB1c2hlZCBoaW0gYWxvbmcgZnJvbSBiZWhpbmQsIGFzIGhhZCBiZWVuIGFncmVlZCwgYW5kIHNpbmNlIGhlIGhhZCBubyBoZWxwZXIgYnV0IHdhcyB3aXRob3V0IGEgZnJpZW5kLCB0aGV5IHRocnVzdCBoaW0gaW50byB0aGUgcHJpc29uLiBBdCBvbmNlIExlb25pZGFzIHdhcyBhdCBoYW5kIHdpdGggYSBsYXJnZSBiYW5kIG9mIG1lcmNlbmFyaWVzIGFuZCBzdXJyb3VuZGVkIHRoZSBwcmlzb24sIHdoaWxlIHRoZSBlcGhvcnMgd2VudCBpbiB0byBBZ2lzLiBBZnRlciBzZW5kaW5nIGZvciB0aG9zZSBvZiB0aGUgc2VuYXRvcnMgd2hvIHdlcmUgb2YgdGhlIHNhbWUgbWluZCBhcyB0aGVtc2VsdmVzLCBhcyB0aG91Z2ggdGhlIGtpbmcgd2VyZSB0byBoYXZlIGEgdHJpYWwsIHRoZSBlcGhvcnMgb3JkZXJlZCBBZ2lzIHRvIGRlZmVuZCBoaXMgY29uZHVjdCBvZiBhZmZhaXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgeW91bmcga2luZyBsYXVnaGVkIGF0IHRoZWlyIGRpc3NpbXVsYXRpb24sIHdoZXJldXBvbiBBbXBoYXJlcyB0aHJlYXRlbmVkIHRoYXQgaGUgd291bGQgcnVlIHRoZSBkYXkgYW5kIGJlIHB1bmlzaGVkIGZvciBoaXMgdGVtZXJpdHk7IGJ1dCBhbm90aGVyIGVwaG9yLCBhcyB0aG91Z2ggcGxhaW5seSBvZmZlcmluZyBBZ2lzIGEgd2F5IHRvIGVzY2FwZSBmcm9tIHRoZSBjaGFyZ2VzIGFnYWluc3QgaGltLCBhc2tlZCBoaW0gaWYgaGUgaGFkIGRvbmUgd2hhdCBoZSBkaWQgdW5kZXIgY29tcHVsc2lvbiBmcm9tIEx5c2FuZGVyIGFuZCBBZ2VzaWxhw7xzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBBZ2lzIGFuc3dlcmVkIHRoYXQgaGUgaGFkIHN1ZmZlcmVkIGNvbXB1bHNpb24gZnJvbSBubyBvbmUsIGJ1dCB0aGF0IGluIGFkbWlyYXRpb24gYW5kIGltaXRhdGlvbiBvZiBMeWN1cmd1cyBoZSBoYWQgYWRvcHRlZCB0aGUgc2FtZSBwdWJsaWMgcG9saWN5IGFzIGhpcywgdGhlIHNhbWUgZXBob3IgYXNrZWQgYWdhaW4gaWYgaGUgcmVwZW50ZWQgb2Ygd2hhdCBoZSBoYWQgZG9uZS4gQnV0IHRoZSB5b3VuZyBraW5nIGRlY2xhcmVkIHRoYXQgaGUgaGFkIG5vIHJlcGVudGFuY2UgZm9yIHdoYXQgaGUgaGFkIG1vc3QgZXhjZWxsZW50bHkgcGxhbm5lZCwgYW5kIHdvdWxkIG5vdCBoYXZlLCBldmVuIGlmIGhlIHNhdyB0aGF0IGhlIHdhcyB0byBzdWZmZXIgdGhlIGV4dHJlbWVzdCBwZW5hbHR5LiBTbyB0aGV5IGNvbmRlbW5lZCBoaW0gdG8gZGVhdGgsIGFuZCBvcmRlcmVkIHRoZSBvZmZpY2VycyB0byBsZWFkIGhpbSBpbnRvIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRlY2hhcyw8L3E+IGFzIGl0IHdhcyBjYWxsZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgYSBjaGFtYmVyIG9mIHRoZSBwcmlzb24gaW4gd2hpY2ggdGhleSBzdHJhbmdsZSB0aG9zZSB3aG8gYXJlIHVuZGVyIHNlbnRlbmNlIG9mIGRlYXRoLiBCdXQgRGFtb2NoYXJlcywgd2hlbiBoZSBzYXcgdGhhdCB0aGUgb2ZmaWNlcnMgZGlkIG5vdCBkYXJlIHRvIGxheSBoYW5kcyBvbiBBZ2lzLCBhbmQgbGlrZXdpc2UgdGhhdCBldmVuIHRoZSBtZXJjZW5hcmllcyB3aG8gd2VyZSB0aGVyZSBzaHJhbmsgZnJvbSB0aGUgZGVlZCBhbmQgd2VyZSBsb3RoIHRvIGRvIGl0LCBmZWVsaW5nIGFzIHRoZXkgZGlkIHRoYXQgaXQgd2FzIGNvbnRyYXJ5IHRvIHRoZSBsYXdzIG9mIEdvZCBhbmQgbWFuIHRvIGxheSBiYW5kcyB1cG9uIHRoZSBwZXJzb24gb2YgYSBraW5nLCBoZWFwZWQgdGhyZWF0cyBhbmQgYWJ1c2UgdXBvbiB0aGVtIGFuZCBoaW1zZWxmIGRyYWdnZWQgQWdpcyBpbnRvIHRoZSBjaGFtYmVyIG9mIGRlYXRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYWxyZWFkeSBtYW55IHBlb3BsZSB3ZXJlIGF3YXJlIG9mIHRoZSBhcnJlc3QsIGFuZCB0aGVyZSB3YXMgYSBub2lzeSB0aHJvbmcgYXQgdGhlIGRvb3IgYW5kIG1hbnkgdG9yY2hlcywgYW5kIHRoZSBtb3RoZXIgYW5kIGdyYW5kbW90aGVyIG9mIEFnaXMgd2VyZSB0aGVyZSwgd2l0aCBjcmllcyBhbmQgcHJheWVycyB0aGF0IHRoZSBraW5nIG9mIHRoZSBTcGFydGFucyBzaG91bGQgaGF2ZSBhIGhlYXJpbmcgYW5kIGEgdHJpYWwgYmVmb3JlIHRoZSBjaXRpemVucy4gRm9yIHRoaXMgcmVhc29uIGVzcGVjaWFsbHkgdGhlIGVwaG9ycyBoYXN0ZW5lZCBvbiB0aGUga2luZydzIGV4ZWN1dGlvbiwgYmVsaWV2aW5nIHRoYXQgaGUgd291bGQgYmUgdGFrZW4gb3V0IG9mIHRoZWlyIGhhbmRzIGluIHRoZSBuaWdodCBpZiB0aGUgY29uY291cnNlIHNob3VsZCBpbmNyZWFzZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEFnaXMgc3BlbnQgbW9zdCBvZiBoaXMgdGltZSBpbiB0aGUgc2FuY3R1YXJ5LCBidXQgd2FzIHdvbnQgdG8gZ28gZG93biBmcm9tIHRpbWUgdG8gdGltZSB0byBoaXMgYmF0aC4gVGhlcmUsIHRoZW4sIHRoZXkgZGV0ZXJtaW5lZCB0byBzZWl6ZSBoaW0sIHdoZW4gaGUgd2FzIG91dHNpZGUgdGhlIHNhbmN0dWFyeS4gU28gdGhleSB3YWl0ZWQgdGlsbCBoZSBoYWQgZmluaXNoZWQgaGlzIGJhdGgsIGFuZCB0aGVuIGNhbWUgdG8gbWVldCBoaW0gd2l0aCBmcmllbmRseSBncmVldGluZ3MsIGFuZCB3YWxrZWQgYWxvbmcgd2l0aCBoaW0sIGNvbnZlcnNpbmcgYW5kIGplc3Rpbmcgd2l0aCBoaW0gYWZ0ZXIgdGhlIG1hbm5lciBvZiB5b3V0aGZ1bCBjb21yYWRlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCBhIGNlcnRhaW4gcG9pbnQgdGhlIHJvYWQgYnJhbmNoZWQgb2ZmIHRvd2FyZHMgdGhlIHByaXNvbiwgYW5kIHdoZW4gdGhleSB3ZXJlIGNvbWUgdG8gdGhhdCBwbGFjZSwgQW1waGFyZXMsIGJ5IHZpcnR1ZSBvZiBoaXMgb2ZmaWNlLCBsYWlkIGhhbmRzIG9uIEFnaXMgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHNoYWxsIGxlYWQgdGhlZSwgQWdpcywgdG8gdGhlIGVwaG9ycywgdG8gYW5zd2VyIGZvciB0aHkgbWVhc3VyZXMgb2Ygc3RhdGU8L3E+OyBhbmQgRGFtb2NoYXJlcywgd2hvIHdhcyB0YWxsIGFuZCByb2J1c3QsIHRocmV3IGhpcyBjbG9hayBhYm91dCB0aGUga2luZydzIG5lY2sgYW5kIGRyYWdnZWQgaGltIGFsb25nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk90aGVycyBwdXNoZWQgaGltIGFsb25nIGZyb20gYmVoaW5kLCBhcyBoYWQgYmVlbiBhZ3JlZWQsIGFuZCBzaW5jZSBoZSBoYWQgbm8gaGVscGVyIGJ1dCB3YXMgd2l0aG91dCBhIGZyaWVuZCwgdGhleSB0aHJ1c3QgaGltIGludG8gdGhlIHByaXNvbi4gQXQgb25jZSBMZW9uaWRhcyB3YXMgYXQgaGFuZCB3aXRoIGEgbGFyZ2UgYmFuZCBvZiBtZXJjZW5hcmllcyBhbmQgc3Vycm91bmRlZCB0aGUgcHJpc29uLCB3aGlsZSB0aGUgZXBob3JzIHdlbnQgaW4gdG8gQWdpcy4gQWZ0ZXIgc2VuZGluZyBmb3IgdGhvc2Ugb2YgdGhlIHNlbmF0b3JzIHdobyB3ZXJlIG9mIHRoZSBzYW1lIG1pbmQgYXMgdGhlbXNlbHZlcywgYXMgdGhvdWdoIHRoZSBraW5nIHdlcmUgdG8gaGF2ZSBhIHRyaWFsLCB0aGUgZXBob3JzIG9yZGVyZWQgQWdpcyB0byBkZWZlbmQgaGlzIGNvbmR1Y3Qgb2YgYWZmYWlycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB5b3VuZyBraW5nIGxhdWdoZWQgYXQgdGhlaXIgZGlzc2ltdWxhdGlvbiwgd2hlcmV1cG9uIEFtcGhhcmVzIHRocmVhdGVuZWQgdGhhdCBoZSB3b3VsZCBydWUgdGhlIGRheSBhbmQgYmUgcHVuaXNoZWQgZm9yIGhpcyB0ZW1lcml0eTsgYnV0IGFub3RoZXIgZXBob3IsIGFzIHRob3VnaCBwbGFpbmx5IG9mZmVyaW5nIEFnaXMgYSB3YXkgdG8gZXNjYXBlIGZyb20gdGhlIGNoYXJnZXMgYWdhaW5zdCBoaW0sIGFza2VkIGhpbSBpZiBoZSBoYWQgZG9uZSB3aGF0IGhlIGRpZCB1bmRlciBjb21wdWxzaW9uIGZyb20gTHlzYW5kZXIgYW5kIEFnZXNpbGHDvHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEFnaXMgYW5zd2VyZWQgdGhhdCBoZSBoYWQgc3VmZmVyZWQgY29tcHVsc2lvbiBmcm9tIG5vIG9uZSwgYnV0IHRoYXQgaW4gYWRtaXJhdGlvbiBhbmQgaW1pdGF0aW9uIG9mIEx5Y3VyZ3VzIGhlIGhhZCBhZG9wdGVkIHRoZSBzYW1lIHB1YmxpYyBwb2xpY3kgYXMgaGlzLCB0aGUgc2FtZSBlcGhvciBhc2tlZCBhZ2FpbiBpZiBoZSByZXBlbnRlZCBvZiB3aGF0IGhlIGhhZCBkb25lLiBCdXQgdGhlIHlvdW5nIGtpbmcgZGVjbGFyZWQgdGhhdCBoZSBoYWQgbm8gcmVwZW50YW5jZSBmb3Igd2hhdCBoZSBoYWQgbW9zdCBleGNlbGxlbnRseSBwbGFubmVkLCBhbmQgd291bGQgbm90IGhhdmUsIGV2ZW4gaWYgaGUgc2F3IHRoYXQgaGUgd2FzIHRvIHN1ZmZlciB0aGUgZXh0cmVtZXN0IHBlbmFsdHkuIFNvIHRoZXkgY29uZGVtbmVkIGhpbSB0byBkZWF0aCwgYW5kIG9yZGVyZWQgdGhlIG9mZmljZXJzIHRvIGxlYWQgaGltIGludG8gdGhlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EZWNoYXMsPC9xPiBhcyBpdCB3YXMgY2FsbGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgYSBjaGFtYmVyIG9mIHRoZSBwcmlzb24gaW4gd2hpY2ggdGhleSBzdHJhbmdsZSB0aG9zZSB3aG8gYXJlIHVuZGVyIHNlbnRlbmNlIG9mIGRlYXRoLiBCdXQgRGFtb2NoYXJlcywgd2hlbiBoZSBzYXcgdGhhdCB0aGUgb2ZmaWNlcnMgZGlkIG5vdCBkYXJlIHRvIGxheSBoYW5kcyBvbiBBZ2lzLCBhbmQgbGlrZXdpc2UgdGhhdCBldmVuIHRoZSBtZXJjZW5hcmllcyB3aG8gd2VyZSB0aGVyZSBzaHJhbmsgZnJvbSB0aGUgZGVlZCBhbmQgd2VyZSBsb3RoIHRvIGRvIGl0LCBmZWVsaW5nIGFzIHRoZXkgZGlkIHRoYXQgaXQgd2FzIGNvbnRyYXJ5IHRvIHRoZSBsYXdzIG9mIEdvZCBhbmQgbWFuIHRvIGxheSBiYW5kcyB1cG9uIHRoZSBwZXJzb24gb2YgYSBraW5nLCBoZWFwZWQgdGhyZWF0cyBhbmQgYWJ1c2UgdXBvbiB0aGVtIGFuZCBoaW1zZWxmIGRyYWdnZWQgQWdpcyBpbnRvIHRoZSBjaGFtYmVyIG9mIGRlYXRoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbHJlYWR5IG1hbnkgcGVvcGxlIHdlcmUgYXdhcmUgb2YgdGhlIGFycmVzdCwgYW5kIHRoZXJlIHdhcyBhIG5vaXN5IHRocm9uZyBhdCB0aGUgZG9vciBhbmQgbWFueSB0b3JjaGVzLCBhbmQgdGhlIG1vdGhlciBhbmQgZ3JhbmRtb3RoZXIgb2YgQWdpcyB3ZXJlIHRoZXJlLCB3aXRoIGNyaWVzIGFuZCBwcmF5ZXJzIHRoYXQgdGhlIGtpbmcgb2YgdGhlIFNwYXJ0YW5zIHNob3VsZCBoYXZlIGEgaGVhcmluZyBhbmQgYSB0cmlhbCBiZWZvcmUgdGhlIGNpdGl6ZW5zLiBGb3IgdGhpcyByZWFzb24gZXNwZWNpYWxseSB0aGUgZXBob3JzIGhhc3RlbmVkIG9uIHRoZSBraW5nJ3MgZXhlY3V0aW9uLCBiZWxpZXZpbmcgdGhhdCBoZSB3b3VsZCBiZSB0YWtlbiBvdXQgb2YgdGhlaXIgaGFuZHMgaW4gdGhlIG5pZ2h0IGlmIHRoZSBjb25jb3Vyc2Ugc2hvdWxkIGluY3JlYXNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2lzLCB0aGVuLCBvbiBoaXMgd2F5IHRvIHRoZSBoYWx0ZXIsIHNhdyBvbmUgb2YgdGhlIG9mZmljZXJzIHNoZWRkaW5nIHRlYXJzIG9mIHN5bXBhdGh5IGZvciBoaW0uIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgbWFuLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jZWFzZSB3ZWVwaW5nOyBmb3IgZXZlbiB0aG91Z2ggSSBhbSBwdXQgdG8gZGVhdGggaW4gdGhpcyBsYXdsZXNzIGFuZCB1bmp1c3QgbWFubmVyLCBJIGhhdmUgdGhlIGJldHRlciBvZiBteSBtdXJkZXJlcnMuPC9xPiBBbmQgc2F5aW5nIHRoZXNlIHdvcmRzLCBoZSBvZmZlcmVkIGhpcyBuZWNrIHRvIHRoZSBub29zZSB3aXRob3V0IGhlc2l0YXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBbXBoYXJlcyB3ZW50IHRvIHRoZSBkb29yIG9mIHRoZSBwcmlzb24sIHdoZXJlIEFnZXNpc3RyYXRhIGZlbGwgYXQgaGlzIGZlZXQgaW4gYW4gYXBwZWFsIHRvIGhpcyBmcmllbmRzaGlwIGFuZCBpbnRpbWFjeS4gQW1waGFyZXMgbGlmdGVkIGhlciB1cCBhbmQgYXNzdXJlZCBoZXIgdGhhdCBBZ2lzIHdhcyBub3QgdG8gc3VmZmVyIHZpb2xlbmNlIG9yIGRlYXRoOyBhbmQgaGUgYmFkZSBoZXIsIGlmIHNoZSB3aXNoZWQsIGdvIGluIHRvIGhlciBzb24uIEFuZCB3aGVuIEFnZXNpc3RyYXRhIGJlZ2dlZCB0aGF0IGhlciBtb3RoZXIgbWlnaHQgZ28gaW4gd2l0aCBoZXIsIEFtcGhhcmVzIHNhaWQgdGhlcmUgd2FzIG5vdGhpbmcgdG8gcHJldmVudC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28gaGUgYWRtaXR0ZWQgYm90aCB0aGUgd29tZW4sIGFuZCBhZnRlciBvcmRlcmluZyB0aGUgZG9vciBvZiB0aGUgcHJpc29uIHRvIGJlIGxvY2tlZCBhZ2FpbiwgZGVsaXZlcmVkIEFyY2hpZGFtaWEgZmlyc3QgdG8gdGhlIGV4ZWN1dGlvbmVycy4gU2hlIHdhcyBub3cgYSB2ZXJ5IGFnZWQgd29tYW4sIGFuZCBoYWQgbGl2ZWQgYWxsIGhlciBkYXlzIGluIHZlcnkgaGlnaCByZXB1dGUgYW1vbmcgaGVyIGNvdW50cnl3b21lbi4gQWZ0ZXIgc2hlIGhhZCBiZWVuIHB1dCB0byBkZWF0aCwgQW1waGFyZXMgb3JkZXJlZCBBZ2VzaXN0cmF0YSB0byBlbnRlciB0aGUgY2hhbWJlciBvZiBleGVjdXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIHNoZSB3ZW50IGluLCBhbmQgd2hlbiBzaGUgc2F3IGhlciBzb24gbHlpbmcgZGVhZCB1cG9uIHRoZSBncm91bmQsIGFuZCBoZXIgbW90aGVyJ3MgZGVhZCBib2R5IHN0aWxsIGhhbmdpbmcgaW4gdGhlIG5vb3NlLCB3aXRoIGhlciBvd24gaGFuZHMgc2hlIGhlbHBlZCB0aGUgb2ZmaWNlcnMgdG8gdGFrZSBoZXIgZG93biwgbGFpZCBoZXIgYm9keSBvdXQgYnkgdGhlIHNpZGUgb2YgQWdpcywgYW5kIGNvbXBvc2VkIGFuZCBjb3ZlcmVkIGl0LiBUaGVuLCBlbWJyYWNpbmcgaGVyIHNvbiBhbmQga2lzc2luZyBoaXMgZmFjZSwgc2hlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgc29uLCBpdCB3YXMgdGh5IHRvbyBncmVhdCByZWdhcmQgZm9yIG90aGVycywgYW5kIHRoeSBnZW50bGVuZXNzIGFuZCBodW1hbml0eSwgd2hpY2ggaGFzIGJyb3VnaHQgdGhlZSB0byBydWluLCBhbmQgdXMgYXMgd2VsbC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBBbXBoYXJlcywgd2hvIHN0b29kIGF0IHRoZSBkb29yIGFuZCBzYXcgYW5kIGhlYXJkIHdoYXQgc2hlIGRpZCBhbmQgc2FpZCwgY2FtZSBpbiBhbmQgc2FpZCBhbmdyaWx5IHRvIGhlcjogIklmLCB0aGVuLCB0aG91IGhhc3QgYmVlbiBvZiB0aGUgc2FtZSBtaW5kIGFzIHRoeSBzb24sIHRob3Ugc2hhbHQgYWxzbyBzdWZmZXIgdGhlIHNhbWUgZmF0ZS4iIEFuZCBBZ2VzaXN0cmF0YSwgYXMgc2hlIHJvc2UgdG8gcHJlc2VudCBoZXIgbmVjayB0byB0aGUgbm9vc2UsIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgb25seSBwcmF5ZXIgaXMgdGhhdCB0aGlzIG1heSBicmluZyBnb29kIHRvIFNwYXJ0YS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWdpcywgdGhlbiwgb24gaGlzIHdheSB0byB0aGUgaGFsdGVyLCBzYXcgb25lIG9mIHRoZSBvZmZpY2VycyBzaGVkZGluZyB0ZWFycyBvZiBzeW1wYXRoeSBmb3IgaGltLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgbWFuLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNlYXNlIHdlZXBpbmc7IGZvciBldmVuIHRob3VnaCBJIGFtIHB1dCB0byBkZWF0aCBpbiB0aGlzIGxhd2xlc3MgYW5kIHVuanVzdCBtYW5uZXIsIEkgaGF2ZSB0aGUgYmV0dGVyIG9mIG15IG11cmRlcmVycy48L3E+IEFuZCBzYXlpbmcgdGhlc2Ugd29yZHMsIGhlIG9mZmVyZWQgaGlzIG5lY2sgdG8gdGhlIG5vb3NlIHdpdGhvdXQgaGVzaXRhdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBbXBoYXJlcyB3ZW50IHRvIHRoZSBkb29yIG9mIHRoZSBwcmlzb24sIHdoZXJlIEFnZXNpc3RyYXRhIGZlbGwgYXQgaGlzIGZlZXQgaW4gYW4gYXBwZWFsIHRvIGhpcyBmcmllbmRzaGlwIGFuZCBpbnRpbWFjeS4gQW1waGFyZXMgbGlmdGVkIGhlciB1cCBhbmQgYXNzdXJlZCBoZXIgdGhhdCBBZ2lzIHdhcyBub3QgdG8gc3VmZmVyIHZpb2xlbmNlIG9yIGRlYXRoOyBhbmQgaGUgYmFkZSBoZXIsIGlmIHNoZSB3aXNoZWQsIGdvIGluIHRvIGhlciBzb24uIEFuZCB3aGVuIEFnZXNpc3RyYXRhIGJlZ2dlZCB0aGF0IGhlciBtb3RoZXIgbWlnaHQgZ28gaW4gd2l0aCBoZXIsIEFtcGhhcmVzIHNhaWQgdGhlcmUgd2FzIG5vdGhpbmcgdG8gcHJldmVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIGFkbWl0dGVkIGJvdGggdGhlIHdvbWVuLCBhbmQgYWZ0ZXIgb3JkZXJpbmcgdGhlIGRvb3Igb2YgdGhlIHByaXNvbiB0byBiZSBsb2NrZWQgYWdhaW4sIGRlbGl2ZXJlZCBBcmNoaWRhbWlhIGZpcnN0IHRvIHRoZSBleGVjdXRpb25lcnMuIFNoZSB3YXMgbm93IGEgdmVyeSBhZ2VkIHdvbWFuLCBhbmQgaGFkIGxpdmVkIGFsbCBoZXIgZGF5cyBpbiB2ZXJ5IGhpZ2ggcmVwdXRlIGFtb25nIGhlciBjb3VudHJ5d29tZW4uIEFmdGVyIHNoZSBoYWQgYmVlbiBwdXQgdG8gZGVhdGgsIEFtcGhhcmVzIG9yZGVyZWQgQWdlc2lzdHJhdGEgdG8gZW50ZXIgdGhlIGNoYW1iZXIgb2YgZXhlY3V0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIHNoZSB3ZW50IGluLCBhbmQgd2hlbiBzaGUgc2F3IGhlciBzb24gbHlpbmcgZGVhZCB1cG9uIHRoZSBncm91bmQsIGFuZCBoZXIgbW90aGVyJ3MgZGVhZCBib2R5IHN0aWxsIGhhbmdpbmcgaW4gdGhlIG5vb3NlLCB3aXRoIGhlciBvd24gaGFuZHMgc2hlIGhlbHBlZCB0aGUgb2ZmaWNlcnMgdG8gdGFrZSBoZXIgZG93biwgbGFpZCBoZXIgYm9keSBvdXQgYnkgdGhlIHNpZGUgb2YgQWdpcywgYW5kIGNvbXBvc2VkIGFuZCBjb3ZlcmVkIGl0LiBUaGVuLCBlbWJyYWNpbmcgaGVyIHNvbiBhbmQga2lzc2luZyBoaXMgZmFjZSwgc2hlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBzb24sIGl0IHdhcyB0aHkgdG9vIGdyZWF0IHJlZ2FyZCBmb3Igb3RoZXJzLCBhbmQgdGh5IGdlbnRsZW5lc3MgYW5kIGh1bWFuaXR5LCB3aGljaCBoYXMgYnJvdWdodCB0aGVlIHRvIHJ1aW4sIGFuZCB1cyBhcyB3ZWxsLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gQW1waGFyZXMsIHdobyBzdG9vZCBhdCB0aGUgZG9vciBhbmQgc2F3IGFuZCBoZWFyZCB3aGF0IHNoZSBkaWQgYW5kIHNhaWQsIGNhbWUgaW4gYW5kIHNhaWQgYW5ncmlseSB0byBoZXI6ICJJZiwgdGhlbiwgdGhvdSBoYXN0IGJlZW4gb2YgdGhlIHNhbWUgbWluZCBhcyB0aHkgc29uLCB0aG91IHNoYWx0IGFsc28gc3VmZmVyIHRoZSBzYW1lIGZhdGUuIiBBbmQgQWdlc2lzdHJhdGEsIGFzIHNoZSByb3NlIHRvIHByZXNlbnQgaGVyIG5lY2sgdG8gdGhlIG5vb3NlLCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgb25seSBwcmF5ZXIgaXMgdGhhdCB0aGlzIG1heSBicmluZyBnb29kIHRvIFNwYXJ0YS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGlkaW5ncyBvZiB0aGUgc2FkIGV2ZW50IGhhZCBiZWVuIGNhcnJpZWQgdG8gdGhlIGNpdHkgYW5kIHRoZSB0aHJlZSBib2RpZXMgd2VyZSBjYXJyaWVkIGZvcnRoIGZvciBidXJpYWwsIHRoZSBmZWFyIGZlbHQgYnkgdGhlIGNpdGl6ZW5zIHdhcyBub3Qgc28gc3Ryb25nIGFzIHRvIHByZXZlbnQgdGhlbSBmcm9tIG1hbmlmZXN0aW5nIHNvcnJvdyBvdmVyIHdoYXQgaGFkIGJlZW4gZG9uZSwgYW5kIGhhdHJlZCBmb3IgTGVvbmlkYXMgYW5kIEFtcGhhcmVzLiBJdCB3YXMgdGhvdWdodCB0aGF0IG5vdGhpbmcgbW9yZSBkcmVhZGZ1bCBvciBoZWlub3VzIGhhZCBiZWVuIGRvbmUgaW4gU3BhcnRhIHNpbmNlIHRoZSBEb3JpYW5zIGhhZCBkd2VsdCBpbiBQZWxvcG9ubmVzdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZ2FpbnN0IGEga2luZyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIGFzIGl0IHNlZW1zLCBub3QgZXZlbiB0aGVpciBlbmVtaWVzIHdvdWxkIHdpbGxpbmdseSByYWlzZSB0aGVpciBoYW5kcyBpZiB0aGV5IG1ldCBoaW0gaW4gYmF0dGxlLCBidXQgdGhleSB3b3VsZCBzcGFyZSBoaW0sIG91dCBvZiBmZWFyIGFuZCByZXZlcmVuY2UgZm9yIGhpcyBkaWduaXR5LiBBbmQgZm9yIHRoaXMgcmVhc29uLCBhbHRob3VnaCB0aGVyZSBoYWQgYmVlbiBtYW55IGNvbmZsaWN0cyBiZXR3ZWVuIExhY2VkYWVtb25pYW5zIGFuZCBvdGhlciBHcmVla3MsIG9ubHkgb25lIFNwYXJ0YW4ga2luZyBoYWQgYmVlbiBzbGFpbiB1cCB0byB0aGUgdGltZSBvZiBQaGlsaXAgb2YgTWFjZWRvbiwgbmFtZWx5LCBDbGVvbWJyb3R1cywgd2hvIHdhcyBzbWl0dGVuIGJ5IGEgc3BlYXIgYXQgTGV1Y3RyYS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDIzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UGVsb3BpZGFzPC90aXRsZT4sICB4eGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlIE1lc3NlbmlhbnMsIGhvd2V2ZXIsIHNheSB0aGF0IFRoZW9wb21wdXMgYWxzbyBmZWxsIGluIGJhdHRsZSwgYXQgdGhlIGhhbmRzIG9mIEFyaXN0b21lbmVzOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5idXQgdGhlIExhY2VkYWVtb25pYW5zIGRlbnkgdGhpcywgYW5kIHNheSB0aGF0IHRoZWlyIGtpbmcgd2FzIG9ubHkgd291bmRlZC4gVGhpcyBtYXR0ZXIgbWF5IGJlIGRpc3B1dGVkOiBidXQgQWdpcyB3YXMgY2VydGFpbmx5IHRoZSBmaXJzdCBraW5nIG9mIFNwYXJ0YSB0byBiZSBwdXQgdG8gZGVhdGggYnkgdGhlIGVwaG9ycy4gQW5kIHlldCBoZSBoYWQgY2hvc2VuIGEgbGluZSBvZiBjb25kdWN0IHRoYXQgd2FzIG5vYmxlIGFuZCB3b3J0aHkgb2YgU3BhcnRhLCBhbmQgd2FzIG9mIGFuIGFnZSBpbiB3aGljaCBtZW4gYXJlIHVzdWFsbHkgcGFyZG9uZWQgZm9yIHRoZWlyIGVycm9ycywgYW5kIGhpcyBmcmllbmRzIGNvdWxkIHdpdGggbW9yZSBqdXN0aWNlIGJsYW1lIGhpbSB0aGFuIGhpcyBlbmVtaWVzLCBiZWNhdXNlIGhlIHNwYXJlZCB0aGUgbGlmZSBvZiBMZW9uaWRhcywgYW5kLCBtb3N0IG1pbGQgYW5kIGdlbnRsZSBtYW4gdGhhdCBoZSB3YXMsIHB1dCBmYWl0aCBpbiBoaXMgb3RoZXIgZm9lcy4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aWRpbmdzIG9mIHRoZSBzYWQgZXZlbnQgaGFkIGJlZW4gY2FycmllZCB0byB0aGUgY2l0eSBhbmQgdGhlIHRocmVlIGJvZGllcyB3ZXJlIGNhcnJpZWQgZm9ydGggZm9yIGJ1cmlhbCwgdGhlIGZlYXIgZmVsdCBieSB0aGUgY2l0aXplbnMgd2FzIG5vdCBzbyBzdHJvbmcgYXMgdG8gcHJldmVudCB0aGVtIGZyb20gbWFuaWZlc3Rpbmcgc29ycm93IG92ZXIgd2hhdCBoYWQgYmVlbiBkb25lLCBhbmQgaGF0cmVkIGZvciBMZW9uaWRhcyBhbmQgQW1waGFyZXMuIEl0IHdhcyB0aG91Z2h0IHRoYXQgbm90aGluZyBtb3JlIGRyZWFkZnVsIG9yIGhlaW5vdXMgaGFkIGJlZW4gZG9uZSBpbiBTcGFydGEgc2luY2UgdGhlIERvcmlhbnMgaGFkIGR3ZWx0IGluIFBlbG9wb25uZXN1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZ2FpbnN0IGEga2luZyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIGFzIGl0IHNlZW1zLCBub3QgZXZlbiB0aGVpciBlbmVtaWVzIHdvdWxkIHdpbGxpbmdseSByYWlzZSB0aGVpciBoYW5kcyBpZiB0aGV5IG1ldCBoaW0gaW4gYmF0dGxlLCBidXQgdGhleSB3b3VsZCBzcGFyZSBoaW0sIG91dCBvZiBmZWFyIGFuZCByZXZlcmVuY2UgZm9yIGhpcyBkaWduaXR5LiBBbmQgZm9yIHRoaXMgcmVhc29uLCBhbHRob3VnaCB0aGVyZSBoYWQgYmVlbiBtYW55IGNvbmZsaWN0cyBiZXR3ZWVuIExhY2VkYWVtb25pYW5zIGFuZCBvdGhlciBHcmVla3MsIG9ubHkgb25lIFNwYXJ0YW4ga2luZyBoYWQgYmVlbiBzbGFpbiB1cCB0byB0aGUgdGltZSBvZiBQaGlsaXAgb2YgTWFjZWRvbiwgbmFtZWx5LCBDbGVvbWJyb3R1cywgd2hvIHdhcyBzbWl0dGVuIGJ5IGEgc3BlYXIgYXQgTGV1Y3RyYS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAyMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzPC90aXRsZT4sICB4eGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlIE1lc3NlbmlhbnMsIGhvd2V2ZXIsIHNheSB0aGF0IFRoZW9wb21wdXMgYWxzbyBmZWxsIGluIGJhdHRsZSwgYXQgdGhlIGhhbmRzIG9mIEFyaXN0b21lbmVzOyAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMjMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBlbG9waWRhczwvdGl0bGU+LCAgeHhpaWkuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QZWxvcGlkYXM8L3RpdGxlPiwgIHh4aWlpLjwvdHJhbnNsYXRpb24+"
