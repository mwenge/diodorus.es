var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    translatedSection.style.backgroundColor = "";
  }
  translatedSection = document.getElementById(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  translatedSection.style.backgroundColor = "yellow";
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  translatedSection.style.backgroundColor = "";
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = "PHRyYW5zbGF0aW9uPjx0ZXh0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgIDxib2R5IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q09NUEFSSVNPTiBPRiBTRVJUT1JsVVMgQU5EIEVVTUVORVM8L2hlYWQ+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TVUNIIGFyZSB0aGUgbWVtb3JhYmxlIHRoaW5ncyBpbiB0aGUgY2FyZWVycyBvZiBFdW1lbmVzIGFuZCBTZXJ0b3JpdXMgd2hpY2ggaGF2ZSBjb21lIGRvd24gdG8gdXMuIEFuZCBub3csIGFzIHdlIGNvbXBhcmUgdGhlIG1lbiwgd2UgZmluZCB0aGlzIGNvbW1vbiB0byBib3RoLCB0aGF0IGFsdGhvdWdoIHRoZXkgd2VyZSBzdHJhbmdlcnMsIGFsaWVucywgYW5kIGV4aWxlcywgdGhleSB3ZXJlIGNvbnRpbnVhbGx5IGluIGNvbW1hbmQgb2YgYWxsIHNvcnRzIG9mIHBlb3BsZXMgYW5kIG9mIGFybWllcyB0aGF0IHdlcmUgbGFyZ2UgYW5kIHdhcmxpa2U7IGJ1dCBpdCB3YXMgcGVjdWxpYXIgdG8gU2VydG9yaXVzIHRoYXQgaGUgaGVsZCBhIGNvbW1hbmQgd2hpY2ggd2FzIGdpdmVuIGhpbSBieSBhbGwgaGlzIGNvbmZlZGVyYXRlcyBiZWNhdXNlIG9mIGhpcyByZXB1dGF0aW9uLCBhbmQgdG8gRXVtZW5lcyB0aGF0IG1hbnkgY29udGVuZGVkIHdpdGggaGltIGZvciB0aGUgbGVhZGVyc2hpcCwgYW5kIHlldCBoZSB0b29rIHRoZSBoaWdoZXN0IHBsYWNlIGluIGNvbnNlcXVlbmNlIG9mIGhpcyBhY2hpZXZlbWVudHMuIEZ1cnRoZXJtb3JlLCB0aGUgb25lIHdhcyBmb2xsb3dlZCBieSB0aG9zZSB3aG8gd2lzaGVkIHRvIGJlIHVuZGVyIGEganVzdCBjb21tYW5kOyB3aGlsZSB0aGUgb3RoZXIgd2FzIG9iZXllZCBieSB0aG9zZSB3aG8gd2VyZSBpbmNhcGFibGUgb2YgY29tbWFuZCBhbmQgc291Z2h0IHRoZWlyIG93biBhZHZhbnRhZ2UuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBvbmUsIGEgUm9tYW4sIGNvbW1hbmRlZCBJYmVyaWFucyBhbmQgTHVzaXRhbmlhbnMsIHdobyBoYWQgbG9uZyBiZWVuIGluIHN1YmplY3Rpb24gdG8gUm9tZTsgdGhlIG90aGVyLCBhIENoZXJzb25lc2lhbiwgY29tbWFuZGVkIE1hY2Vkb25pYW5zLCB3aG8gYXQgdGhhdCB0aW1lIHdlcmUgaG9sZGluZyB0aGUgd2hvbGUgd29ybGQgaW4gc3ViamVjdGlvbi4gQmVzaWRlcywgU2VydG9yaXVzIHJvc2UgdG8gbGVhZGVyc2hpcCB3aGVuIGEgY2FyZWVyIGluIHNlbmF0ZSBhbmQgZmllbGQgaGFkIGJyb3VnaHQgaGltIGFkbWlyYXRpb247IGJ1dCBFdW1lbmVzIHdoZW4gaGlzIHBvc3QgYXMgc2VjcmV0YXJ5IGhhZCBicm91Z2h0IGhpbSBjb250ZW1wdC4gRXVtZW5lcywgdGhlcmVmb3JlLCBub3Qgb25seSBoYWQgZmV3ZXIgYWR2YW50YWdlcyBhdCB0aGUgb3V0c2V0LCBidXQgYWxzbyBncmVhdGVyIGhpbmRyYW5jZXMgYXMgaGUgYWR2YW5jZWQgaW4gaGlzIGNhcmVlci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXJlIHdlcmUgbWFueSB3aG8gZGlyZWN0bHkgb3Bwb3NlZCBoaW0gYW5kIHNlY3JldGx5IHBsb3R0ZWQgYWdhaW5zdCBoaW07IHdoZXJlYXMgU2VydG9yaXVzIHdhcyBvcGVubHkgb3Bwb3NlZCBieSBubyBvbmUsIGFuZCBzZWNyZXRseSBvbmx5IGluIHRoZSBsYXR0ZXIgcGFydCBvZiBoaXMgY2FyZWVyLCB3aGVuIGEgZmV3IG9mIGhpcyBjb25mZWRlcmF0ZXMgcm9zZSB1cCBhZ2FpbnN0IGhpbS4gRm9yIHRoaXMgcmVhc29uIFNlcnRvcml1cyBjb3VsZCBwdXQgYW4gZW5kIHRvIGhpcyBwZXJpbCBieSBhIHZpY3Rvcnkgb3ZlciBoaXMgZW5lbWllczsgd2hpbGUgRXVtZW5lcywgaW4gY29uc2VxdWVuY2Ugb2YgaGlzIHZpY3Rvcmllcywgd2FzIGluIHBlcmlsIGF0IHRoZSBoYW5kcyBvZiB0aG9zZSB3aG8gZW52aWVkIGhpbS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlaXIgY2FwYWNpdGllcyBhcyBjb21tYW5kZXJzLCB0aGVuLCB0aGV5IHdlcmUgdmVyeSBtdWNoIGFsaWtlOyBidXQgaW4gdGhlaXIgZ2VuZXJhbCBkaXNwb3NpdGlvbnMgRXVtZW5lcyB3YXMgZm9uZCBvZiB3YXIgYW5kIGZvbmQgb2Ygc3RyaWZlLCB3aGlsZSBTZXJ0b3JpdXMgd2FzIGEgbG92ZXIgb2YgcGVhY2UgYW5kIHRyYW5xdWlsbGl0eS4gRm9yIHRoZSBvbmUsIHRob3VnaCBpdCB3YXMgaW4gaGlzIHBvd2VyIHRvIGxpdmUgaW4gc2FmZXR5IGFuZCB3aXRoIGhvbm91ciBpZiBoZSBrZXB0IG91dCBvZiB0aGUgd2F5IG9mIHRoZSBsZWFkaW5nIE1hY2Vkb25pYW5zLCB3YXMgY29udGludWFsbHkgZmlnaHRpbmcgdGhlbSBhdCB0aGUgcmlzayBvZiBoaXMgbGlmZTsgd2hlcmVhcyB0aGUgb3RoZXIsIHRob3VnaCBoZSBjcmF2ZWQgbm8gcGFydGljaXBhdGlvbiBpbiBhZmZhaXJzLCBoYWQgdG8gd2FnZSB3YXIgZm9yIGhpcyB2ZXJ5IGxpZmUgYWdhaW5zdCB0aG9zZSB3aG8gd291bGQgbm90IHN1ZmZlciBoaW0gdG8gYmUgYXQgcGVhY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiBFdW1lbmVzIGhhZCBzdG9vZCBhc2lkZSBmcm9tIHRoZSBzdHJ1Z2dsZXMgZm9yIHRoZSBwcmltYWN5IGFuZCBiZWVuIHNhdGlzZmllZCB3aXRoIHRoZSBzZWNvbmQgcGxhY2UsIEFudGlnb251cyB3b3VsZCBnbGFkbHkgaGF2ZSBnaXZlbiBoaW0gdGhhdDsgd2hlcmVhcyBTZXJ0b3JpdXMgY291bGQgbm90IGdldCBwZXJtaXNzaW9uIGZyb20gUG9tcGV5IHRvIGxpdmUsIGV2ZW4gdGhvdWdoIGluIHJldGlyZW1lbnQuIFRoZXJlZm9yZSB0aGUgb25lIHdhcyBldmVyIHdhZ2luZyB3YXIgb2YgaGlzIG93biBhY2NvcmQgZm9yIHRoZSBzYWtlIG9mIHBvd2VyOyB3aGlsZSB0aGUgb3RoZXIgaGVsZCBwb3dlciBhZ2FpbnN0IGhpcyB3aXNoZXMgYmVjYXVzZSB3YXIgd2FzIHdhZ2VkIHVwb24gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoYXQgbWFuIGlzIGZvbmQgb2Ygd2FyIHdobyBzZXRzIGdyZWVkIGFib3ZlIHNhZmV0eTsgYnV0IHRoYXQgbWFuIGlzIHdhcmxpa2Ugd2hvIGJ5IHdhciB3aW5zIHNhZmV0eS4KCQkJPC9wPgogICAgICAgICA8cD5BbmQgZnVydGhlciwgdGhlIG9uZSBtZXQgaGlzIGRlYXRoIHdoZW4gaGUgaGFkIG5vIGFudGljaXBhdGlvbiBvZiBpdCwgdGhlIG90aGVyIHdoZW4gaGUgd2FzIGV4cGVjdGluZyB0aGUgZW5kLiBJbiB0aGUgb25lIGNhc2UsIGRlYXRoIHJlc3VsdGVkIGZyb20gdGhlIG1hbidzIGdvb2RuZXNzIG9mIGhlYXJ0LCBzaW5jZSBoZSBhcHBlYXJlZCB0byB0cnVzdCBoaXMgZnJpZW5kczsgaW4gdGhlIG90aGVyLCBmcm9tIHdlYWtuZXNzLCBzaW5jZSBoZSB3aXNoZWQgdG8gZmx5LCBidXQgd2FzIGFycmVzdGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgZGVhdGggYnJvdWdodCBubyBzdGFpbiB1cG9uIHRoZSBsaWZlIG9mIFNlcnRvcml1cywgc2luY2UgaGUgc3VmZmVyZWQgYXQgdGhlIGhhbmRzIG9mIGNvbmZlZGVyYXRlcyB3aGF0IG5vbmUgb2YgaGlzIGVuZW1pZXMgY291bGQgaW5mbGljdCB1cG9uIGhpbTsgRXVtZW5lcywgaG93ZXZlciwgd2hvIHdhcyB1bmFibGUgdG8gZmx5IGJlZm9yZSBiZWluZyB0YWtlbiBwcmlzb25lciwgYnV0IHdhcyB3aWxsaW5nIHRvIGxpdmUgYWZ0ZXIgYmVpbmcgdGFrZW4gcHJpc29uZXIsIG5laXRoZXIgdG9vayBnb29kIHByZWNhdXRpb25zIGFnYWluc3QgZGVhdGgsIG5vciBmYWNlZCBpdCB3ZWxsLCBidXQgYnkgc3VwcGxpY2F0aW5nIGFuZCBlbnRyZWF0aW5nIHRoZSBmb2Ugd2hvIHdhcyBrbm93biB0byBoYXZlIHBvd2VyIG92ZXIgaGlzIGJvZHkgb25seSwgaGUgbWFkZSBoaW0gbG9yZCBhbmQgbWFzdGVyIG9mIGhpcyBzcGlyaXQgYWxzby4KCQkJPC9wPgogICAgICA8L2JvZHk+CiAgIDwvdGV4dD4KPGJvZHkgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgPGhlYWQgY2xhc3M9InRyYW5zbGF0aW9uIj5DT01QQVJJU09OIE9GIFNFUlRPUmxVUyBBTkQgRVVNRU5FUzwvaGVhZD4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNVQ0ggYXJlIHRoZSBtZW1vcmFibGUgdGhpbmdzIGluIHRoZSBjYXJlZXJzIG9mIEV1bWVuZXMgYW5kIFNlcnRvcml1cyB3aGljaCBoYXZlIGNvbWUgZG93biB0byB1cy4gQW5kIG5vdywgYXMgd2UgY29tcGFyZSB0aGUgbWVuLCB3ZSBmaW5kIHRoaXMgY29tbW9uIHRvIGJvdGgsIHRoYXQgYWx0aG91Z2ggdGhleSB3ZXJlIHN0cmFuZ2VycywgYWxpZW5zLCBhbmQgZXhpbGVzLCB0aGV5IHdlcmUgY29udGludWFsbHkgaW4gY29tbWFuZCBvZiBhbGwgc29ydHMgb2YgcGVvcGxlcyBhbmQgb2YgYXJtaWVzIHRoYXQgd2VyZSBsYXJnZSBhbmQgd2FybGlrZTsgYnV0IGl0IHdhcyBwZWN1bGlhciB0byBTZXJ0b3JpdXMgdGhhdCBoZSBoZWxkIGEgY29tbWFuZCB3aGljaCB3YXMgZ2l2ZW4gaGltIGJ5IGFsbCBoaXMgY29uZmVkZXJhdGVzIGJlY2F1c2Ugb2YgaGlzIHJlcHV0YXRpb24sIGFuZCB0byBFdW1lbmVzIHRoYXQgbWFueSBjb250ZW5kZWQgd2l0aCBoaW0gZm9yIHRoZSBsZWFkZXJzaGlwLCBhbmQgeWV0IGhlIHRvb2sgdGhlIGhpZ2hlc3QgcGxhY2UgaW4gY29uc2VxdWVuY2Ugb2YgaGlzIGFjaGlldmVtZW50cy4gRnVydGhlcm1vcmUsIHRoZSBvbmUgd2FzIGZvbGxvd2VkIGJ5IHRob3NlIHdobyB3aXNoZWQgdG8gYmUgdW5kZXIgYSBqdXN0IGNvbW1hbmQ7IHdoaWxlIHRoZSBvdGhlciB3YXMgb2JleWVkIGJ5IHRob3NlIHdobyB3ZXJlIGluY2FwYWJsZSBvZiBjb21tYW5kIGFuZCBzb3VnaHQgdGhlaXIgb3duIGFkdmFudGFnZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIG9uZSwgYSBSb21hbiwgY29tbWFuZGVkIEliZXJpYW5zIGFuZCBMdXNpdGFuaWFucywgd2hvIGhhZCBsb25nIGJlZW4gaW4gc3ViamVjdGlvbiB0byBSb21lOyB0aGUgb3RoZXIsIGEgQ2hlcnNvbmVzaWFuLCBjb21tYW5kZWQgTWFjZWRvbmlhbnMsIHdobyBhdCB0aGF0IHRpbWUgd2VyZSBob2xkaW5nIHRoZSB3aG9sZSB3b3JsZCBpbiBzdWJqZWN0aW9uLiBCZXNpZGVzLCBTZXJ0b3JpdXMgcm9zZSB0byBsZWFkZXJzaGlwIHdoZW4gYSBjYXJlZXIgaW4gc2VuYXRlIGFuZCBmaWVsZCBoYWQgYnJvdWdodCBoaW0gYWRtaXJhdGlvbjsgYnV0IEV1bWVuZXMgd2hlbiBoaXMgcG9zdCBhcyBzZWNyZXRhcnkgaGFkIGJyb3VnaHQgaGltIGNvbnRlbXB0LiBFdW1lbmVzLCB0aGVyZWZvcmUsIG5vdCBvbmx5IGhhZCBmZXdlciBhZHZhbnRhZ2VzIGF0IHRoZSBvdXRzZXQsIGJ1dCBhbHNvIGdyZWF0ZXIgaGluZHJhbmNlcyBhcyBoZSBhZHZhbmNlZCBpbiBoaXMgY2FyZWVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlcmUgd2VyZSBtYW55IHdobyBkaXJlY3RseSBvcHBvc2VkIGhpbSBhbmQgc2VjcmV0bHkgcGxvdHRlZCBhZ2FpbnN0IGhpbTsgd2hlcmVhcyBTZXJ0b3JpdXMgd2FzIG9wZW5seSBvcHBvc2VkIGJ5IG5vIG9uZSwgYW5kIHNlY3JldGx5IG9ubHkgaW4gdGhlIGxhdHRlciBwYXJ0IG9mIGhpcyBjYXJlZXIsIHdoZW4gYSBmZXcgb2YgaGlzIGNvbmZlZGVyYXRlcyByb3NlIHVwIGFnYWluc3QgaGltLiBGb3IgdGhpcyByZWFzb24gU2VydG9yaXVzIGNvdWxkIHB1dCBhbiBlbmQgdG8gaGlzIHBlcmlsIGJ5IGEgdmljdG9yeSBvdmVyIGhpcyBlbmVtaWVzOyB3aGlsZSBFdW1lbmVzLCBpbiBjb25zZXF1ZW5jZSBvZiBoaXMgdmljdG9yaWVzLCB3YXMgaW4gcGVyaWwgYXQgdGhlIGhhbmRzIG9mIHRob3NlIHdobyBlbnZpZWQgaGltLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGVpciBjYXBhY2l0aWVzIGFzIGNvbW1hbmRlcnMsIHRoZW4sIHRoZXkgd2VyZSB2ZXJ5IG11Y2ggYWxpa2U7IGJ1dCBpbiB0aGVpciBnZW5lcmFsIGRpc3Bvc2l0aW9ucyBFdW1lbmVzIHdhcyBmb25kIG9mIHdhciBhbmQgZm9uZCBvZiBzdHJpZmUsIHdoaWxlIFNlcnRvcml1cyB3YXMgYSBsb3ZlciBvZiBwZWFjZSBhbmQgdHJhbnF1aWxsaXR5LiBGb3IgdGhlIG9uZSwgdGhvdWdoIGl0IHdhcyBpbiBoaXMgcG93ZXIgdG8gbGl2ZSBpbiBzYWZldHkgYW5kIHdpdGggaG9ub3VyIGlmIGhlIGtlcHQgb3V0IG9mIHRoZSB3YXkgb2YgdGhlIGxlYWRpbmcgTWFjZWRvbmlhbnMsIHdhcyBjb250aW51YWxseSBmaWdodGluZyB0aGVtIGF0IHRoZSByaXNrIG9mIGhpcyBsaWZlOyB3aGVyZWFzIHRoZSBvdGhlciwgdGhvdWdoIGhlIGNyYXZlZCBubyBwYXJ0aWNpcGF0aW9uIGluIGFmZmFpcnMsIGhhZCB0byB3YWdlIHdhciBmb3IgaGlzIHZlcnkgbGlmZSBhZ2FpbnN0IHRob3NlIHdobyB3b3VsZCBub3Qgc3VmZmVyIGhpbSB0byBiZSBhdCBwZWFjZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmIEV1bWVuZXMgaGFkIHN0b29kIGFzaWRlIGZyb20gdGhlIHN0cnVnZ2xlcyBmb3IgdGhlIHByaW1hY3kgYW5kIGJlZW4gc2F0aXNmaWVkIHdpdGggdGhlIHNlY29uZCBwbGFjZSwgQW50aWdvbnVzIHdvdWxkIGdsYWRseSBoYXZlIGdpdmVuIGhpbSB0aGF0OyB3aGVyZWFzIFNlcnRvcml1cyBjb3VsZCBub3QgZ2V0IHBlcm1pc3Npb24gZnJvbSBQb21wZXkgdG8gbGl2ZSwgZXZlbiB0aG91Z2ggaW4gcmV0aXJlbWVudC4gVGhlcmVmb3JlIHRoZSBvbmUgd2FzIGV2ZXIgd2FnaW5nIHdhciBvZiBoaXMgb3duIGFjY29yZCBmb3IgdGhlIHNha2Ugb2YgcG93ZXI7IHdoaWxlIHRoZSBvdGhlciBoZWxkIHBvd2VyIGFnYWluc3QgaGlzIHdpc2hlcyBiZWNhdXNlIHdhciB3YXMgd2FnZWQgdXBvbiBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhhdCBtYW4gaXMgZm9uZCBvZiB3YXIgd2hvIHNldHMgZ3JlZWQgYWJvdmUgc2FmZXR5OyBidXQgdGhhdCBtYW4gaXMgd2FybGlrZSB3aG8gYnkgd2FyIHdpbnMgc2FmZXR5LgoJCQk8L3A+CiAgICAgICAgIDxwPkFuZCBmdXJ0aGVyLCB0aGUgb25lIG1ldCBoaXMgZGVhdGggd2hlbiBoZSBoYWQgbm8gYW50aWNpcGF0aW9uIG9mIGl0LCB0aGUgb3RoZXIgd2hlbiBoZSB3YXMgZXhwZWN0aW5nIHRoZSBlbmQuIEluIHRoZSBvbmUgY2FzZSwgZGVhdGggcmVzdWx0ZWQgZnJvbSB0aGUgbWFuJ3MgZ29vZG5lc3Mgb2YgaGVhcnQsIHNpbmNlIGhlIGFwcGVhcmVkIHRvIHRydXN0IGhpcyBmcmllbmRzOyBpbiB0aGUgb3RoZXIsIGZyb20gd2Vha25lc3MsIHNpbmNlIGhlIHdpc2hlZCB0byBmbHksIGJ1dCB3YXMgYXJyZXN0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBkZWF0aCBicm91Z2h0IG5vIHN0YWluIHVwb24gdGhlIGxpZmUgb2YgU2VydG9yaXVzLCBzaW5jZSBoZSBzdWZmZXJlZCBhdCB0aGUgaGFuZHMgb2YgY29uZmVkZXJhdGVzIHdoYXQgbm9uZSBvZiBoaXMgZW5lbWllcyBjb3VsZCBpbmZsaWN0IHVwb24gaGltOyBFdW1lbmVzLCBob3dldmVyLCB3aG8gd2FzIHVuYWJsZSB0byBmbHkgYmVmb3JlIGJlaW5nIHRha2VuIHByaXNvbmVyLCBidXQgd2FzIHdpbGxpbmcgdG8gbGl2ZSBhZnRlciBiZWluZyB0YWtlbiBwcmlzb25lciwgbmVpdGhlciB0b29rIGdvb2QgcHJlY2F1dGlvbnMgYWdhaW5zdCBkZWF0aCwgbm9yIGZhY2VkIGl0IHdlbGwsIGJ1dCBieSBzdXBwbGljYXRpbmcgYW5kIGVudHJlYXRpbmcgdGhlIGZvZSB3aG8gd2FzIGtub3duIHRvIGhhdmUgcG93ZXIgb3ZlciBoaXMgYm9keSBvbmx5LCBoZSBtYWRlIGhpbSBsb3JkIGFuZCBtYXN0ZXIgb2YgaGlzIHNwaXJpdCBhbHNvLgoJCQk8L3A+CiAgICAgIDwvYm9keT4KICAgPGhlYWQgY2xhc3M9InRyYW5zbGF0aW9uIj5DT01QQVJJU09OIE9GIFNFUlRPUmxVUyBBTkQgRVVNRU5FUzwvaGVhZD4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNVQ0ggYXJlIHRoZSBtZW1vcmFibGUgdGhpbmdzIGluIHRoZSBjYXJlZXJzIG9mIEV1bWVuZXMgYW5kIFNlcnRvcml1cyB3aGljaCBoYXZlIGNvbWUgZG93biB0byB1cy4gQW5kIG5vdywgYXMgd2UgY29tcGFyZSB0aGUgbWVuLCB3ZSBmaW5kIHRoaXMgY29tbW9uIHRvIGJvdGgsIHRoYXQgYWx0aG91Z2ggdGhleSB3ZXJlIHN0cmFuZ2VycywgYWxpZW5zLCBhbmQgZXhpbGVzLCB0aGV5IHdlcmUgY29udGludWFsbHkgaW4gY29tbWFuZCBvZiBhbGwgc29ydHMgb2YgcGVvcGxlcyBhbmQgb2YgYXJtaWVzIHRoYXQgd2VyZSBsYXJnZSBhbmQgd2FybGlrZTsgYnV0IGl0IHdhcyBwZWN1bGlhciB0byBTZXJ0b3JpdXMgdGhhdCBoZSBoZWxkIGEgY29tbWFuZCB3aGljaCB3YXMgZ2l2ZW4gaGltIGJ5IGFsbCBoaXMgY29uZmVkZXJhdGVzIGJlY2F1c2Ugb2YgaGlzIHJlcHV0YXRpb24sIGFuZCB0byBFdW1lbmVzIHRoYXQgbWFueSBjb250ZW5kZWQgd2l0aCBoaW0gZm9yIHRoZSBsZWFkZXJzaGlwLCBhbmQgeWV0IGhlIHRvb2sgdGhlIGhpZ2hlc3QgcGxhY2UgaW4gY29uc2VxdWVuY2Ugb2YgaGlzIGFjaGlldmVtZW50cy4gRnVydGhlcm1vcmUsIHRoZSBvbmUgd2FzIGZvbGxvd2VkIGJ5IHRob3NlIHdobyB3aXNoZWQgdG8gYmUgdW5kZXIgYSBqdXN0IGNvbW1hbmQ7IHdoaWxlIHRoZSBvdGhlciB3YXMgb2JleWVkIGJ5IHRob3NlIHdobyB3ZXJlIGluY2FwYWJsZSBvZiBjb21tYW5kIGFuZCBzb3VnaHQgdGhlaXIgb3duIGFkdmFudGFnZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIG9uZSwgYSBSb21hbiwgY29tbWFuZGVkIEliZXJpYW5zIGFuZCBMdXNpdGFuaWFucywgd2hvIGhhZCBsb25nIGJlZW4gaW4gc3ViamVjdGlvbiB0byBSb21lOyB0aGUgb3RoZXIsIGEgQ2hlcnNvbmVzaWFuLCBjb21tYW5kZWQgTWFjZWRvbmlhbnMsIHdobyBhdCB0aGF0IHRpbWUgd2VyZSBob2xkaW5nIHRoZSB3aG9sZSB3b3JsZCBpbiBzdWJqZWN0aW9uLiBCZXNpZGVzLCBTZXJ0b3JpdXMgcm9zZSB0byBsZWFkZXJzaGlwIHdoZW4gYSBjYXJlZXIgaW4gc2VuYXRlIGFuZCBmaWVsZCBoYWQgYnJvdWdodCBoaW0gYWRtaXJhdGlvbjsgYnV0IEV1bWVuZXMgd2hlbiBoaXMgcG9zdCBhcyBzZWNyZXRhcnkgaGFkIGJyb3VnaHQgaGltIGNvbnRlbXB0LiBFdW1lbmVzLCB0aGVyZWZvcmUsIG5vdCBvbmx5IGhhZCBmZXdlciBhZHZhbnRhZ2VzIGF0IHRoZSBvdXRzZXQsIGJ1dCBhbHNvIGdyZWF0ZXIgaGluZHJhbmNlcyBhcyBoZSBhZHZhbmNlZCBpbiBoaXMgY2FyZWVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlcmUgd2VyZSBtYW55IHdobyBkaXJlY3RseSBvcHBvc2VkIGhpbSBhbmQgc2VjcmV0bHkgcGxvdHRlZCBhZ2FpbnN0IGhpbTsgd2hlcmVhcyBTZXJ0b3JpdXMgd2FzIG9wZW5seSBvcHBvc2VkIGJ5IG5vIG9uZSwgYW5kIHNlY3JldGx5IG9ubHkgaW4gdGhlIGxhdHRlciBwYXJ0IG9mIGhpcyBjYXJlZXIsIHdoZW4gYSBmZXcgb2YgaGlzIGNvbmZlZGVyYXRlcyByb3NlIHVwIGFnYWluc3QgaGltLiBGb3IgdGhpcyByZWFzb24gU2VydG9yaXVzIGNvdWxkIHB1dCBhbiBlbmQgdG8gaGlzIHBlcmlsIGJ5IGEgdmljdG9yeSBvdmVyIGhpcyBlbmVtaWVzOyB3aGlsZSBFdW1lbmVzLCBpbiBjb25zZXF1ZW5jZSBvZiBoaXMgdmljdG9yaWVzLCB3YXMgaW4gcGVyaWwgYXQgdGhlIGhhbmRzIG9mIHRob3NlIHdobyBlbnZpZWQgaGltLgoJCQk8L3A+CiAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TVUNIIGFyZSB0aGUgbWVtb3JhYmxlIHRoaW5ncyBpbiB0aGUgY2FyZWVycyBvZiBFdW1lbmVzIGFuZCBTZXJ0b3JpdXMgd2hpY2ggaGF2ZSBjb21lIGRvd24gdG8gdXMuIEFuZCBub3csIGFzIHdlIGNvbXBhcmUgdGhlIG1lbiwgd2UgZmluZCB0aGlzIGNvbW1vbiB0byBib3RoLCB0aGF0IGFsdGhvdWdoIHRoZXkgd2VyZSBzdHJhbmdlcnMsIGFsaWVucywgYW5kIGV4aWxlcywgdGhleSB3ZXJlIGNvbnRpbnVhbGx5IGluIGNvbW1hbmQgb2YgYWxsIHNvcnRzIG9mIHBlb3BsZXMgYW5kIG9mIGFybWllcyB0aGF0IHdlcmUgbGFyZ2UgYW5kIHdhcmxpa2U7IGJ1dCBpdCB3YXMgcGVjdWxpYXIgdG8gU2VydG9yaXVzIHRoYXQgaGUgaGVsZCBhIGNvbW1hbmQgd2hpY2ggd2FzIGdpdmVuIGhpbSBieSBhbGwgaGlzIGNvbmZlZGVyYXRlcyBiZWNhdXNlIG9mIGhpcyByZXB1dGF0aW9uLCBhbmQgdG8gRXVtZW5lcyB0aGF0IG1hbnkgY29udGVuZGVkIHdpdGggaGltIGZvciB0aGUgbGVhZGVyc2hpcCwgYW5kIHlldCBoZSB0b29rIHRoZSBoaWdoZXN0IHBsYWNlIGluIGNvbnNlcXVlbmNlIG9mIGhpcyBhY2hpZXZlbWVudHMuIEZ1cnRoZXJtb3JlLCB0aGUgb25lIHdhcyBmb2xsb3dlZCBieSB0aG9zZSB3aG8gd2lzaGVkIHRvIGJlIHVuZGVyIGEganVzdCBjb21tYW5kOyB3aGlsZSB0aGUgb3RoZXIgd2FzIG9iZXllZCBieSB0aG9zZSB3aG8gd2VyZSBpbmNhcGFibGUgb2YgY29tbWFuZCBhbmQgc291Z2h0IHRoZWlyIG93biBhZHZhbnRhZ2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgb25lLCBhIFJvbWFuLCBjb21tYW5kZWQgSWJlcmlhbnMgYW5kIEx1c2l0YW5pYW5zLCB3aG8gaGFkIGxvbmcgYmVlbiBpbiBzdWJqZWN0aW9uIHRvIFJvbWU7IHRoZSBvdGhlciwgYSBDaGVyc29uZXNpYW4sIGNvbW1hbmRlZCBNYWNlZG9uaWFucywgd2hvIGF0IHRoYXQgdGltZSB3ZXJlIGhvbGRpbmcgdGhlIHdob2xlIHdvcmxkIGluIHN1YmplY3Rpb24uIEJlc2lkZXMsIFNlcnRvcml1cyByb3NlIHRvIGxlYWRlcnNoaXAgd2hlbiBhIGNhcmVlciBpbiBzZW5hdGUgYW5kIGZpZWxkIGhhZCBicm91Z2h0IGhpbSBhZG1pcmF0aW9uOyBidXQgRXVtZW5lcyB3aGVuIGhpcyBwb3N0IGFzIHNlY3JldGFyeSBoYWQgYnJvdWdodCBoaW0gY29udGVtcHQuIEV1bWVuZXMsIHRoZXJlZm9yZSwgbm90IG9ubHkgaGFkIGZld2VyIGFkdmFudGFnZXMgYXQgdGhlIG91dHNldCwgYnV0IGFsc28gZ3JlYXRlciBoaW5kcmFuY2VzIGFzIGhlIGFkdmFuY2VkIGluIGhpcyBjYXJlZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3ZXJlIG1hbnkgd2hvIGRpcmVjdGx5IG9wcG9zZWQgaGltIGFuZCBzZWNyZXRseSBwbG90dGVkIGFnYWluc3QgaGltOyB3aGVyZWFzIFNlcnRvcml1cyB3YXMgb3Blbmx5IG9wcG9zZWQgYnkgbm8gb25lLCBhbmQgc2VjcmV0bHkgb25seSBpbiB0aGUgbGF0dGVyIHBhcnQgb2YgaGlzIGNhcmVlciwgd2hlbiBhIGZldyBvZiBoaXMgY29uZmVkZXJhdGVzIHJvc2UgdXAgYWdhaW5zdCBoaW0uIEZvciB0aGlzIHJlYXNvbiBTZXJ0b3JpdXMgY291bGQgcHV0IGFuIGVuZCB0byBoaXMgcGVyaWwgYnkgYSB2aWN0b3J5IG92ZXIgaGlzIGVuZW1pZXM7IHdoaWxlIEV1bWVuZXMsIGluIGNvbnNlcXVlbmNlIG9mIGhpcyB2aWN0b3JpZXMsIHdhcyBpbiBwZXJpbCBhdCB0aGUgaGFuZHMgb2YgdGhvc2Ugd2hvIGVudmllZCBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlaXIgY2FwYWNpdGllcyBhcyBjb21tYW5kZXJzLCB0aGVuLCB0aGV5IHdlcmUgdmVyeSBtdWNoIGFsaWtlOyBidXQgaW4gdGhlaXIgZ2VuZXJhbCBkaXNwb3NpdGlvbnMgRXVtZW5lcyB3YXMgZm9uZCBvZiB3YXIgYW5kIGZvbmQgb2Ygc3RyaWZlLCB3aGlsZSBTZXJ0b3JpdXMgd2FzIGEgbG92ZXIgb2YgcGVhY2UgYW5kIHRyYW5xdWlsbGl0eS4gRm9yIHRoZSBvbmUsIHRob3VnaCBpdCB3YXMgaW4gaGlzIHBvd2VyIHRvIGxpdmUgaW4gc2FmZXR5IGFuZCB3aXRoIGhvbm91ciBpZiBoZSBrZXB0IG91dCBvZiB0aGUgd2F5IG9mIHRoZSBsZWFkaW5nIE1hY2Vkb25pYW5zLCB3YXMgY29udGludWFsbHkgZmlnaHRpbmcgdGhlbSBhdCB0aGUgcmlzayBvZiBoaXMgbGlmZTsgd2hlcmVhcyB0aGUgb3RoZXIsIHRob3VnaCBoZSBjcmF2ZWQgbm8gcGFydGljaXBhdGlvbiBpbiBhZmZhaXJzLCBoYWQgdG8gd2FnZSB3YXIgZm9yIGhpcyB2ZXJ5IGxpZmUgYWdhaW5zdCB0aG9zZSB3aG8gd291bGQgbm90IHN1ZmZlciBoaW0gdG8gYmUgYXQgcGVhY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiBFdW1lbmVzIGhhZCBzdG9vZCBhc2lkZSBmcm9tIHRoZSBzdHJ1Z2dsZXMgZm9yIHRoZSBwcmltYWN5IGFuZCBiZWVuIHNhdGlzZmllZCB3aXRoIHRoZSBzZWNvbmQgcGxhY2UsIEFudGlnb251cyB3b3VsZCBnbGFkbHkgaGF2ZSBnaXZlbiBoaW0gdGhhdDsgd2hlcmVhcyBTZXJ0b3JpdXMgY291bGQgbm90IGdldCBwZXJtaXNzaW9uIGZyb20gUG9tcGV5IHRvIGxpdmUsIGV2ZW4gdGhvdWdoIGluIHJldGlyZW1lbnQuIFRoZXJlZm9yZSB0aGUgb25lIHdhcyBldmVyIHdhZ2luZyB3YXIgb2YgaGlzIG93biBhY2NvcmQgZm9yIHRoZSBzYWtlIG9mIHBvd2VyOyB3aGlsZSB0aGUgb3RoZXIgaGVsZCBwb3dlciBhZ2FpbnN0IGhpcyB3aXNoZXMgYmVjYXVzZSB3YXIgd2FzIHdhZ2VkIHVwb24gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoYXQgbWFuIGlzIGZvbmQgb2Ygd2FyIHdobyBzZXRzIGdyZWVkIGFib3ZlIHNhZmV0eTsgYnV0IHRoYXQgbWFuIGlzIHdhcmxpa2Ugd2hvIGJ5IHdhciB3aW5zIHNhZmV0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGVpciBjYXBhY2l0aWVzIGFzIGNvbW1hbmRlcnMsIHRoZW4sIHRoZXkgd2VyZSB2ZXJ5IG11Y2ggYWxpa2U7IGJ1dCBpbiB0aGVpciBnZW5lcmFsIGRpc3Bvc2l0aW9ucyBFdW1lbmVzIHdhcyBmb25kIG9mIHdhciBhbmQgZm9uZCBvZiBzdHJpZmUsIHdoaWxlIFNlcnRvcml1cyB3YXMgYSBsb3ZlciBvZiBwZWFjZSBhbmQgdHJhbnF1aWxsaXR5LiBGb3IgdGhlIG9uZSwgdGhvdWdoIGl0IHdhcyBpbiBoaXMgcG93ZXIgdG8gbGl2ZSBpbiBzYWZldHkgYW5kIHdpdGggaG9ub3VyIGlmIGhlIGtlcHQgb3V0IG9mIHRoZSB3YXkgb2YgdGhlIGxlYWRpbmcgTWFjZWRvbmlhbnMsIHdhcyBjb250aW51YWxseSBmaWdodGluZyB0aGVtIGF0IHRoZSByaXNrIG9mIGhpcyBsaWZlOyB3aGVyZWFzIHRoZSBvdGhlciwgdGhvdWdoIGhlIGNyYXZlZCBubyBwYXJ0aWNpcGF0aW9uIGluIGFmZmFpcnMsIGhhZCB0byB3YWdlIHdhciBmb3IgaGlzIHZlcnkgbGlmZSBhZ2FpbnN0IHRob3NlIHdobyB3b3VsZCBub3Qgc3VmZmVyIGhpbSB0byBiZSBhdCBwZWFjZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiBFdW1lbmVzIGhhZCBzdG9vZCBhc2lkZSBmcm9tIHRoZSBzdHJ1Z2dsZXMgZm9yIHRoZSBwcmltYWN5IGFuZCBiZWVuIHNhdGlzZmllZCB3aXRoIHRoZSBzZWNvbmQgcGxhY2UsIEFudGlnb251cyB3b3VsZCBnbGFkbHkgaGF2ZSBnaXZlbiBoaW0gdGhhdDsgd2hlcmVhcyBTZXJ0b3JpdXMgY291bGQgbm90IGdldCBwZXJtaXNzaW9uIGZyb20gUG9tcGV5IHRvIGxpdmUsIGV2ZW4gdGhvdWdoIGluIHJldGlyZW1lbnQuIFRoZXJlZm9yZSB0aGUgb25lIHdhcyBldmVyIHdhZ2luZyB3YXIgb2YgaGlzIG93biBhY2NvcmQgZm9yIHRoZSBzYWtlIG9mIHBvd2VyOyB3aGlsZSB0aGUgb3RoZXIgaGVsZCBwb3dlciBhZ2FpbnN0IGhpcyB3aXNoZXMgYmVjYXVzZSB3YXIgd2FzIHdhZ2VkIHVwb24gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhhdCBtYW4gaXMgZm9uZCBvZiB3YXIgd2hvIHNldHMgZ3JlZWQgYWJvdmUgc2FmZXR5OyBidXQgdGhhdCBtYW4gaXMgd2FybGlrZSB3aG8gYnkgd2FyIHdpbnMgc2FmZXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBmdXJ0aGVyLCB0aGUgb25lIG1ldCBoaXMgZGVhdGggd2hlbiBoZSBoYWQgbm8gYW50aWNpcGF0aW9uIG9mIGl0LCB0aGUgb3RoZXIgd2hlbiBoZSB3YXMgZXhwZWN0aW5nIHRoZSBlbmQuIEluIHRoZSBvbmUgY2FzZSwgZGVhdGggcmVzdWx0ZWQgZnJvbSB0aGUgbWFuJ3MgZ29vZG5lc3Mgb2YgaGVhcnQsIHNpbmNlIGhlIGFwcGVhcmVkIHRvIHRydXN0IGhpcyBmcmllbmRzOyBpbiB0aGUgb3RoZXIsIGZyb20gd2Vha25lc3MsIHNpbmNlIGhlIHdpc2hlZCB0byBmbHksIGJ1dCB3YXMgYXJyZXN0ZWQuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGRlYXRoIGJyb3VnaHQgbm8gc3RhaW4gdXBvbiB0aGUgbGlmZSBvZiBTZXJ0b3JpdXMsIHNpbmNlIGhlIHN1ZmZlcmVkIGF0IHRoZSBoYW5kcyBvZiBjb25mZWRlcmF0ZXMgd2hhdCBub25lIG9mIGhpcyBlbmVtaWVzIGNvdWxkIGluZmxpY3QgdXBvbiBoaW07IEV1bWVuZXMsIGhvd2V2ZXIsIHdobyB3YXMgdW5hYmxlIHRvIGZseSBiZWZvcmUgYmVpbmcgdGFrZW4gcHJpc29uZXIsIGJ1dCB3YXMgd2lsbGluZyB0byBsaXZlIGFmdGVyIGJlaW5nIHRha2VuIHByaXNvbmVyLCBuZWl0aGVyIHRvb2sgZ29vZCBwcmVjYXV0aW9ucyBhZ2FpbnN0IGRlYXRoLCBub3IgZmFjZWQgaXQgd2VsbCwgYnV0IGJ5IHN1cHBsaWNhdGluZyBhbmQgZW50cmVhdGluZyB0aGUgZm9lIHdobyB3YXMga25vd24gdG8gaGF2ZSBwb3dlciBvdmVyIGhpcyBib2R5IG9ubHksIGhlIG1hZGUgaGltIGxvcmQgYW5kIG1hc3RlciBvZiBoaXMgc3Bpcml0IGFsc28uCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
