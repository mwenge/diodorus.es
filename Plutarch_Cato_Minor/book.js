var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  if (Array.isArray(lineNumber)) {
    lineNumber = lineNumber[0];
  }
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSB0b2xkIHRoYXQgZnJvbSBoaXMgdmVyeSBjaGlsZGhvb2QgQ2F0byBkaXNwbGF5ZWQsIGluIHNwZWVjaCwgaW4gY291bnRlbmFuY2UsIGFuZCBpbiBoaXMgY2hpbGRpc2ggc3BvcnRzLCBhIG5hdHVyZSB0aGF0IHdhcyBpbmZsZXhpYmxlLCBpbXBlcnR1cmJhYmxlLCBhbmQgYWx0b2dldGhlciBzdGVhZGZhc3QuIEhlIHNldCBvdXQgdG8gYWNjb21wbGlzaCBoaXMgcHVycG9zZXMgd2l0aCBhIHZpZ291ciBiZXlvbmQgaGlzIHllYXJzLCBhbmQgd2hpbGUgaGUgd2FzIGhhcnNoIGFuZCByZXBlbGxlbnQgdG8gdGhvc2Ugd2hvIHdvdWxkIGZsYXR0ZXIgaGltLCBoZSB3YXMgc3RpbGwgbW9yZSBtYXN0ZXJmdWwgdG93YXJkcyB0aG9zZSB3aG8gdHJpZWQgdG8gZnJpZ2h0ZW4gaGltLiBJdCB3YXMgYWx0b2dldGhlciBkaWZmaWN1bHQgdG8gbWFrZSBoaW0gbGF1Z2gsIGFsdGhvdWdoIG9uY2UgaW4gYSB3aGlsZSBoZSByZWxheGVkIGhpcyBmZWF0dXJlcyBzbyBmYXIgYXMgdG8gc21pbGU7IGFuZCBoZSB3YXMgbm90IHF1aWNrbHkgbm9yIGVhc2lseSBtb3ZlZCB0byBhbmdlciwgdGhvdWdoIG9uY2UgYW5nZXJlZCBoZSB3YXMgaW5leG9yYWJsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgYWNjb3JkaW5nbHksIGhlIGNhbWUgdG8gc3R1ZHksIGhlIHdhcyBzbHVnZ2lzaCBvZiBjb21wcmVoZW5zaW9uIGFuZCBzbG93LCBidXQgd2hhdCBoZSBjb21wcmVoZW5kZWQgaGUgaGVsZCBmYXN0IGluIGhpcyBtZW1vcnkuIEFuZCB0aGlzIGlzIGdlbmVyYWxseSB0aGUgd2F5IG9mIG5hdHVyZTogdGhvc2Ugd2hvIGFyZSB3ZWxsIGVuZG93ZWQgYXJlIG1vcmUgYXB0IHRvIHJlY2FsbCB0aGluZ3MgdG8gbWluZCwgYnV0IHRob3NlIHJldGFpbiB0aGluZ3MgaW4gdGhlaXIgbWVtb3J5IHdobyBhY3F1aXJlIHRoZW0gd2l0aCB0b2lsIGFuZCB0cm91YmxlOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gTWVtLiAxLjEuMi4yNCI+QXJpc3RvdGxlLCA8dGl0bGU+RGUgTWVtLjwvdGl0bGU+IGkuIDEsIDIsIDI0PC9iaWJsPi48L25vdGU+IGZvciBldmVyeXRoaW5nIHRoZXkgbGVhcm4gYmVjb21lcyBicmFuZGVkLCBhcyBpdCB3ZXJlLCB1cG9uIHRoZWlyIG1pbmRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3b3VsZCBhcHBlYXIsIHRvbywgdGhhdCBDYXRvJ3MgcmVsdWN0YW5jZSB0byBiZSBwZXJzdWFkZWQgbWFkZSBoaXMgbGVhcm5pbmcgYW55dGhpbmcgbW9yZSBsYWJvcmlvdXMuIEZvciwgdG8gbGVhcm4gaXMgc2ltcGx5IHRvIGFsbG93IHNvbWV0aGluZyB0byBiZSBkb25lIHRvIHlvdSwgYW5kIHRvIGJlIHF1aWNrbHkgcGVyc3VhZGVkIGlzIG5hdHVyYWwgZm9yIHRob3NlIHdobyBhcmUgbGVzcyBhYmxlIHRvIG9mZmVyIHJlc2lzdGFuY2UuIFRoZXJlZm9yZSB5b3VuZyBtZW4gYXJlIG1vcmUgZWFzaWx5IHBlcnN1YWRlZCB0aGFuIG9sZCBtZW4sIGFuZCBzaWNrIGZvbGssIHRoYW4gdGhvc2Ugd2hvIGFyZSB3ZWxsLCBhbmQsIGluIGEgd29yZCwgd2hlcmUgdGhlIHBvd2VyIHRvIHJhaXNlIG9iamVjdGlvbnMgaXMgd2Vha2VzdCwgdGhlIGFjdCBvZiBzdWJtaXNzaW9uIGlzIGVhc2llc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdlIGFyZSB0b2xkIHRoYXQgQ2F0byB3YXMgb2JlZGllbnQgdG8gaGlzIHR1dG9yLCBhbmQgZGlkIGV2ZXJ5dGhpbmcgdGhhdCB3YXMgZW5qb2luZWQgdXBvbiBoaW0sIGFsdGhvdWdoIGluIGVhY2ggY2FzZSBoZSBkZW1hbmRlZCB0aGUgcmVhc29uIGFuZCB3YW50ZWQgdG8ga25vdyB0aGUgd2h5IGFuZCB3aGVyZWZvcmUuIEFuZCwgaW5kZWVkLCBoaXMgdHV0b3Igd2FzIGEgbWFuIG9mIGN1bHR1cmUsIGFuZCBtb3JlIHJlYWR5IHRvIHJlYXNvbiB3aXRoIGEgcHVwaWwgdGhhbiB0byB0aHJhc2ggaGltLiBIaXMgbmFtZSB3YXMgU2FycGVkb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGFjY29yZGluZ2x5LCBoZSBjYW1lIHRvIHN0dWR5LCBoZSB3YXMgc2x1Z2dpc2ggb2YgY29tcHJlaGVuc2lvbiBhbmQgc2xvdywgYnV0IHdoYXQgaGUgY29tcHJlaGVuZGVkIGhlIGhlbGQgZmFzdCBpbiBoaXMgbWVtb3J5LiBBbmQgdGhpcyBpcyBnZW5lcmFsbHkgdGhlIHdheSBvZiBuYXR1cmU6IHRob3NlIHdobyBhcmUgd2VsbCBlbmRvd2VkIGFyZSBtb3JlIGFwdCB0byByZWNhbGwgdGhpbmdzIHRvIG1pbmQsIGJ1dCB0aG9zZSByZXRhaW4gdGhpbmdzIGluIHRoZWlyIG1lbW9yeSB3aG8gYWNxdWlyZSB0aGVtIHdpdGggdG9pbCBhbmQgdHJvdWJsZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBNZW0uIDEuMS4yLjI0Ij5BcmlzdG90bGUsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIE1lbS48L3RpdGxlPiBpLiAxLCAyLCAyNDwvYmlibD4uPC9ub3RlPiBmb3IgZXZlcnl0aGluZyB0aGV5IGxlYXJuIGJlY29tZXMgYnJhbmRlZCwgYXMgaXQgd2VyZSwgdXBvbiB0aGVpciBtaW5kcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBNZW0uIDEuMS4yLjI0Ij5BcmlzdG90bGUsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIE1lbS48L3RpdGxlPiBpLiAxLCAyLCAyNDwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGUgTWVtLjwvdGl0bGU+IGkuIDEsIDIsIDI0PC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdvdWxkIGFwcGVhciwgdG9vLCB0aGF0IENhdG8ncyByZWx1Y3RhbmNlIHRvIGJlIHBlcnN1YWRlZCBtYWRlIGhpcyBsZWFybmluZyBhbnl0aGluZyBtb3JlIGxhYm9yaW91cy4gRm9yLCB0byBsZWFybiBpcyBzaW1wbHkgdG8gYWxsb3cgc29tZXRoaW5nIHRvIGJlIGRvbmUgdG8geW91LCBhbmQgdG8gYmUgcXVpY2tseSBwZXJzdWFkZWQgaXMgbmF0dXJhbCBmb3IgdGhvc2Ugd2hvIGFyZSBsZXNzIGFibGUgdG8gb2ZmZXIgcmVzaXN0YW5jZS4gVGhlcmVmb3JlIHlvdW5nIG1lbiBhcmUgbW9yZSBlYXNpbHkgcGVyc3VhZGVkIHRoYW4gb2xkIG1lbiwgYW5kIHNpY2sgZm9saywgdGhhbiB0aG9zZSB3aG8gYXJlIHdlbGwsIGFuZCwgaW4gYSB3b3JkLCB3aGVyZSB0aGUgcG93ZXIgdG8gcmFpc2Ugb2JqZWN0aW9ucyBpcyB3ZWFrZXN0LCB0aGUgYWN0IG9mIHN1Ym1pc3Npb24gaXMgZWFzaWVzdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdlIGFyZSB0b2xkIHRoYXQgQ2F0byB3YXMgb2JlZGllbnQgdG8gaGlzIHR1dG9yLCBhbmQgZGlkIGV2ZXJ5dGhpbmcgdGhhdCB3YXMgZW5qb2luZWQgdXBvbiBoaW0sIGFsdGhvdWdoIGluIGVhY2ggY2FzZSBoZSBkZW1hbmRlZCB0aGUgcmVhc29uIGFuZCB3YW50ZWQgdG8ga25vdyB0aGUgd2h5IGFuZCB3aGVyZWZvcmUuIEFuZCwgaW5kZWVkLCBoaXMgdHV0b3Igd2FzIGEgbWFuIG9mIGN1bHR1cmUsIGFuZCBtb3JlIHJlYWR5IHRvIHJlYXNvbiB3aXRoIGEgcHVwaWwgdGhhbiB0byB0aHJhc2ggaGltLiBIaXMgbmFtZSB3YXMgU2FycGVkb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgQ2F0byB3YXMgc3RpbGwgYSBib3ksIHRoZSBJdGFsaWFuIGFsbGllcyBvZiB0aGUgUm9tYW5zIHdlcmUgbWFraW5nIGVmZm9ydHMgdG8gb2J0YWluIFJvbWFuIGNpdGl6ZW5zaGlwLiBPbmUgb2YgdGhlaXIgbnVtYmVyLCBQb21wYWVkaXVzIFNpbG8sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RXJyb25lb3VzbHkgY2FsbGVkIFB1YmxpdXMgU2lsbyBpbiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMzMuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5NYXJpdXM8L3RpdGxlPiwgeHh4aWlpLiAyPC9iaWJsPi48L25vdGU+IGEgbWFuIG9mIGV4cGVyaWVuY2UgaW4gd2FyIGFuZCBvZiB0aGUgaGlnaGVzdCBwb3NpdGlvbiwgd2FzIGEgZnJpZW5kIG9mIERydXN1cywgYW5kIGxvZGdlZCBhdCBoaXMgaG91c2UgZm9yIHNldmVyYWwgZGF5cy4gRHVyaW5nIHRoaXMgdGltZSBoZSBiZWNhbWUgZmFtaWxpYXIgd2l0aCB0aGUgY2hpbGRyZW4sIGFuZCBzYWlkIHRvIHRoZW0gb25jZTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db21lLCBiZWcgeW91ciB1bmNsZSB0byBoZWxwIHVzIGluIG91ciBzdHJ1Z2dsZSBmb3IgY2l0aXplbnNoaXAuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhZXBpbywgYWNjb3JkaW5nbHksIGNvbnNlbnRlZCB3aXRoIGEgc21pbGUsIGJ1dCBDYXRvIG1hZGUgbm8gcmVwbHkgYW5kIGdhemVkIGZpeGVkbHkgYW5kIGZpZXJjZWx5IHVwb24gdGhlIHN0cmFuZ2Vycy4gVGhlbiBQb21wYWVkaXVzIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHRob3UsIHlvdW5nIG1hbiwgd2hhdCBzYXllc3QgdGhvdSB0byB1cz8gQ2Fuc3QgdGhvdSBub3QgdGFrZSB0aGUgcGFydCBvZiB0aGUgc3RyYW5nZXJzIHdpdGggdGh5IHVuY2xlLCBsaWtlIHRoeSBicm90aGVyPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBDYXRvIHNhaWQgbm90IGEgd29yZCwgYnV0IGJ5IGhpcyBzaWxlbmNlIGFuZCB0aGUgbG9vayBvbiBoaXMgZmFjZSBzZWVtZWQgdG8gcmVmdXNlIHRoZSByZXF1ZXN0LCBQb21wYWVkaXVzIGxpZnRlZCBoaW0gdXAgdGhyb3VnaCBhIHdpbmRvdywgYXMgaWYgaGUgd291bGQgY2FzdCBoaW0gb3V0LCBhbmQgb3JkZXJlZCBoaW0gdG8gY29uc2VudCwgb3IgaGUgd291bGQgdGhyb3cgaGltIGRvd24sIGF0IHRoZSBzYW1lIHRpbWUgbWFraW5nIHRoZSB0b25lIG9mIGhpcyB2b2ljZSBoYXJzaGVyLCBhbmQgZnJlcXVlbnRseSBzaGFraW5nIHRoZSBib3kgYXMgaGUgaGVsZCBoaXMgYm9keSBvdXQgYXQgdGhlIHdpbmRvdy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gQ2F0byBoYWQgZW5kdXJlZCB0aGlzIHRyZWF0bWVudCBmb3IgYSBsb25nIHRpbWUgd2l0aG91dCBzaG93aW5nIGZyaWdodCBvciBmZWFyLCBQb21wYWVkaXVzIHB1dCBoaW0gZG93biwgc2F5aW5nIHF1aWV0bHkgdG8gaGlzIGZyaWVuZHM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBhIHBpZWNlIG9mIGdvb2QgZm9ydHVuZSBpdCBpcyBmb3IgSXRhbHkgdGhhdCBoZSBpcyBhIGJveTsgZm9yIGlmIGhlIHdlcmUgYSBtYW4sIEkgZG8gbm90IHRoaW5rIHdlIGNvdWxkIGdldCBhIHNpbmdsZSB2b3RlIGFtb25nIHRoZSBwZW9wbGUuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGlzIGluY2lkZW50IG11c3QgaGF2ZSBoYXBwZW5lZCwgaWYgYXQgYWxsLCBpbiA5MSBCLkMuIHdoZW4gQ2F0byB3YXMgZm91ciB5ZWFycyBvbGQ7IGJ1dCBpdCBuZWVkIG5vdCBiZSBpbmZlcnJlZCB0aGF0IGhlIGhhZCBhbHJlYWR5IGZvcm1lZCBhbiBvcGluaW9uIG9uIHB1YmxpYyBhZmZhaXJzLiBUaGUgc3RvcnkgaXMgdG9sZCBhbHNvIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJWLiBNYXguIDMuMS4yIj5WYWxlcml1cyBNYXhpbXVzLCBpaWkuIDEsIDI8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBDYXRvIHdhcyBzdGlsbCBhIGJveSwgdGhlIEl0YWxpYW4gYWxsaWVzIG9mIHRoZSBSb21hbnMgd2VyZSBtYWtpbmcgZWZmb3J0cyB0byBvYnRhaW4gUm9tYW4gY2l0aXplbnNoaXAuIE9uZSBvZiB0aGVpciBudW1iZXIsIFBvbXBhZWRpdXMgU2lsbyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVycm9uZW91c2x5IGNhbGxlZCBQdWJsaXVzIFNpbG8gaW4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMzMuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCB4eHhpaWkuIDI8L2JpYmw+Ljwvbm90ZT4gYSBtYW4gb2YgZXhwZXJpZW5jZSBpbiB3YXIgYW5kIG9mIHRoZSBoaWdoZXN0IHBvc2l0aW9uLCB3YXMgYSBmcmllbmQgb2YgRHJ1c3VzLCBhbmQgbG9kZ2VkIGF0IGhpcyBob3VzZSBmb3Igc2V2ZXJhbCBkYXlzLiBEdXJpbmcgdGhpcyB0aW1lIGhlIGJlY2FtZSBmYW1pbGlhciB3aXRoIHRoZSBjaGlsZHJlbiwgYW5kIHNhaWQgdG8gdGhlbSBvbmNlOiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMzMuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCB4eHhpaWkuIDI8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCB4eHhpaWkuIDI8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNvbWUsIGJlZyB5b3VyIHVuY2xlIHRvIGhlbHAgdXMgaW4gb3VyIHN0cnVnZ2xlIGZvciBjaXRpemVuc2hpcC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhZXBpbywgYWNjb3JkaW5nbHksIGNvbnNlbnRlZCB3aXRoIGEgc21pbGUsIGJ1dCBDYXRvIG1hZGUgbm8gcmVwbHkgYW5kIGdhemVkIGZpeGVkbHkgYW5kIGZpZXJjZWx5IHVwb24gdGhlIHN0cmFuZ2Vycy4gVGhlbiBQb21wYWVkaXVzIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgdGhvdSwgeW91bmcgbWFuLCB3aGF0IHNheWVzdCB0aG91IHRvIHVzPyBDYW5zdCB0aG91IG5vdCB0YWtlIHRoZSBwYXJ0IG9mIHRoZSBzdHJhbmdlcnMgd2l0aCB0aHkgdW5jbGUsIGxpa2UgdGh5IGJyb3RoZXI/PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIENhdG8gc2FpZCBub3QgYSB3b3JkLCBidXQgYnkgaGlzIHNpbGVuY2UgYW5kIHRoZSBsb29rIG9uIGhpcyBmYWNlIHNlZW1lZCB0byByZWZ1c2UgdGhlIHJlcXVlc3QsIFBvbXBhZWRpdXMgbGlmdGVkIGhpbSB1cCB0aHJvdWdoIGEgd2luZG93LCBhcyBpZiBoZSB3b3VsZCBjYXN0IGhpbSBvdXQsIGFuZCBvcmRlcmVkIGhpbSB0byBjb25zZW50LCBvciBoZSB3b3VsZCB0aHJvdyBoaW0gZG93biwgYXQgdGhlIHNhbWUgdGltZSBtYWtpbmcgdGhlIHRvbmUgb2YgaGlzIHZvaWNlIGhhcnNoZXIsIGFuZCBmcmVxdWVudGx5IHNoYWtpbmcgdGhlIGJveSBhcyBoZSBoZWxkIGhpcyBib2R5IG91dCBhdCB0aGUgd2luZG93LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIENhdG8gaGFkIGVuZHVyZWQgdGhpcyB0cmVhdG1lbnQgZm9yIGEgbG9uZyB0aW1lIHdpdGhvdXQgc2hvd2luZyBmcmlnaHQgb3IgZmVhciwgUG9tcGFlZGl1cyBwdXQgaGltIGRvd24sIHNheWluZyBxdWlldGx5IHRvIGhpcyBmcmllbmRzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBhIHBpZWNlIG9mIGdvb2QgZm9ydHVuZSBpdCBpcyBmb3IgSXRhbHkgdGhhdCBoZSBpcyBhIGJveTsgZm9yIGlmIGhlIHdlcmUgYSBtYW4sIEkgZG8gbm90IHRoaW5rIHdlIGNvdWxkIGdldCBhIHNpbmdsZSB2b3RlIGFtb25nIHRoZSBwZW9wbGUuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgaW5jaWRlbnQgbXVzdCBoYXZlIGhhcHBlbmVkLCBpZiBhdCBhbGwsIGluIDkxIEIuQy4gd2hlbiBDYXRvIHdhcyBmb3VyIHllYXJzIG9sZDsgYnV0IGl0IG5lZWQgbm90IGJlIGluZmVycmVkIHRoYXQgaGUgaGFkIGFscmVhZHkgZm9ybWVkIGFuIG9waW5pb24gb24gcHVibGljIGFmZmFpcnMuIFRoZSBzdG9yeSBpcyB0b2xkIGFsc28gaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVi4gTWF4LiAzLjEuMiI+VmFsZXJpdXMgTWF4aW11cywgaWlpLiAxLCAyPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlYuIE1heC4gMy4xLjIiPlZhbGVyaXVzIE1heGltdXMsIGlpaS4gMSwgMjwvYmlibD4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW5vdGhlciB0aW1lIGEgcmVsYXRpb24gb2YgaGlzIHdobyB3YXMgY2VsZWJyYXRpbmcgYSBiaXJ0aGRheSwgaW52aXRlZCBDYXRvIGFuZCBvdGhlciBib3lzIHRvIHN1cHBlciwgYW5kIHRoZSBjb21wYW55IHdlcmUgZGl2ZXJ0aW5nIHRoZW1zZWx2ZXMgYXQgcGxheSBpbiBhIHNlcGFyYXRlIHBhcnQgb2YgdGhlIGhvdXNlLCBvbGRlciBhbmQgeW91bmdlciB0b2dldGhlciwgdGhlaXIgcGxheSBiZWluZyBhY3Rpb25zIGF0IGxhdywgYWNjdXNhdGlvbnMsIGFuZCB0aGUgY29uZHVjdGluZyBvZiB0aGUgY29uZGVtbmVkIHBlcnNvbnMgdG8gcHJpc29uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgb25lIG9mIHRob3NlIHRodXMgY29uZGVtbmVkLCBhIGJveSBvZiBjb21lbHkgbG9va3MsIHdhcyBsZWQgb2ZmIGJ5IGFuIG9sZGVyIGJveSBhbmQgc2h1dCBpbnRvIGEgY2hhbWJlciwgd2hlcmUgaGUgY2FsbGVkIHVwb24gQ2F0byBmb3IgaGVscC4gVGhlbiBDYXRvLCB3aGVuIGhlIHVuZGVyc3Rvb2Qgd2hhdCB3YXMgZ29pbmcgb24sIHF1aWNrbHkgY2FtZSB0byB0aGUgZG9vciwgcHVzaGVkIGFzaWRlIHRoZSBib3lzIHdobyBzdG9vZCBiZWZvcmUgaXQgYW5kIHRyaWVkIHRvIHN0b3AgaGltLCBsZWQgZm9ydGggdGhlIHByaXNvbmVyLCBhbmQgd2VudCBvZmYgaG9tZSB3aXRoIGhpbSBpbiBhIHBhc3Npb24sIGZvbGxvd2VkIGJ5IG90aGVyIGJveXMgYWxzby4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFub3RoZXIgdGltZSBhIHJlbGF0aW9uIG9mIGhpcyB3aG8gd2FzIGNlbGVicmF0aW5nIGEgYmlydGhkYXksIGludml0ZWQgQ2F0byBhbmQgb3RoZXIgYm95cyB0byBzdXBwZXIsIGFuZCB0aGUgY29tcGFueSB3ZXJlIGRpdmVydGluZyB0aGVtc2VsdmVzIGF0IHBsYXkgaW4gYSBzZXBhcmF0ZSBwYXJ0IG9mIHRoZSBob3VzZSwgb2xkZXIgYW5kIHlvdW5nZXIgdG9nZXRoZXIsIHRoZWlyIHBsYXkgYmVpbmcgYWN0aW9ucyBhdCBsYXcsIGFjY3VzYXRpb25zLCBhbmQgdGhlIGNvbmR1Y3Rpbmcgb2YgdGhlIGNvbmRlbW5lZCBwZXJzb25zIHRvIHByaXNvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBvbmUgb2YgdGhvc2UgdGh1cyBjb25kZW1uZWQsIGEgYm95IG9mIGNvbWVseSBsb29rcywgd2FzIGxlZCBvZmYgYnkgYW4gb2xkZXIgYm95IGFuZCBzaHV0IGludG8gYSBjaGFtYmVyLCB3aGVyZSBoZSBjYWxsZWQgdXBvbiBDYXRvIGZvciBoZWxwLiBUaGVuIENhdG8sIHdoZW4gaGUgdW5kZXJzdG9vZCB3aGF0IHdhcyBnb2luZyBvbiwgcXVpY2tseSBjYW1lIHRvIHRoZSBkb29yLCBwdXNoZWQgYXNpZGUgdGhlIGJveXMgd2hvIHN0b29kIGJlZm9yZSBpdCBhbmQgdHJpZWQgdG8gc3RvcCBoaW0sIGxlZCBmb3J0aCB0aGUgcHJpc29uZXIsIGFuZCB3ZW50IG9mZiBob21lIHdpdGggaGltIGluIGEgcGFzc2lvbiwgZm9sbG93ZWQgYnkgb3RoZXIgYm95cyBhbHNvLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBzbyBjZWxlYnJhdGVkIHRoYXQsIHdoZW4gU3VsbGEgd2FzIHByZXBhcmluZyBmb3IgZXhoaWJpdGlvbiB0aGUgc2FjcmVkIGVxdWVzdHJpYW4gZ2FtZSBmb3IgYm95czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iVmVyZy4gQS4gNS41NTMiIHZhbGlkPSJ5ZXMiPlZlcmdpbCwgPHRpdGxlPkFlbmVpZDwvdGl0bGU+LCB2LiA1NTMgZmY8L2JpYmw+Ljwvbm90ZT4gd2hpY2ggaXMgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VHJvamEsPC9xPiBhbmQsIGFmdGVyIGFzc2VtYmxpbmcgdGhlIGJveXMgb2YgZ29vZCBiaXJ0aCwgYXBwb2ludGVkIHR3byBsZWFkZXJzIGZvciB0aGVtLCB0aGUgYm95cyBhY2NlcHRlZCBvbmUgb2YgdGhlbSBmb3IgaGlzIG1vdGhlcidzIHNha2UgKGhlIHdhcyBhIHNvbiBvZiBNZXRlbGxhLCBTdWxsYSdzIHdpZmUpLCBidXQgd291bGQgbm90IHRvbGVyYXRlIHRoZSBvdGhlciAod2hvIHdhcyBhIG5lcGhldyBvZiBQb21wZXksIG5hbWVkIFNleHR1cyksIGFuZCByZWZ1c2VkIHRvIHJlaGVhcnNlIHVuZGVyIGhpbSBvciBvYmV5IGhpbTsgYW5kIHdoZW4gU3VsbGEgYXNrZWQgdGhlbSB3aG9tIHRoZXkgd291bGQgaGF2ZSwgdGhleSBhbGwgY3JpZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYXRvLDwvcT4gYW5kIFNleHR1cyBoaW1zZWxmIGdhdmUgd2F5IGFuZCB5aWVsZGVkIHRoZSBob25vdXIgdG8gYSBjb25mZXNzZWQgc3VwZXJpb3IuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgc28gY2VsZWJyYXRlZCB0aGF0LCB3aGVuIFN1bGxhIHdhcyBwcmVwYXJpbmcgZm9yIGV4aGliaXRpb24gdGhlIHNhY3JlZCBlcXVlc3RyaWFuIGdhbWUgZm9yIGJveXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJWZXJnLiBBLiA1LjU1MyIgdmFsaWQ9InllcyI+VmVyZ2lsLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZW5laWQ8L3RpdGxlPiwgdi4gNTUzIGZmPC9iaWJsPi48L25vdGU+IHdoaWNoIGlzIGNhbGxlZCAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlZlcmcuIEEuIDUuNTUzIiB2YWxpZD0ieWVzIj5WZXJnaWwsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlbmVpZDwvdGl0bGU+LCB2LiA1NTMgZmY8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlbmVpZDwvdGl0bGU+LCB2LiA1NTMgZmY8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRyb2phLDwvcT4gYW5kLCBhZnRlciBhc3NlbWJsaW5nIHRoZSBib3lzIG9mIGdvb2QgYmlydGgsIGFwcG9pbnRlZCB0d28gbGVhZGVycyBmb3IgdGhlbSwgdGhlIGJveXMgYWNjZXB0ZWQgb25lIG9mIHRoZW0gZm9yIGhpcyBtb3RoZXIncyBzYWtlIChoZSB3YXMgYSBzb24gb2YgTWV0ZWxsYSwgU3VsbGEncyB3aWZlKSwgYnV0IHdvdWxkIG5vdCB0b2xlcmF0ZSB0aGUgb3RoZXIgKHdobyB3YXMgYSBuZXBoZXcgb2YgUG9tcGV5LCBuYW1lZCBTZXh0dXMpLCBhbmQgcmVmdXNlZCB0byByZWhlYXJzZSB1bmRlciBoaW0gb3Igb2JleSBoaW07IGFuZCB3aGVuIFN1bGxhIGFza2VkIHRoZW0gd2hvbSB0aGV5IHdvdWxkIGhhdmUsIHRoZXkgYWxsIGNyaWVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYXRvLDwvcT4gYW5kIFNleHR1cyBoaW1zZWxmIGdhdmUgd2F5IGFuZCB5aWVsZGVkIHRoZSBob25vdXIgdG8gYSBjb25mZXNzZWQgc3VwZXJpb3IuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgU3VsbGEgd2FzIGZyaWVuZGx5IHRvIENhdG8gYW5kIGhpcyBicm90aGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Qm90aCBoZXJlLCBhbmQgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDEuMSIgdmFsaWQ9InllcyI+aS4gMTwvYmlibD4sIFBsdXRhcmNoIGNhcmVsZXNzbHkgc3BlYWtzIGFzIHRob3VnaCBDYWVwaW8gd2VyZSBoaXMgb3duIGJyb3RoZXIsIGFuZCBub3QgdGhlIGhhbGYtYnJvdGhlciwgb2YgQ2F0by48L25vdGU+IG9uIHRoZWlyIGZhdGhlcidzIGFjY291bnQsIGFuZCBzb21ldGltZXMgYWN0dWFsbHkgYXNrZWQgdGhlbSB0byBzZWUgaGltIGFuZCBjb252ZXJzZWQgd2l0aCB0aGVtLCBhIGtpbmRuZXNzIHdoaWNoIGhlIHNob3dlZCB0byB2ZXJ5IGZldywgYnkgcmVhc29uIG9mIHRoZSB3ZWlnaHQgYW5kIG1hamVzdHkgb2YgaGlzIGF1dGhvcml0eSBhbmQgcG93ZXIuIFNvIFNhcnBlZG9uLCB0aGlua2luZyB0aGF0IHRoaXMgY29uZHVjZWQgZ3JlYXRseSB0byB0aGUgaG9ub3VyIGFuZCBzYWZldHkgb2YgaGlzIGNoYXJnZSwgd2FzIGNvbnRpbnVhbGx5IGJyaW5naW5nIENhdG8gdG8gd2FpdCB1cG9uIFN1bGxhIGF0IGhpcyBob3VzZSwgd2hpY2gsIGF0IHRoYXQgdGltZSwgbG9va2VkIGV4YWN0bHkgbGlrZSBhbiBJbmZlcm5vLCBvd2luZyB0byB0aGUgbXVsdGl0dWRlIG9mIHRob3NlIHdobyB3ZXJlIGJyb3VnaHQgdGhpdGhlciBhbmQgcHV0IHRvIHRvcnR1cmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQ2F0byB3YXMgaW4gaGlzIGZvdXJ0ZWVudGggeWVhcjsgYW5kIHdoZW4gaGUgc2F3IGhlYWRzIG9mIG1lbiByZXB1dGVkIHRvIGJlIGVtaW5lbnQgY2FycmllZCBmb3J0aCwgYW5kIGhlYXJkIHRoZSBzbW90aGVyZWQgZ3JvYW5zIG9mIHRoZSBieXN0YW5kZXJzLCBoZSBhc2tlZCBoaXMgdHV0b3Igd2h5IG5vIG9uZSBzbGV3IHRoaXMgbWFuLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJlY2F1c2UsIG15IGNoaWxkLDwvcT4gc2FpZCB0aGUgdHV0b3IsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bWVuIGZlYXIgaGltIG1vcmUgdGhhbiB0aGV5IGhhdGUgaGltLjwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgdGhlbiw8L3E+IHNhaWQgQ2F0bywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kaWRzdCB0aG91IG5vdCBnaXZlIG1lIGEgc3dvcmQsIHRoYXQgSSBtaWdodCBzbGF5IGhpbSBhbmQgc2V0IG15IGNvdW50cnkgZnJlZSBmcm9tIHNsYXZlcnk/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gU2FycGVkb24gaGVhcmQgdGhpcyBzcGVlY2gsIGFuZCBzYXcgYWxzbyB0aGUgbG9vayBvbiB0aGUgYm95J3MgZmFjZSwgd2hpY2ggd2FzIGZ1bGwgb2YgcmFnZSBhbmQgZnVyeSwgaGUgd2FzIHNvIGZyaWdodGVuZWQgdGhhdCBpbiBmdXR1cmUgaGUga2VwdCBoaW0gdW5kZXIgY2xvc2Ugd2F0Y2ggYW5kIHdhcmQsIGxlc3QgaGUgc2hvdWxkIHZlbnR1cmUgb24gc29tZSByYXNoIGRlZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgU3VsbGEgd2FzIGZyaWVuZGx5IHRvIENhdG8gYW5kIGhpcyBicm90aGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Cb3RoIGhlcmUsIGFuZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAxLjEiIHZhbGlkPSJ5ZXMiPmkuIDE8L2JpYmw+LCBQbHV0YXJjaCBjYXJlbGVzc2x5IHNwZWFrcyBhcyB0aG91Z2ggQ2FlcGlvIHdlcmUgaGlzIG93biBicm90aGVyLCBhbmQgbm90IHRoZSBoYWxmLWJyb3RoZXIsIG9mIENhdG8uPC9ub3RlPiBvbiB0aGVpciBmYXRoZXIncyBhY2NvdW50LCBhbmQgc29tZXRpbWVzIGFjdHVhbGx5IGFza2VkIHRoZW0gdG8gc2VlIGhpbSBhbmQgY29udmVyc2VkIHdpdGggdGhlbSwgYSBraW5kbmVzcyB3aGljaCBoZSBzaG93ZWQgdG8gdmVyeSBmZXcsIGJ5IHJlYXNvbiBvZiB0aGUgd2VpZ2h0IGFuZCBtYWplc3R5IG9mIGhpcyBhdXRob3JpdHkgYW5kIHBvd2VyLiBTbyBTYXJwZWRvbiwgdGhpbmtpbmcgdGhhdCB0aGlzIGNvbmR1Y2VkIGdyZWF0bHkgdG8gdGhlIGhvbm91ciBhbmQgc2FmZXR5IG9mIGhpcyBjaGFyZ2UsIHdhcyBjb250aW51YWxseSBicmluZ2luZyBDYXRvIHRvIHdhaXQgdXBvbiBTdWxsYSBhdCBoaXMgaG91c2UsIHdoaWNoLCBhdCB0aGF0IHRpbWUsIGxvb2tlZCBleGFjdGx5IGxpa2UgYW4gSW5mZXJubywgb3dpbmcgdG8gdGhlIG11bHRpdHVkZSBvZiB0aG9zZSB3aG8gd2VyZSBicm91Z2h0IHRoaXRoZXIgYW5kIHB1dCB0byB0b3J0dXJlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDEuMSIgdmFsaWQ9InllcyI+aS4gMTwvYmlibD4sIFBsdXRhcmNoIGNhcmVsZXNzbHkgc3BlYWtzIGFzIHRob3VnaCBDYWVwaW8gd2VyZSBoaXMgb3duIGJyb3RoZXIsIGFuZCBub3QgdGhlIGhhbGYtYnJvdGhlciwgb2YgQ2F0by48L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQ2F0byB3YXMgaW4gaGlzIGZvdXJ0ZWVudGggeWVhcjsgYW5kIHdoZW4gaGUgc2F3IGhlYWRzIG9mIG1lbiByZXB1dGVkIHRvIGJlIGVtaW5lbnQgY2FycmllZCBmb3J0aCwgYW5kIGhlYXJkIHRoZSBzbW90aGVyZWQgZ3JvYW5zIG9mIHRoZSBieXN0YW5kZXJzLCBoZSBhc2tlZCBoaXMgdHV0b3Igd2h5IG5vIG9uZSBzbGV3IHRoaXMgbWFuLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QmVjYXVzZSwgbXkgY2hpbGQsPC9xPiBzYWlkIHRoZSB0dXRvciwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPm1lbiBmZWFyIGhpbSBtb3JlIHRoYW4gdGhleSBoYXRlIGhpbS48L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgdGhlbiw8L3E+IHNhaWQgQ2F0bywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpZHN0IHRob3Ugbm90IGdpdmUgbWUgYSBzd29yZCwgdGhhdCBJIG1pZ2h0IHNsYXkgaGltIGFuZCBzZXQgbXkgY291bnRyeSBmcmVlIGZyb20gc2xhdmVyeT88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gU2FycGVkb24gaGVhcmQgdGhpcyBzcGVlY2gsIGFuZCBzYXcgYWxzbyB0aGUgbG9vayBvbiB0aGUgYm95J3MgZmFjZSwgd2hpY2ggd2FzIGZ1bGwgb2YgcmFnZSBhbmQgZnVyeSwgaGUgd2FzIHNvIGZyaWdodGVuZWQgdGhhdCBpbiBmdXR1cmUgaGUga2VwdCBoaW0gdW5kZXIgY2xvc2Ugd2F0Y2ggYW5kIHdhcmQsIGxlc3QgaGUgc2hvdWxkIHZlbnR1cmUgb24gc29tZSByYXNoIGRlZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgd2FzIHN0aWxsIGEgbGl0dGxlIGJveSwgYW5kIHdhcyBhc2tlZCB3aG9tIGhlIGxvdmVkIG1vc3QsIGhlIGFuc3dlcmVkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IGJyb3RoZXI8L3E+OyBhbmQgdG8gdGhlIHF1ZXN0aW9uIHdob20gaGUgbG92ZWQgbmV4dCwgbGlrZXdpc2UsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgYnJvdGhlcjwvcT47IGFuZCBzbyBhIHRoaXJkIHRpbWUsIHVudGlsLCBhZnRlciBtYW55IHN1Y2ggYW5zd2VycyBmcm9tIGhpbSwgaGlzIHF1ZXN0aW9uZXIgZGVzaXN0ZWQuIEFuZCB3aGVuIGhlIGNhbWUgdG8gbWF0dXJpdHksIGhlIG1haW50YWluZWQgYWxsIHRoZSBtb3JlIGZpcm1seSB0aGlzIGFmZmVjdGlvbiBmb3IgaGlzIGJyb3RoZXIuIEluZGVlZCwgd2hlbiBoZSB3YXMgdHdlbnR5IHllYXJzIG9sZCwgd2l0aG91dCBDYWVwaW8gaGUgd291bGQgbm90IHRha2Ugc3VwcGVyLCBvciBtYWtlIGEgam91cm5leSwgb3IgZ28gb3V0IGludG8gdGhlIGZvcnVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBoaXMgYnJvdGhlciB1c2VkIHBlcmZ1bWUsIENhdG8gd291bGQgZGVjbGluZSBpdDsgYW5kIGluIGhpcyBoYWJpdHMgZ2VuZXJhbGx5IGhlIHdhcyBzZXZlcmUgYW5kIHN0cmljdC4gQXQgYW55IHJhdGUsIHdoZW4gQ2FlcGlvIHdhcyBhZG1pcmVkIGFuZCBwcmFpc2VkIGZvciBoaXMgZGlzY3JldGlvbiBhbmQgbW9kZXJhdGlvbiwgaGUgd291bGQgYWRtaXQgdGhhdCBoZSBoYWQgdGhvc2UgcXVhbGl0aWVzIHdoZW4gdGVzdGVkIGJ5IHJlZmVyZW5jZSB0byBtb3N0IG1lbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgd2hlbiw8L3E+IGhlIHdvdWxkIHNheSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGNvbXBhcmUgbXkgbGlmZSB3aXRoIHRoYXQgb2YgQ2F0bywgSSBzZWVtIHRvIG15c2VsZiBubyBiZXR0ZXIgdGhhbiBTaXBwaXVzLDwvcT7igJRtZW50aW9uaW5nIG9uZSBvZiB0aG9zZSB3aG8gd2VyZSBjZWxlYnJhdGVkIGZvciBsdXh1cnkgYW5kIGVmZmVtaW5hY3kuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgd2FzIHN0aWxsIGEgbGl0dGxlIGJveSwgYW5kIHdhcyBhc2tlZCB3aG9tIGhlIGxvdmVkIG1vc3QsIGhlIGFuc3dlcmVkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgYnJvdGhlcjwvcT47IGFuZCB0byB0aGUgcXVlc3Rpb24gd2hvbSBoZSBsb3ZlZCBuZXh0LCBsaWtld2lzZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IGJyb3RoZXI8L3E+OyBhbmQgc28gYSB0aGlyZCB0aW1lLCB1bnRpbCwgYWZ0ZXIgbWFueSBzdWNoIGFuc3dlcnMgZnJvbSBoaW0sIGhpcyBxdWVzdGlvbmVyIGRlc2lzdGVkLiBBbmQgd2hlbiBoZSBjYW1lIHRvIG1hdHVyaXR5LCBoZSBtYWludGFpbmVkIGFsbCB0aGUgbW9yZSBmaXJtbHkgdGhpcyBhZmZlY3Rpb24gZm9yIGhpcyBicm90aGVyLiBJbmRlZWQsIHdoZW4gaGUgd2FzIHR3ZW50eSB5ZWFycyBvbGQsIHdpdGhvdXQgQ2FlcGlvIGhlIHdvdWxkIG5vdCB0YWtlIHN1cHBlciwgb3IgbWFrZSBhIGpvdXJuZXksIG9yIGdvIG91dCBpbnRvIHRoZSBmb3J1bS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhpcyBicm90aGVyIHVzZWQgcGVyZnVtZSwgQ2F0byB3b3VsZCBkZWNsaW5lIGl0OyBhbmQgaW4gaGlzIGhhYml0cyBnZW5lcmFsbHkgaGUgd2FzIHNldmVyZSBhbmQgc3RyaWN0LiBBdCBhbnkgcmF0ZSwgd2hlbiBDYWVwaW8gd2FzIGFkbWlyZWQgYW5kIHByYWlzZWQgZm9yIGhpcyBkaXNjcmV0aW9uIGFuZCBtb2RlcmF0aW9uLCBoZSB3b3VsZCBhZG1pdCB0aGF0IGhlIGhhZCB0aG9zZSBxdWFsaXRpZXMgd2hlbiB0ZXN0ZWQgYnkgcmVmZXJlbmNlIHRvIG1vc3QgbWVuLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHdoZW4sPC9xPiBoZSB3b3VsZCBzYXksIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGNvbXBhcmUgbXkgbGlmZSB3aXRoIHRoYXQgb2YgQ2F0bywgSSBzZWVtIHRvIG15c2VsZiBubyBiZXR0ZXIgdGhhbiBTaXBwaXVzLDwvcT7igJRtZW50aW9uaW5nIG9uZSBvZiB0aG9zZSB3aG8gd2VyZSBjZWxlYnJhdGVkIGZvciBsdXh1cnkgYW5kIGVmZmVtaW5hY3kuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgQ2F0byBoYWQgYmVlbiBtYWRlIHByaWVzdCBvZiBBcG9sbG8sIGhlIHRvb2sgYSBob3VzZSBhcGFydCwgYWNjZXB0ZWQgaGlzIHNoYXJlIG9mIHRoZSBwYXRyaW1vbnksIHdoaWNoIGFtb3VudGVkIHRvIGEgaHVuZHJlZCBhbmQgdHdlbnR5IHRhbGVudHMsIGFuZCBiZWdhbiB0byBsaXZlIHlldCBtb3JlIHNpbXBseSB0aGFuIGJlZm9yZS4gSGUgbWFkZSBhIGNsb3NlIGNvbXBhbmlvbiBvZiBBbnRpcGF0ZXIgdGhlIFR5cmlhbiwgYSBTdG9pYyBwaGlsb3NvcGhlciwgYW5kIGRldm90ZWQgaGltc2VsZiBlc3BlY2lhbGx5IHRvIGV0aGljYWwgYW5kIHBvbGl0aWNhbCBkb2N0cmluZXMuIEhlIHdhcyBwb3NzZXNzZWQsIGFzIGl0IHdlcmUsIHdpdGggYSBraW5kIG9mIGluc3BpcmF0aW9uIGZvciB0aGUgcHVyc3VpdCBvZiBldmVyeSB2aXJ0dWU7IGJ1dCwgYWJvdmUgYWxsLCB0aGF0IGZvcm0gb2YgZ29vZG5lc3Mgd2hpY2ggY29uc2lzdHMgaW4gcmlnaWQganVzdGljZSB0aGF0IHdpbGwgbm90IGJlbmQgdG8gY2xlbWVuY3kgb3IgZmF2b3VyLCB3YXMgaGlzIGdyZWF0IGRlbGlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHByYWN0aXNlZCBhbHNvIHRoZSBraW5kIG9mIHNwZWFraW5nIHdoaWNoIGlzIGVmZmVjdGl2ZSB3aXRoIGEgbXVsdGl0dWRlLCBkZWVtaW5nIGl0IHJpZ2h0IHRoYXQgaW4gcG9saXRpY2FsIHBoaWxvc29waHksIGFzIGluIGEgZ3JlYXQgY2l0eSwgYSBjZXJ0YWluIHdhcmxpa2UgZWxlbWVudCBzaG91bGQgYWxzbyBiZSBtYWludGFpbmVkLiBIb3dldmVyLCBoZSBkaWQgbm90IHBlcmZvcm0gaGlzIGV4ZXJjaXNlcyBpbiBjb21wYW55IHdpdGggb3RoZXJzLCBub3IgZGlkIGFueSBvbmUgZXZlciBoZWFyIGhpbSByZWhlYXJzaW5nIGEgc3BlZWNoLiBJbmRlZWQsIHRvIG9uZSBvZiBoaXMgY29tcGFuaW9ucyB3aG8gc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NZW4gZmluZCBmYXVsdCB3aXRoIHRoZWUsIENhdG8sIGZvciB0aHkgc2lsZW5jZSw8L3E+IGhlIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T25seSBsZXQgdGhlbSBub3QgYmxhbWUgbXkgbGlmZS4gSSB3aWxsIGJlZ2luIHRvIHNwZWFrIHdoZW4gSSBhbSBub3QgZ29pbmcgdG8gc2F5IHdoYXQgd2VyZSBiZXR0ZXIgbGVmdCB1bnNhaWQuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBDYXRvIGhhZCBiZWVuIG1hZGUgcHJpZXN0IG9mIEFwb2xsbywgaGUgdG9vayBhIGhvdXNlIGFwYXJ0LCBhY2NlcHRlZCBoaXMgc2hhcmUgb2YgdGhlIHBhdHJpbW9ueSwgd2hpY2ggYW1vdW50ZWQgdG8gYSBodW5kcmVkIGFuZCB0d2VudHkgdGFsZW50cywgYW5kIGJlZ2FuIHRvIGxpdmUgeWV0IG1vcmUgc2ltcGx5IHRoYW4gYmVmb3JlLiBIZSBtYWRlIGEgY2xvc2UgY29tcGFuaW9uIG9mIEFudGlwYXRlciB0aGUgVHlyaWFuLCBhIFN0b2ljIHBoaWxvc29waGVyLCBhbmQgZGV2b3RlZCBoaW1zZWxmIGVzcGVjaWFsbHkgdG8gZXRoaWNhbCBhbmQgcG9saXRpY2FsIGRvY3RyaW5lcy4gSGUgd2FzIHBvc3Nlc3NlZCwgYXMgaXQgd2VyZSwgd2l0aCBhIGtpbmQgb2YgaW5zcGlyYXRpb24gZm9yIHRoZSBwdXJzdWl0IG9mIGV2ZXJ5IHZpcnR1ZTsgYnV0LCBhYm92ZSBhbGwsIHRoYXQgZm9ybSBvZiBnb29kbmVzcyB3aGljaCBjb25zaXN0cyBpbiByaWdpZCBqdXN0aWNlIHRoYXQgd2lsbCBub3QgYmVuZCB0byBjbGVtZW5jeSBvciBmYXZvdXIsIHdhcyBoaXMgZ3JlYXQgZGVsaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHByYWN0aXNlZCBhbHNvIHRoZSBraW5kIG9mIHNwZWFraW5nIHdoaWNoIGlzIGVmZmVjdGl2ZSB3aXRoIGEgbXVsdGl0dWRlLCBkZWVtaW5nIGl0IHJpZ2h0IHRoYXQgaW4gcG9saXRpY2FsIHBoaWxvc29waHksIGFzIGluIGEgZ3JlYXQgY2l0eSwgYSBjZXJ0YWluIHdhcmxpa2UgZWxlbWVudCBzaG91bGQgYWxzbyBiZSBtYWludGFpbmVkLiBIb3dldmVyLCBoZSBkaWQgbm90IHBlcmZvcm0gaGlzIGV4ZXJjaXNlcyBpbiBjb21wYW55IHdpdGggb3RoZXJzLCBub3IgZGlkIGFueSBvbmUgZXZlciBoZWFyIGhpbSByZWhlYXJzaW5nIGEgc3BlZWNoLiBJbmRlZWQsIHRvIG9uZSBvZiBoaXMgY29tcGFuaW9ucyB3aG8gc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1lbiBmaW5kIGZhdWx0IHdpdGggdGhlZSwgQ2F0bywgZm9yIHRoeSBzaWxlbmNlLDwvcT4gaGUgcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9ubHkgbGV0IHRoZW0gbm90IGJsYW1lIG15IGxpZmUuIEkgd2lsbCBiZWdpbiB0byBzcGVhayB3aGVuIEkgYW0gbm90IGdvaW5nIHRvIHNheSB3aGF0IHdlcmUgYmV0dGVyIGxlZnQgdW5zYWlkLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgQmFzaWxpY2EgUG9yY2lhLCBhcyBpdCB3YXMgY2FsbGVkLCBoYWQgYmVlbiBkZWRpY2F0ZWQgYnkgdGhlIGVsZGVyIENhdG8gd2hpbGUgaGUgd2FzIGNlbnNvci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1hLiAxOS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhdG8gTWFqb3I8L3RpdGxlPiwgeGl4LiAyPC9iaWJsPi4gVGhpcyB3YXMgaW4gMTgyIEIuQy48L25vdGU+IEhlcmUsIHRoZW4sIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlIHdlcmUgYWNjdXN0b21lZCB0byB0cmFuc2FjdCB0aGVpciBidXNpbmVzczsgYW5kIGFzIG9uZSBvZiB0aGUgcGlsbGFycyB3YXMgdGhvdWdodCB0byBiZSBpbiB0aGUgd2F5IG9mIHRoZWlyIHNlYXRzLCB0aGV5IGRldGVybWluZWQgdG8gdGFrZSBpdCBkb3duIG9yIG1vdmUgaXQgdG8gYW5vdGhlciBwbGFjZS4gVGhpcyBicm91Z2h0IENhdG8gZm9yIHRoZSBmaXJzdCB0aW1lLCBhbmQgYWdhaW5zdCBoaXMgd2lzaGVzLCBpbnRvIHRoZSBmb3J1bTsgaGUgb3Bwb3NlZCB0aGUgdHJpYnVuZXMsIGFuZCB3YXMgYWRtaXJlZCBmb3IgdGhlIHByb29mIG9mIGVsb3F1ZW5jZSBhbmQgaGlnaCBjaGFyYWN0ZXIgd2hpY2ggaGUgZ2F2ZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhpcyBzcGVlY2ggaGFkIG5vdGhpbmcgYWJvdXQgaXQgdGhhdCB3YXMganV2ZW5pbGUgb3IgYWZmZWN0ZWQsIGJ1dCB3YXMgc3RyYWlnaHRmb3J3YXJkLCBmdWxsIG9mIG1hdHRlciwgYW5kIGhhcnNoLiBIb3dldmVyLCBhIGNoYXJtIHRoYXQgY2FwdGl2YXRlZCB0aGUgZWFyIHdhcyBkaWZmdXNlZCBvdmVyIHRoZSBoYXJzaG5lc3Mgb2YgaGlzIHNlbnRpbWVudHMsIGFuZCB0aGUgbWluZ2xpbmcgb2YgaGlzIGNoYXJhY3RlciB3aXRoIHRoZW0gZ2F2ZSB0aGVpciBhdXN0ZXJpdHkgYSBzbWlsaW5nIGdyYWNpb3VzbmVzcyB0aGF0IHdvbiBtZW4ncyBoZWFydHMuIEhpcyB2b2ljZSB3YXMgc3VmZmljaWVudGx5IGxvdWQgYW5kIHBlbmV0cmF0aW5nIHRvIHJlYWNoIHRoZSBlYXJzIG9mIHNvIGxhcmdlIGEgbXVsdGl0dWRlLCBhbmQgaXQgaGFkIGEgc3RyZW5ndGggYW5kIHRlbnNpb24gd2hpY2ggY291bGQgbm90IGJlIGJyb2tlbiBvciB3b3JuIG91dDsgZm9yIGhlIG9mdGVuIHNwb2tlIGFsbCBkYXkgd2l0aG91dCBnZXR0aW5nIHRpcmVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgQmFzaWxpY2EgUG9yY2lhLCBhcyBpdCB3YXMgY2FsbGVkLCBoYWQgYmVlbiBkZWRpY2F0ZWQgYnkgdGhlIGVsZGVyIENhdG8gd2hpbGUgaGUgd2FzIGNlbnNvci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNYS4gMTkuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gTWFqb3I8L3RpdGxlPiwgeGl4LiAyPC9iaWJsPi4gVGhpcyB3YXMgaW4gMTgyIEIuQy48L25vdGU+IEhlcmUsIHRoZW4sIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlIHdlcmUgYWNjdXN0b21lZCB0byB0cmFuc2FjdCB0aGVpciBidXNpbmVzczsgYW5kIGFzIG9uZSBvZiB0aGUgcGlsbGFycyB3YXMgdGhvdWdodCB0byBiZSBpbiB0aGUgd2F5IG9mIHRoZWlyIHNlYXRzLCB0aGV5IGRldGVybWluZWQgdG8gdGFrZSBpdCBkb3duIG9yIG1vdmUgaXQgdG8gYW5vdGhlciBwbGFjZS4gVGhpcyBicm91Z2h0IENhdG8gZm9yIHRoZSBmaXJzdCB0aW1lLCBhbmQgYWdhaW5zdCBoaXMgd2lzaGVzLCBpbnRvIHRoZSBmb3J1bTsgaGUgb3Bwb3NlZCB0aGUgdHJpYnVuZXMsIGFuZCB3YXMgYWRtaXJlZCBmb3IgdGhlIHByb29mIG9mIGVsb3F1ZW5jZSBhbmQgaGlnaCBjaGFyYWN0ZXIgd2hpY2ggaGUgZ2F2ZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1hLiAxOS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byBNYWpvcjwvdGl0bGU+LCB4aXguIDI8L2JpYmw+LiBUaGlzIHdhcyBpbiAxODIgQi5DLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gTWFqb3I8L3RpdGxlPiwgeGl4LiAyPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoaXMgc3BlZWNoIGhhZCBub3RoaW5nIGFib3V0IGl0IHRoYXQgd2FzIGp1dmVuaWxlIG9yIGFmZmVjdGVkLCBidXQgd2FzIHN0cmFpZ2h0Zm9yd2FyZCwgZnVsbCBvZiBtYXR0ZXIsIGFuZCBoYXJzaC4gSG93ZXZlciwgYSBjaGFybSB0aGF0IGNhcHRpdmF0ZWQgdGhlIGVhciB3YXMgZGlmZnVzZWQgb3ZlciB0aGUgaGFyc2huZXNzIG9mIGhpcyBzZW50aW1lbnRzLCBhbmQgdGhlIG1pbmdsaW5nIG9mIGhpcyBjaGFyYWN0ZXIgd2l0aCB0aGVtIGdhdmUgdGhlaXIgYXVzdGVyaXR5IGEgc21pbGluZyBncmFjaW91c25lc3MgdGhhdCB3b24gbWVuJ3MgaGVhcnRzLiBIaXMgdm9pY2Ugd2FzIHN1ZmZpY2llbnRseSBsb3VkIGFuZCBwZW5ldHJhdGluZyB0byByZWFjaCB0aGUgZWFycyBvZiBzbyBsYXJnZSBhIG11bHRpdHVkZSwgYW5kIGl0IGhhZCBhIHN0cmVuZ3RoIGFuZCB0ZW5zaW9uIHdoaWNoIGNvdWxkIG5vdCBiZSBicm9rZW4gb3Igd29ybiBvdXQ7IGZvciBoZSBvZnRlbiBzcG9rZSBhbGwgZGF5IHdpdGhvdXQgZ2V0dGluZyB0aXJlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lLCB0aGVuLCBhZnRlciB3aW5uaW5nIGhpcyBjYXNlLCBoZSB3ZW50IGJhY2sgYWdhaW4gdG8gaGlzIHNpbGVuY2UgYW5kIGhpcyBkaXNjaXBsaW5lLiBIZSBidWlsdCB1cCBoaXMgYm9keSBieSB2aWdvcm91cyBleGVyY2lzZXMsIGFjY3VzdG9taW5nIGhpbXNlbGYgdG8gZW5kdXJlIGJvdGggaGVhdCBhbmQgc25vdyB3aXRoIHVuY292ZXJlZCBoZWFkLCBhbmQgdG8gam91cm5leSBvbiBmb290IGF0IGFsbCBzZWFzb25zLCB3aXRob3V0IGEgdmVoaWNsZS4gVGhvc2Ugb2YgaGlzIGZyaWVuZHMgd2hvIHdlbnQgYWJyb2FkIHdpdGggaGltIHVzZWQgaG9yc2VzLCBhbmQgQ2F0byB3b3VsZCBvZnRlbiBqb2luIGVhY2ggb2YgdGhlbSBpbiB0dXJuIGFuZCBjb252ZXJzZSB3aXRoIGhpbSwgYWx0aG91Z2ggaGUgd2Fsa2VkIGFuZCB0aGV5IHJvZGUuIEluIHNpY2tuZXNzLCBoZSBoYWQgd29uZGVyZnVsIHBhdGllbmNlLCBhcyB3ZWxsIGFzIHNlbGYtY29udHJvbDsgZm9yIGluc3RhbmNlLCBpZiBoZSBoYWQgYW4gYWd1ZSwgaGUgd291bGQgcGFzcyB0aGUgZGF5IGFsb25lIGJ5IGhpbXNlbGYsIGFkbWl0dGluZyBubyB2aXNpdG9yLCB1bnRpbCBoZSB3YXMgY29uc2Npb3VzIG9mIGxhc3RpbmcgcmVsaWVmIGFuZCB0aGUgZGVwYXJ0dXJlIG9mIHRoZSBkaXNlYXNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgdGhlbiwgYWZ0ZXIgd2lubmluZyBoaXMgY2FzZSwgaGUgd2VudCBiYWNrIGFnYWluIHRvIGhpcyBzaWxlbmNlIGFuZCBoaXMgZGlzY2lwbGluZS4gSGUgYnVpbHQgdXAgaGlzIGJvZHkgYnkgdmlnb3JvdXMgZXhlcmNpc2VzLCBhY2N1c3RvbWluZyBoaW1zZWxmIHRvIGVuZHVyZSBib3RoIGhlYXQgYW5kIHNub3cgd2l0aCB1bmNvdmVyZWQgaGVhZCwgYW5kIHRvIGpvdXJuZXkgb24gZm9vdCBhdCBhbGwgc2Vhc29ucywgd2l0aG91dCBhIHZlaGljbGUuIFRob3NlIG9mIGhpcyBmcmllbmRzIHdobyB3ZW50IGFicm9hZCB3aXRoIGhpbSB1c2VkIGhvcnNlcywgYW5kIENhdG8gd291bGQgb2Z0ZW4gam9pbiBlYWNoIG9mIHRoZW0gaW4gdHVybiBhbmQgY29udmVyc2Ugd2l0aCBoaW0sIGFsdGhvdWdoIGhlIHdhbGtlZCBhbmQgdGhleSByb2RlLiBJbiBzaWNrbmVzcywgaGUgaGFkIHdvbmRlcmZ1bCBwYXRpZW5jZSwgYXMgd2VsbCBhcyBzZWxmLWNvbnRyb2w7IGZvciBpbnN0YW5jZSwgaWYgaGUgaGFkIGFuIGFndWUsIGhlIHdvdWxkIHBhc3MgdGhlIGRheSBhbG9uZSBieSBoaW1zZWxmLCBhZG1pdHRpbmcgbm8gdmlzaXRvciwgdW50aWwgaGUgd2FzIGNvbnNjaW91cyBvZiBsYXN0aW5nIHJlbGllZiBhbmQgdGhlIGRlcGFydHVyZSBvZiB0aGUgZGlzZWFzZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBzdXBwZXJzLCBoZSB3b3VsZCB0aHJvdyBkaWNlIGZvciB0aGUgY2hvaWNlIG9mIHBvcnRpb25zOyBhbmQgaWYgaGUgbG9zdCwgYW5kIGhpcyBmcmllbmRzIGJhZGUgaGltIGNob29zZSBmaXJzdCwgaGUgd291bGQgc2F5IGl0IHdhcyBub3QgcmlnaHQsIHNpbmNlIFZlbnVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGhpZ2hlc3QgdGhyb3cgYXQgZGljZSB3YXMgY2FsbGVkIHRoZSAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5WZW51cy10aHJvdy48L3E+CiAgICAgICAgICAgIDwvbm90ZT4gd2FzIHVud2lsbGluZy4gQXQgZmlyc3QsIGFsc28sIGhlIHdvdWxkIGRyaW5rIG9uY2UgYWZ0ZXIgc3VwcGVyIGFuZCB0aGVuIGxlYXZlIHRoZSB0YWJsZTsgYnV0IGFzIHRpbWUgd2VudCBvbiBoZSB3b3VsZCBhbGxvdyBoaW1zZWxmIHRvIGRyaW5rIHZlcnkgZ2VuZXJvdXNseSwgc28gdGhhdCBoZSBvZnRlbiB0YXJyaWVkIGF0IGhpcyB3aW5lIHRpbGwgZWFybHkgbW9ybmluZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGZyaWVuZHMgdXNlZCB0byBzYXkgdGhhdCB0aGUgY2F1c2Ugb2YgdGhpcyB3YXMgaGlzIGNpdmljIGFuZCBwdWJsaWMgYWN0aXZpdGllczsgaGUgd2FzIG9jY3VwaWVkIHdpdGggdGhlc2UgYWxsIGRheSwgYW5kIHNvIHByZXZlbnRlZCBmcm9tIGxpdGVyYXJ5IHB1cnN1aXRzLCB3aGVyZWZvcmUgaGUgd291bGQgaG9sZCBpbnRlcmNvdXJzZSB3aXRoIHRoZSBwaGlsb3NvcGhlcnMgYXQgbmlnaHQgYW5kIG92ZXIgdGhlIGN1cHMuIEZvciB0aGlzIHJlYXNvbiwgdG9vLCB3aGVuIGEgY2VydGFpbiBNZW1taXVzIHJlbWFya2VkIGluIGNvbXBhbnkgdGhhdCBDYXRvIHNwZW50IGhpcyBlbnRpcmUgbmlnaHRzIGluIGRyaW5raW5nLCBDaWNlcm8gYW5zd2VyZWQgaGltIGJ5IHNheWluZzogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IHNob3VsZHN0IGFkZCB0aGF0IGhlIHNwZW5kcyBoaXMgZW50aXJlIGRheXMgaW4gdGhyb3dpbmcgZGljZS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBzdXBwZXJzLCBoZSB3b3VsZCB0aHJvdyBkaWNlIGZvciB0aGUgY2hvaWNlIG9mIHBvcnRpb25zOyBhbmQgaWYgaGUgbG9zdCwgYW5kIGhpcyBmcmllbmRzIGJhZGUgaGltIGNob29zZSBmaXJzdCwgaGUgd291bGQgc2F5IGl0IHdhcyBub3QgcmlnaHQsIHNpbmNlIFZlbnVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgaGlnaGVzdCB0aHJvdyBhdCBkaWNlIHdhcyBjYWxsZWQgdGhlIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VmVudXMtdGhyb3cuPC9xPgogICAgICAgICAgICA8L25vdGU+IHdhcyB1bndpbGxpbmcuIEF0IGZpcnN0LCBhbHNvLCBoZSB3b3VsZCBkcmluayBvbmNlIGFmdGVyIHN1cHBlciBhbmQgdGhlbiBsZWF2ZSB0aGUgdGFibGU7IGJ1dCBhcyB0aW1lIHdlbnQgb24gaGUgd291bGQgYWxsb3cgaGltc2VsZiB0byBkcmluayB2ZXJ5IGdlbmVyb3VzbHksIHNvIHRoYXQgaGUgb2Z0ZW4gdGFycmllZCBhdCBoaXMgd2luZSB0aWxsIGVhcmx5IG1vcm5pbmcuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5WZW51cy10aHJvdy48L3E+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBmcmllbmRzIHVzZWQgdG8gc2F5IHRoYXQgdGhlIGNhdXNlIG9mIHRoaXMgd2FzIGhpcyBjaXZpYyBhbmQgcHVibGljIGFjdGl2aXRpZXM7IGhlIHdhcyBvY2N1cGllZCB3aXRoIHRoZXNlIGFsbCBkYXksIGFuZCBzbyBwcmV2ZW50ZWQgZnJvbSBsaXRlcmFyeSBwdXJzdWl0cywgd2hlcmVmb3JlIGhlIHdvdWxkIGhvbGQgaW50ZXJjb3Vyc2Ugd2l0aCB0aGUgcGhpbG9zb3BoZXJzIGF0IG5pZ2h0IGFuZCBvdmVyIHRoZSBjdXBzLiBGb3IgdGhpcyByZWFzb24sIHRvbywgd2hlbiBhIGNlcnRhaW4gTWVtbWl1cyByZW1hcmtlZCBpbiBjb21wYW55IHRoYXQgQ2F0byBzcGVudCBoaXMgZW50aXJlIG5pZ2h0cyBpbiBkcmlua2luZywgQ2ljZXJvIGFuc3dlcmVkIGhpbSBieSBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IHNob3VsZHN0IGFkZCB0aGF0IGhlIHNwZW5kcyBoaXMgZW50aXJlIGRheXMgaW4gdGhyb3dpbmcgZGljZS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCwgaW4gZ2VuZXJhbCwgQ2F0byB0aG91Z2h0IGhlIG91Z2h0IHRvIHRha2UgYSBjb3Vyc2UgZGlyZWN0bHkgb3Bwb3NlZCB0byB0aGUgbGlmZSBhbmQgcHJhY3RpY2VzIG9mIHRoZSB0aW1lLCBmZWVsaW5nIHRoYXQgdGhlc2Ugd2VyZSBiYWQgYW5kIGluIG5lZWQgb2YgZ3JlYXQgY2hhbmdlLiBGb3IgaW5zdGFuY2UsIHdoZW4gaGUgc2F3IHRoYXQgYSBwdXJwbGUgd2hpY2ggd2FzIGV4Y2Vzc2l2ZWx5IHJlZCBhbmQgdml2aWQgd2FzIG11Y2ggaW4gdm9ndWUsIGhlIGhpbXNlbGYgd291bGQgd2VhciB0aGUgZGFyayBzaGFkZS4gQWdhaW4sIGhlIHdvdWxkIG9mdGVuIGdvIG91dCBpbnRvIHRoZSBzdHJlZXRzIGFmdGVyIGJyZWFrZmFzdCB3aXRob3V0IHNob2VzIG9yIHR1bmljLiBIZSB3YXMgbm90IGh1bnRpbmcgZm9yIG5vdG9yaWV0eSBieSB0aGlzIHN0cmFuZ2UgcHJhY3RpY2UsIGJ1dCBhY2N1c3RvbWluZyBoaW1zZWxmIHRvIGJlIGFzaGFtZWQgb25seSBvZiB3aGF0IHdhcyByZWFsbHkgc2hhbWVmdWwsIGFuZCB0byBpZ25vcmUgbWVuJ3MgbG93IG9waW5pb24gb2Ygb3RoZXIgdGhpbmdzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGFuIGluaGVyaXRhbmNlIHdvcnRoIGEgaHVuZHJlZCB0YWxlbnRzIGZlbGwgdG8gaGltIGZyb20gaGlzIGNvdXNpbiBDYXRvLCBoZSB0dXJuZWQgaXQgaW50byBtb25leSwgYW5kIGFsbG93ZWQgYW55IGZyaWVuZCB3aG8gbmVlZGVkIGl0IHRvIGhhdmUgdGhlIHVzZSBvZiBpdCB3aXRob3V0IGludGVyZXN0LiBBbmQgc29tZSBvZiBoaXMgZnJpZW5kcyBhY3R1YWxseSBwbGVkZ2VkIHRvIHRoZSBwdWJsaWMgdHJlYXN1cnkgYm90aCBsYW5kcyBhbmQgc2xhdmVzIHdoaWNoIGhlIG9mZmVyZWQgZm9yIHRoaXMgcHVycG9zZSBoaW1zZWxmLCBhbmQgbWFkZSBnb29kIGhpcyBvZmZlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCwgaW4gZ2VuZXJhbCwgQ2F0byB0aG91Z2h0IGhlIG91Z2h0IHRvIHRha2UgYSBjb3Vyc2UgZGlyZWN0bHkgb3Bwb3NlZCB0byB0aGUgbGlmZSBhbmQgcHJhY3RpY2VzIG9mIHRoZSB0aW1lLCBmZWVsaW5nIHRoYXQgdGhlc2Ugd2VyZSBiYWQgYW5kIGluIG5lZWQgb2YgZ3JlYXQgY2hhbmdlLiBGb3IgaW5zdGFuY2UsIHdoZW4gaGUgc2F3IHRoYXQgYSBwdXJwbGUgd2hpY2ggd2FzIGV4Y2Vzc2l2ZWx5IHJlZCBhbmQgdml2aWQgd2FzIG11Y2ggaW4gdm9ndWUsIGhlIGhpbXNlbGYgd291bGQgd2VhciB0aGUgZGFyayBzaGFkZS4gQWdhaW4sIGhlIHdvdWxkIG9mdGVuIGdvIG91dCBpbnRvIHRoZSBzdHJlZXRzIGFmdGVyIGJyZWFrZmFzdCB3aXRob3V0IHNob2VzIG9yIHR1bmljLiBIZSB3YXMgbm90IGh1bnRpbmcgZm9yIG5vdG9yaWV0eSBieSB0aGlzIHN0cmFuZ2UgcHJhY3RpY2UsIGJ1dCBhY2N1c3RvbWluZyBoaW1zZWxmIHRvIGJlIGFzaGFtZWQgb25seSBvZiB3aGF0IHdhcyByZWFsbHkgc2hhbWVmdWwsIGFuZCB0byBpZ25vcmUgbWVuJ3MgbG93IG9waW5pb24gb2Ygb3RoZXIgdGhpbmdzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gYW4gaW5oZXJpdGFuY2Ugd29ydGggYSBodW5kcmVkIHRhbGVudHMgZmVsbCB0byBoaW0gZnJvbSBoaXMgY291c2luIENhdG8sIGhlIHR1cm5lZCBpdCBpbnRvIG1vbmV5LCBhbmQgYWxsb3dlZCBhbnkgZnJpZW5kIHdobyBuZWVkZWQgaXQgdG8gaGF2ZSB0aGUgdXNlIG9mIGl0IHdpdGhvdXQgaW50ZXJlc3QuIEFuZCBzb21lIG9mIGhpcyBmcmllbmRzIGFjdHVhbGx5IHBsZWRnZWQgdG8gdGhlIHB1YmxpYyB0cmVhc3VyeSBib3RoIGxhbmRzIGFuZCBzbGF2ZXMgd2hpY2ggaGUgb2ZmZXJlZCBmb3IgdGhpcyBwdXJwb3NlIGhpbXNlbGYsIGFuZCBtYWRlIGdvb2QgaGlzIG9mZmVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgdGhvdWdodCB0aGF0IGhlIHdhcyBvbGQgZW5vdWdoIHRvIG1hcnJ5LOKAlGFuZCB1cCB0byB0aGF0IHRpbWUgaGUgaGFkIGNvbnNvcnRlZCB3aXRoIG5vIHdvbWFuLOKAlGhlIGVuZ2FnZWQgaGltc2VsZiB0byBMZXBpZGEsIHdobyBoYWQgZm9ybWVybHkgYmVlbiBiZXRyb3RoZWQgdG8gTWV0ZWxsdXMgU2NpcGlvLCBidXQgd2FzIG5vdyBmcmVlLCBzaW5jZSBTY2lwaW8gaGFkIHJlamVjdGVkIGhlciBhbmQgdGhlIGJldHJvdGhhbCBoYWQgYmVlbiBicm9rZW4uIEhvd2V2ZXIsIGJlZm9yZSB0aGUgbWFycmlhZ2UgU2NpcGlvIGNoYW5nZWQgaGlzIG1pbmQgYWdhaW4sIGFuZCBieSBkaW50IG9mIGV2ZXJ5IGVmZm9ydCBnb3QgdGhlIG1haWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gd2FzIGdyZWF0bHkgZXhhc3BlcmF0ZWQgYW5kIGluZmxhbWVkIGJ5IHRoaXMsIGFuZCBhdHRlbXB0ZWQgdG8gZ28gdG8gbGF3IGFib3V0IGl0OyBidXQgaGlzIGZyaWVuZHMgcHJldmVudGVkIHRoaXMsIGFuZCBzbywgaW4gaGlzIHJhZ2UgYW5kIHlvdXRoZnVsIGZlcnZvdXIsIGhlIGJldG9vayBoaW1zZWxmIHRvIGlhbWJpYyB2ZXJzZSwgYW5kIGhlYXBlZCBtdWNoIHNjb3JuZnVsIGFidXNlIHVwb24gU2NpcGlvLCBhZG9wdGluZyB0aGUgYml0dGVyIHRvbmUgb2YgQXJjaGlsb2NodXMsIGJ1dCBhdm9pZGluZyBoaXMgbGljZW5zZSBhbmQgcHVlcmlsaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgbWFycmllZCBBdGlsaWEsIGEgZGF1Z2h0ZXIgb2YgU2VycmFudXMuIFNoZSB3YXMgdGhlIGZpcnN0IHdvbWFuIHdpdGggd2hvbSBoZSBjb25zb3J0ZWQsIGJ1dCBub3QgdGhlIG9ubHkgb25lLCBhcyB3YXMgdHJ1ZSBvZiBMYWVsaXVzLCB0aGUgZnJpZW5kIG9mIFNjaXBpbyBBZnJpY2FudXM7IExhZWxpdXMsIGluZGVlZCwgd2FzIG1vcmUgZm9ydHVuYXRlLCBzaW5jZSBpbiB0aGUgY291cnNlIG9mIGhpcyBsb25nIGxpZmUgaGUga25ldyBidXQgb25lIHdvbWFuLCB0aGUgd2lmZSBvZiBoaXMgeW91dGguCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIHRob3VnaHQgdGhhdCBoZSB3YXMgb2xkIGVub3VnaCB0byBtYXJyeSzigJRhbmQgdXAgdG8gdGhhdCB0aW1lIGhlIGhhZCBjb25zb3J0ZWQgd2l0aCBubyB3b21hbizigJRoZSBlbmdhZ2VkIGhpbXNlbGYgdG8gTGVwaWRhLCB3aG8gaGFkIGZvcm1lcmx5IGJlZW4gYmV0cm90aGVkIHRvIE1ldGVsbHVzIFNjaXBpbywgYnV0IHdhcyBub3cgZnJlZSwgc2luY2UgU2NpcGlvIGhhZCByZWplY3RlZCBoZXIgYW5kIHRoZSBiZXRyb3RoYWwgaGFkIGJlZW4gYnJva2VuLiBIb3dldmVyLCBiZWZvcmUgdGhlIG1hcnJpYWdlIFNjaXBpbyBjaGFuZ2VkIGhpcyBtaW5kIGFnYWluLCBhbmQgYnkgZGludCBvZiBldmVyeSBlZmZvcnQgZ290IHRoZSBtYWlkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gd2FzIGdyZWF0bHkgZXhhc3BlcmF0ZWQgYW5kIGluZmxhbWVkIGJ5IHRoaXMsIGFuZCBhdHRlbXB0ZWQgdG8gZ28gdG8gbGF3IGFib3V0IGl0OyBidXQgaGlzIGZyaWVuZHMgcHJldmVudGVkIHRoaXMsIGFuZCBzbywgaW4gaGlzIHJhZ2UgYW5kIHlvdXRoZnVsIGZlcnZvdXIsIGhlIGJldG9vayBoaW1zZWxmIHRvIGlhbWJpYyB2ZXJzZSwgYW5kIGhlYXBlZCBtdWNoIHNjb3JuZnVsIGFidXNlIHVwb24gU2NpcGlvLCBhZG9wdGluZyB0aGUgYml0dGVyIHRvbmUgb2YgQXJjaGlsb2NodXMsIGJ1dCBhdm9pZGluZyBoaXMgbGljZW5zZSBhbmQgcHVlcmlsaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBtYXJyaWVkIEF0aWxpYSwgYSBkYXVnaHRlciBvZiBTZXJyYW51cy4gU2hlIHdhcyB0aGUgZmlyc3Qgd29tYW4gd2l0aCB3aG9tIGhlIGNvbnNvcnRlZCwgYnV0IG5vdCB0aGUgb25seSBvbmUsIGFzIHdhcyB0cnVlIG9mIExhZWxpdXMsIHRoZSBmcmllbmQgb2YgU2NpcGlvIEFmcmljYW51czsgTGFlbGl1cywgaW5kZWVkLCB3YXMgbW9yZSBmb3J0dW5hdGUsIHNpbmNlIGluIHRoZSBjb3Vyc2Ugb2YgaGlzIGxvbmcgbGlmZSBoZSBrbmV3IGJ1dCBvbmUgd29tYW4sIHRoZSB3aWZlIG9mIGhpcyB5b3V0aC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBzZXJ2aWxlIHdhciB3YXMgaW4gcHJvZ3Jlc3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNzMtNzEgQi5DLiAgQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DcmFzc3VzPC90aXRsZT4sIHZpaWkuIGZmPC9iaWJsPi48L25vdGU+IHdoaWNoIHdhcyBjYWxsZWQgdGhlIHdhciBvZiBTcGFydGFjdXMsIEdlbGxpdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5MdWNpdXMgR2VsbGl1cyBQdWJsaWNvbGEsIGNvbnN1bCBpbiA3MiBCLkMuIHdpdGggQ29ybmVsaXVzIExlbnR1bHVzIENsb2RpYW51cy4gQm90aCBjb25zdWxzIHdlcmUgZGVmZWF0ZWQgYnkgU3BhcnRhY3VzLjwvbm90ZT4gd2FzIGNvbW1hbmRlciwgd2hpbGUgQ2F0byB0b29rIHBhcnQgaW4gaGlzIGNhbXBhaWduIGFzIGEgdm9sdW50ZWVyLCBmb3IgdGhlIHNha2Ugb2YgaGlzIGJyb3RoZXI7IGZvciBoaXMgYnJvdGhlciBDYWVwaW8gd2FzIGEgbWlsaXRhcnkgdHJpYnVuZS4gSGVyZSBoZSBoYWQgbm90IHRoZSBvcHBvcnR1bml0eSB0byBlbXBsb3kgYXMgbXVjaCBhcyBoZSB3aXNoZWQgaGlzIHplYWwgYW5kIGRpc2NpcGxpbmUgaW4gdmlydHVlLCBiZWNhdXNlIHRoZSB3YXIgd2FzIG5vdCB3ZWxsIGNvbmR1Y3RlZDsgYnV0IG5vdHdpdGhzdGFuZGluZywgYW1pZHN0IHRoZSBncmVhdCBlZmZlbWluYWN5IGFuZCBsdXh1cnkgb2YgdGhvc2Ugd2hvIHRvb2sgcGFydCBpbiB0aGF0IGNhbXBhaWduLCBoZSBkaXNwbGF5ZWQgc3VjaCBnb29kIGRpc2NpcGxpbmUsIHNlbGYtY29udHJvbCwgY291cmFnZSBpbiBhbGwgZW1lcmdlbmNpZXMsIGFuZCBzYWdhY2l0eSwgdGhhdCBtZW4gdGhvdWdodCBoaW0gbm90IG9uZSB3aGl0IGluZmVyaW9yIHRvIHRoZSBlbGRlciBDYXRvLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgR2VsbGl1cyBhc3NpZ25lZCB0byBoaW0gcHJpemVzIG9mIHZhbG91ciBhbmQgZGlzdGluZ3Vpc2hlZCBob25vdXJzOyBidXQgQ2F0byB3b3VsZCBub3QgdGFrZSB0aGVtIG5vciBhbGxvdyB0aGVtLCBkZWNsYXJpbmcgdGhhdCBoZSBoYWQgZG9uZSBub3RoaW5nIHdvcnRoeSBvZiBob25vdXJzLiBBbmQgc28sIGluIGNvbnNlcXVlbmNlIG9mIHRoaXMsIGhlIHdhcyB0aG91Z2h0IHRvIGJlIGEgc3RyYW5nZSBjcmVhdHVyZS4gRm9yIGluc3RhbmNlLCBhIGxhdyB3YXMgcGFzc2VkIGZvcmJpZGRpbmcgY2FuZGlkYXRlcyBmb3Igb2ZmaWNlIHRvIGJlIGF0dGVuZGVkIGJ5IG5vbWVuY2xhdG9ycyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdHRlbmRhbnRzIHdob3NlIGR1dHkgaXQgd2FzIHRvIHRlbGwgdGhlIGNhbmRpZGF0ZSB0aGUgbmFtZXMgb2YgdGhvc2Ugd2hvbSBoZSB3YXMgZ29pbmcgdG8gbWVldCwgdGhhdCBoZSBtaWdodCBhcHBlYXIgdG8gYmUgYWNxdWFpbnRlZCB3aXRoIHRoZW0uPC9ub3RlPiBhbmQgaW4gaGlzIGNhbnZhc3MgZm9yIHRoZSBtaWxpdGFyeSB0cmlidW5lLXNoaXAgaGUgd2FzIHRoZSBvbmx5IG9uZSB3aG8gb2JleWVkIHRoZSBsYXcuIEhlIG1hZGUgaXQgaGlzIGJ1c2luZXNzIHRvIHNhbHV0ZSBhbmQgYWRkcmVzcyB3aXRob3V0IGhlbHAgZnJvbSBvdGhlcnMgdGhvc2Ugd2hvIG1ldCBoaW0gb24gaGlzIHJvdW5kcywgYnV0IGhlIGRpZCBub3QgYXZvaWQgZ2l2aW5nIG9mZmVuY2UgZXZlbiB0byB0aG9zZSB3aG8gcHJhaXNlZCBoaXMgY291cnNlOyBmb3IgdGhlIG1vcmUgY2xlYXJseSB0aGV5IHNhdyB0aGUgcmVjdGl0dWRlIG9mIGhpcyBwcmFjdGljZSwgdGhlIG1vcmUgZGlzdHJlc3NlZCB3ZXJlIHRoZXkgYXQgdGhlIGRpZmZpY3VsdHkgb2YgaW1pdGF0aW5nIGl0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBzZXJ2aWxlIHdhciB3YXMgaW4gcHJvZ3Jlc3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA3My03MSBCLkMuICBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiA4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIHZpaWkuIGZmPC9iaWJsPi48L25vdGU+IHdoaWNoIHdhcyBjYWxsZWQgdGhlIHdhciBvZiBTcGFydGFjdXMsIEdlbGxpdXM8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDcmFzcy4gOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCB2aWlpLiBmZjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCB2aWlpLiBmZjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+THVjaXVzIEdlbGxpdXMgUHVibGljb2xhLCBjb25zdWwgaW4gNzIgQi5DLiB3aXRoIENvcm5lbGl1cyBMZW50dWx1cyBDbG9kaWFudXMuIEJvdGggY29uc3VscyB3ZXJlIGRlZmVhdGVkIGJ5IFNwYXJ0YWN1cy48L25vdGU+IHdhcyBjb21tYW5kZXIsIHdoaWxlIENhdG8gdG9vayBwYXJ0IGluIGhpcyBjYW1wYWlnbiBhcyBhIHZvbHVudGVlciwgZm9yIHRoZSBzYWtlIG9mIGhpcyBicm90aGVyOyBmb3IgaGlzIGJyb3RoZXIgQ2FlcGlvIHdhcyBhIG1pbGl0YXJ5IHRyaWJ1bmUuIEhlcmUgaGUgaGFkIG5vdCB0aGUgb3Bwb3J0dW5pdHkgdG8gZW1wbG95IGFzIG11Y2ggYXMgaGUgd2lzaGVkIGhpcyB6ZWFsIGFuZCBkaXNjaXBsaW5lIGluIHZpcnR1ZSwgYmVjYXVzZSB0aGUgd2FyIHdhcyBub3Qgd2VsbCBjb25kdWN0ZWQ7IGJ1dCBub3R3aXRoc3RhbmRpbmcsIGFtaWRzdCB0aGUgZ3JlYXQgZWZmZW1pbmFjeSBhbmQgbHV4dXJ5IG9mIHRob3NlIHdobyB0b29rIHBhcnQgaW4gdGhhdCBjYW1wYWlnbiwgaGUgZGlzcGxheWVkIHN1Y2ggZ29vZCBkaXNjaXBsaW5lLCBzZWxmLWNvbnRyb2wsIGNvdXJhZ2UgaW4gYWxsIGVtZXJnZW5jaWVzLCBhbmQgc2FnYWNpdHksIHRoYXQgbWVuIHRob3VnaHQgaGltIG5vdCBvbmUgd2hpdCBpbmZlcmlvciB0byB0aGUgZWxkZXIgQ2F0by4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBHZWxsaXVzIGFzc2lnbmVkIHRvIGhpbSBwcml6ZXMgb2YgdmFsb3VyIGFuZCBkaXN0aW5ndWlzaGVkIGhvbm91cnM7IGJ1dCBDYXRvIHdvdWxkIG5vdCB0YWtlIHRoZW0gbm9yIGFsbG93IHRoZW0sIGRlY2xhcmluZyB0aGF0IGhlIGhhZCBkb25lIG5vdGhpbmcgd29ydGh5IG9mIGhvbm91cnMuIEFuZCBzbywgaW4gY29uc2VxdWVuY2Ugb2YgdGhpcywgaGUgd2FzIHRob3VnaHQgdG8gYmUgYSBzdHJhbmdlIGNyZWF0dXJlLiBGb3IgaW5zdGFuY2UsIGEgbGF3IHdhcyBwYXNzZWQgZm9yYmlkZGluZyBjYW5kaWRhdGVzIGZvciBvZmZpY2UgdG8gYmUgYXR0ZW5kZWQgYnkgbm9tZW5jbGF0b3JzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXR0ZW5kYW50cyB3aG9zZSBkdXR5IGl0IHdhcyB0byB0ZWxsIHRoZSBjYW5kaWRhdGUgdGhlIG5hbWVzIG9mIHRob3NlIHdob20gaGUgd2FzIGdvaW5nIHRvIG1lZXQsIHRoYXQgaGUgbWlnaHQgYXBwZWFyIHRvIGJlIGFjcXVhaW50ZWQgd2l0aCB0aGVtLjwvbm90ZT4gYW5kIGluIGhpcyBjYW52YXNzIGZvciB0aGUgbWlsaXRhcnkgdHJpYnVuZS1zaGlwIGhlIHdhcyB0aGUgb25seSBvbmUgd2hvIG9iZXllZCB0aGUgbGF3LiBIZSBtYWRlIGl0IGhpcyBidXNpbmVzcyB0byBzYWx1dGUgYW5kIGFkZHJlc3Mgd2l0aG91dCBoZWxwIGZyb20gb3RoZXJzIHRob3NlIHdobyBtZXQgaGltIG9uIGhpcyByb3VuZHMsIGJ1dCBoZSBkaWQgbm90IGF2b2lkIGdpdmluZyBvZmZlbmNlIGV2ZW4gdG8gdGhvc2Ugd2hvIHByYWlzZWQgaGlzIGNvdXJzZTsgZm9yIHRoZSBtb3JlIGNsZWFybHkgdGhleSBzYXcgdGhlIHJlY3RpdHVkZSBvZiBoaXMgcHJhY3RpY2UsIHRoZSBtb3JlIGRpc3RyZXNzZWQgd2VyZSB0aGV5IGF0IHRoZSBkaWZmaWN1bHR5IG9mIGltaXRhdGluZyBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcHBvaW50ZWQgbWlsaXRhcnkgdHJpYnVuZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BYm91dCA2NyBCLkMuPC9ub3RlPiBoZSB3YXMgc2VudCB0byBNYWNlZG9uaWEsIHRvIHNlcnZlIHVuZGVyIFJ1YnJpdXMgdGhlIHByYWV0b3IuIEF0IHRoaXMgdGltZSwgd2UgYXJlIHRvbGQsIGhpcyB3aWZlIGJlaW5nIGZ1bGwgb2YgZ3JpZWYgYW5kIGluIHRlYXJzLCBvbmUgb2YgQ2F0bydzIGZyaWVuZHMsIE11bmF0aXVzLCBzYWlkIHRvIGhlcjogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UYWtlIGhlYXJ0LCBBdGlsaWE7IEkgd2lsbCB3YXRjaCBvdmVyIHRoeSBodXNiYW5kLjwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNlcnRhaW5seSBoZSB3aWxsLDwvcT4gY3JpZWQgQ2F0bywgYW5kIGFmdGVyIHRoZXkgaGFkIGdvbmUgYSBkYXkncyBqb3VybmV5IG9uIHRoZWlyIHdheSwgaW1tZWRpYXRlbHkgYWZ0ZXIgc3VwcGVyLCBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNvbWUsIE11bmF0aXVzLCBzZWUgdGhhdCB5b3Uga2VlcCB5b3VyIHByb21pc2UgdG8gQXRpbGlhLCBhbmQgZm9yc2FrZSBtZSBuZWl0aGVyIGJ5IGRheSBub3IgYnkgbmlnaHQuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgZ2F2ZSBvcmRlcnMgdGhhdCB0d28gY291Y2hlcyBiZSBwbGFjZWQgaW4gdGhlIHNhbWUgY2hhbWJlciBmb3IgdGhlbSwgYW5kIHRodXMgTXVuYXRpdXMgYWx3YXlzIHNsZXB04oCUYW5kIHRoYXQgd2FzIHRoZSBqb2tl4oCUd2F0Y2hlZCBvdmVyIGJ5IENhdG8uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcHBvaW50ZWQgbWlsaXRhcnkgdHJpYnVuZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFib3V0IDY3IEIuQy48L25vdGU+IGhlIHdhcyBzZW50IHRvIE1hY2Vkb25pYSwgdG8gc2VydmUgdW5kZXIgUnVicml1cyB0aGUgcHJhZXRvci4gQXQgdGhpcyB0aW1lLCB3ZSBhcmUgdG9sZCwgaGlzIHdpZmUgYmVpbmcgZnVsbCBvZiBncmllZiBhbmQgaW4gdGVhcnMsIG9uZSBvZiBDYXRvJ3MgZnJpZW5kcywgTXVuYXRpdXMsIHNhaWQgdG8gaGVyOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGFrZSBoZWFydCwgQXRpbGlhOyBJIHdpbGwgd2F0Y2ggb3ZlciB0aHkgaHVzYmFuZC48L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNlcnRhaW5seSBoZSB3aWxsLDwvcT4gY3JpZWQgQ2F0bywgYW5kIGFmdGVyIHRoZXkgaGFkIGdvbmUgYSBkYXkncyBqb3VybmV5IG9uIHRoZWlyIHdheSwgaW1tZWRpYXRlbHkgYWZ0ZXIgc3VwcGVyLCBoZSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q29tZSwgTXVuYXRpdXMsIHNlZSB0aGF0IHlvdSBrZWVwIHlvdXIgcHJvbWlzZSB0byBBdGlsaWEsIGFuZCBmb3JzYWtlIG1lIG5laXRoZXIgYnkgZGF5IG5vciBieSBuaWdodC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgZ2F2ZSBvcmRlcnMgdGhhdCB0d28gY291Y2hlcyBiZSBwbGFjZWQgaW4gdGhlIHNhbWUgY2hhbWJlciBmb3IgdGhlbSwgYW5kIHRodXMgTXVuYXRpdXMgYWx3YXlzIHNsZXB04oCUYW5kIHRoYXQgd2FzIHRoZSBqb2tl4oCUd2F0Y2hlZCBvdmVyIGJ5IENhdG8uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgaGFkIGluIGhpcyBmb2xsb3dpbmcgZmlmdGVlbiBzbGF2ZXMsIHR3byBmcmVlZG1lbiwgYW5kIGZvdXIgZnJpZW5kcy4gVGhlc2Ugcm9kZSBvbiBob3JzZXMsIHdoaWxlIGhlIGhpbXNlbGYgYWx3YXlzIHdlbnQgYS1mb290OyBhbmQgeWV0IGhlIHdvdWxkIGpvaW4gZWFjaCBvZiB0aGVtIGluIHR1cm4gYW5kIGNvbnZlcnNlIHdpdGggaGltLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDUuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB2LiAzPC9iaWJsPi48L25vdGU+IEFuZCB3aGVuIGhlIHJlYWNoZWQgdGhlIGNhbXAsIHdoZXJlIHRoZXJlIHdlcmUgc2V2ZXJhbCBsZWdpb25zLCBhbmQgd2FzIGFwcG9pbnRlZCB0byB0aGUgY29tbWFuZCBvZiBvbmUgb2YgdGhlbSBieSB0aGUgZ2VuZXJhbCwgaGUgdGhvdWdodCBpdCBhIHRyaWZsaW5nIGFuZCB1c2VsZXNzIHRhc2sgdG8gbWFrZSBhIGRpc3BsYXkgb2YgaGlzIG93biB2aXJ0dWUsIHdoaWNoIHdhcyB0aGF0IG9mIGEgc2luZ2xlIG1hbiwgYnV0IHdhcyBhbWJpdGlvdXMgYWJvdmUgYWxsIHRoaW5ncyB0byBtYWtlIHRoZSBtZW4gdW5kZXIgaGlzIGNvbW1hbmQgbGlrZSB1bnRvIGhpbXNlbGYuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgZGlkIG5vdCwgaG93ZXZlciwgZGl2ZXN0IGhpcyBwb3dlciBvZiB0aGUgZWxlbWVudCB3aGljaCBpbnNwaXJlcyBmZWFyLCBidXQgY2FsbGVkIGluIHRoZSBhaWQgb2YgcmVhc29uOyB3aXRoIGl0cyBoZWxwIGhlIHBlcnN1YWRlZCBhbmQgdGF1Z2h0IGhpcyBtZW4gYWJvdXQgZXZlcnl0aGluZywgd2hpbGUgcmV3YXJkcyBhbmQgcHVuaXNobWVudHMgZm9sbG93ZWQgdGhlaXIgYWN0cy4gQ29uc2VxdWVudGx5LCBpdCB3ZXJlIGhhcmQgdG8gc2F5IHdoZXRoZXIgaGUgbWFkZSBoaXMgbWVuIG1vcmUgcGVhY2VmdWwgb3IgbW9yZSB3YXJsaWtlLCBtb3JlIHplYWxvdXMgb3IgbW9yZSBqdXN0OyB0byBzdWNoIGEgZGVncmVlIGRpZCB0aGV5IHNob3cgdGhlbXNlbHZlcyB0ZXJyaWJsZSB0byB0aGVpciBlbmVtaWVzIGJ1dCBnZW50bGUgdG8gdGhlaXIgYWxsaWVzLCB3aXRob3V0IGNvdXJhZ2UgdG8gZG8gd3JvbmcgYnV0IGFtYml0aW91cyB0byB3aW4gcHJhaXNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgdGhhdCB0byB3aGljaCBDYXRvIGdhdmUgbGVhc3QgdGhvdWdodCB3YXMgaGlzIGluIGdyZWF0ZXN0IG1lYXN1cmUsIG5hbWVseSwgZXN0ZWVtLCBmYXZvdXIsIHN1cnBhc3NpbmcgaG9ub3VyLCBhbmQga2luZG5lc3MsIGZyb20gaGlzIHNvbGRpZXJzLiBGb3IgaGUgd2lsbGluZ2x5IHNoYXJlZCB0aGUgdGFza3Mgd2hpY2ggaGUgaW1wb3NlZCB1cG9uIG90aGVycywgYW5kIGluIGhpcyBkcmVzcywgd2F5IG9mIGxpdmluZywgYW5kIGNvbmR1Y3Qgb24gdGhlIG1hcmNoLCBtYWRlIGhpbXNlbGYgbW9yZSBsaWtlIGEgc29sZGllciB0aGFuIGEgY29tbWFuZGVyLCB3aGlsZSBpbiBjaGFyYWN0ZXIsIGRpZ25pdHkgb2YgcHVycG9zZSwgYW5kIGVsb3F1ZW5jZSwgaGUgc3VycGFzc2VkIGFsbCB0aG9zZSB3aG8gYm9yZSB0aGUgdGl0bGVzIG9mIDxmb3JlaWduIGxhbmc9ImxhIj5JbXBlcmF0b3I8L2ZvcmVpZ24+IGFuZCBHZW5lcmFsLiBJbiB0aGlzIHdheSwgd2l0aG91dCBrbm93aW5nIGl0LCBoZSBwcm9kdWNlZCBpbiBoaXMgbWVuIGF0IHRoZSBzYW1lIHRpbWUgdGhlIGZlZWxpbmcgb2YgZ29vZCB3aWxsIHRvd2FyZHMgaGltc2VsZi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGEgZ2VudWluZSBkZXNpcmUgdG8gYXR0YWluIHZpcnR1ZSBhcmlzZXMgb25seSBpbiBjb25zZXF1ZW5jZSBvZiBwZXJmZWN0IGdvb2Qgd2lsbCBhbmQgcmVzcGVjdCBmb3IgaGltIHdobyBkaXNwbGF5cyB2aXJ0dWU7IHRob3NlLCBvbiB0aGUgb3RoZXIgaGFuZCwgd2hvIHByYWlzZSBnb29kIG1lbiB3aXRob3V0IGxvdmluZyB0aGVtIG1heSByZXZlcmUgdGhlaXIgcmVwdXRhdGlvbiwgYnV0IHRoZXkgZG8gbm90IGFkbWlyZSB0aGVpciB2aXJ0dWUgb3IgaW1pdGF0ZSBpdC4KCQkJPC9wPgogICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiA1LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdi4gMzwvYmlibD4uPC9ub3RlPiBBbmQgd2hlbiBoZSByZWFjaGVkIHRoZSBjYW1wLCB3aGVyZSB0aGVyZSB3ZXJlIHNldmVyYWwgbGVnaW9ucywgYW5kIHdhcyBhcHBvaW50ZWQgdG8gdGhlIGNvbW1hbmQgb2Ygb25lIG9mIHRoZW0gYnkgdGhlIGdlbmVyYWwsIGhlIHRob3VnaHQgaXQgYSB0cmlmbGluZyBhbmQgdXNlbGVzcyB0YXNrIHRvIG1ha2UgYSBkaXNwbGF5IG9mIGhpcyBvd24gdmlydHVlLCB3aGljaCB3YXMgdGhhdCBvZiBhIHNpbmdsZSBtYW4sIGJ1dCB3YXMgYW1iaXRpb3VzIGFib3ZlIGFsbCB0aGluZ3MgdG8gbWFrZSB0aGUgbWVuIHVuZGVyIGhpcyBjb21tYW5kIGxpa2UgdW50byBoaW1zZWxmLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDUuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB2LiAzPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGRpZCBub3QsIGhvd2V2ZXIsIGRpdmVzdCBoaXMgcG93ZXIgb2YgdGhlIGVsZW1lbnQgd2hpY2ggaW5zcGlyZXMgZmVhciwgYnV0IGNhbGxlZCBpbiB0aGUgYWlkIG9mIHJlYXNvbjsgd2l0aCBpdHMgaGVscCBoZSBwZXJzdWFkZWQgYW5kIHRhdWdodCBoaXMgbWVuIGFib3V0IGV2ZXJ5dGhpbmcsIHdoaWxlIHJld2FyZHMgYW5kIHB1bmlzaG1lbnRzIGZvbGxvd2VkIHRoZWlyIGFjdHMuIENvbnNlcXVlbnRseSwgaXQgd2VyZSBoYXJkIHRvIHNheSB3aGV0aGVyIGhlIG1hZGUgaGlzIG1lbiBtb3JlIHBlYWNlZnVsIG9yIG1vcmUgd2FybGlrZSwgbW9yZSB6ZWFsb3VzIG9yIG1vcmUganVzdDsgdG8gc3VjaCBhIGRlZ3JlZSBkaWQgdGhleSBzaG93IHRoZW1zZWx2ZXMgdGVycmlibGUgdG8gdGhlaXIgZW5lbWllcyBidXQgZ2VudGxlIHRvIHRoZWlyIGFsbGllcywgd2l0aG91dCBjb3VyYWdlIHRvIGRvIHdyb25nIGJ1dCBhbWJpdGlvdXMgdG8gd2luIHByYWlzZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGF0IHRvIHdoaWNoIENhdG8gZ2F2ZSBsZWFzdCB0aG91Z2h0IHdhcyBoaXMgaW4gZ3JlYXRlc3QgbWVhc3VyZSwgbmFtZWx5LCBlc3RlZW0sIGZhdm91ciwgc3VycGFzc2luZyBob25vdXIsIGFuZCBraW5kbmVzcywgZnJvbSBoaXMgc29sZGllcnMuIEZvciBoZSB3aWxsaW5nbHkgc2hhcmVkIHRoZSB0YXNrcyB3aGljaCBoZSBpbXBvc2VkIHVwb24gb3RoZXJzLCBhbmQgaW4gaGlzIGRyZXNzLCB3YXkgb2YgbGl2aW5nLCBhbmQgY29uZHVjdCBvbiB0aGUgbWFyY2gsIG1hZGUgaGltc2VsZiBtb3JlIGxpa2UgYSBzb2xkaWVyIHRoYW4gYSBjb21tYW5kZXIsIHdoaWxlIGluIGNoYXJhY3RlciwgZGlnbml0eSBvZiBwdXJwb3NlLCBhbmQgZWxvcXVlbmNlLCBoZSBzdXJwYXNzZWQgYWxsIHRob3NlIHdobyBib3JlIHRoZSB0aXRsZXMgb2YgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+SW1wZXJhdG9yPC9mb3JlaWduPiBhbmQgR2VuZXJhbC4gSW4gdGhpcyB3YXksIHdpdGhvdXQga25vd2luZyBpdCwgaGUgcHJvZHVjZWQgaW4gaGlzIG1lbiBhdCB0aGUgc2FtZSB0aW1lIHRoZSBmZWVsaW5nIG9mIGdvb2Qgd2lsbCB0b3dhcmRzIGhpbXNlbGYuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhIGdlbnVpbmUgZGVzaXJlIHRvIGF0dGFpbiB2aXJ0dWUgYXJpc2VzIG9ubHkgaW4gY29uc2VxdWVuY2Ugb2YgcGVyZmVjdCBnb29kIHdpbGwgYW5kIHJlc3BlY3QgZm9yIGhpbSB3aG8gZGlzcGxheXMgdmlydHVlOyB0aG9zZSwgb24gdGhlIG90aGVyIGhhbmQsIHdobyBwcmFpc2UgZ29vZCBtZW4gd2l0aG91dCBsb3ZpbmcgdGhlbSBtYXkgcmV2ZXJlIHRoZWlyIHJlcHV0YXRpb24sIGJ1dCB0aGV5IGRvIG5vdCBhZG1pcmUgdGhlaXIgdmlydHVlIG9yIGltaXRhdGUgaXQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9uIGxlYXJuaW5nIHRoYXQgQXRoZW5vZG9ydXMsIHN1cm5hbWVkIENvcmR5bGlvbiwgd2hvIGhhZCBhIGxhcmdlIGFjcXVhaW50YW5jZSB3aXRoIHRoZSBTdG9pYyBwaGlsb3NvcGh5LCB3YXMgbGl2aW5nIGF0IFBlcmdhbXVtLCBiZWluZyBub3cgaW4gaGlzIG9sZCBhZ2UgYW5kIGhhdmluZyBtb3N0IHN0dXJkaWx5IHJlc2lzdGVkIGFsbCBpbnRpbWFjaWVzIGFuZCBmcmllbmRzaGlwcyB3aXRoIGdvdmVybm9ycyBhbmQga2luZ3MsIENhdG8gdGhvdWdodCBpdCB3b3VsZCBiZSB1c2VsZXNzIHRvIHNlbmQgbWVzc2VuZ2VycyBvciB3cml0ZSBsZXR0ZXJzIHRvIGhpbS4gSW5zdGVhZCBvZiB0aGlzLCBzaW5jZSBoZSBoYWQgYSBmdXJsb3VnaCBvZiB0d28gbW9udGhzIGFsbG93ZWQgaGltIGJ5IGxhdywgaGUgc2FpbGVkIHRvIEFzaWEgdG8gdmlzaXQgdGhlIG1hbiwgcmVseWluZyB1cG9uIGhpcyBvd24gZ29vZCBxdWFsaXRpZXMgdG8gbWFrZSBoaW0gc3VjY2Vzc2Z1bCBpbiB0aGUgY2hhc2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhlbGQgY29udmVyc2Ugd2l0aCB0aGUgcGhpbG9zb3BoZXIsIGNvbnF1ZXJlZCBoaXMgb2JqZWN0aW9ucywgZHJldyBoaW0gZnJvbSBoaXMgZml4ZWQgcHVycG9zZSwgYW5kIHRvb2sgaGltIGJhY2sgdG8gdGhlIGNhbXAgd2l0aCBoaW0uIEhlIHdhcyBvdmVyam95ZWQgYW5kIGluIGhpZ2ggc3Bpcml0cywgZmVlbGluZyB0aGF0IGhlIGhhZCBtYWRlIGEgbW9zdCBub2JsZSBjYXB0dXJlLCBhbmQgb25lIG1vcmUgaWxsdXN0cmlvdXMgdGhhbiB0aGUgbmF0aW9ucyBhbmQga2luZ2RvbXMgd2hpY2ggUG9tcGV5IGFuZCBMdWN1bGx1cyBhdCB0aGF0IHRpbWUgd2VyZSBzdWJkdWluZyB3aXRoIHRoZWlyIG1hcmNoaW5nIGFybWllcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gbGVhcm5pbmcgdGhhdCBBdGhlbm9kb3J1cywgc3VybmFtZWQgQ29yZHlsaW9uLCB3aG8gaGFkIGEgbGFyZ2UgYWNxdWFpbnRhbmNlIHdpdGggdGhlIFN0b2ljIHBoaWxvc29waHksIHdhcyBsaXZpbmcgYXQgUGVyZ2FtdW0sIGJlaW5nIG5vdyBpbiBoaXMgb2xkIGFnZSBhbmQgaGF2aW5nIG1vc3Qgc3R1cmRpbHkgcmVzaXN0ZWQgYWxsIGludGltYWNpZXMgYW5kIGZyaWVuZHNoaXBzIHdpdGggZ292ZXJub3JzIGFuZCBraW5ncywgQ2F0byB0aG91Z2h0IGl0IHdvdWxkIGJlIHVzZWxlc3MgdG8gc2VuZCBtZXNzZW5nZXJzIG9yIHdyaXRlIGxldHRlcnMgdG8gaGltLiBJbnN0ZWFkIG9mIHRoaXMsIHNpbmNlIGhlIGhhZCBhIGZ1cmxvdWdoIG9mIHR3byBtb250aHMgYWxsb3dlZCBoaW0gYnkgbGF3LCBoZSBzYWlsZWQgdG8gQXNpYSB0byB2aXNpdCB0aGUgbWFuLCByZWx5aW5nIHVwb24gaGlzIG93biBnb29kIHF1YWxpdGllcyB0byBtYWtlIGhpbSBzdWNjZXNzZnVsIGluIHRoZSBjaGFzZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhlbGQgY29udmVyc2Ugd2l0aCB0aGUgcGhpbG9zb3BoZXIsIGNvbnF1ZXJlZCBoaXMgb2JqZWN0aW9ucywgZHJldyBoaW0gZnJvbSBoaXMgZml4ZWQgcHVycG9zZSwgYW5kIHRvb2sgaGltIGJhY2sgdG8gdGhlIGNhbXAgd2l0aCBoaW0uIEhlIHdhcyBvdmVyam95ZWQgYW5kIGluIGhpZ2ggc3Bpcml0cywgZmVlbGluZyB0aGF0IGhlIGhhZCBtYWRlIGEgbW9zdCBub2JsZSBjYXB0dXJlLCBhbmQgb25lIG1vcmUgaWxsdXN0cmlvdXMgdGhhbiB0aGUgbmF0aW9ucyBhbmQga2luZ2RvbXMgd2hpY2ggUG9tcGV5IGFuZCBMdWN1bGx1cyBhdCB0aGF0IHRpbWUgd2VyZSBzdWJkdWluZyB3aXRoIHRoZWlyIG1hcmNoaW5nIGFybWllcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgQ2F0byB3YXMgc3RpbGwgaW4gbWlsaXRhcnkgc2VydmljZSwgaGlzIGJyb3RoZXIsIHdobyB3YXMgb24gaGlzIHdheSB0byBBc2lhLCBmZWxsIHNpY2sgYXQgQWVudXMgaW4gVGhyYWNlLCBhbmQgYSBsZXR0ZXIgY2FtZSBhdCBvbmNlIHRvIENhdG8gYWR2aXNpbmcgaGltIG9mIHRoaXMuIEEgaGVhdnkgc3Rvcm0gd2FzIHJhZ2luZyBhdCBzZWEgYW5kIG5vIHNoaXAgb2Ygc3VmZmljaWVudCBzaXplIHdhcyBhdCBoYW5kLCBidXQgbmV2ZXJ0aGVsZXNzLCB0YWtpbmcgb25seSB0d28gZnJpZW5kcyBhbmQgdGhyZWUgc2VydmFudHMgd2l0aCBoaW0gaW4gYSBzbWFsbCB0cmFkaW5nLXZlc3NlbCwgaGUgcHV0IHRvIHNlYSBmcm9tIFRoZXNzYWxvbmljYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgbmFycm93bHkgZXNjYXBlZCBkcm93bmluZywgYW5kIGJ5IHNvbWUgdW5hY2NvdW50YWJsZSBnb29kIGZvcnR1bmUgY2FtZSBzYWZlIHRvIGxhbmQsIGJ1dCBDYWVwaW8gaGFkIGp1c3QgZGllZC4gSW4gYmVhcmluZyB0aGlzIGFmZmxpY3Rpb24gQ2F0byB3YXMgdGhvdWdodCB0byBoYXZlIHNob3duIG1vcmUgcGFzc2lvbiB0aGFuIHBoaWxvc29waHksIGNvbnNpZGVyaW5nIG5vdCBvbmx5IGhpcyBsYW1lbnRhdGlvbnMsIGhpcyBlbWJyYWNpbmdzIG9mIHRoZSBkZWFkLCBhbmQgdGhlIGhlYXZpbmVzcyBvZiBoaXMgZ3JpZWYsIGJ1dCBhbHNvIGhpcyBleHBlbmRpdHVyZSB1cG9uIHRoZSBidXJpYWwsIGFuZCB0aGUgcGFpbnMgdGhhdCBoZSB0b29rIHRvIGhhdmUgaW5jZW5zZSBhbmQgY29zdGx5IHJhaW1lbnQgYnVybmVkIHdpdGggdGhlIGJvZHksIGFuZCBhIG1vbnVtZW50IG9mIHBvbGlzaGVkIFRoYXNpYW4gbWFyYmxlIGNvc3RpbmcgZWlnaHQgdGFsZW50cyBjb25zdHJ1Y3RlZCBpbiB0aGUgbWFya2V0LXBsYWNlIG9mIEFlbnVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igc29tZSBwZW9wbGUgY2F2aWxsZWQgYXQgdGhlc2UgdGhpbmdzIGFzIGluY29uc2lzdGVudCB3aXRoIENhdG8ncyB1c3VhbCBmcmVlZG9tIGZyb20gb3N0ZW50YXRpb24sIG5vdCBvYnNlcnZpbmcgaG93IG11Y2ggdGVuZGVybmVzcyBhbmQgYWZmZWN0aW9uIHdhcyBtaW5nbGVkIHdpdGggdGhlIG1hbidzIGluZmxleGliaWxpdHkgYW5kIGZpcm1uZXNzIGFnYWluc3QgcGxlYXN1cmVzLCBmZWFycywgYW5kIHNoYW1lbGVzcyBlbnRyZWF0aWVzLiBGb3IgdGhlIGZ1bmVyYWwgcml0ZXMsIG1vcmVvdmVyLCBib3RoIGNpdGllcyBhbmQgZHluYXN0cyBzZW50IGhpbSBtYW55IHRoaW5ncyBmb3IgdGhlIGhvbm91ciBvZiB0aGUgZGVhZCwgZnJvbSBub25lIG9mIHdob20gd291bGQgaGUgYWNjZXB0IG1vbmV5OyBoZSBkaWQsIGhvd2V2ZXIsIHRha2UgaW5jZW5zZSBhbmQgb3JuYW1lbnRzLCBhbmQgcGFpZCB0aGUgdmFsdWUgb2YgdGhlbSB0byB0aGUgc2VuZGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIHdoZW4gdGhlIGluaGVyaXRhbmNlIGZlbGwgdG8gaGltIGFuZCBDYWVwaW8ncyB5b3VuZyBkYXVnaHRlciwgbm90aGluZyB0aGF0IGhlIGhhZCBleHBlbmRlZCBmb3IgdGhlIGZ1bmVyYWwgd2FzIGFza2VkIGJhY2sgYnkgaGltIGluIHRoZSBkaXN0cmlidXRpb24gb2YgdGhlIHByb3BlcnR5LiBBbmQgYWx0aG91Z2ggc3VjaCB3YXMgaGlzIGNvbmR1Y3QgdGhlbiBhbmQgYWZ0ZXJ3YXJkcywgdGhlcmUgd2FzIG9uZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkp1bGl1cyBDYWVzYXIsIGluIGhpcyAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbnRpLUNhdG8uPC9xPiBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA1NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhZXNhcjwvdGl0bGU+LCBjaGFwdGVyIGxpdjwvYmlibD4uPC9ub3RlPiB3aG8gd3JvdGUgdGhhdCBoZSBwYXNzZWQgdGhlIGFzaGVzIG9mIHRoZSBkZWFkIHRocm91Z2ggYSBzaWV2ZSwgaW4gc2VhcmNoIG9mIHRoZSBnb2xkIHRoYXQgaGFkIGJlZW4gbWVsdGVkIGRvd24uIFNvIGNvbmZpZGVudGx5IGRpZCB0aGUgd3JpdGVyIGF0dHJpYnV0ZSwgbm90IG9ubHkgdG8gaGlzIHN3b3JkLCBidXQgYWxzbyB0byBoaXMgcGVuLCBmcmVlZG9tIGZyb20gYWNjb3VudGFiaWxpdHkgYW5kIHB1bmlzaG1lbnQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgQ2F0byB3YXMgc3RpbGwgaW4gbWlsaXRhcnkgc2VydmljZSwgaGlzIGJyb3RoZXIsIHdobyB3YXMgb24gaGlzIHdheSB0byBBc2lhLCBmZWxsIHNpY2sgYXQgQWVudXMgaW4gVGhyYWNlLCBhbmQgYSBsZXR0ZXIgY2FtZSBhdCBvbmNlIHRvIENhdG8gYWR2aXNpbmcgaGltIG9mIHRoaXMuIEEgaGVhdnkgc3Rvcm0gd2FzIHJhZ2luZyBhdCBzZWEgYW5kIG5vIHNoaXAgb2Ygc3VmZmljaWVudCBzaXplIHdhcyBhdCBoYW5kLCBidXQgbmV2ZXJ0aGVsZXNzLCB0YWtpbmcgb25seSB0d28gZnJpZW5kcyBhbmQgdGhyZWUgc2VydmFudHMgd2l0aCBoaW0gaW4gYSBzbWFsbCB0cmFkaW5nLXZlc3NlbCwgaGUgcHV0IHRvIHNlYSBmcm9tIFRoZXNzYWxvbmljYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIG5hcnJvd2x5IGVzY2FwZWQgZHJvd25pbmcsIGFuZCBieSBzb21lIHVuYWNjb3VudGFibGUgZ29vZCBmb3J0dW5lIGNhbWUgc2FmZSB0byBsYW5kLCBidXQgQ2FlcGlvIGhhZCBqdXN0IGRpZWQuIEluIGJlYXJpbmcgdGhpcyBhZmZsaWN0aW9uIENhdG8gd2FzIHRob3VnaHQgdG8gaGF2ZSBzaG93biBtb3JlIHBhc3Npb24gdGhhbiBwaGlsb3NvcGh5LCBjb25zaWRlcmluZyBub3Qgb25seSBoaXMgbGFtZW50YXRpb25zLCBoaXMgZW1icmFjaW5ncyBvZiB0aGUgZGVhZCwgYW5kIHRoZSBoZWF2aW5lc3Mgb2YgaGlzIGdyaWVmLCBidXQgYWxzbyBoaXMgZXhwZW5kaXR1cmUgdXBvbiB0aGUgYnVyaWFsLCBhbmQgdGhlIHBhaW5zIHRoYXQgaGUgdG9vayB0byBoYXZlIGluY2Vuc2UgYW5kIGNvc3RseSByYWltZW50IGJ1cm5lZCB3aXRoIHRoZSBib2R5LCBhbmQgYSBtb251bWVudCBvZiBwb2xpc2hlZCBUaGFzaWFuIG1hcmJsZSBjb3N0aW5nIGVpZ2h0IHRhbGVudHMgY29uc3RydWN0ZWQgaW4gdGhlIG1hcmtldC1wbGFjZSBvZiBBZW51cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBzb21lIHBlb3BsZSBjYXZpbGxlZCBhdCB0aGVzZSB0aGluZ3MgYXMgaW5jb25zaXN0ZW50IHdpdGggQ2F0bydzIHVzdWFsIGZyZWVkb20gZnJvbSBvc3RlbnRhdGlvbiwgbm90IG9ic2VydmluZyBob3cgbXVjaCB0ZW5kZXJuZXNzIGFuZCBhZmZlY3Rpb24gd2FzIG1pbmdsZWQgd2l0aCB0aGUgbWFuJ3MgaW5mbGV4aWJpbGl0eSBhbmQgZmlybW5lc3MgYWdhaW5zdCBwbGVhc3VyZXMsIGZlYXJzLCBhbmQgc2hhbWVsZXNzIGVudHJlYXRpZXMuIEZvciB0aGUgZnVuZXJhbCByaXRlcywgbW9yZW92ZXIsIGJvdGggY2l0aWVzIGFuZCBkeW5hc3RzIHNlbnQgaGltIG1hbnkgdGhpbmdzIGZvciB0aGUgaG9ub3VyIG9mIHRoZSBkZWFkLCBmcm9tIG5vbmUgb2Ygd2hvbSB3b3VsZCBoZSBhY2NlcHQgbW9uZXk7IGhlIGRpZCwgaG93ZXZlciwgdGFrZSBpbmNlbnNlIGFuZCBvcm5hbWVudHMsIGFuZCBwYWlkIHRoZSB2YWx1ZSBvZiB0aGVtIHRvIHRoZSBzZW5kZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCB3aGVuIHRoZSBpbmhlcml0YW5jZSBmZWxsIHRvIGhpbSBhbmQgQ2FlcGlvJ3MgeW91bmcgZGF1Z2h0ZXIsIG5vdGhpbmcgdGhhdCBoZSBoYWQgZXhwZW5kZWQgZm9yIHRoZSBmdW5lcmFsIHdhcyBhc2tlZCBiYWNrIGJ5IGhpbSBpbiB0aGUgZGlzdHJpYnV0aW9uIG9mIHRoZSBwcm9wZXJ0eS4gQW5kIGFsdGhvdWdoIHN1Y2ggd2FzIGhpcyBjb25kdWN0IHRoZW4gYW5kIGFmdGVyd2FyZHMsIHRoZXJlIHdhcyBvbmU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkp1bGl1cyBDYWVzYXIsIGluIGhpcyAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFudGktQ2F0by48L3E+IFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNTQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCBjaGFwdGVyIGxpdjwvYmlibD4uPC9ub3RlPiB3aG8gd3JvdGUgdGhhdCBoZSBwYXNzZWQgdGhlIGFzaGVzIG9mIHRoZSBkZWFkIHRocm91Z2ggYSBzaWV2ZSwgaW4gc2VhcmNoIG9mIHRoZSBnb2xkIHRoYXQgaGFkIGJlZW4gbWVsdGVkIGRvd24uIFNvIGNvbmZpZGVudGx5IGRpZCB0aGUgd3JpdGVyIGF0dHJpYnV0ZSwgbm90IG9ubHkgdG8gaGlzIHN3b3JkLCBidXQgYWxzbyB0byBoaXMgcGVuLCBmcmVlZG9tIGZyb20gYWNjb3VudGFiaWxpdHkgYW5kIHB1bmlzaG1lbnQuCgkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW50aS1DYXRvLjwvcT4gU2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA1NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIGNoYXB0ZXIgbGl2PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgY2hhcHRlciBsaXY8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSB0aW1lIG9mIENhdG8ncyBtaWxpdGFyeSBzZXJ2aWNlIGNhbWUgdG8gYW4gZW5kLCBoZSB3YXMgc2VudCBvbiBoaXMgd2F5LCBub3Qgd2l0aCBibGVzc2luZ3MsIGFzIGlzIGNvbW1vbiwgbm9yIHlldCB3aXRoIHByYWlzZXMsIGJ1dCB3aXRoIHRlYXJzIGFuZCBpbnNhdGlhYmxlIGVtYnJhY2VzLCB0aGUgc29sZGllcnMgY2FzdGluZyB0aGVpciBtYW50bGVzIGRvd24gZm9yIGhpbSB0byB3YWxrIHVwb24sIGFuZCBraXNzaW5nIGhpcyBoYW5kcywgdGhpbmdzIHdoaWNoIHRoZSBSb21hbnMgb2YgdGhhdCBkYXkgcmFyZWx5IGRpZCwgYW5kIG9ubHkgdG8gYSBmZXcgb2YgdGhlaXIgaW1wZXJhdG9ycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGJlZm9yZSBhcHBseWluZyBoaW1zZWxmIHRvIHB1YmxpYyBhZmZhaXJzIGhlIGRlc2lyZWQgdG8gdHJhdmVsIGFib3V0IGluIGEgc3R1ZHkgb2YgQXNpYSwgYW5kIHRvIHNlZSB3aXRoIGhpcyBvd24gZXllcyB0aGUgY3VzdG9tcyBhbmQgbGl2ZXMgYW5kIG1pbGl0YXJ5IHN0cmVuZ3RoIG9mIGVhY2ggcHJvdmluY2U7IGF0IHRoZSBzYW1lIHRpbWUgaGUgd2lzaGVkIHRvIGdyYXRpZnkgRGVpb3RhcnVzIHRoZSBHYWxhdGlhbiwgd2hvIGhhZCBiZWVuIGEgZ3Vlc3QtZnJpZW5kIG9mIGhpcyBmYXRoZXIsIGFuZCBub3cgc29saWNpdGVkIGEgdmlzaXQgZnJvbSBoaW0uIEhlIHRoZXJlZm9yZSBhcnJhbmdlZCBoaXMgam91cm5leSBhcyBmb2xsb3dzLiBBdCBkYXlicmVhaywgaGUgd291bGQgc2VuZCBmb3J3YXJkIGhpcyBiYWtlciBhbmQgaGlzIGNvb2sgdG8gdGhlIHBsYWNlIHdoZXJlIGhlIGludGVuZGVkIHRvIGxvZGdlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSB3b3VsZCBlbnRlciB0aGUgY2l0eSB3aXRoIGdyZWF0IGRlY29ydW0gYW5kIGxpdHRsZSBzdGlyLCBhbmQgaWYgQ2F0byBoYWQgbm8gZmFtaWx5IGZyaWVuZCBvciBhY3F1YWludGFuY2UgdGhlcmUsIHRoZXkgd291bGQgcHJlcGFyZSBhIHJlY2VwdGlvbiBmb3IgaGltIGF0IGFuIGlubiwgd2l0aG91dCB0cm91YmxpbmcgYW55Ym9keTsgb3IsIGluIGNhc2UgdGhlcmUgd2FzIG5vIGlubiwgdGhleSB3b3VsZCBhcHBseSB0byB0aGUgbWFnaXN0cmF0ZXMgZm9yIGhvc3BpdGFsaXR5LCBhbmQgZ2xhZGx5IGFjY2VwdCB3aGF0IHdhcyBnaXZlbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGZyZXF1ZW50bHkgdGhleSB3ZXJlIGRpc3RydXN0ZWQgYW5kIG5lZ2xlY3RlZCwgYmVjYXVzZSB0aGV5IHJhaXNlZCBubyB0dW11bHQgYW5kIG1hZGUgbm8gdGhyZWF0cyBpbiB0aGVpciBkZWFsaW5ncyB3aXRoIHRoZSBtYWdpc3RyYXRlcy4gSW4gc3VjaCBhIGNhc2UgQ2F0byB3b3VsZCBmaW5kIHRoZWlyIHdvcmsgbm90IGRvbmUgd2hlbiBoZSBhcnJpdmVkLCBhbmQgaGUgaGltc2VsZiB3b3VsZCBiZSBtb3JlIGRlc3Bpc2VkIHRoYW4gaGlzIHNlcnZhbnRzIHdoZW4gbWVuIHNhdyBoaW0sIGFuZCB3b3VsZCBhd2FrZW4gc3VzcGljaW9uLCBhcyBoZSBzYXQgdXBvbiB0aGUgYmFnZ2FnZSB3aXRob3V0IHNheWluZyBhIHdvcmQsIHRoYXQgaGUgd2FzIGEgbWFuIG9mIGxvdyBjb25kaXRpb24gYW5kIHZlcnkgdGltaWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIHdvdWxkIHRoZW4gY2FsbCB0aGUgbWFnaXN0cmF0ZXMgdG8gaGltIGFuZCBzYXk6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWUgbWlzZXJhYmxlIHdyZXRjaGVzLCBsYXkgYXNpZGUgdGhpcyBpbmhvc3BpdGFsaXR5LiBOb3QgYWxsIG1lbiB3aG8gY29tZSB0byB5b3Ugd2lsbCBiZSBDYXRvcy4gQmx1bnQgYnkgeW91ciBraW5kIGF0dGVudGlvbnMgdGhlIHBvd2VyIG9mIHRob3NlIHdobyBvbmx5IHdhbnQgYW4gZXhjdXNlIGZvciB0YWtpbmcgYnkgZm9yY2Ugd2hhdCB0aGV5IGRvIG5vdCBnZXQgd2l0aCBtZW4ncyBjb25zZW50LjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgdGltZSBvZiBDYXRvJ3MgbWlsaXRhcnkgc2VydmljZSBjYW1lIHRvIGFuIGVuZCwgaGUgd2FzIHNlbnQgb24gaGlzIHdheSwgbm90IHdpdGggYmxlc3NpbmdzLCBhcyBpcyBjb21tb24sIG5vciB5ZXQgd2l0aCBwcmFpc2VzLCBidXQgd2l0aCB0ZWFycyBhbmQgaW5zYXRpYWJsZSBlbWJyYWNlcywgdGhlIHNvbGRpZXJzIGNhc3RpbmcgdGhlaXIgbWFudGxlcyBkb3duIGZvciBoaW0gdG8gd2FsayB1cG9uLCBhbmQga2lzc2luZyBoaXMgaGFuZHMsIHRoaW5ncyB3aGljaCB0aGUgUm9tYW5zIG9mIHRoYXQgZGF5IHJhcmVseSBkaWQsIGFuZCBvbmx5IHRvIGEgZmV3IG9mIHRoZWlyIGltcGVyYXRvcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBiZWZvcmUgYXBwbHlpbmcgaGltc2VsZiB0byBwdWJsaWMgYWZmYWlycyBoZSBkZXNpcmVkIHRvIHRyYXZlbCBhYm91dCBpbiBhIHN0dWR5IG9mIEFzaWEsIGFuZCB0byBzZWUgd2l0aCBoaXMgb3duIGV5ZXMgdGhlIGN1c3RvbXMgYW5kIGxpdmVzIGFuZCBtaWxpdGFyeSBzdHJlbmd0aCBvZiBlYWNoIHByb3ZpbmNlOyBhdCB0aGUgc2FtZSB0aW1lIGhlIHdpc2hlZCB0byBncmF0aWZ5IERlaW90YXJ1cyB0aGUgR2FsYXRpYW4sIHdobyBoYWQgYmVlbiBhIGd1ZXN0LWZyaWVuZCBvZiBoaXMgZmF0aGVyLCBhbmQgbm93IHNvbGljaXRlZCBhIHZpc2l0IGZyb20gaGltLiBIZSB0aGVyZWZvcmUgYXJyYW5nZWQgaGlzIGpvdXJuZXkgYXMgZm9sbG93cy4gQXQgZGF5YnJlYWssIGhlIHdvdWxkIHNlbmQgZm9yd2FyZCBoaXMgYmFrZXIgYW5kIGhpcyBjb29rIHRvIHRoZSBwbGFjZSB3aGVyZSBoZSBpbnRlbmRlZCB0byBsb2RnZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdvdWxkIGVudGVyIHRoZSBjaXR5IHdpdGggZ3JlYXQgZGVjb3J1bSBhbmQgbGl0dGxlIHN0aXIsIGFuZCBpZiBDYXRvIGhhZCBubyBmYW1pbHkgZnJpZW5kIG9yIGFjcXVhaW50YW5jZSB0aGVyZSwgdGhleSB3b3VsZCBwcmVwYXJlIGEgcmVjZXB0aW9uIGZvciBoaW0gYXQgYW4gaW5uLCB3aXRob3V0IHRyb3VibGluZyBhbnlib2R5OyBvciwgaW4gY2FzZSB0aGVyZSB3YXMgbm8gaW5uLCB0aGV5IHdvdWxkIGFwcGx5IHRvIHRoZSBtYWdpc3RyYXRlcyBmb3IgaG9zcGl0YWxpdHksIGFuZCBnbGFkbHkgYWNjZXB0IHdoYXQgd2FzIGdpdmVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmcmVxdWVudGx5IHRoZXkgd2VyZSBkaXN0cnVzdGVkIGFuZCBuZWdsZWN0ZWQsIGJlY2F1c2UgdGhleSByYWlzZWQgbm8gdHVtdWx0IGFuZCBtYWRlIG5vIHRocmVhdHMgaW4gdGhlaXIgZGVhbGluZ3Mgd2l0aCB0aGUgbWFnaXN0cmF0ZXMuIEluIHN1Y2ggYSBjYXNlIENhdG8gd291bGQgZmluZCB0aGVpciB3b3JrIG5vdCBkb25lIHdoZW4gaGUgYXJyaXZlZCwgYW5kIGhlIGhpbXNlbGYgd291bGQgYmUgbW9yZSBkZXNwaXNlZCB0aGFuIGhpcyBzZXJ2YW50cyB3aGVuIG1lbiBzYXcgaGltLCBhbmQgd291bGQgYXdha2VuIHN1c3BpY2lvbiwgYXMgaGUgc2F0IHVwb24gdGhlIGJhZ2dhZ2Ugd2l0aG91dCBzYXlpbmcgYSB3b3JkLCB0aGF0IGhlIHdhcyBhIG1hbiBvZiBsb3cgY29uZGl0aW9uIGFuZCB2ZXJ5IHRpbWlkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIHdvdWxkIHRoZW4gY2FsbCB0aGUgbWFnaXN0cmF0ZXMgdG8gaGltIGFuZCBzYXk6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZSBtaXNlcmFibGUgd3JldGNoZXMsIGxheSBhc2lkZSB0aGlzIGluaG9zcGl0YWxpdHkuIE5vdCBhbGwgbWVuIHdobyBjb21lIHRvIHlvdSB3aWxsIGJlIENhdG9zLiBCbHVudCBieSB5b3VyIGtpbmQgYXR0ZW50aW9ucyB0aGUgcG93ZXIgb2YgdGhvc2Ugd2hvIG9ubHkgd2FudCBhbiBleGN1c2UgZm9yIHRha2luZyBieSBmb3JjZSB3aGF0IHRoZXkgZG8gbm90IGdldCB3aXRoIG1lbidzIGNvbnNlbnQuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBTeXJpYSwgdG9vLCBhcyB3ZSBhcmUgdG9sZCwgaGUgaGFkIGEgbGF1Z2hhYmxlIGV4cGVyaWVuY2UuIEFzIGhlIHdhcyB3YWxraW5nIGludG8gQW50aW9jaCwgaGUgc2F3IGF0IHRoZSBnYXRlcyBvdXRzaWRlIGEgbXVsdGl0dWRlIG9mIHBlb3BsZSBkcmF3biB1cCBvbiBlaXRoZXIgc2lkZSBvZiB0aGUgcm9hZCwgYW1vbmcgd2hvbSBzdG9vZCwgaW4gb25lIGdyb3VwLCB5b3VuZyBtZW4gd2l0aCBtaWxpdGFyeSBjbG9ha3MsIGFuZCBpbiBhbm90aGVyLCBib3lzIHdpdGggZ2FsYSByb2Jlcywgd2hpbGUgc29tZSBoYWQgd2hpdGUgcmFpbWVudCBhbmQgY3Jvd25zLCBiZWluZyBwcmllc3RzIG9yIG1hZ2lzdHJhdGVzLiBDYXRvLCBhY2NvcmRpbmdseSwgdGhpbmtpbmcgdGhhdCB0aGlzIGNvdWxkIG9ubHkgYmUgc29tZSBob25vdXJhYmxlIHJlY2VwdGlvbiB3aGljaCB0aGUgY2l0eSB3YXMgcHJlcGFyaW5nIGZvciBoaW0sIHdhcyBhbmdyeSB3aXRoIGhpcyBzZXJ2YW50cyB3aG8gaGFkIGJlZW4gc2VudCBvbiBpbiBhZHZhbmNlLCBiZWNhdXNlIHRoZXkgaGFkIG5vdCBwcmV2ZW50ZWQgaXQ7IGJ1dCBoZSBvcmRlcmVkIGhpcyBmcmllbmRzIHRvIGRpc21vdW50LCBhbmQgd2VudCBmb3J3YXJkIG9uIGZvb3Qgd2l0aCB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBob3dldmVyLCB0aGV5IHdlcmUgbmVhciB0aGUgZ2F0ZSwgaGUgd2hvIHdhcyBhcnJhbmdpbmcgYWxsIHRoZXNlIGNlcmVtb25pZXMgYW5kIG1hcnNoYWxsaW5nIHRoZSBjcm93ZCwgYSBtYW4gbm93IHdlbGwgb24gaW4geWVhcnMsIGhvbGRpbmcgYSB3YW5kIGFuZCBhIGNyb3duIGluIGhpcyBoYW5kLCBhZHZhbmNlZCB0byBtZWV0IENhdG8sIGFuZCB3aXRob3V0IGV2ZW4gZ3JlZXRpbmcgaGltIGFza2VkIHdoZXJlIHRoZXkgaGFkIGxlZnQgRGVtZXRyaXVzIGFuZCB3aGVuIGhlIHdvdWxkIGJlIHRoZXJlLiBOb3csIERlbWV0cml1cyBoYWQgb25jZSBiZWVuIGEgc2xhdmUgb2YgUG9tcGV5LCBidXQgYXQgdGhpcyB0aW1lLCB3aGVuIGFsbCBtYW5raW5kLCBzbyB0byBzcGVhaywgaGFkIHRoZWlyIGV5ZXMgZml4ZWQgdXBvbiBQb21wZXksIGhlIHdhcyBjb3VydGVkIGJleW9uZCBoaXMgZGVzZXJ0cywgc2luY2UgaGUgaGFkIGdyZWF0IGluZmx1ZW5jZSB3aXRoIFBvbXBleS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0bydzIGZyaWVuZHMgYWNjb3JkaW5nbHksIHdlcmUgc2VpemVkIHdpdGggc3VjaCBhIGZpdCBvZiBsYXVnaHRlciB0aGF0IHRoZXkgY291bGQgbm90IHJlY292ZXIgdGhlbXNlbHZlcyBldmVuIHdoZW4gdGhleSB3ZXJlIHdhbGtpbmcgdGhyb3VnaCB0aGUgY3Jvd2Q7IGJ1dCBDYXRvIHdhcyBncmVhdGx5IGRpc3R1cmJlZCBhdCB0aGUgdGltZSwgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyB0aGUgdW5oYXBweSBjaXR5ITwvcT4gYW5kIG5vdCBhIHdvcmQgYmVzaWRlcy4gSW4gYWZ0ZXIgdGltZXMsIGhvd2V2ZXIsIGhlIHdhcyB3b250IHRvIGxhdWdoIGF0IHRoZSBpbmNpZGVudCBoaW1zZWxmIGFsc28sIGJvdGggd2hlbiBoZSB0b2xkIGl0IGFuZCB3aGVuIGhlIGNhbGxlZCBpdCB0byBtaW5kLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgc3RvcnkgaXMgdG9sZCBhbHNvIGluIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgeGwuIDEtMzwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gU3lyaWEsIHRvbywgYXMgd2UgYXJlIHRvbGQsIGhlIGhhZCBhIGxhdWdoYWJsZSBleHBlcmllbmNlLiBBcyBoZSB3YXMgd2Fsa2luZyBpbnRvIEFudGlvY2gsIGhlIHNhdyBhdCB0aGUgZ2F0ZXMgb3V0c2lkZSBhIG11bHRpdHVkZSBvZiBwZW9wbGUgZHJhd24gdXAgb24gZWl0aGVyIHNpZGUgb2YgdGhlIHJvYWQsIGFtb25nIHdob20gc3Rvb2QsIGluIG9uZSBncm91cCwgeW91bmcgbWVuIHdpdGggbWlsaXRhcnkgY2xvYWtzLCBhbmQgaW4gYW5vdGhlciwgYm95cyB3aXRoIGdhbGEgcm9iZXMsIHdoaWxlIHNvbWUgaGFkIHdoaXRlIHJhaW1lbnQgYW5kIGNyb3ducywgYmVpbmcgcHJpZXN0cyBvciBtYWdpc3RyYXRlcy4gQ2F0bywgYWNjb3JkaW5nbHksIHRoaW5raW5nIHRoYXQgdGhpcyBjb3VsZCBvbmx5IGJlIHNvbWUgaG9ub3VyYWJsZSByZWNlcHRpb24gd2hpY2ggdGhlIGNpdHkgd2FzIHByZXBhcmluZyBmb3IgaGltLCB3YXMgYW5ncnkgd2l0aCBoaXMgc2VydmFudHMgd2hvIGhhZCBiZWVuIHNlbnQgb24gaW4gYWR2YW5jZSwgYmVjYXVzZSB0aGV5IGhhZCBub3QgcHJldmVudGVkIGl0OyBidXQgaGUgb3JkZXJlZCBoaXMgZnJpZW5kcyB0byBkaXNtb3VudCwgYW5kIHdlbnQgZm9yd2FyZCBvbiBmb290IHdpdGggdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZXkgd2VyZSBuZWFyIHRoZSBnYXRlLCBoZSB3aG8gd2FzIGFycmFuZ2luZyBhbGwgdGhlc2UgY2VyZW1vbmllcyBhbmQgbWFyc2hhbGxpbmcgdGhlIGNyb3dkLCBhIG1hbiBub3cgd2VsbCBvbiBpbiB5ZWFycywgaG9sZGluZyBhIHdhbmQgYW5kIGEgY3Jvd24gaW4gaGlzIGhhbmQsIGFkdmFuY2VkIHRvIG1lZXQgQ2F0bywgYW5kIHdpdGhvdXQgZXZlbiBncmVldGluZyBoaW0gYXNrZWQgd2hlcmUgdGhleSBoYWQgbGVmdCBEZW1ldHJpdXMgYW5kIHdoZW4gaGUgd291bGQgYmUgdGhlcmUuIE5vdywgRGVtZXRyaXVzIGhhZCBvbmNlIGJlZW4gYSBzbGF2ZSBvZiBQb21wZXksIGJ1dCBhdCB0aGlzIHRpbWUsIHdoZW4gYWxsIG1hbmtpbmQsIHNvIHRvIHNwZWFrLCBoYWQgdGhlaXIgZXllcyBmaXhlZCB1cG9uIFBvbXBleSwgaGUgd2FzIGNvdXJ0ZWQgYmV5b25kIGhpcyBkZXNlcnRzLCBzaW5jZSBoZSBoYWQgZ3JlYXQgaW5mbHVlbmNlIHdpdGggUG9tcGV5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8ncyBmcmllbmRzIGFjY29yZGluZ2x5LCB3ZXJlIHNlaXplZCB3aXRoIHN1Y2ggYSBmaXQgb2YgbGF1Z2h0ZXIgdGhhdCB0aGV5IGNvdWxkIG5vdCByZWNvdmVyIHRoZW1zZWx2ZXMgZXZlbiB3aGVuIHRoZXkgd2VyZSB3YWxraW5nIHRocm91Z2ggdGhlIGNyb3dkOyBidXQgQ2F0byB3YXMgZ3JlYXRseSBkaXN0dXJiZWQgYXQgdGhlIHRpbWUsIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyB0aGUgdW5oYXBweSBjaXR5ITwvcT4gYW5kIG5vdCBhIHdvcmQgYmVzaWRlcy4gSW4gYWZ0ZXIgdGltZXMsIGhvd2V2ZXIsIGhlIHdhcyB3b250IHRvIGxhdWdoIGF0IHRoZSBpbmNpZGVudCBoaW1zZWxmIGFsc28sIGJvdGggd2hlbiBoZSB0b2xkIGl0IGFuZCB3aGVuIGhlIGNhbGxlZCBpdCB0byBtaW5kLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhpcyBzdG9yeSBpcyB0b2xkIGFsc28gaW4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDQwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeGwuIDEtMzwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA0MC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsLiAxLTM8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4bC4gMS0zPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgUG9tcGV5IGhpbXNlbGYgcHV0IHRvIHNoYW1lIHRoZSBtZW4gd2hvIHdlcmUgdGh1cyBuZWdsZWN0ZnVsIG9mIENhdG8gdGhyb3VnaCBpZ25vcmFuY2UuIEZvciB3aGVuIENhdG8gY2FtZSB0byBFcGhlc3VzIGFuZCB3YXMgcHJvY2VlZGluZyB0byBwYXkgaGlzIHJlc3BlY3RzIHRvIFBvbXBleSBhcyBhbiBvbGRlciBtYW4sIG9uZSB3aG8gd2FzIGdyZWF0bHkgaGlzIHN1cGVyaW9yIGluIHJlcHV0YXRpb24sIGFuZCB0aGVuIGluIGNvbW1hbmQgb2YgdGhlIGdyZWF0ZXN0IGZvcmNlcywgUG9tcGV5IGNhdWdodCBzaWdodCBvZiBoaW0gYW5kIHdvdWxkIG5vdCB3YWl0LCBub3Igd291bGQgaGUgc3VmZmVyIENhdG8gdG8gY29tZSB0byBoaW0gYXMgaGUgc2F0LCBidXQgc3ByYW5nIHVwIGFzIHRob3VnaCB0byBob25vdXIgYSBzdXBlcmlvciwgd2VudCB0byBtZWV0IGhpbSwgYW5kIGdhdmUgaGltIGhpcyBoYW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBhbHNvIHBhc3NlZCBtYW55IGVuY29taXVtcyB1cG9uIGhpcyB2aXJ0dWUgZXZlbiB3aGlsZSBoZSB3YXMgcHJlc2VudCBhbmQgcmVjZWl2aW5nIG1hcmtzIG9mIGtpbmRuZXNzIGFuZCBhZmZlY3Rpb24sIGFuZCBzdGlsbCBtb3JlIGFmdGVyIGhlIGhhZCB3aXRoZHJhd24uIFRoZXJlZm9yZSBhbGwgbWVuLCBiZWluZyBwdXQgdG8gc2hhbWUgYW5kIG5vdyBkaXJlY3RpbmcgdGhlaXIgYXR0ZW50aW9uIHRvIENhdG8sIGFkbWlyZWQgaGltIGZvciB0aGUgdHJhaXRzIHdoaWNoIGJlZm9yZSBoYWQgYnJvdWdodCBoaW0gc2Nvcm4sIGFuZCBtYWRlIGEgc3R1ZHkgb2YgaGlzIG1pbGRuZXNzIGFuZCBtYWduYW5pbWl0eS4gQW5kIGluZGVlZCBpdCB3YXMgbm8gc2VjcmV0IHRoYXQgUG9tcGV5J3MgYXR0ZW50aW9ucyB0byBoaW0gd2VyZSBkdWUgdG8gc2VsZi1pbnRlcmVzdCByYXRoZXIgdGhhbiB0byBmcmllbmRzaGlwOyBtZW4ga25ldyB0aGF0IFBvbXBleSBhZG1pcmVkIGhpbSB3aGVuIGhlIHdhcyBwcmVzZW50LCBidXQgd2FzIGdsYWQgdG8gaGF2ZSBoaW0gZ28gYXdheS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGFsbCB0aGUgb3RoZXIgeW91bmcgbWVuIHdobyBjYW1lIHRvIGhpbSB3ZXJlIHJldGFpbmVkIGJ5IFBvbXBleSwgd2hvIHNob3dlZCBhbiBlYWdlciBsb25naW5nIGZvciB0aGVpciBjb21wYW5pb25zaGlwOyBvZiBDYXRvLCBvbiB0aGUgY29udHJhcnksIGhlIG1hZGUgbm8gc3VjaCByZXF1ZXN0LCBidXQsIGFzIGlmIGhlIG11c3QgcmVuZGVyIGFjY291bnQgb2YgaGlzIGNvbW1hbmQgd2hpbGUgQ2F0byB3YXMgdGhlcmUsIGhlIHdhcyBnbGFkIHRvIHNlbmQgaGltIGF3YXkuIEFuZCB5ZXQgQ2F0byB3YXMgYWxtb3N0IHRoZSBvbmx5IHBlcnNvbiBhbW9uZyB0aG9zZSBib3VuZCBmb3IgUm9tZSB0byB3aG9tIFBvbXBleSBjb21tZW5kZWQgaGlzIHdpZmUgYW5kIGNoaWxkcmVuLCBhbHRob3VnaCBpdCBpcyB0cnVlIHRoYXQgdGhleSB3ZXJlIHJlbGF0aXZlcyBvZiBoaXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgUG9tcGV5IGhpbXNlbGYgcHV0IHRvIHNoYW1lIHRoZSBtZW4gd2hvIHdlcmUgdGh1cyBuZWdsZWN0ZnVsIG9mIENhdG8gdGhyb3VnaCBpZ25vcmFuY2UuIEZvciB3aGVuIENhdG8gY2FtZSB0byBFcGhlc3VzIGFuZCB3YXMgcHJvY2VlZGluZyB0byBwYXkgaGlzIHJlc3BlY3RzIHRvIFBvbXBleSBhcyBhbiBvbGRlciBtYW4sIG9uZSB3aG8gd2FzIGdyZWF0bHkgaGlzIHN1cGVyaW9yIGluIHJlcHV0YXRpb24sIGFuZCB0aGVuIGluIGNvbW1hbmQgb2YgdGhlIGdyZWF0ZXN0IGZvcmNlcywgUG9tcGV5IGNhdWdodCBzaWdodCBvZiBoaW0gYW5kIHdvdWxkIG5vdCB3YWl0LCBub3Igd291bGQgaGUgc3VmZmVyIENhdG8gdG8gY29tZSB0byBoaW0gYXMgaGUgc2F0LCBidXQgc3ByYW5nIHVwIGFzIHRob3VnaCB0byBob25vdXIgYSBzdXBlcmlvciwgd2VudCB0byBtZWV0IGhpbSwgYW5kIGdhdmUgaGltIGhpcyBoYW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gcGFzc2VkIG1hbnkgZW5jb21pdW1zIHVwb24gaGlzIHZpcnR1ZSBldmVuIHdoaWxlIGhlIHdhcyBwcmVzZW50IGFuZCByZWNlaXZpbmcgbWFya3Mgb2Yga2luZG5lc3MgYW5kIGFmZmVjdGlvbiwgYW5kIHN0aWxsIG1vcmUgYWZ0ZXIgaGUgaGFkIHdpdGhkcmF3bi4gVGhlcmVmb3JlIGFsbCBtZW4sIGJlaW5nIHB1dCB0byBzaGFtZSBhbmQgbm93IGRpcmVjdGluZyB0aGVpciBhdHRlbnRpb24gdG8gQ2F0bywgYWRtaXJlZCBoaW0gZm9yIHRoZSB0cmFpdHMgd2hpY2ggYmVmb3JlIGhhZCBicm91Z2h0IGhpbSBzY29ybiwgYW5kIG1hZGUgYSBzdHVkeSBvZiBoaXMgbWlsZG5lc3MgYW5kIG1hZ25hbmltaXR5LiBBbmQgaW5kZWVkIGl0IHdhcyBubyBzZWNyZXQgdGhhdCBQb21wZXkncyBhdHRlbnRpb25zIHRvIGhpbSB3ZXJlIGR1ZSB0byBzZWxmLWludGVyZXN0IHJhdGhlciB0aGFuIHRvIGZyaWVuZHNoaXA7IG1lbiBrbmV3IHRoYXQgUG9tcGV5IGFkbWlyZWQgaGltIHdoZW4gaGUgd2FzIHByZXNlbnQsIGJ1dCB3YXMgZ2xhZCB0byBoYXZlIGhpbSBnbyBhd2F5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbGwgdGhlIG90aGVyIHlvdW5nIG1lbiB3aG8gY2FtZSB0byBoaW0gd2VyZSByZXRhaW5lZCBieSBQb21wZXksIHdobyBzaG93ZWQgYW4gZWFnZXIgbG9uZ2luZyBmb3IgdGhlaXIgY29tcGFuaW9uc2hpcDsgb2YgQ2F0bywgb24gdGhlIGNvbnRyYXJ5LCBoZSBtYWRlIG5vIHN1Y2ggcmVxdWVzdCwgYnV0LCBhcyBpZiBoZSBtdXN0IHJlbmRlciBhY2NvdW50IG9mIGhpcyBjb21tYW5kIHdoaWxlIENhdG8gd2FzIHRoZXJlLCBoZSB3YXMgZ2xhZCB0byBzZW5kIGhpbSBhd2F5LiBBbmQgeWV0IENhdG8gd2FzIGFsbW9zdCB0aGUgb25seSBwZXJzb24gYW1vbmcgdGhvc2UgYm91bmQgZm9yIFJvbWUgdG8gd2hvbSBQb21wZXkgY29tbWVuZGVkIGhpcyB3aWZlIGFuZCBjaGlsZHJlbiwgYWx0aG91Z2ggaXQgaXMgdHJ1ZSB0aGF0IHRoZXkgd2VyZSByZWxhdGl2ZXMgb2YgaGlzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFzIGEgY29uc2VxdWVuY2Ugb2YgYWxsIHRoaXMsIHRoZSBjaXRpZXMgZWFnZXJseSB2aWVkIHdpdGggb25lIGFub3RoZXIgaW4gc2hvd2luZyBDYXRvIGhvbm91ciwgYW5kIHRoZXJlIHdlcmUgc3VwcGVycyBhbmQgaW52aXRhdGlvbnMsIGF0IHdoaWNoIHRpbWVzIGhlIHdvdWxkIHVyZ2UgaGlzIGZyaWVuZHMgdG8ga2VlcCBjbG9zZSB3YXRjaCB1cG9uIGhpbSwgbGVzdCBoZSBzaG91bGQgdW5hd2FyZXMgY29uZmlybSB0aGUgc2F5aW5nIG9mIEN1cmlvLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBDdXJpbywgYW5ub3llZCBhdCB0aGUgc2V2ZXJpdHkgb2YgQ2F0bywgd2hvIHdhcyBoaXMgaW50aW1hdGUgZnJpZW5kLCBoYWQgYXNrZWQgaGltIHdoZXRoZXIgaGUgd2FzIGRlc2lyb3VzIG9mIHNlZWluZyBBc2lhIGFmdGVyIGhpcyB0ZXJtIG9mIHNlcnZpY2UgaW4gdGhlIGFybXkuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2VydGFpbmx5IEkgYW0sPC9xPiBzYWlkIENhdG8uIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhhdCdzIHJpZ2h0LDwvcT4gc2FpZCBDdXJpbywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mb3IgeW91IHdpbGwgY29tZSBiYWNrIGZyb20gdGhlcmUgYSBtb3JlIGFncmVlYWJsZSBtYW4gYW5kIG1vcmUgdGFtZSw8L3E+4oCUdGhhdCBpcyBhYm91dCB0aGUgbWVhbmluZyBvZiB0aGUgd29yZCBoZSB1c2VkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIGlzIHNlZWtpbmcgYSBHcmVlayBlcXVpdmFsZW50IGZvciB0aGUgTGF0aW4gCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5tYW5zdWV0aW9yPC9mb3JlaWduPi48L3E+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBDdXJpbywgYW5ub3llZCBhdCB0aGUgc2V2ZXJpdHkgb2YgQ2F0bywgd2hvIHdhcyBoaXMgaW50aW1hdGUgZnJpZW5kLCBoYWQgYXNrZWQgaGltIHdoZXRoZXIgaGUgd2FzIGRlc2lyb3VzIG9mIHNlZWluZyBBc2lhIGFmdGVyIGhpcyB0ZXJtIG9mIHNlcnZpY2UgaW4gdGhlIGFybXkuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DZXJ0YWlubHkgSSBhbSw8L3E+IHNhaWQgQ2F0by4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQncyByaWdodCw8L3E+IHNhaWQgQ3VyaW8sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mb3IgeW91IHdpbGwgY29tZSBiYWNrIGZyb20gdGhlcmUgYSBtb3JlIGFncmVlYWJsZSBtYW4gYW5kIG1vcmUgdGFtZSw8L3E+4oCUdGhhdCBpcyBhYm91dCB0aGUgbWVhbmluZyBvZiB0aGUgd29yZCBoZSB1c2VkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGx1dGFyY2ggaXMgc2Vla2luZyBhIEdyZWVrIGVxdWl2YWxlbnQgZm9yIHRoZSBMYXRpbiAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5tYW5zdWV0aW9yPC9mb3JlaWduPi48L3E+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bWFuc3VldGlvcjwvZm9yZWlnbj4uPC9xPgogICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5tYW5zdWV0aW9yPC9mb3JlaWduPi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgRGVpb3RhcnVzIHRoZSBHYWxhdGlhbiBzZW50IGZvciBDYXRvLCBiZWluZyBub3cgYW4gb2xkIG1hbiwgYW5kIGRlc2lyaW5nIHRvIGNvbW1lbmQgdG8gaGlzIHByb3RlY3Rpb24gaGlzIGNoaWxkcmVuIGFuZCBoaXMgZmFtaWx5LiBXaGVuIENhdG8gYXJyaXZlZCwgaG93ZXZlciwgRGVpb3RhcnVzIG9mZmVyZWQgaGltIGdpZnRzIG9mIGV2ZXJ5IHNvcnQsIGFuZCBieSB0ZW1wdGluZyBhbmQgZW50cmVhdGluZyBoaW0gaW4gZXZlcnkgd2F5IHNvIGV4YXNwZXJhdGVkIGhpbSB0aGF0LCBhbHRob3VnaCBoZSBoYWQgYXJyaXZlZCBsYXRlIGluIHRoZSBkYXkgYW5kIG1lcmVseSBzcGVudCB0aGUgbmlnaHQsIG9uIHRoZSBuZXh0IGRheSBhYm91dCB0aGUgdGhpcmQgaG91ciBoZSBzZXQgb2ZmLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhZnRlciBwcm9jZWVkaW5nIGEgZGF5J3Mgam91cm5leSwgaGUgZm91bmQgYXQgUGVzc2ludXMgbW9yZSBnaWZ0cyBhZ2FpbiBhd2FpdGluZyBoaW0gdGhhbiB0aG9zZSBoZSBoYWQgbGVmdCBiZWhpbmQgaGltLCBhbmQgYSBsZXR0ZXIgZnJvbSB0aGUgR2FsYXRpYW4gYmVnZ2luZyBoaW0sIGlmIGhlIGRpZCBub3QgZGVzaXJlIHRvIHRha2UgdGhlbSBoaW1zZWxmLCBhdCBsZWFzdCB0byBwZXJtaXQgaGlzIGZyaWVuZHMgdG8gZG8gc28sIHNpbmNlIHRoZXkgd2VyZSBpbiBldmVyeSB3YXkgd29ydGh5IHRvIHJlY2VpdmUgYmVuZWZpdHMgb24gaGlzIGFjY291bnQsIGFuZCBDYXRvJ3MgcHJpdmF0ZSBtZWFucyB3b3VsZCBub3QgcmVhY2ggc28gZmFyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm90IGV2ZW4gdG8gdGhlc2Ugc29saWNpdGF0aW9ucyBkaWQgQ2F0byB5aWVsZCwgYWx0aG91Z2ggaGUgc2F3IHRoYXQgc29tZSBvZiBoaXMgZnJpZW5kcyB3ZXJlIGJlZ2lubmluZyB0byB3ZWFrZW4gYW5kIHdlcmUgZGlzcG9zZWQgdG8gYmxhbWUgaGltOyBuYXksIGhlIGRlY2xhcmVkIHRoYXQgZXZlcnkgdGFraW5nIG9mIGdpZnRzIGNvdWxkIGZpbmQgcGxlbnR5IG9mIGV4Y3VzZSwgYnV0IHRoYXQgaGlzIGZyaWVuZHMgc2hvdWxkIHNoYXJlIGluIHdoYXQgaGUgaGFkIGFjcXVpcmVkIGhvbm91cmFibHkgYW5kIGp1c3RseS4gVGhlbiBoZSBzZW50IGhpcyBnaWZ0cyBiYWNrIHRvIERlaW90YXJ1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IERlaW90YXJ1cyB0aGUgR2FsYXRpYW4gc2VudCBmb3IgQ2F0bywgYmVpbmcgbm93IGFuIG9sZCBtYW4sIGFuZCBkZXNpcmluZyB0byBjb21tZW5kIHRvIGhpcyBwcm90ZWN0aW9uIGhpcyBjaGlsZHJlbiBhbmQgaGlzIGZhbWlseS4gV2hlbiBDYXRvIGFycml2ZWQsIGhvd2V2ZXIsIERlaW90YXJ1cyBvZmZlcmVkIGhpbSBnaWZ0cyBvZiBldmVyeSBzb3J0LCBhbmQgYnkgdGVtcHRpbmcgYW5kIGVudHJlYXRpbmcgaGltIGluIGV2ZXJ5IHdheSBzbyBleGFzcGVyYXRlZCBoaW0gdGhhdCwgYWx0aG91Z2ggaGUgaGFkIGFycml2ZWQgbGF0ZSBpbiB0aGUgZGF5IGFuZCBtZXJlbHkgc3BlbnQgdGhlIG5pZ2h0LCBvbiB0aGUgbmV4dCBkYXkgYWJvdXQgdGhlIHRoaXJkIGhvdXIgaGUgc2V0IG9mZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFmdGVyIHByb2NlZWRpbmcgYSBkYXkncyBqb3VybmV5LCBoZSBmb3VuZCBhdCBQZXNzaW51cyBtb3JlIGdpZnRzIGFnYWluIGF3YWl0aW5nIGhpbSB0aGFuIHRob3NlIGhlIGhhZCBsZWZ0IGJlaGluZCBoaW0sIGFuZCBhIGxldHRlciBmcm9tIHRoZSBHYWxhdGlhbiBiZWdnaW5nIGhpbSwgaWYgaGUgZGlkIG5vdCBkZXNpcmUgdG8gdGFrZSB0aGVtIGhpbXNlbGYsIGF0IGxlYXN0IHRvIHBlcm1pdCBoaXMgZnJpZW5kcyB0byBkbyBzbywgc2luY2UgdGhleSB3ZXJlIGluIGV2ZXJ5IHdheSB3b3J0aHkgdG8gcmVjZWl2ZSBiZW5lZml0cyBvbiBoaXMgYWNjb3VudCwgYW5kIENhdG8ncyBwcml2YXRlIG1lYW5zIHdvdWxkIG5vdCByZWFjaCBzbyBmYXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3QgZXZlbiB0byB0aGVzZSBzb2xpY2l0YXRpb25zIGRpZCBDYXRvIHlpZWxkLCBhbHRob3VnaCBoZSBzYXcgdGhhdCBzb21lIG9mIGhpcyBmcmllbmRzIHdlcmUgYmVnaW5uaW5nIHRvIHdlYWtlbiBhbmQgd2VyZSBkaXNwb3NlZCB0byBibGFtZSBoaW07IG5heSwgaGUgZGVjbGFyZWQgdGhhdCBldmVyeSB0YWtpbmcgb2YgZ2lmdHMgY291bGQgZmluZCBwbGVudHkgb2YgZXhjdXNlLCBidXQgdGhhdCBoaXMgZnJpZW5kcyBzaG91bGQgc2hhcmUgaW4gd2hhdCBoZSBoYWQgYWNxdWlyZWQgaG9ub3VyYWJseSBhbmQganVzdGx5LiBUaGVuIGhlIHNlbnQgaGlzIGdpZnRzIGJhY2sgdG8gRGVpb3RhcnVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBoZSB3YXMgYWJvdXQgdG8gc2V0IHNhaWwgZm9yIEJydW5kaXNpdW0sIGhpcyBmcmllbmRzIHRob3VnaHQgdGhhdCB0aGUgYXNoZXMgb2YgQ2FlcGlvIHNob3VsZCBiZSBwdXQgYWJvYXJkIGFub3RoZXIgdmVzc2VsOyBidXQgQ2F0byBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIHJhdGhlciBwYXJ0IHdpdGggaGlzIGxpZmUgdGhhbiB3aXRoIHRob3NlIGFzaGVzLCBhbmQgcHV0IHRvIHNlYS4gQW5kIHZlcmlseSB3ZSBhcmUgdG9sZCB0aGF0LCBhcyBjaGFuY2Ugd291bGQgaGF2ZSBpdCwgaGUgaGFkIGEgdmVyeSBkYW5nZXJvdXMgcGFzc2FnZSwgYWx0aG91Z2ggdGhlIHJlc3QgbWFkZSB0aGUgam91cm5leSB3aXRoIGxpdHRsZSB0cm91YmxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHdhcyBhYm91dCB0byBzZXQgc2FpbCBmb3IgQnJ1bmRpc2l1bSwgaGlzIGZyaWVuZHMgdGhvdWdodCB0aGF0IHRoZSBhc2hlcyBvZiBDYWVwaW8gc2hvdWxkIGJlIHB1dCBhYm9hcmQgYW5vdGhlciB2ZXNzZWw7IGJ1dCBDYXRvIGRlY2xhcmVkIHRoYXQgaGUgd291bGQgcmF0aGVyIHBhcnQgd2l0aCBoaXMgbGlmZSB0aGFuIHdpdGggdGhvc2UgYXNoZXMsIGFuZCBwdXQgdG8gc2VhLiBBbmQgdmVyaWx5IHdlIGFyZSB0b2xkIHRoYXQsIGFzIGNoYW5jZSB3b3VsZCBoYXZlIGl0LCBoZSBoYWQgYSB2ZXJ5IGRhbmdlcm91cyBwYXNzYWdlLCBhbHRob3VnaCB0aGUgcmVzdCBtYWRlIHRoZSBqb3VybmV5IHdpdGggbGl0dGxlIHRyb3VibGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhpcyByZXR1cm4gdG8gUm9tZSwgaGUgc3BlbnQgbW9zdCBvZiBoaXMgdGltZSBhdCBob21lIGluIHRoZSBjb21wYW55IG9mIEF0aGVub2RvcnVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMTAuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4PC9iaWJsPi48L25vdGU+IG9yIGluIHRoZSBmb3J1bSBhc3Npc3RpbmcgaGlzIGZyaWVuZHMuIEFuZCB0aG91Z2ggdGhlIG9mZmljZSBvZiBxdWFlc3RvciB3YXMgb3BlbiB0byBoaW0sIGhlIHdvdWxkIG5vdCBiZWNvbWUgYSBjYW5kaWRhdGUgZm9yIGl0IHVudGlsIGhlIGhhZCByZWFkIHRoZSBsYXdzIHJlbGF0aW5nIHRvIHRoZSBxdWFlc3RvcnNoaXAsIGxlYXJuZWQgYWxsIHRoZSBkZXRhaWxzIG9mIHRoZSBvZmZpY2UgZnJvbSB0aG9zZSB3aG8gaGFkIGhhZCBleHBlcmllbmNlIGluIGl0LCBhbmQgZm9ybWVkIGEgZ2VuZXJhbCBpZGVhIG9mIGl0cyBwb3dlciBhbmQgc2NvcGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYXMgc29vbiBhcyBoZSBoYWQgYmVlbiBpbnN0YXRlZCBpbiB0aGUgb2ZmaWNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDY1IEIuQy48L25vdGU+IGhlIG1hZGUgYSBncmVhdCBjaGFuZ2UgaW4gdGhlIGFzc2lzdGFudHMgYW5kIGNsZXJrcyBjb25uZWN0ZWQgd2l0aCB0aGUgdHJlYXN1cnkuIFRoZXNlIHdlcmUgZnVsbHkgY29udmVyc2FudCB3aXRoIHRoZSBwdWJsaWMgYWNjb3VudHMgYW5kIHRoZSBsYXdzIHJlbGF0aXZlIHRoZXJldG8sIGFuZCBzbywgd2hlbiB0aGV5IHJlY2VpdmVkIGFzIHRoZWlyIHN1cGVyaW9yIG9mZmljZXJzIHlvdW5nIG1lbiB3aG9zZSBpbmV4cGVyaWVuY2UgYW5kIGlnbm9yYW5jZSBtYWRlIGl0IHJlYWxseSBuZWVkZnVsIHRoYXQgb3RoZXJzIHNob3VsZCB0ZWFjaCBhbmQgdHV0b3IgdGhlbSwgdGhleSB3b3VsZCBub3Qgc3VycmVuZGVyIGFueSBwb3dlciB0byBzdWNoIHN1cGVyaW9ycywgYnV0IHdlcmUgc3VwZXJpb3JzIHRoZW1zZWx2ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaG93ZXZlciwgQ2F0byBhcHBsaWVkIGhpbXNlbGYgd2l0aCBlbmVyZ3kgdG8gdGhlIGJ1c2luZXNzLCBub3QgaGF2aW5nIG1lcmVseSB0aGUgbmFtZSBhbmQgaG9ub3VyIG9mIGEgc3VwZXJpb3Igb2ZmaWNpYWwsIGJ1dCBhbHNvIGludGVsbGlnZW5jZSBhbmQgcmF0aW9uYWwganVkZ2VtZW50LiBIZSB0aG91Z2h0IGl0IGJlc3QgdG8gdHJlYXQgdGhlIGNsZXJrcyBhcyBhc3Npc3RhbnRzLCB3aGljaCB0aGV5IHJlYWxseSB3ZXJlLCBzb21ldGltZXMgY29udmljdGluZyB0aGVtIG9mIHRoZWlyIGV2aWwgcHJhY3RpY2VzLCBhbmQgc29tZXRpbWVzIHRlYWNoaW5nIHRoZW0gaWYgdGhleSBlcnJlZCBmcm9tIGluZXhwZXJpZW5jZS4gQnV0IHRoZXkgd2VyZSBib2xkIGZlbGxvd3MsIGFuZCB0cmllZCB0byBpbmdyYXRpYXRlIHRoZW1zZWx2ZXMgd2l0aCB0aGUgb3RoZXIgcXVhZXN0b3JzLCB3aGlsZSB0aGV5IHdhZ2VkIHdhciB1cG9uIENhdG8uIFRoZXJlZm9yZSB0aGUgY2hpZWYgYW1vbmcgdGhlbSwgd2hvbSBoZSBmb3VuZCBndWlsdHkgb2YgYSBicmVhY2ggb2YgdHJ1c3QgaW4gdGhlIG1hdHRlciBvZiBhbiBpbmhlcml0YW5jZSwgd2FzIGV4cGVsbGVkIGZyb20gdGhlIHRyZWFzdXJ5IGJ5IGhpbSwgYW5kIGEgc2Vjb25kIHdhcyBicm91Z2h0IHRvIHRyaWFsIGZvciBmcmF1ZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBwZXJzb24gQ2F0dWx1cyBMdXRhdGl1cyB0aGUgY2Vuc29yIGNhbWUgZm9yd2FyZCB0byBkZWZlbmQsIGEgbWFuIHdobyBoYWQgZ3JlYXQgYXV0aG9yaXR5IGZyb20gaGlzIG9mZmljZSwgYnV0IG1vc3Qgb2YgYWxsIGZyb20gaGlzIHZpcnR1ZSwgYmVpbmcgdGhvdWdodCB0byBzdXJwYXNzIGFsbCBSb21hbnMgaW4ganVzdGljZSBhbmQgZGlzY3JldGlvbjsgaGUgYWxzbyBjb21tZW5kZWQgQ2F0bydzIHdheSBvZiBsaXZpbmcgYW5kIHdhcyBpbnRpbWF0ZSB3aXRoIGhpbS4gQWNjb3JkaW5nbHksIHdoZW4gQ2F0dWx1cyBoYWQgbG9zdCBoaXMgY2FzZSBvbiBpdHMgbWVyaXRzIGFuZCBiZWdhbiB0byBiZWcgb3Blbmx5IGZvciB0aGUgYWNxdWl0dGFsIG9mIGhpcyBjbGllbnQsIENhdG8gdHJpZWQgdG8gc3RvcCBoaW0gZnJvbSBkb2luZyB0aGlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBDYXR1bHVzIHdhcyBhbGwgdGhlIG1vcmUgaW1wb3J0dW5hdGUsIENhdG8gc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCB3b3VsZCBiZSBhIHNoYW1lZnVsIHRoaW5nLCBDYXR1bHVzLCBpZiB0aG91LCB3aG8gYXJ0IHRoZSBjZW5zb3IsIGFuZCBzaG91bGRzdCBzY3J1dGluaXplIG91ciBsaXZlcywgd2VydCBwdXQgb3V0IG9mIGNvdXJ0IGJ5IG91ciBiYWlsaWZmcy48L3E+IFdoZW4gQ2F0byBoYWQgdXR0ZXJlZCB0aGVzZSB3b3JkcywgQ2F0dWx1cyBmaXhlZCBoaXMgZXllcyB1cG9uIGhpbSBhcyBpZiBoZSB3b3VsZCBtYWtlIHJlcGx5OyBoZSBzYWlkIG5vdGhpbmcsIGhvd2V2ZXIsIGJ1dCBlaXRoZXIgZnJvbSBhbmdlciBvciBmcm9tIHNoYW1lIHdlbnQgb2ZmIGluIHNpbGVuY2UsIG11Y2ggcGVycGxleGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGUgbWFuIHdhcyBub3QgY29udmljdGVkLCBidXQgd2hlbiB0aGUgdm90ZXMgZm9yIGNvbmRlbW5hdGlvbiBleGNlZWRlZCB0aG9zZSBmb3IgYWNxdWl0dGFsIGJ5IGEgc2luZ2xlIGJhbGxvdCwgYW5kIG9uZSBNYXJjdXMgTG9sbGl1cywgYSBjb2xsZWFndWUgb2YgQ2F0bywgd2FzIGtlcHQgYnkgc2lja25lc3MgZnJvbSBhdHRlbmRpbmcgdGhlIHRyaWFsLCBDYXR1bHVzIHNlbnQgdG8gaGltIGFuZCBiZWdnZWQgaGltIHRvIGhlbHAgdGhlIG1hbi4gU28gTG9sbGl1cyB3YXMgYnJvdWdodCBpbiBhIGxpdHRlciBhZnRlciB0aGUgdHJpYWwgYW5kIGNhc3QgdGhlIHZvdGUgdGhhdCBhY3F1aXR0ZWQuIE5vdHdpdGhzdGFuZGluZyB0aGlzLCBDYXRvIHdvdWxkIG5vdCBlbXBsb3kgdGhlIGNsZXJrLCBvciBnaXZlIGhpbSBoaXMgcGF5LCBvciBpbiBhbnkgd2F5IHRha2UgdGhlIHZvdGUgb2YgTG9sbGl1cyBpbnRvIHRoZSByZWNrb25pbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGlzIHJldHVybiB0byBSb21lLCBoZSBzcGVudCBtb3N0IG9mIGhpcyB0aW1lIGF0IGhvbWUgaW4gdGhlIGNvbXBhbnkgb2YgQXRoZW5vZG9ydXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMTAuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4PC9iaWJsPi48L25vdGU+IG9yIGluIHRoZSBmb3J1bSBhc3Npc3RpbmcgaGlzIGZyaWVuZHMuIEFuZCB0aG91Z2ggdGhlIG9mZmljZSBvZiBxdWFlc3RvciB3YXMgb3BlbiB0byBoaW0sIGhlIHdvdWxkIG5vdCBiZWNvbWUgYSBjYW5kaWRhdGUgZm9yIGl0IHVudGlsIGhlIGhhZCByZWFkIHRoZSBsYXdzIHJlbGF0aW5nIHRvIHRoZSBxdWFlc3RvcnNoaXAsIGxlYXJuZWQgYWxsIHRoZSBkZXRhaWxzIG9mIHRoZSBvZmZpY2UgZnJvbSB0aG9zZSB3aG8gaGFkIGhhZCBleHBlcmllbmNlIGluIGl0LCBhbmQgZm9ybWVkIGEgZ2VuZXJhbCBpZGVhIG9mIGl0cyBwb3dlciBhbmQgc2NvcGUuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMTAuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYXMgc29vbiBhcyBoZSBoYWQgYmVlbiBpbnN0YXRlZCBpbiB0aGUgb2ZmaWNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjUgQi5DLjwvbm90ZT4gaGUgbWFkZSBhIGdyZWF0IGNoYW5nZSBpbiB0aGUgYXNzaXN0YW50cyBhbmQgY2xlcmtzIGNvbm5lY3RlZCB3aXRoIHRoZSB0cmVhc3VyeS4gVGhlc2Ugd2VyZSBmdWxseSBjb252ZXJzYW50IHdpdGggdGhlIHB1YmxpYyBhY2NvdW50cyBhbmQgdGhlIGxhd3MgcmVsYXRpdmUgdGhlcmV0bywgYW5kIHNvLCB3aGVuIHRoZXkgcmVjZWl2ZWQgYXMgdGhlaXIgc3VwZXJpb3Igb2ZmaWNlcnMgeW91bmcgbWVuIHdob3NlIGluZXhwZXJpZW5jZSBhbmQgaWdub3JhbmNlIG1hZGUgaXQgcmVhbGx5IG5lZWRmdWwgdGhhdCBvdGhlcnMgc2hvdWxkIHRlYWNoIGFuZCB0dXRvciB0aGVtLCB0aGV5IHdvdWxkIG5vdCBzdXJyZW5kZXIgYW55IHBvd2VyIHRvIHN1Y2ggc3VwZXJpb3JzLCBidXQgd2VyZSBzdXBlcmlvcnMgdGhlbXNlbHZlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaG93ZXZlciwgQ2F0byBhcHBsaWVkIGhpbXNlbGYgd2l0aCBlbmVyZ3kgdG8gdGhlIGJ1c2luZXNzLCBub3QgaGF2aW5nIG1lcmVseSB0aGUgbmFtZSBhbmQgaG9ub3VyIG9mIGEgc3VwZXJpb3Igb2ZmaWNpYWwsIGJ1dCBhbHNvIGludGVsbGlnZW5jZSBhbmQgcmF0aW9uYWwganVkZ2VtZW50LiBIZSB0aG91Z2h0IGl0IGJlc3QgdG8gdHJlYXQgdGhlIGNsZXJrcyBhcyBhc3Npc3RhbnRzLCB3aGljaCB0aGV5IHJlYWxseSB3ZXJlLCBzb21ldGltZXMgY29udmljdGluZyB0aGVtIG9mIHRoZWlyIGV2aWwgcHJhY3RpY2VzLCBhbmQgc29tZXRpbWVzIHRlYWNoaW5nIHRoZW0gaWYgdGhleSBlcnJlZCBmcm9tIGluZXhwZXJpZW5jZS4gQnV0IHRoZXkgd2VyZSBib2xkIGZlbGxvd3MsIGFuZCB0cmllZCB0byBpbmdyYXRpYXRlIHRoZW1zZWx2ZXMgd2l0aCB0aGUgb3RoZXIgcXVhZXN0b3JzLCB3aGlsZSB0aGV5IHdhZ2VkIHdhciB1cG9uIENhdG8uIFRoZXJlZm9yZSB0aGUgY2hpZWYgYW1vbmcgdGhlbSwgd2hvbSBoZSBmb3VuZCBndWlsdHkgb2YgYSBicmVhY2ggb2YgdHJ1c3QgaW4gdGhlIG1hdHRlciBvZiBhbiBpbmhlcml0YW5jZSwgd2FzIGV4cGVsbGVkIGZyb20gdGhlIHRyZWFzdXJ5IGJ5IGhpbSwgYW5kIGEgc2Vjb25kIHdhcyBicm91Z2h0IHRvIHRyaWFsIGZvciBmcmF1ZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcGVyc29uIENhdHVsdXMgTHV0YXRpdXMgdGhlIGNlbnNvciBjYW1lIGZvcndhcmQgdG8gZGVmZW5kLCBhIG1hbiB3aG8gaGFkIGdyZWF0IGF1dGhvcml0eSBmcm9tIGhpcyBvZmZpY2UsIGJ1dCBtb3N0IG9mIGFsbCBmcm9tIGhpcyB2aXJ0dWUsIGJlaW5nIHRob3VnaHQgdG8gc3VycGFzcyBhbGwgUm9tYW5zIGluIGp1c3RpY2UgYW5kIGRpc2NyZXRpb247IGhlIGFsc28gY29tbWVuZGVkIENhdG8ncyB3YXkgb2YgbGl2aW5nIGFuZCB3YXMgaW50aW1hdGUgd2l0aCBoaW0uIEFjY29yZGluZ2x5LCB3aGVuIENhdHVsdXMgaGFkIGxvc3QgaGlzIGNhc2Ugb24gaXRzIG1lcml0cyBhbmQgYmVnYW4gdG8gYmVnIG9wZW5seSBmb3IgdGhlIGFjcXVpdHRhbCBvZiBoaXMgY2xpZW50LCBDYXRvIHRyaWVkIHRvIHN0b3AgaGltIGZyb20gZG9pbmcgdGhpcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIENhdHVsdXMgd2FzIGFsbCB0aGUgbW9yZSBpbXBvcnR1bmF0ZSwgQ2F0byBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgd291bGQgYmUgYSBzaGFtZWZ1bCB0aGluZywgQ2F0dWx1cywgaWYgdGhvdSwgd2hvIGFydCB0aGUgY2Vuc29yLCBhbmQgc2hvdWxkc3Qgc2NydXRpbml6ZSBvdXIgbGl2ZXMsIHdlcnQgcHV0IG91dCBvZiBjb3VydCBieSBvdXIgYmFpbGlmZnMuPC9xPiBXaGVuIENhdG8gaGFkIHV0dGVyZWQgdGhlc2Ugd29yZHMsIENhdHVsdXMgZml4ZWQgaGlzIGV5ZXMgdXBvbiBoaW0gYXMgaWYgaGUgd291bGQgbWFrZSByZXBseTsgaGUgc2FpZCBub3RoaW5nLCBob3dldmVyLCBidXQgZWl0aGVyIGZyb20gYW5nZXIgb3IgZnJvbSBzaGFtZSB3ZW50IG9mZiBpbiBzaWxlbmNlLCBtdWNoIHBlcnBsZXhlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBtYW4gd2FzIG5vdCBjb252aWN0ZWQsIGJ1dCB3aGVuIHRoZSB2b3RlcyBmb3IgY29uZGVtbmF0aW9uIGV4Y2VlZGVkIHRob3NlIGZvciBhY3F1aXR0YWwgYnkgYSBzaW5nbGUgYmFsbG90LCBhbmQgb25lIE1hcmN1cyBMb2xsaXVzLCBhIGNvbGxlYWd1ZSBvZiBDYXRvLCB3YXMga2VwdCBieSBzaWNrbmVzcyBmcm9tIGF0dGVuZGluZyB0aGUgdHJpYWwsIENhdHVsdXMgc2VudCB0byBoaW0gYW5kIGJlZ2dlZCBoaW0gdG8gaGVscCB0aGUgbWFuLiBTbyBMb2xsaXVzIHdhcyBicm91Z2h0IGluIGEgbGl0dGVyIGFmdGVyIHRoZSB0cmlhbCBhbmQgY2FzdCB0aGUgdm90ZSB0aGF0IGFjcXVpdHRlZC4gTm90d2l0aHN0YW5kaW5nIHRoaXMsIENhdG8gd291bGQgbm90IGVtcGxveSB0aGUgY2xlcmssIG9yIGdpdmUgaGltIGhpcyBwYXksIG9yIGluIGFueSB3YXkgdGFrZSB0aGUgdm90ZSBvZiBMb2xsaXVzIGludG8gdGhlIHJlY2tvbmluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnkgdGh1cyBodW1ibGluZyB0aGUgY2xlcmtzIGFuZCBtYWtpbmcgdGhlbSBzdWJtaXNzaXZlLCBhbmQgYnkgbWFuYWdpbmcgdGhlIGJ1c2luZXNzIGFzIGhlIGhpbXNlbGYgZGVzaXJlZCwgaW4gYSBsaXR0bGUgd2hpbGUgaGUgYnJvdWdodCB0aGUgcXVhZXN0b3JzaGlwIGludG8gZ3JlYXRlciByZXNwZWN0IHRoYW4gdGhlIHNlbmF0ZSwgc28gdGhhdCBhbGwgbWVuIHNhaWQgYW5kIHRob3VnaHQgdGhhdCBDYXRvIGhhZCBpbnZlc3RlZCB0aGUgcXVhZXN0b3JzaGlwIHdpdGggdGhlIGRpZ25pdHkgb2YgdGhlIGNvbnN1bHNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciwgaW4gdGhlIGZpcnN0IHBsYWNlLCB3aGVuIGhlIGZvdW5kIHRoYXQgbWFueSBwZXJzb25zIHdlcmUgb3dpbmcgZGVidHMgb2YgbG9uZyBzdGFuZGluZyB0byB0aGUgcHVibGljIHRyZWFzdXJ5IGFuZCB0aGUgdHJlYXN1cnkgdG8gbWFueSBwZXJzb25zLCBoZSBtYWRlIGFuIGVuZCBhdCB0aGUgc2FtZSB0aW1lIG9mIHRoZSBzdGF0ZSBiZWluZyB3cm9uZ2VkIGFuZCB3cm9uZ2luZyBvdGhlcnM7IGZyb20gaXRzIGRlYnRvcnMgaGUgcmlnb3JvdXNseSBhbmQgaW5leG9yYWJseSBkZW1hbmRlZCBwYXltZW50LCBhbmQgdG8gaXRzIGNyZWRpdG9ycyBoZSBwcm9tcHRseSBhbmQgcmVhZGlseSBtYWRlIHBheW1lbnQsIHNvIHRoYXQgdGhlIHBlb3BsZSB3ZXJlIGZpbGxlZCB3aXRoIHJlc3BlY3QgYXMgdGhleSBzYXcgbWVuIG1ha2luZyBwYXltZW50cyB3aG8gdGhvdWdodCB0byBkZWZyYXVkIHRoZSBzdGF0ZSwgYW5kIG1lbiByZWNlaXZpbmcgcGF5bWVudHMgd2hpY2ggdGhleSBoYWQgY2Vhc2VkIHRvIGV4cGVjdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG5leHQgcGxhY2UsIHRob3VnaCBtYW55IHVzZWQgaW1wcm9wZXIgbWV0aG9kcyB0byBnZXQgd3JpdGluZ3MgZmlsZWQgd2l0aCB0aGUgcXVhZXN0b3JzLCBhbmQgdGhvdWdoIHByZXZpb3VzIHF1YWVzdG9ycyBoYWQgYmVlbiBhY2N1c3RvbWVkIHRvIHJlY2VpdmUgZmFsc2UgZGVjcmVlcyBhdCB0aGUgcmVxdWVzdCBvZiB0aG9zZSB3aG9tIHRoZXkgd2lzaGVkIHRvIHBsZWFzZSwgbm90aGluZyBvZiB0aGlzIHNvcnQgY291bGQgYmUgZG9uZSBub3cgd2l0aG91dCBDYXRvIGZpbmRpbmcgaXQgb3V0LiBJbmRlZWQsIG9uIG9uZSBvY2Nhc2lvbiB3aGVuIGhlIHdhcyBkb3VidGZ1bCB3aGV0aGVyIGEgY2VydGFpbiBkZWNyZWUgaGFkIGFjdHVhbGx5IHBhc3NlZCB0aGUgc2VuYXRlLCB0aG91Z2ggbWFueSB0ZXN0aWZpZWQgdG8gdGhlIGZhY3QsIGhlIHdvdWxkIG5vdCBiZWxpZXZlIHRoZW0sIG5vciB3b3VsZCBoZSBmaWxlIHRoZSBkZWNyZWUgYXdheSB1bnRpbCB0aGUgY29uc3VscyBoYWQgY29tZSBhbmQgdGFrZW4gb2F0aCB0byBpdHMgdmFsaWRpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB0aGVyZSB3ZXJlIG1hbnkgcGVyc29ucyB3aG9tIHRoZSBmYW1vdXMgU3VsbGEgaGFkIHJld2FyZGVkIGZvciBraWxsaW5nIG1lbiB1bmRlciBwcm9zY3JpcHRpb24sIGF0IHRoZSByYXRlIG9mIHR3ZWx2ZSB0aG91c2FuZCBkcmFjaG1hcy4gQWxsIG1lbiBoYXRlZCB0aGVtIGFzIGFjY3Vyc2VkIGFuZCBwb2xsdXRlZCB3cmV0Y2hlcywgYnV0IG5vIG9uZSBoYWQgdGhlIGNvdXJhZ2UgdG8gcHVuaXNoIHRoZW0uIENhdG8sIGhvd2V2ZXIsIGNhbGxlZCBlYWNoIG9uZSBvZiB0aGVzZSB0byBhY2NvdW50IGZvciBoYXZpbmcgcHVibGljIG1vbmV5IGluIGhpcyBwb3NzZXNzaW9uIGJ5IHVuanVzdCBtZWFucywgYW5kIG1hZGUgaGltIGdpdmUgaXQgdXAsIGF0IHRoZSBzYW1lIHRpbWUgcmVidWtpbmcgaGltIHdpdGggcGFzc2lvbmF0ZSBlbG9xdWVuY2UgZm9yIGhpcyBpbGxlZ2FsIGFuZCB1bmhvbHkgYWN0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIGV4cGVyaWVuY2UgdGhleSB3ZXJlIGF0IG9uY2UgY2hhcmdlZCB3aXRoIG11cmRlciwgd2VyZSBicm91Z2h0IGJlZm9yZSB0aGVpciBqdWRnZXMgY29uZGVtbmVkIGJlZm9yZWhhbmQsIG9uZSBtaWdodCBzYXksIGFuZCB3ZXJlIHB1bmlzaGVkLiBBdCB0aGlzIGFsbCBtZW4gd2VyZSBkZWxpZ2h0ZWQsIGFuZCB0aG91Z2h0IHRoYXQgd2l0aCB0aGVpciBkZWF0aHMgdGhlIHR5cmFubnkgb2YgdGhhdCBmb3JtZXIgdGltZSB3YXMgZXh0aW5ndWlzaGVkLCBhbmQgdGhhdCBTdWxsYSBoaW1zZWxmIHdhcyBwdW5pc2hlZCBiZWZvcmUgbWVuJ3MgZXllcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnkgdGh1cyBodW1ibGluZyB0aGUgY2xlcmtzIGFuZCBtYWtpbmcgdGhlbSBzdWJtaXNzaXZlLCBhbmQgYnkgbWFuYWdpbmcgdGhlIGJ1c2luZXNzIGFzIGhlIGhpbXNlbGYgZGVzaXJlZCwgaW4gYSBsaXR0bGUgd2hpbGUgaGUgYnJvdWdodCB0aGUgcXVhZXN0b3JzaGlwIGludG8gZ3JlYXRlciByZXNwZWN0IHRoYW4gdGhlIHNlbmF0ZSwgc28gdGhhdCBhbGwgbWVuIHNhaWQgYW5kIHRob3VnaHQgdGhhdCBDYXRvIGhhZCBpbnZlc3RlZCB0aGUgcXVhZXN0b3JzaGlwIHdpdGggdGhlIGRpZ25pdHkgb2YgdGhlIGNvbnN1bHNoaXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciwgaW4gdGhlIGZpcnN0IHBsYWNlLCB3aGVuIGhlIGZvdW5kIHRoYXQgbWFueSBwZXJzb25zIHdlcmUgb3dpbmcgZGVidHMgb2YgbG9uZyBzdGFuZGluZyB0byB0aGUgcHVibGljIHRyZWFzdXJ5IGFuZCB0aGUgdHJlYXN1cnkgdG8gbWFueSBwZXJzb25zLCBoZSBtYWRlIGFuIGVuZCBhdCB0aGUgc2FtZSB0aW1lIG9mIHRoZSBzdGF0ZSBiZWluZyB3cm9uZ2VkIGFuZCB3cm9uZ2luZyBvdGhlcnM7IGZyb20gaXRzIGRlYnRvcnMgaGUgcmlnb3JvdXNseSBhbmQgaW5leG9yYWJseSBkZW1hbmRlZCBwYXltZW50LCBhbmQgdG8gaXRzIGNyZWRpdG9ycyBoZSBwcm9tcHRseSBhbmQgcmVhZGlseSBtYWRlIHBheW1lbnQsIHNvIHRoYXQgdGhlIHBlb3BsZSB3ZXJlIGZpbGxlZCB3aXRoIHJlc3BlY3QgYXMgdGhleSBzYXcgbWVuIG1ha2luZyBwYXltZW50cyB3aG8gdGhvdWdodCB0byBkZWZyYXVkIHRoZSBzdGF0ZSwgYW5kIG1lbiByZWNlaXZpbmcgcGF5bWVudHMgd2hpY2ggdGhleSBoYWQgY2Vhc2VkIHRvIGV4cGVjdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBuZXh0IHBsYWNlLCB0aG91Z2ggbWFueSB1c2VkIGltcHJvcGVyIG1ldGhvZHMgdG8gZ2V0IHdyaXRpbmdzIGZpbGVkIHdpdGggdGhlIHF1YWVzdG9ycywgYW5kIHRob3VnaCBwcmV2aW91cyBxdWFlc3RvcnMgaGFkIGJlZW4gYWNjdXN0b21lZCB0byByZWNlaXZlIGZhbHNlIGRlY3JlZXMgYXQgdGhlIHJlcXVlc3Qgb2YgdGhvc2Ugd2hvbSB0aGV5IHdpc2hlZCB0byBwbGVhc2UsIG5vdGhpbmcgb2YgdGhpcyBzb3J0IGNvdWxkIGJlIGRvbmUgbm93IHdpdGhvdXQgQ2F0byBmaW5kaW5nIGl0IG91dC4gSW5kZWVkLCBvbiBvbmUgb2NjYXNpb24gd2hlbiBoZSB3YXMgZG91YnRmdWwgd2hldGhlciBhIGNlcnRhaW4gZGVjcmVlIGhhZCBhY3R1YWxseSBwYXNzZWQgdGhlIHNlbmF0ZSwgdGhvdWdoIG1hbnkgdGVzdGlmaWVkIHRvIHRoZSBmYWN0LCBoZSB3b3VsZCBub3QgYmVsaWV2ZSB0aGVtLCBub3Igd291bGQgaGUgZmlsZSB0aGUgZGVjcmVlIGF3YXkgdW50aWwgdGhlIGNvbnN1bHMgaGFkIGNvbWUgYW5kIHRha2VuIG9hdGggdG8gaXRzIHZhbGlkaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB0aGVyZSB3ZXJlIG1hbnkgcGVyc29ucyB3aG9tIHRoZSBmYW1vdXMgU3VsbGEgaGFkIHJld2FyZGVkIGZvciBraWxsaW5nIG1lbiB1bmRlciBwcm9zY3JpcHRpb24sIGF0IHRoZSByYXRlIG9mIHR3ZWx2ZSB0aG91c2FuZCBkcmFjaG1hcy4gQWxsIG1lbiBoYXRlZCB0aGVtIGFzIGFjY3Vyc2VkIGFuZCBwb2xsdXRlZCB3cmV0Y2hlcywgYnV0IG5vIG9uZSBoYWQgdGhlIGNvdXJhZ2UgdG8gcHVuaXNoIHRoZW0uIENhdG8sIGhvd2V2ZXIsIGNhbGxlZCBlYWNoIG9uZSBvZiB0aGVzZSB0byBhY2NvdW50IGZvciBoYXZpbmcgcHVibGljIG1vbmV5IGluIGhpcyBwb3NzZXNzaW9uIGJ5IHVuanVzdCBtZWFucywgYW5kIG1hZGUgaGltIGdpdmUgaXQgdXAsIGF0IHRoZSBzYW1lIHRpbWUgcmVidWtpbmcgaGltIHdpdGggcGFzc2lvbmF0ZSBlbG9xdWVuY2UgZm9yIGhpcyBpbGxlZ2FsIGFuZCB1bmhvbHkgYWN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgZXhwZXJpZW5jZSB0aGV5IHdlcmUgYXQgb25jZSBjaGFyZ2VkIHdpdGggbXVyZGVyLCB3ZXJlIGJyb3VnaHQgYmVmb3JlIHRoZWlyIGp1ZGdlcyBjb25kZW1uZWQgYmVmb3JlaGFuZCwgb25lIG1pZ2h0IHNheSwgYW5kIHdlcmUgcHVuaXNoZWQuIEF0IHRoaXMgYWxsIG1lbiB3ZXJlIGRlbGlnaHRlZCwgYW5kIHRob3VnaHQgdGhhdCB3aXRoIHRoZWlyIGRlYXRocyB0aGUgdHlyYW5ueSBvZiB0aGF0IGZvcm1lciB0aW1lIHdhcyBleHRpbmd1aXNoZWQsIGFuZCB0aGF0IFN1bGxhIGhpbXNlbGYgd2FzIHB1bmlzaGVkIGJlZm9yZSBtZW4ncyBleWVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgdGhlIG11bHRpdHVkZSB3ZXJlIGNhcHRpdmF0ZWQgYnkgaGlzIGNvbnRpbnVvdXMgYW5kIHVud2VhcmllZCBhdHRlbnRpb24gdG8gaGlzIGR1dGllcy4gRm9yIG5vIG9uZSBvZiBoaXMgY29sbGVhZ3VlcyBjYW1lIHVwIHRvIHRoZSB0cmVhc3VyeSBlYXJsaWVyIHRoYW4gQ2F0bywgYW5kIG5vbmUgbGVmdCBpdCBsYXRlci4gQmVzaWRlcywgbm8gc2Vzc2lvbiBvZiBhc3NlbWJseSBvciBzZW5hdGUgd291bGQgaGUgZmFpbCB0byBhdHRlbmQsIHNpbmNlIGhlIGZlYXJlZCBhbmQga2VwdCBjbG9zZSB3YXRjaCBvbiB0aG9zZSB3aG8gd2VyZSByZWFkeSB0byBncmF0aWZ5IHBlb3BsZSBieSB2b3RpbmcgcmVtaXNzaW9ucyBvZiBkZWJ0cyBhbmQgdGF4ZXMsIG9yIHByb21pc2N1b3VzIGdpZnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gYnkgZXhoaWJpdGluZyBhIHRyZWFzdXJ5IHdoaWNoIHdhcyBpbmFjY2Vzc2libGUgdG8gcHVibGljIGluZm9ybWVycyBhbmQgZnJlZSBmcm9tIHRoZWlyIHRhaW50LCBidXQgZnVsbCBvZiBtb25leSwgaGUgdGF1Z2h0IG1lbiB0aGF0IGEgc3RhdGUgY2FuIGJlIHJpY2ggd2l0aG91dCB3cm9uZ2luZyBpdHMgY2l0aXplbnMuIEF0IGZpcnN0IHNvbWUgb2YgaGlzIGNvbGxlYWd1ZXMgdGhvdWdodCBoaW0gb2Jub3hpb3VzIGFuZCB0cm91Ymxlc29tZSwgYnV0IGFmdGVyd2FyZHMgdGhleSB3ZXJlIHdlbGwgcGxlYXNlZCB3aXRoIGhpbSwgc2luY2UgaGUgdG9vayB1cG9uIGhpcyBvd24gc2hvdWxkZXJzIGV4Y2x1c2l2ZWx5IHRoZSBidXJkZW4gb2YgdGhlIGhhdHJlZHMgYXJpc2luZyBmcm9tIHJlZnVzYWwgdG8gZ2l2ZSBhd2F5IHRoZSBwdWJsaWMgbW9uZXlzIG9yIHRvIG1ha2UgdW5qdXN0IGRlY2lzaW9ucywgYW5kIGZ1cm5pc2hlZCB0aGVtIHdpdGggYSBkZWZlbmNlIGFnYWluc3QgcGVvcGxlIHdobyB0cmllZCB0byBmb3JjZSByZXF1ZXN0cyB1cG9uIHRoZW0uIFRoZXkgd291bGQgc2F5LCBuYW1lbHksIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgaW1wb3NzaWJsZTsgQ2F0byB3aWxsIG5vdCBjb25zZW50LjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoZSBtdWx0aXR1ZGUgd2VyZSBjYXB0aXZhdGVkIGJ5IGhpcyBjb250aW51b3VzIGFuZCB1bndlYXJpZWQgYXR0ZW50aW9uIHRvIGhpcyBkdXRpZXMuIEZvciBubyBvbmUgb2YgaGlzIGNvbGxlYWd1ZXMgY2FtZSB1cCB0byB0aGUgdHJlYXN1cnkgZWFybGllciB0aGFuIENhdG8sIGFuZCBub25lIGxlZnQgaXQgbGF0ZXIuIEJlc2lkZXMsIG5vIHNlc3Npb24gb2YgYXNzZW1ibHkgb3Igc2VuYXRlIHdvdWxkIGhlIGZhaWwgdG8gYXR0ZW5kLCBzaW5jZSBoZSBmZWFyZWQgYW5kIGtlcHQgY2xvc2Ugd2F0Y2ggb24gdGhvc2Ugd2hvIHdlcmUgcmVhZHkgdG8gZ3JhdGlmeSBwZW9wbGUgYnkgdm90aW5nIHJlbWlzc2lvbnMgb2YgZGVidHMgYW5kIHRheGVzLCBvciBwcm9taXNjdW91cyBnaWZ0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBieSBleGhpYml0aW5nIGEgdHJlYXN1cnkgd2hpY2ggd2FzIGluYWNjZXNzaWJsZSB0byBwdWJsaWMgaW5mb3JtZXJzIGFuZCBmcmVlIGZyb20gdGhlaXIgdGFpbnQsIGJ1dCBmdWxsIG9mIG1vbmV5LCBoZSB0YXVnaHQgbWVuIHRoYXQgYSBzdGF0ZSBjYW4gYmUgcmljaCB3aXRob3V0IHdyb25naW5nIGl0cyBjaXRpemVucy4gQXQgZmlyc3Qgc29tZSBvZiBoaXMgY29sbGVhZ3VlcyB0aG91Z2h0IGhpbSBvYm5veGlvdXMgYW5kIHRyb3VibGVzb21lLCBidXQgYWZ0ZXJ3YXJkcyB0aGV5IHdlcmUgd2VsbCBwbGVhc2VkIHdpdGggaGltLCBzaW5jZSBoZSB0b29rIHVwb24gaGlzIG93biBzaG91bGRlcnMgZXhjbHVzaXZlbHkgdGhlIGJ1cmRlbiBvZiB0aGUgaGF0cmVkcyBhcmlzaW5nIGZyb20gcmVmdXNhbCB0byBnaXZlIGF3YXkgdGhlIHB1YmxpYyBtb25leXMgb3IgdG8gbWFrZSB1bmp1c3QgZGVjaXNpb25zLCBhbmQgZnVybmlzaGVkIHRoZW0gd2l0aCBhIGRlZmVuY2UgYWdhaW5zdCBwZW9wbGUgd2hvIHRyaWVkIHRvIGZvcmNlIHJlcXVlc3RzIHVwb24gdGhlbS4gVGhleSB3b3VsZCBzYXksIG5hbWVseSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIGltcG9zc2libGU7IENhdG8gd2lsbCBub3QgY29uc2VudC48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBsYXN0IGRheSBvZiBoaXMgdGVybSBvZiBvZmZpY2UsIGFmdGVyIGhlIGhhZCBiZWVuIGVzY29ydGVkIHRvIGhpcyBob3VzZSBieSBhbG1vc3QgdGhlIHdob2xlIGJvZHkgb2YgY2l0aXplbnMsIGhlIGhlYXJkIHRoYXQgbWFueSBmcmllbmRzIG9mIE1hcmNlbGx1cyBhbmQgbWVuIG9mIGluZmx1ZW5jZSBoYWQgY2xvc2VseSBiZXNldCBoaW0gaW4gdGhlIHRyZWFzdXJ5LCBhbmQgd2VyZSB0cnlpbmcgdG8gZm9yY2UgaGltIHRvIHJlZ2lzdGVyIHNvbWUgcmVtaXNzaW9uIG9mIG1vbmV5cyBkdWUuIE5vdywgTWFyY2VsbHVzIGhhZCBiZWVuIGEgZnJpZW5kIG9mIENhdG8gZnJvbSBib3lob29kLCBhbmQgd2hlbiBhc3NvY2lhdGVkIHdpdGggaGltIGhhZCBiZWVuIGEgbW9zdCBleGNlbGxlbnQgbWFnaXN0cmF0ZS4gV2hlbiBhY3RpbmcgYnkgaGltc2VsZiBob3dldmVyLCBoZSB3YXMgbGVkIGJ5IGEgZmVlbGluZyBvZiBkZWZlcmVuY2UgdG8gYmUgY29tcGxhaXNhbnQgdG93YXJkcyBzdXBwbGlhbnRzLCBhbmQgd2FzIGluY2xpbmVkIHRvIGdyYW50IGV2ZXJ5IGZhdm91ci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlbiwgQ2F0byB0dXJuZWQgYmFjaywgYW5kIHdoZW4gaGUgZm91bmQgdGhhdCBNYXJjZWxsdXMgaGFkIGJlZW4gZm9yY2VkIHRvIHJlZ2lzdGVyIHRoZSByZW1pc3Npb24sIGhlIGFza2VkIGZvciB0aGUgdGFibGV0cyBhbmQgZXJhc2VkIHRoZSBlbnRyeSwgd2hpbGUgTWFyY2VsbHVzIGhpbXNlbGYgc3Rvb2QgYnkgYW5kIHNhaWQgbm90aGluZy4gQWZ0ZXIgdGhpcyBoYWQgYmVlbiBkb25lLCBDYXRvIGNvbmR1Y3RlZCBNYXJjZWxsdXMgYXdheSBmcm9tIHRoZSB0cmVhc3VyeSBhbmQgYnJvdWdodCBoaW0gdG8gaGlzIGhvdXNlLCBhbmQgTWFyY2VsbHVzIGhhZCBubyB3b3JkIG9mIGJsYW1lIGZvciBoaW0gZWl0aGVyIHRoZW4gb3IgYWZ0ZXJ3YXJkcywgYnV0IGNvbnRpbnVlZCBoaXMgaW50aW1hdGUgZnJpZW5kc2hpcCB1cCB0byB0aGUgZW5kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBsYXN0IGRheSBvZiBoaXMgdGVybSBvZiBvZmZpY2UsIGFmdGVyIGhlIGhhZCBiZWVuIGVzY29ydGVkIHRvIGhpcyBob3VzZSBieSBhbG1vc3QgdGhlIHdob2xlIGJvZHkgb2YgY2l0aXplbnMsIGhlIGhlYXJkIHRoYXQgbWFueSBmcmllbmRzIG9mIE1hcmNlbGx1cyBhbmQgbWVuIG9mIGluZmx1ZW5jZSBoYWQgY2xvc2VseSBiZXNldCBoaW0gaW4gdGhlIHRyZWFzdXJ5LCBhbmQgd2VyZSB0cnlpbmcgdG8gZm9yY2UgaGltIHRvIHJlZ2lzdGVyIHNvbWUgcmVtaXNzaW9uIG9mIG1vbmV5cyBkdWUuIE5vdywgTWFyY2VsbHVzIGhhZCBiZWVuIGEgZnJpZW5kIG9mIENhdG8gZnJvbSBib3lob29kLCBhbmQgd2hlbiBhc3NvY2lhdGVkIHdpdGggaGltIGhhZCBiZWVuIGEgbW9zdCBleGNlbGxlbnQgbWFnaXN0cmF0ZS4gV2hlbiBhY3RpbmcgYnkgaGltc2VsZiBob3dldmVyLCBoZSB3YXMgbGVkIGJ5IGEgZmVlbGluZyBvZiBkZWZlcmVuY2UgdG8gYmUgY29tcGxhaXNhbnQgdG93YXJkcyBzdXBwbGlhbnRzLCBhbmQgd2FzIGluY2xpbmVkIHRvIGdyYW50IGV2ZXJ5IGZhdm91ci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRoZW4sIENhdG8gdHVybmVkIGJhY2ssIGFuZCB3aGVuIGhlIGZvdW5kIHRoYXQgTWFyY2VsbHVzIGhhZCBiZWVuIGZvcmNlZCB0byByZWdpc3RlciB0aGUgcmVtaXNzaW9uLCBoZSBhc2tlZCBmb3IgdGhlIHRhYmxldHMgYW5kIGVyYXNlZCB0aGUgZW50cnksIHdoaWxlIE1hcmNlbGx1cyBoaW1zZWxmIHN0b29kIGJ5IGFuZCBzYWlkIG5vdGhpbmcuIEFmdGVyIHRoaXMgaGFkIGJlZW4gZG9uZSwgQ2F0byBjb25kdWN0ZWQgTWFyY2VsbHVzIGF3YXkgZnJvbSB0aGUgdHJlYXN1cnkgYW5kIGJyb3VnaHQgaGltIHRvIGhpcyBob3VzZSwgYW5kIE1hcmNlbGx1cyBoYWQgbm8gd29yZCBvZiBibGFtZSBmb3IgaGltIGVpdGhlciB0aGVuIG9yIGFmdGVyd2FyZHMsIGJ1dCBjb250aW51ZWQgaGlzIGludGltYXRlIGZyaWVuZHNoaXAgdXAgdG8gdGhlIGVuZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgbm90IGV2ZW4gYWZ0ZXIgaGUgaGFkIGxhaWQgZG93biB0aGUgcXVhZXN0b3JzaGlwIGRpZCBDYXRvIGxlYXZlIHRoZSB0cmVhc3VyeSBkZXN0aXR1dGUgb2YgaGlzIHdhdGNoZnVsIGNhcmUsIGJ1dCBzbGF2ZXMgb2YgaGlzIHdlcmUgdGhlcmUgZXZlcnkgZGF5IGNvcHlpbmcgdGhlIHRyYW5zYWN0aW9ucywgYW5kIGhlIGhpbXNlbGYgcGFpZCBmaXZlIHRhbGVudHMgZm9yIGJvb2tzIGNvbnRhaW5pbmcgYWNjb3VudHMgb2YgdGhlIHB1YmxpYyBidXNpbmVzcyBmcm9tIHRoZSB0aW1lcyBvZiBTdWxsYSBkb3duIHRvIGhpcyBvd24gcXVhZXN0b3JzaGlwLCBhbmQgYWx3YXlzIGhhZCB0aGVtIGluIGhhbmQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIG5vdCBldmVuIGFmdGVyIGhlIGhhZCBsYWlkIGRvd24gdGhlIHF1YWVzdG9yc2hpcCBkaWQgQ2F0byBsZWF2ZSB0aGUgdHJlYXN1cnkgZGVzdGl0dXRlIG9mIGhpcyB3YXRjaGZ1bCBjYXJlLCBidXQgc2xhdmVzIG9mIGhpcyB3ZXJlIHRoZXJlIGV2ZXJ5IGRheSBjb3B5aW5nIHRoZSB0cmFuc2FjdGlvbnMsIGFuZCBoZSBoaW1zZWxmIHBhaWQgZml2ZSB0YWxlbnRzIGZvciBib29rcyBjb250YWluaW5nIGFjY291bnRzIG9mIHRoZSBwdWJsaWMgYnVzaW5lc3MgZnJvbSB0aGUgdGltZXMgb2YgU3VsbGEgZG93biB0byBoaXMgb3duIHF1YWVzdG9yc2hpcCwgYW5kIGFsd2F5cyBoYWQgdGhlbSBpbiBoYW5kLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSB1c2VkIHRvIGJlIHRoZSBmaXJzdCB0byByZWFjaCB0aGUgc2VuYXRlIGFuZCB0aGUgbGFzdCB0byBsZWF2ZSBpdDsgYW5kIG9mdGVuLCB3aGlsZSB0aGUgb3RoZXIgc2VuYXRvcnMgd2VyZSBzbG93bHkgYXNzZW1ibGluZywgaGUgd291bGQgc2l0IGFuZCByZWFkIHF1aWV0bHksIGhvbGRpbmcgaGlzIHRvZ2EgaW4gZnJvbnQgb2YgdGhlIGJvb2suIEhlIG5ldmVyIGxlZnQgdGhlIGNpdHkgd2hlbiB0aGUgc2VuYXRlIHdhcyBpbiBzZXNzaW9uLiBCdXQgYWZ0ZXJ3YXJkcywgd2hlbiBQb21wZXkgYW5kIGhpcyBmcmllbmRzIHNhdyB0aGF0IGhlIGNvdWxkIG5ldmVyIGJlIHByZXZhaWxlZCB1cG9uIG9yIGZvcmNlZCBmcm9tIGhpcyBwb3NpdGlvbiBpbiBhbnkgdW5qdXN0IG1lYXN1cmVzIHdoaWNoIHRoZXkgaGFkIGF0IGhlYXJ0LCB0aGV5IHdvdWxkIGNvbnRyaXZlIHRvIGRyYXcgaGltIGF3YXkgYnkgc3VuZHJ5IGxlZ2FsIGFkdm9jYWNpZXMgZm9yIGZyaWVuZHMsIG9yIGFyYml0cmF0aW9ucywgb3IgYnVzaW5lc3MgbWF0dGVycy4gQWNjb3JkaW5nbHksIENhdG8gcXVpY2tseSBwZXJjZWl2ZWQgdGhlaXIgZGVzaWduIGFuZCByZWZ1c2VkIGFsbCBzdWNoIGFwcGxpY2F0aW9ucywgYW5kIG1hZGUgaXQgYSBydWxlIHRvIGhhdmUgbm8gb3RoZXIgYnVzaW5lc3Mgb24gaGFuZCB3aGlsZSB0aGUgc2VuYXRlIHdhcyBpbiBzZXNzaW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgd2FzIG5laXRoZXIgZm9yIHRoZSBzYWtlIG9mIHJlcHV0YXRpb24sIG5vciB0byBnYWluIHJpY2hlcywgbm9yIGFjY2lkZW50YWxseSBhbmQgYnkgY2hhbmNlLCBsaWtlIHNvbWUgb3RoZXJzLCB0aGF0IGhlIHRocmV3IGhpbXNlbGYgaW50byB0aGUgbWFuYWdlbWVudCBvZiBjaXZpYyBhZmZhaXJzLCBidXQgaGUgY2hvc2UgYSBwdWJsaWMgY2FyZWVyIGFzIHRoZSBwcm9wZXIgdGFzayBmb3IgYSBnb29kIG1hbiwgYW5kIHRob3VnaHQgdGhhdCBoZSBvdWdodCB0byBiZSBtb3JlIGF0dGVudGl2ZSB0byB0aGUgY29tbW9uIGludGVyZXN0cyB0aGFuIHRoZSBiZWUgdG8gaXRzIGhvbmV5LiBBbmQgc28gaGUgd2FzIGNhcmVmdWwgdG8gaGF2ZSB0aGUgYWZmYWlycyBvZiB0aGUgcHJvdmluY2VzIGFuZCBkZWNyZWVzIGFuZCB0cmlhbHMgYW5kIHRoZSBtb3N0IGltcG9ydGFudCBtZWFzdXJlcyBzZW50IHRvIGhpbSBieSBoaXMgY29ubmVjdGlvbnMgYW5kIGZyaWVuZHMgaW4gZXZlcnkgcGxhY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgdXNlZCB0byBiZSB0aGUgZmlyc3QgdG8gcmVhY2ggdGhlIHNlbmF0ZSBhbmQgdGhlIGxhc3QgdG8gbGVhdmUgaXQ7IGFuZCBvZnRlbiwgd2hpbGUgdGhlIG90aGVyIHNlbmF0b3JzIHdlcmUgc2xvd2x5IGFzc2VtYmxpbmcsIGhlIHdvdWxkIHNpdCBhbmQgcmVhZCBxdWlldGx5LCBob2xkaW5nIGhpcyB0b2dhIGluIGZyb250IG9mIHRoZSBib29rLiBIZSBuZXZlciBsZWZ0IHRoZSBjaXR5IHdoZW4gdGhlIHNlbmF0ZSB3YXMgaW4gc2Vzc2lvbi4gQnV0IGFmdGVyd2FyZHMsIHdoZW4gUG9tcGV5IGFuZCBoaXMgZnJpZW5kcyBzYXcgdGhhdCBoZSBjb3VsZCBuZXZlciBiZSBwcmV2YWlsZWQgdXBvbiBvciBmb3JjZWQgZnJvbSBoaXMgcG9zaXRpb24gaW4gYW55IHVuanVzdCBtZWFzdXJlcyB3aGljaCB0aGV5IGhhZCBhdCBoZWFydCwgdGhleSB3b3VsZCBjb250cml2ZSB0byBkcmF3IGhpbSBhd2F5IGJ5IHN1bmRyeSBsZWdhbCBhZHZvY2FjaWVzIGZvciBmcmllbmRzLCBvciBhcmJpdHJhdGlvbnMsIG9yIGJ1c2luZXNzIG1hdHRlcnMuIEFjY29yZGluZ2x5LCBDYXRvIHF1aWNrbHkgcGVyY2VpdmVkIHRoZWlyIGRlc2lnbiBhbmQgcmVmdXNlZCBhbGwgc3VjaCBhcHBsaWNhdGlvbnMsIGFuZCBtYWRlIGl0IGEgcnVsZSB0byBoYXZlIG5vIG90aGVyIGJ1c2luZXNzIG9uIGhhbmQgd2hpbGUgdGhlIHNlbmF0ZSB3YXMgaW4gc2Vzc2lvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgbmVpdGhlciBmb3IgdGhlIHNha2Ugb2YgcmVwdXRhdGlvbiwgbm9yIHRvIGdhaW4gcmljaGVzLCBub3IgYWNjaWRlbnRhbGx5IGFuZCBieSBjaGFuY2UsIGxpa2Ugc29tZSBvdGhlcnMsIHRoYXQgaGUgdGhyZXcgaGltc2VsZiBpbnRvIHRoZSBtYW5hZ2VtZW50IG9mIGNpdmljIGFmZmFpcnMsIGJ1dCBoZSBjaG9zZSBhIHB1YmxpYyBjYXJlZXIgYXMgdGhlIHByb3BlciB0YXNrIGZvciBhIGdvb2QgbWFuLCBhbmQgdGhvdWdodCB0aGF0IGhlIG91Z2h0IHRvIGJlIG1vcmUgYXR0ZW50aXZlIHRvIHRoZSBjb21tb24gaW50ZXJlc3RzIHRoYW4gdGhlIGJlZSB0byBpdHMgaG9uZXkuIEFuZCBzbyBoZSB3YXMgY2FyZWZ1bCB0byBoYXZlIHRoZSBhZmZhaXJzIG9mIHRoZSBwcm92aW5jZXMgYW5kIGRlY3JlZXMgYW5kIHRyaWFscyBhbmQgdGhlIG1vc3QgaW1wb3J0YW50IG1lYXN1cmVzIHNlbnQgdG8gaGltIGJ5IGhpcyBjb25uZWN0aW9ucyBhbmQgZnJpZW5kcyBpbiBldmVyeSBwbGFjZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25lIHRpbWUgaGUgb3Bwb3NlZCBDbG9kaXVzIHRoZSBkZW1hZ29ndWUsIHdobyB3YXMgcmFpc2luZyBhZ2l0YXRpb24gYW5kIGNvbmZ1c2lvbiBhcyBhIHByZWx1ZGUgdG8gZ3JlYXQgY2hhbmdlcywgYW5kIHdhcyBjYWx1bW5pYXRpbmcgdG8gdGhlIHBlb3BsZSBwcmllc3RzIGFuZCBwcmllc3Rlc3NlcywgYW1vbmcgd2hvbSBGYWJpYSwgYSBzaXN0ZXIgb2YgQ2ljZXJvJ3Mgd2lmZSBUZXJlbnRpYSwgd2FzIGluIGRhbmdlciBvZiBjb252aWN0aW9uLiBCdXQgQ2F0byBwdXQgQ2xvZGl1cyB0byBzdWNoIHNoYW1lIHRoYXQgaGUgd2FzIGZvcmNlZCB0byBzdGVhbCBhd2F5IGZyb20gdGhlIGNpdHk7IGFuZCB3aGVuIENpY2VybyB0aGFua2VkIGhpbSwgQ2F0byB0b2xkIGhpbSBoZSBvdWdodCB0byBiZSB0aGFua2Z1bCB0byB0aGUgY2l0eSwgc2luY2UgaXQgd2FzIGZvciBoZXIgc2FrZSB0aGF0IGFsbCBoaXMgcHVibGljIHdvcmsgd2FzIGRvbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMgaGUgd2FzIGhlbGQgaW4gaGlnaCByZXB1dGUsIHNvIHRoYXQgYW4gb3JhdG9yLCBhdCBhIHRyaWFsIHdoZXJlIHRoZSB0ZXN0aW1vbnkgb2YgYSBzaW5nbGUgd2l0bmVzcyB3YXMgaW50cm9kdWNlZCwgdG9sZCB0aGUganVyb3JzIHRoYXQgaXQgd2FzIG5vdCByaWdodCB0byBnaXZlIGhlZWQgdG8gYSBzaW5nbGUgd2l0bmVzcywgbm90IGV2ZW4gaWYgaGUgd2VyZSBDYXRvIDsgYW5kIG1hbnkgYWxyZWFkeSwgd2hlbiBzcGVha2luZyBvZiBtYXR0ZXJzIHRoYXQgd2VyZSBzdHJhbmdlIGFuZCBpbmNyZWRpYmxlLCB3b3VsZCBzYXksIGFzIHRob3VnaCB1c2luZyBhIHByb3ZlcmIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBpcyBub3QgdG8gYmUgYmVsaWV2ZWQgZXZlbiB0aG91Z2ggQ2F0byBzYXlzIGl0LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2Fpbiwgd2hlbiBhIGNvcnJ1cHQgYW5kIGV4dHJhdmFnYW50IG1hbiB3YXMgZXhwYXRpYXRpbmcgaW4gdGhlIHNlbmF0ZSBvbiBmcnVnYWxpdHkgYW5kIHNlbGYtcmVzdHJhaW50LCBBbW5hZXVzIHNwcmFuZyB0byBoaXMgZmVldCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaG8gY2FuIGVuZHVyZSBpdCwgbXkgbWFuLCB3aGVuIHlvdSBzdXAgbGlrZSBMdWN1bGx1cywgYnVpbGQgbGlrZSBDcmFzc3VzLCBhbmQgeWV0IGhhcmFuZ3VlIHVzIGxpa2UgQ2F0byA/PC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDQwLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THVjdWxsdXM8L3RpdGxlPiwgeGwuIDM8L2JpYmw+Ljwvbm90ZT4gQW5kIG90aGVyIG1lbiBhbHNvIHdobyB3ZXJlIGRlZ3JhZGVkIGFuZCBsaWNlbnRpb3VzIGluIHRoZWlyIGxpdmVzLCBidXQgbG9mdHkgYW5kIHNldmVyZSBpbiB0aGVpciBzcGVlY2gsIHdlcmUgbW9ja2luZ2x5IGNhbGxlZCBDYXRvcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uZSB0aW1lIGhlIG9wcG9zZWQgQ2xvZGl1cyB0aGUgZGVtYWdvZ3VlLCB3aG8gd2FzIHJhaXNpbmcgYWdpdGF0aW9uIGFuZCBjb25mdXNpb24gYXMgYSBwcmVsdWRlIHRvIGdyZWF0IGNoYW5nZXMsIGFuZCB3YXMgY2FsdW1uaWF0aW5nIHRvIHRoZSBwZW9wbGUgcHJpZXN0cyBhbmQgcHJpZXN0ZXNzZXMsIGFtb25nIHdob20gRmFiaWEsIGEgc2lzdGVyIG9mIENpY2VybydzIHdpZmUgVGVyZW50aWEsIHdhcyBpbiBkYW5nZXIgb2YgY29udmljdGlvbi4gQnV0IENhdG8gcHV0IENsb2RpdXMgdG8gc3VjaCBzaGFtZSB0aGF0IGhlIHdhcyBmb3JjZWQgdG8gc3RlYWwgYXdheSBmcm9tIHRoZSBjaXR5OyBhbmQgd2hlbiBDaWNlcm8gdGhhbmtlZCBoaW0sIENhdG8gdG9sZCBoaW0gaGUgb3VnaHQgdG8gYmUgdGhhbmtmdWwgdG8gdGhlIGNpdHksIHNpbmNlIGl0IHdhcyBmb3IgaGVyIHNha2UgdGhhdCBhbGwgaGlzIHB1YmxpYyB3b3JrIHdhcyBkb25lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMgaGUgd2FzIGhlbGQgaW4gaGlnaCByZXB1dGUsIHNvIHRoYXQgYW4gb3JhdG9yLCBhdCBhIHRyaWFsIHdoZXJlIHRoZSB0ZXN0aW1vbnkgb2YgYSBzaW5nbGUgd2l0bmVzcyB3YXMgaW50cm9kdWNlZCwgdG9sZCB0aGUganVyb3JzIHRoYXQgaXQgd2FzIG5vdCByaWdodCB0byBnaXZlIGhlZWQgdG8gYSBzaW5nbGUgd2l0bmVzcywgbm90IGV2ZW4gaWYgaGUgd2VyZSBDYXRvIDsgYW5kIG1hbnkgYWxyZWFkeSwgd2hlbiBzcGVha2luZyBvZiBtYXR0ZXJzIHRoYXQgd2VyZSBzdHJhbmdlIGFuZCBpbmNyZWRpYmxlLCB3b3VsZCBzYXksIGFzIHRob3VnaCB1c2luZyBhIHByb3ZlcmIsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGlzIG5vdCB0byBiZSBiZWxpZXZlZCBldmVuIHRob3VnaCBDYXRvIHNheXMgaXQuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIGEgY29ycnVwdCBhbmQgZXh0cmF2YWdhbnQgbWFuIHdhcyBleHBhdGlhdGluZyBpbiB0aGUgc2VuYXRlIG9uIGZydWdhbGl0eSBhbmQgc2VsZi1yZXN0cmFpbnQsIEFtbmFldXMgc3ByYW5nIHRvIGhpcyBmZWV0IGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hvIGNhbiBlbmR1cmUgaXQsIG15IG1hbiwgd2hlbiB5b3Ugc3VwIGxpa2UgTHVjdWxsdXMsIGJ1aWxkIGxpa2UgQ3Jhc3N1cywgYW5kIHlldCBoYXJhbmd1ZSB1cyBsaWtlIENhdG8gPzwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gNDAuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHhsLiAzPC9iaWJsPi48L25vdGU+IEFuZCBvdGhlciBtZW4gYWxzbyB3aG8gd2VyZSBkZWdyYWRlZCBhbmQgbGljZW50aW91cyBpbiB0aGVpciBsaXZlcywgYnV0IGxvZnR5IGFuZCBzZXZlcmUgaW4gdGhlaXIgc3BlZWNoLCB3ZXJlIG1vY2tpbmdseSBjYWxsZWQgQ2F0b3MuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gNDAuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHhsLiAzPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1czwvdGl0bGU+LCB4bC4gMzxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRob3VnaCBtYW55IGludml0ZWQgaGltIHRvIGJlY29tZSBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSBoZSBkaWQgbm90IHRoaW5rIGl0IHJpZ2h0IHRvIGV4cGVuZCB0aGUgZm9yY2Ugb2YgYSBncmVhdCBhbmQgcG93ZXJmdWwgbWFnaXN0cmFjeSwgYW55IG1vcmUgdGhhbiB0aGF0IG9mIGEgc3Ryb25nIG1lZGljaW5lLCBvbiBtYXR0ZXJzIHRoYXQgZGlkIG5vdCByZXF1aXJlIGl0LiBBbmQgYXQgdGhlIHNhbWUgdGltZSwgYmVpbmcgYXQgbGVpc3VyZSBmcm9tIGhpcyBwdWJsaWMgZHV0aWVzLCBoZSB0b29rIGJvb2tzIGFuZCBwaGlsb3NvcGhlcnMgd2l0aCBoaW0gYW5kIHNldCBvdXQgZm9yIEx1Y2FuaWEsIHdoZXJlIGhlIG93bmVkIGxhbmRzIGFmZm9yZGluZyBubyBtZWFuIHNvam91cm4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIG1lZXRpbmcgb24gdGhlIHJvYWQgbWFueSBiZWFzdHMgb2YgYnVyZGVuIHdpdGggYmFnZ2FnZSBhbmQgYXR0ZW5kYW50cywgYW5kIGxlYXJuaW5nIHRoYXQgTWV0ZWxsdXMgTmVwb3Mgd2FzIG9uIGhpcyB3YXkgYmFjayB0byBSb21lIHByZXBhcmVkIHRvIHN1ZSBmb3IgdGhlIHRyaWJ1bmVzaGlwLCBoZSBzdG9wcGVkIHdpdGhvdXQgYSB3b3JkLCBhbmQgYWZ0ZXIgd2FpdGluZyBhIGxpdHRsZSB3aGlsZSBvcmRlcmVkIGhpcyBjb21wYW55IHRvIHR1cm4gYmFjay4gSGlzIGZyaWVuZHMgd2VyZSBhbWF6ZWQgYXQgdGhpcywgd2hlcmV1cG9uIGhlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG8geWUgbm90IGtub3cgdGhhdCBldmVuIG9mIGhpbXNlbGYgTWV0ZWxsdXMgaXMgdG8gYmUgZmVhcmVkIGJ5IHJlYXNvbiBvZiBoaXMgaW5mYXR1YXRpb24/IEFuZCBub3cgdGhhdCBoZSBjb21lcyBieSB0aGUgYWR2aWNlIG9mIFBvbXBleSBoZSB3aWxsIGZhbGwgdXBvbiB0aGUgc3RhdGUgbGlrZSBhIHRodW5kZXJib2x0IGFuZCB0aHJvdyBldmVyeXRoaW5nIGludG8gY29uZnVzaW9uLiAKCQkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgbm8gdGltZSwgdGhlbiwgZm9yIGEgbGVpc3VyZWx5IHNvam91cm4gaW4gdGhlIGNvdW50cnksIGJ1dCB3ZSBtdXN0IG92ZXJwb3dlciB0aGUgbWFuLCBvciBkaWUgaG9ub3VyYWJseSBpbiBhIHN0cnVnZ2xlIGZvciBvdXIgbGliZXJ0aWVzLjwvcT4gTmV2ZXJ0aGVsZXNzLCBvbiB0aGUgYWR2aWNlIG9mIGhpcyBmcmllbmRzLCBoZSB3ZW50IGZpcnN0IHRvIGhpcyBlc3RhdGVzIGFuZCB0YXJyaWVkIHRoZXJlIGEgc2hvcnQgdGltZSwgYW5kIHRoZW4gcmV0dXJuZWQgdG8gdGhlIGNpdHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjMgQi5DLjwvbm90ZT4gSXQgd2FzIGV2ZW5pbmcgd2hlbiBoZSBhcnJpdmVkLCBhbmQgYXMgc29vbiBhcyBkYXkgZGF3bmVkIGhlIHdlbnQgZG93biBpbnRvIHRoZSBmb3J1bSB0byBzdWUgZm9yIGEgdHJpYnVuZXNoaXAsIHRoYXQgaGUgbWlnaHQgYXJyYXkgaGltc2VsZiBhZ2FpbnN0IE1ldGVsbHVzLiBGb3IgdGhlIHN0cmVuZ3RoIG9mIHRoYXQgb2ZmaWNlIGlzIG5lZ2F0aXZlIHJhdGhlciB0aGFuIHBvc2l0aXZlOyBhbmQgaWYgYWxsIHRoZSB0cmlidW5lcyBzYXZlIG9uZSBzaG91bGQgdm90ZSBmb3IgYSBtZWFzdXJlLCB0aGUgcG93ZXIgbGllcyB3aXRoIHRoZSBvbmUgd2hvIHdpbGwgbm90IGdpdmUgaGlzIGNvbnNlbnQgb3IgcGVybWlzc2lvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhvdWdoIG1hbnkgaW52aXRlZCBoaW0gdG8gYmVjb21lIGEgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIGhlIGRpZCBub3QgdGhpbmsgaXQgcmlnaHQgdG8gZXhwZW5kIHRoZSBmb3JjZSBvZiBhIGdyZWF0IGFuZCBwb3dlcmZ1bCBtYWdpc3RyYWN5LCBhbnkgbW9yZSB0aGFuIHRoYXQgb2YgYSBzdHJvbmcgbWVkaWNpbmUsIG9uIG1hdHRlcnMgdGhhdCBkaWQgbm90IHJlcXVpcmUgaXQuIEFuZCBhdCB0aGUgc2FtZSB0aW1lLCBiZWluZyBhdCBsZWlzdXJlIGZyb20gaGlzIHB1YmxpYyBkdXRpZXMsIGhlIHRvb2sgYm9va3MgYW5kIHBoaWxvc29waGVycyB3aXRoIGhpbSBhbmQgc2V0IG91dCBmb3IgTHVjYW5pYSwgd2hlcmUgaGUgb3duZWQgbGFuZHMgYWZmb3JkaW5nIG5vIG1lYW4gc29qb3Vybi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIG1lZXRpbmcgb24gdGhlIHJvYWQgbWFueSBiZWFzdHMgb2YgYnVyZGVuIHdpdGggYmFnZ2FnZSBhbmQgYXR0ZW5kYW50cywgYW5kIGxlYXJuaW5nIHRoYXQgTWV0ZWxsdXMgTmVwb3Mgd2FzIG9uIGhpcyB3YXkgYmFjayB0byBSb21lIHByZXBhcmVkIHRvIHN1ZSBmb3IgdGhlIHRyaWJ1bmVzaGlwLCBoZSBzdG9wcGVkIHdpdGhvdXQgYSB3b3JkLCBhbmQgYWZ0ZXIgd2FpdGluZyBhIGxpdHRsZSB3aGlsZSBvcmRlcmVkIGhpcyBjb21wYW55IHRvIHR1cm4gYmFjay4gSGlzIGZyaWVuZHMgd2VyZSBhbWF6ZWQgYXQgdGhpcywgd2hlcmV1cG9uIGhlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EbyB5ZSBub3Qga25vdyB0aGF0IGV2ZW4gb2YgaGltc2VsZiBNZXRlbGx1cyBpcyB0byBiZSBmZWFyZWQgYnkgcmVhc29uIG9mIGhpcyBpbmZhdHVhdGlvbj8gQW5kIG5vdyB0aGF0IGhlIGNvbWVzIGJ5IHRoZSBhZHZpY2Ugb2YgUG9tcGV5IGhlIHdpbGwgZmFsbCB1cG9uIHRoZSBzdGF0ZSBsaWtlIGEgdGh1bmRlcmJvbHQgYW5kIHRocm93IGV2ZXJ5dGhpbmcgaW50byBjb25mdXNpb24uIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIG5vIHRpbWUsIHRoZW4sIGZvciBhIGxlaXN1cmVseSBzb2pvdXJuIGluIHRoZSBjb3VudHJ5LCBidXQgd2UgbXVzdCBvdmVycG93ZXIgdGhlIG1hbiwgb3IgZGllIGhvbm91cmFibHkgaW4gYSBzdHJ1Z2dsZSBmb3Igb3VyIGxpYmVydGllcy48L3E+IE5ldmVydGhlbGVzcywgb24gdGhlIGFkdmljZSBvZiBoaXMgZnJpZW5kcywgaGUgd2VudCBmaXJzdCB0byBoaXMgZXN0YXRlcyBhbmQgdGFycmllZCB0aGVyZSBhIHNob3J0IHRpbWUsIGFuZCB0aGVuIHJldHVybmVkIHRvIHRoZSBjaXR5LjwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIG5vIHRpbWUsIHRoZW4sIGZvciBhIGxlaXN1cmVseSBzb2pvdXJuIGluIHRoZSBjb3VudHJ5LCBidXQgd2UgbXVzdCBvdmVycG93ZXIgdGhlIG1hbiwgb3IgZGllIGhvbm91cmFibHkgaW4gYSBzdHJ1Z2dsZSBmb3Igb3VyIGxpYmVydGllcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDYzIEIuQy48L25vdGU+IEl0IHdhcyBldmVuaW5nIHdoZW4gaGUgYXJyaXZlZCwgYW5kIGFzIHNvb24gYXMgZGF5IGRhd25lZCBoZSB3ZW50IGRvd24gaW50byB0aGUgZm9ydW0gdG8gc3VlIGZvciBhIHRyaWJ1bmVzaGlwLCB0aGF0IGhlIG1pZ2h0IGFycmF5IGhpbXNlbGYgYWdhaW5zdCBNZXRlbGx1cy4gRm9yIHRoZSBzdHJlbmd0aCBvZiB0aGF0IG9mZmljZSBpcyBuZWdhdGl2ZSByYXRoZXIgdGhhbiBwb3NpdGl2ZTsgYW5kIGlmIGFsbCB0aGUgdHJpYnVuZXMgc2F2ZSBvbmUgc2hvdWxkIHZvdGUgZm9yIGEgbWVhc3VyZSwgdGhlIHBvd2VyIGxpZXMgd2l0aCB0aGUgb25lIHdobyB3aWxsIG5vdCBnaXZlIGhpcyBjb25zZW50IG9yIHBlcm1pc3Npb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0LCB0aGVuLCBDYXRvIGhhZCBvbmx5IGEgZmV3IG9mIGhpcyBmcmllbmRzIGFib3V0IGhpbTsgYnV0IHdoZW4gaGlzIHB1cnBvc2UgYmVjYW1lIGtub3duLCBpbiBhIGxpdHRsZSB3aGlsZSBhbGwgdGhlIG1lbiBvZiB3b3J0aCBhbmQgbm90ZSBmbG9ja2VkIHRvIGhpbSB3aXRoIGV4aG9ydGF0aW9ucyBhbmQgZW5jb3VyYWdlbWVudHMuIFRoZXkgZmVsdCB0aGF0IGhlIHdhcyBub3QgcmVjZWl2aW5nIGEgZmF2b3VyLCBidXQgY29uZmVycmluZyB0aGUgZ3JlYXRlc3QgZmF2b3VyIG9uIGhpcyBjb3VudHJ5IGFuZCB0aGUgbW9zdCByZXB1dGFibGUgb2YgaGlzIGZlbGxvdyBjaXRpemVuczsgZm9yIGhlIGhhZCBvZnRlbiByZWZ1c2VkIHRoZSBvZmZpY2Ugd2hlbiBoZSBjb3VsZCBoYXZlIGhhZCBpdCB3aXRob3V0IHRyb3VibGUsIGFuZCBub3cgc3VlZCBmb3IgaXQgYXQgaGlzIHBlcmlsIHRoYXQgaGUgbWlnaHQgY29udGVuZCBmb3IgdGhlIGxpYmVydGllcyBvZiB0aGUgc3RhdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIG1vcmVvdmVyLCB0aGF0IGhlIHdhcyBpbiBwZXJpbCBmcm9tIHRoZSBtYW55IHdobyBjcm93ZGVkIHVwb24gaGltIGluIHRoZWlyIHplYWwgYW5kIGFmZmVjdGlvbiwgYW5kIGNvdWxkIGhhcmRseSBtYWtlIGhpcyB3YXkgZm9yIHRoZSBjcm93ZCBpbnRvIHRoZSBmb3J1bS4gSGUgd2FzIGRlY2xhcmVkIHRyaWJ1bmUgd2l0aCBvdGhlcnM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCB0aGlzIHRpbWUgdGhlIG51bWJlciBvZiB0aGUgcG9wdWxhciB0cmlidW5lcyB3YXMgdGVuLjwvbm90ZT4gKGluY2x1ZGluZyBNZXRlbGx1cyksIGFuZCBzZWVpbmcgdGhhdCB0aGUgY29uc3VsYXIgZWxlY3Rpb25zIHdlcmUgYXR0ZW5kZWQgd2l0aCBicmliZXJ5LCBoZSBiZXJhdGVkIHRoZSBwZW9wbGU7IGFuZCBpbiBjb25jbHVkaW5nIGhpcyBzcGVlY2ggaGUgc3dvcmUgdGhhdCBoZSB3b3VsZCBwcm9zZWN1dGUgdGhlIGJyaWJlciwgd2hvZXZlciBoZSBtaWdodCBiZSwgbWFraW5nIGFuIGV4Y2VwdGlvbiBvbmx5IG9mIFNpbGFudXMgYmVjYXVzZSBvZiB0aGVpciByZWxhdGlvbnNoaXAuIEZvciBTaWxhbnVzIHdhcyB0aGUgaHVzYmFuZCBvZiBDYXRvJ3Mgc2lzdGVyIFNlcnZpbGlhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyByZWFzb24gaGUgbGV0IFNpbGFudXMgYWxvbmUsIGJ1dCBoZSBwcm9zZWN1dGVkIEx1Y2l1cyBNdXJlbmEgb24gdGhlIGNoYXJnZSBvZiBoYXZpbmcgc2VjdXJlZCBoaXMgZWxlY3Rpb24gdG8gdGhlIGNvbnN1bHNoaXAgd2l0aCBTaWxhbnVzIGJ5IGJyaWJlcnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2lsYW51cyBhbmQgTXVyZW5hIHdlcmUgY29uc3VscyBpbiA2MiBCLkMuPC9ub3RlPiBOb3csIHRoZXJlIHdhcyBhIGxhdyBieSB3aGljaCB0aGUgZGVmZW5kYW50IGNvdWxkIHNldCBhIG1hbiB0byB3YXRjaCB0aGUgcHJvc2VjdXRvciwgaW4gb3JkZXIgdGhhdCB0aGVyZSBtaWdodCBiZSBubyBzZWNyZXQgYWJvdXQgdGhlIG1hdGVyaWFsIHdoaWNoIGhlIHdhcyBjb2xsZWN0aW5nIGFuZCBwcmVwYXJpbmcgZm9yIHRoZSBwcm9zZWN1dGlvbi4gQWNjb3JkaW5nbHksIHRoZSBtYW4gYXBwb2ludGVkIGJ5IE11cmVuYSB0byB3YXRjaCBDYXRvIHdvdWxkIGZvbGxvdyBoaW0gYWJvdXQgYW5kIGtlZXAgaGltIHVuZGVyIG9ic2VydmF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBob3dldmVyLCBoZSBzYXcgdGhhdCBDYXRvIHdhcyBkb2luZyBub3RoaW5nIGluc2lkaW91c2x5IG9yIHVuanVzdGx5LCBidXQgd2FzIGhvbm91cmFibHkgYW5kIGNvbnNpZGVyYXRlbHkgZm9sbG93aW5nIGEgc3RyYWlnaHRmb3J3YXJkIGFuZCByaWdodGVvdXMgY291cnNlIGluIHRoZSBwcm9zZWN1dGlvbiwgaGUgaGFkIHN1Y2ggYWRtaXJhdGlvbiBmb3IgQ2F0bydzIGxvZnR5IHNwaXJpdCBhbmQgbm9ibGUgY2hhcmFjdGVyIHRoYXQgaGUgd291bGQgY29tZSB1cCB0byBoaW0gaW4gdGhlIGZvcnVtIG9yIGdvIHRvIGhpcyBob3VzZSBhbmQgYXNrIGhpbSB3aGV0aGVyIGhlIGludGVuZGVkIHRoYXQgZGF5IHRvIGF0dGVuZCB0byBhbnkgbWF0dGVycyBjb25uZWN0ZWQgd2l0aCB0aGUgcHJvc2VjdXRpb247IGFuZCBpZiBDYXRvIHNhaWQgbm8sIHRoZSBtYW4gd291bGQgdGFrZSBoaXMgd29yZCBhbmQgZ28gYXdheS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QsIHRoZW4sIENhdG8gaGFkIG9ubHkgYSBmZXcgb2YgaGlzIGZyaWVuZHMgYWJvdXQgaGltOyBidXQgd2hlbiBoaXMgcHVycG9zZSBiZWNhbWUga25vd24sIGluIGEgbGl0dGxlIHdoaWxlIGFsbCB0aGUgbWVuIG9mIHdvcnRoIGFuZCBub3RlIGZsb2NrZWQgdG8gaGltIHdpdGggZXhob3J0YXRpb25zIGFuZCBlbmNvdXJhZ2VtZW50cy4gVGhleSBmZWx0IHRoYXQgaGUgd2FzIG5vdCByZWNlaXZpbmcgYSBmYXZvdXIsIGJ1dCBjb25mZXJyaW5nIHRoZSBncmVhdGVzdCBmYXZvdXIgb24gaGlzIGNvdW50cnkgYW5kIHRoZSBtb3N0IHJlcHV0YWJsZSBvZiBoaXMgZmVsbG93IGNpdGl6ZW5zOyBmb3IgaGUgaGFkIG9mdGVuIHJlZnVzZWQgdGhlIG9mZmljZSB3aGVuIGhlIGNvdWxkIGhhdmUgaGFkIGl0IHdpdGhvdXQgdHJvdWJsZSwgYW5kIG5vdyBzdWVkIGZvciBpdCBhdCBoaXMgcGVyaWwgdGhhdCBoZSBtaWdodCBjb250ZW5kIGZvciB0aGUgbGliZXJ0aWVzIG9mIHRoZSBzdGF0ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIG1vcmVvdmVyLCB0aGF0IGhlIHdhcyBpbiBwZXJpbCBmcm9tIHRoZSBtYW55IHdobyBjcm93ZGVkIHVwb24gaGltIGluIHRoZWlyIHplYWwgYW5kIGFmZmVjdGlvbiwgYW5kIGNvdWxkIGhhcmRseSBtYWtlIGhpcyB3YXkgZm9yIHRoZSBjcm93ZCBpbnRvIHRoZSBmb3J1bS4gSGUgd2FzIGRlY2xhcmVkIHRyaWJ1bmUgd2l0aCBvdGhlcnM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IHRoaXMgdGltZSB0aGUgbnVtYmVyIG9mIHRoZSBwb3B1bGFyIHRyaWJ1bmVzIHdhcyB0ZW4uPC9ub3RlPiAoaW5jbHVkaW5nIE1ldGVsbHVzKSwgYW5kIHNlZWluZyB0aGF0IHRoZSBjb25zdWxhciBlbGVjdGlvbnMgd2VyZSBhdHRlbmRlZCB3aXRoIGJyaWJlcnksIGhlIGJlcmF0ZWQgdGhlIHBlb3BsZTsgYW5kIGluIGNvbmNsdWRpbmcgaGlzIHNwZWVjaCBoZSBzd29yZSB0aGF0IGhlIHdvdWxkIHByb3NlY3V0ZSB0aGUgYnJpYmVyLCB3aG9ldmVyIGhlIG1pZ2h0IGJlLCBtYWtpbmcgYW4gZXhjZXB0aW9uIG9ubHkgb2YgU2lsYW51cyBiZWNhdXNlIG9mIHRoZWlyIHJlbGF0aW9uc2hpcC4gRm9yIFNpbGFudXMgd2FzIHRoZSBodXNiYW5kIG9mIENhdG8ncyBzaXN0ZXIgU2VydmlsaWEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBoZSBsZXQgU2lsYW51cyBhbG9uZSwgYnV0IGhlIHByb3NlY3V0ZWQgTHVjaXVzIE11cmVuYSBvbiB0aGUgY2hhcmdlIG9mIGhhdmluZyBzZWN1cmVkIGhpcyBlbGVjdGlvbiB0byB0aGUgY29uc3Vsc2hpcCB3aXRoIFNpbGFudXMgYnkgYnJpYmVyeS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNpbGFudXMgYW5kIE11cmVuYSB3ZXJlIGNvbnN1bHMgaW4gNjIgQi5DLjwvbm90ZT4gTm93LCB0aGVyZSB3YXMgYSBsYXcgYnkgd2hpY2ggdGhlIGRlZmVuZGFudCBjb3VsZCBzZXQgYSBtYW4gdG8gd2F0Y2ggdGhlIHByb3NlY3V0b3IsIGluIG9yZGVyIHRoYXQgdGhlcmUgbWlnaHQgYmUgbm8gc2VjcmV0IGFib3V0IHRoZSBtYXRlcmlhbCB3aGljaCBoZSB3YXMgY29sbGVjdGluZyBhbmQgcHJlcGFyaW5nIGZvciB0aGUgcHJvc2VjdXRpb24uIEFjY29yZGluZ2x5LCB0aGUgbWFuIGFwcG9pbnRlZCBieSBNdXJlbmEgdG8gd2F0Y2ggQ2F0byB3b3VsZCBmb2xsb3cgaGltIGFib3V0IGFuZCBrZWVwIGhpbSB1bmRlciBvYnNlcnZhdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIGhlIHNhdyB0aGF0IENhdG8gd2FzIGRvaW5nIG5vdGhpbmcgaW5zaWRpb3VzbHkgb3IgdW5qdXN0bHksIGJ1dCB3YXMgaG9ub3VyYWJseSBhbmQgY29uc2lkZXJhdGVseSBmb2xsb3dpbmcgYSBzdHJhaWdodGZvcndhcmQgYW5kIHJpZ2h0ZW91cyBjb3Vyc2UgaW4gdGhlIHByb3NlY3V0aW9uLCBoZSBoYWQgc3VjaCBhZG1pcmF0aW9uIGZvciBDYXRvJ3MgbG9mdHkgc3Bpcml0IGFuZCBub2JsZSBjaGFyYWN0ZXIgdGhhdCBoZSB3b3VsZCBjb21lIHVwIHRvIGhpbSBpbiB0aGUgZm9ydW0gb3IgZ28gdG8gaGlzIGhvdXNlIGFuZCBhc2sgaGltIHdoZXRoZXIgaGUgaW50ZW5kZWQgdGhhdCBkYXkgdG8gYXR0ZW5kIHRvIGFueSBtYXR0ZXJzIGNvbm5lY3RlZCB3aXRoIHRoZSBwcm9zZWN1dGlvbjsgYW5kIGlmIENhdG8gc2FpZCBubywgdGhlIG1hbiB3b3VsZCB0YWtlIGhpcyB3b3JkIGFuZCBnbyBhd2F5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSB0cmlhbCB3YXMgaGVsZCwgQ2ljZXJvLCB3aG8gd2FzIGNvbnN1bCBhdCB0aGF0IHRpbWUgYW5kIG9uZSBvZiBNdXJlbmEncyBhZHZvY2F0ZXMsIHRvb2sgYWR2YW50YWdlIG9mIENhdG8ncyBmb25kbmVzcyBmb3IgdGhlIFN0b2ljcyB0byByYWlsIGFuZCBqZXN0IGF0IGxlbmd0aCBhYm91dCB0aG9zZSBwaGlsb3NvcGhlcnMgYW5kIHdoYXQgd2VyZSBjYWxsZWQgdGhlaXIgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5wYXJhZG94ZXMsPC9xPiB0aHVzIG1ha2luZyB0aGUganVyb3JzIGxhdWdoLiBDYXRvLCBhY2NvcmRpbmdseSwgYXMgd2UgYXJlIHRvbGQsIHNhaWQgd2l0aCBhIHNtaWxlIHRvIHRoZSBieXN0YW5kZXJzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IGZyaWVuZHMsIHdoYXQgYSBkcm9sbCBmZWxsb3cgb3VyIGNvbnN1bCBpcyE8L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFmdGVyIE11cmVuYSBoYWQgYmVlbiBhY3F1aXR0ZWQsIGhlIGRpZCBub3QgZmVlbCB0b3dhcmRzIENhdG8gYXMgYSBiYXNlIG9yIHNlbnNlbGVzcyBtYW4gbWlnaHQgaGF2ZSBkb25lOyBmb3IgZHVyaW5nIGhpcyBjb25zdWxzaGlwIGhlIGFza2VkIGhpcyBhZHZpY2UgaW4gdGhlIG1vc3QgaW1wb3J0YW50IG1hdHRlcnMsIGFuZCBpbiBvdGhlciB3YXlzIGNvbnN0YW50bHkgc2hvd2VkIGhpbSBob25vdXIgYW5kIHRydXN0LiBBbmQgQ2F0byBoaW1zZWxmIHdhcyByZXNwb25zaWJsZSBmb3IgdGhpczsgb24gdGhlIHRyaWJ1bmFsIGFuZCBpbiB0aGUgc2VuYXRlIGhlIHdhcyBzZXZlcmUgYW5kIHRlcnJpYmxlIGluIGhpcyBkZWZlbmNlIG9mIGp1c3RpY2UsIGJ1dCBhZnRlcndhcmRzIGhpcyBtYW5uZXIgdG93YXJkcyBhbGwgbWVuIHdhcyBiZW5ldm9sZW50IGFuZCBraW5kbHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHRyaWFsIHdhcyBoZWxkLCBDaWNlcm8sIHdobyB3YXMgY29uc3VsIGF0IHRoYXQgdGltZSBhbmQgb25lIG9mIE11cmVuYSdzIGFkdm9jYXRlcywgdG9vayBhZHZhbnRhZ2Ugb2YgQ2F0bydzIGZvbmRuZXNzIGZvciB0aGUgU3RvaWNzIHRvIHJhaWwgYW5kIGplc3QgYXQgbGVuZ3RoIGFib3V0IHRob3NlIHBoaWxvc29waGVycyBhbmQgd2hhdCB3ZXJlIGNhbGxlZCB0aGVpciAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGFyYWRveGVzLDwvcT4gdGh1cyBtYWtpbmcgdGhlIGp1cm9ycyBsYXVnaC4gQ2F0bywgYWNjb3JkaW5nbHksIGFzIHdlIGFyZSB0b2xkLCBzYWlkIHdpdGggYSBzbWlsZSB0byB0aGUgYnlzdGFuZGVyczogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IGZyaWVuZHMsIHdoYXQgYSBkcm9sbCBmZWxsb3cgb3VyIGNvbnN1bCBpcyE8L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciBNdXJlbmEgaGFkIGJlZW4gYWNxdWl0dGVkLCBoZSBkaWQgbm90IGZlZWwgdG93YXJkcyBDYXRvIGFzIGEgYmFzZSBvciBzZW5zZWxlc3MgbWFuIG1pZ2h0IGhhdmUgZG9uZTsgZm9yIGR1cmluZyBoaXMgY29uc3Vsc2hpcCBoZSBhc2tlZCBoaXMgYWR2aWNlIGluIHRoZSBtb3N0IGltcG9ydGFudCBtYXR0ZXJzLCBhbmQgaW4gb3RoZXIgd2F5cyBjb25zdGFudGx5IHNob3dlZCBoaW0gaG9ub3VyIGFuZCB0cnVzdC4gQW5kIENhdG8gaGltc2VsZiB3YXMgcmVzcG9uc2libGUgZm9yIHRoaXM7IG9uIHRoZSB0cmlidW5hbCBhbmQgaW4gdGhlIHNlbmF0ZSBoZSB3YXMgc2V2ZXJlIGFuZCB0ZXJyaWJsZSBpbiBoaXMgZGVmZW5jZSBvZiBqdXN0aWNlLCBidXQgYWZ0ZXJ3YXJkcyBoaXMgbWFubmVyIHRvd2FyZHMgYWxsIG1lbiB3YXMgYmVuZXZvbGVudCBhbmQga2luZGx5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CZWZvcmUgaGUgZW50ZXJlZCB1cG9uIGhpcyB0cmlidW5lc2hpcCwgYW5kIGR1cmluZyB0aGUgY29uc3Vsc2hpcCBvZiBDaWNlcm8sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NjMgQi5DLjwvbm90ZT4gaGUgbWFpbnRhaW5lZCB0aGUgYXV0aG9yaXR5IG9mIHRoYXQgbWFnaXN0cmF0ZSBpbiBtYW55IGNvbmZsaWN0cywgYW5kIGFib3ZlIGFsbCBpbiB0aGUgbWVhc3VyZXMgcmVsYXRpbmcgdG8gQ2F0aWxpbmUsIHdoaWNoIHByb3ZlZCB0aGUgbW9zdCBpbXBvcnRhbnQgYW5kIG1vc3QgZ2xvcmlvdXMgb2YgYWxsLCBoZSBicm91Z2h0IG1hdHRlcnMgdG8gYSBzdWNjZXNzZnVsIGlzc3VlLiBDYXRpbGluZSBoaW1zZWxmLCBuYW1lbHksIHdobyB3YXMgdHJ5aW5nIHRvIGJyaW5nIGFib3V0IGEgY29tcGxldGUgYW5kIGRlc3RydWN0aXZlIGNoYW5nZSBpbiB0aGUgUm9tYW4gc3RhdGUsIGFuZCB3YXMgc3RpcnJpbmcgdXAgYWxpa2Ugc2VkaXRpb25zIGFuZCB3YXJzLCB3YXMgY29udmljdGVkIGJ5IENpY2VybyBhbmQgZmxlZCB0aGUgY2l0eTsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IExlbnR1bHVzIGFuZCBDZXRoZWd1cyBhbmQgbWFueSBvdGhlcnMgd2l0aCB0aGVtIHRvb2sgb3ZlciB0aGUgY29uc3BpcmFjeSwgYW5kLCBjaGFyZ2luZyBDYXRpbGluZSB3aXRoIGNvd2FyZGljZSBhbmQgcGV0dGluZXNzIGluIGhpcyBkZXNpZ25zLCB3ZXJlIHRoZW1zZWx2ZXMgcGxhbm5pbmcgdG8gZGVzdHJveSB0aGUgY2l0eSB1dHRlcmx5IHdpdGggZmlyZSwgYW5kIHRvIHN1YnZlcnQgdGhlIGVtcGlyZSB3aXRoIHJldm9sdHMgb2YgbmF0aW9ucyBhbmQgZm9yZWlnbiB3YXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlaXIgc2NoZW1lcyB3ZXJlIGRpc2NvdmVyZWQsIGFuZCBDaWNlcm8gYnJvdWdodCB0aGUgbWF0dGVyIGJlZm9yZSB0aGUgc2VuYXRlIGZvciBkZWxpYmVyYXRpb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNy40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhZXNhcjwvdGl0bGU+LCB2aWkuIDQtdmlpaS4gMjwvYmlibD47IGFuZCB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMTAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DaWNlcm88L3RpdGxlPiwgeC4gZmY8L2JpYmw+Ljwvbm90ZT4gVGhlIGZpcnN0IHNwZWFrZXIsIFNpbGFudXMsIGV4cHJlc3NlZCB0aGUgb3BpbmlvbiB0aGF0IHRoZSBtZW4gb3VnaHQgdG8gc3VmZmVyIHRoZSBleHRyZW1lc3QgZmF0ZSwgYW5kIHRob3NlIHdobyBmb2xsb3dlZCBoaW0gaW4gdHVybiB3ZXJlIG9mIHRoZSBzYW1lIG1pbmQsIHVudGlsIGl0IGNhbWUgdG8gQ2Flc2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgbm93IHJvc2UsIGFuZCBzaW5jZSBoZSB3YXMgYSBwb3dlcmZ1bCBzcGVha2VyIGFuZCB3aXNoZWQgdG8gaW5jcmVhc2UgZXZlcnkgY2hhbmdlIGFuZCBjb21tb3Rpb24gaW4gdGhlIHN0YXRlIGFzIHNvIG11Y2ggc3R1ZmYgZm9yIGhpcyBvd24gZGVzaWducywgcmF0aGVyIHRoYW4gdG8gYWxsb3cgdGhlbSB0byBiZSBxdWVuY2hlZCwgaGUgdXJnZWQgbWFueSBwZXJzdWFzaXZlIGFuZCBodW1hbmUgYXJndW1lbnRzLiBIZSB3b3VsZCBub3QgaGVhciBvZiB0aGUgbWVuIGJlaW5nIHB1dCB0byBkZWF0aCB3aXRob3V0IGEgdHJpYWwsIGJ1dCBmYXZvdXJlZCB0aGVpciBiZWluZyBrZXB0IGluIGNsb3NlIGN1c3RvZHksIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoZSB3cm91Z2h0IHN1Y2ggYSBjaGFuZ2UgaW4gdGhlIG9waW5pb25zIG9mIHRoZSBzZW5hdGUsIHdoaWNoIHdhcyBpbiBmZWFyIG9mIHRoZSBwZW9wbGUsIHRoYXQgZXZlbiBTaWxhbnVzIHJlY2FudGVkIGFuZCBzYWlkIHRoYXQgaGUgdG9vIGhhZCBub3QgbWVhbnQgZGVhdGgsIGJ1dCBpbXByaXNvbm1lbnQ7IGZvciB0byBhIFJvbWFuIHRoaXMgd2FzIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmV4dHJlbWVzdDwvcT4gb2YgYWxsIGV2aWxzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QmVmb3JlIGhlIGVudGVyZWQgdXBvbiBoaXMgdHJpYnVuZXNoaXAsIGFuZCBkdXJpbmcgdGhlIGNvbnN1bHNoaXAgb2YgQ2ljZXJvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NjMgQi5DLjwvbm90ZT4gaGUgbWFpbnRhaW5lZCB0aGUgYXV0aG9yaXR5IG9mIHRoYXQgbWFnaXN0cmF0ZSBpbiBtYW55IGNvbmZsaWN0cywgYW5kIGFib3ZlIGFsbCBpbiB0aGUgbWVhc3VyZXMgcmVsYXRpbmcgdG8gQ2F0aWxpbmUsIHdoaWNoIHByb3ZlZCB0aGUgbW9zdCBpbXBvcnRhbnQgYW5kIG1vc3QgZ2xvcmlvdXMgb2YgYWxsLCBoZSBicm91Z2h0IG1hdHRlcnMgdG8gYSBzdWNjZXNzZnVsIGlzc3VlLiBDYXRpbGluZSBoaW1zZWxmLCBuYW1lbHksIHdobyB3YXMgdHJ5aW5nIHRvIGJyaW5nIGFib3V0IGEgY29tcGxldGUgYW5kIGRlc3RydWN0aXZlIGNoYW5nZSBpbiB0aGUgUm9tYW4gc3RhdGUsIGFuZCB3YXMgc3RpcnJpbmcgdXAgYWxpa2Ugc2VkaXRpb25zIGFuZCB3YXJzLCB3YXMgY29udmljdGVkIGJ5IENpY2VybyBhbmQgZmxlZCB0aGUgY2l0eTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBMZW50dWx1cyBhbmQgQ2V0aGVndXMgYW5kIG1hbnkgb3RoZXJzIHdpdGggdGhlbSB0b29rIG92ZXIgdGhlIGNvbnNwaXJhY3ksIGFuZCwgY2hhcmdpbmcgQ2F0aWxpbmUgd2l0aCBjb3dhcmRpY2UgYW5kIHBldHRpbmVzcyBpbiBoaXMgZGVzaWducywgd2VyZSB0aGVtc2VsdmVzIHBsYW5uaW5nIHRvIGRlc3Ryb3kgdGhlIGNpdHkgdXR0ZXJseSB3aXRoIGZpcmUsIGFuZCB0byBzdWJ2ZXJ0IHRoZSBlbXBpcmUgd2l0aCByZXZvbHRzIG9mIG5hdGlvbnMgYW5kIGZvcmVpZ24gd2Fycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVpciBzY2hlbWVzIHdlcmUgZGlzY292ZXJlZCwgYW5kIENpY2VybyBicm91Z2h0IHRoZSBtYXR0ZXIgYmVmb3JlIHRoZSBzZW5hdGUgZm9yIGRlbGliZXJhdGlvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNy40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHZpaS4gNC12aWlpLiAyPC9iaWJsPjsgYW5kIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDEwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgeC4gZmY8L2JpYmw+Ljwvbm90ZT4gVGhlIGZpcnN0IHNwZWFrZXIsIFNpbGFudXMsIGV4cHJlc3NlZCB0aGUgb3BpbmlvbiB0aGF0IHRoZSBtZW4gb3VnaHQgdG8gc3VmZmVyIHRoZSBleHRyZW1lc3QgZmF0ZSwgYW5kIHRob3NlIHdobyBmb2xsb3dlZCBoaW0gaW4gdHVybiB3ZXJlIG9mIHRoZSBzYW1lIG1pbmQsIHVudGlsIGl0IGNhbWUgdG8gQ2Flc2FyLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDcuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB2aWkuIDQtdmlpaS4gMjwvYmlibD47IGFuZCB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHZpaS4gNC12aWlpLiAyPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAxMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ljZXJvPC90aXRsZT4sIHguIGZmPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgeC4gZmY8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBub3cgcm9zZSwgYW5kIHNpbmNlIGhlIHdhcyBhIHBvd2VyZnVsIHNwZWFrZXIgYW5kIHdpc2hlZCB0byBpbmNyZWFzZSBldmVyeSBjaGFuZ2UgYW5kIGNvbW1vdGlvbiBpbiB0aGUgc3RhdGUgYXMgc28gbXVjaCBzdHVmZiBmb3IgaGlzIG93biBkZXNpZ25zLCByYXRoZXIgdGhhbiB0byBhbGxvdyB0aGVtIHRvIGJlIHF1ZW5jaGVkLCBoZSB1cmdlZCBtYW55IHBlcnN1YXNpdmUgYW5kIGh1bWFuZSBhcmd1bWVudHMuIEhlIHdvdWxkIG5vdCBoZWFyIG9mIHRoZSBtZW4gYmVpbmcgcHV0IHRvIGRlYXRoIHdpdGhvdXQgYSB0cmlhbCwgYnV0IGZhdm91cmVkIHRoZWlyIGJlaW5nIGtlcHQgaW4gY2xvc2UgY3VzdG9keSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoZSB3cm91Z2h0IHN1Y2ggYSBjaGFuZ2UgaW4gdGhlIG9waW5pb25zIG9mIHRoZSBzZW5hdGUsIHdoaWNoIHdhcyBpbiBmZWFyIG9mIHRoZSBwZW9wbGUsIHRoYXQgZXZlbiBTaWxhbnVzIHJlY2FudGVkIGFuZCBzYWlkIHRoYXQgaGUgdG9vIGhhZCBub3QgbWVhbnQgZGVhdGgsIGJ1dCBpbXByaXNvbm1lbnQ7IGZvciB0byBhIFJvbWFuIHRoaXMgd2FzIHRoZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZXh0cmVtZXN0PC9xPiBvZiBhbGwgZXZpbHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHN1Y2ggYSBjaGFuZ2UgYXMgdGhpcyBoYWQgYmVlbiB3cm91Z2h0IGFuZCBhbGwgdGhlIHNlbmF0b3JzIGhhZCBoYXN0ZW5lZCB0byBhZG9wdCB0aGUgbWlsZGVyIGFuZCBtb3JlIGh1bWFuZSBwZW5hbHR5LCBDYXRvIHJvc2UgdG8gZ2l2ZSBoaXMgb3BpbmlvbiwgYW5kIGxhdW5jaGVkIGF0IG9uY2UgaW50byBhIHBhc3Npb25hdGUgYW5kIGFuZ3J5IHNwZWVjaCwgYWJ1c2luZyBTaWxhbnVzIGZvciBoaXMgY2hhbmdlIG9mIG9waW5pb24sIGFuZCBhc3NhaWxpbmcgQ2Flc2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIsIGhlIHNhaWQsIHVuZGVyIGEgcG9wdWxhciBwcmV0ZXh0IGFuZCB3aXRoIGh1bWFuZSB3b3Jkcywgd2FzIHRyeWluZyB0byBzdWJ2ZXJ0IHRoZSBzdGF0ZTsgaGUgd2FzIHNlZWtpbmcgdG8gZnJpZ2h0ZW4gdGhlIHNlbmF0ZSBpbiBhIGNhc2Ugd2hlcmUgaGUgaGltc2VsZiBoYWQgbXVjaCB0byBmZWFyOyBhbmQgaGUgbWlnaHQgYmUgd2VsbCBjb250ZW50IGlmIGhlIHNob3VsZCBjb21lIG9mZiBndWlsdGxlc3Mgb2Ygd2hhdCBoYWQgYmVlbiBkb25lIGFuZCBmcmVlIGZyb20gc3VzcGljaW9uLCBzaW5jZSBoZSB3YXMgc28gb3Blbmx5IGFuZCByZWNrbGVzc2x5IHRyeWluZyB0byByZXNjdWUgdGhlIGNvbW1vbiBlbmVtaWVzLCB3aGlsZSBmb3IgaGlzIGNvdW50cnksIHdoaWNoIGhhZCBiZWVuIG9uIHRoZSBicmluayBvZiBydWluLCBhbmQgd2FzIHNvIGdvb2QgYW5kIGdyZWF0LCBoZSBjb25mZXNzZWQgdGhhdCBoZSBoYWQgbm8gcGl0eTsgYW5kIHlldCBmb3IgbWVuIHdobyBvdWdodCBub3QgdG8gaGF2ZSBsaXZlZCBvciBiZWVuIGJvcm4gZXZlbiwgaGUgd2FzIHNoZWRkaW5nIHRlYXJzIGFuZCBsYW1lbnRpbmcsIGFsdGhvdWdoIGJ5IHRoZWlyIGRlYXRocyB0aGV5IHdvdWxkIGZyZWUgdGhlIHN0YXRlIGZyb20gZ3JlYXQgc2xhdWdodGVyIGFuZCBwZXJpbHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgc3VjaCBhIGNoYW5nZSBhcyB0aGlzIGhhZCBiZWVuIHdyb3VnaHQgYW5kIGFsbCB0aGUgc2VuYXRvcnMgaGFkIGhhc3RlbmVkIHRvIGFkb3B0IHRoZSBtaWxkZXIgYW5kIG1vcmUgaHVtYW5lIHBlbmFsdHksIENhdG8gcm9zZSB0byBnaXZlIGhpcyBvcGluaW9uLCBhbmQgbGF1bmNoZWQgYXQgb25jZSBpbnRvIGEgcGFzc2lvbmF0ZSBhbmQgYW5ncnkgc3BlZWNoLCBhYnVzaW5nIFNpbGFudXMgZm9yIGhpcyBjaGFuZ2Ugb2Ygb3BpbmlvbiwgYW5kIGFzc2FpbGluZyBDYWVzYXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciwgaGUgc2FpZCwgdW5kZXIgYSBwb3B1bGFyIHByZXRleHQgYW5kIHdpdGggaHVtYW5lIHdvcmRzLCB3YXMgdHJ5aW5nIHRvIHN1YnZlcnQgdGhlIHN0YXRlOyBoZSB3YXMgc2Vla2luZyB0byBmcmlnaHRlbiB0aGUgc2VuYXRlIGluIGEgY2FzZSB3aGVyZSBoZSBoaW1zZWxmIGhhZCBtdWNoIHRvIGZlYXI7IGFuZCBoZSBtaWdodCBiZSB3ZWxsIGNvbnRlbnQgaWYgaGUgc2hvdWxkIGNvbWUgb2ZmIGd1aWx0bGVzcyBvZiB3aGF0IGhhZCBiZWVuIGRvbmUgYW5kIGZyZWUgZnJvbSBzdXNwaWNpb24sIHNpbmNlIGhlIHdhcyBzbyBvcGVubHkgYW5kIHJlY2tsZXNzbHkgdHJ5aW5nIHRvIHJlc2N1ZSB0aGUgY29tbW9uIGVuZW1pZXMsIHdoaWxlIGZvciBoaXMgY291bnRyeSwgd2hpY2ggaGFkIGJlZW4gb24gdGhlIGJyaW5rIG9mIHJ1aW4sIGFuZCB3YXMgc28gZ29vZCBhbmQgZ3JlYXQsIGhlIGNvbmZlc3NlZCB0aGF0IGhlIGhhZCBubyBwaXR5OyBhbmQgeWV0IGZvciBtZW4gd2hvIG91Z2h0IG5vdCB0byBoYXZlIGxpdmVkIG9yIGJlZW4gYm9ybiBldmVuLCBoZSB3YXMgc2hlZGRpbmcgdGVhcnMgYW5kIGxhbWVudGluZywgYWx0aG91Z2ggYnkgdGhlaXIgZGVhdGhzIHRoZXkgd291bGQgZnJlZSB0aGUgc3RhdGUgZnJvbSBncmVhdCBzbGF1Z2h0ZXIgYW5kIHBlcmlscy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpcyB0aGUgb25seSBzcGVlY2ggb2YgQ2F0byB3aGljaCBoYXMgYmVlbiBwcmVzZXJ2ZWQsIHdlIGFyZSB0b2xkLCBhbmQgaXRzIHByZXNlcnZhdGlvbiB3YXMgZHVlIHRvIENpY2VybyB0aGUgY29uc3VsLCB3aG8gaGFkIHByZXZpb3VzbHkgZ2l2ZW4gdG8gdGhvc2UgY2xlcmtzIHdobyBleGNlbGxlZCBpbiByYXBpZCB3cml0aW5nIGluc3RydWN0aW9uIGluIHRoZSB1c2Ugb2Ygc2lnbnMsIHdoaWNoLCBpbiBzbWFsbCBhbmQgc2hvcnQgZmlndXJlcywgY29tcHJpc2VkIHRoZSBmb3JjZSBvZiBtYW55IGxldHRlcnM7IHRoZXNlIGNsZXJrcyBoZSBoYWQgdGhlbiBkaXN0cmlidXRlZCBpbiB2YXJpb3VzIHBhcnRzIG9mIHRoZSBzZW5hdGUtaG91c2UuIEZvciB1cCB0byB0aGF0IHRpbWUgdGhlIFJvbWFucyBkaWQgbm90IGVtcGxveSBvciBldmVuIHBvc3Nlc3Mgd2hhdCBhcmUgY2FsbGVkIHNob3J0aGFuZCB3cml0ZXJzLCBidXQgdGhlbiBmb3IgdGhlIGZpcnN0IHRpbWUsIHdlIGFyZSB0b2xkLCB0aGUgZmlyc3Qgc3RlcHMgdG93YXJkIHRoZSBwcmFjdGljZSB3ZXJlIHRha2VuLiBCZSB0aGF0IGFzIGl0IG1heSwgQ2F0byBjYXJyaWVkIHRoZSBkYXkgYW5kIGNoYW5nZWQgdGhlIG9waW5pb25zIG9mIHRoZSBzZW5hdG9ycywgc28gdGhhdCB0aGV5IGNvbmRlbW5lZCB0aGUgbWVuIHRvIGRlYXRoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIG9ubHkgc3BlZWNoIG9mIENhdG8gd2hpY2ggaGFzIGJlZW4gcHJlc2VydmVkLCB3ZSBhcmUgdG9sZCwgYW5kIGl0cyBwcmVzZXJ2YXRpb24gd2FzIGR1ZSB0byBDaWNlcm8gdGhlIGNvbnN1bCwgd2hvIGhhZCBwcmV2aW91c2x5IGdpdmVuIHRvIHRob3NlIGNsZXJrcyB3aG8gZXhjZWxsZWQgaW4gcmFwaWQgd3JpdGluZyBpbnN0cnVjdGlvbiBpbiB0aGUgdXNlIG9mIHNpZ25zLCB3aGljaCwgaW4gc21hbGwgYW5kIHNob3J0IGZpZ3VyZXMsIGNvbXByaXNlZCB0aGUgZm9yY2Ugb2YgbWFueSBsZXR0ZXJzOyB0aGVzZSBjbGVya3MgaGUgaGFkIHRoZW4gZGlzdHJpYnV0ZWQgaW4gdmFyaW91cyBwYXJ0cyBvZiB0aGUgc2VuYXRlLWhvdXNlLiBGb3IgdXAgdG8gdGhhdCB0aW1lIHRoZSBSb21hbnMgZGlkIG5vdCBlbXBsb3kgb3IgZXZlbiBwb3NzZXNzIHdoYXQgYXJlIGNhbGxlZCBzaG9ydGhhbmQgd3JpdGVycywgYnV0IHRoZW4gZm9yIHRoZSBmaXJzdCB0aW1lLCB3ZSBhcmUgdG9sZCwgdGhlIGZpcnN0IHN0ZXBzIHRvd2FyZCB0aGUgcHJhY3RpY2Ugd2VyZSB0YWtlbi4gQmUgdGhhdCBhcyBpdCBtYXksIENhdG8gY2FycmllZCB0aGUgZGF5IGFuZCBjaGFuZ2VkIHRoZSBvcGluaW9ucyBvZiB0aGUgc2VuYXRvcnMsIHNvIHRoYXQgdGhleSBjb25kZW1uZWQgdGhlIG1lbiB0byBkZWF0aC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBzaW5jZSB3ZSBtdXN0IG5vdCBwYXNzIG92ZXIgZXZlbiB0aGUgc2xpZ2h0IHRva2VucyBvZiBjaGFyYWN0ZXIgd2hlbiB3ZSBhcmUgZGVsaW5lYXRpbmcgYXMgaXQgd2VyZSBhIGxpa2VuZXNzIG9mIHRoZSBzb3VsLCB0aGUgc3RvcnkgZ29lcyB0aGF0IG9uIHRoaXMgb2NjYXNpb24sIHdoZW4gQ2Flc2FyIHdhcyBlYWdlcmx5IGVuZ2FnZWQgaW4gYSBncmVhdCBzdHJ1Z2dsZSB3aXRoIENhdG8gYW5kIHRoZSBhdHRlbnRpb24gb2YgdGhlIHNlbmF0ZSB3YXMgZml4ZWQgdXBvbiB0aGUgdHdvIG1lbiwgYSBsaXR0bGUgbm90ZSB3YXMgYnJvdWdodCBpbiBmcm9tIG91dHNpZGUgdG8gQ2Flc2FyLiBDYXRvIHRyaWVkIHRvIGZpeCBzdXNwaWNpb24gdXBvbiB0aGUgbWF0dGVyIGFuZCBhbGxlZ2VkIHRoYXQgaXQgaGFkIHNvbWV0aGluZyB0byBkbyB3aXRoIHRoZSBjb25zcGlyYWN5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoJ3MgYW1iaWd1b3VzIHdvcmRzIGhlcmUgbXVzdCBiZSBpbnRlcnByZXRlZCBieSBjb21wYXJpc29uIHdpdGggdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA1LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzPC90aXRsZT4sIHYuIDIgZi48L2JpYmw+LCB3aGVyZSB0aGUgc2FtZSBzdG9yeSBpcyB0b2xkLjwvbm90ZT4gYW5kIGJhZGUgaGltIHJlYWQgdGhlIHdyaXRpbmcgYWxvdWQuIFRoZW4gQ2Flc2FyIGhhbmRlZCB0aGUgbm90ZSB0byBDYXRvLCB3aG8gc3Rvb2QgbmVhciBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIENhdG8gaGFkIHJlYWQgdGhlIG5vdGUsIHdoaWNoIHdhcyBhbiB1bmNoYXN0ZSBsZXR0ZXIgZnJvbSBoaXMgc2lzdGVyIFNlcnZpbGlhIHRvIENhZXNhciwgd2l0aCB3aG9tIHNoZSB3YXMgcGFzc2lvbmF0ZWx5IGFuZCBndWlsdGlseSBpbiBsb3ZlLCBoZSB0aHJldyBpdCB0byBDYWVzYXIsIHNheWluZywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UYWtlIGl0LCB0aG91IHNvdCw8L3E+IGFuZCB0aGVuIHJlc3VtZWQgaGlzIHNwZWVjaC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBzaW5jZSB3ZSBtdXN0IG5vdCBwYXNzIG92ZXIgZXZlbiB0aGUgc2xpZ2h0IHRva2VucyBvZiBjaGFyYWN0ZXIgd2hlbiB3ZSBhcmUgZGVsaW5lYXRpbmcgYXMgaXQgd2VyZSBhIGxpa2VuZXNzIG9mIHRoZSBzb3VsLCB0aGUgc3RvcnkgZ29lcyB0aGF0IG9uIHRoaXMgb2NjYXNpb24sIHdoZW4gQ2Flc2FyIHdhcyBlYWdlcmx5IGVuZ2FnZWQgaW4gYSBncmVhdCBzdHJ1Z2dsZSB3aXRoIENhdG8gYW5kIHRoZSBhdHRlbnRpb24gb2YgdGhlIHNlbmF0ZSB3YXMgZml4ZWQgdXBvbiB0aGUgdHdvIG1lbiwgYSBsaXR0bGUgbm90ZSB3YXMgYnJvdWdodCBpbiBmcm9tIG91dHNpZGUgdG8gQ2Flc2FyLiBDYXRvIHRyaWVkIHRvIGZpeCBzdXNwaWNpb24gdXBvbiB0aGUgbWF0dGVyIGFuZCBhbGxlZ2VkIHRoYXQgaXQgaGFkIHNvbWV0aGluZyB0byBkbyB3aXRoIHRoZSBjb25zcGlyYWN5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGx1dGFyY2gncyBhbWJpZ3VvdXMgd29yZHMgaGVyZSBtdXN0IGJlIGludGVycHJldGVkIGJ5IGNvbXBhcmlzb24gd2l0aCB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gNS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIHYuIDIgZi48L2JpYmw+LCB3aGVyZSB0aGUgc2FtZSBzdG9yeSBpcyB0b2xkLjwvbm90ZT4gYW5kIGJhZGUgaGltIHJlYWQgdGhlIHdyaXRpbmcgYWxvdWQuIFRoZW4gQ2Flc2FyIGhhbmRlZCB0aGUgbm90ZSB0byBDYXRvLCB3aG8gc3Rvb2QgbmVhciBoaW0uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gNS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIHYuIDIgZi48L2JpYmw+LCB3aGVyZSB0aGUgc2FtZSBzdG9yeSBpcyB0b2xkLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCB2LiAyIGYuPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIENhdG8gaGFkIHJlYWQgdGhlIG5vdGUsIHdoaWNoIHdhcyBhbiB1bmNoYXN0ZSBsZXR0ZXIgZnJvbSBoaXMgc2lzdGVyIFNlcnZpbGlhIHRvIENhZXNhciwgd2l0aCB3aG9tIHNoZSB3YXMgcGFzc2lvbmF0ZWx5IGFuZCBndWlsdGlseSBpbiBsb3ZlLCBoZSB0aHJldyBpdCB0byBDYWVzYXIsIHNheWluZywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRha2UgaXQsIHRob3Ugc290LDwvcT4gYW5kIHRoZW4gcmVzdW1lZCBoaXMgc3BlZWNoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXMgcmVnYXJkcyB0aGUgd29tZW4gb2YgaGlzIGhvdXNlaG9sZCBDYXRvIGFwcGVhcnMgdG8gaGF2ZSBiZWVuIHdob2xseSB1bmZvcnR1bmF0ZS4gRm9yIHRoaXMgc2lzdGVyIHdhcyBpbiBpbGwgcmVwdXRlIGZvciBoZXIgcmVsYXRpb25zIHdpdGggQ2Flc2FyOyBhbmQgdGhlIGNvbmR1Y3Qgb2YgdGhlIG90aGVyIFNlcnZpbGlhLCBhbHNvIGEgc2lzdGVyIG9mIENhdG8sIHdhcyBzdGlsbCBtb3JlIHVuc2VlbWx5LiBTaGUgd2FzIHRoZSB3aWZlIG9mIEx1Y3VsbHVzLCBhIG1hbiBvZiB0aGUgaGlnaGVzdCByZXB1dGUgaW4gUm9tZSwgYW5kIGhhZCBib3JuZSBoaW0gYSBjaGlsZCwgYW5kIHlldCBzaGUgd2FzIGJhbmlzaGVkIGZyb20gaGlzIGhvdXNlIGZvciB1bmNoYXN0aXR5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gMzguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MdWN1bGx1czwvdGl0bGU+LCB4eHh2aWlpLiAxPC9iaWJsPi48L25vdGU+IEFuZCB3aGF0IHdhcyBtb3N0IGRpc2dyYWNlZnVsIG9mIGFsbCwgZXZlbiBDYXRvJ3Mgd2lmZSBBdGlsaWEgd2FzIG5vdCBmcmVlIGZyb20gc3VjaCB0cmFuc2dyZXNzaW9ucywgYnV0IGFsdGhvdWdoIGhlIGhhZCB0d28gY2hpbGRyZW4gYnkgaGVyLCBoZSB3YXMgZm9yY2VkIHRvIHB1dCBoZXIgYXdheSBiZWNhdXNlIG9mIGhlciB1bnNlZW1seSBiZWhhdmlvdXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyByZWdhcmRzIHRoZSB3b21lbiBvZiBoaXMgaG91c2Vob2xkIENhdG8gYXBwZWFycyB0byBoYXZlIGJlZW4gd2hvbGx5IHVuZm9ydHVuYXRlLiBGb3IgdGhpcyBzaXN0ZXIgd2FzIGluIGlsbCByZXB1dGUgZm9yIGhlciByZWxhdGlvbnMgd2l0aCBDYWVzYXI7IGFuZCB0aGUgY29uZHVjdCBvZiB0aGUgb3RoZXIgU2VydmlsaWEsIGFsc28gYSBzaXN0ZXIgb2YgQ2F0bywgd2FzIHN0aWxsIG1vcmUgdW5zZWVtbHkuIFNoZSB3YXMgdGhlIHdpZmUgb2YgTHVjdWxsdXMsIGEgbWFuIG9mIHRoZSBoaWdoZXN0IHJlcHV0ZSBpbiBSb21lLCBhbmQgaGFkIGJvcm5lIGhpbSBhIGNoaWxkLCBhbmQgeWV0IHNoZSB3YXMgYmFuaXNoZWQgZnJvbSBoaXMgaG91c2UgZm9yIHVuY2hhc3RpdHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gMzguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHh4eHZpaWkuIDE8L2JpYmw+Ljwvbm90ZT4gQW5kIHdoYXQgd2FzIG1vc3QgZGlzZ3JhY2VmdWwgb2YgYWxsLCBldmVuIENhdG8ncyB3aWZlIEF0aWxpYSB3YXMgbm90IGZyZWUgZnJvbSBzdWNoIHRyYW5zZ3Jlc3Npb25zLCBidXQgYWx0aG91Z2ggaGUgaGFkIHR3byBjaGlsZHJlbiBieSBoZXIsIGhlIHdhcyBmb3JjZWQgdG8gcHV0IGhlciBhd2F5IGJlY2F1c2Ugb2YgaGVyIHVuc2VlbWx5IGJlaGF2aW91ci4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHVjLiAzOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgeHh4dmlpaS4gMTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgeHh4dmlpaS4gMTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgbWFycmllZCBhIGRhdWdodGVyIG9mIFBoaWxpcHB1cywgTWFyY2lhLCBhIHdvbWFuIG9mIHJlcHV0ZWQgZXhjZWxsZW5jZSwgYWJvdXQgd2hvbSB0aGVyZSB3YXMgdGhlIG1vc3QgYWJ1bmRhbnQgdGFsazsgYW5kIHRoaXMgcGFydCBvZiBDYXRvJ3MgbGlmZSwgbGlrZSBhIGRyYW1hLCBoYXMgZ2l2ZW4gcmlzZSB0byBkaXNwdXRlIGFuZCBpcyBoYXJkIHRvIGV4cGxhaW4uIEhvd2V2ZXIsIHRoZSBjYXNlIHdhcyBhcyBmb2xsb3dzLCBhY2NvcmRpbmcgdG8gVGhyYXNlYSwgd2hvIHJlZmVycyB0byB0aGUgYXV0aG9yaXR5IG9mIE11bmF0aXVzLCBDYXRvJ3MgY29tcGFuaW9uIGFuZCBpbnRpbWF0ZSBhc3NvY2lhdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZSBtYW55IGxvdmVycyBhbmQgYWRtaXJlcnMgb2YgQ2F0byB0aGVyZSB3ZXJlIHNvbWUgd2hvIHdlcmUgbW9yZSBjb25zcGljdW91cyBhbmQgaWxsdXN0cmlvdXMgdGhhbiBvdGhlcnMuIE9uZSBvZiB0aGVzZSB3YXMgUXVpbnR1cyBIb3J0ZW5zaXVzLCBhIG1hbiBvZiBzcGxlbmRpZCByZXB1dGF0aW9uIGFuZCBleGNlbGxlbnQgY2hhcmFjdGVyLiBUaGlzIG1hbiwgdGhlbiwgZGVzaXJpbmcgdG8gYmUgbW9yZSB0aGFuIGEgbWVyZSBhc3NvY2lhdGUgYW5kIGNvbXBhbmlvbiBvZiBDYXRvLCBhbmQgaW4gc29tZSB3YXkgb3Igb3RoZXIgdG8gYnJpbmcgaGlzIHdob2xlIGZhbWlseSBhbmQgbGluZSBpbnRvIGNvbW11bml0eSBvZiBraW5zaGlwIHdpdGggaGltLCBhdHRlbXB0ZWQgdG8gcGVyc3VhZGUgQ2F0bywgd2hvc2UgZGF1Z2h0ZXIgUG9yY2lhIHdhcyB0aGUgd2lmZSBvZiBCaWJ1bHVzIGFuZCBoYWQgYm9ybmUgaGltIHR3byBzb25zLCB0byBnaXZlIGhlciBpbiB0dXJuIHRvIGhpbSBhcyBub2JsZSBzb2lsIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBjaGlsZHJlbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nIHRvIHRoZSBvcGluaW9uIG9mIG1lbiwgaGUgYXJndWVkLCBzdWNoIGEgY291cnNlIHdhcyBhYnN1cmQsIGJ1dCBhY2NvcmRpbmcgdG8gdGhlIGxhdyBvZiBuYXR1cmUgaXQgd2FzIGhvbm91cmFibGUgYW5kIGdvb2QgZm9yIHRoZSBzdGF0ZSB0aGF0IGEgd29tYW4gaW4gdGhlIHByaW1lIG9mIHlvdXRoIGFuZCBiZWF1dHkgc2hvdWxkIG5laXRoZXIgcXVlbmNoIGhlciBwcm9kdWN0aXZlIHBvd2VyIGFuZCBsaWUgaWRsZSwgbm9yIHlldCwgYnkgYmVhcmluZyBtb3JlIG9mZnNwcmluZyB0aGFuIGVub3VnaCwgYnVyZGVuIGFuZCBpbXBvdmVyaXNoIGEgaHVzYmFuZCB3aG8gZG9lcyBub3Qgd2FudCB0aGVtLiBNb3Jlb3ZlciwgY29tbXVuaXR5IGluIGhlaXJzIGFtb25nIHdvcnRoeSBtZW4gd291bGQgbWFrZSB2aXJ0dWUgYWJ1bmRhbnQgYW5kIHdpZGVseSBkaWZmdXNlZCBpbiB0aGVpciBmYW1pbGllcywgYW5kIHRoZSBzdGF0ZSB3b3VsZCBiZSBjbG9zZWx5IGNlbWVudGVkIHRvZ2V0aGVyIGJ5IHRoZWlyIGZhbWlseSBhbGxpYW5jZXMuIEFuZCBpZiBCaWJ1bHVzIHdlcmUgd2hvbGx5IGRldm90ZWQgdG8gaGlzIHdpZmUsIEhvcnRlbnNpdXMgc2FpZCBoZSB3b3VsZCBnaXZlIGhlciBiYWNrIGFmdGVyIHNoZSBoYWQgYm9ybmUgaGltIGEgY2hpbGQsIGFuZCBoZSB3b3VsZCB0aHVzIGJlIG1vcmUgY2xvc2VseSBjb25uZWN0ZWQgYm90aCB3aXRoIEJpYnVsdXMgaGltc2VsZiBhbmQgd2l0aCBDYXRvIGJ5IGEgY29tbXVuaXR5IG9mIGNoaWxkcmVuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSBtYXJyaWVkIGEgZGF1Z2h0ZXIgb2YgUGhpbGlwcHVzLCBNYXJjaWEsIGEgd29tYW4gb2YgcmVwdXRlZCBleGNlbGxlbmNlLCBhYm91dCB3aG9tIHRoZXJlIHdhcyB0aGUgbW9zdCBhYnVuZGFudCB0YWxrOyBhbmQgdGhpcyBwYXJ0IG9mIENhdG8ncyBsaWZlLCBsaWtlIGEgZHJhbWEsIGhhcyBnaXZlbiByaXNlIHRvIGRpc3B1dGUgYW5kIGlzIGhhcmQgdG8gZXhwbGFpbi4gSG93ZXZlciwgdGhlIGNhc2Ugd2FzIGFzIGZvbGxvd3MsIGFjY29yZGluZyB0byBUaHJhc2VhLCB3aG8gcmVmZXJzIHRvIHRoZSBhdXRob3JpdHkgb2YgTXVuYXRpdXMsIENhdG8ncyBjb21wYW5pb24gYW5kIGludGltYXRlIGFzc29jaWF0ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZSBtYW55IGxvdmVycyBhbmQgYWRtaXJlcnMgb2YgQ2F0byB0aGVyZSB3ZXJlIHNvbWUgd2hvIHdlcmUgbW9yZSBjb25zcGljdW91cyBhbmQgaWxsdXN0cmlvdXMgdGhhbiBvdGhlcnMuIE9uZSBvZiB0aGVzZSB3YXMgUXVpbnR1cyBIb3J0ZW5zaXVzLCBhIG1hbiBvZiBzcGxlbmRpZCByZXB1dGF0aW9uIGFuZCBleGNlbGxlbnQgY2hhcmFjdGVyLiBUaGlzIG1hbiwgdGhlbiwgZGVzaXJpbmcgdG8gYmUgbW9yZSB0aGFuIGEgbWVyZSBhc3NvY2lhdGUgYW5kIGNvbXBhbmlvbiBvZiBDYXRvLCBhbmQgaW4gc29tZSB3YXkgb3Igb3RoZXIgdG8gYnJpbmcgaGlzIHdob2xlIGZhbWlseSBhbmQgbGluZSBpbnRvIGNvbW11bml0eSBvZiBraW5zaGlwIHdpdGggaGltLCBhdHRlbXB0ZWQgdG8gcGVyc3VhZGUgQ2F0bywgd2hvc2UgZGF1Z2h0ZXIgUG9yY2lhIHdhcyB0aGUgd2lmZSBvZiBCaWJ1bHVzIGFuZCBoYWQgYm9ybmUgaGltIHR3byBzb25zLCB0byBnaXZlIGhlciBpbiB0dXJuIHRvIGhpbSBhcyBub2JsZSBzb2lsIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBjaGlsZHJlbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZyB0byB0aGUgb3BpbmlvbiBvZiBtZW4sIGhlIGFyZ3VlZCwgc3VjaCBhIGNvdXJzZSB3YXMgYWJzdXJkLCBidXQgYWNjb3JkaW5nIHRvIHRoZSBsYXcgb2YgbmF0dXJlIGl0IHdhcyBob25vdXJhYmxlIGFuZCBnb29kIGZvciB0aGUgc3RhdGUgdGhhdCBhIHdvbWFuIGluIHRoZSBwcmltZSBvZiB5b3V0aCBhbmQgYmVhdXR5IHNob3VsZCBuZWl0aGVyIHF1ZW5jaCBoZXIgcHJvZHVjdGl2ZSBwb3dlciBhbmQgbGllIGlkbGUsIG5vciB5ZXQsIGJ5IGJlYXJpbmcgbW9yZSBvZmZzcHJpbmcgdGhhbiBlbm91Z2gsIGJ1cmRlbiBhbmQgaW1wb3ZlcmlzaCBhIGh1c2JhbmQgd2hvIGRvZXMgbm90IHdhbnQgdGhlbS4gTW9yZW92ZXIsIGNvbW11bml0eSBpbiBoZWlycyBhbW9uZyB3b3J0aHkgbWVuIHdvdWxkIG1ha2UgdmlydHVlIGFidW5kYW50IGFuZCB3aWRlbHkgZGlmZnVzZWQgaW4gdGhlaXIgZmFtaWxpZXMsIGFuZCB0aGUgc3RhdGUgd291bGQgYmUgY2xvc2VseSBjZW1lbnRlZCB0b2dldGhlciBieSB0aGVpciBmYW1pbHkgYWxsaWFuY2VzLiBBbmQgaWYgQmlidWx1cyB3ZXJlIHdob2xseSBkZXZvdGVkIHRvIGhpcyB3aWZlLCBIb3J0ZW5zaXVzIHNhaWQgaGUgd291bGQgZ2l2ZSBoZXIgYmFjayBhZnRlciBzaGUgaGFkIGJvcm5lIGhpbSBhIGNoaWxkLCBhbmQgaGUgd291bGQgdGh1cyBiZSBtb3JlIGNsb3NlbHkgY29ubmVjdGVkIGJvdGggd2l0aCBCaWJ1bHVzIGhpbXNlbGYgYW5kIHdpdGggQ2F0byBieSBhIGNvbW11bml0eSBvZiBjaGlsZHJlbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0byByZXBsaWVkIHRoYXQgaGUgbG92ZWQgSG9ydGVuc2l1cyBhbmQgdGhvdWdodCBoaWdobHkgb2YgYSBjb21tdW5pdHkgb2YgcmVsYXRpb25zaGlwIHdpdGggaGltLCBidXQgY29uc2lkZXJlZCBpdCBhYnN1cmQgZm9yIGhpbSB0byBwcm9wb3NlIG1hcnJpYWdlIHdpdGggYSBkYXVnaHRlciB3aG8gaGFkIGJlZW4gZ2l2ZW4gdG8gYW5vdGhlci4gVGhlbiBIb3J0ZW5zaXVzIGNoYW5nZWQgaGlzIHRhY3RpY3MsIHRocmV3IG9mZiB0aGUgbWFzaywgYW5kIGJvbGRseSBhc2tlZCBmb3IgdGhlIHdpZmUgb2YgQ2F0byBoaW1zZWxmLCBzaW5jZSBzaGUgd2FzIHN0aWxsIHlvdW5nIGVub3VnaCB0byBiZWFyIGNoaWxkcmVuLCBhbmQgQ2F0byBoYWQgaGVpcnMgZW5vdWdoLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgY2Fubm90IGJlIHNhaWQgdGhhdCBoZSBkaWQgdGhpcyBiZWNhdXNlIGhlIGtuZXcgdGhhdCBDYXRvIG5lZ2xlY3RlZCBNYXJjaWEsIGZvciBzaGUgd2FzIGF0IHRoYXQgdGltZSB3aXRoIGNoaWxkIGJ5IGhpbSwgYXMgd2UgYXJlIHRvbGQuIEhvd2V2ZXIsIHNlZWluZyB0aGUgZWFybmVzdG5lc3MgYW5kIGVhZ2VyIGRlc2lyZSBvZiBIb3J0ZW5zaXVzLCBDYXRvIHdvdWxkIG5vdCByZWZ1c2UsIGJ1dCBzYWlkIHRoYXQgUGhpbGlwcHVzIGFsc28sIE1hcmNpYSdzIGZhdGhlciwgbXVzdCBhcHByb3ZlIG9mIHRoaXMgc3RlcC4gQWNjb3JkaW5nbHksIFBoaWxpcHB1cyB3YXMgY29uc3VsdGVkIGFuZCBleHByZXNzZWQgaGlzIGNvbnNlbnQsIGJ1dCBoZSB3b3VsZCBub3QgZ2l2ZSBNYXJjaWEgaW4gbWFycmlhZ2UgdW50aWwgQ2F0byBoaW1zZWxmIHdhcyBwcmVzZW50IGFuZCBqb2luZWQgaW4gZ2l2aW5nIHRoZSBicmlkZSBhd2F5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IGlzIHBsYWluIHRoYXQgQ2F0byBkaXZvcmNlZCBNYXJjaWE7IG90aGVyd2lzZSBoZXIgZmF0aGVyIGNvdWxkIG5vdCBoYXZlIGdpdmVuIGhlciBpbiBtYXJyaWFnZSB0byBIb3J0ZW5zaXVzLjwvbm90ZT4gVGhpcyBpbmNpZGVudCBvY2N1cnJlZCBhdCBhIGxhdGVyIHRpbWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHJvYmFibHkgaW4gNTYgQi5DLjwvbm90ZT4gaXQgaXMgdHJ1ZSwgYnV0IHNpbmNlIEkgaGFkIHRha2VuIHVwIHRoZSB0b3BpYyBvZiB0aGUgd29tZW4gb2YgQ2F0bydzIGhvdXNlaG9sZCBJIGRlY2lkZWQgdG8gYW50aWNpcGF0ZSBpdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gcmVwbGllZCB0aGF0IGhlIGxvdmVkIEhvcnRlbnNpdXMgYW5kIHRob3VnaHQgaGlnaGx5IG9mIGEgY29tbXVuaXR5IG9mIHJlbGF0aW9uc2hpcCB3aXRoIGhpbSwgYnV0IGNvbnNpZGVyZWQgaXQgYWJzdXJkIGZvciBoaW0gdG8gcHJvcG9zZSBtYXJyaWFnZSB3aXRoIGEgZGF1Z2h0ZXIgd2hvIGhhZCBiZWVuIGdpdmVuIHRvIGFub3RoZXIuIFRoZW4gSG9ydGVuc2l1cyBjaGFuZ2VkIGhpcyB0YWN0aWNzLCB0aHJldyBvZmYgdGhlIG1hc2ssIGFuZCBib2xkbHkgYXNrZWQgZm9yIHRoZSB3aWZlIG9mIENhdG8gaGltc2VsZiwgc2luY2Ugc2hlIHdhcyBzdGlsbCB5b3VuZyBlbm91Z2ggdG8gYmVhciBjaGlsZHJlbiwgYW5kIENhdG8gaGFkIGhlaXJzIGVub3VnaC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBjYW5ub3QgYmUgc2FpZCB0aGF0IGhlIGRpZCB0aGlzIGJlY2F1c2UgaGUga25ldyB0aGF0IENhdG8gbmVnbGVjdGVkIE1hcmNpYSwgZm9yIHNoZSB3YXMgYXQgdGhhdCB0aW1lIHdpdGggY2hpbGQgYnkgaGltLCBhcyB3ZSBhcmUgdG9sZC4gSG93ZXZlciwgc2VlaW5nIHRoZSBlYXJuZXN0bmVzcyBhbmQgZWFnZXIgZGVzaXJlIG9mIEhvcnRlbnNpdXMsIENhdG8gd291bGQgbm90IHJlZnVzZSwgYnV0IHNhaWQgdGhhdCBQaGlsaXBwdXMgYWxzbywgTWFyY2lhJ3MgZmF0aGVyLCBtdXN0IGFwcHJvdmUgb2YgdGhpcyBzdGVwLiBBY2NvcmRpbmdseSwgUGhpbGlwcHVzIHdhcyBjb25zdWx0ZWQgYW5kIGV4cHJlc3NlZCBoaXMgY29uc2VudCwgYnV0IGhlIHdvdWxkIG5vdCBnaXZlIE1hcmNpYSBpbiBtYXJyaWFnZSB1bnRpbCBDYXRvIGhpbXNlbGYgd2FzIHByZXNlbnQgYW5kIGpvaW5lZCBpbiBnaXZpbmcgdGhlIGJyaWRlIGF3YXkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JdCBpcyBwbGFpbiB0aGF0IENhdG8gZGl2b3JjZWQgTWFyY2lhOyBvdGhlcndpc2UgaGVyIGZhdGhlciBjb3VsZCBub3QgaGF2ZSBnaXZlbiBoZXIgaW4gbWFycmlhZ2UgdG8gSG9ydGVuc2l1cy48L25vdGU+IFRoaXMgaW5jaWRlbnQgb2NjdXJyZWQgYXQgYSBsYXRlciB0aW1lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHJvYmFibHkgaW4gNTYgQi5DLjwvbm90ZT4gaXQgaXMgdHJ1ZSwgYnV0IHNpbmNlIEkgaGFkIHRha2VuIHVwIHRoZSB0b3BpYyBvZiB0aGUgd29tZW4gb2YgQ2F0bydzIGhvdXNlaG9sZCBJIGRlY2lkZWQgdG8gYW50aWNpcGF0ZSBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TGVudHVsdXMgYW5kIGhpcyBhc3NvY2lhdGVzIHdlcmUgZXhlY3V0ZWQsIGFuZCBDYWVzYXIsIGluIHZpZXcgb2YgdGhlIGNoYXJnZXMgYW5kIGFjY3VzYXRpb25zIG1hZGUgYWdhaW5zdCBoaW0gdG8gdGhlIHNlbmF0ZSwgdG9vayByZWZ1Z2Ugd2l0aCB0aGUgcGVvcGxlIGFuZCB3YXMgc3RpcnJpbmcgdXAgYW5kIGF0dGFjaGluZyB0byBoaW1zZWxmIHRoZSBudW1lcm91cyBkaXNlYXNlZCBhbmQgY29ycnVwdGVkIGVsZW1lbnRzIGluIHRoZSBjb21tb253ZWFsdGguIENhdG8gd2FzIHRoZXJlZm9yZSBhbGFybWVkIGFuZCBwZXJzdWFkZWQgdGhlIHNlbmF0ZSB0byBjb25jaWxpYXRlIHRoZSBwb29yIGFuZCBsYW5kbGVzcyBtdWx0aXR1ZGUgYnkgaW5jbHVkaW5nIHRoZW0gaW4gdGhlIGRpc3RyaWJ1dGlvbiBvZiBncmFpbiwgdGhlIGFubnVhbCBleHBlbmRpdHVyZSBmb3Igd2hpY2ggd2FzIHR3ZWx2ZSBodW5kcmVkIGFuZCBmaWZ0eSB0YWxlbnRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDguNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXI8L3RpdGxlPiwgdmlpaS4gNDwvYmlibD4uPC9ub3RlPiBCeSB0aGlzIGFjdCBvZiBodW1hbml0eSBhbmQga2luZG5lc3MgdGhlIHRocmVhdGVuaW5nIGRhbmdlciB3YXMgbW9zdCBzdWNjZXNzZnVsbHkgZGlzc2lwYXRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBNZXRlbGx1cywgd2hvIGhhc3RlbmVkIHRvIHRha2UgdXAgdGhlIGR1dGllcyBvZiBoaXMgdHJpYnVuZXNoaXAsIGJlZ2FuIHRvIGhvbGQgdHVtdWx0dW91cyBhc3NlbWJsaWVzIG9mIHRoZSBwZW9wbGUsIGFuZCBwcm9wb3NlZCBhIGxhdyB0aGF0IFBvbXBleSB0aGUgR3JlYXQgc2hvdWxkIGhhc3RlbiB3aXRoIGhpcyBmb3JjZXMgdG8gSXRhbHk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qb21wZXkgaGFkIGp1c3QgZmluaXNoZWQgaGlzIGNvbnF1ZXN0IG9mIE1pdGhyaWRhdGVzIGFuZCB3YXMgb24gdGhlIHdheSBob21lIGZyb20gQXNpYSAoNjIgQi5DLikuPC9ub3RlPiBhbmQgdW5kZXJ0YWtlIHRoZSBwcmVzZXJ2YXRpb24gb2YgdGhlIGNpdHksIG9uIHRoZSBncm91bmQgdGhhdCBpdCB3YXMgaW1wZXJpbGxlZCBieSBDYXRpbGluZS4gTm93LCB0aGlzIHdhcyBhIHNwZWNpb3VzIHByb3Bvc2l0aW9uOyBidXQgdGhlIGVuZCBhbmQgYWltIG9mIHRoZSBsYXcgd2FzIHRvIHB1dCBtYXR0ZXJzIGluIHRoZSBoYW5kcyBvZiBQb21wZXkgYW5kIGhhbmQgb3ZlciB0byBoaW0gdGhlIHN1cHJlbWUgcG93ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgbWV0LCBhbmQgQ2F0byBkaWQgbm90LCBhcyB3YXMgaGlzIGN1c3RvbSwgYXR0YWNrIE1ldGVsbHVzIHdpdGggdmVoZW1lbmNlLCBidXQgZ2F2ZSBoaW0gbXVjaCBmaXR0aW5nIGFuZCBtb2RlcmF0ZSBhZHZpY2UsIGFuZCBmaW5hbGx5LCByZXNvcnRpbmcgdG8gZW50cmVhdGllcywgYWN0dWFsbHkgcHJhaXNlZCB0aGUgZmFtaWx5IG9mIE1ldGVsbHVzIGZvciBoYXZpbmcgYWx3YXlzIGJlZW4gYXJpc3RvY3JhdGljIGluIHN5bXBhdGh5LiBNZXRlbGx1cyB3YXMgdGhlcmVmb3JlIGFsbCB0aGUgbW9yZSBlbWJvbGRlbmVkLCBhbmQsIGRlc3Bpc2luZyBDYXRvIGFzIGEgeWllbGRpbmcgYW5kIHRpbW9yb3VzIG9wcG9uZW50LCBicm9rZSBvdXQgaW4gZXh0cmF2YWdhbnQgdGhyZWF0cyBhbmQgYm9sZCBzcGVlY2hlcywgaW50ZW5kaW5nIHRvIGNhcnJ5IGV2ZXJ5dGhpbmcgdGhyb3VnaCBpbiBzcGl0ZSBvZiB0aGUgc2VuYXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TbywgdGhlbiwgQ2F0byBjaGFuZ2VkIGhpcyBsb29rcyBhbmQgdm9pY2UgYW5kIHdvcmRzLCBhbmQgY29uY2x1ZGVkIGEgdmVoZW1lbnQgc3BlZWNoIHdpdGggdGhlIGRlY2xhcmF0aW9uIHRoYXQgd2hpbGUgaGUgbGl2ZWQgUG9tcGV5IHNob3VsZCBub3QgZW50ZXIgdGhlIGNpdHkgd2l0aCBhbiBhcm1lZCBmb3JjZS4gVGhlIHNlbmF0ZSB3YXMgdGh1cyBsZWQgdG8gZmVlbCB0aGF0IG5laXRoZXIgbWFuIHdhcyBpbiBoaXMgcmlnaHQgbWluZCBvciB1c2luZyBzYWZlIGFyZ3VtZW50cywgYnV0IHRoYXQgdGhlIHBvbGljeSBvZiBNZXRlbGx1cyB3YXMgbWFkbmVzcywgd2hpY2gsIHRocm91Z2ggZXhjZXNzIG9mIHdpY2tlZG5lc3MsIHdhcyBsZWFkaW5nIG9uIHRvIHRoZSBkZXN0cnVjdGlvbiBhbmQgY29uZnVzaW9uIG9mIGFsbCB0aGluZ3MsIHdoaWxlIHRoYXQgb2YgQ2F0byB3YXMgYSB3aWxkIGVidWxsaXRpb24gb2YgdmlydHVlIGNvbnRlbmRpbmcgaW4gYmVoYWxmIG9mIHJpZ2h0IGFuZCBqdXN0aWNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TGVudHVsdXMgYW5kIGhpcyBhc3NvY2lhdGVzIHdlcmUgZXhlY3V0ZWQsIGFuZCBDYWVzYXIsIGluIHZpZXcgb2YgdGhlIGNoYXJnZXMgYW5kIGFjY3VzYXRpb25zIG1hZGUgYWdhaW5zdCBoaW0gdG8gdGhlIHNlbmF0ZSwgdG9vayByZWZ1Z2Ugd2l0aCB0aGUgcGVvcGxlIGFuZCB3YXMgc3RpcnJpbmcgdXAgYW5kIGF0dGFjaGluZyB0byBoaW1zZWxmIHRoZSBudW1lcm91cyBkaXNlYXNlZCBhbmQgY29ycnVwdGVkIGVsZW1lbnRzIGluIHRoZSBjb21tb253ZWFsdGguIENhdG8gd2FzIHRoZXJlZm9yZSBhbGFybWVkIGFuZCBwZXJzdWFkZWQgdGhlIHNlbmF0ZSB0byBjb25jaWxpYXRlIHRoZSBwb29yIGFuZCBsYW5kbGVzcyBtdWx0aXR1ZGUgYnkgaW5jbHVkaW5nIHRoZW0gaW4gdGhlIGRpc3RyaWJ1dGlvbiBvZiBncmFpbiwgdGhlIGFubnVhbCBleHBlbmRpdHVyZSBmb3Igd2hpY2ggd2FzIHR3ZWx2ZSBodW5kcmVkIGFuZCBmaWZ0eSB0YWxlbnRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA4LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgdmlpaS4gNDwvYmlibD4uPC9ub3RlPiBCeSB0aGlzIGFjdCBvZiBodW1hbml0eSBhbmQga2luZG5lc3MgdGhlIHRocmVhdGVuaW5nIGRhbmdlciB3YXMgbW9zdCBzdWNjZXNzZnVsbHkgZGlzc2lwYXRlZC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA4LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgdmlpaS4gNDwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHZpaWkuIDQ8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gTWV0ZWxsdXMsIHdobyBoYXN0ZW5lZCB0byB0YWtlIHVwIHRoZSBkdXRpZXMgb2YgaGlzIHRyaWJ1bmVzaGlwLCBiZWdhbiB0byBob2xkIHR1bXVsdHVvdXMgYXNzZW1ibGllcyBvZiB0aGUgcGVvcGxlLCBhbmQgcHJvcG9zZWQgYSBsYXcgdGhhdCBQb21wZXkgdGhlIEdyZWF0IHNob3VsZCBoYXN0ZW4gd2l0aCBoaXMgZm9yY2VzIHRvIEl0YWx5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qb21wZXkgaGFkIGp1c3QgZmluaXNoZWQgaGlzIGNvbnF1ZXN0IG9mIE1pdGhyaWRhdGVzIGFuZCB3YXMgb24gdGhlIHdheSBob21lIGZyb20gQXNpYSAoNjIgQi5DLikuPC9ub3RlPiBhbmQgdW5kZXJ0YWtlIHRoZSBwcmVzZXJ2YXRpb24gb2YgdGhlIGNpdHksIG9uIHRoZSBncm91bmQgdGhhdCBpdCB3YXMgaW1wZXJpbGxlZCBieSBDYXRpbGluZS4gTm93LCB0aGlzIHdhcyBhIHNwZWNpb3VzIHByb3Bvc2l0aW9uOyBidXQgdGhlIGVuZCBhbmQgYWltIG9mIHRoZSBsYXcgd2FzIHRvIHB1dCBtYXR0ZXJzIGluIHRoZSBoYW5kcyBvZiBQb21wZXkgYW5kIGhhbmQgb3ZlciB0byBoaW0gdGhlIHN1cHJlbWUgcG93ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgbWV0LCBhbmQgQ2F0byBkaWQgbm90LCBhcyB3YXMgaGlzIGN1c3RvbSwgYXR0YWNrIE1ldGVsbHVzIHdpdGggdmVoZW1lbmNlLCBidXQgZ2F2ZSBoaW0gbXVjaCBmaXR0aW5nIGFuZCBtb2RlcmF0ZSBhZHZpY2UsIGFuZCBmaW5hbGx5LCByZXNvcnRpbmcgdG8gZW50cmVhdGllcywgYWN0dWFsbHkgcHJhaXNlZCB0aGUgZmFtaWx5IG9mIE1ldGVsbHVzIGZvciBoYXZpbmcgYWx3YXlzIGJlZW4gYXJpc3RvY3JhdGljIGluIHN5bXBhdGh5LiBNZXRlbGx1cyB3YXMgdGhlcmVmb3JlIGFsbCB0aGUgbW9yZSBlbWJvbGRlbmVkLCBhbmQsIGRlc3Bpc2luZyBDYXRvIGFzIGEgeWllbGRpbmcgYW5kIHRpbW9yb3VzIG9wcG9uZW50LCBicm9rZSBvdXQgaW4gZXh0cmF2YWdhbnQgdGhyZWF0cyBhbmQgYm9sZCBzcGVlY2hlcywgaW50ZW5kaW5nIHRvIGNhcnJ5IGV2ZXJ5dGhpbmcgdGhyb3VnaCBpbiBzcGl0ZSBvZiB0aGUgc2VuYXRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCBDYXRvIGNoYW5nZWQgaGlzIGxvb2tzIGFuZCB2b2ljZSBhbmQgd29yZHMsIGFuZCBjb25jbHVkZWQgYSB2ZWhlbWVudCBzcGVlY2ggd2l0aCB0aGUgZGVjbGFyYXRpb24gdGhhdCB3aGlsZSBoZSBsaXZlZCBQb21wZXkgc2hvdWxkIG5vdCBlbnRlciB0aGUgY2l0eSB3aXRoIGFuIGFybWVkIGZvcmNlLiBUaGUgc2VuYXRlIHdhcyB0aHVzIGxlZCB0byBmZWVsIHRoYXQgbmVpdGhlciBtYW4gd2FzIGluIGhpcyByaWdodCBtaW5kIG9yIHVzaW5nIHNhZmUgYXJndW1lbnRzLCBidXQgdGhhdCB0aGUgcG9saWN5IG9mIE1ldGVsbHVzIHdhcyBtYWRuZXNzLCB3aGljaCwgdGhyb3VnaCBleGNlc3Mgb2Ygd2lja2VkbmVzcywgd2FzIGxlYWRpbmcgb24gdG8gdGhlIGRlc3RydWN0aW9uIGFuZCBjb25mdXNpb24gb2YgYWxsIHRoaW5ncywgd2hpbGUgdGhhdCBvZiBDYXRvIHdhcyBhIHdpbGQgZWJ1bGxpdGlvbiBvZiB2aXJ0dWUgY29udGVuZGluZyBpbiBiZWhhbGYgb2YgcmlnaHQgYW5kIGp1c3RpY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHBlb3BsZSB3ZXJlIGFib3V0IHRvIHZvdGUgb24gdGhlIGxhdywgaW4gZmF2b3VyIG9mIE1ldGVsbHVzIHRoZXJlIHdlcmUgYXJtZWQgc3RyYW5nZXJzIGFuZCBnbGFkaWF0b3JzIGFuZCBzZXJ2YW50cyBkcmF3biB1cCBpbiB0aGUgZm9ydW0sIGFuZCB0aGF0IHBhcnQgb2YgdGhlIHBlb3BsZSB3aGljaCBsb25nZWQgZm9yIFBvbXBleSBpbiB0aGVpciBob3BlIG9mIGEgY2hhbmdlIHdhcyBwcmVzZW50IGluIGxhcmdlIG51bWJlcnMsIGFuZCB0aGVyZSB3YXMgc3Ryb25nIHN1cHBvcnQgYWxzbyBmcm9tIENhZXNhciwgd2hvIHdhcyBhdCB0aGF0IHRpbWUgcHJhZXRvci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGNhc2Ugb2YgQ2F0bywgaG93ZXZlciwgdGhlIGZvcmVtb3N0IGNpdGl6ZW5zIHNoYXJlZCBpbiBoaXMgZGlzcGxlYXN1cmUgYW5kIHNlbnNlIG9mIHdyb25nIG1vcmUgdGhhbiB0aGV5IGRpZCBpbiBoaXMgc3RydWdnbGUgdG8gcmVzaXN0LCBhbmQgZ3JlYXQgZGVqZWN0aW9uIGFuZCBmZWFyIHJlaWduZWQgaW4gaGlzIGhvdXNlaG9sZCwgc28gdGhhdCBzb21lIG9mIGhpcyBmcmllbmRzIHRvb2sgbm8gZm9vZCBhbmQgd2F0Y2hlZCBhbGwgbmlnaHQgd2l0aCBvbmUgYW5vdGhlciBpbiBmdXRpbGUgZGlzY3Vzc2lvbnMgb24gaGlzIGJlaGFsZiwgd2hpbGUgaGlzIHdpZmUgYW5kIHNpc3RlcnMgd2FpbGVkIGFuZCB3ZXB0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBoaW1zZWxmLCBob3dldmVyLCBjb252ZXJzZWQgZmVhcmxlc3NseSBhbmQgY29uZmlkZW50bHkgd2l0aCBhbGwgYW5kIGNvbWZvcnRlZCB0aGVtLCBhbmQgYWZ0ZXIgdGFraW5nIHN1cHBlciBhcyB1c3VhbCBhbmQgcGFzc2luZyB0aGUgbmlnaHQsIHdhcyByb3VzZWQgZnJvbSBhIGRlZXAgc2xlZXAgYnkgb25lIG9mIGhpcyBjb2xsZWFndWVzIE1pbnVjaXVzIFRoZXJtdXM7IGFuZCB0aGV5IHdlbnQgZG93biBpbnRvIHRoZSBmb3J1bSwgb25seSBmZXcgcGVyc29ucyBhY2NvbXBhbnlpbmcgdGhlbSwgYnV0IG1hbnkgbWVldGluZyB0aGVtIGFuZCBleGhvcnRpbmcgdGhlbSB0byBiZSBvbiB0aGVpciBndWFyZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gQ2F0byBwYXVzZWQgaW4gdGhlIGZvcnVtIGFuZCBzYXcgdGhlIHRlbXBsZSBvZiBDYXN0b3IgYW5kIFBvbGx1eCBzdXJyb3VuZGVkIGJ5IGFybWVkIG1lbiBhbmQgaXRzIHN0ZXBzIGd1YXJkZWQgYnkgZ2xhZGlhdG9ycywgYW5kIE1ldGVsbHVzIGhpbXNlbGYgc2l0dGluZyBhdCB0aGUgdG9wIHdpdGggQ2Flc2FyLCBoZSB0dXJuZWQgdG8gaGlzIGZyaWVuZHMgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBhIGJvbGQgbWFuLCBhbmQgd2hhdCBhIGNvd2FyZCwgdG8gbGV2eSBzdWNoIGFuIGFybXkgYWdhaW5zdCBhIHNpbmdsZSB1bmFybWVkIGFuZCBkZWZlbmNlbGVzcyBwZXJzb24hPC9xPiBBdCB0aGUgc2FtZSB0aW1lIGhlIHdhbGtlZCBzdHJhaWdodCBvbiB3aXRoIFRoZXJtdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIHdobyB3ZXJlIG9jY3VweWluZyB0aGUgc3RlcHMgbWFkZSB3YXkgZm9yIHRoZW0sIGJ1dCB3b3VsZCBhbGxvdyBubyBvbmUgZWxzZSB0byBwYXNzLCBleGNlcHQgdGhhdCBDYXRvIHdpdGggZGlmZmljdWx0eSBkcmV3IE11bmF0aXVzIGFsb25nIGJ5IHRoZSBoYW5kIGFuZCBicm91Z2h0IGhpbSB1cDsgYW5kIHdhbGtpbmcgc3RyYWlnaHQgb253YXJkcyBoZSB0aHJldyBoaW1zZWxmIGp1c3QgYXMgaGUgd2FzIGludG8gYSBzZWF0IGJldHdlZW4gTWV0ZWxsdXMgYW5kIENhZXNhciwgdGh1cyBjdXR0aW5nIG9mZiB0aGVpciBjb21tdW5pY2F0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgYW5kIE1ldGVsbHVzIHdlcmUgZGlzY29uY2VydGVkLCBidXQgdGhlIGJldHRlciBjaXRpemVucywgc2VlaW5nIGFuZCBhZG1pcmluZyB0aGUgY291bnRlbmFuY2UsIGxvZnR5IGJlYXJpbmcsIGFuZCBjb3VyYWdlIG9mIENhdG8sIGNhbWUgbmVhcmVyLCBhbmQgd2l0aCBzaG91dHMgZXhob3J0ZWQgaGltIHRvIGJlIG9mIGdvb2QgaGVhcnQsIHdoaWxlIHRoZXkgdXJnZWQgb25lIGFub3RoZXIgdG8gc3RheSBhbmQgYmFuZCB0aGVtc2VsdmVzIHRvZ2V0aGVyIGFuZCBub3QgYmV0cmF5IHRoZWlyIGxpYmVydHkgYW5kIHRoZSBtYW4gd2hvIHdhcyBzdHJpdmluZyB0byBkZWZlbmQgaXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgcGVvcGxlIHdlcmUgYWJvdXQgdG8gdm90ZSBvbiB0aGUgbGF3LCBpbiBmYXZvdXIgb2YgTWV0ZWxsdXMgdGhlcmUgd2VyZSBhcm1lZCBzdHJhbmdlcnMgYW5kIGdsYWRpYXRvcnMgYW5kIHNlcnZhbnRzIGRyYXduIHVwIGluIHRoZSBmb3J1bSwgYW5kIHRoYXQgcGFydCBvZiB0aGUgcGVvcGxlIHdoaWNoIGxvbmdlZCBmb3IgUG9tcGV5IGluIHRoZWlyIGhvcGUgb2YgYSBjaGFuZ2Ugd2FzIHByZXNlbnQgaW4gbGFyZ2UgbnVtYmVycywgYW5kIHRoZXJlIHdhcyBzdHJvbmcgc3VwcG9ydCBhbHNvIGZyb20gQ2Flc2FyLCB3aG8gd2FzIGF0IHRoYXQgdGltZSBwcmFldG9yLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBjYXNlIG9mIENhdG8sIGhvd2V2ZXIsIHRoZSBmb3JlbW9zdCBjaXRpemVucyBzaGFyZWQgaW4gaGlzIGRpc3BsZWFzdXJlIGFuZCBzZW5zZSBvZiB3cm9uZyBtb3JlIHRoYW4gdGhleSBkaWQgaW4gaGlzIHN0cnVnZ2xlIHRvIHJlc2lzdCwgYW5kIGdyZWF0IGRlamVjdGlvbiBhbmQgZmVhciByZWlnbmVkIGluIGhpcyBob3VzZWhvbGQsIHNvIHRoYXQgc29tZSBvZiBoaXMgZnJpZW5kcyB0b29rIG5vIGZvb2QgYW5kIHdhdGNoZWQgYWxsIG5pZ2h0IHdpdGggb25lIGFub3RoZXIgaW4gZnV0aWxlIGRpc2N1c3Npb25zIG9uIGhpcyBiZWhhbGYsIHdoaWxlIGhpcyB3aWZlIGFuZCBzaXN0ZXJzIHdhaWxlZCBhbmQgd2VwdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYsIGhvd2V2ZXIsIGNvbnZlcnNlZCBmZWFybGVzc2x5IGFuZCBjb25maWRlbnRseSB3aXRoIGFsbCBhbmQgY29tZm9ydGVkIHRoZW0sIGFuZCBhZnRlciB0YWtpbmcgc3VwcGVyIGFzIHVzdWFsIGFuZCBwYXNzaW5nIHRoZSBuaWdodCwgd2FzIHJvdXNlZCBmcm9tIGEgZGVlcCBzbGVlcCBieSBvbmUgb2YgaGlzIGNvbGxlYWd1ZXMgTWludWNpdXMgVGhlcm11czsgYW5kIHRoZXkgd2VudCBkb3duIGludG8gdGhlIGZvcnVtLCBvbmx5IGZldyBwZXJzb25zIGFjY29tcGFueWluZyB0aGVtLCBidXQgbWFueSBtZWV0aW5nIHRoZW0gYW5kIGV4aG9ydGluZyB0aGVtIHRvIGJlIG9uIHRoZWlyIGd1YXJkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIENhdG8gcGF1c2VkIGluIHRoZSBmb3J1bSBhbmQgc2F3IHRoZSB0ZW1wbGUgb2YgQ2FzdG9yIGFuZCBQb2xsdXggc3Vycm91bmRlZCBieSBhcm1lZCBtZW4gYW5kIGl0cyBzdGVwcyBndWFyZGVkIGJ5IGdsYWRpYXRvcnMsIGFuZCBNZXRlbGx1cyBoaW1zZWxmIHNpdHRpbmcgYXQgdGhlIHRvcCB3aXRoIENhZXNhciwgaGUgdHVybmVkIHRvIGhpcyBmcmllbmRzIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBhIGJvbGQgbWFuLCBhbmQgd2hhdCBhIGNvd2FyZCwgdG8gbGV2eSBzdWNoIGFuIGFybXkgYWdhaW5zdCBhIHNpbmdsZSB1bmFybWVkIGFuZCBkZWZlbmNlbGVzcyBwZXJzb24hPC9xPiBBdCB0aGUgc2FtZSB0aW1lIGhlIHdhbGtlZCBzdHJhaWdodCBvbiB3aXRoIFRoZXJtdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIHdobyB3ZXJlIG9jY3VweWluZyB0aGUgc3RlcHMgbWFkZSB3YXkgZm9yIHRoZW0sIGJ1dCB3b3VsZCBhbGxvdyBubyBvbmUgZWxzZSB0byBwYXNzLCBleGNlcHQgdGhhdCBDYXRvIHdpdGggZGlmZmljdWx0eSBkcmV3IE11bmF0aXVzIGFsb25nIGJ5IHRoZSBoYW5kIGFuZCBicm91Z2h0IGhpbSB1cDsgYW5kIHdhbGtpbmcgc3RyYWlnaHQgb253YXJkcyBoZSB0aHJldyBoaW1zZWxmIGp1c3QgYXMgaGUgd2FzIGludG8gYSBzZWF0IGJldHdlZW4gTWV0ZWxsdXMgYW5kIENhZXNhciwgdGh1cyBjdXR0aW5nIG9mZiB0aGVpciBjb21tdW5pY2F0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBhbmQgTWV0ZWxsdXMgd2VyZSBkaXNjb25jZXJ0ZWQsIGJ1dCB0aGUgYmV0dGVyIGNpdGl6ZW5zLCBzZWVpbmcgYW5kIGFkbWlyaW5nIHRoZSBjb3VudGVuYW5jZSwgbG9mdHkgYmVhcmluZywgYW5kIGNvdXJhZ2Ugb2YgQ2F0bywgY2FtZSBuZWFyZXIsIGFuZCB3aXRoIHNob3V0cyBleGhvcnRlZCBoaW0gdG8gYmUgb2YgZ29vZCBoZWFydCwgd2hpbGUgdGhleSB1cmdlZCBvbmUgYW5vdGhlciB0byBzdGF5IGFuZCBiYW5kIHRoZW1zZWx2ZXMgdG9nZXRoZXIgYW5kIG5vdCBiZXRyYXkgdGhlaXIgbGliZXJ0eSBhbmQgdGhlIG1hbiB3aG8gd2FzIHN0cml2aW5nIHRvIGRlZmVuZCBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0aGUgY2xlcmsgcHJvZHVjZWQgdGhlIGxhdywgYnV0IENhdG8gd291bGQgbm90IHN1ZmZlciBoaW0gdG8gcmVhZCBpdDsgYW5kIHdoZW4gTWV0ZWxsdXMgdG9vayBpdCBhbmQgYmVnYW4gdG8gcmVhZCBpdCwgQ2F0byBzbmF0Y2hlZCB0aGUgZG9jdW1lbnQgYXdheSBmcm9tIGhpbS4gVGhlbiBNZXRlbGx1cywgd2hvIGtuZXcgdGhlIGxhdyBieSBoZWFydCwgYmVnYW4gdG8gcmVjaXRlIGl0LCBidXQgVGhlcm11cyBjbGFwcGVkIGEgaGFuZCB1cG9uIGhpcyBtb3V0aCBhbmQgc2h1dCBvZmYgaGlzIHNwZWVjaC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgbGFzdCwgc2VlaW5nIHRoYXQgdGhlIG1lbiB3ZXJlIG1ha2luZyBhIHN0cnVnZ2xlIHdoaWNoIGhlIGNvdWxkIG5vdCByZXNpc3QsIGFuZCB0aGF0IHRoZSBwZW9wbGUgd2VyZSBnaXZpbmcgd2F5IGFuZCB0dXJuaW5nIHRvd2FyZHMgdGhlIGJldHRlciBjb3Vyc2UsIE1ldGVsbHVzIG9yZGVyZWQgbWVuLWF0LWFybXMsIHdobyB3ZXJlIHN0YW5kaW5nIGF0IGEgZGlzdGFuY2UsIHRvIGNvbWUgcnVubmluZyB1cCB3aXRoIHRlcnJpZnlpbmcgc2hvdXRzLiBUaGlzIHdhcyBkb25lLCBhbmQgYWxsIHRoZSBwZW9wbGUgZGlzcGVyc2VkLCBsZWF2aW5nIENhdG8gc3RhbmRpbmcgaGlzIGdyb3VuZCBhbG9uZSBhbmQgcGVsdGVkIHdpdGggc3RpY2tzIGFuZCBzdG9uZXMgZnJvbSBhYm92ZS4gSGVyZSBNdXJlbmEsIHdobyBoYWQgYmVlbiBkZW5vdW5jZWQgYW5kIGJyb3VnaHQgdG8gdHJpYWwgYnkgaGltLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMjEuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eGkuIDMtNjwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmNhbWUgdG8gaGlzIHJlbGllZiwgYW5kIGhvbGRpbmcgaGlzIHRvZ2EgYmVmb3JlIGhpbSwgY3J5aW5nIHRvIHRob3NlIHdobyB3ZXJlIHBlbHRpbmcgaGltIHRvIHN0b3AsIGFuZCBmaW5hbGx5IHBlcnN1YWRpbmcgQ2F0byBoaW1zZWxmIGFuZCBmb2xkaW5nIGhpbSBpbiBoaXMgYXJtcywgaGUgbGVkIGhpbSBhd2F5IGludG8gdGhlIHRlbXBsZSBvZiBDYXN0b3IgYW5kIFBvbGx1eC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0aGUgY2xlcmsgcHJvZHVjZWQgdGhlIGxhdywgYnV0IENhdG8gd291bGQgbm90IHN1ZmZlciBoaW0gdG8gcmVhZCBpdDsgYW5kIHdoZW4gTWV0ZWxsdXMgdG9vayBpdCBhbmQgYmVnYW4gdG8gcmVhZCBpdCwgQ2F0byBzbmF0Y2hlZCB0aGUgZG9jdW1lbnQgYXdheSBmcm9tIGhpbS4gVGhlbiBNZXRlbGx1cywgd2hvIGtuZXcgdGhlIGxhdyBieSBoZWFydCwgYmVnYW4gdG8gcmVjaXRlIGl0LCBidXQgVGhlcm11cyBjbGFwcGVkIGEgaGFuZCB1cG9uIGhpcyBtb3V0aCBhbmQgc2h1dCBvZmYgaGlzIHNwZWVjaC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGxhc3QsIHNlZWluZyB0aGF0IHRoZSBtZW4gd2VyZSBtYWtpbmcgYSBzdHJ1Z2dsZSB3aGljaCBoZSBjb3VsZCBub3QgcmVzaXN0LCBhbmQgdGhhdCB0aGUgcGVvcGxlIHdlcmUgZ2l2aW5nIHdheSBhbmQgdHVybmluZyB0b3dhcmRzIHRoZSBiZXR0ZXIgY291cnNlLCBNZXRlbGx1cyBvcmRlcmVkIG1lbi1hdC1hcm1zLCB3aG8gd2VyZSBzdGFuZGluZyBhdCBhIGRpc3RhbmNlLCB0byBjb21lIHJ1bm5pbmcgdXAgd2l0aCB0ZXJyaWZ5aW5nIHNob3V0cy4gVGhpcyB3YXMgZG9uZSwgYW5kIGFsbCB0aGUgcGVvcGxlIGRpc3BlcnNlZCwgbGVhdmluZyBDYXRvIHN0YW5kaW5nIGhpcyBncm91bmQgYWxvbmUgYW5kIHBlbHRlZCB3aXRoIHN0aWNrcyBhbmQgc3RvbmVzIGZyb20gYWJvdmUuIEhlcmUgTXVyZW5hLCB3aG8gaGFkIGJlZW4gZGVub3VuY2VkIGFuZCBicm91Z2h0IHRvIHRyaWFsIGJ5IGhpbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyMS4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4aS4gMy02PC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyMS4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4aS4gMy02PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmNhbWUgdG8gaGlzIHJlbGllZiwgYW5kIGhvbGRpbmcgaGlzIHRvZ2EgYmVmb3JlIGhpbSwgY3J5aW5nIHRvIHRob3NlIHdobyB3ZXJlIHBlbHRpbmcgaGltIHRvIHN0b3AsIGFuZCBmaW5hbGx5IHBlcnN1YWRpbmcgQ2F0byBoaW1zZWxmIGFuZCBmb2xkaW5nIGhpbSBpbiBoaXMgYXJtcywgaGUgbGVkIGhpbSBhd2F5IGludG8gdGhlIHRlbXBsZSBvZiBDYXN0b3IgYW5kIFBvbGx1eC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVuLCBob3dldmVyLCBNZXRlbGx1cyBzYXcgdGhlIHNwYWNlIGFib3V0IHRoZSB0cmlidW5hbDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHN0ZXBzIG9mIHRoZSB0ZW1wbGUgb2YgQ2FzdG9yIGxlZCBkb3duIHRvIGEgcGxhdGZvcm0sIGZyb20gd2hpY2ggdGhlIHBlb3BsZSB3ZXJlIG9mdGVuIGFkZHJlc3NlZC48L25vdGU+IGVtcHR5IGFuZCBoaXMgb3Bwb25lbnRzIGluIGZsaWdodCB0aHJvdWdoIHRoZSBmb3J1bSwgYmVpbmcgYWx0b2dldGhlciBwZXJzdWFkZWQgdGhhdCBoZSBoYWQgd29uIHRoZSBkYXksIGhlIG9yZGVyZWQgaGlzIGFybWVkIG1lbiB0byBnbyBhd2F5IGFnYWluLCBhbmQgY29taW5nIGZvcndhcmQgaGltc2VsZiBpbiBvcmRlcmx5IGZhc2hpb24gYXR0ZW1wdGVkIHRvIGhhdmUgdGhlIGxhdyBlbmFjdGVkLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoaXMgb3Bwb25lbnRzLCBxdWlja2x5IHJlY292ZXJpbmcgZnJvbSB0aGVpciByb3V0LCBhZHZhbmNlZCBhZ2FpbiB1cG9uIGhpbSB3aXRoIGxvdWQgYW5kIGNvbmZpZGVudCBzaG91dHMsIHNvIHRoYXQgaGlzIHBhcnRpc2FucyB3ZXJlIG92ZXJ3aGVsbWVkIHdpdGggY29uZnVzaW9uIGFuZCB0ZXJyb3IuIFRoZXkgc3VwcG9zZWQgdGhhdCB0aGVpciBlbmVtaWVzIGhhZCBwcm92aWRlZCB0aGVtc2VsdmVzIHdpdGggYXJtcyBmcm9tIHNvbWUgcGxhY2Ugb3Igb3RoZXIgaW4gb3JkZXIgdG8gYXNzYWlsIHRoZW0sIGFuZCBub3QgYSBtYW4gc3Rvb2QgaGlzIGdyb3VuZCwgYnV0IGFsbCBmbGVkIGF3YXkgZnJvbSB0aGUgdHJpYnVuYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCB3aGVuIHRoZXNlIGhhZCBkaXNwZXJzZWQsIGFuZCB3aGVuIENhdG8gaGFkIGNvbWUgZm9yd2FyZCB3aXRoIGNvbW1lbmRhdGlvbiBhbmQgZW5jb3VyYWdlbWVudCBmb3IgdGhlIHBlb3BsZSwgdGhlIG1ham9yaXR5IG9mIHRoZW0gc3Rvb2QgcHJlcGFyZWQgdG8gcHV0IGRvd24gTWV0ZWxsdXMgYnkgYW55IGFuZCBldmVyeSBtZWFucywgYW5kIHRoZSBzZW5hdGUgaW4gZnVsbCBzZXNzaW9uIGFubm91bmNlZCBhbmV3IHRoYXQgaXQgd291bGQgYXNzaXN0IENhdG8gYW5kIGZpZ2h0IHRvIHRoZSBlbmQgYWdhaW5zdCB0aGUgbGF3LCBjb252aW5jZWQgdGhhdCBpdCB3b3VsZCBpbnRyb2R1Y2Ugc2VkaXRpb24gYW5kIGNpdmlsIHdhciBpbnRvIFJvbWUuCgkJCTwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc3RlcHMgb2YgdGhlIHRlbXBsZSBvZiBDYXN0b3IgbGVkIGRvd24gdG8gYSBwbGF0Zm9ybSwgZnJvbSB3aGljaCB0aGUgcGVvcGxlIHdlcmUgb2Z0ZW4gYWRkcmVzc2VkLjwvbm90ZT4gZW1wdHkgYW5kIGhpcyBvcHBvbmVudHMgaW4gZmxpZ2h0IHRocm91Z2ggdGhlIGZvcnVtLCBiZWluZyBhbHRvZ2V0aGVyIHBlcnN1YWRlZCB0aGF0IGhlIGhhZCB3b24gdGhlIGRheSwgaGUgb3JkZXJlZCBoaXMgYXJtZWQgbWVuIHRvIGdvIGF3YXkgYWdhaW4sIGFuZCBjb21pbmcgZm9yd2FyZCBoaW1zZWxmIGluIG9yZGVybHkgZmFzaGlvbiBhdHRlbXB0ZWQgdG8gaGF2ZSB0aGUgbGF3IGVuYWN0ZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoaXMgb3Bwb25lbnRzLCBxdWlja2x5IHJlY292ZXJpbmcgZnJvbSB0aGVpciByb3V0LCBhZHZhbmNlZCBhZ2FpbiB1cG9uIGhpbSB3aXRoIGxvdWQgYW5kIGNvbmZpZGVudCBzaG91dHMsIHNvIHRoYXQgaGlzIHBhcnRpc2FucyB3ZXJlIG92ZXJ3aGVsbWVkIHdpdGggY29uZnVzaW9uIGFuZCB0ZXJyb3IuIFRoZXkgc3VwcG9zZWQgdGhhdCB0aGVpciBlbmVtaWVzIGhhZCBwcm92aWRlZCB0aGVtc2VsdmVzIHdpdGggYXJtcyBmcm9tIHNvbWUgcGxhY2Ugb3Igb3RoZXIgaW4gb3JkZXIgdG8gYXNzYWlsIHRoZW0sIGFuZCBub3QgYSBtYW4gc3Rvb2QgaGlzIGdyb3VuZCwgYnV0IGFsbCBmbGVkIGF3YXkgZnJvbSB0aGUgdHJpYnVuYWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCB3aGVuIHRoZXNlIGhhZCBkaXNwZXJzZWQsIGFuZCB3aGVuIENhdG8gaGFkIGNvbWUgZm9yd2FyZCB3aXRoIGNvbW1lbmRhdGlvbiBhbmQgZW5jb3VyYWdlbWVudCBmb3IgdGhlIHBlb3BsZSwgdGhlIG1ham9yaXR5IG9mIHRoZW0gc3Rvb2QgcHJlcGFyZWQgdG8gcHV0IGRvd24gTWV0ZWxsdXMgYnkgYW55IGFuZCBldmVyeSBtZWFucywgYW5kIHRoZSBzZW5hdGUgaW4gZnVsbCBzZXNzaW9uIGFubm91bmNlZCBhbmV3IHRoYXQgaXQgd291bGQgYXNzaXN0IENhdG8gYW5kIGZpZ2h0IHRvIHRoZSBlbmQgYWdhaW5zdCB0aGUgbGF3LCBjb252aW5jZWQgdGhhdCBpdCB3b3VsZCBpbnRyb2R1Y2Ugc2VkaXRpb24gYW5kIGNpdmlsIHdhciBpbnRvIFJvbWUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1ldGVsbHVzIGhpbXNlbGYgd2FzIHN0aWxsIHVueWllbGRpbmcgYW5kIGJvbGQsIGJ1dCBzaW5jZSBoZSBzYXcgdGhhdCBoaXMgZm9sbG93ZXJzIHdlcmUgY29tcGxldGVseSB0ZXJyaWZpZWQgYmVmb3JlIENhdG8gYW5kIHRob3VnaHQgaGltIHV0dGVybHkgaW52aW5jaWJsZSwgaGUgc3VkZGVubHkgcnVzaGVkIG9mZiBpbnRvIHRoZSBmb3J1bSwgYXNzZW1ibGVkIHRoZSBwZW9wbGUsIGFuZCBtYWRlIGEgbG9uZyBhbmQgaW52aWRpb3VzIHNwZWVjaCBhZ2FpbnN0IENhdG87IHRoZW4sIGNyeWluZyBvdXQgdGhhdCBoZSB3YXMgZmxlZWluZyBmcm9tIENhdG8ncyB0eXJhbm55IGFuZCB0aGUgY29uc3BpcmFjeSBhZ2FpbnN0IFBvbXBleSwgZm9yIHdoaWNoIHRoZSBjaXR5IHdvdWxkIHNwZWVkaWx5IHJlcGVudCBpbiB0aGF0IGl0IHdhcyBkaXNob25vdXJpbmcgc28gZ3JlYXQgYSBtYW4sIGhlIHNldCBvdXQgYXQgb25jZSBmb3IgQXNpYSwgaW50ZW5kaW5nIHRvIGxheSB0aGVzZSBhY2N1c2F0aW9ucyBiZWZvcmUgUG9tcGV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgQ2F0byB3YXMgaW4gaGlnaCByZXB1dGUgZm9yIGhhdmluZyByZWxpZXZlZCB0aGUgdHJpYnVuYXRlIG9mIGEgZ3JlYXQgYnVyZGVuLCBhbmQgZm9yIGhhdmluZyBpbiBhIG1hbm5lciBvdmVydGhyb3duIHRoZSBwb3dlciBvZiBQb21wZXkgaW4gdGhlIHBlcnNvbiBvZiBNZXRlbGx1cy4gQnV0IGhlIHdvbiBzdGlsbCBtb3JlIGVzdGVlbSBieSBub3QgYWxsb3dpbmcgdGhlIHNlbmF0ZSB0byBjYXJyeSBvdXQgaXRzIHB1cnBvc2Ugb2YgZGVncmFkaW5nIE1ldGVsbHVzIGFuZCBkZXBvc2luZyBoaW0gZnJvbSBoaXMgb2ZmaWNlLCB3aGljaCBjb3Vyc2UgQ2F0byBvcHBvc2VkLCBhbmQgYnJvdWdodCB0aGUgc2VuYXRlIG92ZXIgdG8gaGlzIHZpZXdzLiBGb3IgdGhlIG11bHRpdHVkZSBjb25zaWRlcmVkIGl0IGEgdG9rZW4gb2YgaHVtYW5pdHkgYW5kIG1vZGVyYXRpb24gbm90IHRvIHRyYW1wbGUgb24gaGlzIGVuZW15IG9yIGluc3VsdCBoaW0gYWZ0ZXIgcHJldmFpbGluZyBjb21wbGV0ZWx5IG92ZXIgaGltLCBhbmQgcHJ1ZGVudCBtZW4gdGhvdWdodCBpdCByaWdodCBhbmQgYWR2YW50YWdlb3VzIG5vdCB0byBpcnJpdGF0ZSBQb21wZXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWV0ZWxsdXMgaGltc2VsZiB3YXMgc3RpbGwgdW55aWVsZGluZyBhbmQgYm9sZCwgYnV0IHNpbmNlIGhlIHNhdyB0aGF0IGhpcyBmb2xsb3dlcnMgd2VyZSBjb21wbGV0ZWx5IHRlcnJpZmllZCBiZWZvcmUgQ2F0byBhbmQgdGhvdWdodCBoaW0gdXR0ZXJseSBpbnZpbmNpYmxlLCBoZSBzdWRkZW5seSBydXNoZWQgb2ZmIGludG8gdGhlIGZvcnVtLCBhc3NlbWJsZWQgdGhlIHBlb3BsZSwgYW5kIG1hZGUgYSBsb25nIGFuZCBpbnZpZGlvdXMgc3BlZWNoIGFnYWluc3QgQ2F0bzsgdGhlbiwgY3J5aW5nIG91dCB0aGF0IGhlIHdhcyBmbGVlaW5nIGZyb20gQ2F0bydzIHR5cmFubnkgYW5kIHRoZSBjb25zcGlyYWN5IGFnYWluc3QgUG9tcGV5LCBmb3Igd2hpY2ggdGhlIGNpdHkgd291bGQgc3BlZWRpbHkgcmVwZW50IGluIHRoYXQgaXQgd2FzIGRpc2hvbm91cmluZyBzbyBncmVhdCBhIG1hbiwgaGUgc2V0IG91dCBhdCBvbmNlIGZvciBBc2lhLCBpbnRlbmRpbmcgdG8gbGF5IHRoZXNlIGFjY3VzYXRpb25zIGJlZm9yZSBQb21wZXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBDYXRvIHdhcyBpbiBoaWdoIHJlcHV0ZSBmb3IgaGF2aW5nIHJlbGlldmVkIHRoZSB0cmlidW5hdGUgb2YgYSBncmVhdCBidXJkZW4sIGFuZCBmb3IgaGF2aW5nIGluIGEgbWFubmVyIG92ZXJ0aHJvd24gdGhlIHBvd2VyIG9mIFBvbXBleSBpbiB0aGUgcGVyc29uIG9mIE1ldGVsbHVzLiBCdXQgaGUgd29uIHN0aWxsIG1vcmUgZXN0ZWVtIGJ5IG5vdCBhbGxvd2luZyB0aGUgc2VuYXRlIHRvIGNhcnJ5IG91dCBpdHMgcHVycG9zZSBvZiBkZWdyYWRpbmcgTWV0ZWxsdXMgYW5kIGRlcG9zaW5nIGhpbSBmcm9tIGhpcyBvZmZpY2UsIHdoaWNoIGNvdXJzZSBDYXRvIG9wcG9zZWQsIGFuZCBicm91Z2h0IHRoZSBzZW5hdGUgb3ZlciB0byBoaXMgdmlld3MuIEZvciB0aGUgbXVsdGl0dWRlIGNvbnNpZGVyZWQgaXQgYSB0b2tlbiBvZiBodW1hbml0eSBhbmQgbW9kZXJhdGlvbiBub3QgdG8gdHJhbXBsZSBvbiBoaXMgZW5lbXkgb3IgaW5zdWx0IGhpbSBhZnRlciBwcmV2YWlsaW5nIGNvbXBsZXRlbHkgb3ZlciBoaW0sIGFuZCBwcnVkZW50IG1lbiB0aG91Z2h0IGl0IHJpZ2h0IGFuZCBhZHZhbnRhZ2VvdXMgbm90IHRvIGlycml0YXRlIFBvbXBleS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgTHVjdWxsdXMsIGhhdmluZyBjb21lIGJhY2sgZnJvbSBoaXMgZXhwZWRpdGlvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5IZSBjYW1lIGJhY2sgaW4gNjYgQi5DLiwgYW5kIGhhZCB0byB3YWl0IHRocmVlIHllYXJzIGJlZm9yZSBiZWluZyBhbGxvd2VkIHRvIGNlbGVicmF0ZSBhIHRyaXVtcGguIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gMzcuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MdWN1bGx1czwvdGl0bGU+LCB4eHh2aWk8L2JpYmw+Ljwvbm90ZT4gdGhlIGNvbnN1bW1hdGlvbiBhbmQgZ2xvcnkgb2Ygd2hpY2ggUG9tcGV5IHdhcyB0aG91Z2h0IHRvIGhhdmUgdGFrZW4gYXdheSBmcm9tIGhpbSwgd2FzIGluIGRhbmdlciBvZiBsb3NpbmcgaGlzIHRyaXVtcGgsIHNpbmNlIENhaXVzIE1lbW1pdXMgcmFpc2VkIGEgc3VjY2Vzc2Z1bCBmYWN0aW9uIGFnYWluc3QgaGltIGFtb25nIHRoZSBwZW9wbGUgYW5kIGJyb3VnaHQgbGVnYWwgYWNjdXNhdGlvbnMgYWdhaW5zdCBoaW0sIG1vcmUgdG8gZ3JhdGlmeSBQb21wZXkgdGhhbiBvdXQgb2YgcHJpdmF0ZSBlbm1pdHkuIEJ1dCBDYXRvLCBiZWluZyByZWxhdGVkIHRvIEx1Y3VsbHVzLCB3aG8gaGFkIGhpcyBzaXN0ZXIgU2VydmlsaWEgdG8gd2lmZSwgYW5kIHRoaW5raW5nIHRoZSBhdHRlbXB0IGEgc2hhbWVmdWwgb25lLCBvcHBvc2VkIE1lbW1pdXMsIGFuZCB0aGVyZWJ5IGV4cG9zZWQgaGltc2VsZiB0byBtYW55IHNsYW5kZXJvdXMgYWNjdXNhdGlvbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZpbmFsbHksIGhvd2V2ZXIsIHRob3VnaCBoZSB3YXMgb24gdGhlIHBvaW50IG9mIGJlaW5nIGVqZWN0ZWQgZnJvbSBoaXMgb2ZmaWNlIG9uIHRoZSBncm91bmQgdGhhdCBoZSBleGVyY2lzZWQgdHlyYW5uaWNhbCBwb3dlciwgaGUgc28gZmFyIHByZXZhaWxlZCBhcyB0byBjb21wZWwgTWVtbWl1cyBoaW1zZWxmIHRvIGRlc2lzdCBmcm9tIGhpcyBhY2N1c2F0aW9ucyBhbmQgc2h1biB0aGUgY29udGVzdC4gTHVjdWxsdXMsIGFjY29yZGluZ2x5LCBjZWxlYnJhdGVkIGhpcyB0cml1bXBoLCBhbmQgdGhlcmVmb3JlIGNsdW5nIHN0aWxsIG1vcmUgY2xvc2VseSB0byB0aGUgZnJpZW5kc2hpcCBvZiBDYXRvLCBmaW5kaW5nIGluIGhpbSBhIGdyZWF0IGJ1bHdhcmsgb2YgZGVmZW5jZSBhZ2FpbnN0IHRoZSBwb3dlciBvZiBQb21wZXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIEx1Y3VsbHVzLCBoYXZpbmcgY29tZSBiYWNrIGZyb20gaGlzIGV4cGVkaXRpb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5IZSBjYW1lIGJhY2sgaW4gNjYgQi5DLiwgYW5kIGhhZCB0byB3YWl0IHRocmVlIHllYXJzIGJlZm9yZSBiZWluZyBhbGxvd2VkIHRvIGNlbGVicmF0ZSBhIHRyaXVtcGguIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHVjLiAzNy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgeHh4dmlpPC9iaWJsPi48L25vdGU+IHRoZSBjb25zdW1tYXRpb24gYW5kIGdsb3J5IG9mIHdoaWNoIFBvbXBleSB3YXMgdGhvdWdodCB0byBoYXZlIHRha2VuIGF3YXkgZnJvbSBoaW0sIHdhcyBpbiBkYW5nZXIgb2YgbG9zaW5nIGhpcyB0cml1bXBoLCBzaW5jZSBDYWl1cyBNZW1taXVzIHJhaXNlZCBhIHN1Y2Nlc3NmdWwgZmFjdGlvbiBhZ2FpbnN0IGhpbSBhbW9uZyB0aGUgcGVvcGxlIGFuZCBicm91Z2h0IGxlZ2FsIGFjY3VzYXRpb25zIGFnYWluc3QgaGltLCBtb3JlIHRvIGdyYXRpZnkgUG9tcGV5IHRoYW4gb3V0IG9mIHByaXZhdGUgZW5taXR5LiBCdXQgQ2F0bywgYmVpbmcgcmVsYXRlZCB0byBMdWN1bGx1cywgd2hvIGhhZCBoaXMgc2lzdGVyIFNlcnZpbGlhIHRvIHdpZmUsIGFuZCB0aGlua2luZyB0aGUgYXR0ZW1wdCBhIHNoYW1lZnVsIG9uZSwgb3Bwb3NlZCBNZW1taXVzLCBhbmQgdGhlcmVieSBleHBvc2VkIGhpbXNlbGYgdG8gbWFueSBzbGFuZGVyb3VzIGFjY3VzYXRpb25zLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gMzcuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHh4eHZpaTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgeHh4dmlpPC90cmFuc2xhdGlvbj4="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZpbmFsbHksIGhvd2V2ZXIsIHRob3VnaCBoZSB3YXMgb24gdGhlIHBvaW50IG9mIGJlaW5nIGVqZWN0ZWQgZnJvbSBoaXMgb2ZmaWNlIG9uIHRoZSBncm91bmQgdGhhdCBoZSBleGVyY2lzZWQgdHlyYW5uaWNhbCBwb3dlciwgaGUgc28gZmFyIHByZXZhaWxlZCBhcyB0byBjb21wZWwgTWVtbWl1cyBoaW1zZWxmIHRvIGRlc2lzdCBmcm9tIGhpcyBhY2N1c2F0aW9ucyBhbmQgc2h1biB0aGUgY29udGVzdC4gTHVjdWxsdXMsIGFjY29yZGluZ2x5LCBjZWxlYnJhdGVkIGhpcyB0cml1bXBoLCBhbmQgdGhlcmVmb3JlIGNsdW5nIHN0aWxsIG1vcmUgY2xvc2VseSB0byB0aGUgZnJpZW5kc2hpcCBvZiBDYXRvLCBmaW5kaW5nIGluIGhpbSBhIGdyZWF0IGJ1bHdhcmsgb2YgZGVmZW5jZSBhZ2FpbnN0IHRoZSBwb3dlciBvZiBQb21wZXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgUG9tcGV5IHJldHVybmVkIHdpdGggZ3JlYXQgcHJlc3RpZ2UgZnJvbSBoaXMgZXhwZWRpdGlvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2MiBCLkMuPC9ub3RlPiBhbmQgc2luY2UgdGhlIHNwbGVuZG91ciBhbmQgd2FybXRoIG9mIGhpcyByZWNlcHRpb24gbGVkIGhpbSB0byBiZWxpZXZlIHRoYXQgaGUgY291bGQgZ2V0IHdoYXRldmVyIGhlIHdhbnRlZCBmcm9tIGhpcyBmZWxsb3cgY2l0aXplbnMsIGhlIHNlbnQgZm9yd2FyZCBhIGRlbWFuZCB0aGF0IHRoZSBzZW5hdGUgcG9zdHBvbmUgdGhlIGNvbnN1bGFyIGVsZWN0aW9ucywgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBiZSBwcmVzZW50IGluIHBlcnNvbiBhbmQgYXNzaXN0IFBpc28gaW4gbWFraW5nIGhpcyBjYW52YXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbWFqb3JpdHkgb2YgdGhlIHNlbmF0b3JzIHdlcmUgaW5jbGluZWQgdG8geWllbGQuIENhdG8sIGhvd2V2ZXIsIHdobyBkaWQgbm90IHJlZ2FyZCB0aGUgcG9zdHBvbmVtZW50IGFzIHRoZSBjaGllZiBtYXR0ZXIgYXQgaXNzdWUsIGJ1dCB3aXNoZWQgdG8gY3V0IHNob3J0IHRoZSBhdHRlbXB0IGFuZCB0aGUgZXhwZWN0YXRpb25zIG9mIFBvbXBleSwgb3Bwb3NlZCB0aGUgbWVhc3VyZSBhbmQgY2hhbmdlZCB0aGUgb3BpbmlvbnMgb2YgdGhlIHNlbmF0b3JzLCBzbyB0aGF0IHRoZXkgcmVqZWN0ZWQgaXQuIFRoaXMgZGlzdHVyYmVkIFBvbXBleSBub3QgYSBsaXR0bGUsIGFuZCBjb25zaWRlcmluZyB0aGF0IENhdG8gd291bGQgYmUgYSBncmVhdCBzdHVtYmxpbmctYmxvY2sgaW4gaGlzIHdheSB1bmxlc3MgaGUgd2VyZSBtYWRlIGEgZnJpZW5kLCBoZSBzZW50IGZvciBNdW5hdGl1cywgQ2F0bydzIGNvbXBhbmlvbiwgYW5kIGFza2VkIHRoZSBlbGRlciBvZiBDYXRvJ3MgdHdvIG1hcnJpYWdlYWJsZSBuaWVjZXMgdG8gd2lmZSBmb3IgaGltc2VsZiwgYW5kIHRoZSB5b3VuZ2VyIGZvciBoaXMgc29uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIHNheSwgaG93ZXZlciwgdGhhdCBpdCB3YXMgbm90IGZvciBDYXRvJ3MgbmllY2VzLCBidXQgZm9yIGhpcyBkYXVnaHRlcnMsIHRoYXQgdGhlIHN1aXQgd2FzIG1hZGUuIFdoZW4gTXVuYXRpdXMgYnJvdWdodCB0aGlzIHByb3Bvc2FsIHRvIENhdG8gYW5kIGhpcyB3aWZlIGFuZCBzaXN0ZXJzLCB0aGUgd29tZW4gd2VyZSBvdmVyam95ZWQgYXQgdGhvdWdodCBvZiB0aGUgYWxsaWFuY2UsIGluIHZpZXcgb2YgdGhlIGdyZWF0bmVzcyBhbmQgaGlnaCByZXB1dGUgb2YgUG9tcGV5OyBDYXRvLCBob3dldmVyLCB3aXRob3V0IHBhdXNlIG9yIGRlbGliZXJhdGlvbiwgYnV0IHN0dW5nIHRvIHRoZSBxdWljaywgc2FpZCBhdCBvbmNlOiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+R28sIE11bmF0aXVzLCBnbywgYW5kIHRlbGwgUG9tcGV5IHRoYXQgQ2F0byBpcyBub3QgdG8gYmUgY2FwdHVyZWQgYnkgd2F5IG9mIHRoZSB3b21lbidzIGFwYXJ0bWVudHMgYWx0aG91Z2ggaGUgaGlnaGx5IHByaXplcyBQb21wZXkncyBnb29kIHdpbGwsIGFuZCBpZiBQb21wZXkgZG9lcyBqdXN0aWNlIHdpbGwgZ3JhbnQgaGltIGEgZnJpZW5kc2hpcCBtb3JlIHRvIGJlIHJlbGllZCB1cG9uIHRoYW4gYW55IG1hcnJpYWdlIGNvbm5lY3Rpb247IGJ1dCBoZSB3aWxsIG5vdCBnaXZlIGhvc3RhZ2VzIGZvciB0aGUgZ2xvcnkgb2YgUG9tcGV5IHRvIHRoZSBkZXRyaW1lbnQgb2YgaGlzIGNvdW50cnkuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBQb21wZXkgcmV0dXJuZWQgd2l0aCBncmVhdCBwcmVzdGlnZSBmcm9tIGhpcyBleHBlZGl0aW9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjIgQi5DLjwvbm90ZT4gYW5kIHNpbmNlIHRoZSBzcGxlbmRvdXIgYW5kIHdhcm10aCBvZiBoaXMgcmVjZXB0aW9uIGxlZCBoaW0gdG8gYmVsaWV2ZSB0aGF0IGhlIGNvdWxkIGdldCB3aGF0ZXZlciBoZSB3YW50ZWQgZnJvbSBoaXMgZmVsbG93IGNpdGl6ZW5zLCBoZSBzZW50IGZvcndhcmQgYSBkZW1hbmQgdGhhdCB0aGUgc2VuYXRlIHBvc3Rwb25lIHRoZSBjb25zdWxhciBlbGVjdGlvbnMsIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgYmUgcHJlc2VudCBpbiBwZXJzb24gYW5kIGFzc2lzdCBQaXNvIGluIG1ha2luZyBoaXMgY2FudmFzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYWpvcml0eSBvZiB0aGUgc2VuYXRvcnMgd2VyZSBpbmNsaW5lZCB0byB5aWVsZC4gQ2F0bywgaG93ZXZlciwgd2hvIGRpZCBub3QgcmVnYXJkIHRoZSBwb3N0cG9uZW1lbnQgYXMgdGhlIGNoaWVmIG1hdHRlciBhdCBpc3N1ZSwgYnV0IHdpc2hlZCB0byBjdXQgc2hvcnQgdGhlIGF0dGVtcHQgYW5kIHRoZSBleHBlY3RhdGlvbnMgb2YgUG9tcGV5LCBvcHBvc2VkIHRoZSBtZWFzdXJlIGFuZCBjaGFuZ2VkIHRoZSBvcGluaW9ucyBvZiB0aGUgc2VuYXRvcnMsIHNvIHRoYXQgdGhleSByZWplY3RlZCBpdC4gVGhpcyBkaXN0dXJiZWQgUG9tcGV5IG5vdCBhIGxpdHRsZSwgYW5kIGNvbnNpZGVyaW5nIHRoYXQgQ2F0byB3b3VsZCBiZSBhIGdyZWF0IHN0dW1ibGluZy1ibG9jayBpbiBoaXMgd2F5IHVubGVzcyBoZSB3ZXJlIG1hZGUgYSBmcmllbmQsIGhlIHNlbnQgZm9yIE11bmF0aXVzLCBDYXRvJ3MgY29tcGFuaW9uLCBhbmQgYXNrZWQgdGhlIGVsZGVyIG9mIENhdG8ncyB0d28gbWFycmlhZ2VhYmxlIG5pZWNlcyB0byB3aWZlIGZvciBoaW1zZWxmLCBhbmQgdGhlIHlvdW5nZXIgZm9yIGhpcyBzb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgc2F5LCBob3dldmVyLCB0aGF0IGl0IHdhcyBub3QgZm9yIENhdG8ncyBuaWVjZXMsIGJ1dCBmb3IgaGlzIGRhdWdodGVycywgdGhhdCB0aGUgc3VpdCB3YXMgbWFkZS4gV2hlbiBNdW5hdGl1cyBicm91Z2h0IHRoaXMgcHJvcG9zYWwgdG8gQ2F0byBhbmQgaGlzIHdpZmUgYW5kIHNpc3RlcnMsIHRoZSB3b21lbiB3ZXJlIG92ZXJqb3llZCBhdCB0aG91Z2h0IG9mIHRoZSBhbGxpYW5jZSwgaW4gdmlldyBvZiB0aGUgZ3JlYXRuZXNzIGFuZCBoaWdoIHJlcHV0ZSBvZiBQb21wZXk7IENhdG8sIGhvd2V2ZXIsIHdpdGhvdXQgcGF1c2Ugb3IgZGVsaWJlcmF0aW9uLCBidXQgc3R1bmcgdG8gdGhlIHF1aWNrLCBzYWlkIGF0IG9uY2U6IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkdvLCBNdW5hdGl1cywgZ28sIGFuZCB0ZWxsIFBvbXBleSB0aGF0IENhdG8gaXMgbm90IHRvIGJlIGNhcHR1cmVkIGJ5IHdheSBvZiB0aGUgd29tZW4ncyBhcGFydG1lbnRzIGFsdGhvdWdoIGhlIGhpZ2hseSBwcml6ZXMgUG9tcGV5J3MgZ29vZCB3aWxsLCBhbmQgaWYgUG9tcGV5IGRvZXMganVzdGljZSB3aWxsIGdyYW50IGhpbSBhIGZyaWVuZHNoaXAgbW9yZSB0byBiZSByZWxpZWQgdXBvbiB0aGFuIGFueSBtYXJyaWFnZSBjb25uZWN0aW9uOyBidXQgaGUgd2lsbCBub3QgZ2l2ZSBob3N0YWdlcyBmb3IgdGhlIGdsb3J5IG9mIFBvbXBleSB0byB0aGUgZGV0cmltZW50IG9mIGhpcyBjb3VudHJ5LjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BdCB0aGVzZSB3b3JkcyB0aGUgd29tZW4gd2VyZSB2ZXhlZCwgYW5kIENhdG8ncyBmcmllbmRzIGJsYW1lZCBoaXMgYW5zd2VyIGFzIGJvdGggcnVkZSBhbmQgb3ZlcmJlYXJpbmcuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXJ3YXJkcywgaG93ZXZlciwgaW4gdHJ5aW5nIHRvIHNlY3VyZSB0aGUgY29uc3Vsc2hpcCBmb3Igb25lIG9mIGhpcyBmcmllbmRzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkx1Y2l1cyBBZnJhbml1cywgZWxlY3RlZCBjb25zdWwgaW4gNjEgQi5DLiBmb3IgdGhlIHllYXIgNjAgQi5DLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA0NC4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCB4bGl2LiAzPC9iaWJsPi48L25vdGU+IFBvbXBleSBzZW50IG1vbmV5IHRvIHRoZSB0cmliZXMsIGFuZCB0aGUgYnJpYmVyeSB3YXMgbm90b3Jpb3VzLCBzaW5jZSB0aGUgc3VtcyBmb3IgaXQgd2VyZSBjb3VudGVkIG91dCBpbiBoaXMgZ2FyZGVucy4gQWNjb3JkaW5nbHksIHdoZW4gQ2F0byB0b2xkIHRoZSB3b21lbiB0aGF0IGhlIG11c3Qgb2YgbmVjZXNzaXR5IGhhdmUgc2hhcmVkIGluIHRoZSBkaXNncmFjZSBvZiBzdWNoIHRyYW5zYWN0aW9ucywgaGFkIGhlIGJlZW4gY29ubmVjdGVkIHdpdGggUG9tcGV5IGJ5IG1hcnJpYWdlLCB0aGV5IGFkbWl0dGVkIHRoYXQgaGUgaGFkIHRha2VuIGJldHRlciBjb3Vuc2VsIGluIHJlamVjdGluZyB0aGUgYWxsaWFuY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgeGxpdjwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGlmIHdlIGFyZSB0byBqdWRnZSBieSB0aGUgcmVzdWx0cywgaXQgd291bGQgc2VlbSB0aGF0IENhdG8gd2FzIHdob2xseSB3cm9uZyBpbiBub3QgYWNjZXB0aW5nIHRoZSBtYXJyaWFnZSBjb25uZWN0aW9uLCBpbnN0ZWFkIG9mIGFsbG93aW5nIFBvbXBleSB0byB0dXJuIHRvIENhZXNhciBhbmQgY29udHJhY3QgYSBtYXJyaWFnZSB3aGljaCB1bml0ZWQgdGhlIHBvd2VyIG9mIHRoZSB0d28gbWVuLCBuZWFybHkgb3ZlcnRocmV3IHRoZSBSb21hbiBzdGF0ZSwgYW5kIGRlc3Ryb3llZCB0aGUgY29uc3RpdHV0aW9uLiBOb25lIG9mIHRoZXNlIHRoaW5ncyBwZXJoYXBzIHdvdWxkIGhhdmUgaGFwcGVuZWQsIGhhZCBub3QgQ2F0byBiZWVuIHNvIGFmcmFpZCBvZiB0aGUgc2xpZ2h0IHRyYW5zZ3Jlc3Npb25zIG9mIFBvbXBleSBhcyB0byBhbGxvdyBoaW0gdG8gY29tbWl0IHRoZSBncmVhdGVzdCBvZiBhbGwsIGFuZCBhZGQgaGlzIHBvd2VyIHRvIHRoYXQgb2YgYW5vdGhlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyd2FyZHMsIGhvd2V2ZXIsIGluIHRyeWluZyB0byBzZWN1cmUgdGhlIGNvbnN1bHNoaXAgZm9yIG9uZSBvZiBoaXMgZnJpZW5kcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkx1Y2l1cyBBZnJhbml1cywgZWxlY3RlZCBjb25zdWwgaW4gNjEgQi5DLiBmb3IgdGhlIHllYXIgNjAgQi5DLiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDQ0LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeGxpdi4gMzwvYmlibD4uPC9ub3RlPiBQb21wZXkgc2VudCBtb25leSB0byB0aGUgdHJpYmVzLCBhbmQgdGhlIGJyaWJlcnkgd2FzIG5vdG9yaW91cywgc2luY2UgdGhlIHN1bXMgZm9yIGl0IHdlcmUgY291bnRlZCBvdXQgaW4gaGlzIGdhcmRlbnMuIEFjY29yZGluZ2x5LCB3aGVuIENhdG8gdG9sZCB0aGUgd29tZW4gdGhhdCBoZSBtdXN0IG9mIG5lY2Vzc2l0eSBoYXZlIHNoYXJlZCBpbiB0aGUgZGlzZ3JhY2Ugb2Ygc3VjaCB0cmFuc2FjdGlvbnMsIGhhZCBoZSBiZWVuIGNvbm5lY3RlZCB3aXRoIFBvbXBleSBieSBtYXJyaWFnZSwgdGhleSBhZG1pdHRlZCB0aGF0IGhlIGhhZCB0YWtlbiBiZXR0ZXIgY291bnNlbCBpbiByZWplY3RpbmcgdGhlIGFsbGlhbmNlLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDQ0LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeGxpdi4gMzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsaXYuIDM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4bGl2PC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA0NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsaXY8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4bGl2PC90cmFuc2xhdGlvbj4="
translation['30.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGlmIHdlIGFyZSB0byBqdWRnZSBieSB0aGUgcmVzdWx0cywgaXQgd291bGQgc2VlbSB0aGF0IENhdG8gd2FzIHdob2xseSB3cm9uZyBpbiBub3QgYWNjZXB0aW5nIHRoZSBtYXJyaWFnZSBjb25uZWN0aW9uLCBpbnN0ZWFkIG9mIGFsbG93aW5nIFBvbXBleSB0byB0dXJuIHRvIENhZXNhciBhbmQgY29udHJhY3QgYSBtYXJyaWFnZSB3aGljaCB1bml0ZWQgdGhlIHBvd2VyIG9mIHRoZSB0d28gbWVuLCBuZWFybHkgb3ZlcnRocmV3IHRoZSBSb21hbiBzdGF0ZSwgYW5kIGRlc3Ryb3llZCB0aGUgY29uc3RpdHV0aW9uLiBOb25lIG9mIHRoZXNlIHRoaW5ncyBwZXJoYXBzIHdvdWxkIGhhdmUgaGFwcGVuZWQsIGhhZCBub3QgQ2F0byBiZWVuIHNvIGFmcmFpZCBvZiB0aGUgc2xpZ2h0IHRyYW5zZ3Jlc3Npb25zIG9mIFBvbXBleSBhcyB0byBhbGxvdyBoaW0gdG8gY29tbWl0IHRoZSBncmVhdGVzdCBvZiBhbGwsIGFuZCBhZGQgaGlzIHBvd2VyIHRvIHRoYXQgb2YgYW5vdGhlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgdGhpbmdzLCBob3dldmVyLCB3ZXJlIHN0aWxsIGluIHRoZSBmdXR1cmUuIE1lYW53aGlsZSBMdWN1bGx1cyBnb3QgaW50byBhIGNvbnRlbnRpb24gd2l0aCBQb21wZXkgb3ZlciB0aGUgYXJyYW5nZW1lbnRzIGluIFBvbnR1cyAoZWFjaCBvZiB0aGVtLCBuYW1lbHksIGRlbWFuZGVkIHRoYXQgaGlzIG93biBwcm9jZWVkaW5ncyBzaG91bGQgYmUgY29uZmlybWVkKSwgQ2F0byBjYW1lIHRvIHRoZSBhaWQgb2YgTHVjdWxsdXMsIHdobyB3YXMgbWFuaWZlc3RseSB3cm9uZ2VkLCBhbmQgUG9tcGV5LCB3b3JzdGVkIGluIHRoZSBzZW5hdGUgYW5kIHNlZWtpbmcgcG9wdWxhciBmYXZvdXIsIGludml0ZWQgdGhlIHNvbGRpZXJ5IHRvIGEgZGlzdHJpYnV0aW9uIG9mIGxhbmQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHVjLiA0Mi42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx1Y3VsbHVzPC90aXRsZT4sIHhsaWkuIDY8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDYuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgeGx2aS4gMyBmPC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gQ2F0byBvcHBvc2VkIGhpbSBpbiB0aGlzIG1lYXN1cmUgYWxzbywgYW5kIGZydXN0cmF0ZWQgdGhlIGxhdywgdGhlbiBQb21wZXkgYXR0YWNoZWQgaGltc2VsZiB0byBDbG9kaXVzLCBhdCB0aGF0IHRpbWUgdGhlIGJvbGRlc3Qgb2YgdGhlIHBvcHVsYXIgbGVhZGVycywgYW5kIHdvbiBDYWVzYXIgdG8gaGlzIHN1cHBvcnQsIGEgcmVzdWx0IGZvciB3aGljaCBDYXRvIGhpbXNlbGYgd2FzIGluIGEgd2F5IHJlc3BvbnNpYmxlLiBGb3IgQ2Flc2FyLCBvbiByZXR1cm5pbmcgZnJvbSBoaXMgcHJhZXRvcnNoaXAgaW4gU3BhaW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHN1bW1lciBvZiA2MCBCLkMuPC9ub3RlPiBkZXNpcmVkIHRvIGJlIGEgY2FuZGlkYXRlIGZvciB0aGUgY29uc3Vsc2hpcCwgYW5kIGF0IHRoZSBzYW1lIHRpbWUgYXNrZWQgZm9yIGEgdHJpdW1waC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNpbmNlIGJ5IGxhdyBjYW5kaWRhdGVzIGZvciBhIG1hZ2lzdHJhY3kgbXVzdCBiZSBwcmVzZW50IGluIHRoZSBjaXR5LCB3aGlsZSB0aG9zZSB3aG8gYXJlIGdvaW5nIHRvIGNlbGVicmF0ZSBhIHRyaXVtcGggbXVzdCByZW1haW4gb3V0c2lkZSB0aGUgd2FsbHMsIGhlIGFza2VkIHBlcm1pc3Npb24gZnJvbSB0aGUgc2VuYXRlIHRvIHNvbGljaXQgdGhlIG9mZmljZSBieSBtZWFucyBvZiBvdGhlcnMuIE1hbnkgd2VyZSB3aWxsaW5nIHRvIGdyYW50IHRoZSByZXF1ZXN0LCBidXQgQ2F0byBvcHBvc2VkIGl0OyBhbmQgd2hlbiBoZSBzYXcgdGhhdCB0aGUgc2VuYXRvcnMgd2VyZSByZWFkeSB0byBncmF0aWZ5IENhZXNhciwgaGUgY29uc3VtZWQgdGhlIHdob2xlIGRheSBpbiBzcGVha2luZyBhbmQgdGh1cyBmcnVzdHJhdGVkIHRoZWlyIGRlc2lyZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBDYWVzYXIgZ2F2ZSB1cCBoaXMgdHJpdW1waCwgZW50ZXJlZCB0aGUgY2l0eSwgYW5kIGF0IG9uY2UgYXR0YWNoZWQgaGltc2VsZiB0byBQb21wZXkgYW5kIHNvdWdodCB0aGUgY29uc3Vsc2hpcC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAxMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhZXNhcjwvdGl0bGU+LCB4aWlpLiAxIGY8L2JpYmw+Ljwvbm90ZT4gQWZ0ZXIgaGUgaGFkIGJlZW4gZWxlY3RlZCBjb25zdWwsIGhlIGdhdmUgaGlzIGRhdWdodGVyIEp1bGlhIGluIG1hcnJpYWdlIHRvIFBvbXBleSwgYW5kIG5vdyB0aGF0IHRoZSB0d28gd2VyZSB1bml0ZWQgd2l0aCBvbmUgYW5vdGhlciBhZ2FpbnN0IHRoZSBzdGF0ZSwgdGhlIG9uZSB3b3VsZCBicmluZyBpbiBsYXdzIG9mZmVyaW5nIGFsbG90bWVudCBhbmQgZGlzdHJpYnV0aW9uIG9mIGxhbmQgdG8gdGhlIHBvb3IsIGFuZCB0aGUgb3RoZXIgd291bGQgYmUgYXQgaGFuZCB3aXRoIHN1cHBvcnQgZm9yIHRoZSBsYXdzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHBhcnR5IG9mIEx1Y3VsbHVzIGFuZCBDaWNlcm8sIHJhbmdpbmcgdGhlbXNlbHZlcyB3aXRoIEJpYnVsdXMsIHRoZSBvdGhlciBjb25zdWwsIG9wcG9zZWQgdGhlIG1lYXN1cmVzLCBhbmQgYWJvdmUgYWxsIENhdG8sIHdobyBub3cgc3VzcGVjdGVkIHRoYXQgdGhlIGZyaWVuZGx5IGFsbGlhbmNlIGJldHdlZW4gQ2Flc2FyIGFuZCBQb21wZXkgaGFkIGJlZW4gbWFkZSBmb3Igbm8ganVzdCBwdXJwb3NlLCBhbmQgZGVjbGFyZWQgdGhhdCBoZSB3YXMgYWZyYWlkLCBub3Qgb2YgdGhlIGRpc3RyaWJ1dGlvbiBvZiBsYW5kLCBidXQgb2YgdGhlIHJld2FyZCB3aGljaCB3b3VsZCBiZSBwYWlkIGZvciB0aGlzIHRvIHRob3NlIHdobyB3ZXJlIGVudGljaW5nIHRoZSBwZW9wbGUgd2l0aCBzdWNoIGZhdm91cnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgdGhpbmdzLCBob3dldmVyLCB3ZXJlIHN0aWxsIGluIHRoZSBmdXR1cmUuIE1lYW53aGlsZSBMdWN1bGx1cyBnb3QgaW50byBhIGNvbnRlbnRpb24gd2l0aCBQb21wZXkgb3ZlciB0aGUgYXJyYW5nZW1lbnRzIGluIFBvbnR1cyAoZWFjaCBvZiB0aGVtLCBuYW1lbHksIGRlbWFuZGVkIHRoYXQgaGlzIG93biBwcm9jZWVkaW5ncyBzaG91bGQgYmUgY29uZmlybWVkKSwgQ2F0byBjYW1lIHRvIHRoZSBhaWQgb2YgTHVjdWxsdXMsIHdobyB3YXMgbWFuaWZlc3RseSB3cm9uZ2VkLCBhbmQgUG9tcGV5LCB3b3JzdGVkIGluIHRoZSBzZW5hdGUgYW5kIHNlZWtpbmcgcG9wdWxhciBmYXZvdXIsIGludml0ZWQgdGhlIHNvbGRpZXJ5IHRvIGEgZGlzdHJpYnV0aW9uIG9mIGxhbmQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gNDIuNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHhsaWkuIDY8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA0Ni4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsdmkuIDMgZjwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHVjLiA0Mi42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgeGxpaS4gNjwvYmlibD47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHhsaWkuIDY8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA0Ni4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsdmkuIDMgZjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsdmkuIDMgZjwvdHJhbnNsYXRpb24+"
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIENhdG8gb3Bwb3NlZCBoaW0gaW4gdGhpcyBtZWFzdXJlIGFsc28sIGFuZCBmcnVzdHJhdGVkIHRoZSBsYXcsIHRoZW4gUG9tcGV5IGF0dGFjaGVkIGhpbXNlbGYgdG8gQ2xvZGl1cywgYXQgdGhhdCB0aW1lIHRoZSBib2xkZXN0IG9mIHRoZSBwb3B1bGFyIGxlYWRlcnMsIGFuZCB3b24gQ2Flc2FyIHRvIGhpcyBzdXBwb3J0LCBhIHJlc3VsdCBmb3Igd2hpY2ggQ2F0byBoaW1zZWxmIHdhcyBpbiBhIHdheSByZXNwb25zaWJsZS4gRm9yIENhZXNhciwgb24gcmV0dXJuaW5nIGZyb20gaGlzIHByYWV0b3JzaGlwIGluIFNwYWluLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHN1bW1lciBvZiA2MCBCLkMuPC9ub3RlPiBkZXNpcmVkIHRvIGJlIGEgY2FuZGlkYXRlIGZvciB0aGUgY29uc3Vsc2hpcCwgYW5kIGF0IHRoZSBzYW1lIHRpbWUgYXNrZWQgZm9yIGEgdHJpdW1waC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBieSBsYXcgY2FuZGlkYXRlcyBmb3IgYSBtYWdpc3RyYWN5IG11c3QgYmUgcHJlc2VudCBpbiB0aGUgY2l0eSwgd2hpbGUgdGhvc2Ugd2hvIGFyZSBnb2luZyB0byBjZWxlYnJhdGUgYSB0cml1bXBoIG11c3QgcmVtYWluIG91dHNpZGUgdGhlIHdhbGxzLCBoZSBhc2tlZCBwZXJtaXNzaW9uIGZyb20gdGhlIHNlbmF0ZSB0byBzb2xpY2l0IHRoZSBvZmZpY2UgYnkgbWVhbnMgb2Ygb3RoZXJzLiBNYW55IHdlcmUgd2lsbGluZyB0byBncmFudCB0aGUgcmVxdWVzdCwgYnV0IENhdG8gb3Bwb3NlZCBpdDsgYW5kIHdoZW4gaGUgc2F3IHRoYXQgdGhlIHNlbmF0b3JzIHdlcmUgcmVhZHkgdG8gZ3JhdGlmeSBDYWVzYXIsIGhlIGNvbnN1bWVkIHRoZSB3aG9sZSBkYXkgaW4gc3BlYWtpbmcgYW5kIHRodXMgZnJ1c3RyYXRlZCB0aGVpciBkZXNpcmVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBDYWVzYXIgZ2F2ZSB1cCBoaXMgdHJpdW1waCwgZW50ZXJlZCB0aGUgY2l0eSwgYW5kIGF0IG9uY2UgYXR0YWNoZWQgaGltc2VsZiB0byBQb21wZXkgYW5kIHNvdWdodCB0aGUgY29uc3Vsc2hpcC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMTMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4aWlpLiAxIGY8L2JpYmw+Ljwvbm90ZT4gQWZ0ZXIgaGUgaGFkIGJlZW4gZWxlY3RlZCBjb25zdWwsIGhlIGdhdmUgaGlzIGRhdWdodGVyIEp1bGlhIGluIG1hcnJpYWdlIHRvIFBvbXBleSwgYW5kIG5vdyB0aGF0IHRoZSB0d28gd2VyZSB1bml0ZWQgd2l0aCBvbmUgYW5vdGhlciBhZ2FpbnN0IHRoZSBzdGF0ZSwgdGhlIG9uZSB3b3VsZCBicmluZyBpbiBsYXdzIG9mZmVyaW5nIGFsbG90bWVudCBhbmQgZGlzdHJpYnV0aW9uIG9mIGxhbmQgdG8gdGhlIHBvb3IsIGFuZCB0aGUgb3RoZXIgd291bGQgYmUgYXQgaGFuZCB3aXRoIHN1cHBvcnQgZm9yIHRoZSBsYXdzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDEzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeGlpaS4gMSBmPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeGlpaS4gMSBmPC90cmFuc2xhdGlvbj4="
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcGFydHkgb2YgTHVjdWxsdXMgYW5kIENpY2VybywgcmFuZ2luZyB0aGVtc2VsdmVzIHdpdGggQmlidWx1cywgdGhlIG90aGVyIGNvbnN1bCwgb3Bwb3NlZCB0aGUgbWVhc3VyZXMsIGFuZCBhYm92ZSBhbGwgQ2F0bywgd2hvIG5vdyBzdXNwZWN0ZWQgdGhhdCB0aGUgZnJpZW5kbHkgYWxsaWFuY2UgYmV0d2VlbiBDYWVzYXIgYW5kIFBvbXBleSBoYWQgYmVlbiBtYWRlIGZvciBubyBqdXN0IHB1cnBvc2UsIGFuZCBkZWNsYXJlZCB0aGF0IGhlIHdhcyBhZnJhaWQsIG5vdCBvZiB0aGUgZGlzdHJpYnV0aW9uIG9mIGxhbmQsIGJ1dCBvZiB0aGUgcmV3YXJkIHdoaWNoIHdvdWxkIGJlIHBhaWQgZm9yIHRoaXMgdG8gdGhvc2Ugd2hvIHdlcmUgZW50aWNpbmcgdGhlIHBlb3BsZSB3aXRoIHN1Y2ggZmF2b3Vycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnkgdGhlc2UgdXR0ZXJhbmNlcyBoZSBicm91Z2h0IHRoZSBzZW5hdGUgb3V0c2lkZSB0aGUgc2VuYXRlIHRvIHVuYW5pbWl0eSwgYW5kIG1hbnkgbWVuIHN1cHBvcnRlZCBoaW0gb3V0IG9mIGRpc3BsZWFzdXJlIGF0IHRoZSBzdHJhbmdlIGNvbmR1Y3Qgb2YgQ2Flc2FyOyBmb3Igd2hhdGV2ZXIgcG9saXRpY2FsIHNjaGVtZXMgdGhlIGJvbGRlc3QgYW5kIG1vc3QgYXJyb2dhbnQgdHJpYnVuZXMgd2VyZSB3b250IHRvIHByYWN0aXNlIHRvIHdpbiB0aGUgZmF2b3VyIG9mIHRoZSBtdWx0aXR1ZGUsIHRoZXNlIENhZXNhciB1c2VkIHdpdGggdGhlIHN1cHBvcnQgb2YgY29uc3VsYXIgcG93ZXIsIGluIGRpc2dyYWNlZnVsIGFuZCBodW1pbGlhdGluZyBhdHRlbXB0cyB0byBpbmdyYXRpYXRlIGhpbXNlbGYgd2l0aCB0aGUgcGVvcGxlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDE0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2Flc2FyPC90aXRsZT4sIHhpdi4gMTwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgb3Bwb25lbnRzIG9mIENhdG8gd2VyZSBhbGFybWVkIGFuZCBoYWQgcmVjb3Vyc2UgdG8gdmlvbGVuY2UuIFRvIGJlZ2luIHdpdGgsIHVwb24gQmlidWx1cyBoaW1zZWxmLCBhcyBoZSB3YXMgZ29pbmcgZG93biBpbnRvIHRoZSBmb3J1bSwgYSBiYXNrZXQgb2Ygb3JkdXJlIHdhcyBzY2F0dGVyZWQ7IHRoZW4gdGhlIGNyb3dkIGZlbGwgdXBvbiBoaXMgbGljdG9ycyBhbmQgYnJva2UgdGhlaXIgZmFzY2VzOyBhbmQgZmluYWxseSBtaXNzaWxlcyBmbGV3IGFuZCBtYW55IHBlcnNvbnMgd2VyZSB3b3VuZGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDQ4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIHhsdmlpaS4gMTwvYmlibD4uPC9ub3RlPiBBbGwgdGhlIG90aGVyIHNlbmF0b3JzIGZsZWQgZnJvbSB0aGUgZm9ydW0gYXQgYSBydW4sIGJ1dCBDYXRvIHdlbnQgb2ZmIGxhc3Qgb2YgYWxsIGF0IGEgd2FsaywgdHVybmluZyBhYm91dCBhbmQgcHJvdGVzdGluZyB0byB0aGUgY2l0aXplbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBub3Qgb25seSB3YXMgdGhlIGxhdyBmb3IgdGhlIGRpc3RyaWJ1dGlvbiBvZiBsYW5kcyBwYXNzZWQsIGJ1dCBhbHNvIGEgY2xhdXNlIHdhcyBhZGRlZCByZXF1aXJpbmcgdGhlIHdob2xlIHNlbmF0ZSB0byBzd2VhciBzb2xlbW5seSB0aGF0IGl0IHdvdWxkIHVwaG9sZCB0aGUgbGF3LCBhbmQgZ2l2ZSBpdHMgYWlkIGluIGNhc2UgYW55IG9uZSBzaG91bGQgYWN0IGNvbnRyYXJ5IHRvIGl0LCBhbmQgaGVhdnkgcGVuYWx0aWVzIHdlcmUgcHJvbm91bmNlZCBhZ2FpbnN0IHN1Y2ggYXMgd291bGQgbm90IHRha2UgdGhlIG9hdGguPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMTQuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXI8L3RpdGxlPiwgeGl2LiAyIGY8L2JpYmw+Ljwvbm90ZT4gQWxsIHRvb2sgdGhlIG9hdGgsIHRoZXJlZm9yZSwgdW5kZXIgY29tcHVsc2lvbiwgYmVhcmluZyBpbiBtaW5kIHRoZSBmYXRlIG9mIE1ldGVsbHVzIG9mIG9sZCwgd2hvbSB0aGUgcGVvcGxlIHN1ZmZlcmVkIHRvIGJlIGJhbmlzaGVkIGZyb20gSXRhbHkgYmVjYXVzZSBoZSB3b3VsZCBub3Qgc3dlYXIgdG8gYSBzaW1pbGFyIGxhdy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxMDAgQi5DLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDI5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TWFyaXVzPC90aXRsZT4sIHh4aXg8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyByZWFzb24sIGFsc28sIGRpZCB0aGUgd29tZW4gb2YgQ2F0bydzIGZhbWlseSBlYXJuZXN0bHkgYW5kIHdpdGggdGVhcnMgYmVzZWVjaCBoaW0gdG8geWllbGQgYW5kIHRha2UgdGhlIG9hdGgsIGVhcm5lc3RseSwgdG9vLCBkaWQgaGlzIGZyaWVuZHMgYW5kIGludGltYXRlcy4gQnV0IHRoZSBvbmUgd2hvIHdhcyBtb3N0IHN1Y2Nlc3NmdWwgaW4gcGVyc3VhZGluZyBhbmQgaW5kdWNpbmcgaGltIHRvIHRha2UgdGhlIG9hdGggd2FzIENpY2VybyB0aGUgb3JhdG9yLCB3aG8gYWR2aXNlZCBhbmQgc2hvd2VkIGhpbSB0aGF0IGl0IHdhcyBwb3NzaWJseSBldmVuIGEgd3JvbmcgdGhpbmcgdG8gdGhpbmsgaGltc2VsZiBhbG9uZSBpbiBkdXR5IGJvdW5kIHRvIGRpc29iZXkgdGhlIGdlbmVyYWwgd2lsbDsgYW5kIHRoYXQgaGlzIGRlc3BlcmF0ZSBjb25kdWN0LCB3aGVyZSBpdCB3YXMgaW1wb3NzaWJsZSB0byBtYWtlIGFueSBjaGFuZ2UgaW4gd2hhdCBoYWQgYmVlbiBkb25lLCB3YXMgYWx0b2dldGhlciBzZW5zZWxlc3MgYW5kIG1hZDsgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+bW9yZW92ZXIsIGl0IHdvdWxkIGJlIHRoZSBncmVhdGVzdCBvZiBldmlscyBpZiBoZSBzaG91bGQgYWJhbmRvbiB0aGUgY2l0eSBpbiBiZWhhbGYgb2Ygd2hpY2ggYWxsIGhpcyBlZmZvcnRzIGhhZCBiZWVuIG1hZGUsIGhhbmQgaGVyIG92ZXIgdG8gaGVyIGVuZW1pZXMsIGFuZCBzbywgYXBwYXJlbnRseSB3aXRoIHBsZWFzdXJlLCBnZXQgcmlkIG9mIGhpcyBzdHJ1Z2dsZXMgaW4gaGVyIGRlZmVuY2U7IGZvciBldmVuIGlmIENhdG8gZGlkIG5vdCBuZWVkIFJvbWUsIHN0aWxsLCBSb21lIG5lZWRlZCBDYXRvLCBhbmQgc28gZGlkIGFsbCBoaXMgZnJpZW5kczsgYW5kIGFtb25nIHRoZXNlIENpY2VybyBzYWlkIHRoYXQgaGUgaGltc2VsZiB3YXMgZm9yZW1vc3QsIHNpbmNlIGhlIHdhcyB0aGUgb2JqZWN0IG9mIHRoZSBwbG90cyBvZiBDbG9kaXVzLCB3aG8gd2FzIG9wZW5seSBhdHRhY2tpbmcgaGltIGJ5IG1lYW5zIG9mIHRoZSB0cmlidW5lc2hpcC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnkgdGhlc2UgYW5kIHNpbWlsYXIgYXJndW1lbnRzIGFuZCBlbnRyZWF0aWVzLCB3ZSBhcmUgdG9sZCwgYm90aCBhdCBob21lIGFuZCBpbiB0aGUgZm9ydW0sIENhdG8gd2FzIHNvZnRlbmVkIGFuZCBhdCBsYXN0IHByZXZhaWxlZCB1cG9uLiBIZSBjYW1lIGZvcndhcmQgdG8gdGFrZSB0aGUgb2F0aCBsYXN0IG9mIGFsbCwgZXhjZXB0IEZhdm9uaXVzLCBvbmUgb2YgaGlzIGZyaWVuZHMgYW5kIGludGltYXRlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnkgdGhlc2UgdXR0ZXJhbmNlcyBoZSBicm91Z2h0IHRoZSBzZW5hdGUgb3V0c2lkZSB0aGUgc2VuYXRlIHRvIHVuYW5pbWl0eSwgYW5kIG1hbnkgbWVuIHN1cHBvcnRlZCBoaW0gb3V0IG9mIGRpc3BsZWFzdXJlIGF0IHRoZSBzdHJhbmdlIGNvbmR1Y3Qgb2YgQ2Flc2FyOyBmb3Igd2hhdGV2ZXIgcG9saXRpY2FsIHNjaGVtZXMgdGhlIGJvbGRlc3QgYW5kIG1vc3QgYXJyb2dhbnQgdHJpYnVuZXMgd2VyZSB3b250IHRvIHByYWN0aXNlIHRvIHdpbiB0aGUgZmF2b3VyIG9mIHRoZSBtdWx0aXR1ZGUsIHRoZXNlIENhZXNhciB1c2VkIHdpdGggdGhlIHN1cHBvcnQgb2YgY29uc3VsYXIgcG93ZXIsIGluIGRpc2dyYWNlZnVsIGFuZCBodW1pbGlhdGluZyBhdHRlbXB0cyB0byBpbmdyYXRpYXRlIGhpbXNlbGYgd2l0aCB0aGUgcGVvcGxlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAxNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHhpdi4gMTwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMTQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4aXYuIDE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4aXYuIDE8L3RyYW5zbGF0aW9uPg=="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgb3Bwb25lbnRzIG9mIENhdG8gd2VyZSBhbGFybWVkIGFuZCBoYWQgcmVjb3Vyc2UgdG8gdmlvbGVuY2UuIFRvIGJlZ2luIHdpdGgsIHVwb24gQmlidWx1cyBoaW1zZWxmLCBhcyBoZSB3YXMgZ29pbmcgZG93biBpbnRvIHRoZSBmb3J1bSwgYSBiYXNrZXQgb2Ygb3JkdXJlIHdhcyBzY2F0dGVyZWQ7IHRoZW4gdGhlIGNyb3dkIGZlbGwgdXBvbiBoaXMgbGljdG9ycyBhbmQgYnJva2UgdGhlaXIgZmFzY2VzOyBhbmQgZmluYWxseSBtaXNzaWxlcyBmbGV3IGFuZCBtYW55IHBlcnNvbnMgd2VyZSB3b3VuZGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA0OC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsdmlpaS4gMTwvYmlibD4uPC9ub3RlPiBBbGwgdGhlIG90aGVyIHNlbmF0b3JzIGZsZWQgZnJvbSB0aGUgZm9ydW0gYXQgYSBydW4sIGJ1dCBDYXRvIHdlbnQgb2ZmIGxhc3Qgb2YgYWxsIGF0IGEgd2FsaywgdHVybmluZyBhYm91dCBhbmQgcHJvdGVzdGluZyB0byB0aGUgY2l0aXplbnMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4bHZpaWkuIDE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4bHZpaWkuIDE8L3RyYW5zbGF0aW9uPg=="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBub3Qgb25seSB3YXMgdGhlIGxhdyBmb3IgdGhlIGRpc3RyaWJ1dGlvbiBvZiBsYW5kcyBwYXNzZWQsIGJ1dCBhbHNvIGEgY2xhdXNlIHdhcyBhZGRlZCByZXF1aXJpbmcgdGhlIHdob2xlIHNlbmF0ZSB0byBzd2VhciBzb2xlbW5seSB0aGF0IGl0IHdvdWxkIHVwaG9sZCB0aGUgbGF3LCBhbmQgZ2l2ZSBpdHMgYWlkIGluIGNhc2UgYW55IG9uZSBzaG91bGQgYWN0IGNvbnRyYXJ5IHRvIGl0LCBhbmQgaGVhdnkgcGVuYWx0aWVzIHdlcmUgcHJvbm91bmNlZCBhZ2FpbnN0IHN1Y2ggYXMgd291bGQgbm90IHRha2UgdGhlIG9hdGguPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDE0LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeGl2LiAyIGY8L2JpYmw+Ljwvbm90ZT4gQWxsIHRvb2sgdGhlIG9hdGgsIHRoZXJlZm9yZSwgdW5kZXIgY29tcHVsc2lvbiwgYmVhcmluZyBpbiBtaW5kIHRoZSBmYXRlIG9mIE1ldGVsbHVzIG9mIG9sZCwgd2hvbSB0aGUgcGVvcGxlIHN1ZmZlcmVkIHRvIGJlIGJhbmlzaGVkIGZyb20gSXRhbHkgYmVjYXVzZSBoZSB3b3VsZCBub3Qgc3dlYXIgdG8gYSBzaW1pbGFyIGxhdy48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAxNC4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHhpdi4gMiBmPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeGl2LiAyIGY8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDEwMCBCLkMuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAyOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyaXVzPC90aXRsZT4sIHh4aXg8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMjkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCB4eGl4PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJpdXM8L3RpdGxlPiwgeHhpeDwvdHJhbnNsYXRpb24+"
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiwgYWxzbywgZGlkIHRoZSB3b21lbiBvZiBDYXRvJ3MgZmFtaWx5IGVhcm5lc3RseSBhbmQgd2l0aCB0ZWFycyBiZXNlZWNoIGhpbSB0byB5aWVsZCBhbmQgdGFrZSB0aGUgb2F0aCwgZWFybmVzdGx5LCB0b28sIGRpZCBoaXMgZnJpZW5kcyBhbmQgaW50aW1hdGVzLiBCdXQgdGhlIG9uZSB3aG8gd2FzIG1vc3Qgc3VjY2Vzc2Z1bCBpbiBwZXJzdWFkaW5nIGFuZCBpbmR1Y2luZyBoaW0gdG8gdGFrZSB0aGUgb2F0aCB3YXMgQ2ljZXJvIHRoZSBvcmF0b3IsIHdobyBhZHZpc2VkIGFuZCBzaG93ZWQgaGltIHRoYXQgaXQgd2FzIHBvc3NpYmx5IGV2ZW4gYSB3cm9uZyB0aGluZyB0byB0aGluayBoaW1zZWxmIGFsb25lIGluIGR1dHkgYm91bmQgdG8gZGlzb2JleSB0aGUgZ2VuZXJhbCB3aWxsOyBhbmQgdGhhdCBoaXMgZGVzcGVyYXRlIGNvbmR1Y3QsIHdoZXJlIGl0IHdhcyBpbXBvc3NpYmxlIHRvIG1ha2UgYW55IGNoYW5nZSBpbiB3aGF0IGhhZCBiZWVuIGRvbmUsIHdhcyBhbHRvZ2V0aGVyIHNlbnNlbGVzcyBhbmQgbWFkOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPm1vcmVvdmVyLCBpdCB3b3VsZCBiZSB0aGUgZ3JlYXRlc3Qgb2YgZXZpbHMgaWYgaGUgc2hvdWxkIGFiYW5kb24gdGhlIGNpdHkgaW4gYmVoYWxmIG9mIHdoaWNoIGFsbCBoaXMgZWZmb3J0cyBoYWQgYmVlbiBtYWRlLCBoYW5kIGhlciBvdmVyIHRvIGhlciBlbmVtaWVzLCBhbmQgc28sIGFwcGFyZW50bHkgd2l0aCBwbGVhc3VyZSwgZ2V0IHJpZCBvZiBoaXMgc3RydWdnbGVzIGluIGhlciBkZWZlbmNlOyBmb3IgZXZlbiBpZiBDYXRvIGRpZCBub3QgbmVlZCBSb21lLCBzdGlsbCwgUm9tZSBuZWVkZWQgQ2F0bywgYW5kIHNvIGRpZCBhbGwgaGlzIGZyaWVuZHM7IGFuZCBhbW9uZyB0aGVzZSBDaWNlcm8gc2FpZCB0aGF0IGhlIGhpbXNlbGYgd2FzIGZvcmVtb3N0LCBzaW5jZSBoZSB3YXMgdGhlIG9iamVjdCBvZiB0aGUgcGxvdHMgb2YgQ2xvZGl1cywgd2hvIHdhcyBvcGVubHkgYXR0YWNraW5nIGhpbSBieSBtZWFucyBvZiB0aGUgdHJpYnVuZXNoaXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ5IHRoZXNlIGFuZCBzaW1pbGFyIGFyZ3VtZW50cyBhbmQgZW50cmVhdGllcywgd2UgYXJlIHRvbGQsIGJvdGggYXQgaG9tZSBhbmQgaW4gdGhlIGZvcnVtLCBDYXRvIHdhcyBzb2Z0ZW5lZCBhbmQgYXQgbGFzdCBwcmV2YWlsZWQgdXBvbi4gSGUgY2FtZSBmb3J3YXJkIHRvIHRha2UgdGhlIG9hdGggbGFzdCBvZiBhbGwsIGV4Y2VwdCBGYXZvbml1cywgb25lIG9mIGhpcyBmcmllbmRzIGFuZCBpbnRpbWF0ZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkVsYXRlZCBieSB0aGlzIHN1Y2Nlc3MsIENhZXNhciBpbnRyb2R1Y2VkIGFub3RoZXIgbGF3LCB3aGljaCBwcm92aWRlZCB0aGF0IGFsbW9zdCB0aGUgd2hvbGUgb2YgQ2FtcGFuaWEgYmUgZGl2aWRlZCBhbW9uZyB0aGUgcG9vciBhbmQgbmVlZHkuIE5vIG9uZSBzcG9rZSBhZ2FpbnN0IHRoZSBsYXcgZXhjZXB0IENhdG8sIGFuZCBoaW0gQ2Flc2FyIG9yZGVyZWQgdG8gYmUgZHJhZ2dlZCBmcm9tIHRoZSA8Zm9yZWlnbiBsYW5nPSJsYSI+cm9zdHJhPC9mb3JlaWduPiB0byBwcmlzb24uIENhdG8gZGlkIG5vdCBhbnkgdGhlIG1vcmUgcmVtaXQgaGlzIGJvbGQgdXR0ZXJhbmNlcywgYnV0IGFzIGhlIHdhbGtlZCBhbG9uZyBkaXNjb3Vyc2VkIGFib3V0IHRoZSBsYXcgYW5kIGFkdmlzZWQgdGhlIHBlb3BsZSB0byBwdXQgYSBzdG9wIHRvIHN1Y2ggbGVnaXNsYXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgc2VuYXRlIGZvbGxvd2VkIGhpbSB3aXRoIGRvd25jYXN0IGxvb2tzLCBhcyB3ZWxsIGFzIHRoZSBiZXN0IHBhcnQgb2YgdGhlIHBlb3BsZSBpbiBzaWxlbmNlLCB0aG91Z2ggdGhleSBsb29rZWQgYW5ub3llZCBhbmQgdHJvdWJsZWQsIHNvIHRoYXQgQ2Flc2FyIGNvdWxkIG5vdCBmYWlsIHRvIHNlZSB0aGF0IHRoZXkgd2VyZSBkaXNwbGVhc2VkOyBidXQgaGUgd2FzIG9ic3RpbmF0ZSwgYW5kIGV4cGVjdGVkIHRoYXQgQ2F0byB3b3VsZCByZXNvcnQgdG8gYXBwZWFsIG9yIGVudHJlYXR5LCBhbmQgdGhlcmVmb3JlIGhhZCBoaW0gbGVkIGFsb25nLiBIb3dldmVyLCB3aGVuIGl0IHdhcyBjbGVhciB0aGF0IENhdG8gZGlkIG5vdCBzbyBtdWNoIGFzIHRoaW5rIG9mIGRvaW5nIGFueXRoaW5nIG9mIHRoZSBzb3J0LCBDYWVzYXIgd2FzIG92ZXJjb21lIGJ5IHRoZSBzaGFtZSBhbmQgaW5mYW15IG9mIGhpcyBjb3Vyc2UsIGFuZCBieSBoaXMgb3duIHNlY3JldCBwZXJzdWFzaW9ucyBpbmR1Y2VkIG9uZSBvZiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSB0byByZXNjdWUgQ2F0by4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzLCBieSB0aGVzZSBsYXdzIGFuZCBieSBvdGhlciBmYXZvdXJzIENhZXNhcidzIHBhcnR5IHNvIGNham9sZWQgdGhlIHBlb3BsZSBhcyB0byBnZXQgYSB2b3RlIHBhc3NlZCBnaXZpbmcgdG8gQ2Flc2FyIHRoZSBnb3Zlcm5tZW50IG9mIElsbHlyaWEgYW5kIGFsbCBHYXVsLCB3aXRoIGFuIGFybXkgb2YgZm91ciBsZWdpb25zLCBmb3IgZml2ZSB5ZWFycywgYWx0aG91Z2ggQ2F0byB3YXJuZWQgdGhlIHBlb3BsZSB0aGF0IHRoZXkgdGhlbXNlbHZlcyBieSB0aGVpciBvd24gdm90ZXMgd2VyZSBlc3RhYmxpc2hpbmcgYSB0eXJhbnQgaW4gdGhlaXIgY2l0YWRlbC4gVGhleSBhbHNvIHVubGF3ZnVsbHkgdHJhbnNmZXJyZWQgUHVibGl1cyBDbG9kaXVzIGZyb20gcGF0cmljaWFuIHRvIHBsZWJlaWFuIHJhbmsgYW5kIGdvdCBoaW0gZWxlY3RlZCB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmEgbWFuIHdobywgaW4gb3JkZXIgdG8gc2VjdXJlIENpY2VybydzIGJhbmlzaG1lbnQgYXMgaGlzIHJld2FyZCwgd2FzIHVzaW5nIGFsbCBoaXMgcG9saXRpY2FsIGluZmx1ZW5jZSBmb3IgdGhlIGdyYXRpZmljYXRpb24gb2YgdGhlIHBlb3BsZS4gRm9yIGNvbnN1bHMsIHRvbywgdGhleSBzZWN1cmVkIHRoZSBlbGVjdGlvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciA1OCBCLkMuPC9ub3RlPiBvZiBDYWxwdXJuaXVzIFBpc28sIHdobyB3YXMgQ2Flc2FyJ3MgZmF0aGVyLWluLWxhdywgYW5kIEF1bHVzIEdhYmluaXVzLCBhIG1hbiBmcm9tIHRoZSBsYXAgb2YgUG9tcGV5LCBhcyB0aG9zZSBzYXkgd2hvIGtuZXcgaGlzIHdheXMgb2YgbGlmZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RWxhdGVkIGJ5IHRoaXMgc3VjY2VzcywgQ2Flc2FyIGludHJvZHVjZWQgYW5vdGhlciBsYXcsIHdoaWNoIHByb3ZpZGVkIHRoYXQgYWxtb3N0IHRoZSB3aG9sZSBvZiBDYW1wYW5pYSBiZSBkaXZpZGVkIGFtb25nIHRoZSBwb29yIGFuZCBuZWVkeS4gTm8gb25lIHNwb2tlIGFnYWluc3QgdGhlIGxhdyBleGNlcHQgQ2F0bywgYW5kIGhpbSBDYWVzYXIgb3JkZXJlZCB0byBiZSBkcmFnZ2VkIGZyb20gdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnJvc3RyYTwvZm9yZWlnbj4gdG8gcHJpc29uLiBDYXRvIGRpZCBub3QgYW55IHRoZSBtb3JlIHJlbWl0IGhpcyBib2xkIHV0dGVyYW5jZXMsIGJ1dCBhcyBoZSB3YWxrZWQgYWxvbmcgZGlzY291cnNlZCBhYm91dCB0aGUgbGF3IGFuZCBhZHZpc2VkIHRoZSBwZW9wbGUgdG8gcHV0IGEgc3RvcCB0byBzdWNoIGxlZ2lzbGF0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgc2VuYXRlIGZvbGxvd2VkIGhpbSB3aXRoIGRvd25jYXN0IGxvb2tzLCBhcyB3ZWxsIGFzIHRoZSBiZXN0IHBhcnQgb2YgdGhlIHBlb3BsZSBpbiBzaWxlbmNlLCB0aG91Z2ggdGhleSBsb29rZWQgYW5ub3llZCBhbmQgdHJvdWJsZWQsIHNvIHRoYXQgQ2Flc2FyIGNvdWxkIG5vdCBmYWlsIHRvIHNlZSB0aGF0IHRoZXkgd2VyZSBkaXNwbGVhc2VkOyBidXQgaGUgd2FzIG9ic3RpbmF0ZSwgYW5kIGV4cGVjdGVkIHRoYXQgQ2F0byB3b3VsZCByZXNvcnQgdG8gYXBwZWFsIG9yIGVudHJlYXR5LCBhbmQgdGhlcmVmb3JlIGhhZCBoaW0gbGVkIGFsb25nLiBIb3dldmVyLCB3aGVuIGl0IHdhcyBjbGVhciB0aGF0IENhdG8gZGlkIG5vdCBzbyBtdWNoIGFzIHRoaW5rIG9mIGRvaW5nIGFueXRoaW5nIG9mIHRoZSBzb3J0LCBDYWVzYXIgd2FzIG92ZXJjb21lIGJ5IHRoZSBzaGFtZSBhbmQgaW5mYW15IG9mIGhpcyBjb3Vyc2UsIGFuZCBieSBoaXMgb3duIHNlY3JldCBwZXJzdWFzaW9ucyBpbmR1Y2VkIG9uZSBvZiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSB0byByZXNjdWUgQ2F0by4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgYnkgdGhlc2UgbGF3cyBhbmQgYnkgb3RoZXIgZmF2b3VycyBDYWVzYXIncyBwYXJ0eSBzbyBjYWpvbGVkIHRoZSBwZW9wbGUgYXMgdG8gZ2V0IGEgdm90ZSBwYXNzZWQgZ2l2aW5nIHRvIENhZXNhciB0aGUgZ292ZXJubWVudCBvZiBJbGx5cmlhIGFuZCBhbGwgR2F1bCwgd2l0aCBhbiBhcm15IG9mIGZvdXIgbGVnaW9ucywgZm9yIGZpdmUgeWVhcnMsIGFsdGhvdWdoIENhdG8gd2FybmVkIHRoZSBwZW9wbGUgdGhhdCB0aGV5IHRoZW1zZWx2ZXMgYnkgdGhlaXIgb3duIHZvdGVzIHdlcmUgZXN0YWJsaXNoaW5nIGEgdHlyYW50IGluIHRoZWlyIGNpdGFkZWwuIFRoZXkgYWxzbyB1bmxhd2Z1bGx5IHRyYW5zZmVycmVkIFB1YmxpdXMgQ2xvZGl1cyBmcm9tIHBhdHJpY2lhbiB0byBwbGViZWlhbiByYW5rIGFuZCBnb3QgaGltIGVsZWN0ZWQgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmEgbWFuIHdobywgaW4gb3JkZXIgdG8gc2VjdXJlIENpY2VybydzIGJhbmlzaG1lbnQgYXMgaGlzIHJld2FyZCwgd2FzIHVzaW5nIGFsbCBoaXMgcG9saXRpY2FsIGluZmx1ZW5jZSBmb3IgdGhlIGdyYXRpZmljYXRpb24gb2YgdGhlIHBlb3BsZS4gRm9yIGNvbnN1bHMsIHRvbywgdGhleSBzZWN1cmVkIHRoZSBlbGVjdGlvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDU4IEIuQy48L25vdGU+IG9mIENhbHB1cm5pdXMgUGlzbywgd2hvIHdhcyBDYWVzYXIncyBmYXRoZXItaW4tbGF3LCBhbmQgQXVsdXMgR2FiaW5pdXMsIGEgbWFuIGZyb20gdGhlIGxhcCBvZiBQb21wZXksIGFzIHRob3NlIHNheSB3aG8ga25ldyBoaXMgd2F5cyBvZiBsaWZlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWx0aG91Z2ggdGhleSBoYWQgaW4gdGhpcyB3YXkgdXN1cnBlZCB0aGUgcG93ZXIsIGFuZCBhbHRob3VnaCBvbmUgcGFydCBvZiB0aGUgY2l0aXplbnMgd2FzIG1hZGUgc3VibWlzc2l2ZSB0byB0aGVtIGJ5IGdyYXRpdHVkZSBhbmQgdGhlIG90aGVyIHBhcnQgYnkgZmVhciwgbmV2ZXJ0aGVsZXNzIHRoZXkgd2VyZSBhZnJhaWQgb2YgQ2F0by4gRm9yIGV2ZW4gd2hlbiB0aGV5IGRpZCBwcmV2YWlsIGFnYWluc3QgaGltLCBpdCB3YXMgd2l0aCBkaWZmaWN1bHR5IGFuZCB0b2lsIGFuZCBub3Qgd2l0aG91dCB0aGUgc2hhbWUgb2YgZXhwb3N1cmUgdGhhdCB0aGV5IGZvcmNlZCB0aGVpciBtZWFzdXJlcyB0aHJvdWdoIGF0IGxhc3QsIGFuZCB0aGlzIHdhcyBhbm5veWluZyBhbmQgdmV4YXRpb3VzIHRvIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNsb2RpdXMsIHRvbywgY291bGQgbm90IGV2ZW4gaG9wZSB0byBvdmVydGhyb3cgQ2ljZXJvIHdoaWxlIENhdG8gd2FzIGF0IFJvbWUsIGJ1dCBzaW5jZSBoZSB3YXMgc2NoZW1pbmcgZm9yIHRoaXMgYWJvdmUgYWxsIGVsc2UsIHdoZW4gaGUgaGFkIGNvbWUgaW50byBvZmZpY2UgaGUgc2VudCBmb3IgQ2F0byBhbmQgbWFkZSBwcm9wb3NhbHMgdG8gaGltLiBIZSBzYWlkIHRoYXQgaGUgcmVnYXJkZWQgQ2F0byBhcyB0aGUgcHVyZXN0IG1hbiBvZiBhbGwgdGhlIFJvbWFucywgYW5kIHRoYXQgaGUgd2FzIHJlYWR5IHRvIHByb3ZlIHRoaXMgYnkgaGlzIGFjdHMuIFRoZXJlZm9yZSwgdGhvdWdoIG1hbnkgd2VyZSBzb2xpY2l0aW5nIHRoZSBjb21taXNzaW9uIHRvIEN5cHJ1cyBhbmQgdGhlIGNvdXJ0IG9mIFB0b2xlbXk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIHlvdW5nZXIgYnJvdGhlciBvZiBQdG9sZW15IEF1bGV0ZXMgdGhlIGtpbmcgb2YgRWd5cHQuPC9ub3RlPiBhbmQgYmVnZ2luZyB0byBiZSBzZW50IHVwb24gaXQsIGhlIHRob3VnaHQgQ2F0byBhbG9uZSB3b3J0aHkgb2YgaXQsIGFuZCB0aGVyZWZvcmUgZ2xhZGx5IG9mZmVyZWQgaGltIHRoaXMgZmF2b3VyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2F0byBjcmllZCBvdXQgdGhhdCB0aGUgdGhpbmcgd2FzIGEgc25hcmUgYW5kIGFuIGluc3VsdCwgbm90IGEgZmF2b3VyLCB3aGVyZXVwb24gQ2xvZGl1cyBoYXVnaHRpbHkgYW5kIGNvbnRlbXB0dW91c2x5IHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCwgdGhlbiwgaWYgeW91IGRvbid0IHRoaW5rIGl0IGEgZmF2b3VyLCB5b3Ugc2hhbGwgbWFrZSB0aGUgdm95YWdlIGFzIGEgcHVuaXNobWVudCw8L3E+IGFuZCBnb2luZyBhdCBvbmNlIGJlZm9yZSB0aGUgcGVvcGxlIGhlIGdvdCBhbiBlZGljdCBwYXNzZWQgc2VuZGluZyBDYXRvIG9uIHRoZSBtaXNzaW9uLiBNb3Jlb3Zlciwgd2hlbiBDYXRvIHNldCBvdXQsIENsb2RpdXMgZ2F2ZSBoaW0gbmVpdGhlciBzaGlwLCBzb2xkaWVyLCBub3IgYXNzaXN0YW50LCBleGNlcHQgdHdvIGNsZXJrcywgb2Ygd2hvbSBvbmUgd2FzIGEgdGhpZWYgYW5kIGEgcmFzY2FsLCBhbmQgdGhlIG90aGVyIGEgY2xpZW50IG9mIENsb2RpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBpZiBoZSBoYWQgcHV0IGEgc2xpZ2h0IHRhc2sgdXBvbiBoaW0gaW4gdGhlIG1pc3Npb24gdG8gQ3lwcnVzIGFuZCBQdG9sZW15LCBDbG9kaXVzIGVuam9pbmVkIHVwb24gaGltIGJlc2lkZXMgdGhlIHJlc3RvcmF0aW9uIG9mIHRoZSBleGlsZXMgb2YgQnl6YW50aXVtLCBiZWluZyBkZXNpcm91cyB0aGF0IENhdG8gc2hvdWxkIGJlIG91dCBvZiBoaXMgd2F5IGFzIGxvbmcgYXMgcG9zc2libGUgd2hpbGUgaGUgd2FzIHRyaWJ1bmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFsdGhvdWdoIHRoZXkgaGFkIGluIHRoaXMgd2F5IHVzdXJwZWQgdGhlIHBvd2VyLCBhbmQgYWx0aG91Z2ggb25lIHBhcnQgb2YgdGhlIGNpdGl6ZW5zIHdhcyBtYWRlIHN1Ym1pc3NpdmUgdG8gdGhlbSBieSBncmF0aXR1ZGUgYW5kIHRoZSBvdGhlciBwYXJ0IGJ5IGZlYXIsIG5ldmVydGhlbGVzcyB0aGV5IHdlcmUgYWZyYWlkIG9mIENhdG8uIEZvciBldmVuIHdoZW4gdGhleSBkaWQgcHJldmFpbCBhZ2FpbnN0IGhpbSwgaXQgd2FzIHdpdGggZGlmZmljdWx0eSBhbmQgdG9pbCBhbmQgbm90IHdpdGhvdXQgdGhlIHNoYW1lIG9mIGV4cG9zdXJlIHRoYXQgdGhleSBmb3JjZWQgdGhlaXIgbWVhc3VyZXMgdGhyb3VnaCBhdCBsYXN0LCBhbmQgdGhpcyB3YXMgYW5ub3lpbmcgYW5kIHZleGF0aW91cyB0byB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNsb2RpdXMsIHRvbywgY291bGQgbm90IGV2ZW4gaG9wZSB0byBvdmVydGhyb3cgQ2ljZXJvIHdoaWxlIENhdG8gd2FzIGF0IFJvbWUsIGJ1dCBzaW5jZSBoZSB3YXMgc2NoZW1pbmcgZm9yIHRoaXMgYWJvdmUgYWxsIGVsc2UsIHdoZW4gaGUgaGFkIGNvbWUgaW50byBvZmZpY2UgaGUgc2VudCBmb3IgQ2F0byBhbmQgbWFkZSBwcm9wb3NhbHMgdG8gaGltLiBIZSBzYWlkIHRoYXQgaGUgcmVnYXJkZWQgQ2F0byBhcyB0aGUgcHVyZXN0IG1hbiBvZiBhbGwgdGhlIFJvbWFucywgYW5kIHRoYXQgaGUgd2FzIHJlYWR5IHRvIHByb3ZlIHRoaXMgYnkgaGlzIGFjdHMuIFRoZXJlZm9yZSwgdGhvdWdoIG1hbnkgd2VyZSBzb2xpY2l0aW5nIHRoZSBjb21taXNzaW9uIHRvIEN5cHJ1cyBhbmQgdGhlIGNvdXJ0IG9mIFB0b2xlbXk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgeW91bmdlciBicm90aGVyIG9mIFB0b2xlbXkgQXVsZXRlcyB0aGUga2luZyBvZiBFZ3lwdC48L25vdGU+IGFuZCBiZWdnaW5nIHRvIGJlIHNlbnQgdXBvbiBpdCwgaGUgdGhvdWdodCBDYXRvIGFsb25lIHdvcnRoeSBvZiBpdCwgYW5kIHRoZXJlZm9yZSBnbGFkbHkgb2ZmZXJlZCBoaW0gdGhpcyBmYXZvdXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvIGNyaWVkIG91dCB0aGF0IHRoZSB0aGluZyB3YXMgYSBzbmFyZSBhbmQgYW4gaW5zdWx0LCBub3QgYSBmYXZvdXIsIHdoZXJldXBvbiBDbG9kaXVzIGhhdWdodGlseSBhbmQgY29udGVtcHR1b3VzbHkgcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwsIHRoZW4sIGlmIHlvdSBkb24ndCB0aGluayBpdCBhIGZhdm91ciwgeW91IHNoYWxsIG1ha2UgdGhlIHZveWFnZSBhcyBhIHB1bmlzaG1lbnQsPC9xPiBhbmQgZ29pbmcgYXQgb25jZSBiZWZvcmUgdGhlIHBlb3BsZSBoZSBnb3QgYW4gZWRpY3QgcGFzc2VkIHNlbmRpbmcgQ2F0byBvbiB0aGUgbWlzc2lvbi4gTW9yZW92ZXIsIHdoZW4gQ2F0byBzZXQgb3V0LCBDbG9kaXVzIGdhdmUgaGltIG5laXRoZXIgc2hpcCwgc29sZGllciwgbm9yIGFzc2lzdGFudCwgZXhjZXB0IHR3byBjbGVya3MsIG9mIHdob20gb25lIHdhcyBhIHRoaWVmIGFuZCBhIHJhc2NhbCwgYW5kIHRoZSBvdGhlciBhIGNsaWVudCBvZiBDbG9kaXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBpZiBoZSBoYWQgcHV0IGEgc2xpZ2h0IHRhc2sgdXBvbiBoaW0gaW4gdGhlIG1pc3Npb24gdG8gQ3lwcnVzIGFuZCBQdG9sZW15LCBDbG9kaXVzIGVuam9pbmVkIHVwb24gaGltIGJlc2lkZXMgdGhlIHJlc3RvcmF0aW9uIG9mIHRoZSBleGlsZXMgb2YgQnl6YW50aXVtLCBiZWluZyBkZXNpcm91cyB0aGF0IENhdG8gc2hvdWxkIGJlIG91dCBvZiBoaXMgd2F5IGFzIGxvbmcgYXMgcG9zc2libGUgd2hpbGUgaGUgd2FzIHRyaWJ1bmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlN1YmplY3RlZCB0byBzdWNoIGNvbnN0cmFpbnQgYXMgdGhpcywgQ2F0byBhZHZpc2VkIENpY2Vybywgd2hvc2UgZW5lbWllcyB3ZXJlIHRyeWluZyB0byBiYW5pc2ggaGltLCBub3QgdG8gcmFpc2UgYSBmYWN0aW9uIG9yIHBsdW5nZSB0aGUgY2l0eSBpbnRvIHdhciBhbmQgYmxvb2RzaGVkLCBidXQgdG8geWllbGQgdG8gdGhlIG5lY2Vzc2l0aWVzIG9mIHRoZSB0aW1lcywgYW5kIHNvIHRvIGJlY29tZSBhZ2FpbiBhIHNhdmlvdXIgb2YgaGlzIGNvdW50cnkuIEhlIGFsc28gc2VudCBDYW5pZGl1cywgb25lIG9mIGhpcyBmcmllbmRzLCB0byBDeXBydXMgaW4gYWR2YW5jZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiAzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzPC90aXRsZT4sIGlpaS4gMTwvYmlibD4uPC9ub3RlPiBhbmQgdHJpZWQgdG8gcGVyc3VhZGUgUHRvbGVteSB0byB5aWVsZCBoaXMga2luZ2RvbSB3aXRob3V0IGZpZ2h0aW5nLCBwcm9taXNpbmcgdGhhdCBoaXMgZnV0dXJlIGxpZmUgc2hvdWxkIG5vdCBiZSB3aXRob3V0IHdlYWx0aCBhbmQgaG9ub3VyLCBzaW5jZSB0aGUgUm9tYW5zIHdvdWxkIGdpdmUgaGltIGEgcHJpZXN0aG9vZCBvZiB0aGUgZ29kZGVzcyBpbiBQYXBob3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYsIGhvd2V2ZXIsIHRhcnJpZWQgYXQgUmhvZGVzLCBtYWtpbmcgaGlzIHByZXBhcmF0aW9ucyBhbmQgYXdhaXRpbmcgaGlzIGFuc3dlcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3ViamVjdGVkIHRvIHN1Y2ggY29uc3RyYWludCBhcyB0aGlzLCBDYXRvIGFkdmlzZWQgQ2ljZXJvLCB3aG9zZSBlbmVtaWVzIHdlcmUgdHJ5aW5nIHRvIGJhbmlzaCBoaW0sIG5vdCB0byByYWlzZSBhIGZhY3Rpb24gb3IgcGx1bmdlIHRoZSBjaXR5IGludG8gd2FyIGFuZCBibG9vZHNoZWQsIGJ1dCB0byB5aWVsZCB0byB0aGUgbmVjZXNzaXRpZXMgb2YgdGhlIHRpbWVzLCBhbmQgc28gdG8gYmVjb21lIGFnYWluIGEgc2F2aW91ciBvZiBoaXMgY291bnRyeS4gSGUgYWxzbyBzZW50IENhbmlkaXVzLCBvbmUgb2YgaGlzIGZyaWVuZHMsIHRvIEN5cHJ1cyBpbiBhZHZhbmNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiAzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcnV0dXM8L3RpdGxlPiwgaWlpLiAxPC9iaWJsPi48L25vdGU+IGFuZCB0cmllZCB0byBwZXJzdWFkZSBQdG9sZW15IHRvIHlpZWxkIGhpcyBraW5nZG9tIHdpdGhvdXQgZmlnaHRpbmcsIHByb21pc2luZyB0aGF0IGhpcyBmdXR1cmUgbGlmZSBzaG91bGQgbm90IGJlIHdpdGhvdXQgd2VhbHRoIGFuZCBob25vdXIsIHNpbmNlIHRoZSBSb21hbnMgd291bGQgZ2l2ZSBoaW0gYSBwcmllc3Rob29kIG9mIHRoZSBnb2RkZXNzIGluIFBhcGhvcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiAzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcnV0dXM8L3RpdGxlPiwgaWlpLiAxPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcnV0dXM8L3RpdGxlPiwgaWlpLiAxPC90cmFuc2xhdGlvbj4="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYsIGhvd2V2ZXIsIHRhcnJpZWQgYXQgUmhvZGVzLCBtYWtpbmcgaGlzIHByZXBhcmF0aW9ucyBhbmQgYXdhaXRpbmcgaGlzIGFuc3dlcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVhbndoaWxlIFB0b2xlbXkgdGhlIGtpbmcgb2YgRWd5cHQsIHdobyBoYWQgcXVhcnJlbGxlZCB3aXRoIHRoZSBjaXRpemVucyBvZiBBbGV4YW5kcmlhIGFuZCBmb3JzYWtlbiB0aGUgY2l0eSBpbiB3cmF0aCwgYW5kIHdhcyBub3cgb24gaGlzIHdheSB0byBSb21lIGluIHRoZSBob3BlIHRoYXQgUG9tcGV5IGFuZCBDYWVzYXIgd291bGQgcmVzdG9yZSBoaW0gYWdhaW4gd2l0aCBhbiBhcm1lZCBmb3JjZSwgd2lzaGVkIHRvIGhhdmUgYW4gaW50ZXJ2aWV3IHdpdGggQ2F0bywgYW5kIHNlbnQgYSBtZXNzZW5nZXIgdG8gaGltLCBleHBlY3RpbmcgdGhhdCBDYXRvIHdvdWxkIGNvbWUgdG8gaGltLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvLCBhcyBpdCBjaGFuY2VkLCB3YXMgdGFraW5nIGEgY291cnNlIG9mIG1lZGljaW5lIGF0IHRoZSB0aW1lLCBhbmQgYmFkZSBQdG9sZW15IGNvbWUgdG8gaGltIGlmIGhlIHdpc2hlZCB0byBzZWUgaGltLiBBbmQgd2hlbiBQdG9sZW15IGhhZCBjb21lLCBDYXRvIG5laXRoZXIgd2VudCB0byBtZWV0IGhpbSBub3Igcm9zZSBmcm9tIGhpcyBzZWF0LCBidXQgZ3JlZXRlZCBoaW0gYXMgaGUgd291bGQgYW55IG9yZGluYXJ5IHZpc2l0b3IgYW5kIGJhZGUgaGltIGJlIHNlYXRlZC4gQXQgZmlyc3QgUHRvbGVteSB3YXMgY29uZm91bmRlZCBieSB0aGUgcmVjZXB0aW9uIGl0c2VsZiwgYW5kIHdhcyBhbWF6ZWQgYXQgdGhlIGNvbnRyYXN0IGJldHdlZW4gdGhlIGhhdWdodGluZXNzIGFuZCBzZXZlcml0eSBvZiBDYXRvJ3MgbWFubmVycyBhbmQgdGhlIHBsYWlubmVzcyBhbmQgc2ltcGxpY2l0eSBvZiBoaXMgb3V0Zml0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWZ0ZXIgaGUgaGFkIGJlZ3VuIHRvIGNvbnZlcnNlIHdpdGggQ2F0byBhYm91dCBoaXMgb3duIHNpdHVhdGlvbiwgd29yZHMgb2YgZ3JlYXQgd2lzZG9tIGFuZCBib2xkbmVzcyBmZWxsIHVwb24gaGlzIGVhcnMuIEZvciBDYXRvIGNlbnN1cmVkIGhpcyBjb3Vyc2UsIGFuZCBzaG93ZWQgaGltIHdoYXQgZ3JlYXQgaGFwcGluZXNzIGhlIGhhZCBmb3JzYWtlbiwgYW5kIHRvIGhvdyBtdWNoIHNlcnZpbGl0eSBhbmQgaGFyZHNoaXAgaGUgd2FzIHN1YmplY3RpbmcgaGltc2VsZiBpbiBkZWFsaW5nIHdpdGggdGhlIGNvcnJ1cHRpb24gYW5kIHJhcGFjaXR5IG9mIHRoZSBjaGllZiBtZW4gYXQgUm9tZSwgd2hvbSBFZ3lwdCBjb3VsZCBzY2FyY2VseSBnbHV0IGlmIGl0IHdlcmUgYWxsIHR1cm5lZCBpbnRvIG1vbmV5LiBDYXRvIGFsc28gYWR2aXNlZCBoaW0gdG8gc2FpbCBiYWNrIGFuZCBiZSByZWNvbmNpbGVkIHdpdGggaGlzIHBlb3BsZSwgaG9sZGluZyBoaW1zZWxmIHJlYWR5IGFsc28gdG8gc2FpbCB3aXRoIGhpbSBhbmQgaGVscCBlZmZlY3QgdGhlIHJlY29uY2lsaWF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZSBraW5nLCBhcyBpZiBicm91Z2h0IHRvIGhpcyBzZW5zZXMgYnkgQ2F0bydzIHdvcmRzIGFmdGVyIGEgZml0IG9mIG1hZG5lc3Mgb3IgZGVsaXJpdW0sIGFuZCByZWNvZ25pemluZyB0aGUgc2luY2VyaXR5IGFuZCBzYWdhY2l0eSBvZiB0aGUgc3BlYWtlciwgZGV0ZXJtaW5lZCB0byBhZG9wdCBoaXMgY291bnNlbHM7IGJ1dCBoZSB3YXMgdHVybmVkIGJhY2sgdG8gaGlzIGZpcnN0IHB1cnBvc2UgYnkgaGlzIGZyaWVuZHMuIEhvd2V2ZXIsIGFzIHNvb24gYXMgaGUgcmVhY2hlZCBSb21lIGFuZCB3YXMgYXBwcm9hY2hpbmcgdGhlIGRvb3Igb2YgYSBtYWdpc3RyYXRlLCBoZSBncm9hbmVkIG92ZXIgaGlzIG93biBldmlsIHJlc29sdmUsIGNvbnZpbmNlZCB0aGF0IGhlIGhhZCBzbGlnaHRlZCwgbm90IHRoZSB3b3JkcyBvZiBhIGdvb2QgbWFuLCBidXQgdGhlIHByb3BoZXRpYyB3YXJuaW5nIG9mIGEgZ29kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvLCBhcyBpdCBjaGFuY2VkLCB3YXMgdGFraW5nIGEgY291cnNlIG9mIG1lZGljaW5lIGF0IHRoZSB0aW1lLCBhbmQgYmFkZSBQdG9sZW15IGNvbWUgdG8gaGltIGlmIGhlIHdpc2hlZCB0byBzZWUgaGltLiBBbmQgd2hlbiBQdG9sZW15IGhhZCBjb21lLCBDYXRvIG5laXRoZXIgd2VudCB0byBtZWV0IGhpbSBub3Igcm9zZSBmcm9tIGhpcyBzZWF0LCBidXQgZ3JlZXRlZCBoaW0gYXMgaGUgd291bGQgYW55IG9yZGluYXJ5IHZpc2l0b3IgYW5kIGJhZGUgaGltIGJlIHNlYXRlZC4gQXQgZmlyc3QgUHRvbGVteSB3YXMgY29uZm91bmRlZCBieSB0aGUgcmVjZXB0aW9uIGl0c2VsZiwgYW5kIHdhcyBhbWF6ZWQgYXQgdGhlIGNvbnRyYXN0IGJldHdlZW4gdGhlIGhhdWdodGluZXNzIGFuZCBzZXZlcml0eSBvZiBDYXRvJ3MgbWFubmVycyBhbmQgdGhlIHBsYWlubmVzcyBhbmQgc2ltcGxpY2l0eSBvZiBoaXMgb3V0Zml0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBoZSBoYWQgYmVndW4gdG8gY29udmVyc2Ugd2l0aCBDYXRvIGFib3V0IGhpcyBvd24gc2l0dWF0aW9uLCB3b3JkcyBvZiBncmVhdCB3aXNkb20gYW5kIGJvbGRuZXNzIGZlbGwgdXBvbiBoaXMgZWFycy4gRm9yIENhdG8gY2Vuc3VyZWQgaGlzIGNvdXJzZSwgYW5kIHNob3dlZCBoaW0gd2hhdCBncmVhdCBoYXBwaW5lc3MgaGUgaGFkIGZvcnNha2VuLCBhbmQgdG8gaG93IG11Y2ggc2VydmlsaXR5IGFuZCBoYXJkc2hpcCBoZSB3YXMgc3ViamVjdGluZyBoaW1zZWxmIGluIGRlYWxpbmcgd2l0aCB0aGUgY29ycnVwdGlvbiBhbmQgcmFwYWNpdHkgb2YgdGhlIGNoaWVmIG1lbiBhdCBSb21lLCB3aG9tIEVneXB0IGNvdWxkIHNjYXJjZWx5IGdsdXQgaWYgaXQgd2VyZSBhbGwgdHVybmVkIGludG8gbW9uZXkuIENhdG8gYWxzbyBhZHZpc2VkIGhpbSB0byBzYWlsIGJhY2sgYW5kIGJlIHJlY29uY2lsZWQgd2l0aCBoaXMgcGVvcGxlLCBob2xkaW5nIGhpbXNlbGYgcmVhZHkgYWxzbyB0byBzYWlsIHdpdGggaGltIGFuZCBoZWxwIGVmZmVjdCB0aGUgcmVjb25jaWxpYXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['35.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIGtpbmcsIGFzIGlmIGJyb3VnaHQgdG8gaGlzIHNlbnNlcyBieSBDYXRvJ3Mgd29yZHMgYWZ0ZXIgYSBmaXQgb2YgbWFkbmVzcyBvciBkZWxpcml1bSwgYW5kIHJlY29nbml6aW5nIHRoZSBzaW5jZXJpdHkgYW5kIHNhZ2FjaXR5IG9mIHRoZSBzcGVha2VyLCBkZXRlcm1pbmVkIHRvIGFkb3B0IGhpcyBjb3Vuc2VsczsgYnV0IGhlIHdhcyB0dXJuZWQgYmFjayB0byBoaXMgZmlyc3QgcHVycG9zZSBieSBoaXMgZnJpZW5kcy4gSG93ZXZlciwgYXMgc29vbiBhcyBoZSByZWFjaGVkIFJvbWUgYW5kIHdhcyBhcHByb2FjaGluZyB0aGUgZG9vciBvZiBhIG1hZ2lzdHJhdGUsIGhlIGdyb2FuZWQgb3ZlciBoaXMgb3duIGV2aWwgcmVzb2x2ZSwgY29udmluY2VkIHRoYXQgaGUgaGFkIHNsaWdodGVkLCBub3QgdGhlIHdvcmRzIG9mIGEgZ29vZCBtYW4sIGJ1dCB0aGUgcHJvcGhldGljIHdhcm5pbmcgb2YgYSBnb2QuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgUHRvbGVteSBpbiBDeXBydXMsIGZvcnR1bmF0ZWx5IGZvciBDYXRvLCBwb2lzb25lZCBoaW1zZWxmIHRvIGRlYXRoLiBBbmQgc2luY2UgdGhlIGtpbmcgd2FzIHNhaWQgdG8gaGF2ZSBsZWZ0IG11Y2ggdHJlYXN1cmUsIENhdG8gZGV0ZXJtaW5lZCwgd2hpbGUgc2FpbGluZyBoaW1zZWxmIHRvIEJ5emFudGl1bSwgdG8gc2VuZCBoaXMgbmVwaGV3IEJydXR1cyB0byBDeXBydXMsIHNpbmNlIGhlIGRpZCBub3QgYWx0b2dldGhlciB0cnVzdCBDYW5pZGl1cy4gVGhlbiwgYWZ0ZXIgcmVjb25jaWxpbmcgdGhlIGV4aWxlcyBhbmQgY2l0aXplbnMgb2YgQnl6YW50aXVtIGFuZCBsZWF2aW5nIHRoZSBjaXR5IGluIGNvbmNvcmQsIGhlIHNhaWxlZCB0byBDeXBydXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2VyZSBtYW55IGZ1cm5pc2hpbmdzIG9mIGEgcHJpbmNlbHkgc29ydCwgc3VjaCBhcyBiZWFrZXJzLCB0YWJsZXMsIHByZWNpb3VzIHN0b25lcywgYW5kIHB1cnBsZSB2ZXN0bWVudHMsIHdoaWNoIGhhZCB0byBiZSBzb2xkIGFuZCB0dXJuZWQgaW50byBtb25leS4gU28gQ2F0bywgd2lzaGluZyB0byB0cmVhdCBldmVyeXRoaW5nIHdpdGggdGhlIGdyZWF0ZXN0IGV4YWN0bmVzcywgYW5kIHRvIGZvcmNlIGV2ZXJ5dGhpbmcgdXAgdG8gYSBoaWdoIHByaWNlLCBhbmQgdG8gYXR0ZW5kIHRvIGV2ZXJ5dGhpbmcgaGltc2VsZiwgYW5kIHRvIHVzZSB0aGUgdXRtb3N0IGNhbGN1bGF0aW9uLCB3b3VsZCBub3QgdHJ1c3QgZXZlbiB0aG9zZSB3aG8gd2VyZSBhY2N1c3RvbWVkIHRvIHRoZSBtYXJrZXQsIGJ1dCwgc3VzcGVjdGluZyBhbGwgYWxpa2UsIGFzc2lzdGFudHMsIGNyaWVycywgYnV5ZXJzLCBhbmQgZnJpZW5kcywgYW5kIGF0IGxhc3QgdGFsa2luZyBwcml2YXRlbHkgaGltc2VsZiB3aXRoIHRoZSBwdXJjaGFzZXJzIGFuZCBlbmNvdXJhZ2luZyBlYWNoIG9uZSB0byBiaWQsIGhlIHRodXMgc3VjY2VlZGVkIGluIHNlbGxpbmcgbW9zdCBvZiB0aGUgbWVyY2hhbmRpemUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBoZSBnYXZlIG9mZmVuY2UgdG8gbW9zdCBvZiBoaXMgZnJpZW5kcywgd2hvIHRob3VnaHQgdGhhdCBoZSBkaXN0cnVzdGVkIHRoZW0sIGFuZCBNdW5hdGl1cywgdGhlIG1vc3QgaW50aW1hdGUgb2YgdGhlbSBhbGwsIGhlIHRocmV3IGludG8gYSByYWdlIHRoYXQgd2FzIHdlbGwgbmlnaCBpbmN1cmFibGUuIEhlbmNlIENhZXNhciBhbHNvLCB3aGVuIGhlIHdyb3RlIGEgZGlzY291cnNlIGFnYWluc3QgQ2F0byw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDExLjQiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGkuIDQ8L2JpYmw+LCBhbmQgbm90ZS48L25vdGU+IGR3ZWx0IG1vc3QgYml0dGVybHkgb24gdGhpcyBwYXJ0IG9mIGhpcyBkZW51bmNpYXRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBQdG9sZW15IGluIEN5cHJ1cywgZm9ydHVuYXRlbHkgZm9yIENhdG8sIHBvaXNvbmVkIGhpbXNlbGYgdG8gZGVhdGguIEFuZCBzaW5jZSB0aGUga2luZyB3YXMgc2FpZCB0byBoYXZlIGxlZnQgbXVjaCB0cmVhc3VyZSwgQ2F0byBkZXRlcm1pbmVkLCB3aGlsZSBzYWlsaW5nIGhpbXNlbGYgdG8gQnl6YW50aXVtLCB0byBzZW5kIGhpcyBuZXBoZXcgQnJ1dHVzIHRvIEN5cHJ1cywgc2luY2UgaGUgZGlkIG5vdCBhbHRvZ2V0aGVyIHRydXN0IENhbmlkaXVzLiBUaGVuLCBhZnRlciByZWNvbmNpbGluZyB0aGUgZXhpbGVzIGFuZCBjaXRpemVucyBvZiBCeXphbnRpdW0gYW5kIGxlYXZpbmcgdGhlIGNpdHkgaW4gY29uY29yZCwgaGUgc2FpbGVkIHRvIEN5cHJ1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2VyZSBtYW55IGZ1cm5pc2hpbmdzIG9mIGEgcHJpbmNlbHkgc29ydCwgc3VjaCBhcyBiZWFrZXJzLCB0YWJsZXMsIHByZWNpb3VzIHN0b25lcywgYW5kIHB1cnBsZSB2ZXN0bWVudHMsIHdoaWNoIGhhZCB0byBiZSBzb2xkIGFuZCB0dXJuZWQgaW50byBtb25leS4gU28gQ2F0bywgd2lzaGluZyB0byB0cmVhdCBldmVyeXRoaW5nIHdpdGggdGhlIGdyZWF0ZXN0IGV4YWN0bmVzcywgYW5kIHRvIGZvcmNlIGV2ZXJ5dGhpbmcgdXAgdG8gYSBoaWdoIHByaWNlLCBhbmQgdG8gYXR0ZW5kIHRvIGV2ZXJ5dGhpbmcgaGltc2VsZiwgYW5kIHRvIHVzZSB0aGUgdXRtb3N0IGNhbGN1bGF0aW9uLCB3b3VsZCBub3QgdHJ1c3QgZXZlbiB0aG9zZSB3aG8gd2VyZSBhY2N1c3RvbWVkIHRvIHRoZSBtYXJrZXQsIGJ1dCwgc3VzcGVjdGluZyBhbGwgYWxpa2UsIGFzc2lzdGFudHMsIGNyaWVycywgYnV5ZXJzLCBhbmQgZnJpZW5kcywgYW5kIGF0IGxhc3QgdGFsa2luZyBwcml2YXRlbHkgaGltc2VsZiB3aXRoIHRoZSBwdXJjaGFzZXJzIGFuZCBlbmNvdXJhZ2luZyBlYWNoIG9uZSB0byBiaWQsIGhlIHRodXMgc3VjY2VlZGVkIGluIHNlbGxpbmcgbW9zdCBvZiB0aGUgbWVyY2hhbmRpemUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBoZSBnYXZlIG9mZmVuY2UgdG8gbW9zdCBvZiBoaXMgZnJpZW5kcywgd2hvIHRob3VnaHQgdGhhdCBoZSBkaXN0cnVzdGVkIHRoZW0sIGFuZCBNdW5hdGl1cywgdGhlIG1vc3QgaW50aW1hdGUgb2YgdGhlbSBhbGwsIGhlIHRocmV3IGludG8gYSByYWdlIHRoYXQgd2FzIHdlbGwgbmlnaCBpbmN1cmFibGUuIEhlbmNlIENhZXNhciBhbHNvLCB3aGVuIGhlIHdyb3RlIGEgZGlzY291cnNlIGFnYWluc3QgQ2F0byw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAxMS40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpLiA0PC9iaWJsPiwgYW5kIG5vdGUuPC9ub3RlPiBkd2VsdCBtb3N0IGJpdHRlcmx5IG9uIHRoaXMgcGFydCBvZiBoaXMgZGVudW5jaWF0aW9uLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAxMS40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpLiA0PC9iaWJsPiwgYW5kIG5vdGUuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TXVuYXRpdXMsIGhvd2V2ZXIsIHN0YXRlcyB0aGF0IGhpcyBhbmdlciBhcm9zZSwgbm90IGZyb20gQ2F0bydzIGRpc3RydXN0IG9mIGhpbSwgYnV0IGZyb20gaGlzIGluY29uc2lkZXJhdGUgY29uZHVjdCB0b3dhcmRzIGhpbSwgYW5kIGZyb20gYSBjZXJ0YWluIGplYWxvdXN5IHdoaWNoIE11bmF0aXVzIGhpbXNlbGYgZmVsdCB0b3dhcmRzIENhbmlkaXVzLiBGb3IgTXVuYXRpdXMgaGltc2VsZiBhbHNvIHB1Ymxpc2hlZCBhIHRyZWF0aXNlIGFib3V0IENhdG8sIHdoaWNoIFRocmFzZWEgY2hpZWZseSBmb2xsb3dlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TXVuYXRpdXMgc2F5cyB0aGF0IGhlIGNhbWUgdG8gQ3lwcnVzIGFmdGVyIHRoZSBvdGhlcnMsIGFuZCBmb3VuZCB0aGF0IG5vIHByb3Zpc2lvbiBoYWQgYmVlbiBtYWRlIGZvciBoaXMgZW50ZXJ0YWlubWVudDsgaGUgc2F5cywgdG9vLCB0aGF0IG9uIGdvaW5nIHRvIENhdG8ncyBkb29yIGhlIHdhcyByZXB1bHNlZCwgYmVjYXVzZSBDYXRvIGhhZCBzb21lIGVuZ2FnZW1lbnQgaW5zaWRlIHdpdGggQ2FuaWRpdXMuIEhlIHNheXMsIGZ1cnRoZXIsIHRoYXQgaGlzIG1lYXN1cmVkIHByb3Rlc3QgbWV0IHdpdGggbm8gbWVhc3VyZWQgcmVwbHksIGZvciBDYXRvIHRvbGQgaGltIHRoYXQgZXhjZXNzaXZlIGFmZmVjdGlvbiwgYWNjb3JkaW5nIHRvIFRoZW9waHJhc3R1cywgd2FzIGxpa2VseSB0byBiZWNvbWUgYSBncm91bmQgZm9yIGhhdHJlZCBpbiBtYW55IGNhc2VzLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBzbyB0aG91IHRvbyw8L3E+IHNhaWQgQ2F0bywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ieSByZWFzb24gb2YgdGhpbmUgZXNwZWNpYWwgYWZmZWN0aW9uIGZvciBtZSwgYXJ0IHZleGVkIHRvIHRoaW5rIHRoeXNlbGYgbGVzcyBob25vdXJlZCB0aGFuIGlzIG1lZXQuIAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5DYW5pZGl1cyBJIGVtcGxveSBtb3JlIHRoYW4gb3RoZXJzIGJvdGggYmVjYXVzZSBJIGhhdmUgbWFkZSB0cmlhbCBvZiBoaW0sIGFuZCBiZWNhdXNlIEkgdHJ1c3QgaGltOyBoZSBjYW1lIGF0IHRoZSB2ZXJ5IGZpcnN0LCBhbmQgc2hvd3MgaGltc2VsZiB0byBiZSBpbmNvcnJ1cHQuPC9xPiBUaGlzIHByaXZhdGUgY29udmVyc2F0aW9uLCBob3dldmVyLCBiZXR3ZWVuIGhpbXNlbGYgYW5kIENhdG8sIE11bmF0aXVzIHNheXMgd2FzIHJlcG9ydGVkIGJ5IENhdG8gdG8gQ2FuaWRpdXMsIGFuZCB0aGF0IHRoZXJlZm9yZSwgd2hlbiBoZSBoZWFyZCBvZiBpdCwgaGUgd291bGQgbm8gbG9uZ2VyIGdvIHRvIENhdG8ncyB0YWJsZSwgb3IgdmlzaXQgaGltLCBvciBzaGFyZSBoaXMgY291bnNlbHMsIHdoZW4gaGUgd2FzIGludml0ZWQuIEZ1cnRoZXIsIE11bmF0aXVzIHNheXMsIHdoZW4gQ2F0byB0aHJlYXRlbmVkIHRvIHRha2Ugc2VjdXJpdHkgZnJvbSBoaW0sIGFzIHRoZSBSb21hbnMgZG8gaW4gdGhlIGNhc2Ugb2YgdGhvc2Ugd2hvIHJlZnVzZSB0byBvYmV5IG9yZGVycywgaGUgcGFpZCBubyBhdHRlbnRpb24gdG8gdGhlIHRocmVhdCwgYnV0IHNhaWxlZCBhd2F5LCBhbmQgZm9yIGEgbG9uZyB0aW1lIGNvbnRpbnVlZCB0byBiZSBhbmdyeSB3aXRoIENhdG8uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIE11bmF0aXVzIHNheXMsIE1hcmNpYSwgd2hvIHdhcyBzdGlsbCBsaXZpbmcgd2l0aCBDYXRvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMjUuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHYuIDU8L2JpYmw+Ljwvbm90ZT4gc3Bva2Ugd2l0aCBoZXIgaHVzYmFuZCBhYm91dCB0aGUgbWF0dGVyOyBhbmQgd2hlbiBpdCBjaGFuY2VkIHRoYXQgYm90aCBtZW4gd2VyZSBpbnZpdGVkIHRvIHN1cHBlciBieSBCYXJjYSwgQ2F0bywgd2hvIGNhbWUgbGF0ZSBhbmQgYWZ0ZXIgdGhlIG90aGVycyBoYWQgdGFrZW4gdGhlaXIgcGxhY2VzLCBhc2tlZCB3aGVyZSBoZSBzaG91bGQgcmVjbGluZTsgYW5kIHdoZW4gQmFyY2EgdG9sZCBoaW0gdG8gcmVjbGluZSB3aGVyZSBoZSBwbGVhc2VkLCBDYXRvIGxvb2tlZCBhYm91dCB0aGUgcm9vbSBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHdpbGwgdGFrZSBteSBwbGFjZSBieSBNdW5hdGl1cy48L3E+IFNvIGhlIHdlbnQgcm91bmQgYW5kIHJlY2xpbmVkIGJ5IGhpcyBzaWRlLCBidXQgbWFkZSBubyBmdXJ0aGVyIHNob3cgb2YgZnJpZW5kc2hpcCBkdXJpbmcgdGhlIHN1cHBlci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TWFyY2lhLCBob3dldmVyLCBtYWRlIGEgc2Vjb25kIHJlcXVlc3QgaW4gdGhlIG1hdHRlciwgTXVuYXRpdXMgc2F5cywgYW5kIENhdG8gd3JvdGUgdG8gaGltLCBzYXlpbmcgdGhhdCBoZSB3aXNoZWQgdG8gY29uZmVyIHdpdGggaGltIGFib3V0IHNvbWV0aGluZy4gU28gTXVuYXRpdXMgd2VudCB0byBDYXRvJ3MgaG91c2UgZWFybHkgaW4gdGhlIG1vcm5pbmcsIGFuZCB3YXMgZGV0YWluZWQgdGhlcmUgYnkgTWFyY2lhIHVudGlsIGFsbCB0aGUgb3RoZXIgdmlzaXRvcnMgaGFkIGdvbmUgYXdheS4gVGhlbiBDYXRvIGNhbWUgaW4sIHRocmV3IGJvdGggYXJtcyBhYm91dCBoaW0sIGtpc3NlZCBoaW0sIGFuZCBsYXZpc2hlZCBraW5kbmVzcyB1cG9uIGhpbS4gU3VjaCBpbmNpZGVudHMsIG5vdywgaW4gbXkgb3BpbmlvbiwgcXVpdGUgYXMgbXVjaCBhcyBkZWVkcyBvZiBncmVhdG5lc3MgYW5kIHB1YmxpY2l0eSwgc2hlZCBjb25zaWRlcmFibGUgbGlnaHQgdXBvbiB0aGUgcGVyY2VwdGlvbiBhbmQgbWFuaWZlc3RhdGlvbiBvZiBjaGFyYWN0ZXIsIGFuZCBJIGhhdmUgdGhlcmVmb3JlIHJlY291bnRlZCB0aGVtIGF0IGdyZWF0ZXIgbGVuZ3RoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TXVuYXRpdXMsIGhvd2V2ZXIsIHN0YXRlcyB0aGF0IGhpcyBhbmdlciBhcm9zZSwgbm90IGZyb20gQ2F0bydzIGRpc3RydXN0IG9mIGhpbSwgYnV0IGZyb20gaGlzIGluY29uc2lkZXJhdGUgY29uZHVjdCB0b3dhcmRzIGhpbSwgYW5kIGZyb20gYSBjZXJ0YWluIGplYWxvdXN5IHdoaWNoIE11bmF0aXVzIGhpbXNlbGYgZmVsdCB0b3dhcmRzIENhbmlkaXVzLiBGb3IgTXVuYXRpdXMgaGltc2VsZiBhbHNvIHB1Ymxpc2hlZCBhIHRyZWF0aXNlIGFib3V0IENhdG8sIHdoaWNoIFRocmFzZWEgY2hpZWZseSBmb2xsb3dlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk11bmF0aXVzIHNheXMgdGhhdCBoZSBjYW1lIHRvIEN5cHJ1cyBhZnRlciB0aGUgb3RoZXJzLCBhbmQgZm91bmQgdGhhdCBubyBwcm92aXNpb24gaGFkIGJlZW4gbWFkZSBmb3IgaGlzIGVudGVydGFpbm1lbnQ7IGhlIHNheXMsIHRvbywgdGhhdCBvbiBnb2luZyB0byBDYXRvJ3MgZG9vciBoZSB3YXMgcmVwdWxzZWQsIGJlY2F1c2UgQ2F0byBoYWQgc29tZSBlbmdhZ2VtZW50IGluc2lkZSB3aXRoIENhbmlkaXVzLiBIZSBzYXlzLCBmdXJ0aGVyLCB0aGF0IGhpcyBtZWFzdXJlZCBwcm90ZXN0IG1ldCB3aXRoIG5vIG1lYXN1cmVkIHJlcGx5LCBmb3IgQ2F0byB0b2xkIGhpbSB0aGF0IGV4Y2Vzc2l2ZSBhZmZlY3Rpb24sIGFjY29yZGluZyB0byBUaGVvcGhyYXN0dXMsIHdhcyBsaWtlbHkgdG8gYmVjb21lIGEgZ3JvdW5kIGZvciBoYXRyZWQgaW4gbWFueSBjYXNlcy4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBzbyB0aG91IHRvbyw8L3E+IHNhaWQgQ2F0bywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJ5IHJlYXNvbiBvZiB0aGluZSBlc3BlY2lhbCBhZmZlY3Rpb24gZm9yIG1lLCBhcnQgdmV4ZWQgdG8gdGhpbmsgdGh5c2VsZiBsZXNzIGhvbm91cmVkIHRoYW4gaXMgbWVldC4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Q2FuaWRpdXMgSSBlbXBsb3kgbW9yZSB0aGFuIG90aGVycyBib3RoIGJlY2F1c2UgSSBoYXZlIG1hZGUgdHJpYWwgb2YgaGltLCBhbmQgYmVjYXVzZSBJIHRydXN0IGhpbTsgaGUgY2FtZSBhdCB0aGUgdmVyeSBmaXJzdCwgYW5kIHNob3dzIGhpbXNlbGYgdG8gYmUgaW5jb3JydXB0LjwvcT4gVGhpcyBwcml2YXRlIGNvbnZlcnNhdGlvbiwgaG93ZXZlciwgYmV0d2VlbiBoaW1zZWxmIGFuZCBDYXRvLCBNdW5hdGl1cyBzYXlzIHdhcyByZXBvcnRlZCBieSBDYXRvIHRvIENhbmlkaXVzLCBhbmQgdGhhdCB0aGVyZWZvcmUsIHdoZW4gaGUgaGVhcmQgb2YgaXQsIGhlIHdvdWxkIG5vIGxvbmdlciBnbyB0byBDYXRvJ3MgdGFibGUsIG9yIHZpc2l0IGhpbSwgb3Igc2hhcmUgaGlzIGNvdW5zZWxzLCB3aGVuIGhlIHdhcyBpbnZpdGVkLiBGdXJ0aGVyLCBNdW5hdGl1cyBzYXlzLCB3aGVuIENhdG8gdGhyZWF0ZW5lZCB0byB0YWtlIHNlY3VyaXR5IGZyb20gaGltLCBhcyB0aGUgUm9tYW5zIGRvIGluIHRoZSBjYXNlIG9mIHRob3NlIHdobyByZWZ1c2UgdG8gb2JleSBvcmRlcnMsIGhlIHBhaWQgbm8gYXR0ZW50aW9uIHRvIHRoZSB0aHJlYXQsIGJ1dCBzYWlsZWQgYXdheSwgYW5kIGZvciBhIGxvbmcgdGltZSBjb250aW51ZWQgdG8gYmUgYW5ncnkgd2l0aCBDYXRvLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhbmlkaXVzIEkgZW1wbG95IG1vcmUgdGhhbiBvdGhlcnMgYm90aCBiZWNhdXNlIEkgaGF2ZSBtYWRlIHRyaWFsIG9mIGhpbSwgYW5kIGJlY2F1c2UgSSB0cnVzdCBoaW07IGhlIGNhbWUgYXQgdGhlIHZlcnkgZmlyc3QsIGFuZCBzaG93cyBoaW1zZWxmIHRvIGJlIGluY29ycnVwdC48L3RyYW5zbGF0aW9uPg=="
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIE11bmF0aXVzIHNheXMsIE1hcmNpYSwgd2hvIHdhcyBzdGlsbCBsaXZpbmcgd2l0aCBDYXRvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDI1LjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh2LiA1PC9iaWJsPi48L25vdGU+IHNwb2tlIHdpdGggaGVyIGh1c2JhbmQgYWJvdXQgdGhlIG1hdHRlcjsgYW5kIHdoZW4gaXQgY2hhbmNlZCB0aGF0IGJvdGggbWVuIHdlcmUgaW52aXRlZCB0byBzdXBwZXIgYnkgQmFyY2EsIENhdG8sIHdobyBjYW1lIGxhdGUgYW5kIGFmdGVyIHRoZSBvdGhlcnMgaGFkIHRha2VuIHRoZWlyIHBsYWNlcywgYXNrZWQgd2hlcmUgaGUgc2hvdWxkIHJlY2xpbmU7IGFuZCB3aGVuIEJhcmNhIHRvbGQgaGltIHRvIHJlY2xpbmUgd2hlcmUgaGUgcGxlYXNlZCwgQ2F0byBsb29rZWQgYWJvdXQgdGhlIHJvb20gYW5kIHNhaWQ6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMjUuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHYuIDU8L2JpYmw+LjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSB3aWxsIHRha2UgbXkgcGxhY2UgYnkgTXVuYXRpdXMuPC9xPiBTbyBoZSB3ZW50IHJvdW5kIGFuZCByZWNsaW5lZCBieSBoaXMgc2lkZSwgYnV0IG1hZGUgbm8gZnVydGhlciBzaG93IG9mIGZyaWVuZHNoaXAgZHVyaW5nIHRoZSBzdXBwZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hcmNpYSwgaG93ZXZlciwgbWFkZSBhIHNlY29uZCByZXF1ZXN0IGluIHRoZSBtYXR0ZXIsIE11bmF0aXVzIHNheXMsIGFuZCBDYXRvIHdyb3RlIHRvIGhpbSwgc2F5aW5nIHRoYXQgaGUgd2lzaGVkIHRvIGNvbmZlciB3aXRoIGhpbSBhYm91dCBzb21ldGhpbmcuIFNvIE11bmF0aXVzIHdlbnQgdG8gQ2F0bydzIGhvdXNlIGVhcmx5IGluIHRoZSBtb3JuaW5nLCBhbmQgd2FzIGRldGFpbmVkIHRoZXJlIGJ5IE1hcmNpYSB1bnRpbCBhbGwgdGhlIG90aGVyIHZpc2l0b3JzIGhhZCBnb25lIGF3YXkuIFRoZW4gQ2F0byBjYW1lIGluLCB0aHJldyBib3RoIGFybXMgYWJvdXQgaGltLCBraXNzZWQgaGltLCBhbmQgbGF2aXNoZWQga2luZG5lc3MgdXBvbiBoaW0uIFN1Y2ggaW5jaWRlbnRzLCBub3csIGluIG15IG9waW5pb24sIHF1aXRlIGFzIG11Y2ggYXMgZGVlZHMgb2YgZ3JlYXRuZXNzIGFuZCBwdWJsaWNpdHksIHNoZWQgY29uc2lkZXJhYmxlIGxpZ2h0IHVwb24gdGhlIHBlcmNlcHRpb24gYW5kIG1hbmlmZXN0YXRpb24gb2YgY2hhcmFjdGVyLCBhbmQgSSBoYXZlIHRoZXJlZm9yZSByZWNvdW50ZWQgdGhlbSBhdCBncmVhdGVyIGxlbmd0aC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0byBnb3QgdG9nZXRoZXIgbmVhcmx5IHNldmVuIHRob3VzYW5kIHRhbGVudHMgb2Ygc2lsdmVyLCBhbmQgZmVhcmluZyB0aGUgbG9uZyB2b3lhZ2UgaG9tZSwgaGUgaGFkIG1hbnkgY29mZmVycyBwcm92aWRlZCwgZWFjaCBvbmUgb2Ygd2hpY2ggd291bGQgaG9sZCB0d28gdGFsZW50cyBhbmQgZml2ZSBodW5kcmVkIGRyYWNobWFzLCBhbmQgYXR0YWNoZWQgdG8gZWFjaCBvZiB0aGVtIGEgbG9uZyByb3BlLCB0byB0aGUgZW5kIG9mIHdoaWNoIGEgaHVnZSBwaWVjZSBvZiBjb3JrIHdhcyBmYXN0ZW5lZC4gVGhpcywgaGUgdGhvdWdodCwgaW4gY2FzZSB0aGUgdmVzc2VsIHdlcmUgd3JlY2tlZCwgd291bGQgaG9sZCB0byBpdHMgZGVlcCBtb29yaW5nIGFuZCBpbmRpY2F0ZSB0aGUgcGxhY2Ugd2hlcmUgdGhlIHRyZWFzdXJlIGxheS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgdGhlIG1vbmV5LCBleGNlcHQgYSB2ZXJ5IGxpdHRsZSwgd2FzIHNhZmVseSB0cmFuc3BvcnRlZDsgYnV0IGFsdGhvdWdoIGhlIGhhZCB0aGUgYWNjb3VudHMgb2YgYWxsIGhpcyBhZG1pbmlzdHJhdGlvbiBvZiB0aGUgZXN0YXRlIGNhcmVmdWxseSB3cml0dGVuIG91dCBpbiB0d28gYm9va3MsIG5laXRoZXIgb2YgdGhlc2Ugd2FzIHByZXNlcnZlZC4gT25lIG9mIHRoZW0gYSBmcmVlZG1hbiBvZiBoaXMsIFBoaWxhcmd5cnVzIGJ5IG5hbWUsIGhhZCBpbiBjaGFyZ2UsIGJ1dCBhZnRlciBwdXR0aW5nIHRvIHNlYSBmcm9tIENlbmNocmVhZSBoZSB3YXMgY2Fwc2l6ZWQgYW5kIGxvc3QgaXQsIHRvZ2V0aGVyIHdpdGggaGlzIGNhcmdvOyB0aGUgb3RoZXIgQ2F0byBoaW1zZWxmIGhhZCBzYWZlbHkgY2FycmllZCBhcyBmYXIgYXMgQ29yY3lyYSwgd2hlcmUgaGUgcGl0Y2hlZCBoaXMgdGVudCBpbiB0aGUgbWFya2V0cGxhY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBiZWNhdXNlIGl0IHdhcyBzbyBjb2xkIHRoZSBzYWlsb3JzIGJ1aWx0IG1hbnkgZmlyZXMgZHVyaW5nIHRoZSBuaWdodCwgdGhlIHRlbnRzIGNhdWdodCBmaXJlLCBhbmQgdGhlIGJvb2sgZGlzYXBwZWFyZWQuIEl0IGlzIHRydWUgdGhhdCB0aGUgcm95YWwgc3Rld2FyZHMgd2hvIHdlcmUgYXQgaGFuZCB3ZXJlIHJlYWR5IHRvIHN0b3AgdGhlIG1vdXRocyBvZiBDYXRvJ3MgZW5lbWllcyBhbmQgdHJhZHVjZXJzLCBidXQgbmV2ZXJ0aGVsZXNzIHRoZSBtYXR0ZXIgZ2F2ZSBoaW0gYW5ub3lhbmNlLiBGb3IgaXQgd2FzIG5vdCBhcyBhIHByb29mIG9mIGhpcyBvd24gaW50ZWdyaXR5LCBidXQgYXMgYW4gZXhhbXBsZSB0byBvdGhlcnMgb2Ygc2NydXB1bG91cyBleGFjdG5lc3MgdGhhdCBoZSB3YXMgZWFnZXIgdG8gcHJvZHVjZSBoaXMgYWNjb3VudHMsIGFuZCBoZSB3YXMgdGhlcmVmb3JlIHZleGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0byBnb3QgdG9nZXRoZXIgbmVhcmx5IHNldmVuIHRob3VzYW5kIHRhbGVudHMgb2Ygc2lsdmVyLCBhbmQgZmVhcmluZyB0aGUgbG9uZyB2b3lhZ2UgaG9tZSwgaGUgaGFkIG1hbnkgY29mZmVycyBwcm92aWRlZCwgZWFjaCBvbmUgb2Ygd2hpY2ggd291bGQgaG9sZCB0d28gdGFsZW50cyBhbmQgZml2ZSBodW5kcmVkIGRyYWNobWFzLCBhbmQgYXR0YWNoZWQgdG8gZWFjaCBvZiB0aGVtIGEgbG9uZyByb3BlLCB0byB0aGUgZW5kIG9mIHdoaWNoIGEgaHVnZSBwaWVjZSBvZiBjb3JrIHdhcyBmYXN0ZW5lZC4gVGhpcywgaGUgdGhvdWdodCwgaW4gY2FzZSB0aGUgdmVzc2VsIHdlcmUgd3JlY2tlZCwgd291bGQgaG9sZCB0byBpdHMgZGVlcCBtb29yaW5nIGFuZCBpbmRpY2F0ZSB0aGUgcGxhY2Ugd2hlcmUgdGhlIHRyZWFzdXJlIGxheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIHRoZSBtb25leSwgZXhjZXB0IGEgdmVyeSBsaXR0bGUsIHdhcyBzYWZlbHkgdHJhbnNwb3J0ZWQ7IGJ1dCBhbHRob3VnaCBoZSBoYWQgdGhlIGFjY291bnRzIG9mIGFsbCBoaXMgYWRtaW5pc3RyYXRpb24gb2YgdGhlIGVzdGF0ZSBjYXJlZnVsbHkgd3JpdHRlbiBvdXQgaW4gdHdvIGJvb2tzLCBuZWl0aGVyIG9mIHRoZXNlIHdhcyBwcmVzZXJ2ZWQuIE9uZSBvZiB0aGVtIGEgZnJlZWRtYW4gb2YgaGlzLCBQaGlsYXJneXJ1cyBieSBuYW1lLCBoYWQgaW4gY2hhcmdlLCBidXQgYWZ0ZXIgcHV0dGluZyB0byBzZWEgZnJvbSBDZW5jaHJlYWUgaGUgd2FzIGNhcHNpemVkIGFuZCBsb3N0IGl0LCB0b2dldGhlciB3aXRoIGhpcyBjYXJnbzsgdGhlIG90aGVyIENhdG8gaGltc2VsZiBoYWQgc2FmZWx5IGNhcnJpZWQgYXMgZmFyIGFzIENvcmN5cmEsIHdoZXJlIGhlIHBpdGNoZWQgaGlzIHRlbnQgaW4gdGhlIG1hcmtldHBsYWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBiZWNhdXNlIGl0IHdhcyBzbyBjb2xkIHRoZSBzYWlsb3JzIGJ1aWx0IG1hbnkgZmlyZXMgZHVyaW5nIHRoZSBuaWdodCwgdGhlIHRlbnRzIGNhdWdodCBmaXJlLCBhbmQgdGhlIGJvb2sgZGlzYXBwZWFyZWQuIEl0IGlzIHRydWUgdGhhdCB0aGUgcm95YWwgc3Rld2FyZHMgd2hvIHdlcmUgYXQgaGFuZCB3ZXJlIHJlYWR5IHRvIHN0b3AgdGhlIG1vdXRocyBvZiBDYXRvJ3MgZW5lbWllcyBhbmQgdHJhZHVjZXJzLCBidXQgbmV2ZXJ0aGVsZXNzIHRoZSBtYXR0ZXIgZ2F2ZSBoaW0gYW5ub3lhbmNlLiBGb3IgaXQgd2FzIG5vdCBhcyBhIHByb29mIG9mIGhpcyBvd24gaW50ZWdyaXR5LCBidXQgYXMgYW4gZXhhbXBsZSB0byBvdGhlcnMgb2Ygc2NydXB1bG91cyBleGFjdG5lc3MgdGhhdCBoZSB3YXMgZWFnZXIgdG8gcHJvZHVjZSBoaXMgYWNjb3VudHMsIGFuZCBoZSB3YXMgdGhlcmVmb3JlIHZleGVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgUm9tYW5zIGRpZCBub3QgZmFpbCB0byBoZWFyIG9mIGhpcyBhcnJpdmFsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNTYgQi5DLjwvbm90ZT4gd2l0aCBoaXMgc2hpcHMsIGFuZCBhbGwgdGhlIG1hZ2lzdHJhdGVzIGFuZCBwcmllc3RzLCB0aGUgd2hvbGUgc2VuYXRlLCBhbmQgYSBsYXJnZSBwYXJ0IG9mIHRoZSBwZW9wbGUgd2VudCB0byB0aGUgcml2ZXIgdG8gbWVldCBoaW0sIHNvIHRoYXQgYm90aCBiYW5rcyBvZiB0aGUgc3RyZWFtIHdlcmUgaGlkZGVuIGZyb20gdmlldywgYW5kIGhpcyB2b3lhZ2UgdXAgdG8gdGhlIGNpdHkgaGFkIGFsbCB0aGUgc2hvdyBhbmQgc3BsZW5kb3VyIG9mIGEgdHJpdW1waC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IHNvbWUgdGhvdWdodCBpdCB1bmdyYWNpb3VzIGFuZCBzdHViYm9ybiB0aGF0LCBhbHRob3VnaCB0aGUgY29uc3VscyBhbmQgcHJhZXRvcnMgd2VyZSBhdCBoYW5kLCBoZSBuZWl0aGVyIGxhbmRlZCB0byBncmVldCB0aGVtLCBub3IgY2hlY2tlZCBoaXMgY291cnNlLCBidXQgb24gYSByb3lhbCBnYWxsZXkgb2Ygc2l4IGJhbmtzIG9mIG9hcnMgc3dlcHQgcGFzdCB0aGUgYmFuayB3aGVyZSB0aGV5IHN0b29kLCBhbmQgZGlkIG5vdCBzdG9wIHVudGlsIGhlIGhhZCBicm91Z2h0IGhpcyBmbGVldCB0byBhbmNob3IgaW4gdGhlIGRvY2steWFyZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgd2hlbiB0aGUgdHJlYXN1cmUgd2FzIGNhcnJpZWQgdGhyb3VnaCB0aGUgZm9ydW0sIHRoZSBwZW9wbGUgd2VyZSBhbWF6ZWQgYXQgdGhlIGdyZWF0IGFtb3VudCBvZiBpdCwgYW5kIHRoZSBzZW5hdGUgaW4gc3BlY2lhbCBzZXNzaW9uIHZvdGVkLCB0b2dldGhlciB3aXRoIHRoZSBhcHByb3ByaWF0ZSBwcmFpc2VzLCB0aGF0IGFuIGV4dHJhb3JkaW5hcnkgcHJhZXRvcnNoaXAgc2hvdWxkIGJlIGdpdmVuIHRvIENhdG8sIGFuZCB0aGVuIHdoZW4gaGUgd2l0bmVzc2VkIHRoZSBzcGVjdGFjbGVzIGhlIG1pZ2h0IHdlYXIgYSBwdXJwbGUtYm9yZGVyZWQgcm9iZS4gVGhlc2UgaG9ub3Vycywgbm93LCBDYXRvIGRlY2xpbmVkLCBidXQgaGUgcGVyc3VhZGVkIHRoZSBzZW5hdGUgdG8gYmVzdG93IGZyZWVkb20gdXBvbiBOaWNpYXMsIHRoZSBzdGV3YXJkIG9mIHRoZSByb3lhbCBob3VzZWhvbGQsIGFmdGVyIGJlYXJpbmcgd2l0bmVzcyB0byBoaXMgY2FyZSBhbmQgZmlkZWxpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpcHB1cywgdGhlIGZhdGhlciBvZiBNYXJjaWEsIHdhcyBjb25zdWwgYXQgdGhlIHRpbWUsIGFuZCB0aGUgZGlnbml0eSBhbmQgcG93ZXIgb2YgaGlzIG9mZmljZSBkZXZvbHZlZCBpbiBhIG1hbm5lciB1cG9uIENhdG87IHRoZSBjb2xsZWFndWUgb2YgUGhpbGlwcHVzLCBhbHNvLCBiZXN0b3dlZCBubyBsZXNzIGhvbm91ciB1cG9uIENhdG8gZm9yIGhpcyB2aXJ0dWUgdGhhbiBQaGlsaXBwdXMgZGlkIGJlY2F1c2Ugb2YgaGlzIHJlbGF0aW9uc2hpcCB0byBoaW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFJvbWFucyBkaWQgbm90IGZhaWwgdG8gaGVhciBvZiBoaXMgYXJyaXZhbDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNTYgQi5DLjwvbm90ZT4gd2l0aCBoaXMgc2hpcHMsIGFuZCBhbGwgdGhlIG1hZ2lzdHJhdGVzIGFuZCBwcmllc3RzLCB0aGUgd2hvbGUgc2VuYXRlLCBhbmQgYSBsYXJnZSBwYXJ0IG9mIHRoZSBwZW9wbGUgd2VudCB0byB0aGUgcml2ZXIgdG8gbWVldCBoaW0sIHNvIHRoYXQgYm90aCBiYW5rcyBvZiB0aGUgc3RyZWFtIHdlcmUgaGlkZGVuIGZyb20gdmlldywgYW5kIGhpcyB2b3lhZ2UgdXAgdG8gdGhlIGNpdHkgaGFkIGFsbCB0aGUgc2hvdyBhbmQgc3BsZW5kb3VyIG9mIGEgdHJpdW1waC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPllldCBzb21lIHRob3VnaHQgaXQgdW5ncmFjaW91cyBhbmQgc3R1YmJvcm4gdGhhdCwgYWx0aG91Z2ggdGhlIGNvbnN1bHMgYW5kIHByYWV0b3JzIHdlcmUgYXQgaGFuZCwgaGUgbmVpdGhlciBsYW5kZWQgdG8gZ3JlZXQgdGhlbSwgbm9yIGNoZWNrZWQgaGlzIGNvdXJzZSwgYnV0IG9uIGEgcm95YWwgZ2FsbGV5IG9mIHNpeCBiYW5rcyBvZiBvYXJzIHN3ZXB0IHBhc3QgdGhlIGJhbmsgd2hlcmUgdGhleSBzdG9vZCwgYW5kIGRpZCBub3Qgc3RvcCB1bnRpbCBoZSBoYWQgYnJvdWdodCBoaXMgZmxlZXQgdG8gYW5jaG9yIGluIHRoZSBkb2NrLXlhcmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gdGhlIHRyZWFzdXJlIHdhcyBjYXJyaWVkIHRocm91Z2ggdGhlIGZvcnVtLCB0aGUgcGVvcGxlIHdlcmUgYW1hemVkIGF0IHRoZSBncmVhdCBhbW91bnQgb2YgaXQsIGFuZCB0aGUgc2VuYXRlIGluIHNwZWNpYWwgc2Vzc2lvbiB2b3RlZCwgdG9nZXRoZXIgd2l0aCB0aGUgYXBwcm9wcmlhdGUgcHJhaXNlcywgdGhhdCBhbiBleHRyYW9yZGluYXJ5IHByYWV0b3JzaGlwIHNob3VsZCBiZSBnaXZlbiB0byBDYXRvLCBhbmQgdGhlbiB3aGVuIGhlIHdpdG5lc3NlZCB0aGUgc3BlY3RhY2xlcyBoZSBtaWdodCB3ZWFyIGEgcHVycGxlLWJvcmRlcmVkIHJvYmUuIFRoZXNlIGhvbm91cnMsIG5vdywgQ2F0byBkZWNsaW5lZCwgYnV0IGhlIHBlcnN1YWRlZCB0aGUgc2VuYXRlIHRvIGJlc3RvdyBmcmVlZG9tIHVwb24gTmljaWFzLCB0aGUgc3Rld2FyZCBvZiB0aGUgcm95YWwgaG91c2Vob2xkLCBhZnRlciBiZWFyaW5nIHdpdG5lc3MgdG8gaGlzIGNhcmUgYW5kIGZpZGVsaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpcHB1cywgdGhlIGZhdGhlciBvZiBNYXJjaWEsIHdhcyBjb25zdWwgYXQgdGhlIHRpbWUsIGFuZCB0aGUgZGlnbml0eSBhbmQgcG93ZXIgb2YgaGlzIG9mZmljZSBkZXZvbHZlZCBpbiBhIG1hbm5lciB1cG9uIENhdG87IHRoZSBjb2xsZWFndWUgb2YgUGhpbGlwcHVzLCBhbHNvLCBiZXN0b3dlZCBubyBsZXNzIGhvbm91ciB1cG9uIENhdG8gZm9yIGhpcyB2aXJ0dWUgdGhhbiBQaGlsaXBwdXMgZGlkIGJlY2F1c2Ugb2YgaGlzIHJlbGF0aW9uc2hpcCB0byBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDaWNlcm8gaGFkIG5vdyBjb21lIGJhY2s8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA1NyBCLkMuLCBhZnRlciBhbiBhYnNlbmNlIG9mIHNpeHRlZW4gbW9udGhzLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2ljZXJvPC90aXRsZT4sIGNoYXB0ZXJzIHh4eC48L2JpYmw+LTxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDMzLjEiIHZhbGlkPSJ5ZXMiPnh4eGlpaTwvYmlibD4uPC9ub3RlPiBmcm9tIHRoZSBleGlsZSBpbnRvIHdoaWNoIGhlIHdhcyBkcml2ZW4gYnkgQ2xvZGl1cywgYW5kLCByZWx5aW5nIG9uIGhpcyBncmVhdCBpbmZsdWVuY2UgaW4gdGhlIHNlbmF0ZSwgaGFkIGZvcmNpYmx5IHRha2VuIGF3YXkgYW5kIGRlc3Ryb3llZCwgaW4gdGhlIGFic2VuY2Ugb2YgQ2xvZGl1cywgdGhlIHJlY29yZHMgb2YgaGlzIHRyaWJ1bmVzaGlwIHdoaWNoIENsb2RpdXMgaGFkIGRlcG9zaXRlZCBvbiB0aGUgQ2FwaXRvbC4gV2hlbiB0aGUgc2VuYXRlIHdhcyBjb252ZW5lZCB0byBjb25zaWRlciB0aGUgbWF0dGVyLCBhbmQgQ2xvZGl1cyBtYWRlIGhpcyBkZW51bmNpYXRpb24sIENpY2VybyBtYWRlIGEgc3BlZWNoIGluIHdoaWNoIGhlIHNhaWQgdGhhdCwgc2luY2UgQ2xvZGl1cyBoYWQgYmVlbiBtYWRlIHRyaWJ1bmUgaWxsZWdhbGx5LCBhbGwgdGhhdCBoYWQgYmVlbiBkb25lIG9yIHJlY29yZGVkIGR1cmluZyBoaXMgdHJpYnVuYXRlIG91Z2h0IHRvIGJlIHZvaWQgYW5kIGludmFsaWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gY29udHJhZGljdGVkIENpY2VybyB3aGlsZSBoZSB3YXMgc3BlYWtpbmcsIGFuZCBmaW5hbGx5IHJvc2UgYW5kIHNhaWQgdGhhdCwgYWx0aG91Z2ggaGUgd2FzIHdob2xseSBvZiB0aGUgb3BpbmlvbiB0aGF0IHRoZXJlIHdhcyBub3RoaW5nIHNvdW5kIG9yIGdvb2QgaW4gdGhlIGFkbWluaXN0cmF0aW9uIG9mIENsb2RpdXMsIHN0aWxsLCBpZiBldmVyeXRoaW5nIHdoaWNoIENsb2RpdXMgaGFkIGRvbmUgd2hpbGUgdHJpYnVuZSB3ZXJlIHRvIGJlIHJlc2NpbmRlZCwgdGhlbiBhbGwgaGlzIG93biBwcm9jZWVkaW5ncyBpbiBDeXBydXMgd291bGQgYmUgcmVzY2luZGVkLCBhbmQgaGlzIG1pc3Npb24gdGhlcmUgaGFkIG5vdCBiZWVuIGxlZ2FsLCBzaW5jZSBhbiBpbGxlZ2FsIG1hZ2lzdHJhdGUgaGFkIG9idGFpbmVkIGl0IGZvciBoaW07IGJ1dCBpdCBoYWQgbm90IGJlZW4gaWxsZWdhbCwgaGUgbWFpbnRhaW5lZCwgZm9yIENsb2RpdXMgdG8gYmUgZWxlY3RlZCB0cmlidW5lIGFmdGVyIGEgdHJhbnNmZXIgZnJvbSBwYXRyaWNpYW4gdG8gcGxlYmVpYW4gcmFuayB3aGljaCB0aGUgbGF3IGFsbG93ZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSIxUGx1dC4gQ2F0Lk1pLiAzMy4xIj5jaGFwdGVyIHh4eGlpaTwvYmlibD4uPC9ub3RlPiBhbmQgaWYgaGUgaGFkIGJlZW4gYSBiYWQgbWFnaXN0cmF0ZSwgbGlrZSBvdGhlcnMsIGl0IHdhcyBmaXR0aW5nIHRvIGNhbGwgdG8gYW4gYWNjb3VudCB0aGUgbWFuIHdobyBoYWQgZG9uZSB3cm9uZywgYW5kIG5vdCB0byB2aXRpYXRlIHRoZSBvZmZpY2Ugd2hpY2ggaGFkIHN1ZmZlcmVkIGZyb20gaGlzIHdyb25nIGRvaW5nLiBJbiBjb25zZXF1ZW5jZSBvZiB0aGlzIHNwZWVjaCBDaWNlcm8gd2FzIGFuZ3J5IHdpdGggQ2F0bywgYW5kIGZvciBhIGxvbmcgdGltZSBjZWFzZWQgZnJpZW5kbHkgaW50ZXJjb3Vyc2Ugd2l0aCBoaW07IGFmdGVyd2FyZHMsIGhvd2V2ZXIsIHRoZXkgd2VyZSByZWNvbmNpbGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMzQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DaWNlcm88L3RpdGxlPiwgeHh4aXY8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENpY2VybyBoYWQgbm93IGNvbWUgYmFjazxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNTcgQi5DLiwgYWZ0ZXIgYW4gYWJzZW5jZSBvZiBzaXh0ZWVuIG1vbnRocy4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgY2hhcHRlcnMgeHh4LjwvYmlibD4tPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAzMy4xIiB2YWxpZD0ieWVzIj54eHhpaWk8L2JpYmw+Ljwvbm90ZT4gZnJvbSB0aGUgZXhpbGUgaW50byB3aGljaCBoZSB3YXMgZHJpdmVuIGJ5IENsb2RpdXMsIGFuZCwgcmVseWluZyBvbiBoaXMgZ3JlYXQgaW5mbHVlbmNlIGluIHRoZSBzZW5hdGUsIGhhZCBmb3JjaWJseSB0YWtlbiBhd2F5IGFuZCBkZXN0cm95ZWQsIGluIHRoZSBhYnNlbmNlIG9mIENsb2RpdXMsIHRoZSByZWNvcmRzIG9mIGhpcyB0cmlidW5lc2hpcCB3aGljaCBDbG9kaXVzIGhhZCBkZXBvc2l0ZWQgb24gdGhlIENhcGl0b2wuIFdoZW4gdGhlIHNlbmF0ZSB3YXMgY29udmVuZWQgdG8gY29uc2lkZXIgdGhlIG1hdHRlciwgYW5kIENsb2RpdXMgbWFkZSBoaXMgZGVudW5jaWF0aW9uLCBDaWNlcm8gbWFkZSBhIHNwZWVjaCBpbiB3aGljaCBoZSBzYWlkIHRoYXQsIHNpbmNlIENsb2RpdXMgaGFkIGJlZW4gbWFkZSB0cmlidW5lIGlsbGVnYWxseSwgYWxsIHRoYXQgaGFkIGJlZW4gZG9uZSBvciByZWNvcmRlZCBkdXJpbmcgaGlzIHRyaWJ1bmF0ZSBvdWdodCB0byBiZSB2b2lkIGFuZCBpbnZhbGlkLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpY2VybzwvdGl0bGU+LCBjaGFwdGVycyB4eHguPC9iaWJsPi08dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgY2hhcHRlcnMgeHh4LjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMzMuMSIgdmFsaWQ9InllcyI+eHh4aWlpPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gY29udHJhZGljdGVkIENpY2VybyB3aGlsZSBoZSB3YXMgc3BlYWtpbmcsIGFuZCBmaW5hbGx5IHJvc2UgYW5kIHNhaWQgdGhhdCwgYWx0aG91Z2ggaGUgd2FzIHdob2xseSBvZiB0aGUgb3BpbmlvbiB0aGF0IHRoZXJlIHdhcyBub3RoaW5nIHNvdW5kIG9yIGdvb2QgaW4gdGhlIGFkbWluaXN0cmF0aW9uIG9mIENsb2RpdXMsIHN0aWxsLCBpZiBldmVyeXRoaW5nIHdoaWNoIENsb2RpdXMgaGFkIGRvbmUgd2hpbGUgdHJpYnVuZSB3ZXJlIHRvIGJlIHJlc2NpbmRlZCwgdGhlbiBhbGwgaGlzIG93biBwcm9jZWVkaW5ncyBpbiBDeXBydXMgd291bGQgYmUgcmVzY2luZGVkLCBhbmQgaGlzIG1pc3Npb24gdGhlcmUgaGFkIG5vdCBiZWVuIGxlZ2FsLCBzaW5jZSBhbiBpbGxlZ2FsIG1hZ2lzdHJhdGUgaGFkIG9idGFpbmVkIGl0IGZvciBoaW07IGJ1dCBpdCBoYWQgbm90IGJlZW4gaWxsZWdhbCwgaGUgbWFpbnRhaW5lZCwgZm9yIENsb2RpdXMgdG8gYmUgZWxlY3RlZCB0cmlidW5lIGFmdGVyIGEgdHJhbnNmZXIgZnJvbSBwYXRyaWNpYW4gdG8gcGxlYmVpYW4gcmFuayB3aGljaCB0aGUgbGF3IGFsbG93ZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iMVBsdXQuIENhdC5NaS4gMzMuMSI+Y2hhcHRlciB4eHhpaWk8L2JpYmw+Ljwvbm90ZT4gYW5kIGlmIGhlIGhhZCBiZWVuIGEgYmFkIG1hZ2lzdHJhdGUsIGxpa2Ugb3RoZXJzLCBpdCB3YXMgZml0dGluZyB0byBjYWxsIHRvIGFuIGFjY291bnQgdGhlIG1hbiB3aG8gaGFkIGRvbmUgd3JvbmcsIGFuZCBub3QgdG8gdml0aWF0ZSB0aGUgb2ZmaWNlIHdoaWNoIGhhZCBzdWZmZXJlZCBmcm9tIGhpcyB3cm9uZyBkb2luZy4gSW4gY29uc2VxdWVuY2Ugb2YgdGhpcyBzcGVlY2ggQ2ljZXJvIHdhcyBhbmdyeSB3aXRoIENhdG8sIGFuZCBmb3IgYSBsb25nIHRpbWUgY2Vhc2VkIGZyaWVuZGx5IGludGVyY291cnNlIHdpdGggaGltOyBhZnRlcndhcmRzLCBob3dldmVyLCB0aGV5IHdlcmUgcmVjb25jaWxlZC48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSIxUGx1dC4gQ2F0Lk1pLiAzMy4xIj5jaGFwdGVyIHh4eGlpaTwvYmlibD4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMzQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpY2VybzwvdGl0bGU+LCB4eHhpdjwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDM0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgeHh4aXY8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpY2VybzwvdGl0bGU+LCB4eHhpdjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIFBvbXBleSBhbmQgQ3Jhc3N1cyBoYWQgYSBtZWV0aW5nIHdpdGggQ2Flc2FyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IEx1Y2EsIGluIDU2IEIuQy4gQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbGkuPC9iaWJsPjsgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAyMS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhZXNhcjwvdGl0bGU+LCB4eGk8L2JpYmw+Ljwvbm90ZT4gd2hvIGhhZCBjb21lIGFjcm9zcyB0aGUgQWxwcywgaW4gd2hpY2ggdGhleSBsYWlkIGEgcGxhbiB0byBjYW52YXNzIGpvaW50bHkgZm9yIGEgc2Vjb25kIGNvbnN1bHNoaXAsIGFuZCwgYWZ0ZXIgdGhleSB3ZXJlIGVzdGFibGlzaGVkIGluIHRoZSBvZmZpY2UsIHRvIGdldCBhIHZvdGUgcGFzc2VkIGdpdmluZyB0byBDYWVzYXIgYW5vdGhlciB0ZXJtIGluIGhpcyBjb21tYW5kLCBvZiB0aGUgc2FtZSBkdXJhdGlvbiBhcyB0aGUgZmlyc3QsIGFuZCB0byB0aGVtc2VsdmVzIHRoZSBsYXJnZXN0IHByb3ZpbmNlcywgbW9uZXkgYW5kIG1pbGl0YXJ5IGZvcmNlcy4gVGhpcyB3YXMgYSBjb25zcGlyYWN5IGZvciB0aGUgZGl2aXNpb24gb2YgdGhlIHN1cHJlbWUgcG93ZXIgYW5kIHRoZSBhYm9saXRpb24gb2YgdGhlIGNvbnN0aXR1dGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFsdGhvdWdoIG1hbnkgaG9ub3VyYWJsZSBtZW4gd2VyZSBnZXR0aW5nIHJlYWR5IHRvIGNhbnZhc3MgZm9yIHRoZSBjb25zdWxzaGlwIGF0IHRoYXQgdGltZSwgdGhleSB3ZXJlIGFsbCBkZXRlcnJlZCBieSBzZWVpbmcgUG9tcGV5IGFuZCBDcmFzc3VzIGFubm91bmNlIHRoZW1zZWx2ZXMgYXMgY2FuZGlkYXRlcywgZXhjZXB0aW5nIG9ubHkgTHVjaXVzIERvbWl0aXVzLCB0aGUgaHVzYmFuZCBvZiBDYXRvJ3Mgc2lzdGVyIFBvcmNpYS4gSGltIENhdG8gcGVyc3VhZGVkIG5vdCB0byB3aXRoZHJhdyBmcm9tIHRoZSBjYW52YXNzIG9yIGdpdmUgd2F5LCBzaW5jZSB0aGUgc3RydWdnbGUgd2FzIG5vdCBmb3Igb2ZmaWNlLCBidXQgZm9yIHRoZSBsaWJlcnR5IG9mIHRoZSBSb21hbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgaXQgd2FzIGN1cnJlbnRseSBzYWlkIGFtb25nIHRob3NlIGNpdGl6ZW5zIHdobyBzdGlsbCByZXRhaW5lZCB0aGVpciBnb29kIHNlbnNlLCB0aGF0IHRoZSBjb25zdWxhciBwb3dlciBtdXN0IG5vdCBiZSBzdWZmZXJlZCB0byBiZWNvbWUgYWx0b2dldGhlciBvdmVyd2VlbmluZyBhbmQgb3BwcmVzc2l2ZSBieSB0aGUgdW5pb24gb2YgdGhlIGluZmx1ZW5jZSBvZiBQb21wZXkgYW5kIENyYXNzdXMsIGJ1dCB0aGF0IG9uZSBvciB0aGUgb3RoZXIgb2YgdGhlc2UgbWVuIG11c3QgYmUgZGVwcml2ZWQgb2YgaXQuIFNvIHRoZXkgam9pbmVkIHRoZSBwYXJ0eSBvZiBEb21pdGl1cywgaW5jaXRpbmcgYW5kIGVuY291cmFnaW5nIGhpbSB0byBwZXJzaXN0IGluIGhpcyBvcHBvc2l0aW9uOyBmb3IgbWFueSwgdGhleSBzYWlkLCB3aG8gbm93IGhlbGQgdGhlaXIgcGVhY2UgdGhyb3VnaCBmZWFyLCB3b3VsZCBoZWxwIGhpbSB3aGVuIGl0IGNhbWUgdG8gdm90aW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['41.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgUG9tcGV5IGFuZCBDcmFzc3VzIGhhZCBhIG1lZXRpbmcgd2l0aCBDYWVzYXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBMdWNhLCBpbiA1NiBCLkMuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBsaS48L2JpYmw+OyB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMjEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4eGk8L2JpYmw+Ljwvbm90ZT4gd2hvIGhhZCBjb21lIGFjcm9zcyB0aGUgQWxwcywgaW4gd2hpY2ggdGhleSBsYWlkIGEgcGxhbiB0byBjYW52YXNzIGpvaW50bHkgZm9yIGEgc2Vjb25kIGNvbnN1bHNoaXAsIGFuZCwgYWZ0ZXIgdGhleSB3ZXJlIGVzdGFibGlzaGVkIGluIHRoZSBvZmZpY2UsIHRvIGdldCBhIHZvdGUgcGFzc2VkIGdpdmluZyB0byBDYWVzYXIgYW5vdGhlciB0ZXJtIGluIGhpcyBjb21tYW5kLCBvZiB0aGUgc2FtZSBkdXJhdGlvbiBhcyB0aGUgZmlyc3QsIGFuZCB0byB0aGVtc2VsdmVzIHRoZSBsYXJnZXN0IHByb3ZpbmNlcywgbW9uZXkgYW5kIG1pbGl0YXJ5IGZvcmNlcy4gVGhpcyB3YXMgYSBjb25zcGlyYWN5IGZvciB0aGUgZGl2aXNpb24gb2YgdGhlIHN1cHJlbWUgcG93ZXIgYW5kIHRoZSBhYm9saXRpb24gb2YgdGhlIGNvbnN0aXR1dGlvbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1MS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGxpLjwvYmlibD47IHRoZSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbGkuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMjEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4eGk8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4eGk8L3RyYW5zbGF0aW9uPg=="
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhbHRob3VnaCBtYW55IGhvbm91cmFibGUgbWVuIHdlcmUgZ2V0dGluZyByZWFkeSB0byBjYW52YXNzIGZvciB0aGUgY29uc3Vsc2hpcCBhdCB0aGF0IHRpbWUsIHRoZXkgd2VyZSBhbGwgZGV0ZXJyZWQgYnkgc2VlaW5nIFBvbXBleSBhbmQgQ3Jhc3N1cyBhbm5vdW5jZSB0aGVtc2VsdmVzIGFzIGNhbmRpZGF0ZXMsIGV4Y2VwdGluZyBvbmx5IEx1Y2l1cyBEb21pdGl1cywgdGhlIGh1c2JhbmQgb2YgQ2F0bydzIHNpc3RlciBQb3JjaWEuIEhpbSBDYXRvIHBlcnN1YWRlZCBub3QgdG8gd2l0aGRyYXcgZnJvbSB0aGUgY2FudmFzcyBvciBnaXZlIHdheSwgc2luY2UgdGhlIHN0cnVnZ2xlIHdhcyBub3QgZm9yIG9mZmljZSwgYnV0IGZvciB0aGUgbGliZXJ0eSBvZiB0aGUgUm9tYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgaXQgd2FzIGN1cnJlbnRseSBzYWlkIGFtb25nIHRob3NlIGNpdGl6ZW5zIHdobyBzdGlsbCByZXRhaW5lZCB0aGVpciBnb29kIHNlbnNlLCB0aGF0IHRoZSBjb25zdWxhciBwb3dlciBtdXN0IG5vdCBiZSBzdWZmZXJlZCB0byBiZWNvbWUgYWx0b2dldGhlciBvdmVyd2VlbmluZyBhbmQgb3BwcmVzc2l2ZSBieSB0aGUgdW5pb24gb2YgdGhlIGluZmx1ZW5jZSBvZiBQb21wZXkgYW5kIENyYXNzdXMsIGJ1dCB0aGF0IG9uZSBvciB0aGUgb3RoZXIgb2YgdGhlc2UgbWVuIG11c3QgYmUgZGVwcml2ZWQgb2YgaXQuIFNvIHRoZXkgam9pbmVkIHRoZSBwYXJ0eSBvZiBEb21pdGl1cywgaW5jaXRpbmcgYW5kIGVuY291cmFnaW5nIGhpbSB0byBwZXJzaXN0IGluIGhpcyBvcHBvc2l0aW9uOyBmb3IgbWFueSwgdGhleSBzYWlkLCB3aG8gbm93IGhlbGQgdGhlaXIgcGVhY2UgdGhyb3VnaCBmZWFyLCB3b3VsZCBoZWxwIGhpbSB3aGVuIGl0IGNhbWUgdG8gdm90aW5nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyBwcmVjaXNlbHkgd2hhdCB0aGUgcGFydGlzYW5zIG9mIFBvbXBleSBmZWFyZWQsIGFuZCBzbyB0aGV5IHNldCBhbiBhbWJ1c2ggZm9yIERvbWl0aXVzIGFzIGhlIHdhcyBnb2luZyBkb3duIGF0IGVhcmx5IG1vcm5pbmcgYnkgdG9yY2hsaWdodCBpbnRvIHRoZSBDYW1wdXMgTWFydGl1cy4gRmlyc3Qgb2YgYWxsIHRoZSB0b3JjaC1iZWFyZXIgd2hvIHN0b29kIGluIGZyb250IG9mIERvbWl0aXVzIHdhcyBzbWl0dGVuLCBmZWxsLCBhbmQgZGllZDsgYW5kIGFmdGVyIGhpbSB0aGUgcmVzdCBvZiB0aGUgcGFydHkgd2VyZSBwcmVzZW50bHkgd291bmRlZCwgYW5kIGFsbCB0b29rIHRvIGZsaWdodCBleGNlcHQgQ2F0byBhbmQgRG9taXRpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBDYXRvIGhlbGQgRG9taXRpdXMgYmFjaywgYWx0aG91Z2ggaGUgaGltc2VsZiBoYWQgcmVjZWl2ZWQgYSB3b3VuZCBpbiB0aGUgYXJtLCBhbmQgZXhob3J0ZWQgaGltIHRvIHN0YW5kIGhpcyBncm91bmQsIGFuZCBub3QgdG8gYWJhbmRvbiwgd2hpbGUgdGhleSBoYWQgYnJlYXRoLCB0aGUgc3RydWdnbGUgaW4gYmVoYWxmIG9mIGxpYmVydHkgd2hpY2ggdGhleSB3ZXJlIHdhZ2luZyBhZ2FpbnN0IHRoZSB0eXJhbnRzLCB3aG8gc2hvd2VkIHBsYWlubHkgaG93IHRoZXkgd291bGQgdXNlIHRoZSBjb25zdWxhciBwb3dlciBieSBtYWtpbmcgdGhlaXIgd2F5IHRvIGl0IHRocm91Z2ggc3VjaCBjcmltZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHByZWNpc2VseSB3aGF0IHRoZSBwYXJ0aXNhbnMgb2YgUG9tcGV5IGZlYXJlZCwgYW5kIHNvIHRoZXkgc2V0IGFuIGFtYnVzaCBmb3IgRG9taXRpdXMgYXMgaGUgd2FzIGdvaW5nIGRvd24gYXQgZWFybHkgbW9ybmluZyBieSB0b3JjaGxpZ2h0IGludG8gdGhlIENhbXB1cyBNYXJ0aXVzLiBGaXJzdCBvZiBhbGwgdGhlIHRvcmNoLWJlYXJlciB3aG8gc3Rvb2QgaW4gZnJvbnQgb2YgRG9taXRpdXMgd2FzIHNtaXR0ZW4sIGZlbGwsIGFuZCBkaWVkOyBhbmQgYWZ0ZXIgaGltIHRoZSByZXN0IG9mIHRoZSBwYXJ0eSB3ZXJlIHByZXNlbnRseSB3b3VuZGVkLCBhbmQgYWxsIHRvb2sgdG8gZmxpZ2h0IGV4Y2VwdCBDYXRvIGFuZCBEb21pdGl1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['41.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBDYXRvIGhlbGQgRG9taXRpdXMgYmFjaywgYWx0aG91Z2ggaGUgaGltc2VsZiBoYWQgcmVjZWl2ZWQgYSB3b3VuZCBpbiB0aGUgYXJtLCBhbmQgZXhob3J0ZWQgaGltIHRvIHN0YW5kIGhpcyBncm91bmQsIGFuZCBub3QgdG8gYWJhbmRvbiwgd2hpbGUgdGhleSBoYWQgYnJlYXRoLCB0aGUgc3RydWdnbGUgaW4gYmVoYWxmIG9mIGxpYmVydHkgd2hpY2ggdGhleSB3ZXJlIHdhZ2luZyBhZ2FpbnN0IHRoZSB0eXJhbnRzLCB3aG8gc2hvd2VkIHBsYWlubHkgaG93IHRoZXkgd291bGQgdXNlIHRoZSBjb25zdWxhciBwb3dlciBieSBtYWtpbmcgdGhlaXIgd2F5IHRvIGl0IHRocm91Z2ggc3VjaCBjcmltZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBEb21pdGl1cyB3b3VsZCBub3QgZmFjZSB0aGUgcGVyaWwsIGFuZCBmbGVkIHRvIGhpcyBob3VzZSBmb3IgcmVmdWdlLCB3aGVyZXVwb24gUG9tcGV5IGFuZCBDcmFzc3VzIHdlcmUgZWxlY3RlZCBjb25zdWxzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciA1NSBCLkMuPC9ub3RlPiBDYXRvLCBob3dldmVyLCB3b3VsZCBub3QgZ2l2ZSB1cCB0aGUgZmlnaHQsIGJ1dCBjYW1lIGZvcndhcmQgaGltc2VsZiBhcyBjYW5kaWRhdGUgZm9yIGEgcHJhZXRvcnNoaXAsIHdpc2hpbmcgdG8gaGF2ZSBhIHZhbnRhZ2UtcG9pbnQgZm9yIGhpcyBzdHJ1Z2dsZXMgYWdhaW5zdCB0aGUgbWVuLCBhbmQgbm90IHRvIGJlIGEgcHJpdmF0ZSBjaXRpemVuIHdoZW4gaGUgd2FzIG9wcG9zaW5nIG1hZ2lzdHJhdGVzLiBCdXQgUG9tcGV5IGFuZCBDcmFzc3VzIGZlYXJlZCB0aGlzIGFsc28sIGZlZWxpbmcgdGhhdCBDYXRvIHdvdWxkIG1ha2UgdGhlIHByYWV0b3JzaGlwIGEgbWF0Y2ggZm9yIHRoZSBjb25zdWxzaGlwLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsIHRoZXJlZm9yZSwgdGhleSBzdWRkZW5seSwgYW5kIHdpdGhvdXQgdGhlIGtub3dsZWRnZSBvZiB0aGUgbWFqb3JpdHksIGdvdCB0aGUgc2VuYXRlIHRvZ2V0aGVyLCBhbmQgaGFkIGEgdm90ZSBwYXNzZWQgdGhhdCB0aGUgcHJhZXRvcnMgZWxlY3Qgc2hvdWxkIGVudGVyIHVwb24gdGhlaXIgb2ZmaWNlIGF0IG9uY2UsIHdpdGhvdXQgd2FpdGluZyBmb3IgdGhlIHRpbWUgcHJlc2NyaWJlZCBieSBsYXcgdG8gZWxhcHNlLCBkdXJpbmcgd2hpY2ggdGltZSB0aG9zZSB3aG8gaGFkIGJyaWJlZCB0aGUgcGVvcGxlIHdlcmUgbGlhYmxlIHRvIHByb3NlY3V0aW9uLiBJbiB0aGUgbmV4dCBwbGFjZSwgbm93IHRoYXQgYnkgdGhpcyB2b3RlIHRoZXkgaGFkIGZyZWVkIGJyaWJlcnkgZnJvbSByZXNwb25zaWJpbGl0eSwgdGhleSBicm91Z2h0IGZvcndhcmQgaGVuY2htZW4gYW5kIGZyaWVuZHMgb2YgdGhlaXIgb3duIGFzIGNhbmRpZGF0ZXMgZm9yIHRoZSBwcmFldG9yc2hpcCwgdGhlbXNlbHZlcyBvZmZlcmluZyBtb25leSBmb3Igdm90ZXMsIGFuZCB0aGVtc2VsdmVzIHN0YW5kaW5nIGJ5IHdoZW4gdGhlIHZvdGVzIHdlcmUgY2FzdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGV2ZW4gdG8gdGhlc2UgbWVhc3VyZXMgdGhlIHZpcnR1ZSBhbmQgZmFtZSBvZiBDYXRvIHdlcmUgc3VwZXJpb3IsIHNpbmNlIHNoYW1lIG1hZGUgbW9zdCBvZiB0aGUgcGVvcGxlIHRoaW5rIGl0IGEgdGVycmlibGUgdGhpbmcgdG8gc2VsbCBDYXRvIGJ5IHRoZWlyIHZvdGVzLCB3aGVuIHRoZSBjaXR5IG1pZ2h0IHdlbGwgYnV5IGhpbSBpbnRvIHRoZSBwcmFldG9yc2hpcDsgYW5kIHRoZXJlZm9yZSB0aGUgZmlyc3QgdHJpYmUgY2FsbGVkIHVwb24gdm90ZWQgZm9yIGhpbS4gVGhlbiBvbiBhIHN1ZGRlbiBQb21wZXkgbHlpbmdseSBkZWNsYXJlZCB0aGF0IGhlIGhlYXJkIHRodW5kZXIsIGFuZCBtb3N0IHNoYW1lZnVsbHkgZGlzc29sdmVkIHRoZSBhc3NlbWJseSwgc2luY2UgaXQgd2FzIGN1c3RvbWFyeSB0byByZWdhcmQgc3VjaCB0aGluZ3MgYXMgaW5hdXNwaWNpb3VzLCBhbmQgbm90IHRvIHJhdGlmeSBhbnl0aGluZyBhZnRlciBhIHNpZ24gZnJvbSBoZWF2ZW4gaGFkIGJlZW4gZ2l2ZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhleSByZXNvcnRlZCBhZ2FpbiB0byBleHRlbnNpdmUgYnJpYmVyeSwgZWplY3RlZCB0aGUgYmVzdCBjaXRpemVucyBmcm9tIHRoZSBDYW1wdXMgTWFydGl1cywgYW5kIHNvIGJ5IGZvcmNlIGdvdCBWYXRpbml1cyBlbGVjdGVkIHByYWV0b3IgaW5zdGVhZCBvZiBDYXRvLiBUaGVuLCBpbmRlZWQsIGl0IGlzIHNhaWQsIHRob3NlIHdobyBoYWQgdGh1cyBpbGxlZ2FsbHkgYW5kIHdyb25nZnVsbHkgY2FzdCB0aGVpciB2b3RlcyB3ZW50IG9mZiBob21lIGF0IG9uY2UgbGlrZSBydW5hd2F5cywgd2hpbGUgdGhlIHJlc3Qgb2YgdGhlIGNpdGl6ZW5zLCB3aG8gd2VyZSBiYW5kaW5nIHRvZ2V0aGVyIGFuZCBleHByZXNzaW5nIHRoZWlyIGluZGlnbmF0aW9uLCB3ZXJlIGZvcm1lZCBpbnRvIGFuIGFzc2VtYmx5IHRoZXJlIGJ5IGEgdHJpYnVuZSwgYW5kIHdlcmUgYWRkcmVzc2VkIGJ5IENhdG8uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIGlmIGluc3BpcmVkIGZyb20gaGVhdmVuIGhlIGZvcmV0b2xkIHRvIHRoZSBjaXRpemVucyBhbGwgdGhhdCB3b3VsZCBoYXBwZW4gdG8gdGhlaXIgY2l0eSwgYW5kIHRyaWVkIHRvIHNldCB0aGVtIGFnYWluc3QgUG9tcGV5IGFuZCBDcmFzc3VzLCB3aG8sIGhlIHNhaWQsIHdlcmUgcHJpdnkgdG8gc3VjaCBhIGNvdXJzZSBhbmQgZW5nYWdlZCBpbiBzdWNoIGEgcG9saWN5IGFzIG1hZGUgdGhlbSBhZnJhaWQgb2YgQ2F0bywgbGVzdCwgYXMgcHJhZXRvciwgaGUgc2hvdWxkIGdldCB0aGUgYmV0dGVyIG9mIHRoZW0uIEFuZCBmaW5hbGx5LCB3aGVuIGhlIHdlbnQgYXdheSBob21lLCBoZSB3YXMgZXNjb3J0ZWQgb24gaGlzIHdheSBieSBhIGdyZWF0ZXIgdGhyb25nIHRoYW4gYWNjb21wYW5pZWQgYWxsIHRoZSBlbGVjdGVkIHByYWV0b3JzIHRvZ2V0aGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IERvbWl0aXVzIHdvdWxkIG5vdCBmYWNlIHRoZSBwZXJpbCwgYW5kIGZsZWQgdG8gaGlzIGhvdXNlIGZvciByZWZ1Z2UsIHdoZXJldXBvbiBQb21wZXkgYW5kIENyYXNzdXMgd2VyZSBlbGVjdGVkIGNvbnN1bHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gb3IgdGhlIHllYXIgNTUgQi5DLjwvbm90ZT4gQ2F0bywgaG93ZXZlciwgd291bGQgbm90IGdpdmUgdXAgdGhlIGZpZ2h0LCBidXQgY2FtZSBmb3J3YXJkIGhpbXNlbGYgYXMgY2FuZGlkYXRlIGZvciBhIHByYWV0b3JzaGlwLCB3aXNoaW5nIHRvIGhhdmUgYSB2YW50YWdlLXBvaW50IGZvciBoaXMgc3RydWdnbGVzIGFnYWluc3QgdGhlIG1lbiwgYW5kIG5vdCB0byBiZSBhIHByaXZhdGUgY2l0aXplbiB3aGVuIGhlIHdhcyBvcHBvc2luZyBtYWdpc3RyYXRlcy4gQnV0IFBvbXBleSBhbmQgQ3Jhc3N1cyBmZWFyZWQgdGhpcyBhbHNvLCBmZWVsaW5nIHRoYXQgQ2F0byB3b3VsZCBtYWtlIHRoZSBwcmFldG9yc2hpcCBhIG1hdGNoIGZvciB0aGUgY29uc3Vsc2hpcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBmaXJzdCBwbGFjZSwgdGhlcmVmb3JlLCB0aGV5IHN1ZGRlbmx5LCBhbmQgd2l0aG91dCB0aGUga25vd2xlZGdlIG9mIHRoZSBtYWpvcml0eSwgZ290IHRoZSBzZW5hdGUgdG9nZXRoZXIsIGFuZCBoYWQgYSB2b3RlIHBhc3NlZCB0aGF0IHRoZSBwcmFldG9ycyBlbGVjdCBzaG91bGQgZW50ZXIgdXBvbiB0aGVpciBvZmZpY2UgYXQgb25jZSwgd2l0aG91dCB3YWl0aW5nIGZvciB0aGUgdGltZSBwcmVzY3JpYmVkIGJ5IGxhdyB0byBlbGFwc2UsIGR1cmluZyB3aGljaCB0aW1lIHRob3NlIHdobyBoYWQgYnJpYmVkIHRoZSBwZW9wbGUgd2VyZSBsaWFibGUgdG8gcHJvc2VjdXRpb24uIEluIHRoZSBuZXh0IHBsYWNlLCBub3cgdGhhdCBieSB0aGlzIHZvdGUgdGhleSBoYWQgZnJlZWQgYnJpYmVyeSBmcm9tIHJlc3BvbnNpYmlsaXR5LCB0aGV5IGJyb3VnaHQgZm9yd2FyZCBoZW5jaG1lbiBhbmQgZnJpZW5kcyBvZiB0aGVpciBvd24gYXMgY2FuZGlkYXRlcyBmb3IgdGhlIHByYWV0b3JzaGlwLCB0aGVtc2VsdmVzIG9mZmVyaW5nIG1vbmV5IGZvciB2b3RlcywgYW5kIHRoZW1zZWx2ZXMgc3RhbmRpbmcgYnkgd2hlbiB0aGUgdm90ZXMgd2VyZSBjYXN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBldmVuIHRvIHRoZXNlIG1lYXN1cmVzIHRoZSB2aXJ0dWUgYW5kIGZhbWUgb2YgQ2F0byB3ZXJlIHN1cGVyaW9yLCBzaW5jZSBzaGFtZSBtYWRlIG1vc3Qgb2YgdGhlIHBlb3BsZSB0aGluayBpdCBhIHRlcnJpYmxlIHRoaW5nIHRvIHNlbGwgQ2F0byBieSB0aGVpciB2b3Rlcywgd2hlbiB0aGUgY2l0eSBtaWdodCB3ZWxsIGJ1eSBoaW0gaW50byB0aGUgcHJhZXRvcnNoaXA7IGFuZCB0aGVyZWZvcmUgdGhlIGZpcnN0IHRyaWJlIGNhbGxlZCB1cG9uIHZvdGVkIGZvciBoaW0uIFRoZW4gb24gYSBzdWRkZW4gUG9tcGV5IGx5aW5nbHkgZGVjbGFyZWQgdGhhdCBoZSBoZWFyZCB0aHVuZGVyLCBhbmQgbW9zdCBzaGFtZWZ1bGx5IGRpc3NvbHZlZCB0aGUgYXNzZW1ibHksIHNpbmNlIGl0IHdhcyBjdXN0b21hcnkgdG8gcmVnYXJkIHN1Y2ggdGhpbmdzIGFzIGluYXVzcGljaW91cywgYW5kIG5vdCB0byByYXRpZnkgYW55dGhpbmcgYWZ0ZXIgYSBzaWduIGZyb20gaGVhdmVuIGhhZCBiZWVuIGdpdmVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhleSByZXNvcnRlZCBhZ2FpbiB0byBleHRlbnNpdmUgYnJpYmVyeSwgZWplY3RlZCB0aGUgYmVzdCBjaXRpemVucyBmcm9tIHRoZSBDYW1wdXMgTWFydGl1cywgYW5kIHNvIGJ5IGZvcmNlIGdvdCBWYXRpbml1cyBlbGVjdGVkIHByYWV0b3IgaW5zdGVhZCBvZiBDYXRvLiBUaGVuLCBpbmRlZWQsIGl0IGlzIHNhaWQsIHRob3NlIHdobyBoYWQgdGh1cyBpbGxlZ2FsbHkgYW5kIHdyb25nZnVsbHkgY2FzdCB0aGVpciB2b3RlcyB3ZW50IG9mZiBob21lIGF0IG9uY2UgbGlrZSBydW5hd2F5cywgd2hpbGUgdGhlIHJlc3Qgb2YgdGhlIGNpdGl6ZW5zLCB3aG8gd2VyZSBiYW5kaW5nIHRvZ2V0aGVyIGFuZCBleHByZXNzaW5nIHRoZWlyIGluZGlnbmF0aW9uLCB3ZXJlIGZvcm1lZCBpbnRvIGFuIGFzc2VtYmx5IHRoZXJlIGJ5IGEgdHJpYnVuZSwgYW5kIHdlcmUgYWRkcmVzc2VkIGJ5IENhdG8uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['42.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIGlmIGluc3BpcmVkIGZyb20gaGVhdmVuIGhlIGZvcmV0b2xkIHRvIHRoZSBjaXRpemVucyBhbGwgdGhhdCB3b3VsZCBoYXBwZW4gdG8gdGhlaXIgY2l0eSwgYW5kIHRyaWVkIHRvIHNldCB0aGVtIGFnYWluc3QgUG9tcGV5IGFuZCBDcmFzc3VzLCB3aG8sIGhlIHNhaWQsIHdlcmUgcHJpdnkgdG8gc3VjaCBhIGNvdXJzZSBhbmQgZW5nYWdlZCBpbiBzdWNoIGEgcG9saWN5IGFzIG1hZGUgdGhlbSBhZnJhaWQgb2YgQ2F0bywgbGVzdCwgYXMgcHJhZXRvciwgaGUgc2hvdWxkIGdldCB0aGUgYmV0dGVyIG9mIHRoZW0uIEFuZCBmaW5hbGx5LCB3aGVuIGhlIHdlbnQgYXdheSBob21lLCBoZSB3YXMgZXNjb3J0ZWQgb24gaGlzIHdheSBieSBhIGdyZWF0ZXIgdGhyb25nIHRoYW4gYWNjb21wYW5pZWQgYWxsIHRoZSBlbGVjdGVkIHByYWV0b3JzIHRvZ2V0aGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IENhaXVzIFRyZWJvbml1cyBwcm9wb3NlZCBhIGxhdyBmb3IgdGhlIGFzc2lnbm1lbnQgb2YgcHJvdmluY2VzIHRvIHRoZSBjb25zdWxzLCB3aGVyZWJ5IG9uZSBvZiB0aGVtIHdhcyB0byBoYXZlIFNwYWluIGFuZCBBZnJpY2EgdW5kZXIgaGltLCB0aGUgb3RoZXIgU3lyaWEgYW5kIEVneXB0LCBhbmQgYm90aCB3ZXJlIHRvIHdhZ2Ugd2FyIG9uIHdob20gdGhleSBwbGVhc2VkLCBhbmQgYXR0YWNrIGFuZCBzdWJkdWUgdGhlbSB3aXRoIGxhbmQgYW5kIHNlYSBmb3JjZXMuIFRoZSByZXN0IG9mIHRoZSBvcHBvc2l0aW9uIHdlcmUgd2Vhcnkgb2YgdGhlaXIgZWZmb3J0cyB0byBwcmV2ZW50IHN1Y2ggdGhpbmdzLCBhbmQgZm9yYm9yZSBldmVuIHRvIHNwZWFrIGFnYWluc3QgdGhlIG1lYXN1cmU7IGJ1dCBDYXRvIG1vdW50ZWQgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5yb3N0cmE8L2ZvcmVpZ24+IGJlZm9yZSB0aGUgdm90ZSB3YXMgdGFrZW4sIGV4cHJlc3NlZCBhIHdpc2ggdG8gc3BlYWssIHdpdGggZGlmZmljdWx0eSBnYWluZWQgcGVybWlzc2lvbiwgYW5kIHNwb2tlIGZvciB0d28gaG91cnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhlIGhhZCBjb25zdW1lZCB0aGlzIHRpbWUgaW4gbG9uZyBhcmd1bWVudHMsIGV4cG9zaXRpb25zLCBhbmQgcHJvcGhlY2llcywgaGUgd2FzIG5vdCBhbGxvd2VkIHRvIHNwZWFrIGFueSBsb25nZXIsIGJ1dCBhbiBvZmZpY2lhbCB3ZW50IHVwIHRvIGhpbSBhcyBoZSBzb3VnaHQgdG8gY29udGludWUsIGFuZCBwdWxsZWQgaGltIGRvd24gZnJvbSB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPnJvc3RyYTwvZm9yZWlnbj4uIEJ1dCBldmVuIGZyb20gd2hlcmUgaGUgc3Rvb2QgYmVsb3cgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5yb3N0cmE8L2ZvcmVpZ24+IGhlIGtlcHQgc2hvdXRpbmcsIGFuZCBmb3VuZCBtZW4gdG8gbGlzdGVuIHRvIGhpbSBhbmQgc2hhcmUgaGlzIGluZGlnbmF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0aGUgb2ZmaWNpYWwgb25jZSBtb3JlIGxhaWQgaGFuZHMgb24gaGltLCBsZWQgaGltIGF3YXksIGFuZCBwdXQgaGltIG91dCBvZiB0aGUgZm9ydW0uIFRoZW4sIHRoZSBpbnN0YW50IHRoYXQgaGUgd2FzIHJlbGVhc2VkLCBoZSB0dXJuZWQgYmFjayBhbmQgc3Ryb3ZlIHRvIHJlYWNoIHRoZSA8Zm9yZWlnbiBsYW5nPSJsYSI+cm9zdHJhPC9mb3JlaWduPiwgc2hvdXRpbmcsIGFuZCBjb21tYW5kaW5nIHRoZSBjaXRpemVucyB0byBoZWxwIGhpbS4gVGhpcyB3YXMgcmVwZWF0ZWQgc2V2ZXJhbCB0aW1lcywgdW50aWwgVHJlYm9uaXVzLCBpbiBhIHBhc3Npb24sIG9yZGVyZWQgaGltIHRvIGJlIGxlZCB0byBwcmlzb247IGJ1dCBhIGNyb3dkIGZvbGxvd2VkIGxpc3RlbmluZyB0byB3aGF0IGhlIHNhaWQgYXMgaGUgd2VudCBhbG9uZywgc28gdGhhdCBUcmVib25pdXMgdG9vayBmcmlnaHQgYW5kIGxldCBoaW0gZ28uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['43.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBDYWl1cyBUcmVib25pdXMgcHJvcG9zZWQgYSBsYXcgZm9yIHRoZSBhc3NpZ25tZW50IG9mIHByb3ZpbmNlcyB0byB0aGUgY29uc3Vscywgd2hlcmVieSBvbmUgb2YgdGhlbSB3YXMgdG8gaGF2ZSBTcGFpbiBhbmQgQWZyaWNhIHVuZGVyIGhpbSwgdGhlIG90aGVyIFN5cmlhIGFuZCBFZ3lwdCwgYW5kIGJvdGggd2VyZSB0byB3YWdlIHdhciBvbiB3aG9tIHRoZXkgcGxlYXNlZCwgYW5kIGF0dGFjayBhbmQgc3ViZHVlIHRoZW0gd2l0aCBsYW5kIGFuZCBzZWEgZm9yY2VzLiBUaGUgcmVzdCBvZiB0aGUgb3Bwb3NpdGlvbiB3ZXJlIHdlYXJ5IG9mIHRoZWlyIGVmZm9ydHMgdG8gcHJldmVudCBzdWNoIHRoaW5ncywgYW5kIGZvcmJvcmUgZXZlbiB0byBzcGVhayBhZ2FpbnN0IHRoZSBtZWFzdXJlOyBidXQgQ2F0byBtb3VudGVkIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5yb3N0cmE8L2ZvcmVpZ24+IGJlZm9yZSB0aGUgdm90ZSB3YXMgdGFrZW4sIGV4cHJlc3NlZCBhIHdpc2ggdG8gc3BlYWssIHdpdGggZGlmZmljdWx0eSBnYWluZWQgcGVybWlzc2lvbiwgYW5kIHNwb2tlIGZvciB0d28gaG91cnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhlIGhhZCBjb25zdW1lZCB0aGlzIHRpbWUgaW4gbG9uZyBhcmd1bWVudHMsIGV4cG9zaXRpb25zLCBhbmQgcHJvcGhlY2llcywgaGUgd2FzIG5vdCBhbGxvd2VkIHRvIHNwZWFrIGFueSBsb25nZXIsIGJ1dCBhbiBvZmZpY2lhbCB3ZW50IHVwIHRvIGhpbSBhcyBoZSBzb3VnaHQgdG8gY29udGludWUsIGFuZCBwdWxsZWQgaGltIGRvd24gZnJvbSB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cm9zdHJhPC9mb3JlaWduPi4gQnV0IGV2ZW4gZnJvbSB3aGVyZSBoZSBzdG9vZCBiZWxvdyB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cm9zdHJhPC9mb3JlaWduPiBoZSBrZXB0IHNob3V0aW5nLCBhbmQgZm91bmQgbWVuIHRvIGxpc3RlbiB0byBoaW0gYW5kIHNoYXJlIGhpcyBpbmRpZ25hdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['43.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZSBvZmZpY2lhbCBvbmNlIG1vcmUgbGFpZCBoYW5kcyBvbiBoaW0sIGxlZCBoaW0gYXdheSwgYW5kIHB1dCBoaW0gb3V0IG9mIHRoZSBmb3J1bS4gVGhlbiwgdGhlIGluc3RhbnQgdGhhdCBoZSB3YXMgcmVsZWFzZWQsIGhlIHR1cm5lZCBiYWNrIGFuZCBzdHJvdmUgdG8gcmVhY2ggdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnJvc3RyYTwvZm9yZWlnbj4sIHNob3V0aW5nLCBhbmQgY29tbWFuZGluZyB0aGUgY2l0aXplbnMgdG8gaGVscCBoaW0uIFRoaXMgd2FzIHJlcGVhdGVkIHNldmVyYWwgdGltZXMsIHVudGlsIFRyZWJvbml1cywgaW4gYSBwYXNzaW9uLCBvcmRlcmVkIGhpbSB0byBiZSBsZWQgdG8gcHJpc29uOyBidXQgYSBjcm93ZCBmb2xsb3dlZCBsaXN0ZW5pbmcgdG8gd2hhdCBoZSBzYWlkIGFzIGhlIHdlbnQgYWxvbmcsIHNvIHRoYXQgVHJlYm9uaXVzIHRvb2sgZnJpZ2h0IGFuZCBsZXQgaGltIGdvLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIG1hbm5lciBDYXRvIGNvbnN1bWVkIHRoYXQgZGF5OyBidXQgZHVyaW5nIHRoZSBkYXlzIHRoYXQgZm9sbG93ZWQgaGlzIGFkdmVyc2FyaWVzIGludGltaWRhdGVkIHNvbWUgb2YgdGhlIGNpdGl6ZW5zLCB3b24gb3ZlciBvdGhlcnMgYnkgYnJpYmVzIGFuZCBmYXZvdXJzLCB3aXRoIGFybWVkIG1lbiBwcmV2ZW50ZWQgb25lIG9mIHRoZSB0cmlidW5lcywgQXF1aWxsaXVzLCBmcm9tIGxlYXZpbmcgdGhlIHNlbmF0ZS1jaGFtYmVyLCBjYXN0IENhdG8gaGltc2VsZiBvdXQgb2YgdGhlIGZvcnVtIHdoZW4gaGUgY3JpZWQgb3V0IHRoYXQgdGhlcmUgaGFkIGJlZW4gdGh1bmRlciwgYW5kIGFmdGVyIGEgZmV3IG9mIHRoZSBjaXRpemVucyBoYWQgYmVlbiB3b3VuZGVkIGFuZCBzb21lIGFjdHVhbGx5IHNsYWluLCBmb3JjZWQgdGhlIHBhc3NhZ2Ugb2YgdGhlIGxhdy4gQ29uc2VxdWVudGx5LCBtYW55IGJhbmRlZCB0b2dldGhlciBhbmQgd3JhdGhmdWxseSBwZWx0ZWQgdGhlIHN0YXR1ZXMgb2YgUG9tcGV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2F0byBjYW1lIHVwIGFuZCBzdG9wcGVkIHRoaXMuIEhvd2V2ZXIsIHdoZW4gb25jZSBtb3JlIGEgbGF3IHdhcyBpbnRyb2R1Y2VkIGNvbmNlcm5pbmcgQ2Flc2FyJ3MgcHJvdmluY2VzIGFuZCBhcm1pZXMsIENhdG8gbm8gbG9uZ2VyIGFkZHJlc3NlZCBoaW1zZWxmIHRvIHRoZSBwZW9wbGUsIGJ1dCB0byBQb21wZXkgaGltc2VsZiwgc29sZW1ubHkgYXNzdXJpbmcgYW5kIHdhcm5pbmcgaGltIHRoYXQgaGUgd2FzIG5vdywgd2l0aG91dCBrbm93aW5nIGl0LCB0YWtpbmcgQ2Flc2FyIHVwb24gaGlzIG93biBzaG91bGRlcnMsIGFuZCB0aGF0IHdoZW4gaGUgYmVnYW4gdG8gZmVlbCB0aGUgYnVyZGVuIGFuZCB0byBiZSBvdmVyY29tZSBieSBpdCwgaGUgd291bGQgbmVpdGhlciBoYXZlIHRoZSBwb3dlciB0byBwdXQgaXQgYXdheSBub3IgdGhlIHN0cmVuZ3RoIHRvIGJlYXIgaXQgbG9uZ2VyLCBhbmQgd291bGQgdGhlcmVmb3JlIHByZWNpcGl0YXRlIGhpbXNlbGYsIGJ1cmRlbiBhbmQgYWxsLCB1cG9uIHRoZSBjaXR5OyAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz50aGVuIGhlIHdvdWxkIGNhbGwgdG8gbWluZCB0aGUgZXhob3J0YXRpb25zIG9mIENhdG8sIGFuZCBzZWUgdGhhdCB0aGV5IGhhZCBzb3VnaHQgbm8gbGVzcyB0aGUgaW50ZXJlc3RzIG9mIFBvbXBleSB0aGFuIGhvbm91ciBhbmQganVzdGljZS4gUG9tcGV5IGhlYXJkIHRoZXNlIGNvdW5zZWxzIHJlcGVhdGVkbHksIGJ1dCBpZ25vcmVkIGFuZCBwdXQgdGhlbSBieTsgaGUgZGlkIG5vdCBiZWxpZXZlIHRoYXQgQ2Flc2FyIHdvdWxkIGNoYW5nZSwgYmVjYXVzZSBoZSB0cnVzdGVkIGluIGhpcyBvd24gZ29vZCBmb3J0dW5lIGFuZCBwb3dlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['43.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgbWFubmVyIENhdG8gY29uc3VtZWQgdGhhdCBkYXk7IGJ1dCBkdXJpbmcgdGhlIGRheXMgdGhhdCBmb2xsb3dlZCBoaXMgYWR2ZXJzYXJpZXMgaW50aW1pZGF0ZWQgc29tZSBvZiB0aGUgY2l0aXplbnMsIHdvbiBvdmVyIG90aGVycyBieSBicmliZXMgYW5kIGZhdm91cnMsIHdpdGggYXJtZWQgbWVuIHByZXZlbnRlZCBvbmUgb2YgdGhlIHRyaWJ1bmVzLCBBcXVpbGxpdXMsIGZyb20gbGVhdmluZyB0aGUgc2VuYXRlLWNoYW1iZXIsIGNhc3QgQ2F0byBoaW1zZWxmIG91dCBvZiB0aGUgZm9ydW0gd2hlbiBoZSBjcmllZCBvdXQgdGhhdCB0aGVyZSBoYWQgYmVlbiB0aHVuZGVyLCBhbmQgYWZ0ZXIgYSBmZXcgb2YgdGhlIGNpdGl6ZW5zIGhhZCBiZWVuIHdvdW5kZWQgYW5kIHNvbWUgYWN0dWFsbHkgc2xhaW4sIGZvcmNlZCB0aGUgcGFzc2FnZSBvZiB0aGUgbGF3LiBDb25zZXF1ZW50bHksIG1hbnkgYmFuZGVkIHRvZ2V0aGVyIGFuZCB3cmF0aGZ1bGx5IHBlbHRlZCB0aGUgc3RhdHVlcyBvZiBQb21wZXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvIGNhbWUgdXAgYW5kIHN0b3BwZWQgdGhpcy4gSG93ZXZlciwgd2hlbiBvbmNlIG1vcmUgYSBsYXcgd2FzIGludHJvZHVjZWQgY29uY2VybmluZyBDYWVzYXIncyBwcm92aW5jZXMgYW5kIGFybWllcywgQ2F0byBubyBsb25nZXIgYWRkcmVzc2VkIGhpbXNlbGYgdG8gdGhlIHBlb3BsZSwgYnV0IHRvIFBvbXBleSBoaW1zZWxmLCBzb2xlbW5seSBhc3N1cmluZyBhbmQgd2FybmluZyBoaW0gdGhhdCBoZSB3YXMgbm93LCB3aXRob3V0IGtub3dpbmcgaXQsIHRha2luZyBDYWVzYXIgdXBvbiBoaXMgb3duIHNob3VsZGVycywgYW5kIHRoYXQgd2hlbiBoZSBiZWdhbiB0byBmZWVsIHRoZSBidXJkZW4gYW5kIHRvIGJlIG92ZXJjb21lIGJ5IGl0LCBoZSB3b3VsZCBuZWl0aGVyIGhhdmUgdGhlIHBvd2VyIHRvIHB1dCBpdCBhd2F5IG5vciB0aGUgc3RyZW5ndGggdG8gYmVhciBpdCBsb25nZXIsIGFuZCB3b3VsZCB0aGVyZWZvcmUgcHJlY2lwaXRhdGUgaGltc2VsZiwgYnVyZGVuIGFuZCBhbGwsIHVwb24gdGhlIGNpdHk7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnRoZW4gaGUgd291bGQgY2FsbCB0byBtaW5kIHRoZSBleGhvcnRhdGlvbnMgb2YgQ2F0bywgYW5kIHNlZSB0aGF0IHRoZXkgaGFkIHNvdWdodCBubyBsZXNzIHRoZSBpbnRlcmVzdHMgb2YgUG9tcGV5IHRoYW4gaG9ub3VyIGFuZCBqdXN0aWNlLiBQb21wZXkgaGVhcmQgdGhlc2UgY291bnNlbHMgcmVwZWF0ZWRseSwgYnV0IGlnbm9yZWQgYW5kIHB1dCB0aGVtIGJ5OyBoZSBkaWQgbm90IGJlbGlldmUgdGhhdCBDYWVzYXIgd291bGQgY2hhbmdlLCBiZWNhdXNlIGhlIHRydXN0ZWQgaW4gaGlzIG93biBnb29kIGZvcnR1bmUgYW5kIHBvd2VyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIG5leHQgeWVhcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjU0IEIuQy48L25vdGU+IENhdG8gd2FzIGVsZWN0ZWQgcHJhZXRvciwgYnV0IGl0IHdhcyB0aG91Z2h0IHRoYXQgaGUgZGlkIG5vdCBhZGQgc28gbXVjaCBtYWplc3R5IGFuZCBkaWduaXR5IHRvIHRoZSBvZmZpY2UgYnkgYSBnb29kIGFkbWluaXN0cmF0aW9uIGFzIGhlIHRvb2sgYXdheSBmcm9tIGl0IGJ5IGRpc2dyYWNpbmcgaXQuIEZvciBoZSB3b3VsZCBvZnRlbiBnbyBmb3J0aCB0byBoaXMgdHJpYnVuYWwgd2l0aG91dCBzaG9lcyBvciB0dW5pYywgYW5kIGluIHN1Y2ggYXR0aXJlIHdvdWxkIHByZXNpZGUgb3ZlciBjYXBpdGFsIGNhc2VzIGludm9sdmluZyBwcm9taW5lbnQgbWVuLiBTb21lIHNheSwgdG9vLCB0aGF0IGV2ZW4gYWZ0ZXIgdGhlIG1pZC1kYXkgbWVhbCBhbmQgd2hlbiBoZSBoYWQgZHJ1bmsgd2luZSwgaGUgd291bGQgdHJhbnNhY3QgcHVibGljIGJ1c2luZXNzOyBidXQgdGhpcyBpcyB1bnRydXRoZnVsbHkgc2FpZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgc2VlaW5nIHRoYXQgdGhlIHBlb3BsZSB3ZXJlIGNvcnJ1cHRlZCBieSB0aGUgZ2lmdHMgd2hpY2ggdGhleSByZWNlaXZlZCBmcm9tIG1lbiB3aG8gd2VyZSBmb25kIG9mIG9mZmljZSBhbmQgcGxpZWQgdGhlIGJyaWJlcnkgb2YgdGhlIG1hc3NlcyBhcyB0aGV5IHdvdWxkIGFuIG9yZGluYXJ5IGJ1c2luZXNzLCBoZSB3aXNoZWQgdG8gZXJhZGljYXRlIGFsdG9nZXRoZXIgdGhpcyBkaXNlYXNlIGZyb20gdGhlIHN0YXRlLCBhbmQgdGhlcmVmb3JlIHBlcnN1YWRlZCB0aGUgc2VuYXRlIHRvIG1ha2UgYSBkZWNyZWUgdGhhdCBtYWdpc3RyYXRlcyBlbGVjdCwgaW4gY2FzZSB0aGV5IGhhZCBubyBhY2N1c2VyLCBzaG91bGQgYmUgY29tcGVsbGVkIG9mIHRoZW1zZWx2ZXMgdG8gY29tZSBiZWZvcmUgYSBzd29ybiBjb3VydCBhbmQgc3VibWl0IGFjY291bnRzIG9mIHRoZWlyIGVsZWN0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRoZSBjYW5kaWRhdGVzIGZvciBvZmZpY2VzIHdlcmUgc29yZWx5IGRpc3BsZWFzZWQsIGFuZCBzdGlsbCBtb3JlIHNvcmVseSB0aGUgaGlyZWxpbmcgbXVsdGl0dWRlLiBFYXJseSBpbiB0aGUgbW9ybmluZywgdGhlcmVmb3JlLCB3aGVuIENhdG8gaGFkIGdvbmUgZm9ydGggdG8gaGlzIHRyaWJ1bmFsLCBjcm93ZHMgYXNzYWlsZWQgaGltIHdpdGggc2hvdXRzLCBhYnVzZSwgYW5kIG1pc3NpbGVzLCBzbyB0aGF0IGV2ZXJ5Ym9keSBmbGVkIGZyb20gdGhlIHRyaWJ1bmFsLCBhbmQgQ2F0byBoaW1zZWxmIHdhcyBwdXNoZWQgYXdheSBmcm9tIGl0IGFuZCBib3JuZSBhbG9uZyBieSB0aGUgdGhyb25nLCBhbmQgd2l0aCBkaWZmaWN1bHR5IHN1Y2NlZWRlZCBpbiBsYXlpbmcgaG9sZCBvZiB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPnJvc3RyYTwvZm9yZWlnbj4uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlLCByaXNpbmcgdG8gaGlzIGZlZXQsIGJ5IHRoZSBmaXJtbmVzcyBhbmQgYm9sZG5lc3Mgb2YgaGlzIGRlbWVhbm91ciBoZSBhdCBvbmNlIHByZXZhaWxlZCBvdmVyIHRoZSBkaW4sIHN0b3BwZWQgdGhlIHNob3V0aW5nLCBhbmQgYWZ0ZXIgc2F5aW5nIHdoYXQgd2FzIGZpdHRpbmcgYW5kIGJlaW5nIGxpc3RlbmVkIHRvIHF1aWV0bHksIGJyb3VnaHQgdGhlIGRpc3R1cmJhbmNlIGNvbXBsZXRlbHkgdG8gYW4gZW5kLiBXaGVuIHRoZSBzZW5hdGUgd2FzIHByYWlzaW5nIGhpbSBmb3IgdGhpcywgaGUgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgSSBjYW5ub3QgcHJhaXNlIHlvdSBmb3IgbGVhdmluZyBhbiBpbXBlcmlsbGVkIHByYWV0b3IgaW4gdGhlIGx1cmNoIGFuZCBub3QgY29taW5nIHRvIGhpcyBhaWQuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['44.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBuZXh0IHllYXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjU0IEIuQy48L25vdGU+IENhdG8gd2FzIGVsZWN0ZWQgcHJhZXRvciwgYnV0IGl0IHdhcyB0aG91Z2h0IHRoYXQgaGUgZGlkIG5vdCBhZGQgc28gbXVjaCBtYWplc3R5IGFuZCBkaWduaXR5IHRvIHRoZSBvZmZpY2UgYnkgYSBnb29kIGFkbWluaXN0cmF0aW9uIGFzIGhlIHRvb2sgYXdheSBmcm9tIGl0IGJ5IGRpc2dyYWNpbmcgaXQuIEZvciBoZSB3b3VsZCBvZnRlbiBnbyBmb3J0aCB0byBoaXMgdHJpYnVuYWwgd2l0aG91dCBzaG9lcyBvciB0dW5pYywgYW5kIGluIHN1Y2ggYXR0aXJlIHdvdWxkIHByZXNpZGUgb3ZlciBjYXBpdGFsIGNhc2VzIGludm9sdmluZyBwcm9taW5lbnQgbWVuLiBTb21lIHNheSwgdG9vLCB0aGF0IGV2ZW4gYWZ0ZXIgdGhlIG1pZC1kYXkgbWVhbCBhbmQgd2hlbiBoZSBoYWQgZHJ1bmsgd2luZSwgaGUgd291bGQgdHJhbnNhY3QgcHVibGljIGJ1c2luZXNzOyBidXQgdGhpcyBpcyB1bnRydXRoZnVsbHkgc2FpZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['44.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHNlZWluZyB0aGF0IHRoZSBwZW9wbGUgd2VyZSBjb3JydXB0ZWQgYnkgdGhlIGdpZnRzIHdoaWNoIHRoZXkgcmVjZWl2ZWQgZnJvbSBtZW4gd2hvIHdlcmUgZm9uZCBvZiBvZmZpY2UgYW5kIHBsaWVkIHRoZSBicmliZXJ5IG9mIHRoZSBtYXNzZXMgYXMgdGhleSB3b3VsZCBhbiBvcmRpbmFyeSBidXNpbmVzcywgaGUgd2lzaGVkIHRvIGVyYWRpY2F0ZSBhbHRvZ2V0aGVyIHRoaXMgZGlzZWFzZSBmcm9tIHRoZSBzdGF0ZSwgYW5kIHRoZXJlZm9yZSBwZXJzdWFkZWQgdGhlIHNlbmF0ZSB0byBtYWtlIGEgZGVjcmVlIHRoYXQgbWFnaXN0cmF0ZXMgZWxlY3QsIGluIGNhc2UgdGhleSBoYWQgbm8gYWNjdXNlciwgc2hvdWxkIGJlIGNvbXBlbGxlZCBvZiB0aGVtc2VsdmVzIHRvIGNvbWUgYmVmb3JlIGEgc3dvcm4gY291cnQgYW5kIHN1Ym1pdCBhY2NvdW50cyBvZiB0aGVpciBlbGVjdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['44.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGhlIGNhbmRpZGF0ZXMgZm9yIG9mZmljZXMgd2VyZSBzb3JlbHkgZGlzcGxlYXNlZCwgYW5kIHN0aWxsIG1vcmUgc29yZWx5IHRoZSBoaXJlbGluZyBtdWx0aXR1ZGUuIEVhcmx5IGluIHRoZSBtb3JuaW5nLCB0aGVyZWZvcmUsIHdoZW4gQ2F0byBoYWQgZ29uZSBmb3J0aCB0byBoaXMgdHJpYnVuYWwsIGNyb3dkcyBhc3NhaWxlZCBoaW0gd2l0aCBzaG91dHMsIGFidXNlLCBhbmQgbWlzc2lsZXMsIHNvIHRoYXQgZXZlcnlib2R5IGZsZWQgZnJvbSB0aGUgdHJpYnVuYWwsIGFuZCBDYXRvIGhpbXNlbGYgd2FzIHB1c2hlZCBhd2F5IGZyb20gaXQgYW5kIGJvcm5lIGFsb25nIGJ5IHRoZSB0aHJvbmcsIGFuZCB3aXRoIGRpZmZpY3VsdHkgc3VjY2VlZGVkIGluIGxheWluZyBob2xkIG9mIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5yb3N0cmE8L2ZvcmVpZ24+LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['44.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlLCByaXNpbmcgdG8gaGlzIGZlZXQsIGJ5IHRoZSBmaXJtbmVzcyBhbmQgYm9sZG5lc3Mgb2YgaGlzIGRlbWVhbm91ciBoZSBhdCBvbmNlIHByZXZhaWxlZCBvdmVyIHRoZSBkaW4sIHN0b3BwZWQgdGhlIHNob3V0aW5nLCBhbmQgYWZ0ZXIgc2F5aW5nIHdoYXQgd2FzIGZpdHRpbmcgYW5kIGJlaW5nIGxpc3RlbmVkIHRvIHF1aWV0bHksIGJyb3VnaHQgdGhlIGRpc3R1cmJhbmNlIGNvbXBsZXRlbHkgdG8gYW4gZW5kLiBXaGVuIHRoZSBzZW5hdGUgd2FzIHByYWlzaW5nIGhpbSBmb3IgdGhpcywgaGUgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBJIGNhbm5vdCBwcmFpc2UgeW91IGZvciBsZWF2aW5nIGFuIGltcGVyaWxsZWQgcHJhZXRvciBpbiB0aGUgbHVyY2ggYW5kIG5vdCBjb21pbmcgdG8gaGlzIGFpZC48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgYWxsIHRoZSBjYW5kaWRhdGVzIGZvciBvZmZpY2VzIHdlcmUgYXQgYSBsb3NzIHdoYXQgdG8gZG87IGVhY2ggb25lIHdhcyBhZnJhaWQgdG8gdXNlIGJyaWJlcyBoaW1zZWxmLCBidXQgd2FzIGFmcmFpZCBvZiBsb3NpbmcgaGlzIG9mZmljZSBpZiBhbm90aGVyIHVzZWQgdGhlbS4gVGhleSBkZWNpZGVkLCB0aGVyZWZvcmUsIHRvIGNvbWUgdG9nZXRoZXIgYW5kIGRlcG9zaXQgc2V2ZXJhbGx5IG9uZSBodW5kcmVkIGFuZCB0d2VudHktZml2ZSB0aG91c2FuZCBkcmFjaG1hcyBpbiBtb25leSwgYW5kIHRoYXQgYWxsIHNob3VsZCB0aGVuIHN1ZSBmb3IgdGhlaXIgb2ZmaWNlcyBpbiBmYWlyIGFuZCBqdXN0IHdheXM7IHRoZSBvbmUgd2hvIHRyYW5zZ3Jlc3NlZCBhbmQgcHJhY3Rpc2VkIGJyaWJlcnkgZm9yZmVpdGluZyBoaXMgbW9uZXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyBtYWRlIHRoaXMgYWdyZWVtZW50LCB0aGV5IGNob3NlIENhdG8gYXMgZGVwb3NpdGFyeSwgdW1waXJlLCBhbmQgd2l0bmVzcywgYW5kIGJyaW5naW5nIHRoZWlyIG1vbmV5LCBvZmZlcmVkIHRvIGRlcG9zaXQgaXQgd2l0aCBoaW07IHRoZXkgZXZlbiBkcmV3IHVwIHRoZWlyIGFncmVlbWVudCBpbiBoaXMgcHJlc2VuY2UuIENhdG8gdG9vayBwbGVkZ2VzIGZvciB0aGVpciBtb25leSwgYnV0IHdvdWxkIG5vdCBhY2NlcHQgdGhlIG1vbmV5IGl0c2VsZi4gV2hlbiB0aGUgZGF5IGFwcG9pbnRlZCBmb3IgdGhlIGVsZWN0aW9uIGNhbWUsIENhdG8gdG9vayBoaXMgc3RhbmQgYnkgdGhlIHNpZGUgb2YgdGhlIHByZXNpZGluZyB0cmlidW5lLCBhbmQgYWZ0ZXIgd2F0Y2hpbmcgdGhlIHZvdGUsIGRlY2xhcmVkIHRoYXQgb25lIG9mIHRoZSBkZXBvc2l0b3JzIHdhcyBwbGF5aW5nIGZhbHNlLCBhbmQgb3JkZXJlZCBoaW0gdG8gcGF5IGhpcyBtb25leSBvdmVyIHRvIHRoZSBvdGhlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVzZSwgYWZ0ZXIgYWRtaXJpbmcgYW5kIHByYWlzaW5nIENhdG8ncyB1cHJpZ2h0bmVzcywgY2FuY2VsbGVkIHRoZSBwZW5hbHR5LCBmZWVsaW5nIHRoYXQgdGhleSBhbHJlYWR5IGhhZCBzdWZmaWNpZW50IHNhdGlzZmFjdGlvbiBmcm9tIHRoZSB3cm9uZy1kb2VyLiBJbiB0aGUgcmVzdCBvZiB0aGUgY2l0aXplbnMsIGhvd2V2ZXIsIHRoaXMgY29uZHVjdCBvZiBDYXRvIGNhdXNlZCBtb3JlIHZleGF0aW9uIGFuZCBvZGl1bSB0aGFuIGFueXRoaW5nIGVsc2U7IHRoZXkgZmVsdCB0aGF0IGhlIHdhcyBpbnZlc3RpbmcgaGltc2VsZiB3aXRoIHRoZSBwb3dlcnMgb2Ygc2VuYXRlLCBjb3VydHMgYW5kIG1hZ2lzdHJhdGVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['44.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgYWxsIHRoZSBjYW5kaWRhdGVzIGZvciBvZmZpY2VzIHdlcmUgYXQgYSBsb3NzIHdoYXQgdG8gZG87IGVhY2ggb25lIHdhcyBhZnJhaWQgdG8gdXNlIGJyaWJlcyBoaW1zZWxmLCBidXQgd2FzIGFmcmFpZCBvZiBsb3NpbmcgaGlzIG9mZmljZSBpZiBhbm90aGVyIHVzZWQgdGhlbS4gVGhleSBkZWNpZGVkLCB0aGVyZWZvcmUsIHRvIGNvbWUgdG9nZXRoZXIgYW5kIGRlcG9zaXQgc2V2ZXJhbGx5IG9uZSBodW5kcmVkIGFuZCB0d2VudHktZml2ZSB0aG91c2FuZCBkcmFjaG1hcyBpbiBtb25leSwgYW5kIHRoYXQgYWxsIHNob3VsZCB0aGVuIHN1ZSBmb3IgdGhlaXIgb2ZmaWNlcyBpbiBmYWlyIGFuZCBqdXN0IHdheXM7IHRoZSBvbmUgd2hvIHRyYW5zZ3Jlc3NlZCBhbmQgcHJhY3Rpc2VkIGJyaWJlcnkgZm9yZmVpdGluZyBoaXMgbW9uZXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['44.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyBtYWRlIHRoaXMgYWdyZWVtZW50LCB0aGV5IGNob3NlIENhdG8gYXMgZGVwb3NpdGFyeSwgdW1waXJlLCBhbmQgd2l0bmVzcywgYW5kIGJyaW5naW5nIHRoZWlyIG1vbmV5LCBvZmZlcmVkIHRvIGRlcG9zaXQgaXQgd2l0aCBoaW07IHRoZXkgZXZlbiBkcmV3IHVwIHRoZWlyIGFncmVlbWVudCBpbiBoaXMgcHJlc2VuY2UuIENhdG8gdG9vayBwbGVkZ2VzIGZvciB0aGVpciBtb25leSwgYnV0IHdvdWxkIG5vdCBhY2NlcHQgdGhlIG1vbmV5IGl0c2VsZi4gV2hlbiB0aGUgZGF5IGFwcG9pbnRlZCBmb3IgdGhlIGVsZWN0aW9uIGNhbWUsIENhdG8gdG9vayBoaXMgc3RhbmQgYnkgdGhlIHNpZGUgb2YgdGhlIHByZXNpZGluZyB0cmlidW5lLCBhbmQgYWZ0ZXIgd2F0Y2hpbmcgdGhlIHZvdGUsIGRlY2xhcmVkIHRoYXQgb25lIG9mIHRoZSBkZXBvc2l0b3JzIHdhcyBwbGF5aW5nIGZhbHNlLCBhbmQgb3JkZXJlZCBoaW0gdG8gcGF5IGhpcyBtb25leSBvdmVyIHRvIHRoZSBvdGhlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['44.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVzZSwgYWZ0ZXIgYWRtaXJpbmcgYW5kIHByYWlzaW5nIENhdG8ncyB1cHJpZ2h0bmVzcywgY2FuY2VsbGVkIHRoZSBwZW5hbHR5LCBmZWVsaW5nIHRoYXQgdGhleSBhbHJlYWR5IGhhZCBzdWZmaWNpZW50IHNhdGlzZmFjdGlvbiBmcm9tIHRoZSB3cm9uZy1kb2VyLiBJbiB0aGUgcmVzdCBvZiB0aGUgY2l0aXplbnMsIGhvd2V2ZXIsIHRoaXMgY29uZHVjdCBvZiBDYXRvIGNhdXNlZCBtb3JlIHZleGF0aW9uIGFuZCBvZGl1bSB0aGFuIGFueXRoaW5nIGVsc2U7IHRoZXkgZmVsdCB0aGF0IGhlIHdhcyBpbnZlc3RpbmcgaGltc2VsZiB3aXRoIHRoZSBwb3dlcnMgb2Ygc2VuYXRlLCBjb3VydHMgYW5kIG1hZ2lzdHJhdGVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciBubyB2aXJ0dWUsIGJ5IHRoZSBmYW1lIGFuZCBjcmVkaXQgd2hpY2ggaXQgZ2l2ZXMsIGNyZWF0ZXMgbW9yZSBlbnZ5IHRoYW4ganVzdGljZSwgYmVjYXVzZSBib3RoIHBvd2VyIGFuZCBjcmVkaXQgZm9sbG93IGl0IGNoaWVmbHkgYW1vbmcgdGhlIGNvbW1vbiBmb2xrLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGRvIG5vdCBtZXJlbHkgaG9ub3VyIHRoZSBqdXN0LCBhcyB0aGV5IGRvIHRoZSBicmF2ZSwgbm9yIGFkbWlyZSB0aGVtIG1lcmVseSwgYXMgdGhleSBkbyB0aGUgd2lzZSwgYnV0IHRoZXkgYWN0dWFsbHkgbG92ZSB0aGUganVzdCwgYW5kIHB1dCBjb25maWRlbmNlIGFuZCB0cnVzdCBpbiB0aGVtLiBBcyBmb3IgdGhlIGJyYXZlIGFuZCB3aXNlLCBob3dldmVyLCB0aGV5IGZlYXIgdGhlIG9uZSBhbmQgZGlzdHJ1c3QgdGhlIG90aGVyOyBhbmQgYmVzaWRlcywgdGhleSB0aGluayB0aGF0IHRoZXNlIGV4Y2VsIGJ5IGEgbmF0dXJhbCBnaWZ0IHJhdGhlciB0aGFuIGJ5IHRoZWlyIG93biB2b2xpdGlvbiwgY29uc2lkZXJpbmcgYnJhdmVyeSB0byBiZSBhIGNlcnRhaW4gaW50ZW5zaXR5LCBhbmQgd2lzZG9tIGEgY2VydGFpbiB2aWdvdXIsIG9mIHNvdWwsIHdoZXJlYXMgYW55IG9uZSB3aG8gd2lzaGVzIGNhbiBiZSBqdXN0IGZvcnRod2l0aCwgYW5kIHRoZSBncmVhdGVzdCBkaXNncmFjZSBpcyB2aXNpdGVkIHVwb24gaW5qdXN0aWNlLCBhcyBiZWluZyBpbmV4Y3VzYWJsZSBiYXNlbmVzcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGRvIG5vdCBtZXJlbHkgaG9ub3VyIHRoZSBqdXN0LCBhcyB0aGV5IGRvIHRoZSBicmF2ZSwgbm9yIGFkbWlyZSB0aGVtIG1lcmVseSwgYXMgdGhleSBkbyB0aGUgd2lzZSwgYnV0IHRoZXkgYWN0dWFsbHkgbG92ZSB0aGUganVzdCwgYW5kIHB1dCBjb25maWRlbmNlIGFuZCB0cnVzdCBpbiB0aGVtLiBBcyBmb3IgdGhlIGJyYXZlIGFuZCB3aXNlLCBob3dldmVyLCB0aGV5IGZlYXIgdGhlIG9uZSBhbmQgZGlzdHJ1c3QgdGhlIG90aGVyOyBhbmQgYmVzaWRlcywgdGhleSB0aGluayB0aGF0IHRoZXNlIGV4Y2VsIGJ5IGEgbmF0dXJhbCBnaWZ0IHJhdGhlciB0aGFuIGJ5IHRoZWlyIG93biB2b2xpdGlvbiwgY29uc2lkZXJpbmcgYnJhdmVyeSB0byBiZSBhIGNlcnRhaW4gaW50ZW5zaXR5LCBhbmQgd2lzZG9tIGEgY2VydGFpbiB2aWdvdXIsIG9mIHNvdWwsIHdoZXJlYXMgYW55IG9uZSB3aG8gd2lzaGVzIGNhbiBiZSBqdXN0IGZvcnRod2l0aCwgYW5kIHRoZSBncmVhdGVzdCBkaXNncmFjZSBpcyB2aXNpdGVkIHVwb24gaW5qdXN0aWNlLCBhcyBiZWluZyBpbmV4Y3VzYWJsZSBiYXNlbmVzcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uIGFsbCB0aGUgZ3JlYXQgbWVuIHdlcmUgaG9zdGlsZSB0byBDYXRvLCBmZWVsaW5nIHRoYXQgdGhleSB3ZXJlIHB1dCB0byBzaGFtZSBieSBoaW07IGFuZCBQb21wZXksIHdobyBjb25zaWRlcmVkIENhdG8ncyBoaWdoIHJlcHV0ZSBhcyBhIGRpc3NvbHV0aW9uIG9mIGhpcyBvd24gcG93ZXIsIHdhcyBhbHdheXMgZWdnaW5nIGNlcnRhaW4gcGVyc29ucyBvbiB0byBhYnVzZSBoaW0sIGFtb25nIHdob20gd2FzIENsb2RpdXMgdGhlIGRlbWFnb2d1ZSBlc3BlY2lhbGx5LCB3aG8gaGFkIGFnYWluIGRyaWZ0ZWQgaW50byBQb21wZXkncyBmb2xsb3dpbmcuIEhlIGxvdWRseSBkZW5vdW5jZWQgQ2F0byBmb3IgaGF2aW5nIGFwcHJvcHJpYXRlZCBtdWNoIHRyZWFzdXJlIGZyb20gQ3lwcnVzLCBhbmQgZm9yIGJlaW5nIGhvc3RpbGUgdG8gUG9tcGV5IGJlY2F1c2UgaGUgaGFkIGRlY2xpbmVkIHRvIG1hcnJ5IGhpcyBkYXVnaHRlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhdG8gZGVjbGFyZWQgdGhhdCwgd2l0aG91dCB0YWtpbmcgYSBzaW5nbGUgaG9yc2Ugb3Igc29sZGllciwgaGUgaGFkIGdvdCB0b2dldGhlciBmcm9tIEN5cHJ1cyBtb3JlIHRyZWFzdXJlIGZvciB0aGUgY2l0eSB0aGFuIFBvbXBleSBoYWQgYnJvdWdodCBiYWNrIGZyb20gYWxsIGhpcyB3YXJzIGFuZCB0cml1bXBocyBhZnRlciBzdGlycmluZyB1cCB0aGUgaGFiaXRhYmxlIHdvcmxkOyBhbmQgdGhhdCBoZSBuZXZlciBjaG9zZSBQb21wZXkgZm9yIGEgbWFycmlhZ2UgY29ubmVjdGlvbiwgbm90IGJlY2F1c2UgaGUgdGhvdWdodCBoaW0gdW53b3J0aHkgb2YgaXQsIGJ1dCBiZWNhdXNlIGhlIHNhdyB0aGUgZGlmZmVyZW5jZSBpbiB0aGVpciBwb2xpdGljYWwgdGVuZXRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSwgZm9yIG15IHBhcnQsPC9xPiBzYWlkIENhdG8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2hlbiBhIHByb3ZpbmNlIHdhcyBvZmZlcmVkIG1lIGFmdGVyIG15IHByYWV0b3JzaGlwLCBkZWNsaW5lZCBpdCwgYnV0IHRoaXMgUG9tcGV5IHRvb2sgcHJvdmluY2VzLCBzb21lIG9mIHdoaWNoIGhlIGhvbGRzIGhpbXNlbGYsIGFuZCBzb21lIGhlIG9mZmVycyB0byBvdGhlcnM7IGFuZCBub3cgaGUgaGFzIGFjdHVhbGx5IGxlbnQgQ2Flc2FyIGEgYm9keSBvZiBzaXggdGhvdXNhbmQgbGVnaW9uYXJpZXMgZm9yIHVzZSBpbiBHYXVsLiBUaGlzIGZvcmNlIG5laXRoZXIgZGlkIENhZXNhciBhc2sgZnJvbSB5b3UsIG5vciBkaWQgUG9tcGV5IGdpdmUgaXQgd2l0aCB5b3VyIGNvbnNlbnQsIGJ1dCBhcm1pZXMgb2YgdGhpcyBncmVhdCBzaXplIGFuZCBhcm1zIGFuZCBob3JzZXMgYXJlIG5vdyB0aGUgbXV0dWFsIGdpZnRzIG9mIHByaXZhdGUgcGVyc29ucy4gCgkJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggaGUgaGFzIHRoZSB0aXRsZXMgb2YgZ2VuZXJhbCBhbmQgPGZvcmVpZ24gbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4sIGhlIGhhcyBoYW5kZWQgb3ZlciB0byBvdGhlcnMgaGlzIGFybWllcyBhbmQgaGlzIHByb3ZpbmNlcywgd2hpbGUgaGUgaGltc2VsZiB0YWtlcyB1cCBoaXMgcG9zdCBuZWFyIHRoZSBjaXR5LCBtYW5hZ2luZyBmYWN0aW9ucyBhdCB0aGUgZWxlY3Rpb25zIGFzIHRob3VnaCBoZSB3ZXJlIGRpcmVjdGluZyBnYW1lcywgYW5kIGNvbnRyaXZpbmcgZGlzdHVyYmFuY2VzLCBmcm9tIHdoaWNoLCBhcyB3ZSBjbGVhcmx5IHNlZSwgYnkgd2F5IG9mIGFuYXJjaHksIGhlIGlzIHNlZWtpbmcgdG8gd2luIGZvciBoaW1zZWxmIGEgbW9uYXJjaHkuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['45.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uIGFsbCB0aGUgZ3JlYXQgbWVuIHdlcmUgaG9zdGlsZSB0byBDYXRvLCBmZWVsaW5nIHRoYXQgdGhleSB3ZXJlIHB1dCB0byBzaGFtZSBieSBoaW07IGFuZCBQb21wZXksIHdobyBjb25zaWRlcmVkIENhdG8ncyBoaWdoIHJlcHV0ZSBhcyBhIGRpc3NvbHV0aW9uIG9mIGhpcyBvd24gcG93ZXIsIHdhcyBhbHdheXMgZWdnaW5nIGNlcnRhaW4gcGVyc29ucyBvbiB0byBhYnVzZSBoaW0sIGFtb25nIHdob20gd2FzIENsb2RpdXMgdGhlIGRlbWFnb2d1ZSBlc3BlY2lhbGx5LCB3aG8gaGFkIGFnYWluIGRyaWZ0ZWQgaW50byBQb21wZXkncyBmb2xsb3dpbmcuIEhlIGxvdWRseSBkZW5vdW5jZWQgQ2F0byBmb3IgaGF2aW5nIGFwcHJvcHJpYXRlZCBtdWNoIHRyZWFzdXJlIGZyb20gQ3lwcnVzLCBhbmQgZm9yIGJlaW5nIGhvc3RpbGUgdG8gUG9tcGV5IGJlY2F1c2UgaGUgaGFkIGRlY2xpbmVkIHRvIG1hcnJ5IGhpcyBkYXVnaHRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['45.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvIGRlY2xhcmVkIHRoYXQsIHdpdGhvdXQgdGFraW5nIGEgc2luZ2xlIGhvcnNlIG9yIHNvbGRpZXIsIGhlIGhhZCBnb3QgdG9nZXRoZXIgZnJvbSBDeXBydXMgbW9yZSB0cmVhc3VyZSBmb3IgdGhlIGNpdHkgdGhhbiBQb21wZXkgaGFkIGJyb3VnaHQgYmFjayBmcm9tIGFsbCBoaXMgd2FycyBhbmQgdHJpdW1waHMgYWZ0ZXIgc3RpcnJpbmcgdXAgdGhlIGhhYml0YWJsZSB3b3JsZDsgYW5kIHRoYXQgaGUgbmV2ZXIgY2hvc2UgUG9tcGV5IGZvciBhIG1hcnJpYWdlIGNvbm5lY3Rpb24sIG5vdCBiZWNhdXNlIGhlIHRob3VnaHQgaGltIHVud29ydGh5IG9mIGl0LCBidXQgYmVjYXVzZSBoZSBzYXcgdGhlIGRpZmZlcmVuY2UgaW4gdGhlaXIgcG9saXRpY2FsIHRlbmV0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['45.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkksIGZvciBteSBwYXJ0LDwvcT4gc2FpZCBDYXRvLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2hlbiBhIHByb3ZpbmNlIHdhcyBvZmZlcmVkIG1lIGFmdGVyIG15IHByYWV0b3JzaGlwLCBkZWNsaW5lZCBpdCwgYnV0IHRoaXMgUG9tcGV5IHRvb2sgcHJvdmluY2VzLCBzb21lIG9mIHdoaWNoIGhlIGhvbGRzIGhpbXNlbGYsIGFuZCBzb21lIGhlIG9mZmVycyB0byBvdGhlcnM7IGFuZCBub3cgaGUgaGFzIGFjdHVhbGx5IGxlbnQgQ2Flc2FyIGEgYm9keSBvZiBzaXggdGhvdXNhbmQgbGVnaW9uYXJpZXMgZm9yIHVzZSBpbiBHYXVsLiBUaGlzIGZvcmNlIG5laXRoZXIgZGlkIENhZXNhciBhc2sgZnJvbSB5b3UsIG5vciBkaWQgUG9tcGV5IGdpdmUgaXQgd2l0aCB5b3VyIGNvbnNlbnQsIGJ1dCBhcm1pZXMgb2YgdGhpcyBncmVhdCBzaXplIGFuZCBhcm1zIGFuZCBob3JzZXMgYXJlIG5vdyB0aGUgbXV0dWFsIGdpZnRzIG9mIHByaXZhdGUgcGVyc29ucy4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRob3VnaCBoZSBoYXMgdGhlIHRpdGxlcyBvZiBnZW5lcmFsIGFuZCA8Zm9yZWlnbiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiwgaGUgaGFzIGhhbmRlZCBvdmVyIHRvIG90aGVycyBoaXMgYXJtaWVzIGFuZCBoaXMgcHJvdmluY2VzLCB3aGlsZSBoZSBoaW1zZWxmIHRha2VzIHVwIGhpcyBwb3N0IG5lYXIgdGhlIGNpdHksIG1hbmFnaW5nIGZhY3Rpb25zIGF0IHRoZSBlbGVjdGlvbnMgYXMgdGhvdWdoIGhlIHdlcmUgZGlyZWN0aW5nIGdhbWVzLCBhbmQgY29udHJpdmluZyBkaXN0dXJiYW5jZXMsIGZyb20gd2hpY2gsIGFzIHdlIGNsZWFybHkgc2VlLCBieSB3YXkgb2YgYW5hcmNoeSwgaGUgaXMgc2Vla2luZyB0byB3aW4gZm9yIGhpbXNlbGYgYSBtb25hcmNoeS48L3E+CgkJCSAgICAgIDwvdHJhbnNsYXRpb24+"
translation['45.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggaGUgaGFzIHRoZSB0aXRsZXMgb2YgZ2VuZXJhbCBhbmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiwgaGUgaGFzIGhhbmRlZCBvdmVyIHRvIG90aGVycyBoaXMgYXJtaWVzIGFuZCBoaXMgcHJvdmluY2VzLCB3aGlsZSBoZSBoaW1zZWxmIHRha2VzIHVwIGhpcyBwb3N0IG5lYXIgdGhlIGNpdHksIG1hbmFnaW5nIGZhY3Rpb25zIGF0IHRoZSBlbGVjdGlvbnMgYXMgdGhvdWdoIGhlIHdlcmUgZGlyZWN0aW5nIGdhbWVzLCBhbmQgY29udHJpdmluZyBkaXN0dXJiYW5jZXMsIGZyb20gd2hpY2gsIGFzIHdlIGNsZWFybHkgc2VlLCBieSB3YXkgb2YgYW5hcmNoeSwgaGUgaXMgc2Vla2luZyB0byB3aW4gZm9yIGhpbXNlbGYgYSBtb25hcmNoeS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHN1Y2ggd29yZHMgZGlkIENhdG8gZGVmZW5kIGhpbXNlbGYgYWdhaW5zdCBQb21wZXkuIEJ1dCBNYXJjdXMgRmF2b25pdXMgd2FzIGEgY29tcGFuaW9uIGFuZCBhcmRlbnQgZGlzY2lwbGUgb2YgaGlzLCBqdXN0IGFzIEFwb2xsb2RvcnVzIG9mIFBoYWxlcnVtIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIG9mIFNvY3JhdGVzIGluIG9sZGVuIHRpbWUuIEZhdm9uaXVzIHdhcyBpbXB1bHNpdmUsIGFuZCBlYXNpbHkgbW92ZWQgYnkgYXJndW1lbnQsIHdoaWNoIGRpZCBub3QgYWZmZWN0IGhpbSBtb2RlcmF0ZWx5IG9yIG1pbGRseSwgYnV0IGxpa2UgdW5taXhlZCB3aW5lLCBhbmQgdG8gdGhlIHBvaW50IG9mIGZyZW56eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIGJlaW5nIGRlZmVhdGVkIGluIGEgY2FuZGlkYWN5IGZvciB0aGUgYWVkaWxlc2hpcCwgYnV0IENhdG8sIHdobyB3YXMgcHJlc2VudCwgbm90aWNlZCB0aGF0IHRoZSB2b3RpbmcgdGFibGV0cyB3ZXJlIGFsbCBpbnNjcmliZWQgaW4gb25lIGhhbmQ7IGFuZCBoYXZpbmcgZXhwb3NlZCB0aGUgZm91bCBwbGF5LCBhdCB0aGUgdGltZSBoZSBzdG9wcGVkIHRoZSBlbGVjdGlvbiBieSBhbiBhcHBlYWwgdG8gdGhlIHRyaWJ1bmVzLiBBZnRlcndhcmRzLCB3aGVuIEZhdm9uaXVzIGhhZCBiZWVuIGFwcG9pbnRlZCBhZWRpbGUsIENhdG8gYm90aCBkaXNjaGFyZ2VkIHRoZSBvdGhlciBkdXRpZXMgb2YgdGhlIG9mZmljZSBhbmQgbWFuYWdlZCB0aGUgc3BlY3RhY2xlcyBpbiB0aGUgdGhlYXRyZS4gSGUgZ2F2ZSB0byB0aGUgYWN0b3JzIGNyb3ducywgbm90IG9mIGdvbGQsIGJ1dCBvZiB3aWxkIG9saXZlLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hcyB3YXMgZG9uZSBhdCBPbHltcGlhLCBhbmQgaW5leHBlbnNpdmUgZ2lmdHMs4oCUdG8gdGhlIEdyZWVrcywgYmVldHMsIGxldHR1Y2UsIHJhZGlzaGVzLCBhbmQgcGVhcnM7IGFuZCB0byB0aGUgUm9tYW5zLCBqYXJzIG9mIHdpbmUsIHBvcmssIGZpZ3MsIG1lbG9ucywgYW5kIGZhZ2dvdHMgb2Ygd29vZC4gQXQgdGhlIHByYWN0aWNhbCBzaW1wbGljaXR5IG9mIHRoZXNlIGdpZnRzIHNvbWUgbGF1Z2hlZCwgYnV0IG90aGVycyBjb25jZWl2ZWQgcmVzcGVjdCBmb3IgQ2F0byB3aGVuIHRoZXkgc2F3IGhpcyBzZXZlcmUgYW5kIHNvbGVtbiBtYW5uZXIgZ3JhZHVhbGx5IHJlbGF4aW5nIHRvIHBsZWFzYW50IGdvb2QtaHVtb3VyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMS4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGkuIDI8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXQgbGFzdCBGYXZvbml1cywgcGx1bmdpbmcgaW50byB0aGUgY3Jvd2QgYW5kIHRha2luZyBhIHNlYXQgYW1vbmcgdGhlIHNwZWN0YXRvcnMsIGFwcGxhdWRlZCBDYXRvIGFuZCBjYWxsZWQgdG8gaGltIGluIGEgbG91ZCB2b2ljZSB0byBnaXZlIHByZXNlbnRzIHRvIHRoZSBzdWNjZXNzZnVsIHBlcmZvcm1lcnMgYW5kIHRvIGhvbm91ciB0aGVtLCBhbmQgaGVscGVkIGhpbSB0byBleGhvcnQgdGhlIHNwZWN0YXRvcnMsIGFzIHRob3VnaCBoZSBoYWQgZGVsZWdhdGVkIGhpcyBwb3dlcnMgdG8gQ2F0by4gTm93LCBpbiB0aGUgb3RoZXIgdGhlYXRyZSwgQ3VyaW8sIHRoZSBjb2xsZWFndWUgb2YgRmF2b25pdXMsIHdhcyBtYW5hZ2luZyB0aGluZ3Mgd2l0aCBhIGxhdmlzaCBoYW5kOyBidXQgdGhlIHBlb3BsZSBsZWZ0IGhpbSBhbmQgd2VudCBvdmVyIHRvIHRoZSBvdGhlciBwbGFjZSwgYW5kIHJlYWRpbHkgc2hhcmVkIGluIGEgc3BvcnQgd2hlcmUgRmF2b25pdXMgd2FzIHBsYXlpbmcgdGhlIHBhcnQgb2YgYSBwcml2YXRlIGNpdGl6ZW4gYW5kIENhdG8gdGhhdCBvZiBtYXN0ZXIgb2YgdGhlIGdhbWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2F0byBkaWQgYWxsIHRoaXMgaW4gZGlzcGFyYWdlbWVudCBvZiB0aGUgdXN1YWwgcHJhY3RpY2UsIGFuZCB3aXRoIGFuIGVmZm9ydCB0byBzaG93IHRoYXQgaW4gc3BvcnQgb25lIG11c3QgYWRvcHQgYSBzcG9ydGl2ZSBtYW5uZXIgYW5kIGNvbmR1Y3QgbWF0dGVycyB3aXRoIHVub3N0ZW50YXRpb3VzIGdsYWRuZXNzIHJhdGhlciB0aGFuIHdpdGggZWxhYm9yYXRlIGFuZCBjb3N0bHkgcHJlcGFyYXRpb25zLCB3aGVyZSBvbmUgYmVzdG93cyB1cG9uIHRyaWZsaW5nIHRoaW5ncyBncmVhdCBjYXJlIGFuZCBlZmZvcnQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['46.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBzdWNoIHdvcmRzIGRpZCBDYXRvIGRlZmVuZCBoaW1zZWxmIGFnYWluc3QgUG9tcGV5LiBCdXQgTWFyY3VzIEZhdm9uaXVzIHdhcyBhIGNvbXBhbmlvbiBhbmQgYXJkZW50IGRpc2NpcGxlIG9mIGhpcywganVzdCBhcyBBcG9sbG9kb3J1cyBvZiBQaGFsZXJ1bSBpcyBzYWlkIHRvIGhhdmUgYmVlbiBvZiBTb2NyYXRlcyBpbiBvbGRlbiB0aW1lLiBGYXZvbml1cyB3YXMgaW1wdWxzaXZlLCBhbmQgZWFzaWx5IG1vdmVkIGJ5IGFyZ3VtZW50LCB3aGljaCBkaWQgbm90IGFmZmVjdCBoaW0gbW9kZXJhdGVseSBvciBtaWxkbHksIGJ1dCBsaWtlIHVubWl4ZWQgd2luZSwgYW5kIHRvIHRoZSBwb2ludCBvZiBmcmVuenkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['46.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBiZWluZyBkZWZlYXRlZCBpbiBhIGNhbmRpZGFjeSBmb3IgdGhlIGFlZGlsZXNoaXAsIGJ1dCBDYXRvLCB3aG8gd2FzIHByZXNlbnQsIG5vdGljZWQgdGhhdCB0aGUgdm90aW5nIHRhYmxldHMgd2VyZSBhbGwgaW5zY3JpYmVkIGluIG9uZSBoYW5kOyBhbmQgaGF2aW5nIGV4cG9zZWQgdGhlIGZvdWwgcGxheSwgYXQgdGhlIHRpbWUgaGUgc3RvcHBlZCB0aGUgZWxlY3Rpb24gYnkgYW4gYXBwZWFsIHRvIHRoZSB0cmlidW5lcy4gQWZ0ZXJ3YXJkcywgd2hlbiBGYXZvbml1cyBoYWQgYmVlbiBhcHBvaW50ZWQgYWVkaWxlLCBDYXRvIGJvdGggZGlzY2hhcmdlZCB0aGUgb3RoZXIgZHV0aWVzIG9mIHRoZSBvZmZpY2UgYW5kIG1hbmFnZWQgdGhlIHNwZWN0YWNsZXMgaW4gdGhlIHRoZWF0cmUuIEhlIGdhdmUgdG8gdGhlIGFjdG9ycyBjcm93bnMsIG5vdCBvZiBnb2xkLCBidXQgb2Ygd2lsZCBvbGl2ZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['46.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFzIHdhcyBkb25lIGF0IE9seW1waWEsIGFuZCBpbmV4cGVuc2l2ZSBnaWZ0cyzigJR0byB0aGUgR3JlZWtzLCBiZWV0cywgbGV0dHVjZSwgcmFkaXNoZXMsIGFuZCBwZWFyczsgYW5kIHRvIHRoZSBSb21hbnMsIGphcnMgb2Ygd2luZSwgcG9yaywgZmlncywgbWVsb25zLCBhbmQgZmFnZ290cyBvZiB3b29kLiBBdCB0aGUgcHJhY3RpY2FsIHNpbXBsaWNpdHkgb2YgdGhlc2UgZ2lmdHMgc29tZSBsYXVnaGVkLCBidXQgb3RoZXJzIGNvbmNlaXZlZCByZXNwZWN0IGZvciBDYXRvIHdoZW4gdGhleSBzYXcgaGlzIHNldmVyZSBhbmQgc29sZW1uIG1hbm5lciBncmFkdWFsbHkgcmVsYXhpbmcgdG8gcGxlYXNhbnQgZ29vZC1odW1vdXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMS4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGkuIDI8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDEuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciBpLiAyPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['46.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhdCBsYXN0IEZhdm9uaXVzLCBwbHVuZ2luZyBpbnRvIHRoZSBjcm93ZCBhbmQgdGFraW5nIGEgc2VhdCBhbW9uZyB0aGUgc3BlY3RhdG9ycywgYXBwbGF1ZGVkIENhdG8gYW5kIGNhbGxlZCB0byBoaW0gaW4gYSBsb3VkIHZvaWNlIHRvIGdpdmUgcHJlc2VudHMgdG8gdGhlIHN1Y2Nlc3NmdWwgcGVyZm9ybWVycyBhbmQgdG8gaG9ub3VyIHRoZW0sIGFuZCBoZWxwZWQgaGltIHRvIGV4aG9ydCB0aGUgc3BlY3RhdG9ycywgYXMgdGhvdWdoIGhlIGhhZCBkZWxlZ2F0ZWQgaGlzIHBvd2VycyB0byBDYXRvLiBOb3csIGluIHRoZSBvdGhlciB0aGVhdHJlLCBDdXJpbywgdGhlIGNvbGxlYWd1ZSBvZiBGYXZvbml1cywgd2FzIG1hbmFnaW5nIHRoaW5ncyB3aXRoIGEgbGF2aXNoIGhhbmQ7IGJ1dCB0aGUgcGVvcGxlIGxlZnQgaGltIGFuZCB3ZW50IG92ZXIgdG8gdGhlIG90aGVyIHBsYWNlLCBhbmQgcmVhZGlseSBzaGFyZWQgaW4gYSBzcG9ydCB3aGVyZSBGYXZvbml1cyB3YXMgcGxheWluZyB0aGUgcGFydCBvZiBhIHByaXZhdGUgY2l0aXplbiBhbmQgQ2F0byB0aGF0IG9mIG1hc3RlciBvZiB0aGUgZ2FtZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['46.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvIGRpZCBhbGwgdGhpcyBpbiBkaXNwYXJhZ2VtZW50IG9mIHRoZSB1c3VhbCBwcmFjdGljZSwgYW5kIHdpdGggYW4gZWZmb3J0IHRvIHNob3cgdGhhdCBpbiBzcG9ydCBvbmUgbXVzdCBhZG9wdCBhIHNwb3J0aXZlIG1hbm5lciBhbmQgY29uZHVjdCBtYXR0ZXJzIHdpdGggdW5vc3RlbnRhdGlvdXMgZ2xhZG5lc3MgcmF0aGVyIHRoYW4gd2l0aCBlbGFib3JhdGUgYW5kIGNvc3RseSBwcmVwYXJhdGlvbnMsIHdoZXJlIG9uZSBiZXN0b3dzIHVwb24gdHJpZmxpbmcgdGhpbmdzIGdyZWF0IGNhcmUgYW5kIGVmZm9ydC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHByZXNlbnRseSBTY2lwaW8sIEh5cHNhZXVzLCBhbmQgTWlsbyBzb3VnaHQgdGhlIGNvbnN1bHNoaXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDUyIEIuQy4gUmlvdHMgaW4gUm9tZSBwcmV2ZW50ZWQgYW55IGVsZWN0aW9uLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIGxpdjwvYmlibD4uPC9ub3RlPiBUaGV5IG5vdCBvbmx5IHVzZWQgdGhvc2UgaWxsZWdhbCBtZWFucyB3aGljaCB3ZXJlIG5vdyBhIGZhbWlsaWFyIGZlYXR1cmUgaW4gcG9saXRpY2FsIGxpZmUsIG5hbWVseSwgdGhlIGdpdmluZyBvZiBnaWZ0cyBhbmQgYnJpYmVzLCBidXQgd2VyZSBvcGVubHkgcHJlc3Npbmcgb24sIGJ5IHRoZSB1c2Ugb2YgYXJtcyBhbmQgbXVyZGVyLCBpbnRvIGNpdmlsIHdhciwgd2l0aCBkYXJpbmcgYW5kIG1hZG5lc3MuIFNvbWUgdGhlcmVmb3JlIGRlbWFuZGVkIHRoYXQgUG9tcGV5IHNob3VsZCBwcmVzaWRlIG92ZXIgdGhlIGVsZWN0aW9ucy4gQ2F0byBvcHBvc2VkIHRoaXMgYXQgZmlyc3QsIHNheWluZyB0aGF0IHRoZSBsYXdzIG91Z2h0IG5vdCB0byBkZXJpdmUgdGhlaXIgc2VjdXJpdHkgZnJvbSBQb21wZXksIGJ1dCBQb21wZXkgZnJvbSB0aGUgbGF3cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgd2hlbiB0aGVyZSBoYWQgYmVlbiBubyByZWd1bGFyIGdvdmVybm1lbnQgZm9yIGEgbG9uZyB0aW1lLCBhbmQgdGhyZWUgYXJtaWVzIHdlcmUgb2NjdXB5aW5nIHRoZSBmb3J1bSBkYWlseSwgYW5kIHRoZSBldmlsIGhhZCB3ZWxsLW5pZ2ggYmVjb21lIHBhc3QgY2hlY2tpbmcsIGhlIGRlY2lkZWQgdGhhdCBtYXR0ZXJzIG91Z2h0IHRvIGJlIHB1dCBpbnRvIHRoZSBoYW5kcyBvZiBQb21wZXkgYnkgdGhlIHZvbHVudGFyeSBnaWZ0IG9mIHRoZSBzZW5hdGUsIGJlZm9yZSB0aGUgZXh0cmVtZSBuZWNlc3NpdHkgZm9yIGl0IGNhbWUsIGFuZCB0aGF0IGJ5IGVtcGxveWluZyB0aGUgbW9zdCBtb2RlcmF0ZSBvZiB1bmNvbnN0aXR1dGlvbmFsIG1lYXN1cmVzIGFzIGEgaGVhbGluZyByZW1lZHkgZm9yIHRoZSBjb25zZXJ2YXRpb24gb2YgdGhlIGdyZWF0ZXN0IGludGVyZXN0cywgdGhleSBzaG91bGQgdGhlbXNlbHZlcyBpbnRyb2R1Y2UgdGhlIG1vbmFyY2h5LCByYXRoZXIgdGhhbiBhbGxvdyBmYWN0aW9uIHRvIGlzc3VlIGluIG1vbmFyY2h5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgQmlidWx1cywgYSBraW5zbWFuIG9mIENhdG8sIG1vdmVkIGluIHRoZSBzZW5hdGUgdGhhdCBQb21wZXkgc2hvdWxkIGJlIGNob3NlbiBzb2xlIGNvbnN1bDsgZm9yIGVpdGhlciBtYXR0ZXJzIHdvdWxkIGJlIHJlY3RpZmllZCBieSBoaXMgc2V0dGxlbWVudCBvZiB0aGVtLCBvciB0aGUgc3RhdGUgd291bGQgYmUgaW4gc3ViamVjdGlvbiB0byBpdHMgbW9zdCBwb3dlcmZ1bCBjaXRpemVuLiBUaGVuIENhdG8gcm9zZSB1cCBhbmQsIHRvIGV2ZXJ5b25lJ3Mgc3VycHJpc2UsIGFwcHJvdmVkIHRoZSBtZWFzdXJlLCBhZHZpc2luZyBhbnkgZ292ZXJubWVudCBhcyBiZXR0ZXIgdGhhbiBubyBnb3Zlcm5tZW50IGF0IGFsbCwgYW5kIHNheWluZyB0aGF0IGhlIGV4cGVjdGVkIFBvbXBleSB3b3VsZCBoYW5kbGUgdGhlIHByZXNlbnQgc2l0dWF0aW9uIGluIHRoZSBiZXN0IG1hbm5lciBwb3NzaWJsZSwgYW5kIHdvdWxkIGd1YXJkIHRoZSBzdGF0ZSB3aGVuIGl0IHdhcyBlbnRydXN0ZWQgdG8gaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHByZXNlbnRseSBTY2lwaW8sIEh5cHNhZXVzLCBhbmQgTWlsbyBzb3VnaHQgdGhlIGNvbnN1bHNoaXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gb3IgdGhlIHllYXIgNTIgQi5DLiBSaW90cyBpbiBSb21lIHByZXZlbnRlZCBhbnkgZWxlY3Rpb24uIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIGxpdjwvYmlibD4uPC9ub3RlPiBUaGV5IG5vdCBvbmx5IHVzZWQgdGhvc2UgaWxsZWdhbCBtZWFucyB3aGljaCB3ZXJlIG5vdyBhIGZhbWlsaWFyIGZlYXR1cmUgaW4gcG9saXRpY2FsIGxpZmUsIG5hbWVseSwgdGhlIGdpdmluZyBvZiBnaWZ0cyBhbmQgYnJpYmVzLCBidXQgd2VyZSBvcGVubHkgcHJlc3Npbmcgb24sIGJ5IHRoZSB1c2Ugb2YgYXJtcyBhbmQgbXVyZGVyLCBpbnRvIGNpdmlsIHdhciwgd2l0aCBkYXJpbmcgYW5kIG1hZG5lc3MuIFNvbWUgdGhlcmVmb3JlIGRlbWFuZGVkIHRoYXQgUG9tcGV5IHNob3VsZCBwcmVzaWRlIG92ZXIgdGhlIGVsZWN0aW9ucy4gQ2F0byBvcHBvc2VkIHRoaXMgYXQgZmlyc3QsIHNheWluZyB0aGF0IHRoZSBsYXdzIG91Z2h0IG5vdCB0byBkZXJpdmUgdGhlaXIgc2VjdXJpdHkgZnJvbSBQb21wZXksIGJ1dCBQb21wZXkgZnJvbSB0aGUgbGF3cy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGNoYXB0ZXIgbGl2PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgY2hhcHRlciBsaXY8L3RyYW5zbGF0aW9uPg=="
translation['47.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gdGhlcmUgaGFkIGJlZW4gbm8gcmVndWxhciBnb3Zlcm5tZW50IGZvciBhIGxvbmcgdGltZSwgYW5kIHRocmVlIGFybWllcyB3ZXJlIG9jY3VweWluZyB0aGUgZm9ydW0gZGFpbHksIGFuZCB0aGUgZXZpbCBoYWQgd2VsbC1uaWdoIGJlY29tZSBwYXN0IGNoZWNraW5nLCBoZSBkZWNpZGVkIHRoYXQgbWF0dGVycyBvdWdodCB0byBiZSBwdXQgaW50byB0aGUgaGFuZHMgb2YgUG9tcGV5IGJ5IHRoZSB2b2x1bnRhcnkgZ2lmdCBvZiB0aGUgc2VuYXRlLCBiZWZvcmUgdGhlIGV4dHJlbWUgbmVjZXNzaXR5IGZvciBpdCBjYW1lLCBhbmQgdGhhdCBieSBlbXBsb3lpbmcgdGhlIG1vc3QgbW9kZXJhdGUgb2YgdW5jb25zdGl0dXRpb25hbCBtZWFzdXJlcyBhcyBhIGhlYWxpbmcgcmVtZWR5IGZvciB0aGUgY29uc2VydmF0aW9uIG9mIHRoZSBncmVhdGVzdCBpbnRlcmVzdHMsIHRoZXkgc2hvdWxkIHRoZW1zZWx2ZXMgaW50cm9kdWNlIHRoZSBtb25hcmNoeSwgcmF0aGVyIHRoYW4gYWxsb3cgZmFjdGlvbiB0byBpc3N1ZSBpbiBtb25hcmNoeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['47.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBCaWJ1bHVzLCBhIGtpbnNtYW4gb2YgQ2F0bywgbW92ZWQgaW4gdGhlIHNlbmF0ZSB0aGF0IFBvbXBleSBzaG91bGQgYmUgY2hvc2VuIHNvbGUgY29uc3VsOyBmb3IgZWl0aGVyIG1hdHRlcnMgd291bGQgYmUgcmVjdGlmaWVkIGJ5IGhpcyBzZXR0bGVtZW50IG9mIHRoZW0sIG9yIHRoZSBzdGF0ZSB3b3VsZCBiZSBpbiBzdWJqZWN0aW9uIHRvIGl0cyBtb3N0IHBvd2VyZnVsIGNpdGl6ZW4uIFRoZW4gQ2F0byByb3NlIHVwIGFuZCwgdG8gZXZlcnlvbmUncyBzdXJwcmlzZSwgYXBwcm92ZWQgdGhlIG1lYXN1cmUsIGFkdmlzaW5nIGFueSBnb3Zlcm5tZW50IGFzIGJldHRlciB0aGFuIG5vIGdvdmVybm1lbnQgYXQgYWxsLCBhbmQgc2F5aW5nIHRoYXQgaGUgZXhwZWN0ZWQgUG9tcGV5IHdvdWxkIGhhbmRsZSB0aGUgcHJlc2VudCBzaXR1YXRpb24gaW4gdGhlIGJlc3QgbWFubmVyIHBvc3NpYmxlLCBhbmQgd291bGQgZ3VhcmQgdGhlIHN0YXRlIHdoZW4gaXQgd2FzIGVudHJ1c3RlZCB0byBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIFBvbXBleSBoYWQgaW4gdGhpcyB3YXkgYmVlbiBhcHBvaW50ZWQgY29uc3VsLCBoZSBiZWdnZWQgQ2F0byB0byBjb21lIHRvIGhpbSBpbiB0aGUgc3VidXJicy4gQW5kIHdoZW4gQ2F0byB3YXMgY29tZSwgUG9tcGV5IGdhdmUgaGltIGEgZnJpZW5kbHkgd2VsY29tZSB3aXRoIHNhbHV0YXRpb25zIGFuZCBoYW5kLWNsYXNwcywgYWNrbm93bGVkZ2VkIGhpcyBvYmxpZ2F0aW9ucyB0byBoaW0sIGFuZCBpbnZpdGVkIGhpbSB0byBiZSBoaXMgY291bnNlbGxvciBhbmQgYXNzb2NpYXRlIGluIHRoZSBnb3Zlcm5tZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2F0byByZXBsaWVkIHRoYXQgaGUgaGFkIG5laXRoZXIgc3Bva2VuIGFzIGhlIGRpZCBhdCBmaXJzdCBvdXQgb2YgZW5taXR5IHRvIFBvbXBleSwgbm9yIGFzIGhlIGFmdGVyd2FyZHMgZGlkIHRvIHdpbiBoaXMgZmF2b3VyLCBidXQgaW4gZXZlcnkgY2FzZSBpbiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBzdGF0ZTsgaW4gcHJpdmF0ZSwgdGhlcmVmb3JlLCB1cG9uIGhpcyBpbnZpdGF0aW9uLCBoZSB3b3VsZCBiZSBoaXMgY291bnNlbGxvciwgYnV0IGluIHB1YmxpYywgZXZlbiB3aXRob3V0IGhpcyBpbnZpdGF0aW9uLCBoZSB3b3VsZCBjZXJ0YWlubHkgc2F5IHdoYXQgaGUgdGhvdWdodCB3YXMgYmVzdC4gQW5kIGhlIGRpZCB0aGlzLCBhcyBoZSBzYWlkIGhlIHdvdWxkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsIGZvciBpbnN0YW5jZSwgd2hlbiBQb21wZXkgd2FzIHByb3Bvc2luZyB0byBmaXggYnkgbGF3IGZyZXNoIHBlbmFsdGllcyBhbmQgaGVhdnkgcHVuaXNobWVudHMgZm9yIHRob3NlIHdobyBoYWQgYWxyZWFkeSBicmliZWQgdGhlIHBlb3BsZSwgQ2F0byB1cmdlZCBoaW0gdG8gaWdub3JlIHRoZSBwYXN0IGFuZCBnaXZlIGhpcyBhdHRlbnRpb24gdG8gdGhlIGZ1dHVyZTsgZm9yLCBoZSBzYWlkLCBpdCB3b3VsZCBub3QgYmUgZWFzeSB0byBmaXggdGhlIHBvaW50IGF0IHdoaWNoIHRoZSBpbnZlc3RpZ2F0aW9uIG9mIHBhc3QgdHJhbnNncmVzc2lvbnMgc2hvdWxkIHN0b3AsIGFuZCBpZiBwZW5hbHRpZXMgc2hvdWxkIGJlIGZpeGVkIHN1YnNlcXVlbnQgdG8gdGhlIGNyaW1lcywgdGhvc2Ugd291bGQgYmUgb3V0cmFnZW91c2x5IGRlYWx0IHdpdGggd2hvIHdlcmUgcHVuaXNoZWQgaW4gY29uZm9ybWl0eSB3aXRoIGEgbGF3IHdoaWNoIHRoZXkgd2VyZSBub3QgdHJhbnNncmVzc2luZyB3aGVuIHRoZXkgY29tbWl0dGVkIHRoZWlyIGNyaW1lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2Vjb25kIHBsYWNlLCB3aGVuIG1hbnkgcHJvbWluZW50IG1lbiB3ZXJlIG9uIHRyaWFsLCBzb21lIG9mIHdob20gd2VyZSBmcmllbmRzIGFuZCByZWxhdGlvbnMgb2YgUG9tcGV5LCBDYXRvIHNhdyB0aGF0IFBvbXBleSB3YXMgZ2l2aW5nIGluIGFuZCB5aWVsZGluZyBpbiBtYW55IGNhc2VzLCBhbmQgdGhlcmVmb3JlIHJlYnVrZWQgaGltIHNoYXJwbHkgYW5kIHRyaWVkIHRvIHNwdXIgaGltIG9uLiBNb3Jlb3ZlciwgdGhvdWdoIFBvbXBleSBoaW1zZWxmIGhhZCBtYWRlIGlsbGVnYWwgdGhlIGN1c3RvbWFyeSBwYW5lZ3lyaWNzIHVwb24gbWVuIHVuZGVyIHRyaWFsLCBoZSB3cm90ZSBhIHBhbmVneXJpYyB1cG9uIE11bmF0aXVzIFBsYW5jdXMgYW5kIGhhbmRlZCBpdCBpbiBhdCBoaXMgdHJpYWw7IGJ1dCBDYXRvICh3aG8gY2hhbmNlZCB0byBiZSBvbmUgb2YgdGhlIGp1cm9ycykgc3RvcHBlZCBoaXMgZWFycyB3aXRoIGhpcyBoYW5kcyBhbmQgcHJldmVudGVkIHRoZSByZWFkaW5nIG9mIHRoZSB0ZXN0aW1vbnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTUuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHYuIDU8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5QbGFuY3VzIGdvdCBoaW0gcmVtb3ZlZCBmcm9tIHRoZSBqdXJ5IGFmdGVyIHRoZSBzcGVlY2hlcyB3ZXJlIG92ZXIsIGFuZCB3YXMgY29udmljdGVkIG5vbmUgdGhlIGxlc3MuIEFuZCBhbHRvZ2V0aGVyIENhdG8gd2FzIGEgcGVycGxleGluZyBhbmQgdW5tYW5hZ2VhYmxlIHF1YW50aXR5IGZvciBkZWZlbmRhbnRzOyB0aGV5IG5laXRoZXIgd2lzaGVkIHRvIGFsbG93IGhpbSB0byBiZSBhIGp1cm9yIGluIHRoZWlyIGNhc2VzIG5vciBoYWQgdGhlIGNvdXJhZ2UgdG8gY2hhbGxlbmdlIGhpbS4gRm9yIG5vdCBhIGZldyBvZiB0aGVtIHdlcmUgY29udmljdGVkIGJlY2F1c2UgdGhlaXIgYXR0ZW1wdGVkIHJlamVjdGlvbiBvZiBDYXRvIG1hZGUgaXQgYXBwZWFyIHRoYXQgdGhleSBoYWQgbm8gY29uZmlkZW5jZSBpbiB0aGUganVzdGljZSBvZiB0aGVpciBjYXNlczsgYW5kIHNvbWUgd2VyZSBiaXR0ZXJseSBhc3NhaWxlZCBieSB0aGVpciByZXZpbGVycyBmb3Igbm90IGFjY2VwdGluZyBDYXRvIGFzIGp1cm9yIHdoZW4gaGUgd2FzIHByb3Bvc2VkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['48.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgUG9tcGV5IGhhZCBpbiB0aGlzIHdheSBiZWVuIGFwcG9pbnRlZCBjb25zdWwsIGhlIGJlZ2dlZCBDYXRvIHRvIGNvbWUgdG8gaGltIGluIHRoZSBzdWJ1cmJzLiBBbmQgd2hlbiBDYXRvIHdhcyBjb21lLCBQb21wZXkgZ2F2ZSBoaW0gYSBmcmllbmRseSB3ZWxjb21lIHdpdGggc2FsdXRhdGlvbnMgYW5kIGhhbmQtY2xhc3BzLCBhY2tub3dsZWRnZWQgaGlzIG9ibGlnYXRpb25zIHRvIGhpbSwgYW5kIGludml0ZWQgaGltIHRvIGJlIGhpcyBjb3Vuc2VsbG9yIGFuZCBhc3NvY2lhdGUgaW4gdGhlIGdvdmVybm1lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['48.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvIHJlcGxpZWQgdGhhdCBoZSBoYWQgbmVpdGhlciBzcG9rZW4gYXMgaGUgZGlkIGF0IGZpcnN0IG91dCBvZiBlbm1pdHkgdG8gUG9tcGV5LCBub3IgYXMgaGUgYWZ0ZXJ3YXJkcyBkaWQgdG8gd2luIGhpcyBmYXZvdXIsIGJ1dCBpbiBldmVyeSBjYXNlIGluIHRoZSBpbnRlcmVzdHMgb2YgdGhlIHN0YXRlOyBpbiBwcml2YXRlLCB0aGVyZWZvcmUsIHVwb24gaGlzIGludml0YXRpb24sIGhlIHdvdWxkIGJlIGhpcyBjb3Vuc2VsbG9yLCBidXQgaW4gcHVibGljLCBldmVuIHdpdGhvdXQgaGlzIGludml0YXRpb24sIGhlIHdvdWxkIGNlcnRhaW5seSBzYXkgd2hhdCBoZSB0aG91Z2h0IHdhcyBiZXN0LiBBbmQgaGUgZGlkIHRoaXMsIGFzIGhlIHNhaWQgaGUgd291bGQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['48.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBmaXJzdCBwbGFjZSwgZm9yIGluc3RhbmNlLCB3aGVuIFBvbXBleSB3YXMgcHJvcG9zaW5nIHRvIGZpeCBieSBsYXcgZnJlc2ggcGVuYWx0aWVzIGFuZCBoZWF2eSBwdW5pc2htZW50cyBmb3IgdGhvc2Ugd2hvIGhhZCBhbHJlYWR5IGJyaWJlZCB0aGUgcGVvcGxlLCBDYXRvIHVyZ2VkIGhpbSB0byBpZ25vcmUgdGhlIHBhc3QgYW5kIGdpdmUgaGlzIGF0dGVudGlvbiB0byB0aGUgZnV0dXJlOyBmb3IsIGhlIHNhaWQsIGl0IHdvdWxkIG5vdCBiZSBlYXN5IHRvIGZpeCB0aGUgcG9pbnQgYXQgd2hpY2ggdGhlIGludmVzdGlnYXRpb24gb2YgcGFzdCB0cmFuc2dyZXNzaW9ucyBzaG91bGQgc3RvcCwgYW5kIGlmIHBlbmFsdGllcyBzaG91bGQgYmUgZml4ZWQgc3Vic2VxdWVudCB0byB0aGUgY3JpbWVzLCB0aG9zZSB3b3VsZCBiZSBvdXRyYWdlb3VzbHkgZGVhbHQgd2l0aCB3aG8gd2VyZSBwdW5pc2hlZCBpbiBjb25mb3JtaXR5IHdpdGggYSBsYXcgd2hpY2ggdGhleSB3ZXJlIG5vdCB0cmFuc2dyZXNzaW5nIHdoZW4gdGhleSBjb21taXR0ZWQgdGhlaXIgY3JpbWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['48.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIHdoZW4gbWFueSBwcm9taW5lbnQgbWVuIHdlcmUgb24gdHJpYWwsIHNvbWUgb2Ygd2hvbSB3ZXJlIGZyaWVuZHMgYW5kIHJlbGF0aW9ucyBvZiBQb21wZXksIENhdG8gc2F3IHRoYXQgUG9tcGV5IHdhcyBnaXZpbmcgaW4gYW5kIHlpZWxkaW5nIGluIG1hbnkgY2FzZXMsIGFuZCB0aGVyZWZvcmUgcmVidWtlZCBoaW0gc2hhcnBseSBhbmQgdHJpZWQgdG8gc3B1ciBoaW0gb24uIE1vcmVvdmVyLCB0aG91Z2ggUG9tcGV5IGhpbXNlbGYgaGFkIG1hZGUgaWxsZWdhbCB0aGUgY3VzdG9tYXJ5IHBhbmVneXJpY3MgdXBvbiBtZW4gdW5kZXIgdHJpYWwsIGhlIHdyb3RlIGEgcGFuZWd5cmljIHVwb24gTXVuYXRpdXMgUGxhbmN1cyBhbmQgaGFuZGVkIGl0IGluIGF0IGhpcyB0cmlhbDsgYnV0IENhdG8gKHdobyBjaGFuY2VkIHRvIGJlIG9uZSBvZiB0aGUganVyb3JzKSBzdG9wcGVkIGhpcyBlYXJzIHdpdGggaGlzIGhhbmRzIGFuZCBwcmV2ZW50ZWQgdGhlIHJlYWRpbmcgb2YgdGhlIHRlc3RpbW9ueS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTUuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBsdi4gNTwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTUuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBsdi4gNTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx2LiA1PC90cmFuc2xhdGlvbj4="
translation['48.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBsYW5jdXMgZ290IGhpbSByZW1vdmVkIGZyb20gdGhlIGp1cnkgYWZ0ZXIgdGhlIHNwZWVjaGVzIHdlcmUgb3ZlciwgYW5kIHdhcyBjb252aWN0ZWQgbm9uZSB0aGUgbGVzcy4gQW5kIGFsdG9nZXRoZXIgQ2F0byB3YXMgYSBwZXJwbGV4aW5nIGFuZCB1bm1hbmFnZWFibGUgcXVhbnRpdHkgZm9yIGRlZmVuZGFudHM7IHRoZXkgbmVpdGhlciB3aXNoZWQgdG8gYWxsb3cgaGltIHRvIGJlIGEganVyb3IgaW4gdGhlaXIgY2FzZXMgbm9yIGhhZCB0aGUgY291cmFnZSB0byBjaGFsbGVuZ2UgaGltLiBGb3Igbm90IGEgZmV3IG9mIHRoZW0gd2VyZSBjb252aWN0ZWQgYmVjYXVzZSB0aGVpciBhdHRlbXB0ZWQgcmVqZWN0aW9uIG9mIENhdG8gbWFkZSBpdCBhcHBlYXIgdGhhdCB0aGV5IGhhZCBubyBjb25maWRlbmNlIGluIHRoZSBqdXN0aWNlIG9mIHRoZWlyIGNhc2VzOyBhbmQgc29tZSB3ZXJlIGJpdHRlcmx5IGFzc2FpbGVkIGJ5IHRoZWlyIHJldmlsZXJzIGZvciBub3QgYWNjZXB0aW5nIENhdG8gYXMganVyb3Igd2hlbiBoZSB3YXMgcHJvcG9zZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYWVzYXIsIHRob3VnaCBoZSBkZXZvdGVkIGhpbXNlbGYgdG8gaGlzIGFybWllcyBpbiBHYXVsIGFuZCB3YXMgYnVzeSB3aXRoIGFybXMsIG5ldmVydGhlbGVzcyBlbXBsb3llZCBnaWZ0cywgbW9uZXksIGFuZCBhYm92ZSBhbGwgZnJpZW5kcywgdG8gaW5jcmVhc2UgaGlzIHBvd2VyIGluIHRoZSBjaXR5LiBQcmVzZW50bHksIHRoZXJlZm9yZSwgdGhlIGFkbW9uaXRpb25zIG9mIENhdG8gcm91c2VkIFBvbXBleSBmcm9tIHRoZSBncmVhdCBpbmNyZWR1bGl0eSB3aGljaCBoZSBoYWQgaW5kdWxnZWQgaW4gdXAgdG8gdGhpcyB0aW1lLCBzbyB0aGF0IGhlIGhhZCBmb3JlYm9kaW5ncyBvZiBoaXMgcGVyaWwuIEhvd2V2ZXIsIGhlIHdhcyBzdGlsbCBnaXZlbiB0byBoZXNpdGF0aW9uIGFuZCBzcGlyaXRsZXNzIGRlbGF5IGluIGNoZWNraW5nIG9yIGF0dGFja2luZyB0aGUgdGhyZWF0ZW5pbmcgZXZpbCwgYW5kIHRoZXJlZm9yZSBDYXRvIGRldGVybWluZWQgdG8gc3RhbmQgZm9yIHRoZSBjb25zdWxzaGlwLCB0aGF0IGhlIG1pZ2h0IGF0IG9uY2UgZGVwcml2ZSBDYWVzYXIgb2YgaGlzIGFybWVkIGZvcmNlcywgb3IgY29udmljdCBoaW0gb2YgaGlzIGhvc3RpbGUgZGVzaWducy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhpcyBjb21wZXRpdG9ycyB3ZXJlIGJvdGggYWNjZXB0YWJsZSBtZW4sIGFuZCBTdWxwaWNpdXMgaGFkIGFjdHVhbGx5IGRlcml2ZWQgbXVjaCBiZW5lZml0IGZyb20gQ2F0bydzIHJlcHV0ZSBhbmQgcG93ZXIgaW4gdGhlIGNpdHksIGFuZCB3YXMgdGhlcmVmb3JlIHRob3VnaHQgdG8gYmUgYWN0aW5nIGluIGFuIGltcHJvcGVyIGFuZCBldmVuIHRoYW5rbGVzcyBtYW5uZXIuIEJ1dCBDYXRvIGhhZCBubyBmYXVsdCB0byBmaW5kIHdpdGggaGltLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlByYXksIHdoYXQgd29uZGVyIGlzIGl0LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiBhIG1hbiB3aWxsIG5vdCBzdXJyZW5kZXIgdG8gYW5vdGhlciB3aGF0IGhlIHJlZ2FyZHMgYXMgdGhlIGdyZWF0ZXN0IG9mIGFsbCBnb29kIHRoaW5ncz88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYnkgcGVyc3VhZGluZyB0aGUgc2VuYXRlIHRvIHBhc3MgYSBkZWNyZWUgdGhhdCBjYW5kaWRhdGVzIGZvciBvZmZpY2Ugc2hvdWxkIGNhbnZhc3MgdGhlIHBlb3BsZSBpbiBwZXJzb24sIGFuZCBub3Qgc29saWNpdCBub3IgY29uZmVyIHdpdGggdGhlIGNpdGl6ZW5zIHRocm91Z2ggdGhlIGFnZW5jeSBvZiBhbm90aGVyIGdvaW5nIGFib3V0IGluIHRoZWlyIGJlaGFsZiwgQ2F0byBzdGlsbCBtb3JlIGV4YXNwZXJhdGVkIHRoZSBjb21tb24gZm9saywgaW4gdGhhdCBoZSBkZXByaXZlZCB0aGVtLCBub3Qgb25seSBvZiBnZXR0aW5nIG1vbmV5LCBidXQgYWxzbyBvZiBiZXN0b3dpbmcgZmF2b3VyLCBhbmQgc28gbWFkZSB0aGVtIGF0IG9uY2UgcG9vciBhbmQgd2l0aG91dCBob25vdXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzIHRoaXMsIGhlIHdhcyBub3QgcGVyc3Vhc2l2ZSBoaW1zZWxmIGluIGNhbnZhc3NpbmcgZm9yIGhpbXNlbGYsIGJ1dCB3aXNoZWQgdG8gcHJlc2VydmUgaW4gaGlzIG1hbm5lcnMgdGhlIGRpZ25pdHkgb2YgaGlzIGxpZmUsIHJhdGhlciB0aGFuIHRvIGFjcXVpcmUgdGhhdCBvZiB0aGUgY29uc3Vsc2hpcCBieSBtYWtpbmcgdGhlIGN1c3RvbWFyeSBzYWx1dGF0aW9uczsgbmVpdGhlciB3b3VsZCBoZSBwZXJtaXQgaGlzIGZyaWVuZHMgdG8gZG8gdGhlIHRoaW5ncyBieSB3aGljaCB0aGUgbXVsdGl0dWRlIGlzIGNvdXJ0ZWQgYW5kIGNhcHRpdmF0ZWQuIEhlIHRoZXJlZm9yZSBmYWlsZWQgdG8gb2J0YWluIHRoZSBvZmZpY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['49.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhZXNhciwgdGhvdWdoIGhlIGRldm90ZWQgaGltc2VsZiB0byBoaXMgYXJtaWVzIGluIEdhdWwgYW5kIHdhcyBidXN5IHdpdGggYXJtcywgbmV2ZXJ0aGVsZXNzIGVtcGxveWVkIGdpZnRzLCBtb25leSwgYW5kIGFib3ZlIGFsbCBmcmllbmRzLCB0byBpbmNyZWFzZSBoaXMgcG93ZXIgaW4gdGhlIGNpdHkuIFByZXNlbnRseSwgdGhlcmVmb3JlLCB0aGUgYWRtb25pdGlvbnMgb2YgQ2F0byByb3VzZWQgUG9tcGV5IGZyb20gdGhlIGdyZWF0IGluY3JlZHVsaXR5IHdoaWNoIGhlIGhhZCBpbmR1bGdlZCBpbiB1cCB0byB0aGlzIHRpbWUsIHNvIHRoYXQgaGUgaGFkIGZvcmVib2RpbmdzIG9mIGhpcyBwZXJpbC4gSG93ZXZlciwgaGUgd2FzIHN0aWxsIGdpdmVuIHRvIGhlc2l0YXRpb24gYW5kIHNwaXJpdGxlc3MgZGVsYXkgaW4gY2hlY2tpbmcgb3IgYXR0YWNraW5nIHRoZSB0aHJlYXRlbmluZyBldmlsLCBhbmQgdGhlcmVmb3JlIENhdG8gZGV0ZXJtaW5lZCB0byBzdGFuZCBmb3IgdGhlIGNvbnN1bHNoaXAsIHRoYXQgaGUgbWlnaHQgYXQgb25jZSBkZXByaXZlIENhZXNhciBvZiBoaXMgYXJtZWQgZm9yY2VzLCBvciBjb252aWN0IGhpbSBvZiBoaXMgaG9zdGlsZSBkZXNpZ25zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['49.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoaXMgY29tcGV0aXRvcnMgd2VyZSBib3RoIGFjY2VwdGFibGUgbWVuLCBhbmQgU3VscGljaXVzIGhhZCBhY3R1YWxseSBkZXJpdmVkIG11Y2ggYmVuZWZpdCBmcm9tIENhdG8ncyByZXB1dGUgYW5kIHBvd2VyIGluIHRoZSBjaXR5LCBhbmQgd2FzIHRoZXJlZm9yZSB0aG91Z2h0IHRvIGJlIGFjdGluZyBpbiBhbiBpbXByb3BlciBhbmQgZXZlbiB0aGFua2xlc3MgbWFubmVyLiBCdXQgQ2F0byBoYWQgbm8gZmF1bHQgdG8gZmluZCB3aXRoIGhpbS4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlByYXksIHdoYXQgd29uZGVyIGlzIGl0LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIGEgbWFuIHdpbGwgbm90IHN1cnJlbmRlciB0byBhbm90aGVyIHdoYXQgaGUgcmVnYXJkcyBhcyB0aGUgZ3JlYXRlc3Qgb2YgYWxsIGdvb2QgdGhpbmdzPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['49.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGJ5IHBlcnN1YWRpbmcgdGhlIHNlbmF0ZSB0byBwYXNzIGEgZGVjcmVlIHRoYXQgY2FuZGlkYXRlcyBmb3Igb2ZmaWNlIHNob3VsZCBjYW52YXNzIHRoZSBwZW9wbGUgaW4gcGVyc29uLCBhbmQgbm90IHNvbGljaXQgbm9yIGNvbmZlciB3aXRoIHRoZSBjaXRpemVucyB0aHJvdWdoIHRoZSBhZ2VuY3kgb2YgYW5vdGhlciBnb2luZyBhYm91dCBpbiB0aGVpciBiZWhhbGYsIENhdG8gc3RpbGwgbW9yZSBleGFzcGVyYXRlZCB0aGUgY29tbW9uIGZvbGssIGluIHRoYXQgaGUgZGVwcml2ZWQgdGhlbSwgbm90IG9ubHkgb2YgZ2V0dGluZyBtb25leSwgYnV0IGFsc28gb2YgYmVzdG93aW5nIGZhdm91ciwgYW5kIHNvIG1hZGUgdGhlbSBhdCBvbmNlIHBvb3IgYW5kIHdpdGhvdXQgaG9ub3VyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['49.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzIHRoaXMsIGhlIHdhcyBub3QgcGVyc3Vhc2l2ZSBoaW1zZWxmIGluIGNhbnZhc3NpbmcgZm9yIGhpbXNlbGYsIGJ1dCB3aXNoZWQgdG8gcHJlc2VydmUgaW4gaGlzIG1hbm5lcnMgdGhlIGRpZ25pdHkgb2YgaGlzIGxpZmUsIHJhdGhlciB0aGFuIHRvIGFjcXVpcmUgdGhhdCBvZiB0aGUgY29uc3Vsc2hpcCBieSBtYWtpbmcgdGhlIGN1c3RvbWFyeSBzYWx1dGF0aW9uczsgbmVpdGhlciB3b3VsZCBoZSBwZXJtaXQgaGlzIGZyaWVuZHMgdG8gZG8gdGhlIHRoaW5ncyBieSB3aGljaCB0aGUgbXVsdGl0dWRlIGlzIGNvdXJ0ZWQgYW5kIGNhcHRpdmF0ZWQuIEhlIHRoZXJlZm9yZSBmYWlsZWQgdG8gb2J0YWluIHRoZSBvZmZpY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRob3VnaCB0aGUgbWF0dGVyIGJyb3VnaHQsIG5vdCBvbmx5IHRvIHRoZSB1bnN1Y2Nlc3NmdWwgY2FuZGlkYXRlcyB0aGVtc2VsdmVzLCBidXQgYWxzbyB0byB0aGVpciBmcmllbmRzIGFuZCByZWxhdGl2ZXMsIGRlamVjdGlvbiBhbmQgc29ycm93IHRpbmdlZCB3aXRoIGNvbnNpZGVyYWJsZSBzaGFtZSBmb3IgbWFueSBkYXlzLCBDYXRvIGJvcmUgc28gZWFzaWx5IHdoYXQgaGFkIGhhcHBlbmVkIHRoYXQgaGUgYW5vaW50ZWQgaGltc2VsZiBhbmQgcHJhY3Rpc2VkIGJhbGwgaW4gdGhlIENhbXB1cyBNYXJ0aXVzLCBhbmQgYWZ0ZXIgdGhlIG1pZC1kYXkgbWVhbCwgYWdhaW4sIGFzIHdhcyBoaXMgd29udCwgd2VudCBkb3duIGludG8gdGhlIGZvcnVtIHdpdGhvdXQgc2hvZXMgb3IgdHVuaWMgYW5kIHdhbGtlZCBhYm91dCB0aGVyZSB3aXRoIGhpcyBpbnRpbWF0ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDaWNlcm8gZmluZHMgZmF1bHQgd2l0aCBoaW0gYmVjYXVzZSwgd2hlbiBhZmZhaXJzIGRlbWFuZGVkIGEgbWFuIGxpa2UgaGltIGZvciBvZmZpY2UsIGhlIHdvdWxkIG5vdCBleGVydCBoaW1zZWxmIG5vciB0cnkgdG8gd2luIHRoZSBwZW9wbGUgYnkga2luZGx5IGludGVyY291cnNlIHdpdGggdGhlbSwgYnV0IGZvciB0aGUgZnV0dXJlIGFsc28gY2Vhc2VkIHRvIG1ha2UgYW55IGVmZm9ydCBhbmQgZ2F2ZSB1cCB0aGUgY29udGVzdCwgYWx0aG91Z2ggaGUgaGFkIHJlbmV3ZWQgaGlzIGNhbmRpZGFjeSBmb3IgdGhlIHByYWV0b3JzaGlwLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5DYXRvIHJlcGxpZWQsIGFjY29yZGluZ2x5LCB0aGF0IGhlIGhhZCBsb3N0IHRoZSBwcmFldG9yc2hpcCwgbm90IGJlY2F1c2UgdGhlIG1ham9yaXR5IHdpc2hlZCBpdCB0byBiZSBzbywgYnV0IGJlY2F1c2UgdGhleSB3ZXJlIGNvbnN0cmFpbmVkIG9yIGNvcnJ1cHRlZDsgd2hlcmVhcywgc2luY2UgdGhlcmUgaGFkIGJlZW4gbm8gZm91bCBwbGF5IGluIHRoZSBjb25zdWxhciBlbGVjdGlvbnMsIGhlIHNhdyBjbGVhcmx5IHRoYXQgaGUgaGFkIGdpdmVuIG9mZmVuY2UgdG8gdGhlIHBlb3BsZSBieSBoaXMgbWFubmVycy4gVGhlc2UsIGhlIHNhaWQsIG5vIG1hbiBvZiBzZW5zZSB3b3VsZCBjaGFuZ2UgdG8gcGxlYXNlIG90aGVycywgbm9yLCBrZWVwaW5nIHRoZW0gdW5jaGFuZ2VkLCB3b3VsZCBoZSBhZ2FpbiBzdWZmZXIgYSBsaWtlIGRpc2FzdGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['50.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhvdWdoIHRoZSBtYXR0ZXIgYnJvdWdodCwgbm90IG9ubHkgdG8gdGhlIHVuc3VjY2Vzc2Z1bCBjYW5kaWRhdGVzIHRoZW1zZWx2ZXMsIGJ1dCBhbHNvIHRvIHRoZWlyIGZyaWVuZHMgYW5kIHJlbGF0aXZlcywgZGVqZWN0aW9uIGFuZCBzb3Jyb3cgdGluZ2VkIHdpdGggY29uc2lkZXJhYmxlIHNoYW1lIGZvciBtYW55IGRheXMsIENhdG8gYm9yZSBzbyBlYXNpbHkgd2hhdCBoYWQgaGFwcGVuZWQgdGhhdCBoZSBhbm9pbnRlZCBoaW1zZWxmIGFuZCBwcmFjdGlzZWQgYmFsbCBpbiB0aGUgQ2FtcHVzIE1hcnRpdXMsIGFuZCBhZnRlciB0aGUgbWlkLWRheSBtZWFsLCBhZ2FpbiwgYXMgd2FzIGhpcyB3b250LCB3ZW50IGRvd24gaW50byB0aGUgZm9ydW0gd2l0aG91dCBzaG9lcyBvciB0dW5pYyBhbmQgd2Fsa2VkIGFib3V0IHRoZXJlIHdpdGggaGlzIGludGltYXRlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['50.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDaWNlcm8gZmluZHMgZmF1bHQgd2l0aCBoaW0gYmVjYXVzZSwgd2hlbiBhZmZhaXJzIGRlbWFuZGVkIGEgbWFuIGxpa2UgaGltIGZvciBvZmZpY2UsIGhlIHdvdWxkIG5vdCBleGVydCBoaW1zZWxmIG5vciB0cnkgdG8gd2luIHRoZSBwZW9wbGUgYnkga2luZGx5IGludGVyY291cnNlIHdpdGggdGhlbSwgYnV0IGZvciB0aGUgZnV0dXJlIGFsc28gY2Vhc2VkIHRvIG1ha2UgYW55IGVmZm9ydCBhbmQgZ2F2ZSB1cCB0aGUgY29udGVzdCwgYWx0aG91Z2ggaGUgaGFkIHJlbmV3ZWQgaGlzIGNhbmRpZGFjeSBmb3IgdGhlIHByYWV0b3JzaGlwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['50.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gcmVwbGllZCwgYWNjb3JkaW5nbHksIHRoYXQgaGUgaGFkIGxvc3QgdGhlIHByYWV0b3JzaGlwLCBub3QgYmVjYXVzZSB0aGUgbWFqb3JpdHkgd2lzaGVkIGl0IHRvIGJlIHNvLCBidXQgYmVjYXVzZSB0aGV5IHdlcmUgY29uc3RyYWluZWQgb3IgY29ycnVwdGVkOyB3aGVyZWFzLCBzaW5jZSB0aGVyZSBoYWQgYmVlbiBubyBmb3VsIHBsYXkgaW4gdGhlIGNvbnN1bGFyIGVsZWN0aW9ucywgaGUgc2F3IGNsZWFybHkgdGhhdCBoZSBoYWQgZ2l2ZW4gb2ZmZW5jZSB0byB0aGUgcGVvcGxlIGJ5IGhpcyBtYW5uZXJzLiBUaGVzZSwgaGUgc2FpZCwgbm8gbWFuIG9mIHNlbnNlIHdvdWxkIGNoYW5nZSB0byBwbGVhc2Ugb3RoZXJzLCBub3IsIGtlZXBpbmcgdGhlbSB1bmNoYW5nZWQsIHdvdWxkIGhlIGFnYWluIHN1ZmZlciBhIGxpa2UgZGlzYXN0ZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIENhZXNhciBoYWQgZmFsbGVuIHVwb24gd2FybGlrZSBuYXRpb25zIGFuZCBhdCBncmVhdCBoYXphcmRzIGNvbnF1ZXJlZCB0aGVtLCBhbmQgd2hlbiBpdCB3YXMgYmVsaWV2ZWQgdGhhdCBoZSBoYWQgYXR0YWNrZWQgdGhlIEdlcm1hbnMgZXZlbiBkdXJpbmcgYSB0cnVjZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA0LjEyIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZT5CZWxsLiBHYWxsLjwvdGl0bGU+IGl2LiAxMi0xNTwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAyMi4xIiB2YWxpZD0ieWVzIj5QbHV0YXJjaCwgPHRpdGxlPkNhZXNhcjwvdGl0bGU+LCB4eGlpPC9iaWJsPi48L25vdGU+IGFuZCBzbGFpbiB0aHJlZSBodW5kcmVkIHRob3VzYW5kIG9mIHRoZW0sIHRoZXJlIHdhcyBhIGdlbmVyYWwgZGVtYW5kIGF0IFJvbWUgdGhhdCB0aGUgcGVvcGxlIHNob3VsZCBvZmZlciBzYWNyaWZpY2VzIG9mIGdvb2QgdGlkaW5ncywgYnV0IENhdG8gdXJnZWQgdGhlbSB0byBzdXJyZW5kZXIgQ2Flc2FyIHRvIHRob3NlIHdob20gaGUgaGFkIHdyb25nZWQsIGFuZCBub3QgdG8gdHVybiB1cG9uIHRoZW1zZWx2ZXMsIG9yIGFsbG93IHRvIGZhbGwgdXBvbiB0aGVpciBjaXR5LCB0aGUgcG9sbHV0aW9uIG9mIGhpcyBjcmltZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhvd2V2ZXIsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmxldCB1cyBhbHNvIHNhY3JpZmljZSB0byB0aGUgZ29kcywgYmVjYXVzZSB0aGV5IGRvIG5vdCB0dXJuIHRoZSBwdW5pc2htZW50IGZvciB0aGUgZ2VuZXJhbCdzIGZvbGx5IGFuZCBtYWRuZXNzIHVwb24gaGlzIHNvbGRpZXJzLCBidXQgc3BhcmUgdGhlIGNpdHkuPC9xPiBBZnRlciB0aGlzLCBDYWVzYXIgd3JvdGUgYSBsZXR0ZXIgYW5kIHNlbnQgaXQgdG8gdGhlIHNlbmF0ZTsgYW5kIHdoZW4gaXQgd2FzIHJlYWQsIHdpdGggaXRzIGFidW5kYW50IGluc3VsdHMgYW5kIGRlbnVuY2lhdGlvbnMgb2YgQ2F0bywgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0byByb3NlIHRvIGhpcyBmZWV0IGFuZCBzaG93ZWQsIG5vdCBpbiBhbmdlciBvciBjb250ZW50aW91c25lc3MsIGJ1dCBhcyBpZiBmcm9tIGNhbGN1bGF0aW9uIGFuZCBkdWUgcHJlcGFyYXRpb24sIHRoYXQgdGhlIGFjY3VzYXRpb25zIGFnYWluc3QgaGltIGJvcmUgdGhlIG1hcmtzIG9mIGFidXNlIGFuZCBzY29mZmluZywgYW5kIHdlcmUgY2hpbGRpc2huZXNzIGFuZCB2dWxnYXJpdHkgb24gQ2Flc2FyJ3MgcGFydC4gVGhlbiwgYXNzYWlsaW5nIENhZXNhcidzIHBsYW5zIGZyb20gdGhlIG91dHNldCBhbmQgcmV2ZWFsaW5nIGNsZWFybHkgYWxsIGhpcyBwdXJwb3NlLCBhcyBpZiBoZSB3ZXJlIGhpcyBmZWxsb3cgY29uc3BpcmF0b3IgYW5kIHBhcnRuZXIgYW5kIG5vdCBoaXMgZW5lbXksIGhlIGRlY2xhcmVkIHRoYXQgaXQgd2FzIG5vdCB0aGUgc29ucyBvZiBHZXJtYW5zIG9yIENlbHRzIHdob20gdGhleSBtdXN0IGZlYXIsIGJ1dCBDYWVzYXIgaGltc2VsZiwgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+aWYgdGhleSB3ZXJlIGluIHRoZWlyIHJpZ2h0IG1pbmRzLCBhbmQgc28gbW92ZWQgYW5kIGluY2l0ZWQgaGlzIGhlYXJlcnMgdGhhdCB0aGUgZnJpZW5kcyBvZiBDYWVzYXIgd2VyZSBzb3JyeSB0aGF0IGJ5IGhhdmluZyB0aGUgbGV0dGVyIHJlYWQgaW4gdGhlIHNlbmF0ZSB0aGV5IGhhZCBnaXZlbiBDYXRvIGFuIG9wcG9ydHVuaXR5IGZvciBqdXN0IGFyZ3VtZW50cyBhbmQgdHJ1ZSBkZW51bmNpYXRpb25zLiBIb3dldmVyLCBub3RoaW5nIHdhcyBkb25lLCBidXQgaXQgd2FzIG1lcmVseSBzYWlkIHRoYXQgaXQgd2VyZSB3ZWxsIHRvIGdpdmUgQ2Flc2FyIGEgc3VjY2Vzc29yLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2Flc2FyPC90aXRsZT4sIHh4eC48L2JpYmw+OyB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDU4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx2aWlpPC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gQ2Flc2FyJ3MgZnJpZW5kcyBkZW1hbmRlZCB0aGF0IFBvbXBleSBhbHNvLCBhcyB3ZWxsIGFzIENhZXNhciwgc2hvdWxkIGxheSBkb3duIGhpcyBhcm1zIGFuZCBnaXZlIHVwIGhpcyBwcm92aW5jZXMsIG9yIGVsc2UgdGhhdCBDYWVzYXIgc2hvdWxkIG5vdCBkbyBzbyBlaXRoZXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm93PC9xPiBzaG91dGVkIENhdG8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvc2UgdGhpbmdzIGFyZSBjb21lIHRvIHBhc3Mgd2hpY2ggSSBmb3JldG9sZCB0byB5b3UsIGFuZCB0aGUgbWFuIGlzIGF0IGxhc3QgcmVzb3J0aW5nIHRvIG9wZW4gY29tcHVsc2lvbiwgdXNpbmcgdGhlIGZvcmNlcyB3aGljaCBoZSBnb3QgYnkgZGVjZWl2aW5nIGFuZCBjaGVhdGluZyB0aGUgc3RhdGUuPC9xPiBPdXRzaWRlIHRoZSBzZW5hdGUtaG91c2UsIGhvd2V2ZXIsIENhdG8gY291bGQgYWNjb21wbGlzaCBub3RoaW5nLCBzaW5jZSB0aGUgcGVvcGxlIHdpc2hlZCBhbGwgYWxvbmcgdGhhdCBDYWVzYXIgc2hvdWxkIGhhdmUgdGhlIGNoaWVmIHBvd2VyOyBhbmQgYWx0aG91Z2ggQ2F0byBoYWQgdGhlIHNlbmF0ZSB1bmRlciBoaXMgaW5mbHVlbmNlLCBpdCB3YXMgYWZyYWlkIG9mIHRoZSBwZW9wbGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['51.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgQ2Flc2FyIGhhZCBmYWxsZW4gdXBvbiB3YXJsaWtlIG5hdGlvbnMgYW5kIGF0IGdyZWF0IGhhemFyZHMgY29ucXVlcmVkIHRoZW0sIGFuZCB3aGVuIGl0IHdhcyBiZWxpZXZlZCB0aGF0IGhlIGhhZCBhdHRhY2tlZCB0aGUgR2VybWFucyBldmVuIGR1cmluZyBhIHRydWNlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA0LjEyIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIEdhbGwuPC90aXRsZT4gaXYuIDEyLTE1PC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMjIuMSIgdmFsaWQ9InllcyI+UGx1dGFyY2gsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4eGlpPC9iaWJsPi48L25vdGU+IGFuZCBzbGFpbiB0aHJlZSBodW5kcmVkIHRob3VzYW5kIG9mIHRoZW0sIHRoZXJlIHdhcyBhIGdlbmVyYWwgZGVtYW5kIGF0IFJvbWUgdGhhdCB0aGUgcGVvcGxlIHNob3VsZCBvZmZlciBzYWNyaWZpY2VzIG9mIGdvb2QgdGlkaW5ncywgYnV0IENhdG8gdXJnZWQgdGhlbSB0byBzdXJyZW5kZXIgQ2Flc2FyIHRvIHRob3NlIHdob20gaGUgaGFkIHdyb25nZWQsIGFuZCBub3QgdG8gdHVybiB1cG9uIHRoZW1zZWx2ZXMsIG9yIGFsbG93IHRvIGZhbGwgdXBvbiB0aGVpciBjaXR5LCB0aGUgcG9sbHV0aW9uIG9mIGhpcyBjcmltZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDQuMTIiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gR2FsbC48L3RpdGxlPiBpdi4gMTItMTU8L2JpYmw+OyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBHYWxsLjwvdGl0bGU+IGl2LiAxMi0xNTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDIyLjEiIHZhbGlkPSJ5ZXMiPlBsdXRhcmNoLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeHhpaTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHh4aWk8L3RyYW5zbGF0aW9uPg=="
translation['51.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhvd2V2ZXIsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bGV0IHVzIGFsc28gc2FjcmlmaWNlIHRvIHRoZSBnb2RzLCBiZWNhdXNlIHRoZXkgZG8gbm90IHR1cm4gdGhlIHB1bmlzaG1lbnQgZm9yIHRoZSBnZW5lcmFsJ3MgZm9sbHkgYW5kIG1hZG5lc3MgdXBvbiBoaXMgc29sZGllcnMsIGJ1dCBzcGFyZSB0aGUgY2l0eS48L3E+IEFmdGVyIHRoaXMsIENhZXNhciB3cm90ZSBhIGxldHRlciBhbmQgc2VudCBpdCB0byB0aGUgc2VuYXRlOyBhbmQgd2hlbiBpdCB3YXMgcmVhZCwgd2l0aCBpdHMgYWJ1bmRhbnQgaW5zdWx0cyBhbmQgZGVudW5jaWF0aW9ucyBvZiBDYXRvLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['51.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gcm9zZSB0byBoaXMgZmVldCBhbmQgc2hvd2VkLCBub3QgaW4gYW5nZXIgb3IgY29udGVudGlvdXNuZXNzLCBidXQgYXMgaWYgZnJvbSBjYWxjdWxhdGlvbiBhbmQgZHVlIHByZXBhcmF0aW9uLCB0aGF0IHRoZSBhY2N1c2F0aW9ucyBhZ2FpbnN0IGhpbSBib3JlIHRoZSBtYXJrcyBvZiBhYnVzZSBhbmQgc2NvZmZpbmcsIGFuZCB3ZXJlIGNoaWxkaXNobmVzcyBhbmQgdnVsZ2FyaXR5IG9uIENhZXNhcidzIHBhcnQuIFRoZW4sIGFzc2FpbGluZyBDYWVzYXIncyBwbGFucyBmcm9tIHRoZSBvdXRzZXQgYW5kIHJldmVhbGluZyBjbGVhcmx5IGFsbCBoaXMgcHVycG9zZSwgYXMgaWYgaGUgd2VyZSBoaXMgZmVsbG93IGNvbnNwaXJhdG9yIGFuZCBwYXJ0bmVyIGFuZCBub3QgaGlzIGVuZW15LCBoZSBkZWNsYXJlZCB0aGF0IGl0IHdhcyBub3QgdGhlIHNvbnMgb2YgR2VybWFucyBvciBDZWx0cyB3aG9tIHRoZXkgbXVzdCBmZWFyLCBidXQgQ2Flc2FyIGhpbXNlbGYsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['51.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmlmIHRoZXkgd2VyZSBpbiB0aGVpciByaWdodCBtaW5kcywgYW5kIHNvIG1vdmVkIGFuZCBpbmNpdGVkIGhpcyBoZWFyZXJzIHRoYXQgdGhlIGZyaWVuZHMgb2YgQ2Flc2FyIHdlcmUgc29ycnkgdGhhdCBieSBoYXZpbmcgdGhlIGxldHRlciByZWFkIGluIHRoZSBzZW5hdGUgdGhleSBoYWQgZ2l2ZW4gQ2F0byBhbiBvcHBvcnR1bml0eSBmb3IganVzdCBhcmd1bWVudHMgYW5kIHRydWUgZGVudW5jaWF0aW9ucy4gSG93ZXZlciwgbm90aGluZyB3YXMgZG9uZSwgYnV0IGl0IHdhcyBtZXJlbHkgc2FpZCB0aGF0IGl0IHdlcmUgd2VsbCB0byBnaXZlIENhZXNhciBhIHN1Y2Nlc3Nvci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4eHguPC9iaWJsPjsgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDU4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHZpaWk8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeHh4LjwvYmlibD47IHRoZSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeHh4LjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDU4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHZpaWk8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBsdmlpaTwvdHJhbnNsYXRpb24+"
translation['51.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIENhZXNhcidzIGZyaWVuZHMgZGVtYW5kZWQgdGhhdCBQb21wZXkgYWxzbywgYXMgd2VsbCBhcyBDYWVzYXIsIHNob3VsZCBsYXkgZG93biBoaXMgYXJtcyBhbmQgZ2l2ZSB1cCBoaXMgcHJvdmluY2VzLCBvciBlbHNlIHRoYXQgQ2Flc2FyIHNob3VsZCBub3QgZG8gc28gZWl0aGVyLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm93PC9xPiBzaG91dGVkIENhdG8sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aG9zZSB0aGluZ3MgYXJlIGNvbWUgdG8gcGFzcyB3aGljaCBJIGZvcmV0b2xkIHRvIHlvdSwgYW5kIHRoZSBtYW4gaXMgYXQgbGFzdCByZXNvcnRpbmcgdG8gb3BlbiBjb21wdWxzaW9uLCB1c2luZyB0aGUgZm9yY2VzIHdoaWNoIGhlIGdvdCBieSBkZWNlaXZpbmcgYW5kIGNoZWF0aW5nIHRoZSBzdGF0ZS48L3E+IE91dHNpZGUgdGhlIHNlbmF0ZS1ob3VzZSwgaG93ZXZlciwgQ2F0byBjb3VsZCBhY2NvbXBsaXNoIG5vdGhpbmcsIHNpbmNlIHRoZSBwZW9wbGUgd2lzaGVkIGFsbCBhbG9uZyB0aGF0IENhZXNhciBzaG91bGQgaGF2ZSB0aGUgY2hpZWYgcG93ZXI7IGFuZCBhbHRob3VnaCBDYXRvIGhhZCB0aGUgc2VuYXRlIHVuZGVyIGhpcyBpbmZsdWVuY2UsIGl0IHdhcyBhZnJhaWQgb2YgdGhlIHBlb3BsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gQXJpbWludW0gd2FzIG9jY3VwaWVkPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDkgQi5DLiBDZiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDMyLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2Flc2FyPC90aXRsZT4sIHh4eGlpLiBmaW4uPC9iaWJsPjsgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2MC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBseC4gMTwvYmlibD4uPC9ub3RlPiBhbmQgQ2Flc2FyIHdhcyByZXBvcnRlZCB0byBiZSBtYXJjaGluZyBhZ2FpbnN0IHRoZSBjaXR5IHdpdGggYW4gYXJteSwgdGhlbiBhbGwgZXllcyB3ZXJlIHR1cm5lZCB1cG9uIENhdG8sIGJvdGggdGhvc2Ugb2YgdGhlIGNvbW1vbiBwZW9wbGUgYW5kIHRob3NlIG9mIFBvbXBleSBhcyB3ZWxsOyB0aGV5IHJlYWxpc2VkIHRoYXQgaGUgYWxvbmUgaGFkIGZyb20gdGhlIG91dHNldCBmb3Jlc2VlbiwgYW5kIGZpcnN0IG9wZW5seSBmb3JldG9sZCwgdGhlIGRlc2lnbnMgb2YgQ2Flc2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5DYXRvIHRoZXJlZm9yZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5heSwgbWVuLCBpZiBhbnkgb2YgeW91IGhhZCBoZWVkZWQgd2hhdCBJIHdhcyBldmVyIGZvcmV0ZWxsaW5nIGFuZCBhZHZpc2luZywgeWUgd291bGQgbm93IG5laXRoZXIgYmUgZmVhcmluZyBhIHNpbmdsZSBtYW4gbm9yIHB1dHRpbmcgeW91ciBob3BlcyBpbiBhIHNpbmdsZSBtYW4uPC9xPiBQb21wZXkgYWNrbm93bGVkZ2VkIHRoYXQgQ2F0byBoYWQgc3Bva2VuIG1vcmUgbGlrZSBhIHByb3BoZXQsIHdoaWxlIGhlIGhpbXNlbGYgaGFkIGFjdGVkIHRvbyBtdWNoIGxpa2UgYSBmcmllbmQuIENhdG8gdGhlbiBhZHZpc2VkIHRoZSBzZW5hdGUgdG8gcHV0IGFmZmFpcnMgaW50byB0aGUgaGFuZHMgb2YgUG9tcGV5IGFsb25lOyBmb3IgdGhlIHNhbWUgbWVuIHdobyBjYXVzZWQgZ3JlYXQgZXZpbHMsIGhlIHNhaWQsIHNob3VsZCBwdXQgYSBzdG9wIHRvIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgaG93ZXZlciwgd2hvIGhhZCBubyBmb3JjZXMgaW4gcmVhZGluZXNzLCBhbmQgc2F3IHRoYXQgdGhvc2Ugd2hpY2ggaGUgd2FzIHRoZW4gZW5yb2xsaW5nIHdlcmUgd2l0aG91dCB6ZWFsLCBmb3Jzb29rIFJvbWU7IGFuZCBDYXRvLCB3aG8gaGFkIGRldGVybWluZWQgdG8gZm9sbG93IGhpbSBhbmQgc2hhcmUgaGlzIGV4aWxlLCBzZW50IGhpcyB5b3VuZ2VyIHNvbiB0byBNdW5hdGl1cyBpbiBCcnV0dGl1bSBmb3Igc2FmZSBrZWVwaW5nLCBidXQga2VwdCBoaXMgZWxkZXIgc29uIHdpdGggaGltc2VsZi4gQW5kIHNpbmNlIGhpcyBob3VzZWhvbGQgYW5kIGhpcyBkYXVnaHRlcnMgbmVlZGVkIHNvbWVvbmUgdG8gbG9vayBhZnRlciB0aGVtLCBoZSB0b29rIHRvIHdpZmUgYWdhaW4gTWFyY2lhLCBub3cgYSB3aWRvdyB3aXRoIGdyZWF0IHdlYWx0aDsgZm9yIEhvcnRlbnNpdXMsIG9uIGhpcyBkZWF0aCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA1MCBCLkMuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMjUuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHY8L2JpYmw+Ljwvbm90ZT4gaGFkIGxlZnQgaGVyIGhpcyBoZWlyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgd2l0aCByZWZlcmVuY2UgdG8gdGhpcyB0aGF0IENhZXNhciBoZWFwZWQgbW9zdCBhYnVzZSB1cG9uIENhdG8sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gaGlzIHRyZWF0aXNlIGVudGl0bGVkIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFudGktQ2F0by48L3E+IENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMTEuNCIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aS4gNDwvYmlibD4uPC9ub3RlPiBjaGFyZ2luZyBoaW0gd2l0aCBhdmFyaWNlIGFuZCB3aXRoIHRyYWZmaWNraW5nIGluIG1hcnJpYWdlLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciB3aHksPC9xPiBzYWlkIENhZXNhciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zaG91bGQgQ2F0byBnaXZlIHVwIGhpcyB3aWZlIGlmIGhlIHdhbnRlZCBoZXIsIG9yIHdoeSwgaWYgaGUgZGlkIG5vdCB3YW50IGhlciwgc2hvdWxkIGhlIHRha2UgaGVyIGJhY2sgYWdhaW4/IFVubGVzcyBpdCB3YXMgdHJ1ZSB0aGF0IHRoZSB3b21hbiB3YXMgYXQgdGhlIGZpcnN0IHNldCBhcyBhIGJhaXQgZm9yIEhvcnRlbnNpdXMsIGFuZCBsZW50IGJ5IENhdG8gd2hlbiBzaGUgd2FzIHlvdW5nIHRoYXQgaGUgbWlnaHQgdGFrZSBoZXIgYmFjayB3aGVuIHNoZSB3YXMgcmljaC48L3E+IFRvIHRoZXNlIGNoYXJnZXMsIGhvd2V2ZXIsIHRoZSB3ZWxsLWtub3duIHZlcnNlcyBvZiBFdXJpcGlkZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkV1ci4gSGVyLiAxNzMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SGVyY3VsZXMgRnVyZW5zPC90aXRsZT4sIDE3MyBmPC9iaWJsPi4gKEtpcmNoaG9mZikuPC9ub3RlPiBhcHBseSB2ZXJ5IHdlbGw64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkZpcnN0LCB0aGVuLCB0aGUgdGhpbmdzIG5vdCB0byBiZSBuYW1lZDsgZm9yIGluIHRoYXQgY2xhc3M8L2w+CgkJCQkJICAgICAgICAgIDxsPkkgcmVja29uLCBIZXJhY2xlcywgYWxsIGNvd2FyZGljZSBpbiB0aGVlOzwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJZm9yIHRvIGNoYXJnZSBDYXRvIHdpdGggYSBzb3JkaWQgbG92ZSBvZiBnYWluIGlzIGxpa2UgcmVwcm9hY2hpbmcgSGVyYWNsZXMgd2l0aCBjb3dhcmRpY2UuIEJ1dCB3aGV0aGVyIG9uIG90aGVyIGdyb3VuZHMsIHBlcmhhcHMsIHRoZSBtYXJyaWFnZSB3YXMgaW1wcm9wZXIsIHdlcmUgbWF0dGVyIGZvciBpbnZlc3RpZ2F0aW9uLiBGb3Igbm8gc29vbmVyIGhhZCBDYXRvIGVzcG91c2VkIE1hcmNpYSB0aGFuIGhlIGNvbW1pdHRlZCB0byBoZXIgY2FyZSBoaXMgaG91c2Vob2xkIGFuZCBoaXMgZGF1Z2h0ZXJzLCBhbmQgc2V0IG91dCBoaW1zZWxmIGluIHB1cnN1aXQgb2YgUG9tcGV5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['52.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gQXJpbWludW0gd2FzIG9jY3VwaWVkPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA0OSBCLkMuIENmIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAzMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHh4eGlpLiBmaW4uPC9iaWJsPjsgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDYwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHguIDE8L2JpYmw+Ljwvbm90ZT4gYW5kIENhZXNhciB3YXMgcmVwb3J0ZWQgdG8gYmUgbWFyY2hpbmcgYWdhaW5zdCB0aGUgY2l0eSB3aXRoIGFuIGFybXksIHRoZW4gYWxsIGV5ZXMgd2VyZSB0dXJuZWQgdXBvbiBDYXRvLCBib3RoIHRob3NlIG9mIHRoZSBjb21tb24gcGVvcGxlIGFuZCB0aG9zZSBvZiBQb21wZXkgYXMgd2VsbDsgdGhleSByZWFsaXNlZCB0aGF0IGhlIGFsb25lIGhhZCBmcm9tIHRoZSBvdXRzZXQgZm9yZXNlZW4sIGFuZCBmaXJzdCBvcGVubHkgZm9yZXRvbGQsIHRoZSBkZXNpZ25zIG9mIENhZXNhci4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAzMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHh4eGlpLiBmaW4uPC9iaWJsPjsgdGhlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4eHhpaS4gZmluLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDYwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHguIDE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBseC4gMTwvdHJhbnNsYXRpb24+"
translation['52.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gdGhlcmVmb3JlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksIG1lbiwgaWYgYW55IG9mIHlvdSBoYWQgaGVlZGVkIHdoYXQgSSB3YXMgZXZlciBmb3JldGVsbGluZyBhbmQgYWR2aXNpbmcsIHllIHdvdWxkIG5vdyBuZWl0aGVyIGJlIGZlYXJpbmcgYSBzaW5nbGUgbWFuIG5vciBwdXR0aW5nIHlvdXIgaG9wZXMgaW4gYSBzaW5nbGUgbWFuLjwvcT4gUG9tcGV5IGFja25vd2xlZGdlZCB0aGF0IENhdG8gaGFkIHNwb2tlbiBtb3JlIGxpa2UgYSBwcm9waGV0LCB3aGlsZSBoZSBoaW1zZWxmIGhhZCBhY3RlZCB0b28gbXVjaCBsaWtlIGEgZnJpZW5kLiBDYXRvIHRoZW4gYWR2aXNlZCB0aGUgc2VuYXRlIHRvIHB1dCBhZmZhaXJzIGludG8gdGhlIGhhbmRzIG9mIFBvbXBleSBhbG9uZTsgZm9yIHRoZSBzYW1lIG1lbiB3aG8gY2F1c2VkIGdyZWF0IGV2aWxzLCBoZSBzYWlkLCBzaG91bGQgcHV0IGEgc3RvcCB0byB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['52.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgaG93ZXZlciwgd2hvIGhhZCBubyBmb3JjZXMgaW4gcmVhZGluZXNzLCBhbmQgc2F3IHRoYXQgdGhvc2Ugd2hpY2ggaGUgd2FzIHRoZW4gZW5yb2xsaW5nIHdlcmUgd2l0aG91dCB6ZWFsLCBmb3Jzb29rIFJvbWU7IGFuZCBDYXRvLCB3aG8gaGFkIGRldGVybWluZWQgdG8gZm9sbG93IGhpbSBhbmQgc2hhcmUgaGlzIGV4aWxlLCBzZW50IGhpcyB5b3VuZ2VyIHNvbiB0byBNdW5hdGl1cyBpbiBCcnV0dGl1bSBmb3Igc2FmZSBrZWVwaW5nLCBidXQga2VwdCBoaXMgZWxkZXIgc29uIHdpdGggaGltc2VsZi4gQW5kIHNpbmNlIGhpcyBob3VzZWhvbGQgYW5kIGhpcyBkYXVnaHRlcnMgbmVlZGVkIHNvbWVvbmUgdG8gbG9vayBhZnRlciB0aGVtLCBoZSB0b29rIHRvIHdpZmUgYWdhaW4gTWFyY2lhLCBub3cgYSB3aWRvdyB3aXRoIGdyZWF0IHdlYWx0aDsgZm9yIEhvcnRlbnNpdXMsIG9uIGhpcyBkZWF0aCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDUwIEIuQy4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDI1LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh2PC9iaWJsPi48L25vdGU+IGhhZCBsZWZ0IGhlciBoaXMgaGVpci4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyNS4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4djwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['52.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB3aXRoIHJlZmVyZW5jZSB0byB0aGlzIHRoYXQgQ2Flc2FyIGhlYXBlZCBtb3N0IGFidXNlIHVwb24gQ2F0byw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIGhpcyB0cmVhdGlzZSBlbnRpdGxlZCAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFudGktQ2F0by48L3E+IENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAxMS40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpLiA0PC9iaWJsPi48L25vdGU+IGNoYXJnaW5nIGhpbSB3aXRoIGF2YXJpY2UgYW5kIHdpdGggdHJhZmZpY2tpbmcgaW4gbWFycmlhZ2UuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbnRpLUNhdG8uPC9xPiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMTEuNCIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aS4gNDwvYmlibD4uPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3Igd2h5LDwvcT4gc2FpZCBDYWVzYXIsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zaG91bGQgQ2F0byBnaXZlIHVwIGhpcyB3aWZlIGlmIGhlIHdhbnRlZCBoZXIsIG9yIHdoeSwgaWYgaGUgZGlkIG5vdCB3YW50IGhlciwgc2hvdWxkIGhlIHRha2UgaGVyIGJhY2sgYWdhaW4/IFVubGVzcyBpdCB3YXMgdHJ1ZSB0aGF0IHRoZSB3b21hbiB3YXMgYXQgdGhlIGZpcnN0IHNldCBhcyBhIGJhaXQgZm9yIEhvcnRlbnNpdXMsIGFuZCBsZW50IGJ5IENhdG8gd2hlbiBzaGUgd2FzIHlvdW5nIHRoYXQgaGUgbWlnaHQgdGFrZSBoZXIgYmFjayB3aGVuIHNoZSB3YXMgcmljaC48L3E+IFRvIHRoZXNlIGNoYXJnZXMsIGhvd2V2ZXIsIHRoZSB3ZWxsLWtub3duIHZlcnNlcyBvZiBFdXJpcGlkZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIEhlci4gMTczIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVyY3VsZXMgRnVyZW5zPC90aXRsZT4sIDE3MyBmPC9iaWJsPi4gKEtpcmNoaG9mZikuPC9ub3RlPiBhcHBseSB2ZXJ5IHdlbGw64oCUCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIEhlci4gMTczIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVyY3VsZXMgRnVyZW5zPC90aXRsZT4sIDE3MyBmPC9iaWJsPi4gKEtpcmNoaG9mZikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVyY3VsZXMgRnVyZW5zPC90aXRsZT4sIDE3MyBmPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rmlyc3QsIHRoZW4sIHRoZSB0aGluZ3Mgbm90IHRvIGJlIG5hbWVkOyBmb3IgaW4gdGhhdCBjbGFzczwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5JIHJlY2tvbiwgSGVyYWNsZXMsIGFsbCBjb3dhcmRpY2UgaW4gdGhlZTs8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rmlyc3QsIHRoZW4sIHRoZSB0aGluZ3Mgbm90IHRvIGJlIG5hbWVkOyBmb3IgaW4gdGhhdCBjbGFzczwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5JIHJlY2tvbiwgSGVyYWNsZXMsIGFsbCBjb3dhcmRpY2UgaW4gdGhlZTs8L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['52.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJZm9yIHRvIGNoYXJnZSBDYXRvIHdpdGggYSBzb3JkaWQgbG92ZSBvZiBnYWluIGlzIGxpa2UgcmVwcm9hY2hpbmcgSGVyYWNsZXMgd2l0aCBjb3dhcmRpY2UuIEJ1dCB3aGV0aGVyIG9uIG90aGVyIGdyb3VuZHMsIHBlcmhhcHMsIHRoZSBtYXJyaWFnZSB3YXMgaW1wcm9wZXIsIHdlcmUgbWF0dGVyIGZvciBpbnZlc3RpZ2F0aW9uLiBGb3Igbm8gc29vbmVyIGhhZCBDYXRvIGVzcG91c2VkIE1hcmNpYSB0aGFuIGhlIGNvbW1pdHRlZCB0byBoZXIgY2FyZSBoaXMgaG91c2Vob2xkIGFuZCBoaXMgZGF1Z2h0ZXJzLCBhbmQgc2V0IG91dCBoaW1zZWxmIGluIHB1cnN1aXQgb2YgUG9tcGV5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZnJvbSB0aGF0IGRheSwgYXMgd2UgYXJlIHRvbGQ7IENhdG8gbmVpdGhlciBjdXQgaGlzIGhhaXIgbm9yIHRyaW1tZWQgaGlzIGJlYXJkIG5vciBwdXQgb24gYSBnYXJsYW5kLCBidXQgbWFpbnRhaW5lZCB0aGUgc2FtZSBtaWVuIG9mIHNvcnJvdywgZGVqZWN0aW9uLCBhbmQgaGVhdmluZXNzIG9mIHNwaXJpdCBpbiB2aWV3IG9mIHRoZSBjYWxhbWl0aWVzIG9mIGhpcyBjb3VudHJ5LCBhbGlrZSBpbiB2aWN0b3J5IGFuZCBpbiBkZWZlYXQsIHVudGlsIHRoZSBlbmQuIEF0IHRoZSB0aW1lLCBob3dldmVyLCBoYXZpbmcgaGFkIFNpY2lseSBhbGxvdHRlZCB0byBoaW0gYXMgYSBwcm92aW5jZSwgaGUgY3Jvc3NlZCBvdmVyIHRvIFN5cmFjdXNlLCBhbmQgb24gbGVhcm5pbmcgdGhhdCBBc2luaXVzIFBvbGxpbyBoYWQgY29tZSB0byBNZXNzYW5hIHdpdGggYSBmb3JjZSBmcm9tIHRoZSBlbmVteSwgaGUgc2VudCBhbmQgZGVtYW5kZWQgYSByZWFzb24gZm9yIGhpcyBjb21pbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoYXZpbmcgYmVlbiBhc2tlZCBieSBQb2xsaW8gaW4gdHVybiBhIHJlYXNvbiBmb3IgdGhlIGNvbnZ1bHNpb24gaW4gdGhlIHN0YXRlLCBhbmQgaGVhcmluZyB0aGF0IFBvbXBleSBoYWQgYWJhbmRvbmVkIEl0YWx5IGFsdG9nZXRoZXIsIGFuZCB3YXMgZW5jYW1wZWQgYXQgRHlycmhhY2hpdW0sIGhlIHJlbWFya2VkIHRoYXQgdGhlcmUgd2FzIG11Y2ggaW5jb25zaXN0ZW5jeSBhbmQgb2JzY3VyaXR5IGluIHRoZSBkaXZpbmUgZ292ZXJubWVudCwgc2luY2UgUG9tcGV5IGhhZCBiZWVuIGludmluY2libGUgd2hpbGUgaGlzIGNvdXJzZSB3YXMgbmVpdGhlciBzb3VuZCBub3IganVzdCwgYnV0IG5vdywgd2hlbiBoZSB3aXNoZWQgdG8gc2F2ZSBoaXMgY291bnRyeSBhbmQgd2FzIGZpZ2h0aW5nIGluIGRlZmVuY2Ugb2YgbGliZXJ0eSwgaGUgaGFkIGJlZW4gZGVzZXJ0ZWQgYnkgaGlzIGdvb2QgZm9ydHVuZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIEFzaW5pdXMsIGluZGVlZCwgQ2F0byBzYWlkIGhlIHdhcyBhYmxlIHRvIGRyaXZlIGhpbSBvdXQgb2YgU2ljaWx5OyBidXQgc2luY2UgYW5vdGhlciBhbmQgYSBsYXJnZXIgZm9yY2Ugd2FzIGNvbWluZyB0byBoaXMgYWlkLCBoZSBkaWQgbm90IHdpc2ggdG8gcnVpbiB0aGUgaXNsYW5kIGJ5IGludm9sdmluZyBpdCBpbiB3YXIsIGFuZCB0aGVyZWZvcmUsIGFmdGVyIGFkdmlzaW5nIHRoZSBTeXJhY3VzYW5zIHRvIHNlZWsgc2FmZXR5IGJ5IGpvaW5pbmcgdGhlIHZpY3RvcmlvdXMgcGFydHksIGhlIHNhaWxlZCBhd2F5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['53.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGZyb20gdGhhdCBkYXksIGFzIHdlIGFyZSB0b2xkOyBDYXRvIG5laXRoZXIgY3V0IGhpcyBoYWlyIG5vciB0cmltbWVkIGhpcyBiZWFyZCBub3IgcHV0IG9uIGEgZ2FybGFuZCwgYnV0IG1haW50YWluZWQgdGhlIHNhbWUgbWllbiBvZiBzb3Jyb3csIGRlamVjdGlvbiwgYW5kIGhlYXZpbmVzcyBvZiBzcGlyaXQgaW4gdmlldyBvZiB0aGUgY2FsYW1pdGllcyBvZiBoaXMgY291bnRyeSwgYWxpa2UgaW4gdmljdG9yeSBhbmQgaW4gZGVmZWF0LCB1bnRpbCB0aGUgZW5kLiBBdCB0aGUgdGltZSwgaG93ZXZlciwgaGF2aW5nIGhhZCBTaWNpbHkgYWxsb3R0ZWQgdG8gaGltIGFzIGEgcHJvdmluY2UsIGhlIGNyb3NzZWQgb3ZlciB0byBTeXJhY3VzZSwgYW5kIG9uIGxlYXJuaW5nIHRoYXQgQXNpbml1cyBQb2xsaW8gaGFkIGNvbWUgdG8gTWVzc2FuYSB3aXRoIGEgZm9yY2UgZnJvbSB0aGUgZW5lbXksIGhlIHNlbnQgYW5kIGRlbWFuZGVkIGEgcmVhc29uIGZvciBoaXMgY29taW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['53.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoYXZpbmcgYmVlbiBhc2tlZCBieSBQb2xsaW8gaW4gdHVybiBhIHJlYXNvbiBmb3IgdGhlIGNvbnZ1bHNpb24gaW4gdGhlIHN0YXRlLCBhbmQgaGVhcmluZyB0aGF0IFBvbXBleSBoYWQgYWJhbmRvbmVkIEl0YWx5IGFsdG9nZXRoZXIsIGFuZCB3YXMgZW5jYW1wZWQgYXQgRHlycmhhY2hpdW0sIGhlIHJlbWFya2VkIHRoYXQgdGhlcmUgd2FzIG11Y2ggaW5jb25zaXN0ZW5jeSBhbmQgb2JzY3VyaXR5IGluIHRoZSBkaXZpbmUgZ292ZXJubWVudCwgc2luY2UgUG9tcGV5IGhhZCBiZWVuIGludmluY2libGUgd2hpbGUgaGlzIGNvdXJzZSB3YXMgbmVpdGhlciBzb3VuZCBub3IganVzdCwgYnV0IG5vdywgd2hlbiBoZSB3aXNoZWQgdG8gc2F2ZSBoaXMgY291bnRyeSBhbmQgd2FzIGZpZ2h0aW5nIGluIGRlZmVuY2Ugb2YgbGliZXJ0eSwgaGUgaGFkIGJlZW4gZGVzZXJ0ZWQgYnkgaGlzIGdvb2QgZm9ydHVuZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['53.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBBc2luaXVzLCBpbmRlZWQsIENhdG8gc2FpZCBoZSB3YXMgYWJsZSB0byBkcml2ZSBoaW0gb3V0IG9mIFNpY2lseTsgYnV0IHNpbmNlIGFub3RoZXIgYW5kIGEgbGFyZ2VyIGZvcmNlIHdhcyBjb21pbmcgdG8gaGlzIGFpZCwgaGUgZGlkIG5vdCB3aXNoIHRvIHJ1aW4gdGhlIGlzbGFuZCBieSBpbnZvbHZpbmcgaXQgaW4gd2FyLCBhbmQgdGhlcmVmb3JlLCBhZnRlciBhZHZpc2luZyB0aGUgU3lyYWN1c2FucyB0byBzZWVrIHNhZmV0eSBieSBqb2luaW5nIHRoZSB2aWN0b3Jpb3VzIHBhcnR5LCBoZSBzYWlsZWQgYXdheS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BZnRlciBoZSBoYWQgY29tZSB0byBQb21wZXksIGhlIHdhcyBldmVyIG9mIG9uZSBtaW5kLCBuYW1lbHksIHRvIHByb3RyYWN0IHRoZSB3YXI7IGZvciBoZSBsb29rZWQgd2l0aCBob3BlIHRvIGEgc2V0dGxlbWVudCBvZiB0aGUgY29udHJvdmVyc3ksIGFuZCBkaWQgbm90IHdpc2ggdGhhdCB0aGUgc3RhdGUgc2hvdWxkIGJlIHdvcnN0ZWQgaW4gYSBzdHJ1Z2dsZSBhbmQgc3VmZmVyIGF0IGl0cyBvd24gaGFuZHMgdGhlIGV4dHJlbWUgb2YgZGlzYXN0ZXIsIGluIGhhdmluZyBpdHMgZmF0ZSBkZWNpZGVkIGJ5IHRoZSBzd29yZC4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5PdGhlciBtZWFzdXJlcywgdG9vLCBha2luIHRvIHRoaXMsIGhlIHBlcnN1YWRlZCBQb21wZXkgYW5kIGhpcyBjb3VuY2lsIHRvIGFkb3B0LCBuYW1lbHksIG5vdCB0byBwbHVuZGVyIGEgY2l0eSB0aGF0IHdhcyBzdWJqZWN0IHRvIFJvbWUsIGFuZCBub3QgdG8gcHV0IGEgUm9tYW4gdG8gZGVhdGggZXhjZXB0IG9uIHRoZSBmaWVsZCBvZiBiYXR0bGUuIFRoaXMgYnJvdWdodCB0byB0aGUgcGFydHkgb2YgUG9tcGV5IGEgZ29vZCByZXB1dGUsIGFuZCBpbmR1Y2VkIG1hbnkgdG8gam9pbiBpdDsgdGhleSB3ZXJlIGRlbGlnaHRlZCB3aXRoIGhpcyByZWFzb25hYmxlbmVzcyBhbmQgbWlsZG5lc3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk90aGVyIG1lYXN1cmVzLCB0b28sIGFraW4gdG8gdGhpcywgaGUgcGVyc3VhZGVkIFBvbXBleSBhbmQgaGlzIGNvdW5jaWwgdG8gYWRvcHQsIG5hbWVseSwgbm90IHRvIHBsdW5kZXIgYSBjaXR5IHRoYXQgd2FzIHN1YmplY3QgdG8gUm9tZSwgYW5kIG5vdCB0byBwdXQgYSBSb21hbiB0byBkZWF0aCBleGNlcHQgb24gdGhlIGZpZWxkIG9mIGJhdHRsZS4gVGhpcyBicm91Z2h0IHRvIHRoZSBwYXJ0eSBvZiBQb21wZXkgYSBnb29kIHJlcHV0ZSwgYW5kIGluZHVjZWQgbWFueSB0byBqb2luIGl0OyB0aGV5IHdlcmUgZGVsaWdodGVkIHdpdGggaGlzIHJlYXNvbmFibGVuZXNzIGFuZCBtaWxkbmVzcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYXRvIHdhcyBkaXNwYXRjaGVkIHRvIEFzaWEsIHRoYXQgaGUgbWlnaHQgaGVscCB0aG9zZSB3aG8gd2VyZSBjb2xsZWN0aW5nIHRyYW5zcG9ydHMgYW5kIHNvbGRpZXJzIHRoZXJlLCBoZSB0b29rIHdpdGggaGltIFNlcnZpbGlhIGhpcyBzaXN0ZXIgYW5kIGhlciB5b3VuZyBjaGlsZCBieSBMdWN1bGx1cy4gRm9yIFNlcnZpbGlhIGhhZCBmb2xsb3dlZCBDYXRvLCBub3cgdGhhdCBzaGUgd2FzIGEgd2lkb3csIGFuZCBoYWQgcHV0IGFuIGVuZCB0byBtdWNoIG9mIHRoZSBldmlsIHJlcG9ydCBhYm91dCBoZXIgZGlzc29sdXRlIGNvbmR1Y3Q8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDI0LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpdi4gMzwvYmlibD4uPC9ub3RlPiBieSBzdWJtaXR0aW5nIHRvIENhdG8ncyBndWFyZGlhbnNoaXAgYW5kIHNoYXJpbmcgaGlzIHdhbmRlcmluZ3MgYW5kIGhpcyB3YXlzIG9mIGxpZmUgb2YgaGVyIG93biBhY2NvcmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYWVzYXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBoaXMgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW50aS1DYXRvLjwvcT4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAxMS40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpLiA0PC9iaWJsPi48L25vdGU+IGRpZCBub3Qgc3BhcmUgYWJ1c2Ugb2YgQ2F0byBldmVuIG9uIHRoZSBzY29yZSBvZiBoaXMgcmVsYXRpb25zIHdpdGggU2VydmlsaWEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['54.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYXRvIHdhcyBkaXNwYXRjaGVkIHRvIEFzaWEsIHRoYXQgaGUgbWlnaHQgaGVscCB0aG9zZSB3aG8gd2VyZSBjb2xsZWN0aW5nIHRyYW5zcG9ydHMgYW5kIHNvbGRpZXJzIHRoZXJlLCBoZSB0b29rIHdpdGggaGltIFNlcnZpbGlhIGhpcyBzaXN0ZXIgYW5kIGhlciB5b3VuZyBjaGlsZCBieSBMdWN1bGx1cy4gRm9yIFNlcnZpbGlhIGhhZCBmb2xsb3dlZCBDYXRvLCBub3cgdGhhdCBzaGUgd2FzIGEgd2lkb3csIGFuZCBoYWQgcHV0IGFuIGVuZCB0byBtdWNoIG9mIHRoZSBldmlsIHJlcG9ydCBhYm91dCBoZXIgZGlzc29sdXRlIGNvbmR1Y3Q8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyNC4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4aXYuIDM8L2JpYmw+Ljwvbm90ZT4gYnkgc3VibWl0dGluZyB0byBDYXRvJ3MgZ3VhcmRpYW5zaGlwIGFuZCBzaGFyaW5nIGhpcyB3YW5kZXJpbmdzIGFuZCBoaXMgd2F5cyBvZiBsaWZlIG9mIGhlciBvd24gYWNjb3JkLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDI0LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpdi4gMzwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['54.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYWVzYXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIGhpcyAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFudGktQ2F0by48L3E+IENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAxMS40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpLiA0PC9iaWJsPi48L25vdGU+IGRpZCBub3Qgc3BhcmUgYWJ1c2Ugb2YgQ2F0byBldmVuIG9uIHRoZSBzY29yZSBvZiBoaXMgcmVsYXRpb25zIHdpdGggU2VydmlsaWEuCgkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW50aS1DYXRvLjwvcT4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDExLjQiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGkuIDQ8L2JpYmw+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm93LCBpbiBvdGhlciB3YXlzLCBhcyBpdCB3b3VsZCBzZWVtLCBQb21wZXkncyBjb21tYW5kZXJzIGluIEFzaWEgaGFkIG5vIG5lZWQgb2YgQ2F0bywgYW5kIHRoZXJlZm9yZSwgYWZ0ZXIgcGVyc3VhZGluZyBSaG9kZXMgaW50byBhbGxlZ2lhbmNlLCBoZSBsZWZ0IFNlcnZpbGlhIGFuZCBoZXIgY2hpbGQgdGhlcmUsIGFuZCByZXR1cm5lZCB0byBQb21wZXksIHdobyBub3cgaGFkIGEgc3BsZW5kaWQgbmF2YWwgYW5kIG1pbGl0YXJ5IGZvcmNlIGFzc2VtYmxlZC4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlLCBpbmRlZWQsIGFuZCBtb3N0IGNsZWFybHksIFBvbXBleSB3YXMgdGhvdWdodCB0byBoYXZlIG1hZGUgaGlzIG9waW5pb24gb2YgQ2F0byBtYW5pZmVzdC4gRm9yIGhlIGRldGVybWluZWQgdG8gcHV0IHRoZSBjb21tYW5kIG9mIGhpcyBmbGVldCBpbnRvIHRoZSBoYW5kcyBvZiBDYXRvLCBhbmQgdGhlcmUgd2VyZSBubyBsZXNzIHRoYW4gZml2ZSBodW5kcmVkIGZpZ2h0aW5nIHNoaXBzLCBiZXNpZGVzIExpYnVybmlhbiBjcmFmdCwgbG9vay1vdXQgc2hpcHMsIGFuZCBvcGVuIGJvYXRzIGluIGdyZWF0IG51bWJlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSBzb29uIHBlcmNlaXZlZCwgb3Igd2FzIHNob3duIGJ5IGhpcyBmcmllbmRzLCB0aGF0IHRoZSBvbmUgY2hpZWYgb2JqZWN0IG9mIENhdG8ncyBwdWJsaWMgc2VydmljZXMgd2FzIHRoZSBsaWJlcnR5IG9mIGhpcyBjb3VudHJ5LCBhbmQgdGhhdCBpZiBoZSBzaG91bGQgYmUgbWFkZSBtYXN0ZXIgb2Ygc28gbGFyZ2UgYSBmb3JjZSwgdGhlIHZlcnkgZGF5IG9mIENhZXNhcidzIGRlZmVhdCB3b3VsZCBmaW5kIENhdG8gZGVtYW5kaW5nIHRoYXQgUG9tcGV5IGFsc28gbGF5IGRvd24gaGlzIGFybXMgYW5kIG9iZXkgdGhlIGxhd3MuIFBvbXBleSB0aGVyZWZvcmUgY2hhbmdlZCBoaXMgbWluZCwgYWx0aG91Z2ggaGUgaGFkIGFscmVhZHkgY29uZmVycmVkIHdpdGggQ2F0byBhYm91dCB0aGUgbWF0dGVyLCBhbmQgYXBwb2ludGVkIEJpYnVsdXMgYWRtaXJhbC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Tm90d2l0aHN0YW5kaW5nLCBoZSBkaWQgbm90IGZpbmQgdGhhdCBpbiBjb25zZXF1ZW5jZSBvZiB0aGlzIHRoZSB6ZWFsIG9mIENhdG8gd2FzIGJsdW50ZWQ7IG5heSwgaXQgaXMgZXZlbiBzYWlkIHRoYXQgd2hlbiBQb21wZXkgaGltc2VsZiB3YXMgdHJ5aW5nIHRvIGluY2l0ZSBoaXMgZm9yY2VzIHRvIGEgYmF0dGxlIGJlZm9yZSBEeXJyaGFjaGl1bSwgYW5kIGJpZGRpbmcgZWFjaCBvZiB0aGUgb3RoZXIgY29tbWFuZGVycyB0byBzYXkgc29tZXRoaW5nIHRvIGluc3BpcmUgdGhlIG1lbiwgdGhlIHNvbGRpZXJzIGxpc3RlbmVkIHRvIHRoZW0gc2x1Z2dpc2hseSBhbmQgaW4gc2lsZW5jZTsgYnV0IHRoYXQgd2hlbiBDYXRvLCBhZnRlciBhbGwgdGhlIG90aGVyIHNwZWFrZXJzLCBoYWQgcmVoZWFyc2VkIHdpdGggZ2VudWluZSBlbW90aW9uIGFsbCB0aGUgYXBwcm9wcmlhdGUgc2VudGltZW50cyB0byBiZSBkcmF3biBmcm9tIHBoaWxvc29waHkgY29uY2VybmluZyBmcmVlZG9tLCB2aXJ0dWUsIGRlYXRoIGFuZCBmYW1lLCAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgZmluYWxseSBwYXNzZWQgaW50byBhbiBpbnZvY2F0aW9uIG9mIHRoZSBnb2RzIGFzIGV5ZS13aXRuZXNzZXMgb2YgdGhlaXIgc3RydWdnbGUgaW4gYmVoYWxmIG9mIHRoZWlyIGNvdW50cnksIHRoZXJlIHdhcyBzdWNoIGEgc2hvdXRpbmcgYW5kIHNvIGdyZWF0IGEgc3RpciBhbW9uZyB0aGUgc29sZGllcnMgdGh1cyBhcm91c2VkIHRoYXQgYWxsIHRoZSBjb21tYW5kZXJzIHdlcmUgZnVsbCBvZiBob3BlIGFzIHRoZXkgaGFzdGVuZWQgdG8gY29uZnJvbnQgdGhlIHBlcmlsLiBUaGV5IG92ZXJjYW1lIGFuZCByb3V0ZWQgdGhlaXIgZW5lbWllcywgYnV0IHdlcmUgcm9iYmVkIG9mIGEgY29tcGxldGUgYW5kIHBlcmZlY3QgdmljdG9yeSBieSB0aGUgZ29vZCBnZW5pdXMgb2YgQ2Flc2FyLCB3aGljaCB0b29rIGFkdmFudGFnZSBvZiBQb21wZXkncyBjYXV0aW9uIGFuZCBkaXN0cnVzdCBvZiBoaXMgZ29vZCBmb3J0dW5lLiBUaGVzZSBkZXRhaWxzLCBob3dldmVyLCBoYXZlIGJlZW4gZ2l2ZW4gaW4gdGhlIExpZmUgb2YgUG9tcGV5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjUuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciBseHY8L2JpYmw+LiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAzOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhZXNhcjwvdGl0bGU+LCB4eHhpeDwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSBhbGwgdGhlIHJlc3Qgd2VyZSByZWpvaWNpbmcgYW5kIG1hZ25pZnlpbmcgdGhlaXIgYWNoaWV2ZW1lbnQsIENhdG8gd2FzIHdlZXBpbmcgZm9yIGhpcyBjb3VudHJ5LCBhbmQgYmV3YWlsaW5nIHRoZSBsb3ZlIG9mIHBvd2VyIHRoYXQgaGFkIGJyb3VnaHQgc3VjaCBtaXNmb3J0dW5lIGFuZCBkZXN0cnVjdGlvbiwgYXMgaGUgc2F3IHRoYXQgbWFueSBicmF2ZSBjaXRpemVucyBoYWQgZmFsbGVuIGJ5IG9uZSBhbm90aGVyJ3MgaGFuZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['54.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIGluZGVlZCwgYW5kIG1vc3QgY2xlYXJseSwgUG9tcGV5IHdhcyB0aG91Z2h0IHRvIGhhdmUgbWFkZSBoaXMgb3BpbmlvbiBvZiBDYXRvIG1hbmlmZXN0LiBGb3IgaGUgZGV0ZXJtaW5lZCB0byBwdXQgdGhlIGNvbW1hbmQgb2YgaGlzIGZsZWV0IGludG8gdGhlIGhhbmRzIG9mIENhdG8sIGFuZCB0aGVyZSB3ZXJlIG5vIGxlc3MgdGhhbiBmaXZlIGh1bmRyZWQgZmlnaHRpbmcgc2hpcHMsIGJlc2lkZXMgTGlidXJuaWFuIGNyYWZ0LCBsb29rLW91dCBzaGlwcywgYW5kIG9wZW4gYm9hdHMgaW4gZ3JlYXQgbnVtYmVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['54.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSBzb29uIHBlcmNlaXZlZCwgb3Igd2FzIHNob3duIGJ5IGhpcyBmcmllbmRzLCB0aGF0IHRoZSBvbmUgY2hpZWYgb2JqZWN0IG9mIENhdG8ncyBwdWJsaWMgc2VydmljZXMgd2FzIHRoZSBsaWJlcnR5IG9mIGhpcyBjb3VudHJ5LCBhbmQgdGhhdCBpZiBoZSBzaG91bGQgYmUgbWFkZSBtYXN0ZXIgb2Ygc28gbGFyZ2UgYSBmb3JjZSwgdGhlIHZlcnkgZGF5IG9mIENhZXNhcidzIGRlZmVhdCB3b3VsZCBmaW5kIENhdG8gZGVtYW5kaW5nIHRoYXQgUG9tcGV5IGFsc28gbGF5IGRvd24gaGlzIGFybXMgYW5kIG9iZXkgdGhlIGxhd3MuIFBvbXBleSB0aGVyZWZvcmUgY2hhbmdlZCBoaXMgbWluZCwgYWx0aG91Z2ggaGUgaGFkIGFscmVhZHkgY29uZmVycmVkIHdpdGggQ2F0byBhYm91dCB0aGUgbWF0dGVyLCBhbmQgYXBwb2ludGVkIEJpYnVsdXMgYWRtaXJhbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['54.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdHdpdGhzdGFuZGluZywgaGUgZGlkIG5vdCBmaW5kIHRoYXQgaW4gY29uc2VxdWVuY2Ugb2YgdGhpcyB0aGUgemVhbCBvZiBDYXRvIHdhcyBibHVudGVkOyBuYXksIGl0IGlzIGV2ZW4gc2FpZCB0aGF0IHdoZW4gUG9tcGV5IGhpbXNlbGYgd2FzIHRyeWluZyB0byBpbmNpdGUgaGlzIGZvcmNlcyB0byBhIGJhdHRsZSBiZWZvcmUgRHlycmhhY2hpdW0sIGFuZCBiaWRkaW5nIGVhY2ggb2YgdGhlIG90aGVyIGNvbW1hbmRlcnMgdG8gc2F5IHNvbWV0aGluZyB0byBpbnNwaXJlIHRoZSBtZW4sIHRoZSBzb2xkaWVycyBsaXN0ZW5lZCB0byB0aGVtIHNsdWdnaXNobHkgYW5kIGluIHNpbGVuY2U7IGJ1dCB0aGF0IHdoZW4gQ2F0bywgYWZ0ZXIgYWxsIHRoZSBvdGhlciBzcGVha2VycywgaGFkIHJlaGVhcnNlZCB3aXRoIGdlbnVpbmUgZW1vdGlvbiBhbGwgdGhlIGFwcHJvcHJpYXRlIHNlbnRpbWVudHMgdG8gYmUgZHJhd24gZnJvbSBwaGlsb3NvcGh5IGNvbmNlcm5pbmcgZnJlZWRvbSwgdmlydHVlLCBkZWF0aCBhbmQgZmFtZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['54.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBmaW5hbGx5IHBhc3NlZCBpbnRvIGFuIGludm9jYXRpb24gb2YgdGhlIGdvZHMgYXMgZXllLXdpdG5lc3NlcyBvZiB0aGVpciBzdHJ1Z2dsZSBpbiBiZWhhbGYgb2YgdGhlaXIgY291bnRyeSwgdGhlcmUgd2FzIHN1Y2ggYSBzaG91dGluZyBhbmQgc28gZ3JlYXQgYSBzdGlyIGFtb25nIHRoZSBzb2xkaWVycyB0aHVzIGFyb3VzZWQgdGhhdCBhbGwgdGhlIGNvbW1hbmRlcnMgd2VyZSBmdWxsIG9mIGhvcGUgYXMgdGhleSBoYXN0ZW5lZCB0byBjb25mcm9udCB0aGUgcGVyaWwuIFRoZXkgb3ZlcmNhbWUgYW5kIHJvdXRlZCB0aGVpciBlbmVtaWVzLCBidXQgd2VyZSByb2JiZWQgb2YgYSBjb21wbGV0ZSBhbmQgcGVyZmVjdCB2aWN0b3J5IGJ5IHRoZSBnb29kIGdlbml1cyBvZiBDYWVzYXIsIHdoaWNoIHRvb2sgYWR2YW50YWdlIG9mIFBvbXBleSdzIGNhdXRpb24gYW5kIGRpc3RydXN0IG9mIGhpcyBnb29kIGZvcnR1bmUuIFRoZXNlIGRldGFpbHMsIGhvd2V2ZXIsIGhhdmUgYmVlbiBnaXZlbiBpbiB0aGUgTGlmZSBvZiBQb21wZXkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjUuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciBseHY8L2JpYmw+LiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDM5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeHh4aXg8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY1LjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgbHh2PC9iaWJsPi4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAzOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIHh4eGl4PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeHh4aXg8L3RyYW5zbGF0aW9uPg=="
translation['54.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSBhbGwgdGhlIHJlc3Qgd2VyZSByZWpvaWNpbmcgYW5kIG1hZ25pZnlpbmcgdGhlaXIgYWNoaWV2ZW1lbnQsIENhdG8gd2FzIHdlZXBpbmcgZm9yIGhpcyBjb3VudHJ5LCBhbmQgYmV3YWlsaW5nIHRoZSBsb3ZlIG9mIHBvd2VyIHRoYXQgaGFkIGJyb3VnaHQgc3VjaCBtaXNmb3J0dW5lIGFuZCBkZXN0cnVjdGlvbiwgYXMgaGUgc2F3IHRoYXQgbWFueSBicmF2ZSBjaXRpemVucyBoYWQgZmFsbGVuIGJ5IG9uZSBhbm90aGVyJ3MgaGFuZHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gUG9tcGV5LCBpbiBwdXJzdWl0IG9mIENhZXNhciwgd2FzIGJyZWFraW5nIGNhbXAgdG8gbWFyY2ggaW50byBUaGVzc2FseSwgaGUgbGVmdCBiZWhpbmQgaGltIGF0IER5cnJoYWNoaXVtIGEgZ3JlYXQgcXVhbnRpdHkgb2YgYXJtcyBhbmQgc3RvcmVzLCBhbmQgbWFueSBraW5kcmVkIGFuZCBmcmllbmRzLCBhbmQgb3ZlciBhbGwgdGhlc2UgaGUgYXBwb2ludGVkIENhdG8gY29tbWFuZGVyIGFuZCBndWFyZGlhbiwgd2l0aCBmaWZ0ZWVuIGNvaG9ydHMgb2Ygc29sZGllcnMsIGJlY2F1c2UgaGUgYm90aCB0cnVzdGVkIGFuZCBmZWFyZWQgaGltLiBGb3IgaW4gY2FzZSBvZiBkZWZlYXQsIGhlIHRob3VnaHQgdGhhdCBDYXRvIHdvdWxkIGJlIGhpcyBzdXJlc3Qgc3VwcG9ydCwgYnV0IGluIGNhc2Ugb2YgYSB2aWN0b3J5LCB0aGF0IGhlIHdvdWxkIG5vdCwgaWYgcHJlc2VudCwgcGVybWl0IGhpbSB0byBtYW5hZ2UgbWF0dGVycyBhcyBoZSBjaG9zZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TWFueSBwcm9taW5lbnQgbWVuIHdlcmUgYWxzbyBpZ25vcmVkIGJ5IFBvbXBleSBhbmQgbGVmdCBiZWhpbmQgYXQgRHlycmhhY2hpdW0gd2l0aCBDYXRvLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['55.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBQb21wZXksIGluIHB1cnN1aXQgb2YgQ2Flc2FyLCB3YXMgYnJlYWtpbmcgY2FtcCB0byBtYXJjaCBpbnRvIFRoZXNzYWx5LCBoZSBsZWZ0IGJlaGluZCBoaW0gYXQgRHlycmhhY2hpdW0gYSBncmVhdCBxdWFudGl0eSBvZiBhcm1zIGFuZCBzdG9yZXMsIGFuZCBtYW55IGtpbmRyZWQgYW5kIGZyaWVuZHMsIGFuZCBvdmVyIGFsbCB0aGVzZSBoZSBhcHBvaW50ZWQgQ2F0byBjb21tYW5kZXIgYW5kIGd1YXJkaWFuLCB3aXRoIGZpZnRlZW4gY29ob3J0cyBvZiBzb2xkaWVycywgYmVjYXVzZSBoZSBib3RoIHRydXN0ZWQgYW5kIGZlYXJlZCBoaW0uIEZvciBpbiBjYXNlIG9mIGRlZmVhdCwgaGUgdGhvdWdodCB0aGF0IENhdG8gd291bGQgYmUgaGlzIHN1cmVzdCBzdXBwb3J0LCBidXQgaW4gY2FzZSBvZiBhIHZpY3RvcnksIHRoYXQgaGUgd291bGQgbm90LCBpZiBwcmVzZW50LCBwZXJtaXQgaGltIHRvIG1hbmFnZSBtYXR0ZXJzIGFzIGhlIGNob3NlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['55.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgcHJvbWluZW50IG1lbiB3ZXJlIGFsc28gaWdub3JlZCBieSBQb21wZXkgYW5kIGxlZnQgYmVoaW5kIGF0IER5cnJoYWNoaXVtIHdpdGggQ2F0by4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVuIHRoZSBkZWZlYXQgYXQgUGhhcnNhbHVzIGNhbWUsIENhdG8gcmVzb2x2ZWQgdGhhdCwgaWYgUG9tcGV5IHdlcmUgZGVhZCwgaGUgd291bGQgdGFrZSBvdmVyIHRvIEl0YWx5IHRob3NlIHdobyB3ZXJlIHdpdGggaGltLCBidXQgd291bGQgaGltc2VsZiBsaXZlIGluIGV4aWxlIGFzIGZhciBhcyBwb3NzaWJsZSBmcm9tIHRoZSB0eXJhbm55IG9mIENhZXNhcjsgaWYsIG9uIHRoZSBjb250cmFyeSwgUG9tcGV5IHdlcmUgYWxpdmUsIGhlIHdvdWxkIGJ5IGFsbCBtZWFucyBrZWVwIGhpcyBmb3JjZXMgaW50YWN0IGZvciBoaW0uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGhhdmluZyBjcm9zc2VkIG92ZXIgdG8gQ29yY3lyYSwgd2hlcmUgdGhlIGZsZWV0IHdhcywgaGUgb2ZmZXJlZCB0byBnaXZlIHVwIHRoZSBjb21tYW5kIHRvIENpY2Vybywgd2hvIHdhcyBvZiBjb25zdWxhciByYW5rLCB3aGlsZSBoZSBoaW1zZWxmIGhhZCBiZWVuIG9ubHkgYSBwcmFldG9yLiBCdXQgQ2ljZXJvIHdvdWxkIG5vdCBhY2NlcHQgdGhlIGNvbW1hbmQsIGFuZCBzZXQgb3V0IGZvciBJdGFseS4gVGhlbiBDYXRvLCBzZWVpbmcgdGhhdCB0aGUgeW91bmdlciBQb21wZXk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5HbmFldXMgUG9tcGV5LCB0aGUgZWxkZXIgc29uIG9mIFBvbXBleSB0aGUgR3JlYXQuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNTkuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciBsaXguIDU8L2JpYmw+Ljwvbm90ZT4gd2FzIGxlZCBieSBoaXMgb2JzdGluYWN5IGFuZCB1bnNlYXNvbmFibGUgcHJpZGUgaW50byBhIGRlc2lyZSB0byBwdW5pc2ggYWxsIHRob3NlIHdobyB3ZXJlIGFib3V0IHRvIHNhaWwgYXdheSwgYW5kIHdhcyBnb2luZyB0byBsYXkgdmlvbGVudCBoYW5kcyBvbiBDaWNlcm8gZmlyc3Qgb2YgYWxsLCBhZG1vbmlzaGVkIGhpbSBpbiBwcml2YXRlIGFuZCBjYWxtZWQgaGltIGRvd24sIHRodXMgbWFuaWZlc3RseSBzYXZpbmcgQ2ljZXJvIGZyb20gZGVhdGggYW5kIHByb2N1cmluZyBpbW11bml0eSBmb3IgdGhlIHJlc3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['55.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoYXZpbmcgY3Jvc3NlZCBvdmVyIHRvIENvcmN5cmEsIHdoZXJlIHRoZSBmbGVldCB3YXMsIGhlIG9mZmVyZWQgdG8gZ2l2ZSB1cCB0aGUgY29tbWFuZCB0byBDaWNlcm8sIHdobyB3YXMgb2YgY29uc3VsYXIgcmFuaywgd2hpbGUgaGUgaGltc2VsZiBoYWQgYmVlbiBvbmx5IGEgcHJhZXRvci4gQnV0IENpY2VybyB3b3VsZCBub3QgYWNjZXB0IHRoZSBjb21tYW5kLCBhbmQgc2V0IG91dCBmb3IgSXRhbHkuIFRoZW4gQ2F0bywgc2VlaW5nIHRoYXQgdGhlIHlvdW5nZXIgUG9tcGV5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5HbmFldXMgUG9tcGV5LCB0aGUgZWxkZXIgc29uIG9mIFBvbXBleSB0aGUgR3JlYXQuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiA1OS41IiB2YWxpZD0ieWVzIj5jaGFwdGVyIGxpeC4gNTwvYmlibD4uPC9ub3RlPiB3YXMgbGVkIGJ5IGhpcyBvYnN0aW5hY3kgYW5kIHVuc2Vhc29uYWJsZSBwcmlkZSBpbnRvIGEgZGVzaXJlIHRvIHB1bmlzaCBhbGwgdGhvc2Ugd2hvIHdlcmUgYWJvdXQgdG8gc2FpbCBhd2F5LCBhbmQgd2FzIGdvaW5nIHRvIGxheSB2aW9sZW50IGhhbmRzIG9uIENpY2VybyBmaXJzdCBvZiBhbGwsIGFkbW9uaXNoZWQgaGltIGluIHByaXZhdGUgYW5kIGNhbG1lZCBoaW0gZG93biwgdGh1cyBtYW5pZmVzdGx5IHNhdmluZyBDaWNlcm8gZnJvbSBkZWF0aCBhbmQgcHJvY3VyaW5nIGltbXVuaXR5IGZvciB0aGUgcmVzdC4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNTkuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciBsaXguIDU8L2JpYmw+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkNvbmplY3R1cmluZywgbm93LCB0aGF0IFBvbXBleSB0aGUgR3JlYXQgd291bGQgbWFrZSBoaXMgZXNjYXBlIGludG8gRWd5cHQgb3IgTGlieWEsIGFuZCBiZWluZyBlYWdlciB0byBqb2luIGhpbSwgQ2F0byBwdXQgdG8gc2VhIHdpdGggYWxsIGhpcyBjb21wYW55IGFuZCBzYWlsZWQgYXdheSwgYWZ0ZXIgZmlyc3QgZ2l2aW5nIHRob3NlIHdobyBoYWQgbm8gZWFnZXJuZXNzIGZvciB0aGUgZXhwZWRpdGlvbiBsZWF2ZSB0byBkZXBhcnQgYW5kIHJlbWFpbiBiZWhpbmQuIEFmdGVyIHJlYWNoaW5nIExpYnlhLCBhbmQgd2hpbGUgc2FpbGluZyBhbG9uZyBpdHMgY29hc3QsIGhlIGZlbGwgaW4gd2l0aCBTZXh0dXMsIHRoZSB5b3VuZ2VyIHNvbiBvZiBQb21wZXksIHdobyB0b2xkIGhpbSBvZiBoaXMgZmF0aGVyJ3MgZGVhdGggaW4gRWd5cHQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsbCwgb2YgY291cnNlLCB3ZXJlIGRlZXBseSBkaXN0cmVzc2VkLCBidXQgbm8gb25lLCBub3cgdGhhdCBQb21wZXkgd2FzIGdvbmUsIHdvdWxkIGV2ZW4gbGlzdGVuIHRvIGFueSBvdGhlciBjb21tYW5kZXIgd2hpbGUgQ2F0byB3YXMgYXQgaGFuZC4gRm9yIHRoaXMgcmVhc29uIGFsc28gQ2F0bywgd2hvIGhhZCBjb21wYXNzaW9uIG9uIG1lbiB3aG8gd2VyZSBicmF2ZSBhbmQgaGFkIGdpdmVuIHByb29mIG9mIGZpZGVsaXR5LCBhbmQgd2FzIGFzaGFtZWQgdG8gbGVhdmUgdGhlbSBoZWxwbGVzcyBhbmQgZGVzdGl0dXRlIGluIGEgZm9yZWlnbiBsYW5kLCB1bmRlcnRvb2sgdGhlIGNvbW1hbmQsIGFuZCB3ZW50IGFsb25nIHRoZSBjb2FzdCB0byBDeXJlbmUsIHRoZSBwZW9wbGUgb2Ygd2hpY2ggcmVjZWl2ZWQgaGltIGtpbmRseSwgYWx0aG91Z2ggYSBmZXcgZGF5cyBiZWZvcmUgdGhleSBoYWQgY2xvc2VkIHRoZWlyIGdhdGVzIGFnYWluc3QgTGFiaWVudXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm93IGEgcGFydGlzYW4gb2YgUG9tcGV5LCBhbmQgYSBmdWdpdGl2ZSBmcm9tIFBoYXJzYWx1cy4gQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMzQuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXI8L3RpdGxlPiwgeHh4aXYuIDI8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBoZSBsZWFybmVkIHRoYXQgU2NpcGlvLCB0aGUgZmF0aGVyLWluLWxhdyBvZiBQb21wZXksIGhhZCBiZWVuIHdlbGwgcmVjZWl2ZWQgYnkgSnViYSB0aGUga2luZywgYW5kIHRoYXQgQXR0aXVzIFZhcnVzLCB3aG8gaGFkIGJlZW4gYXBwb2ludGVkIGdvdmVybm9yIG9mIExpYnlhIGJ5IFBvbXBleSwgd2FzIHdpdGggdGhlbSBhdCB0aGUgaGVhZCBvZiBhbiBhcm15LiBDYXRvIHRoZXJlZm9yZSBzZW50IG91dCB0aGl0aGVyIGJ5IGxhbmQgaW4gdGhlIHdpbnRlciBzZWFzb24sIGhhdmluZyBnb3QgdG9nZXRoZXIgYSBncmVhdCBudW1iZXIgb2YgYXNzZXMgdG8gY2Fycnkgd2F0ZXIsIGFuZCBkcml2aW5nIGFsb25nIHdpdGggaGltIG1hbnkgY2F0dGxlLiBCZXNpZGVzLCBoZSB0b29rIHdpdGggaGltIGNoYXJpb3RzLCBhbmQgdGhlIHBlb3BsZSBjYWxsZWQgUHN5bGxpLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDQuMTczIiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIGl2LiAxNzM8L2JpYmw+Ljwvbm90ZT4gVGhlc2UgY3VyZSB0aGUgYml0ZXMgb2Ygc2VycGVudHMgYnkgc3Vja2luZyBvdXQgdGhlIHZlbm9tLCBhbmQgY2hhcm0gYW5kIGRlYWRlbiB0aGUgc2VycGVudHMgdGhlbXNlbHZlcyBieSBtZWFucyBvZiBpbmNhbnRhdGlvbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRob3VnaCB0aGUgbWFyY2ggbGFzdGVkIGZvciBzZXZlbiBkYXlzIGNvbnNlY3V0aXZlbHksIENhdG8gbGVkIGF0IHRoZSBoZWFkIG9mIGhpcyBmb3JjZSwgd2l0aG91dCB1c2luZyBlaXRoZXIgaG9yc2Ugb3IgYmVhc3Qgb2YgYnVyZGVuLiBNb3Jlb3ZlciwgaGUgdXNlZCB0byBzdXAgaW4gYSBzaXR0aW5nIHBvc3R1cmUgZnJvbSB0aGUgZGF5IHdoZW4gaGUgbGVhcm5lZCBvZiB0aGUgZGVmZWF0IGF0IFBoYXJzYWx1czsgeWVzLCB0aGlzIHRva2VuIG9mIHNvcnJvdyBoZSBhZGRlZCB0byBvdGhlcnMsIGFuZCB3b3VsZCBub3QgbGllIGRvd24gZXhjZXB0IHdoZW4gc2xlZXBpbmcuIEFmdGVyIGZpbmlzaGluZyB0aGUgd2ludGVyIGluIExpYnlhLCBoZSBsZWQgZm9ydGggaGlzIGFybXk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgdGV4dCBvZiB0aGlzIHNlbnRlbmNlIGlzIHVuY2VydGFpbjogU2ludGVuaXMgYW5kIEJla2tlciBhc3N1bWUgYSBsYWN1bmEuIExpYnlhIG1lYW5zIGhlcmUgdGhlIFJvbWFuIHByb3ZpbmNlIG9mIEFmcmljYS48L25vdGU+OyBhbmQgaXQgbnVtYmVyZWQgbmVhcmx5IHRlbiB0aG91c2FuZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['56.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q29uamVjdHVyaW5nLCBub3csIHRoYXQgUG9tcGV5IHRoZSBHcmVhdCB3b3VsZCBtYWtlIGhpcyBlc2NhcGUgaW50byBFZ3lwdCBvciBMaWJ5YSwgYW5kIGJlaW5nIGVhZ2VyIHRvIGpvaW4gaGltLCBDYXRvIHB1dCB0byBzZWEgd2l0aCBhbGwgaGlzIGNvbXBhbnkgYW5kIHNhaWxlZCBhd2F5LCBhZnRlciBmaXJzdCBnaXZpbmcgdGhvc2Ugd2hvIGhhZCBubyBlYWdlcm5lc3MgZm9yIHRoZSBleHBlZGl0aW9uIGxlYXZlIHRvIGRlcGFydCBhbmQgcmVtYWluIGJlaGluZC4gQWZ0ZXIgcmVhY2hpbmcgTGlieWEsIGFuZCB3aGlsZSBzYWlsaW5nIGFsb25nIGl0cyBjb2FzdCwgaGUgZmVsbCBpbiB3aXRoIFNleHR1cywgdGhlIHlvdW5nZXIgc29uIG9mIFBvbXBleSwgd2hvIHRvbGQgaGltIG9mIGhpcyBmYXRoZXIncyBkZWF0aCBpbiBFZ3lwdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['56.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsbCwgb2YgY291cnNlLCB3ZXJlIGRlZXBseSBkaXN0cmVzc2VkLCBidXQgbm8gb25lLCBub3cgdGhhdCBQb21wZXkgd2FzIGdvbmUsIHdvdWxkIGV2ZW4gbGlzdGVuIHRvIGFueSBvdGhlciBjb21tYW5kZXIgd2hpbGUgQ2F0byB3YXMgYXQgaGFuZC4gRm9yIHRoaXMgcmVhc29uIGFsc28gQ2F0bywgd2hvIGhhZCBjb21wYXNzaW9uIG9uIG1lbiB3aG8gd2VyZSBicmF2ZSBhbmQgaGFkIGdpdmVuIHByb29mIG9mIGZpZGVsaXR5LCBhbmQgd2FzIGFzaGFtZWQgdG8gbGVhdmUgdGhlbSBoZWxwbGVzcyBhbmQgZGVzdGl0dXRlIGluIGEgZm9yZWlnbiBsYW5kLCB1bmRlcnRvb2sgdGhlIGNvbW1hbmQsIGFuZCB3ZW50IGFsb25nIHRoZSBjb2FzdCB0byBDeXJlbmUsIHRoZSBwZW9wbGUgb2Ygd2hpY2ggcmVjZWl2ZWQgaGltIGtpbmRseSwgYWx0aG91Z2ggYSBmZXcgZGF5cyBiZWZvcmUgdGhleSBoYWQgY2xvc2VkIHRoZWlyIGdhdGVzIGFnYWluc3QgTGFiaWVudXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Ob3cgYSBwYXJ0aXNhbiBvZiBQb21wZXksIGFuZCBhIGZ1Z2l0aXZlIGZyb20gUGhhcnNhbHVzLiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDM0LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeHh4aXYuIDI8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDM0LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeHh4aXYuIDI8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4eHhpdi4gMjwvdHJhbnNsYXRpb24+"
translation['56.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGhlIGxlYXJuZWQgdGhhdCBTY2lwaW8sIHRoZSBmYXRoZXItaW4tbGF3IG9mIFBvbXBleSwgaGFkIGJlZW4gd2VsbCByZWNlaXZlZCBieSBKdWJhIHRoZSBraW5nLCBhbmQgdGhhdCBBdHRpdXMgVmFydXMsIHdobyBoYWQgYmVlbiBhcHBvaW50ZWQgZ292ZXJub3Igb2YgTGlieWEgYnkgUG9tcGV5LCB3YXMgd2l0aCB0aGVtIGF0IHRoZSBoZWFkIG9mIGFuIGFybXkuIENhdG8gdGhlcmVmb3JlIHNlbnQgb3V0IHRoaXRoZXIgYnkgbGFuZCBpbiB0aGUgd2ludGVyIHNlYXNvbiwgaGF2aW5nIGdvdCB0b2dldGhlciBhIGdyZWF0IG51bWJlciBvZiBhc3NlcyB0byBjYXJyeSB3YXRlciwgYW5kIGRyaXZpbmcgYWxvbmcgd2l0aCBoaW0gbWFueSBjYXR0bGUuIEJlc2lkZXMsIGhlIHRvb2sgd2l0aCBoaW0gY2hhcmlvdHMsIGFuZCB0aGUgcGVvcGxlIGNhbGxlZCBQc3lsbGkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDQuMTczIiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIGl2LiAxNzM8L2JpYmw+Ljwvbm90ZT4gVGhlc2UgY3VyZSB0aGUgYml0ZXMgb2Ygc2VycGVudHMgYnkgc3Vja2luZyBvdXQgdGhlIHZlbm9tLCBhbmQgY2hhcm0gYW5kIGRlYWRlbiB0aGUgc2VycGVudHMgdGhlbXNlbHZlcyBieSBtZWFucyBvZiBpbmNhbnRhdGlvbnMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA0LjE3MyIgdmFsaWQ9InllcyI+SGVyb2RvdHVzLCBpdi4gMTczPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['56.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRob3VnaCB0aGUgbWFyY2ggbGFzdGVkIGZvciBzZXZlbiBkYXlzIGNvbnNlY3V0aXZlbHksIENhdG8gbGVkIGF0IHRoZSBoZWFkIG9mIGhpcyBmb3JjZSwgd2l0aG91dCB1c2luZyBlaXRoZXIgaG9yc2Ugb3IgYmVhc3Qgb2YgYnVyZGVuLiBNb3Jlb3ZlciwgaGUgdXNlZCB0byBzdXAgaW4gYSBzaXR0aW5nIHBvc3R1cmUgZnJvbSB0aGUgZGF5IHdoZW4gaGUgbGVhcm5lZCBvZiB0aGUgZGVmZWF0IGF0IFBoYXJzYWx1czsgeWVzLCB0aGlzIHRva2VuIG9mIHNvcnJvdyBoZSBhZGRlZCB0byBvdGhlcnMsIGFuZCB3b3VsZCBub3QgbGllIGRvd24gZXhjZXB0IHdoZW4gc2xlZXBpbmcuIEFmdGVyIGZpbmlzaGluZyB0aGUgd2ludGVyIGluIExpYnlhLCBoZSBsZWQgZm9ydGggaGlzIGFybXk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSB0ZXh0IG9mIHRoaXMgc2VudGVuY2UgaXMgdW5jZXJ0YWluOiBTaW50ZW5pcyBhbmQgQmVra2VyIGFzc3VtZSBhIGxhY3VuYS4gTGlieWEgbWVhbnMgaGVyZSB0aGUgUm9tYW4gcHJvdmluY2Ugb2YgQWZyaWNhLjwvbm90ZT47IGFuZCBpdCBudW1iZXJlZCBuZWFybHkgdGVuIHRob3VzYW5kLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbWF0dGVycyB3ZXJlIGluIGEgYmFkIHdheSB3aXRoIFNjaXBpbyBhbmQgVmFydXMuIFRoZWlyIGRpc3NlbnNpb24gYW5kIHF1YXJyZWxsaW5nIGxlZCB0aGVtIHRvIHBheSBjb3VydCB0byBKdWJhIGluIGVmZm9ydHMgdG8gd2luIGhpcyBmYXZvdXIsIGFuZCB0aGUga2luZyB3YXMgdW5lbmR1cmFibGUgZm9yIHRoZSBzZXZlcml0eSBvZiBoaXMgdGVtcGVyIGFuZCBmb3IgdGhlIGFycm9nYW5jZSB3aGljaCBoaXMgd2VhbHRoIGFuZCBwb3dlciBnYXZlIGhpbS4gV2hlbiBoZSB3YXMgZ29pbmcgdG8gaGF2ZSBhbiBpbnRlcnZpZXcgd2l0aCBDYXRvIGZvciB0aGUgZmlyc3QgdGltZSwgaGUgcGxhY2VkIGhpcyBvd24gc2VhdCBiZXR3ZWVuIHRoYXQgb2YgU2NpcGlvIGFuZCB0aGF0IG9mIENhdG8uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8sIGhvd2V2ZXIsIHdoZW4gaGUgc2F3IHRoZSBhcnJhbmdlbWVudCwgdG9vayB1cCBoaXMgb3duIHNlYXQgYW5kIG1vdmVkIGl0IG92ZXIgdG8gdGhlIG90aGVyIHNpZGUsIHRodXMgcGxhY2luZyBTY2lwaW8gaW4gdGhlIG1pZGRsZSwgYWx0aG91Z2ggU2NpcGlvIHdhcyBhbiBlbmVteSwgYW5kIGhhZCBwdWJsaXNoZWQgYSBib29rIHdoaWNoIGNvbnRhaW5lZCBhYnVzZSBvZiBDYXRvLiBBbmQgeWV0IHRoZXJlIGFyZSB0aG9zZSB3aG8gZ2l2ZSBDYXRvIG5vIGNyZWRpdCBmb3IgdGhpcywgYWx0aG91Z2ggdGhleSBjZW5zdXJlIGhpbSBiZWNhdXNlLCBpbiBTaWNpbHksIGFzIGhlIHdhcyB3YWxraW5nIGFib3V0IHdpdGggUGhpbG9zdHJhdHVzLCBoZSBwbGFjZWQgaGltIGluIHRoZSBtaWRkbGUsIHRvIHNob3cgaGlzIHJlc3BlY3QgZm9yIHBoaWxvc29waHkuIEJ1dCBhdCB0aGUgdGltZSBvZiB3aGljaCBJIHNwZWFrLCBDYXRvIGFjdHVhbGx5IHB1dCBhIGNoZWNrIHVwb24gSnViYSwgd2hvIGhhZCBhbGwgYnV0IG1hZGUgU2NpcGlvIGFuZCBWYXJ1cyBoaXMgc2F0cmFwcywgYW5kIHJlY29uY2lsZWQgdGhlIHR3byBSb21hbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggYWxsIHRob3VnaHQgaXQgbWVldCB0aGF0IGhlIHNob3VsZCBoYXZlIHRoZSBjb21tYW5kLCBlc3BlY2lhbGx5IFNjaXBpbyBhbmQgVmFydXMsIHdobyByZXNpZ25lZCBhbmQgdGVuZGVyZWQgdG8gaGltIHRoZSBsZWFkZXJzaGlwLCBoZSByZWZ1c2VkIHRvIGJyZWFrIHRoZSBsYXdzIHRvIHN1cHBvcnQgd2hpY2ggdGhleSB3ZXJlIHdhZ2luZyB3YXIgd2l0aCBvbmUgd2hvIGJyb2tlIHRoZW0sIG5vciwgd2hlbiBhIHByby1jb25zdWwgd2FzIHByZXNlbnQsIHdvdWxkIGhlIHB1dCBoaW1zZWxmIHdobyB3YXMgb25seSBhIHByb3ByYWV0b3IsIGFib3ZlIGhpbS4gRm9yIFNjaXBpbyBoYWQgYmVlbiBtYWRlIHByb2NvbnN1bCwgYW5kIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGFybXkgd2VyZSBlbWJvbGRlbmVkIGJ5IGhpcyBuYW1lOyB0aGV5IHRob3VnaHQgdGhhdCB0aGV5IHdvdWxkIGJlIHN1Y2Nlc3NmdWwgaWYgYSBTY2lwaW8gaGFkIGNvbW1hbmQgaW4gQWZyaWNhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['57.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG1hdHRlcnMgd2VyZSBpbiBhIGJhZCB3YXkgd2l0aCBTY2lwaW8gYW5kIFZhcnVzLiBUaGVpciBkaXNzZW5zaW9uIGFuZCBxdWFycmVsbGluZyBsZWQgdGhlbSB0byBwYXkgY291cnQgdG8gSnViYSBpbiBlZmZvcnRzIHRvIHdpbiBoaXMgZmF2b3VyLCBhbmQgdGhlIGtpbmcgd2FzIHVuZW5kdXJhYmxlIGZvciB0aGUgc2V2ZXJpdHkgb2YgaGlzIHRlbXBlciBhbmQgZm9yIHRoZSBhcnJvZ2FuY2Ugd2hpY2ggaGlzIHdlYWx0aCBhbmQgcG93ZXIgZ2F2ZSBoaW0uIFdoZW4gaGUgd2FzIGdvaW5nIHRvIGhhdmUgYW4gaW50ZXJ2aWV3IHdpdGggQ2F0byBmb3IgdGhlIGZpcnN0IHRpbWUsIGhlIHBsYWNlZCBoaXMgb3duIHNlYXQgYmV0d2VlbiB0aGF0IG9mIFNjaXBpbyBhbmQgdGhhdCBvZiBDYXRvLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['57.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8sIGhvd2V2ZXIsIHdoZW4gaGUgc2F3IHRoZSBhcnJhbmdlbWVudCwgdG9vayB1cCBoaXMgb3duIHNlYXQgYW5kIG1vdmVkIGl0IG92ZXIgdG8gdGhlIG90aGVyIHNpZGUsIHRodXMgcGxhY2luZyBTY2lwaW8gaW4gdGhlIG1pZGRsZSwgYWx0aG91Z2ggU2NpcGlvIHdhcyBhbiBlbmVteSwgYW5kIGhhZCBwdWJsaXNoZWQgYSBib29rIHdoaWNoIGNvbnRhaW5lZCBhYnVzZSBvZiBDYXRvLiBBbmQgeWV0IHRoZXJlIGFyZSB0aG9zZSB3aG8gZ2l2ZSBDYXRvIG5vIGNyZWRpdCBmb3IgdGhpcywgYWx0aG91Z2ggdGhleSBjZW5zdXJlIGhpbSBiZWNhdXNlLCBpbiBTaWNpbHksIGFzIGhlIHdhcyB3YWxraW5nIGFib3V0IHdpdGggUGhpbG9zdHJhdHVzLCBoZSBwbGFjZWQgaGltIGluIHRoZSBtaWRkbGUsIHRvIHNob3cgaGlzIHJlc3BlY3QgZm9yIHBoaWxvc29waHkuIEJ1dCBhdCB0aGUgdGltZSBvZiB3aGljaCBJIHNwZWFrLCBDYXRvIGFjdHVhbGx5IHB1dCBhIGNoZWNrIHVwb24gSnViYSwgd2hvIGhhZCBhbGwgYnV0IG1hZGUgU2NpcGlvIGFuZCBWYXJ1cyBoaXMgc2F0cmFwcywgYW5kIHJlY29uY2lsZWQgdGhlIHR3byBSb21hbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['57.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggYWxsIHRob3VnaHQgaXQgbWVldCB0aGF0IGhlIHNob3VsZCBoYXZlIHRoZSBjb21tYW5kLCBlc3BlY2lhbGx5IFNjaXBpbyBhbmQgVmFydXMsIHdobyByZXNpZ25lZCBhbmQgdGVuZGVyZWQgdG8gaGltIHRoZSBsZWFkZXJzaGlwLCBoZSByZWZ1c2VkIHRvIGJyZWFrIHRoZSBsYXdzIHRvIHN1cHBvcnQgd2hpY2ggdGhleSB3ZXJlIHdhZ2luZyB3YXIgd2l0aCBvbmUgd2hvIGJyb2tlIHRoZW0sIG5vciwgd2hlbiBhIHByby1jb25zdWwgd2FzIHByZXNlbnQsIHdvdWxkIGhlIHB1dCBoaW1zZWxmIHdobyB3YXMgb25seSBhIHByb3ByYWV0b3IsIGFib3ZlIGhpbS4gRm9yIFNjaXBpbyBoYWQgYmVlbiBtYWRlIHByb2NvbnN1bCwgYW5kIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGFybXkgd2VyZSBlbWJvbGRlbmVkIGJ5IGhpcyBuYW1lOyB0aGV5IHRob3VnaHQgdGhhdCB0aGV5IHdvdWxkIGJlIHN1Y2Nlc3NmdWwgaWYgYSBTY2lwaW8gaGFkIGNvbW1hbmQgaW4gQWZyaWNhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFNjaXBpbywgaG93ZXZlciwgYWZ0ZXIgYXNzdW1pbmcgdGhlIGNvbW1hbmQsIHN0cmFpZ2h0d2F5IGRlc2lyZWQgdG8gZ3JhdGlmeSBKdWJhIGJ5IHB1dHRpbmcgYWxsIHRoZSBwZW9wbGUgb2YgVXRpY2EgdG8gZGVhdGggYW5kIGRlbW9saXNoaW5nIHRoZWlyIGNpdHksIG9uIHRoZSBncm91bmQgdGhhdCBpdCBmYXZvdXJlZCB0aGUgY2F1c2Ugb2YgQ2Flc2FyLCBDYXRvIHdvdWxkIG5vdCBzdWZmZXIgaXQsIGJ1dCBieSBhZGp1cmF0aW9ucyBhbmQgbG91ZCBvdXRjcmllcyBpbiB0aGUgY291bmNpbCwgYW5kIGJ5IGludm9raW5nIHRoZSBnb2RzLCB3aXRoIGRpZmZpY3VsdHkgcmVzY3VlZCB0aGUgcGVvcGxlIGZyb20gdGhpcyBjcnVlbHR5OyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgcGFydGx5IGF0IHRoZSByZXF1ZXN0IG9mIHRoZSBwZW9wbGUsIGFuZCBwYXJ0bHkgYXQgdGhlIGluc3RhbmNlIG9mIFNjaXBpbywgaGUgdW5kZXJ0b29rIHRvIHdhdGNoIG92ZXIgdGhlIGNpdHksIHRoYXQgaXQgbWlnaHQgbm90LCBlaXRoZXIgd2lsbGluZ2x5IG9yIHVud2lsbGluZ2x5LCBhdHRhY2ggaXRzZWxmIHRvIENhZXNhci4gRm9yIHRoZSBwbGFjZSB3YXMgaW4gZXZlcnkgd2F5IGFkdmFudGFnZW91cyBmb3IgdGhvc2Ugd2hvIGhlbGQgaXQsIGFuZCBmdWxseSBjYXBhYmxlIG9mIGRlZmVuY2U7IGFuZCBpdCB3YXMgc3RpbGwgZnVydGhlciBzdHJlbmd0aGVuZWQgYnkgQ2F0by4gRm9yIGhlIGJyb3VnaHQgaW4gYSBncmVhdCBhYnVuZGFuY2Ugb2YgZ3JhaW4sIGFuZCBwZXJmZWN0ZWQgdGhlIHdhbGxzIGJ5IGJ1aWxkaW5nIHRvd2VycyBhbmQgYnkgcnVubmluZyBmb3JtaWRhYmxlIHRyZW5jaGVzIGFuZCBwYWxpc2FkZXMgaW4gZnJvbnQgb2YgdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoZSBtZW4gb2YgVXRpY2Egd2hvIHdlcmUgb2YgbWlsaXRhcnkgYWdlIGhlIGFzc2lnbmVkIHRoZSBwYWxpc2FkZXMgZm9yIHF1YXJ0ZXJzLCBhbmQgbWFkZSB0aGVtIGdpdmUgdXAgdGhlaXIgYXJtcyB0byBoaW07IHRoZSByZXN0IGhlIGtlcHQgdG9nZXRoZXIgaW4gdGhlIGNpdHksIHRha2luZyBncmVhdCBwYWlucyB0aGF0IHRoZXkgc2hvdWxkIG5vdCBiZSB3cm9uZ2VkIG9yIHN1ZmZlciBoYXJtIGF0IHRoZSBoYW5kcyBvZiB0aGUgUm9tYW5zLiBNb3Jlb3ZlciwgaGUgc2VudCBvdXQgZ3JlYXQgcXVhbnRpdGllcyBvZiBhcm1zIGFuZCBzdG9yZXMgYW5kIGdyYWluIHRvIHRoZSBSb21hbnMgaW4gdGhlaXIgY2FtcCwgYW5kLCBpbiBhIHdvcmQsIG1hZGUgdGhlIGNpdHkgYSBzdG9yZS1ob3VzZSBmb3IgdGhlIHdhci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGZvciB0aGUgYWR2aWNlIHdoaWNoIGhlIGhhZCBnaXZlbiBQb21wZXkgYmVmb3JlIGFuZCBub3cgZ2F2ZSBTY2lwaW8sIG5hbWVseSwgbm90IHRvIGdpdmUgYmF0dGxlIHRvIGEgbWFuIHdobyB3YXMgdmVyc2VkIGluIHdhciBhbmQgb2YgZm9ybWlkYWJsZSBhYmlsaXR5LCBidXQgdG8gdHJ1c3QgdG8gdGltZSwgd2hpY2ggd2l0aGVycyBhd2F5IGFsbCB0aGUgdmlnb3VyIHdoaWNoIGlzIHRoZSBzdHJlbmd0aCBvZiB0eXJhbm55LOKAlHRoaXMgYWR2aWNlIFNjaXBpbywgb3V0IG9mIG9ic3RpbmF0ZSBzZWxmLXdpbGwsIGRlc3Bpc2VkLiBBbmQgb25jZSBoZSB3cm90ZSB0byBDYXRvIHJlcHJvYWNoaW5nIGhpbSB3aXRoIGNvd2FyZGljZSwgc2VlaW5nIHRoYXQgaGUgd2FzIG5vdCBvbmx5IHdlbGwgY29udGVudCB0byBzaXQgcXVpZXRseSBpbiBhIHdhbGxlZCBjaXR5IGhpbXNlbGYsIGJ1dCB3b3VsZCBub3QgZXZlbiBhbGxvdyBvdGhlcnMgdG8gY2Fycnkgb3V0IHRoZWlyIHBsYW5zIHdpdGggYm9sZG5lc3MgYXMgb3Bwb3J0dW5pdHkgb2ZmZXJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhpcyBDYXRvIHdyb3RlIGluIHJlcGx5IHRoYXQgaGUgd2FzIHJlYWR5IHRvIHRha2UgdGhlIGxlZ2lvbmFyaWVzIGFuZCB0aGUgaG9yc2VtZW4gd2hvbSBoZSBoaW1zZWxmIGhhZCBicm91Z2h0IHRvIExpYnlhIGFuZCBjcm9zcyB0aGUgc2VhIHdpdGggdGhlbSB0byBJdGFseSwgdGh1cyBmb3JjaW5nIENhZXNhciB0byBjaGFuZ2UgaGlzIHBsYW4gb2YgY2FtcGFpZ24sIGFuZCB0dXJuaW5nIGhpbSBhd2F5IGZyb20gU2NpcGlvIGFuZCBWYXJ1cyBhZ2FpbnN0IGhpbXNlbGYuIFdoZW4gU2NpcGlvIG1vY2tlZCBhdCB0aGlzIGFsc28sIGl0IHdhcyB2ZXJ5IGNsZWFyIHRoYXQgQ2F0byB3YXMgZGlzdHJlc3NlZCBhdCBoYXZpbmcgZGVjbGluZWQgdGhlIGNvbW1hbmQsIGJlaW5nIGNvbnZpbmNlZCB0aGF0IFNjaXBpbyB3b3VsZCBuZWl0aGVyIGNvbmR1Y3QgdGhlIHdhciB3ZWxsLCBub3IsIGluIGNhc2UgaGUgc2hvdWxkIGhhdmUgdW5leHBlY3RlZCBnb29kIGZvcnR1bmUgYmVoYXZlIHdpdGggbW9kZXJhdGlvbiB0b3dhcmRzIGhpcyBmZWxsb3cgY2l0aXplbnMgaW4gdGhlIGhvdXIgb2YgdmljdG9yeS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIENhdG8gbWFkZSB1cCBoaXMgbWluZCwgYW5kIHNhaWQgdG8gaGlzIGludGltYXRlIGZyaWVuZHMsIHRoYXQgdGhlcmUgd2VyZSBubyBnb29kIGhvcGVzIGZvciB0aGUgd2FyIG93aW5nIHRvIHRoZSBpbmV4cGVyaWVuY2UgYW5kIHJhc2huZXNzIG9mIHRoZSBjb21tYW5kZXJzOyBidXQgdGhhdCBpZiwgdGhlbiwgYnkgYW55IGdvb2QgZm9ydHVuZSwgQ2Flc2FyIHNob3VsZCBiZSBvdmVydGhyb3duLCBoZSBoaW1zZWxmIHdvdWxkIG5vdCByZW1haW4gaW4gUm9tZSwgYnV0IHdvdWxkIGZseSBmcm9tIHRoZSBoYXJzaG5lc3MgYW5kIGNydWVsdHkgb2YgU2NpcGlvLCB3aG8gd2FzIGV2ZW4gdGhlbiBtYWtpbmcgZXh0cmF2YWdhbnQgYW5kIGRyZWFkZnVsIHRocmVhdHMgYWdhaW5zdCBtYW55LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBTY2lwaW8sIGhvd2V2ZXIsIGFmdGVyIGFzc3VtaW5nIHRoZSBjb21tYW5kLCBzdHJhaWdodHdheSBkZXNpcmVkIHRvIGdyYXRpZnkgSnViYSBieSBwdXR0aW5nIGFsbCB0aGUgcGVvcGxlIG9mIFV0aWNhIHRvIGRlYXRoIGFuZCBkZW1vbGlzaGluZyB0aGVpciBjaXR5LCBvbiB0aGUgZ3JvdW5kIHRoYXQgaXQgZmF2b3VyZWQgdGhlIGNhdXNlIG9mIENhZXNhciwgQ2F0byB3b3VsZCBub3Qgc3VmZmVyIGl0LCBidXQgYnkgYWRqdXJhdGlvbnMgYW5kIGxvdWQgb3V0Y3JpZXMgaW4gdGhlIGNvdW5jaWwsIGFuZCBieSBpbnZva2luZyB0aGUgZ29kcywgd2l0aCBkaWZmaWN1bHR5IHJlc2N1ZWQgdGhlIHBlb3BsZSBmcm9tIHRoaXMgY3J1ZWx0eTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['58.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBwYXJ0bHkgYXQgdGhlIHJlcXVlc3Qgb2YgdGhlIHBlb3BsZSwgYW5kIHBhcnRseSBhdCB0aGUgaW5zdGFuY2Ugb2YgU2NpcGlvLCBoZSB1bmRlcnRvb2sgdG8gd2F0Y2ggb3ZlciB0aGUgY2l0eSwgdGhhdCBpdCBtaWdodCBub3QsIGVpdGhlciB3aWxsaW5nbHkgb3IgdW53aWxsaW5nbHksIGF0dGFjaCBpdHNlbGYgdG8gQ2Flc2FyLiBGb3IgdGhlIHBsYWNlIHdhcyBpbiBldmVyeSB3YXkgYWR2YW50YWdlb3VzIGZvciB0aG9zZSB3aG8gaGVsZCBpdCwgYW5kIGZ1bGx5IGNhcGFibGUgb2YgZGVmZW5jZTsgYW5kIGl0IHdhcyBzdGlsbCBmdXJ0aGVyIHN0cmVuZ3RoZW5lZCBieSBDYXRvLiBGb3IgaGUgYnJvdWdodCBpbiBhIGdyZWF0IGFidW5kYW5jZSBvZiBncmFpbiwgYW5kIHBlcmZlY3RlZCB0aGUgd2FsbHMgYnkgYnVpbGRpbmcgdG93ZXJzIGFuZCBieSBydW5uaW5nIGZvcm1pZGFibGUgdHJlbmNoZXMgYW5kIHBhbGlzYWRlcyBpbiBmcm9udCBvZiB0aGUgY2l0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['58.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoZSBtZW4gb2YgVXRpY2Egd2hvIHdlcmUgb2YgbWlsaXRhcnkgYWdlIGhlIGFzc2lnbmVkIHRoZSBwYWxpc2FkZXMgZm9yIHF1YXJ0ZXJzLCBhbmQgbWFkZSB0aGVtIGdpdmUgdXAgdGhlaXIgYXJtcyB0byBoaW07IHRoZSByZXN0IGhlIGtlcHQgdG9nZXRoZXIgaW4gdGhlIGNpdHksIHRha2luZyBncmVhdCBwYWlucyB0aGF0IHRoZXkgc2hvdWxkIG5vdCBiZSB3cm9uZ2VkIG9yIHN1ZmZlciBoYXJtIGF0IHRoZSBoYW5kcyBvZiB0aGUgUm9tYW5zLiBNb3Jlb3ZlciwgaGUgc2VudCBvdXQgZ3JlYXQgcXVhbnRpdGllcyBvZiBhcm1zIGFuZCBzdG9yZXMgYW5kIGdyYWluIHRvIHRoZSBSb21hbnMgaW4gdGhlaXIgY2FtcCwgYW5kLCBpbiBhIHdvcmQsIG1hZGUgdGhlIGNpdHkgYSBzdG9yZS1ob3VzZSBmb3IgdGhlIHdhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['58.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgdGhlIGFkdmljZSB3aGljaCBoZSBoYWQgZ2l2ZW4gUG9tcGV5IGJlZm9yZSBhbmQgbm93IGdhdmUgU2NpcGlvLCBuYW1lbHksIG5vdCB0byBnaXZlIGJhdHRsZSB0byBhIG1hbiB3aG8gd2FzIHZlcnNlZCBpbiB3YXIgYW5kIG9mIGZvcm1pZGFibGUgYWJpbGl0eSwgYnV0IHRvIHRydXN0IHRvIHRpbWUsIHdoaWNoIHdpdGhlcnMgYXdheSBhbGwgdGhlIHZpZ291ciB3aGljaCBpcyB0aGUgc3RyZW5ndGggb2YgdHlyYW5ueSzigJR0aGlzIGFkdmljZSBTY2lwaW8sIG91dCBvZiBvYnN0aW5hdGUgc2VsZi13aWxsLCBkZXNwaXNlZC4gQW5kIG9uY2UgaGUgd3JvdGUgdG8gQ2F0byByZXByb2FjaGluZyBoaW0gd2l0aCBjb3dhcmRpY2UsIHNlZWluZyB0aGF0IGhlIHdhcyBub3Qgb25seSB3ZWxsIGNvbnRlbnQgdG8gc2l0IHF1aWV0bHkgaW4gYSB3YWxsZWQgY2l0eSBoaW1zZWxmLCBidXQgd291bGQgbm90IGV2ZW4gYWxsb3cgb3RoZXJzIHRvIGNhcnJ5IG91dCB0aGVpciBwbGFucyB3aXRoIGJvbGRuZXNzIGFzIG9wcG9ydHVuaXR5IG9mZmVyZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['58.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgQ2F0byB3cm90ZSBpbiByZXBseSB0aGF0IGhlIHdhcyByZWFkeSB0byB0YWtlIHRoZSBsZWdpb25hcmllcyBhbmQgdGhlIGhvcnNlbWVuIHdob20gaGUgaGltc2VsZiBoYWQgYnJvdWdodCB0byBMaWJ5YSBhbmQgY3Jvc3MgdGhlIHNlYSB3aXRoIHRoZW0gdG8gSXRhbHksIHRodXMgZm9yY2luZyBDYWVzYXIgdG8gY2hhbmdlIGhpcyBwbGFuIG9mIGNhbXBhaWduLCBhbmQgdHVybmluZyBoaW0gYXdheSBmcm9tIFNjaXBpbyBhbmQgVmFydXMgYWdhaW5zdCBoaW1zZWxmLiBXaGVuIFNjaXBpbyBtb2NrZWQgYXQgdGhpcyBhbHNvLCBpdCB3YXMgdmVyeSBjbGVhciB0aGF0IENhdG8gd2FzIGRpc3RyZXNzZWQgYXQgaGF2aW5nIGRlY2xpbmVkIHRoZSBjb21tYW5kLCBiZWluZyBjb252aW5jZWQgdGhhdCBTY2lwaW8gd291bGQgbmVpdGhlciBjb25kdWN0IHRoZSB3YXIgd2VsbCwgbm9yLCBpbiBjYXNlIGhlIHNob3VsZCBoYXZlIHVuZXhwZWN0ZWQgZ29vZCBmb3J0dW5lIGJlaGF2ZSB3aXRoIG1vZGVyYXRpb24gdG93YXJkcyBoaXMgZmVsbG93IGNpdGl6ZW5zIGluIHRoZSBob3VyIG9mIHZpY3RvcnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['58.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBDYXRvIG1hZGUgdXAgaGlzIG1pbmQsIGFuZCBzYWlkIHRvIGhpcyBpbnRpbWF0ZSBmcmllbmRzLCB0aGF0IHRoZXJlIHdlcmUgbm8gZ29vZCBob3BlcyBmb3IgdGhlIHdhciBvd2luZyB0byB0aGUgaW5leHBlcmllbmNlIGFuZCByYXNobmVzcyBvZiB0aGUgY29tbWFuZGVyczsgYnV0IHRoYXQgaWYsIHRoZW4sIGJ5IGFueSBnb29kIGZvcnR1bmUsIENhZXNhciBzaG91bGQgYmUgb3ZlcnRocm93biwgaGUgaGltc2VsZiB3b3VsZCBub3QgcmVtYWluIGluIFJvbWUsIGJ1dCB3b3VsZCBmbHkgZnJvbSB0aGUgaGFyc2huZXNzIGFuZCBjcnVlbHR5IG9mIFNjaXBpbywgd2hvIHdhcyBldmVuIHRoZW4gbWFraW5nIGV4dHJhdmFnYW50IGFuZCBkcmVhZGZ1bCB0aHJlYXRzIGFnYWluc3QgbWFueS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhpcyBmZWFycyB3ZXJlIHJlYWxpemVkIG1vcmUgZnVsbHkgdGhhbiBoZSBleHBlY3RlZDsgZm9yIGxhdGUgb25lIGV2ZW5pbmcgdGhlcmUgY2FtZSBhIG1lc3NlbmdlciBmcm9tIHRoZSBjYW1wIHdobyBoYWQgYmVlbiB0aHJlZSBkYXlzIG9uIHRoZSByb2FkLCBhbm5vdW5jaW5nIHRoYXQgdGhlcmUgaGFkIGJlZW4gYSBncmVhdCBiYXR0bGUgYXQgVGhhcHN1cywgdGhhdCB0aGVpciBjYXVzZSB3YXMgdXR0ZXJseSBydWluZWQsIHRoYXQgQ2Flc2FyIHdhcyBpbiBwb3NzZXNzaW9uIG9mIHRoZWlyIGNhbXBzLDcyPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCIgLz4gdGhhdCBTY2lwaW8gYW5kIEp1YmEgaGFkIGVzY2FwZWQgd2l0aCBhIGZldyBmb2xsb3dlcnMsIGFuZCB0aGF0IHRoZSByZXN0IG9mIHRoZSBmb3JjZSBoYWQgcGVyaXNoZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['58.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoaXMgZmVhcnMgd2VyZSByZWFsaXplZCBtb3JlIGZ1bGx5IHRoYW4gaGUgZXhwZWN0ZWQ7IGZvciBsYXRlIG9uZSBldmVuaW5nIHRoZXJlIGNhbWUgYSBtZXNzZW5nZXIgZnJvbSB0aGUgY2FtcCB3aG8gaGFkIGJlZW4gdGhyZWUgZGF5cyBvbiB0aGUgcm9hZCwgYW5ub3VuY2luZyB0aGF0IHRoZXJlIGhhZCBiZWVuIGEgZ3JlYXQgYmF0dGxlIGF0IFRoYXBzdXMsIHRoYXQgdGhlaXIgY2F1c2Ugd2FzIHV0dGVybHkgcnVpbmVkLCB0aGF0IENhZXNhciB3YXMgaW4gcG9zc2Vzc2lvbiBvZiB0aGVpciBjYW1wcyw3Mjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCIgLz4gdGhhdCBTY2lwaW8gYW5kIEp1YmEgaGFkIGVzY2FwZWQgd2l0aCBhIGZldyBmb2xsb3dlcnMsIGFuZCB0aGF0IHRoZSByZXN0IG9mIHRoZSBmb3JjZSBoYWQgcGVyaXNoZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHRoaW5ncyBjb21pbmcgc3VkZGVubHkgdXBvbiB0aGUgY2l0eSwgdGhlIHBlb3BsZSwgYXMgd2FzIG5hdHVyYWwgYXQgbmlnaHQgYW5kIGluIHRpbWUgb2Ygd2FyLCB3ZXJlIGFsbW9zdCBiZXNpZGUgdGhlbXNlbHZlcyBhdCBzdWNoIHRpZGluZ3MsIGFuZCBjb3VsZCB3aXRoIGRpZmZpY3VsdHkga2VlcCB0aGVtc2VsdmVzIHdpdGhpbiB0aGUgd2FsbHMuIEJ1dCBDYXRvIGNhbWUgZm9ydGgsIGFuZCBmb3IgdGhlIHByZXNlbnQsIHdoZW5ldmVyIGhlIG1ldCBwZW9wbGUgcnVubmluZyBhYm91dCBhbmQgc2hvdXRpbmcsIHdvdWxkIGxheSBob2xkIG9mIHRoZW0gb25lIGJ5IG9uZSwgYW5kIHdpdGggZW5jb3VyYWdpbmcgd29yZHMgd291bGQgdGFrZSBhd2F5IHRoZSBleGNlc3NpdmUgd2lsZG5lc3MgYW5kIGNvbmZ1c2lvbiBvZiB0aGVpciBmZWFyLCBzYXlpbmcgdGhhdCBwZXJoYXBzIHRoZSBkZWZlYXQgd2FzIG5vdCBzbyBiYWQgYXMgcmVwb3J0ZWQsIGJ1dCBoYWQgYmVlbiBtYWduaWZpZWQgaW4gdGhlIHRlbGxpbmcsIGFuZCB0aHVzIGhlIGFsbGF5ZWQgdGhlIHR1bXVsdDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGFzIHNvb24gYXMgaXQgd2FzIGRheSwgaGUgaXNzdWVkIHByb2NsYW1hdGlvbiB0aGF0IHRoZSB0aHJlZSBodW5kcmVkIHdobyBtYWRlIHVwIGhpcyBzZW5hdGUgKHRoZXkgd2VyZSBSb21hbnMsIGFuZCB3ZXJlIGRvaW5nIGJ1c2luZXNzIGluIExpYnlhIGFzIG1lcmNoYW50cyBhbmQgbW9uZXktbGVuZGVycykgc2hvdWxkIGFzc2VtYmxlIGluIHRoZSB0ZW1wbGUgb2YgSnVwaXRlciwgYXMgd2VsbCBhcyBhbGwgdGhlIHNlbmF0b3JzIGZyb20gUm9tZSB3aG8gd2VyZSBwcmVzZW50LCB3aXRoIHRoZWlyIGNoaWxkcmVuLiBBbmQgd2hpbGUgdGhleSB3ZXJlIHN0aWxsIGNvbWluZyB0b2dldGhlciwgaGUgYWR2YW5jZWQgcXVpZXRseSBhbmQgd2l0aCBhIGNvbXBvc2VkIGNvdW50ZW5hbmNlLCBhbmQgYXMgaWYgbm90aGluZyB1bnVzdWFsIGhhZCBoYXBwZW5lZCwgd2l0aCBhIGJvb2sgaW4gaGlzIGhhbmRzIGZyb20gd2hpY2ggaGUgd2FzIHJlYWRpbmcuIFRoaXMgd2FzIGEgcmVnaXN0ZXIgb2YgaGlzIG1pbGl0YXJ5IGVuZ2luZXMsIGFybXMsIGdyYWluLCBhbmQgbWVuLWF0LWFybXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXkgaGFkIGNvbWUgdG9nZXRoZXIsIGJlZ2lubmluZyB3aXRoIHRoZSB0aHJlZSBodW5kcmVkIGFuZCBjb21tZW5kaW5nIGF0IGdyZWF0IGxlbmd0aCB0aGVpciB6ZWFsIGFuZCBmaWRlbGl0eSwgd2hpY2ggdGhleSBoYWQgbWFuaWZlc3RlZCBieSBtYWtpbmcgdGhlbXNlbHZlcyBtb3N0IGhlbHBmdWwgd2l0aCB0aGVpciBtZWFucyBhbmQgcGVyc29ucyBhbmQgYWR2aWNlLCBoZSBleGhvcnRlZCB0aGVtIG5vdCB0byBydWluIHRoZWlyIGdvb2QgcHJvc3BlY3RzIGJ5IHRyeWluZyB0byBwcm9jdXJlIGZvciB0aGVtc2VsdmVzIHNldmVyYWxseSBzb21lIHNlcGFyYXRlIGZsaWdodCBvciBlc2NhcGUuIEZvciBpZiB0aGV5IHNob3VsZCBob2xkIHRvZ2V0aGVyLCBoZSBzYWlkLCBDYWVzYXIgd291bGQgZGVzcGlzZSB0aGVtIGxlc3MgYXMgZm9lcywgYW5kIHNob3cgdGhlbSBtb3JlIG1lcmN5IGFzIHN1cHBsaWFudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBoZSB1cmdlZCB0aGVtIHRvIGRlbGliZXJhdGUgdXBvbiB0aGVpciBmdXR1cmUgY291cnNlLCBkZWNsYXJpbmcgdGhhdCBoZSB3b3VsZCBoYXZlIG5vIGZhdWx0IHRvIGZpbmQgd2l0aCBlaXRoZXIgZGVjaXNpb24gd2hpY2ggdGhleSBtaWdodCBtYWtlLiBJZiB0aGV5IHNob3VsZCB0dXJuIHRoZWlyIGFsbGVnaWFuY2UgdG8gdGhlIGZvcnR1bmF0ZSBzaWRlLCBoZSB3b3VsZCBhdHRyaWJ1dGUgdGhlaXIgY2hhbmdlIHRvIG5lY2Vzc2l0eTsgYnV0IGlmIHRoZXkgc2hvdWxkIGZhY2UgdGhlIHRocmVhdGVuaW5nIGV2aWwgYW5kIGFjY2VwdCBkYW5nZXIgaW4gZGVmZW5jZSBvZiBsaWJlcnR5LCBoZSB3b3VsZCBub3Qgb25seSBwcmFpc2UgdGhlbSwgYnV0IHdvdWxkIGFkbWlyZSB0aGVpciB2YWxvdXIgYW5kIG1ha2UgaGltc2VsZiB0aGVpciBsZWFkZXIgYW5kIGZlbGxvdyBjb21iYXRhbnQsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnVudGlsIHRoZXkgaGFkIGZ1bGx5IHRlc3RlZCB0aGUgdWx0aW1hdGUgZm9ydHVuZXMgb2YgdGhlaXIgY291bnRyeTsgYW5kIHRoaXMgY291bnRyeSB3YXMgbm90IFV0aWNhLCBub3IgQWRydW1ldHVtLCBidXQgUm9tZSwgYW5kIGhhZCBtYW55IHRpbWVzIGJ5IGhlciBncmVhdG5lc3MgcmVjb3ZlcmVkIGZyb20gbW9yZSBncmlldm91cyBkaXNhc3RlcnMuIEJlc2lkZXMsIGhlIHNhaWQsIG1hbnkgdGhpbmdzIGZhdm91cmVkIHRoZWlyIHNhbHZhdGlvbiBhbmQgc2VjdXJpdHksIGFuZCBjaGllZmx5IHRoZSBmYWN0IHRoYXQgdGhleSB3ZXJlIHdhZ2luZyB3YXIgYWdhaW5zdCBhIG1hbiB3aG8gd2FzIGRyYXduIGluIG1hbnkgb3Bwb3NpbmcgZGlyZWN0aW9ucyBieSB0aGUgZXhpZ2VuY2llcyBvZiB0aGUgdGltZXMuIEZvciBTcGFpbiBoYWQgZ29uZSBvdmVyIHRvIHRoZSB5b3VuZ2VyIFBvbXBleSwgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIFJvbWUgaGVyc2VsZiBoYWQgbm90IHlldCBhbHRvZ2V0aGVyIGFjY2VwdGVkIHRoZSBiaXQgdG8gd2hpY2ggc2hlIHdhcyBzbyB1bmFjY3VzdG9tZWQsIGJ1dCB3YXMgaW1wYXRpZW50IG9mIGhlciBsb3QgYW5kIHJlYWR5IHRvIHJpc2UgdXAgdW5pdGVkbHkgYXQgYW55IGNoYW5nZSBpbiB0aGUgc2l0dWF0aW9uLiBOb3IsIGhlIGFzc3VyZWQgdGhlbSwgd2FzIGRhbmdlciBhIHRoaW5nIHRvIGJlIHNodW5uZWQsIGJ1dCB0aGV5IG11c3QgbGVhcm4gYSBsZXNzb24gZnJvbSB0aGVpciBlbmVteSwgd2hvIHNwYXJlZCBub3QgaGlzIGxpZmUgaW4gcGVycGV0cmF0aW5nIHRoZSBncmVhdGVzdCB3cm9uZ3MsIHdoaWxlIGluIHRoZWlyIG93biBjYXNlLCBzbyBkaWZmZXJlbnQgZnJvbSBoaXMsIHRoZSB1bmNlcnRhaW50aWVzIG9mIHdhciB3b3VsZCBlbmQgaW4gYSBtb3N0IGhhcHB5IGxpZmUsIGlmIHRoZXkgd2VyZSBzdWNjZXNzZnVsLCBvciBpbiBhIG1vc3QgZ2xvcmlvdXMgZGVhdGgsIGlmIHRoZXkgZmFpbGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBpdCB3YXMgZm9yIHRoZW0gdG8gZGVsaWJlcmF0ZSBieSB0aGVtc2VsdmVzLCBoZSBzYWlkLCBhbmQgaW4gcmV0dXJuIGZvciB0aGVpciBmb3JtZXIgYnJhdmVyeSBhbmQgemVhbCBoZSBqb2luZWQgdGhlbSBpbiBwcmF5aW5nIHRoYXQgd2hhdCB0aGV5IGRlY2lkZWQgbWlnaHQgYmUgZm9yIHRoZWlyIGFkdmFudGFnZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['59.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgdGhpbmdzIGNvbWluZyBzdWRkZW5seSB1cG9uIHRoZSBjaXR5LCB0aGUgcGVvcGxlLCBhcyB3YXMgbmF0dXJhbCBhdCBuaWdodCBhbmQgaW4gdGltZSBvZiB3YXIsIHdlcmUgYWxtb3N0IGJlc2lkZSB0aGVtc2VsdmVzIGF0IHN1Y2ggdGlkaW5ncywgYW5kIGNvdWxkIHdpdGggZGlmZmljdWx0eSBrZWVwIHRoZW1zZWx2ZXMgd2l0aGluIHRoZSB3YWxscy4gQnV0IENhdG8gY2FtZSBmb3J0aCwgYW5kIGZvciB0aGUgcHJlc2VudCwgd2hlbmV2ZXIgaGUgbWV0IHBlb3BsZSBydW5uaW5nIGFib3V0IGFuZCBzaG91dGluZywgd291bGQgbGF5IGhvbGQgb2YgdGhlbSBvbmUgYnkgb25lLCBhbmQgd2l0aCBlbmNvdXJhZ2luZyB3b3JkcyB3b3VsZCB0YWtlIGF3YXkgdGhlIGV4Y2Vzc2l2ZSB3aWxkbmVzcyBhbmQgY29uZnVzaW9uIG9mIHRoZWlyIGZlYXIsIHNheWluZyB0aGF0IHBlcmhhcHMgdGhlIGRlZmVhdCB3YXMgbm90IHNvIGJhZCBhcyByZXBvcnRlZCwgYnV0IGhhZCBiZWVuIG1hZ25pZmllZCBpbiB0aGUgdGVsbGluZywgYW5kIHRodXMgaGUgYWxsYXllZCB0aGUgdHVtdWx0OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['59.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhcyBzb29uIGFzIGl0IHdhcyBkYXksIGhlIGlzc3VlZCBwcm9jbGFtYXRpb24gdGhhdCB0aGUgdGhyZWUgaHVuZHJlZCB3aG8gbWFkZSB1cCBoaXMgc2VuYXRlICh0aGV5IHdlcmUgUm9tYW5zLCBhbmQgd2VyZSBkb2luZyBidXNpbmVzcyBpbiBMaWJ5YSBhcyBtZXJjaGFudHMgYW5kIG1vbmV5LWxlbmRlcnMpIHNob3VsZCBhc3NlbWJsZSBpbiB0aGUgdGVtcGxlIG9mIEp1cGl0ZXIsIGFzIHdlbGwgYXMgYWxsIHRoZSBzZW5hdG9ycyBmcm9tIFJvbWUgd2hvIHdlcmUgcHJlc2VudCwgd2l0aCB0aGVpciBjaGlsZHJlbi4gQW5kIHdoaWxlIHRoZXkgd2VyZSBzdGlsbCBjb21pbmcgdG9nZXRoZXIsIGhlIGFkdmFuY2VkIHF1aWV0bHkgYW5kIHdpdGggYSBjb21wb3NlZCBjb3VudGVuYW5jZSwgYW5kIGFzIGlmIG5vdGhpbmcgdW51c3VhbCBoYWQgaGFwcGVuZWQsIHdpdGggYSBib29rIGluIGhpcyBoYW5kcyBmcm9tIHdoaWNoIGhlIHdhcyByZWFkaW5nLiBUaGlzIHdhcyBhIHJlZ2lzdGVyIG9mIGhpcyBtaWxpdGFyeSBlbmdpbmVzLCBhcm1zLCBncmFpbiwgYW5kIG1lbi1hdC1hcm1zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['59.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXkgaGFkIGNvbWUgdG9nZXRoZXIsIGJlZ2lubmluZyB3aXRoIHRoZSB0aHJlZSBodW5kcmVkIGFuZCBjb21tZW5kaW5nIGF0IGdyZWF0IGxlbmd0aCB0aGVpciB6ZWFsIGFuZCBmaWRlbGl0eSwgd2hpY2ggdGhleSBoYWQgbWFuaWZlc3RlZCBieSBtYWtpbmcgdGhlbXNlbHZlcyBtb3N0IGhlbHBmdWwgd2l0aCB0aGVpciBtZWFucyBhbmQgcGVyc29ucyBhbmQgYWR2aWNlLCBoZSBleGhvcnRlZCB0aGVtIG5vdCB0byBydWluIHRoZWlyIGdvb2QgcHJvc3BlY3RzIGJ5IHRyeWluZyB0byBwcm9jdXJlIGZvciB0aGVtc2VsdmVzIHNldmVyYWxseSBzb21lIHNlcGFyYXRlIGZsaWdodCBvciBlc2NhcGUuIEZvciBpZiB0aGV5IHNob3VsZCBob2xkIHRvZ2V0aGVyLCBoZSBzYWlkLCBDYWVzYXIgd291bGQgZGVzcGlzZSB0aGVtIGxlc3MgYXMgZm9lcywgYW5kIHNob3cgdGhlbSBtb3JlIG1lcmN5IGFzIHN1cHBsaWFudHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['59.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBoZSB1cmdlZCB0aGVtIHRvIGRlbGliZXJhdGUgdXBvbiB0aGVpciBmdXR1cmUgY291cnNlLCBkZWNsYXJpbmcgdGhhdCBoZSB3b3VsZCBoYXZlIG5vIGZhdWx0IHRvIGZpbmQgd2l0aCBlaXRoZXIgZGVjaXNpb24gd2hpY2ggdGhleSBtaWdodCBtYWtlLiBJZiB0aGV5IHNob3VsZCB0dXJuIHRoZWlyIGFsbGVnaWFuY2UgdG8gdGhlIGZvcnR1bmF0ZSBzaWRlLCBoZSB3b3VsZCBhdHRyaWJ1dGUgdGhlaXIgY2hhbmdlIHRvIG5lY2Vzc2l0eTsgYnV0IGlmIHRoZXkgc2hvdWxkIGZhY2UgdGhlIHRocmVhdGVuaW5nIGV2aWwgYW5kIGFjY2VwdCBkYW5nZXIgaW4gZGVmZW5jZSBvZiBsaWJlcnR5LCBoZSB3b3VsZCBub3Qgb25seSBwcmFpc2UgdGhlbSwgYnV0IHdvdWxkIGFkbWlyZSB0aGVpciB2YWxvdXIgYW5kIG1ha2UgaGltc2VsZiB0aGVpciBsZWFkZXIgYW5kIGZlbGxvdyBjb21iYXRhbnQsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['59.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnVudGlsIHRoZXkgaGFkIGZ1bGx5IHRlc3RlZCB0aGUgdWx0aW1hdGUgZm9ydHVuZXMgb2YgdGhlaXIgY291bnRyeTsgYW5kIHRoaXMgY291bnRyeSB3YXMgbm90IFV0aWNhLCBub3IgQWRydW1ldHVtLCBidXQgUm9tZSwgYW5kIGhhZCBtYW55IHRpbWVzIGJ5IGhlciBncmVhdG5lc3MgcmVjb3ZlcmVkIGZyb20gbW9yZSBncmlldm91cyBkaXNhc3RlcnMuIEJlc2lkZXMsIGhlIHNhaWQsIG1hbnkgdGhpbmdzIGZhdm91cmVkIHRoZWlyIHNhbHZhdGlvbiBhbmQgc2VjdXJpdHksIGFuZCBjaGllZmx5IHRoZSBmYWN0IHRoYXQgdGhleSB3ZXJlIHdhZ2luZyB3YXIgYWdhaW5zdCBhIG1hbiB3aG8gd2FzIGRyYXduIGluIG1hbnkgb3Bwb3NpbmcgZGlyZWN0aW9ucyBieSB0aGUgZXhpZ2VuY2llcyBvZiB0aGUgdGltZXMuIEZvciBTcGFpbiBoYWQgZ29uZSBvdmVyIHRvIHRoZSB5b3VuZ2VyIFBvbXBleSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['59.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBSb21lIGhlcnNlbGYgaGFkIG5vdCB5ZXQgYWx0b2dldGhlciBhY2NlcHRlZCB0aGUgYml0IHRvIHdoaWNoIHNoZSB3YXMgc28gdW5hY2N1c3RvbWVkLCBidXQgd2FzIGltcGF0aWVudCBvZiBoZXIgbG90IGFuZCByZWFkeSB0byByaXNlIHVwIHVuaXRlZGx5IGF0IGFueSBjaGFuZ2UgaW4gdGhlIHNpdHVhdGlvbi4gTm9yLCBoZSBhc3N1cmVkIHRoZW0sIHdhcyBkYW5nZXIgYSB0aGluZyB0byBiZSBzaHVubmVkLCBidXQgdGhleSBtdXN0IGxlYXJuIGEgbGVzc29uIGZyb20gdGhlaXIgZW5lbXksIHdobyBzcGFyZWQgbm90IGhpcyBsaWZlIGluIHBlcnBldHJhdGluZyB0aGUgZ3JlYXRlc3Qgd3JvbmdzLCB3aGlsZSBpbiB0aGVpciBvd24gY2FzZSwgc28gZGlmZmVyZW50IGZyb20gaGlzLCB0aGUgdW5jZXJ0YWludGllcyBvZiB3YXIgd291bGQgZW5kIGluIGEgbW9zdCBoYXBweSBsaWZlLCBpZiB0aGV5IHdlcmUgc3VjY2Vzc2Z1bCwgb3IgaW4gYSBtb3N0IGdsb3Jpb3VzIGRlYXRoLCBpZiB0aGV5IGZhaWxlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['59.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IHdhcyBmb3IgdGhlbSB0byBkZWxpYmVyYXRlIGJ5IHRoZW1zZWx2ZXMsIGhlIHNhaWQsIGFuZCBpbiByZXR1cm4gZm9yIHRoZWlyIGZvcm1lciBicmF2ZXJ5IGFuZCB6ZWFsIGhlIGpvaW5lZCB0aGVtIGluIHByYXlpbmcgdGhhdCB3aGF0IHRoZXkgZGVjaWRlZCBtaWdodCBiZSBmb3IgdGhlaXIgYWR2YW50YWdlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENhdG8gaGFkIHRodXMgc3Bva2VuLCB0aGVyZSB3ZXJlIHNvbWUgd2hvbSBoaXMgd29yZHMgbWVyZWx5IHJlc3RvcmVkIHRvIGNvbmZpZGVuY2UsIGJ1dCB0aGUgbWFqb3JpdHksIGluIHZpZXcgb2YgaGlzIGZlYXJsZXNzbmVzcywgbm9iaWxpdHksIGFuZCBnZW5lcm9zaXR5LCBhbG1vc3QgZm9yZ290IHRoZWlyIHByZXNlbnQgdHJvdWJsZXMgaW4gdGhlIGNvbnZpY3Rpb24gdGhhdCBoZSBhbG9uZSB3YXMgYW4gaW52aW5jaWJsZSBsZWFkZXIgYW5kIHN1cGVyaW9yIHRvIGV2ZXJ5IGZvcnR1bmUsIGFuZCB0aGV5IGJlZ2dlZCBoaW0gdG8gdXNlIHRoZWlyIGxpdmVzIGFuZCBwcm9wZXJ0eSBhbmQgYXJtcyBhcyBoZSBoaW1zZWxmIGp1ZGdlZCBiZXN0OyBmb3IgaXQgd2FzIGJldHRlciB0byBkaWUgYXMgaGlzIHdpbGxpbmcgZm9sbG93ZXJzIHRoYW4gdG8gc2F2ZSB0aGVpciBsaXZlcyBieSBiZXRyYXlpbmcgc3VjaCB2aXJ0dWUgYXMgaGlzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['60.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYXRvIGhhZCB0aHVzIHNwb2tlbiwgdGhlcmUgd2VyZSBzb21lIHdob20gaGlzIHdvcmRzIG1lcmVseSByZXN0b3JlZCB0byBjb25maWRlbmNlLCBidXQgdGhlIG1ham9yaXR5LCBpbiB2aWV3IG9mIGhpcyBmZWFybGVzc25lc3MsIG5vYmlsaXR5LCBhbmQgZ2VuZXJvc2l0eSwgYWxtb3N0IGZvcmdvdCB0aGVpciBwcmVzZW50IHRyb3VibGVzIGluIHRoZSBjb252aWN0aW9uIHRoYXQgaGUgYWxvbmUgd2FzIGFuIGludmluY2libGUgbGVhZGVyIGFuZCBzdXBlcmlvciB0byBldmVyeSBmb3J0dW5lLCBhbmQgdGhleSBiZWdnZWQgaGltIHRvIHVzZSB0aGVpciBsaXZlcyBhbmQgcHJvcGVydHkgYW5kIGFybXMgYXMgaGUgaGltc2VsZiBqdWRnZWQgYmVzdDsgZm9yIGl0IHdhcyBiZXR0ZXIgdG8gZGllIGFzIGhpcyB3aWxsaW5nIGZvbGxvd2VycyB0aGFuIHRvIHNhdmUgdGhlaXIgbGl2ZXMgYnkgYmV0cmF5aW5nIHN1Y2ggdmlydHVlIGFzIGhpcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBzb21lb25lIHByb3Bvc2VkIHRoYXQgdGhleSBzaG91bGQgcGFzcyBhIHZvdGUgZ2l2aW5nIGZyZWVkb20gdG8gdGhlIHNsYXZlcywgYW5kIHRoZSBtYWpvcml0eSBhcHByb3ZlZDsgYnV0IENhdG8gc2FpZCBoZSB3b3VsZCBub3QgZG8gdGhpcywgc2luY2UgaXQgd2FzIG5vdCBsYXdmdWwgb3IgcmlnaHQ7IGlmLCBob3cgZXZlciwgdGhlIG1hc3RlcnMgb2YgdGhlaXIgb3duIGFjY29yZCBnYXZlIHVwIHRoZWlyIHNsYXZlcywgdGhvc2Ugc2xhdmVzIHdobyB3ZXJlIG9mIG1pbGl0YXJ5IGFnZSBzaG91bGQgYmUgYWNjZXB0ZWQuIE1hbnkgcHJvbWlzZXMgdG8gZG8gdGhpcyB3ZXJlIG1hZGUsIGFuZCBhZnRlciBvcmRlcmluZyBhIGxpc3QgdG8gYmUgbWFkZSBvZiBhbGwgd2hvIHdlcmUgd2lsbGluZywgQ2F0byB3aXRoZHJldy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgYSBsaXR0bGUgd2hpbGUgdGhlcmUgY2FtZSB0byBoaW0gbGV0dGVycyBmcm9tIEp1YmEgYW5kIFNjaXBpby4gSnViYSwgd2hvIHdhcyBoaWRkZW4gb24gYSBtb3VudGFpbiB3aXRoIGEgZmV3IG1lbiwgYXNrZWQgd2hhdCBDYXRvIGhhZCBkZWNpZGVkIHRvIGRvOyBmb3IgaWYgaGUgYWJhbmRvbmVkIFV0aWNhLCBKdWJhIHdvdWxkIHdhaXQgZm9yIGhpbSwgYW5kIGlmIGhlIHVuZGVyd2VudCBhIHNpZWdlLCBKdWJhIHdvdWxkIGNvbWUgdG8gaGlzIGFpZCB3aXRoIGFuIGFybXkuIFNjaXBpbywgd2hvIHdhcyBzdGF0aW9uZWQgd2l0aCBoaXMgZmxlZXQgb2ZmIGEgY2VydGFpbiBoZWFkbGFuZCBub3QgZmFyIGZyb20gVXRpY2EsIGF3YWl0ZWQgQ2F0bydzIGRlY2lzaW9uIGluIHRoZSBzYW1lIHdheS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['60.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgc29tZW9uZSBwcm9wb3NlZCB0aGF0IHRoZXkgc2hvdWxkIHBhc3MgYSB2b3RlIGdpdmluZyBmcmVlZG9tIHRvIHRoZSBzbGF2ZXMsIGFuZCB0aGUgbWFqb3JpdHkgYXBwcm92ZWQ7IGJ1dCBDYXRvIHNhaWQgaGUgd291bGQgbm90IGRvIHRoaXMsIHNpbmNlIGl0IHdhcyBub3QgbGF3ZnVsIG9yIHJpZ2h0OyBpZiwgaG93IGV2ZXIsIHRoZSBtYXN0ZXJzIG9mIHRoZWlyIG93biBhY2NvcmQgZ2F2ZSB1cCB0aGVpciBzbGF2ZXMsIHRob3NlIHNsYXZlcyB3aG8gd2VyZSBvZiBtaWxpdGFyeSBhZ2Ugc2hvdWxkIGJlIGFjY2VwdGVkLiBNYW55IHByb21pc2VzIHRvIGRvIHRoaXMgd2VyZSBtYWRlLCBhbmQgYWZ0ZXIgb3JkZXJpbmcgYSBsaXN0IHRvIGJlIG1hZGUgb2YgYWxsIHdobyB3ZXJlIHdpbGxpbmcsIENhdG8gd2l0aGRyZXcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['60.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGEgbGl0dGxlIHdoaWxlIHRoZXJlIGNhbWUgdG8gaGltIGxldHRlcnMgZnJvbSBKdWJhIGFuZCBTY2lwaW8uIEp1YmEsIHdobyB3YXMgaGlkZGVuIG9uIGEgbW91bnRhaW4gd2l0aCBhIGZldyBtZW4sIGFza2VkIHdoYXQgQ2F0byBoYWQgZGVjaWRlZCB0byBkbzsgZm9yIGlmIGhlIGFiYW5kb25lZCBVdGljYSwgSnViYSB3b3VsZCB3YWl0IGZvciBoaW0sIGFuZCBpZiBoZSB1bmRlcndlbnQgYSBzaWVnZSwgSnViYSB3b3VsZCBjb21lIHRvIGhpcyBhaWQgd2l0aCBhbiBhcm15LiBTY2lwaW8sIHdobyB3YXMgc3RhdGlvbmVkIHdpdGggaGlzIGZsZWV0IG9mZiBhIGNlcnRhaW4gaGVhZGxhbmQgbm90IGZhciBmcm9tIFV0aWNhLCBhd2FpdGVkIENhdG8ncyBkZWNpc2lvbiBpbiB0aGUgc2FtZSB3YXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBDYXRvIGRlY2lkZWQgdG8gZGV0YWluIHRoZSBiZWFyZXJzIG9mIHRoZSBsZXR0ZXJzIHVudGlsIGhlIGZlbHQgc3VyZSBvZiB0aGUgYXR0aXR1ZGUgb2YgdGhlIHRocmVlIGh1bmRyZWQuIEZvciB0aGUgUm9tYW5zIG9mIHNlbmF0b3JpYWwgcmFuayB3ZXJlIGVhZ2VyIGluIGhpcyBjYXVzZSwgYW5kIGFmdGVyIHByb21wdGx5IG1hbnVtaXR0aW5nIHRoZWlyIHNsYXZlcywgd2VyZSBhcm1pbmcgdGhlbTsgYnV0IGFzIGZvciB0aGUgdGhyZWUgaHVuZHJlZCwgc2luY2UgdGhleSB3ZXJlIG1lbiBlbmdhZ2VkIGluIG5hdmlnYXRpb24gYW5kIG1vbmV5LWxlbmRpbmcgYW5kIGhhZCB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZWlyIHByb3BlcnR5IGluIHNsYXZlcywgdGhlIHdvcmRzIG9mIENhdG8gZGlkIG5vdCBsb25nIGFiaWRlIGluIHRoZWlyIG1pbmRzLCBidXQgbGFwc2VkIGF3YXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBqdXN0IGFzIHBvcm91cyBib2RpZXMgcmVhZGlseSByZWNlaXZlIGhlYXQgYW5kIGFzIHJlYWRpbHkgeWllbGQgaXQgdXAgYWdhaW4gYW5kIGdyb3cgY29sZCB3aGVuIHRoZSBmaXJlIGlzIHJlbW92ZWQsIGluIGxpa2UgbWFubmVyIHRoZXNlIG1lbiwgd2hlbiB0aGV5IHNhdyBDYXRvLCB3ZXJlIGZpbGxlZCB3aXRoIHdhcm10aCBhbmQga2luZGxlZCBpbnRvIGZsYW1lOyBidXQgd2hlbiB0aGV5IGNhbWUgdG8gdGhpbmsgbWF0dGVycyBvdmVyIGJ5IHRoZW1zZWx2ZXMsIHRoZWlyIGZlYXIgb2YgQ2Flc2FyIGRyb3ZlIGF3YXkgdGhlaXIgcmVnYXJkIGZvciBDYXRvIGFuZCBmb3IgaG9ub3VyLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldobywgcHJheSwgYXJlIHdlLDwvcT4gdGhleSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFuZCB3aG8gaXMgaGUgd2hvc2UgY29tbWFuZHMgd2UgYXJlIHJlZnVzaW5nIHRvIG9iZXk/IAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JcyBoZSBub3QgQ2Flc2FyLCB1cG9uIHdob20gdGhlIHdob2xlIHBvd2VyIG9mIFJvbWUgaGFzIGRldm9sdmVkPyBBbmQgbm90IG9uZSBvZiB1cyBpcyBhIFNjaXBpbywgb3IgYSBQb21wZXksIG9yIGEgQ2F0by4gQnV0IGF0IGEgdGltZSB3aGVuIGFsbCBtZW4gYXJlIGxlZCBieSBmZWFyIHRvIHRoaW5rIG1vcmUgaHVtYmx5IHRoYW4gdGhleSBvdWdodCB0byB0aGluaywgYXQgc3VjaCBhIHRpbWUgc2hhbGwgd2UgZmlnaHQgaW4gZGVmZW5jZSBvZiB0aGUgbGliZXJ0eSBvZiBSb21lLCBhbmQgd2FnZSB3YXIgaW4gVXRpY2EgYWdhaW5zdCBhIG1hbiBiZWZvcmUgd2hvbSBDYXRvLCB3aXRoIFBvbXBleSB0aGUgR3JlYXQsIGZsZWQgYW5kIGdhdmUgdXAgSXRhbHk/IEFuZCBzaGFsbCB3ZSBnaXZlIG91ciBzbGF2ZXMgZnJlZWRvbSBpbiBvcHBvc2l0aW9uIHRvIENhZXNhciwgd2Ugd2hvIG91cnNlbHZlcyBoYXZlIG9ubHkgYXMgbXVjaCBmcmVlZG9tIGFzIGhlIG1heSB3aXNoIHRvIGdpdmUgdXM/IE5heSwgYmVmb3JlIGl0IGlzIHRvbyBsYXRlLCBwb29yIHdyZXRjaGVzLCBsZXQgdXMga25vdyBvdXJzZWx2ZXMsIGNyYXZlIHRoZSBjb25xdWVyb3IncyBncmFjZSwgYW5kIHNlbmQgbWVuIHRvIGVudHJlYXQgaGltLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['61.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIENhdG8gZGVjaWRlZCB0byBkZXRhaW4gdGhlIGJlYXJlcnMgb2YgdGhlIGxldHRlcnMgdW50aWwgaGUgZmVsdCBzdXJlIG9mIHRoZSBhdHRpdHVkZSBvZiB0aGUgdGhyZWUgaHVuZHJlZC4gRm9yIHRoZSBSb21hbnMgb2Ygc2VuYXRvcmlhbCByYW5rIHdlcmUgZWFnZXIgaW4gaGlzIGNhdXNlLCBhbmQgYWZ0ZXIgcHJvbXB0bHkgbWFudW1pdHRpbmcgdGhlaXIgc2xhdmVzLCB3ZXJlIGFybWluZyB0aGVtOyBidXQgYXMgZm9yIHRoZSB0aHJlZSBodW5kcmVkLCBzaW5jZSB0aGV5IHdlcmUgbWVuIGVuZ2FnZWQgaW4gbmF2aWdhdGlvbiBhbmQgbW9uZXktbGVuZGluZyBhbmQgaGFkIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlaXIgcHJvcGVydHkgaW4gc2xhdmVzLCB0aGUgd29yZHMgb2YgQ2F0byBkaWQgbm90IGxvbmcgYWJpZGUgaW4gdGhlaXIgbWluZHMsIGJ1dCBsYXBzZWQgYXdheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['61.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBqdXN0IGFzIHBvcm91cyBib2RpZXMgcmVhZGlseSByZWNlaXZlIGhlYXQgYW5kIGFzIHJlYWRpbHkgeWllbGQgaXQgdXAgYWdhaW4gYW5kIGdyb3cgY29sZCB3aGVuIHRoZSBmaXJlIGlzIHJlbW92ZWQsIGluIGxpa2UgbWFubmVyIHRoZXNlIG1lbiwgd2hlbiB0aGV5IHNhdyBDYXRvLCB3ZXJlIGZpbGxlZCB3aXRoIHdhcm10aCBhbmQga2luZGxlZCBpbnRvIGZsYW1lOyBidXQgd2hlbiB0aGV5IGNhbWUgdG8gdGhpbmsgbWF0dGVycyBvdmVyIGJ5IHRoZW1zZWx2ZXMsIHRoZWlyIGZlYXIgb2YgQ2Flc2FyIGRyb3ZlIGF3YXkgdGhlaXIgcmVnYXJkIGZvciBDYXRvIGFuZCBmb3IgaG9ub3VyLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hvLCBwcmF5LCBhcmUgd2UsPC9xPiB0aGV5IHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hbmQgd2hvIGlzIGhlIHdob3NlIGNvbW1hbmRzIHdlIGFyZSByZWZ1c2luZyB0byBvYmV5PyAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JcyBoZSBub3QgQ2Flc2FyLCB1cG9uIHdob20gdGhlIHdob2xlIHBvd2VyIG9mIFJvbWUgaGFzIGRldm9sdmVkPyBBbmQgbm90IG9uZSBvZiB1cyBpcyBhIFNjaXBpbywgb3IgYSBQb21wZXksIG9yIGEgQ2F0by4gQnV0IGF0IGEgdGltZSB3aGVuIGFsbCBtZW4gYXJlIGxlZCBieSBmZWFyIHRvIHRoaW5rIG1vcmUgaHVtYmx5IHRoYW4gdGhleSBvdWdodCB0byB0aGluaywgYXQgc3VjaCBhIHRpbWUgc2hhbGwgd2UgZmlnaHQgaW4gZGVmZW5jZSBvZiB0aGUgbGliZXJ0eSBvZiBSb21lLCBhbmQgd2FnZSB3YXIgaW4gVXRpY2EgYWdhaW5zdCBhIG1hbiBiZWZvcmUgd2hvbSBDYXRvLCB3aXRoIFBvbXBleSB0aGUgR3JlYXQsIGZsZWQgYW5kIGdhdmUgdXAgSXRhbHk/IEFuZCBzaGFsbCB3ZSBnaXZlIG91ciBzbGF2ZXMgZnJlZWRvbSBpbiBvcHBvc2l0aW9uIHRvIENhZXNhciwgd2Ugd2hvIG91cnNlbHZlcyBoYXZlIG9ubHkgYXMgbXVjaCBmcmVlZG9tIGFzIGhlIG1heSB3aXNoIHRvIGdpdmUgdXM/IE5heSwgYmVmb3JlIGl0IGlzIHRvbyBsYXRlLCBwb29yIHdyZXRjaGVzLCBsZXQgdXMga25vdyBvdXJzZWx2ZXMsIGNyYXZlIHRoZSBjb25xdWVyb3IncyBncmFjZSwgYW5kIHNlbmQgbWVuIHRvIGVudHJlYXQgaGltLjwvcT4KCQkJICAgICAgPC90cmFuc2xhdGlvbj4="
translation['61.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPklzIGhlIG5vdCBDYWVzYXIsIHVwb24gd2hvbSB0aGUgd2hvbGUgcG93ZXIgb2YgUm9tZSBoYXMgZGV2b2x2ZWQ/IEFuZCBub3Qgb25lIG9mIHVzIGlzIGEgU2NpcGlvLCBvciBhIFBvbXBleSwgb3IgYSBDYXRvLiBCdXQgYXQgYSB0aW1lIHdoZW4gYWxsIG1lbiBhcmUgbGVkIGJ5IGZlYXIgdG8gdGhpbmsgbW9yZSBodW1ibHkgdGhhbiB0aGV5IG91Z2h0IHRvIHRoaW5rLCBhdCBzdWNoIGEgdGltZSBzaGFsbCB3ZSBmaWdodCBpbiBkZWZlbmNlIG9mIHRoZSBsaWJlcnR5IG9mIFJvbWUsIGFuZCB3YWdlIHdhciBpbiBVdGljYSBhZ2FpbnN0IGEgbWFuIGJlZm9yZSB3aG9tIENhdG8sIHdpdGggUG9tcGV5IHRoZSBHcmVhdCwgZmxlZCBhbmQgZ2F2ZSB1cCBJdGFseT8gQW5kIHNoYWxsIHdlIGdpdmUgb3VyIHNsYXZlcyBmcmVlZG9tIGluIG9wcG9zaXRpb24gdG8gQ2Flc2FyLCB3ZSB3aG8gb3Vyc2VsdmVzIGhhdmUgb25seSBhcyBtdWNoIGZyZWVkb20gYXMgaGUgbWF5IHdpc2ggdG8gZ2l2ZSB1cz8gTmF5LCBiZWZvcmUgaXQgaXMgdG9vIGxhdGUsIHBvb3Igd3JldGNoZXMsIGxldCB1cyBrbm93IG91cnNlbHZlcywgY3JhdmUgdGhlIGNvbnF1ZXJvcidzIGdyYWNlLCBhbmQgc2VuZCBtZW4gdG8gZW50cmVhdCBoaW0uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgdGhlIGNvdXJzZSB3aGljaCB0aGUgbW9yZSBtb2RlcmF0ZSBvZiB0aGUgdGhyZWUgaHVuZHJlZCBhZHZpc2VkOyBidXQgdGhlIG1ham9yaXR5IG9mIHRoZW0gd2VyZSBsYXlpbmcgYSBwbG90IGFnYWluc3QgdGhlIG1lbiBvZiBzZW5hdG9yaWFsIHJhbmssIGluIHRoZSBob3BlIHRoYXQgYnkgc2VpemluZyB0aGVzZSB0aGV5IG1pZ2h0IG1pdGlnYXRlIENhZXNhcidzIHdyYXRoIGFnYWluc3QgdGhlbXNlbHZlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['61.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBjb3Vyc2Ugd2hpY2ggdGhlIG1vcmUgbW9kZXJhdGUgb2YgdGhlIHRocmVlIGh1bmRyZWQgYWR2aXNlZDsgYnV0IHRoZSBtYWpvcml0eSBvZiB0aGVtIHdlcmUgbGF5aW5nIGEgcGxvdCBhZ2FpbnN0IHRoZSBtZW4gb2Ygc2VuYXRvcmlhbCByYW5rLCBpbiB0aGUgaG9wZSB0aGF0IGJ5IHNlaXppbmcgdGhlc2UgdGhleSBtaWdodCBtaXRpZ2F0ZSBDYWVzYXIncyB3cmF0aCBhZ2FpbnN0IHRoZW1zZWx2ZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gc3VzcGVjdGVkIHRoZWlyIGNoYW5nZSBvZiBoZWFydCwgYnV0IHdvdWxkIG5vdCB0YXggdGhlbSB3aXRoIGl0LiBIb3dldmVyLCBoZSB3cm90ZSB0byBTY2lwaW8gYW5kIEp1YmEgYWR2aXNpbmcgdGhlbSB0byBrZWVwIGF3YXkgZnJvbSBVdGljYSwgYmVjYXVzZSB0aGUgdGhyZWUgaHVuZHJlZCB3ZXJlIG5vdCB0byBiZSB0cnVzdGVkLCBhbmQgc2VudCBhd2F5IHRoZSBsZXR0ZXItYmVhcmVycy4gQW5kIG5vdyB0aGUgaG9yc2VtZW4gd2hvIGhhZCBlc2NhcGVkIGZyb20gdGhlIGJhdHRsZSwgaW4gbnVtYmVycyBxdWl0ZSBjb25zaWRlcmFibGUsIHJvZGUgdXAgdG8gVXRpY2EgYW5kIHNlbnQgdGhyZWUgb2YgdGhlaXIgbnVtYmVyIHRvIENhdG8uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiwgaG93ZXZlciwgZGlkIG5vdCBicmluZyB0aGUgc2FtZSBwcm9wb3NpdGlvbiBmcm9tIHRoZSB3aG9sZSBib2R5LiBGb3Igb25lIHBhcnR5IGFtb25nIHRoZW0gd2FzIGJlbnQgb24gZ29pbmcgb2ZmIHRvIEp1YmEsIGFub3RoZXIgd2FudGVkIHRvIGpvaW4gQ2F0bywgd2hpbGUgYSB0aGlyZCB3YXMgcHJldmVudGVkIGJ5IGZlYXIgZnJvbSBlbnRlcmluZyBVdGljYS4gT24gaGVhcmluZyB0aGVpciB2aWV3cywgQ2F0byBvcmRlcmVkIE1hcmN1cyBSdWJyaXVzIHRvIGF0dGVuZCB0byB0aGUgdGhyZWUgaHVuZHJlZDsgaGUgd2FzIHRvIGFjY2VwdCBxdWlldGx5IHRoZSBsaXN0cyBvZiB0aG9zZSB3aG8gZ2F2ZSBmcmVlZG9tIHRvIHRoZWlyIHNsYXZlcywgYW5kIHdhcyB0byB1c2Ugbm8gY29tcHVsc2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhdG8gaGltc2VsZiB0b29rIHRoZSBtZW4gb2Ygc2VuYXRvcmlhbCByYW5rIGFuZCB3ZW50IGZvcnRoIG91dHNpZGUgb2YgVXRpY2EuIEhlcmUgaGUgY29uZmVycmVkIHdpdGggdGhlIGxlYWRlcnMgb2YgdGhlIGhvcnNlbWVuLCBlbnRyZWF0aW5nIHRoZW0gbm90IHRvIGFiYW5kb24gc28gZ3JlYXQgYSBudW1iZXIgb2YgUm9tYW4gc2VuYXRvcnMsIGFuZCBub3QgdG8gY2hvb3NlIEp1YmEgYXMgdGhlaXIgY29tbWFuZGVyIGluc3RlYWQgb2YgQ2F0bywgYnV0IHRvIHNhdmUgb3RoZXJzIGFzIHdlbGwgYXMgc2F2ZSB0aGVtc2VsdmVzIGJ5IGNvbWluZyBpbnRvIGEgY2l0eSB3aGljaCBjb3VsZCBub3QgYmUgdGFrZW4gYnkgc3Rvcm0sIGFuZCBoYWQgZ3JhaW4gYW5kIG90aGVyIHJlcXVpc2l0ZSBwcm92aXNpb24gZm9yIHZlcnkgbWFueSB5ZWFycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlc2UgZW50cmVhdGllcyB0aGUgc2VuYXRvcnMgYWxzbyBqb2luZWQsIGFuZCB3aXRoIHRlYXJzOyB3aGVyZXVwb24gdGhlIGxlYWRlcnMgb2YgdGhlIGhvcnNlbWVuIGRpc2N1c3NlZCB0aGUgbWF0dGVyIHdpdGggdGhlIGhvcnNlbWVuLCB3aGlsZSBDYXRvIHNhdCBkb3duIG9uIGEgbW91bmQgd2l0aCB0aGUgc2VuYXRvcnMgYW5kIGF3YWl0ZWQgdGhlIGFuc3dlcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['62.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0byBzdXNwZWN0ZWQgdGhlaXIgY2hhbmdlIG9mIGhlYXJ0LCBidXQgd291bGQgbm90IHRheCB0aGVtIHdpdGggaXQuIEhvd2V2ZXIsIGhlIHdyb3RlIHRvIFNjaXBpbyBhbmQgSnViYSBhZHZpc2luZyB0aGVtIHRvIGtlZXAgYXdheSBmcm9tIFV0aWNhLCBiZWNhdXNlIHRoZSB0aHJlZSBodW5kcmVkIHdlcmUgbm90IHRvIGJlIHRydXN0ZWQsIGFuZCBzZW50IGF3YXkgdGhlIGxldHRlci1iZWFyZXJzLiBBbmQgbm93IHRoZSBob3JzZW1lbiB3aG8gaGFkIGVzY2FwZWQgZnJvbSB0aGUgYmF0dGxlLCBpbiBudW1iZXJzIHF1aXRlIGNvbnNpZGVyYWJsZSwgcm9kZSB1cCB0byBVdGljYSBhbmQgc2VudCB0aHJlZSBvZiB0aGVpciBudW1iZXIgdG8gQ2F0by4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['62.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiwgaG93ZXZlciwgZGlkIG5vdCBicmluZyB0aGUgc2FtZSBwcm9wb3NpdGlvbiBmcm9tIHRoZSB3aG9sZSBib2R5LiBGb3Igb25lIHBhcnR5IGFtb25nIHRoZW0gd2FzIGJlbnQgb24gZ29pbmcgb2ZmIHRvIEp1YmEsIGFub3RoZXIgd2FudGVkIHRvIGpvaW4gQ2F0bywgd2hpbGUgYSB0aGlyZCB3YXMgcHJldmVudGVkIGJ5IGZlYXIgZnJvbSBlbnRlcmluZyBVdGljYS4gT24gaGVhcmluZyB0aGVpciB2aWV3cywgQ2F0byBvcmRlcmVkIE1hcmN1cyBSdWJyaXVzIHRvIGF0dGVuZCB0byB0aGUgdGhyZWUgaHVuZHJlZDsgaGUgd2FzIHRvIGFjY2VwdCBxdWlldGx5IHRoZSBsaXN0cyBvZiB0aG9zZSB3aG8gZ2F2ZSBmcmVlZG9tIHRvIHRoZWlyIHNsYXZlcywgYW5kIHdhcyB0byB1c2Ugbm8gY29tcHVsc2lvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['62.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvIGhpbXNlbGYgdG9vayB0aGUgbWVuIG9mIHNlbmF0b3JpYWwgcmFuayBhbmQgd2VudCBmb3J0aCBvdXRzaWRlIG9mIFV0aWNhLiBIZXJlIGhlIGNvbmZlcnJlZCB3aXRoIHRoZSBsZWFkZXJzIG9mIHRoZSBob3JzZW1lbiwgZW50cmVhdGluZyB0aGVtIG5vdCB0byBhYmFuZG9uIHNvIGdyZWF0IGEgbnVtYmVyIG9mIFJvbWFuIHNlbmF0b3JzLCBhbmQgbm90IHRvIGNob29zZSBKdWJhIGFzIHRoZWlyIGNvbW1hbmRlciBpbnN0ZWFkIG9mIENhdG8sIGJ1dCB0byBzYXZlIG90aGVycyBhcyB3ZWxsIGFzIHNhdmUgdGhlbXNlbHZlcyBieSBjb21pbmcgaW50byBhIGNpdHkgd2hpY2ggY291bGQgbm90IGJlIHRha2VuIGJ5IHN0b3JtLCBhbmQgaGFkIGdyYWluIGFuZCBvdGhlciByZXF1aXNpdGUgcHJvdmlzaW9uIGZvciB2ZXJ5IG1hbnkgeWVhcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['62.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZXNlIGVudHJlYXRpZXMgdGhlIHNlbmF0b3JzIGFsc28gam9pbmVkLCBhbmQgd2l0aCB0ZWFyczsgd2hlcmV1cG9uIHRoZSBsZWFkZXJzIG9mIHRoZSBob3JzZW1lbiBkaXNjdXNzZWQgdGhlIG1hdHRlciB3aXRoIHRoZSBob3JzZW1lbiwgd2hpbGUgQ2F0byBzYXQgZG93biBvbiBhIG1vdW5kIHdpdGggdGhlIHNlbmF0b3JzIGFuZCBhd2FpdGVkIHRoZSBhbnN3ZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIGp1bmN0dXJlIFJ1YnJpdXMgY2FtZSB1cCwgd3JhdGhmdWxseSBkZW5vdW5jaW5nIHRoZSB0aHJlZSBodW5kcmVkIGZvciBncmVhdCBkaXNvcmRlciBhbmQgdHVtdWx0LCBpbmFzbXVjaCBhcyB0aGV5IHdlcmUgZmFsbGluZyBhd2F5IGFuZCB0aHJvd2luZyB0aGUgY2l0eSBpbnRvIGNvbmZ1c2lvbi4gVGhlcmV1cG9uIHRoZSBvdGhlciBSb21hbnMgYWx0b2dldGhlciBkZXNwYWlyZWQgb2YgdGhlaXIgY2FzZSBhbmQgYnVyc3QgaW50byB0ZWFycyBhbmQgbGFtZW50YXRpb25zOyBidXQgQ2F0byB0cmllZCB0byBlbmNvdXJhZ2UgdGhlbSwgYW5kIHNlbnQgdG8gdGhlIHRocmVlIGh1bmRyZWQgYmlkZGluZyB0aGVtIGF3YWl0IGhpcyBjb21pbmcuIEFuZCBub3cgdGhlIHNwb2tlc21lbiBvZiB0aGUgaG9yc2VtZW4gY2FtZSB3aXRoIGltbW9kZXJhdGUgZGVtYW5kcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBzYWlkIHRoZXkgbmVpdGhlciB3YW50ZWQgSnViYSBmb3IgYSBwYXltYXN0ZXIsIG5vciBmZWFyZWQgQ2Flc2FyIGlmIENhdG8gd2VyZSB0aGVpciBsZWFkZXIsIGJ1dCB0aGF0IHRvIGJlIHNodXQgdXAgd2l0aCB0aGUgcGVvcGxlIG9mIFV0aWNhLCBhIGZpY2tsZSBQaG9lbmljaWFuIGZvbGssIHdhcyBhIGZlYXJmdWwgdGhpbmc7IGZvciBldmVuIHRob3VnaCB0aGV5IHdlcmUgcXVpZXQgbm93LCB3aGVuZXZlciBDYWVzYXIgY2FtZSB1cCBhZ2FpbnN0IHRoZW0gdGhleSB3b3VsZCBwbGF5IHRoZSB0cmFpdG9yIGFuZCBhaWQgaGltIGluIGhpcyBhdHRhY2tzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgdGhlcmVmb3JlLCBhbnkgb25lIHdhbnRlZCB0aGVpciBhaWQgaW4gd2FyIGFuZCB0aGVpciBwcmVzZW5jZSwgaGUgbXVzdCBmaXJzdCBkcml2ZSBvdXQgb3IgZGVzdHJveSBhbGwgdGhlIHBlb3BsZSBvZiBVdGljYSwgYW5kIHRoZW4gaW52aXRlIHRoZSBob3JzZW1lbiBpbnRvIGEgY2l0eSB0aGF0IHdhcyBmcmVlIGZyb20gQmFyYmFyaWFucyBhbmQgZW5lbWllcy4gVGhpcyBwcm9wb3NhbCBDYXRvIHJlZ2FyZGVkIGFzIGV4Y2Vzc2l2ZWx5IGJhcmJhcm91cyBhbmQgY3J1ZWwsIGJ1dCBoZSByZXR1cm5lZCBhIG1pbGQgYW5zd2VyLCBzYXlpbmcgdGhhdCBoZSB3b3VsZCBhZHZpc2Ugd2l0aCB0aGUgdGhyZWUgaHVuZHJlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['63.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyBqdW5jdHVyZSBSdWJyaXVzIGNhbWUgdXAsIHdyYXRoZnVsbHkgZGVub3VuY2luZyB0aGUgdGhyZWUgaHVuZHJlZCBmb3IgZ3JlYXQgZGlzb3JkZXIgYW5kIHR1bXVsdCwgaW5hc211Y2ggYXMgdGhleSB3ZXJlIGZhbGxpbmcgYXdheSBhbmQgdGhyb3dpbmcgdGhlIGNpdHkgaW50byBjb25mdXNpb24uIFRoZXJldXBvbiB0aGUgb3RoZXIgUm9tYW5zIGFsdG9nZXRoZXIgZGVzcGFpcmVkIG9mIHRoZWlyIGNhc2UgYW5kIGJ1cnN0IGludG8gdGVhcnMgYW5kIGxhbWVudGF0aW9uczsgYnV0IENhdG8gdHJpZWQgdG8gZW5jb3VyYWdlIHRoZW0sIGFuZCBzZW50IHRvIHRoZSB0aHJlZSBodW5kcmVkIGJpZGRpbmcgdGhlbSBhd2FpdCBoaXMgY29taW5nLiBBbmQgbm93IHRoZSBzcG9rZXNtZW4gb2YgdGhlIGhvcnNlbWVuIGNhbWUgd2l0aCBpbW1vZGVyYXRlIGRlbWFuZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['63.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgc2FpZCB0aGV5IG5laXRoZXIgd2FudGVkIEp1YmEgZm9yIGEgcGF5bWFzdGVyLCBub3IgZmVhcmVkIENhZXNhciBpZiBDYXRvIHdlcmUgdGhlaXIgbGVhZGVyLCBidXQgdGhhdCB0byBiZSBzaHV0IHVwIHdpdGggdGhlIHBlb3BsZSBvZiBVdGljYSwgYSBmaWNrbGUgUGhvZW5pY2lhbiBmb2xrLCB3YXMgYSBmZWFyZnVsIHRoaW5nOyBmb3IgZXZlbiB0aG91Z2ggdGhleSB3ZXJlIHF1aWV0IG5vdywgd2hlbmV2ZXIgQ2Flc2FyIGNhbWUgdXAgYWdhaW5zdCB0aGVtIHRoZXkgd291bGQgcGxheSB0aGUgdHJhaXRvciBhbmQgYWlkIGhpbSBpbiBoaXMgYXR0YWNrcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['63.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPklmLCB0aGVyZWZvcmUsIGFueSBvbmUgd2FudGVkIHRoZWlyIGFpZCBpbiB3YXIgYW5kIHRoZWlyIHByZXNlbmNlLCBoZSBtdXN0IGZpcnN0IGRyaXZlIG91dCBvciBkZXN0cm95IGFsbCB0aGUgcGVvcGxlIG9mIFV0aWNhLCBhbmQgdGhlbiBpbnZpdGUgdGhlIGhvcnNlbWVuIGludG8gYSBjaXR5IHRoYXQgd2FzIGZyZWUgZnJvbSBCYXJiYXJpYW5zIGFuZCBlbmVtaWVzLiBUaGlzIHByb3Bvc2FsIENhdG8gcmVnYXJkZWQgYXMgZXhjZXNzaXZlbHkgYmFyYmFyb3VzIGFuZCBjcnVlbCwgYnV0IGhlIHJldHVybmVkIGEgbWlsZCBhbnN3ZXIsIHNheWluZyB0aGF0IGhlIHdvdWxkIGFkdmlzZSB3aXRoIHRoZSB0aHJlZSBodW5kcmVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TbyBoZSB3ZW50IGJhY2sgaW50byB0aGUgY2l0eSwgd2hlcmUgaGUgZm91bmQgdGhlIG1lbiBubyBsb25nZXIgbWFudWZhY3R1cmluZyBwcmV0ZXh0cyBvciBldmFzaW9ucyBvdXQgb2YgcmVnYXJkIGZvciBoaW0sIGJ1dCBkb3ducmlnaHQgYW5ncnkgdGhhdCBhbnkgb25lIHNob3VsZCB0cnkgdG8gZm9yY2UgdGhlbSB0byB3YXIgd2l0aCBDYWVzYXIgd2hlbiB0aGV5IHdlcmUgbmVpdGhlciBhYmxlIG5vciB3aWxsaW5nLiBBbmQgc29tZSBvZiB0aGVtIGFjdHVhbGx5IG11dHRlcmVkIHRoYXQgdGhlIG1lbiBvZiBzZW5hdG9yaWFsIHJhbmsgb3VnaHQgdG8gYmUgZGV0YWluZWQgaW4gdGhlIGNpdHkgd2hpbGUgQ2Flc2FyIHdhcyBhcHByb2FjaGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoaXMgQ2F0byBsZXQgcGFzcywgYXMgdGhvdWdoIGhlIGhhZCBub3QgaGVhcmQgaXQgKGFuZCBpbmRlZWQgaGUgd2FzIHNvbWV3aGF0IGRlYWYpOyB3aGVuLCBob3dldmVyLCBtZW4gY2FtZSB0byBoaW0gd2l0aCB0aWRpbmdzIHRoYXQgdGhlIGhvcnNlbWVuIHdlcmUgZ29pbmcgYXdheSwgaGUgd2FzIGFmcmFpZCB0aGF0IHRoZSB0aHJlZSBodW5kcmVkIG1pZ2h0IGJlY29tZSBhbHRvZ2V0aGVyIGRlc3BlcmF0ZSBpbiB0aGVpciBob3N0aWxpdHkgdG8gdGhlIHNlbmF0b3JzLCBhbmQgdGhlcmVmb3JlIHJvc2UgdXAgYW5kIHNldCBvdXQgb24gZm9vdCB3aXRoIGhpcyBmcmllbmRzOyBhbmQgd2hlbiBoZSBwZXJjZWl2ZWQgdGhhdCB0aGUgaG9yc2VtZW4gaGFkIGFscmVhZHkgZ29uZSBvbiwgaGUgdG9vayBhIGhvcnNlIGFuZCBoYXN0ZW5lZCBhZnRlciB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgaG9yc2VtZW4gd2VyZSBnbGFkIHdoZW4gdGhleSBzYXcgaGltIHJpZGluZyB1cCwgYW5kIGdyZWV0ZWQgaGltLCBhbmQgZXhob3J0ZWQgaGltIHRvIHNhdmUgaGltc2VsZiB3aXRoIHRoZW0uIFRoZW4sIGl0IGlzIHNhaWQsIENhdG8gYWN0dWFsbHkgYnVyc3QgaW50byB0ZWFycyBhcyBoZSBiZWdnZWQgd2l0aCBvdXRzdHJldGNoZWQgaGFuZHMgaW4gYmVoYWxmIG9mIHRoZSBzZW5hdG9ycywgZXZlbiB0cnlpbmcgdG8gdHVybiBiYWNrIHRoZSBob3JzZXMgb2Ygc29tZSBvZiB0aGUgaG9yc2VtZW4gYW5kIGxheWluZyBob2xkIG9mIHRoZWlyIGFybXMsIHVudGlsIGhlIHByZXZhaWxlZCB1cG9uIHRoZW0gdG8gcmVtYWluIHRoZXJlIHRoYXQgZGF5IGF0IGxlYXN0LCBhbmQgdG8gbWFrZSB0aGUgZmxpZ2h0IG9mIHRoZSBzZW5hdG9ycyBzYWZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['63.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIHdlbnQgYmFjayBpbnRvIHRoZSBjaXR5LCB3aGVyZSBoZSBmb3VuZCB0aGUgbWVuIG5vIGxvbmdlciBtYW51ZmFjdHVyaW5nIHByZXRleHRzIG9yIGV2YXNpb25zIG91dCBvZiByZWdhcmQgZm9yIGhpbSwgYnV0IGRvd25yaWdodCBhbmdyeSB0aGF0IGFueSBvbmUgc2hvdWxkIHRyeSB0byBmb3JjZSB0aGVtIHRvIHdhciB3aXRoIENhZXNhciB3aGVuIHRoZXkgd2VyZSBuZWl0aGVyIGFibGUgbm9yIHdpbGxpbmcuIEFuZCBzb21lIG9mIHRoZW0gYWN0dWFsbHkgbXV0dGVyZWQgdGhhdCB0aGUgbWVuIG9mIHNlbmF0b3JpYWwgcmFuayBvdWdodCB0byBiZSBkZXRhaW5lZCBpbiB0aGUgY2l0eSB3aGlsZSBDYWVzYXIgd2FzIGFwcHJvYWNoaW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['63.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIENhdG8gbGV0IHBhc3MsIGFzIHRob3VnaCBoZSBoYWQgbm90IGhlYXJkIGl0IChhbmQgaW5kZWVkIGhlIHdhcyBzb21ld2hhdCBkZWFmKTsgd2hlbiwgaG93ZXZlciwgbWVuIGNhbWUgdG8gaGltIHdpdGggdGlkaW5ncyB0aGF0IHRoZSBob3JzZW1lbiB3ZXJlIGdvaW5nIGF3YXksIGhlIHdhcyBhZnJhaWQgdGhhdCB0aGUgdGhyZWUgaHVuZHJlZCBtaWdodCBiZWNvbWUgYWx0b2dldGhlciBkZXNwZXJhdGUgaW4gdGhlaXIgaG9zdGlsaXR5IHRvIHRoZSBzZW5hdG9ycywgYW5kIHRoZXJlZm9yZSByb3NlIHVwIGFuZCBzZXQgb3V0IG9uIGZvb3Qgd2l0aCBoaXMgZnJpZW5kczsgYW5kIHdoZW4gaGUgcGVyY2VpdmVkIHRoYXQgdGhlIGhvcnNlbWVuIGhhZCBhbHJlYWR5IGdvbmUgb24sIGhlIHRvb2sgYSBob3JzZSBhbmQgaGFzdGVuZWQgYWZ0ZXIgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['63.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBob3JzZW1lbiB3ZXJlIGdsYWQgd2hlbiB0aGV5IHNhdyBoaW0gcmlkaW5nIHVwLCBhbmQgZ3JlZXRlZCBoaW0sIGFuZCBleGhvcnRlZCBoaW0gdG8gc2F2ZSBoaW1zZWxmIHdpdGggdGhlbS4gVGhlbiwgaXQgaXMgc2FpZCwgQ2F0byBhY3R1YWxseSBidXJzdCBpbnRvIHRlYXJzIGFzIGhlIGJlZ2dlZCB3aXRoIG91dHN0cmV0Y2hlZCBoYW5kcyBpbiBiZWhhbGYgb2YgdGhlIHNlbmF0b3JzLCBldmVuIHRyeWluZyB0byB0dXJuIGJhY2sgdGhlIGhvcnNlcyBvZiBzb21lIG9mIHRoZSBob3JzZW1lbiBhbmQgbGF5aW5nIGhvbGQgb2YgdGhlaXIgYXJtcywgdW50aWwgaGUgcHJldmFpbGVkIHVwb24gdGhlbSB0byByZW1haW4gdGhlcmUgdGhhdCBkYXkgYXQgbGVhc3QsIGFuZCB0byBtYWtlIHRoZSBmbGlnaHQgb2YgdGhlIHNlbmF0b3JzIHNhZmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGhlIGNhbWUgdG8gdGhlIGNpdHkgd2l0aCB0aGVtLCBzdGF0aW9uZWQgc29tZSBvZiB0aGVtIGF0IHRoZSBnYXRlcywgYW5kIGNvbW1pdHRlZCB0aGUgY2l0YWRlbCB0byBvdGhlcnMgdG8gZ3VhcmQsIHRoZSB0aHJlZSBodW5kcmVkIHdlcmUgYWZyYWlkIHRoZXkgbWlnaHQgYmUgcHVuaXNoZWQgZm9yIHRoZWlyIGNoYW5nZSBvZiBhbGxlZ2lhbmNlLCBhbmQgc2VuZGluZyB0byBDYXRvIHRoZXkgYmVnZ2VkIGhpbSBieSBhbGwgbWVhbnMgdG8gY29tZSB0byB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHNlbmF0b3JzIGNyb3dkZWQgYWJvdXQgaGltIGFuZCB3b3VsZCBub3QgbGV0IGhpbSBnbywgZGVjbGFyaW5nIHRoYXQgdGhleSB3b3VsZCBub3QgZ2l2ZSB1cCB0aGVpciBzYXZpb3VyIGFuZCBndWFyZGlhbiB0byB0cmVhY2hlcm91cyBhbmQgZmFpdGhsZXNzIG1lbi4gRm9yIGJ5IHRoYXQgdGltZSBhbGwgdGhlIGluaGFiaXRhbnRzIG9mIFV0aWNhIGFsaWtlIG1vc3QgY2xlYXJseSBwZXJjZWl2ZWQgYW5kIGZvbmRseSBhZG1pcmVkIHRoZSB2aXJ0dW91cyBxdWFsaXRpZXMgb2YgQ2F0bywgY29udmluY2VkIHRoYXQgbm90aGluZyBkZWNlaXRmdWwgb3Igc3B1cmlvdXMgZW50ZXJlZCBpbnRvIHdoYXQgaGUgZGlkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['64.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gaGUgY2FtZSB0byB0aGUgY2l0eSB3aXRoIHRoZW0sIHN0YXRpb25lZCBzb21lIG9mIHRoZW0gYXQgdGhlIGdhdGVzLCBhbmQgY29tbWl0dGVkIHRoZSBjaXRhZGVsIHRvIG90aGVycyB0byBndWFyZCwgdGhlIHRocmVlIGh1bmRyZWQgd2VyZSBhZnJhaWQgdGhleSBtaWdodCBiZSBwdW5pc2hlZCBmb3IgdGhlaXIgY2hhbmdlIG9mIGFsbGVnaWFuY2UsIGFuZCBzZW5kaW5nIHRvIENhdG8gdGhleSBiZWdnZWQgaGltIGJ5IGFsbCBtZWFucyB0byBjb21lIHRvIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['64.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgc2VuYXRvcnMgY3Jvd2RlZCBhYm91dCBoaW0gYW5kIHdvdWxkIG5vdCBsZXQgaGltIGdvLCBkZWNsYXJpbmcgdGhhdCB0aGV5IHdvdWxkIG5vdCBnaXZlIHVwIHRoZWlyIHNhdmlvdXIgYW5kIGd1YXJkaWFuIHRvIHRyZWFjaGVyb3VzIGFuZCBmYWl0aGxlc3MgbWVuLiBGb3IgYnkgdGhhdCB0aW1lIGFsbCB0aGUgaW5oYWJpdGFudHMgb2YgVXRpY2EgYWxpa2UgbW9zdCBjbGVhcmx5IHBlcmNlaXZlZCBhbmQgZm9uZGx5IGFkbWlyZWQgdGhlIHZpcnR1b3VzIHF1YWxpdGllcyBvZiBDYXRvLCBjb252aW5jZWQgdGhhdCBub3RoaW5nIGRlY2VpdGZ1bCBvciBzcHVyaW91cyBlbnRlcmVkIGludG8gd2hhdCBoZSBkaWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGZvciBhIGxvbmcgdGltZSB0aGUgbWFuIGhhZCBkZXRlcm1pbmVkIHRvIGRlc3Ryb3kgaGltc2VsZiwgYW5kIGhlIHdhcyB1bmRlcmdvaW5nIGRyZWFkZnVsIHRvaWxzIGFuZCBzdWZmZXJpbmcgYW54aWV0eSBhbmQgcGFpbiBpbiBiZWhhbGYgb2Ygb3RoZXJzLCB0aGF0IGhlIG1pZ2h0IHB1dCB0aGVtIGFsbCBpbiB0aGUgd2F5IG9mIHNhZmV0eSBiZWZvcmUgaGUgdG9vayBoaXMgbGVhdmUgb2YgbGlmZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbmRlZWQsIHRoZXJlIHdhcyBubyBzZWNyZXQgYWJvdXQgaGlzIHJlc29sdXRpb24gdG8gZGllLCBhbHRob3VnaCBoZSBzYWlkIG5vdGhpbmcgYWJvdXQgaXQuIEFjY29yZGluZ2x5LCBhZnRlciBjb21mb3J0aW5nIHRoZSBzZW5hdG9ycywgaGUgb2JleWVkIHRoZSBjYWxsIG9mIHRoZSB0aHJlZSBodW5kcmVkLiBIZSBjYW1lIGFsb25lIHRvIHRoZW0sIGFuZCB0aGV5IHRoYW5rZWQgaGltLCBhbmQgYmVnZ2VkIGhpbSBpbiBhbGwgb3RoZXIgd2F5cyB0byB0cnVzdCBhbmQgbWFrZSB1c2Ugb2YgdGhlbSwgYnV0IGlmIHRoZXkgd2VyZSBub3QgQ2F0b3MgYW5kIGNvdWxkIG5vdCBjYXJyeSB0aGUgbGFyZ2UgdGhvdWdodHMgb2YgQ2F0bywgdG8gaGF2ZSBwaXR5IG9uIHRoZWlyIHdlYWtuZXNzOyAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgbm93IHRoYXQgdGhleSBoYWQgZGV0ZXJtaW5lZCB0byBzZW5kIHRvIENhZXNhciBhbmQgcHJheSBmb3IgaGlzIG1lcmN5LCBmb3IgQ2F0byBmaXJzdCBvZiBhbGwgdGhleSB3b3VsZCBtYWtlIHRoZWlyIHByYXllcnM7IGFuZCBpZiB0aGV5IGNvdWxkIG5vdCBwcmV2YWlsIHdpdGggQ2Flc2FyLCB0aGV5IHdvdWxkIG5vdCBhY2NlcHQgdGhlIGdyYWNlIHdoaWNoIGhlIG1pZ2h0IG9mZmVyIHRvIHRoZW0sIGJ1dCBhcyBsb25nIGFzIHRoZXkgaGFkIGJyZWF0aCB3b3VsZCBmaWdodCBmb3IgQ2F0by4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['64.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgdGhlcmUgd2FzIG5vIHNlY3JldCBhYm91dCBoaXMgcmVzb2x1dGlvbiB0byBkaWUsIGFsdGhvdWdoIGhlIHNhaWQgbm90aGluZyBhYm91dCBpdC4gQWNjb3JkaW5nbHksIGFmdGVyIGNvbWZvcnRpbmcgdGhlIHNlbmF0b3JzLCBoZSBvYmV5ZWQgdGhlIGNhbGwgb2YgdGhlIHRocmVlIGh1bmRyZWQuIEhlIGNhbWUgYWxvbmUgdG8gdGhlbSwgYW5kIHRoZXkgdGhhbmtlZCBoaW0sIGFuZCBiZWdnZWQgaGltIGluIGFsbCBvdGhlciB3YXlzIHRvIHRydXN0IGFuZCBtYWtlIHVzZSBvZiB0aGVtLCBidXQgaWYgdGhleSB3ZXJlIG5vdCBDYXRvcyBhbmQgY291bGQgbm90IGNhcnJ5IHRoZSBsYXJnZSB0aG91Z2h0cyBvZiBDYXRvLCB0byBoYXZlIHBpdHkgb24gdGhlaXIgd2Vha25lc3M7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['64.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBub3cgdGhhdCB0aGV5IGhhZCBkZXRlcm1pbmVkIHRvIHNlbmQgdG8gQ2Flc2FyIGFuZCBwcmF5IGZvciBoaXMgbWVyY3ksIGZvciBDYXRvIGZpcnN0IG9mIGFsbCB0aGV5IHdvdWxkIG1ha2UgdGhlaXIgcHJheWVyczsgYW5kIGlmIHRoZXkgY291bGQgbm90IHByZXZhaWwgd2l0aCBDYWVzYXIsIHRoZXkgd291bGQgbm90IGFjY2VwdCB0aGUgZ3JhY2Ugd2hpY2ggaGUgbWlnaHQgb2ZmZXIgdG8gdGhlbSwgYnV0IGFzIGxvbmcgYXMgdGhleSBoYWQgYnJlYXRoIHdvdWxkIGZpZ2h0IGZvciBDYXRvLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHJlcGx5IHRvIHRoaXMsIGFsdGVyIHByYWlzaW5nIHRoZWlyIGdvb2Qgd2lsbCwgQ2F0byBzYWlkIHRoYXQgdG8gc2VjdXJlIHRoZWlyIG93biBzYWZldHkgdGhleSBvdWdodCB0byBzZW5kIHRvIENhZXNhciB3aXRoIGFsbCBzcGVlZCwgYnV0IHRoZXkgbXVzdCBtYWtlIG5vIHByYXllciBmb3IgaGltOyAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnByYXllciBiZWxvbmdlZCB0byB0aGUgY29ucXVlcmVkLCBhbmQgdGhlIGNyYXZpbmcgb2YgZ3JhY2UgdG8gdGhvc2Ugd2hvIGhhZCBkb25lIHdyb25nOyBidXQgZm9yIGhpcyBwYXJ0IGhlIGhhZCBub3Qgb25seSBiZWVuIHVudmFucXVpc2hlZCBhbGwgaGlzIGxpZmUsIGJ1dCB3YXMgYWN0dWFsbHkgYSB2aWN0b3Igbm93IGFzIGZhciBhcyBoZSBjaG9zZSB0byBiZSwgYW5kIGEgY29ucXVlcm9yIG9mIENhZXNhciBpbiBhbGwgdGhhdCB3YXMgaG9ub3VyYWJsZSBhbmQganVzdDsgQ2Flc2FyIHdhcyB0aGUgb25lIHdobyB3YXMgdmFucXVpc2hlZCBhbmQgdGFrZW47IGZvciB0aGUgaG9zdGlsZSBhY3RzIGFnYWluc3QgaGlzIGNvdW50cnkgd2hpY2ggaGUgaGFkIGxvbmcgZGVuaWVkLCB3ZXJlIG5vdyBkZXRlY3RlZCBhbmQgcHJvdmVuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['64.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnByYXllciBiZWxvbmdlZCB0byB0aGUgY29ucXVlcmVkLCBhbmQgdGhlIGNyYXZpbmcgb2YgZ3JhY2UgdG8gdGhvc2Ugd2hvIGhhZCBkb25lIHdyb25nOyBidXQgZm9yIGhpcyBwYXJ0IGhlIGhhZCBub3Qgb25seSBiZWVuIHVudmFucXVpc2hlZCBhbGwgaGlzIGxpZmUsIGJ1dCB3YXMgYWN0dWFsbHkgYSB2aWN0b3Igbm93IGFzIGZhciBhcyBoZSBjaG9zZSB0byBiZSwgYW5kIGEgY29ucXVlcm9yIG9mIENhZXNhciBpbiBhbGwgdGhhdCB3YXMgaG9ub3VyYWJsZSBhbmQganVzdDsgQ2Flc2FyIHdhcyB0aGUgb25lIHdobyB3YXMgdmFucXVpc2hlZCBhbmQgdGFrZW47IGZvciB0aGUgaG9zdGlsZSBhY3RzIGFnYWluc3QgaGlzIGNvdW50cnkgd2hpY2ggaGUgaGFkIGxvbmcgZGVuaWVkLCB3ZXJlIG5vdyBkZXRlY3RlZCBhbmQgcHJvdmVuLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIGRpc2NvdXJzZSB0byB0aGUgdGhyZWUgaHVuZHJlZCwgaGUgd2l0aGRyZXc7IGFuZCBvbiBsZWFybmluZyB0aGF0IENhZXNhciB3aXRoIGFsbCBoaXMgYXJteSB3YXMgYWxyZWFkeSBvbiB0aGUgbWFyY2gsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWhhITwvcT4gaGUgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5oZSB0aGlua3Mgd2UgYXJlIG1lbiE8L3E+IFRoZW4gdHVybmluZyB0byB0aGUgc2VuYXRvcnMgaGUgYmFkZSB0aGVtIG5vdCBkZWxheSwgYnV0IHNhdmUgdGhlbXNlbHZlcyB3aGlsZSB0aGUgaG9yc2VtZW4gd2VyZSBzdGlsbCB0aGVyZS4gSGUgYWxzbyBjbG9zZWQgdGhlIG90aGVyIGdhdGVzIG9mIHRoZSBjaXR5LCBhbmQgc3RhdGlvbmluZyBoaW1zZWxmIGF0IHRoZSBvbmUgbGVhZGluZyB0byB0aGUgc2VhLCBoZSBhc3NpZ25lZCB0cmFuc3BvcnRzIHRvIHRob3NlIHVuZGVyIGhpcyBjb21tYW5kLCBhbmQgdHJpZWQgdG8ga2VlcCB0aGluZ3MgaW4gb3JkZXIsIHN0b3BwaW5nIGRlZWRzIG9mIHdyb25nLCBxdWVsbGluZyB0dW11bHRzLCBhbmQgc3VwcGx5aW5nIHN0b3JlcyB0byB0aG9zZSB3aG8gd2VyZSBkZXN0aXR1dGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIE1hcmN1cyBPY3Rhdml1cyB3aXRoIHR3byBsZWdpb25zIGVuY2FtcGVkIG5lYXIgYnkgYW5kIHNlbnQgdG8gQ2F0byBkZW1hbmRpbmcgdGhhdCBoZSBjb21lIHRvIHRlcm1zIHdpdGggaGltIGFib3V0IHRoZSBjb21tYW5kIGluIHRoZSBwcm92aW5jZSwgQ2F0byB3b3VsZCBtYWtlIG5vIHJlcGx5IHRvIGhpbSwgYnV0IHNhaWQgdG8gaGlzIGZyaWVuZHM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2FuIHdlIHRoZW4gd29uZGVyIHRoYXQgb3VyIGNhdXNlIGlzIGxvc3QsIHdoZW4gd2Ugc2VlIHRoYXQgdGhlIGxvdmUgb2YgY29tbWFuZCBhYmlkZXMgd2l0aCB1cyB0aG91Z2ggd2UgYXJlIHN0YW5kaW5nIG9uIHRoZSBicmluayBvZiBkZXN0cnVjdGlvbj88L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['65.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBkaXNjb3Vyc2UgdG8gdGhlIHRocmVlIGh1bmRyZWQsIGhlIHdpdGhkcmV3OyBhbmQgb24gbGVhcm5pbmcgdGhhdCBDYWVzYXIgd2l0aCBhbGwgaGlzIGFybXkgd2FzIGFscmVhZHkgb24gdGhlIG1hcmNoLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWhhITwvcT4gaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhlIHRoaW5rcyB3ZSBhcmUgbWVuITwvcT4gVGhlbiB0dXJuaW5nIHRvIHRoZSBzZW5hdG9ycyBoZSBiYWRlIHRoZW0gbm90IGRlbGF5LCBidXQgc2F2ZSB0aGVtc2VsdmVzIHdoaWxlIHRoZSBob3JzZW1lbiB3ZXJlIHN0aWxsIHRoZXJlLiBIZSBhbHNvIGNsb3NlZCB0aGUgb3RoZXIgZ2F0ZXMgb2YgdGhlIGNpdHksIGFuZCBzdGF0aW9uaW5nIGhpbXNlbGYgYXQgdGhlIG9uZSBsZWFkaW5nIHRvIHRoZSBzZWEsIGhlIGFzc2lnbmVkIHRyYW5zcG9ydHMgdG8gdGhvc2UgdW5kZXIgaGlzIGNvbW1hbmQsIGFuZCB0cmllZCB0byBrZWVwIHRoaW5ncyBpbiBvcmRlciwgc3RvcHBpbmcgZGVlZHMgb2Ygd3JvbmcsIHF1ZWxsaW5nIHR1bXVsdHMsIGFuZCBzdXBwbHlpbmcgc3RvcmVzIHRvIHRob3NlIHdobyB3ZXJlIGRlc3RpdHV0ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['65.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIE1hcmN1cyBPY3Rhdml1cyB3aXRoIHR3byBsZWdpb25zIGVuY2FtcGVkIG5lYXIgYnkgYW5kIHNlbnQgdG8gQ2F0byBkZW1hbmRpbmcgdGhhdCBoZSBjb21lIHRvIHRlcm1zIHdpdGggaGltIGFib3V0IHRoZSBjb21tYW5kIGluIHRoZSBwcm92aW5jZSwgQ2F0byB3b3VsZCBtYWtlIG5vIHJlcGx5IHRvIGhpbSwgYnV0IHNhaWQgdG8gaGlzIGZyaWVuZHM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYW4gd2UgdGhlbiB3b25kZXIgdGhhdCBvdXIgY2F1c2UgaXMgbG9zdCwgd2hlbiB3ZSBzZWUgdGhhdCB0aGUgbG92ZSBvZiBjb21tYW5kIGFiaWRlcyB3aXRoIHVzIHRob3VnaCB3ZSBhcmUgc3RhbmRpbmcgb24gdGhlIGJyaW5rIG9mIGRlc3RydWN0aW9uPzwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyBqdW5jdHVyZSwgaGVhcmluZyB0aGF0IHRoZSBob3JzZW1lbiwgYXMgdGhleSB3ZW50IGF3YXksIHdlcmUgYWxyZWFkeSBwbHVuZGVyaW5nIHRoZSBwZW9wbGUgb2YgVXRpY2EgYXMgdGhvdWdoIHRoZWlyIHByb3BlcnR5IHdhcyBib290eSwgaGUgcmFuIHRvIHRoZW0gYXMgZmFzdCBhcyBoZSBjb3VsZDsgZnJvbSB0aGUgZmlyc3Qgd2hvbSBoZSBtZXQgaGUgdG9vayBhd2F5IHRoZWlyIHBsdW5kZXIsIGJ1dCB0aGUgcmVzdCwgZXZlcnkgbWFuIG9mIHRoZW0sIG1hZGUgaGFzdGUgdG8gbGF5IGRvd24gb3IgdGhyb3cgYXdheSB3aGF0IHRoZXkgaGFkLCBhbmQgYWxsIGZlbHQgc28gYXNoYW1lZCB0aGF0IHRoZXkgd2VudCBvZmYgaW4gc2lsZW5jZSBhbmQgd2l0aCBkb3duY2FzdCBsb29rcy4gVGhlbiBDYXRvLCBhZnRlciBjYWxsaW5nIHRoZSBwZW9wbGUgb2YgVXRpY2EgdG9nZXRoZXIgaW50byB0aGUgY2l0eSwgYmVnZ2VkIHRoZW0gbm90IHRvIGVtYml0dGVyIENhZXNhciBhZ2FpbnN0IHRoZSB0aHJlZSBodW5kcmVkLCBidXQgdG8gdW5pdGUgd2l0aCBvbmUgYW5vdGhlciBpbiBzZWN1cmluZyBzYWZldHkgZm9yIGFsbC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TmV4dCwgaGUgYmV0b29rIGhpbXNlbGYgYWdhaW4gdG8gdGhlIHNlYSBhbmQgc3VwZXJpbnRlbmRlZCB0aGUgZW1iYXJjYXRpb24gdGhlcmUsIGVtYnJhY2luZyBhbmQgZXNjb3J0aW5nIG9uIHRoZWlyIHdheSBhbGwgdGhlIGZyaWVuZHMgYW5kIGFjcXVhaW50YW5jZXMgd2hvbSBoZSBjb3VsZCBwZXJzdWFkZSB0byBnby4gSGlzIHNvbiwgaG93ZXZlciwgaGUgY291bGQgbm90IHBlcnN1YWRlIHRvIHRha2Ugc2hpcCwgbm9yIGRpZCBoZSB0aGluayBpdCBoaXMgZHV0eSB0byB0cnkgdG8gdHVybiB0aGUgeW91bmcgbWFuIGZyb20gaGlzIHB1cnBvc2Ugb2YgY2xpbmdpbmcgdG8gaGlzIGZhdGhlci4gQnV0IHRoZXJlIHdhcyBvbmUgU3RhdHlsbGl1cywgYSBtYW4gd2hvIHdhcyB5b3VuZyBpbiB5ZWFycywgYnV0IG1pbmRlZCB0byBiZSBzdHJvbmcgaW4gcHVycG9zZSBhbmQgdG8gaW1pdGF0ZSBDYXRvJ3MgY2FsbW5lc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuIENhdG8gaW5zaXN0ZWQgc2hvdWxkIHRha2Ugc2hpcDsgZm9yIGhlIHdhcyBhIG5vdG9yaW91cyBoYXRlciBvZiBDYWVzYXIuIEJ1dCB3aGVuIFN0YXR5bGxpdXMgd291bGQgbm90IGNvbnNlbnQsIENhdG8gdHVybmVkIGhpcyBleWVzIHVwb24gQXBvbGxvbmlkZXMgdGhlIFN0b2ljIGFuZCBEZW1ldHJpdXMgdGhlIFBlcmlwYXRldGljLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgeW91ciB0YXNrIHRvIHJlZHVjZSB0aGlzIG1hbidzIHN3b2xsZW4gcHJpZGUgYW5kIHJlc3RvcmUgaGltIHRvIGNvbmZvcm1pdHkgd2l0aCBoaXMgYmVzdCBpbnRlcmVzdHMuPC9xPiBIZSBoaW1zZWxmLCBob3dldmVyLCBjb250aW51ZWQgdG8gYXNzaXN0IHRoZSByZXN0IGluIGdldHRpbmcgb2ZmLCBhbmQgdG8gc3VwcGx5IHRoZSBuZWVkeSB3aXRoIHdheXMgYW5kIG1lYW5zLCBhbmQgd2FzIHRodXMgZW5nYWdlZCBhbGwgdGhyb3VnaCB0aGUgbmlnaHQgYW5kIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGZvbGxvd2luZyBkYXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['65.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMganVuY3R1cmUsIGhlYXJpbmcgdGhhdCB0aGUgaG9yc2VtZW4sIGFzIHRoZXkgd2VudCBhd2F5LCB3ZXJlIGFscmVhZHkgcGx1bmRlcmluZyB0aGUgcGVvcGxlIG9mIFV0aWNhIGFzIHRob3VnaCB0aGVpciBwcm9wZXJ0eSB3YXMgYm9vdHksIGhlIHJhbiB0byB0aGVtIGFzIGZhc3QgYXMgaGUgY291bGQ7IGZyb20gdGhlIGZpcnN0IHdob20gaGUgbWV0IGhlIHRvb2sgYXdheSB0aGVpciBwbHVuZGVyLCBidXQgdGhlIHJlc3QsIGV2ZXJ5IG1hbiBvZiB0aGVtLCBtYWRlIGhhc3RlIHRvIGxheSBkb3duIG9yIHRocm93IGF3YXkgd2hhdCB0aGV5IGhhZCwgYW5kIGFsbCBmZWx0IHNvIGFzaGFtZWQgdGhhdCB0aGV5IHdlbnQgb2ZmIGluIHNpbGVuY2UgYW5kIHdpdGggZG93bmNhc3QgbG9va3MuIFRoZW4gQ2F0bywgYWZ0ZXIgY2FsbGluZyB0aGUgcGVvcGxlIG9mIFV0aWNhIHRvZ2V0aGVyIGludG8gdGhlIGNpdHksIGJlZ2dlZCB0aGVtIG5vdCB0byBlbWJpdHRlciBDYWVzYXIgYWdhaW5zdCB0aGUgdGhyZWUgaHVuZHJlZCwgYnV0IHRvIHVuaXRlIHdpdGggb25lIGFub3RoZXIgaW4gc2VjdXJpbmcgc2FmZXR5IGZvciBhbGwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['65.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5leHQsIGhlIGJldG9vayBoaW1zZWxmIGFnYWluIHRvIHRoZSBzZWEgYW5kIHN1cGVyaW50ZW5kZWQgdGhlIGVtYmFyY2F0aW9uIHRoZXJlLCBlbWJyYWNpbmcgYW5kIGVzY29ydGluZyBvbiB0aGVpciB3YXkgYWxsIHRoZSBmcmllbmRzIGFuZCBhY3F1YWludGFuY2VzIHdob20gaGUgY291bGQgcGVyc3VhZGUgdG8gZ28uIEhpcyBzb24sIGhvd2V2ZXIsIGhlIGNvdWxkIG5vdCBwZXJzdWFkZSB0byB0YWtlIHNoaXAsIG5vciBkaWQgaGUgdGhpbmsgaXQgaGlzIGR1dHkgdG8gdHJ5IHRvIHR1cm4gdGhlIHlvdW5nIG1hbiBmcm9tIGhpcyBwdXJwb3NlIG9mIGNsaW5naW5nIHRvIGhpcyBmYXRoZXIuIEJ1dCB0aGVyZSB3YXMgb25lIFN0YXR5bGxpdXMsIGEgbWFuIHdobyB3YXMgeW91bmcgaW4geWVhcnMsIGJ1dCBtaW5kZWQgdG8gYmUgc3Ryb25nIGluIHB1cnBvc2UgYW5kIHRvIGltaXRhdGUgQ2F0bydzIGNhbG1uZXNzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['65.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuIENhdG8gaW5zaXN0ZWQgc2hvdWxkIHRha2Ugc2hpcDsgZm9yIGhlIHdhcyBhIG5vdG9yaW91cyBoYXRlciBvZiBDYWVzYXIuIEJ1dCB3aGVuIFN0YXR5bGxpdXMgd291bGQgbm90IGNvbnNlbnQsIENhdG8gdHVybmVkIGhpcyBleWVzIHVwb24gQXBvbGxvbmlkZXMgdGhlIFN0b2ljIGFuZCBEZW1ldHJpdXMgdGhlIFBlcmlwYXRldGljLCBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBpcyB5b3VyIHRhc2sgdG8gcmVkdWNlIHRoaXMgbWFuJ3Mgc3dvbGxlbiBwcmlkZSBhbmQgcmVzdG9yZSBoaW0gdG8gY29uZm9ybWl0eSB3aXRoIGhpcyBiZXN0IGludGVyZXN0cy48L3E+IEhlIGhpbXNlbGYsIGhvd2V2ZXIsIGNvbnRpbnVlZCB0byBhc3Npc3QgdGhlIHJlc3QgaW4gZ2V0dGluZyBvZmYsIGFuZCB0byBzdXBwbHkgdGhlIG5lZWR5IHdpdGggd2F5cyBhbmQgbWVhbnMsIGFuZCB3YXMgdGh1cyBlbmdhZ2VkIGFsbCB0aHJvdWdoIHRoZSBuaWdodCBhbmQgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgZm9sbG93aW5nIGRheS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+THVjaXVzIENhZXNhciwgYSBraW5zbWFuIG9mIHRoZSBncmVhdCBDYWVzYXIsIHdhcyBhYm91dCB0byBnbyBvbiBhbiBlbWJhc3N5IHRvIGhpbSBpbiBiZWhhbGYgb2YgdGhlIHRocmVlIGh1bmRyZWQsIGFuZCByZXF1ZXN0ZWQgQ2F0byB0byBzdWdnZXN0IHRvIGhpbSBhIGNvbnZpbmNpbmcgc3BlZWNoIHdoaWNoIGhlIG1pZ2h0IGVtcGxveSBpbiB0aGUgY2FzZTsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mb3IsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmluIHRoaW5lIG93biBiZWhhbGYgaXQgd2VyZSB3ZWxsIGZvciBtZSB0byBmYWxsIGRvd24gYXQgQ2Flc2FyJ3Mga25lZXMgYW5kIGNsYXNwIGhpcyBoYW5kcy48L3E+IEJ1dCBDYXRvIHdvdWxkIG5vdCBzdWZmZXIgaGltIHRvIGRvIHRoaXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IgaWYsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd2VyZSB3aWxsaW5nIHRvIGJlIHNhdmVkIGJ5IGdyYWNlIG9mIENhZXNhciwgSSBvdWdodCB0byBnbyB0byBoaW0gaW4gcGVyc29uIGFuZCBzZWUgaGltIGFsb25lOyBidXQgSSBhbSB1bndpbGxpbmcgdG8gYmUgdW5kZXIgb2JsaWdhdGlvbnMgdG8gdGhlIHR5cmFudCBmb3IgaGlzIGlsbGVnYWwgYWN0cy4gQW5kIGhlIGFjdHMgaWxsZWdhbGx5IGluIHNhdmluZywgYXMgaWYgdGhlaXIgbWFzdGVyLCB0aG9zZSBvdmVyIHdob20gaGUgaGFzIG5vIHJpZ2h0IGF0IGFsbCB0byBiZSB0aGUgbG9yZC4gSG93ZXZlciwgaWYgaXQgaXMgdGh5IHdpc2gsIGxldCB1cyBjb25zaWRlciBqb2ludGx5IGhvdyB0aG91IG1heWVzdCBvYnRhaW4gbWVyY3kgZm9yIHRoZSB0aHJlZSBodW5kcmVkLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoaXMgY29uZmVyZW5jZSB3aXRoIEx1Y2l1cyBvbiB0aGlzIG1hdHRlciwgaGUgcHJlc2VudGVkIGhpcyBzb24gYW5kIGhpcyBjb21wYW5pb25zIHRvIGhpbSBhcyBoZSB3YXMgZ29pbmcgYXdheTsgYW5kIGFmdGVyIGVzY29ydGluZyBoaW0gb24gaGlzIHdheSBhbmQgYmlkZGluZyBoaW0gZmFyZXdlbGwsIGhlIGNhbWUgYmFjayBob21lLCBjYWxsZWQgdG9nZXRoZXIgaGlzIHNvbiBhbmQgaGlzIGZyaWVuZHMsIGFuZCBkaXNjb3Vyc2VkIHdpdGggdGhlbSBvbiBtYW55IHN1YmplY3RzLiBJbiBwYXJ0aWN1bGFyLCBoZSBmb3JiYWRlIHRoZSB5b3VuZyBtYW4gdG8gZW5nYWdlIGluIHBvbGl0aWNhbCBtYXR0ZXJzOyBmb3IgdG8gZG8gc28gd29ydGhpbHkgb2YgYSBDYXRvIHdhcyBubyBsb25nZXIgcG9zc2libGUsIGFzIHRoaW5ncyB3ZXJlIGdvaW5nLCBhbmQgdG8gZG8gc28gb3RoZXJ3aXNlIHdvdWxkIGJlIGRpc2dyYWNlZnVsLiBBbmQgcHJlc2VudGx5LCB0b3dhcmRzIGV2ZW5pbmcsIGhlIGJldG9vayBoaW1zZWxmIHRvIHRoZSBiYXRoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['66.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+THVjaXVzIENhZXNhciwgYSBraW5zbWFuIG9mIHRoZSBncmVhdCBDYWVzYXIsIHdhcyBhYm91dCB0byBnbyBvbiBhbiBlbWJhc3N5IHRvIGhpbSBpbiBiZWhhbGYgb2YgdGhlIHRocmVlIGh1bmRyZWQsIGFuZCByZXF1ZXN0ZWQgQ2F0byB0byBzdWdnZXN0IHRvIGhpbSBhIGNvbnZpbmNpbmcgc3BlZWNoIHdoaWNoIGhlIG1pZ2h0IGVtcGxveSBpbiB0aGUgY2FzZTsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZvciw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pbiB0aGluZSBvd24gYmVoYWxmIGl0IHdlcmUgd2VsbCBmb3IgbWUgdG8gZmFsbCBkb3duIGF0IENhZXNhcidzIGtuZWVzIGFuZCBjbGFzcCBoaXMgaGFuZHMuPC9xPiBCdXQgQ2F0byB3b3VsZCBub3Qgc3VmZmVyIGhpbSB0byBkbyB0aGlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['66.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciBpZiw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHdlcmUgd2lsbGluZyB0byBiZSBzYXZlZCBieSBncmFjZSBvZiBDYWVzYXIsIEkgb3VnaHQgdG8gZ28gdG8gaGltIGluIHBlcnNvbiBhbmQgc2VlIGhpbSBhbG9uZTsgYnV0IEkgYW0gdW53aWxsaW5nIHRvIGJlIHVuZGVyIG9ibGlnYXRpb25zIHRvIHRoZSB0eXJhbnQgZm9yIGhpcyBpbGxlZ2FsIGFjdHMuIEFuZCBoZSBhY3RzIGlsbGVnYWxseSBpbiBzYXZpbmcsIGFzIGlmIHRoZWlyIG1hc3RlciwgdGhvc2Ugb3ZlciB3aG9tIGhlIGhhcyBubyByaWdodCBhdCBhbGwgdG8gYmUgdGhlIGxvcmQuIEhvd2V2ZXIsIGlmIGl0IGlzIHRoeSB3aXNoLCBsZXQgdXMgY29uc2lkZXIgam9pbnRseSBob3cgdGhvdSBtYXllc3Qgb2J0YWluIG1lcmN5IGZvciB0aGUgdGhyZWUgaHVuZHJlZC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['66.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhpcyBjb25mZXJlbmNlIHdpdGggTHVjaXVzIG9uIHRoaXMgbWF0dGVyLCBoZSBwcmVzZW50ZWQgaGlzIHNvbiBhbmQgaGlzIGNvbXBhbmlvbnMgdG8gaGltIGFzIGhlIHdhcyBnb2luZyBhd2F5OyBhbmQgYWZ0ZXIgZXNjb3J0aW5nIGhpbSBvbiBoaXMgd2F5IGFuZCBiaWRkaW5nIGhpbSBmYXJld2VsbCwgaGUgY2FtZSBiYWNrIGhvbWUsIGNhbGxlZCB0b2dldGhlciBoaXMgc29uIGFuZCBoaXMgZnJpZW5kcywgYW5kIGRpc2NvdXJzZWQgd2l0aCB0aGVtIG9uIG1hbnkgc3ViamVjdHMuIEluIHBhcnRpY3VsYXIsIGhlIGZvcmJhZGUgdGhlIHlvdW5nIG1hbiB0byBlbmdhZ2UgaW4gcG9saXRpY2FsIG1hdHRlcnM7IGZvciB0byBkbyBzbyB3b3J0aGlseSBvZiBhIENhdG8gd2FzIG5vIGxvbmdlciBwb3NzaWJsZSwgYXMgdGhpbmdzIHdlcmUgZ29pbmcsIGFuZCB0byBkbyBzbyBvdGhlcndpc2Ugd291bGQgYmUgZGlzZ3JhY2VmdWwuIEFuZCBwcmVzZW50bHksIHRvd2FyZHMgZXZlbmluZywgaGUgYmV0b29rIGhpbXNlbGYgdG8gdGhlIGJhdGguCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSBoZSB3YXMgYmF0aGluZyBoZSBiZXRob3VnaHQgaGltc2VsZiBvZiBTdGF0eWxsaXVzLCBhbmQgY2FsbGVkIG91dCBpbiBsb3VkIHRvbmVzLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXBvbGxvbmlkZXMsIGRpZHN0IHRob3Ugc2VuZCBvZmYgU3RhdHlsbGl1cz8gQW5kIGRpZHN0IHRob3UgYnJpbmcgaGltIGRvd24gZnJvbSB0aGF0IGxvZnR5IHB1cnBvc2Ugb2YgaGlzPyBBbmQgaGFzIHRoZSBtYW4gc2V0IHNhaWwgd2l0aG91dCBldmVuIGJpZGRpbmcgbWUgZ29vZC1ieWU/PC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Qnkgbm8gbWVhbnMsPC9xPiBzYWlkIEFwb2xsb25pZGVzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YWx0aG91Z2ggd2UgcmVhc29uZWQgbXVjaCB3aXRoIGhpbTsgYnV0IGhlIGlzIGxvZnR5IGFuZCB1bmJlbmRpbmcsIGFuZCBzYXlzIGhlIHdpbGwgcmVtYWluIGFuZCBkbyB3aGF0ZXZlciB0aG91IGRvZXN0LjwvcT4gQXQgdGhpcywgd2UgYXJlIHRvbGQsIENhdG8gc21pbGVkLCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZWxsLCB3ZSBzaGFsbCBzZWUgYWJvdXQgdGhhdCBwcmVzZW50bHkuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['66.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSBoZSB3YXMgYmF0aGluZyBoZSBiZXRob3VnaHQgaGltc2VsZiBvZiBTdGF0eWxsaXVzLCBhbmQgY2FsbGVkIG91dCBpbiBsb3VkIHRvbmVzLCBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BcG9sbG9uaWRlcywgZGlkc3QgdGhvdSBzZW5kIG9mZiBTdGF0eWxsaXVzPyBBbmQgZGlkc3QgdGhvdSBicmluZyBoaW0gZG93biBmcm9tIHRoYXQgbG9mdHkgcHVycG9zZSBvZiBoaXM/IEFuZCBoYXMgdGhlIG1hbiBzZXQgc2FpbCB3aXRob3V0IGV2ZW4gYmlkZGluZyBtZSBnb29kLWJ5ZT88L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ5IG5vIG1lYW5zLDwvcT4gc2FpZCBBcG9sbG9uaWRlcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YWx0aG91Z2ggd2UgcmVhc29uZWQgbXVjaCB3aXRoIGhpbTsgYnV0IGhlIGlzIGxvZnR5IGFuZCB1bmJlbmRpbmcsIGFuZCBzYXlzIGhlIHdpbGwgcmVtYWluIGFuZCBkbyB3aGF0ZXZlciB0aG91IGRvZXN0LjwvcT4gQXQgdGhpcywgd2UgYXJlIHRvbGQsIENhdG8gc21pbGVkLCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwsIHdlIHNoYWxsIHNlZSBhYm91dCB0aGF0IHByZXNlbnRseS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhpcyBiYXRoLCBoZSB0b29rIHN1cHBlciB3aXRoIGEgbGFyZ2UgY29tcGFueSwgc2l0dGluZyBhdCB0YWJsZSwgYXMgd2FzIGhpcyB3b250IGFmdGVyIFBoYXJzYWx1czsgaW5kZWVkLCBoZSBsYXkgZG93biBvbmx5IHdoZW4gaGUgc2xlcHQ7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiA1Ni40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIGx2aS4gNDwvYmlibD4uPC9ub3RlPiBhbmQgdGhlcmUgd2VyZSBhdCBzdXBwZXIgd2l0aCBoaW0gYWxsIGhpcyBjb21wYW5pb25zLCBhbmQgdGhlIG1hZ2lzdHJhdGVzIG9mIFV0aWNhLiBBZnRlciBzdXBwZXIsIHRoZXJlIHdhcyBtdWNoIGxpdGVyYXJ5IGFuZCBnZW5pYWwgZGlzY291cnNlIG92ZXIgdGhlIHdpbmUsIGFuZCBvbmUgcGhpbG9zb3BoaWNhbCB0ZW5ldCBhZnRlciBhbm90aGVyIG1hZGUgdGhlIHJvdW5kcywgdW50aWwgdGhlcmUgY2FtZSB1cCB0aGUgZW5xdWlyeSBpbnRvIHdoYXQgd2VyZSBjYWxsZWQgdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGFyYWRveGVzPC9xPiBvZiB0aGUgU3RvaWNzLCBuYW1lbHksIHRoYXQgdGhlIGdvb2QgbWFuIGFsb25lIGlzIGZyZWUsIGFuZCB0aGF0IHRoZSBiYWQgYXJlIGFsbCBzbGF2ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIGFzIHdhcyB0byBiZSBleHBlY3RlZCwgdGhlIFBlcmlwYXRldGljIG1hZGUgb2JqZWN0aW9ucywgd2hlcmV1cG9uIENhdG8gYnJva2UgaW4gd2l0aCB2ZWhlbWVuY2UsIGFuZCBpbiBsb3VkIGFuZCBoYXJzaCB0b25lcyBtYWludGFpbmVkIGhpcyBhcmd1bWVudCBhdCBncmVhdGVzdCBsZW5ndGggYW5kIHdpdGggYXN0b25pc2hpbmcgZWFybmVzdG5lc3MsIHNvIHRoYXQgZXZlcnlvbmUgcGVyY2VpdmVkIHRoYXQgaGUgaGFkIG1hZGUgdXAgaGlzIG1pbmQgdG8gcHV0IGFuIGVuZCB0byBoaXMgbGlmZSBhbmQgZnJlZSBoaW1zZWxmIGZyb20gaGlzIHByZXNlbnQgdHJvdWJsZXMuIFRoZXJlZm9yZSwgYXMgYWxsIHdlcmUgZGVqZWN0ZWQgYW5kIHNpbGVudCBhZnRlciBoaXMgZGlzY291cnNlLCBDYXRvIHRyaWVkIHRvIHJldml2ZSB0aGVpciBzcGlyaXRzIGFuZCByZW1vdmUgdGhlaXIgc3VzcGljaW9ucyBieSBvbmNlIG1vcmUgcHV0dGluZyBxdWVzdGlvbnMgYW5kIGV4cHJlc3NpbmcgYW54aWV0eSBhYm91dCB3aGF0IHdhcyBnb2luZyBvbiwgaW1wbHlpbmcgdGhhdCBoZSBmZWFyZWQgZm9yIHRob3NlIHdobyB3ZXJlIGdvaW5nIGF3YXkgYnkgc2VhLCBhbmQgZmVhcmVkLCB0b28sIGZvciB0aG9zZSB3aG9zZSBwYXRoIGxheSB0aHJvdWdoIGEgYmFyYmFyb3VzIGFuZCB3YXRlcmxlc3MgZGVzZXJ0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['67.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGlzIGJhdGgsIGhlIHRvb2sgc3VwcGVyIHdpdGggYSBsYXJnZSBjb21wYW55LCBzaXR0aW5nIGF0IHRhYmxlLCBhcyB3YXMgaGlzIHdvbnQgYWZ0ZXIgUGhhcnNhbHVzOyBpbmRlZWQsIGhlIGxheSBkb3duIG9ubHkgd2hlbiBoZSBzbGVwdDs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiA1Ni40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIGx2aS4gNDwvYmlibD4uPC9ub3RlPiBhbmQgdGhlcmUgd2VyZSBhdCBzdXBwZXIgd2l0aCBoaW0gYWxsIGhpcyBjb21wYW5pb25zLCBhbmQgdGhlIG1hZ2lzdHJhdGVzIG9mIFV0aWNhLiBBZnRlciBzdXBwZXIsIHRoZXJlIHdhcyBtdWNoIGxpdGVyYXJ5IGFuZCBnZW5pYWwgZGlzY291cnNlIG92ZXIgdGhlIHdpbmUsIGFuZCBvbmUgcGhpbG9zb3BoaWNhbCB0ZW5ldCBhZnRlciBhbm90aGVyIG1hZGUgdGhlIHJvdW5kcywgdW50aWwgdGhlcmUgY2FtZSB1cCB0aGUgZW5xdWlyeSBpbnRvIHdoYXQgd2VyZSBjYWxsZWQgdGhlIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNTYuNCIgdmFsaWQ9InllcyI+Y2hhcHRlciBsdmkuIDQ8L2JpYmw+LjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGFyYWRveGVzPC9xPiBvZiB0aGUgU3RvaWNzLCBuYW1lbHksIHRoYXQgdGhlIGdvb2QgbWFuIGFsb25lIGlzIGZyZWUsIGFuZCB0aGF0IHRoZSBiYWQgYXJlIGFsbCBzbGF2ZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['67.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIGFzIHdhcyB0byBiZSBleHBlY3RlZCwgdGhlIFBlcmlwYXRldGljIG1hZGUgb2JqZWN0aW9ucywgd2hlcmV1cG9uIENhdG8gYnJva2UgaW4gd2l0aCB2ZWhlbWVuY2UsIGFuZCBpbiBsb3VkIGFuZCBoYXJzaCB0b25lcyBtYWludGFpbmVkIGhpcyBhcmd1bWVudCBhdCBncmVhdGVzdCBsZW5ndGggYW5kIHdpdGggYXN0b25pc2hpbmcgZWFybmVzdG5lc3MsIHNvIHRoYXQgZXZlcnlvbmUgcGVyY2VpdmVkIHRoYXQgaGUgaGFkIG1hZGUgdXAgaGlzIG1pbmQgdG8gcHV0IGFuIGVuZCB0byBoaXMgbGlmZSBhbmQgZnJlZSBoaW1zZWxmIGZyb20gaGlzIHByZXNlbnQgdHJvdWJsZXMuIFRoZXJlZm9yZSwgYXMgYWxsIHdlcmUgZGVqZWN0ZWQgYW5kIHNpbGVudCBhZnRlciBoaXMgZGlzY291cnNlLCBDYXRvIHRyaWVkIHRvIHJldml2ZSB0aGVpciBzcGlyaXRzIGFuZCByZW1vdmUgdGhlaXIgc3VzcGljaW9ucyBieSBvbmNlIG1vcmUgcHV0dGluZyBxdWVzdGlvbnMgYW5kIGV4cHJlc3NpbmcgYW54aWV0eSBhYm91dCB3aGF0IHdhcyBnb2luZyBvbiwgaW1wbHlpbmcgdGhhdCBoZSBmZWFyZWQgZm9yIHRob3NlIHdobyB3ZXJlIGdvaW5nIGF3YXkgYnkgc2VhLCBhbmQgZmVhcmVkLCB0b28sIGZvciB0aG9zZSB3aG9zZSBwYXRoIGxheSB0aHJvdWdoIGEgYmFyYmFyb3VzIGFuZCB3YXRlcmxlc3MgZGVzZXJ0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIHRoZSBzdXBwZXIgY2FtZSB0byBhbiBlbmQsIGFuZCBhZnRlciB3YWxraW5nIGFib3V0IHdpdGggaGlzIGZyaWVuZHMgYXMgaGUgdXN1YWxseSBkaWQgYWZ0ZXIgc3VwcGVyLCBoZSBnYXZlIHRoZSBvZmZpY2VycyBvZiB0aGUgd2F0Y2ggdGhlIHByb3BlciBvcmRlcnMsIGFuZCB0aGVuIHJldGlyZWQgdG8gaGlzIGNoYW1iZXIsIGJ1dCBub3QgdW50aWwgaGUgaGFkIGVtYnJhY2VkIGhpcyBzb24gYW5kIGVhY2ggb2YgaGlzIGZyaWVuZHMgd2l0aCBtb3JlIHRoYW4gaGlzIHdvbnRlZCBraW5kbmVzcywgYW5kIHRodXMgYXdha2VuZWQgYW5ldyB0aGVpciBzdXNwaWNpb25zIG9mIHdoYXQgd2FzIHRvIGNvbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGVudGVyaW5nIGhpcyBjaGFtYmVyIGFuZCBseWluZyBkb3duLCBoZSB0b29rIHVwIFBsYXRvJ3MgZGlhbG9ndWUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PbiB0aGUgU291bCw8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSA8dGl0bGU+UGhhZWRvPC90aXRsZT4uPC9ub3RlPiBhbmQgd2hlbiBoZSBoYWQgZ29uZSB0aHJvdWdoIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIHRyZWF0aXNlLCBoZSBsb29rZWQgdXAgYWJvdmUgaGlzIGhlYWQsIGFuZCBub3Qgc2VlaW5nIGhpcyBzd29yZCBoYW5naW5nIHRoZXJlIChmb3IgaGlzIHNvbiBoYWQgdGFrZW4gaXQgYXdheSB3aGlsZSBDYXRvIHdhcyBzdGlsbCBhdCBzdXBwZXIpLCBjYWxsZWQgYSBzZXJ2YW50IGFuZCBhc2tlZCBoaW0gd2hvIGhhZCB0YWtlbiB0aGUgd2VhcG9uLiBUaGUgc2VydmFudCBtYWRlIG5vIGFuc3dlciwgYW5kIENhdG8gcmV0dXJuZWQgdG8gaGlzIGJvb2s7IGFuZCBhIGxpdHRsZSB3aGlsZSBhZnRlciwgYXMgaWYgaW4gbm8gaGFzdGUgb3IgaHVycnksIGJ1dCBtZXJlbHkgbG9va2luZyBmb3IgaGlzIHN3b3JkLCBoZSBiYWRlIHRoZSBzZXJ2YW50IGZldGNoIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXMgdGhlcmUgd2FzIHNvbWUgZGVsYXksIGFuZCBubyBvbmUgYnJvdWdodCB0aGUgd2VhcG9uLCBoZSBmaW5pc2hlZCByZWFkaW5nIGhpcyBib29rLCBhbmQgdGhpcyB0aW1lIGNhbGxlZCBoaXMgc2VydmFudHMgb25lIGJ5IG9uZSBhbmQgaW4gbG91ZGVyIHRvbmVzIGRlbWFuZGVkIGhpcyBzd29yZC4gT25lIG9mIHRoZW0gaGUgc21vdGUgb24gdGhlIG1vdXRoIHdpdGggaGlzIGZpc3QsIGFuZCBicnVpc2VkIGhpcyBvd24gaGFuZCwgYW5ncmlseSBjcnlpbmcgbm93IGluIGxvdWQgdG9uZXMgdGhhdCBoaXMgc29uIGFuZCBoaXMgc2VydmFudHMgd2VyZSBiZXRyYXlpbmcgaGltIGludG8gdGhlIGhhbmRzIG9mIHRoZSBlbmVteSB3aXRob3V0IGFybXMuIEF0IGxhc3QgaGlzIHNvbiByYW4gaW4gd2VlcGluZywgdG9nZXRoZXIgd2l0aCBoaXMgZnJpZW5kcywgYW5kIGFmdGVyIGVtYnJhY2luZyBoaW0sIGJldG9vayBoaW1zZWxmIHRvIGxhbWVudGF0aW9ucyBhbmQgZW50cmVhdGllcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhdG8sIHJpc2luZyB0byBoaXMgZmVldCwgdG9vayBvbiBhIHNvbGVtbiBsb29rLCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVuIGFuZCB3aGVyZSwgd2l0aG91dCBteSBrbm93bGVkZ2UsIGhhdmUgSSBiZWVuIGFkanVkZ2VkIGEgbWFkbWFuLCB0aGF0IG5vIG9uZSBpbnN0cnVjdHMgb3IgdHJpZXMgdG8gY29udmVydCBtZSBpbiBtYXR0ZXJzIHdoZXJlaW4gSSBhbSB0aG91Z2h0IHRvIGhhdmUgbWFkZSBiYWQgZGVjaXNpb25zLCBidXQgSSBhbSBwcmV2ZW50ZWQgZnJvbSB1c2luZyBteSBvd24ganVkZ2VtZW50LCBhbmQgaGF2ZSBteSBhcm1zIHRha2VuIGZyb20gbWU/IFdoeSwgZ2VuZXJvdXMgYm95LCBkb3N0IHRob3Ugbm90IGFsc28gdGllIHRoeSBmYXRoZXIncyBoYW5kcyBiZWhpbmQgaGlzIGJhY2ssIHRoYXQgQ2Flc2FyIG1heSBmaW5kIG1lIHVuYWJsZSB0byBkZWZlbmQgbXlzZWxmIHdoZW4gaGUgY29tZXM/IAoJCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5TdXJlbHksIHRvIGtpbGwgbXlzZWxmIEkgaGF2ZSBubyBuZWVkIG9mIGEgc3dvcmQsIHdoZW4gSSBoYXZlIG9ubHkgdG8gaG9sZCBteSBicmVhdGggYSBsaXR0bGUgd2hpbGUsIG9yIGRhc2ggbXkgaGVhZCBhZ2FpbnN0IHRoZSB3YWxsLCBhbmQgZGVhdGggd2lsbCBjb21lLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['68.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyB0aGUgc3VwcGVyIGNhbWUgdG8gYW4gZW5kLCBhbmQgYWZ0ZXIgd2Fsa2luZyBhYm91dCB3aXRoIGhpcyBmcmllbmRzIGFzIGhlIHVzdWFsbHkgZGlkIGFmdGVyIHN1cHBlciwgaGUgZ2F2ZSB0aGUgb2ZmaWNlcnMgb2YgdGhlIHdhdGNoIHRoZSBwcm9wZXIgb3JkZXJzLCBhbmQgdGhlbiByZXRpcmVkIHRvIGhpcyBjaGFtYmVyLCBidXQgbm90IHVudGlsIGhlIGhhZCBlbWJyYWNlZCBoaXMgc29uIGFuZCBlYWNoIG9mIGhpcyBmcmllbmRzIHdpdGggbW9yZSB0aGFuIGhpcyB3b250ZWQga2luZG5lc3MsIGFuZCB0aHVzIGF3YWtlbmVkIGFuZXcgdGhlaXIgc3VzcGljaW9ucyBvZiB3aGF0IHdhcyB0byBjb21lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['68.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGVudGVyaW5nIGhpcyBjaGFtYmVyIGFuZCBseWluZyBkb3duLCBoZSB0b29rIHVwIFBsYXRvJ3MgZGlhbG9ndWUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9uIHRoZSBTb3VsLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhhZWRvPC90aXRsZT4uPC9ub3RlPiBhbmQgd2hlbiBoZSBoYWQgZ29uZSB0aHJvdWdoIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIHRyZWF0aXNlLCBoZSBsb29rZWQgdXAgYWJvdmUgaGlzIGhlYWQsIGFuZCBub3Qgc2VlaW5nIGhpcyBzd29yZCBoYW5naW5nIHRoZXJlIChmb3IgaGlzIHNvbiBoYWQgdGFrZW4gaXQgYXdheSB3aGlsZSBDYXRvIHdhcyBzdGlsbCBhdCBzdXBwZXIpLCBjYWxsZWQgYSBzZXJ2YW50IGFuZCBhc2tlZCBoaW0gd2hvIGhhZCB0YWtlbiB0aGUgd2VhcG9uLiBUaGUgc2VydmFudCBtYWRlIG5vIGFuc3dlciwgYW5kIENhdG8gcmV0dXJuZWQgdG8gaGlzIGJvb2s7IGFuZCBhIGxpdHRsZSB3aGlsZSBhZnRlciwgYXMgaWYgaW4gbm8gaGFzdGUgb3IgaHVycnksIGJ1dCBtZXJlbHkgbG9va2luZyBmb3IgaGlzIHN3b3JkLCBoZSBiYWRlIHRoZSBzZXJ2YW50IGZldGNoIGl0LiAKCQkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBoYWVkbzwvdGl0bGU+LjwvdHJhbnNsYXRpb24+"
translation['68.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyB0aGVyZSB3YXMgc29tZSBkZWxheSwgYW5kIG5vIG9uZSBicm91Z2h0IHRoZSB3ZWFwb24sIGhlIGZpbmlzaGVkIHJlYWRpbmcgaGlzIGJvb2ssIGFuZCB0aGlzIHRpbWUgY2FsbGVkIGhpcyBzZXJ2YW50cyBvbmUgYnkgb25lIGFuZCBpbiBsb3VkZXIgdG9uZXMgZGVtYW5kZWQgaGlzIHN3b3JkLiBPbmUgb2YgdGhlbSBoZSBzbW90ZSBvbiB0aGUgbW91dGggd2l0aCBoaXMgZmlzdCwgYW5kIGJydWlzZWQgaGlzIG93biBoYW5kLCBhbmdyaWx5IGNyeWluZyBub3cgaW4gbG91ZCB0b25lcyB0aGF0IGhpcyBzb24gYW5kIGhpcyBzZXJ2YW50cyB3ZXJlIGJldHJheWluZyBoaW0gaW50byB0aGUgaGFuZHMgb2YgdGhlIGVuZW15IHdpdGhvdXQgYXJtcy4gQXQgbGFzdCBoaXMgc29uIHJhbiBpbiB3ZWVwaW5nLCB0b2dldGhlciB3aXRoIGhpcyBmcmllbmRzLCBhbmQgYWZ0ZXIgZW1icmFjaW5nIGhpbSwgYmV0b29rIGhpbXNlbGYgdG8gbGFtZW50YXRpb25zIGFuZCBlbnRyZWF0aWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['68.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvLCByaXNpbmcgdG8gaGlzIGZlZXQsIHRvb2sgb24gYSBzb2xlbW4gbG9vaywgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVuIGFuZCB3aGVyZSwgd2l0aG91dCBteSBrbm93bGVkZ2UsIGhhdmUgSSBiZWVuIGFkanVkZ2VkIGEgbWFkbWFuLCB0aGF0IG5vIG9uZSBpbnN0cnVjdHMgb3IgdHJpZXMgdG8gY29udmVydCBtZSBpbiBtYXR0ZXJzIHdoZXJlaW4gSSBhbSB0aG91Z2h0IHRvIGhhdmUgbWFkZSBiYWQgZGVjaXNpb25zLCBidXQgSSBhbSBwcmV2ZW50ZWQgZnJvbSB1c2luZyBteSBvd24ganVkZ2VtZW50LCBhbmQgaGF2ZSBteSBhcm1zIHRha2VuIGZyb20gbWU/IFdoeSwgZ2VuZXJvdXMgYm95LCBkb3N0IHRob3Ugbm90IGFsc28gdGllIHRoeSBmYXRoZXIncyBoYW5kcyBiZWhpbmQgaGlzIGJhY2ssIHRoYXQgQ2Flc2FyIG1heSBmaW5kIG1lIHVuYWJsZSB0byBkZWZlbmQgbXlzZWxmIHdoZW4gaGUgY29tZXM/IAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlN1cmVseSwgdG8ga2lsbCBteXNlbGYgSSBoYXZlIG5vIG5lZWQgb2YgYSBzd29yZCwgd2hlbiBJIGhhdmUgb25seSB0byBob2xkIG15IGJyZWF0aCBhIGxpdHRsZSB3aGlsZSwgb3IgZGFzaCBteSBoZWFkIGFnYWluc3QgdGhlIHdhbGwsIGFuZCBkZWF0aCB3aWxsIGNvbWUuPC9xPgoJCQkgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['68.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlN1cmVseSwgdG8ga2lsbCBteXNlbGYgSSBoYXZlIG5vIG5lZWQgb2YgYSBzd29yZCwgd2hlbiBJIGhhdmUgb25seSB0byBob2xkIG15IGJyZWF0aCBhIGxpdHRsZSB3aGlsZSwgb3IgZGFzaCBteSBoZWFkIGFnYWluc3QgdGhlIHdhbGwsIGFuZCBkZWF0aCB3aWxsIGNvbWUuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgQ2F0byBzYWlkIHRoZXNlIHdvcmRzIHRoZSB5b3VuZyBtYW4gd2VudCBvdXQgc29iYmluZywgYW5kIGFsbCB0aGUgcmVzdCBhbHNvLCBleGNlcHQgRGVtZXRyaXVzIGFuZCBBcG9sbG9uaWRlcy4gVGhlc2UgYWxvbmUgcmVtYWluZWQsIGFuZCB3aXRoIHRoZXNlIENhdG8gYmVnYW4gdG8gdGFsaywgbm93IGluIGdlbnRsZXIgdG9uZXMuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBzdXBwb3NlLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGF0IHllIGFsc28gaGF2ZSBkZWNpZGVkIHRvIGRldGFpbiBpbiBsaWZlIGJ5IGZvcmNlIGEgbWFuIGFzIG9sZCBhcyBJIGFtLCBhbmQgdG8gc2l0IGJ5IGhpbSBpbiBzaWxlbmNlIGFuZCBrZWVwIHdhdGNoIG9mIGhpbTogb3IgYXJlIHllIGNvbWUgd2l0aCB0aGUgcGxlYSB0aGF0IGl0IGlzIG5laXRoZXIgc2hhbWVmdWwgbm9yIGRyZWFkZnVsIGZvciBDYXRvLCB3aGVuIGhlIGhhcyBubyBvdGhlciB3YXkgb2Ygc2FsdmF0aW9uLCB0byBhd2FpdCBzYWx2YXRpb24gYXQgdGhlIGhhbmRzIG9mIGhpcyBlbmVteT8gCgkJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoeSwgdGhlbiwgZG8geWUgbm90IHNwZWFrIHBlcnN1YXNpdmVseSBhbmQgY29udmVydCBtZSB0byB0aGlzIGRvY3RyaW5lLCB0aGF0IHdlIG1heSBjYXN0IGF3YXkgdGhvc2UgZ29vZCBvbGQgb3BpbmlvbnMgYW5kIGFyZ3VtZW50cyB3aGljaCBoYXZlIGJlZW4gcGFydCBvZiBvdXIgdmVyeSBsaXZlcywgYmUgbWFkZSB3aXNlciB0aHJvdWdoIENhZXNhcidzIGVmZm9ydHMsIGFuZCB0aGVyZWZvcmUgYmUgbW9yZSBncmF0ZWZ1bCB0byBoaW0/IEFuZCB5ZXQgSSwgY2VydGFpbmx5LCBoYXZlIGNvbWUgdG8gbm8gcmVzb2x2ZSBhYm91dCBteXNlbGY7IGJ1dCB3aGVuIEkgaGF2ZSBjb21lIHRvIGEgcmVzb2x2ZSwgSSBtdXN0IGJlIG1hc3RlciBvZiB0aGUgY291cnNlIHdoaWNoIEkgZGVjaWRlIHRvIHRha2UuIAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgSSBzaGFsbCBjb21lIHRvIGEgcmVzb2x2ZSB3aXRoIHlvdXIgYWlkLCBhcyBJIG1pZ2h0IHNheSwgc2luY2UgSSBzaGFsbCByZWFjaCBpdCB3aXRoIHRoZSBhaWQgb2YgdGhvc2UgZG9jdHJpbmVzIHdoaWNoIHllIGFsc28gYWRvcHQgYXMgcGhpbG9zb3BoZXJzLiBTbyBnbyBhd2F5IHdpdGggYSBnb29kIGNvdXJhZ2UsIGFuZCBiaWQgbXkgc29uIG5vdCB0byB0cnkgZm9yY2Ugd2l0aCBoaXMgZmF0aGVyIHdoZW4gaGUgY2Fubm90IHBlcnN1YWRlIGhpbS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['69.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgQ2F0byBzYWlkIHRoZXNlIHdvcmRzIHRoZSB5b3VuZyBtYW4gd2VudCBvdXQgc29iYmluZywgYW5kIGFsbCB0aGUgcmVzdCBhbHNvLCBleGNlcHQgRGVtZXRyaXVzIGFuZCBBcG9sbG9uaWRlcy4gVGhlc2UgYWxvbmUgcmVtYWluZWQsIGFuZCB3aXRoIHRoZXNlIENhdG8gYmVnYW4gdG8gdGFsaywgbm93IGluIGdlbnRsZXIgdG9uZXMuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHN1cHBvc2UsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCB5ZSBhbHNvIGhhdmUgZGVjaWRlZCB0byBkZXRhaW4gaW4gbGlmZSBieSBmb3JjZSBhIG1hbiBhcyBvbGQgYXMgSSBhbSwgYW5kIHRvIHNpdCBieSBoaW0gaW4gc2lsZW5jZSBhbmQga2VlcCB3YXRjaCBvZiBoaW06IG9yIGFyZSB5ZSBjb21lIHdpdGggdGhlIHBsZWEgdGhhdCBpdCBpcyBuZWl0aGVyIHNoYW1lZnVsIG5vciBkcmVhZGZ1bCBmb3IgQ2F0bywgd2hlbiBoZSBoYXMgbm8gb3RoZXIgd2F5IG9mIHNhbHZhdGlvbiwgdG8gYXdhaXQgc2FsdmF0aW9uIGF0IHRoZSBoYW5kcyBvZiBoaXMgZW5lbXk/IAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoeSwgdGhlbiwgZG8geWUgbm90IHNwZWFrIHBlcnN1YXNpdmVseSBhbmQgY29udmVydCBtZSB0byB0aGlzIGRvY3RyaW5lLCB0aGF0IHdlIG1heSBjYXN0IGF3YXkgdGhvc2UgZ29vZCBvbGQgb3BpbmlvbnMgYW5kIGFyZ3VtZW50cyB3aGljaCBoYXZlIGJlZW4gcGFydCBvZiBvdXIgdmVyeSBsaXZlcywgYmUgbWFkZSB3aXNlciB0aHJvdWdoIENhZXNhcidzIGVmZm9ydHMsIGFuZCB0aGVyZWZvcmUgYmUgbW9yZSBncmF0ZWZ1bCB0byBoaW0/IEFuZCB5ZXQgSSwgY2VydGFpbmx5LCBoYXZlIGNvbWUgdG8gbm8gcmVzb2x2ZSBhYm91dCBteXNlbGY7IGJ1dCB3aGVuIEkgaGF2ZSBjb21lIHRvIGEgcmVzb2x2ZSwgSSBtdXN0IGJlIG1hc3RlciBvZiB0aGUgY291cnNlIHdoaWNoIEkgZGVjaWRlIHRvIHRha2UuIAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgSSBzaGFsbCBjb21lIHRvIGEgcmVzb2x2ZSB3aXRoIHlvdXIgYWlkLCBhcyBJIG1pZ2h0IHNheSwgc2luY2UgSSBzaGFsbCByZWFjaCBpdCB3aXRoIHRoZSBhaWQgb2YgdGhvc2UgZG9jdHJpbmVzIHdoaWNoIHllIGFsc28gYWRvcHQgYXMgcGhpbG9zb3BoZXJzLiBTbyBnbyBhd2F5IHdpdGggYSBnb29kIGNvdXJhZ2UsIGFuZCBiaWQgbXkgc29uIG5vdCB0byB0cnkgZm9yY2Ugd2l0aCBoaXMgZmF0aGVyIHdoZW4gaGUgY2Fubm90IHBlcnN1YWRlIGhpbS48L3E+CgkJCSAgICAgIDwvdHJhbnNsYXRpb24+"
translation['69.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoeSwgdGhlbiwgZG8geWUgbm90IHNwZWFrIHBlcnN1YXNpdmVseSBhbmQgY29udmVydCBtZSB0byB0aGlzIGRvY3RyaW5lLCB0aGF0IHdlIG1heSBjYXN0IGF3YXkgdGhvc2UgZ29vZCBvbGQgb3BpbmlvbnMgYW5kIGFyZ3VtZW50cyB3aGljaCBoYXZlIGJlZW4gcGFydCBvZiBvdXIgdmVyeSBsaXZlcywgYmUgbWFkZSB3aXNlciB0aHJvdWdoIENhZXNhcidzIGVmZm9ydHMsIGFuZCB0aGVyZWZvcmUgYmUgbW9yZSBncmF0ZWZ1bCB0byBoaW0/IEFuZCB5ZXQgSSwgY2VydGFpbmx5LCBoYXZlIGNvbWUgdG8gbm8gcmVzb2x2ZSBhYm91dCBteXNlbGY7IGJ1dCB3aGVuIEkgaGF2ZSBjb21lIHRvIGEgcmVzb2x2ZSwgSSBtdXN0IGJlIG1hc3RlciBvZiB0aGUgY291cnNlIHdoaWNoIEkgZGVjaWRlIHRvIHRha2UuIAoJCQkJCTwvdHJhbnNsYXRpb24+"
translation['69.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBJIHNoYWxsIGNvbWUgdG8gYSByZXNvbHZlIHdpdGggeW91ciBhaWQsIGFzIEkgbWlnaHQgc2F5LCBzaW5jZSBJIHNoYWxsIHJlYWNoIGl0IHdpdGggdGhlIGFpZCBvZiB0aG9zZSBkb2N0cmluZXMgd2hpY2ggeWUgYWxzbyBhZG9wdCBhcyBwaGlsb3NvcGhlcnMuIFNvIGdvIGF3YXkgd2l0aCBhIGdvb2QgY291cmFnZSwgYW5kIGJpZCBteSBzb24gbm90IHRvIHRyeSBmb3JjZSB3aXRoIGhpcyBmYXRoZXIgd2hlbiBoZSBjYW5ub3QgcGVyc3VhZGUgaGltLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldpdGhvdXQgbWFraW5nIGFueSByZXBseSB0byB0aGlzLCBidXQgYnVyc3RpbmcgaW50byB0ZWFycywgRGVtZXRyaXVzIGFuZCBBcG9sbG9uaWRlcyBzbG93bHkgd2l0aGRyZXcuIFRoZW4gdGhlIHN3b3JkIHdhcyBzZW50IGluLCBjYXJyaWVkIGJ5IGEgbGl0dGxlIGNoaWxkLCBhbmQgQ2F0byB0b29rIGl0LCBkcmV3IGl0IGZyb20gaXRzIHNoZWF0aCwgYW5kIGV4YW1pbmVkIGl0LiBBbmQgd2hlbiBoZSBzYXcgdGhhdCBpdHMgcG9pbnQgd2FzIGtlZW4gYW5kIGl0cyBlZGdlIHN0aWxsIHNoYXJwLCBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5vdyBJIGFtIG15IG93biBtYXN0ZXIuPC9xPiBUaGVuIGhlIGxhaWQgZG93biB0aGUgc3dvcmQgYW5kIHJlc3VtZWQgaGlzIGJvb2ssIGFuZCBoZSBpcyBzYWlkIHRvIGhhdmUgcmVhZCBpdCB0aHJvdWdoIHR3aWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlcndhcmRzIGhlIGZlbGwgaW50byBzbyBkZWVwIGEgc2xlZXAgdGhhdCB0aG9zZSBvdXRzaWRlIHRoZSBjaGFtYmVyIGhlYXJkIGhpbS4gQnV0IGFib3V0IG1pZG5pZ2h0IGhlIGNhbGxlZCB0d28gb2YgaGlzIGZyZWVkbWVuLCBDbGVhbnRoZXMgdGhlIHBoeXNpY2lhbiwgYW5kIEJ1dGFzLCB3aG8gd2FzIGhpcyBjaGllZiBhZ2VudCBpbiBwdWJsaWMgbWF0dGVycy4gQnV0YXMgaGUgc2VudCBkb3duIHRvIHRoZSBzZWEsIHRvIGZpbmQgb3V0IHdoZXRoZXIgYWxsIGhhZCBzZXQgc2FpbCBzdWNjZXNzZnVsbHksIGFuZCBicmluZyBoaW0gd29yZDsgd2hpbGUgdG8gdGhlIHBoeXNpY2lhbiBoZSBnYXZlIGhpcyBoYW5kIHRvIGJhbmRhZ2UsIHNpbmNlIGl0IHdhcyBpbmZsYW1lZCBieSB0aGUgYmxvdyB0aGF0IGhlIGhhZCBnaXZlbiB0aGUgc2xhdmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFkZSBldmVyeWJvZHkgbW9yZSBjaGVlcmZ1bCwgc2luY2UgdGhleSB0aG91Z2h0IGhlIGhhZCBhIG1pbmQgdG8gbGl2ZS4gSW4gYSBsaXR0bGUgd2hpbGUgQnV0YXMgY2FtZSB3aXRoIHRpZGluZ3MgdGhhdCBhbGwgaGFkIHNldCBzYWlsIGV4Y2VwdCBDcmFzc3VzLCB3aG8gd2FzIGRldGFpbmVkIGJ5IHNvbWUgYnVzaW5lc3Mgb3Igb3RoZXIsIGFuZCBoZSB0b28gd2FzIG9uIHRoZSBwb2ludCBvZiBlbWJhcmtpbmc7IEJ1dGFzIHJlcG9ydGVkIGFsc28gdGhhdCBhIGhlYXZ5IHN0b3JtIGFuZCBhIGhpZ2ggd2luZCBwcmV2YWlsZWQgYXQgc2VhLiBPbiBoZWFyaW5nIHRoaXMsIENhdG8gZ3JvYW5lZCB3aXRoIHBpdHkgZm9yIHRob3NlIGluIHBlcmlsIG9uIHRoZSBzZWEsIGFuZCBzZW50IEJ1dGFzIGRvd24gYWdhaW4sIHRvIGZpbmQgb3V0IHdoZXRoZXIgYW55b25lIGhhZCBiZWVuIGRyaXZlbiBiYWNrIGJ5IHRoZSBzdG9ybSBhbmQgd2FudGVkIGFueSBuZWNlc3NhcmllcywgYW5kIHRvIHJlcG9ydCB0byBoaW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['70.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aG91dCBtYWtpbmcgYW55IHJlcGx5IHRvIHRoaXMsIGJ1dCBidXJzdGluZyBpbnRvIHRlYXJzLCBEZW1ldHJpdXMgYW5kIEFwb2xsb25pZGVzIHNsb3dseSB3aXRoZHJldy4gVGhlbiB0aGUgc3dvcmQgd2FzIHNlbnQgaW4sIGNhcnJpZWQgYnkgYSBsaXR0bGUgY2hpbGQsIGFuZCBDYXRvIHRvb2sgaXQsIGRyZXcgaXQgZnJvbSBpdHMgc2hlYXRoLCBhbmQgZXhhbWluZWQgaXQuIEFuZCB3aGVuIGhlIHNhdyB0aGF0IGl0cyBwb2ludCB3YXMga2VlbiBhbmQgaXRzIGVkZ2Ugc3RpbGwgc2hhcnAsIGhlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3cgSSBhbSBteSBvd24gbWFzdGVyLjwvcT4gVGhlbiBoZSBsYWlkIGRvd24gdGhlIHN3b3JkIGFuZCByZXN1bWVkIGhpcyBib29rLCBhbmQgaGUgaXMgc2FpZCB0byBoYXZlIHJlYWQgaXQgdGhyb3VnaCB0d2ljZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['70.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyd2FyZHMgaGUgZmVsbCBpbnRvIHNvIGRlZXAgYSBzbGVlcCB0aGF0IHRob3NlIG91dHNpZGUgdGhlIGNoYW1iZXIgaGVhcmQgaGltLiBCdXQgYWJvdXQgbWlkbmlnaHQgaGUgY2FsbGVkIHR3byBvZiBoaXMgZnJlZWRtZW4sIENsZWFudGhlcyB0aGUgcGh5c2ljaWFuLCBhbmQgQnV0YXMsIHdobyB3YXMgaGlzIGNoaWVmIGFnZW50IGluIHB1YmxpYyBtYXR0ZXJzLiBCdXRhcyBoZSBzZW50IGRvd24gdG8gdGhlIHNlYSwgdG8gZmluZCBvdXQgd2hldGhlciBhbGwgaGFkIHNldCBzYWlsIHN1Y2Nlc3NmdWxseSwgYW5kIGJyaW5nIGhpbSB3b3JkOyB3aGlsZSB0byB0aGUgcGh5c2ljaWFuIGhlIGdhdmUgaGlzIGhhbmQgdG8gYmFuZGFnZSwgc2luY2UgaXQgd2FzIGluZmxhbWVkIGJ5IHRoZSBibG93IHRoYXQgaGUgaGFkIGdpdmVuIHRoZSBzbGF2ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['70.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFkZSBldmVyeWJvZHkgbW9yZSBjaGVlcmZ1bCwgc2luY2UgdGhleSB0aG91Z2h0IGhlIGhhZCBhIG1pbmQgdG8gbGl2ZS4gSW4gYSBsaXR0bGUgd2hpbGUgQnV0YXMgY2FtZSB3aXRoIHRpZGluZ3MgdGhhdCBhbGwgaGFkIHNldCBzYWlsIGV4Y2VwdCBDcmFzc3VzLCB3aG8gd2FzIGRldGFpbmVkIGJ5IHNvbWUgYnVzaW5lc3Mgb3Igb3RoZXIsIGFuZCBoZSB0b28gd2FzIG9uIHRoZSBwb2ludCBvZiBlbWJhcmtpbmc7IEJ1dGFzIHJlcG9ydGVkIGFsc28gdGhhdCBhIGhlYXZ5IHN0b3JtIGFuZCBhIGhpZ2ggd2luZCBwcmV2YWlsZWQgYXQgc2VhLiBPbiBoZWFyaW5nIHRoaXMsIENhdG8gZ3JvYW5lZCB3aXRoIHBpdHkgZm9yIHRob3NlIGluIHBlcmlsIG9uIHRoZSBzZWEsIGFuZCBzZW50IEJ1dGFzIGRvd24gYWdhaW4sIHRvIGZpbmQgb3V0IHdoZXRoZXIgYW55b25lIGhhZCBiZWVuIGRyaXZlbiBiYWNrIGJ5IHRoZSBzdG9ybSBhbmQgd2FudGVkIGFueSBuZWNlc3NhcmllcywgYW5kIHRvIHJlcG9ydCB0byBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgdGhlIGJpcmRzIHdlcmUgYWxyZWFkeSBiZWdpbm5pbmcgdG8gc2luZywgd2hlbiBoZSBmZWxsIGFzbGVlcCBhZ2FpbiBmb3IgYSBsaXR0bGUgd2hpbGUuIEFuZCB3aGVuIEJ1dGFzIGNhbWUgYW5kIHRvbGQgaGltIHRoYXQgdGhlIGhhcmJvdXJzIHdlcmUgdmVyeSBxdWlldCwgaGUgb3JkZXJlZCBoaW0gdG8gY2xvc2UgdGhlIGRvb3IsIHRocm93aW5nIGhpbXNlbGYgZG93biB1cG9uIGhpcyBjb3VjaCBhcyBpZiBoZSB3ZXJlIGdvaW5nIHRvIHJlc3QgdGhlcmUgZm9yIHdoYXQgc3RpbGwgcmVtYWluZWQgb2YgdGhlIG5pZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBCdXRhcyBoYWQgZ29uZSBvdXQsIENhdG8gZHJldyBoaXMgc3dvcmQgZnJvbSBpdHMgc2hlYXRoIGFuZCBzdGFiYmVkIGhpbXNlbGYgYmVsb3cgdGhlIGJyZWFzdC4gSGlzIHRocnVzdCwgaG93ZXZlciwgd2FzIHNvbWV3aGF0IGZlZWJsZSwgb3dpbmcgdG8gdGhlIGluZmxhbW1hdGlvbiBpbiBoaXMgaGFuZCwgYXJpZCBzbyBoZSBkaWQgbm90IGF0IG9uY2UgZGlzcGF0Y2ggaGltc2VsZiwgYnV0IGluIGhpcyBkZWF0aCBzdHJ1Z2dsZSBmZWxsIGZyb20gdGhlIGNvdWNoIGFuZCBtYWRlIGEgbG91ZCBub2lzZSBieSBvdmVydHVybmluZyBhIGdlb21ldHJpY2FsIGFiYWN1cyB0aGF0IHN0b29kIG5lYXIuIEhpcyBzZXJ2YW50cyBoZWFyZCB0aGUgbm9pc2UgYW5kIGNyaWVkIG91dCwgYW5kIGhpcyBzb24gYXQgb25jZSByYW4gaW4sIHRvZ2V0aGVyIHdpdGggaGlzIGZyaWVuZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgc2F3IHRoYXQgaGUgd2FzIHNtZWFyZWQgd2l0aCBibG9vZCwgYW5kIHRoYXQgbW9zdCBvZiBoaXMgYm93ZWxzIHdlcmUgcHJvdHJ1ZGluZywgYnV0IHRoYXQgaGUgc3RpbGwgaGFkIGhpcyBleWVzIG9wZW4gYW5kIHdhcyBhbGl2ZTsgYW5kIHRoZXkgd2VyZSB0ZXJyaWJseSBzaG9ja2VkLiBCdXQgdGhlIHBoeXNpY2lhbiB3ZW50IHRvIGhpbSBhbmQgdHJpZWQgdG8gcmVwbGFjZSBoaXMgYm93ZWxzLCB3aGljaCByZW1haW5lZCB1bmluanVyZWQsIGFuZCB0byBzZXcgdXAgdGhlIHdvdW5kLiBBY2NvcmRpbmdseSwgd2hlbiBDYXRvIHJlY292ZXJlZCBhbmQgYmVjYW1lIGF3YXJlIG9mIHRoaXMsIGhlIHB1c2hlZCB0aGUgcGh5c2ljaWFuIGF3YXksIHRvcmUgaGlzIGJvd2VscyB3aXRoIGhpcyBoYW5kcywgcmVudCB0aGUgd291bmQgc3RpbGwgbW9yZSwgYW5kIHNvIGRpZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['70.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgdGhlIGJpcmRzIHdlcmUgYWxyZWFkeSBiZWdpbm5pbmcgdG8gc2luZywgd2hlbiBoZSBmZWxsIGFzbGVlcCBhZ2FpbiBmb3IgYSBsaXR0bGUgd2hpbGUuIEFuZCB3aGVuIEJ1dGFzIGNhbWUgYW5kIHRvbGQgaGltIHRoYXQgdGhlIGhhcmJvdXJzIHdlcmUgdmVyeSBxdWlldCwgaGUgb3JkZXJlZCBoaW0gdG8gY2xvc2UgdGhlIGRvb3IsIHRocm93aW5nIGhpbXNlbGYgZG93biB1cG9uIGhpcyBjb3VjaCBhcyBpZiBoZSB3ZXJlIGdvaW5nIHRvIHJlc3QgdGhlcmUgZm9yIHdoYXQgc3RpbGwgcmVtYWluZWQgb2YgdGhlIG5pZ2h0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['70.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIEJ1dGFzIGhhZCBnb25lIG91dCwgQ2F0byBkcmV3IGhpcyBzd29yZCBmcm9tIGl0cyBzaGVhdGggYW5kIHN0YWJiZWQgaGltc2VsZiBiZWxvdyB0aGUgYnJlYXN0LiBIaXMgdGhydXN0LCBob3dldmVyLCB3YXMgc29tZXdoYXQgZmVlYmxlLCBvd2luZyB0byB0aGUgaW5mbGFtbWF0aW9uIGluIGhpcyBoYW5kLCBhcmlkIHNvIGhlIGRpZCBub3QgYXQgb25jZSBkaXNwYXRjaCBoaW1zZWxmLCBidXQgaW4gaGlzIGRlYXRoIHN0cnVnZ2xlIGZlbGwgZnJvbSB0aGUgY291Y2ggYW5kIG1hZGUgYSBsb3VkIG5vaXNlIGJ5IG92ZXJ0dXJuaW5nIGEgZ2VvbWV0cmljYWwgYWJhY3VzIHRoYXQgc3Rvb2QgbmVhci4gSGlzIHNlcnZhbnRzIGhlYXJkIHRoZSBub2lzZSBhbmQgY3JpZWQgb3V0LCBhbmQgaGlzIHNvbiBhdCBvbmNlIHJhbiBpbiwgdG9nZXRoZXIgd2l0aCBoaXMgZnJpZW5kcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['70.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgc2F3IHRoYXQgaGUgd2FzIHNtZWFyZWQgd2l0aCBibG9vZCwgYW5kIHRoYXQgbW9zdCBvZiBoaXMgYm93ZWxzIHdlcmUgcHJvdHJ1ZGluZywgYnV0IHRoYXQgaGUgc3RpbGwgaGFkIGhpcyBleWVzIG9wZW4gYW5kIHdhcyBhbGl2ZTsgYW5kIHRoZXkgd2VyZSB0ZXJyaWJseSBzaG9ja2VkLiBCdXQgdGhlIHBoeXNpY2lhbiB3ZW50IHRvIGhpbSBhbmQgdHJpZWQgdG8gcmVwbGFjZSBoaXMgYm93ZWxzLCB3aGljaCByZW1haW5lZCB1bmluanVyZWQsIGFuZCB0byBzZXcgdXAgdGhlIHdvdW5kLiBBY2NvcmRpbmdseSwgd2hlbiBDYXRvIHJlY292ZXJlZCBhbmQgYmVjYW1lIGF3YXJlIG9mIHRoaXMsIGhlIHB1c2hlZCB0aGUgcGh5c2ljaWFuIGF3YXksIHRvcmUgaGlzIGJvd2VscyB3aXRoIGhpcyBoYW5kcywgcmVudCB0aGUgd291bmQgc3RpbGwgbW9yZSwgYW5kIHNvIGRpZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJlZm9yZSBvbmUgd291bGQgaGF2ZSB0aG91Z2h0IHRoYXQgYWxsIGluIHRoZSBob3VzZSBjb3VsZCBsZWFybiBvZiB0aGUgZXZlbnQsIHRoZSB0aHJlZSBodW5kcmVkIHdlcmUgYXQgdGhlIGRvb3IsIGFuZCBhIGxpdHRsZSBsYXRlciB0aGUgcGVvcGxlIG9mIFV0aWNhIGhhZCBhc3NlbWJsZWQuIFdpdGggb25lIHZvaWNlIHRoZXkgY2FsbGVkIENhdG8gdGhlaXIgc2F2aW91ciBhbmQgYmVuZWZhY3RvciwgdGhlIG9ubHkgbWFuIHdobyB3YXMgZnJlZSwgdGhlIG9ubHkgb25lIHVudmFucXVpc2hlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoaXMgdGhleSBjb250aW51ZWQgdG8gZG8gZXZlbiB3aGVuIHdvcmQgd2FzIGJyb3VnaHQgdGhhdCBDYWVzYXIgd2FzIGFwcHJvYWNoaW5nLiBCdXQgbmVpdGhlciBmZWFyIG9mIHRoZSBjb25xdWVyb3IsIG5vciBhIGRlc2lyZSB0byBmbGF0dGVyIGhpbSwgbm9yIHRoZWlyIG11dHVhbCBzdHJpZmUgYW5kIGRpc3NlbnNpb24sIGNvdWxkIGJsdW50IHRoZWlyIGRlc2lyZSB0byBob25vdXIgQ2F0by4gVGhleSBkZWNrZWQgaGlzIGJvZHkgaW4gc3BsZW5kaWQgZmFzaGlvbiwgZ2F2ZSBpdCBhbiBpbGx1c3RyaW91cyBlc2NvcnQsIGFuZCBidXJpZWQgaXQgbmVhciB0aGUgc2VhLCB3aGVyZSBhIHN0YXR1ZSBvZiBoaW0gbm93IHN0YW5kcywgc3dvcmQgaW4gaGFuZC4gVGhlbiB0aGV5IHR1cm5lZCB0aGVpciB0aG91Z2h0cyB0byB0aGVpciBvd24gc2FsdmF0aW9uIGFuZCB0aGF0IG9mIHRoZWlyIGNpdHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['71.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QmVmb3JlIG9uZSB3b3VsZCBoYXZlIHRob3VnaHQgdGhhdCBhbGwgaW4gdGhlIGhvdXNlIGNvdWxkIGxlYXJuIG9mIHRoZSBldmVudCwgdGhlIHRocmVlIGh1bmRyZWQgd2VyZSBhdCB0aGUgZG9vciwgYW5kIGEgbGl0dGxlIGxhdGVyIHRoZSBwZW9wbGUgb2YgVXRpY2EgaGFkIGFzc2VtYmxlZC4gV2l0aCBvbmUgdm9pY2UgdGhleSBjYWxsZWQgQ2F0byB0aGVpciBzYXZpb3VyIGFuZCBiZW5lZmFjdG9yLCB0aGUgb25seSBtYW4gd2hvIHdhcyBmcmVlLCB0aGUgb25seSBvbmUgdW52YW5xdWlzaGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['71.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIHRoZXkgY29udGludWVkIHRvIGRvIGV2ZW4gd2hlbiB3b3JkIHdhcyBicm91Z2h0IHRoYXQgQ2Flc2FyIHdhcyBhcHByb2FjaGluZy4gQnV0IG5laXRoZXIgZmVhciBvZiB0aGUgY29ucXVlcm9yLCBub3IgYSBkZXNpcmUgdG8gZmxhdHRlciBoaW0sIG5vciB0aGVpciBtdXR1YWwgc3RyaWZlIGFuZCBkaXNzZW5zaW9uLCBjb3VsZCBibHVudCB0aGVpciBkZXNpcmUgdG8gaG9ub3VyIENhdG8uIFRoZXkgZGVja2VkIGhpcyBib2R5IGluIHNwbGVuZGlkIGZhc2hpb24sIGdhdmUgaXQgYW4gaWxsdXN0cmlvdXMgZXNjb3J0LCBhbmQgYnVyaWVkIGl0IG5lYXIgdGhlIHNlYSwgd2hlcmUgYSBzdGF0dWUgb2YgaGltIG5vdyBzdGFuZHMsIHN3b3JkIGluIGhhbmQuIFRoZW4gdGhleSB0dXJuZWQgdGhlaXIgdGhvdWdodHMgdG8gdGhlaXIgb3duIHNhbHZhdGlvbiBhbmQgdGhhdCBvZiB0aGVpciBjaXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENhZXNhciBsZWFybmVkIGZyb20gcGVvcGxlIHdobyBjYW1lIHRvIGhpbSB0aGF0IENhdG8gd2FzIHJlbWFpbmluZyBpbiBVdGljYSBhbmQgbm90IHRyeWluZyB0byBlc2NhcGUsIGJ1dCB0aGF0IGhlIHdhcyBzZW5kaW5nIG9mZiB0aGUgcmVzdCwgd2hpbGUgaGUgaGltc2VsZiwgaGlzIGNvbXBhbmlvbnMsIGFuZCBoaXMgc29uLCB3ZXJlIGZlYXJsZXNzbHkgZ29pbmcgdXAgYW5kIGRvd24sIGhlIHRob3VnaHQgaXQgZGlmZmljdWx0IHRvIGRpc2Nlcm4gdGhlIHB1cnBvc2Ugb2YgdGhlIG1hbiwgYnV0IHNpbmNlIGhlIG1hZGUgdGhlIGdyZWF0ZXN0IGFjY291bnQgb2YgaGltLCBoZSBjYW1lIG9uIHdpdGggaGlzIGFybXkgaW4gYWxsIGhhc3RlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBob3dldmVyLCBoZSBoZWFyZCBvZiBoaXMgZGVhdGgsIGhlIHNhaWQgdGh1cyBtdWNoIG9ubHksIGFzIHdlIGFyZSB0b2xkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gQ2F0bywgSSBiZWdydWRnZSB0aGVlIHRoeSBkZWF0aDsgZm9yIHRob3UgZGlkc3QgYmVncnVkZ2UgbWUgdGhlIHNwYXJpbmcgb2YgdGh5IGxpZmUuPC9xPiBGb3IsIGluIHJlYWxpdHksIGlmIENhdG8gY291bGQgaGF2ZSBjb25zZW50ZWQgdG8gaGF2ZSBoaXMgbGlmZSBzcGFyZWQgYnkgQ2Flc2FyLCBoZSB3b3VsZCBub3QgYmUgdGhvdWdodCB0byBoYXZlIGRlZmlsZWQgaGlzIG93biBmYWlyIGZhbWUsIGJ1dCByYXRoZXIgdG8gaGF2ZSBhZG9ybmVkIHRoYXQgb2YgQ2Flc2FyLiBIb3dldmVyLCB3aGF0IHdvdWxkIGhhdmUgaGFwcGVuZWQgaXMgdW5jZXJ0YWluOyB0aG91Z2ggdGhlIG1pbGRlciBjb3Vyc2UgaXMgdG8gYmUgY29uamVjdHVyZWQgb24gdGhlIHBhcnQgb2YgQ2Flc2FyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['72.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYWVzYXIgbGVhcm5lZCBmcm9tIHBlb3BsZSB3aG8gY2FtZSB0byBoaW0gdGhhdCBDYXRvIHdhcyByZW1haW5pbmcgaW4gVXRpY2EgYW5kIG5vdCB0cnlpbmcgdG8gZXNjYXBlLCBidXQgdGhhdCBoZSB3YXMgc2VuZGluZyBvZmYgdGhlIHJlc3QsIHdoaWxlIGhlIGhpbXNlbGYsIGhpcyBjb21wYW5pb25zLCBhbmQgaGlzIHNvbiwgd2VyZSBmZWFybGVzc2x5IGdvaW5nIHVwIGFuZCBkb3duLCBoZSB0aG91Z2h0IGl0IGRpZmZpY3VsdCB0byBkaXNjZXJuIHRoZSBwdXJwb3NlIG9mIHRoZSBtYW4sIGJ1dCBzaW5jZSBoZSBtYWRlIHRoZSBncmVhdGVzdCBhY2NvdW50IG9mIGhpbSwgaGUgY2FtZSBvbiB3aXRoIGhpcyBhcm15IGluIGFsbCBoYXN0ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['72.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIGhlIGhlYXJkIG9mIGhpcyBkZWF0aCwgaGUgc2FpZCB0aHVzIG11Y2ggb25seSwgYXMgd2UgYXJlIHRvbGQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIENhdG8sIEkgYmVncnVkZ2UgdGhlZSB0aHkgZGVhdGg7IGZvciB0aG91IGRpZHN0IGJlZ3J1ZGdlIG1lIHRoZSBzcGFyaW5nIG9mIHRoeSBsaWZlLjwvcT4gRm9yLCBpbiByZWFsaXR5LCBpZiBDYXRvIGNvdWxkIGhhdmUgY29uc2VudGVkIHRvIGhhdmUgaGlzIGxpZmUgc3BhcmVkIGJ5IENhZXNhciwgaGUgd291bGQgbm90IGJlIHRob3VnaHQgdG8gaGF2ZSBkZWZpbGVkIGhpcyBvd24gZmFpciBmYW1lLCBidXQgcmF0aGVyIHRvIGhhdmUgYWRvcm5lZCB0aGF0IG9mIENhZXNhci4gSG93ZXZlciwgd2hhdCB3b3VsZCBoYXZlIGhhcHBlbmVkIGlzIHVuY2VydGFpbjsgdGhvdWdoIHRoZSBtaWxkZXIgY291cnNlIGlzIHRvIGJlIGNvbmplY3R1cmVkIG9uIHRoZSBwYXJ0IG9mIENhZXNhci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjczIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYXRvIGRpZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDYgQi5DLiBBIHNpbmdsZSBsZXR0ZXIgb2YgaGlzIHRvIENpY2VybyBpcyBleHRhbnQgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEZhbS4gMTUuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5hZCBkaXYuPC90aXRsZT4geHYuIDU8L2JpYmw+KTogY2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyMy4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4aWlpLiAzPC9iaWJsPi48L25vdGU+IGhlIHdhcyBmb3J0eS1laWdodCB5ZWFycyBvbGQuIEhpcyBzb24gcmVjZWl2ZWQgbm8gaGFybSBhdCB0aGUgaGFuZHMgb2YgQ2Flc2FyLCBidXQgaGUgd2FzIG9mIGFuIGVhc3kgZGlzcG9zaXRpb24sIGFzIHdlIGFyZSB0b2xkLCBhbmQgaW4gaGlzIHJlbGF0aW9ucyB3aXRoIHdvbWVuIG5vdCBibGFtZWxlc3MuIEluIENhcHBhZG9jaWEgaGUgZW5qb3llZCB0aGUgaG9zcGl0YWxpdHkgb2YgTWFycGhhZGF0ZXMsIG9uZSBvZiB0aGUgcm95YWwgZmFtaWx5LCB3aG8gaGFkIGEgY29tZWx5IHdpZmU7IGFuZCBzaW5jZSB5b3VuZyBDYXRvIHNwZW50IG1vcmUgdGltZSB3aXRoIHRoZW0gdGhhbiB3YXMgc2VlbWx5LCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5oZSB3YXMgc2F0aXJpemVkIGluIHN1Y2ggd3JpdGluZ3MgYXMgdGhlc2U6CgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPk9uIHRoZSBtb3Jyb3cgQ2F0byBqb3VybmV5cyzigJRhZnRlciBhIGdvb2Qgcm91bmQgdGhpcnR5IGRheXM7PC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJYW5kLCAKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+TWFycGhhZGF0ZXMgYW5kIFBvcmNpdXMsIHR3byBmcmllbmRzIHdpdGggYnV0IGEgPC9sPgoJCQkJCSAgICAgICAgICA8bD5zaW5nbGUgU291bC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlGb3IgdGhlIHdpZmUgb2YgTWFycGhhZGF0ZXMgd2FzIG5hbWVkIFBzeWNoZSAoPGdsb3NzPnNvdWw8L2dsb3NzPikuIEFuZCBhZ2FpbjoKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+Tm9ib2R5IGJvcm4sIGlsbHVzdHJpb3VzLCBvdXIgQ2F0byBoYXRoIGEgcm95YWwgPC9sPgoJCQkJCSAgICAgICAgICA8bD5Tb3VsLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQnV0IGFsbCBzdWNoIGlsbC1yZXBvcnQgd2FzIGJsb3R0ZWQgb3V0IGFuZCByZW1vdmVkIGJ5IHRoZSBtYW5uZXIgb2YgaGlzIGRlYXRoLiBGb3IgaGUgZm91Z2h0IGF0IFBoaWxpcHBpIGFnYWluc3QgQ2Flc2FyIGFuZCBBbnRvbnksIGluIGJlaGFsZiBvZiBsaWJlcnR5OyBhbmQgd2hlbiBoaXMgbGluZSBvZiBiYXR0bGUgd2FzIGdpdmluZyB3YXksIGhlIGRlaWduZWQgbm90IGVpdGhlciB0byBmbHkgb3IgdG8gaGlkZSBoaW1zZWxmLCBidXQgY2hhbGxlbmdlZCB0aGUgZW5lbXksIGRpc3BsYXllZCBoaW1zZWxmIGluIGZyb250IG9mIHRoZW0sIGNoZWVyZWQgb24gdGhvc2Ugd2hvIGhlbGQgdGhlaXIgZ3JvdW5kIHdpdGggaGltLCBhbmQgc28gZmVsbCwgYWZ0ZXIgYW1hemluZyBoaXMgZm9lcyBieSBoaXMgdmFsb3VyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['73.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYXRvIGRpZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA0NiBCLkMuIEEgc2luZ2xlIGxldHRlciBvZiBoaXMgdG8gQ2ljZXJvIGlzIGV4dGFudCAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBGYW0uIDE1LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBkaXYuPC90aXRsZT4geHYuIDU8L2JpYmw+KTogY2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDIzLjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpaWkuIDM8L2JpYmw+Ljwvbm90ZT4gaGUgd2FzIGZvcnR5LWVpZ2h0IHllYXJzIG9sZC4gSGlzIHNvbiByZWNlaXZlZCBubyBoYXJtIGF0IHRoZSBoYW5kcyBvZiBDYWVzYXIsIGJ1dCBoZSB3YXMgb2YgYW4gZWFzeSBkaXNwb3NpdGlvbiwgYXMgd2UgYXJlIHRvbGQsIGFuZCBpbiBoaXMgcmVsYXRpb25zIHdpdGggd29tZW4gbm90IGJsYW1lbGVzcy4gSW4gQ2FwcGFkb2NpYSBoZSBlbmpveWVkIHRoZSBob3NwaXRhbGl0eSBvZiBNYXJwaGFkYXRlcywgb25lIG9mIHRoZSByb3lhbCBmYW1pbHksIHdobyBoYWQgYSBjb21lbHkgd2lmZTsgYW5kIHNpbmNlIHlvdW5nIENhdG8gc3BlbnQgbW9yZSB0aW1lIHdpdGggdGhlbSB0aGFuIHdhcyBzZWVtbHksIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBGYW0uIDE1LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBkaXYuPC90aXRsZT4geHYuIDU8L2JpYmw+KTogY2YuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIGRpdi48L3RpdGxlPiB4di4gNTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDIzLjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpaWkuIDM8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['73.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIHdhcyBzYXRpcml6ZWQgaW4gc3VjaCB3cml0aW5ncyBhcyB0aGVzZToKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBtb3Jyb3cgQ2F0byBqb3VybmV5cyzigJRhZnRlciBhIGdvb2Qgcm91bmQgdGhpcnR5IGRheXM7PC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJYW5kLCAKCQkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIG1vcnJvdyBDYXRvIGpvdXJuZXlzLOKAlGFmdGVyIGEgZ29vZCByb3VuZCB0aGlydHkgZGF5czs8L2w+CgkJCQkgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk1hcnBoYWRhdGVzIGFuZCBQb3JjaXVzLCB0d28gZnJpZW5kcyB3aXRoIGJ1dCBhIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5zaW5nbGUgU291bC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlGb3IgdGhlIHdpZmUgb2YgTWFycGhhZGF0ZXMgd2FzIG5hbWVkIFBzeWNoZSAoPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJwaGFkYXRlcyBhbmQgUG9yY2l1cywgdHdvIGZyaWVuZHMgd2l0aCBidXQgYSA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+c2luZ2xlIFNvdWwuPC9sPgoJCQkJICAgICAgICA8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5zb3VsPC9nbG9zcz4pLiBBbmQgYWdhaW46CgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob2JvZHkgYm9ybiwgaWxsdXN0cmlvdXMsIG91ciBDYXRvIGhhdGggYSByb3lhbCA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U291bC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm9ib2R5IGJvcm4sIGlsbHVzdHJpb3VzLCBvdXIgQ2F0byBoYXRoIGEgcm95YWwgPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlNvdWwuPC9sPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['73.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQnV0IGFsbCBzdWNoIGlsbC1yZXBvcnQgd2FzIGJsb3R0ZWQgb3V0IGFuZCByZW1vdmVkIGJ5IHRoZSBtYW5uZXIgb2YgaGlzIGRlYXRoLiBGb3IgaGUgZm91Z2h0IGF0IFBoaWxpcHBpIGFnYWluc3QgQ2Flc2FyIGFuZCBBbnRvbnksIGluIGJlaGFsZiBvZiBsaWJlcnR5OyBhbmQgd2hlbiBoaXMgbGluZSBvZiBiYXR0bGUgd2FzIGdpdmluZyB3YXksIGhlIGRlaWduZWQgbm90IGVpdGhlciB0byBmbHkgb3IgdG8gaGlkZSBoaW1zZWxmLCBidXQgY2hhbGxlbmdlZCB0aGUgZW5lbXksIGRpc3BsYXllZCBoaW1zZWxmIGluIGZyb250IG9mIHRoZW0sIGNoZWVyZWQgb24gdGhvc2Ugd2hvIGhlbGQgdGhlaXIgZ3JvdW5kIHdpdGggaGltLCBhbmQgc28gZmVsbCwgYWZ0ZXIgYW1hemluZyBoaXMgZm9lcyBieSBoaXMgdmFsb3VyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc3RpbGwgbW9yZSB0cnVlIGlzIGl0IHRoYXQgdGhlIGRhdWdodGVyIG9mIENhdG8gd2FzIGRlZmljaWVudCBuZWl0aGVyIGluIHBydWRlbmNlIG5vciBjb3VyYWdlLiBTaGUgd2FzIHRoZSB3aWZlIG9mIHRoZSBCcnV0dXMgd2hvIHNsZXcgQ2Flc2FyLCB3YXMgcHJpdnkgdG8gdGhlIGNvbnNwaXJhY3kgaXRzZWxmLCBhbmQgZ2F2ZSB1cCBoZXIgbGlmZSBpbiBhIG1hbm5lciB3b3J0aHkgb2YgaGVyIG5vYmxlIGJpcnRoIGFuZCBoZXIgbG9mdHkgY2hhcmFjdGVyLCBhcyBpcyB0b2xkIGluIHRoZSBMaWZlIG9mIEJydXR1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDEzLjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXJzIHhpaWk8L2JpYmw+LiBhbmQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDUzLjEiIHZhbGlkPSJ5ZXMiPmxpaWk8L2JpYmw+Ljwvbm90ZT4gU3RhdHlsbGl1cywgdG9vLCB3aG8gZGVjbGFyZWQgdGhhdCBoZSB3b3VsZCBmb2xsb3cgQ2F0bydzIGV4YW1wbGUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIGFib3ZlLCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNjYuNCIgdmFsaWQ9InllcyI+Y2hhcHRlciBseHZpLiA0PC9iaWJsPi48L25vdGU+IHdhcyBwcmV2ZW50ZWQgYXQgdGhlIHRpbWUgYnkgdGhlIHBoaWxvc29waGVycyBmcm9tIGRlc3Ryb3lpbmcgaGltc2VsZiwgYXMgaGUgd2lzaGVkIHRvIGRvLCBidXQgYWZ0ZXJ3YXJkcyBnYXZlIG1vc3QgZmFpdGhmdWwgYW5kIGVmZmljaWVudCBzZXJ2aWNlIHRvIEJydXR1cywgYW5kIGRpZWQgYXQgUGhpbGlwcGkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gNTEuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CcnV0dXM8L3RpdGxlPiwgbGkuIDQ8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
