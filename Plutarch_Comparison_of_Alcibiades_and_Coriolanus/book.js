var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = document.getElementsByClassName(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmV4Y2VwdCB0aGF0IHNvbWUgbWF5IGdpdmUgdGhlIHByZWZlcmVuY2UgdG8gQWxjaWJpYWRlcywgYmVjYXVzZSBoZSB3YXMgY29udGludWFsbHkgc3VjY2Vzc2Z1bCBhbmQgdmljdG9yaW91cyBpbiBtYW55IHN0cnVnZ2xlcyBieSBzZWEsIGFzIHdlbGwgYXMgYnkgbGFuZCwgYW5kIGRlY2xhcmUgaGltIHRoZXJlZm9yZSB0aGUgbW9yZSBjb25zdW1tYXRlIGdlbmVyYWwuICBJdCBpcyBjZXJ0YWlubHkgdHJ1ZSBvZiBlYWNoIHRoYXQsIHdoZW4gaGUgd2FzIGF0IGhvbWUgYW5kIGluIGNvbW1hbmQsIGhlIGFsd2F5cyBjb25kdWN0ZWQgaGlzIGNvdW50cnkncyBjYXVzZSB3aXRoIG1hbmlmZXN0IHN1Y2Nlc3MsIGFuZCwgY29udHJhcml3aXNlLCBpbmZsaWN0ZWQgZXZlbiBtb3JlIG1hbmlmZXN0IGluanVyeSB1cG9uIGl0IHdoZW4gaGUgd2VudCBvdmVyIHRvIHRoZSBlbmVteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIHN0YXRlc21lbiwgaWYgdGhlIGV4Y2VlZGluZyB3YW50b25uZXNzIG9mIEFsY2liaWFkZXMsIGFuZCB0aGUgc3RhaW4gb2YgZGlzc29sdXRlbmVzcyBhbmQgdnVsZ2FyaXR5IHVwb24gYWxsIGhpcyBlZmZvcnRzIHRvIHdpbiB0aGUgZmF2b3VyIG9mIHRoZSBtdWx0aXR1ZGUsIHdvbiB0aGUgbG9hdGhpbmcgb2Ygc29iZXItbWluZGVkIGNpdGl6ZW5zLCBpdCB3YXMgZXF1YWxseSB0cnVlIHRoYXQgdGhlIHV0dGVyIHVuZ3JhY2lvdXNuZXNzIG9mIE1hcmNpdXMsIHRvZ2V0aGVyIHdpdGggaGlzIHByaWRlIGFuZCBvbGlnYXJjaGljYWwgZGVtZWFub3VyLCB3b24gdGhlIGhhdHJlZCBvZiB0aGUgUm9tYW4gcGVvcGxlLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5laXRoZXIgY291cnNlLCB0aGVuLCBpcyB0byBiZSBhcHByb3ZlZDsgYWx0aG91Z2ggdGhlIG1hbiB3aG8gc2Vla3MgdG8gd2luIHRoZSBwZW9wbGUgYnkgaGlzIGZhdm91cnMgaXMgbGVzcyBibGFtZXdvcnRoeSB0aGFuIHRob3NlIHdobyBoZWFwIGluc3VsdHMgb24gdGhlIG11bHRpdHVkZSwgaW4gb3JkZXIgdG8gYXZvaWQgdGhlIGFwcGVhcmFuY2Ugb2YgdHJ5aW5nIHRvIHdpbiB0aGVtLiAgRm9yIGl0IGlzIGEgZGlzZ3JhY2UgdG8gZmxhdHRlciB0aGUgcGVvcGxlIGZvciB0aGUgc2FrZSBvZiBwb3dlcjsgYnV0IHRvIGdldCBwb3dlciBieSBhY3RzIG9mIHRlcnJvciwgdmlvbGVuY2UsIGFuZCBvcHByZXNzaW9uLCBpcyBub3Qgb25seSBhIGRpc2dyYWNlLCBpdCBpcyBhbHNvIGFuIGluanVzdGljZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoYXQgTWFyY2l1cyBpcyB1c3VhbGx5IHRob3VnaHQgdG8gaGF2ZSBiZWVuIHJhdGhlciBzaW1wbGUgaW4gaGlzIG5hdHVyZSwgYW5kIHN0cmFpZ2h0Zm9yd2FyZCwgd2hpbGUgQWxjaWJpYWRlcyB3YXMgdW5zY3J1cHVsb3VzIGluIGhpcyBwdWJsaWMgYWN0cywgYW5kIGZhbHNlLCBpcyB2ZXJ5IGNsZWFyLiBBbmQgQWxjaWJpYWRlcyBpcyBwYXJ0aWN1bGFybHkgZGVub3VuY2VkIGZvciB0aGUgbWFsaWNpb3VzIGRlY2VpdCBieSB3aGljaCBoZSBjaGVhdGVkIHRoZSBMYWNlZGFlbW9uaWFuIGFtYmFzc2Fkb3JzLCBhcyBUaHVjeWRpZGVzIHJlbGF0ZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiA1LjQ1IiB2YWxpZD0ieWVzIj5WLiA0NTwvYmlibD47IGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTmljLiAxMCIgdmFsaWQ9InllcyI+UGx1dGFyY2gncyA8dGl0bGU+TmljaWFzPC90aXRsZT4sIHguPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsYy4gMTQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWxjaWJpYWRlczwvdGl0bGU+LCB4aXY8L2JpYmw+Ljwvbm90ZT4gYW5kIHB1dCBhbiBlbmQgdG8gdGhlIHBlYWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhpcyBwb2xpY3kgb2YgaGlzLCBhbHRob3VnaCBpdCBkaWQgcGx1bmdlIHRoZSBjaXR5IGFnYWluIGludG8gd2FyLCBtYWRlIGl0IG5ldmVydGhlbGVzcyBzdHJvbmcgYW5kIGZvcm1pZGFibGUsIGJ5IHJlYXNvbiBvZiB0aGUgYWxsaWFuY2Ugd2l0aCBNYW50aW5lYSBhbmQgQXJnb3Mgd2hpY2ggQWxjaWJpYWRlcyBzZWN1cmVkIGZvciBpdC4gIEFuZCB5ZXQgTWFyY2l1cyBoaW1zZWxmIGFsc28gdXNlZCBkZWNlaXQgdG8gc3RpciB1cCB3YXIgYmV0d2VlbiB0aGUgUm9tYW5zIGFuZCBWb2xzY2lhbnMsIHdoZW4gaGUgYnJvdWdodCBhIGZhbHNlIGNoYXJnZSBhZ2FpbnN0IHRoZSB2aXNpdG9ycyB0byB0aGUgZ2FtZXMsIGFzIERpb255c2l1cyByZWxhdGVzOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ29yLiAyNi4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNvcmlvbGFudXM8L3RpdGxlPiwgeHh2aS4gMjwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDguMiI+RGlvbnlzaXVzIEhhbC4sIDx0aXRsZT5BbnRpcS4gUm9tLjwvdGl0bGU+IHZpaWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB0aGUgbW90aXZlIGZvciBoaXMgYWN0aW9uIG1ha2VzIGl0IHRoZSB3b3JzZSBvZiB0aGUgdHdvLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgd2FzIG5vdCBpbmZsdWVuY2VkIGJ5IGFtYml0aW9uLCBvciBieSByaXZhbHJ5IGluIGEgcG9saXRpY2FsIHN0cnVnZ2xlLCBhcyBBbGNpYmlhZGVzIHdhcywgYnV0IHNpbXBseSBnYXZlIHdheSB0byBoaXMgYW5nZXIsIGZyb20gd2hpY2ggcGFzc2lvbiwgYXMgRGlvbiBzYXlzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm5vIG9uZSBldmVyIGdldHMgYSBncmF0ZWZ1bCByZXR1cm4sPC9xPiBhbmQgdGhyZXcgbWFueSBkaXN0cmljdHMgb2YgSXRhbHkgaW50byBjb25mdXNpb24sIGFuZCBuZWVkbGVzc2x5IHNhY3JpZmljZWQgbWFueSBpbm5vY2VudCBjaXRpZXMgdG8gaGlzIHJhZ2UgYWdhaW5zdCBoaXMgY291bnRyeS4gSXQgaXMgdHJ1ZSwgaW5kZWVkLCB0aGF0IEFsY2liaWFkZXMgYWxzbywgdGhyb3VnaCBoaXMgYW5nZXIsIHdhcyB0aGUgY2F1c2Ugb2YgZ3JlYXQgY2FsYW1pdGllcyB0byBoaXMgY291bnRyeW1lbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGp1c3QgYXMgc29vbiBhcyBoZSBzYXcgdGhhdCB0aGV5IHdlcmUgcmVwZW50YW50LCBoZSBzaG93ZWQgdGhlbSBoaXMgZ29vZHdpbGwsIGFuZCBhZnRlciBoZSBoYWQgYmVlbiBkcml2ZW4gYXdheSBhIHNlY29uZCB0aW1lLCBoZSBkaWQgbm90IGV4dWx0IG92ZXIgdGhlIG1pc3Rha2VzIG9mIHRoZWlyIGdlbmVyYWxzLCBub3IgbG9vayB3aXRoICBpbmRpZmZlcmVuY2UgdXBvbiB0aGVpciBiYWQgYW5kIHBlcmlsb3VzIHBsYW5zLCBidXQgZGlkIHByZWNpc2VseSB3aGF0IEFyaXN0aWRlcyBpcyBzbyBoaWdobHkgcHJhaXNlZCBmb3IgZG9pbmcgdG8gVGhlbWlzdG9jbGVzOiBoZSBjYW1lIHRvIHRoZSBtZW4gd2hvIHdlcmUgdGhlbiBpbiBjb21tYW5kLCBhbHRob3VnaCB0aGV5IHdlcmUgbm90IGhpcyBmcmllbmRzLCBhbmQgdG9sZCB0aGVtIHBsYWlubHkgd2hhdCB0aGV5IG91Z2h0IHRvIGRvLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5NYXJjaXVzLCBob3dldmVyLCBpbiB0aGUgZmlyc3QgcGxhY2UsIGRpZCBpbmp1cnkgdG8gaGlzIHdob2xlIGNpdHksIGFsdGhvdWdoIGhlIGhhZCBub3QgYmVlbiBpbmp1cmVkIGJ5IHRoZSB3aG9sZSBvZiBpdCwgYnV0IHRoZSBiZXN0IGFuZCBzdHJvbmdlc3QgcGFydCBvZiBpdCBzaGFyZWQgaGlzIHdyb25ncyBhbmQgaGlzIGRpc3RyZXNzOyBpbiB0aGUgc2Vjb25kIHBsYWNlLCBieSByZXNpc3RpbmcgYW5kIG5vdCB5aWVsZGluZyB0byB0aGUgbWFueSBlbWJhc3NpZXMgYW5kIHN1cHBsaWNhdGlvbnMgd2l0aCB3aGljaCBoaXMgY291bnRyeW1lbiB0cmllZCB0byBoZWFsIGhpcyBzaW5nbGUgd3JhdGggYW5kIGZvbGx5LCBoZSBtYWRlIGl0IGNsZWFyIHRoYXQgaGUgaGFkIHVuZGVydGFrZW4gYSBmaWVyY2UgYW5kIGltcGxhY2FibGUgd2FyIGZvciB0aGUgb3ZlcnRocm93IGFuZCBkZXN0cnVjdGlvbiBvZiBoaXMgY291bnRyeSwgbm90IHRoYXQgaGUgbWlnaHQgcmVjb3ZlciBhbmQgcmVnYWluIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCBpbiB0aGlzIHBvaW50IGl0IG1heSBiZSBzYWlkIHRoZXJlIHdhcyBhIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGVtLCBuYW1lbHksIHRoYXQgQWxjaWJpYWRlcywgd2hlbiBoZSB3ZW50IG92ZXIgdG8gdGhlIHNpZGUgb2YgdGhlIEF0aGVuaWFucywgd2FzIG1vdmVkIGJ5IGZlYXIgYW5kIGhhdHJlZCBvZiB0aGUgU3BhcnRhbnMsIHdobyB3ZXJlIHBsb3R0aW5nIHRvIHRha2UgaGlzIGxpZmU7IHdoZXJlYXMgaXQgd2FzIGRpc2hvbm91cmFibGUgZm9yIE1hcmNpdXMgdG8gbGVhdmUgdGhlIFZvbHNjaWFucyBpbiB0aGUgbHVyY2ggd2hlbiB0aGV5IHdlcmUgdHJlYXRpbmcgaGltIHdpdGggcGVyZmVjdCBmYWlybmVzcy4gRm9yIGhlIHdhcyBhcHBvaW50ZWQgdGhlaXIgbGVhZGVyLCAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaGFkIHRoZSBncmVhdGVzdCBjcmVkaXQgYW5kIGluZmx1ZW5jZSBhbW9uZyB0aGVtLCB1bmxpa2UgQWxjaWJpYWRlcywgd2hvbSB0aGUgTGFjZWRhZW1vbmlhbnMgbWlzdXNlZCByYXRoZXIgdGhhbiB1c2VkLCB3aG8gd2FuZGVyZWQgYWJvdXQgYWltbGVzc2x5IGluIHRoZWlyIGNpdHksIGFuZCBhZ2FpbiB3YXMgdG9zc2VkIHRvIGFuZCBmcm8gaW4gdGhlaXIgY2FtcCwgYW5kIGF0IGxhc3QgdGhyZXcgaGltc2VsZiBpbnRvIHRoZSBoYW5kcyBvZiBUaXNzYXBoZXJuZXM7IHVubGVzcywgaW5kZWVkLCBoZSB3YXMgYWxsIHRoZSB3aGlsZSBwYXlpbmcgaGltIGNvdXJ0IGluIG9yZGVyIHRoYXQgdGhlIEF0aGVucyB0byB3aGljaCBoZSBsb25nZWQgdG8gcmV0dXJuIG1pZ2h0IG5vdCBiZSB1dHRlcmx5IGRlc3Ryb3llZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoYXQgTWFyY2l1cyBpcyB1c3VhbGx5IHRob3VnaHQgdG8gaGF2ZSBiZWVuIHJhdGhlciBzaW1wbGUgaW4gaGlzIG5hdHVyZSwgYW5kIHN0cmFpZ2h0Zm9yd2FyZCwgd2hpbGUgQWxjaWJpYWRlcyB3YXMgdW5zY3J1cHVsb3VzIGluIGhpcyBwdWJsaWMgYWN0cywgYW5kIGZhbHNlLCBpcyB2ZXJ5IGNsZWFyLiBBbmQgQWxjaWJpYWRlcyBpcyBwYXJ0aWN1bGFybHkgZGVub3VuY2VkIGZvciB0aGUgbWFsaWNpb3VzIGRlY2VpdCBieSB3aGljaCBoZSBjaGVhdGVkIHRoZSBMYWNlZGFlbW9uaWFuIGFtYmFzc2Fkb3JzLCBhcyBUaHVjeWRpZGVzIHJlbGF0ZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gNS40NSIgdmFsaWQ9InllcyI+Vi4gNDU8L2JpYmw+OyBjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTmljLiAxMCIgdmFsaWQ9InllcyI+UGx1dGFyY2gncyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgeC48L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDE0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxjaWJpYWRlczwvdGl0bGU+LCB4aXY8L2JpYmw+Ljwvbm90ZT4gYW5kIHB1dCBhbiBlbmQgdG8gdGhlIHBlYWNlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDUuNDUiIHZhbGlkPSJ5ZXMiPlYuIDQ1PC9iaWJsPjsgY2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE5pYy4gMTAiIHZhbGlkPSJ5ZXMiPlBsdXRhcmNoJ3MgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmljaWFzPC90aXRsZT4sIHguPC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmljaWFzPC90aXRsZT4sIHguPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAxNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsY2liaWFkZXM8L3RpdGxlPiwgeGl2PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGNpYmlhZGVzPC90aXRsZT4sIHhpdjwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIHBvbGljeSBvZiBoaXMsIGFsdGhvdWdoIGl0IGRpZCBwbHVuZ2UgdGhlIGNpdHkgYWdhaW4gaW50byB3YXIsIG1hZGUgaXQgbmV2ZXJ0aGVsZXNzIHN0cm9uZyBhbmQgZm9ybWlkYWJsZSwgYnkgcmVhc29uIG9mIHRoZSBhbGxpYW5jZSB3aXRoIE1hbnRpbmVhIGFuZCBBcmdvcyB3aGljaCBBbGNpYmlhZGVzIHNlY3VyZWQgZm9yIGl0LiAgQW5kIHlldCBNYXJjaXVzIGhpbXNlbGYgYWxzbyB1c2VkIGRlY2VpdCB0byBzdGlyIHVwIHdhciBiZXR3ZWVuIHRoZSBSb21hbnMgYW5kIFZvbHNjaWFucywgd2hlbiBoZSBicm91Z2h0IGEgZmFsc2UgY2hhcmdlIGFnYWluc3QgdGhlIHZpc2l0b3JzIHRvIHRoZSBnYW1lcywgYXMgRGlvbnlzaXVzIHJlbGF0ZXM7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ29yLiAyNi4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29yaW9sYW51czwvdGl0bGU+LCB4eHZpLiAyPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiA4LjIiPkRpb255c2l1cyBIYWwuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbnRpcS4gUm9tLjwvdGl0bGU+IHZpaWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB0aGUgbW90aXZlIGZvciBoaXMgYWN0aW9uIG1ha2VzIGl0IHRoZSB3b3JzZSBvZiB0aGUgdHdvLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvci4gMjYuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvcmlvbGFudXM8L3RpdGxlPiwgeHh2aS4gMjwvYmlibD47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvcmlvbGFudXM8L3RpdGxlPiwgeHh2aS4gMjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuSC4gOC4yIj5EaW9ueXNpdXMgSGFsLiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW50aXEuIFJvbS48L3RpdGxlPiB2aWlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW50aXEuIFJvbS48L3RpdGxlPiB2aWlpLiAyLjwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgbm90IGluZmx1ZW5jZWQgYnkgYW1iaXRpb24sIG9yIGJ5IHJpdmFscnkgaW4gYSBwb2xpdGljYWwgc3RydWdnbGUsIGFzIEFsY2liaWFkZXMgd2FzLCBidXQgc2ltcGx5IGdhdmUgd2F5IHRvIGhpcyBhbmdlciwgZnJvbSB3aGljaCBwYXNzaW9uLCBhcyBEaW9uIHNheXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ubyBvbmUgZXZlciBnZXRzIGEgZ3JhdGVmdWwgcmV0dXJuLDwvcT4gYW5kIHRocmV3IG1hbnkgZGlzdHJpY3RzIG9mIEl0YWx5IGludG8gY29uZnVzaW9uLCBhbmQgbmVlZGxlc3NseSBzYWNyaWZpY2VkIG1hbnkgaW5ub2NlbnQgY2l0aWVzIHRvIGhpcyByYWdlIGFnYWluc3QgaGlzIGNvdW50cnkuIEl0IGlzIHRydWUsIGluZGVlZCwgdGhhdCBBbGNpYmlhZGVzIGFsc28sIHRocm91Z2ggaGlzIGFuZ2VyLCB3YXMgdGhlIGNhdXNlIG9mIGdyZWF0IGNhbGFtaXRpZXMgdG8gaGlzIGNvdW50cnltZW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBqdXN0IGFzIHNvb24gYXMgaGUgc2F3IHRoYXQgdGhleSB3ZXJlIHJlcGVudGFudCwgaGUgc2hvd2VkIHRoZW0gaGlzIGdvb2R3aWxsLCBhbmQgYWZ0ZXIgaGUgaGFkIGJlZW4gZHJpdmVuIGF3YXkgYSBzZWNvbmQgdGltZSwgaGUgZGlkIG5vdCBleHVsdCBvdmVyIHRoZSBtaXN0YWtlcyBvZiB0aGVpciBnZW5lcmFscywgbm9yIGxvb2sgd2l0aCAgaW5kaWZmZXJlbmNlIHVwb24gdGhlaXIgYmFkIGFuZCBwZXJpbG91cyBwbGFucywgYnV0IGRpZCBwcmVjaXNlbHkgd2hhdCBBcmlzdGlkZXMgaXMgc28gaGlnaGx5IHByYWlzZWQgZm9yIGRvaW5nIHRvIFRoZW1pc3RvY2xlczogaGUgY2FtZSB0byB0aGUgbWVuIHdobyB3ZXJlIHRoZW4gaW4gY29tbWFuZCwgYWx0aG91Z2ggdGhleSB3ZXJlIG5vdCBoaXMgZnJpZW5kcywgYW5kIHRvbGQgdGhlbSBwbGFpbmx5IHdoYXQgdGhleSBvdWdodCB0byBkby4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hcmNpdXMsIGhvd2V2ZXIsIGluIHRoZSBmaXJzdCBwbGFjZSwgZGlkIGluanVyeSB0byBoaXMgd2hvbGUgY2l0eSwgYWx0aG91Z2ggaGUgaGFkIG5vdCBiZWVuIGluanVyZWQgYnkgdGhlIHdob2xlIG9mIGl0LCBidXQgdGhlIGJlc3QgYW5kIHN0cm9uZ2VzdCBwYXJ0IG9mIGl0IHNoYXJlZCBoaXMgd3JvbmdzIGFuZCBoaXMgZGlzdHJlc3M7IGluIHRoZSBzZWNvbmQgcGxhY2UsIGJ5IHJlc2lzdGluZyBhbmQgbm90IHlpZWxkaW5nIHRvIHRoZSBtYW55IGVtYmFzc2llcyBhbmQgc3VwcGxpY2F0aW9ucyB3aXRoIHdoaWNoIGhpcyBjb3VudHJ5bWVuIHRyaWVkIHRvIGhlYWwgaGlzIHNpbmdsZSB3cmF0aCBhbmQgZm9sbHksIGhlIG1hZGUgaXQgY2xlYXIgdGhhdCBoZSBoYWQgdW5kZXJ0YWtlbiBhIGZpZXJjZSBhbmQgaW1wbGFjYWJsZSB3YXIgZm9yIHRoZSBvdmVydGhyb3cgYW5kIGRlc3RydWN0aW9uIG9mIGhpcyBjb3VudHJ5LCBub3QgdGhhdCBoZSBtaWdodCByZWNvdmVyIGFuZCByZWdhaW4gaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXIsIGluIHRoaXMgcG9pbnQgaXQgbWF5IGJlIHNhaWQgdGhlcmUgd2FzIGEgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZW0sIG5hbWVseSwgdGhhdCBBbGNpYmlhZGVzLCB3aGVuIGhlIHdlbnQgb3ZlciB0byB0aGUgc2lkZSBvZiB0aGUgQXRoZW5pYW5zLCB3YXMgbW92ZWQgYnkgZmVhciBhbmQgaGF0cmVkIG9mIHRoZSBTcGFydGFucywgd2hvIHdlcmUgcGxvdHRpbmcgdG8gdGFrZSBoaXMgbGlmZTsgd2hlcmVhcyBpdCB3YXMgZGlzaG9ub3VyYWJsZSBmb3IgTWFyY2l1cyB0byBsZWF2ZSB0aGUgVm9sc2NpYW5zIGluIHRoZSBsdXJjaCB3aGVuIHRoZXkgd2VyZSB0cmVhdGluZyBoaW0gd2l0aCBwZXJmZWN0IGZhaXJuZXNzLiBGb3IgaGUgd2FzIGFwcG9pbnRlZCB0aGVpciBsZWFkZXIsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYWQgdGhlIGdyZWF0ZXN0IGNyZWRpdCBhbmQgaW5mbHVlbmNlIGFtb25nIHRoZW0sIHVubGlrZSBBbGNpYmlhZGVzLCB3aG9tIHRoZSBMYWNlZGFlbW9uaWFucyBtaXN1c2VkIHJhdGhlciB0aGFuIHVzZWQsIHdobyB3YW5kZXJlZCBhYm91dCBhaW1sZXNzbHkgaW4gdGhlaXIgY2l0eSwgYW5kIGFnYWluIHdhcyB0b3NzZWQgdG8gYW5kIGZybyBpbiB0aGVpciBjYW1wLCBhbmQgYXQgbGFzdCB0aHJldyBoaW1zZWxmIGludG8gdGhlIGhhbmRzIG9mIFRpc3NhcGhlcm5lczsgdW5sZXNzLCBpbmRlZWQsIGhlIHdhcyBhbGwgdGhlIHdoaWxlIHBheWluZyBoaW0gY291cnQgaW4gb3JkZXIgdGhhdCB0aGUgQXRoZW5zIHRvIHdoaWNoIGhlIGxvbmdlZCB0byByZXR1cm4gbWlnaHQgbm90IGJlIHV0dGVybHkgZGVzdHJveWVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBpbiB0aGUgbWF0dGVyIG9mIG1vbmV5LCB3ZSBhcmUgdG9sZCB0aGF0IEFsY2liaWFkZXMgb2Z0ZW4gZ290IGl0IGlsbCBieSB0YWtpbmcgYnJpYmVzLCBhbmQgc3BlbnQgaXQgaWxsIGluIGx1eHVyeSBhbmQgZGlzc2lwYXRpb247IHdoZXJlYXMgTWFyY2l1cyBjb3VsZCBub3QgYmUgcGVyc3VhZGVkIHRvIHRha2UgaXQgZXZlbiB3aGVuIGl0IHdhcyBvZmZlcmVkIHRvIGhpbSBhcyBhbiBob25vdXIgYnkgaGlzIGNvbW1hbmRlcnMuCgkJCQlBbmQgZm9yIHRoaXMgcmVhc29uIGhlIHdhcyBlc3BlY2lhbGx5IG9kaW91cyB0byB0aGUgbXVsdGl0dWRlIGluIHRoZSBkaXNwdXRlcyB3aXRoIHRoZSBwZW9wbGUgY29uY2VybmluZyBkZWJ0cywgYmVjYXVzZSB0aGV5IHNhdyB0aGF0IGl0IHdhcyBub3QgZm9yIGdhaW4sIGJ1dCBvdXQgb2YgaW5zb2xlbmNlIGFuZCBzY29ybiwgdGhhdCBoZSBhY3RlZCBkZXNwaXRlZnVsbHkgdG93YXJkcyB0aGUgcG9vci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgaW4gdGhlIG1hdHRlciBvZiBtb25leSwgd2UgYXJlIHRvbGQgdGhhdCBBbGNpYmlhZGVzIG9mdGVuIGdvdCBpdCBpbGwgYnkgdGFraW5nIGJyaWJlcywgYW5kIHNwZW50IGl0IGlsbCBpbiBsdXh1cnkgYW5kIGRpc3NpcGF0aW9uOyB3aGVyZWFzIE1hcmNpdXMgY291bGQgbm90IGJlIHBlcnN1YWRlZCB0byB0YWtlIGl0IGV2ZW4gd2hlbiBpdCB3YXMgb2ZmZXJlZCB0byBoaW0gYXMgYW4gaG9ub3VyIGJ5IGhpcyBjb21tYW5kZXJzLgoJCQkJQW5kIGZvciB0aGlzIHJlYXNvbiBoZSB3YXMgZXNwZWNpYWxseSBvZGlvdXMgdG8gdGhlIG11bHRpdHVkZSBpbiB0aGUgZGlzcHV0ZXMgd2l0aCB0aGUgcGVvcGxlIGNvbmNlcm5pbmcgZGVidHMsIGJlY2F1c2UgdGhleSBzYXcgdGhhdCBpdCB3YXMgbm90IGZvciBnYWluLCBidXQgb3V0IG9mIGluc29sZW5jZSBhbmQgc2Nvcm4sIHRoYXQgaGUgYWN0ZWQgZGVzcGl0ZWZ1bGx5IHRvd2FyZHMgdGhlIHBvb3IuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFudGlwYXRlciwgd3JpdGluZyBpbiBvbmUgb2YgaGlzIGxldHRlcnMgYWJvdXQgdGhlIGRlYXRoIG9mIEFyaXN0b3RsZSB0aGUgcGhpbG9zb3BoZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDb21wLiBBcmlzdGlkLiBDYXQuIDIuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Db21wYXJpc29uIG9mIEFyaXN0aWRlcyBhbmQgQ2F0bzwvdGl0bGU+LCBpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gc2F5czogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiBhZGRpdGlvbiB0byBhbGwgaGlzIG90aGVyIGdpZnRzLCB0aGUgbWFuIGhhZCBhbHNvIHRoYXQgb2YgcGVyc3Vhc2lvbjwvcT47IGFuZCB0aGUgYWJzZW5jZSBvZiB0aGlzIGdpZnQgaW4gTWFyY2l1cyBtYWRlIGhpcyBncmVhdCBkZWVkcyBhbmQgdmlydHVlcyBvYm5veGlvdXMgdG8gdGhlIHZlcnkgbWVuIHdob20gdGhleSBiZW5lZml0ZWQsIHNpbmNlIHRoZXkgY291bGQgbm90IGVuZHVyZSB0aGUgYXJyb2dhbnQgcHJpZGUgb2YgdGhlIG1hbiwgYW5kIHRoYXQgc2VsZi13aWxsIHdoaWNoIGlzLCBhcyBQbGF0byBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8dGl0bGU+Q29yaW9sYW51czwvdGl0bGU+LCB4di4gNC48L25vdGU+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgY29tcGFuaW9uIG9mIHNvbGl0dWRlLjwvcT4gQWxjaWJpYWRlcywgb24gdGhlIGNvbnRyYXJ5LCB1bmRlcnN0b29kIGhvdyB0byB0cmVhdCBpbiBhIGZyaWVuZGx5IG1hbm5lciB0aG9zZSB3aG8gbWV0IGhpbSwgYXJpZCB3ZSBjYW5ub3Qgd29uZGVyIHRoYXQgd2hlbiBoZSB3YXMgc3VjY2Vzc2Z1bCBoaXMgZmFtZSB3YXMgYXR0ZW5kZWQgd2l0aCBnb29kd2lsbCBhbmQgaG9ub3VyLCBhbmQgZmxvd2VyZWQgbHV4dXJpYW50bHksIHNpbmNlIHNvbWUgb2YgaGlzIGVycm9ycyBldmVuIGhhZCBvZnRlbiBjaGFybSBhbmQgZmVsaWNpdHkuCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgdGhlIHJlYXNvbiB3aHksIGluIHNwaXRlIG9mIHRoZSBncmVhdCBhbmQgZnJlcXVlbnQgaGFybSBkb25lIGJ5IGhpbSB0byB0aGUgY2l0eSwgaGUgd2FzIG5ldmVydGhlbGVzcyBtYW55IHRpbWVzIGFwcG9pbnRlZCBsZWFkZXIgYW5kIGdlbmVyYWw7IHdoaWxlIE1hcmNpdXMsIHdoZW4gaGUgc3Rvb2QgZm9yIGFuIG9mZmljZSB3aGljaCB3YXMgaGlzIGR1ZSBpbiB2aWV3IG9mIGhpcyB2YWxvcm91cyBhY2hpZXZlbWVudHMsIHdhcyBkZWZlYXRlZC4gQW5kIHNvIGl0IHdhcyB0aGF0IHRoZSBvbmUgY291bGQgbm90IG1ha2UgaGltc2VsZiBoYXRlZCBieSBoaXMgY291bnRyeW1lbiwgZXZlbiB3aGVuIGhlIHdhcyBkb2luZyB0aGVtIGhhcm07IHdoaWxlIHRoZSBvdGhlciB3YXMgYWZ0ZXIgYWxsIG5vdCBiZWxvdmVkLCBldmVuIHdoaWxlIGhlIHdhcyBhZG1pcmVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFudGlwYXRlciwgd3JpdGluZyBpbiBvbmUgb2YgaGlzIGxldHRlcnMgYWJvdXQgdGhlIGRlYXRoIG9mIEFyaXN0b3RsZSB0aGUgcGhpbG9zb3BoZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ29tcC4gQXJpc3RpZC4gQ2F0LiAyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wYXJpc29uIG9mIEFyaXN0aWRlcyBhbmQgQ2F0bzwvdGl0bGU+LCBpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gc2F5czogCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDb21wLiBBcmlzdGlkLiBDYXQuIDIuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbXBhcmlzb24gb2YgQXJpc3RpZGVzIGFuZCBDYXRvPC90aXRsZT4sIGlpLiA0LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tcGFyaXNvbiBvZiBBcmlzdGlkZXMgYW5kIENhdG88L3RpdGxlPiwgaWkuIDQuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiBhZGRpdGlvbiB0byBhbGwgaGlzIG90aGVyIGdpZnRzLCB0aGUgbWFuIGhhZCBhbHNvIHRoYXQgb2YgcGVyc3Vhc2lvbjwvcT47IGFuZCB0aGUgYWJzZW5jZSBvZiB0aGlzIGdpZnQgaW4gTWFyY2l1cyBtYWRlIGhpcyBncmVhdCBkZWVkcyBhbmQgdmlydHVlcyBvYm5veGlvdXMgdG8gdGhlIHZlcnkgbWVuIHdob20gdGhleSBiZW5lZml0ZWQsIHNpbmNlIHRoZXkgY291bGQgbm90IGVuZHVyZSB0aGUgYXJyb2dhbnQgcHJpZGUgb2YgdGhlIG1hbiwgYW5kIHRoYXQgc2VsZi13aWxsIHdoaWNoIGlzLCBhcyBQbGF0byBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvcmlvbGFudXM8L3RpdGxlPiwgeHYuIDQuPC9ub3RlPiAKCQkJCSAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29yaW9sYW51czwvdGl0bGU+LCB4di4gNC48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSBjb21wYW5pb24gb2Ygc29saXR1ZGUuPC9xPiBBbGNpYmlhZGVzLCBvbiB0aGUgY29udHJhcnksIHVuZGVyc3Rvb2QgaG93IHRvIHRyZWF0IGluIGEgZnJpZW5kbHkgbWFubmVyIHRob3NlIHdobyBtZXQgaGltLCBhcmlkIHdlIGNhbm5vdCB3b25kZXIgdGhhdCB3aGVuIGhlIHdhcyBzdWNjZXNzZnVsIGhpcyBmYW1lIHdhcyBhdHRlbmRlZCB3aXRoIGdvb2R3aWxsIGFuZCBob25vdXIsIGFuZCBmbG93ZXJlZCBsdXh1cmlhbnRseSwgc2luY2Ugc29tZSBvZiBoaXMgZXJyb3JzIGV2ZW4gaGFkIG9mdGVuIGNoYXJtIGFuZCBmZWxpY2l0eS4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSByZWFzb24gd2h5LCBpbiBzcGl0ZSBvZiB0aGUgZ3JlYXQgYW5kIGZyZXF1ZW50IGhhcm0gZG9uZSBieSBoaW0gdG8gdGhlIGNpdHksIGhlIHdhcyBuZXZlcnRoZWxlc3MgbWFueSB0aW1lcyBhcHBvaW50ZWQgbGVhZGVyIGFuZCBnZW5lcmFsOyB3aGlsZSBNYXJjaXVzLCB3aGVuIGhlIHN0b29kIGZvciBhbiBvZmZpY2Ugd2hpY2ggd2FzIGhpcyBkdWUgaW4gdmlldyBvZiBoaXMgdmFsb3JvdXMgYWNoaWV2ZW1lbnRzLCB3YXMgZGVmZWF0ZWQuIEFuZCBzbyBpdCB3YXMgdGhhdCB0aGUgb25lIGNvdWxkIG5vdCBtYWtlIGhpbXNlbGYgaGF0ZWQgYnkgaGlzIGNvdW50cnltZW4sIGV2ZW4gd2hlbiBoZSB3YXMgZG9pbmcgdGhlbSBoYXJtOyB3aGlsZSB0aGUgb3RoZXIgd2FzIGFmdGVyIGFsbCBub3QgYmVsb3ZlZCwgZXZlbiB3aGlsZSBoZSB3YXMgYWRtaXJlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgTWFyY2l1cyBkaWQgbm90LCBhcyBhIGNvbW1hbmRlciwgb2J0YWluIGFueSBncmVhdCBzdWNjZXNzZXMgZm9yIGhpcyBjaXR5LCBidXQgb25seSBmb3IgaGlzIGVuZW1pZXMgYWdhaW5zdCBoaXMgY291bnRyeTsgd2hlcmVhcyBBbGNpYmlhZGVzIHdhcyBvZnRlbiBvZiBzZXJ2aWNlIHRvIHRoZSBBdGhlbmlhbnMsIGJvdGggYXMgYSBwcml2YXRlIHNvbGRpZXIgYW5kIGFzIGEgY29tbWFuZGVyLiAgV2hlbiBoZSB3YXMgYXQgaG9tZSwgaGUgbWFzdGVyZWQgaGlzIGFkdmVyc2FyaWVzIHRvIGhpcyBoZWFydCdzIGNvbnRlbnQ7IGl0IHdhcyB3aGVuIGhlIHdhcyBhYnNlbnQgdGhhdCB0aGVpciBjYWx1bW5pZXMgcHJldmFpbGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5NYXJjaXVzLCBvbiB0aGUgIGNvbnRyYXJ5LCB3YXMgd2l0aCAgdGhlIFJvbWFucyB3aGVuIHRoZXkgY29uZGVtbmVkIGhpbSwgYW5kIHdpdGggdGhlIFZvbHNjaWFucyB3aGVuIHRoZXkgc2xldyBoaW0uIFRoZSBkZWVkIHdhcyBub3QgaW4gYWNjb3JkYW5jZSB3aXRoIGp1c3RpY2Ugb3IgcmlnaHQsIGl0IGlzIHRydWUsIGFuZCB5ZXQgaGlzIG93biBhY3RzIHN1cHBsaWVkIGFuIGV4Y3VzZSBmb3IgaXQsIGJlY2F1c2UsIGFmdGVyIHJlamVjdGluZyB0aGUgdGVybXMgb2YgcGVhY2UgcHVibGljbHkgb2ZmZXJlZCwgYW5kIHN1ZmZlcmluZyBoaW1zZWxmIHRvIGJlIHBlcnN1YWRlZCBieSB0aGUgcHJpdmF0ZSBzb2xpY2l0YXRpb25zIG9mIHRoZSB3b21lbiwgaGUgZGlkIG5vdCBwdXQgYW4gZW5kIHRvIGhvc3RpbGl0aWVzLCBidXQgYWxsb3dlZCB0aGUgd2FyIHRvIGNvbnRpbnVlLCB3aGlsZSBoZSB0aHJldyBhd2F5IGZvciBldmVyIGl0cyBnb2xkZW4gb3Bwb3J0dW5pdHkuCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIHNob3VsZCBoYXZlIHdvbiB0aGUgY29uc2VudCBvZiB0aG9zZSB3aG8gaGFkIHB1dCB0aGVpciB0cnVzdCBpbiBoaW0sIGJlZm9yZSByZXRpcmluZyBmcm9tIGhpcyBwb3NpdGlvbiwgaWYgaGUgaGFkIHRoZSBoaWdoZXN0IHJlZ2FyZCBmb3IgdGhlaXIganVzdCBjbGFpbXMgdXBvbiBoaW0uIElmLCBvbiB0aGUgb3RoZXIgaGFuZCwgaGUgY2FyZWQgbm90aGluZyBmb3IgdGhlIFZvbHNjaWFucywgYnV0IHdhcyBwcm9zZWN1dGluZyB0aGUgd2FyIG1lcmVseSB0byBzYXRpc2Z5IGhpcyBvd24gYW5nZXIsIGFuZCB0aGVuIHN0b3BwZWQgaXQgYWJydXB0bHksIHRoZSBob25vdXJhYmxlIGNvdXJzZSBoYWQgYmVlbiwgbm90IHRvIHNwYXJlIGhpcyBjb3VudHJ5IGZvciBoaXMgbW90aGVyJ3Mgc2FrZSwgYnV0IGhpcyBtb3RoZXIgdG9nZXRoZXIgd2l0aCBoaXMgY291bnRyeTsgc2luY2UgaGlzIG1vdGhlciBhbmQgaGlzIHdpZmUgd2VyZSBwYXJ0IGFuZCBwYXJjZWwgb2YgdGhlIG5hdGl2ZSBjaXR5IHdoaWNoIGhlIHdhcyBiZXNpZWdpbmcuCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIGdpdmluZyBoYXJzaCB0cmVhdG1lbnQgdG8gcHVibGljIHN1cHBsaWNhdGlvbnMsIGVudHJlYXRpZXMgb2YgZW1iYXNzaWVzLCBhbmQgcHJheWVycyBvZiBwcmllc3RzLCB0aGVuIHRvIGNvbmNlZGUgaGlzIHdpdGhkcmF3YWwgYXMgYSBmYXZvdXIgdG8gaGlzIG1vdGhlciwgd2FzIG5vdCBzbyBtdWNoIGFuIGhvbm91ciB0byB0aGF0IG1vdGhlciwgYXMgaXQgd2FzIGEgZGlzaG9ub3IgdG8gaGlzIGNvdW50cnksIHdoaWNoIHdhcyB0aHVzIHNhdmVkIGJ5IHRoZSBwaXRpZnVsIGludGVyY2Vzc2lvbiBvZiBhIHNpbmdsZSB3b21hbiwgYW5kIGhlbGQgdW53b3J0aHkgb2Ygc2FsdmF0aW9uIGZvciBpdHMgb3duIHNha2UuICBTdXJlbHkgdGhlIGZhdm91ciB3YXMgaW52aWRpb3VzLCBhbmQgaGFyc2gsIGFuZCByZWFsbHkgbm8gZmF2b3VyIGF0IGFsbCwgYW5kIHVuYWNjZXB0YWJsZSB0byBib3RoIHBhcnRpZXM7IGZvciBoZSByZXRpcmVkIHdpdGhvdXQgbGlzdGVuaW5nIHRvIHRoZSBwZXJzdWFzaW9ucyBvZiBoaXMgYW50YWdvbmlzdHMsIGFuZCB3aXRob3V0IGdhaW5pbmcgdGhlIGNvbnNlbnQgb2YgaGlzIGNvbXJhZGVzLWluLWFybXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgTWFyY2l1cyBkaWQgbm90LCBhcyBhIGNvbW1hbmRlciwgb2J0YWluIGFueSBncmVhdCBzdWNjZXNzZXMgZm9yIGhpcyBjaXR5LCBidXQgb25seSBmb3IgaGlzIGVuZW1pZXMgYWdhaW5zdCBoaXMgY291bnRyeTsgd2hlcmVhcyBBbGNpYmlhZGVzIHdhcyBvZnRlbiBvZiBzZXJ2aWNlIHRvIHRoZSBBdGhlbmlhbnMsIGJvdGggYXMgYSBwcml2YXRlIHNvbGRpZXIgYW5kIGFzIGEgY29tbWFuZGVyLiAgV2hlbiBoZSB3YXMgYXQgaG9tZSwgaGUgbWFzdGVyZWQgaGlzIGFkdmVyc2FyaWVzIHRvIGhpcyBoZWFydCdzIGNvbnRlbnQ7IGl0IHdhcyB3aGVuIGhlIHdhcyBhYnNlbnQgdGhhdCB0aGVpciBjYWx1bW5pZXMgcHJldmFpbGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1hcmNpdXMsIG9uIHRoZSAgY29udHJhcnksIHdhcyB3aXRoICB0aGUgUm9tYW5zIHdoZW4gdGhleSBjb25kZW1uZWQgaGltLCBhbmQgd2l0aCB0aGUgVm9sc2NpYW5zIHdoZW4gdGhleSBzbGV3IGhpbS4gVGhlIGRlZWQgd2FzIG5vdCBpbiBhY2NvcmRhbmNlIHdpdGgganVzdGljZSBvciByaWdodCwgaXQgaXMgdHJ1ZSwgYW5kIHlldCBoaXMgb3duIGFjdHMgc3VwcGxpZWQgYW4gZXhjdXNlIGZvciBpdCwgYmVjYXVzZSwgYWZ0ZXIgcmVqZWN0aW5nIHRoZSB0ZXJtcyBvZiBwZWFjZSBwdWJsaWNseSBvZmZlcmVkLCBhbmQgc3VmZmVyaW5nIGhpbXNlbGYgdG8gYmUgcGVyc3VhZGVkIGJ5IHRoZSBwcml2YXRlIHNvbGljaXRhdGlvbnMgb2YgdGhlIHdvbWVuLCBoZSBkaWQgbm90IHB1dCBhbiBlbmQgdG8gaG9zdGlsaXRpZXMsIGJ1dCBhbGxvd2VkIHRoZSB3YXIgdG8gY29udGludWUsIHdoaWxlIGhlIHRocmV3IGF3YXkgZm9yIGV2ZXIgaXRzIGdvbGRlbiBvcHBvcnR1bml0eS4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBzaG91bGQgaGF2ZSB3b24gdGhlIGNvbnNlbnQgb2YgdGhvc2Ugd2hvIGhhZCBwdXQgdGhlaXIgdHJ1c3QgaW4gaGltLCBiZWZvcmUgcmV0aXJpbmcgZnJvbSBoaXMgcG9zaXRpb24sIGlmIGhlIGhhZCB0aGUgaGlnaGVzdCByZWdhcmQgZm9yIHRoZWlyIGp1c3QgY2xhaW1zIHVwb24gaGltLiBJZiwgb24gdGhlIG90aGVyIGhhbmQsIGhlIGNhcmVkIG5vdGhpbmcgZm9yIHRoZSBWb2xzY2lhbnMsIGJ1dCB3YXMgcHJvc2VjdXRpbmcgdGhlIHdhciBtZXJlbHkgdG8gc2F0aXNmeSBoaXMgb3duIGFuZ2VyLCBhbmQgdGhlbiBzdG9wcGVkIGl0IGFicnVwdGx5LCB0aGUgaG9ub3VyYWJsZSBjb3Vyc2UgaGFkIGJlZW4sIG5vdCB0byBzcGFyZSBoaXMgY291bnRyeSBmb3IgaGlzIG1vdGhlcidzIHNha2UsIGJ1dCBoaXMgbW90aGVyIHRvZ2V0aGVyIHdpdGggaGlzIGNvdW50cnk7IHNpbmNlIGhpcyBtb3RoZXIgYW5kIGhpcyB3aWZlIHdlcmUgcGFydCBhbmQgcGFyY2VsIG9mIHRoZSBuYXRpdmUgY2l0eSB3aGljaCBoZSB3YXMgYmVzaWVnaW5nLgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBnaXZpbmcgaGFyc2ggdHJlYXRtZW50IHRvIHB1YmxpYyBzdXBwbGljYXRpb25zLCBlbnRyZWF0aWVzIG9mIGVtYmFzc2llcywgYW5kIHByYXllcnMgb2YgcHJpZXN0cywgdGhlbiB0byBjb25jZWRlIGhpcyB3aXRoZHJhd2FsIGFzIGEgZmF2b3VyIHRvIGhpcyBtb3RoZXIsIHdhcyBub3Qgc28gbXVjaCBhbiBob25vdXIgdG8gdGhhdCBtb3RoZXIsIGFzIGl0IHdhcyBhIGRpc2hvbm9yIHRvIGhpcyBjb3VudHJ5LCB3aGljaCB3YXMgdGh1cyBzYXZlZCBieSB0aGUgcGl0aWZ1bCBpbnRlcmNlc3Npb24gb2YgYSBzaW5nbGUgd29tYW4sIGFuZCBoZWxkIHVud29ydGh5IG9mIHNhbHZhdGlvbiBmb3IgaXRzIG93biBzYWtlLiAgU3VyZWx5IHRoZSBmYXZvdXIgd2FzIGludmlkaW91cywgYW5kIGhhcnNoLCBhbmQgcmVhbGx5IG5vIGZhdm91ciBhdCBhbGwsIGFuZCB1bmFjY2VwdGFibGUgdG8gYm90aCBwYXJ0aWVzOyBmb3IgaGUgcmV0aXJlZCB3aXRob3V0IGxpc3RlbmluZyB0byB0aGUgcGVyc3Vhc2lvbnMgb2YgaGlzIGFudGFnb25pc3RzLCBhbmQgd2l0aG91dCBnYWluaW5nIHRoZSBjb25zZW50IG9mIGhpcyBjb21yYWRlcy1pbi1hcm1zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY2F1c2Ugb2YgYWxsIHRoaXMgbGF5IGluIGhpcyB1bnNvY2lhYmxlLCB2ZXJ5IG92ZXJ3ZWVuaW5nLCBhbmQgc2VsZi13aWxsZWQgZGlzcG9zaXRpb24sIHdoaWNoIG9mIGl0c2VsZiBpcyBvZmZlbnNpdmUgdG8gbW9zdCBwZW9wbGUsIGFuZCB3aGVuIGNvbWJpbmVkIHdpdGggYW4gYW1iaXRpb3VzIHNwaXJpdCwgYmVjb21lcyBhbHRvZ2V0aGVyIHNhdmFnZSBhbmQgaW1wbGFjYWJsZS4gIFN1Y2ggbWVuIHBheSBubyBjb3VydCB0byB0aGUgbXVsdGl0dWRlLCBwcm9mZXNzaW5nIG5vdCB0byB3YW50IHRoZWlyIGhvbm91cnMsIGFuZCB0aGVuIGFyZSB2ZXhlZCBpZiB0aGV5IGRvIG5vdCBnZXQgdGhlbS4gIENlcnRhaW5seSB0aGVyZSB3YXMgbm8gdGVuZGVuY3kgdG8gaW1wb3J0dW5lIG9yIGNvdXJ0IHRoZSBmYXZvdXIgb2YgdGhlIG11bHRpdHVkZSBpbiBtZW4gbGlrZSBNZXRlbGx1cywgQXJpc3RpZGVzLCBhbmQgRXBhbWlub25kYXM7IAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBvd2luZyB0byB0aGVpciBnZW51aW5lIGNvbnRlbXB0IGZvciB3aGF0IGEgcGVvcGxlIGhhcyB0aGUgcG93ZXIgdG8gZ2l2ZSBhbmQgdGFrZSBhd2F5LCB0aG91Z2ggdGhleSB3ZXJlIHJlcGVhdGVkbHkgb3N0cmFjaXNlZCwgZGVmZWF0ZWQgYXQgZWxlY3Rpb25zLCBhbmQgY29uZGVtbmVkIGluIGNvdXJ0cyBvZiBqdXN0aWNlLCB0aGV5IGNoZXJpc2hlZCBubyBhbmdlciBhZ2FpbnN0IHRoZWlyIGNvdW50cnltZW4gZm9yIHRoZWlyIGluZ3JhdGl0dWRlLCBidXQgc2hvd2VkIHRoZW0ga2luZG5lc3MgYWdhaW4gd2hlbiB0aGV5IHJlcGVudGVkLCBhbmQgd2VyZSByZWNvbmNpbGVkIHdpdGggdGhlbSB3aGVuIHRoZXkgYXNrZWQgaXQuICBTdXJlbHkgaGUgd2hvIGxlYXN0IGNvdXJ0cyB0aGUgcGVvcGxlJ3MgZmF2b3VyLCBvdWdodCBsZWFzdCB0byByZXNlbnQgdGhlaXIgbmVnbGVjdCwgc2luY2UgdmV4YXRpb24gb3ZlciBmYWlsdXJlIHRvIHJlY2VpdmUgdGhlaXIgaG9ub3VycyBpcyBtb3N0IGFwdCB0byBzcHJpbmcgZnJvbSBhbiBleGNlc3NpdmUgbG9uZ2luZyBhZnRlciB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjYXVzZSBvZiBhbGwgdGhpcyBsYXkgaW4gaGlzIHVuc29jaWFibGUsIHZlcnkgb3ZlcndlZW5pbmcsIGFuZCBzZWxmLXdpbGxlZCBkaXNwb3NpdGlvbiwgd2hpY2ggb2YgaXRzZWxmIGlzIG9mZmVuc2l2ZSB0byBtb3N0IHBlb3BsZSwgYW5kIHdoZW4gY29tYmluZWQgd2l0aCBhbiBhbWJpdGlvdXMgc3Bpcml0LCBiZWNvbWVzIGFsdG9nZXRoZXIgc2F2YWdlIGFuZCBpbXBsYWNhYmxlLiAgU3VjaCBtZW4gcGF5IG5vIGNvdXJ0IHRvIHRoZSBtdWx0aXR1ZGUsIHByb2Zlc3Npbmcgbm90IHRvIHdhbnQgdGhlaXIgaG9ub3VycywgYW5kIHRoZW4gYXJlIHZleGVkIGlmIHRoZXkgZG8gbm90IGdldCB0aGVtLiAgQ2VydGFpbmx5IHRoZXJlIHdhcyBubyB0ZW5kZW5jeSB0byBpbXBvcnR1bmUgb3IgY291cnQgdGhlIGZhdm91ciBvZiB0aGUgbXVsdGl0dWRlIGluIG1lbiBsaWtlIE1ldGVsbHVzLCBBcmlzdGlkZXMsIGFuZCBFcGFtaW5vbmRhczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBvd2luZyB0byB0aGVpciBnZW51aW5lIGNvbnRlbXB0IGZvciB3aGF0IGEgcGVvcGxlIGhhcyB0aGUgcG93ZXIgdG8gZ2l2ZSBhbmQgdGFrZSBhd2F5LCB0aG91Z2ggdGhleSB3ZXJlIHJlcGVhdGVkbHkgb3N0cmFjaXNlZCwgZGVmZWF0ZWQgYXQgZWxlY3Rpb25zLCBhbmQgY29uZGVtbmVkIGluIGNvdXJ0cyBvZiBqdXN0aWNlLCB0aGV5IGNoZXJpc2hlZCBubyBhbmdlciBhZ2FpbnN0IHRoZWlyIGNvdW50cnltZW4gZm9yIHRoZWlyIGluZ3JhdGl0dWRlLCBidXQgc2hvd2VkIHRoZW0ga2luZG5lc3MgYWdhaW4gd2hlbiB0aGV5IHJlcGVudGVkLCBhbmQgd2VyZSByZWNvbmNpbGVkIHdpdGggdGhlbSB3aGVuIHRoZXkgYXNrZWQgaXQuICBTdXJlbHkgaGUgd2hvIGxlYXN0IGNvdXJ0cyB0aGUgcGVvcGxlJ3MgZmF2b3VyLCBvdWdodCBsZWFzdCB0byByZXNlbnQgdGhlaXIgbmVnbGVjdCwgc2luY2UgdmV4YXRpb24gb3ZlciBmYWlsdXJlIHRvIHJlY2VpdmUgdGhlaXIgaG9ub3VycyBpcyBtb3N0IGFwdCB0byBzcHJpbmcgZnJvbSBhbiBleGNlc3NpdmUgbG9uZ2luZyBhZnRlciB0aGVtLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIEFsY2liaWFkZXMgd291bGQgbm90IGRlbnkgdGhhdCBoZSByZWpvaWNlZCB0byBiZSBob25vdXJlZCwgYW5kIHdhcyBkaXNwbGVhc2VkIHRvIGJlIG92ZXJsb29rZWQsIGFuZCBoZSB0aGVyZWZvcmUgdHJpZWQgdG8gYmUgYWdyZWVhYmxlIGFuZCBwbGVhc2FudCB0byBoaXMgYXNzb2NpYXRlczsgYnV0IHRoZSBvdmVyd2VlbmluZyBwcmlkZSBvZiBNYXJjaXVzIHdvdWxkIG5vdCBzdWZmZXIgaGltIHRvIHBheSBjb3VydCB0byB0aG9zZSB3aG8gaGFkIHRoZSBwb3dlciB0byBob25vdXIgYW5kIGFkdmFuY2UgaGltLCB3aGlsZSBoaXMgYW1iaXRpb24gbWFkZSBoaW0gZmVlbCBhbmdyeSBhbmQgaHVydCB3aGVuIGhlIHdhcyBuZWdsZWN0ZWQuICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBhcmUgdGhlIGJsYW1lLXdvcnRoeSB0cmFpdHMgaW4gdGhlIG1hbiwgYnV0IGFsbCB0aGUgcmVzdCBhcmUgYnJpbGxpYW50LiBBbmQgZm9yIGhpcyB0ZW1wZXJhbmNlIGFuZCBzdXBlcmlvcml0eSB0byB3ZWFsdGggaGUgZGVzZXJ2ZXMgdG8gYmUgY29tcGFyZWQgd2l0aCB0aGUgYmVzdCBhbmQgcHVyZXN0IG9mIHRoZSBHcmVla3MsIG5vdCB3aXRoIEFsY2liaWFkZXMsIHdobywgaW4gdGhlc2UgcmVnYXJkcywgd2FzIHRoZSBtb3N0IHVuc2NydXB1bG91cyBvZiBtZW4sIGFuZCB0aGUgbW9zdCBjYXJlbGVzcyBvZiB0aGUgY2xhaW1zIG9mIGhvbm91ci4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCBBbGNpYmlhZGVzIHdvdWxkIG5vdCBkZW55IHRoYXQgaGUgcmVqb2ljZWQgdG8gYmUgaG9ub3VyZWQsIGFuZCB3YXMgZGlzcGxlYXNlZCB0byBiZSBvdmVybG9va2VkLCBhbmQgaGUgdGhlcmVmb3JlIHRyaWVkIHRvIGJlIGFncmVlYWJsZSBhbmQgcGxlYXNhbnQgdG8gaGlzIGFzc29jaWF0ZXM7IGJ1dCB0aGUgb3ZlcndlZW5pbmcgcHJpZGUgb2YgTWFyY2l1cyB3b3VsZCBub3Qgc3VmZmVyIGhpbSB0byBwYXkgY291cnQgdG8gdGhvc2Ugd2hvIGhhZCB0aGUgcG93ZXIgdG8gaG9ub3VyIGFuZCBhZHZhbmNlIGhpbSwgd2hpbGUgaGlzIGFtYml0aW9uIG1hZGUgaGltIGZlZWwgYW5ncnkgYW5kIGh1cnQgd2hlbiBoZSB3YXMgbmVnbGVjdGVkLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
