var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG9zZSB3aG8gY29tcHV0ZSB0aGUgdGltZSBieSB0aGUgc3VjY2Vzc2lvbnMgb2Yga2luZ3MgYXQgU3BhcnRhLCBsaWtlIEVyYXRvc3RoZW5lcyBhbmQgQXBvbGxvZG9ydXMsIHByb3ZlIHRoYXQgTHljdXJndXMgd2FzIG1hbnkgeWVhcnMgZWFybGllciB0aGFuIHRoZSBmaXJzdCBPbHltcGlhZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjc3Ni03MyBCLkMuPC9ub3RlPiBBbmQgVGltYWV1cyBjb25qZWN0dXJlcyB0aGF0IHRoZXJlIHdlcmUgdHdvIEx5Y3VyZ3VzIGF0IFNwYXJ0YSwgYXQgZGlmZmVyZW50IHRpbWVzLCBhbmQgdGhhdCB0byBvbmUgb2YgdGhlbSB0aGUgYWNoaWV2ZW1lbnRzIG9mIGJvdGggd2VyZSBhc2NyaWJlZCwgb3dpbmcgdG8gaGlzIGdyZWF0ZXIgZmFtZTsgaGUgdGhpbmtzIGFsc28gdGhhdCB0aGUgZWxkZXIgb2YgdGhlIHR3byBsaXZlZCBub3QgZmFyIGZyb20gdGhlIHRpbWVzIG9mIEhvbWVyLCBhbmQgc29tZSBhc3NlcnQgdGhhdCBoZSBhY3R1YWxseSBtZXQgSG9tZXIgZmFjZSB0byBmYWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlhlbm9waG9uLCBhbHNvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQ29uc3QuIExhYy4gMTAuOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlaXAuIExhYy48L3RpdGxlPiB4LiA4LjwvYmlibD4gCgkJCQkJICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+THljdXJndXMgaXMgc2FpZCB0byBoYXZlIGxpdmVkIGluIHRoZSB0aW1lcyBvZiB0aGUgSGVyYWNsZWlkYWUuPC9xPgogICAgICAgICAgICA8L25vdGU+IG1ha2VzIGFuIGltcHJlc3Npb24gb2Ygc2ltcGxpY2l0eSBpbiB0aGUgcGFzc2FnZSB3aGVyZSBoZSBzYXlzIHRoYXQgTHljdXJndXMgbGl2ZWQgaW4gdGhlIHRpbWUgb2YgdGhlIEhlcmFjbGVpZGFlLiBGb3IgaW4gbGluZWFnZSwgb2YgY291cnNlLCB0aGUgbGF0ZXN0IG9mIHRoZSBTcGFydGFuIGtpbmdzIHdlcmUgYWxzbyBIZXJhY2xlaWRhZTsgYnV0IFhlbm9waG9uIGFwcGFyZW50bHkgd2lzaGVzIHRvIHVzZSB0aGUgbmFtZSBIZXJhY2xlaWRhZSBvZiB0aGUgZmlyc3QgYW5kIG1vcmUgaW1tZWRpYXRlIGRlc2NlbmRhbnRzIG9mIEhlcmFjbGVzLCBzbyBmYW1vdXMgaW4gc3RvcnkuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQ29uc3QuIExhYy4gMTAuOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlaXAuIExhYy48L3RpdGxlPiB4LiA4LjwvYmlibD4gCgkJCQkJICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlaXAuIExhYy48L3RpdGxlPiB4LiA4LjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+THljdXJndXMgaXMgc2FpZCB0byBoYXZlIGxpdmVkIGluIHRoZSB0aW1lcyBvZiB0aGUgSGVyYWNsZWlkYWUuPC9xPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkhvd2V2ZXIsIGFsdGhvdWdoIHRoZSBoaXN0b3J5IG9mIHRoZXNlIHRpbWVzIGlzIHN1Y2ggYSBtYXplLCBJIHNoYWxsIHRyeSwgaW4gcHJlc2VudGluZyBteSBuYXJyYXRpdmUsIHRvIGZvbGxvdyB0aG9zZSBhdXRob3JzIHdobyBhcmUgbGVhc3QgY29udHJhZGljdGVkLCBvciB3aG8gaGF2ZSB0aGUgbW9zdCBub3RhYmxlIHdpdG5lc3NlcyBmb3Igd2hhdCB0aGV5IGhhdmUgd3JpdHRlbiBhYm91dCB0aGUgbWFuLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgU2ltb25pZGVzIHRoZSBwb2V0IHNheXMgdGhhdCBMeWN1cmd1cyB3YXMgbm90IHRoZSBzb24gb2YgRXVub211cywgYnV0IHRoYXQgYm90aCBMeWN1cmd1cyBhbmQgRXVub211cyB3ZXJlIHNvbnMgb2YgUHJ5dGFuaXM7IHdoZXJlYXMgbW9zdCB3cml0ZXJzIGdpdmUgYSBkaWZmZXJlbnQgZ2VuZWFsb2d5LCBhcyBmb2xsb3dzOiBBcmlzdG9kZW11cyBiZWdhdCBQcm9jbGVzLCBQcm9jbGVzIGJlZ2F0IFNvw7xzLCBTb8O8cyBiZWdhdCBFdXJ5cG9uLCBhbmQgaGUgYmVnYXQgUHJ5dGFuaXMsIGZyb20gd2hvbSBzcHJhbmcgRXVub211cywgYW5kIGZyb20gRXVub211cyBQb2x5ZGVjdGVzIGJ5IGEgZmlyc3Qgd2lmZSwgYW5kIEx5Y3VyZ3VzLCB3aG8gd2FzIGEgeW91bmdlciBzb24gYnkgYSBzZWNvbmQgd2lmZSwgRGlvbmFzc2EsIGFzIERpZXV0eWNoaWRhcyBoYXMgd3JpdHRlbiwgbWFraW5nIEx5Y3VyZ3VzIHNpeHRoIGZyb20gUHJvY2xlcywgYW5kIGVsZXZlbnRoIGZyb20gSGVyYWNsZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXJpc3RvZGVtdXMsIGZyb20gd2hvc2UgdHdpbiBzb25zIEV1cnlzdGhlbmVzIGFuZCBQcm9jbGVzIHRoZSBlbGRlciBhbmQgeW91bmdlciByb3lhbCBsaW5lcyBhdCBTcGFydGEgKHRoZSBBZ2lkcyBhbmQgRXVyeXBvbnRpZHMpIHdlcmUgZGVzY2VuZGVkLCB3YXMgdGhlIHNvbiBvZiBBcmlzdG9tYWNodXMsIHRoZSBzb24gb2YgQ2xlb2RhZXVzLCB0aGUgc29uIG9mIEh5bGx1cywgdGhlIHNvbiBvZiBIZXJhY2xlcy4gU2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAzLjEuMSIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpaWkuIDEtMTA8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSGR0LiA3LjIwNCIgdmFsaWQ9InllcyI+SGVyb2RvdHVzLCB2aWkuIDIwNDwvYmlibD4gYW5kPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhkdC4gOC4xMzEiIHZhbGlkPSJ5ZXMiPiB2aWlpLiAxMzE8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgU2ltb25pZGVzIHRoZSBwb2V0IHNheXMgdGhhdCBMeWN1cmd1cyB3YXMgbm90IHRoZSBzb24gb2YgRXVub211cywgYnV0IHRoYXQgYm90aCBMeWN1cmd1cyBhbmQgRXVub211cyB3ZXJlIHNvbnMgb2YgUHJ5dGFuaXM7IHdoZXJlYXMgbW9zdCB3cml0ZXJzIGdpdmUgYSBkaWZmZXJlbnQgZ2VuZWFsb2d5LCBhcyBmb2xsb3dzOiBBcmlzdG9kZW11cyBiZWdhdCBQcm9jbGVzLCBQcm9jbGVzIGJlZ2F0IFNvw7xzLCBTb8O8cyBiZWdhdCBFdXJ5cG9uLCBhbmQgaGUgYmVnYXQgUHJ5dGFuaXMsIGZyb20gd2hvbSBzcHJhbmcgRXVub211cywgYW5kIGZyb20gRXVub211cyBQb2x5ZGVjdGVzIGJ5IGEgZmlyc3Qgd2lmZSwgYW5kIEx5Y3VyZ3VzLCB3aG8gd2FzIGEgeW91bmdlciBzb24gYnkgYSBzZWNvbmQgd2lmZSwgRGlvbmFzc2EsIGFzIERpZXV0eWNoaWRhcyBoYXMgd3JpdHRlbiwgbWFraW5nIEx5Y3VyZ3VzIHNpeHRoIGZyb20gUHJvY2xlcywgYW5kIGVsZXZlbnRoIGZyb20gSGVyYWNsZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BcmlzdG9kZW11cywgZnJvbSB3aG9zZSB0d2luIHNvbnMgRXVyeXN0aGVuZXMgYW5kIFByb2NsZXMgdGhlIGVsZGVyIGFuZCB5b3VuZ2VyIHJveWFsIGxpbmVzIGF0IFNwYXJ0YSAodGhlIEFnaWRzIGFuZCBFdXJ5cG9udGlkcykgd2VyZSBkZXNjZW5kZWQsIHdhcyB0aGUgc29uIG9mIEFyaXN0b21hY2h1cywgdGhlIHNvbiBvZiBDbGVvZGFldXMsIHRoZSBzb24gb2YgSHlsbHVzLCB0aGUgc29uIG9mIEhlcmFjbGVzLiBTZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gMy4xLjEiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcywgaWlpLiAxLTEwPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA3LjIwNCIgdmFsaWQ9InllcyI+SGVyb2RvdHVzLCB2aWkuIDIwNDwvYmlibD4gYW5kPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA4LjEzMSIgdmFsaWQ9InllcyI+IHZpaWkuIDEzMTwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAzLjEuMSIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpaWkuIDEtMTA8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDcuMjA0IiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIHZpaS4gMjA0PC9iaWJsPiBhbmQ8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDguMTMxIiB2YWxpZD0ieWVzIj4gdmlpaS4gMTMxPC9iaWJsPi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZXNlIGFuY2VzdG9ycyBvZiBMeWN1cmd1cywgU2/DvHMgd2FzIG1vc3QgZmFtb3VzLCB1bmRlciB3aG9tIHRoZSBTcGFydGFucyBtYWRlIHRoZSBIZWxvdHMgdGhlaXIgc2xhdmVzLCBhbmQgYWNxdWlyZWQgYnkgY29ucXVlc3QgZnJvbSB0aGUgQXJjYWRpYW5zIGEgbGFyZ2UgYWRkaXRpb25hbCB0cmFjdCBvZiBsYW5kLiAgSXQgaXMgYWxzbyByZWxhdGVkIG9mIHRoaXMgU2/DvHMgdGhhdCB3aGVuIGhlIHdhcyBiZXNpZWdlZCBieSB0aGUgQ2xlaXRvcmlhbnMgaW4gYSByb3VnaCBhbmQgd2F0ZXJsZXNzIHBsYWNlLCBoZSBhZ3JlZWQgdG8gc3VycmVuZGVyIHRvIHRoZW0gdGhlIGxhbmQgd2hpY2ggaGUgaGFkIGNvbnF1ZXJlZCBpZiBoZSBoaW1zZWxmIGFuZCBhbGwgaGlzIG1lbiB3aXRoIGhpbSBzaG91bGQgZHJpbmsgZnJvbSB0aGUgYWRqYWNlbnQgc3ByaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgb2F0aHMgdG8gdGhpcyBhZ3JlZW1lbnQgd2VyZSB0YWtlbiwgaGUgYXNzZW1ibGVkIGhpcyBtZW4gYW5kIG9mZmVyZWQgaGlzIGtpbmdkb20gdG8gdGhlIG9uZSB3aG8gc2hvdWxkIG5vdCBkcmluazsgbm8gb25lIG9mIHRoZW0sIGhvd2V2ZXIsIGNvdWxkIGZvcmJlYXIsIGJ1dCBhbGwgb2YgdGhlbSBkcmFuaywgd2hlcmV1cG9uIFNvw7xzIGhpbXNlbGYgd2VudCBkb3duIGxhc3Qgb2YgYWxsIHRvIHRoZSB3YXRlciwgc3ByaW5rbGVkIGhpcyBmYWNlIG1lcmVseSwgd2hpbGUgdGhlIGVuZW15IHdlcmUgc3RpbGwgYXQgaGFuZCB0byBzZWUsIGFuZCB0aGVuIG1hcmNoZWQgYXdheSBhbmQgcmV0YWluZWQgaGlzIHRlcnJpdG9yeSwgb24gdGhlIHBsZWEgdGhhdCBhbGwgaGFkIG5vdCBkcnVuay4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PZiB0aGVzZSBhbmNlc3RvcnMgb2YgTHljdXJndXMsIFNvw7xzIHdhcyBtb3N0IGZhbW91cywgdW5kZXIgd2hvbSB0aGUgU3BhcnRhbnMgbWFkZSB0aGUgSGVsb3RzIHRoZWlyIHNsYXZlcywgYW5kIGFjcXVpcmVkIGJ5IGNvbnF1ZXN0IGZyb20gdGhlIEFyY2FkaWFucyBhIGxhcmdlIGFkZGl0aW9uYWwgdHJhY3Qgb2YgbGFuZC4gIEl0IGlzIGFsc28gcmVsYXRlZCBvZiB0aGlzIFNvw7xzIHRoYXQgd2hlbiBoZSB3YXMgYmVzaWVnZWQgYnkgdGhlIENsZWl0b3JpYW5zIGluIGEgcm91Z2ggYW5kIHdhdGVybGVzcyBwbGFjZSwgaGUgYWdyZWVkIHRvIHN1cnJlbmRlciB0byB0aGVtIHRoZSBsYW5kIHdoaWNoIGhlIGhhZCBjb25xdWVyZWQgaWYgaGUgaGltc2VsZiBhbmQgYWxsIGhpcyBtZW4gd2l0aCBoaW0gc2hvdWxkIGRyaW5rIGZyb20gdGhlIGFkamFjZW50IHNwcmluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBvYXRocyB0byB0aGlzIGFncmVlbWVudCB3ZXJlIHRha2VuLCBoZSBhc3NlbWJsZWQgaGlzIG1lbiBhbmQgb2ZmZXJlZCBoaXMga2luZ2RvbSB0byB0aGUgb25lIHdobyBzaG91bGQgbm90IGRyaW5rOyBubyBvbmUgb2YgdGhlbSwgaG93ZXZlciwgY291bGQgZm9yYmVhciwgYnV0IGFsbCBvZiB0aGVtIGRyYW5rLCB3aGVyZXVwb24gU2/DvHMgaGltc2VsZiB3ZW50IGRvd24gbGFzdCBvZiBhbGwgdG8gdGhlIHdhdGVyLCBzcHJpbmtsZWQgaGlzIGZhY2UgbWVyZWx5LCB3aGlsZSB0aGUgZW5lbXkgd2VyZSBzdGlsbCBhdCBoYW5kIHRvIHNlZSwgYW5kIHRoZW4gbWFyY2hlZCBhd2F5IGFuZCByZXRhaW5lZCBoaXMgdGVycml0b3J5LCBvbiB0aGUgcGxlYSB0aGF0IGFsbCBoYWQgbm90IGRydW5rLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBhbHRob3VnaCBvbiB0aGVzZSBncm91bmRzIGhlIHdhcyBoZWxkIGluIGdyZWF0IGFkbWlyYXRpb24sIGhpcyByb3lhbCBsaW5lIHdhcyBub3QgbmFtZWQgZnJvbSBoaW0sIGJ1dCB3ZXJlIGNhbGxlZCBFdXJ5cG9udGlkcyBmcm9tIGhpcyBzb24sIGJlY2F1c2UgRXVyeXBvbiBhcHBlYXJzIHRvIGhhdmUgYmVlbiB0aGUgZmlyc3Qga2luZyB0byByZWxheCB0aGUgZXhjZXNzaXZlIGFic29sdXRpc20gb2YgaGlzIHN3YXksIHNlZWtpbmcgZmF2b3VyIGFuZCBwb3B1bGFyaXR5IHdpdGggdGhlIG11bHRpdHVkZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gY29uc2VxdWVuY2Ugb2Ygc3VjaCByZWxheGF0aW9uIHRoZSBwZW9wbGUgZ3JldyBob2xkLCBhbmQgc3VjY2VlZGluZyBraW5ncyB3ZXJlIHNvbWUgb2YgdGhlbSBoYXRlZCBmb3IgdHJ5aW5nIHRvIGZvcmNlIHRoZWlyIHdheSB3aXRoIHRoZSBtdWx0aXR1ZGUsIGFuZCBzb21lIHdlcmUgYnJvdWdodCBsb3cgYnkgdGhlaXIgZGVzaXJlIGZvciBmYXZvdXIgb3IgdGhyb3VnaCB3ZWFrbmVzcywgc28gdGhhdCBsYXdsZXNzbmVzcyBhbmQgY29uZnVzaW9uIHByZXZhaWxlZCBhdCBTcGFydGEgZm9yIGEgbG9uZyB0aW1lOyBhbmQgaXQgd2FzIG93aW5nIHRvIHRoaXMgdGhhdCB0aGUgZmF0aGVyIG9mIEx5Y3VyZ3VzLCBhIHJlaWduaW5nIGtpbmcsIGxvc3QgaGlzIGxpZmUuIEZvciBhcyBoZSB3YXMgdHJ5aW5nIHRvIHNlcGFyYXRlIHNvbWUgcmlvdGVycywgaGUgd2FzIHN0YWJiZWQgdG8gZGVhdGggd2l0aCBhIGJ1dGNoZXIncyBrbmlmZSwgbGVhdmluZyB0aGUga2luZ2RvbSB0byBoaXMgZWxkZXIgc29uLCBQb2x5ZGVjdGVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBjb25zZXF1ZW5jZSBvZiBzdWNoIHJlbGF4YXRpb24gdGhlIHBlb3BsZSBncmV3IGhvbGQsIGFuZCBzdWNjZWVkaW5nIGtpbmdzIHdlcmUgc29tZSBvZiB0aGVtIGhhdGVkIGZvciB0cnlpbmcgdG8gZm9yY2UgdGhlaXIgd2F5IHdpdGggdGhlIG11bHRpdHVkZSwgYW5kIHNvbWUgd2VyZSBicm91Z2h0IGxvdyBieSB0aGVpciBkZXNpcmUgZm9yIGZhdm91ciBvciB0aHJvdWdoIHdlYWtuZXNzLCBzbyB0aGF0IGxhd2xlc3NuZXNzIGFuZCBjb25mdXNpb24gcHJldmFpbGVkIGF0IFNwYXJ0YSBmb3IgYSBsb25nIHRpbWU7IGFuZCBpdCB3YXMgb3dpbmcgdG8gdGhpcyB0aGF0IHRoZSBmYXRoZXIgb2YgTHljdXJndXMsIGEgcmVpZ25pbmcga2luZywgbG9zdCBoaXMgbGlmZS4gRm9yIGFzIGhlIHdhcyB0cnlpbmcgdG8gc2VwYXJhdGUgc29tZSByaW90ZXJzLCBoZSB3YXMgc3RhYmJlZCB0byBkZWF0aCB3aXRoIGEgYnV0Y2hlcidzIGtuaWZlLCBsZWF2aW5nIHRoZSBraW5nZG9tIHRvIGhpcyBlbGRlciBzb24sIFBvbHlkZWN0ZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UG9seWRlY3RlcyBhbHNvIGRpZWQgc29vbiBhZnRlcndhcmRzLCBhbmQgdGhlbiwgYXMgd2FzIGdlbmVyYWxseSB0aG91Z2h0LCB0aGUga2luZ2RvbSBkZXZvbHZlZCB1cG9uIEx5Y3VyZ3VzOyBhbmQgdW50aWwgaGlzIGJyb3RoZXIncyB3aWZlIHdhcyBrbm93biB0byBiZSB3aXRoIGNoaWxkLCBoZSB3YXMga2luZy4gQnV0IGFzIHNvb24gYXMgaGUgbGVhcm5lZCBvZiB0aGlzLCBoZSBkZWNsYXJlZCB0aGF0IHRoZSBraW5nZG9tIGJlbG9uZ2VkIHRvIGhlciBvZmZzcHJpbmcsIGlmIGl0IHNob3VsZCBiZSBtYWxlLCBhbmQgaGltc2VsZiBhZG1pbmlzdGVyZWQgdGhlIGdvdmVybm1lbnQgb25seSBhcyBndWFyZGlhbi4gTm93IHRoZSBndWFyZGlhbnMgb2YgZmF0aGVybGVzcyBraW5ncyBhcmUgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cHJvZGlrb2k8L3E+IGJ5IHRoZSBMYWNlZGFlbW9uaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+UHJlc2VudGx5LCBob3dldmVyLCB0aGUgd29tYW4gbWFkZSBzZWNyZXQgb3ZlcnR1cmVzIHRvIGhpbSwgcHJvcG9zaW5nIHRvIGRlc3Ryb3kgaGVyIHVuYm9ybiBiYWJlIG9uIGNvbmRpdGlvbiB0aGF0IGhlIHdvdWxkIG1hcnJ5IGhlciB3aGVuIGhlIHdhcyBhIGtpbmcgb2YgU3BhcnRhOyBhbmQgYWx0aG91Z2ggaGUgZGV0ZXN0ZWQgaGVyIGNoYXJhY3RlciwgaGUgZGlkIG5vdCByZWplY3QgaGVyIHByb3Bvc2l0aW9uLCBidXQgcHJldGVuZGVkIHRvIGFwcHJvdmUgYW5kIGFjY2VwdCBpdC4gSGUgdG9sZCBoZXIsIGhvd2V2ZXIsIHRoYXQgc2hlIG5lZWQgbm90IHVzZSBkcnVncyB0byBwcm9kdWNlIGEgbWlzY2FycmlhZ2UsIHRoZXJlYnkgaW5qdXJpbmcgaGVyIGhlYWx0aCBhbmQgZW5kYW5nZXJpbmcgaGVyIGxpZmUsIGZvciBoZSB3b3VsZCBzZWUgdG8gaXQgaGltc2VsZiB0aGF0IGFzIHNvb24gYXMgaGVyIGNoaWxkIHdhcyBib3JuIGl0IHNob3VsZCBiZSBwdXQgb3V0IG9mIHRoZSB3YXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgbWFubmVyIGhlIG1hbmFnZWQgdG8gYnJpbmcgdGhlIHdvbWFuIHRvIGhlciBmdWxsIHRpbWUsIGFuZCB3aGVuIGhlIGxlYXJuZWQgdGhhdCBzaGUgd2FzIGluIGxhYm91ciwgaGUgc2VudCBhdHRlbmRhbnRzIGFuZCB3YXRjaGVycyBmb3IgaGVyIGRlbGl2ZXJ5LCB3aXRoIG9yZGVycywgaWYgYSBnaXJsIHNob3VsZCBiZSBib3JuLCB0byBoYW5kIGl0IG92ZXIgdG8gdGhlIHdvbWVuLCBidXQgaWYgYSBib3ksIHRvIGJyaW5nIGl0IHRvIGhpbSwgbm8gbWF0dGVyIHdoYXQgaGUgd2FzIGRvaW5nLiBBbmQgaXQgY2FtZSB0byBwYXNzIHRoYXQgYXMgaGUgd2FzIGF0IHN1cHBlciB3aXRoIHRoZSBjaGllZiBtYWdpc3RyYXRlcywgYSBtYWxlIGNoaWxkIHdhcyBib3JuLCBhbmQgaGlzIHNlcnZhbnRzIGJyb3VnaHQgdGhlIGxpdHRsZSBib3kgdG8gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB0b29rIGl0IGluIGhpcyBhcm1zLCBhcyB3ZSBhcmUgdG9sZCwgYW5kIHNhaWQgdG8gdGhvc2Ugd2hvIHdlcmUgYXQgdGFibGUgd2l0aCBoaW0sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QSBraW5nIGlzIGJvcm4gdW50byB5b3UsIE8gbWVuIG9mIFNwYXJ0YTs8L3E+IHRoZW4gaGUgbGFpZCBpdCBkb3duIGluIHRoZSByb3lhbCBzZWF0IGFuZCBuYW1lZCBpdCBDaGFyaWxhw7xzLCBvciA8ZW1waD5QZW9wbGUncyBKb3k8L2VtcGg+LCBiZWNhdXNlIGFsbCBwcmVzZW50IHdlcmUgZmlsbGVkIHdpdGggam95LCBhZG1pcmluZyBhcyB0aGV5IGRpZCBoaXMgbG9mdHkgc3Bpcml0IGFuZCBoaXMgcmlnaHRlb3VzbmVzcy4gQW5kIHNvIGhlIHdhcyBraW5nIG9ubHkgZWlnaHQgbW9udGhzIGluIGFsbC4gQnV0IG9uIG90aGVyIGFjY291bnRzIGFsc28gaGUgd2FzIHJldmVyZWQgYnkgaGlzIGZlbGxvdy1jaXRpemVucywgYW5kIG1vcmUgdGhhbiB0aG9zZSB3aG8gb2JleWVkIGhpbSBiZWNhdXNlIGhlIHdhcyBndWFyZGlhbiBvZiB0aGUga2luZyBhbmQgaGFkIHJveWFsIHBvd2VyIGluIGhpcyBoYW5kcywgd2VyZSB0aG9zZSB3aG8gY2xhdmUgdG8gaGltIGZvciBoaXMgdmlydHVlcyBhbmQgd2VyZSByZWFkeSBhbmQgd2lsbGluZyB0byBkbyBoaXMgYmlkZGluZy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Qb2x5ZGVjdGVzIGFsc28gZGllZCBzb29uIGFmdGVyd2FyZHMsIGFuZCB0aGVuLCBhcyB3YXMgZ2VuZXJhbGx5IHRob3VnaHQsIHRoZSBraW5nZG9tIGRldm9sdmVkIHVwb24gTHljdXJndXM7IGFuZCB1bnRpbCBoaXMgYnJvdGhlcidzIHdpZmUgd2FzIGtub3duIHRvIGJlIHdpdGggY2hpbGQsIGhlIHdhcyBraW5nLiBCdXQgYXMgc29vbiBhcyBoZSBsZWFybmVkIG9mIHRoaXMsIGhlIGRlY2xhcmVkIHRoYXQgdGhlIGtpbmdkb20gYmVsb25nZWQgdG8gaGVyIG9mZnNwcmluZywgaWYgaXQgc2hvdWxkIGJlIG1hbGUsIGFuZCBoaW1zZWxmIGFkbWluaXN0ZXJlZCB0aGUgZ292ZXJubWVudCBvbmx5IGFzIGd1YXJkaWFuLiBOb3cgdGhlIGd1YXJkaWFucyBvZiBmYXRoZXJsZXNzIGtpbmdzIGFyZSBjYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnByb2Rpa29pPC9xPiBieSB0aGUgTGFjZWRhZW1vbmlhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlByZXNlbnRseSwgaG93ZXZlciwgdGhlIHdvbWFuIG1hZGUgc2VjcmV0IG92ZXJ0dXJlcyB0byBoaW0sIHByb3Bvc2luZyB0byBkZXN0cm95IGhlciB1bmJvcm4gYmFiZSBvbiBjb25kaXRpb24gdGhhdCBoZSB3b3VsZCBtYXJyeSBoZXIgd2hlbiBoZSB3YXMgYSBraW5nIG9mIFNwYXJ0YTsgYW5kIGFsdGhvdWdoIGhlIGRldGVzdGVkIGhlciBjaGFyYWN0ZXIsIGhlIGRpZCBub3QgcmVqZWN0IGhlciBwcm9wb3NpdGlvbiwgYnV0IHByZXRlbmRlZCB0byBhcHByb3ZlIGFuZCBhY2NlcHQgaXQuIEhlIHRvbGQgaGVyLCBob3dldmVyLCB0aGF0IHNoZSBuZWVkIG5vdCB1c2UgZHJ1Z3MgdG8gcHJvZHVjZSBhIG1pc2NhcnJpYWdlLCB0aGVyZWJ5IGluanVyaW5nIGhlciBoZWFsdGggYW5kIGVuZGFuZ2VyaW5nIGhlciBsaWZlLCBmb3IgaGUgd291bGQgc2VlIHRvIGl0IGhpbXNlbGYgdGhhdCBhcyBzb29uIGFzIGhlciBjaGlsZCB3YXMgYm9ybiBpdCBzaG91bGQgYmUgcHV0IG91dCBvZiB0aGUgd2F5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgbWFubmVyIGhlIG1hbmFnZWQgdG8gYnJpbmcgdGhlIHdvbWFuIHRvIGhlciBmdWxsIHRpbWUsIGFuZCB3aGVuIGhlIGxlYXJuZWQgdGhhdCBzaGUgd2FzIGluIGxhYm91ciwgaGUgc2VudCBhdHRlbmRhbnRzIGFuZCB3YXRjaGVycyBmb3IgaGVyIGRlbGl2ZXJ5LCB3aXRoIG9yZGVycywgaWYgYSBnaXJsIHNob3VsZCBiZSBib3JuLCB0byBoYW5kIGl0IG92ZXIgdG8gdGhlIHdvbWVuLCBidXQgaWYgYSBib3ksIHRvIGJyaW5nIGl0IHRvIGhpbSwgbm8gbWF0dGVyIHdoYXQgaGUgd2FzIGRvaW5nLiBBbmQgaXQgY2FtZSB0byBwYXNzIHRoYXQgYXMgaGUgd2FzIGF0IHN1cHBlciB3aXRoIHRoZSBjaGllZiBtYWdpc3RyYXRlcywgYSBtYWxlIGNoaWxkIHdhcyBib3JuLCBhbmQgaGlzIHNlcnZhbnRzIGJyb3VnaHQgdGhlIGxpdHRsZSBib3kgdG8gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRvb2sgaXQgaW4gaGlzIGFybXMsIGFzIHdlIGFyZSB0b2xkLCBhbmQgc2FpZCB0byB0aG9zZSB3aG8gd2VyZSBhdCB0YWJsZSB3aXRoIGhpbSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEga2luZyBpcyBib3JuIHVudG8geW91LCBPIG1lbiBvZiBTcGFydGE7PC9xPiB0aGVuIGhlIGxhaWQgaXQgZG93biBpbiB0aGUgcm95YWwgc2VhdCBhbmQgbmFtZWQgaXQgQ2hhcmlsYcO8cywgb3IgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5QZW9wbGUncyBKb3k8L2VtcGg+LCBiZWNhdXNlIGFsbCBwcmVzZW50IHdlcmUgZmlsbGVkIHdpdGggam95LCBhZG1pcmluZyBhcyB0aGV5IGRpZCBoaXMgbG9mdHkgc3Bpcml0IGFuZCBoaXMgcmlnaHRlb3VzbmVzcy4gQW5kIHNvIGhlIHdhcyBraW5nIG9ubHkgZWlnaHQgbW9udGhzIGluIGFsbC4gQnV0IG9uIG90aGVyIGFjY291bnRzIGFsc28gaGUgd2FzIHJldmVyZWQgYnkgaGlzIGZlbGxvdy1jaXRpemVucywgYW5kIG1vcmUgdGhhbiB0aG9zZSB3aG8gb2JleWVkIGhpbSBiZWNhdXNlIGhlIHdhcyBndWFyZGlhbiBvZiB0aGUga2luZyBhbmQgaGFkIHJveWFsIHBvd2VyIGluIGhpcyBoYW5kcywgd2VyZSB0aG9zZSB3aG8gY2xhdmUgdG8gaGltIGZvciBoaXMgdmlydHVlcyBhbmQgd2VyZSByZWFkeSBhbmQgd2lsbGluZyB0byBkbyBoaXMgYmlkZGluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2FzIGEgcGFydHksIGhvd2V2ZXIsIHdoaWNoIGVudmllZCBoaW0gYW5kIHNvdWdodCB0byBpbXBlZGUgdGhlIGdyb3dpbmcgcG93ZXIgb2Ygc28geW91bmcgYSBtYW4sIGVzcGVjaWFsbHkgdGhlIGtpbnNtZW4gYW5kIGZyaWVuZHMgb2YgdGhlIHF1ZWVuLW1vdGhlciwgd2hvIHRob3VnaHQgc2hlIGhhZCBiZWVuIHRyZWF0ZWQgd2l0aCBpbnNvbGVuY2UuIEhlciBicm90aGVyLCBMZW9uaWRhcywgYWN0dWFsbHkgcmFpbGVkIGF0IEx5Y3VyZ3VzIG9uY2UgcXVpdGUgYm9sZGx5LCBhc3N1cmluZyBoaW0gdGhhdCBoZSBrbmV3IHdlbGwgdGhhdCBMeWN1cmd1cyB3b3VsZCBvbmUgZGF5IGJlIGtpbmcsIHRoZXJlYnkgcHJvbW90aW5nIHN1c3BpY2lvbiBhbmQgcGF2aW5nIHRoZSB3YXkgZm9yIHRoZSBhY2N1c2F0aW9uLCBpbiBjYXNlIGFueSB0aGluZyBoYXBwZW5lZCB0byB0aGUga2luZywgdGhhdCBoZSBoYWQgcGxvdHRlZCBhZ2FpbnN0IGhpcyBsaWZlLiBTb21lIHN1Y2ggdGFsayB3YXMgc2V0IGluIGNpcmN1bGF0aW9uIGJ5IHRoZSBxdWVlbi1tb3RoZXIgYWxzbywgaW4gY29uc2VxdWVuY2Ugb2Ygd2hpY2ggTHljdXJndXMgd2FzIHNvcmVseSB0cm91YmxlZCBhbmQgZmVhcmZ1bCBvZiB3aGF0IG1pZ2h0IGJlIGluIHN0b3JlIGZvciBoaW0uIEhlIHRoZXJlZm9yZSBkZXRlcm1pbmVkIHRvIGF2b2lkIHN1c3BpY2lvbiBieSB0cmF2ZWxsaW5nIGFicm9hZCwgYW5kIHRvIGNvbnRpbnVlIGhpcyB3YW5kZXJpbmdzIHVudGlsIGhpcyBuZXBoZXcgc2hvdWxkIGNvbWUgb2YgYWdlIGFuZCBiZWdldCBhIHNvbiB0byBzdWNjZWVkIGhpbSBvbiB0aGUgdGhyb25lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBhIHBhcnR5LCBob3dldmVyLCB3aGljaCBlbnZpZWQgaGltIGFuZCBzb3VnaHQgdG8gaW1wZWRlIHRoZSBncm93aW5nIHBvd2VyIG9mIHNvIHlvdW5nIGEgbWFuLCBlc3BlY2lhbGx5IHRoZSBraW5zbWVuIGFuZCBmcmllbmRzIG9mIHRoZSBxdWVlbi1tb3RoZXIsIHdobyB0aG91Z2h0IHNoZSBoYWQgYmVlbiB0cmVhdGVkIHdpdGggaW5zb2xlbmNlLiBIZXIgYnJvdGhlciwgTGVvbmlkYXMsIGFjdHVhbGx5IHJhaWxlZCBhdCBMeWN1cmd1cyBvbmNlIHF1aXRlIGJvbGRseSwgYXNzdXJpbmcgaGltIHRoYXQgaGUga25ldyB3ZWxsIHRoYXQgTHljdXJndXMgd291bGQgb25lIGRheSBiZSBraW5nLCB0aGVyZWJ5IHByb21vdGluZyBzdXNwaWNpb24gYW5kIHBhdmluZyB0aGUgd2F5IGZvciB0aGUgYWNjdXNhdGlvbiwgaW4gY2FzZSBhbnkgdGhpbmcgaGFwcGVuZWQgdG8gdGhlIGtpbmcsIHRoYXQgaGUgaGFkIHBsb3R0ZWQgYWdhaW5zdCBoaXMgbGlmZS4gU29tZSBzdWNoIHRhbGsgd2FzIHNldCBpbiBjaXJjdWxhdGlvbiBieSB0aGUgcXVlZW4tbW90aGVyIGFsc28sIGluIGNvbnNlcXVlbmNlIG9mIHdoaWNoIEx5Y3VyZ3VzIHdhcyBzb3JlbHkgdHJvdWJsZWQgYW5kIGZlYXJmdWwgb2Ygd2hhdCBtaWdodCBiZSBpbiBzdG9yZSBmb3IgaGltLiBIZSB0aGVyZWZvcmUgZGV0ZXJtaW5lZCB0byBhdm9pZCBzdXNwaWNpb24gYnkgdHJhdmVsbGluZyBhYnJvYWQsIGFuZCB0byBjb250aW51ZSBoaXMgd2FuZGVyaW5ncyB1bnRpbCBoaXMgbmVwaGV3IHNob3VsZCBjb21lIG9mIGFnZSBhbmQgYmVnZXQgYSBzb24gdG8gc3VjY2VlZCBoaW0gb24gdGhlIHRocm9uZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHRoaXMgcHVycG9zZSwgaGUgc2V0IHNhaWwsIGFuZCBjYW1lIGZpcnN0IHRvIENyZXRlLiBIZXJlIGhlIHN0dWRpZWQgdGhlIFZhcmlvdXMgZm9ybXMgb2YgZ292ZXJubWVudCBhbmQgbWFkZSB0aGUgYWNxdWFpbnRhbmNlIG9mIHRoZWlyIG1vc3QgZGlzdGluZ3Vpc2hlZCBtZW4uIE9mIHNvbWUgdGhpbmdzIGhlIGhlYXJ0aWx5IGFwcHJvdmVkLCBhbmQgYWRvcHRlZCBzb21lIG9mIHRoZWlyIGxhd3MsIHRoYXQgaGUgbWlnaHQgY2FycnkgdGhlbSBob21lIHdpdGggaGltIGFuZCBwdXQgdGhlbSBpbiB1c2U7IGZvciBzb21lIHRoaW5ncyBoZSBoYWQgb25seSBjb250ZW1wdC4gT25lIG9mIHRoZSBtZW4gcmVnYXJkZWQgdGhlcmUgYXMgd2lzZSBzdGF0ZXNtZW4gd2FzIFRoYWxlcywgd2hvbSBMeWN1cmd1cyBwZXJzdWFkZWQsIG91dCBvZiBmYXZvdXIgYW5kIGZyaWVuZHNoaXAsIHRvIGdvIG9uIGEgbWlzc2lvbiB0byBTcGFydGEuIE5vdyBUaGFsZXMgcGFzc2VkIGFzIGEgbHlyaWMgcG9ldCwgYW5kIHNjcmVlbmVkIGhpbXNlbGYgYmVoaW5kIHRoaXMgYXJ0LCBidXQgaW4gcmVhbGl0eSBoZSBkaWQgdGhlIHdvcmsgb2Ygb25lIG9mIHRoZSBtaWdodGllc3QgbGF3Z2l2ZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGlzIG9kZXMgd2VyZSBzbyBtYW55IGV4aG9ydGF0aW9ucyB0byBvYmVkaWVuY2UgYW5kIGhhcm1vbnksIGFuZCB0aGVpciBtZWFzdXJlZCByaHl0aG1zIHdlcmUgcGVybWVhdGVkIHdpdGggb3JkZXJlZCB0cmFucXVpbGxpdHksIHNvIHRoYXQgdGhvc2Ugd2hvIGxpc3RlbmVkIHRvIHRoZW0gd2VyZSBpbnNlbnNpYmx5IHNvZnRlbmVkIGluIHRoZWlyIGRpc3Bvc2l0aW9ucywgaW5zb211Y2ggdGhhdCB0aGV5IHJlbm91bmNlZCB0aGUgbXV0dWFsIGhhdHJlZHMgd2hpY2ggd2VyZSBzbyByaWZlIGF0IHRoYXQgdGltZSwgYW5kIGR3ZWx0IHRvZ2V0aGVyIGluIGEgY29tbW9uIHB1cnN1aXQgb2Ygd2hhdCB3YXMgaGlnaCBhbmQgbm9ibGUuIFRoYWxlcywgdGhlcmVmb3JlLCBhZnRlciBhIGZhc2hpb24sIHdhcyBhIGZvcmVydW5uZXIgaW4gU3BhcnRhIG9mIEx5Y3VyZ3VzIGFuZCBoaXMgZGlzY2lwbGluZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHRoaXMgcHVycG9zZSwgaGUgc2V0IHNhaWwsIGFuZCBjYW1lIGZpcnN0IHRvIENyZXRlLiBIZXJlIGhlIHN0dWRpZWQgdGhlIFZhcmlvdXMgZm9ybXMgb2YgZ292ZXJubWVudCBhbmQgbWFkZSB0aGUgYWNxdWFpbnRhbmNlIG9mIHRoZWlyIG1vc3QgZGlzdGluZ3Vpc2hlZCBtZW4uIE9mIHNvbWUgdGhpbmdzIGhlIGhlYXJ0aWx5IGFwcHJvdmVkLCBhbmQgYWRvcHRlZCBzb21lIG9mIHRoZWlyIGxhd3MsIHRoYXQgaGUgbWlnaHQgY2FycnkgdGhlbSBob21lIHdpdGggaGltIGFuZCBwdXQgdGhlbSBpbiB1c2U7IGZvciBzb21lIHRoaW5ncyBoZSBoYWQgb25seSBjb250ZW1wdC4gT25lIG9mIHRoZSBtZW4gcmVnYXJkZWQgdGhlcmUgYXMgd2lzZSBzdGF0ZXNtZW4gd2FzIFRoYWxlcywgd2hvbSBMeWN1cmd1cyBwZXJzdWFkZWQsIG91dCBvZiBmYXZvdXIgYW5kIGZyaWVuZHNoaXAsIHRvIGdvIG9uIGEgbWlzc2lvbiB0byBTcGFydGEuIE5vdyBUaGFsZXMgcGFzc2VkIGFzIGEgbHlyaWMgcG9ldCwgYW5kIHNjcmVlbmVkIGhpbXNlbGYgYmVoaW5kIHRoaXMgYXJ0LCBidXQgaW4gcmVhbGl0eSBoZSBkaWQgdGhlIHdvcmsgb2Ygb25lIG9mIHRoZSBtaWdodGllc3QgbGF3Z2l2ZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoaXMgb2RlcyB3ZXJlIHNvIG1hbnkgZXhob3J0YXRpb25zIHRvIG9iZWRpZW5jZSBhbmQgaGFybW9ueSwgYW5kIHRoZWlyIG1lYXN1cmVkIHJoeXRobXMgd2VyZSBwZXJtZWF0ZWQgd2l0aCBvcmRlcmVkIHRyYW5xdWlsbGl0eSwgc28gdGhhdCB0aG9zZSB3aG8gbGlzdGVuZWQgdG8gdGhlbSB3ZXJlIGluc2Vuc2libHkgc29mdGVuZWQgaW4gdGhlaXIgZGlzcG9zaXRpb25zLCBpbnNvbXVjaCB0aGF0IHRoZXkgcmVub3VuY2VkIHRoZSBtdXR1YWwgaGF0cmVkcyB3aGljaCB3ZXJlIHNvIHJpZmUgYXQgdGhhdCB0aW1lLCBhbmQgZHdlbHQgdG9nZXRoZXIgaW4gYSBjb21tb24gcHVyc3VpdCBvZiB3aGF0IHdhcyBoaWdoIGFuZCBub2JsZS4gVGhhbGVzLCB0aGVyZWZvcmUsIGFmdGVyIGEgZmFzaGlvbiwgd2FzIGEgZm9yZXJ1bm5lciBpbiBTcGFydGEgb2YgTHljdXJndXMgYW5kIGhpcyBkaXNjaXBsaW5lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIENyZXRlLCBMeWN1cmd1cyBzYWlsZWQgdG8gQXNpYSwgd2l0aCB0aGUgZGVzaXJlLCBhcyB3ZSBhcmUgdG9sZCwgb2YgY29tcGFyaW5nIHdpdGggdGhlIENyZXRhbiBjaXZpbGl6YXRpb24sIHdoaWNoIHdhcyBzaW1wbGUgYW5kIHNldmVyZSwgdGhhdCBvZiB0aGUgSW9uaWFucywgd2hpY2ggd2FzIGV4dHJhdmFnYW50IGFuZCBsdXh1cmlvdXMsIGp1c3QgYXMgYSBwaHlzaWNpYW4gY29tcGFyZXMgd2l0aCBoZWFsdGh5IGJvZGllcyB0aG9zZSB3aGljaCBhcmUgdW5zb3VuZCBhbmQgc2lja2x5OyBoZSBjb3VsZCB0aGVuIHN0dWR5IHRoZSBkaWZmZXJlbmNlIGluIHRoZWlyIG1vZGVzIG9mIGxpZmUgYW5kIGZvcm1zIG9mIGdvdmVybm1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHRvbywgYXMgaXQgd291bGQgYXBwZWFyLCBoZSBtYWRlIGhpcyBmaXJzdCBhY3F1YWludGFuY2Ugd2l0aCB0aGUgcG9lbXMgb2YgSG9tZXIsIHdoaWNoIHdlcmUgcHJlc2VydmVkIGFtb25nIHRoZSBwb3N0ZXJpdHkgb2YgQ3Jlb3BoeWx1czsgYW5kIHdoZW4gaGUgc2F3IHRoYXQgdGhlIHBvbGl0aWNhbCBhbmQgZGlzY2lwbGluYXJ5IGxlc3NvbnMgY29udGFpbmVkIGluIHRoZW0gd2VyZSB3b3J0aHkgb2Ygbm8gbGVzcyBzZXJpb3VzIGF0dGVudGlvbiB0aGFuIHRoZSBpbmNlbnRpdmVzIHRvIHBsZWFzdXJlIGFuZCBsaWNlbnNlIHdoaWNoIHRoZXkgc3VwcGxpZWQsIGhlIGVhZ2VybHkgY29waWVkIGFuZCBjb21waWxlZCB0aGVtIGluIG9yZGVyIHRvIHRha2UgdGhlbSBob21lIHdpdGggaGltLiBGb3IgdGhlc2UgZXBpY3MgYWxyZWFkeSBoYWQgYSBjZXJ0YWluIGZhaW50IHJlcHV0YXRpb24gYW1vbmcgdGhlIEdyZWVrcywgYW5kIGEgZmV3IHdlcmUgaW4gcG9zc2Vzc2lvbiBvZiBjZXJ0YWluIHBvcnRpb25zIG9mIHRoZW0sIGFzIHRoZSBwb2VtcyB3ZXJlIGNhcnJpZWQgaGVyZSBhbmQgdGhlcmUgYnkgY2hhbmNlOyBidXQgTHljdXJndXMgd2FzIHRoZSB2ZXJ5IGZpcnN0IHRvIG1ha2UgdGhlbSByZWFsbHkga25vd24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gQ3JldGUsIEx5Y3VyZ3VzIHNhaWxlZCB0byBBc2lhLCB3aXRoIHRoZSBkZXNpcmUsIGFzIHdlIGFyZSB0b2xkLCBvZiBjb21wYXJpbmcgd2l0aCB0aGUgQ3JldGFuIGNpdmlsaXphdGlvbiwgd2hpY2ggd2FzIHNpbXBsZSBhbmQgc2V2ZXJlLCB0aGF0IG9mIHRoZSBJb25pYW5zLCB3aGljaCB3YXMgZXh0cmF2YWdhbnQgYW5kIGx1eHVyaW91cywganVzdCBhcyBhIHBoeXNpY2lhbiBjb21wYXJlcyB3aXRoIGhlYWx0aHkgYm9kaWVzIHRob3NlIHdoaWNoIGFyZSB1bnNvdW5kIGFuZCBzaWNrbHk7IGhlIGNvdWxkIHRoZW4gc3R1ZHkgdGhlIGRpZmZlcmVuY2UgaW4gdGhlaXIgbW9kZXMgb2YgbGlmZSBhbmQgZm9ybXMgb2YgZ292ZXJubWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHRvbywgYXMgaXQgd291bGQgYXBwZWFyLCBoZSBtYWRlIGhpcyBmaXJzdCBhY3F1YWludGFuY2Ugd2l0aCB0aGUgcG9lbXMgb2YgSG9tZXIsIHdoaWNoIHdlcmUgcHJlc2VydmVkIGFtb25nIHRoZSBwb3N0ZXJpdHkgb2YgQ3Jlb3BoeWx1czsgYW5kIHdoZW4gaGUgc2F3IHRoYXQgdGhlIHBvbGl0aWNhbCBhbmQgZGlzY2lwbGluYXJ5IGxlc3NvbnMgY29udGFpbmVkIGluIHRoZW0gd2VyZSB3b3J0aHkgb2Ygbm8gbGVzcyBzZXJpb3VzIGF0dGVudGlvbiB0aGFuIHRoZSBpbmNlbnRpdmVzIHRvIHBsZWFzdXJlIGFuZCBsaWNlbnNlIHdoaWNoIHRoZXkgc3VwcGxpZWQsIGhlIGVhZ2VybHkgY29waWVkIGFuZCBjb21waWxlZCB0aGVtIGluIG9yZGVyIHRvIHRha2UgdGhlbSBob21lIHdpdGggaGltLiBGb3IgdGhlc2UgZXBpY3MgYWxyZWFkeSBoYWQgYSBjZXJ0YWluIGZhaW50IHJlcHV0YXRpb24gYW1vbmcgdGhlIEdyZWVrcywgYW5kIGEgZmV3IHdlcmUgaW4gcG9zc2Vzc2lvbiBvZiBjZXJ0YWluIHBvcnRpb25zIG9mIHRoZW0sIGFzIHRoZSBwb2VtcyB3ZXJlIGNhcnJpZWQgaGVyZSBhbmQgdGhlcmUgYnkgY2hhbmNlOyBidXQgTHljdXJndXMgd2FzIHRoZSB2ZXJ5IGZpcnN0IHRvIG1ha2UgdGhlbSByZWFsbHkga25vd24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBBZWd5cHRpYW5zIHRoaW5rIHRoYXQgTHljdXJndXMgdmlzaXRlZCB0aGVtIGFsc28sIGFuZCBzbyBhcmRlbnRseSBhZG1pcmVkIHRoZWlyIHNlcGFyYXRpb24gb2YgdGhlIG1pbGl0YXJ5IGZyb20gdGhlIG90aGVyIGNsYXNzZXMgb2Ygc29jaWV0eSB0aGF0IGhlIHRyYW5zZmVycmVkIGl0IHRvIFNwYXJ0YSwgYW5kIGJ5IHJlbW92aW5nIG1lY2hhbmljcyBhbmQgYXJ0aXNhbnMgZnJvbSBwYXJ0aWNpcGF0aW9uIGluIHRoZSBnb3Zlcm5tZW50LCBtYWRlIGhpcyBjaXZpbCBwb2xpdHkgcmVhbGx5IHJlZmluZWQgYW5kIHB1cmUuIEF0IGFueSByYXRlLCB0aGlzIGFzc2VydGlvbiBvZiB0aGUgQWVneXB0aWFucyBpcyBjb25maXJtZWQgYnkgc29tZSBHcmVlayBoaXN0b3JpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhhdCBMeWN1cmd1cyB2aXNpdGVkIExpYnlhIGFuZCBJYmVyaWEgYWxzbywgYW5kIHRoYXQgaGUgd2FuZGVyZWQgb3ZlciBJbmRpYSBhbmQgaGFkIGNvbmZlcmVuY2VzIHdpdGggdGhlIEd5bW5vc29waGlzdHMsIG5vIG9uZSBoYXMgc3RhdGVkLCBzbyBmYXIgYXMgSSBrbm93LCBleGNlcHQgQXJpc3RvY3JhdGVzIHRoZSBzb24gb2YgSGlwcGFyY2h1cywgdGhlIFNwYXJ0YW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBBZWd5cHRpYW5zIHRoaW5rIHRoYXQgTHljdXJndXMgdmlzaXRlZCB0aGVtIGFsc28sIGFuZCBzbyBhcmRlbnRseSBhZG1pcmVkIHRoZWlyIHNlcGFyYXRpb24gb2YgdGhlIG1pbGl0YXJ5IGZyb20gdGhlIG90aGVyIGNsYXNzZXMgb2Ygc29jaWV0eSB0aGF0IGhlIHRyYW5zZmVycmVkIGl0IHRvIFNwYXJ0YSwgYW5kIGJ5IHJlbW92aW5nIG1lY2hhbmljcyBhbmQgYXJ0aXNhbnMgZnJvbSBwYXJ0aWNpcGF0aW9uIGluIHRoZSBnb3Zlcm5tZW50LCBtYWRlIGhpcyBjaXZpbCBwb2xpdHkgcmVhbGx5IHJlZmluZWQgYW5kIHB1cmUuIEF0IGFueSByYXRlLCB0aGlzIGFzc2VydGlvbiBvZiB0aGUgQWVneXB0aWFucyBpcyBjb25maXJtZWQgYnkgc29tZSBHcmVlayBoaXN0b3JpYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IEx5Y3VyZ3VzIHZpc2l0ZWQgTGlieWEgYW5kIEliZXJpYSBhbHNvLCBhbmQgdGhhdCBoZSB3YW5kZXJlZCBvdmVyIEluZGlhIGFuZCBoYWQgY29uZmVyZW5jZXMgd2l0aCB0aGUgR3ltbm9zb3BoaXN0cywgbm8gb25lIGhhcyBzdGF0ZWQsIHNvIGZhciBhcyBJIGtub3csIGV4Y2VwdCBBcmlzdG9jcmF0ZXMgdGhlIHNvbiBvZiBIaXBwYXJjaHVzLCB0aGUgU3BhcnRhbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgTGFjZWRhZW1vbmlhbnMgbWlzc2VkIEx5Y3VyZ3VzIHNvcmVseSwgYW5kIHNlbnQgZm9yIGhpbSBtYW55IHRpbWVzLiBUaGV5IGZlbHQgdGhhdCB0aGVpciBraW5ncyB3ZXJlIHN1Y2ggaW4gbmFtZSBhbmQgc3RhdGlvbiBtZXJlbHksIGJ1dCBpbiBldmVyeXRoaW5nIGVsc2Ugd2VyZSBub3RoaW5nIGJldHRlciB0aGFuIHRoZWlyIHN1YmplY3RzLCB3aGlsZSBpbiBoaW0gdGhlcmUgd2FzIGEgbmF0dXJlIGZpdHRlZCB0byBsZWFkLCBhbmQgYSBwb3dlciB0byBtYWtlIG1lbiBmb2xsb3cgaGltLiBIb3dldmVyLCBub3QgZXZlbiB0aGUga2luZ3Mgd2VyZSBhdmVyc2UgdG8gaGF2aW5nIGhpbSBhdCBob21lLCBidXQgaG9wZWQgdGhhdCBpbiBoaXMgcHJlc2VuY2UgdGhlaXIgc3ViamVjdHMgd291bGQgdHJlYXQgdGhlbSB3aXRoIGxlc3MgaW5zb2xlbmNlLiBSZXR1cm5pbmcsIHRoZW4sIHRvIGEgcGVvcGxlIHRodXMgZGlzcG9zZWQsIGhlIGF0IG9uY2UgdW5kZXJ0b29rIHRvIGNoYW5nZSB0aGUgZXhpc3Rpbmcgb3JkZXIgb2YgdGhpbmdzIGFuZCByZXZvbHV0aW9uaXplIHRoZSBjaXZpbCBwb2xpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBjb252aW5jZWQgdGhhdCBhIHBhcnRpYWwgY2hhbmdlIG9mIHRoZSBsYXdzIHdvdWxkIGJlIG9mIG5vIGF2YWlsIHdoYXRzb2V2ZXIsIGJ1dCB0aGF0IGhlIG11c3QgcHJvY2VlZCBhcyBhIHBoeXNpY2lhbiB3b3VsZCB3aXRoIGEgcGF0aWVudCB3aG8gd2FzIGRlYmlsaXRhdGVkIGFuZCBmdWxsIG9mIGFsbCBzb3J0cyBvZiBkaXNlYXNlczsgaGUgbXVzdCByZWR1Y2UgYW5kIGFsdGVyIHRoZSBleGlzdGluZyB0ZW1wZXJhbWVudCBieSBtZWFucyBvZiBkcnVncyBhbmQgcHVyZ2VzLCBhbmQgaW50cm9kdWNlIGEgbmV3IGFuZCBkaWZmZXJlbnQgcmVnaW1lbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+RnVsbCBvZiB0aGlzIGRldGVybWluYXRpb24sIGhlIGZpcnN0IG1hZGUgYSBqb3VybmV5IHRvIERlbHBoaSwgYW5kIGFmdGVyIHNhY3JpZmljaW5nIHRvIHRoZSBnb2QgYW5kIGNvbnN1bHRpbmcgdGhlIG9yYWNsZSwgaGUgcmV0dXJuZWQgd2l0aCB0aGF0IGZhbW91cyByZXNwb25zZSBpbiB3aGljaCB0aGUgUHl0aGlhbiBwcmllc3Rlc3MgYWRkcmVzc2VkIGhpbSBhcyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJlbG92ZWQgb2YgdGhlIGdvZHMsIGFuZCByYXRoZXIgZ29kIHRoYW4gbWFuLDwvcT4gYW5kIHNhaWQgdGhhdCB0aGUgZ29kIGhhZCBncmFudGVkIGhpcyBwcmF5ZXIgZm9yIGdvb2QgbGF3cywgYW5kIHByb21pc2VkIGhpbSBhIGNvbnN0aXR1dGlvbiB3aGljaCBzaG91bGQgYmUgdGhlIGJlc3QgaW4gdGhlIHdvcmxkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgTGFjZWRhZW1vbmlhbnMgbWlzc2VkIEx5Y3VyZ3VzIHNvcmVseSwgYW5kIHNlbnQgZm9yIGhpbSBtYW55IHRpbWVzLiBUaGV5IGZlbHQgdGhhdCB0aGVpciBraW5ncyB3ZXJlIHN1Y2ggaW4gbmFtZSBhbmQgc3RhdGlvbiBtZXJlbHksIGJ1dCBpbiBldmVyeXRoaW5nIGVsc2Ugd2VyZSBub3RoaW5nIGJldHRlciB0aGFuIHRoZWlyIHN1YmplY3RzLCB3aGlsZSBpbiBoaW0gdGhlcmUgd2FzIGEgbmF0dXJlIGZpdHRlZCB0byBsZWFkLCBhbmQgYSBwb3dlciB0byBtYWtlIG1lbiBmb2xsb3cgaGltLiBIb3dldmVyLCBub3QgZXZlbiB0aGUga2luZ3Mgd2VyZSBhdmVyc2UgdG8gaGF2aW5nIGhpbSBhdCBob21lLCBidXQgaG9wZWQgdGhhdCBpbiBoaXMgcHJlc2VuY2UgdGhlaXIgc3ViamVjdHMgd291bGQgdHJlYXQgdGhlbSB3aXRoIGxlc3MgaW5zb2xlbmNlLiBSZXR1cm5pbmcsIHRoZW4sIHRvIGEgcGVvcGxlIHRodXMgZGlzcG9zZWQsIGhlIGF0IG9uY2UgdW5kZXJ0b29rIHRvIGNoYW5nZSB0aGUgZXhpc3Rpbmcgb3JkZXIgb2YgdGhpbmdzIGFuZCByZXZvbHV0aW9uaXplIHRoZSBjaXZpbCBwb2xpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBjb252aW5jZWQgdGhhdCBhIHBhcnRpYWwgY2hhbmdlIG9mIHRoZSBsYXdzIHdvdWxkIGJlIG9mIG5vIGF2YWlsIHdoYXRzb2V2ZXIsIGJ1dCB0aGF0IGhlIG11c3QgcHJvY2VlZCBhcyBhIHBoeXNpY2lhbiB3b3VsZCB3aXRoIGEgcGF0aWVudCB3aG8gd2FzIGRlYmlsaXRhdGVkIGFuZCBmdWxsIG9mIGFsbCBzb3J0cyBvZiBkaXNlYXNlczsgaGUgbXVzdCByZWR1Y2UgYW5kIGFsdGVyIHRoZSBleGlzdGluZyB0ZW1wZXJhbWVudCBieSBtZWFucyBvZiBkcnVncyBhbmQgcHVyZ2VzLCBhbmQgaW50cm9kdWNlIGEgbmV3IGFuZCBkaWZmZXJlbnQgcmVnaW1lbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZ1bGwgb2YgdGhpcyBkZXRlcm1pbmF0aW9uLCBoZSBmaXJzdCBtYWRlIGEgam91cm5leSB0byBEZWxwaGksIGFuZCBhZnRlciBzYWNyaWZpY2luZyB0byB0aGUgZ29kIGFuZCBjb25zdWx0aW5nIHRoZSBvcmFjbGUsIGhlIHJldHVybmVkIHdpdGggdGhhdCBmYW1vdXMgcmVzcG9uc2UgaW4gd2hpY2ggdGhlIFB5dGhpYW4gcHJpZXN0ZXNzIGFkZHJlc3NlZCBoaW0gYXMgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJlbG92ZWQgb2YgdGhlIGdvZHMsIGFuZCByYXRoZXIgZ29kIHRoYW4gbWFuLDwvcT4gYW5kIHNhaWQgdGhhdCB0aGUgZ29kIGhhZCBncmFudGVkIGhpcyBwcmF5ZXIgZm9yIGdvb2QgbGF3cywgYW5kIHByb21pc2VkIGhpbSBhIGNvbnN0aXR1dGlvbiB3aGljaCBzaG91bGQgYmUgdGhlIGJlc3QgaW4gdGhlIHdvcmxkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGVuY291cmFnZWQsIGhlIHRyaWVkIHRvIGJyaW5nIHRoZSBjaGllZiBtZW4gb2YgU3BhcnRhIG92ZXIgdG8gaGlzIHNpZGUsIGFuZCBleGhvcnRlZCB0aGVtIHRvIHB1dCB0aGVpciBoYW5kcyB0byB0aGUgd29yayB3aXRoIGhpbSwgZXhwbGFpbmluZyBoaXMgZGVzaWducyBzZWNyZXRseSB0byBoaXMgZnJpZW5kcyBhdCBmaXJzdCwgdGhlbiBsaXR0bGUgYnkgbGl0dGxlIGVuZ2FnaW5nIG1vcmUgYW5kIHVuaXRpbmcgdGhlbSB0byBhdHRlbXB0IHRoZSB0YXNrLiBBbmQgd2hlbiB0aGUgdGltZSBmb3IgYWN0aW9uIGNhbWUsIGhlIG9yZGVyZWQgdGhpcnR5IG9mIHRoZSBjaGllZiBtZW4gdG8gZ28gYXJtZWQgaW50byB0aGUgbWFya2V0LXBsYWNlIGF0IGJyZWFrIG9mIGRheSwgdG8gc3RyaWtlIGNvbnN0ZXJuYXRpb24gYW5kIHRlcnJvciBpbnRvIHRob3NlIG9mIHRoZSBvcHBvc2l0ZSBwYXJ0eS4gVGhlIG5hbWVzIG9mIHR3ZW50eSBvZiB0aGUgbW9zdCBlbWluZW50IGFtb25nIHRoZW0gaGF2ZSBiZWVuIHJlY29yZGVkIGJ5IEhlcm1pcHB1czsgYnV0IHRoZSBtYW4gd2hvIGhhZCB0aGUgbGFyZ2VzdCBzaGFyZSBpbiBhbGwgdGhlIHVuZGVydGFraW5ncyBvZiBMeWN1cmd1cyBhbmQgY29vcGVyYXRlZCB3aXRoIGhpbSBpbiB0aGUgZW5hY3RtZW50IG9mIGhpcyBsYXdzLCBib3JlIHRoZSBuYW1lIG9mIEFydGhtaWFkYXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHR1bXVsdCBiZWdhbiwgS2luZyBDaGFyaWxhw7xzLCBmZWFyaW5nIHRoYXQgdGhlIHdob2xlIGFmZmFpciB3YXMgYSBjb25zcGlyYWN5IGFnYWluc3QgaGltc2VsZiwgZmxlZCBmb3IgcmVmdWdlIHRvIHRoZSBCcmF6ZW4gSG91c2U8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIHRlbXBsZSBvZiBBdGhlbmEuPC9ub3RlPiBidXQgaGUgd2FzIHNvb24gY29udmluY2VkIG9mIGhpcyBlcnJvciwgYW5kIGhhdmluZyBleGFjdGVkIG9hdGhzIGZvciBoaXMgc2FmZXR5IGZyb20gdGhlIGFnaXRhdG9ycywgbGVmdCBoaXMgcGxhY2Ugb2YgcmVmdWdlLCBhbmQgZXZlbiBqb2luZWQgdGhlbSBpbiB0aGVpciBlbnRlcnByaXNlLCBiZWluZyBvZiBhIGdlbnRsZSBhbmQgeWllbGRpbmcgZGlzcG9zaXRpb24sIHNvIG11Y2ggc28sIGluZGVlZCwgdGhhdCBBcmNoZWxhw7xzLCBoaXMgcm95YWwgY29sbGVhZ3VlLCBpcyBzYWlkIHRvIGhhdmUgcmVtYXJrZWQgdG8gdGhvc2Ugd2hvIHdlcmUgZXh0b2xsaW5nIHRoZSB5b3VuZyBraW5nLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhvdyBjYW4gQ2hhcmlsYcO8cyBiZSBhIGdvb2QgbWFuLCB3aGVuIGhlIGhhcyBubyBzZXZlcml0eSBldmVuIGZvciB0aGUgYmFkPzwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgZW5jb3VyYWdlZCwgaGUgdHJpZWQgdG8gYnJpbmcgdGhlIGNoaWVmIG1lbiBvZiBTcGFydGEgb3ZlciB0byBoaXMgc2lkZSwgYW5kIGV4aG9ydGVkIHRoZW0gdG8gcHV0IHRoZWlyIGhhbmRzIHRvIHRoZSB3b3JrIHdpdGggaGltLCBleHBsYWluaW5nIGhpcyBkZXNpZ25zIHNlY3JldGx5IHRvIGhpcyBmcmllbmRzIGF0IGZpcnN0LCB0aGVuIGxpdHRsZSBieSBsaXR0bGUgZW5nYWdpbmcgbW9yZSBhbmQgdW5pdGluZyB0aGVtIHRvIGF0dGVtcHQgdGhlIHRhc2suIEFuZCB3aGVuIHRoZSB0aW1lIGZvciBhY3Rpb24gY2FtZSwgaGUgb3JkZXJlZCB0aGlydHkgb2YgdGhlIGNoaWVmIG1lbiB0byBnbyBhcm1lZCBpbnRvIHRoZSBtYXJrZXQtcGxhY2UgYXQgYnJlYWsgb2YgZGF5LCB0byBzdHJpa2UgY29uc3Rlcm5hdGlvbiBhbmQgdGVycm9yIGludG8gdGhvc2Ugb2YgdGhlIG9wcG9zaXRlIHBhcnR5LiBUaGUgbmFtZXMgb2YgdHdlbnR5IG9mIHRoZSBtb3N0IGVtaW5lbnQgYW1vbmcgdGhlbSBoYXZlIGJlZW4gcmVjb3JkZWQgYnkgSGVybWlwcHVzOyBidXQgdGhlIG1hbiB3aG8gaGFkIHRoZSBsYXJnZXN0IHNoYXJlIGluIGFsbCB0aGUgdW5kZXJ0YWtpbmdzIG9mIEx5Y3VyZ3VzIGFuZCBjb29wZXJhdGVkIHdpdGggaGltIGluIHRoZSBlbmFjdG1lbnQgb2YgaGlzIGxhd3MsIGJvcmUgdGhlIG5hbWUgb2YgQXJ0aG1pYWRhcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHR1bXVsdCBiZWdhbiwgS2luZyBDaGFyaWxhw7xzLCBmZWFyaW5nIHRoYXQgdGhlIHdob2xlIGFmZmFpciB3YXMgYSBjb25zcGlyYWN5IGFnYWluc3QgaGltc2VsZiwgZmxlZCBmb3IgcmVmdWdlIHRvIHRoZSBCcmF6ZW4gSG91c2U8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgdGVtcGxlIG9mIEF0aGVuYS48L25vdGU+IGJ1dCBoZSB3YXMgc29vbiBjb252aW5jZWQgb2YgaGlzIGVycm9yLCBhbmQgaGF2aW5nIGV4YWN0ZWQgb2F0aHMgZm9yIGhpcyBzYWZldHkgZnJvbSB0aGUgYWdpdGF0b3JzLCBsZWZ0IGhpcyBwbGFjZSBvZiByZWZ1Z2UsIGFuZCBldmVuIGpvaW5lZCB0aGVtIGluIHRoZWlyIGVudGVycHJpc2UsIGJlaW5nIG9mIGEgZ2VudGxlIGFuZCB5aWVsZGluZyBkaXNwb3NpdGlvbiwgc28gbXVjaCBzbywgaW5kZWVkLCB0aGF0IEFyY2hlbGHDvHMsIGhpcyByb3lhbCBjb2xsZWFndWUsIGlzIHNhaWQgdG8gaGF2ZSByZW1hcmtlZCB0byB0aG9zZSB3aG8gd2VyZSBleHRvbGxpbmcgdGhlIHlvdW5nIGtpbmcsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ib3cgY2FuIENoYXJpbGHDvHMgYmUgYSBnb29kIG1hbiwgd2hlbiBoZSBoYXMgbm8gc2V2ZXJpdHkgZXZlbiBmb3IgdGhlIGJhZD88L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZSBtYW55IGlubm92YXRpb25zIHdoaWNoIEx5Y3VyZ3VzIG1hZGUsIHRoZSBmaXJzdCBhbmQgbW9zdCBpbXBvcnRhbnQgd2FzIGhpcyBpbnN0aXR1dGlvbiBvZiBhIHNlbmF0ZSwgb3IgQ291bmNpbCBvZiBFbGRlcnMsIHdoaWNoLCBhcyBQbGF0byBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTGF3cyA2OTFlIiB2YWxpZD0ieWVzIj5MYXdzLCBwLiA2OTEgZS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYnkgYmVpbmcgYmxlbmRlZCB3aXRoIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZldmVyaXNoPC9xPiBnb3Zlcm5tZW50IG9mIHRoZSBraW5ncywgYW5kIGJ5IGhhdmluZyBhbiBlcXVhbCB2b3RlIHdpdGggdGhlbSBpbiBtYXR0ZXJzIG9mIHRoZSBoaWdoZXN0IGltcG9ydGFuY2UsIGJyb3VnaHQgc2FmZXR5IGFuZCBkdWUgbW9kZXJhdGlvbiBpbnRvIGNvdW5zZWxzIG9mIHN0YXRlLiBGb3IgYmVmb3JlIHRoaXMgdGhlIGNpdmlsIHBvbGl0eSB3YXMgdmVlcmluZyBhbmQgdW5zdGVhZHksIGluY2xpbmluZyBhdCBvbmUgdGltZSB0byBmb2xsb3cgdGhlIGtpbmdzIHRvd2FyZHMgdHlyYW5ueSwgYW5kIGF0IGFub3RoZXIgdG8gZm9sbG93IHRoZSBtdWx0aXR1ZGUgdG93YXJkcyBkZW1vY3JhY3k7IAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBub3csIGJ5IG1ha2luZyB0aGUgcG93ZXIgb2YgdGhlIHNlbmF0ZSBhIHNvcnQgb2YgYmFsbGFzdCBmb3IgdGhlIHNoaXAgb2Ygc3RhdGUgYW5kIHB1dHRpbmcgaGVyIG9uIGEgc3RlYWR5IGtlZWwsIGl0IGFjaGlldmVkIHRoZSBzYWZlc3QgYW5kIHRoZSBtb3N0IG9yZGVybHkgYXJyYW5nZW1lbnQsIHNpbmNlIHRoZSB0d2VudHktZWlnaHQgc2VuYXRvcnMgYWx3YXlzIHRvb2sgdGhlIHNpZGUgb2YgdGhlIGtpbmdzIHdoZW4gaXQgd2FzIGEgcXVlc3Rpb24gb2YgY3VyYmluZyBkZW1vY3JhY3ksIGFuZCwgb24gdGhlIG90aGVyIGhhbmQsIGFsd2F5cyBzdHJlbmd0aGVuZWQgdGhlIHBlb3BsZSB0byB3aXRoc3RhbmQgdGhlIGVuY3JvYWNobWVudHMgb2YgdHlyYW5ueS4gVGhlIG51bWJlciBvZiB0aGUgc2VuYXRvcnMgd2FzIGZpeGVkIGF0IHR3ZW50eS1laWdodCBiZWNhdXNlLCBhY2NvcmRpbmcgdG8gQXJpc3RvdGxlLCB0d28gb2YgdGhlIHRoaXJ0eSBvcmlnaW5hbCBhc3NvY2lhdGVzIG9mIEx5Y3VyZ3VzIGFiYW5kb25lZCB0aGUgZW50ZXJwcmlzZSBmcm9tIGxhY2sgb2YgY291cmFnZS4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFNwaGFlcnVzIHNheXMgdGhhdCB0aGlzIHdhcyBvcmlnaW5hbGx5IHRoZSBudW1iZXIgb2YgdGhvc2Ugd2hvIHNoYXJlZCB0aGUgY29uZmlkZW5jZSBvZiBMeWN1cmd1cyBQb3NzaWJseSB0aGVyZSBpcyBzb21lIHZpcnR1ZSBpbiB0aGlzIG51bWJlciBiZWluZyBtYWRlIHVwIG9mIHNldmVuIG11bHRpcGxpZWQgYnkgZm91ciwgYXBhcnQgZnJvbSB0aGUgZmFjdCB0aGF0LCBiZWluZyBlcXVhbCB0byB0aGUgc3VtIG9mIGl0cyBvd24gZmFjdG9ycywgaXQgaXMgdGhlIG5leHQgcGVyZmVjdCBudW1iZXIgYWZ0ZXIgc2l4LiBCdXQgaW4gbXkgb3duIG9waW5pb24sIEx5Y3VyZ3VzIG1hZGUgdGhlIHNlbmF0b3JzIG9mIGp1c3QgdGhhdCBudW1iZXIgaW4gb3JkZXIgdGhhdCB0aGUgdG90YWwgbWlnaHQgYmUgdGhpcnR5IHdoZW4gdGhlIHR3byBraW5ncyB3ZXJlIGFkZGVkIHRvIHRoZSBlaWdodCBhbmQgdHdlbnR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZSBtYW55IGlubm92YXRpb25zIHdoaWNoIEx5Y3VyZ3VzIG1hZGUsIHRoZSBmaXJzdCBhbmQgbW9zdCBpbXBvcnRhbnQgd2FzIGhpcyBpbnN0aXR1dGlvbiBvZiBhIHNlbmF0ZSwgb3IgQ291bmNpbCBvZiBFbGRlcnMsIHdoaWNoLCBhcyBQbGF0byBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIExhd3MgNjkxZSIgdmFsaWQ9InllcyI+TGF3cywgcC4gNjkxIGUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ5IGJlaW5nIGJsZW5kZWQgd2l0aCB0aGUgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMYXdzIDY5MWUiIHZhbGlkPSJ5ZXMiPkxhd3MsIHAuIDY5MSBlLjwvYmlibD4KICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mZXZlcmlzaDwvcT4gZ292ZXJubWVudCBvZiB0aGUga2luZ3MsIGFuZCBieSBoYXZpbmcgYW4gZXF1YWwgdm90ZSB3aXRoIHRoZW0gaW4gbWF0dGVycyBvZiB0aGUgaGlnaGVzdCBpbXBvcnRhbmNlLCBicm91Z2h0IHNhZmV0eSBhbmQgZHVlIG1vZGVyYXRpb24gaW50byBjb3Vuc2VscyBvZiBzdGF0ZS4gRm9yIGJlZm9yZSB0aGlzIHRoZSBjaXZpbCBwb2xpdHkgd2FzIHZlZXJpbmcgYW5kIHVuc3RlYWR5LCBpbmNsaW5pbmcgYXQgb25lIHRpbWUgdG8gZm9sbG93IHRoZSBraW5ncyB0b3dhcmRzIHR5cmFubnksIGFuZCBhdCBhbm90aGVyIHRvIGZvbGxvdyB0aGUgbXVsdGl0dWRlIHRvd2FyZHMgZGVtb2NyYWN5OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBub3csIGJ5IG1ha2luZyB0aGUgcG93ZXIgb2YgdGhlIHNlbmF0ZSBhIHNvcnQgb2YgYmFsbGFzdCBmb3IgdGhlIHNoaXAgb2Ygc3RhdGUgYW5kIHB1dHRpbmcgaGVyIG9uIGEgc3RlYWR5IGtlZWwsIGl0IGFjaGlldmVkIHRoZSBzYWZlc3QgYW5kIHRoZSBtb3N0IG9yZGVybHkgYXJyYW5nZW1lbnQsIHNpbmNlIHRoZSB0d2VudHktZWlnaHQgc2VuYXRvcnMgYWx3YXlzIHRvb2sgdGhlIHNpZGUgb2YgdGhlIGtpbmdzIHdoZW4gaXQgd2FzIGEgcXVlc3Rpb24gb2YgY3VyYmluZyBkZW1vY3JhY3ksIGFuZCwgb24gdGhlIG90aGVyIGhhbmQsIGFsd2F5cyBzdHJlbmd0aGVuZWQgdGhlIHBlb3BsZSB0byB3aXRoc3RhbmQgdGhlIGVuY3JvYWNobWVudHMgb2YgdHlyYW5ueS4gVGhlIG51bWJlciBvZiB0aGUgc2VuYXRvcnMgd2FzIGZpeGVkIGF0IHR3ZW50eS1laWdodCBiZWNhdXNlLCBhY2NvcmRpbmcgdG8gQXJpc3RvdGxlLCB0d28gb2YgdGhlIHRoaXJ0eSBvcmlnaW5hbCBhc3NvY2lhdGVzIG9mIEx5Y3VyZ3VzIGFiYW5kb25lZCB0aGUgZW50ZXJwcmlzZSBmcm9tIGxhY2sgb2YgY291cmFnZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTcGhhZXJ1cyBzYXlzIHRoYXQgdGhpcyB3YXMgb3JpZ2luYWxseSB0aGUgbnVtYmVyIG9mIHRob3NlIHdobyBzaGFyZWQgdGhlIGNvbmZpZGVuY2Ugb2YgTHljdXJndXMgUG9zc2libHkgdGhlcmUgaXMgc29tZSB2aXJ0dWUgaW4gdGhpcyBudW1iZXIgYmVpbmcgbWFkZSB1cCBvZiBzZXZlbiBtdWx0aXBsaWVkIGJ5IGZvdXIsIGFwYXJ0IGZyb20gdGhlIGZhY3QgdGhhdCwgYmVpbmcgZXF1YWwgdG8gdGhlIHN1bSBvZiBpdHMgb3duIGZhY3RvcnMsIGl0IGlzIHRoZSBuZXh0IHBlcmZlY3QgbnVtYmVyIGFmdGVyIHNpeC4gQnV0IGluIG15IG93biBvcGluaW9uLCBMeWN1cmd1cyBtYWRlIHRoZSBzZW5hdG9ycyBvZiBqdXN0IHRoYXQgbnVtYmVyIGluIG9yZGVyIHRoYXQgdGhlIHRvdGFsIG1pZ2h0IGJlIHRoaXJ0eSB3aGVuIHRoZSB0d28ga2luZ3Mgd2VyZSBhZGRlZCB0byB0aGUgZWlnaHQgYW5kIHR3ZW50eS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBlYWdlciB3YXMgTHljdXJndXMgZm9yIHRoZSBlc3RhYmxpc2htZW50IG9mIHRoaXMgZm9ybSBvZiBnb3Zlcm5tZW50LCB0aGF0IGhlIG9idGFpbmVkIGFuIG9yYWNsZSBmcm9tIERlbHBoaSBhYm91dCBpdCwgd2hpY2ggdGhleSBjYWxsIGEgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5yaGV0cmEuPC9xPiBBbmQgdGhpcyBpcyB0aGUgd2F5IGl0IHJ1bnM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hlbiB0aG91IGhhc3QgYnVpbHQgYSB0ZW1wbGUgdG8gWmV1cyBTeWxsYW5pdXMgYW5kIEF0aGVuYSBTeWxsYW5pYSwgZGl2aWRlZCB0aGUgcGVvcGxlIGludG8g4oCYcGh5bGFp4oCZIGFuZCBpbnRvIOKAmG9iYWks4oCZIGFuZCBlc3RhYmxpc2hlZCBhIHNlbmF0ZSBvZiB0aGlydHkgbWVtYmVycywgaW5jbHVkaW5nIHRoZSDigJhhcmNoYWdldGFpLOKAmSB0aGVuIGZyb20gdGltZSB0byB0aW1lIOKAmGFwcGVsbGF6ZWlu4oCZIGJldHdlZW4gQmFieWNhIGFuZCBDbmFjaW9uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHJvYmFibHkgbmFtZXMgb2Ygc21hbGwgdHJpYnV0YXJpZXMgb2YgdGhlIHJpdmVyIEV1cm90YXMuPC9ub3RlPiBhbmQgdGhlcmUgaW50cm9kdWNlIGFuZCByZXNjaW5kIG1lYXN1cmVzOyBidXQgdGhlIHBlb3BsZSBtdXN0IGhhdmUgdGhlIGRlY2lkaW5nIHZvaWNlIGFuZCB0aGUgcG93ZXIuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZXNlIGNsYXVzZXMsIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBoeWxhaTwvcT4gYW5kIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm9iYWk8L3E+IHJlZmVyIHRvIGRpdmlzaW9ucyBhbmQgZGlzdHJpYnV0aW9ucyBvZiB0aGUgcGVvcGxlIGludG8gPGVtcGg+Y2xhbnM8L2VtcGg+IGFuZCA8ZW1waD5waHJhdHJpZXM8L2VtcGg+LCBvciA8ZW1waD5icm90aGVyaG9vZHM8L2VtcGg+OyBieSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFyY2hhZ2V0YWk8L3E+IHRoZSA8ZW1waD5raW5nczwvZW1waD4gYXJlIGRlc2lnbmF0ZWQsIGFuZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFwZWxsYXplaW48L3E+IG1lYW5zIDxlbXBoPnRvIGFzc2VtYmxlPC9lbXBoPiB0aGUgcGVvcGxlLCB3aXRoIGEgcmVmZXJlbmNlIHRvIDxlbXBoPkFwb2xsbzwvZW1waD4sIHRoZSBQeXRoaWFuIGdvZCwgd2hvIHdhcyB0aGUgc291cmNlIGFuZCBhdXRob3Igb2YgdGhlIHBvbGl0eS4gVGhlIEJhYnljYSBpcyBub3cgY2FsbGVkIENoZWltYXJydXMsIGFuZCB0aGUgQ25hY2lvbiBPZW51czsgYnV0IEFyaXN0b3RsZSBzYXlzIHRoYXQgQ25hY2lvbiBpcyBhIHJpdmVyLCBhbmQgQmFieWNhIGEgYnJpZGdlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CZXR3ZWVuIHRoZXNlIHRoZXkgaGVsZCB0aGVpciBhc3NlbWJsaWVzLCBoYXZpbmcgbmVpdGhlciBoYWxscyBub3IgYW55IG90aGVyIGtpbmQgb2YgYnVpbGRpbmcgZm9yIHRoZSBwdXJwb3NlLiBGb3IgYnkgc3VjaCB0aGluZ3MgTHljdXJndXMgdGhvdWdodCBnb29kIGNvdW5zZWwgd2FzIG5vdCBwcm9tb3RlZCwgYnV0IHJhdGhlciBkaXNjb3VyYWdlZCwgc2luY2UgdGhlIHNlcmlvdXMgcHVycG9zZXMgb2YgYW4gYXNzZW1ibHkgd2VyZSByZW5kZXJlZCBmb29saXNoIGFuZCBmdXRpbGUgYnkgdmFpbiB0aG91Z2h0cywgYXMgdGhleSBnYXplZCB1cG9uIHN0YXR1ZXMgYW5kIHBhaW50aW5ncywgb3Igc2NlbmljIGVtYmVsbGlzaG1lbnRzLCBvciBleHRyYXZhZ2FudGx5IGRlY29yYXRlZCByb29mcyBvZiBjb3VuY2lsIGhhbGxzLiBXaGVuIHRoZSBtdWx0aXR1ZGUgd2FzIHRodXMgYXNzZW1ibGVkLCBubyBvbmUgb2YgdGhlbSB3YXMgcGVybWl0dGVkIHRvIG1ha2UgYSBtb3Rpb24sIGJ1dCB0aGUgbW90aW9uIGxhaWQgYmVmb3JlIHRoZW0gYnkgdGhlIHNlbmF0b3JzIGFuZCBraW5ncyBjb3VsZCBiZSBhY2NlcHRlZCBvciByZWplY3RlZCBieSB0aGUgcGVvcGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlcndhcmRzLCBob3dldmVyLCB3aGVuIHRoZSBwZW9wbGUgYnkgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgcGVydmVydGVkIGFuZCBkaXN0b3J0ZWQgdGhlIHNlbnNlIG9mIG1vdGlvbnMgbGFpZCBiZWZvcmUgdGhlbSwgS2luZ3MgUG9seWRvcnVzIGFuZCBUaGVvcG9tcHVzIGluc2VydGVkIHRoaXMgY2xhdXNlIGludG8gdGhlIHJoZXRyYTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgaWYgdGhlIHBlb3BsZSBzaG91bGQgYWRvcHQgYSBkaXN0b3J0ZWQgbW90aW9uLCB0aGUgc2VuYXRvcnMgYW5kIGtpbmdzIHNoYWxsIGhhdmUgcG93ZXIgb2YgYWRqb3Vybm1lbnQ8L3E+OyB0aGF0IGlzLCBzaG91bGQgbm90IHJhdGlmeSB0aGUgdm90ZSwgYnV0IGRpc21pc3Mgb3V0cmlnaHQgYW5kIGRpc3NvbHZlIHRoZSBzZXNzaW9uLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaXQgd2FzIHBlcnZlcnRpbmcgYW5kIGNoYW5naW5nIHRoZSBtb3Rpb24gY29udHJhcnkgdG8gdGhlIGJlc3QgaW50ZXJlc3RzIG9mIHRoZSBzdGF0ZS4gQW5kIHRoZXkgd2VyZSBhY3R1YWxseSBhYmxlIHRvIHBlcnN1YWRlIHRoZSBjaXR5IHRoYXQgdGhlIGdvZCBhdXRob3JpemVkIHRoaXMgYWRkaXRpb24gdG8gdGhlIHJoZXRyYSwgYXMgVHlydGFldXMgcmVtaW5kcyB1cyBpbiB0aGVzZSB2ZXJzZXM64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPlBob2VidXMgQXBvbGxvJ3MgdGhlIG1hbmRhdGUgd2FzIHdoaWNoIHRoZXkgYnJvdWdodCBmcm9tIFB5dGhvLDwvbD4KCQkJCQkgICAgICAgICAgPGw+Vm9pY2luZyB0aGUgd2lsbCBvZiB0aGUgZ29kLCBub3Igd2VyZSBoaXMgd29yZHMgdW5mdWxmaWxsZWQ6PC9sPgoJCQkJCSAgICAgICAgICA8bD5Td2F5IGluIHRoZSBjb3VuY2lsIGFuZCBob25vdXJzIGRpdmluZSBiZWxvbmcgdG8gdGhlIHByaW5jZXM8L2w+CgkJCQkJICAgICAgICAgIDxsPlVuZGVyIHdob3NlIGNhcmUgaGFzIGJlZW4gc2V0IFNwYXJ0YSdzIGNpdHkgb2YgY2hhcm07PC9sPgoJCQkJCSAgICAgICAgICA8bD5TZWNvbmQgdG8gdGhlbSBhcmUgdGhlIGVsZGVycywgYW5kIG5leHQgY29tZSB0aGUgbWVuIG9mIHRoZSBwZW9wbGU8L2w+CgkJCQkJICAgICAgICAgIDxsPkR1bHkgY29uZmlybWluZyBieSB2b3RlIHVucGVydmVydGVkIGRlY3JlZXMuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBlYWdlciB3YXMgTHljdXJndXMgZm9yIHRoZSBlc3RhYmxpc2htZW50IG9mIHRoaXMgZm9ybSBvZiBnb3Zlcm5tZW50LCB0aGF0IGhlIG9idGFpbmVkIGFuIG9yYWNsZSBmcm9tIERlbHBoaSBhYm91dCBpdCwgd2hpY2ggdGhleSBjYWxsIGEgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnJoZXRyYS48L3E+IEFuZCB0aGlzIGlzIHRoZSB3YXkgaXQgcnVuczogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoZW4gdGhvdSBoYXN0IGJ1aWx0IGEgdGVtcGxlIHRvIFpldXMgU3lsbGFuaXVzIGFuZCBBdGhlbmEgU3lsbGFuaWEsIGRpdmlkZWQgdGhlIHBlb3BsZSBpbnRvIOKAmHBoeWxhaeKAmSBhbmQgaW50byDigJhvYmFpLOKAmSBhbmQgZXN0YWJsaXNoZWQgYSBzZW5hdGUgb2YgdGhpcnR5IG1lbWJlcnMsIGluY2x1ZGluZyB0aGUg4oCYYXJjaGFnZXRhaSzigJkgdGhlbiBmcm9tIHRpbWUgdG8gdGltZSDigJhhcHBlbGxhemVpbuKAmSBiZXR3ZWVuIEJhYnljYSBhbmQgQ25hY2lvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHJvYmFibHkgbmFtZXMgb2Ygc21hbGwgdHJpYnV0YXJpZXMgb2YgdGhlIHJpdmVyIEV1cm90YXMuPC9ub3RlPiBhbmQgdGhlcmUgaW50cm9kdWNlIGFuZCByZXNjaW5kIG1lYXN1cmVzOyBidXQgdGhlIHBlb3BsZSBtdXN0IGhhdmUgdGhlIGRlY2lkaW5nIHZvaWNlIGFuZCB0aGUgcG93ZXIuPC9xPiAKCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qcm9iYWJseSBuYW1lcyBvZiBzbWFsbCB0cmlidXRhcmllcyBvZiB0aGUgcml2ZXIgRXVyb3Rhcy48L25vdGU+IGFuZCB0aGVyZSBpbnRyb2R1Y2UgYW5kIHJlc2NpbmQgbWVhc3VyZXM7IGJ1dCB0aGUgcGVvcGxlIG11c3QgaGF2ZSB0aGUgZGVjaWRpbmcgdm9pY2UgYW5kIHRoZSBwb3dlci48L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZXNlIGNsYXVzZXMsIHRoZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGh5bGFpPC9xPiBhbmQgdGhlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vYmFpPC9xPiByZWZlciB0byBkaXZpc2lvbnMgYW5kIGRpc3RyaWJ1dGlvbnMgb2YgdGhlIHBlb3BsZSBpbnRvIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Y2xhbnM8L2VtcGg+IGFuZCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnBocmF0cmllczwvZW1waD4sIG9yIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YnJvdGhlcmhvb2RzPC9lbXBoPjsgYnkgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFyY2hhZ2V0YWk8L3E+IHRoZSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmtpbmdzPC9lbXBoPiBhcmUgZGVzaWduYXRlZCwgYW5kIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hcGVsbGF6ZWluPC9xPiBtZWFucyA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnRvIGFzc2VtYmxlPC9lbXBoPiB0aGUgcGVvcGxlLCB3aXRoIGEgcmVmZXJlbmNlIHRvIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXBvbGxvPC9lbXBoPiwgdGhlIFB5dGhpYW4gZ29kLCB3aG8gd2FzIHRoZSBzb3VyY2UgYW5kIGF1dGhvciBvZiB0aGUgcG9saXR5LiBUaGUgQmFieWNhIGlzIG5vdyBjYWxsZWQgQ2hlaW1hcnJ1cywgYW5kIHRoZSBDbmFjaW9uIE9lbnVzOyBidXQgQXJpc3RvdGxlIHNheXMgdGhhdCBDbmFjaW9uIGlzIGEgcml2ZXIsIGFuZCBCYWJ5Y2EgYSBicmlkZ2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJldHdlZW4gdGhlc2UgdGhleSBoZWxkIHRoZWlyIGFzc2VtYmxpZXMsIGhhdmluZyBuZWl0aGVyIGhhbGxzIG5vciBhbnkgb3RoZXIga2luZCBvZiBidWlsZGluZyBmb3IgdGhlIHB1cnBvc2UuIEZvciBieSBzdWNoIHRoaW5ncyBMeWN1cmd1cyB0aG91Z2h0IGdvb2QgY291bnNlbCB3YXMgbm90IHByb21vdGVkLCBidXQgcmF0aGVyIGRpc2NvdXJhZ2VkLCBzaW5jZSB0aGUgc2VyaW91cyBwdXJwb3NlcyBvZiBhbiBhc3NlbWJseSB3ZXJlIHJlbmRlcmVkIGZvb2xpc2ggYW5kIGZ1dGlsZSBieSB2YWluIHRob3VnaHRzLCBhcyB0aGV5IGdhemVkIHVwb24gc3RhdHVlcyBhbmQgcGFpbnRpbmdzLCBvciBzY2VuaWMgZW1iZWxsaXNobWVudHMsIG9yIGV4dHJhdmFnYW50bHkgZGVjb3JhdGVkIHJvb2ZzIG9mIGNvdW5jaWwgaGFsbHMuIFdoZW4gdGhlIG11bHRpdHVkZSB3YXMgdGh1cyBhc3NlbWJsZWQsIG5vIG9uZSBvZiB0aGVtIHdhcyBwZXJtaXR0ZWQgdG8gbWFrZSBhIG1vdGlvbiwgYnV0IHRoZSBtb3Rpb24gbGFpZCBiZWZvcmUgdGhlbSBieSB0aGUgc2VuYXRvcnMgYW5kIGtpbmdzIGNvdWxkIGJlIGFjY2VwdGVkIG9yIHJlamVjdGVkIGJ5IHRoZSBwZW9wbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyd2FyZHMsIGhvd2V2ZXIsIHdoZW4gdGhlIHBlb3BsZSBieSBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBwZXJ2ZXJ0ZWQgYW5kIGRpc3RvcnRlZCB0aGUgc2Vuc2Ugb2YgbW90aW9ucyBsYWlkIGJlZm9yZSB0aGVtLCBLaW5ncyBQb2x5ZG9ydXMgYW5kIFRoZW9wb21wdXMgaW5zZXJ0ZWQgdGhpcyBjbGF1c2UgaW50byB0aGUgcmhldHJhOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGlmIHRoZSBwZW9wbGUgc2hvdWxkIGFkb3B0IGEgZGlzdG9ydGVkIG1vdGlvbiwgdGhlIHNlbmF0b3JzIGFuZCBraW5ncyBzaGFsbCBoYXZlIHBvd2VyIG9mIGFkam91cm5tZW50PC9xPjsgdGhhdCBpcywgc2hvdWxkIG5vdCByYXRpZnkgdGhlIHZvdGUsIGJ1dCBkaXNtaXNzIG91dHJpZ2h0IGFuZCBkaXNzb2x2ZSB0aGUgc2Vzc2lvbiwgb24gdGhlIGdyb3VuZCB0aGF0IGl0IHdhcyBwZXJ2ZXJ0aW5nIGFuZCBjaGFuZ2luZyB0aGUgbW90aW9uIGNvbnRyYXJ5IHRvIHRoZSBiZXN0IGludGVyZXN0cyBvZiB0aGUgc3RhdGUuIEFuZCB0aGV5IHdlcmUgYWN0dWFsbHkgYWJsZSB0byBwZXJzdWFkZSB0aGUgY2l0eSB0aGF0IHRoZSBnb2QgYXV0aG9yaXplZCB0aGlzIGFkZGl0aW9uIHRvIHRoZSByaGV0cmEsIGFzIFR5cnRhZXVzIHJlbWluZHMgdXMgaW4gdGhlc2UgdmVyc2VzOuKAlAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhvZWJ1cyBBcG9sbG8ncyB0aGUgbWFuZGF0ZSB3YXMgd2hpY2ggdGhleSBicm91Z2h0IGZyb20gUHl0aG8sPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlZvaWNpbmcgdGhlIHdpbGwgb2YgdGhlIGdvZCwgbm9yIHdlcmUgaGlzIHdvcmRzIHVuZnVsZmlsbGVkOjwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Td2F5IGluIHRoZSBjb3VuY2lsIGFuZCBob25vdXJzIGRpdmluZSBiZWxvbmcgdG8gdGhlIHByaW5jZXM8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VW5kZXIgd2hvc2UgY2FyZSBoYXMgYmVlbiBzZXQgU3BhcnRhJ3MgY2l0eSBvZiBjaGFybTs8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2Vjb25kIHRvIHRoZW0gYXJlIHRoZSBlbGRlcnMsIGFuZCBuZXh0IGNvbWUgdGhlIG1lbiBvZiB0aGUgcGVvcGxlPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkR1bHkgY29uZmlybWluZyBieSB2b3RlIHVucGVydmVydGVkIGRlY3JlZXMuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlBob2VidXMgQXBvbGxvJ3MgdGhlIG1hbmRhdGUgd2FzIHdoaWNoIHRoZXkgYnJvdWdodCBmcm9tIFB5dGhvLDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Wb2ljaW5nIHRoZSB3aWxsIG9mIHRoZSBnb2QsIG5vciB3ZXJlIGhpcyB3b3JkcyB1bmZ1bGZpbGxlZDo8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3dheSBpbiB0aGUgY291bmNpbCBhbmQgaG9ub3VycyBkaXZpbmUgYmVsb25nIHRvIHRoZSBwcmluY2VzPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlVuZGVyIHdob3NlIGNhcmUgaGFzIGJlZW4gc2V0IFNwYXJ0YSdzIGNpdHkgb2YgY2hhcm07PC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlNlY29uZCB0byB0aGVtIGFyZSB0aGUgZWxkZXJzLCBhbmQgbmV4dCBjb21lIHRoZSBtZW4gb2YgdGhlIHBlb3BsZTwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5EdWx5IGNvbmZpcm1pbmcgYnkgdm90ZSB1bnBlcnZlcnRlZCBkZWNyZWVzLjwvbD4KCQkJCSAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbHRob3VnaCBMeWN1cmd1cyB0aHVzIHRlbXBlcmVkIGhpcyBjaXZpbCBwb2xpdHksIG5ldmVydGhlbGVzcyB0aGUgb2xpZ2FyY2hpY2FsIGVsZW1lbnQgaW4gaXQgd2FzIHN0aWxsIHVubWl4ZWQgYW5kIGRvbWluYW50LCBhbmQgaGlzIHN1Y2Nlc3NvcnMsIHNlZWluZyBpdCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnN3ZWxsaW5nIGFuZCBmb2FtaW5nLDwvcT4gYXMgUGxhdG8gc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYXQuIExhd3MgNjkyYSIgdmFsaWQ9InllcyI+TGF3cywgcC4gNjkyIGEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pbXBvc2VkIGFzIGl0IHdlcmUgYSBjdXJiIHVwb24gaXQsIG5hbWVseSwgdGhlIHBvd2VyIG9mIHRoZSBlcGhvcnMuPC9xPiBJdCB3YXMgYWJvdXQgYSBodW5kcmVkIGFuZCB0aGlydHkgeWVhcnMgYWZ0ZXIgTHljdXJndXMgdGhhdCB0aGUgZmlyc3QgZXBob3JzLCBFbGF0dXMgYW5kIGhpcyBjb2xsZWFndWVzLCB3ZXJlIGFwcG9pbnRlZCwgaW4gdGhlIHJlaWduIG9mIFRoZW9wb21wdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMga2luZywgdGhleSBzYXksIG9uIGJlaW5nIHJldmlsZWQgYnkgaGlzIHdpZmUgYmVjYXVzZSB0aGUgcm95YWwgcG93ZXIsIHdoZW4gaGUgaGFuZGVkIGl0IG92ZXIgdG8gaGlzIHNvbnMsIHdvdWxkIGJlIGxlc3MgdGhhbiB3aGVuIGhlIHJlY2VpdmVkIGl0LCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5heSwgYnV0IGdyZWF0ZXIsIGluIHRoYXQgaXQgd2lsbCBsYXN0IGxvbmdlci48L3E+IEFuZCBpbiBmYWN0LCBieSByZW5vdW5jaW5nIGV4Y2Vzc2l2ZSBjbGFpbXMgYW5kIGZyZWVpbmcgaXRzZWxmIGZyb20gamVhbG91cyBoYXRlLCByb3lhbHR5IGF0IFNwYXJ0YSBlc2NhcGVkIGl0cyBwZXJpbHMsIHNvIHRoYXQgdGhlIFNwYXJ0YW4ga2luZ3MgZGlkIG5vdCBleHBlcmllbmNlIHRoZSBmYXRlIHdoaWNoIHRoZSBNZXNzZW5pYW5zIGFuZCBBcmdpdmVzIGluZmxpY3RlZCB1cG9uIHRoZWlyIGtpbmdzLCB3aG8gd2VyZSB1bndpbGxpbmcgdG8geWllbGQgYXQgYWxsIG9yIHJlbWl0IHRoZWlyIHBvd2VyIGluIGZhdm91ciBvZiB0aGUgcGVvcGxlLiBBbmQgdGhpcyBicmluZ3MgaW50byB0aGUgY2xlYXJlc3QgbGlnaHQgdGhlIHdpc2RvbSBhbmQgZm9yZXNpZ2h0IG9mIEx5Y3VyZ3VzLCB3aGVuIHdlIGNvbnRyYXN0IHRoZSBmYWN0aW9ucyBhbmQgbWlzZ292ZXJubWVudCBvZiB0aGUgcGVvcGxlcyBhbmQga2luZ3Mgb2YgTWVzc2VuaWEgYW5kIEFyZ29zLCB3aG8gd2VyZSBraW5zbWVuIGFuZCBuZWlnaGJvdXJzIG9mIHRoZSBTcGFydGFucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB3ZXJlIG9uIGFuIGVxdWFsaXR5IHdpdGggdGhlIFNwYXJ0YW5zIGluIHRoZSBiZWdpbm5pbmcsIGFuZCBpbiB0aGUgYWxsb3RtZW50IG9mIHRlcnJpdG9yeSB3ZXJlIHRob3VnaHQgdG8gYmUgZXZlbiBiZXR0ZXIgb2ZmIHRoYW4gdGhleSwgYW5kIHlldCB0aGVpciBwcm9zcGVyaXR5IGRpZCBub3QgbGFzdCBsb25nLCBidXQgd2hhdCB3aXRoIHRoZSBpbnNvbGVudCB0ZW1wZXIgb2YgdGhlaXIga2luZ3MgYW5kIHRoZSB1bnJlYXNvbmFibGVuZXNzIG9mIHRoZWlyIHBlb3BsZXMsIHRoZWlyIGVzdGFibGlzaGVkIGluc3RpdHV0aW9ucyB3ZXJlIGNvbmZvdW5kZWQsIGFuZCB0aGV5IG1hZGUgaXQgY2xlYXIgdGhhdCBpdCB3YXMgaW4gdmVyeSB0cnV0aCBhIGRpdmluZSBibGVzc2luZyB3aGljaCB0aGUgU3BhcnRhbnMgaGFkIGVuam95ZWQgaW4gdGhlIG1hbiB3aG8gZnJhbWVkIGFuZCB0ZW1wZXJlZCB0aGVpciBjaXZpbCBwb2xpdHkgZm9yIHRoZW0uIFRoZXNlIGV2ZW50cywgaG93ZXZlciwgd2VyZSBvZiBsYXRlciBkYXRlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbHRob3VnaCBMeWN1cmd1cyB0aHVzIHRlbXBlcmVkIGhpcyBjaXZpbCBwb2xpdHksIG5ldmVydGhlbGVzcyB0aGUgb2xpZ2FyY2hpY2FsIGVsZW1lbnQgaW4gaXQgd2FzIHN0aWxsIHVubWl4ZWQgYW5kIGRvbWluYW50LCBhbmQgaGlzIHN1Y2Nlc3NvcnMsIHNlZWluZyBpdCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c3dlbGxpbmcgYW5kIGZvYW1pbmcsPC9xPiBhcyBQbGF0byBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIExhd3MgNjkyYSIgdmFsaWQ9InllcyI+TGF3cywgcC4gNjkyIGEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMYXdzIDY5MmEiIHZhbGlkPSJ5ZXMiPkxhd3MsIHAuIDY5MiBhLjwvYmlibD4KICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pbXBvc2VkIGFzIGl0IHdlcmUgYSBjdXJiIHVwb24gaXQsIG5hbWVseSwgdGhlIHBvd2VyIG9mIHRoZSBlcGhvcnMuPC9xPiBJdCB3YXMgYWJvdXQgYSBodW5kcmVkIGFuZCB0aGlydHkgeWVhcnMgYWZ0ZXIgTHljdXJndXMgdGhhdCB0aGUgZmlyc3QgZXBob3JzLCBFbGF0dXMgYW5kIGhpcyBjb2xsZWFndWVzLCB3ZXJlIGFwcG9pbnRlZCwgaW4gdGhlIHJlaWduIG9mIFRoZW9wb21wdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMga2luZywgdGhleSBzYXksIG9uIGJlaW5nIHJldmlsZWQgYnkgaGlzIHdpZmUgYmVjYXVzZSB0aGUgcm95YWwgcG93ZXIsIHdoZW4gaGUgaGFuZGVkIGl0IG92ZXIgdG8gaGlzIHNvbnMsIHdvdWxkIGJlIGxlc3MgdGhhbiB3aGVuIGhlIHJlY2VpdmVkIGl0LCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TmF5LCBidXQgZ3JlYXRlciwgaW4gdGhhdCBpdCB3aWxsIGxhc3QgbG9uZ2VyLjwvcT4gQW5kIGluIGZhY3QsIGJ5IHJlbm91bmNpbmcgZXhjZXNzaXZlIGNsYWltcyBhbmQgZnJlZWluZyBpdHNlbGYgZnJvbSBqZWFsb3VzIGhhdGUsIHJveWFsdHkgYXQgU3BhcnRhIGVzY2FwZWQgaXRzIHBlcmlscywgc28gdGhhdCB0aGUgU3BhcnRhbiBraW5ncyBkaWQgbm90IGV4cGVyaWVuY2UgdGhlIGZhdGUgd2hpY2ggdGhlIE1lc3NlbmlhbnMgYW5kIEFyZ2l2ZXMgaW5mbGljdGVkIHVwb24gdGhlaXIga2luZ3MsIHdobyB3ZXJlIHVud2lsbGluZyB0byB5aWVsZCBhdCBhbGwgb3IgcmVtaXQgdGhlaXIgcG93ZXIgaW4gZmF2b3VyIG9mIHRoZSBwZW9wbGUuIEFuZCB0aGlzIGJyaW5ncyBpbnRvIHRoZSBjbGVhcmVzdCBsaWdodCB0aGUgd2lzZG9tIGFuZCBmb3Jlc2lnaHQgb2YgTHljdXJndXMsIHdoZW4gd2UgY29udHJhc3QgdGhlIGZhY3Rpb25zIGFuZCBtaXNnb3Zlcm5tZW50IG9mIHRoZSBwZW9wbGVzIGFuZCBraW5ncyBvZiBNZXNzZW5pYSBhbmQgQXJnb3MsIHdobyB3ZXJlIGtpbnNtZW4gYW5kIG5laWdoYm91cnMgb2YgdGhlIFNwYXJ0YW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSBvbiBhbiBlcXVhbGl0eSB3aXRoIHRoZSBTcGFydGFucyBpbiB0aGUgYmVnaW5uaW5nLCBhbmQgaW4gdGhlIGFsbG90bWVudCBvZiB0ZXJyaXRvcnkgd2VyZSB0aG91Z2h0IHRvIGJlIGV2ZW4gYmV0dGVyIG9mZiB0aGFuIHRoZXksIGFuZCB5ZXQgdGhlaXIgcHJvc3Blcml0eSBkaWQgbm90IGxhc3QgbG9uZywgYnV0IHdoYXQgd2l0aCB0aGUgaW5zb2xlbnQgdGVtcGVyIG9mIHRoZWlyIGtpbmdzIGFuZCB0aGUgdW5yZWFzb25hYmxlbmVzcyBvZiB0aGVpciBwZW9wbGVzLCB0aGVpciBlc3RhYmxpc2hlZCBpbnN0aXR1dGlvbnMgd2VyZSBjb25mb3VuZGVkLCBhbmQgdGhleSBtYWRlIGl0IGNsZWFyIHRoYXQgaXQgd2FzIGluIHZlcnkgdHJ1dGggYSBkaXZpbmUgYmxlc3Npbmcgd2hpY2ggdGhlIFNwYXJ0YW5zIGhhZCBlbmpveWVkIGluIHRoZSBtYW4gd2hvIGZyYW1lZCBhbmQgdGVtcGVyZWQgdGhlaXIgY2l2aWwgcG9saXR5IGZvciB0aGVtLiBUaGVzZSBldmVudHMsIGhvd2V2ZXIsIHdlcmUgb2YgbGF0ZXIgZGF0ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIHNlY29uZCwgYW5kIGEgdmVyeSBib2xkIHBvbGl0aWNhbCBtZWFzdXJlIG9mIEx5Y3VyZ3VzLCBpbiBoaXMgcmVkaXN0cmlidXRpb24gb2YgdGhlIGxhbmQuIEZvciB0aGVyZSB3YXMgYSBkcmVhZGZ1bCBpbmVxdWFsaXR5IGluIHRoaXMgcmVnYXJkLCB0aGUgY2l0eSB3YXMgaGVhdmlseSBidXJkZW5lZCB3aXRoIGluZGlnZW50IGFuZCBoZWxwbGVzcyBwZW9wbGUsIGFuZCB3ZWFsdGggd2FzIHdob2xseSBjb25jZW50cmF0ZWQgaW4gdGhlIGhhbmRzIG9mIGEgZmV3LiBEZXRlcm1pbmVkLCB0aGVyZWZvcmUsIHRvIGJhbmlzaCBpbnNvbGVuY2UgYW5kIGVudnkgYW5kIGNyaW1lIGFuZCBsdXh1cnksIGFuZCB0aG9zZSB5ZXQgbW9yZSBkZWVwLXNlYXRlZCBhbmQgYWZmbGljdGl2ZSBkaXNlYXNlcyBvZiB0aGUgc3RhdGUsIHBvdmVydHkgYW5kIHdlYWx0aCwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+aGUgcGVyc3VhZGVkIGhpcyBmZWxsb3ctY2l0aXplbnMgdG8gbWFrZSBvbmUgcGFyY2VsIG9mIGFsbCB0aGVpciB0ZXJyaXRvcnkgYW5kIGRpdmlkZSBpdCB1cCBhbmV3LCBhbmQgdG8gbGl2ZSB3aXRoIG9uZSBhbm90aGVyIG9uIGEgYmFzaXMgb2YgZW50aXJlIHVuaWZvcm1pdHkgYW5kIGVxdWFsaXR5IGluIHRoZSBtZWFucyBvZiBzdWJzaXN0ZW5jZSwgc2Vla2luZyBwcmUtZW1pbmVuY2UgdGhyb3VnaCB2aXJ0dWUgYWxvbmUsIGFzc3VyZWQgdGhhdCB0aGVyZSB3YXMgbm8gb3RoZXIgZGlmZmVyZW5jZSBvciBpbmVxdWFsaXR5IGJldHdlZW4gbWFuIGFuZCBtYW4gdGhhbiB0aGF0IHdoaWNoIHdhcyBlc3RhYmxpc2hlZCBieSBibGFtZSBmb3IgYmFzZSBhY3Rpb25zIGFuZCBwcmFpc2UgZm9yIGdvb2Qgb25lcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIHNlY29uZCwgYW5kIGEgdmVyeSBib2xkIHBvbGl0aWNhbCBtZWFzdXJlIG9mIEx5Y3VyZ3VzLCBpbiBoaXMgcmVkaXN0cmlidXRpb24gb2YgdGhlIGxhbmQuIEZvciB0aGVyZSB3YXMgYSBkcmVhZGZ1bCBpbmVxdWFsaXR5IGluIHRoaXMgcmVnYXJkLCB0aGUgY2l0eSB3YXMgaGVhdmlseSBidXJkZW5lZCB3aXRoIGluZGlnZW50IGFuZCBoZWxwbGVzcyBwZW9wbGUsIGFuZCB3ZWFsdGggd2FzIHdob2xseSBjb25jZW50cmF0ZWQgaW4gdGhlIGhhbmRzIG9mIGEgZmV3LiBEZXRlcm1pbmVkLCB0aGVyZWZvcmUsIHRvIGJhbmlzaCBpbnNvbGVuY2UgYW5kIGVudnkgYW5kIGNyaW1lIGFuZCBsdXh1cnksIGFuZCB0aG9zZSB5ZXQgbW9yZSBkZWVwLXNlYXRlZCBhbmQgYWZmbGljdGl2ZSBkaXNlYXNlcyBvZiB0aGUgc3RhdGUsIHBvdmVydHkgYW5kIHdlYWx0aCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIHBlcnN1YWRlZCBoaXMgZmVsbG93LWNpdGl6ZW5zIHRvIG1ha2Ugb25lIHBhcmNlbCBvZiBhbGwgdGhlaXIgdGVycml0b3J5IGFuZCBkaXZpZGUgaXQgdXAgYW5ldywgYW5kIHRvIGxpdmUgd2l0aCBvbmUgYW5vdGhlciBvbiBhIGJhc2lzIG9mIGVudGlyZSB1bmlmb3JtaXR5IGFuZCBlcXVhbGl0eSBpbiB0aGUgbWVhbnMgb2Ygc3Vic2lzdGVuY2UsIHNlZWtpbmcgcHJlLWVtaW5lbmNlIHRocm91Z2ggdmlydHVlIGFsb25lLCBhc3N1cmVkIHRoYXQgdGhlcmUgd2FzIG5vIG90aGVyIGRpZmZlcmVuY2Ugb3IgaW5lcXVhbGl0eSBiZXR3ZWVuIG1hbiBhbmQgbWFuIHRoYW4gdGhhdCB3aGljaCB3YXMgZXN0YWJsaXNoZWQgYnkgYmxhbWUgZm9yIGJhc2UgYWN0aW9ucyBhbmQgcHJhaXNlIGZvciBnb29kIG9uZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1aXRpbmcgdGhlIGRlZWQgdG8gdGhlIHdvcmQsIGhlIGRpc3RyaWJ1dGVkIHRoZSByZXN0IG9mIHRoZSBMYWNvbmlhbiBsYW5kIGFtb25nIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBlcmlvZWNpLDwvcT4gb3IgZnJlZSBwcm92aW5jaWFscywgaW4gdGhpcnR5IHRob3VzYW5kIGxvdHMsIGFuZCB0aGF0IHdoaWNoIGJlbG9uZ2VkIHRvIHRoZSBjaXR5IG9mIFNwYXJ0YSwgaW4gbmluZSB0aG91c2FuZCBsb3RzLCB0byBhcyBtYW55IGdlbnVpbmUgU3BhcnRhbnMuIEJ1dCBzb21lIHNheSB0aGF0IEx5Y3VyZ3VzIGRpc3RyaWJ1dGVkIG9ubHkgc2l4IHRob3VzYW5kIGxvdHMgYW1vbmcgdGhlIFNwYXJ0YW5zLCBhbmQgdGhhdCB0aHJlZSB0aG91c2FuZCB3ZXJlIGFmdGVyd2FyZHMgYWRkZWQgYnkgUG9seWRvcnVzOyBvdGhlcnMgc3RpbGwsIHRoYXQgUG9seWRvcnVzIGFkZGVkIGhhbGYgb2YgdGhlIG5pbmUgdGhvdXNhbmQgdG8gdGhlIGhhbGYgZGlzdHJpYnV0ZWQgYnkgTHljdXJndXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsb3Qgb2YgZWFjaCB3YXMgbGFyZ2UgZW5vdWdoIHRvIHByb2R1Y2UgYW5udWFsbHkgc2V2ZW50eSBidXNoZWxzIG9mIGJhcmxleSBmb3IgYSBtYW4gYW5kIHR3ZWx2ZSBmb3IgaGlzIHdpZmUsIHdpdGggYSBwcm9wb3J0aW9uYXRlIGFtb3VudCBvZiB3aW5lIGFuZCBvaWwuIEx5Y3VyZ3VzIHRob3VnaHQgdGhhdCBhIGxvdCBvZiB0aGlzIHNpemUgd291bGQgYmUgc3VmZmljaWVudCBmb3IgdGhlbSwgc2luY2UgdGhleSBuZWVkZWQgc3VzdGVuYW5jZSBlbm91Z2ggdG8gcHJvbW90ZSB2aWdvdXIgYW5kIGhlYWx0aCBvZiBib2R5LCBhbmQgbm90aGluZyBlbHNlLiBBbmQgaXQgaXMgc2FpZCB0aGF0IG9uIHJldHVybmluZyBmcm9tIGEgam91cm5leSBzb21lIHRpbWUgYWZ0ZXJ3YXJkcywgYXMgaGUgdHJhdmVyc2VkIHRoZSBsYW5kIGp1c3QgYWZ0ZXIgdGhlIGhhcnZlc3QsIGFuZCBzYXcgdGhlIGhlYXBzIG9mIGdyYWluIHN0YW5kaW5nIHBhcmFsbGVsIGFuZCBlcXVhbCB0byBvbmUgYW5vdGhlciwgaGUgc21pbGVkLCBhbmQgc2FpZCB0byB0aGVtIHRoYXQgd2VyZSBieTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbGwgTGFjb25pYSBsb29rcyBsaWtlIGEgZmFtaWx5IGVzdGF0ZSBuZXdseSBkaXZpZGVkIGFtb25nIG1hbnkgYnJvdGhlcnMuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1aXRpbmcgdGhlIGRlZWQgdG8gdGhlIHdvcmQsIGhlIGRpc3RyaWJ1dGVkIHRoZSByZXN0IG9mIHRoZSBMYWNvbmlhbiBsYW5kIGFtb25nIHRoZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGVyaW9lY2ksPC9xPiBvciBmcmVlIHByb3ZpbmNpYWxzLCBpbiB0aGlydHkgdGhvdXNhbmQgbG90cywgYW5kIHRoYXQgd2hpY2ggYmVsb25nZWQgdG8gdGhlIGNpdHkgb2YgU3BhcnRhLCBpbiBuaW5lIHRob3VzYW5kIGxvdHMsIHRvIGFzIG1hbnkgZ2VudWluZSBTcGFydGFucy4gQnV0IHNvbWUgc2F5IHRoYXQgTHljdXJndXMgZGlzdHJpYnV0ZWQgb25seSBzaXggdGhvdXNhbmQgbG90cyBhbW9uZyB0aGUgU3BhcnRhbnMsIGFuZCB0aGF0IHRocmVlIHRob3VzYW5kIHdlcmUgYWZ0ZXJ3YXJkcyBhZGRlZCBieSBQb2x5ZG9ydXM7IG90aGVycyBzdGlsbCwgdGhhdCBQb2x5ZG9ydXMgYWRkZWQgaGFsZiBvZiB0aGUgbmluZSB0aG91c2FuZCB0byB0aGUgaGFsZiBkaXN0cmlidXRlZCBieSBMeWN1cmd1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsb3Qgb2YgZWFjaCB3YXMgbGFyZ2UgZW5vdWdoIHRvIHByb2R1Y2UgYW5udWFsbHkgc2V2ZW50eSBidXNoZWxzIG9mIGJhcmxleSBmb3IgYSBtYW4gYW5kIHR3ZWx2ZSBmb3IgaGlzIHdpZmUsIHdpdGggYSBwcm9wb3J0aW9uYXRlIGFtb3VudCBvZiB3aW5lIGFuZCBvaWwuIEx5Y3VyZ3VzIHRob3VnaHQgdGhhdCBhIGxvdCBvZiB0aGlzIHNpemUgd291bGQgYmUgc3VmZmljaWVudCBmb3IgdGhlbSwgc2luY2UgdGhleSBuZWVkZWQgc3VzdGVuYW5jZSBlbm91Z2ggdG8gcHJvbW90ZSB2aWdvdXIgYW5kIGhlYWx0aCBvZiBib2R5LCBhbmQgbm90aGluZyBlbHNlLiBBbmQgaXQgaXMgc2FpZCB0aGF0IG9uIHJldHVybmluZyBmcm9tIGEgam91cm5leSBzb21lIHRpbWUgYWZ0ZXJ3YXJkcywgYXMgaGUgdHJhdmVyc2VkIHRoZSBsYW5kIGp1c3QgYWZ0ZXIgdGhlIGhhcnZlc3QsIGFuZCBzYXcgdGhlIGhlYXBzIG9mIGdyYWluIHN0YW5kaW5nIHBhcmFsbGVsIGFuZCBlcXVhbCB0byBvbmUgYW5vdGhlciwgaGUgc21pbGVkLCBhbmQgc2FpZCB0byB0aGVtIHRoYXQgd2VyZSBieTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFsbCBMYWNvbmlhIGxvb2tzIGxpa2UgYSBmYW1pbHkgZXN0YXRlIG5ld2x5IGRpdmlkZWQgYW1vbmcgbWFueSBicm90aGVycy48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TmV4dCwgaGUgdW5kZXJ0b29rIHRvIGRpdmlkZSB1cCB0aGVpciBtb3ZhYmxlIHByb3BlcnR5IGFsc28sIGluIG9yZGVyIHRoYXQgZXZlcnkgdmVzdGlnZSBvZiB1bmV2ZW5uZXNzIGFuZCBpbmVxdWFsaXR5IG1pZ2h0IGJlIHJlbW92ZWQ7IGFuZCB3aGVuIGhlIHNhdyB0aGF0IHRoZXkgY291bGQgbm90IGJlYXIgdG8gaGF2ZSBpdCB0YWtlbiBmcm9tIHRoZW0gZGlyZWN0bHksIGhlIHRvb2sgYW5vdGhlciBjb3Vyc2UsIGFuZCBvdmVyY2FtZSB0aGVpciBhdmFyaWNlIGJ5IHBvbGl0aWNhbCBkZXZpY2VzLiBJbiB0aGUgZmlyc3QgcGxhY2UsIGhlIHdpdGhkcmV3IGFsbCBnb2xkIGFuZCBzaWx2ZXIgbW9uZXkgZnJvbSBjdXJyZW5jeSwgYW5kIG9yZGFpbmVkIHRoZSB1c2Ugb2YgaXJvbiBtb25leSBvbmx5LiBUaGVuIHRvIGEgZ3JlYXQgd2VpZ2h0IGFuZCBtYXNzIG9mIHRoaXMgaGUgZ2F2ZSBhIHRyaWZsaW5nIHZhbHVlLCBzbyB0aGF0IHRlbiBtaW5hcycgd29ydGg8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BYm91dCDCoyA0MCwgb3IgJDIwMC48L25vdGU+IHJlcXVpcmVkIGEgbGFyZ2Ugc3RvcmUtcm9vbSBpbiB0aGUgaG91c2UsIGFuZCBhIHlva2Ugb2YgY2F0dGxlIHRvIHRyYW5zcG9ydCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGlzIG1vbmV5IG9idGFpbmVkIGN1cnJlbmN5LCBtYW55IHNvcnRzIG9mIGluaXF1aXR5IHdlbnQgaW50byBleGlsZSBmcm9tIExhY2VkYWVtb24uIEZvciB3aG8gd291bGQgc3RlYWwsIG9yIHJlY2VpdmUgYXMgYSBicmliZSwgb3Igcm9iLCBvciBwbHVuZGVyIHRoYXQgd2hpY2ggY291bGQgbmVpdGhlciBiZSBjb25jZWFsZWQsIG5vciBwb3NzZXNzZWQgd2l0aCBzYXRpc2ZhY3Rpb24sIG5heSwgbm9yIGV2ZW4gY3V0IHRvIHBpZWNlcyB3aXRoIGFueSBwcm9maXQ/IEZvciB2aW5lZ2FyIHdhcyB1c2VkLCBhcyB3ZSBhcmUgdG9sZCwgdG8gcXVlbmNoIHRoZSByZWQtaG90IGlyb24sIHJvYmJpbmcgaXQgb2YgaXRzIHRlbXBlciBhbmQgbWFraW5nIGl0IHdvcnRobGVzcyBmb3IgYW55IG90aGVyIHB1cnBvc2UsIHdoZW4gb25jZSBpdCBoYWQgYmVjb21lIGJyaXR0bGUgYW5kIGhhcmQgdG8gd29yay4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5OZXh0LCBoZSB1bmRlcnRvb2sgdG8gZGl2aWRlIHVwIHRoZWlyIG1vdmFibGUgcHJvcGVydHkgYWxzbywgaW4gb3JkZXIgdGhhdCBldmVyeSB2ZXN0aWdlIG9mIHVuZXZlbm5lc3MgYW5kIGluZXF1YWxpdHkgbWlnaHQgYmUgcmVtb3ZlZDsgYW5kIHdoZW4gaGUgc2F3IHRoYXQgdGhleSBjb3VsZCBub3QgYmVhciB0byBoYXZlIGl0IHRha2VuIGZyb20gdGhlbSBkaXJlY3RseSwgaGUgdG9vayBhbm90aGVyIGNvdXJzZSwgYW5kIG92ZXJjYW1lIHRoZWlyIGF2YXJpY2UgYnkgcG9saXRpY2FsIGRldmljZXMuIEluIHRoZSBmaXJzdCBwbGFjZSwgaGUgd2l0aGRyZXcgYWxsIGdvbGQgYW5kIHNpbHZlciBtb25leSBmcm9tIGN1cnJlbmN5LCBhbmQgb3JkYWluZWQgdGhlIHVzZSBvZiBpcm9uIG1vbmV5IG9ubHkuIFRoZW4gdG8gYSBncmVhdCB3ZWlnaHQgYW5kIG1hc3Mgb2YgdGhpcyBoZSBnYXZlIGEgdHJpZmxpbmcgdmFsdWUsIHNvIHRoYXQgdGVuIG1pbmFzJyB3b3J0aDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWJvdXQgwqMgNDAsIG9yICQyMDAuPC9ub3RlPiByZXF1aXJlZCBhIGxhcmdlIHN0b3JlLXJvb20gaW4gdGhlIGhvdXNlLCBhbmQgYSB5b2tlIG9mIGNhdHRsZSB0byB0cmFuc3BvcnQgaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhpcyBtb25leSBvYnRhaW5lZCBjdXJyZW5jeSwgbWFueSBzb3J0cyBvZiBpbmlxdWl0eSB3ZW50IGludG8gZXhpbGUgZnJvbSBMYWNlZGFlbW9uLiBGb3Igd2hvIHdvdWxkIHN0ZWFsLCBvciByZWNlaXZlIGFzIGEgYnJpYmUsIG9yIHJvYiwgb3IgcGx1bmRlciB0aGF0IHdoaWNoIGNvdWxkIG5laXRoZXIgYmUgY29uY2VhbGVkLCBub3IgcG9zc2Vzc2VkIHdpdGggc2F0aXNmYWN0aW9uLCBuYXksIG5vciBldmVuIGN1dCB0byBwaWVjZXMgd2l0aCBhbnkgcHJvZml0PyBGb3IgdmluZWdhciB3YXMgdXNlZCwgYXMgd2UgYXJlIHRvbGQsIHRvIHF1ZW5jaCB0aGUgcmVkLWhvdCBpcm9uLCByb2JiaW5nIGl0IG9mIGl0cyB0ZW1wZXIgYW5kIG1ha2luZyBpdCB3b3J0aGxlc3MgZm9yIGFueSBvdGhlciBwdXJwb3NlLCB3aGVuIG9uY2UgaXQgaGFkIGJlY29tZSBicml0dGxlIGFuZCBoYXJkIHRvIHdvcmsuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBuZXh0IHBsYWNlLCBoZSBiYW5pc2hlZCB0aGUgdW5uZWNlc3NhcnkgYW5kIHN1cGVyZmx1b3VzIGFydHMuIEFuZCBldmVuIHdpdGhvdXQgc3VjaCBiYW5pc2htZW50IG1vc3Qgb2YgdGhlbSB3b3VsZCBoYXZlIGRlcGFydGVkIHdpdGggdGhlIG9sZCBjb2luYWdlLCBzaW5jZSB0aGVyZSB3YXMgbm8gc2FsZSBmb3IgdGhlaXIgcHJvZHVjdHMuIEZvciB0aGUgaXJvbiBtb25leSBjb3VsZCBub3QgYmUgY2FycmllZCBpbnRvIHRoZSByZXN0IG9mIEdyZWVjZSwgbm9yIGhhZCBpdCBhbnkgdmFsdWUgdGhlcmUsIGJ1dCB3YXMgcmF0aGVyIGhlbGQgaW4gcmlkaWN1bGUuIEl0IHdhcyBub3QgcG9zc2libGUsIHRoZXJlZm9yZSwgdG8gYnV5IGFueSBmb3JlaWduIHdhcmVzIG9yIGJyaWMtw6AtYnJhYzsgbm8gbWVyY2hhbnQtc2VhbWVuIGJyb3VnaHQgZnJlaWdodCBpbnRvIHRoZWlyIGhhcmJvdXJzOyBubyByaGV0b3JpYyB0ZWFjaGVyIHNldCBmb290IG9uIExhY29uaWFuIHNvaWwsIG5vIHZhZ2Fib25kIHNvb3Roc2F5ZXIsIG5vIGtlZXBlciBvZiBoYXJsb3RzLCBubyBnb2xkLSBvciBzaWx2ZXItc21pdGgsIHNpbmNlIHRoZXJlIHdhcyBubyBtb25leSB0aGVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGx1eHVyeSwgdGh1cyBncmFkdWFsbHkgZGVwcml2ZWQgb2YgdGhhdCB3aGljaCBzdGltdWxhdGVkIGFuZCBzdXBwb3J0ZWQgaXQsIGRpZWQgYXdheSBvZiBpdHNlbGYsIGFuZCBtZW4gb2YgbGFyZ2UgcG9zc2Vzc2lvbnMgaGFkIG5vIGFkdmFudGFnZSBvdmVyIHRoZSBwb29yLCBiZWNhdXNlIHRoZWlyIHdlYWx0aCBmb3VuZCBubyBwdWJsaWMgb3V0bGV0LCBidXQgaGFkIHRvIGJlIHN0b3JlZCB1cCBhdCBob21lIGluIGlkbGVuZXNzLiBJbiB0aGlzIHdheSBpdCBjYW1lIGFib3V0IHRoYXQgc3VjaCBjb21tb24gYW5kIG5lY2Vzc2FyeSB1dGVuc2lscyBhcyBiZWRzdGVhZHMsIGNoYWlycywgYW5kIHRhYmxlcyB3ZXJlIG1vc3QgZXhjZWxsZW50bHkgbWFkZSBhbW9uZyB0aGVtLCBhbmQgdGhlIExhY29uaWFuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+a290aG9uLDwvcT4gb3IgZHJpbmtpbmctY3VwLCB3YXMgaW4gdmVyeSBoaWdoIHJlcHV0ZSBmb3IgdXNlZnVsbmVzcyBhbW9uZyBzb2xkaWVycyBpbiBhY3RpdmUgc2VydmljZSwgYXMgQ3JpdGlhcyB0ZWxscyB1cy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGl0cyBjb2xvdXIgY29uY2VhbGVkIHRoZSBkaXNhZ3JlZWFibGUgYXBwZWFyYW5jZSBvZiB0aGUgd2F0ZXIgd2hpY2ggdGhleSB3ZXJlIG9mdGVuIGNvbXBlbGxlZCB0byBkcmluaywgYW5kIGl0cyBjdXJ2aW5nIGxpcHMgY2F1Z2h0IHRoZSBtdWRkeSBzZWRpbWVudCBhbmQgaGVsZCBpdCBpbnNpZGUsIHNvIHRoYXQgb25seSB0aGUgcHVyZXIgcGFydCByZWFjaGVkIHRoZSBtb3V0aCBvZiB0aGUgZHJpbmtlci4gRm9yIGFsbCB0aGlzIHRoZXkgaGFkIHRvIHRoYW5rIHRoZWlyIGxhd2dpdmVyOyBzaW5jZSB0aGVpciBhcnRpc2FucyB3ZXJlIG5vdyBmcmVlZCBmcm9tIHVzZWxlc3MgdGFza3MsIGFuZCBkaXNwbGF5ZWQgdGhlIGJlYXV0eSBvZiB0aGVpciB3b3JrbWFuc2hpcCBpbiBvYmplY3RzIG9mIGNvbnN0YW50IGFuZCBuZWNlc3NhcnkgdXNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBuZXh0IHBsYWNlLCBoZSBiYW5pc2hlZCB0aGUgdW5uZWNlc3NhcnkgYW5kIHN1cGVyZmx1b3VzIGFydHMuIEFuZCBldmVuIHdpdGhvdXQgc3VjaCBiYW5pc2htZW50IG1vc3Qgb2YgdGhlbSB3b3VsZCBoYXZlIGRlcGFydGVkIHdpdGggdGhlIG9sZCBjb2luYWdlLCBzaW5jZSB0aGVyZSB3YXMgbm8gc2FsZSBmb3IgdGhlaXIgcHJvZHVjdHMuIEZvciB0aGUgaXJvbiBtb25leSBjb3VsZCBub3QgYmUgY2FycmllZCBpbnRvIHRoZSByZXN0IG9mIEdyZWVjZSwgbm9yIGhhZCBpdCBhbnkgdmFsdWUgdGhlcmUsIGJ1dCB3YXMgcmF0aGVyIGhlbGQgaW4gcmlkaWN1bGUuIEl0IHdhcyBub3QgcG9zc2libGUsIHRoZXJlZm9yZSwgdG8gYnV5IGFueSBmb3JlaWduIHdhcmVzIG9yIGJyaWMtw6AtYnJhYzsgbm8gbWVyY2hhbnQtc2VhbWVuIGJyb3VnaHQgZnJlaWdodCBpbnRvIHRoZWlyIGhhcmJvdXJzOyBubyByaGV0b3JpYyB0ZWFjaGVyIHNldCBmb290IG9uIExhY29uaWFuIHNvaWwsIG5vIHZhZ2Fib25kIHNvb3Roc2F5ZXIsIG5vIGtlZXBlciBvZiBoYXJsb3RzLCBubyBnb2xkLSBvciBzaWx2ZXItc21pdGgsIHNpbmNlIHRoZXJlIHdhcyBubyBtb25leSB0aGVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBsdXh1cnksIHRodXMgZ3JhZHVhbGx5IGRlcHJpdmVkIG9mIHRoYXQgd2hpY2ggc3RpbXVsYXRlZCBhbmQgc3VwcG9ydGVkIGl0LCBkaWVkIGF3YXkgb2YgaXRzZWxmLCBhbmQgbWVuIG9mIGxhcmdlIHBvc3Nlc3Npb25zIGhhZCBubyBhZHZhbnRhZ2Ugb3ZlciB0aGUgcG9vciwgYmVjYXVzZSB0aGVpciB3ZWFsdGggZm91bmQgbm8gcHVibGljIG91dGxldCwgYnV0IGhhZCB0byBiZSBzdG9yZWQgdXAgYXQgaG9tZSBpbiBpZGxlbmVzcy4gSW4gdGhpcyB3YXkgaXQgY2FtZSBhYm91dCB0aGF0IHN1Y2ggY29tbW9uIGFuZCBuZWNlc3NhcnkgdXRlbnNpbHMgYXMgYmVkc3RlYWRzLCBjaGFpcnMsIGFuZCB0YWJsZXMgd2VyZSBtb3N0IGV4Y2VsbGVudGx5IG1hZGUgYW1vbmcgdGhlbSwgYW5kIHRoZSBMYWNvbmlhbiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+a290aG9uLDwvcT4gb3IgZHJpbmtpbmctY3VwLCB3YXMgaW4gdmVyeSBoaWdoIHJlcHV0ZSBmb3IgdXNlZnVsbmVzcyBhbW9uZyBzb2xkaWVycyBpbiBhY3RpdmUgc2VydmljZSwgYXMgQ3JpdGlhcyB0ZWxscyB1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdHMgY29sb3VyIGNvbmNlYWxlZCB0aGUgZGlzYWdyZWVhYmxlIGFwcGVhcmFuY2Ugb2YgdGhlIHdhdGVyIHdoaWNoIHRoZXkgd2VyZSBvZnRlbiBjb21wZWxsZWQgdG8gZHJpbmssIGFuZCBpdHMgY3VydmluZyBsaXBzIGNhdWdodCB0aGUgbXVkZHkgc2VkaW1lbnQgYW5kIGhlbGQgaXQgaW5zaWRlLCBzbyB0aGF0IG9ubHkgdGhlIHB1cmVyIHBhcnQgcmVhY2hlZCB0aGUgbW91dGggb2YgdGhlIGRyaW5rZXIuIEZvciBhbGwgdGhpcyB0aGV5IGhhZCB0byB0aGFuayB0aGVpciBsYXdnaXZlcjsgc2luY2UgdGhlaXIgYXJ0aXNhbnMgd2VyZSBub3cgZnJlZWQgZnJvbSB1c2VsZXNzIHRhc2tzLCBhbmQgZGlzcGxheWVkIHRoZSBiZWF1dHkgb2YgdGhlaXIgd29ya21hbnNoaXAgaW4gb2JqZWN0cyBvZiBjb25zdGFudCBhbmQgbmVjZXNzYXJ5IHVzZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBhIHZpZXcgdG8gYXR0YWNrIGx1eHVyeSBzdGlsbCBtb3JlIGFuZCByZW1vdmUgdGhlIHRoaXJzdCBmb3Igd2VhbHRoLCBoZSBpbnRyb2R1Y2VkIGhpcyB0aGlyZCBhbmQgbW9zdCBleHF1aXNpdGUgcG9saXRpY2FsIGRldmljZSwgbmFtZWx5LCB0aGUgaW5zdGl0dXRpb24gb2YgY29tbW9uIG1lc3Nlcywgc28gdGhhdCB0aGV5IG1pZ2h0IGVhdCB3aXRoIG9uZSBhbm90aGVyIGluIGNvbXBhbmllcywgb2YgY29tbW9uIGFuZCBzcGVjaWZpZWQgZm9vZHMsIGFuZCBub3QgdGFrZSB0aGVpciBtZWFscyBhdCBob21lLCByZWNsaW5pbmcgb24gY29zdGx5IGNvdWNoZXMgYXQgY29zdGx5IHRhYmxlcywgZGVsaXZlcmluZyB0aGVtc2VsdmVzIGludG8gdGhlIGhhbmRzIG9mIHNlcnZhbnRzIGFuZCBjb29rcyB0byBiZSBmYXR0ZW5lZCBpbiB0aGUgZGFyaywgbGlrZSB2b3JhY2lvdXMgYW5pbWFscywgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHJ1aW5pbmcgbm90IG9ubHkgdGhlaXIgY2hhcmFjdGVycyBidXQgYWxzbyB0aGVpciBib2RpZXMsIGJ5IHN1cnJlbmRlcmluZyB0aGVtIHRvIGV2ZXJ5IGRlc2lyZSBhbmQgYWxsIHNvcnRzIG9mIHN1cmZlaXQsIHdoaWNoIGNhbGwgZm9yIGxvbmcgc2xlZXBzLCBob3QgYmF0aHMsIGFidW5kYW50IHJlc3QsIGFuZCwgYXMgaXQgd2VyZSwgZGFpbHkgbnVyc2luZyBhbmQgdGVuZGluZy4gVGhpcyB3YXMgc3VyZWx5IGEgZ3JlYXQgYWNoaWV2ZW1lbnQsIGJ1dCBpdCB3YXMgYSBzdGlsbCBncmVhdGVyIG9uZSB0byBtYWtlIHdlYWx0aCAiYW4gb2JqZWN0IG9mIG5vIGRlc2lyZSwiIGFzIFRoZW9waHJhc3R1cyBzYXlzLCBhbmQgZXZlbiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnVud2VhbHRoLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDUyN2IiPk1vcmFscywgcC4gNTI3IGIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ5IHRoaXMgY29tbXVuaXR5IG9mIG1lYWxzIGFuZCBzaW1wbGljaXR5IG9mIGRpZXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcmljaCBtYW4gY291bGQgbmVpdGhlciB1c2Ugbm9yIGVuam95IG5vciBldmVuIHNlZSBvciBkaXNwbGF5IGhpcyBhYnVuZGFudCBtZWFucywgd2hlbiBoZSB3ZW50IHRvIHRoZSBzYW1lIG1lYWwgYXMgdGhlIHBvb3IgbWFuOyBzbyB0aGF0IGl0IHdhcyBpbiBTcGFydGEgYWxvbmUsIG9mIGFsbCB0aGUgY2l0aWVzIHVuZGVyIHRoZSBzdW4sIHRoYXQgbWVuIGNvdWxkIGhhdmUgdGhhdCBmYXItZmFtZWQgc2lnaHQsIGEgUGx1dHVzIGJsaW5kLCBhbmQgbHlpbmcgYXMgbGlmZWxlc3MgYW5kIG1vdGlvbmxlc3MgYXMgYSBwaWN0dXJlLiBGb3IgdGhlIHJpY2ggY291bGQgbm90IGV2ZW4gZGluZSBiZWZvcmVoYW5kIGF0IGhvbWUgYW5kIHRoZW4gZ28gdG8gdGhlIGNvbW1vbiBtZXNzIHdpdGggZnVsbCBzdG9tYWNocywgYnV0IHRoZSByZXN0IGtlcHQgY2FyZWZ1bCB3YXRjaCBvZiBoaW0gd2hvIGRpZCBub3QgZWF0IGFuZCBkcmluayB3aXRoIHRoZW0sIGFuZCByZXZpbGVkIGhpbSBhcyBhIHdlYWtsaW5nLCBhbmQgb25lIHRvbyBlZmZlbWluYXRlIGZvciB0aGUgY29tbW9uIGRpZXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBhIHZpZXcgdG8gYXR0YWNrIGx1eHVyeSBzdGlsbCBtb3JlIGFuZCByZW1vdmUgdGhlIHRoaXJzdCBmb3Igd2VhbHRoLCBoZSBpbnRyb2R1Y2VkIGhpcyB0aGlyZCBhbmQgbW9zdCBleHF1aXNpdGUgcG9saXRpY2FsIGRldmljZSwgbmFtZWx5LCB0aGUgaW5zdGl0dXRpb24gb2YgY29tbW9uIG1lc3Nlcywgc28gdGhhdCB0aGV5IG1pZ2h0IGVhdCB3aXRoIG9uZSBhbm90aGVyIGluIGNvbXBhbmllcywgb2YgY29tbW9uIGFuZCBzcGVjaWZpZWQgZm9vZHMsIGFuZCBub3QgdGFrZSB0aGVpciBtZWFscyBhdCBob21lLCByZWNsaW5pbmcgb24gY29zdGx5IGNvdWNoZXMgYXQgY29zdGx5IHRhYmxlcywgZGVsaXZlcmluZyB0aGVtc2VsdmVzIGludG8gdGhlIGhhbmRzIG9mIHNlcnZhbnRzIGFuZCBjb29rcyB0byBiZSBmYXR0ZW5lZCBpbiB0aGUgZGFyaywgbGlrZSB2b3JhY2lvdXMgYW5pbWFscywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBydWluaW5nIG5vdCBvbmx5IHRoZWlyIGNoYXJhY3RlcnMgYnV0IGFsc28gdGhlaXIgYm9kaWVzLCBieSBzdXJyZW5kZXJpbmcgdGhlbSB0byBldmVyeSBkZXNpcmUgYW5kIGFsbCBzb3J0cyBvZiBzdXJmZWl0LCB3aGljaCBjYWxsIGZvciBsb25nIHNsZWVwcywgaG90IGJhdGhzLCBhYnVuZGFudCByZXN0LCBhbmQsIGFzIGl0IHdlcmUsIGRhaWx5IG51cnNpbmcgYW5kIHRlbmRpbmcuIFRoaXMgd2FzIHN1cmVseSBhIGdyZWF0IGFjaGlldmVtZW50LCBidXQgaXQgd2FzIGEgc3RpbGwgZ3JlYXRlciBvbmUgdG8gbWFrZSB3ZWFsdGggImFuIG9iamVjdCBvZiBubyBkZXNpcmUsIiBhcyBUaGVvcGhyYXN0dXMgc2F5cywgYW5kIGV2ZW4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnVud2VhbHRoLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA1MjdiIj5Nb3JhbHMsIHAuIDUyNyBiLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBieSB0aGlzIGNvbW11bml0eSBvZiBtZWFscyBhbmQgc2ltcGxpY2l0eSBvZiBkaWV0LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gNTI3YiI+TW9yYWxzLCBwLiA1MjcgYi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcmljaCBtYW4gY291bGQgbmVpdGhlciB1c2Ugbm9yIGVuam95IG5vciBldmVuIHNlZSBvciBkaXNwbGF5IGhpcyBhYnVuZGFudCBtZWFucywgd2hlbiBoZSB3ZW50IHRvIHRoZSBzYW1lIG1lYWwgYXMgdGhlIHBvb3IgbWFuOyBzbyB0aGF0IGl0IHdhcyBpbiBTcGFydGEgYWxvbmUsIG9mIGFsbCB0aGUgY2l0aWVzIHVuZGVyIHRoZSBzdW4sIHRoYXQgbWVuIGNvdWxkIGhhdmUgdGhhdCBmYXItZmFtZWQgc2lnaHQsIGEgUGx1dHVzIGJsaW5kLCBhbmQgbHlpbmcgYXMgbGlmZWxlc3MgYW5kIG1vdGlvbmxlc3MgYXMgYSBwaWN0dXJlLiBGb3IgdGhlIHJpY2ggY291bGQgbm90IGV2ZW4gZGluZSBiZWZvcmVoYW5kIGF0IGhvbWUgYW5kIHRoZW4gZ28gdG8gdGhlIGNvbW1vbiBtZXNzIHdpdGggZnVsbCBzdG9tYWNocywgYnV0IHRoZSByZXN0IGtlcHQgY2FyZWZ1bCB3YXRjaCBvZiBoaW0gd2hvIGRpZCBub3QgZWF0IGFuZCBkcmluayB3aXRoIHRoZW0sIGFuZCByZXZpbGVkIGhpbSBhcyBhIHdlYWtsaW5nLCBhbmQgb25lIHRvbyBlZmZlbWluYXRlIGZvciB0aGUgY29tbW9uIGRpZXQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBkdWUsIHRoZXJlZm9yZSwgdG8gdGhpcyBsYXN0IHBvbGl0aWNhbCBkZXZpY2UgYWJvdmUgYWxsLCB0aGF0IHRoZSB3ZWFsdGh5IGNpdGl6ZW5zIHdlcmUgaW5jZW5zZWQgYWdhaW5zdCBMeWN1cmd1cywgYW5kIGJhbmRpbmcgdG9nZXRoZXIgYWdhaW5zdCBoaW0sIGRlbm91bmNlZCBoaW0gcHVibGljbHkgd2l0aCBhbmdyeSBzaG91dHMgYW5kIGNyaWVzOyBmaW5hbGx5IG1hbnkgcGVsdGVkIGhpbSB3aXRoIHN0b25lcywgc28gdGhhdCBoZSByYW4gZnJvbSB0aGUgbWFya2V0LXBsYWNlLiBIZSBzdWNjZWVkZWQgaW4gcmVhY2hpbmcgc2FuY3R1YXJ5IGJlZm9yZSB0aGUgcmVzdCBsYWlkIGhhbmRzIG9uIGhpbTsgYnV0IG9uZSB5b3VuZyBtYW4sIEFsY2FuZGVyLCBvdGhlcndpc2Ugbm8gbWVhbiBuYXR1cmUsIGJ1dCBoYXN0eSBhbmQgcGFzc2lvbmF0ZSwgcHJlc3NlZCBoYXJkIHVwb24gaGltLCBhbmQgYXMgaGUgdHVybmVkIGFib3V0LCBzbW90ZSBoaW0gd2l0aCBoaXMgc3RhZmYgYW5kIHB1dCBvdXQgb25lIG9mIGhpcyBleWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5MeWN1cmd1cywgaG93ZXZlciwgd2FzIGZhciBmcm9tIHlpZWxkaW5nIGluIGNvbnNlcXVlbmNlIG9mIHRoaXMgY2FsYW1pdHksIGJ1dCBjb25mcm9udGVkIGhpcyBjb3VudHJ5bWVuLCBhbmQgc2hvd2VkIHRoZW0gaGlzIGZhY2UgYmVzbWVhcmVkIHdpdGggYmxvb2QgYW5kIGhpcyBleWUgZGVzdHJveWVkLiBXaGVyZXVwb24gdGhleSB3ZXJlIHNvIGZpbGxlZCB3aXRoIHNoYW1lIGFuZCBzb3Jyb3cgYXQgdGhlIHNpZ2h0LCB0aGF0IHRoZXkgcGxhY2VkIEFsY2FuZGVyIGluIGhpcyBoYW5kcywgYW5kIGNvbmR1Y3RlZCBoaW0gdG8gaGlzIGhvdXNlIHdpdGggc3ltcGF0aGV0aWMgaW5kaWduYXRpb24uIEx5Y3VyZ3VzIGNvbW1lbmRlZCB0aGVtIGZvciB0aGVpciBjb25kdWN0LCBhbmQgZGlzbWlzc2VkIHRoZW0sIGJ1dCB0b29rIEFsY2FuZGVyIGludG8gdGhlIGhvdXNlIHdpdGggaGltLCB3aGVyZSBoZSBkaWQgdGhlIHlvdXRoIG5vIGhhcm0gYnkgd29yZCBvciBkZWVkLCBidXQgYWZ0ZXIgc2VuZGluZyBhd2F5IGhpcyBjdXN0b21hcnkgc2VydmFudHMgYW5kIGF0dGVuZGFudHMsIG9yZGVyZWQgaGltIHRvIG1pbmlzdGVyIHRvIGhpcyB3YW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHlvdXRoLCB3aG8gd2FzIG9mIGEgbm9ibGUgZGlzcG9zaXRpb24sIGRpZCBhcyBoZSB3YXMgY29tbWFuZGVkLCB3aXRob3V0IGFueSB3b3JkcywgYW5kIGFiaWRpbmcgdGh1cyB3aXRoIEx5Y3VyZ3VzLCBhbmQgc2hhcmluZyBoaXMgZGFpbHkgbGlmZSwgaGUgY2FtZSB0byBrbm93IHRoZSBnZW50bGVuZXNzIG9mIHRoZSBtYW4sIHRoZSBjYWxtbmVzcyBvZiBoaXMgc3Bpcml0LCB0aGUgcmlnaWQgc2ltcGxpY2l0eSBvZiBoaXMgaGFiaXRzLCBhbmQgaGlzIHVud2VhcmllZCBpbmR1c3RyeS4gSGUgdGh1cyBiZWNhbWUgYSBkZXZvdGVkIGZvbGxvd2VyIG9mIEx5Y3VyZ3VzLCBhbmQgdXNlZCB0byB0ZWxsIGhpcyBpbnRpbWF0ZXMgYW5kIGZyaWVuZHMgdGhhdCB0aGUgbWFuIHdhcyBub3QgaGFyc2ggbm9yIHNlbGYtd2lsbGVkLCBhcyBoZSBoYWQgc3VwcG9zZWQsIGJ1dCB0aGUgbWlsZGVzdCBhbmQgZ2VudGxlc3Qgb2YgdGhlbSBhbGwuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2gsIHRoZW4sIHdhcyB0aGUgY2hhc3Rpc2VtZW50IG9mIHRoaXMgeW91bmcgbWFuLCBhbmQgc3VjaCB0aGUgcGVuYWx0eSBsYWlkIHVwb24gaGltLCBuYW1lbHksIHRvIGJlY29tZSwgaW5zdGVhZCBvZiBhIHdpbGQgYW5kIGltcGV0dW91cyB5b3V0aCwgYSBtb3N0IGRlY29yb3VzIGFuZCBkaXNjcmVldCBtYW4uIEx5Y3VyZ3VzLCBtb3Jlb3ZlciwgaW4gbWVtb3J5IG9mIGhpcyBtaXNmb3J0dW5lLCBidWlsdCBhIHRlbXBsZSB0byBBdGhlbmEgT3B0aWxpdGlzLCBzbyBjYWxsZWQgZnJvbSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm9wdGlsdXMsPC9xPiB3aGljaCBpcyB0aGUgbG9jYWwgRG9yaWMgd29yZCBmb3IgPGVtcGg+ZXllPC9lbXBoPi4gIFNvbWUgd3JpdGVycywgaG93ZXZlciwgb2Ygd2hvbSBvbmUgaXMgRGlvc2NvcmlkZXMsIHdobyB3cm90ZSBhIHRyZWF0aXNlIG9uIHRoZSBTcGFydGFuIGNpdmlsIHBvbGl0eSwgc2F5IHRoYXQgYWx0aG91Z2ggTHljdXJndXMgd2FzIHN0cnVjayBpbiB0aGUgZXllLCBoaXMgZXllIHdhcyBub3QgYmxpbmRlZCwgYnV0IGhlIGJ1aWx0IHRoZSB0ZW1wbGUgdG8gdGhlIGdvZGRlc3MgYXMgYSB0aGFuay1vZmZlcmluZyBmb3IgaXRzIGhlYWxpbmcuIEJlIHRoYXQgYXMgaXQgbWF5LCB0aGUgU3BhcnRhbiBwcmFjdGljZSBvZiBjYXJyeWluZyBzdGF2ZXMgaW50byB0aGVpciBhc3NlbWJsaWVzIHdhcyBhYmFuZG9uZWQgYWZ0ZXIgdGhpcyB1bmZvcnR1bmF0ZSBhY2NpZGVudC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGR1ZSwgdGhlcmVmb3JlLCB0byB0aGlzIGxhc3QgcG9saXRpY2FsIGRldmljZSBhYm92ZSBhbGwsIHRoYXQgdGhlIHdlYWx0aHkgY2l0aXplbnMgd2VyZSBpbmNlbnNlZCBhZ2FpbnN0IEx5Y3VyZ3VzLCBhbmQgYmFuZGluZyB0b2dldGhlciBhZ2FpbnN0IGhpbSwgZGVub3VuY2VkIGhpbSBwdWJsaWNseSB3aXRoIGFuZ3J5IHNob3V0cyBhbmQgY3JpZXM7IGZpbmFsbHkgbWFueSBwZWx0ZWQgaGltIHdpdGggc3RvbmVzLCBzbyB0aGF0IGhlIHJhbiBmcm9tIHRoZSBtYXJrZXQtcGxhY2UuIEhlIHN1Y2NlZWRlZCBpbiByZWFjaGluZyBzYW5jdHVhcnkgYmVmb3JlIHRoZSByZXN0IGxhaWQgaGFuZHMgb24gaGltOyBidXQgb25lIHlvdW5nIG1hbiwgQWxjYW5kZXIsIG90aGVyd2lzZSBubyBtZWFuIG5hdHVyZSwgYnV0IGhhc3R5IGFuZCBwYXNzaW9uYXRlLCBwcmVzc2VkIGhhcmQgdXBvbiBoaW0sIGFuZCBhcyBoZSB0dXJuZWQgYWJvdXQsIHNtb3RlIGhpbSB3aXRoIGhpcyBzdGFmZiBhbmQgcHV0IG91dCBvbmUgb2YgaGlzIGV5ZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkx5Y3VyZ3VzLCBob3dldmVyLCB3YXMgZmFyIGZyb20geWllbGRpbmcgaW4gY29uc2VxdWVuY2Ugb2YgdGhpcyBjYWxhbWl0eSwgYnV0IGNvbmZyb250ZWQgaGlzIGNvdW50cnltZW4sIGFuZCBzaG93ZWQgdGhlbSBoaXMgZmFjZSBiZXNtZWFyZWQgd2l0aCBibG9vZCBhbmQgaGlzIGV5ZSBkZXN0cm95ZWQuIFdoZXJldXBvbiB0aGV5IHdlcmUgc28gZmlsbGVkIHdpdGggc2hhbWUgYW5kIHNvcnJvdyBhdCB0aGUgc2lnaHQsIHRoYXQgdGhleSBwbGFjZWQgQWxjYW5kZXIgaW4gaGlzIGhhbmRzLCBhbmQgY29uZHVjdGVkIGhpbSB0byBoaXMgaG91c2Ugd2l0aCBzeW1wYXRoZXRpYyBpbmRpZ25hdGlvbi4gTHljdXJndXMgY29tbWVuZGVkIHRoZW0gZm9yIHRoZWlyIGNvbmR1Y3QsIGFuZCBkaXNtaXNzZWQgdGhlbSwgYnV0IHRvb2sgQWxjYW5kZXIgaW50byB0aGUgaG91c2Ugd2l0aCBoaW0sIHdoZXJlIGhlIGRpZCB0aGUgeW91dGggbm8gaGFybSBieSB3b3JkIG9yIGRlZWQsIGJ1dCBhZnRlciBzZW5kaW5nIGF3YXkgaGlzIGN1c3RvbWFyeSBzZXJ2YW50cyBhbmQgYXR0ZW5kYW50cywgb3JkZXJlZCBoaW0gdG8gbWluaXN0ZXIgdG8gaGlzIHdhbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB5b3V0aCwgd2hvIHdhcyBvZiBhIG5vYmxlIGRpc3Bvc2l0aW9uLCBkaWQgYXMgaGUgd2FzIGNvbW1hbmRlZCwgd2l0aG91dCBhbnkgd29yZHMsIGFuZCBhYmlkaW5nIHRodXMgd2l0aCBMeWN1cmd1cywgYW5kIHNoYXJpbmcgaGlzIGRhaWx5IGxpZmUsIGhlIGNhbWUgdG8ga25vdyB0aGUgZ2VudGxlbmVzcyBvZiB0aGUgbWFuLCB0aGUgY2FsbW5lc3Mgb2YgaGlzIHNwaXJpdCwgdGhlIHJpZ2lkIHNpbXBsaWNpdHkgb2YgaGlzIGhhYml0cywgYW5kIGhpcyB1bndlYXJpZWQgaW5kdXN0cnkuIEhlIHRodXMgYmVjYW1lIGEgZGV2b3RlZCBmb2xsb3dlciBvZiBMeWN1cmd1cywgYW5kIHVzZWQgdG8gdGVsbCBoaXMgaW50aW1hdGVzIGFuZCBmcmllbmRzIHRoYXQgdGhlIG1hbiB3YXMgbm90IGhhcnNoIG5vciBzZWxmLXdpbGxlZCwgYXMgaGUgaGFkIHN1cHBvc2VkLCBidXQgdGhlIG1pbGRlc3QgYW5kIGdlbnRsZXN0IG9mIHRoZW0gYWxsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2gsIHRoZW4sIHdhcyB0aGUgY2hhc3Rpc2VtZW50IG9mIHRoaXMgeW91bmcgbWFuLCBhbmQgc3VjaCB0aGUgcGVuYWx0eSBsYWlkIHVwb24gaGltLCBuYW1lbHksIHRvIGJlY29tZSwgaW5zdGVhZCBvZiBhIHdpbGQgYW5kIGltcGV0dW91cyB5b3V0aCwgYSBtb3N0IGRlY29yb3VzIGFuZCBkaXNjcmVldCBtYW4uIEx5Y3VyZ3VzLCBtb3Jlb3ZlciwgaW4gbWVtb3J5IG9mIGhpcyBtaXNmb3J0dW5lLCBidWlsdCBhIHRlbXBsZSB0byBBdGhlbmEgT3B0aWxpdGlzLCBzbyBjYWxsZWQgZnJvbSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b3B0aWx1cyw8L3E+IHdoaWNoIGlzIHRoZSBsb2NhbCBEb3JpYyB3b3JkIGZvciA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmV5ZTwvZW1waD4uICBTb21lIHdyaXRlcnMsIGhvd2V2ZXIsIG9mIHdob20gb25lIGlzIERpb3Njb3JpZGVzLCB3aG8gd3JvdGUgYSB0cmVhdGlzZSBvbiB0aGUgU3BhcnRhbiBjaXZpbCBwb2xpdHksIHNheSB0aGF0IGFsdGhvdWdoIEx5Y3VyZ3VzIHdhcyBzdHJ1Y2sgaW4gdGhlIGV5ZSwgaGlzIGV5ZSB3YXMgbm90IGJsaW5kZWQsIGJ1dCBoZSBidWlsdCB0aGUgdGVtcGxlIHRvIHRoZSBnb2RkZXNzIGFzIGEgdGhhbmstb2ZmZXJpbmcgZm9yIGl0cyBoZWFsaW5nLiBCZSB0aGF0IGFzIGl0IG1heSwgdGhlIFNwYXJ0YW4gcHJhY3RpY2Ugb2YgY2Fycnlpbmcgc3RhdmVzIGludG8gdGhlaXIgYXNzZW1ibGllcyB3YXMgYWJhbmRvbmVkIGFmdGVyIHRoaXMgdW5mb3J0dW5hdGUgYWNjaWRlbnQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUgcHVibGljIG1lc3NlcywgdGhlIENyZXRhbnMgY2FsbCB0aGVtIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW5kcmVpYSw8L3E+IGJ1dCB0aGUgTGFjZWRhZW1vbmlhbnMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGhpZGl0aWEsPC9xPiBlaXRoZXIgYmVjYXVzZSB0aGV5IGFyZSBjb25kdWNpdmUgdG8gPGVtcGg+ZnJpZW5kc2hpcDwvZW1waD4gYW5kIGZyaWVuZGxpbmVzcywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waGlkaXRpYTwvcT4gYmVpbmcgZXF1aXZhbGVudCB0byAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBoaWxpdGlhPC9xPjsgb3IgYmVjYXVzZSB0aGV5IGFjY3VzdG9tIG1lbiB0byBzaW1wbGljaXR5IGFuZCA8ZW1waD50aHJpZnQ8L2VtcGg+LCBmb3Igd2hpY2ggdGhlaXIgd29yZCBpcyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBoZWlkby48L3E+IEJ1dCBpdCBpcyBxdWl0ZSBwb3NzaWJsZSwgYXMgc29tZSBzYXksIHRoYXQgdGhlIGZpcnN0IGxldHRlciBvZiB0aGUgd29yZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBoaWRpdGlhPC9xPiBoYXMgYmVlbiBhZGRlZCB0byBpdCwgbWFraW5nIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGhpZGl0aWE8L3E+IG91dCBvZiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmVkaXRpYSw8L3E+IHdoaWNoIHJlZmVycyBtZXJlbHkgdG8gbWVhbHMgYW5kIDxlbXBoPmVhdGluZzwvZW1waD4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgbWV0IGluIGNvbXBhbmllcyBvZiBmaWZ0ZWVuLCBhIGZldyBtb3JlIG9yIGxlc3MsIGFuZCBlYWNoIG9uZSBvZiB0aGUgbWVzcy1tYXRlcyBjb250cmlidXRlZCBtb250aGx5IGEgYnVzaGVsIG9mIGJhcmxleS1tZWFsLCBlaWdodCBnYWxsb25zIG9mIHdpbmUsIGZpdmUgcG91bmRzIG9mIGNoZWVzZSwgdHdvIGFuZCBhIGhhbGYgcG91bmRzIG9mIGZpZ3MsIGFuZCBpbiBhZGRpdGlvbiB0byB0aGlzLCBhIHZlcnkgc21hbGwgc3VtIG9mIG1vbmV5IGZvciBzdWNoIHJlbGlzaGVzIGFzIGZsZXNoIGFuZCBmaXNoLiBCZXNpZGVzIHRoaXMsIHdoZW5ldmVyIGFueSBvbmUgbWFkZSBhIHNhY3JpZmljZSBvZiBmaXJzdCBmcnVpdHMsIG9yIGJyb3VnaHQgaG9tZSBnYW1lIGZyb20gdGhlIGh1bnQsIGhlIHNlbnQgYSBwb3J0aW9uIHRvIGhpcyBtZXNzLiBGb3Igd2hlbmV2ZXIgYW55IG9uZSB3YXMgYmVsYXRlZCBieSBhIHNhY3JpZmljZSBvciB0aGUgY2hhc2UsIGhlIHdhcyBhbGxvd2VkIHRvIHN1cCBhdCBob21lLCBidXQgdGhlIHJlc3QgaGFkIHRvIGJlIGF0IHRoZSBtZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYSBsb25nIHRpbWUgdGhpcyBjdXN0b20gb2YgZWF0aW5nIGF0IGNvbW1vbiBtZXNzLXRhYmxlcyB3YXMgcmlnaWRseSBvYnNlcnZlZC4gRm9yIGluc3RhbmNlLCB3aGVuIEtpbmcgQWdpcywgb24gcmV0dXJuaW5nIGZyb20gYW4gZXhwZWRpdGlvbiBpbiB3aGljaCBoZSBoYWQgYmVlbiB2aWN0b3Jpb3VzIG92ZXIgdGhlIEF0aGVuaWFucywgd2lzaGVkIHRvIHN1cCBhdCBob21lIHdpdGggaGlzIHdpZmUsIGFuZCBzZW50IGZvciBoaXMgcmF0aW9ucywgdGhlIHBvbGVtYXJjaHM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBTcGFydGEsIG1pbGl0YXJ5IGNvbW1hbmRlcnMgdW5kZXIgdGhlIGtpbmdzLjwvbm90ZT4gcmVmdXNlZCB0byBzZW5kIHRoZW0gdG8gaGltOyBhbmQgd2hlbiBvbiB0aGUgZm9sbG93aW5nIGRheSBoaXMgYW5nZXIgbGVkIGhpbSB0byBvbWl0IHRoZSBjdXN0b21hcnkgc2FjcmlmaWNlLCB0aGV5IGxhaWQgYSBmaW5lIHVwb24gaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIHRoZSBwdWJsaWMgbWVzc2VzLCB0aGUgQ3JldGFucyBjYWxsIHRoZW0gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFuZHJlaWEsPC9xPiBidXQgdGhlIExhY2VkYWVtb25pYW5zLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGhpZGl0aWEsPC9xPiBlaXRoZXIgYmVjYXVzZSB0aGV5IGFyZSBjb25kdWNpdmUgdG8gPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5mcmllbmRzaGlwPC9lbXBoPiBhbmQgZnJpZW5kbGluZXNzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGhpZGl0aWE8L3E+IGJlaW5nIGVxdWl2YWxlbnQgdG8gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBoaWxpdGlhPC9xPjsgb3IgYmVjYXVzZSB0aGV5IGFjY3VzdG9tIG1lbiB0byBzaW1wbGljaXR5IGFuZCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnRocmlmdDwvZW1waD4sIGZvciB3aGljaCB0aGVpciB3b3JkIGlzIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waGVpZG8uPC9xPiBCdXQgaXQgaXMgcXVpdGUgcG9zc2libGUsIGFzIHNvbWUgc2F5LCB0aGF0IHRoZSBmaXJzdCBsZXR0ZXIgb2YgdGhlIHdvcmQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBoaWRpdGlhPC9xPiBoYXMgYmVlbiBhZGRlZCB0byBpdCwgbWFraW5nIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waGlkaXRpYTwvcT4gb3V0IG9mIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5lZGl0aWEsPC9xPiB3aGljaCByZWZlcnMgbWVyZWx5IHRvIG1lYWxzIGFuZCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmVhdGluZzwvZW1waD4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgbWV0IGluIGNvbXBhbmllcyBvZiBmaWZ0ZWVuLCBhIGZldyBtb3JlIG9yIGxlc3MsIGFuZCBlYWNoIG9uZSBvZiB0aGUgbWVzcy1tYXRlcyBjb250cmlidXRlZCBtb250aGx5IGEgYnVzaGVsIG9mIGJhcmxleS1tZWFsLCBlaWdodCBnYWxsb25zIG9mIHdpbmUsIGZpdmUgcG91bmRzIG9mIGNoZWVzZSwgdHdvIGFuZCBhIGhhbGYgcG91bmRzIG9mIGZpZ3MsIGFuZCBpbiBhZGRpdGlvbiB0byB0aGlzLCBhIHZlcnkgc21hbGwgc3VtIG9mIG1vbmV5IGZvciBzdWNoIHJlbGlzaGVzIGFzIGZsZXNoIGFuZCBmaXNoLiBCZXNpZGVzIHRoaXMsIHdoZW5ldmVyIGFueSBvbmUgbWFkZSBhIHNhY3JpZmljZSBvZiBmaXJzdCBmcnVpdHMsIG9yIGJyb3VnaHQgaG9tZSBnYW1lIGZyb20gdGhlIGh1bnQsIGhlIHNlbnQgYSBwb3J0aW9uIHRvIGhpcyBtZXNzLiBGb3Igd2hlbmV2ZXIgYW55IG9uZSB3YXMgYmVsYXRlZCBieSBhIHNhY3JpZmljZSBvciB0aGUgY2hhc2UsIGhlIHdhcyBhbGxvd2VkIHRvIHN1cCBhdCBob21lLCBidXQgdGhlIHJlc3QgaGFkIHRvIGJlIGF0IHRoZSBtZXNzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhIGxvbmcgdGltZSB0aGlzIGN1c3RvbSBvZiBlYXRpbmcgYXQgY29tbW9uIG1lc3MtdGFibGVzIHdhcyByaWdpZGx5IG9ic2VydmVkLiBGb3IgaW5zdGFuY2UsIHdoZW4gS2luZyBBZ2lzLCBvbiByZXR1cm5pbmcgZnJvbSBhbiBleHBlZGl0aW9uIGluIHdoaWNoIGhlIGhhZCBiZWVuIHZpY3RvcmlvdXMgb3ZlciB0aGUgQXRoZW5pYW5zLCB3aXNoZWQgdG8gc3VwIGF0IGhvbWUgd2l0aCBoaXMgd2lmZSwgYW5kIHNlbnQgZm9yIGhpcyByYXRpb25zLCB0aGUgcG9sZW1hcmNoczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXQgU3BhcnRhLCBtaWxpdGFyeSBjb21tYW5kZXJzIHVuZGVyIHRoZSBraW5ncy48L25vdGU+IHJlZnVzZWQgdG8gc2VuZCB0aGVtIHRvIGhpbTsgYW5kIHdoZW4gb24gdGhlIGZvbGxvd2luZyBkYXkgaGlzIGFuZ2VyIGxlZCBoaW0gdG8gb21pdCB0aGUgY3VzdG9tYXJ5IHNhY3JpZmljZSwgdGhleSBsYWlkIGEgZmluZSB1cG9uIGhpbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Qm95cyBhbHNvIHVzZWQgdG8gY29tZSB0byB0aGVzZSBwdWJsaWMgbWVzc2VzLCBhcyBpZiB0aGV5IHdlcmUgYXR0ZW5kaW5nIHNjaG9vbHMgb2Ygc29icmlldHk7IHRoZXJlIHRoZXkgd291bGQgbGlzdGVuIHRvIHBvbGl0aWNhbCBkaXNjdXNzaW9ucyBhbmQgc2VlIGluc3RydWN0aXZlIG1vZGVscyBvZiBsaWJlcmFsIGJyZWVkaW5nLiBUaGVyZSB0aGV5IHRoZW1zZWx2ZXMgYWxzbyBiZWNhbWUgYWNjdXN0b21lZCB0byBzcG9ydCBhbmQgamVzdCB3aXRob3V0IHNjdXJyaWxpdHksIGFuZCB0byBlbmR1cmUgamVzdGluZyB3aXRob3V0IGRpc3BsZWFzdXJlLiBJbmRlZWQsIGl0IHNlZW1zIHRvIGhhdmUgYmVlbiBlc3BlY2lhbGx5IGNoYXJhY3RlcmlzdGljIG9mIGEgU3BhcnRhbiB0byBlbmR1cmUgamVzdGluZzsgYnV0IGlmIGFueSBvbmUgY291bGQgbm90IGJlYXIgdXAgdW5kZXIgaXQsIGhlIGhhZCBvbmx5IHRvIGFzayBpdCwgYW5kIHRoZSBqZXN0ZXIgY2Vhc2VkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBlYWNoIG9uZSBjYW1lIGluLCB0aGUgZWxkZXN0IG9mIHRoZSBjb21wYW55IHBvaW50ZWQgdG8gdGhlIGRvb3IgYW5kIHNhaWQgdG8gaGltOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRocm91Z2ggdGhhdCBkb29yIG5vIHdvcmQgZ29lcyBmb3J0aCBvdXRzaWRlLjwvcT4gQW5kIHRoZXkgc2F5IHRoYXQgYSBjYW5kaWRhdGUgZm9yIG1lbWJlcnNoaXAgaW4gb25lIG9mIHRoZXNlIG1lc3NlcyB1bmRlcndlbnQgdGhlIGZvbGxvd2luZyBvcmRlYWwuIEVhY2ggb2YgdGhlIG1lc3MtbWF0ZXMgdG9vayBpbiBoaXMgaGFuZCBhIGJpdCBvZiBzb2Z0IGJyZWFkLCBhbmQgd2hlbiBhIHNlcnZhbnQgY2FtZSBhbG9uZyB3aXRoIGEgYm93bCB1cG9uIGhpcyBoZWFkLCB0aGVuIHRoZXkgY2FzdCBpdCBpbnRvIHRoaXMgd2l0aG91dCBhIHdvcmQsIGxpa2UgYSBiYWxsb3QsIGxlYXZpbmcgaXQganVzdCBhcyBpdCB3YXMgaWYgaGUgYXBwcm92ZWQgb2YgdGhlIGNhbmRpZGF0ZSwgYnV0IGlmIGhlIGRpc2FwcHJvdmVkLCBzcXVlZXppbmcgaXQgdGlnaHQgaW4gaGlzIGhhbmQgZmlyc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZmxhdHRlbmVkIHBpZWNlIG9mIGJyZWFkIGhhZCB0aGUgZm9yY2Ugb2YgYSBwZXJmb3JhdGVkLCBvciBuZWdhdGl2ZSwgYmFsbG90LiBBbmQgaWYgb25lIHN1Y2ggaXMgZm91bmQgaW4gdGhlIGJvd2wsIHRoZSBjYW5kaWRhdGUgaXMgbm90IGFkbWl0dGVkIHRvIHRoZSBtZXNzLCBiZWNhdXNlIHRoZXkgd2lzaCBhbGwgaXRzIG1lbWJlcnMgdG8gYmUgY29uZ2VuaWFsLiBUaGUgY2FuZGlkYXRlIHRodXMgcmVqZWN0ZWQgaXMgc2FpZCB0byBoYXZlIGJlZW4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jYWRkaXNoZWQsPC9xPiBmb3IgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jYWRkaWNodXM8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9yIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNhZGRvcyw8L3E+IGZyb20gd2hpY2ggdGhlIHZlcmIgaW4gdGhlIEdyZWVrIHRleHQgaXMgZm9ybWVkLjwvbm90ZT4gaXMgdGhlIG5hbWUgb2YgdGhlIGJvd2wgaW50byB3aGljaCB0aGV5IGNhc3QgdGhlIHBpZWNlcyBvZiBicmVhZC4gT2YgdGhlaXIgZGlzaGVzLCB0aGUgYmxhY2sgYnJvdGggaXMgaGVsZCBpbiB0aGUgaGlnaGVzdCBlc3RlZW0sIHNvIHRoYXQgdGhlIGVsZGVybHkgbWVuIGRvIG5vdCBldmVuIGFzayBmb3IgYSBiaXQgb2YgbWVhdCwgYnV0IGxlYXZlIGl0IGZvciB0aGUgeW91bmcgbWVuLCB3aGlsZSB0aGV5IHRoZW1zZWx2ZXMgaGF2ZSB0aGUgYnJvdGggcG91cmVkIG91dCBmb3IgdGhlaXIgbWVhbHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgb25lIG9mIHRoZSBraW5ncyBvZiBQb250dXMgYWN0dWFsbHkgYm91Z2h0IGEgU3BhcnRhbiBjb29rIGZvciB0aGUgc2FrZSBvZiBoYXZpbmcgdGhpcyBicm90aCwgYW5kIHRoZW4sIHdoZW4gaGUgdGFzdGVkIGl0LCBkaXNsaWtlZCBpdDsgd2hlcmV1cG9uIHRoZSBjb29rIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBLaW5nLCB0aG9zZSB3aG8gcmVsaXNoIHRoaXMgYnJvdGggbXVzdCBmaXJzdCBoYXZlIGJhdGhlZCBpbiB0aGUgcml2ZXIgRXVyb3Rhcy48L3E+IEFmdGVyIGRyaW5raW5nIG1vZGVyYXRlbHksIHRoZXkgZ28gb2ZmIGhvbWUgd2l0aG91dCBhIHRvcmNoOyBmb3IgdGhleSBhcmUgbm90IGFsbG93ZWQgdG8gd2FsayB3aXRoIGEgbGlnaHQsIGVpdGhlciBvbiB0aGlzIG9yIGFueSBvdGhlciBvY2Nhc2lvbiwgdGhhdCB0aGV5IG1heSBhY2N1c3RvbSB0aGVtc2VsdmVzIHRvIG1hcmNoaW5nIGJvbGRseSBhbmQgd2l0aG91dCBmZWFyIGluIHRoZSBkYXJrbmVzcyBvZiBuaWdodC4gU3VjaCwgdGhlbiwgaXMgdGhlIGZhc2hpb24gb2YgdGhlaXIgY29tbW9uIG1lc3Nlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJveXMgYWxzbyB1c2VkIHRvIGNvbWUgdG8gdGhlc2UgcHVibGljIG1lc3NlcywgYXMgaWYgdGhleSB3ZXJlIGF0dGVuZGluZyBzY2hvb2xzIG9mIHNvYnJpZXR5OyB0aGVyZSB0aGV5IHdvdWxkIGxpc3RlbiB0byBwb2xpdGljYWwgZGlzY3Vzc2lvbnMgYW5kIHNlZSBpbnN0cnVjdGl2ZSBtb2RlbHMgb2YgbGliZXJhbCBicmVlZGluZy4gVGhlcmUgdGhleSB0aGVtc2VsdmVzIGFsc28gYmVjYW1lIGFjY3VzdG9tZWQgdG8gc3BvcnQgYW5kIGplc3Qgd2l0aG91dCBzY3VycmlsaXR5LCBhbmQgdG8gZW5kdXJlIGplc3Rpbmcgd2l0aG91dCBkaXNwbGVhc3VyZS4gSW5kZWVkLCBpdCBzZWVtcyB0byBoYXZlIGJlZW4gZXNwZWNpYWxseSBjaGFyYWN0ZXJpc3RpYyBvZiBhIFNwYXJ0YW4gdG8gZW5kdXJlIGplc3Rpbmc7IGJ1dCBpZiBhbnkgb25lIGNvdWxkIG5vdCBiZWFyIHVwIHVuZGVyIGl0LCBoZSBoYWQgb25seSB0byBhc2sgaXQsIGFuZCB0aGUgamVzdGVyIGNlYXNlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIGVhY2ggb25lIGNhbWUgaW4sIHRoZSBlbGRlc3Qgb2YgdGhlIGNvbXBhbnkgcG9pbnRlZCB0byB0aGUgZG9vciBhbmQgc2FpZCB0byBoaW06IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaHJvdWdoIHRoYXQgZG9vciBubyB3b3JkIGdvZXMgZm9ydGggb3V0c2lkZS48L3E+IEFuZCB0aGV5IHNheSB0aGF0IGEgY2FuZGlkYXRlIGZvciBtZW1iZXJzaGlwIGluIG9uZSBvZiB0aGVzZSBtZXNzZXMgdW5kZXJ3ZW50IHRoZSBmb2xsb3dpbmcgb3JkZWFsLiBFYWNoIG9mIHRoZSBtZXNzLW1hdGVzIHRvb2sgaW4gaGlzIGhhbmQgYSBiaXQgb2Ygc29mdCBicmVhZCwgYW5kIHdoZW4gYSBzZXJ2YW50IGNhbWUgYWxvbmcgd2l0aCBhIGJvd2wgdXBvbiBoaXMgaGVhZCwgdGhlbiB0aGV5IGNhc3QgaXQgaW50byB0aGlzIHdpdGhvdXQgYSB3b3JkLCBsaWtlIGEgYmFsbG90LCBsZWF2aW5nIGl0IGp1c3QgYXMgaXQgd2FzIGlmIGhlIGFwcHJvdmVkIG9mIHRoZSBjYW5kaWRhdGUsIGJ1dCBpZiBoZSBkaXNhcHByb3ZlZCwgc3F1ZWV6aW5nIGl0IHRpZ2h0IGluIGhpcyBoYW5kIGZpcnN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZmxhdHRlbmVkIHBpZWNlIG9mIGJyZWFkIGhhZCB0aGUgZm9yY2Ugb2YgYSBwZXJmb3JhdGVkLCBvciBuZWdhdGl2ZSwgYmFsbG90LiBBbmQgaWYgb25lIHN1Y2ggaXMgZm91bmQgaW4gdGhlIGJvd2wsIHRoZSBjYW5kaWRhdGUgaXMgbm90IGFkbWl0dGVkIHRvIHRoZSBtZXNzLCBiZWNhdXNlIHRoZXkgd2lzaCBhbGwgaXRzIG1lbWJlcnMgdG8gYmUgY29uZ2VuaWFsLiBUaGUgY2FuZGlkYXRlIHRodXMgcmVqZWN0ZWQgaXMgc2FpZCB0byBoYXZlIGJlZW4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNhZGRpc2hlZCw8L3E+IGZvciAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y2FkZGljaHVzPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9yIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y2FkZG9zLDwvcT4gZnJvbSB3aGljaCB0aGUgdmVyYiBpbiB0aGUgR3JlZWsgdGV4dCBpcyBmb3JtZWQuPC9ub3RlPiBpcyB0aGUgbmFtZSBvZiB0aGUgYm93bCBpbnRvIHdoaWNoIHRoZXkgY2FzdCB0aGUgcGllY2VzIG9mIGJyZWFkLiBPZiB0aGVpciBkaXNoZXMsIHRoZSBibGFjayBicm90aCBpcyBoZWxkIGluIHRoZSBoaWdoZXN0IGVzdGVlbSwgc28gdGhhdCB0aGUgZWxkZXJseSBtZW4gZG8gbm90IGV2ZW4gYXNrIGZvciBhIGJpdCBvZiBtZWF0LCBidXQgbGVhdmUgaXQgZm9yIHRoZSB5b3VuZyBtZW4sIHdoaWxlIHRoZXkgdGhlbXNlbHZlcyBoYXZlIHRoZSBicm90aCBwb3VyZWQgb3V0IGZvciB0aGVpciBtZWFscy4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNhZGRvcyw8L3E+IGZyb20gd2hpY2ggdGhlIHZlcmIgaW4gdGhlIEdyZWVrIHRleHQgaXMgZm9ybWVkLjwvdHJhbnNsYXRpb24+"
translation['12.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgb25lIG9mIHRoZSBraW5ncyBvZiBQb250dXMgYWN0dWFsbHkgYm91Z2h0IGEgU3BhcnRhbiBjb29rIGZvciB0aGUgc2FrZSBvZiBoYXZpbmcgdGhpcyBicm90aCwgYW5kIHRoZW4sIHdoZW4gaGUgdGFzdGVkIGl0LCBkaXNsaWtlZCBpdDsgd2hlcmV1cG9uIHRoZSBjb29rIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIEtpbmcsIHRob3NlIHdobyByZWxpc2ggdGhpcyBicm90aCBtdXN0IGZpcnN0IGhhdmUgYmF0aGVkIGluIHRoZSByaXZlciBFdXJvdGFzLjwvcT4gQWZ0ZXIgZHJpbmtpbmcgbW9kZXJhdGVseSwgdGhleSBnbyBvZmYgaG9tZSB3aXRob3V0IGEgdG9yY2g7IGZvciB0aGV5IGFyZSBub3QgYWxsb3dlZCB0byB3YWxrIHdpdGggYSBsaWdodCwgZWl0aGVyIG9uIHRoaXMgb3IgYW55IG90aGVyIG9jY2FzaW9uLCB0aGF0IHRoZXkgbWF5IGFjY3VzdG9tIHRoZW1zZWx2ZXMgdG8gbWFyY2hpbmcgYm9sZGx5IGFuZCB3aXRob3V0IGZlYXIgaW4gdGhlIGRhcmtuZXNzIG9mIG5pZ2h0LiBTdWNoLCB0aGVuLCBpcyB0aGUgZmFzaGlvbiBvZiB0aGVpciBjb21tb24gbWVzc2VzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob25lIG9mIGhpcyBsYXdzIHdlcmUgcHV0IGludG8gd3JpdGluZyBieSBMeWN1cmd1cywgaW5kZWVkLCBvbmUgb2YgdGhlIHNvLWNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnJoZXRyYXM8L3E+IGZvcmJpZHMgaXQuIEZvciBoZSB0aG91Z2h0IHRoYXQgaWYgdGhlIG1vc3QgaW1wb3J0YW50IGFuZCBiaW5kaW5nIHByaW5jaXBsZXMgd2hpY2ggY29uZHVjZSB0byB0aGUgcHJvc3Blcml0eSBhbmQgdmlydHVlIG9mIGEgY2l0eSB3ZXJlIGltcGxhbnRlZCBpbiB0aGUgaGFiaXRzIGFuZCB0cmFpbmluZyBvZiBpdHMgY2l0aXplbnMsIHRoZXkgd291bGQgcmVtYWluIHVuY2hhbmdlZCBhbmQgc2VjdXJlLCBoYXZpbmcgYSBzdHJvbmdlciBib25kIHRoYW4gY29tcHVsc2lvbiBpbiB0aGUgZml4ZWQgcHVycG9zZXMgaW1wYXJ0ZWQgdG8gdGhlIHlvdW5nIGJ5IGVkdWNhdGlvbiwgd2hpY2ggcGVyZm9ybXMgdGhlIG9mZmljZSBvZiBhIGxhdy1naXZlciBmb3IgZXZlcnkgb25lIG9mIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgbWlub3IgbWF0dGVycywgc3VjaCBhcyBidXNpbmVzcyBjb250cmFjdHMsIGFuZCBjYXNlcyB3aGVyZSB0aGUgbmVlZHMgdmFyeSBmcm9tIHRpbWUgdG8gdGltZSwgaXQgd2FzIGJldHRlciwgYXMgaGUgdGhvdWdodCwgbm90IHRvIGhhbXBlciB0aGVtIGJ5IHdyaXR0ZW4gY29uc3RyYWludHMgb3IgZml4ZWQgdXNhZ2VzLCBidXQgdG8gc3VmZmVyIHRoZW0sIGFzIG9jY2FzaW9uIGRlbWFuZGVkLCB0byByZWNlaXZlIHN1Y2ggbW9kaWZpY2F0aW9ucyBhcyBlZHVjYXRlZCBtZW4gc2hvdWxkIGRldGVybWluZS4gSW5kZWVkLCBoZSBhc3NpZ25lZCB0aGUgZnVuY3Rpb24gb2YgbGF3LW1ha2luZyB3aG9sbHkgYW5kIGVudGlyZWx5IHRvIGVkdWNhdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm9uZSBvZiBoaXMgbGF3cyB3ZXJlIHB1dCBpbnRvIHdyaXRpbmcgYnkgTHljdXJndXMsIGluZGVlZCwgb25lIG9mIHRoZSBzby1jYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnJoZXRyYXM8L3E+IGZvcmJpZHMgaXQuIEZvciBoZSB0aG91Z2h0IHRoYXQgaWYgdGhlIG1vc3QgaW1wb3J0YW50IGFuZCBiaW5kaW5nIHByaW5jaXBsZXMgd2hpY2ggY29uZHVjZSB0byB0aGUgcHJvc3Blcml0eSBhbmQgdmlydHVlIG9mIGEgY2l0eSB3ZXJlIGltcGxhbnRlZCBpbiB0aGUgaGFiaXRzIGFuZCB0cmFpbmluZyBvZiBpdHMgY2l0aXplbnMsIHRoZXkgd291bGQgcmVtYWluIHVuY2hhbmdlZCBhbmQgc2VjdXJlLCBoYXZpbmcgYSBzdHJvbmdlciBib25kIHRoYW4gY29tcHVsc2lvbiBpbiB0aGUgZml4ZWQgcHVycG9zZXMgaW1wYXJ0ZWQgdG8gdGhlIHlvdW5nIGJ5IGVkdWNhdGlvbiwgd2hpY2ggcGVyZm9ybXMgdGhlIG9mZmljZSBvZiBhIGxhdy1naXZlciBmb3IgZXZlcnkgb25lIG9mIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgbWlub3IgbWF0dGVycywgc3VjaCBhcyBidXNpbmVzcyBjb250cmFjdHMsIGFuZCBjYXNlcyB3aGVyZSB0aGUgbmVlZHMgdmFyeSBmcm9tIHRpbWUgdG8gdGltZSwgaXQgd2FzIGJldHRlciwgYXMgaGUgdGhvdWdodCwgbm90IHRvIGhhbXBlciB0aGVtIGJ5IHdyaXR0ZW4gY29uc3RyYWludHMgb3IgZml4ZWQgdXNhZ2VzLCBidXQgdG8gc3VmZmVyIHRoZW0sIGFzIG9jY2FzaW9uIGRlbWFuZGVkLCB0byByZWNlaXZlIHN1Y2ggbW9kaWZpY2F0aW9ucyBhcyBlZHVjYXRlZCBtZW4gc2hvdWxkIGRldGVybWluZS4gSW5kZWVkLCBoZSBhc3NpZ25lZCB0aGUgZnVuY3Rpb24gb2YgbGF3LW1ha2luZyB3aG9sbHkgYW5kIGVudGlyZWx5IHRvIGVkdWNhdGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T25lIG9mIGhpcyByaGV0cmFzIGFjY29yZGluZ2x5LCBhcyBJIGhhdmUgc2FpZCwgcHJvaGliaXRlZCB0aGUgdXNlIG9mIHdyaXR0ZW4gbGF3cy4gQW5vdGhlciB3YXMgZGlyZWN0ZWQgYWdhaW5zdCBleHRyYXZhZ2FuY2UsIG9yZGFpbmluZyB0aGF0IGV2ZXJ5IGhvdXNlIHNob3VsZCBoYXZlIGl0cyByb29mIGZhc2hpb25lZCBieSB0aGUgYXhlLCBhbmQgaXRzIGRvb3JzIGJ5IHRoZSBzYXcgb25seSwgYW5kIGJ5IG5vIG90aGVyIHRvb2wuIEZvciwgYXMgaW4gbGF0ZXIgdGltZXMgRXBhbWlub25kYXMgaXMgcmVwb3J0ZWQgdG8gaGF2ZSBzYWlkIGF0IGhpcyBvd24gdGFibGUsIHRoYXQgc3VjaCBhIG1lYWwgZGlkIG5vdCBjb21wb3J0IHdpdGggdHJlYWNoZXJ5LCBzbyBMeWN1cmd1cyB3YXMgdGhlIGZpcnN0IHRvIHNlZSBjbGVhcmx5IHRoYXQgc3VjaCBhIGhvdXNlIGRvZXMgbm90IGNvbXBvcnQgd2l0aCBsdXh1cnkgYW5kIGV4dHJhdmFnYW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm9yIGlzIGFueSBtYW4gc28gdnVsZ2FyIGFuZCBzZW5zZWxlc3MgYXMgdG8gaW50cm9kdWNlIGludG8gYSBzaW1wbGUgYW5kIGNvbW1vbiBob3VzZSBzaWx2ZXItZm9vdGVkIGNvdWNoZXMsIHB1cnBsZSBjb3ZlcmxldHMsIGdvbGQgZHJpbmtpbmctY3VwcywgYW5kIGFsbCB0aGUgZXh0cmF2YWdhbmNlIHdoaWNoIGdvZXMgYWxvbmcgd2l0aCB0aGVzZSwgYnV0IG9uZSBtdXN0IG9mIG5lY2Vzc2l0eSBhZGFwdCBhbmQgcHJvcG9ydGlvbiBoaXMgY291Y2ggdG8gaGlzIGhvdXNlLCBoaXMgY292ZXJsZXRzIHRvIGhpcyBjb3VjaCwgYW5kIHRvIHRoaXMgdGhlIHJlc3Qgb2YgaGlzIHN1cHBsaWVzIGFuZCBlcXVpcG1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBiZWNhdXNlIGhlIHdhcyB1c2VkIHRvIHRoaXMgc2ltcGxpY2l0eSB0aGF0IExlb3R5Y2hpZGVzIHRoZSBFbGRlciwgYXMgd2UgYXJlIHRvbGQsIHdoZW4gaGUgd2FzIGRpbmluZyBpbiBDb3JpbnRoLCBhbmQgc2F3IHRoZSByb29mIG9mIHRoZSBob3VzZSBhZG9ybmVkIHdpdGggY29zdGx5IHBhbmVsbGluZ3MsIGFza2VkIGhpcyBob3N0IGlmIHRyZWVzIGdyZXcgc3F1YXJlIGluIHRoYXQgY291bnRyeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uZSBvZiBoaXMgcmhldHJhcyBhY2NvcmRpbmdseSwgYXMgSSBoYXZlIHNhaWQsIHByb2hpYml0ZWQgdGhlIHVzZSBvZiB3cml0dGVuIGxhd3MuIEFub3RoZXIgd2FzIGRpcmVjdGVkIGFnYWluc3QgZXh0cmF2YWdhbmNlLCBvcmRhaW5pbmcgdGhhdCBldmVyeSBob3VzZSBzaG91bGQgaGF2ZSBpdHMgcm9vZiBmYXNoaW9uZWQgYnkgdGhlIGF4ZSwgYW5kIGl0cyBkb29ycyBieSB0aGUgc2F3IG9ubHksIGFuZCBieSBubyBvdGhlciB0b29sLiBGb3IsIGFzIGluIGxhdGVyIHRpbWVzIEVwYW1pbm9uZGFzIGlzIHJlcG9ydGVkIHRvIGhhdmUgc2FpZCBhdCBoaXMgb3duIHRhYmxlLCB0aGF0IHN1Y2ggYSBtZWFsIGRpZCBub3QgY29tcG9ydCB3aXRoIHRyZWFjaGVyeSwgc28gTHljdXJndXMgd2FzIHRoZSBmaXJzdCB0byBzZWUgY2xlYXJseSB0aGF0IHN1Y2ggYSBob3VzZSBkb2VzIG5vdCBjb21wb3J0IHdpdGggbHV4dXJ5IGFuZCBleHRyYXZhZ2FuY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vciBpcyBhbnkgbWFuIHNvIHZ1bGdhciBhbmQgc2Vuc2VsZXNzIGFzIHRvIGludHJvZHVjZSBpbnRvIGEgc2ltcGxlIGFuZCBjb21tb24gaG91c2Ugc2lsdmVyLWZvb3RlZCBjb3VjaGVzLCBwdXJwbGUgY292ZXJsZXRzLCBnb2xkIGRyaW5raW5nLWN1cHMsIGFuZCBhbGwgdGhlIGV4dHJhdmFnYW5jZSB3aGljaCBnb2VzIGFsb25nIHdpdGggdGhlc2UsIGJ1dCBvbmUgbXVzdCBvZiBuZWNlc3NpdHkgYWRhcHQgYW5kIHByb3BvcnRpb24gaGlzIGNvdWNoIHRvIGhpcyBob3VzZSwgaGlzIGNvdmVybGV0cyB0byBoaXMgY291Y2gsIGFuZCB0byB0aGlzIHRoZSByZXN0IG9mIGhpcyBzdXBwbGllcyBhbmQgZXF1aXBtZW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBiZWNhdXNlIGhlIHdhcyB1c2VkIHRvIHRoaXMgc2ltcGxpY2l0eSB0aGF0IExlb3R5Y2hpZGVzIHRoZSBFbGRlciwgYXMgd2UgYXJlIHRvbGQsIHdoZW4gaGUgd2FzIGRpbmluZyBpbiBDb3JpbnRoLCBhbmQgc2F3IHRoZSByb29mIG9mIHRoZSBob3VzZSBhZG9ybmVkIHdpdGggY29zdGx5IHBhbmVsbGluZ3MsIGFza2VkIGhpcyBob3N0IGlmIHRyZWVzIGdyZXcgc3F1YXJlIGluIHRoYXQgY291bnRyeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BIHRoaXJkIHJoZXRyYSBvZiBMeWN1cmd1cyBpcyBtZW50aW9uZWQsIHdoaWNoIGZvcmJpZHMgbWFraW5nIGZyZXF1ZW50IGV4cGVkaXRpb25zIGFnYWluc3QgdGhlIHNhbWUgZW5lbWllcywgaW4gb3JkZXIgbm90IHRvIGFjY3VzdG9tIHN1Y2ggZW5lbWllcyB0byBmcmVxdWVudCBkZWZlbmNlIG9mIHRoZW1zZWx2ZXMsIHdoaWNoIHdvdWxkIG1ha2UgdGhlbSB3YXJsaWtlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIHdhcyB0aGUgc3BlY2lhbCBncmlldmFuY2Ugd2hpY2ggdGhleSBoYWQgYWdhaW5zdCBLaW5nIEFnZXNpbGHDvHMgaW4gbGF0ZXIgdGltZXMsIG5hbWVseSwgdGhhdCBieSBoaXMgY29udGludWFsIGFuZCBmcmVxdWVudCBpbmN1cnNpb25zIGFuZCBleHBlZGl0aW9ucyBpbnRvIEJvZW90aWEgaGUgcmVuZGVyZWQgdGhlIFRoZWJhbnMgYSBtYXRjaCBmb3IgdGhlIExhY2VkYWVtb25pYW5zLiBBbmQgdGhlcmVmb3JlLCB3aGVuIEFudGFsY2lkYXMgc2F3IHRoZSBraW5nIHdvdW5kZWQsIGhlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBpcyBhIGZpbmUgdHVpdGlvbi1mZWUgd2hpY2ggdGhvdSBhcnQgZ2V0dGluZyBmcm9tIHRoZSBUaGViYW5zLCBmb3IgdGVhY2hpbmcgdGhlbSBob3cgdG8gZmlnaHQsIHdoZW4gdGhleSBkaWQgbm90IHdpc2ggdG8gZG8gaXQsIGFuZCBkaWQgbm90IGtub3cgaG93LjwvcT4gU3VjaCBvcmRpbmFuY2VzIGFzIHRoZXNlIHdlcmUgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cmhldHJhczwvcT4gYnkgTHljdXJndXMsIGltcGx5aW5nIHRoYXQgdGhleSBjYW1lIGZyb20gdGhlIGdvZCBhbmQgd2VyZSBvcmFjbGVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIHdhcyB0aGUgc3BlY2lhbCBncmlldmFuY2Ugd2hpY2ggdGhleSBoYWQgYWdhaW5zdCBLaW5nIEFnZXNpbGHDvHMgaW4gbGF0ZXIgdGltZXMsIG5hbWVseSwgdGhhdCBieSBoaXMgY29udGludWFsIGFuZCBmcmVxdWVudCBpbmN1cnNpb25zIGFuZCBleHBlZGl0aW9ucyBpbnRvIEJvZW90aWEgaGUgcmVuZGVyZWQgdGhlIFRoZWJhbnMgYSBtYXRjaCBmb3IgdGhlIExhY2VkYWVtb25pYW5zLiBBbmQgdGhlcmVmb3JlLCB3aGVuIEFudGFsY2lkYXMgc2F3IHRoZSBraW5nIHdvdW5kZWQsIGhlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGlzIGEgZmluZSB0dWl0aW9uLWZlZSB3aGljaCB0aG91IGFydCBnZXR0aW5nIGZyb20gdGhlIFRoZWJhbnMsIGZvciB0ZWFjaGluZyB0aGVtIGhvdyB0byBmaWdodCwgd2hlbiB0aGV5IGRpZCBub3Qgd2lzaCB0byBkbyBpdCwgYW5kIGRpZCBub3Qga25vdyBob3cuPC9xPiBTdWNoIG9yZGluYW5jZXMgYXMgdGhlc2Ugd2VyZSBjYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnJoZXRyYXM8L3E+IGJ5IEx5Y3VyZ3VzLCBpbXBseWluZyB0aGF0IHRoZXkgY2FtZSBmcm9tIHRoZSBnb2QgYW5kIHdlcmUgb3JhY2xlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG1hdHRlciBvZiBlZHVjYXRpb24sIHdoaWNoIGhlIHJlZ2FyZGVkIGFzIHRoZSBncmVhdGVzdCBhbmQgbm9ibGVzdCB0YXNrIG9mIHRoZSBsYXctZ2l2ZXIsIGhlIGJlZ2FuIGF0IHRoZSB2ZXJ5IHNvdXJjZSwgYnkgY2FyZWZ1bGx5IHJlZ3VsYXRpbmcgbWFycmlhZ2VzIGFuZCBiaXJ0aHMuIEZvciBpdCBpcyBub3QgdHJ1ZSB0aGF0LCBhcyBBcmlzdG90bGUgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIFBvbC4gMi4xMjYzYSIgdmFsaWQ9InllcyI+UG9sLiBpaS4gNiwgOC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGUgdHJpZWQgdG8gYnJpbmcgdGhlIHdvbWVuIHVuZGVyIHByb3BlciByZXN0cmFpbnQsIGJ1dCBkZXNpc3RlZCwgYmVjYXVzZSBoZSBjb3VsZCBub3Qgb3ZlcmNvbWUgdGhlIGdyZWF0IGxpY2VuY2UgYW5kIHBvd2VyIHdoaWNoIHRoZSB3b21lbiBlbmpveWVkIG9uIGFjY291bnQgb2YgdGhlIG1hbnkgZXhwZWRpdGlvbnMgaW4gd2hpY2ggdGhlaXIgaHVzYmFuZHMgd2VyZSBlbmdhZ2VkLiBEdXJpbmcgdGhlc2UgdGhlIG1lbiB3ZXJlIGluZGVlZCBvYmxpZ2VkIHRvIGxlYXZlIHRoZWlyIHdpdmVzIGluIHNvbGUgY29udHJvbCBhdCBob21lLCBhbmQgZm9yIHRoaXMgcmVhc29uIHBhaWQgdGhlbSBncmVhdGVyIGRlZmVyZW5jZSB0aGFuIHdhcyB0aGVpciBkdWUsIGFuZCBnYXZlIHRoZW0gdGhlIHRpdGxlIG9mIE1pc3RyZXNzLiBCdXQgZXZlbiB0byB0aGUgd29tZW4gTHljdXJndXMgcGFpZCBhbGwgcG9zc2libGUgYXR0ZW50aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBtYWRlIHRoZSBtYWlkZW5zIGV4ZXJjaXNlIHRoZWlyIGJvZGllcyBpbiBydW5uaW5nLCB3cmVzdGxpbmcsIGNhc3RpbmcgdGhlIGRpc2N1cywgYW5kIGh1cmxpbmcgdGhlIGphdmVsaW4sIGluIG9yZGVyIHRoYXQgdGhlIGZydWl0IG9mIHRoZWlyIHdvbWJzIG1pZ2h0IGhhdmUgdmlnb3JvdXMgcm9vdCBpbiB2aWdvcm91cyBib2RpZXMgYW5kIGNvbWUgdG8gYmV0dGVyIG1hdHVyaXR5LCBhbmQgdGhhdCB0aGV5IHRoZW1zZWx2ZXMgbWlnaHQgY29tZSB3aXRoIHZpZ291ciB0byB0aGUgZnVsbmVzcyBvZiB0aGVpciB0aW1lcywgYW5kIHN0cnVnZ2xlIHN1Y2Nlc3NmdWxseSBhbmQgZWFzaWx5IHdpdGggdGhlIHBhbmdzIG9mIGNoaWxkLWJpcnRoLiBIZSBmcmVlZCB0aGVtIGZyb20gc29mdG5lc3MgYW5kIGRlbGljYWN5IGFuZCBhbGwgZWZmZW1pbmFjeSBieSBhY2N1c3RvbWluZyB0aGUgbWFpZGVucyBubyBsZXNzIHRoYW4gdGhlIHlvdXRocyB0byB3ZWFyIHR1bmljcyBvbmx5IGluIHByb2Nlc3Npb25zLCBhbmQgYXQgY2VydGFpbiBmZXN0aXZhbHMgdG8gZGFuY2UgYW5kIHNpbmcgd2hlbiB0aGUgeW91bmcgbWVuIHdlcmUgcHJlc2VudCBhcyBzcGVjdGF0b3JzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB0aGV5IHNvbWV0aW1lcyBldmVuIG1vY2tlZCBhbmQgcmFpbGVkIGdvb2QtbmF0dXJlZGx5IGF0IGFueSB5b3V0aCB3aG8gaGFkIG1pc2JlaGF2ZWQgaGltc2VsZjsgYW5kIGFnYWluIHRoZXkgd291bGQgc2luZyB0aGUgcHJhaXNlcyBvZiB0aG9zZSB3aG8gaGFkIHNob3duIHRoZW1zZWx2ZXMgd29ydGh5LCBhbmQgc28gaW5zcGlyZSB0aGUgeW91bmcgbWVuIHdpdGggZ3JlYXQgYW1iaXRpb24gYW5kIGFyZG91ci4gRm9yIGhlIHdobyB3YXMgdGh1cyBleHRvbGxlZCBmb3IgaGlzIHZhbG91ciBhbmQgaGVsZCBpbiBob25vdXIgYW1vbmcgdGhlIG1haWRlbnMsIHdlbnQgYXdheSBleGFsdGVkIGJ5IHRoZWlyIHByYWlzZXM7IHdoaWxlIHRoZSBzdGluZyBvZiB0aGVpciBwbGF5ZnVsIHJhaWxsZXJ5IHdhcyBubyBsZXNzIHNoYXJwIHRoYW4gdGhhdCBvZiBzZXJpb3VzIGFkbW9uaXRpb25zLCBlc3BlY2lhbGx5IGFzIHRoZSBraW5ncyBhbmQgc2VuYXRvcnMsIHRvZ2V0aGVyIHdpdGggdGhlIHJlc3Qgb2YgdGhlIGNpdGl6ZW5zLCB3ZXJlIGFsbCBwcmVzZW50IGF0IHRoZSBzcGVjdGFjbGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG1hdHRlciBvZiBlZHVjYXRpb24sIHdoaWNoIGhlIHJlZ2FyZGVkIGFzIHRoZSBncmVhdGVzdCBhbmQgbm9ibGVzdCB0YXNrIG9mIHRoZSBsYXctZ2l2ZXIsIGhlIGJlZ2FuIGF0IHRoZSB2ZXJ5IHNvdXJjZSwgYnkgY2FyZWZ1bGx5IHJlZ3VsYXRpbmcgbWFycmlhZ2VzIGFuZCBiaXJ0aHMuIEZvciBpdCBpcyBub3QgdHJ1ZSB0aGF0LCBhcyBBcmlzdG90bGUgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBQb2wuIDIuMTI2M2EiIHZhbGlkPSJ5ZXMiPlBvbC4gaWkuIDYsIDguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhlIHRyaWVkIHRvIGJyaW5nIHRoZSB3b21lbiB1bmRlciBwcm9wZXIgcmVzdHJhaW50LCBidXQgZGVzaXN0ZWQsIGJlY2F1c2UgaGUgY291bGQgbm90IG92ZXJjb21lIHRoZSBncmVhdCBsaWNlbmNlIGFuZCBwb3dlciB3aGljaCB0aGUgd29tZW4gZW5qb3llZCBvbiBhY2NvdW50IG9mIHRoZSBtYW55IGV4cGVkaXRpb25zIGluIHdoaWNoIHRoZWlyIGh1c2JhbmRzIHdlcmUgZW5nYWdlZC4gRHVyaW5nIHRoZXNlIHRoZSBtZW4gd2VyZSBpbmRlZWQgb2JsaWdlZCB0byBsZWF2ZSB0aGVpciB3aXZlcyBpbiBzb2xlIGNvbnRyb2wgYXQgaG9tZSwgYW5kIGZvciB0aGlzIHJlYXNvbiBwYWlkIHRoZW0gZ3JlYXRlciBkZWZlcmVuY2UgdGhhbiB3YXMgdGhlaXIgZHVlLCBhbmQgZ2F2ZSB0aGVtIHRoZSB0aXRsZSBvZiBNaXN0cmVzcy4gQnV0IGV2ZW4gdG8gdGhlIHdvbWVuIEx5Y3VyZ3VzIHBhaWQgYWxsIHBvc3NpYmxlIGF0dGVudGlvbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBQb2wuIDIuMTI2M2EiIHZhbGlkPSJ5ZXMiPlBvbC4gaWkuIDYsIDguPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIG1hZGUgdGhlIG1haWRlbnMgZXhlcmNpc2UgdGhlaXIgYm9kaWVzIGluIHJ1bm5pbmcsIHdyZXN0bGluZywgY2FzdGluZyB0aGUgZGlzY3VzLCBhbmQgaHVybGluZyB0aGUgamF2ZWxpbiwgaW4gb3JkZXIgdGhhdCB0aGUgZnJ1aXQgb2YgdGhlaXIgd29tYnMgbWlnaHQgaGF2ZSB2aWdvcm91cyByb290IGluIHZpZ29yb3VzIGJvZGllcyBhbmQgY29tZSB0byBiZXR0ZXIgbWF0dXJpdHksIGFuZCB0aGF0IHRoZXkgdGhlbXNlbHZlcyBtaWdodCBjb21lIHdpdGggdmlnb3VyIHRvIHRoZSBmdWxuZXNzIG9mIHRoZWlyIHRpbWVzLCBhbmQgc3RydWdnbGUgc3VjY2Vzc2Z1bGx5IGFuZCBlYXNpbHkgd2l0aCB0aGUgcGFuZ3Mgb2YgY2hpbGQtYmlydGguIEhlIGZyZWVkIHRoZW0gZnJvbSBzb2Z0bmVzcyBhbmQgZGVsaWNhY3kgYW5kIGFsbCBlZmZlbWluYWN5IGJ5IGFjY3VzdG9taW5nIHRoZSBtYWlkZW5zIG5vIGxlc3MgdGhhbiB0aGUgeW91dGhzIHRvIHdlYXIgdHVuaWNzIG9ubHkgaW4gcHJvY2Vzc2lvbnMsIGFuZCBhdCBjZXJ0YWluIGZlc3RpdmFscyB0byBkYW5jZSBhbmQgc2luZyB3aGVuIHRoZSB5b3VuZyBtZW4gd2VyZSBwcmVzZW50IGFzIHNwZWN0YXRvcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHRoZXkgc29tZXRpbWVzIGV2ZW4gbW9ja2VkIGFuZCByYWlsZWQgZ29vZC1uYXR1cmVkbHkgYXQgYW55IHlvdXRoIHdobyBoYWQgbWlzYmVoYXZlZCBoaW1zZWxmOyBhbmQgYWdhaW4gdGhleSB3b3VsZCBzaW5nIHRoZSBwcmFpc2VzIG9mIHRob3NlIHdobyBoYWQgc2hvd24gdGhlbXNlbHZlcyB3b3J0aHksIGFuZCBzbyBpbnNwaXJlIHRoZSB5b3VuZyBtZW4gd2l0aCBncmVhdCBhbWJpdGlvbiBhbmQgYXJkb3VyLiBGb3IgaGUgd2hvIHdhcyB0aHVzIGV4dG9sbGVkIGZvciBoaXMgdmFsb3VyIGFuZCBoZWxkIGluIGhvbm91ciBhbW9uZyB0aGUgbWFpZGVucywgd2VudCBhd2F5IGV4YWx0ZWQgYnkgdGhlaXIgcHJhaXNlczsgd2hpbGUgdGhlIHN0aW5nIG9mIHRoZWlyIHBsYXlmdWwgcmFpbGxlcnkgd2FzIG5vIGxlc3Mgc2hhcnAgdGhhbiB0aGF0IG9mIHNlcmlvdXMgYWRtb25pdGlvbnMsIGVzcGVjaWFsbHkgYXMgdGhlIGtpbmdzIGFuZCBzZW5hdG9ycywgdG9nZXRoZXIgd2l0aCB0aGUgcmVzdCBvZiB0aGUgY2l0aXplbnMsIHdlcmUgYWxsIHByZXNlbnQgYXQgdGhlIHNwZWN0YWNsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm9yIHdhcyB0aGVyZSBhbnl0aGluZyBkaXNncmFjZWZ1bCBpbiB0aGlzIHNjYW50IGNsb3RoaW5nIG9mIHRoZSBtYWlkZW5zLCBmb3IgbW9kZXN0eSBhdHRlbmRlZCB0aGVtLCBhbmQgd2FudG9ubmVzcyB3YXMgYmFuaXNoZWQ7IG5heSwgcmF0aGVyLCBpdCBwcm9kdWNlZCBpbiB0aGVtIGhhYml0cyBvZiBzaW1wbGljaXR5IGFuZCBhbiBhcmRlbnQgZGVzaXJlIGZvciBoZWFsdGggYW5kIGJlYXV0eSBvZiBib2R5LiBJdCBnYXZlIGFsc28gdG8gd29tYW4ta2luZCBhIHRhc3RlIG9mIGxvZnR5IHNlbnRpbWVudCwgZm9yIHRoZXkgZmVsdCB0aGF0IHRoZXkgdG9vIGhhZCBhIHBsYWNlIGluIHRoZSBhcmVuYSBvZiBicmF2ZXJ5IGFuZCBhbWJpdGlvbi4gV2hlcmVmb3JlIHRoZXkgd2VyZSBsZWQgdG8gdGhpbmsgYW5kIHNwZWFrIGFzIEdvcmdvLCB0aGUgd2lmZSBvZiBMZW9uaWRhcywgaXMgc2FpZCB0byBoYXZlIGRvbmUuIFdoZW4gc29tZSBmb3JlaWduIHdvbWFuLCBhcyBpdCB3b3VsZCBzZWVtLCBzYWlkIHRvIGhlcjogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3UgU3BhcnRhbiB3b21lbiBhcmUgdGhlIG9ubHkgb25lcyB3aG8gcnVsZSB0aGVpciBtZW4sPC9xPiIgc2hlIGFuc3dlcmVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcywgd2UgYXJlIHRoZSBvbmx5IG9uZXMgdGhhdCBnaXZlIGJpcnRoIHRvIG1lbi48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vciB3YXMgdGhlcmUgYW55dGhpbmcgZGlzZ3JhY2VmdWwgaW4gdGhpcyBzY2FudCBjbG90aGluZyBvZiB0aGUgbWFpZGVucywgZm9yIG1vZGVzdHkgYXR0ZW5kZWQgdGhlbSwgYW5kIHdhbnRvbm5lc3Mgd2FzIGJhbmlzaGVkOyBuYXksIHJhdGhlciwgaXQgcHJvZHVjZWQgaW4gdGhlbSBoYWJpdHMgb2Ygc2ltcGxpY2l0eSBhbmQgYW4gYXJkZW50IGRlc2lyZSBmb3IgaGVhbHRoIGFuZCBiZWF1dHkgb2YgYm9keS4gSXQgZ2F2ZSBhbHNvIHRvIHdvbWFuLWtpbmQgYSB0YXN0ZSBvZiBsb2Z0eSBzZW50aW1lbnQsIGZvciB0aGV5IGZlbHQgdGhhdCB0aGV5IHRvbyBoYWQgYSBwbGFjZSBpbiB0aGUgYXJlbmEgb2YgYnJhdmVyeSBhbmQgYW1iaXRpb24uIFdoZXJlZm9yZSB0aGV5IHdlcmUgbGVkIHRvIHRoaW5rIGFuZCBzcGVhayBhcyBHb3JnbywgdGhlIHdpZmUgb2YgTGVvbmlkYXMsIGlzIHNhaWQgdG8gaGF2ZSBkb25lLiBXaGVuIHNvbWUgZm9yZWlnbiB3b21hbiwgYXMgaXQgd291bGQgc2VlbSwgc2FpZCB0byBoZXI6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3UgU3BhcnRhbiB3b21lbiBhcmUgdGhlIG9ubHkgb25lcyB3aG8gcnVsZSB0aGVpciBtZW4sPC9xPiIgc2hlIGFuc3dlcmVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzLCB3ZSBhcmUgdGhlIG9ubHkgb25lcyB0aGF0IGdpdmUgYmlydGggdG8gbWVuLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoZXJlIHdlcmUgaW5jZW50aXZlcyB0byBtYXJyaWFnZSBpbiB0aGVzZSB0aGluZ3Ms4oCUSSBtZWFuIHN1Y2ggdGhpbmdzIGFzIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBtYWlkZW5zIHdpdGhvdXQgbXVjaCBjbG90aGluZyBpbiBwcm9jZXNzaW9ucyBhbmQgYXRobGV0aWMgY29udGVzdHMgd2hlcmUgeW91bmcgbWVuIHdlcmUgbG9va2luZyBvbiwgZm9yIHRoZXNlIHdlcmUgZHJhd24gb24gYnkgbmVjZXNzaXR5LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm5vdCBnZW9tZXRyaWNhbCwgYnV0IHRoZSBzb3J0IG9mIG5lY2Vzc2l0eSB3aGljaCBsb3ZlcnMga25vdyw8L3E+IGFzIFBsYXRvIHNheXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBSZXAuIDQ1OGQiIHZhbGlkPSJ5ZXMiPlJlcHVibGljLCBwLiA0NTggZC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gTm9yIHdhcyB0aGlzIGFsbDsgTHljdXJndXMgYWxzbyBwdXQgYSBraW5kIG9mIHB1YmxpYyBzdGlnbWEgdXBvbiBjb25maXJtZWQgYmFjaGVsb3JzLiBUaGV5IHdlcmUgZXhjbHVkZWQgZnJvbSB0aGUgc2lnaHQgb2YgdGhlIHlvdW5nIG1lbiBhbmQgbWFpZGVucyBhdCB0aGVpciBleGVyY2lzZXMsIGFuZCBpbiB3aW50ZXIgdGhlIG1hZ2lzdHJhdGVzIG9yZGVyZWQgdGhlbSB0byBtYXJjaCByb3VuZCB0aGUgbWFya2V0LXBsYWNlIGluIHRoZWlyIHR1bmljcyBvbmx5LCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYXMgdGhleSBtYXJjaGVkLCB0aGV5IHNhbmcgYSBjZXJ0YWluIHNvbmcgYWJvdXQgdGhlbXNlbHZlcywgYW5kIGl0cyBidXJkZW4gd2FzIHRoYXQgdGhleSB3ZXJlIGp1c3RseSBwdW5pc2hlZCBmb3IgZGlzb2JleWluZyB0aGUgbGF3cy4gQmVzaWRlcyB0aGlzLCB0aGV5IHdlcmUgZGVwcml2ZWQgb2YgdGhlIGhvbm91ciBhbmQgZ3JhY2lvdXMgYXR0ZW50aW9ucyB3aGljaCB0aGUgeW91bmcgbWVuIGhhYml0dWFsbHkgcGFpZCB0byB0aGVpciBlbGRlcnMuIFRoZXJlZm9yZSB0aGVyZSB3YXMgbm8gb25lIHRvIGZpbmQgZmF1bHQgd2l0aCB3aGF0IHdhcyBzYWlkIHRvIERlcmN5bGxpZGFzLCByZXB1dGFibGUgZ2VuZXJhbCB0aG91Z2ggaGUgd2FzLiBBcyBoZSBlbnRlcmVkIGEgY29tcGFueSwgbmFtZWx5LCBvbmUgb2YgdGhlIHlvdW5nZXIgbWVuIHdvdWxkIG5vdCBvZmZlciBoaW0gaGlzIHNlYXQsIGJ1dCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluZGVlZCwgdGhvdSBoYXN0IGJlZ290dGVuIG5vIHNvbiB3aG8gd2lsbCBvbmUgZGF5IGdpdmUgaGlzIHNlYXQgdG8gbWUuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoZXJlIHdlcmUgaW5jZW50aXZlcyB0byBtYXJyaWFnZSBpbiB0aGVzZSB0aGluZ3Ms4oCUSSBtZWFuIHN1Y2ggdGhpbmdzIGFzIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBtYWlkZW5zIHdpdGhvdXQgbXVjaCBjbG90aGluZyBpbiBwcm9jZXNzaW9ucyBhbmQgYXRobGV0aWMgY29udGVzdHMgd2hlcmUgeW91bmcgbWVuIHdlcmUgbG9va2luZyBvbiwgZm9yIHRoZXNlIHdlcmUgZHJhd24gb24gYnkgbmVjZXNzaXR5LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bm90IGdlb21ldHJpY2FsLCBidXQgdGhlIHNvcnQgb2YgbmVjZXNzaXR5IHdoaWNoIGxvdmVycyBrbm93LDwvcT4gYXMgUGxhdG8gc2F5cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBSZXAuIDQ1OGQiIHZhbGlkPSJ5ZXMiPlJlcHVibGljLCBwLiA0NTggZC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gTm9yIHdhcyB0aGlzIGFsbDsgTHljdXJndXMgYWxzbyBwdXQgYSBraW5kIG9mIHB1YmxpYyBzdGlnbWEgdXBvbiBjb25maXJtZWQgYmFjaGVsb3JzLiBUaGV5IHdlcmUgZXhjbHVkZWQgZnJvbSB0aGUgc2lnaHQgb2YgdGhlIHlvdW5nIG1lbiBhbmQgbWFpZGVucyBhdCB0aGVpciBleGVyY2lzZXMsIGFuZCBpbiB3aW50ZXIgdGhlIG1hZ2lzdHJhdGVzIG9yZGVyZWQgdGhlbSB0byBtYXJjaCByb3VuZCB0aGUgbWFya2V0LXBsYWNlIGluIHRoZWlyIHR1bmljcyBvbmx5LCAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIFJlcC4gNDU4ZCIgdmFsaWQ9InllcyI+UmVwdWJsaWMsIHAuIDQ1OCBkLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhcyB0aGV5IG1hcmNoZWQsIHRoZXkgc2FuZyBhIGNlcnRhaW4gc29uZyBhYm91dCB0aGVtc2VsdmVzLCBhbmQgaXRzIGJ1cmRlbiB3YXMgdGhhdCB0aGV5IHdlcmUganVzdGx5IHB1bmlzaGVkIGZvciBkaXNvYmV5aW5nIHRoZSBsYXdzLiBCZXNpZGVzIHRoaXMsIHRoZXkgd2VyZSBkZXByaXZlZCBvZiB0aGUgaG9ub3VyIGFuZCBncmFjaW91cyBhdHRlbnRpb25zIHdoaWNoIHRoZSB5b3VuZyBtZW4gaGFiaXR1YWxseSBwYWlkIHRvIHRoZWlyIGVsZGVycy4gVGhlcmVmb3JlIHRoZXJlIHdhcyBubyBvbmUgdG8gZmluZCBmYXVsdCB3aXRoIHdoYXQgd2FzIHNhaWQgdG8gRGVyY3lsbGlkYXMsIHJlcHV0YWJsZSBnZW5lcmFsIHRob3VnaCBoZSB3YXMuIEFzIGhlIGVudGVyZWQgYSBjb21wYW55LCBuYW1lbHksIG9uZSBvZiB0aGUgeW91bmdlciBtZW4gd291bGQgbm90IG9mZmVyIGhpbSBoaXMgc2VhdCwgYnV0IHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbmRlZWQsIHRob3UgaGFzdCBiZWdvdHRlbiBubyBzb24gd2hvIHdpbGwgb25lIGRheSBnaXZlIGhpcyBzZWF0IHRvIG1lLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZWlyIG1hcnJpYWdlcyB0aGUgd29tZW4gd2VyZSBjYXJyaWVkIG9mZiBieSBmb3JjZSwgbm90IHdoZW4gdGhleSB3ZXJlIHNtYWxsIGFuZCB1bmZpdCBmb3Igd2VkbG9jaywgYnV0IHdoZW4gdGhleSB3ZXJlIGluIGZ1bGwgYmxvb20gYW5kIHdob2xseSByaXBlLiBBZnRlciB0aGUgd29tYW4gd2FzIHRodXMgY2FycmllZCBvZmYgdGhlIGJyaWRlJ3MtbWFpZCwgc28gY2FsbGVkLCB0b29rIGhlciBpbiBjaGFyZ2UsIGN1dCBoZXIgaGFpciBvZmYgY2xvc2UgdG8gdGhlIGhlYWQsIHB1dCBhIG1hbidzIGNsb2FrIGFuZCBzYW5kYWxzIG9uIGhlciwgYW5kIGxhaWQgaGVyIGRvd24gb24gYSBwYWxsZXQsIG9uIHRoZSBmbG9vciwgYWxvbmUsIGluIHRoZSBkYXJrLiBUaGVuIHRoZSBicmlkZS1ncm9vbSwgbm90IGZsb3duIHdpdGggd2luZSBub3IgZW5mZWVibGVkIGJ5IGV4Y2Vzc2VzLCBidXQgY29tcG9zZWQgYW5kIHNvYmVyLCBhZnRlciBzdXBwaW5nIGF0IGhpcyBwdWJsaWMgbWVzcy10YWJsZSBhcyB1c3VhbCwgc2xpcHBlZCBzdGVhbHRoaWx5IGludG8gdGhlIHJvb20gd2hlcmUgdGhlIGJyaWRlIGxheSwgbG9vc2VkIGhlciB2aXJnaW4ncyB6b25lLCBhbmQgYm9yZSBoZXIgaW4gaGlzIGFybXMgdG8gdGhlIG1hcnJpYWdlLWJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYWZ0ZXIgc3BlbmRpbmcgYSBzaG9ydCB0aW1lIHdpdGggaGlzIGJyaWRlLCBoZSB3ZW50IGF3YXkgY29tcG9zZWRseSB0byBoaXMgdXN1YWwgcXVhcnRlcnMsIHRoZXJlIHRvIHNsZWVwIHdpdGggdGhlIG90aGVyIHlvdW5nIG1lbi4gQW5kIHNvIGhlIGNvbnRpbnVlZCB0byBkbyBmcm9tIHRoYXQgdGltZSBvbiwgc3BlbmRpbmcgaGlzIGRheXMgd2l0aCBoaXMgY29tcmFkZXMsIGFuZCBzbGVlcGluZyB3aXRoIHRoZW0gYXQgbmlnaHQsIGJ1dCB2aXNpdGluZyBoaXMgYnJpZGUgYnkgc3RlYWx0aCBhbmQgd2l0aCBldmVyeSBwcmVjYXV0aW9uLCBmdWxsIG9mIGRyZWFkIGFuZCBmZWFyIGxlc3QgYW55IG9mIGhlciBob3VzZWhvbGQgc2hvdWxkIGJlIGF3YXJlIG9mIGhpcyB2aXNpdHMsIGhpcyBicmlkZSBhbHNvIGNvbnRyaXZpbmcgYW5kIGNvbnNwaXJpbmcgd2l0aCBoaW0gdGhhdCB0aGV5IG1pZ2h0IGhhdmUgc3RvbGVuIGludGVydmlld3MgYXMgb2NjYXNpb24gb2ZmZXJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoaXMgdGhleSBkaWQgbm90IGZvciBhIHNob3J0IHRpbWUgb25seSwgYnV0IGxvbmcgZW5vdWdoIGZvciBzb21lIG9mIHRoZW0gdG8gYmVjb21lIGZhdGhlcnMgYmVmb3JlIHRoZXkgaGFkIGxvb2tlZCB1cG9uIHRoZWlyIG93biB3aXZlcyBieSBkYXlsaWdodC4gU3VjaCBpbnRlcnZpZXdzIG5vdCBvbmx5IGJyb3VnaHQgaW50byBleGVyY2lzZSBzZWxmLXJlc3RyYWludCBhbmQgbW9kZXJhdGlvbiwgYnV0IHVuaXRlZCBodXNiYW5kcyBhbmQgd2l2ZXMgd2hlbiB0aGVpciBib2RpZXMgd2VyZSBmdWxsIG9mIGNyZWF0aXZlIGVuZXJneSBhbmQgdGhlaXIgYWZmZWN0aW9ucyBuZXcgYW5kIGZyZXNoLCBub3Qgd2hlbiB0aGV5IHdlcmUgc2F0ZWQgYW5kIGR1bGxlZCBieSB1bnJlc3RyaWN0ZWQgaW50ZXJjb3Vyc2U7IGFuZCB0aGVyZSB3YXMgYWx3YXlzIGxlZnQgYmVoaW5kIGluIHRoZWlyIGhlYXJ0cyBzb21lIHJlc2lkdWFsIHNwYXJrIG9mIG11dHVhbCBsb25naW5nIGFuZCBkZWxpZ2h0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVpciBtYXJyaWFnZXMgdGhlIHdvbWVuIHdlcmUgY2FycmllZCBvZmYgYnkgZm9yY2UsIG5vdCB3aGVuIHRoZXkgd2VyZSBzbWFsbCBhbmQgdW5maXQgZm9yIHdlZGxvY2ssIGJ1dCB3aGVuIHRoZXkgd2VyZSBpbiBmdWxsIGJsb29tIGFuZCB3aG9sbHkgcmlwZS4gQWZ0ZXIgdGhlIHdvbWFuIHdhcyB0aHVzIGNhcnJpZWQgb2ZmIHRoZSBicmlkZSdzLW1haWQsIHNvIGNhbGxlZCwgdG9vayBoZXIgaW4gY2hhcmdlLCBjdXQgaGVyIGhhaXIgb2ZmIGNsb3NlIHRvIHRoZSBoZWFkLCBwdXQgYSBtYW4ncyBjbG9hayBhbmQgc2FuZGFscyBvbiBoZXIsIGFuZCBsYWlkIGhlciBkb3duIG9uIGEgcGFsbGV0LCBvbiB0aGUgZmxvb3IsIGFsb25lLCBpbiB0aGUgZGFyay4gVGhlbiB0aGUgYnJpZGUtZ3Jvb20sIG5vdCBmbG93biB3aXRoIHdpbmUgbm9yIGVuZmVlYmxlZCBieSBleGNlc3NlcywgYnV0IGNvbXBvc2VkIGFuZCBzb2JlciwgYWZ0ZXIgc3VwcGluZyBhdCBoaXMgcHVibGljIG1lc3MtdGFibGUgYXMgdXN1YWwsIHNsaXBwZWQgc3RlYWx0aGlseSBpbnRvIHRoZSByb29tIHdoZXJlIHRoZSBicmlkZSBsYXksIGxvb3NlZCBoZXIgdmlyZ2luJ3Mgem9uZSwgYW5kIGJvcmUgaGVyIGluIGhpcyBhcm1zIHRvIHRoZSBtYXJyaWFnZS1iZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIHNwZW5kaW5nIGEgc2hvcnQgdGltZSB3aXRoIGhpcyBicmlkZSwgaGUgd2VudCBhd2F5IGNvbXBvc2VkbHkgdG8gaGlzIHVzdWFsIHF1YXJ0ZXJzLCB0aGVyZSB0byBzbGVlcCB3aXRoIHRoZSBvdGhlciB5b3VuZyBtZW4uIEFuZCBzbyBoZSBjb250aW51ZWQgdG8gZG8gZnJvbSB0aGF0IHRpbWUgb24sIHNwZW5kaW5nIGhpcyBkYXlzIHdpdGggaGlzIGNvbXJhZGVzLCBhbmQgc2xlZXBpbmcgd2l0aCB0aGVtIGF0IG5pZ2h0LCBidXQgdmlzaXRpbmcgaGlzIGJyaWRlIGJ5IHN0ZWFsdGggYW5kIHdpdGggZXZlcnkgcHJlY2F1dGlvbiwgZnVsbCBvZiBkcmVhZCBhbmQgZmVhciBsZXN0IGFueSBvZiBoZXIgaG91c2Vob2xkIHNob3VsZCBiZSBhd2FyZSBvZiBoaXMgdmlzaXRzLCBoaXMgYnJpZGUgYWxzbyBjb250cml2aW5nIGFuZCBjb25zcGlyaW5nIHdpdGggaGltIHRoYXQgdGhleSBtaWdodCBoYXZlIHN0b2xlbiBpbnRlcnZpZXdzIGFzIG9jY2FzaW9uIG9mZmVyZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIHRoZXkgZGlkIG5vdCBmb3IgYSBzaG9ydCB0aW1lIG9ubHksIGJ1dCBsb25nIGVub3VnaCBmb3Igc29tZSBvZiB0aGVtIHRvIGJlY29tZSBmYXRoZXJzIGJlZm9yZSB0aGV5IGhhZCBsb29rZWQgdXBvbiB0aGVpciBvd24gd2l2ZXMgYnkgZGF5bGlnaHQuIFN1Y2ggaW50ZXJ2aWV3cyBub3Qgb25seSBicm91Z2h0IGludG8gZXhlcmNpc2Ugc2VsZi1yZXN0cmFpbnQgYW5kIG1vZGVyYXRpb24sIGJ1dCB1bml0ZWQgaHVzYmFuZHMgYW5kIHdpdmVzIHdoZW4gdGhlaXIgYm9kaWVzIHdlcmUgZnVsbCBvZiBjcmVhdGl2ZSBlbmVyZ3kgYW5kIHRoZWlyIGFmZmVjdGlvbnMgbmV3IGFuZCBmcmVzaCwgbm90IHdoZW4gdGhleSB3ZXJlIHNhdGVkIGFuZCBkdWxsZWQgYnkgdW5yZXN0cmljdGVkIGludGVyY291cnNlOyBhbmQgdGhlcmUgd2FzIGFsd2F5cyBsZWZ0IGJlaGluZCBpbiB0aGVpciBoZWFydHMgc29tZSByZXNpZHVhbCBzcGFyayBvZiBtdXR1YWwgbG9uZ2luZyBhbmQgZGVsaWdodC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgZ2l2aW5nIG1hcnJpYWdlIHN1Y2ggdHJhaXRzIG9mIHJlc2VydmUgYW5kIGRlY29ydW0sIGhlIG5vbmUgdGhlIGxlc3MgZnJlZWQgbWVuIGZyb20gdGhlIGVtcHR5IGFuZCB3b21hbmlzaCBwYXNzaW9uIG9mIGplYWxvdXMgcG9zc2Vzc2lvbiwgYnkgbWFraW5nIGl0IGhvbm91cmFibGUgZm9yIHRoZW0sIHdoaWxlIGtlZXBpbmcgdGhlIG1hcnJpYWdlIHJlbGF0aW9uIGZyZWUgZnJvbSBhbGwgd2FudG9uIGlycmVndWxhcml0aWVzLCB0byBzaGFyZSB3aXRoIG90aGVyIHdvcnRoeSBtZW4gaW4gdGhlIGJlZ2V0dGluZyBvZiBjaGlsZHJlbiwgbGF1Z2hpbmcgdG8gc2Nvcm4gdGhvc2Ugd2hvIHJlZ2FyZCBzdWNoIGNvbW1vbiBwcml2aWxlZ2VzIGFzIGludG9sZXJhYmxlLCBhbmQgcmVzb3J0IHRvIG11cmRlciBhbmQgd2FyIHJhdGhlciB0aGFuIGdyYW50IHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBleGFtcGxlLCBhbiBlbGRlcmx5IG1hbiB3aXRoIGEgeW91bmcgd2lmZSwgaWYgaGUgbG9va2VkIHdpdGggZmF2b3VyIGFuZCBlc3RlZW0gb24gc29tZSBmYWlyIGFuZCBub2JsZSB5b3VuZyBtYW4sIG1pZ2h0IGludHJvZHVjZSBoaW0gdG8gaGVyLCBhbmQgYWRvcHQgaGVyIG9mZnNwcmluZyBieSBzdWNoIGEgbm9ibGUgZmF0aGVyIGFzIGhpcyBvd24uICBBbmQgYWdhaW4sIGEgd29ydGh5IG1hbiB3aG8gYWRtaXJlZCBzb21lIHdvbWFuIGZvciB0aGUgZmluZSBjaGlsZHJlbiB0aGF0IHNoZSBib3JlIGhlciBodXNiYW5kIGFuZCB0aGUgbW9kZXN0eSBvZiBoZXIgYmVoYXZpb3VyIGFzIGEgd2lmZSwgbWlnaHQgZW5qb3kgaGVyIGZhdm91cnMsIGlmIGhlciBodXNiYW5kIHdvdWxkIGNvbnNlbnQsIHRodXMgcGxhbnRpbmcsIGFzIGl0IHdlcmUsIGluIGEgc29pbCBvZiBiZWF1dGlmdWwgZnJ1aXRhZ2UsIGFuZCBiZWdldHRpbmcgZm9yIGhpbXNlbGYgbm9ibGUgc29ucywgd2hvIHdvdWxkIGhhdmUgdGhlIGJsb29kIG9mIG5vYmxlIG1lbiBpbiB0aGVpciB2ZWlucy4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluIHRoZSBmaXJzdCBwbGFjZSwgTHljdXJndXMgZGlkIG5vdCByZWdhcmQgc29ucyBhcyB0aGUgcGVjdWxpYXIgcHJvcGVydHkgb2YgdGhlaXIgZmF0aGVycywgYnV0IHJhdGhlciBhcyB0aGUgY29tbW9uIHByb3BlcnR5IG9mIHRoZSBzdGF0ZSwgYW5kIHRoZXJlZm9yZSB3b3VsZCBub3QgaGF2ZSBoaXMgY2l0aXplbnMgc3ByaW5nIGZyb20gcmFuZG9tIHBhcmVudGFnZSwgYnV0IGZyb20gdGhlIGJlc3QgdGhlcmUgd2FzLiBJbiB0aGUgc2Vjb25kIHBsYWNlLCBoZSBzYXcgbXVjaCBmb2xseSBhbmQgdmFuaXR5IGluIHdoYXQgb3RoZXIgcGVvcGxlcyBlbmFjdGVkIGZvciB0aGUgcmVndWxhdGlvbiBvZiB0aGVzZSBtYXR0ZXJzOyBpbiB0aGUgYnJlZWRpbmcgb2YgZG9ncyBhbmQgaG9yc2VzIHRoZXkgaW5zaXN0IG9uIGhhdmluZyB0aGUgYmVzdCBzaXJlcyB3aGljaCBtb25leSBvciBmYXZvdXIgY2FuIHNlY3VyZSwgYnV0IHRoZXkga2VlcCB0aGVpciB3aXZlcyB1bmRlciBsb2NrIGFuZCBrZXksIGRlbWFuZGluZyB0aGF0IHRoZXkgaGF2ZSBjaGlsZHJlbiBieSBub25lIGJ1dCB0aGVtc2VsdmVzLCBldmVuIHRob3VnaCB0aGV5IGJlIGZvb2xpc2gsIG9yIGluZmlybSwgb3IgZGlzZWFzZWQ7IAoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPmFzIHRob3VnaCBjaGlsZHJlbiBvZiBiYWQgc3RvY2sgZGlkIG5vdCBzaG93IHRoZWlyIGJhZG5lc3MgdG8gdGhvc2UgZmlyc3Qgd2hvIHBvc3Nlc3NlZCBhbmQgcmVhcmVkIHRoZW0sIGFuZCBjaGlsZHJlbiBvZiBnb29kIHN0b2NrLCBjb250cmFyaXdpc2UsIHRoZWlyIGdvb2RuZXNzLiBUaGUgZnJlZWRvbSB3aGljaCB0aHVzIHByZXZhaWxlZCBhdCB0aGF0IHRpbWUgaW4gbWFycmlhZ2UgcmVsYXRpb25zIHdhcyBhaW1lZCBhdCBwaHlzaWNhbCBhbmQgcG9saXRpY2FsIHdlbGwtYmVpbmcsIGFuZCB3YXMgZmFyIHJlbW92ZWQgZnJvbSB0aGUgbGljZW50aW91c25lc3Mgd2hpY2ggd2FzIGFmdGVyd2FyZHMgYXR0cmlidXRlZCB0byB0aGVpciB3b21lbiwgc28gbXVjaCBzbyB0aGF0IGFkdWx0ZXJ5IHdhcyB3aG9sbHkgdW5rbm93biBhbW9uZyB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGEgc2F5aW5nIGlzIHJlcG9ydGVkIG9mIG9uZSBHZXJhZGFzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBuYW1lIGlzIEdlcmFkYXRhcyBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAyMjhjIj5Nb3JhbHMsIHAuIDIyOCBjPC9iaWJsPiAoQXBvcGh0aGVnLiBMYWNvbiwgMjApLjwvbm90ZT4gYSBTcGFydGFuIG9mIHZlcnkgYW5jaWVudCB0eXBlLCB3aG8sIG9uIGJlaW5nIGFza2VkIGJ5IGEgc3RyYW5nZXIgd2hhdCB0aGUgcHVuaXNobWVudCBmb3IgYWR1bHRlcmVycyB3YXMgYW1vbmcgdGhlbSwgYW5zd2VyZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3RyYW5nZXIsIHRoZXJlIGlzIG5vIGFkdWx0ZXJlciBhbW9uZyB1cy48L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TdXBwb3NlLCB0aGVuLDwvcT4gcmVwbGllZCB0aGUgc3RyYW5nZXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlcmUgc2hvdWxkIGJlIG9uZS48L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BIGJ1bGwsPC9xPiBzYWlkIEdlcmFkYXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d291bGQgYmUgaGlzIGZvcmZlaXQsIGEgYnVsbCBzbyBsYXJnZSB0aGF0IGl0IGNvdWxkIHN0cmV0Y2ggb3ZlciBNb3VudCBUYcO/Z2V0dXMgYW5kIGRyaW5rIGZyb20gdGhlIHJpdmVyIEV1cm90YXMuPC9xPiBUaGVuIHRoZSBzdHJhbmdlciB3YXMgYXN0b25pc2hlZCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgaG93IGNvdWxkIHRoZXJlIGJlIGEgYnVsbCBzbyBsYXJnZT88L3E+IFRvIHdoaWNoIEdlcmFkYXMgcmVwbGllZCwgd2l0aCBhIHNtaWxlOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBob3cgY291bGQgdGhlcmUgYmUgYW4gYWR1bHRlcmVyIGluIFNwYXJ0YT88L3E+IFN1Y2gsIHRoZW4sIGFyZSB0aGUgYWNjb3VudHMgd2UgZmluZCBvZiB0aGVpciBtYXJyaWFnZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGdpdmluZyBtYXJyaWFnZSBzdWNoIHRyYWl0cyBvZiByZXNlcnZlIGFuZCBkZWNvcnVtLCBoZSBub25lIHRoZSBsZXNzIGZyZWVkIG1lbiBmcm9tIHRoZSBlbXB0eSBhbmQgd29tYW5pc2ggcGFzc2lvbiBvZiBqZWFsb3VzIHBvc3Nlc3Npb24sIGJ5IG1ha2luZyBpdCBob25vdXJhYmxlIGZvciB0aGVtLCB3aGlsZSBrZWVwaW5nIHRoZSBtYXJyaWFnZSByZWxhdGlvbiBmcmVlIGZyb20gYWxsIHdhbnRvbiBpcnJlZ3VsYXJpdGllcywgdG8gc2hhcmUgd2l0aCBvdGhlciB3b3J0aHkgbWVuIGluIHRoZSBiZWdldHRpbmcgb2YgY2hpbGRyZW4sIGxhdWdoaW5nIHRvIHNjb3JuIHRob3NlIHdobyByZWdhcmQgc3VjaCBjb21tb24gcHJpdmlsZWdlcyBhcyBpbnRvbGVyYWJsZSwgYW5kIHJlc29ydCB0byBtdXJkZXIgYW5kIHdhciByYXRoZXIgdGhhbiBncmFudCB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBleGFtcGxlLCBhbiBlbGRlcmx5IG1hbiB3aXRoIGEgeW91bmcgd2lmZSwgaWYgaGUgbG9va2VkIHdpdGggZmF2b3VyIGFuZCBlc3RlZW0gb24gc29tZSBmYWlyIGFuZCBub2JsZSB5b3VuZyBtYW4sIG1pZ2h0IGludHJvZHVjZSBoaW0gdG8gaGVyLCBhbmQgYWRvcHQgaGVyIG9mZnNwcmluZyBieSBzdWNoIGEgbm9ibGUgZmF0aGVyIGFzIGhpcyBvd24uICBBbmQgYWdhaW4sIGEgd29ydGh5IG1hbiB3aG8gYWRtaXJlZCBzb21lIHdvbWFuIGZvciB0aGUgZmluZSBjaGlsZHJlbiB0aGF0IHNoZSBib3JlIGhlciBodXNiYW5kIGFuZCB0aGUgbW9kZXN0eSBvZiBoZXIgYmVoYXZpb3VyIGFzIGEgd2lmZSwgbWlnaHQgZW5qb3kgaGVyIGZhdm91cnMsIGlmIGhlciBodXNiYW5kIHdvdWxkIGNvbnNlbnQsIHRodXMgcGxhbnRpbmcsIGFzIGl0IHdlcmUsIGluIGEgc29pbCBvZiBiZWF1dGlmdWwgZnJ1aXRhZ2UsIGFuZCBiZWdldHRpbmcgZm9yIGhpbXNlbGYgbm9ibGUgc29ucywgd2hvIHdvdWxkIGhhdmUgdGhlIGJsb29kIG9mIG5vYmxlIG1lbiBpbiB0aGVpciB2ZWlucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiB0aGUgZmlyc3QgcGxhY2UsIEx5Y3VyZ3VzIGRpZCBub3QgcmVnYXJkIHNvbnMgYXMgdGhlIHBlY3VsaWFyIHByb3BlcnR5IG9mIHRoZWlyIGZhdGhlcnMsIGJ1dCByYXRoZXIgYXMgdGhlIGNvbW1vbiBwcm9wZXJ0eSBvZiB0aGUgc3RhdGUsIGFuZCB0aGVyZWZvcmUgd291bGQgbm90IGhhdmUgaGlzIGNpdGl6ZW5zIHNwcmluZyBmcm9tIHJhbmRvbSBwYXJlbnRhZ2UsIGJ1dCBmcm9tIHRoZSBiZXN0IHRoZXJlIHdhcy4gSW4gdGhlIHNlY29uZCBwbGFjZSwgaGUgc2F3IG11Y2ggZm9sbHkgYW5kIHZhbml0eSBpbiB3aGF0IG90aGVyIHBlb3BsZXMgZW5hY3RlZCBmb3IgdGhlIHJlZ3VsYXRpb24gb2YgdGhlc2UgbWF0dGVyczsgaW4gdGhlIGJyZWVkaW5nIG9mIGRvZ3MgYW5kIGhvcnNlcyB0aGV5IGluc2lzdCBvbiBoYXZpbmcgdGhlIGJlc3Qgc2lyZXMgd2hpY2ggbW9uZXkgb3IgZmF2b3VyIGNhbiBzZWN1cmUsIGJ1dCB0aGV5IGtlZXAgdGhlaXIgd2l2ZXMgdW5kZXIgbG9jayBhbmQga2V5LCBkZW1hbmRpbmcgdGhhdCB0aGV5IGhhdmUgY2hpbGRyZW4gYnkgbm9uZSBidXQgdGhlbXNlbHZlcywgZXZlbiB0aG91Z2ggdGhleSBiZSBmb29saXNoLCBvciBpbmZpcm0sIG9yIGRpc2Vhc2VkOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPmFzIHRob3VnaCBjaGlsZHJlbiBvZiBiYWQgc3RvY2sgZGlkIG5vdCBzaG93IHRoZWlyIGJhZG5lc3MgdG8gdGhvc2UgZmlyc3Qgd2hvIHBvc3Nlc3NlZCBhbmQgcmVhcmVkIHRoZW0sIGFuZCBjaGlsZHJlbiBvZiBnb29kIHN0b2NrLCBjb250cmFyaXdpc2UsIHRoZWlyIGdvb2RuZXNzLiBUaGUgZnJlZWRvbSB3aGljaCB0aHVzIHByZXZhaWxlZCBhdCB0aGF0IHRpbWUgaW4gbWFycmlhZ2UgcmVsYXRpb25zIHdhcyBhaW1lZCBhdCBwaHlzaWNhbCBhbmQgcG9saXRpY2FsIHdlbGwtYmVpbmcsIGFuZCB3YXMgZmFyIHJlbW92ZWQgZnJvbSB0aGUgbGljZW50aW91c25lc3Mgd2hpY2ggd2FzIGFmdGVyd2FyZHMgYXR0cmlidXRlZCB0byB0aGVpciB3b21lbiwgc28gbXVjaCBzbyB0aGF0IGFkdWx0ZXJ5IHdhcyB3aG9sbHkgdW5rbm93biBhbW9uZyB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYSBzYXlpbmcgaXMgcmVwb3J0ZWQgb2Ygb25lIEdlcmFkYXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgbmFtZSBpcyBHZXJhZGF0YXMgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAyMjhjIj5Nb3JhbHMsIHAuIDIyOCBjPC9iaWJsPiAoQXBvcGh0aGVnLiBMYWNvbiwgMjApLjwvbm90ZT4gYSBTcGFydGFuIG9mIHZlcnkgYW5jaWVudCB0eXBlLCB3aG8sIG9uIGJlaW5nIGFza2VkIGJ5IGEgc3RyYW5nZXIgd2hhdCB0aGUgcHVuaXNobWVudCBmb3IgYWR1bHRlcmVycyB3YXMgYW1vbmcgdGhlbSwgYW5zd2VyZWQ6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAyMjhjIj5Nb3JhbHMsIHAuIDIyOCBjPC9iaWJsPiAoQXBvcGh0aGVnLiBMYWNvbiwgMjApLjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3RyYW5nZXIsIHRoZXJlIGlzIG5vIGFkdWx0ZXJlciBhbW9uZyB1cy48L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlN1cHBvc2UsIHRoZW4sPC9xPiByZXBsaWVkIHRoZSBzdHJhbmdlciwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZXJlIHNob3VsZCBiZSBvbmUuPC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BIGJ1bGwsPC9xPiBzYWlkIEdlcmFkYXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj53b3VsZCBiZSBoaXMgZm9yZmVpdCwgYSBidWxsIHNvIGxhcmdlIHRoYXQgaXQgY291bGQgc3RyZXRjaCBvdmVyIE1vdW50IFRhw79nZXR1cyBhbmQgZHJpbmsgZnJvbSB0aGUgcml2ZXIgRXVyb3Rhcy48L3E+IFRoZW4gdGhlIHN0cmFuZ2VyIHdhcyBhc3RvbmlzaGVkIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGhvdyBjb3VsZCB0aGVyZSBiZSBhIGJ1bGwgc28gbGFyZ2U/PC9xPiBUbyB3aGljaCBHZXJhZGFzIHJlcGxpZWQsIHdpdGggYSBzbWlsZTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBob3cgY291bGQgdGhlcmUgYmUgYW4gYWR1bHRlcmVyIGluIFNwYXJ0YT88L3E+IFN1Y2gsIHRoZW4sIGFyZSB0aGUgYWNjb3VudHMgd2UgZmluZCBvZiB0aGVpciBtYXJyaWFnZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9mZnNwcmluZyB3YXMgbm90IHJlYXJlZCBhdCB0aGUgd2lsbCBvZiB0aGUgZmF0aGVyLCBidXQgd2FzIHRha2VuIGFuZCBjYXJyaWVkIGJ5IGhpbSB0byBhIHBsYWNlIGNhbGxlZCBMZXNjaGUsIHdoZXJlIHRoZSBlbGRlcnMgb2YgdGhlIHRyaWJlcyBvZmZpY2lhbGx5IGV4YW1pbmVkIHRoZSBpbmZhbnQsIGFuZCBpZiBpdCB3YXMgd2VsbC1idWlsdCBhbmQgc3R1cmR5LCB0aGV5IG9yZGVyZWQgdGhlIGZhdGhlciB0byByZWFyIGl0LCBhbmQgYXNzaWduZWQgaXQgb25lIG9mIHRoZSBuaW5lIHRob3VzYW5kIGxvdHMgb2YgbGFuZDsgYnV0IGlmIGl0IHdhcyBpbGwtYm9ybiBhbmQgZGVmb3JtZWQsIHRoZXkgc2VudCBpdCB0byB0aGUgc28tY2FsbGVkIEFwb3RoZXRhZSwgYSBjaGFzbS1saWtlIHBsYWNlIGF0IHRoZSBmb290IG9mIE1vdW50IFRhw79nZXR1cywgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+aW4gdGhlIGNvbnZpY3Rpb24gdGhhdCB0aGUgbGlmZSBvZiB0aGF0IHdoaWNoIG5hdHVyZSBoYWQgbm90IHdlbGwgZXF1aXBwZWQgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIGZvciBoZWFsdGggYW5kIHN0cmVuZ3RoLCB3YXMgb2Ygbm8gYWR2YW50YWdlIGVpdGhlciB0byBpdHNlbGYgb3IgdGhlIHN0YXRlLiBPbiB0aGUgc2FtZSBwcmluY2lwbGUsIHRoZSB3b21lbiB1c2VkIHRvIGJhdGhlIHRoZWlyIG5ldy1ib3JuIGJhYmVzIG5vdCB3aXRoIHdhdGVyLCBidXQgd2l0aCB3aW5lLCB0aHVzIG1ha2luZyBhIHNvcnQgb2YgdGVzdCBvZiB0aGVpciBjb25zdGl0dXRpb25zLiBGb3IgaXQgaXMgc2FpZCB0aGF0IGVwaWxlcHRpYyBhbmQgc2lja2x5IGluZmFudHMgYXJlIHRocm93biBpbnRvIGNvbnZ1bHNpb25zIGJ5IHRoZSBzdHJvbmcgd2luZSBhbmQgbG9vc2UgdGhlaXIgc2Vuc2VzLCB3aGlsZSB0aGUgaGVhbHRoeSBvbmVzIGFyZSByYXRoZXIgdGVtcGVyZWQgYnkgaXQsIGxpa2Ugc3RlZWwsIGFuZCBnaXZlbiBhIGZpcm0gaGFiaXQgb2YgYm9keS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlaXIgbnVyc2VzLCB0b28sIGV4ZXJjaXNlZCBncmVhdCBjYXJlIGFuZCBza2lsbDsgdGhleSByZWFyZWQgaW5mYW50cyB3aXRob3V0IHN3YWRkbGluZy1iYW5kcywgYW5kIHRodXMgbGVmdCB0aGVpciBsaW1icyBhbmQgZmlndXJlcyBmcmVlIHRvIGRldmVsb3A7IGJlc2lkZXMsIHRoZXkgdGF1Z2h0IHRoZW0gdG8gYmUgY29udGVudGVkIGFuZCBoYXBweSwgbm90IGRhaW50eSBhYm91dCB0aGVpciBmb29kLCBub3IgZmVhcmZ1bCBvZiB0aGUgZGFyaywgbm9yIGFmcmFpZCB0byBiZSBsZWZ0IGFsb25lLCBub3IgZ2l2ZW4gdG8gY29udGVtcHRpYmxlIHBlZXZpc2huZXNzIGFuZCB3aGltcGVyaW5nLiBUaGlzIGlzIHRoZSByZWFzb24gd2h5IGZvcmVpZ25lcnMgc29tZXRpbWVzIGJvdWdodCBTcGFydGFuIG51cnNlcyBmb3IgdGhlaXIgY2hpbGRyZW4uIEFteWNsYSwgZm9yIGluc3RhbmNlLCB0aGUgbnVyc2Ugb2YgdGhlIEF0aGVuaWFuIEFsY2liaWFkZXMsIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGEgU3BhcnRhbi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsYy4gMS4yIiB2YWxpZD0ieWVzIj5BbGNpYmlhZGVzLCBpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2Zmc3ByaW5nIHdhcyBub3QgcmVhcmVkIGF0IHRoZSB3aWxsIG9mIHRoZSBmYXRoZXIsIGJ1dCB3YXMgdGFrZW4gYW5kIGNhcnJpZWQgYnkgaGltIHRvIGEgcGxhY2UgY2FsbGVkIExlc2NoZSwgd2hlcmUgdGhlIGVsZGVycyBvZiB0aGUgdHJpYmVzIG9mZmljaWFsbHkgZXhhbWluZWQgdGhlIGluZmFudCwgYW5kIGlmIGl0IHdhcyB3ZWxsLWJ1aWx0IGFuZCBzdHVyZHksIHRoZXkgb3JkZXJlZCB0aGUgZmF0aGVyIHRvIHJlYXIgaXQsIGFuZCBhc3NpZ25lZCBpdCBvbmUgb2YgdGhlIG5pbmUgdGhvdXNhbmQgbG90cyBvZiBsYW5kOyBidXQgaWYgaXQgd2FzIGlsbC1ib3JuIGFuZCBkZWZvcm1lZCwgdGhleSBzZW50IGl0IHRvIHRoZSBzby1jYWxsZWQgQXBvdGhldGFlLCBhIGNoYXNtLWxpa2UgcGxhY2UgYXQgdGhlIGZvb3Qgb2YgTW91bnQgVGHDv2dldHVzLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmluIHRoZSBjb252aWN0aW9uIHRoYXQgdGhlIGxpZmUgb2YgdGhhdCB3aGljaCBuYXR1cmUgaGFkIG5vdCB3ZWxsIGVxdWlwcGVkIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBmb3IgaGVhbHRoIGFuZCBzdHJlbmd0aCwgd2FzIG9mIG5vIGFkdmFudGFnZSBlaXRoZXIgdG8gaXRzZWxmIG9yIHRoZSBzdGF0ZS4gT24gdGhlIHNhbWUgcHJpbmNpcGxlLCB0aGUgd29tZW4gdXNlZCB0byBiYXRoZSB0aGVpciBuZXctYm9ybiBiYWJlcyBub3Qgd2l0aCB3YXRlciwgYnV0IHdpdGggd2luZSwgdGh1cyBtYWtpbmcgYSBzb3J0IG9mIHRlc3Qgb2YgdGhlaXIgY29uc3RpdHV0aW9ucy4gRm9yIGl0IGlzIHNhaWQgdGhhdCBlcGlsZXB0aWMgYW5kIHNpY2tseSBpbmZhbnRzIGFyZSB0aHJvd24gaW50byBjb252dWxzaW9ucyBieSB0aGUgc3Ryb25nIHdpbmUgYW5kIGxvb3NlIHRoZWlyIHNlbnNlcywgd2hpbGUgdGhlIGhlYWx0aHkgb25lcyBhcmUgcmF0aGVyIHRlbXBlcmVkIGJ5IGl0LCBsaWtlIHN0ZWVsLCBhbmQgZ2l2ZW4gYSBmaXJtIGhhYml0IG9mIGJvZHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIG51cnNlcywgdG9vLCBleGVyY2lzZWQgZ3JlYXQgY2FyZSBhbmQgc2tpbGw7IHRoZXkgcmVhcmVkIGluZmFudHMgd2l0aG91dCBzd2FkZGxpbmctYmFuZHMsIGFuZCB0aHVzIGxlZnQgdGhlaXIgbGltYnMgYW5kIGZpZ3VyZXMgZnJlZSB0byBkZXZlbG9wOyBiZXNpZGVzLCB0aGV5IHRhdWdodCB0aGVtIHRvIGJlIGNvbnRlbnRlZCBhbmQgaGFwcHksIG5vdCBkYWludHkgYWJvdXQgdGhlaXIgZm9vZCwgbm9yIGZlYXJmdWwgb2YgdGhlIGRhcmssIG5vciBhZnJhaWQgdG8gYmUgbGVmdCBhbG9uZSwgbm9yIGdpdmVuIHRvIGNvbnRlbXB0aWJsZSBwZWV2aXNobmVzcyBhbmQgd2hpbXBlcmluZy4gVGhpcyBpcyB0aGUgcmVhc29uIHdoeSBmb3JlaWduZXJzIHNvbWV0aW1lcyBib3VnaHQgU3BhcnRhbiBudXJzZXMgZm9yIHRoZWlyIGNoaWxkcmVuLiBBbXljbGEsIGZvciBpbnN0YW5jZSwgdGhlIG51cnNlIG9mIHRoZSBBdGhlbmlhbiBBbGNpYmlhZGVzLCBpcyBzYWlkIHRvIGhhdmUgYmVlbiBhIFNwYXJ0YW4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAxLjIiIHZhbGlkPSJ5ZXMiPkFsY2liaWFkZXMsIGkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsYy4gMS4yIiB2YWxpZD0ieWVzIj5BbGNpYmlhZGVzLCBpLiAyLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBBbGNpYmlhZGVzLCBhcyBQbGF0byBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gQWxjLiAxIDEyMmIiIHZhbGlkPSJ5ZXMiPkFsY2liaWFkZXMgSS4gcC4gMTIyIGIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhhZCBmb3IgYSB0dXRvciwgc2V0IG92ZXIgaGltIGJ5IFBlcmljbGVzLCBvbmUgWm9weXJ1cywgd2hvIHdhcyBqdXN0IGEgY29tbW9uIHNsYXZlLiBCdXQgTHljdXJndXMgd291bGQgbm90IHB1dCB0aGUgc29ucyBvZiBTcGFydGFucyBpbiBjaGFyZ2Ugb2YgcHVyY2hhc2VkIG9yIGhpcmVkIHR1dG9ycywgbm9yIHdhcyBpdCBsYXdmdWwgZm9yIGV2ZXJ5IGZhdGhlciB0byByZWFyIG9yIHRyYWluIGhpcyBzb24gYXMgaGUgcGxlYXNlZCwgYnV0IGFzIHNvb24gYXMgdGhleSB3ZXJlIHNldmVuIHllYXJzIG9sZCwgTHljdXJndXMgb3JkZXJlZCB0aGVtIGFsbCB0byBiZSB0YWtlbiBieSB0aGUgc3RhdGUgYW5kIGVucm9sbGVkIGluIGNvbXBhbmllcywgd2hlcmUgdGhleSB3ZXJlIHB1dCB1bmRlciB0aGUgc2FtZSBkaXNjaXBsaW5lIGFuZCBudXJ0dXJlLCBhbmQgc28gYmVjYW1lIGFjY3VzdG9tZWQgdG8gc2hhcmUgb25lIGFub3RoZXIncyBzcG9ydHMgYW5kIHN0dWRpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBib3kgd2hvIGV4Y2VsbGVkIGluIGp1ZGdlbWVudCBhbmQgd2FzIG1vc3QgY291cmFnZW91cyBpbiBmaWdodGluZywgd2FzIG1hZGUgY2FwdGFpbiBvZiBoaXMgY29tcGFueTsgb24gaGltIHRoZSByZXN0IGFsbCBrZXB0IHRoZWlyIGV5ZXMsIG9iZXlpbmcgaGlzIG9yZGVycywgYW5kIHN1Ym1pdHRpbmcgdG8gaGlzIHB1bmlzaG1lbnRzLCBzbyB0aGF0IHRoZWlyIGJveWlzaCB0cmFpbmluZyB3YXMgYSBwcmFjdGljZSBvZiBvYmVkaWVuY2UuIEJlc2lkZXMsIHRoZSBlbGRlcmx5IG1lbiB1c2VkIHRvIHdhdGNoIHRoZWlyIHNwb3J0cywgYW5kIGJ5IGV2ZXIgYW5kIGFub24gZWdnaW5nIHRoZW0gb24gdG8gbWltaWMgYmF0dGxlcyBhbmQgZGlzcHV0ZXMsIGxlYXJuZWQgYWNjdXJhdGVseSBob3cgZWFjaCBvbmUgb2YgdGhlbSB3YXMgbmF0dXJhbGx5IGRpc3Bvc2VkIHdoZW4gaXQgd2FzIGEgcXVlc3Rpb24gb2YgYm9sZG5lc3MgYW5kIGFnZ3Jlc3NpdmVuZXNzIGluIHRoZWlyIHN0cnVnZ2xlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgQWxjaWJpYWRlcywgYXMgUGxhdG8gc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBBbGMuIDEgMTIyYiIgdmFsaWQ9InllcyI+QWxjaWJpYWRlcyBJLiBwLiAxMjIgYi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGFkIGZvciBhIHR1dG9yLCBzZXQgb3ZlciBoaW0gYnkgUGVyaWNsZXMsIG9uZSBab3B5cnVzLCB3aG8gd2FzIGp1c3QgYSBjb21tb24gc2xhdmUuIEJ1dCBMeWN1cmd1cyB3b3VsZCBub3QgcHV0IHRoZSBzb25zIG9mIFNwYXJ0YW5zIGluIGNoYXJnZSBvZiBwdXJjaGFzZWQgb3IgaGlyZWQgdHV0b3JzLCBub3Igd2FzIGl0IGxhd2Z1bCBmb3IgZXZlcnkgZmF0aGVyIHRvIHJlYXIgb3IgdHJhaW4gaGlzIHNvbiBhcyBoZSBwbGVhc2VkLCBidXQgYXMgc29vbiBhcyB0aGV5IHdlcmUgc2V2ZW4geWVhcnMgb2xkLCBMeWN1cmd1cyBvcmRlcmVkIHRoZW0gYWxsIHRvIGJlIHRha2VuIGJ5IHRoZSBzdGF0ZSBhbmQgZW5yb2xsZWQgaW4gY29tcGFuaWVzLCB3aGVyZSB0aGV5IHdlcmUgcHV0IHVuZGVyIHRoZSBzYW1lIGRpc2NpcGxpbmUgYW5kIG51cnR1cmUsIGFuZCBzbyBiZWNhbWUgYWNjdXN0b21lZCB0byBzaGFyZSBvbmUgYW5vdGhlcidzIHNwb3J0cyBhbmQgc3R1ZGllcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBBbGMuIDEgMTIyYiIgdmFsaWQ9InllcyI+QWxjaWJpYWRlcyBJLiBwLiAxMjIgYi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBib3kgd2hvIGV4Y2VsbGVkIGluIGp1ZGdlbWVudCBhbmQgd2FzIG1vc3QgY291cmFnZW91cyBpbiBmaWdodGluZywgd2FzIG1hZGUgY2FwdGFpbiBvZiBoaXMgY29tcGFueTsgb24gaGltIHRoZSByZXN0IGFsbCBrZXB0IHRoZWlyIGV5ZXMsIG9iZXlpbmcgaGlzIG9yZGVycywgYW5kIHN1Ym1pdHRpbmcgdG8gaGlzIHB1bmlzaG1lbnRzLCBzbyB0aGF0IHRoZWlyIGJveWlzaCB0cmFpbmluZyB3YXMgYSBwcmFjdGljZSBvZiBvYmVkaWVuY2UuIEJlc2lkZXMsIHRoZSBlbGRlcmx5IG1lbiB1c2VkIHRvIHdhdGNoIHRoZWlyIHNwb3J0cywgYW5kIGJ5IGV2ZXIgYW5kIGFub24gZWdnaW5nIHRoZW0gb24gdG8gbWltaWMgYmF0dGxlcyBhbmQgZGlzcHV0ZXMsIGxlYXJuZWQgYWNjdXJhdGVseSBob3cgZWFjaCBvbmUgb2YgdGhlbSB3YXMgbmF0dXJhbGx5IGRpc3Bvc2VkIHdoZW4gaXQgd2FzIGEgcXVlc3Rpb24gb2YgYm9sZG5lc3MgYW5kIGFnZ3Jlc3NpdmVuZXNzIGluIHRoZWlyIHN0cnVnZ2xlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+T2YgcmVhZGluZyBhbmQgd3JpdGluZywgdGhleSBsZWFybmVkIG9ubHkgZW5vdWdoIHRvIHNlcnZlIHRoZWlyIHR1cm47IGFsbCB0aGUgcmVzdCBvZiB0aGVpciB0cmFpbmluZyB3YXMgY2FsY3VsYXRlZCB0byBtYWtlIHRoZW0gb2JleSBjb21tYW5kcyB3ZWxsLCBlbmR1cmUgaGFyZHNoaXBzLCBhbmQgY29ucXVlciBpbiBiYXR0bGUuIFRoZXJlZm9yZSwgYXMgdGhleSBncmV3IGluIGFnZSwgdGhlaXIgYm9kaWx5IGV4ZXJjaXNlIHdhcyBpbmNyZWFzZWQ7IHRoZWlyIGhlYWRzIHdlcmUgY2xvc2UtY2xpcHBlZCwgYW5kIHRoZXkgd2VyZSBhY2N1c3RvbWVkIHRvIGdvaW5nIGJhcmUtZm9vdCwgYW5kIHRvIHBsYXlpbmcgZm9yIHRoZSBtb3N0IHBhcnQgd2l0aG91dCBjbG90aGVzLiBXaGVuIHRoZXkgd2VyZSB0d2VsdmUgeWVhcnMgb2xkLCB0aGV5IG5vIGxvbmdlciBoYWQgdHVuaWNzIHRvIHdlYXIsIHJlY2VpdmVkIG9uZSBjbG9hayBhIHllYXIsIGhhZCBoYXJkLCBkcnkgZmxlc2gsIGFuZCBrbmV3IGxpdHRsZSBvZiBiYXRocyBhbmQgb2ludG1lbnRzOyBvbmx5IG9uIGNlcnRhaW4gZGF5cyBvZiB0aGUgeWVhciwgYW5kIGZldyBhdCB0aGF0LCBkaWQgdGhleSBpbmR1bGdlIGluIHN1Y2ggYW1lbml0aWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHNsZXB0IHRvZ2V0aGVyLCBpbiB0cm9vcHMgYW5kIGNvbXBhbmllcywgb24gcGFsbGV0LWJlZHMgd2hpY2ggdGhleSBjb2xsZWN0ZWQgZm9yIHRoZW1zZWx2ZXMsIGJyZWFraW5nIG9mZiB3aXRoIHRoZWlyIGhhbmRz4oCUbm8ga25pdmVzIGFsbG93ZWTigJR0aGUgdG9wcyBvZiB0aGUgcnVzaGVzIHdoaWNoIGdyZXcgYWxvbmcgdGhlIHJpdmVyIEV1cm90YXMuIEluIHRoZSB3aW50ZXItdGltZSwgdGhleSBhZGRlZCB0byB0aGUgc3R1ZmYgb2YgdGhlc2UgcGFsbGV0cyB0aGUgc28tY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bHljb3Bob24sPC9xPiBvciA8ZW1waD50aGlzdGxlLWRvd248L2VtcGg+LCB3aGljaCB3YXMgdGhvdWdodCB0byBoYXZlIHdhcm10aCBpbiBpdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9mIHJlYWRpbmcgYW5kIHdyaXRpbmcsIHRoZXkgbGVhcm5lZCBvbmx5IGVub3VnaCB0byBzZXJ2ZSB0aGVpciB0dXJuOyBhbGwgdGhlIHJlc3Qgb2YgdGhlaXIgdHJhaW5pbmcgd2FzIGNhbGN1bGF0ZWQgdG8gbWFrZSB0aGVtIG9iZXkgY29tbWFuZHMgd2VsbCwgZW5kdXJlIGhhcmRzaGlwcywgYW5kIGNvbnF1ZXIgaW4gYmF0dGxlLiBUaGVyZWZvcmUsIGFzIHRoZXkgZ3JldyBpbiBhZ2UsIHRoZWlyIGJvZGlseSBleGVyY2lzZSB3YXMgaW5jcmVhc2VkOyB0aGVpciBoZWFkcyB3ZXJlIGNsb3NlLWNsaXBwZWQsIGFuZCB0aGV5IHdlcmUgYWNjdXN0b21lZCB0byBnb2luZyBiYXJlLWZvb3QsIGFuZCB0byBwbGF5aW5nIGZvciB0aGUgbW9zdCBwYXJ0IHdpdGhvdXQgY2xvdGhlcy4gV2hlbiB0aGV5IHdlcmUgdHdlbHZlIHllYXJzIG9sZCwgdGhleSBubyBsb25nZXIgaGFkIHR1bmljcyB0byB3ZWFyLCByZWNlaXZlZCBvbmUgY2xvYWsgYSB5ZWFyLCBoYWQgaGFyZCwgZHJ5IGZsZXNoLCBhbmQga25ldyBsaXR0bGUgb2YgYmF0aHMgYW5kIG9pbnRtZW50czsgb25seSBvbiBjZXJ0YWluIGRheXMgb2YgdGhlIHllYXIsIGFuZCBmZXcgYXQgdGhhdCwgZGlkIHRoZXkgaW5kdWxnZSBpbiBzdWNoIGFtZW5pdGllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgc2xlcHQgdG9nZXRoZXIsIGluIHRyb29wcyBhbmQgY29tcGFuaWVzLCBvbiBwYWxsZXQtYmVkcyB3aGljaCB0aGV5IGNvbGxlY3RlZCBmb3IgdGhlbXNlbHZlcywgYnJlYWtpbmcgb2ZmIHdpdGggdGhlaXIgaGFuZHPigJRubyBrbml2ZXMgYWxsb3dlZOKAlHRoZSB0b3BzIG9mIHRoZSBydXNoZXMgd2hpY2ggZ3JldyBhbG9uZyB0aGUgcml2ZXIgRXVyb3Rhcy4gSW4gdGhlIHdpbnRlci10aW1lLCB0aGV5IGFkZGVkIHRvIHRoZSBzdHVmZiBvZiB0aGVzZSBwYWxsZXRzIHRoZSBzby1jYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmx5Y29waG9uLDwvcT4gb3IgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj50aGlzdGxlLWRvd248L2VtcGg+LCB3aGljaCB3YXMgdGhvdWdodCB0byBoYXZlIHdhcm10aCBpbiBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgYm95cyByZWFjaGVkIHRoaXMgYWdlLCB0aGV5IHdlcmUgZmF2b3VyZWQgd2l0aCB0aGUgc29jaWV0eSBvZiBsb3ZlcnMgZnJvbSBhbW9uZyB0aGUgcmVwdXRhYmxlIHlvdW5nIG1lbi4gVGhlIGVsZGVybHkgbWVuIGFsc28ga2VwdCBjbG9zZSB3YXRjaCBvZiB0aGVtLCBjb21pbmcgbW9yZSBmcmVxdWVudGx5IHRvIHRoZWlyIHBsYWNlcyBvZiBleGVyY2lzZSwgYW5kIG9ic2VydmluZyB0aGVpciBjb250ZXN0cyBvZiBzdHJlbmd0aCBhbmQgd2l0LCBub3QgY3Vyc29yaWx5LCBidXQgd2l0aCB0aGUgaWRlYSB0aGF0IHRoZXkgd2VyZSBhbGwgaW4gYSBzZW5zZSB0aGUgZmF0aGVycyBhbmQgdHV0b3JzIGFuZCBnb3Zlcm5vcnMgb2YgYWxsIHRoZSBib3lzLiBJbiB0aGlzIHdheSwgYXQgZXZlcnkgZml0dGluZyB0aW1lIGFuZCBpbiBldmVyeSBwbGFjZSwgdGhlIGJveSB3aG8gd2VudCB3cm9uZyBoYWQgc29tZW9uZSB0byBhZG1vbmlzaCBhbmQgY2hhc3Rpc2UgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3Igd2FzIHRoaXMgYWxsOyBvbmUgb2YgdGhlIG5vYmxlc3QgYW5kIGJlc3QgbWVuIG9mIHRoZSBjaXR5IHdhcyBhcHBvaW50ZWQgcGFlZG9ub21lLCBvciBpbnNwZWN0b3Igb2YgdGhlIGJveXMsIGFuZCB1bmRlciBoaXMgZGlyZWN0aW9ucyB0aGUgYm95cywgaW4gdGhlaXIgc2V2ZXJhbCBjb21wYW5pZXMsIHB1dCB0aGVtc2VsdmVzIHVuZGVyIHRoZSBjb21tYW5kIG9mIHRoZSBtb3N0IHBydWRlbnQgYW5kIHdhcmxpa2Ugb2YgdGhlIHNvIGNhbGxlZCBFaXJlbnMuIFRoaXMgd2FzIHRoZSBuYW1lIGdpdmVuIHRvIHRob3NlIHdobyBoYWQgYmVlbiBmb3IgdHdvIHllYXJzIG91dCBvZiB0aGUgY2xhc3Mgb2YgYm95cywgYW5kIE1lbGxlaXJlbnMsIG9yIDxlbXBoPldvdWxkLWJlIEVpcmVuczwvZW1waD4sIHdhcyB0aGUgbmFtZSBmb3IgdGhlIG9sZGVzdCBvZiB0aGUgYm95cy4gVGhpcyBlaXJlbiwgdGhlbiwgYSB5b3V0aCBvZiB0d2VudHkgeWVhcnMsIGNvbW1hbmRzIGhpcyBzdWJvcmRpbmF0ZXMgaW4gdGhlaXIgbWltaWMgYmF0dGxlcywgYW5kIGluIGRvb3JzIG1ha2VzIHRoZW0gc2VydmUgaGltIGF0IGhpcyBtZWFscy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgY29tbWlzc2lvbnMgdGhlIGxhcmdlciBvbmVzIHRvIGZldGNoIHdvb2QsIGFuZCB0aGUgc21hbGxlciBvbmVzIHBvdGhlcmJzLiBBbmQgdGhleSBzdGVhbCB3aGF0IHRoZXkgZmV0Y2gsIHNvbWUgb2YgdGhlbSBlbnRlcmluZyB0aGUgZ2FyZGVucywgYW5kIG90aGVycyBjcmVlcGluZyByaWdodCBzbHlseSBhbmQgY2F1dGlvdXNseSBpbnRvIHRoZSBwdWJsaWMgbWVzc2VzIG9mIHRoZSBtZW47IGJ1dCBpZiBhIGJveSBpcyBjYXVnaHQgc3RlYWxpbmcsIGhlIGlzIHNvdW5kbHkgZmxvZ2dlZCwgYXMgYSBjYXJlbGVzcyBhbmQgdW5za2lsZnVsIHRoaWVmLiBUaGV5IHN0ZWFsLCB0b28sIHdoYXRldmVyIGZvb2QgdGhleSBjYW4sIGFuZCBsZWFybiB0byBiZSBhZGVwdCBpbiBzZXR0aW5nIHVwb24gcGVvcGxlIHdoZW4gYXNsZWVwIG9yIG9mZiB0aGVpciBndWFyZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBib3kgd2hvIGlzIGNhdWdodCBnZXRzIGEgZmxvZ2dpbmcgYW5kIG11c3QgZ28gaHVuZ3J5LiBGb3IgdGhlIG1lYWxzIGFsbG93ZWQgdGhlbSBhcmUgc2NhbnR5LCBpbiBvcmRlciB0aGF0IHRoZXkgbWF5IHRha2UgaW50byB0aGVpciBvd24gaGFuZHMgdGhlIGZpZ2h0IGFnYWluc3QgaHVuZ2VyLCBhbmQgc28gYmUgZm9yY2VkIGludG8gYm9sZG5lc3MgYW5kIGN1bm5pbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgYm95cyByZWFjaGVkIHRoaXMgYWdlLCB0aGV5IHdlcmUgZmF2b3VyZWQgd2l0aCB0aGUgc29jaWV0eSBvZiBsb3ZlcnMgZnJvbSBhbW9uZyB0aGUgcmVwdXRhYmxlIHlvdW5nIG1lbi4gVGhlIGVsZGVybHkgbWVuIGFsc28ga2VwdCBjbG9zZSB3YXRjaCBvZiB0aGVtLCBjb21pbmcgbW9yZSBmcmVxdWVudGx5IHRvIHRoZWlyIHBsYWNlcyBvZiBleGVyY2lzZSwgYW5kIG9ic2VydmluZyB0aGVpciBjb250ZXN0cyBvZiBzdHJlbmd0aCBhbmQgd2l0LCBub3QgY3Vyc29yaWx5LCBidXQgd2l0aCB0aGUgaWRlYSB0aGF0IHRoZXkgd2VyZSBhbGwgaW4gYSBzZW5zZSB0aGUgZmF0aGVycyBhbmQgdHV0b3JzIGFuZCBnb3Zlcm5vcnMgb2YgYWxsIHRoZSBib3lzLiBJbiB0aGlzIHdheSwgYXQgZXZlcnkgZml0dGluZyB0aW1lIGFuZCBpbiBldmVyeSBwbGFjZSwgdGhlIGJveSB3aG8gd2VudCB3cm9uZyBoYWQgc29tZW9uZSB0byBhZG1vbmlzaCBhbmQgY2hhc3Rpc2UgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vciB3YXMgdGhpcyBhbGw7IG9uZSBvZiB0aGUgbm9ibGVzdCBhbmQgYmVzdCBtZW4gb2YgdGhlIGNpdHkgd2FzIGFwcG9pbnRlZCBwYWVkb25vbWUsIG9yIGluc3BlY3RvciBvZiB0aGUgYm95cywgYW5kIHVuZGVyIGhpcyBkaXJlY3Rpb25zIHRoZSBib3lzLCBpbiB0aGVpciBzZXZlcmFsIGNvbXBhbmllcywgcHV0IHRoZW1zZWx2ZXMgdW5kZXIgdGhlIGNvbW1hbmQgb2YgdGhlIG1vc3QgcHJ1ZGVudCBhbmQgd2FybGlrZSBvZiB0aGUgc28gY2FsbGVkIEVpcmVucy4gVGhpcyB3YXMgdGhlIG5hbWUgZ2l2ZW4gdG8gdGhvc2Ugd2hvIGhhZCBiZWVuIGZvciB0d28geWVhcnMgb3V0IG9mIHRoZSBjbGFzcyBvZiBib3lzLCBhbmQgTWVsbGVpcmVucywgb3IgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5Xb3VsZC1iZSBFaXJlbnM8L2VtcGg+LCB3YXMgdGhlIG5hbWUgZm9yIHRoZSBvbGRlc3Qgb2YgdGhlIGJveXMuIFRoaXMgZWlyZW4sIHRoZW4sIGEgeW91dGggb2YgdHdlbnR5IHllYXJzLCBjb21tYW5kcyBoaXMgc3Vib3JkaW5hdGVzIGluIHRoZWlyIG1pbWljIGJhdHRsZXMsIGFuZCBpbiBkb29ycyBtYWtlcyB0aGVtIHNlcnZlIGhpbSBhdCBoaXMgbWVhbHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGNvbW1pc3Npb25zIHRoZSBsYXJnZXIgb25lcyB0byBmZXRjaCB3b29kLCBhbmQgdGhlIHNtYWxsZXIgb25lcyBwb3RoZXJicy4gQW5kIHRoZXkgc3RlYWwgd2hhdCB0aGV5IGZldGNoLCBzb21lIG9mIHRoZW0gZW50ZXJpbmcgdGhlIGdhcmRlbnMsIGFuZCBvdGhlcnMgY3JlZXBpbmcgcmlnaHQgc2x5bHkgYW5kIGNhdXRpb3VzbHkgaW50byB0aGUgcHVibGljIG1lc3NlcyBvZiB0aGUgbWVuOyBidXQgaWYgYSBib3kgaXMgY2F1Z2h0IHN0ZWFsaW5nLCBoZSBpcyBzb3VuZGx5IGZsb2dnZWQsIGFzIGEgY2FyZWxlc3MgYW5kIHVuc2tpbGZ1bCB0aGllZi4gVGhleSBzdGVhbCwgdG9vLCB3aGF0ZXZlciBmb29kIHRoZXkgY2FuLCBhbmQgbGVhcm4gdG8gYmUgYWRlcHQgaW4gc2V0dGluZyB1cG9uIHBlb3BsZSB3aGVuIGFzbGVlcCBvciBvZmYgdGhlaXIgZ3VhcmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgYm95IHdobyBpcyBjYXVnaHQgZ2V0cyBhIGZsb2dnaW5nIGFuZCBtdXN0IGdvIGh1bmdyeS4gRm9yIHRoZSBtZWFscyBhbGxvd2VkIHRoZW0gYXJlIHNjYW50eSwgaW4gb3JkZXIgdGhhdCB0aGV5IG1heSB0YWtlIGludG8gdGhlaXIgb3duIGhhbmRzIHRoZSBmaWdodCBhZ2FpbnN0IGh1bmdlciwgYW5kIHNvIGJlIGZvcmNlZCBpbnRvIGJvbGRuZXNzIGFuZCBjdW5uaW5nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgaXMgdGhlIG1haW4gb2JqZWN0IG9mIHRoZWlyIHNwYXJlIGRpZXQ7IGEgc2Vjb25kYXJ5IG9uZSBpcyB0byBtYWtlIHRoZW0gZ3JvdyB0YWxsLiBGb3IgaXQgY29udHJpYnV0ZXMgdG8gaGVpZ2h0IG9mIHN0YXR1cmUgd2hlbiB0aGUgdml0YWxpdHkgaXMgbm90IGltcGVkZWQgYW5kIGhpbmRlcmVkIGJ5IGEgbWFzcyBvZiBub3VyaXNobWVudCB3aGljaCBmb3JjZXMgaXQgaW50byB0aGlja25lc3MgYW5kIHdpZHRoLCBidXQgYXNjZW5kcyBvZiBpdHMgb3duIGxpZ2h0bmVzcywgYW5kIHdoZW4gdGhlIGJvZHkgZ3Jvd3MgZnJlZWx5IGFuZCBlYXNpbHkuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNhbWUgdGlsaW5nIHNlZW1zIGFsc28gdG8gY29uZHVjZSB0byBiZWF1dHkgb2YgZm9ybTsgZm9yIGxlYW4gYW5kIG1lYWdyZSBoYWJpdHMgeWllbGQgbW9yZSByZWFkaWx5IHRvIHRoZSBmb3JjZSBvZiBhcnRpY3VsYXRpb24sIHdoZXJlYXMgdGhlIGdyb3NzIGFuZCBvdmVyLWZlZCBhcmUgc28gaGVhdnkgYXMgdG8gcmVzaXN0IGl0LiBKdXN0IHNvLCB3ZSBtYXkgYmUgc3VyZSwgd29tZW4gd2hvIHRha2UgcGh5c2ljIHdoaWxlIHRoZXkgYXJlIHByZWduYW50LCBiZWFyIGNoaWxkcmVuIHdoaWNoIGFyZSBsZWFuLCBpdCBtYXkgYmUsIGJ1dCB3ZWxsLXNoYXBlZCBhbmQgZmluZSwgYmVjYXVzZSB0aGUgbGlnaHRuZXNzIG9mIHRoZSBwYXJlbnQgbWF0dGVyIG1ha2VzIGl0IG1vcmUgc3VzY2VwdGlibGUgdG8gbW91bGRpbmcuIEhvd2V2ZXIsIHRoZSByZWFzb24gZm9yIHRoaXMgSSBtdXN0IGxlYXZlIGZvciBvdGhlcnMgdG8gaW52ZXN0aWdhdGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzYW1lIHRpbGluZyBzZWVtcyBhbHNvIHRvIGNvbmR1Y2UgdG8gYmVhdXR5IG9mIGZvcm07IGZvciBsZWFuIGFuZCBtZWFncmUgaGFiaXRzIHlpZWxkIG1vcmUgcmVhZGlseSB0byB0aGUgZm9yY2Ugb2YgYXJ0aWN1bGF0aW9uLCB3aGVyZWFzIHRoZSBncm9zcyBhbmQgb3Zlci1mZWQgYXJlIHNvIGhlYXZ5IGFzIHRvIHJlc2lzdCBpdC4gSnVzdCBzbywgd2UgbWF5IGJlIHN1cmUsIHdvbWVuIHdobyB0YWtlIHBoeXNpYyB3aGlsZSB0aGV5IGFyZSBwcmVnbmFudCwgYmVhciBjaGlsZHJlbiB3aGljaCBhcmUgbGVhbiwgaXQgbWF5IGJlLCBidXQgd2VsbC1zaGFwZWQgYW5kIGZpbmUsIGJlY2F1c2UgdGhlIGxpZ2h0bmVzcyBvZiB0aGUgcGFyZW50IG1hdHRlciBtYWtlcyBpdCBtb3JlIHN1c2NlcHRpYmxlIHRvIG1vdWxkaW5nLiBIb3dldmVyLCB0aGUgcmVhc29uIGZvciB0aGlzIEkgbXVzdCBsZWF2ZSBmb3Igb3RoZXJzIHRvIGludmVzdGlnYXRlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYm95cyBtYWtlIHN1Y2ggYSBzZXJpb3VzIG1hdHRlciBvZiB0aGVpciBzdGVhbGluZywgdGhhdCBvbmUgb2YgdGhlbSwgYXMgdGhlIHN0b3J5IGdvZXMsIHdobyB3YXMgY2FycnlpbmcgY29uY2VhbGVkIHVuZGVyIGhpcyBjbG9hayBhIHlvdW5nIGZveCB3aGljaCBoZSBoYWQgc3RvbGVuLCBzdWZmZXJlZCB0aGUgYW5pbWFsIHRvIHRlYXIgb3V0IGhpcyBib3dlbHMgd2l0aCBpdHMgdGVldGggYW5kIGNsYXdzLCBhbmQgZGllZCByYXRoZXIgdGhhbiBoYXZlIGhpcyB0aGVmdCBkZXRlY3RlZC4gQW5kIGV2ZW4gdGhpcyBzdG9yeSBnYWlucyBjcmVkZW5jZSBmcm9tIHdoYXQgdGhlaXIgeW91dGhzIG5vdyBlbmR1cmUsIG1hbnkgb2Ygd2hvbSBJIGhhdmUgc2VlbiBleHBpcmluZyB1bmRlciB0aGUgbGFzaCBhdCB0aGUgYWx0YXIgb2YgQXJ0ZW1pcyBPcnRoaWEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGJveXMgbWFrZSBzdWNoIGEgc2VyaW91cyBtYXR0ZXIgb2YgdGhlaXIgc3RlYWxpbmcsIHRoYXQgb25lIG9mIHRoZW0sIGFzIHRoZSBzdG9yeSBnb2VzLCB3aG8gd2FzIGNhcnJ5aW5nIGNvbmNlYWxlZCB1bmRlciBoaXMgY2xvYWsgYSB5b3VuZyBmb3ggd2hpY2ggaGUgaGFkIHN0b2xlbiwgc3VmZmVyZWQgdGhlIGFuaW1hbCB0byB0ZWFyIG91dCBoaXMgYm93ZWxzIHdpdGggaXRzIHRlZXRoIGFuZCBjbGF3cywgYW5kIGRpZWQgcmF0aGVyIHRoYW4gaGF2ZSBoaXMgdGhlZnQgZGV0ZWN0ZWQuIEFuZCBldmVuIHRoaXMgc3RvcnkgZ2FpbnMgY3JlZGVuY2UgZnJvbSB3aGF0IHRoZWlyIHlvdXRocyBub3cgZW5kdXJlLCBtYW55IG9mIHdob20gSSBoYXZlIHNlZW4gZXhwaXJpbmcgdW5kZXIgdGhlIGxhc2ggYXQgdGhlIGFsdGFyIG9mIEFydGVtaXMgT3J0aGlhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZWlyZW4sIGFzIGhlIHJlY2xpbmVkIGFmdGVyIHN1cHBlciwgd291bGQgb3JkZXIgb25lIG9mIHRoZSBib3lzIHRvIHNpbmcgYSBzb25nLCBhbmQgdG8gYW5vdGhlciB3b3VsZCBwdXQgYSBxdWVzdGlvbiByZXF1aXJpbmcgYSBjYXJlZnVsIGFuZCBkZWxpYmVyYXRlIGFuc3dlciwgYXMsIGZvciBpbnN0YW5jZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaG8gaXMgdGhlIGJlc3QgbWFuIGluIHRoZSBjaXR5PzwvcT4gb3IsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCB0aGlua2VzdCB0aG91IG9mIHRoaXMgbWFuJ3MgY29uZHVjdD88L3E+IEluIHRoaXMgd2F5IHRoZSBib3lzIHdlcmUgYWNjdXN0b21lZCB0byBwYXNzIHJpZ2h0IGp1ZGdlbWVudHMgYW5kIGludGVyZXN0IHRoZW1zZWx2ZXMgYXQgdGhlIHZlcnkgb3V0c2V0IGluIHRoZSBjb25kdWN0IG9mIHRoZSBjaXRpemVucy4gRm9yIGlmIG9uZSBvZiB0aGVtIHdhcyBhc2tlZCB3aG8gd2FzIGEgZ29vZCBjaXRpemVuLCBvciB3aG8gYW4gaW5mYW1vdXMgb25lLCBhbmQgaGFkIG5vIGFuc3dlciB0byBtYWtlLCBoZSB3YXMganVkZ2VkIHRvIGhhdmUgYSB0b3JwaWQgc3Bpcml0LCBhbmQgb25lIHRoYXQgd291bGQgbm90IGFzcGlyZSB0byBleGNlbGxlbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlIGFuc3dlciBtdXN0IG5vdCBvbmx5IGhhdmUgcmVhc29ucyBhbmQgcHJvb2YgZ2l2ZW4gZm9yIGl0LCBidXQgYWxzbyBiZSBjb3VjaGVkIGluIHZlcnkgYnJpZWYgYW5kIGNvbmNpc2UgbGFuZ3VhZ2UsIGFuZCB0aGUgb25lIHdobyBnYXZlIGEgZmF1bHR5IGFuc3dlciB3YXMgcHVuaXNoZWQgd2l0aCBhIGJpdGUgaW4gdGhlIHRodW1iIGZyb20gdGhlIGVpcmVuLiBPZnRlbi10aW1lcywgdG9vLCB0aGUgZWlyZW4gcHVuaXNoZWQgdGhlIGJveXMgaW4gdGhlIHByZXNlbmNlIG9mIHRoZSBlbGRlcnMgYW5kIG1hZ2lzdHJhdGVzLCB0aHVzIHNob3dpbmcgd2hldGhlciBoaXMgcHVuaXNobWVudHMgd2VyZSByZWFzb25hYmxlIGFuZCBwcm9wZXIgb3Igbm90LiBXaGlsZSBoZSB3YXMgcHVuaXNoaW5nIHRoZW0sIGhlIHN1ZmZlcmVkIG5vIHJlc3RyYWludCwgYnV0IGFmdGVyIHRoZSBib3lzIHdlcmUgZ29uZSwgaGUgd2FzIGJyb3VnaHQgdG8gYW4gYWNjb3VudCBpZiBoaXMgcHVuaXNobWVudHMgd2VyZSBoYXJzaGVyIHRoYW4gd2FzIG5lY2Vzc2FyeSwgb3IsIG9uIHRoZSBvdGhlciBoYW5kLCB0b28gbWlsZCBhbmQgZ2VudGxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlaXJlbiwgYXMgaGUgcmVjbGluZWQgYWZ0ZXIgc3VwcGVyLCB3b3VsZCBvcmRlciBvbmUgb2YgdGhlIGJveXMgdG8gc2luZyBhIHNvbmcsIGFuZCB0byBhbm90aGVyIHdvdWxkIHB1dCBhIHF1ZXN0aW9uIHJlcXVpcmluZyBhIGNhcmVmdWwgYW5kIGRlbGliZXJhdGUgYW5zd2VyLCBhcywgZm9yIGluc3RhbmNlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hvIGlzIHRoZSBiZXN0IG1hbiBpbiB0aGUgY2l0eT88L3E+IG9yLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCB0aGlua2VzdCB0aG91IG9mIHRoaXMgbWFuJ3MgY29uZHVjdD88L3E+IEluIHRoaXMgd2F5IHRoZSBib3lzIHdlcmUgYWNjdXN0b21lZCB0byBwYXNzIHJpZ2h0IGp1ZGdlbWVudHMgYW5kIGludGVyZXN0IHRoZW1zZWx2ZXMgYXQgdGhlIHZlcnkgb3V0c2V0IGluIHRoZSBjb25kdWN0IG9mIHRoZSBjaXRpemVucy4gRm9yIGlmIG9uZSBvZiB0aGVtIHdhcyBhc2tlZCB3aG8gd2FzIGEgZ29vZCBjaXRpemVuLCBvciB3aG8gYW4gaW5mYW1vdXMgb25lLCBhbmQgaGFkIG5vIGFuc3dlciB0byBtYWtlLCBoZSB3YXMganVkZ2VkIHRvIGhhdmUgYSB0b3JwaWQgc3Bpcml0LCBhbmQgb25lIHRoYXQgd291bGQgbm90IGFzcGlyZSB0byBleGNlbGxlbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgYW5zd2VyIG11c3Qgbm90IG9ubHkgaGF2ZSByZWFzb25zIGFuZCBwcm9vZiBnaXZlbiBmb3IgaXQsIGJ1dCBhbHNvIGJlIGNvdWNoZWQgaW4gdmVyeSBicmllZiBhbmQgY29uY2lzZSBsYW5ndWFnZSwgYW5kIHRoZSBvbmUgd2hvIGdhdmUgYSBmYXVsdHkgYW5zd2VyIHdhcyBwdW5pc2hlZCB3aXRoIGEgYml0ZSBpbiB0aGUgdGh1bWIgZnJvbSB0aGUgZWlyZW4uIE9mdGVuLXRpbWVzLCB0b28sIHRoZSBlaXJlbiBwdW5pc2hlZCB0aGUgYm95cyBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIGVsZGVycyBhbmQgbWFnaXN0cmF0ZXMsIHRodXMgc2hvd2luZyB3aGV0aGVyIGhpcyBwdW5pc2htZW50cyB3ZXJlIHJlYXNvbmFibGUgYW5kIHByb3BlciBvciBub3QuIFdoaWxlIGhlIHdhcyBwdW5pc2hpbmcgdGhlbSwgaGUgc3VmZmVyZWQgbm8gcmVzdHJhaW50LCBidXQgYWZ0ZXIgdGhlIGJveXMgd2VyZSBnb25lLCBoZSB3YXMgYnJvdWdodCB0byBhbiBhY2NvdW50IGlmIGhpcyBwdW5pc2htZW50cyB3ZXJlIGhhcnNoZXIgdGhhbiB3YXMgbmVjZXNzYXJ5LCBvciwgb24gdGhlIG90aGVyIGhhbmQsIHRvbyBtaWxkIGFuZCBnZW50bGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBib3lzJyBsb3ZlcnMgYWxzbyBzaGFyZWQgd2l0aCB0aGVtIGluIHRoZWlyIGhvbm91ciBvciBkaXNncmFjZTsgYW5kIGl0IGlzIHNhaWQgdGhhdCBvbmUgb2YgdGhlbSB3YXMgb25jZSBmaW5lZCBieSB0aGUgbWFnaXN0cmF0ZXMgYmVjYXVzZSBoaXMgZmF2b3VyaXRlIGJveSBoYWQgbGV0IGFuIHVuZ2VuZXJvdXMgY3J5IGVzY2FwZSBoaW0gd2hpbGUgaGUgd2FzIGZpZ2h0aW5nLiBNb3Jlb3ZlciwgdGhvdWdoIHRoaXMgc29ydCBvZiBsb3ZlIHdhcyBzbyBhcHByb3ZlZCBhbW9uZyB0aGVtIHRoYXQgZXZlbiB0aGUgbWFpZGVucyBmb3VuZCBsb3ZlcnMgaW4gZ29vZCBhbmQgbm9ibGUgd29tZW4sIHN0aWxsLCB0aGVyZSB3YXMgbm8gamVhbG91cyByaXZhbHJ5IGluIGl0LCBidXQgdGhvc2Ugd2hvIGZpeGVkIHRoZWlyIGFmZmVjdGlvbnMgb24gdGhlIHNhbWUgYm95cyBtYWRlIHRoaXMgcmF0aGVyIGEgZm91bmRhdGlvbiBmb3IgZnJpZW5kc2hpcCB3aXRoIG9uZSBhbm90aGVyLCBhbmQgcGVyc2V2ZXJlZCBpbiBjb21tb24gZWZmb3J0cyB0byBtYWtlIHRoZWlyIGxvdmVkIG9uZSBhcyBub2JsZSBhcyBwb3NzaWJsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBib3lzJyBsb3ZlcnMgYWxzbyBzaGFyZWQgd2l0aCB0aGVtIGluIHRoZWlyIGhvbm91ciBvciBkaXNncmFjZTsgYW5kIGl0IGlzIHNhaWQgdGhhdCBvbmUgb2YgdGhlbSB3YXMgb25jZSBmaW5lZCBieSB0aGUgbWFnaXN0cmF0ZXMgYmVjYXVzZSBoaXMgZmF2b3VyaXRlIGJveSBoYWQgbGV0IGFuIHVuZ2VuZXJvdXMgY3J5IGVzY2FwZSBoaW0gd2hpbGUgaGUgd2FzIGZpZ2h0aW5nLiBNb3Jlb3ZlciwgdGhvdWdoIHRoaXMgc29ydCBvZiBsb3ZlIHdhcyBzbyBhcHByb3ZlZCBhbW9uZyB0aGVtIHRoYXQgZXZlbiB0aGUgbWFpZGVucyBmb3VuZCBsb3ZlcnMgaW4gZ29vZCBhbmQgbm9ibGUgd29tZW4sIHN0aWxsLCB0aGVyZSB3YXMgbm8gamVhbG91cyByaXZhbHJ5IGluIGl0LCBidXQgdGhvc2Ugd2hvIGZpeGVkIHRoZWlyIGFmZmVjdGlvbnMgb24gdGhlIHNhbWUgYm95cyBtYWRlIHRoaXMgcmF0aGVyIGEgZm91bmRhdGlvbiBmb3IgZnJpZW5kc2hpcCB3aXRoIG9uZSBhbm90aGVyLCBhbmQgcGVyc2V2ZXJlZCBpbiBjb21tb24gZWZmb3J0cyB0byBtYWtlIHRoZWlyIGxvdmVkIG9uZSBhcyBub2JsZSBhcyBwb3NzaWJsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGJveXMgd2VyZSBhbHNvIHRhdWdodCB0byB1c2UgYSBkaXNjb3Vyc2Ugd2hpY2ggY29tYmluZWQgcHVuZ2VuY3kgd2l0aCBncmFjZSwgYW5kIGNvbmRlbnNlZCBtdWNoIG9ic2VydmF0aW9uIGludG8gYSBmZXcgd29yZHMuIEhpcyBpcm9uIG1vbmV5LCBpbmRlZWQsIEx5Y3VyZ3VzIG1hZGUgb2YgbGFyZ2Ugd2VpZ2h0IGFuZCBzbWFsbCB2YWx1ZSwgYXMgSSBoYXZlIG9ic2VydmVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiA5LjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgaXguIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ1dCB0aGUgY3VycmVudCBjb2luIG9mIGRpc2NvdXJzZSBoZSBhZGFwdGVkIHRvIHRoZSBleHByZXNzaW9uIG9mIGRlZXAgYW5kIGFidW5kYW50IG1lYW5pbmcgd2l0aCBzaW1wbGUgYW5kIGJyaWVmIGRpY3Rpb24sIGJ5IGNvbnRyaXZpbmcgdGhhdCB0aGUgZ2VuZXJhbCBoYWJpdCBvZiBzaWxlbmNlIHNob3VsZCBtYWtlIHRoZSBib3lzIHNlbnRlbnRpb3VzIGFuZCBjb3JyZWN0IGluIHRoZWlyIGFuc3dlcnMuIEZvciBhcyBzZXh1YWwgaW5jb250aW5lbmNlIGdlbmVyYWxseSBwcm9kdWNlcyB1bmZydWl0ZnVsbmVzcyBhbmQgc3RlcmlsaXR5LCBzbyBpbnRlbXBlcmFuY2UgaW4gdGFsa2luZyBtYWtlcyBkaXNjb3Vyc2UgZW1wdHkgYW5kIHZhcGlkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5LaW5nIEFnaXMsIGFjY29yZGluZ2x5LCB3aGVuIGEgY2VydGFpbiBBdGhlbmlhbiBkZWNyaWVkIHRoZSBTcGFydGFuIHN3b3JkcyBmb3IgYmVpbmcgc28gc2hvcnQsIGFuZCBzYWlkIHRoYXQganVnZ2xlcnMgb24gdGhlIHN0YWdlIGVhc2lseSBzd2FsbG93ZWQgdGhlbSwgcmVwbGllZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgeWV0IHdlIGNlcnRhaW5seSByZWFjaCBvdXIgZW5lbWllcyB3aXRoIHRoZXNlIGRhZ2dlcnMuPC9xPiBBbmQgSSBvYnNlcnZlIHRoYXQgYWx0aG91Z2ggdGhlIHNwZWVjaCBhbHNvIG9mIHRoZSBTcGFydGFucyBzZWVtcyBzaG9ydCwgeWV0IGl0IGNlcnRhaW5seSByZWFjaGVzIHRoZSBwb2ludCwgYW5kIGFycmVzdHMgdGhlIHRob3VnaHQgb2YgdGhlIGxpc3RlbmVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGJveXMgd2VyZSBhbHNvIHRhdWdodCB0byB1c2UgYSBkaXNjb3Vyc2Ugd2hpY2ggY29tYmluZWQgcHVuZ2VuY3kgd2l0aCBncmFjZSwgYW5kIGNvbmRlbnNlZCBtdWNoIG9ic2VydmF0aW9uIGludG8gYSBmZXcgd29yZHMuIEhpcyBpcm9uIG1vbmV5LCBpbmRlZWQsIEx5Y3VyZ3VzIG1hZGUgb2YgbGFyZ2Ugd2VpZ2h0IGFuZCBzbWFsbCB2YWx1ZSwgYXMgSSBoYXZlIG9ic2VydmVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gOS4xIiB2YWxpZD0ieWVzIj5DaGFwdGVyIGl4LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBidXQgdGhlIGN1cnJlbnQgY29pbiBvZiBkaXNjb3Vyc2UgaGUgYWRhcHRlZCB0byB0aGUgZXhwcmVzc2lvbiBvZiBkZWVwIGFuZCBhYnVuZGFudCBtZWFuaW5nIHdpdGggc2ltcGxlIGFuZCBicmllZiBkaWN0aW9uLCBieSBjb250cml2aW5nIHRoYXQgdGhlIGdlbmVyYWwgaGFiaXQgb2Ygc2lsZW5jZSBzaG91bGQgbWFrZSB0aGUgYm95cyBzZW50ZW50aW91cyBhbmQgY29ycmVjdCBpbiB0aGVpciBhbnN3ZXJzLiBGb3IgYXMgc2V4dWFsIGluY29udGluZW5jZSBnZW5lcmFsbHkgcHJvZHVjZXMgdW5mcnVpdGZ1bG5lc3MgYW5kIHN0ZXJpbGl0eSwgc28gaW50ZW1wZXJhbmNlIGluIHRhbGtpbmcgbWFrZXMgZGlzY291cnNlIGVtcHR5IGFuZCB2YXBpZC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDkuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciBpeC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPktpbmcgQWdpcywgYWNjb3JkaW5nbHksIHdoZW4gYSBjZXJ0YWluIEF0aGVuaWFuIGRlY3JpZWQgdGhlIFNwYXJ0YW4gc3dvcmRzIGZvciBiZWluZyBzbyBzaG9ydCwgYW5kIHNhaWQgdGhhdCBqdWdnbGVycyBvbiB0aGUgc3RhZ2UgZWFzaWx5IHN3YWxsb3dlZCB0aGVtLCByZXBsaWVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHlldCB3ZSBjZXJ0YWlubHkgcmVhY2ggb3VyIGVuZW1pZXMgd2l0aCB0aGVzZSBkYWdnZXJzLjwvcT4gQW5kIEkgb2JzZXJ2ZSB0aGF0IGFsdGhvdWdoIHRoZSBzcGVlY2ggYWxzbyBvZiB0aGUgU3BhcnRhbnMgc2VlbXMgc2hvcnQsIHlldCBpdCBjZXJ0YWlubHkgcmVhY2hlcyB0aGUgcG9pbnQsIGFuZCBhcnJlc3RzIHRoZSB0aG91Z2h0IG9mIHRoZSBsaXN0ZW5lci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluZGVlZCBMeWN1cmd1cyBoaW1zZWxmIHNlZW1zIHRvIGhhdmUgYmVlbiBzaG9ydCBhbmQgc2VudGVudGlvdXMgaW4gaGlzIHNwZWVjaCwgaWYgd2UgbWF5IGp1ZGdlIGZyb20gaGlzIHJlY29yZGVkIHNheWluZ3M7IHRoYXQsIGZvciBpbnN0YW5jZSwgb24gZm9ybXMgb2YgZ292ZXJubWVudCwgdG8gb25lIHdobyBkZW1hbmRlZCB0aGUgZXN0YWJsaXNobWVudCBvZiBkZW1vY3JhY3kgaW4gdGhlIGNpdHk6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+R28gdGhvdSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW5kIGZpcnN0IGVzdGFibGlzaCBkZW1vY3JhY3kgaW4gdGh5IGhvdXNlaG9sZC48L3E+IFRoYXQsIGFnYWluLCB0byBvbmUgd2hvIGlucXVpcmVkIHdoeSBoZSBvcmRhaW5lZCBzdWNoIHNtYWxsIGFuZCBpbmV4cGVuc2l2ZSBzYWNyaWZpY2VzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQgd2UgbWF5IG5ldmVyIG9taXQsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRvIGhvbm91ciB0aGUgZ29kcy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIGluIHRoZSBtYXR0ZXIgb2YgYXRobGV0aWMgY29udGVzdHMsIGhlIGFsbG93ZWQgdGhlIGNpdGl6ZW5zIHRvIGVuZ2FnZSBvbmx5IGluIHRob3NlIHdoZXJlIHRoZXJlIHdhcyBubyBzdHJldGNoaW5nIGZvcnRoIG9mIGhhbmRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFmdGVyIHRoZSBtYW5uZXIgb2YgbWVuIGJlZ2dpbmcgdGhlaXIgY29ucXVlcm9ycyB0byBzcGFyZSB0aGVpciBsaXZlcy48L25vdGU+IFRoZXJlIGFyZSBhbHNvIGhhbmRlZCBkb3duIHNpbWlsYXIgYW5zd2VycyB3aGljaCBoZSBtYWRlIGJ5IGxldHRlciB0byBoaXMgZmVsbG93LWNpdGl6ZW5zLiBXaGVuIHRoZXkgYXNrZWQgaG93IHRoZXkgY291bGQgd2FyZCBvZmYgYW4gaW52YXNpb24gb2YgZW5lbWllcywgaGUgYW5zd2VyZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnkgcmVtYWluaW5nIHBvb3IsIGFuZCBieSBub3QgZGVzaXJpbmcgdG8gYmUgZ3JlYXRlciB0aGUgb25lIHRoYW4gdGhlIG90aGVyLjwvcT4gQW5kIHdoZW4gdGhleSBhc2tlZCBhYm91dCBmb3J0aWZ5aW5nIHRoZWlyIGNpdHksIGhlIGFuc3dlcmVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgY2l0eSB3aWxsIGJlIHdlbGwgZm9ydGlmaWVkIHdoaWNoIGlzIHN1cnJvdW5kZWQgYnkgYnJhdmUgbWVuIGFuZCBub3QgYnkgYnJpY2tzLjwvcT4gTm93IHJlZ2FyZGluZyB0aGVzZSBhbmQgc2ltaWxhciBsZXR0ZXJzLCBiZWxpZWYgYW5kIHNjZXB0aWNpc20gYXJlIGFsaWtlIGRpZmZpY3VsdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgTHljdXJndXMgaGltc2VsZiBzZWVtcyB0byBoYXZlIGJlZW4gc2hvcnQgYW5kIHNlbnRlbnRpb3VzIGluIGhpcyBzcGVlY2gsIGlmIHdlIG1heSBqdWRnZSBmcm9tIGhpcyByZWNvcmRlZCBzYXlpbmdzOyB0aGF0LCBmb3IgaW5zdGFuY2UsIG9uIGZvcm1zIG9mIGdvdmVybm1lbnQsIHRvIG9uZSB3aG8gZGVtYW5kZWQgdGhlIGVzdGFibGlzaG1lbnQgb2YgZGVtb2NyYWN5IGluIHRoZSBjaXR5OiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+R28gdGhvdSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hbmQgZmlyc3QgZXN0YWJsaXNoIGRlbW9jcmFjeSBpbiB0aHkgaG91c2Vob2xkLjwvcT4gVGhhdCwgYWdhaW4sIHRvIG9uZSB3aG8gaW5xdWlyZWQgd2h5IGhlIG9yZGFpbmVkIHN1Y2ggc21hbGwgYW5kIGluZXhwZW5zaXZlIHNhY3JpZmljZXM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGF0IHdlIG1heSBuZXZlciBvbWl0LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRvIGhvbm91ciB0aGUgZ29kcy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBpbiB0aGUgbWF0dGVyIG9mIGF0aGxldGljIGNvbnRlc3RzLCBoZSBhbGxvd2VkIHRoZSBjaXRpemVucyB0byBlbmdhZ2Ugb25seSBpbiB0aG9zZSB3aGVyZSB0aGVyZSB3YXMgbm8gc3RyZXRjaGluZyBmb3J0aCBvZiBoYW5kcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFmdGVyIHRoZSBtYW5uZXIgb2YgbWVuIGJlZ2dpbmcgdGhlaXIgY29ucXVlcm9ycyB0byBzcGFyZSB0aGVpciBsaXZlcy48L25vdGU+IFRoZXJlIGFyZSBhbHNvIGhhbmRlZCBkb3duIHNpbWlsYXIgYW5zd2VycyB3aGljaCBoZSBtYWRlIGJ5IGxldHRlciB0byBoaXMgZmVsbG93LWNpdGl6ZW5zLiBXaGVuIHRoZXkgYXNrZWQgaG93IHRoZXkgY291bGQgd2FyZCBvZmYgYW4gaW52YXNpb24gb2YgZW5lbWllcywgaGUgYW5zd2VyZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CeSByZW1haW5pbmcgcG9vciwgYW5kIGJ5IG5vdCBkZXNpcmluZyB0byBiZSBncmVhdGVyIHRoZSBvbmUgdGhhbiB0aGUgb3RoZXIuPC9xPiBBbmQgd2hlbiB0aGV5IGFza2VkIGFib3V0IGZvcnRpZnlpbmcgdGhlaXIgY2l0eSwgaGUgYW5zd2VyZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BIGNpdHkgd2lsbCBiZSB3ZWxsIGZvcnRpZmllZCB3aGljaCBpcyBzdXJyb3VuZGVkIGJ5IGJyYXZlIG1lbiBhbmQgbm90IGJ5IGJyaWNrcy48L3E+IE5vdyByZWdhcmRpbmcgdGhlc2UgYW5kIHNpbWlsYXIgbGV0dGVycywgYmVsaWVmIGFuZCBzY2VwdGljaXNtIGFyZSBhbGlrZSBkaWZmaWN1bHQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZWlyIGF2ZXJzaW9uIHRvIGxvbmcgc3BlZWNoZXMsIHRoZSBmb2xsb3dpbmcgYXBvcGh0aGVnbXMgYXJlIHByb29mLiBLaW5nIExlb25pZGFzLCB3aGVuIGEgY2VydGFpbiBvbmUgZGlzY291cnNlZCB3aXRoIGhpbSBvdXQgb2YgYWxsIHNlYXNvbiBvbiBtYXR0ZXJzIG9mIGdyZWF0IGNvbmNlcm4sIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgZnJpZW5kLCB0aGUgbWF0dGVyIHVyZ2VzLCBidXQgbm90IHRoZSB0aW1lLjwvcT4gQ2hhcmlsYcO8cywgdGhlIG5lcGhldyBvZiBMeWN1cmd1cywgd2hlbiBhc2tlZCB3aHkgaGlzIHVuY2xlIGhhZCBtYWRlIHNvIGZldyBsYXdzLCBhbnN3ZXJlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NZW4gb2YgZmV3IHdvcmRzIG5lZWQgZmV3IGxhd3MuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFyY2hpZGFtaWRhcywgd2hlbiBjZXJ0YWluIG9uZXMgZm91bmQgZmF1bHQgd2l0aCBIZWNhdGFldXMgdGhlIFNvcGhpc3QgZm9yIHNheWluZyBub3RoaW5nIGFmdGVyIGJlaW5nIGFkbWl0dGVkIHRvIHRoZWlyIHB1YmxpYyBtZXNzLCBhbnN3ZXJlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZSB3aG8ga25vd3MgaG93LCBrbm93cyBhbHNvIHdoZW4gdG8gc3BlYWsuPC9xPiBJbnN0YW5jZXMgb2YgdGhlIHB1bmdlbnQgc2F5aW5ncyBub3QgZGV2b2lkIG9mIGdyYWNlLCBvZiB3aGljaCBJIHNwb2tlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxOS4xIiB2YWxpZD0ieWVzIj5DaGFwdGVyIHhpeC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYXJlIHRoZSBmb2xsb3dpbmcuIERlbWFyYXR1cywgd2hlbiBhIHRyb3VibGVzb21lIGZlbGxvdyB3YXMgcGVzdGVyaW5nIGhpbSB3aXRoIGlsbC10aW1lZCBxdWVzdGlvbnMsIGFuZCBlc3BlY2lhbGx5IHdpdGggdGhlIG9mdCByZXBlYXRlZCBxdWVyeSB3aG8gd2FzIHRoZSBiZXN0IG9mIHRoZSBTcGFydGFucywgYW5zd2VyZWQgYXQgbGFzdDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZSB3aG8gaXMgbGVhc3QgbGlrZSB0aGVlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgQWdpcywgd2hlbiBjZXJ0YWluIG9uZXMgd2VyZSBwcmFpc2luZyB0aGUgRWxlaWFucyBmb3IgdGhlaXIganVzdCBhbmQgaG9ub3VyYWJsZSBjb25kdWN0IG9mIHRoZSBPbHltcGljIGdhbWVzLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB3aGF0IGdyZWF0IG1hdHRlciBpcyBpdCBmb3IgdGhlIEVsZWlhbnMgdG8gcHJhY3Rpc2UgcmlnaHRlb3VzbmVzcyBvbmUgZGF5IGluIGZpdmUgeWVhcnM/PC9xPiBBbmQgVGhlb3BvbXB1cywgd2hlbiBhIHN0cmFuZ2VyIGtlcHQgc2F5aW5nLCBhcyBoZSBzaG93ZWQgaGltIGtpbmRuZXNzLCB0aGF0IGluIGhpcyBvd24gY2l0eSBoZSB3YXMgY2FsbGVkIGEgbG92ZXIgb2YgU3BhcnRhLCByZW1hcmtlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBnb29kIFNpciwgaXQgd2VyZSBiZXR0ZXIgZm9yIHRoZWUgdG8gYmUgY2FsbGVkIGEgbG92ZXIgb2YgdGhpbmUgb3duIGNpdHkuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQbGVpc3RvYW5heCwgdGhlIHNvbiBvZiBQYXVzYW5pYXMsIHdoZW4gYW4gQXRoZW5pYW4gb3JhdG9yIGRlY2xhcmVkIHRoYXQgdGhlIExhY2VkYWVtb25pYW5zIGhhZCBubyBsZWFybmluZywgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UcnVlLCB3ZSBhcmUgaW5kZWVkIHRoZSBvbmx5IEhlbGxlbmVzIHdobyBoYXZlIGxlYXJuZWQgbm8gZXZpbCBmcm9tIHlvdS48L3E+IEFuZCBBcmNoaWRhbXVzLCB3aGVuIHNvbWUgb25lIGFza2VkIGhpbSBob3cgbWFueSBTcGFydGFucyB0aGVyZSB3ZXJlLCByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkVub3VnaCwgZ29vZCBTaXIsIHRvIGtlZXAgZXZpbCBtZW4gYXdheS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2YgdGhlaXIgYXZlcnNpb24gdG8gbG9uZyBzcGVlY2hlcywgdGhlIGZvbGxvd2luZyBhcG9waHRoZWdtcyBhcmUgcHJvb2YuIEtpbmcgTGVvbmlkYXMsIHdoZW4gYSBjZXJ0YWluIG9uZSBkaXNjb3Vyc2VkIHdpdGggaGltIG91dCBvZiBhbGwgc2Vhc29uIG9uIG1hdHRlcnMgb2YgZ3JlYXQgY29uY2Vybiwgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IGZyaWVuZCwgdGhlIG1hdHRlciB1cmdlcywgYnV0IG5vdCB0aGUgdGltZS48L3E+IENoYXJpbGHDvHMsIHRoZSBuZXBoZXcgb2YgTHljdXJndXMsIHdoZW4gYXNrZWQgd2h5IGhpcyB1bmNsZSBoYWQgbWFkZSBzbyBmZXcgbGF3cywgYW5zd2VyZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NZW4gb2YgZmV3IHdvcmRzIG5lZWQgZmV3IGxhd3MuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFyY2hpZGFtaWRhcywgd2hlbiBjZXJ0YWluIG9uZXMgZm91bmQgZmF1bHQgd2l0aCBIZWNhdGFldXMgdGhlIFNvcGhpc3QgZm9yIHNheWluZyBub3RoaW5nIGFmdGVyIGJlaW5nIGFkbWl0dGVkIHRvIHRoZWlyIHB1YmxpYyBtZXNzLCBhbnN3ZXJlZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlIHdobyBrbm93cyBob3csIGtub3dzIGFsc28gd2hlbiB0byBzcGVhay48L3E+IEluc3RhbmNlcyBvZiB0aGUgcHVuZ2VudCBzYXlpbmdzIG5vdCBkZXZvaWQgb2YgZ3JhY2UsIG9mIHdoaWNoIEkgc3Bva2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxOS4xIiB2YWxpZD0ieWVzIj5DaGFwdGVyIHhpeC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYXJlIHRoZSBmb2xsb3dpbmcuIERlbWFyYXR1cywgd2hlbiBhIHRyb3VibGVzb21lIGZlbGxvdyB3YXMgcGVzdGVyaW5nIGhpbSB3aXRoIGlsbC10aW1lZCBxdWVzdGlvbnMsIGFuZCBlc3BlY2lhbGx5IHdpdGggdGhlIG9mdCByZXBlYXRlZCBxdWVyeSB3aG8gd2FzIHRoZSBiZXN0IG9mIHRoZSBTcGFydGFucywgYW5zd2VyZWQgYXQgbGFzdDogCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE5LjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeGl4LiAxLjwvYmlibD4KICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZSB3aG8gaXMgbGVhc3QgbGlrZSB0aGVlLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBBZ2lzLCB3aGVuIGNlcnRhaW4gb25lcyB3ZXJlIHByYWlzaW5nIHRoZSBFbGVpYW5zIGZvciB0aGVpciBqdXN0IGFuZCBob25vdXJhYmxlIGNvbmR1Y3Qgb2YgdGhlIE9seW1waWMgZ2FtZXMsIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgd2hhdCBncmVhdCBtYXR0ZXIgaXMgaXQgZm9yIHRoZSBFbGVpYW5zIHRvIHByYWN0aXNlIHJpZ2h0ZW91c25lc3Mgb25lIGRheSBpbiBmaXZlIHllYXJzPzwvcT4gQW5kIFRoZW9wb21wdXMsIHdoZW4gYSBzdHJhbmdlciBrZXB0IHNheWluZywgYXMgaGUgc2hvd2VkIGhpbSBraW5kbmVzcywgdGhhdCBpbiBoaXMgb3duIGNpdHkgaGUgd2FzIGNhbGxlZCBhIGxvdmVyIG9mIFNwYXJ0YSwgcmVtYXJrZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBnb29kIFNpciwgaXQgd2VyZSBiZXR0ZXIgZm9yIHRoZWUgdG8gYmUgY2FsbGVkIGEgbG92ZXIgb2YgdGhpbmUgb3duIGNpdHkuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQbGVpc3RvYW5heCwgdGhlIHNvbiBvZiBQYXVzYW5pYXMsIHdoZW4gYW4gQXRoZW5pYW4gb3JhdG9yIGRlY2xhcmVkIHRoYXQgdGhlIExhY2VkYWVtb25pYW5zIGhhZCBubyBsZWFybmluZywgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRydWUsIHdlIGFyZSBpbmRlZWQgdGhlIG9ubHkgSGVsbGVuZXMgd2hvIGhhdmUgbGVhcm5lZCBubyBldmlsIGZyb20geW91LjwvcT4gQW5kIEFyY2hpZGFtdXMsIHdoZW4gc29tZSBvbmUgYXNrZWQgaGltIGhvdyBtYW55IFNwYXJ0YW5zIHRoZXJlIHdlcmUsIHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Fbm91Z2gsIGdvb2QgU2lyLCB0byBrZWVwIGV2aWwgbWVuIGF3YXkuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZXZlbiBmcm9tIHRoZWlyIGplc3RzIGl0IGlzIHBvc3NpYmxlIHRvIGp1ZGdlIG9mIHRoZWlyIGNoYXJhY3Rlci4gRm9yIGl0IHdhcyB0aGVpciB3b250IG5ldmVyIHRvIHRhbGsgYXQgcmFuZG9tLCBhbmQgdG8gSmV0IHNsaXAgbm8gc3BlZWNoIHdoaWNoIGRpZCBub3QgaGF2ZSBzb21lIHRob3VnaHQgb3Igb3RoZXIgd29ydGggc2VyaW91cyBhdHRlbnRpb24uIEZvciBpbnN0YW5jZSwgd2hlbiBvbmUgb2YgdGhlbSB3YXMgaW52aXRlZCB0byBoZWFyIGEgbWFuIGltaXRhdGUgdGhlIG5pZ2h0aW5nYWxlLCBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgaGF2ZSBoZWFyZCB0aGUgYmlyZCBoZXJzZWxmLjwvcT4gQW5kIGFub3RoZXIsIG9uIHJlYWRpbmcgdGhlIGVwaXRhcGg64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPlR5cmFubnkncyBmaXJlcyB0aGV5IHdlcmUgdHJ5aW5nIHRvIHF1ZW5jaCB3aGVuIHBhbm9wbGllZCBBcmVzPC9sPgoJCQkJCSAgICAgICAgICA8bD5TbGV3IHRoZW07IFNlbGludXMgbG9va2VkIGRvd24gZnJvbSBoZXIgZ2F0ZXMgb24gdGhlaXIgZGVhdGgsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPnNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIG1lbiBkZXNlcnZlZCB0byBkaWU7IHRoZXkgc2hvdWxkIGhhdmUgbGV0IHRoZSBmaXJlcyBidXJuIG91dCBlbnRpcmVseS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGEgeW91dGgsIHdoZW4gc29tZSBvbmUgcHJvbWlzZWQgdG8gZ2l2ZSBoaW0gZ2FtZS1jb2NrcyB0aGF0IHdvdWxkIGRpZSBmaWdodGluZywgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Eb24ndCBkbyB0aGF0LCBidXQgZ2l2ZSBtZSBzb21lIG9mIHRoZSBraW5kIHRoYXQga2lsbCBmaWdodGluZy48L3E+IEFub3RoZXIsIHNlZWluZyBtZW4gc2VhdGVkIG9uIHN0b29scyBpbiBhIHByaXZ5LCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1heSBJIG5ldmVyIHNpdCB3aGVyZSBJIGNhbm5vdCBnaXZlIHBsYWNlIHRvIGFuIGVsZGVyLjwvcT4gVGhlIGNoYXJhY3RlciBvZiB0aGVpciBhcG9waHRoZWdtcywgdGhlbiwgd2FzIHN1Y2ggYXMgdG8ganVzdGlmeSB0aGUgcmVtYXJrIHRoYXQgbG92ZSBvZiB3aXNkb20gcmF0aGVyIHRoYW4gbG92ZSBvZiBib2RpbHkgZXhlcmNpc2Ugd2FzIHRoZSBzcGVjaWFsIGNoYXJhY3RlcmlzdGljIG9mIGEgU3BhcnRhbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBldmVuIGZyb20gdGhlaXIgamVzdHMgaXQgaXMgcG9zc2libGUgdG8ganVkZ2Ugb2YgdGhlaXIgY2hhcmFjdGVyLiBGb3IgaXQgd2FzIHRoZWlyIHdvbnQgbmV2ZXIgdG8gdGFsayBhdCByYW5kb20sIGFuZCB0byBKZXQgc2xpcCBubyBzcGVlY2ggd2hpY2ggZGlkIG5vdCBoYXZlIHNvbWUgdGhvdWdodCBvciBvdGhlciB3b3J0aCBzZXJpb3VzIGF0dGVudGlvbi4gRm9yIGluc3RhbmNlLCB3aGVuIG9uZSBvZiB0aGVtIHdhcyBpbnZpdGVkIHRvIGhlYXIgYSBtYW4gaW1pdGF0ZSB0aGUgbmlnaHRpbmdhbGUsIGhlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGhhdmUgaGVhcmQgdGhlIGJpcmQgaGVyc2VsZi48L3E+IEFuZCBhbm90aGVyLCBvbiByZWFkaW5nIHRoZSBlcGl0YXBoOuKAlAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHlyYW5ueSdzIGZpcmVzIHRoZXkgd2VyZSB0cnlpbmcgdG8gcXVlbmNoIHdoZW4gcGFub3BsaWVkIEFyZXM8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2xldyB0aGVtOyBTZWxpbnVzIGxvb2tlZCBkb3duIGZyb20gaGVyIGdhdGVzIG9uIHRoZWlyIGRlYXRoLDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT5zYWlkOiAKCQkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHlyYW5ueSdzIGZpcmVzIHRoZXkgd2VyZSB0cnlpbmcgdG8gcXVlbmNoIHdoZW4gcGFub3BsaWVkIEFyZXM8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2xldyB0aGVtOyBTZWxpbnVzIGxvb2tlZCBkb3duIGZyb20gaGVyIGdhdGVzIG9uIHRoZWlyIGRlYXRoLDwvbD4KCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgbWVuIGRlc2VydmVkIHRvIGRpZTsgdGhleSBzaG91bGQgaGF2ZSBsZXQgdGhlIGZpcmVzIGJ1cm4gb3V0IGVudGlyZWx5LjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhIHlvdXRoLCB3aGVuIHNvbWUgb25lIHByb21pc2VkIHRvIGdpdmUgaGltIGdhbWUtY29ja3MgdGhhdCB3b3VsZCBkaWUgZmlnaHRpbmcsIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Eb24ndCBkbyB0aGF0LCBidXQgZ2l2ZSBtZSBzb21lIG9mIHRoZSBraW5kIHRoYXQga2lsbCBmaWdodGluZy48L3E+IEFub3RoZXIsIHNlZWluZyBtZW4gc2VhdGVkIG9uIHN0b29scyBpbiBhIHByaXZ5LCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWF5IEkgbmV2ZXIgc2l0IHdoZXJlIEkgY2Fubm90IGdpdmUgcGxhY2UgdG8gYW4gZWxkZXIuPC9xPiBUaGUgY2hhcmFjdGVyIG9mIHRoZWlyIGFwb3BodGhlZ21zLCB0aGVuLCB3YXMgc3VjaCBhcyB0byBqdXN0aWZ5IHRoZSByZW1hcmsgdGhhdCBsb3ZlIG9mIHdpc2RvbSByYXRoZXIgdGhhbiBsb3ZlIG9mIGJvZGlseSBleGVyY2lzZSB3YXMgdGhlIHNwZWNpYWwgY2hhcmFjdGVyaXN0aWMgb2YgYSBTcGFydGFuLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3Igd2FzIHRoZWlyIHRyYWluaW5nIGluIG11c2ljIGFuZCBwb2V0cnkgYW55IGxlc3Mgc2VyaW91cyBhIGNvbmNlcm4gdGhhbiB0aGUgZW11bG91cyBwdXJpdHkgb2YgdGhlaXIgc3BlZWNoLCBuYXksIHRoZWlyIHZlcnkgc29uZ3MgaGFkIGEgc3RpbXVsdXMgdGhhdCByb3VzZWQgdGhlIHNwaXJpdCBhbmQgYXdva2UgZW50aHVzaWFzdGljIGFuZCBlZmZlY3R1YWwgZWZmb3J0OyB0aGUgc3R5bGUgb2YgdGhlbSB3YXMgc2ltcGxlIGFuZCB1bmFmZmVjdGVkLCBhbmQgdGhlaXIgdGhlbWVzIHdlcmUgc2VyaW91cyBhbmQgZWRpZnlpbmcuIFRoZXkgd2VyZSBmb3IgdGhlIG1vc3QgcGFydCBwcmFpc2VzIG9mIG1lbiB3aG8gaGFkIGRpZWQgZm9yIFNwYXJ0YSwgY2FsbGluZyB0aGVtIGJsZXNzZWQgYW5kIGhhcHB5OyBjZW5zdXJlIG9mIG1lbiB3aG8gaGFkIHBsYXllZCB0aGUgY293YXJkLCBwaWN0dXJpbmcgdGhlaXIgZ3JpZXZvdXMgYW5kIGlsbC1zdGFycmVkIGxpZmU7IGFuZCBzdWNoIHByb21pc2VzIGFuZCBib2FzdHMgb2YgdmFsb3VyIGFzIGJlZml0dGVkIHRoZSBkaWZmZXJlbnQgYWdlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T2YgdGhlIGxhc3QsIGl0IG1heSBub3QgYmUgYW1pc3MgdG8gY2l0ZSBvbmUsIGJ5IHdheSBvZiBpbGx1c3RyYXRpb24uIFRoZXkgaGFkIHRocmVlIGNob2lycyBhdCB0aGVpciBmZXN0aXZhbHMsIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHRocmVlIGFnZXMsIGFuZCB0aGUgY2hvaXIgb2Ygb2xkIG1lbiB3b3VsZCBzaW5nIGZpcnN0OuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5XZSBvbmNlIGRpZCBkZWVkcyBvZiBwcm93ZXNzIGFuZCB3ZXJlIHN0cm9uZyB5b3VuZyBtZW4uPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPlRoZW4gdGhlIGNob2lyIG9mIHlvdW5nIG1lbiB3b3VsZCByZXNwb25kOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5XZSBhcmUgc28gbm93LCBhbmQgaWYgeW91IHdpc2gsIGJlaG9sZCBhbmQgc2VlLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT5BbmQgdGhlbiB0aGUgdGhpcmQgY2hvaXIsIHRoYXQgb2YgdGhlIGJveXMsIHdvdWxkIHNpbmc64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPldlIHNoYWxsIGJlIHNvbWV0aW1lIG1pZ2h0aWVyIG1lbiBieSBmYXIgdGhhbiBib3RoLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm9yIHdhcyB0aGVpciB0cmFpbmluZyBpbiBtdXNpYyBhbmQgcG9ldHJ5IGFueSBsZXNzIHNlcmlvdXMgYSBjb25jZXJuIHRoYW4gdGhlIGVtdWxvdXMgcHVyaXR5IG9mIHRoZWlyIHNwZWVjaCwgbmF5LCB0aGVpciB2ZXJ5IHNvbmdzIGhhZCBhIHN0aW11bHVzIHRoYXQgcm91c2VkIHRoZSBzcGlyaXQgYW5kIGF3b2tlIGVudGh1c2lhc3RpYyBhbmQgZWZmZWN0dWFsIGVmZm9ydDsgdGhlIHN0eWxlIG9mIHRoZW0gd2FzIHNpbXBsZSBhbmQgdW5hZmZlY3RlZCwgYW5kIHRoZWlyIHRoZW1lcyB3ZXJlIHNlcmlvdXMgYW5kIGVkaWZ5aW5nLiBUaGV5IHdlcmUgZm9yIHRoZSBtb3N0IHBhcnQgcHJhaXNlcyBvZiBtZW4gd2hvIGhhZCBkaWVkIGZvciBTcGFydGEsIGNhbGxpbmcgdGhlbSBibGVzc2VkIGFuZCBoYXBweTsgY2Vuc3VyZSBvZiBtZW4gd2hvIGhhZCBwbGF5ZWQgdGhlIGNvd2FyZCwgcGljdHVyaW5nIHRoZWlyIGdyaWV2b3VzIGFuZCBpbGwtc3RhcnJlZCBsaWZlOyBhbmQgc3VjaCBwcm9taXNlcyBhbmQgYm9hc3RzIG9mIHZhbG91ciBhcyBiZWZpdHRlZCB0aGUgZGlmZmVyZW50IGFnZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZSBsYXN0LCBpdCBtYXkgbm90IGJlIGFtaXNzIHRvIGNpdGUgb25lLCBieSB3YXkgb2YgaWxsdXN0cmF0aW9uLiBUaGV5IGhhZCB0aHJlZSBjaG9pcnMgYXQgdGhlaXIgZmVzdGl2YWxzLCBjb3JyZXNwb25kaW5nIHRvIHRoZSB0aHJlZSBhZ2VzLCBhbmQgdGhlIGNob2lyIG9mIG9sZCBtZW4gd291bGQgc2luZyBmaXJzdDrigJQKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPldlIG9uY2UgZGlkIGRlZWRzIG9mIHByb3dlc3MgYW5kIHdlcmUgc3Ryb25nIHlvdW5nIG1lbi48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+VGhlbiB0aGUgY2hvaXIgb2YgeW91bmcgbWVuIHdvdWxkIHJlc3BvbmQ64oCUCgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPldlIG9uY2UgZGlkIGRlZWRzIG9mIHByb3dlc3MgYW5kIHdlcmUgc3Ryb25nIHlvdW5nIG1lbi48L2w+CgkJCQkgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPldlIGFyZSBzbyBub3csIGFuZCBpZiB5b3Ugd2lzaCwgYmVob2xkIGFuZCBzZWUuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPkFuZCB0aGVuIHRoZSB0aGlyZCBjaG9pciwgdGhhdCBvZiB0aGUgYm95cywgd291bGQgc2luZzrigJQKCQkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2UgYXJlIHNvIG5vdywgYW5kIGlmIHlvdSB3aXNoLCBiZWhvbGQgYW5kIHNlZS48L2w+CgkJCQkgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPldlIHNoYWxsIGJlIHNvbWV0aW1lIG1pZ2h0aWVyIG1lbiBieSBmYXIgdGhhbiBib3RoLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5XZSBzaGFsbCBiZSBzb21ldGltZSBtaWdodGllciBtZW4gYnkgZmFyIHRoYW4gYm90aC48L2w+CgkJCQkgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHNob3J0LCBpZiBvbmUgc3R1ZGllcyB0aGUgcG9ldHJ5IG9mIFNwYXJ0YSwgb2Ygd2hpY2ggc29tZSBzcGVjaW1lbnMgd2VyZSBzdGlsbCBleHRhbnQgaW4gbXkgdGltZSwgYW5kIG1ha2VzIGhpbXNlbGYgZmFtaWxpYXIgd2l0aCB0aGUgbWFyY2hpbmcgc29uZ3Mgd2hpY2ggdGhleSB1c2VkLCB0byB0aGUgYWNjb21wYW5pbWVudCBvZiB0aGUgZmx1dGUsIHdoZW4gY2hhcmdpbmcgdXBvbiB0aGVpciBmb2VzLCBoZSB3aWxsIGNvbmNsdWRlIHRoYXQgVGVycGFuZGVyIGFuZCBQaW5kYXIgd2VyZSByaWdodCBpbiBhc3NvY2lhdGluZyB2YWxvdXIgd2l0aCBtdXNpYy4gVGhlIGZvcm1lciB3cml0ZXMgdGh1cyBvZiB0aGUgTGFjZWRhZW1vbmlhbnM64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkZsb3VyaXNoIHRoZXJlIGJvdGggdGhlIHNwZWFyIG9mIHRoZSBicmF2ZSBhbmQgdGhlIE11c2UncyBjbGVhciBtZXNzYWdlLDwvbD4KCQkJCQkgICAgICAgICAgPGw+SnVzdGljZSwgdG9vLCB3YWxrcyB0aGUgYnJvYWQgc3RyZWV0c+KAlC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHNob3J0LCBpZiBvbmUgc3R1ZGllcyB0aGUgcG9ldHJ5IG9mIFNwYXJ0YSwgb2Ygd2hpY2ggc29tZSBzcGVjaW1lbnMgd2VyZSBzdGlsbCBleHRhbnQgaW4gbXkgdGltZSwgYW5kIG1ha2VzIGhpbXNlbGYgZmFtaWxpYXIgd2l0aCB0aGUgbWFyY2hpbmcgc29uZ3Mgd2hpY2ggdGhleSB1c2VkLCB0byB0aGUgYWNjb21wYW5pbWVudCBvZiB0aGUgZmx1dGUsIHdoZW4gY2hhcmdpbmcgdXBvbiB0aGVpciBmb2VzLCBoZSB3aWxsIGNvbmNsdWRlIHRoYXQgVGVycGFuZGVyIGFuZCBQaW5kYXIgd2VyZSByaWdodCBpbiBhc3NvY2lhdGluZyB2YWxvdXIgd2l0aCBtdXNpYy4gVGhlIGZvcm1lciB3cml0ZXMgdGh1cyBvZiB0aGUgTGFjZWRhZW1vbmlhbnM64oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5GbG91cmlzaCB0aGVyZSBib3RoIHRoZSBzcGVhciBvZiB0aGUgYnJhdmUgYW5kIHRoZSBNdXNlJ3MgY2xlYXIgbWVzc2FnZSw8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SnVzdGljZSwgdG9vLCB3YWxrcyB0aGUgYnJvYWQgc3RyZWV0c+KAlC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCSAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmxvdXJpc2ggdGhlcmUgYm90aCB0aGUgc3BlYXIgb2YgdGhlIGJyYXZlIGFuZCB0aGUgTXVzZSdzIGNsZWFyIG1lc3NhZ2UsPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkp1c3RpY2UsIHRvbywgd2Fsa3MgdGhlIGJyb2FkIHN0cmVldHPigJQuPC9sPgoJCQkJICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgUGluZGFyIHNheXM64oCUPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgMTk5LCBCZXJnaywgUG9ldC4gTHlyLiBHci4gaS40IHAuIDQ0OC48L25vdGU+CgkJCQkgICAgICAgIDxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+VGhlcmUgYXJlIGNvdW5jaWxzIG9mIEVsZGVycyw8L2w+CgkJCQkJICAgICAgICAgIDxsPkFuZCB5b3VuZyBtZW4ncyBjb25xdWVyaW5nIHNwZWFycyw8L2w+CgkJCQkJICAgICAgICAgIDxsPkFuZCBkYW5jZXMsIHRoZSBNdXNlLCBhbmQgam95b3VzbmVzcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+VGhlIFNwYXJ0YW5zIGFyZSB0aHVzIHNob3duIHRvIGJlIGF0IHRoZSBzYW1lIHRpbWUgbW9zdCBtdXNpY2FsIGFuZCBtb3N0IHdhcmxpa2U7CgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkluIGVxdWFsIHBvaXNlIHRvIG1hdGNoIHRoZSBzd29yZCBoYW5ncyB0aGUgc3dlZXQgYXJ0IG9mIHRoZSBoYXJwaXN0LDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT5hcyB0aGVpciBwb2V0IHNheXMuIEZvciBqdXN0IGJlZm9yZSB0aGVpciBiYXR0bGVzLCB0aGUga2luZyBzYWNyaWZpY2VkIHRvIHRoZSBNdXNlcywgcmVtaW5kaW5nIGhpcyB3YXJyaW9ycywgYXMgaXQgd291bGQgc2VlbSwgb2YgdGhlaXIgdHJhaW5pbmcsIGFuZCBvZiB0aGUgZmlybSBkZWNpc2lvbnMgdGhleSBoYWQgbWFkZSwgaW4gb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IGJlIHByb21wdCB0byBmYWNlIHRoZSBkcmVhZCBpc3N1ZSwgYW5kIG1pZ2h0IHBlcmZvcm0gc3VjaCBtYXJ0aWFsIGRlZWRzIGFzIHdvdWxkIGJlIHdvcnRoeSBvZiBzb21lIHJlY29yZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgR3JlZWsgb2YgdGhpcyBzZW50ZW5jZSBpcyBvYnNjdXJlLCBhbmQgdGhlIHRyYW5zbGF0aW9uIGRvdWJ0ZnVsLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQaW5kYXIgc2F5czrigJQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyYWdtZW50IDE5OSwgQmVyZ2ssIFBvZXQuIEx5ci4gR3IuIGkuNCBwLiA0NDguPC9ub3RlPgoJCQkJICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZSBhcmUgY291bmNpbHMgb2YgRWxkZXJzLDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgeW91bmcgbWVuJ3MgY29ucXVlcmluZyBzcGVhcnMsPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBkYW5jZXMsIHRoZSBNdXNlLCBhbmQgam95b3VzbmVzcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+VGhlIFNwYXJ0YW5zIGFyZSB0aHVzIHNob3duIHRvIGJlIGF0IHRoZSBzYW1lIHRpbWUgbW9zdCBtdXNpY2FsIGFuZCBtb3N0IHdhcmxpa2U7CgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGFyZSBjb3VuY2lscyBvZiBFbGRlcnMsPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB5b3VuZyBtZW4ncyBjb25xdWVyaW5nIHNwZWFycyw8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIGRhbmNlcywgdGhlIE11c2UsIGFuZCBqb3lvdXNuZXNzLjwvbD4KCQkJCSAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gZXF1YWwgcG9pc2UgdG8gbWF0Y2ggdGhlIHN3b3JkIGhhbmdzIHRoZSBzd2VldCBhcnQgb2YgdGhlIGhhcnBpc3QsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPmFzIHRoZWlyIHBvZXQgc2F5cy4gRm9yIGp1c3QgYmVmb3JlIHRoZWlyIGJhdHRsZXMsIHRoZSBraW5nIHNhY3JpZmljZWQgdG8gdGhlIE11c2VzLCByZW1pbmRpbmcgaGlzIHdhcnJpb3JzLCBhcyBpdCB3b3VsZCBzZWVtLCBvZiB0aGVpciB0cmFpbmluZywgYW5kIG9mIHRoZSBmaXJtIGRlY2lzaW9ucyB0aGV5IGhhZCBtYWRlLCBpbiBvcmRlciB0aGF0IHRoZXkgbWlnaHQgYmUgcHJvbXB0IHRvIGZhY2UgdGhlIGRyZWFkIGlzc3VlLCBhbmQgbWlnaHQgcGVyZm9ybSBzdWNoIG1hcnRpYWwgZGVlZHMgYXMgd291bGQgYmUgd29ydGh5IG9mIHNvbWUgcmVjb3JkLjxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gZXF1YWwgcG9pc2UgdG8gbWF0Y2ggdGhlIHN3b3JkIGhhbmdzIHRoZSBzd2VldCBhcnQgb2YgdGhlIGhhcnBpc3QsPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBHcmVlayBvZiB0aGlzIHNlbnRlbmNlIGlzIG9ic2N1cmUsIGFuZCB0aGUgdHJhbnNsYXRpb24gZG91YnRmdWwuPC9ub3RlPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aW1lIG9mIHdhciwgdG9vLCB0aGV5IHJlbGF4ZWQgdGhlIHNldmVyaXR5IG9mIHRoZSB5b3VuZyBtZW4ncyBkaXNjaXBsaW5lLCBhbmQgcGVybWl0dGVkIHRoZW0gdG8gYmVhdXRpZnkgdGhlaXIgaGFpciBhbmQgb3JuYW1lbnQgdGhlaXIgYXJtcyBhbmQgY2xvdGhpbmcsIHJlam9pY2luZyB0byBzZWUgdGhlbSwgbGlrZSBob3JzZXMsIHByYW5jZSBhbmQgbmVpZ2ggZm9yIHRoZSBjb250ZXN0LiBUaGVyZWZvcmUgdGhleSB3b3JlIHRoZWlyIGhhaXIgbG9uZyBhcyBzb29uIGFzIHRoZXkgY2Vhc2VkIHRvIGJlIHlvdXRocywgYW5kIHBhcnRpY3VsYXJseSBpbiB0aW1lcyBvZiBkYW5nZXIgdGhleSB0b29rIHBhaW5zIHRvIGhhdmUgaXQgZ2xvc3N5IGFuZCB3ZWxsLWNvbWJlZCwgcmVtZW1iZXJpbmcgYSBjZXJ0YWluIHNheWluZyBvZiBMeWN1cmd1cywgdGhhdCBhIGZpbmUgaGVhZCBvZiBoYWlyIG1hZGUgdGhlIGhhbmRzb21lIG1vcmUgY29tZWx5IHN0aWxsLCBhbmQgdGhlIHVnbHkgbW9yZSB0ZXJyaWJsZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlaXIgYm9kaWx5IGV4ZXJjaXNlcywgdG9vLCB3ZXJlIGxlc3Mgcmlnb3JvdXMgZHVyaW5nIHRoZWlyIGNhbXBhaWducywgYW5kIGluIG90aGVyIHdheXMgdGhlaXIgeW91bmcgd2FycmlvcnMgd2VyZSBhbGxvd2VkIGEgcmVnaW1lbiB3aGljaCB3YXMgbGVzcyBjdXJ0YWlsZWQgYW5kIHJpZ2lkLCBzbyB0aGF0IHRoZXkgd2VyZSB0aGUgb25seSBtZW4gaW4gdGhlIHdvcmxkIHdpdGggd2hvbSB3YXIgYnJvdWdodCBhIHJlc3BpdGUgaW4gdGhlIHRyYWluaW5nIGZvciB3YXIuIEFuZCB3aGVuIGF0IGxhc3QgdGhleSB3ZXJlIGRyYXduIHVwIGluIGJhdHRsZSBhcnJheSBhbmQgdGhlIGVuZW15IHdhcyBhdCBoYW5kLCB0aGUga2luZyBzYWNyaWZpY2VkIHRoZSBjdXN0b21hcnkgc2hlLWdvYXQsIGNvbW1hbmRlZCBhbGwgdGhlIHdhcnJpb3JzIHRvIHNldCBnYXJsYW5kcyB1cG9uIHRoZWlyIGhlYWRzLCBhbmQgb3JkZXJlZCB0aGUgcGlwZXJzIHRvIHBpcGUgdGhlIHN0cmFpbnMgb2YgdGhlIGh5bW4gdG8gQ2FzdG9yOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz50aGVuIGhlIGhpbXNlbGYgbGVkIG9mZiBpbiBhIG1hcmNoaW5nIHBhZWFuLCBhbmQgaXQgd2FzIGEgc2lnaHQgZXF1YWxseSBncmFuZCBhbmQgdGVycmlmeWluZyB3aGVuIHRoZXkgbWFyY2hlZCBpbiBzdGVwIHdpdGggdGhlIHJoeXRobSBvZiB0aGUgZmx1dGUsIHdpdGhvdXQgYW55IGdhcCBpbiB0aGVpciBsaW5lIG9mIGJhdHRsZSwgYW5kIHdpdGggbm8gY29uZnVzaW9uIGluIHRoZWlyIHNvdWxzLCBidXQgY2FsbWx5IGFuZCBjaGVlcmZ1bGx5IG1vdmluZyB3aXRoIHRoZSBzdHJhaW5zIG9mIHRoZWlyIGh5bW4gaW50byB0aGUgZGVhZGx5IGZpZ2h0LiBOZWl0aGVyIGZlYXIgbm9yIGV4Y2Vzc2l2ZSBmdXJ5IGlzIGxpa2VseSB0byBwb3NzZXNzIG1lbiBzbyBkaXNwb3NlZCwgYnV0IHJhdGhlciBhIGZpcm0gcHVycG9zZSBmdWxsIG9mIGhvcGUgYW5kIGNvdXJhZ2UsIGJlbGlldmluZyBhcyB0aGV5IGRvIHRoYXQgSGVhdmVuIGlzIHRoZWlyIGFsbHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGltZSBvZiB3YXIsIHRvbywgdGhleSByZWxheGVkIHRoZSBzZXZlcml0eSBvZiB0aGUgeW91bmcgbWVuJ3MgZGlzY2lwbGluZSwgYW5kIHBlcm1pdHRlZCB0aGVtIHRvIGJlYXV0aWZ5IHRoZWlyIGhhaXIgYW5kIG9ybmFtZW50IHRoZWlyIGFybXMgYW5kIGNsb3RoaW5nLCByZWpvaWNpbmcgdG8gc2VlIHRoZW0sIGxpa2UgaG9yc2VzLCBwcmFuY2UgYW5kIG5laWdoIGZvciB0aGUgY29udGVzdC4gVGhlcmVmb3JlIHRoZXkgd29yZSB0aGVpciBoYWlyIGxvbmcgYXMgc29vbiBhcyB0aGV5IGNlYXNlZCB0byBiZSB5b3V0aHMsIGFuZCBwYXJ0aWN1bGFybHkgaW4gdGltZXMgb2YgZGFuZ2VyIHRoZXkgdG9vayBwYWlucyB0byBoYXZlIGl0IGdsb3NzeSBhbmQgd2VsbC1jb21iZWQsIHJlbWVtYmVyaW5nIGEgY2VydGFpbiBzYXlpbmcgb2YgTHljdXJndXMsIHRoYXQgYSBmaW5lIGhlYWQgb2YgaGFpciBtYWRlIHRoZSBoYW5kc29tZSBtb3JlIGNvbWVseSBzdGlsbCwgYW5kIHRoZSB1Z2x5IG1vcmUgdGVycmlibGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIGJvZGlseSBleGVyY2lzZXMsIHRvbywgd2VyZSBsZXNzIHJpZ29yb3VzIGR1cmluZyB0aGVpciBjYW1wYWlnbnMsIGFuZCBpbiBvdGhlciB3YXlzIHRoZWlyIHlvdW5nIHdhcnJpb3JzIHdlcmUgYWxsb3dlZCBhIHJlZ2ltZW4gd2hpY2ggd2FzIGxlc3MgY3VydGFpbGVkIGFuZCByaWdpZCwgc28gdGhhdCB0aGV5IHdlcmUgdGhlIG9ubHkgbWVuIGluIHRoZSB3b3JsZCB3aXRoIHdob20gd2FyIGJyb3VnaHQgYSByZXNwaXRlIGluIHRoZSB0cmFpbmluZyBmb3Igd2FyLiBBbmQgd2hlbiBhdCBsYXN0IHRoZXkgd2VyZSBkcmF3biB1cCBpbiBiYXR0bGUgYXJyYXkgYW5kIHRoZSBlbmVteSB3YXMgYXQgaGFuZCwgdGhlIGtpbmcgc2FjcmlmaWNlZCB0aGUgY3VzdG9tYXJ5IHNoZS1nb2F0LCBjb21tYW5kZWQgYWxsIHRoZSB3YXJyaW9ycyB0byBzZXQgZ2FybGFuZHMgdXBvbiB0aGVpciBoZWFkcywgYW5kIG9yZGVyZWQgdGhlIHBpcGVycyB0byBwaXBlIHRoZSBzdHJhaW5zIG9mIHRoZSBoeW1uIHRvIENhc3RvcjsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoZW4gaGUgaGltc2VsZiBsZWQgb2ZmIGluIGEgbWFyY2hpbmcgcGFlYW4sIGFuZCBpdCB3YXMgYSBzaWdodCBlcXVhbGx5IGdyYW5kIGFuZCB0ZXJyaWZ5aW5nIHdoZW4gdGhleSBtYXJjaGVkIGluIHN0ZXAgd2l0aCB0aGUgcmh5dGhtIG9mIHRoZSBmbHV0ZSwgd2l0aG91dCBhbnkgZ2FwIGluIHRoZWlyIGxpbmUgb2YgYmF0dGxlLCBhbmQgd2l0aCBubyBjb25mdXNpb24gaW4gdGhlaXIgc291bHMsIGJ1dCBjYWxtbHkgYW5kIGNoZWVyZnVsbHkgbW92aW5nIHdpdGggdGhlIHN0cmFpbnMgb2YgdGhlaXIgaHltbiBpbnRvIHRoZSBkZWFkbHkgZmlnaHQuIE5laXRoZXIgZmVhciBub3IgZXhjZXNzaXZlIGZ1cnkgaXMgbGlrZWx5IHRvIHBvc3Nlc3MgbWVuIHNvIGRpc3Bvc2VkLCBidXQgcmF0aGVyIGEgZmlybSBwdXJwb3NlIGZ1bGwgb2YgaG9wZSBhbmQgY291cmFnZSwgYmVsaWV2aW5nIGFzIHRoZXkgZG8gdGhhdCBIZWF2ZW4gaXMgdGhlaXIgYWxseS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGtpbmcgbWFyY2hlZCBhZ2FpbnN0IHRoZSBlbmVteSBpbiBjbG9zZSBjb21wYW5pb25zaGlwIHdpdGggb25lIHdobyBoYWQgYmVlbiBjcm93bmVkIHZpY3RvciBpbiB0aGUgZ3JlYXQgZ2FtZXMuIEFuZCB0aGV5IHRlbGwgb2YgYSBjZXJ0YWluIFNwYXJ0YW4gd2hvIHJlZnVzZWQgdG8gYmUgYm91Z2h0IG9mZiBmcm9tIGEgY29udGVzdCBhdCBPbHltcGlhIGJ5IGxhcmdlIHN1bXMgb2YgbW9uZXksIGFuZCBhZnRlciBhIGxvbmcgc3RydWdnbGUgb3V0d3Jlc3RsZWQgaGlzIGFudGFnb25pc3QuIFdoZW4gc29tZSBvbmUgc2FpZCB0byBoaW0gdGhlbjogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGFkdmFudGFnZSwgTyBTcGFydGFuLCBoYXN0IHRob3UgZ290IGZyb20gdGh5IHZpY3Rvcnk/PC9xPiBoZSBhbnN3ZXJlZCwgd2l0aCBhIHNtaWxlOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc2hhbGwgc3RhbmQgaW4gZnJvbnQgb2YgbXkga2luZyB3aGVuIEkgZmlnaHQgb3VyIGVuZW1pZXMuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhleSBoYWQgY29ucXVlcmVkIGFuZCByb3V0ZWQgYW4gZW5lbXksIHRoZXkgcHVyc3VlZCBoaW0gZmFyIGVub3VnaCB0byBtYWtlIHRoZWlyIHZpY3Rvcnkgc2VjdXJlIGJ5IGhpcyBmbGlnaHQsIGFuZCB0aGVuIGF0IG9uY2UgcmV0aXJlZCwgdGhpbmtpbmcgaXQgaWdub2JsZSBhbmQgdW53b3J0aHkgb2YgYSBIZWxsZW5lIHRvIGhldyBtZW4gdG8gcGllY2VzIHdobyBoYWQgZ2l2ZW4gdXAgdGhlIGZpZ2h0IGFuZCBhYmFuZG9uZWQgdGhlIGZpZWxkLiBBbmQgdGhpcyB3YXMgbm90IG9ubHkgYSBub2JsZSBhbmQgbWFnbmFuaW1vdXMgcG9saWN5LCBidXQgaXQgd2FzIGFsc28gdXNlZnVsLiBGb3IgdGhlaXIgYW50YWdvbmlzdHMsIGtub3dpbmcgdGhhdCB0aGV5IHNsZXcgdGhvc2Ugd2hvIHJlc2lzdGVkIHRoZW0sIGJ1dCBzaG93ZWQgbWVyY3kgdG8gdGhvc2Ugd2hvIHlpZWxkZWQgdG8gdGhlbSwgd2VyZSBhcHQgdG8gdGhpbmsgZmxpZ2h0IG1vcmUgYWR2YW50YWdlb3VzIHRoYW4gcmVzaXN0YW5jZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBraW5nIG1hcmNoZWQgYWdhaW5zdCB0aGUgZW5lbXkgaW4gY2xvc2UgY29tcGFuaW9uc2hpcCB3aXRoIG9uZSB3aG8gaGFkIGJlZW4gY3Jvd25lZCB2aWN0b3IgaW4gdGhlIGdyZWF0IGdhbWVzLiBBbmQgdGhleSB0ZWxsIG9mIGEgY2VydGFpbiBTcGFydGFuIHdobyByZWZ1c2VkIHRvIGJlIGJvdWdodCBvZmYgZnJvbSBhIGNvbnRlc3QgYXQgT2x5bXBpYSBieSBsYXJnZSBzdW1zIG9mIG1vbmV5LCBhbmQgYWZ0ZXIgYSBsb25nIHN0cnVnZ2xlIG91dHdyZXN0bGVkIGhpcyBhbnRhZ29uaXN0LiBXaGVuIHNvbWUgb25lIHNhaWQgdG8gaGltIHRoZW46IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGFkdmFudGFnZSwgTyBTcGFydGFuLCBoYXN0IHRob3UgZ290IGZyb20gdGh5IHZpY3Rvcnk/PC9xPiBoZSBhbnN3ZXJlZCwgd2l0aCBhIHNtaWxlOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBzaGFsbCBzdGFuZCBpbiBmcm9udCBvZiBteSBraW5nIHdoZW4gSSBmaWdodCBvdXIgZW5lbWllcy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhleSBoYWQgY29ucXVlcmVkIGFuZCByb3V0ZWQgYW4gZW5lbXksIHRoZXkgcHVyc3VlZCBoaW0gZmFyIGVub3VnaCB0byBtYWtlIHRoZWlyIHZpY3Rvcnkgc2VjdXJlIGJ5IGhpcyBmbGlnaHQsIGFuZCB0aGVuIGF0IG9uY2UgcmV0aXJlZCwgdGhpbmtpbmcgaXQgaWdub2JsZSBhbmQgdW53b3J0aHkgb2YgYSBIZWxsZW5lIHRvIGhldyBtZW4gdG8gcGllY2VzIHdobyBoYWQgZ2l2ZW4gdXAgdGhlIGZpZ2h0IGFuZCBhYmFuZG9uZWQgdGhlIGZpZWxkLiBBbmQgdGhpcyB3YXMgbm90IG9ubHkgYSBub2JsZSBhbmQgbWFnbmFuaW1vdXMgcG9saWN5LCBidXQgaXQgd2FzIGFsc28gdXNlZnVsLiBGb3IgdGhlaXIgYW50YWdvbmlzdHMsIGtub3dpbmcgdGhhdCB0aGV5IHNsZXcgdGhvc2Ugd2hvIHJlc2lzdGVkIHRoZW0sIGJ1dCBzaG93ZWQgbWVyY3kgdG8gdGhvc2Ugd2hvIHlpZWxkZWQgdG8gdGhlbSwgd2VyZSBhcHQgdG8gdGhpbmsgZmxpZ2h0IG1vcmUgYWR2YW50YWdlb3VzIHRoYW4gcmVzaXN0YW5jZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlwcGlhcyB0aGUgU29waGlzdCBzYXlzIHRoYXQgTHljdXJndXMgaGltc2VsZiB3YXMgdmVyeSB3ZWxsIHZlcnNlZCBpbiB3YXIgYW5kIHRvb2sgcGFydCBpbiBtYW55IGNhbXBhaWducywgYW5kIFBoaWxvc3RlcGhhbnVzIGF0dHJpYnV0ZXMgdG8gaGltIHRoZSBhcnJhbmdlbWVudCBvZiB0aGUgU3BhcnRhbiBjYXZhbHJ5IGJ5IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b3VsYW1vaSw8L3E+IGV4cGxhaW5pbmcgdGhhdCB0aGUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vdWxhbW9zLDwvcT4gYXMgY29uc3RpdHV0ZWQgYnkgaGltLCB3YXMgYSB0cm9vcCBvZiBmaWZ0eSBob3JzZW1lbiBpbiBhIHNxdWFyZSBmb3JtYXRpb24uIEJ1dCBEZW1ldHJpdXMgdGhlIFBoYWxlcmVhbiBzYXlzIGhlIGVuZ2FnZWQgaW4gbm8gd2FybGlrZSB1bmRlcnRha2luZ3MsIGFuZCBlc3RhYmxpc2hlZCBoaXMgY29uc3RpdHV0aW9uIGluIGEgdGltZSBvZiBwZWFjZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluZGVlZCB0aGUgZGVzaWduIG9mIHRoZSBPbHltcGljIHRydWNlIHdvdWxkIHNlZW0gdG8gYmVzcGVhayBhIG1hbiBvZiBnZW50bGVuZXNzLCBhbmQgcHJlZGlzcG9zZWQgdG8gcGVhY2UuIEFuZCB5ZXQgdGhlcmUgYXJlIHNvbWUgd2hvIHNheSwgYXMgSGVybWlwcHVzIHJlbWluZHMgdXMsIHRoYXQgYXQgdGhlIG91dHNldCBMeWN1cmd1cyBoYWQgbm90aGluZyB3aGF0ZXZlciB0byBkbyB3aXRoIElwaGl0dXMgYW5kIGhpcyBlbnRlcnByaXNlLCBidXQgaGFwcGVuZWQgdG8gY29tZSB0aGF0IHdheSBieSBjaGFuY2UsIGFuZCBiZSBhIHNwZWN0YXRvciBhdCB0aGUgZ2FtZXM7IHRoYXQgaGUgaGVhcmQgYmVoaW5kIGhpbSwgaG93ZXZlciwgd2hhdCBzZWVtZWQgdG8gYmUgYSBodW1hbiB2b2ljZSwgY2hpZGluZyBoaW0gYW5kIGV4cHJlc3NpbmcgYW1hemVtZW50IHRoYXQgaGUgZGlkIG5vdCB1cmdlIGhpcyBmZWxsb3ctY2l0aXplbnMgdG8gdGFrZSBwYXJ0IGluIHRoZSBncmVhdCBmZXN0aXZhbDsgYW5kIHNpbmNlLCBvbiB0dXJuaW5nIHJvdW5kLCBoZSBkaWQgbm90IHNlZSB0aGUgc3BlYWtlciBhbnl3aGVyZSwgaGUgY29uY2x1ZGVkIHRoYXQgdGhlIHZvaWNlIHdhcyBmcm9tIGhlYXZlbiwgYW5kIHRoZXJlZm9yZSBiZXRvb2sgaGltc2VsZiB0byBJcGhpdHVzLCBhbmQgYXNzaXN0ZWQgaGltIGluIGdpdmluZyB0aGUgZmVzdGl2YWwgYSBtb3JlIG5vdGFibGUgYXJyYW5nZW1lbnQgYW5kIGEgbW9yZSBlbmR1cmluZyBiYXNpcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlwcGlhcyB0aGUgU29waGlzdCBzYXlzIHRoYXQgTHljdXJndXMgaGltc2VsZiB3YXMgdmVyeSB3ZWxsIHZlcnNlZCBpbiB3YXIgYW5kIHRvb2sgcGFydCBpbiBtYW55IGNhbXBhaWducywgYW5kIFBoaWxvc3RlcGhhbnVzIGF0dHJpYnV0ZXMgdG8gaGltIHRoZSBhcnJhbmdlbWVudCBvZiB0aGUgU3BhcnRhbiBjYXZhbHJ5IGJ5IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vdWxhbW9pLDwvcT4gZXhwbGFpbmluZyB0aGF0IHRoZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b3VsYW1vcyw8L3E+IGFzIGNvbnN0aXR1dGVkIGJ5IGhpbSwgd2FzIGEgdHJvb3Agb2YgZmlmdHkgaG9yc2VtZW4gaW4gYSBzcXVhcmUgZm9ybWF0aW9uLiBCdXQgRGVtZXRyaXVzIHRoZSBQaGFsZXJlYW4gc2F5cyBoZSBlbmdhZ2VkIGluIG5vIHdhcmxpa2UgdW5kZXJ0YWtpbmdzLCBhbmQgZXN0YWJsaXNoZWQgaGlzIGNvbnN0aXR1dGlvbiBpbiBhIHRpbWUgb2YgcGVhY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhlIGRlc2lnbiBvZiB0aGUgT2x5bXBpYyB0cnVjZSB3b3VsZCBzZWVtIHRvIGJlc3BlYWsgYSBtYW4gb2YgZ2VudGxlbmVzcywgYW5kIHByZWRpc3Bvc2VkIHRvIHBlYWNlLiBBbmQgeWV0IHRoZXJlIGFyZSBzb21lIHdobyBzYXksIGFzIEhlcm1pcHB1cyByZW1pbmRzIHVzLCB0aGF0IGF0IHRoZSBvdXRzZXQgTHljdXJndXMgaGFkIG5vdGhpbmcgd2hhdGV2ZXIgdG8gZG8gd2l0aCBJcGhpdHVzIGFuZCBoaXMgZW50ZXJwcmlzZSwgYnV0IGhhcHBlbmVkIHRvIGNvbWUgdGhhdCB3YXkgYnkgY2hhbmNlLCBhbmQgYmUgYSBzcGVjdGF0b3IgYXQgdGhlIGdhbWVzOyB0aGF0IGhlIGhlYXJkIGJlaGluZCBoaW0sIGhvd2V2ZXIsIHdoYXQgc2VlbWVkIHRvIGJlIGEgaHVtYW4gdm9pY2UsIGNoaWRpbmcgaGltIGFuZCBleHByZXNzaW5nIGFtYXplbWVudCB0aGF0IGhlIGRpZCBub3QgdXJnZSBoaXMgZmVsbG93LWNpdGl6ZW5zIHRvIHRha2UgcGFydCBpbiB0aGUgZ3JlYXQgZmVzdGl2YWw7IGFuZCBzaW5jZSwgb24gdHVybmluZyByb3VuZCwgaGUgZGlkIG5vdCBzZWUgdGhlIHNwZWFrZXIgYW55d2hlcmUsIGhlIGNvbmNsdWRlZCB0aGF0IHRoZSB2b2ljZSB3YXMgZnJvbSBoZWF2ZW4sIGFuZCB0aGVyZWZvcmUgYmV0b29rIGhpbXNlbGYgdG8gSXBoaXR1cywgYW5kIGFzc2lzdGVkIGhpbSBpbiBnaXZpbmcgdGhlIGZlc3RpdmFsIGEgbW9yZSBub3RhYmxlIGFycmFuZ2VtZW50IGFuZCBhIG1vcmUgZW5kdXJpbmcgYmFzaXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0cmFpbmluZyBvZiB0aGUgU3BhcnRhbnMgbGFzdGVkIGludG8gdGhlIHllYXJzIG9mIGZ1bGwgbWF0dXJpdHkuIE5vIG1hbiB3YXMgYWxsb3dlZCB0byBsaXZlIGFzIGhlIHBsZWFzZWQsIGJ1dCBpbiB0aGVpciBjaXR5LCBhcyBpbiBhIG1pbGl0YXJ5IGVuY2FtcG1lbnQsIHRoZXkgYWx3YXlzIGhhZCBhIHByZXNjcmliZWQgcmVnaW1lbiBhbmQgZW1wbG95bWVudCBpbiBwdWJsaWMgc2VydmljZSwgY29uc2lkZXJpbmcgdGhhdCB0aGV5IGJlbG9uZ2VkIGVudGlyZWx5IHRvIHRoZWlyIGNvdW50cnkgYW5kIG5vdCB0byB0aGVtc2VsdmVzLCB3YXRjaGluZyBvdmVyIHRoZSBib3lzLCBpZiBubyBvdGhlciBkdXR5IHdhcyBsYWlkIHVwb24gdGhlbSwgYW5kIGVpdGhlciB0ZWFjaGluZyB0aGVtIHNvbWUgdXNlZnVsIHRoaW5nLCBvciBsZWFybmluZyBpdCB0aGVtc2VsdmVzIGZyb20gdGhlaXIgZWxkZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igb25lIG9mIHRoZSBub2JsZSBhbmQgYmxlc3NlZCBwcml2aWxlZ2VzIHdoaWNoIEx5Y3VyZ3VzIHByb3ZpZGVkIGZvciBoaXMgZmVsbG93LWNpdGl6ZW5zLCB3YXMgYWJ1bmRhbmNlIG9mIGxlaXN1cmUsIHNpbmNlIGhlIGZvcmJhZGUgdGhlaXIgZW5nYWdpbmcgaW4gYW55IG1lY2hhbmljYWwgYXJ0IHdoYXRzb2V2ZXIsIGFuZCBhcyBmb3IgbW9uZXktbWFraW5nLCB3aXRoIGl0cyBsYWJvcmlvdXMgZWZmb3J0cyB0byBhbWFzcyB3ZWFsdGgsIHRoZXJlIHdhcyBubyBuZWVkIG9mIGl0IGF0IGFsbCwgc2luY2Ugd2VhbHRoIGF3YWtlbmVkIG5vIGVudnkgYW5kIGJyb3VnaHQgbm8gaG9ub3VyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzLCB0aGUgSGVsb3RzIHRpbGxlZCB0aGVpciBncm91bmQgZm9yIHRoZW0sIGFuZCBwYWlkIHRoZW0gdGhlIHByb2R1Y2UgbWVudGlvbmVkIGFib3ZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiA4LjQiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgdmlpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlcmVmb3JlIGl0IHdhcyB0aGF0IG9uZSBvZiB0aGVtIHdobyB3YXMgc29qb3VybmluZyBhdCBBdGhlbnMgd2hlbiB0aGUgY291cnRzIHdlcmUgaW4gc2Vzc2lvbiwgYW5kIGxlYXJuZWQgdGhhdCBhIGNlcnRhaW4gQXRoZW5pYW4gaGFkIGJlZW4gZmluZWQgZm9yIGlkbGVuZXNzIGFuZCB3YXMgZ29pbmcgaG9tZSBpbiBncmVhdCBkaXN0cmVzcyBvZiBtaW5kIGFuZCBhdHRlbmRlZCBvbiBoaXMgd2F5IGJ5IHN5bXBhdGhldGljIGFuZCBzb3Jyb3dpbmcgZnJpZW5kcywgYmVnZ2VkIHRoZSBieXN0YW5kZXJzIHRvIHNob3cgaGltIHRoZSBtYW4gd2hvIGhhZCBiZWVuIGZpbmVkIGZvciBsaXZpbmcgbGlrZSBhIGZyZWVtYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIHNlcnZpbGUgYSB0aGluZyBkaWQgdGhleSByZWdhcmQgdGhlIGRldm90aW9uIHRvIHRoZSBtZWNoYW5pY2FsIGFydHMgYW5kIHRvIG1vbmV5LW1ha2luZy4gQW5kIGxhdy1zdWl0cywgb2YgY291cnNlLCB2YW5pc2hlZCBmcm9tIGFtb25nIHRoZW0gd2l0aCB0aGVpciBnb2xkIGFuZCBzaWx2ZXIgY29pbmFnZSwgZm9yIHRoZXkga25ldyBuZWl0aGVyIGdyZWVkIG5vciB3YW50LCBidXQgZXF1YWxpdHkgaW4gd2VsbC1iZWluZyB3YXMgZXN0YWJsaXNoZWQgdGhlcmUsIGFuZCBlYXN5IGxpdmluZyBiYXNlZCBvbiBzaW1wbGUgd2FudHMuIENob3JhbCBkYW5jZXMgYW5kIGZlYXN0cyBhbmQgZmVzdGl2YWxzIGFuZCBodW50aW5nIGFuZCBib2RpbHkgZXhlcmNpc2UgYW5kIHNvY2lhbCBjb252ZXJzZSBvY2N1cGllZCB0aGVpciB3aG9sZSB0aW1lLCB3aGVuIHRoZXkgd2VyZSBub3Qgb24gYSBtaWxpdGFyeSBleHBlZGl0aW9uLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHRyYWluaW5nIG9mIHRoZSBTcGFydGFucyBsYXN0ZWQgaW50byB0aGUgeWVhcnMgb2YgZnVsbCBtYXR1cml0eS4gTm8gbWFuIHdhcyBhbGxvd2VkIHRvIGxpdmUgYXMgaGUgcGxlYXNlZCwgYnV0IGluIHRoZWlyIGNpdHksIGFzIGluIGEgbWlsaXRhcnkgZW5jYW1wbWVudCwgdGhleSBhbHdheXMgaGFkIGEgcHJlc2NyaWJlZCByZWdpbWVuIGFuZCBlbXBsb3ltZW50IGluIHB1YmxpYyBzZXJ2aWNlLCBjb25zaWRlcmluZyB0aGF0IHRoZXkgYmVsb25nZWQgZW50aXJlbHkgdG8gdGhlaXIgY291bnRyeSBhbmQgbm90IHRvIHRoZW1zZWx2ZXMsIHdhdGNoaW5nIG92ZXIgdGhlIGJveXMsIGlmIG5vIG90aGVyIGR1dHkgd2FzIGxhaWQgdXBvbiB0aGVtLCBhbmQgZWl0aGVyIHRlYWNoaW5nIHRoZW0gc29tZSB1c2VmdWwgdGhpbmcsIG9yIGxlYXJuaW5nIGl0IHRoZW1zZWx2ZXMgZnJvbSB0aGVpciBlbGRlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBvbmUgb2YgdGhlIG5vYmxlIGFuZCBibGVzc2VkIHByaXZpbGVnZXMgd2hpY2ggTHljdXJndXMgcHJvdmlkZWQgZm9yIGhpcyBmZWxsb3ctY2l0aXplbnMsIHdhcyBhYnVuZGFuY2Ugb2YgbGVpc3VyZSwgc2luY2UgaGUgZm9yYmFkZSB0aGVpciBlbmdhZ2luZyBpbiBhbnkgbWVjaGFuaWNhbCBhcnQgd2hhdHNvZXZlciwgYW5kIGFzIGZvciBtb25leS1tYWtpbmcsIHdpdGggaXRzIGxhYm9yaW91cyBlZmZvcnRzIHRvIGFtYXNzIHdlYWx0aCwgdGhlcmUgd2FzIG5vIG5lZWQgb2YgaXQgYXQgYWxsLCBzaW5jZSB3ZWFsdGggYXdha2VuZWQgbm8gZW52eSBhbmQgYnJvdWdodCBubyBob25vdXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMsIHRoZSBIZWxvdHMgdGlsbGVkIHRoZWlyIGdyb3VuZCBmb3IgdGhlbSwgYW5kIHBhaWQgdGhlbSB0aGUgcHJvZHVjZSBtZW50aW9uZWQgYWJvdmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiA4LjQiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgdmlpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlcmVmb3JlIGl0IHdhcyB0aGF0IG9uZSBvZiB0aGVtIHdobyB3YXMgc29qb3VybmluZyBhdCBBdGhlbnMgd2hlbiB0aGUgY291cnRzIHdlcmUgaW4gc2Vzc2lvbiwgYW5kIGxlYXJuZWQgdGhhdCBhIGNlcnRhaW4gQXRoZW5pYW4gaGFkIGJlZW4gZmluZWQgZm9yIGlkbGVuZXNzIGFuZCB3YXMgZ29pbmcgaG9tZSBpbiBncmVhdCBkaXN0cmVzcyBvZiBtaW5kIGFuZCBhdHRlbmRlZCBvbiBoaXMgd2F5IGJ5IHN5bXBhdGhldGljIGFuZCBzb3Jyb3dpbmcgZnJpZW5kcywgYmVnZ2VkIHRoZSBieXN0YW5kZXJzIHRvIHNob3cgaGltIHRoZSBtYW4gd2hvIGhhZCBiZWVuIGZpbmVkIGZvciBsaXZpbmcgbGlrZSBhIGZyZWVtYW4uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiA4LjQiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgdmlpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIHNlcnZpbGUgYSB0aGluZyBkaWQgdGhleSByZWdhcmQgdGhlIGRldm90aW9uIHRvIHRoZSBtZWNoYW5pY2FsIGFydHMgYW5kIHRvIG1vbmV5LW1ha2luZy4gQW5kIGxhdy1zdWl0cywgb2YgY291cnNlLCB2YW5pc2hlZCBmcm9tIGFtb25nIHRoZW0gd2l0aCB0aGVpciBnb2xkIGFuZCBzaWx2ZXIgY29pbmFnZSwgZm9yIHRoZXkga25ldyBuZWl0aGVyIGdyZWVkIG5vciB3YW50LCBidXQgZXF1YWxpdHkgaW4gd2VsbC1iZWluZyB3YXMgZXN0YWJsaXNoZWQgdGhlcmUsIGFuZCBlYXN5IGxpdmluZyBiYXNlZCBvbiBzaW1wbGUgd2FudHMuIENob3JhbCBkYW5jZXMgYW5kIGZlYXN0cyBhbmQgZmVzdGl2YWxzIGFuZCBodW50aW5nIGFuZCBib2RpbHkgZXhlcmNpc2UgYW5kIHNvY2lhbCBjb252ZXJzZSBvY2N1cGllZCB0aGVpciB3aG9sZSB0aW1lLCB3aGVuIHRoZXkgd2VyZSBub3Qgb24gYSBtaWxpdGFyeSBleHBlZGl0aW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSB3aG8gd2VyZSB1bmRlciB0aGlydHkgeWVhcnMgb2YgYWdlIGRpZCBub3QgZ28gaW50byB0aGUgbWFya2V0LXBsYWNlIGF0IGFsbCwgYnV0IGhhZCB0aGVpciBob3VzZWhvbGQgd2FudHMgc3VwcGxpZWQgYXQgdGhlIGhhbmRzIG9mIHRoZWlyIGtpbnNmb2xrIGFuZCBsb3ZlcnMuIEFuZCBpdCB3YXMgZGlzcmVwdXRhYmxlIGZvciB0aGUgZWxkZXJseSBtZW4gdG8gYmUgY29udGludWFsbHkgc2VlbiBsb2l0ZXJpbmcgdGhlcmUsIGluc3RlYWQgb2Ygc3BlbmRpbmcgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgZGF5IGluIHRoZSBwbGFjZXMgb2YgZXhlcmNpc2UgdGhhdCBhcmUgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bGVzY2hhaS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsYWNlcyB3aGVyZSBtZW4gYXNzZW1ibGVkIGZvciBjb252ZXJzYXRpb24uPC9ub3RlPiAgRm9yIGlmIHRoZXkgZ2F0aGVyZWQgaW4gdGhlc2UsIHRoZXkgc3BlbnQgdGhlaXIgdGltZSBzdWl0YWJseSB3aXRoIG9uZSBhbm90aGVyLCBtYWtpbmcgbm8gYWxsdXNpb25zIHRvIHRoZSBwcm9ibGVtcyBvZiBtb25leS1tYWtpbmcgb3Igb2YgZXhjaGFuZ2UsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm5heSwgdGhleSB3ZXJlIGNoaWVmbHkgb2NjdXBpZWQgdGhlcmUgaW4gcHJhaXNpbmcgc29tZSBub2JsZSBhY3Rpb24gb3IgY2Vuc3VyaW5nIHNvbWUgYmFzZSBvbmUsIHdpdGggamVzdGluZyBhbmQgbGF1Z2h0ZXIgd2hpY2ggbWFkZSB0aGUgcGF0aCB0byBpbnN0cnVjdGlvbiBhbmQgY29ycmVjdGlvbiBlYXN5IGFuZCBuYXR1cmFsLiBGb3Igbm90IGV2ZW4gTHljdXJndXMgaGltc2VsZiB3YXMgaW1tb2RlcmF0ZWx5IHNldmVyZTsgaW5kZWVkLCBTb3NpYml1cyB0ZWxscyB1cyB0aGF0IGhlIGFjdHVhbGx5IGRlZGljYXRlZCBhIGxpdHRsZSBzdGF0dWUgb2YgTGF1Z2h0ZXIsIGFuZCBpbnRyb2R1Y2VkIHNlYXNvbmFibGUgamVzdGluZyBpbnRvIHRoZWlyIGRyaW5raW5nIHBhcnRpZXMgYW5kIGxpa2UgZGl2ZXJzaW9ucywgdG8gc3dlZXRlbiwgYXMgaXQgd2VyZSwgdGhlaXIgaGFyZHNoaXBzIGFuZCBtZWFncmUgZmFyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhvc2Ugd2hvIHdlcmUgdW5kZXIgdGhpcnR5IHllYXJzIG9mIGFnZSBkaWQgbm90IGdvIGludG8gdGhlIG1hcmtldC1wbGFjZSBhdCBhbGwsIGJ1dCBoYWQgdGhlaXIgaG91c2Vob2xkIHdhbnRzIHN1cHBsaWVkIGF0IHRoZSBoYW5kcyBvZiB0aGVpciBraW5zZm9sayBhbmQgbG92ZXJzLiBBbmQgaXQgd2FzIGRpc3JlcHV0YWJsZSBmb3IgdGhlIGVsZGVybHkgbWVuIHRvIGJlIGNvbnRpbnVhbGx5IHNlZW4gbG9pdGVyaW5nIHRoZXJlLCBpbnN0ZWFkIG9mIHNwZW5kaW5nIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGRheSBpbiB0aGUgcGxhY2VzIG9mIGV4ZXJjaXNlIHRoYXQgYXJlIGNhbGxlZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bGVzY2hhaS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGxhY2VzIHdoZXJlIG1lbiBhc3NlbWJsZWQgZm9yIGNvbnZlcnNhdGlvbi48L25vdGU+ICBGb3IgaWYgdGhleSBnYXRoZXJlZCBpbiB0aGVzZSwgdGhleSBzcGVudCB0aGVpciB0aW1lIHN1aXRhYmx5IHdpdGggb25lIGFub3RoZXIsIG1ha2luZyBubyBhbGx1c2lvbnMgdG8gdGhlIHByb2JsZW1zIG9mIG1vbmV5LW1ha2luZyBvciBvZiBleGNoYW5nZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm5heSwgdGhleSB3ZXJlIGNoaWVmbHkgb2NjdXBpZWQgdGhlcmUgaW4gcHJhaXNpbmcgc29tZSBub2JsZSBhY3Rpb24gb3IgY2Vuc3VyaW5nIHNvbWUgYmFzZSBvbmUsIHdpdGggamVzdGluZyBhbmQgbGF1Z2h0ZXIgd2hpY2ggbWFkZSB0aGUgcGF0aCB0byBpbnN0cnVjdGlvbiBhbmQgY29ycmVjdGlvbiBlYXN5IGFuZCBuYXR1cmFsLiBGb3Igbm90IGV2ZW4gTHljdXJndXMgaGltc2VsZiB3YXMgaW1tb2RlcmF0ZWx5IHNldmVyZTsgaW5kZWVkLCBTb3NpYml1cyB0ZWxscyB1cyB0aGF0IGhlIGFjdHVhbGx5IGRlZGljYXRlZCBhIGxpdHRsZSBzdGF0dWUgb2YgTGF1Z2h0ZXIsIGFuZCBpbnRyb2R1Y2VkIHNlYXNvbmFibGUgamVzdGluZyBpbnRvIHRoZWlyIGRyaW5raW5nIHBhcnRpZXMgYW5kIGxpa2UgZGl2ZXJzaW9ucywgdG8gc3dlZXRlbiwgYXMgaXQgd2VyZSwgdGhlaXIgaGFyZHNoaXBzIGFuZCBtZWFncmUgZmFyZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gYSB3b3JkLCBoZSB0cmFpbmVkIGhpcyBmZWxsb3ctY2l0aXplbnMgdG8gaGF2ZSBuZWl0aGVyIHRoZSB3aXNoIG5vciB0aGUgYWJpbGl0eSB0byBsaXZlIGZvciB0aGVtc2VsdmVzOyBidXQgbGlrZSBiZWVzIHRoZXkgd2VyZSB0byBtYWtlIHRoZW1zZWx2ZXMgYWx3YXlzIGludGVncmFsIHBhcnRzIG9mIHRoZSB3aG9sZSBjb21tdW5pdHksIGNsdXN0ZXJpbmcgdG9nZXRoZXIgYWJvdXQgdGhlaXIgbGVhZGVyLCBhbG1vc3QgYmVzaWRlIHRoZW1zZWx2ZXMgd2l0aCBlbnRodXNpYXNtIGFuZCBub2JsZSBhbWJpdGlvbiwgYW5kIHRvIGJlbG9uZyB3aG9sbHkgdG8gdGhlaXIgY291bnRyeS4gVGhpcyBpZGVhIGNhbiBiZSB0cmFjZWQgYWxzbyBpbiBzb21lIG9mIHRoZWlyIHV0dGVyYW5jZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgUGFlZGFyZXR1cywgd2hlbiBoZSBmYWlsZWQgdG8gYmUgY2hvc2VuIGFtb25nIHRoZSB0aHJlZSBodW5kcmVkIGJlc3QgbWVuLCB3ZW50IGF3YXkgd2l0aCBhIHZlcnkgZ2xhZCBjb3VudGVuYW5jZSwgYXMgaWYgcmVqb2ljaW5nIHRoYXQgdGhlIGNpdHkgaGFkIHRocmVlIGh1bmRyZWQgYmV0dGVyIG1lbiB0aGFuIGhpbXNlbGYuIEFuZCBhZ2FpbiwgUG9seWNyYXRpZGFzLCBvbmUgb2YgYW4gZW1iYXNzeSB0byB0aGUgZ2VuZXJhbHMgb2YgdGhlIFBlcnNpYW4ga2luZywgb24gYmVpbmcgYXNrZWQgYnkgdGhlbSB3aGV0aGVyIHRoZSBlbWJhc3N5IHdhcyB0aGVyZSBpbiBhIHByaXZhdGUgb3IgYSBwdWJsaWMgY2FwYWNpdHksIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYgd2Ugc3VjY2VlZCwgaW4gYSBwdWJsaWMgY2FwYWNpdHk7IGlmIHdlIGZhaWwsIGluIGEgcHJpdmF0ZS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIEFyZ2lsZW9uaXMsIHRoZSBtb3RoZXIgb2YgQnJhc2lkYXMsIHdoZW4gc29tZSBBbXBoaXBvbGl0YW5zIHdobyBoYWQgY29tZSB0byBTcGFydGEgcGFpZCBoZXIgYSB2aXNpdCwgYXNrZWQgdGhlbSBpZiBCcmFzaWRhcyBoYWQgZGllZCBub2JseSBhbmQgaW4gYSBtYW5uZXIgd29ydGh5IG9mIFNwYXJ0YS4gVGhlbiB0aGV5IGdyZWF0bHkgZXh0b2xsZWQgdGhlIG1hbiBhbmQgc2FpZCB0aGF0IFNwYXJ0YSBoYWQgbm90IHN1Y2ggYW5vdGhlciwgdG8gd2hpY2ggc2hlIGFuc3dlcmVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNheSBub3Qgc28sIFN0cmFuZ2VyczsgQnJhc2lkYXMgd2FzIG5vYmxlIGFuZCBicmF2ZSwgYnV0IFNwYXJ0YSBoYXMgbWFueSBiZXR0ZXIgbWVuIHRoYW4gaGUuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIGEgd29yZCwgaGUgdHJhaW5lZCBoaXMgZmVsbG93LWNpdGl6ZW5zIHRvIGhhdmUgbmVpdGhlciB0aGUgd2lzaCBub3IgdGhlIGFiaWxpdHkgdG8gbGl2ZSBmb3IgdGhlbXNlbHZlczsgYnV0IGxpa2UgYmVlcyB0aGV5IHdlcmUgdG8gbWFrZSB0aGVtc2VsdmVzIGFsd2F5cyBpbnRlZ3JhbCBwYXJ0cyBvZiB0aGUgd2hvbGUgY29tbXVuaXR5LCBjbHVzdGVyaW5nIHRvZ2V0aGVyIGFib3V0IHRoZWlyIGxlYWRlciwgYWxtb3N0IGJlc2lkZSB0aGVtc2VsdmVzIHdpdGggZW50aHVzaWFzbSBhbmQgbm9ibGUgYW1iaXRpb24sIGFuZCB0byBiZWxvbmcgd2hvbGx5IHRvIHRoZWlyIGNvdW50cnkuIFRoaXMgaWRlYSBjYW4gYmUgdHJhY2VkIGFsc28gaW4gc29tZSBvZiB0aGVpciB1dHRlcmFuY2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgUGFlZGFyZXR1cywgd2hlbiBoZSBmYWlsZWQgdG8gYmUgY2hvc2VuIGFtb25nIHRoZSB0aHJlZSBodW5kcmVkIGJlc3QgbWVuLCB3ZW50IGF3YXkgd2l0aCBhIHZlcnkgZ2xhZCBjb3VudGVuYW5jZSwgYXMgaWYgcmVqb2ljaW5nIHRoYXQgdGhlIGNpdHkgaGFkIHRocmVlIGh1bmRyZWQgYmV0dGVyIG1lbiB0aGFuIGhpbXNlbGYuIEFuZCBhZ2FpbiwgUG9seWNyYXRpZGFzLCBvbmUgb2YgYW4gZW1iYXNzeSB0byB0aGUgZ2VuZXJhbHMgb2YgdGhlIFBlcnNpYW4ga2luZywgb24gYmVpbmcgYXNrZWQgYnkgdGhlbSB3aGV0aGVyIHRoZSBlbWJhc3N5IHdhcyB0aGVyZSBpbiBhIHByaXZhdGUgb3IgYSBwdWJsaWMgY2FwYWNpdHksIHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JZiB3ZSBzdWNjZWVkLCBpbiBhIHB1YmxpYyBjYXBhY2l0eTsgaWYgd2UgZmFpbCwgaW4gYSBwcml2YXRlLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBBcmdpbGVvbmlzLCB0aGUgbW90aGVyIG9mIEJyYXNpZGFzLCB3aGVuIHNvbWUgQW1waGlwb2xpdGFucyB3aG8gaGFkIGNvbWUgdG8gU3BhcnRhIHBhaWQgaGVyIGEgdmlzaXQsIGFza2VkIHRoZW0gaWYgQnJhc2lkYXMgaGFkIGRpZWQgbm9ibHkgYW5kIGluIGEgbWFubmVyIHdvcnRoeSBvZiBTcGFydGEuIFRoZW4gdGhleSBncmVhdGx5IGV4dG9sbGVkIHRoZSBtYW4gYW5kIHNhaWQgdGhhdCBTcGFydGEgaGFkIG5vdCBzdWNoIGFub3RoZXIsIHRvIHdoaWNoIHNoZSBhbnN3ZXJlZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNheSBub3Qgc28sIFN0cmFuZ2VyczsgQnJhc2lkYXMgd2FzIG5vYmxlIGFuZCBicmF2ZSwgYnV0IFNwYXJ0YSBoYXMgbWFueSBiZXR0ZXIgbWVuIHRoYW4gaGUuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2VuYXRvcnMgd2VyZSBhdCBmaXJzdCBhcHBvaW50ZWQgYnkgTHljdXJndXMgaGltc2VsZiwgYXMgSSBoYXZlIHNhaWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDUuNyIgdmFsaWQ9InllcyI+Q2hhcHRlciB2LiA3LiBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBmcm9tIHRob3NlIHdobyBzaGFyZWQgaGlzIGNvdW5zZWxzOyBidXQgYWZ0ZXJ3YXJkcyBoZSBhcnJhbmdlZCB0aGF0IGFueSB2YWNhbmN5IGNhdXNlZCBieSBkZWF0aCBzaG91bGQgYmUgZmlsbGVkIGJ5IHRoZSBtYW4gZWxlY3RlZCBhcyBtb3N0IGRlc2VydmluZyBvdXQgb2YgdGhvc2UgYWJvdmUgc2l4dHkgeWVhcnMgb2YgYWdlLiBBbmQgb2YgYWxsIHRoZSBjb250ZXN0cyBpbiB0aGUgd29ybGQgdGhpcyB3b3VsZCBzZWVtIHRvIGhhdmUgYmVlbiB0aGUgZ3JlYXRlc3QgYW5kIHRoZSBtb3N0IGhvdGx5IGRpc3B1dGVkLiBGb3IgaXQgd2FzIG5vdCB0aGUgc3dpZnRlc3Qgb2YgdGhlIHN3aWZ0LCBub3IgdGhlIHN0cm9uZ2VzdCBvZiB0aGUgc3Ryb25nLCBidXQgdGhlIGJlc3QgYW5kIHdpc2VzdCBvZiB0aGUgZ29vZCBhbmQgd2lzZSB3aG8gd2FzIHRvIGJlIGVsZWN0ZWQsIGFuZCBoYXZlIGZvciB0aGUgcmVzdCBvZiBoaXMgbGlmZSwgYXMgYSB2aWN0b3IncyBwcml6ZSBmb3IgZXhjZWxsZW5jZSwgd2hhdCBJIG1heSBjYWxsIHRoZSBzdXByZW1lIHBvd2VyIGluIHRoZSBzdGF0ZSwgbG9yZCBhcyBoZSB3YXMgb2YgbGlmZSBhbmQgZGVhdGgsIGhvbm91ciBhbmQgZGlzaG9ub3VyLCBhbmQgYWxsIHRoZSBncmVhdGVzdCBpc3N1ZXMgb2YgbGlmZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGVsZWN0aW9uIHdhcyBtYWRlIGluIHRoZSBmb2xsb3dpbmcgbWFubmVyLiBBbiBhc3NlbWJseSBvZiB0aGUgcGVvcGxlIGhhdmluZyBiZWVuIGNvbnZlbmVkLCBjaG9zZW4gbWVuIHdlcmUgc2h1dCB1cCBpbiBhIHJvb20gbmVhciBieSBzbyB0aGF0IHRoZXkgY291bGQgbmVpdGhlciBzZWUgbm9yIGJlIHNlZW4sIGJ1dCBvbmx5IGhlYXIgdGhlIHNob3V0cyBvZiB0aGUgYXNzZW1ibHkuIEZvciBhcyBpbiBvdGhlciBtYXR0ZXJzLCBzbyBoZXJlLCB0aGUgY3JpZXMgb2YgdGhlIGFzc2VtYmx5IGRlY2lkZWQgYmV0d2VlbiB0aGUgY29tcGV0aXRvcnMuIFRoZXNlIGRpZCBub3QgYXBwZWFyIGluIGEgYm9keSwgYnV0IGVhY2ggb25lIHdhcyBpbnRyb2R1Y2VkIHNlcGFyYXRlbHksIGFzIHRoZSBsb3QgZmVsbCwgYW5kIHBhc3NlZCBzaWxlbnRseSB0aHJvdWdoIHRoZSBhc3NlbWJseS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGUgc2VjbHVkZWQganVkZ2VzLCB3aG8gaGFkIHdyaXRpbmctdGFibGV0cyB3aXRoIHRoZW0sIHJlY29yZGVkIGluIGVhY2ggY2FzZSB0aGUgbG91ZG5lc3Mgb2YgdGhlIHNob3V0aW5nLCBub3Qga25vd2luZyBmb3Igd2hvbSBpdCB3YXMgZ2l2ZW4sIGJ1dCBvbmx5IHRoYXQgaGUgd2FzIGludHJvZHVjZWQgZmlyc3QsIHNlY29uZCwgb3IgdGhpcmQsIGFuZCBzbyBvbi4gV2hvZXZlciB3YXMgZ3JlZXRlZCB3aXRoIHRoZSBtb3N0IGFuZCBsb3VkZXN0IHNob3V0aW5nLCBoaW0gdGhleSBkZWNsYXJlZCBlbGVjdGVkLiBUaGUgdmljdG9yIHRoZW4gc2V0IGEgd3JlYXRoIHVwb24gaGlzIGhlYWQgYW5kIHZpc2l0ZWQgaW4gb3JkZXIgdGhlIHRlbXBsZXMgb2YgdGhlIGdvZHMuIEhlIHdhcyBmb2xsb3dlZCBieSBncmVhdCBudW1iZXJzIG9mIHlvdW5nIG1lbiwgd2hvIHByYWlzZWQgYW5kIGV4dG9sbGVkIGhpbSwgYXMgd2VsbCBhcyBieSBtYW55IHdvbWVuLCB3aG8gY2VsZWJyYXRlZCBoaXMgZXhjZWxsZW5jZSBpbiBzb25ncywgYW5kIGR3ZWx0IG9uIHRoZSBoYXBwaW5lc3Mgb2YgaGlzIGxpZmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkVhY2ggb2YgaGlzIHJlbGF0aW9ucyBhbmQgZnJpZW5kcyBzZXQgYSByZXBhc3QgYmVmb3JlIGhpbSwgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSBjaXR5IGhvbm91cnMgdGhlZSB3aXRoIHRoaXMgdGFibGUuPC9xPiBXaGVuIGhlIGhhZCBmaW5pc2hlZCBoaXMgY2lyY3VpdCwgaGUgd2VudCBvZmYgdG8gaGlzIG1lc3MtdGFibGUuIEhlcmUgaGUgZmFyZWQgaW4gb3RoZXIgd2F5cyBhcyB1c3VhbCwgYnV0IGEgc2Vjb25kIHBvcnRpb24gb2YgZm9vZCB3YXMgc2V0IGJlZm9yZSBoaW0sIHdoaWNoIGhlIHRvb2sgYW5kIHB1dCBieS4gQWZ0ZXIgdGhlIHN1cHBlciB3YXMgb3ZlciwgdGhlIHdvbWVuIHdobyB3ZXJlIHJlbGF0ZWQgdG8gaGltIGJlaW5nIG5vdyBhc3NlbWJsZWQgYXQgdGhlIGRvb3Igb2YgdGhlIG1lc3MtaGFsbCwgaGUgY2FsbGVkIHRvIGhpbSB0aGUgb25lIHdob20gaGUgbW9zdCBlc3RlZW1lZCBhbmQgZ2F2ZSBoZXIgdGhlIHBvcnRpb24gaGUgaGFkIHNhdmVkLCBzYXlpbmcgdGhhdCBoZSBoYWQgcmVjZWl2ZWQgaXQgYXMgYSBtZWVkIG9mIGV4Y2VsbGVuY2UsIGFuZCBhcyBzdWNoIGdhdmUgaXQgdG8gaGVyLiBVcG9uIHRoaXMsIHNoZSB0b28gd2FzIGxhdWRlZCBieSB0aGUgcmVzdCBvZiB0aGUgd29tZW4gYW5kIGVzY29ydGVkIGJ5IHRoZW0gdG8gaGVyIGhvbWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNlbmF0b3JzIHdlcmUgYXQgZmlyc3QgYXBwb2ludGVkIGJ5IEx5Y3VyZ3VzIGhpbXNlbGYsIGFzIEkgaGF2ZSBzYWlkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNS43IiB2YWxpZD0ieWVzIj5DaGFwdGVyIHYuIDcuIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGZyb20gdGhvc2Ugd2hvIHNoYXJlZCBoaXMgY291bnNlbHM7IGJ1dCBhZnRlcndhcmRzIGhlIGFycmFuZ2VkIHRoYXQgYW55IHZhY2FuY3kgY2F1c2VkIGJ5IGRlYXRoIHNob3VsZCBiZSBmaWxsZWQgYnkgdGhlIG1hbiBlbGVjdGVkIGFzIG1vc3QgZGVzZXJ2aW5nIG91dCBvZiB0aG9zZSBhYm92ZSBzaXh0eSB5ZWFycyBvZiBhZ2UuIEFuZCBvZiBhbGwgdGhlIGNvbnRlc3RzIGluIHRoZSB3b3JsZCB0aGlzIHdvdWxkIHNlZW0gdG8gaGF2ZSBiZWVuIHRoZSBncmVhdGVzdCBhbmQgdGhlIG1vc3QgaG90bHkgZGlzcHV0ZWQuIEZvciBpdCB3YXMgbm90IHRoZSBzd2lmdGVzdCBvZiB0aGUgc3dpZnQsIG5vciB0aGUgc3Ryb25nZXN0IG9mIHRoZSBzdHJvbmcsIGJ1dCB0aGUgYmVzdCBhbmQgd2lzZXN0IG9mIHRoZSBnb29kIGFuZCB3aXNlIHdobyB3YXMgdG8gYmUgZWxlY3RlZCwgYW5kIGhhdmUgZm9yIHRoZSByZXN0IG9mIGhpcyBsaWZlLCBhcyBhIHZpY3RvcidzIHByaXplIGZvciBleGNlbGxlbmNlLCB3aGF0IEkgbWF5IGNhbGwgdGhlIHN1cHJlbWUgcG93ZXIgaW4gdGhlIHN0YXRlLCBsb3JkIGFzIGhlIHdhcyBvZiBsaWZlIGFuZCBkZWF0aCwgaG9ub3VyIGFuZCBkaXNob25vdXIsIGFuZCBhbGwgdGhlIGdyZWF0ZXN0IGlzc3VlcyBvZiBsaWZlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNS43IiB2YWxpZD0ieWVzIj5DaGFwdGVyIHYuIDcuIGYuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbGVjdGlvbiB3YXMgbWFkZSBpbiB0aGUgZm9sbG93aW5nIG1hbm5lci4gQW4gYXNzZW1ibHkgb2YgdGhlIHBlb3BsZSBoYXZpbmcgYmVlbiBjb252ZW5lZCwgY2hvc2VuIG1lbiB3ZXJlIHNodXQgdXAgaW4gYSByb29tIG5lYXIgYnkgc28gdGhhdCB0aGV5IGNvdWxkIG5laXRoZXIgc2VlIG5vciBiZSBzZWVuLCBidXQgb25seSBoZWFyIHRoZSBzaG91dHMgb2YgdGhlIGFzc2VtYmx5LiBGb3IgYXMgaW4gb3RoZXIgbWF0dGVycywgc28gaGVyZSwgdGhlIGNyaWVzIG9mIHRoZSBhc3NlbWJseSBkZWNpZGVkIGJldHdlZW4gdGhlIGNvbXBldGl0b3JzLiBUaGVzZSBkaWQgbm90IGFwcGVhciBpbiBhIGJvZHksIGJ1dCBlYWNoIG9uZSB3YXMgaW50cm9kdWNlZCBzZXBhcmF0ZWx5LCBhcyB0aGUgbG90IGZlbGwsIGFuZCBwYXNzZWQgc2lsZW50bHkgdGhyb3VnaCB0aGUgYXNzZW1ibHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIHNlY2x1ZGVkIGp1ZGdlcywgd2hvIGhhZCB3cml0aW5nLXRhYmxldHMgd2l0aCB0aGVtLCByZWNvcmRlZCBpbiBlYWNoIGNhc2UgdGhlIGxvdWRuZXNzIG9mIHRoZSBzaG91dGluZywgbm90IGtub3dpbmcgZm9yIHdob20gaXQgd2FzIGdpdmVuLCBidXQgb25seSB0aGF0IGhlIHdhcyBpbnRyb2R1Y2VkIGZpcnN0LCBzZWNvbmQsIG9yIHRoaXJkLCBhbmQgc28gb24uIFdob2V2ZXIgd2FzIGdyZWV0ZWQgd2l0aCB0aGUgbW9zdCBhbmQgbG91ZGVzdCBzaG91dGluZywgaGltIHRoZXkgZGVjbGFyZWQgZWxlY3RlZC4gVGhlIHZpY3RvciB0aGVuIHNldCBhIHdyZWF0aCB1cG9uIGhpcyBoZWFkIGFuZCB2aXNpdGVkIGluIG9yZGVyIHRoZSB0ZW1wbGVzIG9mIHRoZSBnb2RzLiBIZSB3YXMgZm9sbG93ZWQgYnkgZ3JlYXQgbnVtYmVycyBvZiB5b3VuZyBtZW4sIHdobyBwcmFpc2VkIGFuZCBleHRvbGxlZCBoaW0sIGFzIHdlbGwgYXMgYnkgbWFueSB3b21lbiwgd2hvIGNlbGVicmF0ZWQgaGlzIGV4Y2VsbGVuY2UgaW4gc29uZ3MsIGFuZCBkd2VsdCBvbiB0aGUgaGFwcGluZXNzIG9mIGhpcyBsaWZlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkVhY2ggb2YgaGlzIHJlbGF0aW9ucyBhbmQgZnJpZW5kcyBzZXQgYSByZXBhc3QgYmVmb3JlIGhpbSwgc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIGNpdHkgaG9ub3VycyB0aGVlIHdpdGggdGhpcyB0YWJsZS48L3E+IFdoZW4gaGUgaGFkIGZpbmlzaGVkIGhpcyBjaXJjdWl0LCBoZSB3ZW50IG9mZiB0byBoaXMgbWVzcy10YWJsZS4gSGVyZSBoZSBmYXJlZCBpbiBvdGhlciB3YXlzIGFzIHVzdWFsLCBidXQgYSBzZWNvbmQgcG9ydGlvbiBvZiBmb29kIHdhcyBzZXQgYmVmb3JlIGhpbSwgd2hpY2ggaGUgdG9vayBhbmQgcHV0IGJ5LiBBZnRlciB0aGUgc3VwcGVyIHdhcyBvdmVyLCB0aGUgd29tZW4gd2hvIHdlcmUgcmVsYXRlZCB0byBoaW0gYmVpbmcgbm93IGFzc2VtYmxlZCBhdCB0aGUgZG9vciBvZiB0aGUgbWVzcy1oYWxsLCBoZSBjYWxsZWQgdG8gaGltIHRoZSBvbmUgd2hvbSBoZSBtb3N0IGVzdGVlbWVkIGFuZCBnYXZlIGhlciB0aGUgcG9ydGlvbiBoZSBoYWQgc2F2ZWQsIHNheWluZyB0aGF0IGhlIGhhZCByZWNlaXZlZCBpdCBhcyBhIG1lZWQgb2YgZXhjZWxsZW5jZSwgYW5kIGFzIHN1Y2ggZ2F2ZSBpdCB0byBoZXIuIFVwb24gdGhpcywgc2hlIHRvbyB3YXMgbGF1ZGVkIGJ5IHRoZSByZXN0IG9mIHRoZSB3b21lbiBhbmQgZXNjb3J0ZWQgYnkgdGhlbSB0byBoZXIgaG9tZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIEx5Y3VyZ3VzIG1hZGUgbW9zdCBleGNlbGxlbnQgcmVndWxhdGlvbnMgaW4gdGhlIG1hdHRlciBvZiB0aGVpciBidXJpYWxzLiBUbyBiZWdpbiB3aXRoLCBoZSBkaWQgYXdheSB3aXRoIGFsbCBzdXBlcnN0aXRpb3VzIHRlcnJvciBieSBhbGxvd2luZyB0aGVtIHRvIGJ1cnkgdGhlaXIgZGVhZCB3aXRoaW4gdGhlIGNpdHksIGFuZCB0byBoYXZlIG1lbW9yaWFscyBvZiB0aGVtIG5lYXIgdGhlIHNhY3JlZCBwbGFjZXMsIHRodXMgbWFraW5nIHRoZSB5b3V0aCBmYW1pbGlhciB3aXRoIHN1Y2ggc2lnaHRzIGFuZCBhY2N1c3RvbWVkIHRvIHRoZW0sIHNvIHRoYXQgdGhleSB3ZXJlIG5vdCBjb25mb3VuZGVkIGJ5IHRoZW0sIGFuZCBoYWQgbm8gaG9ycm9yIG9mIGRlYXRoIGFzIHBvbGx1dGluZyB0aG9zZSB3aG8gdG91Y2hlZCBhIGNvcnBzZSBvciB3YWxrZWQgYW1vbmcgZ3JhdmVzLiBJbiB0aGUgc2Vjb25kIHBsYWNlLCBoZSBwZXJtaXR0ZWQgbm90aGluZyB0byBiZSBidXJpZWQgd2l0aCB0aGUgZGVhZDsgdGhleSBzaW1wbHkgY292ZXJlZCB0aGUgYm9keSB3aXRoIGEgc2NhcmxldCByb2JlIGFuZCBvbGl2ZSBsZWF2ZXMgd2hlbiB0aGV5IGxhaWQgaXQgYXdheS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VG8gaW5zY3JpYmUgdGhlIG5hbWUgb2YgdGhlIGRlYWQgdXBvbiB0aGUgdG9tYiB3YXMgbm90IGFsbG93ZWQsIHVubGVzcyBpdCB3ZXJlIHRoYXQgb2YgYSBtYW4gd2hvIGhhZCBmYWxsZW4gaW4gd2FyLCBvciB0aGF0IG9mIGEgd29tYW4gd2hvIGhhZCBkaWVkIGluIHNhY3JlZCBvZmZpY2UuIEhlIHNldCBhcGFydCBvbmx5IGEgc2hvcnQgdGltZSBmb3IgbW91cm5pbmcsIGVsZXZlbiBkYXlzOyBvbiB0aGUgdHdlbGZ0aCwgdGhleSB3ZXJlIHRvIHNhY3JpZmljZSB0byBEZW1ldGVyIGFuZCBjZWFzZSB0aGVpciBzb3Jyb3dpbmcuIEluZGVlZCwgbm90aGluZyB3YXMgbGVmdCB1bnRvdWNoZWQgYW5kIG5lZ2xlY3RlZCwgYnV0IHdpdGggYWxsIHRoZSBuZWNlc3NhcnkgZGV0YWlscyBvZiBsaWZlIGhlIGJsZW5kZWQgc29tZSBjb21tZW5kYXRpb24gb2YgdmlydHVlIG9yIHJlYnVrZSBvZiB2aWNlOyBhbmQgaGUgZmlsbGVkIHRoZSBjaXR5IGZ1bGwgb2YgZ29vZCBleGFtcGxlcywgd2hvc2UgY29udGludWFsIHByZXNlbmNlIGFuZCBzb2NpZXR5IG11c3Qgb2YgbmVjZXNzaXR5IGV4ZXJjaXNlIGEgY29udHJvbGxpbmcgYW5kIG1vdWxkaW5nIGluZmx1ZW5jZSB1cG9uIHRob3NlIHdobyB3ZXJlIHdhbGtpbmcgdGhlIHBhdGggb2YgaG9ub3VyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIEx5Y3VyZ3VzIG1hZGUgbW9zdCBleGNlbGxlbnQgcmVndWxhdGlvbnMgaW4gdGhlIG1hdHRlciBvZiB0aGVpciBidXJpYWxzLiBUbyBiZWdpbiB3aXRoLCBoZSBkaWQgYXdheSB3aXRoIGFsbCBzdXBlcnN0aXRpb3VzIHRlcnJvciBieSBhbGxvd2luZyB0aGVtIHRvIGJ1cnkgdGhlaXIgZGVhZCB3aXRoaW4gdGhlIGNpdHksIGFuZCB0byBoYXZlIG1lbW9yaWFscyBvZiB0aGVtIG5lYXIgdGhlIHNhY3JlZCBwbGFjZXMsIHRodXMgbWFraW5nIHRoZSB5b3V0aCBmYW1pbGlhciB3aXRoIHN1Y2ggc2lnaHRzIGFuZCBhY2N1c3RvbWVkIHRvIHRoZW0sIHNvIHRoYXQgdGhleSB3ZXJlIG5vdCBjb25mb3VuZGVkIGJ5IHRoZW0sIGFuZCBoYWQgbm8gaG9ycm9yIG9mIGRlYXRoIGFzIHBvbGx1dGluZyB0aG9zZSB3aG8gdG91Y2hlZCBhIGNvcnBzZSBvciB3YWxrZWQgYW1vbmcgZ3JhdmVzLiBJbiB0aGUgc2Vjb25kIHBsYWNlLCBoZSBwZXJtaXR0ZWQgbm90aGluZyB0byBiZSBidXJpZWQgd2l0aCB0aGUgZGVhZDsgdGhleSBzaW1wbHkgY292ZXJlZCB0aGUgYm9keSB3aXRoIGEgc2NhcmxldCByb2JlIGFuZCBvbGl2ZSBsZWF2ZXMgd2hlbiB0aGV5IGxhaWQgaXQgYXdheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRvIGluc2NyaWJlIHRoZSBuYW1lIG9mIHRoZSBkZWFkIHVwb24gdGhlIHRvbWIgd2FzIG5vdCBhbGxvd2VkLCB1bmxlc3MgaXQgd2VyZSB0aGF0IG9mIGEgbWFuIHdobyBoYWQgZmFsbGVuIGluIHdhciwgb3IgdGhhdCBvZiBhIHdvbWFuIHdobyBoYWQgZGllZCBpbiBzYWNyZWQgb2ZmaWNlLiBIZSBzZXQgYXBhcnQgb25seSBhIHNob3J0IHRpbWUgZm9yIG1vdXJuaW5nLCBlbGV2ZW4gZGF5czsgb24gdGhlIHR3ZWxmdGgsIHRoZXkgd2VyZSB0byBzYWNyaWZpY2UgdG8gRGVtZXRlciBhbmQgY2Vhc2UgdGhlaXIgc29ycm93aW5nLiBJbmRlZWQsIG5vdGhpbmcgd2FzIGxlZnQgdW50b3VjaGVkIGFuZCBuZWdsZWN0ZWQsIGJ1dCB3aXRoIGFsbCB0aGUgbmVjZXNzYXJ5IGRldGFpbHMgb2YgbGlmZSBoZSBibGVuZGVkIHNvbWUgY29tbWVuZGF0aW9uIG9mIHZpcnR1ZSBvciByZWJ1a2Ugb2YgdmljZTsgYW5kIGhlIGZpbGxlZCB0aGUgY2l0eSBmdWxsIG9mIGdvb2QgZXhhbXBsZXMsIHdob3NlIGNvbnRpbnVhbCBwcmVzZW5jZSBhbmQgc29jaWV0eSBtdXN0IG9mIG5lY2Vzc2l0eSBleGVyY2lzZSBhIGNvbnRyb2xsaW5nIGFuZCBtb3VsZGluZyBpbmZsdWVuY2UgdXBvbiB0aG9zZSB3aG8gd2VyZSB3YWxraW5nIHRoZSBwYXRoIG9mIGhvbm91ci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgdGhlIHJlYXNvbiB3aHkgaGUgZGlkIG5vdCBwZXJtaXQgdGhlbSB0byBsaXZlIGFicm9hZCBhdCB0aGVpciBwbGVhc3VyZSBhbmQgd2FuZGVyIGluIHN0cmFuZ2UgbGFuZHMsIGFzc3VtaW5nIGZvcmVpZ24gaGFiaXRzIGFuZCBpbWl0YXRpbmcgdGhlIGxpdmVzIG9mIHBlb3BsZXMgd2hvIHdlcmUgd2l0aG91dCB0cmFpbmluZyBhbmQgbGl2ZWQgdW5kZXIgZGlmZmVyZW50IGZvcm1zIG9mIGdvdmVybm1lbnQuIE5heSBtb3JlLCBoZSBhY3R1YWxseSBkcm92ZSBhd2F5IGZyb20gdGhlIGNpdHkgdGhlIG11bHRpdHVkZXMgd2hpY2ggc3RyZWFtZWQgaW4gdGhlcmUgZm9yIG5vIHVzZWZ1bCBwdXJwb3NlLCBub3QgYmVjYXVzZSBoZSBmZWFyZWQgdGhleSBtaWdodCBiZWNvbWUgaW1pdGF0b3JzIG9mIGhpcyBmb3JtIG9mIGdvdmVybm1lbnQgYW5kIGxlYXJuIHVzZWZ1bCBsZXNzb25zIGluIHZpcnR1ZSwgYXMgVGh1Y3lkaWRlcyBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBGdW5lcmFsIE9yYXRpb24gb2YgUGVyaWNsZXMsPGJpYmwgZGVmYXVsdD0iTk8iIG49IlRodWMuIDIuMzkuMSIgdmFsaWQ9InllcyI+IGlpLiAzOSwgMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYnV0IHJhdGhlciB0aGF0IHRoZXkgbWlnaHQgbm90IGJlY29tZSBpbiBhbnkgd2lzZSB0ZWFjaGVycyBvZiBldmlsLiBGb3IgYWxvbmcgd2l0aCBzdHJhbmdlIHBlb3BsZSwgc3RyYW5nZSBkb2N0cmluZXMgbXVzdCBjb21lIGluOyAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgbm92ZWwgZG9jdHJpbmVzIGJyaW5nIG5vdmVsIGRlY2lzaW9ucywgZnJvbSB3aGljaCB0aGVyZSBtdXN0IGFyaXNlIG1hbnkgZmVlbGluZ3MgYW5kIHJlc29sdXRpb25zIHdoaWNoIGRlc3Ryb3kgdGhlIGhhcm1vbnkgb2YgdGhlIGV4aXN0aW5nIHBvbGl0aWNhbCBvcmRlci4gVGhlcmVmb3JlIGhlIHRob3VnaHQgaXQgbW9yZSBuZWNlc3NhcnkgdG8ga2VlcCBiYWQgbWFubmVycyBhbmQgY3VzdG9tcyBmcm9tIGludmFkaW5nIGFuZCBmaWxsaW5nIHRoZSBjaXR5IHRoYW4gaXQgd2FzIHRvIGtlZXAgb3V0IGluZmVjdGlvdXMgZGlzZWFzZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSByZWFzb24gd2h5IGhlIGRpZCBub3QgcGVybWl0IHRoZW0gdG8gbGl2ZSBhYnJvYWQgYXQgdGhlaXIgcGxlYXN1cmUgYW5kIHdhbmRlciBpbiBzdHJhbmdlIGxhbmRzLCBhc3N1bWluZyBmb3JlaWduIGhhYml0cyBhbmQgaW1pdGF0aW5nIHRoZSBsaXZlcyBvZiBwZW9wbGVzIHdobyB3ZXJlIHdpdGhvdXQgdHJhaW5pbmcgYW5kIGxpdmVkIHVuZGVyIGRpZmZlcmVudCBmb3JtcyBvZiBnb3Zlcm5tZW50LiBOYXkgbW9yZSwgaGUgYWN0dWFsbHkgZHJvdmUgYXdheSBmcm9tIHRoZSBjaXR5IHRoZSBtdWx0aXR1ZGVzIHdoaWNoIHN0cmVhbWVkIGluIHRoZXJlIGZvciBubyB1c2VmdWwgcHVycG9zZSwgbm90IGJlY2F1c2UgaGUgZmVhcmVkIHRoZXkgbWlnaHQgYmVjb21lIGltaXRhdG9ycyBvZiBoaXMgZm9ybSBvZiBnb3Zlcm5tZW50IGFuZCBsZWFybiB1c2VmdWwgbGVzc29ucyBpbiB2aXJ0dWUsIGFzIFRodWN5ZGlkZXMgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBGdW5lcmFsIE9yYXRpb24gb2YgUGVyaWNsZXMsPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMi4zOS4xIiB2YWxpZD0ieWVzIj4gaWkuIDM5LCAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBidXQgcmF0aGVyIHRoYXQgdGhleSBtaWdodCBub3QgYmVjb21lIGluIGFueSB3aXNlIHRlYWNoZXJzIG9mIGV2aWwuIEZvciBhbG9uZyB3aXRoIHN0cmFuZ2UgcGVvcGxlLCBzdHJhbmdlIGRvY3RyaW5lcyBtdXN0IGNvbWUgaW47IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMi4zOS4xIiB2YWxpZD0ieWVzIj4gaWkuIDM5LCAxLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBub3ZlbCBkb2N0cmluZXMgYnJpbmcgbm92ZWwgZGVjaXNpb25zLCBmcm9tIHdoaWNoIHRoZXJlIG11c3QgYXJpc2UgbWFueSBmZWVsaW5ncyBhbmQgcmVzb2x1dGlvbnMgd2hpY2ggZGVzdHJveSB0aGUgaGFybW9ueSBvZiB0aGUgZXhpc3RpbmcgcG9saXRpY2FsIG9yZGVyLiBUaGVyZWZvcmUgaGUgdGhvdWdodCBpdCBtb3JlIG5lY2Vzc2FyeSB0byBrZWVwIGJhZCBtYW5uZXJzIGFuZCBjdXN0b21zIGZyb20gaW52YWRpbmcgYW5kIGZpbGxpbmcgdGhlIGNpdHkgdGhhbiBpdCB3YXMgdG8ga2VlcCBvdXQgaW5mZWN0aW91cyBkaXNlYXNlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGluIGFsbCB0aGlzIHRoZXJlIGlzIG5vIHRyYWNlIG9mIGluanVzdGljZSBvciBhcnJvZ2FuY2UsIHdoaWNoIHNvbWUgYXR0cmlidXRlIHRvIHRoZSBsYXdzIG9mIEx5Y3VyZ3VzLCBkZWNsYXJpbmcgdGhlbSBlZmZpY2FjaW91cyBpbiBwcm9kdWNpbmcgdmFsb3VyLCBidXQgZGVmZWN0aXZlIGluIHByb2R1Y2luZyByaWdodGVvdXNuZXNzLiBUaGUgc28tY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+a3J1cHRlaWEsPC9xPiBvciA8ZW1waD5zZWNyZXQgc2VydmljZTwvZW1waD4sIG9mIHRoZSBTcGFydGFucywgaWYgdGhpcyBiZSByZWFsbHkgb25lIG9mIHRoZSBpbnN0aXR1dGlvbnMgb2YgTHljdXJndXMsIGFzIEFyaXN0b3RsZSBzYXlzIGl0IHdhcywgbWF5IGhhdmUgZ2l2ZW4gUGxhdG8gYWxzbzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTGF3cyA2MzBkIiB2YWxpZD0ieWVzIj5MYXdzLCBwLiA2MzAgZC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhpcyBvcGluaW9uIG9mIHRoZSBtYW4gYW5kIGhpcyBjaXZpbCBwb2xpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc2VjcmV0IHNlcnZpY2Ugd2FzIG9mIHRoZSBmb2xsb3dpbmcgbmF0dXJlLiBUaGUgbWFnaXN0cmF0ZXMgZnJvbSB0aW1lIHRvIHRpbWUgc2VudCBvdXQgaW50byB0aGUgY291bnRyeSBhdCBsYXJnZSB0aGUgbW9zdCBkaXNjcmVldCBvZiB0aGUgeW91bmcgd2FycmlvcnMsIGVxdWlwcGVkIG9ubHkgd2l0aCBkYWdnZXJzIGFuZCBzdWNoIHN1cHBsaWVzIGFzIHdlcmUgbmVjZXNzYXJ5LiBJbiB0aGUgZGF5IHRpbWUgdGhleSBzY2F0dGVyZWQgaW50byBvYnNjdXJlIGFuZCBvdXQgb2YgdGhlIHdheSBwbGFjZXMsIHdoZXJlIHRoZXkgaGlkIHRoZW1zZWx2ZXMgYW5kIGxheSBxdWlldDsgYnV0IGluIHRoZSBuaWdodCB0aGV5IGNhbWUgZG93biBpbnRvIHRoZSBoaWdod2F5cyBhbmQga2lsbGVkIGV2ZXJ5IEhlbG90IHdob20gdGhleSBjYXVnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9mdGVudGltZXMsIHRvbywgdGhleSBhY3R1YWxseSB0cmF2ZXJzZWQgdGhlIGZpZWxkcyB3aGVyZSBIZWxvdHMgd2VyZSB3b3JraW5nIGFuZCBzbGV3IHRoZSBzdHVyZGllc3QgYW5kIGJlc3Qgb2YgdGhlbS4gU28sIHRvbywgVGh1Y3lkaWRlcywgaW4gaGlzIGhpc3Rvcnkgb2YgdGhlIFBlbG9wb25uZXNpYW4gd2FyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gNC44MCIgdmFsaWQ9InllcyI+aXYuIDgwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0ZWxscyB1cyB0aGF0IHRoZSBIZWxvdHMgd2hvIGhhZCBiZWVuIGp1ZGdlZCBieSB0aGUgU3BhcnRhbnMgdG8gYmUgc3VwZXJpb3IgaW4gYnJhdmVyeSwgc2V0IHdyZWF0aHMgdXBvbiB0aGVpciBoZWFkcyBpbiB0b2tlbiBvZiB0aGVpciBlbWFuY2lwYXRpb24sIGFuZCB2aXNpdGVkIHRoZSB0ZW1wbGVzIG9mIHRoZSBnb2RzIGluIHByb2Nlc3Npb24sIGJ1dCBhIGxpdHRsZSB3aGlsZSBhZnRlcndhcmRzIGFsbCBkaXNhcHBlYXJlZCwgbW9yZSB0aGFuIHR3byB0aG91c2FuZCBvZiB0aGVtLCBpbiBzdWNoIGEgd2F5IHRoYXQgbm8gbWFuIHdhcyBhYmxlIHRvIHNheSwgZWl0aGVyIHRoZW4gb3IgYWZ0ZXJ3YXJkcywgaG93IHRoZXkgY2FtZSBieSB0aGVpciBkZWF0aHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBBcmlzdG90bGUgaW4gcGFydGljdWxhciBzYXlzIGFsc28gdGhhdCB0aGUgZXBob3JzLCBhcyBzb29uIGFzIHRoZXkgY2FtZSBpbnRvIG9mZmljZSwgbWFkZSBmb3JtYWwgZGVjbGFyYXRpb24gb2Ygd2FyIHVwb24gdGhlIEhlbG90cywgaW4gb3JkZXIgdGhhdCB0aGVyZSBtaWdodCBiZSBubyBpbXBpZXR5IGluIHNsYXlpbmcgdGhlbS5BbmQgaW4gb3RoZXIgd2F5cyBhbHNvIHRoZXkgd2VyZSBoYXJzaCBhbmQgY3J1ZWwgdG8gdGhlIEhlbG90cy4gRm9yIGluc3RhbmNlLCB0aGV5IHdvdWxkIGZvcmNlIHRoZW0gdG8gZHJpbmsgdG9vIG11Y2ggc3Ryb25nIHdpbmUsIGFuZCB0aGVuIGludHJvZHVjZSB0aGVtIGludG8gdGhlaXIgcHVibGljIG1lc3NlcywgdG8gc2hvdyB0aGUgeW91bmcgbWVuIHdoYXQgYSB0aGluZyBkcnVua2VubmVzcyB3YXMuIFRoZXkgYWxzbyBvcmRlcmVkIHRoZW0gdG8gc2luZyBzb25ncyBhbmQgZGFuY2UgZGFuY2VzIHRoYXQgd2VyZSBsb3cgYW5kIHJpZGljdWxvdXMsIGJ1dCB0byBsZXQgdGhlIG5vYmxlciBraW5kIGFsb25lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlcmVmb3JlIGluIGxhdGVyIHRpbWVzLCB0aGV5IHNheSwgd2hlbiB0aGUgVGhlYmFucyBtYWRlIHRoZWlyIGV4cGVkaXRpb24gaW50byBMYWNvbmlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlVuZGVyIEVwYW1pbm9uZGFzLCAzNjkgQi5DLjwvbm90ZT4gdGhleSBvcmRlcmVkIHRoZSBIZWxvdHMgd2hvbSB0aGV5IGNhcHR1cmVkIHRvIHNpbmcgdGhlIHNvbmdzIG9mIFRlcnBhbmRlciwgQWxjbWFuLCBhbmQgU3BlbmRvbiB0aGUgU3BhcnRhbjsgYnV0IHRoZXkgZGVjbGluZWQgdG8gZG8gc28sIG9uIHRoZSBwbGVhIHRoYXQgdGhlaXIgbWFzdGVycyBkaWQgbm90IGFsbG93IGl0LCB0aHVzIHByb3ZpbmcgdGhlIGNvcnJlY3RuZXNzIG9mIHRoZSBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW4gU3BhcnRhIHRoZSBmcmVlbWFuIGlzIG1vcmUgYSBmcmVlbWFuIHRoYW4gYW55d2hlcmUgZWxzZSBpbiB0aGUgd29ybGQsIGFuZCB0aGUgc2xhdmUgbW9yZSBhIHNsYXZlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBpbiBteSBvcGluaW9uLCBzdWNoIGNydWVsdGllcyB3ZXJlIGZpcnN0IHByYWN0aXNlZCBieSB0aGUgU3BhcnRhbnMgaW4gbGF0ZXIgdGltZXMsIHBhcnRpY3VsYXJseSBhZnRlciB0aGUgZ3JlYXQgZWFydGhxdWFrZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj40NjQgQi5DLiBDZi4gUGx1dGFyY2gncyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ltLiAxNiIgdmFsaWQ9InllcyI+Q2ltb24sIHh2aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hlbiB0aGUgSGVsb3RzIGFuZCBNZXNzZW5pYW5zIHRvZ2V0aGVyIHJvc2UgdXAgYWdhaW5zdCB0aGVtLCB3cm91Z2h0IHRoZSB3aWRlc3QgZGV2YXN0YXRpb24gaW4gdGhlaXIgdGVycml0b3J5LCBhbmQgYnJvdWdodCB0aGVpciBjaXR5IGludG8gdGhlIGdyZWF0ZXN0IHBlcmlsLiBJIGNlcnRhaW5seSBjYW5ub3QgYXNjcmliZSB0byBMeWN1cmd1cyBzbyBhYm9taW5hYmxlIGEgbWVhc3VyZSBhcyB0aGUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5rcnVwdGVpYSw8L3E+IGp1ZGdpbmcgb2YgaGlzIGNoYXJhY3RlciBmcm9tIGhpcyBtaWxkbmVzcyBhbmQganVzdGljZSBpbiBhbGwgb3RoZXIgaW5zdGFuY2VzLiBUbyB0aGlzIHRoZSB2b2ljZSBvZiB0aGUgZ29kIGFsc28gYm9yZSB3aXRuZXNzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiA1LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdi4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGluIGFsbCB0aGlzIHRoZXJlIGlzIG5vIHRyYWNlIG9mIGluanVzdGljZSBvciBhcnJvZ2FuY2UsIHdoaWNoIHNvbWUgYXR0cmlidXRlIHRvIHRoZSBsYXdzIG9mIEx5Y3VyZ3VzLCBkZWNsYXJpbmcgdGhlbSBlZmZpY2FjaW91cyBpbiBwcm9kdWNpbmcgdmFsb3VyLCBidXQgZGVmZWN0aXZlIGluIHByb2R1Y2luZyByaWdodGVvdXNuZXNzLiBUaGUgc28tY2FsbGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5rcnVwdGVpYSw8L3E+IG9yIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+c2VjcmV0IHNlcnZpY2U8L2VtcGg+LCBvZiB0aGUgU3BhcnRhbnMsIGlmIHRoaXMgYmUgcmVhbGx5IG9uZSBvZiB0aGUgaW5zdGl0dXRpb25zIG9mIEx5Y3VyZ3VzLCBhcyBBcmlzdG90bGUgc2F5cyBpdCB3YXMsIG1heSBoYXZlIGdpdmVuIFBsYXRvIGFsc288bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMYXdzIDYzMGQiIHZhbGlkPSJ5ZXMiPkxhd3MsIHAuIDYzMCBkLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGlzIG9waW5pb24gb2YgdGhlIG1hbiBhbmQgaGlzIGNpdmlsIHBvbGl0eS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMYXdzIDYzMGQiIHZhbGlkPSJ5ZXMiPkxhd3MsIHAuIDYzMCBkLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc2VjcmV0IHNlcnZpY2Ugd2FzIG9mIHRoZSBmb2xsb3dpbmcgbmF0dXJlLiBUaGUgbWFnaXN0cmF0ZXMgZnJvbSB0aW1lIHRvIHRpbWUgc2VudCBvdXQgaW50byB0aGUgY291bnRyeSBhdCBsYXJnZSB0aGUgbW9zdCBkaXNjcmVldCBvZiB0aGUgeW91bmcgd2FycmlvcnMsIGVxdWlwcGVkIG9ubHkgd2l0aCBkYWdnZXJzIGFuZCBzdWNoIHN1cHBsaWVzIGFzIHdlcmUgbmVjZXNzYXJ5LiBJbiB0aGUgZGF5IHRpbWUgdGhleSBzY2F0dGVyZWQgaW50byBvYnNjdXJlIGFuZCBvdXQgb2YgdGhlIHdheSBwbGFjZXMsIHdoZXJlIHRoZXkgaGlkIHRoZW1zZWx2ZXMgYW5kIGxheSBxdWlldDsgYnV0IGluIHRoZSBuaWdodCB0aGV5IGNhbWUgZG93biBpbnRvIHRoZSBoaWdod2F5cyBhbmQga2lsbGVkIGV2ZXJ5IEhlbG90IHdob20gdGhleSBjYXVnaHQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9mdGVudGltZXMsIHRvbywgdGhleSBhY3R1YWxseSB0cmF2ZXJzZWQgdGhlIGZpZWxkcyB3aGVyZSBIZWxvdHMgd2VyZSB3b3JraW5nIGFuZCBzbGV3IHRoZSBzdHVyZGllc3QgYW5kIGJlc3Qgb2YgdGhlbS4gU28sIHRvbywgVGh1Y3lkaWRlcywgaW4gaGlzIGhpc3Rvcnkgb2YgdGhlIFBlbG9wb25uZXNpYW4gd2FyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDQuODAiIHZhbGlkPSJ5ZXMiPml2LiA4MC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGVsbHMgdXMgdGhhdCB0aGUgSGVsb3RzIHdobyBoYWQgYmVlbiBqdWRnZWQgYnkgdGhlIFNwYXJ0YW5zIHRvIGJlIHN1cGVyaW9yIGluIGJyYXZlcnksIHNldCB3cmVhdGhzIHVwb24gdGhlaXIgaGVhZHMgaW4gdG9rZW4gb2YgdGhlaXIgZW1hbmNpcGF0aW9uLCBhbmQgdmlzaXRlZCB0aGUgdGVtcGxlcyBvZiB0aGUgZ29kcyBpbiBwcm9jZXNzaW9uLCBidXQgYSBsaXR0bGUgd2hpbGUgYWZ0ZXJ3YXJkcyBhbGwgZGlzYXBwZWFyZWQsIG1vcmUgdGhhbiB0d28gdGhvdXNhbmQgb2YgdGhlbSwgaW4gc3VjaCBhIHdheSB0aGF0IG5vIG1hbiB3YXMgYWJsZSB0byBzYXksIGVpdGhlciB0aGVuIG9yIGFmdGVyd2FyZHMsIGhvdyB0aGV5IGNhbWUgYnkgdGhlaXIgZGVhdGhzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDQuODAiIHZhbGlkPSJ5ZXMiPml2LiA4MC48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBBcmlzdG90bGUgaW4gcGFydGljdWxhciBzYXlzIGFsc28gdGhhdCB0aGUgZXBob3JzLCBhcyBzb29uIGFzIHRoZXkgY2FtZSBpbnRvIG9mZmljZSwgbWFkZSBmb3JtYWwgZGVjbGFyYXRpb24gb2Ygd2FyIHVwb24gdGhlIEhlbG90cywgaW4gb3JkZXIgdGhhdCB0aGVyZSBtaWdodCBiZSBubyBpbXBpZXR5IGluIHNsYXlpbmcgdGhlbS5BbmQgaW4gb3RoZXIgd2F5cyBhbHNvIHRoZXkgd2VyZSBoYXJzaCBhbmQgY3J1ZWwgdG8gdGhlIEhlbG90cy4gRm9yIGluc3RhbmNlLCB0aGV5IHdvdWxkIGZvcmNlIHRoZW0gdG8gZHJpbmsgdG9vIG11Y2ggc3Ryb25nIHdpbmUsIGFuZCB0aGVuIGludHJvZHVjZSB0aGVtIGludG8gdGhlaXIgcHVibGljIG1lc3NlcywgdG8gc2hvdyB0aGUgeW91bmcgbWVuIHdoYXQgYSB0aGluZyBkcnVua2VubmVzcyB3YXMuIFRoZXkgYWxzbyBvcmRlcmVkIHRoZW0gdG8gc2luZyBzb25ncyBhbmQgZGFuY2UgZGFuY2VzIHRoYXQgd2VyZSBsb3cgYW5kIHJpZGljdWxvdXMsIGJ1dCB0byBsZXQgdGhlIG5vYmxlciBraW5kIGFsb25lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVyZWZvcmUgaW4gbGF0ZXIgdGltZXMsIHRoZXkgc2F5LCB3aGVuIHRoZSBUaGViYW5zIG1hZGUgdGhlaXIgZXhwZWRpdGlvbiBpbnRvIExhY29uaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5VbmRlciBFcGFtaW5vbmRhcywgMzY5IEIuQy48L25vdGU+IHRoZXkgb3JkZXJlZCB0aGUgSGVsb3RzIHdob20gdGhleSBjYXB0dXJlZCB0byBzaW5nIHRoZSBzb25ncyBvZiBUZXJwYW5kZXIsIEFsY21hbiwgYW5kIFNwZW5kb24gdGhlIFNwYXJ0YW47IGJ1dCB0aGV5IGRlY2xpbmVkIHRvIGRvIHNvLCBvbiB0aGUgcGxlYSB0aGF0IHRoZWlyIG1hc3RlcnMgZGlkIG5vdCBhbGxvdyBpdCwgdGh1cyBwcm92aW5nIHRoZSBjb3JyZWN0bmVzcyBvZiB0aGUgc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW4gU3BhcnRhIHRoZSBmcmVlbWFuIGlzIG1vcmUgYSBmcmVlbWFuIHRoYW4gYW55d2hlcmUgZWxzZSBpbiB0aGUgd29ybGQsIGFuZCB0aGUgc2xhdmUgbW9yZSBhIHNsYXZlLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGluIG15IG9waW5pb24sIHN1Y2ggY3J1ZWx0aWVzIHdlcmUgZmlyc3QgcHJhY3Rpc2VkIGJ5IHRoZSBTcGFydGFucyBpbiBsYXRlciB0aW1lcywgcGFydGljdWxhcmx5IGFmdGVyIHRoZSBncmVhdCBlYXJ0aHF1YWtlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NDY0IEIuQy4gQ2YuIFBsdXRhcmNoJ3MgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ltLiAxNiIgdmFsaWQ9InllcyI+Q2ltb24sIHh2aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hlbiB0aGUgSGVsb3RzIGFuZCBNZXNzZW5pYW5zIHRvZ2V0aGVyIHJvc2UgdXAgYWdhaW5zdCB0aGVtLCB3cm91Z2h0IHRoZSB3aWRlc3QgZGV2YXN0YXRpb24gaW4gdGhlaXIgdGVycml0b3J5LCBhbmQgYnJvdWdodCB0aGVpciBjaXR5IGludG8gdGhlIGdyZWF0ZXN0IHBlcmlsLiBJIGNlcnRhaW5seSBjYW5ub3QgYXNjcmliZSB0byBMeWN1cmd1cyBzbyBhYm9taW5hYmxlIGEgbWVhc3VyZSBhcyB0aGUgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaW0uIDE2IiB2YWxpZD0ieWVzIj5DaW1vbiwgeHZpLjwvYmlibD4KICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5rcnVwdGVpYSw8L3E+IGp1ZGdpbmcgb2YgaGlzIGNoYXJhY3RlciBmcm9tIGhpcyBtaWxkbmVzcyBhbmQganVzdGljZSBpbiBhbGwgb3RoZXIgaW5zdGFuY2VzLiBUbyB0aGlzIHRoZSB2b2ljZSBvZiB0aGUgZ29kIGFsc28gYm9yZSB3aXRuZXNzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNS4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHYuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNS4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHYuIDMuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhpcyBwcmluY2lwYWwgaW5zdGl0dXRpb25zIHdlcmUgYXQgbGFzdCBmaXJtbHkgZml4ZWQgaW4gdGhlIGN1c3RvbXMgb2YgdGhlIHBlb3BsZSwgYW5kIGhpcyBjaXZpbCBwb2xpdHkgaGFkIHN1ZmZpY2llbnQgZ3Jvd3RoIGFuZCBzdHJlbmd0aCB0byBzdXBwb3J0IGFuZCBwcmVzZXJ2ZSBpdHNlbGYsIGp1c3QgYXMgUGxhdG8gc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gVGltLiAzN2MiIHZhbGlkPSJ5ZXMiPlRpbWFldXMsIHAuIDM3IGMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoYXQgRGVpdHkgd2FzIHJlam9pY2VkIHRvIHNlZSBIaXMgdW5pdmVyc2UgY29tZSBpbnRvIGJlaW5nIGFuZCBtYWtlIGl0cyBmaXJzdCBtb3Rpb24sIHNvIEx5Y3VyZ3VzIHdhcyBmaWxsZWQgd2l0aCBqb3lmdWwgc2F0aXNmYWN0aW9uIGluIHRoZSBtYWduaXR1ZGUgYW5kIGJlYXV0eSBvZiBoaXMgc3lzdGVtIG9mIGxhd3MsIG5vdyB0aGF0IGl0IHdhcyBpbiBvcGVyYXRpb24gYW5kIG1vdmluZyBhbG9uZyBpdHMgcGF0aHdheS4gSGUgdGhlcmVmb3JlIGFyZGVudGx5IGRlc2lyZWQsIHNvIGZhciBhcyBodW1hbiBmb3JldGhvdWdodCBjb3VsZCBhY2NvbXBsaXNoIHRoZSB0YXNrLCB0byBtYWtlIGl0IGltbW9ydGFsLCBhbmQgbGV0IGl0IGdvIGRvd24gdW5jaGFuZ2VkIHRvIGZ1dHVyZSBhZ2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgaGUgYXNzZW1ibGVkIHRoZSB3aG9sZSBwZW9wbGUsIGFuZCB0b2xkIHRoZW0gdGhhdCB0aGUgcHJvdmlzaW9ucyBhbHJlYWR5IG1hZGUgd2VyZSBzdWZmaWNpZW50bHkgYWRhcHRlZCB0byBwcm9tb3RlIHRoZSBwcm9zcGVyaXR5IGFuZCB2aXJ0dWUgb2YgdGhlIHN0YXRlLCBidXQgdGhhdCBzb21ldGhpbmcgb2YgdGhlIGdyZWF0ZXN0IHdlaWdodCBhbmQgaW1wb3J0YW5jZSByZW1haW5lZCwgd2hpY2ggaGUgY291bGQgbm90IGxheSBiZWZvcmUgdGhlbSB1bnRpbCBoZSBoYWQgY29uc3VsdGVkIHRoZSBnb2QgYXQgRGVscGhpLiBUaGV5IG11c3QgdGhlcmVmb3JlIGFiaWRlIGJ5IHRoZSBlc3RhYmxpc2hlZCBsYXdzIGFuZCBtYWtlIG5vIGNoYW5nZSBub3IgYWx0ZXJhdGlvbiBpbiB0aGVtIHVudGlsIGhlIGNhbWUgYmFjayBmcm9tIERlbHBoaSBpbiBwZXJzb247IHRoZW4gaGUgd291bGQgZG8gd2hhdHNvZXZlciB0aGUgZ29kIHRob3VnaHQgYmVzdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGV5IGFsbCBhZ3JlZWQgdG8gdGhpcyBhbmQgYmFkZSBoaW0gc2V0IG91dCBvbiBoaXMgam91cm5leSwgaGUgZXhhY3RlZCBhbiBvYXRoIGZyb20gdGhlIGtpbmdzIGFuZCB0aGUgc2VuYXRvcnMsIGFuZCBhZnRlcndhcmRzIGZyb20gdGhlIHJlc3Qgb2YgdGhlIGNpdGl6ZW5zLCB0aGF0IHRoZXkgd291bGQgYWJpZGUgYnkgdGhlIGVzdGFibGlzaGVkIHBvbGl0eSBhbmQgb2JzZXJ2ZSBpdCB1bnRpbCBMeWN1cmd1cyBzaG91bGQgY29tZSBiYWNrOyB0aGVuIGhlIHNldCBvdXQgZm9yIERlbHBoaS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoaXMgcHJpbmNpcGFsIGluc3RpdHV0aW9ucyB3ZXJlIGF0IGxhc3QgZmlybWx5IGZpeGVkIGluIHRoZSBjdXN0b21zIG9mIHRoZSBwZW9wbGUsIGFuZCBoaXMgY2l2aWwgcG9saXR5IGhhZCBzdWZmaWNpZW50IGdyb3d0aCBhbmQgc3RyZW5ndGggdG8gc3VwcG9ydCBhbmQgcHJlc2VydmUgaXRzZWxmLCBqdXN0IGFzIFBsYXRvIHNheXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBUaW0uIDM3YyIgdmFsaWQ9InllcyI+VGltYWV1cywgcC4gMzcgYy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBEZWl0eSB3YXMgcmVqb2ljZWQgdG8gc2VlIEhpcyB1bml2ZXJzZSBjb21lIGludG8gYmVpbmcgYW5kIG1ha2UgaXRzIGZpcnN0IG1vdGlvbiwgc28gTHljdXJndXMgd2FzIGZpbGxlZCB3aXRoIGpveWZ1bCBzYXRpc2ZhY3Rpb24gaW4gdGhlIG1hZ25pdHVkZSBhbmQgYmVhdXR5IG9mIGhpcyBzeXN0ZW0gb2YgbGF3cywgbm93IHRoYXQgaXQgd2FzIGluIG9wZXJhdGlvbiBhbmQgbW92aW5nIGFsb25nIGl0cyBwYXRod2F5LiBIZSB0aGVyZWZvcmUgYXJkZW50bHkgZGVzaXJlZCwgc28gZmFyIGFzIGh1bWFuIGZvcmV0aG91Z2h0IGNvdWxkIGFjY29tcGxpc2ggdGhlIHRhc2ssIHRvIG1ha2UgaXQgaW1tb3J0YWwsIGFuZCBsZXQgaXQgZ28gZG93biB1bmNoYW5nZWQgdG8gZnV0dXJlIGFnZXMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gVGltLiAzN2MiIHZhbGlkPSJ5ZXMiPlRpbWFldXMsIHAuIDM3IGMuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBhc3NlbWJsZWQgdGhlIHdob2xlIHBlb3BsZSwgYW5kIHRvbGQgdGhlbSB0aGF0IHRoZSBwcm92aXNpb25zIGFscmVhZHkgbWFkZSB3ZXJlIHN1ZmZpY2llbnRseSBhZGFwdGVkIHRvIHByb21vdGUgdGhlIHByb3NwZXJpdHkgYW5kIHZpcnR1ZSBvZiB0aGUgc3RhdGUsIGJ1dCB0aGF0IHNvbWV0aGluZyBvZiB0aGUgZ3JlYXRlc3Qgd2VpZ2h0IGFuZCBpbXBvcnRhbmNlIHJlbWFpbmVkLCB3aGljaCBoZSBjb3VsZCBub3QgbGF5IGJlZm9yZSB0aGVtIHVudGlsIGhlIGhhZCBjb25zdWx0ZWQgdGhlIGdvZCBhdCBEZWxwaGkuIFRoZXkgbXVzdCB0aGVyZWZvcmUgYWJpZGUgYnkgdGhlIGVzdGFibGlzaGVkIGxhd3MgYW5kIG1ha2Ugbm8gY2hhbmdlIG5vciBhbHRlcmF0aW9uIGluIHRoZW0gdW50aWwgaGUgY2FtZSBiYWNrIGZyb20gRGVscGhpIGluIHBlcnNvbjsgdGhlbiBoZSB3b3VsZCBkbyB3aGF0c29ldmVyIHRoZSBnb2QgdGhvdWdodCBiZXN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhleSBhbGwgYWdyZWVkIHRvIHRoaXMgYW5kIGJhZGUgaGltIHNldCBvdXQgb24gaGlzIGpvdXJuZXksIGhlIGV4YWN0ZWQgYW4gb2F0aCBmcm9tIHRoZSBraW5ncyBhbmQgdGhlIHNlbmF0b3JzLCBhbmQgYWZ0ZXJ3YXJkcyBmcm9tIHRoZSByZXN0IG9mIHRoZSBjaXRpemVucywgdGhhdCB0aGV5IHdvdWxkIGFiaWRlIGJ5IHRoZSBlc3RhYmxpc2hlZCBwb2xpdHkgYW5kIG9ic2VydmUgaXQgdW50aWwgTHljdXJndXMgc2hvdWxkIGNvbWUgYmFjazsgdGhlbiBoZSBzZXQgb3V0IGZvciBEZWxwaGkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gcmVhY2hpbmcgdGhlIG9yYWNsZSwgaGUgc2FjcmlmaWNlZCB0byB0aGUgZ29kLCBhbmQgYXNrZWQgaWYgdGhlIGxhd3Mgd2hpY2ggaGUgaGFkIGVzdGFibGlzaGVkIHdlcmUgZ29vZCwgYW5kIHN1ZmZpY2llbnQgdG8gcHJvbW90ZSBhIGNpdHkncyBwcm9zcGVyaXR5IGFuZCB2aXJ0dWUuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXBvbGxvIGFuc3dlcmVkIHRoYXQgdGhlIGxhd3Mgd2hpY2ggaGUgaGFkIGVzdGFibGlzaGVkIHdlcmUgZ29vZCwgYW5kIHRoYXQgdGhlIGNpdHkgd291bGQgY29udGludWUgdG8gYmUgaGVsZCBpbiBoaWdoZXN0IGhvbm91ciB3aGlsZSBpdCBrZXB0IHRvIHRoZSBwb2xpdHkgb2YgTHljdXJndXMuIFRoaXMgb3JhY2xlIEx5Y3VyZ3VzIHdyb3RlIGRvd24sIGFuZCBzZW50IGl0IHRvIFNwYXJ0YS4gQnV0IGZvciBoaXMgb3duIHBhcnQsIGhlIHNhY3JpZmljZWQgYWdhaW4gdG8gdGhlIGdvZCwgdG9vayBhZmZlY3Rpb25hdGUgbGVhdmUgb2YgaGlzIGZyaWVuZHMgYW5kIG9mIGhpcyBzb24sIGFuZCByZXNvbHZlZCBuZXZlciB0byByZWxlYXNlIGhpcyBmZWxsb3ctY2l0aXplbnMgZnJvbSB0aGVpciBvYXRoLCBidXQgb2YgaGlzIG93biBhY2NvcmQgdG8gcHV0IGFuIGVuZCB0byBoaXMgbGlmZSB3aGVyZSBoZSB3YXMuIEhlIGhhZCByZWFjaGVkIGFuIGFnZSBpbiB3aGljaCBsaWZlIHdhcyBub3QgeWV0IGEgYnVyZGVuLCBhbmQgZGVhdGggbm8gbG9uZ2VyIGEgdGVycm9yOyB3aGVuIGhlIGFuZCBoaXMgZnJpZW5kcywgbW9yZW92ZXIsIGFwcGVhcmVkIHRvIGJlIHN1ZmZpY2llbnRseSBwcm9zcGVyb3VzIGFuZCBoYXBweS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgdGhlcmVmb3JlIGFic3RhaW5lZCBmcm9tIGZvb2QgdGlsbCBoZSBkaWVkLCBjb25zaWRlcmluZyB0aGF0IGV2ZW4gdGhlIGRlYXRoIG9mIGEgc3RhdGVzbWFuIHNob3VsZCBiZSBvZiBzZXJ2aWNlIHRvIHRoZSBzdGF0ZSwgYW5kIHRoZSBlbmRpbmcgb2YgaGlzIGxpZmUgbm90IHZvaWQgb2YgZWZmZWN0LCBidXQgcmVjb2duaXplZCBhcyBhIHZpcnR1b3VzIGRlZWQuIEFzIGZvciBoaW1zZWxmLCBzaW5jZSBoZSBoYWQgd3JvdWdodCBvdXQgZnVsbHkgdGhlIG5vYmxlc3QgdGFza3MsIHRoZSBlbmQgb2YgbGlmZSB3b3VsZCBhY3R1YWxseSBiZSBhIGNvbnN1bW1hdGlvbiBvZiBoaXMgZ29vZCBmb3J0dW5lIGFuZCBoYXBwaW5lc3M7IGFuZCBhcyBmb3IgaGlzIGZlbGxvdy1jaXRpemVucywgaGUgd291bGQgbWFrZSBoaXMgZGVhdGggdGhlIGd1YXJkaWFuLCBhcyBpdCB3ZXJlLCBvZiBhbGwgdGhlIGJsZXNzaW5ncyBoZSBoYWQgc2VjdXJlZCBmb3IgdGhlbSBkdXJpbmcgaGlzIGxpZmUsIHNpbmNlIHRoZXkgaGFkIHN3b3JuIHRvIG9ic2VydmUgYW5kIG1haW50YWluIGhpcyBwb2xpdHkgdW50aWwgaGUgc2hvdWxkIHJldHVybi4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGhlIHdhcyBub3QgZGVjZWl2ZWQgaW4gaGlzIGV4cGVjdGF0aW9ucywgc28gbG9uZyBkaWQgaGlzIGNpdHkgaGF2ZSB0aGUgZmlyc3QgcmFuayBpbiBIZWxsYXMgZm9yIGdvb2QgZ292ZXJubWVudCBhbmQgcmVwdXRhdGlvbiwgb2JzZXJ2aW5nIGFzIHNoZSBkaWQgZm9yIGZpdmUgaHVuZHJlZCB5ZWFycyB0aGUgbGF3cyBvZiBMeWN1cmd1cywgaW4gd2hpY2ggbm8gb25lIG9mIHRoZSBmb3VydGVlbiBraW5ncyB3aG8gZm9sbG93ZWQgaGltIG1hZGUgYW55IGNoYW5nZSwgZG93biB0byBBZ2lzIHRoZSBzb24gb2YgQXJjaGlkYW11cy4gRm9yIHRoZSBpbnN0aXR1dGlvbiBvZiB0aGUgZXBob3JzIGRpZCBub3Qgd2Vha2VuLCBidXQgcmF0aGVyIHN0cmVuZ3RoZW5lZCB0aGUgY2l2aWwgcG9saXR5LCBhbmQgdGhvdWdoIGl0IHdhcyB0aG91Z2h0IHRvIGhhdmUgYmVlbiBkb25lIGluIHRoZSBpbnRlcmVzdHMgb2YgdGhlIHBlb3BsZSwgaXQgcmVhbGx5IG1hZGUgdGhlIGFyaXN0b2NyYWN5IG1vcmUgcG93ZXJmdWwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFwb2xsbyBhbnN3ZXJlZCB0aGF0IHRoZSBsYXdzIHdoaWNoIGhlIGhhZCBlc3RhYmxpc2hlZCB3ZXJlIGdvb2QsIGFuZCB0aGF0IHRoZSBjaXR5IHdvdWxkIGNvbnRpbnVlIHRvIGJlIGhlbGQgaW4gaGlnaGVzdCBob25vdXIgd2hpbGUgaXQga2VwdCB0byB0aGUgcG9saXR5IG9mIEx5Y3VyZ3VzLiBUaGlzIG9yYWNsZSBMeWN1cmd1cyB3cm90ZSBkb3duLCBhbmQgc2VudCBpdCB0byBTcGFydGEuIEJ1dCBmb3IgaGlzIG93biBwYXJ0LCBoZSBzYWNyaWZpY2VkIGFnYWluIHRvIHRoZSBnb2QsIHRvb2sgYWZmZWN0aW9uYXRlIGxlYXZlIG9mIGhpcyBmcmllbmRzIGFuZCBvZiBoaXMgc29uLCBhbmQgcmVzb2x2ZWQgbmV2ZXIgdG8gcmVsZWFzZSBoaXMgZmVsbG93LWNpdGl6ZW5zIGZyb20gdGhlaXIgb2F0aCwgYnV0IG9mIGhpcyBvd24gYWNjb3JkIHRvIHB1dCBhbiBlbmQgdG8gaGlzIGxpZmUgd2hlcmUgaGUgd2FzLiBIZSBoYWQgcmVhY2hlZCBhbiBhZ2UgaW4gd2hpY2ggbGlmZSB3YXMgbm90IHlldCBhIGJ1cmRlbiwgYW5kIGRlYXRoIG5vIGxvbmdlciBhIHRlcnJvcjsgd2hlbiBoZSBhbmQgaGlzIGZyaWVuZHMsIG1vcmVvdmVyLCBhcHBlYXJlZCB0byBiZSBzdWZmaWNpZW50bHkgcHJvc3Blcm91cyBhbmQgaGFwcHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZXJlZm9yZSBhYnN0YWluZWQgZnJvbSBmb29kIHRpbGwgaGUgZGllZCwgY29uc2lkZXJpbmcgdGhhdCBldmVuIHRoZSBkZWF0aCBvZiBhIHN0YXRlc21hbiBzaG91bGQgYmUgb2Ygc2VydmljZSB0byB0aGUgc3RhdGUsIGFuZCB0aGUgZW5kaW5nIG9mIGhpcyBsaWZlIG5vdCB2b2lkIG9mIGVmZmVjdCwgYnV0IHJlY29nbml6ZWQgYXMgYSB2aXJ0dW91cyBkZWVkLiBBcyBmb3IgaGltc2VsZiwgc2luY2UgaGUgaGFkIHdyb3VnaHQgb3V0IGZ1bGx5IHRoZSBub2JsZXN0IHRhc2tzLCB0aGUgZW5kIG9mIGxpZmUgd291bGQgYWN0dWFsbHkgYmUgYSBjb25zdW1tYXRpb24gb2YgaGlzIGdvb2QgZm9ydHVuZSBhbmQgaGFwcGluZXNzOyBhbmQgYXMgZm9yIGhpcyBmZWxsb3ctY2l0aXplbnMsIGhlIHdvdWxkIG1ha2UgaGlzIGRlYXRoIHRoZSBndWFyZGlhbiwgYXMgaXQgd2VyZSwgb2YgYWxsIHRoZSBibGVzc2luZ3MgaGUgaGFkIHNlY3VyZWQgZm9yIHRoZW0gZHVyaW5nIGhpcyBsaWZlLCBzaW5jZSB0aGV5IGhhZCBzd29ybiB0byBvYnNlcnZlIGFuZCBtYWludGFpbiBoaXMgcG9saXR5IHVudGlsIGhlIHNob3VsZCByZXR1cm4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSB3YXMgbm90IGRlY2VpdmVkIGluIGhpcyBleHBlY3RhdGlvbnMsIHNvIGxvbmcgZGlkIGhpcyBjaXR5IGhhdmUgdGhlIGZpcnN0IHJhbmsgaW4gSGVsbGFzIGZvciBnb29kIGdvdmVybm1lbnQgYW5kIHJlcHV0YXRpb24sIG9ic2VydmluZyBhcyBzaGUgZGlkIGZvciBmaXZlIGh1bmRyZWQgeWVhcnMgdGhlIGxhd3Mgb2YgTHljdXJndXMsIGluIHdoaWNoIG5vIG9uZSBvZiB0aGUgZm91cnRlZW4ga2luZ3Mgd2hvIGZvbGxvd2VkIGhpbSBtYWRlIGFueSBjaGFuZ2UsIGRvd24gdG8gQWdpcyB0aGUgc29uIG9mIEFyY2hpZGFtdXMuIEZvciB0aGUgaW5zdGl0dXRpb24gb2YgdGhlIGVwaG9ycyBkaWQgbm90IHdlYWtlbiwgYnV0IHJhdGhlciBzdHJlbmd0aGVuZWQgdGhlIGNpdmlsIHBvbGl0eSwgYW5kIHRob3VnaCBpdCB3YXMgdGhvdWdodCB0byBoYXZlIGJlZW4gZG9uZSBpbiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUsIGl0IHJlYWxseSBtYWRlIHRoZSBhcmlzdG9jcmFjeSBtb3JlIHBvd2VyZnVsLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gdGhlIHJlaWduIG9yIEFnaXMsIGdvbGQgYW5kIHNpbHZlciBtb25leSBmaXJzdCBmbG93ZWQgaW50byBTcGFydGEsIGFuZCB3aXRoIG1vbmV5LCBncmVlZCBhbmQgYSBkZXNpcmUgZm9yIHdlYWx0aCBwcmV2YWlsZWQgdGhyb3VnaCB0aGUgYWdlbmN5IG9mIEx5c2FuZGVyLCB3aG8sIHRob3VnaCBpbmNvcnJ1cHRpYmxlIGhpbXNlbGYsIGZpbGxlZCBoaXMgY291bnRyeSB3aXRoIHRoZSBsb3ZlIG9mIHJpY2hlcyBhbmQgd2l0aCBsdXh1cnksIGJ5IGJyaW5naW5nIGhvbWUgZ29sZCBhbmQgc2lsdmVyIGZyb20gdGhlIHdhciwgYW5kIHRodXMgc3VidmVydGluZyB0aGUgbGF3cyBvZiBMeWN1cmd1cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgdGhlc2UgcmVtYWluZWQgaW4gZm9yY2UsIFNwYXJ0YSBsZWQgdGhlIGxpZmUsIG5vdCBvZiBhIGNpdHkgdW5kZXIgYSBjb25zdGl0dXRpb24sIGJ1dCBvZiBhbiBpbmRpdmlkdWFsIG1hbiB1bmRlciB0cmFpbmluZyBhbmQgZnVsbCBvZiB3aXNkb20uIE5heSByYXRoZXIsIGFzIHRoZSBwb2V0cyB3ZWF2ZSB0aGVpciB0YWxlcyBvZiBIZXJhY2xlcywgaG93IHdpdGggaGlzIGNsdWIgYW5kIGxpb24ncyBza2luIGhlIHRyYXZlcnNlZCB0aGUgd29ybGQgY2hhc3Rpc2luZyBsYXdsZXNzIGFuZCBzYXZhZ2UgdHlyYW50cywgc28gd2UgbWF5IHNheSB0aGF0IFNwYXJ0YSwgc2ltcGx5IHdpdGggdGhlIGRpc3BhdGNoLXN0YWZmIGFuZCBjbG9hayBvZiBoZXIgZW52b3lzLCBrZXB0IEhlbGxhcyBpbiB3aWxsaW5nIGFuZCBnbGFkIG9iZWRpZW5jZSwgcHV0IGRvd24gaWxsZWdhbCBvbGlnYXJjaGllcyBhbmQgdHlyYW5uaWVzIGluIHRoZSBkaWZmZXJlbnQgc3RhdGVzLCBhcmJpdHJhdGVkIHdhcnMsIGFuZCBxdWVsbGVkIHNlZGl0aW9ucywgb2Z0ZW4gd2l0aG91dCBzbyBtdWNoIGFzIG1vdmluZyBhIHNpbmdsZSBzaGllbGQsIGJ1dCBtZXJlbHkgc2VuZGluZyBvbmUgYW1iYXNzYWRvciwgd2hvc2UgY29tbWFuZHMgYWxsIGF0IG9uY2Ugb2JleWVkLCBqdXN0IGFzIGJlZXMsIHdoZW4gdGhlaXIgbGVhZGVyIGFwcGVhcnMsIHN3YXJtIHRvZ2V0aGVyIGFuZCBhcnJheSB0aGVtc2VsdmVzIGFib3V0IGhpbS4gU3VjaCBhIHN1cnBsdXMgZnVuZCBvZiBnb29kIGdvdmVybm1lbnQgYW5kIGp1c3RpY2UgZGlkIHRoZSBjaXR5IGVuam95LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIHRoZSByZWlnbiBvciBBZ2lzLCBnb2xkIGFuZCBzaWx2ZXIgbW9uZXkgZmlyc3QgZmxvd2VkIGludG8gU3BhcnRhLCBhbmQgd2l0aCBtb25leSwgZ3JlZWQgYW5kIGEgZGVzaXJlIGZvciB3ZWFsdGggcHJldmFpbGVkIHRocm91Z2ggdGhlIGFnZW5jeSBvZiBMeXNhbmRlciwgd2hvLCB0aG91Z2ggaW5jb3JydXB0aWJsZSBoaW1zZWxmLCBmaWxsZWQgaGlzIGNvdW50cnkgd2l0aCB0aGUgbG92ZSBvZiByaWNoZXMgYW5kIHdpdGggbHV4dXJ5LCBieSBicmluZ2luZyBob21lIGdvbGQgYW5kIHNpbHZlciBmcm9tIHRoZSB3YXIsIGFuZCB0aHVzIHN1YnZlcnRpbmcgdGhlIGxhd3Mgb2YgTHljdXJndXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHRoZXNlIHJlbWFpbmVkIGluIGZvcmNlLCBTcGFydGEgbGVkIHRoZSBsaWZlLCBub3Qgb2YgYSBjaXR5IHVuZGVyIGEgY29uc3RpdHV0aW9uLCBidXQgb2YgYW4gaW5kaXZpZHVhbCBtYW4gdW5kZXIgdHJhaW5pbmcgYW5kIGZ1bGwgb2Ygd2lzZG9tLiBOYXkgcmF0aGVyLCBhcyB0aGUgcG9ldHMgd2VhdmUgdGhlaXIgdGFsZXMgb2YgSGVyYWNsZXMsIGhvdyB3aXRoIGhpcyBjbHViIGFuZCBsaW9uJ3Mgc2tpbiBoZSB0cmF2ZXJzZWQgdGhlIHdvcmxkIGNoYXN0aXNpbmcgbGF3bGVzcyBhbmQgc2F2YWdlIHR5cmFudHMsIHNvIHdlIG1heSBzYXkgdGhhdCBTcGFydGEsIHNpbXBseSB3aXRoIHRoZSBkaXNwYXRjaC1zdGFmZiBhbmQgY2xvYWsgb2YgaGVyIGVudm95cywga2VwdCBIZWxsYXMgaW4gd2lsbGluZyBhbmQgZ2xhZCBvYmVkaWVuY2UsIHB1dCBkb3duIGlsbGVnYWwgb2xpZ2FyY2hpZXMgYW5kIHR5cmFubmllcyBpbiB0aGUgZGlmZmVyZW50IHN0YXRlcywgYXJiaXRyYXRlZCB3YXJzLCBhbmQgcXVlbGxlZCBzZWRpdGlvbnMsIG9mdGVuIHdpdGhvdXQgc28gbXVjaCBhcyBtb3ZpbmcgYSBzaW5nbGUgc2hpZWxkLCBidXQgbWVyZWx5IHNlbmRpbmcgb25lIGFtYmFzc2Fkb3IsIHdob3NlIGNvbW1hbmRzIGFsbCBhdCBvbmNlIG9iZXllZCwganVzdCBhcyBiZWVzLCB3aGVuIHRoZWlyIGxlYWRlciBhcHBlYXJzLCBzd2FybSB0b2dldGhlciBhbmQgYXJyYXkgdGhlbXNlbHZlcyBhYm91dCBoaW0uIFN1Y2ggYSBzdXJwbHVzIGZ1bmQgb2YgZ29vZCBnb3Zlcm5tZW50IGFuZCBqdXN0aWNlIGRpZCB0aGUgY2l0eSBlbmpveS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlLCBJIGZvciBvbmUgYW0gYW1hemVkIGF0IHRob3NlIHdobyBkZWNsYXJlIHRoYXQgdGhlIExhY2VkYWVtb25pYW5zIGtuZXcgaG93IHRvIG9iZXksIGJ1dCBkaWQgbm90IHVuZGVyc3RhbmQgaG93IHRvIGNvbW1hbmQsIGFuZCBxdW90ZSB3aXRoIGFwcHJvdmFsIHRoZSBzdG9yeSBvZiBLaW5nIFRoZW9wb21wdXMsIHdobywgd2hlbiBzb21lIG9uZSBzYWlkIHRoYXQgU3BhcnRhIHdhcyBzYWZlIGFuZCBzZWN1cmUgYmVjYXVzZSBoZXIga2luZ3Mga25ldyBob3cgdG8gY29tbWFuZCwgcmVwbGllZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksIHJhdGhlciBiZWNhdXNlIGhlciBjaXRpemVucyBrbm93IGhvdyB0byBvYmV5LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbWVuIHdpbGwgbm90IGNvbnNlbnQgdG8gb2JleSB0aG9zZSB3aG8gaGF2ZSBub3QgdGhlIGFiaWxpdHkgdG8gcnVsZSwgYnV0IG9iZWRpZW5jZSBpcyBhIGxlc3NvbiB0byBiZSBsZWFybmVkIGZyb20gYSBjb21tYW5kZXIuIEZvciBhIGdvb2QgbGVhZGVyIG1ha2VzIGdvb2QgZm9sbG93ZXJzLCBhbmQganVzdCBhcyB0aGUgZmluYWwgYXR0YWlubWVudCBvZiB0aGUgYXJ0IG9mIGhvcnNlbWFuc2hpcCBpcyB0byBtYWtlIGEgaG9yc2UgZ2VudGxlIGFuZCB0cmFjdGFibGUsIHNvIGl0IGlzIHRoZSB0YXNrIG9mIHRoZSBzY2llbmNlIG9mIGdvdmVybm1lbnQgdG8gaW1wbGFudCBvYmVkaWVuY2UgaW4gbWVuLiBBbmQgdGhlIExhY2VkYWVtb25pYW5zIGltcGxhbnRlZCBpbiB0aGUgcmVzdCBvZiB0aGUgR3JlZWtzIG5vdCBvbmx5IGEgd2lsbGluZ25lc3MgdG8gb2JleSwgYnV0IGEgZGVzaXJlIHRvIGJlIHRoZWlyIGZvbGxvd2VycyBhbmQgc3ViamVjdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBlb3BsZSBkaWQgbm90IHNlbmQgcmVxdWVzdHMgdG8gdGhlbSBmb3Igc2hpcHMsIG9yIG1vbmV5LCBvciBob3BsaXRlcywgYnV0IGZvciBhIHNpbmdsZSBTcGFydGFuIGNvbW1hbmRlcjsgYW5kIHdoZW4gdGhleSBnb3QgaGltLCB0aGV5IHRyZWF0ZWQgaGltIHdpdGggaG9ub3VyIGFuZCByZXZlcmVuY2UsIGFzIHRoZSBTaWNpbGlhbnMgdHJlYXRlZCBHeWxpcHB1czsgdGhlIENoYWxjaWRpYW5zLCBCcmFzaWRhczsgYW5kIGFsbCB0aGUgR3JlZWtzIHJlc2lkZW50IGluIEFzaWEsIEx5c2FuZGVyLCBDYWxsaWNyYXRpZGFzLCBhbmQgQWdlc2lsYcO8cy4gVGhlc2UgbWVuLCB3aGVyZXZlciB0aGV5IGNhbWUsIHdlcmUgc3R5bGVkIHJlZ3VsYXRvcnMgYW5kIGNoYXN0ZW5lcnMgb2YgcGVvcGxlcyBhbmQgbWFnaXN0cmF0ZXMsIGFuZCB0aGUgY2l0eSBvZiBTcGFydGEgZnJvbSB3aGljaCB0aGV5IGNhbWUgd2FzIHJlZ2FyZGVkIGFzIGEgdGVhY2hlciBvZiB3ZWxsLW9yZGVyZWQgcHJpdmF0ZSBsaWZlIGFuZCBzZXR0bGVkIGNpdmlsIHBvbGl0eS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhpcyBwb3NpdGlvbiBvZiBTcGFydGEgU3RyYXRvbmljdXMgd291bGQgc2VlbSB0byBoYXZlIG1vY2tpbmdseSBhbGx1ZGVkIHdoZW4sIGluIGplc3QsIGhlIHByb3Bvc2VkIGEgbGF3IHRoYXQgdGhlIEF0aGVuaWFucyBzaG91bGQgY29uZHVjdCBteXN0ZXJpZXMgYW5kIHByb2Nlc3Npb25zLCBhbmQgdGhhdCB0aGUgRWxlaWFucyBzaG91bGQgcHJlc2lkZSBhdCBnYW1lcywgc2luY2UgaGVyZWluIGxheSB0aGVpciBzcGVjaWFsIGV4Y2VsbGVuY2UsIGJ1dCB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyBzaG91bGQgYmUgY3VkZ2VsbGVkIGlmIHRoZSBvdGhlcnMgZGlkIGFtaXNzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxOC40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh2aWlpLiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGlzIHdhcyBhIGpva2U7IGJ1dCBBbnRpc3RoZW5lcyB0aGUgU29jcmF0aWMsIHdoZW4gaGUgc2F3IHRoZSBUaGViYW5zIGluIGhpZ2ggZmVhdGhlciBhZnRlciB0aGUgYmF0dGxlIG9mIExldWN0cmEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzcxIEIuQy4sIHdoZW4gdGhlIFRoZWJhbnMgdW5kZXIgRXBhbWlub25kYXMgYnJva2UgdGhlIHN1cHJlbWFjeSBvZiBTcGFydGEuPC9ub3RlPiBzYWlkIGluIGFsbCBzZXJpb3VzbmVzcyB0aGF0IHRoZXkgd2VyZSBqdXN0IGxpa2UgbGl0dGxlIGJveXMgc3RydXR0aW5nIGFib3V0IGJlY2F1c2UgdGhleSBoYWQgdGhyYXNoZWQgdGhlaXIgdHV0b3IuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgSSBmb3Igb25lIGFtIGFtYXplZCBhdCB0aG9zZSB3aG8gZGVjbGFyZSB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyBrbmV3IGhvdyB0byBvYmV5LCBidXQgZGlkIG5vdCB1bmRlcnN0YW5kIGhvdyB0byBjb21tYW5kLCBhbmQgcXVvdGUgd2l0aCBhcHByb3ZhbCB0aGUgc3Rvcnkgb2YgS2luZyBUaGVvcG9tcHVzLCB3aG8sIHdoZW4gc29tZSBvbmUgc2FpZCB0aGF0IFNwYXJ0YSB3YXMgc2FmZSBhbmQgc2VjdXJlIGJlY2F1c2UgaGVyIGtpbmdzIGtuZXcgaG93IHRvIGNvbW1hbmQsIHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksIHJhdGhlciBiZWNhdXNlIGhlciBjaXRpemVucyBrbm93IGhvdyB0byBvYmV5LjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBtZW4gd2lsbCBub3QgY29uc2VudCB0byBvYmV5IHRob3NlIHdobyBoYXZlIG5vdCB0aGUgYWJpbGl0eSB0byBydWxlLCBidXQgb2JlZGllbmNlIGlzIGEgbGVzc29uIHRvIGJlIGxlYXJuZWQgZnJvbSBhIGNvbW1hbmRlci4gRm9yIGEgZ29vZCBsZWFkZXIgbWFrZXMgZ29vZCBmb2xsb3dlcnMsIGFuZCBqdXN0IGFzIHRoZSBmaW5hbCBhdHRhaW5tZW50IG9mIHRoZSBhcnQgb2YgaG9yc2VtYW5zaGlwIGlzIHRvIG1ha2UgYSBob3JzZSBnZW50bGUgYW5kIHRyYWN0YWJsZSwgc28gaXQgaXMgdGhlIHRhc2sgb2YgdGhlIHNjaWVuY2Ugb2YgZ292ZXJubWVudCB0byBpbXBsYW50IG9iZWRpZW5jZSBpbiBtZW4uIEFuZCB0aGUgTGFjZWRhZW1vbmlhbnMgaW1wbGFudGVkIGluIHRoZSByZXN0IG9mIHRoZSBHcmVla3Mgbm90IG9ubHkgYSB3aWxsaW5nbmVzcyB0byBvYmV5LCBidXQgYSBkZXNpcmUgdG8gYmUgdGhlaXIgZm9sbG93ZXJzIGFuZCBzdWJqZWN0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBlb3BsZSBkaWQgbm90IHNlbmQgcmVxdWVzdHMgdG8gdGhlbSBmb3Igc2hpcHMsIG9yIG1vbmV5LCBvciBob3BsaXRlcywgYnV0IGZvciBhIHNpbmdsZSBTcGFydGFuIGNvbW1hbmRlcjsgYW5kIHdoZW4gdGhleSBnb3QgaGltLCB0aGV5IHRyZWF0ZWQgaGltIHdpdGggaG9ub3VyIGFuZCByZXZlcmVuY2UsIGFzIHRoZSBTaWNpbGlhbnMgdHJlYXRlZCBHeWxpcHB1czsgdGhlIENoYWxjaWRpYW5zLCBCcmFzaWRhczsgYW5kIGFsbCB0aGUgR3JlZWtzIHJlc2lkZW50IGluIEFzaWEsIEx5c2FuZGVyLCBDYWxsaWNyYXRpZGFzLCBhbmQgQWdlc2lsYcO8cy4gVGhlc2UgbWVuLCB3aGVyZXZlciB0aGV5IGNhbWUsIHdlcmUgc3R5bGVkIHJlZ3VsYXRvcnMgYW5kIGNoYXN0ZW5lcnMgb2YgcGVvcGxlcyBhbmQgbWFnaXN0cmF0ZXMsIGFuZCB0aGUgY2l0eSBvZiBTcGFydGEgZnJvbSB3aGljaCB0aGV5IGNhbWUgd2FzIHJlZ2FyZGVkIGFzIGEgdGVhY2hlciBvZiB3ZWxsLW9yZGVyZWQgcHJpdmF0ZSBsaWZlIGFuZCBzZXR0bGVkIGNpdmlsIHBvbGl0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgcG9zaXRpb24gb2YgU3BhcnRhIFN0cmF0b25pY3VzIHdvdWxkIHNlZW0gdG8gaGF2ZSBtb2NraW5nbHkgYWxsdWRlZCB3aGVuLCBpbiBqZXN0LCBoZSBwcm9wb3NlZCBhIGxhdyB0aGF0IHRoZSBBdGhlbmlhbnMgc2hvdWxkIGNvbmR1Y3QgbXlzdGVyaWVzIGFuZCBwcm9jZXNzaW9ucywgYW5kIHRoYXQgdGhlIEVsZWlhbnMgc2hvdWxkIHByZXNpZGUgYXQgZ2FtZXMsIHNpbmNlIGhlcmVpbiBsYXkgdGhlaXIgc3BlY2lhbCBleGNlbGxlbmNlLCBidXQgdGhhdCB0aGUgTGFjZWRhZW1vbmlhbnMgc2hvdWxkIGJlIGN1ZGdlbGxlZCBpZiB0aGUgb3RoZXJzIGRpZCBhbWlzcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE4LjQiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoaXMgd2FzIGEgam9rZTsgYnV0IEFudGlzdGhlbmVzIHRoZSBTb2NyYXRpYywgd2hlbiBoZSBzYXcgdGhlIFRoZWJhbnMgaW4gaGlnaCBmZWF0aGVyIGFmdGVyIHRoZSBiYXR0bGUgb2YgTGV1Y3RyYSw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE4LjQiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM3MSBCLkMuLCB3aGVuIHRoZSBUaGViYW5zIHVuZGVyIEVwYW1pbm9uZGFzIGJyb2tlIHRoZSBzdXByZW1hY3kgb2YgU3BhcnRhLjwvbm90ZT4gc2FpZCBpbiBhbGwgc2VyaW91c25lc3MgdGhhdCB0aGV5IHdlcmUganVzdCBsaWtlIGxpdHRsZSBib3lzIHN0cnV0dGluZyBhYm91dCBiZWNhdXNlIHRoZXkgaGFkIHRocmFzaGVkIHRoZWlyIHR1dG9yLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgbm90LCBob3dldmVyLCB0aGUgY2hpZWYgZGVzaWduIG9mIEx5Y3VyZ3VzIHRoZW4gdG8gbGVhdmUgaGlzIGNpdHkgaW4gY29tbWFuZCBvdmVyIGEgZ3JlYXQgbWFueSBvdGhlcnMsIGJ1dCBoZSB0aG91Z2h0IHRoYXQgdGhlIGhhcHBpbmVzcyBvZiBhbiBlbnRpcmUgY2l0eSwgbGlrZSB0aGF0IG9mIGEgc2luZ2xlIGluZGl2aWR1YWwsIGRlcGVuZGVkIG9uIHRoZSBwcmV2YWxlbmNlIG9mIHZpcnR1ZSBhbmQgY29uY29yZCB3aXRoaW4gaXRzIG93biBib3JkZXJzLiBUaGUgYWltLCB0aGVyZWZvcmUsIG9mIGFsbCBoaXMgYXJyYW5nZW1lbnRzIGFuZCBhZGp1c3RtZW50cyB3YXMgdG8gbWFrZSBoaXMgcGVvcGxlIGZyZWUtbWluZGVkLCBzZWxmLXN1ZmZpY2luZywgYW5kIG1vZGVyYXRlIGluIGFsbCB0aGVpciB3YXlzLCBhbmQgdG8ga2VlcCB0aGVtIHNvIGFzIGxvbmcgYXMgcG9zc2libGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBkZXNpZ24gZm9yIGEgY2l2aWwgcG9saXR5IHdhcyBhZG9wdGVkIGJ5IFBsYXRvLCBEaW9nZW5lcywgWmVubywgYW5kIGJ5IGFsbCB0aG9zZSB3aG8gaGF2ZSB3b24gYXBwcm92YWwgZm9yIHRoZWlyIHRyZWF0aXNlcyBvbiB0aGlzIHN1YmplY3QsIGFsdGhvdWdoIHRoZXkgbGVmdCBiZWhpbmQgdGhlbSBvbmx5IHdyaXRpbmdzIGFuZCB3b3Jkcy4gTHljdXJndXMsIG9uIHRoZSBvdGhlciBoYW5kLCBwcm9kdWNlZCBub3Qgd3JpdGluZ3MgYW5kIHdvcmRzLCBidXQgYW4gYWN0dWFsIHBvbGl0eSB3aGljaCB3YXMgYmV5b25kIGltaXRhdGlvbiwgYW5kIGJlY2F1c2UgaGUgZ2F2ZSwgdG8gdGhvc2Ugd2hvIG1haW50YWluIHRoYXQgdGhlIG11Y2ggdGFsa2VkIG9mIG5hdHVyYWwgZGlzcG9zaXRpb24gdG8gd2lzZG9tIGV4aXN0cyBvbmx5IGluIHRoZW9yeSwgYW4gZXhhbXBsZSBvZiBhbiBlbnRpcmUgY2l0eSBnaXZlbiB0byB0aGUgbG92ZSBvZiB3aXNkb20sIGhpcyBmYW1lIHJpZ2h0bHkgdHJhbnNjZW5kZWQgdGhhdCBvZiBhbGwgd2hvIGV2ZXIgZm91bmRlZCBwb2xpdGllcyBhbW9uZyB0aGUgR3JlZWtzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgQXJpc3RvdGxlIHNheXMgdGhhdCB0aGUgaG9ub3VycyBwYWlkIGhpbSBpbiBTcGFydGEgd2VyZSBsZXNzIHRoYW4gaGUgZGVzZXJ2ZWQsIGFsdGhvdWdoIGhlIGVuam95cyB0aGUgaGlnaGVzdCBob25vdXJzIHRoZXJlLiBGb3IgaGUgaGFzIGEgdGVtcGxlLCBhbmQgc2FjcmlmaWNlcyBhcmUgb2ZmZXJlZCB0byBoaW0geWVhcmx5IGFzIHRvIGEgZ29kLiBJdCBpcyBhbHNvIHNhaWQgdGhhdCB3aGVuIGhpcyByZW1haW5zIHdlcmUgYnJvdWdodCBob21lLCBoaXMgdG9tYiB3YXMgc3RydWNrIGJ5IGxpZ2h0bmluZywgYW5kIHRoYXQgdGhpcyBoYXJkbHkgaGFwcGVuZWQgdG8gYW55IG90aGVyIGVtaW5lbnQgbWFuIGFmdGVyIGhpbSBleGNlcHQgRXVyaXBpZGVzLCB3aG8gZGllZCBhbmQgd2FzIGJ1cmllZCBhdCBBcmV0aHVzYSBpbiBNYWNlZG9uaWEuIFRoZSBsb3ZlcnMgb2YgRXVyaXBpZGVzIHRoZXJlZm9yZSByZWdhcmQgaXQgYXMgYSBncmVhdCB0ZXN0aW1vbnkgaW4gaGlzIGZhdm91ciB0aGF0IGhlIGFsb25lIGV4cGVyaWVuY2VkIGFmdGVyIGRlYXRoIHdoYXQgaGFkIGVhcmxpZXIgYmVmYWxsZW4gYSBtYW4gd2hvIHdhcyBtb3N0IGhvbHkgYW5kIGJlbG92ZWQgb2YgdGhlIGdvZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIG5vdCwgaG93ZXZlciwgdGhlIGNoaWVmIGRlc2lnbiBvZiBMeWN1cmd1cyB0aGVuIHRvIGxlYXZlIGhpcyBjaXR5IGluIGNvbW1hbmQgb3ZlciBhIGdyZWF0IG1hbnkgb3RoZXJzLCBidXQgaGUgdGhvdWdodCB0aGF0IHRoZSBoYXBwaW5lc3Mgb2YgYW4gZW50aXJlIGNpdHksIGxpa2UgdGhhdCBvZiBhIHNpbmdsZSBpbmRpdmlkdWFsLCBkZXBlbmRlZCBvbiB0aGUgcHJldmFsZW5jZSBvZiB2aXJ0dWUgYW5kIGNvbmNvcmQgd2l0aGluIGl0cyBvd24gYm9yZGVycy4gVGhlIGFpbSwgdGhlcmVmb3JlLCBvZiBhbGwgaGlzIGFycmFuZ2VtZW50cyBhbmQgYWRqdXN0bWVudHMgd2FzIHRvIG1ha2UgaGlzIHBlb3BsZSBmcmVlLW1pbmRlZCwgc2VsZi1zdWZmaWNpbmcsIGFuZCBtb2RlcmF0ZSBpbiBhbGwgdGhlaXIgd2F5cywgYW5kIHRvIGtlZXAgdGhlbSBzbyBhcyBsb25nIGFzIHBvc3NpYmxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBkZXNpZ24gZm9yIGEgY2l2aWwgcG9saXR5IHdhcyBhZG9wdGVkIGJ5IFBsYXRvLCBEaW9nZW5lcywgWmVubywgYW5kIGJ5IGFsbCB0aG9zZSB3aG8gaGF2ZSB3b24gYXBwcm92YWwgZm9yIHRoZWlyIHRyZWF0aXNlcyBvbiB0aGlzIHN1YmplY3QsIGFsdGhvdWdoIHRoZXkgbGVmdCBiZWhpbmQgdGhlbSBvbmx5IHdyaXRpbmdzIGFuZCB3b3Jkcy4gTHljdXJndXMsIG9uIHRoZSBvdGhlciBoYW5kLCBwcm9kdWNlZCBub3Qgd3JpdGluZ3MgYW5kIHdvcmRzLCBidXQgYW4gYWN0dWFsIHBvbGl0eSB3aGljaCB3YXMgYmV5b25kIGltaXRhdGlvbiwgYW5kIGJlY2F1c2UgaGUgZ2F2ZSwgdG8gdGhvc2Ugd2hvIG1haW50YWluIHRoYXQgdGhlIG11Y2ggdGFsa2VkIG9mIG5hdHVyYWwgZGlzcG9zaXRpb24gdG8gd2lzZG9tIGV4aXN0cyBvbmx5IGluIHRoZW9yeSwgYW4gZXhhbXBsZSBvZiBhbiBlbnRpcmUgY2l0eSBnaXZlbiB0byB0aGUgbG92ZSBvZiB3aXNkb20sIGhpcyBmYW1lIHJpZ2h0bHkgdHJhbnNjZW5kZWQgdGhhdCBvZiBhbGwgd2hvIGV2ZXIgZm91bmRlZCBwb2xpdGllcyBhbW9uZyB0aGUgR3JlZWtzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBBcmlzdG90bGUgc2F5cyB0aGF0IHRoZSBob25vdXJzIHBhaWQgaGltIGluIFNwYXJ0YSB3ZXJlIGxlc3MgdGhhbiBoZSBkZXNlcnZlZCwgYWx0aG91Z2ggaGUgZW5qb3lzIHRoZSBoaWdoZXN0IGhvbm91cnMgdGhlcmUuIEZvciBoZSBoYXMgYSB0ZW1wbGUsIGFuZCBzYWNyaWZpY2VzIGFyZSBvZmZlcmVkIHRvIGhpbSB5ZWFybHkgYXMgdG8gYSBnb2QuIEl0IGlzIGFsc28gc2FpZCB0aGF0IHdoZW4gaGlzIHJlbWFpbnMgd2VyZSBicm91Z2h0IGhvbWUsIGhpcyB0b21iIHdhcyBzdHJ1Y2sgYnkgbGlnaHRuaW5nLCBhbmQgdGhhdCB0aGlzIGhhcmRseSBoYXBwZW5lZCB0byBhbnkgb3RoZXIgZW1pbmVudCBtYW4gYWZ0ZXIgaGltIGV4Y2VwdCBFdXJpcGlkZXMsIHdobyBkaWVkIGFuZCB3YXMgYnVyaWVkIGF0IEFyZXRodXNhIGluIE1hY2Vkb25pYS4gVGhlIGxvdmVycyBvZiBFdXJpcGlkZXMgdGhlcmVmb3JlIHJlZ2FyZCBpdCBhcyBhIGdyZWF0IHRlc3RpbW9ueSBpbiBoaXMgZmF2b3VyIHRoYXQgaGUgYWxvbmUgZXhwZXJpZW5jZWQgYWZ0ZXIgZGVhdGggd2hhdCBoYWQgZWFybGllciBiZWZhbGxlbiBhIG1hbiB3aG8gd2FzIG1vc3QgaG9seSBhbmQgYmVsb3ZlZCBvZiB0aGUgZ29kcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSBzYXkgdGhhdCBMeWN1cmd1cyBkaWVkIGluIENpcnJoYTsgQXBvbGxvdGhlbWlzLCB0aGF0IGhlIHdhcyBicm91Z2h0IHRvIEVsaXMgYW5kIGRpZWQgdGhlcmU7IFRpbWFldXMgYW5kIEFyaXN0b3hlbnVzLCB0aGF0IGhlIGVuZGVkIGhpcyBkYXlzIGluIENyZXRlOyBhbmQgQXJpc3RveGVudXMgYWRkcyB0aGF0IGhpcyB0b21iIGlzIHNob3duIGJ5IHRoZSBDcmV0YW5zIGluIHRoZSBkaXN0cmljdCBvZiBQZXJnYW11cywgbmVhciB0aGUgcHVibGljIGhpZ2h3YXkuIEl0IGlzIGFsc28gc2FpZCB0aGF0IGhlIGxlZnQgYW4gb25seSBzb24sIEFudGlvcnVzLCBvbiB3aG9zZSBkZWF0aCB3aXRob3V0IGlzc3VlLCB0aGUgZmFtaWx5IGJlY2FtZSBleHRpbmN0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgZnJpZW5kcyBhbmQgcmVsYXRpb25zLCBob3dldmVyLCBpbnN0aXR1dGVkIGEgcGVyaW9kaWNhbCBhc3NlbWJseSBpbiBoaXMgbWVtb3J5LCB3aGljaCBjb250aW51ZWQgdG8gYmUgaGVsZCBmb3IgbWFueSBhZ2VzLCBhbmQgdGhleSBjYWxsZWQgdGhlIGRheXMgb24gd2hpY2ggdGhleSBjYW1lIHRvZ2V0aGVyLCBMeWN1cmdpZGFlLiBBcmlzdG9jcmF0ZXMgdGhlIHNvbiBvZiBIaXBwYXJjaHVzIHNheXMgdGhhdCB0aGUgZnJpZW5kcyBvZiBMeWN1cmd1cywgYWZ0ZXIgaGlzIGRlYXRoIGluIENyZXRlLCBidXJuZWQgaGlzIGJvZHkgYW5kIHNjYXR0ZXJlZCB0aGUgYXNoZXMgaW50byB0aGUgc2VhLCBhbmQgdGhhdCB0aGlzIHdhcyBkb25lIGF0IGhpcyByZXF1ZXN0LCBhbmQgYmVjYXVzZSBoZSB3aXNoZWQgdG8gcHJldmVudCBoaXMgcmVtYWlucyBmcm9tIGV2ZXIgYmVpbmcgY2FycmllZCB0byBTcGFydGEsIGxlc3QgdGhlIHBlb3BsZSB0aGVyZSBzaG91bGQgY2hhbmdlIGhpcyBwb2xpdHksIG9uIHRoZSBwbGVhIHRoYXQgaGUgaGFkIGNvbWUgYmFjaywgYW5kIHRoYXQgdGhleSB3ZXJlIHRoZXJlZm9yZSByZWxlYXNlZCBmcm9tIHRoZWlyIG9hdGhzLiBUaGlzLCB0aGVuLCBpcyB3aGF0IEkgaGF2ZSB0byBzYXkgYWJvdXQgTHljdXJndXMuCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgc2F5IHRoYXQgTHljdXJndXMgZGllZCBpbiBDaXJyaGE7IEFwb2xsb3RoZW1pcywgdGhhdCBoZSB3YXMgYnJvdWdodCB0byBFbGlzIGFuZCBkaWVkIHRoZXJlOyBUaW1hZXVzIGFuZCBBcmlzdG94ZW51cywgdGhhdCBoZSBlbmRlZCBoaXMgZGF5cyBpbiBDcmV0ZTsgYW5kIEFyaXN0b3hlbnVzIGFkZHMgdGhhdCBoaXMgdG9tYiBpcyBzaG93biBieSB0aGUgQ3JldGFucyBpbiB0aGUgZGlzdHJpY3Qgb2YgUGVyZ2FtdXMsIG5lYXIgdGhlIHB1YmxpYyBoaWdod2F5LiBJdCBpcyBhbHNvIHNhaWQgdGhhdCBoZSBsZWZ0IGFuIG9ubHkgc29uLCBBbnRpb3J1cywgb24gd2hvc2UgZGVhdGggd2l0aG91dCBpc3N1ZSwgdGhlIGZhbWlseSBiZWNhbWUgZXh0aW5jdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
