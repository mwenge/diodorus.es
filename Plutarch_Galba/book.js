var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    translatedSection.style.backgroundColor = "";
  }
  translatedSection = document.getElementById(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  translatedSection.style.backgroundColor = "yellow";
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  translatedSection.style.backgroundColor = "";
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSBQYXVsdXMgQWVtaWxpdXMsIGFzIHdlIGFyZSB0b2xkLCBmaW5kaW5nIHRoYXQgdGhlIGFybXkgd2hpY2ggaGUgaGFkIHRha2VuIG92ZXIgaW4gTWFjZWRvbmlhIHdhcyBpbmZlY3RlZCB3aXRoIGxvcXVhY2l0eSBhbmQgbWVkZGxlc29tZW5lc3MsIGFzIHRob3VnaCB0aGV5IHdlcmUgYWxsIGdlbmVyYWxzLCBnYXZlIG91dCB3b3JkIHRoYXQgZWFjaCBtYW4gd2FzIHRvIGhhdmUgaGlzIGhhbmQgcmVhZHkgYW5kIGhpcyBzd29yZCBzaGFycCwgYnV0IHRoYXQgaGUgaGltc2VsZiB3b3VsZCBsb29rIG91dCBmb3IgdGhlIHJlc3QuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFlbS4gOC40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVtaWxpdXM8L3RpdGxlPiwgeGlpaS4gNDwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWVtLiA4LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZW1pbGl1czwvdGl0bGU+LCB4aWlpLiA0PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZW1pbGl1czwvdGl0bGU+LCB4aWlpLiA0PC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBQbGF0bzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+ZS5nLjwvZW1waD4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIFJlcC4gMzc2YyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlcHVibGljPC90aXRsZT4gMzc2IEM8L2JpYmw+Ljwvbm90ZT4gc2VlcyB0aGF0IGEgZ29vZCBjb21tYW5kZXIgb3IgZ2VuZXJhbCBjYW4gZG8gbm90aGluZyB1bmxlc3MgaGlzIGFybXkgaXMgYW1lbmFibGUgYW5kIGxveWFsOyBhbmQgaGUgdGhpbmtzIHRoYXQgdGhlIHF1YWxpdHkgb2Ygb2JlZGllbmNlLCBsaWtlIHRoZSBxdWFsaXR5IGNoYXJhY3RlcmlzdGljIG9mIGEga2luZywgcmVxdWlyZXMgYSBub2JsZSBuYXR1cmUgYW5kIGEgcGhpbG9zb3BoaWMgdHJhaW5pbmcsIHdoaWNoLCBhYm92ZSBhbGwgdGhpbmdzLCBibGVuZHMgaGFybW9uaW91c2x5IHRoZSBxdWFsaXRpZXMgb2YgZ2VudGxlbmVzcyBhbmQgaHVtYW5pdHkgd2l0aCB0aG9zZSBvZiBoaWdoIGNvdXJhZ2UgYW5kIGFnZ3Jlc3NpdmVuZXNzLiBNYW55IGRpcmUgZXZlbnRzLCBhbmQgcGFydGljdWxhcmx5IHRob3NlIHdoaWNoIGJlZmVsbCB0aGUgUm9tYW5zIGFmdGVyIHRoZSBkZWF0aCBvZiBOZXJvLCBiZWFyIHdpdG5lc3MgdG8gdGhpcywgYW5kIHNob3cgcGxhaW5seSB0aGF0IGFuIGVtcGlyZSBoYXMgbm90aGluZyBtb3JlIGZlYXJmdWwgdG8gc2hvdyB0aGFuIGEgbWlsaXRhcnkgZm9yY2UgZ2l2ZW4gb3ZlciB0byB1bnRyYWluZWQgYW5kIHVucmVhc29uaW5nIGltcHVsc2VzLiAKCQkJCTxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+ZS5nLjwvZW1waD4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIFJlcC4gMzc2YyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlcHVibGljPC90aXRsZT4gMzc2IEM8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlcHVibGljPC90aXRsZT4gMzc2IEM8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkRlbWFkZXMsIGluZGVlZCwgYWZ0ZXIgQWxleGFuZGVyIGhhZCBkaWVkLCBsaWtlbmVkIHRoZSBNYWNlZG9uaWFuIGFybXkgdG8gdGhlIGJsaW5kZWQgQ3ljbG9wcywgb2JzZXJ2aW5nIHRoZSBtYW55IHJhbmRvbSBhbmQgZGlzb3JkZXJseSBtb3ZlbWVudHMgdGhhdCBpdCBtYWRlOyBidXQgdGhlIFJvbWFuIEVtcGlyZSB3YXMgYSBwcmV5IHRvIGNvbnZ1bHNpb25zIGFuZCBkaXNhc3RlcnMgbGlrZSB0aG9zZSBjYXVzZWQgYnkgdGhlIFRpdGFucyBvZiBteXRob2xvZ3ksIGJlaW5nIHRvcm4gaW50byBtYW55IGZyYWdtZW50cywgYW5kIGFnYWluIGluIG1hbnkgcGxhY2VzIGNvbGxhcHNpbmcgdXBvbiBpdHNlbGYsIG5vdCBzbyBtdWNoIHRocm91Z2ggdGhlIGFtYml0aW9uIG9mIHRob3NlIHdobyB3ZXJlIHByb2NsYWltZWQgZW1wZXJvcnMsIGFzIHRocm91Z2ggdGhlIGdyZWVkIGFuZCBsaWNlbmNlIG9mIHRoZSBzb2xkaWVyeSwgd2hpY2ggZHJvdmUgb3V0IG9uZSBjb21tYW5kZXIgd2l0aCBhbm90aGVyIGFzIG5haWwgZHJpdmVzIG91dCBuYWlsLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gYWxsdXNpb24gdG8gdGhlIHByb3ZlcmIgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4bylzrvhv7Mg4b2BIOG8p867zr/PgiDhvJDOus66z4HOv+G9u861z4TOsc65LjwvZm9yZWlnbj4uPC9ub3RlPiAKCQkJCSAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4bylzrvhv7Mg4b2BIOG8p867zr/PgiDhvJDOus66z4HOv+G9u861z4TOsc65LjwvZm9yZWlnbj4uPC90cmFuc2xhdGlvbj4="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlIFBoZXJhZWFuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbGV4YW5kZXIsIHR5cmFudCBvZiBQaGVyYWUuIFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAyNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzPC90aXRsZT4sIHh4aXYuLXh4eHY8L2JpYmw+Ljwvbm90ZT4gd2hvIHJ1bGVkIFRoZXNzYWx5IGZvciB0ZW4gbW9udGhzIGFuZCB3YXMgdGhlbiBwcm9tcHRseSBraWxsZWQsIHdhcyBjYWxsZWQgdGhlIHRyYWdlZHktdHlyYW50IGJ5IERpb255c2l1cywgd2l0aCBzY29ybmZ1bCByZWZlcmVuY2UgdG8gdGhlIHF1aWNrbmVzcyBvZiB0aGUgY2hhbmdlLiBCdXQgdGhlIGhvdXNlIG9mIHRoZSBDYWVzYXJzLCB0aGUgUGFsYXRpdW0sIGluIGEgc2hvcnRlciB0aW1lIHRoYW4gdGhpcyByZWNlaXZlZCBmb3VyIGVtcGVyb3JzLCB0aGUgc29sZGllcnkgdXNoZXJpbmcgb25lIGluIGFuZCBhbm90aGVyIG91dCwgYXMgaW4gcGxheS4gQnV0IHRoZSBzdWZmZXJpbmcgcGVvcGxlIGhhZCBvbmUgY29uc29sYXRpb24gYXQgbGVhc3QgaW4gdGhlIGZhY3QgdGhhdCB0aGV5IG5lZWRlZCBubyBvdGhlciBwdW5pc2htZW50IG9mIHRoZSBhdXRob3JzIG9mIHRoZWlyIHN1ZmZlcmluZ3MsIGJ1dCBzYXcgdGhlbSBzbGFpbiBieSBvbmUgYW5vdGhlcidzIGhhbmRzLCBhbmQgZmlyc3QgYW5kIG1vc3QgcmlnaHRlb3VzbHkgb2YgYWxsLCB0aGUgbWFuIHdobyBlbnNuYXJlZCB0aGUgc29sZGllcnkgYW5kIHRhdWdodCB0aGVtIHRvIGV4cGVjdCBmcm9tIHRoZSBkZXBvc2l0aW9uIG9mIGEgQ2Flc2FyIGFsbCB0aGUgZ29vZCB0aGluZ3Mgd2hpY2ggaGUgcHJvbWlzZWQgdGhlbSwgdGh1cyBkZWZpbGluZyBhIG1vc3Qgbm9ibGUgZGVlZCBieSB0aGUgcGF5IGhlIG9mZmVyZWQgZm9yIGl0LCBhbmQgdHVybmluZyB0aGUgcmV2b2x0IGZyb20gTmVybyBpbnRvIHRyZWFjaGVyeS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAyNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzPC90aXRsZT4sIHh4aXYuLXh4eHY8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBlbG9waWRhczwvdGl0bGU+LCB4eGl2Li14eHh2PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgTnltcGhpZGl1cyBTYWJpbnVzLCBwcmVmZWN0IG9mIHRoZSBjb3VydCBndWFyZCBhbG9uZyB3aXRoIFRpZ2VsbGludXMsIGFzIEkgaGF2ZSBhbHJlYWR5IHN0YXRlZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qcm9iYWJseSBpbiB0aGUgbG9zdCA8dGl0bGU+TGlmZSBvZiBOZXJvPC90aXRsZT4uPC9ub3RlPiB3aG8sIHdoZW4gTmVybydzIGNhc2Ugd2FzIGFsdG9nZXRoZXIgZGVzcGVyYXRlLCBhbmQgaXQgd2FzIGNsZWFyIHRoYXQgaGUgd2FzIGdvaW5nIHRvIHJ1biBhd2F5IHRvIEVneXB0LCBwZXJzdWFkZWQgdGhlIHNvbGRpZXJ5LCBhcyB0aG91Z2ggTmVybyB3ZXJlIG5vIGxvbmdlciB0aGVyZSBidXQgaGFkIGFscmVhZHkgZmxlZCwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+dG8gcHJvY2xhaW0gR2FsYmEgZW1wZXJvciwgYW5kIHByb21pc2VkIGFzIGxhcmdlc3Mgc2V2ZW50eS1maXZlIGh1bmRyZWQgZHJhY2htYXMgYXBpZWNlIGZvciB0aGUgY291cnQsIG9yIHByYWV0b3JpYW4sIGd1YXJkcywgYXMgdGhleSB3ZXJlIGNhbGxlZCwgYW5kIHR3ZWx2ZSBodW5kcmVkIGFuZCBmaWZ0eSBkcmFjaG1hczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIHVzZXMgdGhlIEdyZWVrIHdvcmQgZHJhY2htYSBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgUm9tYW4gZGVuYXJpdXMsIGEgc2lsdmVyIGNvaW4gYWJvdXQgZXF1aXZhbGVudCB0byB0aGUgZnJhbmMuIEJ1dCBhIFJvbWFuIHdyaXRlciB3b3VsZCByZWNrb24gYnkgc2VzdGVydGlpLCB0aGUgc2VzdGVydGl1cyBiZWluZyB3b3J0aCBhYm91dCBhIHF1YXJ0ZXIgb2YgdGhlIGRlbmFyaXVzLjwvbm90ZT4gZm9yIHRob3NlIGluIHNlcnZpY2Ugb3V0c2lkZSBvZiBSb21lLCBhIHN1bSB3aGljaCBpdCB3YXMgaW1wb3NzaWJsZSB0byByYWlzZSB3aXRob3V0IGluZmxpY3RpbmcgdGVuIHRob3VzYW5kIHRpbWVzIG1vcmUgZXZpbHMgdXBvbiB0aGUgd29ybGQgdGhhbiB0aG9zZSBpbmZsaWN0ZWQgYnkgTmVyby4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBwcm9taXNlIHdhcyBhdCBvbmNlIHRoZSBkZWF0aCBvZiBOZXJvLCBhbmQgc29vbiBhZnRlcndhcmRzIG9mIEdhbGJhOiB0aGUgb25lIHRoZSBzb2xkaWVycyBhYmFuZG9uZWQgdG8gaGlzIGZhdGUgaW4gb3JkZXIgdG8gZ2V0IHRoZWlyIHJld2FyZCwgdGhlIG90aGVyIHRoZXkga2lsbGVkIGJlY2F1c2UgdGhleSBkaWQgbm90IGdldCBpdC4gVGhlbiwgaW4gdHJ5aW5nIHRvIGZpbmQgc29tZW9uZSB3aG8gd291bGQgZ2l2ZSB0aGVtIGFzIGhpZ2ggYSBwcmljZSwgdGhleSBkZXN0cm95ZWQgdGhlbXNlbHZlcyBpbiBhIHN1Y2Nlc3Npb24gb2YgcmV2b2x0cyBhbmQgdHJlYWNoZXJpZXMgYmVmb3JlIHRoZWlyIGV4cGVjdGF0aW9ucyB3ZXJlIHNhdGlzZmllZC4gTm93LCB0aGUgYWNjdXJhdGUgYW5kIGNpcmN1bXN0YW50aWFsIG5hcnJhdGlvbiBvZiB0aGVzZSBldmVudHMgYmVsb25ncyB0byBmb3JtYWwgaGlzdG9yeTsgYnV0IGl0IGlzIG15IGR1dHkgYWxzbyBub3QgdG8gb21pdCBzdWNoIGluY2lkZW50cyBhcyBhcmUgd29ydGh5IG9mIG1lbnRpb24gaW4gdGhlIGRlZWRzIGFuZCBmYXRlcyBvZiB0aGUgQ2Flc2Fycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgTnltcGhpZGl1cyBTYWJpbnVzLCBwcmVmZWN0IG9mIHRoZSBjb3VydCBndWFyZCBhbG9uZyB3aXRoIFRpZ2VsbGludXMsIGFzIEkgaGF2ZSBhbHJlYWR5IHN0YXRlZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlByb2JhYmx5IGluIHRoZSBsb3N0IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxpZmUgb2YgTmVybzwvdGl0bGU+Ljwvbm90ZT4gd2hvLCB3aGVuIE5lcm8ncyBjYXNlIHdhcyBhbHRvZ2V0aGVyIGRlc3BlcmF0ZSwgYW5kIGl0IHdhcyBjbGVhciB0aGF0IGhlIHdhcyBnb2luZyB0byBydW4gYXdheSB0byBFZ3lwdCwgcGVyc3VhZGVkIHRoZSBzb2xkaWVyeSwgYXMgdGhvdWdoIE5lcm8gd2VyZSBubyBsb25nZXIgdGhlcmUgYnV0IGhhZCBhbHJlYWR5IGZsZWQsIAoJCQkJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlmZSBvZiBOZXJvPC90aXRsZT4uPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRvIHByb2NsYWltIEdhbGJhIGVtcGVyb3IsIGFuZCBwcm9taXNlZCBhcyBsYXJnZXNzIHNldmVudHktZml2ZSBodW5kcmVkIGRyYWNobWFzIGFwaWVjZSBmb3IgdGhlIGNvdXJ0LCBvciBwcmFldG9yaWFuLCBndWFyZHMsIGFzIHRoZXkgd2VyZSBjYWxsZWQsIGFuZCB0d2VsdmUgaHVuZHJlZCBhbmQgZmlmdHkgZHJhY2htYXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIHVzZXMgdGhlIEdyZWVrIHdvcmQgZHJhY2htYSBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgUm9tYW4gZGVuYXJpdXMsIGEgc2lsdmVyIGNvaW4gYWJvdXQgZXF1aXZhbGVudCB0byB0aGUgZnJhbmMuIEJ1dCBhIFJvbWFuIHdyaXRlciB3b3VsZCByZWNrb24gYnkgc2VzdGVydGlpLCB0aGUgc2VzdGVydGl1cyBiZWluZyB3b3J0aCBhYm91dCBhIHF1YXJ0ZXIgb2YgdGhlIGRlbmFyaXVzLjwvbm90ZT4gZm9yIHRob3NlIGluIHNlcnZpY2Ugb3V0c2lkZSBvZiBSb21lLCBhIHN1bSB3aGljaCBpdCB3YXMgaW1wb3NzaWJsZSB0byByYWlzZSB3aXRob3V0IGluZmxpY3RpbmcgdGVuIHRob3VzYW5kIHRpbWVzIG1vcmUgZXZpbHMgdXBvbiB0aGUgd29ybGQgdGhhbiB0aG9zZSBpbmZsaWN0ZWQgYnkgTmVyby4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcHJvbWlzZSB3YXMgYXQgb25jZSB0aGUgZGVhdGggb2YgTmVybywgYW5kIHNvb24gYWZ0ZXJ3YXJkcyBvZiBHYWxiYTogdGhlIG9uZSB0aGUgc29sZGllcnMgYWJhbmRvbmVkIHRvIGhpcyBmYXRlIGluIG9yZGVyIHRvIGdldCB0aGVpciByZXdhcmQsIHRoZSBvdGhlciB0aGV5IGtpbGxlZCBiZWNhdXNlIHRoZXkgZGlkIG5vdCBnZXQgaXQuIFRoZW4sIGluIHRyeWluZyB0byBmaW5kIHNvbWVvbmUgd2hvIHdvdWxkIGdpdmUgdGhlbSBhcyBoaWdoIGEgcHJpY2UsIHRoZXkgZGVzdHJveWVkIHRoZW1zZWx2ZXMgaW4gYSBzdWNjZXNzaW9uIG9mIHJldm9sdHMgYW5kIHRyZWFjaGVyaWVzIGJlZm9yZSB0aGVpciBleHBlY3RhdGlvbnMgd2VyZSBzYXRpc2ZpZWQuIE5vdywgdGhlIGFjY3VyYXRlIGFuZCBjaXJjdW1zdGFudGlhbCBuYXJyYXRpb24gb2YgdGhlc2UgZXZlbnRzIGJlbG9uZ3MgdG8gZm9ybWFsIGhpc3Rvcnk7IGJ1dCBpdCBpcyBteSBkdXR5IGFsc28gbm90IHRvIG9taXQgc3VjaCBpbmNpZGVudHMgYXMgYXJlIHdvcnRoeSBvZiBtZW50aW9uIGluIHRoZSBkZWVkcyBhbmQgZmF0ZXMgb2YgdGhlIENhZXNhcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCBTdWxwaWNpdXMgR2FsYmEgd2FzIHRoZSByaWNoZXN0IHByaXZhdGUgcGVyc29uIHdobyBldmVyIGNhbWUgdG8gdGhlIGltcGVyaWFsIHRocm9uZSwgaXMgZ2VuZXJhbGx5IGFkbWl0dGVkOyBtb3Jlb3ZlciwgaGlzIGNvbm5lY3Rpb24gd2l0aCB0aGUgbm9ibGUgaG91c2Ugb2YgdGhlIFNlcnZpaSBnYXZlIGhpbSBncmVhdCBwcmVzdGlnZSwgYWx0aG91Z2ggaGUgcHJpZGVkIGhpbXNlbGYgbW9yZSBvbiBoaXMgcmVsYXRpb25zaGlwIHRvIENhdHVsdXMsIHdobyB3YXMgdGhlIGZvcmVtb3N0IG1hbiBpbiBoaXMgdGltZSBpbiB2aXJ0dWUgYW5kIHJlcHV0YXRpb24sIGV2ZW4gaWYgaGUgZ2xhZGx5IGxlZnQgdG8gb3RoZXJzIHRoZSBleGVyY2lzZSBvZiBncmVhdGVyIHBvd2VyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5HYWxiYSB3YXMgYWxzbyBzb21laG93IHJlbGF0ZWQgdG8gTGl2aWEsIHRoZSB3aWZlIG9mIEF1Z3VzdHVzIENhZXNhciwgYW5kIHRoZXJlZm9yZSwgYXQgdGhlIGluc3RhbmNlIG9mIExpdmlhLCBoZSB3YXMgbWFkZSBjb25zdWw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzMyBBLkQuPC9ub3RlPiBieSB0aGUgZW1wZXJvci4gV2UgYXJlIHRvbGQgYWxzbyB0aGF0IGhlIGNvbW1hbmRlZCBhbiBhcm15IGluIEdlcm1hbnkgd2l0aCBkaXN0aW5jdGlvbiwgYW5kIHRoYXQgd2hlbiBoZSB3YXMgcHJvLWNvbnN1bCBvZiBBZnJpY2EsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDUgQS5ELjwvbm90ZT4gaGUgd29uIHN1Y2ggcHJhaXNlIGFzIGZldyBoYXZlIGRvbmUuIEJ1dCBoaXMgc2ltcGxlIGFuZCBjb250ZW50ZWQgd2F5IG9mIGxpdmluZywgdGhlIHNwYXJpbmcgaGFuZCB3aXRoIHdoaWNoIGhlIGRlYWx0IG91dCBtb25leSwgYWx3YXlzIGF2b2lkaW5nIGV4Y2Vzcywgd2VyZSBjb3VudGVkIHVudG8gaGltLCB3aGVuIGhlIGJlY2FtZSBlbXBlcm9yLCBhcyBwYXJzaW1vbnksIHNvIHRoYXQgdGhlIHJlcHV0YXRpb24gd2hpY2ggaGUgYm9yZSBmb3IgbW9kZXJhdGlvbiBhbmQgc2VsZi1yZXN0cmFpbnQgd2FzIGFuIGluc2lwaWQgc29ydCBvZiB0aGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnkgTmVybyBoZSB3YXMgc2VudCBvdXQgYXMgZ292ZXJub3Igb2YgU3BhaW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjEgQS5ELjwvbm90ZT4gYmVmb3JlIE5lcm8gaGFkIHlldCBsZWFybmVkIHRvIGJlIGFmcmFpZCBvZiBjaXRpemVucyB3aG8gd2VyZSBoZWxkIGluIGhpZ2ggZXN0ZWVtLiBHYWxiYSwgaG93ZXZlciwgd2FzIHRob3VnaHQgdG8gYmUgb2YgYSBnZW50bGUgbmF0dXJlLCBhbmQgaGlzIGdyZWF0IGFnZSBnYXZlIGFuIGFkZGVkIGNvbmZpZGVuY2UgdGhhdCBoZSB3b3VsZCBhbHdheXMgYWN0IHdpdGggY2F1dGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IFN1bHBpY2l1cyBHYWxiYSB3YXMgdGhlIHJpY2hlc3QgcHJpdmF0ZSBwZXJzb24gd2hvIGV2ZXIgY2FtZSB0byB0aGUgaW1wZXJpYWwgdGhyb25lLCBpcyBnZW5lcmFsbHkgYWRtaXR0ZWQ7IG1vcmVvdmVyLCBoaXMgY29ubmVjdGlvbiB3aXRoIHRoZSBub2JsZSBob3VzZSBvZiB0aGUgU2VydmlpIGdhdmUgaGltIGdyZWF0IHByZXN0aWdlLCBhbHRob3VnaCBoZSBwcmlkZWQgaGltc2VsZiBtb3JlIG9uIGhpcyByZWxhdGlvbnNoaXAgdG8gQ2F0dWx1cywgd2hvIHdhcyB0aGUgZm9yZW1vc3QgbWFuIGluIGhpcyB0aW1lIGluIHZpcnR1ZSBhbmQgcmVwdXRhdGlvbiwgZXZlbiBpZiBoZSBnbGFkbHkgbGVmdCB0byBvdGhlcnMgdGhlIGV4ZXJjaXNlIG9mIGdyZWF0ZXIgcG93ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkdhbGJhIHdhcyBhbHNvIHNvbWVob3cgcmVsYXRlZCB0byBMaXZpYSwgdGhlIHdpZmUgb2YgQXVndXN0dXMgQ2Flc2FyLCBhbmQgdGhlcmVmb3JlLCBhdCB0aGUgaW5zdGFuY2Ugb2YgTGl2aWEsIGhlIHdhcyBtYWRlIGNvbnN1bDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzMgQS5ELjwvbm90ZT4gYnkgdGhlIGVtcGVyb3IuIFdlIGFyZSB0b2xkIGFsc28gdGhhdCBoZSBjb21tYW5kZWQgYW4gYXJteSBpbiBHZXJtYW55IHdpdGggZGlzdGluY3Rpb24sIGFuZCB0aGF0IHdoZW4gaGUgd2FzIHByby1jb25zdWwgb2YgQWZyaWNhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDUgQS5ELjwvbm90ZT4gaGUgd29uIHN1Y2ggcHJhaXNlIGFzIGZldyBoYXZlIGRvbmUuIEJ1dCBoaXMgc2ltcGxlIGFuZCBjb250ZW50ZWQgd2F5IG9mIGxpdmluZywgdGhlIHNwYXJpbmcgaGFuZCB3aXRoIHdoaWNoIGhlIGRlYWx0IG91dCBtb25leSwgYWx3YXlzIGF2b2lkaW5nIGV4Y2Vzcywgd2VyZSBjb3VudGVkIHVudG8gaGltLCB3aGVuIGhlIGJlY2FtZSBlbXBlcm9yLCBhcyBwYXJzaW1vbnksIHNvIHRoYXQgdGhlIHJlcHV0YXRpb24gd2hpY2ggaGUgYm9yZSBmb3IgbW9kZXJhdGlvbiBhbmQgc2VsZi1yZXN0cmFpbnQgd2FzIGFuIGluc2lwaWQgc29ydCBvZiB0aGluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ5IE5lcm8gaGUgd2FzIHNlbnQgb3V0IGFzIGdvdmVybm9yIG9mIFNwYWluLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjEgQS5ELjwvbm90ZT4gYmVmb3JlIE5lcm8gaGFkIHlldCBsZWFybmVkIHRvIGJlIGFmcmFpZCBvZiBjaXRpemVucyB3aG8gd2VyZSBoZWxkIGluIGhpZ2ggZXN0ZWVtLiBHYWxiYSwgaG93ZXZlciwgd2FzIHRob3VnaHQgdG8gYmUgb2YgYSBnZW50bGUgbmF0dXJlLCBhbmQgaGlzIGdyZWF0IGFnZSBnYXZlIGFuIGFkZGVkIGNvbmZpZGVuY2UgdGhhdCBoZSB3b3VsZCBhbHdheXMgYWN0IHdpdGggY2F1dGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiwgYXMgdGhlIG5lZmFyaW91cyBhZ2VudHMgb2YgTmVybyBzYXZhZ2VseSBhbmQgY3J1ZWxseSBoYXJyaWVkIHRoZSBwcm92aW5jZXMsIEdhbGJhIGNvdWxkIGhlbHAgdGhlIHBlb3BsZSBpbiBubyBvdGhlciB3YXkgdGhhbiBieSBtYWtpbmcgaXQgcGxhaW4gdGhhdCBoZSBzaGFyZWQgaW4gdGhlaXIgZGlzdHJlc3MgYW5kIHNlbnNlIG9mIHdyb25nLCB0aGlzIHNvbWVob3cgYnJvdWdodCByZWxpZWYgYW5kIGNvbWZvcnQgdG8gdGhvc2Ugd2hvIHdlcmUgYmVpbmcgY29uZGVtbmVkIGluIGNvdXJ0IGFuZCBzb2xkIGludG8gc2xhdmVyeS4gQW5kIHdoZW4gdmVyc2VzIHdlcmUgbWFkZSBhYm91dCBOZXJvLCBhbmQgbWVuIGNpcmN1bGF0ZWQgYW5kIHNhbmcgdGhlbSBmcmVlbHksIGhlIGRpZCBub3QgcHV0IGEgc3RvcCB0byBpdCBub3Igc2hhcmUgaW4gdGhlIGRpc3BsZWFzdXJlIG9mIE5lcm8ncyBhZ2VudHM7IHdoZXJlZm9yZSBoZSB3YXMgc3RpbGwgbW9yZSBiZWxvdmVkIGJ5IHRoZSBpbmhhYml0YW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIHdhcyBieSB0aGlzIHRpbWUgd2VsbCBrbm93biB0byB0aGVtLCBzaW5jZSBpdCB3YXMgaW4gdGhlIGVpZ2h0aCB5ZWFyIG9mIGhpcyBnb3Zlcm5vcnNoaXAgdGhhdCBKdW5pdXMgVmluZGV4LCBhIGdlbmVyYWwgaW4gR2F1bCwgcmV2b2x0ZWQgYWdhaW5zdCBOZXJvLiBJdCBpcyBzYWlkLCBpbmRlZWQsIHRoYXQgZXZlbiBiZWZvcmUgdGhlIG9wZW4gcmViZWxsaW9uIEdhbGJhIHJlY2VpdmVkIGxldHRlcnMgZnJvbSBWaW5kZXgsIGFuZCB0aGF0IGhlIG5laXRoZXIgcHV0IGFueSB0cnVzdCBpbiB0aGVtIG5vciBnYXZlIGFjY3VzaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZW0sIGFsdGhvdWdoIG90aGVyIHByb3ZpbmNpYWwgZ292ZXJub3JzIHNlbnQgdG8gTmVybyB0aGUgbGV0dGVycyB3cml0dGVuIHRvIHRoZW0sIGFuZCB0aHVzIGRpZCBhbGwgdGhleSBjb3VsZCB0byBydWluIHRoZSBlbnRlcnByaXNlIG9mIFZpbmRleDsgYW5kIHlldCB0aGV5IGFmdGVyd2FyZHMgdG9vayBwYXJ0IGluIGl0LCBhbmQgdGh1cyBjb25mZXNzZWQgdGhhdCB0aGV5IGhhZCBiZWVuIGZhbHNlIHRvIHRoZW1zZWx2ZXMgbm8gbGVzcyB0aGFuIHRvIFZpbmRleC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIFZpbmRleCBoYWQgb3Blbmx5IGRlY2xhcmVkIHdhciwgaGUgd3JvdGUgdG8gR2FsYmEgaW52aXRpbmcgaGltIHRvIGFzc3VtZSB0aGUgaW1wZXJpYWwgcG93ZXIsIGFuZCB0aHVzIHRvIHNlcnZlIHdoYXQgd2FzIGEgdmlnb3JvdXMgYm9keSBpbiBuZWVkIG9mIGEgaGVhZCwgbWVhbmluZyB0aGUgR2FsbGljIHByb3ZpbmNlcywgd2hpY2ggYWxyZWFkeSBoYWQgYSBodW5kcmVkIHRob3VzYW5kIG1lbiB1bmRlciBhcm1zLCBhbmQgY291bGQgYXJtIG90aGVyIHRob3VzYW5kcyBiZXNpZGVzLiBUaGVuIEdhbGJhIHRvb2sgY291bnNlbCB3aXRoIGhpcyBmcmllbmRzLiBTb21lIG9mIHRoZXNlIHRob3VnaHQgaXQgYmVzdCBmb3IgaGltIHRvIHdhaXQgYW5kIHNlZSB3aGF0IG1vdmVtZW50IFJvbWUgd291bGQgc2V0IG9uIGZvb3QgaW4gcmVzcG9uc2UgdG8gdGhlIHJldm9sdXRpb247IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBUaXR1cyBWaW5pdXMsIHRoZSBjYXB0YWluIG9mIHRoZSBwcmFldG9yaWFuIGd1YXJkLCBzYWlkIHRvIHRoZW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBHYWxiYSwgd2hhdCBjb3Vuc2VscyBhcmUgdGhlc2U/IEZvciB0byBhc2sgd2hldGhlciB3ZSBzaGFsbCByZW1haW4gZmFpdGhmdWwgdG8gTmVybyBtZWFucyB0aGF0IHdlIGFyZSBhbHJlYWR5IHVuZmFpdGhmdWwuIEFzc3VtaW5nLCB0aGVuLCB0aGF0IE5lcm8gaXMgYW4gZW5lbXksIHdlIHN1cmVseSBtdXN0IG5vdCByZWplY3QgdGhlIGZyaWVuZHNoaXAgb2YgVmluZGV4OyBvciBlbHNlIHdlIG11c3QgYXQgb25jZSBkZW5vdW5jZSBoaW0gYW5kIG1ha2Ugd2FyIHVwb24gaGltIGJlY2F1c2UgaGUgd2lzaGVzIHRoZSBSb21hbnMgdG8gaGF2ZSB0aGVlIGFzIHRoZWlyIHJ1bGVyIHJhdGhlciB0aGFuIE5lcm8gYXMgdGhlaXIgdHlyYW50LjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiwgYXMgdGhlIG5lZmFyaW91cyBhZ2VudHMgb2YgTmVybyBzYXZhZ2VseSBhbmQgY3J1ZWxseSBoYXJyaWVkIHRoZSBwcm92aW5jZXMsIEdhbGJhIGNvdWxkIGhlbHAgdGhlIHBlb3BsZSBpbiBubyBvdGhlciB3YXkgdGhhbiBieSBtYWtpbmcgaXQgcGxhaW4gdGhhdCBoZSBzaGFyZWQgaW4gdGhlaXIgZGlzdHJlc3MgYW5kIHNlbnNlIG9mIHdyb25nLCB0aGlzIHNvbWVob3cgYnJvdWdodCByZWxpZWYgYW5kIGNvbWZvcnQgdG8gdGhvc2Ugd2hvIHdlcmUgYmVpbmcgY29uZGVtbmVkIGluIGNvdXJ0IGFuZCBzb2xkIGludG8gc2xhdmVyeS4gQW5kIHdoZW4gdmVyc2VzIHdlcmUgbWFkZSBhYm91dCBOZXJvLCBhbmQgbWVuIGNpcmN1bGF0ZWQgYW5kIHNhbmcgdGhlbSBmcmVlbHksIGhlIGRpZCBub3QgcHV0IGEgc3RvcCB0byBpdCBub3Igc2hhcmUgaW4gdGhlIGRpc3BsZWFzdXJlIG9mIE5lcm8ncyBhZ2VudHM7IHdoZXJlZm9yZSBoZSB3YXMgc3RpbGwgbW9yZSBiZWxvdmVkIGJ5IHRoZSBpbmhhYml0YW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgYnkgdGhpcyB0aW1lIHdlbGwga25vd24gdG8gdGhlbSwgc2luY2UgaXQgd2FzIGluIHRoZSBlaWdodGggeWVhciBvZiBoaXMgZ292ZXJub3JzaGlwIHRoYXQgSnVuaXVzIFZpbmRleCwgYSBnZW5lcmFsIGluIEdhdWwsIHJldm9sdGVkIGFnYWluc3QgTmVyby4gSXQgaXMgc2FpZCwgaW5kZWVkLCB0aGF0IGV2ZW4gYmVmb3JlIHRoZSBvcGVuIHJlYmVsbGlvbiBHYWxiYSByZWNlaXZlZCBsZXR0ZXJzIGZyb20gVmluZGV4LCBhbmQgdGhhdCBoZSBuZWl0aGVyIHB1dCBhbnkgdHJ1c3QgaW4gdGhlbSBub3IgZ2F2ZSBhY2N1c2luZyBpbmZvcm1hdGlvbiBhYm91dCB0aGVtLCBhbHRob3VnaCBvdGhlciBwcm92aW5jaWFsIGdvdmVybm9ycyBzZW50IHRvIE5lcm8gdGhlIGxldHRlcnMgd3JpdHRlbiB0byB0aGVtLCBhbmQgdGh1cyBkaWQgYWxsIHRoZXkgY291bGQgdG8gcnVpbiB0aGUgZW50ZXJwcmlzZSBvZiBWaW5kZXg7IGFuZCB5ZXQgdGhleSBhZnRlcndhcmRzIHRvb2sgcGFydCBpbiBpdCwgYW5kIHRodXMgY29uZmVzc2VkIHRoYXQgdGhleSBoYWQgYmVlbiBmYWxzZSB0byB0aGVtc2VsdmVzIG5vIGxlc3MgdGhhbiB0byBWaW5kZXguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBWaW5kZXggaGFkIG9wZW5seSBkZWNsYXJlZCB3YXIsIGhlIHdyb3RlIHRvIEdhbGJhIGludml0aW5nIGhpbSB0byBhc3N1bWUgdGhlIGltcGVyaWFsIHBvd2VyLCBhbmQgdGh1cyB0byBzZXJ2ZSB3aGF0IHdhcyBhIHZpZ29yb3VzIGJvZHkgaW4gbmVlZCBvZiBhIGhlYWQsIG1lYW5pbmcgdGhlIEdhbGxpYyBwcm92aW5jZXMsIHdoaWNoIGFscmVhZHkgaGFkIGEgaHVuZHJlZCB0aG91c2FuZCBtZW4gdW5kZXIgYXJtcywgYW5kIGNvdWxkIGFybSBvdGhlciB0aG91c2FuZHMgYmVzaWRlcy4gVGhlbiBHYWxiYSB0b29rIGNvdW5zZWwgd2l0aCBoaXMgZnJpZW5kcy4gU29tZSBvZiB0aGVzZSB0aG91Z2h0IGl0IGJlc3QgZm9yIGhpbSB0byB3YWl0IGFuZCBzZWUgd2hhdCBtb3ZlbWVudCBSb21lIHdvdWxkIHNldCBvbiBmb290IGluIHJlc3BvbnNlIHRvIHRoZSByZXZvbHV0aW9uOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBUaXR1cyBWaW5pdXMsIHRoZSBjYXB0YWluIG9mIHRoZSBwcmFldG9yaWFuIGd1YXJkLCBzYWlkIHRvIHRoZW06IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIEdhbGJhLCB3aGF0IGNvdW5zZWxzIGFyZSB0aGVzZT8gRm9yIHRvIGFzayB3aGV0aGVyIHdlIHNoYWxsIHJlbWFpbiBmYWl0aGZ1bCB0byBOZXJvIG1lYW5zIHRoYXQgd2UgYXJlIGFscmVhZHkgdW5mYWl0aGZ1bC4gQXNzdW1pbmcsIHRoZW4sIHRoYXQgTmVybyBpcyBhbiBlbmVteSwgd2Ugc3VyZWx5IG11c3Qgbm90IHJlamVjdCB0aGUgZnJpZW5kc2hpcCBvZiBWaW5kZXg7IG9yIGVsc2Ugd2UgbXVzdCBhdCBvbmNlIGRlbm91bmNlIGhpbSBhbmQgbWFrZSB3YXIgdXBvbiBoaW0gYmVjYXVzZSBoZSB3aXNoZXMgdGhlIFJvbWFucyB0byBoYXZlIHRoZWUgYXMgdGhlaXIgcnVsZXIgcmF0aGVyIHRoYW4gTmVybyBhcyB0aGVpciB0eXJhbnQuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIEdhbGJhIGlzc3VlZCBhbiBlZGljdCBhcHBvaW50aW5nIGEgZGF5IG9uIHdoaWNoIGhlIHdvdWxkIGdyYW50IGluZGl2aWR1YWwgbWFudW1pc3Npb25zIHRvIGFsbCB3aG8gZGVzaXJlZCB0aGVtLCBhbmQgZ29zc2lwIGFuZCBydW1vdXIgZmx5aW5nIGFsbCBhYnJvYWQgYnJvdWdodCB0b2dldGhlciBhIG11bHRpdHVkZSBvZiBtZW4gd2hvIHdlcmUgZWFnZXIgZm9yIHRoZSByZXZvbHV0aW9uLiBBdCBhbnkgcmF0ZSwgbm8gc29vbmVyIHdhcyBHYWxiYSBzZWVuIHVwb24gdGhlIHRyaWJ1bmFsIHRoYW4gYWxsIHdpdGggb25lIHZvaWNlIGhhaWxlZCBoaW0gYXMgZW1wZXJvci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaGUgZGlkIG5vdCBhdCBvbmNlIGFjY2VwdCB0aGlzIGFwcGVsbGF0aW9uLCBidXQgYWZ0ZXIgZGVub3VuY2luZyBOZXJvLCBhbmQgYmV3YWlsaW5nIHRoZSBtb3N0IGlsbHVzdHJpb3VzIG9mIHRoZSBtZW4gd2hvIGhhZCBiZWVuIHB1dCB0byBkZWF0aCBieSBoaW0sIHByb21pc2VkIHRvIGRldm90ZSBoaXMgYmVzdCBwb3dlcnMgdG8gdGhlIHNlcnZpY2Ugb2YgaGlzIGNvdW50cnksIHRha2luZyBhcyBoaXMgdGl0bGUsIG5vdCBDYWVzYXIsIG5vciBFbXBlcm9yLCBidXQgR2VuZXJhbCBvZiB0aGUgUm9tYW4gU2VuYXRlIGFuZCBQZW9wbGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBHYWxiYSBpc3N1ZWQgYW4gZWRpY3QgYXBwb2ludGluZyBhIGRheSBvbiB3aGljaCBoZSB3b3VsZCBncmFudCBpbmRpdmlkdWFsIG1hbnVtaXNzaW9ucyB0byBhbGwgd2hvIGRlc2lyZWQgdGhlbSwgYW5kIGdvc3NpcCBhbmQgcnVtb3VyIGZseWluZyBhbGwgYWJyb2FkIGJyb3VnaHQgdG9nZXRoZXIgYSBtdWx0aXR1ZGUgb2YgbWVuIHdobyB3ZXJlIGVhZ2VyIGZvciB0aGUgcmV2b2x1dGlvbi4gQXQgYW55IHJhdGUsIG5vIHNvb25lciB3YXMgR2FsYmEgc2VlbiB1cG9uIHRoZSB0cmlidW5hbCB0aGFuIGFsbCB3aXRoIG9uZSB2b2ljZSBoYWlsZWQgaGltIGFzIGVtcGVyb3IuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIGRpZCBub3QgYXQgb25jZSBhY2NlcHQgdGhpcyBhcHBlbGxhdGlvbiwgYnV0IGFmdGVyIGRlbm91bmNpbmcgTmVybywgYW5kIGJld2FpbGluZyB0aGUgbW9zdCBpbGx1c3RyaW91cyBvZiB0aGUgbWVuIHdobyBoYWQgYmVlbiBwdXQgdG8gZGVhdGggYnkgaGltLCBwcm9taXNlZCB0byBkZXZvdGUgaGlzIGJlc3QgcG93ZXJzIHRvIHRoZSBzZXJ2aWNlIG9mIGhpcyBjb3VudHJ5LCB0YWtpbmcgYXMgaGlzIHRpdGxlLCBub3QgQ2Flc2FyLCBub3IgRW1wZXJvciwgYnV0IEdlbmVyYWwgb2YgdGhlIFJvbWFuIFNlbmF0ZSBhbmQgUGVvcGxlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoYXQgVmluZGV4IGFjdGVkIHdpc2VseSBhbmQgd2VsbCBpbiBjYWxsaW5nIHVwb24gR2FsYmEgdG8gYmUgZW1wZXJvciwgd2FzIGNvbnZpbmNpbmdseSBwcm92ZWQgYnkgTmVyby4gRm9yIHRob3VnaCBoZSBwcmV0ZW5kZWQgdG8gZGVzcGlzZSBWaW5kZXggYW5kIHRvIHJlZ2FyZCBtYXR0ZXJzIGluIEdhdWwgYXMgb2Ygbm8gbW9tZW50LCBhcyBzb29uIGFzIGhlIGxlYXJuZWQgd2hhdCBHYWxiYSBoYWQgZG9uZeKAlE5lcm8gaGFkIGp1c3QgdGFrZW4gaGlzIGJhdGggYW5kIHdhcyBhdCBicmVha2Zhc3TigJRoZSBvdmVydHVybmVkIGhpcyB0YWJsZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYWZ0ZXIgdGhlIFNlbmF0ZSBoYWQgdm90ZWQgR2FsYmEgYW4gZW5lbXksIE5lcm8sIHdpdGggYSBkZXNpcmUgdG8gamVzdCBhbmQgcHV0IG9uIGEgYm9sZCBjb3VudGVuYW5jZSB3aXRoIGhpcyBmcmllbmRzLCBzYWlkIHRoYXQgYW4gZXhjZWxsZW50IGlkZWEgaGFkIG9jY3VycmVkIHRvIGhpbSBpbiBoaXMgbmVlZCBvZiBtb25leTogdGhlIHByb3BlcnR5IG9mIHRoZSBHYXVscyB3b3VsZCBub3QgZmFsbCB0byBoaW0gYXMgc3BvaWwgb2Ygd2FyIHVudGlsIGFmdGVyIHRoZXkgc2hvdWxkIGJlIHN1YmR1ZWQ7IGJ1dCBHYWxiYSdzIGVzdGF0ZSB3YXMgcmVhZHkgdG8gYmUgdXNlZCBhbmQgc29sZCBhdCBvbmNlLCBub3cgdGhhdCBHYWxiYSBoYWQgYmVlbiBkZWNsYXJlZCBhIHB1YmxpYyBlbmVteS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+U28gaGUgb3JkZXJlZCB0aGUgcHJvcGVydHkgb2YgR2FsYmEgdG8gYmUgc29sZCwgYW5kIEdhbGJhLCB3aGVuIGhlIGhlYXJkIG9mIGl0LCBwdXQgdXAgYXQgcHVibGljIHNhbGUgYWxsIHRoYXQgTmVybyBvd25lZCBpbiBTcGFpbiwgYW5kIGZvdW5kIG1hbnkgcmVhZGllciBidXllcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhhdCBWaW5kZXggYWN0ZWQgd2lzZWx5IGFuZCB3ZWxsIGluIGNhbGxpbmcgdXBvbiBHYWxiYSB0byBiZSBlbXBlcm9yLCB3YXMgY29udmluY2luZ2x5IHByb3ZlZCBieSBOZXJvLiBGb3IgdGhvdWdoIGhlIHByZXRlbmRlZCB0byBkZXNwaXNlIFZpbmRleCBhbmQgdG8gcmVnYXJkIG1hdHRlcnMgaW4gR2F1bCBhcyBvZiBubyBtb21lbnQsIGFzIHNvb24gYXMgaGUgbGVhcm5lZCB3aGF0IEdhbGJhIGhhZCBkb25l4oCUTmVybyBoYWQganVzdCB0YWtlbiBoaXMgYmF0aCBhbmQgd2FzIGF0IGJyZWFrZmFzdOKAlGhlIG92ZXJ0dXJuZWQgaGlzIHRhYmxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFmdGVyIHRoZSBTZW5hdGUgaGFkIHZvdGVkIEdhbGJhIGFuIGVuZW15LCBOZXJvLCB3aXRoIGEgZGVzaXJlIHRvIGplc3QgYW5kIHB1dCBvbiBhIGJvbGQgY291bnRlbmFuY2Ugd2l0aCBoaXMgZnJpZW5kcywgc2FpZCB0aGF0IGFuIGV4Y2VsbGVudCBpZGVhIGhhZCBvY2N1cnJlZCB0byBoaW0gaW4gaGlzIG5lZWQgb2YgbW9uZXk6IHRoZSBwcm9wZXJ0eSBvZiB0aGUgR2F1bHMgd291bGQgbm90IGZhbGwgdG8gaGltIGFzIHNwb2lsIG9mIHdhciB1bnRpbCBhZnRlciB0aGV5IHNob3VsZCBiZSBzdWJkdWVkOyBidXQgR2FsYmEncyBlc3RhdGUgd2FzIHJlYWR5IHRvIGJlIHVzZWQgYW5kIHNvbGQgYXQgb25jZSwgbm93IHRoYXQgR2FsYmEgaGFkIGJlZW4gZGVjbGFyZWQgYSBwdWJsaWMgZW5lbXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIG9yZGVyZWQgdGhlIHByb3BlcnR5IG9mIEdhbGJhIHRvIGJlIHNvbGQsIGFuZCBHYWxiYSwgd2hlbiBoZSBoZWFyZCBvZiBpdCwgcHV0IHVwIGF0IHB1YmxpYyBzYWxlIGFsbCB0aGF0IE5lcm8gb3duZWQgaW4gU3BhaW4sIGFuZCBmb3VuZCBtYW55IHJlYWRpZXIgYnV5ZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgd2VyZSBub3cgZmFsbGluZyBhd2F5IGZyb20gTmVybywgYW5kIGFsbW9zdCBhbGwgb2YgdGhlbSBhdHRhY2hlZCB0aGVtc2VsdmVzIHRvIEdhbGJhOyBvbmx5IENsb2RpdXMgTWFjZXIgaW4gQWZyaWNhLCBhbmQgVmVyZ2luaXVzIFJ1ZnVzIGluIEdhdWwgKHdoZXJlIGhlIGNvbW1hbmRlZCB0aGUgR2VybWFuIGZvcmNlcyksIGFjdGVkIG9uIHRoZWlyIG93biBhY2NvdW50LCB0aG91Z2ggZWFjaCB0b29rIGEgZGlmZmVyZW50IGNvdXJzZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Q2xvZGl1cywgd2hvc2UgY3J1ZWx0eSBhbmQgZ3JlZWQgaGFkIGxlZCBoaW0gaW50byByb2JiZXJpZXMgYW5kIG11cmRlcnMsIHdhcyBjbGVhcmx5IGluIGEgc3RyYWl0IHdoZXJlIGhlIGNvdWxkIG5laXRoZXIgcmV0YWluIG5vciBnaXZlIHVwIGhpcyBjb21tYW5kOyB3aGlsZSBWZXJnaW5pdXMsIHdobyBjb21tYW5kZWQgdGhlIHN0cm9uZ2VzdCBsZWdpb25zIGFuZCB3YXMgb2Z0ZW4gc2FsdXRlZCBieSB0aGVtIGFzIGVtcGVyb3IgYW5kIHN0cm9uZ2x5IHVyZ2VkIHRvIHRha2UgdGhlIHRpdGxlLCBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIG5laXRoZXIgYXNzdW1lIHRoZSBpbXBlcmlhbCBwb3dlciBoaW1zZWxmLCBub3IgYWxsb3cgaXQgdG8gYmUgZ2l2ZW4gdG8gYW55b25lIGVsc2Ugd2hvbSB0aGUgc2VuYXRlIGRpZCBub3QgZWxlY3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHRoaW5ncyBncmVhdGx5IGRpc3R1cmJlZCBHYWxiYSBhdCBmaXJzdDsgYnV0IHByZXNlbnRseSB0aGUgYXJtaWVzIG9mIFZlcmdpbml1cyBhbmQgVmluZGV4IGluIGEgbWFubmVyIGZvcmNlZCB0aGVpciBsZWFkZXJzLCBsaWtlIGNoYXJpb3RlZXJzIHdobyBoYWQgbG9zdCBjb250cm9sIG9mIHRoZSByZWlucywgaW50byB0aGUgY3Jhc2ggb2YgYSBncmVhdCBiYXR0bGUsIGFuZCBWaW5kZXgsIGFmdGVyIHRoZSBsb3NzIG9mIHR3ZW50eSB0aG91c2FuZCBHYXVscywgZGllZCBieSBoaXMgb3duIGhhbmQsIGFuZCBhIHJlcG9ydCB3YXMgY3VycmVudCB0aGF0IGFsbCB0aGUgc29sZGllcnMgZGVzaXJlZCBWZXJnaW5pdXMsIGluIHZpZXcgb2YgdGhlIGdyZWF0IHZpY3RvcnkgaGUgaGFkIHdvbiwgdG8gYXNzdW1lIHRoZSBpbXBlcmlhbCBwb3dlciwgb3IgdGhleSB3b3VsZCBnbyBiYWNrIGFnYWluIHRvIE5lcm8uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaW5kZWVkIEdhbGJhIHdhcyBhbGwgYWxhcm0sIGFuZCB3cm90ZSB0byBWZXJnaW5pdXMgaW52aXRpbmcgaGltIHRvIGpvaW4gaW4gZWZmb3J0cyBmb3IgdGhlIHByZXNlcnZhdGlvbiBhbGlrZSBvZiB0aGUgZW1waXJlIGFuZCB0aGUgZnJlZWRvbSBvZiB0aGUgUm9tYW5zLiBCdXQgYWZ0ZXIgdGhpcyBoZSByZXRpcmVkIHdpdGggaGlzIGZyaWVuZHMgdG8gQ2x1bmlhLCBhIGNpdHkgaW4gU3BhaW4sIGFuZCBzcGVudCBoaXMgdGltZSBpbiByZXBlbnRpbmcgb2Ygd2hhdCBoZSBoYWQgZG9uZSBhbmQgaW4gbG9uZ2luZyBmb3IgaGlzIGhhYml0dWFsIGFuZCB3b250ZWQgZnJlZWRvbSBmcm9tIGNhcmUsIHJhdGhlciB0aGFuIGluIHRha2luZyBhbnkgb2YgdGhlIHN0ZXBzIG5vdyBtYWRlIG5lY2Vzc2FyeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NYW55IHdlcmUgbm93IGZhbGxpbmcgYXdheSBmcm9tIE5lcm8sIGFuZCBhbG1vc3QgYWxsIG9mIHRoZW0gYXR0YWNoZWQgdGhlbXNlbHZlcyB0byBHYWxiYTsgb25seSBDbG9kaXVzIE1hY2VyIGluIEFmcmljYSwgYW5kIFZlcmdpbml1cyBSdWZ1cyBpbiBHYXVsICh3aGVyZSBoZSBjb21tYW5kZWQgdGhlIEdlcm1hbiBmb3JjZXMpLCBhY3RlZCBvbiB0aGVpciBvd24gYWNjb3VudCwgdGhvdWdoIGVhY2ggdG9vayBhIGRpZmZlcmVudCBjb3Vyc2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNsb2RpdXMsIHdob3NlIGNydWVsdHkgYW5kIGdyZWVkIGhhZCBsZWQgaGltIGludG8gcm9iYmVyaWVzIGFuZCBtdXJkZXJzLCB3YXMgY2xlYXJseSBpbiBhIHN0cmFpdCB3aGVyZSBoZSBjb3VsZCBuZWl0aGVyIHJldGFpbiBub3IgZ2l2ZSB1cCBoaXMgY29tbWFuZDsgd2hpbGUgVmVyZ2luaXVzLCB3aG8gY29tbWFuZGVkIHRoZSBzdHJvbmdlc3QgbGVnaW9ucyBhbmQgd2FzIG9mdGVuIHNhbHV0ZWQgYnkgdGhlbSBhcyBlbXBlcm9yIGFuZCBzdHJvbmdseSB1cmdlZCB0byB0YWtlIHRoZSB0aXRsZSwgZGVjbGFyZWQgdGhhdCBoZSB3b3VsZCBuZWl0aGVyIGFzc3VtZSB0aGUgaW1wZXJpYWwgcG93ZXIgaGltc2VsZiwgbm9yIGFsbG93IGl0IHRvIGJlIGdpdmVuIHRvIGFueW9uZSBlbHNlIHdob20gdGhlIHNlbmF0ZSBkaWQgbm90IGVsZWN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHRoaW5ncyBncmVhdGx5IGRpc3R1cmJlZCBHYWxiYSBhdCBmaXJzdDsgYnV0IHByZXNlbnRseSB0aGUgYXJtaWVzIG9mIFZlcmdpbml1cyBhbmQgVmluZGV4IGluIGEgbWFubmVyIGZvcmNlZCB0aGVpciBsZWFkZXJzLCBsaWtlIGNoYXJpb3RlZXJzIHdobyBoYWQgbG9zdCBjb250cm9sIG9mIHRoZSByZWlucywgaW50byB0aGUgY3Jhc2ggb2YgYSBncmVhdCBiYXR0bGUsIGFuZCBWaW5kZXgsIGFmdGVyIHRoZSBsb3NzIG9mIHR3ZW50eSB0aG91c2FuZCBHYXVscywgZGllZCBieSBoaXMgb3duIGhhbmQsIGFuZCBhIHJlcG9ydCB3YXMgY3VycmVudCB0aGF0IGFsbCB0aGUgc29sZGllcnMgZGVzaXJlZCBWZXJnaW5pdXMsIGluIHZpZXcgb2YgdGhlIGdyZWF0IHZpY3RvcnkgaGUgaGFkIHdvbiwgdG8gYXNzdW1lIHRoZSBpbXBlcmlhbCBwb3dlciwgb3IgdGhleSB3b3VsZCBnbyBiYWNrIGFnYWluIHRvIE5lcm8uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaW5kZWVkIEdhbGJhIHdhcyBhbGwgYWxhcm0sIGFuZCB3cm90ZSB0byBWZXJnaW5pdXMgaW52aXRpbmcgaGltIHRvIGpvaW4gaW4gZWZmb3J0cyBmb3IgdGhlIHByZXNlcnZhdGlvbiBhbGlrZSBvZiB0aGUgZW1waXJlIGFuZCB0aGUgZnJlZWRvbSBvZiB0aGUgUm9tYW5zLiBCdXQgYWZ0ZXIgdGhpcyBoZSByZXRpcmVkIHdpdGggaGlzIGZyaWVuZHMgdG8gQ2x1bmlhLCBhIGNpdHkgaW4gU3BhaW4sIGFuZCBzcGVudCBoaXMgdGltZSBpbiByZXBlbnRpbmcgb2Ygd2hhdCBoZSBoYWQgZG9uZSBhbmQgaW4gbG9uZ2luZyBmb3IgaGlzIGhhYml0dWFsIGFuZCB3b250ZWQgZnJlZWRvbSBmcm9tIGNhcmUsIHJhdGhlciB0aGFuIGluIHRha2luZyBhbnkgb2YgdGhlIHN0ZXBzIG5vdyBtYWRlIG5lY2Vzc2FyeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgbm93IHN1bW1lciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PZiA2OCBBLkQuPC9ub3RlPiBhbmQgc2hvcnRseSBiZWZvcmUgc3Vuc2V0IHRoZXJlIGNhbWUgZnJvbSBSb21lIGEgZnJlZWRtYW4gbmFtZWQgSWNlbHVzLCB3aG8gaGFkIG1hZGUgdGhlIGpvdXJuZXkgaW4gc2V2ZW4gZGF5cy4gSGF2aW5nIGxlYXJuZWQgdGhhdCBHYWxiYSB3YXMgcmVwb3NpbmcgYnkgaGltc2VsZiwgaGUgd2VudCBpbiBob3QgaGFzdGUgdG8gaGlzIGNoYW1iZXIsIG9wZW5lZCB0aGUgZG9vciBpbiBzcGl0ZSBvZiB0aGUgY2hhbWJlcmxhaW5zLCBlbnRlcmVkLCBhbmQgYW5ub3VuY2VkIHRoYXQgd2hpbGUgTmVybyB3YXMgc3RpbGwgYWxpdmUsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpbiBoaWRpbmcsIHRoYXQgdGhlIGFybXkgZmlyc3QsIGFuZCB0aGVuIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSwgaGFkIHByb2NsYWltZWQgR2FsYmEgZW1wZXJvciwgYW5kIHRoYXQgYSBsaXR0bGUgd2hpbGUgYWZ0ZXJ3YXJkcyBpdCB3YXMgcmVwb3J0ZWQgdGhhdCBOZXJvIHdhcyBkZWFkOyBJY2VsdXMgaGltc2VsZiwgaG93ZXZlciwgYXMgaGUgc2FpZCwgaGFkIG5vdCBiZWxpZXZlZCB0aGUgcmVwb3J0LCBidXQgaGFkIGdvbmUgYW5kIHNlZW4gdGhlIGRlYWQgYm9keSB3aGVyZSBpdCBsYXksIGFuZCB0aGVuIGhhZCBzZXQgb3V0IG9uIGhpcyBqb3VybmV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGFubm91bmNlbWVudCBoaWdobHkgZWxhdGVkIEdhbGJhLCBhbmQgdGhlcmUgY2FtZSBydW5uaW5nIHRvIGhpcyBkb29yIGEgbXVsdGl0dWRlIG9mIG1lbiB3aG8gaGFkIGdhaW5lZCBjb21wbGV0ZSBjb25maWRlbmNlIGFzIHRoZSByZXN1bHQgb2YgSWNlbHVzJyByZXBvcnQuIEFuZCB5ZXQgdGhlIG1lc3NlbmdlcidzIHNwZWVkIHdhcyBpbmNyZWRpYmxlLiBCdXQgdHdvIGRheXMgYWZ0ZXJ3YXJkcyBUaXR1cyBWaW5pdXMgd2l0aCBvdGhlcnMgY2FtZSBmcm9tIHRoZSBjYW1wIGFuZCByZXBvcnRlZCBpbiBkZXRhaWwgdGhlIGRlY3JlZXMgb2YgdGhlIHNlbmF0ZS4gVmluaXVzLCBhY2NvcmRpbmdseSwgd2FzIGFkdmFuY2VkIHRvIGEgcG9zaXRpb24gb2YgaG9ub3VyLCBhbmQgYXMgZm9yIHRoZSBmcmVlZG1hbiwgaGUgd2FzIGFsbG93ZWQgdG8gd2VhciB0aGUgZ29sZCByaW5nLCByZWNlaXZlZCB0aGUgbmFtZSBvZiBNYXJjaWFudXMgaW5zdGVhZCBvZiBJY2VsdXMsIGFuZCBoYWQgdGhlIGNoaWVmIGluZmx1ZW5jZSBhbW9uZyB0aGUgZnJlZWRtZW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgbm93IHN1bW1lciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9mIDY4IEEuRC48L25vdGU+IGFuZCBzaG9ydGx5IGJlZm9yZSBzdW5zZXQgdGhlcmUgY2FtZSBmcm9tIFJvbWUgYSBmcmVlZG1hbiBuYW1lZCBJY2VsdXMsIHdobyBoYWQgbWFkZSB0aGUgam91cm5leSBpbiBzZXZlbiBkYXlzLiBIYXZpbmcgbGVhcm5lZCB0aGF0IEdhbGJhIHdhcyByZXBvc2luZyBieSBoaW1zZWxmLCBoZSB3ZW50IGluIGhvdCBoYXN0ZSB0byBoaXMgY2hhbWJlciwgb3BlbmVkIHRoZSBkb29yIGluIHNwaXRlIG9mIHRoZSBjaGFtYmVybGFpbnMsIGVudGVyZWQsIGFuZCBhbm5vdW5jZWQgdGhhdCB3aGlsZSBOZXJvIHdhcyBzdGlsbCBhbGl2ZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpbiBoaWRpbmcsIHRoYXQgdGhlIGFybXkgZmlyc3QsIGFuZCB0aGVuIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSwgaGFkIHByb2NsYWltZWQgR2FsYmEgZW1wZXJvciwgYW5kIHRoYXQgYSBsaXR0bGUgd2hpbGUgYWZ0ZXJ3YXJkcyBpdCB3YXMgcmVwb3J0ZWQgdGhhdCBOZXJvIHdhcyBkZWFkOyBJY2VsdXMgaGltc2VsZiwgaG93ZXZlciwgYXMgaGUgc2FpZCwgaGFkIG5vdCBiZWxpZXZlZCB0aGUgcmVwb3J0LCBidXQgaGFkIGdvbmUgYW5kIHNlZW4gdGhlIGRlYWQgYm9keSB3aGVyZSBpdCBsYXksIGFuZCB0aGVuIGhhZCBzZXQgb3V0IG9uIGhpcyBqb3VybmV5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYW5ub3VuY2VtZW50IGhpZ2hseSBlbGF0ZWQgR2FsYmEsIGFuZCB0aGVyZSBjYW1lIHJ1bm5pbmcgdG8gaGlzIGRvb3IgYSBtdWx0aXR1ZGUgb2YgbWVuIHdobyBoYWQgZ2FpbmVkIGNvbXBsZXRlIGNvbmZpZGVuY2UgYXMgdGhlIHJlc3VsdCBvZiBJY2VsdXMnIHJlcG9ydC4gQW5kIHlldCB0aGUgbWVzc2VuZ2VyJ3Mgc3BlZWQgd2FzIGluY3JlZGlibGUuIEJ1dCB0d28gZGF5cyBhZnRlcndhcmRzIFRpdHVzIFZpbml1cyB3aXRoIG90aGVycyBjYW1lIGZyb20gdGhlIGNhbXAgYW5kIHJlcG9ydGVkIGluIGRldGFpbCB0aGUgZGVjcmVlcyBvZiB0aGUgc2VuYXRlLiBWaW5pdXMsIGFjY29yZGluZ2x5LCB3YXMgYWR2YW5jZWQgdG8gYSBwb3NpdGlvbiBvZiBob25vdXIsIGFuZCBhcyBmb3IgdGhlIGZyZWVkbWFuLCBoZSB3YXMgYWxsb3dlZCB0byB3ZWFyIHRoZSBnb2xkIHJpbmcsIHJlY2VpdmVkIHRoZSBuYW1lIG9mIE1hcmNpYW51cyBpbnN0ZWFkIG9mIEljZWx1cywgYW5kIGhhZCB0aGUgY2hpZWYgaW5mbHVlbmNlIGFtb25nIHRoZSBmcmVlZG1lbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgUm9tZSBOeW1waGlkaXVzIFNhYmludXMgd2FzIGZvcmNpbmcgdGhlIGVudGlyZSBjb250cm9sIG9mIGFmZmFpcnMgaW50byBoaXMgb3duIGhhbmRzLCBub3Qgc2xvd2x5IGFuZCBsaXR0bGUgYnkgbGl0dGxlLCBidXQgYWxsIGF0IG9uY2UuIEhlIHRob3VnaHQgdGhhdCBHYWxiYSB3YXMgYW4gb2xkIG1hbiBhbmQgd291bGQgaGFyZGx5IGhhdmUgdGhlIHN0cmVuZ3RoIHRvIGJlIGNhcnJpZWQgdG8gUm9tZSBvbiBhIGxpdHRlciwgYnkgcmVhc29uIG9mIGhpcyBhZ2UsIGZvciBoZSB3YXMgaW4gaGlzIHNldmVudHktdGhpcmQgeWVhcjsgbW9yZW92ZXIsIGhlIGtuZXcgdGhhdCB0aGUgc29sZGllcnkgaW4gdGhlIGNpdHkgaGFkIGxvbmcgYmVlbiB3ZWxsIGRpc3Bvc2VkIHRvd2FyZHMgaGltIGFuZCB3ZXJlIG5vdyBkZXZvdGVkIHRvIGhpbSBhbG9uZSwgcmVnYXJkaW5nIGhpbSBhcyB0aGVpciBiZW5lZmFjdG9yIGJlY2F1c2Ugb2YgdGhlIGxhcmdlIGdpZnRzIHdoaWNoIGhlIHByb21pc2VkLCBidXQgR2FsYmEgYXMgdGhlaXIgZGVidG9yLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TdHJhaWdodHdheSwgdGhlcmVmb3JlLCBoZSBvcmRlcmVkIGhpcyBjb2xsZWFndWUgVGlnZWxsaW51cyB0byBsYXkgZG93biBoaXMgc3dvcmQsIGdhdmUgcmVjZXB0aW9ucyBhdCB3aGljaCBoZSBiYW5xdWV0ZWQgbWVuIHdobyBoYWQgYmVlbiBjb25zdWxzIG9yIGluIGhpZ2ggY29tbWFuZCAoYWx0aG91Z2ggaGUgc3RpbGwgYWZmaXhlZCB0aGUgbmFtZSBvZiBHYWxiYSB0byBoaXMgaW52aXRhdGlvbnMpLCBhbmQgaW5zdGlnYXRlZCBtYW55IG9mIHRoZSBzb2xkaWVycyB0byBkZWNsYXJlIHRoYXQgYSBkZXB1dGF0aW9uIG91Z2h0IHRvIGJlIHNlbnQgdG8gR2FsYmEgZGVtYW5kaW5nIHRoYXQgTnltcGhpZGl1cyBiZSBtYWRlIHByZWZlY3QgZm9yIGxpZmUgd2l0aG91dCBhIGNvbGxlYWd1ZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgUm9tZSBOeW1waGlkaXVzIFNhYmludXMgd2FzIGZvcmNpbmcgdGhlIGVudGlyZSBjb250cm9sIG9mIGFmZmFpcnMgaW50byBoaXMgb3duIGhhbmRzLCBub3Qgc2xvd2x5IGFuZCBsaXR0bGUgYnkgbGl0dGxlLCBidXQgYWxsIGF0IG9uY2UuIEhlIHRob3VnaHQgdGhhdCBHYWxiYSB3YXMgYW4gb2xkIG1hbiBhbmQgd291bGQgaGFyZGx5IGhhdmUgdGhlIHN0cmVuZ3RoIHRvIGJlIGNhcnJpZWQgdG8gUm9tZSBvbiBhIGxpdHRlciwgYnkgcmVhc29uIG9mIGhpcyBhZ2UsIGZvciBoZSB3YXMgaW4gaGlzIHNldmVudHktdGhpcmQgeWVhcjsgbW9yZW92ZXIsIGhlIGtuZXcgdGhhdCB0aGUgc29sZGllcnkgaW4gdGhlIGNpdHkgaGFkIGxvbmcgYmVlbiB3ZWxsIGRpc3Bvc2VkIHRvd2FyZHMgaGltIGFuZCB3ZXJlIG5vdyBkZXZvdGVkIHRvIGhpbSBhbG9uZSwgcmVnYXJkaW5nIGhpbSBhcyB0aGVpciBiZW5lZmFjdG9yIGJlY2F1c2Ugb2YgdGhlIGxhcmdlIGdpZnRzIHdoaWNoIGhlIHByb21pc2VkLCBidXQgR2FsYmEgYXMgdGhlaXIgZGVidG9yLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN0cmFpZ2h0d2F5LCB0aGVyZWZvcmUsIGhlIG9yZGVyZWQgaGlzIGNvbGxlYWd1ZSBUaWdlbGxpbnVzIHRvIGxheSBkb3duIGhpcyBzd29yZCwgZ2F2ZSByZWNlcHRpb25zIGF0IHdoaWNoIGhlIGJhbnF1ZXRlZCBtZW4gd2hvIGhhZCBiZWVuIGNvbnN1bHMgb3IgaW4gaGlnaCBjb21tYW5kIChhbHRob3VnaCBoZSBzdGlsbCBhZmZpeGVkIHRoZSBuYW1lIG9mIEdhbGJhIHRvIGhpcyBpbnZpdGF0aW9ucyksIGFuZCBpbnN0aWdhdGVkIG1hbnkgb2YgdGhlIHNvbGRpZXJzIHRvIGRlY2xhcmUgdGhhdCBhIGRlcHV0YXRpb24gb3VnaHQgdG8gYmUgc2VudCB0byBHYWxiYSBkZW1hbmRpbmcgdGhhdCBOeW1waGlkaXVzIGJlIG1hZGUgcHJlZmVjdCBmb3IgbGlmZSB3aXRob3V0IGEgY29sbGVhZ3VlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgdGhlIHNlbmF0ZSBkaWQgbXVjaCB0byBlbmhhbmNlIGhpcyBob25vdXIgYW5kIHBvd2VyLCBnaXZpbmcgaGltIHRoZSB0aXRsZSBvZiBiZW5lZmFjdG9yLCBhc3NlbWJsaW5nIGRhaWx5IGF0IGhpcyBkb29yLCBhbmQgYWxsb3dpbmcgaGltIHRoZSBwcml2aWxlZ2Ugb2YgaW5pdGlhdGluZyBhbmQgY29uZmlybWluZyBhbGwgdGhlaXIgZGVjcmVlcy4gVGhpcyByYWlzZWQgaGltIHRvIGEgc3RpbGwgaGlnaGVyIHBpdGNoIG9mIGJvbGRuZXNzLCBzbyB0aGF0IHdpdGhpbiBhIHNob3J0IHRpbWUgdGhvc2Ugd2hvIHBhaWQgY291cnQgdG8gaGltIHdlcmUgZmlsbGVkLCBub3Qgb25seSB3aXRoIGplYWxvdXN5LCBidXQgYWxzbyB3aXRoIGZlYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGNvbnN1bHMgcHJvdmlkZWQgcHVibGljIHNlcnZhbnRzIHRvIGNhcnJ5IHRoZSBkZWNyZWVzIG9mIHRoZSBzZW5hdGUgdG8gdGhlIGVtcGVyb3IsIGFuZCBnYXZlIHRvIHRoZXNlIHRoZSBkaXBsb21hcywgYXMgdGhleSB3ZXJlIGNhbGxlZCwgc2VhbGVkIHdpdGggdGhlaXIgb2ZmaWNpYWwgc2VhbCAoaW4gb3JkZXIgdGhhdCB0aGUgbWFnaXN0cmF0ZXMgb2YgdGhlIHZhcmlvdXMgY2l0aWVzLCByZWNvZ25pc2luZyB0aGlzLCBtaWdodCBleHBlZGl0ZSB0aGUgc3VwcGx5IG9mIGZyZXNoIHZlaGljbGVzIGZvciB0aGUgam91cm5leSBvZiB0aGUgY291cmllcnMpLCBoZSB3YXMgdmV4ZWQgYmV5b25kIGFsbCBib3VuZHMgYmVjYXVzZSB0aGUgZGVjcmVlcyBoYWQgbm90IGJlZW4gc2VudCB1bmRlciBoaXMgc2VhbCBhbmQgaW4gY2hhcmdlIG9mIGhpcyBzb2xkaWVycywgbmF5LCBpdCBpcyBzYWlkIHRoYXQgaGUgYWN0dWFsbHkgdGhvdWdodCBvZiBwcm9jZWVkaW5nIGFnYWluc3QgdGhlIGNvbnN1bHMsIGJ1dCBwdXQgYXdheSBoaXMgd3JhdGggd2hlbiB0aGV5IGV4Y3VzZWQgdGhlbXNlbHZlcyBhbmQgYmVnZ2VkIGZvciBmb3JnaXZlbmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIGluIGhpcyBkZXNpcmUgdG8gZ3JhdGlmeSB0aGUgcGVvcGxlLCBoZSB3b3VsZCBub3QgcHJldmVudCB0aGVtIGZyb20gYmVhdGluZyB0byBkZWF0aCBhbnkgZm9sbG93ZXIgb2YgTmVybyB3aG8gZmVsbCBpbnRvIHRoZWlyIGhhbmRzLiBBY2NvcmRpbmdseSwgdGhleSBjYXN0IFNwaWN1bHVzIHRoZSBnbGFkaWF0b3IgdW5kZXIgc3RhdHVlcyBvZiBOZXJvIHRoYXQgd2VyZSBiZWluZyBkcmFnZ2VkIGFib3V0IGluIHRoZSBmb3J1bSwgYW5kIGtpbGxlZCBoaW07IEFwb25pdXMsIG9uZSBvZiBOZXJvJ3MgaW5mb3JtZXJzLCB0aGV5IHRocmV3IHRvIHRoZSBncm91bmQgYW5kIGRyYWdnZWQgd2FnZ29ucyBsYWRlbiB3aXRoIHN0b25lIG92ZXIgaGltOyBhbmQgbWFueSBvdGhlcnMsIHNvbWUgb2Ygd2hvbSBoYWQgZG9uZSBubyB3cm9uZywgdGhleSB0b3JlIGluIHBpZWNlcywgc28gdGhhdCBNYXVyaWN1cywgd2hvIHdhcyBqdXN0bHkgZGVlbWVkIG9uZSBvZiB0aGUgYmVzdCBtZW4gaW4gUm9tZSwgdG9sZCB0aGUgc2VuYXRlIHRoYXQgaGUgd2FzIGFmcmFpZCB0aGV5IHdvdWxkIHNvb24gYmUgc2VhcmNoaW5nIGZvciBhIE5lcm8uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgc2VuYXRlIGRpZCBtdWNoIHRvIGVuaGFuY2UgaGlzIGhvbm91ciBhbmQgcG93ZXIsIGdpdmluZyBoaW0gdGhlIHRpdGxlIG9mIGJlbmVmYWN0b3IsIGFzc2VtYmxpbmcgZGFpbHkgYXQgaGlzIGRvb3IsIGFuZCBhbGxvd2luZyBoaW0gdGhlIHByaXZpbGVnZSBvZiBpbml0aWF0aW5nIGFuZCBjb25maXJtaW5nIGFsbCB0aGVpciBkZWNyZWVzLiBUaGlzIHJhaXNlZCBoaW0gdG8gYSBzdGlsbCBoaWdoZXIgcGl0Y2ggb2YgYm9sZG5lc3MsIHNvIHRoYXQgd2l0aGluIGEgc2hvcnQgdGltZSB0aG9zZSB3aG8gcGFpZCBjb3VydCB0byBoaW0gd2VyZSBmaWxsZWQsIG5vdCBvbmx5IHdpdGggamVhbG91c3ksIGJ1dCBhbHNvIHdpdGggZmVhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGNvbnN1bHMgcHJvdmlkZWQgcHVibGljIHNlcnZhbnRzIHRvIGNhcnJ5IHRoZSBkZWNyZWVzIG9mIHRoZSBzZW5hdGUgdG8gdGhlIGVtcGVyb3IsIGFuZCBnYXZlIHRvIHRoZXNlIHRoZSBkaXBsb21hcywgYXMgdGhleSB3ZXJlIGNhbGxlZCwgc2VhbGVkIHdpdGggdGhlaXIgb2ZmaWNpYWwgc2VhbCAoaW4gb3JkZXIgdGhhdCB0aGUgbWFnaXN0cmF0ZXMgb2YgdGhlIHZhcmlvdXMgY2l0aWVzLCByZWNvZ25pc2luZyB0aGlzLCBtaWdodCBleHBlZGl0ZSB0aGUgc3VwcGx5IG9mIGZyZXNoIHZlaGljbGVzIGZvciB0aGUgam91cm5leSBvZiB0aGUgY291cmllcnMpLCBoZSB3YXMgdmV4ZWQgYmV5b25kIGFsbCBib3VuZHMgYmVjYXVzZSB0aGUgZGVjcmVlcyBoYWQgbm90IGJlZW4gc2VudCB1bmRlciBoaXMgc2VhbCBhbmQgaW4gY2hhcmdlIG9mIGhpcyBzb2xkaWVycywgbmF5LCBpdCBpcyBzYWlkIHRoYXQgaGUgYWN0dWFsbHkgdGhvdWdodCBvZiBwcm9jZWVkaW5nIGFnYWluc3QgdGhlIGNvbnN1bHMsIGJ1dCBwdXQgYXdheSBoaXMgd3JhdGggd2hlbiB0aGV5IGV4Y3VzZWQgdGhlbXNlbHZlcyBhbmQgYmVnZ2VkIGZvciBmb3JnaXZlbmVzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBpbiBoaXMgZGVzaXJlIHRvIGdyYXRpZnkgdGhlIHBlb3BsZSwgaGUgd291bGQgbm90IHByZXZlbnQgdGhlbSBmcm9tIGJlYXRpbmcgdG8gZGVhdGggYW55IGZvbGxvd2VyIG9mIE5lcm8gd2hvIGZlbGwgaW50byB0aGVpciBoYW5kcy4gQWNjb3JkaW5nbHksIHRoZXkgY2FzdCBTcGljdWx1cyB0aGUgZ2xhZGlhdG9yIHVuZGVyIHN0YXR1ZXMgb2YgTmVybyB0aGF0IHdlcmUgYmVpbmcgZHJhZ2dlZCBhYm91dCBpbiB0aGUgZm9ydW0sIGFuZCBraWxsZWQgaGltOyBBcG9uaXVzLCBvbmUgb2YgTmVybydzIGluZm9ybWVycywgdGhleSB0aHJldyB0byB0aGUgZ3JvdW5kIGFuZCBkcmFnZ2VkIHdhZ2dvbnMgbGFkZW4gd2l0aCBzdG9uZSBvdmVyIGhpbTsgYW5kIG1hbnkgb3RoZXJzLCBzb21lIG9mIHdob20gaGFkIGRvbmUgbm8gd3JvbmcsIHRoZXkgdG9yZSBpbiBwaWVjZXMsIHNvIHRoYXQgTWF1cmljdXMsIHdobyB3YXMganVzdGx5IGRlZW1lZCBvbmUgb2YgdGhlIGJlc3QgbWVuIGluIFJvbWUsIHRvbGQgdGhlIHNlbmF0ZSB0aGF0IGhlIHdhcyBhZnJhaWQgdGhleSB3b3VsZCBzb29uIGJlIHNlYXJjaGluZyBmb3IgYSBOZXJvLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgY29taW5nIGluIGhpcyBob3BlcyBuZWFyZXIgYW5kIG5lYXJlciB0byBoaXMgZ29hbCwgTnltcGhpZGl1cyB3YXMgbm90IGF2ZXJzZSB0byBoYXZpbmcgaXQgc2FpZCB0aGF0IGhlIHdhcyB0aGUgc29uIG9mIHRoZSBDYWl1cyBDYWVzYXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWxpZ3VsYS48L25vdGU+IHdobyBzdWNjZWVkZWQgVGliZXJpdXMuIEZvciBDYWl1cywgYXMgaXQgd291bGQgYXBwZWFyLCB3aGlsZSBzdGlsbCBhIHlvdW5nIG1hbiwgaGFkIGJlZW4gaW50aW1hdGUgd2l0aCB0aGUgbW90aGVyIG9mIE55bXBoaWRpdXMsIGEgd29tYW4gb2YgY29tZWx5IGFwcGVhcmFuY2UgYW5kIGEgZGF1Z2h0ZXIgb2YgQ2FsbGlzdHVzLCBDYWVzYXIncyBmcmVlZG1hbiwgYnkgYSBoaXJlZCBzZW1wc3RyZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhpcyBpbnRpbWFjeSwgYXMgaXQgd291bGQgc2VlbSwgd2FzIGxhdGVyIHRoYW4gdGhlIGJpcnRoIG9mIE55bXBoaWRpdXMsIGFuZCBpdCB3YXMgYmVsaWV2ZWQgdGhhdCBoZSB3YXMgYSBzb24gb2YgTWFydGlhbnVzLCB0aGUgZ2xhZGlhdG9yICh3aXRoIHdob20gTnltcGhpZGlhIGZlbGwgaW4gbG92ZSBvbiBhY2NvdW50IG9mIGhpcyBmYW1lKSwgYW5kIGhpcyByZXNlbWJsYW5jZSB0byBNYXJ0aWFudXMgd2FzIHRob3VnaHQgdG8gZmF2b3VyIHRoaXMgY29ubmVjdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFsdGhvdWdoIGhlIGNlcnRhaW5seSBhZG1pdHRlZCB0aGF0IE55bXBoaWRpYSB3YXMgaGlzIG1vdGhlciwgaGUgdG9vayB0byBoaW1zZWxmIHNvbGUgY3JlZGl0IGZvciB0aGUgb3ZlcnRocm93IG9mIE5lcm8sIGFuZCB0aGlua2luZyBoaW1zZWxmIGluc3VmZmljaWVudGx5IHJld2FyZGVkIGZvciB0aGlzIGJ5IHRoZSBob25vdXJzIGFuZCB3ZWFsdGggd2hpY2ggaGUgZW5qb3llZCwgYW5kIGJ5IHRoZSBjb21wYW55IG9mIFNwb3J1cywgTmVybydzIGZhdm91cml0ZSAod2hvbSBoZSBoYWQgc2VudCBmb3IgYXQgb25jZSwgd2hpbGUgTmVybydzIGJvZHkgd2FzIHlldCBidXJuaW5nIG9uIGl0cyBweXJlLCBhbmQgdHJlYXRlZCBhcyBoaXMgY29uc29ydCwgYW5kIGFkZHJlc3NlZCBieSB0aGUgbmFtZSBvZiBQb3BwYWVhKSwgaGUgYXNwaXJlZCB0byB0aGUgc3VjY2Vzc2lvbiBpbiB0aGUgZW1waXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIHNlY3JldCBzdGVwcyB0byB0aGlzIGVuZCBoZSBoaW1zZWxmIHRvb2sgYXQgUm9tZSB0aHJvdWdoIHRoZSBhZ2VuY3kgb2YgaGlzIGZyaWVuZHMsIGFuZCBjZXJ0YWluIHdvbWVuIGFuZCBtZW4gb2Ygc2VuYXRvcmlhbCByYW5rIHNlY3JldGx5IGFzc2lzdGVkIGhpbSwgYW5kIG9uZSBvZiBoaXMgZnJpZW5kcywgR2VsbGlhbnVzLCBoZSBzZW50IHRvIFNwYWluIHRvIGtlZXAgYW4gZXllIHVwb24gbWF0dGVycyB0aGVyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGNvbWluZyBpbiBoaXMgaG9wZXMgbmVhcmVyIGFuZCBuZWFyZXIgdG8gaGlzIGdvYWwsIE55bXBoaWRpdXMgd2FzIG5vdCBhdmVyc2UgdG8gaGF2aW5nIGl0IHNhaWQgdGhhdCBoZSB3YXMgdGhlIHNvbiBvZiB0aGUgQ2FpdXMgQ2Flc2FyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWxpZ3VsYS48L25vdGU+IHdobyBzdWNjZWVkZWQgVGliZXJpdXMuIEZvciBDYWl1cywgYXMgaXQgd291bGQgYXBwZWFyLCB3aGlsZSBzdGlsbCBhIHlvdW5nIG1hbiwgaGFkIGJlZW4gaW50aW1hdGUgd2l0aCB0aGUgbW90aGVyIG9mIE55bXBoaWRpdXMsIGEgd29tYW4gb2YgY29tZWx5IGFwcGVhcmFuY2UgYW5kIGEgZGF1Z2h0ZXIgb2YgQ2FsbGlzdHVzLCBDYWVzYXIncyBmcmVlZG1hbiwgYnkgYSBoaXJlZCBzZW1wc3RyZXNzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIGludGltYWN5LCBhcyBpdCB3b3VsZCBzZWVtLCB3YXMgbGF0ZXIgdGhhbiB0aGUgYmlydGggb2YgTnltcGhpZGl1cywgYW5kIGl0IHdhcyBiZWxpZXZlZCB0aGF0IGhlIHdhcyBhIHNvbiBvZiBNYXJ0aWFudXMsIHRoZSBnbGFkaWF0b3IgKHdpdGggd2hvbSBOeW1waGlkaWEgZmVsbCBpbiBsb3ZlIG9uIGFjY291bnQgb2YgaGlzIGZhbWUpLCBhbmQgaGlzIHJlc2VtYmxhbmNlIHRvIE1hcnRpYW51cyB3YXMgdGhvdWdodCB0byBmYXZvdXIgdGhpcyBjb25uZWN0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCBoZSBjZXJ0YWlubHkgYWRtaXR0ZWQgdGhhdCBOeW1waGlkaWEgd2FzIGhpcyBtb3RoZXIsIGhlIHRvb2sgdG8gaGltc2VsZiBzb2xlIGNyZWRpdCBmb3IgdGhlIG92ZXJ0aHJvdyBvZiBOZXJvLCBhbmQgdGhpbmtpbmcgaGltc2VsZiBpbnN1ZmZpY2llbnRseSByZXdhcmRlZCBmb3IgdGhpcyBieSB0aGUgaG9ub3VycyBhbmQgd2VhbHRoIHdoaWNoIGhlIGVuam95ZWQsIGFuZCBieSB0aGUgY29tcGFueSBvZiBTcG9ydXMsIE5lcm8ncyBmYXZvdXJpdGUgKHdob20gaGUgaGFkIHNlbnQgZm9yIGF0IG9uY2UsIHdoaWxlIE5lcm8ncyBib2R5IHdhcyB5ZXQgYnVybmluZyBvbiBpdHMgcHlyZSwgYW5kIHRyZWF0ZWQgYXMgaGlzIGNvbnNvcnQsIGFuZCBhZGRyZXNzZWQgYnkgdGhlIG5hbWUgb2YgUG9wcGFlYSksIGhlIGFzcGlyZWQgdG8gdGhlIHN1Y2Nlc3Npb24gaW4gdGhlIGVtcGlyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgc2VjcmV0IHN0ZXBzIHRvIHRoaXMgZW5kIGhlIGhpbXNlbGYgdG9vayBhdCBSb21lIHRocm91Z2ggdGhlIGFnZW5jeSBvZiBoaXMgZnJpZW5kcywgYW5kIGNlcnRhaW4gd29tZW4gYW5kIG1lbiBvZiBzZW5hdG9yaWFsIHJhbmsgc2VjcmV0bHkgYXNzaXN0ZWQgaGltLCBhbmQgb25lIG9mIGhpcyBmcmllbmRzLCBHZWxsaWFudXMsIGhlIHNlbnQgdG8gU3BhaW4gdG8ga2VlcCBhbiBleWUgdXBvbiBtYXR0ZXJzIHRoZXJlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZXZlcnl0aGluZyB3ZW50IHdlbGwgd2l0aCBHYWxiYSBhZnRlciB0aGUgZGVhdGggb2YgTmVyby4gVmVyZ2luaXVzIFJ1ZnVzLCBpdCBpcyB0cnVlLCB3aG8gd2FzIHN0aWxsIGhlc2l0YXRpbmcsIGdhdmUgaGltIGFueGlldHkuIEZvciBiZXNpZGVzIGNvbW1hbmRpbmcgYSBsYXJnZSBhbmQgbW9zdCBlZmZpY2llbnQgYXJteSwgVmVyZ2luaXVzIGhhZCB0aGUgYWRkZWQgcHJlc3RpZ2Ugb2YgaGlzIHZpY3Rvcnkgb3ZlciBWaW5kZXggYW5kIGhpcyBzdWJqdWdhdGlvbiBvZiBhbGwgR2F1bCwgd2hpY2ggd2FzIGEgbGFyZ2UgcGFydCBvZiB0aGUgUm9tYW4gRW1waXJlIGFuZCBoYWQgYmVlbiBpbiB0aGUgdGhyb2VzIG9mIHJldm9sdC4gR2FsYmEgdGhlcmVmb3JlIGZlYXJlZCB0aGF0IFZlcmdpbml1cyBtaWdodCBsaXN0ZW4gdG8gdGhvc2Ugd2hvIGludml0ZWQgaGltIHRvIHRha2UgdGhlIHN1cHJlbWUgcG93ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBubyBtYW4ncyBuYW1lIHdhcyBncmVhdGVyIHRoYW4gdGhhdCBvZiBWZXJnaW5pdXMsIGFuZCBubyBtYW4gaGFkIGEgcmVwdXRhdGlvbiBlcXVhbCB0byBoaXMsIHNpbmNlIGhlIGhhZCBleGVyY2lzZWQgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSBpbiByaWRkaW5nIHRoZSBSb21hbiBzdGF0ZSBhbGlrZSBvZiBhIGdyaWV2b3VzIHR5cmFudCBhbmQgb2YgR2FsbGljIHdhcnMuIEJ1dCBpbiB0aGUgcHJlc2VudCBjcmlzaXMgaGUgd2FzIHRydWUgdG8gaGlzIG9yaWdpbmFsIHJlc29sdmVzIGFuZCBtYWludGFpbmVkIHRoZSBzZW5hdGUncyByaWdodCB0byBjaG9vc2UgdGhlIGVtcGVyb3IuIEFuZCB5ZXQgd2hlbiBOZXJvJ3MgZGVhdGggd2FzIGtub3duIGZvciBjZXJ0YWluLCB0aGUgbWFzcyBvZiBoaXMgc29sZGllcnkgd2VyZSBpbnNpc3RlbnQgYWdhaW4gd2l0aCBWZXJnaW5pdXMsIGFuZCBvbmUgb2YgdGhlIG1pbGl0YXJ5IHRyaWJ1bmVzIGluIGhpcyB0ZW50IGRyZXcgaGlzIHN3b3JkIGFuZCBvcmRlcmVkIFZlcmdpbml1cyB0byBjaG9vc2UgYmV0d2VlbiBpbXBlcmlhbCBwb3dlciBhbmQgdGhlIHN0ZWVsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWZ0ZXIgRmFiaXVzIFZhbGVucywgY29tbWFuZGVyIG9mIGEgbGVnaW9uLCBoYWQgbGVkIG9mZiBpbiB0YWtpbmcgdGhlIG9hdGggb2YgYWxsZWdpYW5jZSB0byBHYWxiYSwgYW5kIGxldHRlcnMgaGFkIGNvbWUgZnJvbSBSb21lIHRlbGxpbmcgb2YgdGhlIHNlbmF0ZSdzIGRlY3JlZXMsIGhlIHN1Y2NlZWRlZCBhdCBsYXN0LCB0aG91Z2ggd2l0aCB0aGUgZ3JlYXRlc3QgZGlmZmljdWx0eSwgaW4gcGVyc3VhZGluZyBoaXMgc29sZGllcnMgdG8gZGVjbGFyZSBHYWxiYSBlbXBlcm9yOyBhbmQgd2hlbiBHYWxiYSBzZW50IEZsYWNjdXMgSG9yZGVvbml1cyB0byBzdWNjZWVkIGhpbSwgVmVyZ2luaXVzIHJlY2VpdmVkIHRoYXQgb2ZmaWNlciwgaGFuZGVkIG92ZXIgaGlzIGFybXkgdG8gaGltLCBhbmQgd2VudCBoaW1zZWxmIHRvIG1lZXQgR2FsYmEgYXMgaGUgYWR2YW5jZWQsIGFuZCB0dXJuZWQgYmFjayBpbiBoaXMgY29tcGFueSB3aXRob3V0IHJlY2VpdmluZyBhbnkgY2xlYXIgbWFyayBlaXRoZXIgb2YgaGlzIGFuZ2VyIG9yIGVzdGVlbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgZHVlLCBpbiB0aGUgb25lIGNhc2UsIHRvIEdhbGJhIGhpbXNlbGYsIHdobyBoYWQgYSB3aG9sZXNvbWUgcmVzcGVjdCBmb3IgVmVyZ2luaXVzLCBhbmQgaW4gdGhlIG90aGVyIHRvIEdhbGJhJ3MgZnJpZW5kcywgZXNwZWNpYWxseSBUaXR1cyBWaW5pdXMuIFZpbml1cyB3YXMgamVhbG91cyBvZiBWZXJnaW5pdXMsIGFuZCB0aG91Z2h0IHRvIGJsb2NrIGhpcyBjYXJlZXI7IGJ1dCB3aXRob3V0IGtub3dpbmcgaXQgaGUgd2FzIGFpZGluZyB0aGUgbWFuJ3MgZ29vZCBnZW5pdXMsIHdoaWNoIHdhcyBub3cgcmVtb3ZpbmcgaGltIGZyb20gYWxsIHRoZSB3YXJzIGFuZCBtaXNlcmllcyB3aGljaCBlbmNvbXBhc3NlZCB0aGUgb3RoZXIgbGVhZGVycywgYW5kIGJyaW5naW5nIGhpbSBpbnRvIGEgY2FsbSBoYXZlbiBvZiBsaWZlLCBhbmQgYW4gb2xkIGFnZSBmdWxsIG9mIHBlYWNlIGFuZCBxdWlldC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGV2ZXJ5dGhpbmcgd2VudCB3ZWxsIHdpdGggR2FsYmEgYWZ0ZXIgdGhlIGRlYXRoIG9mIE5lcm8uIFZlcmdpbml1cyBSdWZ1cywgaXQgaXMgdHJ1ZSwgd2hvIHdhcyBzdGlsbCBoZXNpdGF0aW5nLCBnYXZlIGhpbSBhbnhpZXR5LiBGb3IgYmVzaWRlcyBjb21tYW5kaW5nIGEgbGFyZ2UgYW5kIG1vc3QgZWZmaWNpZW50IGFybXksIFZlcmdpbml1cyBoYWQgdGhlIGFkZGVkIHByZXN0aWdlIG9mIGhpcyB2aWN0b3J5IG92ZXIgVmluZGV4IGFuZCBoaXMgc3VianVnYXRpb24gb2YgYWxsIEdhdWwsIHdoaWNoIHdhcyBhIGxhcmdlIHBhcnQgb2YgdGhlIFJvbWFuIEVtcGlyZSBhbmQgaGFkIGJlZW4gaW4gdGhlIHRocm9lcyBvZiByZXZvbHQuIEdhbGJhIHRoZXJlZm9yZSBmZWFyZWQgdGhhdCBWZXJnaW5pdXMgbWlnaHQgbGlzdGVuIHRvIHRob3NlIHdobyBpbnZpdGVkIGhpbSB0byB0YWtlIHRoZSBzdXByZW1lIHBvd2VyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBubyBtYW4ncyBuYW1lIHdhcyBncmVhdGVyIHRoYW4gdGhhdCBvZiBWZXJnaW5pdXMsIGFuZCBubyBtYW4gaGFkIGEgcmVwdXRhdGlvbiBlcXVhbCB0byBoaXMsIHNpbmNlIGhlIGhhZCBleGVyY2lzZWQgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSBpbiByaWRkaW5nIHRoZSBSb21hbiBzdGF0ZSBhbGlrZSBvZiBhIGdyaWV2b3VzIHR5cmFudCBhbmQgb2YgR2FsbGljIHdhcnMuIEJ1dCBpbiB0aGUgcHJlc2VudCBjcmlzaXMgaGUgd2FzIHRydWUgdG8gaGlzIG9yaWdpbmFsIHJlc29sdmVzIGFuZCBtYWludGFpbmVkIHRoZSBzZW5hdGUncyByaWdodCB0byBjaG9vc2UgdGhlIGVtcGVyb3IuIEFuZCB5ZXQgd2hlbiBOZXJvJ3MgZGVhdGggd2FzIGtub3duIGZvciBjZXJ0YWluLCB0aGUgbWFzcyBvZiBoaXMgc29sZGllcnkgd2VyZSBpbnNpc3RlbnQgYWdhaW4gd2l0aCBWZXJnaW5pdXMsIGFuZCBvbmUgb2YgdGhlIG1pbGl0YXJ5IHRyaWJ1bmVzIGluIGhpcyB0ZW50IGRyZXcgaGlzIHN3b3JkIGFuZCBvcmRlcmVkIFZlcmdpbml1cyB0byBjaG9vc2UgYmV0d2VlbiBpbXBlcmlhbCBwb3dlciBhbmQgdGhlIHN0ZWVsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBGYWJpdXMgVmFsZW5zLCBjb21tYW5kZXIgb2YgYSBsZWdpb24sIGhhZCBsZWQgb2ZmIGluIHRha2luZyB0aGUgb2F0aCBvZiBhbGxlZ2lhbmNlIHRvIEdhbGJhLCBhbmQgbGV0dGVycyBoYWQgY29tZSBmcm9tIFJvbWUgdGVsbGluZyBvZiB0aGUgc2VuYXRlJ3MgZGVjcmVlcywgaGUgc3VjY2VlZGVkIGF0IGxhc3QsIHRob3VnaCB3aXRoIHRoZSBncmVhdGVzdCBkaWZmaWN1bHR5LCBpbiBwZXJzdWFkaW5nIGhpcyBzb2xkaWVycyB0byBkZWNsYXJlIEdhbGJhIGVtcGVyb3I7IGFuZCB3aGVuIEdhbGJhIHNlbnQgRmxhY2N1cyBIb3JkZW9uaXVzIHRvIHN1Y2NlZWQgaGltLCBWZXJnaW5pdXMgcmVjZWl2ZWQgdGhhdCBvZmZpY2VyLCBoYW5kZWQgb3ZlciBoaXMgYXJteSB0byBoaW0sIGFuZCB3ZW50IGhpbXNlbGYgdG8gbWVldCBHYWxiYSBhcyBoZSBhZHZhbmNlZCwgYW5kIHR1cm5lZCBiYWNrIGluIGhpcyBjb21wYW55IHdpdGhvdXQgcmVjZWl2aW5nIGFueSBjbGVhciBtYXJrIGVpdGhlciBvZiBoaXMgYW5nZXIgb3IgZXN0ZWVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGR1ZSwgaW4gdGhlIG9uZSBjYXNlLCB0byBHYWxiYSBoaW1zZWxmLCB3aG8gaGFkIGEgd2hvbGVzb21lIHJlc3BlY3QgZm9yIFZlcmdpbml1cywgYW5kIGluIHRoZSBvdGhlciB0byBHYWxiYSdzIGZyaWVuZHMsIGVzcGVjaWFsbHkgVGl0dXMgVmluaXVzLiBWaW5pdXMgd2FzIGplYWxvdXMgb2YgVmVyZ2luaXVzLCBhbmQgdGhvdWdodCB0byBibG9jayBoaXMgY2FyZWVyOyBidXQgd2l0aG91dCBrbm93aW5nIGl0IGhlIHdhcyBhaWRpbmcgdGhlIG1hbidzIGdvb2QgZ2VuaXVzLCB3aGljaCB3YXMgbm93IHJlbW92aW5nIGhpbSBmcm9tIGFsbCB0aGUgd2FycyBhbmQgbWlzZXJpZXMgd2hpY2ggZW5jb21wYXNzZWQgdGhlIG90aGVyIGxlYWRlcnMsIGFuZCBicmluZ2luZyBoaW0gaW50byBhIGNhbG0gaGF2ZW4gb2YgbGlmZSwgYW5kIGFuIG9sZCBhZ2UgZnVsbCBvZiBwZWFjZSBhbmQgcXVpZXQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IE5hcmJvLCBhIGNpdHkgb2YgR2F1bCwgR2FsYmEgd2FzIG1ldCBieSB0aGUgZGVwdXRpZXMgZnJvbSB0aGUgc2VuYXRlLCB3aG8gZ3JlZXRlZCBoaW0gYW5kIGJlZ2dlZCBoaW0gdG8gZ3JhdGlmeSBzcGVlZGlseSB0aGUgZWFnZXIgZGVzaXJlIG9mIHRoZSBwZW9wbGUgdG8gc2VlIGhpbS4gSW4gaGlzIGdlbmVyYWwgaW50ZXJ2aWV3cyBhbmQgbWVldGluZ3Mgd2l0aCB0aGVtIGhlIHdhcyBraW5kIGFuZCB1bmFzc3VtaW5nLCBhbmQgd2hlbiBoZSBlbnRlcnRhaW5lZCB0aGVtLCB0aG91Z2ggdGhlcmUgd2FzIGFuIGFidW5kYW5jZSBvZiByb3lhbCBmdXJuaXR1cmUgYW5kIHNlcnZpY2UgYXQgaGlzIGNvbW1hbmQsIHdoaWNoIE55bXBoaWRpdXMgaGFkIHNlbnQgaGltIGZyb20gTmVybydzIHBhbGFjZSwgaGUgdXNlZCBub25lIG9mIGl0LCBidXQgb25seSB3aGF0IHdhcyBoaXMgb3duLCB0aHVzIHdpbm5pbmcgYSBnb29kIHJlcHV0ZSwgYW5kIHNob3dpbmcgaGltc2VsZiBhIG1hbiBvZiBsYXJnZSBtaW5kIHdobyB3YXMgc3VwZXJpb3IgdG8gdnVsZ2FyaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5WaW5pdXMsIGhvd2V2ZXIsIGJ5IGRlY2xhcmluZyB0byBoaW0gdGhhdCB0aGlzIGRpZ25pZmllZCwgc2ltcGxlLCBhbmQgdW5hc3N1bWluZyBjb3Vyc2Ugd2FzIG1lcmVseSBhIGZsYXR0ZXJ5IG9mIHRoZSBwZW9wbGUgYW5kIGEgcmVmaW5lbWVudCBvZiBkZWxpY2FjeSB3aGljaCB0aG91Z2h0IGl0c2VsZiB1bndvcnRoeSBvZiBncmVhdCB0aGluZ3MsIHNvb24gcGVyc3VhZGVkIGhpbSB0byBtYWtlIHVzZSBvZiBOZXJvJ3MgcmljaGVzLCBhbmQgaW4gaGlzIHJlY2VwdGlvbnMgbm90IHRvIHNocmluayBmcm9tIGEgcmVnYWwgd2VhbHRoIG9mIG91dGxheS4gQW5kIGluIGdlbmVyYWwgdGhlIGFnZWQgbWFuIGxldCBpdCBiZSBzZWVuIGxpdHRsZSBieSBsaXR0bGUgdGhhdCBoZSB3YXMgZ29pbmcgdG8gYmUgdW5kZXIgdGhlIGRpcmVjdGlvbiBvZiBWaW5pdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgTmFyYm8sIGEgY2l0eSBvZiBHYXVsLCBHYWxiYSB3YXMgbWV0IGJ5IHRoZSBkZXB1dGllcyBmcm9tIHRoZSBzZW5hdGUsIHdobyBncmVldGVkIGhpbSBhbmQgYmVnZ2VkIGhpbSB0byBncmF0aWZ5IHNwZWVkaWx5IHRoZSBlYWdlciBkZXNpcmUgb2YgdGhlIHBlb3BsZSB0byBzZWUgaGltLiBJbiBoaXMgZ2VuZXJhbCBpbnRlcnZpZXdzIGFuZCBtZWV0aW5ncyB3aXRoIHRoZW0gaGUgd2FzIGtpbmQgYW5kIHVuYXNzdW1pbmcsIGFuZCB3aGVuIGhlIGVudGVydGFpbmVkIHRoZW0sIHRob3VnaCB0aGVyZSB3YXMgYW4gYWJ1bmRhbmNlIG9mIHJveWFsIGZ1cm5pdHVyZSBhbmQgc2VydmljZSBhdCBoaXMgY29tbWFuZCwgd2hpY2ggTnltcGhpZGl1cyBoYWQgc2VudCBoaW0gZnJvbSBOZXJvJ3MgcGFsYWNlLCBoZSB1c2VkIG5vbmUgb2YgaXQsIGJ1dCBvbmx5IHdoYXQgd2FzIGhpcyBvd24sIHRodXMgd2lubmluZyBhIGdvb2QgcmVwdXRlLCBhbmQgc2hvd2luZyBoaW1zZWxmIGEgbWFuIG9mIGxhcmdlIG1pbmQgd2hvIHdhcyBzdXBlcmlvciB0byB2dWxnYXJpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlZpbml1cywgaG93ZXZlciwgYnkgZGVjbGFyaW5nIHRvIGhpbSB0aGF0IHRoaXMgZGlnbmlmaWVkLCBzaW1wbGUsIGFuZCB1bmFzc3VtaW5nIGNvdXJzZSB3YXMgbWVyZWx5IGEgZmxhdHRlcnkgb2YgdGhlIHBlb3BsZSBhbmQgYSByZWZpbmVtZW50IG9mIGRlbGljYWN5IHdoaWNoIHRob3VnaHQgaXRzZWxmIHVud29ydGh5IG9mIGdyZWF0IHRoaW5ncywgc29vbiBwZXJzdWFkZWQgaGltIHRvIG1ha2UgdXNlIG9mIE5lcm8ncyByaWNoZXMsIGFuZCBpbiBoaXMgcmVjZXB0aW9ucyBub3QgdG8gc2hyaW5rIGZyb20gYSByZWdhbCB3ZWFsdGggb2Ygb3V0bGF5LiBBbmQgaW4gZ2VuZXJhbCB0aGUgYWdlZCBtYW4gbGV0IGl0IGJlIHNlZW4gbGl0dGxlIGJ5IGxpdHRsZSB0aGF0IGhlIHdhcyBnb2luZyB0byBiZSB1bmRlciB0aGUgZGlyZWN0aW9uIG9mIFZpbml1cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IFZpbml1cyB3YXMgdG8gdGhlIGxhc3QgZGVncmVlIGFuZCBiZXlvbmQgYWxsIGNvbXBhcmUgYSBzbGF2ZSBvZiBtb25leSwgYW5kIHdhcyBhbHNvIGFkZGljdGVkIHRvIGxvb3NlIGNvbmR1Y3Qgd2l0aCB3b21lbi4gRm9yIHdoZW4gaGUgd2FzIHN0aWxsIGEgeW91bmcgbWFuIGFuZCB3YXMgc2VydmluZyBoaXMgZmlyc3QgY2FtcGFpZ24sIHVuZGVyIENhbHZpc2l1cyBTYWJpbnVzLCBoZSBicm91Z2h0IGhpcyBjb21tYW5kZXIncyB3aWZlLCBhbiB1bmNoYXN0ZSB3b21hbiwgYnkgbmlnaHQgaW50byB0aGUgY2FtcCBpbiB0aGUgZ2FyYiBvZiBhIHNvbGRpZXIsIGFuZCBoYWQgY29tbWVyY2Ugd2l0aCBoZXIgaW4gdGhlIGdlbmVyYWwncyBxdWFydGVycyAodGhlIFJvbWFucyBjYWxsIHRoZW0gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5wcmluY2lwaWE8L3E+KS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgb2ZmZW5jZSBDYWl1cyBDYWVzYXIgcHV0IGhpbSBpbiBwcmlzb247IGJ1dCBvbiB0aGUgZGVhdGggb2YgdGhlIGVtcGVyb3IgaGUgaGFkIHRoZSBnb29kIGZvcnR1bmUgdG8gYmUgcmVsZWFzZWQuIFdoaWxlIGhlIHdhcyBhdCBzdXBwZXIgd2l0aCBDbGF1ZGl1cyBDYWVzYXIsIGhlIHB1cmxvaW5lZCBhIHNpbHZlciBkcmlua2luZy1jdXAsIGFuZCBDYWVzYXIsIGxlYXJuaW5nIG9mIGl0LCBpbnZpdGVkIGhpbSB0byBzdXBwZXIgYWdhaW4gdGhlIG5leHQgZGF5LCBhbmQgd2hlbiBoZSBjYW1lLCBvcmRlcmVkIHRoZSBhdHRlbmRhbnRzIHRvIHNldCBiZWZvcmUgaGltIG5vIHNpbHZlciBwbGF0ZSBhdCBhbGwsIGJ1dCBvbmx5IGVhcnRoZW53YXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1pc2RlZWQsIGl0IGlzIHRydWUsIG93aW5nIHRvIHRoZSBjb21pYyB0dXJuIHdoaWNoIENhZXNhcidzIG1vZGVyYXRpb24gdG9vaywgd2FzIHRob3VnaHQgd29ydGh5IG9mIGxhdWdodGVyLCBub3Qgb2YgYW5nZXI7IGJ1dCB3aGF0IGhlIGRpZCB3aGVuIGhlIGhhZCBHYWxiYSB1bmRlciBoaXMgY29udHJvbCBhbmQgd2FzIG1vc3QgaW5mbHVlbnRpYWwgd2l0aCBoaW0gaW4gZmluYW5jaWFsIG1hdHRlcnMsIHdhcyBwYXJ0bHkgYSBjYXVzZSBhbmQgcGFydGx5IGEgcHJldGV4dCBmb3IgdHJhZ2ljIGV2ZW50cyBhbmQgZ3JlYXQgY2FsYW1pdGllcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IFZpbml1cyB3YXMgdG8gdGhlIGxhc3QgZGVncmVlIGFuZCBiZXlvbmQgYWxsIGNvbXBhcmUgYSBzbGF2ZSBvZiBtb25leSwgYW5kIHdhcyBhbHNvIGFkZGljdGVkIHRvIGxvb3NlIGNvbmR1Y3Qgd2l0aCB3b21lbi4gRm9yIHdoZW4gaGUgd2FzIHN0aWxsIGEgeW91bmcgbWFuIGFuZCB3YXMgc2VydmluZyBoaXMgZmlyc3QgY2FtcGFpZ24sIHVuZGVyIENhbHZpc2l1cyBTYWJpbnVzLCBoZSBicm91Z2h0IGhpcyBjb21tYW5kZXIncyB3aWZlLCBhbiB1bmNoYXN0ZSB3b21hbiwgYnkgbmlnaHQgaW50byB0aGUgY2FtcCBpbiB0aGUgZ2FyYiBvZiBhIHNvbGRpZXIsIGFuZCBoYWQgY29tbWVyY2Ugd2l0aCBoZXIgaW4gdGhlIGdlbmVyYWwncyBxdWFydGVycyAodGhlIFJvbWFucyBjYWxsIHRoZW0gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnByaW5jaXBpYTwvcT4pLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIG9mZmVuY2UgQ2FpdXMgQ2Flc2FyIHB1dCBoaW0gaW4gcHJpc29uOyBidXQgb24gdGhlIGRlYXRoIG9mIHRoZSBlbXBlcm9yIGhlIGhhZCB0aGUgZ29vZCBmb3J0dW5lIHRvIGJlIHJlbGVhc2VkLiBXaGlsZSBoZSB3YXMgYXQgc3VwcGVyIHdpdGggQ2xhdWRpdXMgQ2Flc2FyLCBoZSBwdXJsb2luZWQgYSBzaWx2ZXIgZHJpbmtpbmctY3VwLCBhbmQgQ2Flc2FyLCBsZWFybmluZyBvZiBpdCwgaW52aXRlZCBoaW0gdG8gc3VwcGVyIGFnYWluIHRoZSBuZXh0IGRheSwgYW5kIHdoZW4gaGUgY2FtZSwgb3JkZXJlZCB0aGUgYXR0ZW5kYW50cyB0byBzZXQgYmVmb3JlIGhpbSBubyBzaWx2ZXIgcGxhdGUgYXQgYWxsLCBidXQgb25seSBlYXJ0aGVud2FyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWlzZGVlZCwgaXQgaXMgdHJ1ZSwgb3dpbmcgdG8gdGhlIGNvbWljIHR1cm4gd2hpY2ggQ2Flc2FyJ3MgbW9kZXJhdGlvbiB0b29rLCB3YXMgdGhvdWdodCB3b3J0aHkgb2YgbGF1Z2h0ZXIsIG5vdCBvZiBhbmdlcjsgYnV0IHdoYXQgaGUgZGlkIHdoZW4gaGUgaGFkIEdhbGJhIHVuZGVyIGhpcyBjb250cm9sIGFuZCB3YXMgbW9zdCBpbmZsdWVudGlhbCB3aXRoIGhpbSBpbiBmaW5hbmNpYWwgbWF0dGVycywgd2FzIHBhcnRseSBhIGNhdXNlIGFuZCBwYXJ0bHkgYSBwcmV0ZXh0IGZvciB0cmFnaWMgZXZlbnRzIGFuZCBncmVhdCBjYWxhbWl0aWVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgTnltcGhpZGl1cywgYXMgc29vbiBhcyBHZWxsaWFudXMgaGFkIGNvbWUgYmFjayB0byBoaW0sIHdob20gaGUgaGFkIHNlbnQgdG8gYmUgYSBzb3J0IG9mIHNweSB1cG9uIEdhbGJhLCBoZWFyZCB0aGF0IENvcm5lbGl1cyBMYWNvIGhhZCBiZWVuIGFwcG9pbnRlZCBwcmVmZWN0IG9mIHRoZSBwcmFldG9yaWFuIGd1YXJkLCBhbmQgdGhhdCBWaW5pdXMgd2FzIGFsbCBwb3dlcmZ1bCB3aXRoIEdhbGJhLCB3aGlsZSBHZWxsaWFudXMgaGFkIG5ldmVyIHN0b29kIG5lYXIgaGltIG9yIHNlZW4gaGltIGluIHByaXZhdGUsIGJ1dCBoYWQgYmVlbiBsb29rZWQgdXBvbiB3aXRoIHN1c3BpY2lvbiBhbmQgZGlzdHJ1c3QgYnkgZXZlcnlvbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk55bXBoaWRpdXMgd2FzIHRoZXJlZm9yZSBtdWNoIGRpc3R1cmJlZCwgYW5kIGNhbGxpbmcgdG9nZXRoZXIgdGhlIG9mZmljZXJzIG9mIHRoZSBhcm15LCB0b2xkIHRoZW0gdGhhdCBHYWxiYSBoaW1zZWxmIHdhcyBhIHdlbGwtbWVhbmluZyBhbmQgbW9kZXJhdGUgb2xkIG1hbiwgYnV0IGRpZCBub3QgZm9sbG93IGhpcyBvd24gY291bnNlbHMgaW4gdGhlIGxlYXN0LCBhbmQgd2FzIGJhZGx5IGRpcmVjdGVkIGJ5IFZpbml1cyBhbmQgTGFjby4gVGhlcmVmb3JlLCBiZWZvcmUgdGhlc2UgbWVuIGhhZCBzdWNjZWVkZWQgaW4gc2VjcmV0bHkgYWNxdWlyaW5nIHRoZSBwb3dlciB3aGljaCBUaWdlbGxpbnVzIGhhZCBoZWxkLCBhIGRlcHV0YXRpb24gc2hvdWxkIGJlIHNlbnQgdG8gdGhlIGVtcGVyb3IgZnJvbSB0aGUgY2FtcCwgdG8gaW5mb3JtIGhpbSB0aGF0IGlmIGhlIHdvdWxkIHB1dCBhd2F5IGZyb20gaGlzIGNvbXBhbnkgb2YgZnJpZW5kcyBvbmx5IHRoZXNlIHR3byBtZW4sIGhlIHdvdWxkIGJlIG1vcmUgYWNjZXB0YWJsZSBhbmQgd2VsY29tZSB0byBhbGwgb24gaGlzIGFycml2YWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIHNwZWVjaCBvZiBOeW1waGlkaXVzIGRpZCBub3QgY29udmluY2UgaGlzIGhlYXJlcnM7IG5heSwgdGhleSB0aG91Z2h0IGl0IGEgc3RyYW5nZSBhbmQgdW5uYXR1cmFsIHRoaW5nIHRvIGRpY3RhdGUgdG8gYW4gYWdlZCBlbXBlcm9yLCBhcyBpZiBoZSBoYWQgYmVlbiBhIHlvdXRoIGp1c3QgdGFzdGluZyBwb3dlciwgd2hhdCBmcmllbmRzIGhlIHdhcyB0byBoYXZlIG9yIG5vdCB0byBoYXZlLiBOeW1waGlkaXVzIHRoZXJlZm9yZSB0b29rIGFub3RoZXIgY291cnNlLCBhbmQgd3JvdGUgdG8gR2FsYmEgbWVzc2FnZXMgaW50ZW5kZWQgdG8gYWxhcm0gaGltLW5vdywgdGhhdCB0aGVyZSB3YXMgbXVjaCBoaWRkZW4gZGlzdGVtcGVyIGFuZCB1bnJlc3QgaW4gdGhlIGNpdHksIG5vdywgdGhhdCBDbG9kaXVzIE1hY2VyIHdhcyBob2xkaW5nIGJhY2sgdGhlIGdyYWluIHN1cHBsaWVzIGluIEFmcmljYTsgYWdhaW4sIHRoYXQgdGhlIGxlZ2lvbnMgaW4gR2VybWFueSB3ZXJlIG11dGlub3VzLCBhbmQgdGhhdCBsaWtlIG5ld3MgY2FtZSBjb25jZXJuaW5nIHRoZSBmb3JjZXMgaW4gU3lyaWEgYW5kIEp1ZGFjYS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNpbmNlIEdhbGJhIGdhdmUgbm8gaGVlZCB0byBoaW0gd2hhdGV2ZXIgYW5kIHB1dCBubyBjb25maWRlbmNlIGluIGhpcyByZXBvcnRzLCBoZSBkZXRlcm1pbmVkIG5vdCB0byB3YWl0IGJlZm9yZSBtYWtpbmcgaGlzIGF0dGVtcHQuIEFuZCB5ZXQgQ2xvZGl1cyBDZWxzdXMgb2YgQW50aW9jaCwgYSBtYW4gb2YgZ29vZCBzZW5zZSwgd2hvIHdhcyB3ZWxsLWRpc3Bvc2VkIGFuZCBmYWl0aGZ1bCB0byBoaW0sIHRyaWVkIHRvIGRpc3N1YWRlIGhpbSwgc2F5aW5nIHRoYXQgaW4gaGlzIG9waW5pb24gbm90IGEgc2luZ2xlIHByZWNpbmN0IGluIFJvbWUgd291bGQgZ2l2ZSBOeW1waGlkaXVzIHRoZSB0aXRsZSBvZiBDYWVzYXIuIEJ1dCBtYW55IHJpZGljdWxlZCBHYWxiYSwgYW5kIGVzcGVjaWFsbHkgTWl0aHJpZGF0ZXMgb2YgUG9udHVzLCB3aG8gc2NvZmZlZCBhYm91dCBoaXMgYmFsZCBoZWFkIGFuZCB3cmlua2xlZCBmYWNlLCBhbmQgc2FpZCB0aGF0IG5vdyB0aGUgUm9tYW5zIHRob3VnaHQgaGltIGEgZ3JlYXQgcGVyc29uYWdlLCBidXQgd2hlbiB0aGV5IHNhdyBoaW0gdGhleSB3b3VsZCByZWdhcmQgYWxsIHRoZSBkYXlzIGluIHdoaWNoIGhlIGhhZCBib3JuZSB0aGUgdGl0bGUgb2YgQ2Flc2FyIGFzIGEgZGlzZ3JhY2UgdG8gdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIE55bXBoaWRpdXMsIGFzIHNvb24gYXMgR2VsbGlhbnVzIGhhZCBjb21lIGJhY2sgdG8gaGltLCB3aG9tIGhlIGhhZCBzZW50IHRvIGJlIGEgc29ydCBvZiBzcHkgdXBvbiBHYWxiYSwgaGVhcmQgdGhhdCBDb3JuZWxpdXMgTGFjbyBoYWQgYmVlbiBhcHBvaW50ZWQgcHJlZmVjdCBvZiB0aGUgcHJhZXRvcmlhbiBndWFyZCwgYW5kIHRoYXQgVmluaXVzIHdhcyBhbGwgcG93ZXJmdWwgd2l0aCBHYWxiYSwgd2hpbGUgR2VsbGlhbnVzIGhhZCBuZXZlciBzdG9vZCBuZWFyIGhpbSBvciBzZWVuIGhpbSBpbiBwcml2YXRlLCBidXQgaGFkIGJlZW4gbG9va2VkIHVwb24gd2l0aCBzdXNwaWNpb24gYW5kIGRpc3RydXN0IGJ5IGV2ZXJ5b25lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk55bXBoaWRpdXMgd2FzIHRoZXJlZm9yZSBtdWNoIGRpc3R1cmJlZCwgYW5kIGNhbGxpbmcgdG9nZXRoZXIgdGhlIG9mZmljZXJzIG9mIHRoZSBhcm15LCB0b2xkIHRoZW0gdGhhdCBHYWxiYSBoaW1zZWxmIHdhcyBhIHdlbGwtbWVhbmluZyBhbmQgbW9kZXJhdGUgb2xkIG1hbiwgYnV0IGRpZCBub3QgZm9sbG93IGhpcyBvd24gY291bnNlbHMgaW4gdGhlIGxlYXN0LCBhbmQgd2FzIGJhZGx5IGRpcmVjdGVkIGJ5IFZpbml1cyBhbmQgTGFjby4gVGhlcmVmb3JlLCBiZWZvcmUgdGhlc2UgbWVuIGhhZCBzdWNjZWVkZWQgaW4gc2VjcmV0bHkgYWNxdWlyaW5nIHRoZSBwb3dlciB3aGljaCBUaWdlbGxpbnVzIGhhZCBoZWxkLCBhIGRlcHV0YXRpb24gc2hvdWxkIGJlIHNlbnQgdG8gdGhlIGVtcGVyb3IgZnJvbSB0aGUgY2FtcCwgdG8gaW5mb3JtIGhpbSB0aGF0IGlmIGhlIHdvdWxkIHB1dCBhd2F5IGZyb20gaGlzIGNvbXBhbnkgb2YgZnJpZW5kcyBvbmx5IHRoZXNlIHR3byBtZW4sIGhlIHdvdWxkIGJlIG1vcmUgYWNjZXB0YWJsZSBhbmQgd2VsY29tZSB0byBhbGwgb24gaGlzIGFycml2YWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIHNwZWVjaCBvZiBOeW1waGlkaXVzIGRpZCBub3QgY29udmluY2UgaGlzIGhlYXJlcnM7IG5heSwgdGhleSB0aG91Z2h0IGl0IGEgc3RyYW5nZSBhbmQgdW5uYXR1cmFsIHRoaW5nIHRvIGRpY3RhdGUgdG8gYW4gYWdlZCBlbXBlcm9yLCBhcyBpZiBoZSBoYWQgYmVlbiBhIHlvdXRoIGp1c3QgdGFzdGluZyBwb3dlciwgd2hhdCBmcmllbmRzIGhlIHdhcyB0byBoYXZlIG9yIG5vdCB0byBoYXZlLiBOeW1waGlkaXVzIHRoZXJlZm9yZSB0b29rIGFub3RoZXIgY291cnNlLCBhbmQgd3JvdGUgdG8gR2FsYmEgbWVzc2FnZXMgaW50ZW5kZWQgdG8gYWxhcm0gaGltLW5vdywgdGhhdCB0aGVyZSB3YXMgbXVjaCBoaWRkZW4gZGlzdGVtcGVyIGFuZCB1bnJlc3QgaW4gdGhlIGNpdHksIG5vdywgdGhhdCBDbG9kaXVzIE1hY2VyIHdhcyBob2xkaW5nIGJhY2sgdGhlIGdyYWluIHN1cHBsaWVzIGluIEFmcmljYTsgYWdhaW4sIHRoYXQgdGhlIGxlZ2lvbnMgaW4gR2VybWFueSB3ZXJlIG11dGlub3VzLCBhbmQgdGhhdCBsaWtlIG5ld3MgY2FtZSBjb25jZXJuaW5nIHRoZSBmb3JjZXMgaW4gU3lyaWEgYW5kIEp1ZGFjYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBHYWxiYSBnYXZlIG5vIGhlZWQgdG8gaGltIHdoYXRldmVyIGFuZCBwdXQgbm8gY29uZmlkZW5jZSBpbiBoaXMgcmVwb3J0cywgaGUgZGV0ZXJtaW5lZCBub3QgdG8gd2FpdCBiZWZvcmUgbWFraW5nIGhpcyBhdHRlbXB0LiBBbmQgeWV0IENsb2RpdXMgQ2Vsc3VzIG9mIEFudGlvY2gsIGEgbWFuIG9mIGdvb2Qgc2Vuc2UsIHdobyB3YXMgd2VsbC1kaXNwb3NlZCBhbmQgZmFpdGhmdWwgdG8gaGltLCB0cmllZCB0byBkaXNzdWFkZSBoaW0sIHNheWluZyB0aGF0IGluIGhpcyBvcGluaW9uIG5vdCBhIHNpbmdsZSBwcmVjaW5jdCBpbiBSb21lIHdvdWxkIGdpdmUgTnltcGhpZGl1cyB0aGUgdGl0bGUgb2YgQ2Flc2FyLiBCdXQgbWFueSByaWRpY3VsZWQgR2FsYmEsIGFuZCBlc3BlY2lhbGx5IE1pdGhyaWRhdGVzIG9mIFBvbnR1cywgd2hvIHNjb2ZmZWQgYWJvdXQgaGlzIGJhbGQgaGVhZCBhbmQgd3JpbmtsZWQgZmFjZSwgYW5kIHNhaWQgdGhhdCBub3cgdGhlIFJvbWFucyB0aG91Z2h0IGhpbSBhIGdyZWF0IHBlcnNvbmFnZSwgYnV0IHdoZW4gdGhleSBzYXcgaGltIHRoZXkgd291bGQgcmVnYXJkIGFsbCB0aGUgZGF5cyBpbiB3aGljaCBoZSBoYWQgYm9ybmUgdGhlIHRpdGxlIG9mIENhZXNhciBhcyBhIGRpc2dyYWNlIHRvIHRoZW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBkZWNpZGVkLCB0aGVyZWZvcmUsIHRvIGJyaW5nIE55bXBoaWRpdXMgaW50byB0aGUgY2FtcCBhYm91dCBtaWRuaWdodCBhbmQgcHJvY2xhaW0gaGltIGVtcGVyb3IuIEJ1dCB3aGVuIGl0IHdhcyBldmVuaW5nLCB0aGUgbGVhZGluZyBtaWxpdGFyeSB0cmlidW5lLCBBbnRvbml1cyBIb25vcmF0dXMsIGNhbGxpbmcgdG9nZXRoZXIgdGhlIHNvbGRpZXJzIHVuZGVyIGhpcyBjb21tYW5kLCByZXZpbGVkIGhpbXNlbGYgYW5kIHJldmlsZWQgdGhlbSBmb3IgY2hhbmdpbmcgYWJvdXQgc28gb2Z0ZW4gaW4gc28gc2hvcnQgYSB0aW1lLCBub3QgYWNjb3JkaW5nIHRvIGFueSBwbGFuIG9yIGNob2ljZSBvZiBiZXR0ZXIgdGhpbmdzLCBidXQgYmVjYXVzZSBzb21lIGV2aWwgc3Bpcml0IGRyb3ZlIHRoZW0gZnJvbSBvbmUgdHJlYWNoZXJ5IHRvIGFub3RoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBmaXJzdCBpbnN0YW5jZSwgaGUgc2FpZCwgdGhleSBoYWQgYW4gZXhjdXNlIGluIHRoZSBjcmltZXMgb2YgTmVybzsgYnV0IG5vdywgaWYgdGhleSB3ZXJlIHRvIGJldHJheSBHYWxiYSwgd2hhdCBjaGFyZ2Ugb2YgbXVyZGVyaW5nIGhpcyBtb3RoZXIgb3Igc2xheWluZyBoaXMgd2lmZSBjb3VsZCB0aGV5IGJyaW5nIGFnYWluc3QgaGltLCBvciB3aGF0IGZlZWxpbmdzIG9mIHNoYW1lIHRoYXQgdGhlaXIgZW1wZXJvciBzaG91bGQgYXBwZWFyIGluIHB1YmxpYyBhcyBtdXNpY2lhbiBvciB0cmFnaWMgYWN0b3I/IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TmF5LCBub3QgZXZlbiB3aXRoIHRoZXNlIHByb3ZvY2F0aW9ucyB3b3VsZCB3ZSBjb25zZW50IHRvIGFiYW5kb24gYSBOZXJvLCBidXQgd2UgaGFkIHRvIGJlIHBlcnN1YWRlZCBieSBOeW1waGlkaXVzIHRoYXQgTmVybyBoYWQgZmlyc3QgYWJhbmRvbmVkIHVzIGFuZCBmbGVkIHRvIEVneXB0LiAKCQkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U2hhbGwgd2UsIHRoZW4sIHNhY3JpZmljZSBHYWxiYSBhZnRlciBOZXJvLCBhbmQgY2hvb3NpbmcgdGhlIHNvbiBvZiBOeW1waGlkaWEgYXMgb3VyIENhZXNhciwgc2hhbGwgd2Ugc2xheSB0aGUgc2Npb24gb2YgdGhlIGhvdXNlIG9mIExpdmlhLCBhcyB3ZSBoYXZlIHNsYWluIHRoZSBzb24gb2YgQWdyaXBwaW5hPyBPciwgc2hhbGwgd2UgaW5mbGljdCBwdW5pc2htZW50IG9uIE55bXBoaWRpdXMgZm9yIGhpcyBldmlsIGRlZWRzLCBhbmQgdGhlcmVieSBzaG93IG91cnNlbHZlcyBhdmVuZ2VycyBvZiBOZXJvLCBidXQgdHJ1ZSBhbmQgZmFpdGhmdWwgZ3VhcmRpYW5zIG9mIEdhbGJhPzwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGRlY2lkZWQsIHRoZXJlZm9yZSwgdG8gYnJpbmcgTnltcGhpZGl1cyBpbnRvIHRoZSBjYW1wIGFib3V0IG1pZG5pZ2h0IGFuZCBwcm9jbGFpbSBoaW0gZW1wZXJvci4gQnV0IHdoZW4gaXQgd2FzIGV2ZW5pbmcsIHRoZSBsZWFkaW5nIG1pbGl0YXJ5IHRyaWJ1bmUsIEFudG9uaXVzIEhvbm9yYXR1cywgY2FsbGluZyB0b2dldGhlciB0aGUgc29sZGllcnMgdW5kZXIgaGlzIGNvbW1hbmQsIHJldmlsZWQgaGltc2VsZiBhbmQgcmV2aWxlZCB0aGVtIGZvciBjaGFuZ2luZyBhYm91dCBzbyBvZnRlbiBpbiBzbyBzaG9ydCBhIHRpbWUsIG5vdCBhY2NvcmRpbmcgdG8gYW55IHBsYW4gb3IgY2hvaWNlIG9mIGJldHRlciB0aGluZ3MsIGJ1dCBiZWNhdXNlIHNvbWUgZXZpbCBzcGlyaXQgZHJvdmUgdGhlbSBmcm9tIG9uZSB0cmVhY2hlcnkgdG8gYW5vdGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBmaXJzdCBpbnN0YW5jZSwgaGUgc2FpZCwgdGhleSBoYWQgYW4gZXhjdXNlIGluIHRoZSBjcmltZXMgb2YgTmVybzsgYnV0IG5vdywgaWYgdGhleSB3ZXJlIHRvIGJldHJheSBHYWxiYSwgd2hhdCBjaGFyZ2Ugb2YgbXVyZGVyaW5nIGhpcyBtb3RoZXIgb3Igc2xheWluZyBoaXMgd2lmZSBjb3VsZCB0aGV5IGJyaW5nIGFnYWluc3QgaGltLCBvciB3aGF0IGZlZWxpbmdzIG9mIHNoYW1lIHRoYXQgdGhlaXIgZW1wZXJvciBzaG91bGQgYXBwZWFyIGluIHB1YmxpYyBhcyBtdXNpY2lhbiBvciB0cmFnaWMgYWN0b3I/IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksIG5vdCBldmVuIHdpdGggdGhlc2UgcHJvdm9jYXRpb25zIHdvdWxkIHdlIGNvbnNlbnQgdG8gYWJhbmRvbiBhIE5lcm8sIGJ1dCB3ZSBoYWQgdG8gYmUgcGVyc3VhZGVkIGJ5IE55bXBoaWRpdXMgdGhhdCBOZXJvIGhhZCBmaXJzdCBhYmFuZG9uZWQgdXMgYW5kIGZsZWQgdG8gRWd5cHQuIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNoYWxsIHdlLCB0aGVuLCBzYWNyaWZpY2UgR2FsYmEgYWZ0ZXIgTmVybywgYW5kIGNob29zaW5nIHRoZSBzb24gb2YgTnltcGhpZGlhIGFzIG91ciBDYWVzYXIsIHNoYWxsIHdlIHNsYXkgdGhlIHNjaW9uIG9mIHRoZSBob3VzZSBvZiBMaXZpYSwgYXMgd2UgaGF2ZSBzbGFpbiB0aGUgc29uIG9mIEFncmlwcGluYT8gT3IsIHNoYWxsIHdlIGluZmxpY3QgcHVuaXNobWVudCBvbiBOeW1waGlkaXVzIGZvciBoaXMgZXZpbCBkZWVkcywgYW5kIHRoZXJlYnkgc2hvdyBvdXJzZWx2ZXMgYXZlbmdlcnMgb2YgTmVybywgYnV0IHRydWUgYW5kIGZhaXRoZnVsIGd1YXJkaWFucyBvZiBHYWxiYT88L3E+CgkJCSAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNoYWxsIHdlLCB0aGVuLCBzYWNyaWZpY2UgR2FsYmEgYWZ0ZXIgTmVybywgYW5kIGNob29zaW5nIHRoZSBzb24gb2YgTnltcGhpZGlhIGFzIG91ciBDYWVzYXIsIHNoYWxsIHdlIHNsYXkgdGhlIHNjaW9uIG9mIHRoZSBob3VzZSBvZiBMaXZpYSwgYXMgd2UgaGF2ZSBzbGFpbiB0aGUgc29uIG9mIEFncmlwcGluYT8gT3IsIHNoYWxsIHdlIGluZmxpY3QgcHVuaXNobWVudCBvbiBOeW1waGlkaXVzIGZvciBoaXMgZXZpbCBkZWVkcywgYW5kIHRoZXJlYnkgc2hvdyBvdXJzZWx2ZXMgYXZlbmdlcnMgb2YgTmVybywgYnV0IHRydWUgYW5kIGZhaXRoZnVsIGd1YXJkaWFucyBvZiBHYWxiYT88cCBjbGFzcz0idHJhbnNsYXRpb24iPlNvIHNwb2tlIHRoZSB0cmlidW5lLCBhbmQgYWxsIGhpcyBzb2xkaWVycyB0b29rIGhpcyBzaWRlLCBhbmQgdmlzaXRpbmcgdGhlaXIgZmVsbG93LXNvbGRpZXJzLCBleGhvcnRlZCB0aGVtIHRvIG1haW50YWluIHRoZWlyIGZpZGVsaXR5IHRvIHRoZSBlbXBlcm9yOyBhbmQgdGhleSBicm91Z2h0IG92ZXIgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3cgbG91ZCBzaG91dHMgYXJvc2UsIGFuZCBOeW1waGlkaXVzLCBlaXRoZXIgYmVjYXVzZSBoZSB3YXMgY29udmluY2VkLCBhcyBzb21lIHNheSwgdGhhdCB0aGUgc29sZGllcnMgd2VyZSBhbHJlYWR5IGNhbGxpbmcgaGltLCBvciBiZWNhdXNlIGhlIHdhcyBhbnhpb3VzIHRvIHdpbiBvdmVyIGJldGltZXMgdGhlIGVsZW1lbnQgdGhhdCB3YXMgc3RpbGwgdW5ydWx5IGFuZCBtdXRpbm91cywgY2FtZSB1cCBpbiBhIGdsYXJlIG9mIGxpZ2h0cywgY2FycnlpbmcgaW4gaGlzIGhhbmQgYSBzcGVlY2ggd3JpdHRlbiBvdXQgZm9yIGhpbSBieSBDaW5nb25pdXMgVmFycm87IHRoaXMgaGUgaGFkIGdvdCBieSBoZWFydCB0byBkZWxpdmVyIHRvIHRoZSBzb2xkaWVycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gaGUgc2F3IHRoZSBnYXRlIG9mIHRoZSBjYW1wIGNsb3NlZCBhbmQgYSBncmVhdCBudW1iZXIgb2YgbWVuIHVuZGVyIGFybXMgYWxvbmcgdGhlIHdhbGxzLCBoZSB3YXMgc3RydWNrIHdpdGggZmVhcjsgYW5kIGRyYXdpbmcgbmVhciwgaGUgYXNrZWQgd2hhdCB0aGV5IG1lYW50LCBhbmQgYnkgd2hvc2UgY29tbWFuZCB0aGV5IHdlcmUgdW5kZXIgYXJtcy4gT25lIGNyeSBjYW1lIHRvIGhpbSBmcm9tIHRoZSBsaXBzIG9mIGFsbCwgYW5kIHRoaXMgd2FzIHRoYXQgdGhleSBhY2tub3dsZWRnZWQgR2FsYmEgYXMgZW1wZXJvciwgd2hlcmV1cG9uIGhlIGFsc28sIGFzIGhlIGpvaW5lZCB0aGVtLCBzaG91dGVkIGluIGFwcHJvdmFsLCBhbmQgYmFkZSBoaXMgZm9sbG93ZXJzIGRvIHRoZSBzYW1lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWZ0ZXIgdGhlIHNvbGRpZXJzIGF0IHRoZSBnYXRlIGhhZCBwZXJtaXR0ZWQgaGltIHRvIGVudGVyIHdpdGggYSBmZXcgZm9sbG93ZXJzLCBhIGxhbmNlIHdhcyBodXJsZWQgYXQgaGltLiBUaGlzIHdlYXBvbiB3YXMgcmVjZWl2ZWQgaW4gdGhlIHNoaWVsZCB3aGljaCBTZXB0aW1pdXMgaW50ZXJwb3NlZCwgYnV0IG90aGVycyBhc3NhaWxlZCBoaW0sIHdpdGggZHJhd24gc3dvcmRzLCB3aGVyZXVwb24gaGUgZmxlZCwgd2FzIHB1cnN1ZWQsIGFuZCB3YXMgY3V0IGRvd24gaW4gYSBzb2xkaWVyJ3MgaHV0LiBIaXMgZGVhZCBib2R5IHdhcyBkcmFnZ2VkIGZvcnRoLCBzdXJyb3VuZGVkIHdpdGggYSBwYWxpbmcsIGFuZCBleHBvc2VkIHRvIHB1YmxpYyB2aWV3IGFsbCBkYXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3cgbG91ZCBzaG91dHMgYXJvc2UsIGFuZCBOeW1waGlkaXVzLCBlaXRoZXIgYmVjYXVzZSBoZSB3YXMgY29udmluY2VkLCBhcyBzb21lIHNheSwgdGhhdCB0aGUgc29sZGllcnMgd2VyZSBhbHJlYWR5IGNhbGxpbmcgaGltLCBvciBiZWNhdXNlIGhlIHdhcyBhbnhpb3VzIHRvIHdpbiBvdmVyIGJldGltZXMgdGhlIGVsZW1lbnQgdGhhdCB3YXMgc3RpbGwgdW5ydWx5IGFuZCBtdXRpbm91cywgY2FtZSB1cCBpbiBhIGdsYXJlIG9mIGxpZ2h0cywgY2FycnlpbmcgaW4gaGlzIGhhbmQgYSBzcGVlY2ggd3JpdHRlbiBvdXQgZm9yIGhpbSBieSBDaW5nb25pdXMgVmFycm87IHRoaXMgaGUgaGFkIGdvdCBieSBoZWFydCB0byBkZWxpdmVyIHRvIHRoZSBzb2xkaWVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHNhdyB0aGUgZ2F0ZSBvZiB0aGUgY2FtcCBjbG9zZWQgYW5kIGEgZ3JlYXQgbnVtYmVyIG9mIG1lbiB1bmRlciBhcm1zIGFsb25nIHRoZSB3YWxscywgaGUgd2FzIHN0cnVjayB3aXRoIGZlYXI7IGFuZCBkcmF3aW5nIG5lYXIsIGhlIGFza2VkIHdoYXQgdGhleSBtZWFudCwgYW5kIGJ5IHdob3NlIGNvbW1hbmQgdGhleSB3ZXJlIHVuZGVyIGFybXMuIE9uZSBjcnkgY2FtZSB0byBoaW0gZnJvbSB0aGUgbGlwcyBvZiBhbGwsIGFuZCB0aGlzIHdhcyB0aGF0IHRoZXkgYWNrbm93bGVkZ2VkIEdhbGJhIGFzIGVtcGVyb3IsIHdoZXJldXBvbiBoZSBhbHNvLCBhcyBoZSBqb2luZWQgdGhlbSwgc2hvdXRlZCBpbiBhcHByb3ZhbCwgYW5kIGJhZGUgaGlzIGZvbGxvd2VycyBkbyB0aGUgc2FtZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciB0aGUgc29sZGllcnMgYXQgdGhlIGdhdGUgaGFkIHBlcm1pdHRlZCBoaW0gdG8gZW50ZXIgd2l0aCBhIGZldyBmb2xsb3dlcnMsIGEgbGFuY2Ugd2FzIGh1cmxlZCBhdCBoaW0uIFRoaXMgd2VhcG9uIHdhcyByZWNlaXZlZCBpbiB0aGUgc2hpZWxkIHdoaWNoIFNlcHRpbWl1cyBpbnRlcnBvc2VkLCBidXQgb3RoZXJzIGFzc2FpbGVkIGhpbSwgd2l0aCBkcmF3biBzd29yZHMsIHdoZXJldXBvbiBoZSBmbGVkLCB3YXMgcHVyc3VlZCwgYW5kIHdhcyBjdXQgZG93biBpbiBhIHNvbGRpZXIncyBodXQuIEhpcyBkZWFkIGJvZHkgd2FzIGRyYWdnZWQgZm9ydGgsIHN1cnJvdW5kZWQgd2l0aCBhIHBhbGluZywgYW5kIGV4cG9zZWQgdG8gcHVibGljIHZpZXcgYWxsIGRheS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3YXMgdGhlIHZpb2xlbnQgZW5kIG9mIE55bXBoaWRpdXMsIGFuZCB3aGVuIEdhbGJhIGxlYXJuZWQgb2YgaXQsIGhlIG9yZGVyZWQgc3VjaCBvZiBoaXMgZmVsbG93LWNvbnNwaXJhdG9ycyBhcyBoYWQgbm90IGF0IG9uY2UgdGFrZW4gdGhlaXIgb3duIGxpdmVzIHRvIGJlIHB1dCB0byBkZWF0aC4gQW1vbmcgdGhlc2Ugd2FzIENpbmdvbml1cywgd2hvIHdyb3RlIHRoZSBzcGVlY2ggZm9yIE55bXBoaWRpdXMsIGFuZCBNaXRocmlkYXRlcyBvZiBQb250dXMuIEJ1dCBpdCB3YXMgaGVsZCB0byBiZSBpbGxlZ2FsIGFuZCBkZXNwb3RpYywgZXZlbiB0aG91Z2gganVzdCwgdG8gcHV0IHRvIGRlYXRoIHdpdGhvdXQgYSB0cmlhbCBtZW4gd2hvIHdlcmUgbm90IHdpdGhvdXQgZGlzdGluY3Rpb24uIEZvciBldmVyeW9uZSBleHBlY3RlZCBhIGRpZmZlcmVudCBtb2RlIG9mIGdvdmVybm1lbnQsIGJlaW5nIHRob3JvdWdobHkgZGVjZWl2ZWQsIGFzIGlzIHVzdWFsLCBieSBhc3N1cmFuY2VzIG1hZGUgaW4gdGhlIGJlZ2lubmluZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHBlb3BsZSB0b29rIGl0IHN0aWxsIG1vcmUgYW1pc3Mgd2hlbiBQZXRyb25pdXMgVHVycGlsaWFudXMsIGEgbWFuIG9mIGNvbnN1bGFyIGRpZ25pdHkgd2hvIHdhcyBmYWl0aGZ1bCB0byBOZXJvLCB3YXMgb3JkZXJlZCB0byB0YWtlIGhpcyBvd24gbGlmZS4gRm9yIGluIGhhdmluZyBNYWNlciB0YWtlbiBvZmYgaW4gQWZyaWNhIGF0IHRoZSBoYW5kcyBvZiBUcmVib25pdXMsIGFuZCwgRm9udGVpdXMgaW4gR2VybWFueSBhdCB0aGUgaGFuZHMgb2YgVmFsZW5zLCBHYWxiYSBjb3VsZCBleGN1c2UgaGltc2VsZiB3aXRoIHRoZSBmZWFyIHRoZXkgaW5zcGlyZWQgYXMgY29tbWFuZGVycyBvZiBhcm1lZCBmb3JjZXMuIEJ1dCB0aGVyZSB3YXMgbm8gcmVhc29uIHdoeSBUdXJwaWxpYW51cywgYSBoZWxwbGVzcyBvbGQgbWFuIGFuZCB1bmFybWVkLCBzaG91bGQgbm90IGhhdmUgYSBjaGFuY2UgdG8gZGVmZW5kIGhpbXNlbGYsIGlmIHRoZSBlbXBlcm9yIHdhcyByZWFsbHkgZ29pbmcgdG8gb2JzZXJ2ZSB0aGF0IG1vZGVyYXRpb24gaW4gaGlzIGRlYWxpbmdzIHdoaWNoIGhlIHByb21pc2VkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3YXMgdGhlIHZpb2xlbnQgZW5kIG9mIE55bXBoaWRpdXMsIGFuZCB3aGVuIEdhbGJhIGxlYXJuZWQgb2YgaXQsIGhlIG9yZGVyZWQgc3VjaCBvZiBoaXMgZmVsbG93LWNvbnNwaXJhdG9ycyBhcyBoYWQgbm90IGF0IG9uY2UgdGFrZW4gdGhlaXIgb3duIGxpdmVzIHRvIGJlIHB1dCB0byBkZWF0aC4gQW1vbmcgdGhlc2Ugd2FzIENpbmdvbml1cywgd2hvIHdyb3RlIHRoZSBzcGVlY2ggZm9yIE55bXBoaWRpdXMsIGFuZCBNaXRocmlkYXRlcyBvZiBQb250dXMuIEJ1dCBpdCB3YXMgaGVsZCB0byBiZSBpbGxlZ2FsIGFuZCBkZXNwb3RpYywgZXZlbiB0aG91Z2gganVzdCwgdG8gcHV0IHRvIGRlYXRoIHdpdGhvdXQgYSB0cmlhbCBtZW4gd2hvIHdlcmUgbm90IHdpdGhvdXQgZGlzdGluY3Rpb24uIEZvciBldmVyeW9uZSBleHBlY3RlZCBhIGRpZmZlcmVudCBtb2RlIG9mIGdvdmVybm1lbnQsIGJlaW5nIHRob3JvdWdobHkgZGVjZWl2ZWQsIGFzIGlzIHVzdWFsLCBieSBhc3N1cmFuY2VzIG1hZGUgaW4gdGhlIGJlZ2lubmluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBwZW9wbGUgdG9vayBpdCBzdGlsbCBtb3JlIGFtaXNzIHdoZW4gUGV0cm9uaXVzIFR1cnBpbGlhbnVzLCBhIG1hbiBvZiBjb25zdWxhciBkaWduaXR5IHdobyB3YXMgZmFpdGhmdWwgdG8gTmVybywgd2FzIG9yZGVyZWQgdG8gdGFrZSBoaXMgb3duIGxpZmUuIEZvciBpbiBoYXZpbmcgTWFjZXIgdGFrZW4gb2ZmIGluIEFmcmljYSBhdCB0aGUgaGFuZHMgb2YgVHJlYm9uaXVzLCBhbmQsIEZvbnRlaXVzIGluIEdlcm1hbnkgYXQgdGhlIGhhbmRzIG9mIFZhbGVucywgR2FsYmEgY291bGQgZXhjdXNlIGhpbXNlbGYgd2l0aCB0aGUgZmVhciB0aGV5IGluc3BpcmVkIGFzIGNvbW1hbmRlcnMgb2YgYXJtZWQgZm9yY2VzLiBCdXQgdGhlcmUgd2FzIG5vIHJlYXNvbiB3aHkgVHVycGlsaWFudXMsIGEgaGVscGxlc3Mgb2xkIG1hbiBhbmQgdW5hcm1lZCwgc2hvdWxkIG5vdCBoYXZlIGEgY2hhbmNlIHRvIGRlZmVuZCBoaW1zZWxmLCBpZiB0aGUgZW1wZXJvciB3YXMgcmVhbGx5IGdvaW5nIHRvIG9ic2VydmUgdGhhdCBtb2RlcmF0aW9uIGluIGhpcyBkZWFsaW5ncyB3aGljaCBoZSBwcm9taXNlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgd2FzIHRoZSBjZW5zdXJlIHRvIHdoaWNoIHRoZXNlIGFjdHMgZXhwb3NlZCBHYWxiYS4gTW9yZW92ZXIsIHdoZW4sIGluIGhpcyBhcHByb2FjaCB0byB0aGUgY2l0eSwgaGUgd2FzIGRpc3RhbnQgZnJvbSBpdCBhYm91dCBmaXZlLWFuZC10d2VudHkgZnVybG9uZ3MsIGhlIGZlbGwgaW4gd2l0aCBhIGRpc29yZGVybHkgYW5kIHR1bXVsdHVvdXMgY3Jvd2Qgb2Ygc2VhbWVuLCB3aG8gYmVzZXQgaGlzIHdheSBhbmQgZW5jb21wYXNzZWQgaGltIG9uIGFsbCBzaWRlcy4gVGhlc2Ugd2VyZSBtZW4gd2hvbSBOZXJvIGhhZCBmb3JtZWQgaW50byBhIGxlZ2lvbiBhbmQgZ2l2ZW4gdGhlIHRpdGxlIG9mIHNvbGRpZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IHRoZXkgd2VyZSB0aGVyZSB0byBlbmZvcmNlIHRoZWlyIGp1c3QgcmlnaHRzIGFzIHNvbGRpZXJzLCBhbmQgd291bGQgbm90IHN1ZmZlciB0aGUgZW1wZXJvciB0byBiZSBzZWVuIG9yIGhlYXJkIGJ5IHRob3NlIHdobyBjYW1lIHRvIG1lZXQgaGltLCBidXQgd2l0aCB0dW11bHR1b3VzIHNob3V0cyBkZW1hbmRlZCBzdGFuZGFyZHMgZm9yIHRoZWlyIGxlZ2lvbiBhbmQgcmVndWxhciBxdWFydGVycy4gV2hlbiBHYWxiYSBwdXQgb2ZmIHRoZWlyIGRlbWFuZCBhbmQgdG9sZCB0aGVtIHRvIHJlbmV3IGl0IGF0IGFub3RoZXIgdGltZSwgdGhleSBkZWNsYXJlZCB0aGF0IHRoZSBwb3N0cG9uZW1lbnQgd2FzIG1lcmVseSBhIHdheSBvZiByZWZ1c2luZyB0aGVpciBkZW1hbmRzLCBhbmQgd2VyZSBpbmNlbnNlZCwgYW5kIGZvbGxvd2VkIGFsb25nIHdpdGggdW5yZW1pdHRlZCBzaG91dHMuIFNvbWUgYWN0dWFsbHkgZHJldyB0aGVpciBzd29yZHMsIGFuZCB0aGVuIEdhbGJhIG9yZGVyZWQgaGlzIGhvcnNlbWVuIHRvIGNoYXJnZSB1cG9uIHRoZW0uIE5vdCBhIG1hbiBvZiB0aGVtIHN0b29kIGhpcyBncm91bmQsIGJ1dCBzb21lIHdlcmUgZG9uZSB0byBkZWF0aCBhdCBvbmNlIGluIHRoZSByb3V0LCBhbmQgb3RoZXJzIGFzIHRoZXkgZmxlZCwgbm9yIHdhcyBpdCBhIGhhcHB5IGFuZCBhdXNwaWNpb3VzIG9tZW4gdGhhdCBHYWxiYSBzaG91bGQgZW50ZXIgdGhlIGNpdHkgdGhyb3VnaCBzbyBtdWNoIHNsYXVnaHRlciBhbmQgc28gbWFueSBkZWFkIGJvZGllcy4gQnV0IHdoZXJlYXMgbWFueSBoYWQgYmVmb3JlIHRoaXMgZGVzcGlzZWQgaGltIGFuZCBsb29rZWQgdXBvbiBoaW0gYXMgYSB3ZWFrIG9sZCBtYW4sIG5vdyBhbGwgcmVnYXJkZWQgaGltIHdpdGggc2h1ZGRlcmluZyBmZWFyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2gsIHRoZW4sIHdhcyB0aGUgY2Vuc3VyZSB0byB3aGljaCB0aGVzZSBhY3RzIGV4cG9zZWQgR2FsYmEuIE1vcmVvdmVyLCB3aGVuLCBpbiBoaXMgYXBwcm9hY2ggdG8gdGhlIGNpdHksIGhlIHdhcyBkaXN0YW50IGZyb20gaXQgYWJvdXQgZml2ZS1hbmQtdHdlbnR5IGZ1cmxvbmdzLCBoZSBmZWxsIGluIHdpdGggYSBkaXNvcmRlcmx5IGFuZCB0dW11bHR1b3VzIGNyb3dkIG9mIHNlYW1lbiwgd2hvIGJlc2V0IGhpcyB3YXkgYW5kIGVuY29tcGFzc2VkIGhpbSBvbiBhbGwgc2lkZXMuIFRoZXNlIHdlcmUgbWVuIHdob20gTmVybyBoYWQgZm9ybWVkIGludG8gYSBsZWdpb24gYW5kIGdpdmVuIHRoZSB0aXRsZSBvZiBzb2xkaWVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgdGhleSB3ZXJlIHRoZXJlIHRvIGVuZm9yY2UgdGhlaXIganVzdCByaWdodHMgYXMgc29sZGllcnMsIGFuZCB3b3VsZCBub3Qgc3VmZmVyIHRoZSBlbXBlcm9yIHRvIGJlIHNlZW4gb3IgaGVhcmQgYnkgdGhvc2Ugd2hvIGNhbWUgdG8gbWVldCBoaW0sIGJ1dCB3aXRoIHR1bXVsdHVvdXMgc2hvdXRzIGRlbWFuZGVkIHN0YW5kYXJkcyBmb3IgdGhlaXIgbGVnaW9uIGFuZCByZWd1bGFyIHF1YXJ0ZXJzLiBXaGVuIEdhbGJhIHB1dCBvZmYgdGhlaXIgZGVtYW5kIGFuZCB0b2xkIHRoZW0gdG8gcmVuZXcgaXQgYXQgYW5vdGhlciB0aW1lLCB0aGV5IGRlY2xhcmVkIHRoYXQgdGhlIHBvc3Rwb25lbWVudCB3YXMgbWVyZWx5IGEgd2F5IG9mIHJlZnVzaW5nIHRoZWlyIGRlbWFuZHMsIGFuZCB3ZXJlIGluY2Vuc2VkLCBhbmQgZm9sbG93ZWQgYWxvbmcgd2l0aCB1bnJlbWl0dGVkIHNob3V0cy4gU29tZSBhY3R1YWxseSBkcmV3IHRoZWlyIHN3b3JkcywgYW5kIHRoZW4gR2FsYmEgb3JkZXJlZCBoaXMgaG9yc2VtZW4gdG8gY2hhcmdlIHVwb24gdGhlbS4gTm90IGEgbWFuIG9mIHRoZW0gc3Rvb2QgaGlzIGdyb3VuZCwgYnV0IHNvbWUgd2VyZSBkb25lIHRvIGRlYXRoIGF0IG9uY2UgaW4gdGhlIHJvdXQsIGFuZCBvdGhlcnMgYXMgdGhleSBmbGVkLCBub3Igd2FzIGl0IGEgaGFwcHkgYW5kIGF1c3BpY2lvdXMgb21lbiB0aGF0IEdhbGJhIHNob3VsZCBlbnRlciB0aGUgY2l0eSB0aHJvdWdoIHNvIG11Y2ggc2xhdWdodGVyIGFuZCBzbyBtYW55IGRlYWQgYm9kaWVzLiBCdXQgd2hlcmVhcyBtYW55IGhhZCBiZWZvcmUgdGhpcyBkZXNwaXNlZCBoaW0gYW5kIGxvb2tlZCB1cG9uIGhpbSBhcyBhIHdlYWsgb2xkIG1hbiwgbm93IGFsbCByZWdhcmRlZCBoaW0gd2l0aCBzaHVkZGVyaW5nIGZlYXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIGluIGhpcyBkZXNpcmUgdG8gZGlzcGxheSBhIGdyZWF0IGNoYW5nZSBmcm9tIE5lcm8ncyBpbW1vZGVyYXRlIGFuZCBleHRyYXZhZ2FudCBtYW5uZXIgb2YgZ2l2aW5nLCBoZSB3YXMgdGhvdWdodCB0byBmYWxsIHNob3J0IG9mIHdoYXQgd2FzIGZpdHRpbmcuIEZvciBleGFtcGxlLCBhZnRlciBDYW51cyBoYWQgcGxheWVkIG9uIHRoZSBmbHV0ZSBmb3IgaGltIGF0IGEgYmFucXVldCAobm93IENhbnVzIHdhcyBhIHBlcmZvcm1lciBvZiBoaWdoIHJlcHV0ZSksIGhlIHdhcyBsb3VkIGluIGhpcyBwcmFpc2VzIGFuZCBvcmRlcmVkIGhpcyBwdXJzZSB0byBiZSBicm91Z2h0IHRvIGhpbTsgYW5kIHRha2luZyBmcm9tIGl0IGEgZmV3IGdvbGQgcGllY2VzLCBoZSBnYXZlIHRoZW0gdG8gQ2FudXMsIHdpdGggdGhlIHJlbWFyayB0aGF0IHRoZSBnaWZ0IHdhcyBtYWRlIGZyb20gaGlzIG93biwgYW5kIG5vdCBmcm9tIHRoZSBwdWJsaWMgbW9uZXlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgaGUgb3JkZXJlZCB0aGF0IHRoZSBnaWZ0cyB3aGljaCBOZXJvIGhhZCBtYWRlIHRvIHBlb3BsZSBvZiB0aGUgdGhlYXRyZSBhbmQgcGFsYWVzdHJhIHNob3VsZCBiZSBkZW1hbmRlZCBiYWNrIGFnYWluIHdpdGggc3RyaWN0bmVzcywgYWxsIGJ1dCB0aGUgdGVudGggcGFydDsgYW5kIHRoZW4sIHdoZW4gaGUgZ290IG9ubHkgc2xpZ2h0IGFuZCBncnVkZ2luZyByZXR1cm5zIChmb3IgbW9zdCBvZiB0aGUgcmVjaXBpZW50cyBoYWQgc3F1YW5kZXJlZCB0aGVpciBsYXJnZXNzLCBiZWluZyBtZW4gb2YgYSBsb29zZSBhbmQgaW1wcm92aWRlbnQgd2F5IG9mIGxpdmluZyksIGhlIGhhZCBhIHNlYXJjaCBtYWRlIGZvciBzdWNoIGFzIGhhZCBib3VnaHQgb3IgcmVjZWl2ZWQgYW55dGhpbmcgd2hhdHNvZXZlciBmcm9tIHRoZW0sIGFuZCB0cmllZCB0byBleGFjdCBpdCBmcm9tIHRoZXNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYnVzaW5lc3MgaGFkIG5vIGxpbWl0cywgYnV0IHdhcyBmYXIgZXh0ZW5kZWQgYW5kIGFmZmVjdGVkIG1hbnk7IGl0IGdhdmUgdGhlIGVtcGVyb3IgaGltc2VsZiBhIGJhZCBuYW1lLCBhbmQgYnJvdWdodCBlbnZ5IGFuZCBoYXRyZWQgdXBvbiBWaW5pdXMgYXMgaGF2aW5nIG1hZGUgdGhlIGVtcGVyb3IgdW5nZW5lcm91cyBhbmQgc29yZGlkIHdpdGggZXZlcnlib2R5IGVsc2UsIHdoaWxlIGhlIGhpbXNlbGYgdXNlZCBtb25leSBsYXZpc2hseSwgdGFraW5nIGV2ZXJ5dGhpbmcgdGhhdCB3YXMgb2ZmZXJlZCBhbmQgc2VsbGluZyBmcmVlbHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBIZXNpb2Q8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikhlcy4gV0QgMzY2IiB2YWxpZD0ieWVzIj5Xb3JrcyBhbmQgRGF5cywgMzY2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBiaWRzIG1lbiB0bwoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5EcmluayB3aXRob3V0IHN0aW50IGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0aGUgY2Fzayw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlhbmQgc28gVmluaXVzLCBzZWVpbmcgdGhhdCBHYWxiYSB3YXMgb2xkIGFuZCBmZWVibGUsIHNhdGVkIGhpbXNlbGYgd2l0aCB0aGUgZ29vZCBmb3J0dW5lIHdoaWNoIGhlIHRob3VnaHQgd2FzIGp1c3QgYmVnaW5uaW5nIGFuZCBhdCB0aGUgc2FtZSB0aW1lIHdhcyBzb29uIHRvIGVuZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdywgaW4gaGlzIGRlc2lyZSB0byBkaXNwbGF5IGEgZ3JlYXQgY2hhbmdlIGZyb20gTmVybydzIGltbW9kZXJhdGUgYW5kIGV4dHJhdmFnYW50IG1hbm5lciBvZiBnaXZpbmcsIGhlIHdhcyB0aG91Z2h0IHRvIGZhbGwgc2hvcnQgb2Ygd2hhdCB3YXMgZml0dGluZy4gRm9yIGV4YW1wbGUsIGFmdGVyIENhbnVzIGhhZCBwbGF5ZWQgb24gdGhlIGZsdXRlIGZvciBoaW0gYXQgYSBiYW5xdWV0IChub3cgQ2FudXMgd2FzIGEgcGVyZm9ybWVyIG9mIGhpZ2ggcmVwdXRlKSwgaGUgd2FzIGxvdWQgaW4gaGlzIHByYWlzZXMgYW5kIG9yZGVyZWQgaGlzIHB1cnNlIHRvIGJlIGJyb3VnaHQgdG8gaGltOyBhbmQgdGFraW5nIGZyb20gaXQgYSBmZXcgZ29sZCBwaWVjZXMsIGhlIGdhdmUgdGhlbSB0byBDYW51cywgd2l0aCB0aGUgcmVtYXJrIHRoYXQgdGhlIGdpZnQgd2FzIG1hZGUgZnJvbSBoaXMgb3duLCBhbmQgbm90IGZyb20gdGhlIHB1YmxpYyBtb25leXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBoZSBvcmRlcmVkIHRoYXQgdGhlIGdpZnRzIHdoaWNoIE5lcm8gaGFkIG1hZGUgdG8gcGVvcGxlIG9mIHRoZSB0aGVhdHJlIGFuZCBwYWxhZXN0cmEgc2hvdWxkIGJlIGRlbWFuZGVkIGJhY2sgYWdhaW4gd2l0aCBzdHJpY3RuZXNzLCBhbGwgYnV0IHRoZSB0ZW50aCBwYXJ0OyBhbmQgdGhlbiwgd2hlbiBoZSBnb3Qgb25seSBzbGlnaHQgYW5kIGdydWRnaW5nIHJldHVybnMgKGZvciBtb3N0IG9mIHRoZSByZWNpcGllbnRzIGhhZCBzcXVhbmRlcmVkIHRoZWlyIGxhcmdlc3MsIGJlaW5nIG1lbiBvZiBhIGxvb3NlIGFuZCBpbXByb3ZpZGVudCB3YXkgb2YgbGl2aW5nKSwgaGUgaGFkIGEgc2VhcmNoIG1hZGUgZm9yIHN1Y2ggYXMgaGFkIGJvdWdodCBvciByZWNlaXZlZCBhbnl0aGluZyB3aGF0c29ldmVyIGZyb20gdGhlbSwgYW5kIHRyaWVkIHRvIGV4YWN0IGl0IGZyb20gdGhlc2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBidXNpbmVzcyBoYWQgbm8gbGltaXRzLCBidXQgd2FzIGZhciBleHRlbmRlZCBhbmQgYWZmZWN0ZWQgbWFueTsgaXQgZ2F2ZSB0aGUgZW1wZXJvciBoaW1zZWxmIGEgYmFkIG5hbWUsIGFuZCBicm91Z2h0IGVudnkgYW5kIGhhdHJlZCB1cG9uIFZpbml1cyBhcyBoYXZpbmcgbWFkZSB0aGUgZW1wZXJvciB1bmdlbmVyb3VzIGFuZCBzb3JkaWQgd2l0aCBldmVyeWJvZHkgZWxzZSwgd2hpbGUgaGUgaGltc2VsZiB1c2VkIG1vbmV5IGxhdmlzaGx5LCB0YWtpbmcgZXZlcnl0aGluZyB0aGF0IHdhcyBvZmZlcmVkIGFuZCBzZWxsaW5nIGZyZWVseS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBIZXNpb2Q8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZXMuIFdEIDM2NiIgdmFsaWQ9InllcyI+V29ya3MgYW5kIERheXMsIDM2Ni48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYmlkcyBtZW4gdG8KCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikhlcy4gV0QgMzY2IiB2YWxpZD0ieWVzIj5Xb3JrcyBhbmQgRGF5cywgMzY2LjwvYmlibD4KICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHJpbmsgd2l0aG91dCBzdGludCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhlIGNhc2ssPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJYW5kIHNvIFZpbml1cywgc2VlaW5nIHRoYXQgR2FsYmEgd2FzIG9sZCBhbmQgZmVlYmxlLCBzYXRlZCBoaW1zZWxmIHdpdGggdGhlIGdvb2QgZm9ydHVuZSB3aGljaCBoZSB0aG91Z2h0IHdhcyBqdXN0IGJlZ2lubmluZyBhbmQgYXQgdGhlIHNhbWUgdGltZSB3YXMgc29vbiB0byBlbmQuCgkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHJpbmsgd2l0aG91dCBzdGludCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhlIGNhc2ssPC9sPgoJCQkJICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGFnZWQgZW1wZXJvciBzdWZmZXJlZCBpbmp1c3RpY2Ugbm90IG9ubHkgd2hlbiBWaW5pdXMsIGFzIGF0IGZpcnN0LCBhZG1pbmlzdGVyZWQgYWZmYWlycyBiYWRseSwgYnV0IGFsc28gd2hlbiBoZSBicm91Z2h0IGludG8gb2RpdW0gb3IgcHJldmVudGVkIHdpc2UgbWVhc3VyZXMgc2V0IG9uIGZvb3QgYnkgR2FsYmEgaGltc2VsZjsgYXMsIGZvciBpbnN0YW5jZSwgaW4gdGhlIG1hdHRlciBvZiBwdW5pc2hpbmcgdGhlIGFkaGVyZW50cyBvZiBOZXJvLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgR2FsYmEgc2V0IG91dCB0byBraWxsIHRoZSBiYWQgb25lcywgYW1vbmcgd2hvbSB3ZXJlIEhlbGl1cyBhbmQgUG9seWNsZWl0dXMgYW5kIFBldGludXMgYW5kIFBhdHJvYml1cy4gQW5kIHRoZSBwZW9wbGUgYXBwbGF1ZGVkIHRoZSBhY3QsIGFuZCBzaG91dGVkLCBhcyB0aGUgY3VscHJpdHMgd2VyZSBkcmFnZ2VkIHRocm91Z2ggdGhlIGZvcnVtIHRvIHRoZWlyIGRvb20sIHRoYXQgaXQgd2FzIGEgZ29vZGx5IHByb2Nlc3Npb24gaW5kZWVkLCBhbmQgYWNjZXB0YWJsZSB0byB0aGUgZ29kcywgYnV0IHRoYXQgZ29kcyBhbmQgbWVuIGFsaWtlIGRlbWFuZGVkIGp1c3RpY2Ugb24gdGhlIHR1dG9yIGFuZCB0ZWFjaGVyIG9mIHRoZSB0eXJhbnQsIG5hbWVseSwgVGlnZWxsaW51cy4gVGhhdCB3b3J0aHkgbWluaXN0ZXIsIGhvd2V2ZXIsIGhhZCB3b24gdGhlIHByb3RlY3Rpb24gb2YgVmluaXVzIGJldGltZXMsIGJ5IG1lYW5zIG9mIGxhcmdlIGFkdmFuY2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgVHVycGlsaWFudXMsIHdobyB3YXMgaGF0ZWQgbWVyZWx5IGJlY2F1c2UgaGUgd291bGQgbm90IGJldHJheSBub3Igc2hvdyBoYXRyZWQgdG8gTmVybyBpbiBzcGl0ZSBvZiBhbGwgdGhhdCBlbXBlcm9yJ3MgY3JpbWVzLCBidXQgYXBhcnQgZnJvbSB0aGlzIGhhZCBwYXJ0aWNpcGF0ZWQgaW4gbm8gb25lIHNlcmlvdXMgb2ZmZW5jZSwgd2FzIHB1dCB0byBkZWF0aDsgd2hlcmVhcyB0aGUgbWFuIHdobyBoYWQgbWFkZSBOZXJvIHdvcnRoeSBvZiBkZWF0aCwgYW5kIGJldHJheWVkIGFuZCBmb3Jzb29rIGhpbSB3aGVuIGhlIGhhZCBjb21lIHRvIHRoYXQgcGFzcywgd2FzIGxlZnQgYWxpdmXigJRhIGdyZWF0IG9iamVjdC1sZXNzb24gdG8gc2hvdyB0aGF0IFZpbml1cyBjb3VsZCBkbyBhbnl0aGluZyBhbmQgZnVsZmlsIGFueSBleHBlY3RhdGlvbiBmb3IgdGhvc2Ugd2hvIGdhdmUgaGltIGVub3VnaC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXJlIHdhcyBubyBzcGVjdGFjbGUgb24gd2hpY2ggdGhlIFJvbWFuIHBlb3BsZSBoYWQgc28gc2V0IHRoZWlyIGhlYXJ0cyBhcyB0aGF0IG9mIFRpZ2VsbGludXMgZHJhZ2dlZCBhd2F5IHRvIHB1bmlzaG1lbnQsIGFuZCBpbiBhbGwgdGhlIHRoZWF0cmVzIGFuZCBjaXJjdXNlcyB0aGV5IHdvdWxkIG5vdCBjZWFzZSBkZW1hbmRpbmcgaGltLCB1bnRpbCB0aGV5IHdlcmUgcXVlbGxlZCBieSBhbiBlZGljdCBvZiB0aGUgZW1wZXJvciBpbiB3aGljaCBoZSBkZWNsYXJlZCB0aGF0IFRpZ2VsbGludXMgd2FzIHdhc3RpbmcgYXdheSB3aXRoIGNvbnN1bXB0aW9uIGFuZCBoYWQgbm90IG11Y2ggbG9uZ2VyIHRvIGxpdmUsIGFuZCBhZHZpc2VkIHRoZW0gbm90IHRvIGV4YXNwZXJhdGUgdGhlIGdvdmVybm1lbnQgb3IgZm9yY2UgaXQgdG8gYmUgdHlyYW5uaWNhbC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgaW4gbW9ja2VyeSBvZiB0aGUgZGlzc2F0aXNmaWVkIHBlb3BsZSwgVGlnZWxsaW51cyBvZmZlcmVkIHNhY3JpZmljZXMgZm9yIGhpcyBwcmVzZXJ2YXRpb24gYW5kIHByZXBhcmVkIGEgc3BsZW5kaWQgZmVhc3Q7IGFuZCBWaW5pdXMsIHJpc2luZyBmcm9tIGJlc2lkZSB0aGUgZW1wZXJvciwgYWZ0ZXJ3YXJkcyB3ZW50IHRvIGEgZHJpbmtpbmctYm91dCBpbiBUaWdlbGxpbnVzJyBob3VzZSwgbGVhZGluZyBoaXMgZGF1Z2h0ZXIsIHdobyB3YXMgYSB3aWRvdy4gVGlnZWxsaW51cyBwbGVkZ2VkIGhlciBoZWFsdGggd2l0aCBhIGdpZnQgb2YgdHdlbnR5LWZpdmUgbXlyaWFkcyBvZiBtb25leSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIG5vdGUgb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEdhbGIuIDIuMiIgdmFsaWQ9InllcyI+Q2hhcC4gaWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBvcmRlcmVkIHRoZSBnb3Zlcm5lc3Mgb2YgaGlzIGNvbmN1YmluZXMgdG8gdGFrZSB0aGUgbmVja2xhY2UgZnJvbSBoZXIgb3duIG5lY2sgYW5kIHB1dCBpdCBhYm91dCBoZXJzLiBUaGUgbmVja2xhY2Ugd2FzIHNhaWQgdG8gYmUgd29ydGggZmlmdGVlbiBteXJpYWRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBhZ2VkIGVtcGVyb3Igc3VmZmVyZWQgaW5qdXN0aWNlIG5vdCBvbmx5IHdoZW4gVmluaXVzLCBhcyBhdCBmaXJzdCwgYWRtaW5pc3RlcmVkIGFmZmFpcnMgYmFkbHksIGJ1dCBhbHNvIHdoZW4gaGUgYnJvdWdodCBpbnRvIG9kaXVtIG9yIHByZXZlbnRlZCB3aXNlIG1lYXN1cmVzIHNldCBvbiBmb290IGJ5IEdhbGJhIGhpbXNlbGY7IGFzLCBmb3IgaW5zdGFuY2UsIGluIHRoZSBtYXR0ZXIgb2YgcHVuaXNoaW5nIHRoZSBhZGhlcmVudHMgb2YgTmVyby4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBHYWxiYSBzZXQgb3V0IHRvIGtpbGwgdGhlIGJhZCBvbmVzLCBhbW9uZyB3aG9tIHdlcmUgSGVsaXVzIGFuZCBQb2x5Y2xlaXR1cyBhbmQgUGV0aW51cyBhbmQgUGF0cm9iaXVzLiBBbmQgdGhlIHBlb3BsZSBhcHBsYXVkZWQgdGhlIGFjdCwgYW5kIHNob3V0ZWQsIGFzIHRoZSBjdWxwcml0cyB3ZXJlIGRyYWdnZWQgdGhyb3VnaCB0aGUgZm9ydW0gdG8gdGhlaXIgZG9vbSwgdGhhdCBpdCB3YXMgYSBnb29kbHkgcHJvY2Vzc2lvbiBpbmRlZWQsIGFuZCBhY2NlcHRhYmxlIHRvIHRoZSBnb2RzLCBidXQgdGhhdCBnb2RzIGFuZCBtZW4gYWxpa2UgZGVtYW5kZWQganVzdGljZSBvbiB0aGUgdHV0b3IgYW5kIHRlYWNoZXIgb2YgdGhlIHR5cmFudCwgbmFtZWx5LCBUaWdlbGxpbnVzLiBUaGF0IHdvcnRoeSBtaW5pc3RlciwgaG93ZXZlciwgaGFkIHdvbiB0aGUgcHJvdGVjdGlvbiBvZiBWaW5pdXMgYmV0aW1lcywgYnkgbWVhbnMgb2YgbGFyZ2UgYWR2YW5jZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBUdXJwaWxpYW51cywgd2hvIHdhcyBoYXRlZCBtZXJlbHkgYmVjYXVzZSBoZSB3b3VsZCBub3QgYmV0cmF5IG5vciBzaG93IGhhdHJlZCB0byBOZXJvIGluIHNwaXRlIG9mIGFsbCB0aGF0IGVtcGVyb3IncyBjcmltZXMsIGJ1dCBhcGFydCBmcm9tIHRoaXMgaGFkIHBhcnRpY2lwYXRlZCBpbiBubyBvbmUgc2VyaW91cyBvZmZlbmNlLCB3YXMgcHV0IHRvIGRlYXRoOyB3aGVyZWFzIHRoZSBtYW4gd2hvIGhhZCBtYWRlIE5lcm8gd29ydGh5IG9mIGRlYXRoLCBhbmQgYmV0cmF5ZWQgYW5kIGZvcnNvb2sgaGltIHdoZW4gaGUgaGFkIGNvbWUgdG8gdGhhdCBwYXNzLCB3YXMgbGVmdCBhbGl2ZeKAlGEgZ3JlYXQgb2JqZWN0LWxlc3NvbiB0byBzaG93IHRoYXQgVmluaXVzIGNvdWxkIGRvIGFueXRoaW5nIGFuZCBmdWxmaWwgYW55IGV4cGVjdGF0aW9uIGZvciB0aG9zZSB3aG8gZ2F2ZSBoaW0gZW5vdWdoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3YXMgbm8gc3BlY3RhY2xlIG9uIHdoaWNoIHRoZSBSb21hbiBwZW9wbGUgaGFkIHNvIHNldCB0aGVpciBoZWFydHMgYXMgdGhhdCBvZiBUaWdlbGxpbnVzIGRyYWdnZWQgYXdheSB0byBwdW5pc2htZW50LCBhbmQgaW4gYWxsIHRoZSB0aGVhdHJlcyBhbmQgY2lyY3VzZXMgdGhleSB3b3VsZCBub3QgY2Vhc2UgZGVtYW5kaW5nIGhpbSwgdW50aWwgdGhleSB3ZXJlIHF1ZWxsZWQgYnkgYW4gZWRpY3Qgb2YgdGhlIGVtcGVyb3IgaW4gd2hpY2ggaGUgZGVjbGFyZWQgdGhhdCBUaWdlbGxpbnVzIHdhcyB3YXN0aW5nIGF3YXkgd2l0aCBjb25zdW1wdGlvbiBhbmQgaGFkIG5vdCBtdWNoIGxvbmdlciB0byBsaXZlLCBhbmQgYWR2aXNlZCB0aGVtIG5vdCB0byBleGFzcGVyYXRlIHRoZSBnb3Zlcm5tZW50IG9yIGZvcmNlIGl0IHRvIGJlIHR5cmFubmljYWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGluIG1vY2tlcnkgb2YgdGhlIGRpc3NhdGlzZmllZCBwZW9wbGUsIFRpZ2VsbGludXMgb2ZmZXJlZCBzYWNyaWZpY2VzIGZvciBoaXMgcHJlc2VydmF0aW9uIGFuZCBwcmVwYXJlZCBhIHNwbGVuZGlkIGZlYXN0OyBhbmQgVmluaXVzLCByaXNpbmcgZnJvbSBiZXNpZGUgdGhlIGVtcGVyb3IsIGFmdGVyd2FyZHMgd2VudCB0byBhIGRyaW5raW5nLWJvdXQgaW4gVGlnZWxsaW51cycgaG91c2UsIGxlYWRpbmcgaGlzIGRhdWdodGVyLCB3aG8gd2FzIGEgd2lkb3cuIFRpZ2VsbGludXMgcGxlZGdlZCBoZXIgaGVhbHRoIHdpdGggYSBnaWZ0IG9mIHR3ZW50eS1maXZlIG15cmlhZHMgb2YgbW9uZXksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIG5vdGUgb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gR2FsYi4gMi4yIiB2YWxpZD0ieWVzIj5DaGFwLiBpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIG9yZGVyZWQgdGhlIGdvdmVybmVzcyBvZiBoaXMgY29uY3ViaW5lcyB0byB0YWtlIHRoZSBuZWNrbGFjZSBmcm9tIGhlciBvd24gbmVjayBhbmQgcHV0IGl0IGFib3V0IGhlcnMuIFRoZSBuZWNrbGFjZSB3YXMgc2FpZCB0byBiZSB3b3J0aCBmaWZ0ZWVuIG15cmlhZHMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEdhbGIuIDIuMiIgdmFsaWQ9InllcyI+Q2hhcC4gaWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBldmVuIHRoZSByZWFzb25hYmxlIG1lYXN1cmVzIG9mIHRoZSBlbXBlcm9yIGZlbGwgdW5kZXIgY2Vuc3VyZSwgYXMsIGZvciBpbnN0YW5jZSwgaGlzIHRyZWF0bWVudCBvZiB0aGUgR2F1bHMgd2hvIGhhZCBjb25zcGlyZWQgd2l0aCBWaW5kZXguIEZvciB0aGV5IHdlcmUgdGhvdWdodCB0byBoYXZlIG9idGFpbmVkIHRoZWlyIHJlbWlzc2lvbiBvZiB0cmlidXRlIGFuZCB0aGVpciBjaXZpbCByaWdodHMsIG5vdCB0aHJvdWdoIHRoZSBraW5kbmVzcyBvZiB0aGUgZW1wZXJvciwgYnV0IGJ5IHB1cmNoYXNlIGZyb20gVmluaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIHdlcmUgdGhlIHJlYXNvbnMsIHRoZW4sIHdoeSBtb3N0IG9mIHRoZSBwZW9wbGUgaGF0ZWQgdGhlIGdvdmVybm1lbnQ7IGJ1dCB0aGUgc29sZGllcnMsIHRob3VnaCB0aGV5IGhhZCBub3QgcmVjZWl2ZWQgdGhlaXIgcHJvbWlzZWQgbGFyZ2Vzcywgd2VyZSBsZWQgb24gYXQgZmlyc3QgYnkgdGhlIGhvcGUgdGhhdCBHYWxiYSB3b3VsZCBnaXZlIHRoZW0sIGlmIG5vdCB0aGUgd2hvbGUgb2YgaXQsIGF0IGxlYXN0IGFzIG11Y2ggYXMgTmVybyBoYWQgZ2l2ZW4uIFdoZW4sIGhvd2V2ZXIsIEdhbGJhIGhlYXJkIHRoYXQgdGhleSB3ZXJlIGNvbXBsYWluaW5nLCBoZSBzcG9rZSBvdXQgYXMgYmVjYW1lIGEgZ3JlYXQgZW1wZXJvciwgYW5kIGRlY2xhcmVkIHRoYXQgaXQgd2FzIGhpcyBjdXN0b20gdG8gZW5yb2xsIHNvbGRpZXJzLCBub3QgdG8gYnV5IHRoZW07IHdoZXJldXBvbiB0aGV5IGJlZ2FuIHRvIGNoZXJpc2ggYSBkaXJlIGFuZCBzYXZhZ2UgaGF0cmVkIHRvd2FyZHMgaGltLiBGb3IgdGhleSB0aG91Z2h0IHRoYXQgaGUgd2FzIG5vdCBvbmx5IGRlZnJhdWRpbmcgdGhlbSBoaW1zZWxmLCBidXQgbGF5aW5nIGRvd24gdGhlIGxhdyBhbmQgZ2l2aW5nIGluc3RydWN0aW9ucyBmb3Igc3VjY2VlZGluZyBlbXBlcm9ycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgZXZlbiB0aGUgcmVhc29uYWJsZSBtZWFzdXJlcyBvZiB0aGUgZW1wZXJvciBmZWxsIHVuZGVyIGNlbnN1cmUsIGFzLCBmb3IgaW5zdGFuY2UsIGhpcyB0cmVhdG1lbnQgb2YgdGhlIEdhdWxzIHdobyBoYWQgY29uc3BpcmVkIHdpdGggVmluZGV4LiBGb3IgdGhleSB3ZXJlIHRob3VnaHQgdG8gaGF2ZSBvYnRhaW5lZCB0aGVpciByZW1pc3Npb24gb2YgdHJpYnV0ZSBhbmQgdGhlaXIgY2l2aWwgcmlnaHRzLCBub3QgdGhyb3VnaCB0aGUga2luZG5lc3Mgb2YgdGhlIGVtcGVyb3IsIGJ1dCBieSBwdXJjaGFzZSBmcm9tIFZpbml1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggd2VyZSB0aGUgcmVhc29ucywgdGhlbiwgd2h5IG1vc3Qgb2YgdGhlIHBlb3BsZSBoYXRlZCB0aGUgZ292ZXJubWVudDsgYnV0IHRoZSBzb2xkaWVycywgdGhvdWdoIHRoZXkgaGFkIG5vdCByZWNlaXZlZCB0aGVpciBwcm9taXNlZCBsYXJnZXNzLCB3ZXJlIGxlZCBvbiBhdCBmaXJzdCBieSB0aGUgaG9wZSB0aGF0IEdhbGJhIHdvdWxkIGdpdmUgdGhlbSwgaWYgbm90IHRoZSB3aG9sZSBvZiBpdCwgYXQgbGVhc3QgYXMgbXVjaCBhcyBOZXJvIGhhZCBnaXZlbi4gV2hlbiwgaG93ZXZlciwgR2FsYmEgaGVhcmQgdGhhdCB0aGV5IHdlcmUgY29tcGxhaW5pbmcsIGhlIHNwb2tlIG91dCBhcyBiZWNhbWUgYSBncmVhdCBlbXBlcm9yLCBhbmQgZGVjbGFyZWQgdGhhdCBpdCB3YXMgaGlzIGN1c3RvbSB0byBlbnJvbGwgc29sZGllcnMsIG5vdCB0byBidXkgdGhlbTsgd2hlcmV1cG9uIHRoZXkgYmVnYW4gdG8gY2hlcmlzaCBhIGRpcmUgYW5kIHNhdmFnZSBoYXRyZWQgdG93YXJkcyBoaW0uIEZvciB0aGV5IHRob3VnaHQgdGhhdCBoZSB3YXMgbm90IG9ubHkgZGVmcmF1ZGluZyB0aGVtIGhpbXNlbGYsIGJ1dCBsYXlpbmcgZG93biB0aGUgbGF3IGFuZCBnaXZpbmcgaW5zdHJ1Y3Rpb25zIGZvciBzdWNjZWVkaW5nIGVtcGVyb3JzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGFnaXRhdGlvbiBhdCBSb21lIHdhcyBzdGlsbCBzbW91bGRlcmluZywgYW5kIGF0IHRoZSBzYW1lIHRpbWUgYSBjZXJ0YWluIHJlc3BlY3QgZm9yIEdhbGJhJ3MgcHJlc2VuY2UgYmx1bnRlZCBhbmQgZGVsYXllZCB0aGUgc3Bpcml0IG9mIHJldm9sdXRpb24sIGFuZCB0aGUgYWJzZW5jZSBvZiBhbnkgbWFuaWZlc3Qgb2NjYXNpb24gZm9yIGEgY2hhbmdlIHJlcHJlc3NlZCBhbmQga2VwdCB1bmRlciBjb3Zlciwgc29tZWhvdyBvciBvdGhlciwgdGhlIHJlc2VudG1lbnQgb2YgdGhlIHNvbGRpZXJzLiBCdXQgdGhlIGFybXkgd2hpY2ggaGFkIGZvcm1lcmx5IHNlcnZlZCB1bmRlciBWZXJnaW5pdXMsIGFuZCB3YXMgbm93IHNlcnZpbmcgdW5kZXIgRmxhY2N1cyBpbiBHZXJtYW55LCB0aGlua2luZyB0aGVtc2VsdmVzIGRlc2VydmluZyBvZiBncmVhdCByZXdhcmRzIG9uIGFjY291bnQgb2YgdGhlIGJhdHRsZSB0aGV5IGhhZCBmb3VnaHQgYWdhaW5zdCBWaW5kZXgsIGFuZCBnZXR0aW5nIG5vdGhpbmcsIGNvdWxkIG5vdCBiZSBhcHBlYXNlZCBieSB0aGVpciBvZmZpY2Vycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+T2YgRmxhY2N1cyBoaW1zZWxmLCB3aG8gd2FzIHBoeXNpY2FsbHkgaW5jYXBhY2l0YXRlZCBieSBhbiBhY3V0ZSBnb3V0LCBhbmQgaW5leHBlcmllbmNlZCBpbiB0aGUgY29uZHVjdCBvZiBhZmZhaXJzLCB0aGV5IG1hZGUgbm8gYWNjb3VudCB3aGF0ZXZlci4gQW5kIG9uY2UgYXQgYSBzcGVjdGFjbGUsIHdoZW4gdGhlIG1pbGl0YXJ5IHRyaWJ1bmVzIGFuZCBjZW50dXJpb25zLCBhZnRlciB0aGUgUm9tYW4gY3VzdG9tLCBpbnZva2VkIGhlYWx0aCBhbmQgaGFwcGluZXNzIHVwb24gdGhlIGVtcGVyb3IgR2FsYmEsIHRoZSBtYXNzIG9mIHRoZSBzb2xkaWVyeSByYWlzZWQgYSBzdG9ybSBvZiBkaXNzZW50IGF0IGZpcnN0LCBhbmQgdGhlbiwgd2hlbiB0aGUgb2ZmaWNlcnMgcGVyc2lzdGVkIGluIHRoZWlyIGludm9jYXRpb24sIGNyaWVkIG91dCBpbiByZXNwb25zZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JZiBoZSBkZXNlcnZlcyBpdC48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgYWdpdGF0aW9uIGF0IFJvbWUgd2FzIHN0aWxsIHNtb3VsZGVyaW5nLCBhbmQgYXQgdGhlIHNhbWUgdGltZSBhIGNlcnRhaW4gcmVzcGVjdCBmb3IgR2FsYmEncyBwcmVzZW5jZSBibHVudGVkIGFuZCBkZWxheWVkIHRoZSBzcGlyaXQgb2YgcmV2b2x1dGlvbiwgYW5kIHRoZSBhYnNlbmNlIG9mIGFueSBtYW5pZmVzdCBvY2Nhc2lvbiBmb3IgYSBjaGFuZ2UgcmVwcmVzc2VkIGFuZCBrZXB0IHVuZGVyIGNvdmVyLCBzb21laG93IG9yIG90aGVyLCB0aGUgcmVzZW50bWVudCBvZiB0aGUgc29sZGllcnMuIEJ1dCB0aGUgYXJteSB3aGljaCBoYWQgZm9ybWVybHkgc2VydmVkIHVuZGVyIFZlcmdpbml1cywgYW5kIHdhcyBub3cgc2VydmluZyB1bmRlciBGbGFjY3VzIGluIEdlcm1hbnksIHRoaW5raW5nIHRoZW1zZWx2ZXMgZGVzZXJ2aW5nIG9mIGdyZWF0IHJld2FyZHMgb24gYWNjb3VudCBvZiB0aGUgYmF0dGxlIHRoZXkgaGFkIGZvdWdodCBhZ2FpbnN0IFZpbmRleCwgYW5kIGdldHRpbmcgbm90aGluZywgY291bGQgbm90IGJlIGFwcGVhc2VkIGJ5IHRoZWlyIG9mZmljZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9mIEZsYWNjdXMgaGltc2VsZiwgd2hvIHdhcyBwaHlzaWNhbGx5IGluY2FwYWNpdGF0ZWQgYnkgYW4gYWN1dGUgZ291dCwgYW5kIGluZXhwZXJpZW5jZWQgaW4gdGhlIGNvbmR1Y3Qgb2YgYWZmYWlycywgdGhleSBtYWRlIG5vIGFjY291bnQgd2hhdGV2ZXIuIEFuZCBvbmNlIGF0IGEgc3BlY3RhY2xlLCB3aGVuIHRoZSBtaWxpdGFyeSB0cmlidW5lcyBhbmQgY2VudHVyaW9ucywgYWZ0ZXIgdGhlIFJvbWFuIGN1c3RvbSwgaW52b2tlZCBoZWFsdGggYW5kIGhhcHBpbmVzcyB1cG9uIHRoZSBlbXBlcm9yIEdhbGJhLCB0aGUgbWFzcyBvZiB0aGUgc29sZGllcnkgcmFpc2VkIGEgc3Rvcm0gb2YgZGlzc2VudCBhdCBmaXJzdCwgYW5kIHRoZW4sIHdoZW4gdGhlIG9mZmljZXJzIHBlcnNpc3RlZCBpbiB0aGVpciBpbnZvY2F0aW9uLCBjcmllZCBvdXQgaW4gcmVzcG9uc2UsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JZiBoZSBkZXNlcnZlcyBpdC48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsZWdpb25zIGFsc28gdGhhdCB3ZXJlIHVuZGVyIHRoZSBjb21tYW5kIG9mIFRpZ2VsbGludXMgZnJlcXVlbnRseSBiZWhhdmVkIHdpdGggc2ltaWxhciBpbnNvbGVuY2UsIGFuZCBsZXR0ZXJzIG9uIHRoZSBzdWJqZWN0IHdlcmUgc2VudCB0byBHYWxiYSBieSBoaXMgYWdlbnRzLiBTbyB0aGUgZW1wZXJvciwgZmVhcmluZyB0aGF0IGl0IHdhcyBub3Qgb25seSBoaXMgb2xkIGFnZSBidXQgYWxzbyBoaXMgY2hpbGRsZXNzbmVzcyB0aGF0IGJyb3VnaHQgaGltIGludG8gY29udGVtcHQsIHBsYW5uZWQgdG8gYWRvcHQgc29tZSB5b3VuZyBtYW4gb2YgaWxsdXN0cmlvdXMgZmFtaWx5IGFuZCBhcHBvaW50IGhpbSBoaXMgc3VjY2Vzc29yLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5NYXJjdXMgT3Robywgbm93LCB3YXMgYSBtYW4gb2YgZ29vZCBsaW5lYWdlLCBidXQgZnJvbSBoaXMgdmVyeSBjaGlsZGhvb2QgY29ycnVwdGVkIGJ5IGx1eHVyeSBhbmQgdGhlIHB1cnN1aXQgb2YgcGxlYXN1cmUgYXMgZmV3IFJvbWFucyB3ZXJlLiBBbmQgYXMgSG9tZXIgb2Z0ZW4gY2FsbHMgUGFyaXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgaHVzYmFuZCBvZiBmYWlyLWhhaXJlZCBIZWxlbiw8L3E+IGdpdmluZyBoaW0gYSBkaWduaXR5IGJvcnJvd2VkIGZyb20gaGlzIHdpZmUsIHNpbmNlIGhlIGhhZCBubyBvdGhlciB0aXRsZSB0byBmYW1lLCBzbyBPdGhvIHdhcyBjZWxlYnJhdGVkIGF0IFJvbWUgZm9yIGhpcyBtYXJyaWFnZSB3aXRoIFBvcHBhZWEuIFdpdGggUG9wcGFlYSBOZXJvIHdhcyBlbmFtb3VyZWQgd2hpbGUgc2hlIHdhcyB0aGUgd2lmZSBvZiBDcmlzcGludXMsIGJ1dCBzaW5jZSBoZSByZXNwZWN0ZWQgaGlzIG93biB3aWZlIHN0aWxsIGFuZCBmZWFyZWQgaGlzIG1vdGhlciwgaGUgcHV0IE90aG8gdXAgdG8gc29saWNpdGluZyBoZXIgZmF2b3VycyBmb3IgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYmVjYXVzZSBvZiBPdGhvJ3MgbGF2aXNoIHByb2RpZ2FsaXR5IE5lcm8gbWFkZSBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgaGltLCBhbmQgd2FzIHdlbGwgcGxlYXNlZCB0byBiZSByYWxsaWVkIGJ5IGhpbSBvZnRlbiBmb3IgcGFyc2ltb255IGFuZCBtZWFubmVzcy4gVGh1cywgd2UgYXJlIHRvbGQgdGhhdCBOZXJvIG9uY2UgYW5vaW50ZWQgaGltc2VsZiB3aXRoIGEgY29zdGx5IG9pbnRtZW50IGFuZCBzcHJpbmtsZWQgYSBsaXR0bGUgb2YgaXQgdXBvbiBPdGhvOyB3aGVyZXVwb24gT3RobywgZW50ZXJ0YWluaW5nIHRoZSBlbXBlcm9yIGluIGhpcyB0dXJuIG9uIHRoZSBmb2xsb3dpbmcgZGF5LCBzdWRkZW5seSBicm91Z2h0IGludG8gcGxheSBnb2xkIGFuZCBzaWx2ZXIgcGlwZXMgb24gYWxsIHNpZGVzIG9mIHRoZSByb29tLCBvdXQgb2Ygd2hpY2ggdGhlIG9pbnRtZW50IGd1c2hlZCBmcmVlbHksIGxpa2Ugc28gbXVjaCB3YXRlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGZvciBQb3BwYWVhLCBPdGhvIGNvcnJ1cHRlZCBoZXIgd2l0aCBob3BlcyBvZiBOZXJvJ3MgZmF2b3VyIGFuZCBzZWR1Y2VkIGhlciBmaXJzdCBoaW1zZWxmLCBhbmQgcGVyc3VhZGVkIGhlciB0byBsZWF2ZSBoZXIgaHVzYmFuZC4gSG93ZXZlciwgYWZ0ZXIgc2hlIGhhZCBjb21lIHRvIGxpdmUgd2l0aCBoaW0gYXMgaGlzIHdpZmUsIGhlIHdhcyBub3QgY29udGVudCB0byBoYXZlIG9ubHkgYSBzaGFyZSBpbiBoZXIgZmF2b3VycywgYW5kIHdhcyBsb3RoIHRvIGdpdmUgTmVybyBhIHNoYXJlLCB3aGlsZSBQb3BwYWVhIGhlcnNlbGYsIGFzIHdlIGFyZSB0b2xkLCB3YXMgbm90IGRpc3BsZWFzZWQgYXQgdGhlIHJpdmFscnkgYmV0d2VlbiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgc2FpZCB0aGF0IHNoZSB3b3VsZCBzaHV0IG91dCBOZXJvIGFsdGhvdWdoIE90aG8gd2FzIG5vdCBhdCBob21lOyB3aGV0aGVyIGl0IHdhcyB0aGF0IHNoZSBzb3VnaHQgdG8ga2VlcCBoaXMgcGxlYXN1cmUgaW4gaGVyIGZyb20gY2xveWluZywgb3Igd2hldGhlciwgYXMgc29tZSBzYXksIHNoZSByZWNvaWxlZCBmcm9tIGEgbWFycmlhZ2Ugd2l0aCB0aGUgZW1wZXJvciwgYnV0IHdhcyBub3QgYXZlcnNlIHRvIGhhdmluZyBoaW0gYXMgYSBsb3Zlciwgb3V0IG9mIG1lcmUgd2FudG9ubmVzcy4gT3RobywgYWNjb3JkaW5nbHksIGNhbWUgaW50byBwZXJpbCBvZiBoaXMgbGlmZTsgYW5kIGl0IHdhcyBzdHJhbmdlIHRoYXQgYWx0aG91Z2ggaGlzIG93biB3aWZlIGFuZCBzaXN0ZXIgd2VyZSBwdXQgdG8gZGVhdGggYnkgTmVybyBvbiBhY2NvdW50IG9mIGhpcyBtYXJyaWFnZSB3aXRoIFBvcHBhZWEsIE90aG8gaGltc2VsZiB3YXMgc3BhcmVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyI+VGFjaXR1cywgPHRpdGxlPkFubmFsczwvdGl0bGU+LCB4aWlpLiA0NSBmLiA8L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGxlZ2lvbnMgYWxzbyB0aGF0IHdlcmUgdW5kZXIgdGhlIGNvbW1hbmQgb2YgVGlnZWxsaW51cyBmcmVxdWVudGx5IGJlaGF2ZWQgd2l0aCBzaW1pbGFyIGluc29sZW5jZSwgYW5kIGxldHRlcnMgb24gdGhlIHN1YmplY3Qgd2VyZSBzZW50IHRvIEdhbGJhIGJ5IGhpcyBhZ2VudHMuIFNvIHRoZSBlbXBlcm9yLCBmZWFyaW5nIHRoYXQgaXQgd2FzIG5vdCBvbmx5IGhpcyBvbGQgYWdlIGJ1dCBhbHNvIGhpcyBjaGlsZGxlc3NuZXNzIHRoYXQgYnJvdWdodCBoaW0gaW50byBjb250ZW1wdCwgcGxhbm5lZCB0byBhZG9wdCBzb21lIHlvdW5nIG1hbiBvZiBpbGx1c3RyaW91cyBmYW1pbHkgYW5kIGFwcG9pbnQgaGltIGhpcyBzdWNjZXNzb3IuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1hcmN1cyBPdGhvLCBub3csIHdhcyBhIG1hbiBvZiBnb29kIGxpbmVhZ2UsIGJ1dCBmcm9tIGhpcyB2ZXJ5IGNoaWxkaG9vZCBjb3JydXB0ZWQgYnkgbHV4dXJ5IGFuZCB0aGUgcHVyc3VpdCBvZiBwbGVhc3VyZSBhcyBmZXcgUm9tYW5zIHdlcmUuIEFuZCBhcyBIb21lciBvZnRlbiBjYWxscyBQYXJpcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlIGh1c2JhbmQgb2YgZmFpci1oYWlyZWQgSGVsZW4sPC9xPiBnaXZpbmcgaGltIGEgZGlnbml0eSBib3Jyb3dlZCBmcm9tIGhpcyB3aWZlLCBzaW5jZSBoZSBoYWQgbm8gb3RoZXIgdGl0bGUgdG8gZmFtZSwgc28gT3RobyB3YXMgY2VsZWJyYXRlZCBhdCBSb21lIGZvciBoaXMgbWFycmlhZ2Ugd2l0aCBQb3BwYWVhLiBXaXRoIFBvcHBhZWEgTmVybyB3YXMgZW5hbW91cmVkIHdoaWxlIHNoZSB3YXMgdGhlIHdpZmUgb2YgQ3Jpc3BpbnVzLCBidXQgc2luY2UgaGUgcmVzcGVjdGVkIGhpcyBvd24gd2lmZSBzdGlsbCBhbmQgZmVhcmVkIGhpcyBtb3RoZXIsIGhlIHB1dCBPdGhvIHVwIHRvIHNvbGljaXRpbmcgaGVyIGZhdm91cnMgZm9yIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBiZWNhdXNlIG9mIE90aG8ncyBsYXZpc2ggcHJvZGlnYWxpdHkgTmVybyBtYWRlIGFuIGludGltYXRlIGZyaWVuZCBvZiBoaW0sIGFuZCB3YXMgd2VsbCBwbGVhc2VkIHRvIGJlIHJhbGxpZWQgYnkgaGltIG9mdGVuIGZvciBwYXJzaW1vbnkgYW5kIG1lYW5uZXNzLiBUaHVzLCB3ZSBhcmUgdG9sZCB0aGF0IE5lcm8gb25jZSBhbm9pbnRlZCBoaW1zZWxmIHdpdGggYSBjb3N0bHkgb2ludG1lbnQgYW5kIHNwcmlua2xlZCBhIGxpdHRsZSBvZiBpdCB1cG9uIE90aG87IHdoZXJldXBvbiBPdGhvLCBlbnRlcnRhaW5pbmcgdGhlIGVtcGVyb3IgaW4gaGlzIHR1cm4gb24gdGhlIGZvbGxvd2luZyBkYXksIHN1ZGRlbmx5IGJyb3VnaHQgaW50byBwbGF5IGdvbGQgYW5kIHNpbHZlciBwaXBlcyBvbiBhbGwgc2lkZXMgb2YgdGhlIHJvb20sIG91dCBvZiB3aGljaCB0aGUgb2ludG1lbnQgZ3VzaGVkIGZyZWVseSwgbGlrZSBzbyBtdWNoIHdhdGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgUG9wcGFlYSwgT3RobyBjb3JydXB0ZWQgaGVyIHdpdGggaG9wZXMgb2YgTmVybydzIGZhdm91ciBhbmQgc2VkdWNlZCBoZXIgZmlyc3QgaGltc2VsZiwgYW5kIHBlcnN1YWRlZCBoZXIgdG8gbGVhdmUgaGVyIGh1c2JhbmQuIEhvd2V2ZXIsIGFmdGVyIHNoZSBoYWQgY29tZSB0byBsaXZlIHdpdGggaGltIGFzIGhpcyB3aWZlLCBoZSB3YXMgbm90IGNvbnRlbnQgdG8gaGF2ZSBvbmx5IGEgc2hhcmUgaW4gaGVyIGZhdm91cnMsIGFuZCB3YXMgbG90aCB0byBnaXZlIE5lcm8gYSBzaGFyZSwgd2hpbGUgUG9wcGFlYSBoZXJzZWxmLCBhcyB3ZSBhcmUgdG9sZCwgd2FzIG5vdCBkaXNwbGVhc2VkIGF0IHRoZSByaXZhbHJ5IGJldHdlZW4gdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyBzYWlkIHRoYXQgc2hlIHdvdWxkIHNodXQgb3V0IE5lcm8gYWx0aG91Z2ggT3RobyB3YXMgbm90IGF0IGhvbWU7IHdoZXRoZXIgaXQgd2FzIHRoYXQgc2hlIHNvdWdodCB0byBrZWVwIGhpcyBwbGVhc3VyZSBpbiBoZXIgZnJvbSBjbG95aW5nLCBvciB3aGV0aGVyLCBhcyBzb21lIHNheSwgc2hlIHJlY29pbGVkIGZyb20gYSBtYXJyaWFnZSB3aXRoIHRoZSBlbXBlcm9yLCBidXQgd2FzIG5vdCBhdmVyc2UgdG8gaGF2aW5nIGhpbSBhcyBhIGxvdmVyLCBvdXQgb2YgbWVyZSB3YW50b25uZXNzLiBPdGhvLCBhY2NvcmRpbmdseSwgY2FtZSBpbnRvIHBlcmlsIG9mIGhpcyBsaWZlOyBhbmQgaXQgd2FzIHN0cmFuZ2UgdGhhdCBhbHRob3VnaCBoaXMgb3duIHdpZmUgYW5kIHNpc3RlciB3ZXJlIHB1dCB0byBkZWF0aCBieSBOZXJvIG9uIGFjY291bnQgb2YgaGlzIG1hcnJpYWdlIHdpdGggUG9wcGFlYSwgT3RobyBoaW1zZWxmIHdhcyBzcGFyZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+VGFjaXR1cywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5uYWxzPC90aXRsZT4sIHhpaWkuIDQ1IGYuIDwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5UYWNpdHVzLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm5hbHM8L3RpdGxlPiwgeGlpaS4gNDUgZi4gPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm5hbHM8L3RpdGxlPiwgeGlpaS4gNDUgZi4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE90aG8gaGFkIHRoZSBnb29kIHdpbGwgb2YgU2VuZWNhLCBieSB3aG9zZSBhZHZpY2UgYW5kIHBlcnN1YXNpb24gTmVybyBzZW50IGhpbSBvdXQgYXMgZ292ZXJub3Igb2YgTHVzaXRhbmlhIHRvIHRoZSBzaG9yZXMgb2YgdGhlIHdlc3Rlcm4gb2NlYW4uIEhlcmUgaGUgbWFkZSBoaW1zZWxmIGFjY2VwdGFibGUgYW5kIHBsZWFzaW5nIHRvIGhpcyBzdWJqZWN0cywgYWx0aG91Z2ggaGUga25ldyB0aGF0IGhpcyBvZmZpY2UgaGFkIGJlZW4gZ2l2ZW4gaGltIHRvIGRpc2d1aXNlIGFuZCBtaXRpZ2F0ZSBoaXMgYmFuaXNobWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBHYWxiYSByZXZvbHRlZCwgT3RobyB3YXMgdGhlIGZpcnN0IG9mIHRoZSBwcm92aW5jaWFsIGdvdmVybm9ycyB0byBnbyBvdmVyIHRvIGhpbSwgYW5kIGJyaW5naW5nIGFsbCB0aGUgZ29sZCBhbmQgc2lsdmVyIHRoYXQgaGUgaGFkIGluIHRoZSBzaGFwZSBvZiBkcmlua2luZy1jdXBzIGFuZCB0YWJsZXMsIGhlIGdhdmUgaXQgdG8gaGltIGZvciBjb252ZXJzaW9uIGludG8gY29pbiwgcHJlc2VudGluZyBoaW0gYWxzbyB3aXRoIHRob3NlIG9mIGhpcyBzZXJ2YW50cyB3aG8gd2VyZSBxdWFsaWZpZWQgdG8gZ2l2ZSBzdWl0YWJsZSBzZXJ2aWNlIGZvciB0aGUgdGFibGUgb2YgYW4gZW1wZXJvci4gSW4gb3RoZXIgd2F5cyBoZSB3YXMgdHJ1c3RlZCBieSBHYWxiYSwgYW5kIHdoZW4gcHV0IHRvIHRoZSB0ZXN0IHdhcyB0aG91Z2h0IHRvIGJlIGluZmVyaW9yIHRvIG5vbmUgYXMgYSBtYW4gb2YgYWZmYWlyczsgYW5kIGR1cmluZyB0aGUgZW50aXJlIGpvdXJuZXkgb2YgdGhlIGVtcGVyb3IgaGUgd291bGQgdHJhdmVsIGluIHRoZSBzYW1lIGNhcnJpYWdlIHdpdGggaGltIGZvciBtYW55IGRheXMgdG9nZXRoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhbWlkIHRoZSBpbnRpbWFjaWVzIG9mIHRoZSBjb21tb24gam91cm5leSBoZSBwYWlkIGNvdXJ0IHRvIFZpbml1cywgYm90aCBpbiBwZXJzb24gYW5kIGJ5IG1lYW5zIG9mIGdpZnRzLCBhbmQsIGFib3ZlIGFsbCBlbHNlLCBieSB5aWVsZGluZyB0byBoaW0gdGhlIGZpcnN0IHBsYWNlLCBoZSBnb3QgaGlzIGFpZCBpbiBob2xkaW5nIHNlY3VyZWx5IHRoZSBwbGFjZSBvZiBpbmZsdWVuY2UgbmV4dCB0byBoaW0uIEJ1dCBpbiBhdm9pZGluZyBlbnZ5IGhlIHdhcyBzdXBlcmlvciB0byBWaW5pdXMsIGZvciBoZSBnYXZlIGhpcyBwZXRpdGlvbmVycyBldmVyeSBhaWQgd2l0aG91dCBhbnkgcmV3YXJkLCBhbmQgc2hvd2VkIGhpbXNlbGYgZWFzeSBvZiBhY2Nlc3MgYW5kIGtpbmRseSB0byBhbGwgbWVuLiBCdXQgaXQgd2FzIHRoZSBzb2xkaWVycyB3aG9tIGhlIHdhcyBtb3N0IHJlYWR5IHRvIGhlbHAsIGFuZCBoZSBhZHZhbmNlZCBtYW55IG9mIHRoZW0gdG8gcGxhY2VzIG9mIGNvbW1hbmQsIHNvbWV0aW1lcyBhc2tpbmcgdGhlIGFwcG9pbnRtZW50IGZyb20gdGhlIGVtcGVyb3IsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBzb21ldGltZXMgZ2V0dGluZyB0aGUgc3VwcG9ydCBvZiBWaW5pdXMsIGFuZCBvZiB0aGUgZnJlZWRtZW4gSWNlbHVzIGFuZCBBc2lhdGljdXM7IGZvciB0aGVzZSB3ZXJlIHRoZSBtb3N0IGluZmx1ZW50aWFsIG1lbiBhdCBjb3VydC4gQW5kIGFzIG9mdGVuIGFzIGhlIGVudGVydGFpbmVkIEdhbGJhLCBoZSB3b3VsZCBjb21wbGltZW50IHRoZSBjb2hvcnQgb24gZHV0eSBmb3IgdGhlIGRheSBieSBnaXZpbmcgZWFjaCBtYW4gYSBnb2xkIHBpZWNlLCB0aHVzIHNob3dpbmcgaG9ub3VyIHRvIHRoZSBlbXBlcm9yLCBhcyBpdCB3YXMgdGhvdWdodCwgd2hpbGUgcmVhbGx5IHNjaGVtaW5nIGZvciB0aGUgc3VwcG9ydCBhbmQgZmF2b3VyIG9mIHRoZSBzb2xkaWVyeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE90aG8gaGFkIHRoZSBnb29kIHdpbGwgb2YgU2VuZWNhLCBieSB3aG9zZSBhZHZpY2UgYW5kIHBlcnN1YXNpb24gTmVybyBzZW50IGhpbSBvdXQgYXMgZ292ZXJub3Igb2YgTHVzaXRhbmlhIHRvIHRoZSBzaG9yZXMgb2YgdGhlIHdlc3Rlcm4gb2NlYW4uIEhlcmUgaGUgbWFkZSBoaW1zZWxmIGFjY2VwdGFibGUgYW5kIHBsZWFzaW5nIHRvIGhpcyBzdWJqZWN0cywgYWx0aG91Z2ggaGUga25ldyB0aGF0IGhpcyBvZmZpY2UgaGFkIGJlZW4gZ2l2ZW4gaGltIHRvIGRpc2d1aXNlIGFuZCBtaXRpZ2F0ZSBoaXMgYmFuaXNobWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gR2FsYmEgcmV2b2x0ZWQsIE90aG8gd2FzIHRoZSBmaXJzdCBvZiB0aGUgcHJvdmluY2lhbCBnb3Zlcm5vcnMgdG8gZ28gb3ZlciB0byBoaW0sIGFuZCBicmluZ2luZyBhbGwgdGhlIGdvbGQgYW5kIHNpbHZlciB0aGF0IGhlIGhhZCBpbiB0aGUgc2hhcGUgb2YgZHJpbmtpbmctY3VwcyBhbmQgdGFibGVzLCBoZSBnYXZlIGl0IHRvIGhpbSBmb3IgY29udmVyc2lvbiBpbnRvIGNvaW4sIHByZXNlbnRpbmcgaGltIGFsc28gd2l0aCB0aG9zZSBvZiBoaXMgc2VydmFudHMgd2hvIHdlcmUgcXVhbGlmaWVkIHRvIGdpdmUgc3VpdGFibGUgc2VydmljZSBmb3IgdGhlIHRhYmxlIG9mIGFuIGVtcGVyb3IuIEluIG90aGVyIHdheXMgaGUgd2FzIHRydXN0ZWQgYnkgR2FsYmEsIGFuZCB3aGVuIHB1dCB0byB0aGUgdGVzdCB3YXMgdGhvdWdodCB0byBiZSBpbmZlcmlvciB0byBub25lIGFzIGEgbWFuIG9mIGFmZmFpcnM7IGFuZCBkdXJpbmcgdGhlIGVudGlyZSBqb3VybmV5IG9mIHRoZSBlbXBlcm9yIGhlIHdvdWxkIHRyYXZlbCBpbiB0aGUgc2FtZSBjYXJyaWFnZSB3aXRoIGhpbSBmb3IgbWFueSBkYXlzIHRvZ2V0aGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhbWlkIHRoZSBpbnRpbWFjaWVzIG9mIHRoZSBjb21tb24gam91cm5leSBoZSBwYWlkIGNvdXJ0IHRvIFZpbml1cywgYm90aCBpbiBwZXJzb24gYW5kIGJ5IG1lYW5zIG9mIGdpZnRzLCBhbmQsIGFib3ZlIGFsbCBlbHNlLCBieSB5aWVsZGluZyB0byBoaW0gdGhlIGZpcnN0IHBsYWNlLCBoZSBnb3QgaGlzIGFpZCBpbiBob2xkaW5nIHNlY3VyZWx5IHRoZSBwbGFjZSBvZiBpbmZsdWVuY2UgbmV4dCB0byBoaW0uIEJ1dCBpbiBhdm9pZGluZyBlbnZ5IGhlIHdhcyBzdXBlcmlvciB0byBWaW5pdXMsIGZvciBoZSBnYXZlIGhpcyBwZXRpdGlvbmVycyBldmVyeSBhaWQgd2l0aG91dCBhbnkgcmV3YXJkLCBhbmQgc2hvd2VkIGhpbXNlbGYgZWFzeSBvZiBhY2Nlc3MgYW5kIGtpbmRseSB0byBhbGwgbWVuLiBCdXQgaXQgd2FzIHRoZSBzb2xkaWVycyB3aG9tIGhlIHdhcyBtb3N0IHJlYWR5IHRvIGhlbHAsIGFuZCBoZSBhZHZhbmNlZCBtYW55IG9mIHRoZW0gdG8gcGxhY2VzIG9mIGNvbW1hbmQsIHNvbWV0aW1lcyBhc2tpbmcgdGhlIGFwcG9pbnRtZW50IGZyb20gdGhlIGVtcGVyb3IsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBzb21ldGltZXMgZ2V0dGluZyB0aGUgc3VwcG9ydCBvZiBWaW5pdXMsIGFuZCBvZiB0aGUgZnJlZWRtZW4gSWNlbHVzIGFuZCBBc2lhdGljdXM7IGZvciB0aGVzZSB3ZXJlIHRoZSBtb3N0IGluZmx1ZW50aWFsIG1lbiBhdCBjb3VydC4gQW5kIGFzIG9mdGVuIGFzIGhlIGVudGVydGFpbmVkIEdhbGJhLCBoZSB3b3VsZCBjb21wbGltZW50IHRoZSBjb2hvcnQgb24gZHV0eSBmb3IgdGhlIGRheSBieSBnaXZpbmcgZWFjaCBtYW4gYSBnb2xkIHBpZWNlLCB0aHVzIHNob3dpbmcgaG9ub3VyIHRvIHRoZSBlbXBlcm9yLCBhcyBpdCB3YXMgdGhvdWdodCwgd2hpbGUgcmVhbGx5IHNjaGVtaW5nIGZvciB0aGUgc3VwcG9ydCBhbmQgZmF2b3VyIG9mIHRoZSBzb2xkaWVyeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHRoZW4sIHdoaWxlIEdhbGJhIHdhcyBkZWxpYmVyYXRpbmcgdXBvbiBhIHN1Y2Nlc3NvciwgVmluaXVzIHN1Z2dlc3RlZCBPdGhvLiBBbmQgeWV0IG5vdCBldmVuIHRoaXMgd2FzIGRvbmUgZm9yIG5vdGhpbmcsIGJ1dCBhcyBhIHJldHVybiBmb3IgdGhlIG1hcnJpYWdlIG9mIGhpcyBkYXVnaHRlci4gRm9yIGl0IGhhZCBiZWVuIGFncmVlZCB0aGF0IE90aG8gc2hvdWxkIG1hcnJ5IGhlciB3aGVuIGhlIGhhZCBiZWVuIGFkb3B0ZWQgYnkgR2FsYmEgYW5kIGRlY2xhcmVkIGhpcyBzdWNjZXNzb3IuIEJ1dCBHYWxiYSBhbHdheXMgc2hvd2VkIGNsZWFybHkgdGhhdCBoZSBwbGFjZWQgdGhlIHB1YmxpYyBnb29kIGJlZm9yZSBoaXMgcHJpdmF0ZSBpbnRlcmVzdHMsIGFuZCBpbiB0aGUgcHJlc2VudCBjYXNlIHRoYXQgaGUgYWltZWQgdG8gYWRvcHQsIG5vdCB0aGUgbWFuIHdobyB3YXMgbW9zdCBhZ3JlZWFibGUgdG8gaGltc2VsZiwgYnV0IHRoZSBvbmUgd2hvIHdvdWxkIGJlIG1vc3Qgc2VydmljZWFibGUgdG8gdGhlIFJvbWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGRvZXMgbm90IHNlZW0gdGhhdCBoZSB3b3VsZCBoYXZlIGNob3NlbiBPdGhvIG1lcmVseSBhcyB0aGUgaGVpciBvZiBoaXMgb3duIHByaXZhdGUgZm9ydHVuZSwgc2luY2UgaGUga25ldyB0aGF0IGhlIHdhcyB1bnJlc3RyYWluZWQgYW5kIGV4dHJhdmFnYW50IGFuZCBpbW1lcnNlZCBpbiBkZWJ0cyBhbW91bnRpbmcgdG8gZml2ZSBtaWxsaW9ucy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIG5vdGUgb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEdhbGIuIDIuMiIgdmFsaWQ9InllcyI+Q2hhcC4gaWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFdoZXJlZm9yZSwgYWZ0ZXIgbGlzdGVuaW5nIHRvIFZpbml1cyBjYWxtbHkgYW5kIHdpdGhvdXQgYSB3b3JkLCBoZSBwb3N0cG9uZWQgaGlzIGRlY2lzaW9uLiBCdXQgaGUgYXBwb2ludGVkIGhpbXNlbGYgYW5kIFZpbml1cyBjb25zdWxzIGZvciB0aGUgZm9sbG93aW5nIHllYXIsIGFuZCBpdCB3YXMgZXhwZWN0ZWQgdGhhdCBvbiB0aGVpciBhY2Nlc3Npb24gdG8gb2ZmaWNlIGhlIHdvdWxkIGRlY2xhcmUgaGlzIHN1Y2Nlc3Nvci4gQW5kIHRoZSBzb2xkaWVyeSB3b3VsZCBoYXZlIGJlZW4gZ2xhZCB0aGF0IE90aG8sIHJhdGhlciB0aGFuIGFueW9uZSBlbHNlLCBzaG91bGQgYmUgc28gZGVjbGFyZWQuICAKCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHRoZW4sIHdoaWxlIEdhbGJhIHdhcyBkZWxpYmVyYXRpbmcgdXBvbiBhIHN1Y2Nlc3NvciwgVmluaXVzIHN1Z2dlc3RlZCBPdGhvLiBBbmQgeWV0IG5vdCBldmVuIHRoaXMgd2FzIGRvbmUgZm9yIG5vdGhpbmcsIGJ1dCBhcyBhIHJldHVybiBmb3IgdGhlIG1hcnJpYWdlIG9mIGhpcyBkYXVnaHRlci4gRm9yIGl0IGhhZCBiZWVuIGFncmVlZCB0aGF0IE90aG8gc2hvdWxkIG1hcnJ5IGhlciB3aGVuIGhlIGhhZCBiZWVuIGFkb3B0ZWQgYnkgR2FsYmEgYW5kIGRlY2xhcmVkIGhpcyBzdWNjZXNzb3IuIEJ1dCBHYWxiYSBhbHdheXMgc2hvd2VkIGNsZWFybHkgdGhhdCBoZSBwbGFjZWQgdGhlIHB1YmxpYyBnb29kIGJlZm9yZSBoaXMgcHJpdmF0ZSBpbnRlcmVzdHMsIGFuZCBpbiB0aGUgcHJlc2VudCBjYXNlIHRoYXQgaGUgYWltZWQgdG8gYWRvcHQsIG5vdCB0aGUgbWFuIHdobyB3YXMgbW9zdCBhZ3JlZWFibGUgdG8gaGltc2VsZiwgYnV0IHRoZSBvbmUgd2hvIHdvdWxkIGJlIG1vc3Qgc2VydmljZWFibGUgdG8gdGhlIFJvbWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBkb2VzIG5vdCBzZWVtIHRoYXQgaGUgd291bGQgaGF2ZSBjaG9zZW4gT3RobyBtZXJlbHkgYXMgdGhlIGhlaXIgb2YgaGlzIG93biBwcml2YXRlIGZvcnR1bmUsIHNpbmNlIGhlIGtuZXcgdGhhdCBoZSB3YXMgdW5yZXN0cmFpbmVkIGFuZCBleHRyYXZhZ2FudCBhbmQgaW1tZXJzZWQgaW4gZGVidHMgYW1vdW50aW5nIHRvIGZpdmUgbWlsbGlvbnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIG5vdGUgb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gR2FsYi4gMi4yIiB2YWxpZD0ieWVzIj5DaGFwLiBpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gV2hlcmVmb3JlLCBhZnRlciBsaXN0ZW5pbmcgdG8gVmluaXVzIGNhbG1seSBhbmQgd2l0aG91dCBhIHdvcmQsIGhlIHBvc3Rwb25lZCBoaXMgZGVjaXNpb24uIEJ1dCBoZSBhcHBvaW50ZWQgaGltc2VsZiBhbmQgVmluaXVzIGNvbnN1bHMgZm9yIHRoZSBmb2xsb3dpbmcgeWVhciwgYW5kIGl0IHdhcyBleHBlY3RlZCB0aGF0IG9uIHRoZWlyIGFjY2Vzc2lvbiB0byBvZmZpY2UgaGUgd291bGQgZGVjbGFyZSBoaXMgc3VjY2Vzc29yLiBBbmQgdGhlIHNvbGRpZXJ5IHdvdWxkIGhhdmUgYmVlbiBnbGFkIHRoYXQgT3RobywgcmF0aGVyIHRoYW4gYW55b25lIGVsc2UsIHNob3VsZCBiZSBzbyBkZWNsYXJlZC4gIAoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBHYWxiLiAyLjIiIHZhbGlkPSJ5ZXMiPkNoYXAuIGlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoaWxlIHRoZSBlbXBlcm9yIHdhcyBoZXNpdGF0aW5nIGFuZCBkZWxpYmVyYXRpbmcsIGhlIHdhcyBvdmVydGFrZW4gYnkgdGhlIGRpc29yZGVycyB3aGljaCBicm9rZSBvdXQgYW1vbmcgdGhlIHRyb29wcyBpbiBHZXJtYW55LiBGb3IgdGhlIHNvbGRpZXJzIGluIGFsbCBwYXJ0cyBvZiB0aGUgZW1waXJlIGhhZCBhIGNvbW1vbiBoYXRyZWQgb2YgR2FsYmEgYmVjYXVzZSBoZSBoYWQgbm90IGdpdmVuIHRoZW0gdGhlaXIgdXN1YWwgbGFyZ2VzcywgYnV0IHRob3NlIGluIEdlcm1hbnkgbWFkZSBzcGVjaWFsIGV4Y3VzZXMgZm9yIHRoZW1zZWx2ZXMgb3V0IG9mIHRoZSBmYWN0IHRoYXQgVmVyZ2luaXVzIFJ1ZnVzIGhhZCBiZWVuIGNhc3Qgb2ZmIGluIGRpc2hvbm91cjsgdGhhdCB0aGUgR2F1bHMgd2hvIGhhZCBmb3VnaHQgYWdhaW5zdCB0aGVtIHdlcmUgZ2V0dGluZyByZXdhcmRzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz53aGlsZSBhbGwgdGhvc2Ugd2hvIGhhZCBub3Qgam9pbmVkIFZpbmRleCB3ZXJlIGJlaW5nIHB1bmlzaGVkOyBhbmQgdGhhdCB0byBWaW5kZXggYWxvbmUgR2FsYmEgc2hvd2VkIGdyYXRpdHVkZSBieSBob25vdXJpbmcgaGltIHdoZW4gaGUgd2FzIGRlYWQgYW5kIGdpdmluZyBoaW0gdGhlIGRpc3RpbmN0aW9uIG9mIHB1YmxpYyBvYnNlcXVpZXMsIG9uIHRoZSBncm91bmQgdGhhdCBWaW5kZXggaGFkIHByb2NsYWltZWQgaGltIGVtcGVyb3Igb2YgdGhlIFJvbWFucy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEdhbGIuIDQuMyIgdmFsaWQ9InllcyI+Q2hhcC4gaXYuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBhcmd1bWVudHMgYXMgdGhlc2Ugd2VyZSBhbHJlYWR5IGNpcmN1bGF0aW5nIG9wZW5seSBpbiB0aGUgY2FtcCwgd2hlbiB0aGUgZmlyc3QgZGF5IG9mIHRoZSBmaXJzdCBtb250aCBjYW1lLCB3aGljaCB0aGUgUm9tYW5zIGNhbGwgdGhlIENhbGVuZHMgb2YgSmFudWFyeS4gT24gdGhpcyBkYXkgRmxhY2N1cyBhc3NlbWJsZWQgdGhlIHNvbGRpZXJzIHRoYXQgdGhleSBtaWdodCB0YWtlIHRoZSBjdXN0b21hcnkgb2F0aCBvZiBhbGxlZ2lhbmNlIHRvIHRoZSBlbXBlcm9yOyBidXQgdGhleSBvdmVydHVybmVkIGFuZCBwdWxsZWQgZG93biBhbGwgdGhlIHN0YXR1ZXMgb2YgR2FsYmEgd2hpY2ggdGhleSBjb3VsZCBmaW5kLCBhbmQgYWZ0ZXIgc3dlYXJpbmcgYWxsZWdpYW5jZSB0byB0aGUgc2VuYXRlIGFuZCBwZW9wbGUgb2YgUm9tZSwgd2VudCB0byB0aGVpciBxdWFydGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGVpciBvZmZpY2VycyBiZWdhbiB0byBmZWFyIHRoYXQgdGhlaXIgbGF3bGVzcyBzcGlyaXQgbWlnaHQgaXNzdWUgaW4gcmV2b2x0LCBhbmQgb25lIG9mIHRoZW0gbWFkZSB0aGlzIHNwZWVjaDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGlzIHdyb25nIHdpdGggdXMsIG15IGZlbGxvdyBzb2xkaWVycz8gV2UgYXJlIG5laXRoZXIgc3VwcG9ydGluZyB0aGUgcHJlc2VudCBlbXBlcm9yIG5vciBzZXR0aW5nIHVwIGFub3RoZXIuIEl0IGlzIGFzIHRob3VnaCB3ZSB3ZXJlIGF2ZXJzZSwgbm90IHRvIEdhbGJhLCBidXQgdG8gYWxsIHJ1bGUgYW5kIG9iZWRpZW5jZS4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZsYWNjdXMgSG9yZGVvbml1cywgaW5kZWVkLCB3aG8gaXMgbm90aGluZyBidXQgYSBzaGFkb3cgYW5kIGltYWdlIG9mIEdhbGJhLCB3ZSBtdXN0IGlnbm9yZSwgYnV0IHRoZXJlIGlzIFZpdGVsbGl1cywgd2hvIGlzIG9ubHkgYSBkYXkncyBtYXJjaCBkaXN0YW50IGZyb20gdXMsIGFuZCBjb21tYW5kcyB0aGUgZm9yY2VzIGluIHRoZSBvdGhlciBHZXJtYW55LiBIaXMgZmF0aGVyIHdhcyBjZW5zb3IsIHRocmljZSBjb25zdWwsIGFuZCBpbiBhIG1hbm5lciB0aGUgY29sbGVhZ3VlIG9mIENsYXVkaXVzIENhZXNhciwgYW5kIFZpdGVsbGl1cyBoaW1zZWxmLCBpbiB0aGUgcG92ZXJ0eSB3aXRoIHdoaWNoIHNvbWUgcmVwcm9hY2ggaGltLCBhZmZvcmRzIGEgc3BsZW5kaWQgcHJvb2Ygb2YgcHJvYml0eSBhbmQgbWFnbmFuaW1pdHkuIENvbWUsIGxldCB1cyBjaG9vc2UgaGltLCBhbmQgc28gc2hvdyB0aGUgd29ybGQgdGhhdCB3ZSBrbm93IGhvdyB0byBzZWxlY3QgYW4gZW1wZXJvciBiZXR0ZXIgdGhhbiBJYmVyaWFucyBhbmQgTHVzaXRhbmlhbnMuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoaWxlIHRoZSBlbXBlcm9yIHdhcyBoZXNpdGF0aW5nIGFuZCBkZWxpYmVyYXRpbmcsIGhlIHdhcyBvdmVydGFrZW4gYnkgdGhlIGRpc29yZGVycyB3aGljaCBicm9rZSBvdXQgYW1vbmcgdGhlIHRyb29wcyBpbiBHZXJtYW55LiBGb3IgdGhlIHNvbGRpZXJzIGluIGFsbCBwYXJ0cyBvZiB0aGUgZW1waXJlIGhhZCBhIGNvbW1vbiBoYXRyZWQgb2YgR2FsYmEgYmVjYXVzZSBoZSBoYWQgbm90IGdpdmVuIHRoZW0gdGhlaXIgdXN1YWwgbGFyZ2VzcywgYnV0IHRob3NlIGluIEdlcm1hbnkgbWFkZSBzcGVjaWFsIGV4Y3VzZXMgZm9yIHRoZW1zZWx2ZXMgb3V0IG9mIHRoZSBmYWN0IHRoYXQgVmVyZ2luaXVzIFJ1ZnVzIGhhZCBiZWVuIGNhc3Qgb2ZmIGluIGRpc2hvbm91cjsgdGhhdCB0aGUgR2F1bHMgd2hvIGhhZCBmb3VnaHQgYWdhaW5zdCB0aGVtIHdlcmUgZ2V0dGluZyByZXdhcmRzLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIGFsbCB0aG9zZSB3aG8gaGFkIG5vdCBqb2luZWQgVmluZGV4IHdlcmUgYmVpbmcgcHVuaXNoZWQ7IGFuZCB0aGF0IHRvIFZpbmRleCBhbG9uZSBHYWxiYSBzaG93ZWQgZ3JhdGl0dWRlIGJ5IGhvbm91cmluZyBoaW0gd2hlbiBoZSB3YXMgZGVhZCBhbmQgZ2l2aW5nIGhpbSB0aGUgZGlzdGluY3Rpb24gb2YgcHVibGljIG9ic2VxdWllcywgb24gdGhlIGdyb3VuZCB0aGF0IFZpbmRleCBoYWQgcHJvY2xhaW1lZCBoaW0gZW1wZXJvciBvZiB0aGUgUm9tYW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEdhbGIuIDQuMyIgdmFsaWQ9InllcyI+Q2hhcC4gaXYuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBHYWxiLiA0LjMiIHZhbGlkPSJ5ZXMiPkNoYXAuIGl2LiAzLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggYXJndW1lbnRzIGFzIHRoZXNlIHdlcmUgYWxyZWFkeSBjaXJjdWxhdGluZyBvcGVubHkgaW4gdGhlIGNhbXAsIHdoZW4gdGhlIGZpcnN0IGRheSBvZiB0aGUgZmlyc3QgbW9udGggY2FtZSwgd2hpY2ggdGhlIFJvbWFucyBjYWxsIHRoZSBDYWxlbmRzIG9mIEphbnVhcnkuIE9uIHRoaXMgZGF5IEZsYWNjdXMgYXNzZW1ibGVkIHRoZSBzb2xkaWVycyB0aGF0IHRoZXkgbWlnaHQgdGFrZSB0aGUgY3VzdG9tYXJ5IG9hdGggb2YgYWxsZWdpYW5jZSB0byB0aGUgZW1wZXJvcjsgYnV0IHRoZXkgb3ZlcnR1cm5lZCBhbmQgcHVsbGVkIGRvd24gYWxsIHRoZSBzdGF0dWVzIG9mIEdhbGJhIHdoaWNoIHRoZXkgY291bGQgZmluZCwgYW5kIGFmdGVyIHN3ZWFyaW5nIGFsbGVnaWFuY2UgdG8gdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIFJvbWUsIHdlbnQgdG8gdGhlaXIgcXVhcnRlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlaXIgb2ZmaWNlcnMgYmVnYW4gdG8gZmVhciB0aGF0IHRoZWlyIGxhd2xlc3Mgc3Bpcml0IG1pZ2h0IGlzc3VlIGluIHJldm9sdCwgYW5kIG9uZSBvZiB0aGVtIG1hZGUgdGhpcyBzcGVlY2g6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGlzIHdyb25nIHdpdGggdXMsIG15IGZlbGxvdyBzb2xkaWVycz8gV2UgYXJlIG5laXRoZXIgc3VwcG9ydGluZyB0aGUgcHJlc2VudCBlbXBlcm9yIG5vciBzZXR0aW5nIHVwIGFub3RoZXIuIEl0IGlzIGFzIHRob3VnaCB3ZSB3ZXJlIGF2ZXJzZSwgbm90IHRvIEdhbGJhLCBidXQgdG8gYWxsIHJ1bGUgYW5kIG9iZWRpZW5jZS4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+RmxhY2N1cyBIb3JkZW9uaXVzLCBpbmRlZWQsIHdobyBpcyBub3RoaW5nIGJ1dCBhIHNoYWRvdyBhbmQgaW1hZ2Ugb2YgR2FsYmEsIHdlIG11c3QgaWdub3JlLCBidXQgdGhlcmUgaXMgVml0ZWxsaXVzLCB3aG8gaXMgb25seSBhIGRheSdzIG1hcmNoIGRpc3RhbnQgZnJvbSB1cywgYW5kIGNvbW1hbmRzIHRoZSBmb3JjZXMgaW4gdGhlIG90aGVyIEdlcm1hbnkuIEhpcyBmYXRoZXIgd2FzIGNlbnNvciwgdGhyaWNlIGNvbnN1bCwgYW5kIGluIGEgbWFubmVyIHRoZSBjb2xsZWFndWUgb2YgQ2xhdWRpdXMgQ2Flc2FyLCBhbmQgVml0ZWxsaXVzIGhpbXNlbGYsIGluIHRoZSBwb3ZlcnR5IHdpdGggd2hpY2ggc29tZSByZXByb2FjaCBoaW0sIGFmZm9yZHMgYSBzcGxlbmRpZCBwcm9vZiBvZiBwcm9iaXR5IGFuZCBtYWduYW5pbWl0eS4gQ29tZSwgbGV0IHVzIGNob29zZSBoaW0sIGFuZCBzbyBzaG93IHRoZSB3b3JsZCB0aGF0IHdlIGtub3cgaG93IHRvIHNlbGVjdCBhbiBlbXBlcm9yIGJldHRlciB0aGFuIEliZXJpYW5zIGFuZCBMdXNpdGFuaWFucy48L3E+CgkJCSAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZsYWNjdXMgSG9yZGVvbml1cywgaW5kZWVkLCB3aG8gaXMgbm90aGluZyBidXQgYSBzaGFkb3cgYW5kIGltYWdlIG9mIEdhbGJhLCB3ZSBtdXN0IGlnbm9yZSwgYnV0IHRoZXJlIGlzIFZpdGVsbGl1cywgd2hvIGlzIG9ubHkgYSBkYXkncyBtYXJjaCBkaXN0YW50IGZyb20gdXMsIGFuZCBjb21tYW5kcyB0aGUgZm9yY2VzIGluIHRoZSBvdGhlciBHZXJtYW55LiBIaXMgZmF0aGVyIHdhcyBjZW5zb3IsIHRocmljZSBjb25zdWwsIGFuZCBpbiBhIG1hbm5lciB0aGUgY29sbGVhZ3VlIG9mIENsYXVkaXVzIENhZXNhciwgYW5kIFZpdGVsbGl1cyBoaW1zZWxmLCBpbiB0aGUgcG92ZXJ0eSB3aXRoIHdoaWNoIHNvbWUgcmVwcm9hY2ggaGltLCBhZmZvcmRzIGEgc3BsZW5kaWQgcHJvb2Ygb2YgcHJvYml0eSBhbmQgbWFnbmFuaW1pdHkuIENvbWUsIGxldCB1cyBjaG9vc2UgaGltLCBhbmQgc28gc2hvdyB0aGUgd29ybGQgdGhhdCB3ZSBrbm93IGhvdyB0byBzZWxlY3QgYW4gZW1wZXJvciBiZXR0ZXIgdGhhbiBJYmVyaWFucyBhbmQgTHVzaXRhbmlhbnMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgc29tZSBvZiB0aGUgc29sZGllcnMgd2VyZSBhbHJlYWR5IGZvciBhZG9wdGluZyB0aGlzIHByb3Bvc2FsIGFuZCBvdGhlcnMgZm9yIHJlamVjdGluZyBpdCwgb25lIHN0YW5kYXJkLWJlYXJlciBzdG9sZSBhd2F5IGFuZCBicm91Z2h0IHRpZGluZ3Mgb2YgdGhlIG1hdHRlciBieSBuaWdodCB0byBWaXRlbGxpdXMsIGFzIGhlIHdhcyBlbnRlcnRhaW5pbmcgbWFueSBndWVzdHMuIFRoZSBuZXdzIHNwcmVhZCBzd2lmdGx5IHRvIHRoZSB0cm9vcHMsIGFuZCBmaXJzdCBGYWJpdXMgVmFsZW5zLCBjb21tYW5kZXIgb2YgYSBsZWdpb24sIHJvZGUgdXAgbmV4dCBkYXkgd2l0aCBhIGxhcmdlIGJvZHkgb2YgaG9yc2VtZW4gYW5kIHNhbHV0ZWQgVml0ZWxsaXVzIGFzIGVtcGVyb3IuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhpdGhlcnRvIFZpdGVsbGl1cyBoYWQgc2VlbWVkIHRvIGRlY2xpbmUgYW5kIGF2b2lkIHRoZSBvZmZpY2UsIGZlYXJpbmcgdGhlIG1hZ25pdHVkZSBvZiBpdDsgYnV0IG9uIHRoaXMgZGF5LCBhcyB0aGV5IHNheSwgYmVpbmcgZm9ydGlmaWVkIHdpdGggd2luZSBhbmQgYSBtaWRkYXkgbWVhbCwgaGUgY2FtZSBvdXQgdG8gdGhlIHNvbGRpZXJzIGFuZCBhY2NlcHRlZCB0aGUgdGl0bGUgb2YgR2VybWFuaWN1cyB3aGljaCB0aGV5IGNvbmZlcnJlZCB1cG9uIGhpbSwgdGhvdWdoIGhlIHJlamVjdGVkIHRoYXQgb2YgQ2Flc2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc3RyYWlnaHR3YXkgdGhlIGFybXkgd2l0aCBGbGFjY3VzIGFsc28sIGNhc3RpbmcgYXNpZGUgdGhvc2UgZmluZSBhbmQgZGVtb2NyYXRpYyBvYXRocyBvZiB0aGVpcnMgdG8gc3VwcG9ydCB0aGUgc2VuYXRlLCB0b29rIG9hdGggdGhhdCB0aGV5IHdvdWxkIG9iZXkgdGhlIG9yZGVycyBvZiBWaXRlbGxpdXMgdGhlIGVtcGVyb3IuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHNvbWUgb2YgdGhlIHNvbGRpZXJzIHdlcmUgYWxyZWFkeSBmb3IgYWRvcHRpbmcgdGhpcyBwcm9wb3NhbCBhbmQgb3RoZXJzIGZvciByZWplY3RpbmcgaXQsIG9uZSBzdGFuZGFyZC1iZWFyZXIgc3RvbGUgYXdheSBhbmQgYnJvdWdodCB0aWRpbmdzIG9mIHRoZSBtYXR0ZXIgYnkgbmlnaHQgdG8gVml0ZWxsaXVzLCBhcyBoZSB3YXMgZW50ZXJ0YWluaW5nIG1hbnkgZ3Vlc3RzLiBUaGUgbmV3cyBzcHJlYWQgc3dpZnRseSB0byB0aGUgdHJvb3BzLCBhbmQgZmlyc3QgRmFiaXVzIFZhbGVucywgY29tbWFuZGVyIG9mIGEgbGVnaW9uLCByb2RlIHVwIG5leHQgZGF5IHdpdGggYSBsYXJnZSBib2R5IG9mIGhvcnNlbWVuIGFuZCBzYWx1dGVkIFZpdGVsbGl1cyBhcyBlbXBlcm9yLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhpdGhlcnRvIFZpdGVsbGl1cyBoYWQgc2VlbWVkIHRvIGRlY2xpbmUgYW5kIGF2b2lkIHRoZSBvZmZpY2UsIGZlYXJpbmcgdGhlIG1hZ25pdHVkZSBvZiBpdDsgYnV0IG9uIHRoaXMgZGF5LCBhcyB0aGV5IHNheSwgYmVpbmcgZm9ydGlmaWVkIHdpdGggd2luZSBhbmQgYSBtaWRkYXkgbWVhbCwgaGUgY2FtZSBvdXQgdG8gdGhlIHNvbGRpZXJzIGFuZCBhY2NlcHRlZCB0aGUgdGl0bGUgb2YgR2VybWFuaWN1cyB3aGljaCB0aGV5IGNvbmZlcnJlZCB1cG9uIGhpbSwgdGhvdWdoIGhlIHJlamVjdGVkIHRoYXQgb2YgQ2Flc2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdHJhaWdodHdheSB0aGUgYXJteSB3aXRoIEZsYWNjdXMgYWxzbywgY2FzdGluZyBhc2lkZSB0aG9zZSBmaW5lIGFuZCBkZW1vY3JhdGljIG9hdGhzIG9mIHRoZWlycyB0byBzdXBwb3J0IHRoZSBzZW5hdGUsIHRvb2sgb2F0aCB0aGF0IHRoZXkgd291bGQgb2JleSB0aGUgb3JkZXJzIG9mIFZpdGVsbGl1cyB0aGUgZW1wZXJvci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyB3YXMgVml0ZWxsaXVzIHByb2NsYWltZWQgZW1wZXJvciBpbiBHZXJtYW55OyBhbmQgd2hlbiBHYWxiYSBsZWFybmVkIG9mIHRoZSByZXZvbHV0aW9uIHRoZXJlIGhlIG5vIGxvbmdlciBkZWZlcnJlZCBoaXMgYWN0IG9mIGFkb3B0aW9uLiBLbm93aW5nIHRoYXQgc29tZSBvZiBoaXMgZnJpZW5kcyBmYXZvdXJlZCB0aGUgc2VsZWN0aW9uIG9mIERvbGFiZWxsYSwgYW5kIG1vc3Qgb2YgdGhlbSB0aGF0IG9mIE90aG8sIG5laXRoZXIgb2Ygd2hvbSB3YXMgYXBwcm92ZWQgYnkgaGltc2VsZiwgaGUgc3VkZGVubHksIGFuZCB3aXRob3V0IGFueSBwcmV2aW91cyBub3RpY2Ugb2YgaGlzIGludGVudGlvbiwgc2VudCBmb3IgUGlzbyAod2hvc2UgcGFyZW50cywgQ3Jhc3N1cyBhbmQgU2NyaWJvbmlhLCBoYWQgYmVlbiBwdXQgdG8gZGVhdGggYnkgTmVybyksIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmEgeW91bmcgbWFuIGluIHdob3NlIHByZWRpc3Bvc2l0aW9uIHRvIGV2ZXJ5IHZpcnR1ZSB0aGUgdHJhaXRzIG9mIGdyYXZpdHkgYW5kIGRlY29ydW0gd2VyZSBtb3N0IGNvbnNwaWN1b3VzOyB0aGVuIGhlIHdlbnQgZG93biB0byB0aGUgY2FtcCB0byBkZWNsYXJlIGhpbSBDYWVzYXIgYW5kIGhlaXIgdG8gdGhlIHRocm9uZS4gQW5kIHlldCBhcyBzb29uIGFzIGhlIHNldCBvdXQsIGdyZWF0IHNpZ25zIGZyb20gaGVhdmVuIGFjY29tcGFuaWVkIGhpbSBvbiBoaXMgd2F5LCBhbmQgYWZ0ZXIgaGUgaGFkIGJlZ3VuIHRvIHByb25vdW5jZSBhbmQgcmVhZCBoaXMgYWRkcmVzcyB0byB0aGUgc29sZGllcnMsIHRoZXJlIHdlcmUgbWFueSBwZWFscyBvZiB0aHVuZGVyIGFuZCBmbGFzaGVzIG9mIGxpZ2h0bmluZywgYW5kIG11Y2ggZGFya25lc3MgYW5kIHJhaW4gcGVydmFkZWQgYm90aCB0aGUgY2FtcCBhbmQgdGhlIGNpdHksIHNvIHRoYXQgaXQgd2FzIHBsYWluIHRoYXQgdGhlIGFjdCBvZiBhZG9wdGlvbiB3YXMgaW5hdXNwaWNpb3VzIGFuZCB3YXMgbm90IGZhdm91cmVkIG9yIGFwcHJvdmVkIGJ5IHRoZSBoZWF2ZW5seSBwb3dlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzb2xkaWVycyBhbHNvIHdlcmUgc2VjcmV0bHkgZGlzbG95YWwgYW5kIHN1bGxlbiwgc2luY2Ugbm90IGV2ZW4gdGhlbiB3YXMgdGhlaXIgbGFyZ2VzcyBnaXZlbiB0byB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyB3YXMgVml0ZWxsaXVzIHByb2NsYWltZWQgZW1wZXJvciBpbiBHZXJtYW55OyBhbmQgd2hlbiBHYWxiYSBsZWFybmVkIG9mIHRoZSByZXZvbHV0aW9uIHRoZXJlIGhlIG5vIGxvbmdlciBkZWZlcnJlZCBoaXMgYWN0IG9mIGFkb3B0aW9uLiBLbm93aW5nIHRoYXQgc29tZSBvZiBoaXMgZnJpZW5kcyBmYXZvdXJlZCB0aGUgc2VsZWN0aW9uIG9mIERvbGFiZWxsYSwgYW5kIG1vc3Qgb2YgdGhlbSB0aGF0IG9mIE90aG8sIG5laXRoZXIgb2Ygd2hvbSB3YXMgYXBwcm92ZWQgYnkgaGltc2VsZiwgaGUgc3VkZGVubHksIGFuZCB3aXRob3V0IGFueSBwcmV2aW91cyBub3RpY2Ugb2YgaGlzIGludGVudGlvbiwgc2VudCBmb3IgUGlzbyAod2hvc2UgcGFyZW50cywgQ3Jhc3N1cyBhbmQgU2NyaWJvbmlhLCBoYWQgYmVlbiBwdXQgdG8gZGVhdGggYnkgTmVybyksIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmEgeW91bmcgbWFuIGluIHdob3NlIHByZWRpc3Bvc2l0aW9uIHRvIGV2ZXJ5IHZpcnR1ZSB0aGUgdHJhaXRzIG9mIGdyYXZpdHkgYW5kIGRlY29ydW0gd2VyZSBtb3N0IGNvbnNwaWN1b3VzOyB0aGVuIGhlIHdlbnQgZG93biB0byB0aGUgY2FtcCB0byBkZWNsYXJlIGhpbSBDYWVzYXIgYW5kIGhlaXIgdG8gdGhlIHRocm9uZS4gQW5kIHlldCBhcyBzb29uIGFzIGhlIHNldCBvdXQsIGdyZWF0IHNpZ25zIGZyb20gaGVhdmVuIGFjY29tcGFuaWVkIGhpbSBvbiBoaXMgd2F5LCBhbmQgYWZ0ZXIgaGUgaGFkIGJlZ3VuIHRvIHByb25vdW5jZSBhbmQgcmVhZCBoaXMgYWRkcmVzcyB0byB0aGUgc29sZGllcnMsIHRoZXJlIHdlcmUgbWFueSBwZWFscyBvZiB0aHVuZGVyIGFuZCBmbGFzaGVzIG9mIGxpZ2h0bmluZywgYW5kIG11Y2ggZGFya25lc3MgYW5kIHJhaW4gcGVydmFkZWQgYm90aCB0aGUgY2FtcCBhbmQgdGhlIGNpdHksIHNvIHRoYXQgaXQgd2FzIHBsYWluIHRoYXQgdGhlIGFjdCBvZiBhZG9wdGlvbiB3YXMgaW5hdXNwaWNpb3VzIGFuZCB3YXMgbm90IGZhdm91cmVkIG9yIGFwcHJvdmVkIGJ5IHRoZSBoZWF2ZW5seSBwb3dlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzb2xkaWVycyBhbHNvIHdlcmUgc2VjcmV0bHkgZGlzbG95YWwgYW5kIHN1bGxlbiwgc2luY2Ugbm90IGV2ZW4gdGhlbiB3YXMgdGhlaXIgbGFyZ2VzcyBnaXZlbiB0byB0aGVtLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFzIGZvciBQaXNvLCB0aG9zZSB3aG8gd2VyZSBwcmVzZW50IGF0IHRoZSBzY2VuZSBhbmQgb2JzZXJ2ZWQgaGlzIHZvaWNlIGFuZCBjb3VudGVuYW5jZSB3ZXJlIGFtYXplZCB0byBzZWUgaGltIHJlY2VpdmUgc28gZ3JlYXQgYSBmYXZvdXIgd2l0aG91dCBncmVhdCBlbW90aW9uLCB0aG91Z2ggbm90IHdpdGhvdXQgYXBwcmVjaWF0aW9uOyB3aGVyZWFzIGluIHRoZSBvdXR3YXJkIGFzcGVjdCBvZiBPdGhvIHRoZXJlIHdlcmUgbWFueSBjbGVhciBzaWducyBvZiB0aGUgYml0dGVybmVzcyBhbmQgYW5nZXIgd2l0aCB3aGljaCBoZSB0b29rIHRoZSBkaXNhcHBvaW50bWVudCBvZiBoaXMgaG9wZXMuIEhlIGhhZCBiZWVuIHRoZSBmaXJzdCB0byBiZSB0aG91Z2h0IHdvcnRoeSBvZiB0aGUgcHJpemUsIGFuZCBoYWQgY29tZSB2ZXJ5IG5lYXIgYXR0YWluaW5nIGl0LCBhbmQgaGlzIG5vdCBhdHRhaW5pbmcgaXQgd2FzIHJlZ2FyZGVkIGJ5IGhpbSBhcyBhIHNpZ24gb2YgaWxsLXdpbGwgYW5kIGhhdHJlZCBvbiBHYWxiYSdzIHBhcnQgdG93YXJkcyBoaW0uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlIGhlIHdhcyBub3Qgd2l0aG91dCBhcHByZWhlbnNpb24gZm9yIHRoZSBmdXR1cmUsIGFuZCBmZWFyaW5nIFBpc28sIGJsYW1pbmcgR2FsYmEsIGFuZCBhbmdyeSB3aXRoIFZpbml1cywgaGUgd2VudCBhd2F5IGZ1bGwgb2YgdmFyaW91cyBwYXNzaW9ucy4gRm9yIHRoZSBzb290aHNheWVycyBhbmQgQ2hhbGRhZWFucyB3aG8gd2VyZSBhbHdheXMgYWJvdXQgaGltIHdvdWxkIG5vdCBzdWZmZXIgaGltIHRvIGFiYW5kb24gaGlzIGhvcGVzIG9yIGdpdmUgdXAgYWx0b2dldGhlciwgcGFydGljdWxhcmx5IFB0b2xlbWFldXMsIHdobyBkd2VsdCBtdWNoIHVwb24gaGlzIGZyZXF1ZW50IHByZWRpY3Rpb24gdGhhdCBOZXJvIHdvdWxkIG5vdCBraWxsIE90aG8sIGJ1dCB3b3VsZCBkaWUgZmlyc3QgaGltc2VsZiwgYW5kIHRoYXQgT3RobyB3b3VsZCBzdXJ2aXZlIGhpbSBhbmQgYmUgZW1wZXJvciBvZiB0aGUgUm9tYW5zIChmb3Igbm93IHRoYXQgaGUgY291bGQgcG9pbnQgdG8gdGhlIGZpcnN0IHBhcnQgb2YgdGhlIHByZWRpY3Rpb24gYXMgdHJ1ZSwgaGUgdGhvdWdodCB0aGF0IE90aG8gc2hvdWxkIG5vdCBkZXNwYWlyIG9mIHRoZSBzZWNvbmQgcGFydCkuIEFib3ZlIGFsbCwgT3RobyB3YXMgZW5jb3VyYWdlZCBieSB0aG9zZSB3aG8gc2VjcmV0bHkgc2hhcmVkIGhpcyByZXNlbnRtZW50IGFuZCBjaGFncmluIG9uIHRoZSBncm91bmQgdGhhdCBoZSBoYWQgYmVlbiB0aGFua2xlc3NseSB0cmVhdGVkLiBNb3Jlb3ZlciwgbW9zdCBvZiB0aGUgYWRoZXJlbnRzIG9mIFRpZ2VsbGludXMgYW5kIE55bXBoaWRpdXMsIG1lbiB3aG8gaGFkIG9uY2UgYmVlbiBpbiBoaWdoIGhvbm91ciwgYnV0IHdlcmUgbm93IGNhc3QgYXNpZGUgYW5kIG9mIG5vIGFjY291bnQsIHRyZWFjaGVyb3VzbHkgd2VudCBvdmVyIHRvIE90aG8sIHNoYXJlZCBoaXMgcmVzZW50bWVudCwgYW5kIHNwdXJyZWQgaGltIG9uIHRvIGFjdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSBoZSB3YXMgbm90IHdpdGhvdXQgYXBwcmVoZW5zaW9uIGZvciB0aGUgZnV0dXJlLCBhbmQgZmVhcmluZyBQaXNvLCBibGFtaW5nIEdhbGJhLCBhbmQgYW5ncnkgd2l0aCBWaW5pdXMsIGhlIHdlbnQgYXdheSBmdWxsIG9mIHZhcmlvdXMgcGFzc2lvbnMuIEZvciB0aGUgc29vdGhzYXllcnMgYW5kIENoYWxkYWVhbnMgd2hvIHdlcmUgYWx3YXlzIGFib3V0IGhpbSB3b3VsZCBub3Qgc3VmZmVyIGhpbSB0byBhYmFuZG9uIGhpcyBob3BlcyBvciBnaXZlIHVwIGFsdG9nZXRoZXIsIHBhcnRpY3VsYXJseSBQdG9sZW1hZXVzLCB3aG8gZHdlbHQgbXVjaCB1cG9uIGhpcyBmcmVxdWVudCBwcmVkaWN0aW9uIHRoYXQgTmVybyB3b3VsZCBub3Qga2lsbCBPdGhvLCBidXQgd291bGQgZGllIGZpcnN0IGhpbXNlbGYsIGFuZCB0aGF0IE90aG8gd291bGQgc3Vydml2ZSBoaW0gYW5kIGJlIGVtcGVyb3Igb2YgdGhlIFJvbWFucyAoZm9yIG5vdyB0aGF0IGhlIGNvdWxkIHBvaW50IHRvIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZSBwcmVkaWN0aW9uIGFzIHRydWUsIGhlIHRob3VnaHQgdGhhdCBPdGhvIHNob3VsZCBub3QgZGVzcGFpciBvZiB0aGUgc2Vjb25kIHBhcnQpLiBBYm92ZSBhbGwsIE90aG8gd2FzIGVuY291cmFnZWQgYnkgdGhvc2Ugd2hvIHNlY3JldGx5IHNoYXJlZCBoaXMgcmVzZW50bWVudCBhbmQgY2hhZ3JpbiBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgaGFkIGJlZW4gdGhhbmtsZXNzbHkgdHJlYXRlZC4gTW9yZW92ZXIsIG1vc3Qgb2YgdGhlIGFkaGVyZW50cyBvZiBUaWdlbGxpbnVzIGFuZCBOeW1waGlkaXVzLCBtZW4gd2hvIGhhZCBvbmNlIGJlZW4gaW4gaGlnaCBob25vdXIsIGJ1dCB3ZXJlIG5vdyBjYXN0IGFzaWRlIGFuZCBvZiBubyBhY2NvdW50LCB0cmVhY2hlcm91c2x5IHdlbnQgb3ZlciB0byBPdGhvLCBzaGFyZWQgaGlzIHJlc2VudG1lbnQsIGFuZCBzcHVycmVkIGhpbSBvbiB0byBhY3Rpb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZXNlIHdlcmUgVmV0dXJpdXMgYW5kIEJhcmJpdXMgdGhlIG9uZSBhbiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+b3B0aW88L2ZvcmVpZ24+LDwvcT4gdGhlIG90aGVyIGEgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPnRlc3NlcmFyaXVzPC9mb3JlaWduPgogICAgICAgICAgICA8L3E+ICh0aGVzZSBhcmUgdGhlIFJvbWFuIG5hbWVzIGZvciA8ZW1waD5zY291dDwvZW1waD4gYW5kIDxlbXBoPm1lc3NlbmdlcjwvZW1waD4pLiBJbiBjb21wYW55IHdpdGggdGhlc2UgT25vbWFzdHVzLCBhIGZyZWVkbWFuIG9mIE90aG8ncywgd2VudCByb3VuZCBjb3JydXB0aW5nIHRoZSBzb2xkaWVycywgc29tZSB3aXRoIG1vbmV5LCBhbmQgb3RoZXJzIHdpdGggZmFpciBwcm9taXNlcy4gVGhlIHNvbGRpZXJzIHdlcmUgYWxyZWFkeSBkaXNhZmZlY3RlZCBhbmQgd2FudGVkIG9ubHkgYSBwcmV0ZXh0IGZvciB0cmVhY2hlcnkuIEZvciBmb3VyIGRheXMgd291bGQgbm90IGhhdmUgc3VmZmljZWQgdG8gY2hhbmdlIHRoZSBhbGxlZ2lhbmNlIG9mIGEgbG95YWwgYXJteSwgYW5kIG9ubHkgc28gbWFueSBkYXlzIGludGVydmVuZWQgYmV0d2VlbiB0aGUgYWN0IG9mIGFkb3B0aW9uIGFuZCB0aGUgbXVyZGVyLCBzaW5jZSBvbiB0aGUgc2l4dGggZGF5IGFmdGVyIHRoZSBhZG9wdGlvbiAodGhlIFJvbWFucyBjYWxsIGl0IHRoZSBlaWdodGVlbnRoIGJlZm9yZSB0aGUgQ2FsZW5kcyBvZiBGZWJydWFyeTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkphbnVhcnkgMTV0aCAoQS5ELiB4dmlpaS4gQ2FsLiBGZWIuKSwgNjggQS5ELjwvbm90ZT4pLCBHYWxiYSBhbmQgUGlzbyB3ZXJlIHNsYWluLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW1vbmcgdGhlc2Ugd2VyZSBWZXR1cml1cyBhbmQgQmFyYml1cyB0aGUgb25lIGFuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+b3B0aW88L2ZvcmVpZ24+LDwvcT4gdGhlIG90aGVyIGEgCgkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5vcHRpbzwvZm9yZWlnbj4sPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dGVzc2VyYXJpdXM8L2ZvcmVpZ24+CiAgICAgICAgICAgIDwvcT4gKHRoZXNlIGFyZSB0aGUgUm9tYW4gbmFtZXMgZm9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnRlc3NlcmFyaXVzPC9mb3JlaWduPgogICAgICAgICAgICA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnNjb3V0PC9lbXBoPiBhbmQgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5tZXNzZW5nZXI8L2VtcGg+KS4gSW4gY29tcGFueSB3aXRoIHRoZXNlIE9ub21hc3R1cywgYSBmcmVlZG1hbiBvZiBPdGhvJ3MsIHdlbnQgcm91bmQgY29ycnVwdGluZyB0aGUgc29sZGllcnMsIHNvbWUgd2l0aCBtb25leSwgYW5kIG90aGVycyB3aXRoIGZhaXIgcHJvbWlzZXMuIFRoZSBzb2xkaWVycyB3ZXJlIGFscmVhZHkgZGlzYWZmZWN0ZWQgYW5kIHdhbnRlZCBvbmx5IGEgcHJldGV4dCBmb3IgdHJlYWNoZXJ5LiBGb3IgZm91ciBkYXlzIHdvdWxkIG5vdCBoYXZlIHN1ZmZpY2VkIHRvIGNoYW5nZSB0aGUgYWxsZWdpYW5jZSBvZiBhIGxveWFsIGFybXksIGFuZCBvbmx5IHNvIG1hbnkgZGF5cyBpbnRlcnZlbmVkIGJldHdlZW4gdGhlIGFjdCBvZiBhZG9wdGlvbiBhbmQgdGhlIG11cmRlciwgc2luY2Ugb24gdGhlIHNpeHRoIGRheSBhZnRlciB0aGUgYWRvcHRpb24gKHRoZSBSb21hbnMgY2FsbCBpdCB0aGUgZWlnaHRlZW50aCBiZWZvcmUgdGhlIENhbGVuZHMgb2YgRmVicnVhcnk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkphbnVhcnkgMTV0aCAoQS5ELiB4dmlpaS4gQ2FsLiBGZWIuKSwgNjggQS5ELjwvbm90ZT4pLCBHYWxiYSBhbmQgUGlzbyB3ZXJlIHNsYWluLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGF0IGRheSwgc2hvcnRseSBhZnRlciBkYXduLCBHYWxiYSB3YXMgc2FjcmlmaWNpbmcgaW4gdGhlIFBhbGF0aXVtIGluIHRoZSBwcmVzZW5jZSBvZiBoaXMgZnJpZW5kczsgYW5kIGFzIHNvb24gYXMgVW1icmljaXVzLCB0aGUgb2ZmaWNpYXRpbmcgcHJpZXN0LCBoYWQgdGFrZW4gdGhlIGVudHJhaWxzIG9mIHRoZSB2aWN0aW0gaW4gaGlzIGhhbmRzIGFuZCBpbnNwZWN0ZWQgdGhlbSwgaGUgZGVjbGFyZWQgbm90IGFtYmlndW91c2x5LCBidXQgaW4gc28gbWFueSB3b3JkcywgdGhhdCB0aGVyZSB3ZXJlIHNpZ25zIG9mIGEgZ3JlYXQgY29tbW90aW9uLCBhbmQgdGhhdCBwZXJpbCBtaXhlZCB3aXRoIHRyZWFjaGVyeSBodW5nIG92ZXIgdGhlIGVtcGVyb3IncyBoZWFkLiBUaHVzIHRoZSBnb2QgYWxsIGJ1dCBkZWxpdmVyZWQgT3RobyBvdmVyIHRvIGFycmVzdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIE90aG8gd2FzIHN0YW5kaW5nIGJlaGluZCBHYWxiYSwgYW5kIG5vdGVkIHdoYXQgd2FzIHNhaWQgYW5kIHBvaW50ZWQgb3V0IGJ5IFVtYnJpY2l1cy4gQnV0IGFzIGhlIHN0b29kIHRoZXJlIGluIGNvbmZ1c2lvbiBhbmQgd2l0aCBhIGNvdW50ZW5hbmNlIGNoYW5naW5nIHRvIGFsbCBzb3J0cyBvZiBjb2xvdXJzIHRocm91Z2ggZmVhciwgT25vbWFzdHVzIGhpcyBmcmVlZG1hbiBjYW1lIHVwIGFuZCB0b2xkIGhpbSB0aGF0IHRoZSBidWlsZGVycyB3ZXJlIGNvbWUgYW5kIHdlcmUgd2FpdGluZyBmb3IgaGltIGF0IGhpcyBob3VzZS4gTm93LCB0aGlzIHdhcyBhIHRva2VuIHRoYXQgdGhlIHRpbWUgd2FzIGF0IGhhbmQgd2hlbiBPdGhvIHdhcyB0byBtZWV0IHRoZSBzb2xkaWVycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCB0aGUgcmVtYXJrLCB0aGVuLCB0aGF0IGhlIGhhZCBib3VnaHQgYW4gb2xkIGhvdXNlIGFuZCB3aXNoZWQgdG8gc2hvdyBpdHMgZGVmZWN0cyB0byB0aGUgdmVuZG9ycywgaGUgd2VudCBhd2F5LCBhbmQgcGFzc2luZyB0aHJvdWdoIHdoYXQgd2FzIGNhbGxlZCB0aGUgaG91c2Ugb2YgVGliZXJpdXMsIHdlbnQgZG93biBpbnRvIHRoZSBmb3J1bSwgdG8gd2hlcmUgYSBnaWxkZWQgY29sdW1uIHN0b29kLCBhdCB3aGljaCBhbGwgdGhlIHJvYWRzIHRoYXQgaW50ZXJzZWN0IEl0YWx5IHRlcm1pbmF0ZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoYXQgZGF5LCBzaG9ydGx5IGFmdGVyIGRhd24sIEdhbGJhIHdhcyBzYWNyaWZpY2luZyBpbiB0aGUgUGFsYXRpdW0gaW4gdGhlIHByZXNlbmNlIG9mIGhpcyBmcmllbmRzOyBhbmQgYXMgc29vbiBhcyBVbWJyaWNpdXMsIHRoZSBvZmZpY2lhdGluZyBwcmllc3QsIGhhZCB0YWtlbiB0aGUgZW50cmFpbHMgb2YgdGhlIHZpY3RpbSBpbiBoaXMgaGFuZHMgYW5kIGluc3BlY3RlZCB0aGVtLCBoZSBkZWNsYXJlZCBub3QgYW1iaWd1b3VzbHksIGJ1dCBpbiBzbyBtYW55IHdvcmRzLCB0aGF0IHRoZXJlIHdlcmUgc2lnbnMgb2YgYSBncmVhdCBjb21tb3Rpb24sIGFuZCB0aGF0IHBlcmlsIG1peGVkIHdpdGggdHJlYWNoZXJ5IGh1bmcgb3ZlciB0aGUgZW1wZXJvcidzIGhlYWQuIFRodXMgdGhlIGdvZCBhbGwgYnV0IGRlbGl2ZXJlZCBPdGhvIG92ZXIgdG8gYXJyZXN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBPdGhvIHdhcyBzdGFuZGluZyBiZWhpbmQgR2FsYmEsIGFuZCBub3RlZCB3aGF0IHdhcyBzYWlkIGFuZCBwb2ludGVkIG91dCBieSBVbWJyaWNpdXMuIEJ1dCBhcyBoZSBzdG9vZCB0aGVyZSBpbiBjb25mdXNpb24gYW5kIHdpdGggYSBjb3VudGVuYW5jZSBjaGFuZ2luZyB0byBhbGwgc29ydHMgb2YgY29sb3VycyB0aHJvdWdoIGZlYXIsIE9ub21hc3R1cyBoaXMgZnJlZWRtYW4gY2FtZSB1cCBhbmQgdG9sZCBoaW0gdGhhdCB0aGUgYnVpbGRlcnMgd2VyZSBjb21lIGFuZCB3ZXJlIHdhaXRpbmcgZm9yIGhpbSBhdCBoaXMgaG91c2UuIE5vdywgdGhpcyB3YXMgYSB0b2tlbiB0aGF0IHRoZSB0aW1lIHdhcyBhdCBoYW5kIHdoZW4gT3RobyB3YXMgdG8gbWVldCB0aGUgc29sZGllcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlIHJlbWFyaywgdGhlbiwgdGhhdCBoZSBoYWQgYm91Z2h0IGFuIG9sZCBob3VzZSBhbmQgd2lzaGVkIHRvIHNob3cgaXRzIGRlZmVjdHMgdG8gdGhlIHZlbmRvcnMsIGhlIHdlbnQgYXdheSwgYW5kIHBhc3NpbmcgdGhyb3VnaCB3aGF0IHdhcyBjYWxsZWQgdGhlIGhvdXNlIG9mIFRpYmVyaXVzLCB3ZW50IGRvd24gaW50byB0aGUgZm9ydW0sIHRvIHdoZXJlIGEgZ2lsZGVkIGNvbHVtbiBzdG9vZCwgYXQgd2hpY2ggYWxsIHRoZSByb2FkcyB0aGF0IGludGVyc2VjdCBJdGFseSB0ZXJtaW5hdGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIGFzIHdlIGFyZSB0b2xkLCB0aGUgc29sZGllcnMgd2hvIGZpcnN0IHdlbGNvbWVkIGhpbSBhbmQgc2FsdXRlZCBoaW0gYXMgZW1wZXJvciB3ZXJlIG5vIG1vcmUgdGhhbiB0d2VudHktdGhyZWUuIFRoZXJlZm9yZSwgYWx0aG91Z2ggaGUgd2FzIG5vdCBzdW5rZW4gaW4gc3Bpcml0IHRvIG1hdGNoIHRoZSB3ZWFrbmVzcyBhbmQgZWZmZW1pbmFjeSBvZiBoaXMgYm9keSwgYnV0IHdhcyBib2xkIGFuZCBhZHZlbnR1cm91cyBpbiBwcmVzZW5jZSBvZiBkYW5nZXIsIGhlIGJlZ2FuIHRvIGJlIGFmcmFpZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNvbGRpZXJzIHdobyB3ZXJlIHRoZXJlLCBob3dldmVyLCB3b3VsZCBub3Qgc3VmZmVyIGhpbSB0byBkZXNpc3QsIGJ1dCBzdXJyb3VuZGluZyBoaXMgbGl0dGVyIHdpdGggdGhlaXIgc3dvcmRzIGRyYXduLCBvcmRlcmVkIGl0IHRvIGJlIHRha2VuIHVwLCB3aGlsZSBPdGhvIHVyZ2VkIHRoZSBiZWFyZXJzIHRvIGhhc3Rlbiwgc2F5aW5nIHRvIGhpbXNlbGYgbWFueSB0aW1lcyB0aGF0IGhlIHdhcyBhIGxvc3QgbWFuLiBGb3IgaGUgd2FzIG92ZXJoZWFyZCBieSBzb21lIG9mIHRoZSBieXN0YW5kZXJzLCBhbmQgdGhleSB3ZXJlIGFzdG9uaXNoZWQgcmF0aGVyIHRoYW4gZGlzdHVyYmVkLCBvd2luZyB0byB0aGUgc21hbGwgbnVtYmVyIG9mIHRob3NlIHdobyBoYWQgdmVudHVyZWQgdXBvbiB0aGUgZGVlZC4gQnV0IGFzIGhlIHdhcyB0aHVzIGJvcm5lIHRocm91Z2ggdGhlIGZvcnVtLCBoZSB3YXMgbWV0IGJ5IGFzIG1hbnkgbW9yZSBzb2xkaWVycywgYW5kIG90aGVycyBhZ2FpbiBrZXB0IGpvaW5pbmcgdGhlIHBhcnR5IGJ5IHRocmVlcyBhbmQgZm91cnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYWxsIGNyb3dkZWQgYXJvdW5kIHRoZSBsaXR0ZXIsIHNhbHV0aW5nIE90aG8gYXMgZW1wZXJvciBhbmQgYnJhbmRpc2hpbmcgdGhlaXIgZHJhd24gc3dvcmRzLiBBdCB0aGUgY2FtcCwgTWFydGlhbGlzLCB0aGUgbWlsaXRhcnkgdHJpYnVuZSBpbiBjaGFyZ2Ugb2YgdGhlIHdhdGNoIGF0IHRoZSB0aW1lLCB3aG8gd2FzIG5vdCBwcml2eSB0byB0aGUgcGxvdCwgYXMgdGhleSBzYXksIGJ1dCB3YXMgY29uZm91bmRlZCBieSB0aGVpciB1bmV4cGVjdGVkIGFwcGVhcmFuY2UgYW5kIHRlcnJpZmllZCwgcGVybWl0dGVkIHRoZW0gdG8gZW50ZXIuIEFuZCBhZnRlciBPdGhvIHdhcyBpbnNpZGUgdGhlIGNhbXAsIG5vIG9uZSBvcHBvc2VkIGhpbS4gRm9yIHRob3NlIHdobyB3ZXJlIGlnbm9yYW50IG9mIHdoYXQgd2FzIGdvaW5nIG9uLCBzY2F0dGVyZWQgYWJvdXQgYXMgdGhleSB3ZXJlIGJ5IG9uZXMgYW5kIHR3b3MsIHdlcmUgZGVzaWduZWRseSBlbnZlbG9wZWQgYnkgdGhvc2Ugd2hvIGtuZXcgYW5kIHdlcmUgcHJpdnkgdG8gdGhlIHBsb3QsIGFuZCBzbyBnYXZlIGluIHRoZWlyIGFkaGVyZW5jZSwgYXQgZmlyc3QgdGhyb3VnaCBmZWFyLCBhbmQgdGhlbiB1bmRlciBwZXJzdWFzaW9uLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSwgYXMgd2UgYXJlIHRvbGQsIHRoZSBzb2xkaWVycyB3aG8gZmlyc3Qgd2VsY29tZWQgaGltIGFuZCBzYWx1dGVkIGhpbSBhcyBlbXBlcm9yIHdlcmUgbm8gbW9yZSB0aGFuIHR3ZW50eS10aHJlZS4gVGhlcmVmb3JlLCBhbHRob3VnaCBoZSB3YXMgbm90IHN1bmtlbiBpbiBzcGlyaXQgdG8gbWF0Y2ggdGhlIHdlYWtuZXNzIGFuZCBlZmZlbWluYWN5IG9mIGhpcyBib2R5LCBidXQgd2FzIGJvbGQgYW5kIGFkdmVudHVyb3VzIGluIHByZXNlbmNlIG9mIGRhbmdlciwgaGUgYmVnYW4gdG8gYmUgYWZyYWlkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzb2xkaWVycyB3aG8gd2VyZSB0aGVyZSwgaG93ZXZlciwgd291bGQgbm90IHN1ZmZlciBoaW0gdG8gZGVzaXN0LCBidXQgc3Vycm91bmRpbmcgaGlzIGxpdHRlciB3aXRoIHRoZWlyIHN3b3JkcyBkcmF3biwgb3JkZXJlZCBpdCB0byBiZSB0YWtlbiB1cCwgd2hpbGUgT3RobyB1cmdlZCB0aGUgYmVhcmVycyB0byBoYXN0ZW4sIHNheWluZyB0byBoaW1zZWxmIG1hbnkgdGltZXMgdGhhdCBoZSB3YXMgYSBsb3N0IG1hbi4gRm9yIGhlIHdhcyBvdmVyaGVhcmQgYnkgc29tZSBvZiB0aGUgYnlzdGFuZGVycywgYW5kIHRoZXkgd2VyZSBhc3RvbmlzaGVkIHJhdGhlciB0aGFuIGRpc3R1cmJlZCwgb3dpbmcgdG8gdGhlIHNtYWxsIG51bWJlciBvZiB0aG9zZSB3aG8gaGFkIHZlbnR1cmVkIHVwb24gdGhlIGRlZWQuIEJ1dCBhcyBoZSB3YXMgdGh1cyBib3JuZSB0aHJvdWdoIHRoZSBmb3J1bSwgaGUgd2FzIG1ldCBieSBhcyBtYW55IG1vcmUgc29sZGllcnMsIGFuZCBvdGhlcnMgYWdhaW4ga2VwdCBqb2luaW5nIHRoZSBwYXJ0eSBieSB0aHJlZXMgYW5kIGZvdXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYWxsIGNyb3dkZWQgYXJvdW5kIHRoZSBsaXR0ZXIsIHNhbHV0aW5nIE90aG8gYXMgZW1wZXJvciBhbmQgYnJhbmRpc2hpbmcgdGhlaXIgZHJhd24gc3dvcmRzLiBBdCB0aGUgY2FtcCwgTWFydGlhbGlzLCB0aGUgbWlsaXRhcnkgdHJpYnVuZSBpbiBjaGFyZ2Ugb2YgdGhlIHdhdGNoIGF0IHRoZSB0aW1lLCB3aG8gd2FzIG5vdCBwcml2eSB0byB0aGUgcGxvdCwgYXMgdGhleSBzYXksIGJ1dCB3YXMgY29uZm91bmRlZCBieSB0aGVpciB1bmV4cGVjdGVkIGFwcGVhcmFuY2UgYW5kIHRlcnJpZmllZCwgcGVybWl0dGVkIHRoZW0gdG8gZW50ZXIuIEFuZCBhZnRlciBPdGhvIHdhcyBpbnNpZGUgdGhlIGNhbXAsIG5vIG9uZSBvcHBvc2VkIGhpbS4gRm9yIHRob3NlIHdobyB3ZXJlIGlnbm9yYW50IG9mIHdoYXQgd2FzIGdvaW5nIG9uLCBzY2F0dGVyZWQgYWJvdXQgYXMgdGhleSB3ZXJlIGJ5IG9uZXMgYW5kIHR3b3MsIHdlcmUgZGVzaWduZWRseSBlbnZlbG9wZWQgYnkgdGhvc2Ugd2hvIGtuZXcgYW5kIHdlcmUgcHJpdnkgdG8gdGhlIHBsb3QsIGFuZCBzbyBnYXZlIGluIHRoZWlyIGFkaGVyZW5jZSwgYXQgZmlyc3QgdGhyb3VnaCBmZWFyLCBhbmQgdGhlbiB1bmRlciBwZXJzdWFzaW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5OZXdzIG9mIHRoaXMgd2FzIGNhcnJpZWQgYXQgb25jZSB0byBHYWxiYSBpbiB0aGUgUGFsYXRpdW0gYW5kIHRoZSBwcmllc3Qgd2FzIHN0aWxsIHN0YW5kaW5nIHRoZXJlIHdpdGggdGhlIGVudHJhaWxzIGluIGhpcyBoYW5kcywgc28gdGhhdCBldmVuIG1lbiB3aG8gd2VyZSBhbHRvZ2V0aGVyIGluZGlmZmVyZW50IGFuZCBzY2VwdGljYWwgYWJvdXQgc3VjaCBtYXR0ZXJzIHdlcmUgY29uZm91bmRlZCBhbmQgZmlsbGVkIHdpdGggd29uZGVyIGF0IHRoZSBkaXZpbmUgcG9ydGVudC4gQW5kIG5vdyBhIG1vdGxleSBjcm93ZCBjYW1lIHN0cmVhbWluZyBvdXQgZnJvbSB0aGUgZm9ydW07IFZpbml1cyBhbmQgTGFjbyBhbmQgc29tZSBvZiB0aGUgZnJlZWRtZW4gc3Rvb2QgYXQgR2FsYmEncyBzaWRlIGJyYW5kaXNoaW5nIHRoZWlyIG5ha2VkIHN3b3JkczsgUGlzbyB3ZW50IG91dCBhbmQgaGVsZCBjb25mZXJlbmNlIHdpdGggdGhlIGd1YXJkcyBvbiBkdXR5IGluIHRoZSBjb3VydDsgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIE1hcml1cyBDZWxzdXMsIGEgbWFuIG9mIHdvcnRoLCB3YXMgc2VudCBvZmYgdG8gc2VjdXJlIHRoZSBhbGxlZ2lhbmNlIG9mIHRoZSBJbGx5cmlhbiBsZWdpb24gZW5jYW1wZWQgaW4gd2hhdCB3YXMgY2FsbGVkIHRoZSBWaXBzYW5pYW4gcG9ydGljby4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5ld3Mgb2YgdGhpcyB3YXMgY2FycmllZCBhdCBvbmNlIHRvIEdhbGJhIGluIHRoZSBQYWxhdGl1bSBhbmQgdGhlIHByaWVzdCB3YXMgc3RpbGwgc3RhbmRpbmcgdGhlcmUgd2l0aCB0aGUgZW50cmFpbHMgaW4gaGlzIGhhbmRzLCBzbyB0aGF0IGV2ZW4gbWVuIHdobyB3ZXJlIGFsdG9nZXRoZXIgaW5kaWZmZXJlbnQgYW5kIHNjZXB0aWNhbCBhYm91dCBzdWNoIG1hdHRlcnMgd2VyZSBjb25mb3VuZGVkIGFuZCBmaWxsZWQgd2l0aCB3b25kZXIgYXQgdGhlIGRpdmluZSBwb3J0ZW50LiBBbmQgbm93IGEgbW90bGV5IGNyb3dkIGNhbWUgc3RyZWFtaW5nIG91dCBmcm9tIHRoZSBmb3J1bTsgVmluaXVzIGFuZCBMYWNvIGFuZCBzb21lIG9mIHRoZSBmcmVlZG1lbiBzdG9vZCBhdCBHYWxiYSdzIHNpZGUgYnJhbmRpc2hpbmcgdGhlaXIgbmFrZWQgc3dvcmRzOyBQaXNvIHdlbnQgb3V0IGFuZCBoZWxkIGNvbmZlcmVuY2Ugd2l0aCB0aGUgZ3VhcmRzIG9uIGR1dHkgaW4gdGhlIGNvdXJ0OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBNYXJpdXMgQ2Vsc3VzLCBhIG1hbiBvZiB3b3J0aCwgd2FzIHNlbnQgb2ZmIHRvIHNlY3VyZSB0aGUgYWxsZWdpYW5jZSBvZiB0aGUgSWxseXJpYW4gbGVnaW9uIGVuY2FtcGVkIGluIHdoYXQgd2FzIGNhbGxlZCB0aGUgVmlwc2FuaWFuIHBvcnRpY28uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIGFzIEdhbGJhIHB1cnBvc2VkIHRvIGdvIGZvcnRoLCBhbmQgVmluaXVzIHdvdWxkIG5vdCBwZXJtaXQgaXQsIHdoaWxlIENlbHN1cyBhbmQgTGFjbyB1cmdlZCBpdCBhbmQgdmVoZW1lbnRseSBjaGlkZWQgVmluaXVzLCBhIHJ1bW91ciBzcHJlYWQgaW5zaXN0ZW50bHkgdGhhdCBPdGhvIGhhZCBiZWVuIHNsYWluIGluIHRoZSBjYW1wOyBhbmQgYWZ0ZXIgYSBsaXR0bGUsIEp1bGl1cyBBdHRpY3VzLCBhIHNvbGRpZXIgb2YgZGlzdGluY3Rpb24gYW1vbmcgdGhlIGd1YXJkcywgd2FzIHNlZW4gcnVzaGluZyB1cCB3aXRoIGhpcyBzd29yZCBkcmF3biwgYW5kIGNyeWluZyBvdXQgdGhhdCBoZSBoYWQgc2xhaW4gdGhlIGVuZW15IG9mIENhZXNhcjsgYW5kIGZvcmNpbmcgaGlzIHdheSB0aHJvdWdoIHRoZSBjcm93ZCBhYm91dCBHYWxiYSwgaGUgc2hvd2VkIGhpbSBoaXMgc3dvcmQgYWxsIHN0YWluZWQgd2l0aCBibG9vZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBHYWxiYSBmaXhlZCBoaXMgZXllcyB1cG9uIGhpbSBhbmQgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaG8gZ2F2ZSB0aGVlIHRoeSBvcmRlcnM/PC9xPiBXaGVyZXVwb24gdGhlIG1hbiByZXBsaWVkIHRoYXQgaXQgd2FzIGhpcyBmaWRlbGl0eSBhbmQgdGhlIG9hdGggdGhhdCBoZSBoYWQgc3dvcm4sIGF0IHdoaWNoIHRoZSBtdWx0aXR1ZGUgY3JpZWQgb3V0IHRoYXQgaGUgaGFkIGRvbmUgd2VsbCwgYW5kIGdhdmUgaGltIHRoZWlyIGFwcGxhdXNlLiBUaGVuIEdhbGJhIGdvdCBpbnRvIGhpcyBsaXR0ZXIgYW5kIHdhcyBjYXJyaWVkIGZvcnRoLCB3aXNoaW5nIHRvIHNhY3JpZmljZSB0byBKdXBpdGVyIGFuZCBzaG93IGhpbXNlbGYgdG8gdGhlIGNpdGl6ZW5zLiBCdXQgd2hlbiBoZSB3YXMgY29tZSBpbnRvIHRoZSBmb3J1bSwgdGhlcmUgbWV0IGhpbSwgbGlrZSBhIGNoYW5nZSBvZiB3aW5kLCBhIHJlcG9ydCB0aGF0IE90aG8gd2FzIG1hc3RlciBvZiB0aGUgYXJteS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYXMgbWlnaHQgYmUgZXhwZWN0ZWQgaW4gc28gZ3JlYXQgYSBjcm93ZCwgc29tZSBjcmllZCBvdXQgdG8gaGltIHRvIHR1cm4gYmFjaywgb3RoZXJzIHRvIGdvIGZvcndhcmQ7IHNvbWUgYmFkZSBoaW0gdG8gYmUgb2YgZ29vZCBjb3VyYWdlLCBvdGhlcnMgdXJnZWQgaGltIHRvIGJlIGNhdXRpb3VzOyBhbmQgc28sIHdoaWxlIGhpcyBsaXR0ZXIgd2FzIHN3ZXB0IGhpdGhlciBhbmQgdGhpdGhlciwgYXMgaW4gYSBzdXJnaW5nIHNlYSwgYW5kIG9mdGVuIHRocmVhdGVuZWQgdG8gY2Fwc2l6ZSwgdGhlcmUgY2FtZSBpbnRvIHZpZXcsIGZpcnN0IGhvcnNlbWVuLCBhbmQgdGhlbiBtZW4tYXQtYXJtcywgY2hhcmdpbmcgdGhyb3VnaCB0aGUgYmFzaWxpY2Egb2YgUGF1bHVzLCBhbmQgd2l0aCBvbmUgdm9pY2UgbG91ZGx5IG9yZGVyaW5nIGFsbCBwcml2YXRlIGNpdGl6ZW5zIG91dCBvZiB0aGVpciB3YXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtdWx0aXR1ZGUsIGFjY29yZGluZ2x5LCB0b29rIHRvIHRoZWlyIGhlZWxzLCBub3Qgc2NhdHRlcmluZyBpbiBmbGlnaHQsIGJ1dCBzZWVraW5nIHRoZSBwb3J0aWNvZXMgYW5kIGVtaW5lbmNlcyBvZiB0aGUgZm9ydW0sIGFzIGlmIHRvIGdldCBhIHZpZXcgb2YgYSBzcGVjdGFjbGUuIEhvc3RpbGl0aWVzIGJlZ2FuIHdpdGggdGhlIG92ZXJ0aHJvdyBvZiBhIHN0YXR1ZSBvZiBHYWxiYSBieSBBdHRpbGl1cyBWZXJnaWxpbywgYW5kIHRoZW4gdGhlIHNvbGRpZXJzIGh1cmxlZCBqYXZlbGlucyBhdCB0aGUgbGl0dGVyOyBhbmQgc2luY2UgdGhleSBmYWlsZWQgdG8gc3RyaWtlIGl0LCB0aGV5IGFkdmFuY2VkIHVwb24gaXQgd2l0aCB0aGVpciBzd29yZHMgZHJhd24uIE5vIG9uZSBvcHBvc2VkIHRoZW0gb3IgdHJpZWQgdG8gZGVmZW5kIHRoZSBlbXBlcm9yLCBleGNlcHQgb25lIG1hbiwgYW5kIGhlIHdhcyB0aGUgb25seSBvbmUsIGFtb25nIGFsbCB0aGUgdGhvdXNhbmRzIHRoZXJlIG9uIHdob20gdGhlIHN1biBsb29rZWQgZG93biwgd2hvIHdhcyB3b3J0aHkgb2YgdGhlIFJvbWFuIGVtcGlyZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgU2VtcHJvbml1cyBEZW5zdXMsIGEgY2VudHVyaW9uLCBhbmQgdGhvdWdoIGhlIGhhZCByZWNlaXZlZCBubyBzcGVjaWFsIGZhdm91cnMgZnJvbSBHYWxiYSwgeWV0IGluIGRlZmVuY2Ugb2YgaG9ub3VyIGFuZCB0aGUgbGF3IGhlIHRvb2sgaGlzIHN0YW5kIGluIGZyb250IG9mIHRoZSBsaXR0ZXIuIEFuZCBmaXJzdCwgbGlmdGluZyB1cCB0aGUgc3dpdGNoIHdpdGggd2hpY2ggY2VudHVyaW9ucyBwdW5pc2ggc29sZGllcnMgZGVzZXJ2aW5nIG9mIHN0cmlwZXMsIGhlIGNyaWVkIG91dCB0byB0aGUgYXNzYWlsYW50cyBhbmQgb3JkZXJlZCB0aGVtIHRvIHNwYXJlIHRoZSBlbXBlcm9yLiBUaGVuLCBhcyB0aGV5IGNhbWUgdG8gY2xvc2UgcXVhcnRlcnMgd2l0aCBoaW0sIGhlIGRyZXcgaGlzIHN3b3JkLCBhbmQgZm91Z2h0IHRoZW0gb2ZmIGEgbG9uZyB0aW1lLCB1bnRpbCBoZSBmZWxsIHdpdGggYSB3b3VuZCBpbiB0aGUgZ3JvaW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdywgYXMgR2FsYmEgcHVycG9zZWQgdG8gZ28gZm9ydGgsIGFuZCBWaW5pdXMgd291bGQgbm90IHBlcm1pdCBpdCwgd2hpbGUgQ2Vsc3VzIGFuZCBMYWNvIHVyZ2VkIGl0IGFuZCB2ZWhlbWVudGx5IGNoaWRlZCBWaW5pdXMsIGEgcnVtb3VyIHNwcmVhZCBpbnNpc3RlbnRseSB0aGF0IE90aG8gaGFkIGJlZW4gc2xhaW4gaW4gdGhlIGNhbXA7IGFuZCBhZnRlciBhIGxpdHRsZSwgSnVsaXVzIEF0dGljdXMsIGEgc29sZGllciBvZiBkaXN0aW5jdGlvbiBhbW9uZyB0aGUgZ3VhcmRzLCB3YXMgc2VlbiBydXNoaW5nIHVwIHdpdGggaGlzIHN3b3JkIGRyYXduLCBhbmQgY3J5aW5nIG91dCB0aGF0IGhlIGhhZCBzbGFpbiB0aGUgZW5lbXkgb2YgQ2Flc2FyOyBhbmQgZm9yY2luZyBoaXMgd2F5IHRocm91Z2ggdGhlIGNyb3dkIGFib3V0IEdhbGJhLCBoZSBzaG93ZWQgaGltIGhpcyBzd29yZCBhbGwgc3RhaW5lZCB3aXRoIGJsb29kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gR2FsYmEgZml4ZWQgaGlzIGV5ZXMgdXBvbiBoaW0gYW5kIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaG8gZ2F2ZSB0aGVlIHRoeSBvcmRlcnM/PC9xPiBXaGVyZXVwb24gdGhlIG1hbiByZXBsaWVkIHRoYXQgaXQgd2FzIGhpcyBmaWRlbGl0eSBhbmQgdGhlIG9hdGggdGhhdCBoZSBoYWQgc3dvcm4sIGF0IHdoaWNoIHRoZSBtdWx0aXR1ZGUgY3JpZWQgb3V0IHRoYXQgaGUgaGFkIGRvbmUgd2VsbCwgYW5kIGdhdmUgaGltIHRoZWlyIGFwcGxhdXNlLiBUaGVuIEdhbGJhIGdvdCBpbnRvIGhpcyBsaXR0ZXIgYW5kIHdhcyBjYXJyaWVkIGZvcnRoLCB3aXNoaW5nIHRvIHNhY3JpZmljZSB0byBKdXBpdGVyIGFuZCBzaG93IGhpbXNlbGYgdG8gdGhlIGNpdGl6ZW5zLiBCdXQgd2hlbiBoZSB3YXMgY29tZSBpbnRvIHRoZSBmb3J1bSwgdGhlcmUgbWV0IGhpbSwgbGlrZSBhIGNoYW5nZSBvZiB3aW5kLCBhIHJlcG9ydCB0aGF0IE90aG8gd2FzIG1hc3RlciBvZiB0aGUgYXJteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFzIG1pZ2h0IGJlIGV4cGVjdGVkIGluIHNvIGdyZWF0IGEgY3Jvd2QsIHNvbWUgY3JpZWQgb3V0IHRvIGhpbSB0byB0dXJuIGJhY2ssIG90aGVycyB0byBnbyBmb3J3YXJkOyBzb21lIGJhZGUgaGltIHRvIGJlIG9mIGdvb2QgY291cmFnZSwgb3RoZXJzIHVyZ2VkIGhpbSB0byBiZSBjYXV0aW91czsgYW5kIHNvLCB3aGlsZSBoaXMgbGl0dGVyIHdhcyBzd2VwdCBoaXRoZXIgYW5kIHRoaXRoZXIsIGFzIGluIGEgc3VyZ2luZyBzZWEsIGFuZCBvZnRlbiB0aHJlYXRlbmVkIHRvIGNhcHNpemUsIHRoZXJlIGNhbWUgaW50byB2aWV3LCBmaXJzdCBob3JzZW1lbiwgYW5kIHRoZW4gbWVuLWF0LWFybXMsIGNoYXJnaW5nIHRocm91Z2ggdGhlIGJhc2lsaWNhIG9mIFBhdWx1cywgYW5kIHdpdGggb25lIHZvaWNlIGxvdWRseSBvcmRlcmluZyBhbGwgcHJpdmF0ZSBjaXRpemVucyBvdXQgb2YgdGhlaXIgd2F5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtdWx0aXR1ZGUsIGFjY29yZGluZ2x5LCB0b29rIHRvIHRoZWlyIGhlZWxzLCBub3Qgc2NhdHRlcmluZyBpbiBmbGlnaHQsIGJ1dCBzZWVraW5nIHRoZSBwb3J0aWNvZXMgYW5kIGVtaW5lbmNlcyBvZiB0aGUgZm9ydW0sIGFzIGlmIHRvIGdldCBhIHZpZXcgb2YgYSBzcGVjdGFjbGUuIEhvc3RpbGl0aWVzIGJlZ2FuIHdpdGggdGhlIG92ZXJ0aHJvdyBvZiBhIHN0YXR1ZSBvZiBHYWxiYSBieSBBdHRpbGl1cyBWZXJnaWxpbywgYW5kIHRoZW4gdGhlIHNvbGRpZXJzIGh1cmxlZCBqYXZlbGlucyBhdCB0aGUgbGl0dGVyOyBhbmQgc2luY2UgdGhleSBmYWlsZWQgdG8gc3RyaWtlIGl0LCB0aGV5IGFkdmFuY2VkIHVwb24gaXQgd2l0aCB0aGVpciBzd29yZHMgZHJhd24uIE5vIG9uZSBvcHBvc2VkIHRoZW0gb3IgdHJpZWQgdG8gZGVmZW5kIHRoZSBlbXBlcm9yLCBleGNlcHQgb25lIG1hbiwgYW5kIGhlIHdhcyB0aGUgb25seSBvbmUsIGFtb25nIGFsbCB0aGUgdGhvdXNhbmRzIHRoZXJlIG9uIHdob20gdGhlIHN1biBsb29rZWQgZG93biwgd2hvIHdhcyB3b3J0aHkgb2YgdGhlIFJvbWFuIGVtcGlyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIFNlbXByb25pdXMgRGVuc3VzLCBhIGNlbnR1cmlvbiwgYW5kIHRob3VnaCBoZSBoYWQgcmVjZWl2ZWQgbm8gc3BlY2lhbCBmYXZvdXJzIGZyb20gR2FsYmEsIHlldCBpbiBkZWZlbmNlIG9mIGhvbm91ciBhbmQgdGhlIGxhdyBoZSB0b29rIGhpcyBzdGFuZCBpbiBmcm9udCBvZiB0aGUgbGl0dGVyLiBBbmQgZmlyc3QsIGxpZnRpbmcgdXAgdGhlIHN3aXRjaCB3aXRoIHdoaWNoIGNlbnR1cmlvbnMgcHVuaXNoIHNvbGRpZXJzIGRlc2VydmluZyBvZiBzdHJpcGVzLCBoZSBjcmllZCBvdXQgdG8gdGhlIGFzc2FpbGFudHMgYW5kIG9yZGVyZWQgdGhlbSB0byBzcGFyZSB0aGUgZW1wZXJvci4gVGhlbiwgYXMgdGhleSBjYW1lIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggaGltLCBoZSBkcmV3IGhpcyBzd29yZCwgYW5kIGZvdWdodCB0aGVtIG9mZiBhIGxvbmcgdGltZSwgdW50aWwgaGUgZmVsbCB3aXRoIGEgd291bmQgaW4gdGhlIGdyb2luLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbGl0dGVyIHdhcyB1cHNldCBhdCB0aGUgcGxhY2UgY2FsbGVkIExhY3VzIEN1cnRpdXMsIGFuZCB0aGVyZSBHYWxiYSB0dW1ibGVkIG91dCBhbmQgbGF5IGluIGhpcyBjb3JzZWxldCwgd2hpbGUgdGhlIHNvbGRpZXJzIHJhbiB1cCBhbmQgc3RydWNrIGF0IGhpbS4gQnV0IGhlIG1lcmVseSBwcmVzZW50ZWQgaGlzIG5lY2sgdG8gdGhlaXIgc3dvcmRzLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG8geW91ciB3b3JrLCBpZiB0aGlzIGlzIGJldHRlciBmb3IgdGhlIFJvbWFuIHBlb3BsZS4iPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCBhZnRlciByZWNlaXZpbmcgbWFueSB3b3VuZHMgaW4gaGlzIGxlZ3MgYW5kIGFybXMsIGhlIHdhcyBzbGFpbiwgYXMgbW9zdCB3cml0ZXJzIHN0YXRlLCBieSBhIGNlcnRhaW4gQ2FtdXJpdXMsIG9mIHRoZSBmaWZ0ZWVudGggbGVnaW9uLiBTb21lLCBob3dldmVyLCBhc2NyaWJlIGhpcyBkZWF0aCB0byBUZXJlbnRpdXMsIG90aGVycyB0byBMZWNhbml1cywgYW5kIG90aGVycyBzdGlsbCB0byBGYWJpdXMgRmFidWx1cywgd2hvLCB0aGV5IHNheSwgY3V0IG9mZiBHYWxiYSdzIGhlYWQgYW5kIHdhcyBjYXJyeWluZyBpdCB3cmFwcGVkIGluIGhpcyBjbG9haywgc2luY2UgaXRzIGJhbGRuZXNzIG1hZGUgaXQgZGlmZmljdWx0IHRvIGdyYXNwOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz50aGVuLCBzaW5jZSBoaXMgY29tcGFuaW9ucyB3b3VsZCBub3Qgc3VmZmVyIGhpbSB0byBoaWRlIGhpcyBkZWVkIG9mIHZhbG91ciwgYnV0IGluc2lzdGVkIG9uIGhpcyBkaXNwbGF5aW5nIGl0IHRvIGFsbCBleWVzLCBoZSBpbXBhbGVkIG9uIGhpcyBzcGVhciBhbmQgdGhydXN0IG9uIGhpZ2ggdGhlIGhlYWQgb2YgYW4gYWdlZCBtYW4sIHdobyBoYWQgYmVlbiBhIHRlbXBlcmF0ZSBydWxlciwgYSBoaWdoIHByaWVzdCwgYW5kIGEgY29uc3VsLCBhbmQgcmFuIHdpdGggaXQsIGxpa2UgYSBiYWNjaGFuYWwsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U28gdGhlIEJhY2NoYW5hbHMgd2l0aCB0aGUgaGVhZCBvZiBQZW50aGV1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkV1ci4gQmEuIDExNTMiIHZhbGlkPSJ5ZXMiPkV1cmlwaWRlcywgPHRpdGxlPkJhY2NoYWU8L3RpdGxlPiwgMTE1MyBmZjwvYmlibD4pLjwvbm90ZT4gd2hpcmxpbmcgYWJvdXQgb2Z0ZW4sIGFuZCBicmFuZGlzaGluZyB0aGUgc3BlYXIgYWxsIGRyaXBwaW5nIHdpdGggYmxvb2QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGxpdHRlciB3YXMgdXBzZXQgYXQgdGhlIHBsYWNlIGNhbGxlZCBMYWN1cyBDdXJ0aXVzLCBhbmQgdGhlcmUgR2FsYmEgdHVtYmxlZCBvdXQgYW5kIGxheSBpbiBoaXMgY29yc2VsZXQsIHdoaWxlIHRoZSBzb2xkaWVycyByYW4gdXAgYW5kIHN0cnVjayBhdCBoaW0uIEJ1dCBoZSBtZXJlbHkgcHJlc2VudGVkIGhpcyBuZWNrIHRvIHRoZWlyIHN3b3Jkcywgc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG8geW91ciB3b3JrLCBpZiB0aGlzIGlzIGJldHRlciBmb3IgdGhlIFJvbWFuIHBlb3BsZS4iPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCBhZnRlciByZWNlaXZpbmcgbWFueSB3b3VuZHMgaW4gaGlzIGxlZ3MgYW5kIGFybXMsIGhlIHdhcyBzbGFpbiwgYXMgbW9zdCB3cml0ZXJzIHN0YXRlLCBieSBhIGNlcnRhaW4gQ2FtdXJpdXMsIG9mIHRoZSBmaWZ0ZWVudGggbGVnaW9uLiBTb21lLCBob3dldmVyLCBhc2NyaWJlIGhpcyBkZWF0aCB0byBUZXJlbnRpdXMsIG90aGVycyB0byBMZWNhbml1cywgYW5kIG90aGVycyBzdGlsbCB0byBGYWJpdXMgRmFidWx1cywgd2hvLCB0aGV5IHNheSwgY3V0IG9mZiBHYWxiYSdzIGhlYWQgYW5kIHdhcyBjYXJyeWluZyBpdCB3cmFwcGVkIGluIGhpcyBjbG9haywgc2luY2UgaXRzIGJhbGRuZXNzIG1hZGUgaXQgZGlmZmljdWx0IHRvIGdyYXNwOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoZW4sIHNpbmNlIGhpcyBjb21wYW5pb25zIHdvdWxkIG5vdCBzdWZmZXIgaGltIHRvIGhpZGUgaGlzIGRlZWQgb2YgdmFsb3VyLCBidXQgaW5zaXN0ZWQgb24gaGlzIGRpc3BsYXlpbmcgaXQgdG8gYWxsIGV5ZXMsIGhlIGltcGFsZWQgb24gaGlzIHNwZWFyIGFuZCB0aHJ1c3Qgb24gaGlnaCB0aGUgaGVhZCBvZiBhbiBhZ2VkIG1hbiwgd2hvIGhhZCBiZWVuIGEgdGVtcGVyYXRlIHJ1bGVyLCBhIGhpZ2ggcHJpZXN0LCBhbmQgYSBjb25zdWwsIGFuZCByYW4gd2l0aCBpdCwgbGlrZSBhIGJhY2NoYW5hbCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNvIHRoZSBCYWNjaGFuYWxzIHdpdGggdGhlIGhlYWQgb2YgUGVudGhldXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkV1ci4gQmEuIDExNTMiIHZhbGlkPSJ5ZXMiPkV1cmlwaWRlcywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmFjY2hhZTwvdGl0bGU+LCAxMTUzIGZmPC9iaWJsPikuPC9ub3RlPiB3aGlybGluZyBhYm91dCBvZnRlbiwgYW5kIGJyYW5kaXNoaW5nIHRoZSBzcGVhciBhbGwgZHJpcHBpbmcgd2l0aCBibG9vZC4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBCYS4gMTE1MyIgdmFsaWQ9InllcyI+RXVyaXBpZGVzLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CYWNjaGFlPC90aXRsZT4sIDExNTMgZmY8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CYWNjaGFlPC90aXRsZT4sIDExNTMgZmY8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBPdGhvLCBhcyB0aGV5IHNheSwgd2hlbiB0aGUgaGVhZCB3YXMgYnJvdWdodCB0byBoaW0sIGNyaWVkIG91dDogIgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGlzIG5vdGhpbmcsIGZlbGxvdy1zb2xkaWVyczsgc2hvdyBtZSB0aGUgaGVhZCBvZiBQaXNvLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciBhIGxpdHRsZSBpdCB3YXMgYnJvdWdodCB0byBoaW07IGZvciB0aGUgeW91bmcgbWFuIGhhZCBiZWVuIHdvdW5kZWQgYW5kIHRyaWVkIHRvIGVzY2FwZSwgYW5kIGEgY2VydGFpbiBNdXJjdXMgcmFuIGhpbSBkb3duIGFuZCBzbGV3IGhpbSBhdCB0aGUgdGVtcGxlIG9mIFZlc3RhLiBWaW5pdXMgYWxzbyB3YXMgc2xhaW4sIGFuZCBoZSBhZG1pdHRlZCBoaW1zZWxmIGEgcGFydHkgdG8gdGhlIGNvbnNwaXJhY3kgYWdhaW5zdCBHYWxiYSBieSBjcnlpbmcgb3V0IHRoYXQgaGUgd2FzIHB1dCB0byBkZWF0aCBjb250cmFyeSB0byB0aGUgd2lzaGVzIG9mIE90aG8uIEhvd2V2ZXIsIHRoZXkgY3V0IG9mZiBoaXMgaGVhZCwgYW5kIExhY28ncyB0b28sIGFuZCBicm91Z2h0IHRoZW0gdG8gT3Robywgb2Ygd2hvbSB0aGV5IGRlbWFuZGVkIGxhcmdlc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBBcmNoaWxvY2h1cyBzYXlzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QmVyZ2ssIDx0aXRsZT5MeXIuIEdyLjwvdGl0bGU+LiBGcmFnLiBpaS40IHAuIDM5OC48L25vdGU+IHRoYXQsCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPk9ubHkgc2V2ZW4gbGF5IGRlYWQgb24gdGhlIGdyb3VuZCwgd2hlcmUgd2UgdHJvZCB0aGVpciBib2RpZXMgdW5kZXIgZm9vdC4gQnV0IHdlIHdobyBzbGV3IGFyZSBhIHRob3VzYW5kLDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCXNvIGluIHRoaXMgY2FzZSwgbWFueSB3aG8gaGFkIG5vIHBhcnQgaW4gdGhlIG11cmRlciBzbWVhcmVkIHRoZWlyIGhhbmRzIGFuZCBzd29yZHMgd2l0aCBibG9vZCBhbmQgc2hvd2VkIHRoZW0gdG8gT3RobywgYXMgdGhleSBwcmVzZW50ZWQgaGltIHdpdGggd3JpdHRlbiBwZXRpdGlvbnMgZm9yIGxhcmdlc3MuIEF0IGFueSByYXRlLCBhIGh1bmRyZWQgYW5kIHR3ZW50eSB3ZXJlIGFmdGVyd2FyZHMgZGlzY292ZXJlZCBieSBtZWFucyBvZiB0aGVzZSBwZXRpdGlvbnMsIGFsbCBvZiB3aG9tIHdlcmUgc291Z2h0IG91dCBhbmQgcHV0IHRvIGRlYXRoIGJ5IFZpdGVsbGl1cy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzIENlbHN1cyBhbHNvIGNhbWUgaW50byB0aGUgY2FtcC4gVGhlcmUgbWFueSBkZW5vdW5jZWQgaGltIGZvciB0cnlpbmcgdG8gcGVyc3VhZGUgdGhlIHNvbGRpZXJzIHRvIGRlZmVuZCBHYWxiYSwgYW5kIHRoZSBtYWpvcml0eSBjbGFtb3VyZWQgZm9yIGhpcyBkZWF0aCwgYnV0IE90aG8gZGlkIG5vdCB3aXNoIGl0OyBob3dldmVyLCBzaW5jZSBoZSB3YXMgYWZyYWlkIHRvIG9wcG9zZSB0aGVtLCBoZSBzYWlkIGhlIHdvdWxkIG5vdCBwdXQgQ2Vsc3VzIHRvIGRlYXRoIHNvIHF1aWNrbHksIHNpbmNlIHRoZXJlIHdlcmUgbWF0dGVycyBhYm91dCB3aGljaCBoZSBtdXN0IGZpcnN0IHF1ZXN0aW9uIGhpbS4gSGUgdGhlcmVmb3JlIG9yZGVyZWQgdGhhdCBoZSBiZSBmZXR0ZXJlZCBhbmQga2VwdCB1bmRlciBndWFyZCwgYW5kIGhhbmRlZCBvdmVyIHRvIHRob3NlIGluIHdob20gaGUgcHV0IG1vc3QgdHJ1c3QuCgkJCTwvcD4KICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGlzIG5vdGhpbmcsIGZlbGxvdy1zb2xkaWVyczsgc2hvdyBtZSB0aGUgaGVhZCBvZiBQaXNvLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciBhIGxpdHRsZSBpdCB3YXMgYnJvdWdodCB0byBoaW07IGZvciB0aGUgeW91bmcgbWFuIGhhZCBiZWVuIHdvdW5kZWQgYW5kIHRyaWVkIHRvIGVzY2FwZSwgYW5kIGEgY2VydGFpbiBNdXJjdXMgcmFuIGhpbSBkb3duIGFuZCBzbGV3IGhpbSBhdCB0aGUgdGVtcGxlIG9mIFZlc3RhLiBWaW5pdXMgYWxzbyB3YXMgc2xhaW4sIGFuZCBoZSBhZG1pdHRlZCBoaW1zZWxmIGEgcGFydHkgdG8gdGhlIGNvbnNwaXJhY3kgYWdhaW5zdCBHYWxiYSBieSBjcnlpbmcgb3V0IHRoYXQgaGUgd2FzIHB1dCB0byBkZWF0aCBjb250cmFyeSB0byB0aGUgd2lzaGVzIG9mIE90aG8uIEhvd2V2ZXIsIHRoZXkgY3V0IG9mZiBoaXMgaGVhZCwgYW5kIExhY28ncyB0b28sIGFuZCBicm91Z2h0IHRoZW0gdG8gT3Robywgb2Ygd2hvbSB0aGV5IGRlbWFuZGVkIGxhcmdlc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBBcmNoaWxvY2h1cyBzYXlzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5CZXJnaywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THlyLiBHci48L3RpdGxlPi4gRnJhZy4gaWkuNCBwLiAzOTguPC9ub3RlPiB0aGF0LAoJCQkJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THlyLiBHci48L3RpdGxlPi4gRnJhZy4gaWkuNCBwLiAzOTguPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T25seSBzZXZlbiBsYXkgZGVhZCBvbiB0aGUgZ3JvdW5kLCB3aGVyZSB3ZSB0cm9kIHRoZWlyIGJvZGllcyB1bmRlciBmb290LiBCdXQgd2Ugd2hvIHNsZXcgYXJlIGEgdGhvdXNhbmQsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJc28gaW4gdGhpcyBjYXNlLCBtYW55IHdobyBoYWQgbm8gcGFydCBpbiB0aGUgbXVyZGVyIHNtZWFyZWQgdGhlaXIgaGFuZHMgYW5kIHN3b3JkcyB3aXRoIGJsb29kIGFuZCBzaG93ZWQgdGhlbSB0byBPdGhvLCBhcyB0aGV5IHByZXNlbnRlZCBoaW0gd2l0aCB3cml0dGVuIHBldGl0aW9ucyBmb3IgbGFyZ2Vzcy4gQXQgYW55IHJhdGUsIGEgaHVuZHJlZCBhbmQgdHdlbnR5IHdlcmUgYWZ0ZXJ3YXJkcyBkaXNjb3ZlcmVkIGJ5IG1lYW5zIG9mIHRoZXNlIHBldGl0aW9ucywgYWxsIG9mIHdob20gd2VyZSBzb3VnaHQgb3V0IGFuZCBwdXQgdG8gZGVhdGggYnkgVml0ZWxsaXVzLiAKCQkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T25seSBzZXZlbiBsYXkgZGVhZCBvbiB0aGUgZ3JvdW5kLCB3aGVyZSB3ZSB0cm9kIHRoZWlyIGJvZGllcyB1bmRlciBmb290LiBCdXQgd2Ugd2hvIHNsZXcgYXJlIGEgdGhvdXNhbmQsPC9sPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyBDZWxzdXMgYWxzbyBjYW1lIGludG8gdGhlIGNhbXAuIFRoZXJlIG1hbnkgZGVub3VuY2VkIGhpbSBmb3IgdHJ5aW5nIHRvIHBlcnN1YWRlIHRoZSBzb2xkaWVycyB0byBkZWZlbmQgR2FsYmEsIGFuZCB0aGUgbWFqb3JpdHkgY2xhbW91cmVkIGZvciBoaXMgZGVhdGgsIGJ1dCBPdGhvIGRpZCBub3Qgd2lzaCBpdDsgaG93ZXZlciwgc2luY2UgaGUgd2FzIGFmcmFpZCB0byBvcHBvc2UgdGhlbSwgaGUgc2FpZCBoZSB3b3VsZCBub3QgcHV0IENlbHN1cyB0byBkZWF0aCBzbyBxdWlja2x5LCBzaW5jZSB0aGVyZSB3ZXJlIG1hdHRlcnMgYWJvdXQgd2hpY2ggaGUgbXVzdCBmaXJzdCBxdWVzdGlvbiBoaW0uIEhlIHRoZXJlZm9yZSBvcmRlcmVkIHRoYXQgaGUgYmUgZmV0dGVyZWQgYW5kIGtlcHQgdW5kZXIgZ3VhcmQsIGFuZCBoYW5kZWQgb3ZlciB0byB0aG9zZSBpbiB3aG9tIGhlIHB1dCBtb3N0IHRydXN0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIHNlbmF0ZSB3YXMgYXQgb25jZSBjb252ZW5lZC4gQW5kIGFzIGlmIHRoZXkgd2VyZSBub3cgb3RoZXIgbWVuLCBvciBoYWQgb3RoZXIgZ29kcyB0byBzd2VhciBieSwgdGhleSB1bml0ZWQgaW4gc3dlYXJpbmcgYW4gb2F0aCB0byBzdXBwb3J0IE90aG/igJRhbiBvYXRoIHdoaWNoIGhlIGhpbXNlbGYgaGFkIHN3b3JuIGluIHN1cHBvcnQgb2YgR2FsYmEsIGJ1dCBoYWQgbm90IGtlcHQuIE1vcmVvdmVyLCB0aGV5IGdhdmUgaGltIHRoZSB0aXRsZXMgb2YgQ2Flc2FyIGFuZCBBdWd1c3R1cywgd2hpbGUgdGhlIGRlYWQgYm9kaWVzLCBhbGwgaGVhZGxlc3MgaW4gdGhlaXIgY29uc3VsYXIgcm9iZXMsIHdlcmUgc3RpbGwgc3RyZXduIG92ZXIgdGhlIGZvcnVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXMgZm9yIHRoZSBoZWFkcywgd2hlbiB0aGV5IGhhZCBubyBmdXJ0aGVyIHVzZSBmb3IgdGhlbSwgdGhhdCBvZiBWaW5pdXMgdGhleSBzb2xkIHRvIGhpcyBkYXVnaHRlciBmb3IgdHdlbnR5LWZpdmUgaHVuZHJlZCBkcmFjaG1hczsgdGhhdCBvZiBQaXNvIHdhcyBnaXZlbiB0byBoaXMgd2lmZSBWZXJhbmlhIGluIGFuc3dlciB0byBoZXIgcHJheWVyczsgYW5kIHRoYXQgb2YgR2FsYmEgd2FzIGJlc3Rvd2VkIHVwb24gdGhlIHNlcnZhbnRzIG9mIFBhdHJvYml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB0b29rIGl0LCBhbmQgYWZ0ZXIgaGVhcGluZyBhbGwgbWFubmVyIG9mIGluc3VsdCBhbmQgb3V0cmFnZSB1cG9uIGl0LCBjYXN0IGl0IGludG8gYSBwbGFjZSBjYWxsZWQgU2Vzc29yaXVtLCB3aGVyZSB0aG9zZSB1bmRlciBjb25kZW1uYXRpb24gb2YgdGhlIGVtcGVyb3JzIGFyZSBwdXQgdG8gZGVhdGguIFRoZSBib2R5IG9mIEdhbGJhIHdhcyB0YWtlbiB1cCBieSBQcmlzY3VzIEhlbHZpZGl1cywgd2l0aCB0aGUgcGVybWlzc2lvbiBvZiBPdGhvOyBhbmQgaXQgd2FzIGJ1cmllZCBhdCBuaWdodCBieSBBcmdpdnVzLCBhIGZyZWVkIG1hbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSBzZW5hdGUgd2FzIGF0IG9uY2UgY29udmVuZWQuIEFuZCBhcyBpZiB0aGV5IHdlcmUgbm93IG90aGVyIG1lbiwgb3IgaGFkIG90aGVyIGdvZHMgdG8gc3dlYXIgYnksIHRoZXkgdW5pdGVkIGluIHN3ZWFyaW5nIGFuIG9hdGggdG8gc3VwcG9ydCBPdGhv4oCUYW4gb2F0aCB3aGljaCBoZSBoaW1zZWxmIGhhZCBzd29ybiBpbiBzdXBwb3J0IG9mIEdhbGJhLCBidXQgaGFkIG5vdCBrZXB0LiBNb3Jlb3ZlciwgdGhleSBnYXZlIGhpbSB0aGUgdGl0bGVzIG9mIENhZXNhciBhbmQgQXVndXN0dXMsIHdoaWxlIHRoZSBkZWFkIGJvZGllcywgYWxsIGhlYWRsZXNzIGluIHRoZWlyIGNvbnN1bGFyIHJvYmVzLCB3ZXJlIHN0aWxsIHN0cmV3biBvdmVyIHRoZSBmb3J1bS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgdGhlIGhlYWRzLCB3aGVuIHRoZXkgaGFkIG5vIGZ1cnRoZXIgdXNlIGZvciB0aGVtLCB0aGF0IG9mIFZpbml1cyB0aGV5IHNvbGQgdG8gaGlzIGRhdWdodGVyIGZvciB0d2VudHktZml2ZSBodW5kcmVkIGRyYWNobWFzOyB0aGF0IG9mIFBpc28gd2FzIGdpdmVuIHRvIGhpcyB3aWZlIFZlcmFuaWEgaW4gYW5zd2VyIHRvIGhlciBwcmF5ZXJzOyBhbmQgdGhhdCBvZiBHYWxiYSB3YXMgYmVzdG93ZWQgdXBvbiB0aGUgc2VydmFudHMgb2YgUGF0cm9iaXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgdG9vayBpdCwgYW5kIGFmdGVyIGhlYXBpbmcgYWxsIG1hbm5lciBvZiBpbnN1bHQgYW5kIG91dHJhZ2UgdXBvbiBpdCwgY2FzdCBpdCBpbnRvIGEgcGxhY2UgY2FsbGVkIFNlc3Nvcml1bSwgd2hlcmUgdGhvc2UgdW5kZXIgY29uZGVtbmF0aW9uIG9mIHRoZSBlbXBlcm9ycyBhcmUgcHV0IHRvIGRlYXRoLiBUaGUgYm9keSBvZiBHYWxiYSB3YXMgdGFrZW4gdXAgYnkgUHJpc2N1cyBIZWx2aWRpdXMsIHdpdGggdGhlIHBlcm1pc3Npb24gb2YgT3RobzsgYW5kIGl0IHdhcyBidXJpZWQgYXQgbmlnaHQgYnkgQXJnaXZ1cywgYSBmcmVlZCBtYW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggd2VyZSB0aGUgZm9ydHVuZXMgb2YgR2FsYmEsIGEgbWFuIHN1cnBhc3NlZCBieSBmZXcgUm9tYW5zIGluIGxpbmVhZ2UgYW5kIHdlYWx0aCwgYW5kIGJvdGggaW4gd2VhbHRoIGFuZCBsaW5lYWdlIHRoZSBmb3JlbW9zdCBvZiBoaXMgdGltZS4gRHVyaW5nIHRoZSByZWlnbnMgb2YgZml2ZSBlbXBlcm9ycyBoZSBsaXZlZCB3aXRoIGhvbm91ciBhbmQgaGlnaCByZXB1dGUsIHNvIHRoYXQgaXQgd2FzIGJ5IGhpcyBoaWdoIHJlcHV0ZSwgcmF0aGVyIHRoYW4gYnkgaGlzIG1pbGl0YXJ5IHBvd2VyLCB0aGF0IGhlIG92ZXJ0aHJldyBOZXJvLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igb2YgaGlzIHBhcnRuZXJzIGluIHRoZSB0YXNrLCBzb21lIHdlcmUgYnkgYWxsIG1lbiBkZWVtZWQgdW53b3J0aHkgb2YgdGhlIGltcGVyaWFsIGRpZ25pdHksIGFuZCBvdGhlcnMgZGVlbWVkIHRoZW1zZWx2ZXMgdW53b3J0aHkuIEJ1dCB0byBHYWxiYSB0aGUgaW1wZXJpYWwgdGl0bGUgd2FzIG9mZmVyZWQgYW5kIGJ5IGhpbSBpdCB3YXMgYWNjZXB0ZWQ7IGFuZCBieSBzaW1wbHkgbGVuZGluZyBoaXMgbmFtZSB0byB0aGUgYm9sZCBtZWFzdXJlcyBvZiBWaW5kZXgsIGhlIGdhdmUgdG8gaGlzIHJldm9sdCAoYXMgaGlzIHJlYmVsbGlvdXMgYWdpdGF0aW9uIHdhcyBjYWxsZWQpIHRoZSBjaGFyYWN0ZXIgb2YgYSBjaXZpbCB3YXIsIGJlY2F1c2UgaXQgaGFkIGFjcXVpcmVkIGEgbWFuIHdobyB3YXMgd29ydGh5IHRvIHJ1bGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgaW4gdGhlIGJlbGllZiB0aGF0IGhlIHdhcyBub3Qgc2VpemluZyB0aGUgY29uZHVjdCBvZiBhZmZhaXJzIGZvciBoaW1zZWxmLCBidXQgcmF0aGVyIGdpdmluZyBoaW1zZWxmIGZvciB0aGUgY29uZHVjdCBvZiBhZmZhaXJzLCBoZSBzZXQgb3V0IHdpdGggdGhlIGlkZWEgb2YgY29tbWFuZGluZyB0aGUgcGV0dGVkIGNyZWF0dXJlcyBvZiBUaWdlbGxpbnVzIGFuZCBOeW1waGlkaXVzIGFzIFNjaXBpbyBhbmQgRmFicmljaXVzIGFuZCBDYW1pbGx1cyB1c2VkIHRvIGNvbW1hbmQgdGhlIFJvbWFucyBvZiB0aGVpciB0aW1lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYmVpbmcgZ3JhZHVhbGx5IHdlaWdoZWQgZG93biBieSBoaXMgeWVhcnMsIGluIGFybXMgYW5kIGNhbXBzLCBpbmRlZWQsIGhlIHdhcyBhbiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmltcGVyYXRvcjwvcT4gb2YgYSBzZXZlcmUgYW5kIGFuY2llbnQgdHlwZTsgYnV0IGp1c3QgYXMgTmVybyBwdXQgaGltc2VsZiBpbiB0aGUgaGFuZHMgb2YgaGlzIG1vc3QgaW5zYXRpYXRlIGZhdm91cml0ZXMsIHNvIEdhbGJhIHB1dCBoaW1zZWxmIGluIHRoZSBoYW5kcyBvZiBWaW5pdXMgYW5kIExhY28gYW5kIHRoZWlyIGZyZWVkbWVuLCBhbmQgdGhleSBtYWRlIG1lcmNoYW5kaXNlIG9mIGV2ZXJ5dGhpbmcsIHNvIHRoYXQgaGUgbGVmdCBiZWhpbmQgaGltIG5vIG9uZSB3aG8gd2lzaGVkIGhpbSBzdGlsbCBpbiBwb3dlciwgYnV0IHZlcnkgbWFueSB3aG8gd2VyZSBtb3ZlZCB0byBwaXR5IGF0IGhpcyBkZWF0aC4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3ZXJlIHRoZSBmb3J0dW5lcyBvZiBHYWxiYSwgYSBtYW4gc3VycGFzc2VkIGJ5IGZldyBSb21hbnMgaW4gbGluZWFnZSBhbmQgd2VhbHRoLCBhbmQgYm90aCBpbiB3ZWFsdGggYW5kIGxpbmVhZ2UgdGhlIGZvcmVtb3N0IG9mIGhpcyB0aW1lLiBEdXJpbmcgdGhlIHJlaWducyBvZiBmaXZlIGVtcGVyb3JzIGhlIGxpdmVkIHdpdGggaG9ub3VyIGFuZCBoaWdoIHJlcHV0ZSwgc28gdGhhdCBpdCB3YXMgYnkgaGlzIGhpZ2ggcmVwdXRlLCByYXRoZXIgdGhhbiBieSBoaXMgbWlsaXRhcnkgcG93ZXIsIHRoYXQgaGUgb3ZlcnRocmV3IE5lcm8uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBvZiBoaXMgcGFydG5lcnMgaW4gdGhlIHRhc2ssIHNvbWUgd2VyZSBieSBhbGwgbWVuIGRlZW1lZCB1bndvcnRoeSBvZiB0aGUgaW1wZXJpYWwgZGlnbml0eSwgYW5kIG90aGVycyBkZWVtZWQgdGhlbXNlbHZlcyB1bndvcnRoeS4gQnV0IHRvIEdhbGJhIHRoZSBpbXBlcmlhbCB0aXRsZSB3YXMgb2ZmZXJlZCBhbmQgYnkgaGltIGl0IHdhcyBhY2NlcHRlZDsgYW5kIGJ5IHNpbXBseSBsZW5kaW5nIGhpcyBuYW1lIHRvIHRoZSBib2xkIG1lYXN1cmVzIG9mIFZpbmRleCwgaGUgZ2F2ZSB0byBoaXMgcmV2b2x0IChhcyBoaXMgcmViZWxsaW91cyBhZ2l0YXRpb24gd2FzIGNhbGxlZCkgdGhlIGNoYXJhY3RlciBvZiBhIGNpdmlsIHdhciwgYmVjYXVzZSBpdCBoYWQgYWNxdWlyZWQgYSBtYW4gd2hvIHdhcyB3b3J0aHkgdG8gcnVsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgaW4gdGhlIGJlbGllZiB0aGF0IGhlIHdhcyBub3Qgc2VpemluZyB0aGUgY29uZHVjdCBvZiBhZmZhaXJzIGZvciBoaW1zZWxmLCBidXQgcmF0aGVyIGdpdmluZyBoaW1zZWxmIGZvciB0aGUgY29uZHVjdCBvZiBhZmZhaXJzLCBoZSBzZXQgb3V0IHdpdGggdGhlIGlkZWEgb2YgY29tbWFuZGluZyB0aGUgcGV0dGVkIGNyZWF0dXJlcyBvZiBUaWdlbGxpbnVzIGFuZCBOeW1waGlkaXVzIGFzIFNjaXBpbyBhbmQgRmFicmljaXVzIGFuZCBDYW1pbGx1cyB1c2VkIHRvIGNvbW1hbmQgdGhlIFJvbWFucyBvZiB0aGVpciB0aW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
