var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = document.getElementsByClassName(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGFmdGVyIHRpbWUsIGhvd2V2ZXIsIE5lb3B0b2xlbXVzIHRoZSBzb24gb2YgQWNoaWxsZXMsIGJyaW5naW5nIGEgcGVvcGxlIHdpdGggaGltLCBnb3QgcG9zc2Vzc2lvbiBvZiB0aGUgY291bnRyeSBmb3IgaGltc2VsZiwgYW5kIGxlZnQgYSBsaW5lIG9mIGtpbmdzIGRlc2NlbmRpbmcgZnJvbSBoaW0uIFRoZXNlIHdlcmUgY2FsbGVkIGFmdGVyIGhpbSBQeXJyaGlkYWU7IGZvciBoZSBoYWQgdGhlIHN1cm5hbWUgb2YgUHlycmh1cyBpbiBoaXMgYm95aG9vZCwgYW5kIG9mIGhpcyBsZWdpdGltYXRlIGNoaWxkcmVuIGJ5IExhbmFzc2EsIHRoZSBkYXVnaHRlciBvZiBDbGVvZGFldXMgdGhlIHNvbiBvZiBIeWxsdXMsIG9uZSB3YXMgbmFtZWQgYnkgaGltIFB5cnJodXMuIENvbnNlcXVlbnRseSBBY2hpbGxlcyBhbHNvIG9idGFpbmVkIGRpdmluZSBob25vdXJzIGluIEVwZWlydXMsIHVuZGVyIHRoZSBuYXRpdmUgbmFtZSBvZiBBc3BldHVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUga2luZ3Mgd2hvIGZvbGxvd2VkIGluIHRoaXMgbGluZSBzb29uIGxhcHNlZCBpbnRvIGJhcmJhcmlzbSBhbmQgYmVjYW1lIHF1aXRlIG9ic2N1cmUsIGJvdGggaW4gdGhlaXIgcG93ZXIgYW5kIGluIHRoZWlyIGxpdmVzLCBhbmQgaXQgd2FzIFRoYXJyaHlwYXMsIGhpc3RvcmlhbnMgc2F5LCB3aG8gZmlyc3QgaW50cm9kdWNlZCBHcmVlayBjdXN0b21zIGFuZCBsZXR0ZXJzIGFuZCByZWd1bGF0ZWQgaGlzIGNpdGllcyBieSBodW1hbmUgbGF3cywgdGhlcmVieSBhY3F1aXJpbmcgZm9yIGhpbXNlbGYgYSBuYW1lLiBBbGNldGFzIHdhcyBhIHNvbiBvZiBUaGFycmh5cGFzLCBBcnliYXMgb2YgQWxjZXRhcywgYW5kIG9mIEFyeWJhcyBhbmQgVHJvYXMsIEFlYWNpZGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIG1hcnJpZWQgUGh0aGlhLCB0aGUgZGF1Z2h0ZXIgb2YgTWVub24gdGhlIFRoZXNzYWxpYW4sIGEgbWFuIHdobyB3b24gaGlnaCByZXB1dGUgYXQgdGhlIHRpbWUgb2YgdGhlIExhbWlhbiB3YXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjMyMy0zMjIgQi5DLiBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMjguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbW9zdGhlbmVzPC90aXRsZT4sIHh4dmlpLiAxPC9iaWJsPi48L25vdGU+IGFuZCBhY3F1aXJlZCB0aGUgaGlnaGVzdCBhdXRob3JpdHkgYW1vbmcgdGhlIGNvbmZlZGVyYXRlcyBhZnRlciBMZW9zdGhlbmVzLiBQaHRoaWEgYm9yZSB0byBBZWFjaWRlcyB0d28gZGF1Z2h0ZXJzLCBEZcOvZGFtZWlhIGFuZCBUcm9hcywgYW5kIGEgc29uLCBQeXJyaHVzLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDI4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1vc3RoZW5lczwvdGl0bGU+LCB4eHZpaS4gMTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtb3N0aGVuZXM8L3RpdGxlPiwgeHh2aWkuIDE8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmYWN0aW9ucyBhcm9zZSBhbW9uZyB0aGUgTW9sb3NzaWFucywgYW5kIGV4cGVsbGluZyBBZWFjaWRlcyB0aGV5IGJyb3VnaHQgaW50byBwb3dlciB0aGUgc29ucyBvZiBOZW9wdG9sZW11cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGJyb3RoZXIgb2YgQXJ5YmFzLCBhbmQgdGhlcmVmb3JlIHVuY2xlIG9mIEFlYWNpZGVzLjwvbm90ZT4gVGhlIGZyaWVuZHMgb2YgQWVhY2lkZXMgd2VyZSB0aGVuIHNlaXplZCBhbmQgcHV0IHRvIGRlYXRoLCBidXQgUHlycmh1cywgd2hvIHdhcyBzdGlsbCBhIGJhYmUgYW5kIHdhcyBzb3VnaHQgZm9yIGJ5IHRoZSBlbmVteSwgd2FzIHN0b2xlbiBhd2F5IGJ5IEFuZHJvY2xlaWRlcyBhbmQgQW5nZWx1cywgd2hvIHRvb2sgdG8gZmxpZ2h0LiBIb3dldmVyLCB0aGV5IHdlcmUgb2JsaWdlZCB0byB0YWtlIGFsb25nIHdpdGggdGhlbSBhIGZldyBzZXJ2YW50cywgYW5kIHdvbWVuIGZvciB0aGUgbnVyc2luZyBvZiB0aGUgY2hpbGQsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBvbiB0aGlzIGFjY291bnQgdGhlaXIgZmxpZ2h0IHdhcyBsYWJvcmlvdXMgYW5kIHNsb3cgYW5kIHRoZXkgd2VyZSBvdmVydGFrZW4uIFRoZXkgdGhlcmVmb3JlIGVudHJ1c3RlZCB0aGUgY2hpbGQgdG8gQW5kcm9jbGVpb24sIEhpcHBpYXMsIGFuZCBOZWFuZGVyLCBzdHVyZHkgYW5kIHRydXN0eSB5b3VuZyBtZW4sIHdpdGggb3JkZXJzIHRvIGZseSB3aXRoIGFsbCB0aGVpciBtaWdodCBhbmQgbWFrZSBmb3IgTWVnYXJhLCBhIE1hY2Vkb25pYW4gdG93bjsgd2hpbGUgdGhleSB0aGVtc2VsdmVzLCBwYXJ0bHkgYnkgZW50cmVhdGllcyBhbmQgcGFydGx5IGJ5IGZpZ2h0aW5nLCBzdGF5ZWQgdGhlIGNvdXJzZSBvZiB0aGUgcHVyc3VlcnMgdW50aWwgbGF0ZSBpbiB0aGUgZXZlbmluZy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlc2UgaGFkIGF0IGxhc3QgYmVlbiBkcml2ZW4gYmFjaywgdGhleSBoYXN0ZW5lZCB0byBqb2luIHRoZSBtZW4gd2hvIHdlcmUgY2FycnlpbmcgUHlycmh1cy4gVGhlIHN1biBoYWQgYWxyZWFkeSBzZXQgYW5kIHRoZXkgd2VyZSBuZWFyIHRoZWlyIGhvcGVkLWZvciByZWZ1Z2UsIHdoZW4gc3VkZGVubHkgdGhleSBmb3VuZCB0aGVtc2VsdmVzIGN1dCBvZmYgZnJvbSBpdCBieSB0aGUgcml2ZXIgd2hpY2ggZmxvd2VkIHBhc3QgdGhlIGNpdHkuIFRoaXMgaGFkIGEgZm9yYmlkZGluZyBhbmQgc2F2YWdlIGxvb2ssIGFuZCB3aGVuIHRoZXkgdHJpZWQgdG8gY3Jvc3MgaXQsIHByb3ZlZCBhbHRvZ2V0aGVyIGltcGFzc2FibGUuIEZvciBpdHMgY3VycmVudCB3YXMgZ3JlYXRseSBzd29sbGVuIGFuZCB2aW9sZW50IGZyb20gcmFpbnMgdGhhdCBoYWQgZmFsbGVuLCBhbmQgdGhlIGRhcmtuZXNzIG1hZGUgZXZlcnl0aGluZyBtb3JlIGZvcm1pZGFibGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGV5IGdhdmUgdXAgdHJ5aW5nIHRvIGNyb3NzIHVuYWlkZWQsIHNpbmNlIHRoZXkgd2VyZSBjYXJyeWluZyB0aGUgY2hpbGQgYW5kIHRoZSB3b21lbiB3aG8gY2FyZWQgZm9yIHRoZSBjaGlsZDsgYW5kIHBlcmNlaXZpbmcgc29tZSBvZiB0aGUgcGVvcGxlIG9mIHRoZSBjb3VudHJ5IHN0YW5kaW5nIG9uIHRoZSBmdXJ0aGVyIGJhbmssIHRoZXkgYmVzb3VnaHQgdGhlaXIgaGVscCBpbiBjcm9zc2luZywgYW5kIHNob3dlZCB0aGVtIFB5cnJodXMsIHdpdGggbG91ZCBjcmllcyBhbmQgc3VwcGxpY2F0aW9ucy4gQnV0IHRoZSBwZW9wbGUgb24gdGhlIG90aGVyIHNpZGUgY291bGQgbm90IGhlYXIgdGhlbSBmb3IgdGhlIHR1cmJ1bGVuY2UgYW5kIHNwbGFzaGluZyBvZiB0aGUgc3RyZWFtLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgc28gdGhlcmUgd2FzIGRlbGF5LCBvbmUgcGFydHkgc2hvdXRpbmcgd2hhdCB0aGUgb3RoZXIgY291bGQgbm90IHVuZGVyc3RhbmQsIHVudGlsIHNvbWUgb25lIGJldGhvdWdodCBoaW1zZWxmIG9mIGEgYmV0dGVyIHdheS4gSGUgc3RyaXBwZWQgb2ZmIGEgcGllY2Ugb2YgYmFyayBmcm9tIGEgdHJlZSBhbmQgd3JvdGUgdGhlcmVvbiB3aXRoIGEgYnVja2xlLXBpbiBhIG1lc3NhZ2UgdGVsbGluZyB0aGVpciBuZWVkIGFuZCB0aGUgZm9ydHVuZSBvZiB0aGUgY2hpbGQ7IHRoZW4gaGUgd3JhcHBlZCB0aGUgYmFyayBhYm91dCBhIHN0b25lLCB3aGljaCBoZSB1c2VkIHRvIGdpdmUgZm9yY2UgdG8gaGlzIGNhc3QsIGFuZCB0aHJldyBpdCB0byB0aGUgb3RoZXIgc2lkZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSBzYXksIGhvd2V2ZXIsIHRoYXQgaXQgd2FzIGEgamF2ZWxpbiBhYm91dCB3aGljaCBoZSB3cmFwcGVkIHRoZSBiYXJrLCBhbmQgdGhhdCBoZSBzaG90IGl0IGFjcm9zcy4gQWNjb3JkaW5nbHksIHdoZW4gdGhvc2Ugb24gdGhlIG90aGVyIHNpZGUgaGFkIHJlYWQgdGhlIG1lc3NhZ2UgYW5kIHNhdyB0aGF0IG5vIHRpbWUgd2FzIHRvIGJlIGxvc3QsIHRoZXkgY3V0IGRvd24gdHJlZXMsIGxhc2hlZCB0aGVtIHRvZ2V0aGVyLCBhbmQgbWFkZSB0aGVpciB3YXkgYWNyb3NzLiBBcyBjaGFuY2Ugd291bGQgaGF2ZSBpdCwgdGhlIGZpcnN0IG9mIHRoZW0gdG8gbWFrZSBoaXMgd2F5IGFjcm9zcyB3YXMgbmFtZWQgQWNoaWxsZXM7IGhlIHRvb2sgUHlycmh1cyBpbiBoaXMgYXJtcywgYW5kIHRoZSByZXN0IG9mIHRoZSBmdWdpdGl2ZXMgd2VyZSBjb252ZXllZCBhY3Jvc3MgYnkgb3RoZXJzIGluIG9uZSB3YXkgb3IgYW5vdGhlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZmFjdGlvbnMgYXJvc2UgYW1vbmcgdGhlIE1vbG9zc2lhbnMsIGFuZCBleHBlbGxpbmcgQWVhY2lkZXMgdGhleSBicm91Z2h0IGludG8gcG93ZXIgdGhlIHNvbnMgb2YgTmVvcHRvbGVtdXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGJyb3RoZXIgb2YgQXJ5YmFzLCBhbmQgdGhlcmVmb3JlIHVuY2xlIG9mIEFlYWNpZGVzLjwvbm90ZT4gVGhlIGZyaWVuZHMgb2YgQWVhY2lkZXMgd2VyZSB0aGVuIHNlaXplZCBhbmQgcHV0IHRvIGRlYXRoLCBidXQgUHlycmh1cywgd2hvIHdhcyBzdGlsbCBhIGJhYmUgYW5kIHdhcyBzb3VnaHQgZm9yIGJ5IHRoZSBlbmVteSwgd2FzIHN0b2xlbiBhd2F5IGJ5IEFuZHJvY2xlaWRlcyBhbmQgQW5nZWx1cywgd2hvIHRvb2sgdG8gZmxpZ2h0LiBIb3dldmVyLCB0aGV5IHdlcmUgb2JsaWdlZCB0byB0YWtlIGFsb25nIHdpdGggdGhlbSBhIGZldyBzZXJ2YW50cywgYW5kIHdvbWVuIGZvciB0aGUgbnVyc2luZyBvZiB0aGUgY2hpbGQsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBvbiB0aGlzIGFjY291bnQgdGhlaXIgZmxpZ2h0IHdhcyBsYWJvcmlvdXMgYW5kIHNsb3cgYW5kIHRoZXkgd2VyZSBvdmVydGFrZW4uIFRoZXkgdGhlcmVmb3JlIGVudHJ1c3RlZCB0aGUgY2hpbGQgdG8gQW5kcm9jbGVpb24sIEhpcHBpYXMsIGFuZCBOZWFuZGVyLCBzdHVyZHkgYW5kIHRydXN0eSB5b3VuZyBtZW4sIHdpdGggb3JkZXJzIHRvIGZseSB3aXRoIGFsbCB0aGVpciBtaWdodCBhbmQgbWFrZSBmb3IgTWVnYXJhLCBhIE1hY2Vkb25pYW4gdG93bjsgd2hpbGUgdGhleSB0aGVtc2VsdmVzLCBwYXJ0bHkgYnkgZW50cmVhdGllcyBhbmQgcGFydGx5IGJ5IGZpZ2h0aW5nLCBzdGF5ZWQgdGhlIGNvdXJzZSBvZiB0aGUgcHVyc3VlcnMgdW50aWwgbGF0ZSBpbiB0aGUgZXZlbmluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXNlIGhhZCBhdCBsYXN0IGJlZW4gZHJpdmVuIGJhY2ssIHRoZXkgaGFzdGVuZWQgdG8gam9pbiB0aGUgbWVuIHdobyB3ZXJlIGNhcnJ5aW5nIFB5cnJodXMuIFRoZSBzdW4gaGFkIGFscmVhZHkgc2V0IGFuZCB0aGV5IHdlcmUgbmVhciB0aGVpciBob3BlZC1mb3IgcmVmdWdlLCB3aGVuIHN1ZGRlbmx5IHRoZXkgZm91bmQgdGhlbXNlbHZlcyBjdXQgb2ZmIGZyb20gaXQgYnkgdGhlIHJpdmVyIHdoaWNoIGZsb3dlZCBwYXN0IHRoZSBjaXR5LiBUaGlzIGhhZCBhIGZvcmJpZGRpbmcgYW5kIHNhdmFnZSBsb29rLCBhbmQgd2hlbiB0aGV5IHRyaWVkIHRvIGNyb3NzIGl0LCBwcm92ZWQgYWx0b2dldGhlciBpbXBhc3NhYmxlLiBGb3IgaXRzIGN1cnJlbnQgd2FzIGdyZWF0bHkgc3dvbGxlbiBhbmQgdmlvbGVudCBmcm9tIHJhaW5zIHRoYXQgaGFkIGZhbGxlbiwgYW5kIHRoZSBkYXJrbmVzcyBtYWRlIGV2ZXJ5dGhpbmcgbW9yZSBmb3JtaWRhYmxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGV5IGdhdmUgdXAgdHJ5aW5nIHRvIGNyb3NzIHVuYWlkZWQsIHNpbmNlIHRoZXkgd2VyZSBjYXJyeWluZyB0aGUgY2hpbGQgYW5kIHRoZSB3b21lbiB3aG8gY2FyZWQgZm9yIHRoZSBjaGlsZDsgYW5kIHBlcmNlaXZpbmcgc29tZSBvZiB0aGUgcGVvcGxlIG9mIHRoZSBjb3VudHJ5IHN0YW5kaW5nIG9uIHRoZSBmdXJ0aGVyIGJhbmssIHRoZXkgYmVzb3VnaHQgdGhlaXIgaGVscCBpbiBjcm9zc2luZywgYW5kIHNob3dlZCB0aGVtIFB5cnJodXMsIHdpdGggbG91ZCBjcmllcyBhbmQgc3VwcGxpY2F0aW9ucy4gQnV0IHRoZSBwZW9wbGUgb24gdGhlIG90aGVyIHNpZGUgY291bGQgbm90IGhlYXIgdGhlbSBmb3IgdGhlIHR1cmJ1bGVuY2UgYW5kIHNwbGFzaGluZyBvZiB0aGUgc3RyZWFtLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBzbyB0aGVyZSB3YXMgZGVsYXksIG9uZSBwYXJ0eSBzaG91dGluZyB3aGF0IHRoZSBvdGhlciBjb3VsZCBub3QgdW5kZXJzdGFuZCwgdW50aWwgc29tZSBvbmUgYmV0aG91Z2h0IGhpbXNlbGYgb2YgYSBiZXR0ZXIgd2F5LiBIZSBzdHJpcHBlZCBvZmYgYSBwaWVjZSBvZiBiYXJrIGZyb20gYSB0cmVlIGFuZCB3cm90ZSB0aGVyZW9uIHdpdGggYSBidWNrbGUtcGluIGEgbWVzc2FnZSB0ZWxsaW5nIHRoZWlyIG5lZWQgYW5kIHRoZSBmb3J0dW5lIG9mIHRoZSBjaGlsZDsgdGhlbiBoZSB3cmFwcGVkIHRoZSBiYXJrIGFib3V0IGEgc3RvbmUsIHdoaWNoIGhlIHVzZWQgdG8gZ2l2ZSBmb3JjZSB0byBoaXMgY2FzdCwgYW5kIHRocmV3IGl0IHRvIHRoZSBvdGhlciBzaWRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgc2F5LCBob3dldmVyLCB0aGF0IGl0IHdhcyBhIGphdmVsaW4gYWJvdXQgd2hpY2ggaGUgd3JhcHBlZCB0aGUgYmFyaywgYW5kIHRoYXQgaGUgc2hvdCBpdCBhY3Jvc3MuIEFjY29yZGluZ2x5LCB3aGVuIHRob3NlIG9uIHRoZSBvdGhlciBzaWRlIGhhZCByZWFkIHRoZSBtZXNzYWdlIGFuZCBzYXcgdGhhdCBubyB0aW1lIHdhcyB0byBiZSBsb3N0LCB0aGV5IGN1dCBkb3duIHRyZWVzLCBsYXNoZWQgdGhlbSB0b2dldGhlciwgYW5kIG1hZGUgdGhlaXIgd2F5IGFjcm9zcy4gQXMgY2hhbmNlIHdvdWxkIGhhdmUgaXQsIHRoZSBmaXJzdCBvZiB0aGVtIHRvIG1ha2UgaGlzIHdheSBhY3Jvc3Mgd2FzIG5hbWVkIEFjaGlsbGVzOyBoZSB0b29rIFB5cnJodXMgaW4gaGlzIGFybXMsIGFuZCB0aGUgcmVzdCBvZiB0aGUgZnVnaXRpdmVzIHdlcmUgY29udmV5ZWQgYWNyb3NzIGJ5IG90aGVycyBpbiBvbmUgd2F5IG9yIGFub3RoZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIHRodXMgb3V0c3RyaXBwZWQgdGhlaXIgcHVyc3VlcnMgYW5kIHJlYWNoZWQgYSBwbGFjZSBvZiBzYWZldHksIHRoZSBmdWdpdGl2ZXMgYmV0b29rIHRoZW1zZWx2ZXMgdG8gR2xhdWNpYXMgdGhlIGtpbmcgb2YgdGhlIElsbHlyaWFuczsgYW5kIGZpbmRpbmcgaGltIHNpdHRpbmcgYXQgaG9tZSB3aXRoIGhpcyB3aWZlLCB0aGV5IHB1dCB0aGUgbGl0dGxlIGNoaWxkIGRvd24gb24gdGhlIGZsb29yIGJlZm9yZSB0aGVtLiBUaGVuIHRoZSBraW5nIGJlZ2FuIHRvIHJlZmxlY3QuIEhlIHdhcyBpbiBmZWFyIG9mIENhc3NhbmRlciwgd2hvIHdhcyBhbiBlbmVteSBvZiBBZWFjaWRlcywgYW5kIGhlbGQgaGlzIHBlYWNlIGEgbG9uZyB0aW1lIGFzIGhlIHRvb2sgY291bnNlbCB3aXRoIGhpbXNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSBQeXJyaHVzLCBvZiBoaXMgb3duIGFjY29yZCwgY3JlcHQgYWxvbmcgdGhlIGZsb29yLCBjbHV0Y2hlZCB0aGUga2luZydzIHJvYmUsIGFuZCBwdWxsZWQgaGltc2VsZiBvbiB0byBoaXMgZmVldCBhdCB0aGUga25lZXMgb2YgR2xhdWNpYXMsIHdobyB3YXMgbW92ZWQgYXQgZmlyc3QgdG8gbGF1Z2h0ZXIsIHRoZW4gdG8gcGl0eSwgYXMgaGUgc2F3IHRoZSBjaGlsZCBjbGluZ2luZyB0byBoaXMga25lZXMgYW5kIHdlZXBpbmcgbGlrZSBhIGZvcm1hbCBzdXBwbGlhbnQuIFNvbWUgc2F5LCBob3dldmVyLCB0aGF0IHRoZSBjaGlsZCBkaWQgbm90IHN1cHBsaWNhdGUgR2xhdWNpYXMsIGJ1dCBjYXVnaHQgaG9sZCBvZiBhbiBhbHRhciBvZiB0aGUgZ29kcyBhbmQgc3Rvb2QgdGhlcmUgd2l0aCBoaXMgYXJtcyB0aHJvd24gcm91bmQgaXQsIGFuZCB0aGF0IEdsYXVjaWFzIHRob3VnaHQgdGhpcyBhIHNpZ24gZnJvbSBIZWF2ZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBoZSBhdCBvbmNlIHB1dCBQeXJyaHVzIGluIHRoZSBhcm1zIG9mIGhpcyB3aWZlLCBiaWRkaW5nIGhlciByZWFyIGhpbSBhbG9uZyB3aXRoIHRoZWlyIGNoaWxkcmVuOyBhbmQgYSBsaXR0bGUgd2hpbGUgYWZ0ZXIsIHdoZW4gdGhlIGNoaWxkJ3MgZW5lbWllcyBkZW1hbmRlZCBoaXMgc3VycmVuZGVyLCBhbmQgQ2Fzc2FuZGVyIG9mZmVyZWQgdHdvIGh1bmRyZWQgdGFsZW50cyBmb3IgaGltLCBHbGF1Y2lhcyB3b3VsZCBub3QgZ2l2ZSBoaW0gdXAsIGJ1dCBhZnRlciBoZSBoYWQgcmVhY2hlZCB0aGUgYWdlIG9mIHR3ZWx2ZSB5ZWFycywgYWN0dWFsbHkgY29uZHVjdGVkIGhpbSBiYWNrIGludG8gRXBlaXJ1cyB3aXRoIGFuIGFybWVkIGZvcmNlIGFuZCBzZXQgaGltIHVwb24gdGhlIHRocm9uZSB0aGVyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgdGh1cyBvdXRzdHJpcHBlZCB0aGVpciBwdXJzdWVycyBhbmQgcmVhY2hlZCBhIHBsYWNlIG9mIHNhZmV0eSwgdGhlIGZ1Z2l0aXZlcyBiZXRvb2sgdGhlbXNlbHZlcyB0byBHbGF1Y2lhcyB0aGUga2luZyBvZiB0aGUgSWxseXJpYW5zOyBhbmQgZmluZGluZyBoaW0gc2l0dGluZyBhdCBob21lIHdpdGggaGlzIHdpZmUsIHRoZXkgcHV0IHRoZSBsaXR0bGUgY2hpbGQgZG93biBvbiB0aGUgZmxvb3IgYmVmb3JlIHRoZW0uIFRoZW4gdGhlIGtpbmcgYmVnYW4gdG8gcmVmbGVjdC4gSGUgd2FzIGluIGZlYXIgb2YgQ2Fzc2FuZGVyLCB3aG8gd2FzIGFuIGVuZW15IG9mIEFlYWNpZGVzLCBhbmQgaGVsZCBoaXMgcGVhY2UgYSBsb25nIHRpbWUgYXMgaGUgdG9vayBjb3Vuc2VsIHdpdGggaGltc2VsZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSBQeXJyaHVzLCBvZiBoaXMgb3duIGFjY29yZCwgY3JlcHQgYWxvbmcgdGhlIGZsb29yLCBjbHV0Y2hlZCB0aGUga2luZydzIHJvYmUsIGFuZCBwdWxsZWQgaGltc2VsZiBvbiB0byBoaXMgZmVldCBhdCB0aGUga25lZXMgb2YgR2xhdWNpYXMsIHdobyB3YXMgbW92ZWQgYXQgZmlyc3QgdG8gbGF1Z2h0ZXIsIHRoZW4gdG8gcGl0eSwgYXMgaGUgc2F3IHRoZSBjaGlsZCBjbGluZ2luZyB0byBoaXMga25lZXMgYW5kIHdlZXBpbmcgbGlrZSBhIGZvcm1hbCBzdXBwbGlhbnQuIFNvbWUgc2F5LCBob3dldmVyLCB0aGF0IHRoZSBjaGlsZCBkaWQgbm90IHN1cHBsaWNhdGUgR2xhdWNpYXMsIGJ1dCBjYXVnaHQgaG9sZCBvZiBhbiBhbHRhciBvZiB0aGUgZ29kcyBhbmQgc3Rvb2QgdGhlcmUgd2l0aCBoaXMgYXJtcyB0aHJvd24gcm91bmQgaXQsIGFuZCB0aGF0IEdsYXVjaWFzIHRob3VnaHQgdGhpcyBhIHNpZ24gZnJvbSBIZWF2ZW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBoZSBhdCBvbmNlIHB1dCBQeXJyaHVzIGluIHRoZSBhcm1zIG9mIGhpcyB3aWZlLCBiaWRkaW5nIGhlciByZWFyIGhpbSBhbG9uZyB3aXRoIHRoZWlyIGNoaWxkcmVuOyBhbmQgYSBsaXR0bGUgd2hpbGUgYWZ0ZXIsIHdoZW4gdGhlIGNoaWxkJ3MgZW5lbWllcyBkZW1hbmRlZCBoaXMgc3VycmVuZGVyLCBhbmQgQ2Fzc2FuZGVyIG9mZmVyZWQgdHdvIGh1bmRyZWQgdGFsZW50cyBmb3IgaGltLCBHbGF1Y2lhcyB3b3VsZCBub3QgZ2l2ZSBoaW0gdXAsIGJ1dCBhZnRlciBoZSBoYWQgcmVhY2hlZCB0aGUgYWdlIG9mIHR3ZWx2ZSB5ZWFycywgYWN0dWFsbHkgY29uZHVjdGVkIGhpbSBiYWNrIGludG8gRXBlaXJ1cyB3aXRoIGFuIGFybWVkIGZvcmNlIGFuZCBzZXQgaGltIHVwb24gdGhlIHRocm9uZSB0aGVyZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGFzcGVjdCBvZiBoaXMgY291bnRlbmFuY2UgUHlycmh1cyBoYWQgbW9yZSBvZiB0aGUgdGVycm9yIHRoYW4gb2YgdGhlIG1hamVzdHkgb2Yga2luZ2x5IHBvd2VyLiBIZSBoYWQgbm90IG1hbnkgdGVldGgsIGJ1dCBoaXMgdXBwZXIgamF3IHdhcyBvbmUgY29udGludW91cyBib25lLCBvbiB3aGljaCB0aGUgdXN1YWwgaW50ZXJ2YWxzIGJldHdlZW4gdGhlIHRlZXRoIHdlcmUgaW5kaWNhdGVkIGJ5IHNsaWdodCBkZXByZXNzaW9ucy4gUGVvcGxlIG9mIGEgc3BsZW5ldGljIGhhYml0IGJlbGlldmVkIHRoYXQgaGUgY3VyZWQgdGhlaXIgYWlsbWVudDsgaGUgd291bGQgc2FjcmlmaWNlIGEgd2hpdGUgY29jaywgYW5kLCB3aGlsZSB0aGUgcGF0aWVudCBsYXkgZmxhdCB1cG9uIGhpcyBiYWNrLCB3b3VsZCBwcmVzcyBnZW50bHkgd2l0aCBoaXMgcmlnaHQgZm9vdCBhZ2FpbnN0IHRoZSBzcGxlZW4uIE5vciB3YXMgYW55IG9uZSBzbyBvYnNjdXJlIG9yIHBvb3IgYXMgbm90IHRvIGdldCB0aGlzIGhlYWxpbmcgc2VydmljZSBmcm9tIGhpbSBpZiBoZSBhc2tlZCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGtpbmcgd291bGQgYWxzbyBhY2NlcHQgdGhlIGNvY2sgYWZ0ZXIgaGUgaGFkIHNhY3JpZmljZWQgaXQsIGFuZCB0aGlzIGhvbm9yYXJpdW0gd2FzIG1vc3QgcGxlYXNpbmcgdG8gaGltLiBJdCBpcyBzYWlkLCBmdXJ0aGVyLCB0aGF0IHRoZSBncmVhdCB0b2Ugb2YgaGlzIHJpZ2h0IGZvb3QgaGFkIGEgZGl2aW5lIHZpcnR1ZSwgc28gdGhhdCBhZnRlciB0aGUgcmVzdCBvZiBoaXMgYm9keSBoYWQgYmVlbiBjb25zdW1lZCwgdGhpcyB3YXMgZm91bmQgdG8gYmUgdW50b3VjaGVkIGFuZCB1bmhhcm1lZCBieSB0aGUgZmlyZS4gVGhlc2UgdGhpbmdzLCBob3dldmVyLCBiZWxvbmcgdG8gYSBsYXRlciBwZXJpb2QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBhc3BlY3Qgb2YgaGlzIGNvdW50ZW5hbmNlIFB5cnJodXMgaGFkIG1vcmUgb2YgdGhlIHRlcnJvciB0aGFuIG9mIHRoZSBtYWplc3R5IG9mIGtpbmdseSBwb3dlci4gSGUgaGFkIG5vdCBtYW55IHRlZXRoLCBidXQgaGlzIHVwcGVyIGphdyB3YXMgb25lIGNvbnRpbnVvdXMgYm9uZSwgb24gd2hpY2ggdGhlIHVzdWFsIGludGVydmFscyBiZXR3ZWVuIHRoZSB0ZWV0aCB3ZXJlIGluZGljYXRlZCBieSBzbGlnaHQgZGVwcmVzc2lvbnMuIFBlb3BsZSBvZiBhIHNwbGVuZXRpYyBoYWJpdCBiZWxpZXZlZCB0aGF0IGhlIGN1cmVkIHRoZWlyIGFpbG1lbnQ7IGhlIHdvdWxkIHNhY3JpZmljZSBhIHdoaXRlIGNvY2ssIGFuZCwgd2hpbGUgdGhlIHBhdGllbnQgbGF5IGZsYXQgdXBvbiBoaXMgYmFjaywgd291bGQgcHJlc3MgZ2VudGx5IHdpdGggaGlzIHJpZ2h0IGZvb3QgYWdhaW5zdCB0aGUgc3BsZWVuLiBOb3Igd2FzIGFueSBvbmUgc28gb2JzY3VyZSBvciBwb29yIGFzIG5vdCB0byBnZXQgdGhpcyBoZWFsaW5nIHNlcnZpY2UgZnJvbSBoaW0gaWYgaGUgYXNrZWQgaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBraW5nIHdvdWxkIGFsc28gYWNjZXB0IHRoZSBjb2NrIGFmdGVyIGhlIGhhZCBzYWNyaWZpY2VkIGl0LCBhbmQgdGhpcyBob25vcmFyaXVtIHdhcyBtb3N0IHBsZWFzaW5nIHRvIGhpbS4gSXQgaXMgc2FpZCwgZnVydGhlciwgdGhhdCB0aGUgZ3JlYXQgdG9lIG9mIGhpcyByaWdodCBmb290IGhhZCBhIGRpdmluZSB2aXJ0dWUsIHNvIHRoYXQgYWZ0ZXIgdGhlIHJlc3Qgb2YgaGlzIGJvZHkgaGFkIGJlZW4gY29uc3VtZWQsIHRoaXMgd2FzIGZvdW5kIHRvIGJlIHVudG91Y2hlZCBhbmQgdW5oYXJtZWQgYnkgdGhlIGZpcmUuIFRoZXNlIHRoaW5ncywgaG93ZXZlciwgYmVsb25nIHRvIGEgbGF0ZXIgcGVyaW9kLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgaGFkIHJlYWNoZWQgdGhlIGFnZSBvZiBzZXZlbnRlZW4geWVhcnM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzMDIgQi5DLjwvbm90ZT4gYW5kIHdhcyB0aG91Z2h0IHRvIGJlIGZpcm1seSBzZWF0ZWQgb24gaGlzIHRocm9uZSwgaXQgY2FtZSB0byBwYXNzIHRoYXQgaGUgd2VudCBvbiBhIGpvdXJuZXksIHdoZW4gb25lIG9mIHRoZSBzb25zIG9mIEdsYXVjaWFzLCB3aXRoIHdob20gaGUgaGFkIGJlZW4gcmVhcmVkLCB3YXMgbWFycmllZC4gT25jZSBtb3JlLCB0aGVuLCB0aGUgTW9sb3NzaWFucyBiYW5kZWQgdG9nZXRoZXIsIGRyb3ZlIG91dCBoaXMgZnJpZW5kcywgcGx1bmRlcmVkIGhpcyBwcm9wZXJ0eSwgYW5kIHB1dCB0aGVtc2VsdmVzIHVuZGVyIE5lb3B0b2xlbXVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgZ3JhbmRzb24gb2YgdGhlIE5lb3B0b2xlbXVzIG1lbnRpb25lZCBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHlycmguIDIuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaS4gMTwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlB5cnJodXMsIHRodXMgc3RyaXBwZWQgb2YgaGlzIHJlYWxtIGFuZCByZW5kZXJlZCBkZXN0aXR1dGUgb2YgYWxsIHRoaW5ncywgam9pbmVkIGhpbXNlbGYgdG8gRGVtZXRyaXVzIHRoZSBzb24gb2YgQW50aWdvbnVzLCB3aG8gaGFkIGhpcyBzaXN0ZXIgRGXDr2RhbWVpYSB0byB3aWZlLiBTaGUsIHdoaWxlIHNoZSB3YXMgc3RpbGwgYSBnaXJsLCBoYWQgYmVlbiBub21pbmFsbHkgZ2l2ZW4gaW4gbWFycmlhZ2UgdG8gQWxleGFuZGVyLCBSb3hhbmEncyBzb247IGJ1dCB0aGVpciBhZmZhaXJzIG1pc2NhcnJpZWQsIGFuZCB3aGVuIHNoZSB3YXMgb2YgYWdlIERlbWV0cml1cyBtYXJyaWVkIGhlci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW1ldHIuIDI1LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGVtZXRyaXVzPC90aXRsZT4sIHh4di4gMjwvYmlibD4uPC9ub3RlPiBJbiB0aGUgZ3JlYXQgYmF0dGxlIHdoaWNoIGFsbCB0aGUga2luZ3MgZm91Z2h0IGF0IElwc3VzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzAxIEIuQy4gQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtZXRyLiAyOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRlbWV0cml1czwvdGl0bGU+LCBjaGFwdGVycyB4eHZpaWkuIGY8L2JpYmw+Ljwvbm90ZT4gUHlycmh1cyB3YXMgcHJlc2VudCwgYW5kIHRvb2sgcGFydCB3aXRoIERlbWV0cml1cywgdGhvdWdoIHN0aWxsIGEgc3RyaXBsaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSByb3V0ZWQgdGhlIGVuZW15IG9wcG9zZWQgdG8gaGltLCBhbmQgbWFkZSBhIGJyaWxsaWFudCBkaXNwbGF5IG9mIHZhbG91ciBhbW9uZyB0aGUgY29tYmF0YW50cy4gTW9yZW92ZXIsIHRob3VnaCBEZW1ldHJpdXMgbG9zdCB0aGUgZGF5LCBQeXJyaHVzIGRpZCBub3QgYWJhbmRvbiBoaW0sIGJ1dCBrZXB0IGd1YXJkIG92ZXIgaGlzIGNpdGllcyBpbiBHcmVlY2Ugd2hpY2ggd2VyZSBlbnRydXN0ZWQgdG8gaGltLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gMzEuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EZW1ldHJpdXM8L3RpdGxlPiwgeHh4aS4gMjwvYmlibD4uPC9ub3RlPiBhbmQgd2hlbiBEZW1ldHJpdXMgbWFkZSBwZWFjZSB3aXRoIFB0b2xlbXksIHNhaWxlZCB0byBFZ3lwdCBhcyBob3N0YWdlIGZvciBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIGJvdGggaW4gaHVudGluZyBhbmQgaW4gYm9kaWx5IGV4ZXJjaXNlcywgaGUgZ2F2ZSBQdG9sZW15IHByb29mIG9mIGhpcyBwcm93ZXNzIGFuZCBlbmR1cmFuY2UsIGFuZCBzZWVpbmcgdGhhdCBhbW9uZyB0aGUgd2l2ZXMgb2YgUHRvbGVteSBpdCB3YXMgQmVyZW5pY8OpIHdobyBoYWQgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSBhbmQgd2FzIGZvcmVtb3N0IGluIHZpcnR1ZSBhbmQgdW5kZXJzdGFuZGluZywgaGUgcGFpZCBlc3BlY2lhbCBjb3VydCB0byBoZXIuIEhlIHdhcyBhZGVwdCBhdCB0dXJuaW5nIHRvIGhpcyBvd24gYWR2YW50YWdlIHRoZSBmYXZvdXIgb2YgaGlzIHN1cGVyaW9ycywganVzdCBhcyBoZSB3YXMgaW5jbGluZWQgdG8gbG9vayBkb3duIHVwb24gaGlzIGluZmVyaW9ycywgYW5kIHNpbmNlIGhlIHdhcyBvcmRlcmx5IGFuZCByZXN0cmFpbmVkIGluIGhpcyB3YXlzIG9mIGxpdmluZywgaGUgd2FzIHNlbGVjdGVkIGZyb20gYW1vbmcgbWFueSB5b3VuZyBwcmluY2VzIGFzIGEgaHVzYmFuZCBmb3IgQW50aWdvbmUsIG9uZSBvZiB0aGUgZGF1Z2h0ZXJzIG9mIEJlcmVuaWPDqSwgd2hvbSBzaGUgaGFkIGJ5IFBoaWxpcDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIG9ic2N1cmUgTWFjZWRvbmlhbi48L25vdGU+ICBiZWZvcmUgaGVyIG1hcnJpYWdlIHdpdGggUHRvbGVteS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIGhhZCByZWFjaGVkIHRoZSBhZ2Ugb2Ygc2V2ZW50ZWVuIHllYXJzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzMDIgQi5DLjwvbm90ZT4gYW5kIHdhcyB0aG91Z2h0IHRvIGJlIGZpcm1seSBzZWF0ZWQgb24gaGlzIHRocm9uZSwgaXQgY2FtZSB0byBwYXNzIHRoYXQgaGUgd2VudCBvbiBhIGpvdXJuZXksIHdoZW4gb25lIG9mIHRoZSBzb25zIG9mIEdsYXVjaWFzLCB3aXRoIHdob20gaGUgaGFkIGJlZW4gcmVhcmVkLCB3YXMgbWFycmllZC4gT25jZSBtb3JlLCB0aGVuLCB0aGUgTW9sb3NzaWFucyBiYW5kZWQgdG9nZXRoZXIsIGRyb3ZlIG91dCBoaXMgZnJpZW5kcywgcGx1bmRlcmVkIGhpcyBwcm9wZXJ0eSwgYW5kIHB1dCB0aGVtc2VsdmVzIHVuZGVyIE5lb3B0b2xlbXVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBncmFuZHNvbiBvZiB0aGUgTmVvcHRvbGVtdXMgbWVudGlvbmVkIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB5cnJoLiAyLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWkuIDE8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB5cnJoLiAyLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWkuIDE8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlB5cnJodXMsIHRodXMgc3RyaXBwZWQgb2YgaGlzIHJlYWxtIGFuZCByZW5kZXJlZCBkZXN0aXR1dGUgb2YgYWxsIHRoaW5ncywgam9pbmVkIGhpbXNlbGYgdG8gRGVtZXRyaXVzIHRoZSBzb24gb2YgQW50aWdvbnVzLCB3aG8gaGFkIGhpcyBzaXN0ZXIgRGXDr2RhbWVpYSB0byB3aWZlLiBTaGUsIHdoaWxlIHNoZSB3YXMgc3RpbGwgYSBnaXJsLCBoYWQgYmVlbiBub21pbmFsbHkgZ2l2ZW4gaW4gbWFycmlhZ2UgdG8gQWxleGFuZGVyLCBSb3hhbmEncyBzb247IGJ1dCB0aGVpciBhZmZhaXJzIG1pc2NhcnJpZWQsIGFuZCB3aGVuIHNoZSB3YXMgb2YgYWdlIERlbWV0cml1cyBtYXJyaWVkIGhlci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtZXRyLiAyNS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHh4di4gMjwvYmlibD4uPC9ub3RlPiBJbiB0aGUgZ3JlYXQgYmF0dGxlIHdoaWNoIGFsbCB0aGUga2luZ3MgZm91Z2h0IGF0IElwc3VzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtZXRyLiAyNS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHh4di4gMjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHh4di4gMjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzAxIEIuQy4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW1ldHIuIDI4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1ldHJpdXM8L3RpdGxlPiwgY2hhcHRlcnMgeHh2aWlpLiBmPC9iaWJsPi48L25vdGU+IFB5cnJodXMgd2FzIHByZXNlbnQsIGFuZCB0b29rIHBhcnQgd2l0aCBEZW1ldHJpdXMsIHRob3VnaCBzdGlsbCBhIHN0cmlwbGluZy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW1ldHIuIDI4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1ldHJpdXM8L3RpdGxlPiwgY2hhcHRlcnMgeHh2aWlpLiBmPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1ldHJpdXM8L3RpdGxlPiwgY2hhcHRlcnMgeHh2aWlpLiBmPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHJvdXRlZCB0aGUgZW5lbXkgb3Bwb3NlZCB0byBoaW0sIGFuZCBtYWRlIGEgYnJpbGxpYW50IGRpc3BsYXkgb2YgdmFsb3VyIGFtb25nIHRoZSBjb21iYXRhbnRzLiBNb3Jlb3ZlciwgdGhvdWdoIERlbWV0cml1cyBsb3N0IHRoZSBkYXksIFB5cnJodXMgZGlkIG5vdCBhYmFuZG9uIGhpbSwgYnV0IGtlcHQgZ3VhcmQgb3ZlciBoaXMgY2l0aWVzIGluIEdyZWVjZSB3aGljaCB3ZXJlIGVudHJ1c3RlZCB0byBoaW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gMzEuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbWV0cml1czwvdGl0bGU+LCB4eHhpLiAyPC9iaWJsPi48L25vdGU+IGFuZCB3aGVuIERlbWV0cml1cyBtYWRlIHBlYWNlIHdpdGggUHRvbGVteSwgc2FpbGVkIHRvIEVneXB0IGFzIGhvc3RhZ2UgZm9yIGhpbS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW1ldHIuIDMxLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1ldHJpdXM8L3RpdGxlPiwgeHh4aS4gMjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHh4eGkuIDI8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIGJvdGggaW4gaHVudGluZyBhbmQgaW4gYm9kaWx5IGV4ZXJjaXNlcywgaGUgZ2F2ZSBQdG9sZW15IHByb29mIG9mIGhpcyBwcm93ZXNzIGFuZCBlbmR1cmFuY2UsIGFuZCBzZWVpbmcgdGhhdCBhbW9uZyB0aGUgd2l2ZXMgb2YgUHRvbGVteSBpdCB3YXMgQmVyZW5pY8OpIHdobyBoYWQgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSBhbmQgd2FzIGZvcmVtb3N0IGluIHZpcnR1ZSBhbmQgdW5kZXJzdGFuZGluZywgaGUgcGFpZCBlc3BlY2lhbCBjb3VydCB0byBoZXIuIEhlIHdhcyBhZGVwdCBhdCB0dXJuaW5nIHRvIGhpcyBvd24gYWR2YW50YWdlIHRoZSBmYXZvdXIgb2YgaGlzIHN1cGVyaW9ycywganVzdCBhcyBoZSB3YXMgaW5jbGluZWQgdG8gbG9vayBkb3duIHVwb24gaGlzIGluZmVyaW9ycywgYW5kIHNpbmNlIGhlIHdhcyBvcmRlcmx5IGFuZCByZXN0cmFpbmVkIGluIGhpcyB3YXlzIG9mIGxpdmluZywgaGUgd2FzIHNlbGVjdGVkIGZyb20gYW1vbmcgbWFueSB5b3VuZyBwcmluY2VzIGFzIGEgaHVzYmFuZCBmb3IgQW50aWdvbmUsIG9uZSBvZiB0aGUgZGF1Z2h0ZXJzIG9mIEJlcmVuaWPDqSwgd2hvbSBzaGUgaGFkIGJ5IFBoaWxpcDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gb2JzY3VyZSBNYWNlZG9uaWFuLjwvbm90ZT4gIGJlZm9yZSBoZXIgbWFycmlhZ2Ugd2l0aCBQdG9sZW15LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgbWFycmlhZ2UgaGUgd2FzIGhlbGQgaW4gc3RpbGwgZ3JlYXRlciBlc3RlZW0sIGFuZCBzaW5jZSBBbnRpZ29uZSB3YXMgYW4gZXhjZWxsZW50IHdpZmUgdG8gaGltLCBoZSBicm91Z2h0IGl0IHRvIHBhc3MgdGhhdCBoZSB3YXMgc2VudCBpbnRvIEVwZWlydXMgd2l0aCBtb25leSBhbmQgYW4gYXJteSB0byByZWdhaW4gaGlzIGtpbmdkb20uIE1vc3QgcGVvcGxlIHRoZXJlIHdlcmUgZ2xhZCB0byBzZWUgaGltIGNvbWUsIG93aW5nIHRvIHRoZWlyIGhhdHJlZCBvZiBOZW9wdG9sZW11cywgd2hvIHdhcyBhIHN0ZXJuIGFuZCBhcmJpdHJhcnkgcnVsZXIuIEhvd2V2ZXIsIGZlYXJpbmcgbGVzdCBOZW9wdG9sZW11cyBzaG91bGQgaGF2ZSByZWNvdXJzZSB0byBvbmUgb2YgdGhlIG90aGVyIGtpbmdzLCBoZSBjYW1lIHRvIHRlcm1zIGFuZCBtYWRlIGZyaWVuZHNoaXAgd2l0aCBoaW0gb24gdGhlIGJhc2lzIG9mIGEgam9pbnQgZXhlcmNpc2Ugb2YgdGlsZSByb3lhbCBwb3dlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIHRpbWUgd2VudCBvbiB0aGVyZSB3ZXJlIHBlb3BsZSB3aG8gc2VjcmV0bHkgZXhhc3BlcmF0ZWQgdGhlbSBhZ2FpbnN0IG9uZSBhbm90aGVyIGFuZCBmaWxsZWQgdGhlbSB3aXRoIG11dHVhbCBzdXNwaWNpb25zLiBUaGUgY2hpZWYgZ3JvdW5kLCBob3dldmVyLCBmb3IgYWN0aW9uIE9uIHRoZSBwYXJ0IG9mIFB5cnJodXMgaXMgc2FpZCB0byBoYXZlIGhhZCBpdHMgb3JpZ2luIGFzIGZvbGxvd3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIG1hcnJpYWdlIGhlIHdhcyBoZWxkIGluIHN0aWxsIGdyZWF0ZXIgZXN0ZWVtLCBhbmQgc2luY2UgQW50aWdvbmUgd2FzIGFuIGV4Y2VsbGVudCB3aWZlIHRvIGhpbSwgaGUgYnJvdWdodCBpdCB0byBwYXNzIHRoYXQgaGUgd2FzIHNlbnQgaW50byBFcGVpcnVzIHdpdGggbW9uZXkgYW5kIGFuIGFybXkgdG8gcmVnYWluIGhpcyBraW5nZG9tLiBNb3N0IHBlb3BsZSB0aGVyZSB3ZXJlIGdsYWQgdG8gc2VlIGhpbSBjb21lLCBvd2luZyB0byB0aGVpciBoYXRyZWQgb2YgTmVvcHRvbGVtdXMsIHdobyB3YXMgYSBzdGVybiBhbmQgYXJiaXRyYXJ5IHJ1bGVyLiBIb3dldmVyLCBmZWFyaW5nIGxlc3QgTmVvcHRvbGVtdXMgc2hvdWxkIGhhdmUgcmVjb3Vyc2UgdG8gb25lIG9mIHRoZSBvdGhlciBraW5ncywgaGUgY2FtZSB0byB0ZXJtcyBhbmQgbWFkZSBmcmllbmRzaGlwIHdpdGggaGltIG9uIHRoZSBiYXNpcyBvZiBhIGpvaW50IGV4ZXJjaXNlIG9mIHRpbGUgcm95YWwgcG93ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyB0aW1lIHdlbnQgb24gdGhlcmUgd2VyZSBwZW9wbGUgd2hvIHNlY3JldGx5IGV4YXNwZXJhdGVkIHRoZW0gYWdhaW5zdCBvbmUgYW5vdGhlciBhbmQgZmlsbGVkIHRoZW0gd2l0aCBtdXR1YWwgc3VzcGljaW9ucy4gVGhlIGNoaWVmIGdyb3VuZCwgaG93ZXZlciwgZm9yIGFjdGlvbiBPbiB0aGUgcGFydCBvZiBQeXJyaHVzIGlzIHNhaWQgdG8gaGF2ZSBoYWQgaXRzIG9yaWdpbiBhcyBmb2xsb3dzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IHdhcyBjdXN0b21hcnkgZm9yIHRoZSBraW5ncywgYWZ0ZXIgc2FjcmlmaWNpbmcgdG8gWmV1cyBBcmVpdXMgYXQgUGFzc2FybywgYSBwbGFjZSBpbiB0aGUgTW9sb3NzaWFuIGxhbmQsIHRvIGV4Y2hhbmdlIHNvbGVtbiBvYXRocyB3aXRoIHRoZSBFcGVpcm90cywgdGhlIGtpbmdzIHN3ZWFyaW5nIHRvIHJ1bGUgYWNjb3JkaW5nIHRvIHRoZSBsYXdzLCBhbmQgdGhlIHBlb3BsZSB0byBtYWludGFpbiB0aGUga2luZ2RvbSBhY2NvcmRpbmcgdG8gdGhlIGxhd3MuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHRoaXMgd2FzIG5vdyBkb25lOyBib3RoIHRoZSBraW5ncyB3ZXJlIHByZXNlbnQsIGFuZCBhc3NvY2lhdGVkIHdpdGggb25lIGFub3RoZXIsIHRvZ2V0aGVyIHdpdGggdGhlaXIgZnJpZW5kcywgYW5kIG1hbnkgZ2lmdHMgd2VyZSBpbnRlcmNoYW5nZWQuIEhlcmUgR2Vsb24sIGEgbWFuIGRldm90ZWQgdG8gTmVvcHRvbGVtdXMsIGdyZWV0ZWQgUHlycmh1cyBpbiBhIGZyaWVuZGx5IG1hbm5lciBhbmQgbWFkZSBoaW0gYSBwcmVzZW50IG9mIHR3byB5b2tlIG9mIG94ZW4gZm9yIHBsb3VnaGluZy4gUHlycmh1cyB3YXMgYXNrZWQgZm9yIHRoZXNlIGJ5IE15cnRpbHVzLCBoaXMgY3VwLWJlYXJlcjsgYW5kIHdoZW4gUHlycmh1cyB3b3VsZCBub3QgZ2l2ZSB0aGVtIHRvIGhpbSwgYnV0IGdhdmUgdGhlbSB0byBhbm90aGVyLCBNeXJ0aWx1cyB3YXMgZGVlcGx5IHJlc2VudGZ1bC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBkaWQgbm90IGVzY2FwZSB0aGUgbm90aWNlIG9mIEdlbG9uLCB3aG8gdGhlcmVmb3JlIGludml0ZWQgTXlydGlsdXMgdG8gc3VwcGVyLCBhbmQgZXZlbiwgYXMgc29tZSBzYXksIGVuam95ZWQgaGlzIHlvdXRoZnVsIGJlYXV0eSBhcyB0aGV5IGRyYW5rOyB0aGVuIGhlIHJlYXNvbmVkIHdpdGggaGltIGFuZCB1cmdlZCBoaW0gdG8gYmVjb21lIGFuIGFkaGVyZW50IG9mIE5lb3B0b2xlbXVzIGFuZCB0byBkZXN0cm95IFB5cnJodXMgYnkgcG9pc29uLiBNeXJ0aWx1cyBhY2NlcHRlZCB0aGUgcHJvcG9zYWwsIHByZXRlbmRpbmcgdG8gYXBwcm92ZSBvZiBpdCBhbmQgdG8gYmUgcGVyc3VhZGVkLCBidXQgaW5mb3JtZWQgUHlycmh1cy4gSGUgYWxzbywgYnkgdGhlIGtpbmcncyBvcmRlcnMsIHByZXNlbnRlZCBBbGV4aWNyYXRlcywgdGhlIGtpbmcncyBjaGllZiBjdXAtYmVhcmVyLCB0byBHZWxvbiwgYXNzdXJpbmcgaGltIHRoYXQgaGUgd291bGQgdGFrZSBwYXJ0IGluIHRoZWlyIGVudGVycHJpc2U7IGZvciBQeXJyaHVzIHdpc2hlZCB0byBoYXZlIHNldmVyYWwgcGVyc29ucyB3aG8gY291bGQgdGVzdGlmeSB0byB0aGUgaW50ZW5kZWQgY3JpbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgR2Vsb24gd2FzIHRob3JvdWdobHkgZGVjZWl2ZWQsIGFuZCBOZW9wdG9sZW11cyBhcyB3ZWxsLCBhbmQgYXMgdGhvcm91Z2hseSwgd2hvLCBzdXBwb3NpbmcgdGhhdCB0aGUgcGxvdCB3YXMgZHVseSBwcm9ncmVzc2luZywgY291bGQgbm90IGtlZXAgaXQgdG8gaGltc2VsZiwgYnV0IGluIGhpcyBqb3kgd291bGQgdGFsayBhYm91dCBpdCB0byBoaXMgZnJpZW5kcy4gT25jZSwgaW4gcGFydGljdWxhciwgYWZ0ZXIgYSByZXZlbCBhdCB0aGUgaG91c2Ugb2YgaGlzIHNpc3RlciBDYWRtZWlhLCBoZSBmZWxsIHRvIHByYXR0bGluZyBhYm91dCB0aGUgbWF0dGVyLCBzdXBwb3NpbmcgdGhhdCBubyBvbmUgd291bGQgaGVhciB0aGUgY29udmVyc2F0aW9uIGJ1dCB0aGVtc2VsdmVzOyBmb3Igbm8gb25lIGVsc2Ugd2FzIG5lYXIgZXhjZXB0IFBoYWVuYXJldGUsIHRoZSB3aWZlIG9mIFNhbW9uLCBhIG1hbiB3aG8gbWFuYWdlZCB0aGUgZmxvY2tzIGFuZCBoZXJkcyBvZiBOZW9wdG9sZW11cywgYW5kIFBoYWVuYXJldGUgd2FzIGx5aW5nIG9uIGEgY291Y2ggd2l0aCBoZXIgZmFjZSB0byB0aGUgd2FsbCBhbmQgc2VlbWVkIHRvIGJlIGFzbGVlcC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNoZSBoZWFyZCBldmVyeXRoaW5nLCBhbmQgbmV4dCBkYXkgd2VudCB1bm9ic2VydmVkIHRvIEFudGlnb25lIHRoZSB3aWZlIG9mIFB5cnJodXMsIGFuZCB0b2xkIGhlciBhbGwgdGhhdCBzaGUgaGFkIGhlYXJkIE5lb3B0b2xlbXVzIHNheSB0byBoaXMgc2lzdGVyLiBXaGVuIFB5cnJodXMgbGVhcm5lZCBvZiBpdCwgaGUga2VwdCBxdWlldCBmb3IgYSB0aW1lLCBidXQgb24gYSBkYXkgb2Ygc2FjcmlmaWNlIGludml0ZWQgTmVvcHRvbGVtdXMgdG8gc3VwcGVyIGFuZCBraWxsZWQgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgd2FzIGF3YXJlIHRoYXQgdGhlIGNoaWVmIG1lbiBhbW9uZyB0aGUgRXBlaXJvdHMgd2VyZSBkZXZvdGVkIHRvIGhpbXNlbGYgYW5kIHdlcmUgZWFnZXIgdG8gc2VlIGhpbSByaWQgaGltc2VsZiBvZiBOZW9wdG9sZW11czsgYWxzbyB0aGF0IHRoZXkgd2lzaGVkIGhpbSBub3QgdG8gY29udGVudCBoaW1zZWxmIHdpdGggaGF2aW5nIGEgc21hbGwgc2hhcmUgb2YgdGhlIGtpbmdkb20sIGJ1dCB0byBmb2xsb3cgaGlzIG5hdHVyYWwgYmVudCBhbmQgYXR0ZW1wdCBncmVhdGVyIHRoaW5ncywgYW5kLCBub3cgdGhhdCBzb21lIHN1c3BpY2lvbiBoYWQgYWRkZWQgaXRzIHdlaWdodCB0byBvdGhlciBtb3RpdmVzIGZvciB0aGUgZGVlZCwgdG8gYW50aWNpcGF0ZSBOZW9wdG9sZW11cyBieSB0YWtpbmcgaGltIG9mZiBmaXJzdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGlzIHdhcyBub3cgZG9uZTsgYm90aCB0aGUga2luZ3Mgd2VyZSBwcmVzZW50LCBhbmQgYXNzb2NpYXRlZCB3aXRoIG9uZSBhbm90aGVyLCB0b2dldGhlciB3aXRoIHRoZWlyIGZyaWVuZHMsIGFuZCBtYW55IGdpZnRzIHdlcmUgaW50ZXJjaGFuZ2VkLiBIZXJlIEdlbG9uLCBhIG1hbiBkZXZvdGVkIHRvIE5lb3B0b2xlbXVzLCBncmVldGVkIFB5cnJodXMgaW4gYSBmcmllbmRseSBtYW5uZXIgYW5kIG1hZGUgaGltIGEgcHJlc2VudCBvZiB0d28geW9rZSBvZiBveGVuIGZvciBwbG91Z2hpbmcuIFB5cnJodXMgd2FzIGFza2VkIGZvciB0aGVzZSBieSBNeXJ0aWx1cywgaGlzIGN1cC1iZWFyZXI7IGFuZCB3aGVuIFB5cnJodXMgd291bGQgbm90IGdpdmUgdGhlbSB0byBoaW0sIGJ1dCBnYXZlIHRoZW0gdG8gYW5vdGhlciwgTXlydGlsdXMgd2FzIGRlZXBseSByZXNlbnRmdWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZGlkIG5vdCBlc2NhcGUgdGhlIG5vdGljZSBvZiBHZWxvbiwgd2hvIHRoZXJlZm9yZSBpbnZpdGVkIE15cnRpbHVzIHRvIHN1cHBlciwgYW5kIGV2ZW4sIGFzIHNvbWUgc2F5LCBlbmpveWVkIGhpcyB5b3V0aGZ1bCBiZWF1dHkgYXMgdGhleSBkcmFuazsgdGhlbiBoZSByZWFzb25lZCB3aXRoIGhpbSBhbmQgdXJnZWQgaGltIHRvIGJlY29tZSBhbiBhZGhlcmVudCBvZiBOZW9wdG9sZW11cyBhbmQgdG8gZGVzdHJveSBQeXJyaHVzIGJ5IHBvaXNvbi4gTXlydGlsdXMgYWNjZXB0ZWQgdGhlIHByb3Bvc2FsLCBwcmV0ZW5kaW5nIHRvIGFwcHJvdmUgb2YgaXQgYW5kIHRvIGJlIHBlcnN1YWRlZCwgYnV0IGluZm9ybWVkIFB5cnJodXMuIEhlIGFsc28sIGJ5IHRoZSBraW5nJ3Mgb3JkZXJzLCBwcmVzZW50ZWQgQWxleGljcmF0ZXMsIHRoZSBraW5nJ3MgY2hpZWYgY3VwLWJlYXJlciwgdG8gR2Vsb24sIGFzc3VyaW5nIGhpbSB0aGF0IGhlIHdvdWxkIHRha2UgcGFydCBpbiB0aGVpciBlbnRlcnByaXNlOyBmb3IgUHlycmh1cyB3aXNoZWQgdG8gaGF2ZSBzZXZlcmFsIHBlcnNvbnMgd2hvIGNvdWxkIHRlc3RpZnkgdG8gdGhlIGludGVuZGVkIGNyaW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgR2Vsb24gd2FzIHRob3JvdWdobHkgZGVjZWl2ZWQsIGFuZCBOZW9wdG9sZW11cyBhcyB3ZWxsLCBhbmQgYXMgdGhvcm91Z2hseSwgd2hvLCBzdXBwb3NpbmcgdGhhdCB0aGUgcGxvdCB3YXMgZHVseSBwcm9ncmVzc2luZywgY291bGQgbm90IGtlZXAgaXQgdG8gaGltc2VsZiwgYnV0IGluIGhpcyBqb3kgd291bGQgdGFsayBhYm91dCBpdCB0byBoaXMgZnJpZW5kcy4gT25jZSwgaW4gcGFydGljdWxhciwgYWZ0ZXIgYSByZXZlbCBhdCB0aGUgaG91c2Ugb2YgaGlzIHNpc3RlciBDYWRtZWlhLCBoZSBmZWxsIHRvIHByYXR0bGluZyBhYm91dCB0aGUgbWF0dGVyLCBzdXBwb3NpbmcgdGhhdCBubyBvbmUgd291bGQgaGVhciB0aGUgY29udmVyc2F0aW9uIGJ1dCB0aGVtc2VsdmVzOyBmb3Igbm8gb25lIGVsc2Ugd2FzIG5lYXIgZXhjZXB0IFBoYWVuYXJldGUsIHRoZSB3aWZlIG9mIFNhbW9uLCBhIG1hbiB3aG8gbWFuYWdlZCB0aGUgZmxvY2tzIGFuZCBoZXJkcyBvZiBOZW9wdG9sZW11cywgYW5kIFBoYWVuYXJldGUgd2FzIGx5aW5nIG9uIGEgY291Y2ggd2l0aCBoZXIgZmFjZSB0byB0aGUgd2FsbCBhbmQgc2VlbWVkIHRvIGJlIGFzbGVlcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaGUgaGVhcmQgZXZlcnl0aGluZywgYW5kIG5leHQgZGF5IHdlbnQgdW5vYnNlcnZlZCB0byBBbnRpZ29uZSB0aGUgd2lmZSBvZiBQeXJyaHVzLCBhbmQgdG9sZCBoZXIgYWxsIHRoYXQgc2hlIGhhZCBoZWFyZCBOZW9wdG9sZW11cyBzYXkgdG8gaGlzIHNpc3Rlci4gV2hlbiBQeXJyaHVzIGxlYXJuZWQgb2YgaXQsIGhlIGtlcHQgcXVpZXQgZm9yIGEgdGltZSwgYnV0IG9uIGEgZGF5IG9mIHNhY3JpZmljZSBpbnZpdGVkIE5lb3B0b2xlbXVzIHRvIHN1cHBlciBhbmQga2lsbGVkIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgYXdhcmUgdGhhdCB0aGUgY2hpZWYgbWVuIGFtb25nIHRoZSBFcGVpcm90cyB3ZXJlIGRldm90ZWQgdG8gaGltc2VsZiBhbmQgd2VyZSBlYWdlciB0byBzZWUgaGltIHJpZCBoaW1zZWxmIG9mIE5lb3B0b2xlbXVzOyBhbHNvIHRoYXQgdGhleSB3aXNoZWQgaGltIG5vdCB0byBjb250ZW50IGhpbXNlbGYgd2l0aCBoYXZpbmcgYSBzbWFsbCBzaGFyZSBvZiB0aGUga2luZ2RvbSwgYnV0IHRvIGZvbGxvdyBoaXMgbmF0dXJhbCBiZW50IGFuZCBhdHRlbXB0IGdyZWF0ZXIgdGhpbmdzLCBhbmQsIG5vdyB0aGF0IHNvbWUgc3VzcGljaW9uIGhhZCBhZGRlZCBpdHMgd2VpZ2h0IHRvIG90aGVyIG1vdGl2ZXMgZm9yIHRoZSBkZWVkLCB0byBhbnRpY2lwYXRlIE5lb3B0b2xlbXVzIGJ5IHRha2luZyBoaW0gb2ZmIGZpcnN0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIGluIGhvbm91ciBvZiBCZXJlbmljw6kgYW5kIFB0b2xlbXksIGhlIGdhdmUgdGhlIG5hbWUgb2YgUHRvbGVteSB0byBoaXMgaW5mYW50IHNvbiBieSBBbnRpZ29uZSwgYW5kIGNhbGxlZCB0aGUgY2l0eSB3aGljaCBoZSBoYWQgYnVpbHQgb24gdGhlIHBlbmluc3VsYSBvZiBFcGVpcnVzLCBCZXJlbmljaXMuIEFmdGVyIHRoaXMsIGhlIGJlZ2FuIHRvIHJldm9sdmUgbWFueSBsYXJnZSBwcm9qZWN0cyBpbiBoaXMgbWluZDsgYnV0IGhpcyBob3BlcyB3ZXJlIGZpeGVkIGZpcnN0IGFuZCBtb3JlIGVzcGVjaWFsbHkgb24gdW5kZXJ0YWtpbmdzIGNsb3NlIGF0IGhhbmQsIGFuZCBoZSBmb3VuZCBhIHdheSB0byB0YWtlIGRpcmVjdCBwYXJ0IGluIE1hY2Vkb25pYW4gYWZmYWlycywgb24gZ3JvdW5kcyBzb21ldGhpbmcgbGlrZSB0aGUgZm9sbG93aW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93LCBpbiBob25vdXIgb2YgQmVyZW5pY8OpIGFuZCBQdG9sZW15LCBoZSBnYXZlIHRoZSBuYW1lIG9mIFB0b2xlbXkgdG8gaGlzIGluZmFudCBzb24gYnkgQW50aWdvbmUsIGFuZCBjYWxsZWQgdGhlIGNpdHkgd2hpY2ggaGUgaGFkIGJ1aWx0IG9uIHRoZSBwZW5pbnN1bGEgb2YgRXBlaXJ1cywgQmVyZW5pY2lzLiBBZnRlciB0aGlzLCBoZSBiZWdhbiB0byByZXZvbHZlIG1hbnkgbGFyZ2UgcHJvamVjdHMgaW4gaGlzIG1pbmQ7IGJ1dCBoaXMgaG9wZXMgd2VyZSBmaXhlZCBmaXJzdCBhbmQgbW9yZSBlc3BlY2lhbGx5IG9uIHVuZGVydGFraW5ncyBjbG9zZSBhdCBoYW5kLCBhbmQgaGUgZm91bmQgYSB3YXkgdG8gdGFrZSBkaXJlY3QgcGFydCBpbiBNYWNlZG9uaWFuIGFmZmFpcnMsIG9uIGdyb3VuZHMgc29tZXRoaW5nIGxpa2UgdGhlIGZvbGxvd2luZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T2YgQ2Fzc2FuZGVyJ3Mgc29ucywgdGhlIGVsZGVyLCBBbnRpcGF0ZXIsIGtpbGxlZCBoaXMgbW90aGVyIFRoZXNzYWxvbmljw6kgYW5kIGRyb3ZlIGF3YXkgaGlzIGJyb3RoZXIgQWxleGFuZGVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gMzYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EZW1ldHJpdXM8L3RpdGxlPiwgeHh4dmkuIDEgZjwvYmlibD4uPC9ub3RlPiBBbGV4YW5kZXIgc2VudCB0byBEZW1ldHJpdXMgYmVnZ2luZyBmb3IgaGVscCwgYW5kIGFsc28gY2FsbGVkIHVwb24gUHlycmh1cy4gRGVtZXRyaXVzIHdhcyBkZWxheWVkIGJ5IG1hdHRlcnMgdGhhdCBoZSBoYWQgaW4gaGFuZDsgYnV0IFB5cnJodXMgY2FtZSwgYW5kIGRlbWFuZGVkIGFzIGEgcmV3YXJkIGZvciBoaXMgYWxsaWFuY2UgU3R5bXBoYWVhIGFuZCBQYXJhdWFlYSBpbiBNYWNlZG9uaWEsIGFuZCwgb2YgdGhlIGNvdW50cmllcyB3b24gYnkgdGhlIGFsbGllcywgQW1icmFjaWEsIEFjYXJuYW5pYSwgYW5kIEFtcGhpbG9jaGlhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgeW91dGhmdWwgQWxleGFuZGVyIGdhdmUgd2F5IHRvIGhpcyBkZW1hbmRzLCBhbmQgUHlycmh1cyB0b29rIHBvc3Nlc3Npb24gb2YgdGhlc2UgY291bnRyaWVzIGFuZCBoZWxkIHRoZW0gZm9yIGhpbXNlbGYgd2l0aCBnYXJyaXNvbnM7IGhlIGFsc28gcHJvY2VlZGVkIHRvIHN0cmlwIGZyb20gQW50aXBhdGVyIHRoZSByZW1haW5pbmcgcGFydHMgb2YgaGlzIGtpbmdkb20gYW5kIHR1cm4gdGhlbSBvdmVyIHRvIEFsZXhhbmRlci4gTm93IEx5c2ltYWNodXMgdGhlIGtpbmcsIHdobyB3YXMgZWFnZXIgdG8gZ2l2ZSBhaWQgdG8gQW50aXBhdGVyLCB3YXMgZnVsbHkgb2NjdXBpZWQgaGltc2VsZiBhbmQgY291bGQgbm90IGNvbWUgaW4gcGVyc29uOyBidXQga25vd2luZyB0aGF0IFB5cnJodXMgd2FzIGRlc2lyb3VzIHRvIGRvIFB0b2xlbXkgZXZlcnkgZmF2b3VyIGFuZCByZWZ1c2UgaGltIG5vdGhpbmcsIGhlIHNlbnQgYSBmb3JnZWQgbGV0dGVyIHRvIGhpbSB3aGljaCBzdGF0ZWQgdGhhdCBQdG9sZW15IHVyZ2VkIGhpbSB0byBnaXZlIHVwIGhpcyBleHBlZGl0aW9uIG9uIHBheW1lbnQgb2YgdGhyZWUgaHVuZHJlZCB0YWxlbnRzIGZyb20gQW50aXBhdGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIFB5cnJodXMgb3BlbmVkIHRoZSBsZXR0ZXIgaGUgcGVyY2VpdmVkIHRoZSBmcmF1ZCBvZiBMeXNpbWFjaHVzOyBmb3IgdGhlIGxldHRlciBkaWQgbm90IGhhdmUgdGhlIGN1c3RvbWFyeSBhZGRyZXNzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSBmYXRoZXIsIHRvIHRoZSBzb24sIGhlYWx0aCBhbmQgaGFwcGluZXNzLDwvcT4gYnV0IGluc3RlYWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+S2luZyBQdG9sZW15LCB0byBLaW5nIFB5cnJodXMsIGhlYWx0aCBhbmQgaGFwcGluZXNzLjwvcT4gUHlycmh1cyByZXZpbGVkIEx5c2ltYWNodXMgZm9yIHRoZSBmcmF1ZCwgYnV0IG5ldmVydGhlbGVzcyBtYWRlIHRoZSBkZXNpcmVkIHBlYWNlLCBhbmQgdGhleSBhbGwgbWV0IHRvIHJhdGlmeSBpdCB3aXRoIHNhY3JpZmljaWFsIG9hdGhzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhZnRlciBhIGJ1bGwsIGEgYm9hciwgYW5kIGEgcmFtIGhhZCBiZWVuIGJyb3VnaHQgdXAgZm9yIHNhY3JpZmljZSwgb2YgaXRzIG93biBhY2NvcmQgdGhlIHJhbSBmZWxsIGRvd24gZGVhZC4gVGhlIHJlc3Qgb2YgdGhlIHNwZWN0YXRvcnMgd2VyZSBtb3ZlZCB0byBsYXVnaHRlciwgYnV0IFRoZW9kb3R1cyB0aGUgc2VlciBwcmV2ZW50ZWQgUHlycmh1cyBmcm9tIHRha2luZyB0aGUgb2F0aCBieSBkZWNsYXJpbmcgdGhhdCBIZWF2ZW4gdGh1cyBiZXRva2VuZWQgaW4gYWR2YW5jZSB0aGUgZGVhdGggb2Ygb25lIG9mIHRoZSB0aHJlZSBraW5ncy4gSW4gdGhpcyB3YXksIHRoZW4sIFB5cnJodXMgd2FzIGxlZCB0byByZW5vdW5jZSB0aGUgcGVhY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIENhc3NhbmRlcidzIHNvbnMsIHRoZSBlbGRlciwgQW50aXBhdGVyLCBraWxsZWQgaGlzIG1vdGhlciBUaGVzc2Fsb25pY8OpIGFuZCBkcm92ZSBhd2F5IGhpcyBicm90aGVyIEFsZXhhbmRlci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtZXRyLiAzNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHh4eHZpLiAxIGY8L2JpYmw+Ljwvbm90ZT4gQWxleGFuZGVyIHNlbnQgdG8gRGVtZXRyaXVzIGJlZ2dpbmcgZm9yIGhlbHAsIGFuZCBhbHNvIGNhbGxlZCB1cG9uIFB5cnJodXMuIERlbWV0cml1cyB3YXMgZGVsYXllZCBieSBtYXR0ZXJzIHRoYXQgaGUgaGFkIGluIGhhbmQ7IGJ1dCBQeXJyaHVzIGNhbWUsIGFuZCBkZW1hbmRlZCBhcyBhIHJld2FyZCBmb3IgaGlzIGFsbGlhbmNlIFN0eW1waGFlYSBhbmQgUGFyYXVhZWEgaW4gTWFjZWRvbmlhLCBhbmQsIG9mIHRoZSBjb3VudHJpZXMgd29uIGJ5IHRoZSBhbGxpZXMsIEFtYnJhY2lhLCBBY2FybmFuaWEsIGFuZCBBbXBoaWxvY2hpYS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW1ldHIuIDM2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1ldHJpdXM8L3RpdGxlPiwgeHh4dmkuIDEgZjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHh4eHZpLiAxIGY8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB5b3V0aGZ1bCBBbGV4YW5kZXIgZ2F2ZSB3YXkgdG8gaGlzIGRlbWFuZHMsIGFuZCBQeXJyaHVzIHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGVzZSBjb3VudHJpZXMgYW5kIGhlbGQgdGhlbSBmb3IgaGltc2VsZiB3aXRoIGdhcnJpc29uczsgaGUgYWxzbyBwcm9jZWVkZWQgdG8gc3RyaXAgZnJvbSBBbnRpcGF0ZXIgdGhlIHJlbWFpbmluZyBwYXJ0cyBvZiBoaXMga2luZ2RvbSBhbmQgdHVybiB0aGVtIG92ZXIgdG8gQWxleGFuZGVyLiBOb3cgTHlzaW1hY2h1cyB0aGUga2luZywgd2hvIHdhcyBlYWdlciB0byBnaXZlIGFpZCB0byBBbnRpcGF0ZXIsIHdhcyBmdWxseSBvY2N1cGllZCBoaW1zZWxmIGFuZCBjb3VsZCBub3QgY29tZSBpbiBwZXJzb247IGJ1dCBrbm93aW5nIHRoYXQgUHlycmh1cyB3YXMgZGVzaXJvdXMgdG8gZG8gUHRvbGVteSBldmVyeSBmYXZvdXIgYW5kIHJlZnVzZSBoaW0gbm90aGluZywgaGUgc2VudCBhIGZvcmdlZCBsZXR0ZXIgdG8gaGltIHdoaWNoIHN0YXRlZCB0aGF0IFB0b2xlbXkgdXJnZWQgaGltIHRvIGdpdmUgdXAgaGlzIGV4cGVkaXRpb24gb24gcGF5bWVudCBvZiB0aHJlZSBodW5kcmVkIHRhbGVudHMgZnJvbSBBbnRpcGF0ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgUHlycmh1cyBvcGVuZWQgdGhlIGxldHRlciBoZSBwZXJjZWl2ZWQgdGhlIGZyYXVkIG9mIEx5c2ltYWNodXM7IGZvciB0aGUgbGV0dGVyIGRpZCBub3QgaGF2ZSB0aGUgY3VzdG9tYXJ5IGFkZHJlc3MsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgZmF0aGVyLCB0byB0aGUgc29uLCBoZWFsdGggYW5kIGhhcHBpbmVzcyw8L3E+IGJ1dCBpbnN0ZWFkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+S2luZyBQdG9sZW15LCB0byBLaW5nIFB5cnJodXMsIGhlYWx0aCBhbmQgaGFwcGluZXNzLjwvcT4gUHlycmh1cyByZXZpbGVkIEx5c2ltYWNodXMgZm9yIHRoZSBmcmF1ZCwgYnV0IG5ldmVydGhlbGVzcyBtYWRlIHRoZSBkZXNpcmVkIHBlYWNlLCBhbmQgdGhleSBhbGwgbWV0IHRvIHJhdGlmeSBpdCB3aXRoIHNhY3JpZmljaWFsIG9hdGhzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFmdGVyIGEgYnVsbCwgYSBib2FyLCBhbmQgYSByYW0gaGFkIGJlZW4gYnJvdWdodCB1cCBmb3Igc2FjcmlmaWNlLCBvZiBpdHMgb3duIGFjY29yZCB0aGUgcmFtIGZlbGwgZG93biBkZWFkLiBUaGUgcmVzdCBvZiB0aGUgc3BlY3RhdG9ycyB3ZXJlIG1vdmVkIHRvIGxhdWdodGVyLCBidXQgVGhlb2RvdHVzIHRoZSBzZWVyIHByZXZlbnRlZCBQeXJyaHVzIGZyb20gdGFraW5nIHRoZSBvYXRoIGJ5IGRlY2xhcmluZyB0aGF0IEhlYXZlbiB0aHVzIGJldG9rZW5lZCBpbiBhZHZhbmNlIHRoZSBkZWF0aCBvZiBvbmUgb2YgdGhlIHRocmVlIGtpbmdzLiBJbiB0aGlzIHdheSwgdGhlbiwgUHlycmh1cyB3YXMgbGVkIHRvIHJlbm91bmNlIHRoZSBwZWFjZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIEFsZXhhbmRlcidzIGFmZmFpcnMgd2VyZSBhbHJlYWR5IHNldHRsZWQgd2l0aCB0aGUgaGVscCBvZiBQeXJyaHVzLCBidXQgbmV2ZXJ0aGVsZXNzIERlbWV0cml1cyBjYW1lIHRvIGhpbTsgYW5kIGFzIHNvb24gYXMgaGUgYXJyaXZlZCBpdCB3YXMgcGxhaW4gdGhhdCBoZSB3YXMgbm90IHdhbnRlZCwgYW5kIGhlIGluc3BpcmVkIG9ubHkgZmVhcjsgYW5kIGFmdGVyIHRoZXkgaGFkIGJlZW4gdG9nZXRoZXIgYSBmZXcgZGF5cyB0aGVpciBtdXR1YWwgZGlzdHJ1c3QgbGVkIHRoZW0gdG8gcGxvdCBhZ2FpbnN0IGVhY2ggb3RoZXIuIEJ1dCBEZW1ldHJpdXMsIHRha2luZyBhZHZhbnRhZ2Ugb2YgaGlzIG9wcG9ydHVuaXR5LCBnb3QgYmVmb3JlaGFuZCB3aXRoIHRoZSB5b3VuZyBwcmluY2UgYW5kIHNsZXcgaGltLCBhbmQgd2FzIHByb2NsYWltZWQga2luZyBvZiBNYWNlZG9uaWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtZXRyLiAzNi4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRlbWV0cml1czwvdGl0bGU+LCB4eHh2aS4gMi02LCB4eHh2aWk8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGV2ZW4gYmVmb3JlIHRoaXMgdGhlcmUgaGFkIGJlZW4gZGlmZmVyZW5jZXMgYmV0d2VlbiBoaW0gYW5kIFB5cnJodXMsIGFuZCBQeXJyaHVzIGhhZCBvdmVycnVuIFRoZXNzYWx5Ozxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gNDAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EZW1ldHJpdXM8L3RpdGxlPiwgeGwuIGk8L2JpYmw+Ljwvbm90ZT4gYW5kIGdyZWVkIGZvciBwb3dlciwgdGhlIG5hdHVyYWwgZGlzZWFzZSBvZiBkeW5hc3RpZXMsIG1hZGUgdGhlbSBmb3JtaWRhYmxlIGFuZCBzdXNwaWNpb3VzIG5laWdoYm91cnMsIGFuZCBhbGwgdGhlIG1vcmUgYWZ0ZXIgdGhlIGRlYXRoIG9mIERlw69kYW1laWEuIEFuZCBub3cgdGhhdCBib3RoIG9mIHRoZW0gaGFkIG9jY3VwaWVkIHBhcnQgb2YgTWFjZWRvbmlhLCB0aGV5IGNhbWUgaW50byBjb2xsaXNpb24sIGFuZCB0aGVpciBxdWFycmVsIHdhcyBmdXJuaXNoZWQgd2l0aCBzdHJvbmdlciBncm91bmRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5EZW1ldHJpdXMgdGhlcmVmb3JlIG1hZGUgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBBZXRvbGlhbnMgYW5kIGNvbnF1ZXJlZCB0aGVtLCBhbmQgdGhlbiwgbGVhdmluZyBQYW50YXVjaHVzIHRoZXJlIHdpdGggYSBsYXJnZSBmb3JjZSwgaGUgaGltc2VsZiBtb3ZlZCBhZ2FpbnN0IFB5cnJodXMsIGFuZCBQeXJyaHVzLCB3aGVuIGhlIGhlYXJkIG9mIGl0LCBhZ2FpbnN0IGhpbS4gT3dpbmcgdG8gYSBtaXN0YWtlIGluIHRoZSB3YXksIGhvd2V2ZXIsIHRoZXkgcGFzc2VkIGJ5IG9uZSBhbm90aGVyLCBhbmQgRGVtZXRyaXVzLCB0aHJvd2luZyBoaXMgZm9yY2VzIGludG8gRXBlaXJ1cywgcGx1bmRlcmVkIHRoZSBjb3VudHJ5LCB3aGlsZSBQeXJyaHVzLCBlbmNvdW50ZXJpbmcgUGFudGF1Y2h1cywgam9pbmVkIGJhdHRsZSB3aXRoIGhpbS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW1ldHIuIDQxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGVtZXRyaXVzPC90aXRsZT4sIHhsaS4gMSBmPC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2FzIGEgc2hhcnAgYW5kIHRlcnJpYmxlIGNvbmZsaWN0IGJldHdlZW4gdGhlIHNvbGRpZXJzIHdobyBlbmdhZ2VkLCBhbmQgZXNwZWNpYWxseSBhbHNvIGJldHdlZW4gdGhlIGxlYWRlcnMuIEZvciBQYW50YXVjaHVzLCB3aG8gd2FzIGNvbmZlc3NlZGx5IHRoZSBiZXN0IG9mIHRoZSBnZW5lcmFscyBvZiBEZW1ldHJpdXMgZm9yIGJyYXZlcnksIGRleHRlcml0eSwgYW5kIHZpZ291ciBvZiBib2R5LCBhbmQgaGFkIGJvdGggY291cmFnZSBhbmQgYSBsb2Z0eSBzcGlyaXQsIGNoYWxsZW5nZWQgUHlycmh1cyB0byBhIGhhbmQtdG8taGFuZCBjb21iYXQ7IGFuZCBQeXJyaHVzLCB3aG8geWllbGRlZCB0byBub25lIG9mIHRoZSBraW5ncyBpbiBkYXJpbmcgYW5kIHByb3dlc3MsIGFuZCB3aXNoZWQgdGhhdCB0aGUgZ2xvcnkgb2YgQWNoaWxsZXMgc2hvdWxkIGJlbG9uZyB0byBoaW0gYnkgcmlnaHQgb2YgdmFsb3VyIHJhdGhlciB0aGFuIG9mIGJsb29kIGFsb25lLCBhZHZhbmNlZCB0aHJvdWdoIHRoZSBmb3JlbW9zdCBmaWdodGVycyB0byBjb25mcm9udCBQYW50YXVjaHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBmaXJzdCB0aGV5IGh1cmxlZCB0aGVpciBzcGVhcnMsIHRoZW4sIGNvbWluZyB0byBjbG9zZSBxdWFydGVycywgdGhleSBwbGllZCB0aGVpciBzd29yZHMgd2l0aCBtaWdodCBhbmQgc2tpbGwuIFB5cnJodXMgZ290IG9uZSB3b3VuZCwgYnV0IGdhdmUgUGFudGF1Y2h1cyB0d28sIG9uZSBpbiB0aGUgdGhpZ2gsIGFuZCBvbmUgYWxvbmcgdGhlIG5lY2ssIGFuZCBwdXQgaGltIHRvIGZsaWdodCBhbmQgb3ZlcnRocmV3IGhpbTsgaGUgZGlkIG5vdCBraWxsIGhpbSwgaG93ZXZlciwgZm9yIGhpcyBmcmllbmRzIGhhbGVkIGhpbSBhd2F5LiBUaGVuIHRoZSBFcGVpcm90cywgZXhhbHRlZCBieSB0aWxlIHZpY3Rvcnkgb2YgdGhlaXIga2luZyBhbmQgYWRtaXJpbmcgaGlzIHZhbG91ciwgb3ZlcndoZWxtZWQgYW5kIGN1dCB0byBwaWVjZXMgdGlsZSBwaGFsYW54IG9mIHRoZSBNYWNlZG9uaWFucywgcHVyc3VlZCB0aGVtIGFzIHRoZXkgZmxlZCwgc2xldyBtYW55IG9mIHRoZW0sIGFuZCB0b29rIGZpdmUgdGhvdXNhbmQgb2YgdGhlbSBhbGl2ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW1ldHIuIDQxLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGVtZXRyaXVzPC90aXRsZT4sIHhsaS4gMjwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIEFsZXhhbmRlcidzIGFmZmFpcnMgd2VyZSBhbHJlYWR5IHNldHRsZWQgd2l0aCB0aGUgaGVscCBvZiBQeXJyaHVzLCBidXQgbmV2ZXJ0aGVsZXNzIERlbWV0cml1cyBjYW1lIHRvIGhpbTsgYW5kIGFzIHNvb24gYXMgaGUgYXJyaXZlZCBpdCB3YXMgcGxhaW4gdGhhdCBoZSB3YXMgbm90IHdhbnRlZCwgYW5kIGhlIGluc3BpcmVkIG9ubHkgZmVhcjsgYW5kIGFmdGVyIHRoZXkgaGFkIGJlZW4gdG9nZXRoZXIgYSBmZXcgZGF5cyB0aGVpciBtdXR1YWwgZGlzdHJ1c3QgbGVkIHRoZW0gdG8gcGxvdCBhZ2FpbnN0IGVhY2ggb3RoZXIuIEJ1dCBEZW1ldHJpdXMsIHRha2luZyBhZHZhbnRhZ2Ugb2YgaGlzIG9wcG9ydHVuaXR5LCBnb3QgYmVmb3JlaGFuZCB3aXRoIHRoZSB5b3VuZyBwcmluY2UgYW5kIHNsZXcgaGltLCBhbmQgd2FzIHByb2NsYWltZWQga2luZyBvZiBNYWNlZG9uaWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gMzYuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbWV0cml1czwvdGl0bGU+LCB4eHh2aS4gMi02LCB4eHh2aWk8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gMzYuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbWV0cml1czwvdGl0bGU+LCB4eHh2aS4gMi02LCB4eHh2aWk8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbWV0cml1czwvdGl0bGU+LCB4eHh2aS4gMi02LCB4eHh2aWk8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgZXZlbiBiZWZvcmUgdGhpcyB0aGVyZSBoYWQgYmVlbiBkaWZmZXJlbmNlcyBiZXR3ZWVuIGhpbSBhbmQgUHlycmh1cywgYW5kIFB5cnJodXMgaGFkIG92ZXJydW4gVGhlc3NhbHk7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gNDAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbWV0cml1czwvdGl0bGU+LCB4bC4gaTwvYmlibD4uPC9ub3RlPiBhbmQgZ3JlZWQgZm9yIHBvd2VyLCB0aGUgbmF0dXJhbCBkaXNlYXNlIG9mIGR5bmFzdGllcywgbWFkZSB0aGVtIGZvcm1pZGFibGUgYW5kIHN1c3BpY2lvdXMgbmVpZ2hib3VycywgYW5kIGFsbCB0aGUgbW9yZSBhZnRlciB0aGUgZGVhdGggb2YgRGXDr2RhbWVpYS4gQW5kIG5vdyB0aGF0IGJvdGggb2YgdGhlbSBoYWQgb2NjdXBpZWQgcGFydCBvZiBNYWNlZG9uaWEsIHRoZXkgY2FtZSBpbnRvIGNvbGxpc2lvbiwgYW5kIHRoZWlyIHF1YXJyZWwgd2FzIGZ1cm5pc2hlZCB3aXRoIHN0cm9uZ2VyIGdyb3VuZHMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtZXRyLiA0MC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHhsLiBpPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1ldHJpdXM8L3RpdGxlPiwgeGwuIGk8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkRlbWV0cml1cyB0aGVyZWZvcmUgbWFkZSBhbiBleHBlZGl0aW9uIGFnYWluc3QgdGhlIEFldG9saWFucyBhbmQgY29ucXVlcmVkIHRoZW0sIGFuZCB0aGVuLCBsZWF2aW5nIFBhbnRhdWNodXMgdGhlcmUgd2l0aCBhIGxhcmdlIGZvcmNlLCBoZSBoaW1zZWxmIG1vdmVkIGFnYWluc3QgUHlycmh1cywgYW5kIFB5cnJodXMsIHdoZW4gaGUgaGVhcmQgb2YgaXQsIGFnYWluc3QgaGltLiBPd2luZyB0byBhIG1pc3Rha2UgaW4gdGhlIHdheSwgaG93ZXZlciwgdGhleSBwYXNzZWQgYnkgb25lIGFub3RoZXIsIGFuZCBEZW1ldHJpdXMsIHRocm93aW5nIGhpcyBmb3JjZXMgaW50byBFcGVpcnVzLCBwbHVuZGVyZWQgdGhlIGNvdW50cnksIHdoaWxlIFB5cnJodXMsIGVuY291bnRlcmluZyBQYW50YXVjaHVzLCBqb2luZWQgYmF0dGxlIHdpdGggaGltLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW1ldHIuIDQxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1ldHJpdXM8L3RpdGxlPiwgeGxpLiAxIGY8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gNDEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbWV0cml1czwvdGl0bGU+LCB4bGkuIDEgZjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHhsaS4gMSBmPC90cmFuc2xhdGlvbj4="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBhIHNoYXJwIGFuZCB0ZXJyaWJsZSBjb25mbGljdCBiZXR3ZWVuIHRoZSBzb2xkaWVycyB3aG8gZW5nYWdlZCwgYW5kIGVzcGVjaWFsbHkgYWxzbyBiZXR3ZWVuIHRoZSBsZWFkZXJzLiBGb3IgUGFudGF1Y2h1cywgd2hvIHdhcyBjb25mZXNzZWRseSB0aGUgYmVzdCBvZiB0aGUgZ2VuZXJhbHMgb2YgRGVtZXRyaXVzIGZvciBicmF2ZXJ5LCBkZXh0ZXJpdHksIGFuZCB2aWdvdXIgb2YgYm9keSwgYW5kIGhhZCBib3RoIGNvdXJhZ2UgYW5kIGEgbG9mdHkgc3Bpcml0LCBjaGFsbGVuZ2VkIFB5cnJodXMgdG8gYSBoYW5kLXRvLWhhbmQgY29tYmF0OyBhbmQgUHlycmh1cywgd2hvIHlpZWxkZWQgdG8gbm9uZSBvZiB0aGUga2luZ3MgaW4gZGFyaW5nIGFuZCBwcm93ZXNzLCBhbmQgd2lzaGVkIHRoYXQgdGhlIGdsb3J5IG9mIEFjaGlsbGVzIHNob3VsZCBiZWxvbmcgdG8gaGltIGJ5IHJpZ2h0IG9mIHZhbG91ciByYXRoZXIgdGhhbiBvZiBibG9vZCBhbG9uZSwgYWR2YW5jZWQgdGhyb3VnaCB0aGUgZm9yZW1vc3QgZmlnaHRlcnMgdG8gY29uZnJvbnQgUGFudGF1Y2h1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0IHRoZXkgaHVybGVkIHRoZWlyIHNwZWFycywgdGhlbiwgY29taW5nIHRvIGNsb3NlIHF1YXJ0ZXJzLCB0aGV5IHBsaWVkIHRoZWlyIHN3b3JkcyB3aXRoIG1pZ2h0IGFuZCBza2lsbC4gUHlycmh1cyBnb3Qgb25lIHdvdW5kLCBidXQgZ2F2ZSBQYW50YXVjaHVzIHR3bywgb25lIGluIHRoZSB0aGlnaCwgYW5kIG9uZSBhbG9uZyB0aGUgbmVjaywgYW5kIHB1dCBoaW0gdG8gZmxpZ2h0IGFuZCBvdmVydGhyZXcgaGltOyBoZSBkaWQgbm90IGtpbGwgaGltLCBob3dldmVyLCBmb3IgaGlzIGZyaWVuZHMgaGFsZWQgaGltIGF3YXkuIFRoZW4gdGhlIEVwZWlyb3RzLCBleGFsdGVkIGJ5IHRpbGUgdmljdG9yeSBvZiB0aGVpciBraW5nIGFuZCBhZG1pcmluZyBoaXMgdmFsb3VyLCBvdmVyd2hlbG1lZCBhbmQgY3V0IHRvIHBpZWNlcyB0aWxlIHBoYWxhbnggb2YgdGhlIE1hY2Vkb25pYW5zLCBwdXJzdWVkIHRoZW0gYXMgdGhleSBmbGVkLCBzbGV3IG1hbnkgb2YgdGhlbSwgYW5kIHRvb2sgZml2ZSB0aG91c2FuZCBvZiB0aGVtIGFsaXZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW1ldHIuIDQxLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1ldHJpdXM8L3RpdGxlPiwgeGxpLiAyPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gNDEuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbWV0cml1czwvdGl0bGU+LCB4bGkuIDI8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbWV0cml1czwvdGl0bGU+LCB4bGkuIDI8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgY29uZmxpY3QgZGlkIG5vdCBmaWxsIHRoZSBNYWNlZG9uaWFucyB3aXRoIHdyYXRoIGFuZCBoYXRlIHRvd2FyZHMgUHlycmh1cyBmb3IgdGhlaXIgbG9zc2VzLCByYXRoZXIgaXQgbGVkIHRob3NlIHdobyBiZWhlbGQgaGlzIGV4cGxvaXRzIGFuZCBlbmdhZ2VkIGhpbSBpbiB0aGUgYmF0dGxlIHRvIGVzdGVlbSBoaW0gaGlnaGx5IGFuZCBhZG1pcmUgaGlzIGJyYXZlcnkgYW5kIHRhbGsgbXVjaCBhYm91dCBoaW0uIEZvciB0aGV5IGxpa2VuZWQgaGlzIGFzcGVjdCBhbmQgaGlzIHN3aWZ0bmVzcyBhbmQgYWxsIGhpcyBtb3Rpb25zIHRvIHRob3NlIG9mIHRoZSBncmVhdCBBbGV4YW5kZXIsIGFuZCB0aG91Z2h0IHRoZXkgc2F3IGluIGhpbSBzaGFkb3dzLCBhcyBpdCB3ZXJlLCBhbmQgaW1pdGF0aW9ucyBvZiB0aGF0IGxlYWRlcidzIGltcGV0dW9zaXR5IGFuZCBtaWdodCBpbiBjb25mbGljdHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtZXRyLiA0MS4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRlbWV0cml1czwvdGl0bGU+LCB4bGkuIDM8L2JpYmw+Ljwvbm90ZT4gVGhlIG90aGVyIGtpbmdzLCB0aGV5IHNhaWQsIHJlcHJlc2VudGVkIEFsZXhhbmRlciB3aXRoIHRoZWlyIHB1cnBsZSByb2JlcywgdGhlaXIgYm9keS1ndWFyZHMsIHRoZSBpbmNsaW5hdGlvbiBvZiB0aGVpciBuZWNrcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiA0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWxleGFuZGVyPC90aXRsZT4sIGl2LiAxPC9iaWJsPi48L25vdGU+IGFuZCB0aGVpciBsb3VkZXIgdG9uZXMgaW4gY29udmVyc2F0aW9uOyBidXQgUHlycmh1cywgYW5kIFB5cnJodXMgYWxvbmUsIGluIGFybXMgYW5kIGFjdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGNvbmZsaWN0IGRpZCBub3QgZmlsbCB0aGUgTWFjZWRvbmlhbnMgd2l0aCB3cmF0aCBhbmQgaGF0ZSB0b3dhcmRzIFB5cnJodXMgZm9yIHRoZWlyIGxvc3NlcywgcmF0aGVyIGl0IGxlZCB0aG9zZSB3aG8gYmVoZWxkIGhpcyBleHBsb2l0cyBhbmQgZW5nYWdlZCBoaW0gaW4gdGhlIGJhdHRsZSB0byBlc3RlZW0gaGltIGhpZ2hseSBhbmQgYWRtaXJlIGhpcyBicmF2ZXJ5IGFuZCB0YWxrIG11Y2ggYWJvdXQgaGltLiBGb3IgdGhleSBsaWtlbmVkIGhpcyBhc3BlY3QgYW5kIGhpcyBzd2lmdG5lc3MgYW5kIGFsbCBoaXMgbW90aW9ucyB0byB0aG9zZSBvZiB0aGUgZ3JlYXQgQWxleGFuZGVyLCBhbmQgdGhvdWdodCB0aGV5IHNhdyBpbiBoaW0gc2hhZG93cywgYXMgaXQgd2VyZSwgYW5kIGltaXRhdGlvbnMgb2YgdGhhdCBsZWFkZXIncyBpbXBldHVvc2l0eSBhbmQgbWlnaHQgaW4gY29uZmxpY3RzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW1ldHIuIDQxLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1ldHJpdXM8L3RpdGxlPiwgeGxpLiAzPC9iaWJsPi48L25vdGU+IFRoZSBvdGhlciBraW5ncywgdGhleSBzYWlkLCByZXByZXNlbnRlZCBBbGV4YW5kZXIgd2l0aCB0aGVpciBwdXJwbGUgcm9iZXMsIHRoZWlyIGJvZHktZ3VhcmRzLCB0aGUgaW5jbGluYXRpb24gb2YgdGhlaXIgbmVja3MsPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtZXRyLiA0MS4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHhsaS4gMzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHhsaS4gMzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiA0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGV4YW5kZXI8L3RpdGxlPiwgaXYuIDE8L2JpYmw+Ljwvbm90ZT4gYW5kIHRoZWlyIGxvdWRlciB0b25lcyBpbiBjb252ZXJzYXRpb247IGJ1dCBQeXJyaHVzLCBhbmQgUHlycmh1cyBhbG9uZSwgaW4gYXJtcyBhbmQgYWN0aW9uLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiA0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGV4YW5kZXI8L3RpdGxlPiwgaXYuIDE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsZXhhbmRlcjwvdGl0bGU+LCBpdi4gMTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIGhpcyBrbm93bGVkZ2UgYW5kIGFiaWxpdHkgaW4gdGhlIGZpZWxkIG9mIG1pbGl0YXJ5IHRhY3RpY3MgYW5kIGxlYWRlcnNoaXAgb25lIG1heSBnZXQgcHJvb2ZzIGZyb20gdGhlIHdyaXRpbmdzIG9uIHRoZXNlIHN1YmplY3RzIHdoaWNoIGhlIGxlZnQuIEl0IGlzIHNhaWQgYWxzbyB0aGF0IEFudGlnb251cywgd2hlbiBhc2tlZCB3aG8gd2FzIHRoZSBiZXN0IGdlbmVyYWwsIHJlcGxpZWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UHlycmh1cywgaWYgaGUgbGl2ZXMgdG8gYmUgb2xkLjwvcT4gVGhpcyB2ZXJkaWN0IG9mIEFudGlnb251cyBhcHBsaWVkIG9ubHkgdG8gaGlzIGNvbnRlbXBvcmFyaWVzLiBIYW5uaWJhbCwgaG93ZXZlciwgZGVjbGFyZWQgdGhhdCB0aGUgZm9yZW1vc3Qgb2YgYWxsIGdlbmVyYWxzIGluIGV4cGVyaWVuY2UgYW5kIGFiaWxpdHkgd2FzIFB5cnJodXMsIHRoYXQgU2NpcGlvIHdhcyBzZWNvbmQsIGFuZCBoZSBoaW1zZWxmIHRoaXJkLCBhcyBJIGhhdmUgd3JpdHRlbiBpbiBteSBMaWZlIG9mIFNjaXBpby48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Ym9vazwvcT4gY29udGFpbmluZyB0aGUgTGl2ZXMgb2YgRXBhbWlub25kYXMgYW5kIFNjaXBpbyBBZnJpY2FudXMgdGhlIEVsZGVyIGhhcyBiZWVuIGxvc3QuPC9ub3RlPiAgCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW4gYSB3b3JkLCBQeXJyaHVzIHdvdWxkIHNlZW0gdG8gaGF2ZSBiZWVuIGFsd2F5cyBhbmQgY29udGludWFsbHkgc3R1ZHlpbmcgYW5kIG1lZGl0YXRpbmcgdXBvbiB0aGlzIG9uZSBzdWJqZWN0LCByZWdhcmRpbmcgaXQgYXMgdGhlIG1vc3Qga2luZ2x5IGJyYW5jaCBvZiBsZWFybmluZzsgdGhlIHJlc3QgaGUgcmVnYXJkZWQgYXMgbWVyZSBhY2NvbXBsaXNobWVudHMgYW5kIGhlbGQgdGhlbSBpbiBubyBlc3RlZW0uIEZvciBpbnN0YW5jZSwgd2UgYXJlIHRvbGQgdGhhdCB3aGVuIGhlIHdhcyBhc2tlZCBhdCBhIGRyaW5raW5nLXBhcnR5IHdoZXRoZXIgaGUgdGhvdWdodCBQeXRob24gb3IgQ2FwaGlzaWFzIHRoZSBiZXR0ZXIgZmx1dGUtcGxheWVyLCBoZSByZXBsaWVkIHRoYXQgUG9seXNwZXJjaG9uIHdhcyBhIGdvb2QgZ2VuZXJhbCwgaW1wbHlpbmcgdGhhdCBpdCBiZWNhbWUgYSBraW5nIHRvIGludmVzdGlnYXRlIGFuZCB1bmRlcnN0YW5kIHN1Y2ggbWF0dGVycyBvbmx5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIGhpcyBrbm93bGVkZ2UgYW5kIGFiaWxpdHkgaW4gdGhlIGZpZWxkIG9mIG1pbGl0YXJ5IHRhY3RpY3MgYW5kIGxlYWRlcnNoaXAgb25lIG1heSBnZXQgcHJvb2ZzIGZyb20gdGhlIHdyaXRpbmdzIG9uIHRoZXNlIHN1YmplY3RzIHdoaWNoIGhlIGxlZnQuIEl0IGlzIHNhaWQgYWxzbyB0aGF0IEFudGlnb251cywgd2hlbiBhc2tlZCB3aG8gd2FzIHRoZSBiZXN0IGdlbmVyYWwsIHJlcGxpZWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5QeXJyaHVzLCBpZiBoZSBsaXZlcyB0byBiZSBvbGQuPC9xPiBUaGlzIHZlcmRpY3Qgb2YgQW50aWdvbnVzIGFwcGxpZWQgb25seSB0byBoaXMgY29udGVtcG9yYXJpZXMuIEhhbm5pYmFsLCBob3dldmVyLCBkZWNsYXJlZCB0aGF0IHRoZSBmb3JlbW9zdCBvZiBhbGwgZ2VuZXJhbHMgaW4gZXhwZXJpZW5jZSBhbmQgYWJpbGl0eSB3YXMgUHlycmh1cywgdGhhdCBTY2lwaW8gd2FzIHNlY29uZCwgYW5kIGhlIGhpbXNlbGYgdGhpcmQsIGFzIEkgaGF2ZSB3cml0dGVuIGluIG15IExpZmUgb2YgU2NpcGlvLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Ym9vazwvcT4gY29udGFpbmluZyB0aGUgTGl2ZXMgb2YgRXBhbWlub25kYXMgYW5kIFNjaXBpbyBBZnJpY2FudXMgdGhlIEVsZGVyIGhhcyBiZWVuIGxvc3QuPC9ub3RlPiAgCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Ym9vazwvcT4gY29udGFpbmluZyB0aGUgTGl2ZXMgb2YgRXBhbWlub25kYXMgYW5kIFNjaXBpbyBBZnJpY2FudXMgdGhlIEVsZGVyIGhhcyBiZWVuIGxvc3QuPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiBhIHdvcmQsIFB5cnJodXMgd291bGQgc2VlbSB0byBoYXZlIGJlZW4gYWx3YXlzIGFuZCBjb250aW51YWxseSBzdHVkeWluZyBhbmQgbWVkaXRhdGluZyB1cG9uIHRoaXMgb25lIHN1YmplY3QsIHJlZ2FyZGluZyBpdCBhcyB0aGUgbW9zdCBraW5nbHkgYnJhbmNoIG9mIGxlYXJuaW5nOyB0aGUgcmVzdCBoZSByZWdhcmRlZCBhcyBtZXJlIGFjY29tcGxpc2htZW50cyBhbmQgaGVsZCB0aGVtIGluIG5vIGVzdGVlbS4gRm9yIGluc3RhbmNlLCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gaGUgd2FzIGFza2VkIGF0IGEgZHJpbmtpbmctcGFydHkgd2hldGhlciBoZSB0aG91Z2h0IFB5dGhvbiBvciBDYXBoaXNpYXMgdGhlIGJldHRlciBmbHV0ZS1wbGF5ZXIsIGhlIHJlcGxpZWQgdGhhdCBQb2x5c3BlcmNob24gd2FzIGEgZ29vZCBnZW5lcmFsLCBpbXBseWluZyB0aGF0IGl0IGJlY2FtZSBhIGtpbmcgdG8gaW52ZXN0aWdhdGUgYW5kIHVuZGVyc3RhbmQgc3VjaCBtYXR0ZXJzIG9ubHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHNvIGtpbmQgdG93YXJkcyBoaXMgZmFtaWxpYXIgZnJpZW5kcywgYW5kIG1pbGQgaW4gdGVtcGVyLCBidXQgZWFnZXIgYW5kIGltcGV0dW91cyBpbiByZXR1cm5pbmcgZmF2b3Vycy4gQXQgYW55IHJhdGUsIHdoZW4gQWVyb3B1cyBkaWVkLCBoZSB3YXMgZGlzdHJlc3NlZCBiZXlvbmQgbWVhc3VyZSwgZGVjbGFyaW5nIHRoYXQgQWVyb3B1cyBoYWQgaW5kZWVkIG9ubHkgc3VmZmVyZWQgd2hhdCB3YXMgY29tbW9uIHRvIGh1bWFuaXR5LCBidXQgdGhhdCBoZSBibGFtZWQgYW5kIHJldmlsZWQgaGltc2VsZiBiZWNhdXNlIGhlIGhhZCBhbHdheXMgZGVsYXllZCBhbmQgbW92ZWQgc2xvd2x5IGluIHRoZSBtYXR0ZXIgYW5kIHNvIGhhZCBub3QgcmV0dXJuZWQgaGlzIGZyaWVuZCdzIGZhdm91ci4gRm9yIHRoZSBkZWJ0cyBkdWUgdG8gb25lJ3MgY3JlZGl0b3JzIGNhbiBiZSBwYWlkIGJhY2sgdG8gdGhlaXIgaGVpcnM7IGJ1dCBpZiB0aGUgZmF2b3VycyByZWNlaXZlZCBmcm9tIGZyaWVuZHMgYXJlIG5vdCByZXR1cm5lZCB3aGlsZSB0aG9zZSBmcmllbmRzIGNhbiBiZSBzZW5zaWJsZSBvZiB0aGUgYWN0LCBpdCBpcyBhbiBhZmZsaWN0aW9uIHRvIGEganVzdCBhbmQgZ29vZCBtYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBpbiBBbWJyYWNpYSB0aGVyZSB3YXMgYSBmZWxsb3cgd2hvIGRlbm91bmNlZCBhbmQgcmV2aWxlZCBoaW0sIGFuZCBwZW9wbGUgdGhvdWdodCB0aGF0IFB5cnJodXMgb3VnaHQgdG8gYmFuaXNoIGhpbS4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MZXQgaGltIHJlbWFpbiBoZXJlLDwvcT4gc2FpZCBQeXJyaHVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFuZCBzcGVhayBpbGwgb2YgdXMgYW1vbmcgYSBmZXcsIHJhdGhlciB0aGFuIGNhcnJ5IGhpcyBzbGFuZGVycyByb3VuZCB0byBhbGwgbWFua2luZC48L3E+IEFuZCBhZ2Fpbiwgc29tZSB5b3VuZyBmZWxsb3dzIGluZHVsZ2VkIGluIGFidXNlIG9mIGhpbSBvdmVyIHRoZWlyIGN1cHMsIGFuZCB3ZXJlIGJyb3VnaHQgdG8gdGFzayBmb3IgaXQuIFB5cnJodXMgYXNrZWQgdGhlbSBpZiB0aGV5IGhhZCBzYWlkIHN1Y2ggdGhpbmdzLCBhbmQgd2hlbiBvbmUgb2YgdGhlbSByZXBsaWVkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlIGRpZCwgMCBLaW5nOyBhbmQgd2Ugc2hvdWxkIGhhdmUgc2FpZCBzdGlsbCBtb3JlIHRoYW4gdGhpcyBpZiB3ZSBoYWQgaGFkIG1vcmUgd2luZS48L3E+IFB5cnJodXMgbGF1Z2hlZCBhbmQgZGlzbWlzc2VkIHRoZW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHN0b3J5IGlzIGZvdW5kIGFsc28gaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gMTg0ZCI+UGx1dGFyY2gncyA8dGl0bGU+TW9yYWxzPC90aXRsZT4sIHAuIDE4NCBkPC9iaWJsPiwgYW5kIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJWLiBNYXguIDUuMSI+VmFsLiBNYXguIDUsIDEsIGV4dC4gMzwvYmlibD4uPC9ub3RlPixwJmd0OwoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlJbiBvcmRlciB0byBlbmxhcmdlIGhpcyBpbnRlcmVzdHMgYW5kIHBvd2VyIGhlIG1hcnJpZWQgc2V2ZXJhbCB3aXZlcyBhZnRlciB0aGUgZGVhdGggb2YgQW50aWdvbmUuIEhlIHRvb2sgdG8gd2lmZSwgbmFtZWx5LCBhIGRhdWdodGVyIG9mIEF1dG9sZW9uLCBraW5nIG9mIHRoZSBQYWVvbmlhbnM7IEJpcmNlbm5hLCB0aGUgZGF1Z2h0ZXIgb2YgQmFyZHlsbGlzIHRoZSBsbGx5cmlhbjsgYW5kIExhbmFzc2EsIHRoZSBkYXVnaHRlciBvZiBBZ2F0aG9jbGVzIG9mIFN5cmFjdXNlLCB3aG8gYnJvdWdodCBoaW0gYXMgaGVyIGRvd3J5IHRoZSBjaXR5IG9mIENvcmN5cmEsIHdoaWNoIGhhZCBiZWVuIGNhcHR1cmVkIGJ5IEFnYXRob2NsZXMuIEJ5IEFudGlnb25lIGhlIGhhZCBhIHNvbiBQdG9sZW15LCBBbGV4YW5kZXIgYnkgTGFuYXNzYSwgYW5kIEhlbGVudXMsIGhpcyB5b3VuZ2VzdCBzb24sIGJ5IEJpcmNlbm5hLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBicm91Z2h0IHRoZW0gYWxsIHVwIHRvIGJlIGJyYXZlIGluIGFybXMgYW5kIGZpZXJ5LCBhbmQgaGUgd2hldHRlZCB0aGVtIGZvciB0aGlzIGZyb20gdGhlaXIgdmVyeSBiaXJ0aC4gSXQgaXMgc2FpZCwgZm9yIGluc3RhbmNlLCB0aGF0IHdoZW4gaGUgd2FzIGFza2VkIGJ5IG9uZSBvZiB0aGVtLCB3aG8gd2FzIHN0aWxsIGEgYm95LCB0byB3aG9tIGhlIHdvdWxkIGxlYXZlIGhpcyBraW5nZG9tLCBoZSByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRvIHRoYXQgb25lIG9mIHlvdSB3aG8ga2VlcHMgaGlzIHN3b3JkIHRoZSBzaGFycGVzdC48L3E+IFRoaXMsIGhvd2V2ZXIsIG1lYW50IG5vdGhpbmcgbGVzcyB0aGFuIHRoZSBmYW1vdXMgY3Vyc2Ugb2YgT2VkaXB1cyBpbiB0aGUgdHJhZ2VkeTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkV1ci4gUGhvZW4uIDY4IiB2YWxpZD0ieWVzIj5FdXJpcGlkZXMsIDx0aXRsZT5QaG9lbmlzc2FlPC90aXRsZT4sIDY4PC9iaWJsPi48L25vdGU+IHRoYXQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj53aXRoIHdoZXR0ZWQgc3dvcmQsPC9xPiBhbmQgbm90IGJ5IGxvdCwgdGhlIGJyb3RoZXJzIHNob3VsZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpdmlkZSB0aGUgaG91c2UuPC9xPiBTbyBzYXZhZ2UgYW5kIGZlcm9jaW91cyBpcyB0aGUgbmF0dXJlIG9mIHJhcGFjaXR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHNvIGtpbmQgdG93YXJkcyBoaXMgZmFtaWxpYXIgZnJpZW5kcywgYW5kIG1pbGQgaW4gdGVtcGVyLCBidXQgZWFnZXIgYW5kIGltcGV0dW91cyBpbiByZXR1cm5pbmcgZmF2b3Vycy4gQXQgYW55IHJhdGUsIHdoZW4gQWVyb3B1cyBkaWVkLCBoZSB3YXMgZGlzdHJlc3NlZCBiZXlvbmQgbWVhc3VyZSwgZGVjbGFyaW5nIHRoYXQgQWVyb3B1cyBoYWQgaW5kZWVkIG9ubHkgc3VmZmVyZWQgd2hhdCB3YXMgY29tbW9uIHRvIGh1bWFuaXR5LCBidXQgdGhhdCBoZSBibGFtZWQgYW5kIHJldmlsZWQgaGltc2VsZiBiZWNhdXNlIGhlIGhhZCBhbHdheXMgZGVsYXllZCBhbmQgbW92ZWQgc2xvd2x5IGluIHRoZSBtYXR0ZXIgYW5kIHNvIGhhZCBub3QgcmV0dXJuZWQgaGlzIGZyaWVuZCdzIGZhdm91ci4gRm9yIHRoZSBkZWJ0cyBkdWUgdG8gb25lJ3MgY3JlZGl0b3JzIGNhbiBiZSBwYWlkIGJhY2sgdG8gdGhlaXIgaGVpcnM7IGJ1dCBpZiB0aGUgZmF2b3VycyByZWNlaXZlZCBmcm9tIGZyaWVuZHMgYXJlIG5vdCByZXR1cm5lZCB3aGlsZSB0aG9zZSBmcmllbmRzIGNhbiBiZSBzZW5zaWJsZSBvZiB0aGUgYWN0LCBpdCBpcyBhbiBhZmZsaWN0aW9uIHRvIGEganVzdCBhbmQgZ29vZCBtYW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBpbiBBbWJyYWNpYSB0aGVyZSB3YXMgYSBmZWxsb3cgd2hvIGRlbm91bmNlZCBhbmQgcmV2aWxlZCBoaW0sIGFuZCBwZW9wbGUgdGhvdWdodCB0aGF0IFB5cnJodXMgb3VnaHQgdG8gYmFuaXNoIGhpbS4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCBoaW0gcmVtYWluIGhlcmUsPC9xPiBzYWlkIFB5cnJodXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hbmQgc3BlYWsgaWxsIG9mIHVzIGFtb25nIGEgZmV3LCByYXRoZXIgdGhhbiBjYXJyeSBoaXMgc2xhbmRlcnMgcm91bmQgdG8gYWxsIG1hbmtpbmQuPC9xPiBBbmQgYWdhaW4sIHNvbWUgeW91bmcgZmVsbG93cyBpbmR1bGdlZCBpbiBhYnVzZSBvZiBoaW0gb3ZlciB0aGVpciBjdXBzLCBhbmQgd2VyZSBicm91Z2h0IHRvIHRhc2sgZm9yIGl0LiBQeXJyaHVzIGFza2VkIHRoZW0gaWYgdGhleSBoYWQgc2FpZCBzdWNoIHRoaW5ncywgYW5kIHdoZW4gb25lIG9mIHRoZW0gcmVwbGllZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlIGRpZCwgMCBLaW5nOyBhbmQgd2Ugc2hvdWxkIGhhdmUgc2FpZCBzdGlsbCBtb3JlIHRoYW4gdGhpcyBpZiB3ZSBoYWQgaGFkIG1vcmUgd2luZS48L3E+IFB5cnJodXMgbGF1Z2hlZCBhbmQgZGlzbWlzc2VkIHRoZW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc3RvcnkgaXMgZm91bmQgYWxzbyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDE4NGQiPlBsdXRhcmNoJ3MgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDE4NCBkPC9iaWJsPiwgYW5kIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlYuIE1heC4gNS4xIj5WYWwuIE1heC4gNSwgMSwgZXh0LiAzPC9iaWJsPi48L25vdGU+LHAmZ3Q7CgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDE4NGQiPlBsdXRhcmNoJ3MgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDE4NCBkPC9iaWJsPiwgYW5kIGluIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwLiAxODQgZDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlYuIE1heC4gNS4xIj5WYWwuIE1heC4gNSwgMSwgZXh0LiAzPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUluIG9yZGVyIHRvIGVubGFyZ2UgaGlzIGludGVyZXN0cyBhbmQgcG93ZXIgaGUgbWFycmllZCBzZXZlcmFsIHdpdmVzIGFmdGVyIHRoZSBkZWF0aCBvZiBBbnRpZ29uZS4gSGUgdG9vayB0byB3aWZlLCBuYW1lbHksIGEgZGF1Z2h0ZXIgb2YgQXV0b2xlb24sIGtpbmcgb2YgdGhlIFBhZW9uaWFuczsgQmlyY2VubmEsIHRoZSBkYXVnaHRlciBvZiBCYXJkeWxsaXMgdGhlIGxsbHlyaWFuOyBhbmQgTGFuYXNzYSwgdGhlIGRhdWdodGVyIG9mIEFnYXRob2NsZXMgb2YgU3lyYWN1c2UsIHdobyBicm91Z2h0IGhpbSBhcyBoZXIgZG93cnkgdGhlIGNpdHkgb2YgQ29yY3lyYSwgd2hpY2ggaGFkIGJlZW4gY2FwdHVyZWQgYnkgQWdhdGhvY2xlcy4gQnkgQW50aWdvbmUgaGUgaGFkIGEgc29uIFB0b2xlbXksIEFsZXhhbmRlciBieSBMYW5hc3NhLCBhbmQgSGVsZW51cywgaGlzIHlvdW5nZXN0IHNvbiwgYnkgQmlyY2VubmEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGJyb3VnaHQgdGhlbSBhbGwgdXAgdG8gYmUgYnJhdmUgaW4gYXJtcyBhbmQgZmllcnksIGFuZCBoZSB3aGV0dGVkIHRoZW0gZm9yIHRoaXMgZnJvbSB0aGVpciB2ZXJ5IGJpcnRoLiBJdCBpcyBzYWlkLCBmb3IgaW5zdGFuY2UsIHRoYXQgd2hlbiBoZSB3YXMgYXNrZWQgYnkgb25lIG9mIHRoZW0sIHdobyB3YXMgc3RpbGwgYSBib3ksIHRvIHdob20gaGUgd291bGQgbGVhdmUgaGlzIGtpbmdkb20sIGhlIHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UbyB0aGF0IG9uZSBvZiB5b3Ugd2hvIGtlZXBzIGhpcyBzd29yZCB0aGUgc2hhcnBlc3QuPC9xPiBUaGlzLCBob3dldmVyLCBtZWFudCBub3RoaW5nIGxlc3MgdGhhbiB0aGUgZmFtb3VzIGN1cnNlIG9mIE9lZGlwdXMgaW4gdGhlIHRyYWdlZHk7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBQaG9lbi4gNjgiIHZhbGlkPSJ5ZXMiPkV1cmlwaWRlcywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhvZW5pc3NhZTwvdGl0bGU+LCA2ODwvYmlibD4uPC9ub3RlPiB0aGF0IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBQaG9lbi4gNjgiIHZhbGlkPSJ5ZXMiPkV1cmlwaWRlcywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhvZW5pc3NhZTwvdGl0bGU+LCA2ODwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhvZW5pc3NhZTwvdGl0bGU+LCA2ODxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2l0aCB3aGV0dGVkIHN3b3JkLDwvcT4gYW5kIG5vdCBieSBsb3QsIHRoZSBicm90aGVycyBzaG91bGQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpdmlkZSB0aGUgaG91c2UuPC9xPiBTbyBzYXZhZ2UgYW5kIGZlcm9jaW91cyBpcyB0aGUgbmF0dXJlIG9mIHJhcGFjaXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIGJhdHRsZSBQeXJyaHVzIHJldHVybmVkIHRvIGhpcyBob21lIHJlam9pY2luZyBpbiB0aGUgc3BsZW5kb3VyIHdoaWNoIGhpcyBmYW1lIGFuZCBsb2Z0eSBzcGlyaXQgaGFkIGJyb3VnaHQgaGltOyBhbmQgd2hlbiBoZSB3YXMgZ2l2ZW4gdGhlIHN1cm5hbWUgb2YgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5FYWdsZTwvcT4gYnkgdGhlIEVwZWlyb3RzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRocm91Z2ggeW91LDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hbSBJIGFuIGVhZ2xlOyB3aHksIHByYXksIHNob3VsZCBJIG5vdCBiZT8gSXQgaXMgYnkgeW91ciBhcm1zIHRoYXQgSSBhbSBib3JuZSBhbG9mdCBhcyBieSBzd2lmdCBwaW5pb25zLjwvcT4gQnV0IGEgbGl0dGxlIHdoaWxlIGFmdGVyLCBsZWFybmluZyB0aGF0IERlbWV0cml1cyB3YXMgZGFuZ2Vyb3VzbHkgc2ljaywgaGUgc3VkZGVubHkgdGhyZXcgYW4gYXJteSBpbnRvIE1hY2Vkb25pYSwgaW50ZW5kaW5nIG1lcmVseSB0byBvdmVycnVuIGFuZCBwbHVuZGVyIHNvbWUgcGFydHMgb2YgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPllldCBoZSBjYW1lIHdpdGhpbiBhIGxpdHRsZSBvZiBtYXN0ZXJpbmcgdGhlIHdob2xlIGNvdW50cnkgYW5kIGdldHRpbmcgdGhlIGtpbmdkb20gd2l0aG91dCBhIGJhdHRsZTsgZm9yIGhlIG1hcmNoZWQgb24gYXMgZmFyIGFzIEVkZXNzYSB3aXRob3V0IG9wcG9zaXRpb24gZnJvbSBhbnlvbmUsIGFuZCBtYW55IGFjdHVhbGx5IGpvaW5lZCBoaXMgZm9yY2VzIGFuZCBzaGFyZWQgaGlzIGV4cGVkaXRpb24uIEFuZCBub3cgRGVtZXRyaXVzIGhpbXNlbGYgd2FzIHJvdXNlZCBieSB0aGUgcGVyaWwgdG8gYWN0IGJleW9uZCBoaXMgc3RyZW5ndGgsIHdoaWxlIGhpcyBmcmllbmRzIGFuZCBjb21tYW5kZXJzIGluIGEgc2hvcnQgdGltZSBjb2xsZWN0ZWQgbWFueSBzb2xkaWVycyBhbmQgc2V0IG91dCB3aXRoIHplYWwgYW5kIHZpZ291ciBhZ2FpbnN0IFB5cnJodXMuIFB5cnJodXMsIGhvd2V2ZXIsIGhhZCBjb21lIG1vcmUgZm9yIHBsdW5kZXIgdGhhbiBhbnl0aGluZyBlbHNlLCBhbmQgd291bGQgbm90IHN0YW5kIGhpcyBncm91bmQsIGJ1dCBmbGVkLCBsb3NpbmcgYSBwYXJ0IG9mIGhpcyBhcm15IG9uIHRoZSBtYXJjaCwgdW5kZXIgdGhlIGF0dGFja3Mgb2YgdGhlIE1hY2Vkb25pYW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBiYXR0bGUgUHlycmh1cyByZXR1cm5lZCB0byBoaXMgaG9tZSByZWpvaWNpbmcgaW4gdGhlIHNwbGVuZG91ciB3aGljaCBoaXMgZmFtZSBhbmQgbG9mdHkgc3Bpcml0IGhhZCBicm91Z2h0IGhpbTsgYW5kIHdoZW4gaGUgd2FzIGdpdmVuIHRoZSBzdXJuYW1lIG9mIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5FYWdsZTwvcT4gYnkgdGhlIEVwZWlyb3RzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhyb3VnaCB5b3UsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW0gSSBhbiBlYWdsZTsgd2h5LCBwcmF5LCBzaG91bGQgSSBub3QgYmU/IEl0IGlzIGJ5IHlvdXIgYXJtcyB0aGF0IEkgYW0gYm9ybmUgYWxvZnQgYXMgYnkgc3dpZnQgcGluaW9ucy48L3E+IEJ1dCBhIGxpdHRsZSB3aGlsZSBhZnRlciwgbGVhcm5pbmcgdGhhdCBEZW1ldHJpdXMgd2FzIGRhbmdlcm91c2x5IHNpY2ssIGhlIHN1ZGRlbmx5IHRocmV3IGFuIGFybXkgaW50byBNYWNlZG9uaWEsIGludGVuZGluZyBtZXJlbHkgdG8gb3ZlcnJ1biBhbmQgcGx1bmRlciBzb21lIHBhcnRzIG9mIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPllldCBoZSBjYW1lIHdpdGhpbiBhIGxpdHRsZSBvZiBtYXN0ZXJpbmcgdGhlIHdob2xlIGNvdW50cnkgYW5kIGdldHRpbmcgdGhlIGtpbmdkb20gd2l0aG91dCBhIGJhdHRsZTsgZm9yIGhlIG1hcmNoZWQgb24gYXMgZmFyIGFzIEVkZXNzYSB3aXRob3V0IG9wcG9zaXRpb24gZnJvbSBhbnlvbmUsIGFuZCBtYW55IGFjdHVhbGx5IGpvaW5lZCBoaXMgZm9yY2VzIGFuZCBzaGFyZWQgaGlzIGV4cGVkaXRpb24uIEFuZCBub3cgRGVtZXRyaXVzIGhpbXNlbGYgd2FzIHJvdXNlZCBieSB0aGUgcGVyaWwgdG8gYWN0IGJleW9uZCBoaXMgc3RyZW5ndGgsIHdoaWxlIGhpcyBmcmllbmRzIGFuZCBjb21tYW5kZXJzIGluIGEgc2hvcnQgdGltZSBjb2xsZWN0ZWQgbWFueSBzb2xkaWVycyBhbmQgc2V0IG91dCB3aXRoIHplYWwgYW5kIHZpZ291ciBhZ2FpbnN0IFB5cnJodXMuIFB5cnJodXMsIGhvd2V2ZXIsIGhhZCBjb21lIG1vcmUgZm9yIHBsdW5kZXIgdGhhbiBhbnl0aGluZyBlbHNlLCBhbmQgd291bGQgbm90IHN0YW5kIGhpcyBncm91bmQsIGJ1dCBmbGVkLCBsb3NpbmcgYSBwYXJ0IG9mIGhpcyBhcm15IG9uIHRoZSBtYXJjaCwgdW5kZXIgdGhlIGF0dGFja3Mgb2YgdGhlIE1hY2Vkb25pYW5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBiZWNhdXNlIERlbWV0cml1cyBoYWQgZWFzaWx5IGFuZCBzcGVlZGlseSBkcml2ZW4gUHlycmh1cyBvdXQgb2YgdGhlIGNvdW50cnksIGhlIGRpZCBub3QgbGVhdmUgaGltIHRvIGhpcyBvd24gZGV2aWNlcywgYnV0IG5vdyB0aGF0IGhlIGhhZCBkZXRlcm1pbmVkIHRvIHVuZGVydGFrZSBhIGdyZWF0IGVudGVycHJpc2UgYW5kIHRvIHJlY292ZXIgaGlzIGZhdGhlcidzIHJlYWxtIHdpdGggYSBodW5kcmVkIHRob3VzYW5kIHNvbGRpZXJzIGFuZCBmaXZlIGh1bmRyZWQgc2hpcHMsIGhlIGRpZCBub3Qgd2lzaCB0byBoYXZlIGNvbGxpc2lvbnMgd2l0aCBQeXJyaHVzLCBub3IgeWV0IHRvIGxlYXZlIGJlaGluZCBpbiBoaW0gYW4gZW50ZXJwcmlzaW5nIGFuZCB0cm91Ymxlc29tZSBuZWlnaGJvdXIgZm9yIHRoZSBNYWNlZG9uaWFucy4gSGUgd2lzaGVkLCByYXRoZXIsIHNpbmNlIGhlIGhhZCBubyB0aW1lIHRvIHdhZ2Ugd2FyIGFnYWluc3QgUHlycmh1cywgdG8gY29tZSB0byB0ZXJtcyBhbmQgbWFrZSBwZWFjZSB3aXRoIGhpbSwgYW5kIHRoZW4gdHVybiBoaXMgYXJtcyBhZ2FpbnN0IHRoZSBvdGhlciBraW5ncy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIGFuIGFncmVlbWVudCBoYWQgYmVlbiBtYWRlIGJldHdlZW4gdGhlbSBmb3IgdGhlc2UgcmVhc29ucywgdGhlIHB1cnBvc2Ugb2YgRGVtZXRyaXVzIGJlY2FtZSBhcHBhcmVudCwgYXMgd2VsbCBhcyB0aGUgbWFnbml0dWRlIG9mIGhpcyBwcmVwYXJhdGlvbnMsIGFuZCB0aGUga2luZ3MsIGluIGFsYXJtLCBrZXB0IHNlbmRpbmcgdG8gUHlycmh1cyBtZXNzZW5nZXJzIGFuZCBsZXR0ZXJzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gNDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EZW1ldHJpdXM8L3RpdGxlPiwgeGxpdi4gMTwvYmlibD4uPC9ub3RlPiBleHByZXNzaW5nIHRoZWlyIGFtYXplbWVudCB0aGF0IGhlIHNob3VsZCBsZXQgc2xpcCBoaXMgb3duIG9wcG9ydHVuaXR5IGZvciBtYWtpbmcgd2FyIGFuZCB3YWl0IGZvciBEZW1ldHJpdXMgdG8gc2VpemUgaGlzOyBhbmQgdGhhdCB3aGVuIGhlIHdhcyBhYmxlIHRvIGRyaXZlIERlbWV0cml1cyBvdXQgb2YgTWFjZWRvbmlhLCBzaW5jZSBoZSB3YXMgbm93IG11Y2ggb2NjdXBpZWQgYW5kIGRpc3R1cmJlZCwgaGUgc2hvdWxkIGF3YWl0IHRoZSB0aW1lIHdoZW4gaGlzIGFkdmVyc2FyeSwgYXQgaGlzIGxlaXN1cmUgYW5kIGFmdGVyIGhlIGhhZCBiZWNvbWUgZ3JlYXQsIGNvdWxkIHdhZ2UgYSBkZWNpc2l2ZSBzdHJ1Z2dsZSB3aXRoIGhpbSBmb3IgdGhlIHNhbmN0dWFyaWVzIGFuZCB0b21icyBvZiB0aGUgTW9sb3NpYW4gbGFuZCwgYW4gYWR2ZXJzYXJ5IHdobyBoYWQganVzdCByb2JiZWQgaGltIG9mIENvcmN5cmEsIGFuZCBoaXMgd2lmZSBiZXNpZGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgTGFuYXNzYSwgd2hvIGZvdW5kIGZhdWx0IHdpdGggUHlycmh1cyBmb3IgYmVpbmcgbW9yZSBkZXZvdGVkIHRvIGhpcyBiYXJiYXJpYW4gd2l2ZXMgdGhhbiB0byBoZXIsIGhhZCByZXRpcmVkIHRvIENvcmN5cmEsIHdoaXRoZXIsIHNpbmNlIHNoZSBkZXNpcmVkIGEgcm95YWwgbWFycmlhZ2UsIHNoZSBpbnZpdGVkIERlbWV0cml1cywgdW5kZXJzdGFuZGluZyB0aGF0IGhlLCBvZiBhbGwgdGhlIGtpbmdzLCB3YXMgbW9zdCByZWFkaWx5IGRpc3Bvc2VkIHRvIG1hcnJ5IHdpdmVzLiBTbyBEZW1ldHJpdXMgc2FpbGVkIHRoaXRoZXIsIG1hcnJpZWQgTGFuYXNzYSwgYW5kIGxlZnQgYSBnYXJyaXNvbiBpbiB0aGUgY2l0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGJlY2F1c2UgRGVtZXRyaXVzIGhhZCBlYXNpbHkgYW5kIHNwZWVkaWx5IGRyaXZlbiBQeXJyaHVzIG91dCBvZiB0aGUgY291bnRyeSwgaGUgZGlkIG5vdCBsZWF2ZSBoaW0gdG8gaGlzIG93biBkZXZpY2VzLCBidXQgbm93IHRoYXQgaGUgaGFkIGRldGVybWluZWQgdG8gdW5kZXJ0YWtlIGEgZ3JlYXQgZW50ZXJwcmlzZSBhbmQgdG8gcmVjb3ZlciBoaXMgZmF0aGVyJ3MgcmVhbG0gd2l0aCBhIGh1bmRyZWQgdGhvdXNhbmQgc29sZGllcnMgYW5kIGZpdmUgaHVuZHJlZCBzaGlwcywgaGUgZGlkIG5vdCB3aXNoIHRvIGhhdmUgY29sbGlzaW9ucyB3aXRoIFB5cnJodXMsIG5vciB5ZXQgdG8gbGVhdmUgYmVoaW5kIGluIGhpbSBhbiBlbnRlcnByaXNpbmcgYW5kIHRyb3VibGVzb21lIG5laWdoYm91ciBmb3IgdGhlIE1hY2Vkb25pYW5zLiBIZSB3aXNoZWQsIHJhdGhlciwgc2luY2UgaGUgaGFkIG5vIHRpbWUgdG8gd2FnZSB3YXIgYWdhaW5zdCBQeXJyaHVzLCB0byBjb21lIHRvIHRlcm1zIGFuZCBtYWtlIHBlYWNlIHdpdGggaGltLCBhbmQgdGhlbiB0dXJuIGhpcyBhcm1zIGFnYWluc3QgdGhlIG90aGVyIGtpbmdzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBhbiBhZ3JlZW1lbnQgaGFkIGJlZW4gbWFkZSBiZXR3ZWVuIHRoZW0gZm9yIHRoZXNlIHJlYXNvbnMsIHRoZSBwdXJwb3NlIG9mIERlbWV0cml1cyBiZWNhbWUgYXBwYXJlbnQsIGFzIHdlbGwgYXMgdGhlIG1hZ25pdHVkZSBvZiBoaXMgcHJlcGFyYXRpb25zLCBhbmQgdGhlIGtpbmdzLCBpbiBhbGFybSwga2VwdCBzZW5kaW5nIHRvIFB5cnJodXMgbWVzc2VuZ2VycyBhbmQgbGV0dGVycyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtZXRyLiA0NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHhsaXYuIDE8L2JpYmw+Ljwvbm90ZT4gZXhwcmVzc2luZyB0aGVpciBhbWF6ZW1lbnQgdGhhdCBoZSBzaG91bGQgbGV0IHNsaXAgaGlzIG93biBvcHBvcnR1bml0eSBmb3IgbWFraW5nIHdhciBhbmQgd2FpdCBmb3IgRGVtZXRyaXVzIHRvIHNlaXplIGhpczsgYW5kIHRoYXQgd2hlbiBoZSB3YXMgYWJsZSB0byBkcml2ZSBEZW1ldHJpdXMgb3V0IG9mIE1hY2Vkb25pYSwgc2luY2UgaGUgd2FzIG5vdyBtdWNoIG9jY3VwaWVkIGFuZCBkaXN0dXJiZWQsIGhlIHNob3VsZCBhd2FpdCB0aGUgdGltZSB3aGVuIGhpcyBhZHZlcnNhcnksIGF0IGhpcyBsZWlzdXJlIGFuZCBhZnRlciBoZSBoYWQgYmVjb21lIGdyZWF0LCBjb3VsZCB3YWdlIGEgZGVjaXNpdmUgc3RydWdnbGUgd2l0aCBoaW0gZm9yIHRoZSBzYW5jdHVhcmllcyBhbmQgdG9tYnMgb2YgdGhlIE1vbG9zaWFuIGxhbmQsIGFuIGFkdmVyc2FyeSB3aG8gaGFkIGp1c3Qgcm9iYmVkIGhpbSBvZiBDb3JjeXJhLCBhbmQgaGlzIHdpZmUgYmVzaWRlcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW1ldHIuIDQ0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1ldHJpdXM8L3RpdGxlPiwgeGxpdi4gMTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIHhsaXYuIDE8L3RyYW5zbGF0aW9uPg=="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBMYW5hc3NhLCB3aG8gZm91bmQgZmF1bHQgd2l0aCBQeXJyaHVzIGZvciBiZWluZyBtb3JlIGRldm90ZWQgdG8gaGlzIGJhcmJhcmlhbiB3aXZlcyB0aGFuIHRvIGhlciwgaGFkIHJldGlyZWQgdG8gQ29yY3lyYSwgd2hpdGhlciwgc2luY2Ugc2hlIGRlc2lyZWQgYSByb3lhbCBtYXJyaWFnZSwgc2hlIGludml0ZWQgRGVtZXRyaXVzLCB1bmRlcnN0YW5kaW5nIHRoYXQgaGUsIG9mIGFsbCB0aGUga2luZ3MsIHdhcyBtb3N0IHJlYWRpbHkgZGlzcG9zZWQgdG8gbWFycnkgd2l2ZXMuIFNvIERlbWV0cml1cyBzYWlsZWQgdGhpdGhlciwgbWFycmllZCBMYW5hc3NhLCBhbmQgbGVmdCBhIGdhcnJpc29uIGluIHRoZSBjaXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGxldHRlcnMgdGhlIGtpbmdzIGtlcHQgc2VuZGluZyB0byBQeXJyaHVzLCBhbmQgYXQgdGhlIHNhbWUgdGltZSBvbiB0aGVpciBvd24gcGFydCB0aGV5IGFzc2FpbGVkIERlbWV0cml1cyB3aGlsZSBoZSB3YXMgc3RpbGwgd2FpdGluZyB0byBjb21wbGV0ZSBoaXMgcHJlcGFyYXRpb25zLiBQdG9sZW15IHNhaWxlZCB1cCB3aXRoIGEgZ3JlYXQgZmxlZXQgYW5kIHRyaWVkIHRvIGJyaW5nIHRoZSBHcmVlayBjaXRpZXMgdG8gcmV2b2x0LCB3aGlsZSBMeXNpbWFjaHVzIGludmFkZWQgdXBwZXIgTWFjZWRvbmlhIGZyb20gVGhyYWNlIGFuZCByYXZhZ2VkIHRoZSBjb3VudHJ5LiBTbyBQeXJyaHVzLCB0YWtpbmcgdGhlIGZpZWxkIGF0IHRoZSBzYW1lIHRpbWUgd2l0aCB0aGVzZSwgbWFyY2hlZCBhZ2FpbnN0IEJlcm9lYSwgZXhwZWN0aW5nLCBhcyBwcm92ZWQgdG8gYmUgdGhlIGNhc2UsIHRoYXQgRGVtZXRyaXVzIHdvdWxkIGdvIHRvIGNvbmZyb250IEx5c2ltYWNodXMsIGFuZCB0aHVzIGxlYXZlIHRoZSBsb3dlciBjb3VudHJ5IHVucHJvdGVjdGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IG5pZ2h0IFB5cnJodXMgZHJlYW1lZCB0aGF0IGhlIHdhcyBjYWxsZWQgYnkgQWxleGFuZGVyIHRoZSBHcmVhdCwgYW5kIHRoYXQgd2hlbiBoZSBhbnN3ZXJlZCB0aGUgY2FsbCBoZSBmb3VuZCB0aGUga2luZyBseWluZyBvbiBhIGNvdWNoLCBidXQgbWV0IHdpdGgga2luZGx5IHNwZWVjaCBhbmQgZnJpZW5kbHkgdHJlYXRtZW50IGZyb20gaGltLCBhbmQgcmVjZWl2ZWQgYSBwcm9taXNlIG9mIGhpcyByZWFkeSBhaWQgYW5kIGhlbHAuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIGhvdywgMCBLaW5nLDwvcT4gUHlycmh1cyB2ZW50dXJlZCB0byBhc2ssIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2hlbiB0aG91IGFydCBzaWNrLCBjYW5zdCB0aG91IGdpdmUgbWUgYWlkIGFuZCBoZWxwPzwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IG5hbWUgaXRzZWxmIHdpbGwgZ2l2ZSBpdCw8L3E+IHNhaWQgdGhlIGtpbmcsIGFuZCBtb3VudGluZyBhIE5pc2FlYW4gaG9yc2UgaGUgbGVkIHRoZSB3YXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBsZXR0ZXJzIHRoZSBraW5ncyBrZXB0IHNlbmRpbmcgdG8gUHlycmh1cywgYW5kIGF0IHRoZSBzYW1lIHRpbWUgb24gdGhlaXIgb3duIHBhcnQgdGhleSBhc3NhaWxlZCBEZW1ldHJpdXMgd2hpbGUgaGUgd2FzIHN0aWxsIHdhaXRpbmcgdG8gY29tcGxldGUgaGlzIHByZXBhcmF0aW9ucy4gUHRvbGVteSBzYWlsZWQgdXAgd2l0aCBhIGdyZWF0IGZsZWV0IGFuZCB0cmllZCB0byBicmluZyB0aGUgR3JlZWsgY2l0aWVzIHRvIHJldm9sdCwgd2hpbGUgTHlzaW1hY2h1cyBpbnZhZGVkIHVwcGVyIE1hY2Vkb25pYSBmcm9tIFRocmFjZSBhbmQgcmF2YWdlZCB0aGUgY291bnRyeS4gU28gUHlycmh1cywgdGFraW5nIHRoZSBmaWVsZCBhdCB0aGUgc2FtZSB0aW1lIHdpdGggdGhlc2UsIG1hcmNoZWQgYWdhaW5zdCBCZXJvZWEsIGV4cGVjdGluZywgYXMgcHJvdmVkIHRvIGJlIHRoZSBjYXNlLCB0aGF0IERlbWV0cml1cyB3b3VsZCBnbyB0byBjb25mcm9udCBMeXNpbWFjaHVzLCBhbmQgdGh1cyBsZWF2ZSB0aGUgbG93ZXIgY291bnRyeSB1bnByb3RlY3RlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgbmlnaHQgUHlycmh1cyBkcmVhbWVkIHRoYXQgaGUgd2FzIGNhbGxlZCBieSBBbGV4YW5kZXIgdGhlIEdyZWF0LCBhbmQgdGhhdCB3aGVuIGhlIGFuc3dlcmVkIHRoZSBjYWxsIGhlIGZvdW5kIHRoZSBraW5nIGx5aW5nIG9uIGEgY291Y2gsIGJ1dCBtZXQgd2l0aCBraW5kbHkgc3BlZWNoIGFuZCBmcmllbmRseSB0cmVhdG1lbnQgZnJvbSBoaW0sIGFuZCByZWNlaXZlZCBhIHByb21pc2Ugb2YgaGlzIHJlYWR5IGFpZCBhbmQgaGVscC4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBob3csIDAgS2luZyw8L3E+IFB5cnJodXMgdmVudHVyZWQgdG8gYXNrLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2hlbiB0aG91IGFydCBzaWNrLCBjYW5zdCB0aG91IGdpdmUgbWUgYWlkIGFuZCBoZWxwPzwvcT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgbmFtZSBpdHNlbGYgd2lsbCBnaXZlIGl0LDwvcT4gc2FpZCB0aGUga2luZywgYW5kIG1vdW50aW5nIGEgTmlzYWVhbiBob3JzZSBoZSBsZWQgdGhlIHdheS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB2aXNpb24gZ2F2ZSBQeXJyaHVzIGdyZWF0IGFzc3VyYW5jZSwgYW5kIGxlYWRpbmcgaGlzIGFybXkgd2l0aCBhbGwgc3BlZWQgdGhyb3VnaCB0aGUgaW50ZXJ2ZW5pbmcgZGlzdHJpY3RzIGhlIHRvb2sgcG9zc2Vzc2lvbiBvZiBCZXJvZWE7IHRoZW4sIHN0YXRpb25pbmcgdGhlIGdyZWF0ZXIgcGFydCBvZiBoaXMgZm9yY2VzIHRoZXJlLCBoZSBwcm9jZWVkZWQgdG8gc3ViZHVlIHRoZSByZXN0IG9mIHRoZSBjb3VudHJ5IHRocm91Z2ggaGlzIGdlbmVyYWxzLiBXaGVuIERlbWV0cml1cyBoZWFyZCBvZiB0aGlzLCBhbmQgYmVjYW1lIGF3YXJlIG9mIGEgcGVybmljaW91cyB1cHJvYXIgaW4gaGlzIGNhbXAgb24gdGhlIHBhcnQgb2YgdGhlIE1hY2Vkb25pYW5zLCBoZSB3YXMgYWZyYWlkIHRvIGxlYWQgdGhlbSBmYXJ0aGVyIG9uLCBsZXN0IG9uIGNvbWluZyBpbnRvIHRoZSBuZWlnaGJvdXJob29kIG9mIGEgTWFjZWRvbmlhbiBraW5nIG9mIGdyZWF0IHJlbm93biB0aGV5IHNob3VsZCBnbyBvdmVyIHRvIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIGhlIHR1cm5lZCBiYWNrIGFuZCBsZWQgdGhlbSBhZ2FpbnN0IFB5cnJodXMsIHdpdGggdGhlIGlkZWEgdGhhdCBoZSB3YXMgYSBmb3JlaWduZXIgYW5kIGhhdGVkIGJ5IHRoZSBNYWNlZG9uaWFucy4gQnV0IGFmdGVyIGhlIGhhZCBwaXRjaGVkIGhpcyBjYW1wIG92ZXIgYWdhaW5zdCBQeXJyaHVzLCBtYW55IEJlcm9lYW5zIGNhbWUgdGhpdGhlciB3aXRoIGxvdWQgcHJhaXNlcyBvZiBQeXJyaHVzOyB0aGV5IHNhaWQgaGUgd2FzIGludmluY2libGUgaW4gYXJtcyBhbmQgYSBicmlsbGlhbnQgaGVybywgYW5kIHRyZWF0ZWQgaGlzIGNhcHRpdmVzIHdpdGggbWlsZG5lc3MgYW5kIGh1bWFuaXR5LiBUaGVyZSB3ZXJlIHNvbWUgYWxzbyB3aG9tIFB5cnJodXMgaGltc2VsZiBzZW50IGludG8gdGhlIGNhbXA7IHRoZXkgcHJldGVuZGVkIHRvIGJlIE1hY2Vkb25pYW5zLCBhbmQgc2FpZCB0aGF0IG5vdyB3YXMgdGhlIGZhdm91cmFibGUgdGltZSB0byByaWQgdGhlbXNlbHZlcyBvZiBEZW1ldHJpdXMgYW5kIGhpcyBzZXZlcml0eSwgYnkgZ29pbmcgb3ZlciB0byBQeXJyaHVzLCBhIG1hbiB3aG8gd2FzIGdyYWNpb3VzIHRvIHRoZSBjb21tb24gZm9sayBhbmQgZm9uZCBvZiBoaXMgc29sZGllcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMsIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGFybXkgd2FzIGFsbCBleGNpdGVtZW50LCBhbmQgd2VudCBhYm91dCBsb29raW5nIGZvciBQeXJyaHVzOyBmb3IgaXQgY2hhbmNlZCB0aGF0IGhlIGhhZCB0YWtlbiBvZmYgaGlzIGhlbG1ldCwgYW5kIGhlIHdhcyBub3QgcmVjb2duaXNlZCB1bnRpbCBoZSBiZXRob3VnaHQgaGltc2VsZiBhbmQgcHV0IGl0IG9uIGFnYWluLCB3aGVuIGl0cyB0b3dlcmluZyBjcmVzdCBhbmQgaXRzIGdvYXQncyBob3JucyBtYWRlIGhpbSBrbm93biB0byBhbGwuIFNvbWUgb2YgdGhlIE1hY2Vkb25pYW5zIHRoZXJlZm9yZSByYW4gdG8gaGltIGFuZCBhc2tlZCBoaW0gZm9yIGhpcyB3YXRjaHdvcmQsIGFuZCBvdGhlcnMgcHV0IGdhcmxhbmRzIG9mIG9ha2VuIGJvdWdocyBhYm91dCB0aGVpciBoZWFkcyBiZWNhdXNlIHRoZXkgc2F3IHRoZSBzb2xkaWVycyBhYm91dCBoaW0gZ2FybGFuZGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgcHJlc2VudGx5IGV2ZW4gdG8gRGVtZXRyaXVzIGhpbXNlbGYgY2VydGFpbiBwZXJzb25zIHZlbnR1cmVkIHRvIHNheSB0aGF0IGlmIGhlIHF1aWV0bHkgd2l0aGRyZXcgYW5kIHJlbm91bmNlZCBoaXMgdW5kZXJ0YWtpbmdzIG1lbiB3b3VsZCB0aGluayB0aGF0IGhlIGhhZCB0YWtlbiB3aXNlIGNvdW5zZWwuIEhlIHNhdyB0aGF0IHRoaXMgYWR2aWNlIHRhbGxpZWQgd2l0aCB0aGUgYWdpdGF0aW9uIGluIHRoZSBjYW1wLCBhbmQgd2FzIGZyaWdodGVuZWQsIGFuZCBzZWNyZXRseSBzdG9sZSBhd2F5LCBhZnRlciBwdXR0aW5nIG9uIGEgYnJvYWQtYnJpbW1lZCBoYXQgYW5kIGEgc2ltcGxlIHNvbGRpZXIncyBjbG9hay4gU28gUHlycmh1cyBjYW1lIHVwLCB0b29rIHRoZSBjYW1wIHdpdGhvdXQgYSBibG93LCBhbmQgd2FzIHByb2NsYWltZWQga2luZyBvZiBNYWNlZG9uaWEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgdmlzaW9uIGdhdmUgUHlycmh1cyBncmVhdCBhc3N1cmFuY2UsIGFuZCBsZWFkaW5nIGhpcyBhcm15IHdpdGggYWxsIHNwZWVkIHRocm91Z2ggdGhlIGludGVydmVuaW5nIGRpc3RyaWN0cyBoZSB0b29rIHBvc3Nlc3Npb24gb2YgQmVyb2VhOyB0aGVuLCBzdGF0aW9uaW5nIHRoZSBncmVhdGVyIHBhcnQgb2YgaGlzIGZvcmNlcyB0aGVyZSwgaGUgcHJvY2VlZGVkIHRvIHN1YmR1ZSB0aGUgcmVzdCBvZiB0aGUgY291bnRyeSB0aHJvdWdoIGhpcyBnZW5lcmFscy4gV2hlbiBEZW1ldHJpdXMgaGVhcmQgb2YgdGhpcywgYW5kIGJlY2FtZSBhd2FyZSBvZiBhIHBlcm5pY2lvdXMgdXByb2FyIGluIGhpcyBjYW1wIG9uIHRoZSBwYXJ0IG9mIHRoZSBNYWNlZG9uaWFucywgaGUgd2FzIGFmcmFpZCB0byBsZWFkIHRoZW0gZmFydGhlciBvbiwgbGVzdCBvbiBjb21pbmcgaW50byB0aGUgbmVpZ2hib3VyaG9vZCBvZiBhIE1hY2Vkb25pYW4ga2luZyBvZiBncmVhdCByZW5vd24gdGhleSBzaG91bGQgZ28gb3ZlciB0byBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBoZSB0dXJuZWQgYmFjayBhbmQgbGVkIHRoZW0gYWdhaW5zdCBQeXJyaHVzLCB3aXRoIHRoZSBpZGVhIHRoYXQgaGUgd2FzIGEgZm9yZWlnbmVyIGFuZCBoYXRlZCBieSB0aGUgTWFjZWRvbmlhbnMuIEJ1dCBhZnRlciBoZSBoYWQgcGl0Y2hlZCBoaXMgY2FtcCBvdmVyIGFnYWluc3QgUHlycmh1cywgbWFueSBCZXJvZWFucyBjYW1lIHRoaXRoZXIgd2l0aCBsb3VkIHByYWlzZXMgb2YgUHlycmh1czsgdGhleSBzYWlkIGhlIHdhcyBpbnZpbmNpYmxlIGluIGFybXMgYW5kIGEgYnJpbGxpYW50IGhlcm8sIGFuZCB0cmVhdGVkIGhpcyBjYXB0aXZlcyB3aXRoIG1pbGRuZXNzIGFuZCBodW1hbml0eS4gVGhlcmUgd2VyZSBzb21lIGFsc28gd2hvbSBQeXJyaHVzIGhpbXNlbGYgc2VudCBpbnRvIHRoZSBjYW1wOyB0aGV5IHByZXRlbmRlZCB0byBiZSBNYWNlZG9uaWFucywgYW5kIHNhaWQgdGhhdCBub3cgd2FzIHRoZSBmYXZvdXJhYmxlIHRpbWUgdG8gcmlkIHRoZW1zZWx2ZXMgb2YgRGVtZXRyaXVzIGFuZCBoaXMgc2V2ZXJpdHksIGJ5IGdvaW5nIG92ZXIgdG8gUHlycmh1cywgYSBtYW4gd2hvIHdhcyBncmFjaW91cyB0byB0aGUgY29tbW9uIGZvbGsgYW5kIGZvbmQgb2YgaGlzIHNvbGRpZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMsIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGFybXkgd2FzIGFsbCBleGNpdGVtZW50LCBhbmQgd2VudCBhYm91dCBsb29raW5nIGZvciBQeXJyaHVzOyBmb3IgaXQgY2hhbmNlZCB0aGF0IGhlIGhhZCB0YWtlbiBvZmYgaGlzIGhlbG1ldCwgYW5kIGhlIHdhcyBub3QgcmVjb2duaXNlZCB1bnRpbCBoZSBiZXRob3VnaHQgaGltc2VsZiBhbmQgcHV0IGl0IG9uIGFnYWluLCB3aGVuIGl0cyB0b3dlcmluZyBjcmVzdCBhbmQgaXRzIGdvYXQncyBob3JucyBtYWRlIGhpbSBrbm93biB0byBhbGwuIFNvbWUgb2YgdGhlIE1hY2Vkb25pYW5zIHRoZXJlZm9yZSByYW4gdG8gaGltIGFuZCBhc2tlZCBoaW0gZm9yIGhpcyB3YXRjaHdvcmQsIGFuZCBvdGhlcnMgcHV0IGdhcmxhbmRzIG9mIG9ha2VuIGJvdWdocyBhYm91dCB0aGVpciBoZWFkcyBiZWNhdXNlIHRoZXkgc2F3IHRoZSBzb2xkaWVycyBhYm91dCBoaW0gZ2FybGFuZGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBwcmVzZW50bHkgZXZlbiB0byBEZW1ldHJpdXMgaGltc2VsZiBjZXJ0YWluIHBlcnNvbnMgdmVudHVyZWQgdG8gc2F5IHRoYXQgaWYgaGUgcXVpZXRseSB3aXRoZHJldyBhbmQgcmVub3VuY2VkIGhpcyB1bmRlcnRha2luZ3MgbWVuIHdvdWxkIHRoaW5rIHRoYXQgaGUgaGFkIHRha2VuIHdpc2UgY291bnNlbC4gSGUgc2F3IHRoYXQgdGhpcyBhZHZpY2UgdGFsbGllZCB3aXRoIHRoZSBhZ2l0YXRpb24gaW4gdGhlIGNhbXAsIGFuZCB3YXMgZnJpZ2h0ZW5lZCwgYW5kIHNlY3JldGx5IHN0b2xlIGF3YXksIGFmdGVyIHB1dHRpbmcgb24gYSBicm9hZC1icmltbWVkIGhhdCBhbmQgYSBzaW1wbGUgc29sZGllcidzIGNsb2FrLiBTbyBQeXJyaHVzIGNhbWUgdXAsIHRvb2sgdGhlIGNhbXAgd2l0aG91dCBhIGJsb3csIGFuZCB3YXMgcHJvY2xhaW1lZCBraW5nIG9mIE1hY2Vkb25pYS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdyBMeXNpbWFjaHVzIG1hZGUgaGlzIGFwcGVhcmFuY2UsIGNsYWltZWQgdGhhdCB0aGUgb3ZlcnRocm93IG9mIERlbWV0cml1cyBoYWQgYmVlbiB0aGUgam9pbnQgd29yayBvZiBib3RoLCBhbmQgZGVtYW5kZWQgYSBkaXZpc2lvbiBvZiB0aGUga2luZ2RvbS4gU28gUHlycmh1cywgd2hvIGRpZCBub3QgeWV0IGZlZWwgZW50aXJlIGNvbmZpZGVuY2UgaW4gdGhlIE1hY2Vkb25pYW5zLCBidXQgd2FzIHN0aWxsIGRvdWJ0ZnVsIGFib3V0IHRoZW0sIGFjY2VwdGVkIHRoZSBwcm9wb3NpdGlvbiBvZiBMeXNpbWFjaHVzLCBhbmQgdGhleSBkaXZpZGVkIHRoZSBjaXRpZXMgYW5kIHRoZSB0ZXJyaXRvcnkgd2l0aCBvbmUgYW5vdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBhdmFpbGVkIGZvciB0aGUgcHJlc2VudCwgYW5kIHByZXZlbnRlZCB3YXIgYmV0d2VlbiB0aGVtLCBidXQgc2hvcnRseSBhZnRlcndhcmQgdGhleSBwZXJjZWl2ZWQgdGhhdCB0aGUgZGlzdHJpYnV0aW9uIHdoaWNoIHRoZXkgaGFkIG1hZGUgZGlkIG5vdCBwdXQgYW4gZW5kIHRvIHRoZWlyIGVubWl0eSwgYnV0IGdhdmUgb2NjYXNpb24gZm9yIGNvbXBsYWludHMgYW5kIHF1YXJyZWxzLiBGb3IgaG93IG1lbiB0byB3aG9zZSByYXBhY2l0eSBuZWl0aGVyIHNlYSBub3IgbW91bnRhaW4gbm9yIHVuaW5oYWJpdGFibGUgZGVzZXJ0IHNldHMgYSBsaW1pdCwgbWVuIHRvIHdob3NlIGlub3JkaW5hdGUgZGVzaXJlcyB0aGUgYm91bmRhcmllcyB3aGljaCBzZXBhcmF0ZSBFdXJvcGUgYW5kIEFzaWEgcHV0IG5vIHN0b3AsIGNhbiByZW1haW4gY29udGVudCB3aXRoIHdoYXQgdGhleSBoYXZlIGFuZCBkbyBvbmUgYW5vdGhlciBubyB3cm9uZyB3aGVuIHRoZXkgYXJlIGluIGNsb3NlIHRvdWNoLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5pdCBpcyBpbXBvc3NpYmxlIHRvIHNheS4gTmF5LCB0aGV5IGFyZSBwZXJwZXR1YWxseSBhdCB3YXIsIGJlY2F1c2UgcGxvdHMgYW5kIGplYWxvdXNpZXMgYXJlIHBhcnRzIG9mIHRoZWlyIG5hdHVyZXMsIGFuZCB0aGV5IHRyZWF0IHRoZSB0d28gd29yZHMsIHdhciBhbmQgcGVhY2UsIGxpa2UgY3VycmVudCBjb2lucywgdXNpbmcgd2hpY2hldmVyIGhhcHBlbnMgdG8gYmUgZm9yIHRoZWlyIGFkdmFudGFnZSwgcmVnYXJkbGVzcyBvZiBqdXN0aWNlOyBmb3Igc3VyZWx5IHRoZXkgYXJlIGJldHRlciBtZW4gd2hlbiB0aGV5IHdhZ2Ugd2FyIG9wZW5seSB0aGFuIHdoZW4gdGhleSBnaXZlIHRoZSBuYW1lcyBvZiBqdXN0aWNlIGFuZCBmcmllbmRzaGlwIHRvIHRoZSB0aW1lcyBvZiBpbmFjdGl2aXR5IGFuZCBsZWlzdXJlIHdoaWNoIGludGVycnVwdCB0aGVpciB3b3JrIG9mIGluanVzdGljZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIFB5cnJodXMgbWFkZSB0aGlzIHBsYWluOyBmb3IsIHNldHRpbmcgaGltc2VsZiB0byBoaW5kZXIgdGhlIGdyb3dpbmcgcG93ZXIgb2YgRGVtZXRyaXVzLCBhbmQgdHJ5aW5nIHRvIHByZXZlbnQgaXRzIHJlY292ZXJ5LCBzbyB0byBzcGVhaywgZnJvbSBhIHNlcmlvdXMgaWxsbmVzcywgaGUgd2VudCB0byB0aGUgaGVscCBvZiB0aGUgR3JlZWtzIGFuZCBlbnRlcmVkIEF0aGVucy4gSGVyZSBoZSB3ZW50IHVwIHRvIHRoZSBhY3JvcG9saXMgYW5kIHNhY3JpZmljZWQgdG8gdGhlIGdvZGRlc3MsIHRoZW4gY2FtZSBkb3duIGFnYWluIG9uIHRoZSBzYW1lIGRheSwgYW5kIHRvbGQgdGhlIHBlb3BsZSBoZSB3YXMgd2VsbCBwbGVhc2VkIHdpdGggdGhlIGNvbmZpZGVuY2UgYW5kIGdvb2R3aWxsIHdoaWNoIHRoZXkgaGFkIHNob3duIGhpbSwgYnV0IHRoYXQgaW4gZnV0dXJlLCBpZiB0aGV5IHdlcmUgd2lzZSwgdGhleSB3b3VsZCBub3QgYWRtaXQgYW55IG9uZSBvZiB0aGUga2luZ3MgaW50byB0aGVpciBjaXR5IG5vciBvcGVuIHRoZWlyIGdhdGVzIHRvIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgYWN0dWFsbHkgbWFkZSBwZWFjZSB3aXRoIERlbWV0cml1cywgYnV0IGluIGEgbGl0dGxlIHdoaWxlLCB3aGVuIERlbWV0cml1cyBoYWQgc2V0IG91dCBmb3IgQXNpYSwgaGUgb25jZSBtb3JlIHRvb2sgdGhlIGFkdmljZSBvZiBMeXNpbWFjaHVzIGFuZCB0cmllZCB0byBicmluZyBUaGVzc2FseSB0byByZXZvbHQsIGJlc2lkZXMgd2FnaW5nIHdhciB1cG9uIHRoZSBnYXJyaXNvbnMgb2YgRGVtZXRyaXVzIGluIHRoZSBHcmVlayBjaXRpZXMuIEZvciBoZSBmb3VuZCB0aGF0IHRoZSBNYWNlZG9uaWFucyB3ZXJlIGJldHRlciBkaXNwb3NlZCB3aGVuIHRoZXkgd2VyZSBvbiBhIGNhbXBhaWduIHRoYW4gd2hlbiB0aGV5IHdlcmUgdW5vY2N1cGllZCwgYW5kIGhlIGhpbXNlbGYgd2FzIGJ5IG5hdHVyZSBlbnRpcmVseSBhdmVyc2UgdG8ga2VlcGluZyBxdWlldC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdyBMeXNpbWFjaHVzIG1hZGUgaGlzIGFwcGVhcmFuY2UsIGNsYWltZWQgdGhhdCB0aGUgb3ZlcnRocm93IG9mIERlbWV0cml1cyBoYWQgYmVlbiB0aGUgam9pbnQgd29yayBvZiBib3RoLCBhbmQgZGVtYW5kZWQgYSBkaXZpc2lvbiBvZiB0aGUga2luZ2RvbS4gU28gUHlycmh1cywgd2hvIGRpZCBub3QgeWV0IGZlZWwgZW50aXJlIGNvbmZpZGVuY2UgaW4gdGhlIE1hY2Vkb25pYW5zLCBidXQgd2FzIHN0aWxsIGRvdWJ0ZnVsIGFib3V0IHRoZW0sIGFjY2VwdGVkIHRoZSBwcm9wb3NpdGlvbiBvZiBMeXNpbWFjaHVzLCBhbmQgdGhleSBkaXZpZGVkIHRoZSBjaXRpZXMgYW5kIHRoZSB0ZXJyaXRvcnkgd2l0aCBvbmUgYW5vdGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYXZhaWxlZCBmb3IgdGhlIHByZXNlbnQsIGFuZCBwcmV2ZW50ZWQgd2FyIGJldHdlZW4gdGhlbSwgYnV0IHNob3J0bHkgYWZ0ZXJ3YXJkIHRoZXkgcGVyY2VpdmVkIHRoYXQgdGhlIGRpc3RyaWJ1dGlvbiB3aGljaCB0aGV5IGhhZCBtYWRlIGRpZCBub3QgcHV0IGFuIGVuZCB0byB0aGVpciBlbm1pdHksIGJ1dCBnYXZlIG9jY2FzaW9uIGZvciBjb21wbGFpbnRzIGFuZCBxdWFycmVscy4gRm9yIGhvdyBtZW4gdG8gd2hvc2UgcmFwYWNpdHkgbmVpdGhlciBzZWEgbm9yIG1vdW50YWluIG5vciB1bmluaGFiaXRhYmxlIGRlc2VydCBzZXRzIGEgbGltaXQsIG1lbiB0byB3aG9zZSBpbm9yZGluYXRlIGRlc2lyZXMgdGhlIGJvdW5kYXJpZXMgd2hpY2ggc2VwYXJhdGUgRXVyb3BlIGFuZCBBc2lhIHB1dCBubyBzdG9wLCBjYW4gcmVtYWluIGNvbnRlbnQgd2l0aCB3aGF0IHRoZXkgaGF2ZSBhbmQgZG8gb25lIGFub3RoZXIgbm8gd3Jvbmcgd2hlbiB0aGV5IGFyZSBpbiBjbG9zZSB0b3VjaCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPml0IGlzIGltcG9zc2libGUgdG8gc2F5LiBOYXksIHRoZXkgYXJlIHBlcnBldHVhbGx5IGF0IHdhciwgYmVjYXVzZSBwbG90cyBhbmQgamVhbG91c2llcyBhcmUgcGFydHMgb2YgdGhlaXIgbmF0dXJlcywgYW5kIHRoZXkgdHJlYXQgdGhlIHR3byB3b3Jkcywgd2FyIGFuZCBwZWFjZSwgbGlrZSBjdXJyZW50IGNvaW5zLCB1c2luZyB3aGljaGV2ZXIgaGFwcGVucyB0byBiZSBmb3IgdGhlaXIgYWR2YW50YWdlLCByZWdhcmRsZXNzIG9mIGp1c3RpY2U7IGZvciBzdXJlbHkgdGhleSBhcmUgYmV0dGVyIG1lbiB3aGVuIHRoZXkgd2FnZSB3YXIgb3Blbmx5IHRoYW4gd2hlbiB0aGV5IGdpdmUgdGhlIG5hbWVzIG9mIGp1c3RpY2UgYW5kIGZyaWVuZHNoaXAgdG8gdGhlIHRpbWVzIG9mIGluYWN0aXZpdHkgYW5kIGxlaXN1cmUgd2hpY2ggaW50ZXJydXB0IHRoZWlyIHdvcmsgb2YgaW5qdXN0aWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQeXJyaHVzIG1hZGUgdGhpcyBwbGFpbjsgZm9yLCBzZXR0aW5nIGhpbXNlbGYgdG8gaGluZGVyIHRoZSBncm93aW5nIHBvd2VyIG9mIERlbWV0cml1cywgYW5kIHRyeWluZyB0byBwcmV2ZW50IGl0cyByZWNvdmVyeSwgc28gdG8gc3BlYWssIGZyb20gYSBzZXJpb3VzIGlsbG5lc3MsIGhlIHdlbnQgdG8gdGhlIGhlbHAgb2YgdGhlIEdyZWVrcyBhbmQgZW50ZXJlZCBBdGhlbnMuIEhlcmUgaGUgd2VudCB1cCB0byB0aGUgYWNyb3BvbGlzIGFuZCBzYWNyaWZpY2VkIHRvIHRoZSBnb2RkZXNzLCB0aGVuIGNhbWUgZG93biBhZ2FpbiBvbiB0aGUgc2FtZSBkYXksIGFuZCB0b2xkIHRoZSBwZW9wbGUgaGUgd2FzIHdlbGwgcGxlYXNlZCB3aXRoIHRoZSBjb25maWRlbmNlIGFuZCBnb29kd2lsbCB3aGljaCB0aGV5IGhhZCBzaG93biBoaW0sIGJ1dCB0aGF0IGluIGZ1dHVyZSwgaWYgdGhleSB3ZXJlIHdpc2UsIHRoZXkgd291bGQgbm90IGFkbWl0IGFueSBvbmUgb2YgdGhlIGtpbmdzIGludG8gdGhlaXIgY2l0eSBub3Igb3BlbiB0aGVpciBnYXRlcyB0byBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIGhlIGFjdHVhbGx5IG1hZGUgcGVhY2Ugd2l0aCBEZW1ldHJpdXMsIGJ1dCBpbiBhIGxpdHRsZSB3aGlsZSwgd2hlbiBEZW1ldHJpdXMgaGFkIHNldCBvdXQgZm9yIEFzaWEsIGhlIG9uY2UgbW9yZSB0b29rIHRoZSBhZHZpY2Ugb2YgTHlzaW1hY2h1cyBhbmQgdHJpZWQgdG8gYnJpbmcgVGhlc3NhbHkgdG8gcmV2b2x0LCBiZXNpZGVzIHdhZ2luZyB3YXIgdXBvbiB0aGUgZ2Fycmlzb25zIG9mIERlbWV0cml1cyBpbiB0aGUgR3JlZWsgY2l0aWVzLiBGb3IgaGUgZm91bmQgdGhhdCB0aGUgTWFjZWRvbmlhbnMgd2VyZSBiZXR0ZXIgZGlzcG9zZWQgd2hlbiB0aGV5IHdlcmUgb24gYSBjYW1wYWlnbiB0aGFuIHdoZW4gdGhleSB3ZXJlIHVub2NjdXBpZWQsIGFuZCBoZSBoaW1zZWxmIHdhcyBieSBuYXR1cmUgZW50aXJlbHkgYXZlcnNlIHRvIGtlZXBpbmcgcXVpZXQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGF0IGxhc3QsIGFmdGVyIERlbWV0cml1cyBoYWQgYmVlbiB3aG9sbHkgb3ZlcnRocm93biBpbiBTeXJpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IHRoZSBiYXR0bGUgb2YgSXBzdXMsIDMwMSBCLkMuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtZXRyLiA0NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtZXRyaXVzPC90aXRsZT4sIGNoYXB0ZXIgeGxpdjwvYmlibD4uPC9ub3RlPiBMeXNpbWFjaHVzLCB3aG8gbm93IGZlbHQgaGltc2VsZiBzZWN1cmUsIGFuZCBoYWQgbm90aGluZyBvbiBoaXMgaGFuZHMsIGF0IG9uY2Ugc2V0IG91dCBhZ2FpbnN0IFB5cnJodXMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+UHlycmh1cyB3YXMgaW4gY2FtcCBhdCBFZGVzc2EsIHdoZXJlIEx5c2ltYWNodXMgZmVsbCB1cG9uIGhpcyBwcm92aXNpb24gdHJhaW5zIGFuZCBtYXN0ZXJlZCB0aGVtLCB0aHVzIGJyaW5naW5nIGhpbSB0byBzdHJhaXRzOyB0aGVuLCBieSBsZXR0ZXJzIGFuZCBjb25mZXJlbmNlcyBoZSBjb3JydXB0ZWQgdGhlIGxlYWRpbmcgTWFjZWRvbmlhbnMsIHVwYnJhaWRpbmcgdGhlbSBiZWNhdXNlIHRoZXkgaGFkIGNob3NlbiBhcyBsb3JkIGFuZCBtYXN0ZXIgYSBtYW4gd2hvIHdhcyBhIGZvcmVpZ25lciwgd2hvc2UgYW5jZXN0b3JzIGhhZCBhbHdheXMgYmVlbiBzdWJqZWN0IHRvIE1hY2Vkb25pYSwgYW5kIHdlcmUgdGhydXN0aW5nIHRoZSBmcmllbmRzIGFuZCBmYW1pbGlhcnMgb2YgQWxleGFuZGVyIG91dCBvZiB0aGUgY291bnRyeS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgbWFueSBoYWQgdGh1cyBiZWVuIHdvbiBvdmVyLCBQeXJyaHVzIHRvb2sgYWxhcm0gYW5kIGRlcGFydGVkIHdpdGggaGlzIEVwZWlyb3RzIGFuZCBhbGxpZWQgZm9yY2VzLCB0aHVzIGxvc2luZyBNYWNlZG9uaWEgcHJlY2lzZWx5IGFzIGhlIGdvdCBpdC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB5cnJoLiAxMS4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpPC9iaWJsPi48L25vdGU+ICBXaGVuY2Ugd2Ugc2VlIHRoYXQga2luZ3MgaGF2ZSBubyByZWFzb24gdG8gZmluZCBmYXVsdCB3aXRoIHBvcHVsYXIgYm9kaWVzIGZvciBjaGFuZ2luZyBzaWRlcyBhcyBzdWl0cyB0aGVpciBpbnRlcmVzdHM7IGZvciBpbiBkb2luZyB0aGlzIHRoZXkgYXJlIGJ1dCBpbWl0YXRpbmcgdGhlIGtpbmdzIHRoZW1zZWx2ZXMsIHdobyBhcmUgdGhlaXIgdGVhY2hlcnMgaW4gdW5mYWl0aGZ1bG5lc3MgYW5kIHRyZWFjaGVyeSwgYW5kIHRoaW5rIGhpbSBtb3N0IGFkdmFudGFnZWQgd2hvIGxlYXN0IG9ic2VydmVzIGp1c3RpY2UuCgkJCTwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCB0aGUgYmF0dGxlIG9mIElwc3VzLCAzMDEgQi5DLiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gNDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbWV0cml1czwvdGl0bGU+LCBjaGFwdGVyIHhsaXY8L2JpYmw+Ljwvbm90ZT4gTHlzaW1hY2h1cywgd2hvIG5vdyBmZWx0IGhpbXNlbGYgc2VjdXJlLCBhbmQgaGFkIG5vdGhpbmcgb24gaGlzIGhhbmRzLCBhdCBvbmNlIHNldCBvdXQgYWdhaW5zdCBQeXJyaHVzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbWV0ci4gNDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbWV0cml1czwvdGl0bGU+LCBjaGFwdGVyIHhsaXY8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbWV0cml1czwvdGl0bGU+LCBjaGFwdGVyIHhsaXY8L3RyYW5zbGF0aW9uPg=="
translation['12.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlB5cnJodXMgd2FzIGluIGNhbXAgYXQgRWRlc3NhLCB3aGVyZSBMeXNpbWFjaHVzIGZlbGwgdXBvbiBoaXMgcHJvdmlzaW9uIHRyYWlucyBhbmQgbWFzdGVyZWQgdGhlbSwgdGh1cyBicmluZ2luZyBoaW0gdG8gc3RyYWl0czsgdGhlbiwgYnkgbGV0dGVycyBhbmQgY29uZmVyZW5jZXMgaGUgY29ycnVwdGVkIHRoZSBsZWFkaW5nIE1hY2Vkb25pYW5zLCB1cGJyYWlkaW5nIHRoZW0gYmVjYXVzZSB0aGV5IGhhZCBjaG9zZW4gYXMgbG9yZCBhbmQgbWFzdGVyIGEgbWFuIHdobyB3YXMgYSBmb3JlaWduZXIsIHdob3NlIGFuY2VzdG9ycyBoYWQgYWx3YXlzIGJlZW4gc3ViamVjdCB0byBNYWNlZG9uaWEsIGFuZCB3ZXJlIHRocnVzdGluZyB0aGUgZnJpZW5kcyBhbmQgZmFtaWxpYXJzIG9mIEFsZXhhbmRlciBvdXQgb2YgdGhlIGNvdW50cnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIG1hbnkgaGFkIHRodXMgYmVlbiB3b24gb3ZlciwgUHlycmh1cyB0b29rIGFsYXJtIGFuZCBkZXBhcnRlZCB3aXRoIGhpcyBFcGVpcm90cyBhbmQgYWxsaWVkIGZvcmNlcywgdGh1cyBsb3NpbmcgTWFjZWRvbmlhIHByZWNpc2VseSBhcyBoZSBnb3QgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHlycmguIDExLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGk8L2JpYmw+Ljwvbm90ZT4gIFdoZW5jZSB3ZSBzZWUgdGhhdCBraW5ncyBoYXZlIG5vIHJlYXNvbiB0byBmaW5kIGZhdWx0IHdpdGggcG9wdWxhciBib2RpZXMgZm9yIGNoYW5naW5nIHNpZGVzIGFzIHN1aXRzIHRoZWlyIGludGVyZXN0czsgZm9yIGluIGRvaW5nIHRoaXMgdGhleSBhcmUgYnV0IGltaXRhdGluZyB0aGUga2luZ3MgdGhlbXNlbHZlcywgd2hvIGFyZSB0aGVpciB0ZWFjaGVycyBpbiB1bmZhaXRoZnVsbmVzcyBhbmQgdHJlYWNoZXJ5LCBhbmQgdGhpbmsgaGltIG1vc3QgYWR2YW50YWdlZCB3aG8gbGVhc3Qgb2JzZXJ2ZXMganVzdGljZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHlycmguIDExLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGk8L2JpYmw+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgdGhlbiwgd2hlbiBQeXJyaHVzIGhhZCBiZWVuIGRyaXZlbiBiYWNrIGludG8gRXBlaXJ1cyBhbmQgaGFkIGdpdmVuIHVwIE1hY2Vkb25pYSwgRm9ydHVuZSBwdXQgaXQgaW50byBoaXMgcG93ZXIgdG8gZW5qb3kgd2hhdCBoZSBoYWQgd2l0aG91dCBtb2xlc3RhdGlvbiwgdG8gbGl2ZSBpbiBwZWFjZSwgYW5kIHRvIHJlaWduIG92ZXIgaGlzIG93biBwZW9wbGUuIEJ1dCBoZSB0aG91Z2h0IGl0IHRlZGlvdXMgdG8gdGhlIHBvaW50IG9mIG5hdXNlYSBpZiBoZSB3ZXJlIG5vdCBpbmZsaWN0aW5nIG1pc2NoaWVmIG9uIG90aGVycyBvciBzdWZmZXJpbmcgaXQgYXQgb3RoZXJzJyBoYW5kcywgYW5kIGxpa2UgQWNoaWxsZXMgY291bGQgbm90IGVuZHVyZSBpZGxlbmVzcywKCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lLCB0aGVuLCB3aGVuIFB5cnJodXMgaGFkIGJlZW4gZHJpdmVuIGJhY2sgaW50byBFcGVpcnVzIGFuZCBoYWQgZ2l2ZW4gdXAgTWFjZWRvbmlhLCBGb3J0dW5lIHB1dCBpdCBpbnRvIGhpcyBwb3dlciB0byBlbmpveSB3aGF0IGhlIGhhZCB3aXRob3V0IG1vbGVzdGF0aW9uLCB0byBsaXZlIGluIHBlYWNlLCBhbmQgdG8gcmVpZ24gb3ZlciBoaXMgb3duIHBlb3BsZS4gQnV0IGhlIHRob3VnaHQgaXQgdGVkaW91cyB0byB0aGUgcG9pbnQgb2YgbmF1c2VhIGlmIGhlIHdlcmUgbm90IGluZmxpY3RpbmcgbWlzY2hpZWYgb24gb3RoZXJzIG9yIHN1ZmZlcmluZyBpdCBhdCBvdGhlcnMnIGhhbmRzLCBhbmQgbGlrZSBBY2hpbGxlcyBjb3VsZCBub3QgZW5kdXJlIGlkbGVuZXNzLAoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5idXQgYXRlIGhpcyBoZWFydCBhd2F5PC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlJlbWFpbmluZyB0aGVyZSwgYW5kIHBpbmVkIGZvciB3YXItY3J5IGFuZCBiYXR0bGUuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxLjQ5MSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGkuIDQ5MSBmPC9iaWJsPi48L25vdGU+CgkJCQlGaWxsZWQgd2l0aCBzdWNoIGRlc2lyZXMsIHRoZW4sIGhlIGZvdW5kIGdyb3VuZCBmb3IgZnJlc2ggdW5kZXJ0YWtpbmdzIGluIHRoZSBmb2xsb3dpbmcgY2lyY3Vtc3RhbmNlcy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgUm9tYW5zIHdlcmUgYXQgd2FyIHdpdGggdGhlIHBlb3BsZSBvZiBUYXJlbnR1bSwgd2hvLCBiZWluZyBhYmxlIG5laXRoZXIgdG8gY2Fycnkgb24gdGhlIHdhciwgbm9yIHlldCwgb3dpbmcgdG8gdGhlIHJhc2huZXNzIGFuZCB2aWxsYWlueSBvZiB0aGVpciBwb3B1bGFyIGxlYWRlcnMsIHRvIHB1dCBhbiBlbmQgdG8gaXQsIHdpc2hlZCB0byBtYWtlIFB5cnJodXMgdGhlaXIgbGVhZGVyIGFuZCBzdW1tb24gaGltIHRvIHRoZSB3YXIsIGJlbGlldmluZyBoaW0gdG8gYmUgbW9zdCBhdCBsZWlzdXJlIG9mIGFsbCB0aGUga2luZ3MsIGFuZCBhIG1vc3QgZm9ybWlkYWJsZSBnZW5lcmFsLiBPZiB0aGUgZWxkZXJseSBhbmQgc2Vuc2libGUgY2l0aXplbnMsIHNvbWUgd2hvIHdlcmUgZGlyZWN0bHkgb3Bwb3NlZCB0byB0aGlzIHBsYW4gd2VyZSBvdmVyYm9ybmUgYnkgdGhlIGNsYW1vdXIgYW5kIHZpb2xlbmNlIG9mIHRoZSB3YXIgcGFydHksIGFuZCBvdGhlcnMsIHNlZWluZyB0aGlzLCBhYnNlbnRlZCB0aGVtc2VsdmVzIGZyb20gdGhlIGFzc2VtYmx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlcmUgd2FzIGEgY2VydGFpbiB3b3J0aHkgbWFuLCBNZXRvbiBieSBuYW1lLCB3aG8sIHdoZW4gdGhlIGRheSBvbiB3aGljaCB0aGUgZGVjcmVlIHdhcyB0byBiZSByYXRpZmllZCB3YXMgYXQgaGFuZCBhbmQgdGhlIHBlb3BsZSB3ZXJlIHRha2luZyB0aGVpciBzZWF0cyBpbiB0aGUgYXNzZW1ibHksIHRvb2sgYSB3aXRoZXJlZCBnYXJsYW5kIGFuZCBhIHRvcmNoLCBhZnRlciB0aGUgd2F5IG9mIHJldmVsbGVycywgYW5kIGNhbWUgZGFuY2luZyBpbiBiZWhpbmQgYSBmbHV0ZS1naXJsIHdobyBsZWQgdGhlIHdheSBmb3IgaGltLiBUaGVuLCBhcyB3aWxsIGhhcHBlbiBpbiBhIHRocm9uZyBvZiBmcmVlIHBlb3BsZSBub3QgZ2l2ZW4gdG8gZGVjb3J1bSwgc29tZSBjbGFwcGVkIHRoZWlyIGhhbmRzIGF0IHNpZ2h0IG9mIGhpbSwgYW5kIG90aGVycyBsYXVnaGVkLCBidXQgbm9uZSB0cmllZCB0byBzdG9wIGhpbTsgbmF5LCB0aGV5IGJhZGUgdGhlIHdvbWFuIHBsYXkgb24gaGVyIGZsdXRlIGFuZCBjYWxsZWQgdXBvbiBNZXRvbiB0byBjb21lIGZvcndhcmQgYW5kIGdpdmUgdGhlbSBhIHNvbmc7IGFuZCBpdCB3YXMgZXhwZWN0ZWQgdGhhdCBoZSB3b3VsZCBkbyBzby4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gc2lsZW5jZSBoYWQgYmVlbiBtYWRlLCBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1lbiBvZiBUYXJlbnR1bSwgeWUgZG8gd2VsbCBub3QgdG8gZnJvd24gdXBvbiB0aG9zZSB3aG8gd2lzaCB0byBzcG9ydCBhbmQgcmV2ZWwsIHdoaWxlIHRoZXkgY2FuLiBBbmQgaWYgeWUgYXJlIHdpc2UsIHllIHdpbGwgYWxsIGFsc28gZ2V0IHNvbWUgZW5qb3ltZW50IHN0aWxsIG91dCBvZiB5b3VyIGZyZWVkb20sIGFzc3VyZWQgdGhhdCB5ZSB3aWxsIGhhdmUgb3RoZXIgYnVzaW5lc3MgYW5kIGEgZGlmZmVyZW50IGxpZmUgYW5kIGRpZXQgd2hlbiBQeXJyaHVzIGhhcyBjb21lIGludG8gdGhlIGNpdHkuPC9xPiBUaGVzZSB3b3JkcyBicm91Z2h0IGNvbnZpY3Rpb24gdG8gbW9zdCBvZiB0aGUgVGFyZW50aW5lcywgYW5kIGEgbXVybXVyIG9mIGFwcGxhdXNlIHJhbiB0aHJvdWdoIHRoZSBhc3NlbWJseS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRob3NlIHdobyB3ZXJlIGFmcmFpZCB0aGF0IGlmIHBlYWNlIHdlcmUgbWFkZSB0aGV5IHdvdWxkIGJlIGdpdmVuIHVwIHRvIHRoZSBSb21hbnMsIHJldmlsZWQgdGhlIHBlb3BsZSBmb3IgdGFtZWx5IHN1Ym1pdHRpbmcgdG8gc3VjaCBzaGFtZWxlc3MgdHJlYXRtZW50IGZyb20gYSBkcnVua2VuIHJldmVsbGVyLCBhbmQgYmFuZGluZyB0b2dldGhlciB0aGV5IGNhc3QgTWV0b24gb3V0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5ILiAxOSI+RGlvbnlzaXVzIEhhbC4sIDx0aXRsZT5FeGNlcnB0YSBleCBsaWIuIHhpeC48L3RpdGxlPiwgODwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPmJ1dCBhdGUgaGlzIGhlYXJ0IGF3YXk8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVtYWluaW5nIHRoZXJlLCBhbmQgcGluZWQgZm9yIHdhci1jcnkgYW5kIGJhdHRsZS48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YnV0IGF0ZSBoaXMgaGVhcnQgYXdheTwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5SZW1haW5pbmcgdGhlcmUsIGFuZCBwaW5lZCBmb3Igd2FyLWNyeSBhbmQgYmF0dGxlLjwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMS40OTEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCBpLiA0OTEgZjwvYmlibD4uPC9ub3RlPgoJCQkJRmlsbGVkIHdpdGggc3VjaCBkZXNpcmVzLCB0aGVuLCBoZSBmb3VuZCBncm91bmQgZm9yIGZyZXNoIHVuZGVydGFraW5ncyBpbiB0aGUgZm9sbG93aW5nIGNpcmN1bXN0YW5jZXMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMS40OTEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCBpLiA0OTEgZjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgaS4gNDkxIGY8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMgd2VyZSBhdCB3YXIgd2l0aCB0aGUgcGVvcGxlIG9mIFRhcmVudHVtLCB3aG8sIGJlaW5nIGFibGUgbmVpdGhlciB0byBjYXJyeSBvbiB0aGUgd2FyLCBub3IgeWV0LCBvd2luZyB0byB0aGUgcmFzaG5lc3MgYW5kIHZpbGxhaW55IG9mIHRoZWlyIHBvcHVsYXIgbGVhZGVycywgdG8gcHV0IGFuIGVuZCB0byBpdCwgd2lzaGVkIHRvIG1ha2UgUHlycmh1cyB0aGVpciBsZWFkZXIgYW5kIHN1bW1vbiBoaW0gdG8gdGhlIHdhciwgYmVsaWV2aW5nIGhpbSB0byBiZSBtb3N0IGF0IGxlaXN1cmUgb2YgYWxsIHRoZSBraW5ncywgYW5kIGEgbW9zdCBmb3JtaWRhYmxlIGdlbmVyYWwuIE9mIHRoZSBlbGRlcmx5IGFuZCBzZW5zaWJsZSBjaXRpemVucywgc29tZSB3aG8gd2VyZSBkaXJlY3RseSBvcHBvc2VkIHRvIHRoaXMgcGxhbiB3ZXJlIG92ZXJib3JuZSBieSB0aGUgY2xhbW91ciBhbmQgdmlvbGVuY2Ugb2YgdGhlIHdhciBwYXJ0eSwgYW5kIG90aGVycywgc2VlaW5nIHRoaXMsIGFic2VudGVkIHRoZW1zZWx2ZXMgZnJvbSB0aGUgYXNzZW1ibHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVyZSB3YXMgYSBjZXJ0YWluIHdvcnRoeSBtYW4sIE1ldG9uIGJ5IG5hbWUsIHdobywgd2hlbiB0aGUgZGF5IG9uIHdoaWNoIHRoZSBkZWNyZWUgd2FzIHRvIGJlIHJhdGlmaWVkIHdhcyBhdCBoYW5kIGFuZCB0aGUgcGVvcGxlIHdlcmUgdGFraW5nIHRoZWlyIHNlYXRzIGluIHRoZSBhc3NlbWJseSwgdG9vayBhIHdpdGhlcmVkIGdhcmxhbmQgYW5kIGEgdG9yY2gsIGFmdGVyIHRoZSB3YXkgb2YgcmV2ZWxsZXJzLCBhbmQgY2FtZSBkYW5jaW5nIGluIGJlaGluZCBhIGZsdXRlLWdpcmwgd2hvIGxlZCB0aGUgd2F5IGZvciBoaW0uIFRoZW4sIGFzIHdpbGwgaGFwcGVuIGluIGEgdGhyb25nIG9mIGZyZWUgcGVvcGxlIG5vdCBnaXZlbiB0byBkZWNvcnVtLCBzb21lIGNsYXBwZWQgdGhlaXIgaGFuZHMgYXQgc2lnaHQgb2YgaGltLCBhbmQgb3RoZXJzIGxhdWdoZWQsIGJ1dCBub25lIHRyaWVkIHRvIHN0b3AgaGltOyBuYXksIHRoZXkgYmFkZSB0aGUgd29tYW4gcGxheSBvbiBoZXIgZmx1dGUgYW5kIGNhbGxlZCB1cG9uIE1ldG9uIHRvIGNvbWUgZm9yd2FyZCBhbmQgZ2l2ZSB0aGVtIGEgc29uZzsgYW5kIGl0IHdhcyBleHBlY3RlZCB0aGF0IGhlIHdvdWxkIGRvIHNvLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHNpbGVuY2UgaGFkIGJlZW4gbWFkZSwgaGUgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1lbiBvZiBUYXJlbnR1bSwgeWUgZG8gd2VsbCBub3QgdG8gZnJvd24gdXBvbiB0aG9zZSB3aG8gd2lzaCB0byBzcG9ydCBhbmQgcmV2ZWwsIHdoaWxlIHRoZXkgY2FuLiBBbmQgaWYgeWUgYXJlIHdpc2UsIHllIHdpbGwgYWxsIGFsc28gZ2V0IHNvbWUgZW5qb3ltZW50IHN0aWxsIG91dCBvZiB5b3VyIGZyZWVkb20sIGFzc3VyZWQgdGhhdCB5ZSB3aWxsIGhhdmUgb3RoZXIgYnVzaW5lc3MgYW5kIGEgZGlmZmVyZW50IGxpZmUgYW5kIGRpZXQgd2hlbiBQeXJyaHVzIGhhcyBjb21lIGludG8gdGhlIGNpdHkuPC9xPiBUaGVzZSB3b3JkcyBicm91Z2h0IGNvbnZpY3Rpb24gdG8gbW9zdCBvZiB0aGUgVGFyZW50aW5lcywgYW5kIGEgbXVybXVyIG9mIGFwcGxhdXNlIHJhbiB0aHJvdWdoIHRoZSBhc3NlbWJseS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG9zZSB3aG8gd2VyZSBhZnJhaWQgdGhhdCBpZiBwZWFjZSB3ZXJlIG1hZGUgdGhleSB3b3VsZCBiZSBnaXZlbiB1cCB0byB0aGUgUm9tYW5zLCByZXZpbGVkIHRoZSBwZW9wbGUgZm9yIHRhbWVseSBzdWJtaXR0aW5nIHRvIHN1Y2ggc2hhbWVsZXNzIHRyZWF0bWVudCBmcm9tIGEgZHJ1bmtlbiByZXZlbGxlciwgYW5kIGJhbmRpbmcgdG9nZXRoZXIgdGhleSBjYXN0IE1ldG9uIG91dC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDE5Ij5EaW9ueXNpdXMgSGFsLiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXhjZXJwdGEgZXggbGliLiB4aXguPC90aXRsZT4sIDg8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiAxOSI+RGlvbnlzaXVzIEhhbC4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkV4Y2VycHRhIGV4IGxpYi4geGl4LjwvdGl0bGU+LCA4PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FeGNlcnB0YSBleCBsaWIuIHhpeC48L3RpdGxlPiwgODxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHNvIHRoZSBkZWNyZWUgd2FzIHJhdGlmaWVkLCBhbmQgdGhlIHBlb3BsZSBzZW50IGFtYmFzc2Fkb3JzIHRvIFB5cnJodXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc3VtbWVyIG9mIDI4MSBCLkMuPC9ub3RlPiBub3Qgb25seSBmcm9tIHRoZWlyIG93biBudW1iZXIsIGJ1dCBhbHNvIGZyb20gdGhlIEl0YWxpYW4gR3JlZWtzLiBUaGVzZSBicm91Z2h0IGdpZnRzIHRvIFB5cnJodXMsIGFuZCB0b2xkIGhpbSB0aGV5IHdhbnRlZCBhIGxlYWRlciBvZiByZXB1dGF0aW9uIGFuZCBwcnVkZW5jZSwgCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhhdCBoZSB3b3VsZCBmaW5kIHRoZXJlIGxhcmdlIGZvcmNlcyBnYXRoZXJlZCBmcm9tIEx1Y2FuaWEsIE1lc3NhcGlhLCBTYW1uaXVtLCBhbmQgVGFyZW50dW0sIGFtb3VudGluZyB0byB0d2VudHkgdGhvdXNhbmQgaG9yc2UgYW5kIHRocmVlIGh1bmRyZWQgYW5kIGZpZnR5IHRob3VzYW5kIGZvb3QgYWxsIHRvbGQuIFRoaXMgbm90IG9ubHkgZXhhbHRlZCBQeXJyaHVzIGhpbXNlbGYsIGJ1dCBhbHNvIGluc3BpcmVkIHRoZSBFcGVpcm90cyB3aXRoIGVhZ2VybmVzcyB0byB1bmRlcnRha2UgdGhlIGV4cGVkaXRpb24uCgkJCTwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc3VtbWVyIG9mIDI4MSBCLkMuPC9ub3RlPiBub3Qgb25seSBmcm9tIHRoZWlyIG93biBudW1iZXIsIGJ1dCBhbHNvIGZyb20gdGhlIEl0YWxpYW4gR3JlZWtzLiBUaGVzZSBicm91Z2h0IGdpZnRzIHRvIFB5cnJodXMsIGFuZCB0b2xkIGhpbSB0aGV5IHdhbnRlZCBhIGxlYWRlciBvZiByZXB1dGF0aW9uIGFuZCBwcnVkZW5jZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IGhlIHdvdWxkIGZpbmQgdGhlcmUgbGFyZ2UgZm9yY2VzIGdhdGhlcmVkIGZyb20gTHVjYW5pYSwgTWVzc2FwaWEsIFNhbW5pdW0sIGFuZCBUYXJlbnR1bSwgYW1vdW50aW5nIHRvIHR3ZW50eSB0aG91c2FuZCBob3JzZSBhbmQgdGhyZWUgaHVuZHJlZCBhbmQgZmlmdHkgdGhvdXNhbmQgZm9vdCBhbGwgdG9sZC4gVGhpcyBub3Qgb25seSBleGFsdGVkIFB5cnJodXMgaGltc2VsZiwgYnV0IGFsc28gaW5zcGlyZWQgdGhlIEVwZWlyb3RzIHdpdGggZWFnZXJuZXNzIHRvIHVuZGVydGFrZSB0aGUgZXhwZWRpdGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGVyZSB3YXMgYSBjZXJ0YWluIENpbmVhcywgYSBtYW4gb2YgVGhlc3NhbHksIHdpdGggYSByZXB1dGF0aW9uIGZvciBncmVhdCB3aXNkb20sIHdobyBoYWQgYmVlbiBhIHB1cGlsIG9mIERlbW9zdGhlbmVzIHRoZSBvcmF0b3IsIGFuZCB3YXMgcXVpdGUgdGhlIG9ubHkgcHVibGljIHNwZWFrZXIgb2YgaGlzIGRheSB3aG8gd2FzIHRob3VnaHQgdG8gcmVtaW5kIGhpcyBoZWFyZXJzLCBhcyBhIHN0YXR1ZSBtaWdodCwgb2YgdGhhdCBncmVhdCBvcmF0b3IncyBwb3dlciBhbmQgYWJpbGl0eS4gQXNzb2NpYXRpbmcgaGltc2VsZiB3aXRoIFB5cnJodXMsIGFuZCBzZW50IGJ5IGhpbSBhcyBhbWJhc3NhZG9yIHRvIHRoZSBjaXRpZXMsIGhlIGNvbmZpcm1lZCB0aGUgc2F5aW5nIG9mIEV1cmlwaWRlcywgdG8gd2l0LCAKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+YWxsIGNhbiBiZSB3b24gYnkgZWxvcXVlbmNlPC9sPgoJCQkJCSAgICAgICAgICA8bD5UaGF0IGV2ZW4gdGhlIHN3b3JkIG9mIHdhcnJpbmcgZW5lbWllcyBtaWdodCBnYWluLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQXQgYW55IHJhdGUsIFB5cnJodXMgdXNlZCB0byBzYXkgdGhhdCBtb3JlIGNpdGllcyBoYWQgYmVlbiB3b24gZm9yIGhpbSBieSB0aGUgZWxvcXVlbmNlIG9mIENpbmVhcyB0aGFuIGJ5IGhpcyBvd24gYXJtczsgYW5kIGhlIGNvbnRpbnVlZCB0byBob2xkIENpbmVhcyBpbiBlc3BlY2lhbCBob25vdXIgYW5kIHRvIGRlbWFuZCBoaXMgc2VydmljZXMuIEl0IHdhcyB0aGlzIENpbmVhcywgdGhlbiwgd2hvLCBzZWVpbmcgdGhhdCBQeXJyaHVzIHdhcyBlYWdlcmx5IHByZXBhcmluZyBhbiBleHBlZGl0aW9uIGF0IHRoaXMgdGltZSB0byBJdGFseSwgYW5kIGZpbmRpbmcgaGltIGF0IGxlaXN1cmUgZm9yIHRoZSBtb21lbnQsIGRyZXcgaGltIGludG8gdGhlIGZvbGxvd2luZyBkaXNjb3Vyc2UuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIFJvbWFucywgMCBQeXJyaHVzLCBhcmUgc2FpZCB0byBiZSBnb29kIGZpZ2h0ZXJzLCBhbmQgdG8gYmUgcnVsZXJzIG9mIG1hbnkgd2FybGlrZSBuYXRpb25zOyBpZiwgdGhlbiwgSGVhdmVuIHNob3VsZCBwZXJtaXQgdXMgdG8gY29ucXVlciB0aGVzZSBtZW4sIGhvdyBzaG91bGQgd2UgdXNlIG91ciB2aWN0b3J5ID88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIFB5cnJodXMgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaHkgcXVlc3Rpb24sIDAgQ2luZWFzLCByZWFsbHkgbmVlZHMgbm8gYW5zd2VyOyB0aGUgUm9tYW5zIG9uY2UgY29ucXVlcmVkLCB0aGVyZSBpcyBuZWl0aGVyIGJhcmJhcmlhbiBub3IgR3JlZWsgY2l0eSB0aGVyZSB3aGljaCBpcyBhIG1hdGNoIGZvciB1cywgYnV0IHdlIHNoYWxsIGF0IG9uY2UgcG9zc2VzcyBhbGwgSXRhbHksIHRoZSBncmVhdCBzaXplIGFuZCByaWNobmVzcyBhbmQgaW1wb3J0YW5jZSBvZiB3aGljaCBubyBtYW4gc2hvdWxkIGtub3cgYmV0dGVyIHRoYW4gdGh5c2VsZi48L3E+IEFmdGVyIGEgbGl0dGxlIHBhdXNlLCB0aGVuLCBDaW5lYXMgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgYWZ0ZXIgdGFraW5nIEl0YWx5LCAwIEtpbmcsIHdoYXQgYXJlIHdlIHRvIGRvPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgUHlycmh1cywgbm90IHlldCBwZXJjZWl2aW5nIGhpcyBpbnRlbnRpb24sIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U2ljaWx5IGlzIG5lYXIsIGFuZCBob2xkcyBvdXQgaGVyIGhhbmRzIHRvIHVzLCBhbiBpc2xhbmQgYWJvdW5kaW5nIGluIHdlYWx0aCBhbmQgbWVuLCBhbmQgdmVyeSBlYXN5IHRvIGNhcHR1cmUsIGZvciBhbGwgaXMgZmFjdGlvbiB0aGVyZSwgaGVyIGNpdGllcyBoYXZlIG5vIGdvdmVybm1lbnQsIGFuZCBkZW1hZ29ndWVzIGFyZSByYW1wYW50IG5vdyB0aGF0IEFnYXRob2NsZXMgaXMgZ29uZS48L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IHRob3Ugc2F5ZXN0LDwvcT4gcmVwbGllZCBDaW5lYXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aXMgcHJvYmFibHkgdHJ1ZTsgYnV0IHdpbGwgb3VyIGV4cGVkaXRpb24gc3RvcCB3aXRoIHRoZSB0YWtpbmcgb2YgU2ljaWx5ID88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlYXZlbiBncmFudCB1cyw8L3E+IHNhaWQgUHlycmh1cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj52aWN0b3J5IGFuZCBzdWNjZXNzIHNvIGZhcjsgYW5kIHdlIHdpbGwgbWFrZSB0aGVzZSBjb250ZXN0cyBidXQgdGhlIHByZWxpbWluYXJpZXMgb2YgZ3JlYXQgZW50ZXJwcmlzZXMuIEZvciB3aG8gY291bGQga2VlcCBoaXMgaGFuZHMgb2ZmIExpYnlhLCBvciBDYXJ0aGFnZSwgd2hlbiB0aGF0IGNpdHkgZ290IHdpdGhpbiBoaXMgcmVhY2gsIGEgY2l0eSB3aGljaCBBZ2F0aG9jbGVzLCBzbGlwcGluZyBzdGVhbHRoaWx5IG91dCBvZiBTeXJhY3VzZSBhbmQgY3Jvc3NpbmcgdGhlIHNlYSB3aXRoIGEgZmV3IHNoaXBzLCBuYXJyb3dseSBtaXNzZWQgdGFraW5nPyBBbmQgd2hlbiB3ZSBoYXZlIGJlY29tZSBtYXN0ZXJzIGhlcmUsIG5vIG9uZSBvZiB0aGUgZW5lbWllcyB3aG8gbm93IHRyZWF0IHVzIHdpdGggc2Nvcm4gd2lsbCBvZmZlciBmdXJ0aGVyIHJlc2lzdGFuY2U7IHRoZXJlIGlzIG5vIG5lZWQgb2Ygc2F5aW5nIHRoYXQuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob25lIHdoYXRldmVyLDwvcT4gc2FpZCBDaW5lYXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Zm9yIGl0IGlzIHBsYWluIHRoYXQgd2l0aCBzbyBncmVhdCBhIHBvd2VyIHdlIHNoYWxsIGJlIGFibGUgdG8gcmVjb3ZlciBNYWNlZG9uaWEgYW5kIHJ1bGUgR3JlZWNlIHNlY3VyZWx5LiBCdXQgd2hlbiB3ZSBoYXZlIGdvdCBldmVyeXRoaW5nIHN1YmplY3QgdG8gdXMsIHdoYXQgYXJlIHdlIGdvaW5nIHRvIGRvPzwvcT4gVGhlbiBQeXJyaHVzIHNtaWxlZCB1cG9uIGhpbSBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSBzaGFsbCBiZSBtdWNoIGF0IGVhc2UsIGFuZCB3ZSdsbCBkcmluayBidW1wZXJzLCBteSBnb29kIG1hbiwgZXZlcnkgZGF5LCBhbmQgd2UnbGwgZ2xhZGRlbiBvbmUgYW5vdGhlcidzIGhlYXJ0cyB3aXRoIGNvbmZpZGVudGlhbCB0YWxrcy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0aGF0IENpbmVhcyBoYWQgYnJvdWdodCBQeXJyaHVzIHRvIHRoaXMgcG9pbnQgaW4gdGhlIGFyZ3VtZW50LCBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZW4gd2hhdCBzdGFuZHMgaW4gb3VyIHdheSBub3cgaWYgd2Ugd2FudCB0byBkcmluayBidW1wZXJzIGFuZCB3aGlsZSBhd2F5IHRoZSB0aW1lIHdpdGggb25lIGFub3RoZXI/IFN1cmVseSB0aGlzIHByaXZpbGVnZSBpcyBvdXJzIGFscmVhZHksIGFuZCB3ZSBoYXZlIGF0IGhhbmQsIHdpdGhvdXQgdGFraW5nIGFueSB0cm91YmxlLCB0aG9zZSB0aGluZ3MgdG8gd2hpY2ggd2UgaG9wZSB0byBhdHRhaW4gYnkgYmxvb2RzaGVkIGFuZCBncmVhdCB0b2lscyBhbmQgcGVyaWxzLCBhZnRlciBkb2luZyBtdWNoIGhhcm0gdG8gb3RoZXJzIGFuZCBzdWZmZXJpbmcgbXVjaCBvdXJzZWx2ZXMuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGVyZSB3YXMgYSBjZXJ0YWluIENpbmVhcywgYSBtYW4gb2YgVGhlc3NhbHksIHdpdGggYSByZXB1dGF0aW9uIGZvciBncmVhdCB3aXNkb20sIHdobyBoYWQgYmVlbiBhIHB1cGlsIG9mIERlbW9zdGhlbmVzIHRoZSBvcmF0b3IsIGFuZCB3YXMgcXVpdGUgdGhlIG9ubHkgcHVibGljIHNwZWFrZXIgb2YgaGlzIGRheSB3aG8gd2FzIHRob3VnaHQgdG8gcmVtaW5kIGhpcyBoZWFyZXJzLCBhcyBhIHN0YXR1ZSBtaWdodCwgb2YgdGhhdCBncmVhdCBvcmF0b3IncyBwb3dlciBhbmQgYWJpbGl0eS4gQXNzb2NpYXRpbmcgaGltc2VsZiB3aXRoIFB5cnJodXMsIGFuZCBzZW50IGJ5IGhpbSBhcyBhbWJhc3NhZG9yIHRvIHRoZSBjaXRpZXMsIGhlIGNvbmZpcm1lZCB0aGUgc2F5aW5nIG9mIEV1cmlwaWRlcywgdG8gd2l0LCAKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPmFsbCBjYW4gYmUgd29uIGJ5IGVsb3F1ZW5jZTwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGF0IGV2ZW4gdGhlIHN3b3JkIG9mIHdhcnJpbmcgZW5lbWllcyBtaWdodCBnYWluLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5hbGwgY2FuIGJlIHdvbiBieSBlbG9xdWVuY2U8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhhdCBldmVuIHRoZSBzd29yZCBvZiB3YXJyaW5nIGVuZW1pZXMgbWlnaHQgZ2Fpbi48L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQXQgYW55IHJhdGUsIFB5cnJodXMgdXNlZCB0byBzYXkgdGhhdCBtb3JlIGNpdGllcyBoYWQgYmVlbiB3b24gZm9yIGhpbSBieSB0aGUgZWxvcXVlbmNlIG9mIENpbmVhcyB0aGFuIGJ5IGhpcyBvd24gYXJtczsgYW5kIGhlIGNvbnRpbnVlZCB0byBob2xkIENpbmVhcyBpbiBlc3BlY2lhbCBob25vdXIgYW5kIHRvIGRlbWFuZCBoaXMgc2VydmljZXMuIEl0IHdhcyB0aGlzIENpbmVhcywgdGhlbiwgd2hvLCBzZWVpbmcgdGhhdCBQeXJyaHVzIHdhcyBlYWdlcmx5IHByZXBhcmluZyBhbiBleHBlZGl0aW9uIGF0IHRoaXMgdGltZSB0byBJdGFseSwgYW5kIGZpbmRpbmcgaGltIGF0IGxlaXN1cmUgZm9yIHRoZSBtb21lbnQsIGRyZXcgaGltIGludG8gdGhlIGZvbGxvd2luZyBkaXNjb3Vyc2UuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgUm9tYW5zLCAwIFB5cnJodXMsIGFyZSBzYWlkIHRvIGJlIGdvb2QgZmlnaHRlcnMsIGFuZCB0byBiZSBydWxlcnMgb2YgbWFueSB3YXJsaWtlIG5hdGlvbnM7IGlmLCB0aGVuLCBIZWF2ZW4gc2hvdWxkIHBlcm1pdCB1cyB0byBjb25xdWVyIHRoZXNlIG1lbiwgaG93IHNob3VsZCB3ZSB1c2Ugb3VyIHZpY3RvcnkgPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQeXJyaHVzIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaHkgcXVlc3Rpb24sIDAgQ2luZWFzLCByZWFsbHkgbmVlZHMgbm8gYW5zd2VyOyB0aGUgUm9tYW5zIG9uY2UgY29ucXVlcmVkLCB0aGVyZSBpcyBuZWl0aGVyIGJhcmJhcmlhbiBub3IgR3JlZWsgY2l0eSB0aGVyZSB3aGljaCBpcyBhIG1hdGNoIGZvciB1cywgYnV0IHdlIHNoYWxsIGF0IG9uY2UgcG9zc2VzcyBhbGwgSXRhbHksIHRoZSBncmVhdCBzaXplIGFuZCByaWNobmVzcyBhbmQgaW1wb3J0YW5jZSBvZiB3aGljaCBubyBtYW4gc2hvdWxkIGtub3cgYmV0dGVyIHRoYW4gdGh5c2VsZi48L3E+IEFmdGVyIGEgbGl0dGxlIHBhdXNlLCB0aGVuLCBDaW5lYXMgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBhZnRlciB0YWtpbmcgSXRhbHksIDAgS2luZywgd2hhdCBhcmUgd2UgdG8gZG8/PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQeXJyaHVzLCBub3QgeWV0IHBlcmNlaXZpbmcgaGlzIGludGVudGlvbiwgcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNpY2lseSBpcyBuZWFyLCBhbmQgaG9sZHMgb3V0IGhlciBoYW5kcyB0byB1cywgYW4gaXNsYW5kIGFib3VuZGluZyBpbiB3ZWFsdGggYW5kIG1lbiwgYW5kIHZlcnkgZWFzeSB0byBjYXB0dXJlLCBmb3IgYWxsIGlzIGZhY3Rpb24gdGhlcmUsIGhlciBjaXRpZXMgaGF2ZSBubyBnb3Zlcm5tZW50LCBhbmQgZGVtYWdvZ3VlcyBhcmUgcmFtcGFudCBub3cgdGhhdCBBZ2F0aG9jbGVzIGlzIGdvbmUuPC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IHRob3Ugc2F5ZXN0LDwvcT4gcmVwbGllZCBDaW5lYXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pcyBwcm9iYWJseSB0cnVlOyBidXQgd2lsbCBvdXIgZXhwZWRpdGlvbiBzdG9wIHdpdGggdGhlIHRha2luZyBvZiBTaWNpbHkgPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlYXZlbiBncmFudCB1cyw8L3E+IHNhaWQgUHlycmh1cywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnZpY3RvcnkgYW5kIHN1Y2Nlc3Mgc28gZmFyOyBhbmQgd2Ugd2lsbCBtYWtlIHRoZXNlIGNvbnRlc3RzIGJ1dCB0aGUgcHJlbGltaW5hcmllcyBvZiBncmVhdCBlbnRlcnByaXNlcy4gRm9yIHdobyBjb3VsZCBrZWVwIGhpcyBoYW5kcyBvZmYgTGlieWEsIG9yIENhcnRoYWdlLCB3aGVuIHRoYXQgY2l0eSBnb3Qgd2l0aGluIGhpcyByZWFjaCwgYSBjaXR5IHdoaWNoIEFnYXRob2NsZXMsIHNsaXBwaW5nIHN0ZWFsdGhpbHkgb3V0IG9mIFN5cmFjdXNlIGFuZCBjcm9zc2luZyB0aGUgc2VhIHdpdGggYSBmZXcgc2hpcHMsIG5hcnJvd2x5IG1pc3NlZCB0YWtpbmc/IEFuZCB3aGVuIHdlIGhhdmUgYmVjb21lIG1hc3RlcnMgaGVyZSwgbm8gb25lIG9mIHRoZSBlbmVtaWVzIHdobyBub3cgdHJlYXQgdXMgd2l0aCBzY29ybiB3aWxsIG9mZmVyIGZ1cnRoZXIgcmVzaXN0YW5jZTsgdGhlcmUgaXMgbm8gbmVlZCBvZiBzYXlpbmcgdGhhdC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5vbmUgd2hhdGV2ZXIsPC9xPiBzYWlkIENpbmVhcywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZvciBpdCBpcyBwbGFpbiB0aGF0IHdpdGggc28gZ3JlYXQgYSBwb3dlciB3ZSBzaGFsbCBiZSBhYmxlIHRvIHJlY292ZXIgTWFjZWRvbmlhIGFuZCBydWxlIEdyZWVjZSBzZWN1cmVseS4gQnV0IHdoZW4gd2UgaGF2ZSBnb3QgZXZlcnl0aGluZyBzdWJqZWN0IHRvIHVzLCB3aGF0IGFyZSB3ZSBnb2luZyB0byBkbz88L3E+IFRoZW4gUHlycmh1cyBzbWlsZWQgdXBvbiBoaW0gYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSBzaGFsbCBiZSBtdWNoIGF0IGVhc2UsIGFuZCB3ZSdsbCBkcmluayBidW1wZXJzLCBteSBnb29kIG1hbiwgZXZlcnkgZGF5LCBhbmQgd2UnbGwgZ2xhZGRlbiBvbmUgYW5vdGhlcidzIGhlYXJ0cyB3aXRoIGNvbmZpZGVudGlhbCB0YWxrcy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgdGhhdCBDaW5lYXMgaGFkIGJyb3VnaHQgUHlycmh1cyB0byB0aGlzIHBvaW50IGluIHRoZSBhcmd1bWVudCwgaGUgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZW4gd2hhdCBzdGFuZHMgaW4gb3VyIHdheSBub3cgaWYgd2Ugd2FudCB0byBkcmluayBidW1wZXJzIGFuZCB3aGlsZSBhd2F5IHRoZSB0aW1lIHdpdGggb25lIGFub3RoZXI/IFN1cmVseSB0aGlzIHByaXZpbGVnZSBpcyBvdXJzIGFscmVhZHksIGFuZCB3ZSBoYXZlIGF0IGhhbmQsIHdpdGhvdXQgdGFraW5nIGFueSB0cm91YmxlLCB0aG9zZSB0aGluZ3MgdG8gd2hpY2ggd2UgaG9wZSB0byBhdHRhaW4gYnkgYmxvb2RzaGVkIGFuZCBncmVhdCB0b2lscyBhbmQgcGVyaWxzLCBhZnRlciBkb2luZyBtdWNoIGhhcm0gdG8gb3RoZXJzIGFuZCBzdWZmZXJpbmcgbXVjaCBvdXJzZWx2ZXMuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5CeSB0aGlzIHJlYXNvbmluZyBvZiBDaW5lYXMgUHlycmh1cyB3YXMgbW9yZSB0cm91YmxlZCB0aGFuIGhlIHdhcyBjb252ZXJ0ZWQ7IGhlIHNhdyBwbGFpbmx5IHdoYXQgZ3JlYXQgaGFwcGluZXNzIGhlIHdhcyBsZWF2aW5nIGJlaGluZCBoaW0sIGJ1dCB3YXMgdW5hYmxlIHRvIHJlbm91bmNlIGhpcyBob3BlcyBvZiB3aGF0IGhlIGVhZ2VybHkgZGVzaXJlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkJ5IHRoaXMgcmVhc29uaW5nIG9mIENpbmVhcyBQeXJyaHVzIHdhcyBtb3JlIHRyb3VibGVkIHRoYW4gaGUgd2FzIGNvbnZlcnRlZDsgaGUgc2F3IHBsYWlubHkgd2hhdCBncmVhdCBoYXBwaW5lc3MgaGUgd2FzIGxlYXZpbmcgYmVoaW5kIGhpbSwgYnV0IHdhcyB1bmFibGUgdG8gcmVub3VuY2UgaGlzIGhvcGVzIG9mIHdoYXQgaGUgZWFnZXJseSBkZXNpcmVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GaXJzdCwgdGhlbiwgaGUgc2VudCBDaW5lYXMgdG8gVGFyZW50dW0gd2l0aCB0aHJlZSB0aG91c2FuZCBzb2xkaWVyczsgbmV4dCwgYWZ0ZXIgbnVtZXJvdXMgY2F2YWxyeS10cmFuc3BvcnRzLCBkZWNrZWQgdmVzc2VscywgYW5kIHBhc3NhZ2UtYm9hdHMgb2YgZXZlcnkgc29ydCBoYWQgYmVlbiBicm91Z2h0IG92ZXIgZnJvbSBUYXJlbnR1bSwgaGUgcHV0IG9uIGJvYXJkIG9mIHRoZW0gdHdlbnR5IGVsZXBoYW50cyBhbmQgdGhyZWUgdGhvdXNhbmQgaG9yc2UsIHR3ZW50eSB0aG91c2FuZCBmb290LCB0d28gdGhvdXNhbmQgYXJjaGVycywgYW5kIGZpdmUgaHVuZHJlZCBzbGluZ2Vycy4gV2hlbiBhbGwgd2FzIHJlYWR5LCBoZSBwdXQgb3V0IGFuZCBzZXQgc2FpbDsgYnV0IHdoZW4gaGUgd2FzIGhhbGYgd2F5IGFjcm9zcyB0aGUgSW9uaWFuIHNlYSBoZSB3YXMgc3dlcHQgYXdheSBieSBhIG5vcnRoIHdpbmQgdGhhdCBidXJzdCBmb3J0aCBvdXQgb2YgYWxsIHNlYXNvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gc3BpdGUgb2YgaXRzIHZpb2xlbmNlIGhlIGhpbXNlbGYsIHRocm91Z2ggdGhlIGJyYXZlcnkgYW5kIGFyZG91ciBvZiBoaXMgc2VhbWVuIGFuZCBjYXB0YWlucywgaGVsZCBvdXQgYW5kIG1hZGUgdGhlIGxhbmQsIHRob3VnaCB3aXRoIGdyZWF0IHRvaWwgYW5kIGRhbmdlcjsgYnV0IHRoZSByZXN0IG9mIHRoZSBmbGVldCB3YXMgdGhyb3duIGludG8gY29uZnVzaW9uIGFuZCB0aGUgc2hpcHMgd2VyZSBzY2F0dGVyZWQuIFNvbWUgb2YgdGhlbSBtaXNzZWQgSXRhbHkgYW5kIHdlcmUgZHJpdmVuIG9mZiBpbnRvIHRoZSBMaWJ5YW4gYW5kIFNpY2lsaWFuIHNlYTsgb3RoZXJzLCB1bmFibGUgdG8gcm91bmQgdGhlIElhcHlnaWFuIHByb21vbnRvcnksIHdlcmUgb3ZlcnRha2VuIGJ5IG5pZ2h0LCBhbmQgYSBoZWF2eSBhbmQgdmlvbGVudCBzZWEsIHdoaWNoIGRyb3ZlIHRoZW0gdXBvbiBoYXJib3VybGVzcyBhbmQgdW5jZXJ0YWluIHNob3JlcywgYW5kIGRlc3Ryb3llZCB0aGVtIGFsbCBleGNlcHQgdGhlIHJveWFsIGdhbGxleS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U2hlLCBhcyBsb25nIGFzIHRoZSB3YXZlcyBkcm92ZSB1cG9uIGhlciBzaWRlLCBoZWxkIGhlciBvd24sIGFuZCB3YXMgc2F2ZWQgYnkgaGVyIGdyZWF0IHNpemUgYW5kIHN0cmVuZ3RoIGZyb20gdGhlIGJsb3dzIG9mIHRoZSB3YXRlcjsgYnV0IHNvb24gdGhlIHdpbmQgdmVlcmVkIHJvdW5kIGFuZCBtZXQgaGVyIGZyb20gdGhlIHNob3JlLCBhbmQgdGhlIHNoaXAgd2FzIGluIGRhbmdlciBvZiBiZWluZyBjcnVzaGVkIGJ5IHRoZSBoZWF2eSBzdXJnZXMgaWYgc2hlIHN0b29kIHByb3cgb24gYWdhaW5zdCB0aGVtLiBIb3dldmVyLCB0byBhbGxvdyBoZXIgYWdhaW4gdG8gYmUgdG9zc2VkIGFib3V0IGJ5IGFuIGFuZ3J5IG9wZW4gc2VhIGFuZCBieSBibGFzdHMgb2Ygd2luZCB0aGF0IGNhbWUgZnJvbSBhbGwgZGlyZWN0aW9ucywgd2FzIHRob3VnaHQgdG8gYmUgbW9yZSBmZWFyZnVsIHRoYW4gdGhlaXIgcHJlc2VudCBzdHJhaXRzLiBQeXJyaHVzIHRoZXJlZm9yZSBzcHJhbmcgdXAgYW5kIHRocmV3IGhpbXNlbGYgaW50byB0aGUgc2VhLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaGlzIGZyaWVuZHMgYW5kIGJvZHlndWFyZHMgd2VyZSBhdCBvbmNlIGVtdWxvdXNseSBlYWdlciB0byBoZWxwIGhpbS4gQnV0IG5pZ2h0IGFuZCB0aGUgYmlsbG93cyB3aXRoIHRoZWlyIGhlYXZ5IGNyYXNoaW5nIGFuZCB2aW9sZW50IHJlY29pbCBtYWRlIGFzc2lzdGFuY2UgZGlmZmljdWx0LCBzbyB0aGF0IGl0IHdhcyBub3QgdW50aWwgZGF5IGhhZCBhbHJlYWR5IGNvbWUgYW5kIHRoZSB3aW5kIHdhcyBkeWluZyBhd2F5IHRoYXQgaGUgc3VjY2VlZGVkIGluIGdhaW5pbmcgdGhlIHNob3JlLCBpbiBib2R5IGFsdG9nZXRoZXIgcG93ZXJsZXNzLCBidXQgd2l0aCBib2xkbmVzcyBhbmQgc3RyZW5ndGggb2Ygc3Bpcml0IHN0aWxsIG1ha2luZyBoZWFkIGFnYWluc3QgaGlzIGRpc3RyZXNzLiBUaGUgTWVzc2FwaWFucywgYW1vbmcgd2hvbSBoZSBoYWQgYmVlbiBjYXN0IGZvcnRoLCByYW4gdG9nZXRoZXIgd2l0aCBlYWdlciBvZmZlcnMgdG8gYXNzaXN0IGFzIHdlbGwgYXMgdGhleSBjb3VsZCwgYW5kIGF0IHRoZSBzYW1lIHRpbWUgc29tZSBvZiBoaXMgc2hpcHMgdGhhdCBoYWQgZXNjYXBlZCB0aGUgc3Rvcm0gY2FtZSB1cDsgaW4gdGhlc2UgdGhlcmUgd2VyZSBidXQgYSBmZXcgaG9yc2VtZW4gYWxsIHRvbGQsIGxlc3MgdGhhbiB0d28gdGhvdXNhbmQgZm9vdG1lbiwgYW5kIHR3byBlbGVwaGFudHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rmlyc3QsIHRoZW4sIGhlIHNlbnQgQ2luZWFzIHRvIFRhcmVudHVtIHdpdGggdGhyZWUgdGhvdXNhbmQgc29sZGllcnM7IG5leHQsIGFmdGVyIG51bWVyb3VzIGNhdmFscnktdHJhbnNwb3J0cywgZGVja2VkIHZlc3NlbHMsIGFuZCBwYXNzYWdlLWJvYXRzIG9mIGV2ZXJ5IHNvcnQgaGFkIGJlZW4gYnJvdWdodCBvdmVyIGZyb20gVGFyZW50dW0sIGhlIHB1dCBvbiBib2FyZCBvZiB0aGVtIHR3ZW50eSBlbGVwaGFudHMgYW5kIHRocmVlIHRob3VzYW5kIGhvcnNlLCB0d2VudHkgdGhvdXNhbmQgZm9vdCwgdHdvIHRob3VzYW5kIGFyY2hlcnMsIGFuZCBmaXZlIGh1bmRyZWQgc2xpbmdlcnMuIFdoZW4gYWxsIHdhcyByZWFkeSwgaGUgcHV0IG91dCBhbmQgc2V0IHNhaWw7IGJ1dCB3aGVuIGhlIHdhcyBoYWxmIHdheSBhY3Jvc3MgdGhlIElvbmlhbiBzZWEgaGUgd2FzIHN3ZXB0IGF3YXkgYnkgYSBub3J0aCB3aW5kIHRoYXQgYnVyc3QgZm9ydGggb3V0IG9mIGFsbCBzZWFzb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHNwaXRlIG9mIGl0cyB2aW9sZW5jZSBoZSBoaW1zZWxmLCB0aHJvdWdoIHRoZSBicmF2ZXJ5IGFuZCBhcmRvdXIgb2YgaGlzIHNlYW1lbiBhbmQgY2FwdGFpbnMsIGhlbGQgb3V0IGFuZCBtYWRlIHRoZSBsYW5kLCB0aG91Z2ggd2l0aCBncmVhdCB0b2lsIGFuZCBkYW5nZXI7IGJ1dCB0aGUgcmVzdCBvZiB0aGUgZmxlZXQgd2FzIHRocm93biBpbnRvIGNvbmZ1c2lvbiBhbmQgdGhlIHNoaXBzIHdlcmUgc2NhdHRlcmVkLiBTb21lIG9mIHRoZW0gbWlzc2VkIEl0YWx5IGFuZCB3ZXJlIGRyaXZlbiBvZmYgaW50byB0aGUgTGlieWFuIGFuZCBTaWNpbGlhbiBzZWE7IG90aGVycywgdW5hYmxlIHRvIHJvdW5kIHRoZSBJYXB5Z2lhbiBwcm9tb250b3J5LCB3ZXJlIG92ZXJ0YWtlbiBieSBuaWdodCwgYW5kIGEgaGVhdnkgYW5kIHZpb2xlbnQgc2VhLCB3aGljaCBkcm92ZSB0aGVtIHVwb24gaGFyYm91cmxlc3MgYW5kIHVuY2VydGFpbiBzaG9yZXMsIGFuZCBkZXN0cm95ZWQgdGhlbSBhbGwgZXhjZXB0IHRoZSByb3lhbCBnYWxsZXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNoZSwgYXMgbG9uZyBhcyB0aGUgd2F2ZXMgZHJvdmUgdXBvbiBoZXIgc2lkZSwgaGVsZCBoZXIgb3duLCBhbmQgd2FzIHNhdmVkIGJ5IGhlciBncmVhdCBzaXplIGFuZCBzdHJlbmd0aCBmcm9tIHRoZSBibG93cyBvZiB0aGUgd2F0ZXI7IGJ1dCBzb29uIHRoZSB3aW5kIHZlZXJlZCByb3VuZCBhbmQgbWV0IGhlciBmcm9tIHRoZSBzaG9yZSwgYW5kIHRoZSBzaGlwIHdhcyBpbiBkYW5nZXIgb2YgYmVpbmcgY3J1c2hlZCBieSB0aGUgaGVhdnkgc3VyZ2VzIGlmIHNoZSBzdG9vZCBwcm93IG9uIGFnYWluc3QgdGhlbS4gSG93ZXZlciwgdG8gYWxsb3cgaGVyIGFnYWluIHRvIGJlIHRvc3NlZCBhYm91dCBieSBhbiBhbmdyeSBvcGVuIHNlYSBhbmQgYnkgYmxhc3RzIG9mIHdpbmQgdGhhdCBjYW1lIGZyb20gYWxsIGRpcmVjdGlvbnMsIHdhcyB0aG91Z2h0IHRvIGJlIG1vcmUgZmVhcmZ1bCB0aGFuIHRoZWlyIHByZXNlbnQgc3RyYWl0cy4gUHlycmh1cyB0aGVyZWZvcmUgc3ByYW5nIHVwIGFuZCB0aHJldyBoaW1zZWxmIGludG8gdGhlIHNlYSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoaXMgZnJpZW5kcyBhbmQgYm9keWd1YXJkcyB3ZXJlIGF0IG9uY2UgZW11bG91c2x5IGVhZ2VyIHRvIGhlbHAgaGltLiBCdXQgbmlnaHQgYW5kIHRoZSBiaWxsb3dzIHdpdGggdGhlaXIgaGVhdnkgY3Jhc2hpbmcgYW5kIHZpb2xlbnQgcmVjb2lsIG1hZGUgYXNzaXN0YW5jZSBkaWZmaWN1bHQsIHNvIHRoYXQgaXQgd2FzIG5vdCB1bnRpbCBkYXkgaGFkIGFscmVhZHkgY29tZSBhbmQgdGhlIHdpbmQgd2FzIGR5aW5nIGF3YXkgdGhhdCBoZSBzdWNjZWVkZWQgaW4gZ2FpbmluZyB0aGUgc2hvcmUsIGluIGJvZHkgYWx0b2dldGhlciBwb3dlcmxlc3MsIGJ1dCB3aXRoIGJvbGRuZXNzIGFuZCBzdHJlbmd0aCBvZiBzcGlyaXQgc3RpbGwgbWFraW5nIGhlYWQgYWdhaW5zdCBoaXMgZGlzdHJlc3MuIFRoZSBNZXNzYXBpYW5zLCBhbW9uZyB3aG9tIGhlIGhhZCBiZWVuIGNhc3QgZm9ydGgsIHJhbiB0b2dldGhlciB3aXRoIGVhZ2VyIG9mZmVycyB0byBhc3Npc3QgYXMgd2VsbCBhcyB0aGV5IGNvdWxkLCBhbmQgYXQgdGhlIHNhbWUgdGltZSBzb21lIG9mIGhpcyBzaGlwcyB0aGF0IGhhZCBlc2NhcGVkIHRoZSBzdG9ybSBjYW1lIHVwOyBpbiB0aGVzZSB0aGVyZSB3ZXJlIGJ1dCBhIGZldyBob3JzZW1lbiBhbGwgdG9sZCwgbGVzcyB0aGFuIHR3byB0aG91c2FuZCBmb290bWVuLCBhbmQgdHdvIGVsZXBoYW50cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCB0aGVzZSBQeXJyaHVzIHNldCBvdXQgZm9yIFRhcmVudHVtLCB3aGVyZSBDaW5lYXMsIG9uIGxlYXJuaW5nIG9mIGhpcyBhcHByb2FjaCwgbGVkIG91dCBoaXMgc29sZGllcnMgdG8gbWVldCBoaW0uIEVudGVyaW5nIHRoZSBjaXR5LCBoZSBkaWQgbm90aGluZyB0aGF0IHdhcyBhZ2FpbnN0IHRoZSB3aXNoZXMgb2YgdGhlIFRhcmVudGluZXMsIG5vciBkaWQgaGUgcHV0IGFueSBjb21wdWxzaW9uIHVwb24gdGhlbSwgdW50aWwgaGlzIHNoaXBzIGNhbWUgYmFjayBpbiBzYWZldHkgZnJvbSB0aGUgc2VhIGFuZCB0aGUgZ3JlYXRlciBwYXJ0IG9mIGhpcyBmb3JjZXMgd2VyZSBhc3NlbWJsZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGhvd2V2ZXIsIHNlZWluZyB0aGF0IHRoZSBtdWx0aXR1ZGUgd2VyZSBpbmNhcGFibGUsIHVubGVzcyB1bmRlciBzdHJvbmcgY29uc3RyYWludCwgb2YgZWl0aGVyIHNhdmluZyB0aGVtc2VsdmVzIG9yIHNhdmluZyBvdGhlcnMsIGJ1dCB3ZXJlIGluY2xpbmVkIHRvIGxldCBoaW0gZG8gdGhlaXIgZmlnaHRpbmcgZm9yIHRoZW0gd2hpbGUgdGhleSByZW1haW5lZCBhdCBob21lIGluIHRoZSBlbmpveW1lbnQgb2YgdGhlaXIgYmF0aHMgYW5kIHNvY2lhbCBmZXN0aXZpdGllcywgaGUgY2xvc2VkIHVwIHRoZSBneW1uYXNpYSBhbmQgdGhlIHB1YmxpYyB3YWxrcywgd2hlcmUsIGFzIHRoZXkgc3Ryb2xsZWQgYWJvdXQsIHRoZXkgZm91Z2h0IG91dCB0aGVpciBjb3VudHJ5J3MgYmF0dGxlcyBpbiB0YWxrOyBoZSBhbHNvIHB1dCBhIHN0b3AgdG8gZHJpbmtpbmctYm91dHMsIHJldmVscywgYW5kIGZlc3RpdmFscywgYXMgdW5zZWFzb25hYmxlLCBjYWxsZWQgdGhlIG1lbiB0byBhcm1zLCBhbmQgd2FzIHN0ZXJuIGFuZCBpbmV4b3JhYmxlIGluIGhpcyBlbnJvbG1lbnQgb2YgdGhlbSBmb3IgbWlsaXRhcnkgc2VydmljZS4gTWFueSB0aGVyZWZvcmUgbGVmdCB0aGUgY2l0eSwgc2luY2UgdGhleSB3ZXJlIG5vdCBhY2N1c3RvbWVkIHRvIGJlaW5nIHVuZGVyIG9yZGVycywgYW5kIGNhbGxlZCBpdCBzZXJ2aXR1ZGUgbm90IHRvIGxpdmUgYXMgdGhleSBwbGVhc2VkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCB0aGVzZSBQeXJyaHVzIHNldCBvdXQgZm9yIFRhcmVudHVtLCB3aGVyZSBDaW5lYXMsIG9uIGxlYXJuaW5nIG9mIGhpcyBhcHByb2FjaCwgbGVkIG91dCBoaXMgc29sZGllcnMgdG8gbWVldCBoaW0uIEVudGVyaW5nIHRoZSBjaXR5LCBoZSBkaWQgbm90aGluZyB0aGF0IHdhcyBhZ2FpbnN0IHRoZSB3aXNoZXMgb2YgdGhlIFRhcmVudGluZXMsIG5vciBkaWQgaGUgcHV0IGFueSBjb21wdWxzaW9uIHVwb24gdGhlbSwgdW50aWwgaGlzIHNoaXBzIGNhbWUgYmFjayBpbiBzYWZldHkgZnJvbSB0aGUgc2VhIGFuZCB0aGUgZ3JlYXRlciBwYXJ0IG9mIGhpcyBmb3JjZXMgd2VyZSBhc3NlbWJsZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGhvd2V2ZXIsIHNlZWluZyB0aGF0IHRoZSBtdWx0aXR1ZGUgd2VyZSBpbmNhcGFibGUsIHVubGVzcyB1bmRlciBzdHJvbmcgY29uc3RyYWludCwgb2YgZWl0aGVyIHNhdmluZyB0aGVtc2VsdmVzIG9yIHNhdmluZyBvdGhlcnMsIGJ1dCB3ZXJlIGluY2xpbmVkIHRvIGxldCBoaW0gZG8gdGhlaXIgZmlnaHRpbmcgZm9yIHRoZW0gd2hpbGUgdGhleSByZW1haW5lZCBhdCBob21lIGluIHRoZSBlbmpveW1lbnQgb2YgdGhlaXIgYmF0aHMgYW5kIHNvY2lhbCBmZXN0aXZpdGllcywgaGUgY2xvc2VkIHVwIHRoZSBneW1uYXNpYSBhbmQgdGhlIHB1YmxpYyB3YWxrcywgd2hlcmUsIGFzIHRoZXkgc3Ryb2xsZWQgYWJvdXQsIHRoZXkgZm91Z2h0IG91dCB0aGVpciBjb3VudHJ5J3MgYmF0dGxlcyBpbiB0YWxrOyBoZSBhbHNvIHB1dCBhIHN0b3AgdG8gZHJpbmtpbmctYm91dHMsIHJldmVscywgYW5kIGZlc3RpdmFscywgYXMgdW5zZWFzb25hYmxlLCBjYWxsZWQgdGhlIG1lbiB0byBhcm1zLCBhbmQgd2FzIHN0ZXJuIGFuZCBpbmV4b3JhYmxlIGluIGhpcyBlbnJvbG1lbnQgb2YgdGhlbSBmb3IgbWlsaXRhcnkgc2VydmljZS4gTWFueSB0aGVyZWZvcmUgbGVmdCB0aGUgY2l0eSwgc2luY2UgdGhleSB3ZXJlIG5vdCBhY2N1c3RvbWVkIHRvIGJlaW5nIHVuZGVyIG9yZGVycywgYW5kIGNhbGxlZCBpdCBzZXJ2aXR1ZGUgbm90IHRvIGxpdmUgYXMgdGhleSBwbGVhc2VkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IHdvcmQgd2FzIGJyb3VnaHQgdG8gUHlycmh1cyB0aGF0IExhZXZpbnVzIHRoZSBSb21hbiBjb25zdWwgd2FzIGNvbWluZyBhZ2FpbnN0IGhpbSB3aXRoIGEgbGFyZ2UgYXJteSBhbmQgcGx1bmRlcmluZyBMdWNhbmlhIGFzIGhlIGNhbWUuIFB5cnJodXMgaGFkIG5vdCB5ZXQgYmVlbiBqb2luZWQgYnkgaGlzIGFsbGllcywgYnV0IHRoaW5raW5nIGl0IGFuIGludG9sZXJhYmxlIHRoaW5nIHRvIGhvbGQgYmFjayBhbmQgc3VmZmVyIGhpcyBlbmVtaWVzIHRvIGFkdmFuY2UgYW55IG5lYXJlciwgaGUgdG9vayB0aGUgZmllbGQgd2l0aCBoaXMgZm9yY2VzLCBoYXZpbmcgZmlyc3Qgc2VudCBhIGhlcmFsZCB0byB0aGUgUm9tYW5zIHdpdGggdGhlIGVucXVpcnkgd2hldGhlciBpdCB3YXMgdGhlaXIgcGxlYXN1cmUsIGJlZm9yZSB3YWdpbmcgd2FyLCB0byByZWNlaXZlIHNhdGlzZmFjdGlvbiBmcm9tIHRoZSBJdGFsaWFuIEdyZWVrcywgZW1wbG95aW5nIGhpbSBhcyBhcmJpdGVyIGFuZCBtZWRpYXRvci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IExhZXZpbnVzIG1hZGUgYW5zd2VyIHRoYXQgdGhlIFJvbWFucyBuZWl0aGVyIGNob3NlIFB5cnJodXMgYXMgYSBtZWRpYXRvciBub3IgZmVhcmVkIGhpbSBhcyBhIGZvZS4gUHlycmh1cyB0aGVyZWZvcmUgd2VudCBmb3J3YXJkIGFuZCBwaXRjaGVkIGhpcyBjYW1wIGluIHRoZSBwbGFpbiBiZXR3ZWVuIHRoZSBjaXRpZXMgb2YgUGFuZG9zaWEgYW5kIEhlcmFjbGVpYS4gV2hlbiBoZSBsZWFybmVkIHRoYXQgdGhlIFJvbWFucyB3ZXJlIG5lYXIgYW5kIGxheSBlbmNhbXBlZCBvbiB0aGUgZnVydGhlciBzaWRlIG9mIHRoZSByaXZlciBTaW5zLCBoZSByb2RlIHVwIHRvIHRoZSByaXZlciB0byBnZXQgYSB2aWV3IG9mIHRoZW07IGFuZCB3aGVuIGhlIGhhZCBvYnNlcnZlZCB0aGVpciBkaXNjaXBsaW5lLCB0aGUgYXBwb2ludG1lbnQgb2YgdGhlaXIgd2F0Y2hlcywgdGhlaXIgb3JkZXIsIGFuZCB0aGUgZ2VuZXJhbCBhcnJhbmdlbWVudCBvZiB0aGVpciBjYW1wLCBoZSB3YXMgYW1hemVkLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgc2FpZCB0byB0aGUgZnJpZW5kIHdobyB3YXMgbmVhcmVzdCBoaW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIGRpc2NpcGxpbmUgb2YgdGhlc2UgQmFyYmFyaWFucyBpcyBub3QgYmFyYmFyb3VzOyBidXQgdGhlIHJlc3VsdCB3aWxsIHNob3cgdXMgd2hhdCBpdCBhbW91bnRzIHRvLjwvcT4gSGUgd2FzIG5vdyBsZXNzIGNvbmZpZGVudCBvZiB0aGUgaXNzdWUsIGFuZCBkZXRlcm1pbmVkIHRvIHdhaXQgZm9yIGhpcyBhbGxpZXM7IGJ1dCBoZSBzdGF0aW9uZWQgYSBndWFyZCBvbiB0aGUgYmFuayBvZiB0aGUgcml2ZXIgdG8gY2hlY2sgdGhlIFJvbWFucyBpZiwgaW4gdGhlIG1lYW50aW1lLCB0aGV5IHNob3VsZCBhdHRlbXB0IHRvIGNyb3NzIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgUm9tYW5zLCBob3dldmVyLCBhbnhpb3VzIHRvIGFudGljaXBhdGUgdGhlIGNvbWluZyBvZiB0aGUgZm9yY2VzIHdoaWNoIFB5cnJodXMgaGFkIGRlY2lkZWQgdG8gYXdhaXQsIGF0dGVtcHRlZCB0aGUgcGFzc2FnZSwgdGhlaXIgaW5mYW50cnkgY3Jvc3NpbmcgdGhlIHJpdmVyIGJ5IGEgZm9yZCwgYW5kIHRoZWlyIGNhdmFscnkgZGFzaGluZyB0aHJvdWdoIHRoZSB3YXRlciBhdCBtYW55IHBvaW50cywgc28gdGhhdCB0aGUgR3JlZWtzIG9uIGd1YXJkLCBmZWFyaW5nIHRoYXQgdGhleSB3b3VsZCBiZSBzdXJyb3VuZGVkLCB3aXRoZHJldy4gV2hlbiBQeXJyaHVzIHNhdyB0aGlzLCBoZSB3YXMgZ3JlYXRseSBkaXN0dXJiZWQsIGFuZCBjaGFyZ2luZyBoaXMgaW5mYW50cnkgb2ZmaWNlcnMgdG8gZm9ybSBpbiBsaW5lIG9mIGJhdHRsZSBhdCBvbmNlIGFuZCBzdGFuZCB1bmRlciBhcm1zLCBoZSBoaW1zZWxmIHJvZGUgb3V0IHdpdGggaGlzIHRocmVlIHRob3VzYW5kIGhvcnNlbWVuLCBob3BpbmcgdG8gY29tZSB1cG9uIHRoZSBSb21hbnMgd2hpbGUgdGhleSB3ZXJlIHN0aWxsIGNyb3NzaW5nLCBhbmQgdG8gZmluZCB0aGVtIHNjYXR0ZXJlZCBhbmQgaW4gZGlzb3JkZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHNhdyBhIG11bHRpdHVkZSBvZiBzaGllbGRzIGdsZWFtaW5nIG9uIHRoZSBiYW5rIG9mIHRoZSByaXZlciBhbmQgdGhlIGNhdmFscnkgYWR2YW5jaW5nIHVwb24gaGltIGluIGdvb2Qgb3JkZXIsIGhlIGZvcm1lZCBoaXMgbWVuIGluIGNsb3NlIGFycmF5IGFuZCBsZWQgdGhlbSB0byB0aGUgYXR0YWNrLiBIZSB3YXMgY29uc3BpY3VvdXMgYXQgb25jZSBmb3IgdGhlIGJlYXV0eSBhbmQgc3BsZW5kb3VyIG9mIGhpcyByaWNobHkgb3JuYW1lbnRlZCBhcm1vdXIsIGFuZCBzaG93ZWQgYnkgaGlzIGRlZWRzIHRoYXQgaGlzIHZhbG91ciBkaWQgbm90IGJlbGllIGhpcyBmYW1lOyBhbmQgdGhpcyBtb3N0IG9mIGFsbCBiZWNhdXNlLCB3aGlsZSBhY3RpdmVseSBwYXJ0aWNpcGF0aW5nIGluIHRoZSBmaWdodCBhbmQgdmlnb3JvdXNseSByZXBlbGxpbmcgaGlzIGFzc2FpbGFudHMsIGhlIGRpZCBub3QgYmVjb21lIGNvbmZ1c2VkIGluIGhpcyBjYWxjdWxhdGlvbnMgbm9yIGxvc2UgaGlzIHByZXNlbmNlIG9mIG1pbmQsIAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBkaXJlY3RlZCB0aGUgYmF0dGxlIGFzIGlmIGhlIHdlcmUgc3VydmV5aW5nIGl0IGZyb20gYSBkaXN0YW5jZSwgZGFydGluZyBoaXRoZXIgYW5kIHRoaXRoZXIgaGltc2VsZiBhbmQgYnJpbmdpbmcgYWlkIHRvIHRob3NlIHdob20gaGUgdGhvdWdodCB0byBiZSBvdmVyd2hlbG1lZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgd29yZCB3YXMgYnJvdWdodCB0byBQeXJyaHVzIHRoYXQgTGFldmludXMgdGhlIFJvbWFuIGNvbnN1bCB3YXMgY29taW5nIGFnYWluc3QgaGltIHdpdGggYSBsYXJnZSBhcm15IGFuZCBwbHVuZGVyaW5nIEx1Y2FuaWEgYXMgaGUgY2FtZS4gUHlycmh1cyBoYWQgbm90IHlldCBiZWVuIGpvaW5lZCBieSBoaXMgYWxsaWVzLCBidXQgdGhpbmtpbmcgaXQgYW4gaW50b2xlcmFibGUgdGhpbmcgdG8gaG9sZCBiYWNrIGFuZCBzdWZmZXIgaGlzIGVuZW1pZXMgdG8gYWR2YW5jZSBhbnkgbmVhcmVyLCBoZSB0b29rIHRoZSBmaWVsZCB3aXRoIGhpcyBmb3JjZXMsIGhhdmluZyBmaXJzdCBzZW50IGEgaGVyYWxkIHRvIHRoZSBSb21hbnMgd2l0aCB0aGUgZW5xdWlyeSB3aGV0aGVyIGl0IHdhcyB0aGVpciBwbGVhc3VyZSwgYmVmb3JlIHdhZ2luZyB3YXIsIHRvIHJlY2VpdmUgc2F0aXNmYWN0aW9uIGZyb20gdGhlIEl0YWxpYW4gR3JlZWtzLCBlbXBsb3lpbmcgaGltIGFzIGFyYml0ZXIgYW5kIG1lZGlhdG9yLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBMYWV2aW51cyBtYWRlIGFuc3dlciB0aGF0IHRoZSBSb21hbnMgbmVpdGhlciBjaG9zZSBQeXJyaHVzIGFzIGEgbWVkaWF0b3Igbm9yIGZlYXJlZCBoaW0gYXMgYSBmb2UuIFB5cnJodXMgdGhlcmVmb3JlIHdlbnQgZm9yd2FyZCBhbmQgcGl0Y2hlZCBoaXMgY2FtcCBpbiB0aGUgcGxhaW4gYmV0d2VlbiB0aGUgY2l0aWVzIG9mIFBhbmRvc2lhIGFuZCBIZXJhY2xlaWEuIFdoZW4gaGUgbGVhcm5lZCB0aGF0IHRoZSBSb21hbnMgd2VyZSBuZWFyIGFuZCBsYXkgZW5jYW1wZWQgb24gdGhlIGZ1cnRoZXIgc2lkZSBvZiB0aGUgcml2ZXIgU2lucywgaGUgcm9kZSB1cCB0byB0aGUgcml2ZXIgdG8gZ2V0IGEgdmlldyBvZiB0aGVtOyBhbmQgd2hlbiBoZSBoYWQgb2JzZXJ2ZWQgdGhlaXIgZGlzY2lwbGluZSwgdGhlIGFwcG9pbnRtZW50IG9mIHRoZWlyIHdhdGNoZXMsIHRoZWlyIG9yZGVyLCBhbmQgdGhlIGdlbmVyYWwgYXJyYW5nZW1lbnQgb2YgdGhlaXIgY2FtcCwgaGUgd2FzIGFtYXplZCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBzYWlkIHRvIHRoZSBmcmllbmQgd2hvIHdhcyBuZWFyZXN0IGhpbTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSBkaXNjaXBsaW5lIG9mIHRoZXNlIEJhcmJhcmlhbnMgaXMgbm90IGJhcmJhcm91czsgYnV0IHRoZSByZXN1bHQgd2lsbCBzaG93IHVzIHdoYXQgaXQgYW1vdW50cyB0by48L3E+IEhlIHdhcyBub3cgbGVzcyBjb25maWRlbnQgb2YgdGhlIGlzc3VlLCBhbmQgZGV0ZXJtaW5lZCB0byB3YWl0IGZvciBoaXMgYWxsaWVzOyBidXQgaGUgc3RhdGlvbmVkIGEgZ3VhcmQgb24gdGhlIGJhbmsgb2YgdGhlIHJpdmVyIHRvIGNoZWNrIHRoZSBSb21hbnMgaWYsIGluIHRoZSBtZWFudGltZSwgdGhleSBzaG91bGQgYXR0ZW1wdCB0byBjcm9zcyBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMsIGhvd2V2ZXIsIGFueGlvdXMgdG8gYW50aWNpcGF0ZSB0aGUgY29taW5nIG9mIHRoZSBmb3JjZXMgd2hpY2ggUHlycmh1cyBoYWQgZGVjaWRlZCB0byBhd2FpdCwgYXR0ZW1wdGVkIHRoZSBwYXNzYWdlLCB0aGVpciBpbmZhbnRyeSBjcm9zc2luZyB0aGUgcml2ZXIgYnkgYSBmb3JkLCBhbmQgdGhlaXIgY2F2YWxyeSBkYXNoaW5nIHRocm91Z2ggdGhlIHdhdGVyIGF0IG1hbnkgcG9pbnRzLCBzbyB0aGF0IHRoZSBHcmVla3Mgb24gZ3VhcmQsIGZlYXJpbmcgdGhhdCB0aGV5IHdvdWxkIGJlIHN1cnJvdW5kZWQsIHdpdGhkcmV3LiBXaGVuIFB5cnJodXMgc2F3IHRoaXMsIGhlIHdhcyBncmVhdGx5IGRpc3R1cmJlZCwgYW5kIGNoYXJnaW5nIGhpcyBpbmZhbnRyeSBvZmZpY2VycyB0byBmb3JtIGluIGxpbmUgb2YgYmF0dGxlIGF0IG9uY2UgYW5kIHN0YW5kIHVuZGVyIGFybXMsIGhlIGhpbXNlbGYgcm9kZSBvdXQgd2l0aCBoaXMgdGhyZWUgdGhvdXNhbmQgaG9yc2VtZW4sIGhvcGluZyB0byBjb21lIHVwb24gdGhlIFJvbWFucyB3aGlsZSB0aGV5IHdlcmUgc3RpbGwgY3Jvc3NpbmcsIGFuZCB0byBmaW5kIHRoZW0gc2NhdHRlcmVkIGFuZCBpbiBkaXNvcmRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHNhdyBhIG11bHRpdHVkZSBvZiBzaGllbGRzIGdsZWFtaW5nIG9uIHRoZSBiYW5rIG9mIHRoZSByaXZlciBhbmQgdGhlIGNhdmFscnkgYWR2YW5jaW5nIHVwb24gaGltIGluIGdvb2Qgb3JkZXIsIGhlIGZvcm1lZCBoaXMgbWVuIGluIGNsb3NlIGFycmF5IGFuZCBsZWQgdGhlbSB0byB0aGUgYXR0YWNrLiBIZSB3YXMgY29uc3BpY3VvdXMgYXQgb25jZSBmb3IgdGhlIGJlYXV0eSBhbmQgc3BsZW5kb3VyIG9mIGhpcyByaWNobHkgb3JuYW1lbnRlZCBhcm1vdXIsIGFuZCBzaG93ZWQgYnkgaGlzIGRlZWRzIHRoYXQgaGlzIHZhbG91ciBkaWQgbm90IGJlbGllIGhpcyBmYW1lOyBhbmQgdGhpcyBtb3N0IG9mIGFsbCBiZWNhdXNlLCB3aGlsZSBhY3RpdmVseSBwYXJ0aWNpcGF0aW5nIGluIHRoZSBmaWdodCBhbmQgdmlnb3JvdXNseSByZXBlbGxpbmcgaGlzIGFzc2FpbGFudHMsIGhlIGRpZCBub3QgYmVjb21lIGNvbmZ1c2VkIGluIGhpcyBjYWxjdWxhdGlvbnMgbm9yIGxvc2UgaGlzIHByZXNlbmNlIG9mIG1pbmQsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBkaXJlY3RlZCB0aGUgYmF0dGxlIGFzIGlmIGhlIHdlcmUgc3VydmV5aW5nIGl0IGZyb20gYSBkaXN0YW5jZSwgZGFydGluZyBoaXRoZXIgYW5kIHRoaXRoZXIgaGltc2VsZiBhbmQgYnJpbmdpbmcgYWlkIHRvIHRob3NlIHdob20gaGUgdGhvdWdodCB0byBiZSBvdmVyd2hlbG1lZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5IZXJlIExlb25uYXR1cyB0aGUgTWFjZWRvbmlhbiwgb2JzZXJ2aW5nIHRoYXQgYW4gSXRhbGlhbiB3YXMgaW50ZW50IHVwb24gUHlycmh1cywgYW5kIHdhcyByaWRpbmcgb3V0IGFnYWluc3QgaGltIGFuZCBmb2xsb3dpbmcgaGltIGluIGV2ZXJ5IG1vdmVtZW50IGZyb20gcGxhY2UgdG8gcGxhY2UsIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TZWVzdCB0aG91LCAwIEtpbmcsIHRoYXQgQmFyYmFyaWFuIHlvbmRlciwgcmlkaW5nIHRoZSBibGFjayBob3JzZSB3aXRoIHdoaXRlIGZlZXQ/IEhlIGxvb2tzIGxpa2UgYSBtYW4gd2hvIGhhcyBzb21lIGdyZWF0IGFuZCB0ZXJyaWJsZSBkZXNpZ24gaW4gbWluZC4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGtlZXBzIGhpcyBleWVzIGZpeGVkIHVwb24gdGhlZSwgYW5kIGlzIGludGVudCB0byByZWFjaCB0aGVlIHdpdGggYWxsIGhpcyBtaWdodCBhbmQgbWFpbiwgYW5kIHBheXMgbm8gaGVlZCB0byBhbnlib2R5IGVsc2UuIFNvIGJlIG9uIHRoeSBndWFyZCBhZ2FpbnN0IHRoZSBtYW4uPC9xPiBUbyBoaW0gUHlycmh1cyBtYWRlIHJlcGx5OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgaXMgZmF0ZWQgMCBMZW9ubmF0dXMsIGl0IGlzIGltcG9zc2libGUgdG8gZXNjYXBlOyBidXQgd2l0aCBpbXB1bml0eSBuZWl0aGVyIGhlIG5vciBhbnkgb3RoZXIgSXRhbGlhbiBzaGFsbCBjb21lIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggbWUuPC9xPiBXaGlsZSB0aGV5IHdlcmUgc3RpbGwgY29udmVyc2luZyB0aHVzLCB0aGUgSXRhbGlhbiBsZXZlbGxlZCBoaXMgc3BlYXIsIHdoZWVsZWQgaGlzIGhvcnNlLCBhbmQgY2hhcmdlZCB1cG9uIFB5cnJodXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGF0IHRoZSBzYW1lIGluc3RhbnQgdGhlIEJhcmJhcmlhbidzIHNwZWFyIHNtb3RlIHRoZSBraW5nJ3MgaG9yc2UsIGFuZCBoaXMgb3duIGhvcnNlIHdhcyBzbWl0dGVuIGJ5IHRoZSBzcGVhciBvZiBMZW9ubmF0dXMuIEJvdGggaG9yc2VzIGZlbGwsIGJ1dCB3aGlsZSBQeXJyaHVzIHdhcyBzZWl6ZWQgYW5kIHJlc2N1ZWQgYnkgaGlzIGZyaWVuZHMsIHRoZSBJdGFsaWFuLCBmaWdodGluZyB0byB0aGUgbGFzdCwgd2FzIGtpbGxlZC4gSGUgd2FzIGEgRnJlbnRhbmlhbiBieSByYWNlLCBjYXB0YWluIG9mIGEgdHJvb3Agb2YgaG9yc2UsIE9wbGF4IGJ5IG5hbWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDE5Ij5EaW9ueXNpdXMgSGFsLiwgPHRpdGxlPkV4Y2VycHRhIGV4IGxpYi4geGl4LjwvdGl0bGU+LCAxMjwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U2Vlc3QgdGhvdSwgMCBLaW5nLCB0aGF0IEJhcmJhcmlhbiB5b25kZXIsIHJpZGluZyB0aGUgYmxhY2sgaG9yc2Ugd2l0aCB3aGl0ZSBmZWV0PyBIZSBsb29rcyBsaWtlIGEgbWFuIHdobyBoYXMgc29tZSBncmVhdCBhbmQgdGVycmlibGUgZGVzaWduIGluIG1pbmQuIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBrZWVwcyBoaXMgZXllcyBmaXhlZCB1cG9uIHRoZWUsIGFuZCBpcyBpbnRlbnQgdG8gcmVhY2ggdGhlZSB3aXRoIGFsbCBoaXMgbWlnaHQgYW5kIG1haW4sIGFuZCBwYXlzIG5vIGhlZWQgdG8gYW55Ym9keSBlbHNlLiBTbyBiZSBvbiB0aHkgZ3VhcmQgYWdhaW5zdCB0aGUgbWFuLjwvcT4gVG8gaGltIFB5cnJodXMgbWFkZSByZXBseTogCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBrZWVwcyBoaXMgZXllcyBmaXhlZCB1cG9uIHRoZWUsIGFuZCBpcyBpbnRlbnQgdG8gcmVhY2ggdGhlZSB3aXRoIGFsbCBoaXMgbWlnaHQgYW5kIG1haW4sIGFuZCBwYXlzIG5vIGhlZWQgdG8gYW55Ym9keSBlbHNlLiBTbyBiZSBvbiB0aHkgZ3VhcmQgYWdhaW5zdCB0aGUgbWFuLjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBpcyBmYXRlZCAwIExlb25uYXR1cywgaXQgaXMgaW1wb3NzaWJsZSB0byBlc2NhcGU7IGJ1dCB3aXRoIGltcHVuaXR5IG5laXRoZXIgaGUgbm9yIGFueSBvdGhlciBJdGFsaWFuIHNoYWxsIGNvbWUgdG8gY2xvc2UgcXVhcnRlcnMgd2l0aCBtZS48L3E+IFdoaWxlIHRoZXkgd2VyZSBzdGlsbCBjb252ZXJzaW5nIHRodXMsIHRoZSBJdGFsaWFuIGxldmVsbGVkIGhpcyBzcGVhciwgd2hlZWxlZCBoaXMgaG9yc2UsIGFuZCBjaGFyZ2VkIHVwb24gUHlycmh1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGF0IHRoZSBzYW1lIGluc3RhbnQgdGhlIEJhcmJhcmlhbidzIHNwZWFyIHNtb3RlIHRoZSBraW5nJ3MgaG9yc2UsIGFuZCBoaXMgb3duIGhvcnNlIHdhcyBzbWl0dGVuIGJ5IHRoZSBzcGVhciBvZiBMZW9ubmF0dXMuIEJvdGggaG9yc2VzIGZlbGwsIGJ1dCB3aGlsZSBQeXJyaHVzIHdhcyBzZWl6ZWQgYW5kIHJlc2N1ZWQgYnkgaGlzIGZyaWVuZHMsIHRoZSBJdGFsaWFuLCBmaWdodGluZyB0byB0aGUgbGFzdCwgd2FzIGtpbGxlZC4gSGUgd2FzIGEgRnJlbnRhbmlhbiBieSByYWNlLCBjYXB0YWluIG9mIGEgdHJvb3Agb2YgaG9yc2UsIE9wbGF4IGJ5IG5hbWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5ILiAxOSI+RGlvbnlzaXVzIEhhbC4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkV4Y2VycHRhIGV4IGxpYi4geGl4LjwvdGl0bGU+LCAxMjwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJELkguIDE5Ij5EaW9ueXNpdXMgSGFsLiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXhjZXJwdGEgZXggbGliLiB4aXguPC90aXRsZT4sIDEyPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FeGNlcnB0YSBleCBsaWIuIHhpeC48L3RpdGxlPiwgMTI8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHRhdWdodCBQeXJyaHVzIHRvIGJlIG1vcmUgb24gaGlzIGd1YXJkOyBhbmQgc2VlaW5nIHRoYXQgaGlzIGNhdmFscnkgd2VyZSBnaXZpbmcgd2F5LCBoZSBjYWxsZWQgdXAgaGlzIHBoYWxhbnggYW5kIHB1dCBpdCBpbiBhcnJheSwgd2hpbGUgaGUgaGltc2VsZiwgYWZ0ZXIgZ2l2aW5nIGhpcyBjbG9hayBhbmQgYXJtb3VyIHRvIG9uZSBvZiBoaXMgY29tcGFuaW9ucywgTWVnYWNsZXMsIGFuZCBoaWRpbmcgaGltc2VsZiBhZnRlciBhIGZhc2hpb24gYmVoaW5kIGhpcyBtZW4sIGNoYXJnZWQgd2l0aCB0aGVtIHVwb24gdGhlIFJvbWFucy4gQnV0IHRoZXkgcmVjZWl2ZWQgYW5kIGVuZ2FnZWQgaGltLCBhbmQgZm9yIGEgbG9uZyB0aW1lIHRoZSBpc3N1ZSBvZiB0aGUgYmF0dGxlIHJlbWFpbmVkIHVuZGVjaWRlZDsgaXQgaXMgc2FpZCB0aGF0IHRoZXJlIHdlcmUgc2V2ZW4gdHVybnMgb2YgZm9ydHVuZSwgYXMgZWFjaCBzaWRlIGVpdGhlciBmbGVkIGJhY2sgb3IgcHVyc3VlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluZGVlZCB0aGUgZXhjaGFuZ2Ugb2YgYXJtb3VyIHdoaWNoIHRoZSBraW5nIGhhZCBtYWRlLCBhbHRob3VnaCBpdCB3YXMgb3Bwb3J0dW5lIGZvciB0aGUgc2FmZXR5IG9mIGhpcyBwZXJzb24sIGNhbWUgbmVhciBvdmVydGhyb3dpbmcgaGlzIGNhdXNlIGFuZCBsb3NpbmcgaGltIHRoZSB2aWN0b3J5LiBGb3IgbWFueSBvZiB0aGUgZW5lbXkgYXNzYWlsZWQgTWVnYWNsZXMsIGFuZCB0aGUgZm9yZW1vc3Qgb2YgdGhlbSwgRGV4b8O8cyBieSBuYW1lLCBzbW90ZSBoaW0gYW5kIGxhaWQgaGltIGxvdywgYW5kIHRoZW4sIHNuYXRjaGluZyBhd2F5IGhpcyBoZWxtZXQgYW5kIGNsb2FrLCByb2RlIHVwIHRvIExhZXZpbnVzLCBkaXNwbGF5aW5nIHRoZW0sIGFuZCBzaG91dGluZyBhcyBoZSBkaWQgc28gdGhhdCBoZSBoYWQga2lsbGVkIFB5cnJodXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhcyB0aGUgc3BvaWxzIHdlcmUgY2FycmllZCBhbG9uZyB0aGUgcmFua3MgYW5kIGRpc3BsYXllZCwgdGhlcmUgd2FzIGpveSBhbmQgc2hvdXRpbmcgYW1vbmcgdGhlIFJvbWFucywgYW5kIGFtb25nIHRoZSBHcmVla3MgY29uc3Rlcm5hdGlvbiBhbmQgZGVqZWN0aW9uLCB1bnRpbCBQeXJyaHVzLCBsZWFybmluZyB3aGF0IHdhcyB0aGUgbWF0dGVyLCByb2RlIGFsb25nIGhpcyBsaW5lIHdpdGggaGlzIGZhY2UgYmFyZSwgc3RyZXRjaGluZyBvdXQgaGlzIGhhbmQgdG8gdGhlIGNvbWJhdGFudHMgYW5kIGdpdmluZyB0aGVtIHRvIGtub3cgaGltIGJ5IGhpcyB2b2ljZS4gQXQgbGFzdCwgd2hlbiB0aGUgUm9tYW5zIHdlcmUgbW9yZSB0aGFuIGV2ZXIgY3Jvd2RlZCBiYWNrIGJ5IHRoZSBlbGVwaGFudHMsIGFuZCB0aGVpciBob3JzZXMsIGJlZm9yZSB0aGV5IGdvdCBuZWFyIHRoZSBhbmltYWxzLCB3ZXJlIHRlcnJpZmllZCBhbmQgcmFuIGF3YXkgd2l0aCB0aGVpciByaWRlcnMsIFB5cnJodXMgYnJvdWdodCBoaXMgVGhlc3NhbGlhbiBjYXZhbHJ5IHVwb24gdGhlbSB3aGlsZSB0aGV5IHdlcmUgaW4gY29uZnVzaW9uIGFuZCByb3V0ZWQgdGhlbSB3aXRoIGdyZWF0IHNsYXVnaHRlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB0YXVnaHQgUHlycmh1cyB0byBiZSBtb3JlIG9uIGhpcyBndWFyZDsgYW5kIHNlZWluZyB0aGF0IGhpcyBjYXZhbHJ5IHdlcmUgZ2l2aW5nIHdheSwgaGUgY2FsbGVkIHVwIGhpcyBwaGFsYW54IGFuZCBwdXQgaXQgaW4gYXJyYXksIHdoaWxlIGhlIGhpbXNlbGYsIGFmdGVyIGdpdmluZyBoaXMgY2xvYWsgYW5kIGFybW91ciB0byBvbmUgb2YgaGlzIGNvbXBhbmlvbnMsIE1lZ2FjbGVzLCBhbmQgaGlkaW5nIGhpbXNlbGYgYWZ0ZXIgYSBmYXNoaW9uIGJlaGluZCBoaXMgbWVuLCBjaGFyZ2VkIHdpdGggdGhlbSB1cG9uIHRoZSBSb21hbnMuIEJ1dCB0aGV5IHJlY2VpdmVkIGFuZCBlbmdhZ2VkIGhpbSwgYW5kIGZvciBhIGxvbmcgdGltZSB0aGUgaXNzdWUgb2YgdGhlIGJhdHRsZSByZW1haW5lZCB1bmRlY2lkZWQ7IGl0IGlzIHNhaWQgdGhhdCB0aGVyZSB3ZXJlIHNldmVuIHR1cm5zIG9mIGZvcnR1bmUsIGFzIGVhY2ggc2lkZSBlaXRoZXIgZmxlZCBiYWNrIG9yIHB1cnN1ZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhlIGV4Y2hhbmdlIG9mIGFybW91ciB3aGljaCB0aGUga2luZyBoYWQgbWFkZSwgYWx0aG91Z2ggaXQgd2FzIG9wcG9ydHVuZSBmb3IgdGhlIHNhZmV0eSBvZiBoaXMgcGVyc29uLCBjYW1lIG5lYXIgb3ZlcnRocm93aW5nIGhpcyBjYXVzZSBhbmQgbG9zaW5nIGhpbSB0aGUgdmljdG9yeS4gRm9yIG1hbnkgb2YgdGhlIGVuZW15IGFzc2FpbGVkIE1lZ2FjbGVzLCBhbmQgdGhlIGZvcmVtb3N0IG9mIHRoZW0sIERleG/DvHMgYnkgbmFtZSwgc21vdGUgaGltIGFuZCBsYWlkIGhpbSBsb3csIGFuZCB0aGVuLCBzbmF0Y2hpbmcgYXdheSBoaXMgaGVsbWV0IGFuZCBjbG9haywgcm9kZSB1cCB0byBMYWV2aW51cywgZGlzcGxheWluZyB0aGVtLCBhbmQgc2hvdXRpbmcgYXMgaGUgZGlkIHNvIHRoYXQgaGUgaGFkIGtpbGxlZCBQeXJyaHVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhcyB0aGUgc3BvaWxzIHdlcmUgY2FycmllZCBhbG9uZyB0aGUgcmFua3MgYW5kIGRpc3BsYXllZCwgdGhlcmUgd2FzIGpveSBhbmQgc2hvdXRpbmcgYW1vbmcgdGhlIFJvbWFucywgYW5kIGFtb25nIHRoZSBHcmVla3MgY29uc3Rlcm5hdGlvbiBhbmQgZGVqZWN0aW9uLCB1bnRpbCBQeXJyaHVzLCBsZWFybmluZyB3aGF0IHdhcyB0aGUgbWF0dGVyLCByb2RlIGFsb25nIGhpcyBsaW5lIHdpdGggaGlzIGZhY2UgYmFyZSwgc3RyZXRjaGluZyBvdXQgaGlzIGhhbmQgdG8gdGhlIGNvbWJhdGFudHMgYW5kIGdpdmluZyB0aGVtIHRvIGtub3cgaGltIGJ5IGhpcyB2b2ljZS4gQXQgbGFzdCwgd2hlbiB0aGUgUm9tYW5zIHdlcmUgbW9yZSB0aGFuIGV2ZXIgY3Jvd2RlZCBiYWNrIGJ5IHRoZSBlbGVwaGFudHMsIGFuZCB0aGVpciBob3JzZXMsIGJlZm9yZSB0aGV5IGdvdCBuZWFyIHRoZSBhbmltYWxzLCB3ZXJlIHRlcnJpZmllZCBhbmQgcmFuIGF3YXkgd2l0aCB0aGVpciByaWRlcnMsIFB5cnJodXMgYnJvdWdodCBoaXMgVGhlc3NhbGlhbiBjYXZhbHJ5IHVwb24gdGhlbSB3aGlsZSB0aGV5IHdlcmUgaW4gY29uZnVzaW9uIGFuZCByb3V0ZWQgdGhlbSB3aXRoIGdyZWF0IHNsYXVnaHRlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+RGlvbnlzaXVzIHN0YXRlcyB0aGF0IG5lYXJseSBmaWZ0ZWVuIHRob3VzYW5kIG9mIHRoZSBSb21hbnMgZmVsbCwgYnV0IEhpZXJvbnltdXMgc2F5cyBvbmx5IHNldmVuIHRob3VzYW5kOyBvbiB0aGUgc2lkZSBvZiBQeXJyaHVzLCB0aGlydGVlbiB0aG91c2FuZCBmZWxsLCBhY2NvcmRpbmcgdG8gRGlvbnlzaXVzLCBidXQgYWNjb3JkaW5nIHRvIEhpZXJvbnltdXMgbGVzcyB0aGFuIGZvdXIgdGhvdXNhbmQuIFRoZXNlLCBob3dldmVyLCB3ZXJlIGhpcyBiZXN0IHRyb29wczsgYW5kIGJlc2lkZXMsIFB5cnJodXMgbG9zdCB0aGUgZnJpZW5kcyBhbmQgZ2VuZXJhbHMgd2hvbSBoZSBhbHdheXMgdXNlZCBhbmQgdHJ1c3RlZCBtb3N0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSB0b29rIHRoZSBjYW1wIG9mIHRoZSBSb21hbnMgYWZ0ZXIgdGhleSBoYWQgYWJhbmRvbmVkIGl0LCBhbmQgd29uIG92ZXIgdG8gaGlzIHNpZGUgc29tZSBvZiB0aGVpciBhbGxpZWQgY2l0aWVzOyBoZSBhbHNvIHdhc3RlZCBtdWNoIHRlcnJpdG9yeSwgYW5kIGFkdmFuY2VkIHVudGlsIGhlIHdhcyB3aXRoaW4gdGhyZWUgaHVuZHJlZCBmdXJsb25ncycgZGlzdGFuY2UgZnJvbSBSb21lLiBBbmQgbm93LCBhZnRlciB0aGUgYmF0dGxlLCB0aGVyZSBjYW1lIHRvIGhpbSBtYW55IG9mIHRoZSBMdWNhbmlhbnMgYW5kIFNhbW5pdGVzLiBUaGVzZSBoZSBjZW5zdXJlZCBmb3IgYmVpbmcgbGF0ZSwgYnV0IGl0IHdhcyBjbGVhciB0aGF0IGhlIHdhcyBwbGVhc2VkIGFuZCBwcm91ZCBiZWNhdXNlIHdpdGggaGlzIG93biB0cm9vcHMgYW5kIHRoZSBUYXJhbnRpbmVzIGFsb25lIGhlIGhhZCBjb25xdWVyZWQgdGhlIGdyZWF0IGZvcmNlIG9mIHRoZSBSb21hbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkRpb255c2l1cyBzdGF0ZXMgdGhhdCBuZWFybHkgZmlmdGVlbiB0aG91c2FuZCBvZiB0aGUgUm9tYW5zIGZlbGwsIGJ1dCBIaWVyb255bXVzIHNheXMgb25seSBzZXZlbiB0aG91c2FuZDsgb24gdGhlIHNpZGUgb2YgUHlycmh1cywgdGhpcnRlZW4gdGhvdXNhbmQgZmVsbCwgYWNjb3JkaW5nIHRvIERpb255c2l1cywgYnV0IGFjY29yZGluZyB0byBIaWVyb255bXVzIGxlc3MgdGhhbiBmb3VyIHRob3VzYW5kLiBUaGVzZSwgaG93ZXZlciwgd2VyZSBoaXMgYmVzdCB0cm9vcHM7IGFuZCBiZXNpZGVzLCBQeXJyaHVzIGxvc3QgdGhlIGZyaWVuZHMgYW5kIGdlbmVyYWxzIHdob20gaGUgYWx3YXlzIHVzZWQgYW5kIHRydXN0ZWQgbW9zdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIHRvb2sgdGhlIGNhbXAgb2YgdGhlIFJvbWFucyBhZnRlciB0aGV5IGhhZCBhYmFuZG9uZWQgaXQsIGFuZCB3b24gb3ZlciB0byBoaXMgc2lkZSBzb21lIG9mIHRoZWlyIGFsbGllZCBjaXRpZXM7IGhlIGFsc28gd2FzdGVkIG11Y2ggdGVycml0b3J5LCBhbmQgYWR2YW5jZWQgdW50aWwgaGUgd2FzIHdpdGhpbiB0aHJlZSBodW5kcmVkIGZ1cmxvbmdzJyBkaXN0YW5jZSBmcm9tIFJvbWUuIEFuZCBub3csIGFmdGVyIHRoZSBiYXR0bGUsIHRoZXJlIGNhbWUgdG8gaGltIG1hbnkgb2YgdGhlIEx1Y2FuaWFucyBhbmQgU2Ftbml0ZXMuIFRoZXNlIGhlIGNlbnN1cmVkIGZvciBiZWluZyBsYXRlLCBidXQgaXQgd2FzIGNsZWFyIHRoYXQgaGUgd2FzIHBsZWFzZWQgYW5kIHByb3VkIGJlY2F1c2Ugd2l0aCBoaXMgb3duIHRyb29wcyBhbmQgdGhlIFRhcmFudGluZXMgYWxvbmUgaGUgaGFkIGNvbnF1ZXJlZCB0aGUgZ3JlYXQgZm9yY2Ugb2YgdGhlIFJvbWFucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFJvbWFucyBkaWQgbm90IGRlcG9zZSBMYWV2aW51cyBmcm9tIGhpcyBjb25zdWxhciBvZmZpY2U7IGFuZCB5ZXQgd2UgYXJlIHRvbGQgdGhhdCBDYWl1cyBGYWJyaWNpdXMgZGVjbGFyZWQgdGhhdCBpdCB3YXMgbm90IHRoZSBFcGVpcm90cyB3aG8gaGFkIGNvbnF1ZXJlZCB0aGUgUm9tYW5zLCBidXQgUHlycmh1cyB3aG8gaGFkIGNvbnF1ZXJlZCBMYWV2aW51cywgRmFicmljaXVzIGJlaW5nIG9mIHRoZSBvcGluaW9uIHRoYXQgdGhlIFJvbWFuIGRlZmVhdCB3YXMgbm90IGR1ZSB0byB0aGVpciBhcm15LCBidXQgdG8gaXRzIGdlbmVyYWw7IGJ1dCB0aGV5IGxvc3Qgbm8gdGltZSBpbiBmaWxsaW5nIHVwIHRoZWlyIGRlcGxldGVkIGxlZ2lvbnMgYW5kIHJhaXNpbmcgb3RoZXJzLCB1c2VkIGZlYXJsZXNzIGFuZCB2ZWhlbWVudCBsYW5ndWFnZSBhYm91dCB0aGUgd2FyLCBhbmQgdGh1cyBmaWxsZWQgUHlycmh1cyB3aXRoIGNvbnN0ZXJuYXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGRlY2lkZWQsIHRoZXJlZm9yZSwgdG8gc2VuZCB0byB0aGVtIGZpcnN0IGFuZCBmaW5kIG91dCB3aGV0aGVyIHRoZXkgd2VyZSBkaXNwb3NlZCB0byBjb21lIHRvIHRlcm1zLCBmb3IgaGUgcmVnYXJkZWQgdGhlIGNhcHR1cmUgb2YgdGhlaXIgY2l0eSBhbmQgdGhlaXIgY29tcGxldGUgY29ucXVlc3QgYXMgYSBsYXJnZSB0YXNrIGFuZCBvbmUgdGhhdCB3YXMgYmV5b25kIGhpcyBwcmVzZW50IGZvcmNlLCB3aGVyZWFzIGEgZnJpZW5kbHkgc2V0dGxlbWVudCB3aXRoIHRoZW0gYWZ0ZXIgYSB2aWN0b3J5IHdvdWxkIGdyZWF0bHkgZW5oYW5jZSBoaXMgcmVwdXRhdGlvbi4gQWNjb3JkaW5nbHksIENpbmVhcyB3YXMgc2VudCB0byBSb21lLCB3aGVyZSBoZSBoYWQgY29uZmVyZW5jZXMgd2l0aCB0aGUgbWVuIGluIGF1dGhvcml0eSwgYW5kIHNlbnQgdGhlaXIgd2l2ZXMgYW5kIGNoaWxkcmVuIGdpZnRzIGluIHRoZSBuYW1lIG9mIGhpcyBraW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5ObyBvbmUsIGhvd2V2ZXIsIHdvdWxkIGFjY2VwdCB0aGUgZ2lmdHMsIGJ1dCBhbGwgcmVwbGllZCwgbWVuIGFuZCB3b21lbiBhbGlrZSwgdGhhdCBpZiBhIHBlYWNlIHdlcmUgcHVibGljbHkgY29uY2x1ZGVkIHRoZXkgYWxzbywgb24gdGhlaXIgcGFydCwgd291bGQgc2hvdyBnb29kd2lsbCBhbmQga2luZG5lc3MgdG8gdGhlIGtpbmcuIE1vcmVvdmVyLCB0aG91Z2ggQ2luZWFzIG1hZGUgbWFueSBraW5kIGFuZCBhbGx1cmluZyBwcm9wb3NhbHMgdG8gdGhlIHNlbmF0ZSwgbm90IG9uZSBvZiB0aGVtIHdhcyByZWNlaXZlZCB0aGVyZSB3aXRoIGFsYWNyaXR5IG9yIHBsZWFzdXJlLCBhbHRob3VnaCBQeXJyaHVzIG9mZmVyZWQgdG8gcmVzdG9yZSB3aXRob3V0IGEgcmFuc29tIHRoZWlyIG1lbiB3aG8gaGFkIGJlZW4gY2FwdHVyZWQgaW4gdGhlIGJhdHRsZSwgYW5kIHByb21pc2VkIHRvIGFzc2lzdCB0aGVtIGluIHRoZSBzdWJqdWdhdGlvbiBvZiBJdGFseSwgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGluIHJldHVybiBmb3IgdGhlc2UgZmF2b3VycyBhc2tlZCBvbmx5IGZyaWVuZHNoaXAgZm9yIGhpbXNlbGYsIGltbXVuaXR5IGZvciB0aGUgVGFyZW50aW5lcywgYW5kIG5vdGhpbmcgZWxzZS4gTmV2ZXJ0aGVsZXNzLCBtb3N0IG9mIHRoZSBzZW5hdG9ycyB3ZXJlIHBsYWlubHkgaW5jbGluZWQgdG93YXJkcyBwZWFjZSwgc2luY2UgdGhleSBoYWQgYmVlbiBkZWZlYXRlZCBpbiBvbmUgZ3JlYXQgYmF0dGxlLCBhbmQgZXhwZWN0ZWQgYW5vdGhlciB3aXRoIGEgbGFyZ2VyIGFybXksIG5vdyB0aGF0IHRoZSBJdGFsaWFuIEdyZWVrcyBoYWQgam9pbmVkIFB5cnJodXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQgQXBwaXVzIENsYXVkaXVzLCBhIG1hbiBvZiBkaXN0aW5jdGlvbiwgYnV0IG9uZSB3aG9tIG9sZCBhZ2UgYW5kIGJsaW5kbmVzcyBoYWQgZm9yY2VkIHRvIGdpdmUgdXAgYWxsIHB1YmxpYyBhY3Rpdml0aWVzLCBub3cgdGhhdCB0aGUgbWVzc2FnZSBmcm9tIHRoZSBraW5nIGhhZCBjb21lIGFuZCBhIHJlcG9ydCB3YXMgcmlmZSB0aGF0IHRoZSBzZW5hdGUgd2FzIGdvaW5nIHRvIHZvdGUgZm9yIHRoZSBwcm9wb3NlZCBjZXNzYXRpb24gb2YgaG9zdGlsaXRpZXMsIGNvdWxkIG5vdCByZXN0cmFpbiBoaW1zZWxmLCBidXQgb3JkZXJlZCBoaXMgYXR0ZW5kYW50cyB0byB0YWtlIGhpbSB1cCBhbmQgaGFkIGhpbXNlbGYgY2FycmllZCBvbiBhIGxpdHRlciB0aHJvdWdoIHRoZSBmb3J1bSB0byB0aGUgc2VuYXRlLWhvdXNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIGhhZCByZWFjaGVkIHRoZSBkb29yLCBoaXMgc29ucyBhbmQgc29ucy1pbi1sYXcgdG9vayBoaW0gdXAgaW4gdGhlaXIgYXJtcyBhbmQgYnJvdWdodCBoaW0gaW5zaWRlLCBhbmQgdGhlIHNlbmF0b3JzLCBvdXQgb2YgcmVnYXJkIGZvciB0aGUgbWFuLCBrZXB0IHJlc3BlY3RmdWwgc2lsZW5jZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFJvbWFucyBkaWQgbm90IGRlcG9zZSBMYWV2aW51cyBmcm9tIGhpcyBjb25zdWxhciBvZmZpY2U7IGFuZCB5ZXQgd2UgYXJlIHRvbGQgdGhhdCBDYWl1cyBGYWJyaWNpdXMgZGVjbGFyZWQgdGhhdCBpdCB3YXMgbm90IHRoZSBFcGVpcm90cyB3aG8gaGFkIGNvbnF1ZXJlZCB0aGUgUm9tYW5zLCBidXQgUHlycmh1cyB3aG8gaGFkIGNvbnF1ZXJlZCBMYWV2aW51cywgRmFicmljaXVzIGJlaW5nIG9mIHRoZSBvcGluaW9uIHRoYXQgdGhlIFJvbWFuIGRlZmVhdCB3YXMgbm90IGR1ZSB0byB0aGVpciBhcm15LCBidXQgdG8gaXRzIGdlbmVyYWw7IGJ1dCB0aGV5IGxvc3Qgbm8gdGltZSBpbiBmaWxsaW5nIHVwIHRoZWlyIGRlcGxldGVkIGxlZ2lvbnMgYW5kIHJhaXNpbmcgb3RoZXJzLCB1c2VkIGZlYXJsZXNzIGFuZCB2ZWhlbWVudCBsYW5ndWFnZSBhYm91dCB0aGUgd2FyLCBhbmQgdGh1cyBmaWxsZWQgUHlycmh1cyB3aXRoIGNvbnN0ZXJuYXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGRlY2lkZWQsIHRoZXJlZm9yZSwgdG8gc2VuZCB0byB0aGVtIGZpcnN0IGFuZCBmaW5kIG91dCB3aGV0aGVyIHRoZXkgd2VyZSBkaXNwb3NlZCB0byBjb21lIHRvIHRlcm1zLCBmb3IgaGUgcmVnYXJkZWQgdGhlIGNhcHR1cmUgb2YgdGhlaXIgY2l0eSBhbmQgdGhlaXIgY29tcGxldGUgY29ucXVlc3QgYXMgYSBsYXJnZSB0YXNrIGFuZCBvbmUgdGhhdCB3YXMgYmV5b25kIGhpcyBwcmVzZW50IGZvcmNlLCB3aGVyZWFzIGEgZnJpZW5kbHkgc2V0dGxlbWVudCB3aXRoIHRoZW0gYWZ0ZXIgYSB2aWN0b3J5IHdvdWxkIGdyZWF0bHkgZW5oYW5jZSBoaXMgcmVwdXRhdGlvbi4gQWNjb3JkaW5nbHksIENpbmVhcyB3YXMgc2VudCB0byBSb21lLCB3aGVyZSBoZSBoYWQgY29uZmVyZW5jZXMgd2l0aCB0aGUgbWVuIGluIGF1dGhvcml0eSwgYW5kIHNlbnQgdGhlaXIgd2l2ZXMgYW5kIGNoaWxkcmVuIGdpZnRzIGluIHRoZSBuYW1lIG9mIGhpcyBraW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vIG9uZSwgaG93ZXZlciwgd291bGQgYWNjZXB0IHRoZSBnaWZ0cywgYnV0IGFsbCByZXBsaWVkLCBtZW4gYW5kIHdvbWVuIGFsaWtlLCB0aGF0IGlmIGEgcGVhY2Ugd2VyZSBwdWJsaWNseSBjb25jbHVkZWQgdGhleSBhbHNvLCBvbiB0aGVpciBwYXJ0LCB3b3VsZCBzaG93IGdvb2R3aWxsIGFuZCBraW5kbmVzcyB0byB0aGUga2luZy4gTW9yZW92ZXIsIHRob3VnaCBDaW5lYXMgbWFkZSBtYW55IGtpbmQgYW5kIGFsbHVyaW5nIHByb3Bvc2FscyB0byB0aGUgc2VuYXRlLCBub3Qgb25lIG9mIHRoZW0gd2FzIHJlY2VpdmVkIHRoZXJlIHdpdGggYWxhY3JpdHkgb3IgcGxlYXN1cmUsIGFsdGhvdWdoIFB5cnJodXMgb2ZmZXJlZCB0byByZXN0b3JlIHdpdGhvdXQgYSByYW5zb20gdGhlaXIgbWVuIHdobyBoYWQgYmVlbiBjYXB0dXJlZCBpbiB0aGUgYmF0dGxlLCBhbmQgcHJvbWlzZWQgdG8gYXNzaXN0IHRoZW0gaW4gdGhlIHN1Ymp1Z2F0aW9uIG9mIEl0YWx5LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbiByZXR1cm4gZm9yIHRoZXNlIGZhdm91cnMgYXNrZWQgb25seSBmcmllbmRzaGlwIGZvciBoaW1zZWxmLCBpbW11bml0eSBmb3IgdGhlIFRhcmVudGluZXMsIGFuZCBub3RoaW5nIGVsc2UuIE5ldmVydGhlbGVzcywgbW9zdCBvZiB0aGUgc2VuYXRvcnMgd2VyZSBwbGFpbmx5IGluY2xpbmVkIHRvd2FyZHMgcGVhY2UsIHNpbmNlIHRoZXkgaGFkIGJlZW4gZGVmZWF0ZWQgaW4gb25lIGdyZWF0IGJhdHRsZSwgYW5kIGV4cGVjdGVkIGFub3RoZXIgd2l0aCBhIGxhcmdlciBhcm15LCBub3cgdGhhdCB0aGUgSXRhbGlhbiBHcmVla3MgaGFkIGpvaW5lZCBQeXJyaHVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQgQXBwaXVzIENsYXVkaXVzLCBhIG1hbiBvZiBkaXN0aW5jdGlvbiwgYnV0IG9uZSB3aG9tIG9sZCBhZ2UgYW5kIGJsaW5kbmVzcyBoYWQgZm9yY2VkIHRvIGdpdmUgdXAgYWxsIHB1YmxpYyBhY3Rpdml0aWVzLCBub3cgdGhhdCB0aGUgbWVzc2FnZSBmcm9tIHRoZSBraW5nIGhhZCBjb21lIGFuZCBhIHJlcG9ydCB3YXMgcmlmZSB0aGF0IHRoZSBzZW5hdGUgd2FzIGdvaW5nIHRvIHZvdGUgZm9yIHRoZSBwcm9wb3NlZCBjZXNzYXRpb24gb2YgaG9zdGlsaXRpZXMsIGNvdWxkIG5vdCByZXN0cmFpbiBoaW1zZWxmLCBidXQgb3JkZXJlZCBoaXMgYXR0ZW5kYW50cyB0byB0YWtlIGhpbSB1cCBhbmQgaGFkIGhpbXNlbGYgY2FycmllZCBvbiBhIGxpdHRlciB0aHJvdWdoIHRoZSBmb3J1bSB0byB0aGUgc2VuYXRlLWhvdXNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgaGFkIHJlYWNoZWQgdGhlIGRvb3IsIGhpcyBzb25zIGFuZCBzb25zLWluLWxhdyB0b29rIGhpbSB1cCBpbiB0aGVpciBhcm1zIGFuZCBicm91Z2h0IGhpbSBpbnNpZGUsIGFuZCB0aGUgc2VuYXRvcnMsIG91dCBvZiByZWdhcmQgZm9yIHRoZSBtYW4sIGtlcHQgcmVzcGVjdGZ1bCBzaWxlbmNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIEFwcGl1cyByYWlzZWQgaGltc2VsZiB1cCB3aGVyZSBoZSB3YXMgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VXAgdG8gdGhpcyB0aW1lLCAwIFJvbWFucywgSSBoYXZlIHJlZ2FyZGVkIHRoZSBtaXNmb3J0dW5lIHRvIG15IGV5ZXMgYXMgYW4gYWZmbGljdGlvbiwgYnV0IGl0IG5vdyBkaXN0cmVzc2VzIG1lIHRoYXQgSSBhbSBub3QgZGVhZiBhcyB3ZWxsIGFzIGJsaW5kLCB0aGF0IEkgbWlnaHQgbm90IGhlYXIgdGhlIHNoYW1lZnVsIHJlc29sdXRpb25zIGFuZCBkZWNyZWVzIG9mIHlvdXJzIHdoaWNoIGJyaW5nIGxvdyB0aGUgZ2xvcnkgb2YgUm9tZS4gRm9yIHdoYXQgYmVjb21lcyBvZiB0aGUgd29yZHMgdGhhdCB5ZSBhcmUgZXZlciByZWl0ZXJhdGluZyB0byBhbGwgdGhlIHdvcmxkLCBuYW1lbHksIHRoYXQgaWYgdGhlIGdyZWF0IEFsZXhhbmRlciBvZiByZW5vd24gaGFkIGNvbWUgdG8gSXRhbHkgYW5kIGhhZCBjb21lIGludG8gY29uZmxpY3Qgd2l0aCB1cywgd2hlbiB3ZSB3ZXJlIHlvdW5nIG1lbiwgYW5kIHdpdGggb3VyIGZhdGhlcnMsIHdoZW4gdGhleSB3ZXJlIGluIHRoZWlyIHByaW1lLCBoZSB3b3VsZCBub3Qgbm93IGJlIGNlbGVicmF0ZWQgYXMgaW52aW5jaWJsZSwgYnV0IHdvdWxkIGVpdGhlciBoYXZlIGZsZWQsIG9yLCBwZXJoYXBzLCBoYXZlIGZhbGxlbiB0aGVyZSwgYW5kIHNvIGhhdmUgbGVmdCBSb21lIG1vcmUgZ2xvcmlvdXMgc3RpbGw/IAoJCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TdXJlbHkgeWUgYXJlIHByb3ZpbmcgdGhhdCB0aGlzIHdhcyBib2FzdGluZyBhbmQgZW1wdHkgYmx1c3Rlciwgc2luY2UgeWUgYXJlIGFmcmFpZCBvZiBDaGFvbmlhbnMgYW5kIE1vbG9zc2lhbnMsIHdobyB3ZXJlIGV2ZXIgdGhlIHByZXkgb2YgdGhlIE1hY2Vkb25pYW5zLCBhbmQgeWUgdHJlbWJsZSBiZWZvcmUgUHlycmh1cywgd2hvIGhhcyBldmVyIGJlZW4gYSBtaW5pc3RlciBhbmQgc2Vydml0b3IgdG8gb25lIGF0IGxlYXN0IG9mIEFsZXhhbmRlcidzIGJvZHlndWFyZHMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UmVmZXJyaW5nIHNhcmNhc3RpY2FsbHkgdG8gaGlzIHJlbGF0aW9ucyB3aXRoIFB0b2xlbXkgYW5kIERlbWV0cml1cy48L25vdGU+IGFuZCBub3cgY29tZXMgd2FuZGVyaW5nIG92ZXIgSXRhbHksIG5vdCBzbyBtdWNoIHRvIGhlbHAgdGhlIEdyZWVrcyB3aG8gZHdlbGwgaGVyZSwgYXMgdG8gZXNjYXBlIGhpcyBlbmVtaWVzIGF0IGhvbWUsIHByb21pc2luZyB0byB3aW4gZm9yIHVzIHRoZSBzdXByZW1hY3kgaGVyZSB3aXRoIHRoYXQgYXJteSB3aGljaCBjb3VsZCBub3QgYXZhaWwgdG8gcHJlc2VydmUgZm9yIGhpbSBhIHNtYWxsIHBvcnRpb24gb2YgTWFjZWRvbmlhLiAKCQkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+RG8gbm90IHN1cHBvc2UgdGhhdCB5ZSB3aWxsIHJpZCB5b3Vyc2VsdmVzIG9mIHRoaXMgZmVsbG93IGJ5IG1ha2luZyBoaW0geW91ciBmcmllbmQ7IG5heSwgeWUgd2lsbCBicmluZyBhZ2FpbnN0IHlvdSBvdGhlcnMsIGFuZCB0aGV5IHdpbGwgZGVzcGlzZSB5b3UgYXMgbWVuIHdob20gYW55Ym9keSBjYW4gZWFzaWx5IHN1YmR1ZSwgaWYgUHlycmh1cyBnb2VzIGF3YXkgd2l0aG91dCBoYXZpbmcgYmVlbiBwdW5pc2hlZCBmb3IgaGlzIGluc3VsdHMsIGJ1dCBhY3R1YWxseSByZXdhcmRlZCBmb3IgdGhlbSBpbiBoYXZpbmcgZW5hYmxlZCBUYXJhbnRpbmVzIGFuZCBTYW1uaXRlcyB0byBtb2NrIGF0IFJvbWFucy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBBcHBpdXMgcmFpc2VkIGhpbXNlbGYgdXAgd2hlcmUgaGUgd2FzIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VXAgdG8gdGhpcyB0aW1lLCAwIFJvbWFucywgSSBoYXZlIHJlZ2FyZGVkIHRoZSBtaXNmb3J0dW5lIHRvIG15IGV5ZXMgYXMgYW4gYWZmbGljdGlvbiwgYnV0IGl0IG5vdyBkaXN0cmVzc2VzIG1lIHRoYXQgSSBhbSBub3QgZGVhZiBhcyB3ZWxsIGFzIGJsaW5kLCB0aGF0IEkgbWlnaHQgbm90IGhlYXIgdGhlIHNoYW1lZnVsIHJlc29sdXRpb25zIGFuZCBkZWNyZWVzIG9mIHlvdXJzIHdoaWNoIGJyaW5nIGxvdyB0aGUgZ2xvcnkgb2YgUm9tZS4gRm9yIHdoYXQgYmVjb21lcyBvZiB0aGUgd29yZHMgdGhhdCB5ZSBhcmUgZXZlciByZWl0ZXJhdGluZyB0byBhbGwgdGhlIHdvcmxkLCBuYW1lbHksIHRoYXQgaWYgdGhlIGdyZWF0IEFsZXhhbmRlciBvZiByZW5vd24gaGFkIGNvbWUgdG8gSXRhbHkgYW5kIGhhZCBjb21lIGludG8gY29uZmxpY3Qgd2l0aCB1cywgd2hlbiB3ZSB3ZXJlIHlvdW5nIG1lbiwgYW5kIHdpdGggb3VyIGZhdGhlcnMsIHdoZW4gdGhleSB3ZXJlIGluIHRoZWlyIHByaW1lLCBoZSB3b3VsZCBub3Qgbm93IGJlIGNlbGVicmF0ZWQgYXMgaW52aW5jaWJsZSwgYnV0IHdvdWxkIGVpdGhlciBoYXZlIGZsZWQsIG9yLCBwZXJoYXBzLCBoYXZlIGZhbGxlbiB0aGVyZSwgYW5kIHNvIGhhdmUgbGVmdCBSb21lIG1vcmUgZ2xvcmlvdXMgc3RpbGw/IAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1cmVseSB5ZSBhcmUgcHJvdmluZyB0aGF0IHRoaXMgd2FzIGJvYXN0aW5nIGFuZCBlbXB0eSBibHVzdGVyLCBzaW5jZSB5ZSBhcmUgYWZyYWlkIG9mIENoYW9uaWFucyBhbmQgTW9sb3NzaWFucywgd2hvIHdlcmUgZXZlciB0aGUgcHJleSBvZiB0aGUgTWFjZWRvbmlhbnMsIGFuZCB5ZSB0cmVtYmxlIGJlZm9yZSBQeXJyaHVzLCB3aG8gaGFzIGV2ZXIgYmVlbiBhIG1pbmlzdGVyIGFuZCBzZXJ2aXRvciB0byBvbmUgYXQgbGVhc3Qgb2YgQWxleGFuZGVyJ3MgYm9keWd1YXJkcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5SZWZlcnJpbmcgc2FyY2FzdGljYWxseSB0byBoaXMgcmVsYXRpb25zIHdpdGggUHRvbGVteSBhbmQgRGVtZXRyaXVzLjwvbm90ZT4gYW5kIG5vdyBjb21lcyB3YW5kZXJpbmcgb3ZlciBJdGFseSwgbm90IHNvIG11Y2ggdG8gaGVscCB0aGUgR3JlZWtzIHdobyBkd2VsbCBoZXJlLCBhcyB0byBlc2NhcGUgaGlzIGVuZW1pZXMgYXQgaG9tZSwgcHJvbWlzaW5nIHRvIHdpbiBmb3IgdXMgdGhlIHN1cHJlbWFjeSBoZXJlIHdpdGggdGhhdCBhcm15IHdoaWNoIGNvdWxkIG5vdCBhdmFpbCB0byBwcmVzZXJ2ZSBmb3IgaGltIGEgc21hbGwgcG9ydGlvbiBvZiBNYWNlZG9uaWEuIAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5EbyBub3Qgc3VwcG9zZSB0aGF0IHllIHdpbGwgcmlkIHlvdXJzZWx2ZXMgb2YgdGhpcyBmZWxsb3cgYnkgbWFraW5nIGhpbSB5b3VyIGZyaWVuZDsgbmF5LCB5ZSB3aWxsIGJyaW5nIGFnYWluc3QgeW91IG90aGVycywgYW5kIHRoZXkgd2lsbCBkZXNwaXNlIHlvdSBhcyBtZW4gd2hvbSBhbnlib2R5IGNhbiBlYXNpbHkgc3ViZHVlLCBpZiBQeXJyaHVzIGdvZXMgYXdheSB3aXRob3V0IGhhdmluZyBiZWVuIHB1bmlzaGVkIGZvciBoaXMgaW5zdWx0cywgYnV0IGFjdHVhbGx5IHJld2FyZGVkIGZvciB0aGVtIGluIGhhdmluZyBlbmFibGVkIFRhcmFudGluZXMgYW5kIFNhbW5pdGVzIHRvIG1vY2sgYXQgUm9tYW5zLjwvcT4KCQkJICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1cmVseSB5ZSBhcmUgcHJvdmluZyB0aGF0IHRoaXMgd2FzIGJvYXN0aW5nIGFuZCBlbXB0eSBibHVzdGVyLCBzaW5jZSB5ZSBhcmUgYWZyYWlkIG9mIENoYW9uaWFucyBhbmQgTW9sb3NzaWFucywgd2hvIHdlcmUgZXZlciB0aGUgcHJleSBvZiB0aGUgTWFjZWRvbmlhbnMsIGFuZCB5ZSB0cmVtYmxlIGJlZm9yZSBQeXJyaHVzLCB3aG8gaGFzIGV2ZXIgYmVlbiBhIG1pbmlzdGVyIGFuZCBzZXJ2aXRvciB0byBvbmUgYXQgbGVhc3Qgb2YgQWxleGFuZGVyJ3MgYm9keWd1YXJkcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlJlZmVycmluZyBzYXJjYXN0aWNhbGx5IHRvIGhpcyByZWxhdGlvbnMgd2l0aCBQdG9sZW15IGFuZCBEZW1ldHJpdXMuPC9ub3RlPiBhbmQgbm93IGNvbWVzIHdhbmRlcmluZyBvdmVyIEl0YWx5LCBub3Qgc28gbXVjaCB0byBoZWxwIHRoZSBHcmVla3Mgd2hvIGR3ZWxsIGhlcmUsIGFzIHRvIGVzY2FwZSBoaXMgZW5lbWllcyBhdCBob21lLCBwcm9taXNpbmcgdG8gd2luIGZvciB1cyB0aGUgc3VwcmVtYWN5IGhlcmUgd2l0aCB0aGF0IGFybXkgd2hpY2ggY291bGQgbm90IGF2YWlsIHRvIHByZXNlcnZlIGZvciBoaW0gYSBzbWFsbCBwb3J0aW9uIG9mIE1hY2Vkb25pYS4gCgkJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkRvIG5vdCBzdXBwb3NlIHRoYXQgeWUgd2lsbCByaWQgeW91cnNlbHZlcyBvZiB0aGlzIGZlbGxvdyBieSBtYWtpbmcgaGltIHlvdXIgZnJpZW5kOyBuYXksIHllIHdpbGwgYnJpbmcgYWdhaW5zdCB5b3Ugb3RoZXJzLCBhbmQgdGhleSB3aWxsIGRlc3Bpc2UgeW91IGFzIG1lbiB3aG9tIGFueWJvZHkgY2FuIGVhc2lseSBzdWJkdWUsIGlmIFB5cnJodXMgZ29lcyBhd2F5IHdpdGhvdXQgaGF2aW5nIGJlZW4gcHVuaXNoZWQgZm9yIGhpcyBpbnN1bHRzLCBidXQgYWN0dWFsbHkgcmV3YXJkZWQgZm9yIHRoZW0gaW4gaGF2aW5nIGVuYWJsZWQgVGFyYW50aW5lcyBhbmQgU2Ftbml0ZXMgdG8gbW9jayBhdCBSb21hbnMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BZnRlciBBcHBpdXMgaGFkIHRodXMgc3Bva2VuLCBoaXMgaGVhcmVycyB3ZXJlIHNlaXplZCB3aXRoIGVhZ2VybmVzcyB0byBwcm9zZWN1dGUgdGhlIHdhciwgYW5kIENpbmVhcyB3YXMgc2VudCBiYWNrIHdpdGggdGhlIHJlcGx5IHRoYXQgUHlycmh1cyBtdXN0IGZpcnN0IGRlcGFydCBvdXQgb2YgSXRhbHksIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoZW4sIGlmIGhlIHdpc2hlZCwgdGhlIFJvbWFucyB3b3VsZCB0YWxrIGFib3V0IGZyaWVuZHNoaXAgYW5kIGFsbGlhbmNlOyBidXQgYXMgbG9uZyBhcyBoZSB3YXMgdGhlcmUgaW4gYXJtcywgdGhleSB3b3VsZCBmaWdodCBoaW0gd2l0aCBhbGwgdGhlaXIgbWlnaHQsIGV2ZW4gdGhvdWdoIGhlIHNob3VsZCByb3V0IGluIGJhdHRsZSB0ZW4gdGhvdXNhbmQgbWVuIGxpa2UgTGFldmludXMuIEl0IGlzIHNhaWQsIHRvbywgdGhhdCBDaW5lYXMsIHdoaWxlIGhlIHdhcyBvbiB0aGlzIG1pc3Npb24sIG1hZGUgaXQgaGlzIGVhcm5lc3QgYnVzaW5lc3MgYXQgdGhlIHNhbWUgdGltZSB0byBvYnNlcnZlIHRoZSBsaWZlIGFuZCBtYW5uZXJzIG9mIHRoZSBSb21hbnMsIGFuZCB0byB1bmRlcnN0YW5kIHRoZSBleGNlbGxlbmNlcyBvZiB0aGVpciBmb3JtIG9mIGdvdmVybm1lbnQ7IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmhlIGFsc28gY29udmVyc2VkIHdpdGggdGhlaXIgYmVzdCBtZW4sIGFuZCBoYWQgbWFueSB0aGluZ3MgdG8gdGVsbCBQeXJyaHVzLCBhbW9uZyB3aGljaCB3YXMgdGhlIGRlY2xhcmF0aW9uIHRoYXQgdGhlIHNlbmF0ZSBpbXByZXNzZWQgaGltIGFzIGEgY291bmNpbCBvZiBtYW55IGtpbmdzLCBhbmQgdGhhdCwgYXMgZm9yIHRoZSBwZW9wbGUsIGhlIHdhcyBhZnJhaWQgaXQgbWlnaHQgcHJvdmUgdG8gYmUgYSBMZXJuYWVhbiBoeWRyYSBmb3IgdGhlbSB0byBmaWdodCBhZ2FpbnN0LCBzaW5jZSB0aGUgY29uc3VsIGFscmVhZHkgaGFkIHR3aWNlIGFzIG1hbnkgc29sZGllcnMgY29sbGVjdGVkIGFzIHRob3NlIHdobyBmYWNlZCB0aGVpciBlbmVtaWVzIGJlZm9yZSwgYW5kIHRoZXJlIHdlcmUgbWFueSB0aW1lcyBhcyBtYW55IFJvbWFucyBzdGlsbCB3aG8gd2VyZSBjYXBhYmxlIG9mIGJlYXJpbmcgYXJtcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVuLCBpZiBoZSB3aXNoZWQsIHRoZSBSb21hbnMgd291bGQgdGFsayBhYm91dCBmcmllbmRzaGlwIGFuZCBhbGxpYW5jZTsgYnV0IGFzIGxvbmcgYXMgaGUgd2FzIHRoZXJlIGluIGFybXMsIHRoZXkgd291bGQgZmlnaHQgaGltIHdpdGggYWxsIHRoZWlyIG1pZ2h0LCBldmVuIHRob3VnaCBoZSBzaG91bGQgcm91dCBpbiBiYXR0bGUgdGVuIHRob3VzYW5kIG1lbiBsaWtlIExhZXZpbnVzLiBJdCBpcyBzYWlkLCB0b28sIHRoYXQgQ2luZWFzLCB3aGlsZSBoZSB3YXMgb24gdGhpcyBtaXNzaW9uLCBtYWRlIGl0IGhpcyBlYXJuZXN0IGJ1c2luZXNzIGF0IHRoZSBzYW1lIHRpbWUgdG8gb2JzZXJ2ZSB0aGUgbGlmZSBhbmQgbWFubmVycyBvZiB0aGUgUm9tYW5zLCBhbmQgdG8gdW5kZXJzdGFuZCB0aGUgZXhjZWxsZW5jZXMgb2YgdGhlaXIgZm9ybSBvZiBnb3Zlcm5tZW50OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmhlIGFsc28gY29udmVyc2VkIHdpdGggdGhlaXIgYmVzdCBtZW4sIGFuZCBoYWQgbWFueSB0aGluZ3MgdG8gdGVsbCBQeXJyaHVzLCBhbW9uZyB3aGljaCB3YXMgdGhlIGRlY2xhcmF0aW9uIHRoYXQgdGhlIHNlbmF0ZSBpbXByZXNzZWQgaGltIGFzIGEgY291bmNpbCBvZiBtYW55IGtpbmdzLCBhbmQgdGhhdCwgYXMgZm9yIHRoZSBwZW9wbGUsIGhlIHdhcyBhZnJhaWQgaXQgbWlnaHQgcHJvdmUgdG8gYmUgYSBMZXJuYWVhbiBoeWRyYSBmb3IgdGhlbSB0byBmaWdodCBhZ2FpbnN0LCBzaW5jZSB0aGUgY29uc3VsIGFscmVhZHkgaGFkIHR3aWNlIGFzIG1hbnkgc29sZGllcnMgY29sbGVjdGVkIGFzIHRob3NlIHdobyBmYWNlZCB0aGVpciBlbmVtaWVzIGJlZm9yZSwgYW5kIHRoZXJlIHdlcmUgbWFueSB0aW1lcyBhcyBtYW55IFJvbWFucyBzdGlsbCB3aG8gd2VyZSBjYXBhYmxlIG9mIGJlYXJpbmcgYXJtcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgYW4gZW1iYXNzeSBjYW1lIGZyb20gdGhlIFJvbWFucyB0byB0cmVhdCBhYm91dCB0aGUgcHJpc29uZXJzIHRoYXQgaGFkIGJlZW4gdGFrZW4uIFRoZSBlbWJhc3N5IHdhcyBoZWFkZWQgYnkgQ2FpdXMgRmFicmljaXVzLCB3aG8sIGFzIENpbmVhcyByZXBvcnRlZCwgd2FzIGhlbGQgaW4gaGlnaGVzdCBlc3RlZW0gYXQgUm9tZSBhcyBhbiBob25vdXJhYmxlIG1hbiBhbmQgZ29vZCBzb2xkaWVyLCBidXQgd2FzIGlub3JkaW5hdGVseSBwb29yLiBUbyB0aGlzIG1hbiwgdGhlbiwgUHlycmh1cyBwcml2YXRlbHkgc2hvd2VkIGtpbmRuZXNzIGFuZCB0cmllZCB0byBpbmR1Y2UgaGltIHRvIGFjY2VwdCBnb2xkLCBub3QgZm9yIGFueSBiYXNlIHB1cnBvc2UsIGluZGVlZCwgYnV0IGNhbGxpbmcgaXQgYSBtYXJrIG9mIGZyaWVuZHNoaXAgYW5kIGhvc3BpdGFsaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgRmFicmljaXVzIHJlamVjdGVkIHRoZSBnb2xkLCBhbmQgZm9yIHRoYXQgZGF5IFB5cnJodXMgbGV0IGhpbSBhbG9uZTsgb24gdGhlIGZvbGxvd2luZyBkYXksIGhvd2V2ZXIsIHdpc2hpbmcgdG8gZnJpZ2h0ZW4gYSBtYW4gd2hvIGhhZCBub3QgeWV0IHNlZW4gYW4gZWxlcGhhbnQsIGhlIG9yZGVyZWQgdGhlIGxhcmdlc3Qgb2YgdGhlc2UgYW5pbWFscyB0byBiZSBzdGF0aW9uZWQgYmVoaW5kIGEgaGFuZ2luZyBpbiBmcm9udCBvZiB3aGljaCB0aGV5IHN0b29kIGNvbnZlcnNpbmcgdG9nZXRoZXIuIFRoaXMgd2FzIGRvbmU7IGFuZCBhdCBhIGdpdmVuIHNpZ25hbCB0aGUgaGFuZ2luZyB3YXMgZHJhd24gYXNpZGUsIGFuZCB0aGUgYW5pbWFsIHN1ZGRlbmx5IHJhaXNlZCBoaXMgdHJ1bmssIGhlbGQgaXQgb3ZlciB0aGUgaGVhZCBvZiBGYWJyaWNpdXMsIGFuZCBlbWl0dGVkIGEgaGFyc2ggYW5kIGZyaWdodGZ1bCBjcnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBGYWJyaWNpdXMgY2FsbWx5IHR1cm5lZCBhbmQgc2FpZCB3aXRoIGEgc21pbGUgdG8gUHlycmh1czogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3VyIGdvbGQgbWFkZSBubyBpbXByZXNzaW9uIG9uIG1lIHllc3RlcmRheSwgbmVpdGhlciBkb2VzIHlvdXIgYmVhc3QgdG8tZGF5LjwvcT4gQWdhaW4sIGF0IHN1cHBlciwgd2hlcmUgYWxsIHNvcnRzIG9mIHRvcGljcyB3ZXJlIGRpc2N1c3NlZCwgYW5kIHBhcnRpY3VsYXJseSB0aGF0IG9mIEdyZWVjZSBhbmQgaGVyIHBoaWxvc29waGVycywgQ2luZWFzIGhhcHBlbmVkIHNvbWVob3cgdG8gbWVudGlvbiBFcGljdXJ1cywgYW5kIHNldCBmb3J0aCB0aGUgZG9jdHJpbmVzIG9mIHRoYXQgc2Nob29sIGNvbmNlcm5pbmcgdGhlIGdvZHMsIGNpdmlsIGdvdmVybm1lbnQsIGFuZCB0aGUgaGlnaGVzdCBnb29kLCBleHBsYWluaW5nIHRoYXQgdGhleSBtYWRlIHBsZWFzdXJlIHRoZSBoaWdoZXN0IGdvb2QsIGJ1dCB3b3VsZCBoYXZlIG5vdGhpbmcgdG8gZG8gd2l0aCBjaXZpbCBnb3Zlcm5tZW50IG9uIHRoZSBncm91bmQgdGhhdCBpdCB3YXMgaW5qdXJpb3VzIGFuZCB0aGUgcnVpbiBvZiBmZWxpY2l0eSwgYW5kIHRoYXQgdGhleSByZW1vdmVkIHRoZSBEZWl0eSBhcyBmYXIgYXMgcG9zc2libGUgZnJvbSBmZWVsaW5ncyBvZiBraW5kbmVzcyBvciBhbmdlciBvciBjb25jZXJuIGZvciB1cywgaW50byBhIGxpZmUgdGhhdCBrbmV3IG5vIGNhcmUgYW5kIHdhcyBmaWxsZWQgd2l0aCBlYXNlIGFuZCBjb21mb3J0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYmVmb3JlIENpbmVhcyB3YXMgZG9uZSwgRmFicmljaXVzIGNyaWVkIG91dCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj4wIEhlcmN1bGVzLCBtYXkgUHlycmh1cyBhbmQgdGhlIFNhbW5pdGVzIGNoZXJpc2ggdGhlc2UgZG9jdHJpbmVzLCBhcyBsb25nIGFzIHRoZXkgYXJlIGF0IHdhciB3aXRoIHVzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgYW4gZW1iYXNzeSBjYW1lIGZyb20gdGhlIFJvbWFucyB0byB0cmVhdCBhYm91dCB0aGUgcHJpc29uZXJzIHRoYXQgaGFkIGJlZW4gdGFrZW4uIFRoZSBlbWJhc3N5IHdhcyBoZWFkZWQgYnkgQ2FpdXMgRmFicmljaXVzLCB3aG8sIGFzIENpbmVhcyByZXBvcnRlZCwgd2FzIGhlbGQgaW4gaGlnaGVzdCBlc3RlZW0gYXQgUm9tZSBhcyBhbiBob25vdXJhYmxlIG1hbiBhbmQgZ29vZCBzb2xkaWVyLCBidXQgd2FzIGlub3JkaW5hdGVseSBwb29yLiBUbyB0aGlzIG1hbiwgdGhlbiwgUHlycmh1cyBwcml2YXRlbHkgc2hvd2VkIGtpbmRuZXNzIGFuZCB0cmllZCB0byBpbmR1Y2UgaGltIHRvIGFjY2VwdCBnb2xkLCBub3QgZm9yIGFueSBiYXNlIHB1cnBvc2UsIGluZGVlZCwgYnV0IGNhbGxpbmcgaXQgYSBtYXJrIG9mIGZyaWVuZHNoaXAgYW5kIGhvc3BpdGFsaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBGYWJyaWNpdXMgcmVqZWN0ZWQgdGhlIGdvbGQsIGFuZCBmb3IgdGhhdCBkYXkgUHlycmh1cyBsZXQgaGltIGFsb25lOyBvbiB0aGUgZm9sbG93aW5nIGRheSwgaG93ZXZlciwgd2lzaGluZyB0byBmcmlnaHRlbiBhIG1hbiB3aG8gaGFkIG5vdCB5ZXQgc2VlbiBhbiBlbGVwaGFudCwgaGUgb3JkZXJlZCB0aGUgbGFyZ2VzdCBvZiB0aGVzZSBhbmltYWxzIHRvIGJlIHN0YXRpb25lZCBiZWhpbmQgYSBoYW5naW5nIGluIGZyb250IG9mIHdoaWNoIHRoZXkgc3Rvb2QgY29udmVyc2luZyB0b2dldGhlci4gVGhpcyB3YXMgZG9uZTsgYW5kIGF0IGEgZ2l2ZW4gc2lnbmFsIHRoZSBoYW5naW5nIHdhcyBkcmF3biBhc2lkZSwgYW5kIHRoZSBhbmltYWwgc3VkZGVubHkgcmFpc2VkIGhpcyB0cnVuaywgaGVsZCBpdCBvdmVyIHRoZSBoZWFkIG9mIEZhYnJpY2l1cywgYW5kIGVtaXR0ZWQgYSBoYXJzaCBhbmQgZnJpZ2h0ZnVsIGNyeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBGYWJyaWNpdXMgY2FsbWx5IHR1cm5lZCBhbmQgc2FpZCB3aXRoIGEgc21pbGUgdG8gUHlycmh1czogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdXIgZ29sZCBtYWRlIG5vIGltcHJlc3Npb24gb24gbWUgeWVzdGVyZGF5LCBuZWl0aGVyIGRvZXMgeW91ciBiZWFzdCB0by1kYXkuPC9xPiBBZ2FpbiwgYXQgc3VwcGVyLCB3aGVyZSBhbGwgc29ydHMgb2YgdG9waWNzIHdlcmUgZGlzY3Vzc2VkLCBhbmQgcGFydGljdWxhcmx5IHRoYXQgb2YgR3JlZWNlIGFuZCBoZXIgcGhpbG9zb3BoZXJzLCBDaW5lYXMgaGFwcGVuZWQgc29tZWhvdyB0byBtZW50aW9uIEVwaWN1cnVzLCBhbmQgc2V0IGZvcnRoIHRoZSBkb2N0cmluZXMgb2YgdGhhdCBzY2hvb2wgY29uY2VybmluZyB0aGUgZ29kcywgY2l2aWwgZ292ZXJubWVudCwgYW5kIHRoZSBoaWdoZXN0IGdvb2QsIGV4cGxhaW5pbmcgdGhhdCB0aGV5IG1hZGUgcGxlYXN1cmUgdGhlIGhpZ2hlc3QgZ29vZCwgYnV0IHdvdWxkIGhhdmUgbm90aGluZyB0byBkbyB3aXRoIGNpdmlsIGdvdmVybm1lbnQgb24gdGhlIGdyb3VuZCB0aGF0IGl0IHdhcyBpbmp1cmlvdXMgYW5kIHRoZSBydWluIG9mIGZlbGljaXR5LCBhbmQgdGhhdCB0aGV5IHJlbW92ZWQgdGhlIERlaXR5IGFzIGZhciBhcyBwb3NzaWJsZSBmcm9tIGZlZWxpbmdzIG9mIGtpbmRuZXNzIG9yIGFuZ2VyIG9yIGNvbmNlcm4gZm9yIHVzLCBpbnRvIGEgbGlmZSB0aGF0IGtuZXcgbm8gY2FyZSBhbmQgd2FzIGZpbGxlZCB3aXRoIGVhc2UgYW5kIGNvbWZvcnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBiZWZvcmUgQ2luZWFzIHdhcyBkb25lLCBGYWJyaWNpdXMgY3JpZWQgb3V0IGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+MCBIZXJjdWxlcywgbWF5IFB5cnJodXMgYW5kIHRoZSBTYW1uaXRlcyBjaGVyaXNoIHRoZXNlIGRvY3RyaW5lcywgYXMgbG9uZyBhcyB0aGV5IGFyZSBhdCB3YXIgd2l0aCB1cy48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGh1cyBQeXJyaHVzIHdhcyBsZWQgdG8gYWRtaXJlIHRoZSBoaWdoIHNwaXJpdCBhbmQgY2hhcmFjdGVyIG9mIHRoZSBtYW4sIGFuZCB3YXMgYWxsIHRoZSBtb3JlIGVhZ2VyIHRvIGhhdmUgZnJpZW5kc2hpcCB3aXRoIGhpcyBjaXR5IGluc3RlYWQgb2Ygd2FnaW5nIHdhciBhZ2FpbnN0IGl0OyBoZSBldmVuIHByaXZhdGVseSBpbnZpdGVkIGhpbSwgaW4gY2FzZSBoZSBicm91Z2h0IGFib3V0IHRoZSBzZXR0bGVtZW50LCB0byBmb2xsb3cgaGlzIGZvcnR1bmVzIGFuZCBzaGFyZSBoaXMgbGlmZSBhcyB0aGUgZmlyc3QgYW5kIGZvcmVtb3N0IG9mIGFsbCBoaXMgY29tcGFuaW9ucyBhbmQgZ2VuZXJhbHMuIEJ1dCBGYWJyaWNpdXMsIGFzIHdlIGFyZSB0b2xkLCBzYWlkIHF1aWV0bHkgdG8gaGltOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TmF5LCAwIEtpbmcsIHRoaXMgd291bGQgbm90IGJlIHRvIHRoeSBhZHZhbnRhZ2U7IGZvciB0aGUgdmVyeSBtZW4gd2hvIG5vdyBhZG1pcmUgYW5kIGhvbm91ciB0aGVlLCBpZiB0aGV5IHNob3VsZCBiZWNvbWUgYWNxdWFpbnRlZCB3aXRoIG1lLCB3b3VsZCBwcmVmZXIgdG8gaGF2ZSBtZSBhcyB0aGVpciBraW5nIHJhdGhlciB0aGFuIHRoZWUuPC9xPiBTdWNoIGEgbWFuIHdhcyBGYWJyaWNpdXMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIFB5cnJodXMgZGlkIG5vdCByZWNlaXZlIHRoZSBzcGVlY2ggd2l0aCBhbmdlciBvciBsaWtlIGEgdHlyYW50LCBidXQgYWN0dWFsbHkgcmVwb3J0ZWQgdG8gaGlzIGZyaWVuZHMgdGhlIG1hZ25hbmltaXR5IG9mIEZhYnJpY2l1cywgYW5kIGVudHJ1c3RlZCBoaXMgcHJpc29uZXJzIG9mIHdhciB0byBoaW0gYWxvbmUsIG9uIGNvbmRpdGlvbiB0aGF0LCBpbiBjYXNlIHRoZSBzZW5hdGUgc2hvdWxkIG5vdCB2b3RlIGZvciB0aGUgcGVhY2UsIHRoZXkgc2hvdWxkIGJlIHNlbnQgYmFjayBhZ2FpbiB0byBoaW0sIHRob3VnaCB0aGV5IG1pZ2h0IGZpcnN0IGdyZWV0IHRoZWlyIHJlbGF0aXZlcyBhbmQgY2VsZWJyYXRlIHRoZSBmZXN0aXZhbCBvZiBTYXR1cm4uIEFuZCB0aGV5IHdlcmUgc28gc2VudCBiYWNrIGFmdGVyIHRoZSBmZXN0aXZhbCwgdGhlIHNlbmF0ZSBoYXZpbmcgdm90ZWQgYSBwZW5hbHR5IG9mIGRlYXRoIGZvciBhbnkgdGhhdCBzdGF5ZWQgYmVoaW5kLgoJCQk8L3A+CiAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TmF5LCAwIEtpbmcsIHRoaXMgd291bGQgbm90IGJlIHRvIHRoeSBhZHZhbnRhZ2U7IGZvciB0aGUgdmVyeSBtZW4gd2hvIG5vdyBhZG1pcmUgYW5kIGhvbm91ciB0aGVlLCBpZiB0aGV5IHNob3VsZCBiZWNvbWUgYWNxdWFpbnRlZCB3aXRoIG1lLCB3b3VsZCBwcmVmZXIgdG8gaGF2ZSBtZSBhcyB0aGVpciBraW5nIHJhdGhlciB0aGFuIHRoZWUuPC9xPiBTdWNoIGEgbWFuIHdhcyBGYWJyaWNpdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQeXJyaHVzIGRpZCBub3QgcmVjZWl2ZSB0aGUgc3BlZWNoIHdpdGggYW5nZXIgb3IgbGlrZSBhIHR5cmFudCwgYnV0IGFjdHVhbGx5IHJlcG9ydGVkIHRvIGhpcyBmcmllbmRzIHRoZSBtYWduYW5pbWl0eSBvZiBGYWJyaWNpdXMsIGFuZCBlbnRydXN0ZWQgaGlzIHByaXNvbmVycyBvZiB3YXIgdG8gaGltIGFsb25lLCBvbiBjb25kaXRpb24gdGhhdCwgaW4gY2FzZSB0aGUgc2VuYXRlIHNob3VsZCBub3Qgdm90ZSBmb3IgdGhlIHBlYWNlLCB0aGV5IHNob3VsZCBiZSBzZW50IGJhY2sgYWdhaW4gdG8gaGltLCB0aG91Z2ggdGhleSBtaWdodCBmaXJzdCBncmVldCB0aGVpciByZWxhdGl2ZXMgYW5kIGNlbGVicmF0ZSB0aGUgZmVzdGl2YWwgb2YgU2F0dXJuLiBBbmQgdGhleSB3ZXJlIHNvIHNlbnQgYmFjayBhZnRlciB0aGUgZmVzdGl2YWwsIHRoZSBzZW5hdGUgaGF2aW5nIHZvdGVkIGEgcGVuYWx0eSBvZiBkZWF0aCBmb3IgYW55IHRoYXQgc3RheWVkIGJlaGluZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgYW5kIHdoZW4gRmFicmljaXVzIGhhZCBhc3N1bWVkIHRoZSBjb25zdWxzaGlwLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBjaHJvbm9sb2d5IG9mIHRoZSBzdG9yeSBpcyBhdCBmYXVsdCBoZXJlLiBGYWJyaWNpdXMgYW5kIEFlbWlsaXVzIHdlcmUgY29uc3VscyBpbiAyNzgsIHRoZSB5ZWFyIGFmdGVyIHRoZSBiYXR0bGUgYXQgQXNjdWx1bSBkZXNjcmliZWQgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB5cnJoLiAyMS41IiB2YWxpZD0ieWVzIj7Cp8KnIDUgZmY8L2JpYmw+Ljwvbm90ZT4gYSBtYW4gY2FtZSBpbnRvIGhpcyBjYW1wIHdpdGggYSBsZXR0ZXIgZm9yIGhpbS4gVGhlIGxldHRlciBoYWQgYmVlbiB3cml0dGVuIGJ5IHRoZSBwaHlzaWNpYW4gb2YgUHlycmh1cywgd2hvIHByb21pc2VkIHRoYXQgaGUgd291bGQgdGFrZSB0aGUga2luZyBvZmYgYnkgcG9pc29uLCBwcm92aWRlZCB0aGF0IHRoZSBSb21hbnMgd291bGQgYWdyZWUgdG8gcmV3YXJkIGhpbSBmb3IgcHV0dGluZyBhbiBlbmQgdG8gdGhlIHdhciB3aXRob3V0IGZ1cnRoZXIgaGF6YXJkIG9uIHRoZWlyIHBhcnQuIEJ1dCBGYWJyaWNpdXMsIHdobyB3YXMgaW5kaWduYW50IGF0IHRoZSBpbmlxdWl0eSBvZiB0aGUgbWFuLCBhbmQgaGFkIGRpc3Bvc2VkIGhpcyBjb2xsZWFndWUgdG8gZmVlbCBsaWtld2lzZSwgc2VudCBhIGxldHRlciB0byBQeXJyaHVzIHdpdGggYWxsIHNwZWVkIHVyZ2luZyBoaW0gdG8gYmUgb24gaGlzIGd1YXJkIGFnYWluc3QgdGhlIHBsb3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsZXR0ZXIgcmFuIGFzIGZvbGxvd3M6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2FpdXMgRmFicmljaXVzIGFuZCBRdWludHVzIEFlbWlsaXVzLCBjb25zdWxzIG9mIFJvbWUsIHRvIEtpbmcgUHlycmh1cywgaGVhbHRoIGFuZCBoYXBwaW5lc3MuIEl0IHdvdWxkIGFwcGVhciB0aGF0IHRob3UgYXJ0IGEgZ29vZCBqdWRnZSBuZWl0aGVyIG9mIGZyaWVuZHMgbm9yIG9mIGVuZW1pZXMuIFRob3Ugd2lsdCBzZWUsIHdoZW4gdGhvdSBoYXN0IHJlYWQgdGhlIGxldHRlciB3aGljaCB3ZSBzZW5kLCB0aGF0IHRoZSBtZW4gd2l0aCB3aG9tIHRob3UgYXJ0IGF0IHdhciBhcmUgaG9ub3VyYWJsZSBhbmQganVzdCwgYnV0IHRoYXQgdGhvc2Ugd2hvbSB0aG91IHRydXN0ZXN0IGFyZSB1bmp1c3QgYW5kIGJhc2UuIAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW5kZWVkIHdlIGRvIG5vdCBnaXZlIHRoZWUgdGhpcyBpbmZvcm1hdGlvbiBvdXQgb2YgcmVnYXJkIGZvciB0aGVlLCBidXQgaW4gb3JkZXIgdGhhdCB0aHkgcnVpbiBtYXkgbm90IGJyaW5nIGluZmFteSB1cG9uIHVzLCBhbmQgdGhhdCBtZW4gbWF5IG5vdCBzYXkgb2YgdXMgdGhhdCB3ZSBicm91Z2h0IHRoZSB3YXIgdG8gYW4gZW5kIGJ5IHRyZWFjaGVyeSBiZWNhdXNlIHdlIHdlcmUgdW5hYmxlIHRvIGRvIHNvIGJ5IHZhbG91ci48L3E+IFdoZW4gUHlycmh1cyBoYWQgcmVhZCB0aGlzIGxldHRlciBhbmQgZ290IHByb29mIG9mIHRoZSBwbG90IGFnYWluc3QgaGlzIGxpZmUsIGhlIHB1bmlzaGVkIHRoZSBwaHlzaWNpYW4sIGFuZCBhcyBhIHJlcXVpdGFsIHRvIEZhYnJpY2l1cyBhbmQgdGhlIFJvbWFucyBtYWRlIHRoZW0gYSBwcmVzZW50IG9mIGhpcyBwcmlzb25lcnMgb2Ygd2FyLCBhbmQgb25jZSBtb3JlIHNlbnQgQ2luZWFzIHRvIG5lZ290aWF0ZSBhIHBlYWNlIGZvciBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgUm9tYW5zIHdvdWxkIG5vdCBjb25zZW50IHRvIHJlY2VpdmUgdGhlIG1lbiBmb3Igbm90aGluZywgZWl0aGVyIGFzIGEgZmF2b3VyIGZyb20gYW4gZW5lbXksIG9yIGFzIGEgcmV3YXJkIGZvciBub3QgY29tbWl0dGluZyBpbmlxdWl0eSBhZ2FpbnN0IGhpbSwgYW5kIHRoZXJlZm9yZSByZWxlYXNlZCBmb3IgUHlycmh1cyBhbiBlcXVhbCBudW1iZXIgb2YgVGFyZW50aW5lcyBhbmQgU2Ftbml0ZXMgd2hvbSB0aGV5IGhhZCB0YWtlbjsgb24gdGhlIHN1YmplY3Qgb2YgZnJpZW5kc2hpcCBhbmQgcGVhY2UsIGhvd2V2ZXIsIHRoZXkgZGVjbGFyZWQgdGhleSB3b3VsZCBhbGxvdyBub3RoaW5nIHRvIGJlIHNhaWQgdW50aWwgUHlycmh1cyBoYWQgdGFrZW4gaGlzIGFybXMgYW5kIGhpcyBhcm15IG91dCBvZiBJdGFseSBhbmQgc2FpbGVkIGJhY2sgdG8gRXBlaXJ1cyBvbiB0aGUgc2hpcHMgdGhhdCBicm91Z2h0IGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgYW5kIHdoZW4gRmFicmljaXVzIGhhZCBhc3N1bWVkIHRoZSBjb25zdWxzaGlwLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGNocm9ub2xvZ3kgb2YgdGhlIHN0b3J5IGlzIGF0IGZhdWx0IGhlcmUuIEZhYnJpY2l1cyBhbmQgQWVtaWxpdXMgd2VyZSBjb25zdWxzIGluIDI3OCwgdGhlIHllYXIgYWZ0ZXIgdGhlIGJhdHRsZSBhdCBBc2N1bHVtIGRlc2NyaWJlZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQeXJyaC4gMjEuNSIgdmFsaWQ9InllcyI+wqfCpyA1IGZmPC9iaWJsPi48L25vdGU+IGEgbWFuIGNhbWUgaW50byBoaXMgY2FtcCB3aXRoIGEgbGV0dGVyIGZvciBoaW0uIFRoZSBsZXR0ZXIgaGFkIGJlZW4gd3JpdHRlbiBieSB0aGUgcGh5c2ljaWFuIG9mIFB5cnJodXMsIHdobyBwcm9taXNlZCB0aGF0IGhlIHdvdWxkIHRha2UgdGhlIGtpbmcgb2ZmIGJ5IHBvaXNvbiwgcHJvdmlkZWQgdGhhdCB0aGUgUm9tYW5zIHdvdWxkIGFncmVlIHRvIHJld2FyZCBoaW0gZm9yIHB1dHRpbmcgYW4gZW5kIHRvIHRoZSB3YXIgd2l0aG91dCBmdXJ0aGVyIGhhemFyZCBvbiB0aGVpciBwYXJ0LiBCdXQgRmFicmljaXVzLCB3aG8gd2FzIGluZGlnbmFudCBhdCB0aGUgaW5pcXVpdHkgb2YgdGhlIG1hbiwgYW5kIGhhZCBkaXNwb3NlZCBoaXMgY29sbGVhZ3VlIHRvIGZlZWwgbGlrZXdpc2UsIHNlbnQgYSBsZXR0ZXIgdG8gUHlycmh1cyB3aXRoIGFsbCBzcGVlZCB1cmdpbmcgaGltIHRvIGJlIG9uIGhpcyBndWFyZCBhZ2FpbnN0IHRoZSBwbG90LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB5cnJoLiAyMS41IiB2YWxpZD0ieWVzIj7Cp8KnIDUgZmY8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsZXR0ZXIgcmFuIGFzIGZvbGxvd3M6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYWl1cyBGYWJyaWNpdXMgYW5kIFF1aW50dXMgQWVtaWxpdXMsIGNvbnN1bHMgb2YgUm9tZSwgdG8gS2luZyBQeXJyaHVzLCBoZWFsdGggYW5kIGhhcHBpbmVzcy4gSXQgd291bGQgYXBwZWFyIHRoYXQgdGhvdSBhcnQgYSBnb29kIGp1ZGdlIG5laXRoZXIgb2YgZnJpZW5kcyBub3Igb2YgZW5lbWllcy4gVGhvdSB3aWx0IHNlZSwgd2hlbiB0aG91IGhhc3QgcmVhZCB0aGUgbGV0dGVyIHdoaWNoIHdlIHNlbmQsIHRoYXQgdGhlIG1lbiB3aXRoIHdob20gdGhvdSBhcnQgYXQgd2FyIGFyZSBob25vdXJhYmxlIGFuZCBqdXN0LCBidXQgdGhhdCB0aG9zZSB3aG9tIHRob3UgdHJ1c3Rlc3QgYXJlIHVuanVzdCBhbmQgYmFzZS4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluZGVlZCB3ZSBkbyBub3QgZ2l2ZSB0aGVlIHRoaXMgaW5mb3JtYXRpb24gb3V0IG9mIHJlZ2FyZCBmb3IgdGhlZSwgYnV0IGluIG9yZGVyIHRoYXQgdGh5IHJ1aW4gbWF5IG5vdCBicmluZyBpbmZhbXkgdXBvbiB1cywgYW5kIHRoYXQgbWVuIG1heSBub3Qgc2F5IG9mIHVzIHRoYXQgd2UgYnJvdWdodCB0aGUgd2FyIHRvIGFuIGVuZCBieSB0cmVhY2hlcnkgYmVjYXVzZSB3ZSB3ZXJlIHVuYWJsZSB0byBkbyBzbyBieSB2YWxvdXIuPC9xPiBXaGVuIFB5cnJodXMgaGFkIHJlYWQgdGhpcyBsZXR0ZXIgYW5kIGdvdCBwcm9vZiBvZiB0aGUgcGxvdCBhZ2FpbnN0IGhpcyBsaWZlLCBoZSBwdW5pc2hlZCB0aGUgcGh5c2ljaWFuLCBhbmQgYXMgYSByZXF1aXRhbCB0byBGYWJyaWNpdXMgYW5kIHRoZSBSb21hbnMgbWFkZSB0aGVtIGEgcHJlc2VudCBvZiBoaXMgcHJpc29uZXJzIG9mIHdhciwgYW5kIG9uY2UgbW9yZSBzZW50IENpbmVhcyB0byBuZWdvdGlhdGUgYSBwZWFjZSBmb3IgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgd2UgZG8gbm90IGdpdmUgdGhlZSB0aGlzIGluZm9ybWF0aW9uIG91dCBvZiByZWdhcmQgZm9yIHRoZWUsIGJ1dCBpbiBvcmRlciB0aGF0IHRoeSBydWluIG1heSBub3QgYnJpbmcgaW5mYW15IHVwb24gdXMsIGFuZCB0aGF0IG1lbiBtYXkgbm90IHNheSBvZiB1cyB0aGF0IHdlIGJyb3VnaHQgdGhlIHdhciB0byBhbiBlbmQgYnkgdHJlYWNoZXJ5IGJlY2F1c2Ugd2Ugd2VyZSB1bmFibGUgdG8gZG8gc28gYnkgdmFsb3VyLjwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgUm9tYW5zIHdvdWxkIG5vdCBjb25zZW50IHRvIHJlY2VpdmUgdGhlIG1lbiBmb3Igbm90aGluZywgZWl0aGVyIGFzIGEgZmF2b3VyIGZyb20gYW4gZW5lbXksIG9yIGFzIGEgcmV3YXJkIGZvciBub3QgY29tbWl0dGluZyBpbmlxdWl0eSBhZ2FpbnN0IGhpbSwgYW5kIHRoZXJlZm9yZSByZWxlYXNlZCBmb3IgUHlycmh1cyBhbiBlcXVhbCBudW1iZXIgb2YgVGFyZW50aW5lcyBhbmQgU2Ftbml0ZXMgd2hvbSB0aGV5IGhhZCB0YWtlbjsgb24gdGhlIHN1YmplY3Qgb2YgZnJpZW5kc2hpcCBhbmQgcGVhY2UsIGhvd2V2ZXIsIHRoZXkgZGVjbGFyZWQgdGhleSB3b3VsZCBhbGxvdyBub3RoaW5nIHRvIGJlIHNhaWQgdW50aWwgUHlycmh1cyBoYWQgdGFrZW4gaGlzIGFybXMgYW5kIGhpcyBhcm15IG91dCBvZiBJdGFseSBhbmQgc2FpbGVkIGJhY2sgdG8gRXBlaXJ1cyBvbiB0aGUgc2hpcHMgdGhhdCBicm91Z2h0IGhpbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Q29uc2VxdWVudGx5LCBQeXJyaHVzIGZvdW5kIGhpbXNlbGYgb2JsaWdlZCB0byBmaWdodCBhbm90aGVyIGJhdHRsZSwgYW5kIGFmdGVyIHJlY3VwZXJhdGluZyBoaXMgYXJteSBoZSBtYXJjaGVkIHRvIHRoZSBjaXR5IG9mIEFzY3VsdW0sIHdoZXJlIGhlIGVuZ2FnZWQgdGhlIFJvbWFucy4gSGVyZSwgaG93ZXZlciwgaGUgd2FzIGZvcmNlZCBpbnRvIHJlZ2lvbnMgd2hlcmUgaGlzIGNhdmFscnkgY291bGQgbm90IG9wZXJhdGUsIGFuZCB1cG9uIGEgcml2ZXIgd2l0aCBzd2lmdCBjdXJyZW50IGFuZCB3b29kZWQgYmFua3MsIHNvIHRoYXQgaGlzIGVsZXBoYW50cyBjb3VsZCBub3QgY2hhcmdlIGFuZCBlbmdhZ2UgdGhlIGVuZW15J3MgcGhhbGFueC4gVGhlcmVmb3JlLCBhZnRlciBtYW55IGhhZCBiZWVuIHdvdW5kZWQgYW5kIHNsYWluLCBmb3IgdGhlIHRpbWUgYmVpbmcgdGhlIHN0cnVnZ2xlIHdhcyBlbmRlZCBieSB0aGUgY29taW5nIG9mIG5pZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb24gdGhlIG5leHQgZGF5LCBkZXNpZ25pbmcgdG8gZmlnaHQgdGhlIGJhdHRsZSBvbiBsZXZlbCBncm91bmQsIGFuZCB0byBicmluZyBoaXMgZWxlcGhhbnRzIHRvIGJlYXIgdXBvbiB0aGUgcmFua3Mgb2YgdGhlIGVuZW15LCBQeXJyaHVzIG9jY3VwaWVkIGJldGltZXMgdGhlIHVuZmF2b3VyYWJsZSBwYXJ0cyBvZiB0aGUgZmllbGQgd2l0aCBhIGRldGFjaG1lbnQgb2YgaGlzIHRyb29wczsgdGhlbiBoZSBwdXQgZ3JlYXQgbnVtYmVycyBvZiBzbGluZ2VycyBhbmQgYXJjaGVycyBpbiB0aGUgc3BhY2VzIGJldHdlZW4gdGhlIGVsZXBoYW50cyBhbmQgbGVkIGhpcyBmb3JjZXMgdG8gdGhlIGF0dGFjayBpbiBkZW5zZSBhcnJheSBhbmQgd2l0aCBhIG1pZ2h0eSBpbXBldHVzLiBTbyB0aGUgUm9tYW5zLCBoYXZpbmcgbm8gb3Bwb3J0dW5pdHkgZm9yIHNpZGVsb25nIHNoaWZ0cyBhbmQgY291bnRlci1tb3ZlbWVudHMsIGFzIG9uIHRoZSBwcmV2aW91cyBkYXksIHdlcmUgb2JsaWdlZCB0byBlbmdhZ2Ugb24gbGV2ZWwgZ3JvdW5kIGFuZCBmcm9udCB0byBmcm9udDsgYW5kIGJlaW5nIGFueGlvdXMgdG8gcmVwdWxzZSB0aGUgZW5lbXkncyBtZW4tYXQtYXJtcyBiZWZvcmUgdGhlaXIgZWxlcGhhbnRzIGNhbWUgdXAsIHRoZXkgZm91Z2h0IGZpZXJjZWx5IHdpdGggdGhlaXIgc3dvcmRzIGFnYWluc3QgdGhlIE1hY2Vkb25pYW4gc3BlYXJzLCByZWNrbGVzcyBvZiB0aGVpciBsaXZlcyBhbmQgdGhpbmtpbmcgb25seSBvZiB3b3VuZGluZyBhbmQgc2xheWluZywgd2hpbGUgY2FyaW5nIG5hdWdodCBmb3Igd2hhdCB0aGV5IHN1ZmZlcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBhIGxvbmcgdGltZSwgaG93ZXZlciwgYXMgd2UgYXJlIHRvbGQsIHRoZXkgYmVnYW4gdG8gYmUgZHJpdmVuIGJhY2sgYXQgdGhlIHBvaW50IHdoZXJlIFB5cnJodXMgaGltc2VsZiB3YXMgcHJlc3NpbmcgaGFyZCB1cG9uIGhpcyBvcHBvbmVudHM7IGJ1dCB0aGUgZ3JlYXRlc3QgaGF2b2Mgd2FzIHdyb3VnaHQgYnkgdGhlIGZ1cmlvdXMgc3RyZW5ndGggb2YgdGhlIGVsZXBoYW50cywgc2luY2UgdGhlIHZhbG91ciBvZiB0aGUgUm9tYW5zIHdhcyBvZiBubyBhdmFpbCBpbiBmaWdodGluZyB0aGVtLCBidXQgdGhleSBmZWx0IHRoYXQgdGhleSBtdXN0IHlpZWxkIGJlZm9yZSB0aGVtIGFzIGJlZm9yZSBhbiBvbnJ1c2hpbmcgYmlsbG93IG9yIGEgY3Jhc2hpbmcgZWFydGhxdWFrZSwgYW5kIG5vdCBzdGFuZCB0aGVpciBncm91bmQgb25seSB0byBkaWUgaW4gdmFpbiwgb3Igc3VmZmVyIGFsbCB0aGF0IGlzIG1vc3QgZ3JpZXZvdXMgd2l0aG91dCBkb2luZyBhbnkgZ29vZCBhdCBhbGwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNvbnNlcXVlbnRseSwgUHlycmh1cyBmb3VuZCBoaW1zZWxmIG9ibGlnZWQgdG8gZmlnaHQgYW5vdGhlciBiYXR0bGUsIGFuZCBhZnRlciByZWN1cGVyYXRpbmcgaGlzIGFybXkgaGUgbWFyY2hlZCB0byB0aGUgY2l0eSBvZiBBc2N1bHVtLCB3aGVyZSBoZSBlbmdhZ2VkIHRoZSBSb21hbnMuIEhlcmUsIGhvd2V2ZXIsIGhlIHdhcyBmb3JjZWQgaW50byByZWdpb25zIHdoZXJlIGhpcyBjYXZhbHJ5IGNvdWxkIG5vdCBvcGVyYXRlLCBhbmQgdXBvbiBhIHJpdmVyIHdpdGggc3dpZnQgY3VycmVudCBhbmQgd29vZGVkIGJhbmtzLCBzbyB0aGF0IGhpcyBlbGVwaGFudHMgY291bGQgbm90IGNoYXJnZSBhbmQgZW5nYWdlIHRoZSBlbmVteSdzIHBoYWxhbnguIFRoZXJlZm9yZSwgYWZ0ZXIgbWFueSBoYWQgYmVlbiB3b3VuZGVkIGFuZCBzbGFpbiwgZm9yIHRoZSB0aW1lIGJlaW5nIHRoZSBzdHJ1Z2dsZSB3YXMgZW5kZWQgYnkgdGhlIGNvbWluZyBvZiBuaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvbiB0aGUgbmV4dCBkYXksIGRlc2lnbmluZyB0byBmaWdodCB0aGUgYmF0dGxlIG9uIGxldmVsIGdyb3VuZCwgYW5kIHRvIGJyaW5nIGhpcyBlbGVwaGFudHMgdG8gYmVhciB1cG9uIHRoZSByYW5rcyBvZiB0aGUgZW5lbXksIFB5cnJodXMgb2NjdXBpZWQgYmV0aW1lcyB0aGUgdW5mYXZvdXJhYmxlIHBhcnRzIG9mIHRoZSBmaWVsZCB3aXRoIGEgZGV0YWNobWVudCBvZiBoaXMgdHJvb3BzOyB0aGVuIGhlIHB1dCBncmVhdCBudW1iZXJzIG9mIHNsaW5nZXJzIGFuZCBhcmNoZXJzIGluIHRoZSBzcGFjZXMgYmV0d2VlbiB0aGUgZWxlcGhhbnRzIGFuZCBsZWQgaGlzIGZvcmNlcyB0byB0aGUgYXR0YWNrIGluIGRlbnNlIGFycmF5IGFuZCB3aXRoIGEgbWlnaHR5IGltcGV0dXMuIFNvIHRoZSBSb21hbnMsIGhhdmluZyBubyBvcHBvcnR1bml0eSBmb3Igc2lkZWxvbmcgc2hpZnRzIGFuZCBjb3VudGVyLW1vdmVtZW50cywgYXMgb24gdGhlIHByZXZpb3VzIGRheSwgd2VyZSBvYmxpZ2VkIHRvIGVuZ2FnZSBvbiBsZXZlbCBncm91bmQgYW5kIGZyb250IHRvIGZyb250OyBhbmQgYmVpbmcgYW54aW91cyB0byByZXB1bHNlIHRoZSBlbmVteSdzIG1lbi1hdC1hcm1zIGJlZm9yZSB0aGVpciBlbGVwaGFudHMgY2FtZSB1cCwgdGhleSBmb3VnaHQgZmllcmNlbHkgd2l0aCB0aGVpciBzd29yZHMgYWdhaW5zdCB0aGUgTWFjZWRvbmlhbiBzcGVhcnMsIHJlY2tsZXNzIG9mIHRoZWlyIGxpdmVzIGFuZCB0aGlua2luZyBvbmx5IG9mIHdvdW5kaW5nIGFuZCBzbGF5aW5nLCB3aGlsZSBjYXJpbmcgbmF1Z2h0IGZvciB3aGF0IHRoZXkgc3VmZmVyZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGEgbG9uZyB0aW1lLCBob3dldmVyLCBhcyB3ZSBhcmUgdG9sZCwgdGhleSBiZWdhbiB0byBiZSBkcml2ZW4gYmFjayBhdCB0aGUgcG9pbnQgd2hlcmUgUHlycmh1cyBoaW1zZWxmIHdhcyBwcmVzc2luZyBoYXJkIHVwb24gaGlzIG9wcG9uZW50czsgYnV0IHRoZSBncmVhdGVzdCBoYXZvYyB3YXMgd3JvdWdodCBieSB0aGUgZnVyaW91cyBzdHJlbmd0aCBvZiB0aGUgZWxlcGhhbnRzLCBzaW5jZSB0aGUgdmFsb3VyIG9mIHRoZSBSb21hbnMgd2FzIG9mIG5vIGF2YWlsIGluIGZpZ2h0aW5nIHRoZW0sIGJ1dCB0aGV5IGZlbHQgdGhhdCB0aGV5IG11c3QgeWllbGQgYmVmb3JlIHRoZW0gYXMgYmVmb3JlIGFuIG9ucnVzaGluZyBiaWxsb3cgb3IgYSBjcmFzaGluZyBlYXJ0aHF1YWtlLCBhbmQgbm90IHN0YW5kIHRoZWlyIGdyb3VuZCBvbmx5IHRvIGRpZSBpbiB2YWluLCBvciBzdWZmZXIgYWxsIHRoYXQgaXMgbW9zdCBncmlldm91cyB3aXRob3V0IGRvaW5nIGFueSBnb29kIGF0IGFsbC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgYSBzaG9ydCBmbGlnaHQgdGhlIFJvbWFucyByZWFjaGVkIHRoZWlyIGNhbXAsIHdpdGggYSBsb3NzIG9mIHNpeCB0aG91c2FuZCBtZW4sIGFjY29yZGluZyB0byBIaWVyb255bXVzLCB3aG8gYWxzbyBzYXlzIHRoYXQgb24gdGhlIHNpZGUgb2YgUHlycmh1cywgYWNjb3JkaW5nIHRvIHRoZSBraW5nJ3Mgb3duIGNvbW1lbnRhcmllcywgdGhpcnR5LWZpdmUgaHVuZHJlZCBhbmQgZml2ZSB3ZXJlIGtpbGxlZC4gCgkJCQk8bWlsZXN0b25lIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+RGlvbnlzaXVzLCBob3dldmVyLCBtYWtlcyBubyBtZW50aW9uIG9mIHR3byBiYXR0bGVzIGF0IEFzY3VsdW0sIG5vciBvZiBhbiBhZG1pdHRlZCBkZWZlYXQgb2YgdGhlIFJvbWFucywgYnV0IHNheXMgdGhhdCB0aGUgdHdvIGFybWllcyBmb3VnaHQgb25jZSBmb3IgYWxsIHVudGlsIHN1bnNldCBhbmQgdGhlbiBhdCBsYXN0IHNlcGFyYXRlZDsgUHlycmh1cywgaGUgc2F5cywgd2FzIHdvdW5kZWQgaW4gdGhlIGFybSBieSBhIGphdmVsaW4sIGFuZCBhbHNvIGhhZCBoaXMgYmFnZ2FnZSBwbHVuZGVyZWQgYnkgdGhlIERhdW5pYW5zOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF1eGlsaWFyaWVzIG9mIHRoZSBSb21hbnMgZnJvbSBBcnBpbnVtIGluIEFwdWxpYS48L25vdGU+IGFuZCB0aGVyZSBmZWxsLCBvbiB0aGUgc2lkZSBvZiBQeXJyaHVzIGFuZCBvbiB0aGF0IG9mIHRoZSBSb21hbnMsIG92ZXIgZmlmdGVlbiB0aG91c2FuZCBtZW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGEgc2hvcnQgZmxpZ2h0IHRoZSBSb21hbnMgcmVhY2hlZCB0aGVpciBjYW1wLCB3aXRoIGEgbG9zcyBvZiBzaXggdGhvdXNhbmQgbWVuLCBhY2NvcmRpbmcgdG8gSGllcm9ueW11cywgd2hvIGFsc28gc2F5cyB0aGF0IG9uIHRoZSBzaWRlIG9mIFB5cnJodXMsIGFjY29yZGluZyB0byB0aGUga2luZydzIG93biBjb21tZW50YXJpZXMsIHRoaXJ0eS1maXZlIGh1bmRyZWQgYW5kIGZpdmUgd2VyZSBraWxsZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkRpb255c2l1cywgaG93ZXZlciwgbWFrZXMgbm8gbWVudGlvbiBvZiB0d28gYmF0dGxlcyBhdCBBc2N1bHVtLCBub3Igb2YgYW4gYWRtaXR0ZWQgZGVmZWF0IG9mIHRoZSBSb21hbnMsIGJ1dCBzYXlzIHRoYXQgdGhlIHR3byBhcm1pZXMgZm91Z2h0IG9uY2UgZm9yIGFsbCB1bnRpbCBzdW5zZXQgYW5kIHRoZW4gYXQgbGFzdCBzZXBhcmF0ZWQ7IFB5cnJodXMsIGhlIHNheXMsIHdhcyB3b3VuZGVkIGluIHRoZSBhcm0gYnkgYSBqYXZlbGluLCBhbmQgYWxzbyBoYWQgaGlzIGJhZ2dhZ2UgcGx1bmRlcmVkIGJ5IHRoZSBEYXVuaWFuczs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF1eGlsaWFyaWVzIG9mIHRoZSBSb21hbnMgZnJvbSBBcnBpbnVtIGluIEFwdWxpYS48L25vdGU+IGFuZCB0aGVyZSBmZWxsLCBvbiB0aGUgc2lkZSBvZiBQeXJyaHVzIGFuZCBvbiB0aGF0IG9mIHRoZSBSb21hbnMsIG92ZXIgZmlmdGVlbiB0aG91c2FuZCBtZW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIHR3byBhcm1pZXMgc2VwYXJhdGVkOyBhbmQgd2UgYXJlIHRvbGQgdGhhdCBQeXJyaHVzIHNhaWQgdG8gb25lIHdobyB3YXMgY29uZ3JhdHVsYXRpbmcgaGltIG9uIGhpcyB2aWN0b3J5LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYgd2UgYXJlIHZpY3RvcmlvdXMgaW4gb25lIG1vcmUgYmF0dGxlIHdpdGggdGhlIFJvbWFucywgd2Ugc2hhbGwgYmUgdXR0ZXJseSBydWluZWQuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoYWQgbG9zdCBhIGdyZWF0IHBhcnQgb2YgdGhlIGZvcmNlcyB3aXRoIHdoaWNoIGhlIGNhbWUsIGFuZCBhbGwgaGlzIGZyaWVuZHMgYW5kIGdlbmVyYWxzIGV4Y2VwdCBhIGZldzsgbW9yZW92ZXIsIGhlIGhhZCBubyBvdGhlcnMgd2hvbSBoZSBjb3VsZCBzdW1tb24gZnJvbSBob21lLCBhbmQgaGUgc2F3IHRoYXQgaGlzIGFsbGllcyBpbiBJdGFseSB3ZXJlIGJlY29taW5nIGluZGlmZmVyZW50LCB3aGlsZSB0aGUgYXJteSBvZiB0aGUgUm9tYW5zLCBhcyBpZiBmcm9tIGEgZm91bnRhaW4gZ3VzaGluZyBmb3J0aCBpbmRvb3JzLCB3YXMgZWFzaWx5IGFuZCBzcGVlZGlseSBmaWxsZWQgdXAgYWdhaW4sIGFuZCB0aGV5IGRpZCBub3QgbG9zZSBjb3VyYWdlIGluIGRlZmVhdCwgbmF5LCB0aGVpciB3cmF0aCBnYXZlIHRoZW0gYWxsIHRoZSBtb3JlIHZpZ291ciBhbmQgZGV0ZXJtaW5hdGlvbiBmb3IgdGhlIHdhci4KCQkJPC9wPgogICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHdlIGFyZSB2aWN0b3Jpb3VzIGluIG9uZSBtb3JlIGJhdHRsZSB3aXRoIHRoZSBSb21hbnMsIHdlIHNoYWxsIGJlIHV0dGVybHkgcnVpbmVkLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgaGFkIGxvc3QgYSBncmVhdCBwYXJ0IG9mIHRoZSBmb3JjZXMgd2l0aCB3aGljaCBoZSBjYW1lLCBhbmQgYWxsIGhpcyBmcmllbmRzIGFuZCBnZW5lcmFscyBleGNlcHQgYSBmZXc7IG1vcmVvdmVyLCBoZSBoYWQgbm8gb3RoZXJzIHdob20gaGUgY291bGQgc3VtbW9uIGZyb20gaG9tZSwgYW5kIGhlIHNhdyB0aGF0IGhpcyBhbGxpZXMgaW4gSXRhbHkgd2VyZSBiZWNvbWluZyBpbmRpZmZlcmVudCwgd2hpbGUgdGhlIGFybXkgb2YgdGhlIFJvbWFucywgYXMgaWYgZnJvbSBhIGZvdW50YWluIGd1c2hpbmcgZm9ydGggaW5kb29ycywgd2FzIGVhc2lseSBhbmQgc3BlZWRpbHkgZmlsbGVkIHVwIGFnYWluLCBhbmQgdGhleSBkaWQgbm90IGxvc2UgY291cmFnZSBpbiBkZWZlYXQsIG5heSwgdGhlaXIgd3JhdGggZ2F2ZSB0aGVtIGFsbCB0aGUgbW9yZSB2aWdvdXIgYW5kIGRldGVybWluYXRpb24gZm9yIHRoZSB3YXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSBoZSB3YXMgaW52b2x2ZWQgaW4gc3VjaCBwZXJwbGV4aXRpZXMsIG5ldyBob3BlcyBvbmNlIG1vcmUgaW5zcGlyZWQgaGltLCBhbmQgcHJvamVjdHMgd2hpY2ggZGl2aWRlZCBoaXMgcHVycG9zZXMuIEZvciBhdCBvbmUgYW5kIHRoZSBzYW1lIHRpbWUgdGhlcmUgY2FtZSB0byBoaW0gZnJvbSBTaWNpbHkgbWVuIHdobyBvZmZlcmVkIHRvIHB1dCBpbnRvIGhpcyBoYW5kcyB0aGUgY2l0aWVzIG9mIEFncmlnZW50dW0sIFN5cmFjdXNlLCBhbmQgTGVvbnRpbmksIGFuZCBiZWdnZWQgaGltIHRvIGhlbHAgdGhlbSB0byBkcml2ZSBvdXQgdGhlIENhcnRoYWdpbmlhbnMgYW5kIHJpZCB0aGUgaXNsYW5kIG9mIGl0cyB0eXJhbnRzOyBhbmQgZnJvbSBHcmVlY2UsIG1lbiB3aXRoIHRpZGluZ3MgdGhhdCBQdG9sZW15IENlcmF1bnVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNvbiBvZiBQdG9sZW15IEkuIG9mIEVneXB0LiBJbiAyODAgQi5DLiBoZSBoYWQgYmFzZWx5IGFzc2Fzc2luYXRlZCBTZWxldWN1cywgYW5kIG1hZGUgaGltc2VsZiBraW5nIG9mIE1hY2Vkb25pYS48L25vdGU+IHdpdGggaGlzIGFybXkgaGFkIHBlcmlzaGVkIGF0IHRoZSBoYW5kcyBvZiB0aGUgR2F1bHMsIGFuZCB0aGF0IG5vdyB3YXMgdGhlIHRpbWUgb2YgYWxsIHRpbWVzIGZvciBoaW0gdG8gYmUgaW4gTWFjZWRvbmlhLCB3aGVyZSB0aGV5IHdhbnRlZCBhIGtpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlB5cnJodXMgcmF0ZWQgRm9ydHVuZSBzb3VuZGx5IGJlY2F1c2Ugb2NjYXNpb25zIGZvciB0d28gZ3JlYXQgdW5kZXJ0YWtpbmdzIGhhZCBjb21lIHRvIGhpbSBhdCBvbmUgdGltZSwgYW5kIHRoaW5raW5nIHRoYXQgdGhlIHByZXNlbmNlIG9mIGJvdGggbWVhbnQgdGhlIGxvc3Mgb2Ygb25lLCBoZSB3YXZlcmVkIGluIGhpcyBjYWxjdWxhdGlvbnMgZm9yIGEgbG9uZyB0aW1lLiBUaGVuIFNpY2lseSBhcHBlYXJlZCB0byBvZmZlciBvcHBvcnR1bml0aWVzIGZvciBncmVhdGVyIGFjaGlldmVtZW50cywgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+c2luY2UgTGlieWEgd2FzIGZlbHQgdG8gYmUgbmVhciwgYW5kIGhlIHR1cm5lZCBpbiB0aGlzIGRpcmVjdGlvbiwgYW5kIGZvcnRod2l0aCBzZW50IG91dCBDaW5lYXMgdG8gaG9sZCBwcmVsaW1pbmFyeSBjb25mZXJlbmNlcyB3aXRoIHRoZSBjaXRpZXMsIGFzIHdhcyBoaXMgd29udCwgd2hpbGUgaGUgaGltc2VsZiB0aHJldyBhIGdhcnJpc29uIGludG8gVGFyZW50dW0uIFRoZSBUYXJlbnRpbmVzIHdlcmUgbXVjaCBkaXNwbGVhc2VkIGF0IHRoaXMsIGFuZCBkZW1hbmRlZCB0aGF0IGhlIGVpdGhlciBhcHBseSBoaW1zZWxmIHRvIHRoZSB0YXNrIGZvciB3aGljaCBoZSBoYWQgY29tZSwgbmFtZWx5IHRvIGhlbHAgdGhlbSBpbiB0aGVpciB3YXIgd2l0aCBSb21lLCBvciBlbHNlIGFiYW5kb24gdGhlaXIgdGVycml0b3J5IGFuZCBsZWF2ZSB0aGVtIHRoZWlyIGNpdHkgYXMgaGUgaGFkIGZvdW5kIGl0LiBUbyB0aGlzIGRlbWFuZCBoZSBtYWRlIG5vIHZlcnkgZ3JhY2lvdXMgcmVwbHksIGJ1dCBvcmRlcmluZyB0aGVtIHRvIGtlZXAgcXVpZXQgYW5kIGF3YWl0IGhpcyBjb252ZW5pZW5jZSwgaGUgc2FpbGVkIG9mZi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoaWxlIGhlIHdhcyBpbnZvbHZlZCBpbiBzdWNoIHBlcnBsZXhpdGllcywgbmV3IGhvcGVzIG9uY2UgbW9yZSBpbnNwaXJlZCBoaW0sIGFuZCBwcm9qZWN0cyB3aGljaCBkaXZpZGVkIGhpcyBwdXJwb3Nlcy4gRm9yIGF0IG9uZSBhbmQgdGhlIHNhbWUgdGltZSB0aGVyZSBjYW1lIHRvIGhpbSBmcm9tIFNpY2lseSBtZW4gd2hvIG9mZmVyZWQgdG8gcHV0IGludG8gaGlzIGhhbmRzIHRoZSBjaXRpZXMgb2YgQWdyaWdlbnR1bSwgU3lyYWN1c2UsIGFuZCBMZW9udGluaSwgYW5kIGJlZ2dlZCBoaW0gdG8gaGVscCB0aGVtIHRvIGRyaXZlIG91dCB0aGUgQ2FydGhhZ2luaWFucyBhbmQgcmlkIHRoZSBpc2xhbmQgb2YgaXRzIHR5cmFudHM7IGFuZCBmcm9tIEdyZWVjZSwgbWVuIHdpdGggdGlkaW5ncyB0aGF0IFB0b2xlbXkgQ2VyYXVudXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzb24gb2YgUHRvbGVteSBJLiBvZiBFZ3lwdC4gSW4gMjgwIEIuQy4gaGUgaGFkIGJhc2VseSBhc3Nhc3NpbmF0ZWQgU2VsZXVjdXMsIGFuZCBtYWRlIGhpbXNlbGYga2luZyBvZiBNYWNlZG9uaWEuPC9ub3RlPiB3aXRoIGhpcyBhcm15IGhhZCBwZXJpc2hlZCBhdCB0aGUgaGFuZHMgb2YgdGhlIEdhdWxzLCBhbmQgdGhhdCBub3cgd2FzIHRoZSB0aW1lIG9mIGFsbCB0aW1lcyBmb3IgaGltIHRvIGJlIGluIE1hY2Vkb25pYSwgd2hlcmUgdGhleSB3YW50ZWQgYSBraW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlB5cnJodXMgcmF0ZWQgRm9ydHVuZSBzb3VuZGx5IGJlY2F1c2Ugb2NjYXNpb25zIGZvciB0d28gZ3JlYXQgdW5kZXJ0YWtpbmdzIGhhZCBjb21lIHRvIGhpbSBhdCBvbmUgdGltZSwgYW5kIHRoaW5raW5nIHRoYXQgdGhlIHByZXNlbmNlIG9mIGJvdGggbWVhbnQgdGhlIGxvc3Mgb2Ygb25lLCBoZSB3YXZlcmVkIGluIGhpcyBjYWxjdWxhdGlvbnMgZm9yIGEgbG9uZyB0aW1lLiBUaGVuIFNpY2lseSBhcHBlYXJlZCB0byBvZmZlciBvcHBvcnR1bml0aWVzIGZvciBncmVhdGVyIGFjaGlldmVtZW50cywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnNpbmNlIExpYnlhIHdhcyBmZWx0IHRvIGJlIG5lYXIsIGFuZCBoZSB0dXJuZWQgaW4gdGhpcyBkaXJlY3Rpb24sIGFuZCBmb3J0aHdpdGggc2VudCBvdXQgQ2luZWFzIHRvIGhvbGQgcHJlbGltaW5hcnkgY29uZmVyZW5jZXMgd2l0aCB0aGUgY2l0aWVzLCBhcyB3YXMgaGlzIHdvbnQsIHdoaWxlIGhlIGhpbXNlbGYgdGhyZXcgYSBnYXJyaXNvbiBpbnRvIFRhcmVudHVtLiBUaGUgVGFyZW50aW5lcyB3ZXJlIG11Y2ggZGlzcGxlYXNlZCBhdCB0aGlzLCBhbmQgZGVtYW5kZWQgdGhhdCBoZSBlaXRoZXIgYXBwbHkgaGltc2VsZiB0byB0aGUgdGFzayBmb3Igd2hpY2ggaGUgaGFkIGNvbWUsIG5hbWVseSB0byBoZWxwIHRoZW0gaW4gdGhlaXIgd2FyIHdpdGggUm9tZSwgb3IgZWxzZSBhYmFuZG9uIHRoZWlyIHRlcnJpdG9yeSBhbmQgbGVhdmUgdGhlbSB0aGVpciBjaXR5IGFzIGhlIGhhZCBmb3VuZCBpdC4gVG8gdGhpcyBkZW1hbmQgaGUgbWFkZSBubyB2ZXJ5IGdyYWNpb3VzIHJlcGx5LCBidXQgb3JkZXJpbmcgdGhlbSB0byBrZWVwIHF1aWV0IGFuZCBhd2FpdCBoaXMgY29udmVuaWVuY2UsIGhlIHNhaWxlZCBvZmYuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uIHJlYWNoaW5nIFNpY2lseSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5FYXJseSBpbiB0aGUgeWVhciAyNzggQi5DLjwvbm90ZT4gaGlzIGhvcGVzIHdlcmUgYXQgb25jZSByZWFsaXplZCBzZWN1cmVseTsgdGhlIGNpdGllcyByZWFkaWx5IGdhdmUgdGhlbXNlbHZlcyB1cCB0byBoaW0sIGFuZCB3aGVyZXZlciBmb3JjZSBhbmQgY29uZmxpY3Qgd2VyZSBuZWNlc3Nhcnkgbm90aGluZyBoZWxkIG91dCBhZ2FpbnN0IGhpbSBhdCBmaXJzdCwgYnV0IGFkdmFuY2luZyB3aXRoIHRoaXJ0eSB0aG91c2FuZCBmb290LCB0d2VudHktZml2ZSBodW5kcmVkIGhvcnNlLCBhbmQgdHdvIGh1bmRyZWQgc2hpcHMsIGhlIHB1dCB0aGUgUGhvZW5pY2lhbnMgdG8gcm91dCBhbmQgc3ViZHVlZCB0aGUgdGVycml0b3J5IHVuZGVyIHRoZWlyIGNvbnRyb2wuIFRoZW4gaGUgZGV0ZXJtaW5lZCB0byBzdG9ybSB0aGUgd2FsbHMgb2YgRXJ5eCwgd2hpY2ggd2FzIHRoZSBzdHJvbmdlc3Qgb2YgdGhlaXIgZm9ydHJlc3NlcyBhbmQgaGFkIG51bWVyb3VzIGRlZmVuZGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+U28gd2hlbiBoaXMgYXJteSB3YXMgcmVhZHksIGhlIHB1dCBvbiBoaXMgYXJtb3VyLCB3ZW50IG91dCB0byBiYXR0bGUsIGFuZCBtYWRlIGEgdm93IHRvIEhlcmFjbGVzIHRoYXQgaGUgd291bGQgaW5zdGl0dXRlIGdhbWVzIGFuZCBhIHNhY3JpZmljZSBpbiBoaXMgaG9ub3VyLCBpZiB0aGUgZ29kIHdvdWxkIHJlbmRlciBoaW0gaW4gdGhlIHNpZ2h0IG9mIHRoZSBTaWNpbGlhbiBHcmVla3MgYW4gYW50YWdvbmlzdCB3b3J0aHkgb2YgaGlzIGxpbmVhZ2UgYW5kIHJlc291cmNlczsgdGhlbiBoZSBvcmRlcmVkIHRoZSB0cnVtcGV0cyB0byBzb3VuZCwgc2NhdHRlcmVkIHRoZSBCYXJiYXJpYW5zIHdpdGggaGlzIG1pc3NpbGVzLCBicm91Z2h0IHVwIGhpcyBzY2FsaW5nLWxhZGRlcnMsIGFuZCB3YXMgdGhlIGZpcnN0IHRvIG1vdW50IHRoZSB3YWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5NYW55IHdlcmUgdGhlIGZvZXMgYWdhaW5zdCB3aG9tIGhlIHN0cm92ZTsgc29tZSBvZiB0aGVtIGhlIHB1c2hlZCBmcm9tIHRoZSB3YWxsIG9uIGVpdGhlciBzaWRlIGFuZCBodXJsZWQgdGhlbSB0byB0aGUgZ3JvdW5kLCBidXQgbW9zdCBoZSBsYWlkIGRlYWQgaW4gaGVhcHMgYWJvdXQgaGltIHdpdGggdGhlIHN0cm9rZXMgb2YgaGlzIHN3b3JkLiBIZSBoaW1zZWxmIHN1ZmZlcmVkIG5vIGhhcm0sIGJ1dCB3YXMgYSB0ZXJyaWJsZSBzaWdodCBmb3IgaGlzIGVuZW1pZXMgdG8gbG9vayB1cG9uLCBhbmQgcHJvdmVkIHRoYXQgSG9tZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BcyBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gNS4xODUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgdi4gMTg1PC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDYuMTAxIiB2YWxpZD0ieWVzIj52aS4gMTAxPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDkuMjM4IiB2YWxpZD0ieWVzIj5peC4gMjM4PC9iaWJsPi48L25vdGU+IHdhcyByaWdodCBhbmQgZnVsbHkganVzdGlmaWVkIGluIHNheWluZyB0aGF0IHZhbG91ciwgYWxvbmUgb2YgdGhlIHZpcnR1ZXMsIG9mdGVuIGRpc3BsYXlzIHRyYW5zcG9ydHMgZHVlIHRvIGRpdmluZSBwb3NzZXNzaW9uIGFuZCBmcmVuenkuIEFmdGVyIHRoZSBjYXB0dXJlIG9mIHRoZSBjaXR5LCBoZSBzYWNyaWZpY2VkIHRvIHRoZSBnb2QgaW4gbWFnbmlmaWNlbnQgZmFzaGlvbiBhbmQgZnVybmlzaGVkIHNwZWN0YWNsZXMgb2YgYWxsIHNvcnRzIG9mIGNvbnRlc3RzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uIHJlYWNoaW5nIFNpY2lseSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVhcmx5IGluIHRoZSB5ZWFyIDI3OCBCLkMuPC9ub3RlPiBoaXMgaG9wZXMgd2VyZSBhdCBvbmNlIHJlYWxpemVkIHNlY3VyZWx5OyB0aGUgY2l0aWVzIHJlYWRpbHkgZ2F2ZSB0aGVtc2VsdmVzIHVwIHRvIGhpbSwgYW5kIHdoZXJldmVyIGZvcmNlIGFuZCBjb25mbGljdCB3ZXJlIG5lY2Vzc2FyeSBub3RoaW5nIGhlbGQgb3V0IGFnYWluc3QgaGltIGF0IGZpcnN0LCBidXQgYWR2YW5jaW5nIHdpdGggdGhpcnR5IHRob3VzYW5kIGZvb3QsIHR3ZW50eS1maXZlIGh1bmRyZWQgaG9yc2UsIGFuZCB0d28gaHVuZHJlZCBzaGlwcywgaGUgcHV0IHRoZSBQaG9lbmljaWFucyB0byByb3V0IGFuZCBzdWJkdWVkIHRoZSB0ZXJyaXRvcnkgdW5kZXIgdGhlaXIgY29udHJvbC4gVGhlbiBoZSBkZXRlcm1pbmVkIHRvIHN0b3JtIHRoZSB3YWxscyBvZiBFcnl4LCB3aGljaCB3YXMgdGhlIHN0cm9uZ2VzdCBvZiB0aGVpciBmb3J0cmVzc2VzIGFuZCBoYWQgbnVtZXJvdXMgZGVmZW5kZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIHdoZW4gaGlzIGFybXkgd2FzIHJlYWR5LCBoZSBwdXQgb24gaGlzIGFybW91ciwgd2VudCBvdXQgdG8gYmF0dGxlLCBhbmQgbWFkZSBhIHZvdyB0byBIZXJhY2xlcyB0aGF0IGhlIHdvdWxkIGluc3RpdHV0ZSBnYW1lcyBhbmQgYSBzYWNyaWZpY2UgaW4gaGlzIGhvbm91ciwgaWYgdGhlIGdvZCB3b3VsZCByZW5kZXIgaGltIGluIHRoZSBzaWdodCBvZiB0aGUgU2ljaWxpYW4gR3JlZWtzIGFuIGFudGFnb25pc3Qgd29ydGh5IG9mIGhpcyBsaW5lYWdlIGFuZCByZXNvdXJjZXM7IHRoZW4gaGUgb3JkZXJlZCB0aGUgdHJ1bXBldHMgdG8gc291bmQsIHNjYXR0ZXJlZCB0aGUgQmFyYmFyaWFucyB3aXRoIGhpcyBtaXNzaWxlcywgYnJvdWdodCB1cCBoaXMgc2NhbGluZy1sYWRkZXJzLCBhbmQgd2FzIHRoZSBmaXJzdCB0byBtb3VudCB0aGUgd2FsbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgd2VyZSB0aGUgZm9lcyBhZ2FpbnN0IHdob20gaGUgc3Ryb3ZlOyBzb21lIG9mIHRoZW0gaGUgcHVzaGVkIGZyb20gdGhlIHdhbGwgb24gZWl0aGVyIHNpZGUgYW5kIGh1cmxlZCB0aGVtIHRvIHRoZSBncm91bmQsIGJ1dCBtb3N0IGhlIGxhaWQgZGVhZCBpbiBoZWFwcyBhYm91dCBoaW0gd2l0aCB0aGUgc3Ryb2tlcyBvZiBoaXMgc3dvcmQuIEhlIGhpbXNlbGYgc3VmZmVyZWQgbm8gaGFybSwgYnV0IHdhcyBhIHRlcnJpYmxlIHNpZ2h0IGZvciBoaXMgZW5lbWllcyB0byBsb29rIHVwb24sIGFuZCBwcm92ZWQgdGhhdCBIb21lcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXMgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gNS4xODUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB2LiAxODU8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiA2LjEwMSIgdmFsaWQ9InllcyI+dmkuIDEwMTwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDkuMjM4IiB2YWxpZD0ieWVzIj5peC4gMjM4PC9iaWJsPi48L25vdGU+IHdhcyByaWdodCBhbmQgZnVsbHkganVzdGlmaWVkIGluIHNheWluZyB0aGF0IHZhbG91ciwgYWxvbmUgb2YgdGhlIHZpcnR1ZXMsIG9mdGVuIGRpc3BsYXlzIHRyYW5zcG9ydHMgZHVlIHRvIGRpdmluZSBwb3NzZXNzaW9uIGFuZCBmcmVuenkuIEFmdGVyIHRoZSBjYXB0dXJlIG9mIHRoZSBjaXR5LCBoZSBzYWNyaWZpY2VkIHRvIHRoZSBnb2QgaW4gbWFnbmlmaWNlbnQgZmFzaGlvbiBhbmQgZnVybmlzaGVkIHNwZWN0YWNsZXMgb2YgYWxsIHNvcnRzIG9mIGNvbnRlc3RzLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiA1LjE4NSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHYuIDE4NTwvYmlibD47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHYuIDE4NTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDYuMTAxIiB2YWxpZD0ieWVzIj52aS4gMTAxPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gOS4yMzgiIHZhbGlkPSJ5ZXMiPml4LiAyMzg8L2JpYmw+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBCYXJiYXJpYW5zIGFib3V0IE1lc3NhbmEsIGNhbGxlZCBNYW1lcnRpbmVzLCB3ZXJlIGdpdmluZyBtdWNoIGFubm95YW5jZSB0byB0aGUgR3JlZWtzLCBhbmQgaGFkIGV2ZW4gbGFpZCBzb21lIG9mIHRoZW0gdW5kZXIgY29udHJpYnV0aW9uLiBUaGV5IHdlcmUgbnVtZXJvdXMgYW5kIHdhcmxpa2UsIGFuZCB0aGVyZWZvcmUgaGFkIGJlZW4gZ2l2ZW4gYSBuYW1lIHdoaWNoLCBpbiB0aGUgTGF0aW4gdG9uZ3VlLCBzaWduaWZpZXMgbWFydGlhbC4gUHlycmh1cyBzZWl6ZWQgdGhlaXIgY29sbGVjdG9ycyBvZiB0cmlidXRlIGFuZCBwdXQgdGhlbSB0byBkZWF0aCwgdGhlbiBjb25xdWVyZWQgdGhlIHBlb3BsZSB0aGVtc2VsdmVzIGluIGJhdHRsZSBhbmQgZGVzdHJveWVkIG1hbnkgb2YgdGhlaXIgc3Ryb25naG9sZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIHRoZSBDYXJ0aGFnaW5pYW5zIHdlcmUgaW5jbGluZWQgdG8gY29tZSB0byB0ZXJtcyBhbmQgd2VyZSB3aWxsaW5nIHRvIHBheSBoaW0gbW9uZXkgYW5kIHNlbmQgaGltIHNoaXBzIGluIGNhc2UgZnJpZW5kbHkgcmVsYXRpb25zIHdlcmUgZXN0YWJsaXNoZWQsIGhlIHJlcGxpZWQgdG8gdGhlbSAoaGlzIGhlYXJ0IGJlaW5nIHNldCB1cG9uIGdyZWF0ZXIgdGhpbmdzKSB0aGF0IHRoZXJlIGNvdWxkIGJlIG5vIHNldHRsZW1lbnQgb3IgZnJpZW5kc2hpcCBiZXR3ZWVuIGhpbXNlbGYgYW5kIHRoZW0gdW5sZXNzIHRoZXkgYWJhbmRvbmVkIGFsbCBTaWNpbHkgYW5kIG1hZGUgdGhlIExpYnlhbiBTZWEgYSBib3VuZGFyeSBiZXR3ZWVuIHRoZW1zZWx2ZXMgYW5kIHRoZSBHcmVla3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3csIGxpZnRlZCB1cCBieSBoaXMgZ29vZCBmb3J0dW5lIGFuZCBieSB0aGUgc3RyZW5ndGggb2YgaGlzIHJlc291cmNlcywgYW5kIHB1cnN1aW5nIHRoZSBob3BlcyB3aXRoIHdoaWNoIGhlIGhhZCBzYWlsZWQgZnJvbSBob21lIGluIHRoZSBiZWdpbm5pbmcsIGhlIHNldCBoaXMgaGVhcnQgdXBvbiBMaWJ5YSBmaXJzdDsgYW5kIHNpbmNlIG1hbnkgb2YgdGhlIHNoaXBzIHRoYXQgaGUgaGFkIHdlcmUgaW5zdWZmaWNpZW50bHkgbWFubmVkLCBoZSBiZWdhbiB0byBjb2xsZWN0IG9hcnNtZW4sIG5vdCBkZWFsaW5nIHdpdGggdGhlIGNpdGllcyBpbiBhbiBhY2NlcHRhYmxlIG9yIGdlbnRsZSBtYW5uZXIsIGJ1dCBpbiBhIGxvcmRseSB3YXksIGFuZ3JpbHkgcHV0dGluZyBjb21wdWxzaW9uIGFuZCBwZW5hbHRpZXMgdXBvbiB0aGVtLiBIZSBoYWQgbm90IGJlaGF2ZWQgaW4gdGhpcyB3YXkgYXQgdGhlIHZlcnkgYmVnaW5uaW5nLCBidXQgaGFkIGV2ZW4gZ29uZSBiZXlvbmQgb3RoZXJzIGluIHRyeWluZyB0byB3aW4gbWVuJ3MgaGVhcnRzIGJ5IGdyYWNpb3VzIGludGVyY291cnNlIHdpdGggdGhlbSwgYnkgdHJ1c3RpbmcgZXZlcnlib2R5LCBhbmQgYnkgZG9pbmcgbm9ib2R5IGFueSBoYXJtLiBCdXQgbm93IGhlIGNlYXNlZCB0byBiZSBhIHBvcHVsYXIgbGVhZGVyIGFuZCBiZWNhbWUgYSB0eXJhbnQsIGFuZCBhZGRlZCB0byBoaXMgbmFtZSBmb3Igc2V2ZXJpdHkgYSBuYW1lIGZvciBpbmdyYXRpdHVkZSBhbmQgZmFpdGhsZXNzbmVzcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIEJhcmJhcmlhbnMgYWJvdXQgTWVzc2FuYSwgY2FsbGVkIE1hbWVydGluZXMsIHdlcmUgZ2l2aW5nIG11Y2ggYW5ub3lhbmNlIHRvIHRoZSBHcmVla3MsIGFuZCBoYWQgZXZlbiBsYWlkIHNvbWUgb2YgdGhlbSB1bmRlciBjb250cmlidXRpb24uIFRoZXkgd2VyZSBudW1lcm91cyBhbmQgd2FybGlrZSwgYW5kIHRoZXJlZm9yZSBoYWQgYmVlbiBnaXZlbiBhIG5hbWUgd2hpY2gsIGluIHRoZSBMYXRpbiB0b25ndWUsIHNpZ25pZmllcyBtYXJ0aWFsLiBQeXJyaHVzIHNlaXplZCB0aGVpciBjb2xsZWN0b3JzIG9mIHRyaWJ1dGUgYW5kIHB1dCB0aGVtIHRvIGRlYXRoLCB0aGVuIGNvbnF1ZXJlZCB0aGUgcGVvcGxlIHRoZW1zZWx2ZXMgaW4gYmF0dGxlIGFuZCBkZXN0cm95ZWQgbWFueSBvZiB0aGVpciBzdHJvbmdob2xkcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIHRoZSBDYXJ0aGFnaW5pYW5zIHdlcmUgaW5jbGluZWQgdG8gY29tZSB0byB0ZXJtcyBhbmQgd2VyZSB3aWxsaW5nIHRvIHBheSBoaW0gbW9uZXkgYW5kIHNlbmQgaGltIHNoaXBzIGluIGNhc2UgZnJpZW5kbHkgcmVsYXRpb25zIHdlcmUgZXN0YWJsaXNoZWQsIGhlIHJlcGxpZWQgdG8gdGhlbSAoaGlzIGhlYXJ0IGJlaW5nIHNldCB1cG9uIGdyZWF0ZXIgdGhpbmdzKSB0aGF0IHRoZXJlIGNvdWxkIGJlIG5vIHNldHRsZW1lbnQgb3IgZnJpZW5kc2hpcCBiZXR3ZWVuIGhpbXNlbGYgYW5kIHRoZW0gdW5sZXNzIHRoZXkgYWJhbmRvbmVkIGFsbCBTaWNpbHkgYW5kIG1hZGUgdGhlIExpYnlhbiBTZWEgYSBib3VuZGFyeSBiZXR3ZWVuIHRoZW1zZWx2ZXMgYW5kIHRoZSBHcmVla3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3csIGxpZnRlZCB1cCBieSBoaXMgZ29vZCBmb3J0dW5lIGFuZCBieSB0aGUgc3RyZW5ndGggb2YgaGlzIHJlc291cmNlcywgYW5kIHB1cnN1aW5nIHRoZSBob3BlcyB3aXRoIHdoaWNoIGhlIGhhZCBzYWlsZWQgZnJvbSBob21lIGluIHRoZSBiZWdpbm5pbmcsIGhlIHNldCBoaXMgaGVhcnQgdXBvbiBMaWJ5YSBmaXJzdDsgYW5kIHNpbmNlIG1hbnkgb2YgdGhlIHNoaXBzIHRoYXQgaGUgaGFkIHdlcmUgaW5zdWZmaWNpZW50bHkgbWFubmVkLCBoZSBiZWdhbiB0byBjb2xsZWN0IG9hcnNtZW4sIG5vdCBkZWFsaW5nIHdpdGggdGhlIGNpdGllcyBpbiBhbiBhY2NlcHRhYmxlIG9yIGdlbnRsZSBtYW5uZXIsIGJ1dCBpbiBhIGxvcmRseSB3YXksIGFuZ3JpbHkgcHV0dGluZyBjb21wdWxzaW9uIGFuZCBwZW5hbHRpZXMgdXBvbiB0aGVtLiBIZSBoYWQgbm90IGJlaGF2ZWQgaW4gdGhpcyB3YXkgYXQgdGhlIHZlcnkgYmVnaW5uaW5nLCBidXQgaGFkIGV2ZW4gZ29uZSBiZXlvbmQgb3RoZXJzIGluIHRyeWluZyB0byB3aW4gbWVuJ3MgaGVhcnRzIGJ5IGdyYWNpb3VzIGludGVyY291cnNlIHdpdGggdGhlbSwgYnkgdHJ1c3RpbmcgZXZlcnlib2R5LCBhbmQgYnkgZG9pbmcgbm9ib2R5IGFueSBoYXJtLiBCdXQgbm93IGhlIGNlYXNlZCB0byBiZSBhIHBvcHVsYXIgbGVhZGVyIGFuZCBiZWNhbWUgYSB0eXJhbnQsIGFuZCBhZGRlZCB0byBoaXMgbmFtZSBmb3Igc2V2ZXJpdHkgYSBuYW1lIGZvciBpbmdyYXRpdHVkZSBhbmQgZmFpdGhsZXNzbmVzcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzIHRoZSBTaWNpbGlhbnMgcHV0IHVwIHdpdGggdGhlc2UgdGhpbmdzIGFzIG5lY2Vzc2FyeSwgYWx0aG91Z2ggdGhleSB3ZXJlIGV4YXNwZXJhdGVkOyBidXQgdGhlbiBjYW1lIGhpcyBkZWFsaW5ncyB3aXRoIFRob2Vub24gYW5kIFNvc2lzdHJhdHVzLiBUaGVzZSB3ZXJlIGxlYWRpbmcgbWVuIGluIFN5cmFjdXNlLCBhbmQgaGFkIGJlZW4gZmlyc3QgdG8gcGVyc3VhZGUgUHlycmh1cyB0byBjb21lIGludG8gU2ljaWx5LiBNb3Jlb3ZlciwgYWZ0ZXIgaGUgaGFkIGNvbWUsIHRoZXkgaW1tZWRpYXRlbHkgcHV0IHRoZWlyIGNpdHkgaW50byBoaXMgaGFuZHMgYW5kIGFzc2lzdGVkIGhpbSBpbiBtb3N0IG9mIHdoYXQgaGUgaGFkIGFjY29tcGxpc2hlZCBpbiBTaWNpbHkuIEFuZCB5ZXQgaGUgd2FzIHdpbGxpbmcgbmVpdGhlciB0byB0YWtlIHRoZW0gd2l0aCBoaW0gbm9yIHRvIGxlYXZlIHRoZW0gYmVoaW5kLCBhbmQgaGVsZCB0aGVtIGluIHN1c3BpY2lvbi4gU29zaXN0cmF0dXMgdG9vayB0aGUgYWxhcm0gYW5kIHdpdGhkcmV3OyAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgVGhvZW5vbiB3YXMgYWNjdXNlZCBieSBQeXJyaHVzIG9mIGNvbXBsaWNpdHkgd2l0aCBTb3Npc3RyYXR1cyBhbmQgcHV0IHRvIGRlYXRoLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iIj5EaW9ueXNpdXMgSGFsLiwgPHRpdGxlPkV4Y2VycHRhIGV4IGxpYi4geHguPC90aXRsZT4sIDg8L2JpYmw+Ljwvbm90ZT4gV2l0aCB0aGlzLCB0aGUgc2l0dWF0aW9uIG9mIFB5cnJodXMgd2FzIHN1ZGRlbmx5IGFuZCBlbnRpcmVseSBjaGFuZ2VkLiBBIHRlcnJpYmxlIGhhdHJlZCBhcm9zZSBhZ2FpbnN0IGhpbSBpbiB0aGUgY2l0aWVzLCBzb21lIG9mIHdoaWNoIGpvaW5lZCB0aGUgQ2FydGhhZ2luaWFucywgd2hpbGUgb3RoZXJzIGNhbGxlZCBpbiB0aGUgTWFtZXJ0aW5lcy4gQW5kIG5vdywgYXMgaGUgc2F3IGV2ZXJ5d2hlcmUgc2VjZXNzaW9ucyBhbmQgcmV2b2x1dGlvbmFyeSBkZXNpZ25zIGFuZCBhIHN0cm9uZyBmYWN0aW9uIG9wcG9zZWQgdG8gaGltLCBoZSByZWNlaXZlZCBsZXR0ZXJzIGZyb20gdGhlIFNhbW5pdGVzIGFuZCBUYXJlbnRpbmVzLCB3aG8gaGFkIGJlZW4gZXhjbHVkZWQgZnJvbSBhbGwgdGhlaXIgdGVycml0b3JpZXMsIGNvdWxkIHdpdGggZGlmZmljdWx0eSBtYWludGFpbiB0aGUgd2FyIGV2ZW4gaW4gdGhlaXIgY2l0aWVzLCBhbmQgYmVnZ2VkIGZvciBoaXMgYXNzaXN0YW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBnYXZlIGhpbSBhIGZhaXIgcHJldGV4dCBmb3IgaGlzIHNhaWxpbmcgYXdheSwgd2l0aG91dCBpdHMgYmVpbmcgY2FsbGVkIGEgZmxpZ2h0IG9yIGRlc3BhaXIgb2YgaGlzIGNhdXNlIGluIHRoZSBpc2xhbmQ7IGJ1dCBpbiB0cnV0aCBpdCB3YXMgYmVjYXVzZSBoZSBjb3VsZCBub3QgbWFzdGVyIFNpY2lseSwgd2hpY2ggd2FzIGxpa2UgYSBzdG9ybS10b3NzZWQgc2hpcCwgYnV0IGRlc2lyZWQgdG8gZ2V0IG91dCBvZiBoZXIsIHRoYXQgaGUgb25jZSBtb3JlIHRocmV3IGhpbXNlbGYgaW50byBJdGFseS4gQW5kIGl0IGlzIHNhaWQgdGhhdCBhdCB0aGUgdGltZSBvZiBoaXMgZGVwYXJ0dXJlIGhlIGxvb2tlZCBiYWNrIGF0IHRoZSBpc2xhbmQgYW5kIHNhaWQgdG8gdGhvc2UgYWJvdXQgaGltOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IGZyaWVuZHMsIHdoYXQgYSB3cmVzdGxpbmcgZ3JvdW5kIGZvciBDYXJ0aGFnaW5pYW5zIGFuZCBSb21hbnMgd2UgYXJlIGxlYXZpbmcgYmVoaW5kIHVzITwvcT4gQW5kIHRoaXMgY29uamVjdHVyZSBvZiBoaXMgd2FzIHNvb24gYWZ0ZXJ3YXJkcyBjb25maXJtZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcyB0aGUgU2ljaWxpYW5zIHB1dCB1cCB3aXRoIHRoZXNlIHRoaW5ncyBhcyBuZWNlc3NhcnksIGFsdGhvdWdoIHRoZXkgd2VyZSBleGFzcGVyYXRlZDsgYnV0IHRoZW4gY2FtZSBoaXMgZGVhbGluZ3Mgd2l0aCBUaG9lbm9uIGFuZCBTb3Npc3RyYXR1cy4gVGhlc2Ugd2VyZSBsZWFkaW5nIG1lbiBpbiBTeXJhY3VzZSwgYW5kIGhhZCBiZWVuIGZpcnN0IHRvIHBlcnN1YWRlIFB5cnJodXMgdG8gY29tZSBpbnRvIFNpY2lseS4gTW9yZW92ZXIsIGFmdGVyIGhlIGhhZCBjb21lLCB0aGV5IGltbWVkaWF0ZWx5IHB1dCB0aGVpciBjaXR5IGludG8gaGlzIGhhbmRzIGFuZCBhc3Npc3RlZCBoaW0gaW4gbW9zdCBvZiB3aGF0IGhlIGhhZCBhY2NvbXBsaXNoZWQgaW4gU2ljaWx5LiBBbmQgeWV0IGhlIHdhcyB3aWxsaW5nIG5laXRoZXIgdG8gdGFrZSB0aGVtIHdpdGggaGltIG5vciB0byBsZWF2ZSB0aGVtIGJlaGluZCwgYW5kIGhlbGQgdGhlbSBpbiBzdXNwaWNpb24uIFNvc2lzdHJhdHVzIHRvb2sgdGhlIGFsYXJtIGFuZCB3aXRoZHJldzsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBUaG9lbm9uIHdhcyBhY2N1c2VkIGJ5IFB5cnJodXMgb2YgY29tcGxpY2l0eSB3aXRoIFNvc2lzdHJhdHVzIGFuZCBwdXQgdG8gZGVhdGguPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iIj5EaW9ueXNpdXMgSGFsLiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXhjZXJwdGEgZXggbGliLiB4eC48L3RpdGxlPiwgODwvYmlibD4uPC9ub3RlPiBXaXRoIHRoaXMsIHRoZSBzaXR1YXRpb24gb2YgUHlycmh1cyB3YXMgc3VkZGVubHkgYW5kIGVudGlyZWx5IGNoYW5nZWQuIEEgdGVycmlibGUgaGF0cmVkIGFyb3NlIGFnYWluc3QgaGltIGluIHRoZSBjaXRpZXMsIHNvbWUgb2Ygd2hpY2ggam9pbmVkIHRoZSBDYXJ0aGFnaW5pYW5zLCB3aGlsZSBvdGhlcnMgY2FsbGVkIGluIHRoZSBNYW1lcnRpbmVzLiBBbmQgbm93LCBhcyBoZSBzYXcgZXZlcnl3aGVyZSBzZWNlc3Npb25zIGFuZCByZXZvbHV0aW9uYXJ5IGRlc2lnbnMgYW5kIGEgc3Ryb25nIGZhY3Rpb24gb3Bwb3NlZCB0byBoaW0sIGhlIHJlY2VpdmVkIGxldHRlcnMgZnJvbSB0aGUgU2Ftbml0ZXMgYW5kIFRhcmVudGluZXMsIHdobyBoYWQgYmVlbiBleGNsdWRlZCBmcm9tIGFsbCB0aGVpciB0ZXJyaXRvcmllcywgY291bGQgd2l0aCBkaWZmaWN1bHR5IG1haW50YWluIHRoZSB3YXIgZXZlbiBpbiB0aGVpciBjaXRpZXMsIGFuZCBiZWdnZWQgZm9yIGhpcyBhc3Npc3RhbmNlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IiI+RGlvbnlzaXVzIEhhbC4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkV4Y2VycHRhIGV4IGxpYi4geHguPC90aXRsZT4sIDg8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkV4Y2VycHRhIGV4IGxpYi4geHguPC90aXRsZT4sIDg8L3RyYW5zbGF0aW9uPg=="
translation['23.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZ2F2ZSBoaW0gYSBmYWlyIHByZXRleHQgZm9yIGhpcyBzYWlsaW5nIGF3YXksIHdpdGhvdXQgaXRzIGJlaW5nIGNhbGxlZCBhIGZsaWdodCBvciBkZXNwYWlyIG9mIGhpcyBjYXVzZSBpbiB0aGUgaXNsYW5kOyBidXQgaW4gdHJ1dGggaXQgd2FzIGJlY2F1c2UgaGUgY291bGQgbm90IG1hc3RlciBTaWNpbHksIHdoaWNoIHdhcyBsaWtlIGEgc3Rvcm0tdG9zc2VkIHNoaXAsIGJ1dCBkZXNpcmVkIHRvIGdldCBvdXQgb2YgaGVyLCB0aGF0IGhlIG9uY2UgbW9yZSB0aHJldyBoaW1zZWxmIGludG8gSXRhbHkuIEFuZCBpdCBpcyBzYWlkIHRoYXQgYXQgdGhlIHRpbWUgb2YgaGlzIGRlcGFydHVyZSBoZSBsb29rZWQgYmFjayBhdCB0aGUgaXNsYW5kIGFuZCBzYWlkIHRvIHRob3NlIGFib3V0IGhpbTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IGZyaWVuZHMsIHdoYXQgYSB3cmVzdGxpbmcgZ3JvdW5kIGZvciBDYXJ0aGFnaW5pYW5zIGFuZCBSb21hbnMgd2UgYXJlIGxlYXZpbmcgYmVoaW5kIHVzITwvcT4gQW5kIHRoaXMgY29uamVjdHVyZSBvZiBoaXMgd2FzIHNvb24gYWZ0ZXJ3YXJkcyBjb25maXJtZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgQmFyYmFyaWFucyBjb21iaW5lZCBhZ2FpbnN0IGhpbSBhcyBoZSB3YXMgc2V0dGluZyBzYWlsLiBXaXRoIHRoZSBDYXJ0aGFnaW5pYW5zIGhlIGZvdWdodCBhIHNlYS1maWdodCBpbiB0aGUgc3RyYWl0IGFuZCBsb3N0IG1hbnkgb2YgaGlzIHNoaXBzLCBidXQgZXNjYXBlZCB3aXRoIHRoZSByZXN0IHRvIEl0YWx5OyBhbmQgaGVyZSB0aGUgTWFtZXJ0aW5lcywgbW9yZSB0aGFuIHRlbiB0aG91c2FuZCBvZiB3aG9tIGhhZCBjcm9zc2VkIGluIGFkdmFuY2Ugb2YgaGltLCB0aG91Z2ggdGhleSB3ZXJlIGFmcmFpZCB0byBtYXRjaCBmb3JjZXMgd2l0aCBoaW0sIHlldCB0aHJldyBoaXMgd2hvbGUgYXJteSBpbnRvIGNvbmZ1c2lvbiBieSBzZXR0aW5nIHVwb24gaGltIGFuZCBhc3NhaWxpbmcgaGltIGluIGRpZmZpY3VsdCByZWdpb25zLiBUd28gb2YgaGlzIGVsZXBoYW50cyBmZWxsLCBhbmQgZ3JlYXQgbnVtYmVycyBvZiBoaXMgcmVhcmd1YXJkIHdlcmUgc2xhaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCByaWRpbmcgdXAgaW4gcGVyc29uIGZyb20gdGhlIHZhbiwgaGUgc291Z2h0IHRvIHdhcmQgb2ZmIHRoZSBlbmVteSwgYW5kIHJhbiBncmVhdCByaXNrcyBpbiBjb250ZW5kaW5nIHdpdGggbWVuIHdobyB3ZXJlIHRyYWluZWQgdG8gZmlnaHQgYW5kIHdlcmUgaW5zcGlyZWQgd2l0aCBoaWdoIGNvdXJhZ2UuIEFuZCB3aGVuIGhlIHdhcyB3b3VuZGVkIG9uIHRoZSBoZWFkIHdpdGggYSBzd29yZCBhbmQgd2l0aGRyZXcgYSBsaXR0bGUgZnJvbSB0aGUgY29tYmF0YW50cywgdGhlIGVuZW15IHdlcmUgYWxsIHRoZSBtb3JlIGVsYXRlZC4gT25lIG9mIHRoZW0gcmFuIGZvcnRoIGZhciBpbiBhZHZhbmNlIG9mIHRoZSByZXN0LCBhIG1hbiB3aG8gd2FzIGh1Z2UgaW4gYm9keSBhbmQgcmVzcGxlbmRlbnQgaW4gYXJtb3VyLCBhbmQgaW4gYSBib2xkIHZvaWNlIGNoYWxsZW5nZWQgUHlycmh1cyB0byBjb21lIG91dCwgaWYgaGUgd2VyZSBzdGlsbCBhbGl2ZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBhbmdlcmVkIFB5cnJodXMsIGFuZCB3aGVlbGluZyByb3VuZCBpbiBzcGl0ZSBvZiBoaXMgZ3VhcmRzLCBoZSBwdXNoZWQgaGlzIHdheSB0aHJvdWdoIHRoZW0tZnVsbCBvZiB3cmF0aCwgc21lYXJlZCB3aXRoIGJsb29kLCBhbmQgd2l0aCBhIGNvdW50ZW5hbmNlIHRlcnJpYmxlIHRvIGxvb2sgdXBvbiwgYW5kIGJlZm9yZSB0aGUgQmFyYmFyaWFuIGNvdWxkIHN0cmlrZSBkZWFsdCBoaW0gc3VjaCBhIGJsb3cgb24gdGhlIGhlYWQgd2l0aCBoaXMgc3dvcmQgdGhhdCwgd2hhdCB3aXRoIHRoZSBtaWdodCBvZiBoaXMgYXJtIGFuZCB0aGUgZXhjZWxsZW50IHRlbXBlciBvZiBoaXMgc3RlZWwsIGl0IGNsZWF2ZWQgaXRzIHdheSBkb3duIHRocm91Z2gsIHNvIHRoYXQgYXQgb25lIGluc3RhbnQgdGhlIHBhcnRzIG9mIHRoZSBzdW5kZXJlZCBib2R5IGZlbGwgdG8gZWl0aGVyIHNpZGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgY2hlY2tlZCB0aGUgQmFyYmFyaWFucyBmcm9tIGFueSBmdXJ0aGVyIGFkdmFuY2UsIGZvciB0aGV5IHdlcmUgYW1hemVkIGFuZCBjb25mb3VuZGVkIGF0IFB5cnJodXMsIGFuZCB0aG91Z2h0IGhpbSBzb21lIHN1cGVyaW9yIGJlaW5nLiBTbyBoZSBhY2NvbXBsaXNoZWQgdGhlIHJlc3Qgb2YgaGlzIG1hcmNoIHVubW9sZXN0ZWQgYW5kIGNhbWUgdG8gVGFyZW50dW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIGF1dHVtbiBvZiAyNzYgQi5DLjwvbm90ZT4gIGJyaW5naW5nIHR3ZW50eSB0aG91c2FuZCBmb290IGFuZCB0aHJlZSB0aG91c2FuZCBob3JzZS4gVGhlbiwgYWRkaW5nIHRvIGhpcyBmb3JjZSB0aGUgYmVzdCB0cm9vcHMgb2YgdGhlIFRhcmVudGluZXMsIGhlIGZvcnRod2l0aCBsZWQgdGhlbSBhZ2FpbnN0IHRoZSBSb21hbnMsIHdobyB3ZXJlIGVuY2FtcGVkIGluIHRoZSBjb3VudHJ5IG9mIHRoZSBTYW1uaXRlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBCYXJiYXJpYW5zIGNvbWJpbmVkIGFnYWluc3QgaGltIGFzIGhlIHdhcyBzZXR0aW5nIHNhaWwuIFdpdGggdGhlIENhcnRoYWdpbmlhbnMgaGUgZm91Z2h0IGEgc2VhLWZpZ2h0IGluIHRoZSBzdHJhaXQgYW5kIGxvc3QgbWFueSBvZiBoaXMgc2hpcHMsIGJ1dCBlc2NhcGVkIHdpdGggdGhlIHJlc3QgdG8gSXRhbHk7IGFuZCBoZXJlIHRoZSBNYW1lcnRpbmVzLCBtb3JlIHRoYW4gdGVuIHRob3VzYW5kIG9mIHdob20gaGFkIGNyb3NzZWQgaW4gYWR2YW5jZSBvZiBoaW0sIHRob3VnaCB0aGV5IHdlcmUgYWZyYWlkIHRvIG1hdGNoIGZvcmNlcyB3aXRoIGhpbSwgeWV0IHRocmV3IGhpcyB3aG9sZSBhcm15IGludG8gY29uZnVzaW9uIGJ5IHNldHRpbmcgdXBvbiBoaW0gYW5kIGFzc2FpbGluZyBoaW0gaW4gZGlmZmljdWx0IHJlZ2lvbnMuIFR3byBvZiBoaXMgZWxlcGhhbnRzIGZlbGwsIGFuZCBncmVhdCBudW1iZXJzIG9mIGhpcyByZWFyZ3VhcmQgd2VyZSBzbGFpbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCByaWRpbmcgdXAgaW4gcGVyc29uIGZyb20gdGhlIHZhbiwgaGUgc291Z2h0IHRvIHdhcmQgb2ZmIHRoZSBlbmVteSwgYW5kIHJhbiBncmVhdCByaXNrcyBpbiBjb250ZW5kaW5nIHdpdGggbWVuIHdobyB3ZXJlIHRyYWluZWQgdG8gZmlnaHQgYW5kIHdlcmUgaW5zcGlyZWQgd2l0aCBoaWdoIGNvdXJhZ2UuIEFuZCB3aGVuIGhlIHdhcyB3b3VuZGVkIG9uIHRoZSBoZWFkIHdpdGggYSBzd29yZCBhbmQgd2l0aGRyZXcgYSBsaXR0bGUgZnJvbSB0aGUgY29tYmF0YW50cywgdGhlIGVuZW15IHdlcmUgYWxsIHRoZSBtb3JlIGVsYXRlZC4gT25lIG9mIHRoZW0gcmFuIGZvcnRoIGZhciBpbiBhZHZhbmNlIG9mIHRoZSByZXN0LCBhIG1hbiB3aG8gd2FzIGh1Z2UgaW4gYm9keSBhbmQgcmVzcGxlbmRlbnQgaW4gYXJtb3VyLCBhbmQgaW4gYSBib2xkIHZvaWNlIGNoYWxsZW5nZWQgUHlycmh1cyB0byBjb21lIG91dCwgaWYgaGUgd2VyZSBzdGlsbCBhbGl2ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYW5nZXJlZCBQeXJyaHVzLCBhbmQgd2hlZWxpbmcgcm91bmQgaW4gc3BpdGUgb2YgaGlzIGd1YXJkcywgaGUgcHVzaGVkIGhpcyB3YXkgdGhyb3VnaCB0aGVtLWZ1bGwgb2Ygd3JhdGgsIHNtZWFyZWQgd2l0aCBibG9vZCwgYW5kIHdpdGggYSBjb3VudGVuYW5jZSB0ZXJyaWJsZSB0byBsb29rIHVwb24sIGFuZCBiZWZvcmUgdGhlIEJhcmJhcmlhbiBjb3VsZCBzdHJpa2UgZGVhbHQgaGltIHN1Y2ggYSBibG93IG9uIHRoZSBoZWFkIHdpdGggaGlzIHN3b3JkIHRoYXQsIHdoYXQgd2l0aCB0aGUgbWlnaHQgb2YgaGlzIGFybSBhbmQgdGhlIGV4Y2VsbGVudCB0ZW1wZXIgb2YgaGlzIHN0ZWVsLCBpdCBjbGVhdmVkIGl0cyB3YXkgZG93biB0aHJvdWdoLCBzbyB0aGF0IGF0IG9uZSBpbnN0YW50IHRoZSBwYXJ0cyBvZiB0aGUgc3VuZGVyZWQgYm9keSBmZWxsIHRvIGVpdGhlciBzaWRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgY2hlY2tlZCB0aGUgQmFyYmFyaWFucyBmcm9tIGFueSBmdXJ0aGVyIGFkdmFuY2UsIGZvciB0aGV5IHdlcmUgYW1hemVkIGFuZCBjb25mb3VuZGVkIGF0IFB5cnJodXMsIGFuZCB0aG91Z2h0IGhpbSBzb21lIHN1cGVyaW9yIGJlaW5nLiBTbyBoZSBhY2NvbXBsaXNoZWQgdGhlIHJlc3Qgb2YgaGlzIG1hcmNoIHVubW9sZXN0ZWQgYW5kIGNhbWUgdG8gVGFyZW50dW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgYXV0dW1uIG9mIDI3NiBCLkMuPC9ub3RlPiAgYnJpbmdpbmcgdHdlbnR5IHRob3VzYW5kIGZvb3QgYW5kIHRocmVlIHRob3VzYW5kIGhvcnNlLiBUaGVuLCBhZGRpbmcgdG8gaGlzIGZvcmNlIHRoZSBiZXN0IHRyb29wcyBvZiB0aGUgVGFyZW50aW5lcywgaGUgZm9ydGh3aXRoIGxlZCB0aGVtIGFnYWluc3QgdGhlIFJvbWFucywgd2hvIHdlcmUgZW5jYW1wZWQgaW4gdGhlIGNvdW50cnkgb2YgdGhlIFNhbW5pdGVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHBvd2VyIG9mIHRoZSBTYW1uaXRlcyBoYWQgYmVlbiBzaGF0dGVyZWQsIGFuZCB0aGVpciBzcGlyaXRzIHdlcmUgYnJva2VuLCBpbiBjb25zZXF1ZW5jZSBvZiBtYW55IGRlZmVhdHMgYXQgdGhlIGhhbmRzIG9mIHRoZSBSb21hbnMuIFRoZXkgYWxzbyBjaGVyaXNoZWQgY29uc2lkZXJhYmxlIHJlc2VudG1lbnQgYWdhaW5zdCBQeXJyaHVzIGJlY2F1c2Ugb2YgaGlzIGV4cGVkaXRpb24gdG8gU2ljaWx5OyBoZW5jZSBub3QgbWFueSBvZiB0aGVtIGNhbWUgdG8gam9pbiBoaW0uIFB5cnJodXMsIGhvd2V2ZXIsIGRpdmlkZWQgaGlzIGFybXkgaW4gdG8gdHdvIHBhcnRzLCBzZW50IG9uZSBvZiB0aGVtIGludG8gTHVjYW5pYSB0byBhdHRhY2sgdGhlIG90aGVyIGNvbnN1bCwgdGhhdCBoZSBtaWdodCBub3QgY29tZSB0byB0aGUgaGVscCBvZiBoaXMgY29sbGVhZ3VlLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgbGVkIHRoZSBvdGhlciBwYXJ0IGhpbXNlbGYgYWdhaW5zdCBNYW5pdXMgQ3VyaXVzLCB3aG8gd2FzIHNhZmVseSBlbmNhbXBlZCBuZWFyIHRoZSBjaXR5IG9mIEJlbmV2ZW50dW0gYW5kIHdhcyBhd2FpdGluZyBhc3Npc3RhbmNlIGZyb20gTHVjYW5pYTsgaW4gcGFydCBhbHNvIGl0IHdhcyBiZWNhdXNlIGhpcyBzb290aHNheWVycyBoYWQgZGlzc3VhZGVkIGhpbSB3aXRoIHVuZmF2b3VyYWJsZSBvbWVucyBhbmQgc2FjcmlmaWNlcyB0aGF0IGhlIGtlcHQgcXVpZXQuIFB5cnJodXMsIGFjY29yZGluZ2x5LCBoYXN0ZW5pbmcgdG8gYXR0YWNrIHRoaXMgY29uc3VsIGJlZm9yZSB0aGUgb3RoZXIgb25lIGNhbWUgdXAsIHRvb2sgaGlzIGJlc3QgbWVuIGFuZCBoaXMgbW9zdCB3YXJsaWtlIGVsZXBoYW50cyBhbmQgc2V0IG91dCBieSBuaWdodCBhZ2FpbnN0IGhpcyBjYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UgaGUgdG9vayBhIGxvbmcgY2lyY3VpdCB0aHJvdWdoIGEgZGVuc2VseSB3b29kZWQgY291bnRyeSwgaGlzIGxpZ2h0cyBkaWQgbm90IGhvbGQgb3V0LCBhbmQgaGlzIHNvbGRpZXJzIGxvc3QgdGhlaXIgd2F5IGFuZCBzdHJhZ2dsZWQuIFRoaXMgY2F1c2VkIGRlbGF5LCBzbyB0aGF0IHRoZSBuaWdodCBwYXNzZWQsIGFuZCBhdCBkYXlicmVhayBoZSB3YXMgaW4gZnVsbCB2aWV3IG9mIHRoZSBlbmVteSBhcyBoZSBhZHZhbmNlZCB1cG9uIHRoZW0gZnJvbSB0aGUgaGVpZ2h0cywgYW5kIGNhdXNlZCBtdWNoIHR1bXVsdCBhbmQgYWdpdGF0aW9uIGFtb25nIHRoZW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBwb3dlciBvZiB0aGUgU2Ftbml0ZXMgaGFkIGJlZW4gc2hhdHRlcmVkLCBhbmQgdGhlaXIgc3Bpcml0cyB3ZXJlIGJyb2tlbiwgaW4gY29uc2VxdWVuY2Ugb2YgbWFueSBkZWZlYXRzIGF0IHRoZSBoYW5kcyBvZiB0aGUgUm9tYW5zLiBUaGV5IGFsc28gY2hlcmlzaGVkIGNvbnNpZGVyYWJsZSByZXNlbnRtZW50IGFnYWluc3QgUHlycmh1cyBiZWNhdXNlIG9mIGhpcyBleHBlZGl0aW9uIHRvIFNpY2lseTsgaGVuY2Ugbm90IG1hbnkgb2YgdGhlbSBjYW1lIHRvIGpvaW4gaGltLiBQeXJyaHVzLCBob3dldmVyLCBkaXZpZGVkIGhpcyBhcm15IGluIHRvIHR3byBwYXJ0cywgc2VudCBvbmUgb2YgdGhlbSBpbnRvIEx1Y2FuaWEgdG8gYXR0YWNrIHRoZSBvdGhlciBjb25zdWwsIHRoYXQgaGUgbWlnaHQgbm90IGNvbWUgdG8gdGhlIGhlbHAgb2YgaGlzIGNvbGxlYWd1ZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBsZWQgdGhlIG90aGVyIHBhcnQgaGltc2VsZiBhZ2FpbnN0IE1hbml1cyBDdXJpdXMsIHdobyB3YXMgc2FmZWx5IGVuY2FtcGVkIG5lYXIgdGhlIGNpdHkgb2YgQmVuZXZlbnR1bSBhbmQgd2FzIGF3YWl0aW5nIGFzc2lzdGFuY2UgZnJvbSBMdWNhbmlhOyBpbiBwYXJ0IGFsc28gaXQgd2FzIGJlY2F1c2UgaGlzIHNvb3Roc2F5ZXJzIGhhZCBkaXNzdWFkZWQgaGltIHdpdGggdW5mYXZvdXJhYmxlIG9tZW5zIGFuZCBzYWNyaWZpY2VzIHRoYXQgaGUga2VwdCBxdWlldC4gUHlycmh1cywgYWNjb3JkaW5nbHksIGhhc3RlbmluZyB0byBhdHRhY2sgdGhpcyBjb25zdWwgYmVmb3JlIHRoZSBvdGhlciBvbmUgY2FtZSB1cCwgdG9vayBoaXMgYmVzdCBtZW4gYW5kIGhpcyBtb3N0IHdhcmxpa2UgZWxlcGhhbnRzIGFuZCBzZXQgb3V0IGJ5IG5pZ2h0IGFnYWluc3QgaGlzIGNhbXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBoZSB0b29rIGEgbG9uZyBjaXJjdWl0IHRocm91Z2ggYSBkZW5zZWx5IHdvb2RlZCBjb3VudHJ5LCBoaXMgbGlnaHRzIGRpZCBub3QgaG9sZCBvdXQsIGFuZCBoaXMgc29sZGllcnMgbG9zdCB0aGVpciB3YXkgYW5kIHN0cmFnZ2xlZC4gVGhpcyBjYXVzZWQgZGVsYXksIHNvIHRoYXQgdGhlIG5pZ2h0IHBhc3NlZCwgYW5kIGF0IGRheWJyZWFrIGhlIHdhcyBpbiBmdWxsIHZpZXcgb2YgdGhlIGVuZW15IGFzIGhlIGFkdmFuY2VkIHVwb24gdGhlbSBmcm9tIHRoZSBoZWlnaHRzLCBhbmQgY2F1c2VkIG11Y2ggdHVtdWx0IGFuZCBhZ2l0YXRpb24gYW1vbmcgdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5NYW5pdXMsIGhvd2V2ZXIsIHNpbmNlIHRoZSBzYWNyaWZpY2VzIHdlcmUgcHJvcGl0aW91cyBhbmQgdGhlIGNyaXNpcyBmb3JjZWQgYWN0aW9uIHVwb24gaGltLCBsZWQgaGlzIGZvcmNlcyBvdXQgYW5kIGF0dGFja2VkIHRoZSBmb3JlbW9zdCBvZiB0aGUgZW5lbXksIGFuZCBhZnRlciByb3V0aW5nIHRoZXNlLCBwdXQgdGhlaXIgd2hvbGUgYXJteSB0byBmbGlnaHQsIHNvIHRoYXQgbWFueSBvZiB0aGVtIGZlbGwgYW5kIHNvbWUgb2YgdGhlaXIgZWxlcGhhbnRzIHdlcmUgbGVmdCBiZWhpbmQgYW5kIGNhcHR1cmVkLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgdmljdG9yeSBicm91Z2h0IE1hbml1cyBkb3duIGludG8gdGhlIHBsYWluIHRvIGdpdmUgYmF0dGxlOyBoZXJlLCBhZnRlciBhbiBlbmdhZ2VtZW50IGluIHRoZSBvcGVuLCBoZSByb3V0ZWQgdGhlIGVuZW15IGF0IHNvbWUgcG9pbnRzLCBidXQgYXQgb25lIHdhcyBvdmVyd2hlbG1lZCBieSB0aGUgZWxlcGhhbnRzIGFuZCBkcml2ZW4gYmFjayB1cG9uIGhpcyBjYW1wLCB3aGVyZSBoZSB3YXMgb2JsaWdlZCB0byBjYWxsIHVwb24gdGhlIGd1YXJkcywgd2hvIHdlcmUgc3RhbmRpbmcgb24gdGhlIHBhcmFwZXRzIGluIGdyZWF0IG51bWJlcnMsIGFsbCBpbiBhcm1zLCBhbmQgZnVsbCBvZiBmcmVzaCB2aWdvdXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkRvd24gdGhleSBjYW1lIGZyb20gdGhlaXIgc3Ryb25nIHBsYWNlcywgYW5kIGh1cmxpbmcgdGhlaXIgamF2ZWxpbnMgYXQgdGhlIGVsZXBoYW50cyBjb21wZWxsZWQgdGhlbSB0byB3aGVlbCBhYm91dCBhbmQgcnVuIGJhY2sgdGhyb3VnaCB0aGUgcmFua3Mgb2YgdGhlaXIgb3duIG1lbiwgdGh1cyBjYXVzaW5nIGRpc29yZGVyIGFuZCBjb25mdXNpb24gdGhlcmUuIFRoaXMgZ2F2ZSB0aGUgdmljdG9yeSB0byB0aGUgUm9tYW5zLCBhbmQgYXQgdGhlIHNhbWUgdGltZSB0aGUgYWR2YW50YWdlIGFsc28gaW4gdGhlIHN0cnVnZ2xlIGZvciBzdXByZW1hY3kuIEZvciBoYXZpbmcgYWNxdWlyZWQgaGlnaCBjb3VyYWdlIGFuZCBwb3dlciBhbmQgYSByZXB1dGF0aW9uIGZvciBpbnZpbmNpYmlsaXR5IGZyb20gdGhlaXIgdmFsb3VyIGluIHRoZXNlIHN0cnVnZ2xlcywgdGhleSBhdCBvbmNlIGdvdCBjb250cm9sIG9mIEl0YWx5LCBhbmQgc29vbiBhZnRlcndhcmRzIG9mIFNpY2lseS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgdmljdG9yeSBicm91Z2h0IE1hbml1cyBkb3duIGludG8gdGhlIHBsYWluIHRvIGdpdmUgYmF0dGxlOyBoZXJlLCBhZnRlciBhbiBlbmdhZ2VtZW50IGluIHRoZSBvcGVuLCBoZSByb3V0ZWQgdGhlIGVuZW15IGF0IHNvbWUgcG9pbnRzLCBidXQgYXQgb25lIHdhcyBvdmVyd2hlbG1lZCBieSB0aGUgZWxlcGhhbnRzIGFuZCBkcml2ZW4gYmFjayB1cG9uIGhpcyBjYW1wLCB3aGVyZSBoZSB3YXMgb2JsaWdlZCB0byBjYWxsIHVwb24gdGhlIGd1YXJkcywgd2hvIHdlcmUgc3RhbmRpbmcgb24gdGhlIHBhcmFwZXRzIGluIGdyZWF0IG51bWJlcnMsIGFsbCBpbiBhcm1zLCBhbmQgZnVsbCBvZiBmcmVzaCB2aWdvdXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkRvd24gdGhleSBjYW1lIGZyb20gdGhlaXIgc3Ryb25nIHBsYWNlcywgYW5kIGh1cmxpbmcgdGhlaXIgamF2ZWxpbnMgYXQgdGhlIGVsZXBoYW50cyBjb21wZWxsZWQgdGhlbSB0byB3aGVlbCBhYm91dCBhbmQgcnVuIGJhY2sgdGhyb3VnaCB0aGUgcmFua3Mgb2YgdGhlaXIgb3duIG1lbiwgdGh1cyBjYXVzaW5nIGRpc29yZGVyIGFuZCBjb25mdXNpb24gdGhlcmUuIFRoaXMgZ2F2ZSB0aGUgdmljdG9yeSB0byB0aGUgUm9tYW5zLCBhbmQgYXQgdGhlIHNhbWUgdGltZSB0aGUgYWR2YW50YWdlIGFsc28gaW4gdGhlIHN0cnVnZ2xlIGZvciBzdXByZW1hY3kuIEZvciBoYXZpbmcgYWNxdWlyZWQgaGlnaCBjb3VyYWdlIGFuZCBwb3dlciBhbmQgYSByZXB1dGF0aW9uIGZvciBpbnZpbmNpYmlsaXR5IGZyb20gdGhlaXIgdmFsb3VyIGluIHRoZXNlIHN0cnVnZ2xlcywgdGhleSBhdCBvbmNlIGdvdCBjb250cm9sIG9mIEl0YWx5LCBhbmQgc29vbiBhZnRlcndhcmRzIG9mIFNpY2lseS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBQeXJyaHVzIHdhcyBleGNsdWRlZCBmcm9tIGhpcyBob3BlcyBvZiBJdGFseSBhbmQgU2ljaWx5LCBhZnRlciBzcXVhbmRlcmluZyBzaXggeWVhcnMnIHRpbWUgaW4gaGlzIHdhcnMgdGhlcmUsIGFuZCBhZnRlciBiZWluZyB3b3JzdGVkIGluIGhpcyB1bmRlcnRha2luZ3MsIGJ1dCBoZSBrZXB0IGhpcyBicmF2ZSBzcGlyaXQgdW5jb25xdWVyZWQgaW4gdGhlIG1pZHN0IG9mIGhpcyBkZWZlYXRzOyBhbmQgbWVuIGJlbGlldmVkIHRoYXQgaW4gbWlsaXRhcnkgZXhwZXJpZW5jZSwgcGVyc29uYWwgcHJvd2VzcywgYW5kIGRhcmluZywgaGUgd2FzIGJ5IGZhciB0aGUgZmlyc3Qgb2YgdGhlIGtpbmdzIG9mIGhpcyB0aW1lLCBidXQgdGhhdCB3aGF0IGhlIHdvbiBieSBoaXMgZXhwbG9pdHMgaGUgbG9zdCBieSBpbmR1bGdpbmcgaW4gdmFpbiBob3Blcywgc2luY2UgdGhyb3VnaCBwYXNzaW9uYXRlIGRlc2lyZSBmb3Igd2hhdCBoZSBoYWQgbm90IGhlIGFsd2F5cyBmYWlsZWQgdG8gZXN0YWJsaXNoIHNlY3VyZWx5IHdoYXQgaGUgaGFkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyByZWFzb24gQW50aWdvbnVzIHVzZWQgdG8gbGlrZW4gaGltIHRvIGEgcGxheWVyIHdpdGggZGljZSB3aG8gbWFrZXMgbWFueSBmaW5lIHRocm93cyBidXQgZG9lcyBub3QgdW5kZXJzdGFuZCBob3cgdG8gdXNlIHRoZW0gd2hlbiB0aGV5IGFyZSBtYWRlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBQeXJyaHVzIHdhcyBleGNsdWRlZCBmcm9tIGhpcyBob3BlcyBvZiBJdGFseSBhbmQgU2ljaWx5LCBhZnRlciBzcXVhbmRlcmluZyBzaXggeWVhcnMnIHRpbWUgaW4gaGlzIHdhcnMgdGhlcmUsIGFuZCBhZnRlciBiZWluZyB3b3JzdGVkIGluIGhpcyB1bmRlcnRha2luZ3MsIGJ1dCBoZSBrZXB0IGhpcyBicmF2ZSBzcGlyaXQgdW5jb25xdWVyZWQgaW4gdGhlIG1pZHN0IG9mIGhpcyBkZWZlYXRzOyBhbmQgbWVuIGJlbGlldmVkIHRoYXQgaW4gbWlsaXRhcnkgZXhwZXJpZW5jZSwgcGVyc29uYWwgcHJvd2VzcywgYW5kIGRhcmluZywgaGUgd2FzIGJ5IGZhciB0aGUgZmlyc3Qgb2YgdGhlIGtpbmdzIG9mIGhpcyB0aW1lLCBidXQgdGhhdCB3aGF0IGhlIHdvbiBieSBoaXMgZXhwbG9pdHMgaGUgbG9zdCBieSBpbmR1bGdpbmcgaW4gdmFpbiBob3Blcywgc2luY2UgdGhyb3VnaCBwYXNzaW9uYXRlIGRlc2lyZSBmb3Igd2hhdCBoZSBoYWQgbm90IGhlIGFsd2F5cyBmYWlsZWQgdG8gZXN0YWJsaXNoIHNlY3VyZWx5IHdoYXQgaGUgaGFkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBBbnRpZ29udXMgdXNlZCB0byBsaWtlbiBoaW0gdG8gYSBwbGF5ZXIgd2l0aCBkaWNlIHdobyBtYWtlcyBtYW55IGZpbmUgdGhyb3dzIGJ1dCBkb2VzIG5vdCB1bmRlcnN0YW5kIGhvdyB0byB1c2UgdGhlbSB3aGVuIHRoZXkgYXJlIG1hZGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgcmV0dXJuZWQgdG8gRXBlaXJ1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TGF0ZSBpbiB0aGUgeWVhciAyNzQgQi5DLjwvbm90ZT4gd2l0aCBlaWdodCB0aG91c2FuZCBmb290IGFuZCBmaXZlIGh1bmRyZWQgaG9yc2UsIGFuZCBzaW5jZSBoZSBoYWQgbm8gbW9uZXkgaGUgc291Z2h0IGZvciBhIHdhciBieSB3aGljaCBoZSBjb3VsZCBtYWludGFpbiBoaXMgYXJteS4gU29tZSBHYXVscyBqb2luZWQgaGltLCBhbmQgaGUgdGhlcmV1cG9uIG1hZGUgYW4gaW5jdXJzaW9uIGludG8gTWFjZWRvbmlhLCB3aGVyZSBBbnRpZ29udXMgdGhlIHNvbiBvZiBEZW1ldHJpdXMgd2FzIHJlaWduaW5nLCBkZXNpZ25pbmcgdG8gc3RyaXAgYW5kIHBsdW5kZXIgdGhlIGNvdW50cnkuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIGhlIGhhZCB0YWtlbiBhIGdyZWF0IG51bWJlciBvZiBjaXRpZXMgYW5kIHR3byB0aG91c2FuZCBNYWNlZG9uaWFuIHNvbGRpZXJzIGhhZCBjb21lIG92ZXIgdG8gaGltLCBoZSBiZWdhbiB0byBob3BlIGZvciBncmVhdGVyIHRoaW5ncywgYW5kIHNldCBvdXQgdG8gYXR0YWNrIEFudGlnb251cywgYW5kIGZhbGxpbmcgdXBvbiBoaW0gaW4gYSBuYXJyb3cgcGFzcywgdGhyZXcgaGlzIHdob2xlIGFybXkgaW50byBjb25mdXNpb24uIFRoZSBHYXVscyB3aG8gZm9ybWVkIHRoZSByZWFyZ3VhcmQgb2YgQW50aWdvbnVzLCBhIG51bWVyb3VzIGJvZHksIG1hZGUgYSBzdHVyZHkgcmVzaXN0YW5jZTsgYnV0IGFmdGVyIGEgZmllcmNlIGJhdHRsZSBtb3N0IG9mIHRoZXNlIHdlcmUgY3V0IHRvIHBpZWNlcywgd2hpbGUgdGhvc2Ugd2hvIGhhZCBjaGFyZ2Ugb2YgdGhlIGVsZXBoYW50cyB3ZXJlIGhlbW1lZCBpbiBhbmQgc3VycmVuZGVyZWQgdGhlbXNlbHZlcyBhbmQgYWxsIHRoZWlyIGFuaW1hbHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gUHlycmh1cywgdGh1cyBncmVhdGx5IHN0cmVuZ3RoZW5lZCwgYW5kIGNvbnN1bHRpbmcgaGlzIGdvb2QgZm9ydHVuZSByYXRoZXIgdGhhbiBoaXMganVkZ21lbnQsIGFkdmFuY2VkIHVwb24gdGhlIHBoYWxhbnggb2YgdGhlIE1hY2Vkb25pYW5zLCB3aGljaCB3YXMgZmlsbGVkIHdpdGggY29uZnVzaW9uIGFuZCBmZWFyIGJlY2F1c2Ugb2YgdGhlaXIgcHJldmlvdXMgZGVmZWF0LiBGb3IgdGhpcyByZWFzb24gdGhleSByZWZyYWluZWQgZnJvbSBlbmdhZ2VtZW50IG9yIGJhdHRsZSB3aXRoIGhpbSwgd2hlcmV1cG9uIFB5cnJodXMsIHN0cmV0Y2hpbmcgb3V0IGhpcyByaWdodCBoYW5kIGFuZCBjYWxsaW5nIHVwb24gdGhlIGdlbmVyYWxzIGFuZCBjYXB0YWlucywgYnJvdWdodCBvdmVyIHRvIGhpbSBhbGwgdGhlIGluZmFudHJ5IG9mIEFudGlnb251cyBpbiBhIGJvZHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIEFudGlnb251cyB0b29rIHRvIGZsaWdodCB3aXRoIGEgZmV3IG9mIGhpcyBob3JzZW1lbiwgYW5kIG9jY3VwaWVkIHNvbWUgb2YgdGhlIHNlYWJvYXJkIGNpdGllczsgd2hpbGUgUHlycmh1cywgdGhpbmtpbmcgdGhhdCBhbWlkIHNvIG1hbnkgc3VjY2Vzc2VzIGhpcyBhY2hpZXZlbWVudCBhZ2FpbnN0IHRoZSBHYXVscyBjb25kdWNlZCBtb3N0IHRvIGhpcyBnbG9yeSwgZGVkaWNhdGVkIHRoZSBtb3N0IGJlYXV0aWZ1bCBhbmQgc3BsZW5kaWQgb2YgdGhlIHNwb2lscyBpbiB0aGUgdGVtcGxlIG9mIEF0aGVuYSBJdG9uaXMsIHdpdGggdGhlIGZvbGxvd2luZyBlbGVnaWFjIGluc2NyaXB0aW9uOgoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5UaGVzZSBzaGllbGRzLCBub3cgc3VzcGVuZGVkIGhlcmUgYXMgYSBnaWZ0IHRvIEF0aGVuYSBJdG9uaXMsIFB5cnJodXMgdGhlIE1vbG9zc2lhbiB0b29rIGZyb20gdmFsaWFudCBHYXVscywgYWZ0ZXIgZGVmZWF0aW5nIHRoZSBlbnRpcmUgYXJteSBvZiBBbnRpZ29udXM7IHdoaWNoIGlzIG5vIGdyZWF0IHdvbmRlcjsgZm9yIG5vdywgYXMgd2VsbCBhcyBpbiBvbGRlbiB0aW1lLCB0aGUgQWVhY2lkYWUgYXJlIGJyYXZlIHNwZWFybWVuLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQWZ0ZXIgdGhlIGJhdHRsZSwgaG93ZXZlciwgaGUgYXQgb25jZSBwcm9jZWVkZWQgdG8gb2NjdXB5IHRoZSBjaXRpZXMuIEFuZCBhZnRlciBnZXR0aW5nIEFlZ2FlIGludG8gaGlzIHBvd2VyLCBiZXNpZGVzIG90aGVyIHNldmVudGllcyBleGVyY2lzZWQgdXBvbiBpdHMgaW5oYWJpdGFudHMgaGUgbGVmdCBhcyBhIGdhcnJpc29uIGluIHRoZSBjaXR5IHNvbWUgb2YgdGhlIEdhdWxzIHdobyB3ZXJlIG1ha2luZyB0aGUgY2FtcGFpZ24gd2l0aCBoaW0uIEJ1dCB0aGUgR2F1bHMsIGEgcmFjZSBpbnNhdGlhYmxlIG9mIHdlYWx0aCwgc2V0IHRoZW1zZWx2ZXMgdG8gZGlnZ2luZyB1cCB0aGUgdG9tYnMgb2YgdGhlIGtpbmdzIHdobyBoYWQgYmVlbiBidXJpZWQgdGhlcmU7IHRoZSB0cmVhc3VyZSB0aGV5IHBsdW5kZXJlZCwgdGhlIGJvbmVzIHRoZXkgaW5zb2xlbnRseSBjYXN0IHRvIHRoZSBmb3VyIHdpbmRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG91dHJhZ2UgUHlycmh1cyB0cmVhdGVkIHdpdGggbGlnaHRuZXNzIGFuZCBpbmRpZmZlcmVuY2UsIGFzIGl0IHdhcyB0aG91Z2h0OyBoZSBlaXRoZXIgcG9zdHBvbmVkIHB1bmlzaG1lbnQgYmVjYXVzZSBoZSBoYWQgc29tZSBidXNpbmVzcyBvbiBoYW5kLCBvciByZW1pdHRlZCBpdCBhbHRvZ2V0aGVyIGJlY2F1c2UgaGUgd2FzIGFmcmFpZCB0byBjaGFzdGlzZSB0aGUgQmFyYmFyaWFuczsgYW5kIG9uIHRoaXMgYWNjb3VudCBoZSB3YXMgY2Vuc3VyZWQgYnkgdGhlIE1hY2Vkb25pYW5zLiBNb3Jlb3ZlciwgYmVmb3JlIGhpcyBhZmZhaXJzIHdlcmUgc2VjdXJlbHkgYW5kIGZpcm1seSBlc3RhYmxpc2hlZCwgaGlzIHRob3VnaHRzIHN3dW5nIGFnYWluIHRvd2FyZHMgbmV3IGhvcGVzLiBIZSByYWlsZWQgYXQgQW50aWdvbnVzIGFuZCBjYWxsZWQgaGltIGEgc2hhbWVsZXNzIG1hbiBmb3Igbm90IGxheWluZyBhc2lkZSB0aGUgcHVycGxlIGFuZCB3ZWFyaW5nIGEgY29tbW9uIHJvYmU7IGFuZCB3aGVuIENsZW9ueW11cyB0aGUgU3BhcnRhbiBjYW1lIGFuZCBpbnZpdGVkIGhpbSB0byBjb21lIHRvIExhY2VkYWVtb24sIGhlIHJlYWRpbHkgbGlzdGVuZWQgdG8gaGltLgoJCQk8L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TGF0ZSBpbiB0aGUgeWVhciAyNzQgQi5DLjwvbm90ZT4gd2l0aCBlaWdodCB0aG91c2FuZCBmb290IGFuZCBmaXZlIGh1bmRyZWQgaG9yc2UsIGFuZCBzaW5jZSBoZSBoYWQgbm8gbW9uZXkgaGUgc291Z2h0IGZvciBhIHdhciBieSB3aGljaCBoZSBjb3VsZCBtYWludGFpbiBoaXMgYXJteS4gU29tZSBHYXVscyBqb2luZWQgaGltLCBhbmQgaGUgdGhlcmV1cG9uIG1hZGUgYW4gaW5jdXJzaW9uIGludG8gTWFjZWRvbmlhLCB3aGVyZSBBbnRpZ29udXMgdGhlIHNvbiBvZiBEZW1ldHJpdXMgd2FzIHJlaWduaW5nLCBkZXNpZ25pbmcgdG8gc3RyaXAgYW5kIHBsdW5kZXIgdGhlIGNvdW50cnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBoZSBoYWQgdGFrZW4gYSBncmVhdCBudW1iZXIgb2YgY2l0aWVzIGFuZCB0d28gdGhvdXNhbmQgTWFjZWRvbmlhbiBzb2xkaWVycyBoYWQgY29tZSBvdmVyIHRvIGhpbSwgaGUgYmVnYW4gdG8gaG9wZSBmb3IgZ3JlYXRlciB0aGluZ3MsIGFuZCBzZXQgb3V0IHRvIGF0dGFjayBBbnRpZ29udXMsIGFuZCBmYWxsaW5nIHVwb24gaGltIGluIGEgbmFycm93IHBhc3MsIHRocmV3IGhpcyB3aG9sZSBhcm15IGludG8gY29uZnVzaW9uLiBUaGUgR2F1bHMgd2hvIGZvcm1lZCB0aGUgcmVhcmd1YXJkIG9mIEFudGlnb251cywgYSBudW1lcm91cyBib2R5LCBtYWRlIGEgc3R1cmR5IHJlc2lzdGFuY2U7IGJ1dCBhZnRlciBhIGZpZXJjZSBiYXR0bGUgbW9zdCBvZiB0aGVzZSB3ZXJlIGN1dCB0byBwaWVjZXMsIHdoaWxlIHRob3NlIHdobyBoYWQgY2hhcmdlIG9mIHRoZSBlbGVwaGFudHMgd2VyZSBoZW1tZWQgaW4gYW5kIHN1cnJlbmRlcmVkIHRoZW1zZWx2ZXMgYW5kIGFsbCB0aGVpciBhbmltYWxzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gUHlycmh1cywgdGh1cyBncmVhdGx5IHN0cmVuZ3RoZW5lZCwgYW5kIGNvbnN1bHRpbmcgaGlzIGdvb2QgZm9ydHVuZSByYXRoZXIgdGhhbiBoaXMganVkZ21lbnQsIGFkdmFuY2VkIHVwb24gdGhlIHBoYWxhbnggb2YgdGhlIE1hY2Vkb25pYW5zLCB3aGljaCB3YXMgZmlsbGVkIHdpdGggY29uZnVzaW9uIGFuZCBmZWFyIGJlY2F1c2Ugb2YgdGhlaXIgcHJldmlvdXMgZGVmZWF0LiBGb3IgdGhpcyByZWFzb24gdGhleSByZWZyYWluZWQgZnJvbSBlbmdhZ2VtZW50IG9yIGJhdHRsZSB3aXRoIGhpbSwgd2hlcmV1cG9uIFB5cnJodXMsIHN0cmV0Y2hpbmcgb3V0IGhpcyByaWdodCBoYW5kIGFuZCBjYWxsaW5nIHVwb24gdGhlIGdlbmVyYWxzIGFuZCBjYXB0YWlucywgYnJvdWdodCBvdmVyIHRvIGhpbSBhbGwgdGhlIGluZmFudHJ5IG9mIEFudGlnb251cyBpbiBhIGJvZHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIEFudGlnb251cyB0b29rIHRvIGZsaWdodCB3aXRoIGEgZmV3IG9mIGhpcyBob3JzZW1lbiwgYW5kIG9jY3VwaWVkIHNvbWUgb2YgdGhlIHNlYWJvYXJkIGNpdGllczsgd2hpbGUgUHlycmh1cywgdGhpbmtpbmcgdGhhdCBhbWlkIHNvIG1hbnkgc3VjY2Vzc2VzIGhpcyBhY2hpZXZlbWVudCBhZ2FpbnN0IHRoZSBHYXVscyBjb25kdWNlZCBtb3N0IHRvIGhpcyBnbG9yeSwgZGVkaWNhdGVkIHRoZSBtb3N0IGJlYXV0aWZ1bCBhbmQgc3BsZW5kaWQgb2YgdGhlIHNwb2lscyBpbiB0aGUgdGVtcGxlIG9mIEF0aGVuYSBJdG9uaXMsIHdpdGggdGhlIGZvbGxvd2luZyBlbGVnaWFjIGluc2NyaXB0aW9uOgoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlc2Ugc2hpZWxkcywgbm93IHN1c3BlbmRlZCBoZXJlIGFzIGEgZ2lmdCB0byBBdGhlbmEgSXRvbmlzLCBQeXJyaHVzIHRoZSBNb2xvc3NpYW4gdG9vayBmcm9tIHZhbGlhbnQgR2F1bHMsIGFmdGVyIGRlZmVhdGluZyB0aGUgZW50aXJlIGFybXkgb2YgQW50aWdvbnVzOyB3aGljaCBpcyBubyBncmVhdCB3b25kZXI7IGZvciBub3csIGFzIHdlbGwgYXMgaW4gb2xkZW4gdGltZSwgdGhlIEFlYWNpZGFlIGFyZSBicmF2ZSBzcGVhcm1lbi48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlc2Ugc2hpZWxkcywgbm93IHN1c3BlbmRlZCBoZXJlIGFzIGEgZ2lmdCB0byBBdGhlbmEgSXRvbmlzLCBQeXJyaHVzIHRoZSBNb2xvc3NpYW4gdG9vayBmcm9tIHZhbGlhbnQgR2F1bHMsIGFmdGVyIGRlZmVhdGluZyB0aGUgZW50aXJlIGFybXkgb2YgQW50aWdvbnVzOyB3aGljaCBpcyBubyBncmVhdCB3b25kZXI7IGZvciBub3csIGFzIHdlbGwgYXMgaW4gb2xkZW4gdGltZSwgdGhlIEFlYWNpZGFlIGFyZSBicmF2ZSBzcGVhcm1lbi48L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQWZ0ZXIgdGhlIGJhdHRsZSwgaG93ZXZlciwgaGUgYXQgb25jZSBwcm9jZWVkZWQgdG8gb2NjdXB5IHRoZSBjaXRpZXMuIEFuZCBhZnRlciBnZXR0aW5nIEFlZ2FlIGludG8gaGlzIHBvd2VyLCBiZXNpZGVzIG90aGVyIHNldmVudGllcyBleGVyY2lzZWQgdXBvbiBpdHMgaW5oYWJpdGFudHMgaGUgbGVmdCBhcyBhIGdhcnJpc29uIGluIHRoZSBjaXR5IHNvbWUgb2YgdGhlIEdhdWxzIHdobyB3ZXJlIG1ha2luZyB0aGUgY2FtcGFpZ24gd2l0aCBoaW0uIEJ1dCB0aGUgR2F1bHMsIGEgcmFjZSBpbnNhdGlhYmxlIG9mIHdlYWx0aCwgc2V0IHRoZW1zZWx2ZXMgdG8gZGlnZ2luZyB1cCB0aGUgdG9tYnMgb2YgdGhlIGtpbmdzIHdobyBoYWQgYmVlbiBidXJpZWQgdGhlcmU7IHRoZSB0cmVhc3VyZSB0aGV5IHBsdW5kZXJlZCwgdGhlIGJvbmVzIHRoZXkgaW5zb2xlbnRseSBjYXN0IHRvIHRoZSBmb3VyIHdpbmRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgb3V0cmFnZSBQeXJyaHVzIHRyZWF0ZWQgd2l0aCBsaWdodG5lc3MgYW5kIGluZGlmZmVyZW5jZSwgYXMgaXQgd2FzIHRob3VnaHQ7IGhlIGVpdGhlciBwb3N0cG9uZWQgcHVuaXNobWVudCBiZWNhdXNlIGhlIGhhZCBzb21lIGJ1c2luZXNzIG9uIGhhbmQsIG9yIHJlbWl0dGVkIGl0IGFsdG9nZXRoZXIgYmVjYXVzZSBoZSB3YXMgYWZyYWlkIHRvIGNoYXN0aXNlIHRoZSBCYXJiYXJpYW5zOyBhbmQgb24gdGhpcyBhY2NvdW50IGhlIHdhcyBjZW5zdXJlZCBieSB0aGUgTWFjZWRvbmlhbnMuIE1vcmVvdmVyLCBiZWZvcmUgaGlzIGFmZmFpcnMgd2VyZSBzZWN1cmVseSBhbmQgZmlybWx5IGVzdGFibGlzaGVkLCBoaXMgdGhvdWdodHMgc3d1bmcgYWdhaW4gdG93YXJkcyBuZXcgaG9wZXMuIEhlIHJhaWxlZCBhdCBBbnRpZ29udXMgYW5kIGNhbGxlZCBoaW0gYSBzaGFtZWxlc3MgbWFuIGZvciBub3QgbGF5aW5nIGFzaWRlIHRoZSBwdXJwbGUgYW5kIHdlYXJpbmcgYSBjb21tb24gcm9iZTsgYW5kIHdoZW4gQ2xlb255bXVzIHRoZSBTcGFydGFuIGNhbWUgYW5kIGludml0ZWQgaGltIHRvIGNvbWUgdG8gTGFjZWRhZW1vbiwgaGUgcmVhZGlseSBsaXN0ZW5lZCB0byBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQ2xlb255bXVzIHdhcyBvZiByb3lhbCBsaW5lYWdlLCBidXQgYmVjYXVzZSBoZSB3YXMgdGhvdWdodCB0byBiZSBvZiBhIHZpb2xlbnQgYW5kIGFyYml0cmFyeSB0ZW1wZXIsIGhlIGVuam95ZWQgbmVpdGhlciBnb29kd2lsbCBub3IgY29uZmlkZW5jZSBhdCBob21lLCBidXQgQXJldXMgd2FzIGtpbmcgdGhlcmUuIFRoaXMgd2FzIG9uZSBnZW5lcmFsIGdyb3VuZCBvZiBjb21wbGFpbnQgd2hpY2ggaGUgaGFkIGFnYWluc3QgaGlzIGZlbGxvdyBjaXRpemVucywgYW5kIGl0IHdhcyBvZiBsb25nIHN0YW5kaW5nLiBCZXNpZGVzLCBDbGVvbnltdXMgaW4gaGlzIGxhdGVyIHllYXJzIGhhZCBtYXJyaWVkIENoaWxvbmlzIHRoZSBkYXVnaHRlciBvZiBMZW90eWNoaWRlcywgYSBiZWF1dGlmdWwgd29tYW4gb2Ygcm95YWwgbGluZWFnZTsgYnV0IHNoZSBoYWQgZmFsbGVuIGRlc3BlcmF0ZWx5IGluIGxvdmUgd2l0aCBBY3JvdGF0dXMgdGhlIHNvbiBvZiBBcmV1cywgYSB5b3VuZyBtYW4gaW4gdGhlIGZsb3dlciBvZiBoaXMgYWdlLCBhbmQgdGh1cyByZW5kZXJlZCBoaXMgbWFycmlhZ2UgZGlzdHJlc3NpbmcgdG8gQ2xlb255bXVzLCBzaW5jZSBoZSBsb3ZlZCBoZXIsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIGRpc2dyYWNlZnVsOyBmb3IgZXZlcnkgU3BhcnRhbiB3YXMgd2VsbCBhd2FyZSB0aGF0IHRoZSBodXNiYW5kIHdhcyBkZXNwaXNlZCBieSBoaXMgd2lmZS4gCgkJCQk8bWlsZXN0b25lIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBoaXMgZG9tZXN0aWMgdmV4YXRpb25zIGFkZGVkIHRoZW1zZWx2ZXMgdG8gaGlzIHBvbGl0aWNhbCBkaXNhcHBvaW50bWVudCwgYW5kIGluIGluZGlnbmF0aW9uIGFuZCB3cmF0aCBoZSBicm91Z2h0IFB5cnJodXMgYWdhaW5zdCBTcGFydGEuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjcyIEIuQy48L25vdGU+IFB5cnJodXMgaGFkIHR3ZW50eS1maXZlIHRob3VzYW5kIGZvb3QgYW5kIHR3byB0aG91c2FuZCBob3JzZSwgYmVzaWRlcyB0d2VudHktZm91ciBlbGVwaGFudHMsIHNvIHRoYXQgdGhlIG1hZ25pdHVkZSBvZiBoaXMgcHJlcGFyYXRpb25zIG1hZGUgaXQgY2xlYXIgYXQgb25jZSB0aGF0IGhlIHdhcyBub3QgYWltaW5nIHRvIGFjcXVpcmUgU3BhcnRhIGZvciBDbGVvbnltdXMsIGJ1dCB0aGUgUGVsb3Bvbm5lc3VzIGZvciBoaW1zZWxmLiBBbmQgeWV0IGhpcyBwcm9mZXNzaW9ucyB3ZXJlIGFsbCB0byB0aGUgY29udHJhcnksIGFuZCBwYXJ0aWN1bGFybHkgdGhvc2Ugd2hpY2ggaGUgbWFkZSB0byB0aGUgTGFjZWRhZW1vbmlhbiBhbWJhc3NhZG9ycyB0aGVtc2VsdmVzIHdoZW4gdGhleSBtZXQgaGltIGF0IE1lZ2Fsb3BvbGlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+SGUgdG9sZCB0aGVtIGhlIGhhZCBjb21lIHRvIHNldCBmcmVlIHRoZSBjaXRpZXMgd2hpY2ggd2VyZSBzdWJqZWN0IHRvIEFudGlnb251cywgeWVzLCBhbmQgdGhhdCBoZSB3YXMgZ29pbmcgdG8gc2VuZCBoaXMgeW91bmdlciBzb25zIHRvIFNwYXJ0YSwgaWYgbm90aGluZyBwcmV2ZW50ZWQsIHRvIGJlIGJyb3VnaHQgdXAgaW4gdGhlIExhY2VkYWVtb25pYW4gY3VzdG9tcywgdGhhdCBzbyB0aGV5IG1pZ2h0IHByZXNlbnRseSBoYXZlIHRoZSBhZHZhbnRhZ2Ugb3ZlciBhbGwgb3RoZXIgcHJpbmNlcy4gV2l0aCB0aGVzZSBmaWN0aW9ucyBoZSBiZWd1aWxlZCB0aG9zZSB3aG8gY2FtZSB0byBtZWV0IGhpbSBvbiBoaXMgbWFyY2gsIGJ1dCBhcyBzb29uIGFzIGhlIHJlYWNoZWQgTGFjb25pYW4gdGVycml0b3J5IGhlIGJlZ2FuIHRvIHJhdmFnZSBhbmQgcGx1bmRlciBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBTcGFydGFuIGFtYmFzc2Fkb3JzIHVwYnJhaWRlZCBoaW0gZm9yIG1ha2luZyB3YXIgdXBvbiB0aGVtIHdpdGhvdXQgcHJldmlvdXMgZGVjbGFyYXRpb24sIGhlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWV0IHdlIGtub3cgdGhhdCB5b3UgU3BhcnRhbnMgYWxzbyBkbyBub3QgdGVsbCBvdGhlcnMgYmVmb3JlaGFuZCB3aGF0IHlvdSBhcmUgZ29pbmcgdG8gZG8uPC9xPiBXaGVyZXVwb24gb25lIG9mIHRob3NlIHdobyB3ZXJlIHByZXNlbnQsIE1hbmRyb2NsZWlkYXMgYnkgbmFtZSwgc2FpZCB0byBoaW0gaW4gdGhlIGJyb2FkIFNwYXJ0YW4gZGlhbGVjdDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JZiB0aG91IGFydCBhIGdvZCwgd2Ugc2hhbGwgc3VmZmVyIG5vIGhhcm0gYXQgdGh5IGhhbmRzOyBmb3Igd2UgaGF2ZSBkb25lIHRoZWUgbm8gd3Jvbmc7IGJ1dCBpZiBhIG1hbiwgYW5vdGhlciB3aWxsIGJlIGZvdW5kIHdobyBpcyBldmVuIHN0cm9uZ2VyIHRoYW4gdGhvdS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQ2xlb255bXVzIHdhcyBvZiByb3lhbCBsaW5lYWdlLCBidXQgYmVjYXVzZSBoZSB3YXMgdGhvdWdodCB0byBiZSBvZiBhIHZpb2xlbnQgYW5kIGFyYml0cmFyeSB0ZW1wZXIsIGhlIGVuam95ZWQgbmVpdGhlciBnb29kd2lsbCBub3IgY29uZmlkZW5jZSBhdCBob21lLCBidXQgQXJldXMgd2FzIGtpbmcgdGhlcmUuIFRoaXMgd2FzIG9uZSBnZW5lcmFsIGdyb3VuZCBvZiBjb21wbGFpbnQgd2hpY2ggaGUgaGFkIGFnYWluc3QgaGlzIGZlbGxvdyBjaXRpemVucywgYW5kIGl0IHdhcyBvZiBsb25nIHN0YW5kaW5nLiBCZXNpZGVzLCBDbGVvbnltdXMgaW4gaGlzIGxhdGVyIHllYXJzIGhhZCBtYXJyaWVkIENoaWxvbmlzIHRoZSBkYXVnaHRlciBvZiBMZW90eWNoaWRlcywgYSBiZWF1dGlmdWwgd29tYW4gb2Ygcm95YWwgbGluZWFnZTsgYnV0IHNoZSBoYWQgZmFsbGVuIGRlc3BlcmF0ZWx5IGluIGxvdmUgd2l0aCBBY3JvdGF0dXMgdGhlIHNvbiBvZiBBcmV1cywgYSB5b3VuZyBtYW4gaW4gdGhlIGZsb3dlciBvZiBoaXMgYWdlLCBhbmQgdGh1cyByZW5kZXJlZCBoaXMgbWFycmlhZ2UgZGlzdHJlc3NpbmcgdG8gQ2xlb255bXVzLCBzaW5jZSBoZSBsb3ZlZCBoZXIsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIGRpc2dyYWNlZnVsOyBmb3IgZXZlcnkgU3BhcnRhbiB3YXMgd2VsbCBhd2FyZSB0aGF0IHRoZSBodXNiYW5kIHdhcyBkZXNwaXNlZCBieSBoaXMgd2lmZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgaGlzIGRvbWVzdGljIHZleGF0aW9ucyBhZGRlZCB0aGVtc2VsdmVzIHRvIGhpcyBwb2xpdGljYWwgZGlzYXBwb2ludG1lbnQsIGFuZCBpbiBpbmRpZ25hdGlvbiBhbmQgd3JhdGggaGUgYnJvdWdodCBQeXJyaHVzIGFnYWluc3QgU3BhcnRhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjcyIEIuQy48L25vdGU+IFB5cnJodXMgaGFkIHR3ZW50eS1maXZlIHRob3VzYW5kIGZvb3QgYW5kIHR3byB0aG91c2FuZCBob3JzZSwgYmVzaWRlcyB0d2VudHktZm91ciBlbGVwaGFudHMsIHNvIHRoYXQgdGhlIG1hZ25pdHVkZSBvZiBoaXMgcHJlcGFyYXRpb25zIG1hZGUgaXQgY2xlYXIgYXQgb25jZSB0aGF0IGhlIHdhcyBub3QgYWltaW5nIHRvIGFjcXVpcmUgU3BhcnRhIGZvciBDbGVvbnltdXMsIGJ1dCB0aGUgUGVsb3Bvbm5lc3VzIGZvciBoaW1zZWxmLiBBbmQgeWV0IGhpcyBwcm9mZXNzaW9ucyB3ZXJlIGFsbCB0byB0aGUgY29udHJhcnksIGFuZCBwYXJ0aWN1bGFybHkgdGhvc2Ugd2hpY2ggaGUgbWFkZSB0byB0aGUgTGFjZWRhZW1vbmlhbiBhbWJhc3NhZG9ycyB0aGVtc2VsdmVzIHdoZW4gdGhleSBtZXQgaGltIGF0IE1lZ2Fsb3BvbGlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB0b2xkIHRoZW0gaGUgaGFkIGNvbWUgdG8gc2V0IGZyZWUgdGhlIGNpdGllcyB3aGljaCB3ZXJlIHN1YmplY3QgdG8gQW50aWdvbnVzLCB5ZXMsIGFuZCB0aGF0IGhlIHdhcyBnb2luZyB0byBzZW5kIGhpcyB5b3VuZ2VyIHNvbnMgdG8gU3BhcnRhLCBpZiBub3RoaW5nIHByZXZlbnRlZCwgdG8gYmUgYnJvdWdodCB1cCBpbiB0aGUgTGFjZWRhZW1vbmlhbiBjdXN0b21zLCB0aGF0IHNvIHRoZXkgbWlnaHQgcHJlc2VudGx5IGhhdmUgdGhlIGFkdmFudGFnZSBvdmVyIGFsbCBvdGhlciBwcmluY2VzLiBXaXRoIHRoZXNlIGZpY3Rpb25zIGhlIGJlZ3VpbGVkIHRob3NlIHdobyBjYW1lIHRvIG1lZXQgaGltIG9uIGhpcyBtYXJjaCwgYnV0IGFzIHNvb24gYXMgaGUgcmVhY2hlZCBMYWNvbmlhbiB0ZXJyaXRvcnkgaGUgYmVnYW4gdG8gcmF2YWdlIGFuZCBwbHVuZGVyIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiB0aGUgU3BhcnRhbiBhbWJhc3NhZG9ycyB1cGJyYWlkZWQgaGltIGZvciBtYWtpbmcgd2FyIHVwb24gdGhlbSB3aXRob3V0IHByZXZpb3VzIGRlY2xhcmF0aW9uLCBoZSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWV0IHdlIGtub3cgdGhhdCB5b3UgU3BhcnRhbnMgYWxzbyBkbyBub3QgdGVsbCBvdGhlcnMgYmVmb3JlaGFuZCB3aGF0IHlvdSBhcmUgZ29pbmcgdG8gZG8uPC9xPiBXaGVyZXVwb24gb25lIG9mIHRob3NlIHdobyB3ZXJlIHByZXNlbnQsIE1hbmRyb2NsZWlkYXMgYnkgbmFtZSwgc2FpZCB0byBoaW0gaW4gdGhlIGJyb2FkIFNwYXJ0YW4gZGlhbGVjdDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHRob3UgYXJ0IGEgZ29kLCB3ZSBzaGFsbCBzdWZmZXIgbm8gaGFybSBhdCB0aHkgaGFuZHM7IGZvciB3ZSBoYXZlIGRvbmUgdGhlZSBubyB3cm9uZzsgYnV0IGlmIGEgbWFuLCBhbm90aGVyIHdpbGwgYmUgZm91bmQgd2hvIGlzIGV2ZW4gc3Ryb25nZXIgdGhhbiB0aG91LjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgbWFyY2hlZCBkb3duIGFnYWluc3QgdGhlIGNpdHkgb2YgU3BhcnRhLiBDbGVvbnltdXMgdXJnZWQgaGltIHRvIG1ha2UgdGhlIGFzc2F1bHQgYXMgc29vbiBhcyBoZSBhcnJpdmVkLCBidXQgUHlycmh1cyB3YXMgYWZyYWlkLCBhcyB3ZSBhcmUgdG9sZCwgdGhhdCBoaXMgc29sZGllcnMgd291bGQgcGx1bmRlciB0aGUgY2l0eSBpZiB0aGV5IGZlbGwgdXBvbiBpdCBhdCBuaWdodCwgYW5kIHRoZXJlZm9yZSByZXN0cmFpbmVkIHRoZW0sIHNheWluZyB0aGF0IHRoZXkgd291bGQgYWNjb21wbGlzaCBqdXN0IGFzIG11Y2ggYnkgZGF5LiBGb3IgdGhlcmUgd2VyZSBidXQgZmV3IG1lbiBpbiB0aGUgY2l0eSwgYW5kIHRoZXkgd2VyZSB1bnByZXBhcmVkLCBvd2luZyB0byB0aGUgc3VkZGVubmVzcyBvZiB0aGUgcGVyaWw7IGFuZCBBcmV1cyB3YXMgbm90IGF0IGhvbWUsIGJ1dCBpbiBDcmV0ZSwgd2hpdGhlciBoZSB3YXMgYnJpbmdpbmcgbWlsaXRhcnkgYWlkIGZvciB0aGUgR29ydHluaWFucy4gQW5kIHRoaXMsIGluZGVlZCwgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UsIHByb3ZlZCB0aGUgc2FsdmF0aW9uIG9mIHRoZSBjaXR5LCB3aGljaCBpdHMgd2Vha25lc3MgYW5kIGxhY2sgb2YgZGVmZW5kZXJzIGNhdXNlZCB0byBiZSBkZXNwaXNlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIFB5cnJodXMsIHRoaW5raW5nIHRoYXQgbm8gb25lIHdvdWxkIGdpdmUgaGltIGJhdHRsZSwgYml2b3VhY2tlZCBmb3IgdGhlIG5pZ2h0LCBhbmQgdGhlIGZyaWVuZHMgYW5kIEhlbG90IHNsYXZlcyBvZiBDbGVvbnltdXMgYWRvcm5lZCBhbmQgZnVybmlzaGVkIGhpcyBob3VzZSBpbiB0aGUgZXhwZWN0YXRpb24gdGhhdCBQeXJyaHVzIHdvdWxkIHRha2Ugc3VwcGVyIHRoZXJlIHdpdGggaXRzIG93bmVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgbWFyY2hlZCBkb3duIGFnYWluc3QgdGhlIGNpdHkgb2YgU3BhcnRhLiBDbGVvbnltdXMgdXJnZWQgaGltIHRvIG1ha2UgdGhlIGFzc2F1bHQgYXMgc29vbiBhcyBoZSBhcnJpdmVkLCBidXQgUHlycmh1cyB3YXMgYWZyYWlkLCBhcyB3ZSBhcmUgdG9sZCwgdGhhdCBoaXMgc29sZGllcnMgd291bGQgcGx1bmRlciB0aGUgY2l0eSBpZiB0aGV5IGZlbGwgdXBvbiBpdCBhdCBuaWdodCwgYW5kIHRoZXJlZm9yZSByZXN0cmFpbmVkIHRoZW0sIHNheWluZyB0aGF0IHRoZXkgd291bGQgYWNjb21wbGlzaCBqdXN0IGFzIG11Y2ggYnkgZGF5LiBGb3IgdGhlcmUgd2VyZSBidXQgZmV3IG1lbiBpbiB0aGUgY2l0eSwgYW5kIHRoZXkgd2VyZSB1bnByZXBhcmVkLCBvd2luZyB0byB0aGUgc3VkZGVubmVzcyBvZiB0aGUgcGVyaWw7IGFuZCBBcmV1cyB3YXMgbm90IGF0IGhvbWUsIGJ1dCBpbiBDcmV0ZSwgd2hpdGhlciBoZSB3YXMgYnJpbmdpbmcgbWlsaXRhcnkgYWlkIGZvciB0aGUgR29ydHluaWFucy4gQW5kIHRoaXMsIGluZGVlZCwgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UsIHByb3ZlZCB0aGUgc2FsdmF0aW9uIG9mIHRoZSBjaXR5LCB3aGljaCBpdHMgd2Vha25lc3MgYW5kIGxhY2sgb2YgZGVmZW5kZXJzIGNhdXNlZCB0byBiZSBkZXNwaXNlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBQeXJyaHVzLCB0aGlua2luZyB0aGF0IG5vIG9uZSB3b3VsZCBnaXZlIGhpbSBiYXR0bGUsIGJpdm91YWNrZWQgZm9yIHRoZSBuaWdodCwgYW5kIHRoZSBmcmllbmRzIGFuZCBIZWxvdCBzbGF2ZXMgb2YgQ2xlb255bXVzIGFkb3JuZWQgYW5kIGZ1cm5pc2hlZCBoaXMgaG91c2UgaW4gdGhlIGV4cGVjdGF0aW9uIHRoYXQgUHlycmh1cyB3b3VsZCB0YWtlIHN1cHBlciB0aGVyZSB3aXRoIGl0cyBvd25lci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVuIG5pZ2h0IGhhZCBjb21lLCB0aGUgTGFjZWRhZW1vbmlhbnMgYXQgZmlyc3QgdG9vayBjb3Vuc2VsIHRvIHNlbmQgdGhlaXIgd29tZW4gb2ZmIHRvIENyZXRlLCBidXQgdGhlIHdvbWVuIHdlcmUgb3Bwb3NlZCB0byB0aGlzOyBhbmQgQXJjaGlkYW1pYSBjYW1lIHdpdGggYSBzd29yZCBpbiBoZXIgaGFuZCB0byB0aGUgc2VuYXRvcnMgYW5kIHVwYnJhaWRlZCB0aGVtIGluIGJlaGFsZiBvZiB0aGUgd29tZW4gZm9yIHRoaW5raW5nIGl0IG1lZXQgdGhhdCB0aGV5IHNob3VsZCBsaXZlIGFmdGVyIFNwYXJ0YSBoYWQgcGVyaXNoZWQuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TmV4dCwgaXQgd2FzIGRlY2lkZWQgdG8gcnVuIGEgdHJlbmNoIHBhcmFsbGVsIHdpdGggdGhlIGNhbXAgb2YgdGhlIGVuZW15LCBhbmQgYXQgZWl0aGVyIGVuZCBvZiBpdCB0byBzZXQgdGhlaXIgd2FnZ29ucywgc2lua2luZyB0aGVtIHRvIHRoZSB3aGVlbC1odWJzIGluIHRoZSBncm91bmQsIGluIG9yZGVyIHRoYXQsIHRodXMgZmlybWx5IHBsYW50ZWQsIHRoZXkgbWlnaHQgaW1wZWRlIHRoZSBhZHZhbmNlIG9mIHRoZSBlbGVwaGFudHMuIFdoZW4gdGhleSBiZWdhbiB0byBjYXJyeSBvdXQgdGhpcyBwcm9qZWN0LCB0aGVyZSBjYW1lIHRvIHRoZW0gdGhlIHdvbWVuIGFuZCBtYWlkZW5zLCBzb21lIG9mIHRoZW0gaW4gdGhlaXIgcm9iZXMsIHdpdGggdHVuaWNzIGdpcnQgY2xvc2UsIGFuZCBvdGhlcnMgaW4gdGhlaXIgdHVuaWNzIG9ubHksIHRvIGhlbHAgdGhlIGVsZGVybHkgbWVuIGluIHRoZSB3b3JrLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbWVuIHdobyB3ZXJlIGdvaW5nIHRvIGRvIHRoZSBmaWdodGluZyB0aGUgd29tZW4gb3JkZXJlZCB0byBrZWVwIHF1aWV0LCBhbmQgYXNzdW1pbmcgdGhlaXIgc2hhcmUgb2YgdGhlIHRhc2sgdGhleSBjb21wbGV0ZWQgd2l0aCB0aGVpciBvd24gaGFuZHMgYSB0aGlyZCBvZiB0aGUgdHJlbmNoLiBUaGUgd2lkdGggb2YgdGhlIHRyZW5jaCB3YXMgc2l4IGN1Yml0cywgaXRzIGRlcHRoIGZvdXIsIGFuZCBpdHMgbGVuZ3RoIGVpZ2h0IGh1bmRyZWQgZmVldCwgYWNjb3JkaW5nIHRvIFBoeWxhcmNodXM7IGFjY29yZGluZyB0byBIaWVyb255bXVzLCBsZXNzIHRoYW4gdGhpcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBkYXkgY2FtZSBhbmQgdGhlIGVuZW15IHdlcmUgcHV0dGluZyB0aGVtc2VsdmVzIGluIG1vdGlvbiwgdGhlc2Ugd29tZW4gaGFuZGVkIHRoZSB5b3VuZyBtZW4gdGhlaXIgYXJtb3VyLCBwdXQgdGhlIHRyZW5jaCBpbiB0aGVpciBjaGFyZ2UsIGFuZCB0b2xkIHRoZW0gdG8gZ3VhcmQgYW5kIGRlZmVuZCBpdCwgYXNzdXJlZCB0aGF0IGl0IHdhcyBzd2VldCB0byBjb25xdWVyIGJlZm9yZSB0aGUgZXllcyBvZiB0aGVpciBmYXRoZXJsYW5kLCBhbmQgZ2xvcmlvdXMgdG8gZGllIGluIHRoZSBhcm1zIG9mIHRoZWlyIG1vdGhlcnMgYW5kIHdpdmVzLCBhZnRlciBhIGZhbGwgdGhhdCB3YXMgd29ydGh5IG9mIFNwYXJ0YS4gQXMgZm9yIENoaWxvbmlzLCBzaGUgd2l0aGRyZXcgZnJvbSB0aGUgcmVzdCwgYW5kIGtlcHQgYSBoYWx0ZXIgYWJvdXQgaGVyIG5lY2ssIHRoYXQgc2hlIG1pZ2h0IG5vdCBjb21lIGludG8gdGhlIHBvd2VyIG9mIENsZW9ueW11cyBpZiB0aGUgY2l0eSB3ZXJlIHRha2VuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5leHQsIGl0IHdhcyBkZWNpZGVkIHRvIHJ1biBhIHRyZW5jaCBwYXJhbGxlbCB3aXRoIHRoZSBjYW1wIG9mIHRoZSBlbmVteSwgYW5kIGF0IGVpdGhlciBlbmQgb2YgaXQgdG8gc2V0IHRoZWlyIHdhZ2dvbnMsIHNpbmtpbmcgdGhlbSB0byB0aGUgd2hlZWwtaHVicyBpbiB0aGUgZ3JvdW5kLCBpbiBvcmRlciB0aGF0LCB0aHVzIGZpcm1seSBwbGFudGVkLCB0aGV5IG1pZ2h0IGltcGVkZSB0aGUgYWR2YW5jZSBvZiB0aGUgZWxlcGhhbnRzLiBXaGVuIHRoZXkgYmVnYW4gdG8gY2Fycnkgb3V0IHRoaXMgcHJvamVjdCwgdGhlcmUgY2FtZSB0byB0aGVtIHRoZSB3b21lbiBhbmQgbWFpZGVucywgc29tZSBvZiB0aGVtIGluIHRoZWlyIHJvYmVzLCB3aXRoIHR1bmljcyBnaXJ0IGNsb3NlLCBhbmQgb3RoZXJzIGluIHRoZWlyIHR1bmljcyBvbmx5LCB0byBoZWxwIHRoZSBlbGRlcmx5IG1lbiBpbiB0aGUgd29yay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtZW4gd2hvIHdlcmUgZ29pbmcgdG8gZG8gdGhlIGZpZ2h0aW5nIHRoZSB3b21lbiBvcmRlcmVkIHRvIGtlZXAgcXVpZXQsIGFuZCBhc3N1bWluZyB0aGVpciBzaGFyZSBvZiB0aGUgdGFzayB0aGV5IGNvbXBsZXRlZCB3aXRoIHRoZWlyIG93biBoYW5kcyBhIHRoaXJkIG9mIHRoZSB0cmVuY2guIFRoZSB3aWR0aCBvZiB0aGUgdHJlbmNoIHdhcyBzaXggY3ViaXRzLCBpdHMgZGVwdGggZm91ciwgYW5kIGl0cyBsZW5ndGggZWlnaHQgaHVuZHJlZCBmZWV0LCBhY2NvcmRpbmcgdG8gUGh5bGFyY2h1czsgYWNjb3JkaW5nIHRvIEhpZXJvbnltdXMsIGxlc3MgdGhhbiB0aGlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gZGF5IGNhbWUgYW5kIHRoZSBlbmVteSB3ZXJlIHB1dHRpbmcgdGhlbXNlbHZlcyBpbiBtb3Rpb24sIHRoZXNlIHdvbWVuIGhhbmRlZCB0aGUgeW91bmcgbWVuIHRoZWlyIGFybW91ciwgcHV0IHRoZSB0cmVuY2ggaW4gdGhlaXIgY2hhcmdlLCBhbmQgdG9sZCB0aGVtIHRvIGd1YXJkIGFuZCBkZWZlbmQgaXQsIGFzc3VyZWQgdGhhdCBpdCB3YXMgc3dlZXQgdG8gY29ucXVlciBiZWZvcmUgdGhlIGV5ZXMgb2YgdGhlaXIgZmF0aGVybGFuZCwgYW5kIGdsb3Jpb3VzIHRvIGRpZSBpbiB0aGUgYXJtcyBvZiB0aGVpciBtb3RoZXJzIGFuZCB3aXZlcywgYWZ0ZXIgYSBmYWxsIHRoYXQgd2FzIHdvcnRoeSBvZiBTcGFydGEuIEFzIGZvciBDaGlsb25pcywgc2hlIHdpdGhkcmV3IGZyb20gdGhlIHJlc3QsIGFuZCBrZXB0IGEgaGFsdGVyIGFib3V0IGhlciBuZWNrLCB0aGF0IHNoZSBtaWdodCBub3QgY29tZSBpbnRvIHRoZSBwb3dlciBvZiBDbGVvbnltdXMgaWYgdGhlIGNpdHkgd2VyZSB0YWtlbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UHlycmh1cyBoaW1zZWxmLCB0aGVuLCB3aXRoIGhpcyBtZW4tYXQtYXJtcywgdHJpZWQgdG8gZm9yY2UgaGlzIHdheSBkaXJlY3RseSBhZ2FpbnN0IHRoZSBtYW55IHNoaWVsZHMgb2YgdGhlIFNwYXJ0YW5zIHdoaWNoIGNvbmZyb250ZWQgaGltLCBhbmQgb3ZlciBhIHRyZW5jaCB3aGljaCB3YXMgaW1wYXNzYWJsZSBhbmQgYWZmb3JkZWQgaGlzIHNvbGRpZXJzIG5vIGZpcm0gZm9vdGluZyBvd2luZyB0byB0aGUgZnJlc2hseSB0dXJuZWQgZWFydGguIEJ1dCBoaXMgc29uIFB0b2xlbXksIHdpdGggdHdvIHRob3VzYW5kIEdhdWxzIGFuZCBwaWNrZWQgQ2hhb25pYW5zLCB3ZW50IHJvdW5kIHRoZSB0cmVuY2ggYW5kIHRyaWVkIHRvIGZvcmNlIGEgcGFzc2FnZSB3aGVyZSB0aGUgd2FnZ29ucyB3ZXJlLiBUaGVzZSwgaG93ZXZlciwgYmVpbmcgc28gZGVlcGx5IHBsYW50ZWQgaW4gdGhlIGVhcnRoIGFuZCBzbyBjbG9zZSB0b2dldGhlciwgbWFkZSBub3Qgb25seSBoaXMgb25zZXQsIGJ1dCBhbHNvIHRoZSBjb3VudGVyLWVmZm9ydHMgb2YgdGhlIExhY2VkYWVtb25pYW5zLCBhIGRpZmZpY3VsdCBtYXR0ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBHYXVscyBwdWxsZWQgdGhlIHdoZWVscyB1cCBhbmQgd2VyZSBkcmFnZ2luZyB0aGUgd2FnZ29ucyBkb3duIGludG8gdGhlIHJpdmVyOyBidXQgdGhlIHlvdW5nIEFjcm90YXR1cyBzYXcgdGhlIGRhbmdlciwgYW5kIHJ1bm5pbmcgdGhyb3VnaCB0aGUgY2l0eSB3aXRoIHRocmVlIGh1bmRyZWQgbWVuIGdvdCByb3VuZCBiZWhpbmQgUHRvbGVteSB3aXRob3V0IGJlaW5nIHNlZW4gYnkgaGltLCBvd2luZyB0byBzb21lIGRlcHJlc3Npb25zIGluIHRoZSBncm91bmQsIGFuZCBhdCBsYXN0IGZlbGwgdXBvbiBoaXMgcmVhciByYW5rcyBhbmQgZm9yY2VkIHRoZW0gdG8gdHVybiBhYm91dCBhbmQgZmlnaHQgd2l0aCBoaW0uIEFuZCBub3cgdGhlIEJhcmJhcmlhbnMgY3Jvd2RlZCBvbmUgYW5vdGhlciBpbnRvIHRoZSB0cmVuY2ggYW5kIGZlbGwgYW1vbmcgdGhlIHdhZ2dvbnMsIGFuZCBmaW5hbGx5LCBhZnRlciBncmVhdCBzbGF1Z2h0ZXIsIHdlcmUgc3VjY2Vzc2Z1bGx5IGRyaXZlbiBiYWNrLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZWxkZXJseSBtZW4gYW5kIHRoZSBob3N0IG9mIHdvbWVuIHdhdGNoZWQgdGhlIGJyaWxsaWFudCBleHBsb2l0IG9mIEFjcm90YXR1cy4gQW5kIHdoZW4gaGUgd2VudCBiYWNrIGFnYWluIHRocm91Z2ggdGhlIGNpdHkgdG8gaGlzIGFsbG90dGVkIHBvc3QsIGNvdmVyZWQgd2l0aCBibG9vZCBhbmQgdHJpdW1waGFudCwgZWxhdGVkIHdpdGggaGlzIHZpY3RvcnksIHRoZSBTcGFydGFuIHdvbWVuIHRob3VnaHQgdGhhdCBoZSBoYWQgYmVjb21lIHRhbGxlciBhbmQgbW9yZSBiZWF1dGlmdWwgdGhhbiBldmVyLCBhbmQgZW52aWVkIENoaWxvbmlzIGhlciBsb3Zlci4gTW9yZW92ZXIsIHNvbWUgb2YgdGhlIGVsZGVybHkgbWVuIGFjY29tcGFuaWVkIGhpbSBvbiBoaXMgd2F5LCBjcnlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+R28sIEFjcm90YXR1cywgYW5kIHRha2UgdG8gdGh5c2VsZiBDaGlsb25pczsgb25seSwgc2VlIHRoYXQgdGhvdSBiZWdldHRlc3QgYnJhdmUgc29ucyBmb3IgU3BhcnRhLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UHlycmh1cyBoaW1zZWxmLCB0aGVuLCB3aXRoIGhpcyBtZW4tYXQtYXJtcywgdHJpZWQgdG8gZm9yY2UgaGlzIHdheSBkaXJlY3RseSBhZ2FpbnN0IHRoZSBtYW55IHNoaWVsZHMgb2YgdGhlIFNwYXJ0YW5zIHdoaWNoIGNvbmZyb250ZWQgaGltLCBhbmQgb3ZlciBhIHRyZW5jaCB3aGljaCB3YXMgaW1wYXNzYWJsZSBhbmQgYWZmb3JkZWQgaGlzIHNvbGRpZXJzIG5vIGZpcm0gZm9vdGluZyBvd2luZyB0byB0aGUgZnJlc2hseSB0dXJuZWQgZWFydGguIEJ1dCBoaXMgc29uIFB0b2xlbXksIHdpdGggdHdvIHRob3VzYW5kIEdhdWxzIGFuZCBwaWNrZWQgQ2hhb25pYW5zLCB3ZW50IHJvdW5kIHRoZSB0cmVuY2ggYW5kIHRyaWVkIHRvIGZvcmNlIGEgcGFzc2FnZSB3aGVyZSB0aGUgd2FnZ29ucyB3ZXJlLiBUaGVzZSwgaG93ZXZlciwgYmVpbmcgc28gZGVlcGx5IHBsYW50ZWQgaW4gdGhlIGVhcnRoIGFuZCBzbyBjbG9zZSB0b2dldGhlciwgbWFkZSBub3Qgb25seSBoaXMgb25zZXQsIGJ1dCBhbHNvIHRoZSBjb3VudGVyLWVmZm9ydHMgb2YgdGhlIExhY2VkYWVtb25pYW5zLCBhIGRpZmZpY3VsdCBtYXR0ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBHYXVscyBwdWxsZWQgdGhlIHdoZWVscyB1cCBhbmQgd2VyZSBkcmFnZ2luZyB0aGUgd2FnZ29ucyBkb3duIGludG8gdGhlIHJpdmVyOyBidXQgdGhlIHlvdW5nIEFjcm90YXR1cyBzYXcgdGhlIGRhbmdlciwgYW5kIHJ1bm5pbmcgdGhyb3VnaCB0aGUgY2l0eSB3aXRoIHRocmVlIGh1bmRyZWQgbWVuIGdvdCByb3VuZCBiZWhpbmQgUHRvbGVteSB3aXRob3V0IGJlaW5nIHNlZW4gYnkgaGltLCBvd2luZyB0byBzb21lIGRlcHJlc3Npb25zIGluIHRoZSBncm91bmQsIGFuZCBhdCBsYXN0IGZlbGwgdXBvbiBoaXMgcmVhciByYW5rcyBhbmQgZm9yY2VkIHRoZW0gdG8gdHVybiBhYm91dCBhbmQgZmlnaHQgd2l0aCBoaW0uIEFuZCBub3cgdGhlIEJhcmJhcmlhbnMgY3Jvd2RlZCBvbmUgYW5vdGhlciBpbnRvIHRoZSB0cmVuY2ggYW5kIGZlbGwgYW1vbmcgdGhlIHdhZ2dvbnMsIGFuZCBmaW5hbGx5LCBhZnRlciBncmVhdCBzbGF1Z2h0ZXIsIHdlcmUgc3VjY2Vzc2Z1bGx5IGRyaXZlbiBiYWNrLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbGRlcmx5IG1lbiBhbmQgdGhlIGhvc3Qgb2Ygd29tZW4gd2F0Y2hlZCB0aGUgYnJpbGxpYW50IGV4cGxvaXQgb2YgQWNyb3RhdHVzLiBBbmQgd2hlbiBoZSB3ZW50IGJhY2sgYWdhaW4gdGhyb3VnaCB0aGUgY2l0eSB0byBoaXMgYWxsb3R0ZWQgcG9zdCwgY292ZXJlZCB3aXRoIGJsb29kIGFuZCB0cml1bXBoYW50LCBlbGF0ZWQgd2l0aCBoaXMgdmljdG9yeSwgdGhlIFNwYXJ0YW4gd29tZW4gdGhvdWdodCB0aGF0IGhlIGhhZCBiZWNvbWUgdGFsbGVyIGFuZCBtb3JlIGJlYXV0aWZ1bCB0aGFuIGV2ZXIsIGFuZCBlbnZpZWQgQ2hpbG9uaXMgaGVyIGxvdmVyLiBNb3Jlb3Zlciwgc29tZSBvZiB0aGUgZWxkZXJseSBtZW4gYWNjb21wYW5pZWQgaGltIG9uIGhpcyB3YXksIGNyeWluZzogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkdvLCBBY3JvdGF0dXMsIGFuZCB0YWtlIHRvIHRoeXNlbGYgQ2hpbG9uaXM7IG9ubHksIHNlZSB0aGF0IHRob3UgYmVnZXR0ZXN0IGJyYXZlIHNvbnMgZm9yIFNwYXJ0YS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkEgZmllcmNlIGJhdHRsZSB3YXMgYWxzbyB3YWdlZCB3aGVyZSBQeXJyaHVzIGhpbXNlbGYgbGVkLCBhbmQgbWFueSBTcGFydGFucyBtYWRlIGEgc3BsZW5kaWQgZmlnaHQsIGJ1dCBwYXJ0aWN1bGFybHkgUGh5bGxpdXMsIHdobyBzdXJwYXNzZWQgYWxsIGluIHRoZSB0ZW5hY2l0eSBvZiBoaXMgcmVzaXN0YW5jZSBhbmQgdGhlIG51bWJlcnMgb2YgdGhlIG9uLXJ1c2hpbmcgZW5lbXkgd2hvbSBoZSBzbGV3OyBhbmQgd2hlbiBoZSBwZXJjZWl2ZWQgdGhhdCBoaXMgcG93ZXJzIHdlcmUgZmFpbGluZyBmcm9tIHRoZSBtdWx0aXR1ZGUgb2YgdGhlIHdvdW5kcyBoZSBoYWQgcmVjZWl2ZWQsIGhlIG1hZGUgd2F5IGZvciBvbmUgb2YgaGlzIGNvbXJhZGVzIGluIHRoZSBsaW5lLCBhbmQgZmVsbCBpbnNpZGUgdGhlIHJhbmtzLCB0aGF0IGhpcyBkZWFkIGJvZHkgbWlnaHQgbm90IGNvbWUgaW50byB0aGUgaGFuZHMgb2YgdGhlIGVuZW15LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkEgZmllcmNlIGJhdHRsZSB3YXMgYWxzbyB3YWdlZCB3aGVyZSBQeXJyaHVzIGhpbXNlbGYgbGVkLCBhbmQgbWFueSBTcGFydGFucyBtYWRlIGEgc3BsZW5kaWQgZmlnaHQsIGJ1dCBwYXJ0aWN1bGFybHkgUGh5bGxpdXMsIHdobyBzdXJwYXNzZWQgYWxsIGluIHRoZSB0ZW5hY2l0eSBvZiBoaXMgcmVzaXN0YW5jZSBhbmQgdGhlIG51bWJlcnMgb2YgdGhlIG9uLXJ1c2hpbmcgZW5lbXkgd2hvbSBoZSBzbGV3OyBhbmQgd2hlbiBoZSBwZXJjZWl2ZWQgdGhhdCBoaXMgcG93ZXJzIHdlcmUgZmFpbGluZyBmcm9tIHRoZSBtdWx0aXR1ZGUgb2YgdGhlIHdvdW5kcyBoZSBoYWQgcmVjZWl2ZWQsIGhlIG1hZGUgd2F5IGZvciBvbmUgb2YgaGlzIGNvbXJhZGVzIGluIHRoZSBsaW5lLCBhbmQgZmVsbCBpbnNpZGUgdGhlIHJhbmtzLCB0aGF0IGhpcyBkZWFkIGJvZHkgbWlnaHQgbm90IGNvbWUgaW50byB0aGUgaGFuZHMgb2YgdGhlIGVuZW15LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5OaWdodCBwdXQgYW4gZW5kIHRvIHRoZSBiYXR0bGU7IGFuZCBQeXJyaHVzLCBhcyBoZSBzbGVwdCwgaGFkIHRoZSBmb2xsb3dpbmcgdmlzaW9uLiBIZSBkcmVhbWVkIHRoYXQgU3BhcnRhIHdhcyBzbWl0dGVuIHdpdGggdGh1bmRlcmJvbHRzIGZyb20gaGlzIGhhbmQgYW5kIHdhcyBhbGwgYWJsYXplLCBhbmQgdGhhdCBoZSB3YXMgZmlsbGVkIHdpdGggam95LiBIaXMgam95IHdha2VkIGhpbSBmcm9tIHNsZWVwLCBhbmQgaGUgY29tbWFuZGVkIGhpcyBvZmZpY2VycyB0byBnZXQgdGhlIGFybXkgcmVhZHkgZm9yIGFjdGlvbiwgYW5kIG5hcnJhdGVkIGhpcyBkcmVhbSB0byBoaXMgZnJpZW5kcywgY29udmluY2VkIHRoYXQgaGUgd2FzIGdvaW5nIHRvIHRha2UgdGhlIGNpdHkgYnkgc3Rvcm0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlbSwgdGhlbiwgd2VyZSBmdWxseSBwZXJzdWFkZWQgdGhhdCBoZSB3YXMgcmlnaHQsIGJ1dCBMeXNpbWFjaHVzIHdhcyBub3QgcGxlYXNlZCB3aXRoIHRoZSB2aXNpb247IGhlIHNhaWQgaGUgd2FzIGFmcmFpZCBsZXN0LCBhcyBwbGFjZXMgc21pdHRlbiBieSB0aHVuZGVyYm9sdHMgYXJlIGtlcHQgZnJlZSBmcm9tIHRoZSB0cmVhZCBvZiBtZW4sIHRoZSBEZWl0eSBtaWdodCBiZSBpbmRpY2F0aW5nIGluIGFkdmFuY2UgdG8gUHlycmh1cyBhbHNvIHRoYXQgdGhlIGNpdHkgd2FzIG5vdCB0byBiZSBlbnRlcmVkIGJ5IGhpbS4gQnV0IFB5cnJodXMgZGVjbGFyZWQgdGhhdCB0aGlzIHdhcyBub25zZW5zZSBpbnRlbmRlZCBmb3IgdGhlIGNyb3dkLCBhbmQgZ3JlYXQgZm9sbHksIGFuZCBjYWxsaW5nIHVwb24gaGlzIGhlYXJlcnMgdG8gdGFrZSB0aGVpciBhcm1zIGluIHRoZWlyIGhhbmRzIGFuZCBhY3QgdXBvbiB0aGUgYmVsaWVmIHRoYXQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+T25lIGlzIHRoZSBiZXN0IG9mIGFsbCBvbWVucywgdG8gZmlnaHQgaW4gZGVmZW5jZSBvZiA8L2w+CgkJCQkJICAgICAgICAgIDxsPlB5cnJodXMsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBhZGFwdGF0aW9uIG9mIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxMi4yNDMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgeGlpLiAyNDM8L2JpYmw+LCBieSBzdWJzdGl0dXRpbmcgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UHlycmh1czwvcT4gZm9yIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm9uZSdzIGNvdW50cnk8L3E+ICg8Zm9yZWlnbiBsYW5nPSJncmVlayI+zqDhvbvPgc+Bzr/PhTwvZm9yZWlnbj4gZm9yIDxmb3JlaWduIGxhbmc9ImdyZWVrIj7PgOG9sc+Ez4HOt8+CPC9mb3JlaWduPikuPC9ub3RlPgoJCQkJcm9zZSB1cCwgYW5kIGF0IGRheS1icmVhayBsZWQgZm9ydGggaGlzIGFybXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TmlnaHQgcHV0IGFuIGVuZCB0byB0aGUgYmF0dGxlOyBhbmQgUHlycmh1cywgYXMgaGUgc2xlcHQsIGhhZCB0aGUgZm9sbG93aW5nIHZpc2lvbi4gSGUgZHJlYW1lZCB0aGF0IFNwYXJ0YSB3YXMgc21pdHRlbiB3aXRoIHRodW5kZXJib2x0cyBmcm9tIGhpcyBoYW5kIGFuZCB3YXMgYWxsIGFibGF6ZSwgYW5kIHRoYXQgaGUgd2FzIGZpbGxlZCB3aXRoIGpveS4gSGlzIGpveSB3YWtlZCBoaW0gZnJvbSBzbGVlcCwgYW5kIGhlIGNvbW1hbmRlZCBoaXMgb2ZmaWNlcnMgdG8gZ2V0IHRoZSBhcm15IHJlYWR5IGZvciBhY3Rpb24sIGFuZCBuYXJyYXRlZCBoaXMgZHJlYW0gdG8gaGlzIGZyaWVuZHMsIGNvbnZpbmNlZCB0aGF0IGhlIHdhcyBnb2luZyB0byB0YWtlIHRoZSBjaXR5IGJ5IHN0b3JtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlbSwgdGhlbiwgd2VyZSBmdWxseSBwZXJzdWFkZWQgdGhhdCBoZSB3YXMgcmlnaHQsIGJ1dCBMeXNpbWFjaHVzIHdhcyBub3QgcGxlYXNlZCB3aXRoIHRoZSB2aXNpb247IGhlIHNhaWQgaGUgd2FzIGFmcmFpZCBsZXN0LCBhcyBwbGFjZXMgc21pdHRlbiBieSB0aHVuZGVyYm9sdHMgYXJlIGtlcHQgZnJlZSBmcm9tIHRoZSB0cmVhZCBvZiBtZW4sIHRoZSBEZWl0eSBtaWdodCBiZSBpbmRpY2F0aW5nIGluIGFkdmFuY2UgdG8gUHlycmh1cyBhbHNvIHRoYXQgdGhlIGNpdHkgd2FzIG5vdCB0byBiZSBlbnRlcmVkIGJ5IGhpbS4gQnV0IFB5cnJodXMgZGVjbGFyZWQgdGhhdCB0aGlzIHdhcyBub25zZW5zZSBpbnRlbmRlZCBmb3IgdGhlIGNyb3dkLCBhbmQgZ3JlYXQgZm9sbHksIGFuZCBjYWxsaW5nIHVwb24gaGlzIGhlYXJlcnMgdG8gdGFrZSB0aGVpciBhcm1zIGluIHRoZWlyIGhhbmRzIGFuZCBhY3QgdXBvbiB0aGUgYmVsaWVmIHRoYXQKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk9uZSBpcyB0aGUgYmVzdCBvZiBhbGwgb21lbnMsIHRvIGZpZ2h0IGluIGRlZmVuY2Ugb2YgPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlB5cnJodXMsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk9uZSBpcyB0aGUgYmVzdCBvZiBhbGwgb21lbnMsIHRvIGZpZ2h0IGluIGRlZmVuY2Ugb2YgPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlB5cnJodXMsPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGFkYXB0YXRpb24gb2YgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMTIuMjQzIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeGlpLiAyNDM8L2JpYmw+LCBieSBzdWJzdGl0dXRpbmcgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5QeXJyaHVzPC9xPiBmb3IgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vbmUncyBjb3VudHJ5PC9xPiAoPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zqDhvbvPgc+Bzr/PhTwvZm9yZWlnbj4gZm9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+A4b2xz4TPgc63z4I8L2ZvcmVpZ24+KS48L25vdGU+CgkJCQlyb3NlIHVwLCBhbmQgYXQgZGF5LWJyZWFrIGxlZCBmb3J0aCBoaXMgYXJteS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMTIuMjQzIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeGlpLiAyNDM8L2JpYmw+LCBieSBzdWJzdGl0dXRpbmcgCgkJCQkJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeGlpLiAyNDM8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlB5cnJodXM8L3E+IGZvciAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPm9uZSdzIGNvdW50cnk8L3E+ICg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OoOG9u8+Bz4HOv8+FPC9mb3JlaWduPiBmb3IgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DhvbHPhM+BzrfPgjwvZm9yZWlnbj4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgTGFjZWRhZW1vbmlhbnMgZGVmZW5kZWQgdGhlbXNlbHZlcyB3aXRoIGFuIGFsYWNyaXR5IGFuZCBicmF2ZXJ5IGJleW9uZCB0aGVpciBzdHJlbmd0aDsgdGhlIHdvbWVuLCB0b28sIHdlcmUgYXQgaGFuZCwgcHJvZmZlcmluZyBtaXNzaWxlcywgZGlzdHJpYnV0aW5nIGZvb2QgYW5kIGRyaW5rIHRvIHRob3NlIHdobyBuZWVkZWQgdGhlbSwgYW5kIHRha2luZyB1cCB0aGUgd291bmRlZC4gVGhlIE1hY2Vkb25pYW5zIHRyaWVkIHRvIGZpbGwgdXAgdGhlIHRyZW5jaCwgY29sbGVjdGluZyBhbmQgdGhyb3dpbmcgaW50byBpdCBncmVhdCBxdWFudGl0aWVzIG9mIG1hdGVyaWFscywgYmVuZWF0aCB3aGljaCB0aGUgYXJtcyBhbmQgZGVhZCBib2RpZXMgd2VyZSBoaWRkZW4gYXdheS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gdGhlIExhY2VkYWVtb25pYW5zIHRyaWVkIHRvIHB1dCBhIHN0b3AgdG8gdGhpcywgUHlycmh1cyB3YXMgc2VlbiBmb3JjaW5nIGhpcyB3YXkgb24gaG9yc2ViYWNrIHBhc3QgdGhlIHRyZW5jaCBhbmQgdGhlIHdhZ2dvbnMgaW50byB0aGUgY2l0eS4gQnV0IHRoZSBtZW4gc3RhdGlvbmVkIGF0IHRoaXMgcG9pbnQgcmFpc2VkIGEgc2hvdXQsIGFuZCB0aGVyZSB3YXMgYSBjb25jb3Vyc2UgYW5kIHNocmlla2luZyBvZiB0aGUgd29tZW4sIGFuZCBqdXN0IGFzIFB5cnJodXMgd2FzIHJpZGluZyB0aHJvdWdoIHRoZSB3YWdnb25zIGFuZCBhdHRhY2tpbmcgdGhlIG1lbiBpbiBmcm9udCBvZiBoaW0sIGhpcyBob3JzZSB3YXMgd291bmRlZCBpbiB0aGUgYmVsbHkgYnkgYSBDcmV0YW4gamF2ZWxpbiBhbmQgbGVhcGVkIHRvIG9uZSBzaWRlLCBhbmQgaW4gaGlzIGRlYXRoIGFnb255IHRocmV3IFB5cnJodXMgdXBvbiBzdGVlcCBhbmQgc2xpcHBlcnkgZ3JvdW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgY29tcGFuaW9ucyB3ZXJlIHRocm93biBpbnRvIGNvbmZ1c2lvbiBhcm91bmQgaGltLCBhbmQgdGhlIFNwYXJ0YW5zLCBydW5uaW5nIHVwb24gdGhlbSBhbmQgbWFraW5nIGdvb2QgdXNlIG9mIHRoZWlyIG1pc3NpbGVzLCBkcm92ZSB0aGVtIGFsbCBvZmYuIEFmdGVyIHRoaXMsIFB5cnJodXMgYnJvdWdodCB0aGUgZmlnaHRpbmcgdG8gYSBzdG9wIGF0IG90aGVyIHBvaW50cyBhbHNvLCB0aGlua2luZyB0aGF0IHRoZSBTcGFydGFucyB3b3VsZCBtYWtlIHNvbWUgY29uY2Vzc2lvbnMsIG5vdyB0aGF0IGFsbW9zdCBhbGwgb2YgdGhlbSB3ZXJlIHdvdW5kZWQgYW5kIG1hbnkgaGFkIGZhbGxlbi4gQnV0IG5vdyB0aGUgZ29vZCBmb3J0dW5lIG9mIHRoZSBjaXR5LCBlaXRoZXIgYmVjYXVzZSBzaGUgd2FzIHNhdGlzZmllZCB3aXRoIHRoZSBicmF2ZXJ5IG9mIGl0cyBtZW4sIG9yIGJlY2F1c2Ugc2hlIHdvdWxkIHNob3cgZm9ydGggdGhlIGdyZWF0IHBvd2VyIHdoaWNoIHNoZSBoZXJzZWxmIGhhcyBpbiBkZXNwZXJhdGUgY3Jpc2VzLCAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5icm91Z2h0IHRvIHRoZWlyIGFpZCBmcm9tIENvcmludGgsIHdoZW4gdGhlIGhvcGVzIG9mIHRoZSBTcGFydGFucyB3ZXJlIGFscmVhZHkgc29ycnksIEFtZWluaWFzIHRoZSBQaG9jaWFuLCBvbmUgb2YgdGhlIGdlbmVyYWxzIG9mIEFudGlnb251cywgd2l0aCBtZXJjZW5hcnkgdHJvb3BzOyBhbmQgbm8gc29vbmVyIGhhZCBoZSBiZWVuIHJlY2VpdmVkIGludG8gdGhlIGNpdHkgdGhhbiBBcmV1cyB0aGUgU3BhcnRhbiBraW5nIGNhbWUgZnJvbSBDcmV0ZSwgYnJpbmdpbmcgd2l0aCBoaW0gdHdvIHRob3VzYW5kIHNvbGRpZXJzLiBTbyB0aGUgd29tZW4gYXQgb25jZSBkaXNwZXJzZWQgdG8gdGhlaXIgaG9tZXMsIHNpbmNlIHRoZXkgbm8gbG9uZ2VyIHRob3VnaHQgaXQgbWVldCB0byBidXN5IHRoZW1zZWx2ZXMgd2l0aCB0aGUgd29yayBvZiB3YXIsIGFuZCB0aGUgbWVuLCBhZnRlciBkaXNtaXNzaW5nIGZyb20gdGhlaXIgcmFua3MgdGhvc2Ugb2YgdW5taWxpdGFyeSBhZ2Ugd2hvbSBuZWNlc3NpdHkgaGFkIGJyb3VnaHQgdGhlcmUsIGFycmF5ZWQgdGhlbXNlbHZlcyBmb3IgYmF0dGxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgTGFjZWRhZW1vbmlhbnMgZGVmZW5kZWQgdGhlbXNlbHZlcyB3aXRoIGFuIGFsYWNyaXR5IGFuZCBicmF2ZXJ5IGJleW9uZCB0aGVpciBzdHJlbmd0aDsgdGhlIHdvbWVuLCB0b28sIHdlcmUgYXQgaGFuZCwgcHJvZmZlcmluZyBtaXNzaWxlcywgZGlzdHJpYnV0aW5nIGZvb2QgYW5kIGRyaW5rIHRvIHRob3NlIHdobyBuZWVkZWQgdGhlbSwgYW5kIHRha2luZyB1cCB0aGUgd291bmRlZC4gVGhlIE1hY2Vkb25pYW5zIHRyaWVkIHRvIGZpbGwgdXAgdGhlIHRyZW5jaCwgY29sbGVjdGluZyBhbmQgdGhyb3dpbmcgaW50byBpdCBncmVhdCBxdWFudGl0aWVzIG9mIG1hdGVyaWFscywgYmVuZWF0aCB3aGljaCB0aGUgYXJtcyBhbmQgZGVhZCBib2RpZXMgd2VyZSBoaWRkZW4gYXdheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBMYWNlZGFlbW9uaWFucyB0cmllZCB0byBwdXQgYSBzdG9wIHRvIHRoaXMsIFB5cnJodXMgd2FzIHNlZW4gZm9yY2luZyBoaXMgd2F5IG9uIGhvcnNlYmFjayBwYXN0IHRoZSB0cmVuY2ggYW5kIHRoZSB3YWdnb25zIGludG8gdGhlIGNpdHkuIEJ1dCB0aGUgbWVuIHN0YXRpb25lZCBhdCB0aGlzIHBvaW50IHJhaXNlZCBhIHNob3V0LCBhbmQgdGhlcmUgd2FzIGEgY29uY291cnNlIGFuZCBzaHJpZWtpbmcgb2YgdGhlIHdvbWVuLCBhbmQganVzdCBhcyBQeXJyaHVzIHdhcyByaWRpbmcgdGhyb3VnaCB0aGUgd2FnZ29ucyBhbmQgYXR0YWNraW5nIHRoZSBtZW4gaW4gZnJvbnQgb2YgaGltLCBoaXMgaG9yc2Ugd2FzIHdvdW5kZWQgaW4gdGhlIGJlbGx5IGJ5IGEgQ3JldGFuIGphdmVsaW4gYW5kIGxlYXBlZCB0byBvbmUgc2lkZSwgYW5kIGluIGhpcyBkZWF0aCBhZ29ueSB0aHJldyBQeXJyaHVzIHVwb24gc3RlZXAgYW5kIHNsaXBwZXJ5IGdyb3VuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBjb21wYW5pb25zIHdlcmUgdGhyb3duIGludG8gY29uZnVzaW9uIGFyb3VuZCBoaW0sIGFuZCB0aGUgU3BhcnRhbnMsIHJ1bm5pbmcgdXBvbiB0aGVtIGFuZCBtYWtpbmcgZ29vZCB1c2Ugb2YgdGhlaXIgbWlzc2lsZXMsIGRyb3ZlIHRoZW0gYWxsIG9mZi4gQWZ0ZXIgdGhpcywgUHlycmh1cyBicm91Z2h0IHRoZSBmaWdodGluZyB0byBhIHN0b3AgYXQgb3RoZXIgcG9pbnRzIGFsc28sIHRoaW5raW5nIHRoYXQgdGhlIFNwYXJ0YW5zIHdvdWxkIG1ha2Ugc29tZSBjb25jZXNzaW9ucywgbm93IHRoYXQgYWxtb3N0IGFsbCBvZiB0aGVtIHdlcmUgd291bmRlZCBhbmQgbWFueSBoYWQgZmFsbGVuLiBCdXQgbm93IHRoZSBnb29kIGZvcnR1bmUgb2YgdGhlIGNpdHksIGVpdGhlciBiZWNhdXNlIHNoZSB3YXMgc2F0aXNmaWVkIHdpdGggdGhlIGJyYXZlcnkgb2YgaXRzIG1lbiwgb3IgYmVjYXVzZSBzaGUgd291bGQgc2hvdyBmb3J0aCB0aGUgZ3JlYXQgcG93ZXIgd2hpY2ggc2hlIGhlcnNlbGYgaGFzIGluIGRlc3BlcmF0ZSBjcmlzZXMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJyb3VnaHQgdG8gdGhlaXIgYWlkIGZyb20gQ29yaW50aCwgd2hlbiB0aGUgaG9wZXMgb2YgdGhlIFNwYXJ0YW5zIHdlcmUgYWxyZWFkeSBzb3JyeSwgQW1laW5pYXMgdGhlIFBob2NpYW4sIG9uZSBvZiB0aGUgZ2VuZXJhbHMgb2YgQW50aWdvbnVzLCB3aXRoIG1lcmNlbmFyeSB0cm9vcHM7IGFuZCBubyBzb29uZXIgaGFkIGhlIGJlZW4gcmVjZWl2ZWQgaW50byB0aGUgY2l0eSB0aGFuIEFyZXVzIHRoZSBTcGFydGFuIGtpbmcgY2FtZSBmcm9tIENyZXRlLCBicmluZ2luZyB3aXRoIGhpbSB0d28gdGhvdXNhbmQgc29sZGllcnMuIFNvIHRoZSB3b21lbiBhdCBvbmNlIGRpc3BlcnNlZCB0byB0aGVpciBob21lcywgc2luY2UgdGhleSBubyBsb25nZXIgdGhvdWdodCBpdCBtZWV0IHRvIGJ1c3kgdGhlbXNlbHZlcyB3aXRoIHRoZSB3b3JrIG9mIHdhciwgYW5kIHRoZSBtZW4sIGFmdGVyIGRpc21pc3NpbmcgZnJvbSB0aGVpciByYW5rcyB0aG9zZSBvZiB1bm1pbGl0YXJ5IGFnZSB3aG9tIG5lY2Vzc2l0eSBoYWQgYnJvdWdodCB0aGVyZSwgYXJyYXllZCB0aGVtc2VsdmVzIGZvciBiYXR0bGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlB5cnJodXMsIHRvbywgd2FzIG1vcmUgdGhhbiBldmVyIHBvc3Nlc3NlZCBieSBhIGZpZXJjZSBhbWJpdGlvbiB0byBiZWNvbWUgbWFzdGVyIG9mIHRoZSBjaXR5LCBub3cgdGhhdCByZWluZm9yY2VtZW50cyBoYWQgY29tZSB0byBpdDsgYnV0IHNpbmNlIGhlIGNvdWxkIGFjY29tcGxpc2ggbm90aGluZywgYW5kIG1ldCB3aXRoIGZyZXNoIGxvc3NlcywgaGUgd2VudCBhd2F5LCBhbmQgZmVsbCB0byByYXZhZ2luZyB0aGUgY291bnRyeSwgcHVycG9zaW5nIHRvIHNwZW5kIHRoZSB3aW50ZXIgdGhlcmUuIEJ1dCBGYXRlIHdhcyBub3QgdG8gYmUgZXNjYXBlZC4gRm9yIGF0IEFyZ29zIHRoZXJlIHdhcyBhIGZldWQgYmV0d2VlbiBBcmlzdGVhcyBhbmQgQXJpc3RpcHB1czsgYW5kIHNpbmNlIEFyaXN0aXBwdXMgd2FzIHRob3VnaHQgdG8gZW5qb3kgdGhlIGZyaWVuZHNoaXAgb2YgQW50aWdvbnVzLCBBcmlzdGVhcyBoYXN0ZW5lZCB0byBpbnZpdGUgUHlycmh1cyBpbnRvIEFyZ29zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5QeXJyaHVzIHdhcyBhbHdheXMgZW50ZXJ0YWluaW5nIG9uZSBob3BlIGFmdGVyIGFub3RoZXIsIGFuZCBzaW5jZSBoZSBtYWRlIG9uZSBzdWNjZXNzIGJ1dCB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIGEgbmV3IG9uZSwgd2hpbGUgaGUgd2FzIGRldGVybWluZWQgdG8gbWFrZSBnb29kIGVhY2ggZGlzYXN0ZXIgYnkgYSBmcmVzaCB1bmRlcnRha2luZywgaGUgc3VmZmVyZWQgbmVpdGhlciBkZWZlYXQgbm9yIHZpY3RvcnkgdG8gcHV0IGEgbGltaXQgdG8gaGlzIHRyb3VibGluZyBoaW1zZWxmIGFuZCB0cm91Ymxpbmcgb3RoZXJzLiBBdCBvbmNlLCB0aGVyZWZvcmUsIGhlIGJyb2tlIGNhbXAgYW5kIHNldCBvdXQgZm9yIEFyZ29zLiBCdXQgQXJldXMsIGJ5IHNldHRpbmcgZnJlcXVlbnQgYW1idXNoZXMgYW5kIG9jY3VweWluZyB0aGUgbW9zdCBkaWZmaWN1bHQgcG9pbnRzIG9uIHRoZSBtYXJjaCwga2VwdCBjdXR0aW5nIG9mZiB0aGUgR2F1bHMgYW5kIE1vbG9zc2lhbnMgd2hvIGJyb3VnaHQgdXAgdGhlIHJlYXIgZm9yIFB5cnJodXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UHlycmh1cywgdG9vLCB3YXMgbW9yZSB0aGFuIGV2ZXIgcG9zc2Vzc2VkIGJ5IGEgZmllcmNlIGFtYml0aW9uIHRvIGJlY29tZSBtYXN0ZXIgb2YgdGhlIGNpdHksIG5vdyB0aGF0IHJlaW5mb3JjZW1lbnRzIGhhZCBjb21lIHRvIGl0OyBidXQgc2luY2UgaGUgY291bGQgYWNjb21wbGlzaCBub3RoaW5nLCBhbmQgbWV0IHdpdGggZnJlc2ggbG9zc2VzLCBoZSB3ZW50IGF3YXksIGFuZCBmZWxsIHRvIHJhdmFnaW5nIHRoZSBjb3VudHJ5LCBwdXJwb3NpbmcgdG8gc3BlbmQgdGhlIHdpbnRlciB0aGVyZS4gQnV0IEZhdGUgd2FzIG5vdCB0byBiZSBlc2NhcGVkLiBGb3IgYXQgQXJnb3MgdGhlcmUgd2FzIGEgZmV1ZCBiZXR3ZWVuIEFyaXN0ZWFzIGFuZCBBcmlzdGlwcHVzOyBhbmQgc2luY2UgQXJpc3RpcHB1cyB3YXMgdGhvdWdodCB0byBlbmpveSB0aGUgZnJpZW5kc2hpcCBvZiBBbnRpZ29udXMsIEFyaXN0ZWFzIGhhc3RlbmVkIHRvIGludml0ZSBQeXJyaHVzIGludG8gQXJnb3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlB5cnJodXMgd2FzIGFsd2F5cyBlbnRlcnRhaW5pbmcgb25lIGhvcGUgYWZ0ZXIgYW5vdGhlciwgYW5kIHNpbmNlIGhlIG1hZGUgb25lIHN1Y2Nlc3MgYnV0IHRoZSBzdGFydGluZyBwb2ludCBmb3IgYSBuZXcgb25lLCB3aGlsZSBoZSB3YXMgZGV0ZXJtaW5lZCB0byBtYWtlIGdvb2QgZWFjaCBkaXNhc3RlciBieSBhIGZyZXNoIHVuZGVydGFraW5nLCBoZSBzdWZmZXJlZCBuZWl0aGVyIGRlZmVhdCBub3IgdmljdG9yeSB0byBwdXQgYSBsaW1pdCB0byBoaXMgdHJvdWJsaW5nIGhpbXNlbGYgYW5kIHRyb3VibGluZyBvdGhlcnMuIEF0IG9uY2UsIHRoZXJlZm9yZSwgaGUgYnJva2UgY2FtcCBhbmQgc2V0IG91dCBmb3IgQXJnb3MuIEJ1dCBBcmV1cywgYnkgc2V0dGluZyBmcmVxdWVudCBhbWJ1c2hlcyBhbmQgb2NjdXB5aW5nIHRoZSBtb3N0IGRpZmZpY3VsdCBwb2ludHMgb24gdGhlIG1hcmNoLCBrZXB0IGN1dHRpbmcgb2ZmIHRoZSBHYXVscyBhbmQgTW9sb3NzaWFucyB3aG8gYnJvdWdodCB1cCB0aGUgcmVhciBmb3IgUHlycmh1cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBpdCBoYWQgYmVlbiBmb3JldG9sZCB0byBQeXJyaHVzIGJ5IGhpcyBzZWVyLCBpbiBjb25zZXF1ZW5jZSBvZiBzYWNyaWZpY2VzIHdoZXJlIG5vIGxpdmVyIGNvdWxkIGJlIGZvdW5kLCB0aGF0IGhlIHdhcyB0byBsb3NlIG9uZSBvZiBoaXMga2luZHJlZDsgYnV0IGhlcmUsIHVuaGFwcGlseSwgb3dpbmcgdG8gdGhlIGFnaXRhdGlvbiBhbmQgdHVtdWx0IGFtb25nIGhpcyByZWFyLWd1YXJkLCBoZSBmb3Jnb3QgaGltc2VsZiwgYW5kIG9yZGVyZWQgaGlzIHNvbiBQdG9sZW15IHdpdGggaGlzIGNvbXJhZGVzIHRvIGdvIHRvIHRoZSByZXNjdWUsIHdoaWxlIGhlIGhpbXNlbGYgZHJldyBoaXMgYXJteSBtb3JlIHF1aWNrbHkgb3V0IG9mIHRoZSBuYXJyb3cgcGFzcyBhbmQgbGVkIHRoZW0gZm9yd2FyZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QSBmaWVyY2UgYmF0dGxlIHJhZ2VkIHdoZXJlIFB0b2xlbXkgd2FzLCBhbmQgd2hpbGUgYSBiYW5kIG9mIHBpY2tlZCBTcGFydGFucyB1bmRlciB0aGUgY29tbWFuZCBvZiBFdmFsY3VzIGVuZ2FnZWQgdGhlIHNvbGRpZXJzIHdobyB3ZXJlIGZpZ2h0aW5nIGluIGZyb250IG9mIGhpbSwgYSBtYW4gb2Ygc3RvdXQgYXJtIGFuZCBzd2lmdCBmb290LCBPcnlzc3VzIGJ5IG5hbWUsIG9mIEFwdGVyYSBpbiBDcmV0ZSwgcmFuIHVwIG9uIG9uZSBzaWRlIG9mIHRoZSB5b3VuZyBwcmluY2UgYXMgaGUgd2FzIGZpZ2h0aW5nIHNwaXJpdGVkbHksIHNtb3RlIGhpbSwgYW5kIGxhaWQgaGltIGxvdy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiBQdG9sZW15J3MgZmFsbCBhbmQgdGhlIHJvdXQgb2YgaGlzIGNvbXBhbnksIHRoZSBTcGFydGFucyBwdXJzdWVkLCBjYXJyeWluZyBhbGwgYmVmb3JlIHRoZW0sIGFuZCBiZWZvcmUgdGhleSB3ZXJlIGF3YXJlIG9mIGl0IGhhZCBkYXNoZWQgb3V0IGludG8gdGhlIHBsYWluIGFuZCB3ZXJlIGN1dCBvZmYgYnkgdGhlIGluZmFudHJ5IG9mIFB5cnJodXMuIEFnYWluc3QgdGhpcyBiYW5kIG9mIFNwYXJ0YW5zIFB5cnJodXMsIHdobyBoYWQganVzdCBoZWFyZCBvZiB0aGUgZGVhdGggb2YgaGlzIHNvbiBhbmQgd2FzIGluIGFuZ3Vpc2gsIHR1cm5lZCBoaXMgTW9sb3NzaWFuIGhvcnNlbWVuLiBIZSBoaW1zZWxmIGNoYXJnZWQgYXQgdGhlaXIgaGVhZCwgYW5kIHNhdGVkIGhpbXNlbGYgd2l0aCBTcGFydGFuIGJsb29kLiBIZSBoYWQgYWx3YXlzIHNob3duIGhpbXNlbGYgaW52aW5jaWJsZSBhbmQgdGVycmlibGUgaW4gYXJtcywgYnV0IG5vdyBoaXMgZGFyaW5nIGFuZCBtaWdodCBzdXJwYXNzZWQgYWxsIHByZXZpb3VzIGRpc3BsYXlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIHNldCBoaXMgaG9yc2UgdXBvbiBFdmFsY3VzLCB0aGUgU3BhcnRhbiBzdGVwcGVkIGFzaWRlIGFuZCBoYWQgYWxtb3N0IGN1dCBvZmYgd2l0aCBoaXMgc3dvcmQgdGhlIGJyaWRsZS1oYW5kIG9mIFB5cnJodXM7IGFzIGl0IHdhcyBoZSBoaXQgdGhlIHJlaW4gYW5kIHNldmVyZWQgaXQuIFB5cnJodXMgdHJhbnNmaXhlZCB0aGUgU3BhcnRhbiB3aXRoIGEgdGhydXN0IG9mIGhpcyBzcGVhciwgYW5kIGF0IHRoZSBzYW1lIGluc3RhbnQgZmVsbCBvZmYgaGlzIGhvcnNlLCBhbmQgZmlnaHRpbmcgb24gZm9vdCwgYXQgb25jZSBwcm9jZWVkZWQgdG8gc2xheSBhbGwgdGhlIHBpY2tlZCBiYW5kIHdoaWNoIHdhcyBmaWdodGluZyBvdmVyIHRoZSBib2R5IG9mIEV2YWxjdXMuIFRoaXMgZ3JlYXQgYWRkaXRpb25hbCBsb3NzIHRvIFNwYXJ0YSB3aGVuIHRoZSB3YXIgd2FzIGFscmVhZHkgYXQgYW4gZW5kIHdhcyBkdWUgdG8gdGhlIGFtYml0aW9uIG9mIHRoZSBjb21tYW5kZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaXQgaGFkIGJlZW4gZm9yZXRvbGQgdG8gUHlycmh1cyBieSBoaXMgc2VlciwgaW4gY29uc2VxdWVuY2Ugb2Ygc2FjcmlmaWNlcyB3aGVyZSBubyBsaXZlciBjb3VsZCBiZSBmb3VuZCwgdGhhdCBoZSB3YXMgdG8gbG9zZSBvbmUgb2YgaGlzIGtpbmRyZWQ7IGJ1dCBoZXJlLCB1bmhhcHBpbHksIG93aW5nIHRvIHRoZSBhZ2l0YXRpb24gYW5kIHR1bXVsdCBhbW9uZyBoaXMgcmVhci1ndWFyZCwgaGUgZm9yZ290IGhpbXNlbGYsIGFuZCBvcmRlcmVkIGhpcyBzb24gUHRvbGVteSB3aXRoIGhpcyBjb21yYWRlcyB0byBnbyB0byB0aGUgcmVzY3VlLCB3aGlsZSBoZSBoaW1zZWxmIGRyZXcgaGlzIGFybXkgbW9yZSBxdWlja2x5IG91dCBvZiB0aGUgbmFycm93IHBhc3MgYW5kIGxlZCB0aGVtIGZvcndhcmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkEgZmllcmNlIGJhdHRsZSByYWdlZCB3aGVyZSBQdG9sZW15IHdhcywgYW5kIHdoaWxlIGEgYmFuZCBvZiBwaWNrZWQgU3BhcnRhbnMgdW5kZXIgdGhlIGNvbW1hbmQgb2YgRXZhbGN1cyBlbmdhZ2VkIHRoZSBzb2xkaWVycyB3aG8gd2VyZSBmaWdodGluZyBpbiBmcm9udCBvZiBoaW0sIGEgbWFuIG9mIHN0b3V0IGFybSBhbmQgc3dpZnQgZm9vdCwgT3J5c3N1cyBieSBuYW1lLCBvZiBBcHRlcmEgaW4gQ3JldGUsIHJhbiB1cCBvbiBvbmUgc2lkZSBvZiB0aGUgeW91bmcgcHJpbmNlIGFzIGhlIHdhcyBmaWdodGluZyBzcGlyaXRlZGx5LCBzbW90ZSBoaW0sIGFuZCBsYWlkIGhpbSBsb3cuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gUHRvbGVteSdzIGZhbGwgYW5kIHRoZSByb3V0IG9mIGhpcyBjb21wYW55LCB0aGUgU3BhcnRhbnMgcHVyc3VlZCwgY2FycnlpbmcgYWxsIGJlZm9yZSB0aGVtLCBhbmQgYmVmb3JlIHRoZXkgd2VyZSBhd2FyZSBvZiBpdCBoYWQgZGFzaGVkIG91dCBpbnRvIHRoZSBwbGFpbiBhbmQgd2VyZSBjdXQgb2ZmIGJ5IHRoZSBpbmZhbnRyeSBvZiBQeXJyaHVzLiBBZ2FpbnN0IHRoaXMgYmFuZCBvZiBTcGFydGFucyBQeXJyaHVzLCB3aG8gaGFkIGp1c3QgaGVhcmQgb2YgdGhlIGRlYXRoIG9mIGhpcyBzb24gYW5kIHdhcyBpbiBhbmd1aXNoLCB0dXJuZWQgaGlzIE1vbG9zc2lhbiBob3JzZW1lbi4gSGUgaGltc2VsZiBjaGFyZ2VkIGF0IHRoZWlyIGhlYWQsIGFuZCBzYXRlZCBoaW1zZWxmIHdpdGggU3BhcnRhbiBibG9vZC4gSGUgaGFkIGFsd2F5cyBzaG93biBoaW1zZWxmIGludmluY2libGUgYW5kIHRlcnJpYmxlIGluIGFybXMsIGJ1dCBub3cgaGlzIGRhcmluZyBhbmQgbWlnaHQgc3VycGFzc2VkIGFsbCBwcmV2aW91cyBkaXNwbGF5cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgc2V0IGhpcyBob3JzZSB1cG9uIEV2YWxjdXMsIHRoZSBTcGFydGFuIHN0ZXBwZWQgYXNpZGUgYW5kIGhhZCBhbG1vc3QgY3V0IG9mZiB3aXRoIGhpcyBzd29yZCB0aGUgYnJpZGxlLWhhbmQgb2YgUHlycmh1czsgYXMgaXQgd2FzIGhlIGhpdCB0aGUgcmVpbiBhbmQgc2V2ZXJlZCBpdC4gUHlycmh1cyB0cmFuc2ZpeGVkIHRoZSBTcGFydGFuIHdpdGggYSB0aHJ1c3Qgb2YgaGlzIHNwZWFyLCBhbmQgYXQgdGhlIHNhbWUgaW5zdGFudCBmZWxsIG9mZiBoaXMgaG9yc2UsIGFuZCBmaWdodGluZyBvbiBmb290LCBhdCBvbmNlIHByb2NlZWRlZCB0byBzbGF5IGFsbCB0aGUgcGlja2VkIGJhbmQgd2hpY2ggd2FzIGZpZ2h0aW5nIG92ZXIgdGhlIGJvZHkgb2YgRXZhbGN1cy4gVGhpcyBncmVhdCBhZGRpdGlvbmFsIGxvc3MgdG8gU3BhcnRhIHdoZW4gdGhlIHdhciB3YXMgYWxyZWFkeSBhdCBhbiBlbmQgd2FzIGR1ZSB0byB0aGUgYW1iaXRpb24gb2YgdGhlIGNvbW1hbmRlcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvIFB5cnJodXMsIGFmdGVyIGFjY29tcGxpc2hpbmcgYXMgaXQgd2VyZSBhbiBleHBpYXRpb24gZm9yIGhpcyBzb24gYW5kIGNlbGVicmF0aW5nIGhpcyBvYnNlcXVpZXMgd2l0aCBhIGJyaWxsaWFudCBjb250ZXN0LCBoYXZpbmcgYWxzbyB2ZW50ZWQgbXVjaCBvZiBoaXMgZ3JpZWYgaW4gaGlzIGZ1cnkgYWdhaW5zdCB0aGUgZW5lbXksIGxlZCBoaXMgYXJteSBvbiB0b3dhcmRzIEFyZ29zLiBBbmQgd2hlbiBoZSBsZWFybmVkIHRoYXQgQW50aWdvbnVzIHdhcyBhbHJlYWR5IHBvc3RlZCBvbiB0aGUgaGVpZ2h0cyBjb21tYW5kaW5nIHRoZSBwbGFpbiwgaGUgcGl0Y2hlZCBoaXMgY2FtcCBuZWFyIE5hdXBsaWEuIE9uIHRoZSBmb2xsb3dpbmcgZGF5IGhlIHNlbnQgYSBoZXJhbGQgdG8gQW50aWdvbnVzLCBjYWxsaW5nIGhpbSBhIHJvYmJlciwgYW5kIGNoYWxsZW5naW5nIGhpbSB0byBjb21lIGRvd24gaW50byB0aGUgcGxhaW4gYW5kIGZpZ2h0IHdpdGggaGltIGZvciB0aGUga2luZ2RvbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFudGlnb251cyByZXBsaWVkIHRoYXQgaW4gY29uZHVjdGluZyBhIGNhbXBhaWduIGhlIHJlbGllZCBtb3JlIHVwb24gb3Bwb3J0dW5pdGllcyB0aGFuIHVwb24gYXJtcywgYW5kIHRoYXQgbWFueSByb2FkcyB0byBkZWF0aCBsYXkgb3BlbiB0byBQeXJyaHVzIGlmIGhlIHdhcyB0aXJlZCBvZiBsaWZlLiBBbmQgbm93IHRvIGJvdGgga2luZ3MgY2FtZSBhbWJhc3NhZG9ycyBmcm9tIEFyZ29zLCBlbnRyZWF0aW5nIHRoZW0gdG8gZ28gYXdheSBhbmQgYWxsb3cgdGhlIGNpdHkgdG8gYmUgbmV1dHJhbCwgYnV0IHdlbGwtZGlzcG9zZWQgdG93YXJkcyBib3RoLiBBbnRpZ29udXMsIGFjY29yZGluZ2x5LCBjb25zZW50ZWQsIGFuZCBnYXZlIGhpcyBzb24gdG8gdGhlIEFyZ2l2ZXMgYXMgYSBob3N0YWdlOyBQeXJyaHVzIGFsc28gYWdyZWVkIHRvIGdvIGF3YXksIGJ1dCBzaW5jZSBoZSBnYXZlIG5vIHBsZWRnZSwgaGUgcmVtYWluZWQgdW5kZXIgc3VzcGljaW9uLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gUHlycmh1cywgYWZ0ZXIgYWNjb21wbGlzaGluZyBhcyBpdCB3ZXJlIGFuIGV4cGlhdGlvbiBmb3IgaGlzIHNvbiBhbmQgY2VsZWJyYXRpbmcgaGlzIG9ic2VxdWllcyB3aXRoIGEgYnJpbGxpYW50IGNvbnRlc3QsIGhhdmluZyBhbHNvIHZlbnRlZCBtdWNoIG9mIGhpcyBncmllZiBpbiBoaXMgZnVyeSBhZ2FpbnN0IHRoZSBlbmVteSwgbGVkIGhpcyBhcm15IG9uIHRvd2FyZHMgQXJnb3MuIEFuZCB3aGVuIGhlIGxlYXJuZWQgdGhhdCBBbnRpZ29udXMgd2FzIGFscmVhZHkgcG9zdGVkIG9uIHRoZSBoZWlnaHRzIGNvbW1hbmRpbmcgdGhlIHBsYWluLCBoZSBwaXRjaGVkIGhpcyBjYW1wIG5lYXIgTmF1cGxpYS4gT24gdGhlIGZvbGxvd2luZyBkYXkgaGUgc2VudCBhIGhlcmFsZCB0byBBbnRpZ29udXMsIGNhbGxpbmcgaGltIGEgcm9iYmVyLCBhbmQgY2hhbGxlbmdpbmcgaGltIHRvIGNvbWUgZG93biBpbnRvIHRoZSBwbGFpbiBhbmQgZmlnaHQgd2l0aCBoaW0gZm9yIHRoZSBraW5nZG9tLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBbnRpZ29udXMgcmVwbGllZCB0aGF0IGluIGNvbmR1Y3RpbmcgYSBjYW1wYWlnbiBoZSByZWxpZWQgbW9yZSB1cG9uIG9wcG9ydHVuaXRpZXMgdGhhbiB1cG9uIGFybXMsIGFuZCB0aGF0IG1hbnkgcm9hZHMgdG8gZGVhdGggbGF5IG9wZW4gdG8gUHlycmh1cyBpZiBoZSB3YXMgdGlyZWQgb2YgbGlmZS4gQW5kIG5vdyB0byBib3RoIGtpbmdzIGNhbWUgYW1iYXNzYWRvcnMgZnJvbSBBcmdvcywgZW50cmVhdGluZyB0aGVtIHRvIGdvIGF3YXkgYW5kIGFsbG93IHRoZSBjaXR5IHRvIGJlIG5ldXRyYWwsIGJ1dCB3ZWxsLWRpc3Bvc2VkIHRvd2FyZHMgYm90aC4gQW50aWdvbnVzLCBhY2NvcmRpbmdseSwgY29uc2VudGVkLCBhbmQgZ2F2ZSBoaXMgc29uIHRvIHRoZSBBcmdpdmVzIGFzIGEgaG9zdGFnZTsgUHlycmh1cyBhbHNvIGFncmVlZCB0byBnbyBhd2F5LCBidXQgc2luY2UgaGUgZ2F2ZSBubyBwbGVkZ2UsIGhlIHJlbWFpbmVkIHVuZGVyIHN1c3BpY2lvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIFB5cnJodXMgaGltc2VsZiBoYWQgYSBzaWduaWZpY2FudCBwb3J0ZW50OyBmb3IgdGhlIGhlYWRzIG9mIGhpcyBzYWNyaWZpY2VkIGNhdHRsZSwgdGhvdWdoIHRoZXkgYWxyZWFkeSBsYXkgYXBhcnQgZnJvbSB0aGUgYm9kaWVzLCB3ZXJlIHNlZW4gdG8gcHV0IG91dCB0aGVpciB0b25ndWVzIGFuZCBsaWNrIHVwIHRoZWlyIG93biBnb3JlLiBBbmQgYmVzaWRlcyB0aGlzLCBpbiB0aGUgY2l0eSBvZiBBcmdvcyB0aGUgcHJpZXN0ZXNzIG9mIEFwb2xsbyBMeWNlaXVzIHJhbiBmb3J0aCBmcm9tIHRoZSB0ZW1wbGUgY3J5aW5nIHRoYXQgc2hlIHNhdyB0aGUgY2l0eSBmdWxsIG9mIGNvcnBzZXMgYW5kIHNsYXVnaHRlciwgYW5kIHRoYXQgdGhlIGVhZ2xlIHdoaWNoIHZpc2l0ZWQgdGhlIHNjZW5lIG9mIGNvbWJhdCBwcmVzZW50bHkgdmFuaXNoZWQgYXdheS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBQeXJyaHVzIGhpbXNlbGYgaGFkIGEgc2lnbmlmaWNhbnQgcG9ydGVudDsgZm9yIHRoZSBoZWFkcyBvZiBoaXMgc2FjcmlmaWNlZCBjYXR0bGUsIHRob3VnaCB0aGV5IGFscmVhZHkgbGF5IGFwYXJ0IGZyb20gdGhlIGJvZGllcywgd2VyZSBzZWVuIHRvIHB1dCBvdXQgdGhlaXIgdG9uZ3VlcyBhbmQgbGljayB1cCB0aGVpciBvd24gZ29yZS4gQW5kIGJlc2lkZXMgdGhpcywgaW4gdGhlIGNpdHkgb2YgQXJnb3MgdGhlIHByaWVzdGVzcyBvZiBBcG9sbG8gTHljZWl1cyByYW4gZm9ydGggZnJvbSB0aGUgdGVtcGxlIGNyeWluZyB0aGF0IHNoZSBzYXcgdGhlIGNpdHkgZnVsbCBvZiBjb3Jwc2VzIGFuZCBzbGF1Z2h0ZXIsIGFuZCB0aGF0IHRoZSBlYWdsZSB3aGljaCB2aXNpdGVkIHRoZSBzY2VuZSBvZiBjb21iYXQgcHJlc2VudGx5IHZhbmlzaGVkIGF3YXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IGRlYWQgb2YgbmlnaHQgUHlycmh1cyBjYW1lIHVwIHRvIHRoZSB3YWxscyBvZiB0aGUgY2l0eSwgYW5kIGZpbmRpbmcgdGhhdCB0aGUgZ2F0ZSBjYWxsZWQgRGlhbXBlcmVzIGhhZCBiZWVuIHRocm93biBvcGVuIGZvciB0aGVtIGJ5IEFyaXN0ZWFzLCB3YXMgdW5kaXNjb3ZlcmVkIGxvbmcgZW5vdWdoIGZvciBoaXMgR2F1bHMgdG8gZW50ZXIgdGhlIGNpdHkgYW5kIHRha2UgcG9zc2Vzc2lvbiBvZiB0aGUgbWFya2V0cGxhY2UuIEJ1dCB0aGUgZ2F0ZSB3b3VsZCBub3QgYWRtaXQgaGlzIGVsZXBoYW50cywgYW5kIHRoZXJlZm9yZSB0aGUgdG93ZXJzIGhhZCB0byBiZSB0YWtlbiBvZmYgdGhlaXIgYmFja3MgYW5kIHB1dCBvbiBhZ2FpbiB3aGVuIHRoZSBhbmltYWxzIHdlcmUgaW5zaWRlLCBpbiBkYXJrbmVzcyBhbmQgY29uZnVzaW9uLiBUaGlzIGNhdXNlZCBkZWxheSwgYW5kIHRoZSBBcmdpdmVzLCB0YWtpbmcgdGlsZSBhbGFybSwgcmFuIHVwIHRvIHRoZSBBc3BpcyBhbmQgb3RoZXIgc3Ryb25nIHBsYWNlcyBvZiB0aGUgY2l0eSwgYW5kIHNlbmRpbmcgdG8gQW50aWdvbnVzIGNhbGxlZCB1cG9uIGhpbSBmb3IgaGVscC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW50aWdvbnVzIG1hcmNoZWQgdXAgY2xvc2UgdG8gdGhlIGNpdHksIGFuZCBseWluZyBpbiB3YWl0IHRoZXJlIGhpbXNlbGYsIHNlbnQgaGlzIGdlbmVyYWxzIGFuZCBoaXMgc29uIGluc2lkZSB3aXRoIGEgY29uc2lkZXJhYmxlIHJlbGllZi1mb3JjZS4gQXJldXMgYWxzbyBjYW1lLCB3aXRoIGEgdGhvdXNhbmQgQ3JldGFucyBhbmQgU3BhcnRhbnMgKHRoZSBtb3N0IGxpZ2h0bHkgYXJtZWQpLiBBbGwgdGhlc2UgdHJvb3BzIHVuaXRlZCBpbiBhbiBhc3NhdWx0IHVwb24gdGhlIEdhdWxzIGFuZCB0aHJldyB0aGVtIGludG8gZ3JlYXQgY29uZnVzaW9uLiBBbmQgUHlycmh1cywgd2hvIG5vdyBlbnRlcmVkIHRoZSBjaXR5IHdpdGggc2hvdXRzIGFuZCBjcmllcyBieSB3YXkgb2YgQ3lsYXJhYmlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgZ3ltbmFzaXVtIGp1c3Qgb3V0c2lkZSB0aGUgY2l0eSB0b3dhcmRzIHRoZSBFYXN0Ljwvbm90ZT4gbm90aWNlZCB0aGF0IHRoZSBHYXVscyBkaWQgbm90IGFuc3dlciBoaXMgbWVuIHdpdGggYW55IHZpZ291ciBvciBjb3VyYWdlLCBhbmQgdGhlcmVmb3JlIGNvbmplY3R1cmVkIHRoYXQgdGhlaXIgcmVzcG9uc2Ugd2FzIHRoYXQgb2YgbWVuIGNvbmZvdW5kZWQgYW5kIGluIGRpc3RyZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgaGUgbGVkIG9uIGZhc3RlciwgcHVzaGluZyBhbG9uZyB0aGUgaG9yc2VtZW4gaW4gZnJvbnQgb2YgaGltLCB3aG8gd2VyZSBtYWtpbmcgdGhlaXIgd2F5IHdpdGggZGlmZmljdWx0eSBhbW9uZyB0aGUgd2F0ZXItY29uZHVpdHMsIG9mIHdoaWNoIHRoZSBjaXR5IGlzIGZ1bGwsIGFuZCB3ZXJlIGluIHBlcmlsIG9mIHRoZWlyIGxpdmVzIGZyb20gdGhlbS4gQW5kIG5vdywgaW4gdGhpcyBuaWdodC1iYXR0bGUsIHRoZXJlIHdhcyBncmVhdCB1bmNlcnRhaW50eSBhcyB0byB3aGF0IGNvbW1hbmRzIHdlcmUgZ2l2ZW4gYW5kIGhvdyB0aGUgY29tbWFuZHMgd2VyZSBjYXJyaWVkIG91dDsgbWVuIHN0cmFnZ2xlZCBhbmQgbG9zdCB0aGVpciB3YXkgYW1vbmcgdGhlIG5hcnJvdyBzdHJlZXRzLCBhbmQgZ2VuZXJhbHNoaXAgd2FzIG9mIG5vIGF2YWlsIG93aW5nIHRvIHRoZSBkYXJrbmVzcywgY29uZnVzZWQgc2hvdXRpbmcsIGFuZCBjb25maW5lZCBzcGFjZXM7IGJvdGggcGFydGllcyB0aGVyZWZvcmUgd2VyZSB1bmFibGUgdG8gYWNjb21wbGlzaCBhbnl0aGluZyBhbmQgd2FpdGVkIGZvciB0aGUgZGF5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZGVhZCBvZiBuaWdodCBQeXJyaHVzIGNhbWUgdXAgdG8gdGhlIHdhbGxzIG9mIHRoZSBjaXR5LCBhbmQgZmluZGluZyB0aGF0IHRoZSBnYXRlIGNhbGxlZCBEaWFtcGVyZXMgaGFkIGJlZW4gdGhyb3duIG9wZW4gZm9yIHRoZW0gYnkgQXJpc3RlYXMsIHdhcyB1bmRpc2NvdmVyZWQgbG9uZyBlbm91Z2ggZm9yIGhpcyBHYXVscyB0byBlbnRlciB0aGUgY2l0eSBhbmQgdGFrZSBwb3NzZXNzaW9uIG9mIHRoZSBtYXJrZXRwbGFjZS4gQnV0IHRoZSBnYXRlIHdvdWxkIG5vdCBhZG1pdCBoaXMgZWxlcGhhbnRzLCBhbmQgdGhlcmVmb3JlIHRoZSB0b3dlcnMgaGFkIHRvIGJlIHRha2VuIG9mZiB0aGVpciBiYWNrcyBhbmQgcHV0IG9uIGFnYWluIHdoZW4gdGhlIGFuaW1hbHMgd2VyZSBpbnNpZGUsIGluIGRhcmtuZXNzIGFuZCBjb25mdXNpb24uIFRoaXMgY2F1c2VkIGRlbGF5LCBhbmQgdGhlIEFyZ2l2ZXMsIHRha2luZyB0aWxlIGFsYXJtLCByYW4gdXAgdG8gdGhlIEFzcGlzIGFuZCBvdGhlciBzdHJvbmcgcGxhY2VzIG9mIHRoZSBjaXR5LCBhbmQgc2VuZGluZyB0byBBbnRpZ29udXMgY2FsbGVkIHVwb24gaGltIGZvciBoZWxwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFudGlnb251cyBtYXJjaGVkIHVwIGNsb3NlIHRvIHRoZSBjaXR5LCBhbmQgbHlpbmcgaW4gd2FpdCB0aGVyZSBoaW1zZWxmLCBzZW50IGhpcyBnZW5lcmFscyBhbmQgaGlzIHNvbiBpbnNpZGUgd2l0aCBhIGNvbnNpZGVyYWJsZSByZWxpZWYtZm9yY2UuIEFyZXVzIGFsc28gY2FtZSwgd2l0aCBhIHRob3VzYW5kIENyZXRhbnMgYW5kIFNwYXJ0YW5zICh0aGUgbW9zdCBsaWdodGx5IGFybWVkKS4gQWxsIHRoZXNlIHRyb29wcyB1bml0ZWQgaW4gYW4gYXNzYXVsdCB1cG9uIHRoZSBHYXVscyBhbmQgdGhyZXcgdGhlbSBpbnRvIGdyZWF0IGNvbmZ1c2lvbi4gQW5kIFB5cnJodXMsIHdobyBub3cgZW50ZXJlZCB0aGUgY2l0eSB3aXRoIHNob3V0cyBhbmQgY3JpZXMgYnkgd2F5IG9mIEN5bGFyYWJpcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgZ3ltbmFzaXVtIGp1c3Qgb3V0c2lkZSB0aGUgY2l0eSB0b3dhcmRzIHRoZSBFYXN0Ljwvbm90ZT4gbm90aWNlZCB0aGF0IHRoZSBHYXVscyBkaWQgbm90IGFuc3dlciBoaXMgbWVuIHdpdGggYW55IHZpZ291ciBvciBjb3VyYWdlLCBhbmQgdGhlcmVmb3JlIGNvbmplY3R1cmVkIHRoYXQgdGhlaXIgcmVzcG9uc2Ugd2FzIHRoYXQgb2YgbWVuIGNvbmZvdW5kZWQgYW5kIGluIGRpc3RyZXNzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBsZWQgb24gZmFzdGVyLCBwdXNoaW5nIGFsb25nIHRoZSBob3JzZW1lbiBpbiBmcm9udCBvZiBoaW0sIHdobyB3ZXJlIG1ha2luZyB0aGVpciB3YXkgd2l0aCBkaWZmaWN1bHR5IGFtb25nIHRoZSB3YXRlci1jb25kdWl0cywgb2Ygd2hpY2ggdGhlIGNpdHkgaXMgZnVsbCwgYW5kIHdlcmUgaW4gcGVyaWwgb2YgdGhlaXIgbGl2ZXMgZnJvbSB0aGVtLiBBbmQgbm93LCBpbiB0aGlzIG5pZ2h0LWJhdHRsZSwgdGhlcmUgd2FzIGdyZWF0IHVuY2VydGFpbnR5IGFzIHRvIHdoYXQgY29tbWFuZHMgd2VyZSBnaXZlbiBhbmQgaG93IHRoZSBjb21tYW5kcyB3ZXJlIGNhcnJpZWQgb3V0OyBtZW4gc3RyYWdnbGVkIGFuZCBsb3N0IHRoZWlyIHdheSBhbW9uZyB0aGUgbmFycm93IHN0cmVldHMsIGFuZCBnZW5lcmFsc2hpcCB3YXMgb2Ygbm8gYXZhaWwgb3dpbmcgdG8gdGhlIGRhcmtuZXNzLCBjb25mdXNlZCBzaG91dGluZywgYW5kIGNvbmZpbmVkIHNwYWNlczsgYm90aCBwYXJ0aWVzIHRoZXJlZm9yZSB3ZXJlIHVuYWJsZSB0byBhY2NvbXBsaXNoIGFueXRoaW5nIGFuZCB3YWl0ZWQgZm9yIHRoZSBkYXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGF0IGxhc3QgaXQgYmVnYW4gdG8gZ3JvdyBsaWdodCwgdGhlIHNpZ2h0IG9mIHRoZSBBc3BpcyBmaWxsZWQgd2l0aCBhcm1lZCBlbmVtaWVzIGdyZWF0bHkgZGlzdHVyYmVkIFB5cnJodXM7IG1vcmVvdmVyLCBhbW9uZyB0aGUgbnVtZXJvdXMgdm90aXZlLW9mZmVyaW5ncyBpbiB0aGUgbWFya2V0LXBsYWNlIGhlIGNhdWdodCBzaWdodCBvZiBhIHdvbGYgYW5kIGJ1bGwgaW4gYnJvbnplLCByZXByZXNlbnRlZCBhcyBjbG9zaW5nIHdpdGggb25lIGFub3RoZXIgaW4gYmF0dGxlLCBhbmQgaGUgd2FzIGR1bWJmb3VuZGVkLCBmb3IgaGUgY2FsbGVkIHRvIG1pbmQgYW4gYW5jaWVudCBvcmFjbGUgcmVnYXJkaW5nIGhpbXNlbGYgd2hpY2ggZGVjbGFyZWQgdGhhdCBpdCB3YXMgZmF0ZWQgZm9yIGhpbSB0byBkaWUgd2hlbiBoZSBzYXcgYSB3b2xmIGZpZ2h0aW5nIHdpdGggYSBidWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBBcmdpdmVzIHNheSB0aGF0IHRoZXNlIGZpZ3VyZXMgd2VyZSBzZXQgdXAgaW4gdGhlaXIgbWFya2V0LXBsYWNlIGFzIG1lbW9yaWFscyBvZiBhbiBhbmNpZW50IGV2ZW50LiBOYW1lbHksIHdoZW4gRGFuYcO8cyBmaXJzdCBsYW5kZWQgaW4gdGhlIGNvdW50cnksIG5lYXIgUHlyYW1pYSBpbiB0aGUgZGlzdHJpY3Qgb2YgVGh5cmVhdGlzLCBhbmQgd2FzIG9uIGhpcyB3YXkgdG8gQXJnb3MsIGhlIHNhdyBhIHdvbGYgZmlnaHRpbmcgd2l0aCBhIGJ1bGw7IGFuZCBjb25jZWl2aW5nIHRoYXQgaGUgaGltc2VsZiB3YXMgcmVwcmVzZW50ZWQgYnkgdGhlIHdvbGYgKHNpbmNlIGJvdGggd2VyZSBzdHJhbmdlcnMgYW5kIHdlcmUgYXR0YWNraW5nIHRoZSBuYXRpdmVzKSwgaGUgd2F0Y2hlZCB0aGUgYmF0dGxlIHRvIGl0cyBlbmQsIGFuZCB3aGVuIHRoZSB3b2xmIGhhZCBwcmV2YWlsZWQsIHBhaWQgaGlzIHZvd3MgdG8gQXBvbGxvIEx5Y2VpdXMgKHRoZSB3b2xmLWdvZCksIGF0dGFja2VkIHRoZSBjaXR5LCBhbmQgd2FzIHZpY3RvcmlvdXMsIGFmdGVyIEdlbGFub3IsIHdobyB3YXMgYXQgdGhhdCB0aW1lIGtpbmcgb2YgQXJnb3MsIGhhZCBiZWVuIGRyaXZlbiBvdXQgYnkgYSBmYWN0aW9uLiBUaGlzLCB0aGVuLCB3YXMgdGhlIHNpZ25pZmljYW5jZSBvZiB0aGUgZGVkaWNhdGlvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDIuMTkuMyIgdmFsaWQ9InllcyI+UGF1c2FuaWFzIGlpLiAxOSwgMzwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGF0IGxhc3QgaXQgYmVnYW4gdG8gZ3JvdyBsaWdodCwgdGhlIHNpZ2h0IG9mIHRoZSBBc3BpcyBmaWxsZWQgd2l0aCBhcm1lZCBlbmVtaWVzIGdyZWF0bHkgZGlzdHVyYmVkIFB5cnJodXM7IG1vcmVvdmVyLCBhbW9uZyB0aGUgbnVtZXJvdXMgdm90aXZlLW9mZmVyaW5ncyBpbiB0aGUgbWFya2V0LXBsYWNlIGhlIGNhdWdodCBzaWdodCBvZiBhIHdvbGYgYW5kIGJ1bGwgaW4gYnJvbnplLCByZXByZXNlbnRlZCBhcyBjbG9zaW5nIHdpdGggb25lIGFub3RoZXIgaW4gYmF0dGxlLCBhbmQgaGUgd2FzIGR1bWJmb3VuZGVkLCBmb3IgaGUgY2FsbGVkIHRvIG1pbmQgYW4gYW5jaWVudCBvcmFjbGUgcmVnYXJkaW5nIGhpbXNlbGYgd2hpY2ggZGVjbGFyZWQgdGhhdCBpdCB3YXMgZmF0ZWQgZm9yIGhpbSB0byBkaWUgd2hlbiBoZSBzYXcgYSB3b2xmIGZpZ2h0aW5nIHdpdGggYSBidWxsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIEFyZ2l2ZXMgc2F5IHRoYXQgdGhlc2UgZmlndXJlcyB3ZXJlIHNldCB1cCBpbiB0aGVpciBtYXJrZXQtcGxhY2UgYXMgbWVtb3JpYWxzIG9mIGFuIGFuY2llbnQgZXZlbnQuIE5hbWVseSwgd2hlbiBEYW5hw7xzIGZpcnN0IGxhbmRlZCBpbiB0aGUgY291bnRyeSwgbmVhciBQeXJhbWlhIGluIHRoZSBkaXN0cmljdCBvZiBUaHlyZWF0aXMsIGFuZCB3YXMgb24gaGlzIHdheSB0byBBcmdvcywgaGUgc2F3IGEgd29sZiBmaWdodGluZyB3aXRoIGEgYnVsbDsgYW5kIGNvbmNlaXZpbmcgdGhhdCBoZSBoaW1zZWxmIHdhcyByZXByZXNlbnRlZCBieSB0aGUgd29sZiAoc2luY2UgYm90aCB3ZXJlIHN0cmFuZ2VycyBhbmQgd2VyZSBhdHRhY2tpbmcgdGhlIG5hdGl2ZXMpLCBoZSB3YXRjaGVkIHRoZSBiYXR0bGUgdG8gaXRzIGVuZCwgYW5kIHdoZW4gdGhlIHdvbGYgaGFkIHByZXZhaWxlZCwgcGFpZCBoaXMgdm93cyB0byBBcG9sbG8gTHljZWl1cyAodGhlIHdvbGYtZ29kKSwgYXR0YWNrZWQgdGhlIGNpdHksIGFuZCB3YXMgdmljdG9yaW91cywgYWZ0ZXIgR2VsYW5vciwgd2hvIHdhcyBhdCB0aGF0IHRpbWUga2luZyBvZiBBcmdvcywgaGFkIGJlZW4gZHJpdmVuIG91dCBieSBhIGZhY3Rpb24uIFRoaXMsIHRoZW4sIHdhcyB0aGUgc2lnbmlmaWNhbmNlIG9mIHRoZSBkZWRpY2F0aW9uLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDIuMTkuMyIgdmFsaWQ9InllcyI+UGF1c2FuaWFzIGlpLiAxOSwgMzwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAyLjE5LjMiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcyBpaS4gMTksIDM8L2JpYmw+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkRlamVjdGVkIGF0IHRoaXMgd2VsbCBhcyBiZWNhdXNlIG5vbmUgb2YgaGlzIGhvcGVzIHdlcmUgYmVpbmcgcmVhbGl6ZWQsIFB5cnJodXMgcHVycG9zZWQgdG8gcmV0cmVhdDsgYnV0IGZlYXJpbmcgdGhlIG5hcnJvd25lc3Mgb2YgdGhlIGdhdGVzIGhlIHNlbnQgdG8gaGlzIHNvbiBIZWxlbnVzLCB3aG8gaGFkIGJlZW4gbGVmdCBvdXRzaWRlIHRoZSBjaXR5IHdpdGggdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgZm9yY2VzLCBvcmRlcmluZyBoaW0gdG8gdGVhciBkb3duIHBhcnQgb2YgdGhlIHdhbGwgYW5kIHN1Y2NvdXIgdGhvc2Ugd2hvIHJ1c2hlZCBvdXQgdGhyb3VnaCB0aGUgYnJlYWNoLCBpbiBjYXNlIHRoZSBlbmVteSBtb2xlc3RlZCB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Pd2luZyB0byB0aGUgaGFzdGUgYW5kIHR1bXVsdCwgaG93ZXZlciwgdGhlIG1lc3NlbmdlciBicm91Z2h0IG5vIGNsZWFyIG9yZGVycywgYnV0IGFjdHVhbGx5IG1hZGUgYSBtaXN0YWtlLCBhbmQgdGhlIHlvdW5nIHByaW5jZSwgdGFraW5nIHRoZSByZXN0IG9mIHRoZSBlbGVwaGFudHMgYW5kIHRoZSBiZXN0IG9mIGhpcyBzb2xkaWVycywgbWFyY2hlZCB0aHJvdWdoIHRoZSBnYXRlIGludG8gdGhlIGNpdHkgdG8gaGVscCBoaXMgZmF0aGVyLiBCdXQgUHlycmh1cyB3YXMgYWxyZWFkeSBvbiB0aGUgcmV0cmVhdC4gQW5kIGFzIGxvbmcgYXMgdGhlIG1hcmtldHBsYWNlIGFmZm9yZGVkIGhpbSByb29tIGZvciB3aXRoZHJhd2luZyBhbmQgZmlnaHRpbmcsIGhlIHdvdWxkIHR1cm4gYW5kIHJlcGVsIGhpcyBhc3NhaWxhbnRzOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5idXQgYWZ0ZXIgaGUgaGFkIGJlZW4gZHJpdmVuIG91dCBvZiB0aGUgbWFya2V0LXBsYWNlIGludG8gdGhlIG5hcnJvdyBzdHJlZXQgd2hpY2ggbGVkIHVwIHRvIHRoZSBnYXRlLCBhbmQgZW5jb3VudGVyZWQgdGhvc2Ugd2hvIHdlcmUgcnVzaGluZyB0byBoaXMgYWlkIGZyb20gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiwgc29tZSBvZiB0aGVzZSBjb3VsZCBub3QgaGVhciBoaW0gd2hlbiBoZSBjYWxsZWQgb3V0IHRvIHRoZW0gdG8gd2l0aGRyYXcsIGFuZCB0aG9zZSB3aG8gZGlkLCBldmVuIHRob3VnaCB0aGV5IHdlcmUgdmVyeSByZWFkeSB0byBvYmV5IGhpbSwgd2VyZSBrZXB0IGZyb20gZG9pbmcgc28gYnkgdGhvc2Ugd2hvIHdlcmUgcG91cmluZyBpbiBiZWhpbmQgdGhlbSBmcm9tIHRoZSBnYXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGxhcmdlc3Qgb2YgdGhlIGVsZXBoYW50cyBoYWQgZmFsbGVuIGF0aHdhcnQgdGhlIGdhdGV3YXk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gbGFuZz0iZnIiPgoJCQkJCSAgICAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EZSB0cmF2ZXJzIHRvdXQgYXUgYmVhdSBtaWxpZXUgZGUgbGEgcG9ydGU8L3E+CiAgICAgICAgICAgICAgIDwvZm9yZWlnbj4gKEFteW90KS48L25vdGU+IGFuZCBsYXkgdGhlcmUgcm9hcmluZywgaW4gdGhlIHdheSBvZiB0aG9zZSB3aG8gd291bGQgaGF2ZSB0dXJuZWQgYmFjazsgYW5kIGFub3RoZXIgZWxlcGhhbnQsIG9uZSBvZiB0aG9zZSB3aGljaCBoYWQgZ29uZSBvbiBpbnRvIHRoZSBjaXR5LCBOaWNvbiBieSBuYW1lLCBzZWVraW5nIHRvIHJlY292ZXIgaGlzIHJpZGVyLCB3aG8gaGFkIGZhbGxlbiBmcm9tIGhpcyBiYWNrIGluIGNvbnNlcXVlbmNlIG9mIHdvdW5kcywgYW5kIGRhc2hpbmcgaW4gdGhlIGZhY2Ugb2YgdGhvc2Ugd2hvIHdlcmUgdHJ5aW5nIHRvIGdldCBvdXQsIGNyb3dkZWQgZnJpZW5kcyBhbmQgZm9lcyBhbGlrZSB0b2dldGhlciBpbiBhIHByb21pc2N1b3VzIHRocm9uZywgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+dW50aWwsIGhhdmluZyBmb3VuZCB0aGUgYm9keSBvZiBoaXMgbWFzdGVyLCBoZSB0b29rIGl0IHVwIHdpdGggaGlzIHByb2Jvc2NpcywgbGFpZCBpdCBhY3Jvc3MgaGlzIHR3byB0dXNrcywgYW5kIHR1cm5lZCBiYWNrIGFzIGlmIGNyYXplZCwgb3ZlcnRocm93aW5nIGFuZCBraWxsaW5nIHRob3NlIHdobyBjYW1lIGluIGhpcyB3YXkuIFRodXMgY3J1c2hlZCBhbmQgbWF0dGVkIHRvZ2V0aGVyIG5vdCBhIG1hbiBvZiB0aGVtIGNvdWxkIGFjdCBhdCBhbGwgZm9yIGhpbXNlbGYsIGJ1dCB0aGUgd2hvbGUgbXVsdGl0dWRlLCBib2x0ZWQgdG9nZXRoZXIsIGFzIGl0IHdlcmUsIGludG8gb25lIGJvZHksIGtlcHQgcm9sbGluZyBhbmQgc3dheWluZyB0aGlzIHdheSBhbmQgdGhhdC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+TGl0dGxlIGZpZ2h0aW5nIGNvdWxkIGJlIGRvbmUgYWdhaW5zdCB0aG9zZSBvZiB0aGUgZW5lbXkgd2hvIHdlcmUgY29udGludWFsbHkgYmVpbmcgY2F1Z2h0IHVwIGludG8gdGhlaXIgcmFua3Mgb3IgYXR0YWNraW5nIHRoZW0gZnJvbSB0aGUgcmVhciwgYW5kIHRoZXkgd3JvdWdodCBtb3N0IGhhcm0gdG8gdGhlbXNlbHZlcy4gRm9yIHdoZW4gYSBtYW4gaGFkIGRyYXduIGhpcyBzd29yZCBvciBwb2lzZWQgaGlzIHNwZWFyLCBoZSBjb3VsZCBub3QgcmVjb3ZlciBvciBzaGVhdGhlIGhpcyB3ZWFwb24gYWdhaW4sIGJ1dCBpdCB3b3VsZCBwYXNzIHRocm91Z2ggdGhvc2Ugd2hvIHN0b29kIGluIGl0cyB3YXksIGFuZCBzbyB0aGV5IGRpZWQgZnJvbSBvbmUgYW5vdGhlcidzIGJsb3dzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RGVqZWN0ZWQgYXQgdGhpcyB3ZWxsIGFzIGJlY2F1c2Ugbm9uZSBvZiBoaXMgaG9wZXMgd2VyZSBiZWluZyByZWFsaXplZCwgUHlycmh1cyBwdXJwb3NlZCB0byByZXRyZWF0OyBidXQgZmVhcmluZyB0aGUgbmFycm93bmVzcyBvZiB0aGUgZ2F0ZXMgaGUgc2VudCB0byBoaXMgc29uIEhlbGVudXMsIHdobyBoYWQgYmVlbiBsZWZ0IG91dHNpZGUgdGhlIGNpdHkgd2l0aCB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZSBmb3JjZXMsIG9yZGVyaW5nIGhpbSB0byB0ZWFyIGRvd24gcGFydCBvZiB0aGUgd2FsbCBhbmQgc3VjY291ciB0aG9zZSB3aG8gcnVzaGVkIG91dCB0aHJvdWdoIHRoZSBicmVhY2gsIGluIGNhc2UgdGhlIGVuZW15IG1vbGVzdGVkIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk93aW5nIHRvIHRoZSBoYXN0ZSBhbmQgdHVtdWx0LCBob3dldmVyLCB0aGUgbWVzc2VuZ2VyIGJyb3VnaHQgbm8gY2xlYXIgb3JkZXJzLCBidXQgYWN0dWFsbHkgbWFkZSBhIG1pc3Rha2UsIGFuZCB0aGUgeW91bmcgcHJpbmNlLCB0YWtpbmcgdGhlIHJlc3Qgb2YgdGhlIGVsZXBoYW50cyBhbmQgdGhlIGJlc3Qgb2YgaGlzIHNvbGRpZXJzLCBtYXJjaGVkIHRocm91Z2ggdGhlIGdhdGUgaW50byB0aGUgY2l0eSB0byBoZWxwIGhpcyBmYXRoZXIuIEJ1dCBQeXJyaHVzIHdhcyBhbHJlYWR5IG9uIHRoZSByZXRyZWF0LiBBbmQgYXMgbG9uZyBhcyB0aGUgbWFya2V0cGxhY2UgYWZmb3JkZWQgaGltIHJvb20gZm9yIHdpdGhkcmF3aW5nIGFuZCBmaWdodGluZywgaGUgd291bGQgdHVybiBhbmQgcmVwZWwgaGlzIGFzc2FpbGFudHM7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhZnRlciBoZSBoYWQgYmVlbiBkcml2ZW4gb3V0IG9mIHRoZSBtYXJrZXQtcGxhY2UgaW50byB0aGUgbmFycm93IHN0cmVldCB3aGljaCBsZWQgdXAgdG8gdGhlIGdhdGUsIGFuZCBlbmNvdW50ZXJlZCB0aG9zZSB3aG8gd2VyZSBydXNoaW5nIHRvIGhpcyBhaWQgZnJvbSB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLCBzb21lIG9mIHRoZXNlIGNvdWxkIG5vdCBoZWFyIGhpbSB3aGVuIGhlIGNhbGxlZCBvdXQgdG8gdGhlbSB0byB3aXRoZHJhdywgYW5kIHRob3NlIHdobyBkaWQsIGV2ZW4gdGhvdWdoIHRoZXkgd2VyZSB2ZXJ5IHJlYWR5IHRvIG9iZXkgaGltLCB3ZXJlIGtlcHQgZnJvbSBkb2luZyBzbyBieSB0aG9zZSB3aG8gd2VyZSBwb3VyaW5nIGluIGJlaGluZCB0aGVtIGZyb20gdGhlIGdhdGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgbGFyZ2VzdCBvZiB0aGUgZWxlcGhhbnRzIGhhZCBmYWxsZW4gYXRod2FydCB0aGUgZ2F0ZXdheTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZnIiPgoJCQkJCSAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRlIHRyYXZlcnMgdG91dCBhdSBiZWF1IG1pbGlldSBkZSBsYSBwb3J0ZTwvcT4KICAgICAgICAgICAgICAgPC9mb3JlaWduPiAoQW15b3QpLjwvbm90ZT4gYW5kIGxheSB0aGVyZSByb2FyaW5nLCBpbiB0aGUgd2F5IG9mIHRob3NlIHdobyB3b3VsZCBoYXZlIHR1cm5lZCBiYWNrOyBhbmQgYW5vdGhlciBlbGVwaGFudCwgb25lIG9mIHRob3NlIHdoaWNoIGhhZCBnb25lIG9uIGludG8gdGhlIGNpdHksIE5pY29uIGJ5IG5hbWUsIHNlZWtpbmcgdG8gcmVjb3ZlciBoaXMgcmlkZXIsIHdobyBoYWQgZmFsbGVuIGZyb20gaGlzIGJhY2sgaW4gY29uc2VxdWVuY2Ugb2Ygd291bmRzLCBhbmQgZGFzaGluZyBpbiB0aGUgZmFjZSBvZiB0aG9zZSB3aG8gd2VyZSB0cnlpbmcgdG8gZ2V0IG91dCwgY3Jvd2RlZCBmcmllbmRzIGFuZCBmb2VzIGFsaWtlIHRvZ2V0aGVyIGluIGEgcHJvbWlzY3VvdXMgdGhyb25nLCAKCQkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZnIiPgoJCQkJCSAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRlIHRyYXZlcnMgdG91dCBhdSBiZWF1IG1pbGlldSBkZSBsYSBwb3J0ZTwvcT4KICAgICAgICAgICAgICAgPC9mb3JlaWduPiAoQW15b3QpLjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RGUgdHJhdmVycyB0b3V0IGF1IGJlYXUgbWlsaWV1IGRlIGxhIHBvcnRlPC9xPgogICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnVudGlsLCBoYXZpbmcgZm91bmQgdGhlIGJvZHkgb2YgaGlzIG1hc3RlciwgaGUgdG9vayBpdCB1cCB3aXRoIGhpcyBwcm9ib3NjaXMsIGxhaWQgaXQgYWNyb3NzIGhpcyB0d28gdHVza3MsIGFuZCB0dXJuZWQgYmFjayBhcyBpZiBjcmF6ZWQsIG92ZXJ0aHJvd2luZyBhbmQga2lsbGluZyB0aG9zZSB3aG8gY2FtZSBpbiBoaXMgd2F5LiBUaHVzIGNydXNoZWQgYW5kIG1hdHRlZCB0b2dldGhlciBub3QgYSBtYW4gb2YgdGhlbSBjb3VsZCBhY3QgYXQgYWxsIGZvciBoaW1zZWxmLCBidXQgdGhlIHdob2xlIG11bHRpdHVkZSwgYm9sdGVkIHRvZ2V0aGVyLCBhcyBpdCB3ZXJlLCBpbnRvIG9uZSBib2R5LCBrZXB0IHJvbGxpbmcgYW5kIHN3YXlpbmcgdGhpcyB3YXkgYW5kIHRoYXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkxpdHRsZSBmaWdodGluZyBjb3VsZCBiZSBkb25lIGFnYWluc3QgdGhvc2Ugb2YgdGhlIGVuZW15IHdobyB3ZXJlIGNvbnRpbnVhbGx5IGJlaW5nIGNhdWdodCB1cCBpbnRvIHRoZWlyIHJhbmtzIG9yIGF0dGFja2luZyB0aGVtIGZyb20gdGhlIHJlYXIsIGFuZCB0aGV5IHdyb3VnaHQgbW9zdCBoYXJtIHRvIHRoZW1zZWx2ZXMuIEZvciB3aGVuIGEgbWFuIGhhZCBkcmF3biBoaXMgc3dvcmQgb3IgcG9pc2VkIGhpcyBzcGVhciwgaGUgY291bGQgbm90IHJlY292ZXIgb3Igc2hlYXRoZSBoaXMgd2VhcG9uIGFnYWluLCBidXQgaXQgd291bGQgcGFzcyB0aHJvdWdoIHRob3NlIHdobyBzdG9vZCBpbiBpdHMgd2F5LCBhbmQgc28gdGhleSBkaWVkIGZyb20gb25lIGFub3RoZXIncyBibG93cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFB5cnJodXMsIHNlZWluZyB0aGUgc3Rvcm15IHNlYSB0aGF0IHN1cmdlZCBhYm91dCBoaW0sIHRvb2sgb2ZmIHRoZSBjb3JvbmFsLCB3aXRoIHdoaWNoIGhpcyBoZWxtZXQgd2FzIGRpc3Rpbmd1aXNoZWQsIGFuZCBnYXZlIGl0IHRvIG9uZSBvZiBoaXMgY29tcGFuaW9uczsgdGhlbiwgcmVseWluZyBvbiBoaXMgaG9yc2UsIGhlIHBsdW5nZWQgaW4gYW1vbmcgdGhlIGVuZW15IHdobyB3ZXJlIHB1cnN1aW5nIGhpbS4gSGVyZSBoZSB3YXMgd291bmRlZCBieSBhIHNwZWFyIHdoaWNoIHBpZXJjZWQgaGlzIGJyZWFzdHBsYXRlLW5vdCBhIG1vcnRhbCwgbm9yIGV2ZW4gYSBzZXZlcmUgd291bmQtYW5kIHR1cm5lZCB1cG9uIHRoZSBtYW4gd2hvIGhhZCBzdHJ1Y2sgaGltLCB3aG8gd2FzIGFuIEFyZ2l2ZSwgbm90IG9mIGlsbHVzdHJpb3VzIGJpcnRoLCBidXQgdGhlIHNvbiBvZiBhIHBvb3Igb2xkIHdvbWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgbW90aGVyLCBsaWtlIHRoZSByZXN0IG9mIHRoZSB3b21lbiwgd2FzIGF0IHRoaXMgbW9tZW50IHdhdGNoaW5nIHRoZSBiYXR0bGUgZnJvbSB0aGUgaG91c2UtdG9wLCBhbmQgd2hlbiBzaGUgc2F3IHRoYXQgaGVyIHNvbiB3YXMgZW5nYWdlZCBpbiBjb25mbGljdCB3aXRoIFB5cnJodXMgc2hlIHdhcyBmaWxsZWQgd2l0aCBkaXN0cmVzcyBpbiB2aWV3IG9mIHRoZSBkYW5nZXIgdG8gaGltLCBhbmQgbGlmdGluZyB1cCBhIHRpbGUgd2l0aCBib3RoIGhlciBoYW5kcyB0aHJldyBpdCBhdCBQeXJyaHVzLiBJdCBmZWxsIHVwb24gaGlzIGhlYWQgYmVsb3cgaGlzIGhlbG1ldCBhbmQgY3J1c2hlZCB0aGUgdmVydGVicmFlIGF0IHRoZSBiYXNlIG9mIGhpcyBuZWNrLCBzbyB0aGF0IGhpcyBzaWdodCB3YXMgYmx1cnJlZCBhbmQgaGlzIGhhbmRzIGRyb3BwZWQgdGhlIHJlaW5zLiBUaGVuIGhlIHNhbmsgZG93biBmcm9tIGhpcyBob3JzZSBhbmQgZmVsbCBuZWFyIHRoZSB0b21iIG9mIExpY3ltbml1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDIuMjIuOCIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpaS4gMjIsIDg8L2JpYmw+Ljwvbm90ZT4gdW5yZWNvZ25pc2VkIGJ5IG1vc3Qgd2hvIHNhdyBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhIGNlcnRhaW4gWm9weXJ1cywgd2hvIHdhcyBzZXJ2aW5nIHVuZGVyIEFudGlnb251cywgYW5kIHR3byBvciB0aHJlZSBvdGhlcnMsIHJhbiB1cCB0byBoaW0sIHNhdyB3aG8gaGUgd2FzLCBhbmQgZHJhZ2dlZCBoaW0gaW50byBhIGRvb3Itd2F5IGp1c3QgYXMgaGUgd2FzIGJlZ2lubmluZyB0byByZWNvdmVyIGZyb20gdGhlIGJsb3cuIEFuZCB3aGVuIFpvcHlydXMgZHJldyBhbiBJbGx5cmlhbiBzaG9ydC1zd29yZCB3aXRoIHdoaWNoIHRvIGN1dCBvZmYgaGlzIGhlYWQsIFB5cnJodXMgZ2F2ZSBoaW0gYSB0ZXJyaWJsZSBsb29rLCBzbyB0aGF0IFpvcHlydXMgd2FzIGZyaWdodGVuZWQ7IGhpcyBoYW5kcyB0cmVtYmxlZCwgYW5kIHlldCBoZSBlc3NheWVkIHRoZSBkZWVkOyBidXQgYmVpbmcgZnVsbCBvZiBhbGFybSBhbmQgY29uZnVzaW9uIGhpcyBibG93IGRpZCBub3QgZmFsbCB0cnVlLCBidXQgYWxvbmcgdGhlIG1vdXRoIGFuZCBjaGluLCBzbyB0aGF0IGl0IHdhcyBvbmx5IHNsb3dseSBhbmQgd2l0aCBkaWZmaWN1bHR5IHRoYXQgaGUgc2V2ZXJlZCB0aGUgaGVhZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+UHJlc2VudGx5IHdoYXQgaGFkIGhhcHBlbmVkIHdhcyBrbm93biB0byBtYW55LCBhbmQgQWxjeW9uZXVzLCBydW5uaW5nIHRvIHRoZSBzcG90LCBhc2tlZCBmb3IgdGhlIGhlYWQgYXMgaWYgaGUgd291bGQgc2VlIHdob3NlIGl0IHdhcy4gQnV0IHdoZW4gaGUgaGFkIGdvdCBpdCBoZSByb2RlIGF3YXkgdG8gaGlzIGZhdGhlciwgYW5kIGNhc3QgaXQgZG93biBiZWZvcmUgaGltIGFzIGhlIHNhdCBhbW9uZyBoaXMgZnJpZW5kcy4gQW50aWdvbnVzLCBob3dldmVyLCB3aGVuIGhlIHNhdyBhbmQgcmVjb2duaXNlZCB0aGUgaGVhZCwgZHJvdmUgaGlzIHNvbiBhd2F5LCBzbWl0aW5nIGhpbSB3aXRoIGhpcyBzdGFmZicgYW5kIGNhbGxpbmcgaGltIGltcGlvdXMgYW5kIGJhcmJhcm91czsgdGhlbiwgY292ZXJpbmcgaGlzIGZhY2Ugd2l0aCBoaXMgY2xvYWsgaGUgYnVyc3QgaW50byB0ZWFycywgY2FsbGluZyB0byBtaW5kIEFudGlnb251cyBoaXMgZ3JhbmRmYXRoZXIgYW5kIERlbWV0cml1cyBoaXMgZmF0aGVyLCB3aG8gd2VyZSBleGFtcGxlcyBpbiBoaXMgb3duIGZhbWlseSBvZiBhIHJldmVyc2FsIG9mIGZvcnR1bmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFB5cnJodXMsIHNlZWluZyB0aGUgc3Rvcm15IHNlYSB0aGF0IHN1cmdlZCBhYm91dCBoaW0sIHRvb2sgb2ZmIHRoZSBjb3JvbmFsLCB3aXRoIHdoaWNoIGhpcyBoZWxtZXQgd2FzIGRpc3Rpbmd1aXNoZWQsIGFuZCBnYXZlIGl0IHRvIG9uZSBvZiBoaXMgY29tcGFuaW9uczsgdGhlbiwgcmVseWluZyBvbiBoaXMgaG9yc2UsIGhlIHBsdW5nZWQgaW4gYW1vbmcgdGhlIGVuZW15IHdobyB3ZXJlIHB1cnN1aW5nIGhpbS4gSGVyZSBoZSB3YXMgd291bmRlZCBieSBhIHNwZWFyIHdoaWNoIHBpZXJjZWQgaGlzIGJyZWFzdHBsYXRlLW5vdCBhIG1vcnRhbCwgbm9yIGV2ZW4gYSBzZXZlcmUgd291bmQtYW5kIHR1cm5lZCB1cG9uIHRoZSBtYW4gd2hvIGhhZCBzdHJ1Y2sgaGltLCB3aG8gd2FzIGFuIEFyZ2l2ZSwgbm90IG9mIGlsbHVzdHJpb3VzIGJpcnRoLCBidXQgdGhlIHNvbiBvZiBhIHBvb3Igb2xkIHdvbWFuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBtb3RoZXIsIGxpa2UgdGhlIHJlc3Qgb2YgdGhlIHdvbWVuLCB3YXMgYXQgdGhpcyBtb21lbnQgd2F0Y2hpbmcgdGhlIGJhdHRsZSBmcm9tIHRoZSBob3VzZS10b3AsIGFuZCB3aGVuIHNoZSBzYXcgdGhhdCBoZXIgc29uIHdhcyBlbmdhZ2VkIGluIGNvbmZsaWN0IHdpdGggUHlycmh1cyBzaGUgd2FzIGZpbGxlZCB3aXRoIGRpc3RyZXNzIGluIHZpZXcgb2YgdGhlIGRhbmdlciB0byBoaW0sIGFuZCBsaWZ0aW5nIHVwIGEgdGlsZSB3aXRoIGJvdGggaGVyIGhhbmRzIHRocmV3IGl0IGF0IFB5cnJodXMuIEl0IGZlbGwgdXBvbiBoaXMgaGVhZCBiZWxvdyBoaXMgaGVsbWV0IGFuZCBjcnVzaGVkIHRoZSB2ZXJ0ZWJyYWUgYXQgdGhlIGJhc2Ugb2YgaGlzIG5lY2ssIHNvIHRoYXQgaGlzIHNpZ2h0IHdhcyBibHVycmVkIGFuZCBoaXMgaGFuZHMgZHJvcHBlZCB0aGUgcmVpbnMuIFRoZW4gaGUgc2FuayBkb3duIGZyb20gaGlzIGhvcnNlIGFuZCBmZWxsIG5lYXIgdGhlIHRvbWIgb2YgTGljeW1uaXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDIuMjIuOCIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpaS4gMjIsIDg8L2JpYmw+Ljwvbm90ZT4gdW5yZWNvZ25pc2VkIGJ5IG1vc3Qgd2hvIHNhdyBoaW0uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gMi4yMi44IiB2YWxpZD0ieWVzIj5QYXVzYW5pYXMsIGlpLiAyMiwgODwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhIGNlcnRhaW4gWm9weXJ1cywgd2hvIHdhcyBzZXJ2aW5nIHVuZGVyIEFudGlnb251cywgYW5kIHR3byBvciB0aHJlZSBvdGhlcnMsIHJhbiB1cCB0byBoaW0sIHNhdyB3aG8gaGUgd2FzLCBhbmQgZHJhZ2dlZCBoaW0gaW50byBhIGRvb3Itd2F5IGp1c3QgYXMgaGUgd2FzIGJlZ2lubmluZyB0byByZWNvdmVyIGZyb20gdGhlIGJsb3cuIEFuZCB3aGVuIFpvcHlydXMgZHJldyBhbiBJbGx5cmlhbiBzaG9ydC1zd29yZCB3aXRoIHdoaWNoIHRvIGN1dCBvZmYgaGlzIGhlYWQsIFB5cnJodXMgZ2F2ZSBoaW0gYSB0ZXJyaWJsZSBsb29rLCBzbyB0aGF0IFpvcHlydXMgd2FzIGZyaWdodGVuZWQ7IGhpcyBoYW5kcyB0cmVtYmxlZCwgYW5kIHlldCBoZSBlc3NheWVkIHRoZSBkZWVkOyBidXQgYmVpbmcgZnVsbCBvZiBhbGFybSBhbmQgY29uZnVzaW9uIGhpcyBibG93IGRpZCBub3QgZmFsbCB0cnVlLCBidXQgYWxvbmcgdGhlIG1vdXRoIGFuZCBjaGluLCBzbyB0aGF0IGl0IHdhcyBvbmx5IHNsb3dseSBhbmQgd2l0aCBkaWZmaWN1bHR5IHRoYXQgaGUgc2V2ZXJlZCB0aGUgaGVhZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlByZXNlbnRseSB3aGF0IGhhZCBoYXBwZW5lZCB3YXMga25vd24gdG8gbWFueSwgYW5kIEFsY3lvbmV1cywgcnVubmluZyB0byB0aGUgc3BvdCwgYXNrZWQgZm9yIHRoZSBoZWFkIGFzIGlmIGhlIHdvdWxkIHNlZSB3aG9zZSBpdCB3YXMuIEJ1dCB3aGVuIGhlIGhhZCBnb3QgaXQgaGUgcm9kZSBhd2F5IHRvIGhpcyBmYXRoZXIsIGFuZCBjYXN0IGl0IGRvd24gYmVmb3JlIGhpbSBhcyBoZSBzYXQgYW1vbmcgaGlzIGZyaWVuZHMuIEFudGlnb251cywgaG93ZXZlciwgd2hlbiBoZSBzYXcgYW5kIHJlY29nbmlzZWQgdGhlIGhlYWQsIGRyb3ZlIGhpcyBzb24gYXdheSwgc21pdGluZyBoaW0gd2l0aCBoaXMgc3RhZmYnIGFuZCBjYWxsaW5nIGhpbSBpbXBpb3VzIGFuZCBiYXJiYXJvdXM7IHRoZW4sIGNvdmVyaW5nIGhpcyBmYWNlIHdpdGggaGlzIGNsb2FrIGhlIGJ1cnN0IGludG8gdGVhcnMsIGNhbGxpbmcgdG8gbWluZCBBbnRpZ29udXMgaGlzIGdyYW5kZmF0aGVyIGFuZCBEZW1ldHJpdXMgaGlzIGZhdGhlciwgd2hvIHdlcmUgZXhhbXBsZXMgaW4gaGlzIG93biBmYW1pbHkgb2YgYSByZXZlcnNhbCBvZiBmb3J0dW5lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgaGVhZCBhbmQgYm9keSBvZiBQeXJyaHVzLCB0aGVuLCBBbnRpZ29udXMgY2F1c2VkIHRvIGJlIGFkb3JuZWQgZm9yIGJ1cmlhbCBhbmQgYnVybmVkOyBhbmQgd2hlbiBBbGN5b25ldXMgZm91bmQgSGVsZW51cyBpbiBhbiBhYmplY3Qgc3RhdGUgYW5kIHdlYXJpbmcgYSBwYWx0cnkgY2xvYWssIGFuZCBzcG9rZSB0byBoaW0ga2luZGx5IGFuZCBicm91Z2h0IGhpbSBpbnRvIHRoZSBwcmVzZW5jZSBvZiBoaXMgZmF0aGVyLCBBbnRpZ29udXMgd2FzIHBsZWFzZWQgd2l0aCBoaXMgY29uZHVjdCwgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBpcyBiZXR0ZXIsIG15IHNvbiwgdGhhbiB3aGF0IHRob3UgZGlkc3QgYmVmb3JlOyBidXQgbm90IGV2ZW4gbm93IGhhc3QgdGhvdSBkb25lIHdlbGwgaW4gYWxsb3dpbmcgdGhpcyBjbG90aGluZyB0byByZW1haW4sIHdoaWNoIGlzIGEgZGlzZ3JhY2UgdGhlIHJhdGhlciB0byB1cyB3aG8gYXJlIGhlbGQgdG8gYmUgdGhlIHZpY3RvcnMuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIHNob3dpbmcga2luZG5lc3MgdG8gSGVsZW51cyBhbmQgYWRvcm5pbmcgaGlzIHBlcnNvbiwgaGUgc2VudCBoaW0gYmFjayB0byBFcGVpcnVzLCBhbmQgaGUgZGVhbHQgbWlsZGx5IHdpdGggdGhlIGZyaWVuZHMgb2YgUHlycmh1cyB3aGVuIGhlIGJlY2FtZSBtYXN0ZXIgb2YgdGhlaXIgY2FtcCBhbmQgb2YgdGhlaXIgd2hvbGUgZm9yY2UuCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBoZWFkIGFuZCBib2R5IG9mIFB5cnJodXMsIHRoZW4sIEFudGlnb251cyBjYXVzZWQgdG8gYmUgYWRvcm5lZCBmb3IgYnVyaWFsIGFuZCBidXJuZWQ7IGFuZCB3aGVuIEFsY3lvbmV1cyBmb3VuZCBIZWxlbnVzIGluIGFuIGFiamVjdCBzdGF0ZSBhbmQgd2VhcmluZyBhIHBhbHRyeSBjbG9haywgYW5kIHNwb2tlIHRvIGhpbSBraW5kbHkgYW5kIGJyb3VnaHQgaGltIGludG8gdGhlIHByZXNlbmNlIG9mIGhpcyBmYXRoZXIsIEFudGlnb251cyB3YXMgcGxlYXNlZCB3aXRoIGhpcyBjb25kdWN0LCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgaXMgYmV0dGVyLCBteSBzb24sIHRoYW4gd2hhdCB0aG91IGRpZHN0IGJlZm9yZTsgYnV0IG5vdCBldmVuIG5vdyBoYXN0IHRob3UgZG9uZSB3ZWxsIGluIGFsbG93aW5nIHRoaXMgY2xvdGhpbmcgdG8gcmVtYWluLCB3aGljaCBpcyBhIGRpc2dyYWNlIHRoZSByYXRoZXIgdG8gdXMgd2hvIGFyZSBoZWxkIHRvIGJlIHRoZSB2aWN0b3JzLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
