var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = document.getElementsByClassName(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpZiB3ZSBleGFtaW5lIGludG8gdGhlIGJhdHRsZXMgd2hpY2ggZWFjaCBmb3VnaHQsIHdlIHNoYWxsIGZpbmQgdGhhdCB0aGUgR3JlZWtzIHNsYWluIGJ5IFBoaWxvcG9lbWVuIGFzIGdlbmVyYWwgb2YgdGhlIEFjaGFlYW5zIHdlcmUgbW9yZSBpbiBudW1iZXIgdGhhbiB0aGUgTWFjZWRvbmlhbnMgc2xhaW4gYnkgVGl0dXMgYXMgaGVscGVyIG9mIHRoZSBHcmVla3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHRoZW4gYXMgdG8gdGhlaXIgZXJyb3JzLCBpbiB0aGUgb25lIHRoZXkgd2VyZSBkdWUgdG8gYW1iaXRpb24sIGluIHRoZSBvdGhlciB0byBhIHNwaXJpdCBvZiBjb250ZW50aW9uLiBGb3IgVGl0dXMgcHJlc2VydmVkIFBoaWxpcCdzIHJveWFsIGRpZ25pdHkgYW5kIHNob3dlZCBmYXZvdXIgdG8gdGhlIEFldG9saWFuczsgd2hlcmVhcyB0aGUgYW5nZXIgb2YgUGhpbG9wb2VtZW4gbGVkIGhpbSB0byByb2IgaGlzIG5hdGl2ZSBjaXR5IG9mIGl0cyBzdXByZW1hY3kgb3ZlciB0aGUgc3Vycm91bmRpbmcgdmlsbGFnZXMuICAgCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnVydGhlciwgdGhlIG9uZSB3YXMgYWx3YXlzIGNvbnN0YW50IHRvd2FyZHMgaGlzIGJlbmVmaWNpYXJpZXMsIHdoaWxlIHRoZSBvdGhlciwgdG8gaW5kdWxnZSBoaXMgd3JhdGgsIHdhcyBldmVyIHJlYWR5IHRvIGNhbmNlbCBhIGtpbmRuZXNzLiBGb3IgaW5zdGFuY2UsIHRob3VnaCBoZSBoYWQgb25jZSBiZWVuIGEgYmVuZWZhY3RvciBvZiBTcGFydGEsIGhlIGFmdGVyd2FyZHMgdG9yZSBkb3duIGhlciB3YWxscywgcmVkdWNlZCBoZXIgdGVycml0b3J5LCBhbmQgZmluYWxseSBhbHRlcmVkIGFuZCBkZXN0cm95ZWQgaGVyIHZlcnkgY29uc3RpdHV0aW9uLiBBbmQgaXQgd291bGQgYXBwZWFyIHRoYXQgaGUgdGhyZXcgYXdheSBoaXMgbGlmZSBpbiBhIGZpdCBvZiBhbmdlciBhbmQgY29udGVudGlvdXNuZXNzLCBieSBoYXN0ZW5pbmcgdG8gYXR0YWNrIE1lc3NlbmUgYmVmb3JlIG9jY2FzaW9uIG9mZmVyZWQgYW5kIG1vcmUgcXVpY2tseSB0aGFuIHdhcyBmZWFzaWJsZTsgZm9yIGhlIGRpZCBub3QsIGxpa2UgVGl0dXMsIGNvbmR1Y3QgYWxsIGhpcyBtaWxpdGFyeSBvcGVyYXRpb25zIHdpdGggZGVsaWJlcmF0aW9uIGFuZCBhIGR1ZSByZWdhcmQgZm9yIHNhZmV0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmdXJ0aGVyLCB0aGUgb25lIHdhcyBhbHdheXMgY29uc3RhbnQgdG93YXJkcyBoaXMgYmVuZWZpY2lhcmllcywgd2hpbGUgdGhlIG90aGVyLCB0byBpbmR1bGdlIGhpcyB3cmF0aCwgd2FzIGV2ZXIgcmVhZHkgdG8gY2FuY2VsIGEga2luZG5lc3MuIEZvciBpbnN0YW5jZSwgdGhvdWdoIGhlIGhhZCBvbmNlIGJlZW4gYSBiZW5lZmFjdG9yIG9mIFNwYXJ0YSwgaGUgYWZ0ZXJ3YXJkcyB0b3JlIGRvd24gaGVyIHdhbGxzLCByZWR1Y2VkIGhlciB0ZXJyaXRvcnksIGFuZCBmaW5hbGx5IGFsdGVyZWQgYW5kIGRlc3Ryb3llZCBoZXIgdmVyeSBjb25zdGl0dXRpb24uIEFuZCBpdCB3b3VsZCBhcHBlYXIgdGhhdCBoZSB0aHJldyBhd2F5IGhpcyBsaWZlIGluIGEgZml0IG9mIGFuZ2VyIGFuZCBjb250ZW50aW91c25lc3MsIGJ5IGhhc3RlbmluZyB0byBhdHRhY2sgTWVzc2VuZSBiZWZvcmUgb2NjYXNpb24gb2ZmZXJlZCBhbmQgbW9yZSBxdWlja2x5IHRoYW4gd2FzIGZlYXNpYmxlOyBmb3IgaGUgZGlkIG5vdCwgbGlrZSBUaXR1cywgY29uZHVjdCBhbGwgaGlzIG1pbGl0YXJ5IG9wZXJhdGlvbnMgd2l0aCBkZWxpYmVyYXRpb24gYW5kIGEgZHVlIHJlZ2FyZCBmb3Igc2FmZXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzdXJlbHkgdGhlIG11bHRpdHVkZSBvZiBoaXMgd2FycyBhbmQgdHJvcGhpZXMgcHV0IHRoZSBtaWxpdGFyeSBleHBlcmllbmNlIG9mIFBoaWxvcG9lbWVuIG9uIGEgZmlybWVyIGJhc2lzLiBGb3IgdGhlIGNhbXBhaWduIG9mIFRpdHVzIGFnYWluc3QgUGhpbGlwIHdhcyBkZWNpZGVkIGJ5IHR3byBjb25mbGljdHMsIHdoZXJlYXMgUGhpbG9wb2VtZW4gd2FzIHN1Y2Nlc3NmdWwgaW4gY291bnRsZXNzIGJhdHRsZXMgYW5kIGxlZnQgbm8gcm9vbSBmb3IgdGhlIGNsYWltIHRoYXQgaGlzIHZpY3RvcmllcyB3ZXJlIGR1ZSB0byBmb3J0dW5lIHJhdGhlciB0aGFuIHRvIHNraWxsLiBBbmQgYmVzaWRlcywgVGl0dXMsIGluIGhpcyBxdWVzdCBvZiBmYW1lLCBhdmFpbGVkIGhpbXNlbGYgb2YgdGhlIGN1bG1pbmF0aW5nIHBvd2VyIG9mIFJvbWU7IHdoZXJlYXMgUGhpbG9wb2VtZW4gZmxvdXJpc2hlZCB3aGVuIEdyZWVjZSB3YXMgYWxyZWFkeSBpbiBkZWNsZW5zaW9uLiBUaGVyZWZvcmUgdGhlIHN1Y2Nlc3Mgb2YgUGhpbG9wb2VtZW4gd2FzIGhpcyBvd24gd29yaywgd2hpbGUgdGhhdCBvZiBUaXR1cyB3YXMgdGhlIHJlc3VsdCBvZiBhIGNvbW11bml0eSBvZiBlZmZvcnQ7IGZvciB0aGUgbGF0dGVyIHdhcyBjb21tYW5kZXIgb2YgZ29vZCBzb2xkaWVycywgd2hpbGUgdGhlIGZvcm1lciwgYXMgY29tbWFuZGVyLCBoYWQgdG8gbWFrZSBoaXMgc29sZGllcnMgZ29vZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHN1cmVseSB0aGUgZmFjdCB0aGF0IFBoaWxvcG9lbWVuJ3MgY29uZmxpY3RzIHdlcmUgd2l0aCBHcmVla3MgZnVybmlzaGVkIGEgcHJvb2Ygb2YgaGlzIHZhbG91ciB3aGljaCB3YXMgY29udmluY2luZyBldmVuIHRob3VnaCB1bmZvcnR1bmF0ZTogZm9yIHdoZXJlIG90aGVyIHRoaW5ncyBhcmUgZXF1YWwsIHRoZXkgcHJldmFpbCB3aG8gc3VycGFzcyBpbiB2YWxvdXIuIEFuZCBzbyBpdCB3YXMgdGhhdCBhbHRob3VnaCBoZSBjYXJyaWVkIG9uIHdhciB3aXRoIHRoZSBtb3N0IHdhcmxpa2Ugb2YgdGhlIEdyZWVrcywgbmFtZWx5LCB0aGUgQ3JldGFucyBhbmQgTGFjZWRhZW1vbmlhbnMsIGhlIHN1cnBhc3NlZCB0aGUgZmlyc3QgaW4gd2lsZXMsIHRob3VnaCB0aGV5IHdlcmUgbW9zdCBjcmFmdHksIGFuZCB0aGUgc2Vjb25kIGluIGRhcmluZywgdGhvdWdoIHRoZXkgd2VyZSBtb3N0IGJyYXZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc3VyZWx5IHRoZSBtdWx0aXR1ZGUgb2YgaGlzIHdhcnMgYW5kIHRyb3BoaWVzIHB1dCB0aGUgbWlsaXRhcnkgZXhwZXJpZW5jZSBvZiBQaGlsb3BvZW1lbiBvbiBhIGZpcm1lciBiYXNpcy4gRm9yIHRoZSBjYW1wYWlnbiBvZiBUaXR1cyBhZ2FpbnN0IFBoaWxpcCB3YXMgZGVjaWRlZCBieSB0d28gY29uZmxpY3RzLCB3aGVyZWFzIFBoaWxvcG9lbWVuIHdhcyBzdWNjZXNzZnVsIGluIGNvdW50bGVzcyBiYXR0bGVzIGFuZCBsZWZ0IG5vIHJvb20gZm9yIHRoZSBjbGFpbSB0aGF0IGhpcyB2aWN0b3JpZXMgd2VyZSBkdWUgdG8gZm9ydHVuZSByYXRoZXIgdGhhbiB0byBza2lsbC4gQW5kIGJlc2lkZXMsIFRpdHVzLCBpbiBoaXMgcXVlc3Qgb2YgZmFtZSwgYXZhaWxlZCBoaW1zZWxmIG9mIHRoZSBjdWxtaW5hdGluZyBwb3dlciBvZiBSb21lOyB3aGVyZWFzIFBoaWxvcG9lbWVuIGZsb3VyaXNoZWQgd2hlbiBHcmVlY2Ugd2FzIGFscmVhZHkgaW4gZGVjbGVuc2lvbi4gVGhlcmVmb3JlIHRoZSBzdWNjZXNzIG9mIFBoaWxvcG9lbWVuIHdhcyBoaXMgb3duIHdvcmssIHdoaWxlIHRoYXQgb2YgVGl0dXMgd2FzIHRoZSByZXN1bHQgb2YgYSBjb21tdW5pdHkgb2YgZWZmb3J0OyBmb3IgdGhlIGxhdHRlciB3YXMgY29tbWFuZGVyIG9mIGdvb2Qgc29sZGllcnMsIHdoaWxlIHRoZSBmb3JtZXIsIGFzIGNvbW1hbmRlciwgaGFkIHRvIG1ha2UgaGlzIHNvbGRpZXJzIGdvb2QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdXJlbHkgdGhlIGZhY3QgdGhhdCBQaGlsb3BvZW1lbidzIGNvbmZsaWN0cyB3ZXJlIHdpdGggR3JlZWtzIGZ1cm5pc2hlZCBhIHByb29mIG9mIGhpcyB2YWxvdXIgd2hpY2ggd2FzIGNvbnZpbmNpbmcgZXZlbiB0aG91Z2ggdW5mb3J0dW5hdGU6IGZvciB3aGVyZSBvdGhlciB0aGluZ3MgYXJlIGVxdWFsLCB0aGV5IHByZXZhaWwgd2hvIHN1cnBhc3MgaW4gdmFsb3VyLiBBbmQgc28gaXQgd2FzIHRoYXQgYWx0aG91Z2ggaGUgY2FycmllZCBvbiB3YXIgd2l0aCB0aGUgbW9zdCB3YXJsaWtlIG9mIHRoZSBHcmVla3MsIG5hbWVseSwgdGhlIENyZXRhbnMgYW5kIExhY2VkYWVtb25pYW5zLCBoZSBzdXJwYXNzZWQgdGhlIGZpcnN0IGluIHdpbGVzLCB0aG91Z2ggdGhleSB3ZXJlIG1vc3QgY3JhZnR5LCBhbmQgdGhlIHNlY29uZCBpbiBkYXJpbmcsIHRob3VnaCB0aGV5IHdlcmUgbW9zdCBicmF2ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gYWRkaXRpb24gdG8gdGhpcyBpdCBtYXkgYmUgc2FpZCB0aGF0IFRpdHVzIHdvbiBoaXMgdmljdG9yaWVzIGJ5IHVzaW5nIHdoYXQgbGF5IHJlYWR5IHRvIGhpcyBoYW5kLCBzaW5jZSBoZSBhdmFpbGVkIGhpbXNlbGYgb2Ygc3R5bGVzIG9mIGFybW91ciBhbmQgZm9ybWF0aW9uIHdoaWNoIGhhZCBjb21lIGRvd24gdG8gaGltLCB3aGVyZWFzIFBoaWxvcG9lbWVuIHdvbiBoaXMgc3VjY2Vzc2VzIGJ5IG1ha2luZyBjb250cmlidXRpb25zIGFuZCBjaGFuZ2VzIG9mIGhpcyBvd24gaW4gdGhlc2UgbWF0dGVycywgc28gdGhhdCBpbiB0aGUgb25lIGNhc2Ugd2hhdCB3YXMgbW9zdCBlc3NlbnRpYWwgZm9yIHZpY3RvcnkgZGlkIG5vdCBleGlzdCBhbmQgaGFkIHRvIGJlIGRpc2NvdmVyZWQsIHdoaWxlIGluIHRoZSBvdGhlciBpdCBsYXkgcmVhZHkgZm9yIHNlcnZpY2UuIEluIHRoZSB3YXkgb2YgcGVyc29uYWwgcHJvd2VzcywgbW9yZW92ZXIsIFBoaWxvcG9lbWVuIHBlcmZvcm1lZCBtdWNoIHRoYXQgd2FzIGdyZWF0LCBidXQgVGl0dXMgbm90aGluZyBhdCBhbGw7IG5heSwgYW4gQWV0b2xpYW4gbmFtZWQgQXJjaGVkZW11cyBtb2NrZWQgYXQgaGltIGJlY2F1c2UsIHdoZW4gaGUgaGltc2VsZiBoYWQgZHJhd24gaGlzIHN3b3JkIGFuZCB3YXMgcnVubmluZyBhdCBmdWxsIHNwZWVkIGFnYWluc3QgdGhlIE1hY2Vkb25pYW5zIHdobyB3ZXJlIGhvbGRpbmcgdG9nZXRoZXIgYW5kIGZpZ2h0aW5nLCBUaXR1cyB3YXMgc3RhbmRpbmcgd2l0aCBoaXMgaGFuZHMgc3RyZXRjaGVkIHVwIHRvd2FyZHMgaGVhdmVuIGFuZCBwcmF5aW5nIGZvciBoZWxwLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIGFkZGl0aW9uIHRvIHRoaXMgaXQgbWF5IGJlIHNhaWQgdGhhdCBUaXR1cyB3b24gaGlzIHZpY3RvcmllcyBieSB1c2luZyB3aGF0IGxheSByZWFkeSB0byBoaXMgaGFuZCwgc2luY2UgaGUgYXZhaWxlZCBoaW1zZWxmIG9mIHN0eWxlcyBvZiBhcm1vdXIgYW5kIGZvcm1hdGlvbiB3aGljaCBoYWQgY29tZSBkb3duIHRvIGhpbSwgd2hlcmVhcyBQaGlsb3BvZW1lbiB3b24gaGlzIHN1Y2Nlc3NlcyBieSBtYWtpbmcgY29udHJpYnV0aW9ucyBhbmQgY2hhbmdlcyBvZiBoaXMgb3duIGluIHRoZXNlIG1hdHRlcnMsIHNvIHRoYXQgaW4gdGhlIG9uZSBjYXNlIHdoYXQgd2FzIG1vc3QgZXNzZW50aWFsIGZvciB2aWN0b3J5IGRpZCBub3QgZXhpc3QgYW5kIGhhZCB0byBiZSBkaXNjb3ZlcmVkLCB3aGlsZSBpbiB0aGUgb3RoZXIgaXQgbGF5IHJlYWR5IGZvciBzZXJ2aWNlLiBJbiB0aGUgd2F5IG9mIHBlcnNvbmFsIHByb3dlc3MsIG1vcmVvdmVyLCBQaGlsb3BvZW1lbiBwZXJmb3JtZWQgbXVjaCB0aGF0IHdhcyBncmVhdCwgYnV0IFRpdHVzIG5vdGhpbmcgYXQgYWxsOyBuYXksIGFuIEFldG9saWFuIG5hbWVkIEFyY2hlZGVtdXMgbW9ja2VkIGF0IGhpbSBiZWNhdXNlLCB3aGVuIGhlIGhpbXNlbGYgaGFkIGRyYXduIGhpcyBzd29yZCBhbmQgd2FzIHJ1bm5pbmcgYXQgZnVsbCBzcGVlZCBhZ2FpbnN0IHRoZSBNYWNlZG9uaWFucyB3aG8gd2VyZSBob2xkaW5nIHRvZ2V0aGVyIGFuZCBmaWdodGluZywgVGl0dXMgd2FzIHN0YW5kaW5nIHdpdGggaGlzIGhhbmRzIHN0cmV0Y2hlZCB1cCB0b3dhcmRzIGhlYXZlbiBhbmQgcHJheWluZyBmb3IgaGVscC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnVydGhlciwgVGl0dXMgd2FzIGVpdGhlciBhIGNvbW1hbmRlciBvciBhbiBhbWJhc3NhZG9yIHdoZW4gaGUgZGlkIGFsbCBoaXMgbm9ibGUgZGVlZHMsIHdoZXJlYXMgUGhpbG9wb2VtZW4gc2hvd2VkIGhpbXNlbGYgbm8gbGVzcyBhY3RpdmUgYW5kIGVmZmVjdGl2ZSBmb3IgdGhlIEFjaGFlYW5zIHdoZW4gaGUgd2FzIGEgcHJpdmF0ZSBjaXRpemVuIHRoYW4gd2hlbiBoZSB3YXMgdGhlaXIgZ2VuZXJhbC4gRm9yIGl0IHdhcyBhcyBhIHByaXZhdGUgY2l0aXplbiB0aGF0IGhlIGV4cGVsbGVkIE5hYmlzIGZyb20gTWVzc2VuZSBhbmQgc2V0IHRoZSBNZXNzZW5pYW5zIGZyZWUsIGFuZCBhcyBhIHByaXZhdGUgY2l0aXplbiB0aGF0IGhlIHNodXQgdGhlIGdhdGVzIG9mIFNwYXJ0YSBhZ2FpbnN0IHRoZSBjb21pbmcgb2YgRGlvcGhhbmVzIHRoZSBnZW5lcmFsIGFuZCBUaXR1cywgYW5kIHNvIHNhdmVkIHRoZSBMYWNlZGFlbW9uaWFucy4gIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyB0aGlzIG5hdHVyYWwgZ2lmdCBvZiBsZWFkZXJzaGlwLCBoZSBub3Qgb25seSBrbmV3IGhvdyB0byB1c2UgaXQgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXdzLCBidXQgYWxzbyBob3cgdG8gZG9taW5hdGUgdGhlIGxhd3MgZm9yIHRoZSBjb21tb24gZ29vZDsgaGUgZGlkIG5vdCB0aGluayBpdCBuZWNlc3NhcnkgdG8gYmUgYXBwb2ludGVkIGNvbW1hbmRlciBieSB0aGUgcGVvcGxlLCBidXQgdG9vayB0aGVtIHVuZGVyIGhpcyBjb21tYW5kIHdoZW4gb2NjYXNpb24gcmVxdWlyZWQgaXQsIGNvbnNpZGVyaW5nIHRoYXQgaGUgd2hvIHRvb2sgd2lzZSBjb3Vuc2VsIGluIHRoZWlyIGJlaGFsZiwgcmF0aGVyIHRoYW4gaGUgd2hvIGhhZCBiZWVuIGVsZWN0ZWQgYnkgdGhlbSwgd2FzIHRoZWlyIHJlYWwgZ2VuZXJhbC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnVydGhlciwgVGl0dXMgd2FzIGVpdGhlciBhIGNvbW1hbmRlciBvciBhbiBhbWJhc3NhZG9yIHdoZW4gaGUgZGlkIGFsbCBoaXMgbm9ibGUgZGVlZHMsIHdoZXJlYXMgUGhpbG9wb2VtZW4gc2hvd2VkIGhpbXNlbGYgbm8gbGVzcyBhY3RpdmUgYW5kIGVmZmVjdGl2ZSBmb3IgdGhlIEFjaGFlYW5zIHdoZW4gaGUgd2FzIGEgcHJpdmF0ZSBjaXRpemVuIHRoYW4gd2hlbiBoZSB3YXMgdGhlaXIgZ2VuZXJhbC4gRm9yIGl0IHdhcyBhcyBhIHByaXZhdGUgY2l0aXplbiB0aGF0IGhlIGV4cGVsbGVkIE5hYmlzIGZyb20gTWVzc2VuZSBhbmQgc2V0IHRoZSBNZXNzZW5pYW5zIGZyZWUsIGFuZCBhcyBhIHByaXZhdGUgY2l0aXplbiB0aGF0IGhlIHNodXQgdGhlIGdhdGVzIG9mIFNwYXJ0YSBhZ2FpbnN0IHRoZSBjb21pbmcgb2YgRGlvcGhhbmVzIHRoZSBnZW5lcmFsIGFuZCBUaXR1cywgYW5kIHNvIHNhdmVkIHRoZSBMYWNlZGFlbW9uaWFucy4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyB0aGlzIG5hdHVyYWwgZ2lmdCBvZiBsZWFkZXJzaGlwLCBoZSBub3Qgb25seSBrbmV3IGhvdyB0byB1c2UgaXQgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXdzLCBidXQgYWxzbyBob3cgdG8gZG9taW5hdGUgdGhlIGxhd3MgZm9yIHRoZSBjb21tb24gZ29vZDsgaGUgZGlkIG5vdCB0aGluayBpdCBuZWNlc3NhcnkgdG8gYmUgYXBwb2ludGVkIGNvbW1hbmRlciBieSB0aGUgcGVvcGxlLCBidXQgdG9vayB0aGVtIHVuZGVyIGhpcyBjb21tYW5kIHdoZW4gb2NjYXNpb24gcmVxdWlyZWQgaXQsIGNvbnNpZGVyaW5nIHRoYXQgaGUgd2hvIHRvb2sgd2lzZSBjb3Vuc2VsIGluIHRoZWlyIGJlaGFsZiwgcmF0aGVyIHRoYW4gaGUgd2hvIGhhZCBiZWVuIGVsZWN0ZWQgYnkgdGhlbSwgd2FzIHRoZWlyIHJlYWwgZ2VuZXJhbC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm9ibHkgZ2VuZXJvdXMsIHRoZW4sIHdhcyB0aGUgY2xlbWVuY3kgYW5kIGh1bWFuaXR5IHdoaWNoIFRpdHVzIHNob3dlZCB0byB0aGUgR3JlZWtzLCBidXQgbW9yZSBub2JseSBnZW5lcm91cyB3YXMgdGhlIGZpcm1uZXNzIGFuZCBsb3ZlIG9mIGZyZWVkb20gd2l0aCB3aGljaCBQaGlsb3BvZW1lbiBvcHBvc2VkIHRoZSBSb21hbnM7IGZvciBpdCBpcyBlYXNpZXIgdG8gY29uZmVyIGZhdm91cnMgb24gc3VwcGxpYW50cyB0aGFuIGl0IGlzIHRvIHZleCB3aXRoIG9wcG9zaXRpb24gdGhvc2Ugd2hvIGFyZSBtb3JlIHBvd2VyZnVsLiBCdXQgc2luY2UsIGFmdGVyIHRoaXMgZXhhbWluYXRpb24sIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHR3byBtZW4gaXMgaGFyZCB0byBkZWZpbmUsIEkgbGVhdmUgaXQgdG8gbXkgcmVhZGVyIHRvIHNheSB3aGV0aGVyLCBpZiB3ZSBhd2FyZCB0byB0aGUgR3JlZWsgdGhlIGNyb3duIGZvciBtaWxpdGFyeSBleHBlcmllbmNlIGFuZCBnZW5lcmFsc2hpcCwgYW5kIHRvIHRoZSBSb21hbiB0aGF0IGZvciBqdXN0aWNlIGFuZCBnb29kbmVzcyBvZiBoZWFydCwgd2Ugc2hhbGwgbm90IG1ha2UgYSBmYWlyIGRlY2lzaW9uLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
